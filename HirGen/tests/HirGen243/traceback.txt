==========mod==========
#[version = "0.0.5"]
def @func_4252(%var_4213: Tensor[(3, 9, 3), int64], %var_4214: Tensor[(3, 9, 3), int64]) -> (Tensor[(3, 9, 3), float64],) {
  %0 = cast(%var_4214, dtype="bool") /* ty=Tensor[(3, 9, 3), bool] */;
  %1 = shape_of(%var_4213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_4213, dtype="bool") /* ty=Tensor[(3, 9, 3), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = equal(%2, %3) /* ty=Tensor[(3, 9, 3), bool] */;
  %5 = cast(%4, dtype="float64") /* ty=Tensor[(3, 9, 3), float64] */;
  %6 = shape_of(%var_4213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_4213, dtype="float64") /* ty=Tensor[(3, 9, 3), float64] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %9 = power(%7, %8) /* ty=Tensor[(3, 9, 3), float64] */;
  (%9,)
}

def @func_3717() -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(18), float64]) {
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %11 = reshape(%10, newshape=[2, 3, 3]) /* ty=Tensor[(2, 3, 3), float64] */;
  %12 = @func_3130(%11) /* ty=(Tensor[(2, 3, 3), float64], Tensor[(13, 12, 14), float32]) */;
  %13 = @func_3396() /* ty=Tensor[(10, 11, 15), float32] */;
  %14 = %12.1;
  (%13, %14, meta[relay.Constant][0] /* ty=Tensor[(18), float64] */)
}

def @func_6264() -> Tensor[(13, 12, 14), float32] {
  %15 = @func_3717() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(18), float64]) */;
  %15.1
}

def @func_5928(%var_5924: Tensor[(720, 1), float64]) -> (Tensor[(13, 12, 14), float32], Tensor[(2016), float32], Tensor[(720, 1), float64], Tensor[(32), uint8]) {
  %16 = cast(%var_5924, dtype="float64") /* ty=Tensor[(720, 1), float64] */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %18 = reshape(%16, newshape=[10, 6, 12]) /* ty=Tensor[(10, 6, 12), float64] */;
  %19 = reshape(%17, newshape=[1, 32]) /* ty=Tensor[(1, 32), uint8] */;
  %20 = @func_4419(%18, %19) /* ty=(Tensor[(10, 6, 12), float64], Tensor[(2016, 1), float32], Tensor[(2184), float32], Tensor[(1, 32), uint8], Tensor[(80, 2), uint8], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(2184), float64], Tensor[(10, 11, 15), float32]) */;
  %21 = @func_4152() /* ty=Tensor[(13, 12, 14), float32] */;
  %22 = %20.5;
  (%21, %22, %var_5924, meta[relay.Constant][1] /* ty=Tensor[(32), uint8] */)
}

def @func_5786() -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(16, 8, 15), float64], Tensor[(1650), float32], Tensor[(36), float64]) {
  %23 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
  %24 = cast(meta[relay.Constant][2] /* ty=Tensor[(1650), float32] */, dtype="float32") /* ty=Tensor[(1650), float32] */;
  %25 = cast(meta[relay.Constant][3] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %26 = reshape(%24, newshape=[10, 11, 15]) /* ty=Tensor[(10, 11, 15), float32] */;
  %27 = reshape(%25, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %28 = @func_1265(%26, %27) /* ty=(Tensor[(10, 11, 15), int8], Tensor[(36), float64], Tensor[(13, 12, 14), float32], Tensor[(2184), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) */;
  %29 = %23.1;
  %30 = @func_4152() /* ty=Tensor[(13, 12, 14), float32] */;
  %31 = %28.4;
  (%29, %30, %31, meta[relay.Constant][2] /* ty=Tensor[(1650), float32] */, meta[relay.Constant][3] /* ty=Tensor[(36), float64] */)
}

def @func_1364() -> Tensor[(10, 11, 15), float32] {
  %32 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %32.0
}

def @func_3099(%var_3087: Tensor[(13, 12, 14), float32], %var_3096: Tensor[(32), uint8]) -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) {
  %33 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %34 = @func_2103() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) */;
  %35 = %34.0;
  %36 = cast(%var_3087, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %40 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %41 = cast(%var_3096, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %42 = cast(meta[relay.Constant][4] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %43 = reshape(%41, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %44 = reshape(%42, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %45 = @func_1314(%43, %44) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) */;
  %46 = %33.0;
  %47 = floor_divide(%38, %39) /* ty=Tensor[(13, 12, 14), float32] */;
  %48 = %40.0;
  %49 = %45.1;
  (%46, %47, %48, %49, %var_3096, meta[relay.Constant][4] /* ty=Tensor[(160), uint8] */)
}

def @func_1265(%var_1172: Tensor[(10, 11, 15), float32], %var_1183: Tensor[(36), float64]) -> (Tensor[(10, 11, 15), int8], Tensor[(36), float64], Tensor[(13, 12, 14), float32], Tensor[(2184), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) {
  %50 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %51 = %50.0;
  %52 = cast(%var_1172, dtype="int8") /* ty=Tensor[(10, 11, 15), int8] */;
  %53 = shape_of(%51, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%51, dtype="int8") /* ty=Tensor[(10, 11, 15), int8] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %57 = reshape(%56, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float64] */;
  %58 = @func_937(%57) /* ty=(Tensor[(13, 12, 14), float32],) */;
  %59 = cast(-6.92343f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %60 = cast(%var_1183, dtype="float64") /* ty=Tensor[(36), float64] */;
  %61 = reshape(%59, newshape=[]) /* ty=float32 */;
  %62 = reshape(%60, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %63 = @func_386(%61, %62) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(11, 10, 11), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) */;
  %64 = %63.3;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %66 = cos(%65) /* ty=Tensor[(16, 8, 15), float64] */;
  %67 = cast(%66, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %68 = reshape(%67, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %69 = cast(%66, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %70 = rsqrt(%69) /* ty=Tensor[(16, 8, 15), float64] */;
  %71 = cast(%70, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %72 = cast(-6.92343f /* ty=float32 */, dtype="float64") /* ty=float64 */;
  %73 = right_shift(%54, %55) /* ty=Tensor[(10, 11, 15), int8] */;
  %74 = %58.0;
  %75 = @func_83(%68) /* ty=Tensor[(16, 8, 15), float64] */;
  %76 = add(%71, %72) /* ty=Tensor[(16, 8, 15), float64] */;
  (%73, %var_1183, %74, meta[relay.Constant][5] /* ty=Tensor[(2184), float64] */, %75, %76)
}

def @func_2771(%var_2768: Tensor[(32), uint8]) -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), bool], Tensor[(10, 11, 15), bool], Tensor[(36), float64], Tensor[(32), uint8]) {
  %77 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %78 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %79 = %78.0;
  %80 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %81 = %80.0;
  %82 = cast(%81, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
  %83 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%79, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %86 = cast(%79, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %87 = cast(meta[relay.Constant][6] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %88 = cast(%var_2768, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %89 = reshape(%86, newshape=[10, 11, 15]) /* ty=Tensor[(10, 11, 15), float32] */;
  %90 = reshape(%87, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %91 = reshape(%88, newshape=[1, 32]) /* ty=Tensor[(1, 32), uint8] */;
  %92 = @func_1702(%89, %90, %91) /* ty=(Tensor[(10, 11, 15), uint16], Tensor[(10, 11, 15), bool], Tensor[(2184), float64], Tensor[(36), float64], Tensor[(4, 5, 8), float64], Tensor[(1, 32), uint8], Tensor[(160), uint8]) */;
  %93 = %77.0;
  %94 = less(%84, %85) /* ty=Tensor[(10, 11, 15), bool] */;
  %95 = %92.1;
  (%93, %94, %95, meta[relay.Constant][6] /* ty=Tensor[(36), float64] */, %var_2768)
}

def @func_1702(%var_1660: Tensor[(10, 11, 15), float32], %var_1682: Tensor[(36), float64], %var_1687: Tensor[(1, 32), uint8]) -> (Tensor[(10, 11, 15), uint16], Tensor[(10, 11, 15), bool], Tensor[(2184), float64], Tensor[(36), float64], Tensor[(4, 5, 8), float64], Tensor[(1, 32), uint8], Tensor[(160), uint8]) {
  %96 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %97 = %96.0;
  %98 = cast(%var_1660, dtype="uint16") /* ty=Tensor[(10, 11, 15), uint16] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="uint16") /* ty=Tensor[(10, 11, 15), uint16] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %102 = cast(%97, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
  %103 = shape_of(%var_1660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%var_1660, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %106 = not_equal(%104, %105) /* ty=Tensor[(10, 11, 15), bool] */;
  %107 = cast(%106, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %108 = cast(%var_1682, dtype="float64") /* ty=Tensor[(36), float64] */;
  %109 = reshape(%107, newshape=[10, 11, 15]) /* ty=Tensor[(10, 11, 15), float32] */;
  %110 = reshape(%108, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %111 = @func_1265(%109, %110) /* ty=(Tensor[(10, 11, 15), int8], Tensor[(36), float64], Tensor[(13, 12, 14), float32], Tensor[(2184), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) */;
  %112 = cast(%var_1687, dtype="uint8") /* ty=Tensor[(1, 32), uint8] */;
  %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %114 = reshape(%112, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), uint8] */;
  %115 = reshape(%113, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), uint8] */;
  %116 = @func_1113(%114, %115) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(4, 5, 8), float64]) */;
  %117 = multiply(%100, %101) /* ty=Tensor[(10, 11, 15), uint16] */;
  %118 = %111.3;
  %119 = %116.3;
  (%117, %106, %118, %var_1682, %119, %var_1687, meta[relay.Constant][7] /* ty=Tensor[(160), uint8] */)
}

def @func_5404() -> (Tensor[(10, 11, 15), float32],) {
  %120 = @func_1762() /* ty=Tensor[(10, 11, 15), float32] */;
  (%120,)
}

def @func_3000() -> (Tensor[(10, 11, 15), float32],) {
  %121 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
  (%121,)
}

def @func_1314(%var_1302: Tensor[(32), uint8], %var_1303: Tensor[(160), uint8]) -> (Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) {
  %122 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %123 = cast(%var_1302, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %124 = cast(%var_1303, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %125 = reshape(%123, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), uint8] */;
  %126 = reshape(%124, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), uint8] */;
  %127 = @func_1113(%125, %126) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(4, 5, 8), float64]) */;
  %128 = %122.0;
  %129 = %127.2;
  (%128, %129, %var_1302, %var_1303)
}

def @func_5551(%var_5535: Tensor[(11, 9, 14), float32], %var_5541: Tensor[(18), float64]) -> (Tensor[(13, 12, 14), float32], Tensor[(18), float64], Tensor[(11, 9, 14), float32]) {
  %130 = cast(%var_5541, dtype="float64") /* ty=Tensor[(18), float64] */;
  %131 = reshape(%130, newshape=[2, 3, 3]) /* ty=Tensor[(2, 3, 3), float64] */;
  %132 = @func_3130(%131) /* ty=(Tensor[(2, 3, 3), float64], Tensor[(13, 12, 14), float32]) */;
  %133 = cast(%var_5535, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
  %134 = acosh(%133) /* ty=Tensor[(11, 9, 14), float32] */;
  %135 = cast(%134, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
  %136 = cosh(%135) /* ty=Tensor[(11, 9, 14), float32] */;
  %137 = cast(%136, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
  %138 = %132.1;
  %139 = log10(%137) /* ty=Tensor[(11, 9, 14), float32] */;
  (%138, %var_5541, %139)
}

def @func_3193(%var_3172: Tensor[(2016), float32], %var_3173: Tensor[(36), float64], %var_3175: Tensor[(13, 12, 14), float32]) -> (Tensor[(10, 11, 15), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(13, 12, 14), bool]) {
  %140 = cast(%var_3172, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %141 = cast(%var_3173, dtype="float64") /* ty=Tensor[(36), float64] */;
  %142 = reshape(%140, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %143 = reshape(%141, newshape=[36, 1]) /* ty=Tensor[(36, 1), float64] */;
  %144 = @func_1581(%142, %143) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(36, 1), float64], Tensor[(16, 14, 9), bool]) */;
  %145 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %146 = %145.0;
  %147 = cast(%var_3175, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %151 = %144.1;
  %152 = less(%149, %150) /* ty=Tensor[(13, 12, 14), bool] */;
  (%151, %var_3172, %var_3173, %152)
}

def @func_4925(%var_4900: Tensor[(12, 6, 16), float32], %var_4905: float32, %var_4922: Tensor[(2184), float32], %var_4923: Tensor[(32), uint8]) -> (Tensor[(12, 6, 16), float32], Tensor[(16, 8, 15), float64], float32, Tensor[(36), float64], Tensor[(160), uint8], Tensor[(2184), float32], Tensor[(32), uint8]) {
  %153 = cast(%var_4900, dtype="float32") /* ty=Tensor[(12, 6, 16), float32] */;
  %154 = cast(%var_4905, dtype="float32") /* ty=float32 */;
  %155 = cast(meta[relay.Constant][8] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %156 = reshape(%154, newshape=[]) /* ty=float32 */;
  %157 = reshape(%155, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %158 = @func_386(%156, %157) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(11, 10, 11), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) */;
  %159 = cast(%var_4922, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %160 = cast(%var_4923, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %161 = reshape(%159, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float32] */;
  %162 = reshape(%160, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %163 = @func_3099(%161, %162) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) */;
  %164 = exp(%153) /* ty=Tensor[(12, 6, 16), float32] */;
  %165 = %158.0;
  %166 = %163.5;
  (%164, %165, %var_4905, meta[relay.Constant][8] /* ty=Tensor[(36), float64] */, %166, %var_4922, %var_4923)
}

def @func_2264(%var_2216: Tensor[(96, 20), float64], %var_2256: Tensor[(2016), float32]) -> (Tensor[(10, 11, 15), float32], Tensor[(96, 20), float64], Tensor[(16, 8, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(2016), float32], Tensor[(36), float64]) {
  %167 = cast(%var_2216, dtype="float64") /* ty=Tensor[(96, 20), float64] */;
  %168 = reshape(%167, newshape=[1920]) /* ty=Tensor[(1920), float64] */;
  %169 = @func_1833(%168) /* ty=(Tensor[(10, 11, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(1920), float64]) */;
  %170 = %169.1;
  %171 = cast(%170, dtype="float32") /* ty=Tensor[(16, 8, 15), float32] */;
  %172 = cast(%var_2256, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %173 = cast(meta[relay.Constant][9] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %174 = reshape(%172, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %175 = reshape(%173, newshape=[36, 1]) /* ty=Tensor[(36, 1), float64] */;
  %176 = @func_1581(%174, %175) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(36, 1), float64], Tensor[(16, 14, 9), bool]) */;
  %177 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
  %178 = sigmoid(%171) /* ty=Tensor[(16, 8, 15), float32] */;
  %179 = %176.0;
  (%177, %var_2216, %178, %179, %var_2256, meta[relay.Constant][9] /* ty=Tensor[(36), float64] */)
}

def @func_3666() -> (Tensor[(12, 16, 6), float32], Tensor[(12, 16, 6), float32]) {
  %180 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 6), float32] */;
  %181 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(12, 16, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 6), float32] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %184 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 6), float32] */;
  %185 = power(%182, %183) /* ty=Tensor[(12, 16, 6), float32] */;
  %186 = asin(%184) /* ty=Tensor[(12, 16, 6), float32] */;
  (%185, %186)
}

def @func_6486() -> (Tensor[(84), float32],) {
  %187 = @func_4479() /* ty=(Tensor[(10, 11, 15), float64], Tensor[(7, 12, 6), float32], Tensor[(84), float32]) */;
  %188 = %187.2;
  (%188,)
}

def @func_3786() -> (Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), int64]) {
  %189 = cast(meta[relay.Constant][12] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %190 = reshape(%189, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %191 = @func_3479(%190) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float64]) */;
  %192 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
  %193 = cast(%192, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
  %194 = sinh(%193) /* ty=Tensor[(10, 11, 15), float64] */;
  %195 = cast(%192, dtype="int64") /* ty=Tensor[(10, 11, 15), int64] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="int64") /* ty=Tensor[(10, 11, 15), int64] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %199 = %191.2;
  %200 = add(%197, %198) /* ty=Tensor[(10, 11, 15), int64] */;
  (%199, meta[relay.Constant][12] /* ty=Tensor[(160), uint8] */, %200)
}

def @func_2103() -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) {
  %201 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
  %202 = %201.1;
  %203 = cast(%202, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %204 = reshape(%203, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float64] */;
  %205 = @func_937(%204) /* ty=(Tensor[(13, 12, 14), float32],) */;
  %206 = %205.0;
  (%202, %206)
}

def @func_3006() -> (Tensor[(13, 12, 14), float32],) {
  %207 = @func_2103() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) */;
  %208 = %207.1;
  (%208,)
}

def @func_5869(%var_5866: Tensor[(14, 1, 14), float32]) -> Tensor[(14, 1, 14), float32] {
  %209 = cast(%var_5866, dtype="float32") /* ty=Tensor[(14, 1, 14), float32] */;
  atan(%209) /* ty=Tensor[(14, 1, 14), float32] */
}

def @func_6148() -> (Tensor[(10, 11, 15), float32],) {
  %210 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %211 = %210.0;
  (%211,)
}

def @func_3396() -> Tensor[(10, 11, 15), float32] {
  @func_1374() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_3479(%var_3428: Tensor[(160), uint8]) -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float64]) {
  %212 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %213 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %214 = cast(meta[relay.Constant][13] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %215 = cast(%var_3428, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %216 = reshape(%214, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %217 = reshape(%215, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %218 = @func_1314(%216, %217) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) */;
  %219 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %220 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %221 = %220.0;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
  %223 = %212.0;
  %224 = %213.0;
  %225 = %218.2;
  %226 = @func_1993() /* ty=Tensor[(10, 11, 15), float32] */;
  %227 = %219.0;
  %228 = rsqrt(%222) /* ty=Tensor[(10, 11, 15), float64] */;
  (%223, %224, %225, meta[relay.Constant][13] /* ty=Tensor[(32), uint8] */, %var_3428, %226, %227, %228)
}

def @func_4807() -> (Tensor[(13, 12, 14), float32],) {
  %229 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %230 = %229.0;
  (%230,)
}

def @func_6085(%var_6026: Tensor[(36), float64]) -> (Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(18), float64], Tensor[(13, 12, 14), float32], Tensor[(2184), float64], Tensor[(84), float32], Tensor[(7, 12, 6), float64]) {
  %231 = @func_4776() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
  %232 = %231.1;
  %233 = cast(%232, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %234 = cast(%var_6026, dtype="float64") /* ty=Tensor[(36), float64] */;
  %235 = cast(meta[relay.Constant][14] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %236 = reshape(%233, newshape=[10, 11, 15]) /* ty=Tensor[(10, 11, 15), float32] */;
  %237 = reshape(%234, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %238 = reshape(%235, newshape=[1, 32]) /* ty=Tensor[(1, 32), uint8] */;
  %239 = @func_1702(%236, %237, %238) /* ty=(Tensor[(10, 11, 15), uint16], Tensor[(10, 11, 15), bool], Tensor[(2184), float64], Tensor[(36), float64], Tensor[(4, 5, 8), float64], Tensor[(1, 32), uint8], Tensor[(160), uint8]) */;
  %240 = @func_3717() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(18), float64]) */;
  %241 = cast(meta[relay.Constant][15] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %242 = reshape(%241, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float64] */;
  %243 = @func_937(%242) /* ty=(Tensor[(13, 12, 14), float32],) */;
  %244 = cast(meta[relay.Constant][16] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %245 = reshape(%244, newshape=[7, 12, 1]) /* ty=Tensor[(7, 12, 1), float32] */;
  %246 = @func_4359(%245) /* ty=Tensor[(7, 12, 6), float32] */;
  %247 = cast(%246, dtype="float64") /* ty=Tensor[(7, 12, 6), float64] */;
  %248 = %239.3;
  %249 = %240.2;
  %250 = %243.0;
  %251 = log10(%247) /* ty=Tensor[(7, 12, 6), float64] */;
  (%232, %248, %var_6026, meta[relay.Constant][14] /* ty=Tensor[(32), uint8] */, %249, %250, meta[relay.Constant][15] /* ty=Tensor[(2184), float64] */, meta[relay.Constant][16] /* ty=Tensor[(84), float32] */, %251)
}

def @func_1752(%var_1746: Tensor[(160), uint8]) -> (Tensor[(10, 11, 15), float32], Tensor[(4, 5, 8), float64], Tensor[(4, 8), uint8], Tensor[(160), uint8]) {
  %252 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 8), uint8] */, dtype="uint8") /* ty=Tensor[(4, 8), uint8] */;
  %253 = cast(%var_1746, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %254 = reshape(%252, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), uint8] */;
  %255 = reshape(%253, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), uint8] */;
  %256 = @func_1113(%254, %255) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(4, 5, 8), float64]) */;
  %257 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
  %258 = %256.3;
  (%257, %258, meta[relay.Constant][17] /* ty=Tensor[(4, 8), uint8] */, %var_1746)
}

def @func_6679() -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float64]) {
  %259 = @func_3234() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %260 = %259.0;
  %261 = cast(%260, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %262 = @func_5577() /* ty=Tensor[(10, 11, 15), float32] */;
  %263 = rsqrt(%261) /* ty=Tensor[(13, 12, 14), float64] */;
  (%262, %263)
}

def @func_7390() -> (Tensor[(13, 12, 14), float32],) {
  %264 = @func_3234() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %265 = %264.0;
  (%265,)
}

def @func_3130(%var_3108: Tensor[(2, 3, 3), float64]) -> (Tensor[(2, 3, 3), float64], Tensor[(13, 12, 14), float32]) {
  %266 = cast(%var_3108, dtype="float64") /* ty=Tensor[(2, 3, 3), float64] */;
  %267 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(2, 3, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 3, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 3, 3), float64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %270 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %271 = floor_mod(%268, %269) /* ty=Tensor[(2, 3, 3), float64] */;
  %272 = %270.0;
  (%271, %272)
}

def @func_4776() -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  %273 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %274 = %273.0;
  %275 = cast(%274, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %276 = exp(%275) /* ty=Tensor[(13, 12, 14), float64] */;
  %277 = cast(%276, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %278 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %279 = sinh(%277) /* ty=Tensor[(13, 12, 14), float32] */;
  %280 = %278.0;
  (%279, %280)
}

def @func_3234() -> (Tensor[(13, 12, 14), float32],) {
  %281 = @func_2416() /* ty=Tensor[(13, 12, 14), float32] */;
  (%281,)
}

def @func_7857(%var_7839: Tensor[(8, 4), uint8], %var_7846: Tensor[(720), float64]) -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(8, 4), uint8], Tensor[(720), float64], Tensor[(2016), float64]) {
  %282 = @func_7677() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
  %283 = %282.0;
  %284 = cast(%283, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %285 = cast(%var_7839, dtype="uint8") /* ty=Tensor[(8, 4), uint8] */;
  %286 = reshape(%284, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float32] */;
  %287 = reshape(%285, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %288 = @func_3099(%286, %287) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) */;
  %289 = cast(%var_7846, dtype="float64") /* ty=Tensor[(720), float64] */;
  %290 = reshape(%289, newshape=[720, 1]) /* ty=Tensor[(720, 1), float64] */;
  %291 = @func_5928(%290) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(2016), float32], Tensor[(720, 1), float64], Tensor[(32), uint8]) */;
  %292 = %291.1;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(2016), float64] */;
  %294 = %288.0;
  %295 = asin(%293) /* ty=Tensor[(2016), float64] */;
  (%283, %294, %var_7839, %var_7846, %295)
}

def @func_1970(%var_1901: Tensor[(504, 4), float32], %var_1918: Tensor[(2184), float64]) -> (Tensor[(10, 11, 15), float64], Tensor[(16, 14, 9), bool], Tensor[(504, 4), float32], Tensor[(36), float64], Tensor[(10, 11, 15), bool], Tensor[(2184), float64], Tensor[(16, 10), uint8], Tensor[(10, 11, 15), int64], Tensor[(13, 12, 14), float64], Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32]) {
  %296 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
  %298 = cast(%var_1901, dtype="float32") /* ty=Tensor[(504, 4), float32] */;
  %299 = cast(meta[relay.Constant][19] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %300 = reshape(%298, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %301 = reshape(%299, newshape=[36, 1]) /* ty=Tensor[(36, 1), float64] */;
  %302 = @func_1581(%300, %301) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(36, 1), float64], Tensor[(16, 14, 9), bool]) */;
  %303 = cast(%296, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
  %304 = sin(%303) /* ty=Tensor[(10, 11, 15), float64] */;
  %305 = cast(%304, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %306 = acos(%305) /* ty=Tensor[(10, 11, 15), float32] */;
  %307 = cast(%296, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %311 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 10), uint8] */, dtype="uint8") /* ty=Tensor[(16, 10), uint8] */;
  %312 = reshape(%311, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %313 = @func_1752(%312) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(4, 5, 8), float64], Tensor[(4, 8), uint8], Tensor[(160), uint8]) */;
  %314 = %313.0;
  %315 = cast(%314, dtype="int64") /* ty=Tensor[(10, 11, 15), int64] */;
  %316 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%306, dtype="int64") /* ty=Tensor[(10, 11, 15), int64] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %319 = cast(%var_1918, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %320 = reshape(%319, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float64] */;
  %321 = @func_937(%320) /* ty=(Tensor[(13, 12, 14), float32],) */;
  %322 = %321.0;
  %323 = cast(%322, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %324 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %325 = log2(%297) /* ty=Tensor[(10, 11, 15), float64] */;
  %326 = %302.3;
  %327 = less_equal(%309, %310) /* ty=Tensor[(10, 11, 15), bool] */;
  %328 = bitwise_xor(%317, %318) /* ty=Tensor[(10, 11, 15), int64] */;
  %329 = log10(%323) /* ty=Tensor[(13, 12, 14), float64] */;
  %330 = @func_1364() /* ty=Tensor[(10, 11, 15), float32] */;
  %331 = %324.0;
  (%325, %326, %var_1901, meta[relay.Constant][19] /* ty=Tensor[(36), float64] */, %327, %var_1918, meta[relay.Constant][20] /* ty=Tensor[(16, 10), uint8] */, %328, %329, %330, %331)
}

def @func_4359(%var_4351: Tensor[(7, 12, 1), float32]) -> Tensor[(7, 12, 6), float32] {
  %332 = cast(%var_4351, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %333 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 12, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 6), float32] */;
  floor_divide(%332, %333) /* ty=Tensor[(7, 12, 6), float32] */
}

def @func_4029() -> (Tensor[(10, 11, 15), float32],) {
  %334 = @func_3898() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %335 = %334.0;
  %336 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 11, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%335, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %340 = mod(%338, %339) /* ty=Tensor[(10, 11, 15), float32] */;
  (%340,)
}

def @func_7414(%var_7398: Tensor[(2, 13, 8), int64], %var_7399: Tensor[(2, 13, 8), int64]) -> (Tensor[(2, 13, 8), int64], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(2016), float32], Tensor[(36), float64]) {
  %341 = cast(%var_7399, dtype="int64") /* ty=Tensor[(2, 13, 8), int64] */;
  %342 = shape_of(%var_7398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_7398, dtype="int64") /* ty=Tensor[(2, 13, 8), int64] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %345 = @func_5458() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %346 = %345.0;
  %347 = cast(%346, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %348 = cast(meta[relay.Constant][23] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %349 = cast(meta[relay.Constant][24] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %350 = cast(meta[relay.Constant][25] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %351 = cast(meta[relay.Constant][26] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %352 = reshape(%347, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float32] */;
  %353 = reshape(%348, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %354 = reshape(%349, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %355 = reshape(%350, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), float32] */;
  %356 = reshape(%351, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %357 = @func_2674(%352, %353, %354, %355, %356) /* ty=(Tensor[(13, 12, 14), int16], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(2016, 1), float32], Tensor[(36), float64]) */;
  %358 = right_shift(%343, %344) /* ty=Tensor[(2, 13, 8), int64] */;
  %359 = %357.4;
  (%358, %346, %359, meta[relay.Constant][23] /* ty=Tensor[(32), uint8] */, meta[relay.Constant][24] /* ty=Tensor[(160), uint8] */, meta[relay.Constant][25] /* ty=Tensor[(2016), float32] */, meta[relay.Constant][26] /* ty=Tensor[(36), float64] */)
}

def @func_7331() -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  %360 = @func_4646() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %361 = %360.0;
  %362 = @func_4687() /* ty=Tensor[(10, 11, 15), float32] */;
  (%361, %362)
}

def @func_4646() -> (Tensor[(13, 12, 14), float32],) {
  %363 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %364 = %363.0;
  %365 = cast(%364, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %366 = asinh(%365) /* ty=Tensor[(13, 12, 14), float32] */;
  (%366,)
}

def @func_386(%var_334: float32, %var_344: Tensor[(36), float64]) -> (Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(11, 10, 11), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) {
  %367 = cast(%var_344, dtype="float64") /* ty=Tensor[(36), float64] */;
  %368 = reshape(%367, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float64] */;
  %369 = @func_319(%368) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(12, ?, 3), int64], Tensor[(12, ?, 3), float64]) */;
  %370 = cast(%var_334, dtype="float32") /* ty=float32 */;
  %371 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 10, 11), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 11), float32] */;
  %372 = mod(%370, %371) /* ty=Tensor[(11, 10, 11), float32] */;
  %373 = cast(%372, dtype="float32") /* ty=Tensor[(11, 10, 11), float32] */;
  %374 = log10(%373) /* ty=Tensor[(11, 10, 11), float32] */;
  %375 = cast(%374, dtype="float64") /* ty=Tensor[(11, 10, 11), float64] */;
  %376 = cast(%var_344, dtype="float64") /* ty=Tensor[(36), float64] */;
  %377 = reshape(%376, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float64] */;
  %378 = @func_319(%377) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(12, ?, 3), int64], Tensor[(12, ?, 3), float64]) */;
  %379 = %378.0;
  %380 = cast(%379, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %381 = reshape(%380, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %382 = cast(%379, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %383 = reshape(%382, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %384 = %369.0;
  %385 = exp(%375) /* ty=Tensor[(11, 10, 11), float64] */;
  %386 = @func_83(%381) /* ty=Tensor[(16, 8, 15), float64] */;
  %387 = @func_83(%383) /* ty=Tensor[(16, 8, 15), float64] */;
  (%384, %var_344, %385, %379, %386, %387)
}

def @func_7569() -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(1386), float32]) {
  %388 = @func_5293() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %389 = @func_7390() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %390 = cast(meta[relay.Constant][28] /* ty=Tensor[(1386), float32] */, dtype="float32") /* ty=Tensor[(1386), float32] */;
  %391 = reshape(%390, newshape=[1386]) /* ty=Tensor[(1386), float32] */;
  %392 = @func_7247(%391) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(11, 9, 14), float32], Tensor[(1386), float32], Tensor[(18), float64], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
  %393 = %388.0;
  %394 = %389.0;
  %395 = %392.6;
  (%393, %394, %395, meta[relay.Constant][28] /* ty=Tensor[(1386), float32] */)
}

def @func_3954(%var_3943: Tensor[(13, 12, 14), bool]) -> Tensor[(13, 12, 14), uint8] {
  %396 = @func_3298() /* ty=(Tensor[(13, 12, 14), bool],) */;
  %397 = %396.0;
  %398 = cast(%var_3943, dtype="uint8") /* ty=Tensor[(13, 12, 14), uint8] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%397, dtype="uint8") /* ty=Tensor[(13, 12, 14), uint8] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%400, %401) /* ty=Tensor[(13, 12, 14), uint8] */
}

def @func_1374() -> Tensor[(10, 11, 15), float32] {
  %402 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %402.0
}

def @main(%var_8568: Tensor[(16, 4, 8), float64]) -> (Tensor[(16, 4, 8), float64],) {
  %403 = cast(%var_8568, dtype="float64") /* ty=Tensor[(16, 4, 8), float64] */;
  %404 = log(%403) /* ty=Tensor[(16, 4, 8), float64] */;
  (%404,)
}

def @func_4827() -> Tensor[(13, 12, 14), float32] {
  %405 = @func_4776() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
  %405.0
}

def @func_6311(%var_6289: Tensor[(1920), float64]) -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(13, 12, 14), float32]) {
  %406 = @func_5328() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %407 = cast(%var_6289, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %408 = reshape(%407, newshape=[1920]) /* ty=Tensor[(1920), float64] */;
  %409 = @func_1833(%408) /* ty=(Tensor[(10, 11, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(1920), float64]) */;
  %410 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
  %411 = @func_5577() /* ty=Tensor[(10, 11, 15), float32] */;
  %412 = @func_4827() /* ty=Tensor[(13, 12, 14), float32] */;
  %413 = %406.0;
  %414 = %409.1;
  %415 = %410.1;
  (%411, %412, %413, %414, %var_6289, %415)
}

def @func_2041(%var_2017: Tensor[(1008, 2), float32]) -> (Tensor[(10, 11, 15), float32], Tensor[(1008, 2), float32], Tensor[(36), float64], Tensor[(16, 8, 15), float64]) {
  %416 = cast(%var_2017, dtype="float32") /* ty=Tensor[(1008, 2), float32] */;
  %417 = cast(meta[relay.Constant][29] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %418 = reshape(%416, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), float32] */;
  %419 = reshape(%417, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %420 = @func_548(%418, %419) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) */;
  %421 = %420.2;
  %422 = cast(%421, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %423 = @func_1993() /* ty=Tensor[(10, 11, 15), float32] */;
  %424 = sin(%422) /* ty=Tensor[(16, 8, 15), float64] */;
  (%423, %var_2017, meta[relay.Constant][29] /* ty=Tensor[(36), float64] */, %424)
}

def @func_6794() -> Tensor[(10, 11, 15), float32] {
  @func_6331() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_4687() -> Tensor[(10, 11, 15), float32] {
  %425 = @func_1762() /* ty=Tensor[(10, 11, 15), float32] */;
  %426 = cast(%425, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  tan(%426) /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_5577() -> Tensor[(10, 11, 15), float32] {
  %427 = @func_4610() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
  %427.1
}

def @func_7677() -> (Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) {
  %428 = @func_7569() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(1386), float32]) */;
  %429 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
  %430 = %428.1;
  %431 = %429.2;
  (%430, %431)
}

def @func_1581(%var_1568: Tensor[(2016), float32], %var_1569: Tensor[(36, 1), float64]) -> (Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(36, 1), float64], Tensor[(16, 14, 9), bool]) {
  %432 = cast(%var_1568, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %433 = cast(%var_1569, dtype="float64") /* ty=Tensor[(36, 1), float64] */;
  %434 = reshape(%432, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), float32] */;
  %435 = reshape(%433, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %436 = @func_548(%434, %435) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) */;
  %437 = %436.0;
  %438 = cast(%var_1568, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%437, dtype="bool") /* ty=Tensor[(16, 14, 9), bool] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %442 = @func_1364() /* ty=Tensor[(10, 11, 15), float32] */;
  %443 = @func_1364() /* ty=Tensor[(10, 11, 15), float32] */;
  %444 = logical_and(%440, %441) /* ty=Tensor[(16, 14, 9), bool] */;
  (%442, %443, %var_1569, %444)
}

def @func_5674(%var_5667: Tensor[(9, 10, 1), uint8]) -> (Tensor[(9, 10, 1), uint8],) {
  %445 = cast(meta[relay.Constant][30] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %446 = cast(%var_5667, dtype="uint8") /* ty=Tensor[(9, 10, 1), uint8] */;
  %447 = add(%445, %446) /* ty=Tensor[(9, 10, 1), uint8] */;
  (%447,)
}

def @func_2807(%var_2787: Tensor[(36), float64]) -> (Tensor[(14, 7, 13), float64], Tensor[(1920), float64], Tensor[(36), float64]) {
  %448 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 7, 13), float64] */, dtype="float64") /* ty=Tensor[(14, 7, 13), float64] */;
  %449 = cast(%var_2787, dtype="float64") /* ty=Tensor[(36), float64] */;
  %450 = reshape(%449, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float64] */;
  %451 = @func_319(%450) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(12, ?, 3), int64], Tensor[(12, ?, 3), float64]) */;
  %452 = cosh(%448) /* ty=Tensor[(14, 7, 13), float64] */;
  %453 = %451.1;
  (%452, %453, %var_2787)
}

def @func_4939() -> (Tensor[(10, 11, 15), float32],) {
  %454 = @func_2928() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %455 = %454.0;
  (%455,)
}

def @func_4152() -> Tensor[(13, 12, 14), float32] {
  %456 = @func_3234() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %456.0
}

def @func_5293() -> (Tensor[(13, 12, 14), float32],) {
  %457 = @func_3246() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %458 = %457.0;
  (%458,)
}

def @func_5328() -> (Tensor[(10, 11, 15), float32],) {
  %459 = @func_4610() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
  %460 = %459.1;
  (%460,)
}

def @func_319(%var_275: Tensor[(12, 1, 3), float64]) -> (Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(12, ?, 3), int64], Tensor[(12, ?, 3), float64]) {
  %461 = cast(meta[relay.Constant][32] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %462 = reshape(%461, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %463 = @func_83(%462) /* ty=Tensor[(16, 8, 15), float64] */;
  %464 = cast(%463, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %465 = reshape(%464, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %466 = cast(meta[relay.Constant][32] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %467 = reshape(%466, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %468 = @func_83(%467) /* ty=Tensor[(16, 8, 15), float64] */;
  %469 = cast(%468, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %470 = reshape(%469, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %471 = cast(%var_275, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  %472 = exp(%471) /* ty=Tensor[(12, 1, 3), float64] */;
  %473 = cast(%var_275, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %474 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%472, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %477 = greater(%475, %476) /* ty=Tensor[(12, ?, 3), bool] */;
  %478 = cast(%var_275, dtype="int64") /* ty=Tensor[(12, 1, 3), int64] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%477, dtype="int64") /* ty=Tensor[(12, ?, 3), int64] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %482 = cast(%472, dtype="uint8") /* ty=Tensor[(12, 1, 3), uint8] */;
  %483 = shape_of(%var_275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_275, dtype="uint8") /* ty=Tensor[(12, 1, 3), uint8] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %486 = right_shift(%484, %485) /* ty=Tensor[(12, ?, 3), uint8] */;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(12, ?, 3), float64] */;
  %488 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%472, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %491 = @func_83(%465) /* ty=Tensor[(16, 8, 15), float64] */;
  %492 = @func_83(%470) /* ty=Tensor[(16, 8, 15), float64] */;
  %493 = bitwise_xor(%480, %481) /* ty=Tensor[(12, ?, 3), int64] */;
  %494 = floor_divide(%489, %490) /* ty=Tensor[(12, ?, 3), float64] */;
  (%463, meta[relay.Constant][32] /* ty=Tensor[(1920), float64] */, %491, %468, %492, %493, %494)
}

def @func_1113(%var_1048: Tensor[(4, 1, 8), uint8], %var_1049: Tensor[(4, 5, 8), uint8]) -> (Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(4, 5, 8), float64]) {
  %495 = cast(meta[relay.Constant][33] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %496 = cast(meta[relay.Constant][34] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %497 = reshape(%495, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), float32] */;
  %498 = reshape(%496, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %499 = @func_548(%497, %498) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) */;
  %500 = cast(%var_1048, dtype="uint8") /* ty=Tensor[(4, 1, 8), uint8] */;
  %501 = cast(%var_1049, dtype="uint8") /* ty=Tensor[(4, 5, 8), uint8] */;
  %502 = right_shift(%500, %501) /* ty=Tensor[(4, 5, 8), uint8] */;
  %503 = cast(%502, dtype="float64") /* ty=Tensor[(4, 5, 8), float64] */;
  %504 = %499.1;
  %505 = rsqrt(%503) /* ty=Tensor[(4, 5, 8), float64] */;
  (%504, meta[relay.Constant][33] /* ty=Tensor[(2016), float32] */, meta[relay.Constant][34] /* ty=Tensor[(36), float64] */, %505)
}

def @func_2674(%var_2619: Tensor[(13, 12, 14), float32], %var_2632: Tensor[(32), uint8], %var_2633: Tensor[(160), uint8], %var_2670: Tensor[(2016, 1), float32], %var_2671: Tensor[(36), float64]) -> (Tensor[(13, 12, 14), int16], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(2016, 1), float32], Tensor[(36), float64]) {
  %506 = @func_2134() /* ty=Tensor[(13, 12, 14), float32] */;
  %507 = cast(%var_2619, dtype="int16") /* ty=Tensor[(13, 12, 14), int16] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%506, dtype="int16") /* ty=Tensor[(13, 12, 14), int16] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %511 = cast(%var_2632, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %512 = cast(%var_2633, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %513 = reshape(%511, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %514 = reshape(%512, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %515 = @func_1314(%513, %514) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) */;
  %516 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %517 = cast(%var_2670, dtype="float32") /* ty=Tensor[(2016, 1), float32] */;
  %518 = cast(%var_2671, dtype="float64") /* ty=Tensor[(36), float64] */;
  %519 = reshape(%517, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), float32] */;
  %520 = reshape(%518, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %521 = @func_548(%519, %520) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) */;
  %522 = bitwise_and(%509, %510) /* ty=Tensor[(13, 12, 14), int16] */;
  %523 = %515.2;
  %524 = %516.0;
  %525 = @func_2416() /* ty=Tensor[(13, 12, 14), float32] */;
  %526 = @func_1993() /* ty=Tensor[(10, 11, 15), float32] */;
  %527 = %521.3;
  (%522, %523, %var_2632, %var_2633, %524, %525, %526, %527, %var_2670, %var_2671)
}

def @func_7016() -> (Tensor[(10, 11, 15), float32],) {
  %528 = @func_4029() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %529 = %528.0;
  (%529,)
}

def @func_6916(%var_6910: Tensor[(7, 2, 16), float32], %var_6911: Tensor[(7, 2, 16), float32]) -> (Tensor[(7, 2, 16), float32],) {
  %530 = cast(%var_6911, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %531 = shape_of(%var_6910, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%var_6910, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %534 = power(%532, %533) /* ty=Tensor[(7, 2, 16), float32] */;
  (%534,)
}

def @func_3246() -> (Tensor[(13, 12, 14), float32],) {
  %535 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %536 = %535.0;
  (%536,)
}

def @func_5088() -> (Tensor[(13, 12, 14), float32],) {
  %537 = @func_4776() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
  %538 = %537.0;
  (%538,)
}

def @func_3881() -> (Tensor[(10, 11, 15), float64], Tensor[(13, 12, 14), float32]) {
  %539 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %540 = %539.0;
  %541 = cast(%540, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
  %542 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %543 = asin(%541) /* ty=Tensor[(10, 11, 15), float64] */;
  %544 = %542.0;
  (%543, %544)
}

def @func_3022(%var_3012: Tensor[(1, 10, 13), uint32]) -> Tensor[(?, 10, 13), uint32] {
  %545 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 10, 13), uint32] */, dtype="uint32") /* ty=Tensor[(1, 10, 13), uint32] */;
  %546 = shape_of(%var_3012, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%var_3012, dtype="uint32") /* ty=Tensor[(1, 10, 13), uint32] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  add(%547, %548) /* ty=Tensor[(?, 10, 13), uint32] */
}

def @func_6377(%var_6342: Tensor[(1, 5, 9), int8], %var_6343: Tensor[(1, 5, 9), int8], %var_6362: Tensor[(2016), float32], %var_6363: Tensor[(3, 12), float64]) -> (Tensor[(13, 12, 14), float32], Tensor[(?, 5, 9), bool], Tensor[(16, 14, 9), bool], Tensor[(2016), float32], Tensor[(3, 12), float64]) {
  %549 = cast(%var_6343, dtype="int8") /* ty=Tensor[(1, 5, 9), int8] */;
  %550 = shape_of(%var_6342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%var_6342, dtype="int8") /* ty=Tensor[(1, 5, 9), int8] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %553 = maximum(%551, %552) /* ty=Tensor[(?, 5, 9), int8] */;
  %554 = cast(%553, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %555 = shape_of(%var_6342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%var_6342, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %558 = cast(%var_6362, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %559 = cast(%var_6363, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
  %560 = reshape(%558, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %561 = reshape(%559, newshape=[36, 1]) /* ty=Tensor[(36, 1), float64] */;
  %562 = @func_1581(%560, %561) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(36, 1), float64], Tensor[(16, 14, 9), bool]) */;
  %563 = @func_4827() /* ty=Tensor[(13, 12, 14), float32] */;
  %564 = equal(%556, %557) /* ty=Tensor[(?, 5, 9), bool] */;
  %565 = %562.3;
  (%563, %564, %565, %var_6362, %var_6363)
}

def @func_7802() -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32]) {
  %566 = @func_7390() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %567 = @func_4687() /* ty=Tensor[(10, 11, 15), float32] */;
  %568 = %566.0;
  (%567, %568)
}

def @func_1648() -> (Tensor[(10, 11, 15), float32],) {
  %569 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
  (%569,)
}

def @func_7129() -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32]) {
  %570 = @func_5328() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %571 = @func_4646() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %572 = %570.0;
  %573 = %571.0;
  (%572, %573)
}

def @func_7916() -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  %574 = @func_6525() /* ty=Tensor[(13, 12, 14), float32] */;
  %575 = @func_3396() /* ty=Tensor[(10, 11, 15), float32] */;
  (%574, %575)
}

def @func_7143() -> (Tensor[(10, 11, 15), float32],) {
  %576 = @func_3396() /* ty=Tensor[(10, 11, 15), float32] */;
  (%576,)
}

def @func_6525() -> Tensor[(13, 12, 14), float32] {
  @func_4827() /* ty=Tensor[(13, 12, 14), float32] */
}

def @func_83(%var_45: Tensor[(16, 8, 15), float64]) -> Tensor[(16, 8, 15), float64] {
  %577 = cast(%var_45, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  asin(%577) /* ty=Tensor[(16, 8, 15), float64] */
}

def @func_2318() -> (Tensor[(13, 12, 14), float32],) {
  %578 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
  %579 = %578.1;
  %580 = cast(%579, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %581 = acos(%580) /* ty=Tensor[(13, 12, 14), float32] */;
  (%581,)
}

def @func_6581() -> (Tensor[(13, 12, 14), float32],) {
  %582 = @func_5293() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %583 = %582.0;
  (%583,)
}

def @func_1479(%var_1468: Tensor[(10, 11, 15), float32]) -> Tensor[(10, 11, 15), int32] {
  %584 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
  %585 = cast(%584, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
  %586 = asinh(%585) /* ty=Tensor[(10, 11, 15), float64] */;
  %587 = cast(%586, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %588 = log10(%587) /* ty=Tensor[(10, 11, 15), float32] */;
  %589 = cast(%var_1468, dtype="int32") /* ty=Tensor[(10, 11, 15), int32] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="int32") /* ty=Tensor[(10, 11, 15), int32] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%591, %592) /* ty=Tensor[(10, 11, 15), int32] */
}

def @func_8391(%var_8335: Tensor[(32), uint8]) -> (Tensor[(13, 12, 14), float32], Tensor[(36), float64], Tensor[(32), bool], Tensor[(10, 11, 15), float32], Tensor[(2016), float32], Tensor[(2016), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) {
  %593 = @func_6871() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %594 = cast(meta[relay.Constant][36] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %595 = reshape(%594, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %596 = @func_2771(%595) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), bool], Tensor[(10, 11, 15), bool], Tensor[(36), float64], Tensor[(32), uint8]) */;
  %597 = cast(%var_8335, dtype="bool") /* ty=Tensor[(32), bool] */;
  %598 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(32), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %599 = cast(meta[relay.Constant][36] /* ty=Tensor[(32), uint8] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?), bool] */;
  %601 = @func_7129() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32]) */;
  %602 = cast(meta[relay.Constant][37] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %603 = %596.3;
  %604 = cast(%603, dtype="float64") /* ty=Tensor[(36), float64] */;
  %605 = %593.0;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %607 = reshape(%602, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %608 = reshape(%604, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %609 = reshape(%606, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float32] */;
  %610 = @func_3193(%607, %608, %609) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(13, 12, 14), bool]) */;
  %611 = @func_7569() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(1386), float32]) */;
  %612 = equal(%599, %600) /* ty=Tensor[(32), bool] */;
  %613 = %601.0;
  %614 = %610.1;
  %615 = @func_6525() /* ty=Tensor[(13, 12, 14), float32] */;
  %616 = %611.0;
  (%605, %603, %612, %613, %614, meta[relay.Constant][37] /* ty=Tensor[(2016), float32] */, %615, %616)
}

def @func_8460(%var_8445: Tensor[(1386), float32], %var_8453: Tensor[(1386), float32]) -> (Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(1386), uint8]) {
  %617 = @func_3786() /* ty=(Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), int64]) */;
  %618 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %619 = cast(%var_8445, dtype="float32") /* ty=Tensor[(1386), float32] */;
  %620 = reshape(%619, newshape=[1386]) /* ty=Tensor[(1386), float32] */;
  %621 = @func_7247(%620) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(11, 9, 14), float32], Tensor[(1386), float32], Tensor[(18), float64], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
  %622 = cast(%var_8453, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %623 = shape_of(%var_8445, dtype="int32") /* ty=Tensor[(1), int32] */;
  %624 = cast(%var_8445, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %626 = %617.1;
  %627 = %618.0;
  %628 = %621.1;
  %629 = subtract(%624, %625) /* ty=Tensor[(1386), uint8] */;
  (%626, %627, %628, %629)
}

def @func_3511() -> (Tensor[(2184), float64], Tensor[(10, 11, 15), float32]) {
  %630 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
  %631 = %630.2;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %633 = exp(%632) /* ty=Tensor[(2184), float64] */;
  %634 = @func_3396() /* ty=Tensor[(10, 11, 15), float32] */;
  (%633, %634)
}

def @func_4091() -> (Tensor[(10, 11, 15), float32], Tensor[(16, 14, 9), float32], Tensor[(2016, 1), float32], Tensor[(36), float64]) {
  %635 = cast(meta[relay.Constant][38] /* ty=Tensor[(2016, 1), float32] */, dtype="float32") /* ty=Tensor[(2016, 1), float32] */;
  %636 = cast(meta[relay.Constant][39] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %637 = reshape(%635, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), float32] */;
  %638 = reshape(%636, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %639 = @func_548(%637, %638) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) */;
  %640 = @func_3396() /* ty=Tensor[(10, 11, 15), float32] */;
  %641 = %639.1;
  (%640, %641, meta[relay.Constant][38] /* ty=Tensor[(2016, 1), float32] */, meta[relay.Constant][39] /* ty=Tensor[(36), float64] */)
}

def @func_3298() -> (Tensor[(13, 12, 14), bool],) {
  %642 = @func_3234() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %643 = %642.0;
  %644 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 12, 14), float32] */, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %648 = logical_or(%646, %647) /* ty=Tensor[(13, 12, 14), bool] */;
  (%648,)
}

def @func_8492() -> (Tensor[(10, 11, 15), float32], Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(10, 11, 15), float32]) {
  %649 = @func_2928() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %650 = cast(meta[relay.Constant][41] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %651 = reshape(%650, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %652 = @func_7129() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32]) */;
  %653 = %649.0;
  %654 = @func_83(%651) /* ty=Tensor[(16, 8, 15), float64] */;
  %655 = %652.0;
  (%653, %654, meta[relay.Constant][41] /* ty=Tensor[(1920), float64] */, %655)
}

def @func_1993() -> Tensor[(10, 11, 15), float32] {
  @func_1762() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_937(%var_930: Tensor[(13, 12, 14), float64]) -> (Tensor[(13, 12, 14), float32],) {
  %656 = cast(%var_930, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %657 = asin(%656) /* ty=Tensor[(13, 12, 14), float64] */;
  %658 = cast(%657, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %659 = atan(%658) /* ty=Tensor[(13, 12, 14), float32] */;
  (%659,)
}

def @func_2928() -> (Tensor[(10, 11, 15), float32],) {
  %660 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %661 = %660.0;
  (%661,)
}

def @func_4610() -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  %662 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %663 = @func_3898() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %664 = %662.0;
  %665 = %663.0;
  (%664, %665)
}

def @func_1434(%var_1400: Tensor[(2016), float32], %var_1401: Tensor[(36), float64]) -> (Tensor[(10, 11, 15), uint64], Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64]) {
  %666 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
  %667 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 11, 15), float32] */, dtype="uint64") /* ty=Tensor[(10, 11, 15), uint64] */;
  %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%666, dtype="uint64") /* ty=Tensor[(10, 11, 15), uint64] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %671 = cast(%var_1400, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %672 = cast(%var_1401, dtype="float64") /* ty=Tensor[(36), float64] */;
  %673 = reshape(%671, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), float32] */;
  %674 = reshape(%672, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %675 = @func_548(%673, %674) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) */;
  %676 = left_shift(%669, %670) /* ty=Tensor[(10, 11, 15), uint64] */;
  %677 = %675.0;
  (%676, %677, %var_1400, %var_1401)
}

def @func_4582(%var_4526: Tensor[(13, 12, 14), float32], %var_4558: float32) -> (Tensor[(13, 12, 14), bool], Tensor[(13, 12, 14), float32], Tensor[(16, 14, 9), float32], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(16, 8, 15), float64], float32, Tensor[(3, 12), float64], Tensor[(36), float64]) {
  %678 = @func_2416() /* ty=Tensor[(13, 12, 14), float32] */;
  %679 = cast(%var_4526, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%678, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %683 = cast(%678, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %684 = reshape(%683, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float64] */;
  %685 = @func_937(%684) /* ty=(Tensor[(13, 12, 14), float32],) */;
  %686 = @func_4091() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(16, 14, 9), float32], Tensor[(2016, 1), float32], Tensor[(36), float64]) */;
  %687 = cast(meta[relay.Constant][43] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %688 = reshape(%687, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %689 = @func_3479(%688) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float64]) */;
  %690 = cast(%var_4558, dtype="float32") /* ty=float32 */;
  %691 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 12), float64] */, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
  %692 = reshape(%690, newshape=[]) /* ty=float32 */;
  %693 = reshape(%691, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %694 = @func_386(%692, %693) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(11, 10, 11), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) */;
  %695 = %689.2;
  %696 = cast(%695, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %697 = cast(meta[relay.Constant][43] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %698 = reshape(%696, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %699 = reshape(%697, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %700 = @func_1314(%698, %699) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) */;
  %701 = logical_and(%681, %682) /* ty=Tensor[(13, 12, 14), bool] */;
  %702 = %685.0;
  %703 = %686.1;
  %704 = %694.5;
  %705 = %700.1;
  (%701, %702, %703, %695, meta[relay.Constant][43] /* ty=Tensor[(160), uint8] */, %704, %var_4558, meta[relay.Constant][44] /* ty=Tensor[(3, 12), float64] */, %705)
}

def @func_8095(%var_8076: Tensor[(14, 12, 9), float64]) -> (Tensor[(14, 12, 9), bool], Tensor[(14, 12, 9), bool], Tensor[(2016), float32], Tensor[(8, 4), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32]) {
  %706 = cast(1.89605f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %707 = cast(meta[relay.Constant][45] /* ty=Tensor[(14, 12, 9), float64] */, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
  %708 = cast(meta[relay.Constant][45] /* ty=Tensor[(14, 12, 9), float64] */, dtype="float32") /* ty=Tensor[(14, 12, 9), float32] */;
  %709 = sinh(%708) /* ty=Tensor[(14, 12, 9), float32] */;
  %710 = cast(%709, dtype="float64") /* ty=Tensor[(14, 12, 9), float64] */;
  %711 = rsqrt(%710) /* ty=Tensor[(14, 12, 9), float64] */;
  %712 = cast(%var_8076, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
  %713 = shape_of(%711, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%711, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %716 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 4), uint8] */, dtype="uint8") /* ty=Tensor[(8, 4), uint8] */;
  %717 = cast(meta[relay.Constant][47] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %718 = reshape(%716, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), uint8] */;
  %719 = reshape(%717, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), uint8] */;
  %720 = @func_1113(%718, %719) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(4, 5, 8), float64]) */;
  %721 = %720.1;
  %722 = cast(%721, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %723 = reshape(%722, newshape=[1008, 2]) /* ty=Tensor[(1008, 2), float32] */;
  %724 = @func_2041(%723) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(1008, 2), float32], Tensor[(36), float64], Tensor[(16, 8, 15), float64]) */;
  %725 = not_equal(%706, %707) /* ty=Tensor[(14, 12, 9), bool] */;
  %726 = logical_and(%714, %715) /* ty=Tensor[(14, 12, 9), bool] */;
  %727 = %724.0;
  (%725, %726, %721, meta[relay.Constant][46] /* ty=Tensor[(8, 4), uint8] */, meta[relay.Constant][47] /* ty=Tensor[(160), uint8] */, %727)
}

def @func_5436() -> (Tensor[(10, 11, 15), float32], Tensor[(7, 12, 6), float32]) {
  %728 = @func_4479() /* ty=(Tensor[(10, 11, 15), float64], Tensor[(7, 12, 6), float32], Tensor[(84), float32]) */;
  %729 = @func_1364() /* ty=Tensor[(10, 11, 15), float32] */;
  %730 = %728.1;
  (%729, %730)
}

def @func_6117() -> Tensor[(10, 11, 15), float32] {
  %731 = @func_4939() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %731.0
}

def @func_7972(%var_7952: Tensor[(32), uint8]) -> (Tensor[(10, 11, 15), bool], Tensor[(32), uint8], Tensor[(13, 12, 14), float64]) {
  %732 = cast(%var_7952, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %733 = reshape(%732, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %734 = @func_2771(%733) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), bool], Tensor[(10, 11, 15), bool], Tensor[(36), float64], Tensor[(32), uint8]) */;
  %735 = @func_5786() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(16, 8, 15), float64], Tensor[(1650), float32], Tensor[(36), float64]) */;
  %736 = %735.1;
  %737 = cast(%736, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %738 = %734.2;
  %739 = cosh(%737) /* ty=Tensor[(13, 12, 14), float64] */;
  (%738, %var_7952, %739)
}

def @func_5458() -> (Tensor[(13, 12, 14), float32],) {
  %740 = @func_5096() /* ty=Tensor[(13, 12, 14), float32] */;
  (%740,)
}

def @func_6871() -> (Tensor[(13, 12, 14), float32],) {
  %741 = @func_5786() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(16, 8, 15), float64], Tensor[(1650), float32], Tensor[(36), float64]) */;
  %742 = %741.0;
  (%742,)
}

def @func_7495(%var_7457: Tensor[(1, 1920), float64], %var_7486: Tensor[(2, 1920), float64]) -> (Tensor[(10, 11, 15), float32], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(10, 11, 15), float32], Tensor[(2, 1920), int16]) {
  %743 = @func_4939() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %744 = cast(%var_7457, dtype="float64") /* ty=Tensor[(1, 1920), float64] */;
  %745 = reshape(%744, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %746 = %743.0;
  %747 = cast(%746, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %748 = cast(meta[relay.Constant][48] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %749 = reshape(%747, newshape=[10, 11, 15]) /* ty=Tensor[(10, 11, 15), float32] */;
  %750 = reshape(%748, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %751 = @func_1265(%749, %750) /* ty=(Tensor[(10, 11, 15), int8], Tensor[(36), float64], Tensor[(13, 12, 14), float32], Tensor[(2184), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) */;
  %752 = cast(%var_7457, dtype="int16") /* ty=Tensor[(1, 1920), int16] */;
  %753 = cast(%var_7486, dtype="int16") /* ty=Tensor[(2, 1920), int16] */;
  %754 = @func_83(%745) /* ty=Tensor[(16, 8, 15), float64] */;
  %755 = %751.4;
  %756 = @func_4687() /* ty=Tensor[(10, 11, 15), float32] */;
  %757 = multiply(%752, %753) /* ty=Tensor[(2, 1920), int16] */;
  (%746, %754, %755, meta[relay.Constant][48] /* ty=Tensor[(36), float64] */, %756, %757)
}

def @func_8057(%var_8005: Tensor[(10, 16, 12), float64], %var_8020: Tensor[(10, 16, 12), float64], %var_8050: Tensor[(160), uint8]) -> (Tensor[(13, 12, 14), bool], Tensor[(10, 16, 12), float64], Tensor[(10, 11, 15), float32], Tensor[(10, 16, 12), bool], Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(16, 14, 9), float32], Tensor[(32), uint8], Tensor[(160), uint8]) {
  %758 = @func_3298() /* ty=(Tensor[(13, 12, 14), bool],) */;
  %759 = cast(%var_8005, dtype="float64") /* ty=Tensor[(10, 16, 12), float64] */;
  %760 = sigmoid(%759) /* ty=Tensor[(10, 16, 12), float64] */;
  %761 = cast(%var_8020, dtype="float64") /* ty=Tensor[(10, 16, 12), float64] */;
  %762 = shape_of(%760, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%760, dtype="float64") /* ty=Tensor[(10, 16, 12), float64] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %765 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %766 = cast(%var_8005, dtype="bool") /* ty=Tensor[(10, 16, 12), bool] */;
  %767 = shape_of(%760, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%760, dtype="bool") /* ty=Tensor[(10, 16, 12), bool] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %770 = cast(meta[relay.Constant][49] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %771 = cast(%var_8050, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %772 = reshape(%770, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), uint8] */;
  %773 = reshape(%771, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), uint8] */;
  %774 = @func_1113(%772, %773) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(4, 5, 8), float64]) */;
  %775 = %758.0;
  %776 = mod(%763, %764) /* ty=Tensor[(10, 16, 12), float64] */;
  %777 = %765.0;
  %778 = greater_equal(%768, %769) /* ty=Tensor[(10, 16, 12), bool] */;
  %779 = @func_1993() /* ty=Tensor[(10, 11, 15), float32] */;
  %780 = @func_1993() /* ty=Tensor[(10, 11, 15), float32] */;
  %781 = %774.0;
  (%775, %776, %777, %778, %779, %780, %781, meta[relay.Constant][49] /* ty=Tensor[(32), uint8] */, %var_8050)
}

def @func_7762() -> Tensor[(10, 11, 15), float32] {
  @func_1762() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_7247(%var_7231: Tensor[(1386), float32]) -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(11, 9, 14), float32], Tensor[(1386), float32], Tensor[(18), float64], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  %782 = @func_5458() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %783 = @func_5293() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %784 = cast(%var_7231, dtype="float32") /* ty=Tensor[(1386), float32] */;
  %785 = cast(meta[relay.Constant][50] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %786 = reshape(%784, newshape=[11, 9, 14]) /* ty=Tensor[(11, 9, 14), float32] */;
  %787 = reshape(%785, newshape=[18]) /* ty=Tensor[(18), float64] */;
  %788 = @func_5551(%786, %787) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(18), float64], Tensor[(11, 9, 14), float32]) */;
  %789 = @func_4807() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %790 = @func_7143() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %791 = @func_6525() /* ty=Tensor[(13, 12, 14), float32] */;
  %792 = %782.0;
  %793 = %783.0;
  %794 = %788.2;
  %795 = %789.0;
  %796 = %790.0;
  (%791, %792, %793, %794, %var_7231, meta[relay.Constant][50] /* ty=Tensor[(18), float64] */, %795, %796)
}

def @func_5096() -> Tensor[(13, 12, 14), float32] {
  %797 = @func_4776() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
  %797.0
}

def @func_7064(%var_7048: Tensor[(10, 11, 15), float32]) -> (Tensor[(13, 12, 14), float32], Tensor[(84), float32], Tensor[(10, 11, 15), float64], Tensor[(12, 16, 6), float32]) {
  %798 = @func_4479() /* ty=(Tensor[(10, 11, 15), float64], Tensor[(7, 12, 6), float32], Tensor[(84), float32]) */;
  %799 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
  %800 = cast(%var_7048, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
  %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(%799, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %804 = @func_3666() /* ty=(Tensor[(12, 16, 6), float32], Tensor[(12, 16, 6), float32]) */;
  %805 = @func_4827() /* ty=Tensor[(13, 12, 14), float32] */;
  %806 = %798.2;
  %807 = divide(%802, %803) /* ty=Tensor[(10, 11, 15), float64] */;
  %808 = %804.0;
  (%805, %806, %807, %808)
}

def @func_8271(%var_8235: Tensor[(36, 1), float64], %var_8240: Tensor[(10, 11, 15), float64]) -> (Tensor[(32), uint8], Tensor[(36, 1), float64], Tensor[(1008, 2), float32], Tensor[(36, 1), float64], Tensor[(10, 11, 15), bool], Tensor[(10, 11, 15), float32]) {
  %809 = @func_3786() /* ty=(Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), int64]) */;
  %810 = cast(meta[relay.Constant][51] /* ty=Tensor[(1008, 2), float32] */, dtype="float32") /* ty=Tensor[(1008, 2), float32] */;
  %811 = cast(%var_8235, dtype="float64") /* ty=Tensor[(36, 1), float64] */;
  %812 = reshape(%810, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %813 = reshape(%811, newshape=[36, 1]) /* ty=Tensor[(36, 1), float64] */;
  %814 = @func_1581(%812, %813) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(36, 1), float64], Tensor[(16, 14, 9), bool]) */;
  %815 = @func_4029() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %816 = %815.0;
  %817 = cast(%816, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
  %818 = exp(%817) /* ty=Tensor[(10, 11, 15), float64] */;
  %819 = cast(%var_8240, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
  %820 = shape_of(%818, dtype="int32") /* ty=Tensor[(3), int32] */;
  %821 = cast(%818, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %823 = @func_7802() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32]) */;
  %824 = %809.0;
  %825 = %814.2;
  %826 = greater_equal(%821, %822) /* ty=Tensor[(10, 11, 15), bool] */;
  %827 = %823.0;
  (%824, %825, meta[relay.Constant][51] /* ty=Tensor[(1008, 2), float32] */, %var_8235, %826, %827)
}

def @func_2416() -> Tensor[(13, 12, 14), float32] {
  @func_2134() /* ty=Tensor[(13, 12, 14), float32] */
}

def @func_2326(%var_2323: Tensor[(15, 13, 10), float32]) -> (Tensor[(15, 13, 10), float32],) {
  %828 = cast(%var_2323, dtype="float32") /* ty=Tensor[(15, 13, 10), float32] */;
  %829 = asinh(%828) /* ty=Tensor[(15, 13, 10), float32] */;
  (%829,)
}

def @func_1618() -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) {
  %830 = cast(meta[relay.Constant][52] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %831 = reshape(%830, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float64] */;
  %832 = @func_937(%831) /* ty=(Tensor[(13, 12, 14), float32],) */;
  %833 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
  %834 = %832.0;
  (%833, %834, meta[relay.Constant][52] /* ty=Tensor[(2184), float64] */)
}

def @func_1762() -> Tensor[(10, 11, 15), float32] {
  %835 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %835.0
}

def @func_5517() -> (Tensor[(13, 12, 14), float32], Tensor[(160), uint8], Tensor[(160), uint8], Tensor[(13, 12, 14), float32]) {
  %836 = @func_4646() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %837 = cast(meta[relay.Constant][53] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %838 = reshape(%837, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %839 = @func_3479(%838) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float64]) */;
  %840 = @func_3246() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %841 = %836.0;
  %842 = %839.4;
  %843 = %840.0;
  (%841, %842, meta[relay.Constant][53] /* ty=Tensor[(160), uint8] */, %843)
}

def @func_5650() -> (Tensor[(160), uint8], Tensor[(10, 11, 15), float32]) {
  %844 = @func_3786() /* ty=(Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), int64]) */;
  %845 = @func_4687() /* ty=Tensor[(10, 11, 15), float32] */;
  %846 = cast(%845, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %847 = atanh(%846) /* ty=Tensor[(10, 11, 15), float32] */;
  %848 = cast(%847, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %849 = %844.1;
  %850 = cos(%848) /* ty=Tensor[(10, 11, 15), float32] */;
  (%849, %850)
}

def @func_2134() -> Tensor[(13, 12, 14), float32] {
  %851 = @func_2103() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) */;
  %851.1
}

def @func_7719() -> (Tensor[(13, 12, 14), bool], Tensor[(13, 12, 14), float32], Tensor[(208), int64], Tensor[(4, 8), uint8], Tensor[(160), uint8], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  %852 = @func_3234() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %853 = %852.0;
  %854 = cast(meta[relay.Constant][54] /* ty=Tensor[(13, 12, 14), float32] */, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %855 = shape_of(%853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%853, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %858 = cast(meta[relay.Constant][55] /* ty=Tensor[(208), int64] */, dtype="int64") /* ty=Tensor[(208), int64] */;
  %859 = cast(meta[relay.Constant][55] /* ty=Tensor[(208), int64] */, dtype="int64") /* ty=Tensor[(208), int64] */;
  %860 = reshape(%858, newshape=[2, 13, 8]) /* ty=Tensor[(2, 13, 8), int64] */;
  %861 = reshape(%859, newshape=[2, 13, 8]) /* ty=Tensor[(2, 13, 8), int64] */;
  %862 = @func_7414(%860, %861) /* ty=(Tensor[(2, 13, 8), int64], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(2016), float32], Tensor[(36), float64]) */;
  %863 = cast(meta[relay.Constant][56] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %864 = reshape(%863, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %865 = @func_1752(%864) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(4, 5, 8), float64], Tensor[(4, 8), uint8], Tensor[(160), uint8]) */;
  %866 = cast(%853, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %867 = sqrt(%866) /* ty=Tensor[(13, 12, 14), float32] */;
  %868 = cast(%867, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %869 = not_equal(%856, %857) /* ty=Tensor[(13, 12, 14), bool] */;
  %870 = %862.1;
  %871 = %865.2;
  %872 = atanh(%868) /* ty=Tensor[(13, 12, 14), float32] */;
  %873 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
  (%869, %870, meta[relay.Constant][55] /* ty=Tensor[(208), int64] */, %871, meta[relay.Constant][56] /* ty=Tensor[(160), uint8] */, %872, %873)
}

def @func_548(%var_531: Tensor[(16, 14, 9), float32], %var_546: Tensor[(36), float64]) -> (Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) {
  %874 = cast(%var_531, dtype="float32") /* ty=Tensor[(16, 14, 9), float32] */;
  %875 = cast(%var_531, dtype="float32") /* ty=Tensor[(16, 14, 9), float32] */;
  %876 = cast(%var_546, dtype="float64") /* ty=Tensor[(36), float64] */;
  %877 = reshape(%876, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float64] */;
  %878 = @func_319(%877) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(12, ?, 3), int64], Tensor[(12, ?, 3), float64]) */;
  %879 = log2(%874) /* ty=Tensor[(16, 14, 9), float32] */;
  %880 = erf(%875) /* ty=Tensor[(16, 14, 9), float32] */;
  %881 = %878.4;
  (%879, %880, %881, %var_546)
}

def @func_3587(%var_3558: Tensor[(36), float64]) -> (Tensor[(13, 12, 14), float64], Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) {
  %882 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %883 = %882.0;
  %884 = cast(%883, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %885 = cast(%var_3558, dtype="float64") /* ty=Tensor[(36), float64] */;
  %886 = reshape(%885, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float64] */;
  %887 = @func_319(%886) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(12, ?, 3), int64], Tensor[(12, ?, 3), float64]) */;
  %888 = @func_3246() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %889 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %890 = erf(%884) /* ty=Tensor[(13, 12, 14), float64] */;
  %891 = %887.3;
  %892 = %888.0;
  %893 = %889.0;
  (%890, %891, %var_3558, %892, %893)
}

def @func_4419(%var_4394: Tensor[(10, 6, 12), float64], %var_4399: Tensor[(1, 32), uint8]) -> (Tensor[(10, 6, 12), float64], Tensor[(2016, 1), float32], Tensor[(2184), float32], Tensor[(1, 32), uint8], Tensor[(80, 2), uint8], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(2184), float64], Tensor[(10, 11, 15), float32]) {
  %894 = cast(%var_4394, dtype="float64") /* ty=Tensor[(10, 6, 12), float64] */;
  %895 = cast(meta[relay.Constant][57] /* ty=Tensor[(2184), float32] */, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %896 = cast(%var_4399, dtype="uint8") /* ty=Tensor[(1, 32), uint8] */;
  %897 = cast(meta[relay.Constant][58] /* ty=Tensor[(80, 2), uint8] */, dtype="uint8") /* ty=Tensor[(80, 2), uint8] */;
  %898 = cast(meta[relay.Constant][59] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %899 = cast(meta[relay.Constant][60] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %900 = reshape(%895, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float32] */;
  %901 = reshape(%896, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %902 = reshape(%897, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %903 = reshape(%898, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), float32] */;
  %904 = reshape(%899, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %905 = @func_2674(%900, %901, %902, %903, %904) /* ty=(Tensor[(13, 12, 14), int16], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(2016, 1), float32], Tensor[(36), float64]) */;
  %906 = @func_3511() /* ty=(Tensor[(2184), float64], Tensor[(10, 11, 15), float32]) */;
  %907 = erf(%894) /* ty=Tensor[(10, 6, 12), float64] */;
  %908 = %905.8;
  %909 = %906.0;
  %910 = @func_1364() /* ty=Tensor[(10, 11, 15), float32] */;
  (%907, %908, meta[relay.Constant][57] /* ty=Tensor[(2184), float32] */, %var_4399, meta[relay.Constant][58] /* ty=Tensor[(80, 2), uint8] */, meta[relay.Constant][59] /* ty=Tensor[(2016), float32] */, meta[relay.Constant][60] /* ty=Tensor[(36), float64] */, %909, %910)
}

def @func_5718() -> (Tensor[(13, 12, 14), float32], Tensor[(80, 2), uint8], Tensor[(720), float64], Tensor[(32), uint8]) {
  %911 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %912 = cast(meta[relay.Constant][61] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %913 = cast(meta[relay.Constant][62] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %914 = reshape(%912, newshape=[10, 6, 12]) /* ty=Tensor[(10, 6, 12), float64] */;
  %915 = reshape(%913, newshape=[1, 32]) /* ty=Tensor[(1, 32), uint8] */;
  %916 = @func_4419(%914, %915) /* ty=(Tensor[(10, 6, 12), float64], Tensor[(2016, 1), float32], Tensor[(2184), float32], Tensor[(1, 32), uint8], Tensor[(80, 2), uint8], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(2184), float64], Tensor[(10, 11, 15), float32]) */;
  %917 = %911.0;
  %918 = %916.4;
  (%917, %918, meta[relay.Constant][61] /* ty=Tensor[(720), float64] */, meta[relay.Constant][62] /* ty=Tensor[(32), uint8] */)
}

def @func_3643(%var_3629: Tensor[(2184), float64]) -> Tensor[(2184), float64] {
  %919 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
  %920 = %919.2;
  %921 = cast(%var_3629, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %922 = shape_of(%920, dtype="int32") /* ty=Tensor[(1), int32] */;
  %923 = cast(%920, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %924 = dyn.reshape(%921, %922, newshape=[]) /* ty=Tensor[(?), float64] */;
  multiply(%923, %924) /* ty=Tensor[(2184), float64] */
}

def @func_3898() -> (Tensor[(10, 11, 15), float32],) {
  %925 = @func_1993() /* ty=Tensor[(10, 11, 15), float32] */;
  (%925,)
}

def @func_5190() -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  %926 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %927 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %928 = %926.0;
  %929 = %927.0;
  (%928, %929)
}

def @func_4479() -> (Tensor[(10, 11, 15), float64], Tensor[(7, 12, 6), float32], Tensor[(84), float32]) {
  %930 = @func_3881() /* ty=(Tensor[(10, 11, 15), float64], Tensor[(13, 12, 14), float32]) */;
  %931 = cast(meta[relay.Constant][63] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %932 = reshape(%931, newshape=[7, 12, 1]) /* ty=Tensor[(7, 12, 1), float32] */;
  %933 = %930.0;
  %934 = @func_4359(%932) /* ty=Tensor[(7, 12, 6), float32] */;
  (%933, %934, meta[relay.Constant][63] /* ty=Tensor[(84), float32] */)
}

def @func_1156() -> (Tensor[(10, 11, 15), float32],) {
  %935 = cast(meta[relay.Constant][64] /* ty=Tensor[(10, 11, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %936 = sigmoid(%935) /* ty=Tensor[(10, 11, 15), float32] */;
  (%936,)
}

def @func_1833(%var_1828: Tensor[(1920), float64]) -> (Tensor[(10, 11, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(1920), float64]) {
  %937 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
  %938 = %937.0;
  %939 = cast(meta[relay.Constant][65] /* ty=Tensor[(10, 11, 15), float32] */, dtype="int16") /* ty=Tensor[(10, 11, 15), int16] */;
  %940 = shape_of(%938, dtype="int32") /* ty=Tensor[(3), int32] */;
  %941 = cast(%938, dtype="int16") /* ty=Tensor[(10, 11, 15), int16] */;
  %942 = dyn.reshape(%939, %940, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %943 = bitwise_or(%941, %942) /* ty=Tensor[(10, 11, 15), int16] */;
  %944 = cast(%943, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
  %945 = cast(%var_1828, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %946 = reshape(%945, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %947 = acosh(%944) /* ty=Tensor[(10, 11, 15), float64] */;
  %948 = @func_83(%946) /* ty=Tensor[(16, 8, 15), float64] */;
  (%947, %948, %var_1828)
}

def @func_6331() -> Tensor[(10, 11, 15), float32] {
  @func_3396() /* ty=Tensor[(10, 11, 15), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3197(%var_3194: Tensor[(2016), float32], %var_3195: Tensor[(36), float64], %var_3196: Tensor[(13, 12, 14), float32]) -> (Tensor[(10, 11, 15), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(13, 12, 14), bool]) {
  %13 = fn (%var_3172: Tensor[(2016), float32], %var_3173: Tensor[(36), float64], %var_3175: Tensor[(13, 12, 14), float32]) -> (Tensor[(10, 11, 15), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(13, 12, 14), bool]) {
    %0 = cast(%var_3172, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %1 = cast(%var_3173, dtype="float64") /* ty=Tensor[(36), float64] */;
    %2 = reshape(%0, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
    %3 = reshape(%1, newshape=[36, 1]) /* ty=Tensor[(36, 1), float64] */;
    %4 = @func_1581(%2, %3) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(36, 1), float64], Tensor[(16, 14, 9), bool]) */;
    %5 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %6 = %5.0;
    %7 = cast(%var_3175, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
    %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
    %9 = cast(%6, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %11 = %4.1;
    %12 = less(%9, %10) /* ty=Tensor[(13, 12, 14), bool] */;
    (%11, %var_3172, %var_3173, %12)
  };
  %13(%var_3194, %var_3195, %var_3196) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(13, 12, 14), bool]) */
}

def @func_4419(%var_4394: Tensor[(10, 6, 12), float64], %var_4399: Tensor[(1, 32), uint8]) -> (Tensor[(10, 6, 12), float64], Tensor[(2016, 1), float32], Tensor[(2184), float32], Tensor[(1, 32), uint8], Tensor[(80, 2), uint8], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(2184), float64], Tensor[(10, 11, 15), float32]) {
  %14 = cast(%var_4394, dtype="float64") /* ty=Tensor[(10, 6, 12), float64] */;
  %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(2184), float32] */, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %16 = cast(%var_4399, dtype="uint8") /* ty=Tensor[(1, 32), uint8] */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(80, 2), uint8] */, dtype="uint8") /* ty=Tensor[(80, 2), uint8] */;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %19 = cast(meta[relay.Constant][3] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %20 = reshape(%15, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float32] */;
  %21 = reshape(%16, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %22 = reshape(%17, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %23 = reshape(%18, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), float32] */;
  %24 = reshape(%19, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %25 = @func_2674(%20, %21, %22, %23, %24) /* ty=(Tensor[(13, 12, 14), int16], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(2016, 1), float32], Tensor[(36), float64]) */;
  %26 = @func_3511() /* ty=(Tensor[(2184), float64], Tensor[(10, 11, 15), float32]) */;
  %27 = erf(%14) /* ty=Tensor[(10, 6, 12), float64] */;
  %28 = %25.8;
  %29 = %26.0;
  %30 = @func_1364() /* ty=Tensor[(10, 11, 15), float32] */;
  (%27, %28, meta[relay.Constant][0] /* ty=Tensor[(2184), float32] */, %var_4399, meta[relay.Constant][1] /* ty=Tensor[(80, 2), uint8] */, meta[relay.Constant][2] /* ty=Tensor[(2016), float32] */, meta[relay.Constant][3] /* ty=Tensor[(36), float64] */, %29, %30)
}

def @func_8460(%var_8445: Tensor[(1386), float32], %var_8453: Tensor[(1386), float32]) -> (Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(1386), uint8]) {
  %31 = @func_3786() /* ty=(Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), int64]) */;
  %32 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %33 = cast(%var_8445, dtype="float32") /* ty=Tensor[(1386), float32] */;
  %34 = reshape(%33, newshape=[1386]) /* ty=Tensor[(1386), float32] */;
  %35 = @func_7247(%34) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(11, 9, 14), float32], Tensor[(1386), float32], Tensor[(18), float64], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
  %36 = cast(%var_8453, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %37 = shape_of(%var_8445, dtype="int32") /* ty=Tensor[(1), int32] */;
  %38 = cast(%var_8445, dtype="uint8") /* ty=Tensor[(1386), uint8] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %40 = %31.1;
  %41 = %32.0;
  %42 = %35.1;
  %43 = subtract(%38, %39) /* ty=Tensor[(1386), uint8] */;
  (%40, %41, %42, %43)
}

def @func_551(%var_549: Tensor[(16, 14, 9), float32], %var_550: Tensor[(36), float64]) -> (Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) {
  %52 = fn (%var_531: Tensor[(16, 14, 9), float32], %var_546: Tensor[(36), float64]) -> (Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) {
    %44 = cast(%var_531, dtype="float32") /* ty=Tensor[(16, 14, 9), float32] */;
    %45 = cast(%var_531, dtype="float32") /* ty=Tensor[(16, 14, 9), float32] */;
    %46 = cast(%var_546, dtype="float64") /* ty=Tensor[(36), float64] */;
    %47 = reshape(%46, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float64] */;
    %48 = @func_319(%47) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(12, ?, 3), int64], Tensor[(12, ?, 3), float64]) */;
    %49 = log2(%44) /* ty=Tensor[(16, 14, 9), float32] */;
    %50 = erf(%45) /* ty=Tensor[(16, 14, 9), float32] */;
    %51 = %48.4;
    (%49, %50, %51, %var_546)
  };
  %52(%var_549, %var_550) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) */
}

def @func_389(%var_387: float32, %var_388: Tensor[(36), float64]) -> (Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(11, 10, 11), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) {
  %74 = fn (%var_334: float32, %var_344: Tensor[(36), float64]) -> (Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(11, 10, 11), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) {
    %53 = cast(%var_344, dtype="float64") /* ty=Tensor[(36), float64] */;
    %54 = reshape(%53, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float64] */;
    %55 = @func_319(%54) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(12, ?, 3), int64], Tensor[(12, ?, 3), float64]) */;
    %56 = cast(%var_334, dtype="float32") /* ty=float32 */;
    %57 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 10, 11), float32] */, dtype="float32") /* ty=Tensor[(11, 10, 11), float32] */;
    %58 = mod(%56, %57) /* ty=Tensor[(11, 10, 11), float32] */;
    %59 = cast(%58, dtype="float32") /* ty=Tensor[(11, 10, 11), float32] */;
    %60 = log10(%59) /* ty=Tensor[(11, 10, 11), float32] */;
    %61 = cast(%60, dtype="float64") /* ty=Tensor[(11, 10, 11), float64] */;
    %62 = cast(%var_344, dtype="float64") /* ty=Tensor[(36), float64] */;
    %63 = reshape(%62, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float64] */;
    %64 = @func_319(%63) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(12, ?, 3), int64], Tensor[(12, ?, 3), float64]) */;
    %65 = %64.0;
    %66 = cast(%65, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
    %67 = reshape(%66, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
    %68 = cast(%65, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
    %69 = reshape(%68, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
    %70 = %55.0;
    %71 = exp(%61) /* ty=Tensor[(11, 10, 11), float64] */;
    %72 = @func_83(%67) /* ty=Tensor[(16, 8, 15), float64] */;
    %73 = @func_83(%69) /* ty=Tensor[(16, 8, 15), float64] */;
    (%70, %var_344, %71, %65, %72, %73)
  };
  %74(%var_387, %var_388) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(11, 10, 11), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) */
}

def @func_1265(%var_1172: Tensor[(10, 11, 15), float32], %var_1183: Tensor[(36), float64]) -> (Tensor[(10, 11, 15), int8], Tensor[(36), float64], Tensor[(13, 12, 14), float32], Tensor[(2184), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) {
  %75 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %76 = %75.0;
  %77 = cast(%var_1172, dtype="int8") /* ty=Tensor[(10, 11, 15), int8] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%76, dtype="int8") /* ty=Tensor[(10, 11, 15), int8] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %81 = cast(meta[relay.Constant][5] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %82 = reshape(%81, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float64] */;
  %83 = @func_937(%82) /* ty=(Tensor[(13, 12, 14), float32],) */;
  %84 = cast(-6.92343f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %85 = cast(%var_1183, dtype="float64") /* ty=Tensor[(36), float64] */;
  %86 = reshape(%84, newshape=[]) /* ty=float32 */;
  %87 = reshape(%85, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %88 = @func_386(%86, %87) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(11, 10, 11), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) */;
  %89 = %88.3;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %91 = cos(%90) /* ty=Tensor[(16, 8, 15), float64] */;
  %92 = cast(%91, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %93 = reshape(%92, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %94 = cast(%91, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %95 = rsqrt(%94) /* ty=Tensor[(16, 8, 15), float64] */;
  %96 = cast(%95, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %97 = cast(-6.92343f /* ty=float32 */, dtype="float64") /* ty=float64 */;
  %98 = right_shift(%79, %80) /* ty=Tensor[(10, 11, 15), int8] */;
  %99 = %83.0;
  %100 = @func_83(%93) /* ty=Tensor[(16, 8, 15), float64] */;
  %101 = add(%96, %97) /* ty=Tensor[(16, 8, 15), float64] */;
  (%98, %var_1183, %99, meta[relay.Constant][5] /* ty=Tensor[(2184), float64] */, %100, %101)
}

def @func_1584(%var_1582: Tensor[(2016), float32], %var_1583: Tensor[(36, 1), float64]) -> (Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(36, 1), float64], Tensor[(16, 14, 9), bool]) {
  %115 = fn (%var_1568: Tensor[(2016), float32], %var_1569: Tensor[(36, 1), float64]) -> (Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(36, 1), float64], Tensor[(16, 14, 9), bool]) {
    %102 = cast(%var_1568, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %103 = cast(%var_1569, dtype="float64") /* ty=Tensor[(36, 1), float64] */;
    %104 = reshape(%102, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), float32] */;
    %105 = reshape(%103, newshape=[36]) /* ty=Tensor[(36), float64] */;
    %106 = @func_548(%104, %105) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) */;
    %107 = %106.0;
    %108 = cast(%var_1568, dtype="bool") /* ty=Tensor[(2016), bool] */;
    %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
    %110 = cast(%107, dtype="bool") /* ty=Tensor[(16, 14, 9), bool] */;
    %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %112 = @func_1364() /* ty=Tensor[(10, 11, 15), float32] */;
    %113 = @func_1364() /* ty=Tensor[(10, 11, 15), float32] */;
    %114 = logical_and(%110, %111) /* ty=Tensor[(16, 14, 9), bool] */;
    (%112, %113, %var_1569, %114)
  };
  %115(%var_1582, %var_1583) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(36, 1), float64], Tensor[(16, 14, 9), bool]) */
}

def @func_3132(%var_3131: Tensor[(2, 3, 3), float64]) -> (Tensor[(2, 3, 3), float64], Tensor[(13, 12, 14), float32]) {
  %123 = fn (%var_3108: Tensor[(2, 3, 3), float64]) -> (Tensor[(2, 3, 3), float64], Tensor[(13, 12, 14), float32]) {
    %116 = cast(%var_3108, dtype="float64") /* ty=Tensor[(2, 3, 3), float64] */;
    %117 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(2, 3, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 3, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 3, 3), float64] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %120 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %121 = floor_mod(%118, %119) /* ty=Tensor[(2, 3, 3), float64] */;
    %122 = %120.0;
    (%121, %122)
  };
  %123(%var_3131) /* ty=(Tensor[(2, 3, 3), float64], Tensor[(13, 12, 14), float32]) */
}

def @func_2416() -> Tensor[(13, 12, 14), float32] {
  @func_2134() /* ty=Tensor[(13, 12, 14), float32] */
}

def @func_4480() -> (Tensor[(10, 11, 15), float64], Tensor[(7, 12, 6), float32], Tensor[(84), float32]) {
  %129 = fn () -> (Tensor[(10, 11, 15), float64], Tensor[(7, 12, 6), float32], Tensor[(84), float32]) {
    %124 = @func_3881() /* ty=(Tensor[(10, 11, 15), float64], Tensor[(13, 12, 14), float32]) */;
    %125 = cast(meta[relay.Constant][7] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
    %126 = reshape(%125, newshape=[7, 12, 1]) /* ty=Tensor[(7, 12, 1), float32] */;
    %127 = %124.0;
    %128 = @func_4359(%126) /* ty=Tensor[(7, 12, 6), float32] */;
    (%127, %128, meta[relay.Constant][7] /* ty=Tensor[(84), float32] */)
  };
  %129() /* ty=(Tensor[(10, 11, 15), float64], Tensor[(7, 12, 6), float32], Tensor[(84), float32]) */
}

def @func_7762() -> Tensor[(10, 11, 15), float32] {
  @func_1762() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_3248() -> (Tensor[(13, 12, 14), float32],) {
  @func_3246() /* ty=(Tensor[(13, 12, 14), float32],) */
}

def @func_5650() -> (Tensor[(160), uint8], Tensor[(10, 11, 15), float32]) {
  %130 = @func_3786() /* ty=(Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), int64]) */;
  %131 = @func_4687() /* ty=Tensor[(10, 11, 15), float32] */;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %133 = atanh(%132) /* ty=Tensor[(10, 11, 15), float32] */;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %135 = %130.1;
  %136 = cos(%134) /* ty=Tensor[(10, 11, 15), float32] */;
  (%135, %136)
}

def @func_6149() -> (Tensor[(10, 11, 15), float32],) {
  %139 = fn () -> (Tensor[(10, 11, 15), float32],) {
    %137 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %138 = %137.0;
    (%138,)
  };
  %139() /* ty=(Tensor[(10, 11, 15), float32],) */
}

def @func_6681() -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float64]) {
  @func_6679() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float64]) */
}

def @func_5098() -> Tensor[(13, 12, 14), float32] {
  @func_5096() /* ty=Tensor[(13, 12, 14), float32] */
}

def @func_2103() -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) {
  %140 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
  %141 = %140.1;
  %142 = cast(%141, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %143 = reshape(%142, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float64] */;
  %144 = @func_937(%143) /* ty=(Tensor[(13, 12, 14), float32],) */;
  %145 = %144.0;
  (%141, %145)
}

def @func_6794() -> Tensor[(10, 11, 15), float32] {
  @func_6331() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_1707(%var_1704: Tensor[(10, 11, 15), float32], %var_1705: Tensor[(36), float64], %var_1706: Tensor[(1, 32), uint8]) -> (Tensor[(10, 11, 15), uint16], Tensor[(10, 11, 15), bool], Tensor[(2184), float64], Tensor[(36), float64], Tensor[(4, 5, 8), float64], Tensor[(1, 32), uint8], Tensor[(160), uint8]) {
  @func_1702(%var_1704, %var_1705, %var_1706) /* ty=(Tensor[(10, 11, 15), uint16], Tensor[(10, 11, 15), bool], Tensor[(2184), float64], Tensor[(36), float64], Tensor[(4, 5, 8), float64], Tensor[(1, 32), uint8], Tensor[(160), uint8]) */
}

def @func_6796() -> Tensor[(10, 11, 15), float32] {
  @func_6794() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_5786() -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(16, 8, 15), float64], Tensor[(1650), float32], Tensor[(36), float64]) {
  %146 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
  %147 = cast(meta[relay.Constant][8] /* ty=Tensor[(1650), float32] */, dtype="float32") /* ty=Tensor[(1650), float32] */;
  %148 = cast(meta[relay.Constant][9] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %149 = reshape(%147, newshape=[10, 11, 15]) /* ty=Tensor[(10, 11, 15), float32] */;
  %150 = reshape(%148, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %151 = @func_1265(%149, %150) /* ty=(Tensor[(10, 11, 15), int8], Tensor[(36), float64], Tensor[(13, 12, 14), float32], Tensor[(2184), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) */;
  %152 = %146.1;
  %153 = @func_4152() /* ty=Tensor[(13, 12, 14), float32] */;
  %154 = %151.4;
  (%152, %153, %154, meta[relay.Constant][8] /* ty=Tensor[(1650), float32] */, meta[relay.Constant][9] /* ty=Tensor[(36), float64] */)
}

def @func_3899() -> (Tensor[(10, 11, 15), float32],) {
  %156 = fn () -> (Tensor[(10, 11, 15), float32],) {
    %155 = @func_1993() /* ty=Tensor[(10, 11, 15), float32] */;
    (%155,)
  };
  %156() /* ty=(Tensor[(10, 11, 15), float32],) */
}

def @func_4582(%var_4526: Tensor[(13, 12, 14), float32], %var_4558: float32) -> (Tensor[(13, 12, 14), bool], Tensor[(13, 12, 14), float32], Tensor[(16, 14, 9), float32], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(16, 8, 15), float64], float32, Tensor[(3, 12), float64], Tensor[(36), float64]) {
  %157 = @func_2416() /* ty=Tensor[(13, 12, 14), float32] */;
  %158 = cast(%var_4526, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %162 = cast(%157, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %163 = reshape(%162, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float64] */;
  %164 = @func_937(%163) /* ty=(Tensor[(13, 12, 14), float32],) */;
  %165 = @func_4091() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(16, 14, 9), float32], Tensor[(2016, 1), float32], Tensor[(36), float64]) */;
  %166 = cast(meta[relay.Constant][10] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %167 = reshape(%166, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %168 = @func_3479(%167) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float64]) */;
  %169 = cast(%var_4558, dtype="float32") /* ty=float32 */;
  %170 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 12), float64] */, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
  %171 = reshape(%169, newshape=[]) /* ty=float32 */;
  %172 = reshape(%170, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %173 = @func_386(%171, %172) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(11, 10, 11), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) */;
  %174 = %168.2;
  %175 = cast(%174, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %176 = cast(meta[relay.Constant][10] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %177 = reshape(%175, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %178 = reshape(%176, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %179 = @func_1314(%177, %178) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) */;
  %180 = logical_and(%160, %161) /* ty=Tensor[(13, 12, 14), bool] */;
  %181 = %164.0;
  %182 = %165.1;
  %183 = %173.5;
  %184 = %179.1;
  (%180, %181, %182, %174, meta[relay.Constant][10] /* ty=Tensor[(160), uint8] */, %183, %var_4558, meta[relay.Constant][11] /* ty=Tensor[(3, 12), float64] */, %184)
}

def @func_6920(%var_6918: Tensor[(7, 2, 16), float32], %var_6919: Tensor[(7, 2, 16), float32]) -> (Tensor[(7, 2, 16), float32],) {
  @func_6916(%var_6918, %var_6919) /* ty=(Tensor[(7, 2, 16), float32],) */
}

def @func_3234() -> (Tensor[(13, 12, 14), float32],) {
  %185 = @func_2416() /* ty=Tensor[(13, 12, 14), float32] */;
  (%185,)
}

def @func_7391() -> (Tensor[(13, 12, 14), float32],) {
  %188 = fn () -> (Tensor[(13, 12, 14), float32],) {
    %186 = @func_3234() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %187 = %186.0;
    (%187,)
  };
  %188() /* ty=(Tensor[(13, 12, 14), float32],) */
}

def @func_1365() -> Tensor[(10, 11, 15), float32] {
  %190 = fn () -> Tensor[(10, 11, 15), float32] {
    %189 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %189.0
  };
  %190() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_322(%var_320: Tensor[(12, 1, 3), float64]) -> (Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(12, ?, 3), int64], Tensor[(12, ?, 3), float64]) {
  @func_319(%var_320) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(12, ?, 3), int64], Tensor[(12, ?, 3), float64]) */
}

def @func_2319() -> (Tensor[(13, 12, 14), float32],) {
  %195 = fn () -> (Tensor[(13, 12, 14), float32],) {
    %191 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
    %192 = %191.1;
    %193 = cast(%192, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
    %194 = acos(%193) /* ty=Tensor[(13, 12, 14), float32] */;
    (%194,)
  };
  %195() /* ty=(Tensor[(13, 12, 14), float32],) */
}

def @func_8271(%var_8235: Tensor[(36, 1), float64], %var_8240: Tensor[(10, 11, 15), float64]) -> (Tensor[(32), uint8], Tensor[(36, 1), float64], Tensor[(1008, 2), float32], Tensor[(36, 1), float64], Tensor[(10, 11, 15), bool], Tensor[(10, 11, 15), float32]) {
  %196 = @func_3786() /* ty=(Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), int64]) */;
  %197 = cast(meta[relay.Constant][12] /* ty=Tensor[(1008, 2), float32] */, dtype="float32") /* ty=Tensor[(1008, 2), float32] */;
  %198 = cast(%var_8235, dtype="float64") /* ty=Tensor[(36, 1), float64] */;
  %199 = reshape(%197, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %200 = reshape(%198, newshape=[36, 1]) /* ty=Tensor[(36, 1), float64] */;
  %201 = @func_1581(%199, %200) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(36, 1), float64], Tensor[(16, 14, 9), bool]) */;
  %202 = @func_4029() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %203 = %202.0;
  %204 = cast(%203, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
  %205 = exp(%204) /* ty=Tensor[(10, 11, 15), float64] */;
  %206 = cast(%var_8240, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
  %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%205, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %210 = @func_7802() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32]) */;
  %211 = %196.0;
  %212 = %201.2;
  %213 = greater_equal(%208, %209) /* ty=Tensor[(10, 11, 15), bool] */;
  %214 = %210.0;
  (%211, %212, meta[relay.Constant][12] /* ty=Tensor[(1008, 2), float32] */, %var_8235, %213, %214)
}

def @func_7860(%var_7858: Tensor[(8, 4), uint8], %var_7859: Tensor[(720), float64]) -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(8, 4), uint8], Tensor[(720), float64], Tensor[(2016), float64]) {
  %229 = fn (%var_7839: Tensor[(8, 4), uint8], %var_7846: Tensor[(720), float64]) -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(8, 4), uint8], Tensor[(720), float64], Tensor[(2016), float64]) {
    %215 = @func_7677() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
    %216 = %215.0;
    %217 = cast(%216, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
    %218 = cast(%var_7839, dtype="uint8") /* ty=Tensor[(8, 4), uint8] */;
    %219 = reshape(%217, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float32] */;
    %220 = reshape(%218, newshape=[32]) /* ty=Tensor[(32), uint8] */;
    %221 = @func_3099(%219, %220) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) */;
    %222 = cast(%var_7846, dtype="float64") /* ty=Tensor[(720), float64] */;
    %223 = reshape(%222, newshape=[720, 1]) /* ty=Tensor[(720, 1), float64] */;
    %224 = @func_5928(%223) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(2016), float32], Tensor[(720, 1), float64], Tensor[(32), uint8]) */;
    %225 = %224.1;
    %226 = cast(%225, dtype="float64") /* ty=Tensor[(2016), float64] */;
    %227 = %221.0;
    %228 = asin(%226) /* ty=Tensor[(2016), float64] */;
    (%216, %227, %var_7839, %var_7846, %228)
  };
  %229(%var_7858, %var_7859) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(8, 4), uint8], Tensor[(720), float64], Tensor[(2016), float64]) */
}

def @func_6265() -> Tensor[(13, 12, 14), float32] {
  %231 = fn () -> Tensor[(13, 12, 14), float32] {
    %230 = @func_3717() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(18), float64]) */;
    %230.1
  };
  %231() /* ty=Tensor[(13, 12, 14), float32] */
}

def @func_2418() -> Tensor[(13, 12, 14), float32] {
  @func_2416() /* ty=Tensor[(13, 12, 14), float32] */
}

def @func_3482(%var_3480: Tensor[(160), uint8]) -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float64]) {
  @func_3479(%var_3480) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float64]) */
}

def @func_4829() -> Tensor[(13, 12, 14), float32] {
  @func_4827() /* ty=Tensor[(13, 12, 14), float32] */
}

def @func_4586(%var_4584: Tensor[(13, 12, 14), float32], %var_4585: float32) -> (Tensor[(13, 12, 14), bool], Tensor[(13, 12, 14), float32], Tensor[(16, 14, 9), float32], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(16, 8, 15), float64], float32, Tensor[(3, 12), float64], Tensor[(36), float64]) {
  @func_4582(%var_4584, %var_4585) /* ty=(Tensor[(13, 12, 14), bool], Tensor[(13, 12, 14), float32], Tensor[(16, 14, 9), float32], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(16, 8, 15), float64], float32, Tensor[(3, 12), float64], Tensor[(36), float64]) */
}

def @func_83(%var_45: Tensor[(16, 8, 15), float64]) -> Tensor[(16, 8, 15), float64] {
  %232 = cast(%var_45, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  asin(%232) /* ty=Tensor[(16, 8, 15), float64] */
}

def @func_7250(%var_7248: Tensor[(1386), float32]) -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(11, 9, 14), float32], Tensor[(1386), float32], Tensor[(18), float64], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  @func_7247(%var_7248) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(11, 9, 14), float32], Tensor[(1386), float32], Tensor[(18), float64], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */
}

def @func_6383(%var_6379: Tensor[(1, 5, 9), int8], %var_6380: Tensor[(1, 5, 9), int8], %var_6381: Tensor[(2016), float32], %var_6382: Tensor[(3, 12), float64]) -> (Tensor[(13, 12, 14), float32], Tensor[(?, 5, 9), bool], Tensor[(16, 14, 9), bool], Tensor[(2016), float32], Tensor[(3, 12), float64]) {
  @func_6377(%var_6379, %var_6380, %var_6381, %var_6382) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(?, 5, 9), bool], Tensor[(16, 14, 9), bool], Tensor[(2016), float32], Tensor[(3, 12), float64]) */
}

def @func_4423(%var_4421: Tensor[(10, 6, 12), float64], %var_4422: Tensor[(1, 32), uint8]) -> (Tensor[(10, 6, 12), float64], Tensor[(2016, 1), float32], Tensor[(2184), float32], Tensor[(1, 32), uint8], Tensor[(80, 2), uint8], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(2184), float64], Tensor[(10, 11, 15), float32]) {
  @func_4419(%var_4421, %var_4422) /* ty=(Tensor[(10, 6, 12), float64], Tensor[(2016, 1), float32], Tensor[(2184), float32], Tensor[(1, 32), uint8], Tensor[(80, 2), uint8], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(2184), float64], Tensor[(10, 11, 15), float32]) */
}

def @func_7498(%var_7496: Tensor[(1, 1920), float64], %var_7497: Tensor[(2, 1920), float64]) -> (Tensor[(10, 11, 15), float32], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(10, 11, 15), float32], Tensor[(2, 1920), int16]) {
  %248 = fn (%var_7457: Tensor[(1, 1920), float64], %var_7486: Tensor[(2, 1920), float64]) -> (Tensor[(10, 11, 15), float32], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(10, 11, 15), float32], Tensor[(2, 1920), int16]) {
    %233 = @func_4939() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %234 = cast(%var_7457, dtype="float64") /* ty=Tensor[(1, 1920), float64] */;
    %235 = reshape(%234, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
    %236 = %233.0;
    %237 = cast(%236, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
    %238 = cast(meta[relay.Constant][13] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
    %239 = reshape(%237, newshape=[10, 11, 15]) /* ty=Tensor[(10, 11, 15), float32] */;
    %240 = reshape(%238, newshape=[36]) /* ty=Tensor[(36), float64] */;
    %241 = @func_1265(%239, %240) /* ty=(Tensor[(10, 11, 15), int8], Tensor[(36), float64], Tensor[(13, 12, 14), float32], Tensor[(2184), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) */;
    %242 = cast(%var_7457, dtype="int16") /* ty=Tensor[(1, 1920), int16] */;
    %243 = cast(%var_7486, dtype="int16") /* ty=Tensor[(2, 1920), int16] */;
    %244 = @func_83(%235) /* ty=Tensor[(16, 8, 15), float64] */;
    %245 = %241.4;
    %246 = @func_4687() /* ty=Tensor[(10, 11, 15), float32] */;
    %247 = multiply(%242, %243) /* ty=Tensor[(2, 1920), int16] */;
    (%236, %244, %245, meta[relay.Constant][13] /* ty=Tensor[(36), float64] */, %246, %247)
  };
  %248(%var_7496, %var_7497) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(10, 11, 15), float32], Tensor[(2, 1920), int16]) */
}

def @func_4807() -> (Tensor[(13, 12, 14), float32],) {
  %249 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %250 = %249.0;
  (%250,)
}

def @func_5652() -> (Tensor[(160), uint8], Tensor[(10, 11, 15), float32]) {
  @func_5650() /* ty=(Tensor[(160), uint8], Tensor[(10, 11, 15), float32]) */
}

def @func_2135() -> Tensor[(13, 12, 14), float32] {
  %252 = fn () -> Tensor[(13, 12, 14), float32] {
    %251 = @func_2103() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) */;
    %251.1
  };
  %252() /* ty=Tensor[(13, 12, 14), float32] */
}

def @func_7418(%var_7416: Tensor[(2, 13, 8), int64], %var_7417: Tensor[(2, 13, 8), int64]) -> (Tensor[(2, 13, 8), int64], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(2016), float32], Tensor[(36), float64]) {
  @func_7414(%var_7416, %var_7417) /* ty=(Tensor[(2, 13, 8), int64], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(2016), float32], Tensor[(36), float64]) */
}

def @func_7017() -> (Tensor[(10, 11, 15), float32],) {
  %255 = fn () -> (Tensor[(10, 11, 15), float32],) {
    %253 = @func_4029() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %254 = %253.0;
    (%254,)
  };
  %255() /* ty=(Tensor[(10, 11, 15), float32],) */
}

def @func_4029() -> (Tensor[(10, 11, 15), float32],) {
  %256 = @func_3898() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %257 = %256.0;
  %258 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 11, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %259 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%257, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %262 = mod(%260, %261) /* ty=Tensor[(10, 11, 15), float32] */;
  (%262,)
}

def @func_6916(%var_6910: Tensor[(7, 2, 16), float32], %var_6911: Tensor[(7, 2, 16), float32]) -> (Tensor[(7, 2, 16), float32],) {
  %263 = cast(%var_6911, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %264 = shape_of(%var_6910, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%var_6910, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %267 = power(%265, %266) /* ty=Tensor[(7, 2, 16), float32] */;
  (%267,)
}

def @func_1755(%var_1753: Tensor[(160), uint8]) -> (Tensor[(10, 11, 15), float32], Tensor[(4, 5, 8), float64], Tensor[(4, 8), uint8], Tensor[(160), uint8]) {
  @func_1752(%var_1753) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(4, 5, 8), float64], Tensor[(4, 8), uint8], Tensor[(160), uint8]) */
}

def @func_5930(%var_5929: Tensor[(720, 1), float64]) -> (Tensor[(13, 12, 14), float32], Tensor[(2016), float32], Tensor[(720, 1), float64], Tensor[(32), uint8]) {
  %275 = fn (%var_5924: Tensor[(720, 1), float64]) -> (Tensor[(13, 12, 14), float32], Tensor[(2016), float32], Tensor[(720, 1), float64], Tensor[(32), uint8]) {
    %268 = cast(%var_5924, dtype="float64") /* ty=Tensor[(720, 1), float64] */;
    %269 = cast(meta[relay.Constant][15] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
    %270 = reshape(%268, newshape=[10, 6, 12]) /* ty=Tensor[(10, 6, 12), float64] */;
    %271 = reshape(%269, newshape=[1, 32]) /* ty=Tensor[(1, 32), uint8] */;
    %272 = @func_4419(%270, %271) /* ty=(Tensor[(10, 6, 12), float64], Tensor[(2016, 1), float32], Tensor[(2184), float32], Tensor[(1, 32), uint8], Tensor[(80, 2), uint8], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(2184), float64], Tensor[(10, 11, 15), float32]) */;
    %273 = @func_4152() /* ty=Tensor[(13, 12, 14), float32] */;
    %274 = %272.5;
    (%273, %274, %var_5924, meta[relay.Constant][15] /* ty=Tensor[(32), uint8] */)
  };
  %275(%var_5929) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(2016), float32], Tensor[(720, 1), float64], Tensor[(32), uint8]) */
}

def @func_5577() -> Tensor[(10, 11, 15), float32] {
  %276 = @func_4610() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
  %276.1
}

def @func_86(%var_84: Tensor[(16, 8, 15), float64]) -> Tensor[(16, 8, 15), float64] {
  @func_83(%var_84) /* ty=Tensor[(16, 8, 15), float64] */
}

def @func_5459() -> (Tensor[(13, 12, 14), float32],) {
  %278 = fn () -> (Tensor[(13, 12, 14), float32],) {
    %277 = @func_5096() /* ty=Tensor[(13, 12, 14), float32] */;
    (%277,)
  };
  %278() /* ty=(Tensor[(13, 12, 14), float32],) */
}

def @func_3666() -> (Tensor[(12, 16, 6), float32], Tensor[(12, 16, 6), float32]) {
  %279 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 6), float32] */;
  %280 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(12, 16, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 6), float32] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %283 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 6), float32] */;
  %284 = power(%281, %282) /* ty=Tensor[(12, 16, 6), float32] */;
  %285 = asin(%283) /* ty=Tensor[(12, 16, 6), float32] */;
  (%284, %285)
}

def @func_7917() -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  %288 = fn () -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
    %286 = @func_6525() /* ty=Tensor[(13, 12, 14), float32] */;
    %287 = @func_3396() /* ty=Tensor[(10, 11, 15), float32] */;
    (%286, %287)
  };
  %288() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */
}

def @func_7570() -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(1386), float32]) {
  %297 = fn () -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(1386), float32]) {
    %289 = @func_5293() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %290 = @func_7390() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %291 = cast(meta[relay.Constant][18] /* ty=Tensor[(1386), float32] */, dtype="float32") /* ty=Tensor[(1386), float32] */;
    %292 = reshape(%291, newshape=[1386]) /* ty=Tensor[(1386), float32] */;
    %293 = @func_7247(%292) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(11, 9, 14), float32], Tensor[(1386), float32], Tensor[(18), float64], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
    %294 = %289.0;
    %295 = %290.0;
    %296 = %293.6;
    (%294, %295, %296, meta[relay.Constant][18] /* ty=Tensor[(1386), float32] */)
  };
  %297() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(1386), float32]) */
}

def @func_4154() -> Tensor[(13, 12, 14), float32] {
  @func_4152() /* ty=Tensor[(13, 12, 14), float32] */
}

def @func_5404() -> (Tensor[(10, 11, 15), float32],) {
  %298 = @func_1762() /* ty=Tensor[(10, 11, 15), float32] */;
  (%298,)
}

def @func_6314(%var_6312: Tensor[(1920), float64]) -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(13, 12, 14), float32]) {
  @func_6311(%var_6312) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(13, 12, 14), float32]) */
}

def @func_4776() -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  %299 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %300 = %299.0;
  %301 = cast(%300, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %302 = exp(%301) /* ty=Tensor[(13, 12, 14), float64] */;
  %303 = cast(%302, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %304 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %305 = sinh(%303) /* ty=Tensor[(13, 12, 14), float32] */;
  %306 = %304.0;
  (%305, %306)
}

def @func_4778() -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  @func_4776() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */
}

def @func_3396() -> Tensor[(10, 11, 15), float32] {
  @func_1374() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_3668() -> (Tensor[(12, 16, 6), float32], Tensor[(12, 16, 6), float32]) {
  @func_3666() /* ty=(Tensor[(12, 16, 6), float32], Tensor[(12, 16, 6), float32]) */
}

def @func_8394(%var_8392: Tensor[(32), uint8]) -> (Tensor[(13, 12, 14), float32], Tensor[(36), float64], Tensor[(32), bool], Tensor[(10, 11, 15), float32], Tensor[(2016), float32], Tensor[(2016), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) {
  @func_8391(%var_8392) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(36), float64], Tensor[(32), bool], Tensor[(10, 11, 15), float32], Tensor[(2016), float32], Tensor[(2016), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) */
}

def @func_4093() -> (Tensor[(10, 11, 15), float32], Tensor[(16, 14, 9), float32], Tensor[(2016, 1), float32], Tensor[(36), float64]) {
  @func_4091() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(16, 14, 9), float32], Tensor[(2016, 1), float32], Tensor[(36), float64]) */
}

def @func_2043(%var_2042: Tensor[(1008, 2), float32]) -> (Tensor[(10, 11, 15), float32], Tensor[(1008, 2), float32], Tensor[(36), float64], Tensor[(16, 8, 15), float64]) {
  %316 = fn (%var_2017: Tensor[(1008, 2), float32]) -> (Tensor[(10, 11, 15), float32], Tensor[(1008, 2), float32], Tensor[(36), float64], Tensor[(16, 8, 15), float64]) {
    %307 = cast(%var_2017, dtype="float32") /* ty=Tensor[(1008, 2), float32] */;
    %308 = cast(meta[relay.Constant][19] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
    %309 = reshape(%307, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), float32] */;
    %310 = reshape(%308, newshape=[36]) /* ty=Tensor[(36), float64] */;
    %311 = @func_548(%309, %310) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) */;
    %312 = %311.2;
    %313 = cast(%312, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
    %314 = @func_1993() /* ty=Tensor[(10, 11, 15), float32] */;
    %315 = sin(%313) /* ty=Tensor[(16, 8, 15), float64] */;
    (%314, %var_2017, meta[relay.Constant][19] /* ty=Tensor[(36), float64] */, %315)
  };
  %316(%var_2042) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(1008, 2), float32], Tensor[(36), float64], Tensor[(16, 8, 15), float64]) */
}

def @func_5579() -> Tensor[(10, 11, 15), float32] {
  @func_5577() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_940(%var_938: Tensor[(13, 12, 14), float64]) -> (Tensor[(13, 12, 14), float32],) {
  @func_937(%var_938) /* ty=(Tensor[(13, 12, 14), float32],) */
}

def @func_3001() -> (Tensor[(10, 11, 15), float32],) {
  %318 = fn () -> (Tensor[(10, 11, 15), float32],) {
    %317 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
    (%317,)
  };
  %318() /* ty=(Tensor[(10, 11, 15), float32],) */
}

def @func_4939() -> (Tensor[(10, 11, 15), float32],) {
  %319 = @func_2928() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %320 = %319.0;
  (%320,)
}

def @func_6311(%var_6289: Tensor[(1920), float64]) -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(13, 12, 14), float32]) {
  %321 = @func_5328() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %322 = cast(%var_6289, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %323 = reshape(%322, newshape=[1920]) /* ty=Tensor[(1920), float64] */;
  %324 = @func_1833(%323) /* ty=(Tensor[(10, 11, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(1920), float64]) */;
  %325 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
  %326 = @func_5577() /* ty=Tensor[(10, 11, 15), float32] */;
  %327 = @func_4827() /* ty=Tensor[(13, 12, 14), float32] */;
  %328 = %321.0;
  %329 = %324.1;
  %330 = %325.1;
  (%326, %327, %328, %329, %var_6289, %330)
}

def @func_7131() -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32]) {
  @func_7129() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32]) */
}

def @func_2326(%var_2323: Tensor[(15, 13, 10), float32]) -> (Tensor[(15, 13, 10), float32],) {
  %331 = cast(%var_2323, dtype="float32") /* ty=Tensor[(15, 13, 10), float32] */;
  %332 = asinh(%331) /* ty=Tensor[(15, 13, 10), float32] */;
  (%332,)
}

def @func_8057(%var_8005: Tensor[(10, 16, 12), float64], %var_8020: Tensor[(10, 16, 12), float64], %var_8050: Tensor[(160), uint8]) -> (Tensor[(13, 12, 14), bool], Tensor[(10, 16, 12), float64], Tensor[(10, 11, 15), float32], Tensor[(10, 16, 12), bool], Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(16, 14, 9), float32], Tensor[(32), uint8], Tensor[(160), uint8]) {
  %333 = @func_3298() /* ty=(Tensor[(13, 12, 14), bool],) */;
  %334 = cast(%var_8005, dtype="float64") /* ty=Tensor[(10, 16, 12), float64] */;
  %335 = sigmoid(%334) /* ty=Tensor[(10, 16, 12), float64] */;
  %336 = cast(%var_8020, dtype="float64") /* ty=Tensor[(10, 16, 12), float64] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%335, dtype="float64") /* ty=Tensor[(10, 16, 12), float64] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %340 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %341 = cast(%var_8005, dtype="bool") /* ty=Tensor[(10, 16, 12), bool] */;
  %342 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%335, dtype="bool") /* ty=Tensor[(10, 16, 12), bool] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %345 = cast(meta[relay.Constant][20] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %346 = cast(%var_8050, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %347 = reshape(%345, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), uint8] */;
  %348 = reshape(%346, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), uint8] */;
  %349 = @func_1113(%347, %348) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(4, 5, 8), float64]) */;
  %350 = %333.0;
  %351 = mod(%338, %339) /* ty=Tensor[(10, 16, 12), float64] */;
  %352 = %340.0;
  %353 = greater_equal(%343, %344) /* ty=Tensor[(10, 16, 12), bool] */;
  %354 = @func_1993() /* ty=Tensor[(10, 11, 15), float32] */;
  %355 = @func_1993() /* ty=Tensor[(10, 11, 15), float32] */;
  %356 = %349.0;
  (%350, %351, %352, %353, %354, %355, %356, meta[relay.Constant][20] /* ty=Tensor[(32), uint8] */, %var_8050)
}

def @func_5518() -> (Tensor[(13, 12, 14), float32], Tensor[(160), uint8], Tensor[(160), uint8], Tensor[(13, 12, 14), float32]) {
  %365 = fn () -> (Tensor[(13, 12, 14), float32], Tensor[(160), uint8], Tensor[(160), uint8], Tensor[(13, 12, 14), float32]) {
    %357 = @func_4646() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %358 = cast(meta[relay.Constant][21] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
    %359 = reshape(%358, newshape=[160]) /* ty=Tensor[(160), uint8] */;
    %360 = @func_3479(%359) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float64]) */;
    %361 = @func_3246() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %362 = %357.0;
    %363 = %360.4;
    %364 = %361.0;
    (%362, %363, meta[relay.Constant][21] /* ty=Tensor[(160), uint8] */, %364)
  };
  %365() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(160), uint8], Tensor[(160), uint8], Tensor[(13, 12, 14), float32]) */
}

def @func_1702(%var_1660: Tensor[(10, 11, 15), float32], %var_1682: Tensor[(36), float64], %var_1687: Tensor[(1, 32), uint8]) -> (Tensor[(10, 11, 15), uint16], Tensor[(10, 11, 15), bool], Tensor[(2184), float64], Tensor[(36), float64], Tensor[(4, 5, 8), float64], Tensor[(1, 32), uint8], Tensor[(160), uint8]) {
  %366 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %367 = %366.0;
  %368 = cast(%var_1660, dtype="uint16") /* ty=Tensor[(10, 11, 15), uint16] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="uint16") /* ty=Tensor[(10, 11, 15), uint16] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %372 = cast(%367, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
  %373 = shape_of(%var_1660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%var_1660, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = not_equal(%374, %375) /* ty=Tensor[(10, 11, 15), bool] */;
  %377 = cast(%376, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %378 = cast(%var_1682, dtype="float64") /* ty=Tensor[(36), float64] */;
  %379 = reshape(%377, newshape=[10, 11, 15]) /* ty=Tensor[(10, 11, 15), float32] */;
  %380 = reshape(%378, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %381 = @func_1265(%379, %380) /* ty=(Tensor[(10, 11, 15), int8], Tensor[(36), float64], Tensor[(13, 12, 14), float32], Tensor[(2184), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) */;
  %382 = cast(%var_1687, dtype="uint8") /* ty=Tensor[(1, 32), uint8] */;
  %383 = cast(meta[relay.Constant][22] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %384 = reshape(%382, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), uint8] */;
  %385 = reshape(%383, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), uint8] */;
  %386 = @func_1113(%384, %385) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(4, 5, 8), float64]) */;
  %387 = multiply(%370, %371) /* ty=Tensor[(10, 11, 15), uint16] */;
  %388 = %381.3;
  %389 = %386.3;
  (%387, %376, %388, %var_1682, %389, %var_1687, meta[relay.Constant][22] /* ty=Tensor[(160), uint8] */)
}

def @func_4152() -> Tensor[(13, 12, 14), float32] {
  %390 = @func_3234() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %390.0
}

def @func_4646() -> (Tensor[(13, 12, 14), float32],) {
  %391 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %392 = %391.0;
  %393 = cast(%392, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %394 = asinh(%393) /* ty=Tensor[(13, 12, 14), float32] */;
  (%394,)
}

def @func_1116(%var_1114: Tensor[(4, 1, 8), uint8], %var_1115: Tensor[(4, 5, 8), uint8]) -> (Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(4, 5, 8), float64]) {
  %406 = fn (%var_1048: Tensor[(4, 1, 8), uint8], %var_1049: Tensor[(4, 5, 8), uint8]) -> (Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(4, 5, 8), float64]) {
    %395 = cast(meta[relay.Constant][23] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %396 = cast(meta[relay.Constant][24] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
    %397 = reshape(%395, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), float32] */;
    %398 = reshape(%396, newshape=[36]) /* ty=Tensor[(36), float64] */;
    %399 = @func_548(%397, %398) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) */;
    %400 = cast(%var_1048, dtype="uint8") /* ty=Tensor[(4, 1, 8), uint8] */;
    %401 = cast(%var_1049, dtype="uint8") /* ty=Tensor[(4, 5, 8), uint8] */;
    %402 = right_shift(%400, %401) /* ty=Tensor[(4, 5, 8), uint8] */;
    %403 = cast(%402, dtype="float64") /* ty=Tensor[(4, 5, 8), float64] */;
    %404 = %399.1;
    %405 = rsqrt(%403) /* ty=Tensor[(4, 5, 8), float64] */;
    (%404, meta[relay.Constant][23] /* ty=Tensor[(2016), float32] */, meta[relay.Constant][24] /* ty=Tensor[(36), float64] */, %405)
  };
  %406(%var_1114, %var_1115) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(4, 5, 8), float64]) */
}

def @func_2680(%var_2675: Tensor[(13, 12, 14), float32], %var_2676: Tensor[(32), uint8], %var_2677: Tensor[(160), uint8], %var_2678: Tensor[(2016, 1), float32], %var_2679: Tensor[(36), float64]) -> (Tensor[(13, 12, 14), int16], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(2016, 1), float32], Tensor[(36), float64]) {
  %429 = fn (%var_2619: Tensor[(13, 12, 14), float32], %var_2632: Tensor[(32), uint8], %var_2633: Tensor[(160), uint8], %var_2670: Tensor[(2016, 1), float32], %var_2671: Tensor[(36), float64]) -> (Tensor[(13, 12, 14), int16], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(2016, 1), float32], Tensor[(36), float64]) {
    %407 = @func_2134() /* ty=Tensor[(13, 12, 14), float32] */;
    %408 = cast(%var_2619, dtype="int16") /* ty=Tensor[(13, 12, 14), int16] */;
    %409 = shape_of(%407, dtype="int32") /* ty=Tensor[(3), int32] */;
    %410 = cast(%407, dtype="int16") /* ty=Tensor[(13, 12, 14), int16] */;
    %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %412 = cast(%var_2632, dtype="uint8") /* ty=Tensor[(32), uint8] */;
    %413 = cast(%var_2633, dtype="uint8") /* ty=Tensor[(160), uint8] */;
    %414 = reshape(%412, newshape=[32]) /* ty=Tensor[(32), uint8] */;
    %415 = reshape(%413, newshape=[160]) /* ty=Tensor[(160), uint8] */;
    %416 = @func_1314(%414, %415) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) */;
    %417 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %418 = cast(%var_2670, dtype="float32") /* ty=Tensor[(2016, 1), float32] */;
    %419 = cast(%var_2671, dtype="float64") /* ty=Tensor[(36), float64] */;
    %420 = reshape(%418, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), float32] */;
    %421 = reshape(%419, newshape=[36]) /* ty=Tensor[(36), float64] */;
    %422 = @func_548(%420, %421) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) */;
    %423 = bitwise_and(%410, %411) /* ty=Tensor[(13, 12, 14), int16] */;
    %424 = %416.2;
    %425 = %417.0;
    %426 = @func_2416() /* ty=Tensor[(13, 12, 14), float32] */;
    %427 = @func_1993() /* ty=Tensor[(10, 11, 15), float32] */;
    %428 = %422.3;
    (%423, %424, %var_2632, %var_2633, %425, %426, %427, %428, %var_2670, %var_2671)
  };
  %429(%var_2675, %var_2676, %var_2677, %var_2678, %var_2679) /* ty=(Tensor[(13, 12, 14), int16], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(2016, 1), float32], Tensor[(36), float64]) */
}

def @func_2929() -> (Tensor[(10, 11, 15), float32],) {
  %432 = fn () -> (Tensor[(10, 11, 15), float32],) {
    %430 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %431 = %430.0;
    (%431,)
  };
  %432() /* ty=(Tensor[(10, 11, 15), float32],) */
}

def @func_4941() -> (Tensor[(10, 11, 15), float32],) {
  @func_4939() /* ty=(Tensor[(10, 11, 15), float32],) */
}

def @func_8097(%var_8096: Tensor[(14, 12, 9), float64]) -> (Tensor[(14, 12, 9), bool], Tensor[(14, 12, 9), bool], Tensor[(2016), float32], Tensor[(8, 4), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32]) {
  %455 = fn (%var_8076: Tensor[(14, 12, 9), float64]) -> (Tensor[(14, 12, 9), bool], Tensor[(14, 12, 9), bool], Tensor[(2016), float32], Tensor[(8, 4), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32]) {
    %433 = cast(1.89605f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
    %434 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 12, 9), float64] */, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
    %435 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 12, 9), float64] */, dtype="float32") /* ty=Tensor[(14, 12, 9), float32] */;
    %436 = sinh(%435) /* ty=Tensor[(14, 12, 9), float32] */;
    %437 = cast(%436, dtype="float64") /* ty=Tensor[(14, 12, 9), float64] */;
    %438 = rsqrt(%437) /* ty=Tensor[(14, 12, 9), float64] */;
    %439 = cast(%var_8076, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
    %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
    %441 = cast(%438, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
    %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %443 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 4), uint8] */, dtype="uint8") /* ty=Tensor[(8, 4), uint8] */;
    %444 = cast(meta[relay.Constant][27] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
    %445 = reshape(%443, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), uint8] */;
    %446 = reshape(%444, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), uint8] */;
    %447 = @func_1113(%445, %446) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(4, 5, 8), float64]) */;
    %448 = %447.1;
    %449 = cast(%448, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %450 = reshape(%449, newshape=[1008, 2]) /* ty=Tensor[(1008, 2), float32] */;
    %451 = @func_2041(%450) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(1008, 2), float32], Tensor[(36), float64], Tensor[(16, 8, 15), float64]) */;
    %452 = not_equal(%433, %434) /* ty=Tensor[(14, 12, 9), bool] */;
    %453 = logical_and(%441, %442) /* ty=Tensor[(14, 12, 9), bool] */;
    %454 = %451.0;
    (%452, %453, %448, meta[relay.Constant][26] /* ty=Tensor[(8, 4), uint8] */, meta[relay.Constant][27] /* ty=Tensor[(160), uint8] */, %454)
  };
  %455(%var_8096) /* ty=(Tensor[(14, 12, 9), bool], Tensor[(14, 12, 9), bool], Tensor[(2016), float32], Tensor[(8, 4), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32]) */
}

def @func_3006() -> (Tensor[(13, 12, 14), float32],) {
  %456 = @func_2103() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) */;
  %457 = %456.1;
  (%457,)
}

def @func_3717() -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(18), float64]) {
  %458 = cast(meta[relay.Constant][28] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %459 = reshape(%458, newshape=[2, 3, 3]) /* ty=Tensor[(2, 3, 3), float64] */;
  %460 = @func_3130(%459) /* ty=(Tensor[(2, 3, 3), float64], Tensor[(13, 12, 14), float32]) */;
  %461 = @func_3396() /* ty=Tensor[(10, 11, 15), float32] */;
  %462 = %460.1;
  (%461, %462, meta[relay.Constant][28] /* ty=Tensor[(18), float64] */)
}

def @func_4827() -> Tensor[(13, 12, 14), float32] {
  %463 = @func_4776() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
  %463.0
}

def @func_7331() -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  %464 = @func_4646() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %465 = %464.0;
  %466 = @func_4687() /* ty=Tensor[(10, 11, 15), float32] */;
  (%465, %466)
}

def @func_1156() -> (Tensor[(10, 11, 15), float32],) {
  %467 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 11, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
  %468 = sigmoid(%467) /* ty=Tensor[(10, 11, 15), float32] */;
  (%468,)
}

def @func_1269(%var_1267: Tensor[(10, 11, 15), float32], %var_1268: Tensor[(36), float64]) -> (Tensor[(10, 11, 15), int8], Tensor[(36), float64], Tensor[(13, 12, 14), float32], Tensor[(2184), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) {
  @func_1265(%var_1267, %var_1268) /* ty=(Tensor[(10, 11, 15), int8], Tensor[(36), float64], Tensor[(13, 12, 14), float32], Tensor[(2184), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) */
}

def @func_4809() -> (Tensor[(13, 12, 14), float32],) {
  @func_4807() /* ty=(Tensor[(13, 12, 14), float32],) */
}

def @func_7333() -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  @func_7331() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */
}

def @func_7678() -> (Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) {
  %473 = fn () -> (Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) {
    %469 = @func_7569() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(1386), float32]) */;
    %470 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
    %471 = %469.1;
    %472 = %470.2;
    (%471, %472)
  };
  %473() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */
}

def @func_3719() -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(18), float64]) {
  @func_3717() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(18), float64]) */
}

def @func_4688() -> Tensor[(10, 11, 15), float32] {
  %476 = fn () -> Tensor[(10, 11, 15), float32] {
    %474 = @func_1762() /* ty=Tensor[(10, 11, 15), float32] */;
    %475 = cast(%474, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
    tan(%475) /* ty=Tensor[(10, 11, 15), float32] */
  };
  %476() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_1763() -> Tensor[(10, 11, 15), float32] {
  %478 = fn () -> Tensor[(10, 11, 15), float32] {
    %477 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %477.0
  };
  %478() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_7972(%var_7952: Tensor[(32), uint8]) -> (Tensor[(10, 11, 15), bool], Tensor[(32), uint8], Tensor[(13, 12, 14), float64]) {
  %479 = cast(%var_7952, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %480 = reshape(%479, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %481 = @func_2771(%480) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), bool], Tensor[(10, 11, 15), bool], Tensor[(36), float64], Tensor[(32), uint8]) */;
  %482 = @func_5786() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(16, 8, 15), float64], Tensor[(1650), float32], Tensor[(36), float64]) */;
  %483 = %482.1;
  %484 = cast(%483, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %485 = %481.2;
  %486 = cosh(%484) /* ty=Tensor[(13, 12, 14), float64] */;
  (%485, %var_7952, %486)
}

def @func_6332() -> Tensor[(10, 11, 15), float32] {
  %487 = fn () -> Tensor[(10, 11, 15), float32] {
    @func_3396() /* ty=Tensor[(10, 11, 15), float32] */
  };
  %487() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_7247(%var_7231: Tensor[(1386), float32]) -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(11, 9, 14), float32], Tensor[(1386), float32], Tensor[(18), float64], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  %488 = @func_5458() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %489 = @func_5293() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %490 = cast(%var_7231, dtype="float32") /* ty=Tensor[(1386), float32] */;
  %491 = cast(meta[relay.Constant][30] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %492 = reshape(%490, newshape=[11, 9, 14]) /* ty=Tensor[(11, 9, 14), float32] */;
  %493 = reshape(%491, newshape=[18]) /* ty=Tensor[(18), float64] */;
  %494 = @func_5551(%492, %493) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(18), float64], Tensor[(11, 9, 14), float32]) */;
  %495 = @func_4807() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %496 = @func_7143() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %497 = @func_6525() /* ty=Tensor[(13, 12, 14), float32] */;
  %498 = %488.0;
  %499 = %489.0;
  %500 = %494.2;
  %501 = %495.0;
  %502 = %496.0;
  (%497, %498, %499, %500, %var_7231, meta[relay.Constant][30] /* ty=Tensor[(18), float64] */, %501, %502)
}

def @func_5329() -> (Tensor[(10, 11, 15), float32],) {
  %505 = fn () -> (Tensor[(10, 11, 15), float32],) {
    %503 = @func_4610() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
    %504 = %503.1;
    (%504,)
  };
  %505() /* ty=(Tensor[(10, 11, 15), float32],) */
}

def @func_6582() -> (Tensor[(13, 12, 14), float32],) {
  %508 = fn () -> (Tensor[(13, 12, 14), float32],) {
    %506 = @func_5293() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %507 = %506.0;
    (%507,)
  };
  %508() /* ty=(Tensor[(13, 12, 14), float32],) */
}

def @func_6872() -> (Tensor[(13, 12, 14), float32],) {
  %511 = fn () -> (Tensor[(13, 12, 14), float32],) {
    %509 = @func_5786() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(16, 8, 15), float64], Tensor[(1650), float32], Tensor[(36), float64]) */;
    %510 = %509.0;
    (%510,)
  };
  %511() /* ty=(Tensor[(13, 12, 14), float32],) */
}

def @func_2809(%var_2808: Tensor[(36), float64]) -> (Tensor[(14, 7, 13), float64], Tensor[(1920), float64], Tensor[(36), float64]) {
  %518 = fn (%var_2787: Tensor[(36), float64]) -> (Tensor[(14, 7, 13), float64], Tensor[(1920), float64], Tensor[(36), float64]) {
    %512 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 7, 13), float64] */, dtype="float64") /* ty=Tensor[(14, 7, 13), float64] */;
    %513 = cast(%var_2787, dtype="float64") /* ty=Tensor[(36), float64] */;
    %514 = reshape(%513, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float64] */;
    %515 = @func_319(%514) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(12, ?, 3), int64], Tensor[(12, ?, 3), float64]) */;
    %516 = cosh(%512) /* ty=Tensor[(14, 7, 13), float64] */;
    %517 = %515.1;
    (%516, %517, %var_2787)
  };
  %518(%var_2808) /* ty=(Tensor[(14, 7, 13), float64], Tensor[(1920), float64], Tensor[(36), float64]) */
}

def @func_2105() -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) {
  @func_2103() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) */
}

def @func_5551(%var_5535: Tensor[(11, 9, 14), float32], %var_5541: Tensor[(18), float64]) -> (Tensor[(13, 12, 14), float32], Tensor[(18), float64], Tensor[(11, 9, 14), float32]) {
  %519 = cast(%var_5541, dtype="float64") /* ty=Tensor[(18), float64] */;
  %520 = reshape(%519, newshape=[2, 3, 3]) /* ty=Tensor[(2, 3, 3), float64] */;
  %521 = @func_3130(%520) /* ty=(Tensor[(2, 3, 3), float64], Tensor[(13, 12, 14), float32]) */;
  %522 = cast(%var_5535, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
  %523 = acosh(%522) /* ty=Tensor[(11, 9, 14), float32] */;
  %524 = cast(%523, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
  %525 = cosh(%524) /* ty=Tensor[(11, 9, 14), float32] */;
  %526 = cast(%525, dtype="float32") /* ty=Tensor[(11, 9, 14), float32] */;
  %527 = %521.1;
  %528 = log10(%526) /* ty=Tensor[(11, 9, 14), float32] */;
  (%527, %var_5541, %528)
}

def @func_5872(%var_5870: Tensor[(14, 1, 14), float32]) -> Tensor[(14, 1, 14), float32] {
  @func_5869(%var_5870) /* ty=Tensor[(14, 1, 14), float32] */
}

def @func_1317(%var_1315: Tensor[(32), uint8], %var_1316: Tensor[(160), uint8]) -> (Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) {
  %537 = fn (%var_1302: Tensor[(32), uint8], %var_1303: Tensor[(160), uint8]) -> (Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) {
    %529 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %530 = cast(%var_1302, dtype="uint8") /* ty=Tensor[(32), uint8] */;
    %531 = cast(%var_1303, dtype="uint8") /* ty=Tensor[(160), uint8] */;
    %532 = reshape(%530, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), uint8] */;
    %533 = reshape(%531, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), uint8] */;
    %534 = @func_1113(%532, %533) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(4, 5, 8), float64]) */;
    %535 = %529.0;
    %536 = %534.2;
    (%535, %536, %var_1302, %var_1303)
  };
  %537(%var_1315, %var_1316) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) */
}

def @func_2268(%var_2266: Tensor[(96, 20), float64], %var_2267: Tensor[(2016), float32]) -> (Tensor[(10, 11, 15), float32], Tensor[(96, 20), float64], Tensor[(16, 8, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(2016), float32], Tensor[(36), float64]) {
  @func_2264(%var_2266, %var_2267) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(96, 20), float64], Tensor[(16, 8, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(2016), float32], Tensor[(36), float64]) */
}

def @func_6117() -> Tensor[(10, 11, 15), float32] {
  %538 = @func_4939() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %538.0
}

def @func_3102(%var_3100: Tensor[(13, 12, 14), float32], %var_3101: Tensor[(32), uint8]) -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) {
  %556 = fn (%var_3087: Tensor[(13, 12, 14), float32], %var_3096: Tensor[(32), uint8]) -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) {
    %539 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %540 = @func_2103() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) */;
    %541 = %540.0;
    %542 = cast(%var_3087, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
    %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
    %544 = cast(%541, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
    %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %546 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %547 = cast(%var_3096, dtype="uint8") /* ty=Tensor[(32), uint8] */;
    %548 = cast(meta[relay.Constant][32] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
    %549 = reshape(%547, newshape=[32]) /* ty=Tensor[(32), uint8] */;
    %550 = reshape(%548, newshape=[160]) /* ty=Tensor[(160), uint8] */;
    %551 = @func_1314(%549, %550) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) */;
    %552 = %539.0;
    %553 = floor_divide(%544, %545) /* ty=Tensor[(13, 12, 14), float32] */;
    %554 = %546.0;
    %555 = %551.1;
    (%552, %553, %554, %555, %var_3096, meta[relay.Constant][32] /* ty=Tensor[(160), uint8] */)
  };
  %556(%var_3100, %var_3101) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) */
}

def @func_5869(%var_5866: Tensor[(14, 1, 14), float32]) -> Tensor[(14, 1, 14), float32] {
  %557 = cast(%var_5866, dtype="float32") /* ty=Tensor[(14, 1, 14), float32] */;
  atan(%557) /* ty=Tensor[(14, 1, 14), float32] */
}

def @func_7144() -> (Tensor[(10, 11, 15), float32],) {
  %559 = fn () -> (Tensor[(10, 11, 15), float32],) {
    %558 = @func_3396() /* ty=Tensor[(10, 11, 15), float32] */;
    (%558,)
  };
  %559() /* ty=(Tensor[(10, 11, 15), float32],) */
}

def @func_3645(%var_3644: Tensor[(2184), float64]) -> Tensor[(2184), float64] {
  %566 = fn (%var_3629: Tensor[(2184), float64]) -> Tensor[(2184), float64] {
    %560 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
    %561 = %560.2;
    %562 = cast(%var_3629, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(1), int32] */;
    %564 = cast(%561, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?), float64] */;
    multiply(%564, %565) /* ty=Tensor[(2184), float64] */
  };
  %566(%var_3644) /* ty=Tensor[(2184), float64] */
}

def @func_7129() -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32]) {
  %567 = @func_5328() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %568 = @func_4646() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %569 = %567.0;
  %570 = %568.0;
  (%569, %570)
}

def @func_6377(%var_6342: Tensor[(1, 5, 9), int8], %var_6343: Tensor[(1, 5, 9), int8], %var_6362: Tensor[(2016), float32], %var_6363: Tensor[(3, 12), float64]) -> (Tensor[(13, 12, 14), float32], Tensor[(?, 5, 9), bool], Tensor[(16, 14, 9), bool], Tensor[(2016), float32], Tensor[(3, 12), float64]) {
  %571 = cast(%var_6343, dtype="int8") /* ty=Tensor[(1, 5, 9), int8] */;
  %572 = shape_of(%var_6342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%var_6342, dtype="int8") /* ty=Tensor[(1, 5, 9), int8] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %575 = maximum(%573, %574) /* ty=Tensor[(?, 5, 9), int8] */;
  %576 = cast(%575, dtype="bool") /* ty=Tensor[(?, 5, 9), bool] */;
  %577 = shape_of(%var_6342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%var_6342, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %580 = cast(%var_6362, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %581 = cast(%var_6363, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
  %582 = reshape(%580, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %583 = reshape(%581, newshape=[36, 1]) /* ty=Tensor[(36, 1), float64] */;
  %584 = @func_1581(%582, %583) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(36, 1), float64], Tensor[(16, 14, 9), bool]) */;
  %585 = @func_4827() /* ty=Tensor[(13, 12, 14), float32] */;
  %586 = equal(%578, %579) /* ty=Tensor[(?, 5, 9), bool] */;
  %587 = %584.3;
  (%585, %586, %587, %var_6362, %var_6363)
}

def @func_5089() -> (Tensor[(13, 12, 14), float32],) {
  %590 = fn () -> (Tensor[(13, 12, 14), float32],) {
    %588 = @func_4776() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
    %589 = %588.0;
    (%589,)
  };
  %590() /* ty=(Tensor[(13, 12, 14), float32],) */
}

def @func_319(%var_275: Tensor[(12, 1, 3), float64]) -> (Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(12, ?, 3), int64], Tensor[(12, ?, 3), float64]) {
  %591 = cast(meta[relay.Constant][33] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %592 = reshape(%591, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %593 = @func_83(%592) /* ty=Tensor[(16, 8, 15), float64] */;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %595 = reshape(%594, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %596 = cast(meta[relay.Constant][33] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %597 = reshape(%596, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %598 = @func_83(%597) /* ty=Tensor[(16, 8, 15), float64] */;
  %599 = cast(%598, dtype="float64") /* ty=Tensor[(16, 8, 15), float64] */;
  %600 = reshape(%599, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
  %601 = cast(%var_275, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  %602 = exp(%601) /* ty=Tensor[(12, 1, 3), float64] */;
  %603 = cast(%var_275, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%602, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %607 = greater(%605, %606) /* ty=Tensor[(12, ?, 3), bool] */;
  %608 = cast(%var_275, dtype="int64") /* ty=Tensor[(12, 1, 3), int64] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%607, dtype="int64") /* ty=Tensor[(12, ?, 3), int64] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %612 = cast(%602, dtype="uint8") /* ty=Tensor[(12, 1, 3), uint8] */;
  %613 = shape_of(%var_275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%var_275, dtype="uint8") /* ty=Tensor[(12, 1, 3), uint8] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %616 = right_shift(%614, %615) /* ty=Tensor[(12, ?, 3), uint8] */;
  %617 = cast(%616, dtype="float64") /* ty=Tensor[(12, ?, 3), float64] */;
  %618 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%602, dtype="float64") /* ty=Tensor[(12, 1, 3), float64] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %621 = @func_83(%595) /* ty=Tensor[(16, 8, 15), float64] */;
  %622 = @func_83(%600) /* ty=Tensor[(16, 8, 15), float64] */;
  %623 = bitwise_xor(%610, %611) /* ty=Tensor[(12, ?, 3), int64] */;
  %624 = floor_divide(%619, %620) /* ty=Tensor[(12, ?, 3), float64] */;
  (%593, meta[relay.Constant][33] /* ty=Tensor[(1920), float64] */, %621, %598, %622, %623, %624)
}

def @func_4256(%var_4254: Tensor[(3, 9, 3), int64], %var_4255: Tensor[(3, 9, 3), int64]) -> (Tensor[(3, 9, 3), float64],) {
  @func_4252(%var_4254, %var_4255) /* ty=(Tensor[(3, 9, 3), float64],) */
}

def @func_1374() -> Tensor[(10, 11, 15), float32] {
  %625 = @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %625.0
}

def @func_4091() -> (Tensor[(10, 11, 15), float32], Tensor[(16, 14, 9), float32], Tensor[(2016, 1), float32], Tensor[(36), float64]) {
  %626 = cast(meta[relay.Constant][34] /* ty=Tensor[(2016, 1), float32] */, dtype="float32") /* ty=Tensor[(2016, 1), float32] */;
  %627 = cast(meta[relay.Constant][35] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %628 = reshape(%626, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), float32] */;
  %629 = reshape(%627, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %630 = @func_548(%628, %629) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) */;
  %631 = @func_3396() /* ty=Tensor[(10, 11, 15), float32] */;
  %632 = %630.1;
  (%631, %632, meta[relay.Constant][34] /* ty=Tensor[(2016, 1), float32] */, meta[relay.Constant][35] /* ty=Tensor[(36), float64] */)
}

def @func_8062(%var_8059: Tensor[(10, 16, 12), float64], %var_8060: Tensor[(10, 16, 12), float64], %var_8061: Tensor[(160), uint8]) -> (Tensor[(13, 12, 14), bool], Tensor[(10, 16, 12), float64], Tensor[(10, 11, 15), float32], Tensor[(10, 16, 12), bool], Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(16, 14, 9), float32], Tensor[(32), uint8], Tensor[(160), uint8]) {
  @func_8057(%var_8059, %var_8060, %var_8061) /* ty=(Tensor[(13, 12, 14), bool], Tensor[(10, 16, 12), float64], Tensor[(10, 11, 15), float32], Tensor[(10, 16, 12), bool], Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(16, 14, 9), float32], Tensor[(32), uint8], Tensor[(160), uint8]) */
}

def @func_3787() -> (Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), int64]) {
  %645 = fn () -> (Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), int64]) {
    %633 = cast(meta[relay.Constant][36] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
    %634 = reshape(%633, newshape=[160]) /* ty=Tensor[(160), uint8] */;
    %635 = @func_3479(%634) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float64]) */;
    %636 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
    %637 = cast(%636, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
    %638 = sinh(%637) /* ty=Tensor[(10, 11, 15), float64] */;
    %639 = cast(%636, dtype="int64") /* ty=Tensor[(10, 11, 15), int64] */;
    %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
    %641 = cast(%638, dtype="int64") /* ty=Tensor[(10, 11, 15), int64] */;
    %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %643 = %635.2;
    %644 = add(%641, %642) /* ty=Tensor[(10, 11, 15), int64] */;
    (%643, meta[relay.Constant][36] /* ty=Tensor[(160), uint8] */, %644)
  };
  %645() /* ty=(Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), int64]) */
}

def @func_7764() -> Tensor[(10, 11, 15), float32] {
  @func_7762() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_7720() -> (Tensor[(13, 12, 14), bool], Tensor[(13, 12, 14), float32], Tensor[(208), int64], Tensor[(4, 8), uint8], Tensor[(160), uint8], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  %668 = fn () -> (Tensor[(13, 12, 14), bool], Tensor[(13, 12, 14), float32], Tensor[(208), int64], Tensor[(4, 8), uint8], Tensor[(160), uint8], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
    %646 = @func_3234() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %647 = %646.0;
    %648 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 12, 14), float32] */, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
    %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
    %650 = cast(%647, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
    %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %652 = cast(meta[relay.Constant][38] /* ty=Tensor[(208), int64] */, dtype="int64") /* ty=Tensor[(208), int64] */;
    %653 = cast(meta[relay.Constant][38] /* ty=Tensor[(208), int64] */, dtype="int64") /* ty=Tensor[(208), int64] */;
    %654 = reshape(%652, newshape=[2, 13, 8]) /* ty=Tensor[(2, 13, 8), int64] */;
    %655 = reshape(%653, newshape=[2, 13, 8]) /* ty=Tensor[(2, 13, 8), int64] */;
    %656 = @func_7414(%654, %655) /* ty=(Tensor[(2, 13, 8), int64], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(2016), float32], Tensor[(36), float64]) */;
    %657 = cast(meta[relay.Constant][39] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
    %658 = reshape(%657, newshape=[160]) /* ty=Tensor[(160), uint8] */;
    %659 = @func_1752(%658) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(4, 5, 8), float64], Tensor[(4, 8), uint8], Tensor[(160), uint8]) */;
    %660 = cast(%647, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
    %661 = sqrt(%660) /* ty=Tensor[(13, 12, 14), float32] */;
    %662 = cast(%661, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
    %663 = not_equal(%650, %651) /* ty=Tensor[(13, 12, 14), bool] */;
    %664 = %656.1;
    %665 = %659.2;
    %666 = atanh(%662) /* ty=Tensor[(13, 12, 14), float32] */;
    %667 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
    (%663, %664, meta[relay.Constant][38] /* ty=Tensor[(208), int64] */, %665, meta[relay.Constant][39] /* ty=Tensor[(160), uint8] */, %666, %667)
  };
  %668() /* ty=(Tensor[(13, 12, 14), bool], Tensor[(13, 12, 14), float32], Tensor[(208), int64], Tensor[(4, 8), uint8], Tensor[(160), uint8], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */
}

def @main(%var_8568: Tensor[(16, 4, 8), float64]) -> (Tensor[(16, 4, 8), float64],) {
  %669 = cast(%var_8568, dtype="float64") /* ty=Tensor[(16, 4, 8), float64] */;
  %670 = log(%669) /* ty=Tensor[(16, 4, 8), float64] */;
  (%670,)
}

def @func_3956(%var_3955: Tensor[(13, 12, 14), bool]) -> Tensor[(13, 12, 14), uint8] {
  %677 = fn (%var_3943: Tensor[(13, 12, 14), bool]) -> Tensor[(13, 12, 14), uint8] {
    %671 = @func_3298() /* ty=(Tensor[(13, 12, 14), bool],) */;
    %672 = %671.0;
    %673 = cast(%var_3943, dtype="uint8") /* ty=Tensor[(13, 12, 14), uint8] */;
    %674 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
    %675 = cast(%672, dtype="uint8") /* ty=Tensor[(13, 12, 14), uint8] */;
    %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    logical_xor(%675, %676) /* ty=Tensor[(13, 12, 14), uint8] */
  };
  %677(%var_3955) /* ty=Tensor[(13, 12, 14), uint8] */
}

def @func_1437(%var_1435: Tensor[(2016), float32], %var_1436: Tensor[(36), float64]) -> (Tensor[(10, 11, 15), uint64], Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64]) {
  %690 = fn (%var_1400: Tensor[(2016), float32], %var_1401: Tensor[(36), float64]) -> (Tensor[(10, 11, 15), uint64], Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64]) {
    %678 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
    %679 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 11, 15), float32] */, dtype="uint64") /* ty=Tensor[(10, 11, 15), uint64] */;
    %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
    %681 = cast(%678, dtype="uint64") /* ty=Tensor[(10, 11, 15), uint64] */;
    %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %683 = cast(%var_1400, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %684 = cast(%var_1401, dtype="float64") /* ty=Tensor[(36), float64] */;
    %685 = reshape(%683, newshape=[16, 14, 9]) /* ty=Tensor[(16, 14, 9), float32] */;
    %686 = reshape(%684, newshape=[36]) /* ty=Tensor[(36), float64] */;
    %687 = @func_548(%685, %686) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(16, 14, 9), float32], Tensor[(16, 8, 15), float64], Tensor[(36), float64]) */;
    %688 = left_shift(%681, %682) /* ty=Tensor[(10, 11, 15), uint64] */;
    %689 = %687.0;
    (%688, %689, %var_1400, %var_1401)
  };
  %690(%var_1435, %var_1436) /* ty=(Tensor[(10, 11, 15), uint64], Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64]) */
}

def @func_1752(%var_1746: Tensor[(160), uint8]) -> (Tensor[(10, 11, 15), float32], Tensor[(4, 5, 8), float64], Tensor[(4, 8), uint8], Tensor[(160), uint8]) {
  %691 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 8), uint8] */, dtype="uint8") /* ty=Tensor[(4, 8), uint8] */;
  %692 = cast(%var_1746, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %693 = reshape(%691, newshape=[4, 1, 8]) /* ty=Tensor[(4, 1, 8), uint8] */;
  %694 = reshape(%692, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), uint8] */;
  %695 = @func_1113(%693, %694) /* ty=(Tensor[(16, 14, 9), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(4, 5, 8), float64]) */;
  %696 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
  %697 = %695.3;
  (%696, %697, meta[relay.Constant][41] /* ty=Tensor[(4, 8), uint8] */, %var_1746)
}

def @func_5191() -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  %702 = fn () -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
    %698 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %699 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %700 = %698.0;
    %701 = %699.0;
    (%700, %701)
  };
  %702() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */
}

def @func_5676(%var_5675: Tensor[(9, 10, 1), uint8]) -> (Tensor[(9, 10, 1), uint8],) {
  %706 = fn (%var_5667: Tensor[(9, 10, 1), uint8]) -> (Tensor[(9, 10, 1), uint8],) {
    %703 = cast(meta[relay.Constant][42] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %704 = cast(%var_5667, dtype="uint8") /* ty=Tensor[(9, 10, 1), uint8] */;
    %705 = add(%703, %704) /* ty=Tensor[(9, 10, 1), uint8] */;
    (%705,)
  };
  %706(%var_5675) /* ty=(Tensor[(9, 10, 1), uint8],) */
}

def @func_8493() -> (Tensor[(10, 11, 15), float32], Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(10, 11, 15), float32]) {
  %714 = fn () -> (Tensor[(10, 11, 15), float32], Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(10, 11, 15), float32]) {
    %707 = @func_2928() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %708 = cast(meta[relay.Constant][43] /* ty=Tensor[(1920), float64] */, dtype="float64") /* ty=Tensor[(1920), float64] */;
    %709 = reshape(%708, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
    %710 = @func_7129() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32]) */;
    %711 = %707.0;
    %712 = @func_83(%709) /* ty=Tensor[(16, 8, 15), float64] */;
    %713 = %710.0;
    (%711, %712, meta[relay.Constant][43] /* ty=Tensor[(1920), float64] */, %713)
  };
  %714() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(10, 11, 15), float32]) */
}

def @func_3589(%var_3588: Tensor[(36), float64]) -> (Tensor[(13, 12, 14), float64], Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) {
  %727 = fn (%var_3558: Tensor[(36), float64]) -> (Tensor[(13, 12, 14), float64], Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) {
    %715 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %716 = %715.0;
    %717 = cast(%716, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
    %718 = cast(%var_3558, dtype="float64") /* ty=Tensor[(36), float64] */;
    %719 = reshape(%718, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), float64] */;
    %720 = @func_319(%719) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(1920), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(12, ?, 3), int64], Tensor[(12, ?, 3), float64]) */;
    %721 = @func_3246() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %722 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %723 = erf(%717) /* ty=Tensor[(13, 12, 14), float64] */;
    %724 = %720.3;
    %725 = %721.0;
    %726 = %722.0;
    (%723, %724, %var_3558, %725, %726)
  };
  %727(%var_3588) /* ty=(Tensor[(13, 12, 14), float64], Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) */
}

def @func_8391(%var_8335: Tensor[(32), uint8]) -> (Tensor[(13, 12, 14), float32], Tensor[(36), float64], Tensor[(32), bool], Tensor[(10, 11, 15), float32], Tensor[(2016), float32], Tensor[(2016), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32]) {
  %728 = @func_6871() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %729 = cast(meta[relay.Constant][44] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %730 = reshape(%729, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %731 = @func_2771(%730) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), bool], Tensor[(10, 11, 15), bool], Tensor[(36), float64], Tensor[(32), uint8]) */;
  %732 = cast(%var_8335, dtype="bool") /* ty=Tensor[(32), bool] */;
  %733 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(32), uint8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %734 = cast(meta[relay.Constant][44] /* ty=Tensor[(32), uint8] */, dtype="bool") /* ty=Tensor[(32), bool] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?), bool] */;
  %736 = @func_7129() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32]) */;
  %737 = cast(meta[relay.Constant][45] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %738 = %731.3;
  %739 = cast(%738, dtype="float64") /* ty=Tensor[(36), float64] */;
  %740 = %728.0;
  %741 = cast(%740, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %742 = reshape(%737, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %743 = reshape(%739, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %744 = reshape(%741, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float32] */;
  %745 = @func_3193(%742, %743, %744) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(13, 12, 14), bool]) */;
  %746 = @func_7569() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(1386), float32]) */;
  %747 = equal(%734, %735) /* ty=Tensor[(32), bool] */;
  %748 = %736.0;
  %749 = %745.1;
  %750 = @func_6525() /* ty=Tensor[(13, 12, 14), float32] */;
  %751 = %746.0;
  (%740, %738, %747, %748, %749, meta[relay.Constant][45] /* ty=Tensor[(2016), float32] */, %750, %751)
}

def @func_3512() -> (Tensor[(2184), float64], Tensor[(10, 11, 15), float32]) {
  %757 = fn () -> (Tensor[(2184), float64], Tensor[(10, 11, 15), float32]) {
    %752 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
    %753 = %752.2;
    %754 = cast(%753, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %755 = exp(%754) /* ty=Tensor[(2184), float64] */;
    %756 = @func_3396() /* ty=Tensor[(10, 11, 15), float32] */;
    (%755, %756)
  };
  %757() /* ty=(Tensor[(2184), float64], Tensor[(10, 11, 15), float32]) */
}

def @func_5555(%var_5553: Tensor[(11, 9, 14), float32], %var_5554: Tensor[(18), float64]) -> (Tensor[(13, 12, 14), float32], Tensor[(18), float64], Tensor[(11, 9, 14), float32]) {
  @func_5551(%var_5553, %var_5554) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(18), float64], Tensor[(11, 9, 14), float32]) */
}

def @func_3882() -> (Tensor[(10, 11, 15), float64], Tensor[(13, 12, 14), float32]) {
  %764 = fn () -> (Tensor[(10, 11, 15), float64], Tensor[(13, 12, 14), float32]) {
    %758 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %759 = %758.0;
    %760 = cast(%759, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
    %761 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %762 = asin(%760) /* ty=Tensor[(10, 11, 15), float64] */;
    %763 = %761.0;
    (%762, %763)
  };
  %764() /* ty=(Tensor[(10, 11, 15), float64], Tensor[(13, 12, 14), float32]) */
}

def @func_6087(%var_6086: Tensor[(36), float64]) -> (Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(18), float64], Tensor[(13, 12, 14), float32], Tensor[(2184), float64], Tensor[(84), float32], Tensor[(7, 12, 6), float64]) {
  %786 = fn (%var_6026: Tensor[(36), float64]) -> (Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(18), float64], Tensor[(13, 12, 14), float32], Tensor[(2184), float64], Tensor[(84), float32], Tensor[(7, 12, 6), float64]) {
    %765 = @func_4776() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
    %766 = %765.1;
    %767 = cast(%766, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
    %768 = cast(%var_6026, dtype="float64") /* ty=Tensor[(36), float64] */;
    %769 = cast(meta[relay.Constant][46] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
    %770 = reshape(%767, newshape=[10, 11, 15]) /* ty=Tensor[(10, 11, 15), float32] */;
    %771 = reshape(%768, newshape=[36]) /* ty=Tensor[(36), float64] */;
    %772 = reshape(%769, newshape=[1, 32]) /* ty=Tensor[(1, 32), uint8] */;
    %773 = @func_1702(%770, %771, %772) /* ty=(Tensor[(10, 11, 15), uint16], Tensor[(10, 11, 15), bool], Tensor[(2184), float64], Tensor[(36), float64], Tensor[(4, 5, 8), float64], Tensor[(1, 32), uint8], Tensor[(160), uint8]) */;
    %774 = @func_3717() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(18), float64]) */;
    %775 = cast(meta[relay.Constant][47] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %776 = reshape(%775, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float64] */;
    %777 = @func_937(%776) /* ty=(Tensor[(13, 12, 14), float32],) */;
    %778 = cast(meta[relay.Constant][48] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
    %779 = reshape(%778, newshape=[7, 12, 1]) /* ty=Tensor[(7, 12, 1), float32] */;
    %780 = @func_4359(%779) /* ty=Tensor[(7, 12, 6), float32] */;
    %781 = cast(%780, dtype="float64") /* ty=Tensor[(7, 12, 6), float64] */;
    %782 = %773.3;
    %783 = %774.2;
    %784 = %777.0;
    %785 = log10(%781) /* ty=Tensor[(7, 12, 6), float64] */;
    (%766, %782, %var_6026, meta[relay.Constant][46] /* ty=Tensor[(32), uint8] */, %783, %784, meta[relay.Constant][47] /* ty=Tensor[(2184), float64] */, meta[relay.Constant][48] /* ty=Tensor[(84), float32] */, %785)
  };
  %786(%var_6086) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(18), float64], Tensor[(13, 12, 14), float32], Tensor[(2184), float64], Tensor[(84), float32], Tensor[(7, 12, 6), float64]) */
}

def @func_5719() -> (Tensor[(13, 12, 14), float32], Tensor[(80, 2), uint8], Tensor[(720), float64], Tensor[(32), uint8]) {
  %795 = fn () -> (Tensor[(13, 12, 14), float32], Tensor[(80, 2), uint8], Tensor[(720), float64], Tensor[(32), uint8]) {
    %787 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %788 = cast(meta[relay.Constant][49] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %789 = cast(meta[relay.Constant][50] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
    %790 = reshape(%788, newshape=[10, 6, 12]) /* ty=Tensor[(10, 6, 12), float64] */;
    %791 = reshape(%789, newshape=[1, 32]) /* ty=Tensor[(1, 32), uint8] */;
    %792 = @func_4419(%790, %791) /* ty=(Tensor[(10, 6, 12), float64], Tensor[(2016, 1), float32], Tensor[(2184), float32], Tensor[(1, 32), uint8], Tensor[(80, 2), uint8], Tensor[(2016), float32], Tensor[(36), float64], Tensor[(2184), float64], Tensor[(10, 11, 15), float32]) */;
    %793 = %787.0;
    %794 = %792.4;
    (%793, %794, meta[relay.Constant][49] /* ty=Tensor[(720), float64] */, meta[relay.Constant][50] /* ty=Tensor[(32), uint8] */)
  };
  %795() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(80, 2), uint8], Tensor[(720), float64], Tensor[(32), uint8]) */
}

def @func_5294() -> (Tensor[(13, 12, 14), float32],) {
  %798 = fn () -> (Tensor[(13, 12, 14), float32],) {
    %796 = @func_3246() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %797 = %796.0;
    (%797,)
  };
  %798() /* ty=(Tensor[(13, 12, 14), float32],) */
}

def @func_3398() -> Tensor[(10, 11, 15), float32] {
  @func_3396() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_4361(%var_4360: Tensor[(7, 12, 1), float32]) -> Tensor[(7, 12, 6), float32] {
  %801 = fn (%var_4351: Tensor[(7, 12, 1), float32]) -> Tensor[(7, 12, 6), float32] {
    %799 = cast(%var_4351, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
    %800 = cast(meta[relay.Constant][51] /* ty=Tensor[(7, 12, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 6), float32] */;
    floor_divide(%799, %800) /* ty=Tensor[(7, 12, 6), float32] */
  };
  %801(%var_4360) /* ty=Tensor[(7, 12, 6), float32] */
}

def @func_2329(%var_2327: Tensor[(15, 13, 10), float32]) -> (Tensor[(15, 13, 10), float32],) {
  @func_2326(%var_2327) /* ty=(Tensor[(15, 13, 10), float32],) */
}

def @func_7975(%var_7973: Tensor[(32), uint8]) -> (Tensor[(10, 11, 15), bool], Tensor[(32), uint8], Tensor[(13, 12, 14), float64]) {
  @func_7972(%var_7973) /* ty=(Tensor[(10, 11, 15), bool], Tensor[(32), uint8], Tensor[(13, 12, 14), float64]) */
}

def @func_5096() -> Tensor[(13, 12, 14), float32] {
  %802 = @func_4776() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */;
  %802.0
}

def @func_8275(%var_8273: Tensor[(36, 1), float64], %var_8274: Tensor[(10, 11, 15), float64]) -> (Tensor[(32), uint8], Tensor[(36, 1), float64], Tensor[(1008, 2), float32], Tensor[(36, 1), float64], Tensor[(10, 11, 15), bool], Tensor[(10, 11, 15), float32]) {
  @func_8271(%var_8273, %var_8274) /* ty=(Tensor[(32), uint8], Tensor[(36, 1), float64], Tensor[(1008, 2), float32], Tensor[(36, 1), float64], Tensor[(10, 11, 15), bool], Tensor[(10, 11, 15), float32]) */
}

def @func_8464(%var_8462: Tensor[(1386), float32], %var_8463: Tensor[(1386), float32]) -> (Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(1386), uint8]) {
  @func_8460(%var_8462, %var_8463) /* ty=(Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(1386), uint8]) */
}

def @func_7066(%var_7065: Tensor[(10, 11, 15), float32]) -> (Tensor[(13, 12, 14), float32], Tensor[(84), float32], Tensor[(10, 11, 15), float64], Tensor[(12, 16, 6), float32]) {
  %814 = fn (%var_7048: Tensor[(10, 11, 15), float32]) -> (Tensor[(13, 12, 14), float32], Tensor[(84), float32], Tensor[(10, 11, 15), float64], Tensor[(12, 16, 6), float32]) {
    %803 = @func_4479() /* ty=(Tensor[(10, 11, 15), float64], Tensor[(7, 12, 6), float32], Tensor[(84), float32]) */;
    %804 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
    %805 = cast(%var_7048, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
    %806 = shape_of(%804, dtype="int32") /* ty=Tensor[(3), int32] */;
    %807 = cast(%804, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
    %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %809 = @func_3666() /* ty=(Tensor[(12, 16, 6), float32], Tensor[(12, 16, 6), float32]) */;
    %810 = @func_4827() /* ty=Tensor[(13, 12, 14), float32] */;
    %811 = %803.2;
    %812 = divide(%807, %808) /* ty=Tensor[(10, 11, 15), float64] */;
    %813 = %809.0;
    (%810, %811, %812, %813)
  };
  %814(%var_7065) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(84), float32], Tensor[(10, 11, 15), float64], Tensor[(12, 16, 6), float32]) */
}

def @func_1481(%var_1480: Tensor[(10, 11, 15), float32]) -> Tensor[(10, 11, 15), int32] {
  %824 = fn (%var_1468: Tensor[(10, 11, 15), float32]) -> Tensor[(10, 11, 15), int32] {
    %815 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
    %816 = cast(%815, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
    %817 = asinh(%816) /* ty=Tensor[(10, 11, 15), float64] */;
    %818 = cast(%817, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
    %819 = log10(%818) /* ty=Tensor[(10, 11, 15), float32] */;
    %820 = cast(%var_1468, dtype="int32") /* ty=Tensor[(10, 11, 15), int32] */;
    %821 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
    %822 = cast(%819, dtype="int32") /* ty=Tensor[(10, 11, 15), int32] */;
    %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    maximum(%822, %823) /* ty=Tensor[(10, 11, 15), int32] */
  };
  %824(%var_1480) /* ty=Tensor[(10, 11, 15), int32] */
}

def @func_7803() -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32]) {
  %828 = fn () -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32]) {
    %825 = @func_7390() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %826 = @func_4687() /* ty=Tensor[(10, 11, 15), float32] */;
    %827 = %825.0;
    (%826, %827)
  };
  %828() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32]) */
}

def @func_6526() -> Tensor[(13, 12, 14), float32] {
  %829 = fn () -> Tensor[(13, 12, 14), float32] {
    @func_4827() /* ty=Tensor[(13, 12, 14), float32] */
  };
  %829() /* ty=Tensor[(13, 12, 14), float32] */
}

def @func_1835(%var_1834: Tensor[(1920), float64]) -> (Tensor[(10, 11, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(1920), float64]) {
  %842 = fn (%var_1828: Tensor[(1920), float64]) -> (Tensor[(10, 11, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(1920), float64]) {
    %830 = @func_1618() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */;
    %831 = %830.0;
    %832 = cast(meta[relay.Constant][52] /* ty=Tensor[(10, 11, 15), float32] */, dtype="int16") /* ty=Tensor[(10, 11, 15), int16] */;
    %833 = shape_of(%831, dtype="int32") /* ty=Tensor[(3), int32] */;
    %834 = cast(%831, dtype="int16") /* ty=Tensor[(10, 11, 15), int16] */;
    %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %836 = bitwise_or(%834, %835) /* ty=Tensor[(10, 11, 15), int16] */;
    %837 = cast(%836, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
    %838 = cast(%var_1828, dtype="float64") /* ty=Tensor[(1920), float64] */;
    %839 = reshape(%838, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), float64] */;
    %840 = acosh(%837) /* ty=Tensor[(10, 11, 15), float64] */;
    %841 = @func_83(%839) /* ty=Tensor[(16, 8, 15), float64] */;
    (%840, %841, %var_1828)
  };
  %842(%var_1834) /* ty=(Tensor[(10, 11, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(1920), float64]) */
}

def @func_1619() -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) {
  %848 = fn () -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) {
    %843 = cast(meta[relay.Constant][53] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %844 = reshape(%843, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float64] */;
    %845 = @func_937(%844) /* ty=(Tensor[(13, 12, 14), float32],) */;
    %846 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
    %847 = %845.0;
    (%846, %847, meta[relay.Constant][53] /* ty=Tensor[(2184), float64] */)
  };
  %848() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(2184), float64]) */
}

def @func_6679() -> (Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float64]) {
  %849 = @func_3234() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %850 = %849.0;
  %851 = cast(%850, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %852 = @func_5577() /* ty=Tensor[(10, 11, 15), float32] */;
  %853 = rsqrt(%851) /* ty=Tensor[(13, 12, 14), float64] */;
  (%852, %853)
}

def @func_4930(%var_4926: Tensor[(12, 6, 16), float32], %var_4927: float32, %var_4928: Tensor[(2184), float32], %var_4929: Tensor[(32), uint8]) -> (Tensor[(12, 6, 16), float32], Tensor[(16, 8, 15), float64], float32, Tensor[(36), float64], Tensor[(160), uint8], Tensor[(2184), float32], Tensor[(32), uint8]) {
  %868 = fn (%var_4900: Tensor[(12, 6, 16), float32], %var_4905: float32, %var_4922: Tensor[(2184), float32], %var_4923: Tensor[(32), uint8]) -> (Tensor[(12, 6, 16), float32], Tensor[(16, 8, 15), float64], float32, Tensor[(36), float64], Tensor[(160), uint8], Tensor[(2184), float32], Tensor[(32), uint8]) {
    %854 = cast(%var_4900, dtype="float32") /* ty=Tensor[(12, 6, 16), float32] */;
    %855 = cast(%var_4905, dtype="float32") /* ty=float32 */;
    %856 = cast(meta[relay.Constant][54] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
    %857 = reshape(%855, newshape=[]) /* ty=float32 */;
    %858 = reshape(%856, newshape=[36]) /* ty=Tensor[(36), float64] */;
    %859 = @func_386(%857, %858) /* ty=(Tensor[(16, 8, 15), float64], Tensor[(36), float64], Tensor[(11, 10, 11), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(16, 8, 15), float64]) */;
    %860 = cast(%var_4922, dtype="float32") /* ty=Tensor[(2184), float32] */;
    %861 = cast(%var_4923, dtype="uint8") /* ty=Tensor[(32), uint8] */;
    %862 = reshape(%860, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float32] */;
    %863 = reshape(%861, newshape=[32]) /* ty=Tensor[(32), uint8] */;
    %864 = @func_3099(%862, %863) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) */;
    %865 = exp(%854) /* ty=Tensor[(12, 6, 16), float32] */;
    %866 = %859.0;
    %867 = %864.5;
    (%865, %866, %var_4905, meta[relay.Constant][54] /* ty=Tensor[(36), float64] */, %867, %var_4922, %var_4923)
  };
  %868(%var_4926, %var_4927, %var_4928, %var_4929) /* ty=(Tensor[(12, 6, 16), float32], Tensor[(16, 8, 15), float64], float32, Tensor[(36), float64], Tensor[(160), uint8], Tensor[(2184), float32], Tensor[(32), uint8]) */
}

def @func_3008() -> (Tensor[(13, 12, 14), float32],) {
  @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */
}

def @func_6119() -> Tensor[(10, 11, 15), float32] {
  @func_6117() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_3246() -> (Tensor[(13, 12, 14), float32],) {
  %869 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %870 = %869.0;
  (%870,)
}

def @func_2773(%var_2772: Tensor[(32), uint8]) -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), bool], Tensor[(10, 11, 15), bool], Tensor[(36), float64], Tensor[(32), uint8]) {
  %890 = fn (%var_2768: Tensor[(32), uint8]) -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), bool], Tensor[(10, 11, 15), bool], Tensor[(36), float64], Tensor[(32), uint8]) {
    %871 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %872 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %873 = %872.0;
    %874 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %875 = %874.0;
    %876 = cast(%875, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
    %877 = shape_of(%873, dtype="int32") /* ty=Tensor[(3), int32] */;
    %878 = cast(%873, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
    %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %880 = cast(%873, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
    %881 = cast(meta[relay.Constant][55] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
    %882 = cast(%var_2768, dtype="uint8") /* ty=Tensor[(32), uint8] */;
    %883 = reshape(%880, newshape=[10, 11, 15]) /* ty=Tensor[(10, 11, 15), float32] */;
    %884 = reshape(%881, newshape=[36]) /* ty=Tensor[(36), float64] */;
    %885 = reshape(%882, newshape=[1, 32]) /* ty=Tensor[(1, 32), uint8] */;
    %886 = @func_1702(%883, %884, %885) /* ty=(Tensor[(10, 11, 15), uint16], Tensor[(10, 11, 15), bool], Tensor[(2184), float64], Tensor[(36), float64], Tensor[(4, 5, 8), float64], Tensor[(1, 32), uint8], Tensor[(160), uint8]) */;
    %887 = %871.0;
    %888 = less(%878, %879) /* ty=Tensor[(10, 11, 15), bool] */;
    %889 = %886.1;
    (%887, %888, %889, meta[relay.Constant][55] /* ty=Tensor[(36), float64] */, %var_2768)
  };
  %890(%var_2772) /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), bool], Tensor[(10, 11, 15), bool], Tensor[(36), float64], Tensor[(32), uint8]) */
}

def @func_937(%var_930: Tensor[(13, 12, 14), float64]) -> (Tensor[(13, 12, 14), float32],) {
  %891 = cast(%var_930, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
  %892 = asin(%891) /* ty=Tensor[(13, 12, 14), float64] */;
  %893 = cast(%892, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %894 = atan(%893) /* ty=Tensor[(13, 12, 14), float32] */;
  (%894,)
}

def @func_2264(%var_2216: Tensor[(96, 20), float64], %var_2256: Tensor[(2016), float32]) -> (Tensor[(10, 11, 15), float32], Tensor[(96, 20), float64], Tensor[(16, 8, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(2016), float32], Tensor[(36), float64]) {
  %895 = cast(%var_2216, dtype="float64") /* ty=Tensor[(96, 20), float64] */;
  %896 = reshape(%895, newshape=[1920]) /* ty=Tensor[(1920), float64] */;
  %897 = @func_1833(%896) /* ty=(Tensor[(10, 11, 15), float64], Tensor[(16, 8, 15), float64], Tensor[(1920), float64]) */;
  %898 = %897.1;
  %899 = cast(%898, dtype="float32") /* ty=Tensor[(16, 8, 15), float32] */;
  %900 = cast(%var_2256, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %901 = cast(meta[relay.Constant][56] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %902 = reshape(%900, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %903 = reshape(%901, newshape=[36, 1]) /* ty=Tensor[(36, 1), float64] */;
  %904 = @func_1581(%902, %903) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(36, 1), float64], Tensor[(16, 14, 9), bool]) */;
  %905 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
  %906 = sigmoid(%899) /* ty=Tensor[(16, 8, 15), float32] */;
  %907 = %904.0;
  (%905, %var_2216, %906, %907, %var_2256, meta[relay.Constant][56] /* ty=Tensor[(36), float64] */)
}

def @func_7414(%var_7398: Tensor[(2, 13, 8), int64], %var_7399: Tensor[(2, 13, 8), int64]) -> (Tensor[(2, 13, 8), int64], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(2016), float32], Tensor[(36), float64]) {
  %908 = cast(%var_7399, dtype="int64") /* ty=Tensor[(2, 13, 8), int64] */;
  %909 = shape_of(%var_7398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %910 = cast(%var_7398, dtype="int64") /* ty=Tensor[(2, 13, 8), int64] */;
  %911 = dyn.reshape(%908, %909, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %912 = @func_5458() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %913 = %912.0;
  %914 = cast(%913, dtype="float32") /* ty=Tensor[(13, 12, 14), float32] */;
  %915 = cast(meta[relay.Constant][57] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %916 = cast(meta[relay.Constant][58] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %917 = cast(meta[relay.Constant][59] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %918 = cast(meta[relay.Constant][60] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %919 = reshape(%914, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float32] */;
  %920 = reshape(%915, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %921 = reshape(%916, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %922 = reshape(%917, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), float32] */;
  %923 = reshape(%918, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %924 = @func_2674(%919, %920, %921, %922, %923) /* ty=(Tensor[(13, 12, 14), int16], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(2016, 1), float32], Tensor[(36), float64]) */;
  %925 = right_shift(%910, %911) /* ty=Tensor[(2, 13, 8), int64] */;
  %926 = %924.4;
  (%925, %913, %926, meta[relay.Constant][57] /* ty=Tensor[(32), uint8] */, meta[relay.Constant][58] /* ty=Tensor[(160), uint8] */, meta[relay.Constant][59] /* ty=Tensor[(2016), float32] */, meta[relay.Constant][60] /* ty=Tensor[(36), float64] */)
}

def @func_1649() -> (Tensor[(10, 11, 15), float32],) {
  %928 = fn () -> (Tensor[(10, 11, 15), float32],) {
    %927 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
    (%927,)
  };
  %928() /* ty=(Tensor[(10, 11, 15), float32],) */
}

def @func_3300() -> (Tensor[(13, 12, 14), bool],) {
  @func_3298() /* ty=(Tensor[(13, 12, 14), bool],) */
}

def @func_1158() -> (Tensor[(10, 11, 15), float32],) {
  @func_1156() /* ty=(Tensor[(10, 11, 15), float32],) */
}

def @func_4648() -> (Tensor[(13, 12, 14), float32],) {
  @func_4646() /* ty=(Tensor[(13, 12, 14), float32],) */
}

def @func_4611() -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
  %933 = fn () -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) {
    %929 = @func_3006() /* ty=(Tensor[(13, 12, 14), float32],) */;
    %930 = @func_3898() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %931 = %929.0;
    %932 = %930.0;
    (%931, %932)
  };
  %933() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32]) */
}

def @func_3236() -> (Tensor[(13, 12, 14), float32],) {
  @func_3234() /* ty=(Tensor[(13, 12, 14), float32],) */
}

def @func_1994() -> Tensor[(10, 11, 15), float32] {
  %934 = fn () -> Tensor[(10, 11, 15), float32] {
    @func_1762() /* ty=Tensor[(10, 11, 15), float32] */
  };
  %934() /* ty=Tensor[(10, 11, 15), float32] */
}

def @func_3298() -> (Tensor[(13, 12, 14), bool],) {
  %935 = @func_3234() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %936 = %935.0;
  %937 = cast(meta[relay.Constant][61] /* ty=Tensor[(13, 12, 14), float32] */, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %938 = shape_of(%936, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(%936, dtype="bool") /* ty=Tensor[(13, 12, 14), bool] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %941 = logical_or(%939, %940) /* ty=Tensor[(13, 12, 14), bool] */;
  (%941,)
}

def @func_4031() -> (Tensor[(10, 11, 15), float32],) {
  @func_4029() /* ty=(Tensor[(10, 11, 15), float32],) */
}

def @func_4252(%var_4213: Tensor[(3, 9, 3), int64], %var_4214: Tensor[(3, 9, 3), int64]) -> (Tensor[(3, 9, 3), float64],) {
  %942 = cast(%var_4214, dtype="bool") /* ty=Tensor[(3, 9, 3), bool] */;
  %943 = shape_of(%var_4213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %944 = cast(%var_4213, dtype="bool") /* ty=Tensor[(3, 9, 3), bool] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %946 = equal(%944, %945) /* ty=Tensor[(3, 9, 3), bool] */;
  %947 = cast(%946, dtype="float64") /* ty=Tensor[(3, 9, 3), float64] */;
  %948 = shape_of(%var_4213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %949 = cast(%var_4213, dtype="float64") /* ty=Tensor[(3, 9, 3), float64] */;
  %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %951 = power(%949, %950) /* ty=Tensor[(3, 9, 3), float64] */;
  (%951,)
}

def @func_5437() -> (Tensor[(10, 11, 15), float32], Tensor[(7, 12, 6), float32]) {
  %955 = fn () -> (Tensor[(10, 11, 15), float32], Tensor[(7, 12, 6), float32]) {
    %952 = @func_4479() /* ty=(Tensor[(10, 11, 15), float64], Tensor[(7, 12, 6), float32], Tensor[(84), float32]) */;
    %953 = @func_1364() /* ty=Tensor[(10, 11, 15), float32] */;
    %954 = %952.1;
    (%953, %954)
  };
  %955() /* ty=(Tensor[(10, 11, 15), float32], Tensor[(7, 12, 6), float32]) */
}

def @func_3479(%var_3428: Tensor[(160), uint8]) -> (Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float32], Tensor[(32), uint8], Tensor[(32), uint8], Tensor[(160), uint8], Tensor[(10, 11, 15), float32], Tensor[(13, 12, 14), float32], Tensor[(10, 11, 15), float64]) {
  %956 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %957 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %958 = cast(meta[relay.Constant][62] /* ty=Tensor[(32), uint8] */, dtype="uint8") /* ty=Tensor[(32), uint8] */;
  %959 = cast(%var_3428, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %960 = reshape(%958, newshape=[32]) /* ty=Tensor[(32), uint8] */;
  %961 = reshape(%959, newshape=[160]) /* ty=Tensor[(160), uint8] */;
  %962 = @func_1314(%960, %961) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(36), float64], Tensor[(32), uint8], Tensor[(160), uint8]) */;
  %963 = @func_2318() /* ty=(Tensor[(13, 12, 14), float32],) */;
  %964 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
  %965 = %964.0;
  %966 = cast(%965, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
  %967 = %956.0;
  %968 = %957.0;
  %969 = %962.2;
  %970 = @func_1993() /* ty=Tensor[(10, 11, 15), float32] */;
  %971 = %963.0;
  %972 = rsqrt(%966) /* ty=Tensor[(10, 11, 15), float64] */;
  (%967, %968, %969, meta[relay.Constant][62] /* ty=Tensor[(32), uint8] */, %var_3428, %970, %971, %972)
}

def @func_6487() -> (Tensor[(84), float32],) {
  %975 = fn () -> (Tensor[(84), float32],) {
    %973 = @func_4479() /* ty=(Tensor[(10, 11, 15), float64], Tensor[(7, 12, 6), float32], Tensor[(84), float32]) */;
    %974 = %973.2;
    (%974,)
  };
  %975() /* ty=(Tensor[(84), float32],) */
}

def @func_5406() -> (Tensor[(10, 11, 15), float32],) {
  @func_5404() /* ty=(Tensor[(10, 11, 15), float32],) */
}

def @func_3024(%var_3023: Tensor[(1, 10, 13), uint32]) -> Tensor[(?, 10, 13), uint32] {
  %980 = fn (%var_3012: Tensor[(1, 10, 13), uint32]) -> Tensor[(?, 10, 13), uint32] {
    %976 = cast(meta[relay.Constant][63] /* ty=Tensor[(1, 10, 13), uint32] */, dtype="uint32") /* ty=Tensor[(1, 10, 13), uint32] */;
    %977 = shape_of(%var_3012, dtype="int32") /* ty=Tensor[(3), int32] */;
    %978 = cast(%var_3012, dtype="uint32") /* ty=Tensor[(1, 10, 13), uint32] */;
    %979 = dyn.reshape(%976, %977, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    add(%978, %979) /* ty=Tensor[(?, 10, 13), uint32] */
  };
  %980(%var_3023) /* ty=Tensor[(?, 10, 13), uint32] */
}

def @func_5788() -> (Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(16, 8, 15), float64], Tensor[(1650), float32], Tensor[(36), float64]) {
  @func_5786() /* ty=(Tensor[(13, 12, 14), float32], Tensor[(13, 12, 14), float32], Tensor[(16, 8, 15), float64], Tensor[(1650), float32], Tensor[(36), float64]) */
}

def @func_1973(%var_1971: Tensor[(504, 4), float32], %var_1972: Tensor[(2184), float64]) -> (Tensor[(10, 11, 15), float64], Tensor[(16, 14, 9), bool], Tensor[(504, 4), float32], Tensor[(36), float64], Tensor[(10, 11, 15), bool], Tensor[(2184), float64], Tensor[(16, 10), uint8], Tensor[(10, 11, 15), int64], Tensor[(13, 12, 14), float64], Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32]) {
  %1017 = fn (%var_1901: Tensor[(504, 4), float32], %var_1918: Tensor[(2184), float64]) -> (Tensor[(10, 11, 15), float64], Tensor[(16, 14, 9), bool], Tensor[(504, 4), float32], Tensor[(36), float64], Tensor[(10, 11, 15), bool], Tensor[(2184), float64], Tensor[(16, 10), uint8], Tensor[(10, 11, 15), int64], Tensor[(13, 12, 14), float64], Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32]) {
    %981 = @func_1374() /* ty=Tensor[(10, 11, 15), float32] */;
    %982 = cast(%981, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
    %983 = cast(%var_1901, dtype="float32") /* ty=Tensor[(504, 4), float32] */;
    %984 = cast(meta[relay.Constant][64] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
    %985 = reshape(%983, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
    %986 = reshape(%984, newshape=[36, 1]) /* ty=Tensor[(36, 1), float64] */;
    %987 = @func_1581(%985, %986) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32], Tensor[(36, 1), float64], Tensor[(16, 14, 9), bool]) */;
    %988 = cast(%981, dtype="float64") /* ty=Tensor[(10, 11, 15), float64] */;
    %989 = sin(%988) /* ty=Tensor[(10, 11, 15), float64] */;
    %990 = cast(%989, dtype="float32") /* ty=Tensor[(10, 11, 15), float32] */;
    %991 = acos(%990) /* ty=Tensor[(10, 11, 15), float32] */;
    %992 = cast(%981, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
    %993 = shape_of(%991, dtype="int32") /* ty=Tensor[(3), int32] */;
    %994 = cast(%991, dtype="bool") /* ty=Tensor[(10, 11, 15), bool] */;
    %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %996 = cast(meta[relay.Constant][65] /* ty=Tensor[(16, 10), uint8] */, dtype="uint8") /* ty=Tensor[(16, 10), uint8] */;
    %997 = reshape(%996, newshape=[160]) /* ty=Tensor[(160), uint8] */;
    %998 = @func_1752(%997) /* ty=(Tensor[(10, 11, 15), float32], Tensor[(4, 5, 8), float64], Tensor[(4, 8), uint8], Tensor[(160), uint8]) */;
    %999 = %998.0;
    %1000 = cast(%999, dtype="int64") /* ty=Tensor[(10, 11, 15), int64] */;
    %1001 = shape_of(%991, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1002 = cast(%991, dtype="int64") /* ty=Tensor[(10, 11, 15), int64] */;
    %1003 = dyn.reshape(%1000, %1001, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1004 = cast(%var_1918, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %1005 = reshape(%1004, newshape=[13, 12, 14]) /* ty=Tensor[(13, 12, 14), float64] */;
    %1006 = @func_937(%1005) /* ty=(Tensor[(13, 12, 14), float32],) */;
    %1007 = %1006.0;
    %1008 = cast(%1007, dtype="float64") /* ty=Tensor[(13, 12, 14), float64] */;
    %1009 = @func_1648() /* ty=(Tensor[(10, 11, 15), float32],) */;
    %1010 = log2(%982) /* ty=Tensor[(10, 11, 15), float64] */;
    %1011 = %987.3;
    %1012 = less_equal(%994, %995) /* ty=Tensor[(10, 11, 15), bool] */;
    %1013 = bitwise_xor(%1002, %1003) /* ty=Tensor[(10, 11, 15), int64] */;
    %1014 = log10(%1008) /* ty=Tensor[(13, 12, 14), float64] */;
    %1015 = @func_1364() /* ty=Tensor[(10, 11, 15), float32] */;
    %1016 = %1009.0;
    (%1010, %1011, %var_1901, meta[relay.Constant][64] /* ty=Tensor[(36), float64] */, %1012, %var_1918, meta[relay.Constant][65] /* ty=Tensor[(16, 10), uint8] */, %1013, %1014, %1015, %1016)
  };
  %1017(%var_1971, %var_1972) /* ty=(Tensor[(10, 11, 15), float64], Tensor[(16, 14, 9), bool], Tensor[(504, 4), float32], Tensor[(36), float64], Tensor[(10, 11, 15), bool], Tensor[(2184), float64], Tensor[(16, 10), uint8], Tensor[(10, 11, 15), int64], Tensor[(13, 12, 14), float64], Tensor[(10, 11, 15), float32], Tensor[(10, 11, 15), float32]) */
}

def @func_1376() -> Tensor[(10, 11, 15), float32] {
  @func_1374() /* ty=Tensor[(10, 11, 15), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen243/build/output.py:2689: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen243/build/output.py", line 2694, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(512) tvmgen_default_fused_log_kernel0(double* __restrict__ T_log, double* __restrict__ placeholder) {
  T_log[(((int)threadIdx.x))] = log(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

