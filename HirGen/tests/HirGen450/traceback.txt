==========mod==========
#[version = "0.0.5"]
def @func_13740() -> (Tensor[(10, 8, 3), float64],) {
  %0 = @func_13543() /* ty=Tensor[(10, 8, 3), float64] */;
  (%0,)
}

def @func_9866(%var_9863: Tensor[(420), float32]) -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), uint32], Tensor[(1, 11, 5), uint64], Tensor[(198), int64], Tensor[(420), float32]) {
  %1 = @func_9177() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %2 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %3 = %2.0;
  %4 = @func_9757() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %5 = %4.0;
  %6 = cast(%5, dtype="uint32") /* ty=Tensor[(10, 8, 3), uint32] */;
  %7 = shape_of(%3, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%3, dtype="uint32") /* ty=Tensor[(10, 8, 3), uint32] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(198), int64] */, dtype="int64") /* ty=Tensor[(198), int64] */;
  %11 = cast(%var_9863, dtype="float32") /* ty=Tensor[(420), float32] */;
  %12 = reshape(%10, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), int64] */;
  %13 = reshape(%11, newshape=[5, 84]) /* ty=Tensor[(5, 84), float32] */;
  %14 = @func_1697(%12, %13) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(1, 11, 5), uint64], Tensor[(5, 84), float32], uint64, Tensor[(15, 14, 12), int32], Tensor[(1, 2520), int32]) */;
  %15 = %1.0;
  %16 = minimum(%8, %9) /* ty=Tensor[(10, 8, 3), uint32] */;
  %17 = %14.1;
  (%15, %16, %17, meta[relay.Constant][0] /* ty=Tensor[(198), int64] */, %var_9863)
}

def @func_8275(%var_8270: Tensor[(112), float64]) -> (Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(112), float64]) {
  %18 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %19 = cast(%var_8270, dtype="float64") /* ty=Tensor[(112), float64] */;
  %20 = reshape(%19, newshape=[1, 8, 14]) /* ty=Tensor[(1, 8, 14), float64] */;
  %21 = %18.0;
  %22 = @func_6369(%20) /* ty=Tensor[(1, 8, 14), float64] */;
  (%21, %22, %var_8270)
}

def @func_8131(%var_8104: Tensor[(900), uint64], %var_8113: Tensor[(10, 8, 3), float64]) -> (Tensor[(1, 1, 4), uint32], Tensor[(900), uint64], Tensor[(10, 8, 3), float64]) {
  %23 = cast(%var_8104, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %24 = cast(%var_8104, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %25 = reshape(%23, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
  %26 = reshape(%24, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
  %27 = @func_1327(%25, %26) /* ty=(Tensor[(10, 9, 10), bool], Tensor[(1, 1, 4), uint32], Tensor[(2, 2), uint32]) */;
  %28 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %29 = %28.0;
  %30 = cast(%var_8113, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%29, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %34 = %27.1;
  %35 = floor_divide(%32, %33) /* ty=Tensor[(10, 8, 3), float64] */;
  (%34, %var_8104, %35)
}

def @func_8282() -> Tensor[(10, 8, 3), float64] {
  @func_8206() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_10990() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %36 = @func_10532() /* ty=Tensor[(10, 8, 3), float64] */;
  %37 = @func_9648() /* ty=Tensor[(10, 8, 3), float64] */;
  %38 = @func_9648() /* ty=Tensor[(10, 8, 3), float64] */;
  (%36, %37, %38)
}

def @func_8843() -> Tensor[(10, 8, 3), float64] {
  %39 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %39.0
}

def @func_12049() -> (Tensor[(10, 8, 3), float32],) {
  %40 = @func_9785() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %41 = %40.0;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(10, 8, 3), float32] */;
  %43 = cosh(%42) /* ty=Tensor[(10, 8, 3), float32] */;
  (%43,)
}

def @func_8698(%var_8676: Tensor[(8, 5, 8), float32]) -> (Tensor[(8, 5, 8), float32], Tensor[(8, 5, 8), float32]) {
  %44 = cast(%var_8676, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  %45 = cast(%var_8676, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  %46 = erf(%45) /* ty=Tensor[(8, 5, 8), float32] */;
  %47 = cast(%46, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  %48 = cos(%44) /* ty=Tensor[(8, 5, 8), float32] */;
  %49 = cosh(%47) /* ty=Tensor[(8, 5, 8), float32] */;
  (%48, %49)
}

def @func_8595(%var_8573: Tensor[(1, 900), uint64], %var_8592: Tensor[(1200), float64]) -> (Tensor[(10, 8, 3), float64], Tensor[(2, 2), uint32], Tensor[(1, 900), uint64], Tensor[(65), float32], Tensor[(2520), int32], Tensor[(10, 12, 10), uint16], Tensor[(1200), float64]) {
  %50 = cast(%var_8573, dtype="uint64") /* ty=Tensor[(1, 900), uint64] */;
  %51 = cast(%var_8573, dtype="uint64") /* ty=Tensor[(1, 900), uint64] */;
  %52 = reshape(%50, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
  %53 = reshape(%51, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
  %54 = @func_1327(%52, %53) /* ty=(Tensor[(10, 9, 10), bool], Tensor[(1, 1, 4), uint32], Tensor[(2, 2), uint32]) */;
  %55 = cast(meta[relay.Constant][1] /* ty=Tensor[(2520), int32] */, dtype="int32") /* ty=Tensor[(2520), int32] */;
  %56 = reshape(%55, newshape=[2520, 1]) /* ty=Tensor[(2520, 1), int32] */;
  %57 = @func_7206(%56) /* ty=(Tensor[(1, 5, 6), float32], Tensor[(15, 14, 12), int32], Tensor[(2520, 1), int32], Tensor[(1200), float64], Tensor[(65), float32], Tensor[(12, 100), float64]) */;
  %58 = cast(%var_8592, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %59 = cast(%var_8592, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %60 = reshape(%58, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %61 = reshape(%59, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %62 = @func_297(%60, %61) /* ty=(Tensor[(10, 12, 10), uint16],) */;
  %63 = @func_8524() /* ty=Tensor[(10, 8, 3), float64] */;
  %64 = %54.2;
  %65 = %57.4;
  %66 = %62.0;
  (%63, %64, %var_8573, %65, meta[relay.Constant][1] /* ty=Tensor[(2520), int32] */, %66, %var_8592)
}

def @func_12504(%var_12496: Tensor[(14, 10, 13), float32]) -> Tensor[(14, 10, 13), uint32] {
  %67 = cast(-1.97374f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %68 = cast(%var_12496, dtype="float32") /* ty=Tensor[(14, 10, 13), float32] */;
  %69 = power(%67, %68) /* ty=Tensor[(14, 10, 13), float32] */;
  %70 = cast(%var_12496, dtype="uint32") /* ty=Tensor[(14, 10, 13), uint32] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%69, dtype="uint32") /* ty=Tensor[(14, 10, 13), uint32] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%72, %73) /* ty=Tensor[(14, 10, 13), uint32] */
}

def @func_1105(%var_1099: Tensor[(1, 1, 4), uint32]) -> (Tensor[(1, 1, 4), uint32],) {
  %74 = cast(meta[relay.Constant][2] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %75 = cast(%var_1099, dtype="uint32") /* ty=Tensor[(1, 1, 4), uint32] */;
  %76 = maximum(%74, %75) /* ty=Tensor[(1, 1, 4), uint32] */;
  (%76,)
}

def @func_12250(%var_12244: uint64) -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], uint64, uint64) {
  %77 = @func_9785() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %78 = cast(%var_12244, dtype="uint64") /* ty=uint64 */;
  %79 = reshape(%78, newshape=[]) /* ty=uint64 */;
  %80 = @func_10710(%79) /* ty=(Tensor[(10, 8, 3), bool], Tensor[(10, 12, 10), uint16], Tensor[(420), float32], uint64) */;
  %81 = @func_8843() /* ty=Tensor[(10, 8, 3), float64] */;
  %82 = @func_11547() /* ty=Tensor[(10, 8, 3), float64] */;
  %83 = %77.0;
  %84 = %80.3;
  (%81, %82, %83, %84, %var_12244)
}

def @func_11761(%var_11733: Tensor[(65), float32]) -> (Tensor[(10, 8, 3), float64], Tensor[(13, 5), float32], Tensor[(325), float64], Tensor[(65), float32], Tensor[(5, 6, 14), bool], Tensor[(420, 1), float32], uint64, Tensor[(10, 8, 3), float64], Tensor[(112), float64], Tensor[(10, 8, 3), float64]) {
  %85 = @func_9785() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %86 = cast(meta[relay.Constant][3] /* ty=Tensor[(325), float64] */, dtype="float64") /* ty=Tensor[(325), float64] */;
  %87 = cast(%var_11733, dtype="float32") /* ty=Tensor[(65), float32] */;
  %88 = reshape(%86, newshape=[13, 5, 5]) /* ty=Tensor[(13, 5, 5), float64] */;
  %89 = reshape(%87, newshape=[65]) /* ty=Tensor[(65), float32] */;
  %90 = @func_3490(%88, %89) /* ty=(Tensor[(13, 5, 5), float64], Tensor[(13, 5), float32], Tensor[(65), float32], Tensor[(1, 1200), float64]) */;
  %91 = cast(meta[relay.Constant][4] /* ty=Tensor[(420, 1), float32] */, dtype="float32") /* ty=Tensor[(420, 1), float32] */;
  %92 = cast(meta[relay.Constant][4] /* ty=Tensor[(420, 1), float32] */, dtype="float32") /* ty=Tensor[(420, 1), float32] */;
  %93 = cast(meta[relay.Constant][5] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %94 = cast(meta[relay.Constant][4] /* ty=Tensor[(420, 1), float32] */, dtype="float32") /* ty=Tensor[(420, 1), float32] */;
  %95 = reshape(%91, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %96 = reshape(%92, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %97 = reshape(%93, newshape=[]) /* ty=uint64 */;
  %98 = reshape(%94, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %99 = @func_1467(%95, %96, %97, %98) /* ty=(Tensor[(5, 6, 14), bool], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(1, 11, 5), uint64], Tensor[(55), uint64], Tensor[(15, 16, 8), int8], Tensor[(10, 9, 10), bool], Tensor[(900), uint64], Tensor[(5, 6, 14), uint32], Tensor[(1, 11, 5), uint64], Tensor[(5, 6, 14), bool]) */;
  %100 = cast(meta[relay.Constant][6] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %101 = reshape(%100, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %102 = @func_8275(%101) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(112), float64]) */;
  %103 = @func_9358() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %104 = %85.0;
  %105 = %90.1;
  %106 = %99.11;
  %107 = %102.0;
  %108 = %103.0;
  (%104, %105, meta[relay.Constant][3] /* ty=Tensor[(325), float64] */, %var_11733, %106, meta[relay.Constant][4] /* ty=Tensor[(420, 1), float32] */, meta[relay.Constant][5] /* ty=uint64 */, %107, meta[relay.Constant][6] /* ty=Tensor[(112), float64] */, %108)
}

def @func_12989(%var_12978: Tensor[(1, 12, 4), uint64], %var_12979: Tensor[(15, 12, 4), uint64]) -> (Tensor[(15, 12, 4), uint64],) {
  %109 = cast(%var_12978, dtype="uint64") /* ty=Tensor[(1, 12, 4), uint64] */;
  %110 = cast(%var_12979, dtype="uint64") /* ty=Tensor[(15, 12, 4), uint64] */;
  %111 = multiply(%109, %110) /* ty=Tensor[(15, 12, 4), uint64] */;
  (%111,)
}

def @func_10102() -> (Tensor[(10, 8, 3), float64],) {
  %112 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %113 = %112.0;
  (%113,)
}

def @func_2129(%var_2123: Tensor[(1, 1, 16), int32]) -> (Tensor[(9, 16, 16), int32],) {
  %114 = cast(%var_2123, dtype="int32") /* ty=Tensor[(1, 1, 16), int32] */;
  %115 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 16, 16), int32] */, dtype="int32") /* ty=Tensor[(9, 16, 16), int32] */;
  %116 = multiply(%114, %115) /* ty=Tensor[(9, 16, 16), int32] */;
  (%116,)
}

def @func_3391(%var_3380: Tensor[(15, 2, 6), float64]) -> (Tensor[(15, 2, 6), float64], Tensor[(9, 16, 16), int32], Tensor[(16), int32]) {
  %117 = cast(%var_3380, dtype="float64") /* ty=Tensor[(15, 2, 6), float64] */;
  %118 = cast(meta[relay.Constant][8] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
  %119 = reshape(%118, newshape=[1, 1, 16]) /* ty=Tensor[(1, 1, 16), int32] */;
  %120 = @func_2129(%119) /* ty=(Tensor[(9, 16, 16), int32],) */;
  %121 = cosh(%117) /* ty=Tensor[(15, 2, 6), float64] */;
  %122 = %120.0;
  (%121, %122, meta[relay.Constant][8] /* ty=Tensor[(16), int32] */)
}

def @func_11862(%var_11838: Tensor[(90, 10), uint64], %var_11848: Tensor[(65), float32]) -> (Tensor[(10, 8, 3), float64], Tensor[(900), float64], Tensor[(90, 10), uint64], Tensor[(10, 8, 3), float64], Tensor[(65), float32], Tensor[(65), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %123 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %124 = cast(%var_11838, dtype="uint64") /* ty=Tensor[(90, 10), uint64] */;
  %125 = reshape(%124, newshape=[900]) /* ty=Tensor[(900), uint64] */;
  %126 = @func_10036(%125) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(2, 3, 4), bool], Tensor[(10, 8, 3), float64], Tensor[(900), float64]) */;
  %127 = cast(%var_11848, dtype="float32") /* ty=Tensor[(65), float32] */;
  %128 = reshape(%127, newshape=[65]) /* ty=Tensor[(65), float32] */;
  %129 = @func_11761(%128) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(13, 5), float32], Tensor[(325), float64], Tensor[(65), float32], Tensor[(5, 6, 14), bool], Tensor[(420, 1), float32], uint64, Tensor[(10, 8, 3), float64], Tensor[(112), float64], Tensor[(10, 8, 3), float64]) */;
  %130 = @func_10740() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %131 = @func_9177() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %132 = %123.0;
  %133 = %126.3;
  %134 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
  %135 = %129.3;
  %136 = %130.0;
  %137 = %131.0;
  (%132, %133, %var_11838, %134, %135, %var_11848, %136, %137)
}

def @func_8365(%var_8305: Tensor[(3, 11, 5), float32]) -> (Tensor[(3, 11, 5), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %138 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 1), float32] */;
  %139 = cast(%var_8305, dtype="float32") /* ty=Tensor[(3, 11, 5), float32] */;
  %140 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %141 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %142 = %141.0;
  %143 = cast(%142, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %144 = erf(%143) /* ty=Tensor[(10, 8, 3), float64] */;
  %145 = cast(%144, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %146 = divide(%138, %139) /* ty=Tensor[(3, 11, 5), float32] */;
  %147 = %140.0;
  %148 = sqrt(%145) /* ty=Tensor[(10, 8, 3), float64] */;
  (%146, %147, %148)
}

def @func_4690(%var_4612: Tensor[(8, 4, 6), uint16], %var_4613: Tensor[(8, 4, 6), uint16], %var_4641: Tensor[(900), uint64]) -> (Tensor[(8, 4, 6), uint16], Tensor[(2, 2), uint32], Tensor[(900), uint64], Tensor[(10, 12, 10), uint16], Tensor[(1200), float64], Tensor[(9, 16, 16), int32], Tensor[(2, 8), int32], Tensor[(16), int32], Tensor[(180), float64]) {
  %149 = cast(%var_4613, dtype="uint16") /* ty=Tensor[(8, 4, 6), uint16] */;
  %150 = shape_of(%var_4612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%var_4612, dtype="uint16") /* ty=Tensor[(8, 4, 6), uint16] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %153 = cast(%var_4641, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %154 = cast(%var_4641, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %155 = reshape(%153, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
  %156 = reshape(%154, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
  %157 = @func_1327(%155, %156) /* ty=(Tensor[(10, 9, 10), bool], Tensor[(1, 1, 4), uint32], Tensor[(2, 2), uint32]) */;
  %158 = cast(meta[relay.Constant][10] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %159 = cast(meta[relay.Constant][10] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %160 = reshape(%158, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %161 = reshape(%159, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %162 = @func_297(%160, %161) /* ty=(Tensor[(10, 12, 10), uint16],) */;
  %163 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 8), int32] */, dtype="int32") /* ty=Tensor[(2, 8), int32] */;
  %164 = reshape(%163, newshape=[1, 1, 16]) /* ty=Tensor[(1, 1, 16), int32] */;
  %165 = @func_2129(%164) /* ty=(Tensor[(9, 16, 16), int32],) */;
  %166 = cast(meta[relay.Constant][12] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %167 = reshape(%166, newshape=[15, 2, 6]) /* ty=Tensor[(15, 2, 6), float64] */;
  %168 = @func_3391(%167) /* ty=(Tensor[(15, 2, 6), float64], Tensor[(9, 16, 16), int32], Tensor[(16), int32]) */;
  %169 = bitwise_xor(%151, %152) /* ty=Tensor[(8, 4, 6), uint16] */;
  %170 = %157.2;
  %171 = %162.0;
  %172 = %165.0;
  %173 = %168.2;
  (%169, %170, %var_4641, %171, meta[relay.Constant][10] /* ty=Tensor[(1200), float64] */, %172, meta[relay.Constant][11] /* ty=Tensor[(2, 8), int32] */, %173, meta[relay.Constant][12] /* ty=Tensor[(180), float64] */)
}

def @func_10710(%var_10677: uint64) -> (Tensor[(10, 8, 3), bool], Tensor[(10, 12, 10), uint16], Tensor[(420), float32], uint64) {
  %174 = @func_10494() /* ty=(Tensor[(10, 8, 3), bool], Tensor[(10, 8, 3), bool]) */;
  %175 = %174.1;
  %176 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
  %177 = cast(%176, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
  %178 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%175, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %181 = cast(meta[relay.Constant][13] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %182 = cast(meta[relay.Constant][13] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %183 = cast(%var_10677, dtype="uint64") /* ty=uint64 */;
  %184 = cast(meta[relay.Constant][13] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %185 = reshape(%181, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %186 = reshape(%182, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %187 = reshape(%183, newshape=[]) /* ty=uint64 */;
  %188 = reshape(%184, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %189 = @func_1467(%185, %186, %187, %188) /* ty=(Tensor[(5, 6, 14), bool], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(1, 11, 5), uint64], Tensor[(55), uint64], Tensor[(15, 16, 8), int8], Tensor[(10, 9, 10), bool], Tensor[(900), uint64], Tensor[(5, 6, 14), uint32], Tensor[(1, 11, 5), uint64], Tensor[(5, 6, 14), bool]) */;
  %190 = less(%179, %180) /* ty=Tensor[(10, 8, 3), bool] */;
  %191 = %189.3;
  (%190, %191, meta[relay.Constant][13] /* ty=Tensor[(420), float32] */, %var_10677)
}

def @func_12586(%var_12542: Tensor[(48, 64), uint16], %var_12549: Tensor[(65), float32], %var_12550: Tensor[(1200, 1), float64]) -> (Tensor[(10, 8, 3), bool], Tensor[(12, 16, 16), bool], Tensor[(1200), float64], Tensor[(65), float32], Tensor[(48, 64), float64], Tensor[(1200, 1), float64]) {
  %192 = @func_10494() /* ty=(Tensor[(10, 8, 3), bool], Tensor[(10, 8, 3), bool]) */;
  %193 = cast(%var_12542, dtype="uint16") /* ty=Tensor[(48, 64), uint16] */;
  %194 = cast(%var_12542, dtype="uint16") /* ty=Tensor[(48, 64), uint16] */;
  %195 = reshape(%193, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), uint16] */;
  %196 = reshape(%194, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), uint16] */;
  %197 = @func_3372(%195, %196) /* ty=(Tensor[(12, 16, 16), bool],) */;
  %198 = cast(%var_12549, dtype="float32") /* ty=Tensor[(65), float32] */;
  %199 = cast(%var_12550, dtype="float64") /* ty=Tensor[(1200, 1), float64] */;
  %200 = reshape(%198, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
  %201 = reshape(%199, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
  %202 = @func_780(%200, %201) /* ty=(Tensor[(15, 16, 8), float64], Tensor[(1200), float64], Tensor[(13, 5), float32], Tensor[(1200), float64]) */;
  %203 = cast(%var_12542, dtype="float64") /* ty=Tensor[(48, 64), float64] */;
  %204 = cast(%var_12550, dtype="float64") /* ty=Tensor[(1200, 1), float64] */;
  %205 = %192.0;
  %206 = %197.0;
  %207 = %202.1;
  %208 = asin(%203) /* ty=Tensor[(48, 64), float64] */;
  %209 = tan(%204) /* ty=Tensor[(1200, 1), float64] */;
  (%205, %206, %207, %var_12549, %208, %209)
}

def @func_477(%var_461: uint64, %var_462: Tensor[(1, 11, 5), uint64]) -> (Tensor[(1, 11, 5), uint64],) {
  %210 = cast(%var_461, dtype="uint64") /* ty=uint64 */;
  %211 = cast(%var_462, dtype="uint64") /* ty=Tensor[(1, 11, 5), uint64] */;
  %212 = logical_xor(%210, %211) /* ty=Tensor[(1, 11, 5), uint64] */;
  (%212,)
}

def @func_11016() -> (Tensor[(10, 8, 3), float64],) {
  %213 = @func_8843() /* ty=Tensor[(10, 8, 3), float64] */;
  (%213,)
}

def @func_8730() -> Tensor[(10, 8, 3), float64] {
  %214 = @func_8206() /* ty=Tensor[(10, 8, 3), float64] */;
  %215 = cast(%214, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  rsqrt(%215) /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_6274(%var_6238: Tensor[(14, 3, 3), uint64], %var_6260: Tensor[(900), uint64]) -> (Tensor[(14, 3, 3), bool], Tensor[(90, 10), uint64], Tensor[(2400), float32], float32, Tensor[(900), uint64]) {
  %216 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 1, 3), uint64] */, dtype="bool") /* ty=Tensor[(14, 1, 3), bool] */;
  %217 = cast(%var_6238, dtype="bool") /* ty=Tensor[(14, 3, 3), bool] */;
  %218 = greater_equal(%216, %217) /* ty=Tensor[(14, 3, 3), bool] */;
  %219 = cast(%var_6238, dtype="bool") /* ty=Tensor[(14, 3, 3), bool] */;
  %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%218, dtype="bool") /* ty=Tensor[(14, 3, 3), bool] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %223 = cast(meta[relay.Constant][15] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %224 = cast(-7.69351f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %225 = cast(%var_6260, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %226 = reshape(%223, newshape=[15, 16, 10]) /* ty=Tensor[(15, 16, 10), float32] */;
  %227 = reshape(%224, newshape=[]) /* ty=float32 */;
  %228 = reshape(%225, newshape=[90, 10]) /* ty=Tensor[(90, 10), uint64] */;
  %229 = @func_5410(%226, %227, %228) /* ty=(Tensor[(16, 15, 3), float32], Tensor[(720), float32], Tensor[(15, 16, 10), float64], Tensor[(15, 16, 10), float32], Tensor[(1, 1, 4), uint32], float32, Tensor[(6, 2), float32], Tensor[(90, 10), uint64]) */;
  %230 = greater(%221, %222) /* ty=Tensor[(14, 3, 3), bool] */;
  %231 = %229.7;
  (%230, %231, meta[relay.Constant][15] /* ty=Tensor[(2400), float32] */, -7.69351f /* ty=float32 */, %var_6260)
}

def @func_11705() -> (Tensor[(10, 8, 3), float64],) {
  %232 = @func_8982() /* ty=Tensor[(10, 8, 3), float64] */;
  (%232,)
}

def @func_13851(%var_13839: Tensor[(12, 15, 9), float32], %var_13840: Tensor[(12, 15, 9), float32]) -> (Tensor[(12, 15, 9), float32], Tensor[(10, 8, 3), float64]) {
  %233 = cast(%var_13840, dtype="float32") /* ty=Tensor[(12, 15, 9), float32] */;
  %234 = shape_of(%var_13839, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%var_13839, dtype="float32") /* ty=Tensor[(12, 15, 9), float32] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %237 = @func_9008() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %238 = divide(%235, %236) /* ty=Tensor[(12, 15, 9), float32] */;
  %239 = %237.0;
  (%238, %239)
}

def @func_13870(%var_13863: Tensor[(13, 15, 8), float64]) -> (Tensor[(13, 15, 8), float64],) {
  %240 = cast(%var_13863, dtype="float64") /* ty=Tensor[(13, 15, 8), float64] */;
  %241 = asinh(%240) /* ty=Tensor[(13, 15, 8), float64] */;
  (%241,)
}

def @func_12328() -> Tensor[(10, 8, 3), float64] {
  %242 = @func_9358() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %242.0
}

def @func_344(%var_307: Tensor[(5, 1, 13), float32], %var_313: Tensor[(1200), float64]) -> (Tensor[(10, 12, 10), uint16], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(5, 1, 13), float32]) {
  %243 = cast(%var_313, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %244 = cast(%var_313, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %245 = reshape(%243, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %246 = reshape(%244, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %247 = @func_297(%245, %246) /* ty=(Tensor[(10, 12, 10), uint16],) */;
  %248 = cast(%var_313, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %249 = %247.0;
  %250 = cast(%249, dtype="float64") /* ty=Tensor[(10, 12, 10), float64] */;
  %251 = reshape(%248, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %252 = reshape(%250, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %253 = @func_297(%251, %252) /* ty=(Tensor[(10, 12, 10), uint16],) */;
  %254 = cast(%var_307, dtype="float32") /* ty=Tensor[(5, 1, 13), float32] */;
  %255 = tan(%254) /* ty=Tensor[(5, 1, 13), float32] */;
  %256 = cast(%255, dtype="float32") /* ty=Tensor[(5, 1, 13), float32] */;
  %257 = acosh(%256) /* ty=Tensor[(5, 1, 13), float32] */;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(5, 1, 13), float32] */;
  %259 = %253.0;
  %260 = sinh(%258) /* ty=Tensor[(5, 1, 13), float32] */;
  (%249, %var_313, %259, %260)
}

def @func_13120() -> (Tensor[(10, 8, 3), int32],) {
  %261 = @func_13103() /* ty=Tensor[(10, 8, 3), int32] */;
  (%261,)
}

def @func_13169(%var_13155: Tensor[(198), int64], %var_13156: Tensor[(420), float32]) -> (Tensor[(10, 8, 3), float64], Tensor[(1, 11, 5), uint64], Tensor[(420), float32], Tensor[(198), float64]) {
  %262 = cast(%var_13155, dtype="int64") /* ty=Tensor[(198), int64] */;
  %263 = cast(%var_13156, dtype="float32") /* ty=Tensor[(420), float32] */;
  %264 = reshape(%262, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), int64] */;
  %265 = reshape(%263, newshape=[5, 84]) /* ty=Tensor[(5, 84), float32] */;
  %266 = @func_1697(%264, %265) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(1, 11, 5), uint64], Tensor[(5, 84), float32], uint64, Tensor[(15, 14, 12), int32], Tensor[(1, 2520), int32]) */;
  %267 = cast(%var_13155, dtype="float64") /* ty=Tensor[(198), float64] */;
  %268 = @func_8982() /* ty=Tensor[(10, 8, 3), float64] */;
  %269 = %266.1;
  %270 = acosh(%267) /* ty=Tensor[(198), float64] */;
  (%268, %269, %var_13156, %270)
}

def @func_12691(%var_12684: Tensor[(112), float64]) -> (Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(112), float64]) {
  %271 = @func_10843() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %272 = cast(%var_12684, dtype="float64") /* ty=Tensor[(112), float64] */;
  %273 = reshape(%272, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %274 = @func_8275(%273) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(112), float64]) */;
  %275 = %271.0;
  %276 = %274.1;
  (%275, %276, %var_12684)
}

def @func_12953() -> (Tensor[(10, 8, 3), uint64], Tensor[(10, 8, 3), float64]) {
  %277 = @func_11321() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %278 = %277.0;
  %279 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 8, 3), float64] */, dtype="uint64") /* ty=Tensor[(10, 8, 3), uint64] */;
  %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%278, dtype="uint64") /* ty=Tensor[(10, 8, 3), uint64] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %283 = @func_11016() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %284 = add(%281, %282) /* ty=Tensor[(10, 8, 3), uint64] */;
  %285 = %283.0;
  (%284, %285)
}

def @func_11407(%var_11395: Tensor[(2520), int32]) -> (Tensor[(10, 8, 3), float64], Tensor[(15, 14, 12), int32], Tensor[(2520), int32]) {
  %286 = cast(%var_11395, dtype="int32") /* ty=Tensor[(2520), int32] */;
  %287 = cast(%var_11395, dtype="int32") /* ty=Tensor[(2520), int32] */;
  %288 = reshape(%286, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
  %289 = reshape(%287, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
  %290 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
  %291 = @func_1569(%288, %289) /* ty=Tensor[(15, 14, 12), int32] */;
  (%290, %291, %var_11395)
}

def @func_1467(%var_1340: Tensor[(5, 6, 14), float32], %var_1345: Tensor[(5, 6, 14), float32], %var_1400: uint64, %var_1460: Tensor[(5, 6, 14), float32]) -> (Tensor[(5, 6, 14), bool], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(1, 11, 5), uint64], Tensor[(55), uint64], Tensor[(15, 16, 8), int8], Tensor[(10, 9, 10), bool], Tensor[(900), uint64], Tensor[(5, 6, 14), uint32], Tensor[(1, 11, 5), uint64], Tensor[(5, 6, 14), bool]) {
  %292 = cast(%var_1340, dtype="float32") /* ty=Tensor[(5, 6, 14), float32] */;
  %293 = acos(%292) /* ty=Tensor[(5, 6, 14), float32] */;
  %294 = cast(%var_1345, dtype="bool") /* ty=Tensor[(5, 6, 14), bool] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="bool") /* ty=Tensor[(5, 6, 14), bool] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %298 = cast(meta[relay.Constant][18] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %299 = cast(meta[relay.Constant][18] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %300 = reshape(%298, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %301 = reshape(%299, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %302 = @func_297(%300, %301) /* ty=(Tensor[(10, 12, 10), uint16],) */;
  %303 = cast(%var_1400, dtype="uint64") /* ty=uint64 */;
  %304 = cast(meta[relay.Constant][19] /* ty=Tensor[(55), uint64] */, dtype="uint64") /* ty=Tensor[(55), uint64] */;
  %305 = reshape(%303, newshape=[]) /* ty=uint64 */;
  %306 = reshape(%304, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), uint64] */;
  %307 = @func_477(%305, %306) /* ty=(Tensor[(1, 11, 5), uint64],) */;
  %308 = cast(meta[relay.Constant][17] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %309 = cast(meta[relay.Constant][18] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %310 = reshape(%308, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
  %311 = reshape(%309, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
  %312 = @func_780(%310, %311) /* ty=(Tensor[(15, 16, 8), float64], Tensor[(1200), float64], Tensor[(13, 5), float32], Tensor[(1200), float64]) */;
  %313 = %312.0;
  %314 = cast(%313, dtype="int8") /* ty=Tensor[(15, 16, 8), int8] */;
  %315 = cast(%var_1400, dtype="int8") /* ty=int8 */;
  %316 = cast(meta[relay.Constant][20] /* ty=Tensor[(900), uint64] */, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %317 = cast(meta[relay.Constant][20] /* ty=Tensor[(900), uint64] */, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %318 = reshape(%316, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
  %319 = reshape(%317, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
  %320 = @func_1327(%318, %319) /* ty=(Tensor[(10, 9, 10), bool], Tensor[(1, 1, 4), uint32], Tensor[(2, 2), uint32]) */;
  %321 = cast(%var_1345, dtype="float32") /* ty=Tensor[(5, 6, 14), float32] */;
  %322 = log(%321) /* ty=Tensor[(5, 6, 14), float32] */;
  %323 = cast(%322, dtype="uint32") /* ty=Tensor[(5, 6, 14), uint32] */;
  %324 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%293, dtype="uint32") /* ty=Tensor[(5, 6, 14), uint32] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %327 = cast(%var_1400, dtype="uint64") /* ty=uint64 */;
  %328 = cast(meta[relay.Constant][19] /* ty=Tensor[(55), uint64] */, dtype="uint64") /* ty=Tensor[(55), uint64] */;
  %329 = reshape(%327, newshape=[]) /* ty=uint64 */;
  %330 = reshape(%328, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), uint64] */;
  %331 = @func_477(%329, %330) /* ty=(Tensor[(1, 11, 5), uint64],) */;
  %332 = cast(%var_1460, dtype="bool") /* ty=Tensor[(5, 6, 14), bool] */;
  %333 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%322, dtype="bool") /* ty=Tensor[(5, 6, 14), bool] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %336 = greater(%296, %297) /* ty=Tensor[(5, 6, 14), bool] */;
  %337 = %302.0;
  %338 = %307.0;
  %339 = bitwise_xor(%314, %315) /* ty=Tensor[(15, 16, 8), int8] */;
  %340 = %320.0;
  %341 = right_shift(%325, %326) /* ty=Tensor[(5, 6, 14), uint32] */;
  %342 = %331.0;
  %343 = less(%334, %335) /* ty=Tensor[(5, 6, 14), bool] */;
  (%336, meta[relay.Constant][17] /* ty=Tensor[(65), float32] */, meta[relay.Constant][18] /* ty=Tensor[(1200), float64] */, %337, %338, meta[relay.Constant][19] /* ty=Tensor[(55), uint64] */, %339, %340, meta[relay.Constant][20] /* ty=Tensor[(900), uint64] */, %341, %342, %343)
}

def @func_4307(%var_4252: float32, %var_4253: Tensor[(1, 12), float32], %var_4284: Tensor[(900, 1), uint64]) -> (Tensor[(1, 12), float32], Tensor[(1, 1, 4), uint32], Tensor[(900, 1), uint64]) {
  %344 = cast(%var_4252, dtype="float32") /* ty=float32 */;
  %345 = cast(%var_4253, dtype="float32") /* ty=Tensor[(1, 12), float32] */;
  %346 = cast(%var_4284, dtype="uint64") /* ty=Tensor[(900, 1), uint64] */;
  %347 = cast(%var_4284, dtype="uint64") /* ty=Tensor[(900, 1), uint64] */;
  %348 = reshape(%346, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
  %349 = reshape(%347, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
  %350 = @func_1327(%348, %349) /* ty=(Tensor[(10, 9, 10), bool], Tensor[(1, 1, 4), uint32], Tensor[(2, 2), uint32]) */;
  %351 = floor_mod(%344, %345) /* ty=Tensor[(1, 12), float32] */;
  %352 = %350.1;
  (%351, %352, %var_4284)
}

def @func_9616() -> Tensor[(10, 8, 3), float64] {
  @func_8524() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_10400() -> Tensor[(10, 8, 3), float64] {
  %353 = @func_9785() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %353.0
}

def @func_10494() -> (Tensor[(10, 8, 3), bool], Tensor[(10, 8, 3), bool]) {
  %354 = @func_9757() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %355 = %354.1;
  %356 = @func_10385() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %357 = %356.0;
  %358 = cast(%357, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
  %359 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%355, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %362 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 8, 3), float64] */, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
  %363 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%357, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %366 = logical_and(%360, %361) /* ty=Tensor[(10, 8, 3), bool] */;
  %367 = not_equal(%364, %365) /* ty=Tensor[(10, 8, 3), bool] */;
  (%366, %367)
}

def @func_11987(%var_11982: Tensor[(2520), float64]) -> (Tensor[(10, 8, 3), float64], Tensor[(12, 100), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(504), float32], Tensor[(15, 14, 12), float32], Tensor[(2520), float32]) {
  %368 = cast(meta[relay.Constant][22] /* ty=Tensor[(2520), int32] */, dtype="int32") /* ty=Tensor[(2520), int32] */;
  %369 = reshape(%368, newshape=[2520, 1]) /* ty=Tensor[(2520, 1), int32] */;
  %370 = @func_7206(%369) /* ty=(Tensor[(1, 5, 6), float32], Tensor[(15, 14, 12), int32], Tensor[(2520, 1), int32], Tensor[(1200), float64], Tensor[(65), float32], Tensor[(12, 100), float64]) */;
  %371 = @func_8717() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %372 = cast(meta[relay.Constant][23] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %373 = reshape(%372, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), float32] */;
  %374 = @func_9556(%373) /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %375 = cast(meta[relay.Constant][22] /* ty=Tensor[(2520), int32] */, dtype="int32") /* ty=Tensor[(2520), int32] */;
  %376 = cast(meta[relay.Constant][22] /* ty=Tensor[(2520), int32] */, dtype="int32") /* ty=Tensor[(2520), int32] */;
  %377 = reshape(%375, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
  %378 = reshape(%376, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
  %379 = @func_1569(%377, %378) /* ty=Tensor[(15, 14, 12), int32] */;
  %380 = cast(meta[relay.Constant][22] /* ty=Tensor[(2520), int32] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %381 = exp(%380) /* ty=Tensor[(2520), float64] */;
  %382 = cast(%381, dtype="bool") /* ty=Tensor[(2520), bool] */;
  %383 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%379, dtype="bool") /* ty=Tensor[(15, 14, 12), bool] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %386 = not_equal(%384, %385) /* ty=Tensor[(15, 14, 12), bool] */;
  %387 = cast(%386, dtype="float32") /* ty=Tensor[(15, 14, 12), float32] */;
  %388 = cast(%var_11982, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %389 = shape_of(%381, dtype="int32") /* ty=Tensor[(1), int32] */;
  %390 = cast(%381, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?), float32] */;
  %392 = @func_8524() /* ty=Tensor[(10, 8, 3), float64] */;
  %393 = %370.5;
  %394 = %371.0;
  %395 = %374.2;
  %396 = acos(%387) /* ty=Tensor[(15, 14, 12), float32] */;
  %397 = multiply(%390, %391) /* ty=Tensor[(2520), float32] */;
  (%392, %393, %394, %395, meta[relay.Constant][23] /* ty=Tensor[(504), float32] */, %396, %397)
}

def @func_8446(%var_8394: Tensor[(10, 12, 6), float64]) -> (Tensor[(10, 12, 6), float64], Tensor[(10, 12, 10), uint16], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(112), float64], Tensor[(112), float64], Tensor[(4, 8, 13), int16], Tensor[(1, 416), int16], Tensor[(15, 14, 12), int32], Tensor[(2520), int32]) {
  %398 = cast(%var_8394, dtype="float64") /* ty=Tensor[(10, 12, 6), float64] */;
  %399 = cast(meta[relay.Constant][24] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %400 = cast(meta[relay.Constant][25] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %401 = reshape(%399, newshape=[5, 1, 13]) /* ty=Tensor[(5, 1, 13), float32] */;
  %402 = reshape(%400, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
  %403 = @func_344(%401, %402) /* ty=(Tensor[(10, 12, 10), uint16], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(5, 1, 13), float32]) */;
  %404 = cast(meta[relay.Constant][26] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %405 = reshape(%404, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %406 = @func_8275(%405) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(112), float64]) */;
  %407 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 416), int16] */, dtype="int16") /* ty=Tensor[(1, 416), int16] */;
  %408 = reshape(%407, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), int16] */;
  %409 = @func_1677(%408) /* ty=(Tensor[(4, 8, 13), int16],) */;
  %410 = cast(meta[relay.Constant][28] /* ty=Tensor[(2520), int32] */, dtype="int32") /* ty=Tensor[(2520), int32] */;
  %411 = cast(meta[relay.Constant][28] /* ty=Tensor[(2520), int32] */, dtype="int32") /* ty=Tensor[(2520), int32] */;
  %412 = reshape(%410, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
  %413 = reshape(%411, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
  %414 = atan(%398) /* ty=Tensor[(10, 12, 6), float64] */;
  %415 = %403.2;
  %416 = %406.2;
  %417 = %409.0;
  %418 = @func_1569(%412, %413) /* ty=Tensor[(15, 14, 12), int32] */;
  (%414, %415, meta[relay.Constant][24] /* ty=Tensor[(65), float32] */, meta[relay.Constant][25] /* ty=Tensor[(1200), float64] */, %416, meta[relay.Constant][26] /* ty=Tensor[(112), float64] */, %417, meta[relay.Constant][27] /* ty=Tensor[(1, 416), int16] */, %418, meta[relay.Constant][28] /* ty=Tensor[(2520), int32] */)
}

def @func_13417(%var_13395: Tensor[(12, 14, 5), float32]) -> Tensor[(12, 14, 5), bool] {
  %419 = cast(%var_13395, dtype="float32") /* ty=Tensor[(12, 14, 5), float32] */;
  %420 = asin(%419) /* ty=Tensor[(12, 14, 5), float32] */;
  %421 = cast(%420, dtype="bool") /* ty=Tensor[(12, 14, 5), bool] */;
  %422 = shape_of(%var_13395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%var_13395, dtype="bool") /* ty=Tensor[(12, 14, 5), bool] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%423, %424) /* ty=Tensor[(12, 14, 5), bool] */
}

def @func_8982() -> Tensor[(10, 8, 3), float64] {
  @func_8730() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_12207() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %425 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %426 = @func_11705() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %427 = @func_9785() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %428 = %425.0;
  %429 = %426.0;
  %430 = %427.0;
  (%428, %429, %430)
}

def @func_13103() -> Tensor[(10, 8, 3), int32] {
  %431 = @func_11918() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(12, 16, 16), bool], Tensor[(3072), uint16], uint64, uint64) */;
  %432 = %431.0;
  %433 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %434 = %433.0;
  %435 = cast(%434, dtype="int32") /* ty=Tensor[(10, 8, 3), int32] */;
  %436 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%432, dtype="int32") /* ty=Tensor[(10, 8, 3), int32] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%437, %438) /* ty=Tensor[(10, 8, 3), int32] */
}

def @func_12828(%var_12780: Tensor[(900), uint64]) -> (Tensor[(10, 8, 3), float32], Tensor[(900), int64]) {
  %439 = @func_10740() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %440 = %439.0;
  %441 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 8, 3), float64] */, dtype="float32") /* ty=Tensor[(10, 8, 3), float32] */;
  %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%440, dtype="float32") /* ty=Tensor[(10, 8, 3), float32] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %445 = cast(%var_12780, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %446 = reshape(%445, newshape=[900]) /* ty=Tensor[(900), uint64] */;
  %447 = @func_10036(%446) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(2, 3, 4), bool], Tensor[(10, 8, 3), float64], Tensor[(900), float64]) */;
  %448 = %447.3;
  %449 = cast(%448, dtype="int64") /* ty=Tensor[(900), int64] */;
  %450 = shape_of(%var_12780, dtype="int32") /* ty=Tensor[(1), int32] */;
  %451 = cast(%var_12780, dtype="int64") /* ty=Tensor[(900), int64] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?), int64] */;
  %453 = divide(%443, %444) /* ty=Tensor[(10, 8, 3), float32] */;
  %454 = bitwise_and(%451, %452) /* ty=Tensor[(900), int64] */;
  (%453, %454)
}

def @func_13543() -> Tensor[(10, 8, 3), float64] {
  %455 = @func_12953() /* ty=(Tensor[(10, 8, 3), uint64], Tensor[(10, 8, 3), float64]) */;
  %455.1
}

def @func_9358() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %456 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %457 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %458 = @func_9008() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %459 = %458.0;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(10, 8, 3), float32] */;
  %461 = acos(%460) /* ty=Tensor[(10, 8, 3), float32] */;
  %462 = cast(%461, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %463 = %456.0;
  %464 = %457.0;
  %465 = sin(%462) /* ty=Tensor[(10, 8, 3), float64] */;
  (%463, %464, %465)
}

def @func_8773() -> (Tensor[(10, 8, 3), float64],) {
  %466 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
  (%466,)
}

def @func_780(%var_775: Tensor[(13, 5), float32], %var_776: Tensor[(1200), float64]) -> (Tensor[(15, 16, 8), float64], Tensor[(1200), float64], Tensor[(13, 5), float32], Tensor[(1200), float64]) {
  %467 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 8), float64] */;
  %468 = cast(%var_775, dtype="float32") /* ty=Tensor[(13, 5), float32] */;
  %469 = cast(%var_776, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %470 = reshape(%468, newshape=[5, 1, 13]) /* ty=Tensor[(5, 1, 13), float32] */;
  %471 = reshape(%469, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
  %472 = @func_344(%470, %471) /* ty=(Tensor[(10, 12, 10), uint16], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(5, 1, 13), float32]) */;
  %473 = log(%467) /* ty=Tensor[(15, 16, 8), float64] */;
  %474 = %472.1;
  (%473, %474, %var_775, %var_776)
}

def @func_9757() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %475 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %476 = %475.0;
  %477 = @func_8730() /* ty=Tensor[(10, 8, 3), float64] */;
  (%476, %477)
}

def @func_9461(%var_9450: Tensor[(10, 8, 3), float64]) -> Tensor[(10, 8, 3), float64] {
  %478 = @func_8843() /* ty=Tensor[(10, 8, 3), float64] */;
  %479 = cast(%var_9450, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%478, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%481, %482) /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_9785() -> (Tensor[(10, 8, 3), float64],) {
  %483 = @func_9757() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %484 = %483.1;
  (%484,)
}

def @func_10385() -> (Tensor[(10, 8, 3), float64],) {
  %485 = @func_8843() /* ty=Tensor[(10, 8, 3), float64] */;
  %486 = cast(%485, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %487 = log(%486) /* ty=Tensor[(10, 8, 3), float64] */;
  (%487,)
}

def @func_8224() -> (Tensor[(10, 8, 3), float64],) {
  %488 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %489 = %488.0;
  (%489,)
}

def @func_1569(%var_1560: Tensor[(15, 14, 12), int32], %var_1561: Tensor[(15, 14, 12), int32]) -> Tensor[(15, 14, 12), int32] {
  %490 = cast(%var_1561, dtype="int32") /* ty=Tensor[(15, 14, 12), int32] */;
  %491 = shape_of(%var_1560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%var_1560, dtype="int32") /* ty=Tensor[(15, 14, 12), int32] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  maximum(%492, %493) /* ty=Tensor[(15, 14, 12), int32] */
}

def @func_6484(%var_6480: Tensor[(4, 16, 7), uint64]) -> Tensor[(4, 16, 7), bool] {
  %494 = cast(%var_6480, dtype="bool") /* ty=Tensor[(4, 16, 7), bool] */;
  %495 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(4, 16, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 16, 7), uint64] */, dtype="bool") /* ty=Tensor[(4, 16, 7), bool] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%496, %497) /* ty=Tensor[(4, 16, 7), bool] */
}

def @func_10642(%var_10627: Tensor[(5, 13, 5), float32]) -> (Tensor[(5, 13, 5), float32],) {
  %498 = cast(%var_10627, dtype="float32") /* ty=Tensor[(5, 13, 5), float32] */;
  %499 = exp(%498) /* ty=Tensor[(5, 13, 5), float32] */;
  (%499,)
}

def @func_13892(%var_13876: Tensor[(4, 2, 8), int8], %var_13877: Tensor[(4, 2, 8), int8]) -> (Tensor[(4, 2, 8), bool], Tensor[(10, 8, 3), float64]) {
  %500 = cast(%var_13877, dtype="bool") /* ty=Tensor[(4, 2, 8), bool] */;
  %501 = shape_of(%var_13876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%var_13876, dtype="bool") /* ty=Tensor[(4, 2, 8), bool] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %504 = @func_10740() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %505 = greater(%502, %503) /* ty=Tensor[(4, 2, 8), bool] */;
  %506 = %504.0;
  (%505, %506)
}

def @func_5050(%var_5042: Tensor[(12, 100), float64]) -> (Tensor[(4, 14, 9), float32], Tensor[(10, 12, 10), uint16], Tensor[(12, 100), float64]) {
  %507 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 14, 9), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 9), float64] */;
  %508 = sqrt(%507) /* ty=Tensor[(4, 14, 9), float64] */;
  %509 = cast(%508, dtype="float32") /* ty=Tensor[(4, 14, 9), float32] */;
  %510 = cast(%var_5042, dtype="float64") /* ty=Tensor[(12, 100), float64] */;
  %511 = cast(%var_5042, dtype="float64") /* ty=Tensor[(12, 100), float64] */;
  %512 = reshape(%510, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %513 = reshape(%511, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %514 = @func_297(%512, %513) /* ty=(Tensor[(10, 12, 10), uint16],) */;
  %515 = sinh(%509) /* ty=Tensor[(4, 14, 9), float32] */;
  %516 = %514.0;
  (%515, %516, %var_5042)
}

def @func_10532() -> Tensor[(10, 8, 3), float64] {
  %517 = @func_10102() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %517.0
}

def @func_6369(%var_6348: Tensor[(1, 8, 14), float64]) -> Tensor[(1, 8, 14), float64] {
  %518 = cast(%var_6348, dtype="float64") /* ty=Tensor[(1, 8, 14), float64] */;
  asin(%518) /* ty=Tensor[(1, 8, 14), float64] */
}

def @func_13805() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %519 = @func_8524() /* ty=Tensor[(10, 8, 3), float64] */;
  %520 = @func_12328() /* ty=Tensor[(10, 8, 3), float64] */;
  (%519, %520)
}

def @func_2806(%var_2726: Tensor[(13, 8, 2), float64], %var_2727: Tensor[(13, 8, 2), float64], %var_2756: Tensor[(420), float32]) -> (Tensor[(13, 8, 2), float64], Tensor[(1, 1, 4), float32], Tensor[(1, 11, 5), uint64], Tensor[(420), float32], Tensor[(4, 198), int16]) {
  %521 = cast(%var_2727, dtype="float64") /* ty=Tensor[(13, 8, 2), float64] */;
  %522 = shape_of(%var_2726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%var_2726, dtype="float64") /* ty=Tensor[(13, 8, 2), float64] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %525 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 1), uint32] */, dtype="uint32") /* ty=Tensor[(4, 1), uint32] */;
  %526 = reshape(%525, newshape=[1, 1, 4]) /* ty=Tensor[(1, 1, 4), uint32] */;
  %527 = @func_1105(%526) /* ty=(Tensor[(1, 1, 4), uint32],) */;
  %528 = %527.0;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(1, 1, 4), float32] */;
  %530 = cast(meta[relay.Constant][34] /* ty=Tensor[(198), int64] */, dtype="int64") /* ty=Tensor[(198), int64] */;
  %531 = cast(%var_2756, dtype="float32") /* ty=Tensor[(420), float32] */;
  %532 = reshape(%530, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), int64] */;
  %533 = reshape(%531, newshape=[5, 84]) /* ty=Tensor[(5, 84), float32] */;
  %534 = @func_1697(%532, %533) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(1, 11, 5), uint64], Tensor[(5, 84), float32], uint64, Tensor[(15, 14, 12), int32], Tensor[(1, 2520), int32]) */;
  %535 = cast(meta[relay.Constant][34] /* ty=Tensor[(198), int64] */, dtype="int16") /* ty=Tensor[(198), int16] */;
  %536 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 1), uint32] */, dtype="int16") /* ty=Tensor[(4, 1), int16] */;
  %537 = maximum(%523, %524) /* ty=Tensor[(13, 8, 2), float64] */;
  %538 = atanh(%529) /* ty=Tensor[(1, 1, 4), float32] */;
  %539 = %534.1;
  %540 = right_shift(%535, %536) /* ty=Tensor[(4, 198), int16] */;
  (%537, %538, %539, %var_2756, %540)
}

def @func_13436() -> Tensor[(10, 8, 3), float64] {
  @func_9648() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_4507(%var_4496: Tensor[(16, 15, 3), float32]) -> Tensor[(16, 15, 3), float32] {
  %541 = cast(%var_4496, dtype="float32") /* ty=Tensor[(16, 15, 3), float32] */;
  %542 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(16, 15, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 15, 3), float32] */, dtype="float32") /* ty=Tensor[(16, 15, 3), float32] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%543, %544) /* ty=Tensor[(16, 15, 3), float32] */
}

def @func_10320() -> (Tensor[(10, 8, 3), float32], Tensor[(1, 8, 14), float64], Tensor[(10, 8, 3), float64]) {
  %545 = @func_8206() /* ty=Tensor[(10, 8, 3), float64] */;
  %546 = cast(%545, dtype="float32") /* ty=Tensor[(10, 8, 3), float32] */;
  %547 = @func_9424() /* ty=(Tensor[(10, 8, 3), bool], Tensor[(1, 8, 14), float64], Tensor[(28, 4), float64]) */;
  %548 = log2(%546) /* ty=Tensor[(10, 8, 3), float32] */;
  %549 = %547.1;
  %550 = @func_8524() /* ty=Tensor[(10, 8, 3), float64] */;
  (%548, %549, %550)
}

def @func_13065() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), uint16]) {
  %551 = @func_10532() /* ty=Tensor[(10, 8, 3), float64] */;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %553 = reshape(%552, newshape=[10, 8, 3]) /* ty=Tensor[(10, 8, 3), float64] */;
  %554 = @func_11077() /* ty=Tensor[(10, 8, 3), float64] */;
  %555 = @func_8668(%553) /* ty=Tensor[(10, 8, 3), uint16] */;
  (%551, %554, %555)
}

def @func_5410(%var_5348: Tensor[(15, 16, 10), float32], %var_5402: float32, %var_5404: Tensor[(90, 10), uint64]) -> (Tensor[(16, 15, 3), float32], Tensor[(720), float32], Tensor[(15, 16, 10), float64], Tensor[(15, 16, 10), float32], Tensor[(1, 1, 4), uint32], float32, Tensor[(6, 2), float32], Tensor[(90, 10), uint64]) {
  %556 = cast(meta[relay.Constant][36] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %557 = reshape(%556, newshape=[16, 15, 3]) /* ty=Tensor[(16, 15, 3), float32] */;
  %558 = cast(%var_5348, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
  %559 = atanh(%558) /* ty=Tensor[(15, 16, 10), float32] */;
  %560 = cast(%559, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
  %561 = sin(%560) /* ty=Tensor[(15, 16, 10), float32] */;
  %562 = cast(%561, dtype="float64") /* ty=Tensor[(15, 16, 10), float64] */;
  %563 = cast(%559, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
  %564 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%561, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %567 = cast(%var_5402, dtype="float32") /* ty=float32 */;
  %568 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 2), float32] */, dtype="float32") /* ty=Tensor[(6, 2), float32] */;
  %569 = cast(%var_5404, dtype="uint64") /* ty=Tensor[(90, 10), uint64] */;
  %570 = reshape(%567, newshape=[]) /* ty=float32 */;
  %571 = reshape(%568, newshape=[1, 12]) /* ty=Tensor[(1, 12), float32] */;
  %572 = reshape(%569, newshape=[900, 1]) /* ty=Tensor[(900, 1), uint64] */;
  %573 = @func_4307(%570, %571, %572) /* ty=(Tensor[(1, 12), float32], Tensor[(1, 1, 4), uint32], Tensor[(900, 1), uint64]) */;
  %574 = @func_4507(%557) /* ty=Tensor[(16, 15, 3), float32] */;
  %575 = exp(%562) /* ty=Tensor[(15, 16, 10), float64] */;
  %576 = power(%565, %566) /* ty=Tensor[(15, 16, 10), float32] */;
  %577 = %573.1;
  (%574, meta[relay.Constant][36] /* ty=Tensor[(720), float32] */, %575, %576, %577, %var_5402, meta[relay.Constant][37] /* ty=Tensor[(6, 2), float32] */, %var_5404)
}

def @func_8051() -> (Tensor[(10, 8, 3), float64],) {
  %578 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 8, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %579 = cos(%578) /* ty=Tensor[(10, 8, 3), float64] */;
  (%579,)
}

def @func_8668(%var_8656: Tensor[(10, 8, 3), float64]) -> Tensor[(10, 8, 3), uint16] {
  %580 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %581 = %580.0;
  %582 = cast(%var_8656, dtype="uint16") /* ty=Tensor[(10, 8, 3), uint16] */;
  %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%581, dtype="uint16") /* ty=Tensor[(10, 8, 3), uint16] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%584, %585) /* ty=Tensor[(10, 8, 3), uint16] */
}

def @func_8717() -> (Tensor[(10, 8, 3), float64],) {
  %586 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
  (%586,)
}

def @func_8206() -> Tensor[(10, 8, 3), float64] {
  %587 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %587.0
}

def @func_11213() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %588 = @func_11016() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %589 = @func_8843() /* ty=Tensor[(10, 8, 3), float64] */;
  %590 = %588.0;
  %591 = @func_9616() /* ty=Tensor[(10, 8, 3), float64] */;
  %592 = @func_8843() /* ty=Tensor[(10, 8, 3), float64] */;
  (%589, %590, %591, %592)
}

def @func_11077() -> Tensor[(10, 8, 3), float64] {
  @func_8524() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_9424() -> (Tensor[(10, 8, 3), bool], Tensor[(1, 8, 14), float64], Tensor[(28, 4), float64]) {
  %593 = @func_9008() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %594 = %593.0;
  %595 = @func_8843() /* ty=Tensor[(10, 8, 3), float64] */;
  %596 = cast(%595, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
  %597 = shape_of(%594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%594, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %600 = cast(meta[relay.Constant][39] /* ty=Tensor[(28, 4), float64] */, dtype="float64") /* ty=Tensor[(28, 4), float64] */;
  %601 = reshape(%600, newshape=[1, 8, 14]) /* ty=Tensor[(1, 8, 14), float64] */;
  %602 = equal(%598, %599) /* ty=Tensor[(10, 8, 3), bool] */;
  %603 = @func_6369(%601) /* ty=Tensor[(1, 8, 14), float64] */;
  (%602, %603, meta[relay.Constant][39] /* ty=Tensor[(28, 4), float64] */)
}

def @func_10585(%var_10542: Tensor[(15, 16, 3), float64]) -> (Tensor[(15, 16, 3), float32], Tensor[(3, 11, 5), float32], Tensor[(165), float32], Tensor[(15, 16, 3), float32]) {
  %604 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 16, 3), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 3), float64] */;
  %605 = shape_of(%var_10542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%var_10542, dtype="float64") /* ty=Tensor[(15, 16, 3), float64] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %608 = subtract(%606, %607) /* ty=Tensor[(15, 16, 3), float64] */;
  %609 = cast(%var_10542, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
  %610 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%608, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %613 = cast(meta[relay.Constant][41] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %614 = reshape(%613, newshape=[3, 11, 5]) /* ty=Tensor[(3, 11, 5), float32] */;
  %615 = @func_8365(%614) /* ty=(Tensor[(3, 11, 5), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %616 = cast(%var_10542, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
  %617 = floor_mod(%611, %612) /* ty=Tensor[(15, 16, 3), float32] */;
  %618 = %615.0;
  %619 = cos(%616) /* ty=Tensor[(15, 16, 3), float32] */;
  (%617, %618, meta[relay.Constant][41] /* ty=Tensor[(165), float32] */, %619)
}

def @func_1327(%var_1304: Tensor[(10, 9, 10), uint64], %var_1305: Tensor[(10, 9, 10), uint64]) -> (Tensor[(10, 9, 10), bool], Tensor[(1, 1, 4), uint32], Tensor[(2, 2), uint32]) {
  %620 = cast(%var_1305, dtype="bool") /* ty=Tensor[(10, 9, 10), bool] */;
  %621 = shape_of(%var_1304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%var_1304, dtype="bool") /* ty=Tensor[(10, 9, 10), bool] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %624 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 2), uint32] */, dtype="uint32") /* ty=Tensor[(2, 2), uint32] */;
  %625 = reshape(%624, newshape=[1, 1, 4]) /* ty=Tensor[(1, 1, 4), uint32] */;
  %626 = @func_1105(%625) /* ty=(Tensor[(1, 1, 4), uint32],) */;
  %627 = less_equal(%622, %623) /* ty=Tensor[(10, 9, 10), bool] */;
  %628 = %626.0;
  (%627, %628, meta[relay.Constant][42] /* ty=Tensor[(2, 2), uint32] */)
}

def @func_10821() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), bool]) {
  %629 = @func_10494() /* ty=(Tensor[(10, 8, 3), bool], Tensor[(10, 8, 3), bool]) */;
  %630 = @func_8524() /* ty=Tensor[(10, 8, 3), float64] */;
  %631 = %629.0;
  (%630, %631)
}

def @func_3372(%var_3353: Tensor[(12, 16, 16), uint16], %var_3354: Tensor[(12, 16, 16), uint16]) -> (Tensor[(12, 16, 16), bool],) {
  %632 = cast(%var_3354, dtype="bool") /* ty=Tensor[(12, 16, 16), bool] */;
  %633 = shape_of(%var_3353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%var_3353, dtype="bool") /* ty=Tensor[(12, 16, 16), bool] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %636 = greater_equal(%634, %635) /* ty=Tensor[(12, 16, 16), bool] */;
  (%636,)
}

def @func_1677(%var_1667: Tensor[(4, 8, 13), int16]) -> (Tensor[(4, 8, 13), int16],) {
  %637 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 8, 13), int16] */, dtype="int16") /* ty=Tensor[(4, 8, 13), int16] */;
  %638 = shape_of(%var_1667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%var_1667, dtype="int16") /* ty=Tensor[(4, 8, 13), int16] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %641 = add(%639, %640) /* ty=Tensor[(4, 8, 13), int16] */;
  (%641,)
}

def @func_9008() -> (Tensor[(10, 8, 3), float64],) {
  %642 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
  (%642,)
}

def @func_10740() -> (Tensor[(10, 8, 3), float64],) {
  %643 = @func_10532() /* ty=Tensor[(10, 8, 3), float64] */;
  (%643,)
}

def @func_9710() -> (Tensor[(10, 8, 3), float64],) {
  %644 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %645 = %644.0;
  (%645,)
}

def @func_10886() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %646 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %647 = @func_10385() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %648 = %646.0;
  %649 = %647.0;
  (%648, %649)
}

def @func_11125() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %650 = @func_10740() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %651 = @func_9710() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %652 = %650.0;
  %653 = %651.0;
  (%652, %653)
}

def @func_13328() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(450, 2), uint64], Tensor[(4, 16, 7), bool], Tensor[(448), uint64]) {
  %654 = @func_8773() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %655 = %654.0;
  %656 = cast(%655, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %657 = cast(meta[relay.Constant][44] /* ty=Tensor[(450, 2), uint64] */, dtype="uint64") /* ty=Tensor[(450, 2), uint64] */;
  %658 = reshape(%657, newshape=[900]) /* ty=Tensor[(900), uint64] */;
  %659 = @func_10036(%658) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(2, 3, 4), bool], Tensor[(10, 8, 3), float64], Tensor[(900), float64]) */;
  %660 = cast(meta[relay.Constant][45] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %661 = reshape(%660, newshape=[4, 16, 7]) /* ty=Tensor[(4, 16, 7), uint64] */;
  %662 = acosh(%656) /* ty=Tensor[(10, 8, 3), float64] */;
  %663 = %659.2;
  %664 = @func_6484(%661) /* ty=Tensor[(4, 16, 7), bool] */;
  (%662, %663, meta[relay.Constant][44] /* ty=Tensor[(450, 2), uint64] */, %664, meta[relay.Constant][45] /* ty=Tensor[(448), uint64] */)
}

def @func_9648() -> Tensor[(10, 8, 3), float64] {
  %665 = @func_9177() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %665.0
}

def @func_3661(%var_3655: Tensor[(3, 16, 3), bool], %var_3656: Tensor[(3, 16, 3), bool]) -> Tensor[(3, 16, 3), bool] {
  %666 = cast(%var_3656, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
  %667 = shape_of(%var_3655, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%var_3655, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%668, %669) /* ty=Tensor[(3, 16, 3), bool] */
}

def @func_8524() -> Tensor[(10, 8, 3), float64] {
  %670 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %670.0
}

def @func_11895() -> Tensor[(10, 6, 2), bool] {
  %671 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 6, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 6, 2), float64] */;
  %672 = cos(%671) /* ty=Tensor[(10, 6, 2), float64] */;
  %673 = cast(%672, dtype="bool") /* ty=Tensor[(10, 6, 2), bool] */;
  %674 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(10, 6, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 6, 2), float64] */, dtype="bool") /* ty=Tensor[(10, 6, 2), bool] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%675, %676) /* ty=Tensor[(10, 6, 2), bool] */
}

def @main(%var_13912: Tensor[(13, 9, 6), int32], %var_13913: Tensor[(13, 9, 6), int32]) -> Tensor[(13, 9, 6), int32] {
  %677 = cast(%var_13913, dtype="int32") /* ty=Tensor[(13, 9, 6), int32] */;
  %678 = shape_of(%var_13912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%var_13912, dtype="int32") /* ty=Tensor[(13, 9, 6), int32] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  multiply(%679, %680) /* ty=Tensor[(13, 9, 6), int32] */
}

def @func_297(%var_273: Tensor[(10, 12, 10), float64], %var_274: Tensor[(10, 12, 10), float64]) -> (Tensor[(10, 12, 10), uint16],) {
  %681 = cast(%var_274, dtype="float64") /* ty=Tensor[(10, 12, 10), float64] */;
  %682 = shape_of(%var_273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%var_273, dtype="float64") /* ty=Tensor[(10, 12, 10), float64] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %685 = power(%683, %684) /* ty=Tensor[(10, 12, 10), float64] */;
  %686 = cast(%685, dtype="uint16") /* ty=Tensor[(10, 12, 10), uint16] */;
  %687 = shape_of(%var_273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%var_273, dtype="uint16") /* ty=Tensor[(10, 12, 10), uint16] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %690 = bitwise_or(%688, %689) /* ty=Tensor[(10, 12, 10), uint16] */;
  (%690,)
}

def @func_7206(%var_7192: Tensor[(2520, 1), int32]) -> (Tensor[(1, 5, 6), float32], Tensor[(15, 14, 12), int32], Tensor[(2520, 1), int32], Tensor[(1200), float64], Tensor[(65), float32], Tensor[(12, 100), float64]) {
  %691 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 5, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 5, 6), float32] */;
  %692 = cast(%var_7192, dtype="int32") /* ty=Tensor[(2520, 1), int32] */;
  %693 = cast(%var_7192, dtype="int32") /* ty=Tensor[(2520, 1), int32] */;
  %694 = reshape(%692, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
  %695 = reshape(%693, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
  %696 = cast(meta[relay.Constant][48] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %697 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 100), float64] */, dtype="float64") /* ty=Tensor[(12, 100), float64] */;
  %698 = reshape(%696, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
  %699 = reshape(%697, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
  %700 = @func_780(%698, %699) /* ty=(Tensor[(15, 16, 8), float64], Tensor[(1200), float64], Tensor[(13, 5), float32], Tensor[(1200), float64]) */;
  %701 = sinh(%691) /* ty=Tensor[(1, 5, 6), float32] */;
  %702 = @func_1569(%694, %695) /* ty=Tensor[(15, 14, 12), int32] */;
  %703 = %700.3;
  (%701, %702, %var_7192, %703, meta[relay.Constant][48] /* ty=Tensor[(65), float32] */, meta[relay.Constant][49] /* ty=Tensor[(12, 100), float64] */)
}

def @func_3490(%var_3457: Tensor[(13, 5, 5), float64], %var_3464: Tensor[(65), float32]) -> (Tensor[(13, 5, 5), float64], Tensor[(13, 5), float32], Tensor[(65), float32], Tensor[(1, 1200), float64]) {
  %704 = cast(%var_3457, dtype="float64") /* ty=Tensor[(13, 5, 5), float64] */;
  %705 = cast(%var_3464, dtype="float32") /* ty=Tensor[(65), float32] */;
  %706 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 1200), float64] */, dtype="float64") /* ty=Tensor[(1, 1200), float64] */;
  %707 = reshape(%705, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
  %708 = reshape(%706, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
  %709 = @func_780(%707, %708) /* ty=(Tensor[(15, 16, 8), float64], Tensor[(1200), float64], Tensor[(13, 5), float32], Tensor[(1200), float64]) */;
  %710 = sinh(%704) /* ty=Tensor[(13, 5, 5), float64] */;
  %711 = %709.2;
  (%710, %711, %var_3464, meta[relay.Constant][50] /* ty=Tensor[(1, 1200), float64] */)
}

def @func_10036(%var_9985: Tensor[(900), uint64]) -> (Tensor[(10, 8, 3), float64], Tensor[(2, 3, 4), bool], Tensor[(10, 8, 3), float64], Tensor[(900), float64]) {
  %712 = @func_9757() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %713 = cast(%var_9985, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %714 = %712.1;
  %715 = cast(%714, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %716 = reshape(%713, newshape=[900]) /* ty=Tensor[(900), uint64] */;
  %717 = reshape(%715, newshape=[10, 8, 3]) /* ty=Tensor[(10, 8, 3), float64] */;
  %718 = @func_8131(%716, %717) /* ty=(Tensor[(1, 1, 4), uint32], Tensor[(900), uint64], Tensor[(10, 8, 3), float64]) */;
  %719 = %718.0;
  %720 = cast(%719, dtype="bool") /* ty=Tensor[(1, 1, 4), bool] */;
  %721 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 3, 4), uint32] */, dtype="bool") /* ty=Tensor[(2, 3, 4), bool] */;
  %722 = @func_9177() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %723 = cast(%var_9985, dtype="float64") /* ty=Tensor[(900), float64] */;
  %724 = less_equal(%720, %721) /* ty=Tensor[(2, 3, 4), bool] */;
  %725 = %722.0;
  %726 = cos(%723) /* ty=Tensor[(900), float64] */;
  (%714, %724, %725, %726)
}

def @func_11547() -> Tensor[(10, 8, 3), float64] {
  %727 = @func_11016() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %727.0
}

def @func_11918() -> (Tensor[(10, 8, 3), float64], Tensor[(12, 16, 16), bool], Tensor[(3072), uint16], uint64, uint64) {
  %728 = cast(meta[relay.Constant][52] /* ty=Tensor[(3072), uint16] */, dtype="uint16") /* ty=Tensor[(3072), uint16] */;
  %729 = cast(meta[relay.Constant][52] /* ty=Tensor[(3072), uint16] */, dtype="uint16") /* ty=Tensor[(3072), uint16] */;
  %730 = reshape(%728, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), uint16] */;
  %731 = reshape(%729, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), uint16] */;
  %732 = @func_3372(%730, %731) /* ty=(Tensor[(12, 16, 16), bool],) */;
  %733 = cast(meta[relay.Constant][53] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %734 = reshape(%733, newshape=[]) /* ty=uint64 */;
  %735 = @func_10710(%734) /* ty=(Tensor[(10, 8, 3), bool], Tensor[(10, 12, 10), uint16], Tensor[(420), float32], uint64) */;
  %736 = @func_10532() /* ty=Tensor[(10, 8, 3), float64] */;
  %737 = %732.0;
  %738 = %735.3;
  (%736, %737, meta[relay.Constant][52] /* ty=Tensor[(3072), uint16] */, %738, meta[relay.Constant][53] /* ty=uint64 */)
}

def @func_11260() -> Tensor[(1, 8, 14), float64] {
  %739 = @func_9424() /* ty=(Tensor[(10, 8, 3), bool], Tensor[(1, 8, 14), float64], Tensor[(28, 4), float64]) */;
  %739.1
}

def @func_1697(%var_1683: Tensor[(3, 11, 6), int64], %var_1688: Tensor[(5, 84), float32]) -> (Tensor[(3, 11, 6), bool], Tensor[(1, 11, 5), uint64], Tensor[(5, 84), float32], uint64, Tensor[(15, 14, 12), int32], Tensor[(1, 2520), int32]) {
  %740 = cast(%var_1683, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
  %741 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(3, 11, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 11, 6), int64] */, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %744 = cast(%var_1688, dtype="float32") /* ty=Tensor[(5, 84), float32] */;
  %745 = cast(%var_1688, dtype="float32") /* ty=Tensor[(5, 84), float32] */;
  %746 = cast(meta[relay.Constant][55] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %747 = cast(%var_1688, dtype="float32") /* ty=Tensor[(5, 84), float32] */;
  %748 = reshape(%744, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %749 = reshape(%745, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %750 = reshape(%746, newshape=[]) /* ty=uint64 */;
  %751 = reshape(%747, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %752 = @func_1467(%748, %749, %750, %751) /* ty=(Tensor[(5, 6, 14), bool], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(1, 11, 5), uint64], Tensor[(55), uint64], Tensor[(15, 16, 8), int8], Tensor[(10, 9, 10), bool], Tensor[(900), uint64], Tensor[(5, 6, 14), uint32], Tensor[(1, 11, 5), uint64], Tensor[(5, 6, 14), bool]) */;
  %753 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 2520), int32] */, dtype="int32") /* ty=Tensor[(1, 2520), int32] */;
  %754 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 2520), int32] */, dtype="int32") /* ty=Tensor[(1, 2520), int32] */;
  %755 = reshape(%753, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
  %756 = reshape(%754, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
  %757 = greater(%742, %743) /* ty=Tensor[(3, 11, 6), bool] */;
  %758 = %752.10;
  %759 = @func_1569(%755, %756) /* ty=Tensor[(15, 14, 12), int32] */;
  (%757, %758, %var_1688, meta[relay.Constant][55] /* ty=uint64 */, %759, meta[relay.Constant][56] /* ty=Tensor[(1, 2520), int32] */)
}

def @func_11321() -> (Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %760 = @func_10320() /* ty=(Tensor[(10, 8, 3), float32], Tensor[(1, 8, 14), float64], Tensor[(10, 8, 3), float64]) */;
  %761 = @func_10320() /* ty=(Tensor[(10, 8, 3), float32], Tensor[(1, 8, 14), float64], Tensor[(10, 8, 3), float64]) */;
  %762 = @func_9616() /* ty=Tensor[(10, 8, 3), float64] */;
  %763 = @func_11260() /* ty=Tensor[(1, 8, 14), float64] */;
  %764 = %760.2;
  %765 = %761.2;
  (%762, %763, %764, %765)
}

def @func_10843() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %766 = @func_10385() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %767 = %766.0;
  %768 = cast(%767, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %769 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
  %770 = log10(%768) /* ty=Tensor[(10, 8, 3), float64] */;
  (%769, %770)
}

def @func_10276(%var_10110: float32, %var_10111: Tensor[(10, 1, 8), float32], %var_10117: Tensor[(12), float32], %var_10161: Tensor[(300, 4), float64], %var_10272: Tensor[(420), float32]) -> (Tensor[(10, 1, 8), bool], Tensor[(1, 1, 4), uint32], Tensor[(12), float32], Tensor[(90, 10), uint64], Tensor[(10, 1, 8), uint64], Tensor[(300, 4), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(4, 14, 9), bool], Tensor[(10, ?, 8), bool], Tensor[(3, 16, 3), bool], Tensor[(144, 1), bool], Tensor[(10, 1, 8), float32], Tensor[(900), uint64], Tensor[(420), float32]) {
  %771 = cast(%var_10110, dtype="bool") /* ty=bool */;
  %772 = cast(%var_10111, dtype="bool") /* ty=Tensor[(10, 1, 8), bool] */;
  %773 = cast(%var_10110, dtype="float32") /* ty=float32 */;
  %774 = cast(%var_10117, dtype="float32") /* ty=Tensor[(12), float32] */;
  %775 = cast(meta[relay.Constant][57] /* ty=Tensor[(90, 10), uint64] */, dtype="uint64") /* ty=Tensor[(90, 10), uint64] */;
  %776 = reshape(%773, newshape=[]) /* ty=float32 */;
  %777 = reshape(%774, newshape=[1, 12]) /* ty=Tensor[(1, 12), float32] */;
  %778 = reshape(%775, newshape=[900, 1]) /* ty=Tensor[(900, 1), uint64] */;
  %779 = @func_4307(%776, %777, %778) /* ty=(Tensor[(1, 12), float32], Tensor[(1, 1, 4), uint32], Tensor[(900, 1), uint64]) */;
  %780 = cast(%var_10111, dtype="uint64") /* ty=Tensor[(10, 1, 8), uint64] */;
  %781 = cast(%var_10110, dtype="uint64") /* ty=uint64 */;
  %782 = cast(%var_10161, dtype="float64") /* ty=Tensor[(300, 4), float64] */;
  %783 = reshape(%782, newshape=[12, 100]) /* ty=Tensor[(12, 100), float64] */;
  %784 = @func_5050(%783) /* ty=(Tensor[(4, 14, 9), float32], Tensor[(10, 12, 10), uint16], Tensor[(12, 100), float64]) */;
  %785 = %784.0;
  %786 = cast(%785, dtype="float32") /* ty=Tensor[(4, 14, 9), float32] */;
  %787 = reshape(%786, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), float32] */;
  %788 = @func_9556(%787) /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %789 = cast(%785, dtype="bool") /* ty=Tensor[(4, 14, 9), bool] */;
  %790 = cast(%var_10110, dtype="bool") /* ty=bool */;
  %791 = cast(%var_10111, dtype="float32") /* ty=Tensor[(10, 1, 8), float32] */;
  %792 = sqrt(%791) /* ty=Tensor[(10, 1, 8), float32] */;
  %793 = cast(%var_10111, dtype="bool") /* ty=Tensor[(10, 1, 8), bool] */;
  %794 = shape_of(%792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(%792, dtype="bool") /* ty=Tensor[(10, 1, 8), bool] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %797 = cast(meta[relay.Constant][58] /* ty=Tensor[(144, 1), bool] */, dtype="bool") /* ty=Tensor[(144, 1), bool] */;
  %798 = cast(meta[relay.Constant][58] /* ty=Tensor[(144, 1), bool] */, dtype="bool") /* ty=Tensor[(144, 1), bool] */;
  %799 = reshape(%797, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), bool] */;
  %800 = reshape(%798, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), bool] */;
  %801 = cast(%792, dtype="float32") /* ty=Tensor[(10, 1, 8), float32] */;
  %802 = cast(%var_10272, dtype="float32") /* ty=Tensor[(420), float32] */;
  %803 = cast(%var_10272, dtype="float32") /* ty=Tensor[(420), float32] */;
  %804 = cast(%var_10110, dtype="uint64") /* ty=uint64 */;
  %805 = cast(%var_10272, dtype="float32") /* ty=Tensor[(420), float32] */;
  %806 = reshape(%802, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %807 = reshape(%803, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %808 = reshape(%804, newshape=[]) /* ty=uint64 */;
  %809 = reshape(%805, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %810 = @func_1467(%806, %807, %808, %809) /* ty=(Tensor[(5, 6, 14), bool], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(1, 11, 5), uint64], Tensor[(55), uint64], Tensor[(15, 16, 8), int8], Tensor[(10, 9, 10), bool], Tensor[(900), uint64], Tensor[(5, 6, 14), uint32], Tensor[(1, 11, 5), uint64], Tensor[(5, 6, 14), bool]) */;
  %811 = greater_equal(%771, %772) /* ty=Tensor[(10, 1, 8), bool] */;
  %812 = %779.1;
  %813 = maximum(%780, %781) /* ty=Tensor[(10, 1, 8), uint64] */;
  %814 = %788.1;
  %815 = @func_8206() /* ty=Tensor[(10, 8, 3), float64] */;
  %816 = not_equal(%789, %790) /* ty=Tensor[(4, 14, 9), bool] */;
  %817 = not_equal(%795, %796) /* ty=Tensor[(10, ?, 8), bool] */;
  %818 = @func_3661(%799, %800) /* ty=Tensor[(3, 16, 3), bool] */;
  %819 = sinh(%801) /* ty=Tensor[(10, 1, 8), float32] */;
  %820 = %810.8;
  (%811, %812, %var_10117, meta[relay.Constant][57] /* ty=Tensor[(90, 10), uint64] */, %813, %var_10161, %814, %815, %816, %817, %818, meta[relay.Constant][58] /* ty=Tensor[(144, 1), bool] */, %819, %820, %var_10272)
}

def @func_9177() -> (Tensor[(10, 8, 3), float64],) {
  %821 = @func_8206() /* ty=Tensor[(10, 8, 3), float64] */;
  (%821,)
}

def @func_13460() -> (Tensor[(10, 8, 3), float64],) {
  %822 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %823 = %822.0;
  (%823,)
}

def @func_9556(%var_9491: Tensor[(9, 8, 7), float32]) -> (Tensor[(9, 8, 7), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %824 = cast(%var_9491, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %825 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %826 = @func_8773() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %827 = asinh(%824) /* ty=Tensor[(9, 8, 7), float32] */;
  %828 = %825.0;
  %829 = %826.0;
  (%827, %828, %829)
}

def @func_9966(%var_9945: Tensor[(11, 3, 3), float64], %var_9946: Tensor[(11, 3, 3), float64], %var_9953: Tensor[(900), uint64]) -> (Tensor[(11, 3, 3), float64], Tensor[(1, 1, 4), uint32], Tensor[(2400), float32], float32, Tensor[(900), uint64], Tensor[(12, 16, 16), bool], Tensor[(4, 768), uint16]) {
  %830 = cast(%var_9946, dtype="float64") /* ty=Tensor[(11, 3, 3), float64] */;
  %831 = shape_of(%var_9945, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%var_9945, dtype="float64") /* ty=Tensor[(11, 3, 3), float64] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %834 = cast(meta[relay.Constant][59] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %835 = cast(2.55246f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %836 = cast(%var_9953, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %837 = reshape(%834, newshape=[15, 16, 10]) /* ty=Tensor[(15, 16, 10), float32] */;
  %838 = reshape(%835, newshape=[]) /* ty=float32 */;
  %839 = reshape(%836, newshape=[90, 10]) /* ty=Tensor[(90, 10), uint64] */;
  %840 = @func_5410(%837, %838, %839) /* ty=(Tensor[(16, 15, 3), float32], Tensor[(720), float32], Tensor[(15, 16, 10), float64], Tensor[(15, 16, 10), float32], Tensor[(1, 1, 4), uint32], float32, Tensor[(6, 2), float32], Tensor[(90, 10), uint64]) */;
  %841 = cast(meta[relay.Constant][60] /* ty=Tensor[(4, 768), uint16] */, dtype="uint16") /* ty=Tensor[(4, 768), uint16] */;
  %842 = cast(meta[relay.Constant][60] /* ty=Tensor[(4, 768), uint16] */, dtype="uint16") /* ty=Tensor[(4, 768), uint16] */;
  %843 = reshape(%841, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), uint16] */;
  %844 = reshape(%842, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), uint16] */;
  %845 = @func_3372(%843, %844) /* ty=(Tensor[(12, 16, 16), bool],) */;
  %846 = power(%832, %833) /* ty=Tensor[(11, 3, 3), float64] */;
  %847 = %840.4;
  %848 = %845.0;
  (%846, %847, meta[relay.Constant][59] /* ty=Tensor[(2400), float32] */, 2.55246f /* ty=float32 */, %var_9953, %848, meta[relay.Constant][60] /* ty=Tensor[(4, 768), uint16] */)
}

def @func_13652() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), uint64]) {
  %849 = @func_12953() /* ty=(Tensor[(10, 8, 3), uint64], Tensor[(10, 8, 3), float64]) */;
  %850 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
  %851 = %849.0;
  (%850, %851)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_13545() -> Tensor[(10, 8, 3), float64] {
  @func_13543() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_9008() -> (Tensor[(10, 8, 3), float64],) {
  %0 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
  (%0,)
}

def @func_11127() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  @func_11125() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */
}

def @func_4694(%var_4691: Tensor[(8, 4, 6), uint16], %var_4692: Tensor[(8, 4, 6), uint16], %var_4693: Tensor[(900), uint64]) -> (Tensor[(8, 4, 6), uint16], Tensor[(2, 2), uint32], Tensor[(900), uint64], Tensor[(10, 12, 10), uint16], Tensor[(1200), float64], Tensor[(9, 16, 16), int32], Tensor[(2, 8), int32], Tensor[(16), int32], Tensor[(180), float64]) {
  %26 = fn (%var_4612: Tensor[(8, 4, 6), uint16], %var_4613: Tensor[(8, 4, 6), uint16], %var_4641: Tensor[(900), uint64]) -> (Tensor[(8, 4, 6), uint16], Tensor[(2, 2), uint32], Tensor[(900), uint64], Tensor[(10, 12, 10), uint16], Tensor[(1200), float64], Tensor[(9, 16, 16), int32], Tensor[(2, 8), int32], Tensor[(16), int32], Tensor[(180), float64]) {
    %1 = cast(%var_4613, dtype="uint16") /* ty=Tensor[(8, 4, 6), uint16] */;
    %2 = shape_of(%var_4612, dtype="int32") /* ty=Tensor[(3), int32] */;
    %3 = cast(%var_4612, dtype="uint16") /* ty=Tensor[(8, 4, 6), uint16] */;
    %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %5 = cast(%var_4641, dtype="uint64") /* ty=Tensor[(900), uint64] */;
    %6 = cast(%var_4641, dtype="uint64") /* ty=Tensor[(900), uint64] */;
    %7 = reshape(%5, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
    %8 = reshape(%6, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
    %9 = @func_1327(%7, %8) /* ty=(Tensor[(10, 9, 10), bool], Tensor[(1, 1, 4), uint32], Tensor[(2, 2), uint32]) */;
    %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %12 = reshape(%10, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
    %13 = reshape(%11, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
    %14 = @func_297(%12, %13) /* ty=(Tensor[(10, 12, 10), uint16],) */;
    %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 8), int32] */, dtype="int32") /* ty=Tensor[(2, 8), int32] */;
    %16 = reshape(%15, newshape=[1, 1, 16]) /* ty=Tensor[(1, 1, 16), int32] */;
    %17 = @func_2129(%16) /* ty=(Tensor[(9, 16, 16), int32],) */;
    %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %19 = reshape(%18, newshape=[15, 2, 6]) /* ty=Tensor[(15, 2, 6), float64] */;
    %20 = @func_3391(%19) /* ty=(Tensor[(15, 2, 6), float64], Tensor[(9, 16, 16), int32], Tensor[(16), int32]) */;
    %21 = bitwise_xor(%3, %4) /* ty=Tensor[(8, 4, 6), uint16] */;
    %22 = %9.2;
    %23 = %14.0;
    %24 = %17.0;
    %25 = %20.2;
    (%21, %22, %var_4641, %23, meta[relay.Constant][0] /* ty=Tensor[(1200), float64] */, %24, meta[relay.Constant][1] /* ty=Tensor[(2, 8), int32] */, %25, meta[relay.Constant][2] /* ty=Tensor[(180), float64] */)
  };
  %26(%var_4691, %var_4692, %var_4693) /* ty=(Tensor[(8, 4, 6), uint16], Tensor[(2, 2), uint32], Tensor[(900), uint64], Tensor[(10, 12, 10), uint16], Tensor[(1200), float64], Tensor[(9, 16, 16), int32], Tensor[(2, 8), int32], Tensor[(16), int32], Tensor[(180), float64]) */
}

def @func_9463(%var_9462: Tensor[(10, 8, 3), float64]) -> Tensor[(10, 8, 3), float64] {
  %32 = fn (%var_9450: Tensor[(10, 8, 3), float64]) -> Tensor[(10, 8, 3), float64] {
    %27 = @func_8843() /* ty=Tensor[(10, 8, 3), float64] */;
    %28 = cast(%var_9450, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
    %29 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
    %30 = cast(%27, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
    %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%30, %31) /* ty=Tensor[(10, 8, 3), float64] */
  };
  %32(%var_9462) /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_8367(%var_8366: Tensor[(3, 11, 5), float32]) -> (Tensor[(3, 11, 5), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %44 = fn (%var_8305: Tensor[(3, 11, 5), float32]) -> (Tensor[(3, 11, 5), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
    %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 11, 1), float32] */;
    %34 = cast(%var_8305, dtype="float32") /* ty=Tensor[(3, 11, 5), float32] */;
    %35 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %36 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %37 = %36.0;
    %38 = cast(%37, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
    %39 = erf(%38) /* ty=Tensor[(10, 8, 3), float64] */;
    %40 = cast(%39, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
    %41 = divide(%33, %34) /* ty=Tensor[(3, 11, 5), float32] */;
    %42 = %35.0;
    %43 = sqrt(%40) /* ty=Tensor[(10, 8, 3), float64] */;
    (%41, %42, %43)
  };
  %44(%var_8366) /* ty=(Tensor[(3, 11, 5), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */
}

def @func_13851(%var_13839: Tensor[(12, 15, 9), float32], %var_13840: Tensor[(12, 15, 9), float32]) -> (Tensor[(12, 15, 9), float32], Tensor[(10, 8, 3), float64]) {
  %45 = cast(%var_13840, dtype="float32") /* ty=Tensor[(12, 15, 9), float32] */;
  %46 = shape_of(%var_13839, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%var_13839, dtype="float32") /* ty=Tensor[(12, 15, 9), float32] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %49 = @func_9008() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %50 = divide(%47, %48) /* ty=Tensor[(12, 15, 9), float32] */;
  %51 = %49.0;
  (%50, %51)
}

def @func_1473(%var_1469: Tensor[(5, 6, 14), float32], %var_1470: Tensor[(5, 6, 14), float32], %var_1471: uint64, %var_1472: Tensor[(5, 6, 14), float32]) -> (Tensor[(5, 6, 14), bool], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(1, 11, 5), uint64], Tensor[(55), uint64], Tensor[(15, 16, 8), int8], Tensor[(10, 9, 10), bool], Tensor[(900), uint64], Tensor[(5, 6, 14), uint32], Tensor[(1, 11, 5), uint64], Tensor[(5, 6, 14), bool]) {
  @func_1467(%var_1469, %var_1470, %var_1471, %var_1472) /* ty=(Tensor[(5, 6, 14), bool], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(1, 11, 5), uint64], Tensor[(55), uint64], Tensor[(15, 16, 8), int8], Tensor[(10, 9, 10), bool], Tensor[(900), uint64], Tensor[(5, 6, 14), uint32], Tensor[(1, 11, 5), uint64], Tensor[(5, 6, 14), bool]) */
}

def @func_5050(%var_5042: Tensor[(12, 100), float64]) -> (Tensor[(4, 14, 9), float32], Tensor[(10, 12, 10), uint16], Tensor[(12, 100), float64]) {
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 14, 9), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 9), float64] */;
  %53 = sqrt(%52) /* ty=Tensor[(4, 14, 9), float64] */;
  %54 = cast(%53, dtype="float32") /* ty=Tensor[(4, 14, 9), float32] */;
  %55 = cast(%var_5042, dtype="float64") /* ty=Tensor[(12, 100), float64] */;
  %56 = cast(%var_5042, dtype="float64") /* ty=Tensor[(12, 100), float64] */;
  %57 = reshape(%55, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %58 = reshape(%56, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %59 = @func_297(%57, %58) /* ty=(Tensor[(10, 12, 10), uint16],) */;
  %60 = sinh(%54) /* ty=Tensor[(4, 14, 9), float32] */;
  %61 = %59.0;
  (%60, %61, %var_5042)
}

def @func_8701(%var_8699: Tensor[(8, 5, 8), float32]) -> (Tensor[(8, 5, 8), float32], Tensor[(8, 5, 8), float32]) {
  @func_8698(%var_8699) /* ty=(Tensor[(8, 5, 8), float32], Tensor[(8, 5, 8), float32]) */
}

def @func_6486(%var_6485: Tensor[(4, 16, 7), uint64]) -> Tensor[(4, 16, 7), bool] {
  %66 = fn (%var_6480: Tensor[(4, 16, 7), uint64]) -> Tensor[(4, 16, 7), bool] {
    %62 = cast(%var_6480, dtype="bool") /* ty=Tensor[(4, 16, 7), bool] */;
    %63 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(4, 16, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %64 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 16, 7), uint64] */, dtype="bool") /* ty=Tensor[(4, 16, 7), bool] */;
    %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%64, %65) /* ty=Tensor[(4, 16, 7), bool] */
  };
  %66(%var_6485) /* ty=Tensor[(4, 16, 7), bool] */
}

def @func_13855(%var_13853: Tensor[(12, 15, 9), float32], %var_13854: Tensor[(12, 15, 9), float32]) -> (Tensor[(12, 15, 9), float32], Tensor[(10, 8, 3), float64]) {
  @func_13851(%var_13853, %var_13854) /* ty=(Tensor[(12, 15, 9), float32], Tensor[(10, 8, 3), float64]) */
}

def @func_9425() -> (Tensor[(10, 8, 3), bool], Tensor[(1, 8, 14), float64], Tensor[(28, 4), float64]) {
  %78 = fn () -> (Tensor[(10, 8, 3), bool], Tensor[(1, 8, 14), float64], Tensor[(28, 4), float64]) {
    %67 = @func_9008() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %68 = %67.0;
    %69 = @func_8843() /* ty=Tensor[(10, 8, 3), float64] */;
    %70 = cast(%69, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
    %71 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
    %72 = cast(%68, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
    %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %74 = cast(meta[relay.Constant][6] /* ty=Tensor[(28, 4), float64] */, dtype="float64") /* ty=Tensor[(28, 4), float64] */;
    %75 = reshape(%74, newshape=[1, 8, 14]) /* ty=Tensor[(1, 8, 14), float64] */;
    %76 = equal(%72, %73) /* ty=Tensor[(10, 8, 3), bool] */;
    %77 = @func_6369(%75) /* ty=Tensor[(1, 8, 14), float64] */;
    (%76, %77, meta[relay.Constant][6] /* ty=Tensor[(28, 4), float64] */)
  };
  %78() /* ty=(Tensor[(10, 8, 3), bool], Tensor[(1, 8, 14), float64], Tensor[(28, 4), float64]) */
}

def @func_10322() -> (Tensor[(10, 8, 3), float32], Tensor[(1, 8, 14), float64], Tensor[(10, 8, 3), float64]) {
  @func_10320() /* ty=(Tensor[(10, 8, 3), float32], Tensor[(1, 8, 14), float64], Tensor[(10, 8, 3), float64]) */
}

def @func_8053() -> (Tensor[(10, 8, 3), float64],) {
  @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_8131(%var_8104: Tensor[(900), uint64], %var_8113: Tensor[(10, 8, 3), float64]) -> (Tensor[(1, 1, 4), uint32], Tensor[(900), uint64], Tensor[(10, 8, 3), float64]) {
  %79 = cast(%var_8104, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %80 = cast(%var_8104, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %81 = reshape(%79, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
  %82 = reshape(%80, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
  %83 = @func_1327(%81, %82) /* ty=(Tensor[(10, 9, 10), bool], Tensor[(1, 1, 4), uint32], Tensor[(2, 2), uint32]) */;
  %84 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %85 = %84.0;
  %86 = cast(%var_8113, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%85, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %90 = %83.1;
  %91 = floor_divide(%88, %89) /* ty=Tensor[(10, 8, 3), float64] */;
  (%90, %var_8104, %91)
}

def @func_1105(%var_1099: Tensor[(1, 1, 4), uint32]) -> (Tensor[(1, 1, 4), uint32],) {
  %92 = cast(meta[relay.Constant][7] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %93 = cast(%var_1099, dtype="uint32") /* ty=Tensor[(1, 1, 4), uint32] */;
  %94 = maximum(%92, %93) /* ty=Tensor[(1, 1, 4), uint32] */;
  (%94,)
}

def @func_11989(%var_11988: Tensor[(2520), float64]) -> (Tensor[(10, 8, 3), float64], Tensor[(12, 100), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(504), float32], Tensor[(15, 14, 12), float32], Tensor[(2520), float32]) {
  %125 = fn (%var_11982: Tensor[(2520), float64]) -> (Tensor[(10, 8, 3), float64], Tensor[(12, 100), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(504), float32], Tensor[(15, 14, 12), float32], Tensor[(2520), float32]) {
    %95 = cast(meta[relay.Constant][8] /* ty=Tensor[(2520), int32] */, dtype="int32") /* ty=Tensor[(2520), int32] */;
    %96 = reshape(%95, newshape=[2520, 1]) /* ty=Tensor[(2520, 1), int32] */;
    %97 = @func_7206(%96) /* ty=(Tensor[(1, 5, 6), float32], Tensor[(15, 14, 12), int32], Tensor[(2520, 1), int32], Tensor[(1200), float64], Tensor[(65), float32], Tensor[(12, 100), float64]) */;
    %98 = @func_8717() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %99 = cast(meta[relay.Constant][9] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
    %100 = reshape(%99, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), float32] */;
    %101 = @func_9556(%100) /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
    %102 = cast(meta[relay.Constant][8] /* ty=Tensor[(2520), int32] */, dtype="int32") /* ty=Tensor[(2520), int32] */;
    %103 = cast(meta[relay.Constant][8] /* ty=Tensor[(2520), int32] */, dtype="int32") /* ty=Tensor[(2520), int32] */;
    %104 = reshape(%102, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
    %105 = reshape(%103, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
    %106 = @func_1569(%104, %105) /* ty=Tensor[(15, 14, 12), int32] */;
    %107 = cast(meta[relay.Constant][8] /* ty=Tensor[(2520), int32] */, dtype="float64") /* ty=Tensor[(2520), float64] */;
    %108 = exp(%107) /* ty=Tensor[(2520), float64] */;
    %109 = cast(%108, dtype="bool") /* ty=Tensor[(2520), bool] */;
    %110 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(%106, dtype="bool") /* ty=Tensor[(15, 14, 12), bool] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %113 = not_equal(%111, %112) /* ty=Tensor[(15, 14, 12), bool] */;
    %114 = cast(%113, dtype="float32") /* ty=Tensor[(15, 14, 12), float32] */;
    %115 = cast(%var_11982, dtype="float32") /* ty=Tensor[(2520), float32] */;
    %116 = shape_of(%108, dtype="int32") /* ty=Tensor[(1), int32] */;
    %117 = cast(%108, dtype="float32") /* ty=Tensor[(2520), float32] */;
    %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?), float32] */;
    %119 = @func_8524() /* ty=Tensor[(10, 8, 3), float64] */;
    %120 = %97.5;
    %121 = %98.0;
    %122 = %101.2;
    %123 = acos(%114) /* ty=Tensor[(15, 14, 12), float32] */;
    %124 = multiply(%117, %118) /* ty=Tensor[(2520), float32] */;
    (%119, %120, %121, %122, meta[relay.Constant][9] /* ty=Tensor[(504), float32] */, %123, %124)
  };
  %125(%var_11988) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(12, 100), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(504), float32], Tensor[(15, 14, 12), float32], Tensor[(2520), float32]) */
}

def @func_13653() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), uint64]) {
  %129 = fn () -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), uint64]) {
    %126 = @func_12953() /* ty=(Tensor[(10, 8, 3), uint64], Tensor[(10, 8, 3), float64]) */;
    %127 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
    %128 = %126.0;
    (%127, %128)
  };
  %129() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), uint64]) */
}

def @func_12050() -> (Tensor[(10, 8, 3), float32],) {
  %134 = fn () -> (Tensor[(10, 8, 3), float32],) {
    %130 = @func_9785() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %131 = %130.0;
    %132 = cast(%131, dtype="float32") /* ty=Tensor[(10, 8, 3), float32] */;
    %133 = cosh(%132) /* ty=Tensor[(10, 8, 3), float32] */;
    (%133,)
  };
  %134() /* ty=(Tensor[(10, 8, 3), float32],) */
}

def @func_12328() -> Tensor[(10, 8, 3), float64] {
  %135 = @func_9358() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %135.0
}

def @func_10644(%var_10643: Tensor[(5, 13, 5), float32]) -> (Tensor[(5, 13, 5), float32],) {
  %138 = fn (%var_10627: Tensor[(5, 13, 5), float32]) -> (Tensor[(5, 13, 5), float32],) {
    %136 = cast(%var_10627, dtype="float32") /* ty=Tensor[(5, 13, 5), float32] */;
    %137 = exp(%136) /* ty=Tensor[(5, 13, 5), float32] */;
    (%137,)
  };
  %138(%var_10643) /* ty=(Tensor[(5, 13, 5), float32],) */
}

def @func_13741() -> (Tensor[(10, 8, 3), float64],) {
  %140 = fn () -> (Tensor[(10, 8, 3), float64],) {
    %139 = @func_13543() /* ty=Tensor[(10, 8, 3), float64] */;
    (%139,)
  };
  %140() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_11215() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  @func_11213() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */
}

def @func_10283(%var_10278: float32, %var_10279: Tensor[(10, 1, 8), float32], %var_10280: Tensor[(12), float32], %var_10281: Tensor[(300, 4), float64], %var_10282: Tensor[(420), float32]) -> (Tensor[(10, 1, 8), bool], Tensor[(1, 1, 4), uint32], Tensor[(12), float32], Tensor[(90, 10), uint64], Tensor[(10, 1, 8), uint64], Tensor[(300, 4), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(4, 14, 9), bool], Tensor[(10, ?, 8), bool], Tensor[(3, 16, 3), bool], Tensor[(144, 1), bool], Tensor[(10, 1, 8), float32], Tensor[(900), uint64], Tensor[(420), float32]) {
  @func_10276(%var_10278, %var_10279, %var_10280, %var_10281, %var_10282) /* ty=(Tensor[(10, 1, 8), bool], Tensor[(1, 1, 4), uint32], Tensor[(12), float32], Tensor[(90, 10), uint64], Tensor[(10, 1, 8), uint64], Tensor[(300, 4), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(4, 14, 9), bool], Tensor[(10, ?, 8), bool], Tensor[(3, 16, 3), bool], Tensor[(144, 1), bool], Tensor[(10, 1, 8), float32], Tensor[(900), uint64], Tensor[(420), float32]) */
}

def @func_8448(%var_8447: Tensor[(10, 12, 6), float64]) -> (Tensor[(10, 12, 6), float64], Tensor[(10, 12, 10), uint16], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(112), float64], Tensor[(112), float64], Tensor[(4, 8, 13), int16], Tensor[(1, 416), int16], Tensor[(15, 14, 12), int32], Tensor[(2520), int32]) {
  %162 = fn (%var_8394: Tensor[(10, 12, 6), float64]) -> (Tensor[(10, 12, 6), float64], Tensor[(10, 12, 10), uint16], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(112), float64], Tensor[(112), float64], Tensor[(4, 8, 13), int16], Tensor[(1, 416), int16], Tensor[(15, 14, 12), int32], Tensor[(2520), int32]) {
    %141 = cast(%var_8394, dtype="float64") /* ty=Tensor[(10, 12, 6), float64] */;
    %142 = cast(meta[relay.Constant][10] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
    %143 = cast(meta[relay.Constant][11] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %144 = reshape(%142, newshape=[5, 1, 13]) /* ty=Tensor[(5, 1, 13), float32] */;
    %145 = reshape(%143, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
    %146 = @func_344(%144, %145) /* ty=(Tensor[(10, 12, 10), uint16], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(5, 1, 13), float32]) */;
    %147 = cast(meta[relay.Constant][12] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
    %148 = reshape(%147, newshape=[112]) /* ty=Tensor[(112), float64] */;
    %149 = @func_8275(%148) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(112), float64]) */;
    %150 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 416), int16] */, dtype="int16") /* ty=Tensor[(1, 416), int16] */;
    %151 = reshape(%150, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), int16] */;
    %152 = @func_1677(%151) /* ty=(Tensor[(4, 8, 13), int16],) */;
    %153 = cast(meta[relay.Constant][14] /* ty=Tensor[(2520), int32] */, dtype="int32") /* ty=Tensor[(2520), int32] */;
    %154 = cast(meta[relay.Constant][14] /* ty=Tensor[(2520), int32] */, dtype="int32") /* ty=Tensor[(2520), int32] */;
    %155 = reshape(%153, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
    %156 = reshape(%154, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
    %157 = atan(%141) /* ty=Tensor[(10, 12, 6), float64] */;
    %158 = %146.2;
    %159 = %149.2;
    %160 = %152.0;
    %161 = @func_1569(%155, %156) /* ty=Tensor[(15, 14, 12), int32] */;
    (%157, %158, meta[relay.Constant][10] /* ty=Tensor[(65), float32] */, meta[relay.Constant][11] /* ty=Tensor[(1200), float64] */, %159, meta[relay.Constant][12] /* ty=Tensor[(112), float64] */, %160, meta[relay.Constant][13] /* ty=Tensor[(1, 416), int16] */, %161, meta[relay.Constant][14] /* ty=Tensor[(2520), int32] */)
  };
  %162(%var_8447) /* ty=(Tensor[(10, 12, 6), float64], Tensor[(10, 12, 10), uint16], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(112), float64], Tensor[(112), float64], Tensor[(4, 8, 13), int16], Tensor[(1, 416), int16], Tensor[(15, 14, 12), int32], Tensor[(2520), int32]) */
}

def @func_11919() -> (Tensor[(10, 8, 3), float64], Tensor[(12, 16, 16), bool], Tensor[(3072), uint16], uint64, uint64) {
  %174 = fn () -> (Tensor[(10, 8, 3), float64], Tensor[(12, 16, 16), bool], Tensor[(3072), uint16], uint64, uint64) {
    %163 = cast(meta[relay.Constant][15] /* ty=Tensor[(3072), uint16] */, dtype="uint16") /* ty=Tensor[(3072), uint16] */;
    %164 = cast(meta[relay.Constant][15] /* ty=Tensor[(3072), uint16] */, dtype="uint16") /* ty=Tensor[(3072), uint16] */;
    %165 = reshape(%163, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), uint16] */;
    %166 = reshape(%164, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), uint16] */;
    %167 = @func_3372(%165, %166) /* ty=(Tensor[(12, 16, 16), bool],) */;
    %168 = cast(meta[relay.Constant][16] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %169 = reshape(%168, newshape=[]) /* ty=uint64 */;
    %170 = @func_10710(%169) /* ty=(Tensor[(10, 8, 3), bool], Tensor[(10, 12, 10), uint16], Tensor[(420), float32], uint64) */;
    %171 = @func_10532() /* ty=Tensor[(10, 8, 3), float64] */;
    %172 = %167.0;
    %173 = %170.3;
    (%171, %172, meta[relay.Constant][15] /* ty=Tensor[(3072), uint16] */, %173, meta[relay.Constant][16] /* ty=uint64 */)
  };
  %174() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(12, 16, 16), bool], Tensor[(3072), uint16], uint64, uint64) */
}

def @func_7208(%var_7207: Tensor[(2520, 1), int32]) -> (Tensor[(1, 5, 6), float32], Tensor[(15, 14, 12), int32], Tensor[(2520, 1), int32], Tensor[(1200), float64], Tensor[(65), float32], Tensor[(12, 100), float64]) {
  %188 = fn (%var_7192: Tensor[(2520, 1), int32]) -> (Tensor[(1, 5, 6), float32], Tensor[(15, 14, 12), int32], Tensor[(2520, 1), int32], Tensor[(1200), float64], Tensor[(65), float32], Tensor[(12, 100), float64]) {
    %175 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 5, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 5, 6), float32] */;
    %176 = cast(%var_7192, dtype="int32") /* ty=Tensor[(2520, 1), int32] */;
    %177 = cast(%var_7192, dtype="int32") /* ty=Tensor[(2520, 1), int32] */;
    %178 = reshape(%176, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
    %179 = reshape(%177, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
    %180 = cast(meta[relay.Constant][18] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
    %181 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 100), float64] */, dtype="float64") /* ty=Tensor[(12, 100), float64] */;
    %182 = reshape(%180, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
    %183 = reshape(%181, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
    %184 = @func_780(%182, %183) /* ty=(Tensor[(15, 16, 8), float64], Tensor[(1200), float64], Tensor[(13, 5), float32], Tensor[(1200), float64]) */;
    %185 = sinh(%175) /* ty=Tensor[(1, 5, 6), float32] */;
    %186 = @func_1569(%178, %179) /* ty=Tensor[(15, 14, 12), int32] */;
    %187 = %184.3;
    (%185, %186, %var_7192, %187, meta[relay.Constant][18] /* ty=Tensor[(65), float32] */, meta[relay.Constant][19] /* ty=Tensor[(12, 100), float64] */)
  };
  %188(%var_7207) /* ty=(Tensor[(1, 5, 6), float32], Tensor[(15, 14, 12), int32], Tensor[(2520, 1), int32], Tensor[(1200), float64], Tensor[(65), float32], Tensor[(12, 100), float64]) */
}

def @func_10386() -> (Tensor[(10, 8, 3), float64],) {
  %192 = fn () -> (Tensor[(10, 8, 3), float64],) {
    %189 = @func_8843() /* ty=Tensor[(10, 8, 3), float64] */;
    %190 = cast(%189, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
    %191 = log(%190) /* ty=Tensor[(10, 8, 3), float64] */;
    (%191,)
  };
  %192() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_9866(%var_9863: Tensor[(420), float32]) -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), uint32], Tensor[(1, 11, 5), uint64], Tensor[(198), int64], Tensor[(420), float32]) {
  %193 = @func_9177() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %194 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %195 = %194.0;
  %196 = @func_9757() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %197 = %196.0;
  %198 = cast(%197, dtype="uint32") /* ty=Tensor[(10, 8, 3), uint32] */;
  %199 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%195, dtype="uint32") /* ty=Tensor[(10, 8, 3), uint32] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %202 = cast(meta[relay.Constant][20] /* ty=Tensor[(198), int64] */, dtype="int64") /* ty=Tensor[(198), int64] */;
  %203 = cast(%var_9863, dtype="float32") /* ty=Tensor[(420), float32] */;
  %204 = reshape(%202, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), int64] */;
  %205 = reshape(%203, newshape=[5, 84]) /* ty=Tensor[(5, 84), float32] */;
  %206 = @func_1697(%204, %205) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(1, 11, 5), uint64], Tensor[(5, 84), float32], uint64, Tensor[(15, 14, 12), int32], Tensor[(1, 2520), int32]) */;
  %207 = %193.0;
  %208 = minimum(%200, %201) /* ty=Tensor[(10, 8, 3), uint32] */;
  %209 = %206.1;
  (%207, %208, %209, meta[relay.Constant][20] /* ty=Tensor[(198), int64] */, %var_9863)
}

def @func_10823() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), bool]) {
  @func_10821() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), bool]) */
}

def @func_9558(%var_9557: Tensor[(9, 8, 7), float32]) -> (Tensor[(9, 8, 7), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %216 = fn (%var_9491: Tensor[(9, 8, 7), float32]) -> (Tensor[(9, 8, 7), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
    %210 = cast(%var_9491, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
    %211 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %212 = @func_8773() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %213 = asinh(%210) /* ty=Tensor[(9, 8, 7), float32] */;
    %214 = %211.0;
    %215 = %212.0;
    (%213, %214, %215)
  };
  %216(%var_9557) /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */
}

def @func_348(%var_346: Tensor[(5, 1, 13), float32], %var_347: Tensor[(1200), float64]) -> (Tensor[(10, 12, 10), uint16], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(5, 1, 13), float32]) {
  @func_344(%var_346, %var_347) /* ty=(Tensor[(10, 12, 10), uint16], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(5, 1, 13), float32]) */
}

def @func_9711() -> (Tensor[(10, 8, 3), float64],) {
  %219 = fn () -> (Tensor[(10, 8, 3), float64],) {
    %217 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %218 = %217.0;
    (%218,)
  };
  %219() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_1677(%var_1667: Tensor[(4, 8, 13), int16]) -> (Tensor[(4, 8, 13), int16],) {
  %220 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 8, 13), int16] */, dtype="int16") /* ty=Tensor[(4, 8, 13), int16] */;
  %221 = shape_of(%var_1667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%var_1667, dtype="int16") /* ty=Tensor[(4, 8, 13), int16] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %224 = add(%222, %223) /* ty=Tensor[(4, 8, 13), int16] */;
  (%224,)
}

def @func_783(%var_781: Tensor[(13, 5), float32], %var_782: Tensor[(1200), float64]) -> (Tensor[(15, 16, 8), float64], Tensor[(1200), float64], Tensor[(13, 5), float32], Tensor[(1200), float64]) {
  %233 = fn (%var_775: Tensor[(13, 5), float32], %var_776: Tensor[(1200), float64]) -> (Tensor[(15, 16, 8), float64], Tensor[(1200), float64], Tensor[(13, 5), float32], Tensor[(1200), float64]) {
    %225 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 8), float64] */;
    %226 = cast(%var_775, dtype="float32") /* ty=Tensor[(13, 5), float32] */;
    %227 = cast(%var_776, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %228 = reshape(%226, newshape=[5, 1, 13]) /* ty=Tensor[(5, 1, 13), float32] */;
    %229 = reshape(%227, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
    %230 = @func_344(%228, %229) /* ty=(Tensor[(10, 12, 10), uint16], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(5, 1, 13), float32]) */;
    %231 = log(%225) /* ty=Tensor[(15, 16, 8), float64] */;
    %232 = %230.1;
    (%231, %232, %var_775, %var_776)
  };
  %233(%var_781, %var_782) /* ty=(Tensor[(15, 16, 8), float64], Tensor[(1200), float64], Tensor[(13, 5), float32], Tensor[(1200), float64]) */
}

def @func_4311(%var_4308: float32, %var_4309: Tensor[(1, 12), float32], %var_4310: Tensor[(900, 1), uint64]) -> (Tensor[(1, 12), float32], Tensor[(1, 1, 4), uint32], Tensor[(900, 1), uint64]) {
  %243 = fn (%var_4252: float32, %var_4253: Tensor[(1, 12), float32], %var_4284: Tensor[(900, 1), uint64]) -> (Tensor[(1, 12), float32], Tensor[(1, 1, 4), uint32], Tensor[(900, 1), uint64]) {
    %234 = cast(%var_4252, dtype="float32") /* ty=float32 */;
    %235 = cast(%var_4253, dtype="float32") /* ty=Tensor[(1, 12), float32] */;
    %236 = cast(%var_4284, dtype="uint64") /* ty=Tensor[(900, 1), uint64] */;
    %237 = cast(%var_4284, dtype="uint64") /* ty=Tensor[(900, 1), uint64] */;
    %238 = reshape(%236, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
    %239 = reshape(%237, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
    %240 = @func_1327(%238, %239) /* ty=(Tensor[(10, 9, 10), bool], Tensor[(1, 1, 4), uint32], Tensor[(2, 2), uint32]) */;
    %241 = floor_mod(%234, %235) /* ty=Tensor[(1, 12), float32] */;
    %242 = %240.1;
    (%241, %242, %var_4284)
  };
  %243(%var_4308, %var_4309, %var_4310) /* ty=(Tensor[(1, 12), float32], Tensor[(1, 1, 4), uint32], Tensor[(900, 1), uint64]) */
}

def @func_12253(%var_12251: uint64) -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], uint64, uint64) {
  @func_12250(%var_12251) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], uint64, uint64) */
}

def @func_10710(%var_10677: uint64) -> (Tensor[(10, 8, 3), bool], Tensor[(10, 12, 10), uint16], Tensor[(420), float32], uint64) {
  %244 = @func_10494() /* ty=(Tensor[(10, 8, 3), bool], Tensor[(10, 8, 3), bool]) */;
  %245 = %244.1;
  %246 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
  %247 = cast(%246, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
  %248 = shape_of(%245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%245, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %251 = cast(meta[relay.Constant][23] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %252 = cast(meta[relay.Constant][23] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %253 = cast(%var_10677, dtype="uint64") /* ty=uint64 */;
  %254 = cast(meta[relay.Constant][23] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %255 = reshape(%251, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %256 = reshape(%252, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %257 = reshape(%253, newshape=[]) /* ty=uint64 */;
  %258 = reshape(%254, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %259 = @func_1467(%255, %256, %257, %258) /* ty=(Tensor[(5, 6, 14), bool], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(1, 11, 5), uint64], Tensor[(55), uint64], Tensor[(15, 16, 8), int8], Tensor[(10, 9, 10), bool], Tensor[(900), uint64], Tensor[(5, 6, 14), uint32], Tensor[(1, 11, 5), uint64], Tensor[(5, 6, 14), bool]) */;
  %260 = less(%249, %250) /* ty=Tensor[(10, 8, 3), bool] */;
  %261 = %259.3;
  (%260, %261, meta[relay.Constant][23] /* ty=Tensor[(420), float32] */, %var_10677)
}

def @func_11017() -> (Tensor[(10, 8, 3), float64],) {
  %263 = fn () -> (Tensor[(10, 8, 3), float64],) {
    %262 = @func_8843() /* ty=Tensor[(10, 8, 3), float64] */;
    (%262,)
  };
  %263() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_5414(%var_5411: Tensor[(15, 16, 10), float32], %var_5412: float32, %var_5413: Tensor[(90, 10), uint64]) -> (Tensor[(16, 15, 3), float32], Tensor[(720), float32], Tensor[(15, 16, 10), float64], Tensor[(15, 16, 10), float32], Tensor[(1, 1, 4), uint32], float32, Tensor[(6, 2), float32], Tensor[(90, 10), uint64]) {
  %286 = fn (%var_5348: Tensor[(15, 16, 10), float32], %var_5402: float32, %var_5404: Tensor[(90, 10), uint64]) -> (Tensor[(16, 15, 3), float32], Tensor[(720), float32], Tensor[(15, 16, 10), float64], Tensor[(15, 16, 10), float32], Tensor[(1, 1, 4), uint32], float32, Tensor[(6, 2), float32], Tensor[(90, 10), uint64]) {
    %264 = cast(meta[relay.Constant][24] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
    %265 = reshape(%264, newshape=[16, 15, 3]) /* ty=Tensor[(16, 15, 3), float32] */;
    %266 = cast(%var_5348, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
    %267 = atanh(%266) /* ty=Tensor[(15, 16, 10), float32] */;
    %268 = cast(%267, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
    %269 = sin(%268) /* ty=Tensor[(15, 16, 10), float32] */;
    %270 = cast(%269, dtype="float64") /* ty=Tensor[(15, 16, 10), float64] */;
    %271 = cast(%267, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
    %272 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
    %273 = cast(%269, dtype="float32") /* ty=Tensor[(15, 16, 10), float32] */;
    %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %275 = cast(%var_5402, dtype="float32") /* ty=float32 */;
    %276 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 2), float32] */, dtype="float32") /* ty=Tensor[(6, 2), float32] */;
    %277 = cast(%var_5404, dtype="uint64") /* ty=Tensor[(90, 10), uint64] */;
    %278 = reshape(%275, newshape=[]) /* ty=float32 */;
    %279 = reshape(%276, newshape=[1, 12]) /* ty=Tensor[(1, 12), float32] */;
    %280 = reshape(%277, newshape=[900, 1]) /* ty=Tensor[(900, 1), uint64] */;
    %281 = @func_4307(%278, %279, %280) /* ty=(Tensor[(1, 12), float32], Tensor[(1, 1, 4), uint32], Tensor[(900, 1), uint64]) */;
    %282 = @func_4507(%265) /* ty=Tensor[(16, 15, 3), float32] */;
    %283 = exp(%270) /* ty=Tensor[(15, 16, 10), float64] */;
    %284 = power(%273, %274) /* ty=Tensor[(15, 16, 10), float32] */;
    %285 = %281.1;
    (%282, meta[relay.Constant][24] /* ty=Tensor[(720), float32] */, %283, %284, %285, %var_5402, meta[relay.Constant][25] /* ty=Tensor[(6, 2), float32] */, %var_5404)
  };
  %286(%var_5411, %var_5412, %var_5413) /* ty=(Tensor[(16, 15, 3), float32], Tensor[(720), float32], Tensor[(15, 16, 10), float64], Tensor[(15, 16, 10), float32], Tensor[(1, 1, 4), uint32], float32, Tensor[(6, 2), float32], Tensor[(90, 10), uint64]) */
}

def @func_3490(%var_3457: Tensor[(13, 5, 5), float64], %var_3464: Tensor[(65), float32]) -> (Tensor[(13, 5, 5), float64], Tensor[(13, 5), float32], Tensor[(65), float32], Tensor[(1, 1200), float64]) {
  %287 = cast(%var_3457, dtype="float64") /* ty=Tensor[(13, 5, 5), float64] */;
  %288 = cast(%var_3464, dtype="float32") /* ty=Tensor[(65), float32] */;
  %289 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 1200), float64] */, dtype="float64") /* ty=Tensor[(1, 1200), float64] */;
  %290 = reshape(%288, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
  %291 = reshape(%289, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
  %292 = @func_780(%290, %291) /* ty=(Tensor[(15, 16, 8), float64], Tensor[(1200), float64], Tensor[(13, 5), float32], Tensor[(1200), float64]) */;
  %293 = sinh(%287) /* ty=Tensor[(13, 5, 5), float64] */;
  %294 = %292.2;
  (%293, %294, %var_3464, meta[relay.Constant][26] /* ty=Tensor[(1, 1200), float64] */)
}

def @func_11078() -> Tensor[(10, 8, 3), float64] {
  %295 = fn () -> Tensor[(10, 8, 3), float64] {
    @func_8524() /* ty=Tensor[(10, 8, 3), float64] */
  };
  %295() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_1701(%var_1699: Tensor[(3, 11, 6), int64], %var_1700: Tensor[(5, 84), float32]) -> (Tensor[(3, 11, 6), bool], Tensor[(1, 11, 5), uint64], Tensor[(5, 84), float32], uint64, Tensor[(15, 14, 12), int32], Tensor[(1, 2520), int32]) {
  @func_1697(%var_1699, %var_1700) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(1, 11, 5), uint64], Tensor[(5, 84), float32], uint64, Tensor[(15, 14, 12), int32], Tensor[(1, 2520), int32]) */
}

def @func_8526() -> Tensor[(10, 8, 3), float64] {
  @func_8524() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_12955() -> (Tensor[(10, 8, 3), uint64], Tensor[(10, 8, 3), float64]) {
  @func_12953() /* ty=(Tensor[(10, 8, 3), uint64], Tensor[(10, 8, 3), float64]) */
}

def @func_9757() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %296 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %297 = %296.0;
  %298 = @func_8730() /* ty=Tensor[(10, 8, 3), float64] */;
  (%297, %298)
}

def @func_11764(%var_11762: Tensor[(65), float32]) -> (Tensor[(10, 8, 3), float64], Tensor[(13, 5), float32], Tensor[(325), float64], Tensor[(65), float32], Tensor[(5, 6, 14), bool], Tensor[(420, 1), float32], uint64, Tensor[(10, 8, 3), float64], Tensor[(112), float64], Tensor[(10, 8, 3), float64]) {
  @func_11761(%var_11762) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(13, 5), float32], Tensor[(325), float64], Tensor[(65), float32], Tensor[(5, 6, 14), bool], Tensor[(420, 1), float32], uint64, Tensor[(10, 8, 3), float64], Tensor[(112), float64], Tensor[(10, 8, 3), float64]) */
}

def @func_8051() -> (Tensor[(10, 8, 3), float64],) {
  %299 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 8, 3), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %300 = cos(%299) /* ty=Tensor[(10, 8, 3), float64] */;
  (%300,)
}

def @func_8698(%var_8676: Tensor[(8, 5, 8), float32]) -> (Tensor[(8, 5, 8), float32], Tensor[(8, 5, 8), float32]) {
  %301 = cast(%var_8676, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  %302 = cast(%var_8676, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  %303 = erf(%302) /* ty=Tensor[(8, 5, 8), float32] */;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(8, 5, 8), float32] */;
  %305 = cos(%301) /* ty=Tensor[(8, 5, 8), float32] */;
  %306 = cosh(%304) /* ty=Tensor[(8, 5, 8), float32] */;
  (%305, %306)
}

def @func_10992() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  @func_10990() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */
}

def @func_12590(%var_12587: Tensor[(48, 64), uint16], %var_12588: Tensor[(65), float32], %var_12589: Tensor[(1200, 1), float64]) -> (Tensor[(10, 8, 3), bool], Tensor[(12, 16, 16), bool], Tensor[(1200), float64], Tensor[(65), float32], Tensor[(48, 64), float64], Tensor[(1200, 1), float64]) {
  %325 = fn (%var_12542: Tensor[(48, 64), uint16], %var_12549: Tensor[(65), float32], %var_12550: Tensor[(1200, 1), float64]) -> (Tensor[(10, 8, 3), bool], Tensor[(12, 16, 16), bool], Tensor[(1200), float64], Tensor[(65), float32], Tensor[(48, 64), float64], Tensor[(1200, 1), float64]) {
    %307 = @func_10494() /* ty=(Tensor[(10, 8, 3), bool], Tensor[(10, 8, 3), bool]) */;
    %308 = cast(%var_12542, dtype="uint16") /* ty=Tensor[(48, 64), uint16] */;
    %309 = cast(%var_12542, dtype="uint16") /* ty=Tensor[(48, 64), uint16] */;
    %310 = reshape(%308, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), uint16] */;
    %311 = reshape(%309, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), uint16] */;
    %312 = @func_3372(%310, %311) /* ty=(Tensor[(12, 16, 16), bool],) */;
    %313 = cast(%var_12549, dtype="float32") /* ty=Tensor[(65), float32] */;
    %314 = cast(%var_12550, dtype="float64") /* ty=Tensor[(1200, 1), float64] */;
    %315 = reshape(%313, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
    %316 = reshape(%314, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
    %317 = @func_780(%315, %316) /* ty=(Tensor[(15, 16, 8), float64], Tensor[(1200), float64], Tensor[(13, 5), float32], Tensor[(1200), float64]) */;
    %318 = cast(%var_12542, dtype="float64") /* ty=Tensor[(48, 64), float64] */;
    %319 = cast(%var_12550, dtype="float64") /* ty=Tensor[(1200, 1), float64] */;
    %320 = %307.0;
    %321 = %312.0;
    %322 = %317.1;
    %323 = asin(%318) /* ty=Tensor[(48, 64), float64] */;
    %324 = tan(%319) /* ty=Tensor[(1200, 1), float64] */;
    (%320, %321, %322, %var_12549, %323, %324)
  };
  %325(%var_12587, %var_12588, %var_12589) /* ty=(Tensor[(10, 8, 3), bool], Tensor[(12, 16, 16), bool], Tensor[(1200), float64], Tensor[(65), float32], Tensor[(48, 64), float64], Tensor[(1200, 1), float64]) */
}

def @func_3664(%var_3662: Tensor[(3, 16, 3), bool], %var_3663: Tensor[(3, 16, 3), bool]) -> Tensor[(3, 16, 3), bool] {
  %330 = fn (%var_3655: Tensor[(3, 16, 3), bool], %var_3656: Tensor[(3, 16, 3), bool]) -> Tensor[(3, 16, 3), bool] {
    %326 = cast(%var_3656, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
    %327 = shape_of(%var_3655, dtype="int32") /* ty=Tensor[(3), int32] */;
    %328 = cast(%var_3655, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
    %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%328, %329) /* ty=Tensor[(3, 16, 3), bool] */
  };
  %330(%var_3662, %var_3663) /* ty=Tensor[(3, 16, 3), bool] */
}

def @func_13462() -> (Tensor[(10, 8, 3), float64],) {
  @func_13460() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_10039(%var_10037: Tensor[(900), uint64]) -> (Tensor[(10, 8, 3), float64], Tensor[(2, 3, 4), bool], Tensor[(10, 8, 3), float64], Tensor[(900), float64]) {
  @func_10036(%var_10037) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(2, 3, 4), bool], Tensor[(10, 8, 3), float64], Tensor[(900), float64]) */
}

def @func_9010() -> (Tensor[(10, 8, 3), float64],) {
  @func_9008() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_11125() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %331 = @func_10740() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %332 = @func_9710() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %333 = %331.0;
  %334 = %332.0;
  (%333, %334)
}

def @func_2131(%var_2130: Tensor[(1, 1, 16), int32]) -> (Tensor[(9, 16, 16), int32],) {
  %338 = fn (%var_2123: Tensor[(1, 1, 16), int32]) -> (Tensor[(9, 16, 16), int32],) {
    %335 = cast(%var_2123, dtype="int32") /* ty=Tensor[(1, 1, 16), int32] */;
    %336 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 16, 16), int32] */, dtype="int32") /* ty=Tensor[(9, 16, 16), int32] */;
    %337 = multiply(%335, %336) /* ty=Tensor[(9, 16, 16), int32] */;
    (%337,)
  };
  %338(%var_2130) /* ty=(Tensor[(9, 16, 16), int32],) */
}

def @func_8983() -> Tensor[(10, 8, 3), float64] {
  %339 = fn () -> Tensor[(10, 8, 3), float64] {
    @func_8730() /* ty=Tensor[(10, 8, 3), float64] */
  };
  %339() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_2806(%var_2726: Tensor[(13, 8, 2), float64], %var_2727: Tensor[(13, 8, 2), float64], %var_2756: Tensor[(420), float32]) -> (Tensor[(13, 8, 2), float64], Tensor[(1, 1, 4), float32], Tensor[(1, 11, 5), uint64], Tensor[(420), float32], Tensor[(4, 198), int16]) {
  %340 = cast(%var_2727, dtype="float64") /* ty=Tensor[(13, 8, 2), float64] */;
  %341 = shape_of(%var_2726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%var_2726, dtype="float64") /* ty=Tensor[(13, 8, 2), float64] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %344 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 1), uint32] */, dtype="uint32") /* ty=Tensor[(4, 1), uint32] */;
  %345 = reshape(%344, newshape=[1, 1, 4]) /* ty=Tensor[(1, 1, 4), uint32] */;
  %346 = @func_1105(%345) /* ty=(Tensor[(1, 1, 4), uint32],) */;
  %347 = %346.0;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(1, 1, 4), float32] */;
  %349 = cast(meta[relay.Constant][30] /* ty=Tensor[(198), int64] */, dtype="int64") /* ty=Tensor[(198), int64] */;
  %350 = cast(%var_2756, dtype="float32") /* ty=Tensor[(420), float32] */;
  %351 = reshape(%349, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), int64] */;
  %352 = reshape(%350, newshape=[5, 84]) /* ty=Tensor[(5, 84), float32] */;
  %353 = @func_1697(%351, %352) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(1, 11, 5), uint64], Tensor[(5, 84), float32], uint64, Tensor[(15, 14, 12), int32], Tensor[(1, 2520), int32]) */;
  %354 = cast(meta[relay.Constant][30] /* ty=Tensor[(198), int64] */, dtype="int16") /* ty=Tensor[(198), int16] */;
  %355 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 1), uint32] */, dtype="int16") /* ty=Tensor[(4, 1), int16] */;
  %356 = maximum(%342, %343) /* ty=Tensor[(13, 8, 2), float64] */;
  %357 = atanh(%348) /* ty=Tensor[(1, 1, 4), float32] */;
  %358 = %353.1;
  %359 = right_shift(%354, %355) /* ty=Tensor[(4, 198), int16] */;
  (%356, %357, %358, %var_2756, %359)
}

def @func_13417(%var_13395: Tensor[(12, 14, 5), float32]) -> Tensor[(12, 14, 5), bool] {
  %360 = cast(%var_13395, dtype="float32") /* ty=Tensor[(12, 14, 5), float32] */;
  %361 = asin(%360) /* ty=Tensor[(12, 14, 5), float32] */;
  %362 = cast(%361, dtype="bool") /* ty=Tensor[(12, 14, 5), bool] */;
  %363 = shape_of(%var_13395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%var_13395, dtype="bool") /* ty=Tensor[(12, 14, 5), bool] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%364, %365) /* ty=Tensor[(12, 14, 5), bool] */
}

def @func_10844() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %371 = fn () -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
    %366 = @func_10385() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %367 = %366.0;
    %368 = cast(%367, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
    %369 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
    %370 = log10(%368) /* ty=Tensor[(10, 8, 3), float64] */;
    (%369, %370)
  };
  %371() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */
}

def @func_10495() -> (Tensor[(10, 8, 3), bool], Tensor[(10, 8, 3), bool]) {
  %386 = fn () -> (Tensor[(10, 8, 3), bool], Tensor[(10, 8, 3), bool]) {
    %372 = @func_9757() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
    %373 = %372.1;
    %374 = @func_10385() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %375 = %374.0;
    %376 = cast(%375, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
    %377 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
    %378 = cast(%373, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
    %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %380 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 8, 3), float64] */, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
    %381 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
    %382 = cast(%375, dtype="bool") /* ty=Tensor[(10, 8, 3), bool] */;
    %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %384 = logical_and(%378, %379) /* ty=Tensor[(10, 8, 3), bool] */;
    %385 = not_equal(%382, %383) /* ty=Tensor[(10, 8, 3), bool] */;
    (%384, %385)
  };
  %386() /* ty=(Tensor[(10, 8, 3), bool], Tensor[(10, 8, 3), bool]) */
}

def @func_10713(%var_10711: uint64) -> (Tensor[(10, 8, 3), bool], Tensor[(10, 12, 10), uint16], Tensor[(420), float32], uint64) {
  @func_10710(%var_10711) /* ty=(Tensor[(10, 8, 3), bool], Tensor[(10, 12, 10), uint16], Tensor[(420), float32], uint64) */
}

def @func_9650() -> Tensor[(10, 8, 3), float64] {
  @func_9648() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_8225() -> (Tensor[(10, 8, 3), float64],) {
  %389 = fn () -> (Tensor[(10, 8, 3), float64],) {
    %387 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %388 = %387.0;
    (%388,)
  };
  %389() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_10587(%var_10586: Tensor[(15, 16, 3), float64]) -> (Tensor[(15, 16, 3), float32], Tensor[(3, 11, 5), float32], Tensor[(165), float32], Tensor[(15, 16, 3), float32]) {
  %406 = fn (%var_10542: Tensor[(15, 16, 3), float64]) -> (Tensor[(15, 16, 3), float32], Tensor[(3, 11, 5), float32], Tensor[(165), float32], Tensor[(15, 16, 3), float32]) {
    %390 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 16, 3), float64] */, dtype="float64") /* ty=Tensor[(15, 16, 3), float64] */;
    %391 = shape_of(%var_10542, dtype="int32") /* ty=Tensor[(3), int32] */;
    %392 = cast(%var_10542, dtype="float64") /* ty=Tensor[(15, 16, 3), float64] */;
    %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %394 = subtract(%392, %393) /* ty=Tensor[(15, 16, 3), float64] */;
    %395 = cast(%var_10542, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
    %396 = shape_of(%394, dtype="int32") /* ty=Tensor[(3), int32] */;
    %397 = cast(%394, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
    %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %399 = cast(meta[relay.Constant][33] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
    %400 = reshape(%399, newshape=[3, 11, 5]) /* ty=Tensor[(3, 11, 5), float32] */;
    %401 = @func_8365(%400) /* ty=(Tensor[(3, 11, 5), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
    %402 = cast(%var_10542, dtype="float32") /* ty=Tensor[(15, 16, 3), float32] */;
    %403 = floor_mod(%397, %398) /* ty=Tensor[(15, 16, 3), float32] */;
    %404 = %401.0;
    %405 = cos(%402) /* ty=Tensor[(15, 16, 3), float32] */;
    (%403, %404, meta[relay.Constant][33] /* ty=Tensor[(165), float32] */, %405)
  };
  %406(%var_10586) /* ty=(Tensor[(15, 16, 3), float32], Tensor[(3, 11, 5), float32], Tensor[(165), float32], Tensor[(15, 16, 3), float32]) */
}

def @func_1572(%var_1570: Tensor[(15, 14, 12), int32], %var_1571: Tensor[(15, 14, 12), int32]) -> Tensor[(15, 14, 12), int32] {
  %411 = fn (%var_1560: Tensor[(15, 14, 12), int32], %var_1561: Tensor[(15, 14, 12), int32]) -> Tensor[(15, 14, 12), int32] {
    %407 = cast(%var_1561, dtype="int32") /* ty=Tensor[(15, 14, 12), int32] */;
    %408 = shape_of(%var_1560, dtype="int32") /* ty=Tensor[(3), int32] */;
    %409 = cast(%var_1560, dtype="int32") /* ty=Tensor[(15, 14, 12), int32] */;
    %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    maximum(%409, %410) /* ty=Tensor[(15, 14, 12), int32] */
  };
  %411(%var_1570, %var_1571) /* ty=Tensor[(15, 14, 12), int32] */
}

def @func_13329() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(450, 2), uint64], Tensor[(4, 16, 7), bool], Tensor[(448), uint64]) {
  %423 = fn () -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(450, 2), uint64], Tensor[(4, 16, 7), bool], Tensor[(448), uint64]) {
    %412 = @func_8773() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %413 = %412.0;
    %414 = cast(%413, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
    %415 = cast(meta[relay.Constant][34] /* ty=Tensor[(450, 2), uint64] */, dtype="uint64") /* ty=Tensor[(450, 2), uint64] */;
    %416 = reshape(%415, newshape=[900]) /* ty=Tensor[(900), uint64] */;
    %417 = @func_10036(%416) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(2, 3, 4), bool], Tensor[(10, 8, 3), float64], Tensor[(900), float64]) */;
    %418 = cast(meta[relay.Constant][35] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
    %419 = reshape(%418, newshape=[4, 16, 7]) /* ty=Tensor[(4, 16, 7), uint64] */;
    %420 = acosh(%414) /* ty=Tensor[(10, 8, 3), float64] */;
    %421 = %417.2;
    %422 = @func_6484(%419) /* ty=Tensor[(4, 16, 7), bool] */;
    (%420, %421, meta[relay.Constant][34] /* ty=Tensor[(450, 2), uint64] */, %422, meta[relay.Constant][35] /* ty=Tensor[(448), uint64] */)
  };
  %423() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(450, 2), uint64], Tensor[(4, 16, 7), bool], Tensor[(448), uint64]) */
}

def @func_8668(%var_8656: Tensor[(10, 8, 3), float64]) -> Tensor[(10, 8, 3), uint16] {
  %424 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %425 = %424.0;
  %426 = cast(%var_8656, dtype="uint16") /* ty=Tensor[(10, 8, 3), uint16] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%425, dtype="uint16") /* ty=Tensor[(10, 8, 3), uint16] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%428, %429) /* ty=Tensor[(10, 8, 3), uint16] */
}

def @func_12207() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %430 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %431 = @func_11705() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %432 = @func_9785() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %433 = %430.0;
  %434 = %431.0;
  %435 = %432.0;
  (%433, %434, %435)
}

def @func_10990() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %436 = @func_10532() /* ty=Tensor[(10, 8, 3), float64] */;
  %437 = @func_9648() /* ty=Tensor[(10, 8, 3), float64] */;
  %438 = @func_9648() /* ty=Tensor[(10, 8, 3), float64] */;
  (%436, %437, %438)
}

def @func_8524() -> Tensor[(10, 8, 3), float64] {
  %439 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %439.0
}

def @func_12693(%var_12692: Tensor[(112), float64]) -> (Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(112), float64]) {
  %446 = fn (%var_12684: Tensor[(112), float64]) -> (Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(112), float64]) {
    %440 = @func_10843() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
    %441 = cast(%var_12684, dtype="float64") /* ty=Tensor[(112), float64] */;
    %442 = reshape(%441, newshape=[112]) /* ty=Tensor[(112), float64] */;
    %443 = @func_8275(%442) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(112), float64]) */;
    %444 = %440.0;
    %445 = %443.1;
    (%444, %445, %var_12684)
  };
  %446(%var_12692) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(112), float64]) */
}

def @func_13172(%var_13170: Tensor[(198), int64], %var_13171: Tensor[(420), float32]) -> (Tensor[(10, 8, 3), float64], Tensor[(1, 11, 5), uint64], Tensor[(420), float32], Tensor[(198), float64]) {
  %456 = fn (%var_13155: Tensor[(198), int64], %var_13156: Tensor[(420), float32]) -> (Tensor[(10, 8, 3), float64], Tensor[(1, 11, 5), uint64], Tensor[(420), float32], Tensor[(198), float64]) {
    %447 = cast(%var_13155, dtype="int64") /* ty=Tensor[(198), int64] */;
    %448 = cast(%var_13156, dtype="float32") /* ty=Tensor[(420), float32] */;
    %449 = reshape(%447, newshape=[3, 11, 6]) /* ty=Tensor[(3, 11, 6), int64] */;
    %450 = reshape(%448, newshape=[5, 84]) /* ty=Tensor[(5, 84), float32] */;
    %451 = @func_1697(%449, %450) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(1, 11, 5), uint64], Tensor[(5, 84), float32], uint64, Tensor[(15, 14, 12), int32], Tensor[(1, 2520), int32]) */;
    %452 = cast(%var_13155, dtype="float64") /* ty=Tensor[(198), float64] */;
    %453 = @func_8982() /* ty=Tensor[(10, 8, 3), float64] */;
    %454 = %451.1;
    %455 = acosh(%452) /* ty=Tensor[(198), float64] */;
    (%453, %454, %var_13156, %455)
  };
  %456(%var_13170, %var_13171) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(1, 11, 5), uint64], Tensor[(420), float32], Tensor[(198), float64]) */
}

def @func_12330() -> Tensor[(10, 8, 3), float64] {
  @func_12328() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_8283() -> Tensor[(10, 8, 3), float64] {
  %457 = fn () -> Tensor[(10, 8, 3), float64] {
    @func_8206() /* ty=Tensor[(10, 8, 3), float64] */
  };
  %457() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_8671(%var_8669: Tensor[(10, 8, 3), float64]) -> Tensor[(10, 8, 3), uint16] {
  @func_8668(%var_8669) /* ty=Tensor[(10, 8, 3), uint16] */
}

def @func_12830(%var_12829: Tensor[(900), uint64]) -> (Tensor[(10, 8, 3), float32], Tensor[(900), int64]) {
  %474 = fn (%var_12780: Tensor[(900), uint64]) -> (Tensor[(10, 8, 3), float32], Tensor[(900), int64]) {
    %458 = @func_10740() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %459 = %458.0;
    %460 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 8, 3), float64] */, dtype="float32") /* ty=Tensor[(10, 8, 3), float32] */;
    %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
    %462 = cast(%459, dtype="float32") /* ty=Tensor[(10, 8, 3), float32] */;
    %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %464 = cast(%var_12780, dtype="uint64") /* ty=Tensor[(900), uint64] */;
    %465 = reshape(%464, newshape=[900]) /* ty=Tensor[(900), uint64] */;
    %466 = @func_10036(%465) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(2, 3, 4), bool], Tensor[(10, 8, 3), float64], Tensor[(900), float64]) */;
    %467 = %466.3;
    %468 = cast(%467, dtype="int64") /* ty=Tensor[(900), int64] */;
    %469 = shape_of(%var_12780, dtype="int32") /* ty=Tensor[(1), int32] */;
    %470 = cast(%var_12780, dtype="int64") /* ty=Tensor[(900), int64] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?), int64] */;
    %472 = divide(%462, %463) /* ty=Tensor[(10, 8, 3), float32] */;
    %473 = bitwise_and(%470, %471) /* ty=Tensor[(900), int64] */;
    (%472, %473)
  };
  %474(%var_12829) /* ty=(Tensor[(10, 8, 3), float32], Tensor[(900), int64]) */
}

def @func_11865(%var_11863: Tensor[(90, 10), uint64], %var_11864: Tensor[(65), float32]) -> (Tensor[(10, 8, 3), float64], Tensor[(900), float64], Tensor[(90, 10), uint64], Tensor[(10, 8, 3), float64], Tensor[(65), float32], Tensor[(65), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %490 = fn (%var_11838: Tensor[(90, 10), uint64], %var_11848: Tensor[(65), float32]) -> (Tensor[(10, 8, 3), float64], Tensor[(900), float64], Tensor[(90, 10), uint64], Tensor[(10, 8, 3), float64], Tensor[(65), float32], Tensor[(65), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
    %475 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %476 = cast(%var_11838, dtype="uint64") /* ty=Tensor[(90, 10), uint64] */;
    %477 = reshape(%476, newshape=[900]) /* ty=Tensor[(900), uint64] */;
    %478 = @func_10036(%477) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(2, 3, 4), bool], Tensor[(10, 8, 3), float64], Tensor[(900), float64]) */;
    %479 = cast(%var_11848, dtype="float32") /* ty=Tensor[(65), float32] */;
    %480 = reshape(%479, newshape=[65]) /* ty=Tensor[(65), float32] */;
    %481 = @func_11761(%480) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(13, 5), float32], Tensor[(325), float64], Tensor[(65), float32], Tensor[(5, 6, 14), bool], Tensor[(420, 1), float32], uint64, Tensor[(10, 8, 3), float64], Tensor[(112), float64], Tensor[(10, 8, 3), float64]) */;
    %482 = @func_10740() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %483 = @func_9177() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %484 = %475.0;
    %485 = %478.3;
    %486 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
    %487 = %481.3;
    %488 = %482.0;
    %489 = %483.0;
    (%484, %485, %var_11838, %486, %487, %var_11848, %488, %489)
  };
  %490(%var_11863, %var_11864) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(900), float64], Tensor[(90, 10), uint64], Tensor[(10, 8, 3), float64], Tensor[(65), float32], Tensor[(65), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */
}

def @main(%var_13912: Tensor[(13, 9, 6), int32], %var_13913: Tensor[(13, 9, 6), int32]) -> Tensor[(13, 9, 6), int32] {
  %491 = cast(%var_13913, dtype="int32") /* ty=Tensor[(13, 9, 6), int32] */;
  %492 = shape_of(%var_13912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%var_13912, dtype="int32") /* ty=Tensor[(13, 9, 6), int32] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  multiply(%493, %494) /* ty=Tensor[(13, 9, 6), int32] */
}

def @func_13103() -> Tensor[(10, 8, 3), int32] {
  %495 = @func_11918() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(12, 16, 16), bool], Tensor[(3072), uint16], uint64, uint64) */;
  %496 = %495.0;
  %497 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %498 = %497.0;
  %499 = cast(%498, dtype="int32") /* ty=Tensor[(10, 8, 3), int32] */;
  %500 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%496, dtype="int32") /* ty=Tensor[(10, 8, 3), int32] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%501, %502) /* ty=Tensor[(10, 8, 3), int32] */
}

def @func_11322() -> (Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %509 = fn () -> (Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
    %503 = @func_10320() /* ty=(Tensor[(10, 8, 3), float32], Tensor[(1, 8, 14), float64], Tensor[(10, 8, 3), float64]) */;
    %504 = @func_10320() /* ty=(Tensor[(10, 8, 3), float32], Tensor[(1, 8, 14), float64], Tensor[(10, 8, 3), float64]) */;
    %505 = @func_9616() /* ty=Tensor[(10, 8, 3), float64] */;
    %506 = @func_11260() /* ty=Tensor[(1, 8, 14), float64] */;
    %507 = %503.2;
    %508 = %504.2;
    (%505, %506, %507, %508)
  };
  %509() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */
}

def @func_12504(%var_12496: Tensor[(14, 10, 13), float32]) -> Tensor[(14, 10, 13), uint32] {
  %510 = cast(-1.97374f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %511 = cast(%var_12496, dtype="float32") /* ty=Tensor[(14, 10, 13), float32] */;
  %512 = power(%510, %511) /* ty=Tensor[(14, 10, 13), float32] */;
  %513 = cast(%var_12496, dtype="uint32") /* ty=Tensor[(14, 10, 13), uint32] */;
  %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%512, dtype="uint32") /* ty=Tensor[(14, 10, 13), uint32] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%515, %516) /* ty=Tensor[(14, 10, 13), uint32] */
}

def @func_297(%var_273: Tensor[(10, 12, 10), float64], %var_274: Tensor[(10, 12, 10), float64]) -> (Tensor[(10, 12, 10), uint16],) {
  %517 = cast(%var_274, dtype="float64") /* ty=Tensor[(10, 12, 10), float64] */;
  %518 = shape_of(%var_273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%var_273, dtype="float64") /* ty=Tensor[(10, 12, 10), float64] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %521 = power(%519, %520) /* ty=Tensor[(10, 12, 10), float64] */;
  %522 = cast(%521, dtype="uint16") /* ty=Tensor[(10, 12, 10), uint16] */;
  %523 = shape_of(%var_273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%var_273, dtype="uint16") /* ty=Tensor[(10, 12, 10), uint16] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %526 = bitwise_or(%524, %525) /* ty=Tensor[(10, 12, 10), uint16] */;
  (%526,)
}

def @func_13543() -> Tensor[(10, 8, 3), float64] {
  %527 = @func_12953() /* ty=(Tensor[(10, 8, 3), uint64], Tensor[(10, 8, 3), float64]) */;
  %527.1
}

def @func_13872(%var_13871: Tensor[(13, 15, 8), float64]) -> (Tensor[(13, 15, 8), float64],) {
  %530 = fn (%var_13863: Tensor[(13, 15, 8), float64]) -> (Tensor[(13, 15, 8), float64],) {
    %528 = cast(%var_13863, dtype="float64") /* ty=Tensor[(13, 15, 8), float64] */;
    %529 = asinh(%528) /* ty=Tensor[(13, 15, 8), float64] */;
    (%529,)
  };
  %530(%var_13871) /* ty=(Tensor[(13, 15, 8), float64],) */
}

def @func_11410(%var_11408: Tensor[(2520), int32]) -> (Tensor[(10, 8, 3), float64], Tensor[(15, 14, 12), int32], Tensor[(2520), int32]) {
  @func_11407(%var_11408) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(15, 14, 12), int32], Tensor[(2520), int32]) */
}

def @func_11706() -> (Tensor[(10, 8, 3), float64],) {
  %532 = fn () -> (Tensor[(10, 8, 3), float64],) {
    %531 = @func_8982() /* ty=Tensor[(10, 8, 3), float64] */;
    (%531,)
  };
  %532() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_344(%var_307: Tensor[(5, 1, 13), float32], %var_313: Tensor[(1200), float64]) -> (Tensor[(10, 12, 10), uint16], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(5, 1, 13), float32]) {
  %533 = cast(%var_313, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %534 = cast(%var_313, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %535 = reshape(%533, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %536 = reshape(%534, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %537 = @func_297(%535, %536) /* ty=(Tensor[(10, 12, 10), uint16],) */;
  %538 = cast(%var_313, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %539 = %537.0;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(10, 12, 10), float64] */;
  %541 = reshape(%538, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %542 = reshape(%540, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %543 = @func_297(%541, %542) /* ty=(Tensor[(10, 12, 10), uint16],) */;
  %544 = cast(%var_307, dtype="float32") /* ty=Tensor[(5, 1, 13), float32] */;
  %545 = tan(%544) /* ty=Tensor[(5, 1, 13), float32] */;
  %546 = cast(%545, dtype="float32") /* ty=Tensor[(5, 1, 13), float32] */;
  %547 = acosh(%546) /* ty=Tensor[(5, 1, 13), float32] */;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(5, 1, 13), float32] */;
  %549 = %543.0;
  %550 = sinh(%548) /* ty=Tensor[(5, 1, 13), float32] */;
  (%539, %var_313, %549, %550)
}

def @func_9358() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %551 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %552 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %553 = @func_9008() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %554 = %553.0;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(10, 8, 3), float32] */;
  %556 = acos(%555) /* ty=Tensor[(10, 8, 3), float32] */;
  %557 = cast(%556, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %558 = %551.0;
  %559 = %552.0;
  %560 = sin(%557) /* ty=Tensor[(10, 8, 3), float64] */;
  (%558, %559, %560)
}

def @func_1680(%var_1678: Tensor[(4, 8, 13), int16]) -> (Tensor[(4, 8, 13), int16],) {
  @func_1677(%var_1678) /* ty=(Tensor[(4, 8, 13), int16],) */
}

def @func_9618() -> Tensor[(10, 8, 3), float64] {
  @func_9616() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_8135(%var_8133: Tensor[(900), uint64], %var_8134: Tensor[(10, 8, 3), float64]) -> (Tensor[(1, 1, 4), uint32], Tensor[(900), uint64], Tensor[(10, 8, 3), float64]) {
  @func_8131(%var_8133, %var_8134) /* ty=(Tensor[(1, 1, 4), uint32], Tensor[(900), uint64], Tensor[(10, 8, 3), float64]) */
}

def @func_1697(%var_1683: Tensor[(3, 11, 6), int64], %var_1688: Tensor[(5, 84), float32]) -> (Tensor[(3, 11, 6), bool], Tensor[(1, 11, 5), uint64], Tensor[(5, 84), float32], uint64, Tensor[(15, 14, 12), int32], Tensor[(1, 2520), int32]) {
  %561 = cast(%var_1683, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
  %562 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(3, 11, 6), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 11, 6), int64] */, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %565 = cast(%var_1688, dtype="float32") /* ty=Tensor[(5, 84), float32] */;
  %566 = cast(%var_1688, dtype="float32") /* ty=Tensor[(5, 84), float32] */;
  %567 = cast(meta[relay.Constant][38] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %568 = cast(%var_1688, dtype="float32") /* ty=Tensor[(5, 84), float32] */;
  %569 = reshape(%565, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %570 = reshape(%566, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %571 = reshape(%567, newshape=[]) /* ty=uint64 */;
  %572 = reshape(%568, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %573 = @func_1467(%569, %570, %571, %572) /* ty=(Tensor[(5, 6, 14), bool], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(1, 11, 5), uint64], Tensor[(55), uint64], Tensor[(15, 16, 8), int8], Tensor[(10, 9, 10), bool], Tensor[(900), uint64], Tensor[(5, 6, 14), uint32], Tensor[(1, 11, 5), uint64], Tensor[(5, 6, 14), bool]) */;
  %574 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 2520), int32] */, dtype="int32") /* ty=Tensor[(1, 2520), int32] */;
  %575 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 2520), int32] */, dtype="int32") /* ty=Tensor[(1, 2520), int32] */;
  %576 = reshape(%574, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
  %577 = reshape(%575, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
  %578 = greater(%563, %564) /* ty=Tensor[(3, 11, 6), bool] */;
  %579 = %573.10;
  %580 = @func_1569(%576, %577) /* ty=Tensor[(15, 14, 12), int32] */;
  (%578, %579, %var_1688, meta[relay.Constant][38] /* ty=uint64 */, %580, meta[relay.Constant][39] /* ty=Tensor[(1, 2520), int32] */)
}

def @func_10102() -> (Tensor[(10, 8, 3), float64],) {
  %581 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %582 = %581.0;
  (%582,)
}

def @func_8278(%var_8276: Tensor[(112), float64]) -> (Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(112), float64]) {
  @func_8275(%var_8276) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(112), float64]) */
}

def @func_9869(%var_9867: Tensor[(420), float32]) -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), uint32], Tensor[(1, 11, 5), uint64], Tensor[(198), int64], Tensor[(420), float32]) {
  @func_9866(%var_9867) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), uint32], Tensor[(1, 11, 5), uint64], Tensor[(198), int64], Tensor[(420), float32]) */
}

def @func_13895(%var_13893: Tensor[(4, 2, 8), int8], %var_13894: Tensor[(4, 2, 8), int8]) -> (Tensor[(4, 2, 8), bool], Tensor[(10, 8, 3), float64]) {
  %590 = fn (%var_13876: Tensor[(4, 2, 8), int8], %var_13877: Tensor[(4, 2, 8), int8]) -> (Tensor[(4, 2, 8), bool], Tensor[(10, 8, 3), float64]) {
    %583 = cast(%var_13877, dtype="bool") /* ty=Tensor[(4, 2, 8), bool] */;
    %584 = shape_of(%var_13876, dtype="int32") /* ty=Tensor[(3), int32] */;
    %585 = cast(%var_13876, dtype="bool") /* ty=Tensor[(4, 2, 8), bool] */;
    %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %587 = @func_10740() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %588 = greater(%585, %586) /* ty=Tensor[(4, 2, 8), bool] */;
    %589 = %587.0;
    (%588, %589)
  };
  %590(%var_13893, %var_13894) /* ty=(Tensor[(4, 2, 8), bool], Tensor[(10, 8, 3), float64]) */
}

def @func_8773() -> (Tensor[(10, 8, 3), float64],) {
  %591 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
  (%591,)
}

def @func_3494(%var_3492: Tensor[(13, 5, 5), float64], %var_3493: Tensor[(65), float32]) -> (Tensor[(13, 5, 5), float64], Tensor[(13, 5), float32], Tensor[(65), float32], Tensor[(1, 1200), float64]) {
  @func_3490(%var_3492, %var_3493) /* ty=(Tensor[(13, 5, 5), float64], Tensor[(13, 5), float32], Tensor[(65), float32], Tensor[(1, 1200), float64]) */
}

def @func_9970(%var_9967: Tensor[(11, 3, 3), float64], %var_9968: Tensor[(11, 3, 3), float64], %var_9969: Tensor[(900), uint64]) -> (Tensor[(11, 3, 3), float64], Tensor[(1, 1, 4), uint32], Tensor[(2400), float32], float32, Tensor[(900), uint64], Tensor[(12, 16, 16), bool], Tensor[(4, 768), uint16]) {
  %611 = fn (%var_9945: Tensor[(11, 3, 3), float64], %var_9946: Tensor[(11, 3, 3), float64], %var_9953: Tensor[(900), uint64]) -> (Tensor[(11, 3, 3), float64], Tensor[(1, 1, 4), uint32], Tensor[(2400), float32], float32, Tensor[(900), uint64], Tensor[(12, 16, 16), bool], Tensor[(4, 768), uint16]) {
    %592 = cast(%var_9946, dtype="float64") /* ty=Tensor[(11, 3, 3), float64] */;
    %593 = shape_of(%var_9945, dtype="int32") /* ty=Tensor[(3), int32] */;
    %594 = cast(%var_9945, dtype="float64") /* ty=Tensor[(11, 3, 3), float64] */;
    %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %596 = cast(meta[relay.Constant][40] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %597 = cast(2.55246f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %598 = cast(%var_9953, dtype="uint64") /* ty=Tensor[(900), uint64] */;
    %599 = reshape(%596, newshape=[15, 16, 10]) /* ty=Tensor[(15, 16, 10), float32] */;
    %600 = reshape(%597, newshape=[]) /* ty=float32 */;
    %601 = reshape(%598, newshape=[90, 10]) /* ty=Tensor[(90, 10), uint64] */;
    %602 = @func_5410(%599, %600, %601) /* ty=(Tensor[(16, 15, 3), float32], Tensor[(720), float32], Tensor[(15, 16, 10), float64], Tensor[(15, 16, 10), float32], Tensor[(1, 1, 4), uint32], float32, Tensor[(6, 2), float32], Tensor[(90, 10), uint64]) */;
    %603 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 768), uint16] */, dtype="uint16") /* ty=Tensor[(4, 768), uint16] */;
    %604 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 768), uint16] */, dtype="uint16") /* ty=Tensor[(4, 768), uint16] */;
    %605 = reshape(%603, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), uint16] */;
    %606 = reshape(%604, newshape=[12, 16, 16]) /* ty=Tensor[(12, 16, 16), uint16] */;
    %607 = @func_3372(%605, %606) /* ty=(Tensor[(12, 16, 16), bool],) */;
    %608 = power(%594, %595) /* ty=Tensor[(11, 3, 3), float64] */;
    %609 = %602.4;
    %610 = %607.0;
    (%608, %609, meta[relay.Constant][40] /* ty=Tensor[(2400), float32] */, 2.55246f /* ty=float32 */, %var_9953, %610, meta[relay.Constant][41] /* ty=Tensor[(4, 768), uint16] */)
  };
  %611(%var_9967, %var_9968, %var_9969) /* ty=(Tensor[(11, 3, 3), float64], Tensor[(1, 1, 4), uint32], Tensor[(2400), float32], float32, Tensor[(900), uint64], Tensor[(12, 16, 16), bool], Tensor[(4, 768), uint16]) */
}

def @func_10104() -> (Tensor[(10, 8, 3), float64],) {
  @func_10102() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_13105() -> Tensor[(10, 8, 3), int32] {
  @func_13103() /* ty=Tensor[(10, 8, 3), int32] */
}

def @func_9786() -> (Tensor[(10, 8, 3), float64],) {
  %614 = fn () -> (Tensor[(10, 8, 3), float64],) {
    %612 = @func_9757() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
    %613 = %612.1;
    (%613,)
  };
  %614() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_13460() -> (Tensor[(10, 8, 3), float64],) {
  %615 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %616 = %615.0;
  (%616,)
}

def @func_13120() -> (Tensor[(10, 8, 3), int32],) {
  %617 = @func_13103() /* ty=Tensor[(10, 8, 3), int32] */;
  (%617,)
}

def @func_10401() -> Tensor[(10, 8, 3), float64] {
  %619 = fn () -> Tensor[(10, 8, 3), float64] {
    %618 = @func_9785() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %618.0
  };
  %619() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_3393(%var_3392: Tensor[(15, 2, 6), float64]) -> (Tensor[(15, 2, 6), float64], Tensor[(9, 16, 16), int32], Tensor[(16), int32]) {
  %626 = fn (%var_3380: Tensor[(15, 2, 6), float64]) -> (Tensor[(15, 2, 6), float64], Tensor[(9, 16, 16), int32], Tensor[(16), int32]) {
    %620 = cast(%var_3380, dtype="float64") /* ty=Tensor[(15, 2, 6), float64] */;
    %621 = cast(meta[relay.Constant][42] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
    %622 = reshape(%621, newshape=[1, 1, 16]) /* ty=Tensor[(1, 1, 16), int32] */;
    %623 = @func_2129(%622) /* ty=(Tensor[(9, 16, 16), int32],) */;
    %624 = cosh(%620) /* ty=Tensor[(15, 2, 6), float64] */;
    %625 = %623.0;
    (%624, %625, meta[relay.Constant][42] /* ty=Tensor[(16), int32] */)
  };
  %626(%var_3392) /* ty=(Tensor[(15, 2, 6), float64], Tensor[(9, 16, 16), int32], Tensor[(16), int32]) */
}

def @func_8844() -> Tensor[(10, 8, 3), float64] {
  %628 = fn () -> Tensor[(10, 8, 3), float64] {
    %627 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %627.0
  };
  %628() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_1330(%var_1328: Tensor[(10, 9, 10), uint64], %var_1329: Tensor[(10, 9, 10), uint64]) -> (Tensor[(10, 9, 10), bool], Tensor[(1, 1, 4), uint32], Tensor[(2, 2), uint32]) {
  %638 = fn (%var_1304: Tensor[(10, 9, 10), uint64], %var_1305: Tensor[(10, 9, 10), uint64]) -> (Tensor[(10, 9, 10), bool], Tensor[(1, 1, 4), uint32], Tensor[(2, 2), uint32]) {
    %629 = cast(%var_1305, dtype="bool") /* ty=Tensor[(10, 9, 10), bool] */;
    %630 = shape_of(%var_1304, dtype="int32") /* ty=Tensor[(3), int32] */;
    %631 = cast(%var_1304, dtype="bool") /* ty=Tensor[(10, 9, 10), bool] */;
    %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %633 = cast(meta[relay.Constant][43] /* ty=Tensor[(2, 2), uint32] */, dtype="uint32") /* ty=Tensor[(2, 2), uint32] */;
    %634 = reshape(%633, newshape=[1, 1, 4]) /* ty=Tensor[(1, 1, 4), uint32] */;
    %635 = @func_1105(%634) /* ty=(Tensor[(1, 1, 4), uint32],) */;
    %636 = less_equal(%631, %632) /* ty=Tensor[(10, 9, 10), bool] */;
    %637 = %635.0;
    (%636, %637, meta[relay.Constant][43] /* ty=Tensor[(2, 2), uint32] */)
  };
  %638(%var_1328, %var_1329) /* ty=(Tensor[(10, 9, 10), bool], Tensor[(1, 1, 4), uint32], Tensor[(2, 2), uint32]) */
}

def @func_9177() -> (Tensor[(10, 8, 3), float64],) {
  %639 = @func_8206() /* ty=Tensor[(10, 8, 3), float64] */;
  (%639,)
}

def @func_9648() -> Tensor[(10, 8, 3), float64] {
  %640 = @func_9177() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %640.0
}

def @func_10887() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %645 = fn () -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
    %641 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %642 = @func_10385() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %643 = %641.0;
    %644 = %642.0;
    (%643, %644)
  };
  %645() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */
}

def @func_11548() -> Tensor[(10, 8, 3), float64] {
  %647 = fn () -> Tensor[(10, 8, 3), float64] {
    %646 = @func_11016() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %646.0
  };
  %647() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_12209() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  @func_12207() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */
}

def @func_11407(%var_11395: Tensor[(2520), int32]) -> (Tensor[(10, 8, 3), float64], Tensor[(15, 14, 12), int32], Tensor[(2520), int32]) {
  %648 = cast(%var_11395, dtype="int32") /* ty=Tensor[(2520), int32] */;
  %649 = cast(%var_11395, dtype="int32") /* ty=Tensor[(2520), int32] */;
  %650 = reshape(%648, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
  %651 = reshape(%649, newshape=[15, 14, 12]) /* ty=Tensor[(15, 14, 12), int32] */;
  %652 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
  %653 = @func_1569(%650, %651) /* ty=Tensor[(15, 14, 12), int32] */;
  (%652, %653, %var_11395)
}

def @func_10276(%var_10110: float32, %var_10111: Tensor[(10, 1, 8), float32], %var_10117: Tensor[(12), float32], %var_10161: Tensor[(300, 4), float64], %var_10272: Tensor[(420), float32]) -> (Tensor[(10, 1, 8), bool], Tensor[(1, 1, 4), uint32], Tensor[(12), float32], Tensor[(90, 10), uint64], Tensor[(10, 1, 8), uint64], Tensor[(300, 4), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(4, 14, 9), bool], Tensor[(10, ?, 8), bool], Tensor[(3, 16, 3), bool], Tensor[(144, 1), bool], Tensor[(10, 1, 8), float32], Tensor[(900), uint64], Tensor[(420), float32]) {
  %654 = cast(%var_10110, dtype="bool") /* ty=bool */;
  %655 = cast(%var_10111, dtype="bool") /* ty=Tensor[(10, 1, 8), bool] */;
  %656 = cast(%var_10110, dtype="float32") /* ty=float32 */;
  %657 = cast(%var_10117, dtype="float32") /* ty=Tensor[(12), float32] */;
  %658 = cast(meta[relay.Constant][44] /* ty=Tensor[(90, 10), uint64] */, dtype="uint64") /* ty=Tensor[(90, 10), uint64] */;
  %659 = reshape(%656, newshape=[]) /* ty=float32 */;
  %660 = reshape(%657, newshape=[1, 12]) /* ty=Tensor[(1, 12), float32] */;
  %661 = reshape(%658, newshape=[900, 1]) /* ty=Tensor[(900, 1), uint64] */;
  %662 = @func_4307(%659, %660, %661) /* ty=(Tensor[(1, 12), float32], Tensor[(1, 1, 4), uint32], Tensor[(900, 1), uint64]) */;
  %663 = cast(%var_10111, dtype="uint64") /* ty=Tensor[(10, 1, 8), uint64] */;
  %664 = cast(%var_10110, dtype="uint64") /* ty=uint64 */;
  %665 = cast(%var_10161, dtype="float64") /* ty=Tensor[(300, 4), float64] */;
  %666 = reshape(%665, newshape=[12, 100]) /* ty=Tensor[(12, 100), float64] */;
  %667 = @func_5050(%666) /* ty=(Tensor[(4, 14, 9), float32], Tensor[(10, 12, 10), uint16], Tensor[(12, 100), float64]) */;
  %668 = %667.0;
  %669 = cast(%668, dtype="float32") /* ty=Tensor[(4, 14, 9), float32] */;
  %670 = reshape(%669, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), float32] */;
  %671 = @func_9556(%670) /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %672 = cast(%668, dtype="bool") /* ty=Tensor[(4, 14, 9), bool] */;
  %673 = cast(%var_10110, dtype="bool") /* ty=bool */;
  %674 = cast(%var_10111, dtype="float32") /* ty=Tensor[(10, 1, 8), float32] */;
  %675 = sqrt(%674) /* ty=Tensor[(10, 1, 8), float32] */;
  %676 = cast(%var_10111, dtype="bool") /* ty=Tensor[(10, 1, 8), bool] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="bool") /* ty=Tensor[(10, 1, 8), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %680 = cast(meta[relay.Constant][45] /* ty=Tensor[(144, 1), bool] */, dtype="bool") /* ty=Tensor[(144, 1), bool] */;
  %681 = cast(meta[relay.Constant][45] /* ty=Tensor[(144, 1), bool] */, dtype="bool") /* ty=Tensor[(144, 1), bool] */;
  %682 = reshape(%680, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), bool] */;
  %683 = reshape(%681, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), bool] */;
  %684 = cast(%675, dtype="float32") /* ty=Tensor[(10, 1, 8), float32] */;
  %685 = cast(%var_10272, dtype="float32") /* ty=Tensor[(420), float32] */;
  %686 = cast(%var_10272, dtype="float32") /* ty=Tensor[(420), float32] */;
  %687 = cast(%var_10110, dtype="uint64") /* ty=uint64 */;
  %688 = cast(%var_10272, dtype="float32") /* ty=Tensor[(420), float32] */;
  %689 = reshape(%685, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %690 = reshape(%686, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %691 = reshape(%687, newshape=[]) /* ty=uint64 */;
  %692 = reshape(%688, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %693 = @func_1467(%689, %690, %691, %692) /* ty=(Tensor[(5, 6, 14), bool], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(1, 11, 5), uint64], Tensor[(55), uint64], Tensor[(15, 16, 8), int8], Tensor[(10, 9, 10), bool], Tensor[(900), uint64], Tensor[(5, 6, 14), uint32], Tensor[(1, 11, 5), uint64], Tensor[(5, 6, 14), bool]) */;
  %694 = greater_equal(%654, %655) /* ty=Tensor[(10, 1, 8), bool] */;
  %695 = %662.1;
  %696 = maximum(%663, %664) /* ty=Tensor[(10, 1, 8), uint64] */;
  %697 = %671.1;
  %698 = @func_8206() /* ty=Tensor[(10, 8, 3), float64] */;
  %699 = not_equal(%672, %673) /* ty=Tensor[(4, 14, 9), bool] */;
  %700 = not_equal(%678, %679) /* ty=Tensor[(10, ?, 8), bool] */;
  %701 = @func_3661(%682, %683) /* ty=Tensor[(3, 16, 3), bool] */;
  %702 = sinh(%684) /* ty=Tensor[(10, 1, 8), float32] */;
  %703 = %693.8;
  (%694, %695, %var_10117, meta[relay.Constant][44] /* ty=Tensor[(90, 10), uint64] */, %696, %var_10161, %697, %698, %699, %700, %701, meta[relay.Constant][45] /* ty=Tensor[(144, 1), bool] */, %702, %703, %var_10272)
}

def @func_12507(%var_12505: Tensor[(14, 10, 13), float32]) -> Tensor[(14, 10, 13), uint32] {
  @func_12504(%var_12505) /* ty=Tensor[(14, 10, 13), uint32] */
}

def @func_13806() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %706 = fn () -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
    %704 = @func_8524() /* ty=Tensor[(10, 8, 3), float64] */;
    %705 = @func_12328() /* ty=Tensor[(10, 8, 3), float64] */;
    (%704, %705)
  };
  %706() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */
}

def @func_2811(%var_2808: Tensor[(13, 8, 2), float64], %var_2809: Tensor[(13, 8, 2), float64], %var_2810: Tensor[(420), float32]) -> (Tensor[(13, 8, 2), float64], Tensor[(1, 1, 4), float32], Tensor[(1, 11, 5), uint64], Tensor[(420), float32], Tensor[(4, 198), int16]) {
  @func_2806(%var_2808, %var_2809, %var_2810) /* ty=(Tensor[(13, 8, 2), float64], Tensor[(1, 1, 4), float32], Tensor[(1, 11, 5), uint64], Tensor[(420), float32], Tensor[(4, 198), int16]) */
}

def @func_8598(%var_8596: Tensor[(1, 900), uint64], %var_8597: Tensor[(1200), float64]) -> (Tensor[(10, 8, 3), float64], Tensor[(2, 2), uint32], Tensor[(1, 900), uint64], Tensor[(65), float32], Tensor[(2520), int32], Tensor[(10, 12, 10), uint16], Tensor[(1200), float64]) {
  %724 = fn (%var_8573: Tensor[(1, 900), uint64], %var_8592: Tensor[(1200), float64]) -> (Tensor[(10, 8, 3), float64], Tensor[(2, 2), uint32], Tensor[(1, 900), uint64], Tensor[(65), float32], Tensor[(2520), int32], Tensor[(10, 12, 10), uint16], Tensor[(1200), float64]) {
    %707 = cast(%var_8573, dtype="uint64") /* ty=Tensor[(1, 900), uint64] */;
    %708 = cast(%var_8573, dtype="uint64") /* ty=Tensor[(1, 900), uint64] */;
    %709 = reshape(%707, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
    %710 = reshape(%708, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
    %711 = @func_1327(%709, %710) /* ty=(Tensor[(10, 9, 10), bool], Tensor[(1, 1, 4), uint32], Tensor[(2, 2), uint32]) */;
    %712 = cast(meta[relay.Constant][46] /* ty=Tensor[(2520), int32] */, dtype="int32") /* ty=Tensor[(2520), int32] */;
    %713 = reshape(%712, newshape=[2520, 1]) /* ty=Tensor[(2520, 1), int32] */;
    %714 = @func_7206(%713) /* ty=(Tensor[(1, 5, 6), float32], Tensor[(15, 14, 12), int32], Tensor[(2520, 1), int32], Tensor[(1200), float64], Tensor[(65), float32], Tensor[(12, 100), float64]) */;
    %715 = cast(%var_8592, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %716 = cast(%var_8592, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %717 = reshape(%715, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
    %718 = reshape(%716, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
    %719 = @func_297(%717, %718) /* ty=(Tensor[(10, 12, 10), uint16],) */;
    %720 = @func_8524() /* ty=Tensor[(10, 8, 3), float64] */;
    %721 = %711.2;
    %722 = %714.4;
    %723 = %719.0;
    (%720, %721, %var_8573, %722, meta[relay.Constant][46] /* ty=Tensor[(2520), int32] */, %723, %var_8592)
  };
  %724(%var_8596, %var_8597) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(2, 2), uint32], Tensor[(1, 900), uint64], Tensor[(65), float32], Tensor[(2520), int32], Tensor[(10, 12, 10), uint16], Tensor[(1200), float64]) */
}

def @func_6277(%var_6275: Tensor[(14, 3, 3), uint64], %var_6276: Tensor[(900), uint64]) -> (Tensor[(14, 3, 3), bool], Tensor[(90, 10), uint64], Tensor[(2400), float32], float32, Tensor[(900), uint64]) {
  %741 = fn (%var_6238: Tensor[(14, 3, 3), uint64], %var_6260: Tensor[(900), uint64]) -> (Tensor[(14, 3, 3), bool], Tensor[(90, 10), uint64], Tensor[(2400), float32], float32, Tensor[(900), uint64]) {
    %725 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 1, 3), uint64] */, dtype="bool") /* ty=Tensor[(14, 1, 3), bool] */;
    %726 = cast(%var_6238, dtype="bool") /* ty=Tensor[(14, 3, 3), bool] */;
    %727 = greater_equal(%725, %726) /* ty=Tensor[(14, 3, 3), bool] */;
    %728 = cast(%var_6238, dtype="bool") /* ty=Tensor[(14, 3, 3), bool] */;
    %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
    %730 = cast(%727, dtype="bool") /* ty=Tensor[(14, 3, 3), bool] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %732 = cast(meta[relay.Constant][48] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
    %733 = cast(-7.69351f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %734 = cast(%var_6260, dtype="uint64") /* ty=Tensor[(900), uint64] */;
    %735 = reshape(%732, newshape=[15, 16, 10]) /* ty=Tensor[(15, 16, 10), float32] */;
    %736 = reshape(%733, newshape=[]) /* ty=float32 */;
    %737 = reshape(%734, newshape=[90, 10]) /* ty=Tensor[(90, 10), uint64] */;
    %738 = @func_5410(%735, %736, %737) /* ty=(Tensor[(16, 15, 3), float32], Tensor[(720), float32], Tensor[(15, 16, 10), float64], Tensor[(15, 16, 10), float32], Tensor[(1, 1, 4), uint32], float32, Tensor[(6, 2), float32], Tensor[(90, 10), uint64]) */;
    %739 = greater(%730, %731) /* ty=Tensor[(14, 3, 3), bool] */;
    %740 = %738.7;
    (%739, %740, meta[relay.Constant][48] /* ty=Tensor[(2400), float32] */, -7.69351f /* ty=float32 */, %var_6260)
  };
  %741(%var_6275, %var_6276) /* ty=(Tensor[(14, 3, 3), bool], Tensor[(90, 10), uint64], Tensor[(2400), float32], float32, Tensor[(900), uint64]) */
}

def @func_11262() -> Tensor[(1, 8, 14), float64] {
  @func_11260() /* ty=Tensor[(1, 8, 14), float64] */
}

def @func_13437() -> Tensor[(10, 8, 3), float64] {
  %742 = fn () -> Tensor[(10, 8, 3), float64] {
    @func_9648() /* ty=Tensor[(10, 8, 3), float64] */
  };
  %742() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_301(%var_299: Tensor[(10, 12, 10), float64], %var_300: Tensor[(10, 12, 10), float64]) -> (Tensor[(10, 12, 10), uint16],) {
  @func_297(%var_299, %var_300) /* ty=(Tensor[(10, 12, 10), uint16],) */
}

def @func_8731() -> Tensor[(10, 8, 3), float64] {
  %745 = fn () -> Tensor[(10, 8, 3), float64] {
    %743 = @func_8206() /* ty=Tensor[(10, 8, 3), float64] */;
    %744 = cast(%743, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
    rsqrt(%744) /* ty=Tensor[(10, 8, 3), float64] */
  };
  %745() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_9616() -> Tensor[(10, 8, 3), float64] {
  @func_8524() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_9759() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  @func_9757() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */
}

def @func_13066() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), uint16]) {
  %751 = fn () -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), uint16]) {
    %746 = @func_10532() /* ty=Tensor[(10, 8, 3), float64] */;
    %747 = cast(%746, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
    %748 = reshape(%747, newshape=[10, 8, 3]) /* ty=Tensor[(10, 8, 3), float64] */;
    %749 = @func_11077() /* ty=Tensor[(10, 8, 3), float64] */;
    %750 = @func_8668(%748) /* ty=Tensor[(10, 8, 3), uint16] */;
    (%746, %749, %750)
  };
  %751() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), uint16]) */
}

def @func_12993(%var_12991: Tensor[(1, 12, 4), uint64], %var_12992: Tensor[(15, 12, 4), uint64]) -> (Tensor[(15, 12, 4), uint64],) {
  @func_12989(%var_12991, %var_12992) /* ty=(Tensor[(15, 12, 4), uint64],) */
}

def @func_10533() -> Tensor[(10, 8, 3), float64] {
  %753 = fn () -> Tensor[(10, 8, 3), float64] {
    %752 = @func_10102() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %752.0
  };
  %753() /* ty=Tensor[(10, 8, 3), float64] */
}

def @func_9179() -> (Tensor[(10, 8, 3), float64],) {
  @func_9177() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_12953() -> (Tensor[(10, 8, 3), uint64], Tensor[(10, 8, 3), float64]) {
  %754 = @func_11321() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %755 = %754.0;
  %756 = cast(meta[relay.Constant][49] /* ty=Tensor[(10, 8, 3), float64] */, dtype="uint64") /* ty=Tensor[(10, 8, 3), uint64] */;
  %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%755, dtype="uint64") /* ty=Tensor[(10, 8, 3), uint64] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %760 = @func_11016() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %761 = add(%758, %759) /* ty=Tensor[(10, 8, 3), uint64] */;
  %762 = %760.0;
  (%761, %762)
}

def @func_10036(%var_9985: Tensor[(900), uint64]) -> (Tensor[(10, 8, 3), float64], Tensor[(2, 3, 4), bool], Tensor[(10, 8, 3), float64], Tensor[(900), float64]) {
  %763 = @func_9757() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %764 = cast(%var_9985, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %765 = %763.1;
  %766 = cast(%765, dtype="float64") /* ty=Tensor[(10, 8, 3), float64] */;
  %767 = reshape(%764, newshape=[900]) /* ty=Tensor[(900), uint64] */;
  %768 = reshape(%766, newshape=[10, 8, 3]) /* ty=Tensor[(10, 8, 3), float64] */;
  %769 = @func_8131(%767, %768) /* ty=(Tensor[(1, 1, 4), uint32], Tensor[(900), uint64], Tensor[(10, 8, 3), float64]) */;
  %770 = %769.0;
  %771 = cast(%770, dtype="bool") /* ty=Tensor[(1, 1, 4), bool] */;
  %772 = cast(meta[relay.Constant][50] /* ty=Tensor[(2, 3, 4), uint32] */, dtype="bool") /* ty=Tensor[(2, 3, 4), bool] */;
  %773 = @func_9177() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %774 = cast(%var_9985, dtype="float64") /* ty=Tensor[(900), float64] */;
  %775 = less_equal(%771, %772) /* ty=Tensor[(2, 3, 4), bool] */;
  %776 = %773.0;
  %777 = cos(%774) /* ty=Tensor[(900), float64] */;
  (%765, %775, %776, %777)
}

def @func_10320() -> (Tensor[(10, 8, 3), float32], Tensor[(1, 8, 14), float64], Tensor[(10, 8, 3), float64]) {
  %778 = @func_8206() /* ty=Tensor[(10, 8, 3), float64] */;
  %779 = cast(%778, dtype="float32") /* ty=Tensor[(10, 8, 3), float32] */;
  %780 = @func_9424() /* ty=(Tensor[(10, 8, 3), bool], Tensor[(1, 8, 14), float64], Tensor[(28, 4), float64]) */;
  %781 = log2(%779) /* ty=Tensor[(10, 8, 3), float32] */;
  %782 = %780.1;
  %783 = @func_8524() /* ty=Tensor[(10, 8, 3), float64] */;
  (%781, %782, %783)
}

def @func_13122() -> (Tensor[(10, 8, 3), int32],) {
  @func_13120() /* ty=(Tensor[(10, 8, 3), int32],) */
}

def @func_12989(%var_12978: Tensor[(1, 12, 4), uint64], %var_12979: Tensor[(15, 12, 4), uint64]) -> (Tensor[(15, 12, 4), uint64],) {
  %784 = cast(%var_12978, dtype="uint64") /* ty=Tensor[(1, 12, 4), uint64] */;
  %785 = cast(%var_12979, dtype="uint64") /* ty=Tensor[(15, 12, 4), uint64] */;
  %786 = multiply(%784, %785) /* ty=Tensor[(15, 12, 4), uint64] */;
  (%786,)
}

def @func_3375(%var_3373: Tensor[(12, 16, 16), uint16], %var_3374: Tensor[(12, 16, 16), uint16]) -> (Tensor[(12, 16, 16), bool],) {
  %792 = fn (%var_3353: Tensor[(12, 16, 16), uint16], %var_3354: Tensor[(12, 16, 16), uint16]) -> (Tensor[(12, 16, 16), bool],) {
    %787 = cast(%var_3354, dtype="bool") /* ty=Tensor[(12, 16, 16), bool] */;
    %788 = shape_of(%var_3353, dtype="int32") /* ty=Tensor[(3), int32] */;
    %789 = cast(%var_3353, dtype="bool") /* ty=Tensor[(12, 16, 16), bool] */;
    %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %791 = greater_equal(%789, %790) /* ty=Tensor[(12, 16, 16), bool] */;
    (%791,)
  };
  %792(%var_3373, %var_3374) /* ty=(Tensor[(12, 16, 16), bool],) */
}

def @func_480(%var_478: uint64, %var_479: Tensor[(1, 11, 5), uint64]) -> (Tensor[(1, 11, 5), uint64],) {
  %796 = fn (%var_461: uint64, %var_462: Tensor[(1, 11, 5), uint64]) -> (Tensor[(1, 11, 5), uint64],) {
    %793 = cast(%var_461, dtype="uint64") /* ty=uint64 */;
    %794 = cast(%var_462, dtype="uint64") /* ty=Tensor[(1, 11, 5), uint64] */;
    %795 = logical_xor(%793, %794) /* ty=Tensor[(1, 11, 5), uint64] */;
    (%795,)
  };
  %796(%var_478, %var_479) /* ty=(Tensor[(1, 11, 5), uint64],) */
}

def @func_6371(%var_6370: Tensor[(1, 8, 14), float64]) -> Tensor[(1, 8, 14), float64] {
  %798 = fn (%var_6348: Tensor[(1, 8, 14), float64]) -> Tensor[(1, 8, 14), float64] {
    %797 = cast(%var_6348, dtype="float64") /* ty=Tensor[(1, 8, 14), float64] */;
    asin(%797) /* ty=Tensor[(1, 8, 14), float64] */
  };
  %798(%var_6370) /* ty=Tensor[(1, 8, 14), float64] */
}

def @func_11213() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  %799 = @func_11016() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %800 = @func_8843() /* ty=Tensor[(10, 8, 3), float64] */;
  %801 = %799.0;
  %802 = @func_9616() /* ty=Tensor[(10, 8, 3), float64] */;
  %803 = @func_8843() /* ty=Tensor[(10, 8, 3), float64] */;
  (%800, %801, %802, %803)
}

def @func_9360() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) {
  @func_9358() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */
}

def @func_1467(%var_1340: Tensor[(5, 6, 14), float32], %var_1345: Tensor[(5, 6, 14), float32], %var_1400: uint64, %var_1460: Tensor[(5, 6, 14), float32]) -> (Tensor[(5, 6, 14), bool], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(1, 11, 5), uint64], Tensor[(55), uint64], Tensor[(15, 16, 8), int8], Tensor[(10, 9, 10), bool], Tensor[(900), uint64], Tensor[(5, 6, 14), uint32], Tensor[(1, 11, 5), uint64], Tensor[(5, 6, 14), bool]) {
  %804 = cast(%var_1340, dtype="float32") /* ty=Tensor[(5, 6, 14), float32] */;
  %805 = acos(%804) /* ty=Tensor[(5, 6, 14), float32] */;
  %806 = cast(%var_1345, dtype="bool") /* ty=Tensor[(5, 6, 14), bool] */;
  %807 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %808 = cast(%805, dtype="bool") /* ty=Tensor[(5, 6, 14), bool] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %810 = cast(meta[relay.Constant][52] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %811 = cast(meta[relay.Constant][52] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %812 = reshape(%810, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %813 = reshape(%811, newshape=[10, 12, 10]) /* ty=Tensor[(10, 12, 10), float64] */;
  %814 = @func_297(%812, %813) /* ty=(Tensor[(10, 12, 10), uint16],) */;
  %815 = cast(%var_1400, dtype="uint64") /* ty=uint64 */;
  %816 = cast(meta[relay.Constant][53] /* ty=Tensor[(55), uint64] */, dtype="uint64") /* ty=Tensor[(55), uint64] */;
  %817 = reshape(%815, newshape=[]) /* ty=uint64 */;
  %818 = reshape(%816, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), uint64] */;
  %819 = @func_477(%817, %818) /* ty=(Tensor[(1, 11, 5), uint64],) */;
  %820 = cast(meta[relay.Constant][51] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %821 = cast(meta[relay.Constant][52] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %822 = reshape(%820, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
  %823 = reshape(%821, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
  %824 = @func_780(%822, %823) /* ty=(Tensor[(15, 16, 8), float64], Tensor[(1200), float64], Tensor[(13, 5), float32], Tensor[(1200), float64]) */;
  %825 = %824.0;
  %826 = cast(%825, dtype="int8") /* ty=Tensor[(15, 16, 8), int8] */;
  %827 = cast(%var_1400, dtype="int8") /* ty=int8 */;
  %828 = cast(meta[relay.Constant][54] /* ty=Tensor[(900), uint64] */, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %829 = cast(meta[relay.Constant][54] /* ty=Tensor[(900), uint64] */, dtype="uint64") /* ty=Tensor[(900), uint64] */;
  %830 = reshape(%828, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
  %831 = reshape(%829, newshape=[10, 9, 10]) /* ty=Tensor[(10, 9, 10), uint64] */;
  %832 = @func_1327(%830, %831) /* ty=(Tensor[(10, 9, 10), bool], Tensor[(1, 1, 4), uint32], Tensor[(2, 2), uint32]) */;
  %833 = cast(%var_1345, dtype="float32") /* ty=Tensor[(5, 6, 14), float32] */;
  %834 = log(%833) /* ty=Tensor[(5, 6, 14), float32] */;
  %835 = cast(%834, dtype="uint32") /* ty=Tensor[(5, 6, 14), uint32] */;
  %836 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%805, dtype="uint32") /* ty=Tensor[(5, 6, 14), uint32] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %839 = cast(%var_1400, dtype="uint64") /* ty=uint64 */;
  %840 = cast(meta[relay.Constant][53] /* ty=Tensor[(55), uint64] */, dtype="uint64") /* ty=Tensor[(55), uint64] */;
  %841 = reshape(%839, newshape=[]) /* ty=uint64 */;
  %842 = reshape(%840, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), uint64] */;
  %843 = @func_477(%841, %842) /* ty=(Tensor[(1, 11, 5), uint64],) */;
  %844 = cast(%var_1460, dtype="bool") /* ty=Tensor[(5, 6, 14), bool] */;
  %845 = shape_of(%834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%834, dtype="bool") /* ty=Tensor[(5, 6, 14), bool] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %848 = greater(%808, %809) /* ty=Tensor[(5, 6, 14), bool] */;
  %849 = %814.0;
  %850 = %819.0;
  %851 = bitwise_xor(%826, %827) /* ty=Tensor[(15, 16, 8), int8] */;
  %852 = %832.0;
  %853 = right_shift(%837, %838) /* ty=Tensor[(5, 6, 14), uint32] */;
  %854 = %843.0;
  %855 = less(%846, %847) /* ty=Tensor[(5, 6, 14), bool] */;
  (%848, meta[relay.Constant][51] /* ty=Tensor[(65), float32] */, meta[relay.Constant][52] /* ty=Tensor[(1200), float64] */, %849, %850, meta[relay.Constant][53] /* ty=Tensor[(55), uint64] */, %851, %852, meta[relay.Constant][54] /* ty=Tensor[(900), uint64] */, %853, %854, %855)
}

def @func_12250(%var_12244: uint64) -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], uint64, uint64) {
  %856 = @func_9785() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %857 = cast(%var_12244, dtype="uint64") /* ty=uint64 */;
  %858 = reshape(%857, newshape=[]) /* ty=uint64 */;
  %859 = @func_10710(%858) /* ty=(Tensor[(10, 8, 3), bool], Tensor[(10, 12, 10), uint16], Tensor[(420), float32], uint64) */;
  %860 = @func_8843() /* ty=Tensor[(10, 8, 3), float64] */;
  %861 = @func_11547() /* ty=Tensor[(10, 8, 3), float64] */;
  %862 = %856.0;
  %863 = %859.3;
  (%860, %861, %862, %863, %var_12244)
}

def @func_11896() -> Tensor[(10, 6, 2), bool] {
  %870 = fn () -> Tensor[(10, 6, 2), bool] {
    %864 = cast(meta[relay.Constant][55] /* ty=Tensor[(10, 6, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 6, 2), float64] */;
    %865 = cos(%864) /* ty=Tensor[(10, 6, 2), float64] */;
    %866 = cast(%865, dtype="bool") /* ty=Tensor[(10, 6, 2), bool] */;
    %867 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(10, 6, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %868 = cast(meta[relay.Constant][55] /* ty=Tensor[(10, 6, 2), float64] */, dtype="bool") /* ty=Tensor[(10, 6, 2), bool] */;
    %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%868, %869) /* ty=Tensor[(10, 6, 2), bool] */
  };
  %870() /* ty=Tensor[(10, 6, 2), bool] */
}

def @func_8275(%var_8270: Tensor[(112), float64]) -> (Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(112), float64]) {
  %871 = @func_8224() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %872 = cast(%var_8270, dtype="float64") /* ty=Tensor[(112), float64] */;
  %873 = reshape(%872, newshape=[1, 8, 14]) /* ty=Tensor[(1, 8, 14), float64] */;
  %874 = %871.0;
  %875 = @func_6369(%873) /* ty=Tensor[(1, 8, 14), float64] */;
  (%874, %875, %var_8270)
}

def @func_8775() -> (Tensor[(10, 8, 3), float64],) {
  @func_8773() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_10741() -> (Tensor[(10, 8, 3), float64],) {
  %877 = fn () -> (Tensor[(10, 8, 3), float64],) {
    %876 = @func_10532() /* ty=Tensor[(10, 8, 3), float64] */;
    (%876,)
  };
  %877() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_8718() -> (Tensor[(10, 8, 3), float64],) {
  %879 = fn () -> (Tensor[(10, 8, 3), float64],) {
    %878 = @func_8282() /* ty=Tensor[(10, 8, 3), float64] */;
    (%878,)
  };
  %879() /* ty=(Tensor[(10, 8, 3), float64],) */
}

def @func_11761(%var_11733: Tensor[(65), float32]) -> (Tensor[(10, 8, 3), float64], Tensor[(13, 5), float32], Tensor[(325), float64], Tensor[(65), float32], Tensor[(5, 6, 14), bool], Tensor[(420, 1), float32], uint64, Tensor[(10, 8, 3), float64], Tensor[(112), float64], Tensor[(10, 8, 3), float64]) {
  %880 = @func_9785() /* ty=(Tensor[(10, 8, 3), float64],) */;
  %881 = cast(meta[relay.Constant][56] /* ty=Tensor[(325), float64] */, dtype="float64") /* ty=Tensor[(325), float64] */;
  %882 = cast(%var_11733, dtype="float32") /* ty=Tensor[(65), float32] */;
  %883 = reshape(%881, newshape=[13, 5, 5]) /* ty=Tensor[(13, 5, 5), float64] */;
  %884 = reshape(%882, newshape=[65]) /* ty=Tensor[(65), float32] */;
  %885 = @func_3490(%883, %884) /* ty=(Tensor[(13, 5, 5), float64], Tensor[(13, 5), float32], Tensor[(65), float32], Tensor[(1, 1200), float64]) */;
  %886 = cast(meta[relay.Constant][57] /* ty=Tensor[(420, 1), float32] */, dtype="float32") /* ty=Tensor[(420, 1), float32] */;
  %887 = cast(meta[relay.Constant][57] /* ty=Tensor[(420, 1), float32] */, dtype="float32") /* ty=Tensor[(420, 1), float32] */;
  %888 = cast(meta[relay.Constant][58] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %889 = cast(meta[relay.Constant][57] /* ty=Tensor[(420, 1), float32] */, dtype="float32") /* ty=Tensor[(420, 1), float32] */;
  %890 = reshape(%886, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %891 = reshape(%887, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %892 = reshape(%888, newshape=[]) /* ty=uint64 */;
  %893 = reshape(%889, newshape=[5, 6, 14]) /* ty=Tensor[(5, 6, 14), float32] */;
  %894 = @func_1467(%890, %891, %892, %893) /* ty=(Tensor[(5, 6, 14), bool], Tensor[(65), float32], Tensor[(1200), float64], Tensor[(10, 12, 10), uint16], Tensor[(1, 11, 5), uint64], Tensor[(55), uint64], Tensor[(15, 16, 8), int8], Tensor[(10, 9, 10), bool], Tensor[(900), uint64], Tensor[(5, 6, 14), uint32], Tensor[(1, 11, 5), uint64], Tensor[(5, 6, 14), bool]) */;
  %895 = cast(meta[relay.Constant][59] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %896 = reshape(%895, newshape=[112]) /* ty=Tensor[(112), float64] */;
  %897 = @func_8275(%896) /* ty=(Tensor[(10, 8, 3), float64], Tensor[(1, 8, 14), float64], Tensor[(112), float64]) */;
  %898 = @func_9358() /* ty=(Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), float64]) */;
  %899 = %880.0;
  %900 = %885.1;
  %901 = %894.11;
  %902 = %897.0;
  %903 = %898.0;
  (%899, %900, meta[relay.Constant][56] /* ty=Tensor[(325), float64] */, %var_11733, %901, meta[relay.Constant][57] /* ty=Tensor[(420, 1), float32] */, meta[relay.Constant][58] /* ty=uint64 */, %902, meta[relay.Constant][59] /* ty=Tensor[(112), float64] */, %903)
}

def @func_11260() -> Tensor[(1, 8, 14), float64] {
  %904 = @func_9424() /* ty=(Tensor[(10, 8, 3), bool], Tensor[(1, 8, 14), float64], Tensor[(28, 4), float64]) */;
  %904.1
}

def @func_1108(%var_1106: Tensor[(1, 1, 4), uint32]) -> (Tensor[(1, 1, 4), uint32],) {
  @func_1105(%var_1106) /* ty=(Tensor[(1, 1, 4), uint32],) */
}

def @func_13420(%var_13418: Tensor[(12, 14, 5), float32]) -> Tensor[(12, 14, 5), bool] {
  @func_13417(%var_13418) /* ty=Tensor[(12, 14, 5), bool] */
}

def @func_5053(%var_5051: Tensor[(12, 100), float64]) -> (Tensor[(4, 14, 9), float32], Tensor[(10, 12, 10), uint16], Tensor[(12, 100), float64]) {
  @func_5050(%var_5051) /* ty=(Tensor[(4, 14, 9), float32], Tensor[(10, 12, 10), uint16], Tensor[(12, 100), float64]) */
}

def @func_10821() -> (Tensor[(10, 8, 3), float64], Tensor[(10, 8, 3), bool]) {
  %905 = @func_10494() /* ty=(Tensor[(10, 8, 3), bool], Tensor[(10, 8, 3), bool]) */;
  %906 = @func_8524() /* ty=Tensor[(10, 8, 3), float64] */;
  %907 = %905.0;
  (%906, %907)
}

def @func_4509(%var_4508: Tensor[(16, 15, 3), float32]) -> Tensor[(16, 15, 3), float32] {
  %912 = fn (%var_4496: Tensor[(16, 15, 3), float32]) -> Tensor[(16, 15, 3), float32] {
    %908 = cast(%var_4496, dtype="float32") /* ty=Tensor[(16, 15, 3), float32] */;
    %909 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(16, 15, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %910 = cast(meta[relay.Constant][60] /* ty=Tensor[(16, 15, 3), float32] */, dtype="float32") /* ty=Tensor[(16, 15, 3), float32] */;
    %911 = dyn.reshape(%908, %909, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%910, %911) /* ty=Tensor[(16, 15, 3), float32] */
  };
  %912(%var_4508) /* ty=Tensor[(16, 15, 3), float32] */
}

def @func_8207() -> Tensor[(10, 8, 3), float64] {
  %914 = fn () -> Tensor[(10, 8, 3), float64] {
    %913 = @func_8051() /* ty=(Tensor[(10, 8, 3), float64],) */;
    %913.0
  };
  %914() /* ty=Tensor[(10, 8, 3), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen450/build/output.py:2300: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen450/build/output.py", line 2305, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(702) tvmgen_default_fused_reshape_multiply_kernel0(int* __restrict__ T_multiply, int* __restrict__ placeholder, int* __restrict__ placeholder1) {
  T_multiply[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] * placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

