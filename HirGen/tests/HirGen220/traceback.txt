==========mod==========
#[version = "0.0.5"]
def @func_2954() -> (Tensor[(10, 4, 16), bool],) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 1), float64] */;
  %1 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 16), float64] */;
  %2 = floor_mod(%0, %1) /* ty=Tensor[(10, 4, 16), float64] */;
  %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 4, 16), float64] */, dtype="bool") /* ty=Tensor[(10, 4, 16), bool] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%2, dtype="bool") /* ty=Tensor[(10, 4, 16), bool] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %7 = logical_or(%5, %6) /* ty=Tensor[(10, 4, 16), bool] */;
  (%7,)
}

def @func_4615() -> (Tensor[(16, 2, 5), float64],) {
  %8 = @func_3818() /* ty=(Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16]) */;
  %9 = %8.0;
  (%9,)
}

def @func_1739(%var_1730: Tensor[(4, 2, 15), float32]) -> (Tensor[(4, 2, 15), float32],) {
  %10 = cast(%var_1730, dtype="float32") /* ty=Tensor[(4, 2, 15), float32] */;
  %11 = rsqrt(%10) /* ty=Tensor[(4, 2, 15), float32] */;
  (%11,)
}

def @func_3613(%var_3602: Tensor[(10, 4, 16), bool]) -> (Tensor[(10, 4, 16), float32],) {
  %12 = @func_2954() /* ty=(Tensor[(10, 4, 16), bool],) */;
  %13 = %12.0;
  %14 = cast(%var_3602, dtype="float32") /* ty=Tensor[(10, 4, 16), float32] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="float32") /* ty=Tensor[(10, 4, 16), float32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %18 = floor_divide(%16, %17) /* ty=Tensor[(10, 4, 16), float32] */;
  (%18,)
}

def @func_284(%var_245: Tensor[(4, 12, 4), int64], %var_246: Tensor[(4, 12, 4), int64]) -> (Tensor[(3, 10, 6), float32], Tensor[(6, 30), float32], Tensor[(3, 10, 6), float32], Tensor[(4, 12, 4), bool], Tensor[(3, 10, 6), float32], Tensor[(3, 10, 6), float32]) {
  %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 30), float32] */, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %20 = reshape(%19, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
  %21 = @func_195(%20) /* ty=(Tensor[(3, 10, 6), float32],) */;
  %22 = %21.0;
  %23 = cast(%22, dtype="float32") /* ty=Tensor[(3, 10, 6), float32] */;
  %24 = reshape(%23, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
  %25 = @func_195(%24) /* ty=(Tensor[(3, 10, 6), float32],) */;
  %26 = cast(%var_246, dtype="float64") /* ty=Tensor[(4, 12, 4), float64] */;
  %27 = sin(%26) /* ty=Tensor[(4, 12, 4), float64] */;
  %28 = cast(%var_246, dtype="int64") /* ty=Tensor[(4, 12, 4), int64] */;
  %29 = shape_of(%var_245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%var_245, dtype="int64") /* ty=Tensor[(4, 12, 4), int64] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %32 = minimum(%30, %31) /* ty=Tensor[(4, 12, 4), int64] */;
  %33 = cast(%32, dtype="bool") /* ty=Tensor[(4, 12, 4), bool] */;
  %34 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%27, dtype="bool") /* ty=Tensor[(4, 12, 4), bool] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %37 = cast(%22, dtype="float32") /* ty=Tensor[(3, 10, 6), float32] */;
  %38 = reshape(%37, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
  %39 = @func_195(%38) /* ty=(Tensor[(3, 10, 6), float32],) */;
  %40 = %39.0;
  %41 = cast(%40, dtype="float32") /* ty=Tensor[(3, 10, 6), float32] */;
  %42 = reshape(%41, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
  %43 = @func_195(%42) /* ty=(Tensor[(3, 10, 6), float32],) */;
  %44 = %25.0;
  %45 = logical_and(%35, %36) /* ty=Tensor[(4, 12, 4), bool] */;
  %46 = %43.0;
  (%22, meta[relay.Constant][2] /* ty=Tensor[(6, 30), float32] */, %44, %45, %40, %46)
}

def @func_937(%var_859: Tensor[(14, 6, 1), float64], %var_889: Tensor[(192), int64]) -> (Tensor[(3, 10, 6), float32], Tensor[(192), int64], Tensor[(14, 6, ?), float64], Tensor[(3, 10, 6), float32], Tensor[(14, 6, ?), uint16], Tensor[(192), int64], float64, Tensor[(1620), float64]) {
  %47 = cast(%var_889, dtype="int64") /* ty=Tensor[(192), int64] */;
  %48 = cast(%var_889, dtype="int64") /* ty=Tensor[(192), int64] */;
  %49 = reshape(%47, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %50 = reshape(%48, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %51 = @func_284(%49, %50) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(6, 30), float32], Tensor[(3, 10, 6), float32], Tensor[(4, 12, 4), bool], Tensor[(3, 10, 6), float32], Tensor[(3, 10, 6), float32]) */;
  %52 = cast(%var_859, dtype="float64") /* ty=Tensor[(14, 6, 1), float64] */;
  %53 = acos(%52) /* ty=Tensor[(14, 6, 1), float64] */;
  %54 = cast(%var_859, dtype="float32") /* ty=Tensor[(14, 6, 1), float32] */;
  %55 = cos(%54) /* ty=Tensor[(14, 6, 1), float32] */;
  %56 = cast(%55, dtype="float32") /* ty=Tensor[(14, 6, 1), float32] */;
  %57 = sinh(%56) /* ty=Tensor[(14, 6, 1), float32] */;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(14, 6, 1), float64] */;
  %59 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%53, dtype="float64") /* ty=Tensor[(14, 6, 1), float64] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %62 = %51.4;
  %63 = cast(%62, dtype="float32") /* ty=Tensor[(3, 10, 6), float32] */;
  %64 = reshape(%63, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
  %65 = @func_195(%64) /* ty=(Tensor[(3, 10, 6), float32],) */;
  %66 = cast(%55, dtype="float64") /* ty=Tensor[(14, 6, 1), float64] */;
  %67 = asin(%66) /* ty=Tensor[(14, 6, 1), float64] */;
  %68 = cast(%57, dtype="int8") /* ty=Tensor[(14, 6, 1), int8] */;
  %69 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%53, dtype="int8") /* ty=Tensor[(14, 6, 1), int8] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %72 = right_shift(%70, %71) /* ty=Tensor[(14, 6, ?), int8] */;
  %73 = cast(%72, dtype="bool") /* ty=Tensor[(14, 6, ?), bool] */;
  %74 = shape_of(%57, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%57, dtype="bool") /* ty=Tensor[(14, 6, 1), bool] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %77 = less(%75, %76) /* ty=Tensor[(14, 6, ?), bool] */;
  %78 = cast(%77, dtype="uint16") /* ty=Tensor[(14, 6, ?), uint16] */;
  %79 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%67, dtype="uint16") /* ty=Tensor[(14, 6, 1), uint16] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %82 = cast(-7.33087f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %83 = cast(meta[relay.Constant][3] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %84 = cast(%var_889, dtype="int64") /* ty=Tensor[(192), int64] */;
  %85 = reshape(%82, newshape=[]) /* ty=float64 */;
  %86 = reshape(%83, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %87 = reshape(%84, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %88 = @func_730(%85, %86, %87) /* ty=(Tensor[(15, 12, 9), float64], Tensor[(192), int64], Tensor[(6, 30), bool]) */;
  %89 = floor_mod(%60, %61) /* ty=Tensor[(14, 6, ?), float64] */;
  %90 = %65.0;
  %91 = subtract(%80, %81) /* ty=Tensor[(14, 6, ?), uint16] */;
  %92 = %88.1;
  (%62, %var_889, %89, %90, %91, %92, -7.33087f64 /* ty=float64 */, meta[relay.Constant][3] /* ty=Tensor[(1620), float64] */)
}

def @func_1107(%var_1065: Tensor[(6, 1, 11), float32], %var_1092: Tensor[(192), int64]) -> (Tensor[(3, 10, 6), float32], Tensor[(84), float64], Tensor[(192), int64], Tensor[(6, ?, 11), uint32]) {
  %93 = cast(meta[relay.Constant][4] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %94 = cast(%var_1092, dtype="int64") /* ty=Tensor[(192), int64] */;
  %95 = reshape(%93, newshape=[14, 6, 1]) /* ty=Tensor[(14, 6, 1), float64] */;
  %96 = reshape(%94, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %97 = @func_937(%95, %96) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(192), int64], Tensor[(14, 6, ?), float64], Tensor[(3, 10, 6), float32], Tensor[(14, 6, ?), uint16], Tensor[(192), int64], float64, Tensor[(1620), float64]) */;
  %98 = cast(%var_1065, dtype="float32") /* ty=Tensor[(6, 1, 11), float32] */;
  %99 = log(%98) /* ty=Tensor[(6, 1, 11), float32] */;
  %100 = cast(%var_1065, dtype="int8") /* ty=Tensor[(6, 1, 11), int8] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%99, dtype="int8") /* ty=Tensor[(6, 1, 11), int8] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %104 = bitwise_xor(%102, %103) /* ty=Tensor[(6, ?, 11), int8] */;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(6, ?, 11), float64] */;
  %106 = log2(%105) /* ty=Tensor[(6, ?, 11), float64] */;
  %107 = cast(%var_1065, dtype="uint32") /* ty=Tensor[(6, 1, 11), uint32] */;
  %108 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%106, dtype="uint32") /* ty=Tensor[(6, ?, 11), uint32] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %111 = %97.3;
  %112 = multiply(%109, %110) /* ty=Tensor[(6, ?, 11), uint32] */;
  (%111, meta[relay.Constant][4] /* ty=Tensor[(84), float64] */, %var_1092, %112)
}

def @func_5071() -> Tensor[(16, 2, 5), float64] {
  %113 = @func_4771() /* ty=(Tensor[(16, 2, 5), float64],) */;
  %113.0
}

def @func_3392() -> (Tensor[(11, 3, 9), float32],) {
  %114 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 3, 9), float32] */, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
  %115 = acosh(%114) /* ty=Tensor[(11, 3, 9), float32] */;
  %116 = cast(%115, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
  %117 = tan(%116) /* ty=Tensor[(11, 3, 9), float32] */;
  %118 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 3, 9), float32] */, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
  %119 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%117, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %122 = multiply(%120, %121) /* ty=Tensor[(11, 3, 9), float32] */;
  (%122,)
}

def @func_5776(%var_5764: Tensor[(15, 10, 8), float32]) -> (Tensor[(16, 2, 5), uint16], Tensor[(15, 10, 8), bool], Tensor[(15, 10, 8), float32], Tensor[(180), uint64], uint8, Tensor[(180), uint64], Tensor[(15, 10, 8), bool], Tensor[(15, 10, 8), float32]) {
  %123 = cast(meta[relay.Constant][7] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %124 = reshape(%123, newshape=[15, 10, 8]) /* ty=Tensor[(15, 10, 8), float64] */;
  %125 = @func_2231(%124) /* ty=(Tensor[(15, 10, 8), uint8], Tensor[(15, 10, 8), float32]) */;
  %126 = %125.1;
  %127 = cast(meta[relay.Constant][7] /* ty=Tensor[(1200), float64] */, dtype="bool") /* ty=Tensor[(1200), bool] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %131 = cast(meta[relay.Constant][8] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %132 = cast(meta[relay.Constant][8] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %133 = cast(meta[relay.Constant][9] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %134 = cast(%126, dtype="float64") /* ty=Tensor[(15, 10, 8), float64] */;
  %135 = reshape(%131, newshape=[5, 12, 3]) /* ty=Tensor[(5, 12, 3), uint64] */;
  %136 = reshape(%132, newshape=[5, 12, 3]) /* ty=Tensor[(5, 12, 3), uint64] */;
  %137 = reshape(%133, newshape=[]) /* ty=uint8 */;
  %138 = reshape(%134, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
  %139 = @func_3207(%135, %136, %137, %138) /* ty=(Tensor[(5, 12, 3), bool], uint8, Tensor[(192), int64], Tensor[(6, 30), float64], Tensor[(15, 10, 8), float32], Tensor[(1200), float64], Tensor[(3, 10, 6), float32]) */;
  %140 = cast(meta[relay.Constant][8] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %141 = cast(meta[relay.Constant][9] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %142 = cast(meta[relay.Constant][7] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %143 = reshape(%140, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %144 = reshape(%141, newshape=[]) /* ty=uint8 */;
  %145 = reshape(%142, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
  %146 = @func_5037(%143, %144, %145) /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(3, 10, 6), float32], Tensor[(180), uint64], uint8, Tensor[(1200), float64], Tensor[(3, 10, 6), float32], Tensor[(192), int64]) */;
  %147 = cast(%var_5764, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
  %148 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%126, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %151 = cast(%126, dtype="float32") /* ty=Tensor[(15, 10, 8), float32] */;
  %152 = shape_of(%var_5764, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%var_5764, dtype="float32") /* ty=Tensor[(15, 10, 8), float32] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %155 = @func_4002() /* ty=Tensor[(16, 2, 5), uint16] */;
  %156 = less(%129, %130) /* ty=Tensor[(15, 10, 8), bool] */;
  %157 = %139.4;
  %158 = %146.2;
  %159 = logical_and(%149, %150) /* ty=Tensor[(15, 10, 8), bool] */;
  %160 = floor_mod(%153, %154) /* ty=Tensor[(15, 10, 8), float32] */;
  (%155, %156, %157, meta[relay.Constant][8] /* ty=Tensor[(180), uint64] */, meta[relay.Constant][9] /* ty=uint8 */, %158, %159, %160)
}

def @func_3425() -> Tensor[(16, 2, 5), uint16] {
  @func_3161() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_3005(%var_2986: Tensor[(1300), float32]) -> (Tensor[(13, 10, 10), int16], Tensor[(1300), float32], Tensor[(16, 2, 5), float64]) {
  %161 = cast(%var_2986, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %162 = reshape(%161, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %163 = @func_2595(%162) /* ty=(Tensor[(13, 10, 10), int16], Tensor[(132), uint32], Tensor[(1300), float32], Tensor[(10, 16, 7), float64]) */;
  %164 = cast(%var_2986, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %165 = @func_2794() /* ty=Tensor[(16, 2, 5), uint16] */;
  %166 = cast(%165, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
  %167 = %163.0;
  %168 = sinh(%164) /* ty=Tensor[(1300), float32] */;
  %169 = asinh(%166) /* ty=Tensor[(16, 2, 5), float64] */;
  (%167, %168, %169)
}

def @func_4465(%var_4461: Tensor[(234), int32]) -> (Tensor[(16, 2, 5), uint16], Tensor[(1, 11, 5), uint8], Tensor[(715), float64], Tensor[(234), int32]) {
  %170 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %171 = cast(meta[relay.Constant][10] /* ty=Tensor[(715), float64] */, dtype="float64") /* ty=Tensor[(715), float64] */;
  %172 = cast(%var_4461, dtype="int32") /* ty=Tensor[(234), int32] */;
  %173 = reshape(%171, newshape=[5, 11, 13]) /* ty=Tensor[(5, 11, 13), float64] */;
  %174 = reshape(%172, newshape=[234]) /* ty=Tensor[(234), int32] */;
  %175 = @func_2037(%173, %174) /* ty=(Tensor[(13, 9, 2), float64], Tensor[(234), int32], Tensor[(13, 9, 2), float64], Tensor[(1, 11, 5), uint8], uint8, Tensor[(8, 24), int64], Tensor[(5, 11, 13), bool], Tensor[(3, 10, 6), float32], Tensor[(180), float32]) */;
  %176 = %170.0;
  %177 = %175.3;
  (%176, %177, meta[relay.Constant][10] /* ty=Tensor[(715), float64] */, %var_4461)
}

def @func_5037(%var_5026: Tensor[(180), uint64], %var_5027: uint8, %var_5028: Tensor[(1200), float64]) -> (Tensor[(16, 2, 5), uint16], Tensor[(3, 10, 6), float32], Tensor[(180), uint64], uint8, Tensor[(1200), float64], Tensor[(3, 10, 6), float32], Tensor[(192), int64]) {
  %178 = cast(%var_5026, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %179 = cast(%var_5026, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %180 = cast(%var_5027, dtype="uint8") /* ty=uint8 */;
  %181 = cast(%var_5028, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %182 = reshape(%178, newshape=[5, 12, 3]) /* ty=Tensor[(5, 12, 3), uint64] */;
  %183 = reshape(%179, newshape=[5, 12, 3]) /* ty=Tensor[(5, 12, 3), uint64] */;
  %184 = reshape(%180, newshape=[]) /* ty=uint8 */;
  %185 = reshape(%181, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
  %186 = @func_3207(%182, %183, %184, %185) /* ty=(Tensor[(5, 12, 3), bool], uint8, Tensor[(192), int64], Tensor[(6, 30), float64], Tensor[(15, 10, 8), float32], Tensor[(1200), float64], Tensor[(3, 10, 6), float32]) */;
  %187 = cast(meta[relay.Constant][11] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %188 = reshape(%187, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %189 = @func_4697(%188) /* ty=(Tensor[(16, 2, 5), float64], Tensor[(3, 10, 6), float32], Tensor[(192), int64]) */;
  %190 = @func_4920() /* ty=Tensor[(16, 2, 5), uint16] */;
  %191 = %186.6;
  %192 = %189.1;
  (%190, %191, %var_5026, %var_5027, %var_5028, %192, meta[relay.Constant][11] /* ty=Tensor[(192), int64] */)
}

def @func_4656() -> Tensor[(16, 2, 5), uint16] {
  @func_4495() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_5314(%var_5309: float64, %var_5311: Tensor[(8, 24), int64]) -> (Tensor[(16, 2, 5), uint16], Tensor[(192), int64], float64, Tensor[(1, 1620), float64], Tensor[(8, 24), int64]) {
  %193 = cast(%var_5309, dtype="float64") /* ty=float64 */;
  %194 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 1620), float64] */, dtype="float64") /* ty=Tensor[(1, 1620), float64] */;
  %195 = cast(%var_5311, dtype="int64") /* ty=Tensor[(8, 24), int64] */;
  %196 = reshape(%193, newshape=[]) /* ty=float64 */;
  %197 = reshape(%194, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %198 = reshape(%195, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %199 = @func_730(%196, %197, %198) /* ty=(Tensor[(15, 12, 9), float64], Tensor[(192), int64], Tensor[(6, 30), bool]) */;
  %200 = @func_4495() /* ty=Tensor[(16, 2, 5), uint16] */;
  %201 = %199.1;
  (%200, %201, %var_5309, meta[relay.Constant][12] /* ty=Tensor[(1, 1620), float64] */, %var_5311)
}

def @func_2714(%var_2699: Tensor[(9, 5, 12), float64]) -> Tensor[(9, 5, 12), float64] {
  %202 = cast(%var_2699, dtype="float64") /* ty=Tensor[(9, 5, 12), float64] */;
  erf(%202) /* ty=Tensor[(9, 5, 12), float64] */
}

def @func_5856() -> (Tensor[(16, 2, 5), float64], Tensor[(10, 4, 16), bool], Tensor[(10, 64), float64]) {
  %203 = @func_5790() /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(16, 2, 5), float64]) */;
  %204 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 64), bool] */, dtype="bool") /* ty=Tensor[(10, 64), bool] */;
  %205 = reshape(%204, newshape=[10, 4, 16]) /* ty=Tensor[(10, 4, 16), bool] */;
  %206 = @func_3613(%205) /* ty=(Tensor[(10, 4, 16), float32],) */;
  %207 = %206.0;
  %208 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 4, 16), float32] */, dtype="bool") /* ty=Tensor[(10, 4, 16), bool] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="bool") /* ty=Tensor[(10, 4, 16), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %212 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 64), bool] */, dtype="float64") /* ty=Tensor[(10, 64), float64] */;
  %213 = %203.1;
  %214 = less_equal(%210, %211) /* ty=Tensor[(10, 4, 16), bool] */;
  %215 = acos(%212) /* ty=Tensor[(10, 64), float64] */;
  (%213, %214, %215)
}

def @func_4033(%var_4023: Tensor[(1300), float32]) -> (Tensor[(16, 2, 5), uint16], Tensor[(1300), float32], Tensor[(1300), float32], Tensor[(13, 10, 10), int16]) {
  %216 = cast(%var_4023, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %217 = reshape(%216, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %218 = @func_2595(%217) /* ty=(Tensor[(13, 10, 10), int16], Tensor[(132), uint32], Tensor[(1300), float32], Tensor[(10, 16, 7), float64]) */;
  %219 = %218.2;
  %220 = cast(%219, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %221 = reshape(%220, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %222 = @func_3005(%221) /* ty=(Tensor[(13, 10, 10), int16], Tensor[(1300), float32], Tensor[(16, 2, 5), float64]) */;
  %223 = @func_2794() /* ty=Tensor[(16, 2, 5), uint16] */;
  %224 = %222.0;
  (%223, %219, %var_4023, %224)
}

def @func_3264(%var_3246: Tensor[(9, 2, 12), uint8], %var_3247: Tensor[(9, 2, 12), uint8], %var_3256: Tensor[(6, 30), uint64]) -> (Tensor[(9, 2, 12), uint8], Tensor[(3, 10, 6), float32], Tensor[(6, 30), uint64], uint8, Tensor[(1200), float64]) {
  %225 = cast(%var_3247, dtype="uint8") /* ty=Tensor[(9, 2, 12), uint8] */;
  %226 = shape_of(%var_3246, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%var_3246, dtype="uint8") /* ty=Tensor[(9, 2, 12), uint8] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %229 = cast(%var_3256, dtype="uint64") /* ty=Tensor[(6, 30), uint64] */;
  %230 = cast(%var_3256, dtype="uint64") /* ty=Tensor[(6, 30), uint64] */;
  %231 = cast(meta[relay.Constant][15] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %232 = cast(meta[relay.Constant][16] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %233 = reshape(%229, newshape=[5, 12, 3]) /* ty=Tensor[(5, 12, 3), uint64] */;
  %234 = reshape(%230, newshape=[5, 12, 3]) /* ty=Tensor[(5, 12, 3), uint64] */;
  %235 = reshape(%231, newshape=[]) /* ty=uint8 */;
  %236 = reshape(%232, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
  %237 = @func_3207(%233, %234, %235, %236) /* ty=(Tensor[(5, 12, 3), bool], uint8, Tensor[(192), int64], Tensor[(6, 30), float64], Tensor[(15, 10, 8), float32], Tensor[(1200), float64], Tensor[(3, 10, 6), float32]) */;
  %238 = bitwise_xor(%227, %228) /* ty=Tensor[(9, 2, 12), uint8] */;
  %239 = %237.6;
  (%238, %239, %var_3256, meta[relay.Constant][15] /* ty=uint8 */, meta[relay.Constant][16] /* ty=Tensor[(1200), float64] */)
}

def @func_4359(%var_4345: Tensor[(9, 5, 6), float32], %var_4355: Tensor[(9, 5, 6), float32]) -> Tensor[(9, 5, 6), float64] {
  %240 = cast(%var_4345, dtype="float32") /* ty=Tensor[(9, 5, 6), float32] */;
  %241 = sigmoid(%240) /* ty=Tensor[(9, 5, 6), float32] */;
  %242 = cast(%var_4355, dtype="float64") /* ty=Tensor[(9, 5, 6), float64] */;
  %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(%241, dtype="float64") /* ty=Tensor[(9, 5, 6), float64] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%244, %245) /* ty=Tensor[(9, 5, 6), float64] */
}

def @func_1624(%var_1616: Tensor[(9, 12, 16), uint16]) -> (Tensor[(9, 12, 16), uint16], Tensor[(9, 12, 16), float64]) {
  %246 = cast(%var_1616, dtype="uint16") /* ty=Tensor[(9, 12, 16), uint16] */;
  %247 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(9, 12, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 12, 16), uint16] */, dtype="uint16") /* ty=Tensor[(9, 12, 16), uint16] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %250 = cast(%var_1616, dtype="float64") /* ty=Tensor[(9, 12, 16), float64] */;
  %251 = bitwise_or(%248, %249) /* ty=Tensor[(9, 12, 16), uint16] */;
  %252 = rsqrt(%250) /* ty=Tensor[(9, 12, 16), float64] */;
  (%251, %252)
}

def @func_5466(%var_5447: Tensor[(15, 11, 11), uint8], %var_5448: Tensor[(15, 11, 11), uint8]) -> Tensor[(15, 11, 11), float32] {
  %253 = cast(%var_5448, dtype="bool") /* ty=Tensor[(15, 11, 11), bool] */;
  %254 = shape_of(%var_5447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%var_5447, dtype="bool") /* ty=Tensor[(15, 11, 11), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %257 = less(%255, %256) /* ty=Tensor[(15, 11, 11), bool] */;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(15, 11, 11), float32] */;
  log10(%258) /* ty=Tensor[(15, 11, 11), float32] */
}

def @func_2595(%var_2584: Tensor[(1300), float32]) -> (Tensor[(13, 10, 10), int16], Tensor[(132), uint32], Tensor[(1300), float32], Tensor[(10, 16, 7), float64]) {
  %259 = cast(meta[relay.Constant][18] /* ty=Tensor[(132), uint32] */, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %260 = cast(%var_2584, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %261 = cast(%var_2584, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %262 = reshape(%259, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %263 = reshape(%260, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %264 = reshape(%261, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), bool] */;
  %265 = @func_1521(%262, %263, %264) /* ty=(Tensor[(4, 3, 11), bool], Tensor[(1300), float64], Tensor[(13, 10, 10), int16]) */;
  %266 = cast(meta[relay.Constant][19] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %267 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 16, 7), uint32] */, dtype="uint32") /* ty=Tensor[(10, 16, 7), uint32] */;
  %268 = minimum(%266, %267) /* ty=Tensor[(10, 16, 7), uint32] */;
  %269 = cast(%268, dtype="float64") /* ty=Tensor[(10, 16, 7), float64] */;
  %270 = %265.2;
  %271 = atan(%269) /* ty=Tensor[(10, 16, 7), float64] */;
  (%270, meta[relay.Constant][18] /* ty=Tensor[(132), uint32] */, %var_2584, %271)
}

def @func_5198(%var_5181: Tensor[(5, 14, 9), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(16, 2, 5), float64]) {
  %272 = cast(%var_5181, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
  %273 = @func_4771() /* ty=(Tensor[(16, 2, 5), float64],) */;
  %274 = exp(%272) /* ty=Tensor[(5, 14, 9), float32] */;
  %275 = %273.0;
  (%274, %275)
}

def @func_1521(%var_1499: Tensor[(4, 3, 11), uint32], %var_1509: Tensor[(1300), float32], %var_1516: Tensor[(13, 10, 10), bool]) -> (Tensor[(4, 3, 11), bool], Tensor[(1300), float64], Tensor[(13, 10, 10), int16]) {
  %276 = cast(%var_1499, dtype="bool") /* ty=Tensor[(4, 3, 11), bool] */;
  %277 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(4, 3, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 3, 11), uint32] */, dtype="bool") /* ty=Tensor[(4, 3, 11), bool] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %280 = cast(meta[relay.Constant][22] /* ty=Tensor[(1300), float32] */, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %281 = shape_of(%var_1509, dtype="int32") /* ty=Tensor[(1), int32] */;
  %282 = cast(%var_1509, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?), float64] */;
  %284 = cast(%var_1509, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %285 = cast(%var_1509, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %286 = reshape(%284, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %287 = reshape(%285, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %288 = @func_1152(%286, %287) /* ty=Tensor[(13, 10, 10), bool] */;
  %289 = cast(%var_1516, dtype="int16") /* ty=Tensor[(13, 10, 10), int16] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="int16") /* ty=Tensor[(13, 10, 10), int16] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %293 = less_equal(%278, %279) /* ty=Tensor[(4, 3, 11), bool] */;
  %294 = subtract(%282, %283) /* ty=Tensor[(1300), float64] */;
  %295 = minimum(%291, %292) /* ty=Tensor[(13, 10, 10), int16] */;
  (%293, %294, %295)
}

def @func_2763() -> (Tensor[(16, 2, 5), uint16],) {
  %296 = @func_2691() /* ty=Tensor[(16, 2, 5), float64] */;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
  %298 = atan(%297) /* ty=Tensor[(16, 2, 5), float64] */;
  %299 = cast(%298, dtype="uint16") /* ty=Tensor[(16, 2, 5), uint16] */;
  %300 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%296, dtype="uint16") /* ty=Tensor[(16, 2, 5), uint16] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %303 = bitwise_and(%301, %302) /* ty=Tensor[(16, 2, 5), uint16] */;
  (%303,)
}

def @func_5790() -> (Tensor[(16, 2, 5), uint16], Tensor[(16, 2, 5), float64]) {
  %304 = @func_4771() /* ty=(Tensor[(16, 2, 5), float64],) */;
  %305 = @func_5095() /* ty=Tensor[(16, 2, 5), uint16] */;
  %306 = %304.0;
  (%305, %306)
}

def @func_3909(%var_3898: Tensor[(1300), float32]) -> (Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16], Tensor[(132), uint32], Tensor[(1300), float32], Tensor[(4, 3, 11), float64]) {
  %307 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %308 = cast(meta[relay.Constant][23] /* ty=Tensor[(132), uint32] */, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %309 = cast(%var_3898, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %310 = cast(%var_3898, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %311 = reshape(%308, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %312 = reshape(%309, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %313 = reshape(%310, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), bool] */;
  %314 = @func_1521(%311, %312, %313) /* ty=(Tensor[(4, 3, 11), bool], Tensor[(1300), float64], Tensor[(13, 10, 10), int16]) */;
  %315 = %314.0;
  %316 = cast(%315, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
  %317 = @func_2691() /* ty=Tensor[(16, 2, 5), float64] */;
  %318 = %307.0;
  %319 = sigmoid(%316) /* ty=Tensor[(4, 3, 11), float64] */;
  (%317, %318, meta[relay.Constant][23] /* ty=Tensor[(132), uint32] */, %var_3898, %319)
}

def @func_3450() -> Tensor[(16, 2, 5), uint16] {
  @func_3161() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_4196(%var_4182: Tensor[(4, 9, 8), float64]) -> Tensor[(4, 9, 8), float64] {
  %320 = cast(%var_4182, dtype="float64") /* ty=Tensor[(4, 9, 8), float64] */;
  %321 = atanh(%320) /* ty=Tensor[(4, 9, 8), float64] */;
  %322 = cast(%321, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
  %323 = log2(%322) /* ty=Tensor[(4, 9, 8), float32] */;
  %324 = cast(%321, dtype="float64") /* ty=Tensor[(4, 9, 8), float64] */;
  %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%323, dtype="float64") /* ty=Tensor[(4, 9, 8), float64] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%326, %327) /* ty=Tensor[(4, 9, 8), float64] */
}

def @func_195(%var_192: Tensor[(3, 10, 6), float32]) -> (Tensor[(3, 10, 6), float32],) {
  %328 = cast(%var_192, dtype="float32") /* ty=Tensor[(3, 10, 6), float32] */;
  %329 = atan(%328) /* ty=Tensor[(3, 10, 6), float32] */;
  (%329,)
}

def @func_4982(%var_4960: Tensor[(16, 2, 5), uint16]) -> (Tensor[(10, 4, 16), bool], Tensor[(16, 2, 5), bool], Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16], Tensor[(1, 120), float32], Tensor[(120), float32]) {
  %330 = @func_2954() /* ty=(Tensor[(10, 4, 16), bool],) */;
  %331 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %332 = %331.0;
  %333 = cast(%var_4960, dtype="bool") /* ty=Tensor[(16, 2, 5), bool] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%332, dtype="bool") /* ty=Tensor[(16, 2, 5), bool] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %337 = cast(%var_4960, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
  %338 = cos(%337) /* ty=Tensor[(16, 2, 5), float64] */;
  %339 = cast(%338, dtype="uint16") /* ty=Tensor[(16, 2, 5), uint16] */;
  %340 = cast(%332, dtype="float32") /* ty=Tensor[(16, 2, 5), float32] */;
  %341 = cast(meta[relay.Constant][24] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %342 = reshape(%339, newshape=[160]) /* ty=Tensor[(160), uint16] */;
  %343 = reshape(%340, newshape=[16, 2, 5]) /* ty=Tensor[(16, 2, 5), float32] */;
  %344 = reshape(%341, newshape=[1, 120]) /* ty=Tensor[(1, 120), float32] */;
  %345 = @func_3570(%342, %343, %344) /* ty=(Tensor[(10, 4, 16), bool], Tensor[(3, 10, 6), float32], Tensor[(180), float32], Tensor[(16, 2, 5), int16], Tensor[(10, 4, 16), bool], Tensor[(4, 2, 15), float32], Tensor[(1, 120), float32], Tensor[(160), float64]) */;
  %346 = %330.0;
  %347 = not_equal(%335, %336) /* ty=Tensor[(16, 2, 5), bool] */;
  %348 = @func_3450() /* ty=Tensor[(16, 2, 5), uint16] */;
  %349 = %345.6;
  (%346, %347, %338, %348, %349, meta[relay.Constant][24] /* ty=Tensor[(120), float32] */)
}

def @func_4128(%var_4089: Tensor[(1300), float32], %var_4113: Tensor[(132), uint32]) -> (Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), int8], Tensor[(14, 6, ?), uint16], Tensor[(84, 1), float64], Tensor[(192), float32], Tensor[(13, 10, 10), int16], Tensor[(132), uint32], Tensor[(16, 2, 5), uint16]) {
  %350 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %351 = cast(%var_4089, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %352 = cast(%var_4089, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %353 = reshape(%351, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %354 = reshape(%352, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %355 = @func_1152(%353, %354) /* ty=Tensor[(13, 10, 10), bool] */;
  %356 = cast(%var_4089, dtype="int8") /* ty=Tensor[(1300), int8] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%355, dtype="int8") /* ty=Tensor[(13, 10, 10), int8] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %360 = cast(meta[relay.Constant][25] /* ty=Tensor[(84, 1), float64] */, dtype="float64") /* ty=Tensor[(84, 1), float64] */;
  %361 = cast(meta[relay.Constant][26] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %362 = reshape(%360, newshape=[14, 6, 1]) /* ty=Tensor[(14, 6, 1), float64] */;
  %363 = reshape(%361, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %364 = @func_937(%362, %363) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(192), int64], Tensor[(14, 6, ?), float64], Tensor[(3, 10, 6), float32], Tensor[(14, 6, ?), uint16], Tensor[(192), int64], float64, Tensor[(1620), float64]) */;
  %365 = cast(meta[relay.Constant][26] /* ty=Tensor[(192), int64] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %366 = cast(%var_4113, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %367 = cast(%355, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
  %368 = multiply(%358, %359) /* ty=Tensor[(13, 10, 10), int8] */;
  %369 = cast(%368, dtype="bool") /* ty=Tensor[(13, 10, 10), bool] */;
  %370 = reshape(%366, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %371 = reshape(%367, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %372 = reshape(%369, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), bool] */;
  %373 = @func_1521(%370, %371, %372) /* ty=(Tensor[(4, 3, 11), bool], Tensor[(1300), float64], Tensor[(13, 10, 10), int16]) */;
  %374 = %350.0;
  %375 = %364.4;
  %376 = tan(%365) /* ty=Tensor[(192), float32] */;
  %377 = %373.2;
  %378 = @func_3450() /* ty=Tensor[(16, 2, 5), uint16] */;
  (%374, %368, %375, meta[relay.Constant][25] /* ty=Tensor[(84, 1), float64] */, %376, %377, %var_4113, %378)
}

def @func_2910(%var_2851: Tensor[(16, 2, 5), uint16], %var_2893: Tensor[(16, 2, 5), float32]) -> (Tensor[(16, 2, 5), bool], Tensor[(16, 2, 5), float32], Tensor[(16, 2, 5), float32]) {
  %379 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %380 = %379.0;
  %381 = cast(%var_2851, dtype="bool") /* ty=Tensor[(16, 2, 5), bool] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%380, dtype="bool") /* ty=Tensor[(16, 2, 5), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %385 = cast(%380, dtype="float32") /* ty=Tensor[(16, 2, 5), float32] */;
  %386 = cast(%var_2851, dtype="float32") /* ty=Tensor[(16, 2, 5), float32] */;
  %387 = asin(%386) /* ty=Tensor[(16, 2, 5), float32] */;
  %388 = cast(%var_2893, dtype="float32") /* ty=Tensor[(16, 2, 5), float32] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="float32") /* ty=Tensor[(16, 2, 5), float32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %392 = less_equal(%383, %384) /* ty=Tensor[(16, 2, 5), bool] */;
  %393 = exp(%385) /* ty=Tensor[(16, 2, 5), float32] */;
  %394 = divide(%390, %391) /* ty=Tensor[(16, 2, 5), float32] */;
  (%392, %393, %394)
}

def @func_2433(%var_2330: Tensor[(3, 8, 6), float32], %var_2331: Tensor[(3, 8, 6), float32], %var_2355: Tensor[(33, 4), uint32], %var_2356: Tensor[(1300), float32], %var_2413: Tensor[(78), float64]) -> (Tensor[(1300), float64], Tensor[(33, 4), uint32], Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(13, 9, 2), float64], Tensor[(234), int32], Tensor[(3, 8, 6), float32], Tensor[(3, 8, 6), float32], Tensor[(13, 10, 10), bool], Tensor[(1, 13, 6), float64], Tensor[(78), float64]) {
  %395 = cast(%var_2355, dtype="uint32") /* ty=Tensor[(33, 4), uint32] */;
  %396 = cast(%var_2356, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %397 = cast(%var_2356, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %398 = reshape(%395, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %399 = reshape(%396, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %400 = reshape(%397, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), bool] */;
  %401 = @func_1521(%398, %399, %400) /* ty=(Tensor[(4, 3, 11), bool], Tensor[(1300), float64], Tensor[(13, 10, 10), int16]) */;
  %402 = cast(%var_2356, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %403 = cast(%var_2356, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %404 = reshape(%402, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %405 = reshape(%403, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %406 = cast(meta[relay.Constant][27] /* ty=Tensor[(234), int32] */, dtype="int32") /* ty=Tensor[(234), int32] */;
  %407 = reshape(%406, newshape=[13, 9, 2]) /* ty=Tensor[(13, 9, 2), int32] */;
  %408 = @func_1654(%407) /* ty=(Tensor[(13, 9, 2), float64],) */;
  %409 = cast(%var_2331, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %410 = shape_of(%var_2330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%var_2330, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %413 = minimum(%411, %412) /* ty=Tensor[(3, 8, 6), float32] */;
  %414 = cast(%413, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %415 = asin(%414) /* ty=Tensor[(3, 8, 6), float32] */;
  %416 = cast(%415, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %417 = cast(%var_2330, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %418 = shape_of(%var_2331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%var_2331, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %421 = cast(%var_2356, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %422 = %401.1;
  %423 = cast(%422, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %424 = reshape(%421, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %425 = reshape(%423, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %426 = cast(%var_2413, dtype="float64") /* ty=Tensor[(78), float64] */;
  %427 = reshape(%426, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), float64] */;
  %428 = @func_1152(%404, %405) /* ty=Tensor[(13, 10, 10), bool] */;
  %429 = %408.0;
  %430 = sin(%416) /* ty=Tensor[(3, 8, 6), float32] */;
  %431 = power(%419, %420) /* ty=Tensor[(3, 8, 6), float32] */;
  %432 = @func_1152(%424, %425) /* ty=Tensor[(13, 10, 10), bool] */;
  %433 = @func_636(%427) /* ty=Tensor[(1, 13, 6), float64] */;
  (%422, %var_2355, %var_2356, %428, %429, meta[relay.Constant][27] /* ty=Tensor[(234), int32] */, %430, %431, %432, %433, %var_2413)
}

def @func_5228(%var_5214: Tensor[(220, 2), uint16]) -> (Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16], Tensor[(220, 2), uint16], Tensor[(650, 2), float32]) {
  %434 = @func_4771() /* ty=(Tensor[(16, 2, 5), float64],) */;
  %435 = cast(%var_5214, dtype="uint16") /* ty=Tensor[(220, 2), uint16] */;
  %436 = cast(meta[relay.Constant][28] /* ty=Tensor[(650, 2), float32] */, dtype="float32") /* ty=Tensor[(650, 2), float32] */;
  %437 = reshape(%435, newshape=[11, 8, 5]) /* ty=Tensor[(11, 8, 5), uint16] */;
  %438 = reshape(%436, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %439 = @func_4537(%437, %438) /* ty=(Tensor[(11, 8, 5), bool], Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), int16]) */;
  %440 = %434.0;
  %441 = %439.1;
  (%440, %441, %var_5214, meta[relay.Constant][28] /* ty=Tensor[(650, 2), float32] */)
}

def @func_2037(%var_1970: Tensor[(5, 11, 13), float64], %var_1978: Tensor[(234), int32]) -> (Tensor[(13, 9, 2), float64], Tensor[(234), int32], Tensor[(13, 9, 2), float64], Tensor[(1, 11, 5), uint8], uint8, Tensor[(8, 24), int64], Tensor[(5, 11, 13), bool], Tensor[(3, 10, 6), float32], Tensor[(180), float32]) {
  %442 = cast(%var_1978, dtype="int32") /* ty=Tensor[(234), int32] */;
  %443 = reshape(%442, newshape=[13, 9, 2]) /* ty=Tensor[(13, 9, 2), int32] */;
  %444 = @func_1654(%443) /* ty=(Tensor[(13, 9, 2), float64],) */;
  %445 = %444.0;
  %446 = cast(%445, dtype="int32") /* ty=Tensor[(13, 9, 2), int32] */;
  %447 = reshape(%446, newshape=[13, 9, 2]) /* ty=Tensor[(13, 9, 2), int32] */;
  %448 = @func_1654(%447) /* ty=(Tensor[(13, 9, 2), float64],) */;
  %449 = cast(meta[relay.Constant][29] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %450 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 24), int64] */, dtype="int64") /* ty=Tensor[(8, 24), int64] */;
  %451 = reshape(%449, newshape=[]) /* ty=uint8 */;
  %452 = reshape(%450, newshape=[96, 2]) /* ty=Tensor[(96, 2), int64] */;
  %453 = @func_1039(%451, %452) /* ty=(Tensor[(1, 11, 5), uint8], Tensor[(6, 30), bool], Tensor[(1620), float64], Tensor[(96, 2), int64]) */;
  %454 = cast(%var_1970, dtype="float64") /* ty=Tensor[(5, 11, 13), float64] */;
  %455 = sinh(%454) /* ty=Tensor[(5, 11, 13), float64] */;
  %456 = cast(%var_1970, dtype="bool") /* ty=Tensor[(5, 11, 13), bool] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%455, dtype="bool") /* ty=Tensor[(5, 11, 13), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %460 = cast(meta[relay.Constant][31] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %461 = reshape(%460, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
  %462 = @func_195(%461) /* ty=(Tensor[(3, 10, 6), float32],) */;
  %463 = %448.0;
  %464 = %453.0;
  %465 = equal(%458, %459) /* ty=Tensor[(5, 11, 13), bool] */;
  %466 = %462.0;
  (%445, %var_1978, %463, %464, meta[relay.Constant][29] /* ty=uint8 */, meta[relay.Constant][30] /* ty=Tensor[(8, 24), int64] */, %465, %466, meta[relay.Constant][31] /* ty=Tensor[(180), float32] */)
}

def @func_4495() -> Tensor[(16, 2, 5), uint16] {
  @func_3161() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_5409() -> (Tensor[(16, 2, 5), uint16], Tensor[(9, 5, 12), float64], Tensor[(270, 2), float64], Tensor[(13, 9, 2), float64], Tensor[(715), float64], Tensor[(234), int32]) {
  %467 = cast(meta[relay.Constant][32] /* ty=Tensor[(270, 2), float64] */, dtype="float64") /* ty=Tensor[(270, 2), float64] */;
  %468 = reshape(%467, newshape=[9, 5, 12]) /* ty=Tensor[(9, 5, 12), float64] */;
  %469 = cast(meta[relay.Constant][33] /* ty=Tensor[(715), float64] */, dtype="float64") /* ty=Tensor[(715), float64] */;
  %470 = cast(meta[relay.Constant][34] /* ty=Tensor[(234), int32] */, dtype="int32") /* ty=Tensor[(234), int32] */;
  %471 = reshape(%469, newshape=[5, 11, 13]) /* ty=Tensor[(5, 11, 13), float64] */;
  %472 = reshape(%470, newshape=[234]) /* ty=Tensor[(234), int32] */;
  %473 = @func_2037(%471, %472) /* ty=(Tensor[(13, 9, 2), float64], Tensor[(234), int32], Tensor[(13, 9, 2), float64], Tensor[(1, 11, 5), uint8], uint8, Tensor[(8, 24), int64], Tensor[(5, 11, 13), bool], Tensor[(3, 10, 6), float32], Tensor[(180), float32]) */;
  %474 = @func_3450() /* ty=Tensor[(16, 2, 5), uint16] */;
  %475 = @func_2714(%468) /* ty=Tensor[(9, 5, 12), float64] */;
  %476 = %473.0;
  (%474, %475, meta[relay.Constant][32] /* ty=Tensor[(270, 2), float64] */, %476, meta[relay.Constant][33] /* ty=Tensor[(715), float64] */, meta[relay.Constant][34] /* ty=Tensor[(234), int32] */)
}

def @func_3161() -> Tensor[(16, 2, 5), uint16] {
  @func_2794() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_3818() -> (Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16]) {
  %477 = @func_2691() /* ty=Tensor[(16, 2, 5), float64] */;
  %478 = @func_3425() /* ty=Tensor[(16, 2, 5), uint16] */;
  (%477, %478)
}

def @func_5619() -> Tensor[(16, 2, 5), uint16] {
  @func_3425() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_1654(%var_1637: Tensor[(13, 9, 2), int32]) -> (Tensor[(13, 9, 2), float64],) {
  %479 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 1, 2), int32] */, dtype="int32") /* ty=Tensor[(13, 1, 2), int32] */;
  %480 = cast(%var_1637, dtype="int32") /* ty=Tensor[(13, 9, 2), int32] */;
  %481 = bitwise_and(%479, %480) /* ty=Tensor[(13, 9, 2), int32] */;
  %482 = cast(%481, dtype="float64") /* ty=Tensor[(13, 9, 2), float64] */;
  %483 = sqrt(%482) /* ty=Tensor[(13, 9, 2), float64] */;
  (%483,)
}

def @func_4920() -> Tensor[(16, 2, 5), uint16] {
  @func_2794() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_1152(%var_1120: Tensor[(13, 10, 10), float32], %var_1141: Tensor[(13, 10, 10), float32]) -> Tensor[(13, 10, 10), bool] {
  %484 = cast(%var_1120, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
  %485 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(13, 10, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %488 = divide(%486, %487) /* ty=Tensor[(13, 10, 10), float32] */;
  %489 = cast(%var_1141, dtype="bool") /* ty=Tensor[(13, 10, 10), bool] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="bool") /* ty=Tensor[(13, 10, 10), bool] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%491, %492) /* ty=Tensor[(13, 10, 10), bool] */
}

def @func_3570(%var_3512: Tensor[(160), uint16], %var_3526: Tensor[(16, 2, 5), float32], %var_3556: Tensor[(1, 120), float32]) -> (Tensor[(10, 4, 16), bool], Tensor[(3, 10, 6), float32], Tensor[(180), float32], Tensor[(16, 2, 5), int16], Tensor[(10, 4, 16), bool], Tensor[(4, 2, 15), float32], Tensor[(1, 120), float32], Tensor[(160), float64]) {
  %493 = @func_2954() /* ty=(Tensor[(10, 4, 16), bool],) */;
  %494 = cast(meta[relay.Constant][37] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %495 = reshape(%494, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
  %496 = @func_195(%495) /* ty=(Tensor[(3, 10, 6), float32],) */;
  %497 = cast(%var_3512, dtype="uint16") /* ty=Tensor[(160), uint16] */;
  %498 = cast(%var_3512, dtype="float32") /* ty=Tensor[(160), float32] */;
  %499 = reshape(%497, newshape=[16, 2, 5]) /* ty=Tensor[(16, 2, 5), uint16] */;
  %500 = reshape(%498, newshape=[16, 2, 5]) /* ty=Tensor[(16, 2, 5), float32] */;
  %501 = @func_2910(%499, %500) /* ty=(Tensor[(16, 2, 5), bool], Tensor[(16, 2, 5), float32], Tensor[(16, 2, 5), float32]) */;
  %502 = %501.1;
  %503 = cast(%var_3526, dtype="int16") /* ty=Tensor[(16, 2, 5), int16] */;
  %504 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%502, dtype="int16") /* ty=Tensor[(16, 2, 5), int16] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %507 = @func_2954() /* ty=(Tensor[(10, 4, 16), bool],) */;
  %508 = cast(%var_3556, dtype="float32") /* ty=Tensor[(1, 120), float32] */;
  %509 = reshape(%508, newshape=[4, 2, 15]) /* ty=Tensor[(4, 2, 15), float32] */;
  %510 = @func_1739(%509) /* ty=(Tensor[(4, 2, 15), float32],) */;
  %511 = cast(%502, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
  %512 = shape_of(%var_3512, dtype="int32") /* ty=Tensor[(1), int32] */;
  %513 = cast(%var_3512, dtype="float64") /* ty=Tensor[(160), float64] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?), float64] */;
  %515 = %493.0;
  %516 = %496.0;
  %517 = minimum(%505, %506) /* ty=Tensor[(16, 2, 5), int16] */;
  %518 = %507.0;
  %519 = %510.0;
  %520 = divide(%513, %514) /* ty=Tensor[(160), float64] */;
  (%515, %516, meta[relay.Constant][37] /* ty=Tensor[(180), float32] */, %517, %518, %519, %var_3556, %520)
}

def @func_1039(%var_1014: uint8, %var_1027: Tensor[(96, 2), int64]) -> (Tensor[(1, 11, 5), uint8], Tensor[(6, 30), bool], Tensor[(1620), float64], Tensor[(96, 2), int64]) {
  %521 = cast(%var_1014, dtype="uint8") /* ty=uint8 */;
  %522 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 11, 5), uint8] */, dtype="uint8") /* ty=Tensor[(1, 11, 5), uint8] */;
  %523 = cast(%var_1014, dtype="float64") /* ty=float64 */;
  %524 = cast(meta[relay.Constant][39] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %525 = cast(%var_1027, dtype="int64") /* ty=Tensor[(96, 2), int64] */;
  %526 = reshape(%523, newshape=[]) /* ty=float64 */;
  %527 = reshape(%524, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %528 = reshape(%525, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %529 = @func_730(%526, %527, %528) /* ty=(Tensor[(15, 12, 9), float64], Tensor[(192), int64], Tensor[(6, 30), bool]) */;
  %530 = minimum(%521, %522) /* ty=Tensor[(1, 11, 5), uint8] */;
  %531 = %529.2;
  (%530, %531, meta[relay.Constant][39] /* ty=Tensor[(1620), float64] */, %var_1027)
}

def @func_4697(%var_4694: Tensor[(192), int64]) -> (Tensor[(16, 2, 5), float64], Tensor[(3, 10, 6), float32], Tensor[(192), int64]) {
  %532 = cast(%var_4694, dtype="int64") /* ty=Tensor[(192), int64] */;
  %533 = cast(%var_4694, dtype="int64") /* ty=Tensor[(192), int64] */;
  %534 = reshape(%532, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %535 = reshape(%533, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %536 = @func_284(%534, %535) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(6, 30), float32], Tensor[(3, 10, 6), float32], Tensor[(4, 12, 4), bool], Tensor[(3, 10, 6), float32], Tensor[(3, 10, 6), float32]) */;
  %537 = @func_2691() /* ty=Tensor[(16, 2, 5), float64] */;
  %538 = %536.5;
  (%537, %538, %var_4694)
}

def @func_730(%var_689: float64, %var_690: Tensor[(15, 12, 9), float64], %var_704: Tensor[(192), int64]) -> (Tensor[(15, 12, 9), float64], Tensor[(192), int64], Tensor[(6, 30), bool]) {
  %539 = cast(%var_689, dtype="float64") /* ty=float64 */;
  %540 = cast(%var_690, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %541 = cast(%var_704, dtype="int64") /* ty=Tensor[(192), int64] */;
  %542 = cast(%var_704, dtype="int64") /* ty=Tensor[(192), int64] */;
  %543 = reshape(%541, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %544 = reshape(%542, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %545 = @func_284(%543, %544) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(6, 30), float32], Tensor[(3, 10, 6), float32], Tensor[(4, 12, 4), bool], Tensor[(3, 10, 6), float32], Tensor[(3, 10, 6), float32]) */;
  %546 = %545.1;
  %547 = cast(%546, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %548 = cast(%var_689, dtype="bool") /* ty=bool */;
  %549 = minimum(%539, %540) /* ty=Tensor[(15, 12, 9), float64] */;
  %550 = equal(%547, %548) /* ty=Tensor[(6, 30), bool] */;
  (%549, %var_704, %550)
}

def @func_5593(%var_5585: Tensor[(132), uint32]) -> (Tensor[(16, 2, 5), float64], Tensor[(480), float32], Tensor[(132), uint32]) {
  %551 = @func_3818() /* ty=(Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16]) */;
  %552 = cast(%var_5585, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %553 = reshape(%552, newshape=[33, 4]) /* ty=Tensor[(33, 4), uint32] */;
  %554 = @func_4335(%553) /* ty=(Tensor[(11, 3, 9), float32], Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(16, 10, 3), float32], Tensor[(480), float32], Tensor[(13, 10, 10), int8], Tensor[(33, 4), uint32]) */;
  %555 = %551.0;
  %556 = %554.5;
  (%555, %556, %var_5585)
}

def @func_4873(%var_4855: float64, %var_4856: Tensor[(3, 1, 16), float64]) -> (Tensor[(3, 1, 16), bool], Tensor[(16, 2, 5), uint16]) {
  %557 = cast(%var_4855, dtype="bool") /* ty=bool */;
  %558 = cast(%var_4856, dtype="bool") /* ty=Tensor[(3, 1, 16), bool] */;
  %559 = less_equal(%557, %558) /* ty=Tensor[(3, 1, 16), bool] */;
  %560 = @func_2794() /* ty=Tensor[(16, 2, 5), uint16] */;
  (%559, %560)
}

def @func_3970(%var_3932: Tensor[(3, 10, 6), float32], %var_3951: Tensor[(96, 2), int64]) -> (Tensor[(3, 10, 6), uint8], Tensor[(16, 2, 5), float64], Tensor[(4, 12, 4), bool], Tensor[(96, 2), int64], Tensor[(13, 9, 2), float64], Tensor[(39, 6), int32]) {
  %561 = @func_3336() /* ty=(Tensor[(16, 2, 5), float64], Tensor[(3, 10, 6), float32], Tensor[(66), float32], Tensor[(24, 8), int64]) */;
  %562 = %561.1;
  %563 = cast(%var_3932, dtype="uint8") /* ty=Tensor[(3, 10, 6), uint8] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%562, dtype="uint8") /* ty=Tensor[(3, 10, 6), uint8] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %567 = @func_2794() /* ty=Tensor[(16, 2, 5), uint16] */;
  %568 = cast(%567, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
  %569 = cast(%var_3951, dtype="int64") /* ty=Tensor[(96, 2), int64] */;
  %570 = cast(%var_3951, dtype="int64") /* ty=Tensor[(96, 2), int64] */;
  %571 = reshape(%569, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %572 = reshape(%570, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %573 = @func_284(%571, %572) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(6, 30), float32], Tensor[(3, 10, 6), float32], Tensor[(4, 12, 4), bool], Tensor[(3, 10, 6), float32], Tensor[(3, 10, 6), float32]) */;
  %574 = cast(meta[relay.Constant][40] /* ty=Tensor[(39, 6), int32] */, dtype="int32") /* ty=Tensor[(39, 6), int32] */;
  %575 = reshape(%574, newshape=[13, 9, 2]) /* ty=Tensor[(13, 9, 2), int32] */;
  %576 = @func_1654(%575) /* ty=(Tensor[(13, 9, 2), float64],) */;
  %577 = bitwise_or(%565, %566) /* ty=Tensor[(3, 10, 6), uint8] */;
  %578 = rsqrt(%568) /* ty=Tensor[(16, 2, 5), float64] */;
  %579 = %573.3;
  %580 = %576.0;
  (%577, %578, %579, %var_3951, %580, meta[relay.Constant][40] /* ty=Tensor[(39, 6), int32] */)
}

def @func_3649() -> Tensor[(16, 2, 5), uint16] {
  @func_3425() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_4335(%var_4316: Tensor[(33, 4), uint32]) -> (Tensor[(11, 3, 9), float32], Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(16, 10, 3), float32], Tensor[(480), float32], Tensor[(13, 10, 10), int8], Tensor[(33, 4), uint32]) {
  %581 = @func_3392() /* ty=(Tensor[(11, 3, 9), float32],) */;
  %582 = %581.0;
  %583 = cast(%582, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
  %584 = @func_3849() /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %585 = cast(meta[relay.Constant][41] /* ty=Tensor[(1300), float32] */, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %586 = cast(meta[relay.Constant][41] /* ty=Tensor[(1300), float32] */, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %587 = reshape(%585, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %588 = reshape(%586, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %589 = cast(meta[relay.Constant][42] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %590 = reshape(%589, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float32] */;
  %591 = @func_393(%590) /* ty=(Tensor[(16, 10, 3), float32],) */;
  %592 = cast(meta[relay.Constant][41] /* ty=Tensor[(1300), float32] */, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %593 = cast(%var_4316, dtype="uint32") /* ty=Tensor[(33, 4), uint32] */;
  %594 = reshape(%592, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %595 = reshape(%593, newshape=[132]) /* ty=Tensor[(132), uint32] */;
  %596 = @func_4128(%594, %595) /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), int8], Tensor[(14, 6, ?), uint16], Tensor[(84, 1), float64], Tensor[(192), float32], Tensor[(13, 10, 10), int16], Tensor[(132), uint32], Tensor[(16, 2, 5), uint16]) */;
  %597 = cosh(%583) /* ty=Tensor[(11, 3, 9), float32] */;
  %598 = %584.0;
  %599 = @func_1152(%587, %588) /* ty=Tensor[(13, 10, 10), bool] */;
  %600 = %591.0;
  %601 = %596.1;
  (%597, %598, %599, meta[relay.Constant][41] /* ty=Tensor[(1300), float32] */, %600, meta[relay.Constant][42] /* ty=Tensor[(480), float32] */, %601, %var_4316)
}

def @func_3207(%var_3172: Tensor[(5, 12, 3), uint64], %var_3173: Tensor[(5, 12, 3), uint64], %var_3182: uint8, %var_3196: Tensor[(1200), float64]) -> (Tensor[(5, 12, 3), bool], uint8, Tensor[(192), int64], Tensor[(6, 30), float64], Tensor[(15, 10, 8), float32], Tensor[(1200), float64], Tensor[(3, 10, 6), float32]) {
  %602 = cast(%var_3173, dtype="bool") /* ty=Tensor[(5, 12, 3), bool] */;
  %603 = shape_of(%var_3172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%var_3172, dtype="bool") /* ty=Tensor[(5, 12, 3), bool] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %606 = cast(%var_3182, dtype="uint8") /* ty=uint8 */;
  %607 = cast(meta[relay.Constant][43] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %608 = reshape(%606, newshape=[]) /* ty=uint8 */;
  %609 = reshape(%607, newshape=[96, 2]) /* ty=Tensor[(96, 2), int64] */;
  %610 = @func_1039(%608, %609) /* ty=(Tensor[(1, 11, 5), uint8], Tensor[(6, 30), bool], Tensor[(1620), float64], Tensor[(96, 2), int64]) */;
  %611 = %610.1;
  %612 = cast(%611, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %613 = cast(%var_3196, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %614 = reshape(%613, newshape=[15, 10, 8]) /* ty=Tensor[(15, 10, 8), float64] */;
  %615 = @func_2231(%614) /* ty=(Tensor[(15, 10, 8), uint8], Tensor[(15, 10, 8), float32]) */;
  %616 = cast(meta[relay.Constant][43] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %617 = cast(meta[relay.Constant][43] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
  %618 = reshape(%616, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %619 = reshape(%617, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %620 = @func_284(%618, %619) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(6, 30), float32], Tensor[(3, 10, 6), float32], Tensor[(4, 12, 4), bool], Tensor[(3, 10, 6), float32], Tensor[(3, 10, 6), float32]) */;
  %621 = greater(%604, %605) /* ty=Tensor[(5, 12, 3), bool] */;
  %622 = sinh(%612) /* ty=Tensor[(6, 30), float64] */;
  %623 = %615.1;
  %624 = %620.5;
  (%621, %var_3182, meta[relay.Constant][43] /* ty=Tensor[(192), int64] */, %622, %623, %var_3196, %624)
}

def @func_3849() -> (Tensor[(16, 2, 5), uint16],) {
  %625 = @func_3161() /* ty=Tensor[(16, 2, 5), uint16] */;
  (%625,)
}

def @func_3336() -> (Tensor[(16, 2, 5), float64], Tensor[(3, 10, 6), float32], Tensor[(66), float32], Tensor[(24, 8), int64]) {
  %626 = cast(meta[relay.Constant][44] /* ty=Tensor[(66), float32] */, dtype="float32") /* ty=Tensor[(66), float32] */;
  %627 = cast(meta[relay.Constant][45] /* ty=Tensor[(24, 8), int64] */, dtype="int64") /* ty=Tensor[(24, 8), int64] */;
  %628 = reshape(%626, newshape=[6, 1, 11]) /* ty=Tensor[(6, 1, 11), float32] */;
  %629 = reshape(%627, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %630 = @func_1107(%628, %629) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(84), float64], Tensor[(192), int64], Tensor[(6, ?, 11), uint32]) */;
  %631 = @func_2691() /* ty=Tensor[(16, 2, 5), float64] */;
  %632 = %630.0;
  (%631, %632, meta[relay.Constant][44] /* ty=Tensor[(66), float32] */, meta[relay.Constant][45] /* ty=Tensor[(24, 8), int64] */)
}

def @func_2691() -> Tensor[(16, 2, 5), float64] {
  %633 = cast(meta[relay.Constant][46] /* ty=Tensor[(16, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
  sin(%633) /* ty=Tensor[(16, 2, 5), float64] */
}

def @func_4002() -> Tensor[(16, 2, 5), uint16] {
  %634 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %634.0
}

def @func_4625() -> Tensor[(16, 2, 5), uint16] {
  @func_3649() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_5505(%var_5499: float64, %var_5500: Tensor[(15, 1, 4), float64]) -> Tensor[(15, 1, 4), float64] {
  %635 = cast(%var_5499, dtype="float64") /* ty=float64 */;
  %636 = cast(%var_5500, dtype="float64") /* ty=Tensor[(15, 1, 4), float64] */;
  divide(%635, %636) /* ty=Tensor[(15, 1, 4), float64] */
}

def @func_4537(%var_4512: Tensor[(11, 8, 5), uint16], %var_4523: Tensor[(1300), float32]) -> (Tensor[(11, 8, 5), bool], Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), int16]) {
  %637 = cast(%var_4512, dtype="bool") /* ty=Tensor[(11, 8, 5), bool] */;
  %638 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(11, 8, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(meta[relay.Constant][47] /* ty=Tensor[(11, 8, 5), uint16] */, dtype="bool") /* ty=Tensor[(11, 8, 5), bool] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %641 = cast(%var_4523, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %642 = reshape(%641, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %643 = @func_4033(%642) /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(1300), float32], Tensor[(1300), float32], Tensor[(13, 10, 10), int16]) */;
  %644 = cast(%var_4523, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %645 = cast(%var_4523, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %646 = reshape(%644, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %647 = reshape(%645, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %648 = @func_1152(%646, %647) /* ty=Tensor[(13, 10, 10), bool] */;
  %649 = cast(%var_4523, dtype="int16") /* ty=Tensor[(1300), int16] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="int16") /* ty=Tensor[(13, 10, 10), int16] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %653 = greater(%639, %640) /* ty=Tensor[(11, 8, 5), bool] */;
  %654 = %643.0;
  %655 = right_shift(%651, %652) /* ty=Tensor[(13, 10, 10), int16] */;
  (%653, %654, %655)
}

def @main(%var_5884: Tensor[(16, 2, 5), uint16]) -> (Tensor[(16, 2, 5), float32],) {
  %656 = @func_3849() /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %657 = %656.0;
  %658 = cast(%var_5884, dtype="bool") /* ty=Tensor[(16, 2, 5), bool] */;
  %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%657, dtype="bool") /* ty=Tensor[(16, 2, 5), bool] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %662 = greater(%660, %661) /* ty=Tensor[(16, 2, 5), bool] */;
  %663 = @func_4625() /* ty=Tensor[(16, 2, 5), uint16] */;
  %664 = cast(%663, dtype="float32") /* ty=Tensor[(16, 2, 5), float32] */;
  %665 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%662, dtype="float32") /* ty=Tensor[(16, 2, 5), float32] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %668 = maximum(%666, %667) /* ty=Tensor[(16, 2, 5), float32] */;
  (%668,)
}

def @func_2794() -> Tensor[(16, 2, 5), uint16] {
  %669 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %669.0
}

def @func_5496() -> (Tensor[(16, 2, 5), float64],) {
  %670 = @func_2691() /* ty=Tensor[(16, 2, 5), float64] */;
  %671 = cast(%670, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
  %672 = acos(%671) /* ty=Tensor[(16, 2, 5), float64] */;
  (%672,)
}

def @func_393(%var_385: Tensor[(16, 10, 3), float32]) -> (Tensor[(16, 10, 3), float32],) {
  %673 = cast(%var_385, dtype="float32") /* ty=Tensor[(16, 10, 3), float32] */;
  %674 = exp(%673) /* ty=Tensor[(16, 10, 3), float32] */;
  (%674,)
}

def @func_2496(%var_2471: Tensor[(1, 12, 11), float64], %var_2472: Tensor[(1, 12, 11), float64]) -> (Tensor[(?, 12, 11), float32], Tensor[(13, 10, 10), int16], Tensor[(1300, 1), float32]) {
  %675 = cast(%var_2472, dtype="float64") /* ty=Tensor[(1, 12, 11), float64] */;
  %676 = shape_of(%var_2471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%var_2471, dtype="float64") /* ty=Tensor[(1, 12, 11), float64] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %679 = minimum(%677, %678) /* ty=Tensor[(?, 12, 11), float64] */;
  %680 = cast(%var_2471, dtype="float32") /* ty=Tensor[(1, 12, 11), float32] */;
  %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(%679, dtype="float32") /* ty=Tensor[(?, 12, 11), float32] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %684 = cast(%var_2471, dtype="uint32") /* ty=Tensor[(1, 12, 11), uint32] */;
  %685 = cast(meta[relay.Constant][48] /* ty=Tensor[(1300, 1), float32] */, dtype="float32") /* ty=Tensor[(1300, 1), float32] */;
  %686 = cast(meta[relay.Constant][48] /* ty=Tensor[(1300, 1), float32] */, dtype="bool") /* ty=Tensor[(1300, 1), bool] */;
  %687 = reshape(%684, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %688 = reshape(%685, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %689 = reshape(%686, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), bool] */;
  %690 = @func_1521(%687, %688, %689) /* ty=(Tensor[(4, 3, 11), bool], Tensor[(1300), float64], Tensor[(13, 10, 10), int16]) */;
  %691 = cast(meta[relay.Constant][48] /* ty=Tensor[(1300, 1), float32] */, dtype="float32") /* ty=Tensor[(1300, 1), float32] */;
  %692 = mod(%682, %683) /* ty=Tensor[(?, 12, 11), float32] */;
  %693 = %690.2;
  %694 = tan(%691) /* ty=Tensor[(1300, 1), float32] */;
  (%692, %693, %694)
}

def @func_636(%var_613: Tensor[(1, 13, 6), float64]) -> Tensor[(1, 13, 6), float64] {
  %695 = cast(%var_613, dtype="float64") /* ty=Tensor[(1, 13, 6), float64] */;
  rsqrt(%695) /* ty=Tensor[(1, 13, 6), float64] */
}

def @func_4771() -> (Tensor[(16, 2, 5), float64],) {
  %696 = @func_3425() /* ty=Tensor[(16, 2, 5), uint16] */;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
  %698 = atanh(%697) /* ty=Tensor[(16, 2, 5), float64] */;
  (%698,)
}

def @func_4809() -> (Tensor[(16, 2, 5), uint16],) {
  %699 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %700 = %699.0;
  (%700,)
}

def @func_3228(%var_3217: Tensor[(13, 16, 9), float64], %var_3218: Tensor[(13, 16, 9), float64]) -> Tensor[(13, 16, 9), float64] {
  %701 = cast(%var_3218, dtype="float64") /* ty=Tensor[(13, 16, 9), float64] */;
  %702 = shape_of(%var_3217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%var_3217, dtype="float64") /* ty=Tensor[(13, 16, 9), float64] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %705 = power(%703, %704) /* ty=Tensor[(13, 16, 9), float64] */;
  %706 = cast(%705, dtype="float64") /* ty=Tensor[(13, 16, 9), float64] */;
  acosh(%706) /* ty=Tensor[(13, 16, 9), float64] */
}

def @func_5095() -> Tensor[(16, 2, 5), uint16] {
  %707 = @func_3849() /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %707.0
}

def @func_5699(%var_5686: Tensor[(10, 1, 11), float64]) -> Tensor[(10, 9, 11), float64] {
  %708 = cast(%var_5686, dtype="float64") /* ty=Tensor[(10, 1, 11), float64] */;
  %709 = cast(meta[relay.Constant][49] /* ty=Tensor[(10, 9, 11), float64] */, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  divide(%708, %709) /* ty=Tensor[(10, 9, 11), float64] */
}

def @func_5678(%var_5633: Tensor[(605, 3), uint8], %var_5645: Tensor[(480), float32], %var_5661: Tensor[(605, 3), uint8]) -> (Tensor[(16, 2, 5), uint16], Tensor[(15, 11, 11), float32], Tensor[(16, 10, 3), float32], Tensor[(480), float32], Tensor[(605, 3), uint32]) {
  %710 = cast(%var_5633, dtype="uint8") /* ty=Tensor[(605, 3), uint8] */;
  %711 = cast(%var_5633, dtype="uint8") /* ty=Tensor[(605, 3), uint8] */;
  %712 = reshape(%710, newshape=[15, 11, 11]) /* ty=Tensor[(15, 11, 11), uint8] */;
  %713 = reshape(%711, newshape=[15, 11, 11]) /* ty=Tensor[(15, 11, 11), uint8] */;
  %714 = cast(%var_5645, dtype="float32") /* ty=Tensor[(480), float32] */;
  %715 = reshape(%714, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float32] */;
  %716 = @func_393(%715) /* ty=(Tensor[(16, 10, 3), float32],) */;
  %717 = cast(%var_5661, dtype="uint32") /* ty=Tensor[(605, 3), uint32] */;
  %718 = shape_of(%var_5633, dtype="int32") /* ty=Tensor[(2), int32] */;
  %719 = cast(%var_5633, dtype="uint32") /* ty=Tensor[(605, 3), uint32] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %721 = @func_3649() /* ty=Tensor[(16, 2, 5), uint16] */;
  %722 = @func_5466(%712, %713) /* ty=Tensor[(15, 11, 11), float32] */;
  %723 = %716.0;
  %724 = left_shift(%719, %720) /* ty=Tensor[(605, 3), uint32] */;
  (%721, %722, %723, %var_5645, %724)
}

def @func_2231(%var_2204: Tensor[(15, 10, 8), float64]) -> (Tensor[(15, 10, 8), uint8], Tensor[(15, 10, 8), float32]) {
  %725 = cast(%var_2204, dtype="float64") /* ty=Tensor[(15, 10, 8), float64] */;
  %726 = sqrt(%725) /* ty=Tensor[(15, 10, 8), float64] */;
  %727 = cast(%var_2204, dtype="uint8") /* ty=Tensor[(15, 10, 8), uint8] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%726, dtype="uint8") /* ty=Tensor[(15, 10, 8), uint8] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %731 = cast(%var_2204, dtype="float32") /* ty=Tensor[(15, 10, 8), float32] */;
  %732 = minimum(%729, %730) /* ty=Tensor[(15, 10, 8), uint8] */;
  %733 = log(%731) /* ty=Tensor[(15, 10, 8), float32] */;
  (%732, %733)
}

def @func_5126(%var_5106: Tensor[(9, 3), uint16]) -> Tensor[(9, 3), bool] {
  %734 = cast(%var_5106, dtype="bool") /* ty=Tensor[(9, 3), bool] */;
  %735 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(9, 3), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %736 = cast(meta[relay.Constant][50] /* ty=Tensor[(9, 3), uint16] */, dtype="bool") /* ty=Tensor[(9, 3), bool] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  less_equal(%736, %737) /* ty=Tensor[(9, 3), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2233(%var_2232: Tensor[(15, 10, 8), float64]) -> (Tensor[(15, 10, 8), uint8], Tensor[(15, 10, 8), float32]) {
  %9 = fn (%var_2204: Tensor[(15, 10, 8), float64]) -> (Tensor[(15, 10, 8), uint8], Tensor[(15, 10, 8), float32]) {
    %0 = cast(%var_2204, dtype="float64") /* ty=Tensor[(15, 10, 8), float64] */;
    %1 = sqrt(%0) /* ty=Tensor[(15, 10, 8), float64] */;
    %2 = cast(%var_2204, dtype="uint8") /* ty=Tensor[(15, 10, 8), uint8] */;
    %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
    %4 = cast(%1, dtype="uint8") /* ty=Tensor[(15, 10, 8), uint8] */;
    %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %6 = cast(%var_2204, dtype="float32") /* ty=Tensor[(15, 10, 8), float32] */;
    %7 = minimum(%4, %5) /* ty=Tensor[(15, 10, 8), uint8] */;
    %8 = log(%6) /* ty=Tensor[(15, 10, 8), float32] */;
    (%7, %8)
  };
  %9(%var_2232) /* ty=(Tensor[(15, 10, 8), uint8], Tensor[(15, 10, 8), float32]) */
}

def @func_735(%var_732: float64, %var_733: Tensor[(15, 12, 9), float64], %var_734: Tensor[(192), int64]) -> (Tensor[(15, 12, 9), float64], Tensor[(192), int64], Tensor[(6, 30), bool]) {
  @func_730(%var_732, %var_733, %var_734) /* ty=(Tensor[(15, 12, 9), float64], Tensor[(192), int64], Tensor[(6, 30), bool]) */
}

def @func_284(%var_245: Tensor[(4, 12, 4), int64], %var_246: Tensor[(4, 12, 4), int64]) -> (Tensor[(3, 10, 6), float32], Tensor[(6, 30), float32], Tensor[(3, 10, 6), float32], Tensor[(4, 12, 4), bool], Tensor[(3, 10, 6), float32], Tensor[(3, 10, 6), float32]) {
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 30), float32] */, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %11 = reshape(%10, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
  %12 = @func_195(%11) /* ty=(Tensor[(3, 10, 6), float32],) */;
  %13 = %12.0;
  %14 = cast(%13, dtype="float32") /* ty=Tensor[(3, 10, 6), float32] */;
  %15 = reshape(%14, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
  %16 = @func_195(%15) /* ty=(Tensor[(3, 10, 6), float32],) */;
  %17 = cast(%var_246, dtype="float64") /* ty=Tensor[(4, 12, 4), float64] */;
  %18 = sin(%17) /* ty=Tensor[(4, 12, 4), float64] */;
  %19 = cast(%var_246, dtype="int64") /* ty=Tensor[(4, 12, 4), int64] */;
  %20 = shape_of(%var_245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%var_245, dtype="int64") /* ty=Tensor[(4, 12, 4), int64] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %23 = minimum(%21, %22) /* ty=Tensor[(4, 12, 4), int64] */;
  %24 = cast(%23, dtype="bool") /* ty=Tensor[(4, 12, 4), bool] */;
  %25 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%18, dtype="bool") /* ty=Tensor[(4, 12, 4), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %28 = cast(%13, dtype="float32") /* ty=Tensor[(3, 10, 6), float32] */;
  %29 = reshape(%28, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
  %30 = @func_195(%29) /* ty=(Tensor[(3, 10, 6), float32],) */;
  %31 = %30.0;
  %32 = cast(%31, dtype="float32") /* ty=Tensor[(3, 10, 6), float32] */;
  %33 = reshape(%32, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
  %34 = @func_195(%33) /* ty=(Tensor[(3, 10, 6), float32],) */;
  %35 = %16.0;
  %36 = logical_and(%26, %27) /* ty=Tensor[(4, 12, 4), bool] */;
  %37 = %34.0;
  (%13, meta[relay.Constant][0] /* ty=Tensor[(6, 30), float32] */, %35, %36, %31, %37)
}

def @func_2440(%var_2435: Tensor[(3, 8, 6), float32], %var_2436: Tensor[(3, 8, 6), float32], %var_2437: Tensor[(33, 4), uint32], %var_2438: Tensor[(1300), float32], %var_2439: Tensor[(78), float64]) -> (Tensor[(1300), float64], Tensor[(33, 4), uint32], Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(13, 9, 2), float64], Tensor[(234), int32], Tensor[(3, 8, 6), float32], Tensor[(3, 8, 6), float32], Tensor[(13, 10, 10), bool], Tensor[(1, 13, 6), float64], Tensor[(78), float64]) {
  @func_2433(%var_2435, %var_2436, %var_2437, %var_2438, %var_2439) /* ty=(Tensor[(1300), float64], Tensor[(33, 4), uint32], Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(13, 9, 2), float64], Tensor[(234), int32], Tensor[(3, 8, 6), float32], Tensor[(3, 8, 6), float32], Tensor[(13, 10, 10), bool], Tensor[(1, 13, 6), float64], Tensor[(78), float64]) */
}

def @func_4198(%var_4197: Tensor[(4, 9, 8), float64]) -> Tensor[(4, 9, 8), float64] {
  %46 = fn (%var_4182: Tensor[(4, 9, 8), float64]) -> Tensor[(4, 9, 8), float64] {
    %38 = cast(%var_4182, dtype="float64") /* ty=Tensor[(4, 9, 8), float64] */;
    %39 = atanh(%38) /* ty=Tensor[(4, 9, 8), float64] */;
    %40 = cast(%39, dtype="float32") /* ty=Tensor[(4, 9, 8), float32] */;
    %41 = log2(%40) /* ty=Tensor[(4, 9, 8), float32] */;
    %42 = cast(%39, dtype="float64") /* ty=Tensor[(4, 9, 8), float64] */;
    %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
    %44 = cast(%41, dtype="float64") /* ty=Tensor[(4, 9, 8), float64] */;
    %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%44, %45) /* ty=Tensor[(4, 9, 8), float64] */
  };
  %46(%var_4197) /* ty=Tensor[(4, 9, 8), float64] */
}

def @func_3228(%var_3217: Tensor[(13, 16, 9), float64], %var_3218: Tensor[(13, 16, 9), float64]) -> Tensor[(13, 16, 9), float64] {
  %47 = cast(%var_3218, dtype="float64") /* ty=Tensor[(13, 16, 9), float64] */;
  %48 = shape_of(%var_3217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%var_3217, dtype="float64") /* ty=Tensor[(13, 16, 9), float64] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %51 = power(%49, %50) /* ty=Tensor[(13, 16, 9), float64] */;
  %52 = cast(%51, dtype="float64") /* ty=Tensor[(13, 16, 9), float64] */;
  acosh(%52) /* ty=Tensor[(13, 16, 9), float64] */
}

def @func_3451() -> Tensor[(16, 2, 5), uint16] {
  %53 = fn () -> Tensor[(16, 2, 5), uint16] {
    @func_3161() /* ty=Tensor[(16, 2, 5), uint16] */
  };
  %53() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_3911(%var_3910: Tensor[(1300), float32]) -> (Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16], Tensor[(132), uint32], Tensor[(1300), float32], Tensor[(4, 3, 11), float64]) {
  %67 = fn (%var_3898: Tensor[(1300), float32]) -> (Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16], Tensor[(132), uint32], Tensor[(1300), float32], Tensor[(4, 3, 11), float64]) {
    %54 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
    %55 = cast(meta[relay.Constant][1] /* ty=Tensor[(132), uint32] */, dtype="uint32") /* ty=Tensor[(132), uint32] */;
    %56 = cast(%var_3898, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %57 = cast(%var_3898, dtype="bool") /* ty=Tensor[(1300), bool] */;
    %58 = reshape(%55, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
    %59 = reshape(%56, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
    %60 = reshape(%57, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), bool] */;
    %61 = @func_1521(%58, %59, %60) /* ty=(Tensor[(4, 3, 11), bool], Tensor[(1300), float64], Tensor[(13, 10, 10), int16]) */;
    %62 = %61.0;
    %63 = cast(%62, dtype="float64") /* ty=Tensor[(4, 3, 11), float64] */;
    %64 = @func_2691() /* ty=Tensor[(16, 2, 5), float64] */;
    %65 = %54.0;
    %66 = sigmoid(%63) /* ty=Tensor[(4, 3, 11), float64] */;
    (%64, %65, meta[relay.Constant][1] /* ty=Tensor[(132), uint32] */, %var_3898, %66)
  };
  %67(%var_3910) /* ty=(Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16], Tensor[(132), uint32], Tensor[(1300), float32], Tensor[(4, 3, 11), float64]) */
}

def @func_2910(%var_2851: Tensor[(16, 2, 5), uint16], %var_2893: Tensor[(16, 2, 5), float32]) -> (Tensor[(16, 2, 5), bool], Tensor[(16, 2, 5), float32], Tensor[(16, 2, 5), float32]) {
  %68 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %69 = %68.0;
  %70 = cast(%var_2851, dtype="bool") /* ty=Tensor[(16, 2, 5), bool] */;
  %71 = shape_of(%69, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%69, dtype="bool") /* ty=Tensor[(16, 2, 5), bool] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %74 = cast(%69, dtype="float32") /* ty=Tensor[(16, 2, 5), float32] */;
  %75 = cast(%var_2851, dtype="float32") /* ty=Tensor[(16, 2, 5), float32] */;
  %76 = asin(%75) /* ty=Tensor[(16, 2, 5), float32] */;
  %77 = cast(%var_2893, dtype="float32") /* ty=Tensor[(16, 2, 5), float32] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%76, dtype="float32") /* ty=Tensor[(16, 2, 5), float32] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %81 = less_equal(%72, %73) /* ty=Tensor[(16, 2, 5), bool] */;
  %82 = exp(%74) /* ty=Tensor[(16, 2, 5), float32] */;
  %83 = divide(%79, %80) /* ty=Tensor[(16, 2, 5), float32] */;
  (%81, %82, %83)
}

def @func_1152(%var_1120: Tensor[(13, 10, 10), float32], %var_1141: Tensor[(13, 10, 10), float32]) -> Tensor[(13, 10, 10), bool] {
  %84 = cast(%var_1120, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
  %85 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(13, 10, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 10, 10), float32] */, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %88 = divide(%86, %87) /* ty=Tensor[(13, 10, 10), float32] */;
  %89 = cast(%var_1141, dtype="bool") /* ty=Tensor[(13, 10, 10), bool] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%88, dtype="bool") /* ty=Tensor[(13, 10, 10), bool] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%91, %92) /* ty=Tensor[(13, 10, 10), bool] */
}

def @func_3268(%var_3265: Tensor[(9, 2, 12), uint8], %var_3266: Tensor[(9, 2, 12), uint8], %var_3267: Tensor[(6, 30), uint64]) -> (Tensor[(9, 2, 12), uint8], Tensor[(3, 10, 6), float32], Tensor[(6, 30), uint64], uint8, Tensor[(1200), float64]) {
  %108 = fn (%var_3246: Tensor[(9, 2, 12), uint8], %var_3247: Tensor[(9, 2, 12), uint8], %var_3256: Tensor[(6, 30), uint64]) -> (Tensor[(9, 2, 12), uint8], Tensor[(3, 10, 6), float32], Tensor[(6, 30), uint64], uint8, Tensor[(1200), float64]) {
    %93 = cast(%var_3247, dtype="uint8") /* ty=Tensor[(9, 2, 12), uint8] */;
    %94 = shape_of(%var_3246, dtype="int32") /* ty=Tensor[(3), int32] */;
    %95 = cast(%var_3246, dtype="uint8") /* ty=Tensor[(9, 2, 12), uint8] */;
    %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %97 = cast(%var_3256, dtype="uint64") /* ty=Tensor[(6, 30), uint64] */;
    %98 = cast(%var_3256, dtype="uint64") /* ty=Tensor[(6, 30), uint64] */;
    %99 = cast(meta[relay.Constant][3] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %100 = cast(meta[relay.Constant][4] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %101 = reshape(%97, newshape=[5, 12, 3]) /* ty=Tensor[(5, 12, 3), uint64] */;
    %102 = reshape(%98, newshape=[5, 12, 3]) /* ty=Tensor[(5, 12, 3), uint64] */;
    %103 = reshape(%99, newshape=[]) /* ty=uint8 */;
    %104 = reshape(%100, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
    %105 = @func_3207(%101, %102, %103, %104) /* ty=(Tensor[(5, 12, 3), bool], uint8, Tensor[(192), int64], Tensor[(6, 30), float64], Tensor[(15, 10, 8), float32], Tensor[(1200), float64], Tensor[(3, 10, 6), float32]) */;
    %106 = bitwise_xor(%95, %96) /* ty=Tensor[(9, 2, 12), uint8] */;
    %107 = %105.6;
    (%106, %107, %var_3256, meta[relay.Constant][3] /* ty=uint8 */, meta[relay.Constant][4] /* ty=Tensor[(1200), float64] */)
  };
  %108(%var_3265, %var_3266, %var_3267) /* ty=(Tensor[(9, 2, 12), uint8], Tensor[(3, 10, 6), float32], Tensor[(6, 30), uint64], uint8, Tensor[(1200), float64]) */
}

def @func_4003() -> Tensor[(16, 2, 5), uint16] {
  %110 = fn () -> Tensor[(16, 2, 5), uint16] {
    %109 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
    %109.0
  };
  %110() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_5200(%var_5199: Tensor[(5, 14, 9), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(16, 2, 5), float64]) {
  %115 = fn (%var_5181: Tensor[(5, 14, 9), float32]) -> (Tensor[(5, 14, 9), float32], Tensor[(16, 2, 5), float64]) {
    %111 = cast(%var_5181, dtype="float32") /* ty=Tensor[(5, 14, 9), float32] */;
    %112 = @func_4771() /* ty=(Tensor[(16, 2, 5), float64],) */;
    %113 = exp(%111) /* ty=Tensor[(5, 14, 9), float32] */;
    %114 = %112.0;
    (%113, %114)
  };
  %115(%var_5199) /* ty=(Tensor[(5, 14, 9), float32], Tensor[(16, 2, 5), float64]) */
}

def @func_1039(%var_1014: uint8, %var_1027: Tensor[(96, 2), int64]) -> (Tensor[(1, 11, 5), uint8], Tensor[(6, 30), bool], Tensor[(1620), float64], Tensor[(96, 2), int64]) {
  %116 = cast(%var_1014, dtype="uint8") /* ty=uint8 */;
  %117 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 11, 5), uint8] */, dtype="uint8") /* ty=Tensor[(1, 11, 5), uint8] */;
  %118 = cast(%var_1014, dtype="float64") /* ty=float64 */;
  %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %120 = cast(%var_1027, dtype="int64") /* ty=Tensor[(96, 2), int64] */;
  %121 = reshape(%118, newshape=[]) /* ty=float64 */;
  %122 = reshape(%119, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %123 = reshape(%120, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %124 = @func_730(%121, %122, %123) /* ty=(Tensor[(15, 12, 9), float64], Tensor[(192), int64], Tensor[(6, 30), bool]) */;
  %125 = minimum(%116, %117) /* ty=Tensor[(1, 11, 5), uint8] */;
  %126 = %124.2;
  (%125, %126, meta[relay.Constant][6] /* ty=Tensor[(1620), float64] */, %var_1027)
}

def @func_2914(%var_2912: Tensor[(16, 2, 5), uint16], %var_2913: Tensor[(16, 2, 5), float32]) -> (Tensor[(16, 2, 5), bool], Tensor[(16, 2, 5), float32], Tensor[(16, 2, 5), float32]) {
  @func_2910(%var_2912, %var_2913) /* ty=(Tensor[(16, 2, 5), bool], Tensor[(16, 2, 5), float32], Tensor[(16, 2, 5), float32]) */
}

def @func_941(%var_939: Tensor[(14, 6, 1), float64], %var_940: Tensor[(192), int64]) -> (Tensor[(3, 10, 6), float32], Tensor[(192), int64], Tensor[(14, 6, ?), float64], Tensor[(3, 10, 6), float32], Tensor[(14, 6, ?), uint16], Tensor[(192), int64], float64, Tensor[(1620), float64]) {
  @func_937(%var_939, %var_940) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(192), int64], Tensor[(14, 6, ?), float64], Tensor[(3, 10, 6), float32], Tensor[(14, 6, ?), uint16], Tensor[(192), int64], float64, Tensor[(1620), float64]) */
}

def @func_5096() -> Tensor[(16, 2, 5), uint16] {
  %128 = fn () -> Tensor[(16, 2, 5), uint16] {
    %127 = @func_3849() /* ty=(Tensor[(16, 2, 5), uint16],) */;
    %127.0
  };
  %128() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_3650() -> Tensor[(16, 2, 5), uint16] {
  %129 = fn () -> Tensor[(16, 2, 5), uint16] {
    @func_3425() /* ty=Tensor[(16, 2, 5), uint16] */
  };
  %129() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_4615() -> (Tensor[(16, 2, 5), float64],) {
  %130 = @func_3818() /* ty=(Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16]) */;
  %131 = %130.0;
  (%131,)
}

def @func_3008(%var_3006: Tensor[(1300), float32]) -> (Tensor[(13, 10, 10), int16], Tensor[(1300), float32], Tensor[(16, 2, 5), float64]) {
  @func_3005(%var_3006) /* ty=(Tensor[(13, 10, 10), int16], Tensor[(1300), float32], Tensor[(16, 2, 5), float64]) */
}

def @func_4541(%var_4539: Tensor[(11, 8, 5), uint16], %var_4540: Tensor[(1300), float32]) -> (Tensor[(11, 8, 5), bool], Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), int16]) {
  @func_4537(%var_4539, %var_4540) /* ty=(Tensor[(11, 8, 5), bool], Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), int16]) */
}

def @func_5682(%var_5679: Tensor[(605, 3), uint8], %var_5680: Tensor[(480), float32], %var_5681: Tensor[(605, 3), uint8]) -> (Tensor[(16, 2, 5), uint16], Tensor[(15, 11, 11), float32], Tensor[(16, 10, 3), float32], Tensor[(480), float32], Tensor[(605, 3), uint32]) {
  %147 = fn (%var_5633: Tensor[(605, 3), uint8], %var_5645: Tensor[(480), float32], %var_5661: Tensor[(605, 3), uint8]) -> (Tensor[(16, 2, 5), uint16], Tensor[(15, 11, 11), float32], Tensor[(16, 10, 3), float32], Tensor[(480), float32], Tensor[(605, 3), uint32]) {
    %132 = cast(%var_5633, dtype="uint8") /* ty=Tensor[(605, 3), uint8] */;
    %133 = cast(%var_5633, dtype="uint8") /* ty=Tensor[(605, 3), uint8] */;
    %134 = reshape(%132, newshape=[15, 11, 11]) /* ty=Tensor[(15, 11, 11), uint8] */;
    %135 = reshape(%133, newshape=[15, 11, 11]) /* ty=Tensor[(15, 11, 11), uint8] */;
    %136 = cast(%var_5645, dtype="float32") /* ty=Tensor[(480), float32] */;
    %137 = reshape(%136, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float32] */;
    %138 = @func_393(%137) /* ty=(Tensor[(16, 10, 3), float32],) */;
    %139 = cast(%var_5661, dtype="uint32") /* ty=Tensor[(605, 3), uint32] */;
    %140 = shape_of(%var_5633, dtype="int32") /* ty=Tensor[(2), int32] */;
    %141 = cast(%var_5633, dtype="uint32") /* ty=Tensor[(605, 3), uint32] */;
    %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %143 = @func_3649() /* ty=Tensor[(16, 2, 5), uint16] */;
    %144 = @func_5466(%134, %135) /* ty=Tensor[(15, 11, 11), float32] */;
    %145 = %138.0;
    %146 = left_shift(%141, %142) /* ty=Tensor[(605, 3), uint32] */;
    (%143, %144, %145, %var_5645, %146)
  };
  %147(%var_5679, %var_5680, %var_5681) /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(15, 11, 11), float32], Tensor[(16, 10, 3), float32], Tensor[(480), float32], Tensor[(605, 3), uint32]) */
}

def @main(%var_5884: Tensor[(16, 2, 5), uint16]) -> (Tensor[(16, 2, 5), float32],) {
  %148 = @func_3850() /* ty=(Tensor[(16, 2, 5), uint16],) */;
  %149 = %148.0;
  %150 = cast(%var_5884, dtype="bool") /* ty=Tensor[(16, 2, 5), bool] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="bool") /* ty=Tensor[(16, 2, 5), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %154 = greater(%152, %153) /* ty=Tensor[(16, 2, 5), bool] */;
  %155 = @func_4625() /* ty=Tensor[(16, 2, 5), uint16] */;
  %156 = cast(%155, dtype="float32") /* ty=Tensor[(16, 2, 5), float32] */;
  %157 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%154, dtype="float32") /* ty=Tensor[(16, 2, 5), float32] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %160 = maximum(%158, %159) /* ty=Tensor[(16, 2, 5), float32] */;
  (%160,)
}

def @func_4656() -> Tensor[(16, 2, 5), uint16] {
  @func_4495() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_2433(%var_2330: Tensor[(3, 8, 6), float32], %var_2331: Tensor[(3, 8, 6), float32], %var_2355: Tensor[(33, 4), uint32], %var_2356: Tensor[(1300), float32], %var_2413: Tensor[(78), float64]) -> (Tensor[(1300), float64], Tensor[(33, 4), uint32], Tensor[(1300), float32], Tensor[(13, 10, 10), bool], Tensor[(13, 9, 2), float64], Tensor[(234), int32], Tensor[(3, 8, 6), float32], Tensor[(3, 8, 6), float32], Tensor[(13, 10, 10), bool], Tensor[(1, 13, 6), float64], Tensor[(78), float64]) {
  %161 = cast(%var_2355, dtype="uint32") /* ty=Tensor[(33, 4), uint32] */;
  %162 = cast(%var_2356, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %163 = cast(%var_2356, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %164 = reshape(%161, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %165 = reshape(%162, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %166 = reshape(%163, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), bool] */;
  %167 = @func_1521(%164, %165, %166) /* ty=(Tensor[(4, 3, 11), bool], Tensor[(1300), float64], Tensor[(13, 10, 10), int16]) */;
  %168 = cast(%var_2356, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %169 = cast(%var_2356, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %170 = reshape(%168, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %171 = reshape(%169, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %172 = cast(meta[relay.Constant][7] /* ty=Tensor[(234), int32] */, dtype="int32") /* ty=Tensor[(234), int32] */;
  %173 = reshape(%172, newshape=[13, 9, 2]) /* ty=Tensor[(13, 9, 2), int32] */;
  %174 = @func_1654(%173) /* ty=(Tensor[(13, 9, 2), float64],) */;
  %175 = cast(%var_2331, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %176 = shape_of(%var_2330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%var_2330, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %179 = minimum(%177, %178) /* ty=Tensor[(3, 8, 6), float32] */;
  %180 = cast(%179, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %181 = asin(%180) /* ty=Tensor[(3, 8, 6), float32] */;
  %182 = cast(%181, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %183 = cast(%var_2330, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %184 = shape_of(%var_2331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%var_2331, dtype="float32") /* ty=Tensor[(3, 8, 6), float32] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %187 = cast(%var_2356, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %188 = %167.1;
  %189 = cast(%188, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %190 = reshape(%187, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %191 = reshape(%189, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %192 = cast(%var_2413, dtype="float64") /* ty=Tensor[(78), float64] */;
  %193 = reshape(%192, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), float64] */;
  %194 = @func_1152(%170, %171) /* ty=Tensor[(13, 10, 10), bool] */;
  %195 = %174.0;
  %196 = sin(%182) /* ty=Tensor[(3, 8, 6), float32] */;
  %197 = power(%185, %186) /* ty=Tensor[(3, 8, 6), float32] */;
  %198 = @func_1152(%190, %191) /* ty=Tensor[(13, 10, 10), bool] */;
  %199 = @func_636(%193) /* ty=Tensor[(1, 13, 6), float64] */;
  (%188, %var_2355, %var_2356, %194, %195, meta[relay.Constant][7] /* ty=Tensor[(234), int32] */, %196, %197, %198, %199, %var_2413)
}

def @func_2693() -> Tensor[(16, 2, 5), float64] {
  @func_2691() /* ty=Tensor[(16, 2, 5), float64] */
}

def @func_5701(%var_5700: Tensor[(10, 1, 11), float64]) -> Tensor[(10, 9, 11), float64] {
  %202 = fn (%var_5686: Tensor[(10, 1, 11), float64]) -> Tensor[(10, 9, 11), float64] {
    %200 = cast(%var_5686, dtype="float64") /* ty=Tensor[(10, 1, 11), float64] */;
    %201 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 9, 11), float64] */, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
    divide(%200, %201) /* ty=Tensor[(10, 9, 11), float64] */
  };
  %202(%var_5700) /* ty=Tensor[(10, 9, 11), float64] */
}

def @func_288(%var_286: Tensor[(4, 12, 4), int64], %var_287: Tensor[(4, 12, 4), int64]) -> (Tensor[(3, 10, 6), float32], Tensor[(6, 30), float32], Tensor[(3, 10, 6), float32], Tensor[(4, 12, 4), bool], Tensor[(3, 10, 6), float32], Tensor[(3, 10, 6), float32]) {
  @func_284(%var_286, %var_287) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(6, 30), float32], Tensor[(3, 10, 6), float32], Tensor[(4, 12, 4), bool], Tensor[(3, 10, 6), float32], Tensor[(3, 10, 6), float32]) */
}

def @func_4810() -> (Tensor[(16, 2, 5), uint16],) {
  %205 = fn () -> (Tensor[(16, 2, 5), uint16],) {
    %203 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
    %204 = %203.0;
    (%204,)
  };
  %205() /* ty=(Tensor[(16, 2, 5), uint16],) */
}

def @func_5498() -> (Tensor[(16, 2, 5), float64],) {
  @func_5496() /* ty=(Tensor[(16, 2, 5), float64],) */
}

def @func_4873(%var_4855: float64, %var_4856: Tensor[(3, 1, 16), float64]) -> (Tensor[(3, 1, 16), bool], Tensor[(16, 2, 5), uint16]) {
  %206 = cast(%var_4855, dtype="bool") /* ty=bool */;
  %207 = cast(%var_4856, dtype="bool") /* ty=Tensor[(3, 1, 16), bool] */;
  %208 = less_equal(%206, %207) /* ty=Tensor[(3, 1, 16), bool] */;
  %209 = @func_2794() /* ty=Tensor[(16, 2, 5), uint16] */;
  (%208, %209)
}

def @func_2598(%var_2596: Tensor[(1300), float32]) -> (Tensor[(13, 10, 10), int16], Tensor[(132), uint32], Tensor[(1300), float32], Tensor[(10, 16, 7), float64]) {
  @func_2595(%var_2596) /* ty=(Tensor[(13, 10, 10), int16], Tensor[(132), uint32], Tensor[(1300), float32], Tensor[(10, 16, 7), float64]) */
}

def @func_4617() -> (Tensor[(16, 2, 5), float64],) {
  @func_4615() /* ty=(Tensor[(16, 2, 5), float64],) */
}

def @func_5858() -> (Tensor[(16, 2, 5), float64], Tensor[(10, 4, 16), bool], Tensor[(10, 64), float64]) {
  @func_5856() /* ty=(Tensor[(16, 2, 5), float64], Tensor[(10, 4, 16), bool], Tensor[(10, 64), float64]) */
}

def @func_4537(%var_4512: Tensor[(11, 8, 5), uint16], %var_4523: Tensor[(1300), float32]) -> (Tensor[(11, 8, 5), bool], Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), int16]) {
  %210 = cast(%var_4512, dtype="bool") /* ty=Tensor[(11, 8, 5), bool] */;
  %211 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(11, 8, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 8, 5), uint16] */, dtype="bool") /* ty=Tensor[(11, 8, 5), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %214 = cast(%var_4523, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %215 = reshape(%214, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %216 = @func_4033(%215) /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(1300), float32], Tensor[(1300), float32], Tensor[(13, 10, 10), int16]) */;
  %217 = cast(%var_4523, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %218 = cast(%var_4523, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %219 = reshape(%217, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %220 = reshape(%218, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
  %221 = @func_1152(%219, %220) /* ty=Tensor[(13, 10, 10), bool] */;
  %222 = cast(%var_4523, dtype="int16") /* ty=Tensor[(1300), int16] */;
  %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%221, dtype="int16") /* ty=Tensor[(13, 10, 10), int16] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %226 = greater(%212, %213) /* ty=Tensor[(11, 8, 5), bool] */;
  %227 = %216.0;
  %228 = right_shift(%224, %225) /* ty=Tensor[(13, 10, 10), int16] */;
  (%226, %227, %228)
}

def @func_4658() -> Tensor[(16, 2, 5), uint16] {
  @func_4656() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_4033(%var_4023: Tensor[(1300), float32]) -> (Tensor[(16, 2, 5), uint16], Tensor[(1300), float32], Tensor[(1300), float32], Tensor[(13, 10, 10), int16]) {
  %229 = cast(%var_4023, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %230 = reshape(%229, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %231 = @func_2595(%230) /* ty=(Tensor[(13, 10, 10), int16], Tensor[(132), uint32], Tensor[(1300), float32], Tensor[(10, 16, 7), float64]) */;
  %232 = %231.2;
  %233 = cast(%232, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %234 = reshape(%233, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %235 = @func_3005(%234) /* ty=(Tensor[(13, 10, 10), int16], Tensor[(1300), float32], Tensor[(16, 2, 5), float64]) */;
  %236 = @func_2794() /* ty=Tensor[(16, 2, 5), uint16] */;
  %237 = %235.0;
  (%236, %232, %var_4023, %237)
}

def @func_638(%var_637: Tensor[(1, 13, 6), float64]) -> Tensor[(1, 13, 6), float64] {
  %239 = fn (%var_613: Tensor[(1, 13, 6), float64]) -> Tensor[(1, 13, 6), float64] {
    %238 = cast(%var_613, dtype="float64") /* ty=Tensor[(1, 13, 6), float64] */;
    rsqrt(%238) /* ty=Tensor[(1, 13, 6), float64] */
  };
  %239(%var_637) /* ty=Tensor[(1, 13, 6), float64] */
}

def @func_1107(%var_1065: Tensor[(6, 1, 11), float32], %var_1092: Tensor[(192), int64]) -> (Tensor[(3, 10, 6), float32], Tensor[(84), float64], Tensor[(192), int64], Tensor[(6, ?, 11), uint32]) {
  %240 = cast(meta[relay.Constant][10] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %241 = cast(%var_1092, dtype="int64") /* ty=Tensor[(192), int64] */;
  %242 = reshape(%240, newshape=[14, 6, 1]) /* ty=Tensor[(14, 6, 1), float64] */;
  %243 = reshape(%241, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %244 = @func_937(%242, %243) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(192), int64], Tensor[(14, 6, ?), float64], Tensor[(3, 10, 6), float32], Tensor[(14, 6, ?), uint16], Tensor[(192), int64], float64, Tensor[(1620), float64]) */;
  %245 = cast(%var_1065, dtype="float32") /* ty=Tensor[(6, 1, 11), float32] */;
  %246 = log(%245) /* ty=Tensor[(6, 1, 11), float32] */;
  %247 = cast(%var_1065, dtype="int8") /* ty=Tensor[(6, 1, 11), int8] */;
  %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%246, dtype="int8") /* ty=Tensor[(6, 1, 11), int8] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %251 = bitwise_xor(%249, %250) /* ty=Tensor[(6, ?, 11), int8] */;
  %252 = cast(%251, dtype="float64") /* ty=Tensor[(6, ?, 11), float64] */;
  %253 = log2(%252) /* ty=Tensor[(6, ?, 11), float64] */;
  %254 = cast(%var_1065, dtype="uint32") /* ty=Tensor[(6, 1, 11), uint32] */;
  %255 = shape_of(%253, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%253, dtype="uint32") /* ty=Tensor[(6, ?, 11), uint32] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %258 = %244.3;
  %259 = multiply(%256, %257) /* ty=Tensor[(6, ?, 11), uint32] */;
  (%258, meta[relay.Constant][10] /* ty=Tensor[(84), float64] */, %var_1092, %259)
}

def @func_396(%var_394: Tensor[(16, 10, 3), float32]) -> (Tensor[(16, 10, 3), float32],) {
  @func_393(%var_394) /* ty=(Tensor[(16, 10, 3), float32],) */
}

def @func_5041(%var_5038: Tensor[(180), uint64], %var_5039: uint8, %var_5040: Tensor[(1200), float64]) -> (Tensor[(16, 2, 5), uint16], Tensor[(3, 10, 6), float32], Tensor[(180), uint64], uint8, Tensor[(1200), float64], Tensor[(3, 10, 6), float32], Tensor[(192), int64]) {
  %275 = fn (%var_5026: Tensor[(180), uint64], %var_5027: uint8, %var_5028: Tensor[(1200), float64]) -> (Tensor[(16, 2, 5), uint16], Tensor[(3, 10, 6), float32], Tensor[(180), uint64], uint8, Tensor[(1200), float64], Tensor[(3, 10, 6), float32], Tensor[(192), int64]) {
    %260 = cast(%var_5026, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %261 = cast(%var_5026, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %262 = cast(%var_5027, dtype="uint8") /* ty=uint8 */;
    %263 = cast(%var_5028, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %264 = reshape(%260, newshape=[5, 12, 3]) /* ty=Tensor[(5, 12, 3), uint64] */;
    %265 = reshape(%261, newshape=[5, 12, 3]) /* ty=Tensor[(5, 12, 3), uint64] */;
    %266 = reshape(%262, newshape=[]) /* ty=uint8 */;
    %267 = reshape(%263, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
    %268 = @func_3207(%264, %265, %266, %267) /* ty=(Tensor[(5, 12, 3), bool], uint8, Tensor[(192), int64], Tensor[(6, 30), float64], Tensor[(15, 10, 8), float32], Tensor[(1200), float64], Tensor[(3, 10, 6), float32]) */;
    %269 = cast(meta[relay.Constant][11] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
    %270 = reshape(%269, newshape=[192]) /* ty=Tensor[(192), int64] */;
    %271 = @func_4697(%270) /* ty=(Tensor[(16, 2, 5), float64], Tensor[(3, 10, 6), float32], Tensor[(192), int64]) */;
    %272 = @func_4920() /* ty=Tensor[(16, 2, 5), uint16] */;
    %273 = %268.6;
    %274 = %271.1;
    (%272, %273, %var_5026, %var_5027, %var_5028, %274, meta[relay.Constant][11] /* ty=Tensor[(192), int64] */)
  };
  %275(%var_5038, %var_5039, %var_5040) /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(3, 10, 6), float32], Tensor[(180), uint64], uint8, Tensor[(1200), float64], Tensor[(3, 10, 6), float32], Tensor[(192), int64]) */
}

def @func_1626(%var_1625: Tensor[(9, 12, 16), uint16]) -> (Tensor[(9, 12, 16), uint16], Tensor[(9, 12, 16), float64]) {
  %283 = fn (%var_1616: Tensor[(9, 12, 16), uint16]) -> (Tensor[(9, 12, 16), uint16], Tensor[(9, 12, 16), float64]) {
    %276 = cast(%var_1616, dtype="uint16") /* ty=Tensor[(9, 12, 16), uint16] */;
    %277 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(9, 12, 16), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %278 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 12, 16), uint16] */, dtype="uint16") /* ty=Tensor[(9, 12, 16), uint16] */;
    %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %280 = cast(%var_1616, dtype="float64") /* ty=Tensor[(9, 12, 16), float64] */;
    %281 = bitwise_or(%278, %279) /* ty=Tensor[(9, 12, 16), uint16] */;
    %282 = rsqrt(%280) /* ty=Tensor[(9, 12, 16), float64] */;
    (%281, %282)
  };
  %283(%var_1625) /* ty=(Tensor[(9, 12, 16), uint16], Tensor[(9, 12, 16), float64]) */
}

def @func_5128(%var_5127: Tensor[(9, 3), uint16]) -> Tensor[(9, 3), bool] {
  %288 = fn (%var_5106: Tensor[(9, 3), uint16]) -> Tensor[(9, 3), bool] {
    %284 = cast(%var_5106, dtype="bool") /* ty=Tensor[(9, 3), bool] */;
    %285 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(9, 3), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %286 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 3), uint16] */, dtype="bool") /* ty=Tensor[(9, 3), bool] */;
    %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    less_equal(%286, %287) /* ty=Tensor[(9, 3), bool] */
  };
  %288(%var_5127) /* ty=Tensor[(9, 3), bool] */
}

def @func_4877(%var_4875: float64, %var_4876: Tensor[(3, 1, 16), float64]) -> (Tensor[(3, 1, 16), bool], Tensor[(16, 2, 5), uint16]) {
  @func_4873(%var_4875, %var_4876) /* ty=(Tensor[(3, 1, 16), bool], Tensor[(16, 2, 5), uint16]) */
}

def @func_1043(%var_1041: uint8, %var_1042: Tensor[(96, 2), int64]) -> (Tensor[(1, 11, 5), uint8], Tensor[(6, 30), bool], Tensor[(1620), float64], Tensor[(96, 2), int64]) {
  @func_1039(%var_1041, %var_1042) /* ty=(Tensor[(1, 11, 5), uint8], Tensor[(6, 30), bool], Tensor[(1620), float64], Tensor[(96, 2), int64]) */
}

def @func_3574(%var_3571: Tensor[(160), uint16], %var_3572: Tensor[(16, 2, 5), float32], %var_3573: Tensor[(1, 120), float32]) -> (Tensor[(10, 4, 16), bool], Tensor[(3, 10, 6), float32], Tensor[(180), float32], Tensor[(16, 2, 5), int16], Tensor[(10, 4, 16), bool], Tensor[(4, 2, 15), float32], Tensor[(1, 120), float32], Tensor[(160), float64]) {
  %317 = fn (%var_3512: Tensor[(160), uint16], %var_3526: Tensor[(16, 2, 5), float32], %var_3556: Tensor[(1, 120), float32]) -> (Tensor[(10, 4, 16), bool], Tensor[(3, 10, 6), float32], Tensor[(180), float32], Tensor[(16, 2, 5), int16], Tensor[(10, 4, 16), bool], Tensor[(4, 2, 15), float32], Tensor[(1, 120), float32], Tensor[(160), float64]) {
    %289 = @func_2954() /* ty=(Tensor[(10, 4, 16), bool],) */;
    %290 = cast(meta[relay.Constant][14] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %291 = reshape(%290, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
    %292 = @func_195(%291) /* ty=(Tensor[(3, 10, 6), float32],) */;
    %293 = cast(%var_3512, dtype="uint16") /* ty=Tensor[(160), uint16] */;
    %294 = cast(%var_3512, dtype="float32") /* ty=Tensor[(160), float32] */;
    %295 = reshape(%293, newshape=[16, 2, 5]) /* ty=Tensor[(16, 2, 5), uint16] */;
    %296 = reshape(%294, newshape=[16, 2, 5]) /* ty=Tensor[(16, 2, 5), float32] */;
    %297 = @func_2910(%295, %296) /* ty=(Tensor[(16, 2, 5), bool], Tensor[(16, 2, 5), float32], Tensor[(16, 2, 5), float32]) */;
    %298 = %297.1;
    %299 = cast(%var_3526, dtype="int16") /* ty=Tensor[(16, 2, 5), int16] */;
    %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
    %301 = cast(%298, dtype="int16") /* ty=Tensor[(16, 2, 5), int16] */;
    %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %303 = @func_2954() /* ty=(Tensor[(10, 4, 16), bool],) */;
    %304 = cast(%var_3556, dtype="float32") /* ty=Tensor[(1, 120), float32] */;
    %305 = reshape(%304, newshape=[4, 2, 15]) /* ty=Tensor[(4, 2, 15), float32] */;
    %306 = @func_1739(%305) /* ty=(Tensor[(4, 2, 15), float32],) */;
    %307 = cast(%298, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
    %308 = shape_of(%var_3512, dtype="int32") /* ty=Tensor[(1), int32] */;
    %309 = cast(%var_3512, dtype="float64") /* ty=Tensor[(160), float64] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?), float64] */;
    %311 = %289.0;
    %312 = %292.0;
    %313 = minimum(%301, %302) /* ty=Tensor[(16, 2, 5), int16] */;
    %314 = %303.0;
    %315 = %306.0;
    %316 = divide(%309, %310) /* ty=Tensor[(160), float64] */;
    (%311, %312, meta[relay.Constant][14] /* ty=Tensor[(180), float32] */, %313, %314, %315, %var_3556, %316)
  };
  %317(%var_3571, %var_3572, %var_3573) /* ty=(Tensor[(10, 4, 16), bool], Tensor[(3, 10, 6), float32], Tensor[(180), float32], Tensor[(16, 2, 5), int16], Tensor[(10, 4, 16), bool], Tensor[(4, 2, 15), float32], Tensor[(1, 120), float32], Tensor[(160), float64]) */
}

def @func_2496(%var_2471: Tensor[(1, 12, 11), float64], %var_2472: Tensor[(1, 12, 11), float64]) -> (Tensor[(?, 12, 11), float32], Tensor[(13, 10, 10), int16], Tensor[(1300, 1), float32]) {
  %318 = cast(%var_2472, dtype="float64") /* ty=Tensor[(1, 12, 11), float64] */;
  %319 = shape_of(%var_2471, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%var_2471, dtype="float64") /* ty=Tensor[(1, 12, 11), float64] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %322 = minimum(%320, %321) /* ty=Tensor[(?, 12, 11), float64] */;
  %323 = cast(%var_2471, dtype="float32") /* ty=Tensor[(1, 12, 11), float32] */;
  %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%322, dtype="float32") /* ty=Tensor[(?, 12, 11), float32] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %327 = cast(%var_2471, dtype="uint32") /* ty=Tensor[(1, 12, 11), uint32] */;
  %328 = cast(meta[relay.Constant][15] /* ty=Tensor[(1300, 1), float32] */, dtype="float32") /* ty=Tensor[(1300, 1), float32] */;
  %329 = cast(meta[relay.Constant][15] /* ty=Tensor[(1300, 1), float32] */, dtype="bool") /* ty=Tensor[(1300, 1), bool] */;
  %330 = reshape(%327, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %331 = reshape(%328, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %332 = reshape(%329, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), bool] */;
  %333 = @func_1521(%330, %331, %332) /* ty=(Tensor[(4, 3, 11), bool], Tensor[(1300), float64], Tensor[(13, 10, 10), int16]) */;
  %334 = cast(meta[relay.Constant][15] /* ty=Tensor[(1300, 1), float32] */, dtype="float32") /* ty=Tensor[(1300, 1), float32] */;
  %335 = mod(%325, %326) /* ty=Tensor[(?, 12, 11), float32] */;
  %336 = %333.2;
  %337 = tan(%334) /* ty=Tensor[(1300, 1), float32] */;
  (%335, %336, %337)
}

def @func_5228(%var_5214: Tensor[(220, 2), uint16]) -> (Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16], Tensor[(220, 2), uint16], Tensor[(650, 2), float32]) {
  %338 = @func_4771() /* ty=(Tensor[(16, 2, 5), float64],) */;
  %339 = cast(%var_5214, dtype="uint16") /* ty=Tensor[(220, 2), uint16] */;
  %340 = cast(meta[relay.Constant][16] /* ty=Tensor[(650, 2), float32] */, dtype="float32") /* ty=Tensor[(650, 2), float32] */;
  %341 = reshape(%339, newshape=[11, 8, 5]) /* ty=Tensor[(11, 8, 5), uint16] */;
  %342 = reshape(%340, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %343 = @func_4537(%341, %342) /* ty=(Tensor[(11, 8, 5), bool], Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), int16]) */;
  %344 = %338.0;
  %345 = %343.1;
  (%344, %345, %var_5214, meta[relay.Constant][16] /* ty=Tensor[(650, 2), float32] */)
}

def @func_5469(%var_5467: Tensor[(15, 11, 11), uint8], %var_5468: Tensor[(15, 11, 11), uint8]) -> Tensor[(15, 11, 11), float32] {
  %352 = fn (%var_5447: Tensor[(15, 11, 11), uint8], %var_5448: Tensor[(15, 11, 11), uint8]) -> Tensor[(15, 11, 11), float32] {
    %346 = cast(%var_5448, dtype="bool") /* ty=Tensor[(15, 11, 11), bool] */;
    %347 = shape_of(%var_5447, dtype="int32") /* ty=Tensor[(3), int32] */;
    %348 = cast(%var_5447, dtype="bool") /* ty=Tensor[(15, 11, 11), bool] */;
    %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %350 = less(%348, %349) /* ty=Tensor[(15, 11, 11), bool] */;
    %351 = cast(%350, dtype="float32") /* ty=Tensor[(15, 11, 11), float32] */;
    log10(%351) /* ty=Tensor[(15, 11, 11), float32] */
  };
  %352(%var_5467, %var_5468) /* ty=Tensor[(15, 11, 11), float32] */
}

def @func_4036(%var_4034: Tensor[(1300), float32]) -> (Tensor[(16, 2, 5), uint16], Tensor[(1300), float32], Tensor[(1300), float32], Tensor[(13, 10, 10), int16]) {
  @func_4033(%var_4034) /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(1300), float32], Tensor[(1300), float32], Tensor[(13, 10, 10), int16]) */
}

def @func_5496() -> (Tensor[(16, 2, 5), float64],) {
  %353 = @func_2691() /* ty=Tensor[(16, 2, 5), float64] */;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
  %355 = acos(%354) /* ty=Tensor[(16, 2, 5), float64] */;
  (%355,)
}

def @func_197(%var_196: Tensor[(3, 10, 6), float32]) -> (Tensor[(3, 10, 6), float32],) {
  %358 = fn (%var_192: Tensor[(3, 10, 6), float32]) -> (Tensor[(3, 10, 6), float32],) {
    %356 = cast(%var_192, dtype="float32") /* ty=Tensor[(3, 10, 6), float32] */;
    %357 = atan(%356) /* ty=Tensor[(3, 10, 6), float32] */;
    (%357,)
  };
  %358(%var_196) /* ty=(Tensor[(3, 10, 6), float32],) */
}

def @func_2691() -> Tensor[(16, 2, 5), float64] {
  %359 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
  sin(%359) /* ty=Tensor[(16, 2, 5), float64] */
}

def @func_3425() -> Tensor[(16, 2, 5), uint16] {
  @func_3161() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_4921() -> Tensor[(16, 2, 5), uint16] {
  %360 = fn () -> Tensor[(16, 2, 5), uint16] {
    @func_2794() /* ty=Tensor[(16, 2, 5), uint16] */
  };
  %360() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_3973(%var_3971: Tensor[(3, 10, 6), float32], %var_3972: Tensor[(96, 2), int64]) -> (Tensor[(3, 10, 6), uint8], Tensor[(16, 2, 5), float64], Tensor[(4, 12, 4), bool], Tensor[(96, 2), int64], Tensor[(13, 9, 2), float64], Tensor[(39, 6), int32]) {
  %381 = fn (%var_3932: Tensor[(3, 10, 6), float32], %var_3951: Tensor[(96, 2), int64]) -> (Tensor[(3, 10, 6), uint8], Tensor[(16, 2, 5), float64], Tensor[(4, 12, 4), bool], Tensor[(96, 2), int64], Tensor[(13, 9, 2), float64], Tensor[(39, 6), int32]) {
    %361 = @func_3336() /* ty=(Tensor[(16, 2, 5), float64], Tensor[(3, 10, 6), float32], Tensor[(66), float32], Tensor[(24, 8), int64]) */;
    %362 = %361.1;
    %363 = cast(%var_3932, dtype="uint8") /* ty=Tensor[(3, 10, 6), uint8] */;
    %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
    %365 = cast(%362, dtype="uint8") /* ty=Tensor[(3, 10, 6), uint8] */;
    %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %367 = @func_2794() /* ty=Tensor[(16, 2, 5), uint16] */;
    %368 = cast(%367, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
    %369 = cast(%var_3951, dtype="int64") /* ty=Tensor[(96, 2), int64] */;
    %370 = cast(%var_3951, dtype="int64") /* ty=Tensor[(96, 2), int64] */;
    %371 = reshape(%369, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
    %372 = reshape(%370, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
    %373 = @func_284(%371, %372) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(6, 30), float32], Tensor[(3, 10, 6), float32], Tensor[(4, 12, 4), bool], Tensor[(3, 10, 6), float32], Tensor[(3, 10, 6), float32]) */;
    %374 = cast(meta[relay.Constant][18] /* ty=Tensor[(39, 6), int32] */, dtype="int32") /* ty=Tensor[(39, 6), int32] */;
    %375 = reshape(%374, newshape=[13, 9, 2]) /* ty=Tensor[(13, 9, 2), int32] */;
    %376 = @func_1654(%375) /* ty=(Tensor[(13, 9, 2), float64],) */;
    %377 = bitwise_or(%365, %366) /* ty=Tensor[(3, 10, 6), uint8] */;
    %378 = rsqrt(%368) /* ty=Tensor[(16, 2, 5), float64] */;
    %379 = %373.3;
    %380 = %376.0;
    (%377, %378, %379, %var_3951, %380, meta[relay.Constant][18] /* ty=Tensor[(39, 6), int32] */)
  };
  %381(%var_3971, %var_3972) /* ty=(Tensor[(3, 10, 6), uint8], Tensor[(16, 2, 5), float64], Tensor[(4, 12, 4), bool], Tensor[(96, 2), int64], Tensor[(13, 9, 2), float64], Tensor[(39, 6), int32]) */
}

def @func_3818() -> (Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16]) {
  %382 = @func_2691() /* ty=Tensor[(16, 2, 5), float64] */;
  %383 = @func_3425() /* ty=Tensor[(16, 2, 5), uint16] */;
  (%382, %383)
}

def @func_5596(%var_5594: Tensor[(132), uint32]) -> (Tensor[(16, 2, 5), float64], Tensor[(480), float32], Tensor[(132), uint32]) {
  @func_5593(%var_5594) /* ty=(Tensor[(16, 2, 5), float64], Tensor[(480), float32], Tensor[(132), uint32]) */
}

def @func_5790() -> (Tensor[(16, 2, 5), uint16], Tensor[(16, 2, 5), float64]) {
  %384 = @func_4771() /* ty=(Tensor[(16, 2, 5), float64],) */;
  %385 = @func_5095() /* ty=Tensor[(16, 2, 5), uint16] */;
  %386 = %384.0;
  (%385, %386)
}

def @func_5792() -> (Tensor[(16, 2, 5), uint16], Tensor[(16, 2, 5), float64]) {
  @func_5790() /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(16, 2, 5), float64]) */
}

def @func_937(%var_859: Tensor[(14, 6, 1), float64], %var_889: Tensor[(192), int64]) -> (Tensor[(3, 10, 6), float32], Tensor[(192), int64], Tensor[(14, 6, ?), float64], Tensor[(3, 10, 6), float32], Tensor[(14, 6, ?), uint16], Tensor[(192), int64], float64, Tensor[(1620), float64]) {
  %387 = cast(%var_889, dtype="int64") /* ty=Tensor[(192), int64] */;
  %388 = cast(%var_889, dtype="int64") /* ty=Tensor[(192), int64] */;
  %389 = reshape(%387, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %390 = reshape(%388, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %391 = @func_284(%389, %390) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(6, 30), float32], Tensor[(3, 10, 6), float32], Tensor[(4, 12, 4), bool], Tensor[(3, 10, 6), float32], Tensor[(3, 10, 6), float32]) */;
  %392 = cast(%var_859, dtype="float64") /* ty=Tensor[(14, 6, 1), float64] */;
  %393 = acos(%392) /* ty=Tensor[(14, 6, 1), float64] */;
  %394 = cast(%var_859, dtype="float32") /* ty=Tensor[(14, 6, 1), float32] */;
  %395 = cos(%394) /* ty=Tensor[(14, 6, 1), float32] */;
  %396 = cast(%395, dtype="float32") /* ty=Tensor[(14, 6, 1), float32] */;
  %397 = sinh(%396) /* ty=Tensor[(14, 6, 1), float32] */;
  %398 = cast(%397, dtype="float64") /* ty=Tensor[(14, 6, 1), float64] */;
  %399 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%393, dtype="float64") /* ty=Tensor[(14, 6, 1), float64] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %402 = %391.4;
  %403 = cast(%402, dtype="float32") /* ty=Tensor[(3, 10, 6), float32] */;
  %404 = reshape(%403, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
  %405 = @func_195(%404) /* ty=(Tensor[(3, 10, 6), float32],) */;
  %406 = cast(%395, dtype="float64") /* ty=Tensor[(14, 6, 1), float64] */;
  %407 = asin(%406) /* ty=Tensor[(14, 6, 1), float64] */;
  %408 = cast(%397, dtype="int8") /* ty=Tensor[(14, 6, 1), int8] */;
  %409 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %410 = cast(%393, dtype="int8") /* ty=Tensor[(14, 6, 1), int8] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %412 = right_shift(%410, %411) /* ty=Tensor[(14, 6, ?), int8] */;
  %413 = cast(%412, dtype="bool") /* ty=Tensor[(14, 6, ?), bool] */;
  %414 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%397, dtype="bool") /* ty=Tensor[(14, 6, 1), bool] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %417 = less(%415, %416) /* ty=Tensor[(14, 6, ?), bool] */;
  %418 = cast(%417, dtype="uint16") /* ty=Tensor[(14, 6, ?), uint16] */;
  %419 = shape_of(%407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%407, dtype="uint16") /* ty=Tensor[(14, 6, 1), uint16] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %422 = cast(-7.33087f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %423 = cast(meta[relay.Constant][19] /* ty=Tensor[(1620), float64] */, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %424 = cast(%var_889, dtype="int64") /* ty=Tensor[(192), int64] */;
  %425 = reshape(%422, newshape=[]) /* ty=float64 */;
  %426 = reshape(%423, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %427 = reshape(%424, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %428 = @func_730(%425, %426, %427) /* ty=(Tensor[(15, 12, 9), float64], Tensor[(192), int64], Tensor[(6, 30), bool]) */;
  %429 = floor_mod(%400, %401) /* ty=Tensor[(14, 6, ?), float64] */;
  %430 = %405.0;
  %431 = subtract(%420, %421) /* ty=Tensor[(14, 6, ?), uint16] */;
  %432 = %428.1;
  (%402, %var_889, %429, %430, %431, %432, -7.33087f64 /* ty=float64 */, meta[relay.Constant][19] /* ty=Tensor[(1620), float64] */)
}

def @func_3820() -> (Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16]) {
  @func_3818() /* ty=(Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16]) */
}

def @func_2040(%var_2038: Tensor[(5, 11, 13), float64], %var_2039: Tensor[(234), int32]) -> (Tensor[(13, 9, 2), float64], Tensor[(234), int32], Tensor[(13, 9, 2), float64], Tensor[(1, 11, 5), uint8], uint8, Tensor[(8, 24), int64], Tensor[(5, 11, 13), bool], Tensor[(3, 10, 6), float32], Tensor[(180), float32]) {
  %458 = fn (%var_1970: Tensor[(5, 11, 13), float64], %var_1978: Tensor[(234), int32]) -> (Tensor[(13, 9, 2), float64], Tensor[(234), int32], Tensor[(13, 9, 2), float64], Tensor[(1, 11, 5), uint8], uint8, Tensor[(8, 24), int64], Tensor[(5, 11, 13), bool], Tensor[(3, 10, 6), float32], Tensor[(180), float32]) {
    %433 = cast(%var_1978, dtype="int32") /* ty=Tensor[(234), int32] */;
    %434 = reshape(%433, newshape=[13, 9, 2]) /* ty=Tensor[(13, 9, 2), int32] */;
    %435 = @func_1654(%434) /* ty=(Tensor[(13, 9, 2), float64],) */;
    %436 = %435.0;
    %437 = cast(%436, dtype="int32") /* ty=Tensor[(13, 9, 2), int32] */;
    %438 = reshape(%437, newshape=[13, 9, 2]) /* ty=Tensor[(13, 9, 2), int32] */;
    %439 = @func_1654(%438) /* ty=(Tensor[(13, 9, 2), float64],) */;
    %440 = cast(meta[relay.Constant][20] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %441 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 24), int64] */, dtype="int64") /* ty=Tensor[(8, 24), int64] */;
    %442 = reshape(%440, newshape=[]) /* ty=uint8 */;
    %443 = reshape(%441, newshape=[96, 2]) /* ty=Tensor[(96, 2), int64] */;
    %444 = @func_1039(%442, %443) /* ty=(Tensor[(1, 11, 5), uint8], Tensor[(6, 30), bool], Tensor[(1620), float64], Tensor[(96, 2), int64]) */;
    %445 = cast(%var_1970, dtype="float64") /* ty=Tensor[(5, 11, 13), float64] */;
    %446 = sinh(%445) /* ty=Tensor[(5, 11, 13), float64] */;
    %447 = cast(%var_1970, dtype="bool") /* ty=Tensor[(5, 11, 13), bool] */;
    %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
    %449 = cast(%446, dtype="bool") /* ty=Tensor[(5, 11, 13), bool] */;
    %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %451 = cast(meta[relay.Constant][22] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %452 = reshape(%451, newshape=[3, 10, 6]) /* ty=Tensor[(3, 10, 6), float32] */;
    %453 = @func_195(%452) /* ty=(Tensor[(3, 10, 6), float32],) */;
    %454 = %439.0;
    %455 = %444.0;
    %456 = equal(%449, %450) /* ty=Tensor[(5, 11, 13), bool] */;
    %457 = %453.0;
    (%436, %var_1978, %454, %455, meta[relay.Constant][20] /* ty=uint8 */, meta[relay.Constant][21] /* ty=Tensor[(8, 24), int64] */, %456, %457, meta[relay.Constant][22] /* ty=Tensor[(180), float32] */)
  };
  %458(%var_2038, %var_2039) /* ty=(Tensor[(13, 9, 2), float64], Tensor[(234), int32], Tensor[(13, 9, 2), float64], Tensor[(1, 11, 5), uint8], uint8, Tensor[(8, 24), int64], Tensor[(5, 11, 13), bool], Tensor[(3, 10, 6), float32], Tensor[(180), float32]) */
}

def @func_5318(%var_5316: float64, %var_5317: Tensor[(8, 24), int64]) -> (Tensor[(16, 2, 5), uint16], Tensor[(192), int64], float64, Tensor[(1, 1620), float64], Tensor[(8, 24), int64]) {
  @func_5314(%var_5316, %var_5317) /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(192), int64], float64, Tensor[(1, 1620), float64], Tensor[(8, 24), int64]) */
}

def @func_2500(%var_2498: Tensor[(1, 12, 11), float64], %var_2499: Tensor[(1, 12, 11), float64]) -> (Tensor[(?, 12, 11), float32], Tensor[(13, 10, 10), int16], Tensor[(1300, 1), float32]) {
  @func_2496(%var_2498, %var_2499) /* ty=(Tensor[(?, 12, 11), float32], Tensor[(13, 10, 10), int16], Tensor[(1300, 1), float32]) */
}

def @func_4984(%var_4983: Tensor[(16, 2, 5), uint16]) -> (Tensor[(10, 4, 16), bool], Tensor[(16, 2, 5), bool], Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16], Tensor[(1, 120), float32], Tensor[(120), float32]) {
  %479 = fn (%var_4960: Tensor[(16, 2, 5), uint16]) -> (Tensor[(10, 4, 16), bool], Tensor[(16, 2, 5), bool], Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16], Tensor[(1, 120), float32], Tensor[(120), float32]) {
    %459 = @func_2954() /* ty=(Tensor[(10, 4, 16), bool],) */;
    %460 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
    %461 = %460.0;
    %462 = cast(%var_4960, dtype="bool") /* ty=Tensor[(16, 2, 5), bool] */;
    %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
    %464 = cast(%461, dtype="bool") /* ty=Tensor[(16, 2, 5), bool] */;
    %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %466 = cast(%var_4960, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
    %467 = cos(%466) /* ty=Tensor[(16, 2, 5), float64] */;
    %468 = cast(%467, dtype="uint16") /* ty=Tensor[(16, 2, 5), uint16] */;
    %469 = cast(%461, dtype="float32") /* ty=Tensor[(16, 2, 5), float32] */;
    %470 = cast(meta[relay.Constant][23] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %471 = reshape(%468, newshape=[160]) /* ty=Tensor[(160), uint16] */;
    %472 = reshape(%469, newshape=[16, 2, 5]) /* ty=Tensor[(16, 2, 5), float32] */;
    %473 = reshape(%470, newshape=[1, 120]) /* ty=Tensor[(1, 120), float32] */;
    %474 = @func_3570(%471, %472, %473) /* ty=(Tensor[(10, 4, 16), bool], Tensor[(3, 10, 6), float32], Tensor[(180), float32], Tensor[(16, 2, 5), int16], Tensor[(10, 4, 16), bool], Tensor[(4, 2, 15), float32], Tensor[(1, 120), float32], Tensor[(160), float64]) */;
    %475 = %459.0;
    %476 = not_equal(%464, %465) /* ty=Tensor[(16, 2, 5), bool] */;
    %477 = @func_3450() /* ty=Tensor[(16, 2, 5), uint16] */;
    %478 = %474.6;
    (%475, %476, %467, %477, %478, meta[relay.Constant][23] /* ty=Tensor[(120), float32] */)
  };
  %479(%var_4983) /* ty=(Tensor[(10, 4, 16), bool], Tensor[(16, 2, 5), bool], Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16], Tensor[(1, 120), float32], Tensor[(120), float32]) */
}

def @func_3427() -> Tensor[(16, 2, 5), uint16] {
  @func_3425() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_3850() -> (Tensor[(16, 2, 5), uint16],) {
  %481 = fn () -> (Tensor[(16, 2, 5), uint16],) {
    %480 = @func_3161() /* ty=Tensor[(16, 2, 5), uint16] */;
    (%480,)
  };
  %481() /* ty=(Tensor[(16, 2, 5), uint16],) */
}

def @func_1156(%var_1154: Tensor[(13, 10, 10), float32], %var_1155: Tensor[(13, 10, 10), float32]) -> Tensor[(13, 10, 10), bool] {
  @func_1152(%var_1154, %var_1155) /* ty=Tensor[(13, 10, 10), bool] */
}

def @func_4363(%var_4361: Tensor[(9, 5, 6), float32], %var_4362: Tensor[(9, 5, 6), float32]) -> Tensor[(9, 5, 6), float64] {
  @func_4359(%var_4361, %var_4362) /* ty=Tensor[(9, 5, 6), float64] */
}

def @func_4495() -> Tensor[(16, 2, 5), uint16] {
  @func_3161() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_4700(%var_4698: Tensor[(192), int64]) -> (Tensor[(16, 2, 5), float64], Tensor[(3, 10, 6), float32], Tensor[(192), int64]) {
  @func_4697(%var_4698) /* ty=(Tensor[(16, 2, 5), float64], Tensor[(3, 10, 6), float32], Tensor[(192), int64]) */
}

def @func_3212(%var_3208: Tensor[(5, 12, 3), uint64], %var_3209: Tensor[(5, 12, 3), uint64], %var_3210: uint8, %var_3211: Tensor[(1200), float64]) -> (Tensor[(5, 12, 3), bool], uint8, Tensor[(192), int64], Tensor[(6, 30), float64], Tensor[(15, 10, 8), float32], Tensor[(1200), float64], Tensor[(3, 10, 6), float32]) {
  %505 = fn (%var_3172: Tensor[(5, 12, 3), uint64], %var_3173: Tensor[(5, 12, 3), uint64], %var_3182: uint8, %var_3196: Tensor[(1200), float64]) -> (Tensor[(5, 12, 3), bool], uint8, Tensor[(192), int64], Tensor[(6, 30), float64], Tensor[(15, 10, 8), float32], Tensor[(1200), float64], Tensor[(3, 10, 6), float32]) {
    %482 = cast(%var_3173, dtype="bool") /* ty=Tensor[(5, 12, 3), bool] */;
    %483 = shape_of(%var_3172, dtype="int32") /* ty=Tensor[(3), int32] */;
    %484 = cast(%var_3172, dtype="bool") /* ty=Tensor[(5, 12, 3), bool] */;
    %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %486 = cast(%var_3182, dtype="uint8") /* ty=uint8 */;
    %487 = cast(meta[relay.Constant][24] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
    %488 = reshape(%486, newshape=[]) /* ty=uint8 */;
    %489 = reshape(%487, newshape=[96, 2]) /* ty=Tensor[(96, 2), int64] */;
    %490 = @func_1039(%488, %489) /* ty=(Tensor[(1, 11, 5), uint8], Tensor[(6, 30), bool], Tensor[(1620), float64], Tensor[(96, 2), int64]) */;
    %491 = %490.1;
    %492 = cast(%491, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
    %493 = cast(%var_3196, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %494 = reshape(%493, newshape=[15, 10, 8]) /* ty=Tensor[(15, 10, 8), float64] */;
    %495 = @func_2231(%494) /* ty=(Tensor[(15, 10, 8), uint8], Tensor[(15, 10, 8), float32]) */;
    %496 = cast(meta[relay.Constant][24] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
    %497 = cast(meta[relay.Constant][24] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
    %498 = reshape(%496, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
    %499 = reshape(%497, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
    %500 = @func_284(%498, %499) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(6, 30), float32], Tensor[(3, 10, 6), float32], Tensor[(4, 12, 4), bool], Tensor[(3, 10, 6), float32], Tensor[(3, 10, 6), float32]) */;
    %501 = greater(%484, %485) /* ty=Tensor[(5, 12, 3), bool] */;
    %502 = sinh(%492) /* ty=Tensor[(6, 30), float64] */;
    %503 = %495.1;
    %504 = %500.5;
    (%501, %var_3182, meta[relay.Constant][24] /* ty=Tensor[(192), int64] */, %502, %503, %var_3196, %504)
  };
  %505(%var_3208, %var_3209, %var_3210, %var_3211) /* ty=(Tensor[(5, 12, 3), bool], uint8, Tensor[(192), int64], Tensor[(6, 30), float64], Tensor[(15, 10, 8), float32], Tensor[(1200), float64], Tensor[(3, 10, 6), float32]) */
}

def @func_4697(%var_4694: Tensor[(192), int64]) -> (Tensor[(16, 2, 5), float64], Tensor[(3, 10, 6), float32], Tensor[(192), int64]) {
  %506 = cast(%var_4694, dtype="int64") /* ty=Tensor[(192), int64] */;
  %507 = cast(%var_4694, dtype="int64") /* ty=Tensor[(192), int64] */;
  %508 = reshape(%506, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %509 = reshape(%507, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %510 = @func_284(%508, %509) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(6, 30), float32], Tensor[(3, 10, 6), float32], Tensor[(4, 12, 4), bool], Tensor[(3, 10, 6), float32], Tensor[(3, 10, 6), float32]) */;
  %511 = @func_2691() /* ty=Tensor[(16, 2, 5), float64] */;
  %512 = %510.5;
  (%511, %512, %var_4694)
}

def @func_730(%var_689: float64, %var_690: Tensor[(15, 12, 9), float64], %var_704: Tensor[(192), int64]) -> (Tensor[(15, 12, 9), float64], Tensor[(192), int64], Tensor[(6, 30), bool]) {
  %513 = cast(%var_689, dtype="float64") /* ty=float64 */;
  %514 = cast(%var_690, dtype="float64") /* ty=Tensor[(15, 12, 9), float64] */;
  %515 = cast(%var_704, dtype="int64") /* ty=Tensor[(192), int64] */;
  %516 = cast(%var_704, dtype="int64") /* ty=Tensor[(192), int64] */;
  %517 = reshape(%515, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %518 = reshape(%516, newshape=[4, 12, 4]) /* ty=Tensor[(4, 12, 4), int64] */;
  %519 = @func_284(%517, %518) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(6, 30), float32], Tensor[(3, 10, 6), float32], Tensor[(4, 12, 4), bool], Tensor[(3, 10, 6), float32], Tensor[(3, 10, 6), float32]) */;
  %520 = %519.1;
  %521 = cast(%520, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %522 = cast(%var_689, dtype="bool") /* ty=bool */;
  %523 = minimum(%513, %514) /* ty=Tensor[(15, 12, 9), float64] */;
  %524 = equal(%521, %522) /* ty=Tensor[(6, 30), bool] */;
  (%523, %var_704, %524)
}

def @func_3392() -> (Tensor[(11, 3, 9), float32],) {
  %525 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 3, 9), float32] */, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
  %526 = acosh(%525) /* ty=Tensor[(11, 3, 9), float32] */;
  %527 = cast(%526, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
  %528 = tan(%527) /* ty=Tensor[(11, 3, 9), float32] */;
  %529 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 3, 9), float32] */, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%528, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %533 = multiply(%531, %532) /* ty=Tensor[(11, 3, 9), float32] */;
  (%533,)
}

def @func_5856() -> (Tensor[(16, 2, 5), float64], Tensor[(10, 4, 16), bool], Tensor[(10, 64), float64]) {
  %534 = @func_5790() /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(16, 2, 5), float64]) */;
  %535 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 64), bool] */, dtype="bool") /* ty=Tensor[(10, 64), bool] */;
  %536 = reshape(%535, newshape=[10, 4, 16]) /* ty=Tensor[(10, 4, 16), bool] */;
  %537 = @func_3613(%536) /* ty=(Tensor[(10, 4, 16), float32],) */;
  %538 = %537.0;
  %539 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 4, 16), float32] */, dtype="bool") /* ty=Tensor[(10, 4, 16), bool] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="bool") /* ty=Tensor[(10, 4, 16), bool] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %543 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 64), bool] */, dtype="float64") /* ty=Tensor[(10, 64), float64] */;
  %544 = %534.1;
  %545 = less_equal(%541, %542) /* ty=Tensor[(10, 4, 16), bool] */;
  %546 = acos(%543) /* ty=Tensor[(10, 64), float64] */;
  (%544, %545, %546)
}

def @func_2795() -> Tensor[(16, 2, 5), uint16] {
  %548 = fn () -> Tensor[(16, 2, 5), uint16] {
    %547 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
    %547.0
  };
  %548() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_1656(%var_1655: Tensor[(13, 9, 2), int32]) -> (Tensor[(13, 9, 2), float64],) {
  %554 = fn (%var_1637: Tensor[(13, 9, 2), int32]) -> (Tensor[(13, 9, 2), float64],) {
    %549 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 1, 2), int32] */, dtype="int32") /* ty=Tensor[(13, 1, 2), int32] */;
    %550 = cast(%var_1637, dtype="int32") /* ty=Tensor[(13, 9, 2), int32] */;
    %551 = bitwise_and(%549, %550) /* ty=Tensor[(13, 9, 2), int32] */;
    %552 = cast(%551, dtype="float64") /* ty=Tensor[(13, 9, 2), float64] */;
    %553 = sqrt(%552) /* ty=Tensor[(13, 9, 2), float64] */;
    (%553,)
  };
  %554(%var_1655) /* ty=(Tensor[(13, 9, 2), float64],) */
}

def @func_3005(%var_2986: Tensor[(1300), float32]) -> (Tensor[(13, 10, 10), int16], Tensor[(1300), float32], Tensor[(16, 2, 5), float64]) {
  %555 = cast(%var_2986, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %556 = reshape(%555, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %557 = @func_2595(%556) /* ty=(Tensor[(13, 10, 10), int16], Tensor[(132), uint32], Tensor[(1300), float32], Tensor[(10, 16, 7), float64]) */;
  %558 = cast(%var_2986, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %559 = @func_2794() /* ty=Tensor[(16, 2, 5), uint16] */;
  %560 = cast(%559, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
  %561 = %557.0;
  %562 = sinh(%558) /* ty=Tensor[(1300), float32] */;
  %563 = asinh(%560) /* ty=Tensor[(16, 2, 5), float64] */;
  (%561, %562, %563)
}

def @func_2765() -> (Tensor[(16, 2, 5), uint16],) {
  @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */
}

def @func_5410() -> (Tensor[(16, 2, 5), uint16], Tensor[(9, 5, 12), float64], Tensor[(270, 2), float64], Tensor[(13, 9, 2), float64], Tensor[(715), float64], Tensor[(234), int32]) {
  %574 = fn () -> (Tensor[(16, 2, 5), uint16], Tensor[(9, 5, 12), float64], Tensor[(270, 2), float64], Tensor[(13, 9, 2), float64], Tensor[(715), float64], Tensor[(234), int32]) {
    %564 = cast(meta[relay.Constant][30] /* ty=Tensor[(270, 2), float64] */, dtype="float64") /* ty=Tensor[(270, 2), float64] */;
    %565 = reshape(%564, newshape=[9, 5, 12]) /* ty=Tensor[(9, 5, 12), float64] */;
    %566 = cast(meta[relay.Constant][31] /* ty=Tensor[(715), float64] */, dtype="float64") /* ty=Tensor[(715), float64] */;
    %567 = cast(meta[relay.Constant][32] /* ty=Tensor[(234), int32] */, dtype="int32") /* ty=Tensor[(234), int32] */;
    %568 = reshape(%566, newshape=[5, 11, 13]) /* ty=Tensor[(5, 11, 13), float64] */;
    %569 = reshape(%567, newshape=[234]) /* ty=Tensor[(234), int32] */;
    %570 = @func_2037(%568, %569) /* ty=(Tensor[(13, 9, 2), float64], Tensor[(234), int32], Tensor[(13, 9, 2), float64], Tensor[(1, 11, 5), uint8], uint8, Tensor[(8, 24), int64], Tensor[(5, 11, 13), bool], Tensor[(3, 10, 6), float32], Tensor[(180), float32]) */;
    %571 = @func_3450() /* ty=Tensor[(16, 2, 5), uint16] */;
    %572 = @func_2714(%565) /* ty=Tensor[(9, 5, 12), float64] */;
    %573 = %570.0;
    (%571, %572, meta[relay.Constant][30] /* ty=Tensor[(270, 2), float64] */, %573, meta[relay.Constant][31] /* ty=Tensor[(715), float64] */, meta[relay.Constant][32] /* ty=Tensor[(234), int32] */)
  };
  %574() /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(9, 5, 12), float64], Tensor[(270, 2), float64], Tensor[(13, 9, 2), float64], Tensor[(715), float64], Tensor[(234), int32]) */
}

def @func_1739(%var_1730: Tensor[(4, 2, 15), float32]) -> (Tensor[(4, 2, 15), float32],) {
  %575 = cast(%var_1730, dtype="float32") /* ty=Tensor[(4, 2, 15), float32] */;
  %576 = rsqrt(%575) /* ty=Tensor[(4, 2, 15), float32] */;
  (%576,)
}

def @func_5072() -> Tensor[(16, 2, 5), float64] {
  %578 = fn () -> Tensor[(16, 2, 5), float64] {
    %577 = @func_4771() /* ty=(Tensor[(16, 2, 5), float64],) */;
    %577.0
  };
  %578() /* ty=Tensor[(16, 2, 5), float64] */
}

def @func_3337() -> (Tensor[(16, 2, 5), float64], Tensor[(3, 10, 6), float32], Tensor[(66), float32], Tensor[(24, 8), int64]) {
  %586 = fn () -> (Tensor[(16, 2, 5), float64], Tensor[(3, 10, 6), float32], Tensor[(66), float32], Tensor[(24, 8), int64]) {
    %579 = cast(meta[relay.Constant][33] /* ty=Tensor[(66), float32] */, dtype="float32") /* ty=Tensor[(66), float32] */;
    %580 = cast(meta[relay.Constant][34] /* ty=Tensor[(24, 8), int64] */, dtype="int64") /* ty=Tensor[(24, 8), int64] */;
    %581 = reshape(%579, newshape=[6, 1, 11]) /* ty=Tensor[(6, 1, 11), float32] */;
    %582 = reshape(%580, newshape=[192]) /* ty=Tensor[(192), int64] */;
    %583 = @func_1107(%581, %582) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(84), float64], Tensor[(192), int64], Tensor[(6, ?, 11), uint32]) */;
    %584 = @func_2691() /* ty=Tensor[(16, 2, 5), float64] */;
    %585 = %583.0;
    (%584, %585, meta[relay.Constant][33] /* ty=Tensor[(66), float32] */, meta[relay.Constant][34] /* ty=Tensor[(24, 8), int64] */)
  };
  %586() /* ty=(Tensor[(16, 2, 5), float64], Tensor[(3, 10, 6), float32], Tensor[(66), float32], Tensor[(24, 8), int64]) */
}

def @func_5231(%var_5229: Tensor[(220, 2), uint16]) -> (Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16], Tensor[(220, 2), uint16], Tensor[(650, 2), float32]) {
  @func_5228(%var_5229) /* ty=(Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16], Tensor[(220, 2), uint16], Tensor[(650, 2), float32]) */
}

def @func_5314(%var_5309: float64, %var_5311: Tensor[(8, 24), int64]) -> (Tensor[(16, 2, 5), uint16], Tensor[(192), int64], float64, Tensor[(1, 1620), float64], Tensor[(8, 24), int64]) {
  %587 = cast(%var_5309, dtype="float64") /* ty=float64 */;
  %588 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1620), float64] */, dtype="float64") /* ty=Tensor[(1, 1620), float64] */;
  %589 = cast(%var_5311, dtype="int64") /* ty=Tensor[(8, 24), int64] */;
  %590 = reshape(%587, newshape=[]) /* ty=float64 */;
  %591 = reshape(%588, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), float64] */;
  %592 = reshape(%589, newshape=[192]) /* ty=Tensor[(192), int64] */;
  %593 = @func_730(%590, %591, %592) /* ty=(Tensor[(15, 12, 9), float64], Tensor[(192), int64], Tensor[(6, 30), bool]) */;
  %594 = @func_4495() /* ty=Tensor[(16, 2, 5), uint16] */;
  %595 = %593.1;
  (%594, %595, %var_5309, meta[relay.Constant][35] /* ty=Tensor[(1, 1620), float64] */, %var_5311)
}

def @func_4626() -> Tensor[(16, 2, 5), uint16] {
  %596 = fn () -> Tensor[(16, 2, 5), uint16] {
    @func_3649() /* ty=Tensor[(16, 2, 5), uint16] */
  };
  %596() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_2595(%var_2584: Tensor[(1300), float32]) -> (Tensor[(13, 10, 10), int16], Tensor[(132), uint32], Tensor[(1300), float32], Tensor[(10, 16, 7), float64]) {
  %597 = cast(meta[relay.Constant][36] /* ty=Tensor[(132), uint32] */, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %598 = cast(%var_2584, dtype="float32") /* ty=Tensor[(1300), float32] */;
  %599 = cast(%var_2584, dtype="bool") /* ty=Tensor[(1300), bool] */;
  %600 = reshape(%597, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
  %601 = reshape(%598, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
  %602 = reshape(%599, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), bool] */;
  %603 = @func_1521(%600, %601, %602) /* ty=(Tensor[(4, 3, 11), bool], Tensor[(1300), float64], Tensor[(13, 10, 10), int16]) */;
  %604 = cast(meta[relay.Constant][37] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %605 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 16, 7), uint32] */, dtype="uint32") /* ty=Tensor[(10, 16, 7), uint32] */;
  %606 = minimum(%604, %605) /* ty=Tensor[(10, 16, 7), uint32] */;
  %607 = cast(%606, dtype="float64") /* ty=Tensor[(10, 16, 7), float64] */;
  %608 = %603.2;
  %609 = atan(%607) /* ty=Tensor[(10, 16, 7), float64] */;
  (%608, meta[relay.Constant][36] /* ty=Tensor[(132), uint32] */, %var_2584, %609)
}

def @func_5593(%var_5585: Tensor[(132), uint32]) -> (Tensor[(16, 2, 5), float64], Tensor[(480), float32], Tensor[(132), uint32]) {
  %610 = @func_3818() /* ty=(Tensor[(16, 2, 5), float64], Tensor[(16, 2, 5), uint16]) */;
  %611 = cast(%var_5585, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %612 = reshape(%611, newshape=[33, 4]) /* ty=Tensor[(33, 4), uint32] */;
  %613 = @func_4335(%612) /* ty=(Tensor[(11, 3, 9), float32], Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(16, 10, 3), float32], Tensor[(480), float32], Tensor[(13, 10, 10), int8], Tensor[(33, 4), uint32]) */;
  %614 = %610.0;
  %615 = %613.5;
  (%614, %615, %var_5585)
}

def @func_4467(%var_4466: Tensor[(234), int32]) -> (Tensor[(16, 2, 5), uint16], Tensor[(1, 11, 5), uint8], Tensor[(715), float64], Tensor[(234), int32]) {
  %624 = fn (%var_4461: Tensor[(234), int32]) -> (Tensor[(16, 2, 5), uint16], Tensor[(1, 11, 5), uint8], Tensor[(715), float64], Tensor[(234), int32]) {
    %616 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
    %617 = cast(meta[relay.Constant][39] /* ty=Tensor[(715), float64] */, dtype="float64") /* ty=Tensor[(715), float64] */;
    %618 = cast(%var_4461, dtype="int32") /* ty=Tensor[(234), int32] */;
    %619 = reshape(%617, newshape=[5, 11, 13]) /* ty=Tensor[(5, 11, 13), float64] */;
    %620 = reshape(%618, newshape=[234]) /* ty=Tensor[(234), int32] */;
    %621 = @func_2037(%619, %620) /* ty=(Tensor[(13, 9, 2), float64], Tensor[(234), int32], Tensor[(13, 9, 2), float64], Tensor[(1, 11, 5), uint8], uint8, Tensor[(8, 24), int64], Tensor[(5, 11, 13), bool], Tensor[(3, 10, 6), float32], Tensor[(180), float32]) */;
    %622 = %616.0;
    %623 = %621.3;
    (%622, %623, meta[relay.Constant][39] /* ty=Tensor[(715), float64] */, %var_4461)
  };
  %624(%var_4466) /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(1, 11, 5), uint8], Tensor[(715), float64], Tensor[(234), int32]) */
}

def @func_4497() -> Tensor[(16, 2, 5), uint16] {
  @func_4495() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_5508(%var_5506: float64, %var_5507: Tensor[(15, 1, 4), float64]) -> Tensor[(15, 1, 4), float64] {
  %627 = fn (%var_5499: float64, %var_5500: Tensor[(15, 1, 4), float64]) -> Tensor[(15, 1, 4), float64] {
    %625 = cast(%var_5499, dtype="float64") /* ty=float64 */;
    %626 = cast(%var_5500, dtype="float64") /* ty=Tensor[(15, 1, 4), float64] */;
    divide(%625, %626) /* ty=Tensor[(15, 1, 4), float64] */
  };
  %627(%var_5506, %var_5507) /* ty=Tensor[(15, 1, 4), float64] */
}

def @func_4773() -> (Tensor[(16, 2, 5), float64],) {
  @func_4771() /* ty=(Tensor[(16, 2, 5), float64],) */
}

def @func_2955() -> (Tensor[(10, 4, 16), bool],) {
  %636 = fn () -> (Tensor[(10, 4, 16), bool],) {
    %628 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 1), float64] */;
    %629 = cast(meta[relay.Constant][41] /* ty=Tensor[(10, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 16), float64] */;
    %630 = floor_mod(%628, %629) /* ty=Tensor[(10, 4, 16), float64] */;
    %631 = cast(meta[relay.Constant][41] /* ty=Tensor[(10, 4, 16), float64] */, dtype="bool") /* ty=Tensor[(10, 4, 16), bool] */;
    %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%630, dtype="bool") /* ty=Tensor[(10, 4, 16), bool] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %635 = logical_or(%633, %634) /* ty=Tensor[(10, 4, 16), bool] */;
    (%635,)
  };
  %636() /* ty=(Tensor[(10, 4, 16), bool],) */
}

def @func_2716(%var_2715: Tensor[(9, 5, 12), float64]) -> Tensor[(9, 5, 12), float64] {
  %638 = fn (%var_2699: Tensor[(9, 5, 12), float64]) -> Tensor[(9, 5, 12), float64] {
    %637 = cast(%var_2699, dtype="float64") /* ty=Tensor[(9, 5, 12), float64] */;
    erf(%637) /* ty=Tensor[(9, 5, 12), float64] */
  };
  %638(%var_2715) /* ty=Tensor[(9, 5, 12), float64] */
}

def @func_2763() -> (Tensor[(16, 2, 5), uint16],) {
  %639 = @func_2691() /* ty=Tensor[(16, 2, 5), float64] */;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
  %641 = atan(%640) /* ty=Tensor[(16, 2, 5), float64] */;
  %642 = cast(%641, dtype="uint16") /* ty=Tensor[(16, 2, 5), uint16] */;
  %643 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%639, dtype="uint16") /* ty=Tensor[(16, 2, 5), uint16] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %646 = bitwise_and(%644, %645) /* ty=Tensor[(16, 2, 5), uint16] */;
  (%646,)
}

def @func_4337(%var_4336: Tensor[(33, 4), uint32]) -> (Tensor[(11, 3, 9), float32], Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(16, 10, 3), float32], Tensor[(480), float32], Tensor[(13, 10, 10), int8], Tensor[(33, 4), uint32]) {
  %668 = fn (%var_4316: Tensor[(33, 4), uint32]) -> (Tensor[(11, 3, 9), float32], Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(16, 10, 3), float32], Tensor[(480), float32], Tensor[(13, 10, 10), int8], Tensor[(33, 4), uint32]) {
    %647 = @func_3392() /* ty=(Tensor[(11, 3, 9), float32],) */;
    %648 = %647.0;
    %649 = cast(%648, dtype="float32") /* ty=Tensor[(11, 3, 9), float32] */;
    %650 = @func_3849() /* ty=(Tensor[(16, 2, 5), uint16],) */;
    %651 = cast(meta[relay.Constant][42] /* ty=Tensor[(1300), float32] */, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %652 = cast(meta[relay.Constant][42] /* ty=Tensor[(1300), float32] */, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %653 = reshape(%651, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %654 = reshape(%652, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %655 = cast(meta[relay.Constant][43] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %656 = reshape(%655, newshape=[16, 10, 3]) /* ty=Tensor[(16, 10, 3), float32] */;
    %657 = @func_393(%656) /* ty=(Tensor[(16, 10, 3), float32],) */;
    %658 = cast(meta[relay.Constant][42] /* ty=Tensor[(1300), float32] */, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %659 = cast(%var_4316, dtype="uint32") /* ty=Tensor[(33, 4), uint32] */;
    %660 = reshape(%658, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
    %661 = reshape(%659, newshape=[132]) /* ty=Tensor[(132), uint32] */;
    %662 = @func_4128(%660, %661) /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), int8], Tensor[(14, 6, ?), uint16], Tensor[(84, 1), float64], Tensor[(192), float32], Tensor[(13, 10, 10), int16], Tensor[(132), uint32], Tensor[(16, 2, 5), uint16]) */;
    %663 = cosh(%649) /* ty=Tensor[(11, 3, 9), float32] */;
    %664 = %650.0;
    %665 = @func_1152(%653, %654) /* ty=Tensor[(13, 10, 10), bool] */;
    %666 = %657.0;
    %667 = %662.1;
    (%663, %664, %665, meta[relay.Constant][42] /* ty=Tensor[(1300), float32] */, %666, meta[relay.Constant][43] /* ty=Tensor[(480), float32] */, %667, %var_4316)
  };
  %668(%var_4336) /* ty=(Tensor[(11, 3, 9), float32], Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), bool], Tensor[(1300), float32], Tensor[(16, 10, 3), float32], Tensor[(480), float32], Tensor[(13, 10, 10), int8], Tensor[(33, 4), uint32]) */
}

def @func_393(%var_385: Tensor[(16, 10, 3), float32]) -> (Tensor[(16, 10, 3), float32],) {
  %669 = cast(%var_385, dtype="float32") /* ty=Tensor[(16, 10, 3), float32] */;
  %670 = exp(%669) /* ty=Tensor[(16, 10, 3), float32] */;
  (%670,)
}

def @func_1111(%var_1109: Tensor[(6, 1, 11), float32], %var_1110: Tensor[(192), int64]) -> (Tensor[(3, 10, 6), float32], Tensor[(84), float64], Tensor[(192), int64], Tensor[(6, ?, 11), uint32]) {
  @func_1107(%var_1109, %var_1110) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(84), float64], Tensor[(192), int64], Tensor[(6, ?, 11), uint32]) */
}

def @func_3394() -> (Tensor[(11, 3, 9), float32],) {
  @func_3392() /* ty=(Tensor[(11, 3, 9), float32],) */
}

def @func_3232(%var_3230: Tensor[(13, 16, 9), float64], %var_3231: Tensor[(13, 16, 9), float64]) -> Tensor[(13, 16, 9), float64] {
  @func_3228(%var_3230, %var_3231) /* ty=Tensor[(13, 16, 9), float64] */
}

def @func_4771() -> (Tensor[(16, 2, 5), float64],) {
  %671 = @func_3425() /* ty=Tensor[(16, 2, 5), uint16] */;
  %672 = cast(%671, dtype="float64") /* ty=Tensor[(16, 2, 5), float64] */;
  %673 = atanh(%672) /* ty=Tensor[(16, 2, 5), float64] */;
  (%673,)
}

def @func_1525(%var_1522: Tensor[(4, 3, 11), uint32], %var_1523: Tensor[(1300), float32], %var_1524: Tensor[(13, 10, 10), bool]) -> (Tensor[(4, 3, 11), bool], Tensor[(1300), float64], Tensor[(13, 10, 10), int16]) {
  %694 = fn (%var_1499: Tensor[(4, 3, 11), uint32], %var_1509: Tensor[(1300), float32], %var_1516: Tensor[(13, 10, 10), bool]) -> (Tensor[(4, 3, 11), bool], Tensor[(1300), float64], Tensor[(13, 10, 10), int16]) {
    %674 = cast(%var_1499, dtype="bool") /* ty=Tensor[(4, 3, 11), bool] */;
    %675 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(4, 3, 11), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %676 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 3, 11), uint32] */, dtype="bool") /* ty=Tensor[(4, 3, 11), bool] */;
    %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %678 = cast(meta[relay.Constant][45] /* ty=Tensor[(1300), float32] */, dtype="float64") /* ty=Tensor[(1300), float64] */;
    %679 = shape_of(%var_1509, dtype="int32") /* ty=Tensor[(1), int32] */;
    %680 = cast(%var_1509, dtype="float64") /* ty=Tensor[(1300), float64] */;
    %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?), float64] */;
    %682 = cast(%var_1509, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %683 = cast(%var_1509, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %684 = reshape(%682, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %685 = reshape(%683, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %686 = @func_1152(%684, %685) /* ty=Tensor[(13, 10, 10), bool] */;
    %687 = cast(%var_1516, dtype="int16") /* ty=Tensor[(13, 10, 10), int16] */;
    %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
    %689 = cast(%686, dtype="int16") /* ty=Tensor[(13, 10, 10), int16] */;
    %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %691 = less_equal(%676, %677) /* ty=Tensor[(4, 3, 11), bool] */;
    %692 = subtract(%680, %681) /* ty=Tensor[(1300), float64] */;
    %693 = minimum(%689, %690) /* ty=Tensor[(13, 10, 10), int16] */;
    (%691, %692, %693)
  };
  %694(%var_1522, %var_1523, %var_1524) /* ty=(Tensor[(4, 3, 11), bool], Tensor[(1300), float64], Tensor[(13, 10, 10), int16]) */
}

def @func_5620() -> Tensor[(16, 2, 5), uint16] {
  %695 = fn () -> Tensor[(16, 2, 5), uint16] {
    @func_3425() /* ty=Tensor[(16, 2, 5), uint16] */
  };
  %695() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_5778(%var_5777: Tensor[(15, 10, 8), float32]) -> (Tensor[(16, 2, 5), uint16], Tensor[(15, 10, 8), bool], Tensor[(15, 10, 8), float32], Tensor[(180), uint64], uint8, Tensor[(180), uint64], Tensor[(15, 10, 8), bool], Tensor[(15, 10, 8), float32]) {
  %734 = fn (%var_5764: Tensor[(15, 10, 8), float32]) -> (Tensor[(16, 2, 5), uint16], Tensor[(15, 10, 8), bool], Tensor[(15, 10, 8), float32], Tensor[(180), uint64], uint8, Tensor[(180), uint64], Tensor[(15, 10, 8), bool], Tensor[(15, 10, 8), float32]) {
    %696 = cast(meta[relay.Constant][46] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %697 = reshape(%696, newshape=[15, 10, 8]) /* ty=Tensor[(15, 10, 8), float64] */;
    %698 = @func_2231(%697) /* ty=(Tensor[(15, 10, 8), uint8], Tensor[(15, 10, 8), float32]) */;
    %699 = %698.1;
    %700 = cast(meta[relay.Constant][46] /* ty=Tensor[(1200), float64] */, dtype="bool") /* ty=Tensor[(1200), bool] */;
    %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
    %702 = cast(%699, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
    %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %704 = cast(meta[relay.Constant][47] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %705 = cast(meta[relay.Constant][47] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %706 = cast(meta[relay.Constant][48] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %707 = cast(%699, dtype="float64") /* ty=Tensor[(15, 10, 8), float64] */;
    %708 = reshape(%704, newshape=[5, 12, 3]) /* ty=Tensor[(5, 12, 3), uint64] */;
    %709 = reshape(%705, newshape=[5, 12, 3]) /* ty=Tensor[(5, 12, 3), uint64] */;
    %710 = reshape(%706, newshape=[]) /* ty=uint8 */;
    %711 = reshape(%707, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
    %712 = @func_3207(%708, %709, %710, %711) /* ty=(Tensor[(5, 12, 3), bool], uint8, Tensor[(192), int64], Tensor[(6, 30), float64], Tensor[(15, 10, 8), float32], Tensor[(1200), float64], Tensor[(3, 10, 6), float32]) */;
    %713 = cast(meta[relay.Constant][47] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %714 = cast(meta[relay.Constant][48] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %715 = cast(meta[relay.Constant][46] /* ty=Tensor[(1200), float64] */, dtype="float64") /* ty=Tensor[(1200), float64] */;
    %716 = reshape(%713, newshape=[180]) /* ty=Tensor[(180), uint64] */;
    %717 = reshape(%714, newshape=[]) /* ty=uint8 */;
    %718 = reshape(%715, newshape=[1200]) /* ty=Tensor[(1200), float64] */;
    %719 = @func_5037(%716, %717, %718) /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(3, 10, 6), float32], Tensor[(180), uint64], uint8, Tensor[(1200), float64], Tensor[(3, 10, 6), float32], Tensor[(192), int64]) */;
    %720 = cast(%var_5764, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
    %721 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
    %722 = cast(%699, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
    %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %724 = cast(%699, dtype="float32") /* ty=Tensor[(15, 10, 8), float32] */;
    %725 = shape_of(%var_5764, dtype="int32") /* ty=Tensor[(3), int32] */;
    %726 = cast(%var_5764, dtype="float32") /* ty=Tensor[(15, 10, 8), float32] */;
    %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %728 = @func_4002() /* ty=Tensor[(16, 2, 5), uint16] */;
    %729 = less(%702, %703) /* ty=Tensor[(15, 10, 8), bool] */;
    %730 = %712.4;
    %731 = %719.2;
    %732 = logical_and(%722, %723) /* ty=Tensor[(15, 10, 8), bool] */;
    %733 = floor_mod(%726, %727) /* ty=Tensor[(15, 10, 8), float32] */;
    (%728, %729, %730, meta[relay.Constant][47] /* ty=Tensor[(180), uint64] */, meta[relay.Constant][48] /* ty=uint8 */, %731, %732, %733)
  };
  %734(%var_5777) /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(15, 10, 8), bool], Tensor[(15, 10, 8), float32], Tensor[(180), uint64], uint8, Tensor[(180), uint64], Tensor[(15, 10, 8), bool], Tensor[(15, 10, 8), float32]) */
}

def @func_3615(%var_3614: Tensor[(10, 4, 16), bool]) -> (Tensor[(10, 4, 16), float32],) {
  %742 = fn (%var_3602: Tensor[(10, 4, 16), bool]) -> (Tensor[(10, 4, 16), float32],) {
    %735 = @func_2954() /* ty=(Tensor[(10, 4, 16), bool],) */;
    %736 = %735.0;
    %737 = cast(%var_3602, dtype="float32") /* ty=Tensor[(10, 4, 16), float32] */;
    %738 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
    %739 = cast(%736, dtype="float32") /* ty=Tensor[(10, 4, 16), float32] */;
    %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %741 = floor_divide(%739, %740) /* ty=Tensor[(10, 4, 16), float32] */;
    (%741,)
  };
  %742(%var_3614) /* ty=(Tensor[(10, 4, 16), float32],) */
}

def @func_3162() -> Tensor[(16, 2, 5), uint16] {
  %743 = fn () -> Tensor[(16, 2, 5), uint16] {
    @func_2794() /* ty=Tensor[(16, 2, 5), uint16] */
  };
  %743() /* ty=Tensor[(16, 2, 5), uint16] */
}

def @func_4359(%var_4345: Tensor[(9, 5, 6), float32], %var_4355: Tensor[(9, 5, 6), float32]) -> Tensor[(9, 5, 6), float64] {
  %744 = cast(%var_4345, dtype="float32") /* ty=Tensor[(9, 5, 6), float32] */;
  %745 = sigmoid(%744) /* ty=Tensor[(9, 5, 6), float32] */;
  %746 = cast(%var_4355, dtype="float64") /* ty=Tensor[(9, 5, 6), float64] */;
  %747 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%745, dtype="float64") /* ty=Tensor[(9, 5, 6), float64] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%748, %749) /* ty=Tensor[(9, 5, 6), float64] */
}

def @func_4131(%var_4129: Tensor[(1300), float32], %var_4130: Tensor[(132), uint32]) -> (Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), int8], Tensor[(14, 6, ?), uint16], Tensor[(84, 1), float64], Tensor[(192), float32], Tensor[(13, 10, 10), int16], Tensor[(132), uint32], Tensor[(16, 2, 5), uint16]) {
  %779 = fn (%var_4089: Tensor[(1300), float32], %var_4113: Tensor[(132), uint32]) -> (Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), int8], Tensor[(14, 6, ?), uint16], Tensor[(84, 1), float64], Tensor[(192), float32], Tensor[(13, 10, 10), int16], Tensor[(132), uint32], Tensor[(16, 2, 5), uint16]) {
    %750 = @func_2763() /* ty=(Tensor[(16, 2, 5), uint16],) */;
    %751 = cast(%var_4089, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %752 = cast(%var_4089, dtype="float32") /* ty=Tensor[(1300), float32] */;
    %753 = reshape(%751, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %754 = reshape(%752, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), float32] */;
    %755 = @func_1152(%753, %754) /* ty=Tensor[(13, 10, 10), bool] */;
    %756 = cast(%var_4089, dtype="int8") /* ty=Tensor[(1300), int8] */;
    %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
    %758 = cast(%755, dtype="int8") /* ty=Tensor[(13, 10, 10), int8] */;
    %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %760 = cast(meta[relay.Constant][49] /* ty=Tensor[(84, 1), float64] */, dtype="float64") /* ty=Tensor[(84, 1), float64] */;
    %761 = cast(meta[relay.Constant][50] /* ty=Tensor[(192), int64] */, dtype="int64") /* ty=Tensor[(192), int64] */;
    %762 = reshape(%760, newshape=[14, 6, 1]) /* ty=Tensor[(14, 6, 1), float64] */;
    %763 = reshape(%761, newshape=[192]) /* ty=Tensor[(192), int64] */;
    %764 = @func_937(%762, %763) /* ty=(Tensor[(3, 10, 6), float32], Tensor[(192), int64], Tensor[(14, 6, ?), float64], Tensor[(3, 10, 6), float32], Tensor[(14, 6, ?), uint16], Tensor[(192), int64], float64, Tensor[(1620), float64]) */;
    %765 = cast(meta[relay.Constant][50] /* ty=Tensor[(192), int64] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %766 = cast(%var_4113, dtype="uint32") /* ty=Tensor[(132), uint32] */;
    %767 = cast(%755, dtype="float32") /* ty=Tensor[(13, 10, 10), float32] */;
    %768 = multiply(%758, %759) /* ty=Tensor[(13, 10, 10), int8] */;
    %769 = cast(%768, dtype="bool") /* ty=Tensor[(13, 10, 10), bool] */;
    %770 = reshape(%766, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), uint32] */;
    %771 = reshape(%767, newshape=[1300]) /* ty=Tensor[(1300), float32] */;
    %772 = reshape(%769, newshape=[13, 10, 10]) /* ty=Tensor[(13, 10, 10), bool] */;
    %773 = @func_1521(%770, %771, %772) /* ty=(Tensor[(4, 3, 11), bool], Tensor[(1300), float64], Tensor[(13, 10, 10), int16]) */;
    %774 = %750.0;
    %775 = %764.4;
    %776 = tan(%765) /* ty=Tensor[(192), float32] */;
    %777 = %773.2;
    %778 = @func_3450() /* ty=Tensor[(16, 2, 5), uint16] */;
    (%774, %768, %775, meta[relay.Constant][49] /* ty=Tensor[(84, 1), float64] */, %776, %777, %var_4113, %778)
  };
  %779(%var_4129, %var_4130) /* ty=(Tensor[(16, 2, 5), uint16], Tensor[(13, 10, 10), int8], Tensor[(14, 6, ?), uint16], Tensor[(84, 1), float64], Tensor[(192), float32], Tensor[(13, 10, 10), int16], Tensor[(132), uint32], Tensor[(16, 2, 5), uint16]) */
}

def @func_1742(%var_1740: Tensor[(4, 2, 15), float32]) -> (Tensor[(4, 2, 15), float32],) {
  @func_1739(%var_1740) /* ty=(Tensor[(4, 2, 15), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
