==========mod==========
#[version = "0.0.5"]
def @func_316(%var_302: Tensor[(14, 1, 13), float32]) -> Tensor[(14, 1, 13), float32] {
  %0 = cast(%var_302, dtype="float32") /* ty=Tensor[(14, 1, 13), float32] */;
  sin(%0) /* ty=Tensor[(14, 1, 13), float32] */
}

def @func_5906(%var_5879: Tensor[(13, 2, 10), float64], %var_5880: Tensor[(13, 2, 10), float64], %var_5899: Tensor[(132), int32], %var_5901: Tensor[(384), uint8]) -> (Tensor[(13, 2, 10), float64], Tensor[(2400), int64], int32, Tensor[(132), int32], Tensor[(182), float32], Tensor[(384), uint8]) {
  %1 = cast(%var_5880, dtype="float64") /* ty=Tensor[(13, 2, 10), float64] */;
  %2 = shape_of(%var_5879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%var_5879, dtype="float64") /* ty=Tensor[(13, 2, 10), float64] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %5 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %6 = cast(%var_5899, dtype="int32") /* ty=Tensor[(132), int32] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
  %8 = cast(%var_5901, dtype="uint8") /* ty=Tensor[(384), uint8] */;
  %9 = reshape(%5, newshape=[]) /* ty=int32 */;
  %10 = reshape(%6, newshape=[1, 11, 12]) /* ty=Tensor[(1, 11, 12), int32] */;
  %11 = reshape(%7, newshape=[182]) /* ty=Tensor[(182), float32] */;
  %12 = reshape(%8, newshape=[384]) /* ty=Tensor[(384), uint8] */;
  %13 = @func_4813(%9, %10, %11, %12) /* ty=(Tensor[(1, 11, 12), int32], Tensor[(14, 1, 13), float32], Tensor[(182), float32], int64, Tensor[(384), uint8], Tensor[(2400), int64]) */;
  %14 = floor_divide(%3, %4) /* ty=Tensor[(13, 2, 10), float64] */;
  %15 = %13.5;
  (%14, %15, -8 /* ty=int32 */, %var_5899, meta[relay.Constant][0] /* ty=Tensor[(182), float32] */, %var_5901)
}

def @func_4168(%var_4093: Tensor[(1, 3), float32], %var_4094: Tensor[(12, 3), float32], %var_4150: Tensor[(600), float32]) -> (Tensor[(12, 3), float32], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) {
  %16 = cast(%var_4093, dtype="float32") /* ty=Tensor[(1, 3), float32] */;
  %17 = cast(%var_4094, dtype="float32") /* ty=Tensor[(12, 3), float32] */;
  %18 = cast(%var_4150, dtype="float32") /* ty=Tensor[(600), float32] */;
  %19 = reshape(%18, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), float32] */;
  %20 = floor_divide(%16, %17) /* ty=Tensor[(12, 3), float32] */;
  %21 = @func_3974(%19) /* ty=Tensor[(10, 15, 4), float32] */;
  (%20, %21, %var_4150)
}

def @func_7101(%var_7078: Tensor[(12, 12, 16), int32], %var_7079: Tensor[(12, 12, 16), int32], %var_7087: Tensor[(3), float32]) -> (Tensor[(12, 12, 16), int32], Tensor[(10, 15, 4), float32], Tensor[(3), float32], Tensor[(36), float32], Tensor[(6, 100), float32]) {
  %22 = cast(%var_7079, dtype="int32") /* ty=Tensor[(12, 12, 16), int32] */;
  %23 = shape_of(%var_7078, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%var_7078, dtype="int32") /* ty=Tensor[(12, 12, 16), int32] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %26 = cast(%var_7087, dtype="float32") /* ty=Tensor[(3), float32] */;
  %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 100), float32] */, dtype="float32") /* ty=Tensor[(6, 100), float32] */;
  %29 = reshape(%26, newshape=[1, 3]) /* ty=Tensor[(1, 3), float32] */;
  %30 = reshape(%27, newshape=[12, 3]) /* ty=Tensor[(12, 3), float32] */;
  %31 = reshape(%28, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %32 = @func_4168(%29, %30, %31) /* ty=(Tensor[(12, 3), float32], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) */;
  %33 = bitwise_and(%24, %25) /* ty=Tensor[(12, 12, 16), int32] */;
  %34 = %32.1;
  (%33, %34, %var_7087, meta[relay.Constant][1] /* ty=Tensor[(36), float32] */, meta[relay.Constant][2] /* ty=Tensor[(6, 100), float32] */)
}

def @func_3974(%var_3966: Tensor[(10, 15, 4), float32]) -> Tensor[(10, 15, 4), float32] {
  %35 = cast(%var_3966, dtype="float32") /* ty=Tensor[(10, 15, 4), float32] */;
  acosh(%35) /* ty=Tensor[(10, 15, 4), float32] */
}

def @func_6515(%var_6486: Tensor[(1, 14, 13), float32], %var_6492: Tensor[(450), int64], %var_6493: Tensor[(48, 1), int16], %var_6504: Tensor[(600), float32]) -> (int16, Tensor[(450), int64], Tensor[(48, 1), int16], Tensor[(1, 14, 13), float64], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) {
  %36 = cast(%var_6492, dtype="int64") /* ty=Tensor[(450), int64] */;
  %37 = cast(%var_6493, dtype="int16") /* ty=Tensor[(48, 1), int16] */;
  %38 = reshape(%36, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int64] */;
  %39 = reshape(%37, newshape=[24, 2]) /* ty=Tensor[(24, 2), int16] */;
  %40 = @func_632(%38, %39) /* ty=(Tensor[(15, 3, 10), bool], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) */;
  %41 = cast(%var_6486, dtype="float32") /* ty=Tensor[(1, 14, 13), float32] */;
  %42 = asin(%41) /* ty=Tensor[(1, 14, 13), float32] */;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  %44 = cast(%var_6504, dtype="float32") /* ty=Tensor[(600), float32] */;
  %45 = reshape(%44, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), float32] */;
  %46 = %40.2;
  %47 = tan(%43) /* ty=Tensor[(1, 14, 13), float64] */;
  %48 = @func_3974(%45) /* ty=Tensor[(10, 15, 4), float32] */;
  (%46, %var_6492, %var_6493, %47, %48, %var_6504)
}

def @func_3832(%var_3806: float32, %var_3807: Tensor[(3, 16, 4), float32]) -> (Tensor[(3, 16, 4), bool], Tensor[(3, 16, 4), float32]) {
  %49 = cast(%var_3806, dtype="bool") /* ty=bool */;
  %50 = cast(%var_3807, dtype="bool") /* ty=Tensor[(3, 16, 4), bool] */;
  %51 = cast(%var_3806, dtype="float32") /* ty=float32 */;
  %52 = cast(%var_3807, dtype="float32") /* ty=Tensor[(3, 16, 4), float32] */;
  %53 = mod(%51, %52) /* ty=Tensor[(3, 16, 4), float32] */;
  %54 = cast(%53, dtype="float32") /* ty=Tensor[(3, 16, 4), float32] */;
  %55 = sigmoid(%54) /* ty=Tensor[(3, 16, 4), float32] */;
  %56 = cast(%55, dtype="float32") /* ty=Tensor[(3, 16, 4), float32] */;
  %57 = greater(%49, %50) /* ty=Tensor[(3, 16, 4), bool] */;
  %58 = acos(%56) /* ty=Tensor[(3, 16, 4), float32] */;
  (%57, %58)
}

def @func_9801(%var_9793: Tensor[(11, 15, 11), float64]) -> (Tensor[(11, 15, 11), float64],) {
  %59 = cast(%var_9793, dtype="float64") /* ty=Tensor[(11, 15, 11), float64] */;
  %60 = sqrt(%59) /* ty=Tensor[(11, 15, 11), float64] */;
  (%60,)
}

def @func_3126(%var_3110: int64, %var_3111: Tensor[(16, 15, 10), int64]) -> (Tensor[(16, 15, 10), int64], Tensor[(13, 3, 15), float32], Tensor[(195, 3), float32]) {
  %61 = cast(%var_3110, dtype="int64") /* ty=int64 */;
  %62 = cast(%var_3111, dtype="int64") /* ty=Tensor[(16, 15, 10), int64] */;
  %63 = cast(meta[relay.Constant][3] /* ty=Tensor[(195, 3), float32] */, dtype="float32") /* ty=Tensor[(195, 3), float32] */;
  %64 = reshape(%63, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %65 = minimum(%61, %62) /* ty=Tensor[(16, 15, 10), int64] */;
  %66 = @func_2910(%64) /* ty=Tensor[(13, 3, 15), float32] */;
  (%65, %66, meta[relay.Constant][3] /* ty=Tensor[(195, 3), float32] */)
}

def @func_3626(%var_3610: Tensor[(6, 12, 14), int8]) -> Tensor[(6, 12, 14), int8] {
  %67 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 12, 14), int8] */, dtype="int8") /* ty=Tensor[(6, 12, 14), int8] */;
  %68 = shape_of(%var_3610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%var_3610, dtype="int8") /* ty=Tensor[(6, 12, 14), int8] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  multiply(%69, %70) /* ty=Tensor[(6, 12, 14), int8] */
}

def @func_5858(%var_5824: Tensor[(16, 5, 2), float64]) -> (Tensor[(16, 5, 2), float32], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) {
  %71 = cast(%var_5824, dtype="float64") /* ty=Tensor[(16, 5, 2), float64] */;
  %72 = sqrt(%71) /* ty=Tensor[(16, 5, 2), float64] */;
  %73 = cast(%72, dtype="float32") /* ty=Tensor[(16, 5, 2), float32] */;
  %74 = cast(meta[relay.Constant][5] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %75 = reshape(%74, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), float32] */;
  %76 = cosh(%73) /* ty=Tensor[(16, 5, 2), float32] */;
  %77 = @func_3974(%75) /* ty=Tensor[(10, 15, 4), float32] */;
  (%76, %77, meta[relay.Constant][5] /* ty=Tensor[(600), float32] */)
}

def @func_4466(%var_4430: Tensor[(14, 8), int32], %var_4442: Tensor[(448), int16]) -> (Tensor[(14, 8), bool], Tensor[(7, 16, 4), bool], Tensor[(448), int16], Tensor[(3, 16, 4), float32], float32, Tensor[(192), float32]) {
  %78 = cast(%var_4430, dtype="bool") /* ty=Tensor[(14, 8), bool] */;
  %79 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(14, 8), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %80 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 8), int32] */, dtype="bool") /* ty=Tensor[(14, 8), bool] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %82 = cast(%var_4442, dtype="int16") /* ty=Tensor[(448), int16] */;
  %83 = cast(%var_4442, dtype="int16") /* ty=Tensor[(448), int16] */;
  %84 = reshape(%82, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), int16] */;
  %85 = reshape(%83, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), int16] */;
  %86 = @func_3941(%84, %85) /* ty=(Tensor[(7, 16, 4), bool],) */;
  %87 = cast(-5.46084f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %88 = cast(meta[relay.Constant][7] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %89 = reshape(%87, newshape=[]) /* ty=float32 */;
  %90 = reshape(%88, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), float32] */;
  %91 = @func_3832(%89, %90) /* ty=(Tensor[(3, 16, 4), bool], Tensor[(3, 16, 4), float32]) */;
  %92 = not_equal(%80, %81) /* ty=Tensor[(14, 8), bool] */;
  %93 = %86.0;
  %94 = %91.1;
  (%92, %93, %var_4442, %94, -5.46084f /* ty=float32 */, meta[relay.Constant][7] /* ty=Tensor[(192), float32] */)
}

def @func_687(%var_673: Tensor[(6, 16, 5), float64]) -> (Tensor[(6, 16, 5), float64], Tensor[(6, 16, 5), float64]) {
  %95 = cast(%var_673, dtype="float64") /* ty=Tensor[(6, 16, 5), float64] */;
  %96 = cast(%var_673, dtype="float64") /* ty=Tensor[(6, 16, 5), float64] */;
  %97 = log10(%95) /* ty=Tensor[(6, 16, 5), float64] */;
  %98 = asin(%96) /* ty=Tensor[(6, 16, 5), float64] */;
  (%97, %98)
}

def @func_2910(%var_2899: Tensor[(13, 3, 15), float32]) -> Tensor[(13, 3, 15), float32] {
  %99 = cast(%var_2899, dtype="float32") /* ty=Tensor[(13, 3, 15), float32] */;
  cos(%99) /* ty=Tensor[(13, 3, 15), float32] */
}

def @main(%var_10094: Tensor[(4, 15, 5), int8], %var_10095: Tensor[(4, 15, 5), int8], %var_10109: Tensor[(4, 15, 5), int8]) -> (Tensor[(4, 15, 5), bool], Tensor[(4, 15, 5), uint16], Tensor[(4, 15, 5), float64]) {
  %100 = cast(%var_10095, dtype="bool") /* ty=Tensor[(4, 15, 5), bool] */;
  %101 = shape_of(%var_10094, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%var_10094, dtype="bool") /* ty=Tensor[(4, 15, 5), bool] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %104 = cast(%var_10109, dtype="uint16") /* ty=Tensor[(4, 15, 5), uint16] */;
  %105 = shape_of(%var_10094, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%var_10094, dtype="uint16") /* ty=Tensor[(4, 15, 5), uint16] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %108 = cast(%var_10095, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
  %109 = asinh(%108) /* ty=Tensor[(4, 15, 5), float64] */;
  %110 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 15, 5), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %114 = greater_equal(%102, %103) /* ty=Tensor[(4, 15, 5), bool] */;
  %115 = logical_xor(%106, %107) /* ty=Tensor[(4, 15, 5), uint16] */;
  %116 = mod(%112, %113) /* ty=Tensor[(4, 15, 5), float64] */;
  (%114, %115, %116)
}

def @func_8669(%var_8594: Tensor[(16, 15, 13), float32], %var_8617: Tensor[(384, 1), uint8], %var_8618: int64, %var_8619: Tensor[(20, 120), int64], %var_8649: Tensor[(750), float32], %var_8650: Tensor[(48), int16]) -> (Tensor[(13, 3, 15), float32], Tensor[(384, 1), uint8], int64, Tensor[(20, 120), int64], Tensor[(16, 15, 13), float32], Tensor[(15, 10, 5), int64], Tensor[(240, 1), bool], Tensor[(750), float32], Tensor[(48), int16], Tensor[(16, 15, 13), float64]) {
  %117 = cast(%var_8617, dtype="uint8") /* ty=Tensor[(384, 1), uint8] */;
  %118 = cast(%var_8618, dtype="int64") /* ty=int64 */;
  %119 = cast(%var_8619, dtype="int64") /* ty=Tensor[(20, 120), int64] */;
  %120 = reshape(%117, newshape=[6, 4, 16]) /* ty=Tensor[(6, 4, 16), uint8] */;
  %121 = reshape(%118, newshape=[]) /* ty=int64 */;
  %122 = reshape(%119, newshape=[2400]) /* ty=Tensor[(2400), int64] */;
  %123 = @func_4254(%120, %121, %122) /* ty=(Tensor[(6, 4, 16), uint8], Tensor[(13, 3, 15), float32], int64, Tensor[(2400), int64]) */;
  %124 = cast(%var_8594, dtype="float32") /* ty=Tensor[(16, 15, 13), float32] */;
  %125 = sin(%124) /* ty=Tensor[(16, 15, 13), float32] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(16, 15, 13), float32] */;
  %127 = cast(meta[relay.Constant][9] /* ty=Tensor[(240, 1), bool] */, dtype="bool") /* ty=Tensor[(240, 1), bool] */;
  %128 = cast(meta[relay.Constant][9] /* ty=Tensor[(240, 1), bool] */, dtype="bool") /* ty=Tensor[(240, 1), bool] */;
  %129 = cast(%var_8649, dtype="float32") /* ty=Tensor[(750), float32] */;
  %130 = cast(%var_8650, dtype="int16") /* ty=Tensor[(48), int16] */;
  %131 = cast(meta[relay.Constant][9] /* ty=Tensor[(240, 1), bool] */, dtype="bool") /* ty=Tensor[(240, 1), bool] */;
  %132 = reshape(%127, newshape=[10, 4, 6]) /* ty=Tensor[(10, 4, 6), bool] */;
  %133 = reshape(%128, newshape=[10, 4, 6]) /* ty=Tensor[(10, 4, 6), bool] */;
  %134 = reshape(%129, newshape=[50, 15]) /* ty=Tensor[(50, 15), float32] */;
  %135 = reshape(%130, newshape=[48]) /* ty=Tensor[(48), int16] */;
  %136 = reshape(%131, newshape=[10, 4, 6]) /* ty=Tensor[(10, 4, 6), bool] */;
  %137 = @func_4877(%132, %133, %134, %135, %136) /* ty=(Tensor[(15, 10, 5), int64], Tensor[(50, 15), float32], Tensor[(156), float32], int16, Tensor[(10, 45), int64], Tensor[(48), int16], Tensor[(10, 4, 6), bool], Tensor[(10, 4, 6), float64]) */;
  %138 = cast(%125, dtype="float64") /* ty=Tensor[(16, 15, 13), float64] */;
  %139 = %123.1;
  %140 = acos(%126) /* ty=Tensor[(16, 15, 13), float32] */;
  %141 = %137.0;
  %142 = log(%138) /* ty=Tensor[(16, 15, 13), float64] */;
  (%139, %var_8617, %var_8618, %var_8619, %140, %141, meta[relay.Constant][9] /* ty=Tensor[(240, 1), bool] */, %var_8649, %var_8650, %142)
}

def @func_2232(%var_2223: Tensor[(13, 2, 11), float64]) -> (Tensor[(13, 2, 11), float32],) {
  %143 = cast(%var_2223, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
  %144 = acosh(%143) /* ty=Tensor[(13, 2, 11), float64] */;
  %145 = cast(%144, dtype="float32") /* ty=Tensor[(13, 2, 11), float32] */;
  %146 = exp(%145) /* ty=Tensor[(13, 2, 11), float32] */;
  (%146,)
}

def @func_70(%var_58: int16, %var_59: Tensor[(4, 4, 3), int16]) -> Tensor[(4, 4, 3), bool] {
  %147 = cast(%var_58, dtype="bool") /* ty=bool */;
  %148 = cast(%var_59, dtype="bool") /* ty=Tensor[(4, 4, 3), bool] */;
  not_equal(%147, %148) /* ty=Tensor[(4, 4, 3), bool] */
}

def @func_9445(%var_9401: Tensor[(9, 7, 11), int8], %var_9426: Tensor[(2304), int32]) -> (Tensor[(10, 15, 4), float32], Tensor[(2304), int32], Tensor[(3, 1), float32], Tensor[(9, 7, 11), uint32], Tensor[(9, 7, 11), float32]) {
  %149 = cast(%var_9426, dtype="int32") /* ty=Tensor[(2304), int32] */;
  %150 = cast(%var_9426, dtype="int32") /* ty=Tensor[(2304), int32] */;
  %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 1), float32] */;
  %152 = reshape(%149, newshape=[12, 12, 16]) /* ty=Tensor[(12, 12, 16), int32] */;
  %153 = reshape(%150, newshape=[12, 12, 16]) /* ty=Tensor[(12, 12, 16), int32] */;
  %154 = reshape(%151, newshape=[3]) /* ty=Tensor[(3), float32] */;
  %155 = @func_7101(%152, %153, %154) /* ty=(Tensor[(12, 12, 16), int32], Tensor[(10, 15, 4), float32], Tensor[(3), float32], Tensor[(36), float32], Tensor[(6, 100), float32]) */;
  %156 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 7, 11), int8] */, dtype="int8") /* ty=Tensor[(1, 7, 11), int8] */;
  %157 = cast(%var_9401, dtype="int8") /* ty=Tensor[(9, 7, 11), int8] */;
  %158 = left_shift(%156, %157) /* ty=Tensor[(9, 7, 11), int8] */;
  %159 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 7, 11), int8] */, dtype="uint32") /* ty=Tensor[(1, 7, 11), uint32] */;
  %160 = cast(%158, dtype="uint32") /* ty=Tensor[(9, 7, 11), uint32] */;
  %161 = cast(%var_9401, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
  %162 = %155.1;
  %163 = right_shift(%159, %160) /* ty=Tensor[(9, 7, 11), uint32] */;
  %164 = log2(%161) /* ty=Tensor[(9, 7, 11), float32] */;
  (%162, %var_9426, meta[relay.Constant][10] /* ty=Tensor[(3, 1), float32] */, %163, %164)
}

def @func_3941(%var_3935: Tensor[(7, 16, 4), int16], %var_3936: Tensor[(7, 16, 4), int16]) -> (Tensor[(7, 16, 4), bool],) {
  %165 = cast(%var_3936, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
  %166 = shape_of(%var_3935, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%var_3935, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %169 = equal(%167, %168) /* ty=Tensor[(7, 16, 4), bool] */;
  (%169,)
}

def @func_2878(%var_2806: Tensor[(6, 6, 10), bool], %var_2822: Tensor[(450), int64], %var_2823: Tensor[(48), int16], %var_2824: Tensor[(480), float64], %var_2825: Tensor[(1, 192), uint16], %var_2853: Tensor[(39, 4), float32]) -> (int16, Tensor[(1950), float32], Tensor[(450), int64], Tensor[(48), int16], Tensor[(480), float64], Tensor[(1, 192), uint16], Tensor[(6, 6, 10), uint16], Tensor[(6, 6, 10), bool], Tensor[(6, 16, 5), float64], Tensor[(48), int16], Tensor[(39, 4), float32], Tensor[(6, 6, 10), float32]) {
  %170 = cast(meta[relay.Constant][12] /* ty=Tensor[(1950), float32] */, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %171 = cast(%var_2822, dtype="int64") /* ty=Tensor[(450), int64] */;
  %172 = cast(%var_2823, dtype="int16") /* ty=Tensor[(48), int16] */;
  %173 = cast(%var_2824, dtype="float64") /* ty=Tensor[(480), float64] */;
  %174 = cast(%var_2825, dtype="uint16") /* ty=Tensor[(1, 192), uint16] */;
  %175 = reshape(%170, newshape=[15, 13, 10]) /* ty=Tensor[(15, 13, 10), float32] */;
  %176 = reshape(%171, newshape=[150, 3]) /* ty=Tensor[(150, 3), int64] */;
  %177 = reshape(%172, newshape=[4, 12]) /* ty=Tensor[(4, 12), int16] */;
  %178 = reshape(%173, newshape=[8, 60]) /* ty=Tensor[(8, 60), float64] */;
  %179 = reshape(%174, newshape=[96, 2]) /* ty=Tensor[(96, 2), uint16] */;
  %180 = @func_2019(%175, %176, %177, %178, %179) /* ty=(int16, Tensor[(156), float32], Tensor[(4, 4, 3), bool], Tensor[(150, 3), int64], Tensor[(4, 12), int16], Tensor[(15, 13, 10), uint8], Tensor[(6, 16, 5), float64], Tensor[(8, 60), float64], Tensor[(13, 3, 4), float64], Tensor[(96, 2), uint16], Tensor[(15, 13, 10), float64]) */;
  %181 = cast(%var_2806, dtype="uint16") /* ty=Tensor[(6, 6, 10), uint16] */;
  %182 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(6, 6, 10), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 6, 10), bool] */, dtype="uint16") /* ty=Tensor[(6, 6, 10), uint16] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %185 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 6, 10), bool] */, dtype="bool") /* ty=Tensor[(6, 6, 10), bool] */;
  %186 = shape_of(%var_2806, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%var_2806, dtype="bool") /* ty=Tensor[(6, 6, 10), bool] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %189 = logical_and(%187, %188) /* ty=Tensor[(6, 6, 10), bool] */;
  %190 = cast(%189, dtype="bool") /* ty=Tensor[(6, 6, 10), bool] */;
  %191 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(6, 6, 10), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 6, 10), bool] */, dtype="bool") /* ty=Tensor[(6, 6, 10), bool] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %194 = cast(%var_2824, dtype="float64") /* ty=Tensor[(480), float64] */;
  %195 = reshape(%194, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %196 = @func_687(%195) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(6, 16, 5), float64]) */;
  %197 = cast(%var_2853, dtype="float32") /* ty=Tensor[(39, 4), float32] */;
  %198 = reshape(%197, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %199 = @func_1387(%198) /* ty=(Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) */;
  %200 = cast(%189, dtype="float32") /* ty=Tensor[(6, 6, 10), float32] */;
  %201 = %180.0;
  %202 = left_shift(%183, %184) /* ty=Tensor[(6, 6, 10), uint16] */;
  %203 = not_equal(%192, %193) /* ty=Tensor[(6, 6, 10), bool] */;
  %204 = %196.0;
  %205 = %199.2;
  %206 = sqrt(%200) /* ty=Tensor[(6, 6, 10), float32] */;
  (%201, meta[relay.Constant][12] /* ty=Tensor[(1950), float32] */, %var_2822, %var_2823, %var_2824, %var_2825, %202, %203, %204, %205, %var_2853, %206)
}

def @func_4877(%var_4830: Tensor[(10, 4, 6), bool], %var_4831: Tensor[(10, 4, 6), bool], %var_4841: Tensor[(50, 15), float32], %var_4855: Tensor[(48), int16], %var_4865: Tensor[(10, 4, 6), bool]) -> (Tensor[(15, 10, 5), int64], Tensor[(50, 15), float32], Tensor[(156), float32], int16, Tensor[(10, 45), int64], Tensor[(48), int16], Tensor[(10, 4, 6), bool], Tensor[(10, 4, 6), float64]) {
  %207 = cast(%var_4841, dtype="float32") /* ty=Tensor[(50, 15), float32] */;
  %208 = cast(meta[relay.Constant][14] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %209 = reshape(%207, newshape=[15, 10, 5]) /* ty=Tensor[(15, 10, 5), float32] */;
  %210 = reshape(%208, newshape=[156]) /* ty=Tensor[(156), float32] */;
  %211 = @func_2560(%209, %210) /* ty=(Tensor[(15, 10, 5), int64], Tensor[(4, 4, 3), bool], Tensor[(156), float32]) */;
  %212 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 45), int64] */, dtype="int64") /* ty=Tensor[(10, 45), int64] */;
  %213 = cast(%var_4855, dtype="int16") /* ty=Tensor[(48), int16] */;
  %214 = reshape(%212, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int64] */;
  %215 = reshape(%213, newshape=[24, 2]) /* ty=Tensor[(24, 2), int16] */;
  %216 = @func_632(%214, %215) /* ty=(Tensor[(15, 3, 10), bool], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) */;
  %217 = cast(%var_4831, dtype="bool") /* ty=Tensor[(10, 4, 6), bool] */;
  %218 = shape_of(%var_4830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%var_4830, dtype="bool") /* ty=Tensor[(10, 4, 6), bool] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %221 = logical_or(%219, %220) /* ty=Tensor[(10, 4, 6), bool] */;
  %222 = cast(%var_4865, dtype="bool") /* ty=Tensor[(10, 4, 6), bool] */;
  %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%221, dtype="bool") /* ty=Tensor[(10, 4, 6), bool] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %226 = cast(%var_4831, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %227 = sqrt(%226) /* ty=Tensor[(10, 4, 6), float64] */;
  %228 = cast(%221, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%227, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %232 = divide(%230, %231) /* ty=Tensor[(10, 4, 6), float64] */;
  %233 = cast(%232, dtype="float32") /* ty=Tensor[(10, 4, 6), float32] */;
  %234 = sinh(%233) /* ty=Tensor[(10, 4, 6), float32] */;
  %235 = cast(%221, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %236 = shape_of(%234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%234, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %239 = %211.0;
  %240 = %216.2;
  %241 = greater_equal(%224, %225) /* ty=Tensor[(10, 4, 6), bool] */;
  %242 = subtract(%237, %238) /* ty=Tensor[(10, 4, 6), float64] */;
  (%239, %var_4841, meta[relay.Constant][14] /* ty=Tensor[(156), float32] */, %240, meta[relay.Constant][15] /* ty=Tensor[(10, 45), int64] */, %var_4855, %241, %242)
}

def @func_4749(%var_4733: Tensor[(6, 16, 3), uint32], %var_4739: uint8, %var_4740: Tensor[(1008), int8], %var_4744: Tensor[(150), float32]) -> (Tensor[(6, 16, 3), uint32], Tensor[(1008, 1), int32], uint8, Tensor[(1008), int8], Tensor[(36), float32], Tensor[(600), float32], Tensor[(182), float32], Tensor[(150), float32]) {
  %243 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 1, 3), uint32] */, dtype="uint32") /* ty=Tensor[(6, 1, 3), uint32] */;
  %244 = cast(%var_4733, dtype="uint32") /* ty=Tensor[(6, 16, 3), uint32] */;
  %245 = cast(%var_4739, dtype="uint8") /* ty=uint8 */;
  %246 = cast(%var_4740, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %247 = cast(meta[relay.Constant][17] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %248 = cast(meta[relay.Constant][18] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %249 = cast(meta[relay.Constant][19] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
  %250 = cast(%var_4744, dtype="float32") /* ty=Tensor[(150), float32] */;
  %251 = reshape(%245, newshape=[]) /* ty=uint8 */;
  %252 = reshape(%246, newshape=[1008, 1]) /* ty=Tensor[(1008, 1), int8] */;
  %253 = reshape(%247, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %254 = reshape(%248, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %255 = reshape(%249, newshape=[182, 1]) /* ty=Tensor[(182, 1), float32] */;
  %256 = reshape(%250, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %257 = @func_4341(%251, %252, %253, %254, %255, %256) /* ty=(Tensor[(6, 12, 14), int8], Tensor[(1008, 1), int32], Tensor[(13, 3, 15), float32], Tensor[(585), float32], Tensor[(7, 16, 14), uint32], Tensor[(12, 3), float32], Tensor[(3), float32], Tensor[(36), float32], Tensor[(600), float32], Tensor[(14, 1, 13), float32], Tensor[(182, 1), float32], Tensor[(156), float32], Tensor[(150), float32], Tensor[(156), float32], Tensor[(24, 2), int16], Tensor[(72), uint16], Tensor[(24, 2), int16]) */;
  %258 = bitwise_xor(%243, %244) /* ty=Tensor[(6, 16, 3), uint32] */;
  %259 = %257.1;
  (%258, %259, %var_4739, %var_4740, meta[relay.Constant][17] /* ty=Tensor[(36), float32] */, meta[relay.Constant][18] /* ty=Tensor[(600), float32] */, meta[relay.Constant][19] /* ty=Tensor[(182), float32] */, %var_4744)
}

def @func_4341(%var_4274: uint8, %var_4283: Tensor[(1008, 1), int8], %var_4307: Tensor[(36), float32], %var_4308: Tensor[(600), float32], %var_4313: Tensor[(182, 1), float32], %var_4316: Tensor[(150), float32]) -> (Tensor[(6, 12, 14), int8], Tensor[(1008, 1), int32], Tensor[(13, 3, 15), float32], Tensor[(585), float32], Tensor[(7, 16, 14), uint32], Tensor[(12, 3), float32], Tensor[(3), float32], Tensor[(36), float32], Tensor[(600), float32], Tensor[(14, 1, 13), float32], Tensor[(182, 1), float32], Tensor[(156), float32], Tensor[(150), float32], Tensor[(156), float32], Tensor[(24, 2), int16], Tensor[(72), uint16], Tensor[(24, 2), int16]) {
  %260 = cast(%var_4283, dtype="int8") /* ty=Tensor[(1008, 1), int8] */;
  %261 = reshape(%260, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int8] */;
  %262 = cast(%var_4283, dtype="int32") /* ty=Tensor[(1008, 1), int32] */;
  %263 = cast(%var_4274, dtype="int32") /* ty=int32 */;
  %264 = cast(meta[relay.Constant][20] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %265 = reshape(%264, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %266 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 16, 14), uint8] */, dtype="float32") /* ty=Tensor[(7, 16, 14), float32] */;
  %267 = atanh(%266) /* ty=Tensor[(7, 16, 14), float32] */;
  %268 = cast(%var_4274, dtype="uint8") /* ty=uint8 */;
  %269 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 16, 14), uint8] */, dtype="uint8") /* ty=Tensor[(7, 16, 14), uint8] */;
  %270 = logical_xor(%268, %269) /* ty=Tensor[(7, 16, 14), uint8] */;
  %271 = cast(%270, dtype="bool") /* ty=Tensor[(7, 16, 14), bool] */;
  %272 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%267, dtype="bool") /* ty=Tensor[(7, 16, 14), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %275 = greater_equal(%273, %274) /* ty=Tensor[(7, 16, 14), bool] */;
  %276 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 16, 14), uint8] */, dtype="uint32") /* ty=Tensor[(7, 16, 14), uint32] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="uint32") /* ty=Tensor[(7, 16, 14), uint32] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %280 = cast(meta[relay.Constant][22] /* ty=Tensor[(3), float32] */, dtype="float32") /* ty=Tensor[(3), float32] */;
  %281 = cast(%var_4307, dtype="float32") /* ty=Tensor[(36), float32] */;
  %282 = cast(%var_4308, dtype="float32") /* ty=Tensor[(600), float32] */;
  %283 = reshape(%280, newshape=[1, 3]) /* ty=Tensor[(1, 3), float32] */;
  %284 = reshape(%281, newshape=[12, 3]) /* ty=Tensor[(12, 3), float32] */;
  %285 = reshape(%282, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %286 = @func_4168(%283, %284, %285) /* ty=(Tensor[(12, 3), float32], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) */;
  %287 = cast(%var_4313, dtype="float32") /* ty=Tensor[(182, 1), float32] */;
  %288 = reshape(%287, newshape=[14, 1, 13]) /* ty=Tensor[(14, 1, 13), float32] */;
  %289 = cast(%var_4316, dtype="float32") /* ty=Tensor[(150), float32] */;
  %290 = cast(meta[relay.Constant][23] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %291 = reshape(%289, newshape=[5, 2, 15]) /* ty=Tensor[(5, 2, 15), float32] */;
  %292 = reshape(%290, newshape=[156]) /* ty=Tensor[(156), float32] */;
  %293 = @func_2502(%291, %292) /* ty=(Tensor[(14, 1, 13), float32], Tensor[(182), float32], Tensor[(4, 4, 3), bool], Tensor[(156), float32], Tensor[(5, 2, 15), float64], Tensor[(5, 2, 15), float64]) */;
  %294 = cast(%var_4307, dtype="uint16") /* ty=Tensor[(36), uint16] */;
  %295 = cast(meta[relay.Constant][24] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %296 = reshape(%294, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), uint16] */;
  %297 = reshape(%295, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), uint16] */;
  %298 = @func_3865(%296, %297) /* ty=(Tensor[(2, 12, 3), uint16], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) */;
  %299 = cast(%var_4307, dtype="uint16") /* ty=Tensor[(36), uint16] */;
  %300 = cast(meta[relay.Constant][24] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %301 = reshape(%299, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), uint16] */;
  %302 = reshape(%300, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), uint16] */;
  %303 = @func_3865(%301, %302) /* ty=(Tensor[(2, 12, 3), uint16], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) */;
  %304 = @func_3626(%261) /* ty=Tensor[(6, 12, 14), int8] */;
  %305 = bitwise_xor(%262, %263) /* ty=Tensor[(1008, 1), int32] */;
  %306 = @func_2910(%265) /* ty=Tensor[(13, 3, 15), float32] */;
  %307 = multiply(%278, %279) /* ty=Tensor[(7, 16, 14), uint32] */;
  %308 = %286.0;
  %309 = @func_316(%288) /* ty=Tensor[(14, 1, 13), float32] */;
  %310 = %293.3;
  %311 = %298.3;
  %312 = %303.3;
  (%304, %305, %306, meta[relay.Constant][20] /* ty=Tensor[(585), float32] */, %307, %308, meta[relay.Constant][22] /* ty=Tensor[(3), float32] */, %var_4307, %var_4308, %309, %var_4313, %310, %var_4316, meta[relay.Constant][23] /* ty=Tensor[(156), float32] */, %311, meta[relay.Constant][24] /* ty=Tensor[(72), uint16] */, %312)
}

def @func_3720(%var_3708: Tensor[(10, 14, 14), uint8], %var_3709: Tensor[(10, 14, 14), uint8]) -> Tensor[(10, 14, 14), uint8] {
  %313 = cast(%var_3709, dtype="uint8") /* ty=Tensor[(10, 14, 14), uint8] */;
  %314 = shape_of(%var_3708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%var_3708, dtype="uint8") /* ty=Tensor[(10, 14, 14), uint8] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_xor(%315, %316) /* ty=Tensor[(10, 14, 14), uint8] */
}

def @func_2019(%var_1923: Tensor[(15, 13, 10), float32], %var_1956: Tensor[(150, 3), int64], %var_1957: Tensor[(4, 12), int16], %var_1998: Tensor[(8, 60), float64], %var_2002: Tensor[(96, 2), uint16]) -> (int16, Tensor[(156), float32], Tensor[(4, 4, 3), bool], Tensor[(150, 3), int64], Tensor[(4, 12), int16], Tensor[(15, 13, 10), uint8], Tensor[(6, 16, 5), float64], Tensor[(8, 60), float64], Tensor[(13, 3, 4), float64], Tensor[(96, 2), uint16], Tensor[(15, 13, 10), float64]) {
  %317 = cast(meta[relay.Constant][25] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %318 = reshape(%317, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %319 = @func_1387(%318) /* ty=(Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) */;
  %320 = cast(%var_1956, dtype="int64") /* ty=Tensor[(150, 3), int64] */;
  %321 = cast(%var_1957, dtype="int16") /* ty=Tensor[(4, 12), int16] */;
  %322 = reshape(%320, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int64] */;
  %323 = reshape(%321, newshape=[24, 2]) /* ty=Tensor[(24, 2), int16] */;
  %324 = @func_632(%322, %323) /* ty=(Tensor[(15, 3, 10), bool], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) */;
  %325 = cast(%var_1923, dtype="float64") /* ty=Tensor[(15, 13, 10), float64] */;
  %326 = acos(%325) /* ty=Tensor[(15, 13, 10), float64] */;
  %327 = cast(%var_1923, dtype="uint8") /* ty=Tensor[(15, 13, 10), uint8] */;
  %328 = shape_of(%326, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%326, dtype="uint8") /* ty=Tensor[(15, 13, 10), uint8] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %331 = cast(%var_1998, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %332 = reshape(%331, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %333 = @func_687(%332) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(6, 16, 5), float64]) */;
  %334 = cast(%var_2002, dtype="uint16") /* ty=Tensor[(96, 2), uint16] */;
  %335 = cast(%var_2002, dtype="uint16") /* ty=Tensor[(96, 2), uint16] */;
  %336 = reshape(%334, newshape=[4, 6, 8]) /* ty=Tensor[(4, 6, 8), uint16] */;
  %337 = reshape(%335, newshape=[4, 6, 8]) /* ty=Tensor[(4, 6, 8), uint16] */;
  %338 = @func_1824(%336, %337) /* ty=(Tensor[(4, 6, 8), bool], Tensor[(13, 3, 4), float64], Tensor[(3, 52), float32]) */;
  %339 = cast(%var_1923, dtype="float32") /* ty=Tensor[(15, 13, 10), float32] */;
  %340 = exp(%339) /* ty=Tensor[(15, 13, 10), float32] */;
  %341 = cast(%340, dtype="float64") /* ty=Tensor[(15, 13, 10), float64] */;
  %342 = %319.1;
  %343 = %324.1;
  %344 = bitwise_or(%329, %330) /* ty=Tensor[(15, 13, 10), uint8] */;
  %345 = %333.0;
  %346 = %338.1;
  %347 = erf(%341) /* ty=Tensor[(15, 13, 10), float64] */;
  (%342, meta[relay.Constant][25] /* ty=Tensor[(156), float32] */, %343, %var_1956, %var_1957, %344, %345, %var_1998, %346, %var_2002, %347)
}

def @func_3865(%var_3846: Tensor[(1, 12, 3), uint16], %var_3847: Tensor[(2, 12, 3), uint16]) -> (Tensor[(2, 12, 3), uint16], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) {
  %348 = cast(%var_3846, dtype="uint16") /* ty=Tensor[(1, 12, 3), uint16] */;
  %349 = cast(%var_3847, dtype="uint16") /* ty=Tensor[(2, 12, 3), uint16] */;
  %350 = cast(meta[relay.Constant][26] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %351 = cast(meta[relay.Constant][27] /* ty=Tensor[(24, 2), int16] */, dtype="int16") /* ty=Tensor[(24, 2), int16] */;
  %352 = reshape(%350, newshape=[]) /* ty=int16 */;
  %353 = reshape(%351, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), int16] */;
  %354 = right_shift(%348, %349) /* ty=Tensor[(2, 12, 3), uint16] */;
  %355 = @func_70(%352, %353) /* ty=Tensor[(4, 4, 3), bool] */;
  (%354, %355, meta[relay.Constant][26] /* ty=int16 */, meta[relay.Constant][27] /* ty=Tensor[(24, 2), int16] */)
}

def @func_7710(%var_7705: Tensor[(10, 9, 11), float64], %var_7706: Tensor[(10, 9, 11), float64]) -> Tensor[(10, 9, 11), float64] {
  %356 = cast(%var_7706, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %357 = shape_of(%var_7705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%var_7705, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%358, %359) /* ty=Tensor[(10, 9, 11), float64] */
}

def @func_4254(%var_4234: Tensor[(6, 4, 16), uint8], %var_4248: int64, %var_4249: Tensor[(2400), int64]) -> (Tensor[(6, 4, 16), uint8], Tensor[(13, 3, 15), float32], int64, Tensor[(2400), int64]) {
  %360 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 4, 16), uint8] */, dtype="uint8") /* ty=Tensor[(6, 4, 16), uint8] */;
  %361 = shape_of(%var_4234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%var_4234, dtype="uint8") /* ty=Tensor[(6, 4, 16), uint8] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %364 = cast(%var_4248, dtype="int64") /* ty=int64 */;
  %365 = cast(%var_4249, dtype="int64") /* ty=Tensor[(2400), int64] */;
  %366 = reshape(%364, newshape=[]) /* ty=int64 */;
  %367 = reshape(%365, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), int64] */;
  %368 = @func_3126(%366, %367) /* ty=(Tensor[(16, 15, 10), int64], Tensor[(13, 3, 15), float32], Tensor[(195, 3), float32]) */;
  %369 = bitwise_or(%362, %363) /* ty=Tensor[(6, 4, 16), uint8] */;
  %370 = %368.1;
  (%369, %370, %var_4248, %var_4249)
}

def @func_8684(%var_8678: Tensor[(1, 16, 6), float64]) -> Tensor[(1, 16, 6), float64] {
  %371 = cast(%var_8678, dtype="float64") /* ty=Tensor[(1, 16, 6), float64] */;
  asinh(%371) /* ty=Tensor[(1, 16, 6), float64] */
}

def @func_7334(%var_7327: Tensor[(1, 6, 14), float32]) -> (Tensor[(1, 6, 14), float32],) {
  %372 = cast(%var_7327, dtype="float32") /* ty=Tensor[(1, 6, 14), float32] */;
  %373 = tan(%372) /* ty=Tensor[(1, 6, 14), float32] */;
  (%373,)
}

def @func_6606(%var_6579: Tensor[(3, 13, 10), int32], %var_6580: Tensor[(3, 13, 10), int32]) -> Tensor[(3, 13, 10), bool] {
  %374 = cast(%var_6580, dtype="bool") /* ty=Tensor[(3, 13, 10), bool] */;
  %375 = shape_of(%var_6579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%var_6579, dtype="bool") /* ty=Tensor[(3, 13, 10), bool] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%376, %377) /* ty=Tensor[(3, 13, 10), bool] */
}

def @func_4813(%var_4781: int32, %var_4782: Tensor[(1, 11, 12), int32], %var_4792: Tensor[(182), float32], %var_4810: Tensor[(384), uint8]) -> (Tensor[(1, 11, 12), int32], Tensor[(14, 1, 13), float32], Tensor[(182), float32], int64, Tensor[(384), uint8], Tensor[(2400), int64]) {
  %378 = cast(%var_4781, dtype="int32") /* ty=int32 */;
  %379 = cast(%var_4782, dtype="int32") /* ty=Tensor[(1, 11, 12), int32] */;
  %380 = cast(%var_4792, dtype="float32") /* ty=Tensor[(182), float32] */;
  %381 = reshape(%380, newshape=[14, 1, 13]) /* ty=Tensor[(14, 1, 13), float32] */;
  %382 = cast(%var_4810, dtype="uint8") /* ty=Tensor[(384), uint8] */;
  %383 = cast(%var_4781, dtype="int64") /* ty=int64 */;
  %384 = cast(meta[relay.Constant][29] /* ty=Tensor[(2400), int64] */, dtype="int64") /* ty=Tensor[(2400), int64] */;
  %385 = reshape(%382, newshape=[6, 4, 16]) /* ty=Tensor[(6, 4, 16), uint8] */;
  %386 = reshape(%383, newshape=[]) /* ty=int64 */;
  %387 = reshape(%384, newshape=[2400]) /* ty=Tensor[(2400), int64] */;
  %388 = @func_4254(%385, %386, %387) /* ty=(Tensor[(6, 4, 16), uint8], Tensor[(13, 3, 15), float32], int64, Tensor[(2400), int64]) */;
  %389 = subtract(%378, %379) /* ty=Tensor[(1, 11, 12), int32] */;
  %390 = @func_316(%381) /* ty=Tensor[(14, 1, 13), float32] */;
  %391 = %388.2;
  (%389, %390, %var_4792, %391, %var_4810, meta[relay.Constant][29] /* ty=Tensor[(2400), int64] */)
}

def @func_6724(%var_6647: int16, %var_6648: Tensor[(11, 7, 9), int16], %var_6665: Tensor[(48, 4), float32], %var_6682: Tensor[(112, 4), int16], %var_6689: Tensor[(450), int64], %var_6690: Tensor[(48), int16], %var_6691: Tensor[(480), float64], %var_6695: Tensor[(11, 7, 9), int16], %var_6702: Tensor[(600), float32], %var_6713: Tensor[(390), int32]) -> (Tensor[(11, 7, 9), int16], Tensor[(11, 7, 9), bool], int16, Tensor[(156), float32], Tensor[(3, 16, 4), float32], Tensor[(48, 4), float32], float32, Tensor[(112), int32], Tensor[(112, 4), int16], int16, Tensor[(10, 195), float32], Tensor[(450), int64], Tensor[(48), int16], Tensor[(480), float64], Tensor[(11, 7, 9), float32], Tensor[(600), float32], Tensor[(1, 3), float32], Tensor[(3, 12), float32], Tensor[(600), float32], Tensor[(3, 13, 10), bool], Tensor[(390), int32]) {
  %392 = cast(%var_6647, dtype="int16") /* ty=int16 */;
  %393 = cast(%var_6648, dtype="int16") /* ty=Tensor[(11, 7, 9), int16] */;
  %394 = cast(%var_6648, dtype="bool") /* ty=Tensor[(11, 7, 9), bool] */;
  %395 = cast(%var_6647, dtype="bool") /* ty=bool */;
  %396 = cast(meta[relay.Constant][30] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %397 = reshape(%396, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %398 = @func_1387(%397) /* ty=(Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) */;
  %399 = cast(%var_6647, dtype="float32") /* ty=float32 */;
  %400 = cast(%var_6665, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %401 = reshape(%399, newshape=[]) /* ty=float32 */;
  %402 = reshape(%400, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), float32] */;
  %403 = @func_3832(%401, %402) /* ty=(Tensor[(3, 16, 4), bool], Tensor[(3, 16, 4), float32]) */;
  %404 = cast(meta[relay.Constant][31] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %405 = cast(%var_6682, dtype="int16") /* ty=Tensor[(112, 4), int16] */;
  %406 = reshape(%404, newshape=[14, 8]) /* ty=Tensor[(14, 8), int32] */;
  %407 = reshape(%405, newshape=[448]) /* ty=Tensor[(448), int16] */;
  %408 = @func_4466(%406, %407) /* ty=(Tensor[(14, 8), bool], Tensor[(7, 16, 4), bool], Tensor[(448), int16], Tensor[(3, 16, 4), float32], float32, Tensor[(192), float32]) */;
  %409 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 195), float32] */, dtype="float32") /* ty=Tensor[(10, 195), float32] */;
  %410 = cast(%var_6689, dtype="int64") /* ty=Tensor[(450), int64] */;
  %411 = cast(%var_6690, dtype="int16") /* ty=Tensor[(48), int16] */;
  %412 = cast(%var_6691, dtype="float64") /* ty=Tensor[(480), float64] */;
  %413 = %403.1;
  %414 = cast(%413, dtype="uint16") /* ty=Tensor[(3, 16, 4), uint16] */;
  %415 = reshape(%409, newshape=[15, 13, 10]) /* ty=Tensor[(15, 13, 10), float32] */;
  %416 = reshape(%410, newshape=[150, 3]) /* ty=Tensor[(150, 3), int64] */;
  %417 = reshape(%411, newshape=[4, 12]) /* ty=Tensor[(4, 12), int16] */;
  %418 = reshape(%412, newshape=[8, 60]) /* ty=Tensor[(8, 60), float64] */;
  %419 = reshape(%414, newshape=[96, 2]) /* ty=Tensor[(96, 2), uint16] */;
  %420 = @func_2019(%415, %416, %417, %418, %419) /* ty=(int16, Tensor[(156), float32], Tensor[(4, 4, 3), bool], Tensor[(150, 3), int64], Tensor[(4, 12), int16], Tensor[(15, 13, 10), uint8], Tensor[(6, 16, 5), float64], Tensor[(8, 60), float64], Tensor[(13, 3, 4), float64], Tensor[(96, 2), uint16], Tensor[(15, 13, 10), float64]) */;
  %421 = cast(%var_6695, dtype="float32") /* ty=Tensor[(11, 7, 9), float32] */;
  %422 = shape_of(%var_6648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%var_6648, dtype="float32") /* ty=Tensor[(11, 7, 9), float32] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %425 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 3), float32] */;
  %426 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %427 = cast(%var_6702, dtype="float32") /* ty=Tensor[(600), float32] */;
  %428 = reshape(%425, newshape=[1, 3]) /* ty=Tensor[(1, 3), float32] */;
  %429 = reshape(%426, newshape=[12, 3]) /* ty=Tensor[(12, 3), float32] */;
  %430 = reshape(%427, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %431 = @func_4168(%428, %429, %430) /* ty=(Tensor[(12, 3), float32], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) */;
  %432 = cast(%var_6713, dtype="int32") /* ty=Tensor[(390), int32] */;
  %433 = cast(%var_6713, dtype="int32") /* ty=Tensor[(390), int32] */;
  %434 = reshape(%432, newshape=[3, 13, 10]) /* ty=Tensor[(3, 13, 10), int32] */;
  %435 = reshape(%433, newshape=[3, 13, 10]) /* ty=Tensor[(3, 13, 10), int32] */;
  %436 = minimum(%392, %393) /* ty=Tensor[(11, 7, 9), int16] */;
  %437 = less_equal(%394, %395) /* ty=Tensor[(11, 7, 9), bool] */;
  %438 = %398.1;
  %439 = %408.4;
  %440 = %420.0;
  %441 = subtract(%423, %424) /* ty=Tensor[(11, 7, 9), float32] */;
  %442 = %431.2;
  %443 = @func_6606(%434, %435) /* ty=Tensor[(3, 13, 10), bool] */;
  (%436, %437, %438, meta[relay.Constant][30] /* ty=Tensor[(156), float32] */, %413, %var_6665, %439, meta[relay.Constant][31] /* ty=Tensor[(112), int32] */, %var_6682, %440, meta[relay.Constant][32] /* ty=Tensor[(10, 195), float32] */, %var_6689, %var_6690, %var_6691, %441, %442, meta[relay.Constant][33] /* ty=Tensor[(1, 3), float32] */, meta[relay.Constant][34] /* ty=Tensor[(3, 12), float32] */, %var_6702, %443, %var_6713)
}

def @func_6468(%var_6411: Tensor[(12, 16, 14), float64], %var_6412: Tensor[(12, 16, 14), float64], %var_6435: Tensor[(448), int16]) -> (Tensor[(3, 16, 4), float32], Tensor[(112), int32], Tensor[(448), int16], Tensor[(12, 16, 14), bool], Tensor[(12, 16, 14), float64], Tensor[(12, 16, 14), float32]) {
  %444 = cast(meta[relay.Constant][35] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %445 = cast(%var_6435, dtype="int16") /* ty=Tensor[(448), int16] */;
  %446 = reshape(%444, newshape=[14, 8]) /* ty=Tensor[(14, 8), int32] */;
  %447 = reshape(%445, newshape=[448]) /* ty=Tensor[(448), int16] */;
  %448 = @func_4466(%446, %447) /* ty=(Tensor[(14, 8), bool], Tensor[(7, 16, 4), bool], Tensor[(448), int16], Tensor[(3, 16, 4), float32], float32, Tensor[(192), float32]) */;
  %449 = cast(%var_6412, dtype="float64") /* ty=Tensor[(12, 16, 14), float64] */;
  %450 = shape_of(%var_6411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%var_6411, dtype="float64") /* ty=Tensor[(12, 16, 14), float64] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %453 = divide(%451, %452) /* ty=Tensor[(12, 16, 14), float64] */;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(12, 16, 14), float32] */;
  %455 = cosh(%454) /* ty=Tensor[(12, 16, 14), float32] */;
  %456 = cast(%453, dtype="float64") /* ty=Tensor[(12, 16, 14), float64] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%455, dtype="float64") /* ty=Tensor[(12, 16, 14), float64] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %460 = maximum(%458, %459) /* ty=Tensor[(12, 16, 14), float64] */;
  %461 = cast(%453, dtype="bool") /* ty=Tensor[(12, 16, 14), bool] */;
  %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%460, dtype="bool") /* ty=Tensor[(12, 16, 14), bool] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %465 = cast(%var_6412, dtype="float64") /* ty=Tensor[(12, 16, 14), float64] */;
  %466 = cast(%455, dtype="float32") /* ty=Tensor[(12, 16, 14), float32] */;
  %467 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%460, dtype="float32") /* ty=Tensor[(12, 16, 14), float32] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %470 = %448.3;
  %471 = less_equal(%463, %464) /* ty=Tensor[(12, 16, 14), bool] */;
  %472 = log(%465) /* ty=Tensor[(12, 16, 14), float64] */;
  %473 = power(%468, %469) /* ty=Tensor[(12, 16, 14), float32] */;
  (%470, meta[relay.Constant][35] /* ty=Tensor[(112), int32] */, %var_6435, %471, %472, %473)
}

def @func_8826(%var_8767: Tensor[(10, 12, 11), float64]) -> (Tensor[(10, 12, 11), float64], Tensor[(1, 16, 6), float64], Tensor[(16, 6), float64]) {
  %474 = cast(-3.88204f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %475 = cast(%var_8767, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
  %476 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 6), float64] */;
  %477 = reshape(%476, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float64] */;
  %478 = mod(%474, %475) /* ty=Tensor[(10, 12, 11), float64] */;
  %479 = @func_8684(%477) /* ty=Tensor[(1, 16, 6), float64] */;
  (%478, %479, meta[relay.Constant][36] /* ty=Tensor[(16, 6), float64] */)
}

def @func_2560(%var_2544: Tensor[(15, 10, 5), float32], %var_2557: Tensor[(156), float32]) -> (Tensor[(15, 10, 5), int64], Tensor[(4, 4, 3), bool], Tensor[(156), float32]) {
  %480 = cast(5.20286f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %481 = cast(%var_2544, dtype="float32") /* ty=Tensor[(15, 10, 5), float32] */;
  %482 = power(%480, %481) /* ty=Tensor[(15, 10, 5), float32] */;
  %483 = cast(5.20286f /* ty=float32 */, dtype="int64") /* ty=int64 */;
  %484 = cast(%482, dtype="int64") /* ty=Tensor[(15, 10, 5), int64] */;
  %485 = cast(%var_2557, dtype="float32") /* ty=Tensor[(156), float32] */;
  %486 = reshape(%485, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %487 = @func_1387(%486) /* ty=(Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) */;
  %488 = subtract(%483, %484) /* ty=Tensor[(15, 10, 5), int64] */;
  %489 = %487.0;
  (%488, %489, %var_2557)
}

def @func_5016(%var_4987: float32, %var_5006: Tensor[(7, 14, 15), float32], %var_5011: Tensor[(7, 14, 15), float32]) -> (Tensor[(10, 14, 14), uint8], Tensor[(1, 1960), uint8], Tensor[(7, 14, 15), int16], Tensor[(7, 14, 15), float32]) {
  %490 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 1960), uint8] */, dtype="uint8") /* ty=Tensor[(1, 1960), uint8] */;
  %491 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 1960), uint8] */, dtype="uint8") /* ty=Tensor[(1, 1960), uint8] */;
  %492 = reshape(%490, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint8] */;
  %493 = reshape(%491, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint8] */;
  %494 = cast(%var_4987, dtype="float32") /* ty=float32 */;
  %495 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 14, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 15), float32] */;
  %496 = floor_mod(%494, %495) /* ty=Tensor[(7, 14, 15), float32] */;
  %497 = cast(%var_5006, dtype="int16") /* ty=Tensor[(7, 14, 15), int16] */;
  %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%496, dtype="int16") /* ty=Tensor[(7, 14, 15), int16] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %501 = cast(%var_5011, dtype="float32") /* ty=Tensor[(7, 14, 15), float32] */;
  %502 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%496, dtype="float32") /* ty=Tensor[(7, 14, 15), float32] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %505 = @func_3720(%492, %493) /* ty=Tensor[(10, 14, 14), uint8] */;
  %506 = left_shift(%499, %500) /* ty=Tensor[(7, 14, 15), int16] */;
  %507 = multiply(%503, %504) /* ty=Tensor[(7, 14, 15), float32] */;
  (%505, meta[relay.Constant][37] /* ty=Tensor[(1, 1960), uint8] */, %506, %507)
}

def @func_632(%var_613: Tensor[(15, 3, 10), int64], %var_620: Tensor[(24, 2), int16]) -> (Tensor[(15, 3, 10), bool], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) {
  %508 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 3, 10), int64] */, dtype="bool") /* ty=Tensor[(15, 3, 10), bool] */;
  %509 = shape_of(%var_613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%var_613, dtype="bool") /* ty=Tensor[(15, 3, 10), bool] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %512 = cast(meta[relay.Constant][40] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %513 = cast(%var_620, dtype="int16") /* ty=Tensor[(24, 2), int16] */;
  %514 = reshape(%512, newshape=[]) /* ty=int16 */;
  %515 = reshape(%513, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), int16] */;
  %516 = less(%510, %511) /* ty=Tensor[(15, 3, 10), bool] */;
  %517 = @func_70(%514, %515) /* ty=Tensor[(4, 4, 3), bool] */;
  (%516, %517, meta[relay.Constant][40] /* ty=int16 */, %var_620)
}

def @func_5703(%var_5677: float64, %var_5678: Tensor[(7, 3, 11), float64], %var_5700: Tensor[(60, 10), float32]) -> (Tensor[(7, 3, 11), bool], Tensor[(10, 14, 14), uint8], Tensor[(1960), uint8], Tensor[(10, 15, 4), float32], Tensor[(60, 10), float32]) {
  %518 = cast(%var_5677, dtype="bool") /* ty=bool */;
  %519 = cast(%var_5678, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
  %520 = cast(meta[relay.Constant][41] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %521 = cast(meta[relay.Constant][41] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
  %522 = reshape(%520, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint8] */;
  %523 = reshape(%521, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint8] */;
  %524 = cast(%var_5700, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
  %525 = reshape(%524, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), float32] */;
  %526 = not_equal(%518, %519) /* ty=Tensor[(7, 3, 11), bool] */;
  %527 = @func_3720(%522, %523) /* ty=Tensor[(10, 14, 14), uint8] */;
  %528 = @func_3974(%525) /* ty=Tensor[(10, 15, 4), float32] */;
  (%526, %527, meta[relay.Constant][41] /* ty=Tensor[(1960), uint8] */, %528, %var_5700)
}

def @func_9139(%var_9083: Tensor[(13, 10, 10), float64], %var_9088: Tensor[(650, 3), float32], %var_9090: Tensor[(48), int16], %var_9091: Tensor[(480), float64], %var_9092: Tensor[(192, 1), uint16], %var_9120: Tensor[(1320), float64]) -> (int16, Tensor[(650, 3), float32], Tensor[(450), int64], Tensor[(48), int16], Tensor[(480), float64], Tensor[(13, 10, 10), int32], Tensor[(16, 6), float64], Tensor[(1320), float64], Tensor[(192, 1), float32]) {
  %529 = cast(%var_9088, dtype="float32") /* ty=Tensor[(650, 3), float32] */;
  %530 = cast(meta[relay.Constant][42] /* ty=Tensor[(450), int64] */, dtype="int64") /* ty=Tensor[(450), int64] */;
  %531 = cast(%var_9090, dtype="int16") /* ty=Tensor[(48), int16] */;
  %532 = cast(%var_9091, dtype="float64") /* ty=Tensor[(480), float64] */;
  %533 = cast(%var_9092, dtype="uint16") /* ty=Tensor[(192, 1), uint16] */;
  %534 = reshape(%529, newshape=[15, 13, 10]) /* ty=Tensor[(15, 13, 10), float32] */;
  %535 = reshape(%530, newshape=[150, 3]) /* ty=Tensor[(150, 3), int64] */;
  %536 = reshape(%531, newshape=[4, 12]) /* ty=Tensor[(4, 12), int16] */;
  %537 = reshape(%532, newshape=[8, 60]) /* ty=Tensor[(8, 60), float64] */;
  %538 = reshape(%533, newshape=[96, 2]) /* ty=Tensor[(96, 2), uint16] */;
  %539 = @func_2019(%534, %535, %536, %537, %538) /* ty=(int16, Tensor[(156), float32], Tensor[(4, 4, 3), bool], Tensor[(150, 3), int64], Tensor[(4, 12), int16], Tensor[(15, 13, 10), uint8], Tensor[(6, 16, 5), float64], Tensor[(8, 60), float64], Tensor[(13, 3, 4), float64], Tensor[(96, 2), uint16], Tensor[(15, 13, 10), float64]) */;
  %540 = cast(%var_9083, dtype="float64") /* ty=Tensor[(13, 10, 10), float64] */;
  %541 = tan(%540) /* ty=Tensor[(13, 10, 10), float64] */;
  %542 = cast(%var_9083, dtype="int32") /* ty=Tensor[(13, 10, 10), int32] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%541, dtype="int32") /* ty=Tensor[(13, 10, 10), int32] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %546 = cast(%var_9120, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %547 = reshape(%546, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), float64] */;
  %548 = @func_8826(%547) /* ty=(Tensor[(10, 12, 11), float64], Tensor[(1, 16, 6), float64], Tensor[(16, 6), float64]) */;
  %549 = cast(%var_9092, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
  %550 = %539.0;
  %551 = logical_xor(%544, %545) /* ty=Tensor[(13, 10, 10), int32] */;
  %552 = %548.2;
  %553 = sigmoid(%549) /* ty=Tensor[(192, 1), float32] */;
  (%550, %var_9088, meta[relay.Constant][42] /* ty=Tensor[(450), int64] */, %var_9090, %var_9091, %551, %552, %var_9120, %553)
}

def @func_1824(%var_1799: Tensor[(4, 6, 8), uint16], %var_1800: Tensor[(4, 6, 8), uint16]) -> (Tensor[(4, 6, 8), bool], Tensor[(13, 3, 4), float64], Tensor[(3, 52), float32]) {
  %554 = cast(%var_1800, dtype="uint16") /* ty=Tensor[(4, 6, 8), uint16] */;
  %555 = shape_of(%var_1799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%var_1799, dtype="uint16") /* ty=Tensor[(4, 6, 8), uint16] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %558 = logical_xor(%556, %557) /* ty=Tensor[(4, 6, 8), uint16] */;
  %559 = cast(%558, dtype="bool") /* ty=Tensor[(4, 6, 8), bool] */;
  %560 = shape_of(%var_1799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%var_1799, dtype="bool") /* ty=Tensor[(4, 6, 8), bool] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %563 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 52), float32] */, dtype="float32") /* ty=Tensor[(3, 52), float32] */;
  %564 = reshape(%563, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %565 = @func_1387(%564) /* ty=(Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) */;
  %566 = greater(%561, %562) /* ty=Tensor[(4, 6, 8), bool] */;
  %567 = %565.4;
  (%566, %567, meta[relay.Constant][43] /* ty=Tensor[(3, 52), float32] */)
}

def @func_1737(%var_1686: Tensor[(8, 15, 9), float32]) -> (Tensor[(8, 15, 9), float32], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(6, 16, 5), float64]) {
  %568 = cast(%var_1686, dtype="float32") /* ty=Tensor[(8, 15, 9), float32] */;
  %569 = cast(meta[relay.Constant][44] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %570 = reshape(%569, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %571 = @func_687(%570) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(6, 16, 5), float64]) */;
  %572 = %571.1;
  %573 = cast(%572, dtype="float64") /* ty=Tensor[(6, 16, 5), float64] */;
  %574 = reshape(%573, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %575 = @func_687(%574) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(6, 16, 5), float64]) */;
  %576 = cast(meta[relay.Constant][45] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %577 = cast(meta[relay.Constant][46] /* ty=Tensor[(48), int16] */, dtype="int16") /* ty=Tensor[(48), int16] */;
  %578 = reshape(%576, newshape=[]) /* ty=int16 */;
  %579 = reshape(%577, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), int16] */;
  %580 = cast(meta[relay.Constant][44] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %581 = reshape(%580, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %582 = @func_687(%581) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(6, 16, 5), float64]) */;
  %583 = atan(%568) /* ty=Tensor[(8, 15, 9), float32] */;
  %584 = %575.0;
  %585 = @func_70(%578, %579) /* ty=Tensor[(4, 4, 3), bool] */;
  %586 = %582.0;
  (%583, %572, meta[relay.Constant][44] /* ty=Tensor[(480), float64] */, %584, %585, meta[relay.Constant][45] /* ty=int16 */, meta[relay.Constant][46] /* ty=Tensor[(48), int16] */, %586)
}

def @func_3535(%var_3503: Tensor[(4, 6, 4), uint16], %var_3504: Tensor[(4, 6, 4), uint16]) -> (Tensor[(4, 6, 4), uint16], Tensor[(4, 6, 4), float32]) {
  %587 = cast(%var_3504, dtype="uint16") /* ty=Tensor[(4, 6, 4), uint16] */;
  %588 = shape_of(%var_3503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%var_3503, dtype="uint16") /* ty=Tensor[(4, 6, 4), uint16] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %591 = cast(%var_3503, dtype="float64") /* ty=Tensor[(4, 6, 4), float64] */;
  %592 = atan(%591) /* ty=Tensor[(4, 6, 4), float64] */;
  %593 = cast(%592, dtype="float32") /* ty=Tensor[(4, 6, 4), float32] */;
  %594 = maximum(%589, %590) /* ty=Tensor[(4, 6, 4), uint16] */;
  %595 = cosh(%593) /* ty=Tensor[(4, 6, 4), float32] */;
  (%594, %595)
}

def @func_1387(%var_1342: Tensor[(13, 3, 4), float32]) -> (Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) {
  %596 = cast(meta[relay.Constant][47] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %597 = cast(meta[relay.Constant][48] /* ty=Tensor[(48), int16] */, dtype="int16") /* ty=Tensor[(48), int16] */;
  %598 = reshape(%596, newshape=[]) /* ty=int16 */;
  %599 = reshape(%597, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), int16] */;
  %600 = cast(meta[relay.Constant][47] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %601 = cast(meta[relay.Constant][48] /* ty=Tensor[(48), int16] */, dtype="int16") /* ty=Tensor[(48), int16] */;
  %602 = reshape(%600, newshape=[]) /* ty=int16 */;
  %603 = reshape(%601, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), int16] */;
  %604 = cast(%var_1342, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
  %605 = atanh(%604) /* ty=Tensor[(13, 3, 4), float32] */;
  %606 = cast(%605, dtype="float64") /* ty=Tensor[(13, 3, 4), float64] */;
  %607 = cast(meta[relay.Constant][49] /* ty=Tensor[(450), int64] */, dtype="int64") /* ty=Tensor[(450), int64] */;
  %608 = cast(meta[relay.Constant][48] /* ty=Tensor[(48), int16] */, dtype="int16") /* ty=Tensor[(48), int16] */;
  %609 = reshape(%607, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int64] */;
  %610 = reshape(%608, newshape=[24, 2]) /* ty=Tensor[(24, 2), int16] */;
  %611 = @func_632(%609, %610) /* ty=(Tensor[(15, 3, 10), bool], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) */;
  %612 = @func_70(%598, %599) /* ty=Tensor[(4, 4, 3), bool] */;
  %613 = @func_70(%602, %603) /* ty=Tensor[(4, 4, 3), bool] */;
  %614 = cos(%606) /* ty=Tensor[(13, 3, 4), float64] */;
  %615 = %611.2;
  (%612, meta[relay.Constant][47] /* ty=int16 */, meta[relay.Constant][48] /* ty=Tensor[(48), int16] */, %613, %614, %615, meta[relay.Constant][49] /* ty=Tensor[(450), int64] */)
}

def @func_4500(%var_4495: Tensor[(4, 1, 8), float32]) -> Tensor[(4, 1, 8), float32] {
  %616 = cast(%var_4495, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  cosh(%616) /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_9341(%var_9316: Tensor[(7, 10, 15), uint8], %var_9317: Tensor[(7, 10, 15), uint8], %var_9336: Tensor[(112), int32], %var_9337: Tensor[(448), int16]) -> (Tensor[(7, 10, 15), bool], Tensor[(7, 10, 15), float64], Tensor[(7, 10, 15), float64], Tensor[(192), float32], Tensor[(112), int32], Tensor[(448), int16]) {
  %617 = cast(%var_9317, dtype="bool") /* ty=Tensor[(7, 10, 15), bool] */;
  %618 = shape_of(%var_9316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%var_9316, dtype="bool") /* ty=Tensor[(7, 10, 15), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = cast(%var_9317, dtype="float64") /* ty=Tensor[(7, 10, 15), float64] */;
  %622 = cast(%var_9316, dtype="float64") /* ty=Tensor[(7, 10, 15), float64] */;
  %623 = cast(%var_9336, dtype="int32") /* ty=Tensor[(112), int32] */;
  %624 = cast(%var_9337, dtype="int16") /* ty=Tensor[(448), int16] */;
  %625 = reshape(%623, newshape=[14, 8]) /* ty=Tensor[(14, 8), int32] */;
  %626 = reshape(%624, newshape=[448]) /* ty=Tensor[(448), int16] */;
  %627 = @func_4466(%625, %626) /* ty=(Tensor[(14, 8), bool], Tensor[(7, 16, 4), bool], Tensor[(448), int16], Tensor[(3, 16, 4), float32], float32, Tensor[(192), float32]) */;
  %628 = greater_equal(%619, %620) /* ty=Tensor[(7, 10, 15), bool] */;
  %629 = log(%621) /* ty=Tensor[(7, 10, 15), float64] */;
  %630 = sqrt(%622) /* ty=Tensor[(7, 10, 15), float64] */;
  %631 = %627.5;
  (%628, %629, %630, %631, %var_9336, %var_9337)
}

def @func_7666(%var_7631: Tensor[(11, 8, 16), float64], %var_7636: float32, %var_7637: Tensor[(2, 96), float32]) -> (Tensor[(11, 8, 16), float64], float32, Tensor[(2, 96), bool], Tensor[(480), float64], Tensor[(1080), float32]) {
  %632 = cast(%var_7631, dtype="float64") /* ty=Tensor[(11, 8, 16), float64] */;
  %633 = cast(%var_7636, dtype="float32") /* ty=float32 */;
  %634 = cast(%var_7637, dtype="float32") /* ty=Tensor[(2, 96), float32] */;
  %635 = reshape(%633, newshape=[]) /* ty=float32 */;
  %636 = reshape(%634, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), float32] */;
  %637 = @func_3832(%635, %636) /* ty=(Tensor[(3, 16, 4), bool], Tensor[(3, 16, 4), float32]) */;
  %638 = %637.0;
  %639 = cast(%638, dtype="bool") /* ty=Tensor[(3, 16, 4), bool] */;
  %640 = shape_of(%var_7637, dtype="int32") /* ty=Tensor[(2), int32] */;
  %641 = cast(%var_7637, dtype="bool") /* ty=Tensor[(2, 96), bool] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %643 = cast(meta[relay.Constant][50] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %644 = reshape(%643, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), float32] */;
  %645 = @func_1737(%644) /* ty=(Tensor[(8, 15, 9), float32], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(6, 16, 5), float64]) */;
  %646 = sigmoid(%632) /* ty=Tensor[(11, 8, 16), float64] */;
  %647 = equal(%641, %642) /* ty=Tensor[(2, 96), bool] */;
  %648 = %645.2;
  (%646, %var_7636, %647, %648, meta[relay.Constant][50] /* ty=Tensor[(1080), float32] */)
}

def @func_2502(%var_2433: Tensor[(5, 2, 15), float32], %var_2447: Tensor[(156), float32]) -> (Tensor[(14, 1, 13), float32], Tensor[(182), float32], Tensor[(4, 4, 3), bool], Tensor[(156), float32], Tensor[(5, 2, 15), float64], Tensor[(5, 2, 15), float64]) {
  %649 = cast(meta[relay.Constant][51] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
  %650 = reshape(%649, newshape=[14, 1, 13]) /* ty=Tensor[(14, 1, 13), float32] */;
  %651 = cast(%var_2447, dtype="float32") /* ty=Tensor[(156), float32] */;
  %652 = reshape(%651, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %653 = @func_1387(%652) /* ty=(Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) */;
  %654 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 2, 15), float32] */;
  %655 = shape_of(%var_2433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%var_2433, dtype="float32") /* ty=Tensor[(5, 2, 15), float32] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %658 = power(%656, %657) /* ty=Tensor[(5, 2, 15), float32] */;
  %659 = cast(%658, dtype="float64") /* ty=Tensor[(5, 2, 15), float64] */;
  %660 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 2, 15), float32] */;
  %661 = sin(%660) /* ty=Tensor[(5, 2, 15), float32] */;
  %662 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 2, 15), float32] */, dtype="float64") /* ty=Tensor[(5, 2, 15), float64] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="float64") /* ty=Tensor[(5, 2, 15), float64] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %666 = @func_316(%650) /* ty=Tensor[(14, 1, 13), float32] */;
  %667 = %653.0;
  %668 = erf(%659) /* ty=Tensor[(5, 2, 15), float64] */;
  %669 = add(%664, %665) /* ty=Tensor[(5, 2, 15), float64] */;
  (%666, meta[relay.Constant][51] /* ty=Tensor[(182), float32] */, %667, %var_2447, %668, %669)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6606(%var_6579: Tensor[(3, 13, 10), int32], %var_6580: Tensor[(3, 13, 10), int32]) -> Tensor[(3, 13, 10), bool] {
  %0 = cast(%var_6580, dtype="bool") /* ty=Tensor[(3, 13, 10), bool] */;
  %1 = shape_of(%var_6579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_6579, dtype="bool") /* ty=Tensor[(3, 13, 10), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%2, %3) /* ty=Tensor[(3, 13, 10), bool] */
}

def @func_5707(%var_5704: float64, %var_5705: Tensor[(7, 3, 11), float64], %var_5706: Tensor[(60, 10), float32]) -> (Tensor[(7, 3, 11), bool], Tensor[(10, 14, 14), uint8], Tensor[(1960), uint8], Tensor[(10, 15, 4), float32], Tensor[(60, 10), float32]) {
  %15 = fn (%var_5677: float64, %var_5678: Tensor[(7, 3, 11), float64], %var_5700: Tensor[(60, 10), float32]) -> (Tensor[(7, 3, 11), bool], Tensor[(10, 14, 14), uint8], Tensor[(1960), uint8], Tensor[(10, 15, 4), float32], Tensor[(60, 10), float32]) {
    %4 = cast(%var_5677, dtype="bool") /* ty=bool */;
    %5 = cast(%var_5678, dtype="bool") /* ty=Tensor[(7, 3, 11), bool] */;
    %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
    %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(1960), uint8] */, dtype="uint8") /* ty=Tensor[(1960), uint8] */;
    %8 = reshape(%6, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint8] */;
    %9 = reshape(%7, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint8] */;
    %10 = cast(%var_5700, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
    %11 = reshape(%10, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), float32] */;
    %12 = not_equal(%4, %5) /* ty=Tensor[(7, 3, 11), bool] */;
    %13 = @func_3720(%8, %9) /* ty=Tensor[(10, 14, 14), uint8] */;
    %14 = @func_3974(%11) /* ty=Tensor[(10, 15, 4), float32] */;
    (%12, %13, meta[relay.Constant][0] /* ty=Tensor[(1960), uint8] */, %14, %var_5700)
  };
  %15(%var_5704, %var_5705, %var_5706) /* ty=(Tensor[(7, 3, 11), bool], Tensor[(10, 14, 14), uint8], Tensor[(1960), uint8], Tensor[(10, 15, 4), float32], Tensor[(60, 10), float32]) */
}

def @func_7714(%var_7712: Tensor[(10, 9, 11), float64], %var_7713: Tensor[(10, 9, 11), float64]) -> Tensor[(10, 9, 11), float64] {
  @func_7710(%var_7712, %var_7713) /* ty=Tensor[(10, 9, 11), float64] */
}

def @func_9801(%var_9793: Tensor[(11, 15, 11), float64]) -> (Tensor[(11, 15, 11), float64],) {
  %16 = cast(%var_9793, dtype="float64") /* ty=Tensor[(11, 15, 11), float64] */;
  %17 = sqrt(%16) /* ty=Tensor[(11, 15, 11), float64] */;
  (%17,)
}

def @func_4877(%var_4830: Tensor[(10, 4, 6), bool], %var_4831: Tensor[(10, 4, 6), bool], %var_4841: Tensor[(50, 15), float32], %var_4855: Tensor[(48), int16], %var_4865: Tensor[(10, 4, 6), bool]) -> (Tensor[(15, 10, 5), int64], Tensor[(50, 15), float32], Tensor[(156), float32], int16, Tensor[(10, 45), int64], Tensor[(48), int16], Tensor[(10, 4, 6), bool], Tensor[(10, 4, 6), float64]) {
  %18 = cast(%var_4841, dtype="float32") /* ty=Tensor[(50, 15), float32] */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %20 = reshape(%18, newshape=[15, 10, 5]) /* ty=Tensor[(15, 10, 5), float32] */;
  %21 = reshape(%19, newshape=[156]) /* ty=Tensor[(156), float32] */;
  %22 = @func_2560(%20, %21) /* ty=(Tensor[(15, 10, 5), int64], Tensor[(4, 4, 3), bool], Tensor[(156), float32]) */;
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 45), int64] */, dtype="int64") /* ty=Tensor[(10, 45), int64] */;
  %24 = cast(%var_4855, dtype="int16") /* ty=Tensor[(48), int16] */;
  %25 = reshape(%23, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int64] */;
  %26 = reshape(%24, newshape=[24, 2]) /* ty=Tensor[(24, 2), int16] */;
  %27 = @func_632(%25, %26) /* ty=(Tensor[(15, 3, 10), bool], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) */;
  %28 = cast(%var_4831, dtype="bool") /* ty=Tensor[(10, 4, 6), bool] */;
  %29 = shape_of(%var_4830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%var_4830, dtype="bool") /* ty=Tensor[(10, 4, 6), bool] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %32 = logical_or(%30, %31) /* ty=Tensor[(10, 4, 6), bool] */;
  %33 = cast(%var_4865, dtype="bool") /* ty=Tensor[(10, 4, 6), bool] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%32, dtype="bool") /* ty=Tensor[(10, 4, 6), bool] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %37 = cast(%var_4831, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %38 = sqrt(%37) /* ty=Tensor[(10, 4, 6), float64] */;
  %39 = cast(%32, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%38, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %43 = divide(%41, %42) /* ty=Tensor[(10, 4, 6), float64] */;
  %44 = cast(%43, dtype="float32") /* ty=Tensor[(10, 4, 6), float32] */;
  %45 = sinh(%44) /* ty=Tensor[(10, 4, 6), float32] */;
  %46 = cast(%32, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="float64") /* ty=Tensor[(10, 4, 6), float64] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %50 = %22.0;
  %51 = %27.2;
  %52 = greater_equal(%35, %36) /* ty=Tensor[(10, 4, 6), bool] */;
  %53 = subtract(%48, %49) /* ty=Tensor[(10, 4, 6), float64] */;
  (%50, %var_4841, meta[relay.Constant][1] /* ty=Tensor[(156), float32] */, %51, meta[relay.Constant][2] /* ty=Tensor[(10, 45), int64] */, %var_4855, %52, %53)
}

def @func_4469(%var_4467: Tensor[(14, 8), int32], %var_4468: Tensor[(448), int16]) -> (Tensor[(14, 8), bool], Tensor[(7, 16, 4), bool], Tensor[(448), int16], Tensor[(3, 16, 4), float32], float32, Tensor[(192), float32]) {
  %71 = fn (%var_4430: Tensor[(14, 8), int32], %var_4442: Tensor[(448), int16]) -> (Tensor[(14, 8), bool], Tensor[(7, 16, 4), bool], Tensor[(448), int16], Tensor[(3, 16, 4), float32], float32, Tensor[(192), float32]) {
    %54 = cast(%var_4430, dtype="bool") /* ty=Tensor[(14, 8), bool] */;
    %55 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(14, 8), int32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(14, 8), int32] */, dtype="bool") /* ty=Tensor[(14, 8), bool] */;
    %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %58 = cast(%var_4442, dtype="int16") /* ty=Tensor[(448), int16] */;
    %59 = cast(%var_4442, dtype="int16") /* ty=Tensor[(448), int16] */;
    %60 = reshape(%58, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), int16] */;
    %61 = reshape(%59, newshape=[7, 16, 4]) /* ty=Tensor[(7, 16, 4), int16] */;
    %62 = @func_3941(%60, %61) /* ty=(Tensor[(7, 16, 4), bool],) */;
    %63 = cast(-5.46084f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %64 = cast(meta[relay.Constant][4] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %65 = reshape(%63, newshape=[]) /* ty=float32 */;
    %66 = reshape(%64, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), float32] */;
    %67 = @func_3832(%65, %66) /* ty=(Tensor[(3, 16, 4), bool], Tensor[(3, 16, 4), float32]) */;
    %68 = not_equal(%56, %57) /* ty=Tensor[(14, 8), bool] */;
    %69 = %62.0;
    %70 = %67.1;
    (%68, %69, %var_4442, %70, -5.46084f /* ty=float32 */, meta[relay.Constant][4] /* ty=Tensor[(192), float32] */)
  };
  %71(%var_4467, %var_4468) /* ty=(Tensor[(14, 8), bool], Tensor[(7, 16, 4), bool], Tensor[(448), int16], Tensor[(3, 16, 4), float32], float32, Tensor[(192), float32]) */
}

def @func_1824(%var_1799: Tensor[(4, 6, 8), uint16], %var_1800: Tensor[(4, 6, 8), uint16]) -> (Tensor[(4, 6, 8), bool], Tensor[(13, 3, 4), float64], Tensor[(3, 52), float32]) {
  %72 = cast(%var_1800, dtype="uint16") /* ty=Tensor[(4, 6, 8), uint16] */;
  %73 = shape_of(%var_1799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%var_1799, dtype="uint16") /* ty=Tensor[(4, 6, 8), uint16] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %76 = logical_xor(%74, %75) /* ty=Tensor[(4, 6, 8), uint16] */;
  %77 = cast(%76, dtype="bool") /* ty=Tensor[(4, 6, 8), bool] */;
  %78 = shape_of(%var_1799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%var_1799, dtype="bool") /* ty=Tensor[(4, 6, 8), bool] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %81 = cast(meta[relay.Constant][5] /* ty=Tensor[(3, 52), float32] */, dtype="float32") /* ty=Tensor[(3, 52), float32] */;
  %82 = reshape(%81, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %83 = @func_1387(%82) /* ty=(Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) */;
  %84 = greater(%79, %80) /* ty=Tensor[(4, 6, 8), bool] */;
  %85 = %83.4;
  (%84, %85, meta[relay.Constant][5] /* ty=Tensor[(3, 52), float32] */)
}

def @func_4813(%var_4781: int32, %var_4782: Tensor[(1, 11, 12), int32], %var_4792: Tensor[(182), float32], %var_4810: Tensor[(384), uint8]) -> (Tensor[(1, 11, 12), int32], Tensor[(14, 1, 13), float32], Tensor[(182), float32], int64, Tensor[(384), uint8], Tensor[(2400), int64]) {
  %86 = cast(%var_4781, dtype="int32") /* ty=int32 */;
  %87 = cast(%var_4782, dtype="int32") /* ty=Tensor[(1, 11, 12), int32] */;
  %88 = cast(%var_4792, dtype="float32") /* ty=Tensor[(182), float32] */;
  %89 = reshape(%88, newshape=[14, 1, 13]) /* ty=Tensor[(14, 1, 13), float32] */;
  %90 = cast(%var_4810, dtype="uint8") /* ty=Tensor[(384), uint8] */;
  %91 = cast(%var_4781, dtype="int64") /* ty=int64 */;
  %92 = cast(meta[relay.Constant][6] /* ty=Tensor[(2400), int64] */, dtype="int64") /* ty=Tensor[(2400), int64] */;
  %93 = reshape(%90, newshape=[6, 4, 16]) /* ty=Tensor[(6, 4, 16), uint8] */;
  %94 = reshape(%91, newshape=[]) /* ty=int64 */;
  %95 = reshape(%92, newshape=[2400]) /* ty=Tensor[(2400), int64] */;
  %96 = @func_4254(%93, %94, %95) /* ty=(Tensor[(6, 4, 16), uint8], Tensor[(13, 3, 15), float32], int64, Tensor[(2400), int64]) */;
  %97 = subtract(%86, %87) /* ty=Tensor[(1, 11, 12), int32] */;
  %98 = @func_316(%89) /* ty=Tensor[(14, 1, 13), float32] */;
  %99 = %96.2;
  (%97, %98, %var_4792, %99, %var_4810, meta[relay.Constant][6] /* ty=Tensor[(2400), int64] */)
}

def @func_70(%var_58: int16, %var_59: Tensor[(4, 4, 3), int16]) -> Tensor[(4, 4, 3), bool] {
  %100 = cast(%var_58, dtype="bool") /* ty=bool */;
  %101 = cast(%var_59, dtype="bool") /* ty=Tensor[(4, 4, 3), bool] */;
  not_equal(%100, %101) /* ty=Tensor[(4, 4, 3), bool] */
}

def @func_690(%var_688: Tensor[(6, 16, 5), float64]) -> (Tensor[(6, 16, 5), float64], Tensor[(6, 16, 5), float64]) {
  @func_687(%var_688) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(6, 16, 5), float64]) */
}

def @func_2878(%var_2806: Tensor[(6, 6, 10), bool], %var_2822: Tensor[(450), int64], %var_2823: Tensor[(48), int16], %var_2824: Tensor[(480), float64], %var_2825: Tensor[(1, 192), uint16], %var_2853: Tensor[(39, 4), float32]) -> (int16, Tensor[(1950), float32], Tensor[(450), int64], Tensor[(48), int16], Tensor[(480), float64], Tensor[(1, 192), uint16], Tensor[(6, 6, 10), uint16], Tensor[(6, 6, 10), bool], Tensor[(6, 16, 5), float64], Tensor[(48), int16], Tensor[(39, 4), float32], Tensor[(6, 6, 10), float32]) {
  %102 = cast(meta[relay.Constant][7] /* ty=Tensor[(1950), float32] */, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %103 = cast(%var_2822, dtype="int64") /* ty=Tensor[(450), int64] */;
  %104 = cast(%var_2823, dtype="int16") /* ty=Tensor[(48), int16] */;
  %105 = cast(%var_2824, dtype="float64") /* ty=Tensor[(480), float64] */;
  %106 = cast(%var_2825, dtype="uint16") /* ty=Tensor[(1, 192), uint16] */;
  %107 = reshape(%102, newshape=[15, 13, 10]) /* ty=Tensor[(15, 13, 10), float32] */;
  %108 = reshape(%103, newshape=[150, 3]) /* ty=Tensor[(150, 3), int64] */;
  %109 = reshape(%104, newshape=[4, 12]) /* ty=Tensor[(4, 12), int16] */;
  %110 = reshape(%105, newshape=[8, 60]) /* ty=Tensor[(8, 60), float64] */;
  %111 = reshape(%106, newshape=[96, 2]) /* ty=Tensor[(96, 2), uint16] */;
  %112 = @func_2019(%107, %108, %109, %110, %111) /* ty=(int16, Tensor[(156), float32], Tensor[(4, 4, 3), bool], Tensor[(150, 3), int64], Tensor[(4, 12), int16], Tensor[(15, 13, 10), uint8], Tensor[(6, 16, 5), float64], Tensor[(8, 60), float64], Tensor[(13, 3, 4), float64], Tensor[(96, 2), uint16], Tensor[(15, 13, 10), float64]) */;
  %113 = cast(%var_2806, dtype="uint16") /* ty=Tensor[(6, 6, 10), uint16] */;
  %114 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(6, 6, 10), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 6, 10), bool] */, dtype="uint16") /* ty=Tensor[(6, 6, 10), uint16] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %117 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 6, 10), bool] */, dtype="bool") /* ty=Tensor[(6, 6, 10), bool] */;
  %118 = shape_of(%var_2806, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%var_2806, dtype="bool") /* ty=Tensor[(6, 6, 10), bool] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %121 = logical_and(%119, %120) /* ty=Tensor[(6, 6, 10), bool] */;
  %122 = cast(%121, dtype="bool") /* ty=Tensor[(6, 6, 10), bool] */;
  %123 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(6, 6, 10), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 6, 10), bool] */, dtype="bool") /* ty=Tensor[(6, 6, 10), bool] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %126 = cast(%var_2824, dtype="float64") /* ty=Tensor[(480), float64] */;
  %127 = reshape(%126, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %128 = @func_687(%127) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(6, 16, 5), float64]) */;
  %129 = cast(%var_2853, dtype="float32") /* ty=Tensor[(39, 4), float32] */;
  %130 = reshape(%129, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %131 = @func_1387(%130) /* ty=(Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) */;
  %132 = cast(%121, dtype="float32") /* ty=Tensor[(6, 6, 10), float32] */;
  %133 = %112.0;
  %134 = left_shift(%115, %116) /* ty=Tensor[(6, 6, 10), uint16] */;
  %135 = not_equal(%124, %125) /* ty=Tensor[(6, 6, 10), bool] */;
  %136 = %128.0;
  %137 = %131.2;
  %138 = sqrt(%132) /* ty=Tensor[(6, 6, 10), float32] */;
  (%133, meta[relay.Constant][7] /* ty=Tensor[(1950), float32] */, %var_2822, %var_2823, %var_2824, %var_2825, %134, %135, %136, %137, %var_2853, %138)
}

def @func_3723(%var_3721: Tensor[(10, 14, 14), uint8], %var_3722: Tensor[(10, 14, 14), uint8]) -> Tensor[(10, 14, 14), uint8] {
  %143 = fn (%var_3708: Tensor[(10, 14, 14), uint8], %var_3709: Tensor[(10, 14, 14), uint8]) -> Tensor[(10, 14, 14), uint8] {
    %139 = cast(%var_3709, dtype="uint8") /* ty=Tensor[(10, 14, 14), uint8] */;
    %140 = shape_of(%var_3708, dtype="int32") /* ty=Tensor[(3), int32] */;
    %141 = cast(%var_3708, dtype="uint8") /* ty=Tensor[(10, 14, 14), uint8] */;
    %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    bitwise_xor(%141, %142) /* ty=Tensor[(10, 14, 14), uint8] */
  };
  %143(%var_3721, %var_3722) /* ty=Tensor[(10, 14, 14), uint8] */
}

def @func_6472(%var_6469: Tensor[(12, 16, 14), float64], %var_6470: Tensor[(12, 16, 14), float64], %var_6471: Tensor[(448), int16]) -> (Tensor[(3, 16, 4), float32], Tensor[(112), int32], Tensor[(448), int16], Tensor[(12, 16, 14), bool], Tensor[(12, 16, 14), float64], Tensor[(12, 16, 14), float32]) {
  %174 = fn (%var_6411: Tensor[(12, 16, 14), float64], %var_6412: Tensor[(12, 16, 14), float64], %var_6435: Tensor[(448), int16]) -> (Tensor[(3, 16, 4), float32], Tensor[(112), int32], Tensor[(448), int16], Tensor[(12, 16, 14), bool], Tensor[(12, 16, 14), float64], Tensor[(12, 16, 14), float32]) {
    %144 = cast(meta[relay.Constant][9] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
    %145 = cast(%var_6435, dtype="int16") /* ty=Tensor[(448), int16] */;
    %146 = reshape(%144, newshape=[14, 8]) /* ty=Tensor[(14, 8), int32] */;
    %147 = reshape(%145, newshape=[448]) /* ty=Tensor[(448), int16] */;
    %148 = @func_4466(%146, %147) /* ty=(Tensor[(14, 8), bool], Tensor[(7, 16, 4), bool], Tensor[(448), int16], Tensor[(3, 16, 4), float32], float32, Tensor[(192), float32]) */;
    %149 = cast(%var_6412, dtype="float64") /* ty=Tensor[(12, 16, 14), float64] */;
    %150 = shape_of(%var_6411, dtype="int32") /* ty=Tensor[(3), int32] */;
    %151 = cast(%var_6411, dtype="float64") /* ty=Tensor[(12, 16, 14), float64] */;
    %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %153 = divide(%151, %152) /* ty=Tensor[(12, 16, 14), float64] */;
    %154 = cast(%153, dtype="float32") /* ty=Tensor[(12, 16, 14), float32] */;
    %155 = cosh(%154) /* ty=Tensor[(12, 16, 14), float32] */;
    %156 = cast(%153, dtype="float64") /* ty=Tensor[(12, 16, 14), float64] */;
    %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
    %158 = cast(%155, dtype="float64") /* ty=Tensor[(12, 16, 14), float64] */;
    %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %160 = maximum(%158, %159) /* ty=Tensor[(12, 16, 14), float64] */;
    %161 = cast(%153, dtype="bool") /* ty=Tensor[(12, 16, 14), bool] */;
    %162 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
    %163 = cast(%160, dtype="bool") /* ty=Tensor[(12, 16, 14), bool] */;
    %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %165 = cast(%var_6412, dtype="float64") /* ty=Tensor[(12, 16, 14), float64] */;
    %166 = cast(%155, dtype="float32") /* ty=Tensor[(12, 16, 14), float32] */;
    %167 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
    %168 = cast(%160, dtype="float32") /* ty=Tensor[(12, 16, 14), float32] */;
    %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %170 = %148.3;
    %171 = less_equal(%163, %164) /* ty=Tensor[(12, 16, 14), bool] */;
    %172 = log(%165) /* ty=Tensor[(12, 16, 14), float64] */;
    %173 = power(%168, %169) /* ty=Tensor[(12, 16, 14), float32] */;
    (%170, meta[relay.Constant][9] /* ty=Tensor[(112), int32] */, %var_6435, %171, %172, %173)
  };
  %174(%var_6469, %var_6470, %var_6471) /* ty=(Tensor[(3, 16, 4), float32], Tensor[(112), int32], Tensor[(448), int16], Tensor[(12, 16, 14), bool], Tensor[(12, 16, 14), float64], Tensor[(12, 16, 14), float32]) */
}

def @func_1737(%var_1686: Tensor[(8, 15, 9), float32]) -> (Tensor[(8, 15, 9), float32], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(6, 16, 5), float64]) {
  %175 = cast(%var_1686, dtype="float32") /* ty=Tensor[(8, 15, 9), float32] */;
  %176 = cast(meta[relay.Constant][10] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %177 = reshape(%176, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %178 = @func_687(%177) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(6, 16, 5), float64]) */;
  %179 = %178.1;
  %180 = cast(%179, dtype="float64") /* ty=Tensor[(6, 16, 5), float64] */;
  %181 = reshape(%180, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %182 = @func_687(%181) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(6, 16, 5), float64]) */;
  %183 = cast(meta[relay.Constant][11] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %184 = cast(meta[relay.Constant][12] /* ty=Tensor[(48), int16] */, dtype="int16") /* ty=Tensor[(48), int16] */;
  %185 = reshape(%183, newshape=[]) /* ty=int16 */;
  %186 = reshape(%184, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), int16] */;
  %187 = cast(meta[relay.Constant][10] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %188 = reshape(%187, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %189 = @func_687(%188) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(6, 16, 5), float64]) */;
  %190 = atan(%175) /* ty=Tensor[(8, 15, 9), float32] */;
  %191 = %182.0;
  %192 = @func_70(%185, %186) /* ty=Tensor[(4, 4, 3), bool] */;
  %193 = %189.0;
  (%190, %179, meta[relay.Constant][10] /* ty=Tensor[(480), float64] */, %191, %192, meta[relay.Constant][11] /* ty=int16 */, meta[relay.Constant][12] /* ty=Tensor[(48), int16] */, %193)
}

def @func_9146(%var_9140: Tensor[(13, 10, 10), float64], %var_9141: Tensor[(650, 3), float32], %var_9142: Tensor[(48), int16], %var_9143: Tensor[(480), float64], %var_9144: Tensor[(192, 1), uint16], %var_9145: Tensor[(1320), float64]) -> (int16, Tensor[(650, 3), float32], Tensor[(450), int64], Tensor[(48), int16], Tensor[(480), float64], Tensor[(13, 10, 10), int32], Tensor[(16, 6), float64], Tensor[(1320), float64], Tensor[(192, 1), float32]) {
  %219 = fn (%var_9083: Tensor[(13, 10, 10), float64], %var_9088: Tensor[(650, 3), float32], %var_9090: Tensor[(48), int16], %var_9091: Tensor[(480), float64], %var_9092: Tensor[(192, 1), uint16], %var_9120: Tensor[(1320), float64]) -> (int16, Tensor[(650, 3), float32], Tensor[(450), int64], Tensor[(48), int16], Tensor[(480), float64], Tensor[(13, 10, 10), int32], Tensor[(16, 6), float64], Tensor[(1320), float64], Tensor[(192, 1), float32]) {
    %194 = cast(%var_9088, dtype="float32") /* ty=Tensor[(650, 3), float32] */;
    %195 = cast(meta[relay.Constant][13] /* ty=Tensor[(450), int64] */, dtype="int64") /* ty=Tensor[(450), int64] */;
    %196 = cast(%var_9090, dtype="int16") /* ty=Tensor[(48), int16] */;
    %197 = cast(%var_9091, dtype="float64") /* ty=Tensor[(480), float64] */;
    %198 = cast(%var_9092, dtype="uint16") /* ty=Tensor[(192, 1), uint16] */;
    %199 = reshape(%194, newshape=[15, 13, 10]) /* ty=Tensor[(15, 13, 10), float32] */;
    %200 = reshape(%195, newshape=[150, 3]) /* ty=Tensor[(150, 3), int64] */;
    %201 = reshape(%196, newshape=[4, 12]) /* ty=Tensor[(4, 12), int16] */;
    %202 = reshape(%197, newshape=[8, 60]) /* ty=Tensor[(8, 60), float64] */;
    %203 = reshape(%198, newshape=[96, 2]) /* ty=Tensor[(96, 2), uint16] */;
    %204 = @func_2019(%199, %200, %201, %202, %203) /* ty=(int16, Tensor[(156), float32], Tensor[(4, 4, 3), bool], Tensor[(150, 3), int64], Tensor[(4, 12), int16], Tensor[(15, 13, 10), uint8], Tensor[(6, 16, 5), float64], Tensor[(8, 60), float64], Tensor[(13, 3, 4), float64], Tensor[(96, 2), uint16], Tensor[(15, 13, 10), float64]) */;
    %205 = cast(%var_9083, dtype="float64") /* ty=Tensor[(13, 10, 10), float64] */;
    %206 = tan(%205) /* ty=Tensor[(13, 10, 10), float64] */;
    %207 = cast(%var_9083, dtype="int32") /* ty=Tensor[(13, 10, 10), int32] */;
    %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
    %209 = cast(%206, dtype="int32") /* ty=Tensor[(13, 10, 10), int32] */;
    %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %211 = cast(%var_9120, dtype="float64") /* ty=Tensor[(1320), float64] */;
    %212 = reshape(%211, newshape=[10, 12, 11]) /* ty=Tensor[(10, 12, 11), float64] */;
    %213 = @func_8826(%212) /* ty=(Tensor[(10, 12, 11), float64], Tensor[(1, 16, 6), float64], Tensor[(16, 6), float64]) */;
    %214 = cast(%var_9092, dtype="float32") /* ty=Tensor[(192, 1), float32] */;
    %215 = %204.0;
    %216 = logical_xor(%209, %210) /* ty=Tensor[(13, 10, 10), int32] */;
    %217 = %213.2;
    %218 = sigmoid(%214) /* ty=Tensor[(192, 1), float32] */;
    (%215, %var_9088, meta[relay.Constant][13] /* ty=Tensor[(450), int64] */, %var_9090, %var_9091, %216, %217, %var_9120, %218)
  };
  %219(%var_9140, %var_9141, %var_9142, %var_9143, %var_9144, %var_9145) /* ty=(int16, Tensor[(650, 3), float32], Tensor[(450), int64], Tensor[(48), int16], Tensor[(480), float64], Tensor[(13, 10, 10), int32], Tensor[(16, 6), float64], Tensor[(1320), float64], Tensor[(192, 1), float32]) */
}

def @func_4341(%var_4274: uint8, %var_4283: Tensor[(1008, 1), int8], %var_4307: Tensor[(36), float32], %var_4308: Tensor[(600), float32], %var_4313: Tensor[(182, 1), float32], %var_4316: Tensor[(150), float32]) -> (Tensor[(6, 12, 14), int8], Tensor[(1008, 1), int32], Tensor[(13, 3, 15), float32], Tensor[(585), float32], Tensor[(7, 16, 14), uint32], Tensor[(12, 3), float32], Tensor[(3), float32], Tensor[(36), float32], Tensor[(600), float32], Tensor[(14, 1, 13), float32], Tensor[(182, 1), float32], Tensor[(156), float32], Tensor[(150), float32], Tensor[(156), float32], Tensor[(24, 2), int16], Tensor[(72), uint16], Tensor[(24, 2), int16]) {
  %220 = cast(%var_4283, dtype="int8") /* ty=Tensor[(1008, 1), int8] */;
  %221 = reshape(%220, newshape=[6, 12, 14]) /* ty=Tensor[(6, 12, 14), int8] */;
  %222 = cast(%var_4283, dtype="int32") /* ty=Tensor[(1008, 1), int32] */;
  %223 = cast(%var_4274, dtype="int32") /* ty=int32 */;
  %224 = cast(meta[relay.Constant][14] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %225 = reshape(%224, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
  %226 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 16, 14), uint8] */, dtype="float32") /* ty=Tensor[(7, 16, 14), float32] */;
  %227 = atanh(%226) /* ty=Tensor[(7, 16, 14), float32] */;
  %228 = cast(%var_4274, dtype="uint8") /* ty=uint8 */;
  %229 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 16, 14), uint8] */, dtype="uint8") /* ty=Tensor[(7, 16, 14), uint8] */;
  %230 = logical_xor(%228, %229) /* ty=Tensor[(7, 16, 14), uint8] */;
  %231 = cast(%230, dtype="bool") /* ty=Tensor[(7, 16, 14), bool] */;
  %232 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%227, dtype="bool") /* ty=Tensor[(7, 16, 14), bool] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %235 = greater_equal(%233, %234) /* ty=Tensor[(7, 16, 14), bool] */;
  %236 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 16, 14), uint8] */, dtype="uint32") /* ty=Tensor[(7, 16, 14), uint32] */;
  %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%235, dtype="uint32") /* ty=Tensor[(7, 16, 14), uint32] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %240 = cast(meta[relay.Constant][16] /* ty=Tensor[(3), float32] */, dtype="float32") /* ty=Tensor[(3), float32] */;
  %241 = cast(%var_4307, dtype="float32") /* ty=Tensor[(36), float32] */;
  %242 = cast(%var_4308, dtype="float32") /* ty=Tensor[(600), float32] */;
  %243 = reshape(%240, newshape=[1, 3]) /* ty=Tensor[(1, 3), float32] */;
  %244 = reshape(%241, newshape=[12, 3]) /* ty=Tensor[(12, 3), float32] */;
  %245 = reshape(%242, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %246 = @func_4168(%243, %244, %245) /* ty=(Tensor[(12, 3), float32], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) */;
  %247 = cast(%var_4313, dtype="float32") /* ty=Tensor[(182, 1), float32] */;
  %248 = reshape(%247, newshape=[14, 1, 13]) /* ty=Tensor[(14, 1, 13), float32] */;
  %249 = cast(%var_4316, dtype="float32") /* ty=Tensor[(150), float32] */;
  %250 = cast(meta[relay.Constant][17] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %251 = reshape(%249, newshape=[5, 2, 15]) /* ty=Tensor[(5, 2, 15), float32] */;
  %252 = reshape(%250, newshape=[156]) /* ty=Tensor[(156), float32] */;
  %253 = @func_2502(%251, %252) /* ty=(Tensor[(14, 1, 13), float32], Tensor[(182), float32], Tensor[(4, 4, 3), bool], Tensor[(156), float32], Tensor[(5, 2, 15), float64], Tensor[(5, 2, 15), float64]) */;
  %254 = cast(%var_4307, dtype="uint16") /* ty=Tensor[(36), uint16] */;
  %255 = cast(meta[relay.Constant][18] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %256 = reshape(%254, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), uint16] */;
  %257 = reshape(%255, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), uint16] */;
  %258 = @func_3865(%256, %257) /* ty=(Tensor[(2, 12, 3), uint16], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) */;
  %259 = cast(%var_4307, dtype="uint16") /* ty=Tensor[(36), uint16] */;
  %260 = cast(meta[relay.Constant][18] /* ty=Tensor[(72), uint16] */, dtype="uint16") /* ty=Tensor[(72), uint16] */;
  %261 = reshape(%259, newshape=[1, 12, 3]) /* ty=Tensor[(1, 12, 3), uint16] */;
  %262 = reshape(%260, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), uint16] */;
  %263 = @func_3865(%261, %262) /* ty=(Tensor[(2, 12, 3), uint16], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) */;
  %264 = @func_3626(%221) /* ty=Tensor[(6, 12, 14), int8] */;
  %265 = bitwise_xor(%222, %223) /* ty=Tensor[(1008, 1), int32] */;
  %266 = @func_2910(%225) /* ty=Tensor[(13, 3, 15), float32] */;
  %267 = multiply(%238, %239) /* ty=Tensor[(7, 16, 14), uint32] */;
  %268 = %246.0;
  %269 = @func_316(%248) /* ty=Tensor[(14, 1, 13), float32] */;
  %270 = %253.3;
  %271 = %258.3;
  %272 = %263.3;
  (%264, %265, %266, meta[relay.Constant][14] /* ty=Tensor[(585), float32] */, %267, %268, meta[relay.Constant][16] /* ty=Tensor[(3), float32] */, %var_4307, %var_4308, %269, %var_4313, %270, %var_4316, meta[relay.Constant][17] /* ty=Tensor[(156), float32] */, %271, meta[relay.Constant][18] /* ty=Tensor[(72), uint16] */, %272)
}

def @func_319(%var_317: Tensor[(14, 1, 13), float32]) -> Tensor[(14, 1, 13), float32] {
  @func_316(%var_317) /* ty=Tensor[(14, 1, 13), float32] */
}

def @func_4173(%var_4170: Tensor[(1, 3), float32], %var_4171: Tensor[(12, 3), float32], %var_4172: Tensor[(600), float32]) -> (Tensor[(12, 3), float32], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) {
  @func_4168(%var_4170, %var_4171, %var_4172) /* ty=(Tensor[(12, 3), float32], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) */
}

def @func_2019(%var_1923: Tensor[(15, 13, 10), float32], %var_1956: Tensor[(150, 3), int64], %var_1957: Tensor[(4, 12), int16], %var_1998: Tensor[(8, 60), float64], %var_2002: Tensor[(96, 2), uint16]) -> (int16, Tensor[(156), float32], Tensor[(4, 4, 3), bool], Tensor[(150, 3), int64], Tensor[(4, 12), int16], Tensor[(15, 13, 10), uint8], Tensor[(6, 16, 5), float64], Tensor[(8, 60), float64], Tensor[(13, 3, 4), float64], Tensor[(96, 2), uint16], Tensor[(15, 13, 10), float64]) {
  %273 = cast(meta[relay.Constant][19] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %274 = reshape(%273, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %275 = @func_1387(%274) /* ty=(Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) */;
  %276 = cast(%var_1956, dtype="int64") /* ty=Tensor[(150, 3), int64] */;
  %277 = cast(%var_1957, dtype="int16") /* ty=Tensor[(4, 12), int16] */;
  %278 = reshape(%276, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int64] */;
  %279 = reshape(%277, newshape=[24, 2]) /* ty=Tensor[(24, 2), int16] */;
  %280 = @func_632(%278, %279) /* ty=(Tensor[(15, 3, 10), bool], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) */;
  %281 = cast(%var_1923, dtype="float64") /* ty=Tensor[(15, 13, 10), float64] */;
  %282 = acos(%281) /* ty=Tensor[(15, 13, 10), float64] */;
  %283 = cast(%var_1923, dtype="uint8") /* ty=Tensor[(15, 13, 10), uint8] */;
  %284 = shape_of(%282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%282, dtype="uint8") /* ty=Tensor[(15, 13, 10), uint8] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %287 = cast(%var_1998, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %288 = reshape(%287, newshape=[6, 16, 5]) /* ty=Tensor[(6, 16, 5), float64] */;
  %289 = @func_687(%288) /* ty=(Tensor[(6, 16, 5), float64], Tensor[(6, 16, 5), float64]) */;
  %290 = cast(%var_2002, dtype="uint16") /* ty=Tensor[(96, 2), uint16] */;
  %291 = cast(%var_2002, dtype="uint16") /* ty=Tensor[(96, 2), uint16] */;
  %292 = reshape(%290, newshape=[4, 6, 8]) /* ty=Tensor[(4, 6, 8), uint16] */;
  %293 = reshape(%291, newshape=[4, 6, 8]) /* ty=Tensor[(4, 6, 8), uint16] */;
  %294 = @func_1824(%292, %293) /* ty=(Tensor[(4, 6, 8), bool], Tensor[(13, 3, 4), float64], Tensor[(3, 52), float32]) */;
  %295 = cast(%var_1923, dtype="float32") /* ty=Tensor[(15, 13, 10), float32] */;
  %296 = exp(%295) /* ty=Tensor[(15, 13, 10), float32] */;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(15, 13, 10), float64] */;
  %298 = %275.1;
  %299 = %280.1;
  %300 = bitwise_or(%285, %286) /* ty=Tensor[(15, 13, 10), uint8] */;
  %301 = %289.0;
  %302 = %294.1;
  %303 = erf(%297) /* ty=Tensor[(15, 13, 10), float64] */;
  (%298, meta[relay.Constant][19] /* ty=Tensor[(156), float32] */, %299, %var_1956, %var_1957, %300, %301, %var_1998, %302, %var_2002, %303)
}

def @func_4168(%var_4093: Tensor[(1, 3), float32], %var_4094: Tensor[(12, 3), float32], %var_4150: Tensor[(600), float32]) -> (Tensor[(12, 3), float32], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) {
  %304 = cast(%var_4093, dtype="float32") /* ty=Tensor[(1, 3), float32] */;
  %305 = cast(%var_4094, dtype="float32") /* ty=Tensor[(12, 3), float32] */;
  %306 = cast(%var_4150, dtype="float32") /* ty=Tensor[(600), float32] */;
  %307 = reshape(%306, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), float32] */;
  %308 = floor_divide(%304, %305) /* ty=Tensor[(12, 3), float32] */;
  %309 = @func_3974(%307) /* ty=Tensor[(10, 15, 4), float32] */;
  (%308, %309, %var_4150)
}

def @func_5911(%var_5907: Tensor[(13, 2, 10), float64], %var_5908: Tensor[(13, 2, 10), float64], %var_5909: Tensor[(132), int32], %var_5910: Tensor[(384), uint8]) -> (Tensor[(13, 2, 10), float64], Tensor[(2400), int64], int32, Tensor[(132), int32], Tensor[(182), float32], Tensor[(384), uint8]) {
  %325 = fn (%var_5879: Tensor[(13, 2, 10), float64], %var_5880: Tensor[(13, 2, 10), float64], %var_5899: Tensor[(132), int32], %var_5901: Tensor[(384), uint8]) -> (Tensor[(13, 2, 10), float64], Tensor[(2400), int64], int32, Tensor[(132), int32], Tensor[(182), float32], Tensor[(384), uint8]) {
    %310 = cast(%var_5880, dtype="float64") /* ty=Tensor[(13, 2, 10), float64] */;
    %311 = shape_of(%var_5879, dtype="int32") /* ty=Tensor[(3), int32] */;
    %312 = cast(%var_5879, dtype="float64") /* ty=Tensor[(13, 2, 10), float64] */;
    %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %314 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %315 = cast(%var_5899, dtype="int32") /* ty=Tensor[(132), int32] */;
    %316 = cast(meta[relay.Constant][20] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
    %317 = cast(%var_5901, dtype="uint8") /* ty=Tensor[(384), uint8] */;
    %318 = reshape(%314, newshape=[]) /* ty=int32 */;
    %319 = reshape(%315, newshape=[1, 11, 12]) /* ty=Tensor[(1, 11, 12), int32] */;
    %320 = reshape(%316, newshape=[182]) /* ty=Tensor[(182), float32] */;
    %321 = reshape(%317, newshape=[384]) /* ty=Tensor[(384), uint8] */;
    %322 = @func_4813(%318, %319, %320, %321) /* ty=(Tensor[(1, 11, 12), int32], Tensor[(14, 1, 13), float32], Tensor[(182), float32], int64, Tensor[(384), uint8], Tensor[(2400), int64]) */;
    %323 = floor_divide(%312, %313) /* ty=Tensor[(13, 2, 10), float64] */;
    %324 = %322.5;
    (%323, %324, -8 /* ty=int32 */, %var_5899, meta[relay.Constant][20] /* ty=Tensor[(182), float32] */, %var_5901)
  };
  %325(%var_5907, %var_5908, %var_5909, %var_5910) /* ty=(Tensor[(13, 2, 10), float64], Tensor[(2400), int64], int32, Tensor[(132), int32], Tensor[(182), float32], Tensor[(384), uint8]) */
}

def @func_6610(%var_6608: Tensor[(3, 13, 10), int32], %var_6609: Tensor[(3, 13, 10), int32]) -> Tensor[(3, 13, 10), bool] {
  @func_6606(%var_6608, %var_6609) /* ty=Tensor[(3, 13, 10), bool] */
}

def @func_4884(%var_4879: Tensor[(10, 4, 6), bool], %var_4880: Tensor[(10, 4, 6), bool], %var_4881: Tensor[(50, 15), float32], %var_4882: Tensor[(48), int16], %var_4883: Tensor[(10, 4, 6), bool]) -> (Tensor[(15, 10, 5), int64], Tensor[(50, 15), float32], Tensor[(156), float32], int16, Tensor[(10, 45), int64], Tensor[(48), int16], Tensor[(10, 4, 6), bool], Tensor[(10, 4, 6), float64]) {
  @func_4877(%var_4879, %var_4880, %var_4881, %var_4882, %var_4883) /* ty=(Tensor[(15, 10, 5), int64], Tensor[(50, 15), float32], Tensor[(156), float32], int16, Tensor[(10, 45), int64], Tensor[(48), int16], Tensor[(10, 4, 6), bool], Tensor[(10, 4, 6), float64]) */
}

def @func_7670(%var_7667: Tensor[(11, 8, 16), float64], %var_7668: float32, %var_7669: Tensor[(2, 96), float32]) -> (Tensor[(11, 8, 16), float64], float32, Tensor[(2, 96), bool], Tensor[(480), float64], Tensor[(1080), float32]) {
  %343 = fn (%var_7631: Tensor[(11, 8, 16), float64], %var_7636: float32, %var_7637: Tensor[(2, 96), float32]) -> (Tensor[(11, 8, 16), float64], float32, Tensor[(2, 96), bool], Tensor[(480), float64], Tensor[(1080), float32]) {
    %326 = cast(%var_7631, dtype="float64") /* ty=Tensor[(11, 8, 16), float64] */;
    %327 = cast(%var_7636, dtype="float32") /* ty=float32 */;
    %328 = cast(%var_7637, dtype="float32") /* ty=Tensor[(2, 96), float32] */;
    %329 = reshape(%327, newshape=[]) /* ty=float32 */;
    %330 = reshape(%328, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), float32] */;
    %331 = @func_3832(%329, %330) /* ty=(Tensor[(3, 16, 4), bool], Tensor[(3, 16, 4), float32]) */;
    %332 = %331.0;
    %333 = cast(%332, dtype="bool") /* ty=Tensor[(3, 16, 4), bool] */;
    %334 = shape_of(%var_7637, dtype="int32") /* ty=Tensor[(2), int32] */;
    %335 = cast(%var_7637, dtype="bool") /* ty=Tensor[(2, 96), bool] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %337 = cast(meta[relay.Constant][21] /* ty=Tensor[(1080), float32] */, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %338 = reshape(%337, newshape=[8, 15, 9]) /* ty=Tensor[(8, 15, 9), float32] */;
    %339 = @func_1737(%338) /* ty=(Tensor[(8, 15, 9), float32], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(6, 16, 5), float64]) */;
    %340 = sigmoid(%326) /* ty=Tensor[(11, 8, 16), float64] */;
    %341 = equal(%335, %336) /* ty=Tensor[(2, 96), bool] */;
    %342 = %339.2;
    (%340, %var_7636, %341, %342, meta[relay.Constant][21] /* ty=Tensor[(1080), float32] */)
  };
  %343(%var_7667, %var_7668, %var_7669) /* ty=(Tensor[(11, 8, 16), float64], float32, Tensor[(2, 96), bool], Tensor[(480), float64], Tensor[(1080), float32]) */
}

def @func_6521(%var_6517: Tensor[(1, 14, 13), float32], %var_6518: Tensor[(450), int64], %var_6519: Tensor[(48, 1), int16], %var_6520: Tensor[(600), float32]) -> (int16, Tensor[(450), int64], Tensor[(48, 1), int16], Tensor[(1, 14, 13), float64], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) {
  @func_6515(%var_6517, %var_6518, %var_6519, %var_6520) /* ty=(int16, Tensor[(450), int64], Tensor[(48, 1), int16], Tensor[(1, 14, 13), float64], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) */
}

def @func_2232(%var_2223: Tensor[(13, 2, 11), float64]) -> (Tensor[(13, 2, 11), float32],) {
  %344 = cast(%var_2223, dtype="float64") /* ty=Tensor[(13, 2, 11), float64] */;
  %345 = acosh(%344) /* ty=Tensor[(13, 2, 11), float64] */;
  %346 = cast(%345, dtype="float32") /* ty=Tensor[(13, 2, 11), float32] */;
  %347 = exp(%346) /* ty=Tensor[(13, 2, 11), float32] */;
  (%347,)
}

def @func_1389(%var_1388: Tensor[(13, 3, 4), float32]) -> (Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) {
  %368 = fn (%var_1342: Tensor[(13, 3, 4), float32]) -> (Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) {
    %348 = cast(meta[relay.Constant][22] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %349 = cast(meta[relay.Constant][23] /* ty=Tensor[(48), int16] */, dtype="int16") /* ty=Tensor[(48), int16] */;
    %350 = reshape(%348, newshape=[]) /* ty=int16 */;
    %351 = reshape(%349, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), int16] */;
    %352 = cast(meta[relay.Constant][22] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %353 = cast(meta[relay.Constant][23] /* ty=Tensor[(48), int16] */, dtype="int16") /* ty=Tensor[(48), int16] */;
    %354 = reshape(%352, newshape=[]) /* ty=int16 */;
    %355 = reshape(%353, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), int16] */;
    %356 = cast(%var_1342, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
    %357 = atanh(%356) /* ty=Tensor[(13, 3, 4), float32] */;
    %358 = cast(%357, dtype="float64") /* ty=Tensor[(13, 3, 4), float64] */;
    %359 = cast(meta[relay.Constant][24] /* ty=Tensor[(450), int64] */, dtype="int64") /* ty=Tensor[(450), int64] */;
    %360 = cast(meta[relay.Constant][23] /* ty=Tensor[(48), int16] */, dtype="int16") /* ty=Tensor[(48), int16] */;
    %361 = reshape(%359, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int64] */;
    %362 = reshape(%360, newshape=[24, 2]) /* ty=Tensor[(24, 2), int16] */;
    %363 = @func_632(%361, %362) /* ty=(Tensor[(15, 3, 10), bool], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) */;
    %364 = @func_70(%350, %351) /* ty=Tensor[(4, 4, 3), bool] */;
    %365 = @func_70(%354, %355) /* ty=Tensor[(4, 4, 3), bool] */;
    %366 = cos(%358) /* ty=Tensor[(13, 3, 4), float64] */;
    %367 = %363.2;
    (%364, meta[relay.Constant][22] /* ty=int16 */, meta[relay.Constant][23] /* ty=Tensor[(48), int16] */, %365, %366, %367, meta[relay.Constant][24] /* ty=Tensor[(450), int64] */)
  };
  %368(%var_1388) /* ty=(Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) */
}

def @func_7336(%var_7335: Tensor[(1, 6, 14), float32]) -> (Tensor[(1, 6, 14), float32],) {
  %371 = fn (%var_7327: Tensor[(1, 6, 14), float32]) -> (Tensor[(1, 6, 14), float32],) {
    %369 = cast(%var_7327, dtype="float32") /* ty=Tensor[(1, 6, 14), float32] */;
    %370 = tan(%369) /* ty=Tensor[(1, 6, 14), float32] */;
    (%370,)
  };
  %371(%var_7335) /* ty=(Tensor[(1, 6, 14), float32],) */
}

def @func_8676(%var_8670: Tensor[(16, 15, 13), float32], %var_8671: Tensor[(384, 1), uint8], %var_8672: int64, %var_8673: Tensor[(20, 120), int64], %var_8674: Tensor[(750), float32], %var_8675: Tensor[(48), int16]) -> (Tensor[(13, 3, 15), float32], Tensor[(384, 1), uint8], int64, Tensor[(20, 120), int64], Tensor[(16, 15, 13), float32], Tensor[(15, 10, 5), int64], Tensor[(240, 1), bool], Tensor[(750), float32], Tensor[(48), int16], Tensor[(16, 15, 13), float64]) {
  %398 = fn (%var_8594: Tensor[(16, 15, 13), float32], %var_8617: Tensor[(384, 1), uint8], %var_8618: int64, %var_8619: Tensor[(20, 120), int64], %var_8649: Tensor[(750), float32], %var_8650: Tensor[(48), int16]) -> (Tensor[(13, 3, 15), float32], Tensor[(384, 1), uint8], int64, Tensor[(20, 120), int64], Tensor[(16, 15, 13), float32], Tensor[(15, 10, 5), int64], Tensor[(240, 1), bool], Tensor[(750), float32], Tensor[(48), int16], Tensor[(16, 15, 13), float64]) {
    %372 = cast(%var_8617, dtype="uint8") /* ty=Tensor[(384, 1), uint8] */;
    %373 = cast(%var_8618, dtype="int64") /* ty=int64 */;
    %374 = cast(%var_8619, dtype="int64") /* ty=Tensor[(20, 120), int64] */;
    %375 = reshape(%372, newshape=[6, 4, 16]) /* ty=Tensor[(6, 4, 16), uint8] */;
    %376 = reshape(%373, newshape=[]) /* ty=int64 */;
    %377 = reshape(%374, newshape=[2400]) /* ty=Tensor[(2400), int64] */;
    %378 = @func_4254(%375, %376, %377) /* ty=(Tensor[(6, 4, 16), uint8], Tensor[(13, 3, 15), float32], int64, Tensor[(2400), int64]) */;
    %379 = cast(%var_8594, dtype="float32") /* ty=Tensor[(16, 15, 13), float32] */;
    %380 = sin(%379) /* ty=Tensor[(16, 15, 13), float32] */;
    %381 = cast(%380, dtype="float32") /* ty=Tensor[(16, 15, 13), float32] */;
    %382 = cast(meta[relay.Constant][25] /* ty=Tensor[(240, 1), bool] */, dtype="bool") /* ty=Tensor[(240, 1), bool] */;
    %383 = cast(meta[relay.Constant][25] /* ty=Tensor[(240, 1), bool] */, dtype="bool") /* ty=Tensor[(240, 1), bool] */;
    %384 = cast(%var_8649, dtype="float32") /* ty=Tensor[(750), float32] */;
    %385 = cast(%var_8650, dtype="int16") /* ty=Tensor[(48), int16] */;
    %386 = cast(meta[relay.Constant][25] /* ty=Tensor[(240, 1), bool] */, dtype="bool") /* ty=Tensor[(240, 1), bool] */;
    %387 = reshape(%382, newshape=[10, 4, 6]) /* ty=Tensor[(10, 4, 6), bool] */;
    %388 = reshape(%383, newshape=[10, 4, 6]) /* ty=Tensor[(10, 4, 6), bool] */;
    %389 = reshape(%384, newshape=[50, 15]) /* ty=Tensor[(50, 15), float32] */;
    %390 = reshape(%385, newshape=[48]) /* ty=Tensor[(48), int16] */;
    %391 = reshape(%386, newshape=[10, 4, 6]) /* ty=Tensor[(10, 4, 6), bool] */;
    %392 = @func_4877(%387, %388, %389, %390, %391) /* ty=(Tensor[(15, 10, 5), int64], Tensor[(50, 15), float32], Tensor[(156), float32], int16, Tensor[(10, 45), int64], Tensor[(48), int16], Tensor[(10, 4, 6), bool], Tensor[(10, 4, 6), float64]) */;
    %393 = cast(%380, dtype="float64") /* ty=Tensor[(16, 15, 13), float64] */;
    %394 = %378.1;
    %395 = acos(%381) /* ty=Tensor[(16, 15, 13), float32] */;
    %396 = %392.0;
    %397 = log(%393) /* ty=Tensor[(16, 15, 13), float64] */;
    (%394, %var_8617, %var_8618, %var_8619, %395, %396, meta[relay.Constant][25] /* ty=Tensor[(240, 1), bool] */, %var_8649, %var_8650, %397)
  };
  %398(%var_8670, %var_8671, %var_8672, %var_8673, %var_8674, %var_8675) /* ty=(Tensor[(13, 3, 15), float32], Tensor[(384, 1), uint8], int64, Tensor[(20, 120), int64], Tensor[(16, 15, 13), float32], Tensor[(15, 10, 5), int64], Tensor[(240, 1), bool], Tensor[(750), float32], Tensor[(48), int16], Tensor[(16, 15, 13), float64]) */
}

def @func_8828(%var_8827: Tensor[(10, 12, 11), float64]) -> (Tensor[(10, 12, 11), float64], Tensor[(1, 16, 6), float64], Tensor[(16, 6), float64]) {
  %405 = fn (%var_8767: Tensor[(10, 12, 11), float64]) -> (Tensor[(10, 12, 11), float64], Tensor[(1, 16, 6), float64], Tensor[(16, 6), float64]) {
    %399 = cast(-3.88204f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %400 = cast(%var_8767, dtype="float64") /* ty=Tensor[(10, 12, 11), float64] */;
    %401 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 6), float64] */;
    %402 = reshape(%401, newshape=[1, 16, 6]) /* ty=Tensor[(1, 16, 6), float64] */;
    %403 = mod(%399, %400) /* ty=Tensor[(10, 12, 11), float64] */;
    %404 = @func_8684(%402) /* ty=Tensor[(1, 16, 6), float64] */;
    (%403, %404, meta[relay.Constant][26] /* ty=Tensor[(16, 6), float64] */)
  };
  %405(%var_8827) /* ty=(Tensor[(10, 12, 11), float64], Tensor[(1, 16, 6), float64], Tensor[(16, 6), float64]) */
}

def @func_7105(%var_7102: Tensor[(12, 12, 16), int32], %var_7103: Tensor[(12, 12, 16), int32], %var_7104: Tensor[(3), float32]) -> (Tensor[(12, 12, 16), int32], Tensor[(10, 15, 4), float32], Tensor[(3), float32], Tensor[(36), float32], Tensor[(6, 100), float32]) {
  %419 = fn (%var_7078: Tensor[(12, 12, 16), int32], %var_7079: Tensor[(12, 12, 16), int32], %var_7087: Tensor[(3), float32]) -> (Tensor[(12, 12, 16), int32], Tensor[(10, 15, 4), float32], Tensor[(3), float32], Tensor[(36), float32], Tensor[(6, 100), float32]) {
    %406 = cast(%var_7079, dtype="int32") /* ty=Tensor[(12, 12, 16), int32] */;
    %407 = shape_of(%var_7078, dtype="int32") /* ty=Tensor[(3), int32] */;
    %408 = cast(%var_7078, dtype="int32") /* ty=Tensor[(12, 12, 16), int32] */;
    %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %410 = cast(%var_7087, dtype="float32") /* ty=Tensor[(3), float32] */;
    %411 = cast(meta[relay.Constant][27] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %412 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 100), float32] */, dtype="float32") /* ty=Tensor[(6, 100), float32] */;
    %413 = reshape(%410, newshape=[1, 3]) /* ty=Tensor[(1, 3), float32] */;
    %414 = reshape(%411, newshape=[12, 3]) /* ty=Tensor[(12, 3), float32] */;
    %415 = reshape(%412, newshape=[600]) /* ty=Tensor[(600), float32] */;
    %416 = @func_4168(%413, %414, %415) /* ty=(Tensor[(12, 3), float32], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) */;
    %417 = bitwise_and(%408, %409) /* ty=Tensor[(12, 12, 16), int32] */;
    %418 = %416.1;
    (%417, %418, %var_7087, meta[relay.Constant][27] /* ty=Tensor[(36), float32] */, meta[relay.Constant][28] /* ty=Tensor[(6, 100), float32] */)
  };
  %419(%var_7102, %var_7103, %var_7104) /* ty=(Tensor[(12, 12, 16), int32], Tensor[(10, 15, 4), float32], Tensor[(3), float32], Tensor[(36), float32], Tensor[(6, 100), float32]) */
}

def @func_3129(%var_3127: int64, %var_3128: Tensor[(16, 15, 10), int64]) -> (Tensor[(16, 15, 10), int64], Tensor[(13, 3, 15), float32], Tensor[(195, 3), float32]) {
  %426 = fn (%var_3110: int64, %var_3111: Tensor[(16, 15, 10), int64]) -> (Tensor[(16, 15, 10), int64], Tensor[(13, 3, 15), float32], Tensor[(195, 3), float32]) {
    %420 = cast(%var_3110, dtype="int64") /* ty=int64 */;
    %421 = cast(%var_3111, dtype="int64") /* ty=Tensor[(16, 15, 10), int64] */;
    %422 = cast(meta[relay.Constant][29] /* ty=Tensor[(195, 3), float32] */, dtype="float32") /* ty=Tensor[(195, 3), float32] */;
    %423 = reshape(%422, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float32] */;
    %424 = minimum(%420, %421) /* ty=Tensor[(16, 15, 10), int64] */;
    %425 = @func_2910(%423) /* ty=Tensor[(13, 3, 15), float32] */;
    (%424, %425, meta[relay.Constant][29] /* ty=Tensor[(195, 3), float32] */)
  };
  %426(%var_3127, %var_3128) /* ty=(Tensor[(16, 15, 10), int64], Tensor[(13, 3, 15), float32], Tensor[(195, 3), float32]) */
}

def @func_3629(%var_3627: Tensor[(6, 12, 14), int8]) -> Tensor[(6, 12, 14), int8] {
  @func_3626(%var_3627) /* ty=Tensor[(6, 12, 14), int8] */
}

def @func_2560(%var_2544: Tensor[(15, 10, 5), float32], %var_2557: Tensor[(156), float32]) -> (Tensor[(15, 10, 5), int64], Tensor[(4, 4, 3), bool], Tensor[(156), float32]) {
  %427 = cast(5.20286f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %428 = cast(%var_2544, dtype="float32") /* ty=Tensor[(15, 10, 5), float32] */;
  %429 = power(%427, %428) /* ty=Tensor[(15, 10, 5), float32] */;
  %430 = cast(5.20286f /* ty=float32 */, dtype="int64") /* ty=int64 */;
  %431 = cast(%429, dtype="int64") /* ty=Tensor[(15, 10, 5), int64] */;
  %432 = cast(%var_2557, dtype="float32") /* ty=Tensor[(156), float32] */;
  %433 = reshape(%432, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %434 = @func_1387(%433) /* ty=(Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) */;
  %435 = subtract(%430, %431) /* ty=Tensor[(15, 10, 5), int64] */;
  %436 = %434.0;
  (%435, %436, %var_2557)
}

def @func_7710(%var_7705: Tensor[(10, 9, 11), float64], %var_7706: Tensor[(10, 9, 11), float64]) -> Tensor[(10, 9, 11), float64] {
  %437 = cast(%var_7706, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %438 = shape_of(%var_7705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%var_7705, dtype="float64") /* ty=Tensor[(10, 9, 11), float64] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%439, %440) /* ty=Tensor[(10, 9, 11), float64] */
}

def @func_4258(%var_4255: Tensor[(6, 4, 16), uint8], %var_4256: int64, %var_4257: Tensor[(2400), int64]) -> (Tensor[(6, 4, 16), uint8], Tensor[(13, 3, 15), float32], int64, Tensor[(2400), int64]) {
  %452 = fn (%var_4234: Tensor[(6, 4, 16), uint8], %var_4248: int64, %var_4249: Tensor[(2400), int64]) -> (Tensor[(6, 4, 16), uint8], Tensor[(13, 3, 15), float32], int64, Tensor[(2400), int64]) {
    %441 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 4, 16), uint8] */, dtype="uint8") /* ty=Tensor[(6, 4, 16), uint8] */;
    %442 = shape_of(%var_4234, dtype="int32") /* ty=Tensor[(3), int32] */;
    %443 = cast(%var_4234, dtype="uint8") /* ty=Tensor[(6, 4, 16), uint8] */;
    %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %445 = cast(%var_4248, dtype="int64") /* ty=int64 */;
    %446 = cast(%var_4249, dtype="int64") /* ty=Tensor[(2400), int64] */;
    %447 = reshape(%445, newshape=[]) /* ty=int64 */;
    %448 = reshape(%446, newshape=[16, 15, 10]) /* ty=Tensor[(16, 15, 10), int64] */;
    %449 = @func_3126(%447, %448) /* ty=(Tensor[(16, 15, 10), int64], Tensor[(13, 3, 15), float32], Tensor[(195, 3), float32]) */;
    %450 = bitwise_or(%443, %444) /* ty=Tensor[(6, 4, 16), uint8] */;
    %451 = %449.1;
    (%450, %451, %var_4248, %var_4249)
  };
  %452(%var_4255, %var_4256, %var_4257) /* ty=(Tensor[(6, 4, 16), uint8], Tensor[(13, 3, 15), float32], int64, Tensor[(2400), int64]) */
}

def @func_3626(%var_3610: Tensor[(6, 12, 14), int8]) -> Tensor[(6, 12, 14), int8] {
  %453 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 12, 14), int8] */, dtype="int8") /* ty=Tensor[(6, 12, 14), int8] */;
  %454 = shape_of(%var_3610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%var_3610, dtype="int8") /* ty=Tensor[(6, 12, 14), int8] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  multiply(%455, %456) /* ty=Tensor[(6, 12, 14), int8] */
}

def @func_4819(%var_4815: int32, %var_4816: Tensor[(1, 11, 12), int32], %var_4817: Tensor[(182), float32], %var_4818: Tensor[(384), uint8]) -> (Tensor[(1, 11, 12), int32], Tensor[(14, 1, 13), float32], Tensor[(182), float32], int64, Tensor[(384), uint8], Tensor[(2400), int64]) {
  @func_4813(%var_4815, %var_4816, %var_4817, %var_4818) /* ty=(Tensor[(1, 11, 12), int32], Tensor[(14, 1, 13), float32], Tensor[(182), float32], int64, Tensor[(384), uint8], Tensor[(2400), int64]) */
}

def @main(%var_10094: Tensor[(4, 15, 5), int8], %var_10095: Tensor[(4, 15, 5), int8], %var_10109: Tensor[(4, 15, 5), int8]) -> (Tensor[(4, 15, 5), bool], Tensor[(4, 15, 5), uint16], Tensor[(4, 15, 5), float64]) {
  %457 = cast(%var_10095, dtype="bool") /* ty=Tensor[(4, 15, 5), bool] */;
  %458 = shape_of(%var_10094, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%var_10094, dtype="bool") /* ty=Tensor[(4, 15, 5), bool] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %461 = cast(%var_10109, dtype="uint16") /* ty=Tensor[(4, 15, 5), uint16] */;
  %462 = shape_of(%var_10094, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%var_10094, dtype="uint16") /* ty=Tensor[(4, 15, 5), uint16] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %465 = cast(%var_10095, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
  %466 = asinh(%465) /* ty=Tensor[(4, 15, 5), float64] */;
  %467 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 15, 5), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%466, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %471 = greater_equal(%459, %460) /* ty=Tensor[(4, 15, 5), bool] */;
  %472 = logical_xor(%463, %464) /* ty=Tensor[(4, 15, 5), uint16] */;
  %473 = mod(%469, %470) /* ty=Tensor[(4, 15, 5), float64] */;
  (%471, %472, %473)
}

def @func_1740(%var_1738: Tensor[(8, 15, 9), float32]) -> (Tensor[(8, 15, 9), float32], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(6, 16, 5), float64]) {
  @func_1737(%var_1738) /* ty=(Tensor[(8, 15, 9), float32], Tensor[(6, 16, 5), float64], Tensor[(480), float64], Tensor[(6, 16, 5), float64], Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(6, 16, 5), float64]) */
}

def @func_3974(%var_3966: Tensor[(10, 15, 4), float32]) -> Tensor[(10, 15, 4), float32] {
  %474 = cast(%var_3966, dtype="float32") /* ty=Tensor[(10, 15, 4), float32] */;
  acosh(%474) /* ty=Tensor[(10, 15, 4), float32] */
}

def @func_2506(%var_2504: Tensor[(5, 2, 15), float32], %var_2505: Tensor[(156), float32]) -> (Tensor[(14, 1, 13), float32], Tensor[(182), float32], Tensor[(4, 4, 3), bool], Tensor[(156), float32], Tensor[(5, 2, 15), float64], Tensor[(5, 2, 15), float64]) {
  @func_2502(%var_2504, %var_2505) /* ty=(Tensor[(14, 1, 13), float32], Tensor[(182), float32], Tensor[(4, 4, 3), bool], Tensor[(156), float32], Tensor[(5, 2, 15), float64], Tensor[(5, 2, 15), float64]) */
}

def @func_4502(%var_4501: Tensor[(4, 1, 8), float32]) -> Tensor[(4, 1, 8), float32] {
  %476 = fn (%var_4495: Tensor[(4, 1, 8), float32]) -> Tensor[(4, 1, 8), float32] {
    %475 = cast(%var_4495, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
    cosh(%475) /* ty=Tensor[(4, 1, 8), float32] */
  };
  %476(%var_4501) /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_74(%var_72: int16, %var_73: Tensor[(4, 4, 3), int16]) -> Tensor[(4, 4, 3), bool] {
  @func_70(%var_72, %var_73) /* ty=Tensor[(4, 4, 3), bool] */
}

def @func_2564(%var_2562: Tensor[(15, 10, 5), float32], %var_2563: Tensor[(156), float32]) -> (Tensor[(15, 10, 5), int64], Tensor[(4, 4, 3), bool], Tensor[(156), float32]) {
  @func_2560(%var_2562, %var_2563) /* ty=(Tensor[(15, 10, 5), int64], Tensor[(4, 4, 3), bool], Tensor[(156), float32]) */
}

def @func_6736(%var_6726: int16, %var_6727: Tensor[(11, 7, 9), int16], %var_6728: Tensor[(48, 4), float32], %var_6729: Tensor[(112, 4), int16], %var_6730: Tensor[(450), int64], %var_6731: Tensor[(48), int16], %var_6732: Tensor[(480), float64], %var_6733: Tensor[(11, 7, 9), int16], %var_6734: Tensor[(600), float32], %var_6735: Tensor[(390), int32]) -> (Tensor[(11, 7, 9), int16], Tensor[(11, 7, 9), bool], int16, Tensor[(156), float32], Tensor[(3, 16, 4), float32], Tensor[(48, 4), float32], float32, Tensor[(112), int32], Tensor[(112, 4), int16], int16, Tensor[(10, 195), float32], Tensor[(450), int64], Tensor[(48), int16], Tensor[(480), float64], Tensor[(11, 7, 9), float32], Tensor[(600), float32], Tensor[(1, 3), float32], Tensor[(3, 12), float32], Tensor[(600), float32], Tensor[(3, 13, 10), bool], Tensor[(390), int32]) {
  @func_6724(%var_6726, %var_6727, %var_6728, %var_6729, %var_6730, %var_6731, %var_6732, %var_6733, %var_6734, %var_6735) /* ty=(Tensor[(11, 7, 9), int16], Tensor[(11, 7, 9), bool], int16, Tensor[(156), float32], Tensor[(3, 16, 4), float32], Tensor[(48, 4), float32], float32, Tensor[(112), int32], Tensor[(112, 4), int16], int16, Tensor[(10, 195), float32], Tensor[(450), int64], Tensor[(48), int16], Tensor[(480), float64], Tensor[(11, 7, 9), float32], Tensor[(600), float32], Tensor[(1, 3), float32], Tensor[(3, 12), float32], Tensor[(600), float32], Tensor[(3, 13, 10), bool], Tensor[(390), int32]) */
}

def @func_635(%var_633: Tensor[(15, 3, 10), int64], %var_634: Tensor[(24, 2), int16]) -> (Tensor[(15, 3, 10), bool], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) {
  %487 = fn (%var_613: Tensor[(15, 3, 10), int64], %var_620: Tensor[(24, 2), int16]) -> (Tensor[(15, 3, 10), bool], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) {
    %477 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 3, 10), int64] */, dtype="bool") /* ty=Tensor[(15, 3, 10), bool] */;
    %478 = shape_of(%var_613, dtype="int32") /* ty=Tensor[(3), int32] */;
    %479 = cast(%var_613, dtype="bool") /* ty=Tensor[(15, 3, 10), bool] */;
    %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %481 = cast(meta[relay.Constant][34] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %482 = cast(%var_620, dtype="int16") /* ty=Tensor[(24, 2), int16] */;
    %483 = reshape(%481, newshape=[]) /* ty=int16 */;
    %484 = reshape(%482, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), int16] */;
    %485 = less(%479, %480) /* ty=Tensor[(15, 3, 10), bool] */;
    %486 = @func_70(%483, %484) /* ty=Tensor[(4, 4, 3), bool] */;
    (%485, %486, meta[relay.Constant][34] /* ty=int16 */, %var_620)
  };
  %487(%var_633, %var_634) /* ty=(Tensor[(15, 3, 10), bool], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) */
}

def @func_3538(%var_3536: Tensor[(4, 6, 4), uint16], %var_3537: Tensor[(4, 6, 4), uint16]) -> (Tensor[(4, 6, 4), uint16], Tensor[(4, 6, 4), float32]) {
  %497 = fn (%var_3503: Tensor[(4, 6, 4), uint16], %var_3504: Tensor[(4, 6, 4), uint16]) -> (Tensor[(4, 6, 4), uint16], Tensor[(4, 6, 4), float32]) {
    %488 = cast(%var_3504, dtype="uint16") /* ty=Tensor[(4, 6, 4), uint16] */;
    %489 = shape_of(%var_3503, dtype="int32") /* ty=Tensor[(3), int32] */;
    %490 = cast(%var_3503, dtype="uint16") /* ty=Tensor[(4, 6, 4), uint16] */;
    %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %492 = cast(%var_3503, dtype="float64") /* ty=Tensor[(4, 6, 4), float64] */;
    %493 = atan(%492) /* ty=Tensor[(4, 6, 4), float64] */;
    %494 = cast(%493, dtype="float32") /* ty=Tensor[(4, 6, 4), float32] */;
    %495 = maximum(%490, %491) /* ty=Tensor[(4, 6, 4), uint16] */;
    %496 = cosh(%494) /* ty=Tensor[(4, 6, 4), float32] */;
    (%495, %496)
  };
  %497(%var_3536, %var_3537) /* ty=(Tensor[(4, 6, 4), uint16], Tensor[(4, 6, 4), float32]) */
}

def @func_1828(%var_1826: Tensor[(4, 6, 8), uint16], %var_1827: Tensor[(4, 6, 8), uint16]) -> (Tensor[(4, 6, 8), bool], Tensor[(13, 3, 4), float64], Tensor[(3, 52), float32]) {
  @func_1824(%var_1826, %var_1827) /* ty=(Tensor[(4, 6, 8), bool], Tensor[(13, 3, 4), float64], Tensor[(3, 52), float32]) */
}

def @func_5860(%var_5859: Tensor[(16, 5, 2), float64]) -> (Tensor[(16, 5, 2), float32], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) {
  %505 = fn (%var_5824: Tensor[(16, 5, 2), float64]) -> (Tensor[(16, 5, 2), float32], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) {
    %498 = cast(%var_5824, dtype="float64") /* ty=Tensor[(16, 5, 2), float64] */;
    %499 = sqrt(%498) /* ty=Tensor[(16, 5, 2), float64] */;
    %500 = cast(%499, dtype="float32") /* ty=Tensor[(16, 5, 2), float32] */;
    %501 = cast(meta[relay.Constant][35] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %502 = reshape(%501, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), float32] */;
    %503 = cosh(%500) /* ty=Tensor[(16, 5, 2), float32] */;
    %504 = @func_3974(%502) /* ty=Tensor[(10, 15, 4), float32] */;
    (%503, %504, meta[relay.Constant][35] /* ty=Tensor[(600), float32] */)
  };
  %505(%var_5859) /* ty=(Tensor[(16, 5, 2), float32], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) */
}

def @func_6515(%var_6486: Tensor[(1, 14, 13), float32], %var_6492: Tensor[(450), int64], %var_6493: Tensor[(48, 1), int16], %var_6504: Tensor[(600), float32]) -> (int16, Tensor[(450), int64], Tensor[(48, 1), int16], Tensor[(1, 14, 13), float64], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) {
  %506 = cast(%var_6492, dtype="int64") /* ty=Tensor[(450), int64] */;
  %507 = cast(%var_6493, dtype="int16") /* ty=Tensor[(48, 1), int16] */;
  %508 = reshape(%506, newshape=[15, 3, 10]) /* ty=Tensor[(15, 3, 10), int64] */;
  %509 = reshape(%507, newshape=[24, 2]) /* ty=Tensor[(24, 2), int16] */;
  %510 = @func_632(%508, %509) /* ty=(Tensor[(15, 3, 10), bool], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) */;
  %511 = cast(%var_6486, dtype="float32") /* ty=Tensor[(1, 14, 13), float32] */;
  %512 = asin(%511) /* ty=Tensor[(1, 14, 13), float32] */;
  %513 = cast(%512, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  %514 = cast(%var_6504, dtype="float32") /* ty=Tensor[(600), float32] */;
  %515 = reshape(%514, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), float32] */;
  %516 = %510.2;
  %517 = tan(%513) /* ty=Tensor[(1, 14, 13), float64] */;
  %518 = @func_3974(%515) /* ty=Tensor[(10, 15, 4), float32] */;
  (%516, %var_6492, %var_6493, %517, %518, %var_6504)
}

def @func_3865(%var_3846: Tensor[(1, 12, 3), uint16], %var_3847: Tensor[(2, 12, 3), uint16]) -> (Tensor[(2, 12, 3), uint16], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) {
  %519 = cast(%var_3846, dtype="uint16") /* ty=Tensor[(1, 12, 3), uint16] */;
  %520 = cast(%var_3847, dtype="uint16") /* ty=Tensor[(2, 12, 3), uint16] */;
  %521 = cast(meta[relay.Constant][36] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %522 = cast(meta[relay.Constant][37] /* ty=Tensor[(24, 2), int16] */, dtype="int16") /* ty=Tensor[(24, 2), int16] */;
  %523 = reshape(%521, newshape=[]) /* ty=int16 */;
  %524 = reshape(%522, newshape=[4, 4, 3]) /* ty=Tensor[(4, 4, 3), int16] */;
  %525 = right_shift(%519, %520) /* ty=Tensor[(2, 12, 3), uint16] */;
  %526 = @func_70(%523, %524) /* ty=Tensor[(4, 4, 3), bool] */;
  (%525, %526, meta[relay.Constant][36] /* ty=int16 */, meta[relay.Constant][37] /* ty=Tensor[(24, 2), int16] */)
}

def @func_8684(%var_8678: Tensor[(1, 16, 6), float64]) -> Tensor[(1, 16, 6), float64] {
  %527 = cast(%var_8678, dtype="float64") /* ty=Tensor[(1, 16, 6), float64] */;
  asinh(%527) /* ty=Tensor[(1, 16, 6), float64] */
}

def @func_8687(%var_8685: Tensor[(1, 16, 6), float64]) -> Tensor[(1, 16, 6), float64] {
  @func_8684(%var_8685) /* ty=Tensor[(1, 16, 6), float64] */
}

def @func_2502(%var_2433: Tensor[(5, 2, 15), float32], %var_2447: Tensor[(156), float32]) -> (Tensor[(14, 1, 13), float32], Tensor[(182), float32], Tensor[(4, 4, 3), bool], Tensor[(156), float32], Tensor[(5, 2, 15), float64], Tensor[(5, 2, 15), float64]) {
  %528 = cast(meta[relay.Constant][38] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
  %529 = reshape(%528, newshape=[14, 1, 13]) /* ty=Tensor[(14, 1, 13), float32] */;
  %530 = cast(%var_2447, dtype="float32") /* ty=Tensor[(156), float32] */;
  %531 = reshape(%530, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %532 = @func_1387(%531) /* ty=(Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) */;
  %533 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 2, 15), float32] */;
  %534 = shape_of(%var_2433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%var_2433, dtype="float32") /* ty=Tensor[(5, 2, 15), float32] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %537 = power(%535, %536) /* ty=Tensor[(5, 2, 15), float32] */;
  %538 = cast(%537, dtype="float64") /* ty=Tensor[(5, 2, 15), float64] */;
  %539 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 2, 15), float32] */;
  %540 = sin(%539) /* ty=Tensor[(5, 2, 15), float32] */;
  %541 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 2, 15), float32] */, dtype="float64") /* ty=Tensor[(5, 2, 15), float64] */;
  %542 = shape_of(%540, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%540, dtype="float64") /* ty=Tensor[(5, 2, 15), float64] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %545 = @func_316(%529) /* ty=Tensor[(14, 1, 13), float32] */;
  %546 = %532.0;
  %547 = erf(%538) /* ty=Tensor[(5, 2, 15), float64] */;
  %548 = add(%543, %544) /* ty=Tensor[(5, 2, 15), float64] */;
  (%545, meta[relay.Constant][38] /* ty=Tensor[(182), float32] */, %546, %var_2447, %547, %548)
}

def @func_5020(%var_5017: float32, %var_5018: Tensor[(7, 14, 15), float32], %var_5019: Tensor[(7, 14, 15), float32]) -> (Tensor[(10, 14, 14), uint8], Tensor[(1, 1960), uint8], Tensor[(7, 14, 15), int16], Tensor[(7, 14, 15), float32]) {
  %567 = fn (%var_4987: float32, %var_5006: Tensor[(7, 14, 15), float32], %var_5011: Tensor[(7, 14, 15), float32]) -> (Tensor[(10, 14, 14), uint8], Tensor[(1, 1960), uint8], Tensor[(7, 14, 15), int16], Tensor[(7, 14, 15), float32]) {
    %549 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 1960), uint8] */, dtype="uint8") /* ty=Tensor[(1, 1960), uint8] */;
    %550 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 1960), uint8] */, dtype="uint8") /* ty=Tensor[(1, 1960), uint8] */;
    %551 = reshape(%549, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint8] */;
    %552 = reshape(%550, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint8] */;
    %553 = cast(%var_4987, dtype="float32") /* ty=float32 */;
    %554 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 14, 15), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 15), float32] */;
    %555 = floor_mod(%553, %554) /* ty=Tensor[(7, 14, 15), float32] */;
    %556 = cast(%var_5006, dtype="int16") /* ty=Tensor[(7, 14, 15), int16] */;
    %557 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
    %558 = cast(%555, dtype="int16") /* ty=Tensor[(7, 14, 15), int16] */;
    %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %560 = cast(%var_5011, dtype="float32") /* ty=Tensor[(7, 14, 15), float32] */;
    %561 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
    %562 = cast(%555, dtype="float32") /* ty=Tensor[(7, 14, 15), float32] */;
    %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %564 = @func_3720(%551, %552) /* ty=Tensor[(10, 14, 14), uint8] */;
    %565 = left_shift(%558, %559) /* ty=Tensor[(7, 14, 15), int16] */;
    %566 = multiply(%562, %563) /* ty=Tensor[(7, 14, 15), float32] */;
    (%564, meta[relay.Constant][40] /* ty=Tensor[(1, 1960), uint8] */, %565, %566)
  };
  %567(%var_5017, %var_5018, %var_5019) /* ty=(Tensor[(10, 14, 14), uint8], Tensor[(1, 1960), uint8], Tensor[(7, 14, 15), int16], Tensor[(7, 14, 15), float32]) */
}

def @func_3944(%var_3942: Tensor[(7, 16, 4), int16], %var_3943: Tensor[(7, 16, 4), int16]) -> (Tensor[(7, 16, 4), bool],) {
  %573 = fn (%var_3935: Tensor[(7, 16, 4), int16], %var_3936: Tensor[(7, 16, 4), int16]) -> (Tensor[(7, 16, 4), bool],) {
    %568 = cast(%var_3936, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
    %569 = shape_of(%var_3935, dtype="int32") /* ty=Tensor[(3), int32] */;
    %570 = cast(%var_3935, dtype="bool") /* ty=Tensor[(7, 16, 4), bool] */;
    %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %572 = equal(%570, %571) /* ty=Tensor[(7, 16, 4), bool] */;
    (%572,)
  };
  %573(%var_3942, %var_3943) /* ty=(Tensor[(7, 16, 4), bool],) */
}

def @func_687(%var_673: Tensor[(6, 16, 5), float64]) -> (Tensor[(6, 16, 5), float64], Tensor[(6, 16, 5), float64]) {
  %574 = cast(%var_673, dtype="float64") /* ty=Tensor[(6, 16, 5), float64] */;
  %575 = cast(%var_673, dtype="float64") /* ty=Tensor[(6, 16, 5), float64] */;
  %576 = log10(%574) /* ty=Tensor[(6, 16, 5), float64] */;
  %577 = asin(%575) /* ty=Tensor[(6, 16, 5), float64] */;
  (%576, %577)
}

def @func_9804(%var_9802: Tensor[(11, 15, 11), float64]) -> (Tensor[(11, 15, 11), float64],) {
  @func_9801(%var_9802) /* ty=(Tensor[(11, 15, 11), float64],) */
}

def @func_3835(%var_3833: float32, %var_3834: Tensor[(3, 16, 4), float32]) -> (Tensor[(3, 16, 4), bool], Tensor[(3, 16, 4), float32]) {
  %588 = fn (%var_3806: float32, %var_3807: Tensor[(3, 16, 4), float32]) -> (Tensor[(3, 16, 4), bool], Tensor[(3, 16, 4), float32]) {
    %578 = cast(%var_3806, dtype="bool") /* ty=bool */;
    %579 = cast(%var_3807, dtype="bool") /* ty=Tensor[(3, 16, 4), bool] */;
    %580 = cast(%var_3806, dtype="float32") /* ty=float32 */;
    %581 = cast(%var_3807, dtype="float32") /* ty=Tensor[(3, 16, 4), float32] */;
    %582 = mod(%580, %581) /* ty=Tensor[(3, 16, 4), float32] */;
    %583 = cast(%582, dtype="float32") /* ty=Tensor[(3, 16, 4), float32] */;
    %584 = sigmoid(%583) /* ty=Tensor[(3, 16, 4), float32] */;
    %585 = cast(%584, dtype="float32") /* ty=Tensor[(3, 16, 4), float32] */;
    %586 = greater(%578, %579) /* ty=Tensor[(3, 16, 4), bool] */;
    %587 = acos(%585) /* ty=Tensor[(3, 16, 4), float32] */;
    (%586, %587)
  };
  %588(%var_3833, %var_3834) /* ty=(Tensor[(3, 16, 4), bool], Tensor[(3, 16, 4), float32]) */
}

def @func_3869(%var_3867: Tensor[(1, 12, 3), uint16], %var_3868: Tensor[(2, 12, 3), uint16]) -> (Tensor[(2, 12, 3), uint16], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) {
  @func_3865(%var_3867, %var_3868) /* ty=(Tensor[(2, 12, 3), uint16], Tensor[(4, 4, 3), bool], int16, Tensor[(24, 2), int16]) */
}

def @func_9346(%var_9342: Tensor[(7, 10, 15), uint8], %var_9343: Tensor[(7, 10, 15), uint8], %var_9344: Tensor[(112), int32], %var_9345: Tensor[(448), int16]) -> (Tensor[(7, 10, 15), bool], Tensor[(7, 10, 15), float64], Tensor[(7, 10, 15), float64], Tensor[(192), float32], Tensor[(112), int32], Tensor[(448), int16]) {
  %604 = fn (%var_9316: Tensor[(7, 10, 15), uint8], %var_9317: Tensor[(7, 10, 15), uint8], %var_9336: Tensor[(112), int32], %var_9337: Tensor[(448), int16]) -> (Tensor[(7, 10, 15), bool], Tensor[(7, 10, 15), float64], Tensor[(7, 10, 15), float64], Tensor[(192), float32], Tensor[(112), int32], Tensor[(448), int16]) {
    %589 = cast(%var_9317, dtype="bool") /* ty=Tensor[(7, 10, 15), bool] */;
    %590 = shape_of(%var_9316, dtype="int32") /* ty=Tensor[(3), int32] */;
    %591 = cast(%var_9316, dtype="bool") /* ty=Tensor[(7, 10, 15), bool] */;
    %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %593 = cast(%var_9317, dtype="float64") /* ty=Tensor[(7, 10, 15), float64] */;
    %594 = cast(%var_9316, dtype="float64") /* ty=Tensor[(7, 10, 15), float64] */;
    %595 = cast(%var_9336, dtype="int32") /* ty=Tensor[(112), int32] */;
    %596 = cast(%var_9337, dtype="int16") /* ty=Tensor[(448), int16] */;
    %597 = reshape(%595, newshape=[14, 8]) /* ty=Tensor[(14, 8), int32] */;
    %598 = reshape(%596, newshape=[448]) /* ty=Tensor[(448), int16] */;
    %599 = @func_4466(%597, %598) /* ty=(Tensor[(14, 8), bool], Tensor[(7, 16, 4), bool], Tensor[(448), int16], Tensor[(3, 16, 4), float32], float32, Tensor[(192), float32]) */;
    %600 = greater_equal(%591, %592) /* ty=Tensor[(7, 10, 15), bool] */;
    %601 = log(%593) /* ty=Tensor[(7, 10, 15), float64] */;
    %602 = sqrt(%594) /* ty=Tensor[(7, 10, 15), float64] */;
    %603 = %599.5;
    (%600, %601, %602, %603, %var_9336, %var_9337)
  };
  %604(%var_9342, %var_9343, %var_9344, %var_9345) /* ty=(Tensor[(7, 10, 15), bool], Tensor[(7, 10, 15), float64], Tensor[(7, 10, 15), float64], Tensor[(192), float32], Tensor[(112), int32], Tensor[(448), int16]) */
}

def @func_2235(%var_2233: Tensor[(13, 2, 11), float64]) -> (Tensor[(13, 2, 11), float32],) {
  @func_2232(%var_2233) /* ty=(Tensor[(13, 2, 11), float32],) */
}

def @func_316(%var_302: Tensor[(14, 1, 13), float32]) -> Tensor[(14, 1, 13), float32] {
  %605 = cast(%var_302, dtype="float32") /* ty=Tensor[(14, 1, 13), float32] */;
  sin(%605) /* ty=Tensor[(14, 1, 13), float32] */
}

def @func_2910(%var_2899: Tensor[(13, 3, 15), float32]) -> Tensor[(13, 3, 15), float32] {
  %606 = cast(%var_2899, dtype="float32") /* ty=Tensor[(13, 3, 15), float32] */;
  cos(%606) /* ty=Tensor[(13, 3, 15), float32] */
}

def @func_3977(%var_3975: Tensor[(10, 15, 4), float32]) -> Tensor[(10, 15, 4), float32] {
  @func_3974(%var_3975) /* ty=Tensor[(10, 15, 4), float32] */
}

def @func_2026(%var_2021: Tensor[(15, 13, 10), float32], %var_2022: Tensor[(150, 3), int64], %var_2023: Tensor[(4, 12), int16], %var_2024: Tensor[(8, 60), float64], %var_2025: Tensor[(96, 2), uint16]) -> (int16, Tensor[(156), float32], Tensor[(4, 4, 3), bool], Tensor[(150, 3), int64], Tensor[(4, 12), int16], Tensor[(15, 13, 10), uint8], Tensor[(6, 16, 5), float64], Tensor[(8, 60), float64], Tensor[(13, 3, 4), float64], Tensor[(96, 2), uint16], Tensor[(15, 13, 10), float64]) {
  @func_2019(%var_2021, %var_2022, %var_2023, %var_2024, %var_2025) /* ty=(int16, Tensor[(156), float32], Tensor[(4, 4, 3), bool], Tensor[(150, 3), int64], Tensor[(4, 12), int16], Tensor[(15, 13, 10), uint8], Tensor[(6, 16, 5), float64], Tensor[(8, 60), float64], Tensor[(13, 3, 4), float64], Tensor[(96, 2), uint16], Tensor[(15, 13, 10), float64]) */
}

def @func_2913(%var_2911: Tensor[(13, 3, 15), float32]) -> Tensor[(13, 3, 15), float32] {
  @func_2910(%var_2911) /* ty=Tensor[(13, 3, 15), float32] */
}

def @func_9448(%var_9446: Tensor[(9, 7, 11), int8], %var_9447: Tensor[(2304), int32]) -> (Tensor[(10, 15, 4), float32], Tensor[(2304), int32], Tensor[(3, 1), float32], Tensor[(9, 7, 11), uint32], Tensor[(9, 7, 11), float32]) {
  %623 = fn (%var_9401: Tensor[(9, 7, 11), int8], %var_9426: Tensor[(2304), int32]) -> (Tensor[(10, 15, 4), float32], Tensor[(2304), int32], Tensor[(3, 1), float32], Tensor[(9, 7, 11), uint32], Tensor[(9, 7, 11), float32]) {
    %607 = cast(%var_9426, dtype="int32") /* ty=Tensor[(2304), int32] */;
    %608 = cast(%var_9426, dtype="int32") /* ty=Tensor[(2304), int32] */;
    %609 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 1), float32] */;
    %610 = reshape(%607, newshape=[12, 12, 16]) /* ty=Tensor[(12, 12, 16), int32] */;
    %611 = reshape(%608, newshape=[12, 12, 16]) /* ty=Tensor[(12, 12, 16), int32] */;
    %612 = reshape(%609, newshape=[3]) /* ty=Tensor[(3), float32] */;
    %613 = @func_7101(%610, %611, %612) /* ty=(Tensor[(12, 12, 16), int32], Tensor[(10, 15, 4), float32], Tensor[(3), float32], Tensor[(36), float32], Tensor[(6, 100), float32]) */;
    %614 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 7, 11), int8] */, dtype="int8") /* ty=Tensor[(1, 7, 11), int8] */;
    %615 = cast(%var_9401, dtype="int8") /* ty=Tensor[(9, 7, 11), int8] */;
    %616 = left_shift(%614, %615) /* ty=Tensor[(9, 7, 11), int8] */;
    %617 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 7, 11), int8] */, dtype="uint32") /* ty=Tensor[(1, 7, 11), uint32] */;
    %618 = cast(%616, dtype="uint32") /* ty=Tensor[(9, 7, 11), uint32] */;
    %619 = cast(%var_9401, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
    %620 = %613.1;
    %621 = right_shift(%617, %618) /* ty=Tensor[(9, 7, 11), uint32] */;
    %622 = log2(%619) /* ty=Tensor[(9, 7, 11), float32] */;
    (%620, %var_9426, meta[relay.Constant][42] /* ty=Tensor[(3, 1), float32] */, %621, %622)
  };
  %623(%var_9446, %var_9447) /* ty=(Tensor[(10, 15, 4), float32], Tensor[(2304), int32], Tensor[(3, 1), float32], Tensor[(9, 7, 11), uint32], Tensor[(9, 7, 11), float32]) */
}

def @func_2886(%var_2880: Tensor[(6, 6, 10), bool], %var_2881: Tensor[(450), int64], %var_2882: Tensor[(48), int16], %var_2883: Tensor[(480), float64], %var_2884: Tensor[(1, 192), uint16], %var_2885: Tensor[(39, 4), float32]) -> (int16, Tensor[(1950), float32], Tensor[(450), int64], Tensor[(48), int16], Tensor[(480), float64], Tensor[(1, 192), uint16], Tensor[(6, 6, 10), uint16], Tensor[(6, 6, 10), bool], Tensor[(6, 16, 5), float64], Tensor[(48), int16], Tensor[(39, 4), float32], Tensor[(6, 6, 10), float32]) {
  @func_2878(%var_2880, %var_2881, %var_2882, %var_2883, %var_2884, %var_2885) /* ty=(int16, Tensor[(1950), float32], Tensor[(450), int64], Tensor[(48), int16], Tensor[(480), float64], Tensor[(1, 192), uint16], Tensor[(6, 6, 10), uint16], Tensor[(6, 6, 10), bool], Tensor[(6, 16, 5), float64], Tensor[(48), int16], Tensor[(39, 4), float32], Tensor[(6, 6, 10), float32]) */
}

def @func_6724(%var_6647: int16, %var_6648: Tensor[(11, 7, 9), int16], %var_6665: Tensor[(48, 4), float32], %var_6682: Tensor[(112, 4), int16], %var_6689: Tensor[(450), int64], %var_6690: Tensor[(48), int16], %var_6691: Tensor[(480), float64], %var_6695: Tensor[(11, 7, 9), int16], %var_6702: Tensor[(600), float32], %var_6713: Tensor[(390), int32]) -> (Tensor[(11, 7, 9), int16], Tensor[(11, 7, 9), bool], int16, Tensor[(156), float32], Tensor[(3, 16, 4), float32], Tensor[(48, 4), float32], float32, Tensor[(112), int32], Tensor[(112, 4), int16], int16, Tensor[(10, 195), float32], Tensor[(450), int64], Tensor[(48), int16], Tensor[(480), float64], Tensor[(11, 7, 9), float32], Tensor[(600), float32], Tensor[(1, 3), float32], Tensor[(3, 12), float32], Tensor[(600), float32], Tensor[(3, 13, 10), bool], Tensor[(390), int32]) {
  %624 = cast(%var_6647, dtype="int16") /* ty=int16 */;
  %625 = cast(%var_6648, dtype="int16") /* ty=Tensor[(11, 7, 9), int16] */;
  %626 = cast(%var_6648, dtype="bool") /* ty=Tensor[(11, 7, 9), bool] */;
  %627 = cast(%var_6647, dtype="bool") /* ty=bool */;
  %628 = cast(meta[relay.Constant][44] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %629 = reshape(%628, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %630 = @func_1387(%629) /* ty=(Tensor[(4, 4, 3), bool], int16, Tensor[(48), int16], Tensor[(4, 4, 3), bool], Tensor[(13, 3, 4), float64], int16, Tensor[(450), int64]) */;
  %631 = cast(%var_6647, dtype="float32") /* ty=float32 */;
  %632 = cast(%var_6665, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %633 = reshape(%631, newshape=[]) /* ty=float32 */;
  %634 = reshape(%632, newshape=[3, 16, 4]) /* ty=Tensor[(3, 16, 4), float32] */;
  %635 = @func_3832(%633, %634) /* ty=(Tensor[(3, 16, 4), bool], Tensor[(3, 16, 4), float32]) */;
  %636 = cast(meta[relay.Constant][45] /* ty=Tensor[(112), int32] */, dtype="int32") /* ty=Tensor[(112), int32] */;
  %637 = cast(%var_6682, dtype="int16") /* ty=Tensor[(112, 4), int16] */;
  %638 = reshape(%636, newshape=[14, 8]) /* ty=Tensor[(14, 8), int32] */;
  %639 = reshape(%637, newshape=[448]) /* ty=Tensor[(448), int16] */;
  %640 = @func_4466(%638, %639) /* ty=(Tensor[(14, 8), bool], Tensor[(7, 16, 4), bool], Tensor[(448), int16], Tensor[(3, 16, 4), float32], float32, Tensor[(192), float32]) */;
  %641 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 195), float32] */, dtype="float32") /* ty=Tensor[(10, 195), float32] */;
  %642 = cast(%var_6689, dtype="int64") /* ty=Tensor[(450), int64] */;
  %643 = cast(%var_6690, dtype="int16") /* ty=Tensor[(48), int16] */;
  %644 = cast(%var_6691, dtype="float64") /* ty=Tensor[(480), float64] */;
  %645 = %635.1;
  %646 = cast(%645, dtype="uint16") /* ty=Tensor[(3, 16, 4), uint16] */;
  %647 = reshape(%641, newshape=[15, 13, 10]) /* ty=Tensor[(15, 13, 10), float32] */;
  %648 = reshape(%642, newshape=[150, 3]) /* ty=Tensor[(150, 3), int64] */;
  %649 = reshape(%643, newshape=[4, 12]) /* ty=Tensor[(4, 12), int16] */;
  %650 = reshape(%644, newshape=[8, 60]) /* ty=Tensor[(8, 60), float64] */;
  %651 = reshape(%646, newshape=[96, 2]) /* ty=Tensor[(96, 2), uint16] */;
  %652 = @func_2019(%647, %648, %649, %650, %651) /* ty=(int16, Tensor[(156), float32], Tensor[(4, 4, 3), bool], Tensor[(150, 3), int64], Tensor[(4, 12), int16], Tensor[(15, 13, 10), uint8], Tensor[(6, 16, 5), float64], Tensor[(8, 60), float64], Tensor[(13, 3, 4), float64], Tensor[(96, 2), uint16], Tensor[(15, 13, 10), float64]) */;
  %653 = cast(%var_6695, dtype="float32") /* ty=Tensor[(11, 7, 9), float32] */;
  %654 = shape_of(%var_6648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%var_6648, dtype="float32") /* ty=Tensor[(11, 7, 9), float32] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %657 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 3), float32] */;
  %658 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %659 = cast(%var_6702, dtype="float32") /* ty=Tensor[(600), float32] */;
  %660 = reshape(%657, newshape=[1, 3]) /* ty=Tensor[(1, 3), float32] */;
  %661 = reshape(%658, newshape=[12, 3]) /* ty=Tensor[(12, 3), float32] */;
  %662 = reshape(%659, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %663 = @func_4168(%660, %661, %662) /* ty=(Tensor[(12, 3), float32], Tensor[(10, 15, 4), float32], Tensor[(600), float32]) */;
  %664 = cast(%var_6713, dtype="int32") /* ty=Tensor[(390), int32] */;
  %665 = cast(%var_6713, dtype="int32") /* ty=Tensor[(390), int32] */;
  %666 = reshape(%664, newshape=[3, 13, 10]) /* ty=Tensor[(3, 13, 10), int32] */;
  %667 = reshape(%665, newshape=[3, 13, 10]) /* ty=Tensor[(3, 13, 10), int32] */;
  %668 = minimum(%624, %625) /* ty=Tensor[(11, 7, 9), int16] */;
  %669 = less_equal(%626, %627) /* ty=Tensor[(11, 7, 9), bool] */;
  %670 = %630.1;
  %671 = %640.4;
  %672 = %652.0;
  %673 = subtract(%655, %656) /* ty=Tensor[(11, 7, 9), float32] */;
  %674 = %663.2;
  %675 = @func_6606(%666, %667) /* ty=Tensor[(3, 13, 10), bool] */;
  (%668, %669, %670, meta[relay.Constant][44] /* ty=Tensor[(156), float32] */, %645, %var_6665, %671, meta[relay.Constant][45] /* ty=Tensor[(112), int32] */, %var_6682, %672, meta[relay.Constant][46] /* ty=Tensor[(10, 195), float32] */, %var_6689, %var_6690, %var_6691, %673, %674, meta[relay.Constant][47] /* ty=Tensor[(1, 3), float32] */, meta[relay.Constant][48] /* ty=Tensor[(3, 12), float32] */, %var_6702, %675, %var_6713)
}

def @func_4754(%var_4750: Tensor[(6, 16, 3), uint32], %var_4751: uint8, %var_4752: Tensor[(1008), int8], %var_4753: Tensor[(150), float32]) -> (Tensor[(6, 16, 3), uint32], Tensor[(1008, 1), int32], uint8, Tensor[(1008), int8], Tensor[(36), float32], Tensor[(600), float32], Tensor[(182), float32], Tensor[(150), float32]) {
  %693 = fn (%var_4733: Tensor[(6, 16, 3), uint32], %var_4739: uint8, %var_4740: Tensor[(1008), int8], %var_4744: Tensor[(150), float32]) -> (Tensor[(6, 16, 3), uint32], Tensor[(1008, 1), int32], uint8, Tensor[(1008), int8], Tensor[(36), float32], Tensor[(600), float32], Tensor[(182), float32], Tensor[(150), float32]) {
    %676 = cast(meta[relay.Constant][49] /* ty=Tensor[(6, 1, 3), uint32] */, dtype="uint32") /* ty=Tensor[(6, 1, 3), uint32] */;
    %677 = cast(%var_4733, dtype="uint32") /* ty=Tensor[(6, 16, 3), uint32] */;
    %678 = cast(%var_4739, dtype="uint8") /* ty=uint8 */;
    %679 = cast(%var_4740, dtype="int8") /* ty=Tensor[(1008), int8] */;
    %680 = cast(meta[relay.Constant][50] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %681 = cast(meta[relay.Constant][51] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %682 = cast(meta[relay.Constant][52] /* ty=Tensor[(182), float32] */, dtype="float32") /* ty=Tensor[(182), float32] */;
    %683 = cast(%var_4744, dtype="float32") /* ty=Tensor[(150), float32] */;
    %684 = reshape(%678, newshape=[]) /* ty=uint8 */;
    %685 = reshape(%679, newshape=[1008, 1]) /* ty=Tensor[(1008, 1), int8] */;
    %686 = reshape(%680, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %687 = reshape(%681, newshape=[600]) /* ty=Tensor[(600), float32] */;
    %688 = reshape(%682, newshape=[182, 1]) /* ty=Tensor[(182, 1), float32] */;
    %689 = reshape(%683, newshape=[150]) /* ty=Tensor[(150), float32] */;
    %690 = @func_4341(%684, %685, %686, %687, %688, %689) /* ty=(Tensor[(6, 12, 14), int8], Tensor[(1008, 1), int32], Tensor[(13, 3, 15), float32], Tensor[(585), float32], Tensor[(7, 16, 14), uint32], Tensor[(12, 3), float32], Tensor[(3), float32], Tensor[(36), float32], Tensor[(600), float32], Tensor[(14, 1, 13), float32], Tensor[(182, 1), float32], Tensor[(156), float32], Tensor[(150), float32], Tensor[(156), float32], Tensor[(24, 2), int16], Tensor[(72), uint16], Tensor[(24, 2), int16]) */;
    %691 = bitwise_xor(%676, %677) /* ty=Tensor[(6, 16, 3), uint32] */;
    %692 = %690.1;
    (%691, %692, %var_4739, %var_4740, meta[relay.Constant][50] /* ty=Tensor[(36), float32] */, meta[relay.Constant][51] /* ty=Tensor[(600), float32] */, meta[relay.Constant][52] /* ty=Tensor[(182), float32] */, %var_4744)
  };
  %693(%var_4750, %var_4751, %var_4752, %var_4753) /* ty=(Tensor[(6, 16, 3), uint32], Tensor[(1008, 1), int32], uint8, Tensor[(1008), int8], Tensor[(36), float32], Tensor[(600), float32], Tensor[(182), float32], Tensor[(150), float32]) */
}

def @func_4349(%var_4343: uint8, %var_4344: Tensor[(1008, 1), int8], %var_4345: Tensor[(36), float32], %var_4346: Tensor[(600), float32], %var_4347: Tensor[(182, 1), float32], %var_4348: Tensor[(150), float32]) -> (Tensor[(6, 12, 14), int8], Tensor[(1008, 1), int32], Tensor[(13, 3, 15), float32], Tensor[(585), float32], Tensor[(7, 16, 14), uint32], Tensor[(12, 3), float32], Tensor[(3), float32], Tensor[(36), float32], Tensor[(600), float32], Tensor[(14, 1, 13), float32], Tensor[(182, 1), float32], Tensor[(156), float32], Tensor[(150), float32], Tensor[(156), float32], Tensor[(24, 2), int16], Tensor[(72), uint16], Tensor[(24, 2), int16]) {
  @func_4341(%var_4343, %var_4344, %var_4345, %var_4346, %var_4347, %var_4348) /* ty=(Tensor[(6, 12, 14), int8], Tensor[(1008, 1), int32], Tensor[(13, 3, 15), float32], Tensor[(585), float32], Tensor[(7, 16, 14), uint32], Tensor[(12, 3), float32], Tensor[(3), float32], Tensor[(36), float32], Tensor[(600), float32], Tensor[(14, 1, 13), float32], Tensor[(182, 1), float32], Tensor[(156), float32], Tensor[(150), float32], Tensor[(156), float32], Tensor[(24, 2), int16], Tensor[(72), uint16], Tensor[(24, 2), int16]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen139/build/output.py:1213: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen139/build/output.py", line 1218, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(300) tvmgen_default_fused_cast_asinh_mod_kernel0(double* __restrict__ T_mod, signed char* __restrict__ placeholder, double* __restrict__ placeholder1) {
  T_mod[(((int)threadIdx.x))] = fmod(asinh(((double)placeholder[(((int)threadIdx.x))])), placeholder1[(((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(300) tvmgen_default_fused_cast_cast_reshape_logical_xor_kernel0(ushort* __restrict__ T_logical_xor, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_logical_xor[(((int)threadIdx.x))] = (((ushort)placeholder[(((int)threadIdx.x))]) ^ ((ushort)placeholder1[(((int)threadIdx.x))]));
}

extern "C" __global__ void __launch_bounds__(300) tvmgen_default_fused_cast_cast_reshape_greater_equal_kernel0(signed char* __restrict__ T_greater_equal, signed char* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_greater_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) <= ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

