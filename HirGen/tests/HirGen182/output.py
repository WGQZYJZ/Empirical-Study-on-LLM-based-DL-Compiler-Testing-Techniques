import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_123 = relay.var("var_123", dtype = "uint16", shape = (15, 14, 1))#candidate|123|(15, 14, 1)|var|uint16
var_124 = relay.var("var_124", dtype = "uint16", shape = (15, 14, 10))#candidate|124|(15, 14, 10)|var|uint16
bop_125 = relay.maximum(var_123.astype('uint16'), var_124.astype('uint16')) # shape=(15, 14, 10)
output = relay.Tuple([bop_125,])
output2 = relay.Tuple([bop_125,])
func_129 = relay.Function([var_123,var_124,], output)
mod['func_129'] = func_129
mod = relay.transform.InferType()(mod)
var_130 = relay.var("var_130", dtype = "uint16", shape = (15, 14, 1))#candidate|130|(15, 14, 1)|var|uint16
var_131 = relay.var("var_131", dtype = "uint16", shape = (15, 14, 10))#candidate|131|(15, 14, 10)|var|uint16
output = func_129(var_130,var_131,)
func_132 = relay.Function([var_130,var_131,], output)
mutated_mod['func_132'] = func_132
mutated_mod = relay.transform.InferType()(mutated_mod)
var_396 = relay.var("var_396", dtype = "float64", shape = (2, 11, 15))#candidate|396|(2, 11, 15)|var|float64
uop_397 = relay.log10(var_396.astype('float64')) # shape=(2, 11, 15)
uop_402 = relay.cosh(uop_397.astype('float64')) # shape=(2, 11, 15)
func_129_call = mod.get_global_var('func_129')
func_132_call = mutated_mod.get_global_var('func_132')
const_405 = relay.const([-4,2,6,3,8,-1,-7,-6,-2,8,3,4,-10,-10,-7,10,7,-9,9,2,-5,8,-5,6,1,3,-2,2,5,-5,-5,6,-6,-3,-6,2,-8,-3,7,2,7,-2,2,1,5,2,2,2,-4,10,-9,-3,-5,10,10,-9,-9,4,-4,1,-2,9,-4,9,-5,-1,-3,1,-3,-9,-5,7,-9,7,7,-5,2,10,-5,5,-10,-2,1,9,4,-4,-6,5,6,-1,10,2,7,8,-1,-2,9,3,7,1,-2,2,-8,3,9,-6,7,-8,10,-8,9,3,4,-6,-8,2,-4,7,-3,5,-4,8,-9,-8,4,-1,6,1,-9,-10,-5,-8,1,10,-6,6,8,-1,-2,-5,5,-1,9,10,8,5,-4,-2,-8,9,-9,-4,-8,-3,2,-1,5,9,-2,10,-10,-5,7,9,2,-9,-2,-10,-8,5,3,8,-5,-10,7,-9,4,-3,-3,-8,2,-6,2,7,8,-1,-7,9,-7,1,8,1,5,-4,-8,-1,-10,5,2,-2,-5,9,2,-3,6,1,5,-7,7,9], dtype = "uint16")#candidate|405|(210,)|const|uint16
var_406 = relay.var("var_406", dtype = "uint16", shape = (2100,))#candidate|406|(2100,)|var|uint16
call_404 = relay.TupleGetItem(func_129_call(relay.reshape(const_405.astype('uint16'), [15, 14, 1]), relay.reshape(var_406.astype('uint16'), [15, 14, 10]), ), 0)
call_407 = relay.TupleGetItem(func_132_call(relay.reshape(const_405.astype('uint16'), [15, 14, 1]), relay.reshape(var_406.astype('uint16'), [15, 14, 10]), ), 0)
output = relay.Tuple([uop_402,call_404,const_405,var_406,])
output2 = relay.Tuple([uop_402,call_407,const_405,var_406,])
func_413 = relay.Function([var_396,var_406,], output)
mod['func_413'] = func_413
mod = relay.transform.InferType()(mod)
mutated_mod['func_413'] = func_413
mutated_mod = relay.transform.InferType()(mutated_mod)
func_413_call = mutated_mod.get_global_var('func_413')
var_415 = relay.var("var_415", dtype = "float64", shape = (2, 11, 15))#candidate|415|(2, 11, 15)|var|float64
var_416 = relay.var("var_416", dtype = "uint16", shape = (2100,))#candidate|416|(2100,)|var|uint16
call_414 = func_413_call(var_415,var_416,)
output = call_414
func_417 = relay.Function([var_415,var_416,], output)
mutated_mod['func_417'] = func_417
mutated_mod = relay.transform.InferType()(mutated_mod)
var_572 = relay.var("var_572", dtype = "bool", shape = (3, 8, 8))#candidate|572|(3, 8, 8)|var|bool
var_573 = relay.var("var_573", dtype = "bool", shape = (3, 8, 8))#candidate|573|(3, 8, 8)|var|bool
bop_574 = relay.logical_and(var_572.astype('bool'), relay.reshape(var_573.astype('bool'), relay.shape_of(var_572))) # shape=(3, 8, 8)
bop_580 = relay.bitwise_and(bop_574.astype('uint8'), relay.reshape(var_573.astype('uint8'), relay.shape_of(bop_574))) # shape=(3, 8, 8)
output = relay.Tuple([bop_580,])
output2 = relay.Tuple([bop_580,])
func_591 = relay.Function([var_572,var_573,], output)
mod['func_591'] = func_591
mod = relay.transform.InferType()(mod)
var_592 = relay.var("var_592", dtype = "bool", shape = (3, 8, 8))#candidate|592|(3, 8, 8)|var|bool
var_593 = relay.var("var_593", dtype = "bool", shape = (3, 8, 8))#candidate|593|(3, 8, 8)|var|bool
output = func_591(var_592,var_593,)
func_594 = relay.Function([var_592,var_593,], output)
mutated_mod['func_594'] = func_594
mutated_mod = relay.transform.InferType()(mutated_mod)
const_696 = relay.const([[[False,False,True,True,True,True,True],[True,True,False,False,False,True,True],[False,True,True,False,False,False,False],[False,False,False,True,False,True,True],[False,True,True,False,False,False,True],[True,True,False,False,True,False,False],[True,False,True,True,True,True,True],[False,True,True,False,False,True,True],[False,True,False,False,False,True,False],[False,True,True,False,False,True,False],[True,True,True,True,True,False,False],[True,True,False,True,True,True,True],[True,True,False,True,False,False,True],[False,True,True,True,False,False,True],[False,True,True,False,False,False,True]],[[False,True,True,True,False,True,False],[True,True,True,False,False,True,True],[False,True,False,False,False,True,True],[False,True,False,False,False,False,False],[True,False,True,True,True,True,False],[False,False,False,True,True,True,False],[True,False,True,True,True,False,False],[True,True,True,True,True,False,True],[True,False,False,False,False,True,True],[False,False,True,False,True,True,True],[False,False,True,False,False,True,True],[True,True,True,False,False,True,True],[True,True,True,True,True,True,True],[True,False,True,True,True,False,True],[False,False,True,False,False,False,False]],[[True,True,False,False,False,True,True],[True,False,False,False,True,True,True],[False,False,True,False,True,False,True],[False,False,True,False,False,False,False],[True,False,True,False,False,True,False],[False,False,True,True,True,False,False],[False,True,True,True,False,False,True],[True,False,False,True,True,True,True],[True,True,True,False,False,False,False],[False,True,True,False,False,False,False],[True,False,False,True,False,True,False],[False,False,True,True,False,False,False],[True,True,True,True,True,False,True],[True,True,False,True,False,True,True],[False,True,True,True,False,True,True]],[[False,True,True,False,True,True,True],[True,True,True,True,False,False,False],[True,False,True,False,True,True,True],[False,False,True,False,False,False,False],[False,False,True,False,True,False,False],[False,True,True,True,False,False,False],[True,False,False,False,False,False,True],[False,True,False,False,False,True,False],[False,False,False,False,False,True,False],[True,False,False,True,True,True,False],[False,True,True,True,True,True,True],[True,True,False,True,True,True,True],[True,False,False,True,False,False,True],[False,False,True,True,False,True,False],[True,False,True,True,True,False,False]],[[False,True,False,True,True,False,True],[False,True,False,True,False,False,False],[False,True,True,True,True,False,False],[True,True,True,False,True,False,False],[False,False,False,False,True,False,True],[False,True,False,False,False,True,True],[False,True,True,True,False,False,False],[True,False,False,False,True,True,True],[False,True,True,False,True,True,False],[True,False,False,True,True,False,False],[True,True,True,False,True,True,True],[True,True,True,True,False,True,True],[True,True,False,False,False,True,False],[False,True,True,True,True,True,False],[False,True,False,True,True,False,True]],[[False,True,False,True,False,True,False],[False,True,False,False,False,False,False],[False,False,False,False,True,True,True],[False,False,False,False,False,False,True],[True,False,True,True,True,True,False],[False,True,True,False,False,True,False],[False,True,False,False,True,True,True],[False,False,False,False,True,False,False],[True,True,False,False,True,True,True],[True,False,True,True,True,False,True],[True,True,False,True,True,False,False],[False,True,True,True,False,True,True],[True,False,False,False,True,False,False],[False,True,True,True,True,False,False],[True,True,False,False,False,False,False]],[[True,False,False,False,False,True,True],[False,False,False,True,False,False,True],[True,False,True,False,True,False,True],[True,False,False,False,True,False,False],[False,False,False,True,False,False,True],[False,True,False,False,False,True,True],[False,True,False,False,False,True,False],[True,True,True,False,False,True,False],[True,True,True,True,True,True,True],[False,False,False,False,True,True,True],[True,False,False,False,True,True,False],[True,False,False,True,False,True,True],[False,True,False,True,False,True,True],[False,False,False,False,False,False,False],[False,True,True,True,True,False,True]],[[True,True,True,False,True,True,True],[True,True,True,True,False,True,True],[False,False,False,False,False,False,False],[True,False,True,True,False,False,False],[True,False,False,False,True,True,True],[True,True,False,False,False,True,False],[False,False,True,False,False,True,True],[True,True,True,False,True,False,True],[True,True,True,True,True,True,True],[True,True,False,False,False,True,False],[False,False,False,False,True,True,False],[True,False,True,False,True,True,False],[True,True,True,False,False,True,True],[False,False,True,True,True,True,True],[True,False,True,True,True,False,True]],[[False,True,False,True,False,True,False],[True,False,False,False,False,False,True],[False,True,False,False,True,True,True],[True,True,False,False,True,False,False],[False,False,True,False,True,True,False],[True,True,False,True,True,False,True],[True,False,False,False,True,True,False],[True,False,False,False,True,False,False],[True,False,False,True,False,False,False],[False,True,False,True,False,False,False],[False,False,False,True,True,False,True],[False,True,False,True,False,False,True],[True,False,False,False,True,False,False],[True,False,False,True,False,False,True],[False,False,True,False,False,True,False]],[[True,False,True,False,True,True,True],[True,True,True,True,False,True,True],[True,True,True,False,False,True,False],[False,True,True,False,True,False,True],[False,False,True,True,False,False,True],[True,False,True,True,True,False,False],[True,True,True,False,False,True,True],[False,False,True,False,False,False,True],[True,False,False,True,False,True,True],[False,True,False,False,True,True,True],[True,True,True,False,False,False,True],[True,True,False,True,False,True,False],[False,True,True,True,True,True,True],[False,False,False,False,True,False,False],[True,False,True,False,True,False,False]],[[False,True,True,True,False,True,False],[False,False,False,False,True,True,False],[True,False,True,True,False,True,True],[False,True,False,True,True,True,True],[True,False,True,True,True,True,False],[True,False,False,False,True,True,False],[False,False,False,True,True,True,False],[True,False,False,True,False,False,False],[True,True,True,False,True,True,True],[False,False,True,False,False,False,False],[True,True,False,False,True,True,True],[False,False,False,False,True,False,True],[True,False,False,False,True,True,True],[True,False,False,True,False,False,True],[True,False,True,False,True,False,False]],[[False,True,False,True,True,False,True],[False,False,False,True,False,False,False],[True,False,True,False,False,True,False],[True,True,True,False,True,True,False],[False,True,True,True,False,True,False],[True,True,True,False,True,True,True],[True,False,True,False,False,False,True],[False,False,True,True,True,False,True],[True,True,False,True,False,True,False],[False,False,False,False,True,True,False],[False,True,True,True,True,True,True],[True,True,False,True,True,True,True],[True,False,False,False,True,False,True],[False,True,False,False,True,False,False],[False,False,False,False,True,False,True]],[[False,True,True,True,False,True,False],[False,True,True,True,True,False,True],[False,False,False,False,False,False,True],[True,True,True,False,True,False,False],[False,False,False,False,True,True,True],[True,False,True,True,True,True,False],[False,True,True,True,True,False,True],[True,False,False,True,True,False,True],[False,False,True,False,False,True,False],[True,False,True,False,True,True,False],[False,False,False,True,True,False,False],[False,False,True,False,False,False,True],[False,False,False,False,False,True,True],[False,True,True,True,True,True,True],[False,False,True,True,False,False,False]]], dtype = "bool")#candidate|696|(13, 15, 7)|const|bool
var_697 = relay.var("var_697", dtype = "bool", shape = (13, 15, 7))#candidate|697|(13, 15, 7)|var|bool
bop_698 = relay.logical_and(const_696.astype('bool'), relay.reshape(var_697.astype('bool'), relay.shape_of(const_696))) # shape=(13, 15, 7)
func_129_call = mod.get_global_var('func_129')
func_132_call = mutated_mod.get_global_var('func_132')
const_712 = relay.const([10,3,-9,-5,6,3,-3,3,-6,10,1,-9,1,6,-5,-1,4,-4,-6,-7,-2,10,-1,-5,-6,-8,9,1,-5,9,9,-2,-4,5,7,4,-4,-7,9,-5,6,-3,3,6,-2,-6,7,-3,6,4,-10,5,5,1,3,-9,9,6,8,8,9,1,3,10,2,7,4,-7,5,1,4,-6,1,-5,-6,-9,8,-4,3,-4,-7,8,2,-10,-3,-4,-10,2,-6,2,-9,-8,10,1,3,-10,-6,-4,4,-7,5,-4,4,8,-2,-2,1,9,2,-7,-5,7,-5,-10,-5,6,8,6,-7,-2,5,1,5,-9,1,-2,-5,6,10,-1,-2,-8,10,-2,10,-7,9,-3,9,9,-10,-6,10,4,-1,8,3,-4,1,9,10,-6,-3,3,-1,-4,5,-5,-6,-6,6,-8,9,-10,-8,2,5,10,7,2,8,-8,-7,-8,1,-8,8,-6,10,7,-6,-9,-7,1,-2,1,-10,-3,-1,10,4,9,-7,-1,2,6,-9,1,4,9,6,8,-8,-2,3,-2,-9,-1,7,-3], dtype = "uint16")#candidate|712|(210,)|const|uint16
const_713 = relay.const([9,6,5,3,-6,3,-4,6,-1,8,-5,6,3,-9,-4,-8,8,6,-4,7,-9,-5,-3,-9,-9,10,5,-2,-1,7,-9,10,-8,3,7,-3,2,9,8,-2,6,1,-7,-10,-3,-6,1,-2,-4,3,8,-8,-6,6,9,-3,9,8,6,-8,4,-3,-10,6,-1,7,-8,10,6,-10,-5,9,8,3,5,4,3,-6,2,1,2,-5,-5,-6,2,-5,10,2,-3,-1,6,8,3,-4,-8,10,-3,2,-9,-8,-4,-9,-6,2,8,8,1,3,1,-8,-4,-1,-3,-4,1,5,-4,-10,7,-10,7,7,5,3,9,5,10,-10,-8,7,-8,-5,-9,3,-8,1,2,-5,-9,-2,-2,10,2,-6,6,-10,-6,-7,1,-10,-6,6,8,4,2,4,3,-5,-7,5,-4,8,-7,6,-8,7,-5,9,-8,9,-8,-5,10,-6,-3,-8,4,-9,-4,1,9,-3,2,-8,-6,-2,3,-7,-7,7,4,7,3,10,-10,7,-8,-4,6,-3,-2,-9,10,5,9,-5,7,-2,7,6,-1,-7,-5,1,4,6,-7,-10,-10,-4,6,3,-1,-2,5,6,-4,8,5,-1,-3,4,1,-9,-8,2,-2,7,-10,-6,8,-4,6,-2,-1,-9,-1,6,-8,6,8,9,-3,-7,-7,1,-4,8,6,10,-6,-2,1,-2,5,-4,6,-4,10,-3,2,-2,8,6,-1,-1,-5,-7,-3,5,5,-10,3,-1,3,9,7,-4,3,-8,8,3,-4,-2,-9,4,6,-4,-10,-1,-8,-10,4,-1,8,3,-9,-1,-7,10,10,2,10,5,3,-4,-8,6,-10,9,6,-2,-8,-8,6,3,-3,-3,10,-4,-6,4,3,-6,-8,-9,-6,-1,-5,-9,8,8,6,-8,-1,-9,-1,1,-2,-4,-1,-5,3,-9,-7,-1,2,-10,-3,5,1,9,5,-3,-6,-5,10,-1,-8,-1,-3,-1,4,-1,10,-8,-10,-10,-8,9,-1,-8,8,4,-2,-2,1,-9,-5,-9,8,7,-6,-10,1,8,-8,3,-8,4,5,-6,-9,9,-5,10,-8,1,5,10,-3,-10,-5,-6,1,6,6,-4,6,9,-4,5,8,-7,7,1,-6,-10,-3,5,-6,1,2,7,1,-9,8,10,-2,-1,4,9,-2,-2,-7,8,-9,-7,8,-9,1,5,-4,5,2,4,-9,-6,4,-3,-7,6,4,7,5,-3,5,-6,-3,-2,-9,10,1,-7,6,-6,5,-10,-5,-2,-4,9,-1,6,-5,8,9,2,-6,5,-10,-6,4,5,3,-10,-10,-6,-3,6,5,4,4,3,6,1,-8,-3,2,-10,3,4,8,-6,-4,-10,8,2,9,-9,3,1,6,-4,1,-3,-5,-2,9,-5,-2,-4,7,10,1,-1,1,6,7,6,-5,6,6,-4,-4,7,-1,6,-7,6,-8,-2,10,-6,7,6,-1,-1,-8,3,3,-10,1,4,4,7,6,1,-5,-4,-9,4,3,-8,-10,7,-10,-8,4,-10,2,10,-7,4,8,-6,-8,-8,8,2,-8,1,-5,-1,-3,-7,10,-10,8,9,-2,4,7,-1,-9,-3,3,5,5,6,8,-2,1,-3,8,5,-1,1,3,1,4,-1,9,4,-3,-3,-4,-7,-9,-3,6,-10,-1,5,1,-7,1,4,5,6,-10,9,4,-10,8,-3,-3,3,3,7,-3,1,-6,6,4,-9,10,8,-6,8,-2,-10,5,-9,9,-2,-4,-8,9,2,-3,8,1,-7,2,10,-10,9,2,-2,7,3,9,2,5,-1,-6,-2,-5,-3,8,-3,4,4,3,6,1,1,-3,8,-6,-6,10,-1,-1,-3,8,9,-9,7,-10,10,-4,-1,-4,5,-2,4,1,6,-10,2,7,1,4,-8,10,-6,-8,1,10,6,7,3,-7,-3,-9,6,-6,-4,4,-7,-9,-7,3,-1,-4,-2,-6,2,-5,-2,-9,2,5,8,-5,2,-9,3,8,5,-2,4,4,-3,10,5,4,-5,-3,-6,9,4,-8,-1,2,8,-5,-2,-8,-9,-10,8,-2,-1,-7,3,7,-5,4,-1,2,-10,4,7,7,-2,2,1,6,-9,8,-8,-9,2,-9,-2,4,1,4,-2,5,7,8,1,9,7,-2,-4,8,-8,9,-9,2,1,-7,6,-10,1,-3,10,-2,1,1,-5,-1,7,3,-3,5,2,8,6,-2,-4,9,7,2,-5,3,-4,-5,4,-7,4,10,8,5,-6,2,4,-7,-3,8,3,-10,-8,6,-2,9,-8,1,1,-9,2,8,-3,6,-5,3,-8,3,-5,-7,5,-2,-9,7,8,-6,7,4,-10,-5,-7,-10,-1,-2,-5,5,9,3,2,-5,-7,-9,-4,4,7,8,10,-10,3,1,-5,8,-8,9,2,-10,-6,3,4,-3,-9,-7,-8,-3,-1,9,-5,-9,9,-2,-3,-9,-3,-8,-10,-10,-1,-9,3,10,-8,-1,9,5,9,8,-10,-2,9,-2,2,-7,6,-4,10,5,6,-3,6,-10,7,-9,-4,2,3,-2,3,-10,9,-9,9,-9,2,7,-1,-4,-6,5,-4,-5,8,-1,-9,3,-4,-9,8,7,9,7,2,8,4,10,-10,-4,4,-3,-6,-3,9,-5,-9,9,6,-9,7,6,3,-1,3,-1,-1,-2,-1,1,-6,-8,-9,-2,-3,5,10,-3,-9,4,-10,-9,-1,1,-5,-3,9,3,-8,-2,7,5,9,8,2,10,-9,4,9,4,-8,-4,-8,-2,3,9,3,5,4,10,7,10,6,-6,1,-10,8,-3,-10,-3,3,2,10,6,3,9,-3,-6,5,7,-3,-5,10,5,7,2,4,3,-1,7,4,-4,7,9,1,9,2,2,2,-1,-9,-6,-7,8,-10,2,3,3,5,3,8,9,-6,2,-10,6,6,-6,-2,10,1,8,-7,5,2,7,2,2,9,-5,-8,10,-6,6,-1,2,8,8,-8,9,-5,-4,4,-4,-1,-2,1,-5,-8,-4,7,1,-3,-1,3,5,-10,-4,4,-7,-6,-5,1,-3,1,10,-3,-3,1,9,6,4,10,10,4,8,6,-9,5,8,9,-4,-8,-9,1,-4,10,4,-4,6,4,1,9,-9,-2,-8,4,1,1,2,8,10,4,1,-10,7,1,4,-8,2,-1,-8,6,-10,3,-8,9,-10,4,10,-6,-8,7,-7,-6,-4,3,3,-5,-4,-4,-9,2,6,1,-10,5,6,-1,-6,3,-3,3,-6,10,5,4,-6,3,10,10,-1,-7,8,1,4,-5,10,4,4,-8,9,5,6,-9,-2,-6,3,-1,1,4,-5,4,-5,-1,-4,10,-1,-9,2,3,7,6,-3,9,-6,9,2,-7,2,7,-9,9,1,6,8,-7,7,4,-10,-5,-6,10,-8,4,-6,-9,-8,-6,-8,4,10,-10,-7,-8,-7,-5,-9,-10,3,8,5,-8,-8,5,7,-2,3,5,-8,8,7,-8,-2,3,2,-7,-1,-3,-7,4,8,-2,-10,4,3,-3,9,7,8,5,5,1,6,6,-10,9,8,2,10,8,-10,-4,-2,10,-2,4,-8,-5,6,-8,-4,8,-8,-4,8,10,4,-9,-4,8,6,3,-4,-6,2,9,-9,-7,-7,5,-4,-5,6,5,-3,-6,-5,-10,-9,-9,10,-4,3,8,-4,-7,-6,9,6,-4,6,-9,10,10,-8,8,-5,9,-8,1,-7,-2,-1,-7,-4,-10,-2,1,-10,1,8,-8,-6,4,-1,5,1,3,10,-3,-2,5,3,7,-5,-3,-10,7,-5,9,3,-4,-5,10,-6,10,-5,-3,10,-2,-10,9,4,-5,8,5,-8,-10,5,-8,3,10,-2,-8,2,-1,-7,-2,8,-1,1,-8,6,-4,7,3,-2,2,5,8,2,-2,10,1,3,-4,8,7,-1,-7,5,-2,5,10,-4,9,-10,6,-7,9,6,8,7,-2,-6,-9,-10,-7,5,-5,10,6,9,1,8,7,3,-2,1,-1,2,10,-2,-9,6,7,-9,5,4,3,-6,-6,6,-1,1,-5,-3,6,-2,2,8,6,-2,-7,-9,-8,3,-3,-3,7,6,8,-5,-5,-7,8,6,-7,7,5,-4,-10,-1,5,7,8,2,-3,10,7,-4,-5,7,9,5,9,-8,-4,3,-3,-9,-6,-8,-9,6,8,-1,2,-6,-3,4,-8,-10,-3,2,-3,-8,-4,-7,-7,-9,5,-7,-9,8,3,1,-4,6,3,-3,8,5,-10,-5,7,9,5,9,-10,-5,8,-6,8,-2,-1,7,-8,3,7,2,-5,6,-10,5,1,-5,-5,-1,-5,4,-10,7,-5,4,8,6,9,-3,-6,-9,8,5,-6,-6,1,-9,3,7,-4,-2,8,-8,-9,-8,-1,1,10,5,-4,9,3,6,-1,7,-7,2,6,-4,2,1,8,5,8,8,-10,-7,2,-10,8,2,6,-1,-5,9,-9,-1,2,7,-3,-4,-1,-8,4,-9,5,8,-7,-6,-5,8,-5,1,6,-9,-4,-3,-6,9,9,4,9,-7,-10,7,-8,-9,5,-4,7,-1,8,3,5,4,10,-9,-10,3,1,-7,-6,-6,4,3,5,2,8,-7,-9,-8,-1,-8,-5,-2,1,-7,-6,10,-3,3,5,-1,-3,7,-1,1,-3,-2,-9,7,4,7,-9,9,-7,9,-8,-8,-1,2,-7,-6,1,-9,2,10,-1,5,-3,-1,-7,-4,-3,5,-7,-7,-2,-7,3,-3,3,1,10,4,-10,-4,5,1,2,1,-5,-4,-3,9,-8,-1,6,4,7,7,-3,2,1,-6,-1,10,7,-4,4,8,-8,2,-10,9,-4,-3,-9,5,-2,1,-7,-1,7,-7,-1,-3,-2,4,-3,9,9,-4,-9,-8,-9,-6,2,-1,5,9,10,6,9,6,-2,9,9,2,2,10,-1,-6,-4,-9,4,6,10,-10,9,-10,2,-4,3,-2,-6,-4,1,-9,8,3,-5,-10,10,-5,7,-1,5,4,1,-2,-10,-5,10,-5,1,-4,6,3,-3,6,4,-1,-3,8,2,-1,10,-1,-2,-9,-4,-9,-7,8,-9,-4,-10,-3,-1,-6,-2,-3,-5,-1,1,-9,-4,-7,1,3,-10,4,-1,4,7,-2,7,9,10,-8,-1,9,-5,6,-4,5,-3,5,-7,5,6,-3,3,-6,6,-7,3,2,-2,4,-7,-9,10,-6,10,-1,1,1,9,-8,-3,2,10,-4,2,8,6,2,1,3,1,2,-1,5,-2,3,-1,3,-8,-6,4,-10,3,-8,-1,-10,8,-4,4,-7,4,4,-4,7,-4,2,6,10,-5,-6,1,9,-5,-6,-2,-7,-2,4,-10,6,5,-5,2,-2,4,-3,3,4,-7,-9,3,9,-9,-1,-3,6,-7,-1,-4,5,-1,5,-2,-4,-9,-8,-10,-8,-10,-9,-6,-3,6,3,6,-10,-6,-1,-3,-7,-7,-5,-2,8,-3,-6,-2,3,4,-9,-4,7,3,-8,2,-9,2], dtype = "uint16")#candidate|713|(2100,)|const|uint16
call_711 = relay.TupleGetItem(func_129_call(relay.reshape(const_712.astype('uint16'), [15, 14, 1]), relay.reshape(const_713.astype('uint16'), [15, 14, 10]), ), 0)
call_714 = relay.TupleGetItem(func_132_call(relay.reshape(const_712.astype('uint16'), [15, 14, 1]), relay.reshape(const_713.astype('uint16'), [15, 14, 10]), ), 0)
output = relay.Tuple([bop_698,call_711,const_712,const_713,])
output2 = relay.Tuple([bop_698,call_714,const_712,const_713,])
func_716 = relay.Function([var_697,], output)
mod['func_716'] = func_716
mod = relay.transform.InferType()(mod)
mutated_mod['func_716'] = func_716
mutated_mod = relay.transform.InferType()(mutated_mod)
var_717 = relay.var("var_717", dtype = "bool", shape = (13, 15, 7))#candidate|717|(13, 15, 7)|var|bool
func_716_call = mutated_mod.get_global_var('func_716')
call_718 = func_716_call(var_717)
output = call_718
func_719 = relay.Function([var_717], output)
mutated_mod['func_719'] = func_719
mutated_mod = relay.transform.InferType()(mutated_mod)
var_940 = relay.var("var_940", dtype = "float64", shape = (7, 1, 7))#candidate|940|(7, 1, 7)|var|float64
uop_941 = relay.sqrt(var_940.astype('float64')) # shape=(7, 1, 7)
uop_944 = relay.log(uop_941.astype('float64')) # shape=(7, 1, 7)
bop_953 = relay.not_equal(uop_944.astype('bool'), relay.reshape(uop_941.astype('bool'), relay.shape_of(uop_944))) # shape=(7, 1, 7)
bop_958 = relay.bitwise_xor(uop_941.astype('int64'), relay.reshape(bop_953.astype('int64'), relay.shape_of(uop_941))) # shape=(7, 1, 7)
uop_972 = relay.cos(uop_944.astype('float32')) # shape=(7, 1, 7)
output = relay.Tuple([bop_958,uop_972,])
output2 = relay.Tuple([bop_958,uop_972,])
func_975 = relay.Function([var_940,], output)
mod['func_975'] = func_975
mod = relay.transform.InferType()(mod)
var_976 = relay.var("var_976", dtype = "float64", shape = (7, 1, 7))#candidate|976|(7, 1, 7)|var|float64
output = func_975(var_976)
func_977 = relay.Function([var_976], output)
mutated_mod['func_977'] = func_977
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1196 = relay.const([[[-1.131766,4.988664],[-0.340731,9.663776],[9.225179,-2.315428],[4.179712,4.158230],[9.648331,8.369691],[0.612238,-9.754898],[-6.905022,-8.175740],[-8.370407,6.467061],[-5.946136,1.662664],[-6.383091,2.404144],[-0.544482,-7.719785]],[[-8.856231,6.792252],[-0.437763,6.083792],[7.255826,7.206771],[1.184153,-5.859261],[1.757039,-9.563577],[5.125597,-3.840479],[-5.776778,1.284426],[6.758031,2.446616],[-0.468003,5.850672],[2.763212,-9.701051],[1.702212,2.762571]],[[-0.207792,-8.872657],[2.030855,7.000614],[-9.217111,3.859656],[7.059298,2.070346],[-6.315156,-0.580269],[-6.551469,9.320336],[-2.781380,-7.874775],[-2.378684,5.894790],[4.062204,-1.420363],[-6.609055,8.392621],[-9.845622,-3.855347]],[[-9.599156,-7.638835],[-2.361927,5.041477],[4.716907,-7.559096],[-4.544902,8.107986],[-8.205382,6.678998],[-9.300868,4.471037],[7.305371,5.840642],[6.445368,-3.585993],[9.340497,-8.032073],[9.304445,-2.381418],[-7.822096,7.818701]]], dtype = "float32")#candidate|1196|(4, 11, 2)|const|float32
uop_1197 = relay.log10(const_1196.astype('float32')) # shape=(4, 11, 2)
func_129_call = mod.get_global_var('func_129')
func_132_call = mutated_mod.get_global_var('func_132')
var_1205 = relay.var("var_1205", dtype = "uint16", shape = (210,))#candidate|1205|(210,)|var|uint16
var_1206 = relay.var("var_1206", dtype = "uint16", shape = (150, 14))#candidate|1206|(150, 14)|var|uint16
call_1204 = relay.TupleGetItem(func_129_call(relay.reshape(var_1205.astype('uint16'), [15, 14, 1]), relay.reshape(var_1206.astype('uint16'), [15, 14, 10]), ), 0)
call_1207 = relay.TupleGetItem(func_132_call(relay.reshape(var_1205.astype('uint16'), [15, 14, 1]), relay.reshape(var_1206.astype('uint16'), [15, 14, 10]), ), 0)
var_1208 = relay.var("var_1208", dtype = "float32", shape = (4, 11, 2))#candidate|1208|(4, 11, 2)|var|float32
bop_1209 = relay.add(uop_1197.astype('int16'), relay.reshape(var_1208.astype('int16'), relay.shape_of(uop_1197))) # shape=(4, 11, 2)
output = relay.Tuple([call_1204,var_1205,var_1206,bop_1209,])
output2 = relay.Tuple([call_1207,var_1205,var_1206,bop_1209,])
func_1212 = relay.Function([var_1205,var_1206,var_1208,], output)
mod['func_1212'] = func_1212
mod = relay.transform.InferType()(mod)
var_1213 = relay.var("var_1213", dtype = "uint16", shape = (210,))#candidate|1213|(210,)|var|uint16
var_1214 = relay.var("var_1214", dtype = "uint16", shape = (150, 14))#candidate|1214|(150, 14)|var|uint16
var_1215 = relay.var("var_1215", dtype = "float32", shape = (4, 11, 2))#candidate|1215|(4, 11, 2)|var|float32
output = func_1212(var_1213,var_1214,var_1215,)
func_1216 = relay.Function([var_1213,var_1214,var_1215,], output)
mutated_mod['func_1216'] = func_1216
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1299 = relay.var("var_1299", dtype = "float32", shape = (7, 16, 11))#candidate|1299|(7, 16, 11)|var|float32
uop_1300 = relay.atan(var_1299.astype('float32')) # shape=(7, 16, 11)
bop_1306 = relay.left_shift(uop_1300.astype('uint64'), relay.reshape(var_1299.astype('uint64'), relay.shape_of(uop_1300))) # shape=(7, 16, 11)
output = bop_1306
output2 = bop_1306
func_1309 = relay.Function([var_1299,], output)
mod['func_1309'] = func_1309
mod = relay.transform.InferType()(mod)
mutated_mod['func_1309'] = func_1309
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1310 = relay.var("var_1310", dtype = "float32", shape = (7, 16, 11))#candidate|1310|(7, 16, 11)|var|float32
func_1309_call = mutated_mod.get_global_var('func_1309')
call_1311 = func_1309_call(var_1310)
output = call_1311
func_1312 = relay.Function([var_1310], output)
mutated_mod['func_1312'] = func_1312
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1498 = relay.var("var_1498", dtype = "int64", shape = (16, 4, 12))#candidate|1498|(16, 4, 12)|var|int64
var_1499 = relay.var("var_1499", dtype = "int64", shape = (16, 4, 12))#candidate|1499|(16, 4, 12)|var|int64
bop_1500 = relay.bitwise_xor(var_1498.astype('int64'), relay.reshape(var_1499.astype('int64'), relay.shape_of(var_1498))) # shape=(16, 4, 12)
output = relay.Tuple([bop_1500,])
output2 = relay.Tuple([bop_1500,])
func_1507 = relay.Function([var_1498,var_1499,], output)
mod['func_1507'] = func_1507
mod = relay.transform.InferType()(mod)
var_1508 = relay.var("var_1508", dtype = "int64", shape = (16, 4, 12))#candidate|1508|(16, 4, 12)|var|int64
var_1509 = relay.var("var_1509", dtype = "int64", shape = (16, 4, 12))#candidate|1509|(16, 4, 12)|var|int64
output = func_1507(var_1508,var_1509,)
func_1510 = relay.Function([var_1508,var_1509,], output)
mutated_mod['func_1510'] = func_1510
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1663 = relay.var("var_1663", dtype = "int8", shape = ())#candidate|1663|()|var|int8
const_1664 = relay.const([[[2,-9,5,-6,3,6,-5,4,9],[-8,-8,-6,-6,2,-4,-5,4,3],[-5,-10,3,8,5,9,-1,-4,-1]],[[-8,3,-8,-8,-5,7,2,9,10],[2,-1,9,8,8,1,-2,-6,-10],[6,-7,2,3,8,8,5,8,-6]],[[5,-9,7,4,-10,6,7,9,5],[10,5,-9,5,-4,9,10,-5,-10],[-10,4,7,1,4,-7,-3,-6,-2]],[[3,10,-10,7,-4,8,5,-8,-9],[8,6,2,-10,10,-1,-2,2,2],[-8,2,1,6,10,-2,-9,-9,-2]],[[-10,-3,-8,-5,-3,-10,-8,3,-4],[2,10,-6,-10,-3,-1,9,-7,4],[-1,6,5,-8,-8,-7,-7,2,2]],[[10,-2,5,9,-3,-8,-2,5,4],[7,6,-3,8,3,-7,-6,1,1],[-1,9,7,-10,-10,-8,-6,-6,-2]],[[7,-9,8,7,5,3,-3,-6,-8],[-2,1,-5,4,-6,6,-1,6,5],[-8,-1,10,8,-10,-4,5,-1,7]],[[7,-1,-4,-1,-2,-7,-2,-7,7],[-10,-9,-1,-3,10,-5,1,-2,5],[9,-1,2,6,-2,-8,2,-5,-10]],[[-5,-5,6,6,9,8,-4,-7,-6],[4,4,8,-6,-10,1,-9,3,-5],[-1,-4,9,-6,9,-7,-4,-8,6]],[[10,6,4,2,-6,-7,-5,2,-1],[-1,3,2,-6,2,5,-2,1,-5],[-5,-8,3,2,6,-7,-4,-5,10]],[[-6,4,-2,5,1,4,-10,-6,-2],[6,7,7,-8,-4,-5,-10,3,-10],[-2,1,-2,1,3,-10,6,-6,-7]],[[-9,-3,10,9,10,4,7,6,9],[-10,-10,10,8,8,-1,9,10,4],[2,9,-5,4,9,9,-8,2,6]]], dtype = "int8")#candidate|1664|(12, 3, 9)|const|int8
bop_1665 = relay.maximum(var_1663.astype('int8'), const_1664.astype('int8')) # shape=(12, 3, 9)
func_591_call = mod.get_global_var('func_591')
func_594_call = mutated_mod.get_global_var('func_594')
const_1671 = relay.const([False,True,False,True,True,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,True,True,True,True,False,True,True,True,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,True,False,True,True,False,True], dtype = "bool")#candidate|1671|(192,)|const|bool
call_1670 = relay.TupleGetItem(func_591_call(relay.reshape(const_1671.astype('bool'), [3, 8, 8]), relay.reshape(const_1671.astype('bool'), [3, 8, 8]), ), 0)
call_1672 = relay.TupleGetItem(func_594_call(relay.reshape(const_1671.astype('bool'), [3, 8, 8]), relay.reshape(const_1671.astype('bool'), [3, 8, 8]), ), 0)
func_413_call = mod.get_global_var('func_413')
func_417_call = mutated_mod.get_global_var('func_417')
const_1682 = relay.const([-1.672712,7.082293,-3.805745,3.604561,3.933532,-6.859970,-9.972109,-9.155610,2.956374,6.780239,-5.997683,-5.453751,6.215185,-2.927253,1.457148,-9.396305,-3.845344,-4.977175,7.862935,7.044469,3.245112,-5.248756,-4.161995,6.531479,2.687893,-0.469282,-1.679212,5.717759,2.505988,2.871008,-5.709709,-2.817039,1.776031,6.718300,-7.406898,-5.968856,-6.489162,9.631459,3.460320,-8.369581,-6.638995,-4.659303,8.895631,-1.250932,-5.166497,-6.144503,9.860768,3.283806,9.993693,-5.050114,6.747345,6.672516,9.522172,1.983682,2.706453,-1.419304,-3.631732,9.741098,-7.110422,-7.606328,2.013383,7.796252,3.966456,3.361503,8.296043,-0.393828,-6.176286,-0.525186,7.509795,9.095908,9.097005,-3.800593,-4.863338,-8.045415,4.459437,7.215253,7.539795,-0.997373,-5.838492,6.891474,5.091292,-7.641990,9.741602,4.342707,-7.493726,-5.094501,-9.735778,5.816383,-9.616938,3.107064,-1.021496,-2.646791,9.964669,-5.663274,-6.807925,2.991527,-6.150740,-7.824245,-6.713059,-9.114874,-2.196051,3.672095,4.386522,6.223994,-6.815378,0.703760,-0.379771,-7.738460,-2.498495,0.718942,-9.520991,-3.450125,-0.858671,-7.510802,4.477983,-7.246595,1.232546,-2.398754,-0.209960,-3.764528,3.709986,-8.507992,1.565643,6.102565,3.877067,2.121568,-4.882824,-6.570099,-2.663798,9.695662,1.898815,7.363850,7.872923,6.121384,2.315475,-6.668528,-4.316964,-1.361816,4.523765,0.638555,-9.361935,-6.436109,0.052727,-2.372565,-3.376485,6.751129,7.828646,-8.809162,-7.497430,-5.004432,-9.546213,-2.199506,1.545623,-3.387802,2.200208,-6.847505,-1.565479,-1.802756,3.404826,1.201020,-7.473319,-1.722160,2.536127,6.042034,-6.435919,-7.821940,-9.867932,5.064633,9.358428,1.209182,-0.151990,2.339140,-2.080239,-4.566901,-5.219770,6.737983,-2.971426,-3.579445,2.748018,5.822940,3.123022,-4.304288,3.216972,-5.401479,2.216359,6.105044,8.207856,1.818886,-0.087345,8.092766,8.757655,6.952787,-3.954582,-7.011658,7.336962,-1.935774,6.922013,9.739074,-8.702724,8.031142,3.205956,5.479394,1.880755,-7.916389,-4.917805,-4.476938,4.490714,7.748132,9.497293,3.903259,-6.106701,-8.471964,-8.804800,-5.356862,7.027036,-8.906928,-8.633583,8.989197,-5.590603,8.450950,7.715650,2.532407,8.490610,3.673455,-2.685744,-3.085429,-4.973321,-2.966683,-3.612274,6.233913,-3.431567,-4.791585,-5.814235,8.394019,6.022806,6.777545,-7.747352,3.284076,-7.536025,5.551607,2.720112,4.810701,-6.285813,-2.579138,-2.821007,-4.579949,-7.763614,0.858692,-7.637576,2.424048,6.879729,-8.191650,4.883975,7.572329,-4.273295,-6.032025,-5.039255,5.789256,9.898522,4.433979,-9.361518,8.978163,-1.455332,3.770469,9.960672,9.151227,4.749090,-8.342555,7.851161,-6.052250,-0.219885,-7.791488,-8.453389,6.329712,7.938299,9.847169,-0.210273,-5.072157,3.688692,6.777196,0.716034,4.430368,0.157417,4.142304,-8.093914,-7.936540,3.129603,0.572301,4.950847,7.321007,-6.575104,-4.958147,2.438274,7.198324,-2.643232,7.777296,6.337468,-6.399299,0.153479,-8.888041,-0.623502,-3.160785,3.152731,4.467401,8.199685,1.132777,-9.276927,-8.229440,1.788267,-7.226129,0.937737,2.149893,0.883302,9.460439,9.779583,-3.685976,-8.466557,5.725464,-6.032526,-0.614495,-5.695439,5.858988,8.200109,-9.410645,-7.196772,-7.269952,8.129548,-2.759223,-7.779138,6.291904], dtype = "float64")#candidate|1682|(330,)|const|float64
const_1683 = relay.const([10,-9,-6,-2,-8,-10,-2,7,-3,-7,9,-9,1,-7,-5,8,-6,2,2,10,4,4,-7,4,-7,6,-10,-4,9,7,-10,7,2,8,5,3,-8,-5,-1,4,9,2,6,-2,7,-9,4,5,-5,-7,10,10,-8,-4,6,-7,-9,6,-4,10,-8,8,-3,6,-5,10,5,-7,9,-4,-1,-3,9,-4,10,2,-3,1,-5,-7,2,-8,-9,3,-8,6,7,8,9,-7,-7,6,-1,-7,-6,9,-2,-6,-3,1,-6,-1,-6,-9,2,-3,-8,1,6,8,-10,9,-5,3,5,-9,10,-6,-10,1,-2,3,1,-9,-9,10,-5,1,7,-8,-7,3,-7,-6,-3,-9,9,-7,5,9,5,5,-2,8,2,2,-2,-9,-4,-6,-9,-4,-8,-1,6,-8,1,1,-10,5,-4,1,3,-5,-4,8,9,-4,-10,9,-4,9,10,1,6,2,-6,-5,3,-8,2,-10,7,-7,6,-4,-5,-6,-10,5,-4,7,-7,8,2,-7,-3,5,-3,-6,-10,-1,-3,8,-5,-1,-9,10,-1,-8,-6,9,-3,9,9,-7,6,-2,7,4,4,-3,-6,-8,3,3,-10,9,9,3,1,-6,10,-10,1,-10,-1,-5,8,-5,-1,8,-1,9,5,9,-2,5,-5,10,8,9,5,-6,1,-3,2,-4,-10,-4,-4,1,7,7,-10,8,-7,9,4,4,-9,-8,10,-3,-6,3,7,6,-9,-8,2,-9,4,2,3,3,-4,-10,-2,5,9,8,2,-2,6,2,-7,-6,8,8,5,3,2,-4,-8,4,4,5,-5,9,-8,-9,3,-5,5,-2,7,-10,3,-5,10,8,9,-2,-2,-6,-3,5,-2,6,-6,-8,6,-3,-1,-9,6,-4,3,-1,-10,-5,-4,8,-5,-5,-5,-5,10,-1,4,1,9,7,3,7,7,-6,-6,-6,1,1,2,-8,-2,5,-8,10,-2,-9,6,-8,-10,1,9,7,7,-7,-4,5,-3,-3,-5,-10,9,1,5,-8,4,-1,7,2,-5,-4,5,6,10,-10,-4,3,8,-1,-3,-10,-6,-9,-10,-8,-1,6,4,1,3,10,-2,1,6,4,8,-6,6,9,8,3,-2,3,-2,9,-8,1,1,-1,-1,-8,-1,-7,-2,5,6,7,-8,3,5,-3,10,-2,-5,9,9,9,2,7,2,3,-9,-5,9,6,9,-8,3,-9,-2,-6,-6,1,9,-3,1,9,4,-6,2,-8,1,-10,-5,-3,-9,-10,-4,-4,-10,-5,1,-8,8,10,7,-10,6,-3,1,8,6,7,-10,4,10,-8,3,-7,-1,10,-7,-6,-10,-3,-6,-3,10,4,-4,9,-8,-4,2,-2,8,-3,-2,-9,-10,5,5,2,-1,7,-7,-7,3,7,-3,-10,-1,-6,-4,7,-9,-1,2,2,-2,-9,5,-3,7,2,9,9,-7,-4,1,-4,-6,5,-10,1,5,-10,-6,-7,-1,1,4,-1,-8,-9,-6,1,10,10,-2,2,1,-10,-3,7,7,-5,1,-10,-10,-10,-4,8,9,-1,-9,10,5,4,-6,-3,3,6,5,-5,-6,3,9,3,-9,1,-9,7,-3,-1,4,-4,5,2,-7,-7,5,-5,3,-2,-2,2,4,-3,-2,5,-2,4,-10,-9,5,-2,-8,-5,-4,-5,8,6,-9,-8,-7,7,-4,5,9,-3,-2,7,1,-10,6,9,-5,5,-6,-2,-8,2,-2,-5,3,-7,10,-2,3,6,-9,5,-2,5,5,-2,-10,2,1,5,5,6,6,-8,10,-2,1,-3,8,-2,9,6,6,3,7,-1,10,8,5,-8,-2,-6,-6,5,-6,8,10,-7,2,-6,-8,1,-4,7,-5,-4,3,-9,8,-4,-2,2,-8,2,8,1,5,-5,1,10,-7,2,-4,-1,-4,9,-9,9,1,-9,9,7,10,-5,-4,-6,9,2,-8,8,-10,-9,7,8,7,-6,-5,-10,-7,-7,-10,-3,-10,2,8,1,6,-6,-8,-10,-2,-1,1,4,-8,8,-4,7,-8,4,-9,-3,-5,-8,5,-9,-6,6,4,5,2,10,-8,2,5,9,10,-9,-1,9,-4,-3,-9,-8,-2,6,8,-2,10,10,9,-9,1,4,-2,-10,-3,7,-5,-6,-7,10,8,-2,3,6,-3,-1,-3,-8,9,-1,2,-4,-2,1,5,-5,-3,-3,-8,8,-4,-6,5,-1,-4,9,-2,-1,5,4,-5,-5,5,-5,-5,-6,6,-5,6,7,10,-5,1,7,-2,-8,-1,5,10,-10,-7,-5,10,3,-6,5,-8,-8,-8,7,-5,7,9,-1,4,-6,-10,3,1,-6,-8,-4,-5,7,7,-3,10,-8,4,10,3,-10,-6,-2,8,-7,3,5,4,-9,-6,3,6,7,-1,9,-4,8,3,9,2,-8,-7,-10,4,10,-4,8,-4,-2,-3,-10,4,-6,-2,8,1,6,10,-9,-7,-6,1,3,-8,-10,-7,-7,2,8,8,-7,-2,9,1,6,-6,-1,6,-2,-10,-5,-7,-8,6,3,1,-5,5,7,-3,-5,5,5,9,-8,-2,-6,7,-7,9,7,2,-5,7,4,-4,8,-3,3,-10,1,-3,-8,10,-3,5,-10,-3,3,-6,-9,-6,-2,-10,2,-5,2,7,-10,5,-7,5,-7,-4,-10,9,-3,-8,3,9,8,8,5,9,-4,1,7,1,-6,-6,5,8,10,2,-4,9,-8,1,4,-1,6,-2,-9,7,-5,-4,8,-8,-7,-2,-3,4,-9,5,7,-4,9,4,-8,-5,-5,5,8,2,6,-8,-2,-10,-7,4,4,-7,-3,-1,3,6,-5,-1,-4,10,-4,9,-1,9,-6,2,-1,3,9,7,-9,1,-3,9,-5,5,9,7,3,-8,9,10,-6,-7,6,8,-8,1,1,-9,1,6,-10,-10,9,3,-7,-9,4,9,-10,5,-7,-9,8,-5,-2,3,-3,4,-10,-9,9,-1,4,3,6,-3,-6,-1,8,7,6,1,-2,3,-3,-10,-10,5,10,7,-10,9,3,-2,6,3,9,5,-1,5,9,-6,6,-3,3,-2,-2,-9,-1,-8,-10,2,6,-3,4,-3,-5,1,4,10,6,8,-5,5,-8,6,5,-9,5,-10,-2,-1,-3,2,8,3,-6,-4,-8,10,1,3,-3,-6,6,5,-6,7,-1,-7,1,-3,-10,9,-5,1,-4,-1,-9,-3,-1,-3,5,8,-6,-4,-4,-5,3,2,4,3,10,-3,1,3,4,-10,-3,4,-5,10,5,-4,1,6,1,-3,3,1,-10,5,8,3,-6,-5,-7,-10,10,1,-10,-9,6,4,-6,3,-7,1,4,9,5,10,-8,-4,-4,2,-2,9,-10,7,-5,-3,-9,-2,-2,-4,4,9,-6,-10,10,8,-2,-1,-7,-10,1,9,-2,2,1,-9,1,8,-2,2,2,-3,-7,7,-5,10,-4,3,-9,8,-2,-4,-6,4,3,-10,-6,-9,9,8,-5,-7,7,-5,-8,4,-3,-5,-3,8,7,-10,1,7,-5,2,-3,-9,1,-5,-8,-9,1,9,-6,-1,5,7,9,5,-1,6,-8,-4,-10,9,10,-8,-5,7,3,4,9,3,-7,4,5,-2,4,3,-5,-1,-2,7,5,9,-2,-8,-4,1,-9,-9,-6,7,-5,3,3,-4,-4,-2,-5,-10,4,9,9,1,-6,10,1,3,8,-5,-1,-5,2,-5,6,5,1,8,-6,8,9,-6,-5,-8,5,5,-4,1,10,4,-9,-8,5,-2,6,4,6,-8,1,8,-9,1,5,-1,8,-3,-4,-9,6,1,9,-9,-7,10,1,3,-2,5,-6,4,-2,3,5,-7,3,-5,3,-9,-9,8,6,-1,-6,6,3,-8,-7,2,-4,5,7,2,-3,2,-10,3,-2,6,1,9,-4,-8,1,4,-9,3,-10,7,5,-7,-10,3,-7,9,5,-3,-9,1,-2,-3,4,8,10,9,-7,-10,-9,10,-6,-5,8,-9,10,7,4,3,-8,4,-6,-5,9,9,-10,3,7,6,-7,-4,-4,-9,5,-6,2,-2,1,1,-3,-8,-1,-1,-3,8,4,9,5,6,-1,-2,2,-1,-3,5,-5,1,7,6,10,2,-8,-2,10,-4,10,-1,-1,-9,7,10,-8,9,6,-5,-1,-2,7,-3,-4,7,-4,8,3,10,1,3,5,-5,1,-9,9,3,-7,-3,5,5,-10,-7,-2,4,-8,-5,1,6,-1,6,8,6,-8,-8,-2,-4,-8,5,7,5,10,-10,9,-5,-3,-2,10,8,-8,-1,-1,-3,4,-1,9,8,-6,-10,-4,-7,6,10,7,4,-6,6,-9,-6,-8,6,3,-9,-2,-3,-6,3,-10,-7,-5,-4,5,-8,-10,-1,-3,8,-1,-4,7,-9,-10,4,9,8,-2,5,-4,-4,-1,-5,-2,-10,-1,5,-4,1,-9,5,-8,-2,-5,8,1,-6,-4,7,-5,8,3,-5,10,-10,-3,-10,8,-1,-10,4,10,-6,-2,-2,-1,-6,8,1,9,10,6,5,10,9,-5,-3,-7,-1,9,-10,6,5,7,-1,-7,10,-10,9,3,10,-5,4,10,-10,1,-1,6,-10,-4,-1,3,-6,8,-3,-5,10,-5,-3,2,-8,-3,-7,-9,-4,-9,3,6,-4,-5,9,9,-2,-6,1,-8,10,-2,-2,5,3,1,-5,-3,3,-6,-10,4,9,-6,-7,-1,-8,3,5,6,-3,4,-5,-6,7,-3,-7,8,6,-6,10,1,4,10,3,5,-4,-3,-6,-7,3,9,-8,3,4,-8,-9,-2,2,-2,9,-8,-6,10,-2,-8,-9,-2,-5,1,-6,-6,6,8,2,-1,-7,2,2,9,8,-8,4,4,-4,-1,-1,-5,-4,7,5,7,-8,7,-10,3,-6,7,-10,-1,5,5,10,-5,7,2,-9,-3,-7,-9,9,-7,3,-6,4,-9,1,4,-6,-8,10,-4,-1,8,-9,5,10,-4,-5,-8,-8,-5,-1,-2,10,1,-2,-9,-3,-8,-5,-2,-4,-8,7,-7,2,-5,3,-1,9,-2,-6,1,9,2,4,-1,-10,-9,-6,3,-10,-1,8,-5,2,8,-10,9,-10,-7,5,-5,6,6,-2,-10,-9,-7,-2,4,2,4,-2,-3,-4,-5,8,-7,-5,8,2,-10,-8,-10,1,-4,7,-5,1,-9,10,-7,5,-7,-7,-8,3,-1,-6,9,4,-10,-1,10,-7,-10,-5,9,1,10,9,8,-9,10,8,5,-5,3,-4,-2,1,9,-9,6,2,-7,-8,-2,-1,-4,-6,-1,8,8,8,-4,-2,-3,-1,8,-6,8,-9,1,-5,-9,6,1,-7,-7,-1,-1,3,-1,-4,-10,5,6,-8,-3,4,5,5,5,7,4,10,-8,-3,7,-9,10,5,-7,5,-10,-4,-8,-1,9,-4,7,-2,6,5,3,-2,-7,10,-2,3,-1,-6,-6,-3,-6,-9,2,-9,7,2,1,4,3,-3,-9,6,3,-1,1,-5,-3,-2,-6,-3,-9,4,1,8,-1,10,7,-10,-9], dtype = "uint16")#candidate|1683|(2100,)|const|uint16
call_1681 = relay.TupleGetItem(func_413_call(relay.reshape(const_1682.astype('float64'), [2, 11, 15]), relay.reshape(const_1683.astype('uint16'), [2100,]), ), 3)
call_1684 = relay.TupleGetItem(func_417_call(relay.reshape(const_1682.astype('float64'), [2, 11, 15]), relay.reshape(const_1683.astype('uint16'), [2100,]), ), 3)
uop_1687 = relay.log2(call_1670.astype('float32')) # shape=(3, 8, 8)
uop_1689 = relay.log2(call_1672.astype('float32')) # shape=(3, 8, 8)
func_591_call = mod.get_global_var('func_591')
func_594_call = mutated_mod.get_global_var('func_594')
call_1702 = relay.TupleGetItem(func_591_call(relay.reshape(uop_1687.astype('bool'), [3, 8, 8]), relay.reshape(uop_1687.astype('bool'), [3, 8, 8]), ), 0)
call_1703 = relay.TupleGetItem(func_594_call(relay.reshape(uop_1687.astype('bool'), [3, 8, 8]), relay.reshape(uop_1687.astype('bool'), [3, 8, 8]), ), 0)
func_591_call = mod.get_global_var('func_591')
func_594_call = mutated_mod.get_global_var('func_594')
call_1704 = relay.TupleGetItem(func_591_call(relay.reshape(call_1670.astype('bool'), [3, 8, 8]), relay.reshape(const_1671.astype('bool'), [3, 8, 8]), ), 0)
call_1705 = relay.TupleGetItem(func_594_call(relay.reshape(call_1670.astype('bool'), [3, 8, 8]), relay.reshape(const_1671.astype('bool'), [3, 8, 8]), ), 0)
func_716_call = mod.get_global_var('func_716')
func_719_call = mutated_mod.get_global_var('func_719')
const_1710 = relay.const([False,False,False,True,False,True,False,True,False,False,False,False,False,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,True,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,False,True,True,False,True,False,False,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,True,False,True,True,False,False,False,True,False,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,True,True,True,False,False,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,True,False,True,True,True,True,True,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,True,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,False,False,False,True,True,True,True,False,True,True,True,False,False,False,False,False,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,False,True,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,True,True,False,True,True,True,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,False,True,False,False,False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,False,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,False,True,True,True,True,True,False,True,True,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,True,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,True,False,False,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,True,True,True,True,True,False,False,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,True,True,False,True,False,False,True,True,True,True,False,False,True,True,True,False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,False,False,True,False,False,True,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,True,False,False,True,False,False,True,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,False,True,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,True,False,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,True,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,False,True,True,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,True,True,False,False,False,True,True,True,True,False,False,False,True,True,True,False,False,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True], dtype = "bool")#candidate|1710|(1365,)|const|bool
call_1709 = relay.TupleGetItem(func_716_call(relay.reshape(const_1710.astype('bool'), [13, 15, 7])), 2)
call_1711 = relay.TupleGetItem(func_719_call(relay.reshape(const_1710.astype('bool'), [13, 15, 7])), 2)
bop_1712 = relay.greater_equal(const_1710.astype('bool'), var_1663.astype('bool')) # shape=(1365,)
uop_1728 = relay.sqrt(uop_1687.astype('float64')) # shape=(3, 8, 8)
uop_1730 = relay.sqrt(uop_1689.astype('float64')) # shape=(3, 8, 8)
bop_1735 = relay.subtract(uop_1728.astype('float64'), relay.reshape(call_1702.astype('float64'), relay.shape_of(uop_1728))) # shape=(3, 8, 8)
bop_1738 = relay.subtract(uop_1730.astype('float64'), relay.reshape(call_1703.astype('float64'), relay.shape_of(uop_1730))) # shape=(3, 8, 8)
bop_1746 = relay.bitwise_xor(bop_1735.astype('uint16'), relay.reshape(call_1670.astype('uint16'), relay.shape_of(bop_1735))) # shape=(3, 8, 8)
bop_1749 = relay.bitwise_xor(bop_1738.astype('uint16'), relay.reshape(call_1672.astype('uint16'), relay.shape_of(bop_1738))) # shape=(3, 8, 8)
bop_1754 = relay.divide(uop_1728.astype('float64'), relay.reshape(call_1702.astype('float64'), relay.shape_of(uop_1728))) # shape=(3, 8, 8)
bop_1757 = relay.divide(uop_1730.astype('float64'), relay.reshape(call_1703.astype('float64'), relay.shape_of(uop_1730))) # shape=(3, 8, 8)
func_1507_call = mod.get_global_var('func_1507')
func_1510_call = mutated_mod.get_global_var('func_1510')
const_1761 = relay.const([1,-3,-4,-3,-4,7,6,7,-6,9,2,5,-10,-2,-9,2,-8,-2,-7,1,3,-1,-7,8,5,9,1,-9,-9,9,-8,10,8,-10,5,4,1,-5,-4,-10,-2,-6,5,4,-8,3,-6,2,3,6,-5,-5,8,3,-5,-10,-3,10,4,9,-8,8,5,9,3,-5,-8,5,10,-7,-10,-2,3,-9,7,-9,-2,1,8,-5,-7,-9,9,-10,-1,-4,6,-6,-1,8,-4,-4,-5,-6,-7,5,-3,9,-10,3,-8,4,4,-4,4,-2,10,-7,-3,7,-7,-3,7,-2,-3,-8,-1,-6,10,-9,-6,3,9,9,6,-3,8,-3,10,-2,10,5,-2,-8,4,9,10,-4,-5,-2,-10,-5,-1,-5,-6,5,9,-9,2,5,7,-6,7,8,4,2,7,4,8,10,-6,-1,-6,6,-10,-5,-5,3,-2,4,5,2,7,-1,-3,8,7,-4,2,2,-9,6,-10,7,-4,-10,1,10,-9,-3,-3,4,2,4,6,-3,-4,2,-10,6,2,-2,9,10,-2,-2,4,4,2,8,-3,-4,2,1,-4,5,-6,-8,-6,2,-1,-2,10,1,-5,9,-1,-4,-10,-4,-3,-2,-3,-3,9,10,2,7,9,4,-6,-1,10,10,2,6,-1,6,1,7,-9,-1,9,4,3,-2,-5,-6,10,-4,-9,10,1,6,-9,1,9,10,-8,-6,4,-2,10,-3,5,5,-10,-4,2,10,-4,-9,10,3,-4,1,-8,7,2,-10,-7,-10,9,5,-7,-3,7,6,-3,-7,7,-7,2,4,-5,-10,-9,-9,-6,2,-3,-4,10,8,-8,-2,-5,-1,4,1,-2,-4,-3,1,-1,-3,-9,5,-9,-3,-7,6,-4,1,4,9,-4,7,8,-7,3,3,10,-1,10,8,9,-1,2,-10,1,2,-4,3,9,1,3,-1,-4,4,6,-1,-7,-7,2,3,1,-1,4,-7,7,4,3,-2,10,1,7,3,6,-1,9,6,-1,5,2,-8,-1,8,8,5,4,-5,9,5,8,-6,1,-9,8,8,9,8,8,5,5,-5,-7,-10,-8,2,2,-5,7,-5,-1,6,1,-9,1,7,6,-5,-2,-9,-1,-6,-8,-5,-6,-1,-3,6,-10,-5,9,-5,5,7,-6,-10,7,7,7,-10,2,2,6,-1,1,7,1,-6,-3,-6,1,-5,1,4,6,3,-5,5,-10,-10,-4,2,1,4,5,5,5,6,4,4,-6,-7,-3,-2,9,-6,1,2,10,-7,3,10,-2,4,6,5,8,-3,-4,-3,-9,10,1,-3,6,-3,-2,9,-1,1,4,9,9,4,-9,8,8,-9,10,7,9,-6,-6,6,-1,-5,2,8,8,-7,-1,-6,-3,-7,4,-10,7,-6,5,8,-1,-3,-9,-4,-5,5,-6,-4,-5,-3,-4,-3,-10,-3,5,1,6,-6,-6,-3,3,-8,8,-9,2,1,-6,-8,5,1,5,-3,7,6,-4,-6,-7,-10,-8,-8,-3,-8,-3,-5,-8,-8,10,3,-5,-1,-10,-7,-3,3,-8,-2,8,-1,-6,1,5,-8,3,10,-10,6,-10,-8,4,4,2,4,-6,3,3,8,3,3,-7,3,-8,1,6,10,-1,-1,-10,5,1,-10,9,-2,-3,-8,2,2,-2,7,-4,-7,1,8,-4,9,-10,-10,6,3,9,-4,5,-10,-10,-7,3,-7,-6,8,-1,-5,-6,2,-7,1,-10,-8,10,-6,-6,-3,8,5,-9,4,-10,1,-4,-5,-1,8,1,6,5,-4,-4,-1,-8,-6,9,-9,9,-4,4,-3,-6,-4,-8,-10,4,-5,10,-3,-4,7,1,2,-5,-2,-6,2,5,-10,-8,-7,6,-3,1,7,4,-9,-10,-4,5,-4,8,-4,-3,7,7,-6,-9,-9,4,6,-2,3,-3,-6,3,-1,7,-6,-10,-4,1,7,-8,10,4,9,10,7,3,4,-7,-6,2,5,-9,8,8,1,6,5,7,8,-10,-1,-10,6,3,2,-8,-9], dtype = "int64")#candidate|1761|(768,)|const|int64
call_1760 = relay.TupleGetItem(func_1507_call(relay.reshape(const_1761.astype('int64'), [16, 4, 12]), relay.reshape(const_1761.astype('int64'), [16, 4, 12]), ), 0)
call_1762 = relay.TupleGetItem(func_1510_call(relay.reshape(const_1761.astype('int64'), [16, 4, 12]), relay.reshape(const_1761.astype('int64'), [16, 4, 12]), ), 0)
output = relay.Tuple([bop_1665,const_1671,call_1681,const_1682,const_1683,call_1704,call_1709,bop_1712,bop_1746,bop_1754,call_1760,const_1761,])
output2 = relay.Tuple([bop_1665,const_1671,call_1684,const_1682,const_1683,call_1705,call_1711,bop_1712,bop_1749,bop_1757,call_1762,const_1761,])
func_1773 = relay.Function([var_1663,], output)
mod['func_1773'] = func_1773
mod = relay.transform.InferType()(mod)
var_1774 = relay.var("var_1774", dtype = "int8", shape = ())#candidate|1774|()|var|int8
output = func_1773(var_1774)
func_1775 = relay.Function([var_1774], output)
mutated_mod['func_1775'] = func_1775
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1833 = relay.const([[[True,True,False,True,True],[False,False,True,True,True],[False,False,True,True,False],[True,False,True,False,False],[False,True,True,True,False],[True,False,True,False,False],[True,True,True,True,True],[False,True,True,True,False],[False,False,False,False,True],[True,True,True,False,True],[True,False,True,False,True],[True,False,True,False,False],[True,True,True,False,True]],[[False,False,False,False,False],[True,False,False,True,False],[True,False,False,True,False],[True,False,True,False,True],[False,False,True,False,False],[True,True,False,False,False],[True,True,False,True,True],[False,False,True,False,False],[False,False,False,False,True],[True,True,True,False,False],[False,False,False,True,False],[False,False,False,False,True],[False,True,False,False,True]],[[True,True,True,False,True],[True,False,True,False,False],[False,True,False,False,True],[False,False,True,False,False],[False,False,False,False,True],[True,False,False,True,False],[True,False,True,True,True],[True,False,True,False,False],[False,True,True,False,True],[False,False,True,False,False],[True,False,False,False,False],[True,True,False,False,True],[False,True,True,False,False]]], dtype = "bool")#candidate|1833|(3, 13, 5)|const|bool
const_1834 = relay.const([[[True,True,False,True,True],[False,False,True,False,True],[True,False,True,True,False],[False,True,False,False,True],[False,False,True,False,True],[False,True,False,False,False],[True,True,True,True,False],[False,True,True,True,True],[False,True,True,True,False],[True,False,False,True,False],[True,True,False,True,True],[True,True,True,False,True],[True,True,False,False,False]],[[False,False,True,True,False],[False,False,True,True,True],[True,False,True,True,True],[False,True,True,False,False],[False,False,True,True,False],[False,False,True,False,False],[True,False,True,False,False],[True,False,False,False,True],[True,True,True,True,True],[False,True,False,True,True],[False,False,True,True,True],[True,True,False,False,True],[False,True,True,True,True]],[[True,False,True,True,False],[False,True,False,True,False],[True,False,True,True,True],[False,True,True,False,False],[True,True,True,True,False],[False,True,True,True,True],[True,True,True,False,False],[False,True,True,False,False],[True,True,False,False,False],[False,True,True,True,True],[True,False,False,False,True],[False,False,True,False,True],[False,True,False,True,True]]], dtype = "bool")#candidate|1834|(3, 13, 5)|const|bool
bop_1835 = relay.logical_or(const_1833.astype('bool'), relay.reshape(const_1834.astype('bool'), relay.shape_of(const_1833))) # shape=(3, 13, 5)
output = relay.Tuple([bop_1835,])
output2 = relay.Tuple([bop_1835,])
func_1839 = relay.Function([], output)
mod['func_1839'] = func_1839
mod = relay.transform.InferType()(mod)
mutated_mod['func_1839'] = func_1839
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1839_call = mutated_mod.get_global_var('func_1839')
call_1840 = func_1839_call()
output = call_1840
func_1841 = relay.Function([], output)
mutated_mod['func_1841'] = func_1841
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1839_call = mod.get_global_var('func_1839')
func_1841_call = mutated_mod.get_global_var('func_1841')
call_1849 = relay.TupleGetItem(func_1839_call(), 0)
call_1850 = relay.TupleGetItem(func_1841_call(), 0)
func_413_call = mod.get_global_var('func_413')
func_417_call = mutated_mod.get_global_var('func_417')
var_1881 = relay.var("var_1881", dtype = "float64", shape = (330,))#candidate|1881|(330,)|var|float64
var_1882 = relay.var("var_1882", dtype = "uint16", shape = (2100,))#candidate|1882|(2100,)|var|uint16
call_1880 = relay.TupleGetItem(func_413_call(relay.reshape(var_1881.astype('float64'), [2, 11, 15]), relay.reshape(var_1882.astype('uint16'), [2100,]), ), 0)
call_1883 = relay.TupleGetItem(func_417_call(relay.reshape(var_1881.astype('float64'), [2, 11, 15]), relay.reshape(var_1882.astype('uint16'), [2100,]), ), 0)
output = relay.Tuple([call_1849,call_1880,var_1881,var_1882,])
output2 = relay.Tuple([call_1850,call_1883,var_1881,var_1882,])
func_1893 = relay.Function([var_1881,var_1882,], output)
mod['func_1893'] = func_1893
mod = relay.transform.InferType()(mod)
var_1894 = relay.var("var_1894", dtype = "float64", shape = (330,))#candidate|1894|(330,)|var|float64
var_1895 = relay.var("var_1895", dtype = "uint16", shape = (2100,))#candidate|1895|(2100,)|var|uint16
output = func_1893(var_1894,var_1895,)
func_1896 = relay.Function([var_1894,var_1895,], output)
mutated_mod['func_1896'] = func_1896
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1839_call = mod.get_global_var('func_1839')
func_1841_call = mutated_mod.get_global_var('func_1841')
call_1941 = relay.TupleGetItem(func_1839_call(), 0)
call_1942 = relay.TupleGetItem(func_1841_call(), 0)
var_1943 = relay.var("var_1943", dtype = "bool", shape = (3, 13, 5))#candidate|1943|(3, 13, 5)|var|bool
bop_1944 = relay.logical_xor(call_1941.astype('uint8'), relay.reshape(var_1943.astype('uint8'), relay.shape_of(call_1941))) # shape=(3, 13, 5)
bop_1947 = relay.logical_xor(call_1942.astype('uint8'), relay.reshape(var_1943.astype('uint8'), relay.shape_of(call_1942))) # shape=(3, 13, 5)
var_1952 = relay.var("var_1952", dtype = "bool", shape = (3, 13, 5))#candidate|1952|(3, 13, 5)|var|bool
bop_1953 = relay.left_shift(call_1941.astype('uint64'), relay.reshape(var_1952.astype('uint64'), relay.shape_of(call_1941))) # shape=(3, 13, 5)
bop_1956 = relay.left_shift(call_1942.astype('uint64'), relay.reshape(var_1952.astype('uint64'), relay.shape_of(call_1942))) # shape=(3, 13, 5)
uop_1957 = relay.asin(bop_1953.astype('float32')) # shape=(3, 13, 5)
uop_1959 = relay.asin(bop_1956.astype('float32')) # shape=(3, 13, 5)
func_716_call = mod.get_global_var('func_716')
func_719_call = mutated_mod.get_global_var('func_719')
var_1970 = relay.var("var_1970", dtype = "bool", shape = (1365,))#candidate|1970|(1365,)|var|bool
call_1969 = relay.TupleGetItem(func_716_call(relay.reshape(var_1970.astype('bool'), [13, 15, 7])), 0)
call_1971 = relay.TupleGetItem(func_719_call(relay.reshape(var_1970.astype('bool'), [13, 15, 7])), 0)
func_1507_call = mod.get_global_var('func_1507')
func_1510_call = mutated_mod.get_global_var('func_1510')
const_1976 = relay.const([[10,-4,6,-9],[-9,10,2,2],[-8,5,9,-1],[-1,10,2,-5],[-9,-3,10,-10],[10,2,-3,-9],[-7,2,-2,-5],[-6,9,4,2],[-2,8,7,-10],[7,9,10,2],[2,-3,9,-9],[2,-2,-1,-10],[9,4,8,-3],[10,7,-7,7],[-5,6,-10,-10],[3,1,-6,9],[-10,1,9,-5],[5,-6,10,-4],[4,10,4,-6],[-10,5,9,3],[-6,-9,8,3],[3,6,3,-8],[-9,-10,-6,4],[-5,-4,-4,4],[-3,7,7,7],[-9,3,2,-8],[-2,7,-7,6],[9,-8,8,3],[7,5,9,-3],[-4,2,-10,10],[-1,1,-8,-1],[8,-2,-5,10],[-6,-5,-8,5],[7,-1,-8,-10],[-7,-8,-8,6],[10,6,4,7],[-2,6,3,3],[1,-6,4,7],[-6,8,5,2],[1,-3,6,4],[-4,-10,-4,-6],[7,-3,9,4],[-6,-1,-4,8],[-3,-10,-1,-8],[9,-2,1,9],[10,-2,-3,-4],[7,-1,8,-8],[-10,-9,7,6],[5,8,-7,-7],[8,-8,6,-1],[7,5,1,6],[6,-2,5,6],[9,-8,-10,3],[-4,10,-3,2],[2,5,3,-5],[-1,1,-9,5],[-2,2,10,9],[-6,-4,9,-9],[5,4,-9,8],[-8,-5,-5,-2],[-5,-8,-2,9],[-7,9,10,5],[-5,-5,8,2],[2,4,8,-8],[-2,8,-5,-4],[-3,-6,-2,-10],[2,9,9,-7],[-1,-2,-6,-3],[-7,2,1,4],[-8,7,-3,-9],[2,-6,-1,6],[3,2,8,-10],[8,9,-8,3],[5,-10,-7,-5],[6,2,6,1],[5,1,-9,-10],[-4,8,6,-10],[3,1,-8,9],[-10,1,-6,-5],[6,-4,-6,-3],[5,-4,5,4],[-5,-8,-3,-7],[7,-9,2,3],[10,4,4,-8],[-1,2,6,5],[-10,4,-9,6],[-9,-10,9,-9],[-3,-6,-10,-9],[-7,-8,6,-4],[-6,2,9,3],[3,9,9,10],[10,-10,-10,-3],[10,10,7,-4],[4,8,4,-9],[7,8,5,9],[-3,8,-7,-10],[4,-5,-6,4],[7,-1,-7,9],[-10,9,4,-3],[-6,10,-1,2],[-2,8,10,-8],[-8,-9,3,7],[6,9,4,8],[-2,-3,1,-10],[-2,3,-4,8],[-1,-5,4,8],[-9,-1,6,3],[8,-10,-9,3],[3,-5,6,9],[10,-2,7,6],[6,1,7,-9],[-9,-5,3,2],[-2,3,2,-7],[-5,9,-8,9],[2,-5,3,-5],[7,3,-8,4],[-3,1,-8,-8],[-7,6,-1,1],[-5,4,4,-2],[-1,-9,-9,-2],[1,-8,10,-3],[-2,-4,3,8],[-6,8,2,-9],[5,4,10,-6],[7,-1,9,-8],[2,-4,9,-5],[-2,3,2,-9],[-9,-3,-8,1],[5,6,5,-5],[-6,-3,8,-2],[-10,-8,-8,-1],[1,7,5,9],[-9,3,9,-2],[-6,-3,-1,-7],[-9,-5,-6,-5],[2,-8,-7,8],[4,-1,-9,1],[8,-2,-9,1],[-5,-5,5,-8],[2,-6,5,-7],[5,-5,1,-10],[9,7,2,-4],[-4,-8,10,6],[3,1,5,-8],[-5,5,-8,2],[-8,3,-7,-4],[9,10,9,-1],[7,10,-1,-10],[-3,10,-1,-9],[3,6,-3,1],[-4,1,-8,-4],[8,6,-4,4],[3,-1,8,3],[5,1,2,10],[-4,7,-5,8],[-7,-3,-3,10],[-10,-10,2,10],[-5,-5,-5,-10],[6,-3,-10,-4],[-5,10,3,4],[3,-4,9,4],[4,-10,-4,8],[-10,1,-1,-9],[-4,-4,2,-2],[4,-2,7,9],[-5,8,1,-9],[6,3,5,-4],[4,5,8,1],[-3,-6,-8,2],[6,-5,8,8],[-2,-1,-4,7],[5,-1,1,-2],[6,-5,-5,-10],[-8,7,-6,10],[-7,-6,-8,-8],[7,5,-3,4],[-6,-4,5,9],[-8,1,-3,-4],[4,1,5,4],[-1,1,5,-3],[-4,2,-2,5],[9,-4,7,-1],[7,2,3,3],[-4,-8,-10,9],[-10,5,4,-4],[6,-3,5,3],[-8,-6,-2,5],[-5,-6,-3,-9],[8,9,-4,2],[10,-4,-1,-10],[3,-10,-5,10],[7,5,10,7]], dtype = "int64")#candidate|1976|(192, 4)|const|int64
call_1975 = relay.TupleGetItem(func_1507_call(relay.reshape(const_1976.astype('int64'), [16, 4, 12]), relay.reshape(const_1976.astype('int64'), [16, 4, 12]), ), 0)
call_1977 = relay.TupleGetItem(func_1510_call(relay.reshape(const_1976.astype('int64'), [16, 4, 12]), relay.reshape(const_1976.astype('int64'), [16, 4, 12]), ), 0)
uop_1978 = relay.log(uop_1957.astype('float64')) # shape=(3, 13, 5)
uop_1980 = relay.log(uop_1959.astype('float64')) # shape=(3, 13, 5)
func_1893_call = mod.get_global_var('func_1893')
func_1896_call = mutated_mod.get_global_var('func_1896')
var_1985 = relay.var("var_1985", dtype = "float64", shape = (330,))#candidate|1985|(330,)|var|float64
const_1986 = relay.const([[-5,7,-1,8,-4,-5,1,-4,9,-7,-10,6,-3,5,-3,4,-3,8,2,3,3,4,2,-10,-10,6,3,-1,7,2,6,7,-9,-3,-3,6,8,9,8,1,-8,9,8,-8,8,4,5,5,-8,-4,7,-8,10,5,9,-7,2,10,7,-9,-7,-9,6,-8,-2,-7,2,6,-3,1,8,10,-5,-1,8,5,3,-8,8,5,-8,-1,-8,-4,9,-6,5,-6,-6,-3,7,8,4,10,1,1,10,10,10,-10,1,-3,-1,9,6,-2,1,-4,7,6,1,-7,-1,8,3,8,3,-10,-10,2,10,8,3,6,-8,-7,-2,-10,1,4,-6,-6,4,3,-5,-2,8,-8,-4,2,9,-2,2,-3,8,7,-10,2,10,-9,-10,-2,1,-9,6,-8,9,-7,-2,5,8,5,-6,-3,2,-5,-5,1,9,-2,1,10,-1,-4,9,-4,-3,6,-6,10,-3,2,-2,-5,-3,7,-8,-8,6,-4,1,-2,5,-6,9,10,-10,9,5,6,10,4,10,8,1,-9,-8,-9,-8,-7,-2,8,-9,-8,10,4,5,9,9,-1,7,-5,10,-9,2,5,3,7,-10,-8,-7,2,10,7,-9,10,-8,-3,10,9,8,-7,5,4,-9,6,5,-9,-9,4,7,-2,-8,7,6,1,8,-6,-2,-10,3,8,-4,-2,-7,9,-10,-1,7,-8,4,9,-7,-6,-5,1,-2,7,8,-7,8,9,8,-8,-9,-7,6,-4,-3,2,-7,-8,-2,5,6,4,-7,-4,4,9,8,4,-4,-5,-1,4,9,-10,-7,-2,-6,-9,-1,9,4,-9,-6,4,-5,6,7,-5,4,-9,10,-5,8,-1,-8,-6,-8,3,-10,-3,-8,-1,1,-1,-3,7,2,10,-8,10,-1,8,-1,-3,-10,4,-7,2,2,4,-4,9,-5,-5,-9,-8,-1,-10,-9,-1,-9,-6,-1,4,-4,9,9,3,6,-6,-4,5,-3,6,-6,-1,-6,-1,5,-2,-4,-6,-8,7,-8,-9,7,8,9,-4,-2,9,-1,-7,-6,7,10,2,-4,-4,-2,-7,-8,-1,-10,9,-9,2,-9,-8,7,-4,1,-5,-5,-1,3,-7,4,6,-2,-8,5,3,-8,-10,6,-2,-4,-4,-7,7,5,-10,2,5,-3,7,4,4,10,-6,10,5,-6,-4,-8,-2,-2,1,10,-10,-10,1,-6,5,10,4,9,5,-2,8,-7,2,7,-5,-9,10,-3,-3,-9,-7,-10,-1,2,-6,-5,6,-9,3,-2,-2,5,-2,4,-7,4,2,-7,-2,-8,-5,5,5,10,7,-6,4,-1,-10,-2,8,3,7,-2,8,9,1,7,-7,3,8,3,1,-8,8,1,5,7,-1,3,9,5,8,-5,8,9,9,9,5,-2,9,-1,5,-8,-7,8,-5,-5,4,5,9,-9,5,8,-9,-5,4,-3,-5,9,-2,-7,1,-7,3,-8,-8,-3,-7,3,3,-4,-5,8,-8,10,-6,-4,-1,4,6,10,-1,7,4,-5,9,6,8,1,-10,5,-2,-5,-1,8,-2,-9,3,-4,7,6,1,-7,-5,-5,1,-3,9,5,8,7,-6,-5,-4,6,10,-7,-3,2,-5,2,-6,-9,2,7,1,-2,-10,-4,9,8,-3,2,9,1,-2,-10,-6,5,4,10,6,2,10,-2,7,8,-5,3,8,-8,7,-1,8,4,10,9,7,-3,7,-8,7,4,8,-8,3,9,5,-4,-7,-8,10,4,9,6,5,2,-10,6,6,-6,-1,9,-6,10,9,2,-5,9,-6,-4,9,-4,6,10,-3,1,3,9,-4,3,-9,7,3,-2,2,-3,3,3,9,-9,10,-8,3,2,-10,-3,4,-5,-5,-8,-10,-10,-2,2,4,6,5,-9,-3,6,-10,2,-8,-10,3,-9,-1,-8,2,4,1,-2,-4,-5,-3,-2,-1,-4,-3,-3,2,-9,-3,-6,5,10,10,2,-4,4,-9,10,-3,2,-9,-10,9,6,4,-6,1,-7,-10,6,-8,-1,7,1,-6,-5,8,-5,-5,-8,4,10,-9,-6,-5,-1,5,2,-3,-3,5,-1,-5,9,-1,1,-8,9,-7,6,-9,9,-9,5,5,9,6,-3,10,1,7,-5,2,-2,-10,4,-5,3,-5,6,-6,10,-8,-3,4,-10,-7,-8,10,9,-8,1,-8,-9,-5,-1,-1,5,5,-8,3,10,4,10,-7,7,-3,-9,7,2,-5,4,-5,5,-8,-8,2,2,5,-3,-10,8,-1,2,6,-9,-8,-7,2,4,-7,-1,-8,9,3,-6,2,-6,-10,10,-6,-7,2,9,5,3,4,3,9,7,-1,6,-4,8,-3,-10,-9,-3,-10,-6,8,7,7,5,-9,7,5,7,8,-3,-4,-9,-9,-6,9,-4,-3,-8,-10,-4,5,-2,7,-10,-3,-7,6,-1,-10,-6,7,5,-10,8,-8,-10,6,-3,-1,9,6,2,3,10,8,-4,5,-5,-4,4,7,-5,8,-9,3,-3,-5,-4,8,-2,8,-1,5,8,1,9,10,5,4,-6,-2,-7,-6,3,-4,8,1,7,-7,3,-8,8,-8,3,4,10,-10,3,7,8,5,3,7,-1,-4,-2,9,-8,2,-1,-3,-4,-6,-9,-5,4,4,5,9,8,10,-6,2,6,-7,10,-7,-7,1,8,4,7,3,-1,-8,6,3,-9,-5,-8,-3,6,-5,5,-8,4,-6,2,-5,-10,4,-4,-7,1,-7,6,-1,10,-7,2,7,-7,-8,-2,2,9,7,4,-6,8,5,-3,-8,2,9,1,9,9,-7,-4,3,6,7,-6,4,-4,9,7,4,3,3,-9,3,2,9,8,9,3,-3,-7,-4,8,-2,-3,4,8,-1,2,5,2,1,-7,6,-6,-9,-8,8,6,-2,-4,4,-4,1,9,-9,1,2,10,-7,7,-1,-9,-2,7,-2,10,7,1,9,5,10,10,5,10,-8,8,-3,-8,-9,-10,-8,-9,4,4,-1,-5,-6,-4,5,-10,2,-2,-4,3,7,-6,-2,1,-6,-1,-1,-9,1,7,7,9,-7,6,3,-3,-1,-5,-6,10,1,-9,10,-1,-9,-9,6,-6,10,2,-9,6,-6,4,-7,-3,8,3,10,-10,-10,5,-6,-9,-1,2,8,2,8,7,8,6,-2,5,10,-10,4,-8,-6,-9,-8,9,-8,3,4,-3,-9,-10,7,4,-1,-10,10,5,5,-3,4,10,-2,10,-2,-10,-4,-4,8,-10,2,3,-8,-8,-10,-5,-4,8,7,-1,3,-1,-4,7,5,-10,-7,-3,-9,5,3,-8,6,-2,-6,-3,-4,7,1,9,-3,-7,10,-5,-10,-2,2,-9,-6,1,-3,10,-9,5,-2,10,-3,-6,-6,2,1,10,-4,2,-9,1,-7,1,-7,-8,1,4,4,7,-1,7,-4,5,-5,5,10,-9,-8,-5,-5,6,10,1,10,-5,6,-2,8,-8,6,10,-1,5,7,4,10,1,-10,5,8,-10,1,-7,-1,3,-10,5,1,-1,-7,-2,5,-8,-4,4,4,-8,-5,-5,10,6,-2,1,9,2,7,5,-5,-4,10,3,-1,9,8,4,4,9,-1,9,-4,-9,5,10,9,-1,3,2,-6,10,7,-3,-6,-8,3,-8,-10,-8,1,7,4,-8,5,-9,-3,5,2,2,10,-4,7,2,9,4,-7,-1,-10,-8,-10,-6,-7,-2,10,-9,-4,-5,-7,10,-6,7,7,6,8,4,2,-1,-4,-8,-9,-5,9,7,9,-3,4,-10,-1,-10,-2,-7,4,-1,-4,-3,5,-7,-1,2,4,7,-9,-8,-5,9,3,-10,-5,7,10,-4,9,-1,8,10,-1,9,-4,-8,5,4,3,-7,5,-10,4,-9,-5,-1,4,-6,-8,2,-4,-1,-6,-9,9,9,-7,-8,-3,4,-7,-3,-8,-3,6,8,-6,8,-6,-2,2,10,10,-10,6,3,9,-4,6,3,5,-1,4,4,8,-6,9,10,7,4,-6,-7,-4,-1,-10,-4,8,5,-7,-2,7,5,-8,-7,9,-8,-10,-7,8,7,-4,3,6,-4,9,8,-7,-1,-2,-8,10,3,3,-6,-9,6,-4,5,-9,3,-6,1,5,-6,10,7,2,-2,1,-5,-1,-6,-10,-4,-2,6,-9,-1,10,-3,-3,-10,2,1,10,-8,7,-7,-6,7,-10,-6,-9,-5,-4,9,9,-4,3,-8,1,5,9,6,-3,-1,-5,1,-4,5,5,5,5,-6,-5,3,-10,8,10,-5,9,7,-5,-10,-7,4,10,5,-9,4,-7,3,-7,7,5,2,7,7,-2,-10,-3,8,-6,-9,-5,-10,-1,-8,-2,-6,6,-8,-1,-9,-2,-9,-3,-8,-9,-3,-3,-7,-4,5,-1,-2,10,3,4,2,1,1,-10,5,10,-6,-1,-9,7,2,4,-6,-3,-6,1,5,1,5,8,1,-8,-3,9,5,-6,5,-10,-6,9,1,2,-1,-3,6,-8,1,3,4,-6,9,3,-5,4,7,-3,-3,-8,10,3,-3,3,7,-8,10,-10,-7,1,-8,-3,-8,7,3,-8,-7,9,3,3,-7,-1,-4,-6,-3,-1,1,8,-10,3,-10,-6,-3,6,8,6,-8,-4,9,3,8,5,-10,1,9,5,4,-6,-8,-2,2,2,8,-4,8,9,1,-5,6,-1,9,-4,-7,9,3,-2,3,6,-1,-8,-8,-5,8,10,-6,-1,-8,10,-5,3,-2,4,-2,-9,-3,-2,-4,1,-8,8,-3,9,-3,-7,9,8,-6,9,7,10,6,2,-10,-4,4,-2,-2,-6,-1,-5,4,2,-10,-5,10,6,9,6,10,8,3,-9,-3,9,-10,4,10,2,-8,4,4,4,9,-3,-9,1,4,-6,-6,3,-9,-8,5,-8,6,-3,-3,4,-6,-1,1,-6,3,-2,-6,3,-3,6,-10,5,8,6,4,5,10,-6,1,8,5,-3,6,-10,-8,9,1,-3,1,-2,3,4,5,-6,5,8,-3,-2,-8,8,-7,3,-10,-8,-8,-5,-6,-6,-2,-7,6,4,8,-8,8,-4,4,4,-8,6,-3,-6,-1,-1,-5,-7,-4,10,-9,-10,-6,-4,6,4,-4,-7,-1,-7,-7,5,-7,-5,-5,2,-3,3,-9,-10,8,-8,-4,7,-9,-8,-5,2,-5,-2,10,-4,-8,-4,7,3,-6,6,-7,-5,-9,5,-6,-5,-2,9,3,-8,-4,10,-4,5,-6,-2,-5,-9,10,10,1,-6,2,-8,1,-6,6,-8,-2,2,5,-1,1,-9,-6,-8,4,-3,-9,3,-4,-7,-6,-1,-8,-8,-7,5,1,-10,3,-7,1,-5,-10,2,-7,4,-6,4,10,-8,3,6,9,4,-5,9,10,8,-2,3,1,-5,-4,10,-2,-2,4,-10,3,3,4,4,7,3,-2,9,4,8,-4,4,9,-1,-2,-3,3,-3,-1,-1,6,-8,-10,2,2,6,8,-1,3,-9,-5,2,-10,4,-1,-10,1,-7,-4,7,-7,-3]], dtype = "uint16")#candidate|1986|(1, 2100)|const|uint16
call_1984 = relay.TupleGetItem(func_1893_call(relay.reshape(var_1985.astype('float64'), [330,]), relay.reshape(const_1986.astype('uint16'), [2100,]), ), 2)
call_1987 = relay.TupleGetItem(func_1896_call(relay.reshape(var_1985.astype('float64'), [330,]), relay.reshape(const_1986.astype('uint16'), [2100,]), ), 2)
output = relay.Tuple([bop_1944,call_1969,var_1970,call_1975,const_1976,uop_1978,call_1984,var_1985,const_1986,])
output2 = relay.Tuple([bop_1947,call_1971,var_1970,call_1977,const_1976,uop_1980,call_1987,var_1985,const_1986,])
func_1993 = relay.Function([var_1943,var_1952,var_1970,var_1985,], output)
mod['func_1993'] = func_1993
mod = relay.transform.InferType()(mod)
mutated_mod['func_1993'] = func_1993
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1993_call = mutated_mod.get_global_var('func_1993')
var_1995 = relay.var("var_1995", dtype = "bool", shape = (3, 13, 5))#candidate|1995|(3, 13, 5)|var|bool
var_1996 = relay.var("var_1996", dtype = "bool", shape = (3, 13, 5))#candidate|1996|(3, 13, 5)|var|bool
var_1997 = relay.var("var_1997", dtype = "bool", shape = (1365,))#candidate|1997|(1365,)|var|bool
var_1998 = relay.var("var_1998", dtype = "float64", shape = (330,))#candidate|1998|(330,)|var|float64
call_1994 = func_1993_call(var_1995,var_1996,var_1997,var_1998,)
output = call_1994
func_1999 = relay.Function([var_1995,var_1996,var_1997,var_1998,], output)
mutated_mod['func_1999'] = func_1999
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1839_call = mod.get_global_var('func_1839')
func_1841_call = mutated_mod.get_global_var('func_1841')
call_2001 = relay.TupleGetItem(func_1839_call(), 0)
call_2002 = relay.TupleGetItem(func_1841_call(), 0)
func_716_call = mod.get_global_var('func_716')
func_719_call = mutated_mod.get_global_var('func_719')
const_2004 = relay.const([False,True,False,True,True,True,False,True,False,False,False,False,False,True,True,True,True,False,True,True,False,True,True,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,True,True,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,True,False,False,True,False,False,False,False,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,True,False,False,True,False,False,False,False,True,False,True,True,True,False,True,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,True,False,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,False,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,False,True,False,False,False,False,False,False,False,True,False,True,True,True,True,True,False,True,True,True,True,False,False,True,False,False,True,False,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,True,False,True,True,False,False,True,True,False,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,True,False,True,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,False,True,True,True,True,False,False,True,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,False,True,True,True,True,True,True,False,True,True,False,True,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,True,False,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,True,False,True,True,False,False,True,True,False,True,False,True,True,True,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,False,True,False,True,True,True,False,True,False,False,True,True,False,False,True,True,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,True,True,False,True,False,False,True,True,False,True,True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,True,False,True,False,False,False,True,False,True,False,True,True,True,False,False,False,True,False,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False], dtype = "bool")#candidate|2004|(1365,)|const|bool
call_2003 = relay.TupleGetItem(func_716_call(relay.reshape(const_2004.astype('bool'), [13, 15, 7])), 3)
call_2005 = relay.TupleGetItem(func_719_call(relay.reshape(const_2004.astype('bool'), [13, 15, 7])), 3)
func_1309_call = mod.get_global_var('func_1309')
func_1312_call = mutated_mod.get_global_var('func_1312')
const_2013 = relay.const([-4.457264,1.274273,-8.714632,-4.955247,6.801254,-4.092315,-0.538383,4.399823,3.890147,1.928226,0.369361,-0.476851,-9.246040,-3.947843,-5.177072,-4.552879,2.404392,-0.886052,-2.325137,-6.928889,-7.377753,-2.583146,7.512308,-3.688296,1.557203,-1.844695,-4.989883,-0.144428,8.165800,-2.022709,-1.752979,-2.506422,3.546522,0.391867,6.162735,7.757630,-3.849891,4.665482,1.795391,-6.281303,6.079998,-3.016937,-4.702976,-8.259586,5.279060,0.361721,3.340124,8.538764,-1.843956,-1.367609,-5.043837,-5.545009,8.697307,1.604920,4.613469,8.945124,-1.570410,-5.049084,6.887448,-3.856022,-3.418885,-8.083274,3.639709,-3.124849,-8.051848,-7.199534,-2.938530,9.089622,-5.980998,2.176036,1.367953,-5.699145,-6.891678,-9.723485,9.025873,-1.070241,-1.018849,3.356308,1.006880,6.671217,-1.873744,-0.894323,-5.453813,-4.802754,-1.709217,-2.717558,-4.081897,-1.528373,-9.511458,-3.560697,2.462794,4.668495,5.374057,-0.391561,-5.493951,-3.519001,8.088774,5.890951,1.608494,-6.100948,8.630844,7.310053,3.042395,-0.385828,-0.958101,7.728252,-9.433459,0.239243,7.519635,-1.555598,9.750588,-2.915246,8.786230,9.052164,2.159179,1.740471,-0.130679,-8.013687,-5.536417,0.768952,-1.377844,-2.431458,0.569455,-6.770822,5.436032,-1.966339,-3.176269,6.310049,1.610549,-8.853869,-8.175524,4.468578,-8.864441,-6.035681,4.801920,4.824028,-9.572858,-7.377420,4.682526,-3.135917,8.437444,0.508590,9.291587,6.084447,4.658128,5.158335,2.358834,1.059401,3.234829,-6.201533,4.736547,-6.689455,-5.312105,-1.747887,4.097194,-9.725160,9.365083,-2.600429,6.552917,3.118829,4.326087,-2.877089,-1.113032,-2.381433,-1.876343,-5.436244,-7.340876,0.556644,5.360950,-9.905321,1.757718,2.309761,9.877981,4.679137,6.514988,0.313685,-9.018281,-6.451460,4.442914,-3.490044,3.811565,-5.612362,4.866895,-6.603715,0.384141,3.457351,-8.680113,9.160045,2.603222,-3.957016,-9.441220,4.195957,1.354435,0.103041,9.046164,-2.965550,-1.975764,-8.892242,0.534704,-1.906434,-0.528965,9.917632,-5.824302,-7.818554,2.698450,-6.624453,-4.377029,-5.885839,4.492833,9.595289,7.734540,-1.181721,-2.741231,8.737803,0.164465,-9.026771,-0.791090,-5.866684,-7.319558,-1.608531,8.105000,8.405462,-8.479560,-9.622165,5.464035,-8.729547,1.245941,-2.200507,-3.777930,5.922815,5.568104,6.021097,4.253855,-0.419083,-4.607196,-9.019130,-2.777227,2.191011,2.829912,-7.121115,9.326335,-0.459189,5.323747,-3.811086,-4.460693,-2.119389,4.020970,3.572662,3.651526,3.371577,-2.775743,-2.452123,9.966041,-6.826418,6.512561,-9.262364,0.202627,3.399140,7.711410,-7.992408,-8.642175,-7.893253,-7.570499,-4.377481,1.594140,0.166470,4.436255,-9.218009,-7.339495,-3.506467,-7.788391,-0.507213,0.856862,-0.240151,-5.924515,-8.472614,7.547967,-2.722187,1.557319,-8.200859,-9.945889,-5.733771,4.830918,8.210703,1.803558,4.338369,-3.009369,-8.021744,2.931816,-0.812997,7.875211,-8.588843,0.559497,6.906500,-5.419303,-9.810569,6.994711,-0.093375,7.389783,-8.939200,3.800788,-3.525466,-1.256274,4.225220,-3.510904,9.554906,5.112919,-9.074130,-1.788834,1.166692,2.214313,-6.750359,-4.737574,7.935733,-9.658807,1.322636,0.750836,8.645483,-2.468584,-6.492488,-1.956767,-2.049709,6.369782,4.253047,-5.868902,-8.794907,-7.939893,3.107574,-3.241278,-0.180220,-1.575863,-7.560727,-2.926313,9.182918,2.401347,6.202110,4.544167,8.791058,-6.940824,1.514981,3.918817,3.696485,-3.599079,-2.207684,4.056423,8.753607,-7.542955,-5.279164,0.964952,5.359852,1.338342,-2.555452,3.619546,4.040993,-2.418497,-2.051072,6.860663,1.070957,-9.402900,-6.667270,2.184484,-7.167297,2.947859,-5.265985,-8.523611,9.423433,-3.769115,4.459032,6.580425,6.507103,5.268248,1.809951,1.197685,-9.439598,7.944324,-4.467802,-8.694493,-3.095095,2.194228,-1.331037,6.324372,9.333437,5.882854,5.222331,2.351673,0.302897,-6.670446,9.028570,6.533491,-1.160973,-3.414376,1.984377,3.795026,8.469420,-8.591621,-7.166153,9.723403,7.473917,-5.977078,-3.233840,-9.555283,-9.716943,-6.205877,-6.093885,9.247972,-0.889586,4.721368,-8.792551,-5.864456,5.859066,6.742751,-8.471197,1.425607,-4.186194,-0.392870,-0.871788,-4.963881,6.956308,-9.402511,-6.881257,-4.133990,-5.394169,3.619217,-4.531732,-7.396240,-9.503950,-4.798418,-0.809078,9.808397,7.775064,8.872719,-1.684684,1.129990,1.199570,3.790462,2.001786,-9.752348,-1.278768,0.310184,1.543353,-8.828591,5.089728,-2.184672,8.819547,-4.584681,7.668347,-8.792218,0.880749,-0.803535,9.684151,8.368078,0.097503,-2.291799,5.147347,4.668049,1.080728,-2.397902,-4.535796,5.855770,-6.251262,-6.082669,7.786006,1.233427,-1.102478,5.722644,-5.015213,9.135457,8.331075,0.052802,8.422499,1.898496,-3.398146,0.197197,0.293219,-4.662365,8.813257,2.346239,0.319221,2.613399,-7.532439,-0.366964,1.909412,8.225701,4.521725,1.021429,6.660451,-6.847181,7.919587,-1.888964,-0.972711,-6.411940,9.610072,-4.635189,7.920229,0.518124,6.664793,-8.484504,3.086022,2.040897,-8.873721,4.235866,5.940818,5.022795,5.265301,3.982682,3.192484,2.008022,-7.396524,7.621170,-0.813459,0.173734,-2.182861,-7.208792,2.151275,0.188347,5.705389,1.420855,-7.622443,2.023703,-1.686411,9.357476,-8.629360,7.568773,-0.343835,-6.755068,1.782239,-5.734605,8.631427,8.190924,-9.309024,-2.323867,1.170559,5.447272,5.136292,2.474120,9.637083,9.171170,-0.488604,-4.337772,5.595790,7.051579,2.818289,8.556307,-1.078886,1.814431,6.302781,-2.700752,-0.805718,-0.355555,-4.561260,1.034632,-2.373600,-6.507018,5.355134,9.810235,3.503374,2.229530,4.437017,-2.776324,9.337833,-1.188794,0.772543,3.426708,-7.186754,2.596828,-5.463831,3.949983,8.926086,1.410556,-5.107948,-9.527588,6.423590,-2.467633,-4.683366,-0.105768,0.387138,-0.302224,-2.226801,-2.499127,4.688097,3.953342,-7.340609,-4.311095,-6.796427,3.280060,-4.493891,2.355348,0.997330,-1.938068,-8.011438,-3.915814,-0.956089,-6.545607,-9.975545,7.129971,8.214755,4.187588,7.960989,7.404129,1.988638,7.815294,-5.235085,2.098553,-9.533980,5.454273,4.831189,-3.422610,-4.287075,-6.615355,1.344462,-5.699196,-7.436662,1.590969,3.184239,-1.644941,8.268467,9.063192,-6.661470,4.212582,-6.760687,6.052908,-1.228104,2.965665,-2.183756,-5.031064,-2.649777,-8.734472,-7.184514,-3.356828,4.795253,7.711722,-2.712619,-8.769413,1.906730,-7.208202,5.849193,7.018833,8.677017,-6.058545,-9.171761,-3.300946,-8.984651,-3.267248,-0.674092,-0.680557,7.261855,-3.483669,-8.298329,-0.150925,-9.002705,-5.802249,-0.648526,-8.095316,-5.850099,6.987704,8.108072,2.199425,8.823992,-3.614742,7.848650,1.905844,-0.419423,-6.234135,-6.719809,7.152169,3.650640,-2.007787,4.170444,-9.319218,-4.410409,8.690316,4.232043,7.633152,-5.477311,-3.215472,-7.900904,-4.444153,9.259697,-4.490245,2.094806,-6.352752,8.021968,-1.283945,5.078395,-4.709350,-6.978006,2.342685,2.996312,-1.349181,4.159543,3.507044,-1.373035,-3.763746,-3.423887,-9.858042,-6.402466,9.273784,0.035364,0.501624,-8.954671,-3.214977,2.893585,-4.800019,-3.201305,-3.533988,0.090377,-8.254790,3.905263,2.750368,2.798711,0.207818,-1.900786,4.300476,-0.052333,9.652612,-4.112453,7.480247,4.392492,-9.547359,2.584110,9.125260,-8.862438,-1.687097,9.979735,-7.565773,8.648771,-6.791918,-4.958261,-2.807571,-3.664388,4.045290,6.716495,-4.146416,-2.335759,8.534564,6.914321,-5.746977,-6.519118,9.066595,-2.521838,-7.183362,2.510530,0.255048,-9.250263,-4.061808,1.479311,5.141698,5.460121,-4.859729,9.746457,1.328772,-5.526507,-7.436629,-5.972087,-1.748669,6.417255,9.039298,-4.694507,-4.231599,-5.189432,6.421940,-5.901644,-6.006757,6.643302,4.634611,-7.245195,1.876772,-1.141980,8.476304,-5.216980,2.081542,-7.436253,-2.733014,-2.683310,7.385281,-5.180938,-0.249628,-8.927737,-5.472657,8.455760,-5.603161,-7.714627,7.141348,0.744918,2.773079,-0.577169,-2.641349,7.159060,8.786419,1.987762,-7.701517,-0.815701,1.335993,-1.713695,-5.057913,4.753960,8.287959,-4.223281,7.918752,-4.618194,7.679746,6.915338,9.445627,1.708674,-7.999841,-8.962925,-2.554069,-8.244050,3.313724,8.974522,-2.868887,-7.594487,-6.657787,-7.593563,-1.395623,-4.312425,-9.244020,7.482517,7.659871,-0.035868,-5.846574,-4.825707,8.132008,-1.757969,5.529283,-4.727810,-8.995525,-7.657705,-6.139094,-7.947941,7.484531,-6.655014,9.272262,8.952280,-2.084793,-9.957765,-1.257043,0.770544,1.131845,-5.924727,1.593956,8.423064,6.004978,-9.930549,-3.416234,1.714234,-2.843469,2.471250,2.399412,-3.222841,0.570328,-4.626714,6.927183,3.433403,6.463235,-4.029197,9.816070,1.317991,6.547731,-1.514435,-0.257099,0.793562,2.011833,-6.619009,4.593075,9.300160,-4.116090,6.845368,4.964347,-5.140292,-8.164852,-5.317185,-0.661282,3.328198,2.570319,-8.913043,9.203100,-5.001654,-5.284162,4.275880,7.186898,-0.077158,1.064174,-2.578668,3.608002,3.931488,7.448541,5.634171,6.001669,3.576761,-7.885819,0.140911,3.083658,-6.412685,-7.296590,7.293718,-2.830522,0.806295,3.541092,1.976799,1.038121,7.244524,-0.940184,-2.852984,7.288733,-2.654024,0.964210,8.866260,-6.694092,6.924228,5.601246,-3.838760,-2.787872,4.452180,5.571889,-8.897432,-9.757514,8.690064,-2.560615,-5.012562,0.416840,1.898708,-4.166236,6.437478,7.670854,-2.539257,-6.047938,-3.093751,-8.752013,-9.168574,-9.031966,-4.180975,-1.535734,0.556750,-5.283027,-1.239551,0.524398,-7.407496,-7.040078,-0.766288,-4.772146,6.600001,1.179136,-3.762991,0.389941,-9.893181,7.403724,-5.246447,-9.911032,3.406278,-7.778575,3.424333,0.483493,8.721879,2.329149,1.577109,-4.121853,-0.552306,4.269471,-4.078604,-8.666706,-3.196512,3.905915,8.297030,5.391599,-6.822335,1.228206,8.745148,-1.035012,-1.419911,-0.108292,7.719491,-3.775365,-1.741307,-2.213222,0.664149,1.981251,0.899126,-4.769249,3.276971,4.542897,0.938360,4.317981,5.638034,-2.748496,0.636529,-1.592713,5.916737,1.468457,-7.340263,-7.039700,-5.217887,0.336341,2.875013,-0.442271,9.931359,-8.652333,-8.850634,2.125674,6.900417,-6.813787,-0.829795,-1.947455,8.100894,-8.993634,8.524906,7.089493,-8.118410,1.586801,7.600086,-7.714162,8.340608,2.340329,-2.897825,-1.172162,-5.295383,2.357326,4.981881,9.157540,2.548311,-7.899492,-4.086089,-6.312338,-0.446859,-0.439062,3.194505,5.382968,-2.615866,1.216097,0.478703,-6.853567,-1.419762,6.221357,5.357416,-1.383204,-1.751665,-6.681759,9.981044,1.564110,-2.342313,9.811050,7.146906,1.268872,1.731542,-5.287225,-5.009911,7.650424,-5.424028,-3.991846,3.397113,-3.957279,4.251835,-8.454631,6.365283,-6.282456,-2.531587,-2.846282,-6.389216,5.789588,-2.154134,6.637214,-3.271879,2.364147,3.204491,5.544414,-5.417363,-2.572094,-6.499999,-2.583995,-3.982250,1.707202,-2.385308,-1.798879,1.933849,1.234421,-1.347553,-6.858353,5.201893,8.234144,1.475633,7.568040,0.620206,2.344089,-3.389806,3.903521,7.145310,4.286897,-5.433194,-1.788038,8.211525,7.319961,-3.444749,6.338750,1.863314,-9.337548,4.151815,6.546801,6.502909,-5.872462,-0.945812,3.008591,-0.745837,-0.075750,-2.015404,1.302817,-3.069665,0.314113,-5.950797,-8.073939,-5.652259,9.625815,-0.236361,-8.070895,7.909639,6.618839,-8.499693,9.652446,-3.322288,-4.865154,2.444718,-3.394347,-7.644818,-3.956705,-6.198871,3.853221,-9.074917,-0.506135,2.211995,-4.260631,0.900477,-5.581315,-5.866334,7.124381,7.631984,-3.340058,6.173827,-3.820928,-2.310689,-7.731533,7.950716,1.917854,-7.308776,-2.072437,-1.830897,2.146305,3.497520,-7.707764,1.994475,-5.306498,3.437913,4.096333,9.524894,-1.086260,9.927801,9.807480,-4.645928,-6.350935,-2.529122,-7.824985,1.017973,4.221758,-4.469168,4.680154,1.899210,-6.368372,-4.836977,4.963398,-5.659990,6.997831,-2.523889,-6.514459,-7.365044,-6.429391,-9.718824,4.052807,-8.722080,-9.231166,-5.861030,-0.924594,0.758778,-2.526324,6.174506,3.360674,-1.120098,3.839739,7.419794,8.022031,-2.718471,6.265744,1.850216,-1.572968,0.645790,-0.148937,-7.129666,1.414161,9.266654,2.686143,9.275631,-0.824462,-3.054646,-2.553105,-9.294685,5.239944,1.225023,2.314135,3.052936,-9.347489,-8.814759,3.446983,-6.177671,-0.292544,-1.768881,-6.681993,-3.027959,0.413901,-4.857364,6.498034,-4.112298,8.480666,3.252503,-5.376741,-6.961059,1.001455,2.064622,-3.991280,4.567606,7.105543,-8.744361,8.029744,2.033073,5.459019,-8.984056], dtype = "float32")#candidate|2013|(1232,)|const|float32
call_2012 = func_1309_call(relay.reshape(const_2013.astype('float32'), [7, 16, 11]))
call_2014 = func_1309_call(relay.reshape(const_2013.astype('float32'), [7, 16, 11]))
var_2021 = relay.var("var_2021", dtype = "uint16", shape = (2100,))#candidate|2021|(2100,)|var|uint16
bop_2022 = relay.less_equal(call_2003.astype('bool'), relay.reshape(var_2021.astype('bool'), relay.shape_of(call_2003))) # shape=(2100,)
bop_2025 = relay.less_equal(call_2005.astype('bool'), relay.reshape(var_2021.astype('bool'), relay.shape_of(call_2005))) # shape=(2100,)
uop_2029 = relay.sinh(var_2021.astype('float64')) # shape=(2100,)
var_2040 = relay.var("var_2040", dtype = "float32", shape = (1232,))#candidate|2040|(1232,)|var|float32
bop_2041 = relay.bitwise_or(const_2013.astype('int8'), relay.reshape(var_2040.astype('int8'), relay.shape_of(const_2013))) # shape=(1232,)
output = relay.Tuple([call_2001,const_2004,call_2012,bop_2022,uop_2029,bop_2041,])
output2 = relay.Tuple([call_2002,const_2004,call_2014,bop_2025,uop_2029,bop_2041,])
func_2047 = relay.Function([var_2021,var_2040,], output)
mod['func_2047'] = func_2047
mod = relay.transform.InferType()(mod)
var_2048 = relay.var("var_2048", dtype = "uint16", shape = (2100,))#candidate|2048|(2100,)|var|uint16
var_2049 = relay.var("var_2049", dtype = "float32", shape = (1232,))#candidate|2049|(1232,)|var|float32
output = func_2047(var_2048,var_2049,)
func_2050 = relay.Function([var_2048,var_2049,], output)
mutated_mod['func_2050'] = func_2050
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1839_call = mod.get_global_var('func_1839')
func_1841_call = mutated_mod.get_global_var('func_1841')
call_2064 = relay.TupleGetItem(func_1839_call(), 0)
call_2065 = relay.TupleGetItem(func_1841_call(), 0)
func_591_call = mod.get_global_var('func_591')
func_594_call = mutated_mod.get_global_var('func_594')
const_2072 = relay.const([[False,False,True,True],[True,True,False,True],[False,False,True,True],[False,False,True,False],[True,True,False,False],[True,True,False,True],[True,True,True,False],[True,True,False,True],[True,True,True,False],[False,True,False,False],[True,True,False,False],[True,True,False,True],[False,False,True,True],[True,True,True,True],[False,False,True,False],[True,True,True,False],[False,False,True,True],[False,True,True,True],[False,True,True,False],[False,True,True,False],[False,False,False,True],[True,True,False,True],[True,False,True,True],[True,True,True,False],[True,False,True,True],[True,False,True,False],[False,False,False,False],[False,True,True,False],[True,True,True,False],[False,False,True,True],[False,True,False,True],[False,False,True,True],[False,False,True,False],[True,False,False,True],[False,False,True,False],[True,False,False,False],[True,False,False,True],[False,True,True,False],[False,True,True,False],[True,True,False,False],[True,True,False,False],[True,False,True,True],[False,True,False,True],[True,False,True,True],[False,True,False,False],[False,True,False,True],[True,False,True,False],[True,True,False,False]], dtype = "bool")#candidate|2072|(48, 4)|const|bool
call_2071 = relay.TupleGetItem(func_591_call(relay.reshape(const_2072.astype('bool'), [3, 8, 8]), relay.reshape(const_2072.astype('bool'), [3, 8, 8]), ), 0)
call_2073 = relay.TupleGetItem(func_594_call(relay.reshape(const_2072.astype('bool'), [3, 8, 8]), relay.reshape(const_2072.astype('bool'), [3, 8, 8]), ), 0)
func_1893_call = mod.get_global_var('func_1893')
func_1896_call = mutated_mod.get_global_var('func_1896')
const_2079 = relay.const([[-1.261585,-4.731427,5.756215,-2.403365,6.892385,1.212714,2.874244,2.121442,5.438077,6.440067,-3.053970,6.805735,-1.587580,7.460121,-0.976578,-1.933764,-8.980769,5.804348,-0.248186,4.820915,-7.489736,-5.490826,8.897060,-3.163316,-2.968234,-6.735444,6.055134,-4.401803,-5.260154,-6.121086,8.970912,9.201529,9.611297,0.334864,-4.620158,1.895825,2.913114,-2.008684,9.670980,-1.191575,5.925993,7.784185,-0.960755,-0.380969,2.537122,3.304631,7.420313,-7.189672,4.431634,-0.932863,3.017935,-2.427402,-9.281786,3.019006,-6.319143,1.665597,-8.562571,-6.336306,-6.225542,2.373274,5.387138,-1.269813,8.936690,4.952415,-5.513668,3.236440,6.208212,6.393713,-8.027625,1.895420,-7.592161,-0.228031,0.196857,7.995713,1.794318,6.843654,6.410830,-3.091789,4.790119,5.873148,7.419786,6.177595,-7.547344,-9.016465,5.037105,8.228931,-1.980873,4.663189,-9.649661,4.383356,1.777577,-2.916178,-1.451164,-5.810364,-3.406222,-0.190782,-3.097535,-2.509622,-0.387209,9.484093,4.224046,6.837505,2.548421,5.537944,6.081575,7.297851,-6.255811,1.168781,-0.568333,-0.666951,0.396398,7.786691,-7.722036,-5.669050,-1.475669,-4.846444,3.159053,-8.406149,-8.836295,-6.102456,-1.000756,7.152611,-6.991499,-7.761964,-0.212415,8.111548,6.475802,0.234933,7.022285,-7.008471,9.445184,7.425388,-7.626803,0.296698,6.347664,-3.718642,-2.466166,-9.908475,-7.375554,8.775143,7.136666,-9.558551,8.699851,-9.018177,1.791428,7.813350,-0.517919,8.449715,-7.514277,7.319684,6.861511,9.385497,6.004467,-6.085615,-6.032936,-2.607051,-3.106660,-1.290837,-3.780290,-5.240913,5.272686,9.846651,-6.790140,-9.863214,2.917884,2.001718,4.839866,-7.257123,-1.025811,-2.126807,2.122033,4.097782,9.250753,1.497981,-7.478505,-4.948515,4.377868,6.927402,-6.173904,-6.143134,-4.631351,-3.416395,9.794686,-7.294986,6.332911,-2.564980,-1.286795,4.309214,-3.250416,6.134633,-1.552119,-4.881938,2.100996,-7.675933,-9.703668,-4.346806,-0.633428,-2.352844,5.854742,7.287369,-4.923525,8.309946,2.742097,-9.896590,-2.689510,9.212804,3.221120,-6.819522,8.633974,0.284723,-9.204662,-9.217642,-2.141187,-7.345417,-4.373030,2.376854,8.701069,7.663892,2.403334,-4.070241,5.094831,-7.582045,-7.763764,-2.228819,4.353050,1.266181,4.252784,-0.247427,-0.548103,1.474635,2.196444,0.784135,-2.405910,1.703175,7.988132,6.044377,9.728064,4.424517,-6.423457,-8.368709,9.078879,1.305803,6.408912,4.977318,-4.170963,-9.492820,3.796969,3.260316,-5.166791,1.895818,-6.679152,2.262888,-0.543318,3.104856,-2.393670,0.925745,0.557673,-0.336015,-3.688318,9.979721,-4.312938,-7.862727,9.023560,8.557193,2.400930,6.075413,5.809103,8.182171,-5.892085,1.266589,-5.510025,-5.148461,3.997381,2.391381,-7.140680,9.494415,-1.041721,-6.913711,2.363897,-9.912721,-6.221181,-2.114510,-7.314647,-9.261066,3.819483,7.256011,-1.784551,3.576671,-5.432760,2.703647,5.802824,5.647181,0.163484,-2.308944,-6.400911,7.291840,-9.834534,-1.707035,9.259801,6.690987,-9.491502,6.618510,1.339257,2.983551,7.182198,-7.455601,5.242488,-4.958807,-9.241727,7.438943,1.294998,9.450889,-4.887725,-3.965093,-2.969420,-1.959699,-2.808261,3.911068,6.496148,6.390815,-9.103253,8.302101,-6.239593,-9.841303,-3.772780,0.419732,-7.587876,-2.846340,-2.870124,-3.922896]], dtype = "float64")#candidate|2079|(1, 330)|const|float64
var_2080 = relay.var("var_2080", dtype = "uint16", shape = (2100,))#candidate|2080|(2100,)|var|uint16
call_2078 = relay.TupleGetItem(func_1893_call(relay.reshape(const_2079.astype('float64'), [330,]), relay.reshape(var_2080.astype('uint16'), [2100,]), ), 0)
call_2081 = relay.TupleGetItem(func_1896_call(relay.reshape(const_2079.astype('float64'), [330,]), relay.reshape(var_2080.astype('uint16'), [2100,]), ), 0)
func_413_call = mod.get_global_var('func_413')
func_417_call = mutated_mod.get_global_var('func_417')
call_2083 = relay.TupleGetItem(func_413_call(relay.reshape(const_2079.astype('float64'), [2, 11, 15]), relay.reshape(var_2080.astype('uint16'), [2100,]), ), 2)
call_2084 = relay.TupleGetItem(func_417_call(relay.reshape(const_2079.astype('float64'), [2, 11, 15]), relay.reshape(var_2080.astype('uint16'), [2100,]), ), 2)
var_2089 = relay.var("var_2089", dtype = "float64", shape = (13, 330))#candidate|2089|(13, 330)|var|float64
bop_2090 = relay.multiply(const_2079.astype('int16'), var_2089.astype('int16')) # shape=(13, 330)
bop_2093 = relay.logical_or(bop_2090.astype('bool'), relay.reshape(var_2089.astype('bool'), relay.shape_of(bop_2090))) # shape=(13, 330)
bop_2100 = relay.equal(var_2089.astype('bool'), relay.reshape(bop_2090.astype('bool'), relay.shape_of(var_2089))) # shape=(13, 330)
func_1839_call = mod.get_global_var('func_1839')
func_1841_call = mutated_mod.get_global_var('func_1841')
call_2106 = relay.TupleGetItem(func_1839_call(), 0)
call_2107 = relay.TupleGetItem(func_1841_call(), 0)
func_1893_call = mod.get_global_var('func_1893')
func_1896_call = mutated_mod.get_global_var('func_1896')
call_2112 = relay.TupleGetItem(func_1893_call(relay.reshape(const_2079.astype('float64'), [330,]), relay.reshape(var_2080.astype('uint16'), [2100,]), ), 2)
call_2113 = relay.TupleGetItem(func_1896_call(relay.reshape(const_2079.astype('float64'), [330,]), relay.reshape(var_2080.astype('uint16'), [2100,]), ), 2)
output = relay.Tuple([call_2064,call_2071,const_2072,call_2078,var_2080,call_2083,bop_2093,bop_2100,call_2106,call_2112,])
output2 = relay.Tuple([call_2065,call_2073,const_2072,call_2081,var_2080,call_2084,bop_2093,bop_2100,call_2107,call_2113,])
func_2132 = relay.Function([var_2080,var_2089,], output)
mod['func_2132'] = func_2132
mod = relay.transform.InferType()(mod)
mutated_mod['func_2132'] = func_2132
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2132_call = mutated_mod.get_global_var('func_2132')
var_2134 = relay.var("var_2134", dtype = "uint16", shape = (2100,))#candidate|2134|(2100,)|var|uint16
var_2135 = relay.var("var_2135", dtype = "float64", shape = (13, 330))#candidate|2135|(13, 330)|var|float64
call_2133 = func_2132_call(var_2134,var_2135,)
output = call_2133
func_2136 = relay.Function([var_2134,var_2135,], output)
mutated_mod['func_2136'] = func_2136
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1839_call = mod.get_global_var('func_1839')
func_1841_call = mutated_mod.get_global_var('func_1841')
call_2181 = relay.TupleGetItem(func_1839_call(), 0)
call_2182 = relay.TupleGetItem(func_1841_call(), 0)
output = relay.Tuple([call_2181,])
output2 = relay.Tuple([call_2182,])
func_2190 = relay.Function([], output)
mod['func_2190'] = func_2190
mod = relay.transform.InferType()(mod)
output = func_2190()
func_2191 = relay.Function([], output)
mutated_mod['func_2191'] = func_2191
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2219 = relay.constdtype = "float32")#candidate|2219|(15, 13, 12)|const|float32
uop_2220 = relay.acosh(const_2219.astype('float32')) # shape=(15, 13, 12)
bop_2224 = relay.greater(const_2219.astype('bool'), relay.reshape(uop_2220.astype('bool'), relay.shape_of(const_2219))) # shape=(15, 13, 12)
output = bop_2224
output2 = bop_2224
func_2231 = relay.Function([], output)
mod['func_2231'] = func_2231
mod = relay.transform.InferType()(mod)
mutated_mod['func_2231'] = func_2231
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2231_call = mutated_mod.get_global_var('func_2231')
call_2232 = func_2231_call()
output = call_2232
func_2233 = relay.Function([], output)
mutated_mod['func_2233'] = func_2233
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1839_call = mod.get_global_var('func_1839')
func_1841_call = mutated_mod.get_global_var('func_1841')
call_2245 = relay.TupleGetItem(func_1839_call(), 0)
call_2246 = relay.TupleGetItem(func_1841_call(), 0)
uop_2258 = relay.rsqrt(call_2245.astype('float64')) # shape=(3, 13, 5)
uop_2260 = relay.rsqrt(call_2246.astype('float64')) # shape=(3, 13, 5)
func_716_call = mod.get_global_var('func_716')
func_719_call = mutated_mod.get_global_var('func_719')
const_2275 = relay.const([[False,False,False,False,False,False,False,True,False,True,True,True,True,True,True],[False,False,False,False,True,True,True,False,True,False,False,False,False,False,False],[False,True,False,False,True,False,False,True,True,True,False,True,False,False,False],[True,False,False,False,False,True,True,True,True,False,True,True,False,False,False],[False,False,True,False,False,False,False,False,True,False,True,True,True,True,True],[True,True,False,True,True,False,False,False,False,True,False,True,False,False,True],[False,True,True,True,True,True,True,False,False,False,False,True,False,True,True],[True,False,False,True,True,True,False,True,True,False,False,True,True,False,True],[True,True,False,False,False,False,False,False,False,False,False,False,True,False,True],[False,False,True,False,True,False,True,True,True,False,True,True,True,True,True],[True,False,False,True,False,True,True,False,True,True,False,True,True,False,False],[False,False,False,True,True,True,True,False,True,False,True,False,True,False,True],[True,True,True,True,True,False,False,False,False,True,False,True,True,True,True],[True,False,True,True,True,False,False,True,True,True,True,False,False,True,False],[True,False,False,True,True,True,True,False,True,True,True,True,False,False,True],[True,True,True,True,False,False,True,True,True,False,False,True,False,False,False],[True,False,False,True,True,True,False,False,True,True,True,True,True,False,True],[False,True,True,True,False,True,True,False,False,True,False,True,False,True,True],[False,False,True,False,True,False,True,True,False,True,False,False,False,True,False],[True,True,True,False,False,False,False,False,False,False,True,False,True,True,True],[True,True,True,False,True,False,True,False,True,True,True,False,True,True,True],[True,True,True,True,True,True,True,True,True,True,False,False,True,True,True],[True,False,False,False,True,True,True,False,False,False,True,True,False,True,True],[False,False,False,True,True,True,False,False,True,False,True,True,False,True,False],[False,False,True,False,False,False,False,True,False,False,False,True,True,False,False],[False,False,True,False,True,False,False,False,True,True,False,False,False,False,True],[False,False,True,True,True,False,True,True,True,True,True,True,True,False,False],[True,True,False,False,True,False,True,True,False,False,False,False,False,False,False],[False,True,True,True,False,False,True,False,True,True,True,False,False,False,False],[False,False,True,True,False,True,True,True,False,True,True,True,True,False,True],[True,False,False,False,True,True,False,True,True,True,False,False,True,False,True],[False,True,True,True,False,True,False,True,True,True,False,False,False,True,False],[True,False,False,False,True,False,True,True,True,False,True,True,False,False,True],[True,False,False,False,False,False,False,False,True,True,True,True,True,True,False],[False,True,True,False,True,False,False,False,True,True,False,False,False,False,True],[False,False,True,False,False,True,True,False,False,False,True,True,False,True,True],[False,True,False,True,True,True,True,False,True,True,True,True,True,False,True],[False,False,True,False,False,False,True,True,False,True,False,False,True,False,True],[False,False,False,False,False,True,True,True,True,False,False,True,True,False,True],[False,False,True,False,False,True,False,False,True,False,True,True,False,False,True],[True,False,True,True,False,True,True,True,True,False,True,True,True,False,True],[False,True,False,True,True,False,True,True,False,False,True,False,True,False,False],[False,True,True,True,True,True,True,False,True,False,False,False,True,False,True],[True,False,False,True,False,True,True,True,False,False,True,True,False,False,True],[False,False,True,True,True,False,True,False,False,False,False,False,False,False,False],[True,True,True,True,False,True,False,True,False,False,True,True,False,True,True],[True,False,True,False,True,False,False,False,True,False,False,True,True,True,True],[True,False,False,False,False,False,True,False,False,True,True,True,False,True,True],[True,False,True,False,True,False,True,True,True,False,False,True,True,True,False],[True,False,True,True,True,True,False,False,True,False,False,False,True,False,True],[False,False,False,True,False,True,False,True,False,True,True,False,False,True,True],[True,False,False,False,True,True,True,True,True,False,True,True,True,True,False],[False,True,False,False,True,False,True,True,False,False,False,True,False,False,False],[False,True,False,False,True,False,True,False,True,False,True,True,False,False,False],[False,False,True,False,True,False,False,False,True,False,False,True,False,True,False],[False,True,True,True,True,True,True,False,True,False,False,False,True,False,False],[True,False,True,True,False,False,True,True,False,True,True,True,False,True,False],[False,False,True,False,True,False,True,False,False,False,False,False,True,False,True],[True,True,True,False,False,False,False,False,True,True,True,False,False,True,False],[False,False,False,True,False,True,True,True,True,True,True,True,True,False,True],[False,False,True,False,False,True,False,True,True,True,False,False,True,False,False],[True,False,False,True,True,False,False,False,True,True,True,False,True,False,True],[False,True,True,True,True,True,True,True,False,False,False,False,True,True,False],[True,True,False,True,False,True,True,True,True,False,False,False,False,True,True],[True,False,False,False,True,True,False,False,False,False,True,False,True,False,True],[True,True,False,False,False,True,True,True,False,True,True,False,True,True,False],[False,True,False,False,True,True,True,True,False,True,False,True,True,True,True],[True,False,False,True,False,False,False,False,True,False,True,False,True,False,True],[True,True,False,True,True,False,False,True,True,False,False,True,True,False,False],[False,True,True,False,False,True,False,True,True,True,True,False,True,False,True],[True,True,False,True,False,True,True,True,False,True,True,True,False,True,True],[True,True,False,False,False,False,True,False,True,True,False,True,True,True,True],[False,False,True,False,False,True,False,True,False,False,False,False,True,True,True],[False,False,False,False,False,False,True,True,True,False,False,True,True,False,False],[True,False,True,False,True,True,True,True,False,False,True,True,False,True,False],[True,True,False,True,False,False,False,True,True,True,True,False,False,True,False],[False,False,False,True,False,True,False,True,False,True,True,False,False,True,True],[False,False,False,False,False,False,False,False,True,True,True,True,True,True,False],[True,True,False,False,True,False,True,True,True,False,False,True,False,False,False],[True,False,True,True,False,True,False,False,True,True,False,False,False,True,True],[False,True,False,False,True,True,False,False,True,False,False,True,True,False,False],[True,True,False,False,True,True,True,True,True,False,False,True,False,True,True],[True,True,False,False,False,True,True,False,True,False,False,False,False,True,False],[False,True,False,False,True,True,True,True,False,True,True,False,False,False,True],[True,True,True,True,True,True,False,True,True,False,True,False,False,True,True],[False,True,False,False,False,False,True,True,True,True,False,False,False,True,False],[True,False,False,False,False,True,True,False,False,True,False,False,True,False,True],[False,True,True,True,True,True,True,True,False,False,False,True,False,False,False],[True,False,False,True,False,False,False,False,True,True,True,True,True,False,False],[False,False,True,True,True,False,False,False,True,True,False,False,False,True,False],[False,False,False,False,True,True,True,True,True,False,False,False,True,True,False]], dtype = "bool")#candidate|2275|(91, 15)|const|bool
call_2274 = relay.TupleGetItem(func_716_call(relay.reshape(const_2275.astype('bool'), [13, 15, 7])), 2)
call_2276 = relay.TupleGetItem(func_719_call(relay.reshape(const_2275.astype('bool'), [13, 15, 7])), 2)
uop_2279 = relay.acos(uop_2258.astype('float32')) # shape=(3, 13, 5)
uop_2281 = relay.acos(uop_2260.astype('float32')) # shape=(3, 13, 5)
output = relay.Tuple([call_2274,const_2275,uop_2279,])
output2 = relay.Tuple([call_2276,const_2275,uop_2281,])
func_2287 = relay.Function([], output)
mod['func_2287'] = func_2287
mod = relay.transform.InferType()(mod)
mutated_mod['func_2287'] = func_2287
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2287_call = mutated_mod.get_global_var('func_2287')
call_2288 = func_2287_call()
output = call_2288
func_2289 = relay.Function([], output)
mutated_mod['func_2289'] = func_2289
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2287_call = mod.get_global_var('func_2287')
func_2289_call = mutated_mod.get_global_var('func_2289')
call_2290 = relay.TupleGetItem(func_2287_call(), 2)
call_2291 = relay.TupleGetItem(func_2289_call(), 2)
func_1309_call = mod.get_global_var('func_1309')
func_1312_call = mutated_mod.get_global_var('func_1312')
const_2330 = relay.const([3.709246,-7.824107,-1.905090,-5.672795,-6.101843,3.589959,-1.225550,6.556320,-7.366669,6.566409,-2.642081,-7.155464,-0.935658,5.616854,9.843821,-1.596456,-8.908394,5.997320,4.933248,0.643491,-9.571067,6.306077,2.424545,9.280446,-4.073040,7.229136,-6.891407,-7.127594,1.093122,1.900875,-7.231930,-6.624486,-6.629517,4.798351,4.723911,2.237178,0.460455,-0.508622,8.600602,-7.066204,3.282142,-6.399636,5.596868,-7.163311,5.959416,-6.660900,5.942144,-5.711043,-5.392497,-8.867750,7.133594,6.690718,-0.988675,9.043836,3.190639,-7.444122,5.295319,-2.680503,1.295055,-3.974621,-2.433964,-3.387497,4.254581,-6.115962,-3.169111,0.306733,-0.634239,-8.129536,9.743927,0.825334,-6.571598,5.464550,-4.324549,-9.586546,-8.050551,-4.566073,4.268062,-1.976894,-0.739754,-1.111920,5.804964,-4.816232,-7.974384,0.673849,-2.323708,-7.094160,-2.217687,6.709191,-7.528596,-7.765731,-8.446924,3.003373,0.834416,-5.681036,-8.942038,-5.967389,-1.383118,-8.989634,6.746617,-6.447589,-5.126607,-5.765572,-9.547973,7.715324,-2.156904,6.650523,5.880028,-7.311082,6.926694,-0.912659,-3.142204,7.408046,5.173446,5.858360,5.451519,-5.490185,4.906085,-2.323486,-0.442417,-5.898583,2.017724,9.244727,-3.974028,6.977324,-0.454202,-2.725077,-6.854696,-5.420950,6.443117,4.430179,2.294792,-9.364187,-1.444206,4.968593,-7.862572,4.400847,1.207690,-4.345745,1.241580,4.994065,4.620722,-6.996379,-7.128285,1.535832,-8.696839,-9.265787,0.247616,-9.726014,-3.002924,-1.974813,3.593818,-2.547053,4.047396,7.581237,0.672057,-5.744421,-4.270913,-8.453014,4.795657,-2.773556,-0.942792,-4.525649,7.192767,-5.279332,-5.159083,-2.345966,-3.380733,-4.766182,-4.915456,-6.534153,4.413037,-7.292387,1.045557,-8.263191,6.504651,3.811941,8.765406,8.852021,-0.624122,-0.617366,-2.125429,2.550302,-9.148003,-6.443751,9.179341,-7.831949,-2.730791,-4.638544,3.655023,-7.798005,8.179763,8.410547,6.513670,7.144145,-0.999776,-9.479850,-5.773676,7.338112,-4.798770,2.965574,8.213343,-8.451378,2.925815,0.866958,3.331915,6.216215,2.033775,7.688726,1.705895,1.936578,2.875468,-7.652282,8.720015,-6.375827,-3.225234,9.891243,1.932823,0.378099,-7.840199,8.716172,-6.160090,-0.134002,0.283802,1.330654,-1.981845,-3.377525,-1.792754,9.244181,2.080123,2.525620,-3.132543,1.904062,-1.789532,-8.611628,5.765294,-8.832458,-7.905578,-3.428677,1.539717,-2.814817,-1.523752,4.949900,6.481710,-5.006013,-6.715990,-7.986143,-2.613962,-1.771164,-6.098509,9.136768,-2.168374,-0.511077,-9.922209,4.593674,-2.873742,4.336647,-9.284604,0.148350,3.468822,-5.395670,-0.563374,-2.538082,-0.880443,2.633026,7.213372,6.406005,7.432096,-8.606403,-0.358873,3.480076,4.743182,1.149720,2.459074,-8.068952,-7.767072,-7.230528,5.494363,4.986475,9.895028,7.792522,4.601649,-8.625961,-8.582075,-7.225315,-5.551338,7.121602,-8.703179,-0.423064,2.251754,-1.966613,4.795530,-8.758721,-4.511961,4.974609,2.139838,-9.961144,7.702064,6.459140,-3.618839,-7.771276,2.793641,-4.107720,-9.891135,1.468931,4.646946,0.243740,-1.198680,-9.401939,3.285328,-4.100098,-7.733931,2.115079,4.204530,1.335549,-4.420101,2.728067,6.850308,4.411574,-3.209166,1.630602,-6.597009,-1.575940,5.293951,4.361562,-5.984038,6.684253,0.876530,-8.809042,0.195614,-5.083427,2.355659,0.701709,7.630834,-2.382152,4.602554,-2.487436,-8.970474,-2.280267,1.187541,-7.256865,8.992792,-9.259101,-2.506405,1.173639,-3.068893,2.414139,3.294120,-6.108584,4.067425,-9.291003,-4.289935,7.446907,-8.423086,-8.524968,5.756222,1.347098,-1.874973,7.895659,7.927105,-1.035717,-7.190819,3.808909,-1.004472,6.473056,1.838096,-6.030357,-7.034376,-1.377317,0.652496,-9.781088,-9.060592,8.756831,1.206383,3.182086,-3.250288,-9.230016,-5.550811,-6.932298,4.212244,-9.619251,-2.068876,-9.876881,-8.508016,8.285959,-0.460215,2.041644,8.614820,1.303585,9.731960,2.556874,3.693022,9.227265,-5.718538,-6.242344,6.919642,-4.321625,-7.990126,-2.299612,2.987026,-5.774343,8.108935,-2.156567,0.295849,9.718343,5.757535,-0.526403,-3.865047,-1.928609,0.400222,-8.322298,8.016787,-6.645004,6.534398,1.994287,-9.307124,-0.706063,1.073272,6.823948,4.275388,8.785809,1.993571,0.147596,5.185754,-6.091189,-7.346574,0.502460,0.830028,9.119958,-3.132651,-3.536499,3.484180,-8.319205,0.114466,4.112195,-3.126531,4.298139,-2.518902,6.496702,-1.519008,-3.532586,-8.725525,3.788420,-0.435534,2.427333,6.338396,3.449688,-2.461094,6.158123,3.158809,-6.795691,7.749868,-6.694339,-8.250914,-3.857824,4.692447,-7.940727,-6.821515,-1.340145,-4.569074,-9.712860,4.759889,-9.946074,9.694986,5.510993,-3.073379,3.049089,-1.167658,4.117290,0.605613,6.688581,9.410923,0.222963,7.449793,-7.868720,2.743220,8.182230,-6.664771,-8.362009,1.467661,8.666558,-4.461514,-1.596686,-9.394688,4.650958,9.410067,-2.351713,-7.272079,-6.916982,4.070254,-1.578484,4.458240,0.606688,1.525658,-4.565485,-1.619998,2.356768,-2.420270,3.005213,9.178804,-0.785267,6.227091,2.327230,-7.196646,-8.252568,-5.406148,-3.554146,-3.258643,-5.390166,-3.671291,3.800394,-6.100896,6.309678,-2.746620,1.583047,3.217686,-8.240793,-0.017559,1.969843,3.622128,3.590011,-1.050302,-4.326664,0.850255,-0.370825,7.984672,-7.698375,-6.938115,-2.133599,-4.137834,5.484235,0.755179,2.565191,4.469470,4.613244,-0.632681,6.758208,-9.771736,4.253804,-5.071562,1.561949,2.068726,0.911043,2.300796,-5.956596,5.517715,-2.352237,3.419711,-7.324840,-3.319918,-4.119065,-6.557853,0.794534,4.188804,5.490588,-3.485901,6.233515,-1.748421,-1.881624,-4.492152,-9.983730,-7.269697,-7.071176,-9.675472,-9.074108,-7.029406,0.073628,-7.473037,-7.515812,8.049406,9.892728,-0.092376,-5.001537,8.745999,8.147398,1.234620,2.089810,-9.427312,-5.169200,7.436170,5.417217,4.556760,-6.163322,1.010742,7.228746,-1.249090,-5.522952,8.790015,-5.292139,4.744786,-5.963127,9.331920,-3.932133,4.559090,-7.670336,-7.613682,3.483795,-7.577637,9.715130,-4.962872,-5.083518,-8.838582,4.818054,6.871596,-4.401668,6.505188,-5.412241,7.237499,-0.351217,7.388302,7.371717,-4.105477,7.726901,-6.707229,-2.492086,1.346032,-5.296616,-1.839463,7.783416,9.634499,-3.465964,-3.979411,3.435193,-1.210188,-7.527028,-2.336447,8.104689,-5.946240,9.719161,7.402088,6.673294,-9.066533,-8.462045,-4.757953,4.572899,-4.135469,-4.980044,-6.410631,-0.128712,-7.386869,-4.463200,-4.740667,2.023331,-0.977123,1.761342,9.138542,-6.309323,-1.378042,-5.517619,-1.226981,-4.663830,9.704553,0.726723,-0.076361,-2.656501,-9.732798,3.149753,-0.943874,-0.392212,7.803878,0.482724,-7.814561,5.010436,-0.531277,4.074292,3.022538,9.147380,0.427518,-1.037127,-2.735627,-5.185146,3.619785,4.730698,-9.669373,-5.642345,-9.849583,-3.886015,4.114842,5.299376,5.982375,-3.943974,7.318902,-2.874105,-4.165924,-0.839182,9.293507,6.392139,3.437012,8.107737,-3.143132,1.573155,9.937582,-8.085106,3.298967,-3.864398,-2.971258,1.943443,7.255322,-3.477719,-1.762874,-6.649318,6.079282,-8.224998,2.366700,1.016031,2.312483,-5.462306,-6.020777,6.022843,-6.748002,9.572062,-4.305190,-6.156613,-9.958072,4.390628,-1.309885,-0.087460,-3.804073,-3.434886,-8.556224,7.894744,-1.582583,-6.742251,-2.146015,5.453298,-5.929111,-5.959060,9.699916,-9.516924,7.031569,1.955937,8.259579,-2.141269,-6.841371,9.939114,-2.329980,8.788038,-5.860592,7.047688,6.773372,-8.277767,4.903110,3.739120,5.039561,-0.857973,7.218501,-7.449046,-3.657253,-8.076663,7.256358,8.510684,5.189385,0.705315,3.689281,-0.560696,5.327134,-9.431203,1.140038,8.389795,9.300643,-9.017369,4.432834,2.622224,0.318471,0.910976,-2.574578,-9.947823,8.612300,1.200780,-3.244056,0.925736,-5.170085,4.802892,6.801450,4.588805,-2.823332,-5.136223,-2.993577,7.356691,9.452133,9.218390,-0.002316,8.379020,0.340539,-0.686538,6.773222,0.408851,7.343052,5.893071,6.709798,4.635966,-7.991318,-0.725911,7.202715,-4.240146,-5.572686,-8.210153,4.329679,-3.165834,6.916232,0.685833,-8.030722,-2.219630,5.402397,3.134540,-3.657281,-4.169943,-1.908665,-5.896671,7.722508,-1.360478,-4.911717,-5.808508,0.562237,-5.439246,8.752677,3.236551,-4.128146,3.759683,3.658948,-7.470731,8.698379,7.962966,5.739272,7.187096,-4.907027,-0.986457,9.077031,0.494298,4.267339,7.748806,6.697234,4.177136,-6.079302,5.929868,9.791202,-1.727364,-2.800824,-9.577484,9.838611,-3.405221,5.054354,-1.096644,1.278168,0.210839,1.072037,2.521995,1.520689,-5.519761,0.172903,-9.423591,8.162724,5.091621,-1.404898,-0.992179,-3.932501,5.811915,5.204768,-6.528638,4.956344,-4.495039,-7.303641,0.582168,-6.088367,6.122721,8.712538,-4.502500,-3.925065,2.104362,1.605845,-5.324843,-8.002130,9.550793,2.465831,1.867773,-5.665177,7.001178,8.828411,-9.918590,-5.079485,-0.886846,6.098692,3.447995,-4.811974,-1.401307,-5.302900,7.341270,9.962405,-5.593367,-1.142246,3.676208,4.891389,1.699979,-8.631921,-7.570263,-1.611781,-2.024056,7.657769,9.660364,-4.779768,4.669515,3.275927,-2.713143,-8.851700,2.617791,-7.614408,3.363413,-4.476052,-5.300701,-5.537468,2.063764,4.516772,7.491699,0.635390,7.380108,-4.364949,-6.991991,5.798365,-0.451679,-9.001298,2.578997,4.854643,-1.345707,6.713476,-0.694848,-6.761030,-5.489866,4.214625,-0.630421,7.750968,7.448829,6.653367,5.977313,-5.170897,-6.370683,4.537281,0.671841,-4.175652,-7.306395,-5.405819,6.622508,9.463351,2.155183,0.315265,5.601496,6.432165,2.386756,9.630518,3.661697,-7.754722,-1.846756,5.217494,-9.977302,8.909988,-5.358086,0.543266,-7.077610,6.340518,-0.100158,-9.278596,2.337427,-2.869369,-0.080461,5.821235,3.046720,3.515638,-1.540831,5.507451,-2.062697,7.548169,-3.846867,-6.768681,9.394659,-5.085124,9.851519,-6.379518,-7.555923,0.515416,-4.773311,2.373549,-3.871312,8.859410,4.318721,-6.648722,2.860309,-1.591455,-1.295247,4.690766,3.743052,9.147978,-6.233976,3.701894,-8.744116,4.770965,-0.523981,-6.833166,8.560309,1.722369,-4.542837,-1.282841,5.952394,-4.495632,3.408291,-8.882201,1.921184,3.470901,9.273570,3.497040,9.961350,-7.543230,8.017457,4.431419,-4.787381,8.677829,-4.465181,-8.303670,9.901346,5.476014,-8.155519,1.497657,-1.732420,7.070499,6.251041,9.947613,8.369523,-4.962519,5.286270,4.990020,-2.516801,-6.435289,-2.842114,2.552010,5.235958,5.400448,-1.160105,-1.037156,5.356510,-2.663784,-7.597811,-7.169122,5.302739,-8.680868,-2.369681,-4.743840,-8.363048,7.078472,0.377971,-0.480951,6.639020,6.052653,-7.615772,-1.950901,8.145899,7.693017,6.930108,-7.680953,-9.781834,0.988348,-8.649903,-4.720553,-5.494135,-4.517014,-8.278189,9.321467,-3.848899,7.352380,-8.822239,-6.606321,-4.202360,6.770498,1.956880,-5.486859,-8.802245,-8.554289,4.842794,2.635961,-3.952478,9.975049,1.729489,4.424130,8.638904,-2.646820,-5.245088,-4.383789,-3.633043,-7.708972,8.398111,-3.570172,-4.999488,-8.895864,8.862152,-5.453197,1.789744,-9.094571,-9.924942,-8.296578,-9.331848,3.324280,-1.760262,4.619074,5.818734,-8.238410,-5.519017,-6.712671,-6.896021,-9.490888,-0.186732,3.888351,-4.139496,-7.354078,4.816082,6.724169,-8.090539,2.311239,-2.191260,7.872366,-4.173500,-7.016253,-2.937075,-6.171771,2.387500,-4.124758,9.177700,-8.449109,0.514280,-9.191509,0.945297,-7.355062,-1.398949,-1.258332,-0.893579,-6.037852,-7.989238,7.238615,1.911831,1.799625,-2.007100,-3.243345,8.534112,-4.411894,-5.281353,-5.211056,-7.292208,9.502331,-1.295923,2.161857,1.429124,1.712929,-7.542445,0.482555,-5.010226,-1.001834,-0.530284,-7.620778,5.036104,8.388831,3.705993,-9.928298,-5.930032,-3.744858,8.099146,-4.426507,6.028391,-9.888383,-2.993031,9.412361,-9.540852,-5.817395,8.545272,2.270269,9.675989,-1.703909,-8.605204,-4.369315,-8.401619,7.141716,-4.273590,-8.005458,8.083610,2.756122,-5.169461,5.915380,-4.626641,-0.338309,-0.505027,9.911120,-9.234393,8.915392,-8.084458,1.030762,-9.012893,-4.350412,-8.746403,7.972222,-9.022010,-6.208582,9.199279,8.703725,2.143807,5.228666,9.607576,5.847331,-1.831251,-3.702238,-4.484523,7.546629,-6.548981,2.855022,4.849004,6.342562,5.647764,-5.172949,6.666781,-0.433649,8.884432,-2.674127,-2.553111,-9.194574,-6.048564,2.759620,1.960756,-3.712499,9.981729,-2.046103,-4.474991,-2.541487,7.310390,-2.266047,-7.087883,7.820663,4.583826,1.062877,0.460299], dtype = "float32")#candidate|2330|(1232,)|const|float32
call_2329 = func_1309_call(relay.reshape(const_2330.astype('float32'), [7, 16, 11]))
call_2331 = func_1309_call(relay.reshape(const_2330.astype('float32'), [7, 16, 11]))
output = relay.Tuple([call_2290,call_2329,const_2330,])
output2 = relay.Tuple([call_2291,call_2331,const_2330,])
func_2337 = relay.Function([], output)
mod['func_2337'] = func_2337
mod = relay.transform.InferType()(mod)
mutated_mod['func_2337'] = func_2337
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2337_call = mutated_mod.get_global_var('func_2337')
call_2338 = func_2337_call()
output = call_2338
func_2339 = relay.Function([], output)
mutated_mod['func_2339'] = func_2339
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1839_call = mod.get_global_var('func_1839')
func_1841_call = mutated_mod.get_global_var('func_1841')
call_2378 = relay.TupleGetItem(func_1839_call(), 0)
call_2379 = relay.TupleGetItem(func_1841_call(), 0)
func_1839_call = mod.get_global_var('func_1839')
func_1841_call = mutated_mod.get_global_var('func_1841')
call_2383 = relay.TupleGetItem(func_1839_call(), 0)
call_2384 = relay.TupleGetItem(func_1841_call(), 0)
output = relay.Tuple([call_2378,call_2383,])
output2 = relay.Tuple([call_2379,call_2384,])
func_2394 = relay.Function([], output)
mod['func_2394'] = func_2394
mod = relay.transform.InferType()(mod)
output = func_2394()
func_2395 = relay.Function([], output)
mutated_mod['func_2395'] = func_2395
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2337_call = mod.get_global_var('func_2337')
func_2339_call = mutated_mod.get_global_var('func_2339')
call_2420 = relay.TupleGetItem(func_2337_call(), 1)
call_2421 = relay.TupleGetItem(func_2339_call(), 1)
func_1893_call = mod.get_global_var('func_1893')
func_1896_call = mutated_mod.get_global_var('func_1896')
var_2427 = relay.var("var_2427", dtype = "float64", shape = (330,))#candidate|2427|(330,)|var|float64
const_2428 = relay.const([4,3,4,3,8,7,4,5,-8,-5,4,-9,1,-2,7,3,1,-1,3,-9,5,-4,-5,-8,9,-7,-9,9,6,1,5,7,9,10,-3,4,8,-6,-6,-6,-6,-7,-9,6,-10,-9,10,-2,3,2,5,-5,-1,-6,3,-1,-2,7,7,-9,10,-3,-3,3,10,-3,1,-8,8,1,-3,-2,3,10,-1,-10,-6,-3,-9,-4,-2,-4,4,-7,-7,4,3,6,-5,7,-5,9,9,10,-10,8,3,7,5,10,4,-1,1,-2,-6,-2,-7,2,-3,-5,9,7,5,-1,-9,10,6,8,-1,-2,1,-7,5,6,4,-10,-3,6,2,8,-8,-3,-10,-10,3,-5,7,5,-3,-9,2,-9,8,-5,-1,-2,-9,-3,-5,-1,8,5,8,-5,-2,-8,-4,1,2,-2,9,4,-8,9,2,6,-6,5,-2,6,5,-8,3,-10,-5,10,8,-4,-2,4,2,6,-8,1,1,3,3,4,-5,1,-9,-4,6,7,-10,6,8,8,-4,7,-8,1,4,-7,2,-8,10,9,-1,-8,5,3,-7,-1,-3,6,9,-5,5,-3,-2,7,7,10,2,1,3,3,8,-10,-2,-4,-6,-5,5,-7,1,8,1,7,7,3,3,-1,1,6,10,4,1,8,-7,2,10,-7,-2,-6,-2,1,6,10,5,-3,-6,-2,6,4,8,3,-7,-1,-5,-8,-6,6,-10,3,2,10,-3,-6,6,-4,3,-4,-10,-9,-10,5,5,1,-8,3,-10,-10,9,2,4,-10,3,-9,-9,-9,-5,-6,-6,6,-1,3,-3,-4,9,-8,10,-1,-1,8,-9,8,1,-4,3,10,10,5,6,-8,5,-9,-3,10,3,6,6,7,10,-4,-5,8,8,1,-5,3,4,-5,-4,-4,6,10,6,9,3,10,10,3,1,5,4,6,-10,8,-7,-1,-2,4,2,-5,-9,-3,3,6,-2,10,9,-8,6,-2,-6,-7,-6,8,4,-3,10,-1,-3,-1,-10,-3,-8,5,-6,-8,-10,3,-7,3,6,-6,3,-3,6,1,4,4,-4,-5,-6,5,1,-3,8,-2,4,-3,7,1,-10,1,8,-6,-4,5,8,-5,5,-7,-4,9,7,4,8,7,-8,1,-2,8,-10,6,-10,-6,1,-10,-10,-2,1,-1,1,-6,-6,5,-4,6,8,1,-4,-5,-8,-1,-3,7,1,4,8,3,7,-4,2,4,-3,-8,-1,2,-7,10,-8,-8,7,-8,-2,-10,10,-1,-5,2,1,5,-4,-1,-3,-3,-10,-7,2,3,-8,-4,-9,1,-9,4,-3,-2,-9,8,-4,1,3,-10,-5,9,-7,2,-8,-2,5,9,-6,-7,-3,-6,-7,10,7,6,-2,7,-10,7,-3,-6,-6,8,-5,-8,-1,5,3,9,3,2,-2,7,10,-9,5,-1,8,5,-6,2,-1,-5,-2,6,2,3,9,-4,-3,1,-6,-1,4,10,10,5,-8,-8,7,-8,-2,-2,10,-9,1,-3,2,3,-1,-4,-4,-4,1,5,-6,6,-3,-8,-6,-9,6,-4,-7,6,10,1,-1,10,-7,-2,7,10,8,-6,6,9,-9,-2,-10,4,-8,-5,10,-5,-10,9,-6,-9,6,7,1,3,9,-6,-4,10,-5,-3,8,-3,4,8,-10,4,-4,-7,-9,5,-8,8,3,-3,10,-5,-3,-1,-10,-9,-5,6,4,-4,-6,2,2,-3,7,-3,-4,-9,7,-8,-8,5,9,-5,-7,-7,-10,6,-8,-4,6,4,-6,-9,-3,-9,-1,6,-8,-3,10,7,-9,-1,-1,-4,2,7,2,-2,10,-8,6,10,-5,-8,-3,6,-9,8,3,6,-9,5,8,6,7,-8,-10,-6,1,3,-2,-3,7,10,3,-7,-1,-2,8,-7,-6,9,-3,-4,-10,8,7,4,5,5,-1,10,5,-1,4,9,2,7,-2,10,7,5,-1,9,4,-4,6,-9,6,3,7,-9,9,-4,6,-4,-2,-8,-9,-7,-2,-8,-4,9,-8,-1,6,3,3,-4,-1,-1,-9,-4,-5,9,-5,-6,-5,-1,9,9,-2,-1,-2,-6,-5,-6,8,-1,4,-2,1,7,5,1,2,3,2,8,9,9,-3,-10,-4,3,3,6,-5,9,3,-8,-10,8,3,10,-10,-9,1,-3,8,-4,3,-4,4,-10,5,-3,-7,9,-5,-5,5,9,1,4,7,-2,-9,-1,-2,-4,-7,2,-6,-7,1,7,3,-5,-7,6,8,-6,-6,1,-8,-7,-10,2,-1,8,-8,-9,2,-7,-2,6,-5,-6,-9,-1,2,3,-6,-1,-3,-2,-5,-4,-4,7,-6,-5,-5,-1,9,-3,-9,-4,-3,-5,-3,5,-7,-4,-10,6,-6,-6,-1,-5,-9,1,7,5,2,4,5,3,10,3,-10,9,-10,-7,2,-3,-2,-8,-2,1,-3,9,-6,-9,2,10,3,-10,-2,5,-8,-6,-7,-3,9,4,9,-1,-6,1,4,-9,-1,-9,-5,9,-7,8,-1,-2,5,4,9,-6,6,2,1,7,2,4,-2,-3,-10,-2,3,3,10,-9,3,-4,7,10,-9,1,-3,-9,10,6,6,-10,4,5,1,2,1,2,10,-5,9,10,-1,-10,4,2,6,9,5,1,-7,-1,-9,-6,7,7,7,9,-10,-10,7,-4,-6,-10,-6,9,5,4,5,2,1,-7,1,-8,-6,-5,2,5,-4,-1,9,-8,9,8,-9,-7,4,-9,-1,5,-7,10,4,7,10,2,7,-4,9,-2,4,1,3,-2,8,2,10,5,7,3,10,-9,-3,-5,6,-3,7,10,-5,-4,2,6,-8,-5,3,-4,-3,-1,-5,9,4,-2,5,10,-6,2,-2,9,1,7,-4,-8,2,-1,6,6,3,8,2,9,6,-6,-10,-8,-9,-7,-6,9,-6,2,-4,9,-10,5,-9,-10,6,3,10,-8,-8,3,-2,1,5,-10,-6,6,10,-8,8,1,-5,-1,-8,6,-6,10,-3,5,-6,9,-6,8,8,4,-5,1,1,-4,1,-7,-1,6,-9,4,-8,7,-9,1,-2,-5,-1,-4,-8,-3,10,-7,-8,5,-4,3,1,9,7,-7,-4,-6,9,-7,-10,-8,-10,-9,8,6,-2,-7,2,-3,5,-8,4,-3,-5,10,3,-4,-4,3,-9,-7,9,4,-9,10,8,-2,3,-5,-10,-4,4,-7,-2,-4,1,-4,5,-4,6,6,-4,-6,6,7,-8,-8,-8,-5,-7,-1,-10,1,-2,8,8,4,2,1,3,1,-9,-8,-6,-9,-1,3,7,5,-8,-9,-6,-10,-3,6,9,9,-8,4,9,-7,6,-10,-6,2,7,-2,-4,-9,3,5,5,-9,3,7,9,-2,5,-5,8,-5,-9,-6,-9,-2,-4,-4,4,-10,-9,1,-10,-2,-7,-6,-6,-8,9,-10,2,-3,-2,5,-10,-3,1,-6,6,-6,7,-6,2,-10,1,-9,5,-1,-9,-2,-1,-10,8,-3,-4,-5,-8,7,-8,-1,8,-6,-4,-9,3,-3,-6,-5,7,-9,7,-5,7,-7,9,-8,9,-2,-10,7,-4,-6,-1,5,10,-2,-7,2,-9,3,-6,-6,2,10,-1,-5,-5,-7,3,6,-5,-10,5,10,-8,1,3,-1,-5,9,5,-1,5,9,-10,-1,5,-1,3,6,4,7,5,4,-8,8,-7,6,-8,1,-1,-7,4,-7,-9,10,10,-3,-5,7,-2,-9,-7,-2,-1,5,5,-6,-7,-8,6,2,-5,-1,3,-8,-4,-3,-1,5,10,-3,1,-6,2,7,-3,-2,-3,3,-2,1,7,6,-3,-1,3,7,-3,2,-10,3,-9,2,-9,-10,-5,6,6,-9,5,9,-1,-1,3,10,-6,5,-10,-7,-1,8,9,7,8,-2,5,2,-2,-2,8,-6,-5,-10,-9,3,-6,-7,7,-8,-9,1,-4,10,5,10,-4,-8,1,-5,6,2,1,5,-5,-6,-5,-8,9,4,-2,9,-3,8,-6,-4,-2,-4,-8,-10,4,-9,2,-8,7,-7,10,-6,5,-7,-8,-3,9,-3,6,2,-9,9,-8,2,-2,-6,-5,3,10,-10,3,9,1,-9,-5,-7,1,8,2,7,-1,6,9,7,-1,8,-10,-4,-10,6,-3,2,8,5,1,5,9,9,3,9,-3,-8,5,4,6,-1,-4,4,2,-3,5,9,1,4,-6,-10,2,-1,-9,-4,-4,3,-7,-9,8,4,-2,-7,-2,9,-4,4,6,-2,-8,-9,1,-10,8,-9,-9,-10,-7,6,-8,5,3,-7,-7,-5,7,-7,5,-9,5,1,-3,7,-8,9,-9,9,6,-2,-6,7,-10,-4,-4,-9,-10,-6,-1,-3,7,8,-6,9,-2,-4,7,-4,10,1,-2,4,9,5,3,3,-9,6,-6,9,8,-8,9,-2,-1,-2,3,5,3,4,-9,6,7,-5,-10,3,-10,-3,-5,5,-7,-9,2,-4,5,1,-4,3,-2,4,-3,-8,-10,-9,5,10,-2,4,-4,-8,-6,-4,5,-2,6,-9,-7,-9,7,1,-3,-5,10,6,8,5,-3,4,8,7,6,-10,-2,-9,6,-2,-10,3,-10,6,-5,2,1,7,6,1,9,-6,-2,-1,-4,9,-4,4,3,10,2,-7,-1,-10,10,8,5,-2,8,5,-6,6,7,2,1,-10,-7,5,3,3,-9,3,-7,-8,6,-7,-8,-4,6,-6,1,1,3,4,-1,9,1,3,5,-1,7,-7,4,1,-9,-8,-3,8,6,1,-2,9,-10,-9,6,-10,-1,-9,10,4,6,-2,2,-4,6,6,-4,1,-7,-3,-4,5,1,10,-3,1,-8,-10,-4,1,-10,10,-1,-9,5,1,-4,5,-2,7,9,7,-2,10,-1,-8,7,4,10,6,5,5,6,7,2,3,1,-1,-9,8,1,3,-7,3,2,5,9,-9,9,-2,7,4,-7,10,7,6,-8,-3,-5,2,-10,-5,6,-5,-9,8,4,5,-9,5,-4,2,-9,-5,-3,-2,-4,1,2,-5,-5,-8,-4,-8,7,-9,-6,1,7,-2,2,3,-2,8,-2,-4,5,-6,4,-4,-7,9,5,3,-7,4,10,7,-6,7,-7,5,-2,3,-4,6,-1,9,7,9,6,5,-3,-7,9,-8,-4,10,-5,3,-1,3,3,7,-1,-6,-10,-2,-5,-3,-4,1,-4,-5,4,-8,-6,-7,10,-3,-10,9,-9,-6,-9,-1,10,10,-4,2,-2,5,1,1,5,4,2,-7,4,7,4,6,-1,7,3,3,2,-5,9,-6,-1,-10,-6,4,-4,-3,1,2,8,-7,-1,-6,8,7,1,-2,4,3,-10,-9,-2,-1,-4,6,4,-2,-6,9,-4,-1,-8,5,-4,-1,9,-9,2,3,4,-9,5,-3,-2,4,7,-10,8,-8,-8,-9,8,-6,-7,-6,10,-9,-7,-5,5,6,5,-8,3,-5,4,6,1,4,-2,-9,8,-7,-8,-5,-10,-6,6,7,-9,-10,6,7,-7,5,1,-2,-10,3,9,-3], dtype = "uint16")#candidate|2428|(2100,)|const|uint16
call_2426 = relay.TupleGetItem(func_1893_call(relay.reshape(var_2427.astype('float64'), [330,]), relay.reshape(const_2428.astype('uint16'), [2100,]), ), 2)
call_2429 = relay.TupleGetItem(func_1896_call(relay.reshape(var_2427.astype('float64'), [330,]), relay.reshape(const_2428.astype('uint16'), [2100,]), ), 2)
output = relay.Tuple([call_2420,call_2426,var_2427,const_2428,])
output2 = relay.Tuple([call_2421,call_2429,var_2427,const_2428,])
func_2434 = relay.Function([var_2427,], output)
mod['func_2434'] = func_2434
mod = relay.transform.InferType()(mod)
mutated_mod['func_2434'] = func_2434
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2435 = relay.var("var_2435", dtype = "float64", shape = (330,))#candidate|2435|(330,)|var|float64
func_2434_call = mutated_mod.get_global_var('func_2434')
call_2436 = func_2434_call(var_2435)
output = call_2436
func_2437 = relay.Function([var_2435], output)
mutated_mod['func_2437'] = func_2437
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2394_call = mod.get_global_var('func_2394')
func_2395_call = mutated_mod.get_global_var('func_2395')
call_2442 = relay.TupleGetItem(func_2394_call(), 0)
call_2443 = relay.TupleGetItem(func_2395_call(), 0)
output = call_2442
output2 = call_2443
func_2447 = relay.Function([], output)
mod['func_2447'] = func_2447
mod = relay.transform.InferType()(mod)
output = func_2447()
func_2448 = relay.Function([], output)
mutated_mod['func_2448'] = func_2448
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2287_call = mod.get_global_var('func_2287')
func_2289_call = mutated_mod.get_global_var('func_2289')
call_2481 = relay.TupleGetItem(func_2287_call(), 0)
call_2482 = relay.TupleGetItem(func_2289_call(), 0)
var_2513 = relay.var("var_2513", dtype = "uint16", shape = (210,))#candidate|2513|(210,)|var|uint16
bop_2514 = relay.logical_or(call_2481.astype('bool'), relay.reshape(var_2513.astype('bool'), relay.shape_of(call_2481))) # shape=(210,)
bop_2517 = relay.logical_or(call_2482.astype('bool'), relay.reshape(var_2513.astype('bool'), relay.shape_of(call_2482))) # shape=(210,)
func_2231_call = mod.get_global_var('func_2231')
func_2233_call = mutated_mod.get_global_var('func_2233')
call_2518 = func_2231_call()
call_2519 = func_2231_call()
output = relay.Tuple([bop_2514,call_2518,])
output2 = relay.Tuple([bop_2517,call_2519,])
func_2550 = relay.Function([var_2513,], output)
mod['func_2550'] = func_2550
mod = relay.transform.InferType()(mod)
var_2551 = relay.var("var_2551", dtype = "uint16", shape = (210,))#candidate|2551|(210,)|var|uint16
output = func_2550(var_2551)
func_2552 = relay.Function([var_2551], output)
mutated_mod['func_2552'] = func_2552
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2287_call = mod.get_global_var('func_2287')
func_2289_call = mutated_mod.get_global_var('func_2289')
call_2578 = relay.TupleGetItem(func_2287_call(), 0)
call_2579 = relay.TupleGetItem(func_2289_call(), 0)
output = relay.Tuple([call_2578,])
output2 = relay.Tuple([call_2579,])
func_2590 = relay.Function([], output)
mod['func_2590'] = func_2590
mod = relay.transform.InferType()(mod)
mutated_mod['func_2590'] = func_2590
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2590_call = mutated_mod.get_global_var('func_2590')
call_2591 = func_2590_call()
output = call_2591
func_2592 = relay.Function([], output)
mutated_mod['func_2592'] = func_2592
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2287_call = mod.get_global_var('func_2287')
func_2289_call = mutated_mod.get_global_var('func_2289')
call_2621 = relay.TupleGetItem(func_2287_call(), 1)
call_2622 = relay.TupleGetItem(func_2289_call(), 1)
func_2287_call = mod.get_global_var('func_2287')
func_2289_call = mutated_mod.get_global_var('func_2289')
call_2631 = relay.TupleGetItem(func_2287_call(), 1)
call_2632 = relay.TupleGetItem(func_2289_call(), 1)
func_1212_call = mod.get_global_var('func_1212')
func_1216_call = mutated_mod.get_global_var('func_1216')
const_2635 = relay.const([3,3,-8,-4,-6,8,4,2,7,-5,9,-1,5,7,5,-6,1,6,4,6,4,4,9,9,-8,-8,10,-5,3,-6,-10,-7,-2,10,-10,7,-10,1,9,-5,6,3,7,2,-9,-8,-1,-10,5,-10,-8,-10,-10,-10,-1,-7,2,-3,-5,9,-1,5,-10,-6,6,-2,5,-5,-3,5,1,10,-1,2,-6,-1,6,1,-2,-2,5,3,10,-8,-4,-6,6,-10,-9,-2,-3,-3,1,-6,-3,1,6,9,-3,-8,1,-4,2,-3,-8,7,9,2,-6,-5,9,-8,-2,-9,-5,4,1,-4,-3,5,1,3,-3,-4,-5,9,-6,9,7,3,-4,-9,-4,-9,7,8,-7,-2,8,-1,-4,5,9,-8,-1,-8,7,-4,-8,9,9,7,-8,8,4,7,10,-10,7,3,10,-4,9,-9,3,6,3,1,2,-7,9,-6,7,7,-5,-3,4,-1,7,1,8,-3,-1,-6,4,-9,9,-1,9,-2,10,9,-3,6,2,2,-7,5,-9,-10,4,5,3,2,4,8,1,6,2,6], dtype = "uint16")#candidate|2635|(210,)|const|uint16
const_2636 = relay.const([6,-2,7,1,4,5,1,-5,-3,10,3,-1,-5,-4,6,6,-5,-4,10,10,-3,5,-6,-10,1,10,-9,-6,-1,5,6,-9,10,5,-9,5,-3,-7,-3,8,4,2,7,10,-6,7,-4,5,10,-3,-7,2,-1,9,-5,-9,-2,-2,7,-1,7,-7,2,7,1,2,10,-10,-2,-4,5,-4,2,-8,-10,-4,-6,-9,2,-2,-6,3,-6,-7,-1,5,-2,-2,7,-5,-10,-5,1,-5,-10,6,-1,1,9,8,-7,-5,-2,-5,-7,-7,3,-3,7,-5,-5,2,9,3,-3,9,4,1,9,6,-8,2,6,-4,-3,2,2,-2,-9,-1,8,2,-2,-9,-9,-8,7,-6,7,-9,-1,-6,7,5,7,-10,-6,8,-7,10,1,3,-9,-2,-1,5,-4,-6,-1,10,-7,-2,5,2,6,-6,-1,6,7,4,-10,1,-2,-6,-10,-2,7,1,-5,-1,-6,-9,-7,-6,-2,2,1,-8,2,7,-2,-2,-4,-10,7,-9,10,9,2,2,6,-8,9,2,-3,5,8,4,-10,1,8,10,10,5,-5,-8,1,7,-5,3,-8,3,6,9,2,5,4,7,-5,7,-7,10,-4,-10,-6,7,1,-1,5,-5,2,6,5,7,4,-9,-1,-1,-8,4,-3,-7,8,1,7,-2,-6,-2,-10,1,5,6,-1,-10,9,-2,-2,-7,6,-6,6,10,4,2,-3,1,5,5,-6,6,1,-10,-8,5,-8,4,7,-7,10,-9,4,-2,-9,8,5,3,-3,-9,1,-4,-3,3,6,4,-1,8,3,8,-10,7,2,1,2,-8,-2,-10,-3,-8,4,5,-5,3,-7,-9,-9,2,8,-9,-1,-1,-1,1,-7,5,3,9,4,-7,4,8,4,-7,3,-1,4,9,-7,3,1,5,9,1,5,6,4,3,6,-8,-5,-5,-5,6,5,7,-9,-8,-6,4,7,-3,6,6,-5,2,7,10,-10,-5,-8,-2,5,-7,-1,6,-3,-6,4,-2,10,2,-9,-3,-1,-7,1,7,-9,8,-7,7,-3,10,9,-8,-6,-10,3,6,-10,-4,-2,8,7,-3,-10,4,-7,3,-6,7,-3,7,-8,1,-7,10,8,-3,6,1,10,1,10,3,7,10,-7,-6,-1,5,-2,7,3,-6,8,6,3,-5,-1,10,8,-10,6,-2,-2,5,1,3,4,4,-7,1,-8,-2,7,-9,-2,2,4,5,8,-10,-3,-3,-4,-10,7,-10,10,-6,-6,3,-3,-7,6,2,3,-3,5,-5,4,10,9,-8,4,7,6,-9,3,-5,10,-5,9,1,-5,-5,-2,-2,-6,9,4,-1,5,1,-8,9,6,-2,1,9,10,8,-8,2,-3,-6,-8,-7,-9,-3,7,-6,5,5,5,-3,-7,-6,3,1,-2,3,5,3,10,-2,7,9,-8,-7,10,8,2,4,-6,1,1,-8,-4,10,-8,-1,10,6,-6,-3,-4,6,6,1,-5,10,4,4,-10,2,-7,-4,4,-7,2,9,-2,1,-4,-2,3,-7,-1,-7,-5,10,5,-1,3,-9,7,-2,-2,-6,5,5,1,9,3,6,6,-2,-1,9,-8,-10,6,-3,-7,7,9,4,-4,-6,6,4,8,-2,-8,3,-9,10,-7,6,-4,-7,-4,6,1,-4,-2,10,4,-6,-1,8,-2,-5,-3,-4,-3,1,2,-3,9,-10,6,10,-2,-4,-5,-10,3,7,-8,3,2,7,3,-6,9,-1,6,9,-8,-10,5,4,-7,4,-2,7,2,7,-5,-8,-9,-3,10,4,5,3,-5,-10,7,-8,-2,4,-8,-1,-4,-1,-10,1,-4,-10,-10,-1,-9,9,-4,5,-3,-1,-2,8,-3,-2,-1,3,-7,-4,-5,3,-3,-9,1,-4,5,-9,-2,-4,4,-8,-8,-10,-3,1,9,-1,8,1,4,-8,-5,-7,-2,1,-6,10,-1,8,-5,1,4,-8,2,4,7,6,-8,8,-3,-5,10,-2,6,-5,8,4,-10,6,4,-9,-3,4,7,3,-2,10,6,3,1,-4,3,-2,-2,4,-8,8,7,3,5,5,-4,1,8,-3,-1,-9,5,-7,10,5,-4,9,5,7,-10,9,-9,6,-6,10,4,-2,-3,-7,2,-2,3,10,-5,-9,-1,-1,-3,-2,3,-6,1,7,-9,-6,-6,-9,-2,-8,8,-4,-8,-1,-9,9,3,9,5,10,2,-7,6,7,7,-7,-3,-3,-3,3,9,3,9,-8,2,2,-3,10,5,9,1,6,-4,-6,-7,-8,2,8,7,-10,3,-1,-1,8,-6,-9,-3,-2,5,-4,8,-9,-5,-4,5,1,5,8,3,-1,3,8,4,2,8,2,-10,-6,9,9,-3,-4,2,-4,8,-6,5,8,3,-9,-6,5,-3,10,3,6,10,6,-9,-9,-8,-9,-8,-4,-5,-10,-5,6,9,2,5,-8,7,9,4,5,2,7,-1,8,4,-8,6,1,-9,-7,-10,-1,9,-2,-5,-7,3,6,-4,1,-4,-9,2,-8,-2,9,-8,-8,8,9,9,2,-9,5,3,-1,4,1,-1,-10,2,4,10,6,-2,-3,1,4,-4,-5,-4,7,-8,7,-5,-2,-4,6,8,2,-7,10,2,1,-2,4,3,-7,10,-2,-9,-2,1,-9,-10,-9,-7,8,-5,-5,3,7,1,-9,-6,-5,-3,1,7,-5,2,5,-4,-9,1,-6,-3,2,-6,4,2,-8,6,-1,9,9,9,-3,8,2,5,-8,2,2,-3,-10,8,9,1,-9,7,4,-4,9,-6,-5,-8,9,5,7,-10,10,-9,3,3,10,10,6,-10,7,-5,-9,5,6,-1,-7,-2,-10,8,-10,-3,-10,6,-6,10,-2,-8,-1,-9,3,10,3,-7,-2,6,7,-4,-2,-3,-7,-4,10,-10,-4,-10,8,-7,1,-6,10,-6,-1,1,3,4,7,-8,1,-9,-6,-2,-8,-7,-4,5,5,8,-4,-1,-3,4,4,-8,-10,10,8,2,2,9,2,-7,-5,-3,5,3,-9,-1,-1,-10,8,8,-1,-3,10,8,-6,-7,9,8,-3,4,-2,-7,-4,5,-6,-9,3,-1,-6,5,3,2,3,9,-3,-8,-10,7,1,-7,6,5,9,-4,-6,-8,-4,-2,-2,-3,-4,9,7,7,9,6,-1,7,-8,9,-10,2,7,1,4,4,6,-1,1,-2,3,8,-8,6,-5,-9,-1,-1,6,10,7,-8,-1,-7,-1,5,-6,10,9,9,2,-1,10,3,-3,5,-1,4,-6,-4,-7,-10,5,6,-7,-8,-6,4,-2,-1,4,-4,1,-4,-8,-3,-1,-9,-3,10,1,-1,-8,2,-3,-4,2,-9,7,-9,6,-9,5,1,2,-9,1,1,-6,9,7,6,3,-2,1,-5,-5,3,-2,-7,-6,-9,-8,-6,3,-4,1,10,5,6,5,-2,8,10,10,6,6,2,-6,-8,6,-1,-10,-2,-3,1,-10,8,-8,7,6,1,9,-5,4,5,-7,-8,7,2,-8,10,7,7,-6,1,-10,-3,-8,3,4,-3,-2,10,2,-1,-6,-10,7,-8,6,5,2,4,-10,3,4,-7,-8,6,-8,2,-8,-8,-2,9,4,3,-4,7,3,-8,-9,-3,-1,-8,-6,4,3,-8,-6,4,-3,-7,5,10,5,2,4,-2,-4,5,-9,3,-9,-8,10,-7,10,-1,-8,-2,1,-9,-9,2,-1,3,-6,-5,-1,-9,6,5,10,2,7,2,-10,-4,4,-2,5,-9,4,-5,7,-8,-10,3,-9,7,-1,-5,-2,9,9,4,-7,-4,-7,9,-2,8,-10,-3,8,-6,-1,-9,3,10,9,5,-7,8,5,9,-4,1,-10,4,4,-8,-4,9,-6,7,-5,3,1,-7,9,-6,-2,7,-3,1,-5,-4,9,6,4,-1,8,-4,-5,5,-6,-7,10,-2,6,-10,-4,10,10,9,1,-7,-5,-6,-2,4,-4,10,-6,-6,-8,5,-3,-5,3,8,-3,-1,-6,9,-7,-9,6,4,-2,6,7,1,-8,-4,8,3,7,-10,-10,-4,-5,-10,10,3,-6,-1,-2,-4,7,-1,10,-8,7,-1,-8,8,5,4,-3,9,-8,2,-5,10,4,8,-5,-2,-4,-1,-7,-8,8,2,-1,-1,-5,10,-9,9,4,-1,4,3,-8,4,5,2,6,-7,6,7,-10,9,-1,-5,8,6,-1,1,5,-7,-7,-6,-10,9,8,7,-5,9,7,-1,-2,-6,-5,-2,-2,1,-5,-10,9,-3,5,4,6,-4,-7,-7,-9,2,10,4,-3,9,9,7,9,4,-1,2,4,-10,10,-10,10,4,-7,2,-3,-10,-10,-2,-8,-5,-7,-6,-2,9,-6,4,2,6,6,1,-8,-2,9,-9,10,-6,10,7,-8,5,-7,8,7,-3,3,-2,7,9,-10,5,-4,-7,10,-8,2,2,4,-1,5,6,7,9,4,4,-10,-5,9,-1,-8,9,4,-9,3,-3,-5,-8,-9,-8,7,-8,-10,-1,7,-2,-3,-4,4,7,-5,-6,9,5,-1,2,7,-6,3,8,1,4,10,-1,3,-2,10,1,1,9,8,-1,1,4,5,5,-1,-10,-9,5,-2,-2,-6,4,-8,-1,-4,3,-10,-3,-8,-2,1,10,-4,-4,6,9,-9,-9,-7,5,-5,-9,7,1,-2,4,7,-3,-1,-7,3,8,2,10,8,-1,8,-7,3,8,-10,-9,6,-10,-1,5,7,-7,-1,-6,-6,9,8,7,-3,-7,7,2,7,4,10,-3,5,6,9,-2,-1,-7,8,-10,-10,7,-2,3,-2,-9,-8,-9,-2,-6,7,6,-2,8,-8,2,5,5,8,-9,9,-3,10,-10,9,3,-8,5,-3,-10,3,-9,3,6,-6,-2,-2,-1,-8,-5,9,-4,-9,6,4,-5,10,-5,-1,-4,5,1,-4,-10,-5,9,2,-10,-2,5,4,1,5,9,-7,5,1,-1,-8,7,-3,7,2,8,-2,10,-4,-10,-8,-7,1,9,7,7,1,9,2,1,3,-8,2,-1,-8,7,1,3,5,-4,-1,10,-6,-6,-4,2,6,-2,-5,-7,5,3,8,-6,7,7,-4,2,5,8,-6,-7,-10,1,2,-10,-1,-1,-8,-4,-10,5,-8,-3,6,2,-4,4,-10,9,2,10,-4,-2,1,-7,7,-4,2,7,3,-2,2,2,1,-5,3,-4,-8,9,-2,-10,-2,-3,-4,-4,2,3,-2,-6,-6,-5,6,-8,-8,4,5,7,8,4,10,8,-4,8,6,10,-4,-1,-6,9,-5,-2,-6,-8,10,-6,-9,-4,5,-8,5,3,5,-4,-2,-5,-3,-7,-7,-5,6,7,8,-8,-3,-4,-6,-8,10,4,-4,-8,7,7,-2,-2,6,4,3,6,10,-6,6,1,-5,-7,3,7,-3,-5,9,-3,-9,10,1,-9,8,9,-9,-10,-5,-5,-2,-10,7,8,-3,10,10,-5,5,-1,-9,-7,-1,5,1,4,-2,-10,10,-4,1], dtype = "uint16")#candidate|2636|(2100,)|const|uint16
var_2637 = relay.var("var_2637", dtype = "float32", shape = (22, 4))#candidate|2637|(22, 4)|var|float32
call_2634 = relay.TupleGetItem(func_1212_call(relay.reshape(const_2635.astype('uint16'), [210,]), relay.reshape(const_2636.astype('uint16'), [150, 14]), relay.reshape(var_2637.astype('float32'), [4, 11, 2]), ), 0)
call_2638 = relay.TupleGetItem(func_1216_call(relay.reshape(const_2635.astype('uint16'), [210,]), relay.reshape(const_2636.astype('uint16'), [150, 14]), relay.reshape(var_2637.astype('float32'), [4, 11, 2]), ), 0)
uop_2653 = relay.atanh(call_2631.astype('float64')) # shape=(91, 15)
uop_2655 = relay.atanh(call_2632.astype('float64')) # shape=(91, 15)
bop_2656 = relay.left_shift(call_2631.astype('uint16'), relay.reshape(uop_2653.astype('uint16'), relay.shape_of(call_2631))) # shape=(91, 15)
bop_2659 = relay.left_shift(call_2632.astype('uint16'), relay.reshape(uop_2655.astype('uint16'), relay.shape_of(call_2632))) # shape=(91, 15)
output = relay.Tuple([call_2621,call_2634,const_2635,const_2636,var_2637,bop_2656,])
output2 = relay.Tuple([call_2622,call_2638,const_2635,const_2636,var_2637,bop_2659,])
func_2663 = relay.Function([var_2637,], output)
mod['func_2663'] = func_2663
mod = relay.transform.InferType()(mod)
mutated_mod['func_2663'] = func_2663
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2664 = relay.var("var_2664", dtype = "float32", shape = (22, 4))#candidate|2664|(22, 4)|var|float32
func_2663_call = mutated_mod.get_global_var('func_2663')
call_2665 = func_2663_call(var_2664)
output = call_2665
func_2666 = relay.Function([var_2664], output)
mutated_mod['func_2666'] = func_2666
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1839_call = mod.get_global_var('func_1839')
func_1841_call = mutated_mod.get_global_var('func_1841')
call_2679 = relay.TupleGetItem(func_1839_call(), 0)
call_2680 = relay.TupleGetItem(func_1841_call(), 0)
output = call_2679
output2 = call_2680
func_2685 = relay.Function([], output)
mod['func_2685'] = func_2685
mod = relay.transform.InferType()(mod)
output = func_2685()
func_2686 = relay.Function([], output)
mutated_mod['func_2686'] = func_2686
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2287_call = mod.get_global_var('func_2287')
func_2289_call = mutated_mod.get_global_var('func_2289')
call_2714 = relay.TupleGetItem(func_2287_call(), 1)
call_2715 = relay.TupleGetItem(func_2289_call(), 1)
output = relay.Tuple([call_2714,])
output2 = relay.Tuple([call_2715,])
func_2717 = relay.Function([], output)
mod['func_2717'] = func_2717
mod = relay.transform.InferType()(mod)
output = func_2717()
func_2718 = relay.Function([], output)
mutated_mod['func_2718'] = func_2718
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2726 = relay.var("var_2726", dtype = "float32", shape = (15, 16, 5))#candidate|2726|(15, 16, 5)|var|float32
uop_2727 = relay.sinh(var_2726.astype('float32')) # shape=(15, 16, 5)
output = uop_2727
output2 = uop_2727
func_2731 = relay.Function([var_2726,], output)
mod['func_2731'] = func_2731
mod = relay.transform.InferType()(mod)
mutated_mod['func_2731'] = func_2731
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2732 = relay.var("var_2732", dtype = "float32", shape = (15, 16, 5))#candidate|2732|(15, 16, 5)|var|float32
func_2731_call = mutated_mod.get_global_var('func_2731')
call_2733 = func_2731_call(var_2732)
output = call_2733
func_2734 = relay.Function([var_2732], output)
mutated_mod['func_2734'] = func_2734
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2777 = relay.const([[[True,False],[True,True],[True,True],[True,False],[False,True],[True,True],[False,False],[False,False],[True,False]]], dtype = "bool")#candidate|2777|(1, 9, 2)|const|bool
var_2778 = relay.var("var_2778", dtype = "bool", shape = (8, 9, 2))#candidate|2778|(8, 9, 2)|var|bool
bop_2779 = relay.logical_or(const_2777.astype('bool'), var_2778.astype('bool')) # shape=(8, 9, 2)
bop_2782 = relay.mod(var_2778.astype('float64'), relay.reshape(bop_2779.astype('float64'), relay.shape_of(var_2778))) # shape=(8, 9, 2)
output = relay.Tuple([bop_2782,])
output2 = relay.Tuple([bop_2782,])
func_2788 = relay.Function([var_2778,], output)
mod['func_2788'] = func_2788
mod = relay.transform.InferType()(mod)
var_2789 = relay.var("var_2789", dtype = "bool", shape = (8, 9, 2))#candidate|2789|(8, 9, 2)|var|bool
output = func_2788(var_2789)
func_2790 = relay.Function([var_2789], output)
mutated_mod['func_2790'] = func_2790
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2812 = relay.const([[[-2.385986,7.867287,2.565745,-2.249597,0.408442,0.793416,8.857897,-8.378094,-1.189341,4.606109],[7.283471,8.950797,-9.026628,-9.890333,-6.142470,0.291815,-9.081060,7.317750,-1.434323,4.975054],[8.173118,-6.282535,-9.375971,-0.584470,-6.946251,-2.136348,0.430733,3.875320,4.353254,-0.054995],[3.385121,-4.492944,-2.496274,8.760844,-0.704258,-3.342661,4.319885,-0.167294,-4.768286,0.951320],[-0.156974,-2.849371,7.993814,7.578863,9.341396,9.562317,2.488252,-7.636978,1.057346,6.758785],[-4.623083,6.516481,-1.846207,-9.991463,-3.102719,8.520141,6.858755,-2.529804,-5.632708,-4.519334],[9.766695,-5.480199,5.966388,-8.422060,2.722682,-7.745685,-8.744528,5.123078,4.184776,5.822767],[1.261429,-8.965955,-7.756820,-9.935186,-3.673500,-3.210538,-4.803895,3.078127,-0.271095,-7.084250]],[[2.612376,4.949040,1.966852,-1.057624,-4.443866,-5.743254,-4.060674,8.405696,-9.006982,0.181791],[-4.452025,-4.646680,6.743582,-9.546491,-9.198530,3.819500,-6.383091,0.825388,5.337803,-0.901470],[8.654876,-8.562412,-6.734726,-1.053242,3.944688,3.599215,3.789726,-6.474725,4.216684,-0.275337],[1.623217,6.104297,5.869956,8.209064,-7.978607,-7.509023,6.588154,-4.056349,-0.290489,-6.516452],[-1.020428,2.933239,3.063309,-4.699866,1.600832,-0.244400,-4.207152,-7.167909,-7.969585,4.593636],[2.809561,-0.588800,-9.501155,-0.577971,9.050065,-6.661882,1.004776,-3.520618,6.022701,2.574190],[9.737011,2.906623,-6.290487,8.752731,-5.365640,0.042085,0.377092,-9.922596,-0.980322,-8.275505],[9.377568,-9.279260,0.531796,0.881403,4.850749,3.534400,6.249784,1.853828,-1.990062,-3.839261]],[[2.287838,-3.550038,-3.502569,-5.890065,-9.976571,-1.259228,3.480351,-3.496134,7.959279,3.413540],[-6.449272,-1.759863,2.269486,2.278780,-0.029775,-2.658273,-5.937278,-9.796626,7.841388,9.820439],[-4.598723,3.207951,-2.322843,-3.646643,-5.834300,2.366752,-9.112259,-2.637207,7.905924,6.698465],[2.600023,9.733378,-6.557743,-3.788872,-5.181863,9.494762,-7.755716,-6.830491,-1.034557,-6.166191],[-1.967448,-5.339097,2.269642,-0.655871,-3.664190,2.986266,-6.459779,7.995414,-5.435893,-3.418959],[-5.619664,8.000054,4.484039,4.670251,-7.363899,-4.677194,2.645352,7.630130,4.069931,0.993363],[2.293181,1.848662,7.132979,9.982381,4.482999,-5.517880,4.215094,-2.876125,6.081839,6.935442],[7.548513,-5.761122,-5.732053,-9.357374,-6.964514,7.896650,-4.046831,4.839107,-2.567683,3.258053]],[[-6.247168,8.521830,-1.812606,-4.295134,5.619700,4.507079,5.214846,-7.005526,-5.996494,8.243621],[-4.194649,-1.069033,-5.259941,2.131400,-2.977031,-0.336594,-2.401080,1.671810,3.837289,0.389607],[3.605036,3.412386,-1.512037,-4.621041,-9.131593,2.394345,-6.747726,7.233610,7.886263,1.319445],[-5.109544,6.219076,0.792081,1.497017,-4.735428,-0.696838,8.827816,6.797084,7.024792,-6.290262],[4.085094,-6.084761,-6.918964,-6.924991,-1.834689,8.042522,2.829640,-2.437971,2.192635,8.477432],[-2.580315,8.720289,-2.229877,7.068856,-5.367230,8.823869,-8.289246,-6.051737,-0.694100,-7.212321],[-3.512787,2.650565,-2.242944,6.440002,7.275768,-6.330937,-7.971837,9.089167,-9.258239,-4.888505],[0.976012,-2.910942,5.139462,-1.335702,-8.322496,2.202974,-9.645096,-1.864579,-0.440005,9.106250]],[[3.286481,0.267797,2.609822,-0.888029,2.608312,4.536397,-8.927967,-0.342359,-6.941051,9.247139],[-8.582989,9.059152,6.313557,8.575150,2.659540,4.364702,-3.646597,-9.978568,-8.413188,0.966385],[1.225840,-1.107627,5.578959,-4.490004,2.167993,-6.140607,-7.742637,-9.596301,8.750216,1.307054],[-6.998461,2.326765,5.704640,1.711343,-1.155196,4.808713,4.066411,-0.296072,4.110742,-1.339598],[-5.257450,-3.875978,-2.179440,0.134094,-9.008352,8.467729,8.004782,-9.609438,-9.425740,-6.036763],[-0.403524,1.840262,7.227213,-3.640610,-1.933809,5.766725,5.535414,9.167206,7.041993,-4.713166],[8.912136,-9.794825,-7.713440,9.476106,-7.680214,-2.672903,7.229000,-0.088156,2.713189,6.485008],[7.081142,-7.109119,-9.024717,2.812917,-9.181914,-8.303888,8.984819,0.196729,5.755639,-9.980389]],[[-5.879323,-0.917326,-5.095673,5.285458,-8.334325,5.349092,0.856956,-8.009480,9.365510,3.707497],[6.041219,1.333310,2.997133,3.783130,7.587790,-6.700546,-8.775253,-0.383111,-0.698076,-8.010215],[-7.973349,-7.291363,8.097995,-7.014459,-9.682901,0.685075,6.468761,-3.164496,1.697497,4.383147],[-3.867101,-1.884609,-9.153220,4.020560,-3.966408,1.226846,-0.676820,9.710279,8.101339,-2.145520],[0.492720,1.531358,0.816722,1.995729,3.670495,5.745769,6.553572,-2.673794,-1.447772,-5.683626],[3.699872,-5.944942,0.362216,-9.092599,4.363330,8.213070,-5.751416,7.749634,-7.229920,-4.090620],[3.128990,1.085632,6.080938,-3.758669,-3.696337,5.684934,2.201068,5.568159,2.764936,0.300419],[-3.209543,4.819624,5.865522,-9.290080,-2.268506,-6.238931,2.018270,-3.172230,8.811595,-1.787822]],[[4.130744,-9.909849,0.896319,9.389365,8.103848,6.918465,6.478578,-1.543924,8.717966,5.120831],[1.054897,5.880870,4.345056,5.184056,8.240606,-2.276974,7.681427,4.852282,-9.499100,1.355061],[6.313655,-6.247046,-0.647473,4.327631,9.861833,4.118437,-9.459507,0.492570,-9.882953,5.579544],[7.704668,-7.226094,-3.854990,9.783656,-9.952871,-6.491141,-5.827017,0.976957,5.004811,-3.725668],[9.930090,9.157719,4.253527,3.305478,9.053238,6.968559,8.591481,-0.378434,4.282388,-1.133393],[-1.710790,8.405402,8.235622,2.432874,3.568894,-9.003092,5.567937,1.958009,-0.565731,-7.324287],[1.766851,-9.730945,6.687286,-8.370885,8.402853,7.971820,9.109789,-5.504618,9.625374,0.623611],[1.314503,9.914777,1.456025,7.715090,1.768791,2.520639,7.065379,2.148723,-5.362420,8.731509]],[[3.476736,-8.719356,7.593593,2.122106,-6.295867,-3.254901,-0.144143,2.006074,-2.850307,-0.376460],[-8.698006,-1.309523,4.322530,5.126168,3.338119,8.751576,7.357397,6.348066,-3.693985,4.525446],[0.454348,4.092721,5.794618,9.626039,8.384616,4.341572,1.359290,-5.750359,-2.501131,6.345392],[-5.512024,-9.981505,-2.328560,3.791590,-2.056780,0.362637,-8.346523,-0.011016,9.148470,9.364354],[6.692530,6.959597,-3.099858,9.735207,7.009592,-8.916040,-7.486951,5.386607,-7.996980,3.671043],[4.793405,-9.159616,1.503998,4.008358,-8.384780,-6.529950,3.780863,-1.719287,7.347833,-1.504872],[-6.602418,-1.660724,4.207549,3.219249,-3.544816,0.379465,-6.981770,4.117762,-9.033419,-8.606386],[6.627821,-8.043008,-6.614870,-7.049372,-5.446033,-3.027527,1.079303,3.375322,-8.687338,-0.293745]],[[-5.586077,-1.263653,4.637675,-6.786029,-3.992319,-7.276857,9.838688,4.023981,-6.611339,4.712867],[-2.607949,3.357433,1.381163,4.621269,-2.623664,-2.992678,0.195193,0.868971,1.254659,-1.250524],[-5.469502,5.204647,8.563320,-0.299280,4.844812,-2.721089,1.460004,4.626839,8.463600,8.563174],[0.741724,-6.593641,-9.328498,5.328055,6.305524,-9.284095,7.967703,-3.319811,-1.132656,-5.723498],[-8.353141,2.783965,-5.797140,-1.199384,9.542148,7.419767,-7.758036,8.213921,1.845103,-6.231299],[-5.060633,3.531258,-2.204251,-3.759245,-5.433997,-9.600743,-9.791855,-4.002295,9.810660,-8.198300],[-9.326676,9.334384,0.707396,-9.897633,0.568398,8.971853,1.147727,7.313432,-4.786454,-0.513751],[-7.614418,-7.126184,-4.604255,-1.018138,9.330478,3.149135,-6.663917,-6.402904,0.353063,7.956543]],[[4.617197,6.190602,3.776982,4.033382,-1.250106,-9.860200,-0.041570,2.201276,2.074372,-3.540671],[-9.826866,0.513492,-0.533956,-4.869881,-8.182218,4.169883,1.954371,-7.513692,6.868680,-6.830144],[9.817980,7.305993,3.695168,-8.689149,-8.841533,-6.208166,-4.067256,9.894984,0.434886,0.366063],[0.984394,-1.785868,4.981433,2.733706,-4.992145,-9.751208,-7.560853,5.029747,3.865638,1.124655],[9.231628,-7.759577,9.219400,-5.988232,-1.071061,-9.562573,-7.321875,-9.851965,4.633761,0.887084],[8.110630,1.942713,9.614128,-7.667543,-3.201581,-2.842333,0.696314,-7.339911,-0.319577,9.429728],[-9.676860,5.940422,-5.971650,-9.158169,3.182477,9.535303,3.118473,9.554543,-0.319177,9.914864],[7.350410,-5.138808,9.641521,4.143237,2.454201,-9.602848,-7.303153,0.411623,7.733852,-2.713707]]], dtype = "float64")#candidate|2812|(10, 8, 10)|const|float64
const_2813 = relay.const([[[2.068310,-1.535693,5.148219,-7.716781,6.851175,-6.882448,-8.134454,-5.737075,2.351260,0.417815],[8.500517,3.573008,-4.919718,-7.213974,-6.195910,4.522475,3.153236,-9.831618,-4.198040,1.915521],[-4.785700,2.177940,7.215971,-6.387207,3.095138,-4.127709,8.987337,5.440274,-1.204271,-5.063342],[3.373974,4.258178,3.531585,1.152496,-0.202536,9.976068,-9.291733,-5.102014,6.278775,5.367321],[-7.332685,0.981774,4.271755,5.571095,0.160634,-0.570975,9.376043,4.497775,7.100976,-4.144703],[7.065727,-9.970830,-8.237758,-8.464388,7.863796,1.628950,8.314344,2.141370,3.070999,1.251594],[-9.425497,-5.136726,4.911036,-1.269370,-3.471728,-2.749751,9.165024,-8.241002,8.942324,8.074945],[-5.013194,-2.498689,7.983343,-3.404444,3.983671,2.448168,-9.207973,8.002527,6.053314,-3.541161]],[[3.986334,-1.097806,-0.220129,-5.683675,4.866524,-2.165393,-8.585226,0.709154,4.435291,1.415523],[4.613890,-0.749455,-6.745763,4.558543,-4.122427,8.218582,9.907920,-1.308325,-2.973449,4.919042],[-0.371120,3.975957,2.969324,-3.143753,1.115214,9.523358,5.009257,-0.311490,9.957026,4.470861],[6.744538,0.372086,-1.335525,-3.549435,2.366305,-6.838109,-4.381712,-4.587805,2.883840,-2.331817],[-7.674369,8.717154,6.235537,1.998691,-8.684898,-3.232600,-7.606012,-5.206841,0.860761,3.602257],[-8.627027,-7.680448,-8.442472,-8.695854,-6.563358,-9.650031,-2.038334,-1.468050,1.353951,9.736000],[-9.033638,0.473440,2.020360,-5.038400,0.249173,8.802454,8.176206,-5.899482,7.166950,1.410727],[6.186120,-9.595676,-6.309064,2.170074,3.490490,4.869379,0.153137,-1.062999,-2.278661,0.343412]],[[-5.906731,6.277123,4.790193,1.706968,9.885678,-7.973486,-2.330336,-6.000354,1.876865,-1.818067],[-5.577289,-7.371807,1.769995,9.331522,1.795319,6.702442,6.206607,-3.930247,-1.031066,1.064089],[-4.127656,-6.665895,3.631017,4.691112,-4.609035,3.712374,2.183277,-5.293688,-2.605225,-5.708787],[5.518348,4.819716,9.525755,3.252966,-0.896149,1.632833,-2.822651,9.024616,-6.207254,-4.582787],[2.872459,-4.520842,5.291936,7.836804,-6.511276,-0.774356,6.784510,-4.376185,5.540898,-8.356545],[2.784181,-9.469652,5.927792,6.303263,7.931983,-8.624941,5.746369,7.547433,-4.616677,-9.854728],[6.004297,-3.319204,-0.095860,0.035217,-6.762394,6.746613,4.904501,5.075388,-8.624230,-7.892734],[-2.675814,-6.170719,7.385765,-9.428467,-3.211395,-2.101103,4.588437,-7.392058,-7.719084,3.466940]],[[6.172417,-9.801167,2.098674,3.588522,-6.992224,4.232298,-4.262006,-7.893932,7.524579,6.193127],[9.753189,6.889541,-5.556629,-7.425120,2.441065,7.868447,8.793845,7.401599,2.460297,-7.916775],[8.587200,-4.746424,5.867109,3.454578,-7.019010,-2.355699,7.373116,-6.251772,4.834922,-6.856813],[7.864770,1.161363,2.004331,9.399056,5.680132,-7.806985,8.677303,-5.248720,3.133542,2.688924],[0.752035,7.332540,-4.158260,-4.243136,-9.883797,-7.663843,9.544683,-2.344620,0.700651,2.030482],[2.479673,9.563284,5.957390,3.510274,6.350755,-8.583523,-1.914187,8.875129,3.671633,-0.474649],[-4.028105,3.655198,-7.247154,-8.099671,1.739060,-5.076325,8.781671,7.318459,-7.000560,8.441178],[-0.469551,-5.741333,5.126553,2.683307,0.022647,0.280800,-7.665481,5.184177,-5.988727,-6.884916]],[[-5.548651,2.854625,-9.523135,-8.048720,4.789013,3.424061,7.746712,7.368746,2.294803,3.958720],[-4.875084,4.701753,-5.503870,-5.266483,-3.031736,-7.037071,6.279313,7.930890,0.490837,-3.600154],[6.823196,-4.546405,2.507163,-8.716976,-9.777545,-8.130465,-5.707309,4.570027,-2.478688,3.262759],[8.115842,7.636254,1.795657,-1.823557,-2.415881,-4.703502,-4.642397,-1.137422,-0.754859,7.086720],[4.646025,1.693321,7.433918,-1.419741,-2.771680,-7.029885,0.745232,6.625075,-7.639173,2.687263],[-0.202712,5.504942,-8.004966,6.286398,-1.134750,0.502321,-6.637961,1.440472,-5.659706,8.870003],[0.943481,-6.534109,-1.392841,-0.744198,2.784142,8.894027,4.520445,7.481348,6.930419,-4.869816],[8.585384,7.332132,-5.713549,9.914931,-2.622739,-6.143267,-9.062129,-5.226276,-9.654466,-6.009814]],[[7.282099,1.417805,-1.221050,-2.652398,1.813550,8.689362,1.760320,-0.303993,3.940711,-2.046100],[7.933662,0.478408,7.381440,-7.793193,-2.873867,3.592184,-0.267806,-8.316948,3.729052,-2.343962],[7.778045,7.315318,-1.642212,8.630717,5.896340,1.302555,-8.552619,3.088860,6.307815,1.427272],[-3.009738,9.417733,3.672215,8.221620,-0.670831,-5.591438,8.137836,-7.898555,9.442133,8.673998],[7.337817,5.229833,2.040524,3.561558,-7.916866,4.021109,-4.601493,-2.810596,-1.286854,-6.484149],[9.410164,5.674336,4.255205,9.060382,5.991847,5.141722,5.338772,-5.684472,6.296655,3.905602],[-1.803606,-1.035935,4.576989,-3.377154,-5.224875,8.392410,7.908037,-8.125851,-9.680126,-1.923011],[-3.820222,0.112622,-5.062180,6.459330,2.523027,-0.038823,2.341205,-5.601332,6.238166,-6.120743]],[[-0.499599,9.635964,-6.539527,-1.760807,5.839594,-5.467210,-9.694986,-5.506876,6.906464,4.619298],[-7.275443,-5.522561,-6.227558,2.969003,-9.772779,-7.658866,2.400889,-1.146339,2.820481,-5.027882],[1.596998,0.042420,-9.700040,5.805487,0.999381,2.183140,-5.345558,0.696798,-6.730801,-0.849147],[-2.767305,7.143382,-7.173917,-0.417450,-9.232051,8.003087,1.256911,-4.161090,-9.326331,-3.780601],[-1.183119,1.841204,6.635158,2.272959,0.494754,-5.427447,-4.160276,4.032863,-3.492464,5.801378],[1.538426,-7.498027,5.840908,-9.922496,-0.338646,0.632821,-2.358773,6.738303,7.102174,-9.763386],[-4.096920,-1.020567,-8.378085,-9.308787,2.124239,-7.255405,-1.007708,-8.750284,0.267726,6.151893],[3.332787,-8.800882,5.061183,9.610748,-0.229191,-8.663190,4.188326,-1.555711,-5.867064,-1.703406]],[[-5.423974,-7.669835,0.475168,-6.161281,-8.916948,2.382231,-7.493648,4.306865,2.483409,-0.744121],[-0.421334,1.981857,0.576851,-3.057266,-8.114147,-1.475619,0.898057,5.932468,5.809743,4.064092],[8.826776,0.758852,-4.143267,5.694467,8.407855,9.391986,-7.382881,7.177696,-3.372375,-2.518920],[-7.574956,4.051319,4.625083,8.163033,-4.476800,-5.932305,9.097012,8.401600,6.672214,5.631050],[-6.075061,-3.197225,5.166585,0.053604,4.378880,-4.992380,-8.104962,2.294915,-3.085207,-3.209792],[4.407201,-5.678077,-3.990763,-2.715908,4.538116,-8.539028,6.837354,-0.799751,3.262079,-5.724184],[6.724671,-2.000890,4.043045,-9.157869,-8.206158,-4.655171,9.654676,-8.439133,4.726553,7.272309],[6.470515,-0.721477,7.409172,4.875686,-5.663057,2.768650,0.916583,6.013937,-0.040725,-2.036175]],[[-9.619469,-2.809703,-7.364840,9.106056,-4.253812,-0.564964,2.617508,-2.958738,3.351926,4.547400],[4.598820,-1.996502,-7.401874,9.288621,1.213737,-8.253526,5.491557,3.120507,6.513170,9.612809],[-5.935593,5.362971,-8.609995,-8.045466,-1.408561,-4.303473,-0.105944,-6.924952,-5.265518,7.183506],[6.244587,-0.086862,3.698450,-2.917384,-9.914468,-2.103794,3.492010,-0.147240,7.621394,-0.002149],[-7.925138,0.705454,4.210961,-0.057773,-5.735102,2.348253,0.358676,-5.113823,5.846377,8.883714],[-7.825621,-5.793185,-9.445864,0.636269,6.250291,9.642920,-7.225985,7.375236,-4.764313,-6.188668],[9.444846,-4.917601,3.876136,1.137660,-3.210090,-5.797061,-3.700486,-8.139038,-2.245930,-5.752040],[0.466358,2.870730,3.753154,1.257765,-0.693648,-3.686360,8.774450,-7.190466,7.095838,-8.937134]],[[7.968946,-6.009773,8.120782,-2.490466,-9.732590,-2.649228,-3.473322,-9.031211,-3.060457,5.587925],[9.287760,-9.302180,-5.346648,7.537152,2.861575,4.307796,-4.986218,-9.006590,2.501479,0.358178],[-6.380394,1.882492,-6.189217,-7.721740,-4.882103,6.199895,5.102856,-0.216271,4.782397,9.897086],[0.180879,1.252399,-9.256719,-3.315178,-1.436150,4.959526,0.004155,5.767430,-0.366164,-7.151695],[3.845023,-9.265927,4.056350,-0.551863,-2.471544,7.103949,2.879873,-7.197888,7.856976,8.150631],[-2.279879,-9.263542,7.679048,8.150642,1.989454,-0.421972,-8.459998,6.284101,-3.222402,-8.781141],[6.338858,-7.205787,-2.771152,-7.748852,8.441164,4.654079,-5.268909,5.328184,3.931861,-9.349460],[-2.136973,1.439858,0.618587,0.376250,-4.532954,8.116029,6.263935,-9.660617,-7.522117,0.239349]]], dtype = "float64")#candidate|2813|(10, 8, 10)|const|float64
bop_2814 = relay.subtract(const_2812.astype('float64'), relay.reshape(const_2813.astype('float64'), relay.shape_of(const_2812))) # shape=(10, 8, 10)
func_2717_call = mod.get_global_var('func_2717')
func_2718_call = mutated_mod.get_global_var('func_2718')
call_2827 = relay.TupleGetItem(func_2717_call(), 0)
call_2828 = relay.TupleGetItem(func_2718_call(), 0)
const_2839 = relay.const([[[-5.400908,-4.659324,-5.068831,-7.054371,-2.189888,-6.309811,3.910848,-1.405293,6.860473,4.444611],[0.467432,0.140544,8.979489,-2.537423,-8.969433,9.017540,5.532790,2.004206,-0.969455,4.544149],[-2.408062,9.353488,-2.974613,8.352211,7.878406,3.602125,-8.517341,6.684063,-9.565982,4.294315],[2.172752,2.791529,9.393583,-9.470712,-4.711773,-0.797446,-2.251993,5.969951,4.805540,-6.401476],[3.013379,3.116271,3.326256,1.283142,8.375703,-6.155049,-5.230809,4.884231,-8.499001,3.915719],[1.775927,3.185693,7.583595,-2.479794,-6.963440,3.048533,5.439494,5.571159,2.577762,-0.097328],[-7.870577,0.544729,-5.117189,-1.858435,-3.778106,9.097216,2.421508,3.883568,0.847686,-7.410405],[5.865915,0.792038,-3.422256,4.819401,-4.693731,-2.463298,-0.305295,5.123806,2.910078,6.361803]],[[0.804378,5.092896,2.532534,9.296585,6.425038,-7.978286,8.428058,1.739576,1.043654,3.723313],[-6.441135,-1.025956,0.593340,8.295493,2.838232,-4.505968,3.288243,7.270714,8.784717,-5.648000],[-7.162200,1.865252,-4.165018,-9.683453,6.138962,7.301466,6.305505,-7.538794,1.038338,3.413279],[-8.843717,2.957043,-0.057217,-9.571995,3.167004,-5.816468,-3.916033,9.692446,-6.736438,-4.422341],[8.999191,8.451203,2.690544,0.497470,3.938075,5.226379,7.457123,9.022731,2.229997,9.250784],[-1.692415,6.494074,6.897215,-5.670839,-9.292788,6.766081,-5.121508,-9.878857,-3.985833,2.393328],[4.360745,6.535944,9.962117,-3.523303,-0.874891,-5.156022,8.187472,4.926426,-9.012190,-2.998937],[-8.630404,2.422245,-2.519851,-6.066577,9.535118,-6.370254,-6.035897,2.372777,-8.338757,7.573690]],[[3.105269,-9.539152,2.740413,4.079806,6.693435,-3.971487,6.748240,-0.182222,2.261364,-2.040711],[-1.673417,7.272993,-7.362698,4.094752,-6.293670,-1.365000,-5.851985,-7.563794,-0.138652,3.812636],[5.624779,-1.796542,7.042320,-8.003712,8.836517,-7.421893,1.492522,1.956037,-0.696452,0.220778],[1.029313,1.251890,-4.363170,8.532592,1.152866,-3.298334,-0.287824,-1.929193,7.701575,-1.324964],[7.374806,1.080512,8.615101,2.468616,7.370804,-4.095603,-7.956851,-2.064965,-1.510635,2.349259],[-6.832064,-7.989591,-2.626720,3.283035,-0.052905,2.343073,-8.333104,-2.977696,7.931170,0.342232],[-3.101497,6.891070,1.812949,6.713233,4.499903,-2.877031,-7.519560,-0.308068,0.033690,1.643398],[5.390190,0.398380,7.426045,6.254217,3.587522,3.217026,1.938596,-2.124413,-2.345227,-7.735918]],[[8.860897,6.938297,8.239676,-1.666981,1.342585,-2.824897,-6.475579,-9.834597,-0.535884,-0.432764],[4.417941,9.210692,-6.518569,9.748965,-3.395942,-1.175681,-8.995803,2.240819,6.993533,-1.250920],[8.071876,-7.999295,3.372594,4.214787,-8.198328,7.478579,4.265973,-6.865304,3.290496,-5.046906],[5.566814,2.187146,5.824722,-5.266255,-9.247919,7.344663,3.841355,-1.462970,5.557157,-9.880617],[2.159867,0.613570,5.325499,4.500399,6.556618,-1.865520,-5.963077,8.549465,-1.335697,5.658452],[-1.169104,7.046052,-0.262860,-5.793164,7.039298,2.791583,3.422911,-3.907870,4.715124,5.019244],[4.560004,2.236644,4.073128,1.439422,-0.648505,-8.096700,-4.481579,5.150529,0.686112,-1.201421],[-7.931292,-9.983407,-0.115881,-1.338294,-0.338483,-6.325394,7.655367,8.733786,-2.232147,8.272017]],[[4.321645,-9.604364,0.269548,-2.230394,8.766589,8.115279,2.363768,6.204827,-8.109667,5.247662],[0.465741,0.135335,9.932333,3.744405,4.523507,4.530250,3.315141,-9.755213,3.850224,0.957093],[6.248684,-9.215549,-9.031763,-2.623534,-6.914560,0.409762,-2.531163,-3.827981,-0.574451,9.869044],[-7.905314,-1.045590,-8.929042,-6.291450,-7.742646,8.884574,7.108132,-1.569355,5.919685,-2.825147],[-9.020005,-7.237228,-7.962432,-6.494506,-6.724703,0.450455,-8.556468,-6.236550,-9.971474,-4.084816],[1.255320,8.429674,-0.547924,-9.356305,-0.337866,1.737485,4.185970,1.640012,-0.570558,-5.718218],[-2.429387,-4.294903,0.912216,9.258935,4.067845,-0.727507,1.979153,8.833942,1.965574,-9.838976],[5.828572,-4.104189,7.891900,-5.154643,-7.929110,-8.090702,-2.247271,4.129277,-5.774417,-4.402109]],[[3.350971,-2.513938,-5.498159,-4.192074,4.563268,1.243023,-4.444245,5.235150,-7.014992,1.425660],[-5.611036,2.671850,-4.792027,9.402364,3.013502,9.934373,-4.461162,-9.223373,7.026437,4.398918],[3.850303,0.690390,-4.738074,1.650550,9.021257,6.967245,-1.439288,-0.186320,-4.327158,8.554833],[7.827115,-7.682571,-3.630237,-3.569310,2.019895,8.757622,2.823384,-6.592608,4.812541,-4.855455],[-1.597244,8.671424,-7.240706,-3.027028,1.528679,-9.415310,-2.595924,-6.617111,4.859001,-1.653970],[-7.142293,9.248484,7.266139,-2.156383,0.017657,9.805687,-0.707856,3.798247,-1.724575,6.379340],[5.898034,8.801972,-8.711335,1.079347,-7.819090,-8.202249,7.307681,-0.818067,0.316078,3.205809],[8.984002,0.574653,9.509182,-3.508564,-5.476930,7.340539,-6.010809,5.457070,0.484129,-7.323396]],[[-1.550948,-7.375833,0.020067,-8.989605,3.465839,7.277205,-8.675116,5.851874,4.139803,-0.904451],[8.243098,-6.776656,-7.553278,6.690873,-8.760044,8.797807,-3.793199,-3.811599,3.101133,6.607029],[-9.240309,4.867192,6.219868,4.311718,1.302641,-0.779277,9.640112,-2.700060,-1.239937,0.162912],[5.184135,7.194558,9.042804,1.599383,8.861910,8.641267,-6.845721,-4.320981,6.274643,-4.328879],[9.182523,-1.553855,1.822968,-0.076823,-2.217956,-4.499854,7.114492,3.968732,6.434531,7.868884],[3.832913,1.224100,1.248095,6.409503,1.146944,6.191403,-2.333615,5.059430,-4.384876,8.510289],[-4.037908,1.261833,-5.150839,-2.004435,2.689179,-4.669549,-0.305545,-6.887679,9.304499,4.826574],[-3.665410,-0.371491,-2.012951,-0.787075,6.508514,7.807731,-1.454771,1.157302,9.530825,-0.343070]],[[3.699736,-1.246014,-2.142994,-9.740486,-5.179164,-3.417886,-2.565208,-6.052120,9.109175,-8.495924],[-1.838483,-5.504559,-3.673820,4.934485,6.991081,-4.418792,-6.895099,-7.784117,-3.876719,3.631322],[-5.829416,6.769727,-5.305707,2.901370,-0.784858,-6.495958,0.602197,0.978234,9.894145,-9.664116],[3.034819,7.025323,7.529414,-6.079924,-6.440205,-5.177506,-1.540960,-9.080286,4.684087,-6.192019],[1.556571,6.900363,7.545601,-4.103952,8.384032,8.049222,2.145110,4.228080,-0.113029,-6.328681],[0.553499,-5.049400,-7.669394,-4.904513,-9.127311,-4.792245,0.498379,1.071006,-7.469579,0.894085],[-9.020317,-9.672757,-9.139973,-1.167825,-1.683965,0.894662,6.219331,2.153054,-9.288541,-7.260031],[-4.196519,-2.419337,-9.874168,-7.646927,1.024820,-6.847440,-0.963570,-1.487558,-0.402484,8.130040]],[[4.182060,-6.310848,-1.155239,8.496654,9.628723,-6.085203,-2.832200,-9.687409,-3.929010,3.920704],[-6.637120,2.151664,3.734922,5.022648,-2.592370,-7.968721,-5.298699,-2.727122,-4.026762,0.330263],[1.572704,8.663444,5.276852,-0.102807,-9.393575,6.314656,-8.908647,1.241626,-6.128705,0.428855],[5.145411,4.121789,7.501578,5.634333,3.146383,0.416375,-1.254399,-1.878189,-7.269008,2.889761],[-6.831641,-6.076751,6.211410,-4.308926,-4.322417,-6.500283,8.190599,4.984959,3.299445,-8.874491],[-4.870628,-7.281476,-1.765605,-8.555594,3.115832,7.205294,-7.761085,-8.864935,7.473100,-8.177875],[4.530360,-2.697429,-5.585419,2.491477,-7.756718,-3.113506,5.385283,5.521351,5.659567,0.964487],[8.314399,-8.773864,-9.339050,2.698367,-2.690409,4.243991,-1.367751,-7.131399,-9.958121,-1.021500]],[[-0.047633,8.374983,4.950997,7.931439,-7.757391,-4.097163,-1.521279,1.154393,6.701228,-1.308524],[-6.646941,1.825762,2.872801,8.405620,0.290545,-3.688823,-4.072639,-1.211575,-0.845920,-9.129860],[-7.938898,-3.706151,-2.731652,3.608308,-8.147006,8.158059,2.000218,0.412451,-8.157111,-6.809915],[6.781247,0.592441,-7.182797,7.205207,-9.776669,2.090108,-8.505443,2.522480,-1.398176,5.840630],[-8.124823,6.508380,5.838094,3.633826,-3.333876,-1.758331,-3.571257,9.160431,7.946156,-5.389398],[8.478478,-8.658567,9.080129,-5.344310,-7.202210,9.071979,-1.254714,-0.313283,9.149765,6.740302],[-6.742126,3.346327,-2.452426,9.223324,-8.997030,6.436236,-5.198995,7.109619,9.466514,8.930658],[4.935708,-3.775513,1.390255,-4.192330,-9.968656,-6.656164,8.964668,-9.472790,0.374408,8.818107]]], dtype = "float64")#candidate|2839|(10, 8, 10)|const|float64
bop_2840 = relay.greater_equal(bop_2814.astype('bool'), relay.reshape(const_2839.astype('bool'), relay.shape_of(bop_2814))) # shape=(10, 8, 10)
uop_2851 = relay.log10(const_2813.astype('float32')) # shape=(10, 8, 10)
uop_2853 = relay.sigmoid(call_2827.astype('float32')) # shape=(91, 15)
uop_2855 = relay.sigmoid(call_2828.astype('float32')) # shape=(91, 15)
output = relay.Tuple([bop_2840,uop_2851,uop_2853,])
output2 = relay.Tuple([bop_2840,uop_2851,uop_2855,])
func_2856 = relay.Function([], output)
mod['func_2856'] = func_2856
mod = relay.transform.InferType()(mod)
output = func_2856()
func_2857 = relay.Function([], output)
mutated_mod['func_2857'] = func_2857
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2685_call = mod.get_global_var('func_2685')
func_2686_call = mutated_mod.get_global_var('func_2686')
call_2921 = func_2685_call()
call_2922 = func_2685_call()
output = call_2921
output2 = call_2922
func_2925 = relay.Function([], output)
mod['func_2925'] = func_2925
mod = relay.transform.InferType()(mod)
mutated_mod['func_2925'] = func_2925
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2925_call = mutated_mod.get_global_var('func_2925')
call_2926 = func_2925_call()
output = call_2926
func_2927 = relay.Function([], output)
mutated_mod['func_2927'] = func_2927
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2337_call = mod.get_global_var('func_2337')
func_2339_call = mutated_mod.get_global_var('func_2339')
call_2955 = relay.TupleGetItem(func_2337_call(), 2)
call_2956 = relay.TupleGetItem(func_2339_call(), 2)
output = call_2955
output2 = call_2956
func_2964 = relay.Function([], output)
mod['func_2964'] = func_2964
mod = relay.transform.InferType()(mod)
mutated_mod['func_2964'] = func_2964
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2964_call = mutated_mod.get_global_var('func_2964')
call_2965 = func_2964_call()
output = call_2965
func_2966 = relay.Function([], output)
mutated_mod['func_2966'] = func_2966
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2856_call = mod.get_global_var('func_2856')
func_2857_call = mutated_mod.get_global_var('func_2857')
call_3025 = relay.TupleGetItem(func_2856_call(), 1)
call_3026 = relay.TupleGetItem(func_2857_call(), 1)
output = call_3025
output2 = call_3026
func_3031 = relay.Function([], output)
mod['func_3031'] = func_3031
mod = relay.transform.InferType()(mod)
mutated_mod['func_3031'] = func_3031
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3031_call = mutated_mod.get_global_var('func_3031')
call_3032 = func_3031_call()
output = call_3032
func_3033 = relay.Function([], output)
mutated_mod['func_3033'] = func_3033
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2287_call = mod.get_global_var('func_2287')
func_2289_call = mutated_mod.get_global_var('func_2289')
call_3048 = relay.TupleGetItem(func_2287_call(), 1)
call_3049 = relay.TupleGetItem(func_2289_call(), 1)
func_2788_call = mod.get_global_var('func_2788')
func_2790_call = mutated_mod.get_global_var('func_2790')
const_3054 = relay.const([False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,False,True,True,False,True,True,False,False,True,False,True,True,False,True,False,False,False,True,False,False,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,True,False,True,True,False,True,False,True,True,False,False,True,False,False,True,True,False,False,True,False,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,False,False,False,False,True,False,True,True], dtype = "bool")#candidate|3054|(144,)|const|bool
call_3053 = relay.TupleGetItem(func_2788_call(relay.reshape(const_3054.astype('bool'), [8, 9, 2])), 0)
call_3055 = relay.TupleGetItem(func_2790_call(relay.reshape(const_3054.astype('bool'), [8, 9, 2])), 0)
uop_3063 = relay.log10(call_3048.astype('float64')) # shape=(91, 15)
uop_3065 = relay.log10(call_3049.astype('float64')) # shape=(91, 15)
func_2447_call = mod.get_global_var('func_2447')
func_2448_call = mutated_mod.get_global_var('func_2448')
call_3066 = func_2447_call()
call_3067 = func_2447_call()
output = relay.Tuple([call_3053,const_3054,uop_3063,call_3066,])
output2 = relay.Tuple([call_3055,const_3054,uop_3065,call_3067,])
func_3092 = relay.Function([], output)
mod['func_3092'] = func_3092
mod = relay.transform.InferType()(mod)
output = func_3092()
func_3093 = relay.Function([], output)
mutated_mod['func_3093'] = func_3093
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2231_call = mod.get_global_var('func_2231')
func_2233_call = mutated_mod.get_global_var('func_2233')
call_3116 = func_2231_call()
call_3117 = func_2231_call()
output = relay.Tuple([call_3116,])
output2 = relay.Tuple([call_3117,])
func_3118 = relay.Function([], output)
mod['func_3118'] = func_3118
mod = relay.transform.InferType()(mod)
mutated_mod['func_3118'] = func_3118
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3118_call = mutated_mod.get_global_var('func_3118')
call_3119 = func_3118_call()
output = call_3119
func_3120 = relay.Function([], output)
mutated_mod['func_3120'] = func_3120
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3031_call = mod.get_global_var('func_3031')
func_3033_call = mutated_mod.get_global_var('func_3033')
call_3121 = func_3031_call()
call_3122 = func_3031_call()
output = call_3121
output2 = call_3122
func_3125 = relay.Function([], output)
mod['func_3125'] = func_3125
mod = relay.transform.InferType()(mod)
output = func_3125()
func_3126 = relay.Function([], output)
mutated_mod['func_3126'] = func_3126
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3164 = relay.const([[[True,True,True,False,True,False,False,False,False,True,True,False,False,True,True],[False,True,True,False,True,False,False,True,False,True,False,True,True,True,False],[True,False,True,True,False,False,True,False,True,True,False,False,True,False,True],[True,True,False,False,True,False,False,True,True,False,True,True,False,False,False],[False,True,False,True,False,True,True,False,True,False,True,True,False,True,False],[True,False,True,False,False,False,False,False,False,True,False,True,True,False,True],[True,False,False,False,True,True,True,True,True,False,True,False,False,False,True],[False,True,True,True,True,True,True,True,True,True,True,False,False,False,False],[True,True,True,False,True,False,True,False,True,False,True,True,False,True,True],[False,True,False,True,False,False,True,True,True,False,True,False,False,True,False],[True,True,False,False,True,True,False,False,False,False,False,True,True,False,False],[False,False,True,False,False,True,False,True,False,False,True,True,False,False,True],[True,True,False,True,True,True,False,True,True,False,True,True,True,False,True],[True,False,False,False,True,False,True,True,True,False,True,False,True,False,False]],[[False,True,True,False,False,False,True,False,False,False,True,True,True,False,False],[True,False,False,True,False,True,True,False,True,False,False,False,False,True,False],[True,False,True,False,False,True,True,False,False,True,False,True,False,False,True],[False,True,True,True,False,False,False,True,False,True,True,False,False,True,True],[False,False,True,False,True,False,True,False,False,True,True,False,False,True,False],[False,False,True,True,True,True,True,True,False,True,True,True,True,True,True],[True,True,True,False,True,False,False,True,False,False,False,True,True,True,True],[True,True,True,True,False,False,False,False,True,True,True,False,False,True,True],[True,False,True,True,False,False,True,True,True,False,True,False,True,False,True],[False,False,False,True,True,False,True,True,False,True,False,False,True,True,True],[True,False,True,False,True,True,False,True,False,False,True,False,False,False,False],[True,True,False,True,False,True,True,False,True,False,True,True,False,False,False],[True,True,True,False,True,False,True,False,True,False,False,False,False,False,True],[False,True,False,True,False,False,False,True,False,True,True,True,True,True,False]],[[True,False,True,False,False,True,True,False,True,False,False,True,True,False,True],[False,False,False,False,True,False,False,False,True,True,True,True,False,False,False],[False,False,True,False,False,True,True,True,True,False,False,True,True,True,True],[False,True,False,False,True,True,False,True,True,True,False,True,False,True,True],[True,True,True,False,True,False,True,False,True,True,False,True,False,True,False],[False,True,True,False,True,False,True,True,False,True,True,False,False,True,True],[True,False,True,True,False,False,True,False,True,False,True,True,False,True,True],[False,True,False,False,True,False,False,True,True,False,False,False,True,False,False],[False,True,False,True,False,True,False,True,True,True,False,False,False,False,True],[True,False,True,False,False,False,False,True,True,True,True,True,False,False,True],[False,True,True,False,False,True,True,False,True,False,True,True,False,False,True],[False,True,True,True,True,False,True,True,True,True,True,False,False,True,True],[False,True,False,True,True,False,False,True,True,True,True,False,False,False,False],[True,False,False,True,True,True,True,False,True,False,True,False,False,False,True]],[[True,False,False,True,True,True,False,True,False,True,True,False,True,True,False],[False,True,False,False,False,True,True,True,True,False,True,True,False,True,True],[True,True,True,True,False,False,True,False,True,True,True,False,True,True,False],[True,True,True,True,True,True,False,False,False,False,True,True,True,True,False],[False,True,True,True,False,False,True,True,False,False,True,False,True,False,True],[True,False,False,False,True,True,True,False,True,True,False,False,False,True,False],[False,True,True,False,False,True,False,True,True,False,True,False,False,False,False],[True,True,False,True,True,False,False,False,False,False,True,False,False,True,True],[False,False,False,True,False,False,True,False,True,False,False,False,False,True,True],[False,False,False,True,False,False,True,False,False,True,False,False,True,True,True],[False,True,True,False,True,True,False,False,True,True,False,False,True,False,True],[False,False,True,True,True,True,True,False,False,True,True,False,True,False,True],[True,False,True,False,False,False,False,False,False,True,True,False,True,True,False],[False,True,False,False,False,False,True,True,False,True,True,False,False,False,False]],[[True,True,True,False,False,True,False,False,False,False,True,True,False,True,False],[False,True,False,True,True,False,True,True,False,True,False,True,True,False,True],[False,False,True,True,False,True,False,True,True,False,True,False,False,False,True],[False,False,True,False,True,False,True,False,True,True,False,False,False,True,False],[True,True,False,False,False,True,True,True,False,False,True,True,True,True,True],[False,False,False,True,False,True,False,True,False,True,False,False,True,False,True],[False,False,True,False,False,True,True,False,False,True,False,False,True,True,True],[False,False,True,False,True,False,False,True,True,False,True,False,False,False,False],[True,False,False,False,True,True,False,False,True,False,False,True,False,True,True],[False,True,True,True,False,False,True,False,False,True,False,True,True,False,True],[True,True,False,False,False,True,True,False,True,False,False,True,True,True,False],[False,True,False,True,False,False,False,False,False,False,True,False,True,False,False],[False,True,True,False,True,True,True,False,True,True,False,False,False,False,True],[True,False,False,True,False,False,True,False,False,True,False,True,True,True,True]],[[True,True,True,False,False,False,False,True,True,True,False,True,True,True,True],[False,False,False,False,True,False,True,False,False,True,True,False,True,False,True],[False,True,False,True,True,False,False,True,False,True,True,False,False,False,True],[False,True,True,False,True,False,False,False,False,False,False,True,False,True,True],[True,True,False,True,True,False,False,True,True,False,False,False,False,False,True],[False,False,False,True,False,True,False,False,False,False,False,False,False,False,True],[True,True,False,False,True,True,False,True,False,True,True,False,False,True,True],[True,True,True,True,True,False,False,True,False,False,True,True,False,True,True],[True,True,True,False,True,False,True,True,True,False,False,False,False,False,True],[True,True,True,True,False,False,True,True,True,True,True,False,False,False,False],[False,True,True,True,True,False,True,True,True,False,True,True,False,True,False],[True,True,True,False,False,False,False,True,True,True,False,False,False,True,False],[False,True,False,True,False,True,True,True,False,False,True,True,True,True,True],[True,False,False,True,True,False,True,True,True,False,True,True,False,True,False]],[[True,True,True,True,False,True,False,True,False,True,True,True,False,False,False],[True,False,True,True,True,False,True,False,True,False,False,False,False,False,True],[False,True,False,False,False,False,True,True,True,False,False,False,True,False,True],[False,False,True,True,True,False,True,True,False,False,True,False,True,True,False],[False,False,False,True,False,False,True,True,True,True,True,True,True,True,False],[False,True,False,True,False,True,True,True,False,True,True,False,True,False,True],[False,True,True,False,False,True,False,True,True,False,False,False,True,False,True],[True,False,False,True,False,False,True,True,True,True,True,True,True,False,True],[True,False,False,False,False,False,False,True,False,True,True,False,True,False,False],[True,False,True,True,True,True,False,False,False,True,False,True,False,True,False],[False,False,False,False,True,True,True,True,False,True,False,True,True,True,True],[False,False,True,True,False,True,False,False,True,False,True,True,False,False,True],[False,False,True,False,False,False,True,True,True,True,False,True,False,False,True],[False,False,True,True,True,True,False,True,True,False,True,True,True,True,True]],[[False,True,True,False,False,True,False,True,True,False,True,True,True,True,True],[False,True,True,False,True,False,True,True,True,True,True,True,False,True,False],[True,True,False,False,True,False,True,False,True,False,False,False,False,True,False],[True,False,True,True,False,False,True,True,False,True,False,True,False,False,False],[False,True,False,False,True,True,False,True,True,False,True,True,False,True,True],[False,True,True,False,False,True,False,True,False,False,False,True,False,False,True],[False,True,True,False,True,False,False,False,True,True,False,True,True,False,False],[False,True,True,True,True,True,False,True,True,False,False,True,True,False,False],[True,False,True,False,True,False,False,True,False,False,False,False,True,True,True],[True,True,False,True,False,True,False,False,False,True,True,False,True,False,False],[True,True,True,False,True,False,False,False,True,True,False,True,True,True,True],[False,False,False,False,True,True,True,False,True,False,True,False,False,False,True],[True,True,False,False,True,False,False,False,False,True,True,False,False,False,True],[True,True,True,False,True,True,True,True,True,False,True,False,True,True,True]],[[False,False,False,False,False,False,False,False,False,False,True,True,False,False,True],[True,True,False,True,True,False,False,False,True,True,True,False,True,False,True],[False,False,False,True,False,False,True,True,True,True,True,False,False,False,False],[True,True,False,False,False,True,False,False,False,True,True,True,True,True,True],[False,True,True,False,False,True,True,True,False,False,False,False,False,False,False],[True,False,True,True,False,False,False,False,False,False,True,False,True,False,True],[False,False,False,True,True,True,True,False,False,True,False,True,True,False,True],[True,True,True,True,False,True,True,True,True,True,True,False,True,True,False],[False,True,True,True,True,False,False,False,False,False,True,False,True,True,False],[True,False,False,False,True,False,False,False,True,True,False,True,False,True,False],[False,False,True,True,True,False,True,True,False,True,True,False,True,True,True],[False,False,True,False,False,True,False,False,True,False,False,True,True,False,True],[True,False,True,False,False,False,True,True,True,True,True,False,True,False,True],[False,False,True,False,False,False,True,True,False,False,True,False,False,False,False]],[[True,True,True,False,True,True,False,False,False,True,False,True,True,True,False],[True,False,False,False,False,True,False,True,False,True,True,True,True,True,True],[False,False,False,True,False,True,False,False,False,False,True,False,False,True,True],[False,False,True,False,False,True,True,True,False,True,False,False,False,True,True],[True,True,False,True,False,False,True,False,True,True,True,False,True,True,True],[False,True,True,False,True,False,True,True,True,False,False,True,False,True,False],[True,False,False,True,False,False,False,True,True,True,False,False,True,True,True],[True,True,False,False,True,True,False,True,False,True,True,True,False,True,False],[True,False,False,True,False,False,True,False,True,False,True,True,False,False,False],[True,True,False,True,False,True,True,False,False,True,False,True,False,False,False],[False,True,True,True,False,True,True,False,True,True,False,False,False,True,False],[True,False,False,True,False,False,False,True,False,True,False,False,False,True,True],[True,True,False,False,False,True,True,False,True,False,True,True,False,True,False],[False,False,True,False,True,True,False,False,False,True,True,False,True,True,True]]], dtype = "bool")#candidate|3164|(10, 14, 15)|const|bool
var_3165 = relay.var("var_3165", dtype = "bool", shape = (10, 14, 15))#candidate|3165|(10, 14, 15)|var|bool
bop_3166 = relay.logical_or(const_3164.astype('bool'), relay.reshape(var_3165.astype('bool'), relay.shape_of(const_3164))) # shape=(10, 14, 15)
const_3177 = relay.const([[[False,True,True,False,True,False,False,False,True,True,False,False,False,True,False],[True,True,True,True,True,False,True,False,False,False,False,True,False,False,True],[False,True,False,True,True,True,True,False,True,True,True,False,True,True,True],[True,False,False,True,True,False,True,False,False,True,True,False,False,True,False],[True,True,True,False,False,True,True,True,True,True,False,False,True,False,False],[False,True,False,True,False,False,True,True,False,True,False,True,True,True,False],[True,False,True,True,False,True,False,False,True,True,True,True,True,False,True],[True,False,True,False,True,True,False,False,True,False,True,True,False,False,False],[False,False,True,False,True,True,True,True,True,False,False,False,False,True,False],[True,True,True,False,True,False,False,True,True,True,True,False,False,True,True],[True,False,True,False,False,False,True,True,True,True,False,True,True,False,False],[False,True,True,True,False,False,True,False,True,False,True,True,True,True,False],[False,False,False,True,False,False,True,False,False,False,True,False,True,False,False],[True,False,True,True,True,True,True,True,True,True,True,False,False,False,False]],[[False,False,False,True,True,True,True,False,True,True,False,False,True,True,False],[True,True,True,True,False,False,False,True,True,False,False,True,False,False,True],[False,True,False,True,False,True,False,True,False,True,True,False,True,False,False],[True,False,True,False,True,True,True,True,False,False,True,True,True,False,True],[True,False,False,True,True,False,False,True,False,False,False,True,True,True,True],[True,True,True,False,True,False,True,False,False,True,True,True,False,False,True],[False,True,False,False,False,True,True,True,True,True,True,True,False,False,True],[True,True,False,True,True,True,True,False,False,True,False,True,True,False,True],[False,False,True,False,True,True,False,False,False,True,True,False,False,True,False],[True,False,False,True,True,True,True,True,False,True,False,False,False,True,False],[True,False,True,False,False,False,False,False,False,False,True,True,False,False,False],[True,True,False,True,True,False,False,False,True,False,True,True,False,True,True],[True,False,True,False,True,True,False,True,False,False,True,True,True,False,True],[True,True,True,True,False,False,True,False,False,False,True,True,False,True,False]],[[True,False,False,False,False,True,True,False,False,True,False,False,True,True,False],[False,False,True,True,False,True,True,True,True,True,False,False,False,False,False],[False,True,False,True,True,True,False,False,True,True,False,False,True,True,True],[True,True,False,False,True,False,True,False,True,False,False,True,True,False,True],[True,True,False,True,False,True,False,False,False,False,True,False,False,False,True],[True,True,False,True,True,True,True,False,False,True,True,False,False,False,False],[False,True,True,False,False,True,False,True,False,False,True,True,False,True,False],[True,False,True,True,False,True,True,True,True,True,False,False,True,True,False],[True,True,True,True,True,False,False,True,True,False,True,False,False,True,True],[False,False,True,True,False,True,False,True,True,False,False,True,False,True,False],[True,False,True,False,True,True,False,False,False,True,False,False,True,False,True],[False,False,False,False,False,False,True,False,True,False,False,True,False,True,False],[False,False,False,False,False,False,True,True,False,True,False,False,True,False,True],[True,False,True,True,False,True,True,False,False,False,False,False,True,False,True]],[[True,True,True,True,True,False,True,False,True,True,True,True,False,True,True],[True,False,False,False,True,False,False,False,False,False,False,True,False,True,True],[False,False,False,True,True,True,True,True,True,False,False,True,False,False,False],[True,True,False,True,False,True,False,False,True,False,False,True,True,False,False],[True,False,False,True,False,True,True,True,False,False,False,True,True,False,True],[True,True,True,True,True,True,False,True,True,True,True,True,False,True,True],[False,False,False,False,True,False,False,False,True,False,True,True,True,False,True],[True,False,True,False,True,False,True,False,True,False,True,False,True,False,True],[False,False,True,False,True,True,False,True,True,False,True,False,True,True,True],[True,False,True,False,False,False,False,True,False,True,True,False,True,False,False],[True,False,False,False,True,True,True,True,False,True,True,False,True,True,True],[False,False,True,True,False,True,False,False,False,False,True,True,False,False,True],[False,True,True,True,False,False,False,True,False,True,False,True,True,False,False],[False,False,False,True,False,False,False,False,False,False,False,True,True,True,False]],[[False,True,True,True,False,True,False,True,True,False,False,True,True,True,True],[False,True,False,False,False,False,True,False,False,True,False,False,True,True,True],[True,True,True,False,False,True,False,False,False,True,False,False,False,False,True],[False,False,False,False,False,False,False,True,False,False,True,False,False,False,True],[False,True,False,True,True,True,False,True,True,True,False,False,True,True,False],[True,True,False,True,True,False,False,True,False,False,True,True,True,True,True],[False,True,False,True,False,True,False,True,True,True,False,True,True,True,False],[True,False,True,True,False,False,False,False,True,False,False,False,True,True,False],[False,False,True,False,True,False,True,True,True,False,False,True,False,False,False],[False,True,True,False,True,True,False,True,True,False,True,True,False,False,True],[False,False,True,False,False,False,False,True,True,True,False,True,False,False,True],[False,False,True,True,False,False,False,True,True,True,True,False,True,True,False],[False,False,False,True,False,False,True,False,True,False,True,True,True,True,True],[True,True,False,False,True,False,False,True,True,True,True,False,True,False,False]],[[True,False,False,True,True,False,True,False,False,False,False,True,False,True,False],[True,False,True,True,False,False,False,False,False,True,True,True,False,False,True],[False,True,True,False,False,False,False,True,False,False,False,False,True,False,True],[True,True,False,False,True,False,True,True,True,True,False,False,False,False,True],[True,False,False,False,False,True,False,False,False,False,False,False,False,True,False],[True,False,False,True,True,True,False,False,False,True,True,False,True,True,True],[False,False,True,True,False,False,False,False,False,False,False,True,True,False,False],[True,True,True,True,True,False,False,True,False,False,False,True,True,True,False],[False,False,False,True,True,False,True,True,False,False,True,False,True,False,False],[True,False,True,False,True,False,False,False,True,False,False,True,True,True,True],[True,True,True,True,True,False,True,False,True,True,False,False,True,True,True],[True,True,True,True,True,False,True,False,False,True,False,True,False,False,False],[True,True,False,False,True,True,False,False,True,True,False,False,False,True,True],[True,True,False,False,False,False,False,True,False,True,False,False,False,True,False]],[[False,False,False,False,True,True,True,True,True,True,True,True,True,True,True],[False,False,False,True,False,False,True,False,True,True,True,False,True,True,True],[False,False,True,False,False,False,True,False,False,False,True,True,False,False,False],[True,False,False,True,True,False,True,False,False,False,True,False,False,True,True],[True,True,True,True,True,False,True,False,False,True,False,True,False,False,True],[False,True,True,False,False,True,False,True,True,True,False,True,True,False,False],[False,False,True,False,True,False,False,False,False,False,False,False,True,False,True],[False,True,False,True,True,True,False,False,False,False,True,False,True,False,True],[True,False,True,False,False,False,False,False,False,False,False,False,False,True,True],[True,True,False,False,True,True,True,True,True,True,True,False,False,False,False],[True,True,True,False,True,True,False,True,False,False,True,False,True,False,False],[False,True,True,False,True,False,True,False,False,True,False,True,True,False,False],[False,True,True,True,True,True,False,True,False,False,True,False,True,False,False],[True,False,True,False,False,True,True,False,True,True,True,True,False,False,True]],[[False,False,False,False,True,True,True,False,False,True,False,False,True,True,False],[True,False,True,True,True,True,False,False,True,True,True,False,True,True,True],[False,False,True,True,False,True,False,True,True,True,False,True,True,False,True],[True,True,True,False,False,False,False,False,False,True,False,True,False,True,True],[True,True,True,False,False,True,True,True,False,False,False,False,False,True,False],[True,False,False,False,True,False,True,True,True,True,False,True,True,False,False],[False,True,True,True,False,False,False,True,True,False,False,True,False,False,False],[True,True,False,True,True,True,True,False,False,False,False,True,True,True,True],[True,True,True,True,False,True,True,False,False,False,False,False,True,False,False],[True,True,True,True,False,True,True,False,True,True,False,True,False,False,False],[False,True,True,True,False,True,False,True,True,False,True,True,True,False,False],[True,True,True,True,True,False,False,False,False,True,True,False,True,False,False],[True,False,False,True,True,False,False,True,False,False,True,True,True,False,False],[True,False,True,True,True,False,True,True,False,True,False,False,True,True,False]],[[False,True,False,False,False,True,False,False,False,False,False,True,False,False,False],[False,True,False,True,False,True,False,True,False,False,False,False,False,False,False],[False,False,True,False,False,True,True,False,True,True,True,False,True,True,False],[True,True,True,True,False,False,False,False,True,False,True,False,False,True,False],[False,False,False,True,False,False,False,False,False,False,True,True,False,False,False],[False,True,True,True,False,False,True,False,False,True,False,True,True,True,True],[True,True,True,True,True,True,True,True,True,True,True,True,True,True,True],[True,True,True,True,True,True,True,False,False,True,True,False,True,False,True],[False,True,True,True,False,False,False,True,True,False,True,True,True,False,False],[False,True,False,True,False,True,True,True,True,True,True,True,True,False,True],[True,False,True,False,True,True,False,True,True,True,True,False,False,False,False],[True,True,True,True,False,False,False,True,True,True,False,False,False,False,False],[False,True,False,True,True,True,False,True,True,True,False,False,True,True,True],[True,False,False,True,True,False,True,True,False,False,False,False,True,True,False]],[[True,True,True,False,False,False,True,False,True,False,False,False,True,True,True],[False,True,True,False,False,False,False,True,True,False,True,True,True,False,False],[True,False,True,True,False,True,True,True,False,True,False,False,True,True,True],[False,True,False,True,True,False,True,True,True,False,False,True,True,True,True],[False,False,True,True,True,True,True,True,True,True,False,True,True,True,False],[False,True,True,True,False,False,True,True,True,True,True,True,False,False,False],[True,False,True,True,False,False,False,True,True,True,False,True,False,True,False],[False,True,True,True,False,True,True,False,False,True,True,True,False,True,False],[True,False,False,False,True,False,False,False,True,False,True,True,True,False,False],[False,False,False,True,False,False,True,True,False,True,False,True,True,True,False],[True,False,True,True,False,False,False,False,False,True,False,False,True,False,False],[True,False,False,True,True,False,False,False,False,False,False,False,False,True,True],[False,False,True,True,True,True,False,True,False,False,True,False,False,False,False],[False,True,False,True,True,False,True,True,False,True,True,False,False,True,True]]], dtype = "bool")#candidate|3177|(10, 14, 15)|const|bool
bop_3178 = relay.mod(var_3165.astype('float32'), relay.reshape(const_3177.astype('float32'), relay.shape_of(var_3165))) # shape=(10, 14, 15)
uop_3193 = relay.sinh(bop_3166.astype('float64')) # shape=(10, 14, 15)
output = relay.Tuple([bop_3178,uop_3193,])
output2 = relay.Tuple([bop_3178,uop_3193,])
func_3202 = relay.Function([var_3165,], output)
mod['func_3202'] = func_3202
mod = relay.transform.InferType()(mod)
mutated_mod['func_3202'] = func_3202
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3203 = relay.var("var_3203", dtype = "bool", shape = (10, 14, 15))#candidate|3203|(10, 14, 15)|var|bool
func_3202_call = mutated_mod.get_global_var('func_3202')
call_3204 = func_3202_call(var_3203)
output = call_3204
func_3205 = relay.Function([var_3203], output)
mutated_mod['func_3205'] = func_3205
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3125_call = mod.get_global_var('func_3125')
func_3126_call = mutated_mod.get_global_var('func_3126')
call_3209 = func_3125_call()
call_3210 = func_3125_call()
func_2190_call = mod.get_global_var('func_2190')
func_2191_call = mutated_mod.get_global_var('func_2191')
call_3214 = relay.TupleGetItem(func_2190_call(), 0)
call_3215 = relay.TupleGetItem(func_2191_call(), 0)
func_716_call = mod.get_global_var('func_716')
func_719_call = mutated_mod.get_global_var('func_719')
const_3244 = relay.const([True,True,True,True,True,False,False,False,True,True,False,True,False,True,False,False,True,False,True,False,False,True,False,True,False,True,True,True,False,False,False,False,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,True,True,False,False,True,True,False,False,False,True,True,True,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,False,True,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,True,False,True,False,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True,False,False,False,False,True,True,False,True,True,True,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,False,True,False,True,True,False,False,True,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,True,True,True,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,True,True,False,True,False,False,True,True,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,False,False,False,True,False,True,True,True,True,False,False,True,True,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,False,False,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,True,True,False,True,False,True,False,False,True,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,True,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,False,False,False,True,False,True,True,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,True,False,True,True,True,False,True,True,False,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,True,True,True,True,False,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,True,True,False,False,False,True,True,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,True,True,False,True,True,False,True,False,False,False,True,False,False,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,False,True,True,True,False,False,False,False,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,True,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,True,False,False,False,True,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,True,False,False,True,True,False,False,False,True], dtype = "bool")#candidate|3244|(1365,)|const|bool
call_3243 = relay.TupleGetItem(func_716_call(relay.reshape(const_3244.astype('bool'), [13, 15, 7])), 1)
call_3245 = relay.TupleGetItem(func_719_call(relay.reshape(const_3244.astype('bool'), [13, 15, 7])), 1)
const_3256 = relay.const([[[1.265433,5.409921,-3.178378,8.531860,-8.383707,5.935143,5.730830,5.566989,-6.619267,6.543758],[4.548229,4.663857,-9.617546,3.327960,-1.302907,-8.600229,8.328986,4.286684,-1.710446,1.747607],[8.865619,-7.575305,8.004261,1.714262,-7.024685,-0.479054,4.132295,-3.832225,3.411298,-8.095598],[8.043181,0.434339,8.666810,-9.335668,2.426394,-8.238449,-6.608898,7.908212,-5.029883,-7.777366],[9.793395,2.538631,-5.514732,-3.721302,6.453550,-2.409185,-4.808694,-2.342441,-3.171651,9.892287],[-4.092368,-7.606123,8.663477,-0.697728,6.350752,-2.930357,2.763584,1.556778,-1.505727,0.222819],[6.490074,-1.075079,4.269480,8.312952,3.306595,-8.116626,-5.900804,3.163961,-6.964286,4.882648],[-7.370973,9.162201,4.021754,7.845901,-9.971174,-6.857213,-3.073351,5.056299,9.256989,-2.430586]],[[-0.036778,-7.946346,6.998869,-4.600089,8.870682,1.707193,6.780012,1.831982,-6.786007,-7.355443],[-8.419986,-9.903974,0.039210,-6.469626,-6.735977,-7.214623,6.720930,6.221396,-5.673785,2.010072],[0.218226,6.615069,3.065274,-2.730634,6.166043,-7.953296,3.100422,0.872252,4.112357,7.680111],[-1.298669,-9.630237,-9.283514,-7.618017,2.664768,-2.466070,3.338955,4.667926,-2.813150,-0.340516],[9.396403,6.828082,6.195257,2.104808,9.896731,-4.963915,-6.446786,6.926234,-5.041004,1.269875],[3.823193,-0.306937,6.133687,6.994554,8.870491,-3.612474,2.655469,6.252846,-3.731703,8.885710],[4.176257,7.719752,-4.265927,-3.818620,-3.444300,-3.166963,9.356557,-3.991306,-2.356915,0.286804],[1.060778,-5.810601,1.129467,6.725850,4.427569,0.517363,-4.706228,-9.404397,-1.189537,5.460928]],[[8.422413,-1.111688,8.029457,9.540534,2.143833,9.268731,-5.787280,8.418042,-9.464459,3.404795],[1.242714,-1.978236,2.449585,-3.592018,-6.395395,0.143161,3.495943,-9.493314,-5.754154,-6.772080],[-5.199154,8.648175,-5.645287,5.736157,7.811143,-2.635139,4.516142,2.687788,3.060368,-5.153823],[2.098960,1.851128,-3.293855,1.384290,-9.872152,-0.545555,-4.550721,3.900707,-7.104981,9.961924],[-3.715018,-3.626115,-3.163165,-7.578726,6.765154,7.743947,-0.372713,3.539096,0.674894,-6.819666],[-7.890123,-2.746100,-0.146532,5.448591,-8.582302,-5.660760,-4.864800,4.958671,-8.147672,0.731572],[-2.709489,2.797097,4.468170,1.112862,2.884295,-0.901981,-3.371671,-4.418933,9.975336,2.561452],[-6.905617,-2.866044,-0.216305,-6.376247,0.503270,-4.739153,-5.008816,7.307669,-6.604519,-2.431435]],[[-2.938040,-5.666799,-0.088613,8.841176,-7.051536,3.692509,-0.246970,-5.671774,3.044637,-1.688756],[-6.588990,7.610676,-5.084377,-1.032433,8.030794,-9.719316,-8.012946,1.091252,-8.618082,-2.925349],[0.598214,2.845502,5.212750,9.335449,-3.379610,3.824476,-5.803391,-7.251523,1.415016,-6.025717],[6.007366,-0.769731,7.054414,-2.585701,-9.663794,-9.097849,1.050235,-9.224625,7.286301,5.059186],[5.641278,-3.683416,7.318229,-9.866868,-2.785504,-9.509489,1.645236,8.455082,-3.137483,-6.288819],[-8.385716,-1.363778,7.645391,-2.179106,-6.589655,-1.511088,-3.828820,-9.473224,8.883347,3.774836],[0.171528,-1.025184,-3.748108,8.265760,9.707596,-2.620511,-5.377238,8.872048,3.156768,9.036145],[-5.848452,5.359189,-6.681837,-5.351222,-8.919453,7.121476,3.498946,-7.282817,2.095077,-9.287491]],[[-0.069806,-2.463886,-6.952292,-6.073222,5.793952,7.265411,6.910339,3.772944,-1.139640,-5.930807],[1.828174,-1.125746,1.537475,-9.197757,-3.628618,1.076155,0.597946,-2.166733,-5.825714,7.248672],[-3.213887,2.920480,2.920057,8.280106,-7.749972,-2.154771,-1.817793,8.380394,-4.156856,-8.933370],[-3.253808,9.978434,-9.631977,0.145287,-2.867889,-1.671735,-0.883737,-3.706368,-8.117651,0.722717],[9.189940,-2.702906,4.087838,3.546262,-0.802314,-1.652727,-8.479342,-8.123006,9.869214,4.171105],[1.311350,-0.976229,8.293475,9.623594,0.946683,-6.759853,3.166995,-6.537310,-6.893039,-4.970012],[0.193589,-4.117011,-2.081381,-5.681411,-6.746667,0.011923,-9.286312,0.282478,-7.278881,7.135583],[-3.110271,1.035927,4.658597,-7.258327,4.234811,-1.854681,0.987357,-4.345985,1.416798,-1.795952]],[[-2.114136,2.872208,2.391819,-0.575818,-5.355959,9.882162,-1.743124,-8.757365,-0.183458,5.824907],[2.450182,4.559053,-8.122592,-8.956418,-8.236073,-3.793955,-1.592513,6.637864,-2.642271,1.392102],[-6.646031,5.891873,1.699707,-9.214976,-3.156542,-8.180003,8.702104,6.774958,9.148048,0.228159],[-9.589398,5.283832,-1.827511,-8.395942,-1.346638,1.872971,1.057247,6.286968,-2.961954,-4.042592],[-9.471926,-9.188940,-9.045107,5.181333,0.566171,-3.292003,-5.958462,-3.496245,-2.821370,-3.238231],[-1.528579,7.832151,-6.441242,8.498717,-5.966361,-8.552903,-4.289282,-7.013160,-5.844829,-8.386528],[1.249051,0.287173,-5.201723,-7.346178,-4.662728,-9.098752,-2.395532,-5.523092,-0.065528,9.070839],[-5.114049,1.324526,-4.291596,2.091271,-8.459074,-5.931296,-1.842915,1.841190,7.481527,-4.157413]],[[-4.973377,-9.358279,-8.912808,-4.936558,-6.536278,-0.393252,1.758731,9.303260,8.403736,-6.568035],[8.201027,6.845764,-1.488301,-2.930753,-1.472017,8.073959,7.296191,7.454091,5.118813,4.419608],[1.154841,-4.068313,9.399940,-4.001145,-0.396973,-2.127220,8.511131,-6.044012,3.294680,5.734933],[5.769072,-5.719026,6.707878,-9.462610,8.770852,-4.449378,5.647374,6.527181,1.506235,-5.522932],[-7.611393,2.178605,-4.417554,5.877957,-2.178104,-4.136290,-4.787700,8.271591,-1.906103,-2.422397],[9.606313,7.788467,3.237843,4.188696,-2.025239,-8.071451,5.310913,2.602069,1.836541,1.805718],[9.346133,3.693518,-4.732163,8.325649,2.389328,2.569440,6.533083,9.771609,8.996335,6.397861],[-1.424126,4.423622,7.759146,-5.683429,3.011250,-6.586705,6.486193,-7.116350,-5.647192,-7.155832]],[[3.460635,-0.889965,-8.239080,6.111597,6.501272,-3.324906,3.782456,7.133639,-6.645284,0.630725],[4.769396,-2.648494,-4.586373,-8.165935,8.303717,-7.186217,-8.765981,2.334531,-9.356247,5.269763],[8.369160,-9.502599,0.908446,7.665217,6.251214,6.403817,-9.092679,5.212495,2.890610,-7.793092],[-3.412811,8.091229,4.888939,-6.560779,-8.417828,3.228765,0.335881,-3.696916,9.496826,-8.415757],[-5.322201,5.318432,0.253888,8.420020,3.169903,9.892053,-8.703774,-0.871677,1.417412,-6.904656],[-1.248902,2.596039,8.332590,-3.490908,3.136579,4.393104,9.272553,9.556094,5.082119,0.260017],[-3.203124,-2.963358,6.573353,-7.075811,2.218564,-2.230943,3.772666,0.427399,2.041401,6.458385],[-8.030398,1.118850,-8.735722,0.717438,5.624485,-8.535868,6.305856,3.723645,0.173291,-7.839670]],[[-8.461010,9.068604,-1.748960,-7.734092,-4.301121,6.143176,-2.508658,-0.642248,6.959400,-2.119635],[-5.694190,-4.061818,0.873343,0.212797,6.205472,-4.939169,-4.810974,2.915712,-1.820332,3.060078],[-4.723303,-0.239853,4.344356,9.024503,-0.481858,2.523341,-3.136149,-4.249778,1.042371,-8.268093],[8.775465,-5.987918,-3.787299,1.384393,0.903040,-5.083369,0.625395,-5.186327,7.407445,8.469481],[3.804429,6.281723,-8.057197,-6.266012,6.127496,-6.793410,2.716025,-3.127991,4.383448,-7.778898],[-3.857228,-3.341180,3.535879,-4.150391,-1.453714,-3.486893,5.479203,7.102399,-2.903027,1.511926],[-4.179447,-1.828328,4.631789,-5.389070,-0.040791,5.464759,8.305102,-4.877179,3.435760,7.459593],[-7.002299,5.838339,1.231954,7.801931,-2.989505,6.860623,6.201265,-1.384437,6.685013,3.882799]],[[-5.259923,-1.259242,-0.250957,-7.039062,-1.597472,1.782654,-5.164903,-7.947864,2.505883,1.089634],[-4.308461,-8.452541,-8.285316,-0.355644,7.227346,-7.372396,2.489081,5.875299,6.482406,3.710137],[-1.921642,6.439696,8.856192,-1.220149,0.413895,0.886083,1.514765,6.333266,-5.142079,8.994314],[4.645361,6.293363,-6.953075,-0.261306,0.582511,7.598839,-4.954803,-9.795001,-3.130154,-6.839637],[-6.598652,-3.728629,-0.818754,2.738726,7.143153,-3.687957,-5.614255,1.767156,0.623261,4.756170],[9.501155,-6.370974,7.917179,-6.468337,7.196866,3.926647,-8.904369,9.277325,-6.457406,9.669351],[3.604464,-2.567749,-4.021309,6.372119,-4.947699,-3.154714,4.246455,6.610125,8.228469,1.827597],[9.679425,-5.202511,-6.768251,-7.353412,-3.042984,-8.173050,8.062400,-1.414392,2.097257,4.500805]]], dtype = "float32")#candidate|3256|(10, 8, 10)|const|float32
bop_3257 = relay.divide(call_3209.astype('float64'), relay.reshape(const_3256.astype('float64'), relay.shape_of(call_3209))) # shape=(10, 8, 10)
bop_3260 = relay.divide(call_3210.astype('float64'), relay.reshape(const_3256.astype('float64'), relay.shape_of(call_3210))) # shape=(10, 8, 10)
output = relay.Tuple([call_3214,call_3243,const_3244,bop_3257,])
output2 = relay.Tuple([call_3215,call_3245,const_3244,bop_3260,])
func_3265 = relay.Function([], output)
mod['func_3265'] = func_3265
mod = relay.transform.InferType()(mod)
mutated_mod['func_3265'] = func_3265
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3265_call = mutated_mod.get_global_var('func_3265')
call_3266 = func_3265_call()
output = call_3266
func_3267 = relay.Function([], output)
mutated_mod['func_3267'] = func_3267
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3319 = relay.var("var_3319", dtype = "float32", shape = (14, 6, 6))#candidate|3319|(14, 6, 6)|var|float32
const_3320 = relay.const([[[7.907322,9.915656,-8.774562,-3.871051,7.573788,-2.811967],[-0.041742,8.608429,-3.500664,2.225687,-2.837703,1.279518],[-0.870015,0.801841,-5.321091,4.047280,-3.239893,3.628177],[-0.873445,-5.371094,1.775229,2.807367,-8.261318,7.019539],[-1.821272,1.932067,-6.777722,7.570589,-2.365823,9.329803],[-0.606934,-6.770959,-9.152476,5.696188,-5.346446,-7.173191]],[[6.755583,4.903612,8.714850,-3.287597,-5.726653,-5.742096],[-2.318339,7.313597,1.658700,3.563882,7.217117,-8.392137],[6.935832,-7.335775,-0.084417,5.510622,-5.427473,5.435160],[6.565025,-0.308164,6.807736,0.027005,-8.503178,-1.402594],[8.712764,9.984005,5.572425,-0.643860,-5.993152,-4.229184],[-4.546038,-0.322989,7.012461,-4.307393,9.196802,-9.240630]],[[2.364552,3.301042,-8.965297,7.136456,2.879307,-7.032463],[2.872379,-2.835495,5.425407,-4.670664,-2.444648,-1.750446],[-5.495765,5.693116,2.000354,-1.871432,2.256218,4.559201],[7.442651,2.025672,5.528315,4.116805,7.582610,-0.569603],[1.302447,-8.340243,8.813027,1.351035,9.793182,-8.901294],[-8.088876,8.091262,-7.058778,3.404214,-1.588735,-7.546728]],[[-1.128958,-7.072990,3.817597,-2.867282,0.696283,1.277855],[9.628816,-4.720732,4.053192,-7.785588,7.927415,5.379625],[-0.376345,7.416907,2.983439,-1.180961,7.346918,1.397199],[-8.481942,7.256191,-7.531070,-0.325624,4.324164,-2.618428],[4.237997,-2.100378,1.876773,-6.430009,-7.633002,-5.695949],[-1.305165,8.631865,7.860132,-9.112960,-5.390270,7.765836]],[[-7.446862,3.337351,-5.032264,-6.865532,-9.089882,-4.771655],[-7.638197,2.448492,-3.615584,9.823073,-1.296882,-5.226706],[1.660897,3.903590,2.984233,5.618387,6.004628,0.380529],[-0.916736,6.948730,8.655757,-8.307029,2.812718,-0.994099],[4.417701,-8.531307,7.351852,9.361524,3.032205,-1.890479],[4.286680,7.269558,-2.978907,-7.343446,-9.110135,1.665238]],[[4.494133,-4.525203,9.206167,-9.169116,-9.975235,3.613127],[-2.903604,-0.517127,0.030517,-7.928805,-8.424622,0.104453],[-2.208223,-5.143503,-2.166810,-8.689287,8.749676,-4.336071],[-8.689286,-4.174756,0.105602,-0.278987,-6.799312,9.452273],[8.208492,8.733616,1.024601,3.121070,-7.282151,6.034144],[3.285872,0.266195,-4.904898,-0.820494,-0.203213,6.368007]],[[-1.643708,4.178047,-0.569445,-8.570097,-9.191983,-8.205673],[5.448602,-1.318984,2.578511,-7.849054,6.055288,9.119064],[7.113268,-0.125770,-1.697942,6.446333,4.071207,-0.920205],[6.285093,-3.252472,-3.035467,-4.075645,-6.820977,4.156370],[-3.434249,-1.729413,3.850363,6.440524,2.346273,6.942156],[5.498446,-7.947757,4.563006,-5.146388,-3.834400,1.443266]],[[6.964793,-8.287944,-2.107766,4.974419,0.799997,-0.339746],[-2.506406,1.317209,-8.079463,3.642501,1.480972,-3.488426],[-3.372838,5.443235,7.814098,9.982549,-7.728657,-7.722878],[-9.802362,9.996699,-5.900748,-0.293360,4.350235,-7.249400],[-7.392569,2.706126,-1.175015,3.747784,9.287810,9.568324],[3.552469,1.050586,-8.700757,-9.156394,-2.154320,-6.853317]],[[5.157053,9.332551,-0.345938,-0.400583,2.895135,-7.141466],[-3.035606,9.555454,-9.672996,-2.615483,8.162202,-0.656991],[-5.010408,-1.522902,-7.662179,0.279649,-7.338867,8.585852],[-0.917603,4.131944,1.763036,1.375330,1.676208,2.208711],[9.942629,6.216297,-9.324156,-7.284516,-1.932948,5.614529],[6.046085,1.298067,3.513224,-4.527770,-1.605183,8.754229]],[[6.410986,7.118182,2.175901,2.398342,0.776364,-9.565642],[-3.088224,-7.623509,5.381210,6.828102,-2.551200,-8.277677],[2.518871,5.790756,6.702054,-9.519615,-2.211055,8.307052],[-3.801288,-7.516300,-4.091575,8.612476,-4.563638,6.168864],[1.934069,-6.731617,7.693794,4.331130,-6.019192,8.521320],[-7.781528,-8.333702,9.416903,-3.514400,-2.904051,7.748545]],[[4.052761,1.053301,-4.703424,-8.737330,-7.019286,1.519412],[7.750665,-6.057456,-7.924482,7.236564,6.423111,7.159280],[-8.007755,9.390106,-7.285991,0.073590,3.633081,9.006901],[5.363585,-1.216620,2.572952,-0.290482,-9.287277,-8.316919],[-6.395222,8.271779,9.521100,-7.840317,2.585994,2.048448],[6.231231,8.199366,0.666107,-3.379039,-2.025552,-7.735754]],[[5.587234,7.601490,-2.535811,-4.577824,2.910031,-1.318821],[-3.646712,-9.045422,-7.387868,7.277481,-9.187211,6.969092],[-8.985388,5.914575,-4.897574,-8.920560,-8.608397,0.594650],[4.905973,2.395972,-2.595177,4.577717,-0.990202,-6.788763],[9.663091,-7.775326,-9.373220,-6.371982,-3.837797,-1.675786],[9.493683,-9.834798,-1.635963,-5.135258,0.430610,-9.795259]],[[-6.278218,-4.798379,-3.029106,6.944224,-9.657314,2.129286],[7.709841,3.264538,5.896176,-8.971440,-2.138526,-6.127022],[0.507492,-8.182393,-3.689720,-8.927754,1.343510,-5.765838],[2.708928,1.219345,7.514403,-2.506288,-9.944516,-0.942271],[8.882214,3.496724,2.775709,-7.626554,-0.246664,9.906897],[-1.493178,0.736013,-1.215280,6.090890,-0.148388,-5.784028]],[[1.225412,-6.371488,-4.364533,-3.479128,-1.897469,-8.444902],[8.490042,-8.177371,9.619825,9.485785,0.685762,2.879135],[-6.249462,0.367756,-0.994490,-6.044075,-0.181118,5.933471],[-9.062268,7.007690,5.065697,-5.918408,-6.215753,3.925436],[9.634496,3.725438,7.647226,-7.780745,1.473589,-6.470919],[8.116156,-7.373570,-5.123319,7.957333,1.195533,0.774558]]], dtype = "float32")#candidate|3320|(14, 6, 6)|const|float32
bop_3321 = relay.floor_mod(var_3319.astype('float32'), relay.reshape(const_3320.astype('float32'), relay.shape_of(var_3319))) # shape=(14, 6, 6)
func_2717_call = mod.get_global_var('func_2717')
func_2718_call = mutated_mod.get_global_var('func_2718')
call_3326 = relay.TupleGetItem(func_2717_call(), 0)
call_3327 = relay.TupleGetItem(func_2718_call(), 0)
func_2731_call = mod.get_global_var('func_2731')
func_2734_call = mutated_mod.get_global_var('func_2734')
var_3334 = relay.var("var_3334", dtype = "float32", shape = (1200,))#candidate|3334|(1200,)|var|float32
call_3333 = func_2731_call(relay.reshape(var_3334.astype('float32'), [15, 16, 5]))
call_3335 = func_2731_call(relay.reshape(var_3334.astype('float32'), [15, 16, 5]))
output = relay.Tuple([bop_3321,call_3326,call_3333,var_3334,])
output2 = relay.Tuple([bop_3321,call_3327,call_3335,var_3334,])
func_3337 = relay.Function([var_3319,var_3334,], output)
mod['func_3337'] = func_3337
mod = relay.transform.InferType()(mod)
var_3338 = relay.var("var_3338", dtype = "float32", shape = (14, 6, 6))#candidate|3338|(14, 6, 6)|var|float32
var_3339 = relay.var("var_3339", dtype = "float32", shape = (1200,))#candidate|3339|(1200,)|var|float32
output = func_3337(var_3338,var_3339,)
func_3340 = relay.Function([var_3338,var_3339,], output)
mutated_mod['func_3340'] = func_3340
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1839_call = mod.get_global_var('func_1839')
func_1841_call = mutated_mod.get_global_var('func_1841')
call_3390 = relay.TupleGetItem(func_1839_call(), 0)
call_3391 = relay.TupleGetItem(func_1841_call(), 0)
func_3092_call = mod.get_global_var('func_3092')
func_3093_call = mutated_mod.get_global_var('func_3093')
call_3404 = relay.TupleGetItem(func_3092_call(), 2)
call_3405 = relay.TupleGetItem(func_3093_call(), 2)
output = relay.Tuple([call_3390,call_3404,])
output2 = relay.Tuple([call_3391,call_3405,])
func_3415 = relay.Function([], output)
mod['func_3415'] = func_3415
mod = relay.transform.InferType()(mod)
mutated_mod['func_3415'] = func_3415
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3415_call = mutated_mod.get_global_var('func_3415')
call_3416 = func_3415_call()
output = call_3416
func_3417 = relay.Function([], output)
mutated_mod['func_3417'] = func_3417
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2190_call = mod.get_global_var('func_2190')
func_2191_call = mutated_mod.get_global_var('func_2191')
call_3503 = relay.TupleGetItem(func_2190_call(), 0)
call_3504 = relay.TupleGetItem(func_2191_call(), 0)
output = call_3503
output2 = call_3504
func_3508 = relay.Function([], output)
mod['func_3508'] = func_3508
mod = relay.transform.InferType()(mod)
mutated_mod['func_3508'] = func_3508
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3508_call = mutated_mod.get_global_var('func_3508')
call_3509 = func_3508_call()
output = call_3509
func_3510 = relay.Function([], output)
mutated_mod['func_3510'] = func_3510
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3125_call = mod.get_global_var('func_3125')
func_3126_call = mutated_mod.get_global_var('func_3126')
call_3530 = func_3125_call()
call_3531 = func_3125_call()
var_3540 = relay.var("var_3540", dtype = "float32", shape = (10, 8, 10))#candidate|3540|(10, 8, 10)|var|float32
bop_3541 = relay.less(call_3530.astype('bool'), relay.reshape(var_3540.astype('bool'), relay.shape_of(call_3530))) # shape=(10, 8, 10)
bop_3544 = relay.less(call_3531.astype('bool'), relay.reshape(var_3540.astype('bool'), relay.shape_of(call_3531))) # shape=(10, 8, 10)
output = bop_3541
output2 = bop_3544
func_3548 = relay.Function([var_3540,], output)
mod['func_3548'] = func_3548
mod = relay.transform.InferType()(mod)
var_3549 = relay.var("var_3549", dtype = "float32", shape = (10, 8, 10))#candidate|3549|(10, 8, 10)|var|float32
output = func_3548(var_3549)
func_3550 = relay.Function([var_3549], output)
mutated_mod['func_3550'] = func_3550
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2717_call = mod.get_global_var('func_2717')
func_2718_call = mutated_mod.get_global_var('func_2718')
call_3592 = relay.TupleGetItem(func_2717_call(), 0)
call_3593 = relay.TupleGetItem(func_2718_call(), 0)
var_3600 = relay.var("var_3600", dtype = "bool", shape = (91, 15))#candidate|3600|(91, 15)|var|bool
bop_3601 = relay.logical_and(call_3592.astype('bool'), relay.reshape(var_3600.astype('bool'), relay.shape_of(call_3592))) # shape=(91, 15)
bop_3604 = relay.logical_and(call_3593.astype('bool'), relay.reshape(var_3600.astype('bool'), relay.shape_of(call_3593))) # shape=(91, 15)
bop_3611 = relay.equal(call_3592.astype('bool'), relay.reshape(var_3600.astype('bool'), relay.shape_of(call_3592))) # shape=(91, 15)
bop_3614 = relay.equal(call_3593.astype('bool'), relay.reshape(var_3600.astype('bool'), relay.shape_of(call_3593))) # shape=(91, 15)
output = relay.Tuple([bop_3601,bop_3611,])
output2 = relay.Tuple([bop_3604,bop_3614,])
func_3627 = relay.Function([var_3600,], output)
mod['func_3627'] = func_3627
mod = relay.transform.InferType()(mod)
var_3628 = relay.var("var_3628", dtype = "bool", shape = (91, 15))#candidate|3628|(91, 15)|var|bool
output = func_3627(var_3628)
func_3629 = relay.Function([var_3628], output)
mutated_mod['func_3629'] = func_3629
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2231_call = mod.get_global_var('func_2231')
func_2233_call = mutated_mod.get_global_var('func_2233')
call_3643 = func_2231_call()
call_3644 = func_2231_call()
uop_3650 = relay.erf(call_3643.astype('float32')) # shape=(15, 13, 12)
uop_3652 = relay.erf(call_3644.astype('float32')) # shape=(15, 13, 12)
output = uop_3650
output2 = uop_3652
func_3655 = relay.Function([], output)
mod['func_3655'] = func_3655
mod = relay.transform.InferType()(mod)
output = func_3655()
func_3656 = relay.Function([], output)
mutated_mod['func_3656'] = func_3656
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3655_call = mod.get_global_var('func_3655')
func_3656_call = mutated_mod.get_global_var('func_3656')
call_3671 = func_3655_call()
call_3672 = func_3655_call()
output = relay.Tuple([call_3671,])
output2 = relay.Tuple([call_3672,])
func_3686 = relay.Function([], output)
mod['func_3686'] = func_3686
mod = relay.transform.InferType()(mod)
output = func_3686()
func_3687 = relay.Function([], output)
mutated_mod['func_3687'] = func_3687
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3744 = relay.const([[[7.281115,0.497783,-5.369283,4.774598,7.617166,-1.652209,6.731716],[5.719840,5.850999,-8.577798,9.029129,-4.808491,-5.584292,2.469802]],[[-9.133353,-9.176840,-4.919840,-5.371524,1.314040,-8.262194,6.047776],[7.980695,-9.603950,0.086186,0.651562,-1.570789,9.617567,-8.576780]],[[1.673186,6.100882,-8.993748,5.826756,0.638546,7.953912,0.501269],[-7.551362,-5.115063,7.614757,-3.054860,-1.950536,5.608869,-3.380284]],[[8.893525,-4.179604,7.520625,-5.207355,6.345114,-2.096487,-9.036992],[6.602359,1.398887,-9.805729,2.781785,-7.914046,3.031876,-3.031264]],[[9.891543,8.698048,2.419847,0.960628,1.772618,-3.789580,6.485401],[-7.335252,-4.995859,9.089265,0.534352,-7.874741,-6.350384,-0.361714]],[[6.559453,-5.631551,-5.323513,-7.812401,3.043723,-1.888305,3.596128],[9.526757,3.431787,-0.287675,-2.456916,4.805366,-4.218634,-3.062256]],[[-4.488776,-1.575820,0.997415,-6.982032,-8.822627,7.295184,-3.058680],[-0.085645,-1.737751,-6.894873,4.798528,-4.428624,-9.247432,9.549132]],[[4.941241,9.035859,6.707818,3.763976,-6.777517,-9.218017,-2.559953],[-3.342405,8.898177,9.337598,2.809888,6.974885,-8.182618,-2.312594]],[[6.525048,6.507154,3.149365,-3.578111,-6.660460,-7.154338,2.993522],[1.050235,-0.622557,-8.709253,4.552991,-4.844775,4.660536,2.415311]],[[4.114013,-6.846651,-5.638549,6.765539,6.545137,-5.666033,3.485631],[-3.963544,4.996339,1.861327,-1.254891,9.715895,4.863636,-9.802696]],[[9.902290,-2.240693,8.536259,9.562754,2.154970,4.058061,-5.023097],[-0.890761,-9.212060,-5.045750,2.298436,-2.479973,6.642550,9.949087]]], dtype = "float64")#candidate|3744|(11, 2, 7)|const|float64
uop_3745 = relay.erf(const_3744.astype('float64')) # shape=(11, 2, 7)
func_2337_call = mod.get_global_var('func_2337')
func_2339_call = mutated_mod.get_global_var('func_2339')
call_3757 = relay.TupleGetItem(func_2337_call(), 2)
call_3758 = relay.TupleGetItem(func_2339_call(), 2)
output = relay.Tuple([uop_3745,call_3757,])
output2 = relay.Tuple([uop_3745,call_3758,])
func_3767 = relay.Function([], output)
mod['func_3767'] = func_3767
mod = relay.transform.InferType()(mod)
output = func_3767()
func_3768 = relay.Function([], output)
mutated_mod['func_3768'] = func_3768
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2685_call = mod.get_global_var('func_2685')
func_2686_call = mutated_mod.get_global_var('func_2686')
call_3828 = func_2685_call()
call_3829 = func_2685_call()
func_1993_call = mod.get_global_var('func_1993')
func_1999_call = mutated_mod.get_global_var('func_1999')
const_3831 = relay.const([[False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,False,True,True,True,False,True,True,False,False,False,True,False,True,False,True,True,True,False,False,True,True,True,False,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,False,False,False,False,False,False,True,False,False,True,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,False,True,True,True,False,True,False,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,True,False,True,True,True,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,True,False,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,True,False,True,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,True,True,True,True,False,False,False,True,False,True,True,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,False,True,False,True,False,False,True,False,True,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,False,False,False,False,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,True,False,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,True,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,True,True,False,False,True,False,False,True,False,False,True,False,False,False,True,True,False,True,True,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,False,True,False,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,False,True,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,False,True,False,True,True,False,True,False,False,False,True,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,True,False,False,False,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,True,True]], dtype = "bool")#candidate|3831|(1, 1365)|const|bool
var_3832 = relay.var("var_3832", dtype = "float64", shape = (330,))#candidate|3832|(330,)|var|float64
call_3830 = relay.TupleGetItem(func_1993_call(relay.reshape(call_3828.astype('bool'), [3, 13, 5]), relay.reshape(call_3828.astype('bool'), [3, 13, 5]), relay.reshape(const_3831.astype('bool'), [1365,]), relay.reshape(var_3832.astype('float64'), [330,]), ), 2)
call_3833 = relay.TupleGetItem(func_1999_call(relay.reshape(call_3828.astype('bool'), [3, 13, 5]), relay.reshape(call_3828.astype('bool'), [3, 13, 5]), relay.reshape(const_3831.astype('bool'), [1365,]), relay.reshape(var_3832.astype('float64'), [330,]), ), 2)
output = relay.Tuple([call_3828,call_3830,const_3831,var_3832,])
output2 = relay.Tuple([call_3829,call_3833,const_3831,var_3832,])
func_3847 = relay.Function([var_3832,], output)
mod['func_3847'] = func_3847
mod = relay.transform.InferType()(mod)
mutated_mod['func_3847'] = func_3847
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3848 = relay.var("var_3848", dtype = "float64", shape = (330,))#candidate|3848|(330,)|var|float64
func_3847_call = mutated_mod.get_global_var('func_3847')
call_3849 = func_3847_call(var_3848)
output = call_3849
func_3850 = relay.Function([var_3848], output)
mutated_mod['func_3850'] = func_3850
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3125_call = mod.get_global_var('func_3125')
func_3126_call = mutated_mod.get_global_var('func_3126')
call_3903 = func_3125_call()
call_3904 = func_3125_call()
func_716_call = mod.get_global_var('func_716')
func_719_call = mutated_mod.get_global_var('func_719')
const_3907 = relay.const([[False],[False],[False],[False],[False],[False],[False],[False],[False],[False],[True],[False],[False],[True],[True],[True],[True],[True],[False],[True],[True],[False],[False],[False],[True],[False],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[False],[True],[True],[True],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[False],[True],[False],[False],[False],[False],[False],[True],[True],[False],[True],[False],[False],[False],[True],[True],[False],[True],[False],[True],[False],[False],[False],[True],[True],[True],[True],[True],[False],[True],[False],[False],[False],[False],[False],[False],[False],[False],[False],[True],[False],[True],[True],[True],[True],[False],[False],[False],[True],[False],[True],[False],[False],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[False],[False],[True],[False],[True],[True],[False],[False],[False],[False],[False],[True],[True],[False],[True],[True],[False],[True],[True],[False],[True],[False],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[False],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[True],[False],[False],[True],[False],[True],[False],[False],[True],[True],[True],[False],[False],[False],[True],[False],[False],[True],[True],[True],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[True],[False],[False],[True],[True],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[True],[True],[False],[True],[False],[True],[False],[True],[False],[True],[True],[False],[True],[False],[False],[True],[False],[True],[False],[False],[False],[False],[True],[True],[False],[False],[False],[True],[False],[False],[True],[True],[True],[True],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[True],[True],[True],[True],[True],[False],[True],[True],[True],[False],[False],[True],[False],[True],[True],[False],[False],[True],[False],[False],[True],[False],[False],[False],[True],[True],[False],[False],[True],[False],[True],[False],[True],[False],[True],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[True],[False],[False],[False],[False],[True],[False],[True],[True],[True],[True],[True],[True],[False],[False],[True],[True],[True],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[True],[True],[True],[True],[True],[True],[True],[True],[False],[True],[False],[False],[False],[True],[True],[True],[True],[True],[True],[True],[False],[False],[True],[False],[True],[False],[False],[False],[True],[False],[True],[False],[True],[True],[True],[False],[False],[False],[True],[True],[True],[True],[True],[True],[True],[False],[True],[False],[True],[False],[True],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[False],[True],[True],[False],[False],[True],[False],[False],[True],[True],[True],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[False],[True],[True],[False],[False],[True],[False],[True],[False],[False],[True],[True],[True],[True],[False],[False],[True],[False],[False],[False],[False],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[True],[False],[False],[True],[False],[True],[False],[False],[True],[True],[True],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[False],[False],[False],[False],[False],[True],[False],[False],[True],[False],[True],[True],[False],[True],[True],[False],[True],[True],[True],[False],[True],[False],[False],[False],[False],[False],[False],[False],[True],[False],[True],[True],[False],[True],[True],[True],[False],[True],[True],[True],[True],[False],[False],[True],[False],[True],[False],[True],[False],[True],[True],[True],[True],[True],[True],[False],[True],[True],[False],[False],[False],[True],[True],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[False],[True],[False],[False],[False],[True],[True],[True],[False],[True],[True],[False],[True],[False],[True],[True],[True],[True],[True],[False],[False],[True],[True],[True],[False],[False],[False],[True],[True],[True],[False],[False],[False],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[False],[True],[True],[True],[False],[True],[False],[False],[True],[False],[True],[False],[False],[False],[False],[True],[True],[True],[True],[True],[True],[False],[False],[True],[True],[False],[True],[True],[True],[True],[True],[True],[False],[True],[False],[False],[False],[True],[True],[True],[True],[False],[True],[True],[False],[False],[True],[False],[True],[False],[True],[True],[False],[True],[False],[False],[True],[True],[True],[False],[True],[True],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[True],[False],[True],[False],[False],[False],[False],[False],[True],[True],[True],[True],[True],[True],[True],[False],[True],[True],[True],[False],[False],[False],[True],[False],[False],[True],[False],[True],[False],[True],[True],[False],[True],[True],[False],[False],[True],[False],[False],[False],[True],[True],[False],[False],[False],[True],[True],[True],[False],[False],[True],[False],[False],[True],[False],[True],[False],[False],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[True],[True],[False],[False],[False],[True],[True],[False],[False],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[False],[False],[True],[False],[True],[False],[True],[True],[False],[True],[False],[True],[True],[False],[False],[True],[False],[True],[True],[True],[True],[False],[True],[False],[False],[False],[True],[True],[True],[False],[False],[True],[False],[True],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[False],[False],[True],[False],[True],[False],[False],[True],[False],[False],[False],[False],[False],[True],[True],[False],[False],[False],[False],[False],[False],[False],[False],[True],[False],[False],[True],[False],[False],[True],[True],[True],[True],[False],[True],[True],[True],[True],[False],[True],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[False],[False],[False],[True],[False],[False],[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[True],[True],[False],[False],[True],[True],[True],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[False],[False],[True],[False],[False],[False],[True],[False],[True],[False],[True],[True],[True],[True],[False],[False],[True],[False],[True],[True],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[True],[True],[True],[True],[True],[False],[True],[False],[False],[False],[True],[True],[False],[False],[False],[False],[False],[True],[True],[False],[False],[False],[False],[True],[True],[False],[True],[False],[False],[False],[False],[False],[True],[True],[True],[False],[True],[False],[True],[True],[False],[False],[False],[False],[False],[False],[True],[False],[False],[False],[False],[False],[False],[True],[False],[False],[True],[True],[False],[True],[True],[False],[True],[False],[False],[False],[True],[True],[False],[False],[True],[True],[False],[True],[True],[False],[False],[False],[False],[False],[False],[True],[False],[True],[False],[False],[True],[True],[False],[True],[False],[True],[False],[False],[False],[False],[False],[True],[True],[True],[True],[False],[False],[True],[False],[True],[True],[False],[False],[True],[False],[False],[False],[False],[True],[False],[True],[False],[True],[True],[False],[False],[False],[False],[False],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[True],[False],[False],[True],[False],[False],[True],[False],[False],[True],[True],[True],[True],[False],[False],[True],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[True],[True],[True],[False],[True],[False],[True],[True],[False],[True],[True],[True],[False],[False],[True],[False],[False],[False],[True],[True],[True],[False],[False],[False],[False],[True],[True],[True],[True],[False],[True],[False],[True],[False],[False],[True],[True],[True],[False],[True],[True],[True],[False],[True],[False],[True],[True],[False],[False],[True],[True],[True],[True],[True],[False],[True],[True],[True],[False],[False],[False],[True],[False],[True],[True],[True],[False],[False],[False],[False],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[True],[True],[True],[False],[False],[True],[True],[True],[False],[True],[True],[False],[False],[False],[False],[True],[True],[False],[False],[True],[True],[True],[True],[True],[True],[True],[True],[True],[True],[True],[False],[False],[False],[True],[False],[False],[False],[True],[False],[True],[False],[True],[True],[False],[True],[True],[False],[False],[False],[False],[False],[True],[True],[True],[False],[True],[False],[True],[False],[False],[False],[False],[False],[False],[False],[True],[False],[False],[False],[False],[True],[True],[False],[True],[True],[True],[False],[True],[False],[False],[True],[False],[True],[True],[True],[True],[False],[True],[False],[False],[True],[False]], dtype = "bool")#candidate|3907|(1365, 1)|const|bool
call_3906 = relay.TupleGetItem(func_716_call(relay.reshape(const_3907.astype('bool'), [13, 15, 7])), 3)
call_3908 = relay.TupleGetItem(func_719_call(relay.reshape(const_3907.astype('bool'), [13, 15, 7])), 3)
output = relay.Tuple([call_3903,call_3906,const_3907,])
output2 = relay.Tuple([call_3904,call_3908,const_3907,])
func_3909 = relay.Function([], output)
mod['func_3909'] = func_3909
mod = relay.transform.InferType()(mod)
mutated_mod['func_3909'] = func_3909
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3909_call = mutated_mod.get_global_var('func_3909')
call_3910 = func_3909_call()
output = call_3910
func_3911 = relay.Function([], output)
mutated_mod['func_3911'] = func_3911
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2856_call = mod.get_global_var('func_2856')
func_2857_call = mutated_mod.get_global_var('func_2857')
call_3953 = relay.TupleGetItem(func_2856_call(), 1)
call_3954 = relay.TupleGetItem(func_2857_call(), 1)
uop_3978 = relay.sinh(call_3953.astype('float64')) # shape=(10, 8, 10)
uop_3980 = relay.sinh(call_3954.astype('float64')) # shape=(10, 8, 10)
output = uop_3978
output2 = uop_3980
func_3999 = relay.Function([], output)
mod['func_3999'] = func_3999
mod = relay.transform.InferType()(mod)
output = func_3999()
func_4000 = relay.Function([], output)
mutated_mod['func_4000'] = func_4000
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2717_call = mod.get_global_var('func_2717')
func_2718_call = mutated_mod.get_global_var('func_2718')
call_4048 = relay.TupleGetItem(func_2717_call(), 0)
call_4049 = relay.TupleGetItem(func_2718_call(), 0)
var_4065 = relay.var("var_4065", dtype = "bool", shape = (91, 15))#candidate|4065|(91, 15)|var|bool
bop_4066 = relay.greater(call_4048.astype('bool'), relay.reshape(var_4065.astype('bool'), relay.shape_of(call_4048))) # shape=(91, 15)
bop_4069 = relay.greater(call_4049.astype('bool'), relay.reshape(var_4065.astype('bool'), relay.shape_of(call_4049))) # shape=(91, 15)
uop_4076 = relay.atan(bop_4066.astype('float64')) # shape=(91, 15)
uop_4078 = relay.atan(bop_4069.astype('float64')) # shape=(91, 15)
output = relay.Tuple([uop_4076,])
output2 = relay.Tuple([uop_4078,])
func_4083 = relay.Function([var_4065,], output)
mod['func_4083'] = func_4083
mod = relay.transform.InferType()(mod)
var_4084 = relay.var("var_4084", dtype = "bool", shape = (91, 15))#candidate|4084|(91, 15)|var|bool
output = func_4083(var_4084)
func_4085 = relay.Function([var_4084], output)
mutated_mod['func_4085'] = func_4085
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2590_call = mod.get_global_var('func_2590')
func_2592_call = mutated_mod.get_global_var('func_2592')
call_4235 = relay.TupleGetItem(func_2590_call(), 0)
call_4236 = relay.TupleGetItem(func_2592_call(), 0)
output = call_4235
output2 = call_4236
func_4238 = relay.Function([], output)
mod['func_4238'] = func_4238
mod = relay.transform.InferType()(mod)
mutated_mod['func_4238'] = func_4238
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4238_call = mutated_mod.get_global_var('func_4238')
call_4239 = func_4238_call()
output = call_4239
func_4240 = relay.Function([], output)
mutated_mod['func_4240'] = func_4240
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2925_call = mod.get_global_var('func_2925')
func_2927_call = mutated_mod.get_global_var('func_2927')
call_4294 = func_2925_call()
call_4295 = func_2925_call()
output = relay.Tuple([call_4294,])
output2 = relay.Tuple([call_4295,])
func_4327 = relay.Function([], output)
mod['func_4327'] = func_4327
mod = relay.transform.InferType()(mod)
mutated_mod['func_4327'] = func_4327
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4327_call = mutated_mod.get_global_var('func_4327')
call_4328 = func_4327_call()
output = call_4328
func_4329 = relay.Function([], output)
mutated_mod['func_4329'] = func_4329
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4363 = relay.const([[[5.034984,2.277379,6.273878,6.299703,7.157987,0.017000,-7.589980,8.579846,-5.007402,-2.473950,4.645984,3.129461,9.551148,5.022490,4.371610]],[[-6.839864,-9.265210,-3.158230,1.215772,-7.773453,-5.674377,3.308397,-4.300801,0.130162,-9.481849,0.767629,-1.735469,9.637891,0.187790,-5.641254]],[[8.434761,-1.205477,7.581817,3.529623,-3.537041,5.760337,6.562502,8.129332,-1.014059,0.179980,-0.225104,-5.306841,7.729260,-4.013627,-6.786375]],[[-4.036322,4.030009,7.488322,7.048221,9.579699,9.848238,-0.527639,8.326017,-6.214842,-3.066370,-9.332466,-3.298464,-0.423511,-6.087318,-9.425397]],[[1.168844,-5.088205,5.064456,1.093382,-6.970196,-5.821399,-0.746614,0.854811,3.421117,5.246992,1.603137,-3.644109,-6.597249,2.713767,-0.453567]],[[4.528106,-6.076564,-5.883799,-6.842766,5.485514,1.748616,-2.597875,-7.819473,2.783025,4.709492,-1.265281,5.434976,-8.457486,3.738175,-1.976093]],[[4.104400,3.256080,-2.300219,-2.486246,-6.346811,5.137879,9.122019,9.598704,6.687304,4.673662,5.756658,1.744427,1.346825,-3.625736,-1.247471]],[[-3.742183,-6.952444,8.419574,1.696584,5.932635,8.359912,5.821779,-4.306773,8.801294,-4.956990,-4.158680,-3.115041,-6.514207,5.296801,-1.424586]]], dtype = "float32")#candidate|4363|(8, 1, 15)|const|float32
uop_4364 = relay.rsqrt(const_4363.astype('float32')) # shape=(8, 1, 15)
output = relay.Tuple([uop_4364,])
output2 = relay.Tuple([uop_4364,])
func_4368 = relay.Function([], output)
mod['func_4368'] = func_4368
mod = relay.transform.InferType()(mod)
mutated_mod['func_4368'] = func_4368
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4368_call = mutated_mod.get_global_var('func_4368')
call_4369 = func_4368_call()
output = call_4369
func_4370 = relay.Function([], output)
mutated_mod['func_4370'] = func_4370
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3655_call = mod.get_global_var('func_3655')
func_3656_call = mutated_mod.get_global_var('func_3656')
call_4426 = func_3655_call()
call_4427 = func_3655_call()
uop_4435 = relay.log(call_4426.astype('float32')) # shape=(15, 13, 12)
uop_4437 = relay.log(call_4427.astype('float32')) # shape=(15, 13, 12)
func_1212_call = mod.get_global_var('func_1212')
func_1216_call = mutated_mod.get_global_var('func_1216')
const_4440 = relay.const([3,6,-9,4,7,-5,6,-5,-2,1,7,2,-6,3,7,9,-4,-9,10,-6,-9,-9,6,-5,-6,-8,8,10,-5,4,-9,-1,8,7,-5,6,-5,1,8,10,2,-8,9,4,1,5,1,-4,-8,-8,3,9,8,9,-5,1,-6,8,4,-9,-10,-6,10,1,-2,-1,2,5,9,5,3,-1,-4,6,1,-5,-2,3,3,-2,-2,2,-2,-1,8,-2,3,-2,2,-4,-7,-5,2,-5,-1,-1,-9,-4,-7,1,-4,-10,8,-3,4,-3,-8,2,-6,8,3,8,-2,2,-9,7,-7,2,1,-6,-5,-5,-9,7,-3,1,-4,-9,-3,-6,-5,-8,1,10,5,6,6,3,8,9,4,-9,-8,3,-9,-6,5,9,-3,-8,2,8,-5,3,2,-5,1,5,2,3,-8,-6,-2,-8,3,-3,10,-4,4,-6,-7,-1,5,-10,-3,-8,3,-3,-10,-9,-7,-7,6,1,7,4,-10,-4,2,-4,8,-7,8,5,-3,1,9,-8,-9,4,-10,-2,5,7,-10,4,5,-9,1,2], dtype = "uint16")#candidate|4440|(210,)|const|uint16
var_4441 = relay.var("var_4441", dtype = "uint16", shape = (150, 14))#candidate|4441|(150, 14)|var|uint16
var_4442 = relay.var("var_4442", dtype = "float32", shape = (88,))#candidate|4442|(88,)|var|float32
call_4439 = relay.TupleGetItem(func_1212_call(relay.reshape(const_4440.astype('uint16'), [210,]), relay.reshape(var_4441.astype('uint16'), [150, 14]), relay.reshape(var_4442.astype('float32'), [4, 11, 2]), ), 0)
call_4443 = relay.TupleGetItem(func_1216_call(relay.reshape(const_4440.astype('uint16'), [210,]), relay.reshape(var_4441.astype('uint16'), [150, 14]), relay.reshape(var_4442.astype('float32'), [4, 11, 2]), ), 0)
func_2132_call = mod.get_global_var('func_2132')
func_2136_call = mutated_mod.get_global_var('func_2136')
const_4446 = relay.const([-9.889719,4.867058,4.110908,-1.367162,-9.552181,-1.228003,-1.769739,7.795311,-7.075611,-7.642461,4.918009,8.838691,-0.026442,2.755831,3.494342,7.526766,8.441204,-5.932850,3.595934,-9.125941,-5.317645,7.499848,7.461881,5.037193,-2.111705,0.504367,-2.209201,-9.347566,-9.687473,-2.109078,-0.827357,3.516595,-6.575155,-9.839378,3.156473,-2.459472,5.990155,-5.391170,-7.729527,6.236930,1.575556,-1.058498,0.448232,-6.954784,-1.204476,4.318952,-9.360338,-0.531886,2.767912,5.119615,-9.321342,-2.269282,2.986561,-8.645665,-4.420641,-1.523402,-4.942060,3.872056,4.616718,7.469314,-1.282231,-5.054906,0.969062,-2.070431,5.586886,8.644043,0.702686,-3.031404,-8.430727,-4.728546,-9.488793,-7.120217,9.308718,-4.639861,-2.807068,-4.972163,4.846987,1.170374,-5.640987,1.320087,5.866837,3.406594,-2.333955,4.997707,-9.524967,-4.540610,-0.023561,9.430598,-0.828585,3.105554,0.034499,-8.598200,-0.662769,9.302273,6.868730,3.484187,-9.259529,5.195775,-7.765965,5.705725,-8.678787,1.977839,2.054728,-8.445262,-0.074897,-6.595327,9.712610,-9.347293,-2.358325,-0.696937,-3.604384,8.782708,-0.854961,-6.246259,7.442982,2.720707,9.236509,1.542662,5.538304,-3.501023,2.337554,1.632035,5.250501,-5.693239,-5.270326,6.823712,-0.995194,9.157229,5.018559,5.795547,4.705559,-2.605711,1.574716,5.495451,0.638792,1.003085,-1.337765,-1.451233,-7.581261,-9.869242,4.041335,-2.119651,-0.078744,6.008310,8.446392,-3.361652,8.048175,3.043802,-8.274635,-8.964271,-8.038940,-9.377428,-5.921432,1.433648,-6.389274,1.717296,9.249667,6.603964,1.068534,-0.102996,-1.714346,-9.109545,7.819580,-7.151591,-1.604134,-3.011847,-3.734765,-2.969059,1.455948,-8.647972,0.274222,3.109433,3.751622,-8.947859,5.941691,8.072540,6.620510,-2.551458,9.685077,2.824174,1.989717,-6.480716,-9.594835,-3.931727,-1.526895,8.395128,3.539510,5.317166,-8.588336,0.975401,-0.656839,4.550194,-7.410668,-8.727334,-0.490238,-9.523924,4.347879,-5.725710,7.324261,4.912476,2.064965,4.040186,-0.339792,2.659523,-0.451933,-8.161869,4.632653,-4.579138,5.451445,6.841762,-8.400940,5.461991,-8.959650,-2.335373,9.432642,-4.292422,-7.539051,5.161062,-6.552053,8.572652,3.906073,6.693111,6.687263,7.606442,-3.630879,2.226993,-2.066421,5.480431,-1.913614,-8.716647,0.787829,-7.672823,-2.874390,-0.385315,-6.669998,9.657707,-3.223744,-7.309494,-9.018315,-4.493319,-8.092995,-4.275566,9.136278,8.660079,2.955813,1.070838,-7.282201,-4.146614,5.712709,9.106652,2.487507,1.259729,0.004804,1.518811,7.138669,5.467641,0.725614,-6.944557,3.086661,-5.065696,9.581448,6.629291,7.647575,-0.158164,0.046389,-6.880055,-1.709177,-3.927356,1.625600,-9.658666,0.536966,-9.848534,8.875593,6.888359,2.336581,9.116852,1.602399,-6.650297,-8.412638,3.512358,6.692894,-0.974610,-8.367178,8.920810,0.831264,-8.207090,0.654845,8.080829,-7.216073,4.513763,9.083239,-8.306958,-1.634468,5.112472,-7.143001,-9.885045,9.555350,1.851910,4.513510,1.792153,-5.906626,3.593203,3.607943,-6.525135,-3.074178,2.363286,-7.684676,-5.491117,-5.260793,-1.850771,4.011774,-7.777575,9.731028,-2.545812,7.792849,0.496974,7.075281,0.025097,-7.994304,-6.255689,-3.223232,-5.054721,-9.935263,2.168086,-6.646438,8.176551,-6.694196,-6.795633,8.489530,-3.368977,8.105650,4.145764,-2.277600,9.452679,-3.159664,1.041758,5.828581,-0.029757,5.422996,-0.296260,0.575203,6.566699,-8.215314,7.050955,-6.982570,-5.538189,-0.361859,-2.976397,-4.953807,2.737047,-4.963209,6.010100,-3.253455,8.886353,2.419864,5.686307,6.930294,-6.494448,9.167538,3.564149,0.006265,4.825200,5.150654,8.057972,5.602626,4.671578,8.748520,5.538345,-9.321015,9.090006,-1.945432,-0.096695,4.468260,7.426727,-1.949781,-3.396591,-9.360276,9.228345,-3.633184,-1.248656,0.915728,0.236085,-2.606088,-3.396198,9.054807,7.679758,5.791626,3.353439,-3.423385,2.911676,8.117715,8.684294,6.654617,-0.906849,4.732774,5.437967,-1.737017,1.774010,9.597832,5.698964,-0.603123,-1.046734,-5.496821,-7.290947,8.453843,1.175564,-8.211250,-0.526821,-3.362451,4.262840,3.570673,-9.077429,1.081158,7.639442,-4.583657,2.130063,1.448959,-7.655191,7.691193,-2.510048,-6.028977,5.862180,-6.115921,-7.686250,-6.651264,-1.532872,-6.044322,5.279679,9.654440,-3.209597,3.966542,-8.481010,4.755199,-5.161340,1.368535,6.541487,9.206915,-2.999018,1.784774,-4.036967,-5.796653,3.575972,2.489094,-3.332075,2.902121,-8.937961,-2.288926,3.573085,4.621728,-8.733288,8.412410,-5.232520,2.958997,-3.817905,2.974227,-4.872236,-2.606890,-8.171486,7.540606,-4.017764,6.371869,6.813216,1.789075,-7.437522,1.321776,6.301141,-7.485575,4.016562,0.133283,-5.689223,-8.095365,-8.515676,8.472839,-4.448684,-9.074103,5.791627,-6.549796,1.373820,-1.961752,-0.654711,7.224109,-2.842407,-4.689223,0.506738,3.868951,-7.579897,-2.639026,-4.989025,-3.061136,-9.276473,4.199062,-7.392179,7.059098,9.079724,4.923221,6.067020,-6.188063,1.923450,9.529214,-5.414011,-0.070862,-3.523344,0.595978,-6.743930,6.235945,-8.823435,4.459414,-0.865441,0.460501,-5.828663,-9.266589,1.120436,1.531819,4.098495,8.793490,1.920852,-5.618578,-7.872758,2.970582,1.553159,-0.138980,0.867679,5.916491,-4.774024,-8.093214,0.592665,-5.290754,4.592161,1.596957,-6.078528,-1.667158,5.909603,5.833696,-2.980395,-8.881833,2.293755,-3.696460,-4.830314,5.193682,-8.842354,5.939018,-1.949918,-4.094516,4.184534,-4.349044,-2.264718,-5.787254,5.611998,0.034528,-3.468195,-5.390529,-7.465322,-2.995352,-6.240880,6.568704,1.897328,-6.344789,-8.848568,9.311647,6.523387,3.535168,-3.453769,3.627458,5.111049,-0.398742,-3.907581,-0.809258,6.780832,-9.626445,-6.202321,-8.553272,-2.613765,1.442582,7.463268,3.659188,-2.168669,-1.482341,-0.099780,-8.987373,-2.976181,8.728703,1.259111,-2.513644,-6.668639,-2.036302,-6.422638,4.939150,-5.597561,-8.704253,5.411947,-7.164356,-3.553038,8.712717,-4.504034,4.964972,-6.290227,2.465814,-4.467419,-0.909539,-8.409104,4.810360,1.128861,-7.134675,3.296804,2.427721,-1.024675,-2.924227,-7.982265,3.172163,8.315868,4.184761,3.817045,-4.093029,-4.671082,-6.413703,8.937216,-3.877027,-4.974495,-4.524821,0.185500,4.021829,4.212829,-3.508179,4.789594,-9.417062,-0.642308,-9.385042,7.823405,2.597778,5.070189,-1.223348,6.104703,8.648412,3.413980,8.815858,9.585139,-9.960104,-3.072921,-7.117812,-4.626251,1.596410,-0.338056,-3.124149,-6.327756,-9.879514,-5.596837,-2.846742,6.344382,0.488611,-1.695882,1.269002,3.568400,-8.311849,-3.221507,6.020657,-3.914194,-7.857800,-3.681611,-8.757209,-7.168715,-0.155902,4.138256,9.044999,-2.502430,-0.328404,8.915794,-8.604467,5.084694,6.105682,0.026855,7.586772,0.685277,0.590609,-8.844351,-3.317231,-9.049250,3.517029,1.751638,-5.818942,-0.114662,-4.843839,-9.390803,-8.267448,-2.207180,3.482764,7.676786,5.663137,-5.653641,-3.617154,-0.255622,-3.010360,-6.811034,-1.309016,-8.762721,1.432997,0.110326,-3.117405,1.309777,-6.439431,-7.221234,7.483283,-8.928796,-3.823454,3.095632,0.496230,8.187801,-9.391035,-3.280054,-6.829748,6.364533,4.107374,7.011576,-7.181017,-9.421486,-9.786588,8.593310,-1.936375,-4.357207,-0.028547,-6.185956,2.128489,2.302372,0.582909,5.175876,-5.383626,0.433782,9.486286,-5.785068,0.604294,-1.633711,7.506716,-5.192642,3.630478,8.788070,-2.523861,-0.882167,5.754231,-6.304043,7.752563,-6.699374,-8.871965,0.812649,8.998175,-8.041543,-0.986191,-3.604968,-9.338774,-2.213831,-4.225154,4.168669,0.740727,-4.294142,-4.515213,7.561031,-6.395792,7.595681,3.061809,7.527251,-4.316066,-2.903144,-6.874100,4.136912,8.885482,9.905908,9.517030,-5.577276,-2.104402,1.165649,3.944187,-1.042143,2.942627,7.011418,-4.704517,3.579644,-9.147249,4.921692,-2.362785,3.134922,-3.377948,9.212552,6.951073,-7.961314,2.813923,-3.603101,-1.942333,-6.251693,2.236848,8.646738,-4.803338,-2.063665,-7.260155,-7.555987,-0.661039,-3.108717,-4.604899,-7.414430,1.521437,7.689609,3.151577,-6.418009,-2.966080,2.912332,-7.465839,7.122158,8.841543,1.257885,2.270870,-1.097026,2.571271,6.428771,1.054013,2.621827,-0.497893,9.853724,0.954292,-8.884742,-1.801672,9.334629,-1.701954,-5.979180,-0.507129,6.099070,0.847422,-9.231848,-6.523375,-0.177030,8.644830,-8.762863,-8.853699,9.641178,9.120907,2.614129,8.301772,-9.200905,4.942658,0.952426,-6.362451,6.927273,3.308505,-4.032585,7.841027,6.222749,5.481581,8.797490,7.476138,3.515090,-2.278201,-4.989521,9.861284,8.320604,0.561133,-7.366198,7.086478,0.712665,8.716309,-6.476587,-4.908152,-0.067019,1.538065,5.638454,-7.348481,-0.258792,2.512683,7.962483,7.907659,2.210192,5.159546,7.443100,-0.061904,5.895035,-2.375158,-8.298147,7.993805,-5.442562,-0.688823,0.315932,-1.755359,5.642460,9.353110,-3.365943,7.972048,0.106946,-2.322488,7.073768,-9.203003,-0.812253,-2.320012,6.152803,0.919843,0.350381,-7.603291,6.874345,-8.763068,-1.312167,7.743348,-6.704498,5.097662,3.202563,-9.190996,-4.944642,-3.344463,-7.772242,5.510568,-0.323711,8.400844,3.297007,1.161172,9.612494,2.181660,4.438848,-5.447707,-4.766069,5.968069,6.807463,-0.178822,-1.656526,5.339417,-4.323708,0.412320,2.359027,-4.500164,-4.181772,6.084314,4.540501,2.504318,6.905478,-0.781542,5.905328,-3.322462,-8.264433,-9.083472,5.575593,2.470931,0.301526,-5.465799,4.691110,8.317548,-1.928039,4.742201,0.872304,-9.561415,8.374359,-4.870249,3.213325,0.509518,-5.344009,-2.039934,0.029402,4.392429,-0.707038,-3.059779,-7.286687,7.646596,-8.491101,-2.554810,-6.715714,9.056628,9.211360,-6.236028,-6.785601,-8.657422,-7.295376,-8.841186,-9.153486,-8.159365,3.289531,9.756150,-8.627706,4.239376,1.271310,-6.182277,-8.275961,1.714235,-4.263499,-4.203115,-2.304743,7.715281,-0.065605,-8.016445,7.757663,3.735151,1.098031,-1.690091,-7.608933,7.888951,8.751210,4.621238,1.396354,1.220144,-6.356556,-8.042470,2.993502,9.857196,7.686215,-9.756938,-4.628927,0.771177,-9.350946,3.385688,8.252734,4.726379,0.803404,7.758781,2.209038,-2.337730,-8.580792,-4.636159,-2.279421,7.581252,-3.680728,-2.868057,-2.069144,-5.464422,1.274907,5.623950,-0.202235,4.596197,4.036797,-4.040940,4.008157,-8.223590,0.901704,4.556331,2.850037,6.323418,1.559348,-4.800871,-7.062618,-9.999309,6.730255,-0.837593,-2.924124,3.332643,-1.632592,7.366698,-3.875045,-8.489955,-0.616450,3.651108,-7.379081,4.464256,-5.636385,6.720467,5.696649,-8.199029,6.793679,-4.073317,-2.926280,4.063815,-6.861892,-2.375295,3.195023,-7.741599,0.582135,0.817581,7.074735,0.563335,-4.935771,-6.313411,-3.118506,-3.637962,5.766643,-1.713442,-3.209600,3.740385,-7.520986,1.905440,-0.676536,0.657097,7.206804,3.653889,-6.136557,-9.983029,-9.367854,-5.792022,8.237857,-4.041619,4.017136,-9.591941,2.150082,-2.919835,-7.402365,7.470148,-9.998160,-4.502110,3.011455,-9.382712,-8.565159,-8.185886,8.084103,6.513723,-0.771238,8.254215,-4.045793,6.356871,7.137921,4.465020,-3.080627,-5.526365,-7.368658,-0.994801,2.814261,2.185581,-9.882368,-2.253218,-0.284272,-6.020175,6.088266,-5.444552,-5.580624,8.863346,-0.997940,0.438514,1.936807,5.136839,-2.701804,6.342740,-2.066830,0.203512,0.295399,-7.939643,7.543625,-1.084313,-1.736891,0.138697,-9.265257,0.340262,7.666616,9.542483,-7.899911,-7.853491,9.955274,-6.029535,-6.011467,-5.185869,5.752515,8.976554,9.512546,-9.798856,5.841822,-6.733828,-3.888753,-1.841490,-9.611557,5.489918,-5.990278,8.503619,1.105524,5.542353,6.652282,9.178090,-2.816375,-4.999683,-5.743993,3.063059,-5.647681,-8.278765,4.025965,-7.790474,-9.672878,8.177928,-4.257488,-6.060407,-7.805017,8.615774,4.705923,7.384942,-7.342619,-5.830452,-1.111458,-6.722591,6.696174,0.816662,7.481186,9.777877,4.623512,-5.448570,0.106875,-9.250290,-9.609447,-3.327315,-3.510586,3.602293,8.911533,-8.095468,3.612765,-8.112284,7.705241,-6.638076,2.616203,-3.163842,-5.987533,-4.366080,-5.243017,1.757593,9.743635,-7.202953,8.329735,-4.777686,8.218263,-9.801526,5.277775,-3.324789,2.428888,4.450280,-7.523047,4.635779,-7.074925,-4.614808,-9.498451,7.992440,4.766188,-2.666081,8.319710,2.544197,1.276182,5.766376,-7.068360,7.704946,-1.504373,2.258806,-4.862863,0.333028,-0.910917,6.218370,-8.957780,-4.116613,2.389872,-7.861699,7.795303,3.283747,-6.085892,8.706372,-0.811913,-9.379106,8.566963,8.453556,-5.311181,-2.923884,8.670220,-4.287750,-3.658846,9.337801,7.218043,-5.765365,-8.639937,1.324283,1.953995,8.845751,9.094723,-9.160530,4.715719,-5.432154,3.766129,3.186712,0.943263,-7.350942,-3.044706,9.716445,0.363663,6.057411,1.077931,-1.321410,5.035657,9.974664,8.888014,-2.115860,6.184668,4.204532,9.976999,6.492612,-6.420346,5.769822,-0.600345,-1.470960,-5.644356,4.898109,-0.823791,-5.932340,3.619892,-1.413932,-4.838486,-2.092763,3.497943,-8.683126,-5.405475,6.486066,0.217642,1.741932,9.885542,6.964575,8.415855,-1.256003,7.955076,-2.463109,-2.186265,1.275280,5.971210,-7.807752,9.852697,9.353807,6.880767,-1.162119,8.012353,-5.876201,4.976941,1.500267,-7.654421,-5.040795,-3.451633,-5.814692,9.335936,7.995278,8.604062,-1.838595,-5.420465,-1.886216,-5.341249,-6.457585,8.391258,7.481751,9.420886,1.489202,-9.205853,5.087044,-6.920653,7.582885,1.116805,-3.787838,-6.281579,-5.182632,9.854751,-5.232663,9.218145,3.564714,7.401051,-0.386874,0.780685,-5.596243,1.621733,2.022304,-1.603267,-9.748983,7.541865,-1.436553,3.427711,9.092160,-1.544366,-5.386488,-6.891864,-2.592096,-1.774427,-7.727985,-0.579151,6.767268,-5.876514,-5.673165,1.812183,6.533073,8.683763,4.593673,-9.935761,7.555783,-5.337828,-7.311005,-0.605431,8.656910,0.040293,-8.165033,-8.074526,-4.404880,-8.989225,7.599757,1.552454,7.543945,9.813820,3.708535,1.229227,-4.211582,-0.544985,-7.990983,1.503634,-4.274027,-7.165595,-2.890030,-4.822796,9.673979,1.287549,2.609696,0.445747,-5.010929,9.308078,-4.236218,-8.393997,-2.642029,-6.400890,5.400114,-6.125711,-6.914968,7.691295,-3.342263,0.179438,-2.628941,-1.935221,3.060317,-8.408116,-9.440816,2.985696,-9.595664,2.724076,8.960535,-8.470976,2.091012,-4.237327,1.998548,7.583651,2.104714,1.746381,9.815563,6.125732,-2.480064,-2.560010,8.112914,2.041046,-7.745545,0.814183,-3.882081,-3.637245,-1.725089,-8.326166,-3.854550,5.513539,-7.351877,-5.744826,9.655848,1.716091,7.952034,-1.233045,6.837173,5.115544,1.782361,4.341652,-1.090565,1.043371,-0.331687,-1.341124,2.428733,7.728439,-5.757144,-2.064625,6.145561,9.900751,5.619874,-0.359157,-8.298632,-0.573816,-8.989798,4.167998,-3.954222,5.261417,-7.977755,2.478225,-8.835999,-0.264461,-1.133004,-0.678096,-9.896181,2.819016,9.287766,-7.891324,4.305076,4.336229,5.625003,-0.046685,-4.241799,-2.205147,2.351986,-1.107572,-3.724084,-4.528612,3.636962,4.047042,0.072571,-9.085545,-5.083577,-2.883810,3.876073,4.668916,-0.572497,-8.907344,4.799052,-0.654115,1.192462,-1.801826,2.570432,-8.009824,3.885289,-8.624068,-8.575868,-9.369290,1.176350,-7.439524,-6.827226,7.852981,7.815350,6.410225,1.486595,8.861589,7.507532,-4.947522,2.216412,1.540424,-9.848579,5.636881,-5.490341,9.061196,-1.357368,2.296425,6.075069,0.296769,-3.382151,-1.307015,-6.535095,-5.276291,7.138171,-1.833729,-8.474266,-1.048134,7.436595,2.133869,2.788030,-6.409476,1.026579,-8.253708,-2.053961,0.987436,1.116467,-5.132524,-1.573636,0.516514,-9.055310,-9.354011,6.677914,8.979337,-9.577469,4.732963,-7.119600,2.488813,2.274976,-3.377324,0.045735,-8.239020,0.681090,2.272892,-5.660553,-8.427930,-0.287229,4.331742,7.377131,7.886612,1.817202,7.823522,-7.807990,1.614154,-1.931317,8.897743,-3.311167,-7.459533,0.978343,6.388730,-7.174717,-5.719184,-6.220869,3.370171,-6.560478,4.980314,0.243340,8.320726,4.788224,3.585518,8.918654,5.825435,-5.854282,6.974392,0.144974,1.183289,-3.214908,6.889763,0.416209,-8.500331,7.215331,-9.626466,-8.849295,-4.263161,-5.947187,-8.056605,-0.202627,4.640033,4.888536,-2.774664,3.119857,7.453280,9.133600,-6.683138,4.465480,9.776155,-1.947389,6.589561,9.520006,-3.604707,9.858798,5.378527,7.970811,-0.248612,-7.138368,3.652306,7.985431,3.157971,1.439834,5.633158,7.908593,5.533179,-5.884643,-4.793121,-7.711833,-6.519753,1.949920,-8.591292,-3.130568,-5.270919,0.351302,9.572057,-0.177453,-1.023293,-8.412445,-5.227935,-6.078685,-2.667629,-2.938917,-8.455102,4.443521,-6.650920,1.902913,3.185692,8.090091,-3.609000,-9.579869,4.919295,-9.070782,-3.653380,-3.931096,-8.597991,3.587368,1.696180,-6.060953,-2.606426,-9.077742,-0.204028,8.638168,-3.852542,1.272399,-0.035122,-4.667522,-0.388267,3.523200,6.887475,3.527849,-1.557767,-2.995102,-0.249778,6.167199,9.506468,5.299544,7.743736,7.519293,-8.536532,-6.296630,-1.052678,-1.465771,-1.675419,-2.140612,1.528577,1.523824,-2.080826,-4.137147,-1.999004,8.583158,5.913361,-9.903658,-2.455750,-4.755252,-4.037550,3.317084,1.223677,-9.091476,5.667496,-7.811253,-6.281655,-9.598668,7.804484,-9.735764,-5.408743,6.900458,-1.903527,0.106657,-7.842999,5.495200,-0.414506,0.308670,4.307091,8.946480,-0.232656,8.690324,-4.928638,2.104177,-4.935369,7.653815,-2.382460,1.814935,-7.087667,6.426499,-8.470167,-8.777172,7.688104,2.686817,7.917286,4.587887,-9.347660,-5.051811,-4.939982,-2.532917,6.681686,0.466204,4.624808,6.309509,0.441079,-5.651593,4.246796,3.200820,-1.300733,8.631177,3.670153,-2.210745,-5.765043,-7.713145,-8.496500,0.789283,2.703770,9.222429,3.851721,-7.939333,1.416404,4.428840,8.364003,9.661067,2.461350,4.501155,3.604742,-9.002676,3.955042,-3.175431,1.649296,8.412123,1.971419,2.858982,5.189011,2.925911,-7.431590,-6.635916,1.662125,-3.216973,-6.670834,-3.524763,9.894590,7.226226,9.863660,-3.171395,-3.908727,1.316670,5.862620,-5.144791,1.339854,8.508765,-0.855772,4.462319,-1.440025,-4.388521,-6.055590,-9.116725,4.676123,-8.895510,-4.763865,-0.206634,-4.669084,-8.594094,-4.220752,8.594984,-5.266316,-9.365426,-2.939629,4.320069,4.643377,8.736425,-7.095007,2.321657,-4.339999,-7.517274,-6.096332,7.359108,8.865871,-5.090820,-6.639502,3.734302,6.374838,-4.998639,0.157743,-9.226093,0.147427,-6.908277,7.223370,-9.043359,3.551042,-0.727238,6.391245,0.992239,6.763293,-5.171805,6.274361,0.282417,8.787151,-3.143085,8.459340,5.769889,-9.028802,-7.761422,1.709280,2.318339,3.109075,3.747716,3.354441,1.056171,-5.461940,1.241605,1.889957,-0.618097,-2.282259,-3.735611,3.858232,-4.486499,3.428796,-9.984142,6.868156,-9.743688,0.352170,6.868757,-8.842599,-2.815700,8.397409,-9.456050,-7.588511,8.614331,8.126093,-3.925680,-3.032232,-4.427519,9.156998,-4.008877,1.977158,5.136444,-4.570581,7.911411,-2.484448,-5.453453,1.303155,-9.767294,3.463395,-5.394187,9.236488,-6.474600,-8.254816,-0.753663,8.051486,-3.249025,3.735295,3.800374,2.985201,-4.704078,-7.638890,4.932771,5.533802,5.350773,9.340813,6.258260,-7.890998,-0.986047,-9.452498,-3.538970,-1.569270,-4.930067,9.384481,6.130210,1.347767,-7.037136,-1.325829,7.929204,5.693244,3.182389,7.277339,-1.190148,-0.300480,-7.961869,1.699512,-9.651849,1.186625,5.717606,-7.791370,6.925166,-5.713087,-8.138417,5.886341,-4.316748,-0.368867,-8.204310,-9.965821,-2.299120,7.000634,0.674327,2.434283,-2.736618,1.307114,6.730433,0.139140,1.924168,-0.565300,-3.614217,2.584070,5.503011,-4.738721,8.081555,-1.155077,4.857660,-6.541282,-4.264923,-0.953961,8.899785,-3.849105,-7.852136,3.184425,7.253156,9.005432,-3.948852,-5.722413,-1.253168,8.142078,1.890989,0.642249,7.891981,3.887684,-2.470848,8.992592,3.806815,-8.571602,7.145243,0.466660,-2.758181,-5.126767,-8.834584,-6.602498,-1.047287,-4.832367,9.412313,-8.381895,-1.199259,-5.502745,-4.914529,-3.702117,0.763017,4.261944,-5.716666,1.378542,5.088961,9.647321,-6.355977,-8.538250,8.467182,-3.523477,7.618226,-1.311225,-2.251219,-8.655522,-1.809451,0.313360,7.078869,-3.384843,1.185166,-2.616882,3.236433,-2.528746,8.559182,-6.324432,-1.567369,4.367816,-6.219808,9.010215,-4.796150,8.965932,-5.388823,-6.146545,1.055676,4.916056,-9.537522,4.096581,-9.158600,6.568428,-4.267008,-3.610366,-2.459797,-9.595203,1.417535,-7.909926,4.687401,-9.168549,-9.276615,-7.241052,6.428906,-4.181216,4.327877,-7.362446,-1.309834,-2.768233,1.052117,8.194501,-1.394168,-2.161460,9.910787,-8.635145,-6.563186,-1.291911,4.252191,-6.309973,-1.022219,0.481250,-6.817212,4.747070,3.653968,-8.565186,0.378166,0.613518,3.029558,7.056085,-3.327251,-9.541838,6.765221,2.388796,6.599411,7.206520,-9.738829,1.165255,-8.678546,5.486162,-7.957316,8.056436,1.267404,-5.227084,-6.022183,6.659217,3.630675,-9.639081,-6.239866,7.278167,7.960347,-1.798320,3.717382,9.229432,-1.206740,-3.230234,-6.788313,-5.979730,-6.017957,-6.322786,1.790326,1.865595,2.756211,5.285001,6.416628,9.048223,6.764494,-3.255344,-2.610387,5.494179,3.229763,8.099157,8.278238,7.255789,-0.446386,-0.482053,-1.821732,-8.946493,8.223805,0.570303,3.592113,-2.429553,-6.689153,4.019769,-1.983627,-4.001748,-3.263675,9.066741,8.241442,4.799127,-0.412480,2.389425,6.311383,1.117718,4.310898,7.149535,8.326595,-9.610819,4.004130,-0.693619,-3.322944,8.980779,7.304447,-5.265291,4.104943,-9.645080,3.770963,-8.696884,-5.211124,-0.354830,9.430642,-9.472031,0.099324,-4.165588,-7.752323,-6.481447,3.175803,-9.840058,-6.800258,-9.211148,-5.493388,4.099120,-7.537635,5.088767,1.708340,2.843206,2.181131,-7.390555,-6.796466,7.044421,3.390367,5.127610,3.272102,5.987475,-3.886553,-6.738336,6.257320,-3.590968,8.064302,-8.606012,1.483976,1.611649,5.927835,4.416043,3.945978,-0.749349,-2.223583,3.819990,5.006770,4.881332,-9.302848,6.444498,-5.874779,-1.443787,6.979537,-5.110585,-6.619709,2.225805,1.926478,9.225820,-9.239796,-5.055885,9.810415,-2.979969,-0.236981,-9.368481,8.816810,-0.780206,5.392333,-1.507696,1.403486,-0.957201,-3.708134,4.636098,-2.673811,-4.111996,9.322487,-8.451352,0.601482,5.406422,-4.301481,-9.485419,4.903342,5.025053,7.204455,7.045019,8.410583,-6.252920,-6.520396,3.101439,-6.004865,9.527182,-0.473666,-7.458484,-1.517733,-0.316659,1.740899,0.973216,9.867606,-0.289456,-1.192319,-3.460572,0.422413,3.848732,-1.825378,-8.817209,7.622879,-1.011618,6.438661,3.025186,8.754619,4.154626,-1.449954,6.716676,4.645114,5.701278,-1.735773,8.713440,-3.961182,5.463222,-6.451385,-2.832746,7.858748,1.431818,1.322859,-1.819217,-1.440828,-9.185379,-1.944586,9.370757,6.959866,0.897251,-2.687847,4.619273,-9.581307,5.571067,-7.763747,-6.729178,3.748360,7.467853,-7.260328,6.589784,5.134230,9.837572,1.420203,8.140740,1.792451,-0.090658,-8.501067,8.232081,-5.361369,3.149905,-2.096408,-5.017803,1.748568,-8.472147,-5.369046,9.249379,3.168833,3.973026,2.899149,4.993861,-5.347364,-1.509933,1.109825,3.350232,-5.841399,5.370074,-0.748487,-9.347775,8.797573,0.464848,-1.641265,9.567640,8.981955,1.119074,4.828394,-6.556233,-9.350017,-0.161063,-3.551075,-7.308097,-7.616168,0.453182,2.825936,8.345084,-7.249529,-3.966315,8.767305,2.533863,4.684445,5.063073,6.133724,-8.991834,-7.429634,-4.812772,-7.263488,9.565570,-7.877496,1.721579,8.176496,-3.890494,2.120023,-3.595487,-9.730955,0.026882,-3.088286,-7.787626,-4.215914,-9.920620,-8.301495,0.455578,2.591880,4.940096,1.720129,4.849785,9.751369,4.640485,4.675795,8.344867,7.199991,9.229740,1.524241,9.579149,-3.590462,-2.990472,-9.408427,5.296266,2.995105,1.063274,5.539039,9.165093,-4.324346,4.052149,-3.837300,4.619904,7.383730,-1.274343,2.938696,6.006598,3.117640,-0.202869,8.414759,9.508397,-2.706787,-4.877344,1.563773,7.098311,-2.633506,2.984414,1.748152,-0.181962,5.406318,-7.583277,-2.490792,-2.869416,5.673862,-0.170320,-5.708292,6.700051,-3.179438,-2.202970,2.021684,-6.804892,-3.088188,9.626336,-0.991049,9.872487,-0.524750,-3.106572,1.380707,-4.726198,7.280850,2.673860,-1.031105,9.375851,-5.819030,-1.689679,7.452783,0.678135,6.338821,9.645862,-0.945417,4.017048,-4.840164,-7.897344,6.888122,8.196667,9.722514,-8.157303,4.370120,-9.049868,-6.730989,-3.099078,6.838338,6.292263,-1.377958,2.758983,4.112372,9.085401,-0.324255,5.373224,-1.143155,0.060737,-5.270981,1.746024,4.861334,1.219969,-8.053159,6.926097,-6.108844,-7.065482,5.545329,8.492454,4.302503,8.292042,-0.063695,2.100679,6.094108,-8.158150,-2.162301,0.711552,-9.695872,6.189469,-1.397470,-6.380858,-1.933230,2.249621,-4.993173,-1.144858,5.613522,-9.111794,3.574599,-1.652865,-2.202758,-6.656642,-8.750426,-7.037569,-7.360350,-5.301693,-0.071077,4.880847,9.611782,-5.756721,-4.375861,4.797183,-6.809416,4.043748,0.204191,-3.212343,5.635835,8.020257,5.832558,-0.442973,0.618714,-2.800313,1.543474,-1.152383,4.702856,9.422888,-3.706194,0.395534,-8.776442,-9.771244,5.752531,7.926884,4.716565,-2.019286,-3.197095,-7.922286,9.168414,5.900002,2.249198,-0.215281,-5.679045,-6.457182,-3.174225,-5.772822,-3.732019,8.685815,2.209516,-8.856167,3.368440,4.937003,5.777967,0.158161,9.947301,-7.932506,8.423069,7.620753,-7.027582,-3.726217,3.230066,2.658636,9.683129,6.309215,9.298441,0.312325,9.605767,-1.728845,-0.488110,8.959446,-1.089771,-9.514360,-4.998086,1.930486,3.071996,-5.048517,-5.518910,2.111976,-5.830159,7.248470,-2.974668,-4.034158,8.295846,3.574748,-8.696330,8.199112,-6.024667,-3.596631,8.175317,7.879508,1.526766,-5.753214,0.159717,4.803279,-6.891354,3.627797,8.054780,-5.147714,-8.425604,6.251256,9.381706,5.272391,-8.131152,-2.448290,4.194202,4.097487,8.881691,2.796829,8.120392,-2.939305,7.546498,-0.855260,2.674556,6.605792,-5.663554,8.985869,-9.042358,3.898340,-4.472246,-2.632589,1.120768,2.949616,6.869628,2.722142,5.055523,5.945285,6.126979,-4.556472,-3.825850,-1.520668,-0.423088,-3.260294,-0.005409,6.859103,-9.257681,5.034898,3.430442,-1.177289,8.805848,7.495761,-1.792602,7.401161,8.448514,-4.830272,7.185094,-0.894638,-2.774567,-5.250288,8.734052,-4.024699,-8.349119,3.628253,-4.438703,-0.848974,-9.647404,-6.557295,-3.276197,-7.396607,9.497738,-4.565535,-1.009590,-3.322626,8.122163,2.272156,4.955083,-1.977428,2.156316,6.501917,-7.742129,7.585844,-7.354857,3.510461,9.903892,-1.163970,-0.461330,-5.948663,8.848895,-5.921836,6.533220,8.091356,9.581293,-8.595687,-8.597746,-1.659497,-6.372741,0.191249,8.495766,7.080476,-9.915973,-2.002925,-5.106736,9.402513,6.065076,7.393164,-2.365669,6.459848,-3.518779,-8.438707,-1.963220,3.675978,7.261684,2.145080,0.754388,3.228736,-7.454360,8.109071,-9.579997,-1.489810,-3.099573,3.519740,3.965563,-6.930521,-2.545722,-8.869232,2.917549,4.401417,-4.896601,5.517212,-3.175066,3.447467,-7.902042,3.745301,-2.646116,8.280421,6.417177,1.692649,4.837179,5.717518,-2.507359,-9.184201,0.049466,-4.982056,-5.754727,-7.811213,5.193957,9.371380,-4.599830,-7.721513,1.693468,9.269660,-5.362086,3.471492,-2.783795,-3.162607,-9.258270,-2.024724,-1.620784,4.211304,-2.141550,9.690926,6.523063,-0.585594,-4.175182,-7.246911,-0.540743,-8.309030,-9.110998,-7.609520,-6.390769,-4.070220,-8.607998,7.385622,5.142806,2.008531,-1.612207,8.422758,-0.601708,7.924686,0.408747,-9.803224,0.983018,-8.054486,-5.640548,-5.625874,6.662055,1.121519,1.178643,5.720281,0.563446,-3.771460,6.041740,2.375477,7.855159,-2.403227,4.128135,-6.506586,-1.929144,-7.747188,-9.921106,4.866399,7.827821,8.402108,2.764948,-4.686325,3.268066,-7.939991,-9.706739,-7.366785,-8.563844,-6.678944,1.703326,-1.417310,-1.209794,-8.289262,0.741060,-1.335551,-7.658399,1.280965,-7.557907,-1.966848,7.538866,1.419379,8.661058,1.425327,-3.336814,7.278362,8.279105,6.726377,-6.085254,-6.587168,-1.031702,0.263151,-5.061837,-7.612827,-2.422348,-4.785332,-1.450145,5.865577,-9.346483,8.684168,5.249426,-4.221449,1.321940,-4.744702,-6.063548,9.777819,7.180815,1.428631,-6.191590,5.590786,1.923892,-0.170751,2.223406,1.691506,-6.900849,-1.972113,1.639722,-9.434990,4.166904,-8.087264,9.495001,-0.780420,-0.526919,-0.634842,8.490659,2.033940,-9.237816,-4.530658,-4.621302,9.864692,8.362247,-5.564452,-4.216164,6.055132,4.023174,2.687691,6.415813,0.282547,-8.591458,-1.580577,8.190430,-6.048558,5.541463,5.277753,-8.573141,5.680971,2.353282,-2.777909,-7.802500,8.283494,2.968086,0.058682,-8.313991,1.785561,-9.143891,-0.165520,2.186722,1.009754,-9.533945,-1.578119,5.033221,-4.027790,5.083558,5.349973,-7.638433,6.984287,9.637204,-8.972894,-2.598459,-9.420369,-5.907155,-5.496645,3.660368,-5.162209,4.809956,-9.151008,-5.326304,2.834985,7.699381,-2.653951,7.144335,-8.223391,-5.869790,-5.158878,-7.460129,7.484186,6.844823,-1.763713,-3.668095,-7.992456,-5.681395,-6.448062,1.127214,-5.109244,-2.246148,-5.854207,8.654675,1.188409,-4.844469,-4.770735,-7.211616,1.455942,9.214719,5.564349,-6.272908,2.116094,-6.339355,-2.089156,7.238341,5.843541,4.288913,4.975553,-8.567261,-9.542974,-7.023557,0.721429,-5.949719,5.406676,-1.143331,3.108010,-7.219830,4.868258,2.652427,1.501735,3.879476,-0.336998,-0.786869,0.958853,-5.235821,9.856225,-2.585536,-4.105227,1.109908,-3.958572,-3.491750,4.572996,4.404337,1.064514,-4.084858,3.696496,0.935057,-4.474968,-7.242870,-9.886124,6.466558,1.881564,-6.156709,-3.362225,3.852810,-5.621930,7.077689,5.073186,-5.422449,7.347515,2.749577,-7.658547,-6.639932,-2.054042,-9.753542,-6.177030,4.344667,3.387853,2.473274,2.771692,2.790310,-7.064085,5.778975,1.653368,-8.219292,-2.206781,1.138610,1.412822,1.700558,-3.778944,-9.164533,9.544245,6.577410,-8.491481,8.186346,9.385271,8.428463,5.191657,1.552680,-1.817949,6.562020,2.035903,-9.540803,-0.614076,7.521188,4.746081,9.209043,1.923829,-3.043768,3.768627,0.627742,-1.472739,-0.505408,-4.542649,-8.069556,-2.091752,4.054885,-8.658798,-0.750109,-2.586075,-9.861869,3.129764,-5.801521,-1.407713,-7.274616,-6.924898,-6.050992,-5.267190,-8.234699,9.026143,-4.037847,-1.401940,9.002399,2.528825,-4.901984,8.858954,1.477111,-6.761378,7.412449,-9.352305,3.992374,-3.415458,3.987560,-6.860199,9.407873,-4.261828,4.810894,7.883936,-2.524676,-0.925280,-6.781241,5.092549,6.317184,-1.415655,-0.269426,-8.968468,9.315438,5.388308,-7.925500,7.794414,6.174746,6.847789,-4.401318,-7.019456,2.572564,4.387906,-1.578713,9.169638,8.620606,3.972567,4.390340,6.534706,-0.670455,2.710019,-4.736921,-7.649226,2.972804,6.889704,-1.983259,-5.885499,-1.508471,-2.366827,-6.508457,-2.158854,4.430527,0.216909,-5.026052,2.361435,3.926596,8.391927,6.713315,-1.204700,0.116226,7.159797,0.190249,9.320301,3.294233,-8.722904,4.146612,4.405931,-3.948865,8.834508,8.930888,3.523179,-7.014463,1.633440,-9.656889,-5.389815,5.133570,-5.422315,9.445856,-9.145134,2.627501,-3.934246,-0.412558,0.468335,-6.927720,1.547659,7.136207,-0.816120,4.001860,-9.991781,6.047966,0.506989,-9.090784,3.148700,6.064209,-8.594364,4.722136,4.266270,6.816301,-9.963542,-8.523178,7.580609,0.460718,7.716469,6.998363,-7.616473,-1.129856,5.356507,1.453585,-0.264341,0.091596,7.319422,0.671103,-3.831781,7.896621,-7.190936,-5.890666,-5.654654,1.396061,-1.378998,2.993551,-4.737856,-3.101953,-3.651147,-1.381423,-5.914236,8.358734,-1.717142,-9.721872,9.118467,-0.691025,9.604575,-5.684466,-9.129502,4.343436,-2.662804,9.711032,-4.166484,3.919299,-4.785173,5.199950,8.833776,-7.220969,4.154054,-2.512295,3.387809,-1.461277,1.283378,-7.551231,4.960195,-0.049171,-4.997728,-5.312125,4.178623,6.606050,0.459952,-9.134137,8.429708,5.993254,1.566596,-7.777306,-7.169160,-6.592186,9.843302,4.830669,-2.512573,-8.756634,7.177227,-4.565984,-1.353435,-1.905525,-0.039723,-5.920279,-7.543177,5.482642,4.213574,-7.232484,-5.416912,9.291898,5.986834,-4.333922,-3.853461,-9.808090,3.483515,-0.551741,-2.923827,-8.662625,7.946955,-8.597403,-3.878137,-3.781981,6.620408,3.771747,0.444009,4.224102,4.557683,-9.456319,1.642660,5.674680,3.946713,-7.624915,6.726784,5.867829,-0.184387,-7.721548,1.690229,-8.886245,4.040386,-1.845833,7.441203,4.989313,-3.262737,-1.702699,-4.377469,-6.583448,-8.579493,2.611645,7.266754,-3.796125,-2.381440,-7.866208,0.906406,9.673055,-5.383382,4.150302,2.617241,-4.288576,0.298639,2.296660,1.663118,4.499460,8.027069,1.489632,1.331518,-5.614522,-4.199481,9.653932,8.341268,-9.790879,1.990160,6.597583,-4.111986,-3.283245,3.596457,1.477244,0.596935,-3.289399,0.991928,-2.424589,3.563832,-1.544071,0.199721,-5.768581,-3.837256,9.710259,-8.317584,2.973787,-7.033896,-0.253380,5.960982,-9.354798,7.597410,0.807971,-5.834680,3.568778,-6.814426,9.308679,-5.322747,2.454557,-4.490062,-6.972782,3.406812,6.364421,1.459277,2.310972,9.464821,3.210566,-9.587775,3.211467,-8.293064,3.254789,1.196942,5.091271,-0.490508,-0.606127,6.125059,8.842933,-4.522702,-9.787299,3.900361,8.458632,-3.005767,3.588547,4.901440,9.696588,3.145453,2.529644,-9.273818,-5.436434,5.654539,1.302084,1.743346,5.509240,-6.111200,3.819374,-0.742074,-7.324767,-3.040520,6.140704,6.030146,1.101863,8.225463,8.525018,0.419896,-1.679763,-2.393352,0.827715,1.305802,-2.233400,7.750312,4.504307,-3.325754,-4.674381,8.339166,-1.735809,-5.931205,8.188411,-1.142999,1.798929,5.848823,-0.283994,-9.434873,6.864360,9.292276,8.655014,-6.635826,-7.106700,-8.747464,5.375000,-2.171396,-9.338641,7.622225,2.810811,-3.089545,-3.967771,-0.569267,-0.432319,-3.626336,-0.389572,2.309850,-4.883885,-3.886979,-4.147571,7.881904,-1.287606,5.327888,8.484075,2.110111,3.504374,6.575634,1.445335,-8.243044,-9.364827,8.011315,-3.439345,-6.470681,-0.060939,1.873069,-1.526260,-4.342390,9.409128,2.705796,3.198353,9.482041,5.491674,-3.841597,-5.796675,-9.450169,9.907994,-7.864747,-3.767323,6.920920,8.788105,6.936684,9.374150,0.643975,1.078903,3.002169,1.749447,0.127822,-1.459474,9.697411,8.446286,3.101330,9.561128,-9.017480,5.152513,3.179373,5.878560,-7.872523,-5.901152,6.374527,-5.371680,-1.600277,4.789171,-1.484594,3.619783,-4.572501,3.215880,-5.996711,0.941378,-8.828073,-6.241526,-5.368686,-7.895089,-5.854714,-0.293617,2.760153,6.780661,-2.383352,7.180236,-8.806316,-1.959379,6.720709,-5.636747,-7.882962,6.636151,-6.459525,-2.598286,0.112518,3.089437,-4.292544,0.231708,5.747639,3.384106,7.117295,-8.630015,-2.213742,-9.386652,5.447768,3.782977,5.658724,-0.731862,-5.690740,-3.256976,-7.844363,4.234228,2.258934,-0.606005,7.521295,-9.532236,-1.632291,-1.012549,1.760125,6.954307,-3.750478,-9.675957,8.090460,1.651281,-2.488569,7.451622,-6.155762,8.475984,4.719403,-5.188916,5.419954,5.062612,5.070889,-6.864357,-2.525854,8.846224,-5.831965,-4.435590,7.563848,7.776998,5.368327,-7.379995,-1.176268,0.797021,7.202315,-6.111835,-8.284336,-4.656298,-9.542842,-7.064138,-6.570611,8.405934,-7.356852,-4.128376,4.232690,0.714488,-1.932126,-9.227524,4.853242,-1.280727,5.464559,0.553560,-6.002812,-8.938206,4.014708,-9.197553,-5.540648,-7.641784,0.466807,-4.918957,6.350256,-9.259244,5.310926,-5.852966,-7.187536,3.048807,2.926680,-7.158356,5.460490,-8.054523,4.555486,-1.009109,-1.596681,-2.113509,-2.401501,3.881231,-9.945229,1.104668,-5.635370,-1.961664,1.004072,7.773928,5.144241,-5.775205,-7.129083,9.933798,0.216474,4.196396,-2.774597,-4.628014,6.806207,-4.266658,8.271644,0.759751,7.706876,-3.599803,-6.153527,-4.006603,6.393658,-8.956818,4.142510,-5.173621,1.649431,0.214704,9.347405,-4.771583,4.253320,8.035051,6.588356,-1.853742,-4.938798,2.077502,-1.355804,-6.320540,-0.950124,6.658978,-9.287647,8.128669,-4.811179,-9.427390,-0.153655,-5.120869,6.938691,-5.935435,-3.171572,-1.120323,1.511062,6.862157,9.791223,-9.150925,-0.982460,9.143622,0.601615,0.354119,1.908569,3.504525,-8.223567,0.172663,9.663269,-9.029453,5.189821,5.377162,-4.646149,-7.636290,-1.323218,-0.411549,0.506783,-3.865288,-0.412981,-0.826625,2.371389,2.459291,7.574353,1.853650,-3.940401,-2.792535,-0.922551,-5.747076,9.317417,-0.457564,7.416552,-5.723996,8.231664,1.308601,-1.521732,6.609930,-8.319909,-0.990569,-2.010502,-8.100481,3.149772,-5.594405,-7.890860,0.562350,8.658454,-3.799784,-0.921468,8.540245,1.399378,0.399550,-9.872067,3.145458,5.515214,-5.598061,6.728717,-9.477658,-5.510034,9.302556,3.552779,-9.812662,-8.337525,-9.367916,8.099365,-2.820381,-3.812527,9.856356,5.520963,3.801187,-4.018009,-0.937322,2.074189,-1.488064,5.043388,-8.306343,-6.264748,4.323952,8.019974,8.101390,-2.442976,5.845403,9.705458,0.176342,7.398215,4.006662,4.158113,-9.546433,-7.681000,-3.865276,-0.797714,9.911289,2.293452,7.769748,-5.713373,8.802808,2.383229,9.791108,7.387458,3.209844,-5.011411,-3.518519,-9.742144,-6.721801,-4.249129,-1.143188,2.718832,5.300180,-3.816172,-7.437399,-2.880540,0.675966,-2.682909,-9.464568,-3.592994,5.776205,1.938064,-4.044900,-0.063820,-3.958955,1.194677,0.929832,-1.673571,1.351640,8.559341,4.140037,3.561059,8.052271,-2.652433,-8.178722,0.072355,6.203501,7.316978,-3.477901,-7.558344,-0.988013,5.161745,-4.129618,9.752038,4.363209,6.401522,-1.201946,5.830689,4.239390,4.064142,-5.445852,8.608292,4.642054,7.007778,-3.096006,8.184363,0.443242,-2.764896,-0.908655,5.630597,-9.263409,9.098830,-1.151825,9.788940,-6.552549,3.073771,9.706460,-7.147622,3.928673,0.962712,7.071534,5.954858,3.024983,-2.807525,4.191553,2.047977,2.943781,-1.137959,-8.123779,7.558214,-9.527862,8.462081,9.135454,2.966127,-9.889691,-9.605206,6.307988,-9.960422,9.352822,-7.905026,3.424346,-2.916147,-0.287537,-7.197388,-1.779502,7.090496,-8.539588,0.942765,-9.963336,-3.719576,4.937286,-6.704232,-4.649097,7.865202,-9.656422,-2.108918,-8.187201,-4.235743,3.156718,4.550662,-5.960411,2.657269,2.131626,-6.377841,0.189646,-8.828180,0.978906,9.735926,-9.801298,2.124695,-5.109102,-4.553513,-0.005481,-1.929104,9.169480,-4.271549,-3.796489,-9.491451,-9.423495,-4.467688,8.276684,-5.486979,5.473311,8.300524,-7.948446,-1.530512,-7.852731,6.796270,5.838313,2.665270,3.366744,-8.589495,3.802680,-6.706116,9.865691,8.952765,6.431125,9.979850,2.018564,-0.590941,8.541674,-9.913928,8.081428,9.154025,8.726640,2.679576,-0.028368,1.725181,-7.490319,3.282035,-6.460826,2.004137,-1.731162,-7.159319,1.403965,2.744033,-6.206215,-0.613654,-6.873440,-0.151879,-0.800675,-8.943657,-8.136975,-4.627741,7.458932,-3.100684,-7.020381,-2.815264,7.466508,-5.354547,4.036112,6.809513,-2.751069,-2.986950,8.714466,-8.726815,-0.966661,-9.575567,-7.787668,-2.563493,-3.363643,7.395922,-0.143702,1.543071,3.671902,-6.703014,-7.606878,-4.678208,7.734495,7.138696,1.458601,5.399310,-3.383856,-3.297314,-5.084517,7.447867,-1.643267,-6.852234,-2.691081,-5.164250,6.491392,-3.503437,-1.719250,-6.826826,7.795155,5.882996,-9.129377,2.919091,-0.864848,3.714343,-6.260265,-2.242296,-3.747828,0.434971,-7.619746,-7.265658,-5.139118,4.416846,4.636321,-7.853388,5.708217,7.210324,-1.063736,7.437110,3.163596,-9.367098,5.769949,-4.107653,7.829964,-0.263618,3.122098,7.976783,5.863851,-3.361163,7.366080,-6.750047,-0.471889,-3.660666,-2.912397,-4.775767,-3.526560,8.942157,5.494917,9.832804,5.349625,-7.127375,-6.180312,-0.959052,0.992976,-5.644761,2.138510,6.552751,1.303978,2.395998,5.538189,0.461895,-7.615689,4.613181,-7.964612,-7.660949,-5.176325,-5.422527,-4.724445,4.900301,3.587178,-4.788600,-3.450119,5.054073,4.409996,8.446971,-5.930197,8.077425,0.967111,-3.715613,6.167681,9.385680,4.649462,2.966995,-9.219886,3.671826,-9.733470,-8.382041,-8.594452,-4.208695,-6.805721,-2.424000,-2.823461,5.501971,7.248245,2.063011,-3.345995,-0.744228,-0.094680,-0.439255,-1.416616,2.159745,3.172995,3.349131,3.830237,-5.695755,0.323850,-1.358064,-0.016412,5.407744,0.524743,-0.897505,5.846794,9.311599,-4.524048,-9.774229,-3.638241,-1.790049,-0.423411,9.372889,4.320332,6.352479,-0.631988,4.339232,-0.616380,-0.389665,2.678147,5.126192,-3.369470,1.448442,-5.628312,1.405808,3.934241,4.276226,-1.684709,3.230640,-2.678452,-3.123442,-3.647939,1.419467,4.283502,-8.415348,-7.207977,6.947877,-7.428491,-4.308944,7.345001,9.784529,3.216845,-3.327767,7.518610,9.833903,-8.323921,5.357802,5.960015,5.292344,-9.800452,-3.167698,-9.252290,1.810110,-1.672175,3.034668,-2.763919,-2.349278,9.388759,2.852256,-4.110139,-1.485995,-3.574699,7.257318,-6.488078,-8.275949,-6.286374,-4.688756,8.322565,9.084448,5.630767,7.826157,-4.577810,3.524897,-5.943418,-0.246279,6.043428,6.432522,-3.624585,-4.200812,-8.140604,-4.332204,7.567105,6.762122,-8.302877,-2.568850,4.214186,9.492904,4.052770,-6.265810,8.983251,-0.041888,9.938675,7.139892,-9.804661,4.095256,-2.896528,9.158990,-8.614456,-8.067745,0.084995,-3.683489,-9.034434,-8.103620,-6.998588,5.337229,-0.244358,-0.892178,-0.394325,1.285490,1.845373,6.859071,-2.001015,6.330156,9.089879,-3.246205,-4.667235,2.391775,-3.189177,-0.774368,-0.842602,3.266807,7.997215,1.936495,8.024954,-6.967153,7.634608,-4.882007,-0.036457,-9.930043,-6.347093,4.249208,5.762884,3.703923,-3.138714,-7.506905,-1.630652,9.544050,2.484193,4.938001,-3.128072,-8.886602,8.822434,3.107574,-5.456054,4.493080,-1.883448,-3.125863,2.993716,-1.993167,7.060573,9.456877,-3.358262,-4.634973,5.055526,-5.859328,1.594310,7.564216,2.819469,6.957674,-6.211821,-0.761621,6.544450,-1.056850,6.260934,-8.161036,0.615545,-6.729930,8.769970,8.209087,-4.574546,-4.968545,-8.211862,-0.301061,-8.631206,-3.083128,-8.127235,-6.320555,3.525007,-6.294341,6.457798,9.113468,-9.938046,-1.491387,-3.101246,-6.790249,3.904751,0.066409,-4.599201,3.190073,8.493501,2.175807,4.441692,7.387419,-8.597402,3.295399,-9.223146,-7.624090,-0.188314,-9.817191,4.147133,4.335672,4.690804,-3.034015,-8.025862,1.361751,9.673848,0.514261,-6.414843,8.802998,-1.519967,-6.452412,-0.833278,-4.293964,8.087607,8.883991,7.939975,7.815711,5.184258,8.941053,6.478734,5.693557,8.157255,5.082670,0.173024,9.579424,0.667751,7.665205,-5.847777,-8.530192,-8.641027,-6.565211,-1.834489,4.426642,-7.881173,1.989688,8.016144,-0.312653,9.538631,-2.588946,7.423029,4.099633,9.066464,-9.918442,-6.623213,8.597372,-7.694266,-4.181789,0.811805,0.827817,-4.274974,4.695315,6.662685,4.677879,-5.128643,-8.883298,1.757147,-2.009528,-0.968365,-4.120371,-9.338667,7.909209,-6.276337,4.171083,2.662739,2.962743,-4.388091,1.557892,-6.798278,-5.907847,-5.077195,-0.037602,-6.858481,-2.352646,2.439876,1.823019,-4.902108,3.286403,4.579805,-1.928020,2.579095,-8.625265,0.196653,6.977331,-5.955168,-2.709493,-5.447624,-6.872463,6.580801,1.702419,-7.858035,-9.635790,-5.990850,3.752633,7.320317,-7.313432,4.491823,-5.790985,9.333658,-0.038115,2.972997,-7.697615,-5.462054,1.350730,-0.639884,-6.128043,2.955887,1.035961,-6.580078,9.588576,9.278425,-0.964281,4.600021,0.562231], dtype = "float64")#candidate|4446|(4290,)|const|float64
call_4445 = relay.TupleGetItem(func_2132_call(relay.reshape(call_4439.astype('uint16'), [2100,]), relay.reshape(const_4446.astype('float64'), [13, 330]), ), 4)
call_4447 = relay.TupleGetItem(func_2136_call(relay.reshape(call_4439.astype('uint16'), [2100,]), relay.reshape(const_4446.astype('float64'), [13, 330]), ), 4)
output = relay.Tuple([uop_4435,call_4439,const_4440,var_4441,var_4442,call_4445,const_4446,])
output2 = relay.Tuple([uop_4437,call_4443,const_4440,var_4441,var_4442,call_4447,const_4446,])
func_4457 = relay.Function([var_4441,var_4442,], output)
mod['func_4457'] = func_4457
mod = relay.transform.InferType()(mod)
mutated_mod['func_4457'] = func_4457
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4457_call = mutated_mod.get_global_var('func_4457')
var_4459 = relay.var("var_4459", dtype = "uint16", shape = (150, 14))#candidate|4459|(150, 14)|var|uint16
var_4460 = relay.var("var_4460", dtype = "float32", shape = (88,))#candidate|4460|(88,)|var|float32
call_4458 = func_4457_call(var_4459,var_4460,)
output = call_4458
func_4461 = relay.Function([var_4459,var_4460,], output)
mutated_mod['func_4461'] = func_4461
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2394_call = mod.get_global_var('func_2394')
func_2395_call = mutated_mod.get_global_var('func_2395')
call_4476 = relay.TupleGetItem(func_2394_call(), 0)
call_4477 = relay.TupleGetItem(func_2395_call(), 0)
output = relay.Tuple([call_4476,])
output2 = relay.Tuple([call_4477,])
func_4487 = relay.Function([], output)
mod['func_4487'] = func_4487
mod = relay.transform.InferType()(mod)
output = func_4487()
func_4488 = relay.Function([], output)
mutated_mod['func_4488'] = func_4488
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3655_call = mod.get_global_var('func_3655')
func_3656_call = mutated_mod.get_global_var('func_3656')
call_4502 = func_3655_call()
call_4503 = func_3655_call()
func_975_call = mod.get_global_var('func_975')
func_977_call = mutated_mod.get_global_var('func_977')
var_4509 = relay.var("var_4509", dtype = "float64", shape = (49,))#candidate|4509|(49,)|var|float64
call_4508 = relay.TupleGetItem(func_975_call(relay.reshape(var_4509.astype('float64'), [7, 1, 7])), 1)
call_4510 = relay.TupleGetItem(func_977_call(relay.reshape(var_4509.astype('float64'), [7, 1, 7])), 1)
output = relay.Tuple([call_4502,call_4508,var_4509,])
output2 = relay.Tuple([call_4503,call_4510,var_4509,])
func_4511 = relay.Function([var_4509,], output)
mod['func_4511'] = func_4511
mod = relay.transform.InferType()(mod)
var_4512 = relay.var("var_4512", dtype = "float64", shape = (49,))#candidate|4512|(49,)|var|float64
output = func_4511(var_4512)
func_4513 = relay.Function([var_4512], output)
mutated_mod['func_4513'] = func_4513
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3655_call = mod.get_global_var('func_3655')
func_3656_call = mutated_mod.get_global_var('func_3656')
call_4515 = func_3655_call()
call_4516 = func_3655_call()
output = relay.Tuple([call_4515,])
output2 = relay.Tuple([call_4516,])
func_4534 = relay.Function([], output)
mod['func_4534'] = func_4534
mod = relay.transform.InferType()(mod)
output = func_4534()
func_4535 = relay.Function([], output)
mutated_mod['func_4535'] = func_4535
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4487_call = mod.get_global_var('func_4487')
func_4488_call = mutated_mod.get_global_var('func_4488')
call_4538 = relay.TupleGetItem(func_4487_call(), 0)
call_4539 = relay.TupleGetItem(func_4488_call(), 0)
func_2434_call = mod.get_global_var('func_2434')
func_2437_call = mutated_mod.get_global_var('func_2437')
const_4548 = relay.const([[9.844629,-4.901212,-8.232997,-7.427332,-6.714250,-5.033574,-5.257732,-1.733538,-5.295821,-6.388521,2.318613,9.494366,-9.183019,9.868881,-6.168959,-1.191048,1.686292,7.005083,-8.038424,3.969930,-7.836603,-7.653501,4.268036,-8.250592,9.329720,4.330346,-4.797384,-1.930986,5.300883,8.147157,7.650399,0.196583,-6.027903,-0.124869,-8.900419,-2.679511,-1.280873,3.859522,7.798631,6.115475,5.502580,2.446613,0.748799,-4.498332,-9.077904,-9.955477,-5.633480,-1.460036,-2.794743,0.800570,-4.724014,-8.652030,-2.611087,-4.710032,4.507318,8.895147,-4.405422,-1.776818,-2.197807,-7.978428,1.307629,-8.815289,7.289925,-7.437240,9.091378,-2.540477,7.312170,-3.675094,0.691960,6.144281,-9.488413,8.287067,-4.029753,-5.113712,-7.918931,1.932814,-6.499358,9.479896,-9.091478,0.075485,-0.856237,-8.758398,-9.622742,0.315032,3.991402,0.249535,9.261872,8.231899,-6.768016,-6.264211,-1.947689,-5.703914,9.999115,-9.965976,-1.416457,-3.124668,-4.481002,-3.039080,7.060389,-9.951813,7.952020,0.237606,-6.304790,-7.869636,-8.740363,6.231968,-0.192339,6.930423,-6.375159,5.326376,-2.183232,0.384230,-1.102310,4.297392,6.012023,3.004722,5.568541,-4.747461,9.246860,4.470991,3.924992,-1.321692,-5.612860,-4.338256,-0.832083,9.059045,9.155239,2.858858,3.279114,4.453816,-7.930059,8.827085,3.855908,5.858156,-5.122618,7.507123,2.549537,3.023871,5.838983,-1.180639,1.198684,-7.231152,-8.306601,5.603741,2.196486,3.699296,2.945845,1.148457,-5.360675,3.665682,2.175817,-3.176886,-2.890709,4.751447,6.591441,9.088023,6.885390,0.026826,8.857989,1.475528,-1.328242,-6.810336,1.652279,-8.600684,-7.460207,-8.368586,-8.361039,6.803009,-9.987117,3.524787,-4.088095,6.201148,-7.503706,-6.546175,8.734293,-9.200899,-4.803422,2.102762,8.016146,4.899089,2.979971,4.484953,-5.247083,-2.535029,6.513211,4.660518,3.307573,-7.389223,7.171428,9.076722,-3.765583,-7.945145,3.872431,9.976870,-6.564900,-1.522637,-3.074565,4.276088,-3.758389,-4.942689,4.476932,-1.828968,-9.043020,1.567669,0.191017,-1.396173,-9.694270,-2.387553,-3.259286,-6.834571,-7.064377,-4.497788,4.929615,9.685632,7.922396,3.389816,5.093505,6.753209,-3.046941,-3.773699,-6.133223,-0.276698,7.486934,-8.559503,-8.032436,-7.594581,8.247738,0.515102,6.193590,7.942828,-7.552060,6.304542,-4.079537,2.443999,8.711521,-9.048808,-9.739879,5.510555,1.342446,2.502537,-8.428524,-8.226235,-1.288311,-3.513980,-1.780904,9.891459,2.409331,3.339867,2.101078,-3.149489,-5.856511,-6.243860,4.231246,-9.744091,2.133779,-7.891903,-4.778011,-4.336883,6.325041,-3.738978,-1.314359,-3.574092,-0.959066,2.554201,3.773960,5.176372,-8.982070,-4.799693,2.580582,-2.989079,2.220589,-7.934922,5.315044,-0.550246,-6.559674,-5.191174,-7.333718,-4.793699,-3.726063,5.269001,3.319667,0.906301,-7.213504,-5.422396,7.675545,2.122465,8.678236,-5.188909,-5.027863,6.817911,8.376012,2.115538,3.596649,-8.797910,7.295781,8.635165,-6.331705,-0.471737,-1.779119,-9.117286,0.684730,-5.204637,-6.791894,8.426898,-2.027460,0.940083,-6.073181,8.961441,-5.068399,-8.899047,2.595729,-3.922219,-4.130259,8.866293,6.319391,-7.132790,1.018275,-8.542066,4.956502,-6.136484,-4.238748,7.366522,-1.747927,-8.132095,7.099569,-3.080887,-3.579994,-6.666107,9.027035,-0.341702]], dtype = "float64")#candidate|4548|(1, 330)|const|float64
call_4547 = relay.TupleGetItem(func_2434_call(relay.reshape(const_4548.astype('float64'), [330,])), 2)
call_4549 = relay.TupleGetItem(func_2437_call(relay.reshape(const_4548.astype('float64'), [330,])), 2)
output = relay.Tuple([call_4538,call_4547,const_4548,])
output2 = relay.Tuple([call_4539,call_4549,const_4548,])
func_4554 = relay.Function([], output)
mod['func_4554'] = func_4554
mod = relay.transform.InferType()(mod)
output = func_4554()
func_4555 = relay.Function([], output)
mutated_mod['func_4555'] = func_4555
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2964_call = mod.get_global_var('func_2964')
func_2966_call = mutated_mod.get_global_var('func_2966')
call_4602 = func_2964_call()
call_4603 = func_2964_call()
output = relay.Tuple([call_4602,])
output2 = relay.Tuple([call_4603,])
func_4610 = relay.Function([], output)
mod['func_4610'] = func_4610
mod = relay.transform.InferType()(mod)
output = func_4610()
func_4611 = relay.Function([], output)
mutated_mod['func_4611'] = func_4611
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4625 = relay.var("var_4625", dtype = "float32", shape = (10, 13, 12))#candidate|4625|(10, 13, 12)|var|float32
var_4626 = relay.var("var_4626", dtype = "float32", shape = (10, 13, 12))#candidate|4626|(10, 13, 12)|var|float32
bop_4627 = relay.not_equal(var_4625.astype('bool'), relay.reshape(var_4626.astype('bool'), relay.shape_of(var_4625))) # shape=(10, 13, 12)
output = relay.Tuple([bop_4627,])
output2 = relay.Tuple([bop_4627,])
func_4644 = relay.Function([var_4625,var_4626,], output)
mod['func_4644'] = func_4644
mod = relay.transform.InferType()(mod)
mutated_mod['func_4644'] = func_4644
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4644_call = mutated_mod.get_global_var('func_4644')
var_4646 = relay.var("var_4646", dtype = "float32", shape = (10, 13, 12))#candidate|4646|(10, 13, 12)|var|float32
var_4647 = relay.var("var_4647", dtype = "float32", shape = (10, 13, 12))#candidate|4647|(10, 13, 12)|var|float32
call_4645 = func_4644_call(var_4646,var_4647,)
output = call_4645
func_4648 = relay.Function([var_4646,var_4647,], output)
mutated_mod['func_4648'] = func_4648
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4368_call = mod.get_global_var('func_4368')
func_4370_call = mutated_mod.get_global_var('func_4370')
call_4698 = relay.TupleGetItem(func_4368_call(), 0)
call_4699 = relay.TupleGetItem(func_4370_call(), 0)
var_4700 = relay.var("var_4700", dtype = "float32", shape = (8, 13, 15))#candidate|4700|(8, 13, 15)|var|float32
bop_4701 = relay.less(call_4698.astype('bool'), var_4700.astype('bool')) # shape=(8, 13, 15)
bop_4704 = relay.less(call_4699.astype('bool'), var_4700.astype('bool')) # shape=(8, 13, 15)
uop_4718 = relay.sinh(call_4698.astype('float32')) # shape=(8, 1, 15)
uop_4720 = relay.sinh(call_4699.astype('float32')) # shape=(8, 1, 15)
func_4511_call = mod.get_global_var('func_4511')
func_4513_call = mutated_mod.get_global_var('func_4513')
var_4723 = relay.var("var_4723", dtype = "float64", shape = (49, 1))#candidate|4723|(49, 1)|var|float64
call_4722 = relay.TupleGetItem(func_4511_call(relay.reshape(var_4723.astype('float64'), [49,])), 2)
call_4724 = relay.TupleGetItem(func_4513_call(relay.reshape(var_4723.astype('float64'), [49,])), 2)
func_4083_call = mod.get_global_var('func_4083')
func_4085_call = mutated_mod.get_global_var('func_4085')
const_4727 = relay.const([True,False,False,False,True,False,True,True,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True,True,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,False,True,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,False,True,False,False,True,True,True,True,False,False,False,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,False,True,True,False,False,False,False,True,True,False,False,False,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,False,True,False,False,False,True,True,False,True,True,False,False,False,True,True,True,True,True,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,False,False,False,False,True,False,False,True,True,False,False,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,False,False,True,False,False,False,False,True,False,True,False,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,True,False,True,True,False,True,False,True,False,False,False,False,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,True,True,True,True,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,False,False,False,False,False,False,False,True,False,False,True,True,True,True,True,True,True,False,False,False,False,True,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,False,False,True,True,True,False,False,False,True,True,True,True,True,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,False,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,True,True,True,True,False,True,False,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,True,False,True,False,True,True,False,True,True,False,False,True,True,False,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,True,True,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,False,False,False,False,True,True,False,True,False,True,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,False,True,True,True,False,False,True,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,False,True], dtype = "bool")#candidate|4727|(1365,)|const|bool
call_4726 = relay.TupleGetItem(func_4083_call(relay.reshape(const_4727.astype('bool'), [91, 15])), 0)
call_4728 = relay.TupleGetItem(func_4085_call(relay.reshape(const_4727.astype('bool'), [91, 15])), 0)
output = relay.Tuple([bop_4701,uop_4718,call_4722,var_4723,call_4726,const_4727,])
output2 = relay.Tuple([bop_4704,uop_4720,call_4724,var_4723,call_4728,const_4727,])
func_4735 = relay.Function([var_4700,var_4723,], output)
mod['func_4735'] = func_4735
mod = relay.transform.InferType()(mod)
var_4736 = relay.var("var_4736", dtype = "float32", shape = (8, 13, 15))#candidate|4736|(8, 13, 15)|var|float32
var_4737 = relay.var("var_4737", dtype = "float64", shape = (49, 1))#candidate|4737|(49, 1)|var|float64
output = func_4735(var_4736,var_4737,)
func_4738 = relay.Function([var_4736,var_4737,], output)
mutated_mod['func_4738'] = func_4738
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2231_call = mod.get_global_var('func_2231')
func_2233_call = mutated_mod.get_global_var('func_2233')
call_4783 = func_2231_call()
call_4784 = func_2231_call()
uop_4792 = relay.rsqrt(call_4783.astype('float64')) # shape=(15, 13, 12)
uop_4794 = relay.rsqrt(call_4784.astype('float64')) # shape=(15, 13, 12)
uop_4795 = relay.atanh(uop_4792.astype('float32')) # shape=(15, 13, 12)
uop_4797 = relay.atanh(uop_4794.astype('float32')) # shape=(15, 13, 12)
func_4327_call = mod.get_global_var('func_4327')
func_4329_call = mutated_mod.get_global_var('func_4329')
call_4799 = relay.TupleGetItem(func_4327_call(), 0)
call_4800 = relay.TupleGetItem(func_4329_call(), 0)
uop_4803 = relay.sinh(uop_4795.astype('float32')) # shape=(15, 13, 12)
uop_4805 = relay.sinh(uop_4797.astype('float32')) # shape=(15, 13, 12)
func_4511_call = mod.get_global_var('func_4511')
func_4513_call = mutated_mod.get_global_var('func_4513')
var_4812 = relay.var("var_4812", dtype = "float64", shape = (49,))#candidate|4812|(49,)|var|float64
call_4811 = relay.TupleGetItem(func_4511_call(relay.reshape(var_4812.astype('float64'), [49,])), 0)
call_4813 = relay.TupleGetItem(func_4513_call(relay.reshape(var_4812.astype('float64'), [49,])), 0)
bop_4821 = relay.floor_mod(uop_4803.astype('float64'), relay.reshape(call_4783.astype('float64'), relay.shape_of(uop_4803))) # shape=(15, 13, 12)
bop_4824 = relay.floor_mod(uop_4805.astype('float64'), relay.reshape(call_4784.astype('float64'), relay.shape_of(uop_4805))) # shape=(15, 13, 12)
func_4327_call = mod.get_global_var('func_4327')
func_4329_call = mutated_mod.get_global_var('func_4329')
call_4850 = relay.TupleGetItem(func_4327_call(), 0)
call_4851 = relay.TupleGetItem(func_4329_call(), 0)
output = relay.Tuple([call_4799,call_4811,var_4812,bop_4821,call_4850,])
output2 = relay.Tuple([call_4800,call_4813,var_4812,bop_4824,call_4851,])
func_4854 = relay.Function([var_4812,], output)
mod['func_4854'] = func_4854
mod = relay.transform.InferType()(mod)
mutated_mod['func_4854'] = func_4854
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4855 = relay.var("var_4855", dtype = "float64", shape = (49,))#candidate|4855|(49,)|var|float64
func_4854_call = mutated_mod.get_global_var('func_4854')
call_4856 = func_4854_call(var_4855)
output = call_4856
func_4857 = relay.Function([var_4855], output)
mutated_mod['func_4857'] = func_4857
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4954 = relay.var("var_4954", dtype = "uint16", shape = (4, 14, 3))#candidate|4954|(4, 14, 3)|var|uint16
var_4955 = relay.var("var_4955", dtype = "uint16", shape = (4, 14, 3))#candidate|4955|(4, 14, 3)|var|uint16
bop_4956 = relay.bitwise_xor(var_4954.astype('uint16'), relay.reshape(var_4955.astype('uint16'), relay.shape_of(var_4954))) # shape=(4, 14, 3)
bop_4965 = relay.equal(var_4954.astype('bool'), relay.reshape(bop_4956.astype('bool'), relay.shape_of(var_4954))) # shape=(4, 14, 3)
output = relay.Tuple([bop_4965,])
output2 = relay.Tuple([bop_4965,])
func_4975 = relay.Function([var_4954,var_4955,], output)
mod['func_4975'] = func_4975
mod = relay.transform.InferType()(mod)
var_4976 = relay.var("var_4976", dtype = "uint16", shape = (4, 14, 3))#candidate|4976|(4, 14, 3)|var|uint16
var_4977 = relay.var("var_4977", dtype = "uint16", shape = (4, 14, 3))#candidate|4977|(4, 14, 3)|var|uint16
output = func_4975(var_4976,var_4977,)
func_4978 = relay.Function([var_4976,var_4977,], output)
mutated_mod['func_4978'] = func_4978
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2231_call = mod.get_global_var('func_2231')
func_2233_call = mutated_mod.get_global_var('func_2233')
call_4985 = func_2231_call()
call_4986 = func_2231_call()
func_2047_call = mod.get_global_var('func_2047')
func_2050_call = mutated_mod.get_global_var('func_2050')
var_4997 = relay.var("var_4997", dtype = "uint16", shape = (2100,))#candidate|4997|(2100,)|var|uint16
const_4998 = relay.const([-3.297660,9.608650,7.707259,-5.198512,-1.519539,-9.196667,9.431338,3.296085,6.121850,0.912274,-2.416200,2.526055,-3.472956,0.336409,4.194686,1.337041,5.346068,4.239495,-9.892704,-0.968938,-8.883537,-2.004694,2.799876,2.804418,-7.133949,6.620675,0.672376,3.403816,9.991682,1.648583,-0.805765,-5.697063,1.183906,-3.543580,0.462472,-5.313001,-7.376550,0.481824,0.227110,-4.131816,5.066884,-3.990925,-8.971520,2.833125,5.685626,-8.817576,9.840829,8.495273,9.779201,-8.601075,-8.749045,-3.505374,2.149694,-8.089484,7.168425,-1.714285,-0.464928,3.810509,9.285006,-5.084277,8.066601,-0.212778,4.290113,3.014819,4.205024,6.065173,3.064477,-7.124660,4.166532,8.095400,-9.787041,-5.953189,-3.719796,0.540180,-5.280785,-8.469989,9.944232,-8.655226,-8.362340,1.964606,6.117185,4.597319,-3.357570,9.439713,-0.049696,-1.219292,7.637380,-1.944477,-4.501406,5.200069,6.877327,-7.457279,-7.137807,-4.846333,0.680423,-0.938086,-8.002153,8.703529,-8.252772,6.047960,3.143039,7.963835,-7.887917,-4.674094,8.921949,7.672317,-5.146646,9.910202,-6.066286,9.294467,0.003244,-0.682868,-9.943377,8.759250,-9.706022,6.247040,-9.654809,-1.293783,-3.946480,-0.707798,-5.267991,7.362789,4.828323,0.182387,-6.150772,9.467450,2.713249,6.499307,9.564219,-8.815947,4.612373,9.409800,-3.862327,-5.069192,3.945041,-7.175475,-3.292218,-5.725274,2.778835,6.248971,-7.065807,1.988027,-7.329277,2.436896,6.407386,-4.146544,-8.712007,1.610652,2.787921,0.501651,-0.556140,7.076486,7.888274,-2.919389,3.263817,-3.522610,5.969048,0.452429,5.185006,6.159945,-7.657203,4.388378,-0.644983,2.064964,2.008785,-5.432092,0.372062,-5.613594,1.889053,1.505684,9.813288,-0.091314,0.017999,-7.993696,5.178681,-2.967664,3.350980,-9.181761,-9.814964,-3.641461,-7.722806,9.727766,-3.193466,0.562961,-4.887472,-7.323870,-5.397605,-5.318477,7.990584,-8.929354,3.585239,-1.656740,3.873579,-8.524907,8.793156,6.860340,9.997795,6.888672,-3.316157,8.032102,0.530472,-8.415415,-7.633271,9.945744,-9.280932,-7.790020,-7.849970,-6.052253,4.076692,0.735629,8.866339,5.009714,9.703640,-9.712149,4.927206,7.299279,-4.879507,-5.455402,-7.093396,-9.090792,-0.098343,-2.708326,0.348797,-1.713525,2.188158,0.093804,-7.774285,9.842989,9.607021,0.435154,1.774439,6.411539,9.655386,7.260965,-8.556364,-2.043364,-9.085163,2.371350,8.804225,7.198236,-4.944882,-0.796247,5.939442,-6.546240,0.387438,9.674753,-8.788848,-7.186306,-4.926082,-8.343936,8.332926,0.585560,0.339042,-0.140782,-2.309304,-6.793563,-5.712292,2.043711,-4.548630,7.939500,-0.069803,5.789588,7.037619,-3.250882,4.301375,-4.285831,8.754461,-9.567001,1.322042,8.762716,-8.455834,-1.791180,-8.395456,-8.477249,0.921503,0.762063,-7.604988,2.681789,-9.911871,-6.440814,-5.884702,3.956360,-4.896323,-2.303291,-5.591189,-5.461347,4.924754,9.366449,-7.813575,2.848011,6.543569,5.351557,2.278801,-5.858393,-6.941110,0.185752,1.570410,-2.227970,-3.022641,3.319993,0.402211,-7.563716,-6.511365,-2.550632,2.368600,8.821862,-6.625828,1.853786,5.240111,-1.016306,-6.227722,-0.712548,-5.018395,6.481753,7.373128,2.854319,-5.473577,-0.376043,4.985184,-5.629946,-4.068174,-5.657231,-2.275145,-5.635178,5.119200,-3.553121,-0.883506,6.851692,4.502278,9.953681,-9.449268,2.853682,-5.028736,4.652281,9.847977,7.876259,4.473977,-6.080065,4.072225,2.328867,2.165204,-9.308313,-9.703547,-5.298720,-1.501958,8.410084,-9.901984,-4.089459,-0.279644,9.980943,8.888823,3.877188,-8.795602,-8.891063,-7.081525,-7.097715,8.122097,8.550215,-9.248936,-2.664960,5.176880,9.460575,-0.474450,1.404004,-9.002165,-2.174115,7.259055,-5.839748,-1.824657,6.094270,9.916349,-9.240279,-8.994331,-7.229785,-8.692122,7.687266,-6.339456,1.798865,-1.039648,7.363362,4.200637,-9.053803,2.397758,-8.623736,-9.264133,-2.323223,1.459085,-0.881639,-4.391451,8.654560,3.410638,7.653786,9.678824,7.621533,9.997020,-7.502894,-6.679577,4.657726,-5.974033,3.271932,3.404296,-8.674802,0.357191,-6.427169,6.817782,-6.294732,-4.974179,7.755012,-0.888796,-5.119619,6.314930,9.070784,2.397907,-9.986901,-9.098759,-5.281783,1.085950,2.303214,-7.527157,0.835581,6.312617,-9.372931,2.059583,2.978517,-9.596980,0.771528,1.701584,-9.619268,4.046831,-3.926573,-7.177515,5.450024,2.731855,-3.782360,-1.332084,8.885385,6.316490,6.116325,1.855800,1.203351,-7.068134,-8.768926,5.877445,9.461537,3.977116,-5.654012,-4.413724,5.673060,-5.122166,7.261181,2.878915,-6.591568,3.871473,0.738156,1.482105,-4.748412,9.247752,2.468012,0.094410,4.142636,-9.778293,3.219530,5.428028,-5.238277,-8.404893,-0.333616,-3.487928,3.160569,6.369459,0.951116,3.620174,-1.164364,-2.519973,6.383012,-8.598025,-8.465297,-6.778225,-7.025483,-0.447483,-3.281686,-6.541654,5.244664,5.165920,-4.706270,0.084159,7.282222,-6.760999,-3.999177,3.423507,-0.738445,-6.455387,-2.322763,-0.280188,5.142247,2.243006,-0.614227,-7.976231,9.515192,-7.783312,-2.970515,8.211789,-7.975930,-7.965418,-3.795611,-6.439050,0.357260,9.300538,5.434241,-2.389305,-8.013978,-7.928105,-8.450306,-8.469991,3.010004,8.109401,9.767475,3.016007,-6.062380,-9.229219,-2.540845,-8.847852,4.648977,9.059780,2.483100,7.742268,-3.886782,-3.291586,6.762576,-8.291844,0.610935,-2.385291,-1.984966,-5.530261,2.528478,5.102895,7.613394,-2.707682,2.198306,-4.960502,7.042455,-4.369589,3.754294,-9.455853,-5.210869,8.913048,0.366638,-2.840890,-3.510002,-0.315616,0.563852,5.459280,6.644401,4.842751,7.097879,-5.335386,-6.083946,-5.433133,6.101195,-3.127799,5.213625,-0.770196,9.760847,-9.970198,2.822755,-9.685735,-7.884487,-5.515155,4.179064,-0.597366,2.545452,2.197426,-5.419231,4.680151,8.206012,5.346914,-3.624348,9.144450,-0.054313,4.706862,-8.715169,-1.925346,7.766122,2.738276,-1.081552,1.970385,-7.402126,3.442808,5.239585,-6.268077,-6.264057,5.585998,7.915258,3.733045,8.226597,-3.485351,-2.218153,-8.475933,8.565608,-7.905999,-6.382800,2.852927,-9.053428,3.320233,5.604052,-6.566051,7.010191,-2.047038,-4.826909,-5.744178,-3.475287,-2.769814,7.308666,-9.039806,-3.561270,-3.939250,7.668834,8.912309,7.830312,9.108864,-0.902598,-4.125365,6.924163,0.038166,-7.237475,1.927194,-3.899063,3.606674,5.160140,-3.154696,-6.073666,-9.773702,-6.623234,-0.146277,-7.782943,-4.302218,6.894786,-1.505503,-7.682763,9.824523,7.194628,8.714634,-5.445661,4.642005,3.918276,6.396359,-0.090848,1.467251,2.648770,-1.358341,7.687548,-7.053784,-0.535460,7.918659,-0.468378,4.978205,-4.646744,1.648036,-2.670341,-0.929206,-9.511570,8.505262,9.148576,2.141788,-2.056015,-1.821923,9.487242,8.763926,8.091839,-4.821991,2.470216,3.085301,-4.603537,-5.357584,8.251360,-5.494235,-9.399311,-9.784511,-5.221532,-3.977712,-4.820359,-6.280400,4.542845,7.995044,4.940518,4.215198,4.489760,-2.330675,5.533179,-6.260752,4.108426,2.616413,2.899754,8.550915,2.350949,-9.849105,-6.950872,5.521679,-4.010416,-4.833730,-4.258075,-7.390733,-6.156182,-4.284785,5.600651,-6.911638,7.477500,-9.907045,0.076273,0.441539,7.302360,-2.190886,-3.788175,-3.749714,-3.197337,-8.790115,-9.392151,4.228986,5.051896,-9.002547,-4.107115,4.319500,-5.455439,-0.506369,2.616135,9.191290,-5.021821,-3.012684,7.699363,6.695638,7.380397,9.193824,6.957183,-8.982069,-1.776560,0.385253,8.636964,-7.483454,8.665723,-3.991301,-7.070285,7.421306,4.460537,-3.665053,-1.862983,1.934881,7.716157,5.002651,2.563047,-2.503960,1.741990,-3.955458,-2.199457,-0.932564,-5.441057,7.846932,-1.903938,7.872512,-9.887141,6.204712,3.886315,2.626573,6.010461,1.053235,-6.455362,-9.055991,-1.545836,1.682087,9.403543,-7.931777,-7.000213,3.809432,-3.583418,-8.330829,-4.234079,-3.075805,-7.629490,-4.754217,-0.328135,-1.020459,2.124329,-5.009297,-7.399375,3.990469,-8.988179,4.932124,0.138160,6.223724,1.115199,-4.618247,7.495411,6.343353,-1.710398,3.867660,-0.236361,-0.424503,-8.050568,2.298190,-4.424368,0.495482,-8.710320,8.399683,2.041693,3.974861,-2.603093,-3.960275,-6.109612,-2.728178,6.323033,-6.388311,8.929163,-4.682857,1.113542,-4.160077,-7.744199,-6.790169,-4.041590,-5.337377,0.787369,-7.412934,1.236931,2.926039,2.690190,8.278944,-0.898437,-8.063868,-9.179698,4.817639,-5.694100,2.493966,6.155858,3.601591,2.672586,7.525767,2.587285,-2.828011,-1.756598,5.459371,2.815087,3.855282,-6.330750,-8.383747,-7.353086,-4.681330,5.204754,2.638007,-8.004730,6.015195,-4.435511,-7.493238,-3.648966,-3.857430,-0.598932,-3.499734,-0.631075,8.855728,3.844944,2.018510,-1.865466,-0.368906,9.444376,-9.906347,-4.240121,8.787157,8.160010,6.720697,0.190989,-9.559118,8.392555,4.537415,-3.540447,-0.756707,-4.214029,2.004714,3.296847,4.664621,2.726705,-3.080161,9.174770,-3.639589,8.027719,-8.942724,-7.182256,2.225971,-7.823017,0.558461,9.237438,-4.171526,-3.158909,-7.972261,-8.428213,-4.324219,-8.696837,4.056719,5.885594,-5.484509,7.675404,3.793314,1.832649,1.066164,2.263896,9.151252,-1.544951,8.860173,6.109225,2.790277,5.822192,-1.583826,-5.381493,5.246845,1.777533,6.045919,-2.839630,-4.258644,2.827350,3.634365,2.071170,5.759673,4.243390,-7.887113,7.804756,-0.320662,1.986889,-6.304139,-5.525617,9.517520,8.203262,1.586956,0.758858,9.906948,5.026145,-0.678438,0.840780,6.708494,-7.330453,-6.622591,5.274716,-5.582578,0.181370,-3.262597,-2.838693,5.924770,-7.429390,9.489104,7.556530,-9.294656,-4.389600,9.939981,0.074275,-7.341849,-4.481665,0.553457,3.172022,-6.103766,-3.211199,-8.479244,3.267021,-1.443657,-5.327066,5.045922,-4.563055,5.547799,-0.383716,4.360452,6.325353,4.214478,-4.062252,2.447417,-9.547737,-0.135254,-5.903409,4.590688,-5.485382,-6.574509,-3.564117,-1.390772,1.148290,3.268067,-3.034065,2.284860,-2.303656,3.142226,2.164664,-1.495176,2.712840,-5.819351,8.243362,4.427859,7.995880,8.846339,5.053906,0.824007,8.629948,2.823694,7.422834,8.058347,8.285989,-5.593176,6.183043,6.744793,1.268741,-1.393194,9.030514,-4.836762,0.129595,-7.372518,-2.447776,-9.563063,-5.763199,5.778074,-4.687062,0.006350,-7.391833,9.261666,-0.353694,-7.873696,-4.768861,0.791497,-7.115543,5.985998,4.371246,-7.373861,6.774181,5.908082,-2.410963,9.840515,5.907030,0.065437,-8.192278,0.228401,2.072101,-9.302806,-4.958767,9.963843,3.071681,3.816322,2.212993,-0.922596,-3.299928,-2.262371,4.126964,8.961742,6.090281,-4.979373,5.881619,-5.624604,3.161728,2.364300,-7.685430,-4.545229,6.226845,-4.167877,0.061390,7.497895,-9.780258,8.404190,9.760906,-9.662939,7.955586,-8.885773,-8.678272,2.043211,0.978083,-5.684635,5.232339,8.217120,-8.953386,7.184356,2.500520,0.644907,2.186168,8.539155,7.359153,1.683755,-9.452750,-9.326062,-4.886204,-0.156972,-5.008804,-3.907387,3.578182,-0.554303,3.145045,6.513317,-6.999472,7.269718,1.729333,-2.977182,-9.326866,4.342860,9.817804,-7.210395,1.179197,9.260202,3.408836,-4.567639,2.056830,-6.492319,-8.882079,5.062710,-8.290845,-2.349481,9.878335,-4.095591,-0.118387,-2.965945,5.248032,-9.823898,8.359773,-9.304541,7.649419,7.814378,6.384019,8.718329,-5.024689,-9.044807,3.269795,-3.276240,4.219096,4.205345,9.388886,0.922681,-1.075968,5.742520,1.460755,-6.296473,-3.962183,-1.425590,8.672340,-1.128618,-2.377920,-2.898184,2.435472,5.358644,9.832397,8.073974,-5.764946,-1.691363,-1.693737,3.428689,8.094619,-4.557134,0.865952,-1.703540,-2.300704,-7.715175,0.390628,9.915996,-5.132764,-3.947071,7.067371,-5.182297,-4.902698,-3.302007,-9.870909,1.411790,5.587248,-0.468466,-1.682361,8.312408,1.295640,9.507534,-0.502666,0.329275,0.694559,-1.104431,2.472451,7.181308,1.904197,-6.593691,9.469775,-9.352192,3.244422,4.594786,4.393114,6.321370,2.152284,2.004630,1.855530,-1.304083,-6.896039,8.267952,0.218737,-5.610262,-5.004752,-6.116773,-0.953983,-4.913472,9.173577,1.428858,-2.731305,5.782066,5.906999,8.777155,-5.677728,-0.025031,-9.086079,-7.849641,-2.367727,8.744439,-4.503295,-3.874905,-1.111750,-0.280047,-2.185910,-2.748500,-1.543034,-5.448929,-0.571071,-2.862695,7.296133,-9.476326,-8.706225,7.924609,0.462268,8.175515,5.461076,-3.363932,-7.389957,5.076277,-0.177834,0.012743,-5.427169,-8.519048,7.221643,2.719050,8.588205,9.559143,-0.912838,-7.553640,2.322373,0.350160,5.922982], dtype = "float32")#candidate|4998|(1232,)|const|float32
call_4996 = relay.TupleGetItem(func_2047_call(relay.reshape(var_4997.astype('uint16'), [2100,]), relay.reshape(const_4998.astype('float32'), [1232,]), ), 1)
call_4999 = relay.TupleGetItem(func_2050_call(relay.reshape(var_4997.astype('uint16'), [2100,]), relay.reshape(const_4998.astype('float32'), [1232,]), ), 1)
output = relay.Tuple([call_4985,call_4996,var_4997,const_4998,])
output2 = relay.Tuple([call_4986,call_4999,var_4997,const_4998,])
func_5007 = relay.Function([var_4997,], output)
mod['func_5007'] = func_5007
mod = relay.transform.InferType()(mod)
mutated_mod['func_5007'] = func_5007
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5008 = relay.var("var_5008", dtype = "uint16", shape = (2100,))#candidate|5008|(2100,)|var|uint16
func_5007_call = mutated_mod.get_global_var('func_5007')
call_5009 = func_5007_call(var_5008)
output = call_5009
func_5010 = relay.Function([var_5008], output)
mutated_mod['func_5010'] = func_5010
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2856_call = mod.get_global_var('func_2856')
func_2857_call = mutated_mod.get_global_var('func_2857')
call_5074 = relay.TupleGetItem(func_2856_call(), 2)
call_5075 = relay.TupleGetItem(func_2857_call(), 2)
const_5088 = relay.const([[6.997107,0.604138,9.247077,-9.190194,7.138154,7.920796,2.587030,-4.466524,-9.735883,4.162993,-0.395155,6.075113,-5.398569,7.375525,-1.139799],[-9.833567,-1.686552,-6.414882,1.622901,1.119945,-9.314176,0.970281,5.476666,2.364361,6.296453,-0.521367,-5.783783,0.570633,5.135632,7.291421],[9.411228,1.327088,8.415548,1.078535,-2.473536,3.558472,-8.003123,4.410609,-1.032576,7.120458,7.059460,6.201237,-2.333080,3.530241,-0.077837],[2.686634,-4.135540,4.542507,-9.070056,-9.089654,1.607219,-6.799833,9.843691,9.560075,-3.798335,6.149816,6.425051,6.179018,9.846784,2.941879],[9.452870,-3.179354,-9.422135,5.650094,-0.691862,4.773388,8.276628,3.181949,2.286599,-2.959906,-2.889031,-6.512741,0.395758,0.536362,-3.603829],[-2.216164,9.135570,3.593121,-0.634073,-3.707595,-3.808523,-9.141232,5.813233,-7.061307,8.529744,-4.597043,6.497945,5.089254,-5.002356,4.395589],[6.514216,-3.060813,-2.565232,-7.170744,-3.815480,-7.154385,9.152417,-9.869490,-6.921063,8.558992,-0.555999,5.719675,-6.015537,-0.897458,7.281982],[9.888060,2.980237,7.825181,5.490743,-3.645771,9.922196,7.043343,3.558931,3.325018,-2.554289,6.850484,0.170303,-9.654485,9.106803,-8.439734],[1.574995,-5.461002,-1.311467,-8.285755,1.154534,2.452065,4.893427,3.287021,4.523941,1.520874,-7.633774,-4.442138,6.065000,7.277836,8.935633],[-3.075533,-2.081025,1.180511,-0.118270,-0.177949,-7.505915,-3.607924,-9.083661,-3.748092,7.054945,-8.184380,3.795641,6.307370,4.731088,6.986380],[-0.390036,1.236157,-3.743357,2.122107,1.234219,4.038355,-8.678817,2.726932,2.036883,-4.223095,6.321509,-3.571256,9.873890,-3.356506,1.968692],[8.052497,9.460311,-8.934495,0.215307,-8.880561,5.589408,-3.489468,-1.165226,1.100753,3.608905,-6.428065,-0.668366,3.279464,-3.449742,-1.806576],[-6.199982,9.501631,4.310774,0.013186,-1.727123,2.746669,6.172051,1.904250,5.437233,-4.610563,-1.522222,-8.588295,5.325465,-6.004205,3.786977],[5.425539,-3.233412,4.098676,-4.756083,-5.743363,-2.697927,5.488233,2.387706,7.345316,1.013623,8.127796,-7.306341,-4.994521,-7.648859,1.550647],[5.988867,7.214256,-9.558598,0.639649,7.890932,9.805307,0.067738,-2.022579,5.672577,-5.060792,4.624728,-3.340555,3.639334,9.064702,5.939601],[8.676124,-7.651484,-5.703160,7.508003,7.941379,2.127712,-4.875965,4.549580,3.320426,6.643426,2.024661,8.231308,-1.530986,-2.878007,-6.249203],[9.748492,6.584091,-2.668990,-0.942591,0.979602,1.004972,-5.548568,-5.383250,-0.607614,-3.595692,3.624729,-3.475419,0.193916,9.330485,-4.697443],[6.879442,9.506490,0.191105,-9.024933,4.836691,-4.400011,-8.307027,-7.136117,-6.949806,-5.169461,-4.428561,3.499384,-9.603186,-6.514705,-5.196005],[-3.676304,-5.568948,-7.377746,1.145576,6.288225,2.689174,1.843147,-6.575482,-6.719395,-5.515559,0.939203,-2.154393,2.935341,3.092172,-6.828866],[3.750117,9.968790,-4.627626,7.458055,-0.923182,-4.648129,-4.437616,7.567291,5.077751,-9.460825,-2.220247,6.132979,-4.542642,0.919650,-4.911224],[8.113823,-5.183871,6.008186,0.790041,9.017272,4.335271,9.245268,3.581473,-2.380958,-1.658064,5.647015,-9.063164,3.994194,2.741481,-0.495939],[-5.573369,0.644139,-9.952519,3.169499,-6.420282,0.009043,-9.716501,2.437467,1.914019,-3.948104,-9.309870,-2.002755,-6.885733,9.227204,-2.341164],[4.339742,-9.691639,-9.635390,1.689210,-5.721094,-8.996873,6.493194,-4.245653,-9.854248,-0.715552,0.538026,-4.809445,3.662291,2.427966,5.766087],[-2.722437,-2.590375,9.711440,9.744135,-2.744101,-7.932649,9.757581,1.970372,6.021563,7.384951,-3.736725,-4.808943,-6.506145,-5.084004,0.418963],[-5.451519,-8.396534,-5.989479,4.792072,6.822524,0.636688,-7.920738,9.539070,-6.670182,4.885650,0.679811,-8.884886,0.568496,9.693196,-3.935428],[7.181519,7.692208,3.817084,2.337087,2.419996,-0.619168,0.679378,-0.935779,-3.292901,1.392784,-0.515601,1.096912,-8.142247,-1.888441,-7.769884],[-6.046341,6.014965,-8.129175,2.426145,6.198924,-5.946972,1.218889,-9.782341,-4.983384,-8.908435,-4.169328,-2.331547,6.522473,-3.725354,4.852640],[-6.479201,-4.261735,4.965651,-7.328434,1.292072,7.247718,2.495624,7.233984,-4.841060,-5.877830,0.066439,-9.062890,9.782295,-3.744055,4.059031],[-2.120338,-1.946425,7.709687,1.186963,-5.572211,4.821587,-2.711467,6.549728,-4.220573,-0.956488,-8.299790,8.917983,0.512890,8.068933,7.757479],[3.730739,-3.117271,-2.784412,9.132426,-4.380485,-4.919931,-3.317123,-9.174791,-9.935652,3.149743,-1.415199,-8.193201,-7.385851,-8.255180,-5.402979],[-2.939547,9.863729,3.854113,-8.360401,-8.913106,-8.375329,-1.746633,5.477070,-4.827794,1.635130,-8.335626,-2.093352,-2.046420,1.087688,-5.503729],[-0.509409,8.780535,3.674813,4.344349,-2.482410,-0.654416,2.895365,4.653214,-8.361655,-6.813329,3.291219,1.571942,-1.892308,9.431697,-5.573034],[6.376553,-6.658169,-6.463236,1.995933,-2.251461,5.886451,-0.547973,0.097775,-0.285918,-2.427173,-9.857220,2.718491,6.521849,4.160500,0.198583],[-6.542269,-5.409365,-5.713462,-7.332571,-6.679312,9.872756,-7.040956,-7.388519,2.105551,4.298035,-0.467271,3.792299,8.800933,5.124935,9.359347],[-6.296110,8.088141,4.070336,1.083215,8.345796,-6.490413,-4.091655,-7.873815,-2.861057,5.177501,0.998060,6.271008,8.508857,3.937471,4.675017],[-7.215759,-6.666995,-7.118492,9.078494,-2.644675,-9.940477,6.019327,1.415991,0.094721,2.836818,7.663023,-7.908414,8.764526,5.887477,-8.199112],[-6.931764,-8.116943,-5.345776,-2.427571,-4.629061,-1.107767,1.291600,5.653821,-6.657570,-8.000029,7.697159,-7.776499,1.847653,-9.460630,0.475669],[6.057805,1.886635,-2.308890,6.869452,1.827309,0.011930,-7.974001,9.433395,1.493415,-3.519006,6.090425,5.758134,-1.423313,0.654527,9.527151],[2.730044,-8.689541,-4.781204,5.743709,6.791168,-2.212469,-4.006193,2.313802,-6.981842,5.227614,8.459026,3.665616,4.650178,5.009910,-1.185774],[7.270915,4.310811,-6.291269,-3.774888,6.164694,-1.824064,5.809547,-1.923372,-7.813305,9.468106,-1.964542,-9.356856,-2.402400,7.934227,-4.115258],[-1.916543,1.788739,-2.103397,-5.098654,2.606133,-0.686745,6.868875,7.177521,1.804556,-4.258859,0.956185,8.652771,-0.156627,5.038133,6.246936],[8.403016,7.542303,0.809948,-6.064279,6.472326,-4.939872,8.812900,4.799265,3.920149,-5.221224,6.265428,-1.122824,9.828718,-3.276545,-7.139143],[7.330954,-4.498016,1.574570,-0.407384,6.745689,6.203393,3.816437,5.059605,9.007976,3.480520,-2.737481,-4.877321,7.885008,-3.489664,-7.521530],[7.955542,-1.285128,0.995223,-6.316240,-7.784932,9.337337,5.156006,-1.855182,0.029967,5.816700,-9.575964,0.385999,4.227812,-6.348914,4.269171],[-8.711006,-4.481833,-3.386292,-7.489421,3.457374,-2.888907,4.243443,-3.155633,-6.675808,5.550897,-0.275593,2.826920,-2.128828,2.403454,-3.037949],[-5.750093,2.499521,-4.216890,-4.100159,-9.651440,5.930530,-7.547504,-5.391976,-1.997506,-5.179171,9.036363,7.023741,-4.440037,0.359097,7.467265],[-4.889924,-8.985813,-2.457551,8.853896,-9.122658,6.618414,-9.780631,-1.189261,-1.472538,2.546039,-2.128573,2.789819,-5.727348,-4.138093,6.064839],[9.980227,3.691750,-1.303321,-2.733166,-1.603229,7.710300,-0.324893,5.928033,8.223214,-1.529793,-3.185049,4.978838,-1.815625,7.149135,0.377032],[-7.685591,0.963480,-3.076059,-6.344359,3.423317,0.538259,-9.996897,4.165126,-9.237890,5.600068,9.778762,-4.056106,2.014623,-1.400125,8.550884],[-7.355428,5.165792,8.754039,2.511702,-5.520663,-8.768896,5.260621,-1.442490,-2.092337,0.329224,4.324031,5.899355,2.387967,-3.263749,9.757092],[8.154256,-5.354803,1.422615,1.306964,9.413064,-6.227102,5.549270,-8.613357,-7.016732,9.909160,-5.284155,-4.622424,-1.536663,-8.139734,-3.155855],[-6.475059,0.176806,-2.081245,-9.945490,7.304055,3.507509,8.523939,-8.961096,-0.204522,-2.967883,-9.950109,-1.703892,-5.798476,3.906050,-6.375984],[-4.109217,1.141357,9.220931,2.714082,0.544233,9.213808,-5.248966,-5.719327,-0.889867,7.186523,-3.265365,5.985056,-3.898716,3.851357,-5.973622],[9.848685,-1.283116,4.545172,-7.326476,7.957610,1.170044,7.548581,2.254373,-5.518416,-0.294794,-4.004364,-1.017155,-2.034358,0.730698,-2.415794],[1.130946,-2.081545,-7.491951,5.481905,-9.981732,8.802895,5.937743,7.127766,-4.456517,-5.018790,6.319102,7.768870,-3.685039,4.281859,9.693611],[5.376893,4.109650,-1.956901,9.672151,7.728264,-4.343634,-8.070172,1.386118,-3.149591,2.209565,-5.105424,0.074725,-7.560197,3.854134,2.104708],[7.843447,2.644603,-1.877635,7.982703,6.921238,-6.048100,7.164998,3.529876,-9.773724,-9.143439,-2.916791,7.877467,-4.027497,2.748545,0.604018],[-3.885731,-0.453116,3.764136,6.575702,-5.544319,6.717964,-9.700617,9.022917,2.819719,1.637750,-2.784759,2.465217,7.572555,0.533898,0.005831],[6.378871,-2.536415,-1.886396,-7.363319,-7.140834,-2.065435,1.864774,-8.853773,6.005879,1.561691,9.122220,-1.084535,2.354763,-5.360498,4.441437],[0.809688,9.135043,-5.647766,2.918424,4.170854,2.523400,-2.348635,-2.551961,-9.704898,-9.544471,-5.110726,4.166123,-3.023947,-5.232158,6.107159],[3.429595,-0.658302,-8.659673,-7.372233,3.763973,2.908999,5.837881,-8.795078,-0.177974,8.823775,-6.379049,-0.419999,5.209121,-0.493105,6.466490],[5.456858,-4.178146,9.359698,-0.962027,-4.624767,6.783793,-5.994571,5.551778,-9.181137,6.629475,0.209101,4.533105,9.639152,-2.999623,-0.850716],[-5.518123,-9.870529,5.443073,1.897508,7.574662,-7.884569,-9.958966,-6.457674,2.907041,6.453067,-4.408879,-4.581419,6.917554,-4.304272,4.138567],[0.093350,-8.239154,-6.910076,-8.843644,6.446601,6.946868,-8.954676,8.640699,-0.970929,-2.371444,0.997963,-1.922549,-3.422648,-3.173058,9.349119],[-7.282667,1.190044,2.808738,-4.792751,8.946364,9.940471,2.478082,-4.219118,-7.432846,1.491775,3.691563,-3.765252,-9.156553,5.684319,5.978756],[-3.067376,6.504756,1.457299,5.876974,-4.440135,8.267238,-8.762331,-5.468880,1.288448,0.702415,0.898634,-2.720964,-9.965366,-7.935529,9.165255],[-8.220060,0.334697,8.113617,-1.298506,6.666977,9.714567,2.633780,9.309846,2.893926,-8.293227,-0.518820,4.846504,0.778605,1.121864,6.976731],[-9.878567,9.945315,3.972718,-6.095104,5.850319,7.877024,-1.339675,-8.304728,-4.623822,5.884340,-1.197912,-9.943819,-9.409655,9.798012,3.159229],[-4.072905,1.775756,-5.610712,-6.503166,-6.079022,-5.678276,-8.527660,-7.539172,-0.006661,-7.748222,-1.626041,4.042839,-0.528168,-1.286776,-5.176090],[-0.540801,4.952230,-1.739334,4.660198,-0.561492,-6.271100,1.036012,-9.080588,-5.361327,-9.505670,-1.801863,1.466960,7.246725,9.348113,-8.933989],[2.197885,-7.940934,-9.380152,-2.367053,8.541681,7.234580,4.723316,-5.698644,6.272130,4.754575,-5.607547,-5.027227,8.327976,5.021656,5.647327],[-8.041328,6.267390,-4.896248,7.893031,7.998685,1.938574,2.353330,3.570928,-3.439335,-6.883789,-2.015922,8.975054,-1.075334,-4.370797,9.454970],[6.513033,-7.536858,-5.837612,-1.790530,-9.001593,-9.023360,7.901697,-8.561051,-3.921353,8.858151,-1.475547,1.835823,-1.944029,6.480852,0.310311],[-1.301996,-3.805627,1.855135,8.719009,8.951568,3.208365,-6.801188,1.020531,5.897316,7.121185,-4.212532,-3.741471,-6.445907,3.128664,7.781075],[-2.664826,-0.695644,6.988336,-8.495890,9.679138,-5.283707,4.212575,6.989111,9.484547,-1.090118,7.283744,1.665388,-5.144541,-0.866232,4.728198],[1.902652,-0.112269,-8.868415,0.307113,-2.592941,-0.665742,-9.148718,7.200734,-7.601850,-4.190109,-9.093946,5.531694,-4.180833,4.473923,-8.197595],[-7.445920,-5.692204,2.373800,-8.830647,3.405757,7.600762,5.550049,-3.693046,-0.307668,-9.867539,7.152932,-5.622310,-5.464226,6.063318,-3.282813],[-3.495766,7.451650,5.978678,4.686402,9.574017,-4.522680,0.641829,-2.637903,0.141637,-8.213576,-2.206332,-8.661461,1.475417,2.813207,-4.990121],[-2.313813,-4.712572,8.394611,-5.391297,-0.929639,-1.173843,-4.017851,-4.638152,0.483039,2.139974,6.526322,1.021249,9.138045,-6.843482,0.901959],[-3.935024,4.244730,9.979720,-2.251877,-3.479113,-3.913313,0.593385,-0.939497,6.894035,0.978446,8.880113,-0.398348,-2.396844,0.272978,-9.286458],[2.593226,-3.945711,-1.541949,-8.722676,6.427675,3.457982,3.442338,9.301714,-0.498141,9.381478,3.400464,9.581295,6.319513,9.178753,-6.158040],[-5.586091,-3.036235,3.253939,-5.676073,3.200623,-0.428310,6.015454,-6.522785,3.434096,-4.254398,-2.386313,1.712003,0.658499,-4.745573,-0.426150],[0.811664,-2.352455,1.474873,-4.974087,6.061355,-0.408877,-3.335395,7.853613,-2.936847,9.898187,6.758051,-1.765292,8.541382,-9.800038,1.338196],[7.527171,6.612670,-3.491294,3.033005,-1.614922,6.030302,-2.828187,5.212710,-3.935614,-5.136932,-3.111941,7.614377,-9.342914,-4.544007,-2.512596],[5.711474,-3.206877,-6.825686,-2.981023,1.935834,-0.244186,6.351574,-6.577830,1.981853,-4.654290,5.423285,2.320204,6.236651,7.325909,-3.707646],[1.628297,7.597908,-8.319202,5.608663,1.592047,-9.110557,2.095440,-8.292657,-7.909388,-1.794757,1.040288,8.135394,-4.904679,3.329222,-2.129782],[-0.724183,8.595835,-7.509950,9.108473,-9.681422,-7.886548,-8.419094,-1.655657,-0.588676,-1.279638,6.635818,-3.636564,3.603945,-3.975988,-9.496839],[-2.149934,-9.149837,9.498854,-8.405879,-2.769118,1.011008,0.135562,-8.492347,8.456728,-1.485403,5.724223,5.333374,-7.319922,9.983341,6.669782],[4.187593,-4.035113,-7.061151,-2.582785,-2.203478,5.164543,-0.832904,3.893773,8.469208,9.082971,3.673160,2.820308,-1.962189,8.567540,-8.494725],[0.932728,-6.923931,-3.573037,5.968320,3.387024,2.965203,-1.096482,6.241317,6.865896,-0.625997,-6.522066,4.103270,-0.925888,8.632628,2.501470],[2.774960,-6.606894,-7.620897,-8.719990,6.717088,0.047680,-3.862863,-8.518301,-9.769438,-2.977791,-1.580284,-6.997774,8.478174,0.558299,-2.487956]], dtype = "float32")#candidate|5088|(91, 15)|const|float32
bop_5089 = relay.logical_or(call_5074.astype('bool'), relay.reshape(const_5088.astype('bool'), relay.shape_of(call_5074))) # shape=(91, 15)
bop_5092 = relay.logical_or(call_5075.astype('bool'), relay.reshape(const_5088.astype('bool'), relay.shape_of(call_5075))) # shape=(91, 15)
output = bop_5089
output2 = bop_5092
func_5102 = relay.Function([], output)
mod['func_5102'] = func_5102
mod = relay.transform.InferType()(mod)
mutated_mod['func_5102'] = func_5102
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5102_call = mutated_mod.get_global_var('func_5102')
call_5103 = func_5102_call()
output = call_5103
func_5104 = relay.Function([], output)
mutated_mod['func_5104'] = func_5104
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3415_call = mod.get_global_var('func_3415')
func_3417_call = mutated_mod.get_global_var('func_3417')
call_5111 = relay.TupleGetItem(func_3415_call(), 1)
call_5112 = relay.TupleGetItem(func_3417_call(), 1)
output = relay.Tuple([call_5111,])
output2 = relay.Tuple([call_5112,])
func_5113 = relay.Function([], output)
mod['func_5113'] = func_5113
mod = relay.transform.InferType()(mod)
mutated_mod['func_5113'] = func_5113
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5113_call = mutated_mod.get_global_var('func_5113')
call_5114 = func_5113_call()
output = call_5114
func_5115 = relay.Function([], output)
mutated_mod['func_5115'] = func_5115
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5126 = relay.var("var_5126", dtype = "float32", shape = (3, 5, 1))#candidate|5126|(3, 5, 1)|var|float32
uop_5127 = relay.log10(var_5126.astype('float32')) # shape=(3, 5, 1)
var_5134 = relay.var("var_5134", dtype = "float32", shape = (3, 5, 8))#candidate|5134|(3, 5, 8)|var|float32
bop_5135 = relay.floor_mod(var_5126.astype('float64'), var_5134.astype('float64')) # shape=(3, 5, 8)
func_716_call = mod.get_global_var('func_716')
func_719_call = mutated_mod.get_global_var('func_719')
const_5141 = relay.const([False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,True,False,True,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,True,False,False,True,True,True,True,False,False,False,False,False,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,False,False,True,True,True,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,True,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,True,False,True,False,False,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,True,False,True,False,True,True,True,True,True,False,True,False,False,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,False,False,False,True,True,True,False,True,True,False,True,False,True,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,True,False,True,False,False,False,True,True,True,False,False,True,True,True,True,True,False,False,True,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,False,False,True,True,True,False,False,True,False,True,True,False,False,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,False,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,False,False,True,False,True,False,False,True,False,True,False,False,False,True,True,True,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,False,True,True,False,False,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,False,False,True,True,False,False,True,True,False,True,False,False,False,False,False,False,True,False,False,True,False,True,False,False,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,True,True,True,True,True,True,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,False,True,False,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,False,False,False,False,True,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,False,True,False,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,True,True,True,False,False,False,True,True,False,True,False,True,True,True,False,False,True,True,True,False,True,False,False,True,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,True,True,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,False,False,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,True,True,False,True,True,True,True,False,False,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,True,False,False,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True], dtype = "bool")#candidate|5141|(1365,)|const|bool
call_5140 = relay.TupleGetItem(func_716_call(relay.reshape(const_5141.astype('bool'), [13, 15, 7])), 3)
call_5142 = relay.TupleGetItem(func_719_call(relay.reshape(const_5141.astype('bool'), [13, 15, 7])), 3)
func_4511_call = mod.get_global_var('func_4511')
func_4513_call = mutated_mod.get_global_var('func_4513')
var_5159 = relay.var("var_5159", dtype = "float64", shape = (49,))#candidate|5159|(49,)|var|float64
call_5158 = relay.TupleGetItem(func_4511_call(relay.reshape(var_5159.astype('float64'), [49,])), 1)
call_5160 = relay.TupleGetItem(func_4513_call(relay.reshape(var_5159.astype('float64'), [49,])), 1)
func_2550_call = mod.get_global_var('func_2550')
func_2552_call = mutated_mod.get_global_var('func_2552')
const_5162 = relay.const([-2,5,-6,-8,-4,9,-4,-7,-4,-4,9,7,-2,7,8,4,-2,9,-5,-10,-9,7,3,10,1,4,-8,1,1,-4,9,10,-8,9,7,6,-6,3,-7,9,-7,-9,-5,6,10,4,1,3,4,-7,-9,10,6,-9,8,-2,-2,-1,1,2,1,-5,1,-4,-7,-9,-3,-6,-4,-3,-4,7,-4,-4,8,-10,-3,1,-2,2,-5,-10,1,9,-10,8,-5,-1,-5,-8,2,-4,-5,-10,10,-6,2,-5,-1,-8,5,4,-3,3,-1,-3,-10,-7,-3,-10,6,8,-4,-1,-5,6,5,4,-7,7,7,-1,8,2,5,-2,9,-9,5,8,8,-4,5,10,4,-10,-9,9,-8,-7,-2,4,-3,6,2,9,-7,-3,-8,4,10,4,4,-7,4,-7,-6,-10,3,-6,10,-5,8,-9,10,-10,-7,2,-6,8,-2,8,6,-7,-6,6,-8,-4,10,3,-7,10,7,-7,-10,5,-10,10,-3,-8,1,6,6,6,-3,6,3,-4,-8,5,8,2,5,5,-10,-8,7,-8,3,-9], dtype = "uint16")#candidate|5162|(210,)|const|uint16
call_5161 = relay.TupleGetItem(func_2550_call(relay.reshape(const_5162.astype('uint16'), [210,])), 0)
call_5163 = relay.TupleGetItem(func_2552_call(relay.reshape(const_5162.astype('uint16'), [210,])), 0)
uop_5173 = relay.cos(var_5159.astype('float64')) # shape=(49,)
output = relay.Tuple([uop_5127,bop_5135,call_5140,const_5141,call_5158,call_5161,const_5162,uop_5173,])
output2 = relay.Tuple([uop_5127,bop_5135,call_5142,const_5141,call_5160,call_5163,const_5162,uop_5173,])
func_5175 = relay.Function([var_5126,var_5134,var_5159,], output)
mod['func_5175'] = func_5175
mod = relay.transform.InferType()(mod)
var_5176 = relay.var("var_5176", dtype = "float32", shape = (3, 5, 1))#candidate|5176|(3, 5, 1)|var|float32
var_5177 = relay.var("var_5177", dtype = "float32", shape = (3, 5, 8))#candidate|5177|(3, 5, 8)|var|float32
var_5178 = relay.var("var_5178", dtype = "float64", shape = (49,))#candidate|5178|(49,)|var|float64
output = func_5175(var_5176,var_5177,var_5178,)
func_5179 = relay.Function([var_5176,var_5177,var_5178,], output)
mutated_mod['func_5179'] = func_5179
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2964_call = mod.get_global_var('func_2964')
func_2966_call = mutated_mod.get_global_var('func_2966')
call_5205 = func_2964_call()
call_5206 = func_2964_call()
output = call_5205
output2 = call_5206
func_5213 = relay.Function([], output)
mod['func_5213'] = func_5213
mod = relay.transform.InferType()(mod)
output = func_5213()
func_5214 = relay.Function([], output)
mutated_mod['func_5214'] = func_5214
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2337_call = mod.get_global_var('func_2337')
func_2339_call = mutated_mod.get_global_var('func_2339')
call_5257 = relay.TupleGetItem(func_2337_call(), 0)
call_5258 = relay.TupleGetItem(func_2339_call(), 0)
var_5271 = relay.var("var_5271", dtype = "float32", shape = (3, 13, 5))#candidate|5271|(3, 13, 5)|var|float32
bop_5272 = relay.not_equal(call_5257.astype('bool'), relay.reshape(var_5271.astype('bool'), relay.shape_of(call_5257))) # shape=(3, 13, 5)
bop_5275 = relay.not_equal(call_5258.astype('bool'), relay.reshape(var_5271.astype('bool'), relay.shape_of(call_5258))) # shape=(3, 13, 5)
output = bop_5272
output2 = bop_5275
func_5298 = relay.Function([var_5271,], output)
mod['func_5298'] = func_5298
mod = relay.transform.InferType()(mod)
var_5299 = relay.var("var_5299", dtype = "float32", shape = (3, 13, 5))#candidate|5299|(3, 13, 5)|var|float32
output = func_5298(var_5299)
func_5300 = relay.Function([var_5299], output)
mutated_mod['func_5300'] = func_5300
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3999_call = mod.get_global_var('func_3999')
func_4000_call = mutated_mod.get_global_var('func_4000')
call_5310 = func_3999_call()
call_5311 = func_3999_call()
func_591_call = mod.get_global_var('func_591')
func_594_call = mutated_mod.get_global_var('func_594')
const_5316 = relay.const([False,True,True,True,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,False,False,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,True,True,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,False,False,False,False,False,True,True,True,False,True,False,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,False,True,True,False,True,False,False,True,True,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,False,True,True,False,False], dtype = "bool")#candidate|5316|(192,)|const|bool
call_5315 = relay.TupleGetItem(func_591_call(relay.reshape(const_5316.astype('bool'), [3, 8, 8]), relay.reshape(const_5316.astype('bool'), [3, 8, 8]), ), 0)
call_5317 = relay.TupleGetItem(func_594_call(relay.reshape(const_5316.astype('bool'), [3, 8, 8]), relay.reshape(const_5316.astype('bool'), [3, 8, 8]), ), 0)
output = relay.Tuple([call_5310,call_5315,const_5316,])
output2 = relay.Tuple([call_5311,call_5317,const_5316,])
func_5319 = relay.Function([], output)
mod['func_5319'] = func_5319
mod = relay.transform.InferType()(mod)
output = func_5319()
func_5320 = relay.Function([], output)
mutated_mod['func_5320'] = func_5320
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5213_call = mod.get_global_var('func_5213')
func_5214_call = mutated_mod.get_global_var('func_5214')
call_5439 = func_5213_call()
call_5440 = func_5213_call()
func_2447_call = mod.get_global_var('func_2447')
func_2448_call = mutated_mod.get_global_var('func_2448')
call_5459 = func_2447_call()
call_5460 = func_2447_call()
uop_5462 = relay.asin(call_5439.astype('float64')) # shape=(1232,)
uop_5464 = relay.asin(call_5440.astype('float64')) # shape=(1232,)
output = relay.Tuple([call_5459,uop_5462,])
output2 = relay.Tuple([call_5460,uop_5464,])
func_5471 = relay.Function([], output)
mod['func_5471'] = func_5471
mod = relay.transform.InferType()(mod)
mutated_mod['func_5471'] = func_5471
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5471_call = mutated_mod.get_global_var('func_5471')
call_5472 = func_5471_call()
output = call_5472
func_5473 = relay.Function([], output)
mutated_mod['func_5473'] = func_5473
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2231_call = mod.get_global_var('func_2231')
func_2233_call = mutated_mod.get_global_var('func_2233')
call_5481 = func_2231_call()
call_5482 = func_2231_call()
uop_5483 = relay.cosh(call_5481.astype('float64')) # shape=(15, 13, 12)
uop_5485 = relay.cosh(call_5482.astype('float64')) # shape=(15, 13, 12)
bop_5500 = relay.left_shift(uop_5483.astype('int16'), relay.reshape(call_5481.astype('int16'), relay.shape_of(uop_5483))) # shape=(15, 13, 12)
bop_5503 = relay.left_shift(uop_5485.astype('int16'), relay.reshape(call_5482.astype('int16'), relay.shape_of(uop_5485))) # shape=(15, 13, 12)
output = relay.Tuple([bop_5500,])
output2 = relay.Tuple([bop_5503,])
func_5517 = relay.Function([], output)
mod['func_5517'] = func_5517
mod = relay.transform.InferType()(mod)
mutated_mod['func_5517'] = func_5517
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5517_call = mutated_mod.get_global_var('func_5517')
call_5518 = func_5517_call()
output = call_5518
func_5519 = relay.Function([], output)
mutated_mod['func_5519'] = func_5519
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2394_call = mod.get_global_var('func_2394')
func_2395_call = mutated_mod.get_global_var('func_2395')
call_5548 = relay.TupleGetItem(func_2394_call(), 0)
call_5549 = relay.TupleGetItem(func_2395_call(), 0)
uop_5554 = relay.acosh(call_5548.astype('float64')) # shape=(3, 13, 5)
uop_5556 = relay.acosh(call_5549.astype('float64')) # shape=(3, 13, 5)
output = uop_5554
output2 = uop_5556
func_5558 = relay.Function([], output)
mod['func_5558'] = func_5558
mod = relay.transform.InferType()(mod)
mutated_mod['func_5558'] = func_5558
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5558_call = mutated_mod.get_global_var('func_5558')
call_5559 = func_5558_call()
output = call_5559
func_5560 = relay.Function([], output)
mutated_mod['func_5560'] = func_5560
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5721 = relay.const([[[-6.505405,-1.205052,-0.570503,-5.749494,-4.668731,4.769109,5.565788,-7.260699],[5.936416,-7.890534,-7.060792,9.454130,-5.155035,1.390913,8.932174,6.704193],[-8.403692,-7.035207,6.317620,-1.266710,7.179848,8.246248,3.465850,-7.491376],[6.078809,-1.102102,-0.666106,3.135506,-5.276663,3.273023,-7.916688,0.294738],[6.452592,1.347238,2.643177,-1.925272,-4.609045,5.854648,9.869295,-9.623627],[-9.291840,-8.504133,-2.178953,-1.585812,-6.444374,-8.821772,-5.580991,-5.203973],[-3.221338,-4.887515,8.319838,-4.369354,-5.336109,3.859580,-9.009133,-9.632019],[-7.847593,9.971248,1.435770,4.559740,2.144446,-3.396642,-8.141622,3.496437],[-2.892176,-3.426647,3.772296,2.975314,-4.803162,0.491632,-5.195121,-8.470015],[4.860085,-3.692693,5.213841,-1.286294,1.866171,-9.837025,3.477807,-6.552474],[-5.851945,-5.826355,-9.065058,1.287038,-5.751307,9.973717,7.707037,-0.369325],[0.681195,5.632612,-0.890554,7.200882,-8.168980,7.989074,-7.649830,8.702174],[-1.787909,-9.249295,-4.143594,-9.012208,-2.371653,2.691287,9.242627,-5.645714]]], dtype = "float32")#candidate|5721|(1, 13, 8)|const|float32
uop_5722 = relay.cosh(const_5721.astype('float32')) # shape=(1, 13, 8)
output = relay.Tuple([uop_5722,])
output2 = relay.Tuple([uop_5722,])
func_5730 = relay.Function([], output)
mod['func_5730'] = func_5730
mod = relay.transform.InferType()(mod)
output = func_5730()
func_5731 = relay.Function([], output)
mutated_mod['func_5731'] = func_5731
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4610_call = mod.get_global_var('func_4610')
func_4611_call = mutated_mod.get_global_var('func_4611')
call_5742 = relay.TupleGetItem(func_4610_call(), 0)
call_5743 = relay.TupleGetItem(func_4611_call(), 0)
output = relay.Tuple([call_5742,])
output2 = relay.Tuple([call_5743,])
func_5746 = relay.Function([], output)
mod['func_5746'] = func_5746
mod = relay.transform.InferType()(mod)
mutated_mod['func_5746'] = func_5746
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5746_call = mutated_mod.get_global_var('func_5746')
call_5747 = func_5746_call()
output = call_5747
func_5748 = relay.Function([], output)
mutated_mod['func_5748'] = func_5748
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2925_call = mod.get_global_var('func_2925')
func_2927_call = mutated_mod.get_global_var('func_2927')
call_5783 = func_2925_call()
call_5784 = func_2925_call()
uop_5786 = relay.atan(call_5783.astype('float64')) # shape=(3, 13, 5)
uop_5788 = relay.atan(call_5784.astype('float64')) # shape=(3, 13, 5)
output = relay.Tuple([uop_5786,])
output2 = relay.Tuple([uop_5788,])
func_5793 = relay.Function([], output)
mod['func_5793'] = func_5793
mod = relay.transform.InferType()(mod)
mutated_mod['func_5793'] = func_5793
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5793_call = mutated_mod.get_global_var('func_5793')
call_5794 = func_5793_call()
output = call_5794
func_5795 = relay.Function([], output)
mutated_mod['func_5795'] = func_5795
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2856_call = mod.get_global_var('func_2856')
func_2857_call = mutated_mod.get_global_var('func_2857')
call_5796 = relay.TupleGetItem(func_2856_call(), 2)
call_5797 = relay.TupleGetItem(func_2857_call(), 2)
func_2685_call = mod.get_global_var('func_2685')
func_2686_call = mutated_mod.get_global_var('func_2686')
call_5804 = func_2685_call()
call_5805 = func_2685_call()
output = relay.Tuple([call_5796,call_5804,])
output2 = relay.Tuple([call_5797,call_5805,])
func_5815 = relay.Function([], output)
mod['func_5815'] = func_5815
mod = relay.transform.InferType()(mod)
output = func_5815()
func_5816 = relay.Function([], output)
mutated_mod['func_5816'] = func_5816
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4534_call = mod.get_global_var('func_4534')
func_4535_call = mutated_mod.get_global_var('func_4535')
call_5817 = relay.TupleGetItem(func_4534_call(), 0)
call_5818 = relay.TupleGetItem(func_4535_call(), 0)
func_3265_call = mod.get_global_var('func_3265')
func_3267_call = mutated_mod.get_global_var('func_3267')
call_5819 = relay.TupleGetItem(func_3265_call(), 3)
call_5820 = relay.TupleGetItem(func_3267_call(), 3)
var_5831 = relay.var("var_5831", dtype = "float64", shape = (10, 8, 10))#candidate|5831|(10, 8, 10)|var|float64
bop_5832 = relay.multiply(call_5819.astype('uint32'), relay.reshape(var_5831.astype('uint32'), relay.shape_of(call_5819))) # shape=(10, 8, 10)
bop_5835 = relay.multiply(call_5820.astype('uint32'), relay.reshape(var_5831.astype('uint32'), relay.shape_of(call_5820))) # shape=(10, 8, 10)
output = relay.Tuple([call_5817,bop_5832,])
output2 = relay.Tuple([call_5818,bop_5835,])
func_5838 = relay.Function([var_5831,], output)
mod['func_5838'] = func_5838
mod = relay.transform.InferType()(mod)
var_5839 = relay.var("var_5839", dtype = "float64", shape = (10, 8, 10))#candidate|5839|(10, 8, 10)|var|float64
output = func_5838(var_5839)
func_5840 = relay.Function([var_5839], output)
mutated_mod['func_5840'] = func_5840
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3092_call = mod.get_global_var('func_3092')
func_3093_call = mutated_mod.get_global_var('func_3093')
call_5888 = relay.TupleGetItem(func_3092_call(), 3)
call_5889 = relay.TupleGetItem(func_3093_call(), 3)
func_3337_call = mod.get_global_var('func_3337')
func_3340_call = mutated_mod.get_global_var('func_3340')
const_5907 = relay.const([2.683902,-3.196296,-5.491944,3.040499,7.207980,-2.167468,-3.645890,7.693059,5.518043,-1.539375,-1.603454,-7.021758,2.332870,6.991900,3.241325,0.342057,2.383234,9.748659,-9.947353,-4.430518,1.265868,-0.526643,5.015403,1.882859,-9.051123,5.645881,6.678193,6.369651,1.873791,7.659137,3.191727,4.412893,-8.902576,-8.621395,-8.341152,2.022264,-6.188086,4.332217,0.857251,-0.838846,-7.126735,-8.523891,0.046511,9.406018,-9.785651,3.644435,5.629233,-2.001264,-9.290556,-8.723597,-2.738355,-1.746150,6.149059,-7.412919,-5.145080,8.717090,-2.969045,9.222930,3.493181,3.816709,3.810446,-2.530276,2.052912,0.152847,7.251498,-2.638807,6.283652,-3.163259,3.238027,7.712095,7.894710,-5.208409,-7.593686,-8.815361,-0.933379,9.007278,-2.523123,-3.833403,-3.845309,4.562190,-8.079143,0.397935,3.232250,-4.249993,0.270291,-3.273293,-1.015619,-4.021528,-6.573136,1.598476,-1.683529,1.477907,-9.651257,6.052465,9.105051,-0.720328,-9.131300,1.120066,-3.382928,-7.595340,9.120665,-5.707025,-0.571740,-6.636645,0.404168,9.518882,-1.291400,6.385016,2.767585,4.401358,5.888820,-4.721592,-0.329648,6.986377,0.976405,-1.982761,7.002694,7.368666,0.681495,-3.514869,0.708051,8.402568,-4.668474,-3.018273,8.767235,-2.643315,7.360184,-6.684759,-8.086945,-3.191915,-6.181459,-5.724778,-8.302367,0.449890,8.834009,-1.457588,4.844729,-1.815806,-5.667613,6.899550,5.595465,1.422475,-2.508019,-6.047746,1.815609,8.739183,6.487147,6.577252,3.109337,4.178203,8.364437,5.802206,0.888250,-0.109064,-3.471086,5.653814,-5.825485,-4.190674,3.540293,6.018690,-9.787521,-8.603053,8.159908,1.558127,-4.496413,1.412894,-3.344214,-0.393791,3.727265,-3.424290,5.386901,8.874680,-4.344032,-3.096091,-7.440944,-2.686328,-1.284710,-7.406133,6.312175,-6.056533,-8.400956,8.378521,-0.154247,2.537627,-4.507171,0.750518,6.169178,4.473400,4.962093,5.197839,-0.448534,-0.825836,-3.892635,-8.437550,-3.854612,8.473842,-6.913349,9.970906,1.198212,-5.125051,-7.711417,8.668299,-0.158576,6.951346,-8.441945,7.430281,1.578100,-2.495736,-9.229370,4.341094,8.714675,-6.659589,1.564069,7.222215,-5.288364,-4.612224,1.335360,-8.877619,7.036850,2.518415,6.959150,-0.066777,-4.233268,-5.098531,2.800306,7.850150,2.004218,-0.300736,-9.232627,9.041359,-1.169167,4.833566,5.762233,0.892442,-3.144318,-5.464551,-8.162665,-5.017999,7.592792,8.412581,-2.377869,-5.679704,-8.205876,-7.117198,-9.120093,6.648301,4.034012,-0.891939,8.069389,5.558226,5.665538,6.362557,-3.815413,-8.750566,-1.060245,-0.650990,5.661064,-7.811901,-3.748714,-1.575728,-9.324798,9.349373,-8.564649,-4.294796,2.390519,9.093395,-9.148538,-8.426993,-9.609293,-9.421756,5.242127,1.828676,9.423267,-3.173278,-3.453796,-4.205736,9.713292,4.460058,-8.998639,6.815588,6.524269,-3.405688,0.433010,9.910469,7.589458,-4.284627,-0.596643,8.566967,-6.981733,2.976053,-6.816480,4.573381,5.717899,-4.644799,8.909273,-5.267133,-8.469956,-2.636872,2.490301,-3.107577,7.192479,4.166563,-2.806574,-6.626738,2.236279,-0.141092,2.577315,8.821663,-4.336604,-0.381862,3.599779,-3.440424,0.753957,9.198186,-3.194935,-8.375886,-8.589578,-0.089069,-3.651897,2.608505,-9.527328,-0.194049,-2.512226,6.890176,0.672712,-1.838616,-4.015997,-9.360122,6.571053,-1.239134,0.768198,8.354264,2.890445,6.149508,-7.579636,1.976213,-2.953758,0.586304,2.492325,0.012400,-2.820851,1.232060,-0.772861,1.043527,6.820027,-0.986901,-9.578187,-8.544905,2.845231,8.784705,9.963136,-0.478864,-8.717766,-7.233994,-6.650718,-0.074952,1.583865,0.119291,-3.007364,6.050904,7.420464,-4.747496,1.889225,0.908441,-0.415188,6.881676,4.487178,7.284441,0.116808,2.962320,5.939410,-1.316792,3.059822,1.897775,-4.295185,6.450165,-8.981976,7.454503,-7.484300,-7.061260,-1.160969,-4.455893,0.828376,4.407928,5.673527,2.724481,0.352977,1.371281,9.029812,-9.318293,5.106819,3.383376,3.363226,-1.072984,5.349250,6.558588,-1.957757,9.660787,3.768922,-6.616395,0.503223,-1.542419,7.251542,3.648065,-3.382145,2.199664,7.073234,8.259000,5.681188,2.896465,-5.978690,-4.014316,-8.003237,-6.268869,4.345023,8.524592,-6.137236,9.047867,3.441642,7.136815,-2.867531,-3.797251,9.363622,-7.944121,5.189939,-6.391956,-4.580682,-2.436798,-1.795077,8.950746,7.108913,3.977595,-8.478593,5.780429,5.722058,2.422624,8.309339,-9.857161,5.990515,-1.536479,-5.517911,-0.133616,8.930983,9.327603,0.506698,3.654575,5.996165,4.562653,9.871432,-2.652160,4.345077,-7.271862,8.262786,6.579736,-3.934375,0.473712,-1.338214,6.206146,-2.863791,-1.271749,4.932427,-4.853814,-4.852177,-0.646654,-8.161810,-1.875896,-9.381984,9.993558,7.506686,-9.069965,-3.934569,-8.042741,0.164546,-7.668351,5.615638,-5.803314,3.073421,5.810280,-5.671595,9.869557,-3.375045,-9.949329,9.618972,-8.692966,-6.962576,-7.579315,-9.447736,-5.246584,-0.993708,4.496682,1.617534,4.555785,-8.133025,-1.011144,-8.315290,-9.504666,6.377526,-6.201797,-0.176907,-6.814279,1.571513,0.359276,7.550267,-4.986042], dtype = "float32")#candidate|5907|(504,)|const|float32
var_5908 = relay.var("var_5908", dtype = "float32", shape = (1200,))#candidate|5908|(1200,)|var|float32
call_5906 = relay.TupleGetItem(func_3337_call(relay.reshape(const_5907.astype('float32'), [14, 6, 6]), relay.reshape(var_5908.astype('float32'), [1200,]), ), 2)
call_5909 = relay.TupleGetItem(func_3340_call(relay.reshape(const_5907.astype('float32'), [14, 6, 6]), relay.reshape(var_5908.astype('float32'), [1200,]), ), 2)
output = relay.Tuple([call_5888,call_5906,const_5907,var_5908,])
output2 = relay.Tuple([call_5889,call_5909,const_5907,var_5908,])
func_5955 = relay.Function([var_5908,], output)
mod['func_5955'] = func_5955
mod = relay.transform.InferType()(mod)
mutated_mod['func_5955'] = func_5955
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5956 = relay.var("var_5956", dtype = "float32", shape = (1200,))#candidate|5956|(1200,)|var|float32
func_5955_call = mutated_mod.get_global_var('func_5955')
call_5957 = func_5955_call(var_5956)
output = call_5957
func_5958 = relay.Function([var_5956], output)
mutated_mod['func_5958'] = func_5958
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4238_call = mod.get_global_var('func_4238')
func_4240_call = mutated_mod.get_global_var('func_4240')
call_6019 = func_4238_call()
call_6020 = func_4238_call()
output = call_6019
output2 = call_6020
func_6022 = relay.Function([], output)
mod['func_6022'] = func_6022
mod = relay.transform.InferType()(mod)
mutated_mod['func_6022'] = func_6022
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6022_call = mutated_mod.get_global_var('func_6022')
call_6023 = func_6022_call()
output = call_6023
func_6024 = relay.Function([], output)
mutated_mod['func_6024'] = func_6024
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2190_call = mod.get_global_var('func_2190')
func_2191_call = mutated_mod.get_global_var('func_2191')
call_6085 = relay.TupleGetItem(func_2190_call(), 0)
call_6086 = relay.TupleGetItem(func_2191_call(), 0)
func_3265_call = mod.get_global_var('func_3265')
func_3267_call = mutated_mod.get_global_var('func_3267')
call_6092 = relay.TupleGetItem(func_3265_call(), 3)
call_6093 = relay.TupleGetItem(func_3267_call(), 3)
output = relay.Tuple([call_6085,call_6092,])
output2 = relay.Tuple([call_6086,call_6093,])
func_6100 = relay.Function([], output)
mod['func_6100'] = func_6100
mod = relay.transform.InferType()(mod)
output = func_6100()
func_6101 = relay.Function([], output)
mutated_mod['func_6101'] = func_6101
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5558_call = mod.get_global_var('func_5558')
func_5560_call = mutated_mod.get_global_var('func_5560')
call_6102 = func_5558_call()
call_6103 = func_5558_call()
output = call_6102
output2 = call_6103
func_6109 = relay.Function([], output)
mod['func_6109'] = func_6109
mod = relay.transform.InferType()(mod)
mutated_mod['func_6109'] = func_6109
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6109_call = mutated_mod.get_global_var('func_6109')
call_6110 = func_6109_call()
output = call_6110
func_6111 = relay.Function([], output)
mutated_mod['func_6111'] = func_6111
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6243 = relay.var("var_6243", dtype = "float32", shape = (14, 5, 12))#candidate|6243|(14, 5, 12)|var|float32
var_6244 = relay.var("var_6244", dtype = "float32", shape = (14, 5, 12))#candidate|6244|(14, 5, 12)|var|float32
bop_6245 = relay.floor_divide(var_6243.astype('float32'), relay.reshape(var_6244.astype('float32'), relay.shape_of(var_6243))) # shape=(14, 5, 12)
func_1839_call = mod.get_global_var('func_1839')
func_1841_call = mutated_mod.get_global_var('func_1841')
call_6248 = relay.TupleGetItem(func_1839_call(), 0)
call_6249 = relay.TupleGetItem(func_1841_call(), 0)
uop_6252 = relay.rsqrt(var_6244.astype('float64')) # shape=(14, 5, 12)
output = relay.Tuple([bop_6245,call_6248,uop_6252,])
output2 = relay.Tuple([bop_6245,call_6249,uop_6252,])
func_6262 = relay.Function([var_6243,var_6244,], output)
mod['func_6262'] = func_6262
mod = relay.transform.InferType()(mod)
mutated_mod['func_6262'] = func_6262
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6262_call = mutated_mod.get_global_var('func_6262')
var_6264 = relay.var("var_6264", dtype = "float32", shape = (14, 5, 12))#candidate|6264|(14, 5, 12)|var|float32
var_6265 = relay.var("var_6265", dtype = "float32", shape = (14, 5, 12))#candidate|6265|(14, 5, 12)|var|float32
call_6263 = func_6262_call(var_6264,var_6265,)
output = call_6263
func_6266 = relay.Function([var_6264,var_6265,], output)
mutated_mod['func_6266'] = func_6266
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6279 = relay.var("var_6279", dtype = "float32", shape = (11, 11, 2))#candidate|6279|(11, 11, 2)|var|float32
uop_6280 = relay.asin(var_6279.astype('float32')) # shape=(11, 11, 2)
func_3999_call = mod.get_global_var('func_3999')
func_4000_call = mutated_mod.get_global_var('func_4000')
call_6284 = func_3999_call()
call_6285 = func_3999_call()
func_2190_call = mod.get_global_var('func_2190')
func_2191_call = mutated_mod.get_global_var('func_2191')
call_6288 = relay.TupleGetItem(func_2190_call(), 0)
call_6289 = relay.TupleGetItem(func_2191_call(), 0)
func_3686_call = mod.get_global_var('func_3686')
func_3687_call = mutated_mod.get_global_var('func_3687')
call_6301 = relay.TupleGetItem(func_3686_call(), 0)
call_6302 = relay.TupleGetItem(func_3687_call(), 0)
func_5558_call = mod.get_global_var('func_5558')
func_5560_call = mutated_mod.get_global_var('func_5560')
call_6310 = func_5558_call()
call_6311 = func_5558_call()
output = relay.Tuple([uop_6280,call_6284,call_6288,call_6301,call_6310,])
output2 = relay.Tuple([uop_6280,call_6285,call_6289,call_6302,call_6311,])
func_6313 = relay.Function([var_6279,], output)
mod['func_6313'] = func_6313
mod = relay.transform.InferType()(mod)
var_6314 = relay.var("var_6314", dtype = "float32", shape = (11, 11, 2))#candidate|6314|(11, 11, 2)|var|float32
output = func_6313(var_6314)
func_6315 = relay.Function([var_6314], output)
mutated_mod['func_6315'] = func_6315
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3265_call = mod.get_global_var('func_3265')
func_3267_call = mutated_mod.get_global_var('func_3267')
call_6414 = relay.TupleGetItem(func_3265_call(), 0)
call_6415 = relay.TupleGetItem(func_3267_call(), 0)
uop_6417 = relay.log2(call_6414.astype('float32')) # shape=(3, 13, 5)
uop_6419 = relay.log2(call_6415.astype('float32')) # shape=(3, 13, 5)
func_2663_call = mod.get_global_var('func_2663')
func_2666_call = mutated_mod.get_global_var('func_2666')
const_6426 = relay.const([1.024347,-7.185731,3.690707,-7.626247,-1.973891,-4.080737,-8.862124,-3.866951,-6.878637,1.071731,6.465745,-7.930596,-9.090699,-1.137061,7.264725,9.667042,-6.934534,-1.579484,-8.959343,4.859096,-5.795998,-3.544638,-9.106784,2.128642,7.781282,-7.216700,5.938916,-9.642755,-9.101713,4.121167,8.256500,-8.406822,-5.047386,8.812006,0.568919,-1.120119,7.297781,-6.205633,7.938696,-2.482112,-8.175222,-6.381146,5.505720,-7.255000,5.215235,-1.529150,-0.374996,-5.827182,7.455973,8.227697,6.103042,-9.579395,-6.191256,-0.778757,-1.006527,-7.988294,5.429925,8.885389,-2.099993,-3.178544,5.189970,-9.805701,-0.033458,1.716703,-2.496336,-3.328180,-4.729427,-1.610652,-1.494802,-0.801869,9.941595,3.730020,5.469347,-7.646107,-0.082214,-1.681988,0.894367,9.696937,2.875218,2.468395,8.687591,1.509699,1.953207,0.916211,-0.752925,-5.998382,-2.243067,-4.847130], dtype = "float32")#candidate|6426|(88,)|const|float32
call_6425 = relay.TupleGetItem(func_2663_call(relay.reshape(const_6426.astype('float32'), [22, 4])), 4)
call_6427 = relay.TupleGetItem(func_2666_call(relay.reshape(const_6426.astype('float32'), [22, 4])), 4)
bop_6447 = relay.bitwise_and(const_6426.astype('int32'), relay.reshape(call_6425.astype('int32'), relay.shape_of(const_6426))) # shape=(88,)
bop_6450 = relay.bitwise_and(const_6426.astype('int32'), relay.reshape(call_6427.astype('int32'), relay.shape_of(const_6426))) # shape=(88,)
func_2434_call = mod.get_global_var('func_2434')
func_2437_call = mutated_mod.get_global_var('func_2437')
var_6457 = relay.var("var_6457", dtype = "float64", shape = (330,))#candidate|6457|(330,)|var|float64
call_6456 = relay.TupleGetItem(func_2434_call(relay.reshape(var_6457.astype('float64'), [330,])), 0)
call_6458 = relay.TupleGetItem(func_2437_call(relay.reshape(var_6457.astype('float64'), [330,])), 0)
uop_6461 = relay.sin(uop_6417.astype('float64')) # shape=(3, 13, 5)
uop_6463 = relay.sin(uop_6419.astype('float64')) # shape=(3, 13, 5)
output = relay.Tuple([bop_6447,call_6456,var_6457,uop_6461,])
output2 = relay.Tuple([bop_6450,call_6458,var_6457,uop_6463,])
func_6473 = relay.Function([var_6457,], output)
mod['func_6473'] = func_6473
mod = relay.transform.InferType()(mod)
mutated_mod['func_6473'] = func_6473
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6474 = relay.var("var_6474", dtype = "float64", shape = (330,))#candidate|6474|(330,)|var|float64
func_6473_call = mutated_mod.get_global_var('func_6473')
call_6475 = func_6473_call(var_6474)
output = call_6475
func_6476 = relay.Function([var_6474], output)
mutated_mod['func_6476'] = func_6476
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6492 = relay.var("var_6492", dtype = "float32", shape = (16, 12, 15))#candidate|6492|(16, 12, 15)|var|float32
uop_6493 = relay.asinh(var_6492.astype('float32')) # shape=(16, 12, 15)
output = uop_6493
output2 = uop_6493
func_6500 = relay.Function([var_6492,], output)
mod['func_6500'] = func_6500
mod = relay.transform.InferType()(mod)
var_6501 = relay.var("var_6501", dtype = "float32", shape = (16, 12, 15))#candidate|6501|(16, 12, 15)|var|float32
output = func_6500(var_6501)
func_6502 = relay.Function([var_6501], output)
mutated_mod['func_6502'] = func_6502
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3767_call = mod.get_global_var('func_3767')
func_3768_call = mutated_mod.get_global_var('func_3768')
call_6527 = relay.TupleGetItem(func_3767_call(), 1)
call_6528 = relay.TupleGetItem(func_3768_call(), 1)
output = call_6527
output2 = call_6528
func_6533 = relay.Function([], output)
mod['func_6533'] = func_6533
mod = relay.transform.InferType()(mod)
mutated_mod['func_6533'] = func_6533
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6533_call = mutated_mod.get_global_var('func_6533')
call_6534 = func_6533_call()
output = call_6534
func_6535 = relay.Function([], output)
mutated_mod['func_6535'] = func_6535
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6608 = relay.const([[[8.214762,7.343149,4.391853,-5.951181,-0.857975,-2.450336],[7.819119,-1.413557,7.222865,0.765715,7.591489,-3.531837],[-1.229673,9.532086,-1.371048,9.610987,4.560241,7.867500],[-2.914004,4.367787,9.307441,8.924968,4.721268,3.282157],[-4.081433,9.175663,-4.831883,4.314200,-3.325663,3.728452],[-7.580722,-5.718092,7.219204,-1.774815,9.270732,-9.918662],[6.605095,4.416947,0.422139,-3.207465,2.484812,9.807933],[8.630588,9.908654,3.583193,0.143724,9.340449,2.656389],[7.082150,-6.060819,8.926976,-9.715747,-9.530699,-0.786031],[-2.900445,-7.724933,-8.363582,-3.103538,-2.544852,9.832512],[-7.529469,6.424271,-3.131715,7.007973,-0.741376,-5.584904]],[[-9.824771,9.740811,4.120054,0.900702,-8.333356,8.406115],[6.843156,-4.246777,8.308280,-5.263702,-6.177867,9.988179],[-9.951315,6.464392,8.034299,2.490633,-2.477284,-0.069710],[-2.634113,7.212216,4.881171,4.489284,-6.863314,0.499362],[-3.796685,-3.624401,0.523440,1.243352,-7.350861,4.911197],[4.323976,7.986611,6.322903,9.241961,9.706056,-7.177173],[1.114456,-3.175774,1.980322,-8.321530,4.461934,7.052488],[-0.623329,-4.054182,4.732793,-8.867804,-5.506223,-4.260381],[-1.203229,7.445966,-4.406969,-0.356627,-4.222566,-4.344237],[-5.414167,5.116477,8.853116,5.497898,2.016932,-9.512897],[8.127437,1.549735,-7.792431,1.528440,2.053042,5.743058]],[[-7.685887,-6.787334,-8.088514,-3.836597,6.128565,-1.045452],[-3.899033,-3.079105,9.402451,-1.285865,-8.834982,6.088068],[3.185301,4.567369,2.416554,7.357942,-2.141069,-0.798911],[-7.666531,-7.283845,-5.380393,-9.703154,-8.603832,1.406318],[8.854371,-8.815409,5.279778,-2.445235,-7.077089,-5.895512],[-3.612332,0.360472,1.240922,3.318542,-2.237717,7.985329],[-7.016054,-1.141008,-1.875421,8.700216,1.737304,5.838958],[1.237282,-8.891022,6.925723,4.186862,-6.349225,4.356472],[4.778257,0.732089,-7.946570,-8.872903,-5.956257,6.704121],[-4.737704,-9.907229,-0.526116,5.750621,1.315074,5.141241],[-5.480375,2.009788,5.860466,-6.675292,1.423802,-2.304281]],[[-6.084560,9.567005,1.149734,3.330786,8.666498,-4.913582],[-6.274238,3.292624,3.211385,-3.739512,2.699765,-8.972385],[-3.943710,2.809176,-7.463080,8.860046,2.423022,9.353474],[5.758085,-0.177120,-5.506858,-1.290205,-2.004694,-0.793712],[-8.747747,8.978365,-8.042605,-3.158555,-0.715720,0.465123],[-2.397394,6.312309,9.807340,-2.785490,-1.202743,9.950725],[4.325828,4.309506,0.881292,2.918390,-7.896874,6.137869],[-6.177115,-1.095953,-0.496707,3.922057,-9.375567,-0.572716],[5.374315,3.470719,6.922310,-3.669775,-3.294806,0.452406],[-1.273795,-5.932018,8.013766,5.525642,8.217433,4.848924],[6.150903,-3.445846,0.925223,4.958718,-8.463580,-2.344989]],[[5.915552,-8.767004,-9.051294,0.408386,9.726269,-2.384931],[-0.936278,-7.613037,1.509273,9.132042,7.969466,-7.162003],[-7.105499,4.451168,-7.540128,-5.859656,9.498194,-1.589053],[-6.897688,-8.260458,1.943103,2.201121,-3.267387,6.217576],[7.866686,5.667097,0.160221,4.644589,7.391002,-9.632959],[8.818830,-7.336541,0.100091,-6.825774,-0.089986,1.236181],[0.396851,9.876202,8.144610,6.823232,6.900173,1.586702],[9.512629,-9.937618,2.475307,-7.948375,-4.695751,8.506722],[2.444427,0.507337,-5.139041,0.115906,1.683183,-2.973342],[-2.667264,7.932076,-6.109264,-8.882770,-6.032030,-8.203385],[3.985635,-9.565780,4.996599,4.289494,3.240531,4.462399]],[[-3.226953,-2.054747,4.785317,-2.326875,-5.704255,-2.809605],[-6.168646,-8.697246,0.441157,-9.517642,-5.772107,-6.816394],[0.074799,-2.406847,4.476682,-1.986615,3.557028,1.715121],[8.759981,-6.016673,-5.492315,-4.773483,4.350674,7.993363],[-6.822067,6.213590,-8.645750,-6.454370,6.344855,-4.689293],[-8.065543,-4.748442,1.390020,7.829335,5.169174,6.650986],[-8.081116,-8.053335,-5.892131,-8.215054,-7.607802,4.268344],[-6.644725,-1.746914,2.871941,-9.634629,7.819501,4.577692],[-8.630157,-6.941574,-9.788184,8.088223,6.391260,-9.265859],[6.727524,-3.793493,-3.819404,-0.676923,-5.082998,-4.636162],[-1.293455,1.221733,-0.077684,-4.078809,5.322333,-0.155889]],[[-7.423693,-0.024029,-2.219172,-8.265342,-7.310072,5.125390],[-2.251715,5.047465,-2.702194,-9.698709,-9.836110,-4.030037],[-0.765544,9.611774,8.047413,5.754772,-5.086506,-6.847622],[-3.256318,-8.807159,6.642042,8.877230,-4.962834,-0.606705],[8.619558,8.439410,4.830476,-8.890826,-4.937900,5.243946],[1.180115,-3.629088,5.866012,-4.053238,7.101103,-7.784401],[-3.559185,-8.082425,-9.710460,9.880409,-6.389302,4.458787],[3.389653,4.397791,6.424653,6.087712,-4.242946,-6.197090],[-0.096562,0.332331,-7.355689,4.394262,-5.387098,7.025538],[-2.454199,-7.134724,9.543097,-1.072997,9.911014,-9.563107],[9.484842,6.275508,1.770411,8.241556,9.755597,5.176644]],[[-5.898921,-0.715824,5.825654,6.738807,7.353380,-5.187988],[1.747824,1.161001,-3.097772,4.490168,1.428923,9.851436],[9.372863,4.822041,-4.557637,-2.618504,7.706668,5.823743],[-9.944570,-2.093998,-5.631100,-4.083065,-1.540039,-4.547067],[0.262660,-7.418842,-4.219527,-0.466925,-9.287774,-5.846454],[-5.654106,8.884697,-9.163292,-2.739880,9.456768,-5.727274],[9.465398,3.212680,-1.325873,9.509087,8.134724,-3.345201],[4.324253,0.056841,-1.452623,-0.987570,-1.361589,-9.720682],[-1.199265,6.645177,-9.491073,3.860955,-6.291615,9.710820],[-7.831836,5.958871,-1.419815,-0.528248,-8.103331,7.407292],[9.186707,4.394051,7.536646,-6.594372,4.960042,9.468823]],[[9.637217,2.836298,0.934161,-1.136392,4.004077,5.842085],[-2.667719,-5.986049,-9.758694,8.908142,6.103914,7.754824],[5.510846,4.458393,-5.397014,-3.455721,1.009725,3.994954],[-3.237299,2.843060,9.490420,3.636198,-9.417974,-1.295124],[2.930895,-4.787053,8.805517,8.852521,-8.352457,2.844204],[2.284271,-0.510444,4.381429,0.766157,-6.861650,-7.730091],[1.715103,2.291993,4.813332,-2.005304,0.154289,0.988576],[8.432979,3.256360,2.073650,-6.237637,-9.049754,-0.914154],[-2.485872,5.654202,-7.616964,0.941268,1.716943,3.335660],[-2.974163,3.810562,-9.435393,-8.209424,2.027177,9.119497],[-4.652355,3.362220,0.474550,3.892680,2.947838,-0.980545]],[[-0.875411,-1.596923,-1.243727,-2.305373,4.246136,-5.597912],[-1.596425,0.076746,4.168954,9.328703,-1.329219,-2.118156],[-8.379614,-7.946951,0.424230,5.098392,-7.998036,1.449464],[6.362872,5.961350,-4.420273,-6.199387,6.063493,-3.563891],[6.521031,-9.583266,2.976707,7.775947,-1.407953,4.242735],[-9.041895,0.041771,-2.716109,9.264200,-4.485593,2.729292],[-2.247298,-2.294154,4.115774,-7.307149,-4.238094,4.806857],[-8.990858,2.989649,-2.001383,-4.509805,7.747433,3.045161],[-4.039838,6.625748,3.271183,4.926463,-7.497576,3.077743],[5.677155,-7.481501,8.213585,2.472225,-3.704220,-7.903827],[3.384998,8.951065,5.525762,7.443355,5.970989,-4.660021]]], dtype = "float64")#candidate|6608|(10, 11, 6)|const|float64
uop_6609 = relay.sigmoid(const_6608.astype('float64')) # shape=(10, 11, 6)
output = uop_6609
output2 = uop_6609
func_6616 = relay.Function([], output)
mod['func_6616'] = func_6616
mod = relay.transform.InferType()(mod)
mutated_mod['func_6616'] = func_6616
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6616_call = mutated_mod.get_global_var('func_6616')
call_6617 = func_6616_call()
output = call_6617
func_6618 = relay.Function([], output)
mutated_mod['func_6618'] = func_6618
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2964_call = mod.get_global_var('func_2964')
func_2966_call = mutated_mod.get_global_var('func_2966')
call_6685 = func_2964_call()
call_6686 = func_2964_call()
var_6695 = relay.var("var_6695", dtype = "float32", shape = (1232,))#candidate|6695|(1232,)|var|float32
bop_6696 = relay.greater(call_6685.astype('bool'), relay.reshape(var_6695.astype('bool'), relay.shape_of(call_6685))) # shape=(1232,)
bop_6699 = relay.greater(call_6686.astype('bool'), relay.reshape(var_6695.astype('bool'), relay.shape_of(call_6686))) # shape=(1232,)
func_2231_call = mod.get_global_var('func_2231')
func_2233_call = mutated_mod.get_global_var('func_2233')
call_6715 = func_2231_call()
call_6716 = func_2231_call()
func_4083_call = mod.get_global_var('func_4083')
func_4085_call = mutated_mod.get_global_var('func_4085')
const_6724 = relay.const([True,True,True,False,True,False,True,True,True,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,True,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,True,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,True,False,True,True,False,True,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,True,False,False,False,False,True,False,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,False,False,False,True,True,False,True,True,False,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,False,False,True,False,False,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,False,False,False,True,False,False,True,True,False,False,True,False,False,True,True,True,True,False,False,False,False,False,False,False,True,True,True,True,False,False,True,True,False,True,False,True,True,True,False,True,True,False,False,True,True,True,False,False,True,False,False,True,False,False,True,False,False,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,False,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,True,False,True,False,True,True,True,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,False,False,False,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,False,False,True,False,True,False,True,False,False,True,False,True,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,False,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,False,False,False,True,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,False,True,True,False,True,False,True,False,True,True,False,True,False,False,False,False,False,True,False,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,True,True,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,False,False,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,False,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,False,False,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,False,True,False,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,False,True,True,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,True,True,True,False,True,True,False,False,False,False,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,False,True], dtype = "bool")#candidate|6724|(1365,)|const|bool
call_6723 = relay.TupleGetItem(func_4083_call(relay.reshape(const_6724.astype('bool'), [91, 15])), 0)
call_6725 = relay.TupleGetItem(func_4085_call(relay.reshape(const_6724.astype('bool'), [91, 15])), 0)
output = relay.Tuple([bop_6696,call_6715,call_6723,const_6724,])
output2 = relay.Tuple([bop_6699,call_6716,call_6725,const_6724,])
func_6733 = relay.Function([var_6695,], output)
mod['func_6733'] = func_6733
mod = relay.transform.InferType()(mod)
mutated_mod['func_6733'] = func_6733
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6734 = relay.var("var_6734", dtype = "float32", shape = (1232,))#candidate|6734|(1232,)|var|float32
func_6733_call = mutated_mod.get_global_var('func_6733')
call_6735 = func_6733_call(var_6734)
output = call_6735
func_6736 = relay.Function([var_6734], output)
mutated_mod['func_6736'] = func_6736
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3415_call = mod.get_global_var('func_3415')
func_3417_call = mutated_mod.get_global_var('func_3417')
call_6757 = relay.TupleGetItem(func_3415_call(), 0)
call_6758 = relay.TupleGetItem(func_3417_call(), 0)
func_2550_call = mod.get_global_var('func_2550')
func_2552_call = mutated_mod.get_global_var('func_2552')
var_6762 = relay.var("var_6762", dtype = "uint16", shape = (210,))#candidate|6762|(210,)|var|uint16
call_6761 = relay.TupleGetItem(func_2550_call(relay.reshape(var_6762.astype('uint16'), [210,])), 0)
call_6763 = relay.TupleGetItem(func_2552_call(relay.reshape(var_6762.astype('uint16'), [210,])), 0)
var_6779 = relay.var("var_6779", dtype = "bool", shape = (3, 13, 5))#candidate|6779|(3, 13, 5)|var|bool
bop_6780 = relay.divide(call_6757.astype('float32'), relay.reshape(var_6779.astype('float32'), relay.shape_of(call_6757))) # shape=(3, 13, 5)
bop_6783 = relay.divide(call_6758.astype('float32'), relay.reshape(var_6779.astype('float32'), relay.shape_of(call_6758))) # shape=(3, 13, 5)
output = relay.Tuple([call_6761,var_6762,bop_6780,])
output2 = relay.Tuple([call_6763,var_6762,bop_6783,])
func_6793 = relay.Function([var_6762,var_6779,], output)
mod['func_6793'] = func_6793
mod = relay.transform.InferType()(mod)
var_6794 = relay.var("var_6794", dtype = "uint16", shape = (210,))#candidate|6794|(210,)|var|uint16
var_6795 = relay.var("var_6795", dtype = "bool", shape = (3, 13, 5))#candidate|6795|(3, 13, 5)|var|bool
output = func_6793(var_6794,var_6795,)
func_6796 = relay.Function([var_6794,var_6795,], output)
mutated_mod['func_6796'] = func_6796
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4327_call = mod.get_global_var('func_4327')
func_4329_call = mutated_mod.get_global_var('func_4329')
call_6800 = relay.TupleGetItem(func_4327_call(), 0)
call_6801 = relay.TupleGetItem(func_4329_call(), 0)
func_3999_call = mod.get_global_var('func_3999')
func_4000_call = mutated_mod.get_global_var('func_4000')
call_6804 = func_3999_call()
call_6805 = func_3999_call()
func_4368_call = mod.get_global_var('func_4368')
func_4370_call = mutated_mod.get_global_var('func_4370')
call_6827 = relay.TupleGetItem(func_4368_call(), 0)
call_6828 = relay.TupleGetItem(func_4370_call(), 0)
output = relay.Tuple([call_6800,call_6804,call_6827,])
output2 = relay.Tuple([call_6801,call_6805,call_6828,])
func_6839 = relay.Function([], output)
mod['func_6839'] = func_6839
mod = relay.transform.InferType()(mod)
mutated_mod['func_6839'] = func_6839
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6839_call = mutated_mod.get_global_var('func_6839')
call_6840 = func_6839_call()
output = call_6840
func_6841 = relay.Function([], output)
mutated_mod['func_6841'] = func_6841
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5517_call = mod.get_global_var('func_5517')
func_5519_call = mutated_mod.get_global_var('func_5519')
call_6865 = relay.TupleGetItem(func_5517_call(), 0)
call_6866 = relay.TupleGetItem(func_5519_call(), 0)
func_4554_call = mod.get_global_var('func_4554')
func_4555_call = mutated_mod.get_global_var('func_4555')
call_6869 = relay.TupleGetItem(func_4554_call(), 2)
call_6870 = relay.TupleGetItem(func_4555_call(), 2)
func_2132_call = mod.get_global_var('func_2132')
func_2136_call = mutated_mod.get_global_var('func_2136')
var_6887 = relay.var("var_6887", dtype = "uint16", shape = (1, 2100))#candidate|6887|(1, 2100)|var|uint16
const_6888 = relay.const([2.447345,-4.556126,0.151858,0.927495,-7.956976,0.177945,4.494545,-1.696444,-0.520437,-6.577751,7.189015,3.903690,-2.707245,2.618048,0.719673,-3.664573,9.824852,-5.472366,4.127445,-8.853050,4.431299,4.993302,8.246978,-6.368886,9.965062,5.343879,1.738637,-4.193999,-0.905447,-4.320679,-0.546903,-4.720817,4.088840,-5.843083,-0.198399,-5.418163,-4.607017,-7.484420,8.873100,-5.175094,-7.520591,1.511506,-2.662457,6.282408,-0.765037,-7.069895,5.981511,-5.758792,4.759502,0.447821,4.989607,3.071005,-6.087843,-9.501476,2.833430,-5.163894,-0.465570,8.690169,6.550442,0.822537,-3.613517,-4.479098,0.935837,-4.421214,5.495862,-2.108474,-1.565773,4.456847,-8.024117,-1.314687,-4.096008,3.226727,4.436012,8.154145,4.271723,-5.897374,-5.168198,6.296282,1.884560,-9.161162,-2.483142,-2.459572,-3.305359,4.594564,8.091976,-6.777007,-1.527474,-0.171276,4.387839,-5.100615,-0.788739,-8.610821,5.141685,-3.545463,-6.304817,8.512926,-2.040462,3.267330,1.807989,3.576582,-0.190808,-7.262645,4.970269,-9.180601,-2.667681,0.268576,0.130251,1.349319,-0.099029,-6.793762,-6.761725,2.212046,2.263981,-2.741080,3.681832,7.647193,2.082633,-2.817507,-2.067600,4.053165,5.783184,6.958926,2.437963,2.356453,4.297143,-4.904735,0.100813,-5.401173,-4.407566,-0.463593,-8.670768,6.033799,4.904710,-1.445696,8.001432,5.767459,-5.251031,7.578616,7.828655,5.034802,-5.978082,9.599105,5.830468,-5.875796,-2.316553,6.393772,-9.664705,-8.479249,-7.322089,2.351367,6.702603,-5.587685,-7.904103,2.399078,-3.645417,-3.085223,-4.697189,7.242842,8.737573,4.794770,-8.888241,-6.216344,7.402619,-4.566610,0.763994,0.967841,-0.553255,-9.921061,-5.367760,8.655388,9.318742,7.044030,5.301153,7.932155,2.817661,-6.294090,-7.005709,-2.463810,1.839312,8.606584,1.069519,1.452587,9.764811,-4.177241,0.202691,-5.608519,4.380544,-1.092663,-1.358412,9.955330,-1.853195,8.372392,-9.742370,1.617111,2.319538,-6.855200,6.249579,-0.318630,4.711744,-6.416269,-5.712122,0.696408,6.269969,-3.912338,-1.643484,8.207911,3.695066,7.239145,-2.051942,-8.235498,2.549211,-5.809085,-3.490397,8.757260,1.083389,9.963654,4.707356,5.877162,-8.701209,-9.671955,7.810870,-0.976531,7.158850,-6.476529,-2.080781,5.165608,9.881773,-1.244360,-7.592045,-0.269094,-1.540755,-4.413153,-3.583926,-6.553769,7.120104,7.053704,-6.117912,-7.688616,7.188077,5.381427,7.628536,-1.101022,2.485184,-2.902255,-4.813317,8.506549,-4.799376,-9.521736,-7.736330,-8.392268,-8.666115,-0.159715,0.727788,-5.533791,-1.259974,-8.295752,-0.390560,-2.150200,4.419483,8.119440,9.564114,-1.770278,-5.639224,9.420643,7.037282,9.705271,7.851610,-7.792428,-2.082274,-2.041254,1.642389,-2.558292,7.543145,4.922425,1.249545,-9.243459,6.075481,1.416227,-0.918640,-6.760380,-8.555559,4.597396,-7.731132,-6.050841,-4.844579,1.769664,1.912274,3.601760,-4.753653,0.428511,4.729615,6.714312,7.952868,1.315520,7.505511,4.253190,9.877155,7.860509,5.856596,-2.597533,-8.613524,4.714602,9.879984,-0.490166,2.174053,7.690016,-8.224553,5.126233,4.710825,3.832629,7.869245,-2.336091,4.649122,-8.445919,5.658141,-8.237322,-2.838117,5.824033,-0.076541,9.955778,-8.156626,-3.757416,5.180816,-7.721683,-8.313711,9.350964,-7.896496,-5.507913,-7.201059,-5.025266,2.912964,6.915001,-8.223216,2.631796,7.543311,-7.936468,-9.374946,-5.320020,7.963347,-5.003234,-1.644084,1.721196,-1.909222,-7.680343,-0.558019,-0.138526,5.850431,8.828114,5.258021,-8.147948,3.911017,-5.162247,2.072249,-8.959968,0.736826,7.516080,-0.167627,-5.598850,-3.643648,1.791794,-6.632488,5.156653,-0.963394,7.940896,0.112308,-0.591565,9.852483,-7.795263,6.573659,2.053512,-2.181213,-4.332212,3.858544,4.024335,5.891628,-4.946167,-3.460138,1.992781,-1.664795,-1.262196,-4.485679,-8.077285,3.925969,-5.419903,5.295505,8.834567,-4.691687,8.366857,5.632113,-8.772024,7.930635,-0.410846,-2.515425,-1.933396,-1.539997,-6.862136,5.818194,-7.855865,-2.526294,3.823143,-4.204942,8.111114,-2.538447,-6.312320,7.500717,-0.996682,9.408572,-6.018812,-2.294464,-5.388830,-2.826910,6.488030,-5.513275,-5.065399,9.120989,-7.521977,0.408198,-9.285466,-3.386855,7.354716,2.702545,4.593212,-8.924458,-2.163256,-6.660940,3.133818,-3.920514,6.446523,8.820595,0.089102,1.450218,-5.465581,7.703522,9.680194,-1.391378,1.871832,-1.777628,-2.047385,-6.202248,-1.810692,-6.184362,3.959018,-7.480471,5.241983,7.456440,-5.756206,-9.736125,8.182427,-0.309616,-8.615535,5.533621,-1.207259,-6.619038,-5.270703,-7.797013,6.282728,-1.503381,7.614166,4.567750,-9.034611,0.162719,-8.985991,-5.975666,0.073531,-8.760229,6.525170,4.081812,1.743845,-9.884531,-7.644557,-8.770803,9.896057,2.979531,-4.534681,9.064468,3.328755,1.648493,4.156592,3.816881,-4.956611,-0.763657,3.106316,-2.834144,2.606213,-4.694412,3.387255,9.738379,0.903778,6.852757,-2.988884,7.704860,7.715540,5.113941,-5.057317,4.536172,-4.429705,-7.388438,4.867849,-2.241589,1.168048,-6.161355,-0.851563,-2.648516,-2.699152,9.068661,-7.181570,-9.532795,8.501600,-2.404424,-6.332965,4.919862,9.981980,-2.791849,-8.984411,7.141592,9.658280,-3.870200,-6.781871,-9.285663,-0.587443,7.477234,-4.720598,-9.677856,2.451419,4.854746,-6.679232,-3.332124,-6.046272,-1.907917,9.292965,-4.401729,3.022424,-2.994237,9.135350,1.575088,-8.513308,7.841373,-6.237958,2.765568,-2.911786,-8.239741,3.436165,2.053201,5.803812,-5.669080,9.470541,-0.963888,3.239379,-9.669449,1.594371,-1.924271,-3.224384,-5.404946,2.916520,-1.078637,-8.781197,-0.930286,9.716416,8.081667,6.580474,-4.788710,-6.806735,4.257418,9.674863,9.145448,8.823958,4.275178,4.254968,8.463979,3.571244,-3.965209,-4.167528,6.709367,-7.421639,-0.427120,-5.652303,7.504301,0.313200,-8.864297,-1.302072,2.437923,0.854502,-9.996459,-9.667974,5.848824,1.214703,2.130463,-1.464433,-9.414217,2.822959,-0.069437,6.920683,2.177365,-6.432824,1.145422,5.206208,2.530818,5.163695,0.827236,9.301617,6.100824,-8.936773,-6.095708,3.358933,-2.083129,3.876624,-7.603934,-0.951525,-1.510296,1.024737,8.296477,-0.511332,9.254090,-3.604981,-7.806271,6.766257,9.140350,-5.694910,-4.818551,-6.856312,5.734143,8.616902,-7.895044,0.523344,3.542526,-0.053655,3.202951,7.561451,5.875277,6.354200,0.284788,9.950335,-8.326444,-5.391422,-7.655378,9.136894,-3.489842,6.585953,-5.355440,9.039001,-6.728195,4.645476,5.362044,-1.821701,-6.379247,-5.858133,9.130610,-6.804723,8.376413,-7.464885,1.477340,9.794145,5.894162,-7.057124,2.417347,4.844389,-4.063004,6.319837,4.152301,-1.011562,8.838756,3.871092,-2.349884,7.457588,-1.853415,3.014382,4.073871,1.182938,-0.679101,6.167055,-0.871102,9.719343,3.291376,-7.881953,-0.769499,-7.667915,0.997898,-4.498448,-4.526214,1.509659,-1.278871,-9.710773,-5.356014,-4.054999,-0.593188,-0.605297,-6.941870,3.135400,4.232437,-3.364938,-8.132806,3.934670,-2.422379,1.218497,3.013218,6.616744,-9.855181,-5.966399,1.249184,6.446630,-3.211337,-9.719465,6.175403,-6.143824,2.700289,-0.510295,8.479441,3.919518,-4.598242,-1.211280,-9.866531,1.012145,-7.201892,9.744325,-0.370121,1.206475,-2.687021,7.413770,8.233772,-0.536975,-8.204205,-2.174214,0.658198,4.817070,-7.549799,7.068174,6.906830,4.756805,-8.001501,4.222045,8.736438,2.203669,1.024399,2.632625,-5.658020,7.215099,0.585452,5.197771,-6.077569,-6.557244,-5.864580,5.340584,-3.242989,8.723029,1.620263,2.012183,3.258212,-9.524247,1.419941,4.754607,-3.911075,-8.547355,-8.987638,-7.965609,-4.136527,-3.612660,-9.732966,-9.345304,-7.790707,-5.373913,-0.482521,6.714277,-3.467913,-7.485248,1.178547,-7.002129,1.746762,9.458390,-8.083974,-0.074764,-0.983117,6.705778,-6.876821,8.739059,-0.352087,-3.596927,8.186825,-4.037425,0.516246,5.237417,8.655962,-0.287868,-3.842363,-1.250221,1.507229,9.808571,6.848333,0.677466,-5.020905,2.860049,-1.829285,-0.077629,7.185849,3.828069,2.756952,5.663034,-3.187226,6.765979,-8.978600,6.720107,-5.937543,7.174147,-3.558876,0.168158,-0.432394,3.674356,-6.733297,-6.032780,-5.483045,3.458697,2.431178,-0.186239,-4.418566,-2.405265,-5.465787,9.184768,7.648985,-0.087411,1.094852,-7.602502,-1.057770,-5.691278,6.756031,-3.302105,-2.488982,-3.643898,7.163989,-6.642872,-2.388575,-3.771060,-8.536818,-3.427471,-0.333947,3.494416,-6.732495,8.042375,6.346098,-7.730644,8.323386,3.855449,-4.649387,0.277864,-2.882847,2.782491,-2.819144,7.663490,8.931431,-8.704152,9.147767,3.201709,-1.430844,-5.512669,-3.572349,-5.644367,-3.129778,-5.376235,3.382266,-8.302184,3.344057,9.961739,3.162600,-6.246559,-2.692824,-6.638402,2.181032,5.972927,3.071846,2.373406,-1.315976,2.089034,3.778324,2.727143,0.316835,8.140428,-4.226292,-7.040013,4.012830,-2.803343,-9.336236,5.309573,8.578257,3.416442,6.896770,-4.769402,-8.116883,-4.516104,0.658106,3.981511,2.029724,1.080053,7.193438,1.205349,5.823069,-4.167238,-1.632544,7.306830,-7.110824,-8.381651,4.898688,-3.094498,-9.257420,-7.255862,-5.144036,-8.005822,-9.098430,4.486812,-5.053268,-4.802189,0.016257,6.290993,7.043887,0.301510,1.524113,2.207904,-6.366209,-8.950428,-6.325702,2.586186,-7.192635,-8.777474,1.274118,-7.549119,-8.326136,4.323870,0.852892,8.130220,6.768189,1.363352,2.846600,-2.236219,-7.726929,-3.216558,5.880608,3.497805,-3.283926,-0.987888,-3.196757,7.494869,5.886083,-5.245026,7.529021,5.714677,-9.973356,1.826442,1.096380,0.358152,-2.075216,-6.466243,1.789390,-5.610734,5.827014,-6.345453,4.128532,-5.612306,-7.443855,-3.040235,0.741966,5.624690,-1.421096,2.847505,-0.454127,7.931362,-8.639312,-1.189814,3.670642,5.662269,5.562747,-9.451813,7.526765,1.632358,5.428594,5.477296,-7.475191,-0.559306,3.378661,-6.755610,2.937645,5.681456,-6.563112,4.026130,-8.659800,-5.740673,-9.267632,-9.430873,-2.869047,-7.192970,6.689287,-4.645949,-8.692235,-3.903752,-6.066427,6.108088,-7.756958,6.368045,-6.712201,8.473531,-4.422288,-9.569656,-9.855136,-0.317730,-6.812466,9.404052,2.439029,1.918332,-6.851874,1.873738,2.915897,-1.193898,0.648105,-1.330556,1.766788,-1.951188,7.238025,-9.824775,-1.833732,-1.407161,3.344757,-7.415874,8.209838,-8.996042,-0.951007,-7.220100,-3.972498,0.143316,9.559381,4.413849,0.474243,-5.554429,-9.446214,3.840365,7.622718,-1.792311,4.845502,6.169277,-9.610574,-1.406180,-3.606369,-8.366486,-8.476781,-0.750380,0.368104,-4.650496,-1.150981,-8.198152,5.319104,6.059057,5.791308,-9.801171,-1.560138,-1.470745,9.049144,1.100166,0.702182,9.486045,-3.115595,2.282446,0.320565,-4.343989,-6.632104,2.904374,-7.875431,6.399137,-7.698463,-5.254604,0.466051,2.345057,-8.413654,-9.689673,9.921683,0.291632,-6.296183,6.866011,-1.467970,0.909450,-4.340015,-9.163987,1.801685,8.600611,6.799729,-1.099379,-6.237707,-6.909309,8.455245,-5.817972,-8.690243,-3.707715,0.030867,-8.439076,2.424525,-9.127804,-3.406723,2.793044,-2.359406,6.699742,-3.057694,4.932304,-3.469855,2.476501,-0.699798,-6.933212,6.060549,9.088467,-4.286851,-2.554437,1.776660,-7.808248,-5.592060,1.412879,-5.172835,-9.022440,7.070648,9.412265,5.339626,5.176266,-1.526347,-0.921293,-7.064514,-9.498777,-6.276803,-7.271578,-3.356234,3.287646,-3.034619,0.089590,-2.327702,-5.271295,1.745339,5.254846,-5.540167,1.087313,-3.642248,2.384699,7.985060,9.611447,-3.614646,-4.543943,-0.619925,5.146355,-1.665101,4.949472,2.000209,-8.951793,0.645262,8.052140,-6.842743,1.636670,9.720834,4.325033,-8.302919,-6.809615,4.202284,1.410209,-6.248440,-3.069724,-5.081374,7.408172,2.821794,-1.534491,8.320303,3.844910,-8.592066,-7.790939,4.289888,0.522663,5.105763,-1.179711,-4.497257,-3.429580,2.227618,5.428790,0.637755,6.128477,7.503350,8.059834,2.332474,-4.305234,5.350124,0.021272,6.095914,9.722698,-5.233800,7.221970,5.587199,-9.390271,-2.940605,-6.251386,-5.812714,4.546520,-8.438560,6.374777,1.860031,7.605030,-6.915259,1.056505,6.373013,-2.565746,-8.260857,-4.685433,-5.533632,-4.554802,5.905746,-1.643854,-4.406582,1.506296,-0.679663,1.501564,-0.779792,5.584257,1.136742,-9.786686,1.620494,5.996435,-8.166393,4.200884,-6.293935,-5.933148,8.283693,0.092614,-9.665114,-8.923900,8.731639,-4.753456,-7.143257,2.476824,-1.487449,3.778670,-3.621581,7.005032,-0.106917,0.445498,8.554635,-1.701505,-1.217033,-4.406638,-9.716502,-9.728580,-2.010033,-9.629888,-9.939497,6.961203,2.551385,-6.445084,4.867527,0.599257,-2.019662,-9.336567,-7.791577,-8.218371,-6.631456,0.355604,6.008380,8.276980,-9.764820,4.266457,8.345973,7.089209,8.151122,-1.484563,7.308861,-4.776878,2.659029,2.596304,-2.543246,-0.428052,1.794737,0.876929,1.333448,-3.033936,-8.619518,-5.004105,-0.681082,9.039602,0.326425,-4.899115,3.352314,0.838370,1.827291,-0.594940,-0.938030,7.491032,-1.524762,1.091582,5.522200,7.807005,2.375724,0.566909,9.414600,7.304533,-7.014482,6.563757,-0.167332,-4.123714,-5.646021,7.187760,-3.196363,-7.426486,-7.265843,-0.611159,3.118810,9.296765,-7.335020,2.029348,8.138203,-5.800532,-7.621981,0.449662,-0.245580,9.234776,-6.412488,-8.262596,6.846846,0.874651,-0.923429,1.896013,6.888089,-9.997952,3.676397,6.794223,-3.576717,-2.722865,-2.644127,2.573354,-5.274589,5.233782,-4.348381,9.595539,-4.133800,3.595663,-6.849205,-0.482194,7.414216,1.309676,-1.224537,-5.925141,2.474250,-2.862063,-6.610009,-3.032794,-9.785868,-0.970114,8.828648,-2.243920,-7.225376,-1.006766,-6.149965,2.294192,1.844093,-1.138801,4.975771,-0.914535,7.945886,-4.395412,6.714438,-0.333309,-6.347472,-9.766119,-9.751743,5.478424,-6.984653,-2.938045,7.762889,-8.649338,-1.559721,-8.228793,2.175166,-8.423168,1.190024,2.953879,-8.376571,-2.717257,-5.599238,-1.560187,2.534856,0.330935,-6.691414,-6.005259,8.202326,-1.893082,8.695163,-2.516515,-7.208788,-5.326544,1.418722,-2.706556,5.608637,7.066137,4.681838,2.457153,0.825641,-3.758134,-8.381381,3.949531,8.295220,6.527934,7.114329,-8.835577,5.824219,1.100275,-7.247885,-3.114821,8.998643,9.920011,1.848925,2.181873,2.085316,-6.190018,5.442068,-9.166643,-3.117738,9.260237,6.390028,6.516829,-8.308463,3.736103,-2.391903,6.998621,5.233217,-5.338044,3.092265,-7.169596,0.539909,-2.288671,-0.290873,8.864658,-3.027806,-1.754454,-3.740293,-0.998991,8.369691,9.847953,6.388631,7.237615,0.404919,-1.390201,4.699193,-1.603124,1.150023,2.185142,0.106490,-3.360598,-8.091446,8.661238,-5.780001,8.969234,5.758650,1.101304,9.808908,-2.614563,-4.116592,7.424106,1.458302,-6.227142,-7.860984,-4.157547,6.630395,-3.205941,-1.437623,-6.573047,4.658223,-8.210541,7.384498,-5.574352,-1.174562,5.363465,6.788043,-8.872403,-0.994089,8.652802,2.974418,-9.272305,5.134803,-3.180343,-8.795261,-3.125768,-2.085677,8.652977,9.541773,9.953593,-8.887782,-1.165305,3.515135,-9.324006,-0.872201,9.544035,7.713261,-0.126926,-7.043827,-7.256755,6.377553,-0.727738,6.467952,5.166730,1.337633,-1.711091,-3.233828,8.815801,-4.525926,5.408632,-3.159045,-2.341221,2.128402,-2.111730,2.893303,-6.125607,4.128454,-2.091949,-5.070730,1.422030,-8.755701,3.384401,9.632606,7.692104,-3.082395,-3.287720,8.583118,6.145811,1.565792,-2.396095,-8.352802,7.427660,0.503886,8.055452,-9.249209,-9.257611,-7.335581,6.667470,-8.485904,7.896372,4.910275,6.881257,-6.016884,1.330607,-0.489340,-0.770993,0.648474,1.946662,-8.713456,-7.268977,2.828076,9.127068,3.575910,5.411547,9.173251,-6.664718,-5.163100,2.425313,-5.690242,-0.094804,-4.842664,-6.594484,5.758736,8.896142,-4.302182,-4.030042,-4.538253,0.853070,-5.733860,6.032181,-8.378767,-6.069018,-5.457877,5.046857,9.325204,2.073741,3.488681,6.502500,6.974513,-6.126498,-3.203132,-5.276139,-2.138663,-6.924864,-8.944447,5.845064,-5.567237,-8.881536,2.423771,8.025367,6.697001,2.128204,-7.307087,6.658202,7.310803,7.534706,-0.937983,-4.123196,-3.293902,2.631227,-5.947967,4.387335,0.105162,2.875705,7.939683,8.013900,-6.367042,6.384707,1.251664,-9.664975,-2.716378,-7.056299,0.435062,-3.825171,-0.222543,5.642710,-3.266471,2.724283,-8.567270,-5.778163,8.931344,-1.591000,-8.180787,9.726811,1.275307,-0.487892,2.952151,-8.680239,9.424636,-6.317736,2.162607,2.544655,-4.464101,4.928930,6.919907,0.360812,9.912430,-3.521257,0.105194,0.695406,-4.492525,9.602519,-0.219939,-1.322339,-8.721783,9.523415,-3.972167,6.380204,2.346338,6.048250,-9.024178,-0.056538,3.039158,-3.163972,-8.145443,3.342000,1.608229,-6.150646,-3.883337,-4.267738,-1.722989,-0.896383,-5.107005,7.162037,-0.275038,-4.406368,8.160403,-9.839031,-1.105413,-3.339747,-6.463149,9.261364,-3.132946,-2.115910,-6.028177,6.733303,-6.253592,-1.271473,1.768440,5.101521,-8.727237,-7.688529,-0.218741,-0.566480,4.746955,7.351103,-6.844508,-6.574832,-3.712085,-1.694653,9.750691,0.746302,1.555521,-7.298173,-4.822485,5.960956,8.498096,-4.098145,-1.044861,-9.541323,4.209782,-7.761778,-7.019710,-0.814236,2.181149,-7.964430,-3.200236,-6.075125,2.091785,-5.637964,-3.991778,-6.992169,-7.884615,1.726361,-4.121532,-5.922557,8.988938,6.129579,3.223136,9.972352,-1.866928,6.112365,7.113346,0.345458,-4.163556,-9.400145,6.395307,2.222671,-6.866572,-2.590734,-5.028833,-5.942433,4.573991,-1.209086,-9.528684,4.854735,9.569978,3.503656,4.425909,6.109773,3.100736,-0.141423,-8.427500,-9.467851,8.219354,2.541870,2.898995,2.393580,-1.212084,-2.507510,4.738119,0.047179,-9.720519,-0.300268,1.663803,-8.233493,7.295644,3.978853,-8.937605,-8.545694,1.354657,1.430920,-9.181685,7.776635,-1.855376,5.630803,-5.068788,-6.112449,2.236511,-1.360887,-5.704290,8.425754,2.849225,-6.458589,-7.395281,1.605624,-7.376178,1.941882,-6.725339,2.140156,-3.777710,-0.279990,-1.555408,4.737110,6.681114,-0.594668,-7.690033,-9.619611,2.469997,0.302492,5.352004,5.252459,-5.291313,-7.267524,9.068692,6.646801,-6.319018,-1.751846,3.636785,5.969808,7.559594,-1.683536,3.250149,-0.661185,2.497432,1.991383,-8.435148,8.039476,0.962542,4.558674,6.357731,-6.232730,1.877038,-0.105322,-3.239063,2.226850,-7.563101,-7.002357,-4.809815,-7.101586,-5.616416,1.174710,-1.736169,8.036530,-3.134771,-1.559805,-5.217955,-8.906310,-1.514592,-4.816966,-0.820338,-7.979515,6.728785,-3.945999,7.745834,-3.811284,-9.964525,9.721186,-5.782116,-0.583808,7.685361,-4.284518,8.867949,5.198715,-6.874565,2.794629,-0.650582,3.583138,-7.005133,8.811448,-4.914425,9.143445,9.478396,9.324800,-0.648546,6.205207,-0.838378,3.731431,-9.144928,2.709484,-9.521513,3.197094,4.169181,-9.616158,-6.295147,7.204312,8.522019,-8.389945,9.957924,-3.373054,7.126398,-8.502170,-7.122382,-2.417571,-6.761156,6.334959,-5.180212,2.519432,4.393745,4.621760,-3.098024,-7.312751,4.788636,-0.282986,-4.150289,-3.240419,-4.160264,7.134819,-7.708039,5.767818,-9.827052,0.490564,7.347233,-3.822871,6.751988,5.700075,-9.604651,1.479352,-9.762476,2.294015,8.129019,-5.124307,-3.890772,-5.531082,1.314832,5.660808,-1.280067,-0.750813,-7.600988,-4.294204,-0.092665,3.880891,3.820880,1.693843,-1.872202,-6.458493,-3.662598,-3.572436,-9.938068,-6.860315,-7.241512,6.861858,-1.859421,6.434391,-0.670293,-0.071157,3.487288,-5.449804,0.296617,-4.300287,-2.815292,5.935416,5.010291,1.462466,-1.741837,-0.161394,4.695737,3.123230,4.509920,-7.355596,-4.896749,6.984416,-4.297368,-2.470225,3.015782,-3.394713,2.233834,-1.350673,9.947571,-7.603105,7.634148,-3.218889,2.390092,9.963054,-8.599284,-0.792517,-4.511690,-5.827066,2.659323,-2.681059,4.720635,-3.781609,-9.273839,-0.771589,-5.659305,5.372418,7.549237,3.353826,1.506037,8.466340,-5.764742,-6.122031,1.386689,-9.646642,5.255285,4.619391,9.724011,7.987405,4.131182,0.069244,0.846284,0.298695,-3.435626,2.477016,9.406080,-7.021623,-0.071085,7.146052,7.537482,0.527764,-2.253867,-2.574408,-6.079163,-6.126749,0.340629,-8.200011,-6.161513,5.688890,-2.516544,6.932668,1.137506,9.017618,-9.625534,-8.416563,-7.323672,5.590993,-6.604187,-6.235054,9.810324,-1.669518,-9.629499,4.331073,8.643404,-8.892544,0.312243,8.736218,4.118035,8.754678,3.343595,8.595959,1.841976,5.708688,-9.701241,-0.601713,-4.135861,-0.865037,8.175683,4.815568,-9.872587,-0.564772,3.444877,5.218484,1.626275,8.109284,-7.188662,-7.068767,7.042100,3.160283,-1.898648,3.171224,1.044705,6.994637,-1.439423,5.859003,-3.606113,-7.043369,8.889205,-4.950765,-8.947115,-2.992933,1.396061,-3.952322,-1.226256,-9.933588,-6.546112,6.115051,-3.245211,-0.075302,5.089363,0.705270,-5.238296,-2.681226,2.530725,-0.554744,-2.844846,-8.234767,3.606654,-1.375550,6.366083,-0.202847,-1.408255,3.190917,5.315065,1.198278,8.789043,-1.375062,8.008440,1.911305,-1.473846,-4.169750,-2.109745,-0.704664,-8.117115,0.230568,5.589494,4.042523,7.496102,-7.685978,-7.697452,-6.286447,9.145697,6.101098,4.143681,3.253794,-1.219636,-9.862038,5.234929,4.692979,4.267652,6.409355,-2.735447,-5.955539,2.207959,-6.415673,0.383780,8.547902,-0.839409,0.776462,7.804934,4.276699,-5.576982,6.247817,-8.635201,9.294600,5.006783,-3.961005,2.060021,-0.766479,-2.626818,6.617472,1.542508,-0.035313,4.210781,6.944159,-2.438925,4.829455,-8.553674,-4.158158,8.988488,-7.320184,-0.349102,-1.058012,6.573705,-5.682119,-7.518265,4.017941,-2.628773,1.947013,1.734917,5.515064,7.450649,0.476414,3.853813,-8.803481,6.235105,6.988776,9.195175,-8.615391,-0.696669,-1.828484,-2.017477,-7.436177,3.721544,-3.758979,-7.003610,5.172738,-2.828001,2.542020,-2.342757,-1.306557,-2.131450,-6.278242,-6.907176,4.087401,7.102881,7.455168,0.738167,5.203773,9.587825,-3.961936,3.094375,8.938892,-4.331018,3.266606,-3.672159,-6.318819,4.999903,-4.028557,7.745631,3.770145,-1.882002,-3.282140,-1.947815,-1.561385,-8.902169,-8.353153,-0.317385,8.296517,-6.362160,-5.436545,5.536617,-5.717619,9.097745,-8.932324,-0.710006,3.305974,-9.856353,-2.876997,8.344231,-8.807133,2.247462,8.424156,-1.875430,-3.739378,5.847395,7.817800,-0.447322,-1.831730,-5.275669,-5.609349,-7.301785,5.045657,-6.688641,1.301071,5.076850,4.181425,-5.443698,-7.975205,8.462036,-1.362487,8.178956,5.471756,9.889016,1.997969,-0.463795,-4.773180,-6.619490,0.989242,8.796729,-2.213876,-4.615326,-2.323188,4.766335,3.127873,4.189880,8.719225,6.154144,-5.954185,-5.751330,4.188691,-0.991921,5.556922,1.194925,7.364698,-1.134610,9.410274,5.640030,8.771698,2.544629,0.193670,-6.382809,3.844605,-9.364212,-7.640158,-2.144167,1.906309,5.473283,6.816883,-0.745653,-8.007122,-7.985102,1.758758,5.454112,-4.338675,-5.477912,7.153889,6.412108,-7.862674,1.001206,-6.419022,-4.795111,-9.797957,0.175196,9.690552,-0.136693,-9.021603,3.105475,-1.213041,-4.949079,2.396771,-0.966563,-2.721550,-7.311036,1.794547,2.506727,8.504019,-6.450420,-1.007834,9.504851,7.671283,9.144746,-8.625313,8.110202,8.758786,-5.750845,-5.086287,3.153844,-8.412889,-8.106636,2.517297,1.199558,2.105010,-2.734396,8.135105,7.440288,1.380343,-3.994469,-8.780144,-6.008434,-6.648005,-6.042045,-6.341252,3.343212,1.364763,-4.365796,4.692969,5.652158,8.806402,-1.030462,7.482224,1.170558,-0.850107,6.345810,-1.115388,-2.469815,-0.804070,8.875141,4.125488,0.811919,-8.895262,9.462782,2.545139,4.711083,2.911299,-3.030514,0.284590,1.794181,9.851682,-0.924073,4.751250,-3.594054,-0.176802,-0.220142,-3.639800,-7.018702,5.093782,0.340852,3.776679,-5.173444,-2.480371,3.890974,-5.767021,-2.225115,1.181249,0.348941,9.231213,-1.208657,-0.929601,1.934393,-7.427731,0.688648,-9.534703,4.320108,1.265217,-9.633997,-8.938496,-5.882145,-7.965465,-3.431234,3.195232,-8.114493,-2.822824,-9.771558,1.116216,2.209869,-8.483322,-8.028151,2.335003,-4.982363,8.240513,1.859208,-8.205758,-0.800558,-3.781085,8.076509,3.411723,-8.517322,-5.444859,-1.159230,9.732599,-0.790176,-8.920816,-1.006761,-9.293962,2.919520,0.830296,1.017848,-9.459150,-9.886192,-8.511315,-1.072809,-4.979964,9.932084,-2.307842,-1.797516,-1.545792,4.050206,7.611298,-7.129191,-0.906303,7.591721,-0.793686,5.589521,8.243187,6.997923,3.010324,8.813664,2.203008,2.311443,-9.015789,6.620129,-1.654946,4.118447,-7.860321,4.429348,6.316174,-9.782950,1.950501,-7.058082,7.289855,-1.994585,-4.125892,-0.247876,5.366517,7.810762,-6.594565,-5.994933,1.992818,-7.687061,8.461362,-5.098172,0.718761,9.883179,-9.339728,3.662465,8.750948,2.851303,6.439010,5.613588,4.160152,-1.573954,3.296968,-8.648430,-6.581994,-5.184063,-1.421788,5.058761,2.119463,-7.965270,-1.161038,-1.583921,3.238050,6.113401,5.797155,8.166103,1.987858,-5.355569,-2.651410,0.428392,-9.341275,6.603212,-8.379649,-6.629143,3.536746,-2.576620,-1.861663,7.385441,-3.593264,-4.161165,-2.852496,-5.080595,7.970166,-2.206526,8.856176,-9.517155,-1.306475,-0.756704,-0.504374,-3.382677,3.816618,-9.817890,0.977115,5.787878,-1.939419,-8.649070,-5.504444,2.623986,3.665340,0.446357,6.063789,-4.456072,4.292400,2.702581,6.328349,1.814627,-1.469920,-3.265664,-5.490889,5.101029,9.039022,6.079988,-7.628672,6.973034,-3.666531,-0.334063,5.268391,5.415913,1.471530,-1.906189,5.520190,4.160130,6.751953,9.345168,2.522564,3.361227,-4.366153,-0.922852,8.040143,7.168272,8.161933,3.495084,-1.280321,2.700672,3.984572,4.770253,-0.907465,-1.705507,-7.796642,7.211564,-1.364234,9.472901,7.485058,9.826541,7.630850,-9.666770,-1.503616,3.730473,8.980535,-7.892542,6.036345,4.974403,-6.009104,5.817106,8.050982,0.853426,0.762800,3.801507,-2.757516,1.701956,0.075691,-2.160856,-6.618210,-8.735304,5.838584,-6.887843,-5.266278,-3.889083,-7.552577,-7.239049,-0.574664,3.937626,-3.494416,-1.753228,-6.501217,-3.806615,0.050811,7.662093,1.973668,1.084732,5.963012,8.458028,2.392954,-4.347256,5.509287,-1.477841,-0.963344,-5.078499,-6.741611,-8.716676,-1.149588,-8.219488,6.939471,5.932989,9.149942,9.448854,8.068231,2.922963,-5.011539,-7.882585,-1.899612,5.222637,-1.416948,2.583659,-5.565231,2.733830,-1.834458,8.306475,-2.958775,-6.043746,1.448555,-3.156234,-5.782218,-1.891004,2.399269,2.565618,0.876305,8.343938,-9.150299,-7.167016,-6.288043,8.503347,6.760058,-8.966731,-8.139496,3.663568,5.427578,-6.264725,7.526797,-9.266344,0.093476,-5.879211,0.392639,-4.206771,-7.742205,-3.257860,1.368879,-7.588882,-9.223625,-8.267748,6.615787,2.412438,8.736536,3.456693,-1.236343,2.362845,0.704861,-7.041022,9.121797,-7.418559,1.193459,-9.693529,-0.140750,7.770193,-9.995843,8.849716,1.926963,-1.980264,-9.596486,-8.452341,9.985286,-8.202935,4.445366,5.752551,-7.633097,9.759524,3.099674,-9.634488,-1.114654,-2.874636,5.993320,-3.842465,-2.761655,2.059330,-3.180040,5.642481,7.548496,-5.804327,-3.808245,-0.071410,1.314301,-1.603784,9.774803,3.556958,-1.543522,-5.830259,0.246463,0.782041,4.193287,3.776989,-2.088967,-0.901460,-4.414347,-3.097796,-3.240728,1.143348,-2.133601,-4.300629,-1.569352,6.135770,-5.603108,-0.275458,4.611028,2.102486,-5.155687,-4.723203,-4.748644,8.408067,-7.980412,3.555400,-8.052455,-3.905795,2.298923,-3.337920,-7.987116,-2.113645,-0.750070,8.045583,-7.786822,-3.637602,9.785804,3.115746,2.299975,-2.656360,8.847556,6.394289,0.786830,-4.207901,-7.739657,-5.799774,0.969605,9.174147,-6.229228,3.939624,-5.516006,4.462417,-5.378021,6.546724,2.460907,5.153165,5.789645,-8.844179,4.954052,4.928186,-2.746490,-2.273481,5.282164,6.343774,-6.131421,-2.101955,-8.879239,-8.451130,4.617030,9.000673,-0.961416,7.623767,7.731602,-7.654736,-6.777806,-4.058244,5.854046,-0.328397,4.618797,-0.665261,-6.684026,-8.938317,6.224461,-2.026415,-1.612691,7.493412,-8.232914,-1.837283,2.809342,-3.183459,1.313946,-7.440880,-1.245262,4.249846,-5.161505,7.169294,-7.083329,8.432014,1.422780,-1.103439,2.608773,-8.512254,-8.076257,7.628054,5.441002,-8.163363,3.458976,1.598359,9.903913,3.147686,5.636265,6.267133,-8.107619,9.269662,-2.687486,0.990846,4.289414,9.351784,-5.048824,8.699447,3.670708,-4.058451,-1.020509,-8.424209,-2.005611,0.622211,-3.240121,-5.146794,-7.951466,-3.831239,3.426430,-6.223046,4.038417,2.670999,0.868193,4.130656,-8.183453,9.534188,-5.781777,-1.357296,0.032497,-7.938733,-0.517702,-5.171959,-2.675205,7.976284,-1.832403,-4.071282,-7.601712,8.773732,7.748750,-6.312211,6.000110,-0.667675,3.143262,-3.195453,8.903261,-1.387406,2.226512,-6.659837,-7.939521,-5.004787,7.033861,-4.903849,-9.292869,7.934427,3.526481,7.749465,9.456589,-0.148684,-2.615424,1.529121,2.354669,-2.198472,-3.029141,-7.402814,-5.777681,5.302625,5.053921,7.025918,-1.155167,1.336840,-3.168569,-0.652685,7.065821,-2.304912,4.900558,3.053845,-1.036354,-4.872135,-3.847059,3.365150,1.950337,-7.140307,-9.928069,-0.607722,7.011727,-1.284449,-1.220925,6.612013,0.226463,7.449042,-7.156219,0.966775,-9.267369,3.663926,-3.642314,-4.644995,-6.480241,6.239480,-8.462157,4.425455,6.159119,-2.169136,-8.364564,1.376383,5.847529,-3.938172,0.903492,-4.187616,2.436351,-3.667914,-1.980337,7.664918,-5.358712,-2.871355,-4.715840,-8.121135,1.771698,4.513862,-3.259833,-3.142934,-9.615564,2.444961,-2.491520,9.162874,-8.463575,-3.246048,-3.810592,3.533197,-7.328645,-5.073666,4.755680,-7.804772,4.510419,-1.443178,3.616286,4.183772,5.534896,9.280350,2.996665,-8.007414,2.661559,-1.574420,-7.329264,-8.234184,2.915348,-3.339184,1.498207,-4.516747,-0.878102,-4.896898,1.621056,6.915449,6.402951,-5.687562,-9.505114,-9.546743,0.646237,2.435961,-1.159382,-5.135258,-7.883169,-6.461859,-7.471351,-6.997431,6.883619,-9.925399,7.378554,4.684065,-3.871770,9.035661,-9.652159,-8.112164,-4.847906,-4.714216,3.913362,5.698532,5.339314,7.965049,-3.836423,-4.705960,2.702720,-2.067335,8.503391,3.670500,7.472761,-8.606264,-0.460640,-7.998474,-3.434698,6.411355,9.542982,-8.205405,-7.797691,-0.435654,9.642312,-0.147190,5.893298,0.277185,-7.401052,7.742369,2.376007,-8.871425,-6.818122,9.720994,2.621660,7.976285,6.039092,1.076992,7.764068,-2.300193,-8.829303,6.541160,2.755175,-5.400915,8.474014,8.600329,2.646341,-4.652275,-8.711292,0.235334,-1.343905,7.521581,-1.079318,3.161057,-9.332142,-1.578514,-2.359440,4.192303,7.456100,-1.139308,8.517120,4.910833,8.994739,-4.728043,6.880162,5.500823,-8.478336,2.976010,9.619423,0.546830,-0.332223,-3.650103,6.823188,-9.028743,-1.166522,-6.784555,8.451227,-4.114118,7.149372,-7.962495,-6.633820,7.521067,-6.943041,4.849718,8.533017,-0.922721,5.248742,6.347560,-7.765006,7.174674,-8.463531,-9.425003,8.119935,-0.184703,0.889841,-3.582280,-5.175090,3.113033,-8.532305,-2.768361,4.529674,-5.835222,9.937590,8.987573,4.534553,-2.834487,-6.221454,6.335842,-2.272550,3.158708,9.249776,7.776860,7.621563,-7.326314,-1.047829,6.764462,6.018205,-6.892720,6.524910,-6.283879,-5.666895,-4.719822,8.111442,-1.212430,1.878144,-0.553878,9.838505,-6.841693,-6.904651,1.118866,9.624262,-3.884074,-9.683335,-6.548305,-8.816830,-3.194738,2.360221,-5.400154,8.647993,-7.732555,-4.840279,2.698838,4.915805,-6.877651,-0.017010,-3.636178,-1.881328,3.403250,4.170990,3.940516,-1.748299,-5.133721,-2.930254,6.305225,3.843248,1.777814,-0.147336,-3.310249,-3.486780,1.370445,-7.210921,9.640208,-4.175889,9.605236,-2.300721,2.370603,-2.271766,-4.231018,-1.716214,-7.490087,-9.204832,1.871269,-2.866475,-4.384431,-5.924634,-8.977312,2.808623,-7.157170,-3.982329,9.194290,-8.626711,8.914099,-4.992099,3.186580,0.935753,-8.919983,5.028474,-3.119811,3.728614,4.466407,-9.464104,-7.442477,3.857940,5.906620,-0.066507,-8.098633,-2.443076,-5.079061,2.408561,2.979626,7.056476,-8.083520,-9.951804,9.124866,9.773595,3.678868,-4.071206,3.762704,-6.482175,9.736624,9.179098,8.532690,7.163476,-4.234850,-6.784980,-4.877949,-1.116224,-7.834382,1.015500,-5.663551,-0.672781,3.174589,-0.670996,-1.070217,1.319631,0.498049,5.696985,-5.240418,-1.052941,-1.197833,1.360684,3.963568,1.247217,-5.931741,4.703021,-2.088070,-1.484402,-2.134096,-4.871007,-6.310508,-3.377653,8.805214,-7.351045,-4.360392,-0.641715,0.408047,9.508169,6.311100,9.465658,-1.582916,7.598477,-2.008947,-6.239076,-3.906289,-4.277567,-4.902220,-4.084935,-4.195586,-2.877831,-3.284317,8.381864,-6.963507,-1.053235,-0.146799,2.980151,-0.124633,1.898285,-6.574084,3.643404,-3.048312,6.790414,-3.909378,-4.119340,0.771423,7.727391,-3.475606,8.580997,-6.242944,-1.637295,8.230643,3.836970,-6.132644,7.086962,-5.993478,8.882511,-6.837636,9.631647,6.104005,1.233476,-7.079181,-0.910806,-1.932167,5.395430,0.897334,2.440702,3.366146,-2.408600,8.857531,7.702778,-4.223964,-7.433593,4.084723,6.818902,-6.046596,6.845749,4.790408,3.720480,-3.864406,-8.558950,-2.676299,-2.791768,-7.110592,-9.045797,-9.936723,3.233575,-4.951152,1.920331,-2.181824,-8.265147,-6.395268,6.634261,4.031461,0.089966,-2.662220,6.773808,5.284173,-6.888115,-5.773153,3.392222,-5.616580,4.337943,-9.478735,0.904104,4.811803,5.178206,6.728275,-0.032910,8.596749,-5.423513,7.630274,0.047843,-8.247850,5.635036,-6.939588,7.413193,8.155556,2.459521,-9.626212,-1.609170,5.883889,1.762359,9.366081,5.202961,3.044364,-8.775199,-2.348417,4.623072,3.755774,6.826610,2.449816,6.308564,-3.860703,-3.309851,3.287413,-6.675949,4.397348,2.358211,6.120337,5.090330,9.656753,-8.303572,5.658873,-4.443424,-4.567903,-5.900121,-7.561257,-7.248106,2.370522,2.754865,-5.708013,3.938327,4.321726,-8.700982,7.201660,1.279448,8.286477,-6.806769,1.161768,8.632947,6.344589,6.163159,1.382160,-5.498042,7.497996,6.617832,4.975568,1.585905,-4.192639,-4.008503,7.608310,-5.527459,1.934326,-8.093561,1.887556,-7.318548,7.335883,-1.550148,3.146541,5.145839,4.603931,-8.858798,4.604647,2.880871,9.975192,-4.654332,-6.384152,8.016404,3.299318,-4.270121,-1.264066,1.425300,3.598251,-6.712278,-3.458539,4.104543,0.273182,1.635397,8.134681,-5.591922,-8.623813,5.769954,2.178873,-9.976924,-8.373871,1.129127,9.257324,2.974857,-5.041446,9.229867,8.021209,-0.475226,1.998557,-4.694460,3.472869,8.919638,0.975042,-3.169856,-8.961689,3.958639,8.131139,2.654124,-4.207889,0.807639,-9.893200,0.344827,8.856840,-2.103740,2.389229,5.865608,2.650940,-3.928227,-0.389585,1.106113,5.144650,3.203501,4.891101,6.946339,3.592677,9.946612,-7.771940,-2.112465,-5.379532,-2.657120,5.349663,-1.458319,-7.881228,0.232863,9.108635,1.677299,2.071738,-0.711104,2.573963,-5.775547,-6.000799,3.163942,4.127719,0.784031,-1.731171,1.505381,9.010048,1.830855,9.817358,-9.688838,1.713766,6.579266,7.199881,-6.577222,-1.548307,7.354970,-7.202634,9.006467,-5.184034,7.691429,-1.927143,-6.726210,3.872201,1.700613,-1.657858,6.379115,-2.606366,9.481894,-8.383111,-7.843215,-9.039331,-7.563915,-7.224337,-9.185368,-1.693001,-7.981862,3.077939,-6.848556,-7.361273,7.019755,-0.812850,-1.422665,1.682998,-0.149516,0.011499,-8.267216,-0.505457,-8.523475,-3.170564,-0.070617,8.338229,3.763965,4.628052,0.633917,-6.029602,4.171379,0.651754,1.694393,2.578901,1.916813,-4.184503,-0.511550,-7.222173,-5.115767,-7.122834,3.007574,1.725805,-6.080834,-5.023934,-8.028249,-0.590756,9.654960,1.147681,-2.548138,-7.819092,-4.568140,-8.139576,-1.339712,8.543122,6.813410,7.474547,9.198034,-4.683554,1.230890,9.027977,5.170942,2.470470,-9.345536,8.896269,2.983606,-4.762581,-6.698876,8.545908,7.931858,1.712562,-8.685056,6.198291,3.066947,6.835820,-1.013911,-9.851561,-7.521017,4.980773,1.483935,0.835815,-8.415263,-7.137026,-9.985479,3.956049,-7.114681,5.151060,1.440657,1.599284,-1.323517,-5.696294,5.510504,-7.129123,-6.024538,-1.619952,-5.832392,3.090769,6.059821,9.066326,0.006111,4.134731,-5.638110,-9.329792,6.806384,-3.534974,-0.777337,4.082852,-8.385613,1.541641,2.428987,-2.569821,8.151547,-6.463293,8.505853,7.885835,6.347682,-8.033665,5.702697,5.372619,-6.345480,-3.759549,-7.868566,5.628278,1.882064,-6.998928,-3.646199,-6.044390,-4.341941,3.071992,-4.006334,-4.881462,9.099743,4.155392,8.960629,-9.921137,1.786172,-5.583291,-2.335004,-0.834560,-7.411396,-7.983812,4.265711,-3.843627,3.386248,2.940238,-0.423462,2.327418,-3.467834,-5.494973,-0.112241,-8.530374,9.811939,3.302372,-2.577479,4.371925,-2.649428,2.032209,-5.729003,8.816067,5.168088,-5.283644,-0.450746,-5.216932,-2.685834,-0.429618,4.559767,-0.993246,6.764307,-0.265777,2.088584,-3.559941,3.865021,7.166406,-8.139382,1.216312,6.650782,5.416264,-1.328621,8.367925,2.850641,8.757973,-8.675440,6.805500,5.868135,6.154744,-7.806308,8.872439,4.807151,5.409593,6.595098,-8.670495,-5.950926,7.444158,0.923082,-3.454921,-0.892019,1.121783,0.753978,3.021115,-3.984347,-1.214077,-2.194208,-6.075113,-0.731771,4.607196,-3.171186,0.519818,-3.805414,6.891072,0.993054,-2.213785,6.007530,-7.446194,-6.385302,-2.553157,-3.251818,5.057836,-4.125852,-9.889515,-2.139054,-6.381666,2.041085,3.796031,-6.060682,8.697923,-3.384013,-0.819353,0.308789,6.760012,-5.263013,-4.740232,-2.896487,0.135516,0.091104,8.040472,-5.177194,4.118369,8.668702,0.835565,8.152403,4.630778,-8.941413,-2.362886,-3.914947,0.583330,1.433699,5.688440,-5.512885,-5.515772,0.166787,7.227739,4.331049,0.780774,4.559244,9.246675,-4.106878,1.928194,-0.242641,-0.442264,7.608108,6.398781,-8.542496,-1.279782,0.007010,-4.529753,-3.150205,-1.420598,-1.497573,2.557746,-0.031397,2.635028,4.178167,1.672646,-6.030215,1.538076,-3.417823,-2.045382,1.072103,3.338829,1.557060,5.054864,9.224488,8.414678,-8.338081,3.982128,9.670257,7.037555,6.060973,-8.209214,-5.718536,6.912473,-9.531609,9.665818,-2.878799,0.197144,7.466552,-6.868747,-1.075295,-8.819212,-5.631183,-7.943735,-2.313327,-2.616116,-4.348580,9.070241,-8.921046,8.142819,-3.466836,8.984935,5.380366,-1.074153,1.314161,9.273286,9.942603,-1.808950,-7.055699,5.463755,-2.826679,-4.463730,8.716290,-6.755432,0.712158,-8.308257,-0.313932,-9.768184,-6.445938,-6.423278,2.871663,-7.516749,-0.104534,-6.951357,7.254876,4.300980,-0.596240,-8.388404,-4.985593,9.883132,1.817821,8.637145,3.059823,1.308617,6.972462,-1.633995,-3.241474,2.437067,4.018256,6.876101,3.382462,7.482474,-3.180618,6.492698,-6.320501,-5.431534,6.171377,9.850844,-7.129626,-5.382038,8.377353,-7.460368,0.348100,-3.368684,-1.954375,0.930834,-0.347310,5.442706,5.673576,6.213927,4.147269,4.931628,-4.356583,-6.212803,4.123668,-6.245667,0.993652,-9.387292,-9.643084,7.328670,-1.493015,-0.012594,8.694855,-9.803276,5.584228,-9.206419,4.430535,2.783717,4.076394,-3.565099,-0.855814,4.819304,-1.065775,4.706882,-2.592700,6.133904,4.714674,6.285432,3.540453,5.855734,-1.755658,4.368589,1.559785,9.344037,-7.726689,-6.039343,-5.369041,-7.397432,6.729689,9.703658,0.708511,2.979023,-0.669738,6.032425,-7.058055,-2.521760,4.428497,-8.573662,-7.957365,0.928973,-5.967624,-7.410657,6.751943,5.484907,-6.473890,-1.888200,3.620519,-3.977931,-6.229351,4.340095,8.303734,8.096950,9.100150,7.414350,0.799876,4.466522,-3.899902,-6.003303,-1.608703,1.293988,-3.807981,-8.083095,4.233419,-6.515663,4.054455,-2.361138,3.982282,3.297892,2.254607,1.162154,2.316152,-0.423813,-5.119272,3.209798,-6.348794,8.208348,-1.071736,-6.090495,-1.461962,6.755502,-9.188576,-8.208567,-7.222809,2.516254,4.178574,-9.864905,0.720697,-1.216804,-6.855175,-5.277489,-7.514724,4.151049,-1.886576,-0.254975,-0.259827,-0.436964,3.091293,4.051679,-2.759642,-7.301022,0.795033,-0.945745,9.417760,-6.403405,-8.437514,5.999651,-3.308550,9.421881,-3.410145,5.174825,2.107261,-6.932286,9.208346,-2.865940,-6.906912,5.199317,-0.463424,-9.937957,-7.943362,2.146309,2.781220,-8.764512,4.302449,-0.633949,5.342703,1.800044,9.222318,-5.700567,3.853991,-3.709635,2.071850,6.708935,3.651540,1.468803,-6.340823,-8.364772,0.755609,5.264835,-5.955148,2.560970,8.951028,8.699985,-8.050272,2.079479,-0.798278,0.121906,3.783743,2.168938,-9.704075,7.997090,1.740751,-2.142649,-3.999194,-3.953157,-5.006417,-0.865814,-4.683803,-2.399150,6.998326,-9.958990,-7.852228,5.729860,-4.368671,-0.940076,-7.957017,9.183799,-0.405291,-0.041607,2.336398,7.370651,-9.521864,0.709129,7.374931,8.836225,-9.926954,8.521356,5.129093,-7.282615,5.287638,-3.456656,-1.443795,-6.427208,-1.351461,6.759976,6.403303,0.202726,6.081938,-1.102635,-8.484969,6.203484,0.815383,1.824863,-0.624418,-2.888706,4.924180,0.925539,-1.290254,-2.937281,-4.798729,-2.368502,-9.210091,-8.449706,-7.852673,7.475108,-5.726426,5.633645,4.719323,0.354671,4.698400,5.874995,-4.312727,-4.922625,-0.333583,8.253702,9.489034,-3.437879,1.621363,4.209055,6.955977,5.850485,8.826783,2.056709,8.102292,-2.321197,-1.802710,4.553812,-1.417428,1.581291,-9.974397,-5.766417,-1.727979,-3.904528,7.827720,-0.342207,-4.716338,-7.441343,-2.846157,-9.378982,-1.949212,-1.162172,-4.854110,-6.598725,-2.198431,-5.020599,-1.450436,-3.359883,4.063314,8.709598,-8.254109,-9.729171,8.644263,-7.281675,-3.048938,9.995693,-3.217148,-8.228810,-1.827174,8.544293,-3.813551,4.070356,-2.356998,-2.489128,-2.986532,-1.805388,5.038238,5.567926,-1.695955,-8.359955,-7.840399,4.853114,-0.978390,-3.393165,-2.829933,3.742420,9.727975,-4.261008,-1.679835,5.705321,-7.605292,1.503442,-4.435861,-6.432809,-8.541545,-8.505886,-9.281020,0.436662,3.683688,3.938830,-9.408583,-8.003649,-3.433485,2.964368,6.630814,3.137081,5.739748,7.983307,-6.552807,-3.560817,9.408310,0.264061,-7.983616,-4.071759,-7.327320,-9.374810,-9.978710,-6.318250,3.460457,9.834022,9.710582,-3.743937,5.349775,-2.102954,5.346983,-3.461211,1.686716,-2.209716,2.962111,7.732580,6.614799,-9.447004,5.527309,-3.147232,-2.371735,9.130657,-4.726219,-7.759533,-0.876157,9.875301,1.432842,-8.636700,-8.826222,1.638830,8.517520,1.838602,-5.584399,-8.623758,2.604053,-8.282994,-3.135843,1.369397,8.424041,-5.969535,-3.416443,7.622338,2.291617,3.334620,-2.175476,3.956558,4.502582,-6.719626,-6.946654,9.158839,5.663242,-6.244929,-7.092228,1.197354,7.398844,0.131539,7.256711,-3.230071,-7.033652,-5.511928,-8.385794,-4.992008,4.452519,7.132128,6.450888,6.908467,-0.886124,-5.883940,2.254161,-5.998775,1.687116,-5.400131,-8.048441,6.140800,-1.026458,4.338332,-6.135115,6.569149,5.904340,6.108380,3.302428,4.768816,-9.665323,-1.695013,2.944370,0.681478,-4.151844,-5.618516,-6.036401,3.734104,9.292042,5.919923,-9.609590,0.023708,4.756197,-9.451194,4.150877,-4.780624,1.552097,3.558688,0.966410,7.112334,3.615397,-2.791790,-1.607489,-2.377191,-2.012871,2.328958,-4.062623,-0.127625,1.865294,7.012132,8.758285,9.292342,-5.009441,6.749745,3.316708,-7.650335,-1.268015,-6.623961,-9.244621,6.338361,-6.375867,-1.230822,1.848614,-8.594537,4.319388,-8.308047,2.048361,-2.806912,-2.351145,7.790165,-9.660217,-5.580818,-8.924507,2.295551,-2.250900,8.997848,5.364074,5.392516,9.669815,-8.358246,7.834667,6.535994,-7.610758,5.149875,4.445584,-4.149340,-3.569117,8.349345,5.411834], dtype = "float64")#candidate|6888|(4290,)|const|float64
call_6886 = relay.TupleGetItem(func_2132_call(relay.reshape(var_6887.astype('uint16'), [2100,]), relay.reshape(const_6888.astype('float64'), [13, 330]), ), 5)
call_6889 = relay.TupleGetItem(func_2136_call(relay.reshape(var_6887.astype('uint16'), [2100,]), relay.reshape(const_6888.astype('float64'), [13, 330]), ), 5)
const_6899 = relay.const([-7.550656,-5.998053,-5.060770,-2.396238,-1.771654,-6.610199,-4.041229,3.934293,-9.566158,-0.743731,1.832525,-7.858857,3.989180,-1.341266,5.482879,2.954285,7.103415,-3.359870,0.308339,-1.086296,-5.064837,4.657304,-8.243400,5.609640,-5.166366,5.990635,-7.873940,-4.807574,-0.210921,6.237838,5.092064,-3.478884,-6.565598,-2.810578,2.450250,8.824345,8.939761,-4.913034,-7.953768,0.980759,-5.673481,-6.713888,-6.736039,-7.323173,2.910978,-4.179156,9.369310,6.380984,3.426842,2.149424,-9.002886,2.456900,9.020693,1.458972,6.624288,2.077998,7.263172,-4.223869,-3.873636,9.776611,3.418618,-1.315105,-1.378037,-0.185180,-1.485538,-3.264176,4.203967,-5.930112,0.071343,-6.850937,-3.523472,-6.668163,1.986376,8.075531,-9.004621,-9.450996,6.159237,-0.133026,-5.291131,9.258483,-9.421451,-6.534885,3.233459,-0.411920,-7.742900,-6.395734,-2.160465,7.075229,1.635538,-4.030001,8.421204,3.176328,4.785492,-5.575322,5.989858,-8.045607,6.484731,2.014206,-9.829740,8.018713,-4.826420,3.233026,0.704324,-1.637743,-0.273830,-2.437120,0.520872,-8.333812,5.000779,5.350195,-9.172636,-1.539579,-3.582977,1.939017,1.796052,3.956258,-9.160618,5.772721,3.065934,-6.716552,-4.768956,6.814482,9.111050,-9.127515,-2.866802,1.555842,-1.293933,-2.063960,8.056924,8.174306,9.720065,-2.018454,6.740518,3.643856,1.208976,-8.606080,-3.758392,-2.237745,6.204890,-6.560590,-2.664042,3.996311,8.675522,5.590339,8.073276,9.478078,4.852548,-8.825592,1.460193,-9.700127,9.664555,-6.342318,-9.775788,5.248994,-2.254788,-3.199309,4.337689,9.033591,6.000959,3.457915,3.442553,9.457092,-0.578753,0.052621,7.334391,3.138578,4.892965,-1.448184,-2.349515,4.582807,8.360115,9.624864,7.402757,7.524782,6.750633,0.549294,-6.014324,3.935086,-9.180652,-5.934836,-4.765010,8.890320,-3.345015,-6.159820,1.931329,0.997692,9.305299,-5.434820,3.987205,8.075583,-8.617215,0.286022,-1.656654,-3.732115,4.142008,-4.420637,-5.029727,3.212494,-2.014178,2.271008,-4.555695,-3.034551,7.001277,-3.908061,2.124945,8.311877,9.690844,-5.745877,8.814849,-2.261772,0.344444,9.882497,-6.856358,-1.914704,-6.823014,7.491205,-5.138884,-5.491014,-5.664096,-0.223527,-6.476376,5.643227,-0.447034,9.805083,-5.952593,3.304948,7.631527,0.495362,5.532103,-9.187842,1.127441,-3.958803,0.018848,0.191446,-5.096704,0.278643,7.675727,-0.359104,-1.016774,-6.725432,9.614846,9.282845,-5.236143,2.892828,-3.185902,8.008496,8.073794,-8.388452,-8.932445,-3.067442,6.535559,1.081027,-3.968184,1.412909,-9.046967,-8.899866,2.274158,-1.397536,-1.677284,8.441009,5.044919,2.120008,2.827340,6.676707,3.408622,-1.429364,-0.090875,-8.534706,6.671589,4.567280,3.914104,2.284883,0.568605,-9.933117,1.668485,7.409723,-0.080983,3.356801,-0.362815,5.143538,-6.848685,-4.449721,1.462428,-3.027056,-0.585828,-9.773561,6.224450,-0.090142,3.541545,-2.256505,7.099869,3.128840,-4.971591,0.269771,-5.554392,8.918969,-3.008158,6.302872,-8.319309,-9.069496,6.015934,-6.370666,-0.139724,-6.649399,2.626425,5.235239,-9.356206,-8.534706,5.211132,9.131436,-7.837904,8.737475,-0.753561,-6.533651,-5.862370,-6.689301,-4.191613,-5.244668,8.530225,-1.481887,3.289990,2.393707,7.297804,6.044691,9.048421,-8.813572,6.825799,-7.518781,-9.571255,-3.828058,4.471710,-0.211030,6.015935,4.932811,5.552587,5.494465,4.187346,-8.863884,-6.885082,3.790139,-2.286787,8.320829,4.083003,-8.062089,-4.233050,-0.828680,9.836852,0.772218,9.327217,9.550399,4.318504,-0.449114,-6.378763,3.808060,-7.569489,-9.547590,-6.349105,-0.657785,-2.988512,3.994439,5.697000,-1.337901,-1.473274,1.562490,-9.810982,0.831167,4.530080,-6.378122,-1.278436,-9.232488,7.203116,-3.327610,-2.021668,7.983074,1.104362,2.857808,4.136839,6.121114,-1.029001,5.671669,3.899567,-7.618230,-5.317877,-3.132305,-5.982271,7.293026,-5.825281,5.668931,-5.848072,3.421869,3.671099,-4.590257,-6.908804,-3.827653,-6.878237,-1.844422,-5.410335,-6.864148,8.110195,-7.125679,0.632403,4.460304,9.263832,-8.297230,-6.268478,5.089444,9.457888,-6.943490,9.522737,-3.924077,-0.483317,4.520987,1.059682,-1.885190,6.411444,-8.640949,-2.198870,-6.715269,-3.668968,-8.130529,-8.859097,-7.878668,9.619928,4.649547,8.954589,9.750090,-1.464528,9.147097,-2.599094,0.313243,-3.919961,3.653604,4.921867,-6.959277,-6.793116,-1.999701,-8.851425,-9.057777,8.068667,-4.706090,2.600164,8.678074,-0.129439,2.351648,-7.587812,-1.665182,-5.675781,2.467373,0.159383,6.394850,-9.991304,-5.964213,-2.068980,5.150302,3.614063,6.785351,8.501765,-5.646135,7.804898,-0.669692,-0.027192,-5.590874,-3.358780,6.327351,7.336417,-6.093020,-9.536442,-5.835076,0.809754,9.387035,4.911774,-7.744210,6.589160,-4.975845,-0.042535,-6.234376,-0.758994,-0.213982,-2.565979,-3.763035,-0.857578,-4.371425,-3.229009,-7.255055,-2.827428,-1.961730,-8.021761,-9.271483,9.973506,-4.711317,1.805853,5.361675,1.093148,9.963712,1.495192,9.822651,-2.704146,-3.467437,-7.506273,-1.119641,-9.234499,-2.663403,7.013457,-1.023645,1.357708,7.432593,3.962566,-9.850316,-3.557822,6.256659,-2.057808,2.761784,-6.433367,0.316958,-2.548899,6.195540,-0.240886,9.298968,-1.622178,-0.756267,-5.219964,-7.124415,-5.702796,-7.286275,-2.219682,-5.111497,-3.895862,5.357953,-5.972657,3.898174,2.628090,5.049554,-9.036986,3.175421,7.335712,7.431882,3.131576,9.567834,-2.964734,-2.217494,8.941153,8.694693,2.627816,-8.795884,6.392063,-7.708995,-3.830950,-2.055259,5.103621,8.836716,-3.704601,-3.604541,8.062174,9.703276,-1.057987,-7.256717,4.004471,2.095845,2.758519,-7.961834,-2.851566,5.539387,-1.039227,3.311430,5.327619,-4.779584,4.292146,-9.494465,8.522544,3.087801,5.478129,9.491822,4.401198,0.342297,6.632997,-3.712546,1.989603,-0.060805,9.816274,3.114190,3.815228,-8.981886,-0.627914,6.441969,4.719984,4.159306,-9.919842,7.126884,-0.995642,-8.212216,-3.330923,1.160267,-6.475892,8.272810,7.190274,5.900234,7.450692,-6.799523,-1.397823,2.347580,-4.114594,-3.773911,6.002902,-5.695525,5.705333,7.322590,4.406183,5.916123,9.591359,-8.436680,6.351580,1.680763,0.064628,-6.652825,5.225294,1.122884,6.686720,-6.057061,0.125243,-5.131767,-5.246230,-4.965749,-0.450086,8.764797,8.826382,-2.536724,4.449200,8.325406,8.676615,-6.505067,1.338644,-0.128511,-6.099718,2.913160,-2.858156,-5.437832,-4.620398,-4.474801,-4.464029,-2.972494,8.080935,-6.946824,-2.898853,-1.936177,8.474958,-6.112338,-7.033591,0.809968,1.831507,6.727472,-6.750663,-1.780123,-5.244025,1.935624,3.018602,-3.069194,6.920037,5.662847,-6.919770,4.450625,7.479990,-5.628116,9.876528,-4.447460,7.403867,-7.247851,3.723856,-4.672869,8.255862,-1.550805,2.050808,-0.474799,9.217544,-3.020047,0.238149,2.804412,7.091632,-3.488296,-3.674259,8.956293,-2.852636,5.838991,1.928648,-9.011071,-4.896350,9.393185,7.282677,-7.438580,9.322015,0.944237,-6.833757,1.286676,-8.615343,-9.877558,-3.472960,-6.292723,2.366965,-8.176519,9.476351,-5.258205,8.055482,2.519902,3.976704,2.246305,-4.228668,6.813600,-2.101615,-3.609675,-5.456871,2.048868,6.561509,-3.261696,3.087229,4.377732,1.056427,-3.840225,7.698741,9.604442,9.432340,1.502001,1.260854,6.468039,-2.289740,2.666467,-6.219560,2.123087,-3.568464,1.236747,5.118953,5.649501,-5.833117,4.067483,9.600011,-9.790409,-7.164026,8.751233,-7.581636,3.344575,-7.601194,2.367991,6.647880,-5.764404,-7.326193,7.598693,-1.992685,-3.028962,3.414632,-1.185807,7.053571,9.712240,8.158641,8.637053,7.301940,-0.686205,7.804467,9.759743,-2.650853,8.320753,6.854015,-6.949643,7.524087,-8.471643,8.311492,5.082577,8.122455,-3.857648,9.555111,-8.591797,-5.134698,6.063247,-1.849936,-8.956354,-5.868127,-2.860172,-3.018304,-5.257489,4.499617,-8.180025,9.889357,3.853448,7.186104,1.686816,-3.093571,9.939003,-8.153203,-0.349019,9.931047,-2.160103,-7.359800,5.995784,0.533393,-2.098416,-5.514423,0.303413,3.339803,-3.226595,-7.925626,1.292967,0.990293,5.370934,1.286932,9.361906,-1.489255,7.081129,-4.733399,-4.051855,-1.591684,-2.146092,6.777300,-1.060366,0.339027,3.328680,7.487949,-2.521294,-3.901827,-5.095988,3.509672,-9.276809,7.127750,8.410743,5.964797,-9.896858,-6.352388,-8.579606,-3.456970,-9.925812,-3.559409,-8.290677,0.431409,-8.755613,-7.071660,3.494094,-0.289195,-9.362285,8.986819,7.402596,9.169700,-0.342001,7.173100,3.242806,-0.378691,7.807110,-9.891450,-2.581370,-4.143455,3.151226,0.962204,-9.134077,-9.968167,-2.768190,-1.621696,-2.615634,2.294657,-5.841421,-0.175947,-0.446044,2.314950,9.913943,0.798407,8.476241,-7.659800,4.824974,-8.011796,-7.276120,-5.393338,-9.880956,-1.542267,-6.407954,-5.749808,-8.279205,-4.253012,4.908773,-0.812780,4.486402,-3.163616,4.237906,5.687556,-0.832571,1.521659,8.454450,6.648880,-1.814348,-2.554146,5.637882,5.550493,1.777802,0.373456,-4.569391,8.125514,2.839254,-9.056616,3.521377,6.919020,9.182308,-3.443229,-3.901528,4.099904,6.939079,0.522983,-8.896709,2.369946,5.695018,-4.507530,-9.766937,6.007707,5.200614,0.208622,-6.000108,-9.979156,2.422257,-9.817397,8.689921,-7.030883,2.467131,4.601331,8.485372,-2.857541,4.176300,-9.794184,-9.809639,-2.864517,7.146934,-1.638826,-0.498965,-5.703221,1.527379,-3.554903,-2.935160,-3.234934,-0.158311,4.426298,-9.701971,-9.542306,-0.180859,5.623954,6.178414,-7.121760,6.992396,-2.151588,2.521270,3.046985,2.660265,7.263443,0.212237,1.557521,-9.679857,3.767601,-3.281917,-8.986540,-2.248179,-5.515059,1.928087,-9.795124,5.566628,0.263233,9.307786,-5.542742,-6.583593,-9.316327,3.349229,5.271376,-9.521967,-8.503530,1.146406,0.427780,-6.035792,2.135849,-1.154867,2.812943,-2.891764,6.186884,9.915646,-0.537514,2.770924,7.476953,-0.316376,-3.009487,1.673486,-7.768515,-4.993087,-2.826778,9.521318,-5.561608,-8.893726,9.695489,-1.982000,-1.895467,-0.084934,5.178561,-3.620279,-9.404557,-4.715050,1.494639,0.272094,-8.318557,-2.000318,4.660542,-8.784290,3.985093,7.230793,5.720283,8.534329,1.127941,-5.092151,-3.725170,-2.740422,3.900185,2.967730,-0.718795,-2.269861,-6.385995,-9.334682,-4.609511,-4.146858,6.713594,2.503473,5.470490,-8.542416,-2.878163,-1.598610,1.427493,-6.404878,3.422476,-1.311553,-3.803899,-4.872491,2.477176,-8.028593,7.004676,7.859685,-2.015835,3.151251,-8.887207,4.204991,-5.971580,8.914805,-5.404497,-8.221153,9.241910,1.231260,-4.314695,7.103783,-8.201460,7.914143,-8.908410,-6.717015,0.236113,-7.501644,-1.239998,9.647102,7.279878,-1.581074,-2.922267,3.280850,5.407980,9.397697,-8.001074,0.355846,6.563455,-4.967105,-0.324149,-9.916532,-5.217609,2.261485,-8.117325,4.273972,4.607149,8.705182,4.901749,9.244542,-4.548409,-3.963782,0.219638,4.672027,-6.712736,-8.871765,5.463000,8.139567,-3.681140,-9.810433,9.429612,-7.889893,1.864176,-1.725978,1.509771,-7.214165,-5.523912,-3.174097,-1.819277,-8.622544,-1.047336,1.290467,-2.936909,9.103754,5.527613,1.109388,-2.894327,1.833061,-6.929505,-8.315890,-7.636324,6.039433,8.721855,-2.565344,6.239247,-1.839568,-4.649857,9.437911,-9.214093,8.978908,-7.825727,-8.065486,-7.674096,9.781034,1.314534,-3.153215,-8.755942,7.764203,-5.535562,5.748797,-4.238520,5.001207,-0.865750,4.924688,5.021402,-5.810480,-2.341196,-1.858819,5.521426,7.968223,1.776893,-7.041603,4.120802,4.130249,5.845217,3.412779,4.198367,-2.943614,-4.855032,-1.425227,-9.003201,6.897024,-5.691787,-2.613979,0.894696,-6.170854,5.115463,-6.006200,-2.747950,-9.588564,5.645585,-7.914983,-4.135317,-0.118268,-8.641368,7.887100,0.416735,4.926579,-0.573038,5.271703,1.890812,8.874813,-5.334364,6.412603,3.433195,5.310513,-8.653774,1.632956,-0.688221,0.876701,2.990252,-8.050175,1.044708,-9.465444,3.396412,-2.946365,8.722899,5.621073,1.475666,2.983009,7.794156,1.113523,-7.155948,-2.819416,-7.312048,7.718446,-7.158370,9.272306,-6.736667,-1.200836,7.107410,-4.466360,-8.687290,4.938447,2.265702,-0.283788,4.881477,-4.103256,1.408737,-4.322048,-8.652190,2.791720,5.991011,-4.500059,-8.458238,5.505322,2.297146,-3.266936,-0.043093,-0.167027,-5.928360,-5.616513,-2.823125,6.837389,5.994780,-0.332078,-1.626087,5.730857,-9.723996,4.521818,-4.627874,-3.397687,-2.812414,9.778971,-5.649898,-5.796487,-8.416240,-2.577260,4.619393,-4.672680,-2.201180,-9.012793,-2.443980,-4.120032,-9.928585,5.549797,5.836975,-1.944718,5.088814,-8.488241,8.029044,-0.681744,1.144515,7.076730,3.981570,4.314050,-4.554710,-9.239775,3.102745,6.446572,-5.379323,-8.705008,-5.267404,1.649520,-9.652265,-1.464153,2.230854,-8.412499,8.087176,5.867519,3.668761,-3.039634,1.493758,1.169754,-8.323266,-1.120281,5.037885,-3.805515,8.855689,3.033539,8.430664,-0.177103,6.262953,6.554355,-6.873188,7.637684,4.689235,7.113967,-0.562810,-8.668506,9.342289,5.208542,5.364081,-8.926270,5.494115,2.834895,1.925783,0.911479,-2.936613,-5.144003,-9.240621,-5.161147,2.197649,-3.117071,-8.079598,-0.930618,3.448340,8.114796,8.252155,5.553368,2.375779,7.717600,-9.272375,7.883061,6.672457,2.877572,2.475678,-1.636700,0.877700,-8.137756,6.449172,1.459414,-8.741646,1.076858,1.250725,9.434627,0.444099,8.611992,8.414654,-8.972589,-9.788574,-1.548754,-4.134923,4.042892,6.797198,7.242215,-5.236528,5.265963,8.856487,1.764973,-4.374687,-3.409269,7.417737,1.813554,-9.971312,-4.744099,-3.628841,3.001195,9.005958,-7.804921,-3.663840,9.002872,2.816780,-8.781077,7.142817,1.340358,-3.670161,-2.435520,6.173317,-5.854074,3.713872,8.833526,-3.485637,-6.629311,1.456604,-0.104365,4.262221,-9.303009,1.550795,9.522063,-1.742849,-2.913700,-9.020796,2.664610,-3.764474,-9.399056,-2.227259,6.674295,-5.193710,-9.423462,0.719498,8.912864,-4.805937,9.816545,-2.599916,-4.789513,5.220772,1.171052,3.580529,0.026324,6.314073,-3.712259,3.618815,-6.122912,9.593903,6.841111,1.419553,1.979331,8.486690,3.451338,-1.435912,-9.433739,-4.593817,3.459971,-8.398782,-3.082026,-3.213945,9.059924,-4.434773,6.844231,-4.793854,-4.495131,-0.676994,7.538276,-7.006241,4.868241,6.459885,-6.033025,-0.491558,7.999344,1.782415,-9.973249,-4.616712,1.792766,9.560520,3.495199,-3.569989,5.172417,3.862415,-2.073515,-9.848024,-5.975089,2.368477,6.945562,8.652725,9.148386,-2.555563,-1.432050,0.784727,-3.068057,1.524341,5.581625,7.343809,-6.819824,1.475822,9.512459,-5.041448,2.936721,-1.988732,1.918700,-1.664828,-4.929548,-6.964431,4.285091,2.099197,-0.233144,2.089658,-9.642841,5.362171,-7.243849,0.144656,-6.966652,0.023581,6.779011,-4.282679,6.892060,5.853080,-2.753376,4.280274,-7.753175,0.597212,5.647866,-2.733877,4.349766,-9.013699,-4.164619,2.689091,5.994073,2.224796,8.238498,-0.032380,-4.352232,-1.914063,9.476633,-6.968861,-3.771237,6.988919,0.928924,5.912413,6.737466,-1.353522,2.868573,-9.765019,-7.800660,-1.412909,2.839291,4.172482,-9.590141,-9.818134,3.328622,6.000214,-5.921576,2.485729,-2.677699,7.571100,-6.347117,-3.335676,4.489962,-7.709647,-1.477051,7.579131,4.186534,9.383699,0.799582,-4.540255,-0.533968,-8.723626,-4.250267,-1.144515,6.048141,-4.220957,4.844229,6.772374,9.922115,9.421150,-2.302202,5.597605,4.303428,-5.497992,3.650425,5.860155,-1.921375,-8.240851,9.874535,-0.644883,-9.578184,-6.359327,9.380388,4.666498,0.501787,-4.336364,7.752044,-8.685176,-5.062962,9.551366,8.536956,0.006658,5.653284,-5.503000,3.930468,1.552560,6.708614,4.815224,2.222525,8.547430,4.882046,4.191235,4.005532,1.134155,-0.357538,5.652407,8.576747,3.011827,1.785980,2.769906,-5.923961,-9.734080,-7.522923,-8.432988,-2.165019,8.729439,2.320680,6.925411,-2.702828,-9.904377,9.892797,-3.161670,3.043624,8.545172,4.860640,3.366236,0.275638,1.711162,8.323219,-1.586113,2.784975,-1.880635,-5.853214,3.723328,-5.151613,4.536617,-8.181599,5.619594,7.130041,-4.937761,4.104311,3.655649,7.116201,5.112208,-1.040065,0.623528,4.263190,4.741173,2.144274,-7.666879,-3.586503,1.586993,1.417775,-4.669590,-4.565747,7.380443,-4.469608,-6.628659,6.197811,2.188659,6.046699,6.122595,-7.070404,-3.975315,5.301778,4.669153,-5.431348,-5.207391,9.732522,1.531232,7.181732,-3.413832,3.520023,-3.220068,-3.474753,-6.395904,-3.824321,-6.366576,-1.634573,-6.800457,5.413468,-0.969327,-0.894563,2.114690,7.705086,8.061921,8.271906,0.040878,2.727489,8.456021,5.719625,3.480472,2.403683,-5.312169,6.674589,3.521723,-4.028997,-2.138594,0.548709,8.468853,-1.821626,9.572387,-1.119669,-0.543209,-7.884461,3.821006,-1.429079,3.714712,-3.450195,1.578070,-3.909689,-0.776626,-6.770168,-7.333528,-5.826999,2.932443,-0.651001,-8.934469,5.085517,-0.566852,-0.887323,2.985380,1.046919,-9.570685,-4.349602,7.465559,-3.157683,0.343769,-4.971224,-5.224303,8.155469,-4.167530,3.164110,-1.926647,4.408841,-5.521048,-2.696051,-9.346202,7.104493,1.390393,5.781950,-6.678925,-1.485819,-3.843196,1.318456,9.028988,-1.705194,3.225304,-9.196893,-1.551788,-6.536705,4.131172,-6.237625,-7.308303,-2.038965,9.758038,-3.021950,-5.516615,-2.220135,-2.470022,2.918958,-0.593641,9.312282,9.091162,-0.674322,9.038205,1.724801,1.438275,2.070308,6.712303,-8.509373,1.558142,-2.067736,3.462344,-0.564858,5.655078,-8.133065,-7.342509,2.160300,3.021573,2.034994,-2.741870,-3.391743,5.391287,-7.894806,9.556101,7.937446,3.582161,-8.258428,-6.045492,-6.808604,0.990077,-5.780339,-1.181485,6.617138,7.739152,8.780369,6.069815,2.843971,4.155008,0.523970,-0.959204,8.193798,4.889363,8.618606,-2.423085,3.971007,-2.409554,1.447244,6.680178,-0.289969,-2.506824,-0.215240,1.325043,-9.533459,7.147363,-9.101760,-7.364223,-5.975956,2.077577,-0.329151,3.041342,5.058831,9.984684,5.870606,-1.531734,4.591934,9.130104,-4.994031,1.446081,6.831055,3.613179,6.993421,1.454258,1.358071,5.237032,-4.251718,5.731302,-0.981808,1.039349,2.704303,5.774975,-4.178254,-6.685833,-9.794621,9.704596,5.283123,5.946792,-2.605392,-9.365788,9.916074,6.727628,-1.718811,-0.024103,7.648855,-5.539917,0.530002,3.428879,-2.547729,-9.817926,-5.016189,-3.180003,-4.096523,-7.126052,-2.723346,-6.329868,-0.528461,-6.685452,-0.544888,5.728065,-9.574095,-8.191732,7.274926,1.682657,-4.264913,-6.453200,2.275266,-2.149115,-1.061150,-7.732003,6.939209,0.177107,4.530832,-9.646449,-5.412951,0.760755,-0.467455,-5.309219,-0.269507,2.270123,3.128491,6.327311,2.516105,8.394720,-0.631713,-4.982603,-1.478767,0.314140,9.748004,-4.428924,6.833833,-4.130095,2.612769,4.505572,-7.882998,-1.633139,9.272233,-7.720476,6.999016,-9.242690,-8.509216,3.496900,-8.696455,-7.798113,0.985024,0.255403,-8.399959,-6.861433,-5.891913,1.482942,-9.401926,9.736192,1.763521,-4.885066,3.727283,-1.737309,-6.631735,-5.689912,-7.254581,-6.142988,1.211734,-0.324503,-7.575955,-2.536923,7.362891,6.407692,1.328920,6.179674,2.147788,-9.437012,-5.174373,-7.868794,-8.449596,-6.974097,8.566442,-8.931780,-3.398593,-1.505188,4.972167,-1.697452,4.848037,7.858288,-4.934922,2.969779,-0.121503,-4.510189,5.004147,7.019277,0.875831,-4.185467,4.473348,-9.376638,-2.419789,-5.243992,8.142231,-1.314040,-1.307179,8.398791,-6.254070,-3.177458,-7.853463,3.556912,6.330174,-9.414791,-7.491512,2.080574,4.834228,-6.073406,8.575327,-1.636242,8.043104,3.240569,-7.450457,-9.938684,7.975090,5.202675,0.137898,1.987752,-2.599727,5.017289,0.874511,-2.583797,-8.432430,-1.939571,8.460232,-2.375371,2.128852,-5.413418,3.641249,-6.640930,-7.946793,-6.311627,-0.810013,-2.129145,5.233246,-3.093300,5.579539,-8.448869,0.878539,5.310636,0.709761,9.745093,0.503165,-6.077062,-4.834246,9.289908,-3.619154,-1.597944,-5.273727,5.002191,-4.931114,-4.378700,-7.277752,-0.094443,5.356738,-0.706140,1.112894,5.052629,-7.731123,4.877538,-3.178767,4.086163,6.964868,4.030814,-1.510140,8.521277,-8.138825,-3.030795,-9.557843,-4.333760,-7.220182,-1.462118,-1.636077,-2.950984,0.931549,4.997765,1.977040,9.161209,-7.112507,-6.107575,1.603982,-0.527342,8.726536,4.370263,1.482822,9.057369,-1.015577,7.227250,8.496228,1.757730,-1.086420,-3.965901,2.114308,-9.077021,-3.373868,3.181922,-3.653099,-0.090127,-1.995070,-9.054511,3.618390,-1.864649,3.687380,7.735022,9.934876,-3.953472,3.995125,1.314973,-1.541486,4.448238,-7.289701,-7.035070,-8.475702,-4.730815,-0.552832,-7.852380,-2.584538,-5.909602,-7.666868,-5.892891,-1.710997,3.162323,1.346464,0.876118,-0.605677,5.340989,2.515575,-2.100596,-6.400509,-8.457020,2.061063,-1.710483,5.307417,0.770181,-4.519087,-2.603930,-9.993025,2.655215,-7.622117,0.746999,2.338792,-9.964356,6.213807,-1.153411,1.925576,-5.044881,7.545033,3.262111,9.032749,-3.222273,-3.970253,4.018903,2.472826,0.337741,7.764047,-0.114619,7.359968,9.462681,5.115239,-4.709076,-0.688212,5.958185,8.739075,5.320996,-2.088219,7.972701,-6.436626,3.207086,2.980743,2.365376,-0.203724,6.213271,-6.027573,-6.940566,-3.197684,0.217445,5.843698,-8.689330,1.100525,-5.585948,7.950975,-6.711704,-5.198936,5.169626,-3.066723,-8.943892,2.066407,-8.680806,-3.341356,6.340396,3.695484,9.385430,-0.312033,-9.009534,3.163352,6.457267,-9.992252,-0.750319,1.101993,-5.488186,5.119386,-3.580675,-5.542617,-0.611661,1.055917,4.655997,-8.224353,-5.452100,-0.496530,-9.684415,7.242453,-8.832886,-5.222332,-9.649935,9.813777,9.213118,6.509142,2.790691,9.537777,-7.056347,3.345477,4.688395,-9.230671,-4.637431,-6.653310,1.987399,-3.040500,3.496166,-8.061044,9.456224,-7.739474,-8.578337,-6.434802,7.542595,-2.854521,8.244074,0.654905,1.318369,-8.080284,-1.558668,0.475508,-8.242595,-1.095332,-7.590864,1.068876,-7.884131,-2.336203,7.483292,-8.943420,-4.104633,-5.133672,-8.257046,2.231691,7.131327,-9.059276,-3.185676,0.376236,4.377083,5.563693,2.766536,5.052840,-4.982175,-3.099539,1.776148,4.418085,0.487965,7.983686,8.297055,-6.508899,-5.784835,5.531738,-2.056712,3.007516,-5.669928,8.959857,9.765418,7.641042,-1.819545,2.602235,-9.829431,-9.322235,-7.420097,9.360065,-2.287008,-1.900558,-3.954995,2.210620,3.670771,0.625753,2.403358,3.294089,1.755834,7.881131,-6.450731,1.945181,2.311067,0.607208,9.883720,2.549005,-1.398302,-3.645915,6.302692,9.759053,-0.224584,-7.509840,5.070802,-8.964890,-7.021447,-9.323407,-1.861089,0.995668,8.900289,8.013908,-3.117337,-7.211515,2.618727,4.300590,9.224469,2.402643,4.111999,0.318979,4.250501,-9.308516,6.574683,-0.881957,-7.340896,9.544883,-4.594368,3.984906,-5.087073,1.101410,-4.996729,-1.376782,9.527982,-1.527151,-2.138377,2.827050,1.512530,0.053529,0.954907,3.267104,-8.781440,5.378581,9.723912,0.097367,5.945203,3.668766,0.894486,8.083999,2.362532,-5.087979,6.764174,1.276470,1.398387,-7.475890,2.428186,-6.667733,-2.243932,-6.859184,-0.326223,9.770792,0.483908,-0.378132,1.965897,5.452079,0.327478,-9.339061,-5.423178,3.412462,-9.601554,-0.173716,1.503817,3.718122,-1.001243,-6.957454,2.345428,-2.775841,-2.624445,-7.485383,-4.967188,1.208007,2.500485,5.623213,9.664729,6.374622,-7.058978,0.926632,-1.180247,6.861524,5.038307,-8.491326,-8.382463,6.834386,4.958819,-6.525479,0.746798,6.123365,1.534630,-1.157696,0.134607,-6.961187,1.212619,-6.242358,1.155493,7.298784,6.629060,8.878725,-6.967811,-9.688048,-9.017976,-4.848075,-8.023921,-5.287122,-9.245182,3.249161,-9.931200,1.230365,3.519620,-6.051945,9.603469,5.578817,5.838545,-0.071420,1.910076,5.041647,5.570684,-9.872696,3.223420,0.248770,2.122777,7.204154,4.373904,-2.501454,-3.150156,3.749270,-5.596168,-3.622571,9.358338,3.016485,-3.489119,1.623800,-3.577299,9.336829,-3.463443,6.654350,8.579927,-9.589611,3.031351,-5.716021,3.760434,-5.207808,-1.490640,8.436054,4.179254,0.781376,6.927364,-3.495999,-5.627143,3.248130,-8.289669,-0.760149,2.704467,-5.651615,1.091634,9.132787,-3.564039,-0.551353,-9.496081,6.414951,2.548356,2.142658,0.811814,-8.551726,-0.050030,-1.691598,4.343411,-3.912127,7.739842,3.010237,9.026928,9.917214,-9.325447,1.269505,3.252365,3.711490,3.428918,4.861490,-0.534522,-3.720275,2.648284,6.505842,9.436935,-2.845579,2.401904,-0.957757,-7.993595,-5.044417,3.647487,0.793796,-0.115907,7.779634,-8.754220,-7.016962,9.208050,6.198333,-2.746737,6.032989,-0.664246,-6.198754,4.935338,6.776058,7.833185,3.034106,8.294385,5.589301,7.436271,0.451455,-2.859139,-1.406773,-3.407839,-6.699200,-8.517057,-2.191156,3.558815,-7.652518,9.361874,-1.575421,-5.186414,-5.156709,0.699601,0.082756,-8.314372,-6.506438,7.570062,-6.221779,-4.320745,-6.746880,-5.461325,1.892052,5.239881,1.836789,4.781848,0.804053,6.932736,5.377781,-7.194195,4.519722,6.871853,2.539310,-0.840392,-3.589145,-4.063857,8.714961,-7.694866,7.013217,1.138535,-6.564831,-7.951139,-3.528770,2.659403,-4.993194,-8.839605,9.658820,4.982577,-6.619707,-1.607423,-0.164421,1.518551,-1.752163,4.191859,-1.127468,-2.162323,3.020507,-1.009094,-8.856866,-6.360086,5.782622,-2.284090,-4.300938,8.361524,3.896249,-8.008306,5.994924,1.542057,7.974603,6.408083,4.555991,-7.190398,-5.971635,-6.764001,5.239039,-2.441514,-8.872402,5.255917,-4.430514,1.322018,-1.875846,-7.135028,-7.587081,2.822570,-8.274324,0.293314,-6.209145,-9.707997,-5.364056,9.187701,5.955919,7.510507,-5.359702,1.174285,9.630854,-2.845230,-9.229880,1.346665,9.828420,-2.729350,6.618523,1.181101,9.994955,8.566961,4.270329,8.828285,-8.390179,-8.629179,5.150053,9.219824,-4.066717,5.986221,-9.649354,0.783625,7.527219,0.257066,4.258379,3.071533,4.478664,5.958386,8.970802,0.130610,6.528762,5.536560,8.008009,4.956506,-9.951465,-5.937429,-2.051845,-1.177409,2.578268,-7.565400,9.586732,-5.698347,-8.148870,3.726503,-7.144929,5.600715,-5.920453,8.033116,-1.645512,9.554928,4.521118,7.972864,-1.269435,2.935477,-3.753323,-2.517077,7.030380,-9.355926,-2.780918,-6.185377,-4.090086,-9.649745,-2.997790,2.012297,3.073631,4.938188,-2.324388,-5.681938,7.176341,9.108624,5.541601,2.090749,-5.998162,3.107513,4.333802,2.493752,1.830232,-7.132625,8.080248,-9.849891,-4.765252,9.210256,9.999806,6.494890,-5.270226,-4.109429,2.902850,-5.374335,1.195485,-0.418203,0.507580,-9.357204,-1.785728,-9.777575,-1.831956,-9.192112,0.042214,-9.204247,2.276373,0.151197,-3.347821,6.492287,9.205378,5.456353,8.310312,4.359067,3.978290,-8.825511,-4.612013,-6.666004,0.745748,8.029556,-0.581381,4.738037,-9.033036,2.793977,-8.937637,-4.386858,6.619051,-7.171649,5.450563,4.492923,-9.540358,-6.462000,7.834064,2.662281,3.007765,9.672229,-0.912750,3.394871,3.476528,4.746406,-3.342736,0.178463,2.151987,-8.958851,4.591634,-0.390414,7.877633,-8.774606,7.958125,-9.914293,-0.688845,-0.828419,-6.022446,6.257244,8.026186,-9.269012,-5.793578,5.449842,9.797073,4.126817,4.121852,-4.177566,-3.953661,5.676533,6.249147,0.712481,2.329657,-2.479631,4.224264,6.846203,5.543861,-1.114771,9.336905,1.754158,-5.622986,5.495743,-7.996893,-1.429374,-9.931823,-3.693759,5.084162,-8.769661,-4.550151,4.163193,-9.960512,-7.165331,-1.427903,-4.316861,-2.487846,-8.495708,-5.437202,-2.130973,-6.066777,0.844562,3.998682,-0.128823,8.472943,4.642487,7.262304,-1.535558,-1.005745,5.723543,6.580606,-7.557308,-9.732137,-1.549676,3.673672,9.654211,-1.334394,-3.805422,7.448671,-9.659985,1.453069,-0.033740,-3.116811,8.632840,2.276558,6.772589,-9.464022,-3.475994,2.150194,6.454932,6.893769,-1.333176,9.263556,3.806873,4.766228,-1.161379,-3.742042,3.577123,7.787574,2.794392,-4.096826,9.596433,-3.379029,3.120057,0.058700,-2.093285,4.221234,-0.044485,-2.681417,6.750158,0.399781,-6.596440,-8.548996,1.899276,-2.073859,-6.584086,5.849573,1.341384,8.715745,8.913410,0.483190,-7.040352,-4.753636,-3.652983,-2.779658,-1.831812,4.670062,0.844696,1.402284,6.361998,2.472218,-4.874841,3.693856,0.900068,-2.695864,4.523726,-8.116516,-1.666762,-7.051993,5.932705,0.029127,6.406981,4.477949,-6.529408,4.764386,-0.237197,-1.216274,4.429396,2.928662,-7.621380,-3.425768,6.135130,4.588067,2.723210,-7.693717,2.115652,3.267795,-8.672950,0.798453,6.277144,-9.483432,-6.301839,-3.648046,0.647786,-6.746892,3.125816,9.148475,4.605391,-4.632601,9.125687,-4.169653,-9.145628,8.035624,-0.231733,-9.523249,4.813446,0.529912,3.804987,3.222455,4.780080,-3.200670,-8.062917,-6.289585,3.692914,9.507990,6.949658,7.864866,1.040573,4.091065,8.476027,0.646514,-8.779948,-5.003563,-6.841304,-9.320870,5.383460,-3.566337,8.480622,-4.287135,8.481423,2.455971,2.564655,1.059989,1.855343,-1.935045,-8.743980,4.986323,-2.180791,-7.052146,8.890741,9.365380,2.629228,4.367837,-6.890699,9.071263,8.072891,-3.579644,9.249090,0.267727,-7.902095,-7.242255,7.313692,-7.541277,5.694395,-3.976448,8.174037,-4.486281,4.407472,8.834990,7.777396,0.302858,0.922572,0.033810,3.485311,1.974319,-4.996532,-4.789237,2.724821,8.719373,7.084650,-7.623440,9.624469,-2.964134,-3.082470,-5.519820,-9.926952,-6.390570,-6.476692,6.175035,-3.668686,7.070551,-4.524000,-3.700194,-2.173083,-0.950579,6.377854,8.026551,8.999975,3.923665,0.114039,7.486694,7.231428,-3.775378,7.566603,-7.036469,-8.046926,-9.281017,4.389061,6.872145,6.865336,-2.730533,-8.236075,1.227853,4.650667,9.196355,2.046157,-1.885911,-4.202420,-5.277800,-1.683067,6.002851,-1.147579,7.489572,-3.647790,-0.843360,2.601879,-5.481306,-8.037507,0.168996,-5.172999,-5.917498,-9.327910,-4.102548,6.741940,-5.530344,0.778782,1.308176,-1.821240,-4.577776,6.629029,-0.446340,9.054618,-0.245514,-2.884946,1.880522,-6.099698,-5.325886,-6.628282,2.312175,0.010900,-0.992672,1.338991,6.583748,-8.905716,-0.836808,-2.783979,-9.452156,8.194578,5.825795,7.999567,-8.716067,-8.354817,-0.766115,0.960780,4.618140,4.424323,-4.563245,1.617529,-9.001894,4.946978,9.293462,1.879996,4.777481,-8.813716,3.347670,9.399744,6.149635,-8.939714,-2.981918,2.593596,7.798323,2.063806,9.811246,8.726408,7.736518,-4.630346,-8.907744,-7.700512,-7.271916,-3.120016,-3.740233,5.144525,8.347355,5.355439,2.434897,8.052948,-6.684835,-7.257461,0.349718,7.854686,-7.854415,8.791825,-9.048117,-7.322794,-2.786663,-6.134585,-1.202879,-4.030480,0.480692,-1.916118,-8.234842,9.234987,-3.460881,-3.336854,1.674350,-4.350604,2.248505,-2.119883,-6.115044,-9.119223,7.016668,6.776586,-7.362155,-6.532126,-7.735533,3.980102,-1.901538,5.122880,-1.236461,1.059070,6.631286,-9.471820,3.014148,-9.642052,5.893541,5.867452,4.693200,0.806651,-1.916196,-1.384559,-4.864684,-0.306069,-0.291689,9.768482,9.851401,2.581885,1.218741,-4.984754,-9.990882,-8.292591,0.241728,9.343371,-3.284379,4.453625,-1.286575,7.301966,7.316603,6.313056,9.112445,-7.863738,8.703009,-6.899441,5.637209,-3.819894,5.291621,-9.788164,-5.008176,-4.470034,-0.527460,8.361717,4.153047,9.629828,-2.410777,-5.497851,2.893660,9.899897,-5.688529,3.131131,-4.562293,-3.461328,-8.850716,-2.243030,-8.771714,-8.894558,-5.575855,4.016864,-9.124548,-2.892373,0.644963,3.896059,-9.794888,-2.634049,-2.160118,-7.258369,9.883904,-0.440693,9.203562,-8.332165,8.676722,-2.561526,-9.824309,2.916814,-7.904345,-9.431167,4.340056,9.761795,-4.809387,-9.564978,0.913247,5.547489,9.374506,9.816987,-4.036024,-0.954147,-0.477786,-4.944183,-8.378910,9.845270,3.784121,3.725168,2.634801,-3.684448,-2.766829,-2.167113,-6.421173,-5.534395,-9.055766,-0.646088,0.839728,-5.886450,-3.996969,-1.358555,4.582663,7.407494,4.986638,3.298286,5.709844,-5.750048,-7.695458,-3.751278,-7.109281,1.005458,-9.640081,-2.570040,-2.953284,2.494931,4.696147,-9.263364,1.165738,6.154075,-3.089257,-8.696595,7.128399,9.950178,8.072674,-4.392997,-8.562344,-4.662747,3.239908,-8.169205,-4.760135,-3.193616,8.824672,-4.921341,6.864339,-5.375798,-5.631728,4.463847,4.365283,6.467226,-2.868330,8.605027,0.054818,8.360762,-1.227016,1.415878,0.418711,-2.685582,-5.757786,-2.504690,-4.169209,3.677212,8.016527,-9.381914,8.457292,1.214094,7.688219,-3.165301,7.141862,-9.819033,6.106500,-2.717008,3.505512,1.900014,3.766289,8.279912,-5.333101,-1.176788,-9.680887,8.967540,-3.787696,3.897469,6.264055,0.990324,-1.316920,-1.856142,7.784468,-8.190117,4.947439,-3.568053,0.400032,-8.150824,-0.622103,4.229927,-6.333336,-1.692297,-8.279765,-0.242969,7.434686,-8.698415,0.951626,1.274300,8.418673,-6.079177,5.813555,4.146967,-2.351028,0.423325,-6.922433,3.061948,3.669423,4.764637,-4.008165,7.336779,8.571257,3.084299,-8.299362,5.040766,-7.783975,-1.150980,-3.127886,0.070098,3.190380,2.443478,4.509337,-1.680665,-1.959439,-2.555078,-2.525229,-1.803483,8.637330,-2.609382,-3.506578,6.681943,7.122356,5.070038,2.450840,9.237486,0.503914,-1.633665,2.102648,4.220945,4.479478,-5.530903,2.059629,9.055389,-0.798208,-0.665963,-4.367539,-0.694740,1.119859,3.334863,-9.897799,7.450865,-6.974091,-2.465053,0.241331,5.232590,-6.867643,-8.660690,0.669974,-3.281650,0.883262,-2.656966,3.448284,-6.096445,-0.154629,5.176610,-1.048778,-7.603608,1.268266,-4.999826,-3.141558,3.945472,-8.034972,-3.732186,0.191123,3.580854,3.261336,-1.082285,-6.041290,9.594101,7.093720,8.261999,-0.782348,-0.268988,0.231867,-6.983683,-2.360598,-4.868334,6.641861,-0.713952,1.255393,2.241045,-7.557919,2.237167,-8.549283,9.032496,-7.526710,0.022286,0.561917,-9.038828,0.180393,-9.472787,-8.854553,-4.943730,-4.106868,-7.652281,-9.581902,-0.784286,-4.687333,-2.380279,5.004709,-4.646018,-7.710013,-8.665823,3.321935,-9.001981,5.427065,-7.851955,3.298911,4.386227,-6.570632,-6.119272,4.209021,7.606764,-5.095273,0.144722,1.384060,4.939768,1.250273,7.740157,-4.685606,1.277968,7.810130,9.963488,-1.618838,-3.904657,5.500092,-1.830781,2.243765,-1.608523,3.182920,7.666223,8.772492,-3.543101,-8.587890,2.454762,-1.712719,-9.312382,-0.187976,-8.932879,-6.830629,8.650447,2.454095,8.683784,3.543049,3.612986,2.767064,-6.242687,1.632085,6.970622,-8.631625,6.322567,-1.938485,-6.783658,7.205380,0.720638,7.374678,7.488297,-5.414977,-0.316480,-9.439635,-2.362806,-6.855481,-0.188836,-4.884631,-1.185947,-7.394454,4.491101,9.364318,-7.576706,-0.692317,7.291799,-0.971906,9.131085,2.013954,5.615689,1.791077,0.256423,-1.204573,5.620496,9.155369,5.423855,2.897791,-7.521433,2.365845,-7.807800,2.533826,1.186738,-4.405217,-1.744872,-3.425079,-6.980297,-6.873725,-2.024380,8.536449,7.026122,2.064432,1.704479,6.969760,6.102089,-1.303767,-4.550334,6.261025,8.525454,-7.436922,2.015620,8.884065,-1.559148,7.328083,-7.112695,2.186042,-3.809802,7.441478,6.041224,2.194407,1.512464,-2.732592,5.059709,2.023443,-8.517744,6.349573,4.615773,4.105128,-4.404334,-1.039638,8.546631,-9.764052,-1.298077,8.421044,-6.355085,-4.848514,-9.778752,0.315888,9.622702,2.581923,5.536461,0.686078,4.189478,-7.838870,-4.920219,1.052988,-6.964323,3.027419,8.250228,9.261957,4.111279,7.092960,-4.133010,-7.919067,8.938330,6.422328,-2.681329,9.429080,7.230974,6.372368,-0.958099,-1.758909,-5.968691,0.534453,-2.121258,3.686898,2.680846,-4.238112,5.264234,4.791339,-9.997446,2.389326,9.128128,-1.740100,5.347123,-3.356613,-8.152588,-8.089330,-4.453627,-6.145711,-5.300735,6.412507,-0.282768,-2.111878,-6.985738,0.123421,-9.158073,1.976955,0.285157,1.871711,6.237679,5.410179,-8.000892,-6.367567,8.333893,9.355291,-5.170736,0.948821,-8.324484,-7.103656,3.495027,8.848331,3.534111,-7.950755,5.666400,7.364244,6.495726,-9.823906,-9.737797,8.256241,-6.330638,-4.452741,5.127651,4.640997,2.982172,-0.791665,2.870500,-5.150673,-0.735761,-5.213615,-2.180526,-6.929517,-8.601059,8.889388,9.169468,-3.864770,-7.062631,-7.804029,3.022991,0.203377,1.243775,7.307630,-8.926374,1.941234,-6.385503,-5.963029,0.225737,2.921248,6.313388,6.904918,0.204044,-2.783608,-9.890520,7.242622,0.516996,-4.097661,-9.330755,1.921936,9.594432,9.735533,-6.824241,5.735834,-9.822862,0.303898,4.710575,-4.823550,6.230947,-9.865096,3.390971,6.919583,5.293226,1.715791,0.759248,-3.603934,-8.567476,7.757383,9.073644,-2.384189,4.424912,0.351076,-8.836347,7.649035,3.751877,1.985961,3.381250,2.835052,-9.703191,-6.604762,0.341551,9.338129,-5.107449,6.763551,3.704881,4.115857,7.703857,6.437373,-8.604824,2.535537,4.340128,-3.210998,7.911487,8.376073,-1.157705,-3.717056,-4.169073,7.058603,-0.941009,-8.934101,7.793639,-4.576633,-2.420334,-5.006907,-7.687469,-1.842219,8.080983,-0.186149,-2.788866,-2.311201,9.692447,2.164350,-8.385417,-7.199649,5.196812,-3.099526,-0.241316,1.876549,2.972142,8.471521,-9.305187,0.112082,-5.149604,-0.694768,8.373886,4.251037,2.424732,-7.191277,-9.206447,-4.149002,1.568820,-0.187900,8.937651,-1.924963,5.312584,-5.649935,-4.252105,4.642796,9.533524,8.311336,2.129767,3.560490,3.032971,-3.350308,-8.606494,6.617665,-4.130501,9.817620,-4.064243,-4.062148,0.494404,5.081710,-9.530580,-5.480875,-3.362390,-8.861959,9.328999,3.693157,4.496881,-7.426164,-9.984057,7.337887,2.143085,5.575730,-4.678366,2.721203,-0.536785,8.023971,-8.412897,7.831713,-3.819165,-5.885747,3.662552,-3.340963,4.925477,3.428689,5.615451,-1.023189,2.493427,-9.722761,2.179919,-4.237164,-1.348812,-5.816812,3.396015,8.887240,9.700381,2.795194,5.182612,2.301833,-1.139302,2.843919,4.140599,-2.785988,8.759259,0.647856,3.471902,-7.080392,8.358604,-4.713125,-2.998298,-4.937166,2.164915,1.170230,-0.737803,3.880628,4.503383,-7.703553,2.806613,8.630691,5.587094,9.713257,-5.734651,-7.702260,6.926689,2.062673,-4.483063,7.169574,4.805994,3.438577,-0.197532,3.049556,4.767377,-5.849987,-2.367721,6.102512,-9.531693,-1.662083,-5.506034,2.181000,1.894380,-6.242900,-8.496727,0.673484,-5.460869,4.392871,-2.257583,-6.436008,-6.673809,-1.909897,-3.438023,-7.292455,-3.440080,-8.076347,7.134366,-0.918257,-3.119206,7.900534,5.337180,-9.543759,4.271949,-2.053092,-3.757066,6.861465,2.628830,-0.468325,1.094048,4.304486,9.747746,-9.343182,8.394810,-8.455368,7.469233,-8.302273,-0.668274,-3.923844,5.085241,5.889454,8.575146,-4.218981,-5.131403,5.243897,-2.372910,-5.877164,-0.641105,-5.140590,5.308833,4.971787,-5.208140,4.467420,-6.029879,-4.614442,-6.891700,-3.478063,-9.744779,8.751738,6.501330,-6.811570,0.245502,4.045566,-1.578507,0.187499,-1.476822,-0.148444,-6.846988,-0.975212,-4.239646,-0.520494,-4.470914,-6.059524,-6.946687,-4.067324,-7.943703,4.800358,1.192502,1.462370,-0.857211,6.266495,7.421214,-7.621794,-6.052920,0.641092,8.019142,6.114209,-1.887305,3.498982,4.114575,-1.178841,-1.194618,8.076746,-4.907611,6.194596,7.895777,-5.600186,1.095072,8.228477,3.455252,-7.446046,-1.123064,-8.156011,3.114832,7.257749,1.682906,0.396008,0.117540,6.050558,5.240497,5.478717,-8.647174,-0.417159,-2.578246,5.871966,-0.409165,-7.191119,8.399411,0.012411,-9.270370,-7.325289,-2.455294,-9.985597,-4.977024,8.288470,-4.035294,6.854295,-3.441831,-8.901103,1.785087,-8.503426,6.286673,-5.305051,-5.600358,-0.166366,5.808950,-7.265744,-4.658076,0.445343,2.377372,-8.247333,7.133963,-4.360919,5.568311,-5.827885,-8.139435,-4.114068,-1.430355,-6.034284,-6.755678,4.244020,1.283339,4.366088,-7.811098,3.923494,-8.546756,-0.470894,0.379644,0.594085,7.149796,9.412196,9.283176,-6.281945,-1.696686,-9.222451,5.458543,-9.749830,1.770394,-5.003999,7.639762,6.970032,0.607942,8.489976,-9.731185,-6.609441,3.642881,6.495945,5.943420,-2.806437,5.554554,7.051296,-0.909228,9.982497,0.399174,-6.620725,8.580233,-7.527433,7.861183,1.031684,7.773378,3.295777,8.925134,5.890603,-4.537711,9.864254,-5.726251,-1.976044,-7.197488,-9.134249,7.614708,-2.579114,3.879864,-6.734315,6.746332,-8.153157,5.175003,2.401713,1.155655,7.691690,-5.544370,4.073313,4.985736,4.416519,6.972205,-7.514590,-3.612222,-2.383861,1.141638,-8.280668,-5.411552,6.860974,2.023640,0.454303,9.111328,-1.148829,9.995279,-7.528854,-5.874381,-8.920562,-2.332406,-0.330438,-2.652888,-2.970389,5.094534,-4.221370,7.383352,4.748252,-3.761727,3.342393,-4.465624,2.849737,2.689060,-8.199266,1.083094,-9.560680,0.585227,2.289935,9.260066,-9.171829,-9.073884,-7.654751,-1.137681,-2.496639,-2.298017,2.006088,-1.310568,-5.214027,-2.060356,0.287766,-9.922794,1.760196,-6.656073,4.210279,-4.988560,2.326427,-3.798302,4.870050,7.899803,1.276410,9.888494,-3.319447,7.753400,-9.128547,-0.392927,0.017304,7.125527,-8.040925,2.844003,9.628050,7.712234,0.012369,-3.437025,6.660364,-3.241875,-9.655436,9.205930,3.425162,4.811680,-4.288082,0.654890,-6.762529,1.578758,5.137945,-8.454076,-4.690426,6.950579,0.818927,-4.275363,1.692836,6.145135,9.291058,7.515235,3.533982,-1.469920,-4.378072,-9.982952,-4.862733,9.074931,-7.839897,-1.922167,-4.573128,-4.820591,2.419169,-7.167232,-9.477857,-7.098173,-9.209187,-3.045002,3.246524,4.318037,8.366758,-5.588110,4.245107,0.280879,-1.481045,4.134504,8.303682,-4.232024,-7.383266,7.053512,6.671649,-8.532345,1.101845,5.060066,1.357990,-0.060957,-0.807546,-3.052153,8.527197,-7.612674,8.756243,-5.399749,1.341083,-7.774928,3.743662,-2.176210,3.539988,-2.813687,-2.043332,8.459739,-6.899384,-8.178913,4.896420,0.220425,-4.837145,-5.165048,5.691225,-1.485207,0.854818,-7.940432,-7.008306,8.179261,-7.907071,4.880500,-2.533127,-3.716516,-2.593416,2.655262,-2.316937,-9.278438,-9.330126,-1.941028,4.978841,1.643015,5.587004,1.405199,-1.462636,-0.485493,-9.898898,8.603918,-1.877971,-6.418651,-3.924324,-3.525305,-3.807860,0.199680,6.940375,-9.098220,-6.775731,-4.524421,4.062624,-4.189644,-3.261093,-8.775153,-8.161814,9.973265,-7.352512,1.287267,-2.972374,5.070277,6.582969,4.282402,-6.858468,0.600051,1.032365,3.912500,-0.952395,7.418718,-7.805085,7.996123,4.598508,6.466080,-5.786599,8.287306,1.865836,6.457230,1.286368,9.419223,-2.483634,7.533037,-1.631284,1.055015,-6.356378,-4.697676,-2.081490,5.324955,-3.520971,7.762581,6.130976,0.484195,4.047001,3.346806,-2.703743,0.635652,-8.838616,-4.283985,3.181418,6.161246,-5.902535,-1.104325,9.932445,0.336350,-2.598483,7.198456,1.903567,-6.742022,7.686558,8.661179,9.781763,9.664977,0.318449,-1.898362,3.283695,-3.551226,2.153314,-1.383259,-5.981871,0.399873,8.518131,2.441284,0.449685,4.676142,9.792907,-5.703298,8.433583,-4.652947,-4.813125,2.458443,-5.293178,5.715782,-7.528807,6.621512,2.709399,-0.129668,9.148937,6.454514,1.942433,8.257013,-3.713448,2.126021,6.303246,-8.082772,2.203415,9.318863,-1.261239,2.548964,3.885199,9.894997,7.297510,9.965047,5.849952,-3.701430,2.316700,-6.737436,2.208694,-4.032214,5.040563,-4.877995,-9.069135,5.365374,8.123876,-0.718704,4.859290,4.029274,8.708990,5.201518,-0.400318,4.805658,0.301014,6.128039,-1.540680,-3.491514,-4.381088,-5.523306,-1.185677,7.035981,-4.936992,-8.227377,-6.337330,3.348857,-9.513738,-3.001976,-3.862214,9.293654,0.709624,-4.552208,-6.129577,-5.542122,-8.283382,0.504968,-4.559424], dtype = "float64")#candidate|6899|(4290,)|const|float64
bop_6900 = relay.less_equal(const_6888.astype('bool'), relay.reshape(const_6899.astype('bool'), relay.shape_of(const_6888))) # shape=(4290,)
output = relay.Tuple([call_6865,call_6869,call_6886,var_6887,bop_6900,])
output2 = relay.Tuple([call_6866,call_6870,call_6889,var_6887,bop_6900,])
func_6911 = relay.Function([var_6887,], output)
mod['func_6911'] = func_6911
mod = relay.transform.InferType()(mod)
var_6912 = relay.var("var_6912", dtype = "uint16", shape = (1, 2100))#candidate|6912|(1, 2100)|var|uint16
output = func_6911(var_6912)
func_6913 = relay.Function([var_6912], output)
mutated_mod['func_6913'] = func_6913
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5730_call = mod.get_global_var('func_5730')
func_5731_call = mutated_mod.get_global_var('func_5731')
call_7052 = relay.TupleGetItem(func_5730_call(), 0)
call_7053 = relay.TupleGetItem(func_5731_call(), 0)
output = call_7052
output2 = call_7053
func_7069 = relay.Function([], output)
mod['func_7069'] = func_7069
mod = relay.transform.InferType()(mod)
mutated_mod['func_7069'] = func_7069
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7069_call = mutated_mod.get_global_var('func_7069')
call_7070 = func_7069_call()
output = call_7070
func_7071 = relay.Function([], output)
mutated_mod['func_7071'] = func_7071
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7213 = relay.var("var_7213", dtype = "float32", shape = (9, 11))#candidate|7213|(9, 11)|var|float32
uop_7214 = relay.atanh(var_7213.astype('float32')) # shape=(9, 11)
func_2132_call = mod.get_global_var('func_2132')
func_2136_call = mutated_mod.get_global_var('func_2136')
var_7221 = relay.var("var_7221", dtype = "uint16", shape = (2100,))#candidate|7221|(2100,)|var|uint16
const_7222 = relay.const([-7.267904,-9.771134,-7.085130,-9.053695,-6.312905,-1.445860,-4.863195,-7.942691,6.110601,7.174678,4.059063,-8.338046,-8.003311,-0.456765,-7.113459,-4.310329,7.147604,7.255413,6.172842,2.382740,2.867991,7.416967,-2.252836,-8.969866,7.190527,6.731377,-1.794568,-3.712267,-7.096457,0.647295,3.359801,2.230172,-6.597895,-1.046789,0.019545,2.841663,5.929028,-8.014181,3.419762,-2.686825,-4.708503,5.654128,3.659930,7.591816,4.932769,-1.324220,7.934518,4.499654,4.089630,7.041057,-8.071792,6.607183,-3.931717,7.862950,-8.201221,-8.330656,3.773258,-4.661098,-3.134144,-9.360536,-3.240795,-1.329347,8.226850,4.804473,-8.466017,0.303207,8.509100,-1.409832,-4.002192,2.880414,1.928619,-4.997029,-1.935418,-2.548803,-2.412899,-6.398598,6.416315,-1.585634,-8.933448,4.757039,2.382155,6.986894,-8.638305,-4.367090,0.694182,1.998345,3.132480,-2.573794,-5.854981,-8.741436,5.341224,0.244817,-6.168404,5.478384,8.885307,5.251565,9.634687,-2.073561,-8.282389,2.422563,-6.193216,2.883494,-4.895827,7.010680,-6.647291,4.386627,-0.892225,-3.067509,2.715349,-0.049290,8.571106,6.077828,-6.995435,-5.001600,-1.514871,0.793599,-7.640587,-1.339427,-2.515868,-3.295000,-3.076717,-0.653854,-1.091417,7.044900,3.386472,6.793563,2.713331,3.330356,-5.502015,-3.252899,5.901360,7.251564,-7.286478,-9.402270,-1.494887,8.225677,9.042956,9.746813,5.348188,9.729437,-1.164589,2.743732,1.237423,-2.711485,-0.806731,-5.690274,-2.460789,0.078048,2.254299,7.422802,-0.638914,-8.887451,-7.942242,-1.756522,-3.681761,-0.760424,-9.651814,-0.182341,6.947894,3.979790,-2.973463,5.272938,2.220353,9.655969,5.229029,-8.944002,-4.549911,9.777267,3.782635,-9.322413,5.938792,-7.473934,-0.568545,0.316827,6.850148,4.550152,-6.601062,-5.744700,9.198342,-8.054426,-0.730823,1.423967,-7.131234,-8.057899,-5.532627,3.031392,9.618293,2.767749,2.675942,8.391156,1.975575,-0.468962,-0.144864,0.546622,-9.706698,-8.864470,1.929718,5.644791,-8.675868,1.024029,-4.393316,-2.412707,-6.119412,5.973884,-1.106699,9.834097,0.037734,5.908244,-8.266431,-2.583414,-0.215036,-3.704689,-0.033811,2.608556,3.959610,1.416219,-6.438039,8.320925,9.506860,-2.915779,-4.788035,8.973989,0.264996,1.618728,3.847961,-4.962573,-0.095439,0.362874,6.951311,8.084624,9.675831,-0.592053,-7.240967,6.381910,4.570960,1.072506,3.526537,8.574855,6.234958,-3.001027,-6.323561,-7.794485,7.228623,1.643949,1.361207,1.664307,6.240159,-5.802702,-6.762728,2.580698,3.241682,5.768110,8.655834,9.953362,7.462557,-3.642296,-9.433302,-5.945997,-4.511307,-2.694225,-6.285372,9.054168,-2.120133,3.350049,2.132217,-9.889717,1.171465,2.560483,-7.018493,3.872929,-1.959270,-0.095157,-9.138258,0.547289,-8.196189,-8.747803,0.404520,3.423175,1.150436,-3.574269,4.149045,3.209970,-4.823117,-8.614531,7.163330,-7.191002,4.228787,0.893686,6.329880,-8.836372,-7.151822,-3.294273,-8.998992,2.857187,-7.803690,-5.035454,-5.764525,-1.409569,-1.549483,-1.950516,-3.284832,-2.092491,4.234925,-7.876053,-1.712337,-4.420112,2.971960,-6.712011,-5.598745,-2.921012,-0.066029,8.290401,-1.774355,2.359111,-4.057075,4.389973,0.444735,-5.861686,9.736290,2.720528,8.916050,-7.648251,0.782168,3.563654,2.174413,-0.091408,-7.026440,-4.454581,-0.237899,-7.566201,0.534441,0.388255,0.739779,9.063210,-2.105676,-3.601530,2.474784,3.264243,6.733702,-0.114460,-5.679055,-7.123065,-9.739851,7.802294,9.195761,9.602761,7.442540,0.241257,-9.144146,8.223271,2.486972,1.030714,1.953530,9.217122,8.879547,1.513388,5.576004,-3.729056,-5.868752,-1.315901,3.727623,0.634747,-9.289119,0.669104,6.606915,-1.470321,-6.372374,2.447598,-3.332775,7.402801,0.030533,2.970809,-8.838145,-4.496548,3.980791,-3.710041,0.223016,-0.682173,-1.769216,-3.809503,-1.840060,9.890392,-0.431427,-6.535974,7.483754,-2.452679,-4.211884,2.048638,-8.582428,-3.057427,-7.421323,-5.192581,-3.075526,-7.037894,2.377379,-9.013323,1.653349,-1.924712,6.581971,-6.060894,-8.450104,3.151948,-6.135927,-0.438228,-2.002911,-1.842527,7.538100,-1.135057,1.703615,2.618877,-3.145207,7.776022,9.383277,3.873187,-3.068282,1.732199,3.430635,-5.332745,-2.166209,-5.264407,3.992904,3.673765,6.701388,-1.105947,-7.481112,8.390186,9.648284,-8.839052,2.644573,3.985356,7.345179,-0.654142,5.845903,-3.328841,3.650660,1.540402,-5.140209,-9.897735,-2.318220,-9.764264,-3.918754,1.774631,-5.958688,-3.460768,-3.406614,-1.054530,-4.919299,-1.612389,6.907766,9.787889,7.122728,9.362012,-0.649501,3.722005,-4.118293,7.946249,-7.640284,-3.347803,4.973591,-1.498926,8.896099,4.228572,9.252015,3.958910,9.068525,-0.196509,8.103672,-9.887120,5.112829,4.244240,3.465687,-8.960341,2.883036,4.429168,1.494866,-3.130112,-2.098438,-7.637008,7.514647,-2.225425,8.952655,2.838557,-9.665552,-9.384164,-0.027376,2.399677,-2.410659,4.508132,-4.676252,-3.710248,-1.889744,-4.166370,5.558953,-9.664731,6.659746,9.079151,2.083024,9.293084,-5.261913,2.170573,7.013716,-6.227806,-0.981618,-0.063876,-8.969573,-6.487274,4.598940,8.907720,-3.324133,-3.613807,-8.674203,-7.640821,-8.848496,0.533973,4.703243,6.187735,1.970908,-4.983996,7.151560,0.628464,-8.673577,-1.341759,-4.872598,-9.461923,-7.141989,-0.926211,-8.934121,-0.780474,8.139350,6.281447,8.744569,1.423220,-3.870741,-4.855193,-1.979398,-9.124203,-4.408047,5.587588,-6.867787,6.626187,-0.592762,-6.814006,-2.382467,7.647448,-4.447259,-2.206712,-5.845386,2.521840,5.667567,-3.968648,9.773543,-7.406674,-8.090701,-8.999462,4.605083,7.786134,-9.369036,-9.293231,-6.724043,-7.630930,-9.875310,-7.975556,-2.897710,-9.063111,-4.440567,-0.256723,0.980337,5.572104,-3.669039,-6.313194,0.648064,1.005800,5.540419,-9.527725,9.803122,0.092567,7.501758,-8.067459,9.508640,5.886764,-0.157292,4.743531,6.516515,9.229721,-8.922403,1.396206,3.116571,1.071874,4.161622,-1.915488,-9.403426,-4.125108,-1.466432,-5.534960,1.627254,0.386432,8.325853,2.862976,1.543405,-3.594790,8.176324,5.886329,-8.245126,1.731780,-8.997191,-5.074660,9.499144,-2.971563,-7.040310,0.098086,-1.343962,2.121992,0.672807,-9.862059,4.170693,6.279570,1.217030,1.681140,8.083097,6.463954,-4.978256,3.095176,-6.587022,4.156891,-5.988029,2.542870,3.639210,-9.000993,9.872083,6.302619,5.442376,3.453092,6.188626,-2.322196,-7.500685,-2.939818,6.762472,-0.676369,6.302335,-8.266574,0.374656,5.282005,-2.635121,2.223382,-2.702865,-7.498881,3.804086,-4.207529,-2.907546,-9.240764,-6.455444,-2.071515,-4.646233,-1.287309,-6.965956,8.858063,-5.061201,2.981066,-1.458605,-4.179441,7.925504,-3.880454,6.888074,-8.487941,7.207359,-0.978082,9.415570,4.071145,7.390980,-2.136790,5.209537,9.366581,-7.819527,-4.842230,-8.780967,3.814077,-8.495489,-7.567936,5.729134,4.024610,1.455730,-5.276816,-6.362153,-0.890928,5.327392,-3.990911,-2.128734,-0.595073,-0.101740,1.416352,-3.799291,-2.359569,-5.140015,-2.919374,3.698567,-5.409459,0.445836,-3.865133,2.335922,2.468201,4.025581,7.534924,-0.133771,-4.501346,-2.387762,0.581368,-6.978566,9.087125,-9.730224,-3.191530,-1.550510,1.786172,-3.688600,7.615801,-2.163550,-8.481651,-4.432899,-6.122795,-6.198913,1.410235,-0.022055,5.839769,6.854814,-9.996875,-9.137219,9.619309,0.629297,-0.363220,-4.829708,3.863537,-4.145403,-4.023331,9.790399,6.095653,3.223000,6.329022,6.351905,2.783560,8.837253,8.577300,-9.980733,-3.434543,4.861733,8.345465,5.724638,-5.573057,1.237764,-2.219800,0.830100,-7.017470,5.150593,5.457404,-0.943699,9.732154,-2.956638,7.141856,2.919481,-1.386164,-5.880767,4.701995,1.847956,3.465864,-8.750404,5.723695,-1.461907,1.995085,1.469696,-9.602493,3.961570,-9.845009,-0.224031,-3.396620,6.848032,-5.828211,8.877036,4.431463,-6.665632,3.326577,9.458246,-2.621914,-1.747192,7.831632,-5.307188,7.621343,5.323717,5.544700,7.788857,5.109185,1.876593,-8.223180,2.027075,2.167375,-3.118159,4.603659,2.000571,5.459779,0.446757,-8.473973,9.812664,5.704230,1.287817,-2.857825,-6.268619,1.642509,-4.489713,-0.991039,-8.909260,1.928516,-3.009666,-4.597518,-8.952143,8.316813,-0.782280,-5.257720,0.615241,-8.983710,-0.715919,8.548773,-0.877253,-4.288798,-0.363750,6.431569,-6.372875,-0.684780,4.417965,5.638562,-4.090117,6.883774,-9.593833,-8.805316,3.707404,-2.182299,-8.136596,-4.535056,-7.111920,6.188203,-7.293389,5.543281,9.168271,1.499861,-0.231540,-8.713833,-2.377977,1.037248,8.519369,-0.028189,-9.665823,5.926571,8.919954,-0.816154,-2.896525,-5.383303,-5.148321,-6.909919,2.633403,-9.231572,-5.007740,4.034687,-8.614736,9.950478,-6.890584,-4.654635,-3.846434,7.598217,7.065525,2.823643,2.001603,-5.560071,-6.184409,7.680593,2.692494,7.422291,1.818106,-5.650511,-9.297270,9.997309,8.873768,2.857349,0.477409,9.360755,-2.335221,0.913043,4.855264,2.084873,-6.988789,0.058220,-9.720223,8.450830,6.155889,7.112695,4.778413,2.904280,-3.581684,-5.579387,6.922130,8.087160,-4.775048,-4.861748,-2.179381,4.757057,-8.924880,-2.314414,-5.840479,-4.100561,4.727289,5.812154,8.037459,-9.991621,0.560623,0.372673,-1.690340,4.449843,6.574327,-8.044510,5.763042,-1.326546,6.317035,2.437623,-6.729732,2.383153,2.590480,-3.102172,3.687945,9.787661,4.697219,-0.077549,6.677681,7.933535,3.926160,-7.996601,5.357559,-8.676726,-9.463319,-6.432416,-8.956521,-6.323536,-4.502975,-4.551132,1.784179,7.640554,-6.849323,7.777581,0.124904,0.815312,-7.335159,9.904396,-8.180240,-5.941327,8.590974,-1.844239,8.849647,-2.952535,5.619613,4.593660,-1.740301,-4.519359,-1.328617,-3.367967,-4.252980,-1.664560,9.255314,-5.360136,-4.410784,-2.716642,-1.926965,8.215370,-6.395279,8.206570,-9.773420,-0.364339,8.968779,4.010601,-1.782945,2.881676,6.636836,-1.420095,-3.601734,7.557994,7.336803,-3.518352,-0.638356,8.903101,0.272543,-8.618994,-4.875979,-5.388667,5.770738,0.364939,4.481689,-0.308303,5.147078,-7.558704,-9.423769,-5.831121,4.388816,4.534213,-3.360178,-1.466148,3.779040,8.134186,-6.673633,-0.895705,2.510751,1.695039,-1.531709,-6.254268,-2.260033,2.308903,-5.356809,8.526116,5.777809,7.544417,0.723150,5.734118,-4.428930,-7.077418,7.387485,4.312973,2.608385,7.222832,-6.385033,4.780818,-0.372694,5.789787,-0.710236,2.517228,7.992330,2.529167,-5.366332,-8.361826,2.533755,8.096765,4.570482,0.245489,-9.421336,-2.360743,-3.670817,6.519117,8.720728,8.319289,3.126340,6.166167,8.048424,-0.811408,8.386488,0.868165,6.864783,0.960598,9.169679,9.312685,-6.325729,-3.663860,9.735088,9.631792,4.950663,-2.860251,1.828719,2.361663,-3.569728,5.857364,-2.927625,-4.832401,9.703997,-3.242556,8.602309,-7.297728,-8.398309,-9.411001,7.666258,-6.731972,8.195952,2.445292,-8.044151,1.608843,-1.253940,-6.040153,4.048279,3.588388,4.513777,8.405738,6.586330,-0.094431,0.612234,-7.051144,-5.892172,9.027137,6.628333,1.329561,3.168266,8.485255,8.171362,5.352427,-3.435330,2.107138,-5.866227,-5.546523,4.869058,7.262225,-9.107672,5.263937,-0.581647,-2.759345,5.238213,8.334059,-3.173089,3.008904,9.382951,2.947319,9.363048,5.226073,7.489409,3.418878,-6.359986,2.463375,-4.401508,9.071200,7.047455,4.707607,5.836765,-5.364751,7.270384,4.760187,-5.247844,-3.892033,-2.341091,7.846344,-6.371859,-5.757561,-0.665919,3.881549,-8.793372,8.238495,-6.034437,-1.732805,-9.679593,6.083874,-4.718778,-4.634822,9.698079,-7.248691,-6.446132,-0.117579,2.991995,2.031514,-6.814801,-3.647650,1.179506,8.201507,-5.890593,-1.590905,-9.288943,-1.070272,-1.571173,9.665961,-5.421083,7.432512,3.470838,0.983978,-7.155823,-5.382947,8.383555,8.785159,5.429029,-9.718044,0.994001,-5.669279,-8.464583,-0.675805,7.075148,5.979243,-5.635749,-9.525467,-5.628357,-0.350463,-9.626826,1.049999,3.184988,-5.405663,7.326278,1.812388,6.300629,-3.266502,-5.208719,6.670542,-8.917784,7.783310,3.550781,7.582763,7.321880,9.644760,-4.403538,2.970301,9.709179,-4.025961,-5.397363,2.804584,4.297267,-5.107530,8.729179,4.085686,-5.417039,-6.011766,-0.108434,7.648703,3.123317,5.973157,1.081379,8.844153,1.309748,-9.337205,5.496304,1.067755,8.474546,5.501241,0.256464,8.899913,7.610811,-2.414401,8.853374,-2.026821,-0.533462,-6.986713,-6.100369,-5.052258,-0.936520,-8.466306,4.645672,-2.233463,8.665874,4.153020,5.711263,-1.229875,-4.135382,-3.549522,-9.611116,-7.411949,8.980031,-1.833973,-6.501580,5.778364,6.977395,2.783395,1.106243,-6.046976,3.597644,-6.949626,-7.687457,7.740987,8.482474,-3.315256,-5.027486,-6.681465,8.112786,-4.468435,5.911592,-6.576975,2.525162,7.342043,-9.993035,2.310089,2.904600,-8.844203,-7.302277,-0.888222,6.563715,0.348686,2.092141,7.799677,-1.327910,0.363659,5.705193,1.233903,3.561157,-4.682024,-6.574217,0.753675,7.236528,1.039987,2.402930,9.037525,-5.808734,6.550818,-9.322939,-9.051793,-3.565571,-1.319469,-0.472372,-2.529976,8.711320,5.604840,-4.101084,5.535104,-3.710257,6.899551,0.297070,-9.388939,4.345116,8.222729,8.777739,-5.163783,2.517654,5.057203,-2.741547,8.514974,-4.178313,1.895586,6.046519,-6.436808,6.493519,-6.970022,-3.384215,-6.555157,-1.113174,3.763772,-6.348471,2.527788,8.723855,7.537578,-0.796528,4.434259,9.516695,8.922551,6.333718,-1.196204,4.044718,6.166350,1.801188,7.200835,-4.731277,8.671128,-7.818971,-9.622200,-7.793995,-9.421171,2.519507,4.686971,-9.087156,8.673119,0.990656,3.959689,-7.972914,-5.132100,-7.779054,6.436027,4.518756,4.469442,3.161529,1.984646,7.353238,-8.682781,4.019301,1.132402,-7.756341,7.952443,-5.861117,-8.161943,-6.250621,3.767781,-1.997408,6.553080,6.017737,-2.805167,-4.070323,-3.743297,3.237239,-6.864627,2.189486,-5.008949,4.284833,6.811023,-9.730533,-1.090750,-1.345307,-9.564896,1.853297,-9.329319,-7.044091,1.002451,-7.334963,1.428405,8.601229,-5.778291,8.411910,-1.181101,5.462888,7.518153,-3.186618,-7.478839,3.740593,2.073819,-8.270600,8.408257,-4.333215,8.719716,2.326237,-5.707732,9.028421,8.548042,-7.475929,3.908212,7.025526,7.997600,-5.327265,-7.582847,-7.700936,-4.306153,-6.785839,-0.335387,9.079068,9.555522,-4.060457,0.425733,9.548316,-9.727073,-6.046191,7.839724,-8.657084,0.185719,-6.942701,-6.061949,-5.657190,1.351143,3.965833,4.902516,9.520500,0.157727,7.100570,7.166380,9.623819,-8.099168,4.181822,1.193228,-5.269274,7.727550,-1.291444,-7.526157,-7.371201,1.465046,2.800913,-2.699825,-4.386247,-8.805555,-2.644381,-4.312248,2.938900,-9.267030,-9.808852,5.014935,-3.685499,3.480111,-8.163661,5.079673,6.234561,-6.290026,-8.843849,9.757277,-5.581755,-3.829792,-0.045900,-0.060616,9.693043,-3.299971,-4.510710,-0.201563,-7.220932,-9.731230,3.858078,-6.083872,-9.547758,2.467044,3.574471,1.648346,-6.422072,3.969942,-5.817874,6.800142,-3.467286,7.027292,0.569925,9.724340,4.581487,-7.715506,-0.608603,5.490754,-5.855443,8.522799,-8.114103,3.075542,-8.063161,8.636999,3.678435,-9.194663,-0.520459,-6.848922,9.531687,-9.773726,4.161262,-2.436717,0.457486,9.597730,-1.725206,5.338722,8.990966,-4.896644,8.508994,2.827880,-4.137541,-0.779800,3.816697,-1.042362,2.245481,-0.140953,2.072862,-1.335373,-4.273857,-0.177752,-3.704663,5.175984,2.210802,7.105628,3.660212,0.283712,-1.376345,6.821431,-7.314601,-1.936953,-2.067547,9.719387,6.573001,-2.933134,1.582504,5.996814,-3.149808,8.730294,-9.365319,5.504966,3.905964,2.539463,-3.802566,-7.279250,-9.026263,-7.695410,3.866597,-4.117535,7.451650,-5.993155,-3.047588,-9.131070,4.834802,-5.397764,-6.171768,8.437960,-1.235021,4.038767,1.360852,8.187707,0.106037,-2.993285,5.176673,8.587796,6.797229,5.246789,9.885285,8.750844,-0.117797,-0.109908,4.283000,-1.183340,-6.365273,-3.169390,7.867687,3.533698,-3.973450,7.187176,1.456136,-3.849048,8.895632,-0.246954,-6.741845,1.468852,9.122608,7.522676,8.347232,-9.722580,-5.474522,-9.528612,-5.300689,-0.275809,0.581166,3.570687,-9.114696,-7.717337,1.427990,6.938692,-9.787822,-8.948055,-4.274496,-3.628794,-7.243969,-1.110735,7.103696,-3.140383,-6.163444,-9.001144,5.241158,-8.189834,-4.728626,3.469979,7.273112,0.795369,2.196421,6.579595,1.164396,6.126600,-1.753489,-6.930976,-3.707779,-6.862883,6.399002,8.316370,-2.070939,6.631639,-4.968596,-8.339614,4.957578,5.019298,-3.657252,-0.514513,-5.924768,1.213544,2.613019,-4.554201,-1.961200,1.676714,-4.079256,-5.370284,-5.819564,9.362205,-0.428533,0.232914,2.206798,-9.259240,1.075924,4.983008,4.244399,7.120131,9.814372,-9.098974,-0.758637,6.387293,-3.033832,9.136442,6.454283,6.391736,-3.170067,8.290200,0.268259,9.040836,8.317600,-7.900293,1.546435,9.619710,-9.622660,4.570426,1.077287,3.243900,-1.010602,2.333539,8.686400,-9.177120,5.631424,7.903141,8.105402,2.482033,3.494870,6.172540,9.071463,2.959767,0.343060,-5.809641,-3.048688,-7.126656,-4.402868,-8.034617,4.138506,-9.118273,5.712230,4.592022,-1.146244,0.822908,2.905424,4.496766,8.563797,-0.915027,8.872867,-2.540320,-4.902457,-5.773797,-6.947426,-7.001601,4.073451,-8.518728,-2.006813,-0.693894,-0.145918,-6.228913,-0.427135,3.871748,7.136845,-1.631437,-5.739413,-9.728621,-2.806578,-8.878073,7.966958,-4.973931,8.322087,5.160835,-6.671989,-7.557863,1.407473,-2.469513,-8.430103,-9.698123,6.506392,-2.118133,4.686715,-0.209240,-0.026933,-7.586947,4.110003,-9.358538,2.427154,-9.063411,2.122666,-3.052612,-8.559250,0.422702,-6.713170,-5.481367,-9.707064,-1.680709,1.493711,4.095686,7.325175,4.724483,-8.132906,4.491883,-3.164636,-9.218014,-7.664458,-9.255464,2.515003,-4.767453,7.670676,-9.340087,7.258014,6.868792,8.715093,-3.406698,-8.127345,-0.183682,-4.304360,-2.113065,1.989256,-5.034012,-1.727421,-5.232083,-3.963189,5.230858,0.715965,-3.035925,-4.943535,9.190643,-9.173611,-6.313455,-4.219713,-4.643526,-9.150655,5.613730,7.983983,-8.303235,-0.953216,0.435461,8.574079,3.027540,-3.670378,6.953620,5.870496,4.806700,5.510867,0.733796,-9.054258,-0.452927,-8.246111,-3.316679,5.070312,1.369558,-6.793704,8.857438,-8.132051,-6.014025,-3.716899,7.945582,8.642209,1.177324,4.117514,-1.948987,-3.301349,-0.699139,-4.860830,-0.408355,2.426214,5.447536,9.396662,8.109256,4.562340,-0.603661,-9.453934,-4.112200,-4.328764,-4.741328,-7.651998,8.560895,5.077130,0.142659,8.418483,7.722215,-7.752426,-1.119534,6.090104,2.322540,1.142550,-1.893904,2.707402,7.618675,0.061032,0.029831,-2.673722,-8.971200,6.458946,7.377649,-7.315249,5.851660,-2.337416,-2.481209,-7.828558,-9.168644,5.120609,0.406844,7.867788,3.031047,-3.712607,-0.271475,8.749944,-5.886963,6.858487,5.791354,-7.976609,-5.080769,-5.628809,3.340755,-5.900113,7.161133,-5.401778,-9.923078,1.361638,-1.500347,8.149652,8.011238,-6.252370,5.614365,8.406005,5.076590,9.656990,-9.679278,-9.162227,-9.069020,-6.780984,-9.006507,-6.306791,-8.793627,-5.916599,2.208435,-5.243715,9.603056,-4.297643,-8.311836,9.100554,-5.284630,8.143820,6.339421,-3.912779,-0.195789,7.264941,5.234840,5.445651,0.852025,3.962918,4.087491,8.617242,-0.428576,1.455031,-8.634888,-2.891994,-9.924034,9.792456,2.533386,6.046989,-5.814162,-9.265145,7.300635,-7.241509,-8.874836,7.591821,8.804865,-4.702234,9.002039,-4.114674,-8.565866,-1.371567,-1.749638,-0.849833,7.836418,1.570136,-9.529129,1.120895,9.891758,5.003027,6.828449,-4.864545,7.176053,-8.983757,-3.743754,-6.018194,9.281784,0.141041,3.927247,1.267119,-3.960507,-1.656886,7.506156,-9.708998,7.555791,-4.348249,-1.736219,1.730815,9.585239,-2.103290,-0.501168,-8.428627,3.773955,6.488709,-1.001033,9.582728,1.431195,7.766175,-1.138633,-5.038488,2.856803,-3.259847,1.299154,-3.471123,-4.071632,-4.462873,6.293692,-2.270984,6.767964,3.259123,4.685994,-2.416648,8.937516,2.533742,9.771939,9.270507,-9.676993,-5.707352,-5.227731,-2.957605,-3.770755,8.967863,0.945902,-8.192987,-7.730650,-9.339293,6.137386,-4.444804,1.825387,-8.338990,6.116752,1.087756,1.774631,2.885855,-2.969923,-6.755203,5.814538,9.386333,-9.111894,0.738568,7.333290,-0.182610,-9.337991,6.359278,-7.250063,-1.016925,-1.203313,6.474246,2.422923,6.676244,-0.497007,-1.109856,3.227969,-1.291619,-7.294313,-4.646156,-0.548009,-0.957082,-1.623178,-3.697806,8.531703,-3.610012,-4.663289,1.696001,9.846422,-2.581021,8.667917,5.513893,-6.168197,-7.849022,8.904396,-1.137672,7.417958,-0.361289,7.822393,-8.247393,5.548364,-3.214733,-9.169140,9.308229,-2.115942,5.456349,5.130153,-9.020001,-0.757708,-1.350491,-7.503276,3.990351,3.943179,2.380559,-7.699302,7.015183,-2.459961,-1.128596,8.397533,-8.205461,2.589986,6.527275,-3.369201,-0.504581,-3.090088,-0.939878,7.888603,-6.954362,0.452670,3.614261,0.375753,1.147236,-0.079141,-1.224597,-0.374119,8.255307,-8.694983,-8.567853,1.427124,-0.804393,9.865853,-3.575467,-4.081010,9.304046,-1.143592,-5.745943,4.448119,4.073651,6.410156,7.300847,3.693124,0.522581,-3.636648,-2.670263,-3.687574,6.420005,-0.361665,-0.696198,9.591730,-5.417559,4.597555,9.292509,6.906344,-3.147529,5.452834,-7.994300,6.940676,-7.694668,3.156588,0.464126,8.009893,2.314298,-4.480563,3.397831,8.579027,3.395305,-2.590390,2.171450,0.067811,-2.529224,0.888051,6.367589,-9.939629,-8.822984,1.925222,2.725722,4.466160,-2.857719,-2.986771,9.002226,3.322668,-4.634330,5.948508,8.366822,-2.155598,5.998102,-9.049327,-1.325494,9.434673,-4.113851,-4.168238,3.078906,-3.894522,6.097512,6.607417,-6.632143,6.307408,-3.976824,-0.544266,5.000916,0.718575,9.748670,-6.782692,-9.029787,-8.930281,-0.230145,-1.192206,-3.124294,8.040412,-2.423660,-2.637219,3.696493,1.995156,3.624217,-9.404129,-9.794931,5.834669,9.976231,9.156336,4.027541,3.827911,-5.251324,-0.183370,-3.267271,-1.577569,-5.567587,-0.451049,-3.131782,-9.452822,3.327699,8.175119,-2.107944,2.901133,-0.234456,-3.965943,2.831002,1.708277,1.031268,-0.861041,7.120839,-0.369799,-7.338514,8.446050,6.991315,-6.221680,-1.154233,-9.321362,-5.779283,0.678918,7.859191,6.076126,0.844657,-6.843274,-0.696992,-6.253627,-6.691121,9.014119,9.681501,2.712642,-5.904991,-9.665727,0.927527,-4.807099,-5.058384,-9.154449,2.381920,-5.259810,-3.001403,0.102574,-2.008504,-1.584292,9.211592,2.072987,5.848186,1.158825,-0.596415,-4.433906,-3.731350,2.068782,-2.058537,-8.252936,3.241872,-7.676386,-0.641107,-1.994451,-5.843208,5.612586,5.881338,-4.803246,8.389257,-1.664007,7.514662,-4.201042,7.378380,3.001371,1.468287,6.274540,-5.194888,9.476254,-7.899268,0.927099,-7.824365,-9.703703,7.009290,-8.164120,-9.865314,-0.912555,-8.403028,7.704641,6.039830,3.679201,7.398736,4.661559,1.534224,-4.126922,6.066116,-7.193040,-8.578763,3.038804,7.849071,-7.913899,-5.720540,-8.064639,8.688983,7.985602,-3.692045,-7.422044,9.398796,7.165018,-7.403545,-7.215740,-0.901401,6.793496,7.044243,-5.829594,5.167028,-0.036651,-9.089253,-0.923223,0.120856,-4.294050,-8.152119,1.651678,-7.106766,-7.743841,-5.292430,-0.203223,4.810791,7.283301,-2.901794,-3.679533,-9.261038,-2.973717,9.533196,3.312450,-9.298344,-3.478113,-6.250097,-0.033815,-3.000439,9.670037,-5.711933,7.202782,4.583294,-9.633820,1.358556,7.694551,-2.253245,-3.895455,-6.192917,-0.788671,5.945494,-8.211725,-7.621822,-8.743093,4.970702,3.687039,-4.844432,-8.587001,9.500364,5.406306,1.723631,-0.077020,-5.519690,5.850312,-9.870026,0.862408,-2.937271,0.029192,3.985015,3.905510,9.459224,-0.489948,-3.435254,-2.651795,6.054716,-6.019565,-7.974281,-8.241159,2.011988,-3.676008,3.246071,6.021447,3.699182,-4.294406,-2.604732,3.936591,-9.560661,5.480020,-8.692319,-6.734586,-6.251267,-5.599529,-0.118993,2.489539,-5.610894,9.990371,-7.875400,1.331108,-8.306797,-9.230635,-7.304458,-1.848741,4.826038,5.830764,9.557802,7.022095,-6.637014,4.420488,9.006542,-2.655671,-8.938834,8.890078,-2.590821,-6.849074,3.122525,5.952923,-4.350715,-7.661370,-8.084073,-6.982857,-2.307408,7.072415,2.502087,7.653626,2.592091,9.726650,4.540069,-3.269060,6.385817,-3.478873,5.240201,-4.137623,-1.039469,4.671481,-7.465268,-6.276365,-3.348440,7.814708,-4.782852,-3.292303,-8.681343,7.801976,-6.117591,5.950440,-8.338472,-5.172943,-6.008139,-8.298733,-9.986825,8.229207,6.537538,0.647889,5.964220,1.680714,6.414630,7.777616,5.542512,8.722814,7.054549,-6.011560,2.425726,1.493199,4.661663,-6.179891,-9.062233,9.934360,6.028964,4.097162,2.297496,5.836286,-5.925925,2.298830,8.234896,2.748436,4.756848,1.169135,5.285634,-9.965209,-0.012480,-0.059385,-4.193993,-1.149452,-7.714264,-6.619822,-0.949709,-8.700586,4.463060,7.818715,-3.173930,3.169484,-6.136155,-4.772909,1.278244,-7.865268,6.683503,-6.889803,-2.286891,-4.556517,-8.619382,7.687184,-7.340725,6.769443,4.969288,-5.472219,-3.058012,1.623041,-9.246388,-8.177411,4.409615,5.479042,6.639500,-7.390339,-6.835815,-7.971402,-2.918178,-9.050984,3.378746,-7.686826,-7.025721,-5.202001,-6.535608,5.144422,-1.538032,-3.818481,-6.363435,-5.861406,-6.698768,-8.464418,2.468314,9.178662,-9.272399,-7.169750,-1.965758,-2.385285,-3.747130,0.473460,-4.148510,7.263438,-3.043399,-1.504958,-2.061171,-2.809032,-6.474542,5.583455,5.738523,7.892226,-0.262097,8.635564,-2.582119,2.605340,-6.993890,4.164639,7.020766,3.324767,-1.946028,9.955425,2.623079,5.807250,-4.654512,9.831207,-2.877783,9.530252,5.946581,8.059451,-2.752857,-0.347104,4.455573,1.243185,-9.695808,-7.641988,4.077975,1.431043,6.418499,-1.478455,-3.035047,7.684278,-7.618536,4.852072,8.762099,7.622369,-7.797781,-0.968803,1.660179,-8.787293,0.672924,-6.171579,-0.180149,4.376220,7.254637,5.417755,3.823765,-5.900416,2.078162,6.567586,-6.533002,-4.234812,-9.698704,-5.553323,9.483777,-2.534538,5.353532,5.702585,-4.253734,6.932565,-6.990918,3.467947,8.349048,1.496691,-8.788432,2.316285,8.532163,1.723820,-2.517678,8.039136,-4.862406,-5.401178,-6.837707,-4.972702,-3.746784,-2.237983,-9.867296,0.361030,1.694077,3.774275,2.707149,-0.847141,-9.728436,8.771402,4.316506,-3.673957,-5.817280,0.422720,-4.485032,4.048906,9.967366,0.251854,-3.838718,8.081531,0.562141,4.987579,4.571906,1.087544,6.230811,1.118938,8.960789,-2.543664,-6.851629,3.179393,2.878184,-5.454109,-2.408032,3.453109,-4.269441,9.083700,1.749265,-3.936588,-4.885276,-9.038893,-7.532505,2.322401,-3.337265,3.046709,5.241864,8.017579,-6.234382,-6.917460,-7.602942,0.317357,-7.035795,-4.271859,1.735464,7.926083,6.939039,6.239812,1.526945,3.736419,-7.137564,-8.013111,4.982558,7.247683,8.637396,3.149539,5.878813,-2.149136,8.483536,3.141899,-3.190000,-9.277621,-1.793993,2.672764,-4.574528,9.899192,-6.708340,9.728908,-6.457919,9.062289,-7.430847,4.545195,9.607183,6.353478,-8.644361,4.075009,2.747443,-1.971604,1.749009,8.745991,5.644393,-4.655417,3.350949,9.545454,-8.469257,7.424954,6.635480,-1.074770,0.838336,9.391781,-9.791633,-3.175964,1.344023,-3.363060,-1.119453,-9.282725,-9.995031,9.618200,-5.182624,1.383798,6.223623,0.347296,1.857690,8.820678,-9.736216,8.370060,9.567290,-5.164406,-1.075955,0.993334,8.413687,-4.738852,0.912546,9.117455,6.278963,-9.837334,8.746940,3.439247,-4.185157,4.691837,-9.558541,2.461697,-8.351669,-1.975369,-0.617807,-1.693761,1.526962,-2.745691,-0.087589,7.476849,-5.044330,9.254380,6.039208,7.147182,4.654121,-0.726646,2.590695,-0.942521,-4.434015,-3.233303,-5.987860,-6.753721,-4.747193,-2.444125,-2.614857,-6.586858,-3.069644,-4.413035,-5.248639,3.211308,5.650176,7.198188,2.874306,-7.337821,-2.339480,7.765085,0.865435,5.707036,-1.971172,2.131443,4.031793,5.109530,7.610513,5.992314,1.409478,6.346341,5.874415,2.732317,-8.060098,-3.158218,5.615803,-3.308574,6.744105,-5.884891,2.380933,-8.742580,0.366263,-7.429655,2.022837,-8.039649,-2.784831,6.993814,5.814877,9.092130,1.886403,-7.106869,9.767976,6.508107,-6.568922,-6.609814,3.029546,-5.675367,-7.222801,3.042893,0.952461,7.405716,-1.531332,1.724381,2.661628,7.544044,-7.926088,0.963755,-0.198122,-9.313262,-4.459461,7.061622,6.977613,-7.902270,-0.752265,8.820772,-2.077505,-7.176704,-0.238899,-9.345404,-8.386543,-6.384428,6.929174,-0.281307,-2.328032,3.630538,3.392894,9.737774,-0.446891,-9.958578,7.019167,-7.768330,-9.748996,-3.569096,-5.420962,3.278049,4.098216,3.616365,3.203349,-4.788231,-3.296421,6.994491,-4.698689,-8.415929,-9.817867,-2.816828,9.770105,9.879186,6.102546,-8.573557,-5.181432,-7.645418,8.778722,7.723333,6.795579,-8.579865,2.116917,0.892499,-1.148789,-0.952625,-3.281641,4.289397,-6.476142,-0.066721,-8.294345,0.863089,-6.929644,-7.740788,-5.354029,-2.274961,-9.859552,6.857632,-1.142129,6.883931,3.286450,-5.991563,-8.627624,5.193330,-1.042148,-8.192111,-2.060661,-5.933282,6.169995,-8.519372,-5.496719,5.938888,3.113429,-4.135367,2.856652,6.874400,6.422400,3.603768,2.831134,-5.124835,-3.661958,-8.154287,9.080094,1.022611,-3.182205,-5.553040,-0.244951,7.019002,-5.554428,-1.259890,8.799873,-2.579850,1.896165,6.660350,-7.455616,-0.292094,-1.869147,8.796016,4.721058,6.114890,-3.732284,-4.229135,4.692156,2.294996,6.971016,-8.772277,5.011132,-5.768061,-2.825990,2.749091,8.338948,3.276829,-5.435849,9.211756,8.264029,4.267845,-4.737230,-0.036280,0.421743,-3.014447,2.101201,-2.790313,7.607712,5.221698,-1.998948,9.057985,0.749667,0.057422,4.705520,8.723237,1.244148,8.836187,4.862214,-9.683222,7.725321,9.390050,2.952731,7.665847,-8.519083,-9.609542,6.140449,5.020753,-3.244840,-3.037825,4.344386,-2.939950,0.458953,4.243665,8.098607,3.606136,-5.242506,-6.169567,-1.949390,-9.786118,-1.958452,8.027309,-8.003815,-7.382620,-5.611954,6.027415,9.385637,-9.056814,9.510690,7.602118,1.384800,3.204241,4.494204,1.410798,4.629698,1.094589,-7.807688,6.221306,1.103082,9.094888,-0.794523,6.683125,-1.921690,-0.833714,8.572763,9.541672,4.088565,-0.219590,-4.216971,-7.404248,-5.336724,3.404088,0.474262,8.113439,9.767067,-5.611165,6.075496,4.533906,3.633709,3.135986,7.594353,-6.809185,4.491190,0.292398,-9.418307,2.917660,2.227022,-3.528560,4.543177,9.061293,-7.839989,9.838940,-9.390125,-7.078239,-7.320970,-0.514008,-3.503543,-5.057154,-1.393469,0.629416,-3.439523,4.927156,1.006017,-9.294725,4.293283,0.438722,7.802963,-5.904056,4.695054,8.705858,-5.692899,6.455102,-6.914206,0.530792,-5.702467,-7.763523,6.059551,-3.085273,5.264758,-6.135159,4.329737,-0.343542,-3.536395,-0.959218,4.119106,7.461291,2.026316,-3.902479,1.704582,-1.025509,-2.949286,-0.570720,-5.659275,5.526007,2.080603,8.060775,5.963430,4.223474,-6.252274,-4.120541,7.969147,9.633980,-7.848813,4.154542,7.702381,7.509485,-9.473930,-0.627876,9.580729,-4.898915,5.692314,4.531329,5.810102,-5.304937,-5.692040,-4.699231,-7.861976,-7.793545,0.886312,-8.017637,-6.927337,1.703772,0.594250,6.112343,8.571692,4.423393,3.110764,6.569578,9.200268,-2.647451,-4.919458,-8.986201,0.491928,-8.425159,-0.355536,8.054421,-2.431567,3.807890,-7.586853,-0.951447,-1.215393,-2.938014,-9.495555,-4.440277,7.953065,7.876099,7.549296,0.241110,7.100706,-9.195949,-5.157164,-0.750565,-7.453039,9.590981,-5.078760,-9.961839,1.887910,1.113572,-1.507325,-7.463500,-0.818740,-2.063778,0.400035,-4.615138,4.743895,-7.362318,3.592017,-6.042055,-4.014367,-2.627433,-9.614509,1.405576,-6.698319,0.786091,-2.877769,-6.816334,-9.760750,5.390405,-2.092686,-2.787866,-3.799085,-4.373523,0.807289,2.539851,-6.134103,-0.416247,-0.377980,-5.613480,-6.166896,6.824815,8.279446,-3.681603,-8.341346,0.276426,0.110339,-3.935847,-6.786355,7.031918,-1.267753,2.184563,7.107879,0.601512,9.906073,-4.822887,8.918043,6.938882,2.695793,-2.169247,4.855794,5.296333,4.473090,-3.903258,-8.855819,5.749985,-8.410394,2.644144,2.652246,1.411665,-2.950447,-4.040210,3.466126,6.463692,7.074703,1.890643,7.177536,-8.115198,-9.383324,7.801326,-3.461873,8.309468,1.860091,-3.191336,9.986119,-5.012650,9.584510,-2.488457,-3.250110,-6.314214,6.054280,-1.800655,-0.318463,-4.201150,3.068261,1.297947,-6.605223,-9.371664,7.838088,-6.754561,-3.442775,-3.404909,-1.687054,-6.167017,-2.341699,-3.598366,-7.240848,7.752042,6.193745,-7.101106,0.585281,3.643692,-4.535477,5.622507,-7.353464,7.970751,-1.067519,1.104112,-3.123855,1.547620,-6.329031,-6.703729,-1.603910,3.069230,6.576546,-8.294979,0.684811,5.134762,5.460763,0.478599,-6.164193,-8.395633,-9.217229,0.352937,-5.450209,-7.417446,3.822277,1.687881,-3.002348,8.807172,-0.838281,-7.663349,0.789766,-8.103857,-0.334921,0.587929,-7.109569,-8.992484,2.272510,1.167944,-5.509042,-2.261152,-3.856741,-3.701320,-2.194153,4.913011,6.761847,-5.930876,2.858677,-3.767245,-4.658225,-7.613526,0.610476,3.647570,9.828006,-6.543044,-7.801242,4.247840,8.101745,7.153340,8.716138,-5.002684,-7.034569,-6.236298,4.499978,-1.777809,-8.815105,-8.970827,7.083226,-1.513983,-9.286206,-6.401195,1.590091,-7.966480,4.516045,-2.646594,-3.513797,-7.664960,1.750089,-0.270029,7.888735,-2.960625,2.627779,8.209977,-0.761184,0.455895,7.352214,-2.981517,3.042046,0.803560,-0.139504,-1.737293,-7.006185,-4.679350,0.971170,0.291670,1.024491,-9.978914,-5.267600,7.871049,1.037321,-0.877958,-9.902221,7.261813,9.537871,4.002952,-4.402033,-5.376587,-6.997909,-2.672756,5.105120,-7.505304,9.692055,0.141344,-8.498209,-7.868386,-6.140866,-7.324965,0.351362,-3.719743,-4.060999,1.412314,3.668524,-3.275205,-8.451708,5.089131,-9.033385,-1.617442,-8.900385,6.349134,-3.031893,-4.829054,-9.327676,2.305109,-5.401152,-5.807327,3.210443,8.960678,3.654742,-1.754230,-3.885038,3.427260,2.803952,-4.551638,-7.986268,3.556747,-7.506301,4.567509,-3.712260,-3.171622,-6.561326,-1.408935,-7.271712,5.551077,7.238363,3.212501,2.507220,-9.248056,-7.695912,7.945382,-7.657394,2.640917,-2.126495,-2.622945,-4.633481,-0.794414,5.021346,-2.523762,-6.850913,-7.549366,-1.307548,-8.535280,-3.673026,-1.322489,3.286567,5.014846,-8.374401,-3.541301,2.306261,-5.712321,-1.084402,8.017241,5.477495,8.150731,4.264436,8.871231,-1.938652,9.116240,-2.537199,4.634309,0.227932,4.731316,-3.536171,3.338323,-4.343758,6.121601,-7.548767,0.778410,-0.330957,6.047777,-7.607910,4.876728,-3.647700,4.238648,5.041673,5.322683,-3.895663,-1.132219,-1.965841,-7.158317,4.969200,1.498789,-8.721168,1.384696,-0.238590,-5.035954,4.960420,6.866791,3.623894,-6.259640,7.089839,2.025438,4.132895,-0.314150,2.062021,-2.643367,-5.137145,-6.081765,-6.788478,-0.665970,1.357934,8.599604,-4.842516,-9.175665,-3.457309,-4.883415,-5.603007,9.503128,-6.786710,-7.110481,-0.749259,-9.561390,-8.120687,-3.771075,7.611426,3.481951,9.359894,7.947076,4.807870,1.346719,2.197595,-2.976649,-9.869344,3.705384,0.045823,-9.730327,-1.487184,0.809193,-9.534244,-9.106688,-6.666050,-5.706935,-4.754087,3.918924,7.311876,2.368914,6.399969,3.572569,5.168139,-2.208835,-0.436536,5.985060,9.893504,8.117851,-4.878991,7.375614,-5.927053,-4.563677,-7.572712,-9.173841,5.317022,-3.381363,0.482645,-5.121462,-8.281319,-6.101437,2.562258,3.318712,-9.682875,-9.340203,-7.989196,9.212880,3.727307,-6.277880,2.450759,-7.805845,-3.109744,6.445290,-7.958479,2.457625,-1.115545,2.155481,9.599717,0.365195,6.604869,-8.776256,4.258712,-4.343523,2.536876,-0.422514,-4.530631,5.320495,9.902029,-4.342099,-0.895125,-9.190561,8.447900,8.543797,6.241213,-5.176217,-6.593529,-6.685897,-7.706964,0.025381,7.963693,9.130045,-3.926483,2.374500,7.112025,1.375048,6.252327,7.474608,7.322069,8.675173,9.879027,8.379763,-6.386812,5.448822,3.872734,-3.681045,7.629930,-7.103196,3.171425,1.107669,8.554768,-4.904811,2.226391,-6.206690,-4.209131,8.337228,9.321357,-6.470095,-4.510047,1.004801,-7.010431,6.102316,0.566362,6.915170,7.703599,8.717382,0.697458,3.322543,1.650619,2.013402,1.302963,2.104728,1.378957,-3.956443,-1.999428,6.384369,5.994764,-2.914894,-3.000617,4.014026,-2.276134,5.329819,2.597211,-2.556568,-8.295137,-9.322684,-1.554277,-6.074621,0.989632,-0.479855,-4.701109,-9.874832,-3.234664,-5.403964,-0.977484,-8.973163,1.976794,-2.352352,-1.265806,2.466777,-1.476696,-5.969792,-7.178839,7.625029,6.455070,9.192272,0.694406,3.695783,-7.030312,4.354495,-7.396548,5.885539,3.629829,-6.420953,0.249397,-1.779893,5.642431,-8.604636,9.019618,-3.196460,1.071148,5.849594,5.343376,-6.016600,-8.267370,5.887196,4.051687,-0.036697,-1.333814,-2.062399,7.975165,-5.709345,4.480618,-0.095967,-3.260071,1.715680,-1.149072,-1.513362,-7.025781,7.650131,-3.899537,1.664912,0.600888,-6.979044,-5.415165,5.679290,0.193838,-5.633588,7.635060,-9.382476,3.565018,8.895673,-7.975909,-2.444488,8.267955,1.787551,-9.831131,9.731997,9.929195,6.112020,2.390070,1.340938,-1.970963,6.485513,-0.414507,4.560893,-8.645252,0.585909,8.185960,9.448075,4.715539,-0.553533,3.685143,5.440195,-5.598569,-4.182718,-8.774539,-1.994210,5.399647,-0.265127,8.735107,-8.668735,-0.413561,-4.125225,0.729846,-7.858145,9.601053,-5.990838,8.351173,4.490422,-3.308073,8.284124,1.183154,-4.636122,6.835950,-1.480949,-7.368050,-8.413197,-7.570851,-5.994918,-7.770337,-3.134368,-4.875175,-9.477884,-5.161377,9.327758,7.759514,2.574589,-2.115552,-7.024870,-5.177459,7.368983,1.656741,-5.164129,-8.639513,8.238617,3.349099,-3.081850,-6.335458,8.711638,-1.941065,7.087252,4.360504,-6.570429,-7.480768,-3.062740,2.159343,-6.939789,4.020918,-1.650354,4.395449,0.783108,8.639927,-6.454352,-6.113457,6.621348,-2.163114,2.389052,6.289338,-3.252585,-7.050219,6.060891,-6.787138,-6.985872,-5.025672,6.009569,-0.533961,-2.070192,8.373806,1.116707,5.961849,-6.434599,6.858396,9.525742,-0.635700,2.664379,-8.986317,-4.591542,-6.069180,7.294407,-6.369859,-4.218901,7.817864,-2.601148,-0.417563,-3.822114,-9.078080,7.004553,-4.270129,3.951344,-5.185058,0.952121,7.495748,6.459552,-9.222340,-6.085430,-8.534396,2.048517,4.329929,-5.016556,7.841820,4.339765,2.252797,-5.675597,-5.799895,-3.250354,-5.506480,6.052643,-3.968299,1.391682,7.342737,9.412008,-8.373206,5.908993,-4.740185,3.793089,9.214652,-3.195753,-5.903666,-0.457868,-0.602749,3.681167,9.960373,-3.156385,-7.542808,-3.936110,7.600742,8.706075,1.183835,8.572085,-1.615173,2.820222,-6.764634,-9.138743,-6.319512,1.276457,-6.391896,8.843227,6.772334,7.618323,4.965324,-6.909537,0.539595,1.810193,-5.078617,-8.593018,8.928532,-2.331407,9.088671,-7.998312,-8.427111,-9.776232,0.199793,-7.813795,8.982324,-4.943811,3.114438,4.455537,-8.450850,9.176194,-9.648837,2.709497,-0.285958,8.387592,-0.624885,9.192801,3.422053,9.777920,-0.139460,6.691312,9.528307,-7.329380,-8.593192,8.459903,-6.615533,-5.357967,0.611424,4.977205,5.692621,3.621685,-8.109398,-4.967368,0.317697,-1.390909,3.713905,1.007357,0.857316,-3.914501,-8.333142,-3.147143,-4.000020,3.062417,-4.346485,4.861584,8.675724,-3.638091,-1.368749,4.685502,-8.457815,1.502460,0.938718,0.553311,-6.096944,4.208574,5.955766,-7.865458,-8.166406,1.580412,-1.243537,-4.590706,-0.461228,2.351780,-6.500605,-4.469652,4.080022,-2.786143,-4.923493,4.008487,5.297211,5.058722,5.059736,3.283130,3.354551,-6.159381,0.722904,1.389279,5.678101,-6.934876,8.030351,7.641784,-4.772663,-4.553509,8.112937,-4.990265,-8.685104,8.997667,8.949248,3.220118,-7.982627,-6.565271,-1.558757,9.016092,-7.483651,4.890544,-1.928873,-4.525993,5.346821,6.977160,8.560662,8.930133,-8.091732,7.436214,7.007393,-8.027069,-2.370825,-2.990580,0.630170,1.269013,7.426964,4.154420,9.219219,0.543341,-6.633505,4.308727,-1.016967,3.612744,3.262892,-0.387519,1.197837,-9.660154,5.507190,8.361838,-4.804713,-1.908765,8.313067,8.403236,-1.284208,5.708026,-9.418833,-1.654418,-2.324728,9.546189,-0.450820,-8.198102,-6.754896,2.733522,6.441127,-0.091556,7.550481,-4.425735,0.828463,2.894442,-3.023406,-4.683414,3.801358,7.150934,4.507858,-1.649256,-1.677556,0.501965,7.769821,-1.349008,1.847546,5.318220,7.187686,-6.399838,4.152750,-7.764966,-6.397515,-5.385553,4.716987,2.992395,-0.241835,-3.608065,6.473601,-7.428462,3.791949,6.148215,6.650188,6.019460,-4.828823,6.657095,-1.292206,3.199344,6.047300,-2.988171,8.474447,5.845863,6.539307,-4.896651,0.425337,-6.987684,2.780043,-2.907319,-2.270340,-1.348832,6.048345,-9.605696,4.937861,-1.070102,-7.869457,-0.139294,7.723982,2.266690,5.689952,3.044604,-5.539419,0.340705,5.571253,7.533130,-0.867810,6.624796,9.693709,9.228080,2.339759,0.482185,-8.837826,-5.279005,9.271361,0.277661,1.752145,-0.623662,-1.979318,-5.510201,3.815150,5.695012,4.890807,3.943580,-1.925551,6.041247,-8.089289,0.124425,-2.466057,-8.413476,-1.015240,4.623809,-0.514080,4.766425,2.942696,4.117366,7.986845,-6.447790,8.611584,-2.799764,-8.957668,9.624715,-1.515860,-3.422017,-8.605003,9.559644,-0.211578,9.340856,-4.842424,7.794754,-8.255808,-6.558466,8.515241,-0.671953,-8.248971,-0.515473,-8.040441,4.223761,9.723804,-9.308977,6.543249,-5.458431,-7.364739,-4.036528,-8.131760,-8.001629,-3.296028,6.932923,-7.190308,-2.587070,-3.867050,6.159627,8.103469,2.728278,-6.367627,-7.629645,4.296706,3.168530,-6.807251,-4.975978,6.706012,9.246475,3.584819,9.908458,-0.550168,-2.222315,5.254841,-1.901196,4.824912,3.940949,2.456654,0.121636,-9.906209,-4.172523,-1.812758,6.661598,5.869269,-9.537512,3.963117,-7.471134,2.018625,-1.750703,7.483927,8.793963,8.439122,-9.804115,0.094333,9.865189,2.852070,-0.669594,8.278363,0.110750,4.166510,9.412494,-2.296143,-5.203192,0.595420,-4.515722,6.551549,7.875186,-0.415493,8.363453,4.601662,0.838631,-9.634741,-2.665926,2.608144,0.019495,8.768021,-6.288352,-1.717007,-9.426391,9.093017,-6.212381,-3.429226,8.216241,-9.906597,-5.451244,-2.181126,-4.976310,-8.225902,-2.605754,-2.573417,-5.031862,-9.321870,8.467978,5.141094,-2.372602,-1.201449,-6.010715,-9.241794,8.546508,-7.071262,-2.104218,5.017397,-0.622233,-7.741100,-0.177967,-2.426481,-3.784539,0.827953,0.499325,1.624423,4.825314,8.770398,9.571732,-2.719046,-8.896537,-8.789398,1.888604,3.997537,4.930919,-2.740236,-9.785750,-1.442052,6.405452,3.518311,3.590132,7.034279,-5.215061,-6.969036,-2.926036,4.301430,1.947574,-8.556017,5.730340,-9.812540,4.893258,-6.893612,3.854479,-9.658678,-6.227758,-5.229454,4.034459,5.947689,-0.099537,1.630948,-2.134930,7.617448,-9.361685,-8.471458,1.419037,0.897965,8.895840,-8.613801,-6.284409,6.915803,-6.243240,-6.659380,4.339281,-4.806761,5.634501,9.705481,-4.826560,-0.620603,-5.231051,-5.303048,0.009325,-2.657226,-3.405868,-2.501412,0.858929,7.461959,4.160358,3.641893,3.873277,-9.128385,6.872305,-8.463614,-6.739737,7.896006,1.561935,-2.133843,0.115045,4.597449,4.173869,-3.206023,-9.327789,2.230432,-7.625216,-6.720676,-2.550896,-4.710015,-6.742994,7.244153,5.881852,3.757725,-3.696402,-8.817934,-0.227579,4.664054,0.848518,4.527992,-9.713193,7.046542,7.165602,-0.451955,-7.561692,-0.853681,-2.406371], dtype = "float64")#candidate|7222|(4290,)|const|float64
call_7220 = relay.TupleGetItem(func_2132_call(relay.reshape(var_7221.astype('uint16'), [2100,]), relay.reshape(const_7222.astype('float64'), [13, 330]), ), 2)
call_7223 = relay.TupleGetItem(func_2136_call(relay.reshape(var_7221.astype('uint16'), [2100,]), relay.reshape(const_7222.astype('float64'), [13, 330]), ), 2)
output = relay.Tuple([uop_7214,call_7220,var_7221,const_7222,])
output2 = relay.Tuple([uop_7214,call_7223,var_7221,const_7222,])
func_7234 = relay.Function([var_7213,var_7221,], output)
mod['func_7234'] = func_7234
mod = relay.transform.InferType()(mod)
var_7235 = relay.var("var_7235", dtype = "float32", shape = (9, 11))#candidate|7235|(9, 11)|var|float32
var_7236 = relay.var("var_7236", dtype = "uint16", shape = (2100,))#candidate|7236|(2100,)|var|uint16
output = func_7234(var_7235,var_7236,)
func_7237 = relay.Function([var_7235,var_7236,], output)
mutated_mod['func_7237'] = func_7237
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2925_call = mod.get_global_var('func_2925')
func_2927_call = mutated_mod.get_global_var('func_2927')
call_7254 = func_2925_call()
call_7255 = func_2925_call()
func_2434_call = mod.get_global_var('func_2434')
func_2437_call = mutated_mod.get_global_var('func_2437')
var_7268 = relay.var("var_7268", dtype = "float64", shape = (330,))#candidate|7268|(330,)|var|float64
call_7267 = relay.TupleGetItem(func_2434_call(relay.reshape(var_7268.astype('float64'), [330,])), 2)
call_7269 = relay.TupleGetItem(func_2437_call(relay.reshape(var_7268.astype('float64'), [330,])), 2)
uop_7271 = relay.atan(var_7268.astype('float64')) # shape=(330,)
func_2550_call = mod.get_global_var('func_2550')
func_2552_call = mutated_mod.get_global_var('func_2552')
var_7276 = relay.var("var_7276", dtype = "uint16", shape = (210,))#candidate|7276|(210,)|var|uint16
call_7275 = relay.TupleGetItem(func_2550_call(relay.reshape(var_7276.astype('uint16'), [210,])), 0)
call_7277 = relay.TupleGetItem(func_2552_call(relay.reshape(var_7276.astype('uint16'), [210,])), 0)
output = relay.Tuple([call_7254,call_7267,uop_7271,call_7275,var_7276,])
output2 = relay.Tuple([call_7255,call_7269,uop_7271,call_7277,var_7276,])
func_7292 = relay.Function([var_7268,var_7276,], output)
mod['func_7292'] = func_7292
mod = relay.transform.InferType()(mod)
mutated_mod['func_7292'] = func_7292
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7292_call = mutated_mod.get_global_var('func_7292')
var_7294 = relay.var("var_7294", dtype = "float64", shape = (330,))#candidate|7294|(330,)|var|float64
var_7295 = relay.var("var_7295", dtype = "uint16", shape = (210,))#candidate|7295|(210,)|var|uint16
call_7293 = func_7292_call(var_7294,var_7295,)
output = call_7293
func_7296 = relay.Function([var_7294,var_7295,], output)
mutated_mod['func_7296'] = func_7296
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5113_call = mod.get_global_var('func_5113')
func_5115_call = mutated_mod.get_global_var('func_5115')
call_7312 = relay.TupleGetItem(func_5113_call(), 0)
call_7313 = relay.TupleGetItem(func_5115_call(), 0)
var_7314 = relay.var("var_7314", dtype = "float64", shape = (91, 15))#candidate|7314|(91, 15)|var|float64
bop_7315 = relay.greater_equal(call_7312.astype('bool'), relay.reshape(var_7314.astype('bool'), relay.shape_of(call_7312))) # shape=(91, 15)
bop_7318 = relay.greater_equal(call_7313.astype('bool'), relay.reshape(var_7314.astype('bool'), relay.shape_of(call_7313))) # shape=(91, 15)
bop_7327 = relay.floor_divide(call_7312.astype('float64'), relay.reshape(var_7314.astype('float64'), relay.shape_of(call_7312))) # shape=(91, 15)
bop_7330 = relay.floor_divide(call_7313.astype('float64'), relay.reshape(var_7314.astype('float64'), relay.shape_of(call_7313))) # shape=(91, 15)
output = relay.Tuple([bop_7315,bop_7327,])
output2 = relay.Tuple([bop_7318,bop_7330,])
F = relay.Function([var_7314,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_7314,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
