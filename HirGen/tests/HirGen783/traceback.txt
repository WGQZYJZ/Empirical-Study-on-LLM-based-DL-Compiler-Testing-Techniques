==========mod==========
#[version = "0.0.5"]
def @func_4663(%var_4643: Tensor[(3, 16, 15), int64]) -> (Tensor[(3, 16, 15), int64],) {
  %0 = cast(%var_4643, dtype="int64") /* ty=Tensor[(3, 16, 15), int64] */;
  %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(3, 16, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 16, 15), int64] */, dtype="int64") /* ty=Tensor[(3, 16, 15), int64] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %4 = add(%2, %3) /* ty=Tensor[(3, 16, 15), int64] */;
  (%4,)
}

def @func_9182() -> (Tensor[(2, 2, 13), float32], Tensor[(2, 880), uint16]) {
  %5 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %6 = @func_8401() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 880), uint16]) */;
  %7 = %5.0;
  %8 = %6.2;
  (%7, %8)
}

def @func_10558(%var_10547: Tensor[(2, 2, 13), float32]) -> Tensor[(2, 2, 13), float32] {
  %9 = @func_7821() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %10 = %9.0;
  %11 = cast(%var_10547, dtype="float32") /* ty=Tensor[(2, 2, 13), float32] */;
  %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%10, dtype="float32") /* ty=Tensor[(2, 2, 13), float32] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%13, %14) /* ty=Tensor[(2, 2, 13), float32] */
}

def @func_7550() -> Tensor[(8, 8, 2), bool] {
  %15 = @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %15.0
}

def @func_9986() -> (Tensor[(16, 11, 10), float64],) {
  %16 = @func_8401() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 880), uint16]) */;
  %17 = %16.1;
  (%17,)
}

def @func_8678() -> (Tensor[(24), float64],) {
  %18 = @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */;
  %19 = %18.2;
  (%19,)
}

def @func_12364(%var_12351: Tensor[(1, 12, 7), float32]) -> (Tensor[(?, 12, 7), float64],) {
  %20 = cast(%var_12351, dtype="float32") /* ty=Tensor[(1, 12, 7), float32] */;
  %21 = cos(%20) /* ty=Tensor[(1, 12, 7), float32] */;
  %22 = cast(%var_12351, dtype="float64") /* ty=Tensor[(1, 12, 7), float64] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="float64") /* ty=Tensor[(1, 12, 7), float64] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %26 = divide(%24, %25) /* ty=Tensor[(?, 12, 7), float64] */;
  (%26,)
}

def @func_8516(%var_8501: Tensor[(33), uint16], %var_8502: Tensor[(396), uint16], %var_8509: Tensor[(1760), uint16]) -> (Tensor[(2, 2, 13), float32], Tensor[(8, 8, 2), bool], Tensor[(16, 6, 11), float32], Tensor[(33), uint16], Tensor[(396), uint16], Tensor[(16, 11, 10), float64], Tensor[(1760), uint16]) {
  %27 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %28 = cast(%var_8501, dtype="uint16") /* ty=Tensor[(33), uint16] */;
  %29 = cast(%var_8502, dtype="uint16") /* ty=Tensor[(396), uint16] */;
  %30 = reshape(%28, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), uint16] */;
  %31 = reshape(%29, newshape=[3, 12, 11]) /* ty=Tensor[(3, 12, 11), uint16] */;
  %32 = @func_5543(%30, %31) /* ty=(Tensor[(3, 12, 11), uint16], Tensor[(16, 6, 11), float32], Tensor[(440), float64]) */;
  %33 = cast(%var_8509, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
  %34 = reshape(%33, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
  %35 = %27.0;
  %36 = @func_6837() /* ty=Tensor[(8, 8, 2), bool] */;
  %37 = %32.1;
  %38 = @func_7209(%34) /* ty=Tensor[(16, 11, 10), float64] */;
  (%35, %36, %37, %var_8501, %var_8502, %38, %var_8509)
}

def @func_12945() -> (Tensor[(24), float64],) {
  %39 = @func_10729() /* ty=Tensor[(24), float64] */;
  (%39,)
}

def @func_11457() -> Tensor[(14, 6, 9), float32] {
  @func_7948() /* ty=Tensor[(14, 6, 9), float32] */
}

def @func_6533() -> (Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) {
  %40 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %41 = cast(meta[relay.Constant][1] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %42 = reshape(%41, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
  %43 = %40.1;
  %44 = @func_6244(%42) /* ty=Tensor[(2, 3, 4), float64] */;
  (%43, %44, meta[relay.Constant][1] /* ty=Tensor[(24), float64] */)
}

def @func_7032() -> (Tensor[(8, 8, 2), bool],) {
  %45 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  (%45,)
}

def @func_14195(%var_14186: Tensor[(12, 16, 6), float64]) -> Tensor[(12, 16, 6), float64] {
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 16, 6), float64] */, dtype="float64") /* ty=Tensor[(12, 16, 6), float64] */;
  %47 = shape_of(%var_14186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%var_14186, dtype="float64") /* ty=Tensor[(12, 16, 6), float64] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%48, %49) /* ty=Tensor[(12, 16, 6), float64] */
}

def @func_10844() -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(1056), float32]) {
  %50 = @func_7032() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %51 = @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %52 = @func_9434() /* ty=(Tensor[(1056), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32]) */;
  %53 = %52.0;
  %54 = cast(%53, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %55 = tan(%54) /* ty=Tensor[(1056), float64] */;
  %56 = cast(%55, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %57 = %50.0;
  %58 = %51.0;
  %59 = sin(%56) /* ty=Tensor[(1056), float32] */;
  (%57, %58, %59)
}

def @func_8288(%var_8265: Tensor[(24), float64], %var_8271: uint8) -> (Tensor[(24), float64], uint8, uint8, Tensor[(8, 8, 2), bool], Tensor[(128), bool], Tensor[(2, 2, 13), float64]) {
  %60 = @func_6811() /* ty=(Tensor[(24), float64],) */;
  %61 = %60.0;
  %62 = cast(%var_8265, dtype="float64") /* ty=Tensor[(24), float64] */;
  %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(1), int32] */;
  %64 = cast(%61, dtype="float64") /* ty=Tensor[(24), float64] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?), float64] */;
  %66 = cast(%var_8271, dtype="uint8") /* ty=uint8 */;
  %67 = reshape(%66, newshape=[]) /* ty=uint8 */;
  %68 = @func_7752(%67) /* ty=(Tensor[(440), float64], Tensor[(24), float64], Tensor[(6, 2, 12), float64], uint8, Tensor[(8, 8, 2), bool]) */;
  %69 = cast(meta[relay.Constant][3] /* ty=Tensor[(128), bool] */, dtype="bool") /* ty=Tensor[(128), bool] */;
  %70 = reshape(%69, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), bool] */;
  %71 = @func_6435(%70) /* ty=(Tensor[(8, 8, 2), bool],) */;
  %72 = @func_7857() /* ty=(Tensor[(2, 2, 13), float64],) */;
  %73 = divide(%64, %65) /* ty=Tensor[(24), float64] */;
  %74 = %68.3;
  %75 = %71.0;
  %76 = %72.0;
  (%73, %74, %var_8271, %75, meta[relay.Constant][3] /* ty=Tensor[(128), bool] */, %76)
}

def @func_12684() -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) {
  %77 = @func_7903() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %78 = %77.0;
  %79 = @func_11623() /* ty=Tensor[(8, 8, 2), bool] */;
  %80 = @func_7519() /* ty=Tensor[(8, 8, 2), bool] */;
  (%78, %79, %80)
}

def @func_13980(%var_13967: Tensor[(2, 880), uint16]) -> Tensor[(2, 880), float64] {
  %81 = @func_8401() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 880), uint16]) */;
  %82 = %81.2;
  %83 = cast(%var_13967, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(2), int32] */;
  %85 = cast(%82, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  floor_divide(%85, %86) /* ty=Tensor[(2, 880), float64] */
}

def @func_11966(%var_11927: Tensor[(2, 80), int32], %var_11933: Tensor[(1280), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(160), int32], Tensor[(2, 80), int32], Tensor[(756), float32], Tensor[(1280), float32], Tensor[(39), float64], Tensor[(1350), float32], Tensor[(1056), float32], Tensor[(768), bool], Tensor[(2, 2, 13), float32]) {
  %87 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %88 = cast(%var_11927, dtype="int32") /* ty=Tensor[(2, 80), int32] */;
  %89 = reshape(%87, newshape=[]) /* ty=int32 */;
  %90 = reshape(%88, newshape=[160]) /* ty=Tensor[(160), int32] */;
  %91 = @func_8733(%89, %90) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) */;
  %92 = cast(%var_11933, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %93 = cast(meta[relay.Constant][4] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
  %94 = cast(meta[relay.Constant][5] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %95 = cast(meta[relay.Constant][6] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %96 = cast(meta[relay.Constant][7] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %97 = reshape(%92, newshape=[1280]) /* ty=Tensor[(1280), float32] */;
  %98 = reshape(%93, newshape=[39]) /* ty=Tensor[(39), float64] */;
  %99 = reshape(%94, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %100 = reshape(%95, newshape=[1056]) /* ty=Tensor[(1056), float32] */;
  %101 = reshape(%96, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %102 = @func_7006(%97, %98, %99, %100, %101) /* ty=(Tensor[(24), float64], Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(3, 2, 13), float64], Tensor[(39), float64], Tensor[(1350), float32], Tensor[(768), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(8, 8, 2), bool], Tensor[(1056), float32]) */;
  %103 = @func_9997() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %104 = %103.0;
  %105 = cast(%104, dtype="float32") /* ty=Tensor[(2, 2, 13), float32] */;
  %106 = cast(8 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %107 = @func_11389() /* ty=Tensor[(8, 8, 2), bool] */;
  %108 = %91.3;
  %109 = %102.8;
  %110 = divide(%105, %106) /* ty=Tensor[(2, 2, 13), float32] */;
  (%107, %108, %var_11927, %109, %var_11933, meta[relay.Constant][4] /* ty=Tensor[(39), float64] */, meta[relay.Constant][5] /* ty=Tensor[(1350), float32] */, meta[relay.Constant][6] /* ty=Tensor[(1056), float32] */, meta[relay.Constant][7] /* ty=Tensor[(768), bool] */, %110)
}

def @func_6366() -> Tensor[(8, 8, 2), bool] {
  %111 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 8, 2), uint16] */, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %112 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(8, 8, 2), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 8, 2), uint16] */, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%113, %114) /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_11244() -> (Tensor[(16, 11, 10), float64], uint8, Tensor[(24), float64], uint8) {
  %115 = @func_9986() /* ty=(Tensor[(16, 11, 10), float64],) */;
  %116 = cast(meta[relay.Constant][10] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %117 = cast(meta[relay.Constant][11] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %118 = reshape(%116, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %119 = reshape(%117, newshape=[]) /* ty=uint8 */;
  %120 = @func_8288(%118, %119) /* ty=(Tensor[(24), float64], uint8, uint8, Tensor[(8, 8, 2), bool], Tensor[(128), bool], Tensor[(2, 2, 13), float64]) */;
  %121 = %115.0;
  %122 = %120.2;
  (%121, %122, meta[relay.Constant][10] /* ty=Tensor[(24), float64] */, meta[relay.Constant][11] /* ty=uint8 */)
}

def @func_13626() -> (Tensor[(8, 8, 2), bool], Tensor[(16, 11, 10), float64], Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool], Tensor[(24), float64]) {
  %123 = @func_8401() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 880), uint16]) */;
  %124 = @func_11244() /* ty=(Tensor[(16, 11, 10), float64], uint8, Tensor[(24), float64], uint8) */;
  %125 = @func_6811() /* ty=(Tensor[(24), float64],) */;
  %126 = @func_12065() /* ty=Tensor[(8, 8, 2), bool] */;
  %127 = %123.1;
  %128 = %124.0;
  %129 = @func_8872() /* ty=Tensor[(8, 8, 2), bool] */;
  %130 = %125.0;
  (%126, %127, %128, %129, %130)
}

def @func_8108(%var_8081: Tensor[(14, 14, 13), float64]) -> (Tensor[(14, 14, 13), float64], Tensor[(14, 14, 13), float32]) {
  %131 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 14, 13), float64] */, dtype="float64") /* ty=Tensor[(14, 14, 13), float64] */;
  %132 = shape_of(%var_8081, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%var_8081, dtype="float64") /* ty=Tensor[(14, 14, 13), float64] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %135 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 14, 13), float64] */, dtype="float32") /* ty=Tensor[(14, 14, 13), float32] */;
  %136 = floor_mod(%133, %134) /* ty=Tensor[(14, 14, 13), float64] */;
  %137 = cos(%135) /* ty=Tensor[(14, 14, 13), float32] */;
  (%136, %137)
}

def @func_15008() -> (Tensor[(440), float64],) {
  %138 = @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */;
  %139 = %138.6;
  %140 = cast(%139, dtype="float64") /* ty=Tensor[(440), float64] */;
  %141 = erf(%140) /* ty=Tensor[(440), float64] */;
  (%141,)
}

def @func_1854(%var_1843: Tensor[(15, 10, 13), float64], %var_1844: Tensor[(15, 10, 13), float64]) -> (Tensor[(15, 10, 13), float64],) {
  %142 = cast(%var_1844, dtype="float64") /* ty=Tensor[(15, 10, 13), float64] */;
  %143 = shape_of(%var_1843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%var_1843, dtype="float64") /* ty=Tensor[(15, 10, 13), float64] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %146 = mod(%144, %145) /* ty=Tensor[(15, 10, 13), float64] */;
  (%146,)
}

def @func_11881(%var_11843: Tensor[(1, 6, 15), float32], %var_11869: Tensor[(1560), uint8]) -> (Tensor[(1, 6, 15), float32], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) {
  %147 = cast(%var_11843, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
  %148 = cast(%var_11869, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %149 = cast(%var_11869, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %150 = reshape(%148, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %151 = reshape(%149, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %152 = @func_3334(%150, %151) /* ty=(Tensor[(12, 10, 13), uint8],) */;
  %153 = acos(%147) /* ty=Tensor[(1, 6, 15), float32] */;
  %154 = %152.0;
  (%153, %154, %var_11869)
}

def @func_11796() -> (Tensor[(2, 7, ?), bool],) {
  %155 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 7, 1), float32] */, dtype="float32") /* ty=Tensor[(2, 7, 1), float32] */;
  %156 = cos(%155) /* ty=Tensor[(2, 7, 1), float32] */;
  %157 = cast(%156, dtype="bool") /* ty=Tensor[(2, 7, 1), bool] */;
  %158 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(2, 7, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 7, 1), float32] */, dtype="bool") /* ty=Tensor[(2, 7, 1), bool] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %161 = equal(%159, %160) /* ty=Tensor[(2, 7, ?), bool] */;
  (%161,)
}

def @func_14468() -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) {
  %162 = @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %163 = @func_7687() /* ty=Tensor[(8, 8, 2), bool] */;
  %164 = %162.0;
  %165 = @func_9929() /* ty=Tensor[(2, 2, 13), float32] */;
  (%163, %164, %165)
}

def @func_7081(%var_7076: Tensor[(105, 2), uint64], %var_7077: Tensor[(1350), float32]) -> (Tensor[(8, 8, 2), float32], Tensor[(8, 8, 2), bool], Tensor[(3, 14, 5), bool], Tensor[(105, 2), uint64], Tensor[(1350), float32]) {
  %166 = @func_7032() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %167 = %166.0;
  %168 = cast(%167, dtype="float32") /* ty=Tensor[(8, 8, 2), float32] */;
  %169 = sin(%168) /* ty=Tensor[(8, 8, 2), float32] */;
  %170 = cast(%169, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %171 = reshape(%170, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), bool] */;
  %172 = @func_6435(%171) /* ty=(Tensor[(8, 8, 2), bool],) */;
  %173 = cast(%var_7076, dtype="uint64") /* ty=Tensor[(105, 2), uint64] */;
  %174 = cast(%var_7076, dtype="uint64") /* ty=Tensor[(105, 2), uint64] */;
  %175 = cast(%var_7077, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %176 = reshape(%173, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint64] */;
  %177 = reshape(%174, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint64] */;
  %178 = reshape(%175, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %179 = @func_3738(%176, %177, %178) /* ty=(Tensor[(3, 14, 5), bool], Tensor[(15, 9, 10), bool], Tensor[(1350), float32]) */;
  %180 = %172.0;
  %181 = %179.0;
  (%169, %180, %181, %var_7076, %var_7077)
}

def @func_9434() -> (Tensor[(1056), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32]) {
  %182 = @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */;
  %183 = @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */;
  %184 = %183.3;
  %185 = cast(%184, dtype="float32") /* ty=Tensor[(756), float32] */;
  %186 = reshape(%185, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %187 = @func_5000(%186) /* ty=(Tensor[(14, 6, 9), float32],) */;
  %188 = %182.5;
  %189 = %187.0;
  (%188, %184, %189)
}

def @func_11623() -> Tensor[(8, 8, 2), bool] {
  %190 = @func_10252() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), float64]) */;
  %190.1
}

def @func_13768(%var_13725: Tensor[(2, 9, 2), int32], %var_13735: Tensor[(2, 9, 2), int32], %var_13743: Tensor[(1848), float32], %var_13752: Tensor[(2, 96), float64]) -> (Tensor[(2, 9, 2), int32], Tensor[(2, 9, 2), uint32], Tensor[(1350), float32], Tensor[(1848), float32], Tensor[(3696), float32], Tensor[(2, 96), bool]) {
  %191 = cast(%var_13725, dtype="int32") /* ty=Tensor[(2, 9, 2), int32] */;
  %192 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(2, 9, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 9, 2), int32] */, dtype="int32") /* ty=Tensor[(2, 9, 2), int32] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %195 = cast(%var_13735, dtype="uint32") /* ty=Tensor[(2, 9, 2), uint32] */;
  %196 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(2, 9, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 9, 2), int32] */, dtype="uint32") /* ty=Tensor[(2, 9, 2), uint32] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %199 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 96), float64] */, dtype="float64") /* ty=Tensor[(2, 96), float64] */;
  %200 = cast(%var_13743, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %201 = cast(meta[relay.Constant][16] /* ty=Tensor[(3696), float32] */, dtype="float32") /* ty=Tensor[(3696), float32] */;
  %202 = reshape(%199, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), float64] */;
  %203 = reshape(%200, newshape=[1, 1848]) /* ty=Tensor[(1, 1848), float32] */;
  %204 = reshape(%201, newshape=[2, 1848]) /* ty=Tensor[(2, 1848), float32] */;
  %205 = @func_5719(%202, %203, %204) /* ty=(Tensor[(12, 10, 13), uint8], Tensor[(12, 130), uint8], Tensor[(16, 6, 11), float32], Tensor[(440), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(8, 8, 3), int64], Tensor[(2, 1848), float32]) */;
  %206 = cast(%var_13752, dtype="bool") /* ty=Tensor[(2, 96), bool] */;
  %207 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(2, 96), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %208 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 96), float64] */, dtype="bool") /* ty=Tensor[(2, 96), bool] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %210 = bitwise_and(%193, %194) /* ty=Tensor[(2, 9, 2), int32] */;
  %211 = left_shift(%197, %198) /* ty=Tensor[(2, 9, 2), uint32] */;
  %212 = %205.5;
  %213 = less_equal(%208, %209) /* ty=Tensor[(2, 96), bool] */;
  (%210, %211, %212, %var_13743, meta[relay.Constant][16] /* ty=Tensor[(3696), float32] */, %213)
}

def @func_10511(%var_10479: Tensor[(1350), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(6, 2, 12), float64], Tensor[(98), int16], Tensor[(1056), float32], Tensor[(16, 11, 10), float64], Tensor[(1350), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(8, 8, 2), bool]) {
  %214 = @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %215 = cast(meta[relay.Constant][17] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %216 = cast(meta[relay.Constant][18] /* ty=Tensor[(98), int16] */, dtype="int16") /* ty=Tensor[(98), int16] */;
  %217 = cast(meta[relay.Constant][19] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %218 = cast(%var_10479, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %219 = reshape(%215, newshape=[]) /* ty=int16 */;
  %220 = reshape(%216, newshape=[14, 7, 1]) /* ty=Tensor[(14, 7, 1), int16] */;
  %221 = reshape(%217, newshape=[8, 132]) /* ty=Tensor[(8, 132), float32] */;
  %222 = reshape(%218, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %223 = @func_4333(%219, %220, %221, %222) /* ty=(Tensor[(14, 7, 1), int16], Tensor[(8, 132), float32], Tensor[(6, 2, 12), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(16, 6, 11), float32], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) */;
  %224 = @func_9986() /* ty=(Tensor[(16, 11, 10), float64],) */;
  %225 = %224.0;
  %226 = cast(%225, dtype="uint16") /* ty=Tensor[(16, 11, 10), uint16] */;
  %227 = reshape(%226, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
  %228 = cast(%var_10479, dtype="float64") /* ty=Tensor[(1350), float64] */;
  %229 = cast(meta[relay.Constant][17] /* ty=int16 */, dtype="float64") /* ty=float64 */;
  %230 = cast(meta[relay.Constant][17] /* ty=int16 */, dtype="float64") /* ty=float64 */;
  %231 = cast(%225, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
  %232 = cast(meta[relay.Constant][20] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %233 = reshape(%232, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
  %234 = @func_7903() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %235 = %214.0;
  %236 = %223.2;
  %237 = @func_7209(%227) /* ty=Tensor[(16, 11, 10), float64] */;
  %238 = floor_mod(%228, %229) /* ty=Tensor[(1350), float64] */;
  %239 = floor_divide(%230, %231) /* ty=Tensor[(16, 11, 10), float64] */;
  %240 = @func_6244(%233) /* ty=Tensor[(2, 3, 4), float64] */;
  %241 = %234.0;
  (%235, %236, meta[relay.Constant][18] /* ty=Tensor[(98), int16] */, meta[relay.Constant][19] /* ty=Tensor[(1056), float32] */, %237, %238, %239, %240, meta[relay.Constant][20] /* ty=Tensor[(24), float64] */, %241)
}

def @func_14349() -> Tensor[(2, 2, 13), float32] {
  %242 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %242.0
}

def @func_9748() -> Tensor[(2, 2, 13), float32] {
  %243 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %243.0
}

def @func_9816() -> Tensor[(14, 6, 9), float32] {
  @func_7948() /* ty=Tensor[(14, 6, 9), float32] */
}

def @func_14239() -> Tensor[(24), float64] {
  @func_13064() /* ty=Tensor[(24), float64] */
}

def @func_7752(%var_7733: uint8) -> (Tensor[(440), float64], Tensor[(24), float64], Tensor[(6, 2, 12), float64], uint8, Tensor[(8, 8, 2), bool]) {
  %244 = @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */;
  %245 = @func_6811() /* ty=(Tensor[(24), float64],) */;
  %246 = cast(%var_7733, dtype="uint8") /* ty=uint8 */;
  %247 = reshape(%246, newshape=[]) /* ty=uint8 */;
  %248 = @func_1247(%247) /* ty=(Tensor[(6, 2, 12), float64], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) */;
  %249 = %244.6;
  %250 = %245.0;
  %251 = %248.0;
  %252 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  (%249, %250, %251, %var_7733, %252)
}

def @func_7496(%var_7490: Tensor[(768), bool], %var_7491: Tensor[(1056), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(5, 11, 8), float64], Tensor[(440), float64], Tensor[(12, 8, 8), bool], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool]) {
  %253 = cast(meta[relay.Constant][21] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %254 = reshape(%253, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %255 = @func_438(%254) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(16, 6, 11), float32], Tensor[(1056), float32]) */;
  %256 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %257 = cast(%var_7490, dtype="bool") /* ty=Tensor[(768), bool] */;
  %258 = cast(%var_7491, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %259 = %255.0;
  %260 = cast(%259, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %261 = reshape(%256, newshape=[]) /* ty=bool */;
  %262 = reshape(%257, newshape=[12, 8, 8]) /* ty=Tensor[(12, 8, 8), bool] */;
  %263 = reshape(%258, newshape=[1056, 1]) /* ty=Tensor[(1056, 1), float32] */;
  %264 = reshape(%260, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %265 = @func_2519(%261, %262, %263, %264) /* ty=(Tensor[(12, 8, 8), bool], Tensor[(16, 6, 11), float32], Tensor[(1056, 1), float32], Tensor[(1056), float32], Tensor[(440), float64], Tensor[(10, 1, 16), int32]) */;
  %266 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  %267 = cast(%266, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %268 = reshape(%267, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), bool] */;
  %269 = @func_6435(%268) /* ty=(Tensor[(8, 8, 2), bool],) */;
  %270 = %265.0;
  %271 = %269.0;
  (%266, %259, meta[relay.Constant][21] /* ty=Tensor[(440), float64] */, %270, True /* ty=bool */, %var_7490, %var_7491, %271)
}

def @func_7273() -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) {
  %272 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %273 = @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %274 = cast(meta[relay.Constant][22] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %275 = reshape(%274, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %276 = @func_5000(%275) /* ty=(Tensor[(14, 6, 9), float32],) */;
  %277 = %276.0;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
  %279 = reshape(%278, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %280 = @func_5000(%279) /* ty=(Tensor[(14, 6, 9), float32],) */;
  %281 = cast(meta[relay.Constant][23] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %282 = reshape(%281, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %283 = @func_438(%282) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(16, 6, 11), float32], Tensor[(1056), float32]) */;
  %284 = %272.1;
  %285 = %273.0;
  %286 = %280.0;
  %287 = %283.2;
  (%284, %285, %277, meta[relay.Constant][22] /* ty=Tensor[(756), float32] */, %286, %287, meta[relay.Constant][23] /* ty=Tensor[(440), float64] */)
}

def @func_9782() -> Tensor[(24), float64] {
  %288 = @func_8678() /* ty=(Tensor[(24), float64],) */;
  %288.0
}

def @func_6837() -> Tensor[(8, 8, 2), bool] {
  %289 = @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */;
  %289.0
}

def @func_7887(%var_7866: Tensor[(8, 8, 2), bool]) -> Tensor[(8, 8, 2), float32] {
  %290 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  %291 = cast(%var_7866, dtype="float32") /* ty=Tensor[(8, 8, 2), float32] */;
  %292 = shape_of(%290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%290, dtype="float32") /* ty=Tensor[(8, 8, 2), float32] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%293, %294) /* ty=Tensor[(8, 8, 2), float32] */
}

def @func_15303() -> (Tensor[(8, 8, 2), bool],) {
  %295 = @func_10370() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %296 = %295.0;
  (%296,)
}

def @func_13350(%var_13347: Tensor[(768, 1), bool], %var_13348: Tensor[(1056), float32]) -> (int32, Tensor[(8, 8, 2), bool], Tensor[(768, 1), bool], Tensor[(1056), float32]) {
  %297 = @func_11734() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32], Tensor[(160), int32], int32, Tensor[(8, 8, 2), float32]) */;
  %298 = cast(%var_13347, dtype="bool") /* ty=Tensor[(768, 1), bool] */;
  %299 = cast(%var_13348, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %300 = reshape(%298, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %301 = reshape(%299, newshape=[1056]) /* ty=Tensor[(1056), float32] */;
  %302 = @func_7496(%300, %301) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(5, 11, 8), float64], Tensor[(440), float64], Tensor[(12, 8, 8), bool], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool]) */;
  %303 = %297.3;
  %304 = %302.7;
  (%303, %304, %var_13347, %var_13348)
}

def @func_3334(%var_3319: Tensor[(12, 10, 13), uint8], %var_3320: Tensor[(12, 10, 13), uint8]) -> (Tensor[(12, 10, 13), uint8],) {
  %305 = cast(%var_3320, dtype="uint8") /* ty=Tensor[(12, 10, 13), uint8] */;
  %306 = shape_of(%var_3319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%var_3319, dtype="uint8") /* ty=Tensor[(12, 10, 13), uint8] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %309 = left_shift(%307, %308) /* ty=Tensor[(12, 10, 13), uint8] */;
  (%309,)
}

def @func_14820() -> (Tensor[(8, 8, 2), bool],) {
  %310 = @func_8787() /* ty=Tensor[(8, 8, 2), bool] */;
  (%310,)
}

def @func_13449(%var_13426: Tensor[(693), bool], %var_13427: Tensor[(768), bool]) -> (Tensor[(8, 8, 2), bool], Tensor[(9, 11, 7), float32], Tensor[(693), bool], Tensor[(768), bool]) {
  %311 = cast(%var_13426, dtype="bool") /* ty=Tensor[(693), bool] */;
  %312 = cast(%var_13426, dtype="bool") /* ty=Tensor[(693), bool] */;
  %313 = cast(%var_13427, dtype="bool") /* ty=Tensor[(768), bool] */;
  %314 = reshape(%311, newshape=[9, 11, 7]) /* ty=Tensor[(9, 11, 7), bool] */;
  %315 = reshape(%312, newshape=[9, 11, 7]) /* ty=Tensor[(9, 11, 7), bool] */;
  %316 = reshape(%313, newshape=[2, 384]) /* ty=Tensor[(2, 384), bool] */;
  %317 = @func_3586(%314, %315, %316) /* ty=(Tensor[(440), float64], bool, Tensor[(2, 384), bool], Tensor[(1056), float32], Tensor[(9, 11, 7), float32]) */;
  %318 = @func_12065() /* ty=Tensor[(8, 8, 2), bool] */;
  %319 = %317.4;
  (%318, %319, %var_13426, %var_13427)
}

def @func_5994(%var_5945: Tensor[(3, 1, 13), float64], %var_5954: Tensor[(1350), float32], %var_5985: Tensor[(1056), float32], %var_5991: Tensor[(768), bool]) -> (Tensor[(3, 2, 13), float64], Tensor[(3, 14, 5), bool], Tensor[(210), uint64], Tensor[(1350), float32], Tensor[(12, 10, 13), uint8], Tensor[(2, 780), uint8], Tensor[(16, 6, 11), float32], Tensor[(1056), float32], bool, Tensor[(1, 693), bool], Tensor[(768), bool]) {
  %320 = cast(%var_5945, dtype="float64") /* ty=Tensor[(3, 1, 13), float64] */;
  %321 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 2, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 13), float64] */;
  %322 = cast(meta[relay.Constant][25] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %323 = cast(meta[relay.Constant][25] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %324 = cast(%var_5954, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %325 = reshape(%322, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint64] */;
  %326 = reshape(%323, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint64] */;
  %327 = reshape(%324, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %328 = @func_3738(%325, %326, %327) /* ty=(Tensor[(3, 14, 5), bool], Tensor[(15, 9, 10), bool], Tensor[(1350), float32]) */;
  %329 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 780), uint8] */, dtype="uint8") /* ty=Tensor[(2, 780), uint8] */;
  %330 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 780), uint8] */, dtype="uint8") /* ty=Tensor[(2, 780), uint8] */;
  %331 = reshape(%329, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %332 = reshape(%330, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %333 = @func_3334(%331, %332) /* ty=(Tensor[(12, 10, 13), uint8],) */;
  %334 = cast(%var_5985, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %335 = reshape(%334, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float32] */;
  %336 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 693), bool] */, dtype="bool") /* ty=Tensor[(1, 693), bool] */;
  %337 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 693), bool] */, dtype="bool") /* ty=Tensor[(1, 693), bool] */;
  %338 = cast(%var_5991, dtype="bool") /* ty=Tensor[(768), bool] */;
  %339 = reshape(%336, newshape=[9, 11, 7]) /* ty=Tensor[(9, 11, 7), bool] */;
  %340 = reshape(%337, newshape=[9, 11, 7]) /* ty=Tensor[(9, 11, 7), bool] */;
  %341 = reshape(%338, newshape=[2, 384]) /* ty=Tensor[(2, 384), bool] */;
  %342 = @func_3586(%339, %340, %341) /* ty=(Tensor[(440), float64], bool, Tensor[(2, 384), bool], Tensor[(1056), float32], Tensor[(9, 11, 7), float32]) */;
  %343 = floor_mod(%320, %321) /* ty=Tensor[(3, 2, 13), float64] */;
  %344 = %328.0;
  %345 = %333.0;
  %346 = @func_226(%335) /* ty=Tensor[(16, 6, 11), float32] */;
  %347 = %342.1;
  (%343, %344, meta[relay.Constant][25] /* ty=Tensor[(210), uint64] */, %var_5954, %345, meta[relay.Constant][26] /* ty=Tensor[(2, 780), uint8] */, %346, %var_5985, %347, meta[relay.Constant][27] /* ty=Tensor[(1, 693), bool] */, %var_5991)
}

def @func_9038() -> (Tensor[(14, 6, 9), float32],) {
  %348 = @func_7948() /* ty=Tensor[(14, 6, 9), float32] */;
  (%348,)
}

def @func_12768(%var_12765: Tensor[(1, 1, 16), float32]) -> Tensor[(1, 1, 16), float32] {
  %349 = cast(%var_12765, dtype="float32") /* ty=Tensor[(1, 1, 16), float32] */;
  asin(%349) /* ty=Tensor[(1, 1, 16), float32] */
}

def @func_14985() -> Tensor[(8, 8, 2), bool] {
  %350 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %350.1
}

def @func_7687() -> Tensor[(8, 8, 2), bool] {
  @func_6837() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_15233(%var_15225: uint16, %var_15226: Tensor[(28), uint16]) -> (Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool], Tensor[(7, 4, 1), uint16], uint16, Tensor[(28), uint16]) {
  %351 = @func_12579() /* ty=(Tensor[(16, 11, 10), float64],) */;
  %352 = @func_11298() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %353 = cast(%var_15225, dtype="uint16") /* ty=uint16 */;
  %354 = cast(%var_15226, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %355 = reshape(%353, newshape=[]) /* ty=uint16 */;
  %356 = reshape(%354, newshape=[7, 4, 1]) /* ty=Tensor[(7, 4, 1), uint16] */;
  %357 = @func_5123(%355, %356) /* ty=(Tensor[(7, 4, 1), uint16], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) */;
  %358 = %351.0;
  %359 = %352.0;
  %360 = %357.0;
  (%358, %359, %360, %var_15225, %var_15226)
}

def @func_15454() -> (Tensor[(14, 6, 9), float32],) {
  %361 = @func_7653() /* ty=(Tensor[(14, 6, 9), float32],) */;
  %362 = %361.0;
  (%362,)
}

def @func_9961(%var_9954: Tensor[(210), uint64]) -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(210), uint64], Tensor[(135, 10), float32]) {
  %363 = @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %364 = cast(%var_9954, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %365 = cast(meta[relay.Constant][28] /* ty=Tensor[(135, 10), float32] */, dtype="float32") /* ty=Tensor[(135, 10), float32] */;
  %366 = reshape(%364, newshape=[105, 2]) /* ty=Tensor[(105, 2), uint64] */;
  %367 = reshape(%365, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %368 = @func_7081(%366, %367) /* ty=(Tensor[(8, 8, 2), float32], Tensor[(8, 8, 2), bool], Tensor[(3, 14, 5), bool], Tensor[(105, 2), uint64], Tensor[(1350), float32]) */;
  %369 = %363.0;
  %370 = %368.1;
  (%369, %370, %var_9954, meta[relay.Constant][28] /* ty=Tensor[(135, 10), float32] */)
}

def @func_14668() -> (Tensor[(24), float64], Tensor[(24), float64]) {
  %371 = @func_13053() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float64], Tensor[(14, 6, 9), float32]) */;
  %372 = %371.0;
  %373 = @func_13064() /* ty=Tensor[(24), float64] */;
  (%372, %373)
}

def @func_9997() -> (Tensor[(2, 2, 13), float32],) {
  %374 = @func_9748() /* ty=Tensor[(2, 2, 13), float32] */;
  (%374,)
}

def @func_10252() -> (Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), float64]) {
  %375 = @func_9811() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(24), float64]) */;
  %376 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %377 = %375.1;
  %378 = @func_9275() /* ty=Tensor[(8, 8, 2), bool] */;
  %379 = %376.0;
  (%377, %378, %379)
}

def @func_10655() -> (Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool]) {
  %380 = @func_9986() /* ty=(Tensor[(16, 11, 10), float64],) */;
  %381 = @func_10252() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), float64]) */;
  %382 = %380.0;
  %383 = %381.1;
  (%382, %383)
}

def @func_8071(%var_8040: Tensor[(14, 6, 9), float32]) -> Tensor[(14, 6, 9), bool] {
  %384 = @func_7653() /* ty=(Tensor[(14, 6, 9), float32],) */;
  %385 = %384.0;
  %386 = cast(%var_8040, dtype="bool") /* ty=Tensor[(14, 6, 9), bool] */;
  %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%385, dtype="bool") /* ty=Tensor[(14, 6, 9), bool] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%388, %389) /* ty=Tensor[(14, 6, 9), bool] */
}

def @func_11389() -> Tensor[(8, 8, 2), bool] {
  @func_7519() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_11574(%var_11565: Tensor[(2, 7, 7), int64], %var_11566: Tensor[(2, 7, 7), int64]) -> Tensor[(2, 7, 7), bool] {
  %390 = cast(%var_11566, dtype="bool") /* ty=Tensor[(2, 7, 7), bool] */;
  %391 = shape_of(%var_11565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%var_11565, dtype="bool") /* ty=Tensor[(2, 7, 7), bool] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%392, %393) /* ty=Tensor[(2, 7, 7), bool] */
}

def @func_13869() -> (Tensor[(24), float64], Tensor[(24), float64]) {
  %394 = @func_12945() /* ty=(Tensor[(24), float64],) */;
  %395 = %394.0;
  %396 = @func_9782() /* ty=Tensor[(24), float64] */;
  (%395, %396)
}

def @func_9252() -> (Tensor[(2, 2, 13), float32], Tensor[(5, 16, 16), float32], Tensor[(1280), float32]) {
  %397 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %398 = cast(meta[relay.Constant][29] /* ty=Tensor[(1280), float32] */, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %399 = reshape(%398, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), float32] */;
  %400 = %397.0;
  %401 = @func_2674(%399) /* ty=Tensor[(5, 16, 16), float32] */;
  (%400, %401, meta[relay.Constant][29] /* ty=Tensor[(1280), float32] */)
}

def @func_11201(%var_11192: uint8) -> (Tensor[(8, 8, 2), bool], uint8, uint8) {
  %402 = @func_9560() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(768), bool], Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) */;
  %403 = cast(%var_11192, dtype="uint8") /* ty=uint8 */;
  %404 = reshape(%403, newshape=[]) /* ty=uint8 */;
  %405 = @func_7752(%404) /* ty=(Tensor[(440), float64], Tensor[(24), float64], Tensor[(6, 2, 12), float64], uint8, Tensor[(8, 8, 2), bool]) */;
  %406 = %402.5;
  %407 = %405.3;
  (%406, %407, %var_11192)
}

def @func_8560() -> Tensor[(8, 8, 2), bool] {
  %408 = @func_7903() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %408.0
}

def @func_5123(%var_5100: uint16, %var_5101: Tensor[(7, 4, 1), uint16]) -> (Tensor[(7, 4, 1), uint16], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) {
  %409 = cast(%var_5100, dtype="uint16") /* ty=uint16 */;
  %410 = cast(%var_5101, dtype="uint16") /* ty=Tensor[(7, 4, 1), uint16] */;
  %411 = cast(meta[relay.Constant][30] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %412 = cast(meta[relay.Constant][30] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %413 = reshape(%411, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %414 = reshape(%412, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %415 = @func_3334(%413, %414) /* ty=(Tensor[(12, 10, 13), uint8],) */;
  %416 = bitwise_xor(%409, %410) /* ty=Tensor[(7, 4, 1), uint16] */;
  %417 = %415.0;
  (%416, %417, meta[relay.Constant][30] /* ty=Tensor[(1560), uint8] */)
}

def @func_7519() -> Tensor[(8, 8, 2), bool] {
  %418 = @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */;
  %418.0
}

def @func_15376() -> (Tensor[(8, 8, 2), float64], Tensor[(24), float64], Tensor[(24), float64]) {
  %419 = @func_9116() /* ty=Tensor[(8, 8, 2), bool] */;
  %420 = cast(%419, dtype="float64") /* ty=Tensor[(8, 8, 2), float64] */;
  %421 = @func_8678() /* ty=(Tensor[(24), float64],) */;
  %422 = exp(%420) /* ty=Tensor[(8, 8, 2), float64] */;
  %423 = %421.0;
  %424 = @func_14239() /* ty=Tensor[(24), float64] */;
  (%422, %423, %424)
}

def @func_12549() -> (Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) {
  %425 = @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %426 = %425.0;
  %427 = @func_9748() /* ty=Tensor[(2, 2, 13), float32] */;
  (%426, %427)
}

def @func_7447(%var_7356: Tensor[(720), int64], %var_7402: int32) -> (Tensor[(8, 8, 2), bool], Tensor[(3, 16, 15), int64], Tensor[(720), int64], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32], Tensor[(1056), float32]) {
  %428 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %429 = cast(%var_7356, dtype="int64") /* ty=Tensor[(720), int64] */;
  %430 = reshape(%429, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), int64] */;
  %431 = @func_4663(%430) /* ty=(Tensor[(3, 16, 15), int64],) */;
  %432 = cast(%var_7402, dtype="int32") /* ty=int32 */;
  %433 = cast(meta[relay.Constant][31] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %434 = reshape(%432, newshape=[]) /* ty=int32 */;
  %435 = reshape(%433, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int32] */;
  %436 = @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */;
  %437 = %428.1;
  %438 = %431.0;
  %439 = @func_553(%434, %435) /* ty=Tensor[(10, 1, 16), int32] */;
  %440 = %436.5;
  (%437, %438, %var_7356, %439, %var_7402, meta[relay.Constant][31] /* ty=Tensor[(160), int32] */, %440)
}

def @func_1247(%var_1222: uint8) -> (Tensor[(6, 2, 12), float64], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) {
  %441 = cast(%var_1222, dtype="uint8") /* ty=uint8 */;
  %442 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 2, 12), uint8] */, dtype="uint8") /* ty=Tensor[(6, 2, 12), uint8] */;
  %443 = maximum(%441, %442) /* ty=Tensor[(6, 2, 12), uint8] */;
  %444 = cast(%443, dtype="float64") /* ty=Tensor[(6, 2, 12), float64] */;
  %445 = cast(%var_1222, dtype="int32") /* ty=int32 */;
  %446 = cast(meta[relay.Constant][33] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %447 = reshape(%445, newshape=[]) /* ty=int32 */;
  %448 = reshape(%446, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int32] */;
  %449 = asinh(%444) /* ty=Tensor[(6, 2, 12), float64] */;
  %450 = @func_553(%447, %448) /* ty=Tensor[(10, 1, 16), int32] */;
  (%449, %450, meta[relay.Constant][33] /* ty=Tensor[(160), int32] */)
}

def @func_14935() -> (Tensor[(24), float64], Tensor[(8, 8, 2), bool]) {
  %451 = @func_9811() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(24), float64]) */;
  %452 = @func_8651() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %453 = %451.1;
  %454 = %452.0;
  (%453, %454)
}

def @func_4333(%var_4260: int16, %var_4261: Tensor[(14, 7, 1), int16], %var_4270: Tensor[(8, 132), float32], %var_4294: Tensor[(1350), float32]) -> (Tensor[(14, 7, 1), int16], Tensor[(8, 132), float32], Tensor[(6, 2, 12), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(16, 6, 11), float32], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) {
  %455 = cast(%var_4260, dtype="int16") /* ty=int16 */;
  %456 = cast(%var_4261, dtype="int16") /* ty=Tensor[(14, 7, 1), int16] */;
  %457 = cast(%var_4260, dtype="uint8") /* ty=uint8 */;
  %458 = reshape(%457, newshape=[]) /* ty=uint8 */;
  %459 = @func_1247(%458) /* ty=(Tensor[(6, 2, 12), float64], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) */;
  %460 = cast(%var_4294, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %461 = cast(%var_4294, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %462 = reshape(%460, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %463 = reshape(%461, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %464 = @func_2603(%462, %463) /* ty=(Tensor[(15, 9, 10), bool],) */;
  %465 = cast(%var_4270, dtype="float32") /* ty=Tensor[(8, 132), float32] */;
  %466 = reshape(%465, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float32] */;
  %467 = @func_226(%466) /* ty=Tensor[(16, 6, 11), float32] */;
  %468 = cast(%467, dtype="float32") /* ty=Tensor[(16, 6, 11), float32] */;
  %469 = cast(%var_4260, dtype="int32") /* ty=int32 */;
  %470 = cast(meta[relay.Constant][34] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %471 = reshape(%469, newshape=[]) /* ty=int32 */;
  %472 = reshape(%470, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int32] */;
  %473 = bitwise_and(%455, %456) /* ty=Tensor[(14, 7, 1), int16] */;
  %474 = %459.0;
  %475 = %464.0;
  %476 = log10(%468) /* ty=Tensor[(16, 6, 11), float32] */;
  %477 = @func_553(%471, %472) /* ty=Tensor[(10, 1, 16), int32] */;
  (%473, %var_4270, %474, %475, %var_4294, %476, %477, meta[relay.Constant][34] /* ty=Tensor[(160), int32] */)
}

def @func_8651() -> (Tensor[(8, 8, 2), bool],) {
  %478 = @func_8560() /* ty=Tensor[(8, 8, 2), bool] */;
  (%478,)
}

def @func_9883(%var_9871: Tensor[(1350), float32], %var_9872: Tensor[(128), bool]) -> (Tensor[(2, 2, 13), float64], Tensor[(1848), float32], Tensor[(1350), float32], Tensor[(128), bool]) {
  %479 = @func_7857() /* ty=(Tensor[(2, 2, 13), float64],) */;
  %480 = cast(%var_9871, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %481 = cast(%var_9872, dtype="bool") /* ty=Tensor[(128), bool] */;
  %482 = reshape(%480, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %483 = reshape(%481, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), bool] */;
  %484 = @func_6582(%482, %483) /* ty=(Tensor[(1350), float32], Tensor[(1350), float32], Tensor[(1848), float32], Tensor[(8, 8, 2), bool]) */;
  %485 = %479.0;
  %486 = %484.2;
  (%485, %486, %var_9871, %var_9872)
}

def @func_11085() -> (Tensor[(24), float64],) {
  %487 = @func_9782() /* ty=Tensor[(24), float64] */;
  (%487,)
}

def @func_5543(%var_5523: Tensor[(3, 1, 11), uint16], %var_5524: Tensor[(3, 12, 11), uint16]) -> (Tensor[(3, 12, 11), uint16], Tensor[(16, 6, 11), float32], Tensor[(440), float64]) {
  %488 = cast(%var_5523, dtype="uint16") /* ty=Tensor[(3, 1, 11), uint16] */;
  %489 = cast(%var_5524, dtype="uint16") /* ty=Tensor[(3, 12, 11), uint16] */;
  %490 = cast(meta[relay.Constant][35] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %491 = reshape(%490, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %492 = @func_438(%491) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(16, 6, 11), float32], Tensor[(1056), float32]) */;
  %493 = bitwise_xor(%488, %489) /* ty=Tensor[(3, 12, 11), uint16] */;
  %494 = %492.1;
  (%493, %494, meta[relay.Constant][35] /* ty=Tensor[(440), float64] */)
}

def @func_12756(%var_12736: int32) -> (int32, Tensor[(8, 8, 2), float64]) {
  %495 = @func_7687() /* ty=Tensor[(8, 8, 2), bool] */;
  %496 = cast(%var_12736, dtype="int32") /* ty=int32 */;
  %497 = reshape(%496, newshape=[]) /* ty=int32 */;
  %498 = @func_11061(%497) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(1560), uint8], Tensor[(8, 8, 2), bool], Tensor[(12, 10, 13), float64], Tensor[(8, 8, 2), bool], int32, Tensor[(720), int64], int32, Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(2, 2, 13), float32], Tensor[(2, 2, 13), float64], Tensor[(8, 8, 2), bool]) */;
  %499 = %498.7;
  %500 = cast(%495, dtype="float64") /* ty=Tensor[(8, 8, 2), float64] */;
  %501 = cast(%499, dtype="float64") /* ty=float64 */;
  %502 = floor_mod(%500, %501) /* ty=Tensor[(8, 8, 2), float64] */;
  (%var_12736, %502)
}

def @func_12218(%var_12209: Tensor[(14, 7, 13), float32]) -> Tensor[(14, 7, 13), float32] {
  %503 = cast(9.00047f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %504 = cast(%var_12209, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  floor_mod(%503, %504) /* ty=Tensor[(14, 7, 13), float32] */
}

def @func_5719(%var_5667: Tensor[(8, 8, 3), float64], %var_5696: Tensor[(1, 1848), float32], %var_5714: Tensor[(2, 1848), float32]) -> (Tensor[(12, 10, 13), uint8], Tensor[(12, 130), uint8], Tensor[(16, 6, 11), float32], Tensor[(440), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(8, 8, 3), int64], Tensor[(2, 1848), float32]) {
  %505 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 130), uint8] */, dtype="uint8") /* ty=Tensor[(12, 130), uint8] */;
  %506 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 130), uint8] */, dtype="uint8") /* ty=Tensor[(12, 130), uint8] */;
  %507 = reshape(%505, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %508 = reshape(%506, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %509 = @func_3334(%507, %508) /* ty=(Tensor[(12, 10, 13), uint8],) */;
  %510 = cast(meta[relay.Constant][37] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %511 = reshape(%510, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %512 = @func_438(%511) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(16, 6, 11), float32], Tensor[(1056), float32]) */;
  %513 = cast(meta[relay.Constant][38] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %514 = cast(%var_5696, dtype="float32") /* ty=Tensor[(1, 1848), float32] */;
  %515 = reshape(%513, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %516 = reshape(%514, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float32] */;
  %517 = @func_4892(%515, %516) /* ty=(Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(12, 14, 11), float32], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(12, 14, 11), float64]) */;
  %518 = cast(%var_5667, dtype="float64") /* ty=Tensor[(8, 8, 3), float64] */;
  %519 = log(%518) /* ty=Tensor[(8, 8, 3), float64] */;
  %520 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 8, 3), float64] */, dtype="int64") /* ty=Tensor[(8, 8, 3), int64] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%519, dtype="int64") /* ty=Tensor[(8, 8, 3), int64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %524 = cast(%var_5696, dtype="float32") /* ty=Tensor[(1, 1848), float32] */;
  %525 = cast(%var_5714, dtype="float32") /* ty=Tensor[(2, 1848), float32] */;
  %526 = %509.0;
  %527 = %512.1;
  %528 = %517.3;
  %529 = bitwise_xor(%522, %523) /* ty=Tensor[(8, 8, 3), int64] */;
  %530 = divide(%524, %525) /* ty=Tensor[(2, 1848), float32] */;
  (%526, meta[relay.Constant][36] /* ty=Tensor[(12, 130), uint8] */, %527, meta[relay.Constant][37] /* ty=Tensor[(440), float64] */, %528, meta[relay.Constant][38] /* ty=Tensor[(1350), float32] */, %529, %530)
}

def @func_13702(%var_13695: int32) -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) {
  %531 = @func_12684() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) */;
  %532 = cast(%var_13695, dtype="int32") /* ty=int32 */;
  %533 = cast(meta[relay.Constant][40] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %534 = reshape(%532, newshape=[]) /* ty=int32 */;
  %535 = reshape(%533, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int32] */;
  %536 = @func_8787() /* ty=Tensor[(8, 8, 2), bool] */;
  %537 = %531.1;
  %538 = @func_553(%534, %535) /* ty=Tensor[(10, 1, 16), int32] */;
  (%536, %537, %538, %var_13695, meta[relay.Constant][40] /* ty=Tensor[(160), int32] */)
}

def @func_11734() -> (Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32], Tensor[(160), int32], int32, Tensor[(8, 8, 2), float32]) {
  %539 = @func_10655() /* ty=(Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool]) */;
  %540 = @func_7821() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %541 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %542 = reshape(%541, newshape=[]) /* ty=int32 */;
  %543 = @func_7583(%542) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) */;
  %544 = @func_8560() /* ty=Tensor[(8, 8, 2), bool] */;
  %545 = cast(%544, dtype="float32") /* ty=Tensor[(8, 8, 2), float32] */;
  %546 = %539.1;
  %547 = %540.0;
  %548 = %543.3;
  %549 = acos(%545) /* ty=Tensor[(8, 8, 2), float32] */;
  (%546, %547, %548, 6 /* ty=int32 */, %549)
}

def @func_7800() -> (Tensor[(2, 2, 13), float32],) {
  %550 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 2, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 2, 13), float32] */;
  %551 = log10(%550) /* ty=Tensor[(2, 2, 13), float32] */;
  (%551,)
}

def @func_13064() -> Tensor[(24), float64] {
  %552 = @func_8933() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool]) */;
  %552.0
}

def @func_15094() -> (Tensor[(2, 7, ?), bool], Tensor[(8, 8, 2), bool]) {
  %553 = @func_11796() /* ty=(Tensor[(2, 7, ?), bool],) */;
  %554 = @func_10370() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %555 = %553.0;
  %556 = %554.0;
  (%555, %556)
}

def @func_10696() -> Tensor[(8, 8, 2), bool] {
  %557 = @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */;
  %557.0
}

def @func_12914(%var_12849: Tensor[(1950), float64]) -> (Tensor[(24), float64], uint8, Tensor[(1950), float64], Tensor[(1560), int16], Tensor[(2, 880), bool], Tensor[(2, 880), float32], Tensor[(2, 880), float64]) {
  %558 = @func_11085() /* ty=(Tensor[(24), float64],) */;
  %559 = cast(meta[relay.Constant][42] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %560 = cast(meta[relay.Constant][43] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %561 = cast(%var_12849, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %562 = reshape(%559, newshape=[]) /* ty=uint8 */;
  %563 = reshape(%560, newshape=[1560]) /* ty=Tensor[(1560), uint8] */;
  %564 = reshape(%561, newshape=[1950]) /* ty=Tensor[(1950), float64] */;
  %565 = @func_6762(%562, %563, %564) /* ty=(Tensor[(2, 3, 4), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(10, 1, 16), int32], uint8, Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8], Tensor[(2, 3, 4), float64], Tensor[(15, 10, 13), float64], Tensor[(1950), float64]) */;
  %566 = %565.4;
  %567 = cast(%566, dtype="int16") /* ty=int16 */;
  %568 = cast(meta[relay.Constant][43] /* ty=Tensor[(1560), uint8] */, dtype="int16") /* ty=Tensor[(1560), int16] */;
  %569 = @func_9182() /* ty=(Tensor[(2, 2, 13), float32], Tensor[(2, 880), uint16]) */;
  %570 = %569.1;
  %571 = cast(%570, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
  %572 = tan(%571) /* ty=Tensor[(2, 880), float64] */;
  %573 = cast(%572, dtype="bool") /* ty=Tensor[(2, 880), bool] */;
  %574 = shape_of(%570, dtype="int32") /* ty=Tensor[(2), int32] */;
  %575 = cast(%570, dtype="bool") /* ty=Tensor[(2, 880), bool] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %577 = cast(%572, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
  %578 = atanh(%577) /* ty=Tensor[(2, 880), float64] */;
  %579 = cast(%578, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
  %580 = sqrt(%579) /* ty=Tensor[(2, 880), float64] */;
  %581 = cast(%580, dtype="float32") /* ty=Tensor[(2, 880), float32] */;
  %582 = cast(%572, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
  %583 = cast(%566, dtype="float64") /* ty=float64 */;
  %584 = %558.0;
  %585 = bitwise_or(%567, %568) /* ty=Tensor[(1560), int16] */;
  %586 = logical_or(%575, %576) /* ty=Tensor[(2, 880), bool] */;
  %587 = rsqrt(%581) /* ty=Tensor[(2, 880), float32] */;
  %588 = mod(%582, %583) /* ty=Tensor[(2, 880), float64] */;
  (%584, meta[relay.Constant][42] /* ty=uint8 */, %var_12849, %585, %586, %587, %588)
}

def @func_15442(%var_15411: Tensor[(84), float32]) -> (Tensor[(8, 8, 2), bool], uint8, Tensor[(?, 12, 7), float64], Tensor[(84), float32], Tensor[(8, 8, 2), bool], Tensor[(2, 880), uint16], Tensor[(5, 16, 16), float32]) {
  %589 = @func_13950() /* ty=(uint8,) */;
  %590 = cast(%var_15411, dtype="float32") /* ty=Tensor[(84), float32] */;
  %591 = reshape(%590, newshape=[1, 12, 7]) /* ty=Tensor[(1, 12, 7), float32] */;
  %592 = @func_12364(%591) /* ty=(Tensor[(?, 12, 7), float64],) */;
  %593 = @func_15257() /* ty=(Tensor[(2, 880), uint16],) */;
  %594 = @func_9252() /* ty=(Tensor[(2, 2, 13), float32], Tensor[(5, 16, 16), float32], Tensor[(1280), float32]) */;
  %595 = @func_11623() /* ty=Tensor[(8, 8, 2), bool] */;
  %596 = %589.0;
  %597 = %592.0;
  %598 = @func_15151() /* ty=Tensor[(8, 8, 2), bool] */;
  %599 = %593.0;
  %600 = %594.1;
  (%595, %596, %597, %var_15411, %598, %599, %600)
}

def @func_15151() -> Tensor[(8, 8, 2), bool] {
  %601 = @func_10931() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %601.0
}

def @func_2603(%var_2591: Tensor[(15, 9, 10), float32], %var_2592: Tensor[(15, 9, 10), float32]) -> (Tensor[(15, 9, 10), bool],) {
  %602 = cast(%var_2592, dtype="bool") /* ty=Tensor[(15, 9, 10), bool] */;
  %603 = shape_of(%var_2591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%var_2591, dtype="bool") /* ty=Tensor[(15, 9, 10), bool] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %606 = greater(%604, %605) /* ty=Tensor[(15, 9, 10), bool] */;
  (%606,)
}

def @func_7006(%var_6880: Tensor[(1280), float32], %var_6893: Tensor[(39), float64], %var_6894: Tensor[(1350), float32], %var_6895: Tensor[(1056), float32], %var_6896: Tensor[(768), bool]) -> (Tensor[(24), float64], Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(3, 2, 13), float64], Tensor[(39), float64], Tensor[(1350), float32], Tensor[(768), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(8, 8, 2), bool], Tensor[(1056), float32]) {
  %607 = @func_6811() /* ty=(Tensor[(24), float64],) */;
  %608 = cast(%var_6880, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %609 = reshape(%608, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), float32] */;
  %610 = cast(%var_6893, dtype="float64") /* ty=Tensor[(39), float64] */;
  %611 = cast(%var_6894, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %612 = cast(%var_6895, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %613 = cast(%var_6896, dtype="bool") /* ty=Tensor[(768), bool] */;
  %614 = reshape(%610, newshape=[3, 1, 13]) /* ty=Tensor[(3, 1, 13), float64] */;
  %615 = reshape(%611, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %616 = reshape(%612, newshape=[1056]) /* ty=Tensor[(1056), float32] */;
  %617 = reshape(%613, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %618 = @func_5994(%614, %615, %616, %617) /* ty=(Tensor[(3, 2, 13), float64], Tensor[(3, 14, 5), bool], Tensor[(210), uint64], Tensor[(1350), float32], Tensor[(12, 10, 13), uint8], Tensor[(2, 780), uint8], Tensor[(16, 6, 11), float32], Tensor[(1056), float32], bool, Tensor[(1, 693), bool], Tensor[(768), bool]) */;
  %619 = cast(meta[relay.Constant][44] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %620 = reshape(%619, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %621 = @func_5000(%620) /* ty=(Tensor[(14, 6, 9), float32],) */;
  %622 = cast(meta[relay.Constant][45] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %623 = shape_of(%var_6895, dtype="int32") /* ty=Tensor[(1), int32] */;
  %624 = cast(%var_6895, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?), float32] */;
  %626 = %607.0;
  %627 = @func_2674(%609) /* ty=Tensor[(5, 16, 16), float32] */;
  %628 = %618.0;
  %629 = %621.0;
  %630 = @func_6837() /* ty=Tensor[(8, 8, 2), bool] */;
  %631 = power(%624, %625) /* ty=Tensor[(1056), float32] */;
  (%626, %627, %var_6880, %628, %var_6893, %var_6894, %var_6896, %629, meta[relay.Constant][44] /* ty=Tensor[(756), float32] */, %630, %631)
}

def @func_15540(%var_15499: Tensor[(384, 2), bool], %var_15501: Tensor[(440, 1), float64]) -> (Tensor[(8, 8, 2), bool], Tensor[(440), float64], bool, Tensor[(384, 2), bool], Tensor[(440, 1056), bool], Tensor[(8, 8, 2), bool]) {
  %632 = @func_10296() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) */;
  %633 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %634 = cast(%var_15499, dtype="bool") /* ty=Tensor[(384, 2), bool] */;
  %635 = cast(meta[relay.Constant][46] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %636 = cast(%var_15501, dtype="float64") /* ty=Tensor[(440, 1), float64] */;
  %637 = reshape(%633, newshape=[]) /* ty=bool */;
  %638 = reshape(%634, newshape=[12, 8, 8]) /* ty=Tensor[(12, 8, 8), bool] */;
  %639 = reshape(%635, newshape=[1056, 1]) /* ty=Tensor[(1056, 1), float32] */;
  %640 = reshape(%636, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %641 = @func_2519(%637, %638, %639, %640) /* ty=(Tensor[(12, 8, 8), bool], Tensor[(16, 6, 11), float32], Tensor[(1056, 1), float32], Tensor[(1056), float32], Tensor[(440), float64], Tensor[(10, 1, 16), int32]) */;
  %642 = cast(%var_15501, dtype="bool") /* ty=Tensor[(440, 1), bool] */;
  %643 = cast(meta[relay.Constant][46] /* ty=Tensor[(1056), float32] */, dtype="bool") /* ty=Tensor[(1056), bool] */;
  %644 = @func_10252() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), float64]) */;
  %645 = %632.0;
  %646 = %641.4;
  %647 = greater_equal(%642, %643) /* ty=Tensor[(440, 1056), bool] */;
  %648 = %644.1;
  (%645, %646, True /* ty=bool */, %var_15499, %647, %648)
}

def @main(%var_15590: Tensor[(768), bool], %var_15591: Tensor[(264, 4), float32], %var_15592: Tensor[(5, 390), float64]) -> (Tensor[(2, 7, 24), int16], Tensor[(768), bool], Tensor[(126), uint32], Tensor[(768), bool], Tensor[(5, 390), float64], Tensor[(8, 8, 2), bool], Tensor[(264, 4), int16]) {
  %649 = @func_12405() /* ty=(Tensor[(24), float64],) */;
  %650 = %649.0;
  %651 = @func_11796() /* ty=(Tensor[(2, 7, ?), bool],) */;
  %652 = %651.0;
  %653 = cast(%650, dtype="int16") /* ty=Tensor[(24), int16] */;
  %654 = cast(%652, dtype="int16") /* ty=Tensor[(2, 7, ?), int16] */;
  %655 = cast(meta[relay.Constant][47] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %656 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %657 = cast(%var_15590, dtype="bool") /* ty=Tensor[(768), bool] */;
  %658 = cast(%var_15591, dtype="float32") /* ty=Tensor[(264, 4), float32] */;
  %659 = cast(%var_15592, dtype="float64") /* ty=Tensor[(5, 390), float64] */;
  %660 = reshape(%655, newshape=[7, 2, 9]) /* ty=Tensor[(7, 2, 9), uint32] */;
  %661 = reshape(%656, newshape=[]) /* ty=bool */;
  %662 = reshape(%657, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %663 = reshape(%658, newshape=[1056]) /* ty=Tensor[(1056), float32] */;
  %664 = reshape(%659, newshape=[130, 15]) /* ty=Tensor[(130, 15), float64] */;
  %665 = @func_4110(%660, %661, %662, %663, %664) /* ty=(Tensor[(7, 2, 9), uint32], Tensor[(768), bool], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(15, 10, 13), float64], Tensor[(130, 15), float64]) */;
  %666 = cast(%var_15591, dtype="int16") /* ty=Tensor[(264, 4), int16] */;
  %667 = cast(False /* ty=bool */, dtype="int16") /* ty=int16 */;
  %668 = subtract(%653, %654) /* ty=Tensor[(2, 7, 24), int16] */;
  %669 = %665.3;
  %670 = @func_15469() /* ty=Tensor[(8, 8, 2), bool] */;
  %671 = right_shift(%666, %667) /* ty=Tensor[(264, 4), int16] */;
  (%668, %669, meta[relay.Constant][47] /* ty=Tensor[(126), uint32] */, %var_15590, %var_15592, %670, %671)
}

def @func_14133() -> (uint8, Tensor[(8, 8, 2), bool]) {
  %672 = @func_13950() /* ty=(uint8,) */;
  %673 = %672.0;
  %674 = @func_11439() /* ty=Tensor[(8, 8, 2), bool] */;
  (%673, %674)
}

def @func_9596(%var_9563: Tensor[(6, 16, 12), uint64], %var_9571: Tensor[(256), uint16], %var_9578: Tensor[(675, 2), float32]) -> (Tensor[(6, 16, 12), bool], Tensor[(12, 10, 13), uint8], Tensor[(256), uint16], Tensor[(8, 8, 2), bool], Tensor[(210), uint64], Tensor[(675, 2), float32], Tensor[(24), float64]) {
  %675 = cast(%var_9563, dtype="bool") /* ty=Tensor[(6, 16, 12), bool] */;
  %676 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(6, 16, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 16, 12), uint64] */, dtype="bool") /* ty=Tensor[(6, 16, 12), bool] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %679 = cast(%var_9571, dtype="uint16") /* ty=Tensor[(256), uint16] */;
  %680 = cast(%var_9571, dtype="uint16") /* ty=Tensor[(256), uint16] */;
  %681 = reshape(%679, newshape=[8, 8, 4]) /* ty=Tensor[(8, 8, 4), uint16] */;
  %682 = reshape(%680, newshape=[8, 8, 4]) /* ty=Tensor[(8, 8, 4), uint16] */;
  %683 = @func_5430(%681, %682) /* ty=(Tensor[(3, 14, 5), bool], Tensor[(1, 210), uint64], Tensor[(1350), float32], Tensor[(8, 8, 4), float64], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) */;
  %684 = cast(meta[relay.Constant][49] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %685 = cast(%var_9578, dtype="float32") /* ty=Tensor[(675, 2), float32] */;
  %686 = reshape(%684, newshape=[105, 2]) /* ty=Tensor[(105, 2), uint64] */;
  %687 = reshape(%685, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %688 = @func_7081(%686, %687) /* ty=(Tensor[(8, 8, 2), float32], Tensor[(8, 8, 2), bool], Tensor[(3, 14, 5), bool], Tensor[(105, 2), uint64], Tensor[(1350), float32]) */;
  %689 = @func_6811() /* ty=(Tensor[(24), float64],) */;
  %690 = less(%677, %678) /* ty=Tensor[(6, 16, 12), bool] */;
  %691 = %683.4;
  %692 = %688.1;
  %693 = %689.0;
  (%690, %691, %var_9571, %692, meta[relay.Constant][49] /* ty=Tensor[(210), uint64] */, %var_9578, %693)
}

def @func_13479() -> (uint8, Tensor[(15, 10, 13), float64], Tensor[(1560), uint8], Tensor[(1950), float64]) {
  %694 = @func_11244() /* ty=(Tensor[(16, 11, 10), float64], uint8, Tensor[(24), float64], uint8) */;
  %695 = %694.3;
  %696 = cast(%695, dtype="uint8") /* ty=uint8 */;
  %697 = cast(meta[relay.Constant][50] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %698 = cast(meta[relay.Constant][51] /* ty=Tensor[(1950), float64] */, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %699 = reshape(%696, newshape=[]) /* ty=uint8 */;
  %700 = reshape(%697, newshape=[1560]) /* ty=Tensor[(1560), uint8] */;
  %701 = reshape(%698, newshape=[1950]) /* ty=Tensor[(1950), float64] */;
  %702 = @func_6762(%699, %700, %701) /* ty=(Tensor[(2, 3, 4), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(10, 1, 16), int32], uint8, Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8], Tensor[(2, 3, 4), float64], Tensor[(15, 10, 13), float64], Tensor[(1950), float64]) */;
  %703 = %702.8;
  (%695, %703, meta[relay.Constant][50] /* ty=Tensor[(1560), uint8] */, meta[relay.Constant][51] /* ty=Tensor[(1950), float64] */)
}

def @func_9275() -> Tensor[(8, 8, 2), bool] {
  %704 = @func_7032() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %704.0
}

def @func_5430(%var_5377: Tensor[(8, 8, 4), uint16], %var_5378: Tensor[(8, 8, 4), uint16]) -> (Tensor[(3, 14, 5), bool], Tensor[(1, 210), uint64], Tensor[(1350), float32], Tensor[(8, 8, 4), float64], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) {
  %705 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 210), uint64] */, dtype="uint64") /* ty=Tensor[(1, 210), uint64] */;
  %706 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 210), uint64] */, dtype="uint64") /* ty=Tensor[(1, 210), uint64] */;
  %707 = cast(meta[relay.Constant][53] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %708 = reshape(%705, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint64] */;
  %709 = reshape(%706, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint64] */;
  %710 = reshape(%707, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %711 = @func_3738(%708, %709, %710) /* ty=(Tensor[(3, 14, 5), bool], Tensor[(15, 9, 10), bool], Tensor[(1350), float32]) */;
  %712 = cast(%var_5378, dtype="uint16") /* ty=Tensor[(8, 8, 4), uint16] */;
  %713 = shape_of(%var_5377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%var_5377, dtype="uint16") /* ty=Tensor[(8, 8, 4), uint16] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %716 = multiply(%714, %715) /* ty=Tensor[(8, 8, 4), uint16] */;
  %717 = cast(%var_5378, dtype="float64") /* ty=Tensor[(8, 8, 4), float64] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="float64") /* ty=Tensor[(8, 8, 4), float64] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %721 = cast(meta[relay.Constant][54] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %722 = cast(meta[relay.Constant][54] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %723 = reshape(%721, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %724 = reshape(%722, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %725 = @func_3334(%723, %724) /* ty=(Tensor[(12, 10, 13), uint8],) */;
  %726 = %711.0;
  %727 = floor_divide(%719, %720) /* ty=Tensor[(8, 8, 4), float64] */;
  %728 = %725.0;
  (%726, meta[relay.Constant][52] /* ty=Tensor[(1, 210), uint64] */, meta[relay.Constant][53] /* ty=Tensor[(1350), float32] */, %727, %728, meta[relay.Constant][54] /* ty=Tensor[(1560), uint8] */)
}

def @func_15469() -> Tensor[(8, 8, 2), bool] {
  @func_11389() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_8401() -> (Tensor[(8, 8, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 880), uint16]) {
  %729 = @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %730 = %729.0;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(8, 8, 2), float64] */;
  %732 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 880), uint16] */, dtype="uint16") /* ty=Tensor[(2, 880), uint16] */;
  %733 = reshape(%732, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
  %734 = log2(%731) /* ty=Tensor[(8, 8, 2), float64] */;
  %735 = @func_7209(%733) /* ty=Tensor[(16, 11, 10), float64] */;
  (%734, %735, meta[relay.Constant][55] /* ty=Tensor[(2, 880), uint16] */)
}

def @func_10729() -> Tensor[(24), float64] {
  %736 = @func_6811() /* ty=(Tensor[(24), float64],) */;
  %736.0
}

def @func_11830() -> Tensor[(1056), float32] {
  %737 = @func_9434() /* ty=(Tensor[(1056), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32]) */;
  %737.0
}

def @func_14714(%var_14672: Tensor[(12, 14, 9), float64], %var_14700: Tensor[(98), int16], %var_14701: Tensor[(1056), float32], %var_14702: Tensor[(1350, 1), float32]) -> (Tensor[(12, 14, 9), float64], Tensor[(6, 2, 12), float64], int16, Tensor[(98), int16], Tensor[(1056), float32], Tensor[(1350, 1), float32]) {
  %738 = cast(%var_14672, dtype="float64") /* ty=Tensor[(12, 14, 9), float64] */;
  %739 = cast(meta[relay.Constant][56] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %740 = cast(%var_14700, dtype="int16") /* ty=Tensor[(98), int16] */;
  %741 = cast(%var_14701, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %742 = cast(%var_14702, dtype="float32") /* ty=Tensor[(1350, 1), float32] */;
  %743 = reshape(%739, newshape=[]) /* ty=int16 */;
  %744 = reshape(%740, newshape=[14, 7, 1]) /* ty=Tensor[(14, 7, 1), int16] */;
  %745 = reshape(%741, newshape=[8, 132]) /* ty=Tensor[(8, 132), float32] */;
  %746 = reshape(%742, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %747 = @func_4333(%743, %744, %745, %746) /* ty=(Tensor[(14, 7, 1), int16], Tensor[(8, 132), float32], Tensor[(6, 2, 12), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(16, 6, 11), float32], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) */;
  %748 = atan(%738) /* ty=Tensor[(12, 14, 9), float64] */;
  %749 = %747.2;
  (%748, %749, meta[relay.Constant][56] /* ty=int16 */, %var_14700, %var_14701, %var_14702)
}

def @func_15021() -> Tensor[(8, 8, 2), bool] {
  %750 = @func_10931() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %750.0
}

def @func_14529(%var_14515: Tensor[(33), uint16]) -> (Tensor[(14, 6, 9), float64], Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32], Tensor[(33), uint16], Tensor[(3, 132), uint16], Tensor[(1760), uint16]) {
  %751 = @func_7653() /* ty=(Tensor[(14, 6, 9), float32],) */;
  %752 = %751.0;
  %753 = cast(%752, dtype="float64") /* ty=Tensor[(14, 6, 9), float64] */;
  %754 = cast(%var_14515, dtype="uint16") /* ty=Tensor[(33), uint16] */;
  %755 = cast(meta[relay.Constant][57] /* ty=Tensor[(3, 132), uint16] */, dtype="uint16") /* ty=Tensor[(3, 132), uint16] */;
  %756 = cast(meta[relay.Constant][58] /* ty=Tensor[(1760), uint16] */, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
  %757 = reshape(%754, newshape=[33]) /* ty=Tensor[(33), uint16] */;
  %758 = reshape(%755, newshape=[396]) /* ty=Tensor[(396), uint16] */;
  %759 = reshape(%756, newshape=[1760]) /* ty=Tensor[(1760), uint16] */;
  %760 = @func_8516(%757, %758, %759) /* ty=(Tensor[(2, 2, 13), float32], Tensor[(8, 8, 2), bool], Tensor[(16, 6, 11), float32], Tensor[(33), uint16], Tensor[(396), uint16], Tensor[(16, 11, 10), float64], Tensor[(1760), uint16]) */;
  %761 = sqrt(%753) /* ty=Tensor[(14, 6, 9), float64] */;
  %762 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  %763 = %760.0;
  (%761, %762, %763, %var_14515, meta[relay.Constant][57] /* ty=Tensor[(3, 132), uint16] */, meta[relay.Constant][58] /* ty=Tensor[(1760), uint16] */)
}

def @func_12472(%var_12462: Tensor[(6, 260), uint8]) -> (Tensor[(8, 8, 2), bool], Tensor[(24), float64], Tensor[(12, 10, 13), uint8], Tensor[(90), float32], Tensor[(6, 260), uint8]) {
  %764 = @func_11244() /* ty=(Tensor[(16, 11, 10), float64], uint8, Tensor[(24), float64], uint8) */;
  %765 = cast(meta[relay.Constant][59] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %766 = cast(%var_12462, dtype="uint8") /* ty=Tensor[(6, 260), uint8] */;
  %767 = reshape(%765, newshape=[1, 6, 15]) /* ty=Tensor[(1, 6, 15), float32] */;
  %768 = reshape(%766, newshape=[1560]) /* ty=Tensor[(1560), uint8] */;
  %769 = @func_11881(%767, %768) /* ty=(Tensor[(1, 6, 15), float32], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) */;
  %770 = @func_11439() /* ty=Tensor[(8, 8, 2), bool] */;
  %771 = %764.2;
  %772 = %769.1;
  (%770, %771, %772, meta[relay.Constant][59] /* ty=Tensor[(90), float32] */, %var_12462)
}

def @func_15140() -> (uint8,) {
  %773 = @func_13479() /* ty=(uint8, Tensor[(15, 10, 13), float64], Tensor[(1560), uint8], Tensor[(1950), float64]) */;
  %774 = %773.0;
  (%774,)
}

def @func_13634() -> Tensor[(2, 2, 13), float32] {
  %775 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %775.0
}

def @func_14012() -> (Tensor[(16, 11, 10), float64], Tensor[(1056), float32]) {
  %776 = @func_10655() /* ty=(Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool]) */;
  %777 = %776.0;
  %778 = @func_11830() /* ty=Tensor[(1056), float32] */;
  (%777, %778)
}

def @func_2519(%var_2491: bool, %var_2492: Tensor[(12, 8, 8), bool], %var_2500: Tensor[(1056, 1), float32], %var_2509: Tensor[(440), float64]) -> (Tensor[(12, 8, 8), bool], Tensor[(16, 6, 11), float32], Tensor[(1056, 1), float32], Tensor[(1056), float32], Tensor[(440), float64], Tensor[(10, 1, 16), int32]) {
  %779 = cast(%var_2491, dtype="bool") /* ty=bool */;
  %780 = cast(%var_2492, dtype="bool") /* ty=Tensor[(12, 8, 8), bool] */;
  %781 = cast(%var_2500, dtype="float32") /* ty=Tensor[(1056, 1), float32] */;
  %782 = reshape(%781, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float32] */;
  %783 = cast(%var_2509, dtype="float64") /* ty=Tensor[(440), float64] */;
  %784 = reshape(%783, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %785 = @func_438(%784) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(16, 6, 11), float32], Tensor[(1056), float32]) */;
  %786 = cast(%var_2491, dtype="uint8") /* ty=uint8 */;
  %787 = reshape(%786, newshape=[]) /* ty=uint8 */;
  %788 = @func_1247(%787) /* ty=(Tensor[(6, 2, 12), float64], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) */;
  %789 = logical_or(%779, %780) /* ty=Tensor[(12, 8, 8), bool] */;
  %790 = @func_226(%782) /* ty=Tensor[(16, 6, 11), float32] */;
  %791 = %785.2;
  %792 = %788.1;
  (%789, %790, %var_2500, %791, %var_2509, %792)
}

def @func_10370() -> (Tensor[(8, 8, 2), bool],) {
  %793 = @func_8307() /* ty=Tensor[(8, 8, 2), bool] */;
  (%793,)
}

def @func_6435(%var_6428: Tensor[(8, 8, 2), bool]) -> (Tensor[(8, 8, 2), bool],) {
  %794 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  %795 = cast(%var_6428, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(%794, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %799 = less(%797, %798) /* ty=Tensor[(8, 8, 2), bool] */;
  (%799,)
}

def @func_2674(%var_2668: Tensor[(5, 16, 16), float32]) -> Tensor[(5, 16, 16), float32] {
  %800 = cast(%var_2668, dtype="float32") /* ty=Tensor[(5, 16, 16), float32] */;
  tan(%800) /* ty=Tensor[(5, 16, 16), float32] */
}

def @func_10053(%var_10039: bool, %var_10040: Tensor[(768), bool], %var_10041: Tensor[(1056), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(768), bool], bool, Tensor[(768), bool], Tensor[(1056), float32]) {
  %801 = @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */;
  %802 = cast(%var_10039, dtype="bool") /* ty=bool */;
  %803 = cast(%var_10040, dtype="bool") /* ty=Tensor[(768), bool] */;
  %804 = cast(%var_10041, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %805 = reshape(%802, newshape=[]) /* ty=bool */;
  %806 = reshape(%803, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %807 = reshape(%804, newshape=[1056, 1]) /* ty=Tensor[(1056, 1), float32] */;
  %808 = @func_3026(%805, %806, %807) /* ty=(Tensor[(16, 12, 13), float32], Tensor[(10, 1, 16), int32], bool, Tensor[(768), bool], Tensor[(1056, 1), float32], Tensor[(440), float64]) */;
  %809 = %801.1;
  %810 = %808.3;
  (%809, %810, %var_10039, %var_10040, %var_10041)
}

def @func_12579() -> (Tensor[(16, 11, 10), float64],) {
  %811 = @func_10655() /* ty=(Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool]) */;
  %812 = %811.0;
  (%812,)
}

def @func_12656(%var_12602: Tensor[(1056), float32]) -> (Tensor[(10, 1, 16), int32], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(110, 4), float64], Tensor[(15, 10, 13), float64], Tensor[(1950), float64], Tensor[(1560), uint8], Tensor[(28), uint16], Tensor[(2, 2, 13), int64], Tensor[(2, 2, 13), uint8]) {
  %813 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %814 = cast(meta[relay.Constant][60] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %815 = cast(%var_12602, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %816 = cast(meta[relay.Constant][61] /* ty=Tensor[(110, 4), float64] */, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %817 = reshape(%813, newshape=[]) /* ty=bool */;
  %818 = reshape(%814, newshape=[12, 8, 8]) /* ty=Tensor[(12, 8, 8), bool] */;
  %819 = reshape(%815, newshape=[1056, 1]) /* ty=Tensor[(1056, 1), float32] */;
  %820 = reshape(%816, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %821 = @func_2519(%817, %818, %819, %820) /* ty=(Tensor[(12, 8, 8), bool], Tensor[(16, 6, 11), float32], Tensor[(1056, 1), float32], Tensor[(1056), float32], Tensor[(440), float64], Tensor[(10, 1, 16), int32]) */;
  %822 = cast(meta[relay.Constant][62] /* ty=Tensor[(1950), float64] */, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %823 = cast(meta[relay.Constant][62] /* ty=Tensor[(1950), float64] */, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %824 = reshape(%822, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %825 = reshape(%823, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %826 = @func_1854(%824, %825) /* ty=(Tensor[(15, 10, 13), float64],) */;
  %827 = cast(False /* ty=bool */, dtype="uint16") /* ty=uint16 */;
  %828 = cast(meta[relay.Constant][63] /* ty=Tensor[(28), uint16] */, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %829 = reshape(%827, newshape=[]) /* ty=uint16 */;
  %830 = reshape(%828, newshape=[28]) /* ty=Tensor[(28), uint16] */;
  %831 = @func_9069(%829, %830) /* ty=(Tensor[(14, 6, 9), float32], Tensor[(1560), uint8], uint16, Tensor[(28), uint16]) */;
  %832 = @func_9997() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %833 = %832.0;
  %834 = cast(%833, dtype="float32") /* ty=Tensor[(2, 2, 13), float32] */;
  %835 = sqrt(%834) /* ty=Tensor[(2, 2, 13), float32] */;
  %836 = cast(meta[relay.Constant][64] /* ty=Tensor[(2, 2, 13), float32] */, dtype="int64") /* ty=Tensor[(2, 2, 13), int64] */;
  %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%835, dtype="int64") /* ty=Tensor[(2, 2, 13), int64] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %840 = cast(meta[relay.Constant][64] /* ty=Tensor[(2, 2, 13), float32] */, dtype="uint8") /* ty=Tensor[(2, 2, 13), uint8] */;
  %841 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%835, dtype="uint8") /* ty=Tensor[(2, 2, 13), uint8] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %844 = %821.5;
  %845 = %826.0;
  %846 = %831.1;
  %847 = minimum(%838, %839) /* ty=Tensor[(2, 2, 13), int64] */;
  %848 = multiply(%842, %843) /* ty=Tensor[(2, 2, 13), uint8] */;
  (%844, False /* ty=bool */, meta[relay.Constant][60] /* ty=Tensor[(768), bool] */, %var_12602, meta[relay.Constant][61] /* ty=Tensor[(110, 4), float64] */, %845, meta[relay.Constant][62] /* ty=Tensor[(1950), float64] */, %846, meta[relay.Constant][63] /* ty=Tensor[(28), uint16] */, %847, %848)
}

def @func_7857() -> (Tensor[(2, 2, 13), float64],) {
  %849 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %850 = %849.0;
  %851 = cast(%850, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  %852 = cos(%851) /* ty=Tensor[(2, 2, 13), float64] */;
  (%852,)
}

def @func_7948() -> Tensor[(14, 6, 9), float32] {
  %853 = @func_7653() /* ty=(Tensor[(14, 6, 9), float32],) */;
  %853.0
}

def @func_12065() -> Tensor[(8, 8, 2), bool] {
  %854 = @func_10252() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), float64]) */;
  %854.1
}

def @func_14482() -> (Tensor[(8, 8, 2), bool],) {
  %855 = @func_8651() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %856 = %855.0;
  (%856,)
}

def @func_8581() -> Tensor[(8, 8, 2), bool] {
  %857 = @func_7903() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %857.0
}

def @func_6244(%var_6240: Tensor[(2, 3, 4), float64]) -> Tensor[(2, 3, 4), float64] {
  %858 = cast(%var_6240, dtype="float64") /* ty=Tensor[(2, 3, 4), float64] */;
  atanh(%858) /* ty=Tensor[(2, 3, 4), float64] */
}

def @func_7196() -> (Tensor[(8, 8, 2), bool],) {
  %859 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  (%859,)
}

def @func_3586(%var_3523: Tensor[(9, 11, 7), bool], %var_3524: Tensor[(9, 11, 7), bool], %var_3556: Tensor[(2, 384), bool]) -> (Tensor[(440), float64], bool, Tensor[(2, 384), bool], Tensor[(1056), float32], Tensor[(9, 11, 7), float32]) {
  %860 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %861 = cast(%var_3556, dtype="bool") /* ty=Tensor[(2, 384), bool] */;
  %862 = cast(meta[relay.Constant][65] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %863 = reshape(%860, newshape=[]) /* ty=bool */;
  %864 = reshape(%861, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %865 = reshape(%862, newshape=[1056, 1]) /* ty=Tensor[(1056, 1), float32] */;
  %866 = @func_3026(%863, %864, %865) /* ty=(Tensor[(16, 12, 13), float32], Tensor[(10, 1, 16), int32], bool, Tensor[(768), bool], Tensor[(1056, 1), float32], Tensor[(440), float64]) */;
  %867 = cast(%var_3524, dtype="bool") /* ty=Tensor[(9, 11, 7), bool] */;
  %868 = shape_of(%var_3523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %869 = cast(%var_3523, dtype="bool") /* ty=Tensor[(9, 11, 7), bool] */;
  %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %871 = logical_and(%869, %870) /* ty=Tensor[(9, 11, 7), bool] */;
  %872 = cast(%871, dtype="float32") /* ty=Tensor[(9, 11, 7), float32] */;
  %873 = %866.5;
  %874 = sigmoid(%872) /* ty=Tensor[(9, 11, 7), float32] */;
  (%873, False /* ty=bool */, %var_3556, meta[relay.Constant][65] /* ty=Tensor[(1056), float32] */, %874)
}

def @func_9929() -> Tensor[(2, 2, 13), float32] {
  @func_9748() /* ty=Tensor[(2, 2, 13), float32] */
}

def @func_8472(%var_8468: Tensor[(10, 9, 4), float32]) -> (Tensor[(10, 9, 4), float32],) {
  %875 = cast(%var_8468, dtype="float32") /* ty=Tensor[(10, 9, 4), float32] */;
  %876 = log(%875) /* ty=Tensor[(10, 9, 4), float32] */;
  (%876,)
}

def @func_12405() -> (Tensor[(24), float64],) {
  %877 = @func_11244() /* ty=(Tensor[(16, 11, 10), float64], uint8, Tensor[(24), float64], uint8) */;
  %878 = %877.2;
  (%878,)
}

def @func_13254() -> Tensor[(2, 2, 13), float32] {
  %879 = @func_9182() /* ty=(Tensor[(2, 2, 13), float32], Tensor[(2, 880), uint16]) */;
  %879.0
}

def @func_15257() -> (Tensor[(2, 880), uint16],) {
  %880 = @func_9182() /* ty=(Tensor[(2, 2, 13), float32], Tensor[(2, 880), uint16]) */;
  %881 = %880.1;
  (%881,)
}

def @func_9069(%var_9057: uint16, %var_9058: Tensor[(28), uint16]) -> (Tensor[(14, 6, 9), float32], Tensor[(1560), uint8], uint16, Tensor[(28), uint16]) {
  %882 = @func_7653() /* ty=(Tensor[(14, 6, 9), float32],) */;
  %883 = cast(%var_9057, dtype="uint16") /* ty=uint16 */;
  %884 = cast(%var_9058, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %885 = reshape(%883, newshape=[]) /* ty=uint16 */;
  %886 = reshape(%884, newshape=[7, 4, 1]) /* ty=Tensor[(7, 4, 1), uint16] */;
  %887 = @func_5123(%885, %886) /* ty=(Tensor[(7, 4, 1), uint16], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) */;
  %888 = %882.0;
  %889 = %887.2;
  (%888, %889, %var_9057, %var_9058)
}

def @func_9104(%var_9084: Tensor[(1950), float64]) -> (Tensor[(14, 6, 9), float32], Tensor[(15, 10, 13), float64], Tensor[(1950), bool]) {
  %890 = @func_7653() /* ty=(Tensor[(14, 6, 9), float32],) */;
  %891 = cast(%var_9084, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %892 = cast(%var_9084, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %893 = reshape(%891, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %894 = reshape(%892, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %895 = @func_1854(%893, %894) /* ty=(Tensor[(15, 10, 13), float64],) */;
  %896 = cast(%var_9084, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %897 = log10(%896) /* ty=Tensor[(1950), float32] */;
  %898 = cast(%var_9084, dtype="bool") /* ty=Tensor[(1950), bool] */;
  %899 = shape_of(%897, dtype="int32") /* ty=Tensor[(1), int32] */;
  %900 = cast(%897, dtype="bool") /* ty=Tensor[(1950), bool] */;
  %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?), bool] */;
  %902 = %890.0;
  %903 = %895.0;
  %904 = less_equal(%900, %901) /* ty=Tensor[(1950), bool] */;
  (%902, %903, %904)
}

def @func_8733(%var_8692: int32, %var_8693: Tensor[(160), int32]) -> (Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) {
  %905 = cast(%var_8692, dtype="int32") /* ty=int32 */;
  %906 = cast(%var_8693, dtype="int32") /* ty=Tensor[(160), int32] */;
  %907 = reshape(%905, newshape=[]) /* ty=int32 */;
  %908 = reshape(%906, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int32] */;
  %909 = @func_8307() /* ty=Tensor[(8, 8, 2), bool] */;
  %910 = @func_553(%907, %908) /* ty=Tensor[(10, 1, 16), int32] */;
  (%909, %910, %var_8692, %var_8693)
}

def @func_6582(%var_6570: Tensor[(1350), float32], %var_6575: Tensor[(8, 8, 2), bool]) -> (Tensor[(1350), float32], Tensor[(1350), float32], Tensor[(1848), float32], Tensor[(8, 8, 2), bool]) {
  %911 = cast(%var_6570, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %912 = cast(meta[relay.Constant][66] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %913 = reshape(%911, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %914 = reshape(%912, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float32] */;
  %915 = @func_4892(%913, %914) /* ty=(Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(12, 14, 11), float32], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(12, 14, 11), float64]) */;
  %916 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  %917 = cast(%var_6575, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %918 = shape_of(%916, dtype="int32") /* ty=Tensor[(3), int32] */;
  %919 = cast(%916, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %921 = %915.4;
  %922 = equal(%919, %920) /* ty=Tensor[(8, 8, 2), bool] */;
  (%921, %var_6570, meta[relay.Constant][66] /* ty=Tensor[(1848), float32] */, %922)
}

def @func_3738(%var_3722: Tensor[(3, 14, 5), uint64], %var_3723: Tensor[(3, 14, 5), uint64], %var_3728: Tensor[(1350), float32]) -> (Tensor[(3, 14, 5), bool], Tensor[(15, 9, 10), bool], Tensor[(1350), float32]) {
  %923 = cast(%var_3723, dtype="bool") /* ty=Tensor[(3, 14, 5), bool] */;
  %924 = shape_of(%var_3722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %925 = cast(%var_3722, dtype="bool") /* ty=Tensor[(3, 14, 5), bool] */;
  %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %927 = cast(%var_3728, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %928 = cast(%var_3728, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %929 = reshape(%927, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %930 = reshape(%928, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %931 = @func_2603(%929, %930) /* ty=(Tensor[(15, 9, 10), bool],) */;
  %932 = greater(%925, %926) /* ty=Tensor[(3, 14, 5), bool] */;
  %933 = %931.0;
  (%932, %933, %var_3728)
}

def @func_11061(%var_11003: int32) -> (Tensor[(8, 8, 2), bool], Tensor[(1560), uint8], Tensor[(8, 8, 2), bool], Tensor[(12, 10, 13), float64], Tensor[(8, 8, 2), bool], int32, Tensor[(720), int64], int32, Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(2, 2, 13), float32], Tensor[(2, 2, 13), float64], Tensor[(8, 8, 2), bool]) {
  %934 = @func_7032() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %935 = @func_10931() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %936 = cast(meta[relay.Constant][67] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %937 = cast(meta[relay.Constant][67] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %938 = reshape(%936, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %939 = reshape(%937, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %940 = @func_3334(%938, %939) /* ty=(Tensor[(12, 10, 13), uint8],) */;
  %941 = %940.0;
  %942 = cast(%941, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
  %943 = @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %944 = cast(meta[relay.Constant][68] /* ty=Tensor[(720), int64] */, dtype="int64") /* ty=Tensor[(720), int64] */;
  %945 = cast(%var_11003, dtype="int32") /* ty=int32 */;
  %946 = reshape(%944, newshape=[720]) /* ty=Tensor[(720), int64] */;
  %947 = reshape(%945, newshape=[]) /* ty=int32 */;
  %948 = @func_7447(%946, %947) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(3, 16, 15), int64], Tensor[(720), int64], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32], Tensor[(1056), float32]) */;
  %949 = cast(meta[relay.Constant][69] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %950 = reshape(%949, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
  %951 = @func_10296() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) */;
  %952 = @func_7857() /* ty=(Tensor[(2, 2, 13), float64],) */;
  %953 = %934.0;
  %954 = %935.0;
  %955 = log2(%942) /* ty=Tensor[(12, 10, 13), float64] */;
  %956 = %943.0;
  %957 = %948.4;
  %958 = @func_6244(%950) /* ty=Tensor[(2, 3, 4), float64] */;
  %959 = %951.1;
  %960 = %952.0;
  %961 = @func_7550() /* ty=Tensor[(8, 8, 2), bool] */;
  (%953, meta[relay.Constant][67] /* ty=Tensor[(1560), uint8] */, %954, %955, %956, %957, meta[relay.Constant][68] /* ty=Tensor[(720), int64] */, %var_11003, %958, meta[relay.Constant][69] /* ty=Tensor[(24), float64] */, %959, %960, %961)
}

def @func_438(%var_432: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(16, 6, 11), float32], Tensor[(1056), float32]) {
  %962 = cast(%var_432, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %963 = cast(meta[relay.Constant][70] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %964 = reshape(%963, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float32] */;
  %965 = log2(%962) /* ty=Tensor[(5, 11, 8), float64] */;
  %966 = @func_226(%964) /* ty=Tensor[(16, 6, 11), float32] */;
  (%965, %966, meta[relay.Constant][70] /* ty=Tensor[(1056), float32] */)
}

def @func_7583(%var_7573: int32) -> (Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) {
  %967 = @func_7032() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %968 = cast(%var_7573, dtype="int32") /* ty=int32 */;
  %969 = cast(meta[relay.Constant][71] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %970 = reshape(%968, newshape=[]) /* ty=int32 */;
  %971 = reshape(%969, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int32] */;
  %972 = %967.0;
  %973 = @func_553(%970, %971) /* ty=Tensor[(10, 1, 16), int32] */;
  (%972, %973, %var_7573, meta[relay.Constant][71] /* ty=Tensor[(160), int32] */)
}

def @func_226(%var_161: Tensor[(16, 6, 11), float32]) -> Tensor[(16, 6, 11), float32] {
  %974 = cast(%var_161, dtype="float32") /* ty=Tensor[(16, 6, 11), float32] */;
  erf(%974) /* ty=Tensor[(16, 6, 11), float32] */
}

def @func_13053() -> (Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float64], Tensor[(14, 6, 9), float32]) {
  %975 = @func_11085() /* ty=(Tensor[(24), float64],) */;
  %976 = @func_9748() /* ty=Tensor[(2, 2, 13), float32] */;
  %977 = cast(%976, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  %978 = @func_9038() /* ty=(Tensor[(14, 6, 9), float32],) */;
  %979 = %975.0;
  %980 = @func_9275() /* ty=Tensor[(8, 8, 2), bool] */;
  %981 = sinh(%977) /* ty=Tensor[(2, 2, 13), float64] */;
  %982 = %978.0;
  (%979, %980, %981, %982)
}

def @func_3026(%var_3004: bool, %var_3005: Tensor[(768), bool], %var_3006: Tensor[(1056, 1), float32]) -> (Tensor[(16, 12, 13), float32], Tensor[(10, 1, 16), int32], bool, Tensor[(768), bool], Tensor[(1056, 1), float32], Tensor[(440), float64]) {
  %983 = cast(meta[relay.Constant][72] /* ty=Tensor[(16, 12, 13), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 13), float32] */;
  %984 = cast(%var_3004, dtype="bool") /* ty=bool */;
  %985 = cast(%var_3005, dtype="bool") /* ty=Tensor[(768), bool] */;
  %986 = cast(%var_3006, dtype="float32") /* ty=Tensor[(1056, 1), float32] */;
  %987 = cast(meta[relay.Constant][73] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %988 = reshape(%984, newshape=[]) /* ty=bool */;
  %989 = reshape(%985, newshape=[12, 8, 8]) /* ty=Tensor[(12, 8, 8), bool] */;
  %990 = reshape(%986, newshape=[1056, 1]) /* ty=Tensor[(1056, 1), float32] */;
  %991 = reshape(%987, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %992 = @func_2519(%988, %989, %990, %991) /* ty=(Tensor[(12, 8, 8), bool], Tensor[(16, 6, 11), float32], Tensor[(1056, 1), float32], Tensor[(1056), float32], Tensor[(440), float64], Tensor[(10, 1, 16), int32]) */;
  %993 = log2(%983) /* ty=Tensor[(16, 12, 13), float32] */;
  %994 = %992.5;
  (%993, %994, %var_3004, %var_3005, %var_3006, meta[relay.Constant][73] /* ty=Tensor[(440), float64] */)
}

def @func_6811() -> (Tensor[(24), float64],) {
  %995 = @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */;
  %996 = %995.2;
  (%996,)
}

def @func_4110(%var_4078: Tensor[(7, 2, 9), uint32], %var_4084: bool, %var_4085: Tensor[(768), bool], %var_4086: Tensor[(1056), float32], %var_4098: Tensor[(130, 15), float64]) -> (Tensor[(7, 2, 9), uint32], Tensor[(768), bool], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(15, 10, 13), float64], Tensor[(130, 15), float64]) {
  %997 = cast(%var_4078, dtype="uint32") /* ty=Tensor[(7, 2, 9), uint32] */;
  %998 = shape_of(meta[relay.Constant][74] /* ty=Tensor[(7, 2, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %999 = cast(meta[relay.Constant][74] /* ty=Tensor[(7, 2, 9), uint32] */, dtype="uint32") /* ty=Tensor[(7, 2, 9), uint32] */;
  %1000 = dyn.reshape(%997, %998, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1001 = cast(%var_4084, dtype="bool") /* ty=bool */;
  %1002 = cast(%var_4085, dtype="bool") /* ty=Tensor[(768), bool] */;
  %1003 = cast(%var_4086, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %1004 = reshape(%1001, newshape=[]) /* ty=bool */;
  %1005 = reshape(%1002, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %1006 = reshape(%1003, newshape=[1056, 1]) /* ty=Tensor[(1056, 1), float32] */;
  %1007 = @func_3026(%1004, %1005, %1006) /* ty=(Tensor[(16, 12, 13), float32], Tensor[(10, 1, 16), int32], bool, Tensor[(768), bool], Tensor[(1056, 1), float32], Tensor[(440), float64]) */;
  %1008 = cast(%var_4098, dtype="float64") /* ty=Tensor[(130, 15), float64] */;
  %1009 = cast(%var_4098, dtype="float64") /* ty=Tensor[(130, 15), float64] */;
  %1010 = reshape(%1008, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %1011 = reshape(%1009, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %1012 = @func_1854(%1010, %1011) /* ty=(Tensor[(15, 10, 13), float64],) */;
  %1013 = right_shift(%999, %1000) /* ty=Tensor[(7, 2, 9), uint32] */;
  %1014 = %1007.3;
  %1015 = %1012.0;
  (%1013, %1014, %var_4084, %var_4085, %var_4086, %1015, %var_4098)
}

def @func_8933() -> (Tensor[(24), float64], Tensor[(8, 8, 2), bool]) {
  %1016 = @func_6811() /* ty=(Tensor[(24), float64],) */;
  %1017 = @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %1018 = %1016.0;
  %1019 = %1017.0;
  (%1018, %1019)
}

def @func_9116() -> Tensor[(8, 8, 2), bool] {
  %1020 = @func_7903() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %1020.0
}

def @func_6496() -> (Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) {
  %1021 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  %1022 = cast(%1021, dtype="float64") /* ty=Tensor[(8, 8, 2), float64] */;
  %1023 = log10(%1022) /* ty=Tensor[(8, 8, 2), float64] */;
  %1024 = cast(%1023, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %1025 = reshape(%1024, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), bool] */;
  %1026 = @func_6435(%1025) /* ty=(Tensor[(8, 8, 2), bool],) */;
  %1027 = %1026.0;
  (%1023, %1027)
}

def @func_5000(%var_4986: Tensor[(14, 6, 9), float32]) -> (Tensor[(14, 6, 9), float32],) {
  %1028 = cast(meta[relay.Constant][75] /* ty=Tensor[(14, 1, 9), float32] */, dtype="float32") /* ty=Tensor[(14, 1, 9), float32] */;
  %1029 = cast(%var_4986, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
  %1030 = add(%1028, %1029) /* ty=Tensor[(14, 6, 9), float32] */;
  (%1030,)
}

def @func_7903() -> (Tensor[(8, 8, 2), bool],) {
  %1031 = @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %1032 = %1031.0;
  (%1032,)
}

def @func_8872() -> Tensor[(8, 8, 2), bool] {
  @func_6837() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_9811() -> (Tensor[(8, 8, 2), bool], Tensor[(24), float64]) {
  %1033 = @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */;
  %1034 = @func_7687() /* ty=Tensor[(8, 8, 2), bool] */;
  %1035 = %1033.2;
  (%1034, %1035)
}

def @func_6707() -> (Tensor[(8, 8, 2), bool],) {
  %1036 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  (%1036,)
}

def @func_7653() -> (Tensor[(14, 6, 9), float32],) {
  %1037 = @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */;
  %1038 = %1037.2;
  (%1038,)
}

def @func_12246() -> (Tensor[(8, 8, 2), bool],) {
  %1039 = @func_8872() /* ty=Tensor[(8, 8, 2), bool] */;
  (%1039,)
}

def @func_14577() -> (Tensor[(8, 8, 2), bool],) {
  %1040 = @func_8307() /* ty=Tensor[(8, 8, 2), bool] */;
  (%1040,)
}

def @func_10931() -> (Tensor[(8, 8, 2), bool],) {
  %1041 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %1042 = %1041.1;
  (%1042,)
}

def @func_10130(%var_10071: Tensor[(5, 1, 13), int8], %var_10072: Tensor[(5, 4, 13), int8]) -> (Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8], Tensor[(5, 4, 13), float64], Tensor[(5, 4, 13), int64]) {
  %1043 = cast(meta[relay.Constant][76] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %1044 = cast(meta[relay.Constant][76] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %1045 = reshape(%1043, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %1046 = reshape(%1044, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %1047 = @func_3334(%1045, %1046) /* ty=(Tensor[(12, 10, 13), uint8],) */;
  %1048 = cast(%var_10071, dtype="bool") /* ty=Tensor[(5, 1, 13), bool] */;
  %1049 = cast(%var_10072, dtype="bool") /* ty=Tensor[(5, 4, 13), bool] */;
  %1050 = equal(%1048, %1049) /* ty=Tensor[(5, 4, 13), bool] */;
  %1051 = cast(%1050, dtype="float64") /* ty=Tensor[(5, 4, 13), float64] */;
  %1052 = sinh(%1051) /* ty=Tensor[(5, 4, 13), float64] */;
  %1053 = cast(%1052, dtype="float64") /* ty=Tensor[(5, 4, 13), float64] */;
  %1054 = cast(%var_10072, dtype="uint16") /* ty=Tensor[(5, 4, 13), uint16] */;
  %1055 = cast(%var_10071, dtype="uint16") /* ty=Tensor[(5, 1, 13), uint16] */;
  %1056 = left_shift(%1054, %1055) /* ty=Tensor[(5, 4, 13), uint16] */;
  %1057 = cast(%1056, dtype="int64") /* ty=Tensor[(5, 4, 13), int64] */;
  %1058 = shape_of(%1052, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1059 = cast(%1052, dtype="int64") /* ty=Tensor[(5, 4, 13), int64] */;
  %1060 = dyn.reshape(%1057, %1058, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1061 = %1047.0;
  %1062 = asinh(%1053) /* ty=Tensor[(5, 4, 13), float64] */;
  %1063 = logical_xor(%1059, %1060) /* ty=Tensor[(5, 4, 13), int64] */;
  (%1061, meta[relay.Constant][76] /* ty=Tensor[(1560), uint8] */, %1062, %1063)
}

def @func_7209(%var_7202: Tensor[(16, 11, 10), uint16]) -> Tensor[(16, 11, 10), float64] {
  %1064 = cast(meta[relay.Constant][77] /* ty=Tensor[(16, 1, 10), uint16] */, dtype="uint16") /* ty=Tensor[(16, 1, 10), uint16] */;
  %1065 = cast(%var_7202, dtype="uint16") /* ty=Tensor[(16, 11, 10), uint16] */;
  %1066 = bitwise_or(%1064, %1065) /* ty=Tensor[(16, 11, 10), uint16] */;
  %1067 = cast(%1066, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
  exp(%1067) /* ty=Tensor[(16, 11, 10), float64] */
}

def @func_15316() -> (Tensor[(8, 8, 2), bool],) {
  %1068 = @func_7519() /* ty=Tensor[(8, 8, 2), bool] */;
  (%1068,)
}

def @func_9560() -> (Tensor[(8, 8, 2), float64], Tensor[(768), bool], Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) {
  %1069 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %1070 = cast(meta[relay.Constant][78] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %1071 = cast(meta[relay.Constant][79] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %1072 = reshape(%1070, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %1073 = reshape(%1071, newshape=[1056]) /* ty=Tensor[(1056), float32] */;
  %1074 = @func_7496(%1072, %1073) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(5, 11, 8), float64], Tensor[(440), float64], Tensor[(12, 8, 8), bool], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool]) */;
  %1075 = @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %1076 = @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %1077 = %1076.0;
  %1078 = cast(%1077, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %1079 = reshape(%1078, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), bool] */;
  %1080 = @func_6435(%1079) /* ty=(Tensor[(8, 8, 2), bool],) */;
  %1081 = %1069.0;
  %1082 = %1074.5;
  %1083 = %1075.0;
  %1084 = @func_8581() /* ty=Tensor[(8, 8, 2), bool] */;
  %1085 = @func_8872() /* ty=Tensor[(8, 8, 2), bool] */;
  %1086 = @func_7519() /* ty=Tensor[(8, 8, 2), bool] */;
  %1087 = %1080.0;
  (%1081, %1082, meta[relay.Constant][78] /* ty=Tensor[(768), bool] */, meta[relay.Constant][79] /* ty=Tensor[(1056), float32] */, %1083, %1077, %1084, %1085, %1086, %1087)
}

def @func_11439() -> Tensor[(8, 8, 2), bool] {
  %1088 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %1088.1
}

def @func_14222(%var_14218: Tensor[(1, 1152), uint64]) -> (Tensor[(2, 2, 13), float32], Tensor[(2, 2, 13), float32], Tensor[(12, 10, 13), uint8], Tensor[(1, 1152), uint64], Tensor[(256), uint16], Tensor[(3, 450), float32]) {
  %1089 = @func_9252() /* ty=(Tensor[(2, 2, 13), float32], Tensor[(5, 16, 16), float32], Tensor[(1280), float32]) */;
  %1090 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %1091 = cast(%var_14218, dtype="uint64") /* ty=Tensor[(1, 1152), uint64] */;
  %1092 = cast(meta[relay.Constant][80] /* ty=Tensor[(256), uint16] */, dtype="uint16") /* ty=Tensor[(256), uint16] */;
  %1093 = cast(meta[relay.Constant][81] /* ty=Tensor[(3, 450), float32] */, dtype="float32") /* ty=Tensor[(3, 450), float32] */;
  %1094 = reshape(%1091, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint64] */;
  %1095 = reshape(%1092, newshape=[256]) /* ty=Tensor[(256), uint16] */;
  %1096 = reshape(%1093, newshape=[675, 2]) /* ty=Tensor[(675, 2), float32] */;
  %1097 = @func_9596(%1094, %1095, %1096) /* ty=(Tensor[(6, 16, 12), bool], Tensor[(12, 10, 13), uint8], Tensor[(256), uint16], Tensor[(8, 8, 2), bool], Tensor[(210), uint64], Tensor[(675, 2), float32], Tensor[(24), float64]) */;
  %1098 = %1089.0;
  %1099 = %1090.0;
  %1100 = %1097.1;
  (%1098, %1099, %1100, %var_14218, meta[relay.Constant][80] /* ty=Tensor[(256), uint16] */, meta[relay.Constant][81] /* ty=Tensor[(3, 450), float32] */)
}

def @func_10296() -> (Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) {
  %1101 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %1102 = @func_7519() /* ty=Tensor[(8, 8, 2), bool] */;
  %1103 = %1101.0;
  (%1102, %1103)
}

def @func_10446(%var_10420: Tensor[(128), bool], %var_10428: Tensor[(1848), float32]) -> (Tensor[(14, 6, 9), float32], Tensor[(1350), float32], Tensor[(128), bool], Tensor[(1848), float32]) {
  %1104 = @func_9038() /* ty=(Tensor[(14, 6, 9), float32],) */;
  %1105 = cast(meta[relay.Constant][82] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %1106 = cast(%var_10420, dtype="bool") /* ty=Tensor[(128), bool] */;
  %1107 = reshape(%1105, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %1108 = reshape(%1106, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), bool] */;
  %1109 = @func_6582(%1107, %1108) /* ty=(Tensor[(1350), float32], Tensor[(1350), float32], Tensor[(1848), float32], Tensor[(8, 8, 2), bool]) */;
  %1110 = %1109.2;
  %1111 = cast(%var_10428, dtype="int8") /* ty=Tensor[(1848), int8] */;
  %1112 = shape_of(%1110, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1113 = cast(%1110, dtype="int8") /* ty=Tensor[(1848), int8] */;
  %1114 = dyn.reshape(%1111, %1112, newshape=[]) /* ty=Tensor[(?), int8] */;
  %1115 = subtract(%1113, %1114) /* ty=Tensor[(1848), int8] */;
  %1116 = cast(%1115, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %1117 = %1104.0;
  %1118 = sin(%1116) /* ty=Tensor[(1848), float32] */;
  (%1117, meta[relay.Constant][82] /* ty=Tensor[(1350), float32] */, %var_10420, %1118)
}

def @func_11298() -> (Tensor[(8, 8, 2), bool],) {
  %1119 = @func_9560() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(768), bool], Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) */;
  %1120 = %1119.7;
  (%1120,)
}

def @func_9671(%var_9656: Tensor[(48, 4), float64]) -> (Tensor[(8, 8, 2), bool], Tensor[(1350), float32], Tensor[(48, 4), float64], Tensor[(1848), float32], Tensor[(3696), float32], Tensor[(1280), float32]) {
  %1121 = cast(%var_9656, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
  %1122 = cast(meta[relay.Constant][83] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %1123 = cast(meta[relay.Constant][84] /* ty=Tensor[(3696), float32] */, dtype="float32") /* ty=Tensor[(3696), float32] */;
  %1124 = reshape(%1121, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), float64] */;
  %1125 = reshape(%1122, newshape=[1, 1848]) /* ty=Tensor[(1, 1848), float32] */;
  %1126 = reshape(%1123, newshape=[2, 1848]) /* ty=Tensor[(2, 1848), float32] */;
  %1127 = @func_5719(%1124, %1125, %1126) /* ty=(Tensor[(12, 10, 13), uint8], Tensor[(12, 130), uint8], Tensor[(16, 6, 11), float32], Tensor[(440), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(8, 8, 3), int64], Tensor[(2, 1848), float32]) */;
  %1128 = %1127.5;
  %1129 = cast(%1128, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %1130 = cast(meta[relay.Constant][83] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %1131 = reshape(%1129, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %1132 = reshape(%1130, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float32] */;
  %1133 = @func_4892(%1131, %1132) /* ty=(Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(12, 14, 11), float32], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(12, 14, 11), float64]) */;
  %1134 = @func_6837() /* ty=Tensor[(8, 8, 2), bool] */;
  %1135 = %1133.1;
  (%1134, %1128, %var_9656, meta[relay.Constant][83] /* ty=Tensor[(1848), float32] */, meta[relay.Constant][84] /* ty=Tensor[(3696), float32] */, %1135)
}

def @func_8787() -> Tensor[(8, 8, 2), bool] {
  @func_6366() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_13950() -> (uint8,) {
  %1136 = @func_11244() /* ty=(Tensor[(16, 11, 10), float64], uint8, Tensor[(24), float64], uint8) */;
  %1137 = %1136.1;
  (%1137,)
}

def @func_553(%var_543: int32, %var_544: Tensor[(10, 1, 16), int32]) -> Tensor[(10, 1, 16), int32] {
  %1138 = cast(%var_543, dtype="int32") /* ty=int32 */;
  %1139 = cast(%var_544, dtype="int32") /* ty=Tensor[(10, 1, 16), int32] */;
  minimum(%1138, %1139) /* ty=Tensor[(10, 1, 16), int32] */
}

def @func_9342(%var_9313: Tensor[(18, 42), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), bool], Tensor[(18, 42), float32], Tensor[(14, 6, 9), float32]) {
  %1140 = @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %1141 = cast(%var_9313, dtype="float32") /* ty=Tensor[(18, 42), float32] */;
  %1142 = reshape(%1141, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %1143 = @func_8071(%1142) /* ty=Tensor[(14, 6, 9), bool] */;
  %1144 = cast(%1143, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
  %1145 = reshape(%1144, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %1146 = @func_5000(%1145) /* ty=(Tensor[(14, 6, 9), float32],) */;
  %1147 = %1140.0;
  %1148 = %1146.0;
  (%1147, %1143, %var_9313, %1148)
}

def @func_7821() -> (Tensor[(2, 2, 13), float32],) {
  %1149 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %1150 = %1149.0;
  (%1150,)
}

def @func_6762(%var_6728: uint8, %var_6731: Tensor[(1560), uint8], %var_6750: Tensor[(1950), float64]) -> (Tensor[(2, 3, 4), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(10, 1, 16), int32], uint8, Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8], Tensor[(2, 3, 4), float64], Tensor[(15, 10, 13), float64], Tensor[(1950), float64]) {
  %1151 = @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */;
  %1152 = cast(meta[relay.Constant][85] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %1153 = cast(meta[relay.Constant][85] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %1154 = reshape(%1152, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %1155 = reshape(%1153, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %1156 = @func_2603(%1154, %1155) /* ty=(Tensor[(15, 9, 10), bool],) */;
  %1157 = cast(%var_6728, dtype="uint8") /* ty=uint8 */;
  %1158 = reshape(%1157, newshape=[]) /* ty=uint8 */;
  %1159 = @func_1247(%1158) /* ty=(Tensor[(6, 2, 12), float64], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) */;
  %1160 = cast(%var_6731, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %1161 = cast(%var_6731, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %1162 = reshape(%1160, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %1163 = reshape(%1161, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %1164 = @func_3334(%1162, %1163) /* ty=(Tensor[(12, 10, 13), uint8],) */;
  %1165 = %1151.1;
  %1166 = cast(%1165, dtype="float64") /* ty=Tensor[(2, 3, 4), float64] */;
  %1167 = reshape(%1166, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
  %1168 = cast(%var_6750, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %1169 = cast(%var_6750, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %1170 = reshape(%1168, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %1171 = reshape(%1169, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %1172 = @func_1854(%1170, %1171) /* ty=(Tensor[(15, 10, 13), float64],) */;
  %1173 = %1156.0;
  %1174 = %1159.1;
  %1175 = %1164.0;
  %1176 = @func_6244(%1167) /* ty=Tensor[(2, 3, 4), float64] */;
  %1177 = %1172.0;
  (%1165, %1173, meta[relay.Constant][85] /* ty=Tensor[(1350), float32] */, %1174, %var_6728, %1175, %var_6731, %1176, %1177, %var_6750)
}

def @func_4892(%var_4880: Tensor[(1350), float32], %var_4884: Tensor[(12, 14, 11), float32]) -> (Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(12, 14, 11), float32], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(12, 14, 11), float64]) {
  %1178 = cast(meta[relay.Constant][86] /* ty=Tensor[(1280), float32] */, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %1179 = reshape(%1178, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), float32] */;
  %1180 = cast(meta[relay.Constant][87] /* ty=Tensor[(12, 14, 11), float32] */, dtype="float32") /* ty=Tensor[(12, 14, 11), float32] */;
  %1181 = cast(%var_4880, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %1182 = cast(%var_4880, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %1183 = reshape(%1181, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %1184 = reshape(%1182, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %1185 = @func_2603(%1183, %1184) /* ty=(Tensor[(15, 9, 10), bool],) */;
  %1186 = cast(meta[relay.Constant][87] /* ty=Tensor[(12, 14, 11), float32] */, dtype="float32") /* ty=Tensor[(12, 14, 11), float32] */;
  %1187 = atanh(%1186) /* ty=Tensor[(12, 14, 11), float32] */;
  %1188 = cast(%1187, dtype="float32") /* ty=Tensor[(12, 14, 11), float32] */;
  %1189 = tan(%1188) /* ty=Tensor[(12, 14, 11), float32] */;
  %1190 = cast(%var_4884, dtype="float64") /* ty=Tensor[(12, 14, 11), float64] */;
  %1191 = shape_of(%1189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1192 = cast(%1189, dtype="float64") /* ty=Tensor[(12, 14, 11), float64] */;
  %1193 = dyn.reshape(%1190, %1191, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1194 = @func_2674(%1179) /* ty=Tensor[(5, 16, 16), float32] */;
  %1195 = sinh(%1180) /* ty=Tensor[(12, 14, 11), float32] */;
  %1196 = %1185.0;
  %1197 = divide(%1192, %1193) /* ty=Tensor[(12, 14, 11), float64] */;
  (%1194, meta[relay.Constant][86] /* ty=Tensor[(1280), float32] */, %1195, %1196, %var_4880, %1197)
}

def @func_12028(%var_12010: Tensor[(14, 6, 9), float32]) -> (Tensor[(14, 6, 9), bool], Tensor[(8, 8, 2), bool]) {
  %1198 = @func_7948() /* ty=Tensor[(14, 6, 9), float32] */;
  %1199 = cast(%var_12010, dtype="bool") /* ty=Tensor[(14, 6, 9), bool] */;
  %1200 = shape_of(%1198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1201 = cast(%1198, dtype="bool") /* ty=Tensor[(14, 6, 9), bool] */;
  %1202 = dyn.reshape(%1199, %1200, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1203 = less_equal(%1201, %1202) /* ty=Tensor[(14, 6, 9), bool] */;
  %1204 = @func_8560() /* ty=Tensor[(8, 8, 2), bool] */;
  (%1203, %1204)
}

def @func_8307() -> Tensor[(8, 8, 2), bool] {
  %1205 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %1205.1
}

def @func_15057() -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) {
  %1206 = @func_7903() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %1207 = @func_10844() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(1056), float32]) */;
  %1208 = %1206.0;
  %1209 = %1207.1;
  (%1208, %1209)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7755(%var_7753: uint8) -> (Tensor[(440), float64], Tensor[(24), float64], Tensor[(6, 2, 12), float64], uint8, Tensor[(8, 8, 2), bool]) {
  @func_7752(%var_7753) /* ty=(Tensor[(440), float64], Tensor[(24), float64], Tensor[(6, 2, 12), float64], uint8, Tensor[(8, 8, 2), bool]) */
}

def @func_12031(%var_12029: Tensor[(14, 6, 9), float32]) -> (Tensor[(14, 6, 9), bool], Tensor[(8, 8, 2), bool]) {
  @func_12028(%var_12029) /* ty=(Tensor[(14, 6, 9), bool], Tensor[(8, 8, 2), bool]) */
}

def @func_10697() -> Tensor[(8, 8, 2), bool] {
  %1 = fn () -> Tensor[(8, 8, 2), bool] {
    %0 = @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */;
    %0.0
  };
  %1() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_7211(%var_7210: Tensor[(16, 11, 10), uint16]) -> Tensor[(16, 11, 10), float64] {
  %6 = fn (%var_7202: Tensor[(16, 11, 10), uint16]) -> Tensor[(16, 11, 10), float64] {
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 1, 10), uint16] */, dtype="uint16") /* ty=Tensor[(16, 1, 10), uint16] */;
    %3 = cast(%var_7202, dtype="uint16") /* ty=Tensor[(16, 11, 10), uint16] */;
    %4 = bitwise_or(%2, %3) /* ty=Tensor[(16, 11, 10), uint16] */;
    %5 = cast(%4, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
    exp(%5) /* ty=Tensor[(16, 11, 10), float64] */
  };
  %6(%var_7210) /* ty=Tensor[(16, 11, 10), float64] */
}

def @func_11969(%var_11967: Tensor[(2, 80), int32], %var_11968: Tensor[(1280), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(160), int32], Tensor[(2, 80), int32], Tensor[(756), float32], Tensor[(1280), float32], Tensor[(39), float64], Tensor[(1350), float32], Tensor[(1056), float32], Tensor[(768), bool], Tensor[(2, 2, 13), float32]) {
  %31 = fn (%var_11927: Tensor[(2, 80), int32], %var_11933: Tensor[(1280), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(160), int32], Tensor[(2, 80), int32], Tensor[(756), float32], Tensor[(1280), float32], Tensor[(39), float64], Tensor[(1350), float32], Tensor[(1056), float32], Tensor[(768), bool], Tensor[(2, 2, 13), float32]) {
    %7 = cast(8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %8 = cast(%var_11927, dtype="int32") /* ty=Tensor[(2, 80), int32] */;
    %9 = reshape(%7, newshape=[]) /* ty=int32 */;
    %10 = reshape(%8, newshape=[160]) /* ty=Tensor[(160), int32] */;
    %11 = @func_8733(%9, %10) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) */;
    %12 = cast(%var_11933, dtype="float32") /* ty=Tensor[(1280), float32] */;
    %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
    %14 = cast(meta[relay.Constant][2] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
    %15 = cast(meta[relay.Constant][3] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
    %16 = cast(meta[relay.Constant][4] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
    %17 = reshape(%12, newshape=[1280]) /* ty=Tensor[(1280), float32] */;
    %18 = reshape(%13, newshape=[39]) /* ty=Tensor[(39), float64] */;
    %19 = reshape(%14, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
    %20 = reshape(%15, newshape=[1056]) /* ty=Tensor[(1056), float32] */;
    %21 = reshape(%16, newshape=[768]) /* ty=Tensor[(768), bool] */;
    %22 = @func_7006(%17, %18, %19, %20, %21) /* ty=(Tensor[(24), float64], Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(3, 2, 13), float64], Tensor[(39), float64], Tensor[(1350), float32], Tensor[(768), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(8, 8, 2), bool], Tensor[(1056), float32]) */;
    %23 = @func_9997() /* ty=(Tensor[(2, 2, 13), float32],) */;
    %24 = %23.0;
    %25 = cast(%24, dtype="float32") /* ty=Tensor[(2, 2, 13), float32] */;
    %26 = cast(8 /* ty=int32 */, dtype="float32") /* ty=float32 */;
    %27 = @func_11389() /* ty=Tensor[(8, 8, 2), bool] */;
    %28 = %11.3;
    %29 = %22.8;
    %30 = divide(%25, %26) /* ty=Tensor[(2, 2, 13), float32] */;
    (%27, %28, %var_11927, %29, %var_11933, meta[relay.Constant][1] /* ty=Tensor[(39), float64] */, meta[relay.Constant][2] /* ty=Tensor[(1350), float32] */, meta[relay.Constant][3] /* ty=Tensor[(1056), float32] */, meta[relay.Constant][4] /* ty=Tensor[(768), bool] */, %30)
  };
  %31(%var_11967, %var_11968) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(160), int32], Tensor[(2, 80), int32], Tensor[(756), float32], Tensor[(1280), float32], Tensor[(39), float64], Tensor[(1350), float32], Tensor[(1056), float32], Tensor[(768), bool], Tensor[(2, 2, 13), float32]) */
}

def @func_6435(%var_6428: Tensor[(8, 8, 2), bool]) -> (Tensor[(8, 8, 2), bool],) {
  %32 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  %33 = cast(%var_6428, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%32, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %37 = less(%35, %36) /* ty=Tensor[(8, 8, 2), bool] */;
  (%37,)
}

def @func_12756(%var_12736: int32) -> (int32, Tensor[(8, 8, 2), float64]) {
  %38 = @func_7687() /* ty=Tensor[(8, 8, 2), bool] */;
  %39 = cast(%var_12736, dtype="int32") /* ty=int32 */;
  %40 = reshape(%39, newshape=[]) /* ty=int32 */;
  %41 = @func_11061(%40) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(1560), uint8], Tensor[(8, 8, 2), bool], Tensor[(12, 10, 13), float64], Tensor[(8, 8, 2), bool], int32, Tensor[(720), int64], int32, Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(2, 2, 13), float32], Tensor[(2, 2, 13), float64], Tensor[(8, 8, 2), bool]) */;
  %42 = %41.7;
  %43 = cast(%38, dtype="float64") /* ty=Tensor[(8, 8, 2), float64] */;
  %44 = cast(%42, dtype="float64") /* ty=float64 */;
  %45 = floor_mod(%43, %44) /* ty=Tensor[(8, 8, 2), float64] */;
  (%var_12736, %45)
}

def @func_5433(%var_5431: Tensor[(8, 8, 4), uint16], %var_5432: Tensor[(8, 8, 4), uint16]) -> (Tensor[(3, 14, 5), bool], Tensor[(1, 210), uint64], Tensor[(1350), float32], Tensor[(8, 8, 4), float64], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) {
  %70 = fn (%var_5377: Tensor[(8, 8, 4), uint16], %var_5378: Tensor[(8, 8, 4), uint16]) -> (Tensor[(3, 14, 5), bool], Tensor[(1, 210), uint64], Tensor[(1350), float32], Tensor[(8, 8, 4), float64], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) {
    %46 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 210), uint64] */, dtype="uint64") /* ty=Tensor[(1, 210), uint64] */;
    %47 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 210), uint64] */, dtype="uint64") /* ty=Tensor[(1, 210), uint64] */;
    %48 = cast(meta[relay.Constant][6] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
    %49 = reshape(%46, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint64] */;
    %50 = reshape(%47, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint64] */;
    %51 = reshape(%48, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
    %52 = @func_3738(%49, %50, %51) /* ty=(Tensor[(3, 14, 5), bool], Tensor[(15, 9, 10), bool], Tensor[(1350), float32]) */;
    %53 = cast(%var_5378, dtype="uint16") /* ty=Tensor[(8, 8, 4), uint16] */;
    %54 = shape_of(%var_5377, dtype="int32") /* ty=Tensor[(3), int32] */;
    %55 = cast(%var_5377, dtype="uint16") /* ty=Tensor[(8, 8, 4), uint16] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %57 = multiply(%55, %56) /* ty=Tensor[(8, 8, 4), uint16] */;
    %58 = cast(%var_5378, dtype="float64") /* ty=Tensor[(8, 8, 4), float64] */;
    %59 = shape_of(%57, dtype="int32") /* ty=Tensor[(3), int32] */;
    %60 = cast(%57, dtype="float64") /* ty=Tensor[(8, 8, 4), float64] */;
    %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %62 = cast(meta[relay.Constant][7] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
    %63 = cast(meta[relay.Constant][7] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
    %64 = reshape(%62, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
    %65 = reshape(%63, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
    %66 = @func_3334(%64, %65) /* ty=(Tensor[(12, 10, 13), uint8],) */;
    %67 = %52.0;
    %68 = floor_divide(%60, %61) /* ty=Tensor[(8, 8, 4), float64] */;
    %69 = %66.0;
    (%67, meta[relay.Constant][5] /* ty=Tensor[(1, 210), uint64] */, meta[relay.Constant][6] /* ty=Tensor[(1350), float32] */, %68, %69, meta[relay.Constant][7] /* ty=Tensor[(1560), uint8] */)
  };
  %70(%var_5431, %var_5432) /* ty=(Tensor[(3, 14, 5), bool], Tensor[(1, 210), uint64], Tensor[(1350), float32], Tensor[(8, 8, 4), float64], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) */
}

def @func_13449(%var_13426: Tensor[(693), bool], %var_13427: Tensor[(768), bool]) -> (Tensor[(8, 8, 2), bool], Tensor[(9, 11, 7), float32], Tensor[(693), bool], Tensor[(768), bool]) {
  %71 = cast(%var_13426, dtype="bool") /* ty=Tensor[(693), bool] */;
  %72 = cast(%var_13426, dtype="bool") /* ty=Tensor[(693), bool] */;
  %73 = cast(%var_13427, dtype="bool") /* ty=Tensor[(768), bool] */;
  %74 = reshape(%71, newshape=[9, 11, 7]) /* ty=Tensor[(9, 11, 7), bool] */;
  %75 = reshape(%72, newshape=[9, 11, 7]) /* ty=Tensor[(9, 11, 7), bool] */;
  %76 = reshape(%73, newshape=[2, 384]) /* ty=Tensor[(2, 384), bool] */;
  %77 = @func_3586(%74, %75, %76) /* ty=(Tensor[(440), float64], bool, Tensor[(2, 384), bool], Tensor[(1056), float32], Tensor[(9, 11, 7), float32]) */;
  %78 = @func_12065() /* ty=Tensor[(8, 8, 2), bool] */;
  %79 = %77.4;
  (%78, %79, %var_13426, %var_13427)
}

def @func_7903() -> (Tensor[(8, 8, 2), bool],) {
  %80 = @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %81 = %80.0;
  (%81,)
}

def @func_14577() -> (Tensor[(8, 8, 2), bool],) {
  %82 = @func_8307() /* ty=Tensor[(8, 8, 2), bool] */;
  (%82,)
}

def @func_9749() -> Tensor[(2, 2, 13), float32] {
  %84 = fn () -> Tensor[(2, 2, 13), float32] {
    %83 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
    %83.0
  };
  %84() /* ty=Tensor[(2, 2, 13), float32] */
}

def @func_13353(%var_13351: Tensor[(768, 1), bool], %var_13352: Tensor[(1056), float32]) -> (int32, Tensor[(8, 8, 2), bool], Tensor[(768, 1), bool], Tensor[(1056), float32]) {
  %93 = fn (%var_13347: Tensor[(768, 1), bool], %var_13348: Tensor[(1056), float32]) -> (int32, Tensor[(8, 8, 2), bool], Tensor[(768, 1), bool], Tensor[(1056), float32]) {
    %85 = @func_11734() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32], Tensor[(160), int32], int32, Tensor[(8, 8, 2), float32]) */;
    %86 = cast(%var_13347, dtype="bool") /* ty=Tensor[(768, 1), bool] */;
    %87 = cast(%var_13348, dtype="float32") /* ty=Tensor[(1056), float32] */;
    %88 = reshape(%86, newshape=[768]) /* ty=Tensor[(768), bool] */;
    %89 = reshape(%87, newshape=[1056]) /* ty=Tensor[(1056), float32] */;
    %90 = @func_7496(%88, %89) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(5, 11, 8), float64], Tensor[(440), float64], Tensor[(12, 8, 8), bool], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool]) */;
    %91 = %85.3;
    %92 = %90.7;
    (%91, %92, %var_13347, %var_13348)
  };
  %93(%var_13351, %var_13352) /* ty=(int32, Tensor[(8, 8, 2), bool], Tensor[(768, 1), bool], Tensor[(1056), float32]) */
}

def @func_2674(%var_2668: Tensor[(5, 16, 16), float32]) -> Tensor[(5, 16, 16), float32] {
  %94 = cast(%var_2668, dtype="float32") /* ty=Tensor[(5, 16, 16), float32] */;
  tan(%94) /* ty=Tensor[(5, 16, 16), float32] */
}

def @func_9929() -> Tensor[(2, 2, 13), float32] {
  @func_9748() /* ty=Tensor[(2, 2, 13), float32] */
}

def @func_1854(%var_1843: Tensor[(15, 10, 13), float64], %var_1844: Tensor[(15, 10, 13), float64]) -> (Tensor[(15, 10, 13), float64],) {
  %95 = cast(%var_1844, dtype="float64") /* ty=Tensor[(15, 10, 13), float64] */;
  %96 = shape_of(%var_1843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%var_1843, dtype="float64") /* ty=Tensor[(15, 10, 13), float64] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %99 = mod(%97, %98) /* ty=Tensor[(15, 10, 13), float64] */;
  (%99,)
}

def @func_7905() -> (Tensor[(8, 8, 2), bool],) {
  @func_7903() /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_440(%var_439: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(16, 6, 11), float32], Tensor[(1056), float32]) {
  %105 = fn (%var_432: Tensor[(5, 11, 8), float64]) -> (Tensor[(5, 11, 8), float64], Tensor[(16, 6, 11), float32], Tensor[(1056), float32]) {
    %100 = cast(%var_432, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
    %101 = cast(meta[relay.Constant][8] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
    %102 = reshape(%101, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float32] */;
    %103 = log2(%100) /* ty=Tensor[(5, 11, 8), float64] */;
    %104 = @func_226(%102) /* ty=Tensor[(16, 6, 11), float32] */;
    (%103, %104, meta[relay.Constant][8] /* ty=Tensor[(1056), float32] */)
  };
  %105(%var_439) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(16, 6, 11), float32], Tensor[(1056), float32]) */
}

def @func_9253() -> (Tensor[(2, 2, 13), float32], Tensor[(5, 16, 16), float32], Tensor[(1280), float32]) {
  %111 = fn () -> (Tensor[(2, 2, 13), float32], Tensor[(5, 16, 16), float32], Tensor[(1280), float32]) {
    %106 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
    %107 = cast(meta[relay.Constant][9] /* ty=Tensor[(1280), float32] */, dtype="float32") /* ty=Tensor[(1280), float32] */;
    %108 = reshape(%107, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), float32] */;
    %109 = %106.0;
    %110 = @func_2674(%108) /* ty=Tensor[(5, 16, 16), float32] */;
    (%109, %110, meta[relay.Constant][9] /* ty=Tensor[(1280), float32] */)
  };
  %111() /* ty=(Tensor[(2, 2, 13), float32], Tensor[(5, 16, 16), float32], Tensor[(1280), float32]) */
}

def @func_8073(%var_8072: Tensor[(14, 6, 9), float32]) -> Tensor[(14, 6, 9), bool] {
  %118 = fn (%var_8040: Tensor[(14, 6, 9), float32]) -> Tensor[(14, 6, 9), bool] {
    %112 = @func_7653() /* ty=(Tensor[(14, 6, 9), float32],) */;
    %113 = %112.0;
    %114 = cast(%var_8040, dtype="bool") /* ty=Tensor[(14, 6, 9), bool] */;
    %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
    %116 = cast(%113, dtype="bool") /* ty=Tensor[(14, 6, 9), bool] */;
    %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%116, %117) /* ty=Tensor[(14, 6, 9), bool] */
  };
  %118(%var_8072) /* ty=Tensor[(14, 6, 9), bool] */
}

def @func_5002(%var_5001: Tensor[(14, 6, 9), float32]) -> (Tensor[(14, 6, 9), float32],) {
  %122 = fn (%var_4986: Tensor[(14, 6, 9), float32]) -> (Tensor[(14, 6, 9), float32],) {
    %119 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 1, 9), float32] */, dtype="float32") /* ty=Tensor[(14, 1, 9), float32] */;
    %120 = cast(%var_4986, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
    %121 = add(%119, %120) /* ty=Tensor[(14, 6, 9), float32] */;
    (%121,)
  };
  %122(%var_5001) /* ty=(Tensor[(14, 6, 9), float32],) */
}

def @func_8679() -> (Tensor[(24), float64],) {
  %125 = fn () -> (Tensor[(24), float64],) {
    %123 = @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */;
    %124 = %123.2;
    (%124,)
  };
  %125() /* ty=(Tensor[(24), float64],) */
}

def @func_12364(%var_12351: Tensor[(1, 12, 7), float32]) -> (Tensor[(?, 12, 7), float64],) {
  %126 = cast(%var_12351, dtype="float32") /* ty=Tensor[(1, 12, 7), float32] */;
  %127 = cos(%126) /* ty=Tensor[(1, 12, 7), float32] */;
  %128 = cast(%var_12351, dtype="float64") /* ty=Tensor[(1, 12, 7), float64] */;
  %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%127, dtype="float64") /* ty=Tensor[(1, 12, 7), float64] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %132 = divide(%130, %131) /* ty=Tensor[(?, 12, 7), float64] */;
  (%132,)
}

def @func_11798() -> (Tensor[(2, 7, ?), bool],) {
  @func_11796() /* ty=(Tensor[(2, 7, ?), bool],) */
}

def @func_15318() -> (Tensor[(8, 8, 2), bool],) {
  @func_15316() /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_7196() -> (Tensor[(8, 8, 2), bool],) {
  %133 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  (%133,)
}

def @func_14349() -> Tensor[(2, 2, 13), float32] {
  %134 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %134.0
}

def @func_6535() -> (Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) {
  @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */
}

def @func_12685() -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) {
  %139 = fn () -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) {
    %135 = @func_7903() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %136 = %135.0;
    %137 = @func_11623() /* ty=Tensor[(8, 8, 2), bool] */;
    %138 = @func_7519() /* ty=Tensor[(8, 8, 2), bool] */;
    (%136, %137, %138)
  };
  %139() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) */
}

def @func_9276() -> Tensor[(8, 8, 2), bool] {
  %141 = fn () -> Tensor[(8, 8, 2), bool] {
    %140 = @func_7032() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %140.0
  };
  %141() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_13705(%var_13703: int32) -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) {
  @func_13702(%var_13703) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) */
}

def @func_9964(%var_9962: Tensor[(210), uint64]) -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(210), uint64], Tensor[(135, 10), float32]) {
  @func_9961(%var_9962) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(210), uint64], Tensor[(135, 10), float32]) */
}

def @func_10130(%var_10071: Tensor[(5, 1, 13), int8], %var_10072: Tensor[(5, 4, 13), int8]) -> (Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8], Tensor[(5, 4, 13), float64], Tensor[(5, 4, 13), int64]) {
  %142 = cast(meta[relay.Constant][11] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %143 = cast(meta[relay.Constant][11] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %144 = reshape(%142, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %145 = reshape(%143, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %146 = @func_3334(%144, %145) /* ty=(Tensor[(12, 10, 13), uint8],) */;
  %147 = cast(%var_10071, dtype="bool") /* ty=Tensor[(5, 1, 13), bool] */;
  %148 = cast(%var_10072, dtype="bool") /* ty=Tensor[(5, 4, 13), bool] */;
  %149 = equal(%147, %148) /* ty=Tensor[(5, 4, 13), bool] */;
  %150 = cast(%149, dtype="float64") /* ty=Tensor[(5, 4, 13), float64] */;
  %151 = sinh(%150) /* ty=Tensor[(5, 4, 13), float64] */;
  %152 = cast(%151, dtype="float64") /* ty=Tensor[(5, 4, 13), float64] */;
  %153 = cast(%var_10072, dtype="uint16") /* ty=Tensor[(5, 4, 13), uint16] */;
  %154 = cast(%var_10071, dtype="uint16") /* ty=Tensor[(5, 1, 13), uint16] */;
  %155 = left_shift(%153, %154) /* ty=Tensor[(5, 4, 13), uint16] */;
  %156 = cast(%155, dtype="int64") /* ty=Tensor[(5, 4, 13), int64] */;
  %157 = shape_of(%151, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%151, dtype="int64") /* ty=Tensor[(5, 4, 13), int64] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %160 = %146.0;
  %161 = asinh(%152) /* ty=Tensor[(5, 4, 13), float64] */;
  %162 = logical_xor(%158, %159) /* ty=Tensor[(5, 4, 13), int64] */;
  (%160, meta[relay.Constant][11] /* ty=Tensor[(1560), uint8] */, %161, %162)
}

def @func_1250(%var_1248: uint8) -> (Tensor[(6, 2, 12), float64], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) {
  @func_1247(%var_1248) /* ty=(Tensor[(6, 2, 12), float64], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) */
}

def @func_7084(%var_7082: Tensor[(105, 2), uint64], %var_7083: Tensor[(1350), float32]) -> (Tensor[(8, 8, 2), float32], Tensor[(8, 8, 2), bool], Tensor[(3, 14, 5), bool], Tensor[(105, 2), uint64], Tensor[(1350), float32]) {
  %179 = fn (%var_7076: Tensor[(105, 2), uint64], %var_7077: Tensor[(1350), float32]) -> (Tensor[(8, 8, 2), float32], Tensor[(8, 8, 2), bool], Tensor[(3, 14, 5), bool], Tensor[(105, 2), uint64], Tensor[(1350), float32]) {
    %163 = @func_7032() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %164 = %163.0;
    %165 = cast(%164, dtype="float32") /* ty=Tensor[(8, 8, 2), float32] */;
    %166 = sin(%165) /* ty=Tensor[(8, 8, 2), float32] */;
    %167 = cast(%166, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
    %168 = reshape(%167, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), bool] */;
    %169 = @func_6435(%168) /* ty=(Tensor[(8, 8, 2), bool],) */;
    %170 = cast(%var_7076, dtype="uint64") /* ty=Tensor[(105, 2), uint64] */;
    %171 = cast(%var_7076, dtype="uint64") /* ty=Tensor[(105, 2), uint64] */;
    %172 = cast(%var_7077, dtype="float32") /* ty=Tensor[(1350), float32] */;
    %173 = reshape(%170, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint64] */;
    %174 = reshape(%171, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint64] */;
    %175 = reshape(%172, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
    %176 = @func_3738(%173, %174, %175) /* ty=(Tensor[(3, 14, 5), bool], Tensor[(15, 9, 10), bool], Tensor[(1350), float32]) */;
    %177 = %169.0;
    %178 = %176.0;
    (%166, %177, %178, %var_7076, %var_7077)
  };
  %179(%var_7082, %var_7083) /* ty=(Tensor[(8, 8, 2), float32], Tensor[(8, 8, 2), bool], Tensor[(3, 14, 5), bool], Tensor[(105, 2), uint64], Tensor[(1350), float32]) */
}

def @func_2606(%var_2604: Tensor[(15, 9, 10), float32], %var_2605: Tensor[(15, 9, 10), float32]) -> (Tensor[(15, 9, 10), bool],) {
  %185 = fn (%var_2591: Tensor[(15, 9, 10), float32], %var_2592: Tensor[(15, 9, 10), float32]) -> (Tensor[(15, 9, 10), bool],) {
    %180 = cast(%var_2592, dtype="bool") /* ty=Tensor[(15, 9, 10), bool] */;
    %181 = shape_of(%var_2591, dtype="int32") /* ty=Tensor[(3), int32] */;
    %182 = cast(%var_2591, dtype="bool") /* ty=Tensor[(15, 9, 10), bool] */;
    %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %184 = greater(%182, %183) /* ty=Tensor[(15, 9, 10), bool] */;
    (%184,)
  };
  %185(%var_2604, %var_2605) /* ty=(Tensor[(15, 9, 10), bool],) */
}

def @func_4117(%var_4112: Tensor[(7, 2, 9), uint32], %var_4113: bool, %var_4114: Tensor[(768), bool], %var_4115: Tensor[(1056), float32], %var_4116: Tensor[(130, 15), float64]) -> (Tensor[(7, 2, 9), uint32], Tensor[(768), bool], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(15, 10, 13), float64], Tensor[(130, 15), float64]) {
  @func_4110(%var_4112, %var_4113, %var_4114, %var_4115, %var_4116) /* ty=(Tensor[(7, 2, 9), uint32], Tensor[(768), bool], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(15, 10, 13), float64], Tensor[(130, 15), float64]) */
}

def @func_8111(%var_8109: Tensor[(14, 14, 13), float64]) -> (Tensor[(14, 14, 13), float64], Tensor[(14, 14, 13), float32]) {
  @func_8108(%var_8109) /* ty=(Tensor[(14, 14, 13), float64], Tensor[(14, 14, 13), float32]) */
}

def @func_9596(%var_9563: Tensor[(6, 16, 12), uint64], %var_9571: Tensor[(256), uint16], %var_9578: Tensor[(675, 2), float32]) -> (Tensor[(6, 16, 12), bool], Tensor[(12, 10, 13), uint8], Tensor[(256), uint16], Tensor[(8, 8, 2), bool], Tensor[(210), uint64], Tensor[(675, 2), float32], Tensor[(24), float64]) {
  %186 = cast(%var_9563, dtype="bool") /* ty=Tensor[(6, 16, 12), bool] */;
  %187 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(6, 16, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 16, 12), uint64] */, dtype="bool") /* ty=Tensor[(6, 16, 12), bool] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %190 = cast(%var_9571, dtype="uint16") /* ty=Tensor[(256), uint16] */;
  %191 = cast(%var_9571, dtype="uint16") /* ty=Tensor[(256), uint16] */;
  %192 = reshape(%190, newshape=[8, 8, 4]) /* ty=Tensor[(8, 8, 4), uint16] */;
  %193 = reshape(%191, newshape=[8, 8, 4]) /* ty=Tensor[(8, 8, 4), uint16] */;
  %194 = @func_5430(%192, %193) /* ty=(Tensor[(3, 14, 5), bool], Tensor[(1, 210), uint64], Tensor[(1350), float32], Tensor[(8, 8, 4), float64], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) */;
  %195 = cast(meta[relay.Constant][13] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %196 = cast(%var_9578, dtype="float32") /* ty=Tensor[(675, 2), float32] */;
  %197 = reshape(%195, newshape=[105, 2]) /* ty=Tensor[(105, 2), uint64] */;
  %198 = reshape(%196, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %199 = @func_7081(%197, %198) /* ty=(Tensor[(8, 8, 2), float32], Tensor[(8, 8, 2), bool], Tensor[(3, 14, 5), bool], Tensor[(105, 2), uint64], Tensor[(1350), float32]) */;
  %200 = @func_6811() /* ty=(Tensor[(24), float64],) */;
  %201 = less(%188, %189) /* ty=Tensor[(6, 16, 12), bool] */;
  %202 = %194.4;
  %203 = %199.1;
  %204 = %200.0;
  (%201, %202, %var_9571, %203, meta[relay.Constant][13] /* ty=Tensor[(210), uint64] */, %var_9578, %204)
}

def @func_7006(%var_6880: Tensor[(1280), float32], %var_6893: Tensor[(39), float64], %var_6894: Tensor[(1350), float32], %var_6895: Tensor[(1056), float32], %var_6896: Tensor[(768), bool]) -> (Tensor[(24), float64], Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(3, 2, 13), float64], Tensor[(39), float64], Tensor[(1350), float32], Tensor[(768), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(8, 8, 2), bool], Tensor[(1056), float32]) {
  %205 = @func_6811() /* ty=(Tensor[(24), float64],) */;
  %206 = cast(%var_6880, dtype="float32") /* ty=Tensor[(1280), float32] */;
  %207 = reshape(%206, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), float32] */;
  %208 = cast(%var_6893, dtype="float64") /* ty=Tensor[(39), float64] */;
  %209 = cast(%var_6894, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %210 = cast(%var_6895, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %211 = cast(%var_6896, dtype="bool") /* ty=Tensor[(768), bool] */;
  %212 = reshape(%208, newshape=[3, 1, 13]) /* ty=Tensor[(3, 1, 13), float64] */;
  %213 = reshape(%209, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %214 = reshape(%210, newshape=[1056]) /* ty=Tensor[(1056), float32] */;
  %215 = reshape(%211, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %216 = @func_5994(%212, %213, %214, %215) /* ty=(Tensor[(3, 2, 13), float64], Tensor[(3, 14, 5), bool], Tensor[(210), uint64], Tensor[(1350), float32], Tensor[(12, 10, 13), uint8], Tensor[(2, 780), uint8], Tensor[(16, 6, 11), float32], Tensor[(1056), float32], bool, Tensor[(1, 693), bool], Tensor[(768), bool]) */;
  %217 = cast(meta[relay.Constant][14] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %218 = reshape(%217, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %219 = @func_5000(%218) /* ty=(Tensor[(14, 6, 9), float32],) */;
  %220 = cast(meta[relay.Constant][15] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %221 = shape_of(%var_6895, dtype="int32") /* ty=Tensor[(1), int32] */;
  %222 = cast(%var_6895, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?), float32] */;
  %224 = %205.0;
  %225 = @func_2674(%207) /* ty=Tensor[(5, 16, 16), float32] */;
  %226 = %216.0;
  %227 = %219.0;
  %228 = @func_6837() /* ty=Tensor[(8, 8, 2), bool] */;
  %229 = power(%222, %223) /* ty=Tensor[(1056), float32] */;
  (%224, %225, %var_6880, %226, %var_6893, %var_6894, %var_6896, %227, meta[relay.Constant][14] /* ty=Tensor[(756), float32] */, %228, %229)
}

def @func_7198() -> (Tensor[(8, 8, 2), bool],) {
  @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_7273() -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) {
  %230 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %231 = @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %232 = cast(meta[relay.Constant][16] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %233 = reshape(%232, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %234 = @func_5000(%233) /* ty=(Tensor[(14, 6, 9), float32],) */;
  %235 = %234.0;
  %236 = cast(%235, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
  %237 = reshape(%236, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %238 = @func_5000(%237) /* ty=(Tensor[(14, 6, 9), float32],) */;
  %239 = cast(meta[relay.Constant][17] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %240 = reshape(%239, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %241 = @func_438(%240) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(16, 6, 11), float32], Tensor[(1056), float32]) */;
  %242 = %230.1;
  %243 = %231.0;
  %244 = %238.0;
  %245 = %241.2;
  (%242, %243, %235, meta[relay.Constant][16] /* ty=Tensor[(756), float32] */, %244, %245, meta[relay.Constant][17] /* ty=Tensor[(440), float64] */)
}

def @func_7655() -> (Tensor[(14, 6, 9), float32],) {
  @func_7653() /* ty=(Tensor[(14, 6, 9), float32],) */
}

def @func_9931() -> Tensor[(2, 2, 13), float32] {
  @func_9929() /* ty=Tensor[(2, 2, 13), float32] */
}

def @func_4110(%var_4078: Tensor[(7, 2, 9), uint32], %var_4084: bool, %var_4085: Tensor[(768), bool], %var_4086: Tensor[(1056), float32], %var_4098: Tensor[(130, 15), float64]) -> (Tensor[(7, 2, 9), uint32], Tensor[(768), bool], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(15, 10, 13), float64], Tensor[(130, 15), float64]) {
  %246 = cast(%var_4078, dtype="uint32") /* ty=Tensor[(7, 2, 9), uint32] */;
  %247 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(7, 2, 9), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 2, 9), uint32] */, dtype="uint32") /* ty=Tensor[(7, 2, 9), uint32] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %250 = cast(%var_4084, dtype="bool") /* ty=bool */;
  %251 = cast(%var_4085, dtype="bool") /* ty=Tensor[(768), bool] */;
  %252 = cast(%var_4086, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %253 = reshape(%250, newshape=[]) /* ty=bool */;
  %254 = reshape(%251, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %255 = reshape(%252, newshape=[1056, 1]) /* ty=Tensor[(1056, 1), float32] */;
  %256 = @func_3026(%253, %254, %255) /* ty=(Tensor[(16, 12, 13), float32], Tensor[(10, 1, 16), int32], bool, Tensor[(768), bool], Tensor[(1056, 1), float32], Tensor[(440), float64]) */;
  %257 = cast(%var_4098, dtype="float64") /* ty=Tensor[(130, 15), float64] */;
  %258 = cast(%var_4098, dtype="float64") /* ty=Tensor[(130, 15), float64] */;
  %259 = reshape(%257, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %260 = reshape(%258, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %261 = @func_1854(%259, %260) /* ty=(Tensor[(15, 10, 13), float64],) */;
  %262 = right_shift(%248, %249) /* ty=Tensor[(7, 2, 9), uint32] */;
  %263 = %256.3;
  %264 = %261.0;
  (%262, %263, %var_4084, %var_4085, %var_4086, %264, %var_4098)
}

def @func_9887(%var_9885: Tensor[(1350), float32], %var_9886: Tensor[(128), bool]) -> (Tensor[(2, 2, 13), float64], Tensor[(1848), float32], Tensor[(1350), float32], Tensor[(128), bool]) {
  @func_9883(%var_9885, %var_9886) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(1848), float32], Tensor[(1350), float32], Tensor[(128), bool]) */
}

def @func_7801() -> (Tensor[(2, 2, 13), float32],) {
  %267 = fn () -> (Tensor[(2, 2, 13), float32],) {
    %265 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 2, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 2, 13), float32] */;
    %266 = log10(%265) /* ty=Tensor[(2, 2, 13), float32] */;
    (%266,)
  };
  %267() /* ty=(Tensor[(2, 2, 13), float32],) */
}

def @func_13055() -> (Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float64], Tensor[(14, 6, 9), float32]) {
  @func_13053() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float64], Tensor[(14, 6, 9), float32]) */
}

def @func_3337(%var_3335: Tensor[(12, 10, 13), uint8], %var_3336: Tensor[(12, 10, 13), uint8]) -> (Tensor[(12, 10, 13), uint8],) {
  %273 = fn (%var_3319: Tensor[(12, 10, 13), uint8], %var_3320: Tensor[(12, 10, 13), uint8]) -> (Tensor[(12, 10, 13), uint8],) {
    %268 = cast(%var_3320, dtype="uint8") /* ty=Tensor[(12, 10, 13), uint8] */;
    %269 = shape_of(%var_3319, dtype="int32") /* ty=Tensor[(3), int32] */;
    %270 = cast(%var_3319, dtype="uint8") /* ty=Tensor[(12, 10, 13), uint8] */;
    %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %272 = left_shift(%270, %271) /* ty=Tensor[(12, 10, 13), uint8] */;
    (%272,)
  };
  %273(%var_3335, %var_3336) /* ty=(Tensor[(12, 10, 13), uint8],) */
}

def @func_6498() -> (Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) {
  @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */
}

def @func_11625() -> Tensor[(8, 8, 2), bool] {
  @func_11623() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_9182() -> (Tensor[(2, 2, 13), float32], Tensor[(2, 880), uint16]) {
  %274 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %275 = @func_8401() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 880), uint16]) */;
  %276 = %274.0;
  %277 = %275.2;
  (%276, %277)
}

def @func_10372() -> (Tensor[(8, 8, 2), bool],) {
  @func_10370() /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_14241() -> Tensor[(24), float64] {
  @func_14239() /* ty=Tensor[(24), float64] */
}

def @func_8583() -> Tensor[(8, 8, 2), bool] {
  @func_8581() /* ty=Tensor[(8, 8, 2), bool] */
}

def @main(%var_15590: Tensor[(768), bool], %var_15591: Tensor[(264, 4), float32], %var_15592: Tensor[(5, 390), float64]) -> (Tensor[(2, 7, 24), int16], Tensor[(768), bool], Tensor[(126), uint32], Tensor[(768), bool], Tensor[(5, 390), float64], Tensor[(8, 8, 2), bool], Tensor[(264, 4), int16]) {
  %278 = @func_12406() /* ty=(Tensor[(24), float64],) */;
  %279 = %278.0;
  %280 = @func_11798() /* ty=(Tensor[(2, 7, ?), bool],) */;
  %281 = %280.0;
  %282 = cast(%279, dtype="int16") /* ty=Tensor[(24), int16] */;
  %283 = cast(%281, dtype="int16") /* ty=Tensor[(2, 7, ?), int16] */;
  %284 = cast(meta[relay.Constant][20] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %285 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %286 = cast(%var_15590, dtype="bool") /* ty=Tensor[(768), bool] */;
  %287 = cast(%var_15591, dtype="float32") /* ty=Tensor[(264, 4), float32] */;
  %288 = cast(%var_15592, dtype="float64") /* ty=Tensor[(5, 390), float64] */;
  %289 = reshape(%284, newshape=[7, 2, 9]) /* ty=Tensor[(7, 2, 9), uint32] */;
  %290 = reshape(%285, newshape=[]) /* ty=bool */;
  %291 = reshape(%286, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %292 = reshape(%287, newshape=[1056]) /* ty=Tensor[(1056), float32] */;
  %293 = reshape(%288, newshape=[130, 15]) /* ty=Tensor[(130, 15), float64] */;
  %294 = @func_4117(%289, %290, %291, %292, %293) /* ty=(Tensor[(7, 2, 9), uint32], Tensor[(768), bool], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(15, 10, 13), float64], Tensor[(130, 15), float64]) */;
  %295 = cast(%var_15591, dtype="int16") /* ty=Tensor[(264, 4), int16] */;
  %296 = cast(False /* ty=bool */, dtype="int16") /* ty=int16 */;
  %297 = subtract(%282, %283) /* ty=Tensor[(2, 7, 24), int16] */;
  %298 = %294.3;
  %299 = @func_15469() /* ty=Tensor[(8, 8, 2), bool] */;
  %300 = right_shift(%295, %296) /* ty=Tensor[(264, 4), int16] */;
  (%297, %298, meta[relay.Constant][20] /* ty=Tensor[(126), uint32] */, %var_15590, %var_15592, %299, %300)
}

def @func_5719(%var_5667: Tensor[(8, 8, 3), float64], %var_5696: Tensor[(1, 1848), float32], %var_5714: Tensor[(2, 1848), float32]) -> (Tensor[(12, 10, 13), uint8], Tensor[(12, 130), uint8], Tensor[(16, 6, 11), float32], Tensor[(440), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(8, 8, 3), int64], Tensor[(2, 1848), float32]) {
  %301 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 130), uint8] */, dtype="uint8") /* ty=Tensor[(12, 130), uint8] */;
  %302 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 130), uint8] */, dtype="uint8") /* ty=Tensor[(12, 130), uint8] */;
  %303 = reshape(%301, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %304 = reshape(%302, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %305 = @func_3334(%303, %304) /* ty=(Tensor[(12, 10, 13), uint8],) */;
  %306 = cast(meta[relay.Constant][22] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %307 = reshape(%306, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %308 = @func_438(%307) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(16, 6, 11), float32], Tensor[(1056), float32]) */;
  %309 = cast(meta[relay.Constant][23] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %310 = cast(%var_5696, dtype="float32") /* ty=Tensor[(1, 1848), float32] */;
  %311 = reshape(%309, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %312 = reshape(%310, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float32] */;
  %313 = @func_4892(%311, %312) /* ty=(Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(12, 14, 11), float32], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(12, 14, 11), float64]) */;
  %314 = cast(%var_5667, dtype="float64") /* ty=Tensor[(8, 8, 3), float64] */;
  %315 = log(%314) /* ty=Tensor[(8, 8, 3), float64] */;
  %316 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 8, 3), float64] */, dtype="int64") /* ty=Tensor[(8, 8, 3), int64] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="int64") /* ty=Tensor[(8, 8, 3), int64] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %320 = cast(%var_5696, dtype="float32") /* ty=Tensor[(1, 1848), float32] */;
  %321 = cast(%var_5714, dtype="float32") /* ty=Tensor[(2, 1848), float32] */;
  %322 = %305.0;
  %323 = %308.1;
  %324 = %313.3;
  %325 = bitwise_xor(%318, %319) /* ty=Tensor[(8, 8, 3), int64] */;
  %326 = divide(%320, %321) /* ty=Tensor[(2, 1848), float32] */;
  (%322, meta[relay.Constant][21] /* ty=Tensor[(12, 130), uint8] */, %323, meta[relay.Constant][22] /* ty=Tensor[(440), float64] */, %324, meta[relay.Constant][23] /* ty=Tensor[(1350), float32] */, %325, %326)
}

def @func_11577(%var_11575: Tensor[(2, 7, 7), int64], %var_11576: Tensor[(2, 7, 7), int64]) -> Tensor[(2, 7, 7), bool] {
  %331 = fn (%var_11565: Tensor[(2, 7, 7), int64], %var_11566: Tensor[(2, 7, 7), int64]) -> Tensor[(2, 7, 7), bool] {
    %327 = cast(%var_11566, dtype="bool") /* ty=Tensor[(2, 7, 7), bool] */;
    %328 = shape_of(%var_11565, dtype="int32") /* ty=Tensor[(3), int32] */;
    %329 = cast(%var_11565, dtype="bool") /* ty=Tensor[(2, 7, 7), bool] */;
    %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%329, %330) /* ty=Tensor[(2, 7, 7), bool] */
  };
  %331(%var_11575, %var_11576) /* ty=Tensor[(2, 7, 7), bool] */
}

def @func_10053(%var_10039: bool, %var_10040: Tensor[(768), bool], %var_10041: Tensor[(1056), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(768), bool], bool, Tensor[(768), bool], Tensor[(1056), float32]) {
  %332 = @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */;
  %333 = cast(%var_10039, dtype="bool") /* ty=bool */;
  %334 = cast(%var_10040, dtype="bool") /* ty=Tensor[(768), bool] */;
  %335 = cast(%var_10041, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %336 = reshape(%333, newshape=[]) /* ty=bool */;
  %337 = reshape(%334, newshape=[768]) /* ty=Tensor[(768), bool] */;
  %338 = reshape(%335, newshape=[1056, 1]) /* ty=Tensor[(1056, 1), float32] */;
  %339 = @func_3026(%336, %337, %338) /* ty=(Tensor[(16, 12, 13), float32], Tensor[(10, 1, 16), int32], bool, Tensor[(768), bool], Tensor[(1056, 1), float32], Tensor[(440), float64]) */;
  %340 = %332.1;
  %341 = %339.3;
  (%340, %341, %var_10039, %var_10040, %var_10041)
}

def @func_9987() -> (Tensor[(16, 11, 10), float64],) {
  %344 = fn () -> (Tensor[(16, 11, 10), float64],) {
    %342 = @func_8401() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 880), uint16]) */;
    %343 = %342.1;
    (%343,)
  };
  %344() /* ty=(Tensor[(16, 11, 10), float64],) */
}

def @func_7033() -> (Tensor[(8, 8, 2), bool],) {
  %346 = fn () -> (Tensor[(8, 8, 2), bool],) {
    %345 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
    (%345,)
  };
  %346() /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_4665(%var_4664: Tensor[(3, 16, 15), int64]) -> (Tensor[(3, 16, 15), int64],) {
  %352 = fn (%var_4643: Tensor[(3, 16, 15), int64]) -> (Tensor[(3, 16, 15), int64],) {
    %347 = cast(%var_4643, dtype="int64") /* ty=Tensor[(3, 16, 15), int64] */;
    %348 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(3, 16, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %349 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 16, 15), int64] */, dtype="int64") /* ty=Tensor[(3, 16, 15), int64] */;
    %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %351 = add(%349, %350) /* ty=Tensor[(3, 16, 15), int64] */;
    (%351,)
  };
  %352(%var_4664) /* ty=(Tensor[(3, 16, 15), int64],) */
}

def @func_9106(%var_9105: Tensor[(1950), float64]) -> (Tensor[(14, 6, 9), float32], Tensor[(15, 10, 13), float64], Tensor[(1950), bool]) {
  %368 = fn (%var_9084: Tensor[(1950), float64]) -> (Tensor[(14, 6, 9), float32], Tensor[(15, 10, 13), float64], Tensor[(1950), bool]) {
    %353 = @func_7653() /* ty=(Tensor[(14, 6, 9), float32],) */;
    %354 = cast(%var_9084, dtype="float64") /* ty=Tensor[(1950), float64] */;
    %355 = cast(%var_9084, dtype="float64") /* ty=Tensor[(1950), float64] */;
    %356 = reshape(%354, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
    %357 = reshape(%355, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
    %358 = @func_1854(%356, %357) /* ty=(Tensor[(15, 10, 13), float64],) */;
    %359 = cast(%var_9084, dtype="float32") /* ty=Tensor[(1950), float32] */;
    %360 = log10(%359) /* ty=Tensor[(1950), float32] */;
    %361 = cast(%var_9084, dtype="bool") /* ty=Tensor[(1950), bool] */;
    %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(1), int32] */;
    %363 = cast(%360, dtype="bool") /* ty=Tensor[(1950), bool] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?), bool] */;
    %365 = %353.0;
    %366 = %358.0;
    %367 = less_equal(%363, %364) /* ty=Tensor[(1950), bool] */;
    (%365, %366, %367)
  };
  %368(%var_9105) /* ty=(Tensor[(14, 6, 9), float32], Tensor[(15, 10, 13), float64], Tensor[(1950), bool]) */
}

def @func_11086() -> (Tensor[(24), float64],) {
  %370 = fn () -> (Tensor[(24), float64],) {
    %369 = @func_9782() /* ty=Tensor[(24), float64] */;
    (%369,)
  };
  %370() /* ty=(Tensor[(24), float64],) */
}

def @func_11440() -> Tensor[(8, 8, 2), bool] {
  %372 = fn () -> Tensor[(8, 8, 2), bool] {
    %371 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
    %371.1
  };
  %372() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_8402() -> (Tensor[(8, 8, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 880), uint16]) {
  %380 = fn () -> (Tensor[(8, 8, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 880), uint16]) {
    %373 = @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %374 = %373.0;
    %375 = cast(%374, dtype="float64") /* ty=Tensor[(8, 8, 2), float64] */;
    %376 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 880), uint16] */, dtype="uint16") /* ty=Tensor[(2, 880), uint16] */;
    %377 = reshape(%376, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
    %378 = log2(%375) /* ty=Tensor[(8, 8, 2), float64] */;
    %379 = @func_7209(%377) /* ty=Tensor[(16, 11, 10), float64] */;
    (%378, %379, meta[relay.Constant][26] /* ty=Tensor[(2, 880), uint16] */)
  };
  %380() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 880), uint16]) */
}

def @func_15455() -> (Tensor[(14, 6, 9), float32],) {
  %383 = fn () -> (Tensor[(14, 6, 9), float32],) {
    %381 = @func_7653() /* ty=(Tensor[(14, 6, 9), float32],) */;
    %382 = %381.0;
    (%382,)
  };
  %383() /* ty=(Tensor[(14, 6, 9), float32],) */
}

def @func_9782() -> Tensor[(24), float64] {
  %384 = @func_8678() /* ty=(Tensor[(24), float64],) */;
  %384.0
}

def @func_11300() -> (Tensor[(8, 8, 2), bool],) {
  @func_11298() /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_12771(%var_12769: Tensor[(1, 1, 16), float32]) -> Tensor[(1, 1, 16), float32] {
  @func_12768(%var_12769) /* ty=Tensor[(1, 1, 16), float32] */
}

def @func_8933() -> (Tensor[(24), float64], Tensor[(8, 8, 2), bool]) {
  %385 = @func_6811() /* ty=(Tensor[(24), float64],) */;
  %386 = @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %387 = %385.0;
  %388 = %386.0;
  (%387, %388)
}

def @func_9999() -> (Tensor[(2, 2, 13), float32],) {
  @func_9997() /* ty=(Tensor[(2, 2, 13), float32],) */
}

def @func_15057() -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) {
  %389 = @func_7903() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %390 = @func_10844() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(1056), float32]) */;
  %391 = %389.0;
  %392 = %390.1;
  (%391, %392)
}

def @func_6707() -> (Tensor[(8, 8, 2), bool],) {
  %393 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  (%393,)
}

def @func_5543(%var_5523: Tensor[(3, 1, 11), uint16], %var_5524: Tensor[(3, 12, 11), uint16]) -> (Tensor[(3, 12, 11), uint16], Tensor[(16, 6, 11), float32], Tensor[(440), float64]) {
  %394 = cast(%var_5523, dtype="uint16") /* ty=Tensor[(3, 1, 11), uint16] */;
  %395 = cast(%var_5524, dtype="uint16") /* ty=Tensor[(3, 12, 11), uint16] */;
  %396 = cast(meta[relay.Constant][27] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %397 = reshape(%396, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %398 = @func_438(%397) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(16, 6, 11), float32], Tensor[(1056), float32]) */;
  %399 = bitwise_xor(%394, %395) /* ty=Tensor[(3, 12, 11), uint16] */;
  %400 = %398.1;
  (%399, %400, meta[relay.Constant][27] /* ty=Tensor[(440), float64] */)
}

def @func_6367() -> Tensor[(8, 8, 2), bool] {
  %405 = fn () -> Tensor[(8, 8, 2), bool] {
    %401 = cast(meta[relay.Constant][29] /* ty=Tensor[(8, 8, 2), uint16] */, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
    %402 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(8, 8, 2), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %403 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 8, 2), uint16] */, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
    %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%403, %404) /* ty=Tensor[(8, 8, 2), bool] */
  };
  %405() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_6838() -> Tensor[(8, 8, 2), bool] {
  %407 = fn () -> Tensor[(8, 8, 2), bool] {
    %406 = @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */;
    %406.0
  };
  %407() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_8581() -> Tensor[(8, 8, 2), bool] {
  %408 = @func_7903() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %408.0
}

def @func_10514(%var_10512: Tensor[(1350), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(6, 2, 12), float64], Tensor[(98), int16], Tensor[(1056), float32], Tensor[(16, 11, 10), float64], Tensor[(1350), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(8, 8, 2), bool]) {
  @func_10511(%var_10512) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(6, 2, 12), float64], Tensor[(98), int16], Tensor[(1056), float32], Tensor[(16, 11, 10), float64], Tensor[(1350), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(8, 8, 2), bool]) */
}

def @func_4339(%var_4335: int16, %var_4336: Tensor[(14, 7, 1), int16], %var_4337: Tensor[(8, 132), float32], %var_4338: Tensor[(1350), float32]) -> (Tensor[(14, 7, 1), int16], Tensor[(8, 132), float32], Tensor[(6, 2, 12), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(16, 6, 11), float32], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) {
  @func_4333(%var_4335, %var_4336, %var_4337, %var_4338) /* ty=(Tensor[(14, 7, 1), int16], Tensor[(8, 132), float32], Tensor[(6, 2, 12), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(16, 6, 11), float32], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) */
}

def @func_11063(%var_11062: int32) -> (Tensor[(8, 8, 2), bool], Tensor[(1560), uint8], Tensor[(8, 8, 2), bool], Tensor[(12, 10, 13), float64], Tensor[(8, 8, 2), bool], int32, Tensor[(720), int64], int32, Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(2, 2, 13), float32], Tensor[(2, 2, 13), float64], Tensor[(8, 8, 2), bool]) {
  %437 = fn (%var_11003: int32) -> (Tensor[(8, 8, 2), bool], Tensor[(1560), uint8], Tensor[(8, 8, 2), bool], Tensor[(12, 10, 13), float64], Tensor[(8, 8, 2), bool], int32, Tensor[(720), int64], int32, Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(2, 2, 13), float32], Tensor[(2, 2, 13), float64], Tensor[(8, 8, 2), bool]) {
    %409 = @func_7032() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %410 = @func_10931() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %411 = cast(meta[relay.Constant][30] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
    %412 = cast(meta[relay.Constant][30] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
    %413 = reshape(%411, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
    %414 = reshape(%412, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
    %415 = @func_3334(%413, %414) /* ty=(Tensor[(12, 10, 13), uint8],) */;
    %416 = %415.0;
    %417 = cast(%416, dtype="float64") /* ty=Tensor[(12, 10, 13), float64] */;
    %418 = @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %419 = cast(meta[relay.Constant][31] /* ty=Tensor[(720), int64] */, dtype="int64") /* ty=Tensor[(720), int64] */;
    %420 = cast(%var_11003, dtype="int32") /* ty=int32 */;
    %421 = reshape(%419, newshape=[720]) /* ty=Tensor[(720), int64] */;
    %422 = reshape(%420, newshape=[]) /* ty=int32 */;
    %423 = @func_7447(%421, %422) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(3, 16, 15), int64], Tensor[(720), int64], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32], Tensor[(1056), float32]) */;
    %424 = cast(meta[relay.Constant][32] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %425 = reshape(%424, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
    %426 = @func_10296() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) */;
    %427 = @func_7857() /* ty=(Tensor[(2, 2, 13), float64],) */;
    %428 = %409.0;
    %429 = %410.0;
    %430 = log2(%417) /* ty=Tensor[(12, 10, 13), float64] */;
    %431 = %418.0;
    %432 = %423.4;
    %433 = @func_6244(%425) /* ty=Tensor[(2, 3, 4), float64] */;
    %434 = %426.1;
    %435 = %427.0;
    %436 = @func_7550() /* ty=Tensor[(8, 8, 2), bool] */;
    (%428, meta[relay.Constant][30] /* ty=Tensor[(1560), uint8] */, %429, %430, %431, %432, meta[relay.Constant][31] /* ty=Tensor[(720), int64] */, %var_11003, %433, meta[relay.Constant][32] /* ty=Tensor[(24), float64] */, %434, %435, %436)
  };
  %437(%var_11062) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(1560), uint8], Tensor[(8, 8, 2), bool], Tensor[(12, 10, 13), float64], Tensor[(8, 8, 2), bool], int32, Tensor[(720), int64], int32, Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(2, 2, 13), float32], Tensor[(2, 2, 13), float64], Tensor[(8, 8, 2), bool]) */
}

def @func_7822() -> (Tensor[(2, 2, 13), float32],) {
  %440 = fn () -> (Tensor[(2, 2, 13), float32],) {
    %438 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
    %439 = %438.0;
    (%439,)
  };
  %440() /* ty=(Tensor[(2, 2, 13), float32],) */
}

def @func_7275() -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) {
  @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */
}

def @func_14013() -> (Tensor[(16, 11, 10), float64], Tensor[(1056), float32]) {
  %444 = fn () -> (Tensor[(16, 11, 10), float64], Tensor[(1056), float32]) {
    %441 = @func_10655() /* ty=(Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool]) */;
    %442 = %441.0;
    %443 = @func_11830() /* ty=Tensor[(1056), float32] */;
    (%442, %443)
  };
  %444() /* ty=(Tensor[(16, 11, 10), float64], Tensor[(1056), float32]) */
}

def @func_11831() -> Tensor[(1056), float32] {
  %446 = fn () -> Tensor[(1056), float32] {
    %445 = @func_9434() /* ty=(Tensor[(1056), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32]) */;
    %445.0
  };
  %446() /* ty=Tensor[(1056), float32] */
}

def @func_10511(%var_10479: Tensor[(1350), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(6, 2, 12), float64], Tensor[(98), int16], Tensor[(1056), float32], Tensor[(16, 11, 10), float64], Tensor[(1350), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(8, 8, 2), bool]) {
  %447 = @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %448 = cast(meta[relay.Constant][33] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %449 = cast(meta[relay.Constant][34] /* ty=Tensor[(98), int16] */, dtype="int16") /* ty=Tensor[(98), int16] */;
  %450 = cast(meta[relay.Constant][35] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %451 = cast(%var_10479, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %452 = reshape(%448, newshape=[]) /* ty=int16 */;
  %453 = reshape(%449, newshape=[14, 7, 1]) /* ty=Tensor[(14, 7, 1), int16] */;
  %454 = reshape(%450, newshape=[8, 132]) /* ty=Tensor[(8, 132), float32] */;
  %455 = reshape(%451, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %456 = @func_4333(%452, %453, %454, %455) /* ty=(Tensor[(14, 7, 1), int16], Tensor[(8, 132), float32], Tensor[(6, 2, 12), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(16, 6, 11), float32], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) */;
  %457 = @func_9986() /* ty=(Tensor[(16, 11, 10), float64],) */;
  %458 = %457.0;
  %459 = cast(%458, dtype="uint16") /* ty=Tensor[(16, 11, 10), uint16] */;
  %460 = reshape(%459, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
  %461 = cast(%var_10479, dtype="float64") /* ty=Tensor[(1350), float64] */;
  %462 = cast(meta[relay.Constant][33] /* ty=int16 */, dtype="float64") /* ty=float64 */;
  %463 = cast(meta[relay.Constant][33] /* ty=int16 */, dtype="float64") /* ty=float64 */;
  %464 = cast(%458, dtype="float64") /* ty=Tensor[(16, 11, 10), float64] */;
  %465 = cast(meta[relay.Constant][36] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %466 = reshape(%465, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
  %467 = @func_7903() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %468 = %447.0;
  %469 = %456.2;
  %470 = @func_7209(%460) /* ty=Tensor[(16, 11, 10), float64] */;
  %471 = floor_mod(%461, %462) /* ty=Tensor[(1350), float64] */;
  %472 = floor_divide(%463, %464) /* ty=Tensor[(16, 11, 10), float64] */;
  %473 = @func_6244(%466) /* ty=Tensor[(2, 3, 4), float64] */;
  %474 = %467.0;
  (%468, %469, meta[relay.Constant][34] /* ty=Tensor[(98), int16] */, meta[relay.Constant][35] /* ty=Tensor[(1056), float32] */, %470, %471, %472, %473, meta[relay.Constant][36] /* ty=Tensor[(24), float64] */, %474)
}

def @func_6811() -> (Tensor[(24), float64],) {
  %475 = @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */;
  %476 = %475.2;
  (%476,)
}

def @func_10933() -> (Tensor[(8, 8, 2), bool],) {
  @func_10931() /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_15010() -> (Tensor[(440), float64],) {
  @func_15008() /* ty=(Tensor[(440), float64],) */
}

def @func_6533() -> (Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) {
  %477 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %478 = cast(meta[relay.Constant][37] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %479 = reshape(%478, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
  %480 = %477.1;
  %481 = @func_6244(%479) /* ty=Tensor[(2, 3, 4), float64] */;
  (%480, %481, meta[relay.Constant][37] /* ty=Tensor[(24), float64] */)
}

def @func_7887(%var_7866: Tensor[(8, 8, 2), bool]) -> Tensor[(8, 8, 2), float32] {
  %482 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  %483 = cast(%var_7866, dtype="float32") /* ty=Tensor[(8, 8, 2), float32] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="float32") /* ty=Tensor[(8, 8, 2), float32] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%485, %486) /* ty=Tensor[(8, 8, 2), float32] */
}

def @func_13066() -> Tensor[(24), float64] {
  @func_13064() /* ty=Tensor[(24), float64] */
}

def @func_14224(%var_14223: Tensor[(1, 1152), uint64]) -> (Tensor[(2, 2, 13), float32], Tensor[(2, 2, 13), float32], Tensor[(12, 10, 13), uint8], Tensor[(1, 1152), uint64], Tensor[(256), uint16], Tensor[(3, 450), float32]) {
  %499 = fn (%var_14218: Tensor[(1, 1152), uint64]) -> (Tensor[(2, 2, 13), float32], Tensor[(2, 2, 13), float32], Tensor[(12, 10, 13), uint8], Tensor[(1, 1152), uint64], Tensor[(256), uint16], Tensor[(3, 450), float32]) {
    %487 = @func_9252() /* ty=(Tensor[(2, 2, 13), float32], Tensor[(5, 16, 16), float32], Tensor[(1280), float32]) */;
    %488 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
    %489 = cast(%var_14218, dtype="uint64") /* ty=Tensor[(1, 1152), uint64] */;
    %490 = cast(meta[relay.Constant][38] /* ty=Tensor[(256), uint16] */, dtype="uint16") /* ty=Tensor[(256), uint16] */;
    %491 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 450), float32] */, dtype="float32") /* ty=Tensor[(3, 450), float32] */;
    %492 = reshape(%489, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), uint64] */;
    %493 = reshape(%490, newshape=[256]) /* ty=Tensor[(256), uint16] */;
    %494 = reshape(%491, newshape=[675, 2]) /* ty=Tensor[(675, 2), float32] */;
    %495 = @func_9596(%492, %493, %494) /* ty=(Tensor[(6, 16, 12), bool], Tensor[(12, 10, 13), uint8], Tensor[(256), uint16], Tensor[(8, 8, 2), bool], Tensor[(210), uint64], Tensor[(675, 2), float32], Tensor[(24), float64]) */;
    %496 = %487.0;
    %497 = %488.0;
    %498 = %495.1;
    (%496, %497, %498, %var_14218, meta[relay.Constant][38] /* ty=Tensor[(256), uint16] */, meta[relay.Constant][39] /* ty=Tensor[(3, 450), float32] */)
  };
  %499(%var_14223) /* ty=(Tensor[(2, 2, 13), float32], Tensor[(2, 2, 13), float32], Tensor[(12, 10, 13), uint8], Tensor[(1, 1152), uint64], Tensor[(256), uint16], Tensor[(3, 450), float32]) */
}

def @func_11390() -> Tensor[(8, 8, 2), bool] {
  %500 = fn () -> Tensor[(8, 8, 2), bool] {
    @func_7519() /* ty=Tensor[(8, 8, 2), bool] */
  };
  %500() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_6762(%var_6728: uint8, %var_6731: Tensor[(1560), uint8], %var_6750: Tensor[(1950), float64]) -> (Tensor[(2, 3, 4), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(10, 1, 16), int32], uint8, Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8], Tensor[(2, 3, 4), float64], Tensor[(15, 10, 13), float64], Tensor[(1950), float64]) {
  %501 = @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */;
  %502 = cast(meta[relay.Constant][40] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %503 = cast(meta[relay.Constant][40] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %504 = reshape(%502, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %505 = reshape(%503, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %506 = @func_2603(%504, %505) /* ty=(Tensor[(15, 9, 10), bool],) */;
  %507 = cast(%var_6728, dtype="uint8") /* ty=uint8 */;
  %508 = reshape(%507, newshape=[]) /* ty=uint8 */;
  %509 = @func_1247(%508) /* ty=(Tensor[(6, 2, 12), float64], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) */;
  %510 = cast(%var_6731, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %511 = cast(%var_6731, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %512 = reshape(%510, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %513 = reshape(%511, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %514 = @func_3334(%512, %513) /* ty=(Tensor[(12, 10, 13), uint8],) */;
  %515 = %501.1;
  %516 = cast(%515, dtype="float64") /* ty=Tensor[(2, 3, 4), float64] */;
  %517 = reshape(%516, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
  %518 = cast(%var_6750, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %519 = cast(%var_6750, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %520 = reshape(%518, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %521 = reshape(%519, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %522 = @func_1854(%520, %521) /* ty=(Tensor[(15, 10, 13), float64],) */;
  %523 = %506.0;
  %524 = %509.1;
  %525 = %514.0;
  %526 = @func_6244(%517) /* ty=Tensor[(2, 3, 4), float64] */;
  %527 = %522.0;
  (%515, %523, meta[relay.Constant][40] /* ty=Tensor[(1350), float32] */, %524, %var_6728, %525, %var_6731, %526, %527, %var_6750)
}

def @func_11884(%var_11882: Tensor[(1, 6, 15), float32], %var_11883: Tensor[(1560), uint8]) -> (Tensor[(1, 6, 15), float32], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) {
  %536 = fn (%var_11843: Tensor[(1, 6, 15), float32], %var_11869: Tensor[(1560), uint8]) -> (Tensor[(1, 6, 15), float32], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) {
    %528 = cast(%var_11843, dtype="float32") /* ty=Tensor[(1, 6, 15), float32] */;
    %529 = cast(%var_11869, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
    %530 = cast(%var_11869, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
    %531 = reshape(%529, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
    %532 = reshape(%530, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
    %533 = @func_3334(%531, %532) /* ty=(Tensor[(12, 10, 13), uint8],) */;
    %534 = acos(%528) /* ty=Tensor[(1, 6, 15), float32] */;
    %535 = %533.0;
    (%534, %535, %var_11869)
  };
  %536(%var_11882, %var_11883) /* ty=(Tensor[(1, 6, 15), float32], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) */
}

def @func_11458() -> Tensor[(14, 6, 9), float32] {
  %537 = fn () -> Tensor[(14, 6, 9), float32] {
    @func_7948() /* ty=Tensor[(14, 6, 9), float32] */
  };
  %537() /* ty=Tensor[(14, 6, 9), float32] */
}

def @func_6000(%var_5996: Tensor[(3, 1, 13), float64], %var_5997: Tensor[(1350), float32], %var_5998: Tensor[(1056), float32], %var_5999: Tensor[(768), bool]) -> (Tensor[(3, 2, 13), float64], Tensor[(3, 14, 5), bool], Tensor[(210), uint64], Tensor[(1350), float32], Tensor[(12, 10, 13), uint8], Tensor[(2, 780), uint8], Tensor[(16, 6, 11), float32], Tensor[(1056), float32], bool, Tensor[(1, 693), bool], Tensor[(768), bool]) {
  @func_5994(%var_5996, %var_5997, %var_5998, %var_5999) /* ty=(Tensor[(3, 2, 13), float64], Tensor[(3, 14, 5), bool], Tensor[(210), uint64], Tensor[(1350), float32], Tensor[(12, 10, 13), uint8], Tensor[(2, 780), uint8], Tensor[(16, 6, 11), float32], Tensor[(1056), float32], bool, Tensor[(1, 693), bool], Tensor[(768), bool]) */
}

def @func_12028(%var_12010: Tensor[(14, 6, 9), float32]) -> (Tensor[(14, 6, 9), bool], Tensor[(8, 8, 2), bool]) {
  %538 = @func_7948() /* ty=Tensor[(14, 6, 9), float32] */;
  %539 = cast(%var_12010, dtype="bool") /* ty=Tensor[(14, 6, 9), bool] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="bool") /* ty=Tensor[(14, 6, 9), bool] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %543 = less_equal(%541, %542) /* ty=Tensor[(14, 6, 9), bool] */;
  %544 = @func_8560() /* ty=Tensor[(8, 8, 2), bool] */;
  (%543, %544)
}

def @func_12914(%var_12849: Tensor[(1950), float64]) -> (Tensor[(24), float64], uint8, Tensor[(1950), float64], Tensor[(1560), int16], Tensor[(2, 880), bool], Tensor[(2, 880), float32], Tensor[(2, 880), float64]) {
  %545 = @func_11085() /* ty=(Tensor[(24), float64],) */;
  %546 = cast(meta[relay.Constant][41] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %547 = cast(meta[relay.Constant][42] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %548 = cast(%var_12849, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %549 = reshape(%546, newshape=[]) /* ty=uint8 */;
  %550 = reshape(%547, newshape=[1560]) /* ty=Tensor[(1560), uint8] */;
  %551 = reshape(%548, newshape=[1950]) /* ty=Tensor[(1950), float64] */;
  %552 = @func_6762(%549, %550, %551) /* ty=(Tensor[(2, 3, 4), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(10, 1, 16), int32], uint8, Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8], Tensor[(2, 3, 4), float64], Tensor[(15, 10, 13), float64], Tensor[(1950), float64]) */;
  %553 = %552.4;
  %554 = cast(%553, dtype="int16") /* ty=int16 */;
  %555 = cast(meta[relay.Constant][42] /* ty=Tensor[(1560), uint8] */, dtype="int16") /* ty=Tensor[(1560), int16] */;
  %556 = @func_9182() /* ty=(Tensor[(2, 2, 13), float32], Tensor[(2, 880), uint16]) */;
  %557 = %556.1;
  %558 = cast(%557, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
  %559 = tan(%558) /* ty=Tensor[(2, 880), float64] */;
  %560 = cast(%559, dtype="bool") /* ty=Tensor[(2, 880), bool] */;
  %561 = shape_of(%557, dtype="int32") /* ty=Tensor[(2), int32] */;
  %562 = cast(%557, dtype="bool") /* ty=Tensor[(2, 880), bool] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %564 = cast(%559, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
  %565 = atanh(%564) /* ty=Tensor[(2, 880), float64] */;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
  %567 = sqrt(%566) /* ty=Tensor[(2, 880), float64] */;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(2, 880), float32] */;
  %569 = cast(%559, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
  %570 = cast(%553, dtype="float64") /* ty=float64 */;
  %571 = %545.0;
  %572 = bitwise_or(%554, %555) /* ty=Tensor[(1560), int16] */;
  %573 = logical_or(%562, %563) /* ty=Tensor[(2, 880), bool] */;
  %574 = rsqrt(%568) /* ty=Tensor[(2, 880), float32] */;
  %575 = mod(%569, %570) /* ty=Tensor[(2, 880), float64] */;
  (%571, meta[relay.Constant][41] /* ty=uint8 */, %var_12849, %572, %573, %574, %575)
}

def @func_8308() -> Tensor[(8, 8, 2), bool] {
  %577 = fn () -> Tensor[(8, 8, 2), bool] {
    %576 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
    %576.1
  };
  %577() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_14985() -> Tensor[(8, 8, 2), bool] {
  %578 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %578.1
}

def @func_9069(%var_9057: uint16, %var_9058: Tensor[(28), uint16]) -> (Tensor[(14, 6, 9), float32], Tensor[(1560), uint8], uint16, Tensor[(28), uint16]) {
  %579 = @func_7653() /* ty=(Tensor[(14, 6, 9), float32],) */;
  %580 = cast(%var_9057, dtype="uint16") /* ty=uint16 */;
  %581 = cast(%var_9058, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %582 = reshape(%580, newshape=[]) /* ty=uint16 */;
  %583 = reshape(%581, newshape=[7, 4, 1]) /* ty=Tensor[(7, 4, 1), uint16] */;
  %584 = @func_5123(%582, %583) /* ty=(Tensor[(7, 4, 1), uint16], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) */;
  %585 = %579.0;
  %586 = %584.2;
  (%585, %586, %var_9057, %var_9058)
}

def @func_6582(%var_6570: Tensor[(1350), float32], %var_6575: Tensor[(8, 8, 2), bool]) -> (Tensor[(1350), float32], Tensor[(1350), float32], Tensor[(1848), float32], Tensor[(8, 8, 2), bool]) {
  %587 = cast(%var_6570, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %588 = cast(meta[relay.Constant][43] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %589 = reshape(%587, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %590 = reshape(%588, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float32] */;
  %591 = @func_4892(%589, %590) /* ty=(Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(12, 14, 11), float32], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(12, 14, 11), float64]) */;
  %592 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  %593 = cast(%var_6575, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %597 = %591.4;
  %598 = equal(%595, %596) /* ty=Tensor[(8, 8, 2), bool] */;
  (%597, %var_6570, meta[relay.Constant][43] /* ty=Tensor[(1848), float32] */, %598)
}

def @func_10450(%var_10448: Tensor[(128), bool], %var_10449: Tensor[(1848), float32]) -> (Tensor[(14, 6, 9), float32], Tensor[(1350), float32], Tensor[(128), bool], Tensor[(1848), float32]) {
  @func_10446(%var_10448, %var_10449) /* ty=(Tensor[(14, 6, 9), float32], Tensor[(1350), float32], Tensor[(128), bool], Tensor[(1848), float32]) */
}

def @func_10846() -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(1056), float32]) {
  @func_10844() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(1056), float32]) */
}

def @func_10730() -> Tensor[(24), float64] {
  %600 = fn () -> Tensor[(24), float64] {
    %599 = @func_6811() /* ty=(Tensor[(24), float64],) */;
    %599.0
  };
  %600() /* ty=Tensor[(24), float64] */
}

def @func_14936() -> (Tensor[(24), float64], Tensor[(8, 8, 2), bool]) {
  %605 = fn () -> (Tensor[(24), float64], Tensor[(8, 8, 2), bool]) {
    %601 = @func_9811() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(24), float64]) */;
    %602 = @func_8651() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %603 = %601.1;
    %604 = %602.0;
    (%603, %604)
  };
  %605() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool]) */
}

def @func_14134() -> (uint8, Tensor[(8, 8, 2), bool]) {
  %609 = fn () -> (uint8, Tensor[(8, 8, 2), bool]) {
    %606 = @func_13950() /* ty=(uint8,) */;
    %607 = %606.0;
    %608 = @func_11439() /* ty=Tensor[(8, 8, 2), bool] */;
    (%607, %608)
  };
  %609() /* ty=(uint8, Tensor[(8, 8, 2), bool]) */
}

def @func_9883(%var_9871: Tensor[(1350), float32], %var_9872: Tensor[(128), bool]) -> (Tensor[(2, 2, 13), float64], Tensor[(1848), float32], Tensor[(1350), float32], Tensor[(128), bool]) {
  %610 = @func_7857() /* ty=(Tensor[(2, 2, 13), float64],) */;
  %611 = cast(%var_9871, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %612 = cast(%var_9872, dtype="bool") /* ty=Tensor[(128), bool] */;
  %613 = reshape(%611, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %614 = reshape(%612, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), bool] */;
  %615 = @func_6582(%613, %614) /* ty=(Tensor[(1350), float32], Tensor[(1350), float32], Tensor[(1848), float32], Tensor[(8, 8, 2), bool]) */;
  %616 = %610.0;
  %617 = %615.2;
  (%616, %617, %var_9871, %var_9872)
}

def @func_15233(%var_15225: uint16, %var_15226: Tensor[(28), uint16]) -> (Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool], Tensor[(7, 4, 1), uint16], uint16, Tensor[(28), uint16]) {
  %618 = @func_12579() /* ty=(Tensor[(16, 11, 10), float64],) */;
  %619 = @func_11298() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %620 = cast(%var_15225, dtype="uint16") /* ty=uint16 */;
  %621 = cast(%var_15226, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %622 = reshape(%620, newshape=[]) /* ty=uint16 */;
  %623 = reshape(%621, newshape=[7, 4, 1]) /* ty=Tensor[(7, 4, 1), uint16] */;
  %624 = @func_5123(%622, %623) /* ty=(Tensor[(7, 4, 1), uint16], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) */;
  %625 = %618.0;
  %626 = %619.0;
  %627 = %624.0;
  (%625, %626, %627, %var_15225, %var_15226)
}

def @func_9342(%var_9313: Tensor[(18, 42), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), bool], Tensor[(18, 42), float32], Tensor[(14, 6, 9), float32]) {
  %628 = @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %629 = cast(%var_9313, dtype="float32") /* ty=Tensor[(18, 42), float32] */;
  %630 = reshape(%629, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %631 = @func_8071(%630) /* ty=Tensor[(14, 6, 9), bool] */;
  %632 = cast(%631, dtype="float32") /* ty=Tensor[(14, 6, 9), float32] */;
  %633 = reshape(%632, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %634 = @func_5000(%633) /* ty=(Tensor[(14, 6, 9), float32],) */;
  %635 = %628.0;
  %636 = %634.0;
  (%635, %631, %var_9313, %636)
}

def @func_5724(%var_5721: Tensor[(8, 8, 3), float64], %var_5722: Tensor[(1, 1848), float32], %var_5723: Tensor[(2, 1848), float32]) -> (Tensor[(12, 10, 13), uint8], Tensor[(12, 130), uint8], Tensor[(16, 6, 11), float32], Tensor[(440), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(8, 8, 3), int64], Tensor[(2, 1848), float32]) {
  @func_5719(%var_5721, %var_5722, %var_5723) /* ty=(Tensor[(12, 10, 13), uint8], Tensor[(12, 130), uint8], Tensor[(16, 6, 11), float32], Tensor[(440), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(8, 8, 3), int64], Tensor[(2, 1848), float32]) */
}

def @func_9561() -> (Tensor[(8, 8, 2), float64], Tensor[(768), bool], Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) {
  %656 = fn () -> (Tensor[(8, 8, 2), float64], Tensor[(768), bool], Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) {
    %637 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
    %638 = cast(meta[relay.Constant][44] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
    %639 = cast(meta[relay.Constant][45] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
    %640 = reshape(%638, newshape=[768]) /* ty=Tensor[(768), bool] */;
    %641 = reshape(%639, newshape=[1056]) /* ty=Tensor[(1056), float32] */;
    %642 = @func_7496(%640, %641) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(5, 11, 8), float64], Tensor[(440), float64], Tensor[(12, 8, 8), bool], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool]) */;
    %643 = @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %644 = @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %645 = %644.0;
    %646 = cast(%645, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
    %647 = reshape(%646, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), bool] */;
    %648 = @func_6435(%647) /* ty=(Tensor[(8, 8, 2), bool],) */;
    %649 = %637.0;
    %650 = %642.5;
    %651 = %643.0;
    %652 = @func_8581() /* ty=Tensor[(8, 8, 2), bool] */;
    %653 = @func_8872() /* ty=Tensor[(8, 8, 2), bool] */;
    %654 = @func_7519() /* ty=Tensor[(8, 8, 2), bool] */;
    %655 = %648.0;
    (%649, %650, meta[relay.Constant][44] /* ty=Tensor[(768), bool] */, meta[relay.Constant][45] /* ty=Tensor[(1056), float32] */, %651, %645, %652, %653, %654, %655)
  };
  %656() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(768), bool], Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) */
}

def @func_8872() -> Tensor[(8, 8, 2), bool] {
  @func_6837() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_13702(%var_13695: int32) -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) {
  %657 = @func_12684() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) */;
  %658 = cast(%var_13695, dtype="int32") /* ty=int32 */;
  %659 = cast(meta[relay.Constant][46] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %660 = reshape(%658, newshape=[]) /* ty=int32 */;
  %661 = reshape(%659, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int32] */;
  %662 = @func_8787() /* ty=Tensor[(8, 8, 2), bool] */;
  %663 = %657.1;
  %664 = @func_553(%660, %661) /* ty=Tensor[(10, 1, 16), int32] */;
  (%662, %663, %664, %var_13695, meta[relay.Constant][46] /* ty=Tensor[(160), int32] */)
}

def @func_10561(%var_10559: Tensor[(2, 2, 13), float32]) -> Tensor[(2, 2, 13), float32] {
  @func_10558(%var_10559) /* ty=Tensor[(2, 2, 13), float32] */
}

def @func_9073(%var_9071: uint16, %var_9072: Tensor[(28), uint16]) -> (Tensor[(14, 6, 9), float32], Tensor[(1560), uint8], uint16, Tensor[(28), uint16]) {
  @func_9069(%var_9071, %var_9072) /* ty=(Tensor[(14, 6, 9), float32], Tensor[(1560), uint8], uint16, Tensor[(28), uint16]) */
}

def @func_13627() -> (Tensor[(8, 8, 2), bool], Tensor[(16, 11, 10), float64], Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool], Tensor[(24), float64]) {
  %673 = fn () -> (Tensor[(8, 8, 2), bool], Tensor[(16, 11, 10), float64], Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool], Tensor[(24), float64]) {
    %665 = @func_8401() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 880), uint16]) */;
    %666 = @func_11244() /* ty=(Tensor[(16, 11, 10), float64], uint8, Tensor[(24), float64], uint8) */;
    %667 = @func_6811() /* ty=(Tensor[(24), float64],) */;
    %668 = @func_12065() /* ty=Tensor[(8, 8, 2), bool] */;
    %669 = %665.1;
    %670 = %666.0;
    %671 = @func_8872() /* ty=Tensor[(8, 8, 2), bool] */;
    %672 = %667.0;
    (%668, %669, %670, %671, %672)
  };
  %673() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(16, 11, 10), float64], Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool], Tensor[(24), float64]) */
}

def @func_12580() -> (Tensor[(16, 11, 10), float64],) {
  %676 = fn () -> (Tensor[(16, 11, 10), float64],) {
    %674 = @func_10655() /* ty=(Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool]) */;
    %675 = %674.0;
    (%675,)
  };
  %676() /* ty=(Tensor[(16, 11, 10), float64],) */
}

def @func_15237(%var_15235: uint16, %var_15236: Tensor[(28), uint16]) -> (Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool], Tensor[(7, 4, 1), uint16], uint16, Tensor[(28), uint16]) {
  @func_15233(%var_15235, %var_15236) /* ty=(Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool], Tensor[(7, 4, 1), uint16], uint16, Tensor[(28), uint16]) */
}

def @func_3031(%var_3028: bool, %var_3029: Tensor[(768), bool], %var_3030: Tensor[(1056, 1), float32]) -> (Tensor[(16, 12, 13), float32], Tensor[(10, 1, 16), int32], bool, Tensor[(768), bool], Tensor[(1056, 1), float32], Tensor[(440), float64]) {
  @func_3026(%var_3028, %var_3029, %var_3030) /* ty=(Tensor[(16, 12, 13), float32], Tensor[(10, 1, 16), int32], bool, Tensor[(768), bool], Tensor[(1056, 1), float32], Tensor[(440), float64]) */
}

def @func_9997() -> (Tensor[(2, 2, 13), float32],) {
  %677 = @func_9748() /* ty=Tensor[(2, 2, 13), float32] */;
  (%677,)
}

def @func_4333(%var_4260: int16, %var_4261: Tensor[(14, 7, 1), int16], %var_4270: Tensor[(8, 132), float32], %var_4294: Tensor[(1350), float32]) -> (Tensor[(14, 7, 1), int16], Tensor[(8, 132), float32], Tensor[(6, 2, 12), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(16, 6, 11), float32], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) {
  %678 = cast(%var_4260, dtype="int16") /* ty=int16 */;
  %679 = cast(%var_4261, dtype="int16") /* ty=Tensor[(14, 7, 1), int16] */;
  %680 = cast(%var_4260, dtype="uint8") /* ty=uint8 */;
  %681 = reshape(%680, newshape=[]) /* ty=uint8 */;
  %682 = @func_1247(%681) /* ty=(Tensor[(6, 2, 12), float64], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) */;
  %683 = cast(%var_4294, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %684 = cast(%var_4294, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %685 = reshape(%683, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %686 = reshape(%684, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
  %687 = @func_2603(%685, %686) /* ty=(Tensor[(15, 9, 10), bool],) */;
  %688 = cast(%var_4270, dtype="float32") /* ty=Tensor[(8, 132), float32] */;
  %689 = reshape(%688, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float32] */;
  %690 = @func_226(%689) /* ty=Tensor[(16, 6, 11), float32] */;
  %691 = cast(%690, dtype="float32") /* ty=Tensor[(16, 6, 11), float32] */;
  %692 = cast(%var_4260, dtype="int32") /* ty=int32 */;
  %693 = cast(meta[relay.Constant][47] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %694 = reshape(%692, newshape=[]) /* ty=int32 */;
  %695 = reshape(%693, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int32] */;
  %696 = bitwise_and(%678, %679) /* ty=Tensor[(14, 7, 1), int16] */;
  %697 = %682.0;
  %698 = %687.0;
  %699 = log10(%691) /* ty=Tensor[(16, 6, 11), float32] */;
  %700 = @func_553(%694, %695) /* ty=Tensor[(10, 1, 16), int32] */;
  (%696, %var_4270, %697, %698, %var_4294, %699, %700, meta[relay.Constant][47] /* ty=Tensor[(160), int32] */)
}

def @func_7752(%var_7733: uint8) -> (Tensor[(440), float64], Tensor[(24), float64], Tensor[(6, 2, 12), float64], uint8, Tensor[(8, 8, 2), bool]) {
  %701 = @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */;
  %702 = @func_6811() /* ty=(Tensor[(24), float64],) */;
  %703 = cast(%var_7733, dtype="uint8") /* ty=uint8 */;
  %704 = reshape(%703, newshape=[]) /* ty=uint8 */;
  %705 = @func_1247(%704) /* ty=(Tensor[(6, 2, 12), float64], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) */;
  %706 = %701.6;
  %707 = %702.0;
  %708 = %705.0;
  %709 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  (%706, %707, %708, %var_7733, %709)
}

def @func_11623() -> Tensor[(8, 8, 2), bool] {
  %710 = @func_10252() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), float64]) */;
  %710.1
}

def @func_3590(%var_3587: Tensor[(9, 11, 7), bool], %var_3588: Tensor[(9, 11, 7), bool], %var_3589: Tensor[(2, 384), bool]) -> (Tensor[(440), float64], bool, Tensor[(2, 384), bool], Tensor[(1056), float32], Tensor[(9, 11, 7), float32]) {
  %726 = fn (%var_3523: Tensor[(9, 11, 7), bool], %var_3524: Tensor[(9, 11, 7), bool], %var_3556: Tensor[(2, 384), bool]) -> (Tensor[(440), float64], bool, Tensor[(2, 384), bool], Tensor[(1056), float32], Tensor[(9, 11, 7), float32]) {
    %711 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %712 = cast(%var_3556, dtype="bool") /* ty=Tensor[(2, 384), bool] */;
    %713 = cast(meta[relay.Constant][48] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
    %714 = reshape(%711, newshape=[]) /* ty=bool */;
    %715 = reshape(%712, newshape=[768]) /* ty=Tensor[(768), bool] */;
    %716 = reshape(%713, newshape=[1056, 1]) /* ty=Tensor[(1056, 1), float32] */;
    %717 = @func_3026(%714, %715, %716) /* ty=(Tensor[(16, 12, 13), float32], Tensor[(10, 1, 16), int32], bool, Tensor[(768), bool], Tensor[(1056, 1), float32], Tensor[(440), float64]) */;
    %718 = cast(%var_3524, dtype="bool") /* ty=Tensor[(9, 11, 7), bool] */;
    %719 = shape_of(%var_3523, dtype="int32") /* ty=Tensor[(3), int32] */;
    %720 = cast(%var_3523, dtype="bool") /* ty=Tensor[(9, 11, 7), bool] */;
    %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %722 = logical_and(%720, %721) /* ty=Tensor[(9, 11, 7), bool] */;
    %723 = cast(%722, dtype="float32") /* ty=Tensor[(9, 11, 7), float32] */;
    %724 = %717.5;
    %725 = sigmoid(%723) /* ty=Tensor[(9, 11, 7), float32] */;
    (%724, False /* ty=bool */, %var_3556, meta[relay.Constant][48] /* ty=Tensor[(1056), float32] */, %725)
  };
  %726(%var_3587, %var_3588, %var_3589) /* ty=(Tensor[(440), float64], bool, Tensor[(2, 384), bool], Tensor[(1056), float32], Tensor[(9, 11, 7), float32]) */
}

def @func_15304() -> (Tensor[(8, 8, 2), bool],) {
  %729 = fn () -> (Tensor[(8, 8, 2), bool],) {
    %727 = @func_10370() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %728 = %727.0;
    (%728,)
  };
  %729() /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_10298() -> (Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) {
  @func_10296() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) */
}

def @func_14197(%var_14196: Tensor[(12, 16, 6), float64]) -> Tensor[(12, 16, 6), float64] {
  %734 = fn (%var_14186: Tensor[(12, 16, 6), float64]) -> Tensor[(12, 16, 6), float64] {
    %730 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 16, 6), float64] */, dtype="float64") /* ty=Tensor[(12, 16, 6), float64] */;
    %731 = shape_of(%var_14186, dtype="int32") /* ty=Tensor[(3), int32] */;
    %732 = cast(%var_14186, dtype="float64") /* ty=Tensor[(12, 16, 6), float64] */;
    %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%732, %733) /* ty=Tensor[(12, 16, 6), float64] */
  };
  %734(%var_14196) /* ty=Tensor[(12, 16, 6), float64] */
}

def @func_8475(%var_8473: Tensor[(10, 9, 4), float32]) -> (Tensor[(10, 9, 4), float32],) {
  @func_8472(%var_8473) /* ty=(Tensor[(10, 9, 4), float32],) */
}

def @func_6496() -> (Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) {
  %735 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  %736 = cast(%735, dtype="float64") /* ty=Tensor[(8, 8, 2), float64] */;
  %737 = log10(%736) /* ty=Tensor[(8, 8, 2), float64] */;
  %738 = cast(%737, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %739 = reshape(%738, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), bool] */;
  %740 = @func_6435(%739) /* ty=(Tensor[(8, 8, 2), bool],) */;
  %741 = %740.0;
  (%737, %741)
}

def @func_1858(%var_1856: Tensor[(15, 10, 13), float64], %var_1857: Tensor[(15, 10, 13), float64]) -> (Tensor[(15, 10, 13), float64],) {
  @func_1854(%var_1856, %var_1857) /* ty=(Tensor[(15, 10, 13), float64],) */
}

def @func_556(%var_554: int32, %var_555: Tensor[(10, 1, 16), int32]) -> Tensor[(10, 1, 16), int32] {
  %744 = fn (%var_543: int32, %var_544: Tensor[(10, 1, 16), int32]) -> Tensor[(10, 1, 16), int32] {
    %742 = cast(%var_543, dtype="int32") /* ty=int32 */;
    %743 = cast(%var_544, dtype="int32") /* ty=Tensor[(10, 1, 16), int32] */;
    minimum(%742, %743) /* ty=Tensor[(10, 1, 16), int32] */
  };
  %744(%var_554, %var_555) /* ty=Tensor[(10, 1, 16), int32] */
}

def @func_7551() -> Tensor[(8, 8, 2), bool] {
  %746 = fn () -> Tensor[(8, 8, 2), bool] {
    %745 = @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %745.0
  };
  %746() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_7447(%var_7356: Tensor[(720), int64], %var_7402: int32) -> (Tensor[(8, 8, 2), bool], Tensor[(3, 16, 15), int64], Tensor[(720), int64], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32], Tensor[(1056), float32]) {
  %747 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %748 = cast(%var_7356, dtype="int64") /* ty=Tensor[(720), int64] */;
  %749 = reshape(%748, newshape=[3, 16, 15]) /* ty=Tensor[(3, 16, 15), int64] */;
  %750 = @func_4663(%749) /* ty=(Tensor[(3, 16, 15), int64],) */;
  %751 = cast(%var_7402, dtype="int32") /* ty=int32 */;
  %752 = cast(meta[relay.Constant][50] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %753 = reshape(%751, newshape=[]) /* ty=int32 */;
  %754 = reshape(%752, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int32] */;
  %755 = @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */;
  %756 = %747.1;
  %757 = %750.0;
  %758 = @func_553(%753, %754) /* ty=Tensor[(10, 1, 16), int32] */;
  %759 = %755.5;
  (%756, %757, %var_7356, %758, %var_7402, meta[relay.Constant][50] /* ty=Tensor[(160), int32] */, %759)
}

def @func_11796() -> (Tensor[(2, 7, ?), bool],) {
  %760 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 7, 1), float32] */, dtype="float32") /* ty=Tensor[(2, 7, 1), float32] */;
  %761 = cos(%760) /* ty=Tensor[(2, 7, 1), float32] */;
  %762 = cast(%761, dtype="bool") /* ty=Tensor[(2, 7, 1), bool] */;
  %763 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(2, 7, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 7, 1), float32] */, dtype="bool") /* ty=Tensor[(2, 7, 1), bool] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %766 = equal(%764, %765) /* ty=Tensor[(2, 7, ?), bool] */;
  (%766,)
}

def @func_10844() -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(1056), float32]) {
  %767 = @func_7032() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %768 = @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %769 = @func_9434() /* ty=(Tensor[(1056), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32]) */;
  %770 = %769.0;
  %771 = cast(%770, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %772 = tan(%771) /* ty=Tensor[(1056), float64] */;
  %773 = cast(%772, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %774 = %767.0;
  %775 = %768.0;
  %776 = sin(%773) /* ty=Tensor[(1056), float32] */;
  (%774, %775, %776)
}

def @func_8737(%var_8735: int32, %var_8736: Tensor[(160), int32]) -> (Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) {
  @func_8733(%var_8735, %var_8736) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) */
}

def @func_8291(%var_8289: Tensor[(24), float64], %var_8290: uint8) -> (Tensor[(24), float64], uint8, uint8, Tensor[(8, 8, 2), bool], Tensor[(128), bool], Tensor[(2, 2, 13), float64]) {
  %794 = fn (%var_8265: Tensor[(24), float64], %var_8271: uint8) -> (Tensor[(24), float64], uint8, uint8, Tensor[(8, 8, 2), bool], Tensor[(128), bool], Tensor[(2, 2, 13), float64]) {
    %777 = @func_6811() /* ty=(Tensor[(24), float64],) */;
    %778 = %777.0;
    %779 = cast(%var_8265, dtype="float64") /* ty=Tensor[(24), float64] */;
    %780 = shape_of(%778, dtype="int32") /* ty=Tensor[(1), int32] */;
    %781 = cast(%778, dtype="float64") /* ty=Tensor[(24), float64] */;
    %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?), float64] */;
    %783 = cast(%var_8271, dtype="uint8") /* ty=uint8 */;
    %784 = reshape(%783, newshape=[]) /* ty=uint8 */;
    %785 = @func_7752(%784) /* ty=(Tensor[(440), float64], Tensor[(24), float64], Tensor[(6, 2, 12), float64], uint8, Tensor[(8, 8, 2), bool]) */;
    %786 = cast(meta[relay.Constant][52] /* ty=Tensor[(128), bool] */, dtype="bool") /* ty=Tensor[(128), bool] */;
    %787 = reshape(%786, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), bool] */;
    %788 = @func_6435(%787) /* ty=(Tensor[(8, 8, 2), bool],) */;
    %789 = @func_7857() /* ty=(Tensor[(2, 2, 13), float64],) */;
    %790 = divide(%781, %782) /* ty=Tensor[(24), float64] */;
    %791 = %785.3;
    %792 = %788.0;
    %793 = %789.0;
    (%790, %791, %var_8271, %792, meta[relay.Constant][52] /* ty=Tensor[(128), bool] */, %793)
  };
  %794(%var_8289, %var_8290) /* ty=(Tensor[(24), float64], uint8, uint8, Tensor[(8, 8, 2), bool], Tensor[(128), bool], Tensor[(2, 2, 13), float64]) */
}

def @func_1247(%var_1222: uint8) -> (Tensor[(6, 2, 12), float64], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) {
  %795 = cast(%var_1222, dtype="uint8") /* ty=uint8 */;
  %796 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 2, 12), uint8] */, dtype="uint8") /* ty=Tensor[(6, 2, 12), uint8] */;
  %797 = maximum(%795, %796) /* ty=Tensor[(6, 2, 12), uint8] */;
  %798 = cast(%797, dtype="float64") /* ty=Tensor[(6, 2, 12), float64] */;
  %799 = cast(%var_1222, dtype="int32") /* ty=int32 */;
  %800 = cast(meta[relay.Constant][54] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %801 = reshape(%799, newshape=[]) /* ty=int32 */;
  %802 = reshape(%800, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int32] */;
  %803 = asinh(%798) /* ty=Tensor[(6, 2, 12), float64] */;
  %804 = @func_553(%801, %802) /* ty=Tensor[(10, 1, 16), int32] */;
  (%803, %804, meta[relay.Constant][54] /* ty=Tensor[(160), int32] */)
}

def @func_14987() -> Tensor[(8, 8, 2), bool] {
  @func_14985() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_12946() -> (Tensor[(24), float64],) {
  %806 = fn () -> (Tensor[(24), float64],) {
    %805 = @func_10729() /* ty=Tensor[(24), float64] */;
    (%805,)
  };
  %806() /* ty=(Tensor[(24), float64],) */
}

def @func_13774(%var_13770: Tensor[(2, 9, 2), int32], %var_13771: Tensor[(2, 9, 2), int32], %var_13772: Tensor[(1848), float32], %var_13773: Tensor[(2, 96), float64]) -> (Tensor[(2, 9, 2), int32], Tensor[(2, 9, 2), uint32], Tensor[(1350), float32], Tensor[(1848), float32], Tensor[(3696), float32], Tensor[(2, 96), bool]) {
  @func_13768(%var_13770, %var_13771, %var_13772, %var_13773) /* ty=(Tensor[(2, 9, 2), int32], Tensor[(2, 9, 2), uint32], Tensor[(1350), float32], Tensor[(1848), float32], Tensor[(3696), float32], Tensor[(2, 96), bool]) */
}

def @func_13053() -> (Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float64], Tensor[(14, 6, 9), float32]) {
  %807 = @func_11085() /* ty=(Tensor[(24), float64],) */;
  %808 = @func_9748() /* ty=Tensor[(2, 2, 13), float32] */;
  %809 = cast(%808, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  %810 = @func_9038() /* ty=(Tensor[(14, 6, 9), float32],) */;
  %811 = %807.0;
  %812 = @func_9275() /* ty=Tensor[(8, 8, 2), bool] */;
  %813 = sinh(%809) /* ty=Tensor[(2, 2, 13), float64] */;
  %814 = %810.0;
  (%811, %812, %813, %814)
}

def @func_7451(%var_7449: Tensor[(720), int64], %var_7450: int32) -> (Tensor[(8, 8, 2), bool], Tensor[(3, 16, 15), int64], Tensor[(720), int64], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32], Tensor[(1056), float32]) {
  @func_7447(%var_7449, %var_7450) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(3, 16, 15), int64], Tensor[(720), int64], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32], Tensor[(1056), float32]) */
}

def @func_12067() -> Tensor[(8, 8, 2), bool] {
  @func_12065() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_7687() -> Tensor[(8, 8, 2), bool] {
  @func_6837() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_9961(%var_9954: Tensor[(210), uint64]) -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(210), uint64], Tensor[(135, 10), float32]) {
  %815 = @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %816 = cast(%var_9954, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %817 = cast(meta[relay.Constant][55] /* ty=Tensor[(135, 10), float32] */, dtype="float32") /* ty=Tensor[(135, 10), float32] */;
  %818 = reshape(%816, newshape=[105, 2]) /* ty=Tensor[(105, 2), uint64] */;
  %819 = reshape(%817, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %820 = @func_7081(%818, %819) /* ty=(Tensor[(8, 8, 2), float32], Tensor[(8, 8, 2), bool], Tensor[(3, 14, 5), bool], Tensor[(105, 2), uint64], Tensor[(1350), float32]) */;
  %821 = %815.0;
  %822 = %820.1;
  (%821, %822, %var_9954, meta[relay.Constant][55] /* ty=Tensor[(135, 10), float32] */)
}

def @func_228(%var_227: Tensor[(16, 6, 11), float32]) -> Tensor[(16, 6, 11), float32] {
  %824 = fn (%var_161: Tensor[(16, 6, 11), float32]) -> Tensor[(16, 6, 11), float32] {
    %823 = cast(%var_161, dtype="float32") /* ty=Tensor[(16, 6, 11), float32] */;
    erf(%823) /* ty=Tensor[(16, 6, 11), float32] */
  };
  %824(%var_227) /* ty=Tensor[(16, 6, 11), float32] */
}

def @func_6246(%var_6245: Tensor[(2, 3, 4), float64]) -> Tensor[(2, 3, 4), float64] {
  %826 = fn (%var_6240: Tensor[(2, 3, 4), float64]) -> Tensor[(2, 3, 4), float64] {
    %825 = cast(%var_6240, dtype="float64") /* ty=Tensor[(2, 3, 4), float64] */;
    atanh(%825) /* ty=Tensor[(2, 3, 4), float64] */
  };
  %826(%var_6245) /* ty=Tensor[(2, 3, 4), float64] */
}

def @func_8789() -> Tensor[(8, 8, 2), bool] {
  @func_8787() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_5547(%var_5545: Tensor[(3, 1, 11), uint16], %var_5546: Tensor[(3, 12, 11), uint16]) -> (Tensor[(3, 12, 11), uint16], Tensor[(16, 6, 11), float32], Tensor[(440), float64]) {
  @func_5543(%var_5545, %var_5546) /* ty=(Tensor[(3, 12, 11), uint16], Tensor[(16, 6, 11), float32], Tensor[(440), float64]) */
}

def @func_15141() -> (uint8,) {
  %829 = fn () -> (uint8,) {
    %827 = @func_13479() /* ty=(uint8, Tensor[(15, 10, 13), float64], Tensor[(1560), uint8], Tensor[(1950), float64]) */;
    %828 = %827.0;
    (%828,)
  };
  %829() /* ty=(uint8,) */
}

def @func_13871() -> (Tensor[(24), float64], Tensor[(24), float64]) {
  @func_13869() /* ty=(Tensor[(24), float64], Tensor[(24), float64]) */
}

def @func_7858() -> (Tensor[(2, 2, 13), float64],) {
  %834 = fn () -> (Tensor[(2, 2, 13), float64],) {
    %830 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
    %831 = %830.0;
    %832 = cast(%831, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
    %833 = cos(%832) /* ty=Tensor[(2, 2, 13), float64] */;
    (%833,)
  };
  %834() /* ty=(Tensor[(2, 2, 13), float64],) */
}

def @func_15377() -> (Tensor[(8, 8, 2), float64], Tensor[(24), float64], Tensor[(24), float64]) {
  %841 = fn () -> (Tensor[(8, 8, 2), float64], Tensor[(24), float64], Tensor[(24), float64]) {
    %835 = @func_9116() /* ty=Tensor[(8, 8, 2), bool] */;
    %836 = cast(%835, dtype="float64") /* ty=Tensor[(8, 8, 2), float64] */;
    %837 = @func_8678() /* ty=(Tensor[(24), float64],) */;
    %838 = exp(%836) /* ty=Tensor[(8, 8, 2), float64] */;
    %839 = %837.0;
    %840 = @func_14239() /* ty=Tensor[(24), float64] */;
    (%838, %839, %840)
  };
  %841() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(24), float64], Tensor[(24), float64]) */
}

def @func_10296() -> (Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) {
  %842 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %843 = @func_7519() /* ty=Tensor[(8, 8, 2), bool] */;
  %844 = %842.0;
  (%843, %844)
}

def @func_12659(%var_12657: Tensor[(1056), float32]) -> (Tensor[(10, 1, 16), int32], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(110, 4), float64], Tensor[(15, 10, 13), float64], Tensor[(1950), float64], Tensor[(1560), uint8], Tensor[(28), uint16], Tensor[(2, 2, 13), int64], Tensor[(2, 2, 13), uint8]) {
  @func_12656(%var_12657) /* ty=(Tensor[(10, 1, 16), int32], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(110, 4), float64], Tensor[(15, 10, 13), float64], Tensor[(1950), float64], Tensor[(1560), uint8], Tensor[(28), uint16], Tensor[(2, 2, 13), int64], Tensor[(2, 2, 13), uint8]) */
}

def @func_9436() -> (Tensor[(1056), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32]) {
  @func_9434() /* ty=(Tensor[(1056), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32]) */
}

def @func_9345(%var_9343: Tensor[(18, 42), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), bool], Tensor[(18, 42), float32], Tensor[(14, 6, 9), float32]) {
  @func_9342(%var_9343) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), bool], Tensor[(18, 42), float32], Tensor[(14, 6, 9), float32]) */
}

def @func_8874() -> Tensor[(8, 8, 2), bool] {
  @func_8872() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_8520(%var_8517: Tensor[(33), uint16], %var_8518: Tensor[(396), uint16], %var_8519: Tensor[(1760), uint16]) -> (Tensor[(2, 2, 13), float32], Tensor[(8, 8, 2), bool], Tensor[(16, 6, 11), float32], Tensor[(33), uint16], Tensor[(396), uint16], Tensor[(16, 11, 10), float64], Tensor[(1760), uint16]) {
  %857 = fn (%var_8501: Tensor[(33), uint16], %var_8502: Tensor[(396), uint16], %var_8509: Tensor[(1760), uint16]) -> (Tensor[(2, 2, 13), float32], Tensor[(8, 8, 2), bool], Tensor[(16, 6, 11), float32], Tensor[(33), uint16], Tensor[(396), uint16], Tensor[(16, 11, 10), float64], Tensor[(1760), uint16]) {
    %845 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
    %846 = cast(%var_8501, dtype="uint16") /* ty=Tensor[(33), uint16] */;
    %847 = cast(%var_8502, dtype="uint16") /* ty=Tensor[(396), uint16] */;
    %848 = reshape(%846, newshape=[3, 1, 11]) /* ty=Tensor[(3, 1, 11), uint16] */;
    %849 = reshape(%847, newshape=[3, 12, 11]) /* ty=Tensor[(3, 12, 11), uint16] */;
    %850 = @func_5543(%848, %849) /* ty=(Tensor[(3, 12, 11), uint16], Tensor[(16, 6, 11), float32], Tensor[(440), float64]) */;
    %851 = cast(%var_8509, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
    %852 = reshape(%851, newshape=[16, 11, 10]) /* ty=Tensor[(16, 11, 10), uint16] */;
    %853 = %845.0;
    %854 = @func_6837() /* ty=Tensor[(8, 8, 2), bool] */;
    %855 = %850.1;
    %856 = @func_7209(%852) /* ty=Tensor[(16, 11, 10), float64] */;
    (%853, %854, %855, %var_8501, %var_8502, %856, %var_8509)
  };
  %857(%var_8517, %var_8518, %var_8519) /* ty=(Tensor[(2, 2, 13), float32], Tensor[(8, 8, 2), bool], Tensor[(16, 6, 11), float32], Tensor[(33), uint16], Tensor[(396), uint16], Tensor[(16, 11, 10), float64], Tensor[(1760), uint16]) */
}

def @func_12551() -> (Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) {
  @func_12549() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) */
}

def @func_14351() -> Tensor[(2, 2, 13), float32] {
  @func_14349() /* ty=Tensor[(2, 2, 13), float32] */
}

def @func_7013(%var_7008: Tensor[(1280), float32], %var_7009: Tensor[(39), float64], %var_7010: Tensor[(1350), float32], %var_7011: Tensor[(1056), float32], %var_7012: Tensor[(768), bool]) -> (Tensor[(24), float64], Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(3, 2, 13), float64], Tensor[(39), float64], Tensor[(1350), float32], Tensor[(768), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(8, 8, 2), bool], Tensor[(1056), float32]) {
  @func_7006(%var_7008, %var_7009, %var_7010, %var_7011, %var_7012) /* ty=(Tensor[(24), float64], Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(3, 2, 13), float64], Tensor[(39), float64], Tensor[(1350), float32], Tensor[(768), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(8, 8, 2), bool], Tensor[(1056), float32]) */
}

def @func_12367(%var_12365: Tensor[(1, 12, 7), float32]) -> (Tensor[(?, 12, 7), float64],) {
  @func_12364(%var_12365) /* ty=(Tensor[(?, 12, 7), float64],) */
}

def @func_10655() -> (Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool]) {
  %858 = @func_9986() /* ty=(Tensor[(16, 11, 10), float64],) */;
  %859 = @func_10252() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), float64]) */;
  %860 = %858.0;
  %861 = %859.1;
  (%860, %861)
}

def @func_12759(%var_12757: int32) -> (int32, Tensor[(8, 8, 2), float64]) {
  @func_12756(%var_12757) /* ty=(int32, Tensor[(8, 8, 2), float64]) */
}

def @func_15259() -> (Tensor[(2, 880), uint16],) {
  @func_15257() /* ty=(Tensor[(2, 880), uint16],) */
}

def @func_9817() -> Tensor[(14, 6, 9), float32] {
  %862 = fn () -> Tensor[(14, 6, 9), float32] {
    @func_7948() /* ty=Tensor[(14, 6, 9), float32] */
  };
  %862() /* ty=Tensor[(14, 6, 9), float32] */
}

def @func_9812() -> (Tensor[(8, 8, 2), bool], Tensor[(24), float64]) {
  %866 = fn () -> (Tensor[(8, 8, 2), bool], Tensor[(24), float64]) {
    %863 = @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */;
    %864 = @func_7687() /* ty=Tensor[(8, 8, 2), bool] */;
    %865 = %863.2;
    (%864, %865)
  };
  %866() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(24), float64]) */
}

def @func_11298() -> (Tensor[(8, 8, 2), bool],) {
  %867 = @func_9560() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(768), bool], Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) */;
  %868 = %867.7;
  (%868,)
}

def @func_8787() -> Tensor[(8, 8, 2), bool] {
  @func_6366() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_14531(%var_14530: Tensor[(33), uint16]) -> (Tensor[(14, 6, 9), float64], Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32], Tensor[(33), uint16], Tensor[(3, 132), uint16], Tensor[(1760), uint16]) {
  %882 = fn (%var_14515: Tensor[(33), uint16]) -> (Tensor[(14, 6, 9), float64], Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32], Tensor[(33), uint16], Tensor[(3, 132), uint16], Tensor[(1760), uint16]) {
    %869 = @func_7653() /* ty=(Tensor[(14, 6, 9), float32],) */;
    %870 = %869.0;
    %871 = cast(%870, dtype="float64") /* ty=Tensor[(14, 6, 9), float64] */;
    %872 = cast(%var_14515, dtype="uint16") /* ty=Tensor[(33), uint16] */;
    %873 = cast(meta[relay.Constant][56] /* ty=Tensor[(3, 132), uint16] */, dtype="uint16") /* ty=Tensor[(3, 132), uint16] */;
    %874 = cast(meta[relay.Constant][57] /* ty=Tensor[(1760), uint16] */, dtype="uint16") /* ty=Tensor[(1760), uint16] */;
    %875 = reshape(%872, newshape=[33]) /* ty=Tensor[(33), uint16] */;
    %876 = reshape(%873, newshape=[396]) /* ty=Tensor[(396), uint16] */;
    %877 = reshape(%874, newshape=[1760]) /* ty=Tensor[(1760), uint16] */;
    %878 = @func_8516(%875, %876, %877) /* ty=(Tensor[(2, 2, 13), float32], Tensor[(8, 8, 2), bool], Tensor[(16, 6, 11), float32], Tensor[(33), uint16], Tensor[(396), uint16], Tensor[(16, 11, 10), float64], Tensor[(1760), uint16]) */;
    %879 = sqrt(%871) /* ty=Tensor[(14, 6, 9), float64] */;
    %880 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
    %881 = %878.0;
    (%879, %880, %881, %var_14515, meta[relay.Constant][56] /* ty=Tensor[(3, 132), uint16] */, meta[relay.Constant][57] /* ty=Tensor[(1760), uint16] */)
  };
  %882(%var_14530) /* ty=(Tensor[(14, 6, 9), float64], Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32], Tensor[(33), uint16], Tensor[(3, 132), uint16], Tensor[(1760), uint16]) */
}

def @func_13635() -> Tensor[(2, 2, 13), float32] {
  %884 = fn () -> Tensor[(2, 2, 13), float32] {
    %883 = @func_7800() /* ty=(Tensor[(2, 2, 13), float32],) */;
    %883.0
  };
  %884() /* ty=Tensor[(2, 2, 13), float32] */
}

def @func_13951() -> (uint8,) {
  %887 = fn () -> (uint8,) {
    %885 = @func_11244() /* ty=(Tensor[(16, 11, 10), float64], uint8, Tensor[(24), float64], uint8) */;
    %886 = %885.1;
    (%886,)
  };
  %887() /* ty=(uint8,) */
}

def @func_15152() -> Tensor[(8, 8, 2), bool] {
  %889 = fn () -> Tensor[(8, 8, 2), bool] {
    %888 = @func_10931() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %888.0
  };
  %889() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_13869() -> (Tensor[(24), float64], Tensor[(24), float64]) {
  %890 = @func_12945() /* ty=(Tensor[(24), float64],) */;
  %891 = %890.0;
  %892 = @func_9782() /* ty=Tensor[(24), float64] */;
  (%891, %892)
}

def @func_6709() -> (Tensor[(8, 8, 2), bool],) {
  @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_7500(%var_7498: Tensor[(768), bool], %var_7499: Tensor[(1056), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(5, 11, 8), float64], Tensor[(440), float64], Tensor[(12, 8, 8), bool], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool]) {
  @func_7496(%var_7498, %var_7499) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(5, 11, 8), float64], Tensor[(440), float64], Tensor[(12, 8, 8), bool], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool]) */
}

def @func_10370() -> (Tensor[(8, 8, 2), bool],) {
  %893 = @func_8307() /* ty=Tensor[(8, 8, 2), bool] */;
  (%893,)
}

def @func_12472(%var_12462: Tensor[(6, 260), uint8]) -> (Tensor[(8, 8, 2), bool], Tensor[(24), float64], Tensor[(12, 10, 13), uint8], Tensor[(90), float32], Tensor[(6, 260), uint8]) {
  %894 = @func_11244() /* ty=(Tensor[(16, 11, 10), float64], uint8, Tensor[(24), float64], uint8) */;
  %895 = cast(meta[relay.Constant][58] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %896 = cast(%var_12462, dtype="uint8") /* ty=Tensor[(6, 260), uint8] */;
  %897 = reshape(%895, newshape=[1, 6, 15]) /* ty=Tensor[(1, 6, 15), float32] */;
  %898 = reshape(%896, newshape=[1560]) /* ty=Tensor[(1560), uint8] */;
  %899 = @func_11881(%897, %898) /* ty=(Tensor[(1, 6, 15), float32], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) */;
  %900 = @func_11439() /* ty=Tensor[(8, 8, 2), bool] */;
  %901 = %894.2;
  %902 = %899.1;
  (%900, %901, %902, meta[relay.Constant][58] /* ty=Tensor[(90), float32] */, %var_12462)
}

def @func_15316() -> (Tensor[(8, 8, 2), bool],) {
  %903 = @func_7519() /* ty=Tensor[(8, 8, 2), bool] */;
  (%903,)
}

def @func_9434() -> (Tensor[(1056), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32]) {
  %904 = @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */;
  %905 = @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */;
  %906 = %905.3;
  %907 = cast(%906, dtype="float32") /* ty=Tensor[(756), float32] */;
  %908 = reshape(%907, newshape=[14, 6, 9]) /* ty=Tensor[(14, 6, 9), float32] */;
  %909 = @func_5000(%908) /* ty=(Tensor[(14, 6, 9), float32],) */;
  %910 = %904.5;
  %911 = %909.0;
  (%910, %906, %911)
}

def @func_15257() -> (Tensor[(2, 880), uint16],) {
  %912 = @func_9182() /* ty=(Tensor[(2, 2, 13), float32], Tensor[(2, 880), uint16]) */;
  %913 = %912.1;
  (%913,)
}

def @func_15442(%var_15411: Tensor[(84), float32]) -> (Tensor[(8, 8, 2), bool], uint8, Tensor[(?, 12, 7), float64], Tensor[(84), float32], Tensor[(8, 8, 2), bool], Tensor[(2, 880), uint16], Tensor[(5, 16, 16), float32]) {
  %914 = @func_13950() /* ty=(uint8,) */;
  %915 = cast(%var_15411, dtype="float32") /* ty=Tensor[(84), float32] */;
  %916 = reshape(%915, newshape=[1, 12, 7]) /* ty=Tensor[(1, 12, 7), float32] */;
  %917 = @func_12364(%916) /* ty=(Tensor[(?, 12, 7), float64],) */;
  %918 = @func_15257() /* ty=(Tensor[(2, 880), uint16],) */;
  %919 = @func_9252() /* ty=(Tensor[(2, 2, 13), float32], Tensor[(5, 16, 16), float32], Tensor[(1280), float32]) */;
  %920 = @func_11623() /* ty=Tensor[(8, 8, 2), bool] */;
  %921 = %914.0;
  %922 = %917.0;
  %923 = @func_15151() /* ty=Tensor[(8, 8, 2), bool] */;
  %924 = %918.0;
  %925 = %919.1;
  (%920, %921, %922, %var_15411, %923, %924, %925)
}

def @func_15059() -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) {
  @func_15057() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) */
}

def @func_7585(%var_7584: int32) -> (Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) {
  %933 = fn (%var_7573: int32) -> (Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) {
    %926 = @func_7032() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %927 = cast(%var_7573, dtype="int32") /* ty=int32 */;
    %928 = cast(meta[relay.Constant][59] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
    %929 = reshape(%927, newshape=[]) /* ty=int32 */;
    %930 = reshape(%928, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int32] */;
    %931 = %926.0;
    %932 = @func_553(%929, %930) /* ty=Tensor[(10, 1, 16), int32] */;
    (%931, %932, %var_7573, meta[relay.Constant][59] /* ty=Tensor[(160), int32] */)
  };
  %933(%var_7584) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) */
}

def @func_15471() -> Tensor[(8, 8, 2), bool] {
  @func_15469() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_15469() -> Tensor[(8, 8, 2), bool] {
  @func_11389() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_11246() -> (Tensor[(16, 11, 10), float64], uint8, Tensor[(24), float64], uint8) {
  @func_11244() /* ty=(Tensor[(16, 11, 10), float64], uint8, Tensor[(24), float64], uint8) */
}

def @func_6438(%var_6436: Tensor[(8, 8, 2), bool]) -> (Tensor[(8, 8, 2), bool],) {
  @func_6435(%var_6436) /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_15008() -> (Tensor[(440), float64],) {
  %934 = @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */;
  %935 = %934.6;
  %936 = cast(%935, dtype="float64") /* ty=Tensor[(440), float64] */;
  %937 = erf(%936) /* ty=Tensor[(440), float64] */;
  (%937,)
}

def @func_12220(%var_12219: Tensor[(14, 7, 13), float32]) -> Tensor[(14, 7, 13), float32] {
  %940 = fn (%var_12209: Tensor[(14, 7, 13), float32]) -> Tensor[(14, 7, 13), float32] {
    %938 = cast(9.00047f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %939 = cast(%var_12209, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
    floor_mod(%938, %939) /* ty=Tensor[(14, 7, 13), float32] */
  };
  %940(%var_12219) /* ty=Tensor[(14, 7, 13), float32] */
}

def @func_11203(%var_11202: uint8) -> (Tensor[(8, 8, 2), bool], uint8, uint8) {
  %947 = fn (%var_11192: uint8) -> (Tensor[(8, 8, 2), bool], uint8, uint8) {
    %941 = @func_9560() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(768), bool], Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool]) */;
    %942 = cast(%var_11192, dtype="uint8") /* ty=uint8 */;
    %943 = reshape(%942, newshape=[]) /* ty=uint8 */;
    %944 = @func_7752(%943) /* ty=(Tensor[(440), float64], Tensor[(24), float64], Tensor[(6, 2, 12), float64], uint8, Tensor[(8, 8, 2), bool]) */;
    %945 = %941.5;
    %946 = %944.3;
    (%945, %946, %var_11192)
  };
  %947(%var_11202) /* ty=(Tensor[(8, 8, 2), bool], uint8, uint8) */
}

def @func_8108(%var_8081: Tensor[(14, 14, 13), float64]) -> (Tensor[(14, 14, 13), float64], Tensor[(14, 14, 13), float32]) {
  %948 = cast(meta[relay.Constant][60] /* ty=Tensor[(14, 14, 13), float64] */, dtype="float64") /* ty=Tensor[(14, 14, 13), float64] */;
  %949 = shape_of(%var_8081, dtype="int32") /* ty=Tensor[(3), int32] */;
  %950 = cast(%var_8081, dtype="float64") /* ty=Tensor[(14, 14, 13), float64] */;
  %951 = dyn.reshape(%948, %949, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %952 = cast(meta[relay.Constant][60] /* ty=Tensor[(14, 14, 13), float64] */, dtype="float32") /* ty=Tensor[(14, 14, 13), float32] */;
  %953 = floor_mod(%950, %951) /* ty=Tensor[(14, 14, 13), float64] */;
  %954 = cos(%952) /* ty=Tensor[(14, 14, 13), float32] */;
  (%953, %954)
}

def @func_13982(%var_13981: Tensor[(2, 880), uint16]) -> Tensor[(2, 880), float64] {
  %961 = fn (%var_13967: Tensor[(2, 880), uint16]) -> Tensor[(2, 880), float64] {
    %955 = @func_8401() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(16, 11, 10), float64], Tensor[(2, 880), uint16]) */;
    %956 = %955.2;
    %957 = cast(%var_13967, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
    %958 = shape_of(%956, dtype="int32") /* ty=Tensor[(2), int32] */;
    %959 = cast(%956, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
    %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    floor_divide(%959, %960) /* ty=Tensor[(2, 880), float64] */
  };
  %961(%var_13981) /* ty=Tensor[(2, 880), float64] */
}

def @func_7890(%var_7888: Tensor[(8, 8, 2), bool]) -> Tensor[(8, 8, 2), float32] {
  @func_7887(%var_7888) /* ty=Tensor[(8, 8, 2), float32] */
}

def @func_15022() -> Tensor[(8, 8, 2), bool] {
  %963 = fn () -> Tensor[(8, 8, 2), bool] {
    %962 = @func_10931() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %962.0
  };
  %963() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_6813() -> (Tensor[(24), float64],) {
  @func_6811() /* ty=(Tensor[(24), float64],) */
}

def @func_15445(%var_15443: Tensor[(84), float32]) -> (Tensor[(8, 8, 2), bool], uint8, Tensor[(?, 12, 7), float64], Tensor[(84), float32], Tensor[(8, 8, 2), bool], Tensor[(2, 880), uint16], Tensor[(5, 16, 16), float32]) {
  @func_15442(%var_15443) /* ty=(Tensor[(8, 8, 2), bool], uint8, Tensor[(?, 12, 7), float64], Tensor[(84), float32], Tensor[(8, 8, 2), bool], Tensor[(2, 880), uint16], Tensor[(5, 16, 16), float32]) */
}

def @func_13064() -> Tensor[(24), float64] {
  %964 = @func_8933() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool]) */;
  %964.0
}

def @func_9117() -> Tensor[(8, 8, 2), bool] {
  %966 = fn () -> Tensor[(8, 8, 2), bool] {
    %965 = @func_7903() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %965.0
  };
  %966() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_14821() -> (Tensor[(8, 8, 2), bool],) {
  %968 = fn () -> (Tensor[(8, 8, 2), bool],) {
    %967 = @func_8787() /* ty=Tensor[(8, 8, 2), bool] */;
    (%967,)
  };
  %968() /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_9040() -> (Tensor[(14, 6, 9), float32],) {
  @func_9038() /* ty=(Tensor[(14, 6, 9), float32],) */
}

def @func_13479() -> (uint8, Tensor[(15, 10, 13), float64], Tensor[(1560), uint8], Tensor[(1950), float64]) {
  %969 = @func_11244() /* ty=(Tensor[(16, 11, 10), float64], uint8, Tensor[(24), float64], uint8) */;
  %970 = %969.3;
  %971 = cast(%970, dtype="uint8") /* ty=uint8 */;
  %972 = cast(meta[relay.Constant][61] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
  %973 = cast(meta[relay.Constant][62] /* ty=Tensor[(1950), float64] */, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %974 = reshape(%971, newshape=[]) /* ty=uint8 */;
  %975 = reshape(%972, newshape=[1560]) /* ty=Tensor[(1560), uint8] */;
  %976 = reshape(%973, newshape=[1950]) /* ty=Tensor[(1950), float64] */;
  %977 = @func_6762(%974, %975, %976) /* ty=(Tensor[(2, 3, 4), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(10, 1, 16), int32], uint8, Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8], Tensor[(2, 3, 4), float64], Tensor[(15, 10, 13), float64], Tensor[(1950), float64]) */;
  %978 = %977.8;
  (%970, %978, meta[relay.Constant][61] /* ty=Tensor[(1560), uint8] */, meta[relay.Constant][62] /* ty=Tensor[(1950), float64] */)
}

def @func_4895(%var_4893: Tensor[(1350), float32], %var_4894: Tensor[(12, 14, 11), float32]) -> (Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(12, 14, 11), float32], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(12, 14, 11), float64]) {
  %999 = fn (%var_4880: Tensor[(1350), float32], %var_4884: Tensor[(12, 14, 11), float32]) -> (Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(12, 14, 11), float32], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(12, 14, 11), float64]) {
    %979 = cast(meta[relay.Constant][63] /* ty=Tensor[(1280), float32] */, dtype="float32") /* ty=Tensor[(1280), float32] */;
    %980 = reshape(%979, newshape=[5, 16, 16]) /* ty=Tensor[(5, 16, 16), float32] */;
    %981 = cast(meta[relay.Constant][64] /* ty=Tensor[(12, 14, 11), float32] */, dtype="float32") /* ty=Tensor[(12, 14, 11), float32] */;
    %982 = cast(%var_4880, dtype="float32") /* ty=Tensor[(1350), float32] */;
    %983 = cast(%var_4880, dtype="float32") /* ty=Tensor[(1350), float32] */;
    %984 = reshape(%982, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
    %985 = reshape(%983, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
    %986 = @func_2603(%984, %985) /* ty=(Tensor[(15, 9, 10), bool],) */;
    %987 = cast(meta[relay.Constant][64] /* ty=Tensor[(12, 14, 11), float32] */, dtype="float32") /* ty=Tensor[(12, 14, 11), float32] */;
    %988 = atanh(%987) /* ty=Tensor[(12, 14, 11), float32] */;
    %989 = cast(%988, dtype="float32") /* ty=Tensor[(12, 14, 11), float32] */;
    %990 = tan(%989) /* ty=Tensor[(12, 14, 11), float32] */;
    %991 = cast(%var_4884, dtype="float64") /* ty=Tensor[(12, 14, 11), float64] */;
    %992 = shape_of(%990, dtype="int32") /* ty=Tensor[(3), int32] */;
    %993 = cast(%990, dtype="float64") /* ty=Tensor[(12, 14, 11), float64] */;
    %994 = dyn.reshape(%991, %992, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %995 = @func_2674(%980) /* ty=Tensor[(5, 16, 16), float32] */;
    %996 = sinh(%981) /* ty=Tensor[(12, 14, 11), float32] */;
    %997 = %986.0;
    %998 = divide(%993, %994) /* ty=Tensor[(12, 14, 11), float64] */;
    (%995, meta[relay.Constant][63] /* ty=Tensor[(1280), float32] */, %996, %997, %var_4880, %998)
  };
  %999(%var_4893, %var_4894) /* ty=(Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(12, 14, 11), float32], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(12, 14, 11), float64]) */
}

def @func_2677(%var_2675: Tensor[(5, 16, 16), float32]) -> Tensor[(5, 16, 16), float32] {
  @func_2674(%var_2675) /* ty=Tensor[(5, 16, 16), float32] */
}

def @func_9784() -> Tensor[(24), float64] {
  @func_9782() /* ty=Tensor[(24), float64] */
}

def @func_9673(%var_9672: Tensor[(48, 4), float64]) -> (Tensor[(8, 8, 2), bool], Tensor[(1350), float32], Tensor[(48, 4), float64], Tensor[(1848), float32], Tensor[(3696), float32], Tensor[(1280), float32]) {
  %1015 = fn (%var_9656: Tensor[(48, 4), float64]) -> (Tensor[(8, 8, 2), bool], Tensor[(1350), float32], Tensor[(48, 4), float64], Tensor[(1848), float32], Tensor[(3696), float32], Tensor[(1280), float32]) {
    %1000 = cast(%var_9656, dtype="float64") /* ty=Tensor[(48, 4), float64] */;
    %1001 = cast(meta[relay.Constant][65] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
    %1002 = cast(meta[relay.Constant][66] /* ty=Tensor[(3696), float32] */, dtype="float32") /* ty=Tensor[(3696), float32] */;
    %1003 = reshape(%1000, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), float64] */;
    %1004 = reshape(%1001, newshape=[1, 1848]) /* ty=Tensor[(1, 1848), float32] */;
    %1005 = reshape(%1002, newshape=[2, 1848]) /* ty=Tensor[(2, 1848), float32] */;
    %1006 = @func_5719(%1003, %1004, %1005) /* ty=(Tensor[(12, 10, 13), uint8], Tensor[(12, 130), uint8], Tensor[(16, 6, 11), float32], Tensor[(440), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(8, 8, 3), int64], Tensor[(2, 1848), float32]) */;
    %1007 = %1006.5;
    %1008 = cast(%1007, dtype="float32") /* ty=Tensor[(1350), float32] */;
    %1009 = cast(meta[relay.Constant][65] /* ty=Tensor[(1848), float32] */, dtype="float32") /* ty=Tensor[(1848), float32] */;
    %1010 = reshape(%1008, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
    %1011 = reshape(%1009, newshape=[12, 14, 11]) /* ty=Tensor[(12, 14, 11), float32] */;
    %1012 = @func_4892(%1010, %1011) /* ty=(Tensor[(5, 16, 16), float32], Tensor[(1280), float32], Tensor[(12, 14, 11), float32], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(12, 14, 11), float64]) */;
    %1013 = @func_6837() /* ty=Tensor[(8, 8, 2), bool] */;
    %1014 = %1012.1;
    (%1013, %1007, %var_9656, meta[relay.Constant][65] /* ty=Tensor[(1848), float32] */, meta[relay.Constant][66] /* ty=Tensor[(3696), float32] */, %1014)
  };
  %1015(%var_9672) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(1350), float32], Tensor[(48, 4), float64], Tensor[(1848), float32], Tensor[(3696), float32], Tensor[(1280), float32]) */
}

def @func_10657() -> (Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool]) {
  @func_10655() /* ty=(Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool]) */
}

def @func_13255() -> Tensor[(2, 2, 13), float32] {
  %1017 = fn () -> Tensor[(2, 2, 13), float32] {
    %1016 = @func_9182() /* ty=(Tensor[(2, 2, 13), float32], Tensor[(2, 880), uint16]) */;
    %1016.0
  };
  %1017() /* ty=Tensor[(2, 2, 13), float32] */
}

def @func_14579() -> (Tensor[(8, 8, 2), bool],) {
  @func_14577() /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_7496(%var_7490: Tensor[(768), bool], %var_7491: Tensor[(1056), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(5, 11, 8), float64], Tensor[(440), float64], Tensor[(12, 8, 8), bool], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(8, 8, 2), bool]) {
  %1018 = cast(meta[relay.Constant][67] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %1019 = reshape(%1018, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
  %1020 = @func_438(%1019) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(16, 6, 11), float32], Tensor[(1056), float32]) */;
  %1021 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %1022 = cast(%var_7490, dtype="bool") /* ty=Tensor[(768), bool] */;
  %1023 = cast(%var_7491, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %1024 = %1020.0;
  %1025 = cast(%1024, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %1026 = reshape(%1021, newshape=[]) /* ty=bool */;
  %1027 = reshape(%1022, newshape=[12, 8, 8]) /* ty=Tensor[(12, 8, 8), bool] */;
  %1028 = reshape(%1023, newshape=[1056, 1]) /* ty=Tensor[(1056, 1), float32] */;
  %1029 = reshape(%1025, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %1030 = @func_2519(%1026, %1027, %1028, %1029) /* ty=(Tensor[(12, 8, 8), bool], Tensor[(16, 6, 11), float32], Tensor[(1056, 1), float32], Tensor[(1056), float32], Tensor[(440), float64], Tensor[(10, 1, 16), int32]) */;
  %1031 = @func_6366() /* ty=Tensor[(8, 8, 2), bool] */;
  %1032 = cast(%1031, dtype="bool") /* ty=Tensor[(8, 8, 2), bool] */;
  %1033 = reshape(%1032, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), bool] */;
  %1034 = @func_6435(%1033) /* ty=(Tensor[(8, 8, 2), bool],) */;
  %1035 = %1030.0;
  %1036 = %1034.0;
  (%1031, %1024, meta[relay.Constant][67] /* ty=Tensor[(440), float64] */, %1035, True /* ty=bool */, %var_7490, %var_7491, %1036)
}

def @func_10931() -> (Tensor[(8, 8, 2), bool],) {
  %1037 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %1038 = %1037.1;
  (%1038,)
}

def @func_9038() -> (Tensor[(14, 6, 9), float32],) {
  %1039 = @func_7948() /* ty=Tensor[(14, 6, 9), float32] */;
  (%1039,)
}

def @func_12768(%var_12765: Tensor[(1, 1, 16), float32]) -> Tensor[(1, 1, 16), float32] {
  %1040 = cast(%var_12765, dtype="float32") /* ty=Tensor[(1, 1, 16), float32] */;
  asin(%1040) /* ty=Tensor[(1, 1, 16), float32] */
}

def @func_8935() -> (Tensor[(24), float64], Tensor[(8, 8, 2), bool]) {
  @func_8933() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool]) */
}

def @func_8652() -> (Tensor[(8, 8, 2), bool],) {
  %1042 = fn () -> (Tensor[(8, 8, 2), bool],) {
    %1041 = @func_8560() /* ty=Tensor[(8, 8, 2), bool] */;
    (%1041,)
  };
  %1042() /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_5126(%var_5124: uint16, %var_5125: Tensor[(7, 4, 1), uint16]) -> (Tensor[(7, 4, 1), uint16], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) {
  %1052 = fn (%var_5100: uint16, %var_5101: Tensor[(7, 4, 1), uint16]) -> (Tensor[(7, 4, 1), uint16], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) {
    %1043 = cast(%var_5100, dtype="uint16") /* ty=uint16 */;
    %1044 = cast(%var_5101, dtype="uint16") /* ty=Tensor[(7, 4, 1), uint16] */;
    %1045 = cast(meta[relay.Constant][68] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
    %1046 = cast(meta[relay.Constant][68] /* ty=Tensor[(1560), uint8] */, dtype="uint8") /* ty=Tensor[(1560), uint8] */;
    %1047 = reshape(%1045, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
    %1048 = reshape(%1046, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
    %1049 = @func_3334(%1047, %1048) /* ty=(Tensor[(12, 10, 13), uint8],) */;
    %1050 = bitwise_xor(%1043, %1044) /* ty=Tensor[(7, 4, 1), uint16] */;
    %1051 = %1049.0;
    (%1050, %1051, meta[relay.Constant][68] /* ty=Tensor[(1560), uint8] */)
  };
  %1052(%var_5124, %var_5125) /* ty=(Tensor[(7, 4, 1), uint16], Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8]) */
}

def @func_12549() -> (Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) {
  %1053 = @func_6707() /* ty=(Tensor[(8, 8, 2), bool],) */;
  %1054 = %1053.0;
  %1055 = @func_9748() /* ty=Tensor[(2, 2, 13), float32] */;
  (%1054, %1055)
}

def @func_8561() -> Tensor[(8, 8, 2), bool] {
  %1057 = fn () -> Tensor[(8, 8, 2), bool] {
    %1056 = @func_7903() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %1056.0
  };
  %1057() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_11735() -> (Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32], Tensor[(160), int32], int32, Tensor[(8, 8, 2), float32]) {
  %1069 = fn () -> (Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32], Tensor[(160), int32], int32, Tensor[(8, 8, 2), float32]) {
    %1058 = @func_10655() /* ty=(Tensor[(16, 11, 10), float64], Tensor[(8, 8, 2), bool]) */;
    %1059 = @func_7821() /* ty=(Tensor[(2, 2, 13), float32],) */;
    %1060 = cast(6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %1061 = reshape(%1060, newshape=[]) /* ty=int32 */;
    %1062 = @func_7583(%1061) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) */;
    %1063 = @func_8560() /* ty=Tensor[(8, 8, 2), bool] */;
    %1064 = cast(%1063, dtype="float32") /* ty=Tensor[(8, 8, 2), float32] */;
    %1065 = %1058.1;
    %1066 = %1059.0;
    %1067 = %1062.3;
    %1068 = acos(%1064) /* ty=Tensor[(8, 8, 2), float32] */;
    (%1065, %1066, %1067, 6 /* ty=int32 */, %1068)
  };
  %1069() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32], Tensor[(160), int32], int32, Tensor[(8, 8, 2), float32]) */
}

def @func_8733(%var_8692: int32, %var_8693: Tensor[(160), int32]) -> (Tensor[(8, 8, 2), bool], Tensor[(10, 1, 16), int32], int32, Tensor[(160), int32]) {
  %1070 = cast(%var_8692, dtype="int32") /* ty=int32 */;
  %1071 = cast(%var_8693, dtype="int32") /* ty=Tensor[(160), int32] */;
  %1072 = reshape(%1070, newshape=[]) /* ty=int32 */;
  %1073 = reshape(%1071, newshape=[10, 1, 16]) /* ty=Tensor[(10, 1, 16), int32] */;
  %1074 = @func_8307() /* ty=Tensor[(8, 8, 2), bool] */;
  %1075 = @func_553(%1072, %1073) /* ty=Tensor[(10, 1, 16), int32] */;
  (%1074, %1075, %var_8692, %var_8693)
}

def @func_14483() -> (Tensor[(8, 8, 2), bool],) {
  %1078 = fn () -> (Tensor[(8, 8, 2), bool],) {
    %1076 = @func_8651() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %1077 = %1076.0;
    (%1077,)
  };
  %1078() /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_6767(%var_6764: uint8, %var_6765: Tensor[(1560), uint8], %var_6766: Tensor[(1950), float64]) -> (Tensor[(2, 3, 4), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(10, 1, 16), int32], uint8, Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8], Tensor[(2, 3, 4), float64], Tensor[(15, 10, 13), float64], Tensor[(1950), float64]) {
  @func_6762(%var_6764, %var_6765, %var_6766) /* ty=(Tensor[(2, 3, 4), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(10, 1, 16), int32], uint8, Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8], Tensor[(2, 3, 4), float64], Tensor[(15, 10, 13), float64], Tensor[(1950), float64]) */
}

def @func_12246() -> (Tensor[(8, 8, 2), bool],) {
  %1079 = @func_8872() /* ty=Tensor[(8, 8, 2), bool] */;
  (%1079,)
}

def @func_14719(%var_14715: Tensor[(12, 14, 9), float64], %var_14716: Tensor[(98), int16], %var_14717: Tensor[(1056), float32], %var_14718: Tensor[(1350, 1), float32]) -> (Tensor[(12, 14, 9), float64], Tensor[(6, 2, 12), float64], int16, Tensor[(98), int16], Tensor[(1056), float32], Tensor[(1350, 1), float32]) {
  %1092 = fn (%var_14672: Tensor[(12, 14, 9), float64], %var_14700: Tensor[(98), int16], %var_14701: Tensor[(1056), float32], %var_14702: Tensor[(1350, 1), float32]) -> (Tensor[(12, 14, 9), float64], Tensor[(6, 2, 12), float64], int16, Tensor[(98), int16], Tensor[(1056), float32], Tensor[(1350, 1), float32]) {
    %1080 = cast(%var_14672, dtype="float64") /* ty=Tensor[(12, 14, 9), float64] */;
    %1081 = cast(meta[relay.Constant][69] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %1082 = cast(%var_14700, dtype="int16") /* ty=Tensor[(98), int16] */;
    %1083 = cast(%var_14701, dtype="float32") /* ty=Tensor[(1056), float32] */;
    %1084 = cast(%var_14702, dtype="float32") /* ty=Tensor[(1350, 1), float32] */;
    %1085 = reshape(%1081, newshape=[]) /* ty=int16 */;
    %1086 = reshape(%1082, newshape=[14, 7, 1]) /* ty=Tensor[(14, 7, 1), int16] */;
    %1087 = reshape(%1083, newshape=[8, 132]) /* ty=Tensor[(8, 132), float32] */;
    %1088 = reshape(%1084, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
    %1089 = @func_4333(%1085, %1086, %1087, %1088) /* ty=(Tensor[(14, 7, 1), int16], Tensor[(8, 132), float32], Tensor[(6, 2, 12), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(16, 6, 11), float32], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) */;
    %1090 = atan(%1080) /* ty=Tensor[(12, 14, 9), float64] */;
    %1091 = %1089.2;
    (%1090, %1091, meta[relay.Constant][69] /* ty=int16 */, %var_14700, %var_14701, %var_14702)
  };
  %1092(%var_14715, %var_14716, %var_14717, %var_14718) /* ty=(Tensor[(12, 14, 9), float64], Tensor[(6, 2, 12), float64], int16, Tensor[(98), int16], Tensor[(1056), float32], Tensor[(1350, 1), float32]) */
}

def @func_2524(%var_2520: bool, %var_2521: Tensor[(12, 8, 8), bool], %var_2522: Tensor[(1056, 1), float32], %var_2523: Tensor[(440), float64]) -> (Tensor[(12, 8, 8), bool], Tensor[(16, 6, 11), float32], Tensor[(1056, 1), float32], Tensor[(1056), float32], Tensor[(440), float64], Tensor[(10, 1, 16), int32]) {
  %1107 = fn (%var_2491: bool, %var_2492: Tensor[(12, 8, 8), bool], %var_2500: Tensor[(1056, 1), float32], %var_2509: Tensor[(440), float64]) -> (Tensor[(12, 8, 8), bool], Tensor[(16, 6, 11), float32], Tensor[(1056, 1), float32], Tensor[(1056), float32], Tensor[(440), float64], Tensor[(10, 1, 16), int32]) {
    %1093 = cast(%var_2491, dtype="bool") /* ty=bool */;
    %1094 = cast(%var_2492, dtype="bool") /* ty=Tensor[(12, 8, 8), bool] */;
    %1095 = cast(%var_2500, dtype="float32") /* ty=Tensor[(1056, 1), float32] */;
    %1096 = reshape(%1095, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float32] */;
    %1097 = cast(%var_2509, dtype="float64") /* ty=Tensor[(440), float64] */;
    %1098 = reshape(%1097, newshape=[5, 11, 8]) /* ty=Tensor[(5, 11, 8), float64] */;
    %1099 = @func_438(%1098) /* ty=(Tensor[(5, 11, 8), float64], Tensor[(16, 6, 11), float32], Tensor[(1056), float32]) */;
    %1100 = cast(%var_2491, dtype="uint8") /* ty=uint8 */;
    %1101 = reshape(%1100, newshape=[]) /* ty=uint8 */;
    %1102 = @func_1247(%1101) /* ty=(Tensor[(6, 2, 12), float64], Tensor[(10, 1, 16), int32], Tensor[(160), int32]) */;
    %1103 = logical_or(%1093, %1094) /* ty=Tensor[(12, 8, 8), bool] */;
    %1104 = @func_226(%1096) /* ty=Tensor[(16, 6, 11), float32] */;
    %1105 = %1099.2;
    %1106 = %1102.1;
    (%1103, %1104, %var_2500, %1105, %var_2509, %1106)
  };
  %1107(%var_2520, %var_2521, %var_2522, %var_2523) /* ty=(Tensor[(12, 8, 8), bool], Tensor[(16, 6, 11), float32], Tensor[(1056, 1), float32], Tensor[(1056), float32], Tensor[(440), float64], Tensor[(10, 1, 16), int32]) */
}

def @func_10252() -> (Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), float64]) {
  %1108 = @func_9811() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(24), float64]) */;
  %1109 = @func_6496() /* ty=(Tensor[(8, 8, 2), float64], Tensor[(8, 8, 2), bool]) */;
  %1110 = %1108.1;
  %1111 = @func_9275() /* ty=Tensor[(8, 8, 2), bool] */;
  %1112 = %1109.0;
  (%1110, %1111, %1112)
}

def @func_13453(%var_13451: Tensor[(693), bool], %var_13452: Tensor[(768), bool]) -> (Tensor[(8, 8, 2), bool], Tensor[(9, 11, 7), float32], Tensor[(693), bool], Tensor[(768), bool]) {
  @func_13449(%var_13451, %var_13452) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(9, 11, 7), float32], Tensor[(693), bool], Tensor[(768), bool]) */
}

def @func_3742(%var_3739: Tensor[(3, 14, 5), uint64], %var_3740: Tensor[(3, 14, 5), uint64], %var_3741: Tensor[(1350), float32]) -> (Tensor[(3, 14, 5), bool], Tensor[(15, 9, 10), bool], Tensor[(1350), float32]) {
  %1124 = fn (%var_3722: Tensor[(3, 14, 5), uint64], %var_3723: Tensor[(3, 14, 5), uint64], %var_3728: Tensor[(1350), float32]) -> (Tensor[(3, 14, 5), bool], Tensor[(15, 9, 10), bool], Tensor[(1350), float32]) {
    %1113 = cast(%var_3723, dtype="bool") /* ty=Tensor[(3, 14, 5), bool] */;
    %1114 = shape_of(%var_3722, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1115 = cast(%var_3722, dtype="bool") /* ty=Tensor[(3, 14, 5), bool] */;
    %1116 = dyn.reshape(%1113, %1114, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1117 = cast(%var_3728, dtype="float32") /* ty=Tensor[(1350), float32] */;
    %1118 = cast(%var_3728, dtype="float32") /* ty=Tensor[(1350), float32] */;
    %1119 = reshape(%1117, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
    %1120 = reshape(%1118, newshape=[15, 9, 10]) /* ty=Tensor[(15, 9, 10), float32] */;
    %1121 = @func_2603(%1119, %1120) /* ty=(Tensor[(15, 9, 10), bool],) */;
    %1122 = greater(%1115, %1116) /* ty=Tensor[(3, 14, 5), bool] */;
    %1123 = %1121.0;
    (%1122, %1123, %var_3728)
  };
  %1124(%var_3739, %var_3740, %var_3741) /* ty=(Tensor[(3, 14, 5), bool], Tensor[(15, 9, 10), bool], Tensor[(1350), float32]) */
}

def @func_12406() -> (Tensor[(24), float64],) {
  %1127 = fn () -> (Tensor[(24), float64],) {
    %1125 = @func_11244() /* ty=(Tensor[(16, 11, 10), float64], uint8, Tensor[(24), float64], uint8) */;
    %1126 = %1125.2;
    (%1126,)
  };
  %1127() /* ty=(Tensor[(24), float64],) */
}

def @func_13481() -> (uint8, Tensor[(15, 10, 13), float64], Tensor[(1560), uint8], Tensor[(1950), float64]) {
  @func_13479() /* ty=(uint8, Tensor[(15, 10, 13), float64], Tensor[(1560), uint8], Tensor[(1950), float64]) */
}

def @func_13768(%var_13725: Tensor[(2, 9, 2), int32], %var_13735: Tensor[(2, 9, 2), int32], %var_13743: Tensor[(1848), float32], %var_13752: Tensor[(2, 96), float64]) -> (Tensor[(2, 9, 2), int32], Tensor[(2, 9, 2), uint32], Tensor[(1350), float32], Tensor[(1848), float32], Tensor[(3696), float32], Tensor[(2, 96), bool]) {
  %1128 = cast(%var_13725, dtype="int32") /* ty=Tensor[(2, 9, 2), int32] */;
  %1129 = shape_of(meta[relay.Constant][70] /* ty=Tensor[(2, 9, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1130 = cast(meta[relay.Constant][70] /* ty=Tensor[(2, 9, 2), int32] */, dtype="int32") /* ty=Tensor[(2, 9, 2), int32] */;
  %1131 = dyn.reshape(%1128, %1129, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1132 = cast(%var_13735, dtype="uint32") /* ty=Tensor[(2, 9, 2), uint32] */;
  %1133 = shape_of(meta[relay.Constant][70] /* ty=Tensor[(2, 9, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1134 = cast(meta[relay.Constant][70] /* ty=Tensor[(2, 9, 2), int32] */, dtype="uint32") /* ty=Tensor[(2, 9, 2), uint32] */;
  %1135 = dyn.reshape(%1132, %1133, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1136 = cast(meta[relay.Constant][71] /* ty=Tensor[(2, 96), float64] */, dtype="float64") /* ty=Tensor[(2, 96), float64] */;
  %1137 = cast(%var_13743, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %1138 = cast(meta[relay.Constant][72] /* ty=Tensor[(3696), float32] */, dtype="float32") /* ty=Tensor[(3696), float32] */;
  %1139 = reshape(%1136, newshape=[8, 8, 3]) /* ty=Tensor[(8, 8, 3), float64] */;
  %1140 = reshape(%1137, newshape=[1, 1848]) /* ty=Tensor[(1, 1848), float32] */;
  %1141 = reshape(%1138, newshape=[2, 1848]) /* ty=Tensor[(2, 1848), float32] */;
  %1142 = @func_5719(%1139, %1140, %1141) /* ty=(Tensor[(12, 10, 13), uint8], Tensor[(12, 130), uint8], Tensor[(16, 6, 11), float32], Tensor[(440), float64], Tensor[(15, 9, 10), bool], Tensor[(1350), float32], Tensor[(8, 8, 3), int64], Tensor[(2, 1848), float32]) */;
  %1143 = cast(%var_13752, dtype="bool") /* ty=Tensor[(2, 96), bool] */;
  %1144 = shape_of(meta[relay.Constant][71] /* ty=Tensor[(2, 96), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1145 = cast(meta[relay.Constant][71] /* ty=Tensor[(2, 96), float64] */, dtype="bool") /* ty=Tensor[(2, 96), bool] */;
  %1146 = dyn.reshape(%1143, %1144, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1147 = bitwise_and(%1130, %1131) /* ty=Tensor[(2, 9, 2), int32] */;
  %1148 = left_shift(%1134, %1135) /* ty=Tensor[(2, 9, 2), uint32] */;
  %1149 = %1142.5;
  %1150 = less_equal(%1145, %1146) /* ty=Tensor[(2, 96), bool] */;
  (%1147, %1148, %1149, %var_13743, meta[relay.Constant][72] /* ty=Tensor[(3696), float32] */, %1150)
}

def @func_6586(%var_6584: Tensor[(1350), float32], %var_6585: Tensor[(8, 8, 2), bool]) -> (Tensor[(1350), float32], Tensor[(1350), float32], Tensor[(1848), float32], Tensor[(8, 8, 2), bool]) {
  @func_6582(%var_6584, %var_6585) /* ty=(Tensor[(1350), float32], Tensor[(1350), float32], Tensor[(1848), float32], Tensor[(8, 8, 2), bool]) */
}

def @func_15095() -> (Tensor[(2, 7, ?), bool], Tensor[(8, 8, 2), bool]) {
  %1155 = fn () -> (Tensor[(2, 7, ?), bool], Tensor[(8, 8, 2), bool]) {
    %1151 = @func_11796() /* ty=(Tensor[(2, 7, ?), bool],) */;
    %1152 = @func_10370() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %1153 = %1151.0;
    %1154 = %1152.0;
    (%1153, %1154)
  };
  %1155() /* ty=(Tensor[(2, 7, ?), bool], Tensor[(8, 8, 2), bool]) */
}

def @func_12917(%var_12915: Tensor[(1950), float64]) -> (Tensor[(24), float64], uint8, Tensor[(1950), float64], Tensor[(1560), int16], Tensor[(2, 880), bool], Tensor[(2, 880), float32], Tensor[(2, 880), float64]) {
  @func_12914(%var_12915) /* ty=(Tensor[(24), float64], uint8, Tensor[(1950), float64], Tensor[(1560), int16], Tensor[(2, 880), bool], Tensor[(2, 880), float32], Tensor[(2, 880), float64]) */
}

def @func_15543(%var_15541: Tensor[(384, 2), bool], %var_15542: Tensor[(440, 1), float64]) -> (Tensor[(8, 8, 2), bool], Tensor[(440), float64], bool, Tensor[(384, 2), bool], Tensor[(440, 1056), bool], Tensor[(8, 8, 2), bool]) {
  %1173 = fn (%var_15499: Tensor[(384, 2), bool], %var_15501: Tensor[(440, 1), float64]) -> (Tensor[(8, 8, 2), bool], Tensor[(440), float64], bool, Tensor[(384, 2), bool], Tensor[(440, 1056), bool], Tensor[(8, 8, 2), bool]) {
    %1156 = @func_10296() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) */;
    %1157 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %1158 = cast(%var_15499, dtype="bool") /* ty=Tensor[(384, 2), bool] */;
    %1159 = cast(meta[relay.Constant][73] /* ty=Tensor[(1056), float32] */, dtype="float32") /* ty=Tensor[(1056), float32] */;
    %1160 = cast(%var_15501, dtype="float64") /* ty=Tensor[(440, 1), float64] */;
    %1161 = reshape(%1157, newshape=[]) /* ty=bool */;
    %1162 = reshape(%1158, newshape=[12, 8, 8]) /* ty=Tensor[(12, 8, 8), bool] */;
    %1163 = reshape(%1159, newshape=[1056, 1]) /* ty=Tensor[(1056, 1), float32] */;
    %1164 = reshape(%1160, newshape=[440]) /* ty=Tensor[(440), float64] */;
    %1165 = @func_2519(%1161, %1162, %1163, %1164) /* ty=(Tensor[(12, 8, 8), bool], Tensor[(16, 6, 11), float32], Tensor[(1056, 1), float32], Tensor[(1056), float32], Tensor[(440), float64], Tensor[(10, 1, 16), int32]) */;
    %1166 = cast(%var_15501, dtype="bool") /* ty=Tensor[(440, 1), bool] */;
    %1167 = cast(meta[relay.Constant][73] /* ty=Tensor[(1056), float32] */, dtype="bool") /* ty=Tensor[(1056), bool] */;
    %1168 = @func_10252() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), float64]) */;
    %1169 = %1156.0;
    %1170 = %1165.4;
    %1171 = greater_equal(%1166, %1167) /* ty=Tensor[(440, 1056), bool] */;
    %1172 = %1168.1;
    (%1169, %1170, True /* ty=bool */, %var_15499, %1171, %1172)
  };
  %1173(%var_15541, %var_15542) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(440), float64], bool, Tensor[(384, 2), bool], Tensor[(440, 1056), bool], Tensor[(8, 8, 2), bool]) */
}

def @func_11244() -> (Tensor[(16, 11, 10), float64], uint8, Tensor[(24), float64], uint8) {
  %1174 = @func_9986() /* ty=(Tensor[(16, 11, 10), float64],) */;
  %1175 = cast(meta[relay.Constant][74] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %1176 = cast(meta[relay.Constant][75] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1177 = reshape(%1175, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %1178 = reshape(%1176, newshape=[]) /* ty=uint8 */;
  %1179 = @func_8288(%1177, %1178) /* ty=(Tensor[(24), float64], uint8, uint8, Tensor[(8, 8, 2), bool], Tensor[(128), bool], Tensor[(2, 2, 13), float64]) */;
  %1180 = %1174.0;
  %1181 = %1179.2;
  (%1180, %1181, meta[relay.Constant][74] /* ty=Tensor[(24), float64] */, meta[relay.Constant][75] /* ty=uint8 */)
}

def @func_10446(%var_10420: Tensor[(128), bool], %var_10428: Tensor[(1848), float32]) -> (Tensor[(14, 6, 9), float32], Tensor[(1350), float32], Tensor[(128), bool], Tensor[(1848), float32]) {
  %1182 = @func_9038() /* ty=(Tensor[(14, 6, 9), float32],) */;
  %1183 = cast(meta[relay.Constant][76] /* ty=Tensor[(1350), float32] */, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %1184 = cast(%var_10420, dtype="bool") /* ty=Tensor[(128), bool] */;
  %1185 = reshape(%1183, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %1186 = reshape(%1184, newshape=[8, 8, 2]) /* ty=Tensor[(8, 8, 2), bool] */;
  %1187 = @func_6582(%1185, %1186) /* ty=(Tensor[(1350), float32], Tensor[(1350), float32], Tensor[(1848), float32], Tensor[(8, 8, 2), bool]) */;
  %1188 = %1187.2;
  %1189 = cast(%var_10428, dtype="int8") /* ty=Tensor[(1848), int8] */;
  %1190 = shape_of(%1188, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1191 = cast(%1188, dtype="int8") /* ty=Tensor[(1848), int8] */;
  %1192 = dyn.reshape(%1189, %1190, newshape=[]) /* ty=Tensor[(?), int8] */;
  %1193 = subtract(%1191, %1192) /* ty=Tensor[(1848), int8] */;
  %1194 = cast(%1193, dtype="float32") /* ty=Tensor[(1848), float32] */;
  %1195 = %1182.0;
  %1196 = sin(%1194) /* ty=Tensor[(1848), float32] */;
  (%1195, meta[relay.Constant][76] /* ty=Tensor[(1350), float32] */, %var_10420, %1196)
}

def @func_14669() -> (Tensor[(24), float64], Tensor[(24), float64]) {
  %1200 = fn () -> (Tensor[(24), float64], Tensor[(24), float64]) {
    %1197 = @func_13053() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float64], Tensor[(14, 6, 9), float32]) */;
    %1198 = %1197.0;
    %1199 = @func_13064() /* ty=Tensor[(24), float64] */;
    (%1198, %1199)
  };
  %1200() /* ty=(Tensor[(24), float64], Tensor[(24), float64]) */
}

def @func_12065() -> Tensor[(8, 8, 2), bool] {
  %1201 = @func_10252() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), float64]) */;
  %1201.1
}

def @func_10558(%var_10547: Tensor[(2, 2, 13), float32]) -> Tensor[(2, 2, 13), float32] {
  %1202 = @func_7821() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %1203 = %1202.0;
  %1204 = cast(%var_10547, dtype="float32") /* ty=Tensor[(2, 2, 13), float32] */;
  %1205 = shape_of(%1203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1206 = cast(%1203, dtype="float32") /* ty=Tensor[(2, 2, 13), float32] */;
  %1207 = dyn.reshape(%1204, %1205, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%1206, %1207) /* ty=Tensor[(2, 2, 13), float32] */
}

def @func_12656(%var_12602: Tensor[(1056), float32]) -> (Tensor[(10, 1, 16), int32], bool, Tensor[(768), bool], Tensor[(1056), float32], Tensor[(110, 4), float64], Tensor[(15, 10, 13), float64], Tensor[(1950), float64], Tensor[(1560), uint8], Tensor[(28), uint16], Tensor[(2, 2, 13), int64], Tensor[(2, 2, 13), uint8]) {
  %1208 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %1209 = cast(meta[relay.Constant][77] /* ty=Tensor[(768), bool] */, dtype="bool") /* ty=Tensor[(768), bool] */;
  %1210 = cast(%var_12602, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %1211 = cast(meta[relay.Constant][78] /* ty=Tensor[(110, 4), float64] */, dtype="float64") /* ty=Tensor[(110, 4), float64] */;
  %1212 = reshape(%1208, newshape=[]) /* ty=bool */;
  %1213 = reshape(%1209, newshape=[12, 8, 8]) /* ty=Tensor[(12, 8, 8), bool] */;
  %1214 = reshape(%1210, newshape=[1056, 1]) /* ty=Tensor[(1056, 1), float32] */;
  %1215 = reshape(%1211, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %1216 = @func_2519(%1212, %1213, %1214, %1215) /* ty=(Tensor[(12, 8, 8), bool], Tensor[(16, 6, 11), float32], Tensor[(1056, 1), float32], Tensor[(1056), float32], Tensor[(440), float64], Tensor[(10, 1, 16), int32]) */;
  %1217 = cast(meta[relay.Constant][79] /* ty=Tensor[(1950), float64] */, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %1218 = cast(meta[relay.Constant][79] /* ty=Tensor[(1950), float64] */, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %1219 = reshape(%1217, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %1220 = reshape(%1218, newshape=[15, 10, 13]) /* ty=Tensor[(15, 10, 13), float64] */;
  %1221 = @func_1854(%1219, %1220) /* ty=(Tensor[(15, 10, 13), float64],) */;
  %1222 = cast(False /* ty=bool */, dtype="uint16") /* ty=uint16 */;
  %1223 = cast(meta[relay.Constant][80] /* ty=Tensor[(28), uint16] */, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %1224 = reshape(%1222, newshape=[]) /* ty=uint16 */;
  %1225 = reshape(%1223, newshape=[28]) /* ty=Tensor[(28), uint16] */;
  %1226 = @func_9069(%1224, %1225) /* ty=(Tensor[(14, 6, 9), float32], Tensor[(1560), uint8], uint16, Tensor[(28), uint16]) */;
  %1227 = @func_9997() /* ty=(Tensor[(2, 2, 13), float32],) */;
  %1228 = %1227.0;
  %1229 = cast(%1228, dtype="float32") /* ty=Tensor[(2, 2, 13), float32] */;
  %1230 = sqrt(%1229) /* ty=Tensor[(2, 2, 13), float32] */;
  %1231 = cast(meta[relay.Constant][81] /* ty=Tensor[(2, 2, 13), float32] */, dtype="int64") /* ty=Tensor[(2, 2, 13), int64] */;
  %1232 = shape_of(%1230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1233 = cast(%1230, dtype="int64") /* ty=Tensor[(2, 2, 13), int64] */;
  %1234 = dyn.reshape(%1231, %1232, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1235 = cast(meta[relay.Constant][81] /* ty=Tensor[(2, 2, 13), float32] */, dtype="uint8") /* ty=Tensor[(2, 2, 13), uint8] */;
  %1236 = shape_of(%1230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1237 = cast(%1230, dtype="uint8") /* ty=Tensor[(2, 2, 13), uint8] */;
  %1238 = dyn.reshape(%1235, %1236, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1239 = %1216.5;
  %1240 = %1221.0;
  %1241 = %1226.1;
  %1242 = minimum(%1233, %1234) /* ty=Tensor[(2, 2, 13), int64] */;
  %1243 = multiply(%1237, %1238) /* ty=Tensor[(2, 2, 13), uint8] */;
  (%1239, False /* ty=bool */, meta[relay.Constant][77] /* ty=Tensor[(768), bool] */, %var_12602, meta[relay.Constant][78] /* ty=Tensor[(110, 4), float64] */, %1240, meta[relay.Constant][79] /* ty=Tensor[(1950), float64] */, %1241, meta[relay.Constant][80] /* ty=Tensor[(28), uint16] */, %1242, %1243)
}

def @func_9184() -> (Tensor[(2, 2, 13), float32], Tensor[(2, 880), uint16]) {
  @func_9182() /* ty=(Tensor[(2, 2, 13), float32], Tensor[(2, 880), uint16]) */
}

def @func_5994(%var_5945: Tensor[(3, 1, 13), float64], %var_5954: Tensor[(1350), float32], %var_5985: Tensor[(1056), float32], %var_5991: Tensor[(768), bool]) -> (Tensor[(3, 2, 13), float64], Tensor[(3, 14, 5), bool], Tensor[(210), uint64], Tensor[(1350), float32], Tensor[(12, 10, 13), uint8], Tensor[(2, 780), uint8], Tensor[(16, 6, 11), float32], Tensor[(1056), float32], bool, Tensor[(1, 693), bool], Tensor[(768), bool]) {
  %1244 = cast(%var_5945, dtype="float64") /* ty=Tensor[(3, 1, 13), float64] */;
  %1245 = cast(meta[relay.Constant][82] /* ty=Tensor[(3, 2, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 13), float64] */;
  %1246 = cast(meta[relay.Constant][83] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %1247 = cast(meta[relay.Constant][83] /* ty=Tensor[(210), uint64] */, dtype="uint64") /* ty=Tensor[(210), uint64] */;
  %1248 = cast(%var_5954, dtype="float32") /* ty=Tensor[(1350), float32] */;
  %1249 = reshape(%1246, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint64] */;
  %1250 = reshape(%1247, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint64] */;
  %1251 = reshape(%1248, newshape=[1350]) /* ty=Tensor[(1350), float32] */;
  %1252 = @func_3738(%1249, %1250, %1251) /* ty=(Tensor[(3, 14, 5), bool], Tensor[(15, 9, 10), bool], Tensor[(1350), float32]) */;
  %1253 = cast(meta[relay.Constant][84] /* ty=Tensor[(2, 780), uint8] */, dtype="uint8") /* ty=Tensor[(2, 780), uint8] */;
  %1254 = cast(meta[relay.Constant][84] /* ty=Tensor[(2, 780), uint8] */, dtype="uint8") /* ty=Tensor[(2, 780), uint8] */;
  %1255 = reshape(%1253, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %1256 = reshape(%1254, newshape=[12, 10, 13]) /* ty=Tensor[(12, 10, 13), uint8] */;
  %1257 = @func_3334(%1255, %1256) /* ty=(Tensor[(12, 10, 13), uint8],) */;
  %1258 = cast(%var_5985, dtype="float32") /* ty=Tensor[(1056), float32] */;
  %1259 = reshape(%1258, newshape=[16, 6, 11]) /* ty=Tensor[(16, 6, 11), float32] */;
  %1260 = cast(meta[relay.Constant][85] /* ty=Tensor[(1, 693), bool] */, dtype="bool") /* ty=Tensor[(1, 693), bool] */;
  %1261 = cast(meta[relay.Constant][85] /* ty=Tensor[(1, 693), bool] */, dtype="bool") /* ty=Tensor[(1, 693), bool] */;
  %1262 = cast(%var_5991, dtype="bool") /* ty=Tensor[(768), bool] */;
  %1263 = reshape(%1260, newshape=[9, 11, 7]) /* ty=Tensor[(9, 11, 7), bool] */;
  %1264 = reshape(%1261, newshape=[9, 11, 7]) /* ty=Tensor[(9, 11, 7), bool] */;
  %1265 = reshape(%1262, newshape=[2, 384]) /* ty=Tensor[(2, 384), bool] */;
  %1266 = @func_3586(%1263, %1264, %1265) /* ty=(Tensor[(440), float64], bool, Tensor[(2, 384), bool], Tensor[(1056), float32], Tensor[(9, 11, 7), float32]) */;
  %1267 = floor_mod(%1244, %1245) /* ty=Tensor[(3, 2, 13), float64] */;
  %1268 = %1252.0;
  %1269 = %1257.0;
  %1270 = @func_226(%1259) /* ty=Tensor[(16, 6, 11), float32] */;
  %1271 = %1266.1;
  (%1267, %1268, meta[relay.Constant][83] /* ty=Tensor[(210), uint64] */, %var_5954, %1269, meta[relay.Constant][84] /* ty=Tensor[(2, 780), uint8] */, %1270, %var_5985, %1271, meta[relay.Constant][85] /* ty=Tensor[(1, 693), bool] */, %var_5991)
}

def @func_10058(%var_10055: bool, %var_10056: Tensor[(768), bool], %var_10057: Tensor[(1056), float32]) -> (Tensor[(8, 8, 2), bool], Tensor[(768), bool], bool, Tensor[(768), bool], Tensor[(1056), float32]) {
  @func_10053(%var_10055, %var_10056, %var_10057) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(768), bool], bool, Tensor[(768), bool], Tensor[(1056), float32]) */
}

def @func_3026(%var_3004: bool, %var_3005: Tensor[(768), bool], %var_3006: Tensor[(1056, 1), float32]) -> (Tensor[(16, 12, 13), float32], Tensor[(10, 1, 16), int32], bool, Tensor[(768), bool], Tensor[(1056, 1), float32], Tensor[(440), float64]) {
  %1272 = cast(meta[relay.Constant][86] /* ty=Tensor[(16, 12, 13), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 13), float32] */;
  %1273 = cast(%var_3004, dtype="bool") /* ty=bool */;
  %1274 = cast(%var_3005, dtype="bool") /* ty=Tensor[(768), bool] */;
  %1275 = cast(%var_3006, dtype="float32") /* ty=Tensor[(1056, 1), float32] */;
  %1276 = cast(meta[relay.Constant][87] /* ty=Tensor[(440), float64] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %1277 = reshape(%1273, newshape=[]) /* ty=bool */;
  %1278 = reshape(%1274, newshape=[12, 8, 8]) /* ty=Tensor[(12, 8, 8), bool] */;
  %1279 = reshape(%1275, newshape=[1056, 1]) /* ty=Tensor[(1056, 1), float32] */;
  %1280 = reshape(%1276, newshape=[440]) /* ty=Tensor[(440), float64] */;
  %1281 = @func_2519(%1277, %1278, %1279, %1280) /* ty=(Tensor[(12, 8, 8), bool], Tensor[(16, 6, 11), float32], Tensor[(1056, 1), float32], Tensor[(1056), float32], Tensor[(440), float64], Tensor[(10, 1, 16), int32]) */;
  %1282 = log2(%1272) /* ty=Tensor[(16, 12, 13), float32] */;
  %1283 = %1281.5;
  (%1282, %1283, %var_3004, %var_3005, %var_3006, meta[relay.Constant][87] /* ty=Tensor[(440), float64] */)
}

def @func_7689() -> Tensor[(8, 8, 2), bool] {
  @func_7687() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_9601(%var_9598: Tensor[(6, 16, 12), uint64], %var_9599: Tensor[(256), uint16], %var_9600: Tensor[(675, 2), float32]) -> (Tensor[(6, 16, 12), bool], Tensor[(12, 10, 13), uint8], Tensor[(256), uint16], Tensor[(8, 8, 2), bool], Tensor[(210), uint64], Tensor[(675, 2), float32], Tensor[(24), float64]) {
  @func_9596(%var_9598, %var_9599, %var_9600) /* ty=(Tensor[(6, 16, 12), bool], Tensor[(12, 10, 13), uint8], Tensor[(256), uint16], Tensor[(8, 8, 2), bool], Tensor[(210), uint64], Tensor[(675, 2), float32], Tensor[(24), float64]) */
}

def @func_7520() -> Tensor[(8, 8, 2), bool] {
  %1285 = fn () -> Tensor[(8, 8, 2), bool] {
    %1284 = @func_6533() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(2, 3, 4), float64], Tensor[(24), float64]) */;
    %1284.0
  };
  %1285() /* ty=Tensor[(8, 8, 2), bool] */
}

def @func_14469() -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) {
  %1290 = fn () -> (Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) {
    %1286 = @func_7196() /* ty=(Tensor[(8, 8, 2), bool],) */;
    %1287 = @func_7687() /* ty=Tensor[(8, 8, 2), bool] */;
    %1288 = %1286.0;
    %1289 = @func_9929() /* ty=Tensor[(2, 2, 13), float32] */;
    (%1287, %1288, %1289)
  };
  %1290() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(2, 2, 13), float32]) */
}

def @func_10134(%var_10132: Tensor[(5, 1, 13), int8], %var_10133: Tensor[(5, 4, 13), int8]) -> (Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8], Tensor[(5, 4, 13), float64], Tensor[(5, 4, 13), int64]) {
  @func_10130(%var_10132, %var_10133) /* ty=(Tensor[(12, 10, 13), uint8], Tensor[(1560), uint8], Tensor[(5, 4, 13), float64], Tensor[(5, 4, 13), int64]) */
}

def @func_8472(%var_8468: Tensor[(10, 9, 4), float32]) -> (Tensor[(10, 9, 4), float32],) {
  %1291 = cast(%var_8468, dtype="float32") /* ty=Tensor[(10, 9, 4), float32] */;
  %1292 = log(%1291) /* ty=Tensor[(10, 9, 4), float32] */;
  (%1292,)
}

def @func_14239() -> Tensor[(24), float64] {
  @func_13064() /* ty=Tensor[(24), float64] */
}

def @func_7949() -> Tensor[(14, 6, 9), float32] {
  %1294 = fn () -> Tensor[(14, 6, 9), float32] {
    %1293 = @func_7653() /* ty=(Tensor[(14, 6, 9), float32],) */;
    %1293.0
  };
  %1294() /* ty=Tensor[(14, 6, 9), float32] */
}

def @func_12475(%var_12473: Tensor[(6, 260), uint8]) -> (Tensor[(8, 8, 2), bool], Tensor[(24), float64], Tensor[(12, 10, 13), uint8], Tensor[(90), float32], Tensor[(6, 260), uint8]) {
  @func_12472(%var_12473) /* ty=(Tensor[(8, 8, 2), bool], Tensor[(24), float64], Tensor[(12, 10, 13), uint8], Tensor[(90), float32], Tensor[(6, 260), uint8]) */
}

def @func_12248() -> (Tensor[(8, 8, 2), bool],) {
  @func_12246() /* ty=(Tensor[(8, 8, 2), bool],) */
}

def @func_7653() -> (Tensor[(14, 6, 9), float32],) {
  %1295 = @func_7273() /* ty=(Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), bool], Tensor[(14, 6, 9), float32], Tensor[(756), float32], Tensor[(14, 6, 9), float32], Tensor[(1056), float32], Tensor[(440), float64]) */;
  %1296 = %1295.2;
  (%1296,)
}

def @func_10254() -> (Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), float64]) {
  @func_10252() /* ty=(Tensor[(24), float64], Tensor[(8, 8, 2), bool], Tensor[(8, 8, 2), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen783/build/output.py", line 3682, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [14:11:59] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

