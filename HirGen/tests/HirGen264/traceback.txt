==========mod==========
#[version = "0.0.5"]
def @func_1936() -> Tensor[(5, 12, 16), float64] {
  @func_1693() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_6291() -> (Tensor[(5, 12, 16), float64],) {
  %0 = @func_3497() /* ty=Tensor[(5, 12, 16), float64] */;
  (%0,)
}

def @func_7506() -> Tensor[(5, 12, 16), int64] {
  %1 = @func_6761() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %2 = %1.0;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 12, 16), float64] */, dtype="int64") /* ty=Tensor[(5, 12, 16), int64] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%2, dtype="int64") /* ty=Tensor[(5, 12, 16), int64] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  right_shift(%5, %6) /* ty=Tensor[(5, 12, 16), int64] */
}

def @func_5378(%var_5372: Tensor[(3, 10, 1), int32], %var_5373: Tensor[(3, 10, 15), int32]) -> (Tensor[(3, 10, 15), bool],) {
  %7 = cast(%var_5372, dtype="bool") /* ty=Tensor[(3, 10, 1), bool] */;
  %8 = cast(%var_5373, dtype="bool") /* ty=Tensor[(3, 10, 15), bool] */;
  %9 = less(%7, %8) /* ty=Tensor[(3, 10, 15), bool] */;
  (%9,)
}

def @func_4639() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %10 = @func_4249() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %11 = %10.0;
  %12 = cast(%11, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %13 = exp(%12) /* ty=Tensor[(5, 12, 16), float64] */;
  %14 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  (%13, %14)
}

def @func_866(%var_825: Tensor[(12, 12, 12), int64], %var_826: Tensor[(12, 12, 12), int64]) -> (Tensor[(12, 12, 12), int64], Tensor[(12, 12, 12), float32], Tensor[(4, 11, 7), bool], Tensor[(308), float32], Tensor[(12, 12, 12), float64]) {
  %15 = cast(%var_826, dtype="int64") /* ty=Tensor[(12, 12, 12), int64] */;
  %16 = shape_of(%var_825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%var_825, dtype="int64") /* ty=Tensor[(12, 12, 12), int64] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %19 = cast(%var_825, dtype="float32") /* ty=Tensor[(12, 12, 12), float32] */;
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %21 = reshape(%20, newshape=[4, 11, 7]) /* ty=Tensor[(4, 11, 7), float32] */;
  %22 = @func_26(%21) /* ty=(Tensor[(4, 11, 7), bool],) */;
  %23 = cast(%var_826, dtype="float64") /* ty=Tensor[(12, 12, 12), float64] */;
  %24 = maximum(%17, %18) /* ty=Tensor[(12, 12, 12), int64] */;
  %25 = cosh(%19) /* ty=Tensor[(12, 12, 12), float32] */;
  %26 = %22.0;
  %27 = sigmoid(%23) /* ty=Tensor[(12, 12, 12), float64] */;
  (%24, %25, %26, meta[relay.Constant][1] /* ty=Tensor[(308), float32] */, %27)
}

def @func_7706(%var_7699: Tensor[(5, 9, 7), float32]) -> (Tensor[(5, 9, 7), float32],) {
  %28 = cast(%var_7699, dtype="float32") /* ty=Tensor[(5, 9, 7), float32] */;
  %29 = tan(%28) /* ty=Tensor[(5, 9, 7), float32] */;
  (%29,)
}

def @func_3017(%var_3010: Tensor[(5, 12, 16), float32]) -> Tensor[(5, 12, 16), int64] {
  %30 = @func_2714() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %31 = %30.0;
  %32 = cast(%31, dtype="float32") /* ty=Tensor[(5, 12, 16), float32] */;
  %33 = tan(%32) /* ty=Tensor[(5, 12, 16), float32] */;
  %34 = cast(%var_3010, dtype="int64") /* ty=Tensor[(5, 12, 16), int64] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%33, dtype="int64") /* ty=Tensor[(5, 12, 16), int64] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  left_shift(%36, %37) /* ty=Tensor[(5, 12, 16), int64] */
}

def @func_6278(%var_6270: Tensor[(960), float64]) -> (Tensor[(78), float32], Tensor[(5, 12, 16), bool], Tensor[(960), float64], Tensor[(5, 12, 16), float64]) {
  %38 = @func_2144() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(3, 2, 13), float32], Tensor[(78), float32]) */;
  %39 = cast(%var_6270, dtype="float64") /* ty=Tensor[(960), float64] */;
  %40 = reshape(%39, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %41 = @func_2402(%40) /* ty=(Tensor[(5, 12, 16), bool],) */;
  %42 = %38.5;
  %43 = %41.0;
  %44 = @func_3030() /* ty=Tensor[(5, 12, 16), float64] */;
  (%42, %43, %var_6270, %44)
}

def @func_6666() -> Tensor[(5, 12, 16), float64] {
  %45 = @func_5727() /* ty=(Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %45.3
}

def @func_8194(%var_8189: Tensor[(13, 12, 6), float32]) -> Tensor[(13, 12, 6), float32] {
  %46 = cast(%var_8189, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
  atanh(%46) /* ty=Tensor[(13, 12, 6), float32] */
}

def @func_5506() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %47 = @func_4249() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %48 = @func_3640() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %49 = %47.0;
  %50 = @func_5439() /* ty=Tensor[(5, 12, 16), float64] */;
  %51 = %48.0;
  (%49, %50, %51)
}

def @func_2685(%var_2654: Tensor[(4, 9, 10), float64]) -> (Tensor[(4, 9, 10), float64],) {
  %52 = cast(%var_2654, dtype="float64") /* ty=Tensor[(4, 9, 10), float64] */;
  %53 = cosh(%52) /* ty=Tensor[(4, 9, 10), float64] */;
  %54 = cast(%var_2654, dtype="float64") /* ty=Tensor[(4, 9, 10), float64] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="float64") /* ty=Tensor[(4, 9, 10), float64] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %58 = minimum(%56, %57) /* ty=Tensor[(4, 9, 10), float64] */;
  %59 = cast(%58, dtype="float64") /* ty=Tensor[(4, 9, 10), float64] */;
  %60 = log(%59) /* ty=Tensor[(4, 9, 10), float64] */;
  (%60,)
}

def @func_7089() -> Tensor[(5, 12, 16), float32] {
  %61 = @func_5727() /* ty=(Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %61.0
}

def @func_9143() -> (Tensor[(5, 12, 16), int64],) {
  %62 = @func_6994() /* ty=Tensor[(5, 12, 16), int64] */;
  (%62,)
}

def @func_7390() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %63 = @func_4831() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %64 = @func_3715() /* ty=Tensor[(5, 12, 16), float64] */;
  %65 = %63.0;
  (%64, %65)
}

def @func_1522(%var_1429: Tensor[(5, 16, 6), uint16], %var_1513: Tensor[(5, 16, 6), float64]) -> (Tensor[(5, 16, 6), float32], Tensor[(12, 12, 12), float64], Tensor[(1728), int64], Tensor[(7, 10, 11), float64], Tensor[(154, 2), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64]) {
  %66 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 16, 6), uint16] */, dtype="uint16") /* ty=Tensor[(5, 16, 6), uint16] */;
  %67 = shape_of(%var_1429, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%var_1429, dtype="uint16") /* ty=Tensor[(5, 16, 6), uint16] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %70 = multiply(%68, %69) /* ty=Tensor[(5, 16, 6), uint16] */;
  %71 = cast(%70, dtype="float32") /* ty=Tensor[(5, 16, 6), float32] */;
  %72 = cast(meta[relay.Constant][3] /* ty=Tensor[(1728), int64] */, dtype="int64") /* ty=Tensor[(1728), int64] */;
  %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(1728), int64] */, dtype="int64") /* ty=Tensor[(1728), int64] */;
  %74 = reshape(%72, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), int64] */;
  %75 = reshape(%73, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), int64] */;
  %76 = @func_866(%74, %75) /* ty=(Tensor[(12, 12, 12), int64], Tensor[(12, 12, 12), float32], Tensor[(4, 11, 7), bool], Tensor[(308), float32], Tensor[(12, 12, 12), float64]) */;
  %77 = cast(meta[relay.Constant][4] /* ty=Tensor[(154, 2), float32] */, dtype="float32") /* ty=Tensor[(154, 2), float32] */;
  %78 = reshape(%77, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %79 = @func_644(%78) /* ty=(Tensor[(7, 10, 11), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) */;
  %80 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 16, 6), uint16] */, dtype="float64") /* ty=Tensor[(5, 16, 6), float64] */;
  %81 = cast(%var_1429, dtype="float64") /* ty=Tensor[(5, 16, 6), float64] */;
  %82 = sigmoid(%81) /* ty=Tensor[(5, 16, 6), float64] */;
  %83 = cast(%70, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %87 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 16, 6), uint16] */, dtype="uint32") /* ty=Tensor[(5, 16, 6), uint32] */;
  %88 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%82, dtype="uint32") /* ty=Tensor[(5, 16, 6), uint32] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %91 = subtract(%89, %90) /* ty=Tensor[(5, 16, 6), uint32] */;
  %92 = cast(%91, dtype="float64") /* ty=Tensor[(5, 16, 6), float64] */;
  %93 = cos(%92) /* ty=Tensor[(5, 16, 6), float64] */;
  %94 = cast(%var_1513, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
  %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%93, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %98 = rsqrt(%71) /* ty=Tensor[(5, 16, 6), float32] */;
  %99 = %76.4;
  %100 = %79.0;
  %101 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  %102 = log(%80) /* ty=Tensor[(5, 16, 6), float64] */;
  %103 = less_equal(%85, %86) /* ty=Tensor[(5, 16, 6), bool] */;
  %104 = @func_1385() /* ty=Tensor[(5, 12, 16), float64] */;
  %105 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  %106 = logical_or(%96, %97) /* ty=Tensor[(5, 16, 6), bool] */;
  %107 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  (%98, %99, meta[relay.Constant][3] /* ty=Tensor[(1728), int64] */, %100, meta[relay.Constant][4] /* ty=Tensor[(154, 2), float32] */, %101, %102, %103, %104, %105, %106, %107)
}

def @func_7199() -> Tensor[(5, 12, 16), float64] {
  %108 = @func_5506() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %108.1
}

def @func_8877() -> (Tensor[(5, 12, 16), float64],) {
  %109 = @func_1427() /* ty=Tensor[(5, 12, 16), float64] */;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %111 = sinh(%110) /* ty=Tensor[(5, 12, 16), float64] */;
  (%111,)
}

def @func_2046(%var_2029: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), bool], Tensor[(3, 2, 13), bool], Tensor[(78), float32]) {
  %112 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
  %113 = cast(%var_2029, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%112, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %117 = cast(meta[relay.Constant][5] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %118 = reshape(%117, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
  %119 = @func_907(%118) /* ty=(Tensor[(3, 2, 13), bool], Tensor[(3, 2, 13), float32]) */;
  %120 = logical_and(%115, %116) /* ty=Tensor[(5, 12, 16), bool] */;
  %121 = %119.0;
  (%120, %121, meta[relay.Constant][5] /* ty=Tensor[(78), float32] */)
}

def @func_5206(%var_5189: Tensor[(1274), float64]) -> (Tensor[(5, 12, 16), bool], Tensor[(1274), uint32], Tensor[(1274), float64]) {
  %122 = @func_4934() /* ty=(Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), bool], Tensor[(5, 12, 16), float64]) */;
  %123 = cast(%var_5189, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %124 = reshape(%123, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %125 = @func_4192(%124) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(7, 14, 13), float64], Tensor[(1274), uint32], Tensor[(5, 12, 16), float64], Tensor[(1274), float32]) */;
  %126 = %122.2;
  %127 = %125.3;
  (%126, %127, %var_5189)
}

def @func_4553(%var_4471: Tensor[(104), float64], %var_4507: Tensor[(65), float32], %var_4508: Tensor[(325), float32], %var_4513: Tensor[(5, 12, 16), float64]) -> (Tensor[(13, 4, 2), float64], Tensor[(104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(5, 12, 16), int32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(8, 60), float64], Tensor[(8, 60), float32]) {
  %128 = cast(%var_4471, dtype="float64") /* ty=Tensor[(104), float64] */;
  %129 = reshape(%128, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), float64] */;
  %130 = @func_926(%129) /* ty=(Tensor[(13, 4, 2), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) */;
  %131 = @func_2371() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float32]) */;
  %132 = %131.0;
  %133 = cast(%var_4513, dtype="int32") /* ty=Tensor[(5, 12, 16), int32] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%132, dtype="int32") /* ty=Tensor[(5, 12, 16), int32] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %137 = @func_4249() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %138 = cast(%var_4507, dtype="float32") /* ty=Tensor[(65), float32] */;
  %139 = cast(%var_4508, dtype="float32") /* ty=Tensor[(325), float32] */;
  %140 = cast(%132, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %141 = reshape(%138, newshape=[1, 5, 13]) /* ty=Tensor[(1, 5, 13), float32] */;
  %142 = reshape(%139, newshape=[5, 5, 13]) /* ty=Tensor[(5, 5, 13), float32] */;
  %143 = reshape(%140, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %144 = @func_3211(%141, %142, %143) /* ty=(Tensor[(5, 5, 13), float32], Tensor[(8, 60), uint16], Tensor[(5, 12, 16), int32]) */;
  %145 = %144.1;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %147 = cos(%146) /* ty=Tensor[(8, 60), float32] */;
  %148 = cast(%147, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %149 = cosh(%148) /* ty=Tensor[(8, 60), float32] */;
  %150 = cast(%147, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(2), int32] */;
  %152 = cast(%149, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %154 = cast(%147, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %155 = %130.0;
  %156 = bitwise_or(%135, %136) /* ty=Tensor[(5, 12, 16), int32] */;
  %157 = %137.0;
  %158 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
  %159 = floor_mod(%152, %153) /* ty=Tensor[(8, 60), float64] */;
  %160 = exp(%154) /* ty=Tensor[(8, 60), float32] */;
  (%155, %var_4471, %var_4507, %var_4508, %156, %157, %158, %159, %160)
}

def @func_7124() -> (Tensor[(5, 12, 16), float64], Tensor[(1728), int64]) {
  %161 = @func_2714() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %162 = @func_4584() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(1728), int64]) */;
  %163 = %161.0;
  %164 = %162.1;
  (%163, %164)
}

def @func_5889() -> (Tensor[(5, 12, 16), int64],) {
  %165 = @func_3990() /* ty=(Tensor[(5, 12, 16), int64], Tensor[(5, 12, 16), float64]) */;
  %166 = %165.0;
  (%166,)
}

def @func_6767() -> Tensor[(1728), int64] {
  %167 = @func_3175() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */;
  %167.2
}

def @func_7074() -> Tensor[(308), float32] {
  %168 = @func_3175() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */;
  %168.1
}

def @func_1385() -> Tensor[(5, 12, 16), float64] {
  %169 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 12, 16), float64] */, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  log(%169) /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_8495() -> (Tensor[(5, 12, 16), float64],) {
  %170 = @func_5128() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %171 = %170.0;
  (%171,)
}

def @func_8740(%var_8728: Tensor[(12, 8, 7), float64], %var_8735: uint16, %var_8737: Tensor[(960), float64]) -> (Tensor[(12, 8, 7), float64], Tensor[(5, 12, 16), float64], uint16, Tensor[(600), uint16], Tensor[(960), float64]) {
  %172 = cast(%var_8728, dtype="float64") /* ty=Tensor[(12, 8, 7), float64] */;
  %173 = cast(%var_8735, dtype="uint16") /* ty=uint16 */;
  %174 = cast(meta[relay.Constant][7] /* ty=Tensor[(600), uint16] */, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %175 = cast(%var_8737, dtype="float64") /* ty=Tensor[(960), float64] */;
  %176 = reshape(%173, newshape=[]) /* ty=uint16 */;
  %177 = reshape(%174, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), uint16] */;
  %178 = reshape(%175, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %179 = @func_3338(%176, %177, %178) /* ty=(Tensor[(15, 10, 4), uint16], Tensor[(5, 12, 16), float64], Tensor[(960), float64]) */;
  %180 = cos(%172) /* ty=Tensor[(12, 8, 7), float64] */;
  %181 = %179.1;
  (%180, %181, %var_8735, meta[relay.Constant][7] /* ty=Tensor[(600), uint16] */, %var_8737)
}

def @func_8677() -> (Tensor[(5, 12, 16), float64],) {
  %182 = @func_6666() /* ty=Tensor[(5, 12, 16), float64] */;
  (%182,)
}

def @func_5081(%var_5007: Tensor[(12, 12, 5), float64]) -> (Tensor[(12, 12, 5), uint16], Tensor[(5, 12, 16), float64], Tensor[(12, 12, 5), bool]) {
  %183 = cast(%var_5007, dtype="float64") /* ty=Tensor[(12, 12, 5), float64] */;
  %184 = log(%183) /* ty=Tensor[(12, 12, 5), float64] */;
  %185 = cast(%var_5007, dtype="uint16") /* ty=Tensor[(12, 12, 5), uint16] */;
  %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%184, dtype="uint16") /* ty=Tensor[(12, 12, 5), uint16] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %189 = cast(%184, dtype="float32") /* ty=Tensor[(12, 12, 5), float32] */;
  %190 = cosh(%189) /* ty=Tensor[(12, 12, 5), float32] */;
  %191 = cast(%190, dtype="bool") /* ty=Tensor[(12, 12, 5), bool] */;
  %192 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%184, dtype="bool") /* ty=Tensor[(12, 12, 5), bool] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %195 = not_equal(%193, %194) /* ty=Tensor[(12, 12, 5), bool] */;
  %196 = cast(%184, dtype="bool") /* ty=Tensor[(12, 12, 5), bool] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="bool") /* ty=Tensor[(12, 12, 5), bool] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %200 = left_shift(%187, %188) /* ty=Tensor[(12, 12, 5), uint16] */;
  %201 = @func_4948() /* ty=Tensor[(5, 12, 16), float64] */;
  %202 = less(%198, %199) /* ty=Tensor[(12, 12, 5), bool] */;
  (%200, %201, %202)
}

def @func_3856(%var_3840: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), bool],) {
  %203 = @func_3676() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(78), float32]) */;
  %204 = %203.0;
  %205 = cast(%var_3840, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %209 = logical_or(%207, %208) /* ty=Tensor[(5, 12, 16), bool] */;
  (%209,)
}

def @func_3497() -> Tensor[(5, 12, 16), float64] {
  %210 = @func_3465() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %210.1
}

def @func_8926() -> Tensor[(5, 12, 16), int64] {
  @func_6994() /* ty=Tensor[(5, 12, 16), int64] */
}

def @func_2086() -> Tensor[(5, 12, 16), float64] {
  @func_1936() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_5620() -> (Tensor[(5, 12, 16), float64],) {
  %211 = @func_3497() /* ty=Tensor[(5, 12, 16), float64] */;
  (%211,)
}

def @func_3030() -> Tensor[(5, 12, 16), float64] {
  @func_1845() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_3316(%var_3309: Tensor[(270), float64]) -> (Tensor[(5, 6, 1), float64], Tensor[(35, 6), float32], Tensor[(270), float64]) {
  %212 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 6, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 6, 1), float64] */;
  %213 = cast(%var_3309, dtype="float64") /* ty=Tensor[(270), float64] */;
  %214 = reshape(%213, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), float64] */;
  %215 = @func_2242(%214) /* ty=(Tensor[(6, 5, 9), float64], Tensor[(6, 5, 9), float64], Tensor[(10, 7, 3), float32], Tensor[(35, 6), float32]) */;
  %216 = asinh(%212) /* ty=Tensor[(5, 6, 1), float64] */;
  %217 = %215.3;
  (%216, %217, %var_3309)
}

def @func_2144() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(3, 2, 13), float32], Tensor[(78), float32]) {
  %218 = @func_1622() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %219 = @func_1622() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %220 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %222 = cast(meta[relay.Constant][9] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %223 = reshape(%222, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
  %224 = @func_907(%223) /* ty=(Tensor[(3, 2, 13), bool], Tensor[(3, 2, 13), float32]) */;
  %225 = %218.0;
  %226 = %219.0;
  %227 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  %228 = cosh(%221) /* ty=Tensor[(5, 12, 16), float64] */;
  %229 = %224.1;
  (%225, %226, %227, %228, %229, meta[relay.Constant][9] /* ty=Tensor[(78), float32] */)
}

def @func_2545() -> Tensor[(5, 12, 16), float64] {
  @func_2086() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_8526(%var_8512: Tensor[(5, 12, 16), int64]) -> (Tensor[(5, 12, 16), float64],) {
  %230 = @func_7506() /* ty=Tensor[(5, 12, 16), int64] */;
  %231 = cast(%var_8512, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%230, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %235 = subtract(%233, %234) /* ty=Tensor[(5, 12, 16), float64] */;
  (%235,)
}

def @func_8768() -> Tensor[(5, 12, 16), float64] {
  %236 = @func_4584() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(1728), int64]) */;
  %236.0
}

def @func_5828() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %237 = @func_3640() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %238 = %237.0;
  %239 = @func_4948() /* ty=Tensor[(5, 12, 16), float64] */;
  (%238, %239)
}

def @func_2780(%var_2771: Tensor[(6, 6, 9), uint64]) -> (Tensor[(6, 6, 9), bool],) {
  %240 = cast(%var_2771, dtype="bool") /* ty=Tensor[(6, 6, 9), bool] */;
  %241 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(6, 6, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 6, 9), uint64] */, dtype="bool") /* ty=Tensor[(6, 6, 9), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %244 = less(%242, %243) /* ty=Tensor[(6, 6, 9), bool] */;
  (%244,)
}

def @func_1409() -> Tensor[(5, 12, 16), float64] {
  @func_1385() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_5779(%var_5774: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), uint32],) {
  %245 = @func_3266() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %246 = %245.0;
  %247 = cast(%var_5774, dtype="uint32") /* ty=Tensor[(5, 12, 16), uint32] */;
  %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%246, dtype="uint32") /* ty=Tensor[(5, 12, 16), uint32] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %251 = minimum(%249, %250) /* ty=Tensor[(5, 12, 16), uint32] */;
  (%251,)
}

def @func_8406() -> (Tensor[(5, 12, 16), float64],) {
  %252 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  (%252,)
}

def @func_9158() -> (Tensor[(5, 12, 16), float64],) {
  %253 = @func_6291() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %254 = %253.0;
  (%254,)
}

def @func_3698() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), int64]) {
  %255 = @func_3175() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */;
  %256 = @func_1385() /* ty=Tensor[(5, 12, 16), float64] */;
  %257 = %255.3;
  (%256, %257)
}

def @func_3823() -> (Tensor[(5, 12, 16), float64],) {
  %258 = @func_2764() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) */;
  %259 = %258.0;
  (%259,)
}

def @func_1693() -> Tensor[(5, 12, 16), float64] {
  @func_1427() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_2961(%var_2942: Tensor[(480), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(480), uint16], Tensor[(5, 16, 6), float64]) {
  %260 = cast(%var_2942, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %261 = reshape(%260, newshape=[240, 2]) /* ty=Tensor[(240, 2), uint16] */;
  %262 = @func_2701(%261) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(240, 2), uint16]) */;
  %263 = cast(%var_2942, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %264 = cast(%var_2942, dtype="float64") /* ty=Tensor[(480), float64] */;
  %265 = reshape(%263, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint16] */;
  %266 = reshape(%264, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), float64] */;
  %267 = @func_1522(%265, %266) /* ty=(Tensor[(5, 16, 6), float32], Tensor[(12, 12, 12), float64], Tensor[(1728), int64], Tensor[(7, 10, 11), float64], Tensor[(154, 2), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64]) */;
  %268 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
  %269 = %262.0;
  %270 = %267.6;
  (%268, %269, %var_2942, %270)
}

def @func_8567() -> Tensor[(5, 12, 16), int64] {
  @func_7506() /* ty=Tensor[(5, 12, 16), int64] */
}

def @func_8472(%var_8462: Tensor[(1, 1755), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(15, 9, 13), int16], Tensor[(1, 1755), uint16], Tensor[(5, 12, 16), float64]) {
  %271 = @func_3823() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %272 = cast(%var_8462, dtype="uint16") /* ty=Tensor[(1, 1755), uint16] */;
  %273 = cast(%var_8462, dtype="uint16") /* ty=Tensor[(1, 1755), uint16] */;
  %274 = reshape(%272, newshape=[15, 9, 13]) /* ty=Tensor[(15, 9, 13), uint16] */;
  %275 = reshape(%273, newshape=[15, 9, 13]) /* ty=Tensor[(15, 9, 13), uint16] */;
  %276 = %271.0;
  %277 = @func_6912(%274, %275) /* ty=Tensor[(15, 9, 13), int16] */;
  %278 = @func_2545() /* ty=Tensor[(5, 12, 16), float64] */;
  (%276, %277, %var_8462, %278)
}

def @func_8181(%var_8162: Tensor[(637, 2), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], uint16, Tensor[(600), uint16], Tensor[(5, 12, 16), float64], Tensor[(7, 182), float64], Tensor[(637, 2), float64]) {
  %279 = @func_3823() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %280 = cast(meta[relay.Constant][11] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %281 = cast(meta[relay.Constant][12] /* ty=Tensor[(600), uint16] */, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %282 = %279.0;
  %283 = cast(%282, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %284 = reshape(%280, newshape=[]) /* ty=uint16 */;
  %285 = reshape(%281, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), uint16] */;
  %286 = reshape(%283, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %287 = @func_3338(%284, %285, %286) /* ty=(Tensor[(15, 10, 4), uint16], Tensor[(5, 12, 16), float64], Tensor[(960), float64]) */;
  %288 = @func_5506() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %289 = cast(%var_8162, dtype="float64") /* ty=Tensor[(637, 2), float64] */;
  %290 = reshape(%289, newshape=[7, 182]) /* ty=Tensor[(7, 182), float64] */;
  %291 = @func_2342(%290) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(7, 14, 13), float64], Tensor[(7, 182), float64], Tensor[(5, 12, 16), float64]) */;
  %292 = %287.1;
  %293 = %288.1;
  %294 = %291.2;
  (%282, %292, meta[relay.Constant][11] /* ty=uint16 */, meta[relay.Constant][12] /* ty=Tensor[(600), uint16] */, %293, %294, %var_8162)
}

def @func_7218() -> (Tensor[(5, 12, 16), float64],) {
  %295 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
  (%295,)
}

def @func_9118() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint32]) {
  %296 = @func_2371() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float32]) */;
  %297 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  %298 = cast(%297, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %299 = reshape(%298, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %300 = @func_5779(%299) /* ty=(Tensor[(5, 12, 16), uint32],) */;
  %301 = %296.0;
  %302 = %300.0;
  (%297, %301, %302)
}

def @func_2848(%var_2818: Tensor[(5, 9, 6), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(480), uint16], Tensor[(5, 9, 6), float32]) {
  %303 = cast(meta[relay.Constant][13] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %304 = reshape(%303, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %305 = @func_1673(%304) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(480), uint16], Tensor[(5, 12, 16), float64]) */;
  %306 = cast(%var_2818, dtype="float64") /* ty=Tensor[(5, 9, 6), float64] */;
  %307 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(5, 9, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 9, 6), float64] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %310 = divide(%308, %309) /* ty=Tensor[(5, 9, 6), float64] */;
  %311 = cast(%310, dtype="float32") /* ty=Tensor[(5, 9, 6), float32] */;
  %312 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(5, 9, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 9, 6), float64] */, dtype="float32") /* ty=Tensor[(5, 9, 6), float32] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %315 = %305.3;
  %316 = maximum(%313, %314) /* ty=Tensor[(5, 9, 6), float32] */;
  (%315, meta[relay.Constant][13] /* ty=Tensor[(480), uint16] */, %316)
}

def @func_6994() -> Tensor[(5, 12, 16), int64] {
  %317 = @func_3175() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */;
  %317.3
}

def @func_6678() -> Tensor[(5, 12, 16), float64] {
  %318 = @func_3266() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %318.0
}

def @func_6247() -> (Tensor[(5, 12, 16), float64],) {
  %319 = @func_1693() /* ty=Tensor[(5, 12, 16), float64] */;
  (%319,)
}

def @func_2342(%var_2316: Tensor[(7, 182), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(7, 14, 13), float64], Tensor[(7, 182), float64], Tensor[(5, 12, 16), float64]) {
  %320 = cast(%var_2316, dtype="float64") /* ty=Tensor[(7, 182), float64] */;
  %321 = cast(%var_2316, dtype="float64") /* ty=Tensor[(7, 182), float64] */;
  %322 = reshape(%320, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %323 = reshape(%321, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %324 = @func_1880(%322, %323) /* ty=(Tensor[(7, 14, 13), float64],) */;
  %325 = @func_1936() /* ty=Tensor[(5, 12, 16), float64] */;
  %326 = %324.0;
  %327 = @func_2086() /* ty=Tensor[(5, 12, 16), float64] */;
  (%325, %326, %var_2316, %327)
}

def @func_8063(%var_8058: Tensor[(18), uint32]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 6, 1), float64], Tensor[(18), uint32], Tensor[(270), float64]) {
  %328 = @func_5128() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %329 = cast(%var_8058, dtype="uint32") /* ty=Tensor[(18), uint32] */;
  %330 = cast(meta[relay.Constant][15] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %331 = reshape(%329, newshape=[3, 2, 3]) /* ty=Tensor[(3, 2, 3), uint32] */;
  %332 = reshape(%330, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %333 = @func_4320(%331, %332) /* ty=(Tensor[(3, 2, 3), uint32], Tensor[(5, 6, 1), float64], Tensor[(270), float64]) */;
  %334 = %328.0;
  %335 = %333.1;
  (%334, %335, %var_8058, meta[relay.Constant][15] /* ty=Tensor[(270), float64] */)
}

def @func_8826() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %336 = @func_4934() /* ty=(Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), bool], Tensor[(5, 12, 16), float64]) */;
  %337 = @func_6291() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %338 = %336.1;
  %339 = %337.0;
  (%338, %339)
}

def @func_1673(%var_1654: Tensor[(480), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(480), uint16], Tensor[(5, 12, 16), float64]) {
  %340 = cast(%var_1654, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %341 = cast(%var_1654, dtype="float64") /* ty=Tensor[(480), float64] */;
  %342 = reshape(%340, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint16] */;
  %343 = reshape(%341, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), float64] */;
  %344 = @func_1522(%342, %343) /* ty=(Tensor[(5, 16, 6), float32], Tensor[(12, 12, 12), float64], Tensor[(1728), int64], Tensor[(7, 10, 11), float64], Tensor[(154, 2), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64]) */;
  %345 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  %346 = %344.10;
  %347 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  (%345, %346, %var_1654, %347)
}

def @func_8949() -> Tensor[(5, 12, 16), float64] {
  %348 = @func_5620() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %348.0
}

def @func_1343(%var_1324: Tensor[(1, 7, 2), float32], %var_1325: Tensor[(11, 7, 2), float32]) -> (Tensor[(11, 7, 2), float32], Tensor[(11, 7, 2), float32], Tensor[(4, 11, 7), bool], Tensor[(7, 44), float32]) {
  %349 = cast(%var_1324, dtype="float32") /* ty=Tensor[(1, 7, 2), float32] */;
  %350 = cast(%var_1325, dtype="float32") /* ty=Tensor[(11, 7, 2), float32] */;
  %351 = cast(%var_1325, dtype="float32") /* ty=Tensor[(11, 7, 2), float32] */;
  %352 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 44), float32] */, dtype="float32") /* ty=Tensor[(7, 44), float32] */;
  %353 = reshape(%352, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %354 = @func_644(%353) /* ty=(Tensor[(7, 10, 11), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) */;
  %355 = minimum(%349, %350) /* ty=Tensor[(11, 7, 2), float32] */;
  %356 = tan(%351) /* ty=Tensor[(11, 7, 2), float32] */;
  %357 = %354.1;
  (%355, %356, %357, meta[relay.Constant][16] /* ty=Tensor[(7, 44), float32] */)
}

def @func_2371() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float32]) {
  %358 = @func_1622() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %359 = %358.0;
  %360 = cast(%359, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %361 = cast(%359, dtype="float32") /* ty=Tensor[(5, 12, 16), float32] */;
  %362 = atanh(%360) /* ty=Tensor[(5, 12, 16), float64] */;
  %363 = sqrt(%361) /* ty=Tensor[(5, 12, 16), float32] */;
  (%362, %363)
}

def @func_2197(%var_2189: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) {
  %364 = @func_2086() /* ty=Tensor[(5, 12, 16), float64] */;
  %365 = cast(%var_2189, dtype="uint16") /* ty=Tensor[(5, 12, 16), uint16] */;
  %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%364, dtype="uint16") /* ty=Tensor[(5, 12, 16), uint16] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %369 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
  %370 = logical_xor(%367, %368) /* ty=Tensor[(5, 12, 16), uint16] */;
  (%369, %370)
}

def @func_3465() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %371 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  %372 = cast(%371, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %373 = @func_3358() /* ty=Tensor[(5, 12, 16), float64] */;
  %374 = rsqrt(%372) /* ty=Tensor[(5, 12, 16), float64] */;
  (%373, %374)
}

def @func_4948() -> Tensor[(5, 12, 16), float64] {
  @func_1409() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_3118(%var_3076: Tensor[(1274), float64]) -> (Tensor[(7, 182), float64], Tensor[(1274), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), bool]) {
  %375 = cast(%var_3076, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %376 = reshape(%375, newshape=[7, 182]) /* ty=Tensor[(7, 182), float64] */;
  %377 = @func_2342(%376) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(7, 14, 13), float64], Tensor[(7, 182), float64], Tensor[(5, 12, 16), float64]) */;
  %378 = cast(%var_3076, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %379 = @func_2714() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %380 = %379.0;
  %381 = cast(%380, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %382 = acos(%381) /* ty=Tensor[(5, 12, 16), float64] */;
  %383 = cast(%380, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%382, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %387 = %377.2;
  %388 = sin(%378) /* ty=Tensor[(1274), float64] */;
  %389 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
  %390 = less(%385, %386) /* ty=Tensor[(5, 12, 16), bool] */;
  (%387, %388, %389, %390)
}

def @func_9247() -> (Tensor[(5, 12, 16), float64],) {
  %391 = @func_6678() /* ty=Tensor[(5, 12, 16), float64] */;
  (%391,)
}

def @func_1880(%var_1870: Tensor[(7, 14, 13), float64], %var_1871: Tensor[(7, 14, 13), float64]) -> (Tensor[(7, 14, 13), float64],) {
  %392 = cast(%var_1871, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %393 = shape_of(%var_1870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%var_1870, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %396 = floor_divide(%394, %395) /* ty=Tensor[(7, 14, 13), float64] */;
  (%396,)
}

def @func_3175() -> (Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) {
  %397 = @func_2764() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) */;
  %398 = cast(meta[relay.Constant][17] /* ty=Tensor[(1728), int64] */, dtype="int64") /* ty=Tensor[(1728), int64] */;
  %399 = cast(meta[relay.Constant][17] /* ty=Tensor[(1728), int64] */, dtype="int64") /* ty=Tensor[(1728), int64] */;
  %400 = reshape(%398, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), int64] */;
  %401 = reshape(%399, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), int64] */;
  %402 = @func_866(%400, %401) /* ty=(Tensor[(12, 12, 12), int64], Tensor[(12, 12, 12), float32], Tensor[(4, 11, 7), bool], Tensor[(308), float32], Tensor[(12, 12, 12), float64]) */;
  %403 = %397.1;
  %404 = cast(%403, dtype="float32") /* ty=Tensor[(5, 12, 16), float32] */;
  %405 = reshape(%404, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float32] */;
  %406 = %402.3;
  %407 = @func_3017(%405) /* ty=Tensor[(5, 12, 16), int64] */;
  (%403, %406, meta[relay.Constant][17] /* ty=Tensor[(1728), int64] */, %407)
}

def @func_6761() -> (Tensor[(5, 12, 16), float64],) {
  %408 = @func_1936() /* ty=Tensor[(5, 12, 16), float64] */;
  (%408,)
}

def @func_3358() -> Tensor[(5, 12, 16), float64] {
  @func_1845() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_2995(%var_2985: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), uint64], Tensor[(5, 12, 16), float64]) {
  %409 = @func_2545() /* ty=Tensor[(5, 12, 16), float64] */;
  %410 = cast(%var_2985, dtype="uint64") /* ty=Tensor[(5, 12, 16), uint64] */;
  %411 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%409, dtype="uint64") /* ty=Tensor[(5, 12, 16), uint64] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %414 = bitwise_and(%412, %413) /* ty=Tensor[(5, 12, 16), uint64] */;
  %415 = @func_1936() /* ty=Tensor[(5, 12, 16), float64] */;
  (%414, %415)
}

def @func_4266() -> (Tensor[(5, 12, 16), float64],) {
  %416 = @func_3226() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %417 = %416.0;
  (%417,)
}

def @func_6699() -> Tensor[(5, 12, 16), float64] {
  @func_2086() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_6981(%var_6973: Tensor[(10, 3, 2), int32]) -> (Tensor[(10, 3, 2), int32], Tensor[(10, 3, 2), float64]) {
  %418 = cast(meta[relay.Constant][18] /* ty=Tensor[(10, 3, 2), int32] */, dtype="int32") /* ty=Tensor[(10, 3, 2), int32] */;
  %419 = shape_of(%var_6973, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%var_6973, dtype="int32") /* ty=Tensor[(10, 3, 2), int32] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %422 = cast(%var_6973, dtype="float64") /* ty=Tensor[(10, 3, 2), float64] */;
  %423 = left_shift(%420, %421) /* ty=Tensor[(10, 3, 2), int32] */;
  %424 = atanh(%422) /* ty=Tensor[(10, 3, 2), float64] */;
  (%423, %424)
}

def @func_4355(%var_4336: float32) -> Tensor[(8, 8, 5), float32] {
  %425 = cast(%var_4336, dtype="float32") /* ty=float32 */;
  %426 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 8, 5), float32] */;
  power(%425, %426) /* ty=Tensor[(8, 8, 5), float32] */
}

def @func_6169() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %427 = @func_5907() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %428 = @func_3497() /* ty=Tensor[(5, 12, 16), float64] */;
  %429 = %427.0;
  (%428, %429)
}

def @func_1637(%var_1634: Tensor[(10, 7, 3), float32]) -> (Tensor[(10, 7, 3), float32],) {
  %430 = cast(%var_1634, dtype="float32") /* ty=Tensor[(10, 7, 3), float32] */;
  %431 = tan(%430) /* ty=Tensor[(10, 7, 3), float32] */;
  (%431,)
}

def @func_6779(%var_6772: Tensor[(15, 9, 12), float32]) -> (Tensor[(15, 9, 12), float32],) {
  %432 = cast(%var_6772, dtype="float32") /* ty=Tensor[(15, 9, 12), float32] */;
  %433 = log2(%432) /* ty=Tensor[(15, 9, 12), float32] */;
  (%433,)
}

def @func_8587(%var_8583: Tensor[(14, 11, 6), float32]) -> (Tensor[(14, 11, 6), bool],) {
  %434 = cast(5.28861f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %435 = cast(%var_8583, dtype="bool") /* ty=Tensor[(14, 11, 6), bool] */;
  %436 = greater(%434, %435) /* ty=Tensor[(14, 11, 6), bool] */;
  (%436,)
}

def @func_3226() -> (Tensor[(5, 12, 16), float64],) {
  %437 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  (%437,)
}

def @func_8316() -> Tensor[(5, 12, 16), float64] {
  @func_3715() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_4706(%var_4682: Tensor[(270), float64], %var_4696: Tensor[(104), float64], %var_4698: Tensor[(325), float32], %var_4699: Tensor[(960), float64]) -> (Tensor[(1728), int64], Tensor[(78), float32], Tensor[(270), float64], Tensor[(6, 3), uint32], Tensor[(270), float64], Tensor[(5, 12, 16), float64], Tensor[(104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(960), float64]) {
  %438 = @func_4584() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(1728), int64]) */;
  %439 = @func_2144() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(3, 2, 13), float32], Tensor[(78), float32]) */;
  %440 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 3), uint32] */, dtype="uint32") /* ty=Tensor[(6, 3), uint32] */;
  %441 = cast(%var_4682, dtype="float64") /* ty=Tensor[(270), float64] */;
  %442 = reshape(%440, newshape=[3, 2, 3]) /* ty=Tensor[(3, 2, 3), uint32] */;
  %443 = reshape(%441, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %444 = @func_4320(%442, %443) /* ty=(Tensor[(3, 2, 3), uint32], Tensor[(5, 6, 1), float64], Tensor[(270), float64]) */;
  %445 = cast(%var_4696, dtype="float64") /* ty=Tensor[(104), float64] */;
  %446 = cast(meta[relay.Constant][21] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %447 = cast(%var_4698, dtype="float32") /* ty=Tensor[(325), float32] */;
  %448 = cast(%var_4699, dtype="float64") /* ty=Tensor[(960), float64] */;
  %449 = reshape(%445, newshape=[104]) /* ty=Tensor[(104), float64] */;
  %450 = reshape(%446, newshape=[65]) /* ty=Tensor[(65), float32] */;
  %451 = reshape(%447, newshape=[325]) /* ty=Tensor[(325), float32] */;
  %452 = reshape(%448, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %453 = @func_4553(%449, %450, %451, %452) /* ty=(Tensor[(13, 4, 2), float64], Tensor[(104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(5, 12, 16), int32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(8, 60), float64], Tensor[(8, 60), float32]) */;
  %454 = %438.1;
  %455 = %439.5;
  %456 = %444.2;
  %457 = %453.5;
  (%454, %455, %456, meta[relay.Constant][20] /* ty=Tensor[(6, 3), uint32] */, %var_4682, %457, %var_4696, meta[relay.Constant][21] /* ty=Tensor[(65), float32] */, %var_4698, %var_4699)
}

def @func_4934() -> (Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), bool], Tensor[(5, 12, 16), float64]) {
  %458 = @func_2371() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float32]) */;
  %459 = %458.1;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %461 = reshape(%460, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %462 = @func_3856(%461) /* ty=(Tensor[(5, 12, 16), bool],) */;
  %463 = @func_3715() /* ty=Tensor[(5, 12, 16), float64] */;
  %464 = %462.0;
  %465 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
  (%459, %463, %464, %465)
}

def @func_4831() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %466 = @func_3698() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), int64]) */;
  %467 = @func_3266() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %468 = %466.0;
  %469 = %467.0;
  (%468, %469)
}

def @func_1427() -> Tensor[(5, 12, 16), float64] {
  @func_1409() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_3676() -> (Tensor[(5, 12, 16), float64], Tensor[(78), float32]) {
  %470 = @func_3358() /* ty=Tensor[(5, 12, 16), float64] */;
  %471 = cast(%470, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %472 = reshape(%471, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %473 = @func_2046(%472) /* ty=(Tensor[(5, 12, 16), bool], Tensor[(3, 2, 13), bool], Tensor[(78), float32]) */;
  %474 = %473.2;
  (%470, %474)
}

def @func_7878() -> (Tensor[(5, 12, 16), float64],) {
  %475 = @func_5506() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %476 = %475.0;
  (%476,)
}

def @func_7931() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %477 = @func_6551() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %478 = %477.0;
  %479 = cast(%478, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %480 = acosh(%479) /* ty=Tensor[(5, 12, 16), float64] */;
  %481 = @func_4948() /* ty=Tensor[(5, 12, 16), float64] */;
  (%480, %481)
}

def @func_644(%var_622: Tensor[(308), float32]) -> (Tensor[(7, 10, 11), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) {
  %482 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 10, 11), float64] */, dtype="float64") /* ty=Tensor[(7, 10, 11), float64] */;
  %483 = cast(%var_622, dtype="float32") /* ty=Tensor[(308), float32] */;
  %484 = reshape(%483, newshape=[4, 11, 7]) /* ty=Tensor[(4, 11, 7), float32] */;
  %485 = @func_26(%484) /* ty=(Tensor[(4, 11, 7), bool],) */;
  %486 = acosh(%482) /* ty=Tensor[(7, 10, 11), float64] */;
  %487 = %485.0;
  (%486, %487, %var_622)
}

def @func_8217() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %488 = @func_1385() /* ty=Tensor[(5, 12, 16), float64] */;
  %489 = @func_5342() /* ty=Tensor[(5, 12, 16), float64] */;
  (%488, %489)
}

def @func_5678(%var_5652: Tensor[(8, 13, 12), uint8], %var_5653: Tensor[(8, 13, 12), uint8]) -> (Tensor[(8, 13, 12), bool],) {
  %490 = cast(%var_5653, dtype="uint8") /* ty=Tensor[(8, 13, 12), uint8] */;
  %491 = shape_of(%var_5652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%var_5652, dtype="uint8") /* ty=Tensor[(8, 13, 12), uint8] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %494 = multiply(%492, %493) /* ty=Tensor[(8, 13, 12), uint8] */;
  %495 = cast(%494, dtype="bool") /* ty=Tensor[(8, 13, 12), bool] */;
  %496 = shape_of(%var_5653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%var_5653, dtype="bool") /* ty=Tensor[(8, 13, 12), bool] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %499 = equal(%497, %498) /* ty=Tensor[(8, 13, 12), bool] */;
  (%499,)
}

def @func_4192(%var_4157: Tensor[(1274), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(7, 14, 13), float64], Tensor[(1274), uint32], Tensor[(5, 12, 16), float64], Tensor[(1274), float32]) {
  %500 = @func_2371() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float32]) */;
  %501 = cast(meta[relay.Constant][23] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %502 = cast(meta[relay.Constant][23] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %503 = reshape(%501, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %504 = reshape(%502, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %505 = @func_1880(%503, %504) /* ty=(Tensor[(7, 14, 13), float64],) */;
  %506 = cast(%var_4157, dtype="uint32") /* ty=Tensor[(1274), uint32] */;
  %507 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(1274), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %508 = cast(meta[relay.Constant][23] /* ty=Tensor[(1274), float64] */, dtype="uint32") /* ty=Tensor[(1274), uint32] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %510 = %500.0;
  %511 = cast(%510, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %512 = reshape(%511, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %513 = @func_2197(%512) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) */;
  %514 = cast(%var_4157, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %515 = acos(%514) /* ty=Tensor[(1274), float64] */;
  %516 = cast(%515, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %517 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  %518 = %505.0;
  %519 = logical_xor(%508, %509) /* ty=Tensor[(1274), uint32] */;
  %520 = %513.0;
  %521 = log10(%516) /* ty=Tensor[(1274), float32] */;
  (%510, %517, %518, %519, %520, %521)
}

def @func_6551() -> (Tensor[(5, 12, 16), float64],) {
  %522 = @func_6169() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %523 = %522.1;
  (%523,)
}

def @func_7974(%var_7962: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), float64],) {
  %524 = @func_6036() /* ty=Tensor[(5, 12, 16), float64] */;
  %525 = cast(%var_7962, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%524, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %529 = mod(%527, %528) /* ty=Tensor[(5, 12, 16), float64] */;
  (%529,)
}

def @func_6036() -> Tensor[(5, 12, 16), float64] {
  @func_2086() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_7425(%var_7393: Tensor[(7, 7, 7), float64]) -> (Tensor[(7, 14, 13), float64], Tensor[(1274), float64], Tensor[(7, 7, 7), float32]) {
  %530 = cast(meta[relay.Constant][24] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %531 = cast(meta[relay.Constant][24] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %532 = reshape(%530, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %533 = reshape(%531, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %534 = @func_1880(%532, %533) /* ty=(Tensor[(7, 14, 13), float64],) */;
  %535 = cast(%var_7393, dtype="float64") /* ty=Tensor[(7, 7, 7), float64] */;
  %536 = sigmoid(%535) /* ty=Tensor[(7, 7, 7), float64] */;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(7, 7, 7), float32] */;
  %538 = %534.0;
  %539 = atanh(%537) /* ty=Tensor[(7, 7, 7), float32] */;
  (%538, meta[relay.Constant][24] /* ty=Tensor[(1274), float64] */, %539)
}

def @func_3715() -> Tensor[(5, 12, 16), float64] {
  %540 = @func_1622() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %540.0
}

def @main(%var_9300: Tensor[(15, 8, 5), int16]) -> Tensor[(15, 8, 5), int16] {
  %541 = cast(%var_9300, dtype="int16") /* ty=Tensor[(15, 8, 5), int16] */;
  %542 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(15, 8, 5), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 8, 5), int16] */, dtype="int16") /* ty=Tensor[(15, 8, 5), int16] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%543, %544) /* ty=Tensor[(15, 8, 5), int16] */
}

def @func_5439() -> Tensor[(5, 12, 16), float64] {
  @func_1693() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_9212() -> (Tensor[(5, 12, 16), float64],) {
  %545 = @func_6601() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), int64]) */;
  %546 = %545.0;
  (%546,)
}

def @func_8992(%var_8982: Tensor[(1274), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(5, 12, 16), float64]) {
  %547 = @func_5620() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %548 = cast(%var_8982, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %549 = reshape(%548, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %550 = @func_5206(%549) /* ty=(Tensor[(5, 12, 16), bool], Tensor[(1274), uint32], Tensor[(1274), float64]) */;
  %551 = %547.0;
  %552 = %550.2;
  %553 = @func_3358() /* ty=Tensor[(5, 12, 16), float64] */;
  (%551, %552, %var_8982, %553)
}

def @func_1845() -> Tensor[(5, 12, 16), float64] {
  @func_1385() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_4790(%var_4751: float32, %var_4755: Tensor[(270, 1), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(308), float32], Tensor[(2, 52), float64], Tensor[(8, 8, 5), float32], float32, Tensor[(35, 6), float32], Tensor[(270, 1), float64], Tensor[(5, 12, 16), bool]) {
  %554 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 52), float64] */, dtype="float64") /* ty=Tensor[(2, 52), float64] */;
  %555 = reshape(%554, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), float64] */;
  %556 = @func_926(%555) /* ty=(Tensor[(13, 4, 2), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) */;
  %557 = cast(%var_4751, dtype="float32") /* ty=float32 */;
  %558 = reshape(%557, newshape=[]) /* ty=float32 */;
  %559 = cast(%var_4755, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
  %560 = reshape(%559, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %561 = @func_3316(%560) /* ty=(Tensor[(5, 6, 1), float64], Tensor[(35, 6), float32], Tensor[(270), float64]) */;
  %562 = @func_1936() /* ty=Tensor[(5, 12, 16), float64] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %564 = reshape(%563, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %565 = @func_3856(%564) /* ty=(Tensor[(5, 12, 16), bool],) */;
  %566 = %556.2;
  %567 = @func_4355(%558) /* ty=Tensor[(8, 8, 5), float32] */;
  %568 = %561.1;
  %569 = %565.0;
  (%562, %566, meta[relay.Constant][26] /* ty=Tensor[(2, 52), float64] */, %567, %var_4751, %568, %var_4755, %569)
}

def @func_907(%var_890: Tensor[(3, 2, 13), float32]) -> (Tensor[(3, 2, 13), bool], Tensor[(3, 2, 13), float32]) {
  %570 = cast(%var_890, dtype="float32") /* ty=Tensor[(3, 2, 13), float32] */;
  %571 = sigmoid(%570) /* ty=Tensor[(3, 2, 13), float32] */;
  %572 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 2, 13), float32] */, dtype="bool") /* ty=Tensor[(3, 2, 13), bool] */;
  %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%571, dtype="bool") /* ty=Tensor[(3, 2, 13), bool] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %576 = cast(%571, dtype="float32") /* ty=Tensor[(3, 2, 13), float32] */;
  %577 = less(%574, %575) /* ty=Tensor[(3, 2, 13), bool] */;
  %578 = atanh(%576) /* ty=Tensor[(3, 2, 13), float32] */;
  (%577, %578)
}

def @func_9005() -> (Tensor[(9, 11, 13), bool],) {
  %579 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 11, 13), int16] */, dtype="bool") /* ty=Tensor[(9, 11, 13), bool] */;
  %580 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(9, 11, 13), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 11, 13), int16] */, dtype="bool") /* ty=Tensor[(9, 11, 13), bool] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %583 = less_equal(%581, %582) /* ty=Tensor[(9, 11, 13), bool] */;
  (%583,)
}

def @func_2764() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) {
  %584 = @func_2071() /* ty=Tensor[(5, 12, 16), float64] */;
  %585 = cast(%584, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %586 = reshape(%585, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %587 = @func_2197(%586) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) */;
  %588 = %587.1;
  (%584, %588)
}

def @func_2242(%var_2210: Tensor[(6, 5, 9), float64]) -> (Tensor[(6, 5, 9), float64], Tensor[(6, 5, 9), float64], Tensor[(10, 7, 3), float32], Tensor[(35, 6), float32]) {
  %589 = cast(%var_2210, dtype="float64") /* ty=Tensor[(6, 5, 9), float64] */;
  %590 = cast(%var_2210, dtype="float64") /* ty=Tensor[(6, 5, 9), float64] */;
  %591 = cast(meta[relay.Constant][30] /* ty=Tensor[(35, 6), float32] */, dtype="float32") /* ty=Tensor[(35, 6), float32] */;
  %592 = reshape(%591, newshape=[10, 7, 3]) /* ty=Tensor[(10, 7, 3), float32] */;
  %593 = @func_1637(%592) /* ty=(Tensor[(10, 7, 3), float32],) */;
  %594 = log(%589) /* ty=Tensor[(6, 5, 9), float64] */;
  %595 = tan(%590) /* ty=Tensor[(6, 5, 9), float64] */;
  %596 = %593.0;
  (%594, %595, %596, meta[relay.Constant][30] /* ty=Tensor[(35, 6), float32] */)
}

def @func_4871(%var_4847: Tensor[(9, 10, 5), float64], %var_4848: Tensor[(9, 10, 5), float64]) -> (Tensor[(9, 10, 5), bool],) {
  %597 = cast(%var_4848, dtype="bool") /* ty=Tensor[(9, 10, 5), bool] */;
  %598 = shape_of(%var_4847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%var_4847, dtype="bool") /* ty=Tensor[(9, 10, 5), bool] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %601 = greater_equal(%599, %600) /* ty=Tensor[(9, 10, 5), bool] */;
  (%601,)
}

def @func_7731(%var_7721: Tensor[(60, 12), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(12, 12, 5), bool], Tensor[(60, 12), float64]) {
  %602 = @func_5828() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %603 = cast(%var_7721, dtype="float64") /* ty=Tensor[(60, 12), float64] */;
  %604 = reshape(%603, newshape=[12, 12, 5]) /* ty=Tensor[(12, 12, 5), float64] */;
  %605 = @func_5081(%604) /* ty=(Tensor[(12, 12, 5), uint16], Tensor[(5, 12, 16), float64], Tensor[(12, 12, 5), bool]) */;
  %606 = %602.0;
  %607 = %605.2;
  (%606, %607, %var_7721)
}

def @func_4584() -> (Tensor[(5, 12, 16), float64], Tensor[(1728), int64]) {
  %608 = @func_3175() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */;
  %609 = @func_2545() /* ty=Tensor[(5, 12, 16), float64] */;
  %610 = %608.2;
  (%609, %610)
}

def @func_26(%var_15: Tensor[(4, 11, 7), float32]) -> (Tensor[(4, 11, 7), bool],) {
  %611 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 11, 7), float32] */, dtype="bool") /* ty=Tensor[(4, 11, 7), bool] */;
  %612 = shape_of(%var_15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%var_15, dtype="bool") /* ty=Tensor[(4, 11, 7), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = less(%613, %614) /* ty=Tensor[(4, 11, 7), bool] */;
  (%615,)
}

def @func_6601() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), int64]) {
  %616 = @func_5620() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %617 = @func_5889() /* ty=(Tensor[(5, 12, 16), int64],) */;
  %618 = %616.0;
  %619 = %617.0;
  (%618, %619)
}

def @func_6620() -> (Tensor[(5, 12, 16), float64],) {
  %620 = @func_4014() /* ty=Tensor[(5, 12, 16), float64] */;
  (%620,)
}

def @func_3338(%var_3325: uint16, %var_3326: Tensor[(15, 10, 4), uint16], %var_3334: Tensor[(960), float64]) -> (Tensor[(15, 10, 4), uint16], Tensor[(5, 12, 16), float64], Tensor[(960), float64]) {
  %621 = cast(%var_3325, dtype="uint16") /* ty=uint16 */;
  %622 = cast(%var_3326, dtype="uint16") /* ty=Tensor[(15, 10, 4), uint16] */;
  %623 = cast(%var_3334, dtype="float64") /* ty=Tensor[(960), float64] */;
  %624 = reshape(%623, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %625 = @func_2995(%624) /* ty=(Tensor[(5, 12, 16), uint64], Tensor[(5, 12, 16), float64]) */;
  %626 = add(%621, %622) /* ty=Tensor[(15, 10, 4), uint16] */;
  %627 = %625.1;
  (%626, %627, %var_3334)
}

def @func_5342() -> Tensor[(5, 12, 16), float64] {
  %628 = @func_4249() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %628.0
}

def @func_3211(%var_3177: Tensor[(1, 5, 13), float32], %var_3178: Tensor[(5, 5, 13), float32], %var_3192: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 5, 13), float32], Tensor[(8, 60), uint16], Tensor[(5, 12, 16), int32]) {
  %629 = cast(%var_3177, dtype="float32") /* ty=Tensor[(1, 5, 13), float32] */;
  %630 = cast(%var_3178, dtype="float32") /* ty=Tensor[(5, 5, 13), float32] */;
  %631 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 60), uint16] */, dtype="uint16") /* ty=Tensor[(8, 60), uint16] */;
  %632 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 60), uint16] */, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %633 = reshape(%631, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint16] */;
  %634 = reshape(%632, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), float64] */;
  %635 = @func_1522(%633, %634) /* ty=(Tensor[(5, 16, 6), float32], Tensor[(12, 12, 12), float64], Tensor[(1728), int64], Tensor[(7, 10, 11), float64], Tensor[(154, 2), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64]) */;
  %636 = %635.8;
  %637 = cast(%var_3192, dtype="int32") /* ty=Tensor[(5, 12, 16), int32] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%636, dtype="int32") /* ty=Tensor[(5, 12, 16), int32] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %641 = power(%629, %630) /* ty=Tensor[(5, 5, 13), float32] */;
  %642 = multiply(%639, %640) /* ty=Tensor[(5, 12, 16), int32] */;
  (%641, meta[relay.Constant][32] /* ty=Tensor[(8, 60), uint16] */, %642)
}

def @func_5799() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint32], Tensor[(5, 12, 16), float64]) {
  %643 = @func_3465() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %644 = %643.1;
  %645 = cast(%644, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %646 = reshape(%645, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %647 = @func_5779(%646) /* ty=(Tensor[(5, 12, 16), uint32],) */;
  %648 = @func_2714() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %649 = %647.0;
  %650 = %648.0;
  (%644, %649, %650)
}

def @func_4657(%var_4648: Tensor[(5, 12, 16), float64]) -> Tensor[(5, 12, 16), bool] {
  %651 = @func_3465() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %652 = %651.1;
  %653 = cast(%var_4648, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%655, %656) /* ty=Tensor[(5, 12, 16), bool] */
}

def @func_2464() -> (Tensor[(4, 11, 7), bool], Tensor[(104), float64], Tensor[(12, 9, 10), bool], Tensor[(12, 9, 10), float64]) {
  %657 = cast(meta[relay.Constant][33] /* ty=Tensor[(104), float64] */, dtype="float64") /* ty=Tensor[(104), float64] */;
  %658 = reshape(%657, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), float64] */;
  %659 = @func_926(%658) /* ty=(Tensor[(13, 4, 2), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) */;
  %660 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 9, 10), bool] */, dtype="float32") /* ty=Tensor[(12, 9, 10), float32] */;
  %661 = asinh(%660) /* ty=Tensor[(12, 9, 10), float32] */;
  %662 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %663 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 9, 10), bool] */, dtype="bool") /* ty=Tensor[(12, 9, 10), bool] */;
  %664 = logical_or(%662, %663) /* ty=Tensor[(12, 9, 10), bool] */;
  %665 = cast(%664, dtype="bool") /* ty=Tensor[(12, 9, 10), bool] */;
  %666 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%661, dtype="bool") /* ty=Tensor[(12, 9, 10), bool] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %669 = cast(%661, dtype="float64") /* ty=Tensor[(12, 9, 10), float64] */;
  %670 = %659.1;
  %671 = greater_equal(%667, %668) /* ty=Tensor[(12, 9, 10), bool] */;
  %672 = sqrt(%669) /* ty=Tensor[(12, 9, 10), float64] */;
  (%670, meta[relay.Constant][33] /* ty=Tensor[(104), float64] */, %671, %672)
}

def @func_3266() -> (Tensor[(5, 12, 16), float64],) {
  %673 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  (%673,)
}

def @func_8896() -> (Tensor[(5, 12, 16), float64],) {
  %674 = @func_6620() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %675 = %674.0;
  (%675,)
}

def @func_4014() -> Tensor[(5, 12, 16), float64] {
  @func_3030() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_3640() -> (Tensor[(5, 12, 16), float64],) {
  %676 = @func_3266() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %677 = %676.0;
  (%677,)
}

def @func_5907() -> (Tensor[(5, 12, 16), float64],) {
  %678 = @func_5439() /* ty=Tensor[(5, 12, 16), float64] */;
  (%678,)
}

def @func_6455(%var_6395: Tensor[(78), float32], %var_6425: Tensor[(12, 9, 10), bool]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(12, 9, 10), uint32], Tensor[(5, 12, 16), int64], Tensor[(78), bool]) {
  %679 = @func_5620() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %680 = @func_2464() /* ty=(Tensor[(4, 11, 7), bool], Tensor[(104), float64], Tensor[(12, 9, 10), bool], Tensor[(12, 9, 10), float64]) */;
  %681 = %680.2;
  %682 = cast(%var_6425, dtype="uint32") /* ty=Tensor[(12, 9, 10), uint32] */;
  %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%681, dtype="uint32") /* ty=Tensor[(12, 9, 10), uint32] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %686 = %679.0;
  %687 = cast(%686, dtype="float32") /* ty=Tensor[(5, 12, 16), float32] */;
  %688 = reshape(%687, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float32] */;
  %689 = cast(%var_6395, dtype="float32") /* ty=Tensor[(78), float32] */;
  %690 = reshape(%689, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
  %691 = @func_907(%690) /* ty=(Tensor[(3, 2, 13), bool], Tensor[(3, 2, 13), float32]) */;
  %692 = %691.1;
  %693 = cast(%692, dtype="float64") /* ty=Tensor[(3, 2, 13), float64] */;
  %694 = shape_of(%var_6395, dtype="int32") /* ty=Tensor[(1), int32] */;
  %695 = cast(%var_6395, dtype="float64") /* ty=Tensor[(78), float64] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?), float64] */;
  %697 = power(%695, %696) /* ty=Tensor[(78), float64] */;
  %698 = cast(%var_6395, dtype="bool") /* ty=Tensor[(78), bool] */;
  %699 = shape_of(%697, dtype="int32") /* ty=Tensor[(1), int32] */;
  %700 = cast(%697, dtype="bool") /* ty=Tensor[(78), bool] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?), bool] */;
  %702 = @func_2545() /* ty=Tensor[(5, 12, 16), float64] */;
  %703 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  %704 = bitwise_or(%684, %685) /* ty=Tensor[(12, 9, 10), uint32] */;
  %705 = @func_3017(%688) /* ty=Tensor[(5, 12, 16), int64] */;
  %706 = greater_equal(%700, %701) /* ty=Tensor[(78), bool] */;
  (%702, %703, %686, %704, %705, %706)
}

def @func_1622() -> (Tensor[(5, 12, 16), float64],) {
  %707 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  (%707,)
}

def @func_7799() -> (Tensor[(5, 12, 16), float64],) {
  %708 = @func_3640() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %709 = %708.0;
  %710 = cast(%709, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %711 = cos(%710) /* ty=Tensor[(5, 12, 16), float64] */;
  (%711,)
}

def @func_2071() -> Tensor[(5, 12, 16), float64] {
  %712 = @func_1622() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %712.0
}

def @func_7293() -> (Tensor[(5, 12, 16), int64],) {
  %713 = @func_5889() /* ty=(Tensor[(5, 12, 16), int64],) */;
  %714 = %713.0;
  (%714,)
}

def @func_4320(%var_4304: Tensor[(3, 2, 3), uint32], %var_4318: Tensor[(270), float64]) -> (Tensor[(3, 2, 3), uint32], Tensor[(5, 6, 1), float64], Tensor[(270), float64]) {
  %715 = cast(%var_4304, dtype="uint32") /* ty=Tensor[(3, 2, 3), uint32] */;
  %716 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(3, 2, 3), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 2, 3), uint32] */, dtype="uint32") /* ty=Tensor[(3, 2, 3), uint32] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %719 = cast(%var_4318, dtype="float64") /* ty=Tensor[(270), float64] */;
  %720 = reshape(%719, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %721 = @func_3316(%720) /* ty=(Tensor[(5, 6, 1), float64], Tensor[(35, 6), float32], Tensor[(270), float64]) */;
  %722 = bitwise_xor(%717, %718) /* ty=Tensor[(3, 2, 3), uint32] */;
  %723 = %721.0;
  (%722, %723, %var_4318)
}

def @func_7865() -> Tensor[(5, 12, 16), float64] {
  %724 = @func_6620() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %724.0
}

def @func_6912(%var_6892: Tensor[(15, 9, 13), uint16], %var_6893: Tensor[(15, 9, 13), uint16]) -> Tensor[(15, 9, 13), int16] {
  %725 = cast(%var_6893, dtype="uint16") /* ty=Tensor[(15, 9, 13), uint16] */;
  %726 = shape_of(%var_6892, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%var_6892, dtype="uint16") /* ty=Tensor[(15, 9, 13), uint16] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %729 = bitwise_and(%727, %728) /* ty=Tensor[(15, 9, 13), uint16] */;
  %730 = cast(%729, dtype="float32") /* ty=Tensor[(15, 9, 13), float32] */;
  %731 = atanh(%730) /* ty=Tensor[(15, 9, 13), float32] */;
  %732 = cast(%var_6892, dtype="int16") /* ty=Tensor[(15, 9, 13), int16] */;
  %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%731, dtype="int16") /* ty=Tensor[(15, 9, 13), int16] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  right_shift(%734, %735) /* ty=Tensor[(15, 9, 13), int16] */
}

def @func_926(%var_913: Tensor[(13, 4, 2), float64]) -> (Tensor[(13, 4, 2), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) {
  %736 = cast(%var_913, dtype="float64") /* ty=Tensor[(13, 4, 2), float64] */;
  %737 = cast(meta[relay.Constant][36] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %738 = reshape(%737, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %739 = @func_644(%738) /* ty=(Tensor[(7, 10, 11), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) */;
  %740 = rsqrt(%736) /* ty=Tensor[(13, 4, 2), float64] */;
  %741 = %739.1;
  (%740, %741, meta[relay.Constant][36] /* ty=Tensor[(308), float32] */)
}

def @func_2714() -> (Tensor[(5, 12, 16), float64],) {
  %742 = @func_1427() /* ty=Tensor[(5, 12, 16), float64] */;
  (%742,)
}

def @func_7674(%var_7660: Tensor[(1620), float32], %var_7670: Tensor[(480), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(15, 9, 12), float32], Tensor[(1620), float32], Tensor[(240, 2), uint16], Tensor[(480), uint16]) {
  %743 = @func_3698() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), int64]) */;
  %744 = %743.0;
  %745 = cast(%744, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %746 = cast(%var_7660, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %747 = reshape(%746, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), float32] */;
  %748 = @func_6779(%747) /* ty=(Tensor[(15, 9, 12), float32],) */;
  %749 = cast(%var_7670, dtype="uint16") /* ty=Tensor[(480), uint16] */;
  %750 = reshape(%749, newshape=[240, 2]) /* ty=Tensor[(240, 2), uint16] */;
  %751 = @func_2701(%750) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(240, 2), uint16]) */;
  %752 = sigmoid(%745) /* ty=Tensor[(5, 12, 16), float64] */;
  %753 = %748.0;
  %754 = %751.2;
  (%752, %753, %var_7660, %754, %var_7670)
}

def @func_5128() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %755 = @func_4266() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %756 = @func_3497() /* ty=Tensor[(5, 12, 16), float64] */;
  %757 = %755.0;
  %758 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
  (%756, %757, %758)
}

def @func_3990() -> (Tensor[(5, 12, 16), int64], Tensor[(5, 12, 16), float64]) {
  %759 = @func_3175() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */;
  %760 = %759.3;
  %761 = @func_2086() /* ty=Tensor[(5, 12, 16), float64] */;
  (%760, %761)
}

def @func_4249() -> (Tensor[(5, 12, 16), float64],) {
  %762 = @func_2086() /* ty=Tensor[(5, 12, 16), float64] */;
  (%762,)
}

def @func_5727() -> (Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %763 = @func_4934() /* ty=(Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), bool], Tensor[(5, 12, 16), float64]) */;
  %764 = @func_4831() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %765 = %763.0;
  %766 = %764.0;
  %767 = @func_1693() /* ty=Tensor[(5, 12, 16), float64] */;
  %768 = @func_1385() /* ty=Tensor[(5, 12, 16), float64] */;
  %769 = @func_1385() /* ty=Tensor[(5, 12, 16), float64] */;
  (%765, %766, %767, %768, %769)
}

def @func_2402(%var_2381: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), bool],) {
  %770 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  %771 = cast(%var_2381, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%770, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %775 = not_equal(%773, %774) /* ty=Tensor[(5, 12, 16), bool] */;
  (%775,)
}

def @func_2701(%var_2698: Tensor[(240, 2), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(240, 2), uint16]) {
  %776 = cast(%var_2698, dtype="uint16") /* ty=Tensor[(240, 2), uint16] */;
  %777 = reshape(%776, newshape=[480]) /* ty=Tensor[(480), uint16] */;
  %778 = @func_1673(%777) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(480), uint16], Tensor[(5, 12, 16), float64]) */;
  %779 = @func_1427() /* ty=Tensor[(5, 12, 16), float64] */;
  %780 = %778.1;
  (%779, %780, %var_2698)
}

def @func_7063(%var_7032: Tensor[(308), float32], %var_7040: Tensor[(1, 104), float64], %var_7041: Tensor[(65), float32], %var_7042: Tensor[(325), float32]) -> (Tensor[(325), float32], Tensor[(1, 104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(2, 480), float64], Tensor[(4, 11, 7), bool], Tensor[(308), bool], Tensor[(5, 12, 16), float64]) {
  %781 = cast(%var_7040, dtype="float64") /* ty=Tensor[(1, 104), float64] */;
  %782 = cast(%var_7041, dtype="float32") /* ty=Tensor[(65), float32] */;
  %783 = cast(%var_7042, dtype="float32") /* ty=Tensor[(325), float32] */;
  %784 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 480), float64] */, dtype="float64") /* ty=Tensor[(2, 480), float64] */;
  %785 = reshape(%781, newshape=[104]) /* ty=Tensor[(104), float64] */;
  %786 = reshape(%782, newshape=[65]) /* ty=Tensor[(65), float32] */;
  %787 = reshape(%783, newshape=[325]) /* ty=Tensor[(325), float32] */;
  %788 = reshape(%784, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %789 = @func_4553(%785, %786, %787, %788) /* ty=(Tensor[(13, 4, 2), float64], Tensor[(104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(5, 12, 16), int32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(8, 60), float64], Tensor[(8, 60), float32]) */;
  %790 = cast(%var_7032, dtype="float32") /* ty=Tensor[(308), float32] */;
  %791 = reshape(%790, newshape=[4, 11, 7]) /* ty=Tensor[(4, 11, 7), float32] */;
  %792 = @func_26(%791) /* ty=(Tensor[(4, 11, 7), bool],) */;
  %793 = @func_3175() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */;
  %794 = %793.1;
  %795 = cast(%var_7032, dtype="int8") /* ty=Tensor[(308), int8] */;
  %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(1), int32] */;
  %797 = cast(%794, dtype="int8") /* ty=Tensor[(308), int8] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?), int8] */;
  %799 = multiply(%797, %798) /* ty=Tensor[(308), int8] */;
  %800 = cast(%799, dtype="bool") /* ty=Tensor[(308), bool] */;
  %801 = shape_of(%var_7032, dtype="int32") /* ty=Tensor[(1), int32] */;
  %802 = cast(%var_7032, dtype="bool") /* ty=Tensor[(308), bool] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?), bool] */;
  %804 = @func_4266() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %805 = %789.3;
  %806 = %792.0;
  %807 = less_equal(%802, %803) /* ty=Tensor[(308), bool] */;
  %808 = %804.0;
  (%805, %var_7040, %var_7041, %var_7042, meta[relay.Constant][37] /* ty=Tensor[(2, 480), float64] */, %806, %807, %808)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6680() -> Tensor[(5, 12, 16), float64] {
  @func_6678() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_3030() -> Tensor[(5, 12, 16), float64] {
  @func_1845() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_5622() -> (Tensor[(5, 12, 16), float64],) {
  @func_5620() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_9143() -> (Tensor[(5, 12, 16), int64],) {
  %0 = @func_6994() /* ty=Tensor[(5, 12, 16), int64] */;
  (%0,)
}

def @func_4584() -> (Tensor[(5, 12, 16), float64], Tensor[(1728), int64]) {
  %1 = @func_3175() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */;
  %2 = @func_2545() /* ty=Tensor[(5, 12, 16), float64] */;
  %3 = %1.2;
  (%2, %3)
}

def @func_8896() -> (Tensor[(5, 12, 16), float64],) {
  %4 = @func_6620() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %5 = %4.0;
  (%5,)
}

def @func_2046(%var_2029: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), bool], Tensor[(3, 2, 13), bool], Tensor[(78), float32]) {
  %6 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
  %7 = cast(%var_2029, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%6, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %12 = reshape(%11, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
  %13 = @func_907(%12) /* ty=(Tensor[(3, 2, 13), bool], Tensor[(3, 2, 13), float32]) */;
  %14 = logical_and(%9, %10) /* ty=Tensor[(5, 12, 16), bool] */;
  %15 = %13.0;
  (%14, %15, meta[relay.Constant][0] /* ty=Tensor[(78), float32] */)
}

def @func_8181(%var_8162: Tensor[(637, 2), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], uint16, Tensor[(600), uint16], Tensor[(5, 12, 16), float64], Tensor[(7, 182), float64], Tensor[(637, 2), float64]) {
  %16 = @func_3823() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %17 = cast(meta[relay.Constant][1] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(600), uint16] */, dtype="uint16") /* ty=Tensor[(600), uint16] */;
  %19 = %16.0;
  %20 = cast(%19, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %21 = reshape(%17, newshape=[]) /* ty=uint16 */;
  %22 = reshape(%18, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), uint16] */;
  %23 = reshape(%20, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %24 = @func_3338(%21, %22, %23) /* ty=(Tensor[(15, 10, 4), uint16], Tensor[(5, 12, 16), float64], Tensor[(960), float64]) */;
  %25 = @func_5506() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %26 = cast(%var_8162, dtype="float64") /* ty=Tensor[(637, 2), float64] */;
  %27 = reshape(%26, newshape=[7, 182]) /* ty=Tensor[(7, 182), float64] */;
  %28 = @func_2342(%27) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(7, 14, 13), float64], Tensor[(7, 182), float64], Tensor[(5, 12, 16), float64]) */;
  %29 = %24.1;
  %30 = %25.1;
  %31 = %28.2;
  (%19, %29, meta[relay.Constant][1] /* ty=uint16 */, meta[relay.Constant][2] /* ty=Tensor[(600), uint16] */, %30, %31, %var_8162)
}

def @func_4192(%var_4157: Tensor[(1274), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(7, 14, 13), float64], Tensor[(1274), uint32], Tensor[(5, 12, 16), float64], Tensor[(1274), float32]) {
  %32 = @func_2371() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float32]) */;
  %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %34 = cast(meta[relay.Constant][3] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %35 = reshape(%33, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %36 = reshape(%34, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %37 = @func_1880(%35, %36) /* ty=(Tensor[(7, 14, 13), float64],) */;
  %38 = cast(%var_4157, dtype="uint32") /* ty=Tensor[(1274), uint32] */;
  %39 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(1274), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(1274), float64] */, dtype="uint32") /* ty=Tensor[(1274), uint32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %42 = %32.0;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %44 = reshape(%43, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %45 = @func_2197(%44) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) */;
  %46 = cast(%var_4157, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %47 = acos(%46) /* ty=Tensor[(1274), float64] */;
  %48 = cast(%47, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %49 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  %50 = %37.0;
  %51 = logical_xor(%40, %41) /* ty=Tensor[(1274), uint32] */;
  %52 = %45.0;
  %53 = log10(%48) /* ty=Tensor[(1274), float32] */;
  (%42, %49, %50, %51, %52, %53)
}

def @func_5083(%var_5082: Tensor[(12, 12, 5), float64]) -> (Tensor[(12, 12, 5), uint16], Tensor[(5, 12, 16), float64], Tensor[(12, 12, 5), bool]) {
  %74 = fn (%var_5007: Tensor[(12, 12, 5), float64]) -> (Tensor[(12, 12, 5), uint16], Tensor[(5, 12, 16), float64], Tensor[(12, 12, 5), bool]) {
    %54 = cast(%var_5007, dtype="float64") /* ty=Tensor[(12, 12, 5), float64] */;
    %55 = log(%54) /* ty=Tensor[(12, 12, 5), float64] */;
    %56 = cast(%var_5007, dtype="uint16") /* ty=Tensor[(12, 12, 5), uint16] */;
    %57 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
    %58 = cast(%55, dtype="uint16") /* ty=Tensor[(12, 12, 5), uint16] */;
    %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %60 = cast(%55, dtype="float32") /* ty=Tensor[(12, 12, 5), float32] */;
    %61 = cosh(%60) /* ty=Tensor[(12, 12, 5), float32] */;
    %62 = cast(%61, dtype="bool") /* ty=Tensor[(12, 12, 5), bool] */;
    %63 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
    %64 = cast(%55, dtype="bool") /* ty=Tensor[(12, 12, 5), bool] */;
    %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %66 = not_equal(%64, %65) /* ty=Tensor[(12, 12, 5), bool] */;
    %67 = cast(%55, dtype="bool") /* ty=Tensor[(12, 12, 5), bool] */;
    %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
    %69 = cast(%66, dtype="bool") /* ty=Tensor[(12, 12, 5), bool] */;
    %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %71 = left_shift(%58, %59) /* ty=Tensor[(12, 12, 5), uint16] */;
    %72 = @func_4948() /* ty=Tensor[(5, 12, 16), float64] */;
    %73 = less(%69, %70) /* ty=Tensor[(12, 12, 5), bool] */;
    (%71, %72, %73)
  };
  %74(%var_5082) /* ty=(Tensor[(12, 12, 5), uint16], Tensor[(5, 12, 16), float64], Tensor[(12, 12, 5), bool]) */
}

def @func_1410() -> Tensor[(5, 12, 16), float64] {
  %75 = fn () -> Tensor[(5, 12, 16), float64] {
    @func_1385() /* ty=Tensor[(5, 12, 16), float64] */
  };
  %75() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_4871(%var_4847: Tensor[(9, 10, 5), float64], %var_4848: Tensor[(9, 10, 5), float64]) -> (Tensor[(9, 10, 5), bool],) {
  %76 = cast(%var_4848, dtype="bool") /* ty=Tensor[(9, 10, 5), bool] */;
  %77 = shape_of(%var_4847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%var_4847, dtype="bool") /* ty=Tensor[(9, 10, 5), bool] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %80 = greater_equal(%78, %79) /* ty=Tensor[(9, 10, 5), bool] */;
  (%80,)
}

def @func_4559(%var_4555: Tensor[(104), float64], %var_4556: Tensor[(65), float32], %var_4557: Tensor[(325), float32], %var_4558: Tensor[(5, 12, 16), float64]) -> (Tensor[(13, 4, 2), float64], Tensor[(104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(5, 12, 16), int32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(8, 60), float64], Tensor[(8, 60), float32]) {
  @func_4553(%var_4555, %var_4556, %var_4557, %var_4558) /* ty=(Tensor[(13, 4, 2), float64], Tensor[(104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(5, 12, 16), int32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(8, 60), float64], Tensor[(8, 60), float32]) */
}

def @func_2199(%var_2198: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) {
  %88 = fn (%var_2189: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) {
    %81 = @func_2086() /* ty=Tensor[(5, 12, 16), float64] */;
    %82 = cast(%var_2189, dtype="uint16") /* ty=Tensor[(5, 12, 16), uint16] */;
    %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
    %84 = cast(%81, dtype="uint16") /* ty=Tensor[(5, 12, 16), uint16] */;
    %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %86 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
    %87 = logical_xor(%84, %85) /* ty=Tensor[(5, 12, 16), uint16] */;
    (%86, %87)
  };
  %88(%var_2198) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) */
}

def @func_6280(%var_6279: Tensor[(960), float64]) -> (Tensor[(78), float32], Tensor[(5, 12, 16), bool], Tensor[(960), float64], Tensor[(5, 12, 16), float64]) {
  %96 = fn (%var_6270: Tensor[(960), float64]) -> (Tensor[(78), float32], Tensor[(5, 12, 16), bool], Tensor[(960), float64], Tensor[(5, 12, 16), float64]) {
    %89 = @func_2144() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(3, 2, 13), float32], Tensor[(78), float32]) */;
    %90 = cast(%var_6270, dtype="float64") /* ty=Tensor[(960), float64] */;
    %91 = reshape(%90, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
    %92 = @func_2402(%91) /* ty=(Tensor[(5, 12, 16), bool],) */;
    %93 = %89.5;
    %94 = %92.0;
    %95 = @func_3030() /* ty=Tensor[(5, 12, 16), float64] */;
    (%93, %94, %var_6270, %95)
  };
  %96(%var_6279) /* ty=(Tensor[(78), float32], Tensor[(5, 12, 16), bool], Tensor[(960), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_2963(%var_2962: Tensor[(480), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(480), uint16], Tensor[(5, 16, 6), float64]) {
  %108 = fn (%var_2942: Tensor[(480), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(480), uint16], Tensor[(5, 16, 6), float64]) {
    %97 = cast(%var_2942, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %98 = reshape(%97, newshape=[240, 2]) /* ty=Tensor[(240, 2), uint16] */;
    %99 = @func_2701(%98) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(240, 2), uint16]) */;
    %100 = cast(%var_2942, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %101 = cast(%var_2942, dtype="float64") /* ty=Tensor[(480), float64] */;
    %102 = reshape(%100, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint16] */;
    %103 = reshape(%101, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), float64] */;
    %104 = @func_1522(%102, %103) /* ty=(Tensor[(5, 16, 6), float32], Tensor[(12, 12, 12), float64], Tensor[(1728), int64], Tensor[(7, 10, 11), float64], Tensor[(154, 2), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64]) */;
    %105 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
    %106 = %99.0;
    %107 = %104.6;
    (%105, %106, %var_2942, %107)
  };
  %108(%var_2962) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(480), uint16], Tensor[(5, 16, 6), float64]) */
}

def @func_7220() -> (Tensor[(5, 12, 16), float64],) {
  @func_7218() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_2144() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(3, 2, 13), float32], Tensor[(78), float32]) {
  %109 = @func_1622() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %110 = @func_1622() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %111 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
  %112 = cast(%111, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %113 = cast(meta[relay.Constant][4] /* ty=Tensor[(78), float32] */, dtype="float32") /* ty=Tensor[(78), float32] */;
  %114 = reshape(%113, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
  %115 = @func_907(%114) /* ty=(Tensor[(3, 2, 13), bool], Tensor[(3, 2, 13), float32]) */;
  %116 = %109.0;
  %117 = %110.0;
  %118 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  %119 = cosh(%112) /* ty=Tensor[(5, 12, 16), float64] */;
  %120 = %115.1;
  (%116, %117, %118, %119, %120, meta[relay.Constant][4] /* ty=Tensor[(78), float32] */)
}

def @func_2850(%var_2849: Tensor[(5, 9, 6), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(480), uint16], Tensor[(5, 9, 6), float32]) {
  %135 = fn (%var_2818: Tensor[(5, 9, 6), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(480), uint16], Tensor[(5, 9, 6), float32]) {
    %121 = cast(meta[relay.Constant][5] /* ty=Tensor[(480), uint16] */, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %122 = reshape(%121, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %123 = @func_1673(%122) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(480), uint16], Tensor[(5, 12, 16), float64]) */;
    %124 = cast(%var_2818, dtype="float64") /* ty=Tensor[(5, 9, 6), float64] */;
    %125 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(5, 9, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %126 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 9, 6), float64] */;
    %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %128 = divide(%126, %127) /* ty=Tensor[(5, 9, 6), float64] */;
    %129 = cast(%128, dtype="float32") /* ty=Tensor[(5, 9, 6), float32] */;
    %130 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(5, 9, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 9, 6), float64] */, dtype="float32") /* ty=Tensor[(5, 9, 6), float32] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %133 = %123.3;
    %134 = maximum(%131, %132) /* ty=Tensor[(5, 9, 6), float32] */;
    (%133, meta[relay.Constant][5] /* ty=Tensor[(480), uint16] */, %134)
  };
  %135(%var_2849) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(480), uint16], Tensor[(5, 9, 6), float32]) */
}

def @func_2146() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(3, 2, 13), float32], Tensor[(78), float32]) {
  @func_2144() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(3, 2, 13), float32], Tensor[(78), float32]) */
}

def @func_1639(%var_1638: Tensor[(10, 7, 3), float32]) -> (Tensor[(10, 7, 3), float32],) {
  %138 = fn (%var_1634: Tensor[(10, 7, 3), float32]) -> (Tensor[(10, 7, 3), float32],) {
    %136 = cast(%var_1634, dtype="float32") /* ty=Tensor[(10, 7, 3), float32] */;
    %137 = tan(%136) /* ty=Tensor[(10, 7, 3), float32] */;
    (%137,)
  };
  %138(%var_1638) /* ty=(Tensor[(10, 7, 3), float32],) */
}

def @func_9145() -> (Tensor[(5, 12, 16), int64],) {
  @func_9143() /* ty=(Tensor[(5, 12, 16), int64],) */
}

def @func_4660(%var_4658: Tensor[(5, 12, 16), float64]) -> Tensor[(5, 12, 16), bool] {
  @func_4657(%var_4658) /* ty=Tensor[(5, 12, 16), bool] */
}

def @func_4949() -> Tensor[(5, 12, 16), float64] {
  %139 = fn () -> Tensor[(5, 12, 16), float64] {
    @func_1409() /* ty=Tensor[(5, 12, 16), float64] */
  };
  %139() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_3032() -> Tensor[(5, 12, 16), float64] {
  @func_3030() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_3176() -> (Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) {
  %151 = fn () -> (Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) {
    %140 = @func_2764() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) */;
    %141 = cast(meta[relay.Constant][7] /* ty=Tensor[(1728), int64] */, dtype="int64") /* ty=Tensor[(1728), int64] */;
    %142 = cast(meta[relay.Constant][7] /* ty=Tensor[(1728), int64] */, dtype="int64") /* ty=Tensor[(1728), int64] */;
    %143 = reshape(%141, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), int64] */;
    %144 = reshape(%142, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), int64] */;
    %145 = @func_866(%143, %144) /* ty=(Tensor[(12, 12, 12), int64], Tensor[(12, 12, 12), float32], Tensor[(4, 11, 7), bool], Tensor[(308), float32], Tensor[(12, 12, 12), float64]) */;
    %146 = %140.1;
    %147 = cast(%146, dtype="float32") /* ty=Tensor[(5, 12, 16), float32] */;
    %148 = reshape(%147, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float32] */;
    %149 = %145.3;
    %150 = @func_3017(%148) /* ty=Tensor[(5, 12, 16), int64] */;
    (%146, %149, meta[relay.Constant][7] /* ty=Tensor[(1728), int64] */, %150)
  };
  %151() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */
}

def @func_4268() -> (Tensor[(5, 12, 16), float64],) {
  @func_4266() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_5890() -> (Tensor[(5, 12, 16), int64],) {
  %154 = fn () -> (Tensor[(5, 12, 16), int64],) {
    %152 = @func_3990() /* ty=(Tensor[(5, 12, 16), int64], Tensor[(5, 12, 16), float64]) */;
    %153 = %152.0;
    (%153,)
  };
  %154() /* ty=(Tensor[(5, 12, 16), int64],) */
}

def @func_3215(%var_3212: Tensor[(1, 5, 13), float32], %var_3213: Tensor[(5, 5, 13), float32], %var_3214: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 5, 13), float32], Tensor[(8, 60), uint16], Tensor[(5, 12, 16), int32]) {
  %169 = fn (%var_3177: Tensor[(1, 5, 13), float32], %var_3178: Tensor[(5, 5, 13), float32], %var_3192: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 5, 13), float32], Tensor[(8, 60), uint16], Tensor[(5, 12, 16), int32]) {
    %155 = cast(%var_3177, dtype="float32") /* ty=Tensor[(1, 5, 13), float32] */;
    %156 = cast(%var_3178, dtype="float32") /* ty=Tensor[(5, 5, 13), float32] */;
    %157 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 60), uint16] */, dtype="uint16") /* ty=Tensor[(8, 60), uint16] */;
    %158 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 60), uint16] */, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
    %159 = reshape(%157, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint16] */;
    %160 = reshape(%158, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), float64] */;
    %161 = @func_1522(%159, %160) /* ty=(Tensor[(5, 16, 6), float32], Tensor[(12, 12, 12), float64], Tensor[(1728), int64], Tensor[(7, 10, 11), float64], Tensor[(154, 2), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64]) */;
    %162 = %161.8;
    %163 = cast(%var_3192, dtype="int32") /* ty=Tensor[(5, 12, 16), int32] */;
    %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
    %165 = cast(%162, dtype="int32") /* ty=Tensor[(5, 12, 16), int32] */;
    %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %167 = power(%155, %156) /* ty=Tensor[(5, 5, 13), float32] */;
    %168 = multiply(%165, %166) /* ty=Tensor[(5, 12, 16), int32] */;
    (%167, meta[relay.Constant][8] /* ty=Tensor[(8, 60), uint16] */, %168)
  };
  %169(%var_3212, %var_3213, %var_3214) /* ty=(Tensor[(5, 5, 13), float32], Tensor[(8, 60), uint16], Tensor[(5, 12, 16), int32]) */
}

def @func_2072() -> Tensor[(5, 12, 16), float64] {
  %171 = fn () -> Tensor[(5, 12, 16), float64] {
    %170 = @func_1622() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %170.0
  };
  %171() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_2685(%var_2654: Tensor[(4, 9, 10), float64]) -> (Tensor[(4, 9, 10), float64],) {
  %172 = cast(%var_2654, dtype="float64") /* ty=Tensor[(4, 9, 10), float64] */;
  %173 = cosh(%172) /* ty=Tensor[(4, 9, 10), float64] */;
  %174 = cast(%var_2654, dtype="float64") /* ty=Tensor[(4, 9, 10), float64] */;
  %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%173, dtype="float64") /* ty=Tensor[(4, 9, 10), float64] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %178 = minimum(%176, %177) /* ty=Tensor[(4, 9, 10), float64] */;
  %179 = cast(%178, dtype="float64") /* ty=Tensor[(4, 9, 10), float64] */;
  %180 = log(%179) /* ty=Tensor[(4, 9, 10), float64] */;
  (%180,)
}

def @func_7199() -> Tensor[(5, 12, 16), float64] {
  %181 = @func_5506() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %181.1
}

def @func_3120(%var_3119: Tensor[(1274), float64]) -> (Tensor[(7, 182), float64], Tensor[(1274), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), bool]) {
  %198 = fn (%var_3076: Tensor[(1274), float64]) -> (Tensor[(7, 182), float64], Tensor[(1274), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), bool]) {
    %182 = cast(%var_3076, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %183 = reshape(%182, newshape=[7, 182]) /* ty=Tensor[(7, 182), float64] */;
    %184 = @func_2342(%183) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(7, 14, 13), float64], Tensor[(7, 182), float64], Tensor[(5, 12, 16), float64]) */;
    %185 = cast(%var_3076, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %186 = @func_2714() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %187 = %186.0;
    %188 = cast(%187, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
    %189 = acos(%188) /* ty=Tensor[(5, 12, 16), float64] */;
    %190 = cast(%187, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
    %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
    %192 = cast(%189, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
    %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %194 = %184.2;
    %195 = sin(%185) /* ty=Tensor[(1274), float64] */;
    %196 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
    %197 = less(%192, %193) /* ty=Tensor[(5, 12, 16), bool] */;
    (%194, %195, %196, %197)
  };
  %198(%var_3119) /* ty=(Tensor[(7, 182), float64], Tensor[(1274), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), bool]) */
}

def @func_4831() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %199 = @func_3698() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), int64]) */;
  %200 = @func_3266() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %201 = %199.0;
  %202 = %200.0;
  (%201, %202)
}

def @func_3677() -> (Tensor[(5, 12, 16), float64], Tensor[(78), float32]) {
  %208 = fn () -> (Tensor[(5, 12, 16), float64], Tensor[(78), float32]) {
    %203 = @func_3358() /* ty=Tensor[(5, 12, 16), float64] */;
    %204 = cast(%203, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
    %205 = reshape(%204, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
    %206 = @func_2046(%205) /* ty=(Tensor[(5, 12, 16), bool], Tensor[(3, 2, 13), bool], Tensor[(78), float32]) */;
    %207 = %206.2;
    (%203, %207)
  };
  %208() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(78), float32]) */
}

def @func_3267() -> (Tensor[(5, 12, 16), float64],) {
  %210 = fn () -> (Tensor[(5, 12, 16), float64],) {
    %209 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
    (%209,)
  };
  %210() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_909(%var_908: Tensor[(3, 2, 13), float32]) -> (Tensor[(3, 2, 13), bool], Tensor[(3, 2, 13), float32]) {
  %220 = fn (%var_890: Tensor[(3, 2, 13), float32]) -> (Tensor[(3, 2, 13), bool], Tensor[(3, 2, 13), float32]) {
    %211 = cast(%var_890, dtype="float32") /* ty=Tensor[(3, 2, 13), float32] */;
    %212 = sigmoid(%211) /* ty=Tensor[(3, 2, 13), float32] */;
    %213 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 2, 13), float32] */, dtype="bool") /* ty=Tensor[(3, 2, 13), bool] */;
    %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
    %215 = cast(%212, dtype="bool") /* ty=Tensor[(3, 2, 13), bool] */;
    %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %217 = cast(%212, dtype="float32") /* ty=Tensor[(3, 2, 13), float32] */;
    %218 = less(%215, %216) /* ty=Tensor[(3, 2, 13), bool] */;
    %219 = atanh(%217) /* ty=Tensor[(3, 2, 13), float32] */;
    (%218, %219)
  };
  %220(%var_908) /* ty=(Tensor[(3, 2, 13), bool], Tensor[(3, 2, 13), float32]) */
}

def @func_4553(%var_4471: Tensor[(104), float64], %var_4507: Tensor[(65), float32], %var_4508: Tensor[(325), float32], %var_4513: Tensor[(5, 12, 16), float64]) -> (Tensor[(13, 4, 2), float64], Tensor[(104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(5, 12, 16), int32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(8, 60), float64], Tensor[(8, 60), float32]) {
  %221 = cast(%var_4471, dtype="float64") /* ty=Tensor[(104), float64] */;
  %222 = reshape(%221, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), float64] */;
  %223 = @func_926(%222) /* ty=(Tensor[(13, 4, 2), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) */;
  %224 = @func_2371() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float32]) */;
  %225 = %224.0;
  %226 = cast(%var_4513, dtype="int32") /* ty=Tensor[(5, 12, 16), int32] */;
  %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%225, dtype="int32") /* ty=Tensor[(5, 12, 16), int32] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %230 = @func_4249() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %231 = cast(%var_4507, dtype="float32") /* ty=Tensor[(65), float32] */;
  %232 = cast(%var_4508, dtype="float32") /* ty=Tensor[(325), float32] */;
  %233 = cast(%225, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %234 = reshape(%231, newshape=[1, 5, 13]) /* ty=Tensor[(1, 5, 13), float32] */;
  %235 = reshape(%232, newshape=[5, 5, 13]) /* ty=Tensor[(5, 5, 13), float32] */;
  %236 = reshape(%233, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %237 = @func_3211(%234, %235, %236) /* ty=(Tensor[(5, 5, 13), float32], Tensor[(8, 60), uint16], Tensor[(5, 12, 16), int32]) */;
  %238 = %237.1;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %240 = cos(%239) /* ty=Tensor[(8, 60), float32] */;
  %241 = cast(%240, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %242 = cosh(%241) /* ty=Tensor[(8, 60), float32] */;
  %243 = cast(%240, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(2), int32] */;
  %245 = cast(%242, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %247 = cast(%240, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %248 = %223.0;
  %249 = bitwise_or(%228, %229) /* ty=Tensor[(5, 12, 16), int32] */;
  %250 = %230.0;
  %251 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
  %252 = floor_mod(%245, %246) /* ty=Tensor[(8, 60), float64] */;
  %253 = exp(%247) /* ty=Tensor[(8, 60), float32] */;
  (%248, %var_4471, %var_4507, %var_4508, %249, %250, %251, %252, %253)
}

def @func_7427(%var_7426: Tensor[(7, 7, 7), float64]) -> (Tensor[(7, 14, 13), float64], Tensor[(1274), float64], Tensor[(7, 7, 7), float32]) {
  %264 = fn (%var_7393: Tensor[(7, 7, 7), float64]) -> (Tensor[(7, 14, 13), float64], Tensor[(1274), float64], Tensor[(7, 7, 7), float32]) {
    %254 = cast(meta[relay.Constant][10] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %255 = cast(meta[relay.Constant][10] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %256 = reshape(%254, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
    %257 = reshape(%255, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
    %258 = @func_1880(%256, %257) /* ty=(Tensor[(7, 14, 13), float64],) */;
    %259 = cast(%var_7393, dtype="float64") /* ty=Tensor[(7, 7, 7), float64] */;
    %260 = sigmoid(%259) /* ty=Tensor[(7, 7, 7), float64] */;
    %261 = cast(%260, dtype="float32") /* ty=Tensor[(7, 7, 7), float32] */;
    %262 = %258.0;
    %263 = atanh(%261) /* ty=Tensor[(7, 7, 7), float32] */;
    (%262, meta[relay.Constant][10] /* ty=Tensor[(1274), float64] */, %263)
  };
  %264(%var_7426) /* ty=(Tensor[(7, 14, 13), float64], Tensor[(1274), float64], Tensor[(7, 7, 7), float32]) */
}

def @func_3825() -> (Tensor[(5, 12, 16), float64],) {
  @func_3823() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_3640() -> (Tensor[(5, 12, 16), float64],) {
  %265 = @func_3266() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %266 = %265.0;
  (%266,)
}

def @func_1385() -> Tensor[(5, 12, 16), float64] {
  %267 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 12, 16), float64] */, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  log(%267) /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_7506() -> Tensor[(5, 12, 16), int64] {
  %268 = @func_6761() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %269 = %268.0;
  %270 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 12, 16), float64] */, dtype="int64") /* ty=Tensor[(5, 12, 16), int64] */;
  %271 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%269, dtype="int64") /* ty=Tensor[(5, 12, 16), int64] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  right_shift(%272, %273) /* ty=Tensor[(5, 12, 16), int64] */
}

def @func_4935() -> (Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), bool], Tensor[(5, 12, 16), float64]) {
  %282 = fn () -> (Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), bool], Tensor[(5, 12, 16), float64]) {
    %274 = @func_2371() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float32]) */;
    %275 = %274.1;
    %276 = cast(%275, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
    %277 = reshape(%276, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
    %278 = @func_3856(%277) /* ty=(Tensor[(5, 12, 16), bool],) */;
    %279 = @func_3715() /* ty=Tensor[(5, 12, 16), float64] */;
    %280 = %278.0;
    %281 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
    (%275, %279, %280, %281)
  };
  %282() /* ty=(Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), bool], Tensor[(5, 12, 16), float64]) */
}

def @func_7731(%var_7721: Tensor[(60, 12), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(12, 12, 5), bool], Tensor[(60, 12), float64]) {
  %283 = @func_5828() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %284 = cast(%var_7721, dtype="float64") /* ty=Tensor[(60, 12), float64] */;
  %285 = reshape(%284, newshape=[12, 12, 5]) /* ty=Tensor[(12, 12, 5), float64] */;
  %286 = @func_5081(%285) /* ty=(Tensor[(12, 12, 5), uint16], Tensor[(5, 12, 16), float64], Tensor[(12, 12, 5), bool]) */;
  %287 = %283.0;
  %288 = %286.2;
  (%287, %288, %var_7721)
}

def @func_4712(%var_4708: Tensor[(270), float64], %var_4709: Tensor[(104), float64], %var_4710: Tensor[(325), float32], %var_4711: Tensor[(960), float64]) -> (Tensor[(1728), int64], Tensor[(78), float32], Tensor[(270), float64], Tensor[(6, 3), uint32], Tensor[(270), float64], Tensor[(5, 12, 16), float64], Tensor[(104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(960), float64]) {
  @func_4706(%var_4708, %var_4709, %var_4710, %var_4711) /* ty=(Tensor[(1728), int64], Tensor[(78), float32], Tensor[(270), float64], Tensor[(6, 3), uint32], Tensor[(270), float64], Tensor[(5, 12, 16), float64], Tensor[(104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(960), float64]) */
}

def @func_7974(%var_7962: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), float64],) {
  %289 = @func_6036() /* ty=Tensor[(5, 12, 16), float64] */;
  %290 = cast(%var_7962, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %294 = mod(%292, %293) /* ty=Tensor[(5, 12, 16), float64] */;
  (%294,)
}

def @func_7508() -> Tensor[(5, 12, 16), int64] {
  @func_7506() /* ty=Tensor[(5, 12, 16), int64] */
}

def @func_1675(%var_1674: Tensor[(480), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(480), uint16], Tensor[(5, 12, 16), float64]) {
  %303 = fn (%var_1654: Tensor[(480), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(480), uint16], Tensor[(5, 12, 16), float64]) {
    %295 = cast(%var_1654, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %296 = cast(%var_1654, dtype="float64") /* ty=Tensor[(480), float64] */;
    %297 = reshape(%295, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), uint16] */;
    %298 = reshape(%296, newshape=[5, 16, 6]) /* ty=Tensor[(5, 16, 6), float64] */;
    %299 = @func_1522(%297, %298) /* ty=(Tensor[(5, 16, 6), float32], Tensor[(12, 12, 12), float64], Tensor[(1728), int64], Tensor[(7, 10, 11), float64], Tensor[(154, 2), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64]) */;
    %300 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
    %301 = %299.10;
    %302 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
    (%300, %301, %var_1654, %302)
  };
  %303(%var_1674) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(480), uint16], Tensor[(5, 12, 16), float64]) */
}

def @func_5378(%var_5372: Tensor[(3, 10, 1), int32], %var_5373: Tensor[(3, 10, 15), int32]) -> (Tensor[(3, 10, 15), bool],) {
  %304 = cast(%var_5372, dtype="bool") /* ty=Tensor[(3, 10, 1), bool] */;
  %305 = cast(%var_5373, dtype="bool") /* ty=Tensor[(3, 10, 15), bool] */;
  %306 = less(%304, %305) /* ty=Tensor[(3, 10, 15), bool] */;
  (%306,)
}

def @func_6551() -> (Tensor[(5, 12, 16), float64],) {
  %307 = @func_6169() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %308 = %307.1;
  (%308,)
}

def @func_6678() -> Tensor[(5, 12, 16), float64] {
  %309 = @func_3266() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %309.0
}

def @func_1346(%var_1344: Tensor[(1, 7, 2), float32], %var_1345: Tensor[(11, 7, 2), float32]) -> (Tensor[(11, 7, 2), float32], Tensor[(11, 7, 2), float32], Tensor[(4, 11, 7), bool], Tensor[(7, 44), float32]) {
  %319 = fn (%var_1324: Tensor[(1, 7, 2), float32], %var_1325: Tensor[(11, 7, 2), float32]) -> (Tensor[(11, 7, 2), float32], Tensor[(11, 7, 2), float32], Tensor[(4, 11, 7), bool], Tensor[(7, 44), float32]) {
    %310 = cast(%var_1324, dtype="float32") /* ty=Tensor[(1, 7, 2), float32] */;
    %311 = cast(%var_1325, dtype="float32") /* ty=Tensor[(11, 7, 2), float32] */;
    %312 = cast(%var_1325, dtype="float32") /* ty=Tensor[(11, 7, 2), float32] */;
    %313 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 44), float32] */, dtype="float32") /* ty=Tensor[(7, 44), float32] */;
    %314 = reshape(%313, newshape=[308]) /* ty=Tensor[(308), float32] */;
    %315 = @func_644(%314) /* ty=(Tensor[(7, 10, 11), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) */;
    %316 = minimum(%310, %311) /* ty=Tensor[(11, 7, 2), float32] */;
    %317 = tan(%312) /* ty=Tensor[(11, 7, 2), float32] */;
    %318 = %315.1;
    (%316, %317, %318, meta[relay.Constant][13] /* ty=Tensor[(7, 44), float32] */)
  };
  %319(%var_1344, %var_1345) /* ty=(Tensor[(11, 7, 2), float32], Tensor[(11, 7, 2), float32], Tensor[(4, 11, 7), bool], Tensor[(7, 44), float32]) */
}

def @func_7866() -> Tensor[(5, 12, 16), float64] {
  %321 = fn () -> Tensor[(5, 12, 16), float64] {
    %320 = @func_6620() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %320.0
  };
  %321() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_7799() -> (Tensor[(5, 12, 16), float64],) {
  %322 = @func_3640() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %323 = %322.0;
  %324 = cast(%323, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %325 = cos(%324) /* ty=Tensor[(5, 12, 16), float64] */;
  (%325,)
}

def @func_3642() -> (Tensor[(5, 12, 16), float64],) {
  @func_3640() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_26(%var_15: Tensor[(4, 11, 7), float32]) -> (Tensor[(4, 11, 7), bool],) {
  %326 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 11, 7), float32] */, dtype="bool") /* ty=Tensor[(4, 11, 7), bool] */;
  %327 = shape_of(%var_15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%var_15, dtype="bool") /* ty=Tensor[(4, 11, 7), bool] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %330 = less(%328, %329) /* ty=Tensor[(4, 11, 7), bool] */;
  (%330,)
}

def @func_2782(%var_2781: Tensor[(6, 6, 9), uint64]) -> (Tensor[(6, 6, 9), bool],) {
  %336 = fn (%var_2771: Tensor[(6, 6, 9), uint64]) -> (Tensor[(6, 6, 9), bool],) {
    %331 = cast(%var_2771, dtype="bool") /* ty=Tensor[(6, 6, 9), bool] */;
    %332 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(6, 6, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %333 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 6, 9), uint64] */, dtype="bool") /* ty=Tensor[(6, 6, 9), bool] */;
    %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %335 = less(%333, %334) /* ty=Tensor[(6, 6, 9), bool] */;
    (%335,)
  };
  %336(%var_2781) /* ty=(Tensor[(6, 6, 9), bool],) */
}

def @func_8677() -> (Tensor[(5, 12, 16), float64],) {
  %337 = @func_6666() /* ty=Tensor[(5, 12, 16), float64] */;
  (%337,)
}

def @func_8879() -> (Tensor[(5, 12, 16), float64],) {
  @func_8877() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_8995(%var_8993: Tensor[(1274), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(5, 12, 16), float64]) {
  @func_8992(%var_8993) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_6171() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  @func_6169() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_7074() -> Tensor[(308), float32] {
  %338 = @func_3175() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */;
  %338.1
}

def @func_5208(%var_5207: Tensor[(1274), float64]) -> (Tensor[(5, 12, 16), bool], Tensor[(1274), uint32], Tensor[(1274), float64]) {
  %345 = fn (%var_5189: Tensor[(1274), float64]) -> (Tensor[(5, 12, 16), bool], Tensor[(1274), uint32], Tensor[(1274), float64]) {
    %339 = @func_4934() /* ty=(Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), bool], Tensor[(5, 12, 16), float64]) */;
    %340 = cast(%var_5189, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %341 = reshape(%340, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
    %342 = @func_4192(%341) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(7, 14, 13), float64], Tensor[(1274), uint32], Tensor[(5, 12, 16), float64], Tensor[(1274), float32]) */;
    %343 = %339.2;
    %344 = %342.3;
    (%343, %344, %var_5189)
  };
  %345(%var_5207) /* ty=(Tensor[(5, 12, 16), bool], Tensor[(1274), uint32], Tensor[(1274), float64]) */
}

def @func_3992() -> (Tensor[(5, 12, 16), int64], Tensor[(5, 12, 16), float64]) {
  @func_3990() /* ty=(Tensor[(5, 12, 16), int64], Tensor[(5, 12, 16), float64]) */
}

def @func_3990() -> (Tensor[(5, 12, 16), int64], Tensor[(5, 12, 16), float64]) {
  %346 = @func_3175() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */;
  %347 = %346.3;
  %348 = @func_2086() /* ty=Tensor[(5, 12, 16), float64] */;
  (%347, %348)
}

def @func_8679() -> (Tensor[(5, 12, 16), float64],) {
  @func_8677() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_2997(%var_2996: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), uint64], Tensor[(5, 12, 16), float64]) {
  %356 = fn (%var_2985: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), uint64], Tensor[(5, 12, 16), float64]) {
    %349 = @func_2545() /* ty=Tensor[(5, 12, 16), float64] */;
    %350 = cast(%var_2985, dtype="uint64") /* ty=Tensor[(5, 12, 16), uint64] */;
    %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
    %352 = cast(%349, dtype="uint64") /* ty=Tensor[(5, 12, 16), uint64] */;
    %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %354 = bitwise_and(%352, %353) /* ty=Tensor[(5, 12, 16), uint64] */;
    %355 = @func_1936() /* ty=Tensor[(5, 12, 16), float64] */;
    (%354, %355)
  };
  %356(%var_2996) /* ty=(Tensor[(5, 12, 16), uint64], Tensor[(5, 12, 16), float64]) */
}

def @func_8590(%var_8588: Tensor[(14, 11, 6), float32]) -> (Tensor[(14, 11, 6), bool],) {
  @func_8587(%var_8588) /* ty=(Tensor[(14, 11, 6), bool],) */
}

def @func_5681(%var_5679: Tensor[(8, 13, 12), uint8], %var_5680: Tensor[(8, 13, 12), uint8]) -> (Tensor[(8, 13, 12), bool],) {
  %367 = fn (%var_5652: Tensor[(8, 13, 12), uint8], %var_5653: Tensor[(8, 13, 12), uint8]) -> (Tensor[(8, 13, 12), bool],) {
    %357 = cast(%var_5653, dtype="uint8") /* ty=Tensor[(8, 13, 12), uint8] */;
    %358 = shape_of(%var_5652, dtype="int32") /* ty=Tensor[(3), int32] */;
    %359 = cast(%var_5652, dtype="uint8") /* ty=Tensor[(8, 13, 12), uint8] */;
    %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %361 = multiply(%359, %360) /* ty=Tensor[(8, 13, 12), uint8] */;
    %362 = cast(%361, dtype="bool") /* ty=Tensor[(8, 13, 12), bool] */;
    %363 = shape_of(%var_5653, dtype="int32") /* ty=Tensor[(3), int32] */;
    %364 = cast(%var_5653, dtype="bool") /* ty=Tensor[(8, 13, 12), bool] */;
    %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %366 = equal(%364, %365) /* ty=Tensor[(8, 13, 12), bool] */;
    (%366,)
  };
  %367(%var_5679, %var_5680) /* ty=(Tensor[(8, 13, 12), bool],) */
}

def @func_8063(%var_8058: Tensor[(18), uint32]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 6, 1), float64], Tensor[(18), uint32], Tensor[(270), float64]) {
  %368 = @func_5128() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %369 = cast(%var_8058, dtype="uint32") /* ty=Tensor[(18), uint32] */;
  %370 = cast(meta[relay.Constant][16] /* ty=Tensor[(270), float64] */, dtype="float64") /* ty=Tensor[(270), float64] */;
  %371 = reshape(%369, newshape=[3, 2, 3]) /* ty=Tensor[(3, 2, 3), uint32] */;
  %372 = reshape(%370, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %373 = @func_4320(%371, %372) /* ty=(Tensor[(3, 2, 3), uint32], Tensor[(5, 6, 1), float64], Tensor[(270), float64]) */;
  %374 = %368.0;
  %375 = %373.1;
  (%374, %375, %var_8058, meta[relay.Constant][16] /* ty=Tensor[(270), float64] */)
}

def @func_9007() -> (Tensor[(9, 11, 13), bool],) {
  @func_9005() /* ty=(Tensor[(9, 11, 13), bool],) */
}

def @func_5908() -> (Tensor[(5, 12, 16), float64],) {
  %377 = fn () -> (Tensor[(5, 12, 16), float64],) {
    %376 = @func_5439() /* ty=Tensor[(5, 12, 16), float64] */;
    (%376,)
  };
  %377() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_7878() -> (Tensor[(5, 12, 16), float64],) {
  %378 = @func_5506() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %379 = %378.0;
  (%379,)
}

def @func_8217() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %380 = @func_1385() /* ty=Tensor[(5, 12, 16), float64] */;
  %381 = @func_5342() /* ty=Tensor[(5, 12, 16), float64] */;
  (%380, %381)
}

def @func_9214() -> (Tensor[(5, 12, 16), float64],) {
  @func_9212() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_4793(%var_4791: float32, %var_4792: Tensor[(270, 1), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(308), float32], Tensor[(2, 52), float64], Tensor[(8, 8, 5), float32], float32, Tensor[(35, 6), float32], Tensor[(270, 1), float64], Tensor[(5, 12, 16), bool]) {
  %398 = fn (%var_4751: float32, %var_4755: Tensor[(270, 1), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(308), float32], Tensor[(2, 52), float64], Tensor[(8, 8, 5), float32], float32, Tensor[(35, 6), float32], Tensor[(270, 1), float64], Tensor[(5, 12, 16), bool]) {
    %382 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 52), float64] */, dtype="float64") /* ty=Tensor[(2, 52), float64] */;
    %383 = reshape(%382, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), float64] */;
    %384 = @func_926(%383) /* ty=(Tensor[(13, 4, 2), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) */;
    %385 = cast(%var_4751, dtype="float32") /* ty=float32 */;
    %386 = reshape(%385, newshape=[]) /* ty=float32 */;
    %387 = cast(%var_4755, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
    %388 = reshape(%387, newshape=[270]) /* ty=Tensor[(270), float64] */;
    %389 = @func_3316(%388) /* ty=(Tensor[(5, 6, 1), float64], Tensor[(35, 6), float32], Tensor[(270), float64]) */;
    %390 = @func_1936() /* ty=Tensor[(5, 12, 16), float64] */;
    %391 = cast(%390, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
    %392 = reshape(%391, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
    %393 = @func_3856(%392) /* ty=(Tensor[(5, 12, 16), bool],) */;
    %394 = %384.2;
    %395 = @func_4355(%386) /* ty=Tensor[(8, 8, 5), float32] */;
    %396 = %389.1;
    %397 = %393.0;
    (%390, %394, meta[relay.Constant][17] /* ty=Tensor[(2, 52), float64] */, %395, %var_4751, %396, %var_4755, %397)
  };
  %398(%var_4791, %var_4792) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(308), float32], Tensor[(2, 52), float64], Tensor[(8, 8, 5), float32], float32, Tensor[(35, 6), float32], Tensor[(270, 1), float64], Tensor[(5, 12, 16), bool]) */
}

def @func_4641() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  @func_4639() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_1526(%var_1524: Tensor[(5, 16, 6), uint16], %var_1525: Tensor[(5, 16, 6), float64]) -> (Tensor[(5, 16, 6), float32], Tensor[(12, 12, 12), float64], Tensor[(1728), int64], Tensor[(7, 10, 11), float64], Tensor[(154, 2), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64]) {
  @func_1522(%var_1524, %var_1525) /* ty=(Tensor[(5, 16, 6), float32], Tensor[(12, 12, 12), float64], Tensor[(1728), int64], Tensor[(7, 10, 11), float64], Tensor[(154, 2), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64]) */
}

def @func_5343() -> Tensor[(5, 12, 16), float64] {
  %400 = fn () -> Tensor[(5, 12, 16), float64] {
    %399 = @func_4249() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %399.0
  };
  %400() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_7294() -> (Tensor[(5, 12, 16), int64],) {
  %403 = fn () -> (Tensor[(5, 12, 16), int64],) {
    %401 = @func_5889() /* ty=(Tensor[(5, 12, 16), int64],) */;
    %402 = %401.0;
    (%402,)
  };
  %403() /* ty=(Tensor[(5, 12, 16), int64],) */
}

def @func_3858(%var_3857: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), bool],) {
  %411 = fn (%var_3840: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), bool],) {
    %404 = @func_3676() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(78), float32]) */;
    %405 = %404.0;
    %406 = cast(%var_3840, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
    %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
    %408 = cast(%405, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
    %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %410 = logical_or(%408, %409) /* ty=Tensor[(5, 12, 16), bool] */;
    (%410,)
  };
  %411(%var_3857) /* ty=(Tensor[(5, 12, 16), bool],) */
}

def @main(%var_9300: Tensor[(15, 8, 5), int16]) -> Tensor[(15, 8, 5), int16] {
  %412 = cast(%var_9300, dtype="int16") /* ty=Tensor[(15, 8, 5), int16] */;
  %413 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(15, 8, 5), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(meta[relay.Constant][18] /* ty=Tensor[(15, 8, 5), int16] */, dtype="int16") /* ty=Tensor[(15, 8, 5), int16] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  maximum(%414, %415) /* ty=Tensor[(15, 8, 5), int16] */
}

def @func_8528(%var_8527: Tensor[(5, 12, 16), int64]) -> (Tensor[(5, 12, 16), float64],) {
  %422 = fn (%var_8512: Tensor[(5, 12, 16), int64]) -> (Tensor[(5, 12, 16), float64],) {
    %416 = @func_7506() /* ty=Tensor[(5, 12, 16), int64] */;
    %417 = cast(%var_8512, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
    %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
    %419 = cast(%416, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
    %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %421 = subtract(%419, %420) /* ty=Tensor[(5, 12, 16), float64] */;
    (%421,)
  };
  %422(%var_8527) /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_7677(%var_7675: Tensor[(1620), float32], %var_7676: Tensor[(480), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(15, 9, 12), float32], Tensor[(1620), float32], Tensor[(240, 2), uint16], Tensor[(480), uint16]) {
  %435 = fn (%var_7660: Tensor[(1620), float32], %var_7670: Tensor[(480), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(15, 9, 12), float32], Tensor[(1620), float32], Tensor[(240, 2), uint16], Tensor[(480), uint16]) {
    %423 = @func_3698() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), int64]) */;
    %424 = %423.0;
    %425 = cast(%424, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
    %426 = cast(%var_7660, dtype="float32") /* ty=Tensor[(1620), float32] */;
    %427 = reshape(%426, newshape=[15, 9, 12]) /* ty=Tensor[(15, 9, 12), float32] */;
    %428 = @func_6779(%427) /* ty=(Tensor[(15, 9, 12), float32],) */;
    %429 = cast(%var_7670, dtype="uint16") /* ty=Tensor[(480), uint16] */;
    %430 = reshape(%429, newshape=[240, 2]) /* ty=Tensor[(240, 2), uint16] */;
    %431 = @func_2701(%430) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(240, 2), uint16]) */;
    %432 = sigmoid(%425) /* ty=Tensor[(5, 12, 16), float64] */;
    %433 = %428.0;
    %434 = %431.2;
    (%432, %433, %var_7660, %434, %var_7670)
  };
  %435(%var_7675, %var_7676) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(15, 9, 12), float32], Tensor[(1620), float32], Tensor[(240, 2), uint16], Tensor[(480), uint16]) */
}

def @func_7392() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  @func_7390() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_7932() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %441 = fn () -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
    %436 = @func_6551() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %437 = %436.0;
    %438 = cast(%437, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
    %439 = acosh(%438) /* ty=Tensor[(5, 12, 16), float64] */;
    %440 = @func_4948() /* ty=Tensor[(5, 12, 16), float64] */;
    (%439, %440)
  };
  %441() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_29(%var_27: Tensor[(4, 11, 7), float32]) -> (Tensor[(4, 11, 7), bool],) {
  @func_26(%var_27) /* ty=(Tensor[(4, 11, 7), bool],) */
}

def @func_2465() -> (Tensor[(4, 11, 7), bool], Tensor[(104), float64], Tensor[(12, 9, 10), bool], Tensor[(12, 9, 10), float64]) {
  %458 = fn () -> (Tensor[(4, 11, 7), bool], Tensor[(104), float64], Tensor[(12, 9, 10), bool], Tensor[(12, 9, 10), float64]) {
    %442 = cast(meta[relay.Constant][19] /* ty=Tensor[(104), float64] */, dtype="float64") /* ty=Tensor[(104), float64] */;
    %443 = reshape(%442, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), float64] */;
    %444 = @func_926(%443) /* ty=(Tensor[(13, 4, 2), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) */;
    %445 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 9, 10), bool] */, dtype="float32") /* ty=Tensor[(12, 9, 10), float32] */;
    %446 = asinh(%445) /* ty=Tensor[(12, 9, 10), float32] */;
    %447 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %448 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 9, 10), bool] */, dtype="bool") /* ty=Tensor[(12, 9, 10), bool] */;
    %449 = logical_or(%447, %448) /* ty=Tensor[(12, 9, 10), bool] */;
    %450 = cast(%449, dtype="bool") /* ty=Tensor[(12, 9, 10), bool] */;
    %451 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
    %452 = cast(%446, dtype="bool") /* ty=Tensor[(12, 9, 10), bool] */;
    %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %454 = cast(%446, dtype="float64") /* ty=Tensor[(12, 9, 10), float64] */;
    %455 = %444.1;
    %456 = greater_equal(%452, %453) /* ty=Tensor[(12, 9, 10), bool] */;
    %457 = sqrt(%454) /* ty=Tensor[(12, 9, 10), float64] */;
    (%455, meta[relay.Constant][19] /* ty=Tensor[(104), float64] */, %456, %457)
  };
  %458() /* ty=(Tensor[(4, 11, 7), bool], Tensor[(104), float64], Tensor[(12, 9, 10), bool], Tensor[(12, 9, 10), float64]) */
}

def @func_3359() -> Tensor[(5, 12, 16), float64] {
  %459 = fn () -> Tensor[(5, 12, 16), float64] {
    @func_1845() /* ty=Tensor[(5, 12, 16), float64] */
  };
  %459() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_6915(%var_6913: Tensor[(15, 9, 13), uint16], %var_6914: Tensor[(15, 9, 13), uint16]) -> Tensor[(15, 9, 13), int16] {
  %471 = fn (%var_6892: Tensor[(15, 9, 13), uint16], %var_6893: Tensor[(15, 9, 13), uint16]) -> Tensor[(15, 9, 13), int16] {
    %460 = cast(%var_6893, dtype="uint16") /* ty=Tensor[(15, 9, 13), uint16] */;
    %461 = shape_of(%var_6892, dtype="int32") /* ty=Tensor[(3), int32] */;
    %462 = cast(%var_6892, dtype="uint16") /* ty=Tensor[(15, 9, 13), uint16] */;
    %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %464 = bitwise_and(%462, %463) /* ty=Tensor[(15, 9, 13), uint16] */;
    %465 = cast(%464, dtype="float32") /* ty=Tensor[(15, 9, 13), float32] */;
    %466 = atanh(%465) /* ty=Tensor[(15, 9, 13), float32] */;
    %467 = cast(%var_6892, dtype="int16") /* ty=Tensor[(15, 9, 13), int16] */;
    %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
    %469 = cast(%466, dtype="int16") /* ty=Tensor[(15, 9, 13), int16] */;
    %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    right_shift(%469, %470) /* ty=Tensor[(15, 9, 13), int16] */
  };
  %471(%var_6913, %var_6914) /* ty=Tensor[(15, 9, 13), int16] */
}

def @func_7390() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %472 = @func_4831() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %473 = @func_3715() /* ty=Tensor[(5, 12, 16), float64] */;
  %474 = %472.0;
  (%473, %474)
}

def @func_8567() -> Tensor[(5, 12, 16), int64] {
  @func_7506() /* ty=Tensor[(5, 12, 16), int64] */
}

def @func_869(%var_867: Tensor[(12, 12, 12), int64], %var_868: Tensor[(12, 12, 12), int64]) -> (Tensor[(12, 12, 12), int64], Tensor[(12, 12, 12), float32], Tensor[(4, 11, 7), bool], Tensor[(308), float32], Tensor[(12, 12, 12), float64]) {
  %488 = fn (%var_825: Tensor[(12, 12, 12), int64], %var_826: Tensor[(12, 12, 12), int64]) -> (Tensor[(12, 12, 12), int64], Tensor[(12, 12, 12), float32], Tensor[(4, 11, 7), bool], Tensor[(308), float32], Tensor[(12, 12, 12), float64]) {
    %475 = cast(%var_826, dtype="int64") /* ty=Tensor[(12, 12, 12), int64] */;
    %476 = shape_of(%var_825, dtype="int32") /* ty=Tensor[(3), int32] */;
    %477 = cast(%var_825, dtype="int64") /* ty=Tensor[(12, 12, 12), int64] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %479 = cast(%var_825, dtype="float32") /* ty=Tensor[(12, 12, 12), float32] */;
    %480 = cast(meta[relay.Constant][21] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
    %481 = reshape(%480, newshape=[4, 11, 7]) /* ty=Tensor[(4, 11, 7), float32] */;
    %482 = @func_26(%481) /* ty=(Tensor[(4, 11, 7), bool],) */;
    %483 = cast(%var_826, dtype="float64") /* ty=Tensor[(12, 12, 12), float64] */;
    %484 = maximum(%477, %478) /* ty=Tensor[(12, 12, 12), int64] */;
    %485 = cosh(%479) /* ty=Tensor[(12, 12, 12), float32] */;
    %486 = %482.0;
    %487 = sigmoid(%483) /* ty=Tensor[(12, 12, 12), float64] */;
    (%484, %485, %486, meta[relay.Constant][21] /* ty=Tensor[(308), float32] */, %487)
  };
  %488(%var_867, %var_868) /* ty=(Tensor[(12, 12, 12), int64], Tensor[(12, 12, 12), float32], Tensor[(4, 11, 7), bool], Tensor[(308), float32], Tensor[(12, 12, 12), float64]) */
}

def @func_2244(%var_2243: Tensor[(6, 5, 9), float64]) -> (Tensor[(6, 5, 9), float64], Tensor[(6, 5, 9), float64], Tensor[(10, 7, 3), float32], Tensor[(35, 6), float32]) {
  %497 = fn (%var_2210: Tensor[(6, 5, 9), float64]) -> (Tensor[(6, 5, 9), float64], Tensor[(6, 5, 9), float64], Tensor[(10, 7, 3), float32], Tensor[(35, 6), float32]) {
    %489 = cast(%var_2210, dtype="float64") /* ty=Tensor[(6, 5, 9), float64] */;
    %490 = cast(%var_2210, dtype="float64") /* ty=Tensor[(6, 5, 9), float64] */;
    %491 = cast(meta[relay.Constant][22] /* ty=Tensor[(35, 6), float32] */, dtype="float32") /* ty=Tensor[(35, 6), float32] */;
    %492 = reshape(%491, newshape=[10, 7, 3]) /* ty=Tensor[(10, 7, 3), float32] */;
    %493 = @func_1637(%492) /* ty=(Tensor[(10, 7, 3), float32],) */;
    %494 = log(%489) /* ty=Tensor[(6, 5, 9), float64] */;
    %495 = tan(%490) /* ty=Tensor[(6, 5, 9), float64] */;
    %496 = %493.0;
    (%494, %495, %496, meta[relay.Constant][22] /* ty=Tensor[(35, 6), float32] */)
  };
  %497(%var_2243) /* ty=(Tensor[(6, 5, 9), float64], Tensor[(6, 5, 9), float64], Tensor[(10, 7, 3), float32], Tensor[(35, 6), float32]) */
}

def @func_8928() -> Tensor[(5, 12, 16), int64] {
  @func_8926() /* ty=Tensor[(5, 12, 16), int64] */
}

def @func_1884(%var_1882: Tensor[(7, 14, 13), float64], %var_1883: Tensor[(7, 14, 13), float64]) -> (Tensor[(7, 14, 13), float64],) {
  @func_1880(%var_1882, %var_1883) /* ty=(Tensor[(7, 14, 13), float64],) */
}

def @func_2688(%var_2686: Tensor[(4, 9, 10), float64]) -> (Tensor[(4, 9, 10), float64],) {
  @func_2685(%var_2686) /* ty=(Tensor[(4, 9, 10), float64],) */
}

def @func_3226() -> (Tensor[(5, 12, 16), float64],) {
  %498 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  (%498,)
}

def @func_1428() -> Tensor[(5, 12, 16), float64] {
  %499 = fn () -> Tensor[(5, 12, 16), float64] {
    @func_1409() /* ty=Tensor[(5, 12, 16), float64] */
  };
  %499() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_4833() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  @func_4831() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_3699() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), int64]) {
  %503 = fn () -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), int64]) {
    %500 = @func_3175() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */;
    %501 = @func_1385() /* ty=Tensor[(5, 12, 16), float64] */;
    %502 = %500.3;
    (%501, %502)
  };
  %503() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), int64]) */
}

def @func_6666() -> Tensor[(5, 12, 16), float64] {
  %504 = @func_5727() /* ty=(Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %504.3
}

def @func_1880(%var_1870: Tensor[(7, 14, 13), float64], %var_1871: Tensor[(7, 14, 13), float64]) -> (Tensor[(7, 14, 13), float64],) {
  %505 = cast(%var_1871, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %506 = shape_of(%var_1870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%var_1870, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %509 = floor_divide(%507, %508) /* ty=Tensor[(7, 14, 13), float64] */;
  (%509,)
}

def @func_5620() -> (Tensor[(5, 12, 16), float64],) {
  %510 = @func_3497() /* ty=Tensor[(5, 12, 16), float64] */;
  (%510,)
}

def @func_647(%var_645: Tensor[(308), float32]) -> (Tensor[(7, 10, 11), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) {
  @func_644(%var_645) /* ty=(Tensor[(7, 10, 11), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) */
}

def @func_2087() -> Tensor[(5, 12, 16), float64] {
  %511 = fn () -> Tensor[(5, 12, 16), float64] {
    @func_1936() /* ty=Tensor[(5, 12, 16), float64] */
  };
  %511() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_8951() -> Tensor[(5, 12, 16), float64] {
  @func_8949() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_929(%var_927: Tensor[(13, 4, 2), float64]) -> (Tensor[(13, 4, 2), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) {
  @func_926(%var_927) /* ty=(Tensor[(13, 4, 2), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) */
}

def @func_8196(%var_8195: Tensor[(13, 12, 6), float32]) -> Tensor[(13, 12, 6), float32] {
  %513 = fn (%var_8189: Tensor[(13, 12, 6), float32]) -> Tensor[(13, 12, 6), float32] {
    %512 = cast(%var_8189, dtype="float32") /* ty=Tensor[(13, 12, 6), float32] */;
    atanh(%512) /* ty=Tensor[(13, 12, 6), float32] */
  };
  %513(%var_8195) /* ty=Tensor[(13, 12, 6), float32] */
}

def @func_8475(%var_8473: Tensor[(1, 1755), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(15, 9, 13), int16], Tensor[(1, 1755), uint16], Tensor[(5, 12, 16), float64]) {
  @func_8472(%var_8473) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(15, 9, 13), int16], Tensor[(1, 1755), uint16], Tensor[(5, 12, 16), float64]) */
}

def @func_2371() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float32]) {
  %514 = @func_1622() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %515 = %514.0;
  %516 = cast(%515, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %517 = cast(%515, dtype="float32") /* ty=Tensor[(5, 12, 16), float32] */;
  %518 = atanh(%516) /* ty=Tensor[(5, 12, 16), float64] */;
  %519 = sqrt(%517) /* ty=Tensor[(5, 12, 16), float32] */;
  (%518, %519)
}

def @func_6996() -> Tensor[(5, 12, 16), int64] {
  @func_6994() /* ty=Tensor[(5, 12, 16), int64] */
}

def @func_5129() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %524 = fn () -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
    %520 = @func_4266() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %521 = @func_3497() /* ty=Tensor[(5, 12, 16), float64] */;
    %522 = %520.0;
    %523 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
    (%521, %522, %523)
  };
  %524() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_5507() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %530 = fn () -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
    %525 = @func_4249() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %526 = @func_3640() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %527 = %525.0;
    %528 = @func_5439() /* ty=Tensor[(5, 12, 16), float64] */;
    %529 = %526.0;
    (%527, %528, %529)
  };
  %530() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_6768() -> Tensor[(1728), int64] {
  %532 = fn () -> Tensor[(1728), int64] {
    %531 = @func_3175() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */;
    %531.2
  };
  %532() /* ty=Tensor[(1728), int64] */
}

def @func_9120() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint32]) {
  @func_9118() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint32]) */
}

def @func_2764() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) {
  %533 = @func_2071() /* ty=Tensor[(5, 12, 16), float64] */;
  %534 = cast(%533, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %535 = reshape(%534, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %536 = @func_2197(%535) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) */;
  %537 = %536.1;
  (%533, %537)
}

def @func_8316() -> Tensor[(5, 12, 16), float64] {
  @func_3715() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_644(%var_622: Tensor[(308), float32]) -> (Tensor[(7, 10, 11), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) {
  %538 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 10, 11), float64] */, dtype="float64") /* ty=Tensor[(7, 10, 11), float64] */;
  %539 = cast(%var_622, dtype="float32") /* ty=Tensor[(308), float32] */;
  %540 = reshape(%539, newshape=[4, 11, 7]) /* ty=Tensor[(4, 11, 7), float32] */;
  %541 = @func_26(%540) /* ty=(Tensor[(4, 11, 7), bool],) */;
  %542 = acosh(%538) /* ty=Tensor[(7, 10, 11), float64] */;
  %543 = %541.0;
  (%542, %543, %var_622)
}

def @func_7218() -> (Tensor[(5, 12, 16), float64],) {
  %544 = @func_1845() /* ty=Tensor[(5, 12, 16), float64] */;
  (%544,)
}

def @func_2766() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) {
  @func_2764() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) */
}

def @func_4357(%var_4356: float32) -> Tensor[(8, 8, 5), float32] {
  %547 = fn (%var_4336: float32) -> Tensor[(8, 8, 5), float32] {
    %545 = cast(%var_4336, dtype="float32") /* ty=float32 */;
    %546 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 8, 5), float32] */;
    power(%545, %546) /* ty=Tensor[(8, 8, 5), float32] */
  };
  %547(%var_4356) /* ty=Tensor[(8, 8, 5), float32] */
}

def @func_3823() -> (Tensor[(5, 12, 16), float64],) {
  %548 = @func_2764() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint16]) */;
  %549 = %548.0;
  (%549,)
}

def @func_6983(%var_6982: Tensor[(10, 3, 2), int32]) -> (Tensor[(10, 3, 2), int32], Tensor[(10, 3, 2), float64]) {
  %557 = fn (%var_6973: Tensor[(10, 3, 2), int32]) -> (Tensor[(10, 3, 2), int32], Tensor[(10, 3, 2), float64]) {
    %550 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 3, 2), int32] */, dtype="int32") /* ty=Tensor[(10, 3, 2), int32] */;
    %551 = shape_of(%var_6973, dtype="int32") /* ty=Tensor[(3), int32] */;
    %552 = cast(%var_6973, dtype="int32") /* ty=Tensor[(10, 3, 2), int32] */;
    %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %554 = cast(%var_6973, dtype="float64") /* ty=Tensor[(10, 3, 2), float64] */;
    %555 = left_shift(%552, %553) /* ty=Tensor[(10, 3, 2), int32] */;
    %556 = atanh(%554) /* ty=Tensor[(10, 3, 2), float64] */;
    (%555, %556)
  };
  %557(%var_6982) /* ty=(Tensor[(10, 3, 2), int32], Tensor[(10, 3, 2), float64]) */
}

def @func_7734(%var_7732: Tensor[(60, 12), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(12, 12, 5), bool], Tensor[(60, 12), float64]) {
  @func_7731(%var_7732) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(12, 12, 5), bool], Tensor[(60, 12), float64]) */
}

def @func_4015() -> Tensor[(5, 12, 16), float64] {
  %558 = fn () -> Tensor[(5, 12, 16), float64] {
    @func_3030() /* ty=Tensor[(5, 12, 16), float64] */
  };
  %558() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_3318(%var_3317: Tensor[(270), float64]) -> (Tensor[(5, 6, 1), float64], Tensor[(35, 6), float32], Tensor[(270), float64]) {
  %565 = fn (%var_3309: Tensor[(270), float64]) -> (Tensor[(5, 6, 1), float64], Tensor[(35, 6), float32], Tensor[(270), float64]) {
    %559 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 6, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 6, 1), float64] */;
    %560 = cast(%var_3309, dtype="float64") /* ty=Tensor[(270), float64] */;
    %561 = reshape(%560, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), float64] */;
    %562 = @func_2242(%561) /* ty=(Tensor[(6, 5, 9), float64], Tensor[(6, 5, 9), float64], Tensor[(10, 7, 3), float32], Tensor[(35, 6), float32]) */;
    %563 = asinh(%559) /* ty=Tensor[(5, 6, 1), float64] */;
    %564 = %562.3;
    (%563, %564, %var_3309)
  };
  %565(%var_3317) /* ty=(Tensor[(5, 6, 1), float64], Tensor[(35, 6), float32], Tensor[(270), float64]) */
}

def @func_2546() -> Tensor[(5, 12, 16), float64] {
  %566 = fn () -> Tensor[(5, 12, 16), float64] {
    @func_2086() /* ty=Tensor[(5, 12, 16), float64] */
  };
  %566() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_7977(%var_7975: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), float64],) {
  @func_7974(%var_7975) /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_5781(%var_5780: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), uint32],) {
  %574 = fn (%var_5774: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), uint32],) {
    %567 = @func_3266() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %568 = %567.0;
    %569 = cast(%var_5774, dtype="uint32") /* ty=Tensor[(5, 12, 16), uint32] */;
    %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
    %571 = cast(%568, dtype="uint32") /* ty=Tensor[(5, 12, 16), uint32] */;
    %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %573 = minimum(%571, %572) /* ty=Tensor[(5, 12, 16), uint32] */;
    (%573,)
  };
  %574(%var_5780) /* ty=(Tensor[(5, 12, 16), uint32],) */
}

def @func_4875(%var_4873: Tensor[(9, 10, 5), float64], %var_4874: Tensor[(9, 10, 5), float64]) -> (Tensor[(9, 10, 5), bool],) {
  @func_4871(%var_4873, %var_4874) /* ty=(Tensor[(9, 10, 5), bool],) */
}

def @func_7706(%var_7699: Tensor[(5, 9, 7), float32]) -> (Tensor[(5, 9, 7), float32],) {
  %575 = cast(%var_7699, dtype="float32") /* ty=Tensor[(5, 9, 7), float32] */;
  %576 = tan(%575) /* ty=Tensor[(5, 9, 7), float32] */;
  (%576,)
}

def @func_8496() -> (Tensor[(5, 12, 16), float64],) {
  %579 = fn () -> (Tensor[(5, 12, 16), float64],) {
    %577 = @func_5128() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
    %578 = %577.0;
    (%578,)
  };
  %579() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_5440() -> Tensor[(5, 12, 16), float64] {
  %580 = fn () -> Tensor[(5, 12, 16), float64] {
    @func_1693() /* ty=Tensor[(5, 12, 16), float64] */
  };
  %580() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_7068(%var_7064: Tensor[(308), float32], %var_7065: Tensor[(1, 104), float64], %var_7066: Tensor[(65), float32], %var_7067: Tensor[(325), float32]) -> (Tensor[(325), float32], Tensor[(1, 104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(2, 480), float64], Tensor[(4, 11, 7), bool], Tensor[(308), bool], Tensor[(5, 12, 16), float64]) {
  %609 = fn (%var_7032: Tensor[(308), float32], %var_7040: Tensor[(1, 104), float64], %var_7041: Tensor[(65), float32], %var_7042: Tensor[(325), float32]) -> (Tensor[(325), float32], Tensor[(1, 104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(2, 480), float64], Tensor[(4, 11, 7), bool], Tensor[(308), bool], Tensor[(5, 12, 16), float64]) {
    %581 = cast(%var_7040, dtype="float64") /* ty=Tensor[(1, 104), float64] */;
    %582 = cast(%var_7041, dtype="float32") /* ty=Tensor[(65), float32] */;
    %583 = cast(%var_7042, dtype="float32") /* ty=Tensor[(325), float32] */;
    %584 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 480), float64] */, dtype="float64") /* ty=Tensor[(2, 480), float64] */;
    %585 = reshape(%581, newshape=[104]) /* ty=Tensor[(104), float64] */;
    %586 = reshape(%582, newshape=[65]) /* ty=Tensor[(65), float32] */;
    %587 = reshape(%583, newshape=[325]) /* ty=Tensor[(325), float32] */;
    %588 = reshape(%584, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
    %589 = @func_4553(%585, %586, %587, %588) /* ty=(Tensor[(13, 4, 2), float64], Tensor[(104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(5, 12, 16), int32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(8, 60), float64], Tensor[(8, 60), float32]) */;
    %590 = cast(%var_7032, dtype="float32") /* ty=Tensor[(308), float32] */;
    %591 = reshape(%590, newshape=[4, 11, 7]) /* ty=Tensor[(4, 11, 7), float32] */;
    %592 = @func_26(%591) /* ty=(Tensor[(4, 11, 7), bool],) */;
    %593 = @func_3175() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */;
    %594 = %593.1;
    %595 = cast(%var_7032, dtype="int8") /* ty=Tensor[(308), int8] */;
    %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(1), int32] */;
    %597 = cast(%594, dtype="int8") /* ty=Tensor[(308), int8] */;
    %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?), int8] */;
    %599 = multiply(%597, %598) /* ty=Tensor[(308), int8] */;
    %600 = cast(%599, dtype="bool") /* ty=Tensor[(308), bool] */;
    %601 = shape_of(%var_7032, dtype="int32") /* ty=Tensor[(1), int32] */;
    %602 = cast(%var_7032, dtype="bool") /* ty=Tensor[(308), bool] */;
    %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?), bool] */;
    %604 = @func_4266() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %605 = %589.3;
    %606 = %592.0;
    %607 = less_equal(%602, %603) /* ty=Tensor[(308), bool] */;
    %608 = %604.0;
    (%605, %var_7040, %var_7041, %var_7042, meta[relay.Constant][27] /* ty=Tensor[(2, 480), float64] */, %606, %607, %608)
  };
  %609(%var_7064, %var_7065, %var_7066, %var_7067) /* ty=(Tensor[(325), float32], Tensor[(1, 104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(2, 480), float64], Tensor[(4, 11, 7), bool], Tensor[(308), bool], Tensor[(5, 12, 16), float64]) */
}

def @func_4195(%var_4193: Tensor[(1274), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(7, 14, 13), float64], Tensor[(1274), uint32], Tensor[(5, 12, 16), float64], Tensor[(1274), float32]) {
  @func_4192(%var_4193) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(7, 14, 13), float64], Tensor[(1274), uint32], Tensor[(5, 12, 16), float64], Tensor[(1274), float32]) */
}

def @func_6292() -> (Tensor[(5, 12, 16), float64],) {
  %611 = fn () -> (Tensor[(5, 12, 16), float64],) {
    %610 = @func_3497() /* ty=Tensor[(5, 12, 16), float64] */;
    (%610,)
  };
  %611() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_8877() -> (Tensor[(5, 12, 16), float64],) {
  %612 = @func_1427() /* ty=Tensor[(5, 12, 16), float64] */;
  %613 = cast(%612, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %614 = sinh(%613) /* ty=Tensor[(5, 12, 16), float64] */;
  (%614,)
}

def @func_6668() -> Tensor[(5, 12, 16), float64] {
  @func_6666() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_7709(%var_7707: Tensor[(5, 9, 7), float32]) -> (Tensor[(5, 9, 7), float32],) {
  @func_7706(%var_7707) /* ty=(Tensor[(5, 9, 7), float32],) */
}

def @func_4266() -> (Tensor[(5, 12, 16), float64],) {
  %615 = @func_3226() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %616 = %615.0;
  (%616,)
}

def @func_1387() -> Tensor[(5, 12, 16), float64] {
  @func_1385() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_5382(%var_5380: Tensor[(3, 10, 1), int32], %var_5381: Tensor[(3, 10, 15), int32]) -> (Tensor[(3, 10, 15), bool],) {
  @func_5378(%var_5380, %var_5381) /* ty=(Tensor[(3, 10, 15), bool],) */
}

def @func_8926() -> Tensor[(5, 12, 16), int64] {
  @func_6994() /* ty=Tensor[(5, 12, 16), int64] */
}

def @func_5830() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  @func_5828() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_7090() -> Tensor[(5, 12, 16), float32] {
  %618 = fn () -> Tensor[(5, 12, 16), float32] {
    %617 = @func_5727() /* ty=(Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
    %617.0
  };
  %618() /* ty=Tensor[(5, 12, 16), float32] */
}

def @func_6782(%var_6780: Tensor[(15, 9, 12), float32]) -> (Tensor[(15, 9, 12), float32],) {
  @func_6779(%var_6780) /* ty=(Tensor[(15, 9, 12), float32],) */
}

def @func_9118() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint32]) {
  %619 = @func_2371() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float32]) */;
  %620 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  %621 = cast(%620, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %622 = reshape(%621, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %623 = @func_5779(%622) /* ty=(Tensor[(5, 12, 16), uint32],) */;
  %624 = %619.0;
  %625 = %623.0;
  (%620, %624, %625)
}

def @func_4323(%var_4321: Tensor[(3, 2, 3), uint32], %var_4322: Tensor[(270), float64]) -> (Tensor[(3, 2, 3), uint32], Tensor[(5, 6, 1), float64], Tensor[(270), float64]) {
  %635 = fn (%var_4304: Tensor[(3, 2, 3), uint32], %var_4318: Tensor[(270), float64]) -> (Tensor[(3, 2, 3), uint32], Tensor[(5, 6, 1), float64], Tensor[(270), float64]) {
    %626 = cast(%var_4304, dtype="uint32") /* ty=Tensor[(3, 2, 3), uint32] */;
    %627 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(3, 2, 3), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %628 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 2, 3), uint32] */, dtype="uint32") /* ty=Tensor[(3, 2, 3), uint32] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %630 = cast(%var_4318, dtype="float64") /* ty=Tensor[(270), float64] */;
    %631 = reshape(%630, newshape=[270]) /* ty=Tensor[(270), float64] */;
    %632 = @func_3316(%631) /* ty=(Tensor[(5, 6, 1), float64], Tensor[(35, 6), float32], Tensor[(270), float64]) */;
    %633 = bitwise_xor(%628, %629) /* ty=Tensor[(3, 2, 3), uint32] */;
    %634 = %632.0;
    (%633, %634, %var_4318)
  };
  %635(%var_4321, %var_4322) /* ty=(Tensor[(3, 2, 3), uint32], Tensor[(5, 6, 1), float64], Tensor[(270), float64]) */
}

def @func_9248() -> (Tensor[(5, 12, 16), float64],) {
  %637 = fn () -> (Tensor[(5, 12, 16), float64],) {
    %636 = @func_6678() /* ty=Tensor[(5, 12, 16), float64] */;
    (%636,)
  };
  %637() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_6602() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), int64]) {
  %642 = fn () -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), int64]) {
    %638 = @func_5620() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %639 = @func_5889() /* ty=(Tensor[(5, 12, 16), int64],) */;
    %640 = %638.0;
    %641 = %639.0;
    (%640, %641)
  };
  %642() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), int64]) */
}

def @func_1846() -> Tensor[(5, 12, 16), float64] {
  %643 = fn () -> Tensor[(5, 12, 16), float64] {
    @func_1385() /* ty=Tensor[(5, 12, 16), float64] */
  };
  %643() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_8569() -> Tensor[(5, 12, 16), int64] {
  @func_8567() /* ty=Tensor[(5, 12, 16), int64] */
}

def @func_7076() -> Tensor[(308), float32] {
  @func_7074() /* ty=Tensor[(308), float32] */
}

def @func_6553() -> (Tensor[(5, 12, 16), float64],) {
  @func_6551() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_7880() -> (Tensor[(5, 12, 16), float64],) {
  @func_7878() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_6037() -> Tensor[(5, 12, 16), float64] {
  %644 = fn () -> Tensor[(5, 12, 16), float64] {
    @func_2086() /* ty=Tensor[(5, 12, 16), float64] */
  };
  %644() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_7801() -> (Tensor[(5, 12, 16), float64],) {
  @func_7799() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_8066(%var_8064: Tensor[(18), uint32]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 6, 1), float64], Tensor[(18), uint32], Tensor[(270), float64]) {
  @func_8063(%var_8064) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 6, 1), float64], Tensor[(18), uint32], Tensor[(270), float64]) */
}

def @func_8472(%var_8462: Tensor[(1, 1755), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(15, 9, 13), int16], Tensor[(1, 1755), uint16], Tensor[(5, 12, 16), float64]) {
  %645 = @func_3823() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %646 = cast(%var_8462, dtype="uint16") /* ty=Tensor[(1, 1755), uint16] */;
  %647 = cast(%var_8462, dtype="uint16") /* ty=Tensor[(1, 1755), uint16] */;
  %648 = reshape(%646, newshape=[15, 9, 13]) /* ty=Tensor[(15, 9, 13), uint16] */;
  %649 = reshape(%647, newshape=[15, 9, 13]) /* ty=Tensor[(15, 9, 13), uint16] */;
  %650 = %645.0;
  %651 = @func_6912(%648, %649) /* ty=Tensor[(15, 9, 13), int16] */;
  %652 = @func_2545() /* ty=Tensor[(5, 12, 16), float64] */;
  (%650, %651, %var_8462, %652)
}

def @func_2049(%var_2047: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), bool], Tensor[(3, 2, 13), bool], Tensor[(78), float32]) {
  @func_2046(%var_2047) /* ty=(Tensor[(5, 12, 16), bool], Tensor[(3, 2, 13), bool], Tensor[(78), float32]) */
}

def @func_4639() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %653 = @func_4249() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %654 = %653.0;
  %655 = cast(%654, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
  %656 = exp(%655) /* ty=Tensor[(5, 12, 16), float64] */;
  %657 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  (%656, %657)
}

def @func_2404(%var_2403: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), bool],) {
  %664 = fn (%var_2381: Tensor[(5, 12, 16), float64]) -> (Tensor[(5, 12, 16), bool],) {
    %658 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
    %659 = cast(%var_2381, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
    %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
    %661 = cast(%658, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
    %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %663 = not_equal(%661, %662) /* ty=Tensor[(5, 12, 16), bool] */;
    (%663,)
  };
  %664(%var_2403) /* ty=(Tensor[(5, 12, 16), bool],) */
}

def @func_8949() -> Tensor[(5, 12, 16), float64] {
  %665 = @func_5620() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %665.0
}

def @func_8828() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  @func_8826() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_1623() -> (Tensor[(5, 12, 16), float64],) {
  %667 = fn () -> (Tensor[(5, 12, 16), float64],) {
    %666 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
    (%666,)
  };
  %667() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_926(%var_913: Tensor[(13, 4, 2), float64]) -> (Tensor[(13, 4, 2), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) {
  %668 = cast(%var_913, dtype="float64") /* ty=Tensor[(13, 4, 2), float64] */;
  %669 = cast(meta[relay.Constant][29] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %670 = reshape(%669, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %671 = @func_644(%670) /* ty=(Tensor[(7, 10, 11), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) */;
  %672 = rsqrt(%668) /* ty=Tensor[(13, 4, 2), float64] */;
  %673 = %671.1;
  (%672, %673, meta[relay.Constant][29] /* ty=Tensor[(308), float32] */)
}

def @func_6458(%var_6456: Tensor[(78), float32], %var_6457: Tensor[(12, 9, 10), bool]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(12, 9, 10), uint32], Tensor[(5, 12, 16), int64], Tensor[(78), bool]) {
  %702 = fn (%var_6395: Tensor[(78), float32], %var_6425: Tensor[(12, 9, 10), bool]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(12, 9, 10), uint32], Tensor[(5, 12, 16), int64], Tensor[(78), bool]) {
    %674 = @func_5620() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %675 = @func_2464() /* ty=(Tensor[(4, 11, 7), bool], Tensor[(104), float64], Tensor[(12, 9, 10), bool], Tensor[(12, 9, 10), float64]) */;
    %676 = %675.2;
    %677 = cast(%var_6425, dtype="uint32") /* ty=Tensor[(12, 9, 10), uint32] */;
    %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
    %679 = cast(%676, dtype="uint32") /* ty=Tensor[(12, 9, 10), uint32] */;
    %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %681 = %674.0;
    %682 = cast(%681, dtype="float32") /* ty=Tensor[(5, 12, 16), float32] */;
    %683 = reshape(%682, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float32] */;
    %684 = cast(%var_6395, dtype="float32") /* ty=Tensor[(78), float32] */;
    %685 = reshape(%684, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), float32] */;
    %686 = @func_907(%685) /* ty=(Tensor[(3, 2, 13), bool], Tensor[(3, 2, 13), float32]) */;
    %687 = %686.1;
    %688 = cast(%687, dtype="float64") /* ty=Tensor[(3, 2, 13), float64] */;
    %689 = shape_of(%var_6395, dtype="int32") /* ty=Tensor[(1), int32] */;
    %690 = cast(%var_6395, dtype="float64") /* ty=Tensor[(78), float64] */;
    %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?), float64] */;
    %692 = power(%690, %691) /* ty=Tensor[(78), float64] */;
    %693 = cast(%var_6395, dtype="bool") /* ty=Tensor[(78), bool] */;
    %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(1), int32] */;
    %695 = cast(%692, dtype="bool") /* ty=Tensor[(78), bool] */;
    %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?), bool] */;
    %697 = @func_2545() /* ty=Tensor[(5, 12, 16), float64] */;
    %698 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
    %699 = bitwise_or(%679, %680) /* ty=Tensor[(12, 9, 10), uint32] */;
    %700 = @func_3017(%683) /* ty=Tensor[(5, 12, 16), int64] */;
    %701 = greater_equal(%695, %696) /* ty=Tensor[(78), bool] */;
    (%697, %698, %681, %699, %700, %701)
  };
  %702(%var_6456, %var_6457) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(12, 9, 10), uint32], Tensor[(5, 12, 16), int64], Tensor[(78), bool]) */
}

def @func_8587(%var_8583: Tensor[(14, 11, 6), float32]) -> (Tensor[(14, 11, 6), bool],) {
  %703 = cast(5.28861f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %704 = cast(%var_8583, dtype="bool") /* ty=Tensor[(14, 11, 6), bool] */;
  %705 = greater(%703, %704) /* ty=Tensor[(14, 11, 6), bool] */;
  (%705,)
}

def @func_8898() -> (Tensor[(5, 12, 16), float64],) {
  @func_8896() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_2344(%var_2343: Tensor[(7, 182), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(7, 14, 13), float64], Tensor[(7, 182), float64], Tensor[(5, 12, 16), float64]) {
  %714 = fn (%var_2316: Tensor[(7, 182), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(7, 14, 13), float64], Tensor[(7, 182), float64], Tensor[(5, 12, 16), float64]) {
    %706 = cast(%var_2316, dtype="float64") /* ty=Tensor[(7, 182), float64] */;
    %707 = cast(%var_2316, dtype="float64") /* ty=Tensor[(7, 182), float64] */;
    %708 = reshape(%706, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
    %709 = reshape(%707, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
    %710 = @func_1880(%708, %709) /* ty=(Tensor[(7, 14, 13), float64],) */;
    %711 = @func_1936() /* ty=Tensor[(5, 12, 16), float64] */;
    %712 = %710.0;
    %713 = @func_2086() /* ty=Tensor[(5, 12, 16), float64] */;
    (%711, %712, %var_2316, %713)
  };
  %714(%var_2343) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(7, 14, 13), float64], Tensor[(7, 182), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_9212() -> (Tensor[(5, 12, 16), float64],) {
  %715 = @func_6601() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), int64]) */;
  %716 = %715.0;
  (%716,)
}

def @func_8769() -> Tensor[(5, 12, 16), float64] {
  %718 = fn () -> Tensor[(5, 12, 16), float64] {
    %717 = @func_4584() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(1728), int64]) */;
    %717.0
  };
  %718() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_7201() -> Tensor[(5, 12, 16), float64] {
  @func_7199() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_8408() -> (Tensor[(5, 12, 16), float64],) {
  @func_8406() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_8992(%var_8982: Tensor[(1274), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(5, 12, 16), float64]) {
  %719 = @func_5620() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %720 = cast(%var_8982, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %721 = reshape(%720, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %722 = @func_5206(%721) /* ty=(Tensor[(5, 12, 16), bool], Tensor[(1274), uint32], Tensor[(1274), float64]) */;
  %723 = %719.0;
  %724 = %722.2;
  %725 = @func_3358() /* ty=Tensor[(5, 12, 16), float64] */;
  (%723, %724, %var_8982, %725)
}

def @func_4250() -> (Tensor[(5, 12, 16), float64],) {
  %727 = fn () -> (Tensor[(5, 12, 16), float64],) {
    %726 = @func_2086() /* ty=Tensor[(5, 12, 16), float64] */;
    (%726,)
  };
  %727() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_6248() -> (Tensor[(5, 12, 16), float64],) {
  %729 = fn () -> (Tensor[(5, 12, 16), float64],) {
    %728 = @func_1693() /* ty=Tensor[(5, 12, 16), float64] */;
    (%728,)
  };
  %729() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_6994() -> Tensor[(5, 12, 16), int64] {
  %730 = @func_3175() /* ty=(Tensor[(5, 12, 16), uint16], Tensor[(308), float32], Tensor[(1728), int64], Tensor[(5, 12, 16), int64]) */;
  %730.3
}

def @func_4706(%var_4682: Tensor[(270), float64], %var_4696: Tensor[(104), float64], %var_4698: Tensor[(325), float32], %var_4699: Tensor[(960), float64]) -> (Tensor[(1728), int64], Tensor[(78), float32], Tensor[(270), float64], Tensor[(6, 3), uint32], Tensor[(270), float64], Tensor[(5, 12, 16), float64], Tensor[(104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(960), float64]) {
  %731 = @func_4584() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(1728), int64]) */;
  %732 = @func_2144() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(3, 2, 13), float32], Tensor[(78), float32]) */;
  %733 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 3), uint32] */, dtype="uint32") /* ty=Tensor[(6, 3), uint32] */;
  %734 = cast(%var_4682, dtype="float64") /* ty=Tensor[(270), float64] */;
  %735 = reshape(%733, newshape=[3, 2, 3]) /* ty=Tensor[(3, 2, 3), uint32] */;
  %736 = reshape(%734, newshape=[270]) /* ty=Tensor[(270), float64] */;
  %737 = @func_4320(%735, %736) /* ty=(Tensor[(3, 2, 3), uint32], Tensor[(5, 6, 1), float64], Tensor[(270), float64]) */;
  %738 = cast(%var_4696, dtype="float64") /* ty=Tensor[(104), float64] */;
  %739 = cast(meta[relay.Constant][31] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %740 = cast(%var_4698, dtype="float32") /* ty=Tensor[(325), float32] */;
  %741 = cast(%var_4699, dtype="float64") /* ty=Tensor[(960), float64] */;
  %742 = reshape(%738, newshape=[104]) /* ty=Tensor[(104), float64] */;
  %743 = reshape(%739, newshape=[65]) /* ty=Tensor[(65), float32] */;
  %744 = reshape(%740, newshape=[325]) /* ty=Tensor[(325), float32] */;
  %745 = reshape(%741, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
  %746 = @func_4553(%742, %743, %744, %745) /* ty=(Tensor[(13, 4, 2), float64], Tensor[(104), float64], Tensor[(65), float32], Tensor[(325), float32], Tensor[(5, 12, 16), int32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(8, 60), float64], Tensor[(8, 60), float32]) */;
  %747 = %731.1;
  %748 = %732.5;
  %749 = %737.2;
  %750 = %746.5;
  (%747, %748, %749, meta[relay.Constant][30] /* ty=Tensor[(6, 3), uint32] */, %var_4682, %750, %var_4696, meta[relay.Constant][31] /* ty=Tensor[(65), float32] */, %var_4698, %var_4699)
}

def @func_7124() -> (Tensor[(5, 12, 16), float64], Tensor[(1728), int64]) {
  %751 = @func_2714() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %752 = @func_4584() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(1728), int64]) */;
  %753 = %751.0;
  %754 = %752.1;
  (%753, %754)
}

def @func_6779(%var_6772: Tensor[(15, 9, 12), float32]) -> (Tensor[(15, 9, 12), float32],) {
  %755 = cast(%var_6772, dtype="float32") /* ty=Tensor[(15, 9, 12), float32] */;
  %756 = log2(%755) /* ty=Tensor[(15, 9, 12), float32] */;
  (%756,)
}

def @func_2373() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float32]) {
  @func_2371() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float32]) */
}

def @func_5828() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %757 = @func_3640() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %758 = %757.0;
  %759 = @func_4948() /* ty=Tensor[(5, 12, 16), float64] */;
  (%758, %759)
}

def @func_3228() -> (Tensor[(5, 12, 16), float64],) {
  @func_3226() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_5728() -> (Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %767 = fn () -> (Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
    %760 = @func_4934() /* ty=(Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), bool], Tensor[(5, 12, 16), float64]) */;
    %761 = @func_4831() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
    %762 = %760.0;
    %763 = %761.0;
    %764 = @func_1693() /* ty=Tensor[(5, 12, 16), float64] */;
    %765 = @func_1385() /* ty=Tensor[(5, 12, 16), float64] */;
    %766 = @func_1385() /* ty=Tensor[(5, 12, 16), float64] */;
    (%762, %763, %764, %765, %766)
  };
  %767() /* ty=(Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_3466() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %772 = fn () -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
    %768 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
    %769 = cast(%768, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
    %770 = @func_3358() /* ty=Tensor[(5, 12, 16), float64] */;
    %771 = rsqrt(%769) /* ty=Tensor[(5, 12, 16), float64] */;
    (%770, %771)
  };
  %772() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_1522(%var_1429: Tensor[(5, 16, 6), uint16], %var_1513: Tensor[(5, 16, 6), float64]) -> (Tensor[(5, 16, 6), float32], Tensor[(12, 12, 12), float64], Tensor[(1728), int64], Tensor[(7, 10, 11), float64], Tensor[(154, 2), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(5, 12, 16), float64]) {
  %773 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 16, 6), uint16] */, dtype="uint16") /* ty=Tensor[(5, 16, 6), uint16] */;
  %774 = shape_of(%var_1429, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%var_1429, dtype="uint16") /* ty=Tensor[(5, 16, 6), uint16] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %777 = multiply(%775, %776) /* ty=Tensor[(5, 16, 6), uint16] */;
  %778 = cast(%777, dtype="float32") /* ty=Tensor[(5, 16, 6), float32] */;
  %779 = cast(meta[relay.Constant][33] /* ty=Tensor[(1728), int64] */, dtype="int64") /* ty=Tensor[(1728), int64] */;
  %780 = cast(meta[relay.Constant][33] /* ty=Tensor[(1728), int64] */, dtype="int64") /* ty=Tensor[(1728), int64] */;
  %781 = reshape(%779, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), int64] */;
  %782 = reshape(%780, newshape=[12, 12, 12]) /* ty=Tensor[(12, 12, 12), int64] */;
  %783 = @func_866(%781, %782) /* ty=(Tensor[(12, 12, 12), int64], Tensor[(12, 12, 12), float32], Tensor[(4, 11, 7), bool], Tensor[(308), float32], Tensor[(12, 12, 12), float64]) */;
  %784 = cast(meta[relay.Constant][34] /* ty=Tensor[(154, 2), float32] */, dtype="float32") /* ty=Tensor[(154, 2), float32] */;
  %785 = reshape(%784, newshape=[308]) /* ty=Tensor[(308), float32] */;
  %786 = @func_644(%785) /* ty=(Tensor[(7, 10, 11), float64], Tensor[(4, 11, 7), bool], Tensor[(308), float32]) */;
  %787 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 16, 6), uint16] */, dtype="float64") /* ty=Tensor[(5, 16, 6), float64] */;
  %788 = cast(%var_1429, dtype="float64") /* ty=Tensor[(5, 16, 6), float64] */;
  %789 = sigmoid(%788) /* ty=Tensor[(5, 16, 6), float64] */;
  %790 = cast(%777, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
  %791 = shape_of(%789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%789, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %794 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 16, 6), uint16] */, dtype="uint32") /* ty=Tensor[(5, 16, 6), uint32] */;
  %795 = shape_of(%789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(%789, dtype="uint32") /* ty=Tensor[(5, 16, 6), uint32] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %798 = subtract(%796, %797) /* ty=Tensor[(5, 16, 6), uint32] */;
  %799 = cast(%798, dtype="float64") /* ty=Tensor[(5, 16, 6), float64] */;
  %800 = cos(%799) /* ty=Tensor[(5, 16, 6), float64] */;
  %801 = cast(%var_1513, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
  %802 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%800, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %805 = rsqrt(%778) /* ty=Tensor[(5, 16, 6), float32] */;
  %806 = %783.4;
  %807 = %786.0;
  %808 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  %809 = log(%787) /* ty=Tensor[(5, 16, 6), float64] */;
  %810 = less_equal(%792, %793) /* ty=Tensor[(5, 16, 6), bool] */;
  %811 = @func_1385() /* ty=Tensor[(5, 12, 16), float64] */;
  %812 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  %813 = logical_or(%803, %804) /* ty=Tensor[(5, 16, 6), bool] */;
  %814 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  (%805, %806, meta[relay.Constant][33] /* ty=Tensor[(1728), int64] */, %807, meta[relay.Constant][34] /* ty=Tensor[(154, 2), float32] */, %808, %809, %810, %811, %812, %813, %814)
}

def @func_7126() -> (Tensor[(5, 12, 16), float64], Tensor[(1728), int64]) {
  @func_7124() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(1728), int64]) */
}

def @func_8318() -> Tensor[(5, 12, 16), float64] {
  @func_8316() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_8184(%var_8182: Tensor[(637, 2), float64]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], uint16, Tensor[(600), uint16], Tensor[(5, 12, 16), float64], Tensor[(7, 182), float64], Tensor[(637, 2), float64]) {
  @func_8181(%var_8182) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64], uint16, Tensor[(600), uint16], Tensor[(5, 12, 16), float64], Tensor[(7, 182), float64], Tensor[(637, 2), float64]) */
}

def @func_6621() -> (Tensor[(5, 12, 16), float64],) {
  %816 = fn () -> (Tensor[(5, 12, 16), float64],) {
    %815 = @func_4014() /* ty=Tensor[(5, 12, 16), float64] */;
    (%815,)
  };
  %816() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_3019(%var_3018: Tensor[(5, 12, 16), float32]) -> Tensor[(5, 12, 16), int64] {
  %825 = fn (%var_3010: Tensor[(5, 12, 16), float32]) -> Tensor[(5, 12, 16), int64] {
    %817 = @func_2714() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %818 = %817.0;
    %819 = cast(%818, dtype="float32") /* ty=Tensor[(5, 12, 16), float32] */;
    %820 = tan(%819) /* ty=Tensor[(5, 12, 16), float32] */;
    %821 = cast(%var_3010, dtype="int64") /* ty=Tensor[(5, 12, 16), int64] */;
    %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
    %823 = cast(%820, dtype="int64") /* ty=Tensor[(5, 12, 16), int64] */;
    %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    left_shift(%823, %824) /* ty=Tensor[(5, 12, 16), int64] */
  };
  %825(%var_3018) /* ty=Tensor[(5, 12, 16), int64] */
}

def @func_5800() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint32], Tensor[(5, 12, 16), float64]) {
  %834 = fn () -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint32], Tensor[(5, 12, 16), float64]) {
    %826 = @func_3465() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
    %827 = %826.1;
    %828 = cast(%827, dtype="float64") /* ty=Tensor[(5, 12, 16), float64] */;
    %829 = reshape(%828, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
    %830 = @func_5779(%829) /* ty=(Tensor[(5, 12, 16), uint32],) */;
    %831 = @func_2714() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %832 = %830.0;
    %833 = %831.0;
    (%827, %832, %833)
  };
  %834() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), uint32], Tensor[(5, 12, 16), float64]) */
}

def @func_3497() -> Tensor[(5, 12, 16), float64] {
  %835 = @func_3465() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %835.1
}

def @func_8826() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %836 = @func_4934() /* ty=(Tensor[(5, 12, 16), float32], Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), bool], Tensor[(5, 12, 16), float64]) */;
  %837 = @func_6291() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %838 = %836.1;
  %839 = %837.0;
  (%838, %839)
}

def @func_9005() -> (Tensor[(9, 11, 13), bool],) {
  %840 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 11, 13), int16] */, dtype="bool") /* ty=Tensor[(9, 11, 13), bool] */;
  %841 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(9, 11, 13), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 11, 13), int16] */, dtype="bool") /* ty=Tensor[(9, 11, 13), bool] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %844 = less_equal(%842, %843) /* ty=Tensor[(9, 11, 13), bool] */;
  (%844,)
}

def @func_1937() -> Tensor[(5, 12, 16), float64] {
  %845 = fn () -> Tensor[(5, 12, 16), float64] {
    @func_1693() /* ty=Tensor[(5, 12, 16), float64] */
  };
  %845() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_2715() -> (Tensor[(5, 12, 16), float64],) {
  %847 = fn () -> (Tensor[(5, 12, 16), float64],) {
    %846 = @func_1427() /* ty=Tensor[(5, 12, 16), float64] */;
    (%846,)
  };
  %847() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_6762() -> (Tensor[(5, 12, 16), float64],) {
  %849 = fn () -> (Tensor[(5, 12, 16), float64],) {
    %848 = @func_1936() /* ty=Tensor[(5, 12, 16), float64] */;
    (%848,)
  };
  %849() /* ty=(Tensor[(5, 12, 16), float64],) */
}

def @func_1694() -> Tensor[(5, 12, 16), float64] {
  %850 = fn () -> Tensor[(5, 12, 16), float64] {
    @func_1427() /* ty=Tensor[(5, 12, 16), float64] */
  };
  %850() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_3342(%var_3339: uint16, %var_3340: Tensor[(15, 10, 4), uint16], %var_3341: Tensor[(960), float64]) -> (Tensor[(15, 10, 4), uint16], Tensor[(5, 12, 16), float64], Tensor[(960), float64]) {
  %858 = fn (%var_3325: uint16, %var_3326: Tensor[(15, 10, 4), uint16], %var_3334: Tensor[(960), float64]) -> (Tensor[(15, 10, 4), uint16], Tensor[(5, 12, 16), float64], Tensor[(960), float64]) {
    %851 = cast(%var_3325, dtype="uint16") /* ty=uint16 */;
    %852 = cast(%var_3326, dtype="uint16") /* ty=Tensor[(15, 10, 4), uint16] */;
    %853 = cast(%var_3334, dtype="float64") /* ty=Tensor[(960), float64] */;
    %854 = reshape(%853, newshape=[5, 12, 16]) /* ty=Tensor[(5, 12, 16), float64] */;
    %855 = @func_2995(%854) /* ty=(Tensor[(5, 12, 16), uint64], Tensor[(5, 12, 16), float64]) */;
    %856 = add(%851, %852) /* ty=Tensor[(15, 10, 4), uint16] */;
    %857 = %855.1;
    (%856, %857, %var_3334)
  };
  %858(%var_3339, %var_3340, %var_3341) /* ty=(Tensor[(15, 10, 4), uint16], Tensor[(5, 12, 16), float64], Tensor[(960), float64]) */
}

def @func_2703(%var_2702: Tensor[(240, 2), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(240, 2), uint16]) {
  %864 = fn (%var_2698: Tensor[(240, 2), uint16]) -> (Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(240, 2), uint16]) {
    %859 = cast(%var_2698, dtype="uint16") /* ty=Tensor[(240, 2), uint16] */;
    %860 = reshape(%859, newshape=[480]) /* ty=Tensor[(480), uint16] */;
    %861 = @func_1673(%860) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(480), uint16], Tensor[(5, 12, 16), float64]) */;
    %862 = @func_1427() /* ty=Tensor[(5, 12, 16), float64] */;
    %863 = %861.1;
    (%862, %863, %var_2698)
  };
  %864(%var_2702) /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 16, 6), bool], Tensor[(240, 2), uint16]) */
}

def @func_3716() -> Tensor[(5, 12, 16), float64] {
  %866 = fn () -> Tensor[(5, 12, 16), float64] {
    %865 = @func_1622() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %865.0
  };
  %866() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_6700() -> Tensor[(5, 12, 16), float64] {
  %867 = fn () -> Tensor[(5, 12, 16), float64] {
    @func_2086() /* ty=Tensor[(5, 12, 16), float64] */
  };
  %867() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_4586() -> (Tensor[(5, 12, 16), float64], Tensor[(1728), int64]) {
  @func_4584() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(1728), int64]) */
}

def @func_6169() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  %868 = @func_5907() /* ty=(Tensor[(5, 12, 16), float64],) */;
  %869 = @func_3497() /* ty=Tensor[(5, 12, 16), float64] */;
  %870 = %868.0;
  (%869, %870)
}

def @func_4657(%var_4648: Tensor[(5, 12, 16), float64]) -> Tensor[(5, 12, 16), bool] {
  %871 = @func_3465() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */;
  %872 = %871.1;
  %873 = cast(%var_4648, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %874 = shape_of(%872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %875 = cast(%872, dtype="bool") /* ty=Tensor[(5, 12, 16), bool] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%875, %876) /* ty=Tensor[(5, 12, 16), bool] */
}

def @func_8744(%var_8741: Tensor[(12, 8, 7), float64], %var_8742: uint16, %var_8743: Tensor[(960), float64]) -> (Tensor[(12, 8, 7), float64], Tensor[(5, 12, 16), float64], uint16, Tensor[(600), uint16], Tensor[(960), float64]) {
  %887 = fn (%var_8728: Tensor[(12, 8, 7), float64], %var_8735: uint16, %var_8737: Tensor[(960), float64]) -> (Tensor[(12, 8, 7), float64], Tensor[(5, 12, 16), float64], uint16, Tensor[(600), uint16], Tensor[(960), float64]) {
    %877 = cast(%var_8728, dtype="float64") /* ty=Tensor[(12, 8, 7), float64] */;
    %878 = cast(%var_8735, dtype="uint16") /* ty=uint16 */;
    %879 = cast(meta[relay.Constant][37] /* ty=Tensor[(600), uint16] */, dtype="uint16") /* ty=Tensor[(600), uint16] */;
    %880 = cast(%var_8737, dtype="float64") /* ty=Tensor[(960), float64] */;
    %881 = reshape(%878, newshape=[]) /* ty=uint16 */;
    %882 = reshape(%879, newshape=[15, 10, 4]) /* ty=Tensor[(15, 10, 4), uint16] */;
    %883 = reshape(%880, newshape=[960]) /* ty=Tensor[(960), float64] */;
    %884 = @func_3338(%881, %882, %883) /* ty=(Tensor[(15, 10, 4), uint16], Tensor[(5, 12, 16), float64], Tensor[(960), float64]) */;
    %885 = cos(%877) /* ty=Tensor[(12, 8, 7), float64] */;
    %886 = %884.1;
    (%885, %886, %var_8735, meta[relay.Constant][37] /* ty=Tensor[(600), uint16] */, %var_8737)
  };
  %887(%var_8741, %var_8742, %var_8743) /* ty=(Tensor[(12, 8, 7), float64], Tensor[(5, 12, 16), float64], uint16, Tensor[(600), uint16], Tensor[(960), float64]) */
}

def @func_8406() -> (Tensor[(5, 12, 16), float64],) {
  %888 = @func_1409() /* ty=Tensor[(5, 12, 16), float64] */;
  (%888,)
}

def @func_8219() -> (Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) {
  @func_8217() /* ty=(Tensor[(5, 12, 16), float64], Tensor[(5, 12, 16), float64]) */
}

def @func_3499() -> Tensor[(5, 12, 16), float64] {
  @func_3497() /* ty=Tensor[(5, 12, 16), float64] */
}

def @func_9159() -> (Tensor[(5, 12, 16), float64],) {
  %891 = fn () -> (Tensor[(5, 12, 16), float64],) {
    %889 = @func_6291() /* ty=(Tensor[(5, 12, 16), float64],) */;
    %890 = %889.0;
    (%890,)
  };
  %891() /* ty=(Tensor[(5, 12, 16), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen264/build/output.py:2841: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen264/build/output.py", line 2846, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(600) tvmgen_default_fused_reshape_maximum_kernel0(short* __restrict__ T_maximum, short* __restrict__ placeholder, short* __restrict__ placeholder1) {
  T_maximum[(((int)threadIdx.x))] = max(placeholder[(((int)threadIdx.x))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

