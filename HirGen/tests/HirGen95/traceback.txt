==========mod==========
#[version = "0.0.5"]
def @func_7199(%var_7175: Tensor[(12, 16, 5), uint8]) -> (Tensor[(12, 16, 5), uint8], Tensor[(12, 16, 5), int8]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 16, 5), uint8] */, dtype="uint8") /* ty=Tensor[(12, 16, 5), uint8] */;
  %1 = shape_of(%var_7175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_7175, dtype="uint8") /* ty=Tensor[(12, 16, 5), uint8] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 16, 5), uint8] */, dtype="int8") /* ty=Tensor[(12, 16, 5), int8] */;
  %5 = shape_of(%var_7175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%var_7175, dtype="int8") /* ty=Tensor[(12, 16, 5), int8] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %8 = minimum(%2, %3) /* ty=Tensor[(12, 16, 5), uint8] */;
  %9 = bitwise_or(%6, %7) /* ty=Tensor[(12, 16, 5), int8] */;
  (%8, %9)
}

def @func_1044() -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64]) {
  %10 = @func_968() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %11 = %10.1;
  %12 = @func_429() /* ty=Tensor[(10, 9, 3), float32] */;
  %13 = cast(%11, dtype="uint64") /* ty=Tensor[(10, 9, 3), uint64] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%12, dtype="uint64") /* ty=Tensor[(10, 9, 3), uint64] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %17 = minimum(%15, %16) /* ty=Tensor[(10, 9, 3), uint64] */;
  %18 = cast(%17, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %19 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%11, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %22 = @func_968() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %23 = %22.2;
  %24 = cast(%23, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %25 = greater_equal(%20, %21) /* ty=Tensor[(10, 9, 3), bool] */;
  %26 = exp(%24) /* ty=Tensor[(10, 9, 3), float32] */;
  %27 = @func_626() /* ty=Tensor[(10, 9, 3), float64] */;
  (%25, %26, %27)
}

def @func_7003(%var_6994: float64, %var_6995: Tensor[(3, 2, 9), float64]) -> Tensor[(3, 2, 9), float32] {
  %28 = cast(%var_6994, dtype="float64") /* ty=float64 */;
  %29 = cast(%var_6995, dtype="float64") /* ty=Tensor[(3, 2, 9), float64] */;
  %30 = mod(%28, %29) /* ty=Tensor[(3, 2, 9), float64] */;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(3, 2, 9), float32] */;
  rsqrt(%31) /* ty=Tensor[(3, 2, 9), float32] */
}

def @func_7288() -> Tensor[(10, 9, 3), float32] {
  %32 = @func_5557() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %32.0
}

def @func_6865(%var_6835: Tensor[(72), float64], %var_6858: Tensor[(640), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(72), float64], Tensor[(2, 12, 3), float64], Tensor[(10, 9, 3), bool], Tensor[(640), uint32]) {
  %33 = @func_6298() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(6, 180), bool], Tensor[(10, 9, 3), float32], Tensor[(9), float64], Tensor[(15, 8, 9), float64]) */;
  %34 = cast(%var_6835, dtype="float64") /* ty=Tensor[(72), float64] */;
  %35 = cast(%var_6835, dtype="float64") /* ty=Tensor[(72), float64] */;
  %36 = reshape(%34, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), float64] */;
  %37 = reshape(%35, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), float64] */;
  %38 = @func_5886(%36, %37) /* ty=(Tensor[(2, 12, 3), float64], Tensor[(2, 12, 3), float32]) */;
  %39 = %38.0;
  %40 = cast(%39, dtype="float64") /* ty=Tensor[(2, 12, 3), float64] */;
  %41 = cast(%var_6858, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %42 = reshape(%41, newshape=[640]) /* ty=Tensor[(640), uint32] */;
  %43 = @func_2918(%42) /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float64], Tensor[(640), uint32]) */;
  %44 = %33.0;
  %45 = atan(%40) /* ty=Tensor[(2, 12, 3), float64] */;
  %46 = %43.0;
  (%44, %var_6835, %45, %46, %var_6858)
}

def @func_6249() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %47 = @func_882() /* ty=Tensor[(10, 9, 3), float32] */;
  %48 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
  (%47, %48)
}

def @func_882() -> Tensor[(10, 9, 3), float32] {
  @func_609() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_1228() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) {
  %49 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %50 = @func_1099() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
  %51 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %52 = %49.0;
  %53 = %50.0;
  %54 = %51.0;
  (%52, %53, %54)
}

def @func_2291(%var_2281: Tensor[(6, 9, 16), float32]) -> (Tensor[(6, 9, 16), float32],) {
  %55 = cast(%var_2281, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %56 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(6, 9, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 9, 16), float32] */, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %59 = power(%57, %58) /* ty=Tensor[(6, 9, 16), float32] */;
  (%59,)
}

def @func_2480(%var_2473: Tensor[(5, 9, 7), float64]) -> (Tensor[(5, 9, 7), float64],) {
  %60 = cast(%var_2473, dtype="float64") /* ty=Tensor[(5, 9, 7), float64] */;
  %61 = cos(%60) /* ty=Tensor[(5, 9, 7), float64] */;
  (%61,)
}

def @func_7242(%var_7214: Tensor[(42, 1), uint32], %var_7228: Tensor[(1, 640), uint32]) -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 16, 4), uint32], Tensor[(1, 640), uint32], Tensor[(42, 126), uint64]) {
  %62 = cast(%var_7214, dtype="uint32") /* ty=Tensor[(42, 1), uint32] */;
  %63 = cast(meta[relay.Constant][2] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %64 = reshape(%62, newshape=[1, 3, 14]) /* ty=Tensor[(1, 3, 14), uint32] */;
  %65 = reshape(%63, newshape=[3, 3, 14]) /* ty=Tensor[(3, 3, 14), uint32] */;
  %66 = @func_471(%64, %65) /* ty=(Tensor[(3, 3, 14), bool], Tensor[(10, 9, 3), float32]) */;
  %67 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %68 = cast(%var_7228, dtype="uint32") /* ty=Tensor[(1, 640), uint32] */;
  %69 = reshape(%68, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint32] */;
  %70 = @func_1383(%69) /* ty=(Tensor[(10, 16, 4), uint32],) */;
  %71 = cast(%var_7214, dtype="bool") /* ty=Tensor[(42, 1), bool] */;
  %72 = cast(meta[relay.Constant][2] /* ty=Tensor[(126), uint32] */, dtype="bool") /* ty=Tensor[(126), bool] */;
  %73 = greater(%71, %72) /* ty=Tensor[(42, 126), bool] */;
  %74 = cast(%73, dtype="float64") /* ty=Tensor[(42, 126), float64] */;
  %75 = log2(%74) /* ty=Tensor[(42, 126), float64] */;
  %76 = cast(%73, dtype="uint64") /* ty=Tensor[(42, 126), uint64] */;
  %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(2), int32] */;
  %78 = cast(%75, dtype="uint64") /* ty=Tensor[(42, 126), uint64] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %80 = @func_553() /* ty=Tensor[(10, 9, 3), float64] */;
  %81 = %66.1;
  %82 = %67.0;
  %83 = %70.0;
  %84 = bitwise_or(%78, %79) /* ty=Tensor[(42, 126), uint64] */;
  (%80, %81, %82, %83, %var_7228, %84)
}

def @func_6405() -> (Tensor[(10, 9, 3), int8],) {
  %85 = @func_4430() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(4, 15, 4), float32], Tensor[(10, 9, 3), int8], Tensor[(10, 9, 3), float64]) */;
  %86 = %85.2;
  (%86,)
}

def @func_703() -> (Tensor[(10, 9, 3), float32],) {
  %87 = @func_680() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %88 = %87.0;
  (%88,)
}

def @func_3027() -> Tensor[(4, 15, 4), float64] {
  %89 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
  %90 = %89.0;
  %91 = @func_1316() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(240), int8]) */;
  %92 = %91.2;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(240), float64] */;
  %94 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%90, dtype="float64") /* ty=Tensor[(4, 15, 4), float64] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%95, %96) /* ty=Tensor[(4, 15, 4), float64] */
}

def @func_4272(%var_4240: Tensor[(126), uint32], %var_4247: Tensor[(800), float32]) -> (Tensor[(14, 5, 16), float64], Tensor[(4, 15, 4), int8], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(800), float32], Tensor[(10, 64), uint32], Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8]) {
  %97 = @func_3741() /* ty=(Tensor[(14, 5, 16), float64],) */;
  %98 = cast(%var_4240, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %99 = reshape(%98, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %100 = @func_3231(%99) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), bool], Tensor[(640), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), int64]) */;
  %101 = cast(%var_4247, dtype="float32") /* ty=Tensor[(800), float32] */;
  %102 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 64), uint32] */, dtype="uint32") /* ty=Tensor[(10, 64), uint32] */;
  %103 = reshape(%101, newshape=[800]) /* ty=Tensor[(800), float32] */;
  %104 = reshape(%102, newshape=[640]) /* ty=Tensor[(640), uint32] */;
  %105 = @func_4052(%103, %104) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(864), float32], Tensor[(800), float32], Tensor[(216, 4), float32], Tensor[(640), uint32], Tensor[(5, 16, 10), float32]) */;
  %106 = cast(%var_4247, dtype="float32") /* ty=Tensor[(800), float32] */;
  %107 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 64), uint32] */, dtype="uint32") /* ty=Tensor[(10, 64), uint32] */;
  %108 = reshape(%106, newshape=[800]) /* ty=Tensor[(800), float32] */;
  %109 = reshape(%107, newshape=[640]) /* ty=Tensor[(640), uint32] */;
  %110 = @func_4052(%108, %109) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(864), float32], Tensor[(800), float32], Tensor[(216, 4), float32], Tensor[(640), uint32], Tensor[(5, 16, 10), float32]) */;
  %111 = %97.0;
  %112 = %100.0;
  %113 = %105.4;
  %114 = @func_429() /* ty=Tensor[(10, 9, 3), float32] */;
  %115 = %110.1;
  (%111, %112, %var_4240, %113, %var_4247, meta[relay.Constant][3] /* ty=Tensor[(10, 64), uint32] */, %114, %115)
}

def @func_7689() -> Tensor[(10, 9, 3), float32] {
  @func_4162() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_5918() -> (Tensor[(21, 6), uint32], Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32]) {
  %116 = @func_2589() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(21, 6), uint32]) */;
  %117 = @func_2968() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %118 = %116.3;
  %119 = @func_553() /* ty=Tensor[(10, 9, 3), float64] */;
  %120 = %117.0;
  (%118, %119, %120)
}

def @func_4727() -> Tensor[(126), uint32] {
  %121 = @func_4660() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), int64], Tensor[(126), uint32]) */;
  %121.2
}

def @func_4722() -> Tensor[(10, 9, 3), int8] {
  %122 = @func_3770() /* ty=(Tensor[(10, 9, 3), bool],) */;
  %123 = %122.0;
  %124 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 9, 3), bool] */, dtype="int8") /* ty=Tensor[(10, 9, 3), int8] */;
  %125 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%123, dtype="int8") /* ty=Tensor[(10, 9, 3), int8] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%126, %127) /* ty=Tensor[(10, 9, 3), int8] */
}

def @func_6794(%var_6773: Tensor[(2, 8, 2), float32]) -> (Tensor[(2, 8, 2), float32], Tensor[(10, 9, 3), uint32], Tensor[(270), float32], Tensor[(2, 3, 9), bool], Tensor[(6), uint8], Tensor[(54), uint8]) {
  %128 = cast(%var_6773, dtype="float32") /* ty=Tensor[(2, 8, 2), float32] */;
  %129 = cast(meta[relay.Constant][5] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %130 = reshape(%129, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), float32] */;
  %131 = @func_3817(%130) /* ty=(Tensor[(10, 9, 3), uint32], Tensor[(10, 9, 3), float32]) */;
  %132 = cast(meta[relay.Constant][6] /* ty=Tensor[(6), uint8] */, dtype="uint8") /* ty=Tensor[(6), uint8] */;
  %133 = cast(meta[relay.Constant][7] /* ty=Tensor[(54), uint8] */, dtype="uint8") /* ty=Tensor[(54), uint8] */;
  %134 = cast(meta[relay.Constant][7] /* ty=Tensor[(54), uint8] */, dtype="uint8") /* ty=Tensor[(54), uint8] */;
  %135 = reshape(%132, newshape=[2, 3, 1]) /* ty=Tensor[(2, 3, 1), uint8] */;
  %136 = reshape(%133, newshape=[2, 3, 9]) /* ty=Tensor[(2, 3, 9), uint8] */;
  %137 = reshape(%134, newshape=[2, 3, 9]) /* ty=Tensor[(2, 3, 9), uint8] */;
  %138 = @func_4888(%135, %136, %137) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(2, 3, 9), bool], Tensor[(2, 3, 9), bool]) */;
  %139 = sqrt(%128) /* ty=Tensor[(2, 8, 2), float32] */;
  %140 = %131.0;
  %141 = %138.1;
  (%139, %140, meta[relay.Constant][5] /* ty=Tensor[(270), float32] */, %141, meta[relay.Constant][6] /* ty=Tensor[(6), uint8] */, meta[relay.Constant][7] /* ty=Tensor[(54), uint8] */)
}

def @func_373() -> Tensor[(10, 9, 3), float32] {
  %142 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 9, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  sin(%142) /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_530(%var_524: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32]) {
  %143 = cast(meta[relay.Constant][9] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %144 = cast(%var_524, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %145 = reshape(%143, newshape=[1, 3, 14]) /* ty=Tensor[(1, 3, 14), uint32] */;
  %146 = reshape(%144, newshape=[3, 3, 14]) /* ty=Tensor[(3, 3, 14), uint32] */;
  %147 = @func_471(%145, %146) /* ty=(Tensor[(3, 3, 14), bool], Tensor[(10, 9, 3), float32]) */;
  %148 = @func_429() /* ty=Tensor[(10, 9, 3), float32] */;
  %149 = cast(%148, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %150 = %147.1;
  %151 = atan(%149) /* ty=Tensor[(10, 9, 3), float32] */;
  (%150, meta[relay.Constant][9] /* ty=Tensor[(42), uint32] */, %var_524, %151)
}

def @func_553() -> Tensor[(10, 9, 3), float64] {
  %152 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
  %153 = cast(%152, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
  atanh(%153) /* ty=Tensor[(10, 9, 3), float64] */
}

def @func_5391(%var_5309: Tensor[(42), uint32], %var_5366: Tensor[(1512), uint32]) -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float64], Tensor[(126), bool], Tensor[(4, 15, 4), float32], Tensor[(315), float64], Tensor[(480), float64], Tensor[(126, 12), bool], Tensor[(1512), uint32], Tensor[(10, 9, 3), float64], Tensor[(42), float64]) {
  %154 = @func_4823() /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float64]) */;
  %155 = @func_1614() /* ty=(Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float64]) */;
  %156 = cast(%var_5309, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %157 = cast(meta[relay.Constant][10] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %158 = reshape(%156, newshape=[1, 3, 14]) /* ty=Tensor[(1, 3, 14), uint32] */;
  %159 = reshape(%157, newshape=[3, 3, 14]) /* ty=Tensor[(3, 3, 14), uint32] */;
  %160 = @func_471(%158, %159) /* ty=(Tensor[(3, 3, 14), bool], Tensor[(10, 9, 3), float32]) */;
  %161 = %160.0;
  %162 = cast(%161, dtype="bool") /* ty=Tensor[(3, 3, 14), bool] */;
  %163 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(126), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %164 = cast(meta[relay.Constant][10] /* ty=Tensor[(126), uint32] */, dtype="bool") /* ty=Tensor[(126), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?), bool] */;
  %166 = cast(meta[relay.Constant][11] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %167 = reshape(%166, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), float64] */;
  %168 = @func_3440(%167) /* ty=(Tensor[(2, 15, 16), bool], Tensor[(5, 9, 7), float64], Tensor[(315), float64]) */;
  %169 = equal(%164, %165) /* ty=Tensor[(126), bool] */;
  %170 = cast(%169, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %171 = cast(%var_5366, dtype="uint32") /* ty=Tensor[(1512), uint32] */;
  %172 = reshape(%170, newshape=[63, 2]) /* ty=Tensor[(63, 2), uint32] */;
  %173 = reshape(%171, newshape=[1512]) /* ty=Tensor[(1512), uint32] */;
  %174 = @func_3721(%172, %173) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(126, 12), bool], Tensor[(63, 2), uint32], Tensor[(1512), uint32]) */;
  %175 = cast(%var_5309, dtype="float64") /* ty=Tensor[(42), float64] */;
  %176 = atan(%175) /* ty=Tensor[(42), float64] */;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(42), float64] */;
  %178 = %154.1;
  %179 = %155.1;
  %180 = @func_4183() /* ty=Tensor[(4, 15, 4), float32] */;
  %181 = %168.2;
  %182 = %174.1;
  %183 = @func_626() /* ty=Tensor[(10, 9, 3), float64] */;
  %184 = rsqrt(%177) /* ty=Tensor[(42), float64] */;
  (%178, %179, %169, %180, %181, meta[relay.Constant][11] /* ty=Tensor[(480), float64] */, %182, %var_5366, %183, %184)
}

def @func_6080() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %185 = @func_5433() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) */;
  %186 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
  %187 = %185.0;
  (%186, %187)
}

def @func_5501() -> Tensor[(10, 9, 3), float32] {
  %188 = @func_4689() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %188.0
}

def @func_3231(%var_3216: Tensor[(126), uint32]) -> (Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), bool], Tensor[(640), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), int64]) {
  %189 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
  %190 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 270), float32] */, dtype="float32") /* ty=Tensor[(1, 270), float32] */;
  %191 = reshape(%190, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), float32] */;
  %192 = @func_1292(%191) /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), bool]) */;
  %193 = cast(%var_3216, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %194 = reshape(%193, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %195 = @func_3178(%194) /* ty=(Tensor[(10, 9, 3), bool], Tensor[(42), uint32], Tensor[(3, 3, 14), bool], Tensor[(4, 15, 4), int8], Tensor[(10, 16, 4), uint32], Tensor[(640), uint32]) */;
  %196 = @func_429() /* ty=Tensor[(10, 9, 3), float32] */;
  %197 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 270), float32] */, dtype="int64") /* ty=Tensor[(1, 270), int64] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="int64") /* ty=Tensor[(10, 9, 3), int64] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %201 = %189.0;
  %202 = %192.0;
  %203 = %195.5;
  %204 = add(%199, %200) /* ty=Tensor[(10, 9, 3), int64] */;
  (%201, %202, %203, %var_3216, %204)
}

def @func_3440(%var_3411: Tensor[(2, 15, 16), float64]) -> (Tensor[(2, 15, 16), bool], Tensor[(5, 9, 7), float64], Tensor[(315), float64]) {
  %205 = cast(%var_3411, dtype="float64") /* ty=Tensor[(2, 15, 16), float64] */;
  %206 = asin(%205) /* ty=Tensor[(2, 15, 16), float64] */;
  %207 = cast(%206, dtype="bool") /* ty=Tensor[(2, 15, 16), bool] */;
  %208 = shape_of(%var_3411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%var_3411, dtype="bool") /* ty=Tensor[(2, 15, 16), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %211 = cast(meta[relay.Constant][13] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %212 = reshape(%211, newshape=[5, 9, 7]) /* ty=Tensor[(5, 9, 7), float64] */;
  %213 = @func_2480(%212) /* ty=(Tensor[(5, 9, 7), float64],) */;
  %214 = not_equal(%209, %210) /* ty=Tensor[(2, 15, 16), bool] */;
  %215 = %213.0;
  (%214, %215, meta[relay.Constant][13] /* ty=Tensor[(315), float64] */)
}

def @func_3788() -> Tensor[(10, 9, 3), float32] {
  %216 = @func_680() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %216.0
}

def @func_4130() -> (Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), int8]) {
  %217 = @func_2968() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %218 = %217.0;
  %219 = @func_2589() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(21, 6), uint32]) */;
  %220 = %219.1;
  %221 = cast(%220, dtype="int8") /* ty=Tensor[(10, 9, 3), int8] */;
  %222 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%218, dtype="int8") /* ty=Tensor[(10, 9, 3), int8] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %225 = @func_3027() /* ty=Tensor[(4, 15, 4), float64] */;
  %226 = logical_xor(%223, %224) /* ty=Tensor[(10, 9, 3), int8] */;
  (%225, %226)
}

def @func_5696(%var_5660: Tensor[(4, 15, 4), float64], %var_5672: Tensor[(126), uint32], %var_5673: Tensor[(3, 504), uint32]) -> (Tensor[(4, 15, 4), bool], Tensor[(10, 9, 3), float32], Tensor[(126), uint32], Tensor[(3, 504), uint32], Tensor[(4, 15, 4), int64], Tensor[(10, 16, 4), uint32], Tensor[(10, 9, 3), float32]) {
  %227 = @func_5109() /* ty=(Tensor[(4, 15, 4), float64],) */;
  %228 = %227.0;
  %229 = cast(%var_5660, dtype="bool") /* ty=Tensor[(4, 15, 4), bool] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%228, dtype="bool") /* ty=Tensor[(4, 15, 4), bool] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %233 = cast(%var_5672, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %234 = cast(%var_5673, dtype="uint32") /* ty=Tensor[(3, 504), uint32] */;
  %235 = reshape(%233, newshape=[126, 1]) /* ty=Tensor[(126, 1), uint32] */;
  %236 = reshape(%234, newshape=[126, 12]) /* ty=Tensor[(126, 12), uint32] */;
  %237 = @func_2260(%235, %236) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(126, 12), bool]) */;
  %238 = cast(%var_5660, dtype="int64") /* ty=Tensor[(4, 15, 4), int64] */;
  %239 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%228, dtype="int64") /* ty=Tensor[(4, 15, 4), int64] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %242 = @func_1940() /* ty=(Tensor[(10, 16, 4), uint32], Tensor[(160, 4), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) */;
  %243 = @func_968() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %244 = greater_equal(%231, %232) /* ty=Tensor[(4, 15, 4), bool] */;
  %245 = %237.1;
  %246 = right_shift(%240, %241) /* ty=Tensor[(4, 15, 4), int64] */;
  %247 = %242.0;
  %248 = %243.0;
  (%244, %245, %var_5672, %var_5673, %246, %247, %248)
}

def @func_736() -> Tensor[(10, 9, 3), float64] {
  @func_626() /* ty=Tensor[(10, 9, 3), float64] */
}

def @func_4741(%var_4733: Tensor[(4, 15, 13), float32]) -> (Tensor[(4, 15, 13), bool],) {
  %249 = cast(%var_4733, dtype="float32") /* ty=Tensor[(4, 15, 13), float32] */;
  %250 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(4, 15, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 15, 13), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 13), float32] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %253 = floor_divide(%251, %252) /* ty=Tensor[(4, 15, 13), float32] */;
  %254 = cast(%253, dtype="bool") /* ty=Tensor[(4, 15, 13), bool] */;
  %255 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(4, 15, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 15, 13), float32] */, dtype="bool") /* ty=Tensor[(4, 15, 13), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %258 = not_equal(%256, %257) /* ty=Tensor[(4, 15, 13), bool] */;
  (%258,)
}

def @func_405(%var_398: Tensor[(4, 15, 4), int8], %var_399: Tensor[(4, 15, 4), int8]) -> (Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float32]) {
  %259 = cast(%var_399, dtype="int8") /* ty=Tensor[(4, 15, 4), int8] */;
  %260 = shape_of(%var_398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%var_398, dtype="int8") /* ty=Tensor[(4, 15, 4), int8] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %263 = subtract(%261, %262) /* ty=Tensor[(4, 15, 4), int8] */;
  %264 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
  (%263, %264)
}

def @func_6016() -> (Tensor[(14, 5, 16), float64], Tensor[(10, 9, 3), bool], Tensor[(126), float32], Tensor[(4, 15, 4), int8], Tensor[(240, 1), int8]) {
  %265 = @func_3741() /* ty=(Tensor[(14, 5, 16), float64],) */;
  %266 = @func_3562() /* ty=(Tensor[(10, 9, 3), bool],) */;
  %267 = %266.0;
  %268 = cast(%267, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
  %269 = reshape(%268, newshape=[30, 9]) /* ty=Tensor[(30, 9), float64] */;
  %270 = @func_2649(%269) /* ty=(Tensor[(126), float32], Tensor[(10, 9, 3), int32], Tensor[(30, 9), float32]) */;
  %271 = cast(meta[relay.Constant][15] /* ty=Tensor[(240, 1), int8] */, dtype="int8") /* ty=Tensor[(240, 1), int8] */;
  %272 = cast(meta[relay.Constant][15] /* ty=Tensor[(240, 1), int8] */, dtype="int8") /* ty=Tensor[(240, 1), int8] */;
  %273 = reshape(%271, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), int8] */;
  %274 = reshape(%272, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), int8] */;
  %275 = @func_405(%273, %274) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float32]) */;
  %276 = %265.0;
  %277 = %270.0;
  %278 = %275.0;
  (%276, %267, %277, %278, meta[relay.Constant][15] /* ty=Tensor[(240, 1), int8] */)
}

def @func_4430() -> (Tensor[(10, 9, 3), bool], Tensor[(4, 15, 4), float32], Tensor[(10, 9, 3), int8], Tensor[(10, 9, 3), float64]) {
  %279 = @func_3613() /* ty=(Tensor[(10, 9, 3), bool],) */;
  %280 = @func_3027() /* ty=Tensor[(4, 15, 4), float64] */;
  %281 = cast(%280, dtype="float64") /* ty=Tensor[(4, 15, 4), float64] */;
  %282 = sin(%281) /* ty=Tensor[(4, 15, 4), float64] */;
  %283 = cast(%280, dtype="float32") /* ty=Tensor[(4, 15, 4), float32] */;
  %284 = shape_of(%282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%282, dtype="float32") /* ty=Tensor[(4, 15, 4), float32] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %287 = @func_4130() /* ty=(Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), int8]) */;
  %288 = %279.0;
  %289 = add(%285, %286) /* ty=Tensor[(4, 15, 4), float32] */;
  %290 = %287.1;
  %291 = @func_626() /* ty=Tensor[(10, 9, 3), float64] */;
  (%288, %289, %290, %291)
}

def @func_7713() -> (Tensor[(10, 9, 3), float64],) {
  %292 = @func_4823() /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float64]) */;
  %293 = %292.1;
  (%293,)
}

def @func_7621(%var_7606: Tensor[(6, 4, 1), uint32]) -> (Tensor[(6, 4, 12), uint32], Tensor[(10, 9, 3), float32]) {
  %294 = cast(%var_7606, dtype="uint32") /* ty=Tensor[(6, 4, 1), uint32] */;
  %295 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 4, 12), uint32] */, dtype="uint32") /* ty=Tensor[(6, 4, 12), uint32] */;
  %296 = @func_2893() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %297 = maximum(%294, %295) /* ty=Tensor[(6, 4, 12), uint32] */;
  %298 = %296.2;
  (%297, %298)
}

def @func_1173() -> (Tensor[(10, 9, 3), float32],) {
  %299 = @func_882() /* ty=Tensor[(10, 9, 3), float32] */;
  (%299,)
}

def @func_4162() -> Tensor[(10, 9, 3), float32] {
  %300 = @func_1173() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %300.0
}

def @func_3140(%var_3126: Tensor[(880), int16]) -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(11, 10, 8), int16], Tensor[(880), int16]) {
  %301 = @func_2968() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %302 = @func_1614() /* ty=(Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float64]) */;
  %303 = @func_968() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %304 = cast(%var_3126, dtype="int16") /* ty=Tensor[(880), int16] */;
  %305 = reshape(%304, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), int16] */;
  %306 = @func_1770(%305) /* ty=(Tensor[(11, 10, 8), int16], Tensor[(10, 9, 3), float32]) */;
  %307 = %301.0;
  %308 = %302.0;
  %309 = %303.0;
  %310 = %306.0;
  (%307, %308, %309, %310, %var_3126)
}

def @func_6901() -> (Tensor[(10, 16, 4), uint32],) {
  %311 = @func_3342() /* ty=Tensor[(10, 16, 4), uint32] */;
  (%311,)
}

def @func_5755() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(30, 9), float32]) {
  %312 = @func_4162() /* ty=Tensor[(10, 9, 3), float32] */;
  %313 = cast(%312, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
  %314 = reshape(%313, newshape=[30, 9]) /* ty=Tensor[(30, 9), float64] */;
  %315 = @func_2649(%314) /* ty=(Tensor[(126), float32], Tensor[(10, 9, 3), int32], Tensor[(30, 9), float32]) */;
  %316 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
  %317 = %315.2;
  (%316, %312, %317)
}

def @func_3562() -> (Tensor[(10, 9, 3), bool],) {
  %318 = @func_1044() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64]) */;
  %319 = %318.0;
  (%319,)
}

def @func_6314() -> (Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), float32]) {
  %320 = @func_5109() /* ty=(Tensor[(4, 15, 4), float64],) */;
  %321 = %320.0;
  %322 = @func_4162() /* ty=Tensor[(10, 9, 3), float32] */;
  (%321, %322)
}

def @func_6044() -> (Tensor[(4, 15, 4), float64],) {
  %323 = @func_4130() /* ty=(Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), int8]) */;
  %324 = %323.0;
  (%324,)
}

def @main(%var_7726: Tensor[(1, 12, 1), float64], %var_7727: Tensor[(1, 12, 8), float64], %var_7765: Tensor[(42), uint32], %var_7766: Tensor[(640), uint32], %var_7768: Tensor[(3, 12, 8), float64]) -> (Tensor[(1, 12, 8), float64], Tensor[(1, 12, 8), bool], Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(640), uint32], Tensor[(3, 12, 8), float32]) {
  %325 = cast(%var_7726, dtype="float64") /* ty=Tensor[(1, 12, 1), float64] */;
  %326 = cast(%var_7727, dtype="float64") /* ty=Tensor[(1, 12, 8), float64] */;
  %327 = cast(%var_7726, dtype="bool") /* ty=Tensor[(1, 12, 1), bool] */;
  %328 = cast(%var_7727, dtype="bool") /* ty=Tensor[(1, 12, 8), bool] */;
  %329 = @func_6314() /* ty=(Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), float32]) */;
  %330 = %329.0;
  %331 = cast(%330, dtype="float64") /* ty=Tensor[(4, 15, 4), float64] */;
  %332 = cast(%var_7765, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %333 = cast(%var_7766, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %334 = reshape(%332, newshape=[42, 1]) /* ty=Tensor[(42, 1), uint32] */;
  %335 = reshape(%333, newshape=[1, 640]) /* ty=Tensor[(1, 640), uint32] */;
  %336 = @func_7242(%334, %335) /* ty=(Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 16, 4), uint32], Tensor[(1, 640), uint32], Tensor[(42, 126), uint64]) */;
  %337 = cast(%var_7727, dtype="float32") /* ty=Tensor[(1, 12, 8), float32] */;
  %338 = cast(%var_7768, dtype="float32") /* ty=Tensor[(3, 12, 8), float32] */;
  %339 = divide(%325, %326) /* ty=Tensor[(1, 12, 8), float64] */;
  %340 = less_equal(%327, %328) /* ty=Tensor[(1, 12, 8), bool] */;
  %341 = log2(%331) /* ty=Tensor[(4, 15, 4), float64] */;
  %342 = %336.2;
  %343 = power(%337, %338) /* ty=Tensor[(3, 12, 8), float32] */;
  (%339, %340, %341, %342, %var_7765, %var_7766, %343)
}

def @func_4888(%var_4845: Tensor[(2, 3, 1), uint8], %var_4846: Tensor[(2, 3, 9), uint8], %var_4882: Tensor[(2, 3, 9), uint8]) -> (Tensor[(10, 9, 3), float32], Tensor[(2, 3, 9), bool], Tensor[(2, 3, 9), bool]) {
  %344 = @func_2968() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %345 = cast(%var_4845, dtype="uint8") /* ty=Tensor[(2, 3, 1), uint8] */;
  %346 = cast(%var_4846, dtype="uint8") /* ty=Tensor[(2, 3, 9), uint8] */;
  %347 = bitwise_xor(%345, %346) /* ty=Tensor[(2, 3, 9), uint8] */;
  %348 = cast(%347, dtype="float64") /* ty=Tensor[(2, 3, 9), float64] */;
  %349 = sin(%348) /* ty=Tensor[(2, 3, 9), float64] */;
  %350 = cast(%var_4846, dtype="bool") /* ty=Tensor[(2, 3, 9), bool] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%349, dtype="bool") /* ty=Tensor[(2, 3, 9), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %354 = cast(%var_4882, dtype="bool") /* ty=Tensor[(2, 3, 9), bool] */;
  %355 = shape_of(%var_4846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%var_4846, dtype="bool") /* ty=Tensor[(2, 3, 9), bool] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %358 = %344.0;
  %359 = less_equal(%352, %353) /* ty=Tensor[(2, 3, 9), bool] */;
  %360 = equal(%356, %357) /* ty=Tensor[(2, 3, 9), bool] */;
  (%358, %359, %360)
}

def @func_7543() -> Tensor[(126), float32] {
  %361 = @func_6016() /* ty=(Tensor[(14, 5, 16), float64], Tensor[(10, 9, 3), bool], Tensor[(126), float32], Tensor[(4, 15, 4), int8], Tensor[(240, 1), int8]) */;
  %361.2
}

def @func_2400() -> (Tensor[(10, 9, 3), bool],) {
  %362 = @func_1099() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
  %363 = %362.0;
  (%363,)
}

def @func_626() -> Tensor[(10, 9, 3), float64] {
  %364 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
  log(%365) /* ty=Tensor[(10, 9, 3), float64] */
}

def @func_6518() -> (Tensor[(10, 9, 3), float32],) {
  %366 = @func_4162() /* ty=Tensor[(10, 9, 3), float32] */;
  (%366,)
}

def @func_5255(%var_5181: Tensor[(11, 6, 12), float64], %var_5182: Tensor[(11, 6, 12), float64]) -> (Tensor[(11, 6, 12), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool], Tensor[(4, 15, 13), bool], Tensor[(640), int32], Tensor[(640), uint32], Tensor[(126), float32], Tensor[(11, 6, 12), bool]) {
  %367 = cast(%var_5182, dtype="float64") /* ty=Tensor[(11, 6, 12), float64] */;
  %368 = shape_of(%var_5181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%var_5181, dtype="float64") /* ty=Tensor[(11, 6, 12), float64] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %371 = @func_2400() /* ty=(Tensor[(10, 9, 3), bool],) */;
  %372 = cast(meta[relay.Constant][17] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
  %373 = reshape(%372, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), float32] */;
  %374 = @func_4741(%373) /* ty=(Tensor[(4, 15, 13), bool],) */;
  %375 = %374.0;
  %376 = cast(meta[relay.Constant][17] /* ty=Tensor[(780), float32] */, dtype="bool") /* ty=Tensor[(780), bool] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="bool") /* ty=Tensor[(4, 15, 13), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %380 = cast(meta[relay.Constant][18] /* ty=Tensor[(640), uint32] */, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %381 = reshape(%380, newshape=[640]) /* ty=Tensor[(640), uint32] */;
  %382 = @func_2030(%381) /* ty=(Tensor[(10, 9, 3), float64], Tensor[(640), bool], Tensor[(640), int32]) */;
  %383 = @func_4727() /* ty=Tensor[(126), uint32] */;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(126), float32] */;
  %385 = cast(%var_5181, dtype="bool") /* ty=Tensor[(11, 6, 12), bool] */;
  %386 = shape_of(%var_5182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%var_5182, dtype="bool") /* ty=Tensor[(11, 6, 12), bool] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %389 = divide(%369, %370) /* ty=Tensor[(11, 6, 12), float64] */;
  %390 = @func_4782() /* ty=Tensor[(10, 9, 3), float32] */;
  %391 = %371.0;
  %392 = logical_or(%378, %379) /* ty=Tensor[(4, 15, 13), bool] */;
  %393 = %382.2;
  %394 = acosh(%384) /* ty=Tensor[(126), float32] */;
  %395 = not_equal(%387, %388) /* ty=Tensor[(11, 6, 12), bool] */;
  (%389, %390, %391, %392, %393, meta[relay.Constant][18] /* ty=Tensor[(640), uint32] */, %394, %395)
}

def @func_6927(%var_6922: Tensor[(10, 15, 2), float32]) -> Tensor[(10, 15, 2), float32] {
  %396 = cast(%var_6922, dtype="float32") /* ty=Tensor[(10, 15, 2), float32] */;
  rsqrt(%396) /* ty=Tensor[(10, 15, 2), float32] */
}

def @func_3071(%var_3062: Tensor[(8, 12, 15), float64]) -> (Tensor[(8, 12, 15), float64],) {
  %397 = cast(%var_3062, dtype="float64") /* ty=Tensor[(8, 12, 15), float64] */;
  %398 = sin(%397) /* ty=Tensor[(8, 12, 15), float64] */;
  (%398,)
}

def @func_7333(%var_7306: Tensor[(4, 15, 4), float64], %var_7324: Tensor[(270), float64]) -> (Tensor[(4, 15, 4), float32], Tensor[(4, 15, 4), bool], Tensor[(30, 9), float32], Tensor[(270), float64]) {
  %399 = @func_5109() /* ty=(Tensor[(4, 15, 4), float64],) */;
  %400 = %399.0;
  %401 = cast(%400, dtype="float32") /* ty=Tensor[(4, 15, 4), float32] */;
  %402 = cast(%var_7306, dtype="bool") /* ty=Tensor[(4, 15, 4), bool] */;
  %403 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%400, dtype="bool") /* ty=Tensor[(4, 15, 4), bool] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %406 = cast(%var_7324, dtype="float64") /* ty=Tensor[(270), float64] */;
  %407 = reshape(%406, newshape=[30, 9]) /* ty=Tensor[(30, 9), float64] */;
  %408 = @func_2649(%407) /* ty=(Tensor[(126), float32], Tensor[(10, 9, 3), int32], Tensor[(30, 9), float32]) */;
  %409 = acos(%401) /* ty=Tensor[(4, 15, 4), float32] */;
  %410 = less(%404, %405) /* ty=Tensor[(4, 15, 4), bool] */;
  %411 = %408.2;
  (%409, %410, %411, %var_7324)
}

def @func_680() -> (Tensor[(10, 9, 3), float32],) {
  %412 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %414 = asinh(%413) /* ty=Tensor[(10, 9, 3), float32] */;
  (%414,)
}

def @func_3472(%var_3466: Tensor[(10, 9, 3), float64]) -> Tensor[(10, 9, 3), int64] {
  %415 = @func_736() /* ty=Tensor[(10, 9, 3), float64] */;
  %416 = cast(%var_3466, dtype="int64") /* ty=Tensor[(10, 9, 3), int64] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="int64") /* ty=Tensor[(10, 9, 3), int64] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%418, %419) /* ty=Tensor[(10, 9, 3), int64] */
}

def @func_1292(%var_1271: Tensor[(10, 9, 3), float32]) -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), bool]) {
  %420 = @func_1173() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %421 = %420.0;
  %422 = cast(%var_1271, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%421, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %426 = cast(%var_1271, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %427 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%421, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %430 = logical_or(%424, %425) /* ty=Tensor[(10, 9, 3), bool] */;
  %431 = not_equal(%428, %429) /* ty=Tensor[(10, 9, 3), bool] */;
  (%430, %431)
}

def @func_2260(%var_2248: Tensor[(126, 1), uint32], %var_2256: Tensor[(126, 12), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(126, 12), bool]) {
  %432 = cast(%var_2248, dtype="uint32") /* ty=Tensor[(126, 1), uint32] */;
  %433 = reshape(%432, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %434 = @func_530(%433) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32]) */;
  %435 = cast(%var_2248, dtype="bool") /* ty=Tensor[(126, 1), bool] */;
  %436 = cast(%var_2256, dtype="bool") /* ty=Tensor[(126, 12), bool] */;
  %437 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
  %438 = %434.0;
  %439 = less_equal(%435, %436) /* ty=Tensor[(126, 12), bool] */;
  (%437, %438, %439)
}

def @func_5109() -> (Tensor[(4, 15, 4), float64],) {
  %440 = @func_3027() /* ty=Tensor[(4, 15, 4), float64] */;
  (%440,)
}

def @func_2893() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %441 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %442 = @func_1173() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %443 = @func_2102() /* ty=Tensor[(10, 9, 3), float32] */;
  %444 = %441.0;
  %445 = %442.0;
  (%443, %444, %445)
}

def @func_7531() -> (Tensor[(4, 15, 4), float64], Tensor[(5, 9, 7), float64], Tensor[(480), float64], Tensor[(10, 9, 3), int32], Tensor[(270, 1), float64]) {
  %446 = @func_5109() /* ty=(Tensor[(4, 15, 4), float64],) */;
  %447 = cast(meta[relay.Constant][19] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %448 = reshape(%447, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), float64] */;
  %449 = @func_3440(%448) /* ty=(Tensor[(2, 15, 16), bool], Tensor[(5, 9, 7), float64], Tensor[(315), float64]) */;
  %450 = cast(meta[relay.Constant][20] /* ty=Tensor[(270, 1), float64] */, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
  %451 = reshape(%450, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), float64] */;
  %452 = @func_2179(%451) /* ty=(Tensor[(10, 9, 3), int32],) */;
  %453 = %446.0;
  %454 = %449.1;
  %455 = %452.0;
  (%453, %454, meta[relay.Constant][19] /* ty=Tensor[(480), float64] */, %455, meta[relay.Constant][20] /* ty=Tensor[(270, 1), float64] */)
}

def @func_7493(%var_7481: Tensor[(2, 12, 11), float64]) -> (Tensor[(2, 12, 11), uint16], Tensor[(6, 9, 16), float32], Tensor[(12, 72), float32]) {
  %456 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 1, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 1, 11), float64] */;
  %457 = erf(%456) /* ty=Tensor[(2, 1, 11), float64] */;
  %458 = cast(%457, dtype="uint16") /* ty=Tensor[(2, 1, 11), uint16] */;
  %459 = cast(%var_7481, dtype="uint16") /* ty=Tensor[(2, 12, 11), uint16] */;
  %460 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 72), float32] */, dtype="float32") /* ty=Tensor[(12, 72), float32] */;
  %461 = reshape(%460, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
  %462 = @func_2291(%461) /* ty=(Tensor[(6, 9, 16), float32],) */;
  %463 = right_shift(%458, %459) /* ty=Tensor[(2, 12, 11), uint16] */;
  %464 = %462.0;
  (%463, %464, meta[relay.Constant][22] /* ty=Tensor[(12, 72), float32] */)
}

def @func_7400() -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) {
  %465 = @func_3770() /* ty=(Tensor[(10, 9, 3), bool],) */;
  %466 = @func_5070() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %467 = %465.0;
  %468 = %466.1;
  (%467, %468)
}

def @func_2102() -> Tensor[(10, 9, 3), float32] {
  %469 = @func_429() /* ty=Tensor[(10, 9, 3), float32] */;
  %470 = @func_553() /* ty=Tensor[(10, 9, 3), float64] */;
  %471 = cast(%470, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %472 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%469, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%473, %474) /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_471(%var_452: Tensor[(1, 3, 14), uint32], %var_453: Tensor[(3, 3, 14), uint32]) -> (Tensor[(3, 3, 14), bool], Tensor[(10, 9, 3), float32]) {
  %475 = cast(%var_452, dtype="bool") /* ty=Tensor[(1, 3, 14), bool] */;
  %476 = cast(%var_453, dtype="bool") /* ty=Tensor[(3, 3, 14), bool] */;
  %477 = greater_equal(%475, %476) /* ty=Tensor[(3, 3, 14), bool] */;
  %478 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
  (%477, %478)
}

def @func_2030(%var_2013: Tensor[(640), uint32]) -> (Tensor[(10, 9, 3), float64], Tensor[(640), bool], Tensor[(640), int32]) {
  %479 = @func_1044() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64]) */;
  %480 = cast(meta[relay.Constant][23] /* ty=Tensor[(640), uint32] */, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %481 = reshape(%480, newshape=[640]) /* ty=Tensor[(640), uint32] */;
  %482 = @func_1450(%481) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float32], Tensor[(10, 16, 4), uint32], Tensor[(640), uint32], Tensor[(4, 15, 4), bool]) */;
  %483 = %482.3;
  %484 = cast(meta[relay.Constant][23] /* ty=Tensor[(640), uint32] */, dtype="bool") /* ty=Tensor[(640), bool] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(1), int32] */;
  %486 = cast(%483, dtype="bool") /* ty=Tensor[(640), bool] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?), bool] */;
  %488 = cast(%var_2013, dtype="int32") /* ty=Tensor[(640), int32] */;
  %489 = shape_of(%483, dtype="int32") /* ty=Tensor[(1), int32] */;
  %490 = cast(%483, dtype="int32") /* ty=Tensor[(640), int32] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?), int32] */;
  %492 = %479.2;
  %493 = not_equal(%486, %487) /* ty=Tensor[(640), bool] */;
  %494 = minimum(%490, %491) /* ty=Tensor[(640), int32] */;
  (%492, %493, %494)
}

def @func_4578(%var_4546: Tensor[(480), float64]) -> (Tensor[(10, 9, 3), float32], Tensor[(315), float64], Tensor[(480), float64], Tensor[(10, 9, 3), float32]) {
  %495 = @func_2589() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(21, 6), uint32]) */;
  %496 = cast(%var_4546, dtype="float64") /* ty=Tensor[(480), float64] */;
  %497 = reshape(%496, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), float64] */;
  %498 = @func_3440(%497) /* ty=(Tensor[(2, 15, 16), bool], Tensor[(5, 9, 7), float64], Tensor[(315), float64]) */;
  %499 = %495.1;
  %500 = %498.2;
  %501 = @func_2102() /* ty=Tensor[(10, 9, 3), float32] */;
  (%499, %500, %var_4546, %501)
}

def @func_5886(%var_5876: Tensor[(2, 12, 3), float64], %var_5877: Tensor[(2, 12, 3), float64]) -> (Tensor[(2, 12, 3), float64], Tensor[(2, 12, 3), float32]) {
  %502 = cast(%var_5877, dtype="float64") /* ty=Tensor[(2, 12, 3), float64] */;
  %503 = shape_of(%var_5876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%var_5876, dtype="float64") /* ty=Tensor[(2, 12, 3), float64] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %506 = cast(%var_5877, dtype="float32") /* ty=Tensor[(2, 12, 3), float32] */;
  %507 = divide(%504, %505) /* ty=Tensor[(2, 12, 3), float64] */;
  %508 = sin(%506) /* ty=Tensor[(2, 12, 3), float32] */;
  (%507, %508)
}

def @func_3770() -> (Tensor[(10, 9, 3), bool],) {
  %509 = @func_1228() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
  %510 = %509.1;
  (%510,)
}

def @func_5812() -> (Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(126), uint32]) {
  %511 = @func_5433() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) */;
  %512 = cast(meta[relay.Constant][24] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %513 = reshape(%512, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %514 = @func_3178(%513) /* ty=(Tensor[(10, 9, 3), bool], Tensor[(42), uint32], Tensor[(3, 3, 14), bool], Tensor[(4, 15, 4), int8], Tensor[(10, 16, 4), uint32], Tensor[(640), uint32]) */;
  %515 = %511.0;
  %516 = %514.3;
  (%515, %516, meta[relay.Constant][24] /* ty=Tensor[(126), uint32] */)
}

def @func_5484() -> (Tensor[(10, 9, 3), float64],) {
  %517 = @func_553() /* ty=Tensor[(10, 9, 3), float64] */;
  (%517,)
}

def @func_7056() -> Tensor[(10, 9, 3), float32] {
  %518 = @func_1099() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
  %518.1
}

def @func_6624() -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32]) {
  %519 = @func_5557() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %520 = @func_553() /* ty=Tensor[(10, 9, 3), float64] */;
  %521 = %519.0;
  (%520, %521)
}

def @func_2376(%var_2372: Tensor[(15, 8, 9), float64]) -> (Tensor[(15, 8, 9), float64],) {
  %522 = cast(%var_2372, dtype="float64") /* ty=Tensor[(15, 8, 9), float64] */;
  %523 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(15, 8, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 8, 9), float64] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %526 = power(%524, %525) /* ty=Tensor[(15, 8, 9), float64] */;
  (%526,)
}

def @func_3342() -> Tensor[(10, 16, 4), uint32] {
  %527 = @func_1940() /* ty=(Tensor[(10, 16, 4), uint32], Tensor[(160, 4), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) */;
  %527.0
}

def @func_3721(%var_3706: Tensor[(63, 2), uint32], %var_3707: Tensor[(1512), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(126, 12), bool], Tensor[(63, 2), uint32], Tensor[(1512), uint32]) {
  %528 = cast(%var_3706, dtype="uint32") /* ty=Tensor[(63, 2), uint32] */;
  %529 = cast(%var_3707, dtype="uint32") /* ty=Tensor[(1512), uint32] */;
  %530 = reshape(%528, newshape=[126, 1]) /* ty=Tensor[(126, 1), uint32] */;
  %531 = reshape(%529, newshape=[126, 12]) /* ty=Tensor[(126, 12), uint32] */;
  %532 = @func_2260(%530, %531) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(126, 12), bool]) */;
  %533 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
  %534 = %532.2;
  (%533, %534, %var_3706, %var_3707)
}

def @func_822(%var_762: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64], Tensor[(126), uint32], Tensor[(126), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %535 = cast(%var_762, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %536 = reshape(%535, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %537 = @func_530(%536) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32]) */;
  %538 = cast(meta[relay.Constant][26] /* ty=Tensor[(126), uint32] */, dtype="bool") /* ty=Tensor[(126), bool] */;
  %539 = shape_of(%var_762, dtype="int32") /* ty=Tensor[(1), int32] */;
  %540 = cast(%var_762, dtype="bool") /* ty=Tensor[(126), bool] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?), bool] */;
  %542 = greater_equal(%540, %541) /* ty=Tensor[(126), bool] */;
  %543 = cast(%var_762, dtype="float32") /* ty=Tensor[(126), float32] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(1), int32] */;
  %545 = cast(%542, dtype="float32") /* ty=Tensor[(126), float32] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?), float32] */;
  %547 = @func_429() /* ty=Tensor[(10, 9, 3), float32] */;
  %548 = @func_553() /* ty=Tensor[(10, 9, 3), float64] */;
  %549 = %537.2;
  %550 = power(%545, %546) /* ty=Tensor[(126), float32] */;
  %551 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
  %552 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
  (%547, %548, %549, %550, %551, %552)
}

def @func_4527(%var_4506: Tensor[(480), float64]) -> (Tensor[(10, 9, 3), float32], Tensor[(315), float64], Tensor[(480), float64], Tensor[(4, 15, 4), float32]) {
  %553 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %554 = cast(%var_4506, dtype="float64") /* ty=Tensor[(480), float64] */;
  %555 = reshape(%554, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), float64] */;
  %556 = @func_3440(%555) /* ty=(Tensor[(2, 15, 16), bool], Tensor[(5, 9, 7), float64], Tensor[(315), float64]) */;
  %557 = %553.0;
  %558 = %556.2;
  %559 = @func_4183() /* ty=Tensor[(4, 15, 4), float32] */;
  (%557, %558, %var_4506, %559)
}

def @func_6469(%var_6414: int16, %var_6415: Tensor[(5, 16, 1), int16], %var_6461: Tensor[(54), uint8]) -> (Tensor[(5, 16, 1), bool], Tensor[(10, 9, 3), bool], Tensor[(270), float32], Tensor[(2, 3, 9), bool], Tensor[(6), uint8], Tensor[(54), uint8]) {
  %560 = cast(%var_6414, dtype="bool") /* ty=bool */;
  %561 = cast(%var_6415, dtype="bool") /* ty=Tensor[(5, 16, 1), bool] */;
  %562 = cast(meta[relay.Constant][27] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %563 = reshape(%562, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), float32] */;
  %564 = @func_1292(%563) /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), bool]) */;
  %565 = cast(meta[relay.Constant][28] /* ty=Tensor[(6), uint8] */, dtype="uint8") /* ty=Tensor[(6), uint8] */;
  %566 = cast(%var_6461, dtype="uint8") /* ty=Tensor[(54), uint8] */;
  %567 = cast(%var_6461, dtype="uint8") /* ty=Tensor[(54), uint8] */;
  %568 = reshape(%565, newshape=[2, 3, 1]) /* ty=Tensor[(2, 3, 1), uint8] */;
  %569 = reshape(%566, newshape=[2, 3, 9]) /* ty=Tensor[(2, 3, 9), uint8] */;
  %570 = reshape(%567, newshape=[2, 3, 9]) /* ty=Tensor[(2, 3, 9), uint8] */;
  %571 = @func_4888(%568, %569, %570) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(2, 3, 9), bool], Tensor[(2, 3, 9), bool]) */;
  %572 = greater(%560, %561) /* ty=Tensor[(5, 16, 1), bool] */;
  %573 = %564.0;
  %574 = %571.2;
  (%572, %573, meta[relay.Constant][27] /* ty=Tensor[(270), float32] */, %574, meta[relay.Constant][28] /* ty=Tensor[(6), uint8] */, %var_6461)
}

def @func_7424() -> (Tensor[(10, 9, 3), float64], Tensor[(4, 15, 4), int8]) {
  %575 = @func_6624() /* ty=(Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32]) */;
  %576 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
  %577 = %575.0;
  %578 = %576.0;
  (%577, %578)
}

def @func_1940() -> (Tensor[(10, 16, 4), uint32], Tensor[(160, 4), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) {
  %579 = cast(meta[relay.Constant][29] /* ty=Tensor[(160, 4), uint32] */, dtype="uint32") /* ty=Tensor[(160, 4), uint32] */;
  %580 = reshape(%579, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint32] */;
  %581 = @func_1383(%580) /* ty=(Tensor[(10, 16, 4), uint32],) */;
  %582 = @func_1099() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
  %583 = %582.0;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %585 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
  %586 = cast(%585, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %587 = rsqrt(%586) /* ty=Tensor[(10, 9, 3), float32] */;
  %588 = cast(%587, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
  %589 = cosh(%588) /* ty=Tensor[(10, 9, 3), float64] */;
  %590 = cast(%583, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%589, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %594 = %581.0;
  %595 = tan(%584) /* ty=Tensor[(10, 9, 3), float32] */;
  %596 = logical_and(%592, %593) /* ty=Tensor[(10, 9, 3), bool] */;
  (%594, meta[relay.Constant][29] /* ty=Tensor[(160, 4), uint32] */, %595, %596)
}

def @func_4660() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), int64], Tensor[(126), uint32]) {
  %597 = cast(meta[relay.Constant][30] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %598 = reshape(%597, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %599 = @func_3231(%598) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), bool], Tensor[(640), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), int64]) */;
  %600 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
  %601 = %599.4;
  (%600, %601, meta[relay.Constant][30] /* ty=Tensor[(126), uint32] */)
}

def @func_1316() -> (Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(240), int8]) {
  %602 = @func_1099() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
  %603 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %604 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %605 = reshape(%603, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), int8] */;
  %606 = reshape(%604, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), int8] */;
  %607 = @func_405(%605, %606) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float32]) */;
  %608 = %602.1;
  %609 = %607.0;
  (%608, %609, meta[relay.Constant][31] /* ty=Tensor[(240), int8] */)
}

def @func_2649(%var_2624: Tensor[(30, 9), float64]) -> (Tensor[(126), float32], Tensor[(10, 9, 3), int32], Tensor[(30, 9), float32]) {
  %610 = @func_2589() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(21, 6), uint32]) */;
  %611 = cast(%var_2624, dtype="float64") /* ty=Tensor[(30, 9), float64] */;
  %612 = reshape(%611, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), float64] */;
  %613 = @func_2179(%612) /* ty=(Tensor[(10, 9, 3), int32],) */;
  %614 = cast(%var_2624, dtype="float32") /* ty=Tensor[(30, 9), float32] */;
  %615 = %610.2;
  %616 = %613.0;
  %617 = sinh(%614) /* ty=Tensor[(30, 9), float32] */;
  (%615, %616, %617)
}

def @func_3741() -> (Tensor[(14, 5, 16), float64],) {
  %618 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 5, 16), uint32] */, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
  %619 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(14, 5, 16), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 5, 16), uint32] */, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %622 = not_equal(%620, %621) /* ty=Tensor[(14, 5, 16), bool] */;
  %623 = cast(%622, dtype="float64") /* ty=Tensor[(14, 5, 16), float64] */;
  %624 = log(%623) /* ty=Tensor[(14, 5, 16), float64] */;
  (%624,)
}

def @func_1654() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %625 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %626 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
  %627 = %625.0;
  (%626, %627)
}

def @func_4183() -> Tensor[(4, 15, 4), float32] {
  %628 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
  %629 = %628.0;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(4, 15, 4), float32] */;
  acosh(%630) /* ty=Tensor[(4, 15, 4), float32] */
}

def @func_2179(%var_2136: Tensor[(10, 9, 3), float64]) -> (Tensor[(10, 9, 3), int32],) {
  %631 = @func_736() /* ty=Tensor[(10, 9, 3), float64] */;
  %632 = cast(%631, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %633 = acosh(%632) /* ty=Tensor[(10, 9, 3), float32] */;
  %634 = cast(%var_2136, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %635 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%631, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %638 = less(%636, %637) /* ty=Tensor[(10, 9, 3), bool] */;
  %639 = cast(%638, dtype="int32") /* ty=Tensor[(10, 9, 3), int32] */;
  %640 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%633, dtype="int32") /* ty=Tensor[(10, 9, 3), int32] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %643 = bitwise_and(%641, %642) /* ty=Tensor[(10, 9, 3), int32] */;
  (%643,)
}

def @func_5557() -> (Tensor[(10, 9, 3), float32],) {
  %644 = @func_5501() /* ty=Tensor[(10, 9, 3), float32] */;
  (%644,)
}

def @func_5070() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %645 = @func_2893() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %646 = %645.2;
  %647 = @func_429() /* ty=Tensor[(10, 9, 3), float32] */;
  (%646, %647)
}

def @func_4052(%var_4013: Tensor[(800), float32], %var_4015: Tensor[(640), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(864), float32], Tensor[(800), float32], Tensor[(216, 4), float32], Tensor[(640), uint32], Tensor[(5, 16, 10), float32]) {
  %648 = cast(meta[relay.Constant][34] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %649 = reshape(%648, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %650 = @func_3231(%649) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), bool], Tensor[(640), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), int64]) */;
  %651 = @func_2893() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %652 = cast(%var_4013, dtype="float32") /* ty=Tensor[(800), float32] */;
  %653 = cast(%var_4013, dtype="float32") /* ty=Tensor[(800), float32] */;
  %654 = cast(meta[relay.Constant][35] /* ty=Tensor[(216, 4), float32] */, dtype="float32") /* ty=Tensor[(216, 4), float32] */;
  %655 = cast(%var_4015, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %656 = cast(meta[relay.Constant][34] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %657 = reshape(%652, newshape=[5, 16, 10]) /* ty=Tensor[(5, 16, 10), float32] */;
  %658 = reshape(%653, newshape=[5, 16, 10]) /* ty=Tensor[(5, 16, 10), float32] */;
  %659 = reshape(%654, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %660 = reshape(%655, newshape=[640]) /* ty=Tensor[(640), uint32] */;
  %661 = reshape(%656, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %662 = @func_3280(%657, %658, %659, %660, %661) /* ty=(Tensor[(5, 16, 10), float32], Tensor[(6, 9, 16), float32], Tensor[(864), float32], Tensor[(10, 9, 3), float32], Tensor[(126), uint32], Tensor[(640), float64]) */;
  %663 = cast(%var_4013, dtype="float32") /* ty=Tensor[(800), float32] */;
  %664 = cast(%var_4013, dtype="float32") /* ty=Tensor[(800), float32] */;
  %665 = cast(meta[relay.Constant][35] /* ty=Tensor[(216, 4), float32] */, dtype="float32") /* ty=Tensor[(216, 4), float32] */;
  %666 = cast(%var_4015, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %667 = cast(meta[relay.Constant][34] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %668 = reshape(%663, newshape=[5, 16, 10]) /* ty=Tensor[(5, 16, 10), float32] */;
  %669 = reshape(%664, newshape=[5, 16, 10]) /* ty=Tensor[(5, 16, 10), float32] */;
  %670 = reshape(%665, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %671 = reshape(%666, newshape=[640]) /* ty=Tensor[(640), uint32] */;
  %672 = reshape(%667, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %673 = @func_3280(%668, %669, %670, %671, %672) /* ty=(Tensor[(5, 16, 10), float32], Tensor[(6, 9, 16), float32], Tensor[(864), float32], Tensor[(10, 9, 3), float32], Tensor[(126), uint32], Tensor[(640), float64]) */;
  %674 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
  %675 = %650.0;
  %676 = @func_882() /* ty=Tensor[(10, 9, 3), float32] */;
  %677 = %651.0;
  %678 = %662.2;
  %679 = %673.0;
  (%674, %675, meta[relay.Constant][34] /* ty=Tensor[(126), uint32] */, %676, %677, %678, %var_4013, meta[relay.Constant][35] /* ty=Tensor[(216, 4), float32] */, %var_4015, %679)
}

def @func_6207() -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) {
  %680 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %681 = @func_3937() /* ty=Tensor[(10, 9, 3), bool] */;
  %682 = %680.0;
  (%681, %682)
}

def @func_1207() -> Tensor[(10, 9, 3), float32] {
  @func_882() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_3280(%var_3244: Tensor[(5, 16, 10), float32], %var_3245: Tensor[(5, 16, 10), float32], %var_3257: Tensor[(864), float32], %var_3266: Tensor[(640), uint32], %var_3269: Tensor[(126), uint32]) -> (Tensor[(5, 16, 10), float32], Tensor[(6, 9, 16), float32], Tensor[(864), float32], Tensor[(10, 9, 3), float32], Tensor[(126), uint32], Tensor[(640), float64]) {
  %683 = cast(%var_3245, dtype="float32") /* ty=Tensor[(5, 16, 10), float32] */;
  %684 = shape_of(%var_3244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%var_3244, dtype="float32") /* ty=Tensor[(5, 16, 10), float32] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %687 = cast(%var_3257, dtype="float32") /* ty=Tensor[(864), float32] */;
  %688 = reshape(%687, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
  %689 = @func_2291(%688) /* ty=(Tensor[(6, 9, 16), float32],) */;
  %690 = cast(%var_3269, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %691 = reshape(%690, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %692 = @func_1148(%691) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(10, 9, 3), float64]) */;
  %693 = cast(%var_3266, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %694 = reshape(%693, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint32] */;
  %695 = @func_1383(%694) /* ty=(Tensor[(10, 16, 4), uint32],) */;
  %696 = %695.0;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
  %698 = shape_of(%var_3266, dtype="int32") /* ty=Tensor[(1), int32] */;
  %699 = cast(%var_3266, dtype="float64") /* ty=Tensor[(640), float64] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?), float64] */;
  %701 = floor_divide(%685, %686) /* ty=Tensor[(5, 16, 10), float32] */;
  %702 = %689.0;
  %703 = %692.0;
  %704 = floor_divide(%699, %700) /* ty=Tensor[(640), float64] */;
  (%701, %702, %var_3257, %703, %var_3269, %704)
}

def @func_2918(%var_2916: Tensor[(640), uint32]) -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float64], Tensor[(640), uint32]) {
  %705 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %706 = %705.0;
  %707 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 9, 3), float32] */, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%706, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %711 = cast(%var_2916, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %712 = reshape(%711, newshape=[640]) /* ty=Tensor[(640), uint32] */;
  %713 = @func_2030(%712) /* ty=(Tensor[(10, 9, 3), float64], Tensor[(640), bool], Tensor[(640), int32]) */;
  %714 = less_equal(%709, %710) /* ty=Tensor[(10, 9, 3), bool] */;
  %715 = %713.0;
  (%714, %715, %var_2916)
}

def @func_6759() -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(240), int8]) {
  %716 = @func_968() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %717 = @func_1316() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(240), int8]) */;
  %718 = @func_553() /* ty=Tensor[(10, 9, 3), float64] */;
  %719 = %716.0;
  %720 = %717.2;
  (%718, %719, %720)
}

def @func_3817(%var_3805: Tensor[(10, 9, 3), float32]) -> (Tensor[(10, 9, 3), uint32], Tensor[(10, 9, 3), float32]) {
  %721 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
  %722 = cast(%var_3805, dtype="uint32") /* ty=Tensor[(10, 9, 3), uint32] */;
  %723 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%721, dtype="uint32") /* ty=Tensor[(10, 9, 3), uint32] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %726 = subtract(%724, %725) /* ty=Tensor[(10, 9, 3), uint32] */;
  %727 = @func_3788() /* ty=Tensor[(10, 9, 3), float32] */;
  (%726, %727)
}

def @func_5433() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) {
  %728 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %729 = %728.0;
  %730 = @func_3937() /* ty=Tensor[(10, 9, 3), bool] */;
  (%729, %730)
}

def @func_4823() -> (Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float64]) {
  %731 = @func_1316() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(240), int8]) */;
  %732 = @func_4782() /* ty=Tensor[(10, 9, 3), float32] */;
  %733 = cast(%732, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
  %734 = %731.1;
  %735 = log2(%733) /* ty=Tensor[(10, 9, 3), float64] */;
  (%734, %735)
}

def @func_1770(%var_1751: Tensor[(11, 10, 8), int16]) -> (Tensor[(11, 10, 8), int16], Tensor[(10, 9, 3), float32]) {
  %736 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 10, 8), int16] */, dtype="int16") /* ty=Tensor[(1, 10, 8), int16] */;
  %737 = cast(%var_1751, dtype="int16") /* ty=Tensor[(11, 10, 8), int16] */;
  %738 = right_shift(%736, %737) /* ty=Tensor[(11, 10, 8), int16] */;
  %739 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
  (%738, %739)
}

def @func_3891(%var_3872: Tensor[(1, 3, 3), float64]) -> (Tensor[(1, 3, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %740 = cast(%var_3872, dtype="float64") /* ty=Tensor[(1, 3, 3), float64] */;
  %741 = log2(%740) /* ty=Tensor[(1, 3, 3), float64] */;
  %742 = cast(%741, dtype="float64") /* ty=Tensor[(1, 3, 3), float64] */;
  %743 = @func_968() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %744 = cos(%742) /* ty=Tensor[(1, 3, 3), float64] */;
  %745 = @func_3788() /* ty=Tensor[(10, 9, 3), float32] */;
  %746 = %743.2;
  (%744, %745, %746)
}

def @func_1614() -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float64]) {
  %747 = @func_680() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %748 = %747.0;
  %749 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 9, 3), float32] */, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
  %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%748, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %753 = cast(%748, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
  %754 = floor_divide(%751, %752) /* ty=Tensor[(10, 9, 3), float64] */;
  %755 = sinh(%753) /* ty=Tensor[(10, 9, 3), float64] */;
  (%754, %755)
}

def @func_968() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %756 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
  %757 = cast(%756, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %758 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %759 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
  %760 = asin(%757) /* ty=Tensor[(10, 9, 3), float32] */;
  %761 = %758.0;
  (%759, %760, %761)
}

def @func_1099() -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) {
  %762 = @func_736() /* ty=Tensor[(10, 9, 3), float64] */;
  %763 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 9, 3), float64] */, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %764 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%762, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %767 = equal(%765, %766) /* ty=Tensor[(10, 9, 3), bool] */;
  %768 = @func_882() /* ty=Tensor[(10, 9, 3), float32] */;
  (%767, %768)
}

def @func_3613() -> (Tensor[(10, 9, 3), bool],) {
  %769 = @func_1044() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64]) */;
  %770 = %769.0;
  (%770,)
}

def @func_4689() -> (Tensor[(10, 9, 3), float32],) {
  %771 = @func_1228() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
  %772 = %771.0;
  (%772,)
}

def @func_6298() -> (Tensor[(10, 9, 3), float32], Tensor[(6, 180), bool], Tensor[(10, 9, 3), float32], Tensor[(9), float64], Tensor[(15, 8, 9), float64]) {
  %773 = @func_2589() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(21, 6), uint32]) */;
  %774 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 180), float64] */, dtype="float64") /* ty=Tensor[(6, 180), float64] */;
  %775 = reshape(%774, newshape=[15, 8, 9]) /* ty=Tensor[(15, 8, 9), float64] */;
  %776 = @func_2376(%775) /* ty=(Tensor[(15, 8, 9), float64],) */;
  %777 = %776.0;
  %778 = cast(%777, dtype="bool") /* ty=Tensor[(15, 8, 9), bool] */;
  %779 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(6, 180), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %780 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 180), float64] */, dtype="bool") /* ty=Tensor[(6, 180), bool] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %782 = cast(meta[relay.Constant][41] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
  %783 = reshape(%782, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), float64] */;
  %784 = @func_3891(%783) /* ty=(Tensor[(1, 3, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %785 = cast(%777, dtype="float64") /* ty=Tensor[(15, 8, 9), float64] */;
  %786 = %773.1;
  %787 = not_equal(%780, %781) /* ty=Tensor[(6, 180), bool] */;
  %788 = %784.2;
  %789 = log2(%785) /* ty=Tensor[(15, 8, 9), float64] */;
  (%786, %787, %788, meta[relay.Constant][41] /* ty=Tensor[(9), float64] */, %789)
}

def @func_4782() -> Tensor[(10, 9, 3), float32] {
  %790 = @func_2893() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %791 = %790.2;
  %792 = cast(%791, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  erf(%792) /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_3937() -> Tensor[(10, 9, 3), bool] {
  %793 = @func_1228() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
  %793.1
}

def @func_2968() -> (Tensor[(10, 9, 3), float32],) {
  %794 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
  (%794,)
}

def @func_609() -> Tensor[(10, 9, 3), float32] {
  @func_373() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_1370() -> (Tensor[(4, 15, 4), int8],) {
  %795 = @func_1316() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(240), int8]) */;
  %796 = %795.1;
  (%796,)
}

def @func_3542(%var_3537: float64, %var_3538: Tensor[(8, 5, 5), float64]) -> Tensor[(8, 5, 5), float64] {
  %797 = cast(%var_3537, dtype="float64") /* ty=float64 */;
  %798 = cast(%var_3538, dtype="float64") /* ty=Tensor[(8, 5, 5), float64] */;
  divide(%797, %798) /* ty=Tensor[(8, 5, 5), float64] */
}

def @func_1450(%var_1422: Tensor[(640), uint32]) -> (Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float32], Tensor[(10, 16, 4), uint32], Tensor[(640), uint32], Tensor[(4, 15, 4), bool]) {
  %799 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
  %800 = cast(%var_1422, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %801 = reshape(%800, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint32] */;
  %802 = @func_1383(%801) /* ty=(Tensor[(10, 16, 4), uint32],) */;
  %803 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
  %804 = %803.0;
  %805 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
  %806 = %805.0;
  %807 = cast(%806, dtype="bool") /* ty=Tensor[(4, 15, 4), bool] */;
  %808 = shape_of(%804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %809 = cast(%804, dtype="bool") /* ty=Tensor[(4, 15, 4), bool] */;
  %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %811 = %799.0;
  %812 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
  %813 = %802.0;
  %814 = equal(%809, %810) /* ty=Tensor[(4, 15, 4), bool] */;
  (%811, %812, %813, %var_1422, %814)
}

def @func_1383(%var_1376: Tensor[(10, 16, 4), uint32]) -> (Tensor[(10, 16, 4), uint32],) {
  %815 = cast(%var_1376, dtype="uint32") /* ty=Tensor[(10, 16, 4), uint32] */;
  %816 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(10, 16, 4), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 16, 4), uint32] */, dtype="uint32") /* ty=Tensor[(10, 16, 4), uint32] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %819 = maximum(%817, %818) /* ty=Tensor[(10, 16, 4), uint32] */;
  (%819,)
}

def @func_4370(%var_4361: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(126), uint32]) {
  %820 = @func_680() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %821 = cast(%var_4361, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %822 = reshape(%821, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %823 = @func_1148(%822) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(10, 9, 3), float64]) */;
  %824 = %820.0;
  %825 = %823.0;
  (%824, %825, %var_4361)
}

def @func_2589() -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(21, 6), uint32]) {
  %826 = @func_1044() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64]) */;
  %827 = cast(meta[relay.Constant][43] /* ty=Tensor[(21, 6), uint32] */, dtype="uint32") /* ty=Tensor[(21, 6), uint32] */;
  %828 = reshape(%827, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %829 = @func_822(%828) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64], Tensor[(126), uint32], Tensor[(126), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %830 = %826.0;
  %831 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
  %832 = %829.3;
  (%830, %831, %832, meta[relay.Constant][43] /* ty=Tensor[(21, 6), uint32] */)
}

def @func_429() -> Tensor[(10, 9, 3), float32] {
  %833 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
  %834 = cast(%833, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  sigmoid(%834) /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_1148(%var_1124: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(10, 9, 3), float64]) {
  %835 = cast(%var_1124, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %836 = reshape(%835, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %837 = @func_822(%836) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64], Tensor[(126), uint32], Tensor[(126), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %838 = cast(meta[relay.Constant][44] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %839 = %837.3;
  %840 = cast(%839, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %841 = reshape(%838, newshape=[1, 3, 14]) /* ty=Tensor[(1, 3, 14), uint32] */;
  %842 = reshape(%840, newshape=[3, 3, 14]) /* ty=Tensor[(3, 3, 14), uint32] */;
  %843 = @func_471(%841, %842) /* ty=(Tensor[(3, 3, 14), bool], Tensor[(10, 9, 3), float32]) */;
  %844 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
  %845 = %843.1;
  %846 = @func_626() /* ty=Tensor[(10, 9, 3), float64] */;
  (%844, %839, %var_1124, %845, meta[relay.Constant][44] /* ty=Tensor[(42), uint32] */, %846)
}

def @func_3178(%var_3158: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), bool], Tensor[(42), uint32], Tensor[(3, 3, 14), bool], Tensor[(4, 15, 4), int8], Tensor[(10, 16, 4), uint32], Tensor[(640), uint32]) {
  %847 = @func_2400() /* ty=(Tensor[(10, 9, 3), bool],) */;
  %848 = cast(meta[relay.Constant][45] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %849 = cast(%var_3158, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %850 = reshape(%848, newshape=[1, 3, 14]) /* ty=Tensor[(1, 3, 14), uint32] */;
  %851 = reshape(%849, newshape=[3, 3, 14]) /* ty=Tensor[(3, 3, 14), uint32] */;
  %852 = @func_471(%850, %851) /* ty=(Tensor[(3, 3, 14), bool], Tensor[(10, 9, 3), float32]) */;
  %853 = %852.0;
  %854 = cast(%var_3158, dtype="bool") /* ty=Tensor[(126), bool] */;
  %855 = shape_of(%853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%853, dtype="bool") /* ty=Tensor[(3, 3, 14), bool] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %858 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
  %859 = cast(meta[relay.Constant][46] /* ty=Tensor[(640), uint32] */, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %860 = reshape(%859, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint32] */;
  %861 = @func_1383(%860) /* ty=(Tensor[(10, 16, 4), uint32],) */;
  %862 = %847.0;
  %863 = logical_or(%856, %857) /* ty=Tensor[(3, 3, 14), bool] */;
  %864 = %858.0;
  %865 = %861.0;
  (%862, meta[relay.Constant][45] /* ty=Tensor[(42), uint32] */, %863, %864, %865, meta[relay.Constant][46] /* ty=Tensor[(640), uint32] */)
}

def @func_7468() -> Tensor[(10, 9, 3), int8] {
  %866 = @func_6405() /* ty=(Tensor[(10, 9, 3), int8],) */;
  %866.0
}

def @func_6101() -> (Tensor[(14, 1, 10), uint32],) {
  %867 = cast(meta[relay.Constant][47] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %868 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 1, 10), uint32] */, dtype="uint32") /* ty=Tensor[(14, 1, 10), uint32] */;
  %869 = multiply(%867, %868) /* ty=Tensor[(14, 1, 10), uint32] */;
  (%869,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6300() -> (Tensor[(10, 9, 3), float32], Tensor[(6, 180), bool], Tensor[(10, 9, 3), float32], Tensor[(9), float64], Tensor[(15, 8, 9), float64]) {
  @func_6298() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(6, 180), bool], Tensor[(10, 9, 3), float32], Tensor[(9), float64], Tensor[(15, 8, 9), float64]) */
}

def @func_530(%var_524: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %1 = cast(%var_524, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %2 = reshape(%0, newshape=[1, 3, 14]) /* ty=Tensor[(1, 3, 14), uint32] */;
  %3 = reshape(%1, newshape=[3, 3, 14]) /* ty=Tensor[(3, 3, 14), uint32] */;
  %4 = @func_471(%2, %3) /* ty=(Tensor[(3, 3, 14), bool], Tensor[(10, 9, 3), float32]) */;
  %5 = @func_429() /* ty=Tensor[(10, 9, 3), float32] */;
  %6 = cast(%5, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %7 = %4.1;
  %8 = atan(%6) /* ty=Tensor[(10, 9, 3), float32] */;
  (%7, meta[relay.Constant][0] /* ty=Tensor[(42), uint32] */, %var_524, %8)
}

def @func_4888(%var_4845: Tensor[(2, 3, 1), uint8], %var_4846: Tensor[(2, 3, 9), uint8], %var_4882: Tensor[(2, 3, 9), uint8]) -> (Tensor[(10, 9, 3), float32], Tensor[(2, 3, 9), bool], Tensor[(2, 3, 9), bool]) {
  %9 = @func_2968() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %10 = cast(%var_4845, dtype="uint8") /* ty=Tensor[(2, 3, 1), uint8] */;
  %11 = cast(%var_4846, dtype="uint8") /* ty=Tensor[(2, 3, 9), uint8] */;
  %12 = bitwise_xor(%10, %11) /* ty=Tensor[(2, 3, 9), uint8] */;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(2, 3, 9), float64] */;
  %14 = sin(%13) /* ty=Tensor[(2, 3, 9), float64] */;
  %15 = cast(%var_4846, dtype="bool") /* ty=Tensor[(2, 3, 9), bool] */;
  %16 = shape_of(%14, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%14, dtype="bool") /* ty=Tensor[(2, 3, 9), bool] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %19 = cast(%var_4882, dtype="bool") /* ty=Tensor[(2, 3, 9), bool] */;
  %20 = shape_of(%var_4846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%var_4846, dtype="bool") /* ty=Tensor[(2, 3, 9), bool] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %23 = %9.0;
  %24 = less_equal(%17, %18) /* ty=Tensor[(2, 3, 9), bool] */;
  %25 = equal(%21, %22) /* ty=Tensor[(2, 3, 9), bool] */;
  (%23, %24, %25)
}

def @func_1292(%var_1271: Tensor[(10, 9, 3), float32]) -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), bool]) {
  %26 = @func_1173() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %27 = %26.0;
  %28 = cast(%var_1271, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %29 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%27, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %32 = cast(%var_1271, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %33 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%27, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %36 = logical_or(%30, %31) /* ty=Tensor[(10, 9, 3), bool] */;
  %37 = not_equal(%34, %35) /* ty=Tensor[(10, 9, 3), bool] */;
  (%36, %37)
}

def @func_2294(%var_2292: Tensor[(6, 9, 16), float32]) -> (Tensor[(6, 9, 16), float32],) {
  @func_2291(%var_2292) /* ty=(Tensor[(6, 9, 16), float32],) */
}

def @func_6625() -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32]) {
  %41 = fn () -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32]) {
    %38 = @func_5557() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %39 = @func_553() /* ty=Tensor[(10, 9, 3), float64] */;
    %40 = %38.0;
    (%39, %40)
  };
  %41() /* ty=(Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32]) */
}

def @func_4727() -> Tensor[(126), uint32] {
  %42 = @func_4660() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), int64], Tensor[(126), uint32]) */;
  %42.2
}

def @func_2591() -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(21, 6), uint32]) {
  @func_2589() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(21, 6), uint32]) */
}

def @func_970() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  @func_968() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */
}

def @func_555() -> Tensor[(10, 9, 3), float64] {
  @func_553() /* ty=Tensor[(10, 9, 3), float64] */
}

def @func_1295(%var_1293: Tensor[(10, 9, 3), float32]) -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), bool]) {
  @func_1292(%var_1293) /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), bool]) */
}

def @func_1099() -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) {
  %43 = @func_736() /* ty=Tensor[(10, 9, 3), float64] */;
  %44 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 9, 3), float64] */, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%43, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %48 = equal(%46, %47) /* ty=Tensor[(10, 9, 3), bool] */;
  %49 = @func_882() /* ty=Tensor[(10, 9, 3), float32] */;
  (%48, %49)
}

def @func_703() -> (Tensor[(10, 9, 3), float32],) {
  %50 = @func_680() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %51 = %50.0;
  (%51,)
}

def @func_3342() -> Tensor[(10, 16, 4), uint32] {
  %52 = @func_1940() /* ty=(Tensor[(10, 16, 4), uint32], Tensor[(160, 4), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) */;
  %52.0
}

def @func_2291(%var_2281: Tensor[(6, 9, 16), float32]) -> (Tensor[(6, 9, 16), float32],) {
  %53 = cast(%var_2281, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %54 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(6, 9, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 9, 16), float32] */, dtype="float32") /* ty=Tensor[(6, 9, 16), float32] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %57 = power(%55, %56) /* ty=Tensor[(6, 9, 16), float32] */;
  (%57,)
}

def @func_4184() -> Tensor[(4, 15, 4), float32] {
  %61 = fn () -> Tensor[(4, 15, 4), float32] {
    %58 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
    %59 = %58.0;
    %60 = cast(%59, dtype="float32") /* ty=Tensor[(4, 15, 4), float32] */;
    acosh(%60) /* ty=Tensor[(4, 15, 4), float32] */
  };
  %61() /* ty=Tensor[(4, 15, 4), float32] */
}

def @func_7400() -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) {
  %62 = @func_3770() /* ty=(Tensor[(10, 9, 3), bool],) */;
  %63 = @func_5070() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %64 = %62.0;
  %65 = %63.1;
  (%64, %65)
}

def @func_3938() -> Tensor[(10, 9, 3), bool] {
  %67 = fn () -> Tensor[(10, 9, 3), bool] {
    %66 = @func_1228() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
    %66.1
  };
  %67() /* ty=Tensor[(10, 9, 3), bool] */
}

def @func_5890(%var_5888: Tensor[(2, 12, 3), float64], %var_5889: Tensor[(2, 12, 3), float64]) -> (Tensor[(2, 12, 3), float64], Tensor[(2, 12, 3), float32]) {
  @func_5886(%var_5888, %var_5889) /* ty=(Tensor[(2, 12, 3), float64], Tensor[(2, 12, 3), float32]) */
}

def @func_5434() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) {
  %71 = fn () -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) {
    %68 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %69 = %68.0;
    %70 = @func_3937() /* ty=Tensor[(10, 9, 3), bool] */;
    (%69, %70)
  };
  %71() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) */
}

def @func_1318() -> (Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(240), int8]) {
  @func_1316() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(240), int8]) */
}

def @func_5258(%var_5256: Tensor[(11, 6, 12), float64], %var_5257: Tensor[(11, 6, 12), float64]) -> (Tensor[(11, 6, 12), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool], Tensor[(4, 15, 13), bool], Tensor[(640), int32], Tensor[(640), uint32], Tensor[(126), float32], Tensor[(11, 6, 12), bool]) {
  %101 = fn (%var_5181: Tensor[(11, 6, 12), float64], %var_5182: Tensor[(11, 6, 12), float64]) -> (Tensor[(11, 6, 12), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool], Tensor[(4, 15, 13), bool], Tensor[(640), int32], Tensor[(640), uint32], Tensor[(126), float32], Tensor[(11, 6, 12), bool]) {
    %72 = cast(%var_5182, dtype="float64") /* ty=Tensor[(11, 6, 12), float64] */;
    %73 = shape_of(%var_5181, dtype="int32") /* ty=Tensor[(3), int32] */;
    %74 = cast(%var_5181, dtype="float64") /* ty=Tensor[(11, 6, 12), float64] */;
    %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %76 = @func_2400() /* ty=(Tensor[(10, 9, 3), bool],) */;
    %77 = cast(meta[relay.Constant][3] /* ty=Tensor[(780), float32] */, dtype="float32") /* ty=Tensor[(780), float32] */;
    %78 = reshape(%77, newshape=[4, 15, 13]) /* ty=Tensor[(4, 15, 13), float32] */;
    %79 = @func_4741(%78) /* ty=(Tensor[(4, 15, 13), bool],) */;
    %80 = %79.0;
    %81 = cast(meta[relay.Constant][3] /* ty=Tensor[(780), float32] */, dtype="bool") /* ty=Tensor[(780), bool] */;
    %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(3), int32] */;
    %83 = cast(%80, dtype="bool") /* ty=Tensor[(4, 15, 13), bool] */;
    %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %85 = cast(meta[relay.Constant][4] /* ty=Tensor[(640), uint32] */, dtype="uint32") /* ty=Tensor[(640), uint32] */;
    %86 = reshape(%85, newshape=[640]) /* ty=Tensor[(640), uint32] */;
    %87 = @func_2030(%86) /* ty=(Tensor[(10, 9, 3), float64], Tensor[(640), bool], Tensor[(640), int32]) */;
    %88 = @func_4727() /* ty=Tensor[(126), uint32] */;
    %89 = cast(%88, dtype="float32") /* ty=Tensor[(126), float32] */;
    %90 = cast(%var_5181, dtype="bool") /* ty=Tensor[(11, 6, 12), bool] */;
    %91 = shape_of(%var_5182, dtype="int32") /* ty=Tensor[(3), int32] */;
    %92 = cast(%var_5182, dtype="bool") /* ty=Tensor[(11, 6, 12), bool] */;
    %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %94 = divide(%74, %75) /* ty=Tensor[(11, 6, 12), float64] */;
    %95 = @func_4782() /* ty=Tensor[(10, 9, 3), float32] */;
    %96 = %76.0;
    %97 = logical_or(%83, %84) /* ty=Tensor[(4, 15, 13), bool] */;
    %98 = %87.2;
    %99 = acosh(%89) /* ty=Tensor[(126), float32] */;
    %100 = not_equal(%92, %93) /* ty=Tensor[(11, 6, 12), bool] */;
    (%94, %95, %96, %97, %98, meta[relay.Constant][4] /* ty=Tensor[(640), uint32] */, %99, %100)
  };
  %101(%var_5256, %var_5257) /* ty=(Tensor[(11, 6, 12), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool], Tensor[(4, 15, 13), bool], Tensor[(640), int32], Tensor[(640), uint32], Tensor[(126), float32], Tensor[(11, 6, 12), bool]) */
}

def @func_4783() -> Tensor[(10, 9, 3), float32] {
  %105 = fn () -> Tensor[(10, 9, 3), float32] {
    %102 = @func_2893() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
    %103 = %102.2;
    %104 = cast(%103, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
    erf(%104) /* ty=Tensor[(10, 9, 3), float32] */
  };
  %105() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_6865(%var_6835: Tensor[(72), float64], %var_6858: Tensor[(640), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(72), float64], Tensor[(2, 12, 3), float64], Tensor[(10, 9, 3), bool], Tensor[(640), uint32]) {
  %106 = @func_6298() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(6, 180), bool], Tensor[(10, 9, 3), float32], Tensor[(9), float64], Tensor[(15, 8, 9), float64]) */;
  %107 = cast(%var_6835, dtype="float64") /* ty=Tensor[(72), float64] */;
  %108 = cast(%var_6835, dtype="float64") /* ty=Tensor[(72), float64] */;
  %109 = reshape(%107, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), float64] */;
  %110 = reshape(%108, newshape=[2, 12, 3]) /* ty=Tensor[(2, 12, 3), float64] */;
  %111 = @func_5886(%109, %110) /* ty=(Tensor[(2, 12, 3), float64], Tensor[(2, 12, 3), float32]) */;
  %112 = %111.0;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(2, 12, 3), float64] */;
  %114 = cast(%var_6858, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %115 = reshape(%114, newshape=[640]) /* ty=Tensor[(640), uint32] */;
  %116 = @func_2918(%115) /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float64], Tensor[(640), uint32]) */;
  %117 = %106.0;
  %118 = atan(%113) /* ty=Tensor[(2, 12, 3), float64] */;
  %119 = %116.0;
  (%117, %var_6835, %118, %119, %var_6858)
}

def @func_7623(%var_7622: Tensor[(6, 4, 1), uint32]) -> (Tensor[(6, 4, 12), uint32], Tensor[(10, 9, 3), float32]) {
  %125 = fn (%var_7606: Tensor[(6, 4, 1), uint32]) -> (Tensor[(6, 4, 12), uint32], Tensor[(10, 9, 3), float32]) {
    %120 = cast(%var_7606, dtype="uint32") /* ty=Tensor[(6, 4, 1), uint32] */;
    %121 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 4, 12), uint32] */, dtype="uint32") /* ty=Tensor[(6, 4, 12), uint32] */;
    %122 = @func_2893() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
    %123 = maximum(%120, %121) /* ty=Tensor[(6, 4, 12), uint32] */;
    %124 = %122.2;
    (%123, %124)
  };
  %125(%var_7622) /* ty=(Tensor[(6, 4, 12), uint32], Tensor[(10, 9, 3), float32]) */
}

def @func_5558() -> (Tensor[(10, 9, 3), float32],) {
  %127 = fn () -> (Tensor[(10, 9, 3), float32],) {
    %126 = @func_5501() /* ty=Tensor[(10, 9, 3), float32] */;
    (%126,)
  };
  %127() /* ty=(Tensor[(10, 9, 3), float32],) */
}

def @func_5701(%var_5698: Tensor[(4, 15, 4), float64], %var_5699: Tensor[(126), uint32], %var_5700: Tensor[(3, 504), uint32]) -> (Tensor[(4, 15, 4), bool], Tensor[(10, 9, 3), float32], Tensor[(126), uint32], Tensor[(3, 504), uint32], Tensor[(4, 15, 4), int64], Tensor[(10, 16, 4), uint32], Tensor[(10, 9, 3), float32]) {
  @func_5696(%var_5698, %var_5699, %var_5700) /* ty=(Tensor[(4, 15, 4), bool], Tensor[(10, 9, 3), float32], Tensor[(126), uint32], Tensor[(3, 504), uint32], Tensor[(4, 15, 4), int64], Tensor[(10, 16, 4), uint32], Tensor[(10, 9, 3), float32]) */
}

def @func_4662() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), int64], Tensor[(126), uint32]) {
  @func_4660() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), int64], Tensor[(126), uint32]) */
}

def @func_3772() -> (Tensor[(10, 9, 3), bool],) {
  @func_3770() /* ty=(Tensor[(10, 9, 3), bool],) */
}

def @func_5394(%var_5392: Tensor[(42), uint32], %var_5393: Tensor[(1512), uint32]) -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float64], Tensor[(126), bool], Tensor[(4, 15, 4), float32], Tensor[(315), float64], Tensor[(480), float64], Tensor[(126, 12), bool], Tensor[(1512), uint32], Tensor[(10, 9, 3), float64], Tensor[(42), float64]) {
  %159 = fn (%var_5309: Tensor[(42), uint32], %var_5366: Tensor[(1512), uint32]) -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float64], Tensor[(126), bool], Tensor[(4, 15, 4), float32], Tensor[(315), float64], Tensor[(480), float64], Tensor[(126, 12), bool], Tensor[(1512), uint32], Tensor[(10, 9, 3), float64], Tensor[(42), float64]) {
    %128 = @func_4823() /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float64]) */;
    %129 = @func_1614() /* ty=(Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float64]) */;
    %130 = cast(%var_5309, dtype="uint32") /* ty=Tensor[(42), uint32] */;
    %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %132 = reshape(%130, newshape=[1, 3, 14]) /* ty=Tensor[(1, 3, 14), uint32] */;
    %133 = reshape(%131, newshape=[3, 3, 14]) /* ty=Tensor[(3, 3, 14), uint32] */;
    %134 = @func_471(%132, %133) /* ty=(Tensor[(3, 3, 14), bool], Tensor[(10, 9, 3), float32]) */;
    %135 = %134.0;
    %136 = cast(%135, dtype="bool") /* ty=Tensor[(3, 3, 14), bool] */;
    %137 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(126), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %138 = cast(meta[relay.Constant][6] /* ty=Tensor[(126), uint32] */, dtype="bool") /* ty=Tensor[(126), bool] */;
    %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?), bool] */;
    %140 = cast(meta[relay.Constant][7] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %141 = reshape(%140, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), float64] */;
    %142 = @func_3440(%141) /* ty=(Tensor[(2, 15, 16), bool], Tensor[(5, 9, 7), float64], Tensor[(315), float64]) */;
    %143 = equal(%138, %139) /* ty=Tensor[(126), bool] */;
    %144 = cast(%143, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %145 = cast(%var_5366, dtype="uint32") /* ty=Tensor[(1512), uint32] */;
    %146 = reshape(%144, newshape=[63, 2]) /* ty=Tensor[(63, 2), uint32] */;
    %147 = reshape(%145, newshape=[1512]) /* ty=Tensor[(1512), uint32] */;
    %148 = @func_3721(%146, %147) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(126, 12), bool], Tensor[(63, 2), uint32], Tensor[(1512), uint32]) */;
    %149 = cast(%var_5309, dtype="float64") /* ty=Tensor[(42), float64] */;
    %150 = atan(%149) /* ty=Tensor[(42), float64] */;
    %151 = cast(%150, dtype="float64") /* ty=Tensor[(42), float64] */;
    %152 = %128.1;
    %153 = %129.1;
    %154 = @func_4183() /* ty=Tensor[(4, 15, 4), float32] */;
    %155 = %142.2;
    %156 = %148.1;
    %157 = @func_626() /* ty=Tensor[(10, 9, 3), float64] */;
    %158 = rsqrt(%151) /* ty=Tensor[(42), float64] */;
    (%152, %153, %143, %154, %155, meta[relay.Constant][7] /* ty=Tensor[(480), float64] */, %156, %var_5366, %157, %158)
  };
  %159(%var_5392, %var_5393) /* ty=(Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float64], Tensor[(126), bool], Tensor[(4, 15, 4), float32], Tensor[(315), float64], Tensor[(480), float64], Tensor[(126, 12), bool], Tensor[(1512), uint32], Tensor[(10, 9, 3), float64], Tensor[(42), float64]) */
}

def @func_6044() -> (Tensor[(4, 15, 4), float64],) {
  %160 = @func_4130() /* ty=(Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), int8]) */;
  %161 = %160.0;
  (%161,)
}

def @func_3178(%var_3158: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), bool], Tensor[(42), uint32], Tensor[(3, 3, 14), bool], Tensor[(4, 15, 4), int8], Tensor[(10, 16, 4), uint32], Tensor[(640), uint32]) {
  %162 = @func_2400() /* ty=(Tensor[(10, 9, 3), bool],) */;
  %163 = cast(meta[relay.Constant][8] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %164 = cast(%var_3158, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %165 = reshape(%163, newshape=[1, 3, 14]) /* ty=Tensor[(1, 3, 14), uint32] */;
  %166 = reshape(%164, newshape=[3, 3, 14]) /* ty=Tensor[(3, 3, 14), uint32] */;
  %167 = @func_471(%165, %166) /* ty=(Tensor[(3, 3, 14), bool], Tensor[(10, 9, 3), float32]) */;
  %168 = %167.0;
  %169 = cast(%var_3158, dtype="bool") /* ty=Tensor[(126), bool] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="bool") /* ty=Tensor[(3, 3, 14), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %173 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
  %174 = cast(meta[relay.Constant][9] /* ty=Tensor[(640), uint32] */, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %175 = reshape(%174, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint32] */;
  %176 = @func_1383(%175) /* ty=(Tensor[(10, 16, 4), uint32],) */;
  %177 = %162.0;
  %178 = logical_or(%171, %172) /* ty=Tensor[(3, 3, 14), bool] */;
  %179 = %173.0;
  %180 = %176.0;
  (%177, meta[relay.Constant][8] /* ty=Tensor[(42), uint32] */, %178, %179, %180, meta[relay.Constant][9] /* ty=Tensor[(640), uint32] */)
}

def @func_6316() -> (Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), float32]) {
  @func_6314() /* ty=(Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), float32]) */
}

def @func_6208() -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) {
  %184 = fn () -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) {
    %181 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %182 = @func_3937() /* ty=Tensor[(10, 9, 3), bool] */;
    %183 = %181.0;
    (%182, %183)
  };
  %184() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */
}

def @func_6469(%var_6414: int16, %var_6415: Tensor[(5, 16, 1), int16], %var_6461: Tensor[(54), uint8]) -> (Tensor[(5, 16, 1), bool], Tensor[(10, 9, 3), bool], Tensor[(270), float32], Tensor[(2, 3, 9), bool], Tensor[(6), uint8], Tensor[(54), uint8]) {
  %185 = cast(%var_6414, dtype="bool") /* ty=bool */;
  %186 = cast(%var_6415, dtype="bool") /* ty=Tensor[(5, 16, 1), bool] */;
  %187 = cast(meta[relay.Constant][10] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %188 = reshape(%187, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), float32] */;
  %189 = @func_1292(%188) /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), bool]) */;
  %190 = cast(meta[relay.Constant][11] /* ty=Tensor[(6), uint8] */, dtype="uint8") /* ty=Tensor[(6), uint8] */;
  %191 = cast(%var_6461, dtype="uint8") /* ty=Tensor[(54), uint8] */;
  %192 = cast(%var_6461, dtype="uint8") /* ty=Tensor[(54), uint8] */;
  %193 = reshape(%190, newshape=[2, 3, 1]) /* ty=Tensor[(2, 3, 1), uint8] */;
  %194 = reshape(%191, newshape=[2, 3, 9]) /* ty=Tensor[(2, 3, 9), uint8] */;
  %195 = reshape(%192, newshape=[2, 3, 9]) /* ty=Tensor[(2, 3, 9), uint8] */;
  %196 = @func_4888(%193, %194, %195) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(2, 3, 9), bool], Tensor[(2, 3, 9), bool]) */;
  %197 = greater(%185, %186) /* ty=Tensor[(5, 16, 1), bool] */;
  %198 = %189.0;
  %199 = %196.2;
  (%197, %198, meta[relay.Constant][10] /* ty=Tensor[(270), float32] */, %199, meta[relay.Constant][11] /* ty=Tensor[(6), uint8] */, %var_6461)
}

def @func_681() -> (Tensor[(10, 9, 3), float32],) {
  %203 = fn () -> (Tensor[(10, 9, 3), float32],) {
    %200 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
    %201 = cast(%200, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
    %202 = asinh(%201) /* ty=Tensor[(10, 9, 3), float32] */;
    (%202,)
  };
  %203() /* ty=(Tensor[(10, 9, 3), float32],) */
}

def @func_2378(%var_2377: Tensor[(15, 8, 9), float64]) -> (Tensor[(15, 8, 9), float64],) {
  %209 = fn (%var_2372: Tensor[(15, 8, 9), float64]) -> (Tensor[(15, 8, 9), float64],) {
    %204 = cast(%var_2372, dtype="float64") /* ty=Tensor[(15, 8, 9), float64] */;
    %205 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(15, 8, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %206 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 8, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 8, 9), float64] */;
    %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %208 = power(%206, %207) /* ty=Tensor[(15, 8, 9), float64] */;
    (%208,)
  };
  %209(%var_2377) /* ty=(Tensor[(15, 8, 9), float64],) */
}

def @func_1228() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) {
  %210 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %211 = @func_1099() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
  %212 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %213 = %210.0;
  %214 = %211.0;
  %215 = %212.0;
  (%213, %214, %215)
}

def @func_4893(%var_4890: Tensor[(2, 3, 1), uint8], %var_4891: Tensor[(2, 3, 9), uint8], %var_4892: Tensor[(2, 3, 9), uint8]) -> (Tensor[(10, 9, 3), float32], Tensor[(2, 3, 9), bool], Tensor[(2, 3, 9), bool]) {
  @func_4888(%var_4890, %var_4891, %var_4892) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(2, 3, 9), bool], Tensor[(2, 3, 9), bool]) */
}

def @func_4690() -> (Tensor[(10, 9, 3), float32],) {
  %218 = fn () -> (Tensor[(10, 9, 3), float32],) {
    %216 = @func_1228() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
    %217 = %216.0;
    (%217,)
  };
  %218() /* ty=(Tensor[(10, 9, 3), float32],) */
}

def @func_7690() -> Tensor[(10, 9, 3), float32] {
  %219 = fn () -> Tensor[(10, 9, 3), float32] {
    @func_4162() /* ty=Tensor[(10, 9, 3), float32] */
  };
  %219() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_1230() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) {
  @func_1228() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */
}

def @func_7006(%var_7004: float64, %var_7005: Tensor[(3, 2, 9), float64]) -> Tensor[(3, 2, 9), float32] {
  %224 = fn (%var_6994: float64, %var_6995: Tensor[(3, 2, 9), float64]) -> Tensor[(3, 2, 9), float32] {
    %220 = cast(%var_6994, dtype="float64") /* ty=float64 */;
    %221 = cast(%var_6995, dtype="float64") /* ty=Tensor[(3, 2, 9), float64] */;
    %222 = mod(%220, %221) /* ty=Tensor[(3, 2, 9), float64] */;
    %223 = cast(%222, dtype="float32") /* ty=Tensor[(3, 2, 9), float32] */;
    rsqrt(%223) /* ty=Tensor[(3, 2, 9), float32] */
  };
  %224(%var_7004, %var_7005) /* ty=Tensor[(3, 2, 9), float32] */
}

def @func_3029() -> Tensor[(4, 15, 4), float64] {
  @func_3027() /* ty=Tensor[(4, 15, 4), float64] */
}

def @func_4130() -> (Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), int8]) {
  %225 = @func_2968() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %226 = %225.0;
  %227 = @func_2589() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(21, 6), uint32]) */;
  %228 = %227.1;
  %229 = cast(%228, dtype="int8") /* ty=Tensor[(10, 9, 3), int8] */;
  %230 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%226, dtype="int8") /* ty=Tensor[(10, 9, 3), int8] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %233 = @func_3027() /* ty=Tensor[(4, 15, 4), float64] */;
  %234 = logical_xor(%231, %232) /* ty=Tensor[(10, 9, 3), int8] */;
  (%233, %234)
}

def @func_3073(%var_3072: Tensor[(8, 12, 15), float64]) -> (Tensor[(8, 12, 15), float64],) {
  %237 = fn (%var_3062: Tensor[(8, 12, 15), float64]) -> (Tensor[(8, 12, 15), float64],) {
    %235 = cast(%var_3062, dtype="float64") /* ty=Tensor[(8, 12, 15), float64] */;
    %236 = sin(%235) /* ty=Tensor[(8, 12, 15), float64] */;
    (%236,)
  };
  %237(%var_3072) /* ty=(Tensor[(8, 12, 15), float64],) */
}

def @func_2402() -> (Tensor[(10, 9, 3), bool],) {
  @func_2400() /* ty=(Tensor[(10, 9, 3), bool],) */
}

def @func_4132() -> (Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), int8]) {
  @func_4130() /* ty=(Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), int8]) */
}

def @func_5072() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  @func_5070() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */
}

def @func_2030(%var_2013: Tensor[(640), uint32]) -> (Tensor[(10, 9, 3), float64], Tensor[(640), bool], Tensor[(640), int32]) {
  %238 = @func_1044() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64]) */;
  %239 = cast(meta[relay.Constant][13] /* ty=Tensor[(640), uint32] */, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %240 = reshape(%239, newshape=[640]) /* ty=Tensor[(640), uint32] */;
  %241 = @func_1450(%240) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float32], Tensor[(10, 16, 4), uint32], Tensor[(640), uint32], Tensor[(4, 15, 4), bool]) */;
  %242 = %241.3;
  %243 = cast(meta[relay.Constant][13] /* ty=Tensor[(640), uint32] */, dtype="bool") /* ty=Tensor[(640), bool] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(1), int32] */;
  %245 = cast(%242, dtype="bool") /* ty=Tensor[(640), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?), bool] */;
  %247 = cast(%var_2013, dtype="int32") /* ty=Tensor[(640), int32] */;
  %248 = shape_of(%242, dtype="int32") /* ty=Tensor[(1), int32] */;
  %249 = cast(%242, dtype="int32") /* ty=Tensor[(640), int32] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?), int32] */;
  %251 = %238.2;
  %252 = not_equal(%245, %246) /* ty=Tensor[(640), bool] */;
  %253 = minimum(%249, %250) /* ty=Tensor[(640), int32] */;
  (%251, %252, %253)
}

def @func_1101() -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) {
  @func_1099() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */
}

def @func_553() -> Tensor[(10, 9, 3), float64] {
  %254 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
  atanh(%255) /* ty=Tensor[(10, 9, 3), float64] */
}

def @func_6760() -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(240), int8]) {
  %261 = fn () -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(240), int8]) {
    %256 = @func_968() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
    %257 = @func_1316() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(240), int8]) */;
    %258 = @func_553() /* ty=Tensor[(10, 9, 3), float64] */;
    %259 = %256.0;
    %260 = %257.2;
    (%258, %259, %260)
  };
  %261() /* ty=(Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(240), int8]) */
}

def @func_2969() -> (Tensor[(10, 9, 3), float32],) {
  %263 = fn () -> (Tensor[(10, 9, 3), float32],) {
    %262 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
    (%262,)
  };
  %263() /* ty=(Tensor[(10, 9, 3), float32],) */
}

def @func_6869(%var_6867: Tensor[(72), float64], %var_6868: Tensor[(640), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(72), float64], Tensor[(2, 12, 3), float64], Tensor[(10, 9, 3), bool], Tensor[(640), uint32]) {
  @func_6865(%var_6867, %var_6868) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(72), float64], Tensor[(2, 12, 3), float64], Tensor[(10, 9, 3), bool], Tensor[(640), uint32]) */
}

def @func_374() -> Tensor[(10, 9, 3), float32] {
  %265 = fn () -> Tensor[(10, 9, 3), float32] {
    %264 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 9, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
    sin(%264) /* ty=Tensor[(10, 9, 3), float32] */
  };
  %265() /* ty=Tensor[(10, 9, 3), float32] */
}

def @main(%var_7726: Tensor[(1, 12, 1), float64], %var_7727: Tensor[(1, 12, 8), float64], %var_7765: Tensor[(42), uint32], %var_7766: Tensor[(640), uint32], %var_7768: Tensor[(3, 12, 8), float64]) -> (Tensor[(1, 12, 8), float64], Tensor[(1, 12, 8), bool], Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(640), uint32], Tensor[(3, 12, 8), float32]) {
  %266 = cast(%var_7726, dtype="float64") /* ty=Tensor[(1, 12, 1), float64] */;
  %267 = cast(%var_7727, dtype="float64") /* ty=Tensor[(1, 12, 8), float64] */;
  %268 = cast(%var_7726, dtype="bool") /* ty=Tensor[(1, 12, 1), bool] */;
  %269 = cast(%var_7727, dtype="bool") /* ty=Tensor[(1, 12, 8), bool] */;
  %270 = @func_6316() /* ty=(Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), float32]) */;
  %271 = %270.0;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(4, 15, 4), float64] */;
  %273 = cast(%var_7765, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %274 = cast(%var_7766, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %275 = reshape(%273, newshape=[42, 1]) /* ty=Tensor[(42, 1), uint32] */;
  %276 = reshape(%274, newshape=[1, 640]) /* ty=Tensor[(1, 640), uint32] */;
  %277 = @func_7245(%275, %276) /* ty=(Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 16, 4), uint32], Tensor[(1, 640), uint32], Tensor[(42, 126), uint64]) */;
  %278 = cast(%var_7727, dtype="float32") /* ty=Tensor[(1, 12, 8), float32] */;
  %279 = cast(%var_7768, dtype="float32") /* ty=Tensor[(3, 12, 8), float32] */;
  %280 = divide(%266, %267) /* ty=Tensor[(1, 12, 8), float64] */;
  %281 = less_equal(%268, %269) /* ty=Tensor[(1, 12, 8), bool] */;
  %282 = log2(%272) /* ty=Tensor[(4, 15, 4), float64] */;
  %283 = %277.2;
  %284 = power(%278, %279) /* ty=Tensor[(3, 12, 8), float32] */;
  (%280, %281, %282, %283, %var_7765, %var_7766, %284)
}

def @func_4529(%var_4528: Tensor[(480), float64]) -> (Tensor[(10, 9, 3), float32], Tensor[(315), float64], Tensor[(480), float64], Tensor[(4, 15, 4), float32]) {
  %292 = fn (%var_4506: Tensor[(480), float64]) -> (Tensor[(10, 9, 3), float32], Tensor[(315), float64], Tensor[(480), float64], Tensor[(4, 15, 4), float32]) {
    %285 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %286 = cast(%var_4506, dtype="float64") /* ty=Tensor[(480), float64] */;
    %287 = reshape(%286, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), float64] */;
    %288 = @func_3440(%287) /* ty=(Tensor[(2, 15, 16), bool], Tensor[(5, 9, 7), float64], Tensor[(315), float64]) */;
    %289 = %285.0;
    %290 = %288.2;
    %291 = @func_4183() /* ty=Tensor[(4, 15, 4), float32] */;
    (%289, %290, %var_4506, %291)
  };
  %292(%var_4528) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(315), float64], Tensor[(480), float64], Tensor[(4, 15, 4), float32]) */
}

def @func_1045() -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64]) {
  %311 = fn () -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64]) {
    %293 = @func_968() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
    %294 = %293.1;
    %295 = @func_429() /* ty=Tensor[(10, 9, 3), float32] */;
    %296 = cast(%294, dtype="uint64") /* ty=Tensor[(10, 9, 3), uint64] */;
    %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
    %298 = cast(%295, dtype="uint64") /* ty=Tensor[(10, 9, 3), uint64] */;
    %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %300 = minimum(%298, %299) /* ty=Tensor[(10, 9, 3), uint64] */;
    %301 = cast(%300, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
    %302 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
    %303 = cast(%294, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
    %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %305 = @func_968() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
    %306 = %305.2;
    %307 = cast(%306, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
    %308 = greater_equal(%303, %304) /* ty=Tensor[(10, 9, 3), bool] */;
    %309 = exp(%307) /* ty=Tensor[(10, 9, 3), float32] */;
    %310 = @func_626() /* ty=Tensor[(10, 9, 3), float64] */;
    (%308, %309, %310)
  };
  %311() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64]) */
}

def @func_738() -> Tensor[(10, 9, 3), float64] {
  @func_736() /* ty=Tensor[(10, 9, 3), float64] */
}

def @func_4055(%var_4053: Tensor[(800), float32], %var_4054: Tensor[(640), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(864), float32], Tensor[(800), float32], Tensor[(216, 4), float32], Tensor[(640), uint32], Tensor[(5, 16, 10), float32]) {
  %344 = fn (%var_4013: Tensor[(800), float32], %var_4015: Tensor[(640), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(864), float32], Tensor[(800), float32], Tensor[(216, 4), float32], Tensor[(640), uint32], Tensor[(5, 16, 10), float32]) {
    %312 = cast(meta[relay.Constant][15] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %313 = reshape(%312, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %314 = @func_3231(%313) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), bool], Tensor[(640), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), int64]) */;
    %315 = @func_2893() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
    %316 = cast(%var_4013, dtype="float32") /* ty=Tensor[(800), float32] */;
    %317 = cast(%var_4013, dtype="float32") /* ty=Tensor[(800), float32] */;
    %318 = cast(meta[relay.Constant][16] /* ty=Tensor[(216, 4), float32] */, dtype="float32") /* ty=Tensor[(216, 4), float32] */;
    %319 = cast(%var_4015, dtype="uint32") /* ty=Tensor[(640), uint32] */;
    %320 = cast(meta[relay.Constant][15] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %321 = reshape(%316, newshape=[5, 16, 10]) /* ty=Tensor[(5, 16, 10), float32] */;
    %322 = reshape(%317, newshape=[5, 16, 10]) /* ty=Tensor[(5, 16, 10), float32] */;
    %323 = reshape(%318, newshape=[864]) /* ty=Tensor[(864), float32] */;
    %324 = reshape(%319, newshape=[640]) /* ty=Tensor[(640), uint32] */;
    %325 = reshape(%320, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %326 = @func_3280(%321, %322, %323, %324, %325) /* ty=(Tensor[(5, 16, 10), float32], Tensor[(6, 9, 16), float32], Tensor[(864), float32], Tensor[(10, 9, 3), float32], Tensor[(126), uint32], Tensor[(640), float64]) */;
    %327 = cast(%var_4013, dtype="float32") /* ty=Tensor[(800), float32] */;
    %328 = cast(%var_4013, dtype="float32") /* ty=Tensor[(800), float32] */;
    %329 = cast(meta[relay.Constant][16] /* ty=Tensor[(216, 4), float32] */, dtype="float32") /* ty=Tensor[(216, 4), float32] */;
    %330 = cast(%var_4015, dtype="uint32") /* ty=Tensor[(640), uint32] */;
    %331 = cast(meta[relay.Constant][15] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %332 = reshape(%327, newshape=[5, 16, 10]) /* ty=Tensor[(5, 16, 10), float32] */;
    %333 = reshape(%328, newshape=[5, 16, 10]) /* ty=Tensor[(5, 16, 10), float32] */;
    %334 = reshape(%329, newshape=[864]) /* ty=Tensor[(864), float32] */;
    %335 = reshape(%330, newshape=[640]) /* ty=Tensor[(640), uint32] */;
    %336 = reshape(%331, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %337 = @func_3280(%332, %333, %334, %335, %336) /* ty=(Tensor[(5, 16, 10), float32], Tensor[(6, 9, 16), float32], Tensor[(864), float32], Tensor[(10, 9, 3), float32], Tensor[(126), uint32], Tensor[(640), float64]) */;
    %338 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
    %339 = %314.0;
    %340 = @func_882() /* ty=Tensor[(10, 9, 3), float32] */;
    %341 = %315.0;
    %342 = %326.2;
    %343 = %337.0;
    (%338, %339, meta[relay.Constant][15] /* ty=Tensor[(126), uint32] */, %340, %341, %342, %var_4013, meta[relay.Constant][16] /* ty=Tensor[(216, 4), float32] */, %var_4015, %343)
  };
  %344(%var_4053, %var_4054) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(864), float32], Tensor[(800), float32], Tensor[(216, 4), float32], Tensor[(640), uint32], Tensor[(5, 16, 10), float32]) */
}

def @func_2182(%var_2180: Tensor[(10, 9, 3), float64]) -> (Tensor[(10, 9, 3), int32],) {
  @func_2179(%var_2180) /* ty=(Tensor[(10, 9, 3), int32],) */
}

def @func_1450(%var_1422: Tensor[(640), uint32]) -> (Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float32], Tensor[(10, 16, 4), uint32], Tensor[(640), uint32], Tensor[(4, 15, 4), bool]) {
  %345 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
  %346 = cast(%var_1422, dtype="uint32") /* ty=Tensor[(640), uint32] */;
  %347 = reshape(%346, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint32] */;
  %348 = @func_1383(%347) /* ty=(Tensor[(10, 16, 4), uint32],) */;
  %349 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
  %350 = %349.0;
  %351 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
  %352 = %351.0;
  %353 = cast(%352, dtype="bool") /* ty=Tensor[(4, 15, 4), bool] */;
  %354 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%350, dtype="bool") /* ty=Tensor[(4, 15, 4), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %357 = %345.0;
  %358 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
  %359 = %348.0;
  %360 = equal(%355, %356) /* ty=Tensor[(4, 15, 4), bool] */;
  (%357, %358, %359, %var_1422, %360)
}

def @func_6101() -> (Tensor[(14, 1, 10), uint32],) {
  %361 = cast(meta[relay.Constant][17] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %362 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 1, 10), uint32] */, dtype="uint32") /* ty=Tensor[(14, 1, 10), uint32] */;
  %363 = multiply(%361, %362) /* ty=Tensor[(14, 1, 10), uint32] */;
  (%363,)
}

def @func_3893(%var_3892: Tensor[(1, 3, 3), float64]) -> (Tensor[(1, 3, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %371 = fn (%var_3872: Tensor[(1, 3, 3), float64]) -> (Tensor[(1, 3, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
    %364 = cast(%var_3872, dtype="float64") /* ty=Tensor[(1, 3, 3), float64] */;
    %365 = log2(%364) /* ty=Tensor[(1, 3, 3), float64] */;
    %366 = cast(%365, dtype="float64") /* ty=Tensor[(1, 3, 3), float64] */;
    %367 = @func_968() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
    %368 = cos(%366) /* ty=Tensor[(1, 3, 3), float64] */;
    %369 = @func_3788() /* ty=Tensor[(10, 9, 3), float32] */;
    %370 = %367.2;
    (%368, %369, %370)
  };
  %371(%var_3892) /* ty=(Tensor[(1, 3, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */
}

def @func_4432() -> (Tensor[(10, 9, 3), bool], Tensor[(4, 15, 4), float32], Tensor[(10, 9, 3), int8], Tensor[(10, 9, 3), float64]) {
  @func_4430() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(4, 15, 4), float32], Tensor[(10, 9, 3), int8], Tensor[(10, 9, 3), float64]) */
}

def @func_3562() -> (Tensor[(10, 9, 3), bool],) {
  %372 = @func_1044() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64]) */;
  %373 = %372.0;
  (%373,)
}

def @func_3181(%var_3179: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), bool], Tensor[(42), uint32], Tensor[(3, 3, 14), bool], Tensor[(4, 15, 4), int8], Tensor[(10, 16, 4), uint32], Tensor[(640), uint32]) {
  @func_3178(%var_3179) /* ty=(Tensor[(10, 9, 3), bool], Tensor[(42), uint32], Tensor[(3, 3, 14), bool], Tensor[(4, 15, 4), int8], Tensor[(10, 16, 4), uint32], Tensor[(640), uint32]) */
}

def @func_2589() -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(21, 6), uint32]) {
  %374 = @func_1044() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64]) */;
  %375 = cast(meta[relay.Constant][19] /* ty=Tensor[(21, 6), uint32] */, dtype="uint32") /* ty=Tensor[(21, 6), uint32] */;
  %376 = reshape(%375, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %377 = @func_822(%376) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64], Tensor[(126), uint32], Tensor[(126), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %378 = %374.0;
  %379 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
  %380 = %377.3;
  (%378, %379, %380, meta[relay.Constant][19] /* ty=Tensor[(21, 6), uint32] */)
}

def @func_3546(%var_3544: float64, %var_3545: Tensor[(8, 5, 5), float64]) -> Tensor[(8, 5, 5), float64] {
  @func_3542(%var_3544, %var_3545) /* ty=Tensor[(8, 5, 5), float64] */
}

def @func_6474(%var_6471: int16, %var_6472: Tensor[(5, 16, 1), int16], %var_6473: Tensor[(54), uint8]) -> (Tensor[(5, 16, 1), bool], Tensor[(10, 9, 3), bool], Tensor[(270), float32], Tensor[(2, 3, 9), bool], Tensor[(6), uint8], Tensor[(54), uint8]) {
  @func_6469(%var_6471, %var_6472, %var_6473) /* ty=(Tensor[(5, 16, 1), bool], Tensor[(10, 9, 3), bool], Tensor[(270), float32], Tensor[(2, 3, 9), bool], Tensor[(6), uint8], Tensor[(54), uint8]) */
}

def @func_5110() -> (Tensor[(4, 15, 4), float64],) {
  %382 = fn () -> (Tensor[(4, 15, 4), float64],) {
    %381 = @func_3027() /* ty=Tensor[(4, 15, 4), float64] */;
    (%381,)
  };
  %382() /* ty=(Tensor[(4, 15, 4), float64],) */
}

def @func_1770(%var_1751: Tensor[(11, 10, 8), int16]) -> (Tensor[(11, 10, 8), int16], Tensor[(10, 9, 3), float32]) {
  %383 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 10, 8), int16] */, dtype="int16") /* ty=Tensor[(1, 10, 8), int16] */;
  %384 = cast(%var_1751, dtype="int16") /* ty=Tensor[(11, 10, 8), int16] */;
  %385 = right_shift(%383, %384) /* ty=Tensor[(11, 10, 8), int16] */;
  %386 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
  (%385, %386)
}

def @func_7056() -> Tensor[(10, 9, 3), float32] {
  %387 = @func_1099() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
  %387.1
}

def @func_5813() -> (Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(126), uint32]) {
  %394 = fn () -> (Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(126), uint32]) {
    %388 = @func_5433() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) */;
    %389 = cast(meta[relay.Constant][21] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %390 = reshape(%389, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %391 = @func_3178(%390) /* ty=(Tensor[(10, 9, 3), bool], Tensor[(42), uint32], Tensor[(3, 3, 14), bool], Tensor[(4, 15, 4), int8], Tensor[(10, 16, 4), uint32], Tensor[(640), uint32]) */;
    %392 = %388.0;
    %393 = %391.3;
    (%392, %393, meta[relay.Constant][21] /* ty=Tensor[(126), uint32] */)
  };
  %394() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(126), uint32]) */
}

def @func_3817(%var_3805: Tensor[(10, 9, 3), float32]) -> (Tensor[(10, 9, 3), uint32], Tensor[(10, 9, 3), float32]) {
  %395 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
  %396 = cast(%var_3805, dtype="uint32") /* ty=Tensor[(10, 9, 3), uint32] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="uint32") /* ty=Tensor[(10, 9, 3), uint32] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %400 = subtract(%398, %399) /* ty=Tensor[(10, 9, 3), uint32] */;
  %401 = @func_3788() /* ty=Tensor[(10, 9, 3), float32] */;
  (%400, %401)
}

def @func_7201(%var_7200: Tensor[(12, 16, 5), uint8]) -> (Tensor[(12, 16, 5), uint8], Tensor[(12, 16, 5), int8]) {
  %412 = fn (%var_7175: Tensor[(12, 16, 5), uint8]) -> (Tensor[(12, 16, 5), uint8], Tensor[(12, 16, 5), int8]) {
    %402 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 16, 5), uint8] */, dtype="uint8") /* ty=Tensor[(12, 16, 5), uint8] */;
    %403 = shape_of(%var_7175, dtype="int32") /* ty=Tensor[(3), int32] */;
    %404 = cast(%var_7175, dtype="uint8") /* ty=Tensor[(12, 16, 5), uint8] */;
    %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %406 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 16, 5), uint8] */, dtype="int8") /* ty=Tensor[(12, 16, 5), int8] */;
    %407 = shape_of(%var_7175, dtype="int32") /* ty=Tensor[(3), int32] */;
    %408 = cast(%var_7175, dtype="int8") /* ty=Tensor[(12, 16, 5), int8] */;
    %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %410 = minimum(%404, %405) /* ty=Tensor[(12, 16, 5), uint8] */;
    %411 = bitwise_or(%408, %409) /* ty=Tensor[(12, 16, 5), int8] */;
    (%410, %411)
  };
  %412(%var_7200) /* ty=(Tensor[(12, 16, 5), uint8], Tensor[(12, 16, 5), int8]) */
}

def @func_2033(%var_2031: Tensor[(640), uint32]) -> (Tensor[(10, 9, 3), float64], Tensor[(640), bool], Tensor[(640), int32]) {
  @func_2030(%var_2031) /* ty=(Tensor[(10, 9, 3), float64], Tensor[(640), bool], Tensor[(640), int32]) */
}

def @func_1150(%var_1149: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(10, 9, 3), float64]) {
  %425 = fn (%var_1124: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(10, 9, 3), float64]) {
    %413 = cast(%var_1124, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %414 = reshape(%413, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %415 = @func_822(%414) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64], Tensor[(126), uint32], Tensor[(126), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
    %416 = cast(meta[relay.Constant][23] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
    %417 = %415.3;
    %418 = cast(%417, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %419 = reshape(%416, newshape=[1, 3, 14]) /* ty=Tensor[(1, 3, 14), uint32] */;
    %420 = reshape(%418, newshape=[3, 3, 14]) /* ty=Tensor[(3, 3, 14), uint32] */;
    %421 = @func_471(%419, %420) /* ty=(Tensor[(3, 3, 14), bool], Tensor[(10, 9, 3), float32]) */;
    %422 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
    %423 = %421.1;
    %424 = @func_626() /* ty=Tensor[(10, 9, 3), float64] */;
    (%422, %417, %var_1124, %423, meta[relay.Constant][23] /* ty=Tensor[(42), uint32] */, %424)
  };
  %425(%var_1149) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(10, 9, 3), float64]) */
}

def @func_7336(%var_7334: Tensor[(4, 15, 4), float64], %var_7335: Tensor[(270), float64]) -> (Tensor[(4, 15, 4), float32], Tensor[(4, 15, 4), bool], Tensor[(30, 9), float32], Tensor[(270), float64]) {
  %439 = fn (%var_7306: Tensor[(4, 15, 4), float64], %var_7324: Tensor[(270), float64]) -> (Tensor[(4, 15, 4), float32], Tensor[(4, 15, 4), bool], Tensor[(30, 9), float32], Tensor[(270), float64]) {
    %426 = @func_5109() /* ty=(Tensor[(4, 15, 4), float64],) */;
    %427 = %426.0;
    %428 = cast(%427, dtype="float32") /* ty=Tensor[(4, 15, 4), float32] */;
    %429 = cast(%var_7306, dtype="bool") /* ty=Tensor[(4, 15, 4), bool] */;
    %430 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
    %431 = cast(%427, dtype="bool") /* ty=Tensor[(4, 15, 4), bool] */;
    %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %433 = cast(%var_7324, dtype="float64") /* ty=Tensor[(270), float64] */;
    %434 = reshape(%433, newshape=[30, 9]) /* ty=Tensor[(30, 9), float64] */;
    %435 = @func_2649(%434) /* ty=(Tensor[(126), float32], Tensor[(10, 9, 3), int32], Tensor[(30, 9), float32]) */;
    %436 = acos(%428) /* ty=Tensor[(4, 15, 4), float32] */;
    %437 = less(%431, %432) /* ty=Tensor[(4, 15, 4), bool] */;
    %438 = %435.2;
    (%436, %437, %438, %var_7324)
  };
  %439(%var_7334, %var_7335) /* ty=(Tensor[(4, 15, 4), float32], Tensor[(4, 15, 4), bool], Tensor[(30, 9), float32], Tensor[(270), float64]) */
}

def @func_3443(%var_3441: Tensor[(2, 15, 16), float64]) -> (Tensor[(2, 15, 16), bool], Tensor[(5, 9, 7), float64], Tensor[(315), float64]) {
  @func_3440(%var_3441) /* ty=(Tensor[(2, 15, 16), bool], Tensor[(5, 9, 7), float64], Tensor[(315), float64]) */
}

def @func_7493(%var_7481: Tensor[(2, 12, 11), float64]) -> (Tensor[(2, 12, 11), uint16], Tensor[(6, 9, 16), float32], Tensor[(12, 72), float32]) {
  %440 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 1, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 1, 11), float64] */;
  %441 = erf(%440) /* ty=Tensor[(2, 1, 11), float64] */;
  %442 = cast(%441, dtype="uint16") /* ty=Tensor[(2, 1, 11), uint16] */;
  %443 = cast(%var_7481, dtype="uint16") /* ty=Tensor[(2, 12, 11), uint16] */;
  %444 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 72), float32] */, dtype="float32") /* ty=Tensor[(12, 72), float32] */;
  %445 = reshape(%444, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
  %446 = @func_2291(%445) /* ty=(Tensor[(6, 9, 16), float32],) */;
  %447 = right_shift(%442, %443) /* ty=Tensor[(2, 12, 11), uint16] */;
  %448 = %446.0;
  (%447, %448, meta[relay.Constant][25] /* ty=Tensor[(12, 72), float32] */)
}

def @func_7544() -> Tensor[(126), float32] {
  %450 = fn () -> Tensor[(126), float32] {
    %449 = @func_6016() /* ty=(Tensor[(14, 5, 16), float64], Tensor[(10, 9, 3), bool], Tensor[(126), float32], Tensor[(4, 15, 4), int8], Tensor[(240, 1), int8]) */;
    %449.2
  };
  %450() /* ty=Tensor[(126), float32] */
}

def @func_6016() -> (Tensor[(14, 5, 16), float64], Tensor[(10, 9, 3), bool], Tensor[(126), float32], Tensor[(4, 15, 4), int8], Tensor[(240, 1), int8]) {
  %451 = @func_3741() /* ty=(Tensor[(14, 5, 16), float64],) */;
  %452 = @func_3562() /* ty=(Tensor[(10, 9, 3), bool],) */;
  %453 = %452.0;
  %454 = cast(%453, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
  %455 = reshape(%454, newshape=[30, 9]) /* ty=Tensor[(30, 9), float64] */;
  %456 = @func_2649(%455) /* ty=(Tensor[(126), float32], Tensor[(10, 9, 3), int32], Tensor[(30, 9), float32]) */;
  %457 = cast(meta[relay.Constant][26] /* ty=Tensor[(240, 1), int8] */, dtype="int8") /* ty=Tensor[(240, 1), int8] */;
  %458 = cast(meta[relay.Constant][26] /* ty=Tensor[(240, 1), int8] */, dtype="int8") /* ty=Tensor[(240, 1), int8] */;
  %459 = reshape(%457, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), int8] */;
  %460 = reshape(%458, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), int8] */;
  %461 = @func_405(%459, %460) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float32]) */;
  %462 = %451.0;
  %463 = %456.0;
  %464 = %461.0;
  (%462, %453, %463, %464, meta[relay.Constant][26] /* ty=Tensor[(240, 1), int8] */)
}

def @func_1941() -> (Tensor[(10, 16, 4), uint32], Tensor[(160, 4), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) {
  %483 = fn () -> (Tensor[(10, 16, 4), uint32], Tensor[(160, 4), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) {
    %465 = cast(meta[relay.Constant][27] /* ty=Tensor[(160, 4), uint32] */, dtype="uint32") /* ty=Tensor[(160, 4), uint32] */;
    %466 = reshape(%465, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint32] */;
    %467 = @func_1383(%466) /* ty=(Tensor[(10, 16, 4), uint32],) */;
    %468 = @func_1099() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
    %469 = %468.0;
    %470 = cast(%469, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
    %471 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
    %472 = cast(%471, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
    %473 = rsqrt(%472) /* ty=Tensor[(10, 9, 3), float32] */;
    %474 = cast(%473, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
    %475 = cosh(%474) /* ty=Tensor[(10, 9, 3), float64] */;
    %476 = cast(%469, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
    %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
    %478 = cast(%475, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %480 = %467.0;
    %481 = tan(%470) /* ty=Tensor[(10, 9, 3), float32] */;
    %482 = logical_and(%478, %479) /* ty=Tensor[(10, 9, 3), bool] */;
    (%480, meta[relay.Constant][27] /* ty=Tensor[(160, 4), uint32] */, %481, %482)
  };
  %483() /* ty=(Tensor[(10, 16, 4), uint32], Tensor[(160, 4), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) */
}

def @func_6314() -> (Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), float32]) {
  %484 = @func_5109() /* ty=(Tensor[(4, 15, 4), float64],) */;
  %485 = %484.0;
  %486 = @func_4162() /* ty=Tensor[(10, 9, 3), float32] */;
  (%485, %486)
}

def @func_4580(%var_4579: Tensor[(480), float64]) -> (Tensor[(10, 9, 3), float32], Tensor[(315), float64], Tensor[(480), float64], Tensor[(10, 9, 3), float32]) {
  %494 = fn (%var_4546: Tensor[(480), float64]) -> (Tensor[(10, 9, 3), float32], Tensor[(315), float64], Tensor[(480), float64], Tensor[(10, 9, 3), float32]) {
    %487 = @func_2589() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(21, 6), uint32]) */;
    %488 = cast(%var_4546, dtype="float64") /* ty=Tensor[(480), float64] */;
    %489 = reshape(%488, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), float64] */;
    %490 = @func_3440(%489) /* ty=(Tensor[(2, 15, 16), bool], Tensor[(5, 9, 7), float64], Tensor[(315), float64]) */;
    %491 = %487.1;
    %492 = %490.2;
    %493 = @func_2102() /* ty=Tensor[(10, 9, 3), float32] */;
    (%491, %492, %var_4546, %493)
  };
  %494(%var_4579) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(315), float64], Tensor[(480), float64], Tensor[(10, 9, 3), float32]) */
}

def @func_7468() -> Tensor[(10, 9, 3), int8] {
  %495 = @func_6405() /* ty=(Tensor[(10, 9, 3), int8],) */;
  %495.0
}

def @func_6796(%var_6795: Tensor[(2, 8, 2), float32]) -> (Tensor[(2, 8, 2), float32], Tensor[(10, 9, 3), uint32], Tensor[(270), float32], Tensor[(2, 3, 9), bool], Tensor[(6), uint8], Tensor[(54), uint8]) {
  %510 = fn (%var_6773: Tensor[(2, 8, 2), float32]) -> (Tensor[(2, 8, 2), float32], Tensor[(10, 9, 3), uint32], Tensor[(270), float32], Tensor[(2, 3, 9), bool], Tensor[(6), uint8], Tensor[(54), uint8]) {
    %496 = cast(%var_6773, dtype="float32") /* ty=Tensor[(2, 8, 2), float32] */;
    %497 = cast(meta[relay.Constant][28] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
    %498 = reshape(%497, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), float32] */;
    %499 = @func_3817(%498) /* ty=(Tensor[(10, 9, 3), uint32], Tensor[(10, 9, 3), float32]) */;
    %500 = cast(meta[relay.Constant][29] /* ty=Tensor[(6), uint8] */, dtype="uint8") /* ty=Tensor[(6), uint8] */;
    %501 = cast(meta[relay.Constant][30] /* ty=Tensor[(54), uint8] */, dtype="uint8") /* ty=Tensor[(54), uint8] */;
    %502 = cast(meta[relay.Constant][30] /* ty=Tensor[(54), uint8] */, dtype="uint8") /* ty=Tensor[(54), uint8] */;
    %503 = reshape(%500, newshape=[2, 3, 1]) /* ty=Tensor[(2, 3, 1), uint8] */;
    %504 = reshape(%501, newshape=[2, 3, 9]) /* ty=Tensor[(2, 3, 9), uint8] */;
    %505 = reshape(%502, newshape=[2, 3, 9]) /* ty=Tensor[(2, 3, 9), uint8] */;
    %506 = @func_4888(%503, %504, %505) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(2, 3, 9), bool], Tensor[(2, 3, 9), bool]) */;
    %507 = sqrt(%496) /* ty=Tensor[(2, 8, 2), float32] */;
    %508 = %499.0;
    %509 = %506.1;
    (%507, %508, meta[relay.Constant][28] /* ty=Tensor[(270), float32] */, %509, meta[relay.Constant][29] /* ty=Tensor[(6), uint8] */, meta[relay.Constant][30] /* ty=Tensor[(54), uint8] */)
  };
  %510(%var_6795) /* ty=(Tensor[(2, 8, 2), float32], Tensor[(10, 9, 3), uint32], Tensor[(270), float32], Tensor[(2, 3, 9), bool], Tensor[(6), uint8], Tensor[(54), uint8]) */
}

def @func_3474(%var_3473: Tensor[(10, 9, 3), float64]) -> Tensor[(10, 9, 3), int64] {
  %516 = fn (%var_3466: Tensor[(10, 9, 3), float64]) -> Tensor[(10, 9, 3), int64] {
    %511 = @func_736() /* ty=Tensor[(10, 9, 3), float64] */;
    %512 = cast(%var_3466, dtype="int64") /* ty=Tensor[(10, 9, 3), int64] */;
    %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
    %514 = cast(%511, dtype="int64") /* ty=Tensor[(10, 9, 3), int64] */;
    %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    maximum(%514, %515) /* ty=Tensor[(10, 9, 3), int64] */
  };
  %516(%var_3473) /* ty=Tensor[(10, 9, 3), int64] */
}

def @func_6406() -> (Tensor[(10, 9, 3), int8],) {
  %519 = fn () -> (Tensor[(10, 9, 3), int8],) {
    %517 = @func_4430() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(4, 15, 4), float32], Tensor[(10, 9, 3), int8], Tensor[(10, 9, 3), float64]) */;
    %518 = %517.2;
    (%518,)
  };
  %519() /* ty=(Tensor[(10, 9, 3), int8],) */
}

def @func_2102() -> Tensor[(10, 9, 3), float32] {
  %520 = @func_429() /* ty=Tensor[(10, 9, 3), float32] */;
  %521 = @func_553() /* ty=Tensor[(10, 9, 3), float64] */;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %523 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%520, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%524, %525) /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_4162() -> Tensor[(10, 9, 3), float32] {
  %526 = @func_1173() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %526.0
}

def @func_3440(%var_3411: Tensor[(2, 15, 16), float64]) -> (Tensor[(2, 15, 16), bool], Tensor[(5, 9, 7), float64], Tensor[(315), float64]) {
  %527 = cast(%var_3411, dtype="float64") /* ty=Tensor[(2, 15, 16), float64] */;
  %528 = asin(%527) /* ty=Tensor[(2, 15, 16), float64] */;
  %529 = cast(%528, dtype="bool") /* ty=Tensor[(2, 15, 16), bool] */;
  %530 = shape_of(%var_3411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%var_3411, dtype="bool") /* ty=Tensor[(2, 15, 16), bool] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %533 = cast(meta[relay.Constant][31] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %534 = reshape(%533, newshape=[5, 9, 7]) /* ty=Tensor[(5, 9, 7), float64] */;
  %535 = @func_2480(%534) /* ty=(Tensor[(5, 9, 7), float64],) */;
  %536 = not_equal(%531, %532) /* ty=Tensor[(2, 15, 16), bool] */;
  %537 = %535.0;
  (%536, %537, meta[relay.Constant][31] /* ty=Tensor[(315), float64] */)
}

def @func_3286(%var_3281: Tensor[(5, 16, 10), float32], %var_3282: Tensor[(5, 16, 10), float32], %var_3283: Tensor[(864), float32], %var_3284: Tensor[(640), uint32], %var_3285: Tensor[(126), uint32]) -> (Tensor[(5, 16, 10), float32], Tensor[(6, 9, 16), float32], Tensor[(864), float32], Tensor[(10, 9, 3), float32], Tensor[(126), uint32], Tensor[(640), float64]) {
  %560 = fn (%var_3244: Tensor[(5, 16, 10), float32], %var_3245: Tensor[(5, 16, 10), float32], %var_3257: Tensor[(864), float32], %var_3266: Tensor[(640), uint32], %var_3269: Tensor[(126), uint32]) -> (Tensor[(5, 16, 10), float32], Tensor[(6, 9, 16), float32], Tensor[(864), float32], Tensor[(10, 9, 3), float32], Tensor[(126), uint32], Tensor[(640), float64]) {
    %538 = cast(%var_3245, dtype="float32") /* ty=Tensor[(5, 16, 10), float32] */;
    %539 = shape_of(%var_3244, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(%var_3244, dtype="float32") /* ty=Tensor[(5, 16, 10), float32] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %542 = cast(%var_3257, dtype="float32") /* ty=Tensor[(864), float32] */;
    %543 = reshape(%542, newshape=[6, 9, 16]) /* ty=Tensor[(6, 9, 16), float32] */;
    %544 = @func_2291(%543) /* ty=(Tensor[(6, 9, 16), float32],) */;
    %545 = cast(%var_3269, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %546 = reshape(%545, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %547 = @func_1148(%546) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(10, 9, 3), float64]) */;
    %548 = cast(%var_3266, dtype="uint32") /* ty=Tensor[(640), uint32] */;
    %549 = reshape(%548, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint32] */;
    %550 = @func_1383(%549) /* ty=(Tensor[(10, 16, 4), uint32],) */;
    %551 = %550.0;
    %552 = cast(%551, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
    %553 = shape_of(%var_3266, dtype="int32") /* ty=Tensor[(1), int32] */;
    %554 = cast(%var_3266, dtype="float64") /* ty=Tensor[(640), float64] */;
    %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?), float64] */;
    %556 = floor_divide(%540, %541) /* ty=Tensor[(5, 16, 10), float32] */;
    %557 = %544.0;
    %558 = %547.0;
    %559 = floor_divide(%554, %555) /* ty=Tensor[(640), float64] */;
    (%556, %557, %var_3257, %558, %var_3269, %559)
  };
  %560(%var_3281, %var_3282, %var_3283, %var_3284, %var_3285) /* ty=(Tensor[(5, 16, 10), float32], Tensor[(6, 9, 16), float32], Tensor[(864), float32], Tensor[(10, 9, 3), float32], Tensor[(126), uint32], Tensor[(640), float64]) */
}

def @func_4164() -> Tensor[(10, 9, 3), float32] {
  @func_4162() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_1773(%var_1771: Tensor[(11, 10, 8), int16]) -> (Tensor[(11, 10, 8), int16], Tensor[(10, 9, 3), float32]) {
  @func_1770(%var_1771) /* ty=(Tensor[(11, 10, 8), int16], Tensor[(10, 9, 3), float32]) */
}

def @func_4743(%var_4742: Tensor[(4, 15, 13), float32]) -> (Tensor[(4, 15, 13), bool],) {
  %571 = fn (%var_4733: Tensor[(4, 15, 13), float32]) -> (Tensor[(4, 15, 13), bool],) {
    %561 = cast(%var_4733, dtype="float32") /* ty=Tensor[(4, 15, 13), float32] */;
    %562 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(4, 15, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %563 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 15, 13), float32] */, dtype="float32") /* ty=Tensor[(4, 15, 13), float32] */;
    %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %565 = floor_divide(%563, %564) /* ty=Tensor[(4, 15, 13), float32] */;
    %566 = cast(%565, dtype="bool") /* ty=Tensor[(4, 15, 13), bool] */;
    %567 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(4, 15, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %568 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 15, 13), float32] */, dtype="bool") /* ty=Tensor[(4, 15, 13), bool] */;
    %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %570 = not_equal(%568, %569) /* ty=Tensor[(4, 15, 13), bool] */;
    (%570,)
  };
  %571(%var_4742) /* ty=(Tensor[(4, 15, 13), bool],) */
}

def @func_968() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %572 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
  %573 = cast(%572, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %574 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %575 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
  %576 = asin(%573) /* ty=Tensor[(10, 9, 3), float32] */;
  %577 = %574.0;
  (%575, %576, %577)
}

def @func_5696(%var_5660: Tensor[(4, 15, 4), float64], %var_5672: Tensor[(126), uint32], %var_5673: Tensor[(3, 504), uint32]) -> (Tensor[(4, 15, 4), bool], Tensor[(10, 9, 3), float32], Tensor[(126), uint32], Tensor[(3, 504), uint32], Tensor[(4, 15, 4), int64], Tensor[(10, 16, 4), uint32], Tensor[(10, 9, 3), float32]) {
  %578 = @func_5109() /* ty=(Tensor[(4, 15, 4), float64],) */;
  %579 = %578.0;
  %580 = cast(%var_5660, dtype="bool") /* ty=Tensor[(4, 15, 4), bool] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="bool") /* ty=Tensor[(4, 15, 4), bool] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %584 = cast(%var_5672, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %585 = cast(%var_5673, dtype="uint32") /* ty=Tensor[(3, 504), uint32] */;
  %586 = reshape(%584, newshape=[126, 1]) /* ty=Tensor[(126, 1), uint32] */;
  %587 = reshape(%585, newshape=[126, 12]) /* ty=Tensor[(126, 12), uint32] */;
  %588 = @func_2260(%586, %587) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(126, 12), bool]) */;
  %589 = cast(%var_5660, dtype="int64") /* ty=Tensor[(4, 15, 4), int64] */;
  %590 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%579, dtype="int64") /* ty=Tensor[(4, 15, 4), int64] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %593 = @func_1940() /* ty=(Tensor[(10, 16, 4), uint32], Tensor[(160, 4), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) */;
  %594 = @func_968() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %595 = greater_equal(%582, %583) /* ty=Tensor[(4, 15, 4), bool] */;
  %596 = %588.1;
  %597 = right_shift(%591, %592) /* ty=Tensor[(4, 15, 4), int64] */;
  %598 = %593.0;
  %599 = %594.0;
  (%595, %596, %var_5672, %var_5673, %597, %598, %599)
}

def @func_4825() -> (Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float64]) {
  @func_4823() /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float64]) */
}

def @func_3142(%var_3141: Tensor[(880), int16]) -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(11, 10, 8), int16], Tensor[(880), int16]) {
  %610 = fn (%var_3126: Tensor[(880), int16]) -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(11, 10, 8), int16], Tensor[(880), int16]) {
    %600 = @func_2968() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %601 = @func_1614() /* ty=(Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float64]) */;
    %602 = @func_968() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
    %603 = cast(%var_3126, dtype="int16") /* ty=Tensor[(880), int16] */;
    %604 = reshape(%603, newshape=[11, 10, 8]) /* ty=Tensor[(11, 10, 8), int16] */;
    %605 = @func_1770(%604) /* ty=(Tensor[(11, 10, 8), int16], Tensor[(10, 9, 3), float32]) */;
    %606 = %600.0;
    %607 = %601.0;
    %608 = %602.0;
    %609 = %605.0;
    (%606, %607, %608, %609, %var_3126)
  };
  %610(%var_3141) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(11, 10, 8), int16], Tensor[(880), int16]) */
}

def @func_1453(%var_1451: Tensor[(640), uint32]) -> (Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float32], Tensor[(10, 16, 4), uint32], Tensor[(640), uint32], Tensor[(4, 15, 4), bool]) {
  @func_1450(%var_1451) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float32], Tensor[(10, 16, 4), uint32], Tensor[(640), uint32], Tensor[(4, 15, 4), bool]) */
}

def @func_4723() -> Tensor[(10, 9, 3), int8] {
  %617 = fn () -> Tensor[(10, 9, 3), int8] {
    %611 = @func_3770() /* ty=(Tensor[(10, 9, 3), bool],) */;
    %612 = %611.0;
    %613 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 9, 3), bool] */, dtype="int8") /* ty=Tensor[(10, 9, 3), int8] */;
    %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
    %615 = cast(%612, dtype="int8") /* ty=Tensor[(10, 9, 3), int8] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    bitwise_or(%615, %616) /* ty=Tensor[(10, 9, 3), int8] */
  };
  %617() /* ty=Tensor[(10, 9, 3), int8] */
}

def @func_409(%var_407: Tensor[(4, 15, 4), int8], %var_408: Tensor[(4, 15, 4), int8]) -> (Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float32]) {
  @func_405(%var_407, %var_408) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float32]) */
}

def @func_3542(%var_3537: float64, %var_3538: Tensor[(8, 5, 5), float64]) -> Tensor[(8, 5, 5), float64] {
  %618 = cast(%var_3537, dtype="float64") /* ty=float64 */;
  %619 = cast(%var_3538, dtype="float64") /* ty=Tensor[(8, 5, 5), float64] */;
  divide(%618, %619) /* ty=Tensor[(8, 5, 5), float64] */
}

def @func_3788() -> Tensor[(10, 9, 3), float32] {
  %620 = @func_680() /* ty=(Tensor[(10, 9, 3), float32],) */;
  %620.0
}

def @func_3233(%var_3232: Tensor[(126), uint32]) -> (Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), bool], Tensor[(640), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), int64]) {
  %637 = fn (%var_3216: Tensor[(126), uint32]) -> (Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), bool], Tensor[(640), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), int64]) {
    %621 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
    %622 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 270), float32] */, dtype="float32") /* ty=Tensor[(1, 270), float32] */;
    %623 = reshape(%622, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), float32] */;
    %624 = @func_1292(%623) /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), bool]) */;
    %625 = cast(%var_3216, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %626 = reshape(%625, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %627 = @func_3178(%626) /* ty=(Tensor[(10, 9, 3), bool], Tensor[(42), uint32], Tensor[(3, 3, 14), bool], Tensor[(4, 15, 4), int8], Tensor[(10, 16, 4), uint32], Tensor[(640), uint32]) */;
    %628 = @func_429() /* ty=Tensor[(10, 9, 3), float32] */;
    %629 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 270), float32] */, dtype="int64") /* ty=Tensor[(1, 270), int64] */;
    %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
    %631 = cast(%628, dtype="int64") /* ty=Tensor[(10, 9, 3), int64] */;
    %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %633 = %621.0;
    %634 = %624.0;
    %635 = %627.5;
    %636 = add(%631, %632) /* ty=Tensor[(10, 9, 3), int64] */;
    (%633, %634, %635, %var_3216, %636)
  };
  %637(%var_3232) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), bool], Tensor[(640), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), int64]) */
}

def @func_533(%var_531: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32]) {
  @func_530(%var_531) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32]) */
}

def @func_3564() -> (Tensor[(10, 9, 3), bool],) {
  @func_3562() /* ty=(Tensor[(10, 9, 3), bool],) */
}

def @func_3741() -> (Tensor[(14, 5, 16), float64],) {
  %638 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 5, 16), uint32] */, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
  %639 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(14, 5, 16), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 5, 16), uint32] */, dtype="bool") /* ty=Tensor[(14, 5, 16), bool] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %642 = not_equal(%640, %641) /* ty=Tensor[(14, 5, 16), bool] */;
  %643 = cast(%642, dtype="float64") /* ty=Tensor[(14, 5, 16), float64] */;
  %644 = log(%643) /* ty=Tensor[(14, 5, 16), float64] */;
  (%644,)
}

def @func_1615() -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float64]) {
  %654 = fn () -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float64]) {
    %645 = @func_680() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %646 = %645.0;
    %647 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 9, 3), float32] */, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
    %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
    %649 = cast(%646, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
    %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %651 = cast(%646, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
    %652 = floor_divide(%649, %650) /* ty=Tensor[(10, 9, 3), float64] */;
    %653 = sinh(%651) /* ty=Tensor[(10, 9, 3), float64] */;
    (%652, %653)
  };
  %654() /* ty=(Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float64]) */
}

def @func_5502() -> Tensor[(10, 9, 3), float32] {
  %656 = fn () -> Tensor[(10, 9, 3), float32] {
    %655 = @func_4689() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %655.0
  };
  %656() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_405(%var_398: Tensor[(4, 15, 4), int8], %var_399: Tensor[(4, 15, 4), int8]) -> (Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float32]) {
  %657 = cast(%var_399, dtype="int8") /* ty=Tensor[(4, 15, 4), int8] */;
  %658 = shape_of(%var_398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%var_398, dtype="int8") /* ty=Tensor[(4, 15, 4), int8] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %661 = subtract(%659, %660) /* ty=Tensor[(4, 15, 4), int8] */;
  %662 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
  (%661, %662)
}

def @func_2652(%var_2650: Tensor[(30, 9), float64]) -> (Tensor[(126), float32], Tensor[(10, 9, 3), int32], Tensor[(30, 9), float32]) {
  @func_2649(%var_2650) /* ty=(Tensor[(126), float32], Tensor[(10, 9, 3), int32], Tensor[(30, 9), float32]) */
}

def @func_610() -> Tensor[(10, 9, 3), float32] {
  %663 = fn () -> Tensor[(10, 9, 3), float32] {
    @func_373() /* ty=Tensor[(10, 9, 3), float32] */
  };
  %663() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_6046() -> (Tensor[(4, 15, 4), float64],) {
  @func_6044() /* ty=(Tensor[(4, 15, 4), float64],) */
}

def @func_3820(%var_3818: Tensor[(10, 9, 3), float32]) -> (Tensor[(10, 9, 3), uint32], Tensor[(10, 9, 3), float32]) {
  @func_3817(%var_3818) /* ty=(Tensor[(10, 9, 3), uint32], Tensor[(10, 9, 3), float32]) */
}

def @func_6298() -> (Tensor[(10, 9, 3), float32], Tensor[(6, 180), bool], Tensor[(10, 9, 3), float32], Tensor[(9), float64], Tensor[(15, 8, 9), float64]) {
  %664 = @func_2589() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(21, 6), uint32]) */;
  %665 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 180), float64] */, dtype="float64") /* ty=Tensor[(6, 180), float64] */;
  %666 = reshape(%665, newshape=[15, 8, 9]) /* ty=Tensor[(15, 8, 9), float64] */;
  %667 = @func_2376(%666) /* ty=(Tensor[(15, 8, 9), float64],) */;
  %668 = %667.0;
  %669 = cast(%668, dtype="bool") /* ty=Tensor[(15, 8, 9), bool] */;
  %670 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(6, 180), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %671 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 180), float64] */, dtype="bool") /* ty=Tensor[(6, 180), bool] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %673 = cast(meta[relay.Constant][39] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
  %674 = reshape(%673, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), float64] */;
  %675 = @func_3891(%674) /* ty=(Tensor[(1, 3, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %676 = cast(%668, dtype="float64") /* ty=Tensor[(15, 8, 9), float64] */;
  %677 = %664.1;
  %678 = not_equal(%671, %672) /* ty=Tensor[(6, 180), bool] */;
  %679 = %675.2;
  %680 = log2(%676) /* ty=Tensor[(15, 8, 9), float64] */;
  (%677, %678, %679, meta[relay.Constant][39] /* ty=Tensor[(9), float64] */, %680)
}

def @func_705() -> (Tensor[(10, 9, 3), float32],) {
  @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */
}

def @func_2649(%var_2624: Tensor[(30, 9), float64]) -> (Tensor[(126), float32], Tensor[(10, 9, 3), int32], Tensor[(30, 9), float32]) {
  %681 = @func_2589() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(21, 6), uint32]) */;
  %682 = cast(%var_2624, dtype="float64") /* ty=Tensor[(30, 9), float64] */;
  %683 = reshape(%682, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), float64] */;
  %684 = @func_2179(%683) /* ty=(Tensor[(10, 9, 3), int32],) */;
  %685 = cast(%var_2624, dtype="float32") /* ty=Tensor[(30, 9), float32] */;
  %686 = %681.2;
  %687 = %684.0;
  %688 = sinh(%685) /* ty=Tensor[(30, 9), float32] */;
  (%686, %687, %688)
}

def @func_4823() -> (Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float64]) {
  %689 = @func_1316() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(240), int8]) */;
  %690 = @func_4782() /* ty=Tensor[(10, 9, 3), float32] */;
  %691 = cast(%690, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
  %692 = %689.1;
  %693 = log2(%691) /* ty=Tensor[(10, 9, 3), float64] */;
  (%692, %693)
}

def @func_7714() -> (Tensor[(10, 9, 3), float64],) {
  %696 = fn () -> (Tensor[(10, 9, 3), float64],) {
    %694 = @func_4823() /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float64]) */;
    %695 = %694.1;
    (%695,)
  };
  %696() /* ty=(Tensor[(10, 9, 3), float64],) */
}

def @func_1208() -> Tensor[(10, 9, 3), float32] {
  %697 = fn () -> Tensor[(10, 9, 3), float32] {
    @func_882() /* ty=Tensor[(10, 9, 3), float32] */
  };
  %697() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_6519() -> (Tensor[(10, 9, 3), float32],) {
  %699 = fn () -> (Tensor[(10, 9, 3), float32],) {
    %698 = @func_4162() /* ty=Tensor[(10, 9, 3), float32] */;
    (%698,)
  };
  %699() /* ty=(Tensor[(10, 9, 3), float32],) */
}

def @func_7058() -> Tensor[(10, 9, 3), float32] {
  @func_7056() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_3724(%var_3722: Tensor[(63, 2), uint32], %var_3723: Tensor[(1512), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(126, 12), bool], Tensor[(63, 2), uint32], Tensor[(1512), uint32]) {
  %707 = fn (%var_3706: Tensor[(63, 2), uint32], %var_3707: Tensor[(1512), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(126, 12), bool], Tensor[(63, 2), uint32], Tensor[(1512), uint32]) {
    %700 = cast(%var_3706, dtype="uint32") /* ty=Tensor[(63, 2), uint32] */;
    %701 = cast(%var_3707, dtype="uint32") /* ty=Tensor[(1512), uint32] */;
    %702 = reshape(%700, newshape=[126, 1]) /* ty=Tensor[(126, 1), uint32] */;
    %703 = reshape(%701, newshape=[126, 12]) /* ty=Tensor[(126, 12), uint32] */;
    %704 = @func_2260(%702, %703) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(126, 12), bool]) */;
    %705 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
    %706 = %704.2;
    (%705, %706, %var_3706, %var_3707)
  };
  %707(%var_3722, %var_3723) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(126, 12), bool], Tensor[(63, 2), uint32], Tensor[(1512), uint32]) */
}

def @func_2104() -> Tensor[(10, 9, 3), float32] {
  @func_2102() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_1383(%var_1376: Tensor[(10, 16, 4), uint32]) -> (Tensor[(10, 16, 4), uint32],) {
  %708 = cast(%var_1376, dtype="uint32") /* ty=Tensor[(10, 16, 4), uint32] */;
  %709 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(10, 16, 4), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 16, 4), uint32] */, dtype="uint32") /* ty=Tensor[(10, 16, 4), uint32] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %712 = maximum(%710, %711) /* ty=Tensor[(10, 16, 4), uint32] */;
  (%712,)
}

def @func_4430() -> (Tensor[(10, 9, 3), bool], Tensor[(4, 15, 4), float32], Tensor[(10, 9, 3), int8], Tensor[(10, 9, 3), float64]) {
  %713 = @func_3613() /* ty=(Tensor[(10, 9, 3), bool],) */;
  %714 = @func_3027() /* ty=Tensor[(4, 15, 4), float64] */;
  %715 = cast(%714, dtype="float64") /* ty=Tensor[(4, 15, 4), float64] */;
  %716 = sin(%715) /* ty=Tensor[(4, 15, 4), float64] */;
  %717 = cast(%714, dtype="float32") /* ty=Tensor[(4, 15, 4), float32] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="float32") /* ty=Tensor[(4, 15, 4), float32] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %721 = @func_4130() /* ty=(Tensor[(4, 15, 4), float64], Tensor[(10, 9, 3), int8]) */;
  %722 = %713.0;
  %723 = add(%719, %720) /* ty=Tensor[(4, 15, 4), float32] */;
  %724 = %721.1;
  %725 = @func_626() /* ty=Tensor[(10, 9, 3), float64] */;
  (%722, %723, %724, %725)
}

def @func_4372(%var_4371: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(126), uint32]) {
  %732 = fn (%var_4361: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(126), uint32]) {
    %726 = @func_680() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %727 = cast(%var_4361, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %728 = reshape(%727, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %729 = @func_1148(%728) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(10, 9, 3), float64]) */;
    %730 = %726.0;
    %731 = %729.0;
    (%730, %731, %var_4361)
  };
  %732(%var_4371) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(126), uint32]) */
}

def @func_4660() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), int64], Tensor[(126), uint32]) {
  %733 = cast(meta[relay.Constant][41] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %734 = reshape(%733, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %735 = @func_3231(%734) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), bool], Tensor[(640), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), int64]) */;
  %736 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
  %737 = %735.4;
  (%736, %737, meta[relay.Constant][41] /* ty=Tensor[(126), uint32] */)
}

def @func_7245(%var_7243: Tensor[(42, 1), uint32], %var_7244: Tensor[(1, 640), uint32]) -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 16, 4), uint32], Tensor[(1, 640), uint32], Tensor[(42, 126), uint64]) {
  %761 = fn (%var_7214: Tensor[(42, 1), uint32], %var_7228: Tensor[(1, 640), uint32]) -> (Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 16, 4), uint32], Tensor[(1, 640), uint32], Tensor[(42, 126), uint64]) {
    %738 = cast(%var_7214, dtype="uint32") /* ty=Tensor[(42, 1), uint32] */;
    %739 = cast(meta[relay.Constant][42] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %740 = reshape(%738, newshape=[1, 3, 14]) /* ty=Tensor[(1, 3, 14), uint32] */;
    %741 = reshape(%739, newshape=[3, 3, 14]) /* ty=Tensor[(3, 3, 14), uint32] */;
    %742 = @func_471(%740, %741) /* ty=(Tensor[(3, 3, 14), bool], Tensor[(10, 9, 3), float32]) */;
    %743 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %744 = cast(%var_7228, dtype="uint32") /* ty=Tensor[(1, 640), uint32] */;
    %745 = reshape(%744, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), uint32] */;
    %746 = @func_1383(%745) /* ty=(Tensor[(10, 16, 4), uint32],) */;
    %747 = cast(%var_7214, dtype="bool") /* ty=Tensor[(42, 1), bool] */;
    %748 = cast(meta[relay.Constant][42] /* ty=Tensor[(126), uint32] */, dtype="bool") /* ty=Tensor[(126), bool] */;
    %749 = greater(%747, %748) /* ty=Tensor[(42, 126), bool] */;
    %750 = cast(%749, dtype="float64") /* ty=Tensor[(42, 126), float64] */;
    %751 = log2(%750) /* ty=Tensor[(42, 126), float64] */;
    %752 = cast(%749, dtype="uint64") /* ty=Tensor[(42, 126), uint64] */;
    %753 = shape_of(%751, dtype="int32") /* ty=Tensor[(2), int32] */;
    %754 = cast(%751, dtype="uint64") /* ty=Tensor[(42, 126), uint64] */;
    %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %756 = @func_553() /* ty=Tensor[(10, 9, 3), float64] */;
    %757 = %742.1;
    %758 = %743.0;
    %759 = %746.0;
    %760 = bitwise_or(%754, %755) /* ty=Tensor[(42, 126), uint64] */;
    (%756, %757, %758, %759, %var_7228, %760)
  };
  %761(%var_7243, %var_7244) /* ty=(Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 16, 4), uint32], Tensor[(1, 640), uint32], Tensor[(42, 126), uint64]) */
}

def @func_5070() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %762 = @func_2893() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */;
  %763 = %762.2;
  %764 = @func_429() /* ty=Tensor[(10, 9, 3), float32] */;
  (%763, %764)
}

def @func_1371() -> (Tensor[(4, 15, 4), int8],) {
  %767 = fn () -> (Tensor[(4, 15, 4), int8],) {
    %765 = @func_1316() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(240), int8]) */;
    %766 = %765.1;
    (%766,)
  };
  %767() /* ty=(Tensor[(4, 15, 4), int8],) */
}

def @func_736() -> Tensor[(10, 9, 3), float64] {
  @func_626() /* ty=Tensor[(10, 9, 3), float64] */
}

def @func_7470() -> Tensor[(10, 9, 3), int8] {
  @func_7468() /* ty=Tensor[(10, 9, 3), int8] */
}

def @func_6250() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %770 = fn () -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
    %768 = @func_882() /* ty=Tensor[(10, 9, 3), float32] */;
    %769 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
    (%768, %769)
  };
  %770() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */
}

def @func_7426() -> (Tensor[(10, 9, 3), float64], Tensor[(4, 15, 4), int8]) {
  @func_7424() /* ty=(Tensor[(10, 9, 3), float64], Tensor[(4, 15, 4), int8]) */
}

def @func_1174() -> (Tensor[(10, 9, 3), float32],) {
  %772 = fn () -> (Tensor[(10, 9, 3), float32],) {
    %771 = @func_882() /* ty=Tensor[(10, 9, 3), float32] */;
    (%771,)
  };
  %772() /* ty=(Tensor[(10, 9, 3), float32],) */
}

def @func_7532() -> (Tensor[(4, 15, 4), float64], Tensor[(5, 9, 7), float64], Tensor[(480), float64], Tensor[(10, 9, 3), int32], Tensor[(270, 1), float64]) {
  %783 = fn () -> (Tensor[(4, 15, 4), float64], Tensor[(5, 9, 7), float64], Tensor[(480), float64], Tensor[(10, 9, 3), int32], Tensor[(270, 1), float64]) {
    %773 = @func_5109() /* ty=(Tensor[(4, 15, 4), float64],) */;
    %774 = cast(meta[relay.Constant][43] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %775 = reshape(%774, newshape=[2, 15, 16]) /* ty=Tensor[(2, 15, 16), float64] */;
    %776 = @func_3440(%775) /* ty=(Tensor[(2, 15, 16), bool], Tensor[(5, 9, 7), float64], Tensor[(315), float64]) */;
    %777 = cast(meta[relay.Constant][44] /* ty=Tensor[(270, 1), float64] */, dtype="float64") /* ty=Tensor[(270, 1), float64] */;
    %778 = reshape(%777, newshape=[10, 9, 3]) /* ty=Tensor[(10, 9, 3), float64] */;
    %779 = @func_2179(%778) /* ty=(Tensor[(10, 9, 3), int32],) */;
    %780 = %773.0;
    %781 = %776.1;
    %782 = %779.0;
    (%780, %781, meta[relay.Constant][43] /* ty=Tensor[(480), float64] */, %782, meta[relay.Constant][44] /* ty=Tensor[(270, 1), float64] */)
  };
  %783() /* ty=(Tensor[(4, 15, 4), float64], Tensor[(5, 9, 7), float64], Tensor[(480), float64], Tensor[(10, 9, 3), int32], Tensor[(270, 1), float64]) */
}

def @func_3770() -> (Tensor[(10, 9, 3), bool],) {
  %784 = @func_1228() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
  %785 = %784.1;
  (%785,)
}

def @func_5486() -> (Tensor[(10, 9, 3), float64],) {
  @func_5484() /* ty=(Tensor[(10, 9, 3), float64],) */
}

def @func_2920(%var_2919: Tensor[(640), uint32]) -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float64], Tensor[(640), uint32]) {
  %797 = fn (%var_2916: Tensor[(640), uint32]) -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float64], Tensor[(640), uint32]) {
    %786 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %787 = %786.0;
    %788 = cast(meta[relay.Constant][45] /* ty=Tensor[(10, 9, 3), float32] */, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
    %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
    %790 = cast(%787, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
    %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %792 = cast(%var_2916, dtype="uint32") /* ty=Tensor[(640), uint32] */;
    %793 = reshape(%792, newshape=[640]) /* ty=Tensor[(640), uint32] */;
    %794 = @func_2030(%793) /* ty=(Tensor[(10, 9, 3), float64], Tensor[(640), bool], Tensor[(640), int32]) */;
    %795 = less_equal(%790, %791) /* ty=Tensor[(10, 9, 3), bool] */;
    %796 = %794.0;
    (%795, %796, %var_2916)
  };
  %797(%var_2919) /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float64], Tensor[(640), uint32]) */
}

def @func_2894() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %803 = fn () -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
    %798 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %799 = @func_1173() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %800 = @func_2102() /* ty=Tensor[(10, 9, 3), float32] */;
    %801 = %798.0;
    %802 = %799.0;
    (%800, %801, %802)
  };
  %803() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */
}

def @func_474(%var_472: Tensor[(1, 3, 14), uint32], %var_473: Tensor[(3, 3, 14), uint32]) -> (Tensor[(3, 3, 14), bool], Tensor[(10, 9, 3), float32]) {
  %808 = fn (%var_452: Tensor[(1, 3, 14), uint32], %var_453: Tensor[(3, 3, 14), uint32]) -> (Tensor[(3, 3, 14), bool], Tensor[(10, 9, 3), float32]) {
    %804 = cast(%var_452, dtype="bool") /* ty=Tensor[(1, 3, 14), bool] */;
    %805 = cast(%var_453, dtype="bool") /* ty=Tensor[(3, 3, 14), bool] */;
    %806 = greater_equal(%804, %805) /* ty=Tensor[(3, 3, 14), bool] */;
    %807 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
    (%806, %807)
  };
  %808(%var_472, %var_473) /* ty=(Tensor[(3, 3, 14), bool], Tensor[(10, 9, 3), float32]) */
}

def @func_1316() -> (Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(240), int8]) {
  %809 = @func_1099() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
  %810 = cast(meta[relay.Constant][46] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %811 = cast(meta[relay.Constant][46] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %812 = reshape(%810, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), int8] */;
  %813 = reshape(%811, newshape=[4, 15, 4]) /* ty=Tensor[(4, 15, 4), int8] */;
  %814 = @func_405(%812, %813) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), float32]) */;
  %815 = %809.1;
  %816 = %814.0;
  (%815, %816, meta[relay.Constant][46] /* ty=Tensor[(240), int8] */)
}

def @func_7496(%var_7494: Tensor[(2, 12, 11), float64]) -> (Tensor[(2, 12, 11), uint16], Tensor[(6, 9, 16), float32], Tensor[(12, 72), float32]) {
  @func_7493(%var_7494) /* ty=(Tensor[(2, 12, 11), uint16], Tensor[(6, 9, 16), float32], Tensor[(12, 72), float32]) */
}

def @func_4729() -> Tensor[(126), uint32] {
  @func_4727() /* ty=Tensor[(126), uint32] */
}

def @func_3027() -> Tensor[(4, 15, 4), float64] {
  %817 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
  %818 = %817.0;
  %819 = @func_1316() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(240), int8]) */;
  %820 = %819.2;
  %821 = cast(%820, dtype="float64") /* ty=Tensor[(240), float64] */;
  %822 = shape_of(%818, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%818, dtype="float64") /* ty=Tensor[(4, 15, 4), float64] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%823, %824) /* ty=Tensor[(4, 15, 4), float64] */
}

def @func_3743() -> (Tensor[(14, 5, 16), float64],) {
  @func_3741() /* ty=(Tensor[(14, 5, 16), float64],) */
}

def @func_6103() -> (Tensor[(14, 1, 10), uint32],) {
  @func_6101() /* ty=(Tensor[(14, 1, 10), uint32],) */
}

def @func_7402() -> (Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) {
  @func_7400() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */
}

def @func_6929(%var_6928: Tensor[(10, 15, 2), float32]) -> Tensor[(10, 15, 2), float32] {
  %826 = fn (%var_6922: Tensor[(10, 15, 2), float32]) -> Tensor[(10, 15, 2), float32] {
    %825 = cast(%var_6922, dtype="float32") /* ty=Tensor[(10, 15, 2), float32] */;
    rsqrt(%825) /* ty=Tensor[(10, 15, 2), float32] */
  };
  %826(%var_6928) /* ty=Tensor[(10, 15, 2), float32] */
}

def @func_4275(%var_4273: Tensor[(126), uint32], %var_4274: Tensor[(800), float32]) -> (Tensor[(14, 5, 16), float64], Tensor[(4, 15, 4), int8], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(800), float32], Tensor[(10, 64), uint32], Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8]) {
  %846 = fn (%var_4240: Tensor[(126), uint32], %var_4247: Tensor[(800), float32]) -> (Tensor[(14, 5, 16), float64], Tensor[(4, 15, 4), int8], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(800), float32], Tensor[(10, 64), uint32], Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8]) {
    %827 = @func_3741() /* ty=(Tensor[(14, 5, 16), float64],) */;
    %828 = cast(%var_4240, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %829 = reshape(%828, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %830 = @func_3231(%829) /* ty=(Tensor[(4, 15, 4), int8], Tensor[(10, 9, 3), bool], Tensor[(640), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), int64]) */;
    %831 = cast(%var_4247, dtype="float32") /* ty=Tensor[(800), float32] */;
    %832 = cast(meta[relay.Constant][47] /* ty=Tensor[(10, 64), uint32] */, dtype="uint32") /* ty=Tensor[(10, 64), uint32] */;
    %833 = reshape(%831, newshape=[800]) /* ty=Tensor[(800), float32] */;
    %834 = reshape(%832, newshape=[640]) /* ty=Tensor[(640), uint32] */;
    %835 = @func_4052(%833, %834) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(864), float32], Tensor[(800), float32], Tensor[(216, 4), float32], Tensor[(640), uint32], Tensor[(5, 16, 10), float32]) */;
    %836 = cast(%var_4247, dtype="float32") /* ty=Tensor[(800), float32] */;
    %837 = cast(meta[relay.Constant][47] /* ty=Tensor[(10, 64), uint32] */, dtype="uint32") /* ty=Tensor[(10, 64), uint32] */;
    %838 = reshape(%836, newshape=[800]) /* ty=Tensor[(800), float32] */;
    %839 = reshape(%837, newshape=[640]) /* ty=Tensor[(640), uint32] */;
    %840 = @func_4052(%838, %839) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(864), float32], Tensor[(800), float32], Tensor[(216, 4), float32], Tensor[(640), uint32], Tensor[(5, 16, 10), float32]) */;
    %841 = %827.0;
    %842 = %830.0;
    %843 = %835.4;
    %844 = @func_429() /* ty=Tensor[(10, 9, 3), float32] */;
    %845 = %840.1;
    (%841, %842, %var_4240, %843, %var_4247, meta[relay.Constant][47] /* ty=Tensor[(10, 64), uint32] */, %844, %845)
  };
  %846(%var_4273, %var_4274) /* ty=(Tensor[(14, 5, 16), float64], Tensor[(4, 15, 4), int8], Tensor[(126), uint32], Tensor[(10, 9, 3), float32], Tensor[(800), float32], Tensor[(10, 64), uint32], Tensor[(10, 9, 3), float32], Tensor[(4, 15, 4), int8]) */
}

def @func_6901() -> (Tensor[(10, 16, 4), uint32],) {
  %847 = @func_3342() /* ty=Tensor[(10, 16, 4), uint32] */;
  (%847,)
}

def @func_2400() -> (Tensor[(10, 9, 3), bool],) {
  %848 = @func_1099() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32]) */;
  %849 = %848.0;
  (%849,)
}

def @func_1386(%var_1384: Tensor[(10, 16, 4), uint32]) -> (Tensor[(10, 16, 4), uint32],) {
  @func_1383(%var_1384) /* ty=(Tensor[(10, 16, 4), uint32],) */
}

def @func_883() -> Tensor[(10, 9, 3), float32] {
  %850 = fn () -> Tensor[(10, 9, 3), float32] {
    @func_609() /* ty=Tensor[(10, 9, 3), float32] */
  };
  %850() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_2260(%var_2248: Tensor[(126, 1), uint32], %var_2256: Tensor[(126, 12), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(126, 12), bool]) {
  %851 = cast(%var_2248, dtype="uint32") /* ty=Tensor[(126, 1), uint32] */;
  %852 = reshape(%851, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %853 = @func_530(%852) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32]) */;
  %854 = cast(%var_2248, dtype="bool") /* ty=Tensor[(126, 1), bool] */;
  %855 = cast(%var_2256, dtype="bool") /* ty=Tensor[(126, 12), bool] */;
  %856 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
  %857 = %853.0;
  %858 = less_equal(%854, %855) /* ty=Tensor[(126, 12), bool] */;
  (%856, %857, %858)
}

def @func_824(%var_823: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64], Tensor[(126), uint32], Tensor[(126), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %877 = fn (%var_762: Tensor[(126), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64], Tensor[(126), uint32], Tensor[(126), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
    %859 = cast(%var_762, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %860 = reshape(%859, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %861 = @func_530(%860) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(42), uint32], Tensor[(126), uint32], Tensor[(10, 9, 3), float32]) */;
    %862 = cast(meta[relay.Constant][48] /* ty=Tensor[(126), uint32] */, dtype="bool") /* ty=Tensor[(126), bool] */;
    %863 = shape_of(%var_762, dtype="int32") /* ty=Tensor[(1), int32] */;
    %864 = cast(%var_762, dtype="bool") /* ty=Tensor[(126), bool] */;
    %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?), bool] */;
    %866 = greater_equal(%864, %865) /* ty=Tensor[(126), bool] */;
    %867 = cast(%var_762, dtype="float32") /* ty=Tensor[(126), float32] */;
    %868 = shape_of(%866, dtype="int32") /* ty=Tensor[(1), int32] */;
    %869 = cast(%866, dtype="float32") /* ty=Tensor[(126), float32] */;
    %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?), float32] */;
    %871 = @func_429() /* ty=Tensor[(10, 9, 3), float32] */;
    %872 = @func_553() /* ty=Tensor[(10, 9, 3), float64] */;
    %873 = %861.2;
    %874 = power(%869, %870) /* ty=Tensor[(126), float32] */;
    %875 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
    %876 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
    (%871, %872, %873, %874, %875, %876)
  };
  %877(%var_823) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64], Tensor[(126), uint32], Tensor[(126), float32], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */
}

def @func_627() -> Tensor[(10, 9, 3), float64] {
  %880 = fn () -> Tensor[(10, 9, 3), float64] {
    %878 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
    %879 = cast(%878, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
    log(%879) /* ty=Tensor[(10, 9, 3), float64] */
  };
  %880() /* ty=Tensor[(10, 9, 3), float64] */
}

def @func_6018() -> (Tensor[(14, 5, 16), float64], Tensor[(10, 9, 3), bool], Tensor[(126), float32], Tensor[(4, 15, 4), int8], Tensor[(240, 1), int8]) {
  @func_6016() /* ty=(Tensor[(14, 5, 16), float64], Tensor[(10, 9, 3), bool], Tensor[(126), float32], Tensor[(4, 15, 4), int8], Tensor[(240, 1), int8]) */
}

def @func_2179(%var_2136: Tensor[(10, 9, 3), float64]) -> (Tensor[(10, 9, 3), int32],) {
  %881 = @func_736() /* ty=Tensor[(10, 9, 3), float64] */;
  %882 = cast(%881, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
  %883 = acosh(%882) /* ty=Tensor[(10, 9, 3), float32] */;
  %884 = cast(%var_2136, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %885 = shape_of(%881, dtype="int32") /* ty=Tensor[(3), int32] */;
  %886 = cast(%881, dtype="bool") /* ty=Tensor[(10, 9, 3), bool] */;
  %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %888 = less(%886, %887) /* ty=Tensor[(10, 9, 3), bool] */;
  %889 = cast(%888, dtype="int32") /* ty=Tensor[(10, 9, 3), int32] */;
  %890 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(%883, dtype="int32") /* ty=Tensor[(10, 9, 3), int32] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %893 = bitwise_and(%891, %892) /* ty=Tensor[(10, 9, 3), int32] */;
  (%893,)
}

def @func_2482(%var_2481: Tensor[(5, 9, 7), float64]) -> (Tensor[(5, 9, 7), float64],) {
  %896 = fn (%var_2473: Tensor[(5, 9, 7), float64]) -> (Tensor[(5, 9, 7), float64],) {
    %894 = cast(%var_2473, dtype="float64") /* ty=Tensor[(5, 9, 7), float64] */;
    %895 = cos(%894) /* ty=Tensor[(5, 9, 7), float64] */;
    (%895,)
  };
  %896(%var_2481) /* ty=(Tensor[(5, 9, 7), float64],) */
}

def @func_5886(%var_5876: Tensor[(2, 12, 3), float64], %var_5877: Tensor[(2, 12, 3), float64]) -> (Tensor[(2, 12, 3), float64], Tensor[(2, 12, 3), float32]) {
  %897 = cast(%var_5877, dtype="float64") /* ty=Tensor[(2, 12, 3), float64] */;
  %898 = shape_of(%var_5876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %899 = cast(%var_5876, dtype="float64") /* ty=Tensor[(2, 12, 3), float64] */;
  %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %901 = cast(%var_5877, dtype="float32") /* ty=Tensor[(2, 12, 3), float32] */;
  %902 = divide(%899, %900) /* ty=Tensor[(2, 12, 3), float64] */;
  %903 = sin(%901) /* ty=Tensor[(2, 12, 3), float32] */;
  (%902, %903)
}

def @func_1655() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %907 = fn () -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
    %904 = @func_703() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %905 = @func_609() /* ty=Tensor[(10, 9, 3), float32] */;
    %906 = %904.0;
    (%905, %906)
  };
  %907() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */
}

def @func_3344() -> Tensor[(10, 16, 4), uint32] {
  @func_3342() /* ty=Tensor[(10, 16, 4), uint32] */
}

def @func_5484() -> (Tensor[(10, 9, 3), float64],) {
  %908 = @func_553() /* ty=Tensor[(10, 9, 3), float64] */;
  (%908,)
}

def @func_5919() -> (Tensor[(21, 6), uint32], Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32]) {
  %914 = fn () -> (Tensor[(21, 6), uint32], Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32]) {
    %909 = @func_2589() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(126), float32], Tensor[(21, 6), uint32]) */;
    %910 = @func_2968() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %911 = %909.3;
    %912 = @func_553() /* ty=Tensor[(10, 9, 3), float64] */;
    %913 = %910.0;
    (%911, %912, %913)
  };
  %914() /* ty=(Tensor[(21, 6), uint32], Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32]) */
}

def @func_3614() -> (Tensor[(10, 9, 3), bool],) {
  %917 = fn () -> (Tensor[(10, 9, 3), bool],) {
    %915 = @func_1044() /* ty=(Tensor[(10, 9, 3), bool], Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float64]) */;
    %916 = %915.0;
    (%916,)
  };
  %917() /* ty=(Tensor[(10, 9, 3), bool],) */
}

def @func_6903() -> (Tensor[(10, 16, 4), uint32],) {
  @func_6901() /* ty=(Tensor[(10, 16, 4), uint32],) */
}

def @func_7289() -> Tensor[(10, 9, 3), float32] {
  %919 = fn () -> Tensor[(10, 9, 3), float32] {
    %918 = @func_5557() /* ty=(Tensor[(10, 9, 3), float32],) */;
    %918.0
  };
  %919() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_3790() -> Tensor[(10, 9, 3), float32] {
  @func_3788() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_6081() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
  %923 = fn () -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) {
    %920 = @func_5433() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), bool]) */;
    %921 = @func_1207() /* ty=Tensor[(10, 9, 3), float32] */;
    %922 = %920.0;
    (%921, %922)
  };
  %923() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32]) */
}

def @func_430() -> Tensor[(10, 9, 3), float32] {
  %926 = fn () -> Tensor[(10, 9, 3), float32] {
    %924 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
    %925 = cast(%924, dtype="float32") /* ty=Tensor[(10, 9, 3), float32] */;
    sigmoid(%925) /* ty=Tensor[(10, 9, 3), float32] */
  };
  %926() /* ty=Tensor[(10, 9, 3), float32] */
}

def @func_2264(%var_2262: Tensor[(126, 1), uint32], %var_2263: Tensor[(126, 12), uint32]) -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(126, 12), bool]) {
  @func_2260(%var_2262, %var_2263) /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(126, 12), bool]) */
}

def @func_7424() -> (Tensor[(10, 9, 3), float64], Tensor[(4, 15, 4), int8]) {
  %927 = @func_6624() /* ty=(Tensor[(10, 9, 3), float64], Tensor[(10, 9, 3), float32]) */;
  %928 = @func_1370() /* ty=(Tensor[(4, 15, 4), int8],) */;
  %929 = %927.0;
  %930 = %928.0;
  (%929, %930)
}

def @func_5756() -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(30, 9), float32]) {
  %937 = fn () -> (Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(30, 9), float32]) {
    %931 = @func_4162() /* ty=Tensor[(10, 9, 3), float32] */;
    %932 = cast(%931, dtype="float64") /* ty=Tensor[(10, 9, 3), float64] */;
    %933 = reshape(%932, newshape=[30, 9]) /* ty=Tensor[(30, 9), float64] */;
    %934 = @func_2649(%933) /* ty=(Tensor[(126), float32], Tensor[(10, 9, 3), int32], Tensor[(30, 9), float32]) */;
    %935 = @func_373() /* ty=Tensor[(10, 9, 3), float32] */;
    %936 = %934.2;
    (%935, %931, %936)
  };
  %937() /* ty=(Tensor[(10, 9, 3), float32], Tensor[(10, 9, 3), float32], Tensor[(30, 9), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen95/build/output.py", line 2595, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:49:19] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

