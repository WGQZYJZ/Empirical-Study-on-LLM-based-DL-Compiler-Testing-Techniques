==========mod==========
#[version = "0.0.5"]
def @func_16968() -> Tensor[(15, 2, 1), float32] {
  %0 = @func_16039() /* ty=(Tensor[(15, 2, 1), float32],) */;
  %0.0
}

def @func_7327() -> Tensor[(9, 11, 8), int16] {
  %1 = @func_3781() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %1.1
}

def @func_10528(%var_10481: Tensor[(4, 14, 4), int32]) -> (Tensor[(4, 14, 4), bool], Tensor[(9, 11, 8), int16], Tensor[(4, 14, 4), bool]) {
  %2 = cast(%var_10481, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %3 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(4, 14, 4), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 14, 4), int32] */, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %6 = @func_8602() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 14, 4), int32] */, dtype="float32") /* ty=Tensor[(4, 14, 4), float32] */;
  %8 = asin(%7) /* ty=Tensor[(4, 14, 4), float32] */;
  %9 = cast(%var_10481, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%8, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %13 = not_equal(%4, %5) /* ty=Tensor[(4, 14, 4), bool] */;
  %14 = %6.0;
  %15 = greater_equal(%11, %12) /* ty=Tensor[(4, 14, 4), bool] */;
  (%13, %14, %15)
}

def @func_1147() -> Tensor[(9, 11, 8), float64] {
  %16 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  %17 = cast(%16, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
  log(%17) /* ty=Tensor[(9, 11, 8), float64] */
}

def @func_1451(%var_1417: Tensor[(9, 11, 8), bool], %var_1444: Tensor[(756), uint8]) -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8]) {
  %18 = @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %19 = @func_1044() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %20 = %19.0;
  %21 = cast(%var_1417, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%20, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %25 = cast(%20, dtype="float32") /* ty=Tensor[(9, 11, 8), float32] */;
  %26 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %27 = cast(%var_1444, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %28 = cast(%var_1444, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %29 = reshape(%27, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
  %30 = reshape(%28, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
  %31 = %18.0;
  %32 = less(%23, %24) /* ty=Tensor[(9, 11, 8), bool] */;
  %33 = asinh(%25) /* ty=Tensor[(9, 11, 8), float32] */;
  %34 = %26.1;
  %35 = @func_198(%29, %30) /* ty=Tensor[(7, 9, 12), uint8] */;
  (%31, %32, %33, %34, %35, %var_1444)
}

def @func_5225() -> Tensor[(9, 11, 8), int32] {
  %36 = @func_2145() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %36.1
}

def @func_10178() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) {
  %37 = @func_7419() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %38 = @func_8235() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %39 = %37.1;
  %40 = %38.0;
  (%39, %40)
}

def @func_4761() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) {
  %41 = @func_2778() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %42 = @func_4740() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int16], Tensor[(8, 30), float64]) */;
  %43 = %41.0;
  %44 = @func_1147() /* ty=Tensor[(9, 11, 8), float64] */;
  %45 = %42.2;
  (%43, %44, %45)
}

def @func_8552(%var_8527: Tensor[(4, 720), float32], %var_8539: Tensor[(91, 1), uint64], %var_8540: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16], Tensor[(4, 720), float32], Tensor[(240), float32], Tensor[(91, 1), uint64], Tensor[(240), float32]) {
  %46 = @func_7485() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %47 = @func_7259() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %48 = cast(%var_8527, dtype="float32") /* ty=Tensor[(4, 720), float32] */;
  %49 = cast(%var_8527, dtype="float32") /* ty=Tensor[(4, 720), float32] */;
  %50 = reshape(%48, newshape=[16, 12, 15]) /* ty=Tensor[(16, 12, 15), float32] */;
  %51 = reshape(%49, newshape=[16, 12, 15]) /* ty=Tensor[(16, 12, 15), float32] */;
  %52 = @func_3495(%50, %51) /* ty=(Tensor[(16, 12, 15), float32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(10, 16, 6), float64], Tensor[(960), float64]) */;
  %53 = cast(%var_8539, dtype="uint64") /* ty=Tensor[(91, 1), uint64] */;
  %54 = cast(%var_8540, dtype="float32") /* ty=Tensor[(240), float32] */;
  %55 = reshape(%53, newshape=[91]) /* ty=Tensor[(91), uint64] */;
  %56 = reshape(%54, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %57 = @func_2695(%55, %56) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(3, 7, 13), uint8], Tensor[(91), uint64], Tensor[(273), uint64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(240), float32]) */;
  %58 = %46.0;
  %59 = %47.0;
  %60 = %52.2;
  %61 = %57.6;
  (%58, %59, %60, %var_8527, %61, %var_8539, %var_8540)
}

def @func_10985() -> (Tensor[(9, 11, 8), bool],) {
  %62 = @func_5291() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %63 = %62.1;
  (%63,)
}

def @func_12532() -> Tensor[(9, 11, 8), int32] {
  @func_12077() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_6603() -> Tensor[(9, 11, 8), float32] {
  %64 = @func_4761() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
  %64.0
}

def @func_7419() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) {
  %65 = @func_6931() /* ty=(Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), bool]) */;
  %66 = @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %67 = @func_6573() /* ty=Tensor[(9, 11, 8), bool] */;
  %68 = %65.1;
  %69 = %66.0;
  (%67, %68, %69)
}

def @func_9723() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) {
  %70 = @func_7485() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %71 = @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %72 = @func_7288() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %73 = @func_7847() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %74 = %70.0;
  %75 = %71.0;
  %76 = @func_7327() /* ty=Tensor[(9, 11, 8), int16] */;
  %77 = %72.0;
  %78 = %73.0;
  (%74, %75, %76, %77, %78)
}

def @func_4196(%var_4185: Tensor[(8, 30), float32]) -> Tensor[(8, 30), uint16] {
  %79 = @func_3646() /* ty=Tensor[(8, 30), float32] */;
  %80 = cast(%var_4185, dtype="uint16") /* ty=Tensor[(8, 30), uint16] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(2), int32] */;
  %82 = cast(%79, dtype="uint16") /* ty=Tensor[(8, 30), uint16] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  minimum(%82, %83) /* ty=Tensor[(8, 30), uint16] */
}

def @func_13014() -> Tensor[(9, 11, 8), int32] {
  %84 = @func_6714() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %84.0
}

def @func_13530() -> Tensor[(9, 11, 8), float32] {
  @func_6603() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_9013() -> (Tensor[(9, 11, 8), float32],) {
  %85 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %86 = %85.1;
  (%86,)
}

def @func_2145() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) {
  %87 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %88 = @func_1497() /* ty=Tensor[(9, 11, 8), float32] */;
  %89 = %87.0;
  (%88, %89)
}

def @func_4997(%var_4962: Tensor[(2, 9, 1), float64]) -> (Tensor[(2, 9, 1), float64], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int32]) {
  %90 = cast(%var_4962, dtype="float64") /* ty=Tensor[(2, 9, 1), float64] */;
  %91 = @func_2409() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32]) */;
  %92 = @func_3106() /* ty=Tensor[(9, 11, 8), float32] */;
  %93 = cast(%92, dtype="float32") /* ty=Tensor[(9, 11, 8), float32] */;
  %94 = reshape(%93, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), float32] */;
  %95 = @func_3405(%94) /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
  %96 = atan(%90) /* ty=Tensor[(2, 9, 1), float64] */;
  %97 = %91.2;
  %98 = %95.0;
  (%96, %92, %97, %98)
}

def @func_13914() -> (Tensor[(9, 11, 8), float64],) {
  %99 = @func_11987() /* ty=Tensor[(9, 11, 8), float64] */;
  (%99,)
}

def @func_9095() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16]) {
  %100 = @func_5590() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) */;
  %101 = @func_5468() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %102 = @func_7010() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %103 = @func_8574() /* ty=Tensor[(9, 11, 8), int32] */;
  %104 = %100.1;
  %105 = %101.1;
  %106 = %102.0;
  (%103, %104, %105, %106)
}

def @func_14672() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(9, 11, 8), int32]) {
  %107 = cast(meta[relay.Constant][1] /* ty=Tensor[(756), uint8] */, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %108 = reshape(%107, newshape=[756]) /* ty=Tensor[(756), uint8] */;
  %109 = @func_5895(%108) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(9, 11, 8), int16]) */;
  %110 = @func_4451() /* ty=Tensor[(9, 11, 8), float64] */;
  %111 = %109.0;
  %112 = @func_7935() /* ty=Tensor[(9, 11, 8), int32] */;
  (%110, %111, meta[relay.Constant][1] /* ty=Tensor[(756), uint8] */, %112)
}

def @func_16683(%var_16631: Tensor[(3, 252), uint8], %var_16632: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int16], Tensor[(3, 252), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), int32], Tensor[(7, 9, 12), int16]) {
  %113 = cast(%var_16631, dtype="uint8") /* ty=Tensor[(3, 252), uint8] */;
  %114 = cast(%var_16632, dtype="float32") /* ty=Tensor[(240), float32] */;
  %115 = reshape(%113, newshape=[756]) /* ty=Tensor[(756), uint8] */;
  %116 = reshape(%114, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %117 = @func_12872(%115, %116) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32], Tensor[(576), int32]) */;
  %118 = %117.1;
  %119 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 9, 12), uint8] */, dtype="int16") /* ty=Tensor[(7, 9, 12), int16] */;
  %120 = shape_of(%118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%118, dtype="int16") /* ty=Tensor[(7, 9, 12), int16] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %123 = @func_11186() /* ty=Tensor[(9, 11, 8), int16] */;
  %124 = @func_11898() /* ty=Tensor[(9, 11, 8), int32] */;
  %125 = maximum(%121, %122) /* ty=Tensor[(7, 9, 12), int16] */;
  (%123, %var_16631, %var_16632, %124, %125)
}

def @func_10095() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %126 = @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %127 = @func_7935() /* ty=Tensor[(9, 11, 8), int32] */;
  %128 = %126.0;
  %129 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  (%127, %128, %129)
}

def @func_13205() -> (Tensor[(9, 7, 6), bool],) {
  %130 = @func_11633() /* ty=Tensor[(9, 7, 6), bool] */;
  (%130,)
}

def @func_15443() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %131 = @func_12664() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %132 = @func_6195() /* ty=Tensor[(9, 11, 8), bool] */;
  %133 = %131.0;
  (%132, %133)
}

def @func_10291(%var_10286: uint64, %var_10287: Tensor[(13, 3, 14), uint64]) -> Tensor[(13, 3, 14), uint64] {
  %134 = cast(%var_10286, dtype="uint64") /* ty=uint64 */;
  %135 = cast(%var_10287, dtype="uint64") /* ty=Tensor[(13, 3, 14), uint64] */;
  bitwise_and(%134, %135) /* ty=Tensor[(13, 3, 14), uint64] */
}

def @func_2695(%var_2680: Tensor[(91), uint64], %var_2688: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), float64], Tensor[(3, 7, 13), uint8], Tensor[(91), uint64], Tensor[(273), uint64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(240), float32]) {
  %136 = @func_2302() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
  %137 = cast(%var_2680, dtype="uint64") /* ty=Tensor[(91), uint64] */;
  %138 = cast(meta[relay.Constant][3] /* ty=Tensor[(273), uint64] */, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %139 = reshape(%137, newshape=[1, 7, 13]) /* ty=Tensor[(1, 7, 13), uint64] */;
  %140 = reshape(%138, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), uint64] */;
  %141 = @func_1888(%139, %140) /* ty=(Tensor[(3, 7, 13), bool], Tensor[(3, 7, 13), uint8]) */;
  %142 = @func_2145() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %143 = %142.1;
  %144 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  %145 = cast(%144, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
  %146 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%143, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %149 = cast(%var_2688, dtype="float32") /* ty=Tensor[(240), float32] */;
  %150 = reshape(%149, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %151 = @func_1971(%150) /* ty=(Tensor[(8, 30), float32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(8, 30), uint16], Tensor[(7, 9, 12), uint8]) */;
  %152 = %136.0;
  %153 = %141.1;
  %154 = minimum(%147, %148) /* ty=Tensor[(9, 11, 8), float64] */;
  %155 = %151.2;
  (%152, %153, %var_2680, meta[relay.Constant][3] /* ty=Tensor[(273), uint64] */, %154, %155, %var_2688)
}

def @func_9911() -> (Tensor[(9, 11, 8), bool],) {
  %156 = @func_1357() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */;
  %157 = %156.0;
  (%157,)
}

def @func_5673() -> (Tensor[(9, 11, 8), float32],) {
  %158 = @func_5558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
  %159 = %158.0;
  (%159,)
}

def @func_8869(%var_8847: Tensor[(8, 30), float32]) -> Tensor[(8, 30), int64] {
  %160 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %161 = %160.2;
  %162 = cast(%var_8847, dtype="int64") /* ty=Tensor[(8, 30), int64] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(2), int32] */;
  %164 = cast(%161, dtype="int64") /* ty=Tensor[(8, 30), int64] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  maximum(%164, %165) /* ty=Tensor[(8, 30), int64] */
}

def @func_9226() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %166 = @func_7032() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %167 = %166.0;
  %168 = @func_6573() /* ty=Tensor[(9, 11, 8), bool] */;
  (%167, %168)
}

def @func_12872(%var_12833: Tensor[(756), uint8], %var_12834: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32], Tensor[(576), int32]) {
  %169 = @func_6023() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
  %170 = cast(%var_12833, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %171 = cast(%var_12834, dtype="float32") /* ty=Tensor[(240), float32] */;
  %172 = reshape(%170, newshape=[54, 14]) /* ty=Tensor[(54, 14), uint8] */;
  %173 = reshape(%171, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %174 = @func_3037(%172, %173) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(54, 14), uint8], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32]) */;
  %175 = @func_10178() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %176 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %177 = @func_9278() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), bool]) */;
  %178 = %169.1;
  %179 = %174.2;
  %180 = %175.1;
  %181 = %176.1;
  %182 = %177.1;
  (%178, %179, %var_12833, %var_12834, %180, %181, %182)
}

def @func_15568() -> Tensor[(9, 11, 8), int32] {
  @func_13490() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_2929() -> (Tensor[(9, 7, 6), bool],) {
  %183 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 7, 6), bool] */, dtype="bool") /* ty=Tensor[(1, 7, 6), bool] */;
  %184 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 7, 6), bool] */, dtype="bool") /* ty=Tensor[(9, 7, 6), bool] */;
  %185 = logical_and(%183, %184) /* ty=Tensor[(9, 7, 6), bool] */;
  (%185,)
}

def @func_5786() -> Tensor[(9, 11, 8), bool] {
  %186 = @func_4503() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(8, 30), uint16], Tensor[(4, 60), int64]) */;
  %186.0
}

def @func_8425() -> (Tensor[(9, 11, 8), int16], Tensor[(12, 9, 9), float64], Tensor[(162, 6), float64], Tensor[(6, 15, 15), bool], Tensor[(9, 11, 8), int16], Tensor[(240), float32]) {
  %187 = cast(meta[relay.Constant][6] /* ty=Tensor[(162, 6), float64] */, dtype="float64") /* ty=Tensor[(162, 6), float64] */;
  %188 = reshape(%187, newshape=[12, 9, 9]) /* ty=Tensor[(12, 9, 9), float64] */;
  %189 = @func_6144() /* ty=Tensor[(6, 15, 15), float64] */;
  %190 = cast(%189, dtype="float64") /* ty=Tensor[(6, 15, 15), float64] */;
  %191 = acosh(%190) /* ty=Tensor[(6, 15, 15), float64] */;
  %192 = cast(%189, dtype="bool") /* ty=Tensor[(6, 15, 15), bool] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%191, dtype="bool") /* ty=Tensor[(6, 15, 15), bool] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %196 = cast(meta[relay.Constant][7] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %197 = reshape(%196, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %198 = @func_6387(%197) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(792), float32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16]) */;
  %199 = @func_7327() /* ty=Tensor[(9, 11, 8), int16] */;
  %200 = @func_4265(%188) /* ty=Tensor[(12, 9, 9), float64] */;
  %201 = greater(%194, %195) /* ty=Tensor[(6, 15, 15), bool] */;
  %202 = %198.5;
  (%199, %200, meta[relay.Constant][6] /* ty=Tensor[(162, 6), float64] */, %201, %202, meta[relay.Constant][7] /* ty=Tensor[(240), float32] */)
}

def @func_1044() -> (Tensor[(9, 11, 8), bool],) {
  %203 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  (%203,)
}

def @func_7010() -> (Tensor[(9, 11, 8), int16],) {
  %204 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
  (%204,)
}

def @func_6901() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float32]) {
  %205 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %206 = @func_3177() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float64]) */;
  %207 = %205.1;
  %208 = %206.0;
  (%207, %208)
}

def @func_6478() -> Tensor[(9, 11, 8), bool] {
  %209 = @func_5327() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %209.0
}

def @func_11633() -> Tensor[(9, 7, 6), bool] {
  %210 = @func_2929() /* ty=(Tensor[(9, 7, 6), bool],) */;
  %210.0
}

def @func_17152() -> (Tensor[(9, 11, 8), float64],) {
  %211 = @func_1147() /* ty=Tensor[(9, 11, 8), float64] */;
  (%211,)
}

def @func_11908() -> Tensor[(9, 11, 8), int32] {
  %212 = @func_7591() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32]) */;
  %212.0
}

def @func_1224() -> (Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) {
  %213 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  %214 = cast(%213, dtype="float32") /* ty=Tensor[(9, 11, 8), float32] */;
  %215 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 30), float32] */, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %216 = reshape(%215, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), float32] */;
  %217 = @func_414(%216) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(6, 8, 12), float64], Tensor[(576), int32]) */;
  %218 = asin(%214) /* ty=Tensor[(9, 11, 8), float32] */;
  %219 = %217.2;
  (%218, %219, meta[relay.Constant][8] /* ty=Tensor[(8, 30), float32] */)
}

def @func_17172(%var_17154: Tensor[(11, 6, 8), float64]) -> (Tensor[(9, 11, 8), int16], Tensor[(11, 6, 8), uint16]) {
  %220 = @func_10873() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %221 = cast(%var_17154, dtype="float64") /* ty=Tensor[(11, 6, 8), float64] */;
  %222 = acosh(%221) /* ty=Tensor[(11, 6, 8), float64] */;
  %223 = cast(%var_17154, dtype="uint16") /* ty=Tensor[(11, 6, 8), uint16] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%222, dtype="uint16") /* ty=Tensor[(11, 6, 8), uint16] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %227 = %220.0;
  %228 = bitwise_or(%225, %226) /* ty=Tensor[(11, 6, 8), uint16] */;
  (%227, %228)
}

def @func_12584() -> (Tensor[(9, 11, 8), int32],) {
  %229 = @func_5225() /* ty=Tensor[(9, 11, 8), int32] */;
  (%229,)
}

def @func_5512(%var_5479: float64, %var_5480: Tensor[(6, 3, 4), float64]) -> (Tensor[(6, 3, 4), bool], Tensor[(9, 11, 8), int16]) {
  %230 = cast(%var_5479, dtype="bool") /* ty=bool */;
  %231 = cast(%var_5480, dtype="bool") /* ty=Tensor[(6, 3, 4), bool] */;
  %232 = @func_4823() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
  %233 = equal(%230, %231) /* ty=Tensor[(6, 3, 4), bool] */;
  %234 = %232.1;
  (%233, %234)
}

def @func_11987() -> Tensor[(9, 11, 8), float64] {
  %235 = @func_9966() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) */;
  %235.1
}

def @func_8944() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) {
  %236 = @func_1357() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */;
  %237 = @func_2302() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
  %238 = @func_4823() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
  %239 = %236.0;
  %240 = @func_7794() /* ty=Tensor[(9, 11, 8), int16] */;
  %241 = %237.0;
  %242 = %238.0;
  (%239, %240, %241, %242)
}

def @func_1497() -> Tensor[(9, 11, 8), float32] {
  %243 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %243.0
}

def @func_6649() -> Tensor[(6, 15, 15), float64] {
  %244 = @func_3755() /* ty=(Tensor[(6, 15, 15), float64],) */;
  %244.0
}

def @func_14591() -> (Tensor[(7, 9, 12), uint8],) {
  %245 = @func_7183() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32], Tensor[(3, 16, 3), int64], Tensor[(144), float32], Tensor[(7, 9, 12), uint8], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
  %246 = %245.5;
  (%246,)
}

def @func_12212() -> (Tensor[(9, 11, 8), float32],) {
  %247 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %248 = %247.1;
  (%248,)
}

def @func_7032() -> (Tensor[(9, 11, 8), bool],) {
  %249 = @func_1697() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %250 = %249.0;
  (%250,)
}

def @func_2853(%var_2829: Tensor[(3, 252), uint8]) -> (Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(3, 252), uint8], Tensor[(9, 11, 8), float32]) {
  %251 = @func_2558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %252 = %251.0;
  %253 = cast(%252, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %254 = cast(%var_2829, dtype="uint8") /* ty=Tensor[(3, 252), uint8] */;
  %255 = reshape(%253, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %256 = reshape(%254, newshape=[756]) /* ty=Tensor[(756), uint8] */;
  %257 = @func_1451(%255, %256) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8]) */;
  %258 = cast(%252, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %259 = %257.4;
  %260 = cast(%259, dtype="uint8") /* ty=Tensor[(7, 9, 12), uint8] */;
  %261 = reshape(%258, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %262 = reshape(%260, newshape=[756]) /* ty=Tensor[(756), uint8] */;
  %263 = @func_1451(%261, %262) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8]) */;
  %264 = %263.2;
  (%252, %259, %var_2829, %264)
}

def @func_13504() -> (Tensor[(9, 11, 8), int16],) {
  %265 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
  (%265,)
}

def @func_134(%var_55: Tensor[(6, 8, 12), int32], %var_56: Tensor[(6, 8, 12), int32], %var_86: Tensor[(6, 8, 12), int32], %var_122: Tensor[(6, 8, 12), float64]) -> (Tensor[(6, 8, 12), float64], Tensor[(6, 8, 12), bool], Tensor[(6, 8, 12), float64]) {
  %266 = cast(%var_55, dtype="float64") /* ty=Tensor[(6, 8, 12), float64] */;
  %267 = cast(%var_86, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %268 = shape_of(%var_55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%var_55, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %271 = cast(%var_56, dtype="int32") /* ty=Tensor[(6, 8, 12), int32] */;
  %272 = shape_of(%var_55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%var_55, dtype="int32") /* ty=Tensor[(6, 8, 12), int32] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %275 = subtract(%273, %274) /* ty=Tensor[(6, 8, 12), int32] */;
  %276 = cast(%275, dtype="float64") /* ty=Tensor[(6, 8, 12), float64] */;
  %277 = tan(%276) /* ty=Tensor[(6, 8, 12), float64] */;
  %278 = cast(%var_122, dtype="float64") /* ty=Tensor[(6, 8, 12), float64] */;
  %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%277, dtype="float64") /* ty=Tensor[(6, 8, 12), float64] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %282 = log10(%266) /* ty=Tensor[(6, 8, 12), float64] */;
  %283 = logical_or(%269, %270) /* ty=Tensor[(6, 8, 12), bool] */;
  %284 = power(%280, %281) /* ty=Tensor[(6, 8, 12), float64] */;
  (%282, %283, %284)
}

def @func_15106() -> (Tensor[(9, 11, 8), float64],) {
  %285 = @func_3619() /* ty=Tensor[(9, 11, 8), float64] */;
  (%285,)
}

def @func_16861() -> (Tensor[(9, 11, 8), float64],) {
  %286 = @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %287 = %286.0;
  (%287,)
}

def @func_11763() -> (Tensor[(162, 6), float64], Tensor[(6, 14, 7), float32], Tensor[(588), float32]) {
  %288 = @func_8425() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(12, 9, 9), float64], Tensor[(162, 6), float64], Tensor[(6, 15, 15), bool], Tensor[(9, 11, 8), int16], Tensor[(240), float32]) */;
  %289 = cast(meta[relay.Constant][9] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
  %290 = reshape(%289, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
  %291 = @func_7211(%290) /* ty=(Tensor[(6, 14, 7), float32],) */;
  %292 = %288.2;
  %293 = %291.0;
  (%292, %293, meta[relay.Constant][9] /* ty=Tensor[(588), float32] */)
}

def @func_7847() -> (Tensor[(9, 11, 8), float64],) {
  %294 = @func_6023() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
  %295 = %294.0;
  (%295,)
}

def @func_4823() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) {
  %296 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %297 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %298 = %296.0;
  %299 = %297.1;
  (%298, %299)
}

def @func_13061() -> (Tensor[(9, 11, 8), float32],) {
  %300 = @func_9013() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %301 = %300.0;
  (%301,)
}

def @main() -> (Tensor[(5, 240), uint16],) {
  %302 = @func_4601() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), uint16], Tensor[(1, 240), float32], Tensor[(9, 11, 8), float64]) */;
  %303 = %302.4;
  %304 = cast(%303, dtype="uint16") /* ty=Tensor[(1, 240), uint16] */;
  %305 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 240), float32] */, dtype="uint16") /* ty=Tensor[(5, 240), uint16] */;
  %306 = left_shift(%304, %305) /* ty=Tensor[(5, 240), uint16] */;
  (%306,)
}

def @func_12387() -> (Tensor[(9, 11, 8), bool],) {
  %307 = @func_5590() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) */;
  %308 = %307.1;
  (%308,)
}

def @func_10768() -> Tensor[(9, 11, 8), int16] {
  %309 = @func_4149() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), uint16]) */;
  %309.0
}

def @func_12423() -> (Tensor[(9, 11, 8), int32],) {
  %310 = @func_8574() /* ty=Tensor[(9, 11, 8), int32] */;
  (%310,)
}

def @func_16459() -> Tensor[(9, 11, 8), int16] {
  %311 = @func_8602() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %311.0
}

def @func_14219() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16], Tensor[(9, 7, 6), bool]) {
  %312 = @func_13703() /* ty=(Tensor[(8, 30), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), int16]) */;
  %313 = @func_2430() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %314 = %312.1;
  %315 = %313.0;
  %316 = @func_11633() /* ty=Tensor[(9, 7, 6), bool] */;
  (%314, %315, %316)
}

def @func_5157() -> (Tensor[(9, 11, 8), int16],) {
  %317 = @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %318 = %317.0;
  (%318,)
}

def @func_16039() -> (Tensor[(15, 2, 1), float32],) {
  %319 = @func_6492() /* ty=Tensor[(15, 2, 1), float32] */;
  (%319,)
}

def @func_414(%var_377: Tensor[(6, 10, 4), float32]) -> (Tensor[(6, 10, 4), float32], Tensor[(6, 8, 12), float64], Tensor[(576), int32]) {
  %320 = cast(%var_377, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %321 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %322 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %323 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %324 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), int32] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %325 = reshape(%321, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), int32] */;
  %326 = reshape(%322, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), int32] */;
  %327 = reshape(%323, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), int32] */;
  %328 = reshape(%324, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), float64] */;
  %329 = @func_134(%325, %326, %327, %328) /* ty=(Tensor[(6, 8, 12), float64], Tensor[(6, 8, 12), bool], Tensor[(6, 8, 12), float64]) */;
  %330 = cosh(%320) /* ty=Tensor[(6, 10, 4), float32] */;
  %331 = %329.2;
  (%330, %331, meta[relay.Constant][11] /* ty=Tensor[(576), int32] */)
}

def @func_13490() -> Tensor[(9, 11, 8), int32] {
  %332 = @func_7061() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %332.1
}

def @func_16945() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) {
  %333 = @func_5673() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %334 = @func_9966() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) */;
  %335 = @func_7847() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %336 = @func_6714() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %337 = %333.0;
  %338 = @func_10593() /* ty=Tensor[(9, 11, 8), float64] */;
  %339 = %334.0;
  %340 = %335.0;
  %341 = %336.0;
  (%337, %338, %339, %340, %341)
}

def @func_6106() -> Tensor[(9, 11, 8), float32] {
  @func_1497() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_3740(%var_3681: Tensor[(756), uint8]) -> (Tensor[(9, 11, 8), float32], Tensor[(756), uint8], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) {
  %342 = @func_3619() /* ty=Tensor[(9, 11, 8), float64] */;
  %343 = cast(%342, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %344 = cast(%var_3681, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %345 = reshape(%343, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %346 = reshape(%344, newshape=[756]) /* ty=Tensor[(756), uint8] */;
  %347 = @func_1451(%345, %346) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8]) */;
  %348 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  %349 = cast(%342, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%348, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %353 = %347.2;
  %354 = divide(%351, %352) /* ty=Tensor[(9, 11, 8), float64] */;
  %355 = @func_2229() /* ty=Tensor[(9, 11, 8), float64] */;
  (%353, %var_3681, %354, %355)
}

def @func_11468() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float64]) {
  %356 = @func_7485() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %357 = @func_4823() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
  %358 = @func_8054() /* ty=(Tensor[(8, 30), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(91), uint64], Tensor[(8, 30), float64]) */;
  %359 = %356.0;
  %360 = %357.0;
  %361 = %358.4;
  (%359, %360, %361)
}

def @func_6714() -> (Tensor[(9, 11, 8), int32],) {
  %362 = @func_3177() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float64]) */;
  %363 = %362.1;
  (%363,)
}

def @func_13440(%var_13391: Tensor[(972), float64]) -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float32], Tensor[(12, 9, 9), float64], Tensor[(972), float64]) {
  %364 = @func_12212() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %365 = @func_12480() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %366 = cast(%var_13391, dtype="float64") /* ty=Tensor[(972), float64] */;
  %367 = reshape(%366, newshape=[12, 9, 9]) /* ty=Tensor[(12, 9, 9), float64] */;
  %368 = %364.0;
  %369 = %365.0;
  %370 = @func_12025() /* ty=Tensor[(8, 30), float32] */;
  %371 = @func_4265(%367) /* ty=Tensor[(12, 9, 9), float64] */;
  (%368, %369, %370, %371, %var_13391)
}

def @func_11893() -> (Tensor[(9, 11, 8), int32],) {
  %372 = @func_10976() /* ty=Tensor[(9, 11, 8), int32] */;
  (%372,)
}

def @func_13234() -> (Tensor[(9, 11, 8), bool],) {
  %373 = @func_5455() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %374 = %373.0;
  (%374,)
}

def @func_8354(%var_8324: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int32], Tensor[(8, 30), bool], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float64], Tensor[(9, 11, 8), float32]) {
  %375 = @func_6797() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %376 = cast(%var_8324, dtype="float32") /* ty=Tensor[(240), float32] */;
  %377 = reshape(%376, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %378 = @func_6387(%377) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(792), float32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16]) */;
  %379 = @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %380 = @func_3177() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float64]) */;
  %381 = @func_7090() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %382 = %375.1;
  %383 = %378.3;
  %384 = %379.0;
  %385 = %380.3;
  %386 = %381.0;
  (%382, %383, %var_8324, %384, %385, %386)
}

def @func_2379() -> Tensor[(9, 11, 8), int16] {
  %387 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %387.1
}

def @func_4149() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), uint16]) {
  %388 = @func_3106() /* ty=Tensor[(9, 11, 8), float32] */;
  %389 = @func_2302() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
  %390 = %389.0;
  %391 = cast(%390, dtype="uint16") /* ty=Tensor[(9, 11, 8), uint16] */;
  %392 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%388, dtype="uint16") /* ty=Tensor[(9, 11, 8), uint16] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %395 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
  %396 = left_shift(%393, %394) /* ty=Tensor[(9, 11, 8), uint16] */;
  (%395, %396)
}

def @func_8602() -> (Tensor[(9, 11, 8), int16],) {
  %397 = @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %398 = %397.0;
  (%398,)
}

def @func_4469() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) {
  %399 = @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %400 = %399.0;
  %401 = @func_1497() /* ty=Tensor[(9, 11, 8), float32] */;
  (%400, %401)
}

def @func_5291() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %402 = @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %403 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  %404 = %402.0;
  (%403, %404)
}

def @func_14330(%var_14327: Tensor[(91), uint64]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(7, 6, 16), float32], Tensor[(672), uint64], Tensor[(3, 7, 13), bool], Tensor[(91), uint64], Tensor[(273), uint64]) {
  %405 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %406 = @func_13895() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %407 = cast(meta[relay.Constant][12] /* ty=Tensor[(672), uint64] */, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %408 = reshape(%407, newshape=[7, 6, 16]) /* ty=Tensor[(7, 6, 16), uint64] */;
  %409 = cast(%var_14327, dtype="uint64") /* ty=Tensor[(91), uint64] */;
  %410 = cast(meta[relay.Constant][13] /* ty=Tensor[(273), uint64] */, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %411 = reshape(%409, newshape=[1, 7, 13]) /* ty=Tensor[(1, 7, 13), uint64] */;
  %412 = reshape(%410, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), uint64] */;
  %413 = @func_1888(%411, %412) /* ty=(Tensor[(3, 7, 13), bool], Tensor[(3, 7, 13), uint8]) */;
  %414 = %405.0;
  %415 = %406.0;
  %416 = @func_1497() /* ty=Tensor[(9, 11, 8), float32] */;
  %417 = @func_14168(%408) /* ty=Tensor[(7, 6, 16), float32] */;
  %418 = %413.0;
  (%414, %415, %416, %417, meta[relay.Constant][12] /* ty=Tensor[(672), uint64] */, %418, %var_14327, meta[relay.Constant][13] /* ty=Tensor[(273), uint64] */)
}

def @func_2430() -> (Tensor[(9, 11, 8), int16],) {
  %419 = @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %420 = %419.0;
  (%420,)
}

def @func_3037(%var_3018: Tensor[(54, 14), uint8], %var_3031: Tensor[(8, 30), float32]) -> (Tensor[(9, 11, 8), float32], Tensor[(54, 14), uint8], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32]) {
  %421 = cast(%var_3018, dtype="uint8") /* ty=Tensor[(54, 14), uint8] */;
  %422 = reshape(%421, newshape=[3, 252]) /* ty=Tensor[(3, 252), uint8] */;
  %423 = @func_2853(%422) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(3, 252), uint8], Tensor[(9, 11, 8), float32]) */;
  %424 = cast(%var_3018, dtype="uint8") /* ty=Tensor[(54, 14), uint8] */;
  %425 = reshape(%424, newshape=[3, 252]) /* ty=Tensor[(3, 252), uint8] */;
  %426 = @func_2853(%425) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(3, 252), uint8], Tensor[(9, 11, 8), float32]) */;
  %427 = @func_2409() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32]) */;
  %428 = %427.2;
  %429 = cast(%var_3031, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(2), int32] */;
  %431 = cast(%428, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %433 = %423.3;
  %434 = %426.1;
  %435 = mod(%431, %432) /* ty=Tensor[(8, 30), float32] */;
  (%433, %var_3018, %434, %435)
}

def @func_8273(%var_8250: Tensor[(1, 13, 16), float32]) -> Tensor[(?, 13, 16), float64] {
  %436 = cast(%var_8250, dtype="float32") /* ty=Tensor[(1, 13, 16), float32] */;
  %437 = rsqrt(%436) /* ty=Tensor[(1, 13, 16), float32] */;
  %438 = cast(%437, dtype="float32") /* ty=Tensor[(1, 13, 16), float32] */;
  %439 = sin(%438) /* ty=Tensor[(1, 13, 16), float32] */;
  %440 = cast(%437, dtype="float64") /* ty=Tensor[(1, 13, 16), float64] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="float64") /* ty=Tensor[(1, 13, 16), float64] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%442, %443) /* ty=Tensor[(?, 13, 16), float64] */
}

def @func_4601() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), uint16], Tensor[(1, 240), float32], Tensor[(9, 11, 8), float64]) {
  %444 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %445 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %446 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 240), float32] */, dtype="float32") /* ty=Tensor[(1, 240), float32] */;
  %447 = reshape(%446, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %448 = @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %449 = @func_3619() /* ty=Tensor[(9, 11, 8), float64] */;
  %450 = %444.0;
  %451 = %445.0;
  %452 = @func_4196(%447) /* ty=Tensor[(8, 30), uint16] */;
  %453 = %448.0;
  (%449, %450, %451, %452, meta[relay.Constant][14] /* ty=Tensor[(1, 240), float32] */, %453)
}

def @func_11186() -> Tensor[(9, 11, 8), int16] {
  %454 = @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %454.0
}

def @func_11929() -> Tensor[(9, 11, 8), float32] {
  %455 = @func_6901() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float32]) */;
  %455.0
}

def @func_2091(%var_2020: Tensor[(9, 11, 8), bool], %var_2054: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int8], Tensor[(9, 11, 8), bool], Tensor[(7, 9, 12), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) {
  %456 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %457 = %456.0;
  %458 = cast(%var_2020, dtype="int8") /* ty=Tensor[(9, 11, 8), int8] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%457, dtype="int8") /* ty=Tensor[(9, 11, 8), int8] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %462 = @func_1044() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %463 = cast(%var_2054, dtype="float32") /* ty=Tensor[(240), float32] */;
  %464 = reshape(%463, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %465 = @func_1971(%464) /* ty=(Tensor[(8, 30), float32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(8, 30), uint16], Tensor[(7, 9, 12), uint8]) */;
  %466 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %467 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %468 = logical_xor(%460, %461) /* ty=Tensor[(9, 11, 8), int8] */;
  %469 = %462.0;
  %470 = %465.1;
  %471 = %466.0;
  %472 = %467.0;
  (%468, %469, %470, %var_2054, %471, %472)
}

def @func_8054() -> (Tensor[(8, 30), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(91), uint64], Tensor[(8, 30), float64]) {
  %473 = @func_4740() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int16], Tensor[(8, 30), float64]) */;
  %474 = %473.1;
  %475 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 30), float32] */, dtype="int16") /* ty=Tensor[(8, 30), int16] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(2), int32] */;
  %477 = cast(%474, dtype="int16") /* ty=Tensor[(8, 30), int16] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %479 = cast(meta[relay.Constant][16] /* ty=Tensor[(91), uint64] */, dtype="uint64") /* ty=Tensor[(91), uint64] */;
  %480 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 30), float32] */, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %481 = reshape(%479, newshape=[91]) /* ty=Tensor[(91), uint64] */;
  %482 = reshape(%480, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %483 = @func_2695(%481, %482) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(3, 7, 13), uint8], Tensor[(91), uint64], Tensor[(273), uint64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(240), float32]) */;
  %484 = left_shift(%477, %478) /* ty=Tensor[(8, 30), int16] */;
  %485 = @func_1497() /* ty=Tensor[(9, 11, 8), float32] */;
  %486 = %483.4;
  %487 = @func_4538() /* ty=Tensor[(8, 30), float64] */;
  (%484, %485, %486, meta[relay.Constant][16] /* ty=Tensor[(91), uint64] */, %487)
}

def @func_12566() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16]) {
  %488 = @func_8054() /* ty=(Tensor[(8, 30), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(91), uint64], Tensor[(8, 30), float64]) */;
  %489 = @func_12334() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %490 = %488.1;
  %491 = %489.1;
  (%490, %491)
}

def @func_991() -> Tensor[(9, 11, 8), bool] {
  %492 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %493 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 11, 8), bool] */, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  logical_and(%492, %493) /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_12788() -> (Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), bool]) {
  %494 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %495 = @func_11633() /* ty=Tensor[(9, 7, 6), bool] */;
  %496 = %494.0;
  (%495, %496)
}

def @func_6090(%var_6041: Tensor[(3, 16, 3), float32]) -> (Tensor[(9, 11, 8), float64], Tensor[(3, 16, 3), int64]) {
  %497 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %498 = cast(%var_6041, dtype="float32") /* ty=Tensor[(3, 16, 3), float32] */;
  %499 = cosh(%498) /* ty=Tensor[(3, 16, 3), float32] */;
  %500 = cast(%499, dtype="float32") /* ty=Tensor[(3, 16, 3), float32] */;
  %501 = erf(%500) /* ty=Tensor[(3, 16, 3), float32] */;
  %502 = cast(%var_6041, dtype="int64") /* ty=Tensor[(3, 16, 3), int64] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%501, dtype="int64") /* ty=Tensor[(3, 16, 3), int64] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %506 = %497.0;
  %507 = logical_xor(%504, %505) /* ty=Tensor[(3, 16, 3), int64] */;
  (%506, %507)
}

def @func_14101(%var_14030: float64) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(12, 15, 14), uint32], float64, Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) {
  %508 = @func_1357() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */;
  %509 = @func_13167() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %510 = cast(%var_14030, dtype="float64") /* ty=float64 */;
  %511 = reshape(%510, newshape=[]) /* ty=float64 */;
  %512 = @func_13806(%511) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(12, 15, 14), uint32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32], Tensor[(6, 3, 4), bool], float64, Tensor[(1, 72), float64], Tensor[(9, 11, 8), bool]) */;
  %513 = @func_4761() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
  %514 = @func_4242() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16]) */;
  %515 = @func_13895() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %516 = %508.0;
  %517 = %509.0;
  %518 = %512.1;
  %519 = %513.2;
  %520 = %514.0;
  %521 = %515.0;
  (%516, %517, %518, %var_14030, %519, %520, %521)
}

def @func_11862() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) {
  %522 = @func_10699() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int32]) */;
  %523 = @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %524 = %522.1;
  %525 = %523.0;
  (%524, %525)
}

def @func_7935() -> Tensor[(9, 11, 8), int32] {
  %526 = @func_6229() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32]) */;
  %526.1
}

def @func_11558() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) {
  %527 = @func_9226() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %528 = @func_9095() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16]) */;
  %529 = %527.1;
  %530 = %528.3;
  (%529, %530)
}

def @func_16208() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(30), float64]) {
  %531 = cast(meta[relay.Constant][18] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %532 = reshape(%531, newshape=[1, 5, 6]) /* ty=Tensor[(1, 5, 6), float64] */;
  %533 = @func_14370(%532) /* ty=(Tensor[(1, 5, 6), float64], Tensor[(9, 11, 8), bool]) */;
  %534 = @func_11186() /* ty=Tensor[(9, 11, 8), int16] */;
  %535 = %533.1;
  (%534, %535, meta[relay.Constant][18] /* ty=Tensor[(30), float64] */)
}

def @func_12334() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) {
  %536 = @func_5590() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) */;
  %537 = %536.1;
  %538 = @func_10768() /* ty=Tensor[(9, 11, 8), int16] */;
  %539 = @func_5786() /* ty=Tensor[(9, 11, 8), bool] */;
  (%537, %538, %539)
}

def @func_15920() -> (Tensor[(8, 30), float64],) {
  %540 = @func_8054() /* ty=(Tensor[(8, 30), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(91), uint64], Tensor[(8, 30), float64]) */;
  %541 = %540.4;
  (%541,)
}

def @func_13977() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16], Tensor[(8, 30), float64], Tensor[(9, 11, 8), int16], float64, Tensor[(72), float64]) {
  %542 = @func_4823() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
  %543 = @func_4740() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int16], Tensor[(8, 30), float64]) */;
  %544 = cast(3.7202f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %545 = cast(meta[relay.Constant][19] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %546 = reshape(%544, newshape=[]) /* ty=float64 */;
  %547 = reshape(%545, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float64] */;
  %548 = @func_5512(%546, %547) /* ty=(Tensor[(6, 3, 4), bool], Tensor[(9, 11, 8), int16]) */;
  %549 = %542.1;
  %550 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
  %551 = %543.3;
  %552 = %548.1;
  (%549, %550, %551, %552, 3.7202f64 /* ty=float64 */, meta[relay.Constant][19] /* ty=Tensor[(72), float64] */)
}

def @func_2150(%var_2147: Tensor[(10, 16, 6), float64]) -> Tensor[(10, 16, 6), float64] {
  %553 = cast(%var_2147, dtype="float64") /* ty=Tensor[(10, 16, 6), float64] */;
  sin(%553) /* ty=Tensor[(10, 16, 6), float64] */
}

def @func_3586(%var_3569: Tensor[(960), float64]) -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(9, 7, 6), bool]) {
  %554 = @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %555 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %556 = cast(%var_3569, dtype="float64") /* ty=Tensor[(960), float64] */;
  %557 = reshape(%556, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %558 = @func_2929() /* ty=(Tensor[(9, 7, 6), bool],) */;
  %559 = %554.0;
  %560 = %555.0;
  %561 = @func_2150(%557) /* ty=Tensor[(10, 16, 6), float64] */;
  %562 = %558.0;
  (%559, %560, %561, %var_3569, %562)
}

def @func_3646() -> Tensor[(8, 30), float32] {
  %563 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %563.2
}

def @func_12738() -> (Tensor[(9, 11, 8), float64],) {
  %564 = @func_11987() /* ty=Tensor[(9, 11, 8), float64] */;
  (%564,)
}

def @func_5455() -> (Tensor[(9, 11, 8), bool],) {
  %565 = @func_5327() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %566 = %565.0;
  (%566,)
}

def @func_11496() -> Tensor[(9, 11, 8), float32] {
  @func_3106() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_6492() -> Tensor[(15, 2, 1), float32] {
  %567 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  acos(%567) /* ty=Tensor[(15, 2, 1), float32] */
}

def @func_7667() -> Tensor[(9, 11, 8), bool] {
  %568 = @func_5455() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %568.0
}

def @func_1334() -> (Tensor[(9, 11, 8), int16],) {
  %569 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %570 = %569.0;
  %571 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  %572 = cast(%571, dtype="int16") /* ty=Tensor[(9, 11, 8), int16] */;
  %573 = shape_of(%570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%570, dtype="int16") /* ty=Tensor[(9, 11, 8), int16] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %576 = bitwise_and(%574, %575) /* ty=Tensor[(9, 11, 8), int16] */;
  (%576,)
}

def @func_4804() -> (Tensor[(6, 15, 15), float64],) {
  %577 = @func_3755() /* ty=(Tensor[(6, 15, 15), float64],) */;
  %578 = %577.0;
  (%578,)
}

def @func_2229() -> Tensor[(9, 11, 8), float64] {
  %579 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %580 = %579.0;
  %581 = cast(%580, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
  rsqrt(%581) /* ty=Tensor[(9, 11, 8), float64] */
}

def @func_14168(%var_14125: Tensor[(7, 6, 16), uint64]) -> Tensor[(7, 6, 16), float32] {
  %582 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 1, 16), uint64] */, dtype="uint64") /* ty=Tensor[(7, 1, 16), uint64] */;
  %583 = cast(%var_14125, dtype="uint64") /* ty=Tensor[(7, 6, 16), uint64] */;
  %584 = subtract(%582, %583) /* ty=Tensor[(7, 6, 16), uint64] */;
  %585 = cast(%584, dtype="float32") /* ty=Tensor[(7, 6, 16), float32] */;
  %586 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 1, 16), uint64] */, dtype="float32") /* ty=Tensor[(7, 1, 16), float32] */;
  mod(%585, %586) /* ty=Tensor[(7, 6, 16), float32] */
}

def @func_13167() -> (Tensor[(9, 11, 8), float32],) {
  %587 = @func_3106() /* ty=Tensor[(9, 11, 8), float32] */;
  (%587,)
}

def @func_6023() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) {
  %588 = @func_4761() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
  %589 = %588.1;
  %590 = @func_5786() /* ty=Tensor[(9, 11, 8), bool] */;
  (%589, %590)
}

def @func_6573() -> Tensor[(9, 11, 8), bool] {
  %591 = @func_1697() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %591.0
}

def @func_3619() -> Tensor[(9, 11, 8), float64] {
  %592 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %592.0
}

def @func_11026(%var_11003: Tensor[(15, 13, 16), float64], %var_11014: Tensor[(15, 13, 16), float64]) -> (Tensor[(15, 13, 16), uint32],) {
  %593 = cast(%var_11003, dtype="float64") /* ty=Tensor[(15, 13, 16), float64] */;
  %594 = erf(%593) /* ty=Tensor[(15, 13, 16), float64] */;
  %595 = cast(%var_11014, dtype="uint32") /* ty=Tensor[(15, 13, 16), uint32] */;
  %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%594, dtype="uint32") /* ty=Tensor[(15, 13, 16), uint32] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %599 = subtract(%597, %598) /* ty=Tensor[(15, 13, 16), uint32] */;
  (%599,)
}

def @func_10976() -> Tensor[(9, 11, 8), int32] {
  %600 = @func_2558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %600.1
}

def @func_9441() -> (Tensor[(9, 11, 8), bool],) {
  %601 = @func_8784() /* ty=Tensor[(9, 11, 8), bool] */;
  (%601,)
}

def @func_12138() -> (Tensor[(9, 11, 8), float64],) {
  %602 = @func_3619() /* ty=Tensor[(9, 11, 8), float64] */;
  (%602,)
}

def @func_3835() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) {
  %603 = @func_2302() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
  %604 = %603.1;
  %605 = @func_3619() /* ty=Tensor[(9, 11, 8), float64] */;
  (%604, %605)
}

def @func_8200(%var_8132: Tensor[(16, 9, 4), float64]) -> (Tensor[(16, 9, 4), float32], Tensor[(9, 11, 8), int32], Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), int32], Tensor[(16, 9, 4), float32], Tensor[(9, 11, 8), float32]) {
  %606 = cast(%var_8132, dtype="float64") /* ty=Tensor[(16, 9, 4), float64] */;
  %607 = cosh(%606) /* ty=Tensor[(16, 9, 4), float64] */;
  %608 = cast(%607, dtype="float32") /* ty=Tensor[(16, 9, 4), float32] */;
  %609 = @func_2145() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %610 = @func_6649() /* ty=Tensor[(6, 15, 15), float64] */;
  %611 = cast(%610, dtype="float64") /* ty=Tensor[(6, 15, 15), float64] */;
  %612 = @func_4601() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), uint16], Tensor[(1, 240), float32], Tensor[(9, 11, 8), float64]) */;
  %613 = cast(%607, dtype="float32") /* ty=Tensor[(16, 9, 4), float32] */;
  %614 = @func_5558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
  %615 = sqrt(%608) /* ty=Tensor[(16, 9, 4), float32] */;
  %616 = %609.1;
  %617 = asin(%611) /* ty=Tensor[(6, 15, 15), float64] */;
  %618 = %612.2;
  %619 = cos(%613) /* ty=Tensor[(16, 9, 4), float32] */;
  %620 = %614.0;
  (%615, %616, %617, %618, %619, %620)
}

def @func_16356() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) {
  %621 = @func_10095() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %622 = @func_10985() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %623 = %621.0;
  %624 = %622.0;
  (%623, %624)
}

def @func_7945() -> Tensor[(9, 11, 8), float32] {
  %625 = @func_6693() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %625.0
}

def @func_11215() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) {
  %626 = @func_3619() /* ty=Tensor[(9, 11, 8), float64] */;
  %627 = @func_7935() /* ty=Tensor[(9, 11, 8), int32] */;
  (%626, %627)
}

def @func_4382(%var_4372: Tensor[(91, 1), uint64], %var_4373: Tensor[(273), uint64]) -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int8], Tensor[(240), float32], Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float32], Tensor[(3, 7, 13), uint8], Tensor[(91, 1), uint64], Tensor[(273), uint64]) {
  %628 = @func_2558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %629 = %628.1;
  %630 = cast(%629, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %631 = cast(meta[relay.Constant][22] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %632 = reshape(%630, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %633 = reshape(%631, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %634 = @func_2091(%632, %633) /* ty=(Tensor[(9, 11, 8), int8], Tensor[(9, 11, 8), bool], Tensor[(7, 9, 12), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %635 = @func_3755() /* ty=(Tensor[(6, 15, 15), float64],) */;
  %636 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %637 = @func_2778() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %638 = cast(%var_4372, dtype="uint64") /* ty=Tensor[(91, 1), uint64] */;
  %639 = cast(%var_4373, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %640 = reshape(%638, newshape=[1, 7, 13]) /* ty=Tensor[(1, 7, 13), uint64] */;
  %641 = reshape(%639, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), uint64] */;
  %642 = @func_1888(%640, %641) /* ty=(Tensor[(3, 7, 13), bool], Tensor[(3, 7, 13), uint8]) */;
  %643 = %634.0;
  %644 = %635.0;
  %645 = %636.1;
  %646 = %637.0;
  %647 = %642.1;
  (%629, %643, meta[relay.Constant][22] /* ty=Tensor[(240), float32] */, %644, %645, %646, %647, %var_4372, %var_4373)
}

def @func_12159() -> Tensor[(9, 11, 8), float32] {
  %648 = @func_2558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %648.0
}

def @func_14370(%var_14336: Tensor[(1, 5, 6), float64]) -> (Tensor[(1, 5, 6), float64], Tensor[(9, 11, 8), bool]) {
  %649 = cast(%var_14336, dtype="float64") /* ty=Tensor[(1, 5, 6), float64] */;
  %650 = @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %651 = acos(%649) /* ty=Tensor[(1, 5, 6), float64] */;
  %652 = %650.0;
  (%651, %652)
}

def @func_4265(%var_4262: Tensor[(12, 9, 9), float64]) -> Tensor[(12, 9, 9), float64] {
  %653 = cast(%var_4262, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  log10(%653) /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_16428(%var_16421: Tensor[(91), uint64]) -> (Tensor[(15, 2, 1), float32], Tensor[(9, 11, 8), bool], Tensor[(672), uint64], Tensor[(91), uint64]) {
  %654 = @func_7288() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %655 = cast(%var_16421, dtype="uint64") /* ty=Tensor[(91), uint64] */;
  %656 = reshape(%655, newshape=[91]) /* ty=Tensor[(91), uint64] */;
  %657 = @func_14330(%656) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(7, 6, 16), float32], Tensor[(672), uint64], Tensor[(3, 7, 13), bool], Tensor[(91), uint64], Tensor[(273), uint64]) */;
  %658 = @func_6492() /* ty=Tensor[(15, 2, 1), float32] */;
  %659 = %654.0;
  %660 = %657.4;
  (%658, %659, %660, %var_16421)
}

def @func_12903() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) {
  %661 = @func_10178() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %662 = @func_11604() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %663 = %662.0;
  %664 = cast(%663, dtype="float32") /* ty=Tensor[(9, 11, 8), float32] */;
  %665 = reshape(%664, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), float32] */;
  %666 = @func_3405(%665) /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
  %667 = %661.1;
  %668 = %666.2;
  (%667, %663, %668)
}

def @func_4538() -> Tensor[(8, 30), float64] {
  %669 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %670 = %669.2;
  %671 = cast(%670, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  rsqrt(%671) /* ty=Tensor[(8, 30), float64] */
}

def @func_16005() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(144), float32]) {
  %672 = cast(meta[relay.Constant][23] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %673 = reshape(%672, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), float32] */;
  %674 = @func_6090(%673) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(3, 16, 3), int64]) */;
  %675 = @func_10768() /* ty=Tensor[(9, 11, 8), int16] */;
  %676 = %674.0;
  (%675, %676, meta[relay.Constant][23] /* ty=Tensor[(144), float32] */)
}

def @func_7541(%var_7527: Tensor[(18), float64]) -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool], Tensor[(2, 10, 4), float64], Tensor[(2, 40), float64], Tensor[(2, 9, 1), float64], Tensor[(18), float64]) {
  %677 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 40), float64] */, dtype="float64") /* ty=Tensor[(2, 40), float64] */;
  %678 = reshape(%677, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), float64] */;
  %679 = @func_5391(%678) /* ty=(Tensor[(6, 15, 15), float64], Tensor[(2, 10, 4), float64]) */;
  %680 = cast(%var_7527, dtype="float64") /* ty=Tensor[(18), float64] */;
  %681 = reshape(%680, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float64] */;
  %682 = @func_4997(%681) /* ty=(Tensor[(2, 9, 1), float64], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int32]) */;
  %683 = @func_6106() /* ty=Tensor[(9, 11, 8), float32] */;
  %684 = @func_5786() /* ty=Tensor[(9, 11, 8), bool] */;
  %685 = %679.1;
  %686 = %682.0;
  (%683, %684, %685, meta[relay.Constant][24] /* ty=Tensor[(2, 40), float64] */, %686, %var_7527)
}

def @func_4242() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16]) {
  %687 = @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %688 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
  %689 = %687.0;
  (%688, %689)
}

def @func_10547(%var_10542: int8, %var_10543: Tensor[(1, 11, 16), int8]) -> Tensor[(1, 11, 16), int8] {
  %690 = cast(%var_10542, dtype="int8") /* ty=int8 */;
  %691 = cast(%var_10543, dtype="int8") /* ty=Tensor[(1, 11, 16), int8] */;
  bitwise_or(%690, %691) /* ty=Tensor[(1, 11, 16), int8] */
}

def @func_9416() -> Tensor[(9, 11, 8), bool] {
  %692 = @func_5327() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %692.0
}

def @func_10699() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int32]) {
  %693 = @func_5157() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %694 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %695 = %693.0;
  %696 = %694.0;
  (%695, %696)
}

def @func_11744() -> (Tensor[(9, 11, 8), bool],) {
  %697 = @func_5455() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %698 = %697.0;
  (%698,)
}

def @func_1103() -> (Tensor[(9, 11, 8), int32],) {
  %699 = @func_1044() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %700 = %699.0;
  %701 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 11, 8), bool] */, dtype="int32") /* ty=Tensor[(9, 11, 8), int32] */;
  %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%700, dtype="int32") /* ty=Tensor[(9, 11, 8), int32] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %705 = maximum(%703, %704) /* ty=Tensor[(9, 11, 8), int32] */;
  (%705,)
}

def @func_16994() -> Tensor[(9, 11, 8), float32] {
  %706 = @func_9802() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32]) */;
  %706.1
}

def @func_7485() -> (Tensor[(9, 11, 8), int16],) {
  %707 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
  (%707,)
}

def @func_16838(%var_16832: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(240), float32], Tensor[(9, 11, 8), float64]) {
  %708 = cast(%var_16832, dtype="float32") /* ty=Tensor[(240), float32] */;
  %709 = reshape(%708, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %710 = @func_16125(%709) /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(240), float32]) */;
  %711 = @func_9723() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %712 = @func_5786() /* ty=Tensor[(9, 11, 8), bool] */;
  %713 = %710.0;
  %714 = %711.4;
  (%712, %713, %var_16832, %714)
}

def @func_9278() -> (Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), bool]) {
  %715 = @func_2409() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32]) */;
  %716 = %715.2;
  %717 = cast(%716, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %718 = reshape(%717, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), float32] */;
  %719 = @func_414(%718) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(6, 8, 12), float64], Tensor[(576), int32]) */;
  %720 = @func_4538() /* ty=Tensor[(8, 30), float64] */;
  %721 = cast(%716, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(2), int32] */;
  %723 = cast(%720, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %725 = @func_7945() /* ty=Tensor[(9, 11, 8), float32] */;
  %726 = %719.2;
  %727 = greater(%723, %724) /* ty=Tensor[(8, 30), bool] */;
  (%725, %726, %727)
}

def @func_15660() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64]) {
  %728 = @func_9832() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) */;
  %729 = @func_12334() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %730 = @func_13703() /* ty=(Tensor[(8, 30), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), int16]) */;
  %731 = @func_9832() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) */;
  %732 = %728.0;
  %733 = %729.2;
  %734 = %730.3;
  %735 = %731.0;
  (%732, %733, %734, %735)
}

def @func_1752() -> (Tensor[(9, 11, 8), float64],) {
  %736 = @func_1497() /* ty=Tensor[(9, 11, 8), float32] */;
  %737 = cast(%736, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
  %738 = sinh(%737) /* ty=Tensor[(9, 11, 8), float64] */;
  (%738,)
}

def @func_14462() -> (Tensor[(9, 11, 8), bool],) {
  %739 = @func_1357() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */;
  %740 = %739.0;
  (%740,)
}

def @func_15393() -> Tensor[(9, 11, 8), bool] {
  @func_6573() /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_1888(%var_1871: Tensor[(1, 7, 13), uint64], %var_1872: Tensor[(3, 7, 13), uint64]) -> (Tensor[(3, 7, 13), bool], Tensor[(3, 7, 13), uint8]) {
  %741 = cast(%var_1871, dtype="bool") /* ty=Tensor[(1, 7, 13), bool] */;
  %742 = cast(%var_1872, dtype="bool") /* ty=Tensor[(3, 7, 13), bool] */;
  %743 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 7, 13), uint64] */, dtype="uint8") /* ty=Tensor[(3, 7, 13), uint8] */;
  %744 = shape_of(%var_1872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%var_1872, dtype="uint8") /* ty=Tensor[(3, 7, 13), uint8] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %747 = less(%741, %742) /* ty=Tensor[(3, 7, 13), bool] */;
  %748 = right_shift(%745, %746) /* ty=Tensor[(3, 7, 13), uint8] */;
  (%747, %748)
}

def @func_6693() -> (Tensor[(9, 11, 8), float32],) {
  %749 = @func_1497() /* ty=Tensor[(9, 11, 8), float32] */;
  (%749,)
}

def @func_14851() -> (Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32]) {
  %750 = @func_10976() /* ty=Tensor[(9, 11, 8), int32] */;
  %751 = @func_12025() /* ty=Tensor[(8, 30), float32] */;
  (%750, %751)
}

def @func_16285() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) {
  %752 = @func_8235() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %753 = %752.0;
  %754 = @func_6195() /* ty=Tensor[(9, 11, 8), bool] */;
  (%753, %754)
}

def @func_15065() -> (Tensor[(9, 11, 8), float64],) {
  %755 = @func_12138() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %756 = %755.0;
  (%756,)
}

def @func_6528() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) {
  %757 = @func_5157() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %758 = @func_3781() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %759 = %757.0;
  %760 = %758.2;
  (%759, %760)
}

def @func_10281() -> (Tensor[(9, 11, 8), bool],) {
  %761 = @func_10095() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %762 = %761.2;
  (%762,)
}

def @func_12749() -> (Tensor[(9, 11, 8), float64],) {
  %763 = @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %764 = %763.1;
  (%764,)
}

def @func_12025() -> Tensor[(8, 30), float32] {
  %765 = @func_7183() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32], Tensor[(3, 16, 3), int64], Tensor[(144), float32], Tensor[(7, 9, 12), uint8], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
  %765.2
}

def @func_12944(%var_12922: Tensor[(5, 13, 1), int64]) -> (Tensor[(5, 13, ?), bool], Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), int16]) {
  %766 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 13, 1), int64] */, dtype="bool") /* ty=Tensor[(5, 13, 1), bool] */;
  %767 = shape_of(%var_12922, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%var_12922, dtype="bool") /* ty=Tensor[(5, 13, 1), bool] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %770 = less_equal(%768, %769) /* ty=Tensor[(5, 13, ?), bool] */;
  %771 = @func_6649() /* ty=Tensor[(6, 15, 15), float64] */;
  %772 = @func_7327() /* ty=Tensor[(9, 11, 8), int16] */;
  (%770, %771, %772)
}

def @func_11604() -> (Tensor[(9, 11, 8), bool],) {
  %773 = @func_10178() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %774 = %773.0;
  (%774,)
}

def @func_15184(%var_15120: Tensor[(588), float32], %var_15128: Tensor[(756), uint8]) -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(588), float32], Tensor[(8, 30), float32], Tensor[(756), uint8], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int32]) {
  %775 = cast(%var_15120, dtype="float32") /* ty=Tensor[(588), float32] */;
  %776 = reshape(%775, newshape=[588]) /* ty=Tensor[(588), float32] */;
  %777 = @func_9343(%776) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(6, 14, 7), float32], Tensor[(588), float32], Tensor[(9, 11, 8), bool]) */;
  %778 = cast(%var_15128, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %779 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 30), float32] */, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %780 = reshape(%778, newshape=[54, 14]) /* ty=Tensor[(54, 14), uint8] */;
  %781 = reshape(%779, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %782 = @func_3037(%780, %781) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(54, 14), uint8], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32]) */;
  %783 = @func_11215() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) */;
  %784 = @func_11186() /* ty=Tensor[(9, 11, 8), int16] */;
  %785 = @func_3619() /* ty=Tensor[(9, 11, 8), float64] */;
  %786 = %777.3;
  %787 = %782.3;
  %788 = %783.1;
  (%784, %785, %786, %var_15120, %787, %var_15128, meta[relay.Constant][28] /* ty=Tensor[(8, 30), float32] */, %788)
}

def @func_6545() -> (Tensor[(9, 11, 8), float32],) {
  %789 = @func_3106() /* ty=Tensor[(9, 11, 8), float32] */;
  (%789,)
}

def @func_10033(%var_10001: Tensor[(16, 10, 14), float32], %var_10002: Tensor[(16, 10, 14), float32]) -> (Tensor[(16, 10, 14), bool], Tensor[(16, 10, 14), uint8], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int32]) {
  %790 = cast(%var_10002, dtype="bool") /* ty=Tensor[(16, 10, 14), bool] */;
  %791 = shape_of(%var_10001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%var_10001, dtype="bool") /* ty=Tensor[(16, 10, 14), bool] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %794 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 10, 14), float32] */, dtype="uint8") /* ty=Tensor[(16, 10, 14), uint8] */;
  %795 = shape_of(%var_10001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(%var_10001, dtype="uint8") /* ty=Tensor[(16, 10, 14), uint8] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %798 = @func_7591() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32]) */;
  %799 = less(%792, %793) /* ty=Tensor[(16, 10, 14), bool] */;
  %800 = bitwise_and(%796, %797) /* ty=Tensor[(16, 10, 14), uint8] */;
  %801 = @func_7794() /* ty=Tensor[(9, 11, 8), int16] */;
  %802 = %798.0;
  (%799, %800, %801, %802)
}

def @func_13895() -> (Tensor[(9, 11, 8), bool],) {
  %803 = @func_12903() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %804 = %803.1;
  (%804,)
}

def @func_11049() -> Tensor[(9, 11, 8), bool] {
  %805 = @func_10952() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(6, 15, 15), float64]) */;
  %805.0
}

def @func_2778() -> (Tensor[(9, 11, 8), float32],) {
  %806 = @func_2558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %807 = %806.0;
  (%807,)
}

def @func_5468() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) {
  %808 = @func_5291() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %809 = @func_2778() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %810 = %808.0;
  %811 = %809.0;
  (%810, %811)
}

def @func_11263() -> Tensor[(9, 11, 8), int16] {
  %812 = @func_8602() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %812.0
}

def @func_8496(%var_8461: Tensor[(1, 18), float64], %var_8470: Tensor[(2, 9, 8), float64], %var_8476: Tensor[(294, 2), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(1, 18), float64], Tensor[(2, 9, 8), bool], Tensor[(6, 14, 7), float32], Tensor[(294, 2), float32], Tensor[(8, 30), float64]) {
  %813 = @func_7419() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %814 = cast(%var_8461, dtype="float64") /* ty=Tensor[(1, 18), float64] */;
  %815 = reshape(%814, newshape=[18]) /* ty=Tensor[(18), float64] */;
  %816 = @func_7541(%815) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool], Tensor[(2, 10, 4), float64], Tensor[(2, 40), float64], Tensor[(2, 9, 1), float64], Tensor[(18), float64]) */;
  %817 = %816.4;
  %818 = cast(%817, dtype="bool") /* ty=Tensor[(2, 9, 1), bool] */;
  %819 = cast(%var_8470, dtype="bool") /* ty=Tensor[(2, 9, 8), bool] */;
  %820 = cast(%var_8476, dtype="float32") /* ty=Tensor[(294, 2), float32] */;
  %821 = reshape(%820, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
  %822 = @func_7211(%821) /* ty=(Tensor[(6, 14, 7), float32],) */;
  %823 = %813.0;
  %824 = equal(%818, %819) /* ty=Tensor[(2, 9, 8), bool] */;
  %825 = %822.0;
  %826 = @func_4538() /* ty=Tensor[(8, 30), float64] */;
  (%823, %var_8461, %824, %825, %var_8476, %826)
}

def @func_9832() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) {
  %827 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %828 = @func_4601() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), uint16], Tensor[(1, 240), float32], Tensor[(9, 11, 8), float64]) */;
  %829 = %827.0;
  %830 = %828.1;
  (%829, %830)
}

def @func_15278() -> (Tensor[(9, 11, 8), float32],) {
  %831 = @func_9013() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %832 = %831.0;
  (%832,)
}

def @func_11370() -> Tensor[(9, 11, 8), float32] {
  %833 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %833.1
}

def @func_5391(%var_5367: Tensor[(2, 10, 4), float64]) -> (Tensor[(6, 15, 15), float64], Tensor[(2, 10, 4), float64]) {
  %834 = @func_3755() /* ty=(Tensor[(6, 15, 15), float64],) */;
  %835 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 10, 4), float64] */, dtype="bool") /* ty=Tensor[(2, 10, 4), bool] */;
  %836 = shape_of(%var_5367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%var_5367, dtype="bool") /* ty=Tensor[(2, 10, 4), bool] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %839 = greater(%837, %838) /* ty=Tensor[(2, 10, 4), bool] */;
  %840 = cast(%839, dtype="float64") /* ty=Tensor[(2, 10, 4), float64] */;
  %841 = %834.0;
  %842 = cosh(%840) /* ty=Tensor[(2, 10, 4), float64] */;
  (%841, %842)
}

def @func_5745() -> (Tensor[(9, 11, 8), float32], Tensor[(6, 8, 12), float64], Tensor[(576), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), uint16]) {
  %843 = @func_2558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %844 = cast(meta[relay.Constant][31] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %845 = cast(meta[relay.Constant][31] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %846 = cast(meta[relay.Constant][31] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %847 = cast(meta[relay.Constant][31] /* ty=Tensor[(576), int32] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %848 = reshape(%844, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), int32] */;
  %849 = reshape(%845, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), int32] */;
  %850 = reshape(%846, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), int32] */;
  %851 = reshape(%847, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), float64] */;
  %852 = @func_134(%848, %849, %850, %851) /* ty=(Tensor[(6, 8, 12), float64], Tensor[(6, 8, 12), bool], Tensor[(6, 8, 12), float64]) */;
  %853 = @func_5157() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %854 = @func_4149() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), uint16]) */;
  %855 = %843.0;
  %856 = %852.2;
  %857 = %853.0;
  %858 = %854.1;
  (%855, %856, meta[relay.Constant][31] /* ty=Tensor[(576), int32] */, %857, %858)
}

def @func_15401() -> Tensor[(9, 11, 8), int16] {
  @func_2379() /* ty=Tensor[(9, 11, 8), int16] */
}

def @func_10676() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %859 = @func_5468() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %860 = %859.0;
  %861 = @func_5786() /* ty=Tensor[(9, 11, 8), bool] */;
  (%860, %861)
}

def @func_3177() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float64]) {
  %862 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %863 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %864 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %865 = cast(meta[relay.Constant][32] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %866 = reshape(%865, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %867 = @func_1971(%866) /* ty=(Tensor[(8, 30), float32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(8, 30), uint16], Tensor[(7, 9, 12), uint8]) */;
  %868 = %867.0;
  %869 = cast(meta[relay.Constant][32] /* ty=Tensor[(240), float32] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(2), int32] */;
  %871 = cast(%868, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %873 = %862.1;
  %874 = %863.0;
  %875 = %864.0;
  %876 = divide(%871, %872) /* ty=Tensor[(8, 30), float64] */;
  (%873, %874, %875, %876)
}

def @func_6931() -> (Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), bool]) {
  %877 = @func_3755() /* ty=(Tensor[(6, 15, 15), float64],) */;
  %878 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %879 = %877.0;
  %880 = %878.0;
  (%879, %880)
}

def @func_14987() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) {
  %881 = @func_14851() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32]) */;
  %882 = @func_10593() /* ty=Tensor[(9, 11, 8), float64] */;
  %883 = %881.0;
  (%882, %883)
}

def @func_4067() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) {
  %884 = @func_1697() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %885 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
  %886 = %884.0;
  (%885, %886)
}

def @func_6586() -> Tensor[(9, 11, 8), int32] {
  @func_5225() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_4669() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float32]) {
  %887 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %888 = @func_2302() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
  %889 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %890 = %887.0;
  %891 = %888.1;
  %892 = %889.0;
  %893 = @func_3646() /* ty=Tensor[(8, 30), float32] */;
  (%890, %891, %892, %893)
}

def @func_1671(%var_1641: Tensor[(4, 60), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(6, 8, 12), float64], Tensor[(4, 60), float32], Tensor[(576), int32]) {
  %894 = @func_1357() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */;
  %895 = cast(%var_1641, dtype="float32") /* ty=Tensor[(4, 60), float32] */;
  %896 = reshape(%895, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), float32] */;
  %897 = @func_414(%896) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(6, 8, 12), float64], Tensor[(576), int32]) */;
  %898 = @func_1357() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */;
  %899 = %894.0;
  %900 = %897.1;
  %901 = %898.1;
  (%899, %900, %var_1641, %901)
}

def @func_11247(%var_11228: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(240), float32], Tensor[(9, 11, 8), bool]) {
  %902 = @func_9095() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16]) */;
  %903 = @func_6714() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %904 = @func_7667() /* ty=Tensor[(9, 11, 8), bool] */;
  %905 = cast(%904, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %906 = cast(%var_11228, dtype="float32") /* ty=Tensor[(240), float32] */;
  %907 = reshape(%905, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %908 = reshape(%906, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %909 = @func_2091(%907, %908) /* ty=(Tensor[(9, 11, 8), int8], Tensor[(9, 11, 8), bool], Tensor[(7, 9, 12), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %910 = @func_5455() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %911 = %902.3;
  %912 = %903.0;
  %913 = %909.5;
  %914 = %910.0;
  (%911, %904, %912, %913, %var_11228, %914)
}

def @func_1971(%var_1946: Tensor[(8, 30), float32]) -> (Tensor[(8, 30), float32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(8, 30), uint16], Tensor[(7, 9, 12), uint8]) {
  %915 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %916 = %915.2;
  %917 = cast(%var_1946, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %918 = shape_of(%916, dtype="int32") /* ty=Tensor[(2), int32] */;
  %919 = cast(%916, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %921 = cast(meta[relay.Constant][33] /* ty=Tensor[(756), uint8] */, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %922 = cast(meta[relay.Constant][33] /* ty=Tensor[(756), uint8] */, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %923 = reshape(%921, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
  %924 = reshape(%922, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
  %925 = cast(%var_1946, dtype="uint16") /* ty=Tensor[(8, 30), uint16] */;
  %926 = shape_of(%916, dtype="int32") /* ty=Tensor[(2), int32] */;
  %927 = cast(%916, dtype="uint16") /* ty=Tensor[(8, 30), uint16] */;
  %928 = dyn.reshape(%925, %926, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %929 = cast(meta[relay.Constant][33] /* ty=Tensor[(756), uint8] */, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %930 = @func_198(%923, %924) /* ty=Tensor[(7, 9, 12), uint8] */;
  %931 = cast(%930, dtype="uint8") /* ty=Tensor[(7, 9, 12), uint8] */;
  %932 = reshape(%929, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
  %933 = reshape(%931, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
  %934 = floor_mod(%919, %920) /* ty=Tensor[(8, 30), float32] */;
  %935 = bitwise_xor(%927, %928) /* ty=Tensor[(8, 30), uint16] */;
  %936 = @func_198(%932, %933) /* ty=Tensor[(7, 9, 12), uint8] */;
  (%934, %930, meta[relay.Constant][33] /* ty=Tensor[(756), uint8] */, %935, %936)
}

def @func_6144() -> Tensor[(6, 15, 15), float64] {
  %937 = @func_4804() /* ty=(Tensor[(6, 15, 15), float64],) */;
  %937.0
}

def @func_2558() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) {
  %938 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
  %939 = cast(%938, dtype="float32") /* ty=Tensor[(9, 11, 8), float32] */;
  %940 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %941 = erf(%939) /* ty=Tensor[(9, 11, 8), float32] */;
  %942 = %940.0;
  (%941, %942)
}

def @func_8574() -> Tensor[(9, 11, 8), int32] {
  %943 = @func_6714() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %943.0
}

def @func_4451() -> Tensor[(9, 11, 8), float64] {
  %944 = @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %944.0
}

def @func_14444() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %945 = @func_6478() /* ty=Tensor[(9, 11, 8), bool] */;
  %946 = @func_11049() /* ty=Tensor[(9, 11, 8), bool] */;
  (%945, %946)
}

def @func_3781() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %947 = @func_2558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %948 = @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %949 = %947.1;
  %950 = %948.0;
  %951 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  %952 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  (%949, %950, %951, %952)
}

def @func_6797() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) {
  %953 = @func_6528() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %954 = @func_4503() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(8, 30), uint16], Tensor[(4, 60), int64]) */;
  %955 = @func_6545() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %956 = %953.1;
  %957 = @func_6586() /* ty=Tensor[(9, 11, 8), int32] */;
  %958 = %954.0;
  %959 = %955.0;
  (%956, %957, %958, %959)
}

def @func_7871() -> Tensor[(9, 11, 8), bool] {
  %960 = @func_7419() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %960.1
}

def @func_5327() -> (Tensor[(9, 11, 8), bool],) {
  %961 = @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %962 = %961.1;
  (%962,)
}

def @func_8235() -> (Tensor[(9, 11, 8), float64],) {
  %963 = @func_1147() /* ty=Tensor[(9, 11, 8), float64] */;
  (%963,)
}

def @func_10593() -> Tensor[(9, 11, 8), float64] {
  %964 = @func_7847() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %964.0
}

def @func_198(%var_188: Tensor[(7, 9, 12), uint8], %var_189: Tensor[(7, 9, 12), uint8]) -> Tensor[(7, 9, 12), uint8] {
  %965 = cast(%var_189, dtype="uint8") /* ty=Tensor[(7, 9, 12), uint8] */;
  %966 = shape_of(%var_188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %967 = cast(%var_188, dtype="uint8") /* ty=Tensor[(7, 9, 12), uint8] */;
  %968 = dyn.reshape(%965, %966, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%967, %968) /* ty=Tensor[(7, 9, 12), uint8] */
}

def @func_2409() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32]) {
  %969 = @func_1044() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %970 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %971 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %972 = %969.0;
  %973 = %970.0;
  %974 = %971.2;
  (%972, %973, %974)
}

def @func_12725() -> (Tensor[(?, 9, 13), bool], Tensor[(9, 11, 8), bool]) {
  %975 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 9, 13), uint64] */, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %976 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(1, 9, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %977 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 9, 13), uint64] */, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %978 = dyn.reshape(%975, %976, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %979 = @func_10095() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %980 = less_equal(%977, %978) /* ty=Tensor[(?, 9, 13), bool] */;
  %981 = %979.2;
  (%980, %981)
}

def @func_15968(%var_15960: Tensor[(756), uint8]) -> (Tensor[(15, 2, 1), float32], Tensor[(756), uint8], Tensor[(756), uint8]) {
  %982 = cast(%var_15960, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %983 = reshape(%982, newshape=[756]) /* ty=Tensor[(756), uint8] */;
  %984 = @func_3740(%983) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(756), uint8], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) */;
  %985 = @func_6492() /* ty=Tensor[(15, 2, 1), float32] */;
  %986 = %984.1;
  (%985, %986, %var_15960)
}

def @func_8784() -> Tensor[(9, 11, 8), bool] {
  %987 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %987.0
}

def @func_9966() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) {
  %988 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %989 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %990 = %988.0;
  %991 = %989.0;
  (%990, %991)
}

def @func_7211(%var_7207: Tensor[(6, 14, 7), float32]) -> (Tensor[(6, 14, 7), float32],) {
  %992 = cast(%var_7207, dtype="float32") /* ty=Tensor[(6, 14, 7), float32] */;
  %993 = cosh(%992) /* ty=Tensor[(6, 14, 7), float32] */;
  (%993,)
}

def @func_4777() -> (Tensor[(8, 30), float64],) {
  %994 = @func_4538() /* ty=Tensor[(8, 30), float64] */;
  (%994,)
}

def @func_1697() -> (Tensor[(9, 11, 8), bool],) {
  %995 = @func_1044() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %996 = %995.0;
  (%996,)
}

def @func_8760() -> (Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), bool]) {
  %997 = @func_4804() /* ty=(Tensor[(6, 15, 15), float64],) */;
  %998 = %997.0;
  %999 = @func_5634() /* ty=Tensor[(9, 11, 8), bool] */;
  (%998, %999)
}

def @func_4740() -> (Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int16], Tensor[(8, 30), float64]) {
  %1000 = @func_2778() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %1001 = @func_4669() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float32]) */;
  %1002 = @func_2430() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %1003 = %1000.0;
  %1004 = %1001.3;
  %1005 = %1002.0;
  %1006 = @func_4538() /* ty=Tensor[(8, 30), float64] */;
  (%1003, %1004, %1005, %1006)
}

def @func_12112() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(8, 30), float64]) {
  %1007 = @func_4777() /* ty=(Tensor[(8, 30), float64],) */;
  %1008 = @func_10593() /* ty=Tensor[(9, 11, 8), float64] */;
  %1009 = @func_5786() /* ty=Tensor[(9, 11, 8), bool] */;
  %1010 = %1007.0;
  (%1008, %1009, %1010)
}

def @func_6387(%var_6361: Tensor[(8, 30), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(792), float32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16]) {
  %1011 = cast(meta[relay.Constant][36] /* ty=Tensor[(792), float32] */, dtype="float32") /* ty=Tensor[(792), float32] */;
  %1012 = reshape(%1011, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), float32] */;
  %1013 = @func_3405(%1012) /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
  %1014 = @func_4503() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(8, 30), uint16], Tensor[(4, 60), int64]) */;
  %1015 = %1014.1;
  %1016 = cast(%1015, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %1017 = cosh(%1016) /* ty=Tensor[(8, 30), float32] */;
  %1018 = cast(%var_6361, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %1019 = shape_of(%1017, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1020 = cast(%1017, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %1021 = dyn.reshape(%1018, %1019, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1022 = @func_2430() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %1023 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %1024 = %1013.5;
  %1025 = @func_2769() /* ty=Tensor[(9, 11, 8), int32] */;
  %1026 = logical_or(%1020, %1021) /* ty=Tensor[(8, 30), bool] */;
  %1027 = %1022.0;
  %1028 = %1023.1;
  (%1024, meta[relay.Constant][36] /* ty=Tensor[(792), float32] */, %1025, %1026, %1027, %1028)
}

def @func_11416() -> Tensor[(9, 11, 8), bool] {
  %1029 = @func_7288() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1029.0
}

def @func_15819() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(8, 30), float64], Tensor[(9, 11, 8), float64]) {
  %1030 = @func_9911() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1031 = @func_14851() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32]) */;
  %1032 = %1031.1;
  %1033 = cast(%1032, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %1034 = @func_12112() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(8, 30), float64]) */;
  %1035 = @func_5225() /* ty=Tensor[(9, 11, 8), int32] */;
  %1036 = %1030.0;
  %1037 = exp(%1033) /* ty=Tensor[(8, 30), float64] */;
  %1038 = %1034.0;
  (%1035, %1036, %1037, %1038)
}

def @func_7259() -> (Tensor[(9, 11, 8), float32],) {
  %1039 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %1040 = %1039.1;
  (%1040,)
}

def @func_3405(%var_3325: Tensor[(9, 11, 8), float32]) -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) {
  %1041 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %1042 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %1043 = %1042.1;
  %1044 = cast(%var_3325, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %1045 = shape_of(%1043, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1046 = cast(%1043, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %1047 = dyn.reshape(%1044, %1045, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1048 = greater_equal(%1046, %1047) /* ty=Tensor[(9, 11, 8), bool] */;
  %1049 = cast(%1048, dtype="int16") /* ty=Tensor[(9, 11, 8), int16] */;
  %1050 = shape_of(%1043, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1051 = cast(%1043, dtype="int16") /* ty=Tensor[(9, 11, 8), int16] */;
  %1052 = dyn.reshape(%1049, %1050, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1053 = @func_2929() /* ty=(Tensor[(9, 7, 6), bool],) */;
  %1054 = @func_2145() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %1055 = @func_1044() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1056 = %1041.0;
  %1057 = right_shift(%1051, %1052) /* ty=Tensor[(9, 11, 8), int16] */;
  %1058 = @func_3106() /* ty=Tensor[(9, 11, 8), float32] */;
  %1059 = %1053.0;
  %1060 = %1054.0;
  %1061 = %1055.0;
  (%1056, %1057, %1058, %1059, %1060, %1061)
}

def @func_7288() -> (Tensor[(9, 11, 8), bool],) {
  %1062 = @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %1063 = %1062.0;
  (%1063,)
}

def @func_5895(%var_5878: Tensor[(756), uint8]) -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(9, 11, 8), int16]) {
  %1064 = cast(%var_5878, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %1065 = reshape(%1064, newshape=[756]) /* ty=Tensor[(756), uint8] */;
  %1066 = @func_3740(%1065) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(756), uint8], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) */;
  %1067 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %1068 = @func_1147() /* ty=Tensor[(9, 11, 8), float64] */;
  %1069 = %1066.3;
  %1070 = %1067.1;
  (%1068, %1069, %var_5878, %1070)
}

def @func_10952() -> (Tensor[(9, 11, 8), bool], Tensor[(6, 15, 15), float64]) {
  %1071 = @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %1072 = %1071.1;
  %1073 = @func_6144() /* ty=Tensor[(6, 15, 15), float64] */;
  (%1072, %1073)
}

def @func_2769() -> Tensor[(9, 11, 8), int32] {
  %1074 = @func_2145() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %1074.1
}

def @func_5590() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) {
  %1075 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %1076 = @func_5225() /* ty=Tensor[(9, 11, 8), int32] */;
  %1077 = %1075.0;
  (%1076, %1077)
}

def @func_12480() -> (Tensor[(9, 11, 8), float64],) {
  %1078 = @func_2229() /* ty=Tensor[(9, 11, 8), float64] */;
  (%1078,)
}

def @func_3495(%var_3431: Tensor[(16, 12, 15), float32], %var_3432: Tensor[(16, 12, 15), float32]) -> (Tensor[(16, 12, 15), float32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(10, 16, 6), float64], Tensor[(960), float64]) {
  %1079 = cast(%var_3432, dtype="float32") /* ty=Tensor[(16, 12, 15), float32] */;
  %1080 = shape_of(%var_3431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1081 = cast(%var_3431, dtype="float32") /* ty=Tensor[(16, 12, 15), float32] */;
  %1082 = dyn.reshape(%1079, %1080, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1083 = @func_2409() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32]) */;
  %1084 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %1085 = cast(meta[relay.Constant][37] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %1086 = reshape(%1085, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %1087 = add(%1081, %1082) /* ty=Tensor[(16, 12, 15), float32] */;
  %1088 = %1083.0;
  %1089 = %1084.1;
  %1090 = @func_2150(%1086) /* ty=Tensor[(10, 16, 6), float64] */;
  (%1087, %1088, %1089, %1090, meta[relay.Constant][37] /* ty=Tensor[(960), float64] */)
}

def @func_9802() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32]) {
  %1091 = @func_3781() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %1092 = @func_6545() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %1093 = %1091.1;
  %1094 = %1092.0;
  (%1093, %1094)
}

def @func_15527() -> (Tensor[(9, 11, 8), float32], Tensor[(8, 30), uint16], Tensor[(24, 10), float32]) {
  %1095 = @func_7061() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %1096 = cast(meta[relay.Constant][38] /* ty=Tensor[(24, 10), float32] */, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %1097 = reshape(%1096, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %1098 = %1095.0;
  %1099 = @func_4196(%1097) /* ty=Tensor[(8, 30), uint16] */;
  (%1098, %1099, meta[relay.Constant][38] /* ty=Tensor[(24, 10), float32] */)
}

def @func_1829() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) {
  %1100 = @func_1357() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */;
  %1101 = @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %1102 = %1100.0;
  %1103 = %1101.0;
  (%1102, %1103)
}

def @func_13806(%var_13793: float64) -> (Tensor[(9, 11, 8), bool], Tensor[(12, 15, 14), uint32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32], Tensor[(6, 3, 4), bool], float64, Tensor[(1, 72), float64], Tensor[(9, 11, 8), bool]) {
  %1104 = @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1105 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 14), float32] */;
  %1106 = asinh(%1105) /* ty=Tensor[(12, 15, 14), float32] */;
  %1107 = cast(meta[relay.Constant][39] /* ty=Tensor[(12, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 14), float32] */;
  %1108 = erf(%1107) /* ty=Tensor[(12, 15, 14), float32] */;
  %1109 = cast(%1108, dtype="uint32") /* ty=Tensor[(12, 15, 14), uint32] */;
  %1110 = shape_of(%1106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1111 = cast(%1106, dtype="uint32") /* ty=Tensor[(12, 15, 14), uint32] */;
  %1112 = dyn.reshape(%1109, %1110, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1113 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %1114 = cast(%var_13793, dtype="float64") /* ty=float64 */;
  %1115 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 72), float64] */, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
  %1116 = reshape(%1114, newshape=[]) /* ty=float64 */;
  %1117 = reshape(%1115, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float64] */;
  %1118 = @func_5512(%1116, %1117) /* ty=(Tensor[(6, 3, 4), bool], Tensor[(9, 11, 8), int16]) */;
  %1119 = @func_5468() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %1120 = %1104.0;
  %1121 = bitwise_and(%1111, %1112) /* ty=Tensor[(12, 15, 14), uint32] */;
  %1122 = @func_2769() /* ty=Tensor[(9, 11, 8), int32] */;
  %1123 = %1113.2;
  %1124 = %1118.0;
  %1125 = %1119.0;
  (%1120, %1121, %1122, %1123, %1124, %var_13793, meta[relay.Constant][40] /* ty=Tensor[(1, 72), float64] */, %1125)
}

def @func_6229() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32]) {
  %1126 = @func_5455() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1127 = %1126.0;
  %1128 = @func_5225() /* ty=Tensor[(9, 11, 8), int32] */;
  (%1127, %1128)
}

def @func_15553(%var_15540: Tensor[(6, 14, 12), float64]) -> Tensor[(6, 14, 12), float32] {
  %1129 = cast(%var_15540, dtype="float64") /* ty=Tensor[(6, 14, 12), float64] */;
  %1130 = sqrt(%1129) /* ty=Tensor[(6, 14, 12), float64] */;
  %1131 = cast(%1130, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
  acosh(%1131) /* ty=Tensor[(6, 14, 12), float32] */
}

def @func_5634() -> Tensor[(9, 11, 8), bool] {
  %1132 = @func_5590() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) */;
  %1132.1
}

def @func_9751() -> (Tensor[(9, 11, 8), int32],) {
  %1133 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %1134 = %1133.0;
  (%1134,)
}

def @func_9343(%var_9323: Tensor[(588), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(6, 14, 7), float32], Tensor[(588), float32], Tensor[(9, 11, 8), bool]) {
  %1135 = @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %1136 = cast(%var_9323, dtype="float32") /* ty=Tensor[(588), float32] */;
  %1137 = reshape(%1136, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
  %1138 = @func_7211(%1137) /* ty=(Tensor[(6, 14, 7), float32],) */;
  %1139 = @func_5327() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1140 = %1135.0;
  %1141 = %1138.0;
  %1142 = %1139.0;
  (%1140, %1141, %var_9323, %1142)
}

def @func_5097(%var_5059: Tensor[(8, 30), float64], %var_5076: Tensor[(9, 84), uint8]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 84), uint8], Tensor[(9, 11, 8), uint16], Tensor[(8, 30), bool]) {
  %1143 = @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %1144 = cast(%var_5076, dtype="uint8") /* ty=Tensor[(9, 84), uint8] */;
  %1145 = reshape(%1144, newshape=[3, 252]) /* ty=Tensor[(3, 252), uint8] */;
  %1146 = @func_2853(%1145) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(3, 252), uint8], Tensor[(9, 11, 8), float32]) */;
  %1147 = @func_4149() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), uint16]) */;
  %1148 = @func_4538() /* ty=Tensor[(8, 30), float64] */;
  %1149 = cast(%var_5059, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %1150 = shape_of(%1148, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1151 = cast(%1148, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %1152 = dyn.reshape(%1149, %1150, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1153 = floor_divide(%1151, %1152) /* ty=Tensor[(8, 30), float64] */;
  %1154 = cast(%1153, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %1155 = asinh(%1154) /* ty=Tensor[(8, 30), float64] */;
  %1156 = cast(%1155, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %1157 = atanh(%1156) /* ty=Tensor[(8, 30), float64] */;
  %1158 = cast(%var_5059, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %1159 = shape_of(%1157, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1160 = cast(%1157, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %1161 = dyn.reshape(%1158, %1159, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1162 = %1143.1;
  %1163 = %1146.0;
  %1164 = %1147.1;
  %1165 = less_equal(%1160, %1161) /* ty=Tensor[(8, 30), bool] */;
  (%1162, %1163, %var_5076, %1164, %1165)
}

def @func_12245() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16]) {
  %1166 = @func_7591() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32]) */;
  %1167 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %1168 = %1166.0;
  %1169 = %1167.1;
  (%1168, %1169)
}

def @func_7183() -> (Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32], Tensor[(3, 16, 3), int64], Tensor[(144), float32], Tensor[(7, 9, 12), uint8], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) {
  %1170 = @func_5673() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %1171 = cast(meta[relay.Constant][41] /* ty=Tensor[(8, 30), float32] */, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %1172 = reshape(%1171, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %1173 = @func_1971(%1172) /* ty=(Tensor[(8, 30), float32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(8, 30), uint16], Tensor[(7, 9, 12), uint8]) */;
  %1174 = cast(meta[relay.Constant][42] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %1175 = reshape(%1174, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), float32] */;
  %1176 = @func_6090(%1175) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(3, 16, 3), int64]) */;
  %1177 = %1173.1;
  %1178 = cast(%1177, dtype="uint8") /* ty=Tensor[(7, 9, 12), uint8] */;
  %1179 = cast(%1177, dtype="uint8") /* ty=Tensor[(7, 9, 12), uint8] */;
  %1180 = reshape(%1178, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
  %1181 = reshape(%1179, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
  %1182 = @func_5558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
  %1183 = @func_5291() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %1184 = %1170.0;
  %1185 = %1176.1;
  %1186 = @func_198(%1180, %1181) /* ty=Tensor[(7, 9, 12), uint8] */;
  %1187 = %1182.0;
  %1188 = %1183.1;
  (%1184, %1177, meta[relay.Constant][41] /* ty=Tensor[(8, 30), float32] */, %1185, meta[relay.Constant][42] /* ty=Tensor[(144), float32] */, %1186, %1187, %1188)
}

def @func_3106() -> Tensor[(9, 11, 8), float32] {
  %1189 = @func_2778() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %1189.0
}

def @func_10873() -> (Tensor[(9, 11, 8), int16],) {
  %1190 = @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %1191 = %1190.0;
  (%1191,)
}

def @func_12664() -> (Tensor[(9, 11, 8), bool],) {
  %1192 = @func_11416() /* ty=Tensor[(9, 11, 8), bool] */;
  (%1192,)
}

def @func_7061() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) {
  %1193 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %1194 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %1195 = %1193.1;
  %1196 = %1194.0;
  (%1195, %1196)
}

def @func_7591() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32]) {
  %1197 = @func_6797() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %1198 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %1199 = %1197.1;
  %1200 = %1198.0;
  (%1199, %1200)
}

def @func_14570(%var_14510: Tensor[(16, 3, 15), uint16], %var_14511: Tensor[(16, 3, 15), uint16]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(224), int32], Tensor[(16, 3, 15), uint8], Tensor[(9, 11, 8), int32]) {
  %1201 = cast(meta[relay.Constant][43] /* ty=Tensor[(224), int32] */, dtype="int32") /* ty=Tensor[(224), int32] */;
  %1202 = reshape(%1201, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), int32] */;
  %1203 = @func_10528(%1202) /* ty=(Tensor[(4, 14, 4), bool], Tensor[(9, 11, 8), int16], Tensor[(4, 14, 4), bool]) */;
  %1204 = cast(%var_14511, dtype="uint16") /* ty=Tensor[(16, 3, 15), uint16] */;
  %1205 = shape_of(%var_14510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1206 = cast(%var_14510, dtype="uint16") /* ty=Tensor[(16, 3, 15), uint16] */;
  %1207 = dyn.reshape(%1204, %1205, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1208 = multiply(%1206, %1207) /* ty=Tensor[(16, 3, 15), uint16] */;
  %1209 = cast(%1208, dtype="float32") /* ty=Tensor[(16, 3, 15), float32] */;
  %1210 = shape_of(%var_14511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1211 = cast(%var_14511, dtype="float32") /* ty=Tensor[(16, 3, 15), float32] */;
  %1212 = dyn.reshape(%1209, %1210, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1213 = floor_divide(%1211, %1212) /* ty=Tensor[(16, 3, 15), float32] */;
  %1214 = cast(%1213, dtype="float32") /* ty=Tensor[(16, 3, 15), float32] */;
  %1215 = asin(%1214) /* ty=Tensor[(16, 3, 15), float32] */;
  %1216 = cast(%1208, dtype="uint8") /* ty=Tensor[(16, 3, 15), uint8] */;
  %1217 = shape_of(%1215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1218 = cast(%1215, dtype="uint8") /* ty=Tensor[(16, 3, 15), uint8] */;
  %1219 = dyn.reshape(%1216, %1217, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1220 = @func_7591() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32]) */;
  %1221 = @func_8784() /* ty=Tensor[(9, 11, 8), bool] */;
  %1222 = %1203.1;
  %1223 = maximum(%1218, %1219) /* ty=Tensor[(16, 3, 15), uint8] */;
  %1224 = %1220.1;
  (%1221, %1222, meta[relay.Constant][43] /* ty=Tensor[(224), int32] */, %1223, %1224)
}

def @func_12450(%var_12436: Tensor[(10, 14, 3), int16], %var_12437: Tensor[(10, 14, 3), int16]) -> (Tensor[(10, 14, 3), int16], Tensor[(9, 11, 8), bool]) {
  %1225 = cast(%var_12437, dtype="int16") /* ty=Tensor[(10, 14, 3), int16] */;
  %1226 = shape_of(%var_12436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1227 = cast(%var_12436, dtype="int16") /* ty=Tensor[(10, 14, 3), int16] */;
  %1228 = dyn.reshape(%1225, %1226, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1229 = @func_7288() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1230 = minimum(%1227, %1228) /* ty=Tensor[(10, 14, 3), int16] */;
  %1231 = %1229.0;
  (%1230, %1231)
}

def @func_13703() -> (Tensor[(8, 30), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), int16]) {
  %1232 = @func_4823() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
  %1233 = @func_12788() /* ty=(Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), bool]) */;
  %1234 = @func_4823() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
  %1235 = @func_12025() /* ty=Tensor[(8, 30), float32] */;
  %1236 = %1232.0;
  %1237 = %1233.0;
  %1238 = %1234.1;
  (%1235, %1236, %1237, %1238)
}

def @func_7090() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %1239 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %1240 = @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1241 = %1239.0;
  %1242 = @func_6478() /* ty=Tensor[(9, 11, 8), bool] */;
  %1243 = %1240.0;
  (%1241, %1242, %1243)
}

def @func_3259(%var_3237: Tensor[(756), uint8], %var_3238: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int16], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(240), float32]) {
  %1244 = @func_2430() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %1245 = cast(%var_3237, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %1246 = cast(%var_3238, dtype="float32") /* ty=Tensor[(240), float32] */;
  %1247 = reshape(%1245, newshape=[54, 14]) /* ty=Tensor[(54, 14), uint8] */;
  %1248 = reshape(%1246, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %1249 = @func_3037(%1247, %1248) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(54, 14), uint8], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32]) */;
  %1250 = %1244.0;
  %1251 = %1249.2;
  (%1250, %1251, %var_3237, %var_3238)
}

def @func_6195() -> Tensor[(9, 11, 8), bool] {
  %1252 = @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1252.0
}

def @func_17000() -> Tensor[(8, 30), float32] {
  %1253 = @func_14851() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32]) */;
  %1253.1
}

def @func_3755() -> (Tensor[(6, 15, 15), float64],) {
  %1254 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 15, 15), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 15), float64] */;
  %1255 = atanh(%1254) /* ty=Tensor[(6, 15, 15), float64] */;
  (%1255,)
}

def @func_14233() -> Tensor[(9, 11, 8), float64] {
  %1256 = @func_9832() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) */;
  %1256.0
}

def @func_12077() -> Tensor[(9, 11, 8), int32] {
  @func_11898() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_9614(%var_9560: Tensor[(91, 1), uint64]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64], Tensor[(240), float32], Tensor[(91, 1), uint64], Tensor[(240), float32], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(6, 15, 15), bool], Tensor[(9, 11, 8), int16]) {
  %1257 = @func_7090() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %1258 = cast(%var_9560, dtype="uint64") /* ty=Tensor[(91, 1), uint64] */;
  %1259 = cast(meta[relay.Constant][45] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %1260 = reshape(%1258, newshape=[91]) /* ty=Tensor[(91), uint64] */;
  %1261 = reshape(%1259, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %1262 = @func_2695(%1260, %1261) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(3, 7, 13), uint8], Tensor[(91), uint64], Tensor[(273), uint64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(240), float32]) */;
  %1263 = @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1264 = @func_4503() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(8, 30), uint16], Tensor[(4, 60), int64]) */;
  %1265 = @func_4804() /* ty=(Tensor[(6, 15, 15), float64],) */;
  %1266 = %1265.0;
  %1267 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 15, 15), float64] */, dtype="bool") /* ty=Tensor[(6, 15, 15), bool] */;
  %1268 = shape_of(%1266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1269 = cast(%1266, dtype="bool") /* ty=Tensor[(6, 15, 15), bool] */;
  %1270 = dyn.reshape(%1267, %1268, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1271 = @func_2430() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %1272 = %1257.1;
  %1273 = @func_1147() /* ty=Tensor[(9, 11, 8), float64] */;
  %1274 = %1262.6;
  %1275 = @func_2769() /* ty=Tensor[(9, 11, 8), int32] */;
  %1276 = %1263.0;
  %1277 = %1264.0;
  %1278 = not_equal(%1269, %1270) /* ty=Tensor[(6, 15, 15), bool] */;
  %1279 = %1271.0;
  (%1272, %1273, %1274, %var_9560, meta[relay.Constant][45] /* ty=Tensor[(240), float32] */, %1275, %1276, %1277, %1278, %1279)
}

def @func_5623() -> (Tensor[(9, 11, 8), bool],) {
  %1280 = @func_2409() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32]) */;
  %1281 = %1280.0;
  (%1281,)
}

def @func_5558() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) {
  %1282 = @func_4761() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
  %1283 = @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %1284 = %1282.0;
  %1285 = %1283.0;
  (%1284, %1285)
}

def @func_1357() -> (Tensor[(9, 11, 8), bool], Tensor[(576), int32]) {
  %1286 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %1287 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  %1288 = %1286.1;
  (%1287, %1288)
}

def @func_11898() -> Tensor[(9, 11, 8), int32] {
  @func_5225() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_2472() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) {
  %1289 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %1290 = %1289.0;
  %1291 = @func_1497() /* ty=Tensor[(9, 11, 8), float32] */;
  (%1290, %1291)
}

def @func_16125(%var_16118: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(240), float32]) {
  %1292 = @func_14672() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(9, 11, 8), int32]) */;
  %1293 = cast(%var_16118, dtype="float32") /* ty=Tensor[(240), float32] */;
  %1294 = reshape(%1293, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %1295 = @func_11247(%1294) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(240), float32], Tensor[(9, 11, 8), bool]) */;
  %1296 = %1292.3;
  %1297 = %1295.0;
  (%1296, %1297, %var_16118)
}

def @func_11080(%var_11060: Tensor[(5, 2, 14), int64]) -> (Tensor[(5, 2, 14), int64], Tensor[(9, 11, 8), float64]) {
  %1298 = cast(-10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %1299 = cast(%var_11060, dtype="int64") /* ty=Tensor[(5, 2, 14), int64] */;
  %1300 = @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %1301 = bitwise_and(%1298, %1299) /* ty=Tensor[(5, 2, 14), int64] */;
  %1302 = %1300.0;
  (%1301, %1302)
}

def @func_3120() -> (Tensor[(9, 11, 8), float64],) {
  %1303 = @func_2302() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
  %1304 = %1303.0;
  (%1304,)
}

def @func_4503() -> (Tensor[(9, 11, 8), bool], Tensor[(8, 30), uint16], Tensor[(4, 60), int64]) {
  %1305 = @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %1306 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 60), float32] */, dtype="float32") /* ty=Tensor[(4, 60), float32] */;
  %1307 = reshape(%1306, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %1308 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 60), float32] */, dtype="float64") /* ty=Tensor[(4, 60), float64] */;
  %1309 = acosh(%1308) /* ty=Tensor[(4, 60), float64] */;
  %1310 = cast(%1309, dtype="float64") /* ty=Tensor[(4, 60), float64] */;
  %1311 = log10(%1310) /* ty=Tensor[(4, 60), float64] */;
  %1312 = cast(%1311, dtype="bool") /* ty=Tensor[(4, 60), bool] */;
  %1313 = shape_of(%1309, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1314 = cast(%1309, dtype="bool") /* ty=Tensor[(4, 60), bool] */;
  %1315 = dyn.reshape(%1312, %1313, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1316 = logical_or(%1314, %1315) /* ty=Tensor[(4, 60), bool] */;
  %1317 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 60), float32] */, dtype="int64") /* ty=Tensor[(4, 60), int64] */;
  %1318 = shape_of(%1316, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1319 = cast(%1316, dtype="int64") /* ty=Tensor[(4, 60), int64] */;
  %1320 = dyn.reshape(%1317, %1318, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %1321 = %1305.1;
  %1322 = @func_4196(%1307) /* ty=Tensor[(8, 30), uint16] */;
  %1323 = minimum(%1319, %1320) /* ty=Tensor[(4, 60), int64] */;
  (%1321, %1322, %1323)
}

def @func_15294(%var_15292: Tensor[(2, 1120), float32]) -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32], Tensor[(2, 1120), float32]) {
  %1324 = @func_7061() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %1325 = cast(%var_15292, dtype="float32") /* ty=Tensor[(2, 1120), float32] */;
  %1326 = cast(%var_15292, dtype="float32") /* ty=Tensor[(2, 1120), float32] */;
  %1327 = reshape(%1325, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
  %1328 = reshape(%1326, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
  %1329 = @func_10033(%1327, %1328) /* ty=(Tensor[(16, 10, 14), bool], Tensor[(16, 10, 14), uint8], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int32]) */;
  %1330 = %1324.0;
  %1331 = %1329.3;
  (%1330, %1331, %var_15292)
}

def @func_2302() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) {
  %1332 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %1333 = %1332.0;
  %1334 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  (%1333, %1334)
}

def @func_15705(%var_15693: Tensor[(972), float64]) -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32], Tensor[(972), float32]) {
  %1335 = @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %1336 = cast(%var_15693, dtype="float64") /* ty=Tensor[(972), float64] */;
  %1337 = reshape(%1336, newshape=[972]) /* ty=Tensor[(972), float64] */;
  %1338 = @func_13440(%1337) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float32], Tensor[(12, 9, 9), float64], Tensor[(972), float64]) */;
  %1339 = cast(%var_15693, dtype="float32") /* ty=Tensor[(972), float32] */;
  %1340 = %1335.0;
  %1341 = %1338.0;
  %1342 = cosh(%1339) /* ty=Tensor[(972), float32] */;
  (%1340, %1341, %1342)
}

def @func_7794() -> Tensor[(9, 11, 8), int16] {
  %1343 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %1343.1
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7329() -> Tensor[(9, 11, 8), int16] {
  @func_7327() /* ty=Tensor[(9, 11, 8), int16] */
}

def @func_4671() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float32]) {
  @func_4669() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float32]) */
}

def @func_12138() -> (Tensor[(9, 11, 8), float64],) {
  %0 = @func_3619() /* ty=Tensor[(9, 11, 8), float64] */;
  (%0,)
}

def @func_12584() -> (Tensor[(9, 11, 8), int32],) {
  %1 = @func_5225() /* ty=Tensor[(9, 11, 8), int32] */;
  (%1,)
}

def @func_14370(%var_14336: Tensor[(1, 5, 6), float64]) -> (Tensor[(1, 5, 6), float64], Tensor[(9, 11, 8), bool]) {
  %2 = cast(%var_14336, dtype="float64") /* ty=Tensor[(1, 5, 6), float64] */;
  %3 = @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %4 = acos(%2) /* ty=Tensor[(1, 5, 6), float64] */;
  %5 = %3.0;
  (%4, %5)
}

def @func_16459() -> Tensor[(9, 11, 8), int16] {
  %6 = @func_8602() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %6.0
}

def @func_16840(%var_16839: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(240), float32], Tensor[(9, 11, 8), float64]) {
  %14 = fn (%var_16832: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(240), float32], Tensor[(9, 11, 8), float64]) {
    %7 = cast(%var_16832, dtype="float32") /* ty=Tensor[(240), float32] */;
    %8 = reshape(%7, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %9 = @func_16125(%8) /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(240), float32]) */;
    %10 = @func_9723() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
    %11 = @func_5786() /* ty=Tensor[(9, 11, 8), bool] */;
    %12 = %9.0;
    %13 = %10.4;
    (%11, %12, %var_16832, %13)
  };
  %14(%var_16839) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(240), float32], Tensor[(9, 11, 8), float64]) */
}

def @func_16208() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(30), float64]) {
  %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %16 = reshape(%15, newshape=[1, 5, 6]) /* ty=Tensor[(1, 5, 6), float64] */;
  %17 = @func_14370(%16) /* ty=(Tensor[(1, 5, 6), float64], Tensor[(9, 11, 8), bool]) */;
  %18 = @func_11186() /* ty=Tensor[(9, 11, 8), int16] */;
  %19 = %17.1;
  (%18, %19, meta[relay.Constant][0] /* ty=Tensor[(30), float64] */)
}

def @func_2146() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) {
  %23 = fn () -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) {
    %20 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
    %21 = @func_1497() /* ty=Tensor[(9, 11, 8), float32] */;
    %22 = %20.0;
    (%21, %22)
  };
  %23() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */
}

def @func_4151() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), uint16]) {
  @func_4149() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), uint16]) */
}

def @func_3588(%var_3587: Tensor[(960), float64]) -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(9, 7, 6), bool]) {
  %33 = fn (%var_3569: Tensor[(960), float64]) -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(9, 7, 6), bool]) {
    %24 = @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */;
    %25 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
    %26 = cast(%var_3569, dtype="float64") /* ty=Tensor[(960), float64] */;
    %27 = reshape(%26, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
    %28 = @func_2929() /* ty=(Tensor[(9, 7, 6), bool],) */;
    %29 = %24.0;
    %30 = %25.0;
    %31 = @func_2150(%27) /* ty=Tensor[(10, 16, 6), float64] */;
    %32 = %28.0;
    (%29, %30, %31, %var_3569, %32)
  };
  %33(%var_3587) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(9, 7, 6), bool]) */
}

def @func_7288() -> (Tensor[(9, 11, 8), bool],) {
  %34 = @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %35 = %34.0;
  (%35,)
}

def @func_134(%var_55: Tensor[(6, 8, 12), int32], %var_56: Tensor[(6, 8, 12), int32], %var_86: Tensor[(6, 8, 12), int32], %var_122: Tensor[(6, 8, 12), float64]) -> (Tensor[(6, 8, 12), float64], Tensor[(6, 8, 12), bool], Tensor[(6, 8, 12), float64]) {
  %36 = cast(%var_55, dtype="float64") /* ty=Tensor[(6, 8, 12), float64] */;
  %37 = cast(%var_86, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %38 = shape_of(%var_55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%var_55, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %41 = cast(%var_56, dtype="int32") /* ty=Tensor[(6, 8, 12), int32] */;
  %42 = shape_of(%var_55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%var_55, dtype="int32") /* ty=Tensor[(6, 8, 12), int32] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %45 = subtract(%43, %44) /* ty=Tensor[(6, 8, 12), int32] */;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(6, 8, 12), float64] */;
  %47 = tan(%46) /* ty=Tensor[(6, 8, 12), float64] */;
  %48 = cast(%var_122, dtype="float64") /* ty=Tensor[(6, 8, 12), float64] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="float64") /* ty=Tensor[(6, 8, 12), float64] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %52 = log10(%36) /* ty=Tensor[(6, 8, 12), float64] */;
  %53 = logical_or(%39, %40) /* ty=Tensor[(6, 8, 12), bool] */;
  %54 = power(%50, %51) /* ty=Tensor[(6, 8, 12), float64] */;
  (%52, %53, %54)
}

def @func_2472() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) {
  %55 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %56 = %55.0;
  %57 = @func_1497() /* ty=Tensor[(9, 11, 8), float32] */;
  (%56, %57)
}

def @func_6588() -> Tensor[(9, 11, 8), int32] {
  @func_6586() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_15971(%var_15969: Tensor[(756), uint8]) -> (Tensor[(15, 2, 1), float32], Tensor[(756), uint8], Tensor[(756), uint8]) {
  @func_15968(%var_15969) /* ty=(Tensor[(15, 2, 1), float32], Tensor[(756), uint8], Tensor[(756), uint8]) */
}

def @func_9096() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16]) {
  %65 = fn () -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16]) {
    %58 = @func_5590() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) */;
    %59 = @func_5468() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
    %60 = @func_7010() /* ty=(Tensor[(9, 11, 8), int16],) */;
    %61 = @func_8574() /* ty=Tensor[(9, 11, 8), int32] */;
    %62 = %58.1;
    %63 = %59.1;
    %64 = %60.0;
    (%61, %62, %63, %64)
  };
  %65() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16]) */
}

def @func_12567() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16]) {
  %70 = fn () -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16]) {
    %66 = @func_8054() /* ty=(Tensor[(8, 30), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(91), uint64], Tensor[(8, 30), float64]) */;
    %67 = @func_12334() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
    %68 = %66.1;
    %69 = %67.1;
    (%68, %69)
  };
  %70() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16]) */
}

def @func_3259(%var_3237: Tensor[(756), uint8], %var_3238: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int16], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(240), float32]) {
  %71 = @func_2430() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %72 = cast(%var_3237, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %73 = cast(%var_3238, dtype="float32") /* ty=Tensor[(240), float32] */;
  %74 = reshape(%72, newshape=[54, 14]) /* ty=Tensor[(54, 14), uint8] */;
  %75 = reshape(%73, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %76 = @func_3037(%74, %75) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(54, 14), uint8], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32]) */;
  %77 = %71.0;
  %78 = %76.2;
  (%77, %78, %var_3237, %var_3238)
}

def @func_3499(%var_3497: Tensor[(16, 12, 15), float32], %var_3498: Tensor[(16, 12, 15), float32]) -> (Tensor[(16, 12, 15), float32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(10, 16, 6), float64], Tensor[(960), float64]) {
  @func_3495(%var_3497, %var_3498) /* ty=(Tensor[(16, 12, 15), float32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(10, 16, 6), float64], Tensor[(960), float64]) */
}

def @func_4741() -> (Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int16], Tensor[(8, 30), float64]) {
  %86 = fn () -> (Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int16], Tensor[(8, 30), float64]) {
    %79 = @func_2778() /* ty=(Tensor[(9, 11, 8), float32],) */;
    %80 = @func_4669() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float32]) */;
    %81 = @func_2430() /* ty=(Tensor[(9, 11, 8), int16],) */;
    %82 = %79.0;
    %83 = %80.3;
    %84 = %81.0;
    %85 = @func_4538() /* ty=Tensor[(8, 30), float64] */;
    (%82, %83, %84, %85)
  };
  %86() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int16], Tensor[(8, 30), float64]) */
}

def @func_11899() -> Tensor[(9, 11, 8), int32] {
  %87 = fn () -> Tensor[(9, 11, 8), int32] {
    @func_5225() /* ty=Tensor[(9, 11, 8), int32] */
  };
  %87() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_12790() -> (Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), bool]) {
  @func_12788() /* ty=(Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), bool]) */
}

def @func_8426() -> (Tensor[(9, 11, 8), int16], Tensor[(12, 9, 9), float64], Tensor[(162, 6), float64], Tensor[(6, 15, 15), bool], Tensor[(9, 11, 8), int16], Tensor[(240), float32]) {
  %104 = fn () -> (Tensor[(9, 11, 8), int16], Tensor[(12, 9, 9), float64], Tensor[(162, 6), float64], Tensor[(6, 15, 15), bool], Tensor[(9, 11, 8), int16], Tensor[(240), float32]) {
    %88 = cast(meta[relay.Constant][1] /* ty=Tensor[(162, 6), float64] */, dtype="float64") /* ty=Tensor[(162, 6), float64] */;
    %89 = reshape(%88, newshape=[12, 9, 9]) /* ty=Tensor[(12, 9, 9), float64] */;
    %90 = @func_6144() /* ty=Tensor[(6, 15, 15), float64] */;
    %91 = cast(%90, dtype="float64") /* ty=Tensor[(6, 15, 15), float64] */;
    %92 = acosh(%91) /* ty=Tensor[(6, 15, 15), float64] */;
    %93 = cast(%90, dtype="bool") /* ty=Tensor[(6, 15, 15), bool] */;
    %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
    %95 = cast(%92, dtype="bool") /* ty=Tensor[(6, 15, 15), bool] */;
    %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %97 = cast(meta[relay.Constant][2] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %98 = reshape(%97, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
    %99 = @func_6387(%98) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(792), float32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16]) */;
    %100 = @func_7327() /* ty=Tensor[(9, 11, 8), int16] */;
    %101 = @func_4265(%89) /* ty=Tensor[(12, 9, 9), float64] */;
    %102 = greater(%95, %96) /* ty=Tensor[(6, 15, 15), bool] */;
    %103 = %99.5;
    (%100, %101, meta[relay.Constant][1] /* ty=Tensor[(162, 6), float64] */, %102, %103, meta[relay.Constant][2] /* ty=Tensor[(240), float32] */)
  };
  %104() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(12, 9, 9), float64], Tensor[(162, 6), float64], Tensor[(6, 15, 15), bool], Tensor[(9, 11, 8), int16], Tensor[(240), float32]) */
}

def @func_14168(%var_14125: Tensor[(7, 6, 16), uint64]) -> Tensor[(7, 6, 16), float32] {
  %105 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 1, 16), uint64] */, dtype="uint64") /* ty=Tensor[(7, 1, 16), uint64] */;
  %106 = cast(%var_14125, dtype="uint64") /* ty=Tensor[(7, 6, 16), uint64] */;
  %107 = subtract(%105, %106) /* ty=Tensor[(7, 6, 16), uint64] */;
  %108 = cast(%107, dtype="float32") /* ty=Tensor[(7, 6, 16), float32] */;
  %109 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 1, 16), uint64] */, dtype="float32") /* ty=Tensor[(7, 1, 16), float32] */;
  mod(%108, %109) /* ty=Tensor[(7, 6, 16), float32] */
}

def @func_2302() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) {
  %110 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %111 = %110.0;
  %112 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  (%111, %112)
}

def @func_5512(%var_5479: float64, %var_5480: Tensor[(6, 3, 4), float64]) -> (Tensor[(6, 3, 4), bool], Tensor[(9, 11, 8), int16]) {
  %113 = cast(%var_5479, dtype="bool") /* ty=bool */;
  %114 = cast(%var_5480, dtype="bool") /* ty=Tensor[(6, 3, 4), bool] */;
  %115 = @func_4823() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
  %116 = equal(%113, %114) /* ty=Tensor[(6, 3, 4), bool] */;
  %117 = %115.1;
  (%116, %117)
}

def @func_11908() -> Tensor[(9, 11, 8), int32] {
  %118 = @func_7591() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32]) */;
  %118.0
}

def @func_7259() -> (Tensor[(9, 11, 8), float32],) {
  %119 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %120 = %119.1;
  (%120,)
}

def @func_13062() -> (Tensor[(9, 11, 8), float32],) {
  %123 = fn () -> (Tensor[(9, 11, 8), float32],) {
    %121 = @func_9013() /* ty=(Tensor[(9, 11, 8), float32],) */;
    %122 = %121.0;
    (%122,)
  };
  %123() /* ty=(Tensor[(9, 11, 8), float32],) */
}

def @func_15445() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  @func_15443() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */
}

def @func_13234() -> (Tensor[(9, 11, 8), bool],) {
  %124 = @func_5455() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %125 = %124.0;
  (%125,)
}

def @func_15921() -> (Tensor[(8, 30), float64],) {
  %128 = fn () -> (Tensor[(8, 30), float64],) {
    %126 = @func_8054() /* ty=(Tensor[(8, 30), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(91), uint64], Tensor[(8, 30), float64]) */;
    %127 = %126.4;
    (%127,)
  };
  %128() /* ty=(Tensor[(8, 30), float64],) */
}

def @func_4451() -> Tensor[(9, 11, 8), float64] {
  %129 = @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %129.0
}

def @func_7485() -> (Tensor[(9, 11, 8), int16],) {
  %130 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
  (%130,)
}

def @func_8235() -> (Tensor[(9, 11, 8), float64],) {
  %131 = @func_1147() /* ty=Tensor[(9, 11, 8), float64] */;
  (%131,)
}

def @func_11029(%var_11027: Tensor[(15, 13, 16), float64], %var_11028: Tensor[(15, 13, 16), float64]) -> (Tensor[(15, 13, 16), uint32],) {
  %139 = fn (%var_11003: Tensor[(15, 13, 16), float64], %var_11014: Tensor[(15, 13, 16), float64]) -> (Tensor[(15, 13, 16), uint32],) {
    %132 = cast(%var_11003, dtype="float64") /* ty=Tensor[(15, 13, 16), float64] */;
    %133 = erf(%132) /* ty=Tensor[(15, 13, 16), float64] */;
    %134 = cast(%var_11014, dtype="uint32") /* ty=Tensor[(15, 13, 16), uint32] */;
    %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
    %136 = cast(%133, dtype="uint32") /* ty=Tensor[(15, 13, 16), uint32] */;
    %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %138 = subtract(%136, %137) /* ty=Tensor[(15, 13, 16), uint32] */;
    (%138,)
  };
  %139(%var_11027, %var_11028) /* ty=(Tensor[(15, 13, 16), uint32],) */
}

def @func_8574() -> Tensor[(9, 11, 8), int32] {
  %140 = @func_6714() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %140.0
}

def @func_12423() -> (Tensor[(9, 11, 8), int32],) {
  %141 = @func_8574() /* ty=Tensor[(9, 11, 8), int32] */;
  (%141,)
}

def @func_14103(%var_14102: float64) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(12, 15, 14), uint32], float64, Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) {
  %156 = fn (%var_14030: float64) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(12, 15, 14), uint32], float64, Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) {
    %142 = @func_1357() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */;
    %143 = @func_13167() /* ty=(Tensor[(9, 11, 8), float32],) */;
    %144 = cast(%var_14030, dtype="float64") /* ty=float64 */;
    %145 = reshape(%144, newshape=[]) /* ty=float64 */;
    %146 = @func_13806(%145) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(12, 15, 14), uint32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32], Tensor[(6, 3, 4), bool], float64, Tensor[(1, 72), float64], Tensor[(9, 11, 8), bool]) */;
    %147 = @func_4761() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
    %148 = @func_4242() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16]) */;
    %149 = @func_13895() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %150 = %142.0;
    %151 = %143.0;
    %152 = %146.1;
    %153 = %147.2;
    %154 = %148.0;
    %155 = %149.0;
    (%150, %151, %152, %var_14030, %153, %154, %155)
  };
  %156(%var_14102) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(12, 15, 14), uint32], float64, Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */
}

def @func_4669() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float32]) {
  %157 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %158 = @func_2302() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
  %159 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %160 = %157.0;
  %161 = %158.1;
  %162 = %159.0;
  %163 = @func_3646() /* ty=Tensor[(8, 30), float32] */;
  (%160, %161, %162, %163)
}

def @func_11931() -> Tensor[(9, 11, 8), float32] {
  @func_11929() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_14462() -> (Tensor[(9, 11, 8), bool],) {
  %164 = @func_1357() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */;
  %165 = %164.0;
  (%165,)
}

def @func_9343(%var_9323: Tensor[(588), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(6, 14, 7), float32], Tensor[(588), float32], Tensor[(9, 11, 8), bool]) {
  %166 = @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %167 = cast(%var_9323, dtype="float32") /* ty=Tensor[(588), float32] */;
  %168 = reshape(%167, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
  %169 = @func_7211(%168) /* ty=(Tensor[(6, 14, 7), float32],) */;
  %170 = @func_5327() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %171 = %166.0;
  %172 = %169.0;
  %173 = %170.0;
  (%171, %172, %var_9323, %173)
}

def @func_9346(%var_9344: Tensor[(588), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(6, 14, 7), float32], Tensor[(588), float32], Tensor[(9, 11, 8), bool]) {
  @func_9343(%var_9344) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(6, 14, 7), float32], Tensor[(588), float32], Tensor[(9, 11, 8), bool]) */
}

def @func_12078() -> Tensor[(9, 11, 8), int32] {
  %174 = fn () -> Tensor[(9, 11, 8), int32] {
    @func_11898() /* ty=Tensor[(9, 11, 8), int32] */
  };
  %174() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_1451(%var_1417: Tensor[(9, 11, 8), bool], %var_1444: Tensor[(756), uint8]) -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8]) {
  %175 = @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %176 = @func_1044() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %177 = %176.0;
  %178 = cast(%var_1417, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%177, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %182 = cast(%177, dtype="float32") /* ty=Tensor[(9, 11, 8), float32] */;
  %183 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %184 = cast(%var_1444, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %185 = cast(%var_1444, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %186 = reshape(%184, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
  %187 = reshape(%185, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
  %188 = %175.0;
  %189 = less(%180, %181) /* ty=Tensor[(9, 11, 8), bool] */;
  %190 = asinh(%182) /* ty=Tensor[(9, 11, 8), float32] */;
  %191 = %183.1;
  %192 = @func_198(%186, %187) /* ty=Tensor[(7, 9, 12), uint8] */;
  (%188, %189, %190, %191, %192, %var_1444)
}

def @func_9443() -> (Tensor[(9, 11, 8), bool],) {
  @func_9441() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_5101(%var_5099: Tensor[(8, 30), float64], %var_5100: Tensor[(9, 84), uint8]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 84), uint8], Tensor[(9, 11, 8), uint16], Tensor[(8, 30), bool]) {
  @func_5097(%var_5099, %var_5100) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 84), uint8], Tensor[(9, 11, 8), uint16], Tensor[(8, 30), bool]) */
}

def @func_7290() -> (Tensor[(9, 11, 8), bool],) {
  @func_7288() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_5745() -> (Tensor[(9, 11, 8), float32], Tensor[(6, 8, 12), float64], Tensor[(576), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), uint16]) {
  %193 = @func_2558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %194 = cast(meta[relay.Constant][4] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %195 = cast(meta[relay.Constant][4] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %196 = cast(meta[relay.Constant][4] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
  %197 = cast(meta[relay.Constant][4] /* ty=Tensor[(576), int32] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %198 = reshape(%194, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), int32] */;
  %199 = reshape(%195, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), int32] */;
  %200 = reshape(%196, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), int32] */;
  %201 = reshape(%197, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), float64] */;
  %202 = @func_134(%198, %199, %200, %201) /* ty=(Tensor[(6, 8, 12), float64], Tensor[(6, 8, 12), bool], Tensor[(6, 8, 12), float64]) */;
  %203 = @func_5157() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %204 = @func_4149() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), uint16]) */;
  %205 = %193.0;
  %206 = %202.2;
  %207 = %203.0;
  %208 = %204.1;
  (%205, %206, meta[relay.Constant][4] /* ty=Tensor[(576), int32] */, %207, %208)
}

def @func_9804() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32]) {
  @func_9802() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32]) */
}

def @func_3837() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) {
  @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */
}

def @func_2380() -> Tensor[(9, 11, 8), int16] {
  %210 = fn () -> Tensor[(9, 11, 8), int16] {
    %209 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
    %209.1
  };
  %210() /* ty=Tensor[(9, 11, 8), int16] */
}

def @func_5516(%var_5514: float64, %var_5515: Tensor[(6, 3, 4), float64]) -> (Tensor[(6, 3, 4), bool], Tensor[(9, 11, 8), int16]) {
  @func_5512(%var_5514, %var_5515) /* ty=(Tensor[(6, 3, 4), bool], Tensor[(9, 11, 8), int16]) */
}

def @func_13236() -> (Tensor[(9, 11, 8), bool],) {
  @func_13234() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_1225() -> (Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) {
  %218 = fn () -> (Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) {
    %211 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
    %212 = cast(%211, dtype="float32") /* ty=Tensor[(9, 11, 8), float32] */;
    %213 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 30), float32] */, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
    %214 = reshape(%213, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), float32] */;
    %215 = @func_414(%214) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(6, 8, 12), float64], Tensor[(576), int32]) */;
    %216 = asin(%212) /* ty=Tensor[(9, 11, 8), float32] */;
    %217 = %215.2;
    (%216, %217, meta[relay.Constant][5] /* ty=Tensor[(8, 30), float32] */)
  };
  %218() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */
}

def @func_6093(%var_6091: Tensor[(3, 16, 3), float32]) -> (Tensor[(9, 11, 8), float64], Tensor[(3, 16, 3), int64]) {
  @func_6090(%var_6091) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(3, 16, 3), int64]) */
}

def @func_15443() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %219 = @func_12664() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %220 = @func_6195() /* ty=Tensor[(9, 11, 8), bool] */;
  %221 = %219.0;
  (%220, %221)
}

def @func_6494() -> Tensor[(15, 2, 1), float32] {
  @func_6492() /* ty=Tensor[(15, 2, 1), float32] */
}

def @func_9278() -> (Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), bool]) {
  %222 = @func_2409() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32]) */;
  %223 = %222.2;
  %224 = cast(%223, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %225 = reshape(%224, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), float32] */;
  %226 = @func_414(%225) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(6, 8, 12), float64], Tensor[(576), int32]) */;
  %227 = @func_4538() /* ty=Tensor[(8, 30), float64] */;
  %228 = cast(%223, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(2), int32] */;
  %230 = cast(%227, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %232 = @func_7945() /* ty=Tensor[(9, 11, 8), float32] */;
  %233 = %226.2;
  %234 = greater(%230, %231) /* ty=Tensor[(8, 30), bool] */;
  (%232, %233, %234)
}

def @func_4505() -> (Tensor[(9, 11, 8), bool], Tensor[(8, 30), uint16], Tensor[(4, 60), int64]) {
  @func_4503() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(8, 30), uint16], Tensor[(4, 60), int64]) */
}

def @func_10282() -> (Tensor[(9, 11, 8), bool],) {
  %237 = fn () -> (Tensor[(9, 11, 8), bool],) {
    %235 = @func_10095() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
    %236 = %235.2;
    (%236,)
  };
  %237() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_1147() -> Tensor[(9, 11, 8), float64] {
  %238 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  %239 = cast(%238, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
  log(%239) /* ty=Tensor[(9, 11, 8), float64] */
}

def @func_12027() -> Tensor[(8, 30), float32] {
  @func_12025() /* ty=Tensor[(8, 30), float32] */
}

def @func_13490() -> Tensor[(9, 11, 8), int32] {
  %240 = @func_7061() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %240.1
}

def @func_10985() -> (Tensor[(9, 11, 8), bool],) {
  %241 = @func_5291() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %242 = %241.1;
  (%242,)
}

def @func_14445() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %245 = fn () -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
    %243 = @func_6478() /* ty=Tensor[(9, 11, 8), bool] */;
    %244 = @func_11049() /* ty=Tensor[(9, 11, 8), bool] */;
    (%243, %244)
  };
  %245() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */
}

def @func_9832() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) {
  %246 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %247 = @func_4601() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), uint16], Tensor[(1, 240), float32], Tensor[(9, 11, 8), float64]) */;
  %248 = %246.0;
  %249 = %247.1;
  (%248, %249)
}

def @func_7872() -> Tensor[(9, 11, 8), bool] {
  %251 = fn () -> Tensor[(9, 11, 8), bool] {
    %250 = @func_7419() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
    %250.1
  };
  %251() /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_9912() -> (Tensor[(9, 11, 8), bool],) {
  %254 = fn () -> (Tensor[(9, 11, 8), bool],) {
    %252 = @func_1357() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */;
    %253 = %252.0;
    (%253,)
  };
  %254() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_10595() -> Tensor[(9, 11, 8), float64] {
  @func_10593() /* ty=Tensor[(9, 11, 8), float64] */
}

def @func_1046() -> (Tensor[(9, 11, 8), bool],) {
  @func_1044() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_13806(%var_13793: float64) -> (Tensor[(9, 11, 8), bool], Tensor[(12, 15, 14), uint32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32], Tensor[(6, 3, 4), bool], float64, Tensor[(1, 72), float64], Tensor[(9, 11, 8), bool]) {
  %255 = @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %256 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 14), float32] */;
  %257 = asinh(%256) /* ty=Tensor[(12, 15, 14), float32] */;
  %258 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 14), float32] */;
  %259 = erf(%258) /* ty=Tensor[(12, 15, 14), float32] */;
  %260 = cast(%259, dtype="uint32") /* ty=Tensor[(12, 15, 14), uint32] */;
  %261 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%257, dtype="uint32") /* ty=Tensor[(12, 15, 14), uint32] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %264 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %265 = cast(%var_13793, dtype="float64") /* ty=float64 */;
  %266 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 72), float64] */, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
  %267 = reshape(%265, newshape=[]) /* ty=float64 */;
  %268 = reshape(%266, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float64] */;
  %269 = @func_5512(%267, %268) /* ty=(Tensor[(6, 3, 4), bool], Tensor[(9, 11, 8), int16]) */;
  %270 = @func_5468() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %271 = %255.0;
  %272 = bitwise_and(%262, %263) /* ty=Tensor[(12, 15, 14), uint32] */;
  %273 = @func_2769() /* ty=Tensor[(9, 11, 8), int32] */;
  %274 = %264.2;
  %275 = %269.0;
  %276 = %270.0;
  (%271, %272, %273, %274, %275, %var_13793, meta[relay.Constant][7] /* ty=Tensor[(1, 72), float64] */, %276)
}

def @func_16287() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) {
  @func_16285() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */
}

def @func_12946(%var_12945: Tensor[(5, 13, 1), int64]) -> (Tensor[(5, 13, ?), bool], Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), int16]) {
  %284 = fn (%var_12922: Tensor[(5, 13, 1), int64]) -> (Tensor[(5, 13, ?), bool], Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), int16]) {
    %277 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 13, 1), int64] */, dtype="bool") /* ty=Tensor[(5, 13, 1), bool] */;
    %278 = shape_of(%var_12922, dtype="int32") /* ty=Tensor[(3), int32] */;
    %279 = cast(%var_12922, dtype="bool") /* ty=Tensor[(5, 13, 1), bool] */;
    %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %281 = less_equal(%279, %280) /* ty=Tensor[(5, 13, ?), bool] */;
    %282 = @func_6649() /* ty=Tensor[(6, 15, 15), float64] */;
    %283 = @func_7327() /* ty=Tensor[(9, 11, 8), int16] */;
    (%281, %282, %283)
  };
  %284(%var_12945) /* ty=(Tensor[(5, 13, ?), bool], Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), int16]) */
}

def @func_10699() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int32]) {
  %285 = @func_5157() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %286 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %287 = %285.0;
  %288 = %286.0;
  (%287, %288)
}

def @func_12425() -> (Tensor[(9, 11, 8), int32],) {
  @func_12423() /* ty=(Tensor[(9, 11, 8), int32],) */
}

def @func_6529() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) {
  %293 = fn () -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) {
    %289 = @func_5157() /* ty=(Tensor[(9, 11, 8), int16],) */;
    %290 = @func_3781() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
    %291 = %289.0;
    %292 = %290.2;
    (%291, %292)
  };
  %293() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */
}

def @func_15065() -> (Tensor[(9, 11, 8), float64],) {
  %294 = @func_12138() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %295 = %294.0;
  (%295,)
}

def @func_10294(%var_10292: uint64, %var_10293: Tensor[(13, 3, 14), uint64]) -> Tensor[(13, 3, 14), uint64] {
  %298 = fn (%var_10286: uint64, %var_10287: Tensor[(13, 3, 14), uint64]) -> Tensor[(13, 3, 14), uint64] {
    %296 = cast(%var_10286, dtype="uint64") /* ty=uint64 */;
    %297 = cast(%var_10287, dtype="uint64") /* ty=Tensor[(13, 3, 14), uint64] */;
    bitwise_and(%296, %297) /* ty=Tensor[(13, 3, 14), uint64] */
  };
  %298(%var_10292, %var_10293) /* ty=Tensor[(13, 3, 14), uint64] */
}

def @func_3120() -> (Tensor[(9, 11, 8), float64],) {
  %299 = @func_2302() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
  %300 = %299.0;
  (%300,)
}

def @func_11372() -> Tensor[(9, 11, 8), float32] {
  @func_11370() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_10954() -> (Tensor[(9, 11, 8), bool], Tensor[(6, 15, 15), float64]) {
  @func_10952() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(6, 15, 15), float64]) */
}

def @func_6023() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) {
  %301 = @func_4761() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
  %302 = %301.1;
  %303 = @func_5786() /* ty=Tensor[(9, 11, 8), bool] */;
  (%302, %303)
}

def @func_6230() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32]) {
  %307 = fn () -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32]) {
    %304 = @func_5455() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %305 = %304.0;
    %306 = @func_5225() /* ty=Tensor[(9, 11, 8), int32] */;
    (%305, %306)
  };
  %307() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32]) */
}

def @func_3781() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %308 = @func_2558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %309 = @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %310 = %308.1;
  %311 = %309.0;
  %312 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  %313 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  (%310, %311, %312, %313)
}

def @func_6574() -> Tensor[(9, 11, 8), bool] {
  %315 = fn () -> Tensor[(9, 11, 8), bool] {
    %314 = @func_1697() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %314.0
  };
  %315() /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_13014() -> Tensor[(9, 11, 8), int32] {
  %316 = @func_6714() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %316.0
}

def @func_9614(%var_9560: Tensor[(91, 1), uint64]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64], Tensor[(240), float32], Tensor[(91, 1), uint64], Tensor[(240), float32], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(6, 15, 15), bool], Tensor[(9, 11, 8), int16]) {
  %317 = @func_7090() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %318 = cast(%var_9560, dtype="uint64") /* ty=Tensor[(91, 1), uint64] */;
  %319 = cast(meta[relay.Constant][9] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %320 = reshape(%318, newshape=[91]) /* ty=Tensor[(91), uint64] */;
  %321 = reshape(%319, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %322 = @func_2695(%320, %321) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(3, 7, 13), uint8], Tensor[(91), uint64], Tensor[(273), uint64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(240), float32]) */;
  %323 = @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %324 = @func_4503() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(8, 30), uint16], Tensor[(4, 60), int64]) */;
  %325 = @func_4804() /* ty=(Tensor[(6, 15, 15), float64],) */;
  %326 = %325.0;
  %327 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 15, 15), float64] */, dtype="bool") /* ty=Tensor[(6, 15, 15), bool] */;
  %328 = shape_of(%326, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%326, dtype="bool") /* ty=Tensor[(6, 15, 15), bool] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %331 = @func_2430() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %332 = %317.1;
  %333 = @func_1147() /* ty=Tensor[(9, 11, 8), float64] */;
  %334 = %322.6;
  %335 = @func_2769() /* ty=Tensor[(9, 11, 8), int32] */;
  %336 = %323.0;
  %337 = %324.0;
  %338 = not_equal(%329, %330) /* ty=Tensor[(6, 15, 15), bool] */;
  %339 = %331.0;
  (%332, %333, %334, %var_9560, meta[relay.Constant][9] /* ty=Tensor[(240), float32] */, %335, %336, %337, %338, %339)
}

def @func_6694() -> (Tensor[(9, 11, 8), float32],) {
  %341 = fn () -> (Tensor[(9, 11, 8), float32],) {
    %340 = @func_1497() /* ty=Tensor[(9, 11, 8), float32] */;
    (%340,)
  };
  %341() /* ty=(Tensor[(9, 11, 8), float32],) */
}

def @func_7849() -> (Tensor[(9, 11, 8), float64],) {
  @func_7847() /* ty=(Tensor[(9, 11, 8), float64],) */
}

def @func_1336() -> (Tensor[(9, 11, 8), int16],) {
  @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */
}

def @func_10987() -> (Tensor[(9, 11, 8), bool],) {
  @func_10985() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_9227() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %345 = fn () -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
    %342 = @func_7032() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %343 = %342.0;
    %344 = @func_6573() /* ty=Tensor[(9, 11, 8), bool] */;
    (%343, %344)
  };
  %345() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */
}

def @func_15529() -> (Tensor[(9, 11, 8), float32], Tensor[(8, 30), uint16], Tensor[(24, 10), float32]) {
  @func_15527() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(8, 30), uint16], Tensor[(24, 10), float32]) */
}

def @func_416(%var_415: Tensor[(6, 10, 4), float32]) -> (Tensor[(6, 10, 4), float32], Tensor[(6, 8, 12), float64], Tensor[(576), int32]) {
  %358 = fn (%var_377: Tensor[(6, 10, 4), float32]) -> (Tensor[(6, 10, 4), float32], Tensor[(6, 8, 12), float64], Tensor[(576), int32]) {
    %346 = cast(%var_377, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
    %347 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
    %348 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
    %349 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), int32] */, dtype="int32") /* ty=Tensor[(576), int32] */;
    %350 = cast(meta[relay.Constant][11] /* ty=Tensor[(576), int32] */, dtype="float64") /* ty=Tensor[(576), float64] */;
    %351 = reshape(%347, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), int32] */;
    %352 = reshape(%348, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), int32] */;
    %353 = reshape(%349, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), int32] */;
    %354 = reshape(%350, newshape=[6, 8, 12]) /* ty=Tensor[(6, 8, 12), float64] */;
    %355 = @func_134(%351, %352, %353, %354) /* ty=(Tensor[(6, 8, 12), float64], Tensor[(6, 8, 12), bool], Tensor[(6, 8, 12), float64]) */;
    %356 = cosh(%346) /* ty=Tensor[(6, 10, 4), float32] */;
    %357 = %355.2;
    (%356, %357, meta[relay.Constant][11] /* ty=Tensor[(576), int32] */)
  };
  %358(%var_415) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(6, 8, 12), float64], Tensor[(576), int32]) */
}

def @func_5468() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) {
  %359 = @func_5291() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %360 = @func_2778() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %361 = %359.0;
  %362 = %360.0;
  (%361, %362)
}

def @func_8760() -> (Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), bool]) {
  %363 = @func_4804() /* ty=(Tensor[(6, 15, 15), float64],) */;
  %364 = %363.0;
  %365 = @func_5634() /* ty=Tensor[(9, 11, 8), bool] */;
  (%364, %365)
}

def @func_16285() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) {
  %366 = @func_8235() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %367 = %366.0;
  %368 = @func_6195() /* ty=Tensor[(9, 11, 8), bool] */;
  (%367, %368)
}

def @func_3756() -> (Tensor[(6, 15, 15), float64],) {
  %371 = fn () -> (Tensor[(6, 15, 15), float64],) {
    %369 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 15, 15), float64] */, dtype="float64") /* ty=Tensor[(6, 15, 15), float64] */;
    %370 = atanh(%369) /* ty=Tensor[(6, 15, 15), float64] */;
    (%370,)
  };
  %371() /* ty=(Tensor[(6, 15, 15), float64],) */
}

def @func_8237() -> (Tensor[(9, 11, 8), float64],) {
  @func_8235() /* ty=(Tensor[(9, 11, 8), float64],) */
}

def @func_7487() -> (Tensor[(9, 11, 8), int16],) {
  @func_7485() /* ty=(Tensor[(9, 11, 8), int16],) */
}

def @func_13492() -> Tensor[(9, 11, 8), int32] {
  @func_13490() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_5592() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) {
  @func_5590() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) */
}

def @func_8275(%var_8274: Tensor[(1, 13, 16), float32]) -> Tensor[(?, 13, 16), float64] {
  %380 = fn (%var_8250: Tensor[(1, 13, 16), float32]) -> Tensor[(?, 13, 16), float64] {
    %372 = cast(%var_8250, dtype="float32") /* ty=Tensor[(1, 13, 16), float32] */;
    %373 = rsqrt(%372) /* ty=Tensor[(1, 13, 16), float32] */;
    %374 = cast(%373, dtype="float32") /* ty=Tensor[(1, 13, 16), float32] */;
    %375 = sin(%374) /* ty=Tensor[(1, 13, 16), float32] */;
    %376 = cast(%373, dtype="float64") /* ty=Tensor[(1, 13, 16), float64] */;
    %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
    %378 = cast(%375, dtype="float64") /* ty=Tensor[(1, 13, 16), float64] */;
    %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%378, %379) /* ty=Tensor[(?, 13, 16), float64] */
  };
  %380(%var_8274) /* ty=Tensor[(?, 13, 16), float64] */
}

def @func_8762() -> (Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), bool]) {
  @func_8760() /* ty=(Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), bool]) */
}

def @func_2431() -> (Tensor[(9, 11, 8), int16],) {
  %383 = fn () -> (Tensor[(9, 11, 8), int16],) {
    %381 = @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */;
    %382 = %381.0;
    (%382,)
  };
  %383() /* ty=(Tensor[(9, 11, 8), int16],) */
}

def @func_5788() -> Tensor[(9, 11, 8), bool] {
  @func_5786() /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_10701() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int32]) {
  @func_10699() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int32]) */
}

def @func_5000(%var_4998: Tensor[(2, 9, 1), float64]) -> (Tensor[(2, 9, 1), float64], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int32]) {
  @func_4997(%var_4998) /* ty=(Tensor[(2, 9, 1), float64], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int32]) */
}

def @func_9753() -> (Tensor[(9, 11, 8), int32],) {
  @func_9751() /* ty=(Tensor[(9, 11, 8), int32],) */
}

def @func_11893() -> (Tensor[(9, 11, 8), int32],) {
  %384 = @func_10976() /* ty=Tensor[(9, 11, 8), int32] */;
  (%384,)
}

def @func_12245() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16]) {
  %385 = @func_7591() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32]) */;
  %386 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %387 = %385.0;
  %388 = %386.1;
  (%387, %388)
}

def @func_1891(%var_1889: Tensor[(1, 7, 13), uint64], %var_1890: Tensor[(3, 7, 13), uint64]) -> (Tensor[(3, 7, 13), bool], Tensor[(3, 7, 13), uint8]) {
  %397 = fn (%var_1871: Tensor[(1, 7, 13), uint64], %var_1872: Tensor[(3, 7, 13), uint64]) -> (Tensor[(3, 7, 13), bool], Tensor[(3, 7, 13), uint8]) {
    %389 = cast(%var_1871, dtype="bool") /* ty=Tensor[(1, 7, 13), bool] */;
    %390 = cast(%var_1872, dtype="bool") /* ty=Tensor[(3, 7, 13), bool] */;
    %391 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 7, 13), uint64] */, dtype="uint8") /* ty=Tensor[(3, 7, 13), uint8] */;
    %392 = shape_of(%var_1872, dtype="int32") /* ty=Tensor[(3), int32] */;
    %393 = cast(%var_1872, dtype="uint8") /* ty=Tensor[(3, 7, 13), uint8] */;
    %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %395 = less(%389, %390) /* ty=Tensor[(3, 7, 13), bool] */;
    %396 = right_shift(%393, %394) /* ty=Tensor[(3, 7, 13), uint8] */;
    (%395, %396)
  };
  %397(%var_1889, %var_1890) /* ty=(Tensor[(3, 7, 13), bool], Tensor[(3, 7, 13), uint8]) */
}

def @func_5623() -> (Tensor[(9, 11, 8), bool],) {
  %398 = @func_2409() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32]) */;
  %399 = %398.0;
  (%399,)
}

def @func_11604() -> (Tensor[(9, 11, 8), bool],) {
  %400 = @func_10178() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %401 = %400.0;
  (%401,)
}

def @func_6145() -> Tensor[(6, 15, 15), float64] {
  %403 = fn () -> Tensor[(6, 15, 15), float64] {
    %402 = @func_4804() /* ty=(Tensor[(6, 15, 15), float64],) */;
    %402.0
  };
  %403() /* ty=Tensor[(6, 15, 15), float64] */
}

def @func_6715() -> (Tensor[(9, 11, 8), int32],) {
  %406 = fn () -> (Tensor[(9, 11, 8), int32],) {
    %404 = @func_3177() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float64]) */;
    %405 = %404.1;
    (%405,)
  };
  %406() /* ty=(Tensor[(9, 11, 8), int32],) */
}

def @func_10977() -> Tensor[(9, 11, 8), int32] {
  %408 = fn () -> Tensor[(9, 11, 8), int32] {
    %407 = @func_2558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
    %407.1
  };
  %408() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_11468() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float64]) {
  %409 = @func_7485() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %410 = @func_4823() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
  %411 = @func_8054() /* ty=(Tensor[(8, 30), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(91), uint64], Tensor[(8, 30), float64]) */;
  %412 = %409.0;
  %413 = %410.0;
  %414 = %411.4;
  (%412, %413, %414)
}

def @func_8501(%var_8498: Tensor[(1, 18), float64], %var_8499: Tensor[(2, 9, 8), float64], %var_8500: Tensor[(294, 2), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(1, 18), float64], Tensor[(2, 9, 8), bool], Tensor[(6, 14, 7), float32], Tensor[(294, 2), float32], Tensor[(8, 30), float64]) {
  @func_8496(%var_8498, %var_8499, %var_8500) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(1, 18), float64], Tensor[(2, 9, 8), bool], Tensor[(6, 14, 7), float32], Tensor[(294, 2), float32], Tensor[(8, 30), float64]) */
}

def @func_4382(%var_4372: Tensor[(91, 1), uint64], %var_4373: Tensor[(273), uint64]) -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int8], Tensor[(240), float32], Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float32], Tensor[(3, 7, 13), uint8], Tensor[(91, 1), uint64], Tensor[(273), uint64]) {
  %415 = @func_2558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %416 = %415.1;
  %417 = cast(%416, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %418 = cast(meta[relay.Constant][14] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %419 = reshape(%417, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %420 = reshape(%418, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %421 = @func_2091(%419, %420) /* ty=(Tensor[(9, 11, 8), int8], Tensor[(9, 11, 8), bool], Tensor[(7, 9, 12), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %422 = @func_3755() /* ty=(Tensor[(6, 15, 15), float64],) */;
  %423 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %424 = @func_2778() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %425 = cast(%var_4372, dtype="uint64") /* ty=Tensor[(91, 1), uint64] */;
  %426 = cast(%var_4373, dtype="uint64") /* ty=Tensor[(273), uint64] */;
  %427 = reshape(%425, newshape=[1, 7, 13]) /* ty=Tensor[(1, 7, 13), uint64] */;
  %428 = reshape(%426, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), uint64] */;
  %429 = @func_1888(%427, %428) /* ty=(Tensor[(3, 7, 13), bool], Tensor[(3, 7, 13), uint8]) */;
  %430 = %421.0;
  %431 = %422.0;
  %432 = %423.1;
  %433 = %424.0;
  %434 = %429.1;
  (%416, %430, meta[relay.Constant][14] /* ty=Tensor[(240), float32] */, %431, %432, %433, %434, %var_4372, %var_4373)
}

def @func_7062() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) {
  %439 = fn () -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) {
    %435 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
    %436 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
    %437 = %435.1;
    %438 = %436.0;
    (%437, %438)
  };
  %439() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */
}

def @func_9280() -> (Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), bool]) {
  @func_9278() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), bool]) */
}

def @func_10531(%var_10529: Tensor[(4, 14, 4), int32]) -> (Tensor[(4, 14, 4), bool], Tensor[(9, 11, 8), int16], Tensor[(4, 14, 4), bool]) {
  @func_10528(%var_10529) /* ty=(Tensor[(4, 14, 4), bool], Tensor[(9, 11, 8), int16], Tensor[(4, 14, 4), bool]) */
}

def @func_11370() -> Tensor[(9, 11, 8), float32] {
  %440 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %440.1
}

def @func_5590() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) {
  %441 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %442 = @func_5225() /* ty=Tensor[(9, 11, 8), int32] */;
  %443 = %441.0;
  (%442, %443)
}

def @func_4823() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) {
  %444 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %445 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %446 = %444.0;
  %447 = %445.1;
  (%446, %447)
}

def @func_13167() -> (Tensor[(9, 11, 8), float32],) {
  %448 = @func_3106() /* ty=Tensor[(9, 11, 8), float32] */;
  (%448,)
}

def @func_13809(%var_13807: float64) -> (Tensor[(9, 11, 8), bool], Tensor[(12, 15, 14), uint32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32], Tensor[(6, 3, 4), bool], float64, Tensor[(1, 72), float64], Tensor[(9, 11, 8), bool]) {
  @func_13806(%var_13807) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(12, 15, 14), uint32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32], Tensor[(6, 3, 4), bool], float64, Tensor[(1, 72), float64], Tensor[(9, 11, 8), bool]) */
}

def @func_14373(%var_14371: Tensor[(1, 5, 6), float64]) -> (Tensor[(1, 5, 6), float64], Tensor[(9, 11, 8), bool]) {
  @func_14370(%var_14371) /* ty=(Tensor[(1, 5, 6), float64], Tensor[(9, 11, 8), bool]) */
}

def @func_12114() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(8, 30), float64]) {
  @func_12112() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(8, 30), float64]) */
}

def @func_14852() -> (Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32]) {
  %451 = fn () -> (Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32]) {
    %449 = @func_10976() /* ty=Tensor[(9, 11, 8), int32] */;
    %450 = @func_12025() /* ty=Tensor[(8, 30), float32] */;
    (%449, %450)
  };
  %451() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32]) */
}

def @func_16356() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) {
  %452 = @func_10095() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %453 = @func_10985() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %454 = %452.0;
  %455 = %453.0;
  (%454, %455)
}

def @func_16947() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) {
  @func_16945() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) */
}

def @func_15570() -> Tensor[(9, 11, 8), int32] {
  @func_15568() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_5895(%var_5878: Tensor[(756), uint8]) -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(9, 11, 8), int16]) {
  %456 = cast(%var_5878, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %457 = reshape(%456, newshape=[756]) /* ty=Tensor[(756), uint8] */;
  %458 = @func_3740(%457) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(756), uint8], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) */;
  %459 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %460 = @func_1147() /* ty=Tensor[(9, 11, 8), float64] */;
  %461 = %458.3;
  %462 = %459.1;
  (%460, %461, %var_5878, %462)
}

def @func_16945() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) {
  %463 = @func_5673() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %464 = @func_9966() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) */;
  %465 = @func_7847() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %466 = @func_6714() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %467 = %463.0;
  %468 = @func_10593() /* ty=Tensor[(9, 11, 8), float64] */;
  %469 = %464.0;
  %470 = %465.0;
  %471 = %466.0;
  (%467, %468, %469, %470, %471)
}

def @func_6547() -> (Tensor[(9, 11, 8), float32],) {
  @func_6545() /* ty=(Tensor[(9, 11, 8), float32],) */
}

def @func_17174(%var_17173: Tensor[(11, 6, 8), float64]) -> (Tensor[(9, 11, 8), int16], Tensor[(11, 6, 8), uint16]) {
  %481 = fn (%var_17154: Tensor[(11, 6, 8), float64]) -> (Tensor[(9, 11, 8), int16], Tensor[(11, 6, 8), uint16]) {
    %472 = @func_10873() /* ty=(Tensor[(9, 11, 8), int16],) */;
    %473 = cast(%var_17154, dtype="float64") /* ty=Tensor[(11, 6, 8), float64] */;
    %474 = acosh(%473) /* ty=Tensor[(11, 6, 8), float64] */;
    %475 = cast(%var_17154, dtype="uint16") /* ty=Tensor[(11, 6, 8), uint16] */;
    %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
    %477 = cast(%474, dtype="uint16") /* ty=Tensor[(11, 6, 8), uint16] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %479 = %472.0;
    %480 = bitwise_or(%477, %478) /* ty=Tensor[(11, 6, 8), uint16] */;
    (%479, %480)
  };
  %481(%var_17173) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(11, 6, 8), uint16]) */
}

def @func_4386(%var_4384: Tensor[(91, 1), uint64], %var_4385: Tensor[(273), uint64]) -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int8], Tensor[(240), float32], Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float32], Tensor[(3, 7, 13), uint8], Tensor[(91, 1), uint64], Tensor[(273), uint64]) {
  @func_4382(%var_4384, %var_4385) /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int8], Tensor[(240), float32], Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float32], Tensor[(3, 7, 13), uint8], Tensor[(91, 1), uint64], Tensor[(273), uint64]) */
}

def @func_16686(%var_16684: Tensor[(3, 252), uint8], %var_16685: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int16], Tensor[(3, 252), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), int32], Tensor[(7, 9, 12), int16]) {
  %495 = fn (%var_16631: Tensor[(3, 252), uint8], %var_16632: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int16], Tensor[(3, 252), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), int32], Tensor[(7, 9, 12), int16]) {
    %482 = cast(%var_16631, dtype="uint8") /* ty=Tensor[(3, 252), uint8] */;
    %483 = cast(%var_16632, dtype="float32") /* ty=Tensor[(240), float32] */;
    %484 = reshape(%482, newshape=[756]) /* ty=Tensor[(756), uint8] */;
    %485 = reshape(%483, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %486 = @func_12872(%484, %485) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32], Tensor[(576), int32]) */;
    %487 = %486.1;
    %488 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 9, 12), uint8] */, dtype="int16") /* ty=Tensor[(7, 9, 12), int16] */;
    %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
    %490 = cast(%487, dtype="int16") /* ty=Tensor[(7, 9, 12), int16] */;
    %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %492 = @func_11186() /* ty=Tensor[(9, 11, 8), int16] */;
    %493 = @func_11898() /* ty=Tensor[(9, 11, 8), int32] */;
    %494 = maximum(%490, %491) /* ty=Tensor[(7, 9, 12), int16] */;
    (%492, %var_16631, %var_16632, %493, %494)
  };
  %495(%var_16684, %var_16685) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(3, 252), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), int32], Tensor[(7, 9, 12), int16]) */
}

def @func_11862() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) {
  %496 = @func_10699() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int32]) */;
  %497 = @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %498 = %496.1;
  %499 = %497.0;
  (%498, %499)
}

def @func_13979() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16], Tensor[(8, 30), float64], Tensor[(9, 11, 8), int16], float64, Tensor[(72), float64]) {
  @func_13977() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16], Tensor[(8, 30), float64], Tensor[(9, 11, 8), int16], float64, Tensor[(72), float64]) */
}

def @func_6090(%var_6041: Tensor[(3, 16, 3), float32]) -> (Tensor[(9, 11, 8), float64], Tensor[(3, 16, 3), int64]) {
  %500 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %501 = cast(%var_6041, dtype="float32") /* ty=Tensor[(3, 16, 3), float32] */;
  %502 = cosh(%501) /* ty=Tensor[(3, 16, 3), float32] */;
  %503 = cast(%502, dtype="float32") /* ty=Tensor[(3, 16, 3), float32] */;
  %504 = erf(%503) /* ty=Tensor[(3, 16, 3), float32] */;
  %505 = cast(%var_6041, dtype="int64") /* ty=Tensor[(3, 16, 3), int64] */;
  %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%504, dtype="int64") /* ty=Tensor[(3, 16, 3), int64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %509 = %500.0;
  %510 = logical_xor(%507, %508) /* ty=Tensor[(3, 16, 3), int64] */;
  (%509, %510)
}

def @func_13977() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16], Tensor[(8, 30), float64], Tensor[(9, 11, 8), int16], float64, Tensor[(72), float64]) {
  %511 = @func_4823() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
  %512 = @func_4740() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int16], Tensor[(8, 30), float64]) */;
  %513 = cast(3.7202f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %514 = cast(meta[relay.Constant][16] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %515 = reshape(%513, newshape=[]) /* ty=float64 */;
  %516 = reshape(%514, newshape=[6, 3, 4]) /* ty=Tensor[(6, 3, 4), float64] */;
  %517 = @func_5512(%515, %516) /* ty=(Tensor[(6, 3, 4), bool], Tensor[(9, 11, 8), int16]) */;
  %518 = %511.1;
  %519 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
  %520 = %512.3;
  %521 = %517.1;
  (%518, %519, %520, %521, 3.7202f64 /* ty=float64 */, meta[relay.Constant][16] /* ty=Tensor[(72), float64] */)
}

def @func_1149() -> Tensor[(9, 11, 8), float64] {
  @func_1147() /* ty=Tensor[(9, 11, 8), float64] */
}

def @func_8945() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) {
  %529 = fn () -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) {
    %522 = @func_1357() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */;
    %523 = @func_2302() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
    %524 = @func_4823() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
    %525 = %522.0;
    %526 = @func_7794() /* ty=Tensor[(9, 11, 8), int16] */;
    %527 = %523.0;
    %528 = %524.0;
    (%525, %526, %527, %528)
  };
  %529() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) */
}

def @func_15660() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64]) {
  %530 = @func_9832() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) */;
  %531 = @func_12334() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %532 = @func_13703() /* ty=(Tensor[(8, 30), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), int16]) */;
  %533 = @func_9832() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) */;
  %534 = %530.0;
  %535 = %531.2;
  %536 = %532.3;
  %537 = %533.0;
  (%534, %535, %536, %537)
}

def @func_6545() -> (Tensor[(9, 11, 8), float32],) {
  %538 = @func_3106() /* ty=Tensor[(9, 11, 8), float32] */;
  (%538,)
}

def @func_7796() -> Tensor[(9, 11, 8), int16] {
  @func_7794() /* ty=Tensor[(9, 11, 8), int16] */
}

def @func_5674() -> (Tensor[(9, 11, 8), float32],) {
  %541 = fn () -> (Tensor[(9, 11, 8), float32],) {
    %539 = @func_5558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
    %540 = %539.0;
    (%540,)
  };
  %541() /* ty=(Tensor[(9, 11, 8), float32],) */
}

def @func_2091(%var_2020: Tensor[(9, 11, 8), bool], %var_2054: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int8], Tensor[(9, 11, 8), bool], Tensor[(7, 9, 12), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) {
  %542 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %543 = %542.0;
  %544 = cast(%var_2020, dtype="int8") /* ty=Tensor[(9, 11, 8), int8] */;
  %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%543, dtype="int8") /* ty=Tensor[(9, 11, 8), int8] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %548 = @func_1044() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %549 = cast(%var_2054, dtype="float32") /* ty=Tensor[(240), float32] */;
  %550 = reshape(%549, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %551 = @func_1971(%550) /* ty=(Tensor[(8, 30), float32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(8, 30), uint16], Tensor[(7, 9, 12), uint8]) */;
  %552 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %553 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %554 = logical_xor(%546, %547) /* ty=Tensor[(9, 11, 8), int8] */;
  %555 = %548.0;
  %556 = %551.1;
  %557 = %552.0;
  %558 = %553.0;
  (%554, %555, %556, %var_2054, %557, %558)
}

def @func_10179() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) {
  %563 = fn () -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) {
    %559 = @func_7419() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
    %560 = @func_8235() /* ty=(Tensor[(9, 11, 8), float64],) */;
    %561 = %559.1;
    %562 = %560.0;
    (%561, %562)
  };
  %563() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */
}

def @func_11083(%var_11081: Tensor[(5, 2, 14), int64]) -> (Tensor[(5, 2, 14), int64], Tensor[(9, 11, 8), float64]) {
  @func_11080(%var_11081) /* ty=(Tensor[(5, 2, 14), int64], Tensor[(9, 11, 8), float64]) */
}

def @func_12534() -> Tensor[(9, 11, 8), int32] {
  @func_12532() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_4602() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), uint16], Tensor[(1, 240), float32], Tensor[(9, 11, 8), float64]) {
  %574 = fn () -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), uint16], Tensor[(1, 240), float32], Tensor[(9, 11, 8), float64]) {
    %564 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
    %565 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
    %566 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 240), float32] */, dtype="float32") /* ty=Tensor[(1, 240), float32] */;
    %567 = reshape(%566, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
    %568 = @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */;
    %569 = @func_3619() /* ty=Tensor[(9, 11, 8), float64] */;
    %570 = %564.0;
    %571 = %565.0;
    %572 = @func_4196(%567) /* ty=Tensor[(8, 30), uint16] */;
    %573 = %568.0;
    (%569, %570, %571, %572, meta[relay.Constant][17] /* ty=Tensor[(1, 240), float32] */, %573)
  };
  %574() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), uint16], Tensor[(1, 240), float32], Tensor[(9, 11, 8), float64]) */
}

def @func_1698() -> (Tensor[(9, 11, 8), bool],) {
  %577 = fn () -> (Tensor[(9, 11, 8), bool],) {
    %575 = @func_1044() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %576 = %575.0;
    (%576,)
  };
  %577() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_9751() -> (Tensor[(9, 11, 8), int32],) {
  %578 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %579 = %578.0;
  (%579,)
}

def @func_8786() -> Tensor[(9, 11, 8), bool] {
  @func_8784() /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_11496() -> Tensor[(9, 11, 8), float32] {
  @func_3106() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_12454(%var_12452: Tensor[(10, 14, 3), int16], %var_12453: Tensor[(10, 14, 3), int16]) -> (Tensor[(10, 14, 3), int16], Tensor[(9, 11, 8), bool]) {
  @func_12450(%var_12452, %var_12453) /* ty=(Tensor[(10, 14, 3), int16], Tensor[(9, 11, 8), bool]) */
}

def @func_12750() -> (Tensor[(9, 11, 8), float64],) {
  %582 = fn () -> (Tensor[(9, 11, 8), float64],) {
    %580 = @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
    %581 = %580.1;
    (%581,)
  };
  %582() /* ty=(Tensor[(9, 11, 8), float64],) */
}

def @func_3647() -> Tensor[(8, 30), float32] {
  %584 = fn () -> Tensor[(8, 30), float32] {
    %583 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
    %583.2
  };
  %584() /* ty=Tensor[(8, 30), float32] */
}

def @func_3037(%var_3018: Tensor[(54, 14), uint8], %var_3031: Tensor[(8, 30), float32]) -> (Tensor[(9, 11, 8), float32], Tensor[(54, 14), uint8], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32]) {
  %585 = cast(%var_3018, dtype="uint8") /* ty=Tensor[(54, 14), uint8] */;
  %586 = reshape(%585, newshape=[3, 252]) /* ty=Tensor[(3, 252), uint8] */;
  %587 = @func_2853(%586) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(3, 252), uint8], Tensor[(9, 11, 8), float32]) */;
  %588 = cast(%var_3018, dtype="uint8") /* ty=Tensor[(54, 14), uint8] */;
  %589 = reshape(%588, newshape=[3, 252]) /* ty=Tensor[(3, 252), uint8] */;
  %590 = @func_2853(%589) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(3, 252), uint8], Tensor[(9, 11, 8), float32]) */;
  %591 = @func_2409() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32]) */;
  %592 = %591.2;
  %593 = cast(%var_3031, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(2), int32] */;
  %595 = cast(%592, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %597 = %587.3;
  %598 = %590.1;
  %599 = mod(%595, %596) /* ty=Tensor[(8, 30), float32] */;
  (%597, %var_3018, %598, %599)
}

def @func_2152(%var_2151: Tensor[(10, 16, 6), float64]) -> Tensor[(10, 16, 6), float64] {
  %601 = fn (%var_2147: Tensor[(10, 16, 6), float64]) -> Tensor[(10, 16, 6), float64] {
    %600 = cast(%var_2147, dtype="float64") /* ty=Tensor[(10, 16, 6), float64] */;
    sin(%600) /* ty=Tensor[(10, 16, 6), float64] */
  };
  %601(%var_2151) /* ty=Tensor[(10, 16, 6), float64] */
}

def @func_5625() -> (Tensor[(9, 11, 8), bool],) {
  @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_8556(%var_8553: Tensor[(4, 720), float32], %var_8554: Tensor[(91, 1), uint64], %var_8555: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16], Tensor[(4, 720), float32], Tensor[(240), float32], Tensor[(91, 1), uint64], Tensor[(240), float32]) {
  %618 = fn (%var_8527: Tensor[(4, 720), float32], %var_8539: Tensor[(91, 1), uint64], %var_8540: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16], Tensor[(4, 720), float32], Tensor[(240), float32], Tensor[(91, 1), uint64], Tensor[(240), float32]) {
    %602 = @func_7485() /* ty=(Tensor[(9, 11, 8), int16],) */;
    %603 = @func_7259() /* ty=(Tensor[(9, 11, 8), float32],) */;
    %604 = cast(%var_8527, dtype="float32") /* ty=Tensor[(4, 720), float32] */;
    %605 = cast(%var_8527, dtype="float32") /* ty=Tensor[(4, 720), float32] */;
    %606 = reshape(%604, newshape=[16, 12, 15]) /* ty=Tensor[(16, 12, 15), float32] */;
    %607 = reshape(%605, newshape=[16, 12, 15]) /* ty=Tensor[(16, 12, 15), float32] */;
    %608 = @func_3495(%606, %607) /* ty=(Tensor[(16, 12, 15), float32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(10, 16, 6), float64], Tensor[(960), float64]) */;
    %609 = cast(%var_8539, dtype="uint64") /* ty=Tensor[(91, 1), uint64] */;
    %610 = cast(%var_8540, dtype="float32") /* ty=Tensor[(240), float32] */;
    %611 = reshape(%609, newshape=[91]) /* ty=Tensor[(91), uint64] */;
    %612 = reshape(%610, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %613 = @func_2695(%611, %612) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(3, 7, 13), uint8], Tensor[(91), uint64], Tensor[(273), uint64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(240), float32]) */;
    %614 = %602.0;
    %615 = %603.0;
    %616 = %608.2;
    %617 = %613.6;
    (%614, %615, %616, %var_8527, %617, %var_8539, %var_8540)
  };
  %618(%var_8553, %var_8554, %var_8555) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16], Tensor[(4, 720), float32], Tensor[(240), float32], Tensor[(91, 1), uint64], Tensor[(240), float32]) */
}

def @func_5636() -> Tensor[(9, 11, 8), bool] {
  @func_5634() /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_14574(%var_14572: Tensor[(16, 3, 15), uint16], %var_14573: Tensor[(16, 3, 15), uint16]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(224), int32], Tensor[(16, 3, 15), uint8], Tensor[(9, 11, 8), int32]) {
  @func_14570(%var_14572, %var_14573) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(224), int32], Tensor[(16, 3, 15), uint8], Tensor[(9, 11, 8), int32]) */
}

def @func_2769() -> Tensor[(9, 11, 8), int32] {
  %619 = @func_2145() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %619.1
}

def @func_2778() -> (Tensor[(9, 11, 8), float32],) {
  %620 = @func_2558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %621 = %620.0;
  (%621,)
}

def @func_5898(%var_5896: Tensor[(756), uint8]) -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(9, 11, 8), int16]) {
  @func_5895(%var_5896) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(9, 11, 8), int16]) */
}

def @func_10528(%var_10481: Tensor[(4, 14, 4), int32]) -> (Tensor[(4, 14, 4), bool], Tensor[(9, 11, 8), int16], Tensor[(4, 14, 4), bool]) {
  %622 = cast(%var_10481, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %623 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(4, 14, 4), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 14, 4), int32] */, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %626 = @func_8602() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %627 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 14, 4), int32] */, dtype="float32") /* ty=Tensor[(4, 14, 4), float32] */;
  %628 = asin(%627) /* ty=Tensor[(4, 14, 4), float32] */;
  %629 = cast(%var_10481, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%628, dtype="bool") /* ty=Tensor[(4, 14, 4), bool] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %633 = not_equal(%624, %625) /* ty=Tensor[(4, 14, 4), bool] */;
  %634 = %626.0;
  %635 = greater_equal(%631, %632) /* ty=Tensor[(4, 14, 4), bool] */;
  (%633, %634, %635)
}

def @func_6651() -> Tensor[(6, 15, 15), float64] {
  @func_6649() /* ty=Tensor[(6, 15, 15), float64] */
}

def @func_6586() -> Tensor[(9, 11, 8), int32] {
  @func_5225() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_14235() -> Tensor[(9, 11, 8), float64] {
  @func_14233() /* ty=Tensor[(9, 11, 8), float64] */
}

def @func_12025() -> Tensor[(8, 30), float32] {
  %636 = @func_7183() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32], Tensor[(3, 16, 3), int64], Tensor[(144), float32], Tensor[(7, 9, 12), uint8], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
  %636.2
}

def @func_12160() -> Tensor[(9, 11, 8), float32] {
  %638 = fn () -> Tensor[(9, 11, 8), float32] {
    %637 = @func_2558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
    %637.0
  };
  %638() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_5747() -> (Tensor[(9, 11, 8), float32], Tensor[(6, 8, 12), float64], Tensor[(576), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), uint16]) {
  @func_5745() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(6, 8, 12), float64], Tensor[(576), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), uint16]) */
}

def @func_6798() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) {
  %646 = fn () -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) {
    %639 = @func_6528() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
    %640 = @func_4503() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(8, 30), uint16], Tensor[(4, 60), int64]) */;
    %641 = @func_6545() /* ty=(Tensor[(9, 11, 8), float32],) */;
    %642 = %639.1;
    %643 = @func_6586() /* ty=Tensor[(9, 11, 8), int32] */;
    %644 = %640.0;
    %645 = %641.0;
    (%642, %643, %644, %645)
  };
  %646() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */
}

def @func_9725() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) {
  @func_9723() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */
}

def @func_10952() -> (Tensor[(9, 11, 8), bool], Tensor[(6, 15, 15), float64]) {
  %647 = @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %648 = %647.1;
  %649 = @func_6144() /* ty=Tensor[(6, 15, 15), float64] */;
  (%648, %649)
}

def @func_12532() -> Tensor[(9, 11, 8), int32] {
  @func_12077() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_16862() -> (Tensor[(9, 11, 8), float64],) {
  %652 = fn () -> (Tensor[(9, 11, 8), float64],) {
    %650 = @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */;
    %651 = %650.0;
    (%651,)
  };
  %652() /* ty=(Tensor[(9, 11, 8), float64],) */
}

def @func_13442(%var_13441: Tensor[(972), float64]) -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float32], Tensor[(12, 9, 9), float64], Tensor[(972), float64]) {
  %661 = fn (%var_13391: Tensor[(972), float64]) -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float32], Tensor[(12, 9, 9), float64], Tensor[(972), float64]) {
    %653 = @func_12212() /* ty=(Tensor[(9, 11, 8), float32],) */;
    %654 = @func_12480() /* ty=(Tensor[(9, 11, 8), float64],) */;
    %655 = cast(%var_13391, dtype="float64") /* ty=Tensor[(972), float64] */;
    %656 = reshape(%655, newshape=[12, 9, 9]) /* ty=Tensor[(12, 9, 9), float64] */;
    %657 = %653.0;
    %658 = %654.0;
    %659 = @func_12025() /* ty=Tensor[(8, 30), float32] */;
    %660 = @func_4265(%656) /* ty=Tensor[(12, 9, 9), float64] */;
    (%657, %658, %659, %660, %var_13391)
  };
  %661(%var_13441) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float32], Tensor[(12, 9, 9), float64], Tensor[(972), float64]) */
}

def @func_11247(%var_11228: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(240), float32], Tensor[(9, 11, 8), bool]) {
  %662 = @func_9095() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16]) */;
  %663 = @func_6714() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %664 = @func_7667() /* ty=Tensor[(9, 11, 8), bool] */;
  %665 = cast(%664, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %666 = cast(%var_11228, dtype="float32") /* ty=Tensor[(240), float32] */;
  %667 = reshape(%665, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %668 = reshape(%666, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %669 = @func_2091(%667, %668) /* ty=(Tensor[(9, 11, 8), int8], Tensor[(9, 11, 8), bool], Tensor[(7, 9, 12), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
  %670 = @func_5455() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %671 = %662.3;
  %672 = %663.0;
  %673 = %669.5;
  %674 = %670.0;
  (%671, %664, %672, %673, %var_11228, %674)
}

def @func_9723() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) {
  %675 = @func_7485() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %676 = @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
  %677 = @func_7288() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %678 = @func_7847() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %679 = %675.0;
  %680 = %676.0;
  %681 = @func_7327() /* ty=Tensor[(9, 11, 8), int16] */;
  %682 = %677.0;
  %683 = %678.0;
  (%679, %680, %681, %682, %683)
}

def @func_4069() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) {
  @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */
}

def @func_4244() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16]) {
  @func_4242() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16]) */
}

def @func_12904() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) {
  %692 = fn () -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) {
    %684 = @func_10178() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
    %685 = @func_11604() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %686 = %685.0;
    %687 = cast(%686, dtype="float32") /* ty=Tensor[(9, 11, 8), float32] */;
    %688 = reshape(%687, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), float32] */;
    %689 = @func_3405(%688) /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
    %690 = %684.1;
    %691 = %689.2;
    (%690, %686, %691)
  };
  %692() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */
}

def @func_1752() -> (Tensor[(9, 11, 8), float64],) {
  %693 = @func_1497() /* ty=Tensor[(9, 11, 8), float32] */;
  %694 = cast(%693, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
  %695 = sinh(%694) /* ty=Tensor[(9, 11, 8), float64] */;
  (%695,)
}

def @func_8784() -> Tensor[(9, 11, 8), bool] {
  %696 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %696.0
}

def @func_1044() -> (Tensor[(9, 11, 8), bool],) {
  %697 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  (%697,)
}

def @func_6025() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) {
  @func_6023() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */
}

def @func_10036(%var_10034: Tensor[(16, 10, 14), float32], %var_10035: Tensor[(16, 10, 14), float32]) -> (Tensor[(16, 10, 14), bool], Tensor[(16, 10, 14), uint8], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int32]) {
  %711 = fn (%var_10001: Tensor[(16, 10, 14), float32], %var_10002: Tensor[(16, 10, 14), float32]) -> (Tensor[(16, 10, 14), bool], Tensor[(16, 10, 14), uint8], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int32]) {
    %698 = cast(%var_10002, dtype="bool") /* ty=Tensor[(16, 10, 14), bool] */;
    %699 = shape_of(%var_10001, dtype="int32") /* ty=Tensor[(3), int32] */;
    %700 = cast(%var_10001, dtype="bool") /* ty=Tensor[(16, 10, 14), bool] */;
    %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %702 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 10, 14), float32] */, dtype="uint8") /* ty=Tensor[(16, 10, 14), uint8] */;
    %703 = shape_of(%var_10001, dtype="int32") /* ty=Tensor[(3), int32] */;
    %704 = cast(%var_10001, dtype="uint8") /* ty=Tensor[(16, 10, 14), uint8] */;
    %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %706 = @func_7591() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32]) */;
    %707 = less(%700, %701) /* ty=Tensor[(16, 10, 14), bool] */;
    %708 = bitwise_and(%704, %705) /* ty=Tensor[(16, 10, 14), uint8] */;
    %709 = @func_7794() /* ty=Tensor[(9, 11, 8), int16] */;
    %710 = %706.0;
    (%707, %708, %709, %710)
  };
  %711(%var_10034, %var_10035) /* ty=(Tensor[(16, 10, 14), bool], Tensor[(16, 10, 14), uint8], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int32]) */
}

def @func_7593() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32]) {
  @func_7591() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32]) */
}

def @func_11498() -> Tensor[(9, 11, 8), float32] {
  @func_11496() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_12387() -> (Tensor[(9, 11, 8), bool],) {
  %712 = @func_5590() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) */;
  %713 = %712.1;
  (%713,)
}

def @func_5159() -> (Tensor[(9, 11, 8), int16],) {
  @func_5157() /* ty=(Tensor[(9, 11, 8), int16],) */
}

def @func_4540() -> Tensor[(8, 30), float64] {
  @func_4538() /* ty=Tensor[(8, 30), float64] */
}

def @func_1829() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) {
  %714 = @func_1357() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */;
  %715 = @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %716 = %714.0;
  %717 = %715.0;
  (%716, %717)
}

def @func_6604() -> Tensor[(9, 11, 8), float32] {
  %719 = fn () -> Tensor[(9, 11, 8), float32] {
    %718 = @func_4761() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
    %718.0
  };
  %719() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_12450(%var_12436: Tensor[(10, 14, 3), int16], %var_12437: Tensor[(10, 14, 3), int16]) -> (Tensor[(10, 14, 3), int16], Tensor[(9, 11, 8), bool]) {
  %720 = cast(%var_12437, dtype="int16") /* ty=Tensor[(10, 14, 3), int16] */;
  %721 = shape_of(%var_12436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%var_12436, dtype="int16") /* ty=Tensor[(10, 14, 3), int16] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %724 = @func_7288() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %725 = minimum(%722, %723) /* ty=Tensor[(10, 14, 3), int16] */;
  %726 = %724.0;
  (%725, %726)
}

def @func_13532() -> Tensor[(9, 11, 8), float32] {
  @func_13530() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_3783() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  @func_3781() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */
}

def @func_2780() -> (Tensor[(9, 11, 8), float32],) {
  @func_2778() /* ty=(Tensor[(9, 11, 8), float32],) */
}

def @func_14673() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(9, 11, 8), int32]) {
  %733 = fn () -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(9, 11, 8), int32]) {
    %727 = cast(meta[relay.Constant][20] /* ty=Tensor[(756), uint8] */, dtype="uint8") /* ty=Tensor[(756), uint8] */;
    %728 = reshape(%727, newshape=[756]) /* ty=Tensor[(756), uint8] */;
    %729 = @func_5895(%728) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(9, 11, 8), int16]) */;
    %730 = @func_4451() /* ty=Tensor[(9, 11, 8), float64] */;
    %731 = %729.0;
    %732 = @func_7935() /* ty=Tensor[(9, 11, 8), int32] */;
    (%730, %731, meta[relay.Constant][20] /* ty=Tensor[(756), uint8] */, %732)
  };
  %733() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(9, 11, 8), int32]) */
}

def @func_7421() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) {
  @func_7419() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */
}

def @func_4806() -> (Tensor[(6, 15, 15), float64],) {
  @func_4804() /* ty=(Tensor[(6, 15, 15), float64],) */
}

def @func_12727() -> (Tensor[(?, 9, 13), bool], Tensor[(9, 11, 8), bool]) {
  @func_12725() /* ty=(Tensor[(?, 9, 13), bool], Tensor[(9, 11, 8), bool]) */
}

def @func_16006() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(144), float32]) {
  %739 = fn () -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(144), float32]) {
    %734 = cast(meta[relay.Constant][21] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %735 = reshape(%734, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), float32] */;
    %736 = @func_6090(%735) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(3, 16, 3), int64]) */;
    %737 = @func_10768() /* ty=Tensor[(9, 11, 8), int16] */;
    %738 = %736.0;
    (%737, %738, meta[relay.Constant][21] /* ty=Tensor[(144), float32] */)
  };
  %739() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(144), float32]) */
}

def @func_992() -> Tensor[(9, 11, 8), bool] {
  %742 = fn () -> Tensor[(9, 11, 8), bool] {
    %740 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %741 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 11, 8), bool] */, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
    logical_and(%740, %741) /* ty=Tensor[(9, 11, 8), bool] */
  };
  %742() /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_2771() -> Tensor[(9, 11, 8), int32] {
  @func_2769() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_14233() -> Tensor[(9, 11, 8), float64] {
  %743 = @func_9832() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) */;
  %743.0
}

def @func_10676() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %744 = @func_5468() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %745 = %744.0;
  %746 = @func_5786() /* ty=Tensor[(9, 11, 8), bool] */;
  (%745, %746)
}

def @func_4538() -> Tensor[(8, 30), float64] {
  %747 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %748 = %747.2;
  %749 = cast(%748, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  rsqrt(%749) /* ty=Tensor[(8, 30), float64] */
}

def @func_12481() -> (Tensor[(9, 11, 8), float64],) {
  %751 = fn () -> (Tensor[(9, 11, 8), float64],) {
    %750 = @func_2229() /* ty=Tensor[(9, 11, 8), float64] */;
    (%750,)
  };
  %751() /* ty=(Tensor[(9, 11, 8), float64],) */
}

def @func_4198(%var_4197: Tensor[(8, 30), float32]) -> Tensor[(8, 30), uint16] {
  %757 = fn (%var_4185: Tensor[(8, 30), float32]) -> Tensor[(8, 30), uint16] {
    %752 = @func_3646() /* ty=Tensor[(8, 30), float32] */;
    %753 = cast(%var_4185, dtype="uint16") /* ty=Tensor[(8, 30), uint16] */;
    %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(2), int32] */;
    %755 = cast(%752, dtype="uint16") /* ty=Tensor[(8, 30), uint16] */;
    %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    minimum(%755, %756) /* ty=Tensor[(8, 30), uint16] */
  };
  %757(%var_4197) /* ty=Tensor[(8, 30), uint16] */
}

def @func_2855(%var_2854: Tensor[(3, 252), uint8]) -> (Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(3, 252), uint8], Tensor[(9, 11, 8), float32]) {
  %772 = fn (%var_2829: Tensor[(3, 252), uint8]) -> (Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(3, 252), uint8], Tensor[(9, 11, 8), float32]) {
    %758 = @func_2558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
    %759 = %758.0;
    %760 = cast(%759, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
    %761 = cast(%var_2829, dtype="uint8") /* ty=Tensor[(3, 252), uint8] */;
    %762 = reshape(%760, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
    %763 = reshape(%761, newshape=[756]) /* ty=Tensor[(756), uint8] */;
    %764 = @func_1451(%762, %763) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8]) */;
    %765 = cast(%759, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
    %766 = %764.4;
    %767 = cast(%766, dtype="uint8") /* ty=Tensor[(7, 9, 12), uint8] */;
    %768 = reshape(%765, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
    %769 = reshape(%767, newshape=[756]) /* ty=Tensor[(756), uint8] */;
    %770 = @func_1451(%768, %769) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8]) */;
    %771 = %770.2;
    (%759, %766, %var_2829, %771)
  };
  %772(%var_2854) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(3, 252), uint8], Tensor[(9, 11, 8), float32]) */
}

def @func_12788() -> (Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), bool]) {
  %773 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %774 = @func_11633() /* ty=Tensor[(9, 7, 6), bool] */;
  %775 = %773.0;
  (%774, %775)
}

def @func_198(%var_188: Tensor[(7, 9, 12), uint8], %var_189: Tensor[(7, 9, 12), uint8]) -> Tensor[(7, 9, 12), uint8] {
  %776 = cast(%var_189, dtype="uint8") /* ty=Tensor[(7, 9, 12), uint8] */;
  %777 = shape_of(%var_188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%var_188, dtype="uint8") /* ty=Tensor[(7, 9, 12), uint8] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  left_shift(%778, %779) /* ty=Tensor[(7, 9, 12), uint8] */
}

def @func_7213(%var_7212: Tensor[(6, 14, 7), float32]) -> (Tensor[(6, 14, 7), float32],) {
  %782 = fn (%var_7207: Tensor[(6, 14, 7), float32]) -> (Tensor[(6, 14, 7), float32],) {
    %780 = cast(%var_7207, dtype="float32") /* ty=Tensor[(6, 14, 7), float32] */;
    %781 = cosh(%780) /* ty=Tensor[(6, 14, 7), float32] */;
    (%781,)
  };
  %782(%var_7212) /* ty=(Tensor[(6, 14, 7), float32],) */
}

def @func_15707(%var_15706: Tensor[(972), float64]) -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32], Tensor[(972), float32]) {
  %791 = fn (%var_15693: Tensor[(972), float64]) -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32], Tensor[(972), float32]) {
    %783 = @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */;
    %784 = cast(%var_15693, dtype="float64") /* ty=Tensor[(972), float64] */;
    %785 = reshape(%784, newshape=[972]) /* ty=Tensor[(972), float64] */;
    %786 = @func_13440(%785) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float32], Tensor[(12, 9, 9), float64], Tensor[(972), float64]) */;
    %787 = cast(%var_15693, dtype="float32") /* ty=Tensor[(972), float32] */;
    %788 = %783.0;
    %789 = %786.0;
    %790 = cosh(%787) /* ty=Tensor[(972), float32] */;
    (%788, %789, %790)
  };
  %791(%var_15706) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32], Tensor[(972), float32]) */
}

def @func_16040() -> (Tensor[(15, 2, 1), float32],) {
  %793 = fn () -> (Tensor[(15, 2, 1), float32],) {
    %792 = @func_6492() /* ty=Tensor[(15, 2, 1), float32] */;
    (%792,)
  };
  %793() /* ty=(Tensor[(15, 2, 1), float32],) */
}

def @func_8869(%var_8847: Tensor[(8, 30), float32]) -> Tensor[(8, 30), int64] {
  %794 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %795 = %794.2;
  %796 = cast(%var_8847, dtype="int64") /* ty=Tensor[(8, 30), int64] */;
  %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(2), int32] */;
  %798 = cast(%795, dtype="int64") /* ty=Tensor[(8, 30), int64] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  maximum(%798, %799) /* ty=Tensor[(8, 30), int64] */
}

def @main() -> (Tensor[(5, 240), uint16],) {
  %800 = @func_4602() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), uint16], Tensor[(1, 240), float32], Tensor[(9, 11, 8), float64]) */;
  %801 = %800.4;
  %802 = cast(%801, dtype="uint16") /* ty=Tensor[(1, 240), uint16] */;
  %803 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 240), float32] */, dtype="uint16") /* ty=Tensor[(5, 240), uint16] */;
  %804 = left_shift(%802, %803) /* ty=Tensor[(5, 240), uint16] */;
  (%804,)
}

def @func_2930() -> (Tensor[(9, 7, 6), bool],) {
  %808 = fn () -> (Tensor[(9, 7, 6), bool],) {
    %805 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 7, 6), bool] */, dtype="bool") /* ty=Tensor[(1, 7, 6), bool] */;
    %806 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 7, 6), bool] */, dtype="bool") /* ty=Tensor[(9, 7, 6), bool] */;
    %807 = logical_and(%805, %806) /* ty=Tensor[(9, 7, 6), bool] */;
    (%807,)
  };
  %808() /* ty=(Tensor[(9, 7, 6), bool],) */
}

def @func_3122() -> (Tensor[(9, 11, 8), float64],) {
  @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */
}

def @func_14220() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16], Tensor[(9, 7, 6), bool]) {
  %814 = fn () -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16], Tensor[(9, 7, 6), bool]) {
    %809 = @func_13703() /* ty=(Tensor[(8, 30), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), int16]) */;
    %810 = @func_2430() /* ty=(Tensor[(9, 11, 8), int16],) */;
    %811 = %809.1;
    %812 = %810.0;
    %813 = @func_11633() /* ty=Tensor[(9, 7, 6), bool] */;
    (%811, %812, %813)
  };
  %814() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16], Tensor[(9, 7, 6), bool]) */
}

def @func_2304() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) {
  @func_2302() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */
}

def @func_10678() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  @func_10676() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */
}

def @func_5393(%var_5392: Tensor[(2, 10, 4), float64]) -> (Tensor[(6, 15, 15), float64], Tensor[(2, 10, 4), float64]) {
  %824 = fn (%var_5367: Tensor[(2, 10, 4), float64]) -> (Tensor[(6, 15, 15), float64], Tensor[(2, 10, 4), float64]) {
    %815 = @func_3755() /* ty=(Tensor[(6, 15, 15), float64],) */;
    %816 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 10, 4), float64] */, dtype="bool") /* ty=Tensor[(2, 10, 4), bool] */;
    %817 = shape_of(%var_5367, dtype="int32") /* ty=Tensor[(3), int32] */;
    %818 = cast(%var_5367, dtype="bool") /* ty=Tensor[(2, 10, 4), bool] */;
    %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %820 = greater(%818, %819) /* ty=Tensor[(2, 10, 4), bool] */;
    %821 = cast(%820, dtype="float64") /* ty=Tensor[(2, 10, 4), float64] */;
    %822 = %815.0;
    %823 = cosh(%821) /* ty=Tensor[(2, 10, 4), float64] */;
    (%822, %823)
  };
  %824(%var_5392) /* ty=(Tensor[(6, 15, 15), float64], Tensor[(2, 10, 4), float64]) */
}

def @func_14570(%var_14510: Tensor[(16, 3, 15), uint16], %var_14511: Tensor[(16, 3, 15), uint16]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(224), int32], Tensor[(16, 3, 15), uint8], Tensor[(9, 11, 8), int32]) {
  %825 = cast(meta[relay.Constant][27] /* ty=Tensor[(224), int32] */, dtype="int32") /* ty=Tensor[(224), int32] */;
  %826 = reshape(%825, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), int32] */;
  %827 = @func_10528(%826) /* ty=(Tensor[(4, 14, 4), bool], Tensor[(9, 11, 8), int16], Tensor[(4, 14, 4), bool]) */;
  %828 = cast(%var_14511, dtype="uint16") /* ty=Tensor[(16, 3, 15), uint16] */;
  %829 = shape_of(%var_14510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %830 = cast(%var_14510, dtype="uint16") /* ty=Tensor[(16, 3, 15), uint16] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %832 = multiply(%830, %831) /* ty=Tensor[(16, 3, 15), uint16] */;
  %833 = cast(%832, dtype="float32") /* ty=Tensor[(16, 3, 15), float32] */;
  %834 = shape_of(%var_14511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%var_14511, dtype="float32") /* ty=Tensor[(16, 3, 15), float32] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %837 = floor_divide(%835, %836) /* ty=Tensor[(16, 3, 15), float32] */;
  %838 = cast(%837, dtype="float32") /* ty=Tensor[(16, 3, 15), float32] */;
  %839 = asin(%838) /* ty=Tensor[(16, 3, 15), float32] */;
  %840 = cast(%832, dtype="uint8") /* ty=Tensor[(16, 3, 15), uint8] */;
  %841 = shape_of(%839, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%839, dtype="uint8") /* ty=Tensor[(16, 3, 15), uint8] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %844 = @func_7591() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32]) */;
  %845 = @func_8784() /* ty=Tensor[(9, 11, 8), bool] */;
  %846 = %827.1;
  %847 = maximum(%842, %843) /* ty=Tensor[(16, 3, 15), uint8] */;
  %848 = %844.1;
  (%845, %846, meta[relay.Constant][27] /* ty=Tensor[(224), int32] */, %847, %848)
}

def @func_11634() -> Tensor[(9, 7, 6), bool] {
  %850 = fn () -> Tensor[(9, 7, 6), bool] {
    %849 = @func_2929() /* ty=(Tensor[(9, 7, 6), bool],) */;
    %849.0
  };
  %850() /* ty=Tensor[(9, 7, 6), bool] */
}

def @func_6649() -> Tensor[(6, 15, 15), float64] {
  %851 = @func_3755() /* ty=(Tensor[(6, 15, 15), float64],) */;
  %851.0
}

def @func_9014() -> (Tensor[(9, 11, 8), float32],) {
  %854 = fn () -> (Tensor[(9, 11, 8), float32],) {
    %852 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
    %853 = %852.1;
    (%853,)
  };
  %854() /* ty=(Tensor[(9, 11, 8), float32],) */
}

def @func_12247() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16]) {
  @func_12245() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16]) */
}

def @func_12875(%var_12873: Tensor[(756), uint8], %var_12874: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32], Tensor[(576), int32]) {
  %869 = fn (%var_12833: Tensor[(756), uint8], %var_12834: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32], Tensor[(576), int32]) {
    %855 = @func_6023() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
    %856 = cast(%var_12833, dtype="uint8") /* ty=Tensor[(756), uint8] */;
    %857 = cast(%var_12834, dtype="float32") /* ty=Tensor[(240), float32] */;
    %858 = reshape(%856, newshape=[54, 14]) /* ty=Tensor[(54, 14), uint8] */;
    %859 = reshape(%857, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
    %860 = @func_3037(%858, %859) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(54, 14), uint8], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32]) */;
    %861 = @func_10178() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
    %862 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
    %863 = @func_9278() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), bool]) */;
    %864 = %855.1;
    %865 = %860.2;
    %866 = %861.1;
    %867 = %862.1;
    %868 = %863.1;
    (%864, %865, %var_12833, %var_12834, %866, %867, %868)
  };
  %869(%var_12873, %var_12874) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32], Tensor[(576), int32]) */
}

def @func_9441() -> (Tensor[(9, 11, 8), bool],) {
  %870 = @func_8784() /* ty=Tensor[(9, 11, 8), bool] */;
  (%870,)
}

def @func_11558() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) {
  %871 = @func_9226() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %872 = @func_9095() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int16]) */;
  %873 = %871.1;
  %874 = %872.3;
  (%873, %874)
}

def @func_12140() -> (Tensor[(9, 11, 8), float64],) {
  @func_12138() /* ty=(Tensor[(9, 11, 8), float64],) */
}

def @func_14171(%var_14169: Tensor[(7, 6, 16), uint64]) -> Tensor[(7, 6, 16), float32] {
  @func_14168(%var_14169) /* ty=Tensor[(7, 6, 16), float32] */
}

def @func_15402() -> Tensor[(9, 11, 8), int16] {
  %875 = fn () -> Tensor[(9, 11, 8), int16] {
    @func_2379() /* ty=Tensor[(9, 11, 8), int16] */
  };
  %875() /* ty=Tensor[(9, 11, 8), int16] */
}

def @func_13016() -> Tensor[(9, 11, 8), int32] {
  @func_13014() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_2559() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) {
  %881 = fn () -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) {
    %876 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
    %877 = cast(%876, dtype="float32") /* ty=Tensor[(9, 11, 8), float32] */;
    %878 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
    %879 = erf(%877) /* ty=Tensor[(9, 11, 8), float32] */;
    %880 = %878.0;
    (%879, %880)
  };
  %881() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */
}

def @func_1334() -> (Tensor[(9, 11, 8), int16],) {
  %882 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %883 = %882.0;
  %884 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
  %885 = cast(%884, dtype="int16") /* ty=Tensor[(9, 11, 8), int16] */;
  %886 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %887 = cast(%883, dtype="int16") /* ty=Tensor[(9, 11, 8), int16] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %889 = bitwise_and(%887, %888) /* ty=Tensor[(9, 11, 8), int16] */;
  (%889,)
}

def @func_8603() -> (Tensor[(9, 11, 8), int16],) {
  %892 = fn () -> (Tensor[(9, 11, 8), int16],) {
    %890 = @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
    %891 = %890.0;
    (%891,)
  };
  %892() /* ty=(Tensor[(9, 11, 8), int16],) */
}

def @func_9967() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) {
  %897 = fn () -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) {
    %893 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
    %894 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
    %895 = %893.0;
    %896 = %894.0;
    (%895, %896)
  };
  %897() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) */
}

def @func_1831() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) {
  @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */
}

def @func_7261() -> (Tensor[(9, 11, 8), float32],) {
  @func_7259() /* ty=(Tensor[(9, 11, 8), float32],) */
}

def @func_4804() -> (Tensor[(6, 15, 15), float64],) {
  %898 = @func_3755() /* ty=(Tensor[(6, 15, 15), float64],) */;
  %899 = %898.0;
  (%899,)
}

def @func_8576() -> Tensor[(9, 11, 8), int32] {
  @func_8574() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_5456() -> (Tensor[(9, 11, 8), bool],) {
  %902 = fn () -> (Tensor[(9, 11, 8), bool],) {
    %900 = @func_5327() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %901 = %900.0;
    (%901,)
  };
  %902() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_15184(%var_15120: Tensor[(588), float32], %var_15128: Tensor[(756), uint8]) -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(588), float32], Tensor[(8, 30), float32], Tensor[(756), uint8], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int32]) {
  %903 = cast(%var_15120, dtype="float32") /* ty=Tensor[(588), float32] */;
  %904 = reshape(%903, newshape=[588]) /* ty=Tensor[(588), float32] */;
  %905 = @func_9343(%904) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(6, 14, 7), float32], Tensor[(588), float32], Tensor[(9, 11, 8), bool]) */;
  %906 = cast(%var_15128, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %907 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 30), float32] */, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %908 = reshape(%906, newshape=[54, 14]) /* ty=Tensor[(54, 14), uint8] */;
  %909 = reshape(%907, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %910 = @func_3037(%908, %909) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(54, 14), uint8], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32]) */;
  %911 = @func_11215() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) */;
  %912 = @func_11186() /* ty=Tensor[(9, 11, 8), int16] */;
  %913 = @func_3619() /* ty=Tensor[(9, 11, 8), float64] */;
  %914 = %905.3;
  %915 = %910.3;
  %916 = %911.1;
  (%912, %913, %914, %var_15120, %915, %var_15128, meta[relay.Constant][28] /* ty=Tensor[(8, 30), float32] */, %916)
}

def @func_1754() -> (Tensor[(9, 11, 8), float64],) {
  @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */
}

def @func_12389() -> (Tensor[(9, 11, 8), bool],) {
  @func_12387() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_4503() -> (Tensor[(9, 11, 8), bool], Tensor[(8, 30), uint16], Tensor[(4, 60), int64]) {
  %917 = @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %918 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 60), float32] */, dtype="float32") /* ty=Tensor[(4, 60), float32] */;
  %919 = reshape(%918, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %920 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 60), float32] */, dtype="float64") /* ty=Tensor[(4, 60), float64] */;
  %921 = acosh(%920) /* ty=Tensor[(4, 60), float64] */;
  %922 = cast(%921, dtype="float64") /* ty=Tensor[(4, 60), float64] */;
  %923 = log10(%922) /* ty=Tensor[(4, 60), float64] */;
  %924 = cast(%923, dtype="bool") /* ty=Tensor[(4, 60), bool] */;
  %925 = shape_of(%921, dtype="int32") /* ty=Tensor[(2), int32] */;
  %926 = cast(%921, dtype="bool") /* ty=Tensor[(4, 60), bool] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %928 = logical_or(%926, %927) /* ty=Tensor[(4, 60), bool] */;
  %929 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 60), float32] */, dtype="int64") /* ty=Tensor[(4, 60), int64] */;
  %930 = shape_of(%928, dtype="int32") /* ty=Tensor[(2), int32] */;
  %931 = cast(%928, dtype="int64") /* ty=Tensor[(4, 60), int64] */;
  %932 = dyn.reshape(%929, %930, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %933 = %917.1;
  %934 = @func_4196(%919) /* ty=Tensor[(8, 30), uint16] */;
  %935 = minimum(%931, %932) /* ty=Tensor[(4, 60), int64] */;
  (%933, %934, %935)
}

def @func_11606() -> (Tensor[(9, 11, 8), bool],) {
  @func_11604() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_15067() -> (Tensor[(9, 11, 8), float64],) {
  @func_15065() /* ty=(Tensor[(9, 11, 8), float64],) */
}

def @func_11216() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) {
  %938 = fn () -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) {
    %936 = @func_3619() /* ty=Tensor[(9, 11, 8), float64] */;
    %937 = @func_7935() /* ty=Tensor[(9, 11, 8), int32] */;
    (%936, %937)
  };
  %938() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) */
}

def @func_15279() -> (Tensor[(9, 11, 8), float32],) {
  %941 = fn () -> (Tensor[(9, 11, 8), float32],) {
    %939 = @func_9013() /* ty=(Tensor[(9, 11, 8), float32],) */;
    %940 = %939.0;
    (%940,)
  };
  %941() /* ty=(Tensor[(9, 11, 8), float32],) */
}

def @func_11050() -> Tensor[(9, 11, 8), bool] {
  %943 = fn () -> Tensor[(9, 11, 8), bool] {
    %942 = @func_10952() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(6, 15, 15), float64]) */;
    %942.0
  };
  %943() /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_7092() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  @func_7090() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */
}

def @func_15568() -> Tensor[(9, 11, 8), int32] {
  @func_13490() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_2229() -> Tensor[(9, 11, 8), float64] {
  %944 = @func_1752() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %945 = %944.0;
  %946 = cast(%945, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
  rsqrt(%946) /* ty=Tensor[(9, 11, 8), float64] */
}

def @func_9802() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32]) {
  %947 = @func_3781() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %948 = @func_6545() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %949 = %947.1;
  %950 = %948.0;
  (%949, %950)
}

def @func_14988() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) {
  %954 = fn () -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) {
    %951 = @func_14851() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32]) */;
    %952 = @func_10593() /* ty=Tensor[(9, 11, 8), float64] */;
    %953 = %951.0;
    (%952, %953)
  };
  %954() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) */
}

def @func_2474() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) {
  @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */
}

def @func_7543(%var_7542: Tensor[(18), float64]) -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool], Tensor[(2, 10, 4), float64], Tensor[(2, 40), float64], Tensor[(2, 9, 1), float64], Tensor[(18), float64]) {
  %965 = fn (%var_7527: Tensor[(18), float64]) -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool], Tensor[(2, 10, 4), float64], Tensor[(2, 40), float64], Tensor[(2, 9, 1), float64], Tensor[(18), float64]) {
    %955 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 40), float64] */, dtype="float64") /* ty=Tensor[(2, 40), float64] */;
    %956 = reshape(%955, newshape=[2, 10, 4]) /* ty=Tensor[(2, 10, 4), float64] */;
    %957 = @func_5391(%956) /* ty=(Tensor[(6, 15, 15), float64], Tensor[(2, 10, 4), float64]) */;
    %958 = cast(%var_7527, dtype="float64") /* ty=Tensor[(18), float64] */;
    %959 = reshape(%958, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float64] */;
    %960 = @func_4997(%959) /* ty=(Tensor[(2, 9, 1), float64], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int32]) */;
    %961 = @func_6106() /* ty=Tensor[(9, 11, 8), float32] */;
    %962 = @func_5786() /* ty=Tensor[(9, 11, 8), bool] */;
    %963 = %957.1;
    %964 = %960.0;
    (%961, %962, %963, meta[relay.Constant][30] /* ty=Tensor[(2, 40), float64] */, %964, %var_7527)
  };
  %965(%var_7542) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool], Tensor[(2, 10, 4), float64], Tensor[(2, 40), float64], Tensor[(2, 9, 1), float64], Tensor[(18), float64]) */
}

def @func_10593() -> Tensor[(9, 11, 8), float64] {
  %966 = @func_7847() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %966.0
}

def @func_5225() -> Tensor[(9, 11, 8), int32] {
  %967 = @func_2145() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %967.1
}

def @func_15555(%var_15554: Tensor[(6, 14, 12), float64]) -> Tensor[(6, 14, 12), float32] {
  %971 = fn (%var_15540: Tensor[(6, 14, 12), float64]) -> Tensor[(6, 14, 12), float32] {
    %968 = cast(%var_15540, dtype="float64") /* ty=Tensor[(6, 14, 12), float64] */;
    %969 = sqrt(%968) /* ty=Tensor[(6, 14, 12), float64] */;
    %970 = cast(%969, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
    acosh(%970) /* ty=Tensor[(6, 14, 12), float32] */
  };
  %971(%var_15554) /* ty=Tensor[(6, 14, 12), float32] */
}

def @func_1673(%var_1672: Tensor[(4, 60), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(6, 8, 12), float64], Tensor[(4, 60), float32], Tensor[(576), int32]) {
  %980 = fn (%var_1641: Tensor[(4, 60), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(6, 8, 12), float64], Tensor[(4, 60), float32], Tensor[(576), int32]) {
    %972 = @func_1357() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */;
    %973 = cast(%var_1641, dtype="float32") /* ty=Tensor[(4, 60), float32] */;
    %974 = reshape(%973, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), float32] */;
    %975 = @func_414(%974) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(6, 8, 12), float64], Tensor[(576), int32]) */;
    %976 = @func_1357() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */;
    %977 = %972.0;
    %978 = %975.1;
    %979 = %976.1;
    (%977, %978, %var_1641, %979)
  };
  %980(%var_1672) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(6, 8, 12), float64], Tensor[(4, 60), float32], Tensor[(576), int32]) */
}

def @func_15821() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(8, 30), float64], Tensor[(9, 11, 8), float64]) {
  @func_15819() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(8, 30), float64], Tensor[(9, 11, 8), float64]) */
}

def @func_16210() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(30), float64]) {
  @func_16208() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(30), float64]) */
}

def @func_9417() -> Tensor[(9, 11, 8), bool] {
  %982 = fn () -> Tensor[(9, 11, 8), bool] {
    %981 = @func_5327() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %981.0
  };
  %982() /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_2411() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32]) {
  @func_2409() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32]) */
}

def @func_13896() -> (Tensor[(9, 11, 8), bool],) {
  %985 = fn () -> (Tensor[(9, 11, 8), bool],) {
    %983 = @func_12903() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
    %984 = %983.1;
    (%984,)
  };
  %985() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_11744() -> (Tensor[(9, 11, 8), bool],) {
  %986 = @func_5455() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %987 = %986.0;
  (%987,)
}

def @func_10550(%var_10548: int8, %var_10549: Tensor[(1, 11, 16), int8]) -> Tensor[(1, 11, 16), int8] {
  %990 = fn (%var_10542: int8, %var_10543: Tensor[(1, 11, 16), int8]) -> Tensor[(1, 11, 16), int8] {
    %988 = cast(%var_10542, dtype="int8") /* ty=int8 */;
    %989 = cast(%var_10543, dtype="int8") /* ty=Tensor[(1, 11, 16), int8] */;
    bitwise_or(%988, %989) /* ty=Tensor[(1, 11, 16), int8] */
  };
  %990(%var_10548, %var_10549) /* ty=Tensor[(1, 11, 16), int8] */
}

def @func_12740() -> (Tensor[(9, 11, 8), float64],) {
  @func_12738() /* ty=(Tensor[(9, 11, 8), float64],) */
}

def @func_5097(%var_5059: Tensor[(8, 30), float64], %var_5076: Tensor[(9, 84), uint8]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 84), uint8], Tensor[(9, 11, 8), uint16], Tensor[(8, 30), bool]) {
  %991 = @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %992 = cast(%var_5076, dtype="uint8") /* ty=Tensor[(9, 84), uint8] */;
  %993 = reshape(%992, newshape=[3, 252]) /* ty=Tensor[(3, 252), uint8] */;
  %994 = @func_2853(%993) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(3, 252), uint8], Tensor[(9, 11, 8), float32]) */;
  %995 = @func_4149() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), uint16]) */;
  %996 = @func_4538() /* ty=Tensor[(8, 30), float64] */;
  %997 = cast(%var_5059, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %998 = shape_of(%996, dtype="int32") /* ty=Tensor[(2), int32] */;
  %999 = cast(%996, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %1000 = dyn.reshape(%997, %998, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1001 = floor_divide(%999, %1000) /* ty=Tensor[(8, 30), float64] */;
  %1002 = cast(%1001, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %1003 = asinh(%1002) /* ty=Tensor[(8, 30), float64] */;
  %1004 = cast(%1003, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %1005 = atanh(%1004) /* ty=Tensor[(8, 30), float64] */;
  %1006 = cast(%var_5059, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %1007 = shape_of(%1005, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1008 = cast(%1005, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
  %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1010 = %991.1;
  %1011 = %994.0;
  %1012 = %995.1;
  %1013 = less_equal(%1008, %1009) /* ty=Tensor[(8, 30), bool] */;
  (%1010, %1011, %var_5076, %1012, %1013)
}

def @func_16127(%var_16126: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(240), float32]) {
  %1020 = fn (%var_16118: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(240), float32]) {
    %1014 = @func_14672() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(9, 11, 8), int32]) */;
    %1015 = cast(%var_16118, dtype="float32") /* ty=Tensor[(240), float32] */;
    %1016 = reshape(%1015, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %1017 = @func_11247(%1016) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(240), float32], Tensor[(9, 11, 8), bool]) */;
    %1018 = %1014.3;
    %1019 = %1017.0;
    (%1018, %1019, %var_16118)
  };
  %1020(%var_16126) /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(240), float32]) */
}

def @func_3041(%var_3039: Tensor[(54, 14), uint8], %var_3040: Tensor[(8, 30), float32]) -> (Tensor[(9, 11, 8), float32], Tensor[(54, 14), uint8], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32]) {
  @func_3037(%var_3039, %var_3040) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(54, 14), uint8], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32]) */
}

def @func_6931() -> (Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), bool]) {
  %1021 = @func_3755() /* ty=(Tensor[(6, 15, 15), float64],) */;
  %1022 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %1023 = %1021.0;
  %1024 = %1022.0;
  (%1023, %1024)
}

def @func_13169() -> (Tensor[(9, 11, 8), float32],) {
  @func_13167() /* ty=(Tensor[(9, 11, 8), float32],) */
}

def @func_3178() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float64]) {
  %1040 = fn () -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float64]) {
    %1025 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
    %1026 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
    %1027 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
    %1028 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %1029 = reshape(%1028, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
    %1030 = @func_1971(%1029) /* ty=(Tensor[(8, 30), float32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(8, 30), uint16], Tensor[(7, 9, 12), uint8]) */;
    %1031 = %1030.0;
    %1032 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), float32] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %1033 = shape_of(%1031, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1034 = cast(%1031, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
    %1035 = dyn.reshape(%1032, %1033, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %1036 = %1025.1;
    %1037 = %1026.0;
    %1038 = %1027.0;
    %1039 = divide(%1034, %1035) /* ty=Tensor[(8, 30), float64] */;
    (%1036, %1037, %1038, %1039)
  };
  %1040() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float64]) */
}

def @func_4779() -> (Tensor[(8, 30), float64],) {
  @func_4777() /* ty=(Tensor[(8, 30), float64],) */
}

def @func_2409() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32]) {
  %1041 = @func_1044() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1042 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %1043 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %1044 = %1041.0;
  %1045 = %1042.0;
  %1046 = %1043.2;
  (%1044, %1045, %1046)
}

def @func_4149() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), uint16]) {
  %1047 = @func_3106() /* ty=Tensor[(9, 11, 8), float32] */;
  %1048 = @func_2302() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
  %1049 = %1048.0;
  %1050 = cast(%1049, dtype="uint16") /* ty=Tensor[(9, 11, 8), uint16] */;
  %1051 = shape_of(%1047, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1052 = cast(%1047, dtype="uint16") /* ty=Tensor[(9, 11, 8), uint16] */;
  %1053 = dyn.reshape(%1050, %1051, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1054 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
  %1055 = left_shift(%1052, %1053) /* ty=Tensor[(9, 11, 8), uint16] */;
  (%1054, %1055)
}

def @func_11764() -> (Tensor[(162, 6), float64], Tensor[(6, 14, 7), float32], Tensor[(588), float32]) {
  %1062 = fn () -> (Tensor[(162, 6), float64], Tensor[(6, 14, 7), float32], Tensor[(588), float32]) {
    %1056 = @func_8425() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(12, 9, 9), float64], Tensor[(162, 6), float64], Tensor[(6, 15, 15), bool], Tensor[(9, 11, 8), int16], Tensor[(240), float32]) */;
    %1057 = cast(meta[relay.Constant][32] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
    %1058 = reshape(%1057, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
    %1059 = @func_7211(%1058) /* ty=(Tensor[(6, 14, 7), float32],) */;
    %1060 = %1056.2;
    %1061 = %1059.0;
    (%1060, %1061, meta[relay.Constant][32] /* ty=Tensor[(588), float32] */)
  };
  %1062() /* ty=(Tensor[(162, 6), float64], Tensor[(6, 14, 7), float32], Tensor[(588), float32]) */
}

def @func_7327() -> Tensor[(9, 11, 8), int16] {
  %1063 = @func_3781() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %1063.1
}

def @func_2698(%var_2696: Tensor[(91), uint64], %var_2697: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), float64], Tensor[(3, 7, 13), uint8], Tensor[(91), uint64], Tensor[(273), uint64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(240), float32]) {
  %1084 = fn (%var_2680: Tensor[(91), uint64], %var_2688: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), float64], Tensor[(3, 7, 13), uint8], Tensor[(91), uint64], Tensor[(273), uint64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(240), float32]) {
    %1064 = @func_2302() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
    %1065 = cast(%var_2680, dtype="uint64") /* ty=Tensor[(91), uint64] */;
    %1066 = cast(meta[relay.Constant][33] /* ty=Tensor[(273), uint64] */, dtype="uint64") /* ty=Tensor[(273), uint64] */;
    %1067 = reshape(%1065, newshape=[1, 7, 13]) /* ty=Tensor[(1, 7, 13), uint64] */;
    %1068 = reshape(%1066, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), uint64] */;
    %1069 = @func_1888(%1067, %1068) /* ty=(Tensor[(3, 7, 13), bool], Tensor[(3, 7, 13), uint8]) */;
    %1070 = @func_2145() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
    %1071 = %1070.1;
    %1072 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
    %1073 = cast(%1072, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
    %1074 = shape_of(%1071, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1075 = cast(%1071, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
    %1076 = dyn.reshape(%1073, %1074, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1077 = cast(%var_2688, dtype="float32") /* ty=Tensor[(240), float32] */;
    %1078 = reshape(%1077, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
    %1079 = @func_1971(%1078) /* ty=(Tensor[(8, 30), float32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(8, 30), uint16], Tensor[(7, 9, 12), uint8]) */;
    %1080 = %1064.0;
    %1081 = %1069.1;
    %1082 = minimum(%1075, %1076) /* ty=Tensor[(9, 11, 8), float64] */;
    %1083 = %1079.2;
    (%1080, %1081, %var_2680, meta[relay.Constant][33] /* ty=Tensor[(273), uint64] */, %1082, %1083, %var_2688)
  };
  %1084(%var_2696, %var_2697) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(3, 7, 13), uint8], Tensor[(91), uint64], Tensor[(273), uint64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(240), float32]) */
}

def @func_1104() -> (Tensor[(9, 11, 8), int32],) {
  %1092 = fn () -> (Tensor[(9, 11, 8), int32],) {
    %1085 = @func_1044() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %1086 = %1085.0;
    %1087 = cast(meta[relay.Constant][34] /* ty=Tensor[(9, 11, 8), bool] */, dtype="int32") /* ty=Tensor[(9, 11, 8), int32] */;
    %1088 = shape_of(%1086, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1089 = cast(%1086, dtype="int32") /* ty=Tensor[(9, 11, 8), int32] */;
    %1090 = dyn.reshape(%1087, %1088, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1091 = maximum(%1089, %1090) /* ty=Tensor[(9, 11, 8), int32] */;
    (%1091,)
  };
  %1092() /* ty=(Tensor[(9, 11, 8), int32],) */
}

def @func_1358() -> (Tensor[(9, 11, 8), bool], Tensor[(576), int32]) {
  %1096 = fn () -> (Tensor[(9, 11, 8), bool], Tensor[(576), int32]) {
    %1093 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
    %1094 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
    %1095 = %1093.1;
    (%1094, %1095)
  };
  %1096() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(576), int32]) */
}

def @func_15188(%var_15186: Tensor[(588), float32], %var_15187: Tensor[(756), uint8]) -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(588), float32], Tensor[(8, 30), float32], Tensor[(756), uint8], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int32]) {
  @func_15184(%var_15186, %var_15187) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(588), float32], Tensor[(8, 30), float32], Tensor[(756), uint8], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int32]) */
}

def @func_3835() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) {
  %1097 = @func_2302() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
  %1098 = %1097.1;
  %1099 = @func_3619() /* ty=Tensor[(9, 11, 8), float64] */;
  (%1098, %1099)
}

def @func_11864() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) {
  @func_11862() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) */
}

def @func_3495(%var_3431: Tensor[(16, 12, 15), float32], %var_3432: Tensor[(16, 12, 15), float32]) -> (Tensor[(16, 12, 15), float32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(10, 16, 6), float64], Tensor[(960), float64]) {
  %1100 = cast(%var_3432, dtype="float32") /* ty=Tensor[(16, 12, 15), float32] */;
  %1101 = shape_of(%var_3431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1102 = cast(%var_3431, dtype="float32") /* ty=Tensor[(16, 12, 15), float32] */;
  %1103 = dyn.reshape(%1100, %1101, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1104 = @func_2409() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32]) */;
  %1105 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %1106 = cast(meta[relay.Constant][35] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %1107 = reshape(%1106, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %1108 = add(%1102, %1103) /* ty=Tensor[(16, 12, 15), float32] */;
  %1109 = %1104.0;
  %1110 = %1105.1;
  %1111 = @func_2150(%1107) /* ty=Tensor[(10, 16, 6), float64] */;
  (%1108, %1109, %1110, %1111, meta[relay.Constant][35] /* ty=Tensor[(960), float64] */)
}

def @func_5157() -> (Tensor[(9, 11, 8), int16],) {
  %1112 = @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %1113 = %1112.0;
  (%1113,)
}

def @func_4825() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) {
  @func_4823() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */
}

def @func_7034() -> (Tensor[(9, 11, 8), bool],) {
  @func_7032() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_202(%var_200: Tensor[(7, 9, 12), uint8], %var_201: Tensor[(7, 9, 12), uint8]) -> Tensor[(7, 9, 12), uint8] {
  @func_198(%var_200, %var_201) /* ty=Tensor[(7, 9, 12), uint8] */
}

def @func_12586() -> (Tensor[(9, 11, 8), int32],) {
  @func_12584() /* ty=(Tensor[(9, 11, 8), int32],) */
}

def @func_15108() -> (Tensor[(9, 11, 8), float64],) {
  @func_15106() /* ty=(Tensor[(9, 11, 8), float64],) */
}

def @func_12665() -> (Tensor[(9, 11, 8), bool],) {
  %1115 = fn () -> (Tensor[(9, 11, 8), bool],) {
    %1114 = @func_11416() /* ty=Tensor[(9, 11, 8), bool] */;
    (%1114,)
  };
  %1115() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_7419() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) {
  %1116 = @func_6931() /* ty=(Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), bool]) */;
  %1117 = @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %1118 = @func_6573() /* ty=Tensor[(9, 11, 8), bool] */;
  %1119 = %1116.1;
  %1120 = %1117.0;
  (%1118, %1119, %1120)
}

def @func_4777() -> (Tensor[(8, 30), float64],) {
  %1121 = @func_4538() /* ty=Tensor[(8, 30), float64] */;
  (%1121,)
}

def @func_11929() -> Tensor[(9, 11, 8), float32] {
  %1122 = @func_6901() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float32]) */;
  %1122.0
}

def @func_13704() -> (Tensor[(8, 30), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), int16]) {
  %1130 = fn () -> (Tensor[(8, 30), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), int16]) {
    %1123 = @func_4823() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
    %1124 = @func_12788() /* ty=(Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), bool]) */;
    %1125 = @func_4823() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
    %1126 = @func_12025() /* ty=Tensor[(8, 30), float32] */;
    %1127 = %1123.0;
    %1128 = %1124.0;
    %1129 = %1125.1;
    (%1126, %1127, %1128, %1129)
  };
  %1130() /* ty=(Tensor[(8, 30), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), int16]) */
}

def @func_8356(%var_8355: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int32], Tensor[(8, 30), bool], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float64], Tensor[(9, 11, 8), float32]) {
  %1143 = fn (%var_8324: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int32], Tensor[(8, 30), bool], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float64], Tensor[(9, 11, 8), float32]) {
    %1131 = @func_6797() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
    %1132 = cast(%var_8324, dtype="float32") /* ty=Tensor[(240), float32] */;
    %1133 = reshape(%1132, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
    %1134 = @func_6387(%1133) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(792), float32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16]) */;
    %1135 = @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */;
    %1136 = @func_3177() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float64]) */;
    %1137 = @func_7090() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
    %1138 = %1131.1;
    %1139 = %1134.3;
    %1140 = %1135.0;
    %1141 = %1136.3;
    %1142 = %1137.0;
    (%1138, %1139, %var_8324, %1140, %1141, %1142)
  };
  %1143(%var_8355) /* ty=(Tensor[(9, 11, 8), int32], Tensor[(8, 30), bool], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float64], Tensor[(9, 11, 8), float32]) */
}

def @func_15968(%var_15960: Tensor[(756), uint8]) -> (Tensor[(15, 2, 1), float32], Tensor[(756), uint8], Tensor[(756), uint8]) {
  %1144 = cast(%var_15960, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %1145 = reshape(%1144, newshape=[756]) /* ty=Tensor[(756), uint8] */;
  %1146 = @func_3740(%1145) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(756), uint8], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) */;
  %1147 = @func_6492() /* ty=Tensor[(15, 2, 1), float32] */;
  %1148 = %1146.1;
  (%1147, %1148, %var_15960)
}

def @func_6389(%var_6388: Tensor[(8, 30), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(792), float32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16]) {
  %1167 = fn (%var_6361: Tensor[(8, 30), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(792), float32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16]) {
    %1149 = cast(meta[relay.Constant][36] /* ty=Tensor[(792), float32] */, dtype="float32") /* ty=Tensor[(792), float32] */;
    %1150 = reshape(%1149, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), float32] */;
    %1151 = @func_3405(%1150) /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
    %1152 = @func_4503() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(8, 30), uint16], Tensor[(4, 60), int64]) */;
    %1153 = %1152.1;
    %1154 = cast(%1153, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
    %1155 = cosh(%1154) /* ty=Tensor[(8, 30), float32] */;
    %1156 = cast(%var_6361, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
    %1157 = shape_of(%1155, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1158 = cast(%1155, dtype="bool") /* ty=Tensor[(8, 30), bool] */;
    %1159 = dyn.reshape(%1156, %1157, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %1160 = @func_2430() /* ty=(Tensor[(9, 11, 8), int16],) */;
    %1161 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
    %1162 = %1151.5;
    %1163 = @func_2769() /* ty=Tensor[(9, 11, 8), int32] */;
    %1164 = logical_or(%1158, %1159) /* ty=Tensor[(8, 30), bool] */;
    %1165 = %1160.0;
    %1166 = %1161.1;
    (%1162, meta[relay.Constant][36] /* ty=Tensor[(792), float32] */, %1163, %1164, %1165, %1166)
  };
  %1167(%var_6388) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(792), float32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16]) */
}

def @func_9617(%var_9615: Tensor[(91, 1), uint64]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64], Tensor[(240), float32], Tensor[(91, 1), uint64], Tensor[(240), float32], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(6, 15, 15), bool], Tensor[(9, 11, 8), int16]) {
  @func_9614(%var_9615) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64], Tensor[(240), float32], Tensor[(91, 1), uint64], Tensor[(240), float32], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(6, 15, 15), bool], Tensor[(9, 11, 8), int16]) */
}

def @func_8055() -> (Tensor[(8, 30), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(91), uint64], Tensor[(8, 30), float64]) {
  %1183 = fn () -> (Tensor[(8, 30), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(91), uint64], Tensor[(8, 30), float64]) {
    %1168 = @func_4740() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int16], Tensor[(8, 30), float64]) */;
    %1169 = %1168.1;
    %1170 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 30), float32] */, dtype="int16") /* ty=Tensor[(8, 30), int16] */;
    %1171 = shape_of(%1169, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1172 = cast(%1169, dtype="int16") /* ty=Tensor[(8, 30), int16] */;
    %1173 = dyn.reshape(%1170, %1171, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %1174 = cast(meta[relay.Constant][38] /* ty=Tensor[(91), uint64] */, dtype="uint64") /* ty=Tensor[(91), uint64] */;
    %1175 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 30), float32] */, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
    %1176 = reshape(%1174, newshape=[91]) /* ty=Tensor[(91), uint64] */;
    %1177 = reshape(%1175, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %1178 = @func_2695(%1176, %1177) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(3, 7, 13), uint8], Tensor[(91), uint64], Tensor[(273), uint64], Tensor[(9, 11, 8), float64], Tensor[(756), uint8], Tensor[(240), float32]) */;
    %1179 = left_shift(%1172, %1173) /* ty=Tensor[(8, 30), int16] */;
    %1180 = @func_1497() /* ty=Tensor[(9, 11, 8), float32] */;
    %1181 = %1178.4;
    %1182 = @func_4538() /* ty=Tensor[(8, 30), float64] */;
    (%1179, %1180, %1181, meta[relay.Constant][38] /* ty=Tensor[(91), uint64] */, %1182)
  };
  %1183() /* ty=(Tensor[(8, 30), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(91), uint64], Tensor[(8, 30), float64]) */
}

def @func_11910() -> Tensor[(9, 11, 8), int32] {
  @func_11908() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_13915() -> (Tensor[(9, 11, 8), float64],) {
  %1185 = fn () -> (Tensor[(9, 11, 8), float64],) {
    %1184 = @func_11987() /* ty=Tensor[(9, 11, 8), float64] */;
    (%1184,)
  };
  %1185() /* ty=(Tensor[(9, 11, 8), float64],) */
}

def @func_15819() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(8, 30), float64], Tensor[(9, 11, 8), float64]) {
  %1186 = @func_9911() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1187 = @func_14851() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32]) */;
  %1188 = %1187.1;
  %1189 = cast(%1188, dtype="float64") /* ty=Tensor[(8, 30), float64] */;
  %1190 = @func_12112() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(8, 30), float64]) */;
  %1191 = @func_5225() /* ty=Tensor[(9, 11, 8), int32] */;
  %1192 = %1186.0;
  %1193 = exp(%1189) /* ty=Tensor[(8, 30), float64] */;
  %1194 = %1190.0;
  (%1191, %1192, %1193, %1194)
}

def @func_17001() -> Tensor[(8, 30), float32] {
  %1196 = fn () -> Tensor[(8, 30), float32] {
    %1195 = @func_14851() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(8, 30), float32]) */;
    %1195.1
  };
  %1196() /* ty=Tensor[(8, 30), float32] */
}

def @func_7090() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %1197 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
  %1198 = @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1199 = %1197.0;
  %1200 = @func_6478() /* ty=Tensor[(9, 11, 8), bool] */;
  %1201 = %1198.0;
  (%1199, %1200, %1201)
}

def @func_7011() -> (Tensor[(9, 11, 8), int16],) {
  %1203 = fn () -> (Tensor[(9, 11, 8), int16],) {
    %1202 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
    (%1202,)
  };
  %1203() /* ty=(Tensor[(9, 11, 8), int16],) */
}

def @func_11560() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) {
  @func_11558() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */
}

def @func_12725() -> (Tensor[(?, 9, 13), bool], Tensor[(9, 11, 8), bool]) {
  %1204 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 9, 13), uint64] */, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %1205 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(1, 9, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1206 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 9, 13), uint64] */, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %1207 = dyn.reshape(%1204, %1205, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1208 = @func_10095() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
  %1209 = less_equal(%1206, %1207) /* ty=Tensor[(?, 9, 13), bool] */;
  %1210 = %1208.2;
  (%1209, %1210)
}

def @func_15394() -> Tensor[(9, 11, 8), bool] {
  %1211 = fn () -> Tensor[(9, 11, 8), bool] {
    @func_6573() /* ty=Tensor[(9, 11, 8), bool] */
  };
  %1211() /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_7936() -> Tensor[(9, 11, 8), int32] {
  %1213 = fn () -> Tensor[(9, 11, 8), int32] {
    %1212 = @func_6229() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32]) */;
    %1212.1
  };
  %1213() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_2231() -> Tensor[(9, 11, 8), float64] {
  @func_2229() /* ty=Tensor[(9, 11, 8), float64] */
}

def @func_1973(%var_1972: Tensor[(8, 30), float32]) -> (Tensor[(8, 30), float32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(8, 30), uint16], Tensor[(7, 9, 12), uint8]) {
  %1236 = fn (%var_1946: Tensor[(8, 30), float32]) -> (Tensor[(8, 30), float32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(8, 30), uint16], Tensor[(7, 9, 12), uint8]) {
    %1214 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
    %1215 = %1214.2;
    %1216 = cast(%var_1946, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
    %1217 = shape_of(%1215, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1218 = cast(%1215, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
    %1219 = dyn.reshape(%1216, %1217, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1220 = cast(meta[relay.Constant][41] /* ty=Tensor[(756), uint8] */, dtype="uint8") /* ty=Tensor[(756), uint8] */;
    %1221 = cast(meta[relay.Constant][41] /* ty=Tensor[(756), uint8] */, dtype="uint8") /* ty=Tensor[(756), uint8] */;
    %1222 = reshape(%1220, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
    %1223 = reshape(%1221, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
    %1224 = cast(%var_1946, dtype="uint16") /* ty=Tensor[(8, 30), uint16] */;
    %1225 = shape_of(%1215, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1226 = cast(%1215, dtype="uint16") /* ty=Tensor[(8, 30), uint16] */;
    %1227 = dyn.reshape(%1224, %1225, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %1228 = cast(meta[relay.Constant][41] /* ty=Tensor[(756), uint8] */, dtype="uint8") /* ty=Tensor[(756), uint8] */;
    %1229 = @func_198(%1222, %1223) /* ty=Tensor[(7, 9, 12), uint8] */;
    %1230 = cast(%1229, dtype="uint8") /* ty=Tensor[(7, 9, 12), uint8] */;
    %1231 = reshape(%1228, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
    %1232 = reshape(%1230, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
    %1233 = floor_mod(%1218, %1219) /* ty=Tensor[(8, 30), float32] */;
    %1234 = bitwise_xor(%1226, %1227) /* ty=Tensor[(8, 30), uint16] */;
    %1235 = @func_198(%1231, %1232) /* ty=Tensor[(7, 9, 12), uint8] */;
    (%1233, %1229, meta[relay.Constant][41] /* ty=Tensor[(756), uint8] */, %1234, %1235)
  };
  %1236(%var_1972) /* ty=(Tensor[(8, 30), float32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(8, 30), uint16], Tensor[(7, 9, 12), uint8]) */
}

def @func_8496(%var_8461: Tensor[(1, 18), float64], %var_8470: Tensor[(2, 9, 8), float64], %var_8476: Tensor[(294, 2), float32]) -> (Tensor[(9, 11, 8), bool], Tensor[(1, 18), float64], Tensor[(2, 9, 8), bool], Tensor[(6, 14, 7), float32], Tensor[(294, 2), float32], Tensor[(8, 30), float64]) {
  %1237 = @func_7419() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %1238 = cast(%var_8461, dtype="float64") /* ty=Tensor[(1, 18), float64] */;
  %1239 = reshape(%1238, newshape=[18]) /* ty=Tensor[(18), float64] */;
  %1240 = @func_7541(%1239) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool], Tensor[(2, 10, 4), float64], Tensor[(2, 40), float64], Tensor[(2, 9, 1), float64], Tensor[(18), float64]) */;
  %1241 = %1240.4;
  %1242 = cast(%1241, dtype="bool") /* ty=Tensor[(2, 9, 1), bool] */;
  %1243 = cast(%var_8470, dtype="bool") /* ty=Tensor[(2, 9, 8), bool] */;
  %1244 = cast(%var_8476, dtype="float32") /* ty=Tensor[(294, 2), float32] */;
  %1245 = reshape(%1244, newshape=[6, 14, 7]) /* ty=Tensor[(6, 14, 7), float32] */;
  %1246 = @func_7211(%1245) /* ty=(Tensor[(6, 14, 7), float32],) */;
  %1247 = %1237.0;
  %1248 = equal(%1242, %1243) /* ty=Tensor[(2, 9, 8), bool] */;
  %1249 = %1246.0;
  %1250 = @func_4538() /* ty=Tensor[(8, 30), float64] */;
  (%1247, %var_8461, %1248, %1249, %var_8476, %1250)
}

def @func_5634() -> Tensor[(9, 11, 8), bool] {
  %1251 = @func_5590() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) */;
  %1251.1
}

def @func_5786() -> Tensor[(9, 11, 8), bool] {
  %1252 = @func_4503() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(8, 30), uint16], Tensor[(4, 60), int64]) */;
  %1252.0
}

def @func_16969() -> Tensor[(15, 2, 1), float32] {
  %1254 = fn () -> Tensor[(15, 2, 1), float32] {
    %1253 = @func_16039() /* ty=(Tensor[(15, 2, 1), float32],) */;
    %1253.0
  };
  %1254() /* ty=Tensor[(15, 2, 1), float32] */
}

def @func_7794() -> Tensor[(9, 11, 8), int16] {
  %1255 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
  %1255.1
}

def @func_11250(%var_11248: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(240), float32], Tensor[(9, 11, 8), bool]) {
  @func_11247(%var_11248) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(240), float32], Tensor[(9, 11, 8), bool]) */
}

def @func_16358() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) {
  @func_16356() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) */
}

def @func_4470() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) {
  %1259 = fn () -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) {
    %1256 = @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
    %1257 = %1256.0;
    %1258 = @func_1497() /* ty=Tensor[(9, 11, 8), float32] */;
    (%1257, %1258)
  };
  %1259() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */
}

def @func_5328() -> (Tensor[(9, 11, 8), bool],) {
  %1262 = fn () -> (Tensor[(9, 11, 8), bool],) {
    %1260 = @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
    %1261 = %1260.1;
    (%1261,)
  };
  %1262() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_6902() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float32]) {
  %1267 = fn () -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float32]) {
    %1263 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
    %1264 = @func_3177() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float64]) */;
    %1265 = %1263.1;
    %1266 = %1264.0;
    (%1265, %1266)
  };
  %1267() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float32]) */
}

def @func_7668() -> Tensor[(9, 11, 8), bool] {
  %1269 = fn () -> Tensor[(9, 11, 8), bool] {
    %1268 = @func_5455() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %1268.0
  };
  %1269() /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_13530() -> Tensor[(9, 11, 8), float32] {
  @func_6603() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_14464() -> (Tensor[(9, 11, 8), bool],) {
  @func_14462() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_5227() -> Tensor[(9, 11, 8), int32] {
  @func_5225() /* ty=Tensor[(9, 11, 8), int32] */
}

def @func_7847() -> (Tensor[(9, 11, 8), float64],) {
  %1270 = @func_6023() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool]) */;
  %1271 = %1270.0;
  (%1271,)
}

def @func_6492() -> Tensor[(15, 2, 1), float32] {
  %1272 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 1), float32] */;
  acos(%1272) /* ty=Tensor[(15, 2, 1), float32] */
}

def @func_11264() -> Tensor[(9, 11, 8), int16] {
  %1274 = fn () -> Tensor[(9, 11, 8), int16] {
    %1273 = @func_8602() /* ty=(Tensor[(9, 11, 8), int16],) */;
    %1273.0
  };
  %1274() /* ty=Tensor[(9, 11, 8), int16] */
}

def @func_7591() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32]) {
  %1275 = @func_6797() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
  %1276 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
  %1277 = %1275.1;
  %1278 = %1276.0;
  (%1277, %1278)
}

def @func_11080(%var_11060: Tensor[(5, 2, 14), int64]) -> (Tensor[(5, 2, 14), int64], Tensor[(9, 11, 8), float64]) {
  %1279 = cast(-10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %1280 = cast(%var_11060, dtype="int64") /* ty=Tensor[(5, 2, 14), int64] */;
  %1281 = @func_3120() /* ty=(Tensor[(9, 11, 8), float64],) */;
  %1282 = bitwise_and(%1279, %1280) /* ty=Tensor[(5, 2, 14), int64] */;
  %1283 = %1281.0;
  (%1282, %1283)
}

def @func_13206() -> (Tensor[(9, 7, 6), bool],) {
  %1285 = fn () -> (Tensor[(9, 7, 6), bool],) {
    %1284 = @func_11633() /* ty=Tensor[(9, 7, 6), bool] */;
    (%1284,)
  };
  %1285() /* ty=(Tensor[(9, 7, 6), bool],) */
}

def @func_12213() -> (Tensor[(9, 11, 8), float32],) {
  %1288 = fn () -> (Tensor[(9, 11, 8), float32],) {
    %1286 = @func_4469() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */;
    %1287 = %1286.1;
    (%1287,)
  };
  %1288() /* ty=(Tensor[(9, 11, 8), float32],) */
}

def @func_16995() -> Tensor[(9, 11, 8), float32] {
  %1290 = fn () -> Tensor[(9, 11, 8), float32] {
    %1289 = @func_9802() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32]) */;
    %1289.1
  };
  %1290() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_14593() -> (Tensor[(7, 9, 12), uint8],) {
  @func_14591() /* ty=(Tensor[(7, 9, 12), uint8],) */
}

def @func_11895() -> (Tensor[(9, 11, 8), int32],) {
  @func_11893() /* ty=(Tensor[(9, 11, 8), int32],) */
}

def @func_3263(%var_3261: Tensor[(756), uint8], %var_3262: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int16], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(240), float32]) {
  @func_3259(%var_3261, %var_3262) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(240), float32]) */
}

def @func_15296(%var_15295: Tensor[(2, 1120), float32]) -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32], Tensor[(2, 1120), float32]) {
  %1299 = fn (%var_15292: Tensor[(2, 1120), float32]) -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32], Tensor[(2, 1120), float32]) {
    %1291 = @func_7061() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
    %1292 = cast(%var_15292, dtype="float32") /* ty=Tensor[(2, 1120), float32] */;
    %1293 = cast(%var_15292, dtype="float32") /* ty=Tensor[(2, 1120), float32] */;
    %1294 = reshape(%1292, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
    %1295 = reshape(%1293, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float32] */;
    %1296 = @func_10033(%1294, %1295) /* ty=(Tensor[(16, 10, 14), bool], Tensor[(16, 10, 14), uint8], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int32]) */;
    %1297 = %1291.0;
    %1298 = %1296.3;
    (%1297, %1298, %var_15292)
  };
  %1299(%var_15295) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32], Tensor[(2, 1120), float32]) */
}

def @func_8872(%var_8870: Tensor[(8, 30), float32]) -> Tensor[(8, 30), int64] {
  @func_8869(%var_8870) /* ty=Tensor[(8, 30), int64] */
}

def @func_5292() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %1303 = fn () -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
    %1300 = @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
    %1301 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
    %1302 = %1300.0;
    (%1301, %1302)
  };
  %1303() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */
}

def @func_17153() -> (Tensor[(9, 11, 8), float64],) {
  %1305 = fn () -> (Tensor[(9, 11, 8), float64],) {
    %1304 = @func_1147() /* ty=Tensor[(9, 11, 8), float64] */;
    (%1304,)
  };
  %1305() /* ty=(Tensor[(9, 11, 8), float64],) */
}

def @func_8202(%var_8201: Tensor[(16, 9, 4), float64]) -> (Tensor[(16, 9, 4), float32], Tensor[(9, 11, 8), int32], Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), int32], Tensor[(16, 9, 4), float32], Tensor[(9, 11, 8), float32]) {
  %1321 = fn (%var_8132: Tensor[(16, 9, 4), float64]) -> (Tensor[(16, 9, 4), float32], Tensor[(9, 11, 8), int32], Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), int32], Tensor[(16, 9, 4), float32], Tensor[(9, 11, 8), float32]) {
    %1306 = cast(%var_8132, dtype="float64") /* ty=Tensor[(16, 9, 4), float64] */;
    %1307 = cosh(%1306) /* ty=Tensor[(16, 9, 4), float64] */;
    %1308 = cast(%1307, dtype="float32") /* ty=Tensor[(16, 9, 4), float32] */;
    %1309 = @func_2145() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
    %1310 = @func_6649() /* ty=Tensor[(6, 15, 15), float64] */;
    %1311 = cast(%1310, dtype="float64") /* ty=Tensor[(6, 15, 15), float64] */;
    %1312 = @func_4601() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int32], Tensor[(8, 30), uint16], Tensor[(1, 240), float32], Tensor[(9, 11, 8), float64]) */;
    %1313 = cast(%1307, dtype="float32") /* ty=Tensor[(16, 9, 4), float32] */;
    %1314 = @func_5558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
    %1315 = sqrt(%1308) /* ty=Tensor[(16, 9, 4), float32] */;
    %1316 = %1309.1;
    %1317 = asin(%1311) /* ty=Tensor[(6, 15, 15), float64] */;
    %1318 = %1312.2;
    %1319 = cos(%1313) /* ty=Tensor[(16, 9, 4), float32] */;
    %1320 = %1314.0;
    (%1315, %1316, %1317, %1318, %1319, %1320)
  };
  %1321(%var_8201) /* ty=(Tensor[(16, 9, 4), float32], Tensor[(9, 11, 8), int32], Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), int32], Tensor[(16, 9, 4), float32], Tensor[(9, 11, 8), float32]) */
}

def @func_6196() -> Tensor[(9, 11, 8), bool] {
  %1323 = fn () -> Tensor[(9, 11, 8), bool] {
    %1322 = @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %1322.0
  };
  %1323() /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_11187() -> Tensor[(9, 11, 8), int16] {
  %1325 = fn () -> Tensor[(9, 11, 8), int16] {
    %1324 = @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
    %1324.0
  };
  %1325() /* ty=Tensor[(9, 11, 8), int16] */
}

def @func_15662() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64]) {
  @func_15660() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64]) */
}

def @func_16461() -> Tensor[(9, 11, 8), int16] {
  @func_16459() /* ty=Tensor[(9, 11, 8), int16] */
}

def @func_10873() -> (Tensor[(9, 11, 8), int16],) {
  %1326 = @func_1334() /* ty=(Tensor[(9, 11, 8), int16],) */;
  %1327 = %1326.0;
  (%1327,)
}

def @func_5470() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) {
  @func_5468() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32]) */
}

def @func_6933() -> (Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), bool]) {
  @func_6931() /* ty=(Tensor[(6, 15, 15), float64], Tensor[(9, 11, 8), bool]) */
}

def @func_3407(%var_3406: Tensor[(9, 11, 8), float32]) -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) {
  %1349 = fn (%var_3325: Tensor[(9, 11, 8), float32]) -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) {
    %1328 = @func_1103() /* ty=(Tensor[(9, 11, 8), int32],) */;
    %1329 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
    %1330 = %1329.1;
    %1331 = cast(%var_3325, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
    %1332 = shape_of(%1330, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1333 = cast(%1330, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
    %1334 = dyn.reshape(%1331, %1332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1335 = greater_equal(%1333, %1334) /* ty=Tensor[(9, 11, 8), bool] */;
    %1336 = cast(%1335, dtype="int16") /* ty=Tensor[(9, 11, 8), int16] */;
    %1337 = shape_of(%1330, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1338 = cast(%1330, dtype="int16") /* ty=Tensor[(9, 11, 8), int16] */;
    %1339 = dyn.reshape(%1336, %1337, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %1340 = @func_2929() /* ty=(Tensor[(9, 7, 6), bool],) */;
    %1341 = @func_2145() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
    %1342 = @func_1044() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %1343 = %1328.0;
    %1344 = right_shift(%1338, %1339) /* ty=Tensor[(9, 11, 8), int16] */;
    %1345 = @func_3106() /* ty=Tensor[(9, 11, 8), float32] */;
    %1346 = %1340.0;
    %1347 = %1341.0;
    %1348 = %1342.0;
    (%1343, %1344, %1345, %1346, %1347, %1348)
  };
  %1349(%var_3406) /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */
}

def @func_13505() -> (Tensor[(9, 11, 8), int16],) {
  %1351 = fn () -> (Tensor[(9, 11, 8), int16],) {
    %1350 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
    (%1350,)
  };
  %1351() /* ty=(Tensor[(9, 11, 8), int16],) */
}

def @func_1455(%var_1453: Tensor[(9, 11, 8), bool], %var_1454: Tensor[(756), uint8]) -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8]) {
  @func_1451(%var_1453, %var_1454) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8]) */
}

def @func_10769() -> Tensor[(9, 11, 8), int16] {
  %1353 = fn () -> Tensor[(9, 11, 8), int16] {
    %1352 = @func_4149() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), uint16]) */;
    %1352.0
  };
  %1353() /* ty=Tensor[(9, 11, 8), int16] */
}

def @func_12335() -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) {
  %1358 = fn () -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) {
    %1354 = @func_5590() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool]) */;
    %1355 = %1354.1;
    %1356 = @func_10768() /* ty=Tensor[(9, 11, 8), int16] */;
    %1357 = @func_5786() /* ty=Tensor[(9, 11, 8), bool] */;
    (%1355, %1356, %1357)
  };
  %1358() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */
}

def @func_4761() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) {
  %1359 = @func_2778() /* ty=(Tensor[(9, 11, 8), float32],) */;
  %1360 = @func_4740() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int16], Tensor[(8, 30), float64]) */;
  %1361 = %1359.0;
  %1362 = @func_1147() /* ty=Tensor[(9, 11, 8), float64] */;
  %1363 = %1360.2;
  (%1361, %1362, %1363)
}

def @func_3107() -> Tensor[(9, 11, 8), float32] {
  %1365 = fn () -> Tensor[(9, 11, 8), float32] {
    %1364 = @func_2778() /* ty=(Tensor[(9, 11, 8), float32],) */;
    %1364.0
  };
  %1365() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_4067() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) {
  %1366 = @func_1697() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1367 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
  %1368 = %1366.0;
  (%1367, %1368)
}

def @func_1498() -> Tensor[(9, 11, 8), float32] {
  %1370 = fn () -> Tensor[(9, 11, 8), float32] {
    %1369 = @func_1224() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(8, 30), float32]) */;
    %1369.0
  };
  %1370() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_12112() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), bool], Tensor[(8, 30), float64]) {
  %1371 = @func_4777() /* ty=(Tensor[(8, 30), float64],) */;
  %1372 = @func_10593() /* ty=Tensor[(9, 11, 8), float64] */;
  %1373 = @func_5786() /* ty=Tensor[(9, 11, 8), bool] */;
  %1374 = %1371.0;
  (%1372, %1373, %1374)
}

def @func_12738() -> (Tensor[(9, 11, 8), float64],) {
  %1375 = @func_11987() /* ty=Tensor[(9, 11, 8), float64] */;
  (%1375,)
}

def @func_14332(%var_14331: Tensor[(91), uint64]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(7, 6, 16), float32], Tensor[(672), uint64], Tensor[(3, 7, 13), bool], Tensor[(91), uint64], Tensor[(273), uint64]) {
  %1390 = fn (%var_14327: Tensor[(91), uint64]) -> (Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(7, 6, 16), float32], Tensor[(672), uint64], Tensor[(3, 7, 13), bool], Tensor[(91), uint64], Tensor[(273), uint64]) {
    %1376 = @func_1829() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), int16]) */;
    %1377 = @func_13895() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %1378 = cast(meta[relay.Constant][43] /* ty=Tensor[(672), uint64] */, dtype="uint64") /* ty=Tensor[(672), uint64] */;
    %1379 = reshape(%1378, newshape=[7, 6, 16]) /* ty=Tensor[(7, 6, 16), uint64] */;
    %1380 = cast(%var_14327, dtype="uint64") /* ty=Tensor[(91), uint64] */;
    %1381 = cast(meta[relay.Constant][44] /* ty=Tensor[(273), uint64] */, dtype="uint64") /* ty=Tensor[(273), uint64] */;
    %1382 = reshape(%1380, newshape=[1, 7, 13]) /* ty=Tensor[(1, 7, 13), uint64] */;
    %1383 = reshape(%1381, newshape=[3, 7, 13]) /* ty=Tensor[(3, 7, 13), uint64] */;
    %1384 = @func_1888(%1382, %1383) /* ty=(Tensor[(3, 7, 13), bool], Tensor[(3, 7, 13), uint8]) */;
    %1385 = %1376.0;
    %1386 = %1377.0;
    %1387 = @func_1497() /* ty=Tensor[(9, 11, 8), float32] */;
    %1388 = @func_14168(%1379) /* ty=Tensor[(7, 6, 16), float32] */;
    %1389 = %1384.0;
    (%1385, %1386, %1387, %1388, meta[relay.Constant][43] /* ty=Tensor[(672), uint64] */, %1389, %var_14327, meta[relay.Constant][44] /* ty=Tensor[(273), uint64] */)
  };
  %1390(%var_14331) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(7, 6, 16), float32], Tensor[(672), uint64], Tensor[(3, 7, 13), bool], Tensor[(91), uint64], Tensor[(273), uint64]) */
}

def @func_5559() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) {
  %1395 = fn () -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) {
    %1391 = @func_4761() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */;
    %1392 = @func_3835() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float64]) */;
    %1393 = %1391.0;
    %1394 = %1392.0;
    (%1393, %1394)
  };
  %1395() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */
}

def @func_4242() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), int16]) {
  %1396 = @func_4067() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool]) */;
  %1397 = @func_2379() /* ty=Tensor[(9, 11, 8), int16] */;
  %1398 = %1396.0;
  (%1397, %1398)
}

def @func_3620() -> Tensor[(9, 11, 8), float64] {
  %1400 = fn () -> Tensor[(9, 11, 8), float64] {
    %1399 = @func_2472() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */;
    %1399.0
  };
  %1400() /* ty=Tensor[(9, 11, 8), float64] */
}

def @func_4267(%var_4266: Tensor[(12, 9, 9), float64]) -> Tensor[(12, 9, 9), float64] {
  %1402 = fn (%var_4262: Tensor[(12, 9, 9), float64]) -> Tensor[(12, 9, 9), float64] {
    %1401 = cast(%var_4262, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
    log10(%1401) /* ty=Tensor[(12, 9, 9), float64] */
  };
  %1402(%var_4266) /* ty=Tensor[(12, 9, 9), float64] */
}

def @func_11746() -> (Tensor[(9, 11, 8), bool],) {
  @func_11744() /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_15106() -> (Tensor[(9, 11, 8), float64],) {
  %1403 = @func_3619() /* ty=Tensor[(9, 11, 8), float64] */;
  (%1403,)
}

def @func_11417() -> Tensor[(9, 11, 8), bool] {
  %1405 = fn () -> Tensor[(9, 11, 8), bool] {
    %1404 = @func_7288() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %1404.0
  };
  %1405() /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_11470() -> (Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float64]) {
  @func_11468() /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float64], Tensor[(8, 30), float64]) */
}

def @func_14591() -> (Tensor[(7, 9, 12), uint8],) {
  %1406 = @func_7183() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32], Tensor[(3, 16, 3), int64], Tensor[(144), float32], Tensor[(7, 9, 12), uint8], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
  %1407 = %1406.5;
  (%1407,)
}

def @func_4763() -> (Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) {
  @func_4761() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int16]) */
}

def @func_140(%var_136: Tensor[(6, 8, 12), int32], %var_137: Tensor[(6, 8, 12), int32], %var_138: Tensor[(6, 8, 12), int32], %var_139: Tensor[(6, 8, 12), float64]) -> (Tensor[(6, 8, 12), float64], Tensor[(6, 8, 12), bool], Tensor[(6, 8, 12), float64]) {
  @func_134(%var_136, %var_137, %var_138, %var_139) /* ty=(Tensor[(6, 8, 12), float64], Tensor[(6, 8, 12), bool], Tensor[(6, 8, 12), float64]) */
}

def @func_16430(%var_16429: Tensor[(91), uint64]) -> (Tensor[(15, 2, 1), float32], Tensor[(9, 11, 8), bool], Tensor[(672), uint64], Tensor[(91), uint64]) {
  %1415 = fn (%var_16421: Tensor[(91), uint64]) -> (Tensor[(15, 2, 1), float32], Tensor[(9, 11, 8), bool], Tensor[(672), uint64], Tensor[(91), uint64]) {
    %1408 = @func_7288() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %1409 = cast(%var_16421, dtype="uint64") /* ty=Tensor[(91), uint64] */;
    %1410 = reshape(%1409, newshape=[91]) /* ty=Tensor[(91), uint64] */;
    %1411 = @func_14330(%1410) /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(7, 6, 16), float32], Tensor[(672), uint64], Tensor[(3, 7, 13), bool], Tensor[(91), uint64], Tensor[(273), uint64]) */;
    %1412 = @func_6492() /* ty=Tensor[(15, 2, 1), float32] */;
    %1413 = %1408.0;
    %1414 = %1411.4;
    (%1412, %1413, %1414, %var_16421)
  };
  %1415(%var_16429) /* ty=(Tensor[(15, 2, 1), float32], Tensor[(9, 11, 8), bool], Tensor[(672), uint64], Tensor[(91), uint64]) */
}

def @func_11988() -> Tensor[(9, 11, 8), float64] {
  %1417 = fn () -> Tensor[(9, 11, 8), float64] {
    %1416 = @func_9966() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) */;
    %1416.1
  };
  %1417() /* ty=Tensor[(9, 11, 8), float64] */
}

def @func_10096() -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
  %1422 = fn () -> (Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) {
    %1418 = @func_5623() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %1419 = @func_7935() /* ty=Tensor[(9, 11, 8), int32] */;
    %1420 = %1418.0;
    %1421 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
    (%1419, %1420, %1421)
  };
  %1422() /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */
}

def @func_7032() -> (Tensor[(9, 11, 8), bool],) {
  %1423 = @func_1697() /* ty=(Tensor[(9, 11, 8), bool],) */;
  %1424 = %1423.0;
  (%1424,)
}

def @func_2095(%var_2093: Tensor[(9, 11, 8), bool], %var_2094: Tensor[(240), float32]) -> (Tensor[(9, 11, 8), int8], Tensor[(9, 11, 8), bool], Tensor[(7, 9, 12), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) {
  @func_2091(%var_2093, %var_2094) /* ty=(Tensor[(9, 11, 8), int8], Tensor[(9, 11, 8), bool], Tensor[(7, 9, 12), uint8], Tensor[(240), float32], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float32]) */
}

def @func_4453() -> Tensor[(9, 11, 8), float64] {
  @func_4451() /* ty=Tensor[(9, 11, 8), float64] */
}

def @func_7946() -> Tensor[(9, 11, 8), float32] {
  %1426 = fn () -> Tensor[(9, 11, 8), float32] {
    %1425 = @func_6693() /* ty=(Tensor[(9, 11, 8), float32],) */;
    %1425.0
  };
  %1426() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_6479() -> Tensor[(9, 11, 8), bool] {
  %1428 = fn () -> Tensor[(9, 11, 8), bool] {
    %1427 = @func_5327() /* ty=(Tensor[(9, 11, 8), bool],) */;
    %1427.0
  };
  %1428() /* ty=Tensor[(9, 11, 8), bool] */
}

def @func_15527() -> (Tensor[(9, 11, 8), float32], Tensor[(8, 30), uint16], Tensor[(24, 10), float32]) {
  %1429 = @func_7061() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), int32]) */;
  %1430 = cast(meta[relay.Constant][45] /* ty=Tensor[(24, 10), float32] */, dtype="float32") /* ty=Tensor[(24, 10), float32] */;
  %1431 = reshape(%1430, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
  %1432 = %1429.0;
  %1433 = @func_4196(%1431) /* ty=Tensor[(8, 30), uint16] */;
  (%1432, %1433, meta[relay.Constant][45] /* ty=Tensor[(24, 10), float32] */)
}

def @func_6107() -> Tensor[(9, 11, 8), float32] {
  %1434 = fn () -> Tensor[(9, 11, 8), float32] {
    @func_1497() /* ty=Tensor[(9, 11, 8), float32] */
  };
  %1434() /* ty=Tensor[(9, 11, 8), float32] */
}

def @func_9834() -> (Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) {
  @func_9832() /* ty=(Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), int32]) */
}

def @func_7184() -> (Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32], Tensor[(3, 16, 3), int64], Tensor[(144), float32], Tensor[(7, 9, 12), uint8], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) {
  %1454 = fn () -> (Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32], Tensor[(3, 16, 3), int64], Tensor[(144), float32], Tensor[(7, 9, 12), uint8], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) {
    %1435 = @func_5673() /* ty=(Tensor[(9, 11, 8), float32],) */;
    %1436 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 30), float32] */, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
    %1437 = reshape(%1436, newshape=[8, 30]) /* ty=Tensor[(8, 30), float32] */;
    %1438 = @func_1971(%1437) /* ty=(Tensor[(8, 30), float32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8], Tensor[(8, 30), uint16], Tensor[(7, 9, 12), uint8]) */;
    %1439 = cast(meta[relay.Constant][47] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %1440 = reshape(%1439, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), float32] */;
    %1441 = @func_6090(%1440) /* ty=(Tensor[(9, 11, 8), float64], Tensor[(3, 16, 3), int64]) */;
    %1442 = %1438.1;
    %1443 = cast(%1442, dtype="uint8") /* ty=Tensor[(7, 9, 12), uint8] */;
    %1444 = cast(%1442, dtype="uint8") /* ty=Tensor[(7, 9, 12), uint8] */;
    %1445 = reshape(%1443, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
    %1446 = reshape(%1444, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), uint8] */;
    %1447 = @func_5558() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
    %1448 = @func_5291() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), bool]) */;
    %1449 = %1435.0;
    %1450 = %1441.1;
    %1451 = @func_198(%1445, %1446) /* ty=Tensor[(7, 9, 12), uint8] */;
    %1452 = %1447.0;
    %1453 = %1448.1;
    (%1449, %1442, meta[relay.Constant][46] /* ty=Tensor[(8, 30), float32] */, %1450, meta[relay.Constant][47] /* ty=Tensor[(144), float32] */, %1451, %1452, %1453)
  };
  %1454() /* ty=(Tensor[(9, 11, 8), float32], Tensor[(7, 9, 12), uint8], Tensor[(8, 30), float32], Tensor[(3, 16, 3), int64], Tensor[(144), float32], Tensor[(7, 9, 12), uint8], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */
}

def @func_4997(%var_4962: Tensor[(2, 9, 1), float64]) -> (Tensor[(2, 9, 1), float64], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32], Tensor[(9, 11, 8), int32]) {
  %1455 = cast(%var_4962, dtype="float64") /* ty=Tensor[(2, 9, 1), float64] */;
  %1456 = @func_2409() /* ty=(Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(8, 30), float32]) */;
  %1457 = @func_3106() /* ty=Tensor[(9, 11, 8), float32] */;
  %1458 = cast(%1457, dtype="float32") /* ty=Tensor[(9, 11, 8), float32] */;
  %1459 = reshape(%1458, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), float32] */;
  %1460 = @func_3405(%1459) /* ty=(Tensor[(9, 11, 8), int32], Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), float32], Tensor[(9, 7, 6), bool], Tensor[(9, 11, 8), float32], Tensor[(9, 11, 8), bool]) */;
  %1461 = atan(%1455) /* ty=Tensor[(2, 9, 1), float64] */;
  %1462 = %1456.2;
  %1463 = %1460.0;
  (%1461, %1457, %1462, %1463)
}

def @func_3742(%var_3741: Tensor[(756), uint8]) -> (Tensor[(9, 11, 8), float32], Tensor[(756), uint8], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) {
  %1478 = fn (%var_3681: Tensor[(756), uint8]) -> (Tensor[(9, 11, 8), float32], Tensor[(756), uint8], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) {
    %1464 = @func_3619() /* ty=Tensor[(9, 11, 8), float64] */;
    %1465 = cast(%1464, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
    %1466 = cast(%var_3681, dtype="uint8") /* ty=Tensor[(756), uint8] */;
    %1467 = reshape(%1465, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
    %1468 = reshape(%1466, newshape=[756]) /* ty=Tensor[(756), uint8] */;
    %1469 = @func_1451(%1467, %1468) /* ty=(Tensor[(9, 11, 8), int16], Tensor[(9, 11, 8), bool], Tensor[(9, 11, 8), float32], Tensor[(576), int32], Tensor[(7, 9, 12), uint8], Tensor[(756), uint8]) */;
    %1470 = @func_991() /* ty=Tensor[(9, 11, 8), bool] */;
    %1471 = cast(%1464, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
    %1472 = shape_of(%1470, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1473 = cast(%1470, dtype="float64") /* ty=Tensor[(9, 11, 8), float64] */;
    %1474 = dyn.reshape(%1471, %1472, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1475 = %1469.2;
    %1476 = divide(%1473, %1474) /* ty=Tensor[(9, 11, 8), float64] */;
    %1477 = @func_2229() /* ty=Tensor[(9, 11, 8), float64] */;
    (%1475, %var_3681, %1476, %1477)
  };
  %1478(%var_3741) /* ty=(Tensor[(9, 11, 8), float32], Tensor[(756), uint8], Tensor[(9, 11, 8), float64], Tensor[(9, 11, 8), float64]) */
}

def @func_10875() -> (Tensor[(9, 11, 8), int16],) {
  @func_10873() /* ty=(Tensor[(9, 11, 8), int16],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen708/build/output.py", line 5374, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:56:20] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

