==========mod==========
#[version = "0.0.5"]
def @func_5377() -> (Tensor[(3, 13, 12), float32],) {
  %0 = @func_5067() /* ty=Tensor[(3, 13, 12), float32] */;
  (%0,)
}

def @func_8453() -> (Tensor[(960), float32], Tensor[(3, 13, 12), float32]) {
  %1 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
  %2 = @func_5214() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %3 = %1.2;
  %4 = %2.0;
  (%3, %4)
}

def @func_3616(%var_3580: Tensor[(2, 12, 6), float32], %var_3598: Tensor[(520), float64]) -> (Tensor[(2, 12, 6), float32], Tensor[(468), bool], Tensor[(520), float64], Tensor[(468), bool]) {
  %5 = cast(%var_3580, dtype="float32") /* ty=Tensor[(2, 12, 6), float32] */;
  %6 = cast(%var_3598, dtype="float64") /* ty=Tensor[(520), float64] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %8 = reshape(%6, newshape=[13, 8, 5]) /* ty=Tensor[(13, 8, 5), float64] */;
  %9 = reshape(%7, newshape=[468]) /* ty=Tensor[(468), bool] */;
  %10 = @func_3500(%8, %9) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(468), bool], Tensor[(13, 8, 5), int8], Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32]) */;
  %11 = log2(%5) /* ty=Tensor[(2, 12, 6), float32] */;
  %12 = %10.1;
  (%11, %12, %var_3598, meta[relay.Constant][0] /* ty=Tensor[(468), bool] */)
}

def @func_2407() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) {
  %13 = @func_925() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %14 = %13.1;
  %15 = cast(%14, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
  %16 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %17 = erf(%15) /* ty=Tensor[(3, 13, 12), float64] */;
  %18 = %16.0;
  (%17, %18)
}

def @func_2360() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %19 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %20 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %21 = %19.0;
  %22 = %20.2;
  (%21, %22)
}

def @func_4753() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %23 = @func_2970() /* ty=Tensor[(3, 13, 12), bool] */;
  %24 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  (%23, %24)
}

def @func_4201() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %25 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
  %26 = %25.0;
  %27 = @func_1723() /* ty=Tensor[(3, 13, 12), float32] */;
  %28 = @func_3070() /* ty=Tensor[(3, 13, 12), bool] */;
  (%26, %27, %28)
}

def @func_1087() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %29 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  %30 = @func_441() /* ty=Tensor[(3, 13, 12), float32] */;
  %31 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  (%29, %30, %31)
}

def @func_3070() -> Tensor[(3, 13, 12), bool] {
  %32 = @func_3015() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %33 = %32.0;
  %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 13, 12), bool] */, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%33, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%36, %37) /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_1235(%var_1218: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), float32], Tensor[(6, 16, 10), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool]) {
  %38 = cast(%var_1218, dtype="float32") /* ty=Tensor[(960), float32] */;
  %39 = reshape(%38, newshape=[6, 16, 10]) /* ty=Tensor[(6, 16, 10), float32] */;
  %40 = @func_1180(%39) /* ty=(Tensor[(6, 16, 10), float32], Tensor[(3, 13, 12), bool]) */;
  %41 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %42 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  %43 = %40.0;
  %44 = %41.0;
  (%42, %43, %var_1218, %44)
}

def @func_9079() -> Tensor[(3, 13, 12), float32] {
  %45 = @func_962() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) */;
  %45.0
}

def @func_9624() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %46 = @func_6804() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %47 = @func_6160() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %48 = %46.0;
  %49 = %47.0;
  (%48, %49)
}

def @func_8416() -> Tensor[(3, 13, 12), float32] {
  %50 = @func_4117() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) */;
  %50.0
}

def @func_13164() -> Tensor[(11, 4, 8), float32] {
  %51 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
  acosh(%51) /* ty=Tensor[(11, 4, 8), float32] */
}

def @func_4496(%var_4488: bool, %var_4489: Tensor[(364), bool]) -> (Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool]) {
  %52 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %54 = reshape(%53, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %55 = @func_1235(%54) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(6, 16, 10), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool]) */;
  %56 = @func_2585() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %57 = cast(%var_4488, dtype="bool") /* ty=bool */;
  %58 = cast(%var_4489, dtype="bool") /* ty=Tensor[(364), bool] */;
  %59 = reshape(%57, newshape=[]) /* ty=bool */;
  %60 = reshape(%58, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), bool] */;
  %61 = @func_3097(%59, %60) /* ty=(Tensor[(2, 14, 13), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %62 = %52.1;
  %63 = %55.2;
  %64 = %56.1;
  %65 = %61.1;
  (%62, %63, meta[relay.Constant][3] /* ty=Tensor[(960), float32] */, %64, %65, %var_4488, %var_4489)
}

def @func_6263() -> (Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) {
  %66 = @func_2735() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %67 = cast(meta[relay.Constant][4] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %68 = %66.0;
  %69 = cast(%68, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %70 = reshape(%67, newshape=[13, 8, 5]) /* ty=Tensor[(13, 8, 5), float64] */;
  %71 = reshape(%69, newshape=[468]) /* ty=Tensor[(468), bool] */;
  %72 = @func_3500(%70, %71) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(468), bool], Tensor[(13, 8, 5), int8], Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32]) */;
  %73 = @func_3919() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %74 = %72.4;
  %75 = %73.0;
  (%68, %74, meta[relay.Constant][4] /* ty=Tensor[(520), float64] */, %75)
}

def @func_5930() -> Tensor[(3, 13, 12), bool] {
  %76 = @func_5715() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %76.0
}

def @func_11287(%var_11272: Tensor[(6, 14, 15), uint16], %var_11283: Tensor[(600), float64]) -> (Tensor[(6, 14, 15), uint16], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8], Tensor[(600), float64]) {
  %77 = cast(%var_11272, dtype="uint16") /* ty=Tensor[(6, 14, 15), uint16] */;
  %78 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(6, 14, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 14, 15), uint16] */, dtype="uint16") /* ty=Tensor[(6, 14, 15), uint16] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %81 = cast(%var_11283, dtype="float64") /* ty=Tensor[(600), float64] */;
  %82 = reshape(%81, newshape=[12, 50]) /* ty=Tensor[(12, 50), float64] */;
  %83 = @func_6598(%82) /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(12, 50), float64], Tensor[(520), float64]) */;
  %84 = maximum(%79, %80) /* ty=Tensor[(6, 14, 15), uint16] */;
  %85 = @func_6627() /* ty=Tensor[(3, 13, 12), float32] */;
  %86 = %83.1;
  (%84, %85, %86, %var_11283)
}

def @func_395() -> (Tensor[(3, 13, 12), bool],) {
  %87 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 13, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 13, 1), float32] */;
  %88 = rsqrt(%87) /* ty=Tensor[(3, 13, 1), float32] */;
  %89 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 13, 1), float32] */, dtype="bool") /* ty=Tensor[(3, 13, 1), bool] */;
  %90 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 13, 12), float32] */, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %91 = greater(%89, %90) /* ty=Tensor[(3, 13, 12), bool] */;
  %92 = cast(%88, dtype="bool") /* ty=Tensor[(3, 13, 1), bool] */;
  %93 = cast(%91, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %94 = greater_equal(%92, %93) /* ty=Tensor[(3, 13, 12), bool] */;
  (%94,)
}

def @func_8105() -> Tensor[(3, 13, 12), bool] {
  %95 = @func_2028() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %95.0
}

def @func_3015() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %96 = @func_2104() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %97 = %96.1;
  %98 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  (%97, %98)
}

def @func_8919() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %99 = @func_3919() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %100 = %99.0;
  %101 = @func_2637() /* ty=Tensor[(3, 13, 12), bool] */;
  %102 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  (%100, %101, %102)
}

def @func_1481() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %103 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %104 = %103.0;
  %105 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  (%104, %105)
}

def @func_1120() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) {
  %106 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %107 = %106.0;
  %108 = cast(%107, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
  %109 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %110 = log2(%108) /* ty=Tensor[(3, 13, 12), float64] */;
  %111 = %109.2;
  (%110, %111)
}

def @func_8343(%var_8312: Tensor[(2, 10, 1), float64]) -> (Tensor[(2, 10, 1), float32], Tensor[(3, 13, 12), float64]) {
  %112 = cast(%var_8312, dtype="float64") /* ty=Tensor[(2, 10, 1), float64] */;
  %113 = sinh(%112) /* ty=Tensor[(2, 10, 1), float64] */;
  %114 = cast(%113, dtype="float32") /* ty=Tensor[(2, 10, 1), float32] */;
  %115 = @func_2870() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(11, 10, 11), float64]) */;
  %116 = cos(%114) /* ty=Tensor[(2, 10, 1), float32] */;
  %117 = %115.0;
  (%116, %117)
}

def @func_6302() -> Tensor[(3, 13, 12), bool] {
  @func_5930() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_11578() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %118 = @func_4604() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %119 = @func_6749() /* ty=Tensor[(3, 13, 12), float32] */;
  %120 = %118.0;
  %121 = @func_6627() /* ty=Tensor[(3, 13, 12), float32] */;
  (%119, %120, %121)
}

def @func_12340() -> Tensor[(3, 13, 12), bool] {
  %122 = @func_10525() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %122.0
}

def @func_12396() -> (Tensor[(1210), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %123 = @func_8954() /* ty=Tensor[(1210), bool] */;
  %124 = cast(%123, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %125 = sinh(%124) /* ty=Tensor[(1210), float64] */;
  %126 = @func_7047() /* ty=Tensor[(3, 13, 12), float32] */;
  %127 = @func_5067() /* ty=Tensor[(3, 13, 12), float32] */;
  (%125, %126, %127)
}

def @func_2948(%var_2897: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), bool], Tensor[(3, 13, 12), float32]) {
  %128 = cast(%var_2897, dtype="float32") /* ty=Tensor[(960), float32] */;
  %129 = reshape(%128, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %130 = @func_2220(%129) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(960), float32]) */;
  %131 = @func_2104() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %132 = @func_2870() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(11, 10, 11), float64]) */;
  %133 = %132.3;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(11, 10, 11), float32] */;
  %135 = asinh(%134) /* ty=Tensor[(11, 10, 11), float32] */;
  %136 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 10, 11), float32] */, dtype="bool") /* ty=Tensor[(11, 10, 11), bool] */;
  %137 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%135, dtype="bool") /* ty=Tensor[(11, 10, 11), bool] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %140 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %141 = %130.0;
  %142 = %131.0;
  %143 = greater(%138, %139) /* ty=Tensor[(11, 10, 11), bool] */;
  %144 = %140.1;
  (%141, %var_2897, %142, %143, %144)
}

def @func_6690() -> Tensor[(3, 13, 12), float64] {
  %145 = @func_4370() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %145.0
}

def @func_9693() -> (Tensor[(18), float64], Tensor[(3, 13, 12), float64]) {
  %146 = @func_7390() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
  %147 = %146.2;
  %148 = cast(%147, dtype="float64") /* ty=Tensor[(18), float64] */;
  %149 = @func_9507() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) */;
  %150 = sin(%148) /* ty=Tensor[(18), float64] */;
  %151 = %149.3;
  (%150, %151)
}

def @func_3059() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %152 = @func_3015() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %153 = cast(meta[relay.Constant][9] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %154 = reshape(%153, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %155 = @func_2220(%154) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(960), float32]) */;
  %156 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %157 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %158 = %152.1;
  %159 = %155.5;
  %160 = %156.0;
  %161 = %157.0;
  (%158, %159, meta[relay.Constant][9] /* ty=Tensor[(960), float32] */, %160, %161)
}

def @func_10269() -> (Tensor[(2, 480), float32],) {
  %162 = @func_9761() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(2, 480), float32]) */;
  %163 = %162.3;
  (%163,)
}

def @func_8573() -> (Tensor[(3, 13, 12), float32],) {
  %164 = @func_1723() /* ty=Tensor[(3, 13, 12), float32] */;
  (%164,)
}

def @func_6478() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(520), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %165 = @func_3687() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %166 = @func_5715() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %167 = @func_6263() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
  %168 = @func_5626() /* ty=(Tensor[(11, 2, 15), float64], Tensor[(13, 8, 5), int8], Tensor[(1, 468), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(10, 52), int16]) */;
  %169 = @func_2052() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %170 = %165.0;
  %171 = @func_6197() /* ty=Tensor[(3, 13, 12), bool] */;
  %172 = %166.0;
  %173 = %167.2;
  %174 = %168.4;
  %175 = %169.0;
  (%170, %171, %172, %173, %174, %175)
}

def @func_10487() -> (Tensor[(3, 13, 12), bool], Tensor[(14, 6, 13), int16], int16, Tensor[(1092), int16]) {
  %176 = @func_7600() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64]) */;
  %177 = cast(meta[relay.Constant][10] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %178 = cast(meta[relay.Constant][11] /* ty=Tensor[(1092), int16] */, dtype="int16") /* ty=Tensor[(1092), int16] */;
  %179 = reshape(%177, newshape=[]) /* ty=int16 */;
  %180 = reshape(%178, newshape=[14, 6, 13]) /* ty=Tensor[(14, 6, 13), int16] */;
  %181 = %176.0;
  %182 = @func_7608(%179, %180) /* ty=Tensor[(14, 6, 13), int16] */;
  (%181, %182, meta[relay.Constant][10] /* ty=int16 */, meta[relay.Constant][11] /* ty=Tensor[(1092), int16] */)
}

def @func_2735() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %183 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %184 = %183.1;
  %185 = cast(%184, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
  %186 = reshape(%185, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), float32] */;
  %187 = @func_1871(%186) /* ty=Tensor[(3, 13, 12), bool] */;
  (%184, %187)
}

def @func_1374() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) {
  %188 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %189 = @func_1255() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %190 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %191 = %188.2;
  %192 = cast(%191, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %193 = reshape(%192, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), bool] */;
  %194 = @func_1039(%193) /* ty=(Tensor[(3, 13, 12), int8],) */;
  %195 = %189.0;
  %196 = %190.0;
  %197 = %194.0;
  (%191, %195, %196, %197)
}

def @func_4370() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %198 = @func_2407() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) */;
  %199 = @func_2360() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %200 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %201 = %198.0;
  %202 = %199.0;
  %203 = %200.1;
  (%201, %202, %203)
}

def @func_1518(%var_1504: Tensor[(3, 13, 12), bool]) -> Tensor[(3, 13, 12), float64] {
  %204 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %205 = %204.0;
  %206 = cast(%var_1504, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
  %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%205, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%208, %209) /* ty=Tensor[(3, 13, 12), float64] */
}

def @func_4117() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) {
  %210 = @func_3919() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %211 = %210.1;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
  %213 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %214 = @func_1969() /* ty=Tensor[(3, 13, 12), float32] */;
  %215 = cos(%212) /* ty=Tensor[(3, 13, 12), float32] */;
  %216 = %213.0;
  (%214, %215, %216)
}

def @func_1255() -> (Tensor[(3, 13, 12), float32],) {
  %217 = @func_441() /* ty=Tensor[(3, 13, 12), float32] */;
  (%217,)
}

def @func_5908() -> (Tensor[(960), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) {
  %218 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
  %219 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %220 = @func_2870() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(11, 10, 11), float64]) */;
  %221 = %218.2;
  %222 = %219.1;
  %223 = %220.2;
  (%221, %222, %223)
}

def @func_3687() -> (Tensor[(3, 13, 12), bool], Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %224 = @func_962() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) */;
  %225 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %226 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  %227 = %224.2;
  %228 = %225.2;
  %229 = @func_2637() /* ty=Tensor[(3, 13, 12), bool] */;
  (%226, %227, %228, %229)
}

def @func_10879() -> (Tensor[(3, 13, 12), float32], Tensor[(9, 3, 5), bool], Tensor[(135), int32]) {
  %230 = cast(meta[relay.Constant][12] /* ty=Tensor[(135), int32] */, dtype="int32") /* ty=Tensor[(135), int32] */;
  %231 = reshape(%230, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), int32] */;
  %232 = @func_4214(%231) /* ty=(Tensor[(9, 3, 5), bool],) */;
  %233 = @func_9582() /* ty=Tensor[(3, 13, 12), float32] */;
  %234 = %232.0;
  (%233, %234, meta[relay.Constant][12] /* ty=Tensor[(135), int32] */)
}

def @func_5067() -> Tensor[(3, 13, 12), float32] {
  %235 = @func_1481() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %235.1
}

def @func_2585() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %236 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %237 = @func_2307() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %238 = %236.0;
  %239 = %237.1;
  (%238, %239)
}

def @func_3376() -> (Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float32]) {
  %240 = @func_3255() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %241 = @func_3273() /* ty=Tensor[(3, 13, 12), int8] */;
  %242 = %240.0;
  (%241, %242)
}

def @func_8783(%var_8773: Tensor[(2, 15, 13), float32]) -> Tensor[(2, 15, 13), bool] {
  %243 = cast(%var_8773, dtype="bool") /* ty=Tensor[(2, 15, 13), bool] */;
  %244 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(2, 15, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 15, 13), float32] */, dtype="bool") /* ty=Tensor[(2, 15, 13), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%245, %246) /* ty=Tensor[(2, 15, 13), bool] */
}

def @func_11414() -> (Tensor[(3, 13, 12), bool],) {
  %247 = @func_8662() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %248 = %247.1;
  (%248,)
}

def @func_6287() -> (Tensor[(3, 13, 12), float32],) {
  %249 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %250 = %249.0;
  (%250,)
}

def @func_5335() -> (Tensor[(3, 13, 12), float32], Tensor[(960), float32]) {
  %251 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
  %252 = @func_3422() /* ty=Tensor[(3, 13, 12), float32] */;
  %253 = %251.2;
  (%252, %253)
}

def @func_575() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %254 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %255 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  %256 = %254.0;
  (%255, %256)
}

def @func_11197() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %257 = @func_10809() /* ty=Tensor[(3, 13, 12), float32] */;
  %258 = @func_3453() /* ty=Tensor[(3, 13, 12), bool] */;
  (%257, %258)
}

def @func_9329(%var_9312: Tensor[(18), float32], %var_9313: Tensor[(1, 520), float64]) -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8], Tensor[(520), float64], Tensor[(18), float32], Tensor[(1, 520), float64], Tensor[(3, 13, 12), bool]) {
  %259 = @func_9007() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8]) */;
  %260 = @func_9007() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8]) */;
  %261 = cast(%var_9312, dtype="float32") /* ty=Tensor[(18), float32] */;
  %262 = cast(%var_9313, dtype="float64") /* ty=Tensor[(1, 520), float64] */;
  %263 = cast(%var_9312, dtype="float64") /* ty=Tensor[(18), float64] */;
  %264 = reshape(%261, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float32] */;
  %265 = reshape(%262, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %266 = reshape(%263, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
  %267 = @func_5823(%264, %265, %266) /* ty=(Tensor[(520), float64], Tensor[(144), float32], Tensor[(520), float64], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool], Tensor[(3, 3, 2), float32], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool], Tensor[(3, 3, 2), int32], Tensor[(3, 13, 12), float64], Tensor[(3, 3, 2), float64]) */;
  %268 = @func_2028() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %269 = %259.0;
  %270 = %260.1;
  %271 = %267.2;
  %272 = %268.1;
  (%269, %270, %271, %var_9312, %var_9313, %272)
}

def @func_3255() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %273 = @func_1255() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %274 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %275 = @func_2360() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %276 = @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %277 = %273.0;
  %278 = %274.1;
  %279 = %275.1;
  %280 = %276.3;
  (%277, %278, %279, %280)
}

def @func_4160() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %281 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
  %282 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %283 = %281.0;
  %284 = %282.1;
  (%283, %284)
}

def @func_5740() -> (Tensor[(3, 13, 12), bool],) {
  %285 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %286 = %285.2;
  (%286,)
}

def @func_6358() -> Tensor[(3, 13, 12), float32] {
  %287 = @func_3188() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %287.0
}

def @func_2220(%var_2213: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(960), float32]) {
  %288 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %289 = @func_1481() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %290 = @func_1481() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %291 = %290.1;
  %292 = cast(%291, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
  %293 = @func_925() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %294 = @func_2104() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %295 = cast(%var_2213, dtype="float32") /* ty=Tensor[(960), float32] */;
  %296 = reshape(%295, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %297 = @func_1664(%296) /* ty=(Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */;
  %298 = %288.0;
  %299 = %289.0;
  %300 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  %301 = log10(%292) /* ty=Tensor[(3, 13, 12), float64] */;
  %302 = %293.1;
  %303 = %294.0;
  %304 = %297.6;
  (%298, %299, %300, %301, %302, %303, %304, %var_2213)
}

def @func_10793() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) {
  %305 = @func_2870() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(11, 10, 11), float64]) */;
  %306 = @func_6160() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %307 = @func_6197() /* ty=Tensor[(3, 13, 12), bool] */;
  %308 = %305.0;
  %309 = %306.0;
  (%307, %308, %309)
}

def @func_6825() -> (Tensor[(11, 2, 15), float64],) {
  %310 = @func_2708() /* ty=(Tensor[(11, 2, 15), float64], Tensor[(11, 2, 15), float64]) */;
  %311 = %310.1;
  (%311,)
}

def @func_10525() -> (Tensor[(3, 13, 12), bool],) {
  %312 = @func_2028() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %313 = %312.0;
  (%313,)
}

def @func_5823(%var_5756: Tensor[(3, 3, 2), float32], %var_5762: Tensor[(520), float64], %var_5800: Tensor[(3, 3, 2), float64]) -> (Tensor[(520), float64], Tensor[(144), float32], Tensor[(520), float64], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool], Tensor[(3, 3, 2), float32], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool], Tensor[(3, 3, 2), int32], Tensor[(3, 13, 12), float64], Tensor[(3, 3, 2), float64]) {
  %314 = cast(meta[relay.Constant][14] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %315 = cast(%var_5762, dtype="float64") /* ty=Tensor[(520), float64] */;
  %316 = reshape(%314, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %317 = reshape(%315, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %318 = @func_3616(%316, %317) /* ty=(Tensor[(2, 12, 6), float32], Tensor[(468), bool], Tensor[(520), float64], Tensor[(468), bool]) */;
  %319 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %320 = cast(meta[relay.Constant][15] /* ty=Tensor[(364), bool] */, dtype="bool") /* ty=Tensor[(364), bool] */;
  %321 = reshape(%319, newshape=[]) /* ty=bool */;
  %322 = reshape(%320, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), bool] */;
  %323 = @func_3097(%321, %322) /* ty=(Tensor[(2, 14, 13), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %324 = cast(%var_5756, dtype="float32") /* ty=Tensor[(3, 3, 2), float32] */;
  %325 = asin(%324) /* ty=Tensor[(3, 3, 2), float32] */;
  %326 = cast(%325, dtype="float32") /* ty=Tensor[(3, 3, 2), float32] */;
  %327 = @func_5484() /* ty=(Tensor[(3, 13, 12), int8],) */;
  %328 = cast(%325, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %329 = sin(%328) /* ty=Tensor[(3, 3, 2), float64] */;
  %330 = cast(%329, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %331 = sigmoid(%330) /* ty=Tensor[(3, 3, 2), float64] */;
  %332 = cast(%var_5800, dtype="int32") /* ty=Tensor[(3, 3, 2), int32] */;
  %333 = shape_of(%331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%331, dtype="int32") /* ty=Tensor[(3, 3, 2), int32] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %336 = @func_2407() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) */;
  %337 = cast(%331, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %338 = %318.2;
  %339 = %323.2;
  %340 = acos(%326) /* ty=Tensor[(3, 3, 2), float32] */;
  %341 = %327.0;
  %342 = @func_2637() /* ty=Tensor[(3, 13, 12), bool] */;
  %343 = bitwise_xor(%334, %335) /* ty=Tensor[(3, 3, 2), int32] */;
  %344 = %336.1;
  %345 = erf(%337) /* ty=Tensor[(3, 3, 2), float64] */;
  (%338, meta[relay.Constant][14] /* ty=Tensor[(144), float32] */, %var_5762, %339, False /* ty=bool */, meta[relay.Constant][15] /* ty=Tensor[(364), bool] */, %340, %341, %342, %343, %344, %345)
}

def @func_469() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %346 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %347 = @func_441() /* ty=Tensor[(3, 13, 12), float32] */;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
  %349 = %346.0;
  %350 = asin(%348) /* ty=Tensor[(3, 13, 12), float32] */;
  (%349, %350)
}

def @func_1664(%var_1635: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) {
  %351 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %352 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %353 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %354 = cast(%var_1635, dtype="float32") /* ty=Tensor[(960), float32] */;
  %355 = reshape(%354, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %356 = @func_1235(%355) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(6, 16, 10), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool]) */;
  %357 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %358 = %351.3;
  %359 = %352.0;
  %360 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  %361 = %353.2;
  %362 = %356.2;
  %363 = %357.1;
  (%358, %359, %360, %361, %362, %var_1635, %363)
}

def @func_12443(%var_12431: float64, %var_12432: Tensor[(1, 13, 12), float64]) -> (Tensor[(?, 13, 12), bool],) {
  %364 = cast(%var_12431, dtype="float64") /* ty=float64 */;
  %365 = cast(%var_12432, dtype="float64") /* ty=Tensor[(1, 13, 12), float64] */;
  %366 = power(%364, %365) /* ty=Tensor[(1, 13, 12), float64] */;
  %367 = cast(%var_12432, dtype="bool") /* ty=Tensor[(1, 13, 12), bool] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="bool") /* ty=Tensor[(1, 13, 12), bool] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %371 = equal(%369, %370) /* ty=Tensor[(?, 13, 12), bool] */;
  (%371,)
}

def @func_2812(%var_2796: int16, %var_2797: Tensor[(5, 15, 10), int16], %var_2810: Tensor[(60, 16), float32]) -> (Tensor[(5, 15, 10), int16], Tensor[(3, 13, 12), float64], Tensor[(60, 16), float32]) {
  %372 = cast(%var_2796, dtype="int16") /* ty=int16 */;
  %373 = cast(%var_2797, dtype="int16") /* ty=Tensor[(5, 15, 10), int16] */;
  %374 = cast(%var_2810, dtype="float32") /* ty=Tensor[(60, 16), float32] */;
  %375 = reshape(%374, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %376 = @func_1664(%375) /* ty=(Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */;
  %377 = maximum(%372, %373) /* ty=Tensor[(5, 15, 10), int16] */;
  %378 = %376.1;
  (%377, %378, %var_2810)
}

def @func_8662() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %379 = @func_2539() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %380 = @func_3070() /* ty=Tensor[(3, 13, 12), bool] */;
  %381 = %379.1;
  (%380, %381)
}

def @func_4604() -> (Tensor[(3, 13, 12), float32],) {
  %382 = @func_2360() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %383 = %382.1;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
  %385 = atanh(%384) /* ty=Tensor[(3, 13, 12), float32] */;
  (%385,)
}

def @func_11978() -> (Tensor[(2, 480), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %386 = @func_10269() /* ty=(Tensor[(2, 480), float32],) */;
  %387 = @func_4138() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %388 = @func_962() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) */;
  %389 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
  %390 = %386.0;
  %391 = %387.0;
  %392 = @func_6870() /* ty=Tensor[(3, 13, 12), float32] */;
  %393 = %388.0;
  %394 = @func_2637() /* ty=Tensor[(3, 13, 12), bool] */;
  %395 = %389.0;
  (%390, %391, %392, %393, %394, %395)
}

def @func_3188() -> (Tensor[(3, 13, 12), float32],) {
  %396 = @func_1723() /* ty=Tensor[(3, 13, 12), float32] */;
  (%396,)
}

def @func_3453() -> Tensor[(3, 13, 12), bool] {
  %397 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %397.0
}

def @func_5993() -> (Tensor[(3, 13, 12), float32],) {
  %398 = @func_925() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %399 = %398.1;
  (%399,)
}

def @func_1723() -> Tensor[(3, 13, 12), float32] {
  @func_441() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_7510() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %400 = @func_4398() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %401 = @func_5626() /* ty=(Tensor[(11, 2, 15), float64], Tensor[(13, 8, 5), int8], Tensor[(1, 468), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(10, 52), int16]) */;
  %402 = %400.0;
  %403 = %401.5;
  %404 = @func_6749() /* ty=Tensor[(3, 13, 12), float32] */;
  (%402, %403, %404)
}

def @func_12763() -> Tensor[(1210), float32] {
  %405 = @func_5865() /* ty=(Tensor[(1210), float64], Tensor[(1210), float32]) */;
  %405.1
}

def @func_4557(%var_4554: Tensor[(4, 12, 5), float32]) -> Tensor[(4, 12, 5), float32] {
  %406 = cast(%var_4554, dtype="float32") /* ty=Tensor[(4, 12, 5), float32] */;
  asin(%406) /* ty=Tensor[(4, 12, 5), float32] */
}

def @func_9237() -> Tensor[(13, 13, 16), float32] {
  %407 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 13, 16), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
  rsqrt(%407) /* ty=Tensor[(13, 13, 16), float32] */
}

def @func_13072() -> (Tensor[(3, 13, 12), float64], Tensor[(14, 6, 13), int16], Tensor[(3, 13, 12), float32]) {
  %408 = @func_4370() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %409 = @func_10487() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(14, 6, 13), int16], int16, Tensor[(1092), int16]) */;
  %410 = @func_5993() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %411 = %408.0;
  %412 = %409.1;
  %413 = %410.0;
  (%411, %412, %413)
}

def @func_10678(%var_10646: Tensor[(5, 7, 2), float32]) -> (Tensor[(3, 13, 12), float64], Tensor[(520), float64], Tensor[(3, 13, 12), int8], Tensor[(5, 7, 2), int64], Tensor[(5, 7, 2), uint32]) {
  %414 = @func_7390() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
  %415 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %416 = @func_9397() /* ty=(Tensor[(5, 7, 2), float32],) */;
  %417 = %416.0;
  %418 = cast(%417, dtype="float64") /* ty=Tensor[(5, 7, 2), float64] */;
  %419 = sigmoid(%418) /* ty=Tensor[(5, 7, 2), float64] */;
  %420 = cast(%var_10646, dtype="uint16") /* ty=Tensor[(5, 7, 2), uint16] */;
  %421 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%417, dtype="uint16") /* ty=Tensor[(5, 7, 2), uint16] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %424 = bitwise_and(%422, %423) /* ty=Tensor[(5, 7, 2), uint16] */;
  %425 = cast(%424, dtype="int64") /* ty=Tensor[(5, 7, 2), int64] */;
  %426 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%419, dtype="int64") /* ty=Tensor[(5, 7, 2), int64] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %429 = cast(%var_10646, dtype="uint32") /* ty=Tensor[(5, 7, 2), uint32] */;
  %430 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%419, dtype="uint32") /* ty=Tensor[(5, 7, 2), uint32] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %433 = @func_1436() /* ty=Tensor[(3, 13, 12), float64] */;
  %434 = %414.3;
  %435 = %415.3;
  %436 = minimum(%427, %428) /* ty=Tensor[(5, 7, 2), int64] */;
  %437 = logical_xor(%431, %432) /* ty=Tensor[(5, 7, 2), uint32] */;
  (%433, %434, %435, %436, %437)
}

def @func_11515() -> Tensor[(3, 13, 12), bool] {
  %438 = @func_7472() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %438.0
}

def @func_9215(%var_9201: Tensor[(18), float32]) -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 3, 2), float64], Tensor[(18), float32], Tensor[(1, 520), float64]) {
  %439 = @func_9007() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8]) */;
  %440 = @func_4398() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %441 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
  %442 = cast(%var_9201, dtype="float32") /* ty=Tensor[(18), float32] */;
  %443 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 520), float64] */, dtype="float64") /* ty=Tensor[(1, 520), float64] */;
  %444 = cast(%var_9201, dtype="float64") /* ty=Tensor[(18), float64] */;
  %445 = reshape(%442, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float32] */;
  %446 = reshape(%443, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %447 = reshape(%444, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
  %448 = @func_5823(%445, %446, %447) /* ty=(Tensor[(520), float64], Tensor[(144), float32], Tensor[(520), float64], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool], Tensor[(3, 3, 2), float32], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool], Tensor[(3, 3, 2), int32], Tensor[(3, 13, 12), float64], Tensor[(3, 3, 2), float64]) */;
  %449 = @func_6643() /* ty=Tensor[(3, 13, 12), bool] */;
  %450 = %439.1;
  %451 = %440.0;
  %452 = %441.2;
  %453 = %448.11;
  (%449, %450, %451, %452, %453, %var_9201, meta[relay.Constant][17] /* ty=Tensor[(1, 520), float64] */)
}

def @func_12731() -> (Tensor[(11, 2, 15), float64],) {
  %454 = @func_6861() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(11, 2, 15), float64], Tensor[(3, 13, 12), float32]) */;
  %455 = %454.1;
  (%455,)
}

def @func_11043(%var_11025: Tensor[(12, 3, 15), float64], %var_11026: Tensor[(12, 3, 15), float64]) -> (Tensor[(12, 3, 15), float64],) {
  %456 = cast(%var_11026, dtype="float64") /* ty=Tensor[(12, 3, 15), float64] */;
  %457 = shape_of(%var_11025, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%var_11025, dtype="float64") /* ty=Tensor[(12, 3, 15), float64] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %460 = mod(%458, %459) /* ty=Tensor[(12, 3, 15), float64] */;
  (%460,)
}

def @func_6149() -> Tensor[(1210), bool] {
  %461 = @func_5865() /* ty=(Tensor[(1210), float64], Tensor[(1210), float32]) */;
  %462 = %461.1;
  %463 = cast(meta[relay.Constant][18] /* ty=Tensor[(1210), float32] */, dtype="bool") /* ty=Tensor[(1210), bool] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(1), int32] */;
  %465 = cast(%462, dtype="bool") /* ty=Tensor[(1210), bool] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?), bool] */;
  less_equal(%465, %466) /* ty=Tensor[(1210), bool] */
}

def @func_2870() -> (Tensor[(3, 13, 12), float64], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(11, 10, 11), float64]) {
  %467 = cast(meta[relay.Constant][19] /* ty=Tensor[(1210), float64] */, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %468 = reshape(%467, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), float64] */;
  %469 = @func_962() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) */;
  %470 = @func_1436() /* ty=Tensor[(3, 13, 12), float64] */;
  %471 = @func_860(%468) /* ty=Tensor[(11, 10, 11), float64] */;
  %472 = %469.1;
  (%470, %471, meta[relay.Constant][19] /* ty=Tensor[(1210), float64] */, %472)
}

def @func_1180(%var_1166: Tensor[(6, 16, 10), float32]) -> (Tensor[(6, 16, 10), float32], Tensor[(3, 13, 12), bool]) {
  %473 = cast(%var_1166, dtype="float32") /* ty=Tensor[(6, 16, 10), float32] */;
  %474 = sigmoid(%473) /* ty=Tensor[(6, 16, 10), float32] */;
  %475 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  (%474, %475)
}

def @func_5626() -> (Tensor[(11, 2, 15), float64], Tensor[(13, 8, 5), int8], Tensor[(1, 468), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(10, 52), int16]) {
  %476 = @func_2708() /* ty=(Tensor[(11, 2, 15), float64], Tensor[(11, 2, 15), float64]) */;
  %477 = %476.1;
  %478 = cast(%477, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
  %479 = sqrt(%478) /* ty=Tensor[(11, 2, 15), float64] */;
  %480 = cast(%479, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
  %481 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%477, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %484 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 52), float64] */, dtype="float64") /* ty=Tensor[(10, 52), float64] */;
  %485 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 468), bool] */, dtype="bool") /* ty=Tensor[(1, 468), bool] */;
  %486 = reshape(%484, newshape=[13, 8, 5]) /* ty=Tensor[(13, 8, 5), float64] */;
  %487 = reshape(%485, newshape=[468]) /* ty=Tensor[(468), bool] */;
  %488 = @func_3500(%486, %487) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(468), bool], Tensor[(13, 8, 5), int8], Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32]) */;
  %489 = @func_4160() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %490 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 52), float64] */, dtype="float64") /* ty=Tensor[(10, 52), float64] */;
  %491 = sigmoid(%490) /* ty=Tensor[(10, 52), float64] */;
  %492 = cast(%491, dtype="float64") /* ty=Tensor[(10, 52), float64] */;
  %493 = exp(%492) /* ty=Tensor[(10, 52), float64] */;
  %494 = cast(%491, dtype="int16") /* ty=Tensor[(10, 52), int16] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(2), int32] */;
  %496 = cast(%493, dtype="int16") /* ty=Tensor[(10, 52), int16] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %498 = mod(%482, %483) /* ty=Tensor[(11, 2, 15), float64] */;
  %499 = %488.2;
  %500 = @func_2970() /* ty=Tensor[(3, 13, 12), bool] */;
  %501 = %489.1;
  %502 = @func_441() /* ty=Tensor[(3, 13, 12), float32] */;
  %503 = bitwise_or(%496, %497) /* ty=Tensor[(10, 52), int16] */;
  (%498, %499, meta[relay.Constant][21] /* ty=Tensor[(1, 468), bool] */, %500, %501, %502, %503)
}

def @func_11739() -> (Tensor[(3, 13, 12), bool],) {
  %504 = @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %505 = %504.3;
  (%505,)
}

def @func_6984(%var_6981: Tensor[(5, 9, 4), float64]) -> Tensor[(5, 9, 4), float64] {
  %506 = cast(%var_6981, dtype="float64") /* ty=Tensor[(5, 9, 4), float64] */;
  exp(%506) /* ty=Tensor[(5, 9, 4), float64] */
}

def @func_7823() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), int8]) {
  %507 = @func_1969() /* ty=Tensor[(3, 13, 12), float32] */;
  %508 = @func_1436() /* ty=Tensor[(3, 13, 12), float64] */;
  %509 = @func_3273() /* ty=Tensor[(3, 13, 12), int8] */;
  (%507, %508, %509)
}

def @func_7013() -> (Tensor[(3, 13, 12), bool],) {
  %510 = @func_5715() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %511 = %510.0;
  (%511,)
}

def @func_9443() -> Tensor[(3, 13, 12), float32] {
  @func_1723() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_4214(%var_4203: Tensor[(9, 3, 5), int32]) -> (Tensor[(9, 3, 5), bool],) {
  %512 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 3, 5), int32] */, dtype="bool") /* ty=Tensor[(9, 3, 5), bool] */;
  %513 = shape_of(%var_4203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%var_4203, dtype="bool") /* ty=Tensor[(9, 3, 5), bool] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %516 = greater_equal(%514, %515) /* ty=Tensor[(9, 3, 5), bool] */;
  (%516,)
}

def @func_5668() -> (Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool]) {
  %517 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %518 = @func_3273() /* ty=Tensor[(3, 13, 12), int8] */;
  %519 = %517.2;
  (%518, %519)
}

def @func_9761() -> (Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(2, 480), float32]) {
  %520 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 480), float32] */, dtype="float32") /* ty=Tensor[(2, 480), float32] */;
  %521 = reshape(%520, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %522 = @func_2948(%521) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), bool], Tensor[(3, 13, 12), float32]) */;
  %523 = @func_2585() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %524 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 480), float32] */, dtype="float32") /* ty=Tensor[(2, 480), float32] */;
  %525 = erf(%524) /* ty=Tensor[(2, 480), float32] */;
  %526 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 480), float32] */, dtype="float32") /* ty=Tensor[(2, 480), float32] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(2), int32] */;
  %528 = cast(%525, dtype="float32") /* ty=Tensor[(2, 480), float32] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %530 = @func_3070() /* ty=Tensor[(3, 13, 12), bool] */;
  %531 = %522.1;
  %532 = %523.0;
  %533 = subtract(%528, %529) /* ty=Tensor[(2, 480), float32] */;
  (%530, %531, %532, %533)
}

def @func_8511() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %534 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %535 = @func_5067() /* ty=Tensor[(3, 13, 12), float32] */;
  %536 = %534.0;
  (%535, %536)
}

def @func_11097() -> (Tensor[(3, 13, 12), bool], Tensor[(960), float32]) {
  %537 = @func_3255() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %538 = @func_8453() /* ty=(Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */;
  %539 = %537.2;
  %540 = %538.0;
  (%539, %540)
}

def @main() -> Tensor[(1210), float32] {
  %541 = @func_12139() /* ty=Tensor[(1210), bool] */;
  %542 = cast(%541, dtype="float32") /* ty=Tensor[(1210), float32] */;
  acosh(%542) /* ty=Tensor[(1210), float32] */
}

def @func_4900() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32]) {
  %543 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %544 = @func_2495() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %545 = %543.0;
  %546 = %544.1;
  (%545, %546)
}

def @func_562() -> Tensor[(3, 13, 12), float32] {
  %547 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %548 = %547.1;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
  %550 = tan(%549) /* ty=Tensor[(3, 13, 12), float32] */;
  %551 = cast(%548, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%550, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%553, %554) /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_10067() -> (Tensor[(3, 13, 12), float32],) {
  %555 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %556 = %555.0;
  (%556,)
}

def @func_925() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %557 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %558 = %557.1;
  %559 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  (%558, %559)
}

def @func_1836(%var_1827: Tensor[(14, 7, 8), float64]) -> (Tensor[(14, 7, 8), float64], Tensor[(3, 13, 12), float32]) {
  %560 = cast(%var_1827, dtype="float64") /* ty=Tensor[(14, 7, 8), float64] */;
  %561 = @func_925() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %562 = acosh(%560) /* ty=Tensor[(14, 7, 8), float64] */;
  %563 = %561.1;
  (%562, %563)
}

def @func_860(%var_856: Tensor[(11, 10, 11), float64]) -> Tensor[(11, 10, 11), float64] {
  %564 = cast(%var_856, dtype="float64") /* ty=Tensor[(11, 10, 11), float64] */;
  cos(%564) /* ty=Tensor[(11, 10, 11), float64] */
}

def @func_4987(%var_4967: Tensor[(1210), float64]) -> (Tensor[(1210), uint32],) {
  %565 = @func_962() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) */;
  %566 = %565.2;
  %567 = cast(%var_4967, dtype="uint32") /* ty=Tensor[(1210), uint32] */;
  %568 = shape_of(%566, dtype="int32") /* ty=Tensor[(1), int32] */;
  %569 = cast(%566, dtype="uint32") /* ty=Tensor[(1210), uint32] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %571 = maximum(%569, %570) /* ty=Tensor[(1210), uint32] */;
  (%571,)
}

def @func_6804() -> (Tensor[(3, 13, 12), bool],) {
  %572 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
  %573 = %572.0;
  (%573,)
}

def @func_4274() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) {
  %574 = @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %575 = @func_4117() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) */;
  %576 = @func_2052() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %577 = @func_3687() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %578 = %574.0;
  %579 = %575.0;
  %580 = %576.0;
  %581 = %577.1;
  (%578, %579, %580, %581)
}

def @func_5715() -> (Tensor[(3, 13, 12), bool],) {
  %582 = @func_3453() /* ty=Tensor[(3, 13, 12), bool] */;
  (%582,)
}

def @func_3500(%var_3465: Tensor[(13, 8, 5), float64], %var_3485: Tensor[(468), bool]) -> (Tensor[(3, 13, 12), float64], Tensor[(468), bool], Tensor[(13, 8, 5), int8], Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32]) {
  %583 = cast(%var_3485, dtype="bool") /* ty=Tensor[(468), bool] */;
  %584 = reshape(%583, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), bool] */;
  %585 = cast(%var_3465, dtype="float64") /* ty=Tensor[(13, 8, 5), float64] */;
  %586 = log10(%585) /* ty=Tensor[(13, 8, 5), float64] */;
  %587 = cast(%586, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %588 = sqrt(%587) /* ty=Tensor[(13, 8, 5), float32] */;
  %589 = cast(%586, dtype="int8") /* ty=Tensor[(13, 8, 5), int8] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="int8") /* ty=Tensor[(13, 8, 5), int8] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %593 = @func_2735() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %594 = cast(%588, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %595 = @func_1518(%584) /* ty=Tensor[(3, 13, 12), float64] */;
  %596 = right_shift(%591, %592) /* ty=Tensor[(13, 8, 5), int8] */;
  %597 = %593.0;
  %598 = exp(%594) /* ty=Tensor[(13, 8, 5), float32] */;
  (%595, %var_3485, %596, %597, %598)
}

def @func_8174() -> (Tensor[(3, 13, 12), float32],) {
  %599 = @func_4370() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %600 = %599.1;
  (%600,)
}

def @func_8229(%var_8216: Tensor[(11, 2, 15), float64]) -> (Tensor[(11, 2, 15), float32],) {
  %601 = @func_6825() /* ty=(Tensor[(11, 2, 15), float64],) */;
  %602 = %601.0;
  %603 = cast(%var_8216, dtype="float32") /* ty=Tensor[(11, 2, 15), float32] */;
  %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(%602, dtype="float32") /* ty=Tensor[(11, 2, 15), float32] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %607 = add(%605, %606) /* ty=Tensor[(11, 2, 15), float32] */;
  (%607,)
}

def @func_9673(%var_9636: Tensor[(9, 15, 2), bool], %var_9637: Tensor[(9, 15, 2), bool]) -> (Tensor[(9, 15, 2), bool], Tensor[(9, 15, 2), bool]) {
  %608 = cast(%var_9637, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
  %609 = shape_of(%var_9636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%var_9636, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %612 = logical_or(%610, %611) /* ty=Tensor[(9, 15, 2), bool] */;
  %613 = cast(%612, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
  %614 = shape_of(%var_9636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%var_9636, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %617 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 15, 2), bool] */, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
  %618 = shape_of(%var_9637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%var_9637, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = equal(%615, %616) /* ty=Tensor[(9, 15, 2), bool] */;
  %622 = greater(%619, %620) /* ty=Tensor[(9, 15, 2), bool] */;
  (%621, %622)
}

def @func_5865() -> (Tensor[(1210), float64], Tensor[(1210), float32]) {
  %623 = @func_4274() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) */;
  %624 = %623.3;
  %625 = cast(%624, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %626 = cast(%624, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %627 = log2(%626) /* ty=Tensor[(1210), float64] */;
  %628 = cast(%624, dtype="float32") /* ty=Tensor[(1210), float32] */;
  %629 = acos(%628) /* ty=Tensor[(1210), float32] */;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(1210), float32] */;
  %631 = shape_of(%627, dtype="int32") /* ty=Tensor[(1), int32] */;
  %632 = cast(%627, dtype="float32") /* ty=Tensor[(1210), float32] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?), float32] */;
  %634 = sqrt(%625) /* ty=Tensor[(1210), float64] */;
  %635 = mod(%632, %633) /* ty=Tensor[(1210), float32] */;
  (%634, %635)
}

def @func_11352() -> (Tensor[(3, 13, 12), bool], Tensor[(9, 3, 5), bool], Tensor[(18), float32]) {
  %636 = @func_4398() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %637 = @func_7534() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(9, 3, 5), bool], Tensor[(135), int32]) */;
  %638 = @func_7390() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
  %639 = %636.0;
  %640 = %637.2;
  %641 = %638.2;
  (%639, %640, %641)
}

def @func_4232(%var_4219: Tensor[(12, 2, 8), int32], %var_4220: Tensor[(12, 2, 8), int32], %var_4227: Tensor[(144), float32], %var_4228: Tensor[(1, 520), float64]) -> (Tensor[(12, 2, 8), int32], Tensor[(2, 12, 6), float32], Tensor[(144), float32], Tensor[(1, 520), float64]) {
  %642 = cast(%var_4220, dtype="int32") /* ty=Tensor[(12, 2, 8), int32] */;
  %643 = shape_of(%var_4219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%var_4219, dtype="int32") /* ty=Tensor[(12, 2, 8), int32] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %646 = cast(%var_4227, dtype="float32") /* ty=Tensor[(144), float32] */;
  %647 = cast(%var_4228, dtype="float64") /* ty=Tensor[(1, 520), float64] */;
  %648 = reshape(%646, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %649 = reshape(%647, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %650 = @func_3616(%648, %649) /* ty=(Tensor[(2, 12, 6), float32], Tensor[(468), bool], Tensor[(520), float64], Tensor[(468), bool]) */;
  %651 = logical_xor(%644, %645) /* ty=Tensor[(12, 2, 8), int32] */;
  %652 = %650.0;
  (%651, %652, %var_4227, %var_4228)
}

def @func_12566() -> (Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %653 = @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %654 = @func_10166() /* ty=(Tensor[(520), float64], Tensor[(1210), uint32], Tensor[(1210), float64], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %655 = @func_6804() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %656 = %653.0;
  %657 = %654.3;
  %658 = @func_6870() /* ty=Tensor[(3, 13, 12), float32] */;
  %659 = %655.0;
  (%656, %657, %658, %659)
}

def @func_12985() -> (Tensor[(3, 13, 12), bool],) {
  %660 = @func_11515() /* ty=Tensor[(3, 13, 12), bool] */;
  (%660,)
}

def @func_13017() -> (Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %661 = @func_1948() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */;
  %662 = @func_4398() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %663 = @func_11592() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %664 = %661.3;
  %665 = %662.0;
  %666 = %663.0;
  (%664, %665, %666)
}

def @func_1713() -> (Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) {
  %667 = cast(meta[relay.Constant][25] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %668 = reshape(%667, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %669 = @func_1664(%668) /* ty=(Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */;
  %670 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  %671 = %669.5;
  (%670, %671, meta[relay.Constant][25] /* ty=Tensor[(960), float32] */)
}

def @func_8868() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %672 = @func_4604() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %673 = @func_7931() /* ty=Tensor[(3, 13, 12), float32] */;
  %674 = %672.0;
  (%673, %674)
}

def @func_3919() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %675 = @func_2360() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %676 = %675.0;
  %677 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  (%676, %677)
}

def @func_5695(%var_5670: Tensor[(10, 4, 15), float64], %var_5671: Tensor[(10, 4, 15), float64]) -> (Tensor[(10, 4, 15), float64], Tensor[(3, 13, 12), int8]) {
  %678 = cast(%var_5671, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %679 = shape_of(%var_5670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%var_5670, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %682 = @func_5484() /* ty=(Tensor[(3, 13, 12), int8],) */;
  %683 = floor_mod(%680, %681) /* ty=Tensor[(10, 4, 15), float64] */;
  %684 = %682.0;
  (%683, %684)
}

def @func_7421() -> (Tensor[(3, 13, 12), float32],) {
  %685 = @func_6749() /* ty=Tensor[(3, 13, 12), float32] */;
  (%685,)
}

def @func_11494() -> Tensor[(3, 13, 12), float32] {
  %686 = @func_1255() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %686.0
}

def @func_2637() -> Tensor[(3, 13, 12), bool] {
  %687 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %687.0
}

def @func_7339(%var_7288: Tensor[(144), float32]) -> (Tensor[(3, 13, 12), bool], Tensor[(1, 520), float64], Tensor[(192), int32], Tensor[(144), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %688 = cast(meta[relay.Constant][26] /* ty=Tensor[(192), int32] */, dtype="int32") /* ty=Tensor[(192), int32] */;
  %689 = cast(meta[relay.Constant][26] /* ty=Tensor[(192), int32] */, dtype="int32") /* ty=Tensor[(192), int32] */;
  %690 = cast(%var_7288, dtype="float32") /* ty=Tensor[(144), float32] */;
  %691 = cast(meta[relay.Constant][27] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %692 = reshape(%688, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), int32] */;
  %693 = reshape(%689, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), int32] */;
  %694 = reshape(%690, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %695 = reshape(%691, newshape=[1, 520]) /* ty=Tensor[(1, 520), float64] */;
  %696 = @func_4232(%692, %693, %694, %695) /* ty=(Tensor[(12, 2, 8), int32], Tensor[(2, 12, 6), float32], Tensor[(144), float32], Tensor[(1, 520), float64]) */;
  %697 = @func_4274() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) */;
  %698 = @func_5740() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %699 = @func_7013() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %700 = @func_2970() /* ty=Tensor[(3, 13, 12), bool] */;
  %701 = %696.3;
  %702 = %697.0;
  %703 = %698.0;
  %704 = %699.0;
  (%700, %701, meta[relay.Constant][26] /* ty=Tensor[(192), int32] */, %var_7288, meta[relay.Constant][27] /* ty=Tensor[(520), float64] */, %702, %703, %704)
}

def @func_11829() -> Tensor[(3, 13, 12), float32] {
  %705 = @func_8174() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %705.0
}

def @func_1822() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool]) {
  %706 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %707 = %706.0;
  %708 = cast(%707, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %709 = reshape(%708, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), bool] */;
  %710 = @func_1039(%709) /* ty=(Tensor[(3, 13, 12), int8],) */;
  %711 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %712 = %710.0;
  %713 = %711.2;
  (%707, %712, %713)
}

def @func_5214() -> (Tensor[(3, 13, 12), float32],) {
  %714 = @func_441() /* ty=Tensor[(3, 13, 12), float32] */;
  (%714,)
}

def @func_6185(%var_6178: Tensor[(2, 2, 7), int64]) -> Tensor[(2, 2, 7), bool] {
  %715 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 2, 7), int64] */, dtype="bool") /* ty=Tensor[(2, 2, 7), bool] */;
  %716 = shape_of(%var_6178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%var_6178, dtype="bool") /* ty=Tensor[(2, 2, 7), bool] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%717, %718) /* ty=Tensor[(2, 2, 7), bool] */
}

def @func_8710() -> Tensor[(3, 13, 12), int8] {
  @func_3273() /* ty=Tensor[(3, 13, 12), int8] */
}

def @func_11820() -> (Tensor[(18), float32], Tensor[(3, 13, 12), float64]) {
  %719 = @func_7390() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
  %720 = @func_4031() /* ty=(Tensor[(3, 13, 12), float64],) */;
  %721 = %719.2;
  %722 = %720.0;
  (%721, %722)
}

def @func_6775(%var_6772: Tensor[(48), int16], %var_6773: Tensor[(576), int16]) -> (Tensor[(3, 13, 12), float64], Tensor[(3, 12, 16), int16], Tensor[(48), int16], Tensor[(576), int16]) {
  %723 = @func_4900() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32]) */;
  %724 = cast(%var_6772, dtype="int16") /* ty=Tensor[(48), int16] */;
  %725 = cast(%var_6773, dtype="int16") /* ty=Tensor[(576), int16] */;
  %726 = reshape(%724, newshape=[3, 1, 16]) /* ty=Tensor[(3, 1, 16), int16] */;
  %727 = reshape(%725, newshape=[3, 12, 16]) /* ty=Tensor[(3, 12, 16), int16] */;
  %728 = @func_6057(%726, %727) /* ty=(Tensor[(3, 12, 16), int16], Tensor[(3, 13, 12), bool]) */;
  %729 = %723.0;
  %730 = %728.0;
  (%729, %730, %var_6772, %var_6773)
}

def @func_5297() -> (Tensor[(3, 13, 12), float64], Tensor[(9, 3, 5), bool]) {
  %731 = @func_2407() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) */;
  %732 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 9), int32] */, dtype="int32") /* ty=Tensor[(15, 9), int32] */;
  %733 = reshape(%732, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), int32] */;
  %734 = @func_4214(%733) /* ty=(Tensor[(9, 3, 5), bool],) */;
  %735 = %734.0;
  %736 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 9), int32] */, dtype="bool") /* ty=Tensor[(15, 9), bool] */;
  %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%735, dtype="bool") /* ty=Tensor[(9, 3, 5), bool] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %740 = %731.0;
  %741 = less(%738, %739) /* ty=Tensor[(9, 3, 5), bool] */;
  (%740, %741)
}

def @func_12518() -> (Tensor[(3, 13, 12), float32],) {
  %742 = @func_7823() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), int8]) */;
  %743 = %742.0;
  (%743,)
}

def @func_3521() -> Tensor[(3, 13, 12), float32] {
  %744 = @func_1255() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %744.0
}

def @func_7390() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) {
  %745 = @func_4398() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %746 = cast(meta[relay.Constant][30] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %747 = cast(meta[relay.Constant][31] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %748 = cast(meta[relay.Constant][30] /* ty=Tensor[(18), float32] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %749 = reshape(%746, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float32] */;
  %750 = reshape(%747, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %751 = reshape(%748, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
  %752 = @func_5823(%749, %750, %751) /* ty=(Tensor[(520), float64], Tensor[(144), float32], Tensor[(520), float64], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool], Tensor[(3, 3, 2), float32], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool], Tensor[(3, 3, 2), int32], Tensor[(3, 13, 12), float64], Tensor[(3, 3, 2), float64]) */;
  %753 = @func_3188() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %754 = %745.0;
  %755 = %752.7;
  %756 = %753.0;
  (%754, %755, meta[relay.Constant][30] /* ty=Tensor[(18), float32] */, meta[relay.Constant][31] /* ty=Tensor[(520), float64] */, %756)
}

def @func_12248(%var_12229: Tensor[(7, 6, 6), float64]) -> (Tensor[(7, 6, 6), bool], Tensor[(7, 6, 6), int16]) {
  %757 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 6, 6), float64] */;
  %758 = sigmoid(%757) /* ty=Tensor[(7, 6, 6), float64] */;
  %759 = cast(%var_12229, dtype="bool") /* ty=Tensor[(7, 6, 6), bool] */;
  %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%758, dtype="bool") /* ty=Tensor[(7, 6, 6), bool] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %763 = cast(%758, dtype="int16") /* ty=Tensor[(7, 6, 6), int16] */;
  %764 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(7, 6, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 6, 6), float64] */, dtype="int16") /* ty=Tensor[(7, 6, 6), int16] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %767 = logical_and(%761, %762) /* ty=Tensor[(7, 6, 6), bool] */;
  %768 = minimum(%765, %766) /* ty=Tensor[(7, 6, 6), int16] */;
  (%767, %768)
}

def @func_1039(%var_1029: Tensor[(3, 13, 12), bool]) -> (Tensor[(3, 13, 12), int8],) {
  %769 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  %770 = cast(%var_1029, dtype="int8") /* ty=Tensor[(3, 13, 12), int8] */;
  %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%769, dtype="int8") /* ty=Tensor[(3, 13, 12), int8] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %774 = bitwise_or(%772, %773) /* ty=Tensor[(3, 13, 12), int8] */;
  (%774,)
}

def @func_9711(%var_9703: Tensor[(9, 10, 3), float64]) -> (Tensor[(9, 10, 3), float64],) {
  %775 = cast(%var_9703, dtype="float64") /* ty=Tensor[(9, 10, 3), float64] */;
  %776 = sigmoid(%775) /* ty=Tensor[(9, 10, 3), float64] */;
  (%776,)
}

def @func_6861() -> (Tensor[(3, 13, 12), float64], Tensor[(11, 2, 15), float64], Tensor[(3, 13, 12), float32]) {
  %777 = @func_6825() /* ty=(Tensor[(11, 2, 15), float64],) */;
  %778 = @func_4604() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %779 = @func_4454() /* ty=Tensor[(3, 13, 12), float64] */;
  %780 = %777.0;
  %781 = %778.0;
  (%779, %780, %781)
}

def @func_2970() -> Tensor[(3, 13, 12), bool] {
  %782 = @func_2307() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %782.1
}

def @func_4814() -> (Tensor[(3, 13, 12), bool],) {
  %783 = @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %784 = %783.3;
  (%784,)
}

def @func_5484() -> (Tensor[(3, 13, 12), int8],) {
  %785 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %786 = %785.3;
  (%786,)
}

def @func_2052() -> (Tensor[(3, 13, 12), float32],) {
  %787 = @func_962() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) */;
  %788 = %787.0;
  (%788,)
}

def @func_2708() -> (Tensor[(11, 2, 15), float64], Tensor[(11, 2, 15), float64]) {
  %789 = cast(meta[relay.Constant][34] /* ty=Tensor[(11, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
  %790 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(11, 2, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %793 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
  %794 = divide(%791, %792) /* ty=Tensor[(11, 2, 15), float64] */;
  %795 = log10(%793) /* ty=Tensor[(11, 2, 15), float64] */;
  (%794, %795)
}

def @func_6167(%var_6162: Tensor[(6, 4, 10), float32], %var_6163: Tensor[(6, 4, 10), float32]) -> (Tensor[(6, 4, 10), bool],) {
  %796 = cast(%var_6163, dtype="bool") /* ty=Tensor[(6, 4, 10), bool] */;
  %797 = shape_of(%var_6162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%var_6162, dtype="bool") /* ty=Tensor[(6, 4, 10), bool] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %800 = greater_equal(%798, %799) /* ty=Tensor[(6, 4, 10), bool] */;
  (%800,)
}

def @func_5195(%var_5118: Tensor[(4, 36), float32], %var_5119: Tensor[(520, 1), float64], %var_5147: Tensor[(4, 36), float32]) -> (Tensor[(3, 13, 12), float32], Tensor[(468), bool], Tensor[(520, 1), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(4, 36), bool], Tensor[(3, 13, 12), float64]) {
  %801 = cast(%var_5118, dtype="float32") /* ty=Tensor[(4, 36), float32] */;
  %802 = cast(%var_5119, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %803 = reshape(%801, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %804 = reshape(%802, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %805 = @func_3616(%803, %804) /* ty=(Tensor[(2, 12, 6), float32], Tensor[(468), bool], Tensor[(520), float64], Tensor[(468), bool]) */;
  %806 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %807 = @func_3687() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %808 = cast(%var_5147, dtype="uint16") /* ty=Tensor[(4, 36), uint16] */;
  %809 = shape_of(%var_5118, dtype="int32") /* ty=Tensor[(2), int32] */;
  %810 = cast(%var_5118, dtype="uint16") /* ty=Tensor[(4, 36), uint16] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %812 = left_shift(%810, %811) /* ty=Tensor[(4, 36), uint16] */;
  %813 = cast(%812, dtype="bool") /* ty=Tensor[(4, 36), bool] */;
  %814 = shape_of(%var_5147, dtype="int32") /* ty=Tensor[(2), int32] */;
  %815 = cast(%var_5147, dtype="bool") /* ty=Tensor[(4, 36), bool] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %817 = @func_2407() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) */;
  %818 = @func_3422() /* ty=Tensor[(3, 13, 12), float32] */;
  %819 = %805.3;
  %820 = %806.2;
  %821 = %807.3;
  %822 = less(%815, %816) /* ty=Tensor[(4, 36), bool] */;
  %823 = %817.1;
  (%818, %819, %var_5119, %820, %821, %822, %823)
}

def @func_6197() -> Tensor[(3, 13, 12), bool] {
  %824 = @func_4693() /* ty=(Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %824.2
}

def @func_6057(%var_6047: Tensor[(3, 1, 16), int16], %var_6048: Tensor[(3, 12, 16), int16]) -> (Tensor[(3, 12, 16), int16], Tensor[(3, 13, 12), bool]) {
  %825 = cast(%var_6047, dtype="int16") /* ty=Tensor[(3, 1, 16), int16] */;
  %826 = cast(%var_6048, dtype="int16") /* ty=Tensor[(3, 12, 16), int16] */;
  %827 = @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %828 = right_shift(%825, %826) /* ty=Tensor[(3, 12, 16), int16] */;
  %829 = %827.4;
  (%828, %829)
}

def @func_2307() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) {
  %830 = @func_1723() /* ty=Tensor[(3, 13, 12), float32] */;
  %831 = cast(%830, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
  %832 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %833 = cosh(%831) /* ty=Tensor[(3, 13, 12), float64] */;
  %834 = %832.1;
  (%833, %834)
}

def @func_4693() -> (Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %835 = @func_4274() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) */;
  %836 = @func_3015() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %837 = @func_3996() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %838 = %835.3;
  %839 = %836.0;
  %840 = %837.0;
  (%838, %839, %840)
}

def @func_3422() -> Tensor[(3, 13, 12), float32] {
  %841 = @func_2052() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %841.0
}

def @func_7209() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %842 = @func_5715() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %843 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %844 = @func_6287() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %845 = %842.0;
  %846 = %843.0;
  %847 = %844.0;
  (%845, %846, %847)
}

def @func_7608(%var_7603: int16, %var_7604: Tensor[(14, 6, 13), int16]) -> Tensor[(14, 6, 13), int16] {
  %848 = cast(%var_7603, dtype="int16") /* ty=int16 */;
  %849 = cast(%var_7604, dtype="int16") /* ty=Tensor[(14, 6, 13), int16] */;
  minimum(%848, %849) /* ty=Tensor[(14, 6, 13), int16] */
}

def @func_8394(%var_8369: Tensor[(16, 16, 1), float64]) -> (Tensor[(16, 16, 1), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %850 = cast(%var_8369, dtype="float64") /* ty=Tensor[(16, 16, 1), float64] */;
  %851 = @func_4274() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) */;
  %852 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %853 = sqrt(%850) /* ty=Tensor[(16, 16, 1), float64] */;
  %854 = %851.2;
  %855 = %852.0;
  (%853, %854, %855)
}

def @func_7176(%var_7168: bool) -> (Tensor[(10, 52), int16], Tensor[(3, 13, 12), bool], Tensor[(1210), float32], Tensor[(3, 13, 12), int8], Tensor[(364), bool], bool, Tensor[(7, 52), float64]) {
  %856 = @func_5626() /* ty=(Tensor[(11, 2, 15), float64], Tensor[(13, 8, 5), int8], Tensor[(1, 468), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(10, 52), int16]) */;
  %857 = @func_5865() /* ty=(Tensor[(1210), float64], Tensor[(1210), float32]) */;
  %858 = cast(%var_7168, dtype="bool") /* ty=bool */;
  %859 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 52), bool] */, dtype="bool") /* ty=Tensor[(7, 52), bool] */;
  %860 = reshape(%858, newshape=[]) /* ty=bool */;
  %861 = reshape(%859, newshape=[364]) /* ty=Tensor[(364), bool] */;
  %862 = @func_4496(%860, %861) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool]) */;
  %863 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 52), bool] */, dtype="float64") /* ty=Tensor[(7, 52), float64] */;
  %864 = %856.6;
  %865 = @func_3453() /* ty=Tensor[(3, 13, 12), bool] */;
  %866 = %857.1;
  %867 = @func_3273() /* ty=Tensor[(3, 13, 12), int8] */;
  %868 = %862.6;
  %869 = asinh(%863) /* ty=Tensor[(7, 52), float64] */;
  (%864, %865, %866, %867, %868, %var_7168, %869)
}

def @func_6643() -> Tensor[(3, 13, 12), bool] {
  @func_2970() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_7534() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(9, 3, 5), bool], Tensor[(135), int32]) {
  %870 = @func_5993() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %871 = @func_2028() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %872 = cast(meta[relay.Constant][36] /* ty=Tensor[(135), int32] */, dtype="int32") /* ty=Tensor[(135), int32] */;
  %873 = reshape(%872, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), int32] */;
  %874 = @func_4214(%873) /* ty=(Tensor[(9, 3, 5), bool],) */;
  %875 = %870.0;
  %876 = %871.0;
  %877 = %874.0;
  (%875, %876, %877, meta[relay.Constant][36] /* ty=Tensor[(135), int32] */)
}

def @func_10392() -> Tensor[(3, 13, 12), bool] {
  %878 = @func_9507() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) */;
  %878.0
}

def @func_4398() -> (Tensor[(3, 13, 12), bool],) {
  %879 = @func_3015() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %880 = %879.0;
  (%880,)
}

def @func_11458() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %881 = @func_9942() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %882 = %881.0;
  %883 = @func_3070() /* ty=Tensor[(3, 13, 12), bool] */;
  (%882, %883)
}

def @func_11592() -> (Tensor[(3, 13, 12), bool],) {
  %884 = @func_7472() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %885 = %884.1;
  (%885,)
}

def @func_639() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %886 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %887 = %886.0;
  %888 = @func_441() /* ty=Tensor[(3, 13, 12), float32] */;
  (%887, %888)
}

def @func_3273() -> Tensor[(3, 13, 12), int8] {
  %889 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %889.3
}

def @func_10460() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %890 = @func_4031() /* ty=(Tensor[(3, 13, 12), float64],) */;
  %891 = @func_7600() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64]) */;
  %892 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %893 = @func_4584() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %894 = @func_1969() /* ty=Tensor[(3, 13, 12), float32] */;
  %895 = %890.0;
  %896 = %891.1;
  %897 = %892.0;
  %898 = %893.0;
  (%894, %895, %896, %897, %898)
}

def @func_962() -> (Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) {
  %899 = cast(meta[relay.Constant][37] /* ty=Tensor[(1210), float64] */, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %900 = reshape(%899, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), float64] */;
  %901 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  %902 = @func_860(%900) /* ty=Tensor[(11, 10, 11), float64] */;
  (%901, %902, meta[relay.Constant][37] /* ty=Tensor[(1210), float64] */)
}

def @func_8954() -> Tensor[(1210), bool] {
  @func_6149() /* ty=Tensor[(1210), bool] */
}

def @func_4584() -> (Tensor[(3, 13, 12), bool],) {
  %903 = @func_2585() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %904 = %903.1;
  (%904,)
}

def @func_6870() -> Tensor[(3, 13, 12), float32] {
  %905 = @func_3188() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %905.0
}

def @func_12053(%var_11995: bool) -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool], bool, Tensor[(3, 13, 12), float32]) {
  %906 = @func_2407() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) */;
  %907 = cast(%var_11995, dtype="bool") /* ty=bool */;
  %908 = reshape(%907, newshape=[]) /* ty=bool */;
  %909 = @func_7176(%908) /* ty=(Tensor[(10, 52), int16], Tensor[(3, 13, 12), bool], Tensor[(1210), float32], Tensor[(3, 13, 12), int8], Tensor[(364), bool], bool, Tensor[(7, 52), float64]) */;
  %910 = @func_3376() /* ty=(Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float32]) */;
  %911 = %906.1;
  %912 = @func_4454() /* ty=Tensor[(3, 13, 12), float64] */;
  %913 = %909.1;
  %914 = %910.1;
  (%911, %912, %913, %var_11995, %914)
}

def @func_10767(%var_10752: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %915 = @func_4138() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %916 = cast(%var_10752, dtype="float32") /* ty=Tensor[(960), float32] */;
  %917 = reshape(%916, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %918 = @func_2948(%917) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), bool], Tensor[(3, 13, 12), float32]) */;
  %919 = @func_7209() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %920 = @func_10487() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(14, 6, 13), int16], int16, Tensor[(1092), int16]) */;
  %921 = @func_6302() /* ty=Tensor[(3, 13, 12), bool] */;
  %922 = @func_1723() /* ty=Tensor[(3, 13, 12), float32] */;
  %923 = %915.0;
  %924 = %918.3;
  %925 = %919.0;
  %926 = %920.0;
  (%921, %922, %923, %924, %var_10752, %925, %926)
}

def @func_4454() -> Tensor[(3, 13, 12), float64] {
  %927 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %927.0
}

def @func_12924() -> (Tensor[(3, 13, 12), float32],) {
  %928 = @func_4274() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) */;
  %929 = %928.1;
  (%929,)
}

def @func_11897(%var_11880: Tensor[(7, 11, 14), float64]) -> (Tensor[(7, 11, 14), float64], Tensor[(3, 13, 12), float64], Tensor[(1210), float64]) {
  %930 = cast(%var_11880, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
  %931 = @func_1948() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */;
  %932 = acos(%930) /* ty=Tensor[(7, 11, 14), float64] */;
  %933 = @func_6690() /* ty=Tensor[(3, 13, 12), float64] */;
  %934 = %931.3;
  (%932, %933, %934)
}

def @func_10809() -> Tensor[(3, 13, 12), float32] {
  %935 = @func_2052() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %935.0
}

def @func_11655() -> Tensor[(3, 13, 12), bool] {
  %936 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %936.1
}

def @func_12971() -> Tensor[(3, 13, 12), float32] {
  %937 = @func_12396() /* ty=(Tensor[(1210), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %937.1
}

def @func_7931() -> Tensor[(3, 13, 12), float32] {
  @func_562() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_4779(%var_4775: Tensor[(784), float64]) -> (Tensor[(3, 13, 12), bool], Tensor[(14, 7, 8), float64], Tensor[(784), float64]) {
  %938 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %939 = cast(%var_4775, dtype="float64") /* ty=Tensor[(784), float64] */;
  %940 = reshape(%939, newshape=[14, 7, 8]) /* ty=Tensor[(14, 7, 8), float64] */;
  %941 = @func_1836(%940) /* ty=(Tensor[(14, 7, 8), float64], Tensor[(3, 13, 12), float32]) */;
  %942 = %938.0;
  %943 = %941.0;
  (%942, %943, %var_4775)
}

def @func_10978() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(960), float32]) {
  %944 = @func_4160() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %945 = @func_4398() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %946 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %947 = %944.0;
  %948 = cast(%947, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %949 = reshape(%948, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), bool] */;
  %950 = @func_1039(%949) /* ty=(Tensor[(3, 13, 12), int8],) */;
  %951 = @func_10166() /* ty=(Tensor[(520), float64], Tensor[(1210), uint32], Tensor[(1210), float64], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %952 = %945.0;
  %953 = %946.0;
  %954 = %950.0;
  %955 = %951.3;
  (%947, %952, %953, %954, %955)
}

def @func_7901(%var_7895: Tensor[(7, 9, 3), int8], %var_7896: Tensor[(7, 9, 3), int8]) -> Tensor[(7, 9, 3), int8] {
  %956 = cast(%var_7896, dtype="int8") /* ty=Tensor[(7, 9, 3), int8] */;
  %957 = shape_of(%var_7895, dtype="int32") /* ty=Tensor[(3), int32] */;
  %958 = cast(%var_7895, dtype="int8") /* ty=Tensor[(7, 9, 3), int8] */;
  %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%958, %959) /* ty=Tensor[(7, 9, 3), int8] */
}

def @func_1948() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) {
  %960 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %961 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
  %962 = cast(meta[relay.Constant][38] /* ty=Tensor[(1210), float64] */, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %963 = reshape(%962, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), float64] */;
  %964 = cast(meta[relay.Constant][39] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %965 = reshape(%964, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %966 = @func_1664(%965) /* ty=(Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */;
  %967 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %968 = %960.0;
  %969 = %961.0;
  %970 = @func_860(%963) /* ty=Tensor[(11, 10, 11), float64] */;
  %971 = %966.2;
  %972 = %967.1;
  (%968, %969, %970, meta[relay.Constant][38] /* ty=Tensor[(1210), float64] */, %971, meta[relay.Constant][39] /* ty=Tensor[(960), float32] */, %972)
}

def @func_6627() -> Tensor[(3, 13, 12), float32] {
  %973 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %973.1
}

def @func_3097(%var_3075: bool, %var_3076: Tensor[(2, 14, 13), bool]) -> (Tensor[(2, 14, 13), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %974 = cast(%var_3075, dtype="bool") /* ty=bool */;
  %975 = cast(%var_3076, dtype="bool") /* ty=Tensor[(2, 14, 13), bool] */;
  %976 = @func_1481() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %977 = @func_2104() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %978 = logical_and(%974, %975) /* ty=Tensor[(2, 14, 13), bool] */;
  %979 = %976.0;
  %980 = %977.0;
  (%978, %979, %980)
}

def @func_6598(%var_6547: Tensor[(12, 50), float64]) -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(12, 50), float64], Tensor[(520), float64]) {
  %981 = @func_3996() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %982 = cast(%var_6547, dtype="float64") /* ty=Tensor[(12, 50), float64] */;
  %983 = cast(%var_6547, dtype="float64") /* ty=Tensor[(12, 50), float64] */;
  %984 = reshape(%982, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), float64] */;
  %985 = reshape(%983, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), float64] */;
  %986 = @func_5695(%984, %985) /* ty=(Tensor[(10, 4, 15), float64], Tensor[(3, 13, 12), int8]) */;
  %987 = @func_6263() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
  %988 = %981.1;
  %989 = %986.1;
  %990 = %987.2;
  (%988, %989, %var_6547, %990)
}

def @func_10166() -> (Tensor[(520), float64], Tensor[(1210), uint32], Tensor[(1210), float64], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %991 = @func_7390() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
  %992 = cast(meta[relay.Constant][40] /* ty=Tensor[(1210), float64] */, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %993 = reshape(%992, newshape=[1210]) /* ty=Tensor[(1210), float64] */;
  %994 = @func_4987(%993) /* ty=(Tensor[(1210), uint32],) */;
  %995 = @func_5908() /* ty=(Tensor[(960), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) */;
  %996 = @func_9942() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %997 = %991.3;
  %998 = %994.0;
  %999 = %995.0;
  %1000 = @func_2637() /* ty=Tensor[(3, 13, 12), bool] */;
  %1001 = %996.0;
  (%997, %998, meta[relay.Constant][40] /* ty=Tensor[(1210), float64] */, %999, %1000, %1001)
}

def @func_2495() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %1002 = @func_2360() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %1003 = @func_2028() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1004 = @func_1723() /* ty=Tensor[(3, 13, 12), float32] */;
  %1005 = %1002.0;
  %1006 = %1003.0;
  (%1004, %1005, %1006)
}

def @func_4031() -> (Tensor[(3, 13, 12), float64],) {
  %1007 = @func_2970() /* ty=Tensor[(3, 13, 12), bool] */;
  %1008 = cast(%1007, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
  %1009 = atan(%1008) /* ty=Tensor[(3, 13, 12), float64] */;
  (%1009,)
}

def @func_3868(%var_3770: bool, %var_3832: Tensor[(2, 16, 2), uint16], %var_3837: Tensor[(784), float64], %var_3857: Tensor[(960), float32]) -> (Tensor[(2, 16, 2), bool], Tensor[(3, 13, 12), bool], bool, Tensor[(364), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(2, 16, 2), int32], Tensor[(14, 7, 8), float64], Tensor[(784), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(2, 16, 2), float32]) {
  %1010 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 16, 2), uint16] */, dtype="bool") /* ty=Tensor[(2, 16, 2), bool] */;
  %1011 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(2, 16, 2), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1012 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 16, 2), uint16] */, dtype="bool") /* ty=Tensor[(2, 16, 2), bool] */;
  %1013 = dyn.reshape(%1010, %1011, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1014 = cast(%var_3770, dtype="bool") /* ty=bool */;
  %1015 = cast(meta[relay.Constant][43] /* ty=Tensor[(364), bool] */, dtype="bool") /* ty=Tensor[(364), bool] */;
  %1016 = reshape(%1014, newshape=[]) /* ty=bool */;
  %1017 = reshape(%1015, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), bool] */;
  %1018 = @func_3097(%1016, %1017) /* ty=(Tensor[(2, 14, 13), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1019 = cast(meta[relay.Constant][43] /* ty=Tensor[(364), bool] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %1020 = @func_2660() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %1021 = cast(%var_3832, dtype="int32") /* ty=Tensor[(2, 16, 2), int32] */;
  %1022 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(2, 16, 2), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1023 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 16, 2), uint16] */, dtype="int32") /* ty=Tensor[(2, 16, 2), int32] */;
  %1024 = dyn.reshape(%1021, %1022, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1025 = cast(%var_3837, dtype="float64") /* ty=Tensor[(784), float64] */;
  %1026 = reshape(%1025, newshape=[14, 7, 8]) /* ty=Tensor[(14, 7, 8), float64] */;
  %1027 = @func_1836(%1026) /* ty=(Tensor[(14, 7, 8), float64], Tensor[(3, 13, 12), float32]) */;
  %1028 = @func_2052() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %1029 = cast(%var_3857, dtype="float32") /* ty=Tensor[(960), float32] */;
  %1030 = reshape(%1029, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %1031 = @func_2948(%1030) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), bool], Tensor[(3, 13, 12), float32]) */;
  %1032 = cast(%var_3832, dtype="float64") /* ty=Tensor[(2, 16, 2), float64] */;
  %1033 = log2(%1032) /* ty=Tensor[(2, 16, 2), float64] */;
  %1034 = cast(%1033, dtype="float32") /* ty=Tensor[(2, 16, 2), float32] */;
  %1035 = equal(%1012, %1013) /* ty=Tensor[(2, 16, 2), bool] */;
  %1036 = %1018.1;
  %1037 = cosh(%1019) /* ty=Tensor[(364), float32] */;
  %1038 = @func_3453() /* ty=Tensor[(3, 13, 12), bool] */;
  %1039 = %1020.0;
  %1040 = right_shift(%1023, %1024) /* ty=Tensor[(2, 16, 2), int32] */;
  %1041 = %1027.0;
  %1042 = %1028.0;
  %1043 = %1031.4;
  %1044 = log10(%1034) /* ty=Tensor[(2, 16, 2), float32] */;
  (%1035, %1036, %var_3770, %1037, %1038, %1039, %1040, %1041, %var_3837, %1042, %1043, %var_3857, %1044)
}

def @func_4138() -> (Tensor[(3, 13, 12), bool],) {
  %1045 = @func_2585() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1046 = %1045.0;
  (%1046,)
}

def @func_6160() -> (Tensor[(3, 13, 12), bool],) {
  %1047 = @func_3919() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %1048 = %1047.1;
  (%1048,)
}

def @func_2104() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %1049 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %1050 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  %1051 = %1049.1;
  (%1050, %1051)
}

def @func_11689() -> (Tensor[(3, 13, 12), bool],) {
  %1052 = @func_6643() /* ty=Tensor[(3, 13, 12), bool] */;
  (%1052,)
}

def @func_7472() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %1053 = @func_4138() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %1054 = @func_3687() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1055 = %1053.0;
  %1056 = %1054.2;
  (%1055, %1056)
}

def @func_2028() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %1057 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %1058 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  %1059 = %1057.1;
  (%1058, %1059)
}

def @func_6749() -> Tensor[(3, 13, 12), float32] {
  @func_1723() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_9582() -> Tensor[(3, 13, 12), float32] {
  %1060 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %1060.1
}

def @func_9942() -> (Tensor[(3, 13, 12), float32],) {
  %1061 = @func_9582() /* ty=Tensor[(3, 13, 12), float32] */;
  (%1061,)
}

def @func_7600() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64]) {
  %1062 = @func_5740() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %1063 = @func_2307() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %1064 = %1062.0;
  %1065 = %1063.0;
  (%1064, %1065)
}

def @func_12279() -> Tensor[(3, 13, 12), bool] {
  %1066 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %1066.0
}

def @func_9007() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8]) {
  %1067 = @func_1255() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %1068 = @func_7390() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
  %1069 = %1067.0;
  %1070 = %1068.1;
  (%1069, %1070)
}

def @func_12139() -> Tensor[(1210), bool] {
  @func_8954() /* ty=Tensor[(1210), bool] */
}

def @func_12667() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %1071 = @func_9624() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1072 = @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1073 = @func_9942() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %1074 = @func_6197() /* ty=Tensor[(3, 13, 12), bool] */;
  %1075 = %1071.0;
  %1076 = %1072.0;
  %1077 = %1073.0;
  (%1074, %1075, %1076, %1077)
}

def @func_2539() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %1078 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %1079 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  %1080 = %1078.0;
  (%1079, %1080)
}

def @func_9820(%var_9772: Tensor[(8, 11, 12), uint8], %var_9773: Tensor[(8, 11, 12), uint8]) -> (Tensor[(8, 11, 12), bool], Tensor[(3, 13, 12), float64]) {
  %1081 = cast(%var_9773, dtype="bool") /* ty=Tensor[(8, 11, 12), bool] */;
  %1082 = shape_of(%var_9772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1083 = cast(%var_9772, dtype="bool") /* ty=Tensor[(8, 11, 12), bool] */;
  %1084 = dyn.reshape(%1081, %1082, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1085 = @func_4370() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %1086 = greater(%1083, %1084) /* ty=Tensor[(8, 11, 12), bool] */;
  %1087 = %1085.0;
  (%1086, %1087)
}

def @func_2660() -> (Tensor[(3, 13, 12), bool],) {
  %1088 = @func_2585() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1089 = %1088.0;
  (%1089,)
}

def @func_8147() -> (Tensor[(3, 13, 12), bool], Tensor[(4, 12, 5), float32], Tensor[(240), float32], Tensor[(11, 10, 11), float64]) {
  %1090 = @func_7472() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1091 = cast(meta[relay.Constant][44] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %1092 = reshape(%1091, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), float32] */;
  %1093 = @func_2870() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(11, 10, 11), float64]) */;
  %1094 = %1090.1;
  %1095 = @func_4557(%1092) /* ty=Tensor[(4, 12, 5), float32] */;
  %1096 = %1093.3;
  (%1094, %1095, meta[relay.Constant][44] /* ty=Tensor[(240), float32] */, %1096)
}

def @func_9397() -> (Tensor[(5, 7, 2), float32],) {
  %1097 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 7, 2), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 2), float32] */;
  %1098 = log10(%1097) /* ty=Tensor[(5, 7, 2), float32] */;
  (%1098,)
}

def @func_8673() -> (Tensor[(3, 13, 12), bool],) {
  %1099 = @func_5740() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %1100 = %1099.0;
  (%1100,)
}

def @func_441() -> Tensor[(3, 13, 12), float32] {
  %1101 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %1102 = %1101.0;
  %1103 = cast(%1102, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
  sqrt(%1103) /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_10318() -> (Tensor[(3, 13, 12), float32],) {
  %1104 = @func_7959() /* ty=Tensor[(3, 13, 12), float32] */;
  (%1104,)
}

def @func_5414() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64]) {
  %1105 = @func_4753() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %1106 = @func_441() /* ty=Tensor[(3, 13, 12), float32] */;
  %1107 = %1105.0;
  %1108 = @func_4454() /* ty=Tensor[(3, 13, 12), float64] */;
  (%1106, %1107, %1108)
}

def @func_3996() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %1109 = @func_2028() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1110 = @func_2585() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1111 = @func_3015() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %1112 = %1109.1;
  %1113 = %1110.1;
  %1114 = %1111.0;
  (%1112, %1113, %1114)
}

def @func_1018() -> Tensor[(3, 13, 12), bool] {
  %1115 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %1115.0
}

def @func_10344(%var_10333: uint32) -> (Tensor[(7, 10, 14), bool], Tensor[(3, 13, 12), float64]) {
  %1116 = cast(%var_10333, dtype="bool") /* ty=bool */;
  %1117 = cast(meta[relay.Constant][46] /* ty=Tensor[(7, 10, 14), uint32] */, dtype="bool") /* ty=Tensor[(7, 10, 14), bool] */;
  %1118 = @func_2407() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) */;
  %1119 = less(%1116, %1117) /* ty=Tensor[(7, 10, 14), bool] */;
  %1120 = %1118.1;
  (%1119, %1120)
}

def @func_1436() -> Tensor[(3, 13, 12), float64] {
  %1121 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  %1122 = cast(%1121, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
  acosh(%1122) /* ty=Tensor[(3, 13, 12), float64] */
}

def @func_1969() -> Tensor[(3, 13, 12), float32] {
  %1123 = @func_925() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %1123.0
}

def @func_9123() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %1124 = @func_6358() /* ty=Tensor[(3, 13, 12), float32] */;
  %1125 = @func_6643() /* ty=Tensor[(3, 13, 12), bool] */;
  (%1124, %1125)
}

def @func_3178() -> (Tensor[(3, 13, 12), float32],) {
  %1126 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %1127 = %1126.0;
  (%1127,)
}

def @func_7959() -> Tensor[(3, 13, 12), float32] {
  %1128 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %1128.0
}

def @func_9507() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) {
  %1129 = @func_4584() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %1130 = @func_2360() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %1131 = @func_4370() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %1132 = @func_4117() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) */;
  %1133 = %1129.0;
  %1134 = %1130.0;
  %1135 = %1131.2;
  %1136 = %1132.2;
  (%1133, %1134, %1135, %1136)
}

def @func_7047() -> Tensor[(3, 13, 12), float32] {
  %1137 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %1137.0
}

def @func_1871(%var_1849: Tensor[(3, 13, 12), float32]) -> Tensor[(3, 13, 12), bool] {
  %1138 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %1139 = %1138.1;
  %1140 = cast(%var_1849, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %1141 = shape_of(%1139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1142 = cast(%1139, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %1143 = dyn.reshape(%1140, %1141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%1142, %1143) /* ty=Tensor[(3, 13, 12), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3061() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_7013() -> (Tensor[(3, 13, 12), bool],) {
  %0 = @func_5715() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %1 = %0.0;
  (%1,)
}

def @func_3189() -> (Tensor[(3, 13, 12), float32],) {
  %3 = fn () -> (Tensor[(3, 13, 12), float32],) {
    %2 = @func_1723() /* ty=Tensor[(3, 13, 12), float32] */;
    (%2,)
  };
  %3() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_4695() -> (Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  @func_4693() /* ty=(Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_5827(%var_5824: Tensor[(3, 3, 2), float32], %var_5825: Tensor[(520), float64], %var_5826: Tensor[(3, 3, 2), float64]) -> (Tensor[(520), float64], Tensor[(144), float32], Tensor[(520), float64], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool], Tensor[(3, 3, 2), float32], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool], Tensor[(3, 3, 2), int32], Tensor[(3, 13, 12), float64], Tensor[(3, 3, 2), float64]) {
  %36 = fn (%var_5756: Tensor[(3, 3, 2), float32], %var_5762: Tensor[(520), float64], %var_5800: Tensor[(3, 3, 2), float64]) -> (Tensor[(520), float64], Tensor[(144), float32], Tensor[(520), float64], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool], Tensor[(3, 3, 2), float32], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool], Tensor[(3, 3, 2), int32], Tensor[(3, 13, 12), float64], Tensor[(3, 3, 2), float64]) {
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %5 = cast(%var_5762, dtype="float64") /* ty=Tensor[(520), float64] */;
    %6 = reshape(%4, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
    %7 = reshape(%5, newshape=[520]) /* ty=Tensor[(520), float64] */;
    %8 = @func_3616(%6, %7) /* ty=(Tensor[(2, 12, 6), float32], Tensor[(468), bool], Tensor[(520), float64], Tensor[(468), bool]) */;
    %9 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(364), bool] */, dtype="bool") /* ty=Tensor[(364), bool] */;
    %11 = reshape(%9, newshape=[]) /* ty=bool */;
    %12 = reshape(%10, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), bool] */;
    %13 = @func_3097(%11, %12) /* ty=(Tensor[(2, 14, 13), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %14 = cast(%var_5756, dtype="float32") /* ty=Tensor[(3, 3, 2), float32] */;
    %15 = asin(%14) /* ty=Tensor[(3, 3, 2), float32] */;
    %16 = cast(%15, dtype="float32") /* ty=Tensor[(3, 3, 2), float32] */;
    %17 = @func_5484() /* ty=(Tensor[(3, 13, 12), int8],) */;
    %18 = cast(%15, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
    %19 = sin(%18) /* ty=Tensor[(3, 3, 2), float64] */;
    %20 = cast(%19, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
    %21 = sigmoid(%20) /* ty=Tensor[(3, 3, 2), float64] */;
    %22 = cast(%var_5800, dtype="int32") /* ty=Tensor[(3, 3, 2), int32] */;
    %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
    %24 = cast(%21, dtype="int32") /* ty=Tensor[(3, 3, 2), int32] */;
    %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %26 = @func_2407() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) */;
    %27 = cast(%21, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
    %28 = %8.2;
    %29 = %13.2;
    %30 = acos(%16) /* ty=Tensor[(3, 3, 2), float32] */;
    %31 = %17.0;
    %32 = @func_2637() /* ty=Tensor[(3, 13, 12), bool] */;
    %33 = bitwise_xor(%24, %25) /* ty=Tensor[(3, 3, 2), int32] */;
    %34 = %26.1;
    %35 = erf(%27) /* ty=Tensor[(3, 3, 2), float64] */;
    (%28, meta[relay.Constant][0] /* ty=Tensor[(144), float32] */, %var_5762, %29, False /* ty=bool */, meta[relay.Constant][1] /* ty=Tensor[(364), bool] */, %30, %31, %32, %33, %34, %35)
  };
  %36(%var_5824, %var_5825, %var_5826) /* ty=(Tensor[(520), float64], Tensor[(144), float32], Tensor[(520), float64], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool], Tensor[(3, 3, 2), float32], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool], Tensor[(3, 3, 2), int32], Tensor[(3, 13, 12), float64], Tensor[(3, 3, 2), float64]) */
}

def @func_1822() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool]) {
  %37 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %38 = %37.0;
  %39 = cast(%38, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %40 = reshape(%39, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), bool] */;
  %41 = @func_1039(%40) /* ty=(Tensor[(3, 13, 12), int8],) */;
  %42 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %43 = %41.0;
  %44 = %42.2;
  (%38, %43, %44)
}

def @func_2970() -> Tensor[(3, 13, 12), bool] {
  %45 = @func_2307() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %45.1
}

def @func_2638() -> Tensor[(3, 13, 12), bool] {
  %47 = fn () -> Tensor[(3, 13, 12), bool] {
    %46 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %46.0
  };
  %47() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_7472() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %48 = @func_4138() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %49 = @func_3687() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %50 = %48.0;
  %51 = %49.2;
  (%50, %51)
}

def @func_7511() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %57 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
    %52 = @func_4398() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %53 = @func_5626() /* ty=(Tensor[(11, 2, 15), float64], Tensor[(13, 8, 5), int8], Tensor[(1, 468), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(10, 52), int16]) */;
    %54 = %52.0;
    %55 = %53.5;
    %56 = @func_6749() /* ty=Tensor[(3, 13, 12), float32] */;
    (%54, %55, %56)
  };
  %57() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */
}

def @func_2817(%var_2814: int16, %var_2815: Tensor[(5, 15, 10), int16], %var_2816: Tensor[(60, 16), float32]) -> (Tensor[(5, 15, 10), int16], Tensor[(3, 13, 12), float64], Tensor[(60, 16), float32]) {
  @func_2812(%var_2814, %var_2815, %var_2816) /* ty=(Tensor[(5, 15, 10), int16], Tensor[(3, 13, 12), float64], Tensor[(60, 16), float32]) */
}

def @func_8919() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %58 = @func_3919() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %59 = %58.0;
  %60 = @func_2637() /* ty=Tensor[(3, 13, 12), bool] */;
  %61 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  (%59, %60, %61)
}

def @func_5932() -> Tensor[(3, 13, 12), bool] {
  @func_5930() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_11580() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  @func_11578() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */
}

def @func_3256() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %70 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
    %62 = @func_1255() /* ty=(Tensor[(3, 13, 12), float32],) */;
    %63 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
    %64 = @func_2360() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %65 = @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %66 = %62.0;
    %67 = %63.1;
    %68 = %64.1;
    %69 = %65.3;
    (%66, %67, %68, %69)
  };
  %70() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_12250(%var_12249: Tensor[(7, 6, 6), float64]) -> (Tensor[(7, 6, 6), bool], Tensor[(7, 6, 6), int16]) {
  %83 = fn (%var_12229: Tensor[(7, 6, 6), float64]) -> (Tensor[(7, 6, 6), bool], Tensor[(7, 6, 6), int16]) {
    %71 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 6, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 6, 6), float64] */;
    %72 = sigmoid(%71) /* ty=Tensor[(7, 6, 6), float64] */;
    %73 = cast(%var_12229, dtype="bool") /* ty=Tensor[(7, 6, 6), bool] */;
    %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
    %75 = cast(%72, dtype="bool") /* ty=Tensor[(7, 6, 6), bool] */;
    %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %77 = cast(%72, dtype="int16") /* ty=Tensor[(7, 6, 6), int16] */;
    %78 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(7, 6, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %79 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 6, 6), float64] */, dtype="int16") /* ty=Tensor[(7, 6, 6), int16] */;
    %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %81 = logical_and(%75, %76) /* ty=Tensor[(7, 6, 6), bool] */;
    %82 = minimum(%79, %80) /* ty=Tensor[(7, 6, 6), int16] */;
    (%81, %82)
  };
  %83(%var_12249) /* ty=(Tensor[(7, 6, 6), bool], Tensor[(7, 6, 6), int16]) */
}

def @func_2053() -> (Tensor[(3, 13, 12), float32],) {
  %86 = fn () -> (Tensor[(3, 13, 12), float32],) {
    %84 = @func_962() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) */;
    %85 = %84.0;
    (%85,)
  };
  %86() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_3059() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %87 = @func_3015() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %88 = cast(meta[relay.Constant][3] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %89 = reshape(%88, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %90 = @func_2220(%89) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(960), float32]) */;
  %91 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %92 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %93 = %87.1;
  %94 = %90.5;
  %95 = %91.0;
  %96 = %92.0;
  (%93, %94, meta[relay.Constant][3] /* ty=Tensor[(960), float32] */, %95, %96)
}

def @func_6151() -> Tensor[(1210), bool] {
  @func_6149() /* ty=Tensor[(1210), bool] */
}

def @func_10793() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) {
  %97 = @func_2870() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(11, 10, 11), float64]) */;
  %98 = @func_6160() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %99 = @func_6197() /* ty=Tensor[(3, 13, 12), bool] */;
  %100 = %97.0;
  %101 = %98.0;
  (%99, %100, %101)
}

def @func_1019() -> Tensor[(3, 13, 12), bool] {
  %103 = fn () -> Tensor[(3, 13, 12), bool] {
    %102 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
    %102.0
  };
  %103() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_11198() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %106 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
    %104 = @func_10809() /* ty=Tensor[(3, 13, 12), float32] */;
    %105 = @func_3453() /* ty=Tensor[(3, 13, 12), bool] */;
    (%104, %105)
  };
  %106() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_640() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %110 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
    %107 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %108 = %107.0;
    %109 = @func_441() /* ty=Tensor[(3, 13, 12), float32] */;
    (%108, %109)
  };
  %110() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */
}

def @func_9397() -> (Tensor[(5, 7, 2), float32],) {
  %111 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 7, 2), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 2), float32] */;
  %112 = log10(%111) /* ty=Tensor[(5, 7, 2), float32] */;
  (%112,)
}

def @func_4816() -> (Tensor[(3, 13, 12), bool],) {
  @func_4814() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_8785(%var_8784: Tensor[(2, 15, 13), float32]) -> Tensor[(2, 15, 13), bool] {
  %117 = fn (%var_8773: Tensor[(2, 15, 13), float32]) -> Tensor[(2, 15, 13), bool] {
    %113 = cast(%var_8773, dtype="bool") /* ty=Tensor[(2, 15, 13), bool] */;
    %114 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(2, 15, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %115 = cast(meta[relay.Constant][5] /* ty=Tensor[(2, 15, 13), float32] */, dtype="bool") /* ty=Tensor[(2, 15, 13), bool] */;
    %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%115, %116) /* ty=Tensor[(2, 15, 13), bool] */
  };
  %117(%var_8784) /* ty=Tensor[(2, 15, 13), bool] */
}

def @func_6778(%var_6776: Tensor[(48), int16], %var_6777: Tensor[(576), int16]) -> (Tensor[(3, 13, 12), float64], Tensor[(3, 12, 16), int16], Tensor[(48), int16], Tensor[(576), int16]) {
  %126 = fn (%var_6772: Tensor[(48), int16], %var_6773: Tensor[(576), int16]) -> (Tensor[(3, 13, 12), float64], Tensor[(3, 12, 16), int16], Tensor[(48), int16], Tensor[(576), int16]) {
    %118 = @func_4900() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32]) */;
    %119 = cast(%var_6772, dtype="int16") /* ty=Tensor[(48), int16] */;
    %120 = cast(%var_6773, dtype="int16") /* ty=Tensor[(576), int16] */;
    %121 = reshape(%119, newshape=[3, 1, 16]) /* ty=Tensor[(3, 1, 16), int16] */;
    %122 = reshape(%120, newshape=[3, 12, 16]) /* ty=Tensor[(3, 12, 16), int16] */;
    %123 = @func_6057(%121, %122) /* ty=(Tensor[(3, 12, 16), int16], Tensor[(3, 13, 12), bool]) */;
    %124 = %118.0;
    %125 = %123.0;
    (%124, %125, %var_6772, %var_6773)
  };
  %126(%var_6776, %var_6777) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 12, 16), int16], Tensor[(48), int16], Tensor[(576), int16]) */
}

def @func_8175() -> (Tensor[(3, 13, 12), float32],) {
  %129 = fn () -> (Tensor[(3, 13, 12), float32],) {
    %127 = @func_4370() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
    %128 = %127.1;
    (%128,)
  };
  %129() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_3874(%var_3870: bool, %var_3871: Tensor[(2, 16, 2), uint16], %var_3872: Tensor[(784), float64], %var_3873: Tensor[(960), float32]) -> (Tensor[(2, 16, 2), bool], Tensor[(3, 13, 12), bool], bool, Tensor[(364), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(2, 16, 2), int32], Tensor[(14, 7, 8), float64], Tensor[(784), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(2, 16, 2), float32]) {
  @func_3868(%var_3870, %var_3871, %var_3872, %var_3873) /* ty=(Tensor[(2, 16, 2), bool], Tensor[(3, 13, 12), bool], bool, Tensor[(364), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(2, 16, 2), int32], Tensor[(14, 7, 8), float64], Tensor[(784), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(2, 16, 2), float32]) */
}

def @func_4032() -> (Tensor[(3, 13, 12), float64],) {
  %133 = fn () -> (Tensor[(3, 13, 12), float64],) {
    %130 = @func_2970() /* ty=Tensor[(3, 13, 12), bool] */;
    %131 = cast(%130, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
    %132 = atan(%131) /* ty=Tensor[(3, 13, 12), float64] */;
    (%132,)
  };
  %133() /* ty=(Tensor[(3, 13, 12), float64],) */
}

def @func_1970() -> Tensor[(3, 13, 12), float32] {
  %135 = fn () -> Tensor[(3, 13, 12), float32] {
    %134 = @func_925() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
    %134.0
  };
  %135() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_7536() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(9, 3, 5), bool], Tensor[(135), int32]) {
  @func_7534() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(9, 3, 5), bool], Tensor[(135), int32]) */
}

def @func_11594() -> (Tensor[(3, 13, 12), bool],) {
  @func_11592() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_2812(%var_2796: int16, %var_2797: Tensor[(5, 15, 10), int16], %var_2810: Tensor[(60, 16), float32]) -> (Tensor[(5, 15, 10), int16], Tensor[(3, 13, 12), float64], Tensor[(60, 16), float32]) {
  %136 = cast(%var_2796, dtype="int16") /* ty=int16 */;
  %137 = cast(%var_2797, dtype="int16") /* ty=Tensor[(5, 15, 10), int16] */;
  %138 = cast(%var_2810, dtype="float32") /* ty=Tensor[(60, 16), float32] */;
  %139 = reshape(%138, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %140 = @func_1664(%139) /* ty=(Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */;
  %141 = maximum(%136, %137) /* ty=Tensor[(5, 15, 10), int16] */;
  %142 = %140.1;
  (%141, %142, %var_2810)
}

def @func_2586() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %147 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
    %143 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %144 = @func_2307() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
    %145 = %143.0;
    %146 = %144.1;
    (%145, %146)
  };
  %147() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_10770(%var_10768: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  @func_10767(%var_10768) /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_2870() -> (Tensor[(3, 13, 12), float64], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(11, 10, 11), float64]) {
  %148 = cast(meta[relay.Constant][6] /* ty=Tensor[(1210), float64] */, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %149 = reshape(%148, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), float64] */;
  %150 = @func_962() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) */;
  %151 = @func_1436() /* ty=Tensor[(3, 13, 12), float64] */;
  %152 = @func_860(%149) /* ty=Tensor[(11, 10, 11), float64] */;
  %153 = %150.1;
  (%151, %152, meta[relay.Constant][6] /* ty=Tensor[(1210), float64] */, %153)
}

def @func_576() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %157 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
    %154 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
    %155 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
    %156 = %154.0;
    (%155, %156)
  };
  %157() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_6149() -> Tensor[(1210), bool] {
  %158 = @func_5865() /* ty=(Tensor[(1210), float64], Tensor[(1210), float32]) */;
  %159 = %158.1;
  %160 = cast(meta[relay.Constant][7] /* ty=Tensor[(1210), float32] */, dtype="bool") /* ty=Tensor[(1210), bool] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(1), int32] */;
  %162 = cast(%159, dtype="bool") /* ty=Tensor[(1210), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?), bool] */;
  less_equal(%162, %163) /* ty=Tensor[(1210), bool] */
}

def @func_4754() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %166 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
    %164 = @func_2970() /* ty=Tensor[(3, 13, 12), bool] */;
    %165 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
    (%164, %165)
  };
  %166() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */
}

def @func_1255() -> (Tensor[(3, 13, 12), float32],) {
  %167 = @func_441() /* ty=Tensor[(3, 13, 12), float32] */;
  (%167,)
}

def @func_12765() -> Tensor[(1210), float32] {
  @func_12763() /* ty=Tensor[(1210), float32] */
}

def @func_1667(%var_1665: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) {
  @func_1664(%var_1665) /* ty=(Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */
}

def @func_10881() -> (Tensor[(3, 13, 12), float32], Tensor[(9, 3, 5), bool], Tensor[(135), int32]) {
  @func_10879() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(9, 3, 5), bool], Tensor[(135), int32]) */
}

def @func_3921() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  @func_3919() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_4781(%var_4780: Tensor[(784), float64]) -> (Tensor[(3, 13, 12), bool], Tensor[(14, 7, 8), float64], Tensor[(784), float64]) {
  %174 = fn (%var_4775: Tensor[(784), float64]) -> (Tensor[(3, 13, 12), bool], Tensor[(14, 7, 8), float64], Tensor[(784), float64]) {
    %168 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
    %169 = cast(%var_4775, dtype="float64") /* ty=Tensor[(784), float64] */;
    %170 = reshape(%169, newshape=[14, 7, 8]) /* ty=Tensor[(14, 7, 8), float64] */;
    %171 = @func_1836(%170) /* ty=(Tensor[(14, 7, 8), float64], Tensor[(3, 13, 12), float32]) */;
    %172 = %168.0;
    %173 = %171.0;
    (%172, %173, %var_4775)
  };
  %174(%var_4780) /* ty=(Tensor[(3, 13, 12), bool], Tensor[(14, 7, 8), float64], Tensor[(784), float64]) */
}

def @func_11287(%var_11272: Tensor[(6, 14, 15), uint16], %var_11283: Tensor[(600), float64]) -> (Tensor[(6, 14, 15), uint16], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8], Tensor[(600), float64]) {
  %175 = cast(%var_11272, dtype="uint16") /* ty=Tensor[(6, 14, 15), uint16] */;
  %176 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(6, 14, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 14, 15), uint16] */, dtype="uint16") /* ty=Tensor[(6, 14, 15), uint16] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %179 = cast(%var_11283, dtype="float64") /* ty=Tensor[(600), float64] */;
  %180 = reshape(%179, newshape=[12, 50]) /* ty=Tensor[(12, 50), float64] */;
  %181 = @func_6598(%180) /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(12, 50), float64], Tensor[(520), float64]) */;
  %182 = maximum(%177, %178) /* ty=Tensor[(6, 14, 15), uint16] */;
  %183 = @func_6627() /* ty=Tensor[(3, 13, 12), float32] */;
  %184 = %181.1;
  (%182, %183, %184, %var_11283)
}

def @func_3097(%var_3075: bool, %var_3076: Tensor[(2, 14, 13), bool]) -> (Tensor[(2, 14, 13), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %185 = cast(%var_3075, dtype="bool") /* ty=bool */;
  %186 = cast(%var_3076, dtype="bool") /* ty=Tensor[(2, 14, 13), bool] */;
  %187 = @func_1481() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %188 = @func_2104() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %189 = logical_and(%185, %186) /* ty=Tensor[(2, 14, 13), bool] */;
  %190 = %187.0;
  %191 = %188.0;
  (%189, %190, %191)
}

def @func_6478() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(520), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %192 = @func_3687() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %193 = @func_5715() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %194 = @func_6263() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
  %195 = @func_5626() /* ty=(Tensor[(11, 2, 15), float64], Tensor[(13, 8, 5), int8], Tensor[(1, 468), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(10, 52), int16]) */;
  %196 = @func_2052() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %197 = %192.0;
  %198 = @func_6197() /* ty=Tensor[(3, 13, 12), bool] */;
  %199 = %193.0;
  %200 = %194.2;
  %201 = %195.4;
  %202 = %196.0;
  (%197, %198, %199, %200, %201, %202)
}

def @func_4138() -> (Tensor[(3, 13, 12), bool],) {
  %203 = @func_2585() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %204 = %203.0;
  (%204,)
}

def @func_11098() -> (Tensor[(3, 13, 12), bool], Tensor[(960), float32]) {
  %209 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(960), float32]) {
    %205 = @func_3255() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %206 = @func_8453() /* ty=(Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */;
    %207 = %205.2;
    %208 = %206.0;
    (%207, %208)
  };
  %209() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32]) */
}

def @func_9080() -> Tensor[(3, 13, 12), float32] {
  %211 = fn () -> Tensor[(3, 13, 12), float32] {
    %210 = @func_962() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) */;
    %210.0
  };
  %211() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_3620(%var_3618: Tensor[(2, 12, 6), float32], %var_3619: Tensor[(520), float64]) -> (Tensor[(2, 12, 6), float32], Tensor[(468), bool], Tensor[(520), float64], Tensor[(468), bool]) {
  @func_3616(%var_3618, %var_3619) /* ty=(Tensor[(2, 12, 6), float32], Tensor[(468), bool], Tensor[(520), float64], Tensor[(468), bool]) */
}

def @func_1839(%var_1837: Tensor[(14, 7, 8), float64]) -> (Tensor[(14, 7, 8), float64], Tensor[(3, 13, 12), float32]) {
  @func_1836(%var_1837) /* ty=(Tensor[(14, 7, 8), float64], Tensor[(3, 13, 12), float32]) */
}

def @func_5068() -> Tensor[(3, 13, 12), float32] {
  %213 = fn () -> Tensor[(3, 13, 12), float32] {
    %212 = @func_1481() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
    %212.1
  };
  %213() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_5195(%var_5118: Tensor[(4, 36), float32], %var_5119: Tensor[(520, 1), float64], %var_5147: Tensor[(4, 36), float32]) -> (Tensor[(3, 13, 12), float32], Tensor[(468), bool], Tensor[(520, 1), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(4, 36), bool], Tensor[(3, 13, 12), float64]) {
  %214 = cast(%var_5118, dtype="float32") /* ty=Tensor[(4, 36), float32] */;
  %215 = cast(%var_5119, dtype="float64") /* ty=Tensor[(520, 1), float64] */;
  %216 = reshape(%214, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
  %217 = reshape(%215, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %218 = @func_3616(%216, %217) /* ty=(Tensor[(2, 12, 6), float32], Tensor[(468), bool], Tensor[(520), float64], Tensor[(468), bool]) */;
  %219 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %220 = @func_3687() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %221 = cast(%var_5147, dtype="uint16") /* ty=Tensor[(4, 36), uint16] */;
  %222 = shape_of(%var_5118, dtype="int32") /* ty=Tensor[(2), int32] */;
  %223 = cast(%var_5118, dtype="uint16") /* ty=Tensor[(4, 36), uint16] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %225 = left_shift(%223, %224) /* ty=Tensor[(4, 36), uint16] */;
  %226 = cast(%225, dtype="bool") /* ty=Tensor[(4, 36), bool] */;
  %227 = shape_of(%var_5147, dtype="int32") /* ty=Tensor[(2), int32] */;
  %228 = cast(%var_5147, dtype="bool") /* ty=Tensor[(4, 36), bool] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %230 = @func_2407() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) */;
  %231 = @func_3422() /* ty=Tensor[(3, 13, 12), float32] */;
  %232 = %218.3;
  %233 = %219.2;
  %234 = %220.3;
  %235 = less(%228, %229) /* ty=Tensor[(4, 36), bool] */;
  %236 = %230.1;
  (%231, %232, %var_5119, %233, %234, %235, %236)
}

def @func_3423() -> Tensor[(3, 13, 12), float32] {
  %238 = fn () -> Tensor[(3, 13, 12), float32] {
    %237 = @func_2052() /* ty=(Tensor[(3, 13, 12), float32],) */;
    %237.0
  };
  %238() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_11459() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %242 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
    %239 = @func_9942() /* ty=(Tensor[(3, 13, 12), float32],) */;
    %240 = %239.0;
    %241 = @func_3070() /* ty=Tensor[(3, 13, 12), bool] */;
    (%240, %241)
  };
  %242() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_1715() -> (Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) {
  @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */
}

def @func_4500(%var_4498: bool, %var_4499: Tensor[(364), bool]) -> (Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool]) {
  @func_4496(%var_4498, %var_4499) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool]) */
}

def @func_11047(%var_11045: Tensor[(12, 3, 15), float64], %var_11046: Tensor[(12, 3, 15), float64]) -> (Tensor[(12, 3, 15), float64],) {
  @func_11043(%var_11045, %var_11046) /* ty=(Tensor[(12, 3, 15), float64],) */
}

def @func_11740() -> (Tensor[(3, 13, 12), bool],) {
  %245 = fn () -> (Tensor[(3, 13, 12), bool],) {
    %243 = @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %244 = %243.3;
    (%244,)
  };
  %245() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_12341() -> Tensor[(3, 13, 12), bool] {
  %247 = fn () -> Tensor[(3, 13, 12), bool] {
    %246 = @func_10525() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %246.0
  };
  %247() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_3616(%var_3580: Tensor[(2, 12, 6), float32], %var_3598: Tensor[(520), float64]) -> (Tensor[(2, 12, 6), float32], Tensor[(468), bool], Tensor[(520), float64], Tensor[(468), bool]) {
  %248 = cast(%var_3580, dtype="float32") /* ty=Tensor[(2, 12, 6), float32] */;
  %249 = cast(%var_3598, dtype="float64") /* ty=Tensor[(520), float64] */;
  %250 = cast(meta[relay.Constant][9] /* ty=Tensor[(468), bool] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %251 = reshape(%249, newshape=[13, 8, 5]) /* ty=Tensor[(13, 8, 5), float64] */;
  %252 = reshape(%250, newshape=[468]) /* ty=Tensor[(468), bool] */;
  %253 = @func_3500(%251, %252) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(468), bool], Tensor[(13, 8, 5), int8], Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32]) */;
  %254 = log2(%248) /* ty=Tensor[(2, 12, 6), float32] */;
  %255 = %253.1;
  (%254, %255, %var_3598, meta[relay.Constant][9] /* ty=Tensor[(468), bool] */)
}

def @func_11689() -> (Tensor[(3, 13, 12), bool],) {
  %256 = @func_6643() /* ty=Tensor[(3, 13, 12), bool] */;
  (%256,)
}

def @func_3101(%var_3099: bool, %var_3100: Tensor[(2, 14, 13), bool]) -> (Tensor[(2, 14, 13), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  @func_3097(%var_3099, %var_3100) /* ty=(Tensor[(2, 14, 13), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_2496() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %262 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
    %257 = @func_2360() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %258 = @func_2028() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %259 = @func_1723() /* ty=Tensor[(3, 13, 12), float32] */;
    %260 = %257.0;
    %261 = %258.0;
    (%259, %260, %261)
  };
  %262() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_2662() -> (Tensor[(3, 13, 12), bool],) {
  @func_2660() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_1120() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) {
  %263 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %264 = %263.0;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
  %266 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %267 = log2(%265) /* ty=Tensor[(3, 13, 12), float64] */;
  %268 = %266.2;
  (%267, %268)
}

def @func_7611(%var_7609: int16, %var_7610: Tensor[(14, 6, 13), int16]) -> Tensor[(14, 6, 13), int16] {
  %271 = fn (%var_7603: int16, %var_7604: Tensor[(14, 6, 13), int16]) -> Tensor[(14, 6, 13), int16] {
    %269 = cast(%var_7603, dtype="int16") /* ty=int16 */;
    %270 = cast(%var_7604, dtype="int16") /* ty=Tensor[(14, 6, 13), int16] */;
    minimum(%269, %270) /* ty=Tensor[(14, 6, 13), int16] */
  };
  %271(%var_7609, %var_7610) /* ty=Tensor[(14, 6, 13), int16] */
}

def @func_10795() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) {
  @func_10793() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */
}

def @func_5337() -> (Tensor[(3, 13, 12), float32], Tensor[(960), float32]) {
  @func_5335() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(960), float32]) */
}

def @func_7474() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  @func_7472() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_6987(%var_6985: Tensor[(5, 9, 4), float64]) -> Tensor[(5, 9, 4), float64] {
  @func_6984(%var_6985) /* ty=Tensor[(5, 9, 4), float64] */
}

def @func_9824(%var_9822: Tensor[(8, 11, 12), uint8], %var_9823: Tensor[(8, 11, 12), uint8]) -> (Tensor[(8, 11, 12), bool], Tensor[(3, 13, 12), float64]) {
  @func_9820(%var_9822, %var_9823) /* ty=(Tensor[(8, 11, 12), bool], Tensor[(3, 13, 12), float64]) */
}

def @func_6643() -> Tensor[(3, 13, 12), bool] {
  @func_2970() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_4496(%var_4488: bool, %var_4489: Tensor[(364), bool]) -> (Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool]) {
  %272 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %273 = cast(meta[relay.Constant][10] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %274 = reshape(%273, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %275 = @func_1235(%274) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(6, 16, 10), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool]) */;
  %276 = @func_2585() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %277 = cast(%var_4488, dtype="bool") /* ty=bool */;
  %278 = cast(%var_4489, dtype="bool") /* ty=Tensor[(364), bool] */;
  %279 = reshape(%277, newshape=[]) /* ty=bool */;
  %280 = reshape(%278, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), bool] */;
  %281 = @func_3097(%279, %280) /* ty=(Tensor[(2, 14, 13), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %282 = %272.1;
  %283 = %275.2;
  %284 = %276.1;
  %285 = %281.1;
  (%282, %283, meta[relay.Constant][10] /* ty=Tensor[(960), float32] */, %284, %285, %var_4488, %var_4489)
}

def @func_8712() -> Tensor[(3, 13, 12), int8] {
  @func_8710() /* ty=Tensor[(3, 13, 12), int8] */
}

def @func_11655() -> Tensor[(3, 13, 12), bool] {
  %286 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %286.1
}

def @func_6187(%var_6186: Tensor[(2, 2, 7), int64]) -> Tensor[(2, 2, 7), bool] {
  %291 = fn (%var_6178: Tensor[(2, 2, 7), int64]) -> Tensor[(2, 2, 7), bool] {
    %287 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 2, 7), int64] */, dtype="bool") /* ty=Tensor[(2, 2, 7), bool] */;
    %288 = shape_of(%var_6178, dtype="int32") /* ty=Tensor[(3), int32] */;
    %289 = cast(%var_6178, dtype="bool") /* ty=Tensor[(2, 2, 7), bool] */;
    %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%289, %290) /* ty=Tensor[(2, 2, 7), bool] */
  };
  %291(%var_6186) /* ty=Tensor[(2, 2, 7), bool] */
}

def @func_8921() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  @func_8919() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */
}

def @func_8454() -> (Tensor[(960), float32], Tensor[(3, 13, 12), float32]) {
  %296 = fn () -> (Tensor[(960), float32], Tensor[(3, 13, 12), float32]) {
    %292 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
    %293 = @func_5214() /* ty=(Tensor[(3, 13, 12), float32],) */;
    %294 = %292.2;
    %295 = %293.0;
    (%294, %295)
  };
  %296() /* ty=(Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */
}

def @func_4217(%var_4215: Tensor[(9, 3, 5), int32]) -> (Tensor[(9, 3, 5), bool],) {
  @func_4214(%var_4215) /* ty=(Tensor[(9, 3, 5), bool],) */
}

def @func_8710() -> Tensor[(3, 13, 12), int8] {
  @func_3273() /* ty=Tensor[(3, 13, 12), int8] */
}

def @func_1824() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool]) {
  @func_1822() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool]) */
}

def @func_1871(%var_1849: Tensor[(3, 13, 12), float32]) -> Tensor[(3, 13, 12), bool] {
  %297 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %298 = %297.1;
  %299 = cast(%var_1849, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%298, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%301, %302) /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_3523() -> Tensor[(3, 13, 12), float32] {
  @func_3521() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_3689() -> (Tensor[(3, 13, 12), bool], Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  @func_3687() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_6598(%var_6547: Tensor[(12, 50), float64]) -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(12, 50), float64], Tensor[(520), float64]) {
  %303 = @func_3996() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %304 = cast(%var_6547, dtype="float64") /* ty=Tensor[(12, 50), float64] */;
  %305 = cast(%var_6547, dtype="float64") /* ty=Tensor[(12, 50), float64] */;
  %306 = reshape(%304, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), float64] */;
  %307 = reshape(%305, newshape=[10, 4, 15]) /* ty=Tensor[(10, 4, 15), float64] */;
  %308 = @func_5695(%306, %307) /* ty=(Tensor[(10, 4, 15), float64], Tensor[(3, 13, 12), int8]) */;
  %309 = @func_6263() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
  %310 = %303.1;
  %311 = %308.1;
  %312 = %309.2;
  (%310, %311, %var_6547, %312)
}

def @func_4202() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %317 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
    %313 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
    %314 = %313.0;
    %315 = @func_1723() /* ty=Tensor[(3, 13, 12), float32] */;
    %316 = @func_3070() /* ty=Tensor[(3, 13, 12), bool] */;
    (%314, %315, %316)
  };
  %317() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_2972() -> Tensor[(3, 13, 12), bool] {
  @func_2970() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_5484() -> (Tensor[(3, 13, 12), int8],) {
  %318 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %319 = %318.3;
  (%319,)
}

def @func_3179() -> (Tensor[(3, 13, 12), float32],) {
  %322 = fn () -> (Tensor[(3, 13, 12), float32],) {
    %320 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %321 = %320.0;
    (%321,)
  };
  %322() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_3998() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  @func_3996() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_7933() -> Tensor[(3, 13, 12), float32] {
  @func_7931() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_9399() -> (Tensor[(5, 7, 2), float32],) {
  @func_9397() /* ty=(Tensor[(5, 7, 2), float32],) */
}

def @func_7423() -> (Tensor[(3, 13, 12), float32],) {
  @func_7421() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_8868() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %323 = @func_4604() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %324 = @func_7931() /* ty=Tensor[(3, 13, 12), float32] */;
  %325 = %323.0;
  (%324, %325)
}

def @func_9820(%var_9772: Tensor[(8, 11, 12), uint8], %var_9773: Tensor[(8, 11, 12), uint8]) -> (Tensor[(8, 11, 12), bool], Tensor[(3, 13, 12), float64]) {
  %326 = cast(%var_9773, dtype="bool") /* ty=Tensor[(8, 11, 12), bool] */;
  %327 = shape_of(%var_9772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%var_9772, dtype="bool") /* ty=Tensor[(8, 11, 12), bool] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %330 = @func_4370() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %331 = greater(%328, %329) /* ty=Tensor[(8, 11, 12), bool] */;
  %332 = %330.0;
  (%331, %332)
}

def @func_4372() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  @func_4370() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */
}

def @func_4901() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32]) {
  %337 = fn () -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32]) {
    %333 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
    %334 = @func_2495() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %335 = %333.0;
    %336 = %334.1;
    (%335, %336)
  };
  %337() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32]) */
}

def @func_11691() -> (Tensor[(3, 13, 12), bool],) {
  @func_11689() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_10393() -> Tensor[(3, 13, 12), bool] {
  %339 = fn () -> Tensor[(3, 13, 12), bool] {
    %338 = @func_9507() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) */;
    %338.0
  };
  %339() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_1042(%var_1040: Tensor[(3, 13, 12), bool]) -> (Tensor[(3, 13, 12), int8],) {
  @func_1039(%var_1040) /* ty=(Tensor[(3, 13, 12), int8],) */
}

def @func_10318() -> (Tensor[(3, 13, 12), float32],) {
  %340 = @func_7959() /* ty=Tensor[(3, 13, 12), float32] */;
  (%340,)
}

def @func_11829() -> Tensor[(3, 13, 12), float32] {
  %341 = @func_8174() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %341.0
}

def @func_12987() -> (Tensor[(3, 13, 12), bool],) {
  @func_12985() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_7824() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), int8]) {
  %345 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), int8]) {
    %342 = @func_1969() /* ty=Tensor[(3, 13, 12), float32] */;
    %343 = @func_1436() /* ty=Tensor[(3, 13, 12), float64] */;
    %344 = @func_3273() /* ty=Tensor[(3, 13, 12), int8] */;
    (%342, %343, %344)
  };
  %345() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), int8]) */
}

def @func_6826() -> (Tensor[(11, 2, 15), float64],) {
  %348 = fn () -> (Tensor[(11, 2, 15), float64],) {
    %346 = @func_2708() /* ty=(Tensor[(11, 2, 15), float64], Tensor[(11, 2, 15), float64]) */;
    %347 = %346.1;
    (%347,)
  };
  %348() /* ty=(Tensor[(11, 2, 15), float64],) */
}

def @func_1874(%var_1872: Tensor[(3, 13, 12), float32]) -> Tensor[(3, 13, 12), bool] {
  @func_1871(%var_1872) /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_11496() -> Tensor[(3, 13, 12), float32] {
  @func_11494() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_6645() -> Tensor[(3, 13, 12), bool] {
  @func_6643() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_925() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %349 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %350 = %349.1;
  %351 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  (%350, %351)
}

def @func_7210() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %358 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
    %352 = @func_5715() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %353 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
    %354 = @func_6287() /* ty=(Tensor[(3, 13, 12), float32],) */;
    %355 = %352.0;
    %356 = %353.0;
    %357 = %354.0;
    (%355, %356, %357)
  };
  %358() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */
}

def @func_5486() -> (Tensor[(3, 13, 12), int8],) {
  @func_5484() /* ty=(Tensor[(3, 13, 12), int8],) */
}

def @func_2736() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %364 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
    %359 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
    %360 = %359.1;
    %361 = cast(%360, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
    %362 = reshape(%361, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), float32] */;
    %363 = @func_1871(%362) /* ty=Tensor[(3, 13, 12), bool] */;
    (%360, %363)
  };
  %364() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_8573() -> (Tensor[(3, 13, 12), float32],) {
  %365 = @func_1723() /* ty=Tensor[(3, 13, 12), float32] */;
  (%365,)
}

def @func_6601(%var_6599: Tensor[(12, 50), float64]) -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(12, 50), float64], Tensor[(520), float64]) {
  @func_6598(%var_6599) /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(12, 50), float64], Tensor[(520), float64]) */
}

def @func_2660() -> (Tensor[(3, 13, 12), bool],) {
  %366 = @func_2585() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %367 = %366.0;
  (%367,)
}

def @func_10488() -> (Tensor[(3, 13, 12), bool], Tensor[(14, 6, 13), int16], int16, Tensor[(1092), int16]) {
  %375 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(14, 6, 13), int16], int16, Tensor[(1092), int16]) {
    %368 = @func_7600() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64]) */;
    %369 = cast(meta[relay.Constant][12] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %370 = cast(meta[relay.Constant][13] /* ty=Tensor[(1092), int16] */, dtype="int16") /* ty=Tensor[(1092), int16] */;
    %371 = reshape(%369, newshape=[]) /* ty=int16 */;
    %372 = reshape(%370, newshape=[14, 6, 13]) /* ty=Tensor[(14, 6, 13), int16] */;
    %373 = %368.0;
    %374 = @func_7608(%371, %372) /* ty=Tensor[(14, 6, 13), int16] */;
    (%373, %374, meta[relay.Constant][12] /* ty=int16 */, meta[relay.Constant][13] /* ty=Tensor[(1092), int16] */)
  };
  %375() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(14, 6, 13), int16], int16, Tensor[(1092), int16]) */
}

def @func_8231(%var_8230: Tensor[(11, 2, 15), float64]) -> (Tensor[(11, 2, 15), float32],) {
  %383 = fn (%var_8216: Tensor[(11, 2, 15), float64]) -> (Tensor[(11, 2, 15), float32],) {
    %376 = @func_6825() /* ty=(Tensor[(11, 2, 15), float64],) */;
    %377 = %376.0;
    %378 = cast(%var_8216, dtype="float32") /* ty=Tensor[(11, 2, 15), float32] */;
    %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
    %380 = cast(%377, dtype="float32") /* ty=Tensor[(11, 2, 15), float32] */;
    %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %382 = add(%380, %381) /* ty=Tensor[(11, 2, 15), float32] */;
    (%382,)
  };
  %383(%var_8230) /* ty=(Tensor[(11, 2, 15), float32],) */
}

def @func_1122() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) {
  @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */
}

def @func_2950(%var_2949: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), bool], Tensor[(3, 13, 12), float32]) {
  %401 = fn (%var_2897: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), bool], Tensor[(3, 13, 12), float32]) {
    %384 = cast(%var_2897, dtype="float32") /* ty=Tensor[(960), float32] */;
    %385 = reshape(%384, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %386 = @func_2220(%385) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(960), float32]) */;
    %387 = @func_2104() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %388 = @func_2870() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(11, 10, 11), float64]) */;
    %389 = %388.3;
    %390 = cast(%389, dtype="float32") /* ty=Tensor[(11, 10, 11), float32] */;
    %391 = asinh(%390) /* ty=Tensor[(11, 10, 11), float32] */;
    %392 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 10, 11), float32] */, dtype="bool") /* ty=Tensor[(11, 10, 11), bool] */;
    %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(3), int32] */;
    %394 = cast(%391, dtype="bool") /* ty=Tensor[(11, 10, 11), bool] */;
    %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %396 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
    %397 = %386.0;
    %398 = %387.0;
    %399 = greater(%394, %395) /* ty=Tensor[(11, 10, 11), bool] */;
    %400 = %396.1;
    (%397, %var_2897, %398, %399, %400)
  };
  %401(%var_2949) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), bool], Tensor[(3, 13, 12), float32]) */
}

def @func_12926() -> (Tensor[(3, 13, 12), float32],) {
  @func_12924() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_13072() -> (Tensor[(3, 13, 12), float64], Tensor[(14, 6, 13), int16], Tensor[(3, 13, 12), float32]) {
  %402 = @func_4370() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %403 = @func_10487() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(14, 6, 13), int16], int16, Tensor[(1092), int16]) */;
  %404 = @func_5993() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %405 = %402.0;
  %406 = %403.1;
  %407 = %404.0;
  (%405, %406, %407)
}

def @func_2872() -> (Tensor[(3, 13, 12), float64], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(11, 10, 11), float64]) {
  @func_2870() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(11, 10, 11), float64]) */
}

def @func_5908() -> (Tensor[(960), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) {
  %408 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
  %409 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %410 = @func_2870() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(11, 10, 11), float64]) */;
  %411 = %408.2;
  %412 = %409.1;
  %413 = %410.2;
  (%411, %412, %413)
}

def @func_1520(%var_1519: Tensor[(3, 13, 12), bool]) -> Tensor[(3, 13, 12), float64] {
  %420 = fn (%var_1504: Tensor[(3, 13, 12), bool]) -> Tensor[(3, 13, 12), float64] {
    %414 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %415 = %414.0;
    %416 = cast(%var_1504, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
    %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
    %418 = cast(%415, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
    %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%418, %419) /* ty=Tensor[(3, 13, 12), float64] */
  };
  %420(%var_1519) /* ty=Tensor[(3, 13, 12), float64] */
}

def @func_4276() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) {
  @func_4274() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) */
}

def @func_9942() -> (Tensor[(3, 13, 12), float32],) {
  %421 = @func_9582() /* ty=Tensor[(3, 13, 12), float32] */;
  (%421,)
}

def @func_9676(%var_9674: Tensor[(9, 15, 2), bool], %var_9675: Tensor[(9, 15, 2), bool]) -> (Tensor[(9, 15, 2), bool], Tensor[(9, 15, 2), bool]) {
  %437 = fn (%var_9636: Tensor[(9, 15, 2), bool], %var_9637: Tensor[(9, 15, 2), bool]) -> (Tensor[(9, 15, 2), bool], Tensor[(9, 15, 2), bool]) {
    %422 = cast(%var_9637, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
    %423 = shape_of(%var_9636, dtype="int32") /* ty=Tensor[(3), int32] */;
    %424 = cast(%var_9636, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
    %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %426 = logical_or(%424, %425) /* ty=Tensor[(9, 15, 2), bool] */;
    %427 = cast(%426, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
    %428 = shape_of(%var_9636, dtype="int32") /* ty=Tensor[(3), int32] */;
    %429 = cast(%var_9636, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
    %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %431 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 15, 2), bool] */, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
    %432 = shape_of(%var_9637, dtype="int32") /* ty=Tensor[(3), int32] */;
    %433 = cast(%var_9637, dtype="bool") /* ty=Tensor[(9, 15, 2), bool] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %435 = equal(%429, %430) /* ty=Tensor[(9, 15, 2), bool] */;
    %436 = greater(%433, %434) /* ty=Tensor[(9, 15, 2), bool] */;
    (%435, %436)
  };
  %437(%var_9674, %var_9675) /* ty=(Tensor[(9, 15, 2), bool], Tensor[(9, 15, 2), bool]) */
}

def @func_1836(%var_1827: Tensor[(14, 7, 8), float64]) -> (Tensor[(14, 7, 8), float64], Tensor[(3, 13, 12), float32]) {
  %438 = cast(%var_1827, dtype="float64") /* ty=Tensor[(14, 7, 8), float64] */;
  %439 = @func_925() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %440 = acosh(%438) /* ty=Tensor[(14, 7, 8), float64] */;
  %441 = %439.1;
  (%440, %441)
}

def @func_7392() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) {
  @func_7390() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */
}

def @func_2709() -> (Tensor[(11, 2, 15), float64], Tensor[(11, 2, 15), float64]) {
  %449 = fn () -> (Tensor[(11, 2, 15), float64], Tensor[(11, 2, 15), float64]) {
    %442 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
    %443 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(11, 2, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %444 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %446 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
    %447 = divide(%444, %445) /* ty=Tensor[(11, 2, 15), float64] */;
    %448 = log10(%446) /* ty=Tensor[(11, 2, 15), float64] */;
    (%447, %448)
  };
  %449() /* ty=(Tensor[(11, 2, 15), float64], Tensor[(11, 2, 15), float64]) */
}

def @func_10809() -> Tensor[(3, 13, 12), float32] {
  %450 = @func_2052() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %450.0
}

def @func_12566() -> (Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %451 = @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %452 = @func_10166() /* ty=(Tensor[(520), float64], Tensor[(1210), uint32], Tensor[(1210), float64], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %453 = @func_6804() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %454 = %451.0;
  %455 = %452.3;
  %456 = @func_6870() /* ty=Tensor[(3, 13, 12), float32] */;
  %457 = %453.0;
  (%454, %455, %456, %457)
}

def @func_10979() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(960), float32]) {
  %470 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(960), float32]) {
    %458 = @func_4160() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %459 = @func_4398() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %460 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %461 = %458.0;
    %462 = cast(%461, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
    %463 = reshape(%462, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), bool] */;
    %464 = @func_1039(%463) /* ty=(Tensor[(3, 13, 12), int8],) */;
    %465 = @func_10166() /* ty=(Tensor[(520), float64], Tensor[(1210), uint32], Tensor[(1210), float64], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
    %466 = %459.0;
    %467 = %460.0;
    %468 = %464.0;
    %469 = %465.3;
    (%461, %466, %467, %468, %469)
  };
  %470() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(960), float32]) */
}

def @func_7048() -> Tensor[(3, 13, 12), float32] {
  %472 = fn () -> Tensor[(3, 13, 12), float32] {
    %471 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %471.0
  };
  %472() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_11592() -> (Tensor[(3, 13, 12), bool],) {
  %473 = @func_7472() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %474 = %473.1;
  (%474,)
}

def @func_10270() -> (Tensor[(2, 480), float32],) {
  %477 = fn () -> (Tensor[(2, 480), float32],) {
    %475 = @func_9761() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(2, 480), float32]) */;
    %476 = %475.3;
    (%476,)
  };
  %477() /* ty=(Tensor[(2, 480), float32],) */
}

def @func_12398() -> (Tensor[(1210), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  @func_12396() /* ty=(Tensor[(1210), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */
}

def @func_5200(%var_5197: Tensor[(4, 36), float32], %var_5198: Tensor[(520, 1), float64], %var_5199: Tensor[(4, 36), float32]) -> (Tensor[(3, 13, 12), float32], Tensor[(468), bool], Tensor[(520, 1), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(4, 36), bool], Tensor[(3, 13, 12), float64]) {
  @func_5195(%var_5197, %var_5198, %var_5199) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(468), bool], Tensor[(520, 1), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(4, 36), bool], Tensor[(3, 13, 12), float64]) */
}

def @func_6167(%var_6162: Tensor[(6, 4, 10), float32], %var_6163: Tensor[(6, 4, 10), float32]) -> (Tensor[(6, 4, 10), bool],) {
  %478 = cast(%var_6163, dtype="bool") /* ty=Tensor[(6, 4, 10), bool] */;
  %479 = shape_of(%var_6162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%var_6162, dtype="bool") /* ty=Tensor[(6, 4, 10), bool] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %482 = greater_equal(%480, %481) /* ty=Tensor[(6, 4, 10), bool] */;
  (%482,)
}

def @func_12281() -> Tensor[(3, 13, 12), bool] {
  @func_12279() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_6984(%var_6981: Tensor[(5, 9, 4), float64]) -> Tensor[(5, 9, 4), float64] {
  %483 = cast(%var_6981, dtype="float64") /* ty=Tensor[(5, 9, 4), float64] */;
  exp(%483) /* ty=Tensor[(5, 9, 4), float64] */
}

def @func_3070() -> Tensor[(3, 13, 12), bool] {
  %484 = @func_3015() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %485 = %484.0;
  %486 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 13, 12), bool] */, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%485, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%488, %489) /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_7390() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) {
  %490 = @func_4398() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %491 = cast(meta[relay.Constant][19] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %492 = cast(meta[relay.Constant][20] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
  %493 = cast(meta[relay.Constant][19] /* ty=Tensor[(18), float32] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %494 = reshape(%491, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float32] */;
  %495 = reshape(%492, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %496 = reshape(%493, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
  %497 = @func_5823(%494, %495, %496) /* ty=(Tensor[(520), float64], Tensor[(144), float32], Tensor[(520), float64], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool], Tensor[(3, 3, 2), float32], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool], Tensor[(3, 3, 2), int32], Tensor[(3, 13, 12), float64], Tensor[(3, 3, 2), float64]) */;
  %498 = @func_3188() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %499 = %490.0;
  %500 = %497.7;
  %501 = %498.0;
  (%499, %500, meta[relay.Constant][19] /* ty=Tensor[(18), float32] */, meta[relay.Constant][20] /* ty=Tensor[(520), float64] */, %501)
}

def @func_3919() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %502 = @func_2360() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %503 = %502.0;
  %504 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  (%503, %504)
}

def @func_6171(%var_6169: Tensor[(6, 4, 10), float32], %var_6170: Tensor[(6, 4, 10), float32]) -> (Tensor[(6, 4, 10), bool],) {
  @func_6167(%var_6169, %var_6170) /* ty=(Tensor[(6, 4, 10), bool],) */
}

def @func_11900(%var_11898: Tensor[(7, 11, 14), float64]) -> (Tensor[(7, 11, 14), float64], Tensor[(3, 13, 12), float64], Tensor[(1210), float64]) {
  @func_11897(%var_11898) /* ty=(Tensor[(7, 11, 14), float64], Tensor[(3, 13, 12), float64], Tensor[(1210), float64]) */
}

def @func_2104() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %505 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %506 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  %507 = %505.1;
  (%506, %507)
}

def @func_5335() -> (Tensor[(3, 13, 12), float32], Tensor[(960), float32]) {
  %508 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
  %509 = @func_3422() /* ty=Tensor[(3, 13, 12), float32] */;
  %510 = %508.2;
  (%509, %510)
}

def @func_927() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  @func_925() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */
}

def @func_6287() -> (Tensor[(3, 13, 12), float32],) {
  %511 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %512 = %511.0;
  (%512,)
}

def @func_6628() -> Tensor[(3, 13, 12), float32] {
  %514 = fn () -> Tensor[(3, 13, 12), float32] {
    %513 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
    %513.1
  };
  %514() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_6480() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(520), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  @func_6478() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(520), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */
}

def @func_6751() -> Tensor[(3, 13, 12), float32] {
  @func_6749() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_5695(%var_5670: Tensor[(10, 4, 15), float64], %var_5671: Tensor[(10, 4, 15), float64]) -> (Tensor[(10, 4, 15), float64], Tensor[(3, 13, 12), int8]) {
  %515 = cast(%var_5671, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %516 = shape_of(%var_5670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%var_5670, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %519 = @func_5484() /* ty=(Tensor[(3, 13, 12), int8],) */;
  %520 = floor_mod(%517, %518) /* ty=Tensor[(10, 4, 15), float64] */;
  %521 = %519.0;
  (%520, %521)
}

def @func_2106() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  @func_2104() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_9124() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %524 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
    %522 = @func_6358() /* ty=Tensor[(3, 13, 12), float32] */;
    %523 = @func_6643() /* ty=Tensor[(3, 13, 12), bool] */;
    (%522, %523)
  };
  %524() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_8575() -> (Tensor[(3, 13, 12), float32],) {
  @func_8573() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_12763() -> Tensor[(1210), float32] {
  %525 = @func_5865() /* ty=(Tensor[(1210), float64], Tensor[(1210), float32]) */;
  %525.1
}

def @func_1180(%var_1166: Tensor[(6, 16, 10), float32]) -> (Tensor[(6, 16, 10), float32], Tensor[(3, 13, 12), bool]) {
  %526 = cast(%var_1166, dtype="float32") /* ty=Tensor[(6, 16, 10), float32] */;
  %527 = sigmoid(%526) /* ty=Tensor[(6, 16, 10), float32] */;
  %528 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  (%527, %528)
}

def @func_11657() -> Tensor[(3, 13, 12), bool] {
  @func_11655() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_12972() -> Tensor[(3, 13, 12), float32] {
  %530 = fn () -> Tensor[(3, 13, 12), float32] {
    %529 = @func_12396() /* ty=(Tensor[(1210), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
    %529.1
  };
  %530() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_5993() -> (Tensor[(3, 13, 12), float32],) {
  %531 = @func_925() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %532 = %531.1;
  (%532,)
}

def @func_3503(%var_3501: Tensor[(13, 8, 5), float64], %var_3502: Tensor[(468), bool]) -> (Tensor[(3, 13, 12), float64], Tensor[(468), bool], Tensor[(13, 8, 5), int8], Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32]) {
  %549 = fn (%var_3465: Tensor[(13, 8, 5), float64], %var_3485: Tensor[(468), bool]) -> (Tensor[(3, 13, 12), float64], Tensor[(468), bool], Tensor[(13, 8, 5), int8], Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32]) {
    %533 = cast(%var_3485, dtype="bool") /* ty=Tensor[(468), bool] */;
    %534 = reshape(%533, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), bool] */;
    %535 = cast(%var_3465, dtype="float64") /* ty=Tensor[(13, 8, 5), float64] */;
    %536 = log10(%535) /* ty=Tensor[(13, 8, 5), float64] */;
    %537 = cast(%536, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
    %538 = sqrt(%537) /* ty=Tensor[(13, 8, 5), float32] */;
    %539 = cast(%536, dtype="int8") /* ty=Tensor[(13, 8, 5), int8] */;
    %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
    %541 = cast(%538, dtype="int8") /* ty=Tensor[(13, 8, 5), int8] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %543 = @func_2735() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %544 = cast(%538, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
    %545 = @func_1518(%534) /* ty=Tensor[(3, 13, 12), float64] */;
    %546 = right_shift(%541, %542) /* ty=Tensor[(13, 8, 5), int8] */;
    %547 = %543.0;
    %548 = exp(%544) /* ty=Tensor[(13, 8, 5), float32] */;
    (%545, %var_3485, %546, %547, %548)
  };
  %549(%var_3501, %var_3502) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(468), bool], Tensor[(13, 8, 5), int8], Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32]) */
}

def @func_11979() -> (Tensor[(2, 480), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %560 = fn () -> (Tensor[(2, 480), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
    %550 = @func_10269() /* ty=(Tensor[(2, 480), float32],) */;
    %551 = @func_4138() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %552 = @func_962() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) */;
    %553 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
    %554 = %550.0;
    %555 = %551.0;
    %556 = @func_6870() /* ty=Tensor[(3, 13, 12), float32] */;
    %557 = %552.0;
    %558 = @func_2637() /* ty=Tensor[(3, 13, 12), bool] */;
    %559 = %553.0;
    (%554, %555, %556, %557, %558, %559)
  };
  %560() /* ty=(Tensor[(2, 480), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_10167() -> (Tensor[(520), float64], Tensor[(1210), uint32], Tensor[(1210), float64], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %572 = fn () -> (Tensor[(520), float64], Tensor[(1210), uint32], Tensor[(1210), float64], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
    %561 = @func_7390() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
    %562 = cast(meta[relay.Constant][21] /* ty=Tensor[(1210), float64] */, dtype="float64") /* ty=Tensor[(1210), float64] */;
    %563 = reshape(%562, newshape=[1210]) /* ty=Tensor[(1210), float64] */;
    %564 = @func_4987(%563) /* ty=(Tensor[(1210), uint32],) */;
    %565 = @func_5908() /* ty=(Tensor[(960), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) */;
    %566 = @func_9942() /* ty=(Tensor[(3, 13, 12), float32],) */;
    %567 = %561.3;
    %568 = %564.0;
    %569 = %565.0;
    %570 = @func_2637() /* ty=Tensor[(3, 13, 12), bool] */;
    %571 = %566.0;
    (%567, %568, meta[relay.Constant][21] /* ty=Tensor[(1210), float64] */, %569, %570, %571)
  };
  %572() /* ty=(Tensor[(520), float64], Tensor[(1210), uint32], Tensor[(1210), float64], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */
}

def @func_6199() -> Tensor[(3, 13, 12), bool] {
  @func_6197() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_11043(%var_11025: Tensor[(12, 3, 15), float64], %var_11026: Tensor[(12, 3, 15), float64]) -> (Tensor[(12, 3, 15), float64],) {
  %573 = cast(%var_11026, dtype="float64") /* ty=Tensor[(12, 3, 15), float64] */;
  %574 = shape_of(%var_11025, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%var_11025, dtype="float64") /* ty=Tensor[(12, 3, 15), float64] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %577 = mod(%575, %576) /* ty=Tensor[(12, 3, 15), float64] */;
  (%577,)
}

def @func_11516() -> Tensor[(3, 13, 12), bool] {
  %579 = fn () -> Tensor[(3, 13, 12), bool] {
    %578 = @func_7472() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %578.0
  };
  %579() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_5298() -> (Tensor[(3, 13, 12), float64], Tensor[(9, 3, 5), bool]) {
  %591 = fn () -> (Tensor[(3, 13, 12), float64], Tensor[(9, 3, 5), bool]) {
    %580 = @func_2407() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) */;
    %581 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 9), int32] */, dtype="int32") /* ty=Tensor[(15, 9), int32] */;
    %582 = reshape(%581, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), int32] */;
    %583 = @func_4214(%582) /* ty=(Tensor[(9, 3, 5), bool],) */;
    %584 = %583.0;
    %585 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 9), int32] */, dtype="bool") /* ty=Tensor[(15, 9), bool] */;
    %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
    %587 = cast(%584, dtype="bool") /* ty=Tensor[(9, 3, 5), bool] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %589 = %580.0;
    %590 = less(%587, %588) /* ty=Tensor[(9, 3, 5), bool] */;
    (%589, %590)
  };
  %591() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(9, 3, 5), bool]) */
}

def @func_1374() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) {
  %592 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %593 = @func_1255() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %594 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %595 = %592.2;
  %596 = cast(%595, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %597 = reshape(%596, newshape=[3, 13, 12]) /* ty=Tensor[(3, 13, 12), bool] */;
  %598 = @func_1039(%597) /* ty=(Tensor[(3, 13, 12), int8],) */;
  %599 = %593.0;
  %600 = %594.0;
  %601 = %598.0;
  (%595, %599, %600, %601)
}

def @func_2222(%var_2221: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(960), float32]) {
  %619 = fn (%var_2213: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(960), float32]) {
    %602 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %603 = @func_1481() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
    %604 = @func_1481() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
    %605 = %604.1;
    %606 = cast(%605, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
    %607 = @func_925() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
    %608 = @func_2104() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %609 = cast(%var_2213, dtype="float32") /* ty=Tensor[(960), float32] */;
    %610 = reshape(%609, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %611 = @func_1664(%610) /* ty=(Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */;
    %612 = %602.0;
    %613 = %603.0;
    %614 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
    %615 = log10(%606) /* ty=Tensor[(3, 13, 12), float64] */;
    %616 = %607.1;
    %617 = %608.0;
    %618 = %611.6;
    (%612, %613, %614, %615, %616, %617, %618, %var_2213)
  };
  %619(%var_2221) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(960), float32]) */
}

def @func_1039(%var_1029: Tensor[(3, 13, 12), bool]) -> (Tensor[(3, 13, 12), int8],) {
  %620 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  %621 = cast(%var_1029, dtype="int8") /* ty=Tensor[(3, 13, 12), int8] */;
  %622 = shape_of(%620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%620, dtype="int8") /* ty=Tensor[(3, 13, 12), int8] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %625 = bitwise_or(%623, %624) /* ty=Tensor[(3, 13, 12), int8] */;
  (%625,)
}

def @func_1438() -> Tensor[(3, 13, 12), float64] {
  @func_1436() /* ty=Tensor[(3, 13, 12), float64] */
}

def @func_9008() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8]) {
  %630 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8]) {
    %626 = @func_1255() /* ty=(Tensor[(3, 13, 12), float32],) */;
    %627 = @func_7390() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
    %628 = %626.0;
    %629 = %627.1;
    (%628, %629)
  };
  %630() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8]) */
}

def @func_9944() -> (Tensor[(3, 13, 12), float32],) {
  @func_9942() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_4237(%var_4233: Tensor[(12, 2, 8), int32], %var_4234: Tensor[(12, 2, 8), int32], %var_4235: Tensor[(144), float32], %var_4236: Tensor[(1, 520), float64]) -> (Tensor[(12, 2, 8), int32], Tensor[(2, 12, 6), float32], Tensor[(144), float32], Tensor[(1, 520), float64]) {
  %642 = fn (%var_4219: Tensor[(12, 2, 8), int32], %var_4220: Tensor[(12, 2, 8), int32], %var_4227: Tensor[(144), float32], %var_4228: Tensor[(1, 520), float64]) -> (Tensor[(12, 2, 8), int32], Tensor[(2, 12, 6), float32], Tensor[(144), float32], Tensor[(1, 520), float64]) {
    %631 = cast(%var_4220, dtype="int32") /* ty=Tensor[(12, 2, 8), int32] */;
    %632 = shape_of(%var_4219, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%var_4219, dtype="int32") /* ty=Tensor[(12, 2, 8), int32] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %635 = cast(%var_4227, dtype="float32") /* ty=Tensor[(144), float32] */;
    %636 = cast(%var_4228, dtype="float64") /* ty=Tensor[(1, 520), float64] */;
    %637 = reshape(%635, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), float32] */;
    %638 = reshape(%636, newshape=[520]) /* ty=Tensor[(520), float64] */;
    %639 = @func_3616(%637, %638) /* ty=(Tensor[(2, 12, 6), float32], Tensor[(468), bool], Tensor[(520), float64], Tensor[(468), bool]) */;
    %640 = logical_xor(%633, %634) /* ty=Tensor[(12, 2, 8), int32] */;
    %641 = %639.0;
    (%640, %641, %var_4227, %var_4228)
  };
  %642(%var_4233, %var_4234, %var_4235, %var_4236) /* ty=(Tensor[(12, 2, 8), int32], Tensor[(2, 12, 6), float32], Tensor[(144), float32], Tensor[(1, 520), float64]) */
}

def @func_4585() -> (Tensor[(3, 13, 12), bool],) {
  %645 = fn () -> (Tensor[(3, 13, 12), bool],) {
    %643 = @func_2585() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %644 = %643.1;
    (%644,)
  };
  %645() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_12519() -> (Tensor[(3, 13, 12), float32],) {
  %648 = fn () -> (Tensor[(3, 13, 12), float32],) {
    %646 = @func_7823() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), int8]) */;
    %647 = %646.0;
    (%647,)
  };
  %648() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_8396(%var_8395: Tensor[(16, 16, 1), float64]) -> (Tensor[(16, 16, 1), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %655 = fn (%var_8369: Tensor[(16, 16, 1), float64]) -> (Tensor[(16, 16, 1), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
    %649 = cast(%var_8369, dtype="float64") /* ty=Tensor[(16, 16, 1), float64] */;
    %650 = @func_4274() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) */;
    %651 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %652 = sqrt(%649) /* ty=Tensor[(16, 16, 1), float64] */;
    %653 = %650.2;
    %654 = %651.0;
    (%652, %653, %654)
  };
  %655(%var_8395) /* ty=(Tensor[(16, 16, 1), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_1948() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) {
  %656 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %657 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
  %658 = cast(meta[relay.Constant][23] /* ty=Tensor[(1210), float64] */, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %659 = reshape(%658, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), float64] */;
  %660 = cast(meta[relay.Constant][24] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %661 = reshape(%660, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %662 = @func_1664(%661) /* ty=(Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */;
  %663 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %664 = %656.0;
  %665 = %657.0;
  %666 = @func_860(%659) /* ty=Tensor[(11, 10, 11), float64] */;
  %667 = %662.2;
  %668 = %663.1;
  (%664, %665, %666, meta[relay.Constant][23] /* ty=Tensor[(1210), float64] */, %667, meta[relay.Constant][24] /* ty=Tensor[(960), float32] */, %668)
}

def @func_1724() -> Tensor[(3, 13, 12), float32] {
  %669 = fn () -> Tensor[(3, 13, 12), float32] {
    @func_441() /* ty=Tensor[(3, 13, 12), float32] */
  };
  %669() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_3687() -> (Tensor[(3, 13, 12), bool], Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %670 = @func_962() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) */;
  %671 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %672 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  %673 = %670.2;
  %674 = %671.2;
  %675 = @func_2637() /* ty=Tensor[(3, 13, 12), bool] */;
  (%672, %673, %674, %675)
}

def @func_12731() -> (Tensor[(11, 2, 15), float64],) {
  %676 = @func_6861() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(11, 2, 15), float64], Tensor[(3, 13, 12), float32]) */;
  %677 = %676.1;
  (%677,)
}

def @func_12396() -> (Tensor[(1210), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %678 = @func_8954() /* ty=Tensor[(1210), bool] */;
  %679 = cast(%678, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %680 = sinh(%679) /* ty=Tensor[(1210), float64] */;
  %681 = @func_7047() /* ty=Tensor[(3, 13, 12), float32] */;
  %682 = @func_5067() /* ty=Tensor[(3, 13, 12), float32] */;
  (%680, %681, %682)
}

def @func_13018() -> (Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %689 = fn () -> (Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
    %683 = @func_1948() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */;
    %684 = @func_4398() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %685 = @func_11592() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %686 = %683.3;
    %687 = %684.0;
    %688 = %685.0;
    (%686, %687, %688)
  };
  %689() /* ty=(Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_5216() -> (Tensor[(3, 13, 12), float32],) {
  @func_5214() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_13165() -> Tensor[(11, 4, 8), float32] {
  %691 = fn () -> Tensor[(11, 4, 8), float32] {
    %690 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 4, 8), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 8), float32] */;
    acosh(%690) /* ty=Tensor[(11, 4, 8), float32] */
  };
  %691() /* ty=Tensor[(11, 4, 8), float32] */
}

def @func_2540() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %695 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
    %692 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
    %693 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
    %694 = %692.0;
    (%693, %694)
  };
  %695() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_6871() -> Tensor[(3, 13, 12), float32] {
  %697 = fn () -> Tensor[(3, 13, 12), float32] {
    %696 = @func_3188() /* ty=(Tensor[(3, 13, 12), float32],) */;
    %696.0
  };
  %697() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_6692() -> Tensor[(3, 13, 12), float64] {
  @func_6690() /* ty=Tensor[(3, 13, 12), float64] */
}

def @func_11897(%var_11880: Tensor[(7, 11, 14), float64]) -> (Tensor[(7, 11, 14), float64], Tensor[(3, 13, 12), float64], Tensor[(1210), float64]) {
  %698 = cast(%var_11880, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
  %699 = @func_1948() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */;
  %700 = acos(%698) /* ty=Tensor[(7, 11, 14), float64] */;
  %701 = @func_6690() /* ty=Tensor[(3, 13, 12), float64] */;
  %702 = %699.3;
  (%700, %701, %702)
}

def @func_9238() -> Tensor[(13, 13, 16), float32] {
  %704 = fn () -> Tensor[(13, 13, 16), float32] {
    %703 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 13, 16), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 16), float32] */;
    rsqrt(%703) /* ty=Tensor[(13, 13, 16), float32] */
  };
  %704() /* ty=Tensor[(13, 13, 16), float32] */
}

def @func_3868(%var_3770: bool, %var_3832: Tensor[(2, 16, 2), uint16], %var_3837: Tensor[(784), float64], %var_3857: Tensor[(960), float32]) -> (Tensor[(2, 16, 2), bool], Tensor[(3, 13, 12), bool], bool, Tensor[(364), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(2, 16, 2), int32], Tensor[(14, 7, 8), float64], Tensor[(784), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(2, 16, 2), float32]) {
  %705 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 16, 2), uint16] */, dtype="bool") /* ty=Tensor[(2, 16, 2), bool] */;
  %706 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(2, 16, 2), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 16, 2), uint16] */, dtype="bool") /* ty=Tensor[(2, 16, 2), bool] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %709 = cast(%var_3770, dtype="bool") /* ty=bool */;
  %710 = cast(meta[relay.Constant][29] /* ty=Tensor[(364), bool] */, dtype="bool") /* ty=Tensor[(364), bool] */;
  %711 = reshape(%709, newshape=[]) /* ty=bool */;
  %712 = reshape(%710, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), bool] */;
  %713 = @func_3097(%711, %712) /* ty=(Tensor[(2, 14, 13), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %714 = cast(meta[relay.Constant][29] /* ty=Tensor[(364), bool] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %715 = @func_2660() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %716 = cast(%var_3832, dtype="int32") /* ty=Tensor[(2, 16, 2), int32] */;
  %717 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(2, 16, 2), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %718 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 16, 2), uint16] */, dtype="int32") /* ty=Tensor[(2, 16, 2), int32] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %720 = cast(%var_3837, dtype="float64") /* ty=Tensor[(784), float64] */;
  %721 = reshape(%720, newshape=[14, 7, 8]) /* ty=Tensor[(14, 7, 8), float64] */;
  %722 = @func_1836(%721) /* ty=(Tensor[(14, 7, 8), float64], Tensor[(3, 13, 12), float32]) */;
  %723 = @func_2052() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %724 = cast(%var_3857, dtype="float32") /* ty=Tensor[(960), float32] */;
  %725 = reshape(%724, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %726 = @func_2948(%725) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), bool], Tensor[(3, 13, 12), float32]) */;
  %727 = cast(%var_3832, dtype="float64") /* ty=Tensor[(2, 16, 2), float64] */;
  %728 = log2(%727) /* ty=Tensor[(2, 16, 2), float64] */;
  %729 = cast(%728, dtype="float32") /* ty=Tensor[(2, 16, 2), float32] */;
  %730 = equal(%707, %708) /* ty=Tensor[(2, 16, 2), bool] */;
  %731 = %713.1;
  %732 = cosh(%714) /* ty=Tensor[(364), float32] */;
  %733 = @func_3453() /* ty=Tensor[(3, 13, 12), bool] */;
  %734 = %715.0;
  %735 = right_shift(%718, %719) /* ty=Tensor[(2, 16, 2), int32] */;
  %736 = %722.0;
  %737 = %723.0;
  %738 = %726.4;
  %739 = log10(%729) /* ty=Tensor[(2, 16, 2), float32] */;
  (%730, %731, %var_3770, %732, %733, %734, %735, %736, %var_3837, %737, %738, %var_3857, %739)
}

def @func_1713() -> (Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) {
  %740 = cast(meta[relay.Constant][30] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %741 = reshape(%740, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %742 = @func_1664(%741) /* ty=(Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */;
  %743 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
  %744 = %742.5;
  (%743, %744, meta[relay.Constant][30] /* ty=Tensor[(960), float32] */)
}

def @func_7534() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(9, 3, 5), bool], Tensor[(135), int32]) {
  %745 = @func_5993() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %746 = @func_2028() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %747 = cast(meta[relay.Constant][31] /* ty=Tensor[(135), int32] */, dtype="int32") /* ty=Tensor[(135), int32] */;
  %748 = reshape(%747, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), int32] */;
  %749 = @func_4214(%748) /* ty=(Tensor[(9, 3, 5), bool],) */;
  %750 = %745.0;
  %751 = %746.0;
  %752 = %749.0;
  (%750, %751, %752, meta[relay.Constant][31] /* ty=Tensor[(135), int32] */)
}

def @func_3274() -> Tensor[(3, 13, 12), int8] {
  %754 = fn () -> Tensor[(3, 13, 12), int8] {
    %753 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
    %753.3
  };
  %754() /* ty=Tensor[(3, 13, 12), int8] */
}

def @func_4117() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) {
  %755 = @func_3919() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %756 = %755.1;
  %757 = cast(%756, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
  %758 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %759 = @func_1969() /* ty=Tensor[(3, 13, 12), float32] */;
  %760 = cos(%757) /* ty=Tensor[(3, 13, 12), float32] */;
  %761 = %758.0;
  (%759, %760, %761)
}

def @func_4140() -> (Tensor[(3, 13, 12), bool],) {
  @func_4138() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_11831() -> Tensor[(3, 13, 12), float32] {
  @func_11829() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_5415() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64]) {
  %766 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64]) {
    %762 = @func_4753() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
    %763 = @func_441() /* ty=Tensor[(3, 13, 12), float32] */;
    %764 = %762.0;
    %765 = @func_4454() /* ty=Tensor[(3, 13, 12), float64] */;
    (%763, %764, %765)
  };
  %766() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64]) */
}

def @func_12924() -> (Tensor[(3, 13, 12), float32],) {
  %767 = @func_4274() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) */;
  %768 = %767.1;
  (%768,)
}

def @func_12056(%var_12054: bool) -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool], bool, Tensor[(3, 13, 12), float32]) {
  @func_12053(%var_12054) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool], bool, Tensor[(3, 13, 12), float32]) */
}

def @func_1664(%var_1635: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) {
  %769 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %770 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %771 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %772 = cast(%var_1635, dtype="float32") /* ty=Tensor[(960), float32] */;
  %773 = reshape(%772, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %774 = @func_1235(%773) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(6, 16, 10), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool]) */;
  %775 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %776 = %769.3;
  %777 = %770.0;
  %778 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  %779 = %771.2;
  %780 = %774.2;
  %781 = %775.1;
  (%776, %777, %778, %779, %780, %var_1635, %781)
}

def @func_5740() -> (Tensor[(3, 13, 12), bool],) {
  %782 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
  %783 = %782.2;
  (%783,)
}

def @func_395() -> (Tensor[(3, 13, 12), bool],) {
  %784 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 13, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 13, 1), float32] */;
  %785 = rsqrt(%784) /* ty=Tensor[(3, 13, 1), float32] */;
  %786 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 13, 1), float32] */, dtype="bool") /* ty=Tensor[(3, 13, 1), bool] */;
  %787 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 13, 12), float32] */, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %788 = greater(%786, %787) /* ty=Tensor[(3, 13, 12), bool] */;
  %789 = cast(%785, dtype="bool") /* ty=Tensor[(3, 13, 1), bool] */;
  %790 = cast(%788, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
  %791 = greater_equal(%789, %790) /* ty=Tensor[(3, 13, 12), bool] */;
  (%791,)
}

def @func_4399() -> (Tensor[(3, 13, 12), bool],) {
  %794 = fn () -> (Tensor[(3, 13, 12), bool],) {
    %792 = @func_3015() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
    %793 = %792.0;
    (%793,)
  };
  %794() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_11578() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %795 = @func_4604() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %796 = @func_6749() /* ty=Tensor[(3, 13, 12), float32] */;
  %797 = %795.0;
  %798 = @func_6627() /* ty=Tensor[(3, 13, 12), float32] */;
  (%796, %797, %798)
}

def @func_4161() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %803 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
    %799 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
    %800 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %801 = %799.0;
    %802 = %800.1;
    (%801, %802)
  };
  %803() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_9714(%var_9712: Tensor[(9, 10, 3), float64]) -> (Tensor[(9, 10, 3), float64],) {
  @func_9711(%var_9712) /* ty=(Tensor[(9, 10, 3), float64],) */
}

def @func_1183(%var_1181: Tensor[(6, 16, 10), float32]) -> (Tensor[(6, 16, 10), float32], Tensor[(3, 13, 12), bool]) {
  @func_1180(%var_1181) /* ty=(Tensor[(6, 16, 10), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_7901(%var_7895: Tensor[(7, 9, 3), int8], %var_7896: Tensor[(7, 9, 3), int8]) -> Tensor[(7, 9, 3), int8] {
  %804 = cast(%var_7896, dtype="int8") /* ty=Tensor[(7, 9, 3), int8] */;
  %805 = shape_of(%var_7895, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%var_7895, dtype="int8") /* ty=Tensor[(7, 9, 3), int8] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%806, %807) /* ty=Tensor[(7, 9, 3), int8] */
}

def @func_5910() -> (Tensor[(960), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) {
  @func_5908() /* ty=(Tensor[(960), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) */
}

def @func_962() -> (Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) {
  %808 = cast(meta[relay.Constant][34] /* ty=Tensor[(1210), float64] */, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %809 = reshape(%808, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), float64] */;
  %810 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  %811 = @func_860(%809) /* ty=Tensor[(11, 10, 11), float64] */;
  (%810, %811, meta[relay.Constant][34] /* ty=Tensor[(1210), float64] */)
}

def @func_7015() -> (Tensor[(3, 13, 12), bool],) {
  @func_7013() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_6060(%var_6058: Tensor[(3, 1, 16), int16], %var_6059: Tensor[(3, 12, 16), int16]) -> (Tensor[(3, 12, 16), int16], Tensor[(3, 13, 12), bool]) {
  %817 = fn (%var_6047: Tensor[(3, 1, 16), int16], %var_6048: Tensor[(3, 12, 16), int16]) -> (Tensor[(3, 12, 16), int16], Tensor[(3, 13, 12), bool]) {
    %812 = cast(%var_6047, dtype="int16") /* ty=Tensor[(3, 1, 16), int16] */;
    %813 = cast(%var_6048, dtype="int16") /* ty=Tensor[(3, 12, 16), int16] */;
    %814 = @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %815 = right_shift(%812, %813) /* ty=Tensor[(3, 12, 16), int16] */;
    %816 = %814.4;
    (%815, %816)
  };
  %817(%var_6058, %var_6059) /* ty=(Tensor[(3, 12, 16), int16], Tensor[(3, 13, 12), bool]) */
}

def @func_397() -> (Tensor[(3, 13, 12), bool],) {
  @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_5627() -> (Tensor[(11, 2, 15), float64], Tensor[(13, 8, 5), int8], Tensor[(1, 468), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(10, 52), int16]) {
  %846 = fn () -> (Tensor[(11, 2, 15), float64], Tensor[(13, 8, 5), int8], Tensor[(1, 468), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(10, 52), int16]) {
    %818 = @func_2708() /* ty=(Tensor[(11, 2, 15), float64], Tensor[(11, 2, 15), float64]) */;
    %819 = %818.1;
    %820 = cast(%819, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
    %821 = sqrt(%820) /* ty=Tensor[(11, 2, 15), float64] */;
    %822 = cast(%821, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
    %823 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
    %824 = cast(%819, dtype="float64") /* ty=Tensor[(11, 2, 15), float64] */;
    %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %826 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 52), float64] */, dtype="float64") /* ty=Tensor[(10, 52), float64] */;
    %827 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 468), bool] */, dtype="bool") /* ty=Tensor[(1, 468), bool] */;
    %828 = reshape(%826, newshape=[13, 8, 5]) /* ty=Tensor[(13, 8, 5), float64] */;
    %829 = reshape(%827, newshape=[468]) /* ty=Tensor[(468), bool] */;
    %830 = @func_3500(%828, %829) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(468), bool], Tensor[(13, 8, 5), int8], Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32]) */;
    %831 = @func_4160() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %832 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 52), float64] */, dtype="float64") /* ty=Tensor[(10, 52), float64] */;
    %833 = sigmoid(%832) /* ty=Tensor[(10, 52), float64] */;
    %834 = cast(%833, dtype="float64") /* ty=Tensor[(10, 52), float64] */;
    %835 = exp(%834) /* ty=Tensor[(10, 52), float64] */;
    %836 = cast(%833, dtype="int16") /* ty=Tensor[(10, 52), int16] */;
    %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(2), int32] */;
    %838 = cast(%835, dtype="int16") /* ty=Tensor[(10, 52), int16] */;
    %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %840 = mod(%824, %825) /* ty=Tensor[(11, 2, 15), float64] */;
    %841 = %830.2;
    %842 = @func_2970() /* ty=Tensor[(3, 13, 12), bool] */;
    %843 = %831.1;
    %844 = @func_441() /* ty=Tensor[(3, 13, 12), float32] */;
    %845 = bitwise_or(%838, %839) /* ty=Tensor[(10, 52), int16] */;
    (%840, %841, meta[relay.Constant][36] /* ty=Tensor[(1, 468), bool] */, %842, %843, %844, %845)
  };
  %846() /* ty=(Tensor[(11, 2, 15), float64], Tensor[(13, 8, 5), int8], Tensor[(1, 468), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(10, 52), int16]) */
}

def @func_3521() -> Tensor[(3, 13, 12), float32] {
  %847 = @func_1255() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %847.0
}

def @func_4814() -> (Tensor[(3, 13, 12), bool],) {
  %848 = @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %849 = %848.3;
  (%849,)
}

def @func_5669() -> (Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool]) {
  %853 = fn () -> (Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool]) {
    %850 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %851 = @func_3273() /* ty=Tensor[(3, 13, 12), int8] */;
    %852 = %850.2;
    (%851, %852)
  };
  %853() /* ty=(Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool]) */
}

def @func_6197() -> Tensor[(3, 13, 12), bool] {
  %854 = @func_4693() /* ty=(Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %854.2
}

def @func_5742() -> (Tensor[(3, 13, 12), bool],) {
  @func_5740() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_9332(%var_9330: Tensor[(18), float32], %var_9331: Tensor[(1, 520), float64]) -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8], Tensor[(520), float64], Tensor[(18), float32], Tensor[(1, 520), float64], Tensor[(3, 13, 12), bool]) {
  %869 = fn (%var_9312: Tensor[(18), float32], %var_9313: Tensor[(1, 520), float64]) -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8], Tensor[(520), float64], Tensor[(18), float32], Tensor[(1, 520), float64], Tensor[(3, 13, 12), bool]) {
    %855 = @func_9007() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8]) */;
    %856 = @func_9007() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8]) */;
    %857 = cast(%var_9312, dtype="float32") /* ty=Tensor[(18), float32] */;
    %858 = cast(%var_9313, dtype="float64") /* ty=Tensor[(1, 520), float64] */;
    %859 = cast(%var_9312, dtype="float64") /* ty=Tensor[(18), float64] */;
    %860 = reshape(%857, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float32] */;
    %861 = reshape(%858, newshape=[520]) /* ty=Tensor[(520), float64] */;
    %862 = reshape(%859, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
    %863 = @func_5823(%860, %861, %862) /* ty=(Tensor[(520), float64], Tensor[(144), float32], Tensor[(520), float64], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool], Tensor[(3, 3, 2), float32], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool], Tensor[(3, 3, 2), int32], Tensor[(3, 13, 12), float64], Tensor[(3, 3, 2), float64]) */;
    %864 = @func_2028() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %865 = %855.0;
    %866 = %856.1;
    %867 = %863.2;
    %868 = %864.1;
    (%865, %866, %867, %var_9312, %var_9313, %868)
  };
  %869(%var_9330, %var_9331) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8], Tensor[(520), float64], Tensor[(18), float32], Tensor[(1, 520), float64], Tensor[(3, 13, 12), bool]) */
}

def @func_4605() -> (Tensor[(3, 13, 12), float32],) {
  %874 = fn () -> (Tensor[(3, 13, 12), float32],) {
    %870 = @func_2360() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %871 = %870.1;
    %872 = cast(%871, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
    %873 = atanh(%872) /* ty=Tensor[(3, 13, 12), float32] */;
    (%873,)
  };
  %874() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_5866() -> (Tensor[(1210), float64], Tensor[(1210), float32]) {
  %888 = fn () -> (Tensor[(1210), float64], Tensor[(1210), float32]) {
    %875 = @func_4274() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) */;
    %876 = %875.3;
    %877 = cast(%876, dtype="float64") /* ty=Tensor[(1210), float64] */;
    %878 = cast(%876, dtype="float64") /* ty=Tensor[(1210), float64] */;
    %879 = log2(%878) /* ty=Tensor[(1210), float64] */;
    %880 = cast(%876, dtype="float32") /* ty=Tensor[(1210), float32] */;
    %881 = acos(%880) /* ty=Tensor[(1210), float32] */;
    %882 = cast(%881, dtype="float32") /* ty=Tensor[(1210), float32] */;
    %883 = shape_of(%879, dtype="int32") /* ty=Tensor[(1), int32] */;
    %884 = cast(%879, dtype="float32") /* ty=Tensor[(1210), float32] */;
    %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?), float32] */;
    %886 = sqrt(%877) /* ty=Tensor[(1210), float64] */;
    %887 = mod(%884, %885) /* ty=Tensor[(1210), float32] */;
    (%886, %887)
  };
  %888() /* ty=(Tensor[(1210), float64], Tensor[(1210), float32]) */
}

def @func_4989(%var_4988: Tensor[(1210), float64]) -> (Tensor[(1210), uint32],) {
  %896 = fn (%var_4967: Tensor[(1210), float64]) -> (Tensor[(1210), uint32],) {
    %889 = @func_962() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) */;
    %890 = %889.2;
    %891 = cast(%var_4967, dtype="uint32") /* ty=Tensor[(1210), uint32] */;
    %892 = shape_of(%890, dtype="int32") /* ty=Tensor[(1), int32] */;
    %893 = cast(%890, dtype="uint32") /* ty=Tensor[(1210), uint32] */;
    %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %895 = maximum(%893, %894) /* ty=Tensor[(1210), uint32] */;
    (%895,)
  };
  %896(%var_4988) /* ty=(Tensor[(1210), uint32],) */
}

def @func_12985() -> (Tensor[(3, 13, 12), bool],) {
  %897 = @func_11515() /* ty=Tensor[(3, 13, 12), bool] */;
  (%897,)
}

def @func_9582() -> Tensor[(3, 13, 12), float32] {
  %898 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %898.1
}

def @func_6289() -> (Tensor[(3, 13, 12), float32],) {
  @func_6287() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_12141() -> Tensor[(1210), bool] {
  @func_12139() /* ty=Tensor[(1210), bool] */
}

def @func_12279() -> Tensor[(3, 13, 12), bool] {
  %899 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %899.0
}

def @func_2408() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) {
  %906 = fn () -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) {
    %900 = @func_925() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
    %901 = %900.1;
    %902 = cast(%901, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
    %903 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
    %904 = erf(%902) /* ty=Tensor[(3, 13, 12), float64] */;
    %905 = %903.0;
    (%904, %905)
  };
  %906() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) */
}

def @func_1088() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %910 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
    %907 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
    %908 = @func_441() /* ty=Tensor[(3, 13, 12), float32] */;
    %909 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
    (%907, %908, %909)
  };
  %910() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_2308() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) {
  %916 = fn () -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) {
    %911 = @func_1723() /* ty=Tensor[(3, 13, 12), float32] */;
    %912 = cast(%911, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
    %913 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
    %914 = cosh(%912) /* ty=Tensor[(3, 13, 12), float64] */;
    %915 = %913.1;
    (%914, %915)
  };
  %916() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */
}

def @func_12733() -> (Tensor[(11, 2, 15), float64],) {
  @func_12731() /* ty=(Tensor[(11, 2, 15), float64],) */
}

def @func_9508() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) {
  %925 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) {
    %917 = @func_4584() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %918 = @func_2360() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %919 = @func_4370() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
    %920 = @func_4117() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) */;
    %921 = %917.0;
    %922 = %918.0;
    %923 = %919.2;
    %924 = %920.2;
    (%921, %922, %923, %924)
  };
  %925() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) */
}

def @func_2360() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %926 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %927 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %928 = %926.0;
  %929 = %927.2;
  (%928, %929)
}

def @func_8512() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %933 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
    %930 = @func_1087() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %931 = @func_5067() /* ty=Tensor[(3, 13, 12), float32] */;
    %932 = %930.0;
    (%931, %932)
  };
  %933() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_9695() -> (Tensor[(18), float64], Tensor[(3, 13, 12), float64]) {
  @func_9693() /* ty=(Tensor[(18), float64], Tensor[(3, 13, 12), float64]) */
}

def @func_5995() -> (Tensor[(3, 13, 12), float32],) {
  @func_5993() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_5716() -> (Tensor[(3, 13, 12), bool],) {
  %935 = fn () -> (Tensor[(3, 13, 12), bool],) {
    %934 = @func_3453() /* ty=Tensor[(3, 13, 12), bool] */;
    (%934,)
  };
  %935() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_10461() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  %945 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
    %936 = @func_4031() /* ty=(Tensor[(3, 13, 12), float64],) */;
    %937 = @func_7600() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64]) */;
    %938 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
    %939 = @func_4584() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %940 = @func_1969() /* ty=Tensor[(3, 13, 12), float32] */;
    %941 = %936.0;
    %942 = %937.1;
    %943 = %938.0;
    %944 = %939.0;
    (%940, %941, %942, %943, %944)
  };
  %945() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_6690() -> Tensor[(3, 13, 12), float64] {
  %946 = @func_4370() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %946.0
}

def @func_4455() -> Tensor[(3, 13, 12), float64] {
  %948 = fn () -> Tensor[(3, 13, 12), float64] {
    %947 = @func_1120() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
    %947.0
  };
  %948() /* ty=Tensor[(3, 13, 12), float64] */
}

def @func_10680(%var_10679: Tensor[(5, 7, 2), float32]) -> (Tensor[(3, 13, 12), float64], Tensor[(520), float64], Tensor[(3, 13, 12), int8], Tensor[(5, 7, 2), int64], Tensor[(5, 7, 2), uint32]) {
  %973 = fn (%var_10646: Tensor[(5, 7, 2), float32]) -> (Tensor[(3, 13, 12), float64], Tensor[(520), float64], Tensor[(3, 13, 12), int8], Tensor[(5, 7, 2), int64], Tensor[(5, 7, 2), uint32]) {
    %949 = @func_7390() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
    %950 = @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */;
    %951 = @func_9397() /* ty=(Tensor[(5, 7, 2), float32],) */;
    %952 = %951.0;
    %953 = cast(%952, dtype="float64") /* ty=Tensor[(5, 7, 2), float64] */;
    %954 = sigmoid(%953) /* ty=Tensor[(5, 7, 2), float64] */;
    %955 = cast(%var_10646, dtype="uint16") /* ty=Tensor[(5, 7, 2), uint16] */;
    %956 = shape_of(%952, dtype="int32") /* ty=Tensor[(3), int32] */;
    %957 = cast(%952, dtype="uint16") /* ty=Tensor[(5, 7, 2), uint16] */;
    %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %959 = bitwise_and(%957, %958) /* ty=Tensor[(5, 7, 2), uint16] */;
    %960 = cast(%959, dtype="int64") /* ty=Tensor[(5, 7, 2), int64] */;
    %961 = shape_of(%954, dtype="int32") /* ty=Tensor[(3), int32] */;
    %962 = cast(%954, dtype="int64") /* ty=Tensor[(5, 7, 2), int64] */;
    %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %964 = cast(%var_10646, dtype="uint32") /* ty=Tensor[(5, 7, 2), uint32] */;
    %965 = shape_of(%954, dtype="int32") /* ty=Tensor[(3), int32] */;
    %966 = cast(%954, dtype="uint32") /* ty=Tensor[(5, 7, 2), uint32] */;
    %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %968 = @func_1436() /* ty=Tensor[(3, 13, 12), float64] */;
    %969 = %949.3;
    %970 = %950.3;
    %971 = minimum(%962, %963) /* ty=Tensor[(5, 7, 2), int64] */;
    %972 = logical_xor(%966, %967) /* ty=Tensor[(5, 7, 2), uint32] */;
    (%968, %969, %970, %971, %972)
  };
  %973(%var_10679) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(520), float64], Tensor[(3, 13, 12), int8], Tensor[(5, 7, 2), int64], Tensor[(5, 7, 2), uint32]) */
}

def @func_442() -> Tensor[(3, 13, 12), float32] {
  %977 = fn () -> Tensor[(3, 13, 12), float32] {
    %974 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %975 = %974.0;
    %976 = cast(%975, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
    sqrt(%976) /* ty=Tensor[(3, 13, 12), float32] */
  };
  %977() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_6749() -> Tensor[(3, 13, 12), float32] {
  @func_1723() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_469() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %978 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %979 = @func_441() /* ty=Tensor[(3, 13, 12), float32] */;
  %980 = cast(%979, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
  %981 = %978.0;
  %982 = asin(%980) /* ty=Tensor[(3, 13, 12), float32] */;
  (%981, %982)
}

def @func_3377() -> (Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float32]) {
  %986 = fn () -> (Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float32]) {
    %983 = @func_3255() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %984 = @func_3273() /* ty=Tensor[(3, 13, 12), int8] */;
    %985 = %983.0;
    (%984, %985)
  };
  %986() /* ty=(Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float32]) */
}

def @func_9218(%var_9216: Tensor[(18), float32]) -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 3, 2), float64], Tensor[(18), float32], Tensor[(1, 520), float64]) {
  @func_9215(%var_9216) /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 3, 2), float64], Tensor[(18), float32], Tensor[(1, 520), float64]) */
}

def @func_4557(%var_4554: Tensor[(4, 12, 5), float32]) -> Tensor[(4, 12, 5), float32] {
  %987 = cast(%var_4554, dtype="float32") /* ty=Tensor[(4, 12, 5), float32] */;
  asin(%987) /* ty=Tensor[(4, 12, 5), float32] */
}

def @func_7602() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64]) {
  @func_7600() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64]) */
}

def @func_10320() -> (Tensor[(3, 13, 12), float32],) {
  @func_10318() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_8345(%var_8344: Tensor[(2, 10, 1), float64]) -> (Tensor[(2, 10, 1), float32], Tensor[(3, 13, 12), float64]) {
  %994 = fn (%var_8312: Tensor[(2, 10, 1), float64]) -> (Tensor[(2, 10, 1), float32], Tensor[(3, 13, 12), float64]) {
    %988 = cast(%var_8312, dtype="float64") /* ty=Tensor[(2, 10, 1), float64] */;
    %989 = sinh(%988) /* ty=Tensor[(2, 10, 1), float64] */;
    %990 = cast(%989, dtype="float32") /* ty=Tensor[(2, 10, 1), float32] */;
    %991 = @func_2870() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(11, 10, 11), float64]) */;
    %992 = cos(%990) /* ty=Tensor[(2, 10, 1), float32] */;
    %993 = %991.0;
    (%992, %993)
  };
  %994(%var_8344) /* ty=(Tensor[(2, 10, 1), float32], Tensor[(3, 13, 12), float64]) */
}

def @func_8674() -> (Tensor[(3, 13, 12), bool],) {
  %997 = fn () -> (Tensor[(3, 13, 12), bool],) {
    %995 = @func_5740() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %996 = %995.0;
    (%996,)
  };
  %997() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_12446(%var_12444: float64, %var_12445: Tensor[(1, 13, 12), float64]) -> (Tensor[(?, 13, 12), bool],) {
  %1006 = fn (%var_12431: float64, %var_12432: Tensor[(1, 13, 12), float64]) -> (Tensor[(?, 13, 12), bool],) {
    %998 = cast(%var_12431, dtype="float64") /* ty=float64 */;
    %999 = cast(%var_12432, dtype="float64") /* ty=Tensor[(1, 13, 12), float64] */;
    %1000 = power(%998, %999) /* ty=Tensor[(1, 13, 12), float64] */;
    %1001 = cast(%var_12432, dtype="bool") /* ty=Tensor[(1, 13, 12), bool] */;
    %1002 = shape_of(%1000, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1003 = cast(%1000, dtype="bool") /* ty=Tensor[(1, 13, 12), bool] */;
    %1004 = dyn.reshape(%1001, %1002, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1005 = equal(%1003, %1004) /* ty=Tensor[(?, 13, 12), bool] */;
    (%1005,)
  };
  %1006(%var_12444, %var_12445) /* ty=(Tensor[(?, 13, 12), bool],) */
}

def @func_471() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */
}

def @func_10879() -> (Tensor[(3, 13, 12), float32], Tensor[(9, 3, 5), bool], Tensor[(135), int32]) {
  %1007 = cast(meta[relay.Constant][37] /* ty=Tensor[(135), int32] */, dtype="int32") /* ty=Tensor[(135), int32] */;
  %1008 = reshape(%1007, newshape=[9, 3, 5]) /* ty=Tensor[(9, 3, 5), int32] */;
  %1009 = @func_4214(%1008) /* ty=(Tensor[(9, 3, 5), bool],) */;
  %1010 = @func_9582() /* ty=Tensor[(3, 13, 12), float32] */;
  %1011 = %1009.0;
  (%1010, %1011, meta[relay.Constant][37] /* ty=Tensor[(135), int32] */)
}

def @func_11821() -> (Tensor[(18), float32], Tensor[(3, 13, 12), float64]) {
  %1016 = fn () -> (Tensor[(18), float32], Tensor[(3, 13, 12), float64]) {
    %1012 = @func_7390() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
    %1013 = @func_4031() /* ty=(Tensor[(3, 13, 12), float64],) */;
    %1014 = %1012.2;
    %1015 = %1013.0;
    (%1014, %1015)
  };
  %1016() /* ty=(Tensor[(18), float32], Tensor[(3, 13, 12), float64]) */
}

def @func_12568() -> (Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  @func_12566() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_11291(%var_11289: Tensor[(6, 14, 15), uint16], %var_11290: Tensor[(600), float64]) -> (Tensor[(6, 14, 15), uint16], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8], Tensor[(600), float64]) {
  @func_11287(%var_11289, %var_11290) /* ty=(Tensor[(6, 14, 15), uint16], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8], Tensor[(600), float64]) */
}

def @func_7421() -> (Tensor[(3, 13, 12), float32],) {
  %1017 = @func_6749() /* ty=Tensor[(3, 13, 12), float32] */;
  (%1017,)
}

def @func_4370() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %1018 = @func_2407() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) */;
  %1019 = @func_2360() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
  %1020 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %1021 = %1018.0;
  %1022 = %1019.0;
  %1023 = %1020.1;
  (%1021, %1022, %1023)
}

def @func_5378() -> (Tensor[(3, 13, 12), float32],) {
  %1025 = fn () -> (Tensor[(3, 13, 12), float32],) {
    %1024 = @func_5067() /* ty=Tensor[(3, 13, 12), float32] */;
    (%1024,)
  };
  %1025() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_8148() -> (Tensor[(3, 13, 12), bool], Tensor[(4, 12, 5), float32], Tensor[(240), float32], Tensor[(11, 10, 11), float64]) {
  %1033 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(4, 12, 5), float32], Tensor[(240), float32], Tensor[(11, 10, 11), float64]) {
    %1026 = @func_7472() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %1027 = cast(meta[relay.Constant][38] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %1028 = reshape(%1027, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), float32] */;
    %1029 = @func_2870() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(11, 10, 11), float64]) */;
    %1030 = %1026.1;
    %1031 = @func_4557(%1028) /* ty=Tensor[(4, 12, 5), float32] */;
    %1032 = %1029.3;
    (%1030, %1031, meta[relay.Constant][38] /* ty=Tensor[(240), float32] */, %1032)
  };
  %1033() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(4, 12, 5), float32], Tensor[(240), float32], Tensor[(11, 10, 11), float64]) */
}

def @func_1238(%var_1236: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), float32], Tensor[(6, 16, 10), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool]) {
  @func_1235(%var_1236) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(6, 16, 10), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_2029() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %1037 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
    %1034 = @func_575() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %1035 = @func_1018() /* ty=Tensor[(3, 13, 12), bool] */;
    %1036 = %1034.1;
    (%1035, %1036)
  };
  %1037() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_964() -> (Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) {
  @func_962() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) */
}

def @func_6304() -> Tensor[(3, 13, 12), bool] {
  @func_6302() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_4560(%var_4558: Tensor[(4, 12, 5), float32]) -> Tensor[(4, 12, 5), float32] {
  @func_4557(%var_4558) /* ty=Tensor[(4, 12, 5), float32] */
}

def @func_10526() -> (Tensor[(3, 13, 12), bool],) {
  %1040 = fn () -> (Tensor[(3, 13, 12), bool],) {
    %1038 = @func_2028() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %1039 = %1038.0;
    (%1039,)
  };
  %1040() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_11352() -> (Tensor[(3, 13, 12), bool], Tensor[(9, 3, 5), bool], Tensor[(18), float32]) {
  %1041 = @func_4398() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %1042 = @func_7534() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(9, 3, 5), bool], Tensor[(135), int32]) */;
  %1043 = @func_7390() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
  %1044 = %1041.0;
  %1045 = %1042.2;
  %1046 = %1043.2;
  (%1044, %1045, %1046)
}

def @func_9711(%var_9703: Tensor[(9, 10, 3), float64]) -> (Tensor[(9, 10, 3), float64],) {
  %1047 = cast(%var_9703, dtype="float64") /* ty=Tensor[(9, 10, 3), float64] */;
  %1048 = sigmoid(%1047) /* ty=Tensor[(9, 10, 3), float64] */;
  (%1048,)
}

def @func_10347(%var_10345: uint32) -> (Tensor[(7, 10, 14), bool], Tensor[(3, 13, 12), float64]) {
  @func_10344(%var_10345) /* ty=(Tensor[(7, 10, 14), bool], Tensor[(3, 13, 12), float64]) */
}

def @func_8955() -> Tensor[(1210), bool] {
  %1049 = fn () -> Tensor[(1210), bool] {
    @func_6149() /* ty=Tensor[(1210), bool] */
  };
  %1049() /* ty=Tensor[(1210), bool] */
}

def @func_11354() -> (Tensor[(3, 13, 12), bool], Tensor[(9, 3, 5), bool], Tensor[(18), float32]) {
  @func_11352() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(9, 3, 5), bool], Tensor[(18), float32]) */
}

def @func_11415() -> (Tensor[(3, 13, 12), bool],) {
  %1052 = fn () -> (Tensor[(3, 13, 12), bool],) {
    %1050 = @func_8662() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %1051 = %1050.1;
    (%1051,)
  };
  %1052() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_9625() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %1057 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
    %1053 = @func_6804() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %1054 = @func_6160() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %1055 = %1053.0;
    %1056 = %1054.0;
    (%1055, %1056)
  };
  %1057() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_10767(%var_10752: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %1058 = @func_4138() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %1059 = cast(%var_10752, dtype="float32") /* ty=Tensor[(960), float32] */;
  %1060 = reshape(%1059, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %1061 = @func_2948(%1060) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), bool], Tensor[(3, 13, 12), float32]) */;
  %1062 = @func_7209() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %1063 = @func_10487() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(14, 6, 13), int16], int16, Tensor[(1092), int16]) */;
  %1064 = @func_6302() /* ty=Tensor[(3, 13, 12), bool] */;
  %1065 = @func_1723() /* ty=Tensor[(3, 13, 12), float32] */;
  %1066 = %1058.0;
  %1067 = %1061.3;
  %1068 = %1062.0;
  %1069 = %1063.0;
  (%1064, %1065, %1066, %1067, %var_10752, %1068, %1069)
}

def @func_12053(%var_11995: bool) -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool], bool, Tensor[(3, 13, 12), float32]) {
  %1070 = @func_2407() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) */;
  %1071 = cast(%var_11995, dtype="bool") /* ty=bool */;
  %1072 = reshape(%1071, newshape=[]) /* ty=bool */;
  %1073 = @func_7176(%1072) /* ty=(Tensor[(10, 52), int16], Tensor[(3, 13, 12), bool], Tensor[(1210), float32], Tensor[(3, 13, 12), int8], Tensor[(364), bool], bool, Tensor[(7, 52), float64]) */;
  %1074 = @func_3376() /* ty=(Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), float32]) */;
  %1075 = %1070.1;
  %1076 = @func_4454() /* ty=Tensor[(3, 13, 12), float64] */;
  %1077 = %1073.1;
  %1078 = %1074.1;
  (%1075, %1076, %1077, %var_11995, %1078)
}

def @func_9215(%var_9201: Tensor[(18), float32]) -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 3, 2), float64], Tensor[(18), float32], Tensor[(1, 520), float64]) {
  %1079 = @func_9007() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), int8]) */;
  %1080 = @func_4398() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %1081 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
  %1082 = cast(%var_9201, dtype="float32") /* ty=Tensor[(18), float32] */;
  %1083 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 520), float64] */, dtype="float64") /* ty=Tensor[(1, 520), float64] */;
  %1084 = cast(%var_9201, dtype="float64") /* ty=Tensor[(18), float64] */;
  %1085 = reshape(%1082, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float32] */;
  %1086 = reshape(%1083, newshape=[520]) /* ty=Tensor[(520), float64] */;
  %1087 = reshape(%1084, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
  %1088 = @func_5823(%1085, %1086, %1087) /* ty=(Tensor[(520), float64], Tensor[(144), float32], Tensor[(520), float64], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool], Tensor[(3, 3, 2), float32], Tensor[(3, 13, 12), int8], Tensor[(3, 13, 12), bool], Tensor[(3, 3, 2), int32], Tensor[(3, 13, 12), float64], Tensor[(3, 3, 2), float64]) */;
  %1089 = @func_6643() /* ty=Tensor[(3, 13, 12), bool] */;
  %1090 = %1079.1;
  %1091 = %1080.0;
  %1092 = %1081.2;
  %1093 = %1088.11;
  (%1089, %1090, %1091, %1092, %1093, %var_9201, meta[relay.Constant][39] /* ty=Tensor[(1, 520), float64] */)
}

def @func_5699(%var_5697: Tensor[(10, 4, 15), float64], %var_5698: Tensor[(10, 4, 15), float64]) -> (Tensor[(10, 4, 15), float64], Tensor[(3, 13, 12), int8]) {
  @func_5695(%var_5697, %var_5698) /* ty=(Tensor[(10, 4, 15), float64], Tensor[(3, 13, 12), int8]) */
}

def @func_6264() -> (Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) {
  %1104 = fn () -> (Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) {
    %1094 = @func_2735() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %1095 = cast(meta[relay.Constant][40] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
    %1096 = %1094.0;
    %1097 = cast(%1096, dtype="bool") /* ty=Tensor[(3, 13, 12), bool] */;
    %1098 = reshape(%1095, newshape=[13, 8, 5]) /* ty=Tensor[(13, 8, 5), float64] */;
    %1099 = reshape(%1097, newshape=[468]) /* ty=Tensor[(468), bool] */;
    %1100 = @func_3500(%1098, %1099) /* ty=(Tensor[(3, 13, 12), float64], Tensor[(468), bool], Tensor[(13, 8, 5), int8], Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32]) */;
    %1101 = @func_3919() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %1102 = %1100.4;
    %1103 = %1101.0;
    (%1096, %1102, meta[relay.Constant][40] /* ty=Tensor[(520), float64] */, %1103)
  };
  %1104() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(13, 8, 5), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */
}

def @func_8663() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %1108 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
    %1105 = @func_2539() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %1106 = @func_3070() /* ty=Tensor[(3, 13, 12), bool] */;
    %1107 = %1105.1;
    (%1106, %1107)
  };
  %1108() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_1235(%var_1218: Tensor[(960), float32]) -> (Tensor[(3, 13, 12), float32], Tensor[(6, 16, 10), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool]) {
  %1109 = cast(%var_1218, dtype="float32") /* ty=Tensor[(960), float32] */;
  %1110 = reshape(%1109, newshape=[6, 16, 10]) /* ty=Tensor[(6, 16, 10), float32] */;
  %1111 = @func_1180(%1110) /* ty=(Tensor[(6, 16, 10), float32], Tensor[(3, 13, 12), bool]) */;
  %1112 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %1113 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  %1114 = %1111.0;
  %1115 = %1112.0;
  (%1113, %1114, %var_1218, %1115)
}

def @func_3072() -> Tensor[(3, 13, 12), bool] {
  @func_3070() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_6161() -> (Tensor[(3, 13, 12), bool],) {
  %1118 = fn () -> (Tensor[(3, 13, 12), bool],) {
    %1116 = @func_3919() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */;
    %1117 = %1116.1;
    (%1117,)
  };
  %1118() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_7178(%var_7177: bool) -> (Tensor[(10, 52), int16], Tensor[(3, 13, 12), bool], Tensor[(1210), float32], Tensor[(3, 13, 12), int8], Tensor[(364), bool], bool, Tensor[(7, 52), float64]) {
  %1133 = fn (%var_7168: bool) -> (Tensor[(10, 52), int16], Tensor[(3, 13, 12), bool], Tensor[(1210), float32], Tensor[(3, 13, 12), int8], Tensor[(364), bool], bool, Tensor[(7, 52), float64]) {
    %1119 = @func_5626() /* ty=(Tensor[(11, 2, 15), float64], Tensor[(13, 8, 5), int8], Tensor[(1, 468), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(10, 52), int16]) */;
    %1120 = @func_5865() /* ty=(Tensor[(1210), float64], Tensor[(1210), float32]) */;
    %1121 = cast(%var_7168, dtype="bool") /* ty=bool */;
    %1122 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 52), bool] */, dtype="bool") /* ty=Tensor[(7, 52), bool] */;
    %1123 = reshape(%1121, newshape=[]) /* ty=bool */;
    %1124 = reshape(%1122, newshape=[364]) /* ty=Tensor[(364), bool] */;
    %1125 = @func_4496(%1123, %1124) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], bool, Tensor[(364), bool]) */;
    %1126 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 52), bool] */, dtype="float64") /* ty=Tensor[(7, 52), float64] */;
    %1127 = %1119.6;
    %1128 = @func_3453() /* ty=Tensor[(3, 13, 12), bool] */;
    %1129 = %1120.1;
    %1130 = @func_3273() /* ty=Tensor[(3, 13, 12), int8] */;
    %1131 = %1125.6;
    %1132 = asinh(%1126) /* ty=Tensor[(7, 52), float64] */;
    (%1127, %1128, %1129, %1130, %1131, %var_7168, %1132)
  };
  %1133(%var_7177) /* ty=(Tensor[(10, 52), int16], Tensor[(3, 13, 12), bool], Tensor[(1210), float32], Tensor[(3, 13, 12), int8], Tensor[(364), bool], bool, Tensor[(7, 52), float64]) */
}

def @func_1436() -> Tensor[(3, 13, 12), float64] {
  %1134 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
  %1135 = cast(%1134, dtype="float64") /* ty=Tensor[(3, 13, 12), float64] */;
  acosh(%1135) /* ty=Tensor[(3, 13, 12), float64] */
}

def @func_13074() -> (Tensor[(3, 13, 12), float64], Tensor[(14, 6, 13), int16], Tensor[(3, 13, 12), float32]) {
  @func_13072() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(14, 6, 13), int16], Tensor[(3, 13, 12), float32]) */
}

def @func_9444() -> Tensor[(3, 13, 12), float32] {
  %1136 = fn () -> Tensor[(3, 13, 12), float32] {
    @func_1723() /* ty=Tensor[(3, 13, 12), float32] */
  };
  %1136() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_6302() -> Tensor[(3, 13, 12), bool] {
  @func_5930() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_6359() -> Tensor[(3, 13, 12), float32] {
  %1138 = fn () -> Tensor[(3, 13, 12), float32] {
    %1137 = @func_3188() /* ty=(Tensor[(3, 13, 12), float32],) */;
    %1137.0
  };
  %1138() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_4214(%var_4203: Tensor[(9, 3, 5), int32]) -> (Tensor[(9, 3, 5), bool],) {
  %1139 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 3, 5), int32] */, dtype="bool") /* ty=Tensor[(9, 3, 5), bool] */;
  %1140 = shape_of(%var_4203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1141 = cast(%var_4203, dtype="bool") /* ty=Tensor[(9, 3, 5), bool] */;
  %1142 = dyn.reshape(%1139, %1140, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1143 = greater_equal(%1141, %1142) /* ty=Tensor[(9, 3, 5), bool] */;
  (%1143,)
}

def @func_9584() -> Tensor[(3, 13, 12), float32] {
  @func_9582() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_5214() -> (Tensor[(3, 13, 12), float32],) {
  %1144 = @func_441() /* ty=Tensor[(3, 13, 12), float32] */;
  (%1144,)
}

def @func_10811() -> Tensor[(3, 13, 12), float32] {
  @func_10809() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_7905(%var_7903: Tensor[(7, 9, 3), int8], %var_7904: Tensor[(7, 9, 3), int8]) -> Tensor[(7, 9, 3), int8] {
  @func_7901(%var_7903, %var_7904) /* ty=Tensor[(7, 9, 3), int8] */
}

def @func_1257() -> (Tensor[(3, 13, 12), float32],) {
  @func_1255() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_7341(%var_7340: Tensor[(144), float32]) -> (Tensor[(3, 13, 12), bool], Tensor[(1, 520), float64], Tensor[(192), int32], Tensor[(144), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %1162 = fn (%var_7288: Tensor[(144), float32]) -> (Tensor[(3, 13, 12), bool], Tensor[(1, 520), float64], Tensor[(192), int32], Tensor[(144), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
    %1145 = cast(meta[relay.Constant][43] /* ty=Tensor[(192), int32] */, dtype="int32") /* ty=Tensor[(192), int32] */;
    %1146 = cast(meta[relay.Constant][43] /* ty=Tensor[(192), int32] */, dtype="int32") /* ty=Tensor[(192), int32] */;
    %1147 = cast(%var_7288, dtype="float32") /* ty=Tensor[(144), float32] */;
    %1148 = cast(meta[relay.Constant][44] /* ty=Tensor[(520), float64] */, dtype="float64") /* ty=Tensor[(520), float64] */;
    %1149 = reshape(%1145, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), int32] */;
    %1150 = reshape(%1146, newshape=[12, 2, 8]) /* ty=Tensor[(12, 2, 8), int32] */;
    %1151 = reshape(%1147, newshape=[144]) /* ty=Tensor[(144), float32] */;
    %1152 = reshape(%1148, newshape=[1, 520]) /* ty=Tensor[(1, 520), float64] */;
    %1153 = @func_4232(%1149, %1150, %1151, %1152) /* ty=(Tensor[(12, 2, 8), int32], Tensor[(2, 12, 6), float32], Tensor[(144), float32], Tensor[(1, 520), float64]) */;
    %1154 = @func_4274() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) */;
    %1155 = @func_5740() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %1156 = @func_7013() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %1157 = @func_2970() /* ty=Tensor[(3, 13, 12), bool] */;
    %1158 = %1153.3;
    %1159 = %1154.0;
    %1160 = %1155.0;
    %1161 = %1156.0;
    (%1157, %1158, meta[relay.Constant][43] /* ty=Tensor[(192), int32] */, %var_7288, meta[relay.Constant][44] /* ty=Tensor[(520), float64] */, %1159, %1160, %1161)
  };
  %1162(%var_7340) /* ty=(Tensor[(3, 13, 12), bool], Tensor[(1, 520), float64], Tensor[(192), int32], Tensor[(144), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */
}

def @func_12667() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  %1163 = @func_9624() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1164 = @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1165 = @func_9942() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %1166 = @func_6197() /* ty=Tensor[(3, 13, 12), bool] */;
  %1167 = %1163.0;
  %1168 = %1164.0;
  %1169 = %1165.0;
  (%1166, %1167, %1168, %1169)
}

def @func_3996() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %1170 = @func_2028() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1171 = @func_2585() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1172 = @func_3015() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %1173 = %1170.1;
  %1174 = %1171.1;
  %1175 = %1172.0;
  (%1173, %1174, %1175)
}

def @main() -> Tensor[(1210), float32] {
  %1176 = @func_12139() /* ty=Tensor[(1210), bool] */;
  %1177 = cast(%1176, dtype="float32") /* ty=Tensor[(1210), float32] */;
  acosh(%1177) /* ty=Tensor[(1210), float32] */
}

def @func_4274() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) {
  %1178 = @func_3059() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1179 = @func_4117() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) */;
  %1180 = @func_2052() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %1181 = @func_3687() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1182 = %1178.0;
  %1183 = %1179.0;
  %1184 = %1180.0;
  %1185 = %1181.1;
  (%1182, %1183, %1184, %1185)
}

def @func_3016() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %1189 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
    %1186 = @func_2104() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %1187 = %1186.1;
    %1188 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
    (%1187, %1188)
  };
  %1189() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */
}

def @func_5930() -> Tensor[(3, 13, 12), bool] {
  %1190 = @func_5715() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %1190.0
}

def @func_4693() -> (Tensor[(1210), float64], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) {
  %1191 = @func_4274() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(1210), float64]) */;
  %1192 = @func_3015() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
  %1193 = @func_3996() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
  %1194 = %1191.3;
  %1195 = %1192.0;
  %1196 = %1193.0;
  (%1194, %1195, %1196)
}

def @func_9693() -> (Tensor[(18), float64], Tensor[(3, 13, 12), float64]) {
  %1197 = @func_7390() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8], Tensor[(18), float32], Tensor[(520), float64], Tensor[(3, 13, 12), float32]) */;
  %1198 = %1197.2;
  %1199 = cast(%1198, dtype="float64") /* ty=Tensor[(18), float64] */;
  %1200 = @func_9507() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) */;
  %1201 = sin(%1199) /* ty=Tensor[(18), float64] */;
  %1202 = %1200.3;
  (%1201, %1202)
}

def @func_6862() -> (Tensor[(3, 13, 12), float64], Tensor[(11, 2, 15), float64], Tensor[(3, 13, 12), float32]) {
  %1208 = fn () -> (Tensor[(3, 13, 12), float64], Tensor[(11, 2, 15), float64], Tensor[(3, 13, 12), float32]) {
    %1203 = @func_6825() /* ty=(Tensor[(11, 2, 15), float64],) */;
    %1204 = @func_4604() /* ty=(Tensor[(3, 13, 12), float32],) */;
    %1205 = @func_4454() /* ty=Tensor[(3, 13, 12), float64] */;
    %1206 = %1203.0;
    %1207 = %1204.0;
    (%1205, %1206, %1207)
  };
  %1208() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(11, 2, 15), float64], Tensor[(3, 13, 12), float32]) */
}

def @func_7600() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float64]) {
  %1209 = @func_5740() /* ty=(Tensor[(3, 13, 12), bool],) */;
  %1210 = @func_2307() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool]) */;
  %1211 = %1209.0;
  %1212 = %1210.0;
  (%1211, %1212)
}

def @func_10344(%var_10333: uint32) -> (Tensor[(7, 10, 14), bool], Tensor[(3, 13, 12), float64]) {
  %1213 = cast(%var_10333, dtype="bool") /* ty=bool */;
  %1214 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 10, 14), uint32] */, dtype="bool") /* ty=Tensor[(7, 10, 14), bool] */;
  %1215 = @func_2407() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), float64]) */;
  %1216 = less(%1213, %1214) /* ty=Tensor[(7, 10, 14), bool] */;
  %1217 = %1215.1;
  (%1216, %1217)
}

def @func_1376() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) {
  @func_1374() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), int8]) */
}

def @func_8106() -> Tensor[(3, 13, 12), bool] {
  %1219 = fn () -> Tensor[(3, 13, 12), bool] {
    %1218 = @func_2028() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %1218.0
  };
  %1219() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_12669() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  @func_12667() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */
}

def @func_2362() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) {
  @func_2360() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), bool]) */
}

def @func_7960() -> Tensor[(3, 13, 12), float32] {
  %1221 = fn () -> Tensor[(3, 13, 12), float32] {
    %1220 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
    %1220.0
  };
  %1221() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_862(%var_861: Tensor[(11, 10, 11), float64]) -> Tensor[(11, 10, 11), float64] {
  %1223 = fn (%var_856: Tensor[(11, 10, 11), float64]) -> Tensor[(11, 10, 11), float64] {
    %1222 = cast(%var_856, dtype="float64") /* ty=Tensor[(11, 10, 11), float64] */;
    cos(%1222) /* ty=Tensor[(11, 10, 11), float64] */
  };
  %1223(%var_861) /* ty=Tensor[(11, 10, 11), float64] */
}

def @func_8870() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) {
  @func_8868() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */
}

def @func_4119() -> (Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) {
  @func_4117() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) */
}

def @func_1482() -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
  %1227 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) {
    %1224 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
    %1225 = %1224.0;
    %1226 = @func_562() /* ty=Tensor[(3, 13, 12), float32] */;
    (%1225, %1226)
  };
  %1227() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */
}

def @func_10069() -> (Tensor[(3, 13, 12), float32],) {
  @func_10067() /* ty=(Tensor[(3, 13, 12), float32],) */
}

def @func_10067() -> (Tensor[(3, 13, 12), float32],) {
  %1228 = @func_639() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32]) */;
  %1229 = %1228.0;
  (%1229,)
}

def @func_563() -> Tensor[(3, 13, 12), float32] {
  %1238 = fn () -> Tensor[(3, 13, 12), float32] {
    %1230 = @func_469() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), float32]) */;
    %1231 = %1230.1;
    %1232 = cast(%1231, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
    %1233 = tan(%1232) /* ty=Tensor[(3, 13, 12), float32] */;
    %1234 = cast(%1231, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
    %1235 = shape_of(%1233, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1236 = cast(%1233, dtype="float32") /* ty=Tensor[(3, 13, 12), float32] */;
    %1237 = dyn.reshape(%1234, %1235, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%1236, %1237) /* ty=Tensor[(3, 13, 12), float32] */
  };
  %1238() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_7931() -> Tensor[(3, 13, 12), float32] {
  @func_562() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_12139() -> Tensor[(1210), bool] {
  @func_8954() /* ty=Tensor[(1210), bool] */
}

def @func_11494() -> Tensor[(3, 13, 12), float32] {
  %1239 = @func_1255() /* ty=(Tensor[(3, 13, 12), float32],) */;
  %1239.0
}

def @func_6805() -> (Tensor[(3, 13, 12), bool],) {
  %1242 = fn () -> (Tensor[(3, 13, 12), bool],) {
    %1240 = @func_1713() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(960), float32]) */;
    %1241 = %1240.0;
    (%1241,)
  };
  %1242() /* ty=(Tensor[(3, 13, 12), bool],) */
}

def @func_9762() -> (Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(2, 480), float32]) {
  %1257 = fn () -> (Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(2, 480), float32]) {
    %1243 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 480), float32] */, dtype="float32") /* ty=Tensor[(2, 480), float32] */;
    %1244 = reshape(%1243, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %1245 = @func_2948(%1244) /* ty=(Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), bool], Tensor[(3, 13, 12), float32]) */;
    %1246 = @func_2585() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(3, 13, 12), bool]) */;
    %1247 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 480), float32] */, dtype="float32") /* ty=Tensor[(2, 480), float32] */;
    %1248 = erf(%1247) /* ty=Tensor[(2, 480), float32] */;
    %1249 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 480), float32] */, dtype="float32") /* ty=Tensor[(2, 480), float32] */;
    %1250 = shape_of(%1248, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1251 = cast(%1248, dtype="float32") /* ty=Tensor[(2, 480), float32] */;
    %1252 = dyn.reshape(%1249, %1250, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %1253 = @func_3070() /* ty=Tensor[(3, 13, 12), bool] */;
    %1254 = %1245.1;
    %1255 = %1246.0;
    %1256 = subtract(%1251, %1252) /* ty=Tensor[(2, 480), float32] */;
    (%1253, %1254, %1255, %1256)
  };
  %1257() /* ty=(Tensor[(3, 13, 12), bool], Tensor[(960), float32], Tensor[(3, 13, 12), bool], Tensor[(2, 480), float32]) */
}

def @func_8417() -> Tensor[(3, 13, 12), float32] {
  %1259 = fn () -> Tensor[(3, 13, 12), float32] {
    %1258 = @func_4117() /* ty=(Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float32], Tensor[(3, 13, 12), float64]) */;
    %1258.0
  };
  %1259() /* ty=Tensor[(3, 13, 12), float32] */
}

def @func_3454() -> Tensor[(3, 13, 12), bool] {
  %1261 = fn () -> Tensor[(3, 13, 12), bool] {
    %1260 = @func_395() /* ty=(Tensor[(3, 13, 12), bool],) */;
    %1260.0
  };
  %1261() /* ty=Tensor[(3, 13, 12), bool] */
}

def @func_1950() -> (Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) {
  @func_1948() /* ty=(Tensor[(3, 13, 12), float64], Tensor[(3, 13, 12), bool], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(3, 13, 12), float32], Tensor[(960), float32], Tensor[(3, 13, 12), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen454/build/output.py", line 4527, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:19:27] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

