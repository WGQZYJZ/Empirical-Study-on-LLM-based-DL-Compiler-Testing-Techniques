==========mod==========
#[version = "0.0.5"]
def @func_3352() -> Tensor[(2, 14, 3), float64] {
  %0 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %0.0
}

def @func_799(%var_789: Tensor[(36), float64], %var_790: Tensor[(180, 1), uint64]) -> (Tensor[(2, 14, 3), float64], Tensor[(36, 6), float64], Tensor[(36), float64], Tensor[(180, 1), uint64]) {
  %1 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %2 = cast(%var_789, dtype="float64") /* ty=Tensor[(36), float64] */;
  %3 = cast(%var_790, dtype="uint64") /* ty=Tensor[(180, 1), uint64] */;
  %4 = cast(%var_790, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
  %5 = reshape(%2, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %6 = reshape(%3, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %7 = reshape(%4, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), float32] */;
  %8 = @func_761(%5, %6, %7) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(9, 7, 13), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(819), float64], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), float64], Tensor[(36, 6), float64]) */;
  %9 = %1.0;
  %10 = %8.7;
  (%9, %10, %var_789, %var_790)
}

def @func_3939() -> Tensor[(2, 14, 3), uint32] {
  %11 = @func_2086() /* ty=(Tensor[(2, 14, 3), uint32],) */;
  %11.0
}

def @func_2925() -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64]) {
  %12 = @func_2174() /* ty=Tensor[(2, 14, 3), float64] */;
  %13 = @func_2174() /* ty=Tensor[(2, 14, 3), float64] */;
  (%12, %13)
}

def @func_2593() -> Tensor[(10, 2, 8), uint8] {
  %14 = @func_929() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) */;
  %14.1
}

def @func_4369(%var_4360: Tensor[(14, 6, 9), float64]) -> (Tensor[(14, 6, 9), float64], Tensor[(10, 2, 8), bool], Tensor[(8, 20), uint8], Tensor[(56), float32]) {
  %15 = cast(%var_4360, dtype="float64") /* ty=Tensor[(14, 6, 9), float64] */;
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 20), uint8] */, dtype="uint8") /* ty=Tensor[(8, 20), uint8] */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %18 = reshape(%16, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), uint8] */;
  %19 = reshape(%17, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %20 = @func_1608(%18, %19) /* ty=(Tensor[(10, 2, 8), bool], Tensor[(4, 2, 7), float32]) */;
  %21 = log10(%15) /* ty=Tensor[(14, 6, 9), float64] */;
  %22 = %20.0;
  (%21, %22, meta[relay.Constant][0] /* ty=Tensor[(8, 20), uint8] */, meta[relay.Constant][1] /* ty=Tensor[(56), float32] */)
}

def @func_225(%var_115: Tensor[(3, 12, 1), float64], %var_175: Tensor[(3, 12, 5), uint64], %var_187: Tensor[(3, 12, 5), uint16], %var_219: Tensor[(3, 12, 6), float64]) -> (Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) {
  %23 = cast(%var_115, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  %24 = acosh(%23) /* ty=Tensor[(3, 12, 1), float64] */;
  %25 = cast(%24, dtype="float32") /* ty=Tensor[(3, 12, 1), float32] */;
  %26 = cast(%24, dtype="uint32") /* ty=Tensor[(3, 12, 1), uint32] */;
  %27 = shape_of(%var_115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%var_115, dtype="uint32") /* ty=Tensor[(3, 12, 1), uint32] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %30 = bitwise_and(%28, %29) /* ty=Tensor[(3, 12, ?), uint32] */;
  %31 = cast(%var_115, dtype="bool") /* ty=Tensor[(3, 12, 1), bool] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="bool") /* ty=Tensor[(3, 12, ?), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %35 = not_equal(%33, %34) /* ty=Tensor[(3, 12, ?), bool] */;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(3, 12, ?), float32] */;
  %37 = asin(%36) /* ty=Tensor[(3, 12, ?), float32] */;
  %38 = cast(%37, dtype="uint16") /* ty=Tensor[(3, 12, ?), uint16] */;
  %39 = cast(%var_175, dtype="uint16") /* ty=Tensor[(3, 12, 5), uint16] */;
  %40 = logical_xor(%38, %39) /* ty=Tensor[(3, 12, 5), uint16] */;
  %41 = cast(%var_187, dtype="bool") /* ty=Tensor[(3, 12, 5), bool] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="bool") /* ty=Tensor[(3, 12, 5), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %45 = cast(%var_115, dtype="uint64") /* ty=Tensor[(3, 12, 1), uint64] */;
  %46 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%37, dtype="uint64") /* ty=Tensor[(3, 12, ?), uint64] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %49 = multiply(%47, %48) /* ty=Tensor[(3, 12, ?), uint64] */;
  %50 = cast(%49, dtype="int64") /* ty=Tensor[(3, 12, ?), int64] */;
  %51 = cast(%var_175, dtype="int64") /* ty=Tensor[(3, 12, 5), int64] */;
  %52 = subtract(%50, %51) /* ty=Tensor[(3, 12, 5), int64] */;
  %53 = cast(%37, dtype="bool") /* ty=Tensor[(3, 12, ?), bool] */;
  %54 = cast(%52, dtype="bool") /* ty=Tensor[(3, 12, 5), bool] */;
  %55 = cast(%24, dtype="float32") /* ty=Tensor[(3, 12, 1), float32] */;
  %56 = cast(%var_219, dtype="float32") /* ty=Tensor[(3, 12, 6), float32] */;
  %57 = sigmoid(%25) /* ty=Tensor[(3, 12, 1), float32] */;
  %58 = not_equal(%43, %44) /* ty=Tensor[(3, 12, 5), bool] */;
  %59 = logical_and(%53, %54) /* ty=Tensor[(3, 12, 5), bool] */;
  %60 = mod(%55, %56) /* ty=Tensor[(3, 12, 6), float32] */;
  (%57, %58, %59, %60)
}

def @func_3770() -> (Tensor[(2, 14, 3), int16], Tensor[(2, 14, 3), float64]) {
  %61 = @func_2357() /* ty=(Tensor[(2, 14, 3), int16],) */;
  %62 = @func_2160() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %63 = %62.0;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %65 = %61.0;
  %66 = exp(%64) /* ty=Tensor[(2, 14, 3), float64] */;
  (%65, %66)
}

def @func_2357() -> (Tensor[(2, 14, 3), int16],) {
  %67 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %68 = %67.0;
  %69 = cast(%68, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  %70 = sin(%69) /* ty=Tensor[(2, 14, 3), float32] */;
  %71 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 14, 3), float32] */, dtype="int16") /* ty=Tensor[(2, 14, 3), int16] */;
  %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%70, dtype="int16") /* ty=Tensor[(2, 14, 3), int16] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %75 = right_shift(%73, %74) /* ty=Tensor[(2, 14, 3), int16] */;
  (%75,)
}

def @func_4009() -> (Tensor[(10, 2, 8), float32], Tensor[(180), uint64], Tensor[(280), float32], Tensor[(2, 14, 3), int16], Tensor[(2, 14, 3), float64]) {
  %76 = @func_2730() /* ty=(Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), uint8]) */;
  %77 = %76.1;
  %78 = cast(%77, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  %79 = cast(meta[relay.Constant][3] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %80 = reshape(%79, newshape=[280, 1]) /* ty=Tensor[(280, 1), float32] */;
  %81 = @func_617(%80) /* ty=(Tensor[(3, 12, 6), float32], Tensor[(280, 1), float32], Tensor[(180), uint64], Tensor[(108, 2), float64], Tensor[(3, 12, 6), float32], Tensor[(36), float64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int8], Tensor[(2, 14, 3), float64], Tensor[(3, 12, 6), float32], Tensor[(2, 14, 3), uint64]) */;
  %82 = @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %83 = exp(%78) /* ty=Tensor[(10, 2, 8), float32] */;
  %84 = %81.2;
  %85 = @func_3310() /* ty=Tensor[(2, 14, 3), int16] */;
  %86 = %82.0;
  (%83, %84, meta[relay.Constant][3] /* ty=Tensor[(280), float32] */, %85, %86)
}

def @func_4627() -> (Tensor[(2, 14, 3), float64], Tensor[(8, 7, 16), float64], Tensor[(2, 14, 3), float64], Tensor[(896), float64], Tensor[(10, 2, 8), uint8]) {
  %87 = cast(meta[relay.Constant][4] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %88 = reshape(%87, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), float64] */;
  %89 = @func_3033(%88) /* ty=(Tensor[(8, 7, 16), float64],) */;
  %90 = @func_4143() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %91 = cast(meta[relay.Constant][4] /* ty=Tensor[(896), float64] */, dtype="float32") /* ty=Tensor[(896), float32] */;
  %92 = cos(%91) /* ty=Tensor[(896), float32] */;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(896), float64] */;
  %94 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  %95 = %89.0;
  %96 = %90.0;
  %97 = acosh(%93) /* ty=Tensor[(896), float64] */;
  %98 = @func_2411() /* ty=Tensor[(10, 2, 8), uint8] */;
  (%94, %95, %96, %97, %98)
}

def @func_2673(%var_2611: Tensor[(288), float32], %var_2668: Tensor[(440, 2), float64]) -> (Tensor[(2, 14, 3), float64], Tensor[(6, 12, 4), uint64], Tensor[(288), float32], Tensor[(16, 11, 5), float64], Tensor[(440, 2), float64]) {
  %99 = @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %100 = cast(%var_2611, dtype="float32") /* ty=Tensor[(288), float32] */;
  %101 = reshape(%100, newshape=[6, 12, 4]) /* ty=Tensor[(6, 12, 4), float32] */;
  %102 = @func_2519(%101) /* ty=(Tensor[(6, 12, 4), uint64],) */;
  %103 = cast(%var_2668, dtype="float64") /* ty=Tensor[(440, 2), float64] */;
  %104 = reshape(%103, newshape=[16, 11, 5]) /* ty=Tensor[(16, 11, 5), float64] */;
  %105 = @func_1149(%104) /* ty=(Tensor[(16, 11, 5), float64], Tensor[(16, 11, 5), float32]) */;
  %106 = %99.0;
  %107 = %102.0;
  %108 = %105.0;
  (%106, %107, %var_2611, %108, %var_2668)
}

def @func_3466(%var_3433: Tensor[(14, 7, 11), uint8]) -> (Tensor[(14, 7, 11), uint8], Tensor[(10, 2, 8), uint8], Tensor[(14, 7, 11), int16]) {
  %109 = cast(%var_3433, dtype="uint8") /* ty=Tensor[(14, 7, 11), uint8] */;
  %110 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(14, 7, 11), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 7, 11), uint8] */, dtype="uint8") /* ty=Tensor[(14, 7, 11), uint8] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %113 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 7, 11), uint8] */, dtype="bool") /* ty=Tensor[(14, 7, 11), bool] */;
  %114 = shape_of(%var_3433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%var_3433, dtype="bool") /* ty=Tensor[(14, 7, 11), bool] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %117 = greater_equal(%115, %116) /* ty=Tensor[(14, 7, 11), bool] */;
  %118 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 7, 11), uint8] */, dtype="int16") /* ty=Tensor[(14, 7, 11), int16] */;
  %119 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %120 = cast(%117, dtype="int16") /* ty=Tensor[(14, 7, 11), int16] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %122 = bitwise_and(%111, %112) /* ty=Tensor[(14, 7, 11), uint8] */;
  %123 = @func_2593() /* ty=Tensor[(10, 2, 8), uint8] */;
  %124 = minimum(%120, %121) /* ty=Tensor[(14, 7, 11), int16] */;
  (%122, %123, %124)
}

def @func_2228(%var_2204: Tensor[(1512), float64]) -> (Tensor[(14, 12, 9), uint64], Tensor[(1512), float64], Tensor[(2, 14, 3), float32], Tensor[(16, 11, 5), float64], Tensor[(4, 220), float64]) {
  %125 = cast(%var_2204, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %126 = reshape(%125, newshape=[1512]) /* ty=Tensor[(1512), float64] */;
  %127 = @func_1886(%126) /* ty=(Tensor[(2, 14, 3), float32], Tensor[(14, 12, 9), uint64], Tensor[(1512), float64]) */;
  %128 = @func_888() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %129 = %128.0;
  %130 = cast(%129, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  %131 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 220), float64] */, dtype="float64") /* ty=Tensor[(4, 220), float64] */;
  %132 = reshape(%131, newshape=[16, 11, 5]) /* ty=Tensor[(16, 11, 5), float64] */;
  %133 = @func_1149(%132) /* ty=(Tensor[(16, 11, 5), float64], Tensor[(16, 11, 5), float32]) */;
  %134 = %127.1;
  %135 = sinh(%130) /* ty=Tensor[(2, 14, 3), float32] */;
  %136 = %133.0;
  (%134, %var_2204, %135, %136, meta[relay.Constant][7] /* ty=Tensor[(4, 220), float64] */)
}

def @func_1322(%var_1310: Tensor[(13, 7, 1), bool], %var_1311: Tensor[(13, 7, 8), bool]) -> Tensor[(13, 7, 8), bool] {
  %137 = cast(%var_1310, dtype="bool") /* ty=Tensor[(13, 7, 1), bool] */;
  %138 = cast(%var_1311, dtype="bool") /* ty=Tensor[(13, 7, 8), bool] */;
  logical_and(%137, %138) /* ty=Tensor[(13, 7, 8), bool] */
}

def @func_4858() -> Tensor[(10, 2, 8), uint8] {
  @func_2411() /* ty=Tensor[(10, 2, 8), uint8] */
}

def @func_1786(%var_1758: Tensor[(14, 12, 9), float64]) -> Tensor[(14, 12, 9), uint64] {
  %139 = cast(%var_1758, dtype="float64") /* ty=Tensor[(14, 12, 9), float64] */;
  %140 = atan(%139) /* ty=Tensor[(14, 12, 9), float64] */;
  %141 = cast(%140, dtype="uint64") /* ty=Tensor[(14, 12, 9), uint64] */;
  %142 = shape_of(%var_1758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%var_1758, dtype="uint64") /* ty=Tensor[(14, 12, 9), uint64] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%143, %144) /* ty=Tensor[(14, 12, 9), uint64] */
}

def @func_3413() -> Tensor[(2, 14, 3), float64] {
  @func_2470() /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_2788(%var_2761: Tensor[(2, 15, 10), float32], %var_2762: Tensor[(2, 15, 10), float32], %var_2767: Tensor[(288), float32], %var_2768: Tensor[(880), float64], %var_2784: Tensor[(280), float32]) -> (Tensor[(2, 15, 10), float32], Tensor[(16, 11, 5), float64], Tensor[(288), float32], Tensor[(880), float64], float32, Tensor[(280), float32]) {
  %145 = cast(%var_2762, dtype="float32") /* ty=Tensor[(2, 15, 10), float32] */;
  %146 = shape_of(%var_2761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%var_2761, dtype="float32") /* ty=Tensor[(2, 15, 10), float32] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %149 = cast(%var_2767, dtype="float32") /* ty=Tensor[(288), float32] */;
  %150 = cast(%var_2768, dtype="float64") /* ty=Tensor[(880), float64] */;
  %151 = reshape(%149, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %152 = reshape(%150, newshape=[440, 2]) /* ty=Tensor[(440, 2), float64] */;
  %153 = @func_2673(%151, %152) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(6, 12, 4), uint64], Tensor[(288), float32], Tensor[(16, 11, 5), float64], Tensor[(440, 2), float64]) */;
  %154 = cast(%var_2784, dtype="float32") /* ty=Tensor[(280), float32] */;
  %155 = reshape(%154, newshape=[70, 4]) /* ty=Tensor[(70, 4), float32] */;
  %156 = @func_1983(%155) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(8, 5, 16), float32], float32, Tensor[(70, 4), float32], Tensor[(180), uint64], Tensor[(216), float64]) */;
  %157 = power(%147, %148) /* ty=Tensor[(2, 15, 10), float32] */;
  %158 = %153.3;
  %159 = %156.2;
  (%157, %158, %var_2767, %var_2768, %159, %var_2784)
}

def @func_3714(%var_3679: Tensor[(2, 14, 3), float64]) -> (Tensor[(2, 14, 3), bool], Tensor[(10, 2, 8), uint8], Tensor[(4, 6, 4), float32]) {
  %160 = @func_1362() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %161 = %160.0;
  %162 = cast(%var_3679, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%161, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %166 = @func_1297() /* ty=(Tensor[(10, 2, 8), uint8],) */;
  %167 = @func_3192() /* ty=(Tensor[(4, 6, 4), float32],) */;
  %168 = not_equal(%164, %165) /* ty=Tensor[(2, 14, 3), bool] */;
  %169 = %166.0;
  %170 = %167.0;
  (%168, %169, %170)
}

def @func_2470() -> Tensor[(2, 14, 3), float64] {
  %171 = @func_1058() /* ty=Tensor[(2, 14, 3), float32] */;
  %172 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 14, 3), float32] */, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%171, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%174, %175) /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_4437(%var_4428: Tensor[(180), uint64]) -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int64], Tensor[(180), uint64], Tensor[(3, 12), float64], Tensor[(180), uint64], Tensor[(4, 6, 4), bool]) {
  %176 = @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %177 = %176.0;
  %178 = @func_1330() /* ty=Tensor[(2, 14, 3), float64] */;
  %179 = cast(%178, dtype="int64") /* ty=Tensor[(2, 14, 3), int64] */;
  %180 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%177, dtype="int64") /* ty=Tensor[(2, 14, 3), int64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %183 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 12), float64] */, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
  %184 = cast(%var_4428, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %185 = cast(%var_4428, dtype="float32") /* ty=Tensor[(180), float32] */;
  %186 = reshape(%183, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %187 = reshape(%184, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %188 = reshape(%185, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), float32] */;
  %189 = @func_761(%186, %187, %188) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(9, 7, 13), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(819), float64], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), float64], Tensor[(36, 6), float64]) */;
  %190 = @func_2470() /* ty=Tensor[(2, 14, 3), float64] */;
  %191 = bitwise_xor(%181, %182) /* ty=Tensor[(2, 14, 3), int64] */;
  %192 = %189.3;
  %193 = @func_2047() /* ty=Tensor[(4, 6, 4), bool] */;
  (%190, %191, %192, meta[relay.Constant][9] /* ty=Tensor[(3, 12), float64] */, %var_4428, %193)
}

def @func_2497() -> (Tensor[(2, 14, 3), float64],) {
  %194 = @func_2174() /* ty=Tensor[(2, 14, 3), float64] */;
  (%194,)
}

def @func_1255() -> (Tensor[(2, 14, 3), float64], Tensor[(16, 11, 5), float64], Tensor[(880), float32]) {
  %195 = @func_888() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %196 = cast(meta[relay.Constant][10] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
  %197 = reshape(%196, newshape=[16, 11, 5]) /* ty=Tensor[(16, 11, 5), float64] */;
  %198 = @func_1149(%197) /* ty=(Tensor[(16, 11, 5), float64], Tensor[(16, 11, 5), float32]) */;
  %199 = cast(meta[relay.Constant][10] /* ty=Tensor[(880), float64] */, dtype="float32") /* ty=Tensor[(880), float32] */;
  %200 = %195.0;
  %201 = %198.0;
  %202 = log(%199) /* ty=Tensor[(880), float32] */;
  (%200, %201, %202)
}

def @func_2282(%var_2261: Tensor[(91), bool]) -> (Tensor[(13, 7, 8), bool], Tensor[(728), bool], Tensor[(91), int64], Tensor[(2, 14, 3), float32]) {
  %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(91), bool] */, dtype="bool") /* ty=Tensor[(91), bool] */;
  %204 = cast(meta[relay.Constant][12] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %205 = reshape(%203, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), bool] */;
  %206 = reshape(%204, newshape=[13, 7, 8]) /* ty=Tensor[(13, 7, 8), bool] */;
  %207 = cast(%var_2261, dtype="int64") /* ty=Tensor[(91), int64] */;
  %208 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(91), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %209 = cast(meta[relay.Constant][11] /* ty=Tensor[(91), bool] */, dtype="int64") /* ty=Tensor[(91), int64] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?), int64] */;
  %211 = @func_1330() /* ty=Tensor[(2, 14, 3), float64] */;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  %213 = @func_1322(%205, %206) /* ty=Tensor[(13, 7, 8), bool] */;
  %214 = logical_xor(%209, %210) /* ty=Tensor[(91), int64] */;
  %215 = atanh(%212) /* ty=Tensor[(2, 14, 3), float32] */;
  (%213, meta[relay.Constant][12] /* ty=Tensor[(728), bool] */, %214, %215)
}

def @func_1194(%var_1168: Tensor[(4, 2, 7), float32], %var_1179: Tensor[(4, 2, 7), float32]) -> (Tensor[(4, 2, 7), float32], Tensor[(2, 14, 3), float64], Tensor[(4, 2, 7), bool]) {
  %216 = cast(%var_1168, dtype="float32") /* ty=Tensor[(4, 2, 7), float32] */;
  %217 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %218 = cast(%var_1179, dtype="bool") /* ty=Tensor[(4, 2, 7), bool] */;
  %219 = shape_of(%var_1168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%var_1168, dtype="bool") /* ty=Tensor[(4, 2, 7), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %222 = atanh(%216) /* ty=Tensor[(4, 2, 7), float32] */;
  %223 = %217.0;
  %224 = not_equal(%220, %221) /* ty=Tensor[(4, 2, 7), bool] */;
  (%222, %223, %224)
}

def @func_4216(%var_4187: Tensor[(3, 9, 6), float32]) -> (Tensor[(2, 14, 3), uint32], Tensor[(2, 14, 3), float64], Tensor[(3, 9, 6), float32]) {
  %225 = @func_2086() /* ty=(Tensor[(2, 14, 3), uint32],) */;
  %226 = @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %227 = cast(%var_4187, dtype="float32") /* ty=Tensor[(3, 9, 6), float32] */;
  %228 = exp(%227) /* ty=Tensor[(3, 9, 6), float32] */;
  %229 = cast(%var_4187, dtype="uint32") /* ty=Tensor[(3, 9, 6), uint32] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%228, dtype="uint32") /* ty=Tensor[(3, 9, 6), uint32] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %233 = right_shift(%231, %232) /* ty=Tensor[(3, 9, 6), uint32] */;
  %234 = cast(%233, dtype="float32") /* ty=Tensor[(3, 9, 6), float32] */;
  %235 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%228, dtype="float32") /* ty=Tensor[(3, 9, 6), float32] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %238 = %225.0;
  %239 = %226.0;
  %240 = floor_mod(%236, %237) /* ty=Tensor[(3, 9, 6), float32] */;
  (%238, %239, %240)
}

def @func_3119() -> (Tensor[(2, 14, 3), float64],) {
  %241 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %242 = %241.0;
  (%242,)
}

def @func_929() -> (Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) {
  %243 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 2, 8), uint8] */, dtype="uint8") /* ty=Tensor[(10, 2, 8), uint8] */;
  %244 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(10, 2, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 2, 8), uint8] */, dtype="uint8") /* ty=Tensor[(10, 2, 8), uint8] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %247 = logical_xor(%245, %246) /* ty=Tensor[(10, 2, 8), uint8] */;
  %248 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 2, 8), uint8] */, dtype="uint8") /* ty=Tensor[(10, 2, 8), uint8] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="uint8") /* ty=Tensor[(10, 2, 8), uint8] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %252 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  %253 = bitwise_xor(%250, %251) /* ty=Tensor[(10, 2, 8), uint8] */;
  (%252, %253)
}

def @func_4143() -> (Tensor[(2, 14, 3), float64],) {
  %254 = @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %255 = %254.0;
  (%255,)
}

def @func_1149(%var_1133: Tensor[(16, 11, 5), float64]) -> (Tensor[(16, 11, 5), float64], Tensor[(16, 11, 5), float32]) {
  %256 = cast(%var_1133, dtype="float64") /* ty=Tensor[(16, 11, 5), float64] */;
  %257 = asin(%256) /* ty=Tensor[(16, 11, 5), float64] */;
  %258 = cast(%257, dtype="float64") /* ty=Tensor[(16, 11, 5), float64] */;
  %259 = cast(%var_1133, dtype="float32") /* ty=Tensor[(16, 11, 5), float32] */;
  %260 = log2(%258) /* ty=Tensor[(16, 11, 5), float64] */;
  %261 = erf(%259) /* ty=Tensor[(16, 11, 5), float32] */;
  (%260, %261)
}

def @func_1886(%var_1878: Tensor[(1512), float64]) -> (Tensor[(2, 14, 3), float32], Tensor[(14, 12, 9), uint64], Tensor[(1512), float64]) {
  %262 = cast(%var_1878, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %263 = reshape(%262, newshape=[14, 12, 9]) /* ty=Tensor[(14, 12, 9), float64] */;
  %264 = @func_1058() /* ty=Tensor[(2, 14, 3), float32] */;
  %265 = @func_1786(%263) /* ty=Tensor[(14, 12, 9), uint64] */;
  (%264, %265, %var_1878)
}

def @func_2458() -> (Tensor[(10, 2, 8), int8],) {
  %266 = @func_1297() /* ty=(Tensor[(10, 2, 8), uint8],) */;
  %267 = %266.0;
  %268 = cast(%267, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  %269 = tan(%268) /* ty=Tensor[(10, 2, 8), float32] */;
  %270 = cast(%267, dtype="int8") /* ty=Tensor[(10, 2, 8), int8] */;
  %271 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%269, dtype="int8") /* ty=Tensor[(10, 2, 8), int8] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %274 = maximum(%272, %273) /* ty=Tensor[(10, 2, 8), int8] */;
  (%274,)
}

def @func_2174() -> Tensor[(2, 14, 3), float64] {
  @func_525() /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_4117(%var_4087: Tensor[(9, 2, 11), int64], %var_4094: Tensor[(3, 12), float64]) -> (Tensor[(9, 2, 11), bool], Tensor[(36), float64], Tensor[(3, 12), float64], Tensor[(9, 2, 11), float32]) {
  %275 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 2, 11), int64] */, dtype="bool") /* ty=Tensor[(9, 2, 11), bool] */;
  %276 = shape_of(%var_4087, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%var_4087, dtype="bool") /* ty=Tensor[(9, 2, 11), bool] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %279 = cast(%var_4094, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
  %280 = reshape(%279, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %281 = @func_1734(%280) /* ty=(Tensor[(3, 12, 5), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int64]) */;
  %282 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 2, 11), int64] */, dtype="float32") /* ty=Tensor[(9, 2, 11), float32] */;
  %283 = not_equal(%277, %278) /* ty=Tensor[(9, 2, 11), bool] */;
  %284 = %281.1;
  %285 = rsqrt(%282) /* ty=Tensor[(9, 2, 11), float32] */;
  (%283, %284, %var_4094, %285)
}

def @main(%var_5043: Tensor[(2, 8, 15), float64]) -> (Tensor[(2, 8, 15), float64],) {
  %286 = cast(%var_5043, dtype="float64") /* ty=Tensor[(2, 8, 15), float64] */;
  %287 = acosh(%286) /* ty=Tensor[(2, 8, 15), float64] */;
  (%287,)
}

def @func_1983(%var_1975: Tensor[(70, 4), float32]) -> (Tensor[(2, 14, 3), float64], Tensor[(8, 5, 16), float32], float32, Tensor[(70, 4), float32], Tensor[(180), uint64], Tensor[(216), float64]) {
  %288 = @func_929() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) */;
  %289 = cast(-3.28429f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %290 = cast(%var_1975, dtype="float32") /* ty=Tensor[(70, 4), float32] */;
  %291 = cast(meta[relay.Constant][16] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %292 = cast(meta[relay.Constant][17] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %293 = reshape(%289, newshape=[]) /* ty=float32 */;
  %294 = reshape(%290, newshape=[5, 7, 8]) /* ty=Tensor[(5, 7, 8), float32] */;
  %295 = reshape(%291, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %296 = reshape(%292, newshape=[1, 216]) /* ty=Tensor[(1, 216), float64] */;
  %297 = @func_430(%293, %294, %295, %296) /* ty=(Tensor[(3, 12, 6), float32], Tensor[(36), float64], Tensor[(5, 7, 8), uint16], Tensor[(1, 216), uint64], Tensor[(8, 5, 16), float32], Tensor[(3, 12, 180), float64], Tensor[(3, 12, 6), float32], Tensor[(3, 12, 6), float32]) */;
  %298 = %288.0;
  %299 = %297.4;
  (%298, %299, -3.28429f /* ty=float32 */, %var_1975, meta[relay.Constant][16] /* ty=Tensor[(180), uint64] */, meta[relay.Constant][17] /* ty=Tensor[(216), float64] */)
}

def @func_665() -> (Tensor[(2, 14, 3), float64],) {
  %300 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  (%300,)
}

def @func_430(%var_354: float32, %var_355: Tensor[(5, 7, 8), float32], %var_362: Tensor[(180), uint64], %var_363: Tensor[(1, 216), float64]) -> (Tensor[(3, 12, 6), float32], Tensor[(36), float64], Tensor[(5, 7, 8), uint16], Tensor[(1, 216), uint64], Tensor[(8, 5, 16), float32], Tensor[(3, 12, 180), float64], Tensor[(3, 12, 6), float32], Tensor[(3, 12, 6), float32]) {
  %301 = cast(meta[relay.Constant][18] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %302 = cast(%var_362, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %303 = cast(%var_362, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %304 = cast(%var_363, dtype="float64") /* ty=Tensor[(1, 216), float64] */;
  %305 = reshape(%301, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %306 = reshape(%302, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %307 = reshape(%303, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %308 = reshape(%304, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %309 = @func_225(%305, %306, %307, %308) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %310 = cast(%var_354, dtype="float32") /* ty=float32 */;
  %311 = cast(%var_355, dtype="float32") /* ty=Tensor[(5, 7, 8), float32] */;
  %312 = floor_mod(%310, %311) /* ty=Tensor[(5, 7, 8), float32] */;
  %313 = cast(%312, dtype="uint16") /* ty=Tensor[(5, 7, 8), uint16] */;
  %314 = cast(%var_354, dtype="uint16") /* ty=uint16 */;
  %315 = cast(%var_363, dtype="uint64") /* ty=Tensor[(1, 216), uint64] */;
  %316 = cast(%var_354, dtype="uint64") /* ty=uint64 */;
  %317 = cast(%var_354, dtype="float32") /* ty=float32 */;
  %318 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 5, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 5, 16), float32] */;
  %319 = cast(meta[relay.Constant][18] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %320 = cast(%var_362, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %321 = cast(%var_362, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %322 = %309.3;
  %323 = cast(%322, dtype="float64") /* ty=Tensor[(3, 12, 6), float64] */;
  %324 = reshape(%319, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %325 = reshape(%320, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %326 = reshape(%321, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %327 = reshape(%323, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %328 = @func_225(%324, %325, %326, %327) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %329 = %328.0;
  %330 = cast(%329, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  %331 = cast(%var_362, dtype="float64") /* ty=Tensor[(180), float64] */;
  %332 = cast(meta[relay.Constant][18] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %333 = cast(%var_362, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %334 = cast(%var_362, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %335 = cast(%329, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  %336 = cast(%var_362, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %337 = cast(%var_362, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %338 = cast(%322, dtype="float64") /* ty=Tensor[(3, 12, 6), float64] */;
  %339 = reshape(%335, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %340 = reshape(%336, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %341 = reshape(%337, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %342 = reshape(%338, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %343 = @func_225(%339, %340, %341, %342) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %344 = %343.3;
  %345 = cast(%344, dtype="float64") /* ty=Tensor[(3, 12, 6), float64] */;
  %346 = reshape(%332, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %347 = reshape(%333, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %348 = reshape(%334, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %349 = reshape(%345, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %350 = @func_225(%346, %347, %348, %349) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %351 = cast(%344, dtype="float32") /* ty=Tensor[(3, 12, 6), float32] */;
  %352 = left_shift(%313, %314) /* ty=Tensor[(5, 7, 8), uint16] */;
  %353 = bitwise_or(%315, %316) /* ty=Tensor[(1, 216), uint64] */;
  %354 = multiply(%317, %318) /* ty=Tensor[(8, 5, 16), float32] */;
  %355 = divide(%330, %331) /* ty=Tensor[(3, 12, 180), float64] */;
  %356 = %350.3;
  %357 = atan(%351) /* ty=Tensor[(3, 12, 6), float32] */;
  (%322, meta[relay.Constant][18] /* ty=Tensor[(36), float64] */, %352, %353, %354, %355, %356, %357)
}

def @func_2047() -> Tensor[(4, 6, 4), bool] {
  %358 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 6, 1), int8] */, dtype="int8") /* ty=Tensor[(4, 6, 1), int8] */;
  %359 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 6, 4), int8] */, dtype="int8") /* ty=Tensor[(4, 6, 4), int8] */;
  %360 = minimum(%358, %359) /* ty=Tensor[(4, 6, 4), int8] */;
  %361 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 6, 1), int8] */, dtype="bool") /* ty=Tensor[(4, 6, 1), bool] */;
  %362 = cast(%360, dtype="bool") /* ty=Tensor[(4, 6, 4), bool] */;
  less_equal(%361, %362) /* ty=Tensor[(4, 6, 4), bool] */
}

def @func_3375() -> (Tensor[(10, 2, 8), int8],) {
  %363 = @func_2458() /* ty=(Tensor[(10, 2, 8), int8],) */;
  %364 = %363.0;
  (%364,)
}

def @func_4531() -> (Tensor[(880), float32],) {
  %365 = @func_1255() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(16, 11, 5), float64], Tensor[(880), float32]) */;
  %366 = %365.2;
  (%366,)
}

def @func_761(%var_728: Tensor[(36), float64], %var_729: Tensor[(180), uint64], %var_741: Tensor[(3, 12, 5), float32]) -> (Tensor[(2, 14, 3), float64], Tensor[(9, 7, 13), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(819), float64], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), float64], Tensor[(36, 6), float64]) {
  %367 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %368 = cast(meta[relay.Constant][22] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
  %369 = reshape(%368, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), int32] */;
  %370 = cast(meta[relay.Constant][22] /* ty=Tensor[(819), int32] */, dtype="float64") /* ty=Tensor[(819), float64] */;
  %371 = cast(%var_728, dtype="float64") /* ty=Tensor[(36), float64] */;
  %372 = cast(%var_729, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %373 = cast(%var_729, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %374 = cast(meta[relay.Constant][23] /* ty=Tensor[(36, 6), float64] */, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
  %375 = reshape(%371, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %376 = reshape(%372, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %377 = reshape(%373, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %378 = reshape(%374, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %379 = @func_225(%375, %376, %377, %378) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %380 = cast(%var_728, dtype="float64") /* ty=Tensor[(36), float64] */;
  %381 = cast(%var_729, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %382 = cast(%var_729, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %383 = cast(meta[relay.Constant][23] /* ty=Tensor[(36, 6), float64] */, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
  %384 = reshape(%380, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %385 = reshape(%381, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %386 = reshape(%382, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %387 = reshape(%383, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %388 = @func_225(%384, %385, %386, %387) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %389 = %388.0;
  %390 = cast(%389, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  %391 = cast(%var_741, dtype="float64") /* ty=Tensor[(3, 12, 5), float64] */;
  %392 = cast(meta[relay.Constant][23] /* ty=Tensor[(36, 6), float64] */, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
  %393 = %367.0;
  %394 = @func_711(%369) /* ty=Tensor[(9, 7, 13), bool] */;
  %395 = atanh(%370) /* ty=Tensor[(819), float64] */;
  %396 = %379.1;
  %397 = power(%390, %391) /* ty=Tensor[(3, 12, 5), float64] */;
  %398 = tan(%392) /* ty=Tensor[(36, 6), float64] */;
  (%393, %394, %var_728, %var_729, %395, %396, %397, %398)
}

def @func_1608(%var_1544: Tensor[(10, 2, 8), uint8], %var_1575: Tensor[(56), float32]) -> (Tensor[(10, 2, 8), bool], Tensor[(4, 2, 7), float32]) {
  %399 = @func_929() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) */;
  %400 = %399.1;
  %401 = cast(%var_1544, dtype="bool") /* ty=Tensor[(10, 2, 8), bool] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%400, dtype="bool") /* ty=Tensor[(10, 2, 8), bool] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %405 = cast(%var_1575, dtype="float32") /* ty=Tensor[(56), float32] */;
  %406 = cast(%var_1575, dtype="float32") /* ty=Tensor[(56), float32] */;
  %407 = reshape(%405, newshape=[4, 2, 7]) /* ty=Tensor[(4, 2, 7), float32] */;
  %408 = reshape(%406, newshape=[4, 2, 7]) /* ty=Tensor[(4, 2, 7), float32] */;
  %409 = @func_1194(%407, %408) /* ty=(Tensor[(4, 2, 7), float32], Tensor[(2, 14, 3), float64], Tensor[(4, 2, 7), bool]) */;
  %410 = %409.0;
  %411 = cast(%var_1575, dtype="float32") /* ty=Tensor[(56), float32] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="float32") /* ty=Tensor[(4, 2, 7), float32] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %415 = greater_equal(%403, %404) /* ty=Tensor[(10, 2, 8), bool] */;
  %416 = add(%413, %414) /* ty=Tensor[(4, 2, 7), float32] */;
  (%415, %416)
}

def @func_4690(%var_4665: Tensor[(280), float32], %var_4685: Tensor[(216), float64]) -> (Tensor[(2, 14, 3), float32], Tensor[(2, 14, 3), float64], Tensor[(8, 5, 16), float32], Tensor[(280), float32], Tensor[(3, 12, 5), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(216), float64]) {
  %417 = @func_3939() /* ty=Tensor[(2, 14, 3), uint32] */;
  %418 = cast(%417, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  %419 = @func_4009() /* ty=(Tensor[(10, 2, 8), float32], Tensor[(180), uint64], Tensor[(280), float32], Tensor[(2, 14, 3), int16], Tensor[(2, 14, 3), float64]) */;
  %420 = cast(%var_4665, dtype="float32") /* ty=Tensor[(280), float32] */;
  %421 = reshape(%420, newshape=[70, 4]) /* ty=Tensor[(70, 4), float32] */;
  %422 = @func_1983(%421) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(8, 5, 16), float32], float32, Tensor[(70, 4), float32], Tensor[(180), uint64], Tensor[(216), float64]) */;
  %423 = cast(meta[relay.Constant][24] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %424 = cast(meta[relay.Constant][25] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %425 = cast(meta[relay.Constant][25] /* ty=Tensor[(180), uint64] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %426 = cast(%var_4685, dtype="float64") /* ty=Tensor[(216), float64] */;
  %427 = reshape(%423, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %428 = reshape(%424, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %429 = reshape(%425, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %430 = reshape(%426, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %431 = @func_225(%427, %428, %429, %430) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %432 = acosh(%418) /* ty=Tensor[(2, 14, 3), float32] */;
  %433 = %419.4;
  %434 = %422.1;
  %435 = %431.1;
  (%432, %433, %434, %var_4665, %435, meta[relay.Constant][24] /* ty=Tensor[(36), float64] */, meta[relay.Constant][25] /* ty=Tensor[(180), uint64] */, %var_4685)
}

def @func_4241() -> Tensor[(7, 15, 12), int8] {
  %436 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 1, 12), int8] */, dtype="int8") /* ty=Tensor[(7, 1, 12), int8] */;
  %437 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 15, 12), int8] */, dtype="int8") /* ty=Tensor[(7, 15, 12), int8] */;
  add(%436, %437) /* ty=Tensor[(7, 15, 12), int8] */
}

def @func_4967() -> (Tensor[(2, 14, 3), uint32],) {
  %438 = @func_3939() /* ty=Tensor[(2, 14, 3), uint32] */;
  (%438,)
}

def @func_1020(%var_991: Tensor[(3, 12), float64], %var_992: Tensor[(90, 2), uint64], %var_993: Tensor[(216), float64]) -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), uint64], Tensor[(3, 12, 5), bool], Tensor[(3, 12), float64], Tensor[(90, 2), uint64], Tensor[(216), float64], Tensor[(2, 14, 3), float64]) {
  %439 = @func_888() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %440 = @func_888() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %441 = @func_929() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) */;
  %442 = @func_929() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) */;
  %443 = %442.0;
  %444 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %446 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%443, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %449 = @func_888() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %450 = %449.0;
  %451 = cast(%450, dtype="uint64") /* ty=Tensor[(2, 14, 3), uint64] */;
  %452 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%443, dtype="uint64") /* ty=Tensor[(2, 14, 3), uint64] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %455 = cast(%var_991, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
  %456 = cast(%var_992, dtype="uint64") /* ty=Tensor[(90, 2), uint64] */;
  %457 = cast(%var_992, dtype="uint16") /* ty=Tensor[(90, 2), uint16] */;
  %458 = cast(%var_993, dtype="float64") /* ty=Tensor[(216), float64] */;
  %459 = reshape(%455, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %460 = reshape(%456, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %461 = reshape(%457, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %462 = reshape(%458, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %463 = @func_225(%459, %460, %461, %462) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %464 = %439.0;
  %465 = %440.0;
  %466 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  %467 = %441.1;
  %468 = divide(%447, %448) /* ty=Tensor[(2, 14, 3), float64] */;
  %469 = add(%453, %454) /* ty=Tensor[(2, 14, 3), uint64] */;
  %470 = %463.2;
  %471 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  (%464, %465, %466, %467, %468, %469, %470, %var_991, %var_992, %var_993, %471)
}

def @func_4379() -> Tensor[(2, 14, 3), float64] {
  %472 = @func_3727() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(160), uint8]) */;
  %472.0
}

def @func_3668(%var_3645: Tensor[(10, 2, 8), uint8]) -> (Tensor[(10, 2, 8), float32], Tensor[(2, 14, 3), float64], Tensor[(36), float64], Tensor[(2, 14, 3), float64]) {
  %473 = @func_1297() /* ty=(Tensor[(10, 2, 8), uint8],) */;
  %474 = %473.0;
  %475 = cast(%var_3645, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%474, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %479 = cast(meta[relay.Constant][28] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %480 = reshape(%479, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %481 = @func_1734(%480) /* ty=(Tensor[(3, 12, 5), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int64]) */;
  %482 = floor_divide(%477, %478) /* ty=Tensor[(10, 2, 8), float32] */;
  %483 = %481.3;
  %484 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  (%482, %483, meta[relay.Constant][28] /* ty=Tensor[(36), float64] */, %484)
}

def @func_1362() -> (Tensor[(2, 14, 3), float64],) {
  %485 = @func_888() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %486 = %485.0;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %488 = cosh(%487) /* ty=Tensor[(2, 14, 3), float64] */;
  (%488,)
}

def @func_2160() -> (Tensor[(2, 14, 3), float64],) {
  %489 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %490 = %489.0;
  (%490,)
}

def @func_2914() -> Tensor[(2, 14, 3), float64] {
  @func_525() /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_4884(%var_4876: int8, %var_4877: Tensor[(14, 11, 2), int8]) -> (Tensor[(14, 11, 2), int8],) {
  %491 = cast(%var_4876, dtype="int8") /* ty=int8 */;
  %492 = cast(%var_4877, dtype="int8") /* ty=Tensor[(14, 11, 2), int8] */;
  %493 = left_shift(%491, %492) /* ty=Tensor[(14, 11, 2), int8] */;
  (%493,)
}

def @func_1734(%var_1705: Tensor[(36), float64]) -> (Tensor[(3, 12, 5), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int64]) {
  %494 = cast(%var_1705, dtype="float64") /* ty=Tensor[(36), float64] */;
  %495 = cast(meta[relay.Constant][29] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %496 = cast(meta[relay.Constant][29] /* ty=Tensor[(180), uint64] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %497 = reshape(%494, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %498 = reshape(%495, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %499 = reshape(%496, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), float32] */;
  %500 = @func_761(%497, %498, %499) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(9, 7, 13), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(819), float64], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), float64], Tensor[(36, 6), float64]) */;
  %501 = @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %502 = %501.0;
  %503 = cast(%502, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %504 = erf(%503) /* ty=Tensor[(2, 14, 3), float64] */;
  %505 = cast(%502, dtype="uint8") /* ty=Tensor[(2, 14, 3), uint8] */;
  %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%504, dtype="uint8") /* ty=Tensor[(2, 14, 3), uint8] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %509 = multiply(%507, %508) /* ty=Tensor[(2, 14, 3), uint8] */;
  %510 = cast(%509, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %511 = cast(%502, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
  %512 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%504, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = logical_and(%513, %514) /* ty=Tensor[(2, 14, 3), bool] */;
  %516 = cast(%515, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  %517 = rsqrt(%516) /* ty=Tensor[(2, 14, 3), float32] */;
  %518 = cast(%504, dtype="int64") /* ty=Tensor[(2, 14, 3), int64] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%517, dtype="int64") /* ty=Tensor[(2, 14, 3), int64] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %522 = %500.5;
  %523 = cos(%510) /* ty=Tensor[(2, 14, 3), float64] */;
  %524 = bitwise_or(%520, %521) /* ty=Tensor[(2, 14, 3), int64] */;
  (%522, %var_1705, meta[relay.Constant][29] /* ty=Tensor[(180), uint64] */, %523, %524)
}

def @func_2730() -> (Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), uint8]) {
  %525 = @func_2458() /* ty=(Tensor[(10, 2, 8), int8],) */;
  %526 = %525.0;
  %527 = cast(%526, dtype="float64") /* ty=Tensor[(10, 2, 8), float64] */;
  %528 = asinh(%527) /* ty=Tensor[(10, 2, 8), float64] */;
  %529 = @func_2593() /* ty=Tensor[(10, 2, 8), uint8] */;
  (%528, %529)
}

def @func_4914(%var_4894: Tensor[(12, 7, 1), int8], %var_4895: Tensor[(12, 7, 8), int8]) -> Tensor[(12, 7, 8), bool] {
  %530 = cast(%var_4894, dtype="bool") /* ty=Tensor[(12, 7, 1), bool] */;
  %531 = cast(%var_4895, dtype="bool") /* ty=Tensor[(12, 7, 8), bool] */;
  less_equal(%530, %531) /* ty=Tensor[(12, 7, 8), bool] */
}

def @func_2575(%var_2564: Tensor[(91), bool]) -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float32], Tensor[(728), bool], Tensor[(91), bool], Tensor[(2, 14, 3), int16]) {
  %532 = cast(%var_2564, dtype="bool") /* ty=Tensor[(91), bool] */;
  %533 = reshape(%532, newshape=[91]) /* ty=Tensor[(91), bool] */;
  %534 = @func_2282(%533) /* ty=(Tensor[(13, 7, 8), bool], Tensor[(728), bool], Tensor[(91), int64], Tensor[(2, 14, 3), float32]) */;
  %535 = @func_2357() /* ty=(Tensor[(2, 14, 3), int16],) */;
  %536 = @func_2470() /* ty=Tensor[(2, 14, 3), float64] */;
  %537 = @func_1058() /* ty=Tensor[(2, 14, 3), float32] */;
  %538 = %534.1;
  %539 = %535.0;
  (%536, %537, %538, %var_2564, %539)
}

def @func_1330() -> Tensor[(2, 14, 3), float64] {
  %540 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %540.0
}

def @func_1058() -> Tensor[(2, 14, 3), float32] {
  %541 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  %542 = cast(%541, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  tan(%542) /* ty=Tensor[(2, 14, 3), float32] */
}

def @func_3574() -> (Tensor[(10, 2, 8), uint8],) {
  %543 = @func_2411() /* ty=Tensor[(10, 2, 8), uint8] */;
  (%543,)
}

def @func_4829() -> (Tensor[(10, 2, 8), int8], Tensor[(2, 14, 3), float64]) {
  %544 = @func_3375() /* ty=(Tensor[(10, 2, 8), int8],) */;
  %545 = @func_2383() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %546 = %544.0;
  %547 = %545.0;
  (%546, %547)
}

def @func_888() -> (Tensor[(2, 14, 3), float64],) {
  %548 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  (%548,)
}

def @func_2411() -> Tensor[(10, 2, 8), uint8] {
  %549 = @func_1297() /* ty=(Tensor[(10, 2, 8), uint8],) */;
  %549.0
}

def @func_3634() -> Tensor[(2, 14, 3), float64] {
  %550 = @func_2383() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %550.0
}

def @func_617(%var_550: Tensor[(280, 1), float32]) -> (Tensor[(3, 12, 6), float32], Tensor[(280, 1), float32], Tensor[(180), uint64], Tensor[(108, 2), float64], Tensor[(3, 12, 6), float32], Tensor[(36), float64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int8], Tensor[(2, 14, 3), float64], Tensor[(3, 12, 6), float32], Tensor[(2, 14, 3), uint64]) {
  %551 = cast(5.57814f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %552 = cast(%var_550, dtype="float32") /* ty=Tensor[(280, 1), float32] */;
  %553 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %554 = cast(meta[relay.Constant][31] /* ty=Tensor[(108, 2), float64] */, dtype="float64") /* ty=Tensor[(108, 2), float64] */;
  %555 = reshape(%551, newshape=[]) /* ty=float32 */;
  %556 = reshape(%552, newshape=[5, 7, 8]) /* ty=Tensor[(5, 7, 8), float32] */;
  %557 = reshape(%553, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %558 = reshape(%554, newshape=[1, 216]) /* ty=Tensor[(1, 216), float64] */;
  %559 = @func_430(%555, %556, %557, %558) /* ty=(Tensor[(3, 12, 6), float32], Tensor[(36), float64], Tensor[(5, 7, 8), uint16], Tensor[(1, 216), uint64], Tensor[(8, 5, 16), float32], Tensor[(3, 12, 180), float64], Tensor[(3, 12, 6), float32], Tensor[(3, 12, 6), float32]) */;
  %560 = cast(meta[relay.Constant][32] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %561 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %562 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), uint64] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %563 = cast(meta[relay.Constant][31] /* ty=Tensor[(108, 2), float64] */, dtype="float64") /* ty=Tensor[(108, 2), float64] */;
  %564 = reshape(%560, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %565 = reshape(%561, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %566 = reshape(%562, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %567 = reshape(%563, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %568 = @func_225(%564, %565, %566, %567) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %569 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  %570 = cast(%569, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  %571 = sqrt(%570) /* ty=Tensor[(2, 14, 3), float32] */;
  %572 = cast(%569, dtype="int8") /* ty=Tensor[(2, 14, 3), int8] */;
  %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%571, dtype="int8") /* ty=Tensor[(2, 14, 3), int8] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %576 = cast(meta[relay.Constant][32] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %577 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %578 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), uint64] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %579 = %559.7;
  %580 = cast(%579, dtype="float64") /* ty=Tensor[(3, 12, 6), float64] */;
  %581 = reshape(%576, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %582 = reshape(%577, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %583 = reshape(%578, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %584 = reshape(%580, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %585 = @func_225(%581, %582, %583, %584) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %586 = cast(%571, dtype="uint64") /* ty=Tensor[(2, 14, 3), uint64] */;
  %587 = cast(5.57814f /* ty=float32 */, dtype="uint64") /* ty=uint64 */;
  %588 = %568.3;
  %589 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  %590 = maximum(%574, %575) /* ty=Tensor[(2, 14, 3), int8] */;
  %591 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  %592 = %585.3;
  %593 = bitwise_and(%586, %587) /* ty=Tensor[(2, 14, 3), uint64] */;
  (%579, %var_550, meta[relay.Constant][30] /* ty=Tensor[(180), uint64] */, meta[relay.Constant][31] /* ty=Tensor[(108, 2), float64] */, %588, meta[relay.Constant][32] /* ty=Tensor[(36), float64] */, %589, %590, %591, %592, %593)
}

def @func_3836() -> (Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), int8], Tensor[(2, 14, 3), float64], Tensor[(36), float64], Tensor[(180), uint64]) {
  %594 = @func_2925() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64]) */;
  %595 = @func_2458() /* ty=(Tensor[(10, 2, 8), int8],) */;
  %596 = cast(meta[relay.Constant][33] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %597 = cast(meta[relay.Constant][34] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %598 = reshape(%596, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %599 = reshape(%597, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint64] */;
  %600 = @func_799(%598, %599) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(36, 6), float64], Tensor[(36), float64], Tensor[(180, 1), uint64]) */;
  %601 = %594.1;
  %602 = %595.0;
  %603 = %600.0;
  (%601, %602, %603, meta[relay.Constant][33] /* ty=Tensor[(36), float64] */, meta[relay.Constant][34] /* ty=Tensor[(180), uint64] */)
}

def @func_711(%var_704: Tensor[(9, 7, 13), int32]) -> Tensor[(9, 7, 13), bool] {
  %604 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 7, 13), int32] */, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %605 = shape_of(%var_704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%var_704, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%606, %607) /* ty=Tensor[(9, 7, 13), bool] */
}

def @func_2086() -> (Tensor[(2, 14, 3), uint32],) {
  %608 = @func_1330() /* ty=Tensor[(2, 14, 3), float64] */;
  %609 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 14, 3), float64] */, dtype="uint32") /* ty=Tensor[(2, 14, 3), uint32] */;
  %610 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%608, dtype="uint32") /* ty=Tensor[(2, 14, 3), uint32] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %613 = logical_xor(%611, %612) /* ty=Tensor[(2, 14, 3), uint32] */;
  (%613,)
}

def @func_1297() -> (Tensor[(10, 2, 8), uint8],) {
  %614 = @func_929() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) */;
  %615 = %614.1;
  (%615,)
}

def @func_3299(%var_3281: Tensor[(10, 2, 8), uint8]) -> (Tensor[(10, 2, 8), uint8], Tensor[(2, 14, 3), int16], Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), bool]) {
  %616 = @func_2357() /* ty=(Tensor[(2, 14, 3), int16],) */;
  %617 = @func_3119() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %618 = @func_2411() /* ty=Tensor[(10, 2, 8), uint8] */;
  %619 = cast(%618, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  %620 = sigmoid(%619) /* ty=Tensor[(10, 2, 8), float32] */;
  %621 = cast(%var_3281, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  %622 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%618, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %625 = floor_mod(%623, %624) /* ty=Tensor[(10, 2, 8), float32] */;
  %626 = cast(%625, dtype="bool") /* ty=Tensor[(10, 2, 8), bool] */;
  %627 = shape_of(%620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%620, dtype="bool") /* ty=Tensor[(10, 2, 8), bool] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %630 = @func_2593() /* ty=Tensor[(10, 2, 8), uint8] */;
  %631 = %616.0;
  %632 = %617.0;
  %633 = less_equal(%628, %629) /* ty=Tensor[(10, 2, 8), bool] */;
  (%630, %631, %632, %633)
}

def @func_3033(%var_3007: Tensor[(8, 7, 16), float64]) -> (Tensor[(8, 7, 16), float64],) {
  %634 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(8, 7, 16), float64] */;
  %635 = shape_of(%var_3007, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%var_3007, dtype="float64") /* ty=Tensor[(8, 7, 16), float64] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %638 = maximum(%636, %637) /* ty=Tensor[(8, 7, 16), float64] */;
  %639 = cast(%638, dtype="float64") /* ty=Tensor[(8, 7, 16), float64] */;
  %640 = log2(%639) /* ty=Tensor[(8, 7, 16), float64] */;
  (%640,)
}

def @func_3192() -> (Tensor[(4, 6, 4), float32],) {
  %641 = @func_2047() /* ty=Tensor[(4, 6, 4), bool] */;
  %642 = cast(%641, dtype="float32") /* ty=Tensor[(4, 6, 4), float32] */;
  %643 = asin(%642) /* ty=Tensor[(4, 6, 4), float32] */;
  (%643,)
}

def @func_4559() -> (Tensor[(1512), float64], Tensor[(2, 14, 3), bool], Tensor[(2, 14, 3), float32]) {
  %644 = cast(meta[relay.Constant][38] /* ty=Tensor[(1512), float64] */, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %645 = reshape(%644, newshape=[1512]) /* ty=Tensor[(1512), float64] */;
  %646 = @func_1886(%645) /* ty=(Tensor[(2, 14, 3), float32], Tensor[(14, 12, 9), uint64], Tensor[(1512), float64]) */;
  %647 = %646.0;
  %648 = @func_2497() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %649 = %648.0;
  %650 = cast(%649, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
  %651 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%647, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %654 = cast(%649, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  %655 = acos(%654) /* ty=Tensor[(2, 14, 3), float32] */;
  %656 = cast(%655, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  %657 = greater(%652, %653) /* ty=Tensor[(2, 14, 3), bool] */;
  %658 = log(%656) /* ty=Tensor[(2, 14, 3), float32] */;
  (meta[relay.Constant][38] /* ty=Tensor[(1512), float64] */, %657, %658)
}

def @func_3727() -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(160), uint8]) {
  %659 = cast(meta[relay.Constant][39] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
  %660 = reshape(%659, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), uint8] */;
  %661 = @func_3668(%660) /* ty=(Tensor[(10, 2, 8), float32], Tensor[(2, 14, 3), float64], Tensor[(36), float64], Tensor[(2, 14, 3), float64]) */;
  %662 = @func_2914() /* ty=Tensor[(2, 14, 3), float64] */;
  %663 = %661.3;
  (%662, %663, meta[relay.Constant][39] /* ty=Tensor[(160), uint8] */)
}

def @func_2383() -> (Tensor[(2, 14, 3), float64],) {
  %664 = @func_1482() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %665 = %664.0;
  (%665,)
}

def @func_3310() -> Tensor[(2, 14, 3), int16] {
  %666 = @func_2357() /* ty=(Tensor[(2, 14, 3), int16],) */;
  %666.0
}

def @func_2519(%var_2511: Tensor[(6, 12, 4), float32]) -> (Tensor[(6, 12, 4), uint64],) {
  %667 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 4), float32] */;
  %668 = log10(%667) /* ty=Tensor[(6, 12, 4), float32] */;
  %669 = cast(%var_2511, dtype="uint64") /* ty=Tensor[(6, 12, 4), uint64] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%668, dtype="uint64") /* ty=Tensor[(6, 12, 4), uint64] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %673 = add(%671, %672) /* ty=Tensor[(6, 12, 4), uint64] */;
  (%673,)
}

def @func_1517() -> (Tensor[(2, 14, 3), float64],) {
  %674 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %675 = %674.0;
  (%675,)
}

def @func_2888(%var_2824: Tensor[(8, 10, 6), int32], %var_2825: Tensor[(8, 10, 6), int32], %var_2837: Tensor[(91), bool], %var_2844: Tensor[(91), bool], %var_2854: Tensor[(180), uint64], %var_2857: Tensor[(91), bool]) -> (Tensor[(8, 10, 6), bool], Tensor[(2, 14, 3), float32], Tensor[(2, 14, 3), float64], Tensor[(3, 12), float64], Tensor[(180), uint64], Tensor[(216), float64], Tensor[(91), bool], Tensor[(2, 14, 3), float64], Tensor[(91), bool], Tensor[(10, 2, 8), uint8]) {
  %676 = cast(%var_2825, dtype="bool") /* ty=Tensor[(8, 10, 6), bool] */;
  %677 = shape_of(%var_2824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%var_2824, dtype="bool") /* ty=Tensor[(8, 10, 6), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %680 = cast(%var_2837, dtype="bool") /* ty=Tensor[(91), bool] */;
  %681 = reshape(%680, newshape=[91]) /* ty=Tensor[(91), bool] */;
  %682 = @func_2575(%681) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float32], Tensor[(728), bool], Tensor[(91), bool], Tensor[(2, 14, 3), int16]) */;
  %683 = cast(meta[relay.Constant][41] /* ty=Tensor[(3, 12), float64] */, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
  %684 = cast(%var_2854, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %685 = cast(meta[relay.Constant][42] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %686 = reshape(%683, newshape=[3, 12]) /* ty=Tensor[(3, 12), float64] */;
  %687 = reshape(%684, newshape=[90, 2]) /* ty=Tensor[(90, 2), uint64] */;
  %688 = reshape(%685, newshape=[216]) /* ty=Tensor[(216), float64] */;
  %689 = @func_1020(%686, %687, %688) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), uint64], Tensor[(3, 12, 5), bool], Tensor[(3, 12), float64], Tensor[(90, 2), uint64], Tensor[(216), float64], Tensor[(2, 14, 3), float64]) */;
  %690 = cast(%var_2857, dtype="bool") /* ty=Tensor[(91), bool] */;
  %691 = shape_of(%var_2837, dtype="int32") /* ty=Tensor[(1), int32] */;
  %692 = cast(%var_2837, dtype="bool") /* ty=Tensor[(91), bool] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?), bool] */;
  %694 = @func_2383() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %695 = cast(%var_2844, dtype="float64") /* ty=Tensor[(91), float64] */;
  %696 = cos(%695) /* ty=Tensor[(91), float64] */;
  %697 = cast(%var_2844, dtype="float32") /* ty=Tensor[(91), float32] */;
  %698 = shape_of(%var_2837, dtype="int32") /* ty=Tensor[(1), int32] */;
  %699 = cast(%var_2837, dtype="float32") /* ty=Tensor[(91), float32] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?), float32] */;
  %701 = power(%699, %700) /* ty=Tensor[(91), float32] */;
  %702 = cast(%701, dtype="bool") /* ty=Tensor[(91), bool] */;
  %703 = shape_of(%696, dtype="int32") /* ty=Tensor[(1), int32] */;
  %704 = cast(%696, dtype="bool") /* ty=Tensor[(91), bool] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?), bool] */;
  %706 = @func_1297() /* ty=(Tensor[(10, 2, 8), uint8],) */;
  %707 = greater_equal(%678, %679) /* ty=Tensor[(8, 10, 6), bool] */;
  %708 = %682.1;
  %709 = %689.10;
  %710 = greater(%692, %693) /* ty=Tensor[(91), bool] */;
  %711 = %694.0;
  %712 = logical_or(%704, %705) /* ty=Tensor[(91), bool] */;
  %713 = %706.0;
  (%707, %708, %709, meta[relay.Constant][41] /* ty=Tensor[(3, 12), float64] */, %var_2854, meta[relay.Constant][42] /* ty=Tensor[(216), float64] */, %710, %711, %712, %713)
}

def @func_5028(%var_5015: Tensor[(1512), float64]) -> (Tensor[(2, 14, 3), uint16], Tensor[(2, 14, 3), float32], Tensor[(1512), float64], Tensor[(6, 12, 4), uint64], Tensor[(288), float32], Tensor[(880), float64]) {
  %714 = @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %715 = %714.0;
  %716 = @func_2383() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %717 = %716.0;
  %718 = cast(%717, dtype="uint16") /* ty=Tensor[(2, 14, 3), uint16] */;
  %719 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%715, dtype="uint16") /* ty=Tensor[(2, 14, 3), uint16] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %722 = cast(%var_5015, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %723 = reshape(%722, newshape=[1512]) /* ty=Tensor[(1512), float64] */;
  %724 = @func_1886(%723) /* ty=(Tensor[(2, 14, 3), float32], Tensor[(14, 12, 9), uint64], Tensor[(1512), float64]) */;
  %725 = cast(meta[relay.Constant][43] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %726 = cast(meta[relay.Constant][44] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
  %727 = reshape(%725, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %728 = reshape(%726, newshape=[440, 2]) /* ty=Tensor[(440, 2), float64] */;
  %729 = @func_2673(%727, %728) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(6, 12, 4), uint64], Tensor[(288), float32], Tensor[(16, 11, 5), float64], Tensor[(440, 2), float64]) */;
  %730 = minimum(%720, %721) /* ty=Tensor[(2, 14, 3), uint16] */;
  %731 = %724.0;
  %732 = %729.1;
  (%730, %731, %var_5015, %732, meta[relay.Constant][43] /* ty=Tensor[(288), float32] */, meta[relay.Constant][44] /* ty=Tensor[(880), float64] */)
}

def @func_1482() -> (Tensor[(2, 14, 3), float64],) {
  %733 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %734 = %733.0;
  %735 = cast(%734, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %736 = asinh(%735) /* ty=Tensor[(2, 14, 3), float64] */;
  (%736,)
}

def @func_525() -> Tensor[(2, 14, 3), float64] {
  %737 = cast(-2.95045f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %738 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  power(%737, %738) /* ty=Tensor[(2, 14, 3), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1362() -> (Tensor[(2, 14, 3), float64],) {
  %0 = @func_888() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %3 = cosh(%2) /* ty=Tensor[(2, 14, 3), float64] */;
  (%3,)
}

def @func_4216(%var_4187: Tensor[(3, 9, 6), float32]) -> (Tensor[(2, 14, 3), uint32], Tensor[(2, 14, 3), float64], Tensor[(3, 9, 6), float32]) {
  %4 = @func_2086() /* ty=(Tensor[(2, 14, 3), uint32],) */;
  %5 = @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %6 = cast(%var_4187, dtype="float32") /* ty=Tensor[(3, 9, 6), float32] */;
  %7 = exp(%6) /* ty=Tensor[(3, 9, 6), float32] */;
  %8 = cast(%var_4187, dtype="uint32") /* ty=Tensor[(3, 9, 6), uint32] */;
  %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%7, dtype="uint32") /* ty=Tensor[(3, 9, 6), uint32] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %12 = right_shift(%10, %11) /* ty=Tensor[(3, 9, 6), uint32] */;
  %13 = cast(%12, dtype="float32") /* ty=Tensor[(3, 9, 6), float32] */;
  %14 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%7, dtype="float32") /* ty=Tensor[(3, 9, 6), float32] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %17 = %4.0;
  %18 = %5.0;
  %19 = floor_mod(%15, %16) /* ty=Tensor[(3, 9, 6), float32] */;
  (%17, %18, %19)
}

def @func_436(%var_432: float32, %var_433: Tensor[(5, 7, 8), float32], %var_434: Tensor[(180), uint64], %var_435: Tensor[(1, 216), float64]) -> (Tensor[(3, 12, 6), float32], Tensor[(36), float64], Tensor[(5, 7, 8), uint16], Tensor[(1, 216), uint64], Tensor[(8, 5, 16), float32], Tensor[(3, 12, 180), float64], Tensor[(3, 12, 6), float32], Tensor[(3, 12, 6), float32]) {
  @func_430(%var_432, %var_433, %var_434, %var_435) /* ty=(Tensor[(3, 12, 6), float32], Tensor[(36), float64], Tensor[(5, 7, 8), uint16], Tensor[(1, 216), uint64], Tensor[(8, 5, 16), float32], Tensor[(3, 12, 180), float64], Tensor[(3, 12, 6), float32], Tensor[(3, 12, 6), float32]) */
}

def @func_3312() -> Tensor[(2, 14, 3), int16] {
  @func_3310() /* ty=Tensor[(2, 14, 3), int16] */
}

def @func_4369(%var_4360: Tensor[(14, 6, 9), float64]) -> (Tensor[(14, 6, 9), float64], Tensor[(10, 2, 8), bool], Tensor[(8, 20), uint8], Tensor[(56), float32]) {
  %20 = cast(%var_4360, dtype="float64") /* ty=Tensor[(14, 6, 9), float64] */;
  %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 20), uint8] */, dtype="uint8") /* ty=Tensor[(8, 20), uint8] */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(56), float32] */, dtype="float32") /* ty=Tensor[(56), float32] */;
  %23 = reshape(%21, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), uint8] */;
  %24 = reshape(%22, newshape=[56]) /* ty=Tensor[(56), float32] */;
  %25 = @func_1608(%23, %24) /* ty=(Tensor[(10, 2, 8), bool], Tensor[(4, 2, 7), float32]) */;
  %26 = log10(%20) /* ty=Tensor[(14, 6, 9), float64] */;
  %27 = %25.0;
  (%26, %27, meta[relay.Constant][0] /* ty=Tensor[(8, 20), uint8] */, meta[relay.Constant][1] /* ty=Tensor[(56), float32] */)
}

def @func_2497() -> (Tensor[(2, 14, 3), float64],) {
  %28 = @func_2174() /* ty=Tensor[(2, 14, 3), float64] */;
  (%28,)
}

def @func_1612(%var_1610: Tensor[(10, 2, 8), uint8], %var_1611: Tensor[(56), float32]) -> (Tensor[(10, 2, 8), bool], Tensor[(4, 2, 7), float32]) {
  @func_1608(%var_1610, %var_1611) /* ty=(Tensor[(10, 2, 8), bool], Tensor[(4, 2, 7), float32]) */
}

def @func_2088() -> (Tensor[(2, 14, 3), uint32],) {
  @func_2086() /* ty=(Tensor[(2, 14, 3), uint32],) */
}

def @func_1020(%var_991: Tensor[(3, 12), float64], %var_992: Tensor[(90, 2), uint64], %var_993: Tensor[(216), float64]) -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), uint64], Tensor[(3, 12, 5), bool], Tensor[(3, 12), float64], Tensor[(90, 2), uint64], Tensor[(216), float64], Tensor[(2, 14, 3), float64]) {
  %29 = @func_888() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %30 = @func_888() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %31 = @func_929() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) */;
  %32 = @func_929() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) */;
  %33 = %32.0;
  %34 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  %35 = cast(%34, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %36 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%33, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %39 = @func_888() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %40 = %39.0;
  %41 = cast(%40, dtype="uint64") /* ty=Tensor[(2, 14, 3), uint64] */;
  %42 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%33, dtype="uint64") /* ty=Tensor[(2, 14, 3), uint64] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %45 = cast(%var_991, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
  %46 = cast(%var_992, dtype="uint64") /* ty=Tensor[(90, 2), uint64] */;
  %47 = cast(%var_992, dtype="uint16") /* ty=Tensor[(90, 2), uint16] */;
  %48 = cast(%var_993, dtype="float64") /* ty=Tensor[(216), float64] */;
  %49 = reshape(%45, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %50 = reshape(%46, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %51 = reshape(%47, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %52 = reshape(%48, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %53 = @func_225(%49, %50, %51, %52) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %54 = %29.0;
  %55 = %30.0;
  %56 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  %57 = %31.1;
  %58 = divide(%37, %38) /* ty=Tensor[(2, 14, 3), float64] */;
  %59 = add(%43, %44) /* ty=Tensor[(2, 14, 3), uint64] */;
  %60 = %53.2;
  %61 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  (%54, %55, %56, %57, %58, %59, %60, %var_991, %var_992, %var_993, %61)
}

def @func_1789(%var_1787: Tensor[(14, 12, 9), float64]) -> Tensor[(14, 12, 9), uint64] {
  @func_1786(%var_1787) /* ty=Tensor[(14, 12, 9), uint64] */
}

def @func_526() -> Tensor[(2, 14, 3), float64] {
  %64 = fn () -> Tensor[(2, 14, 3), float64] {
    %62 = cast(-2.95045f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %63 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 14, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
    power(%62, %63) /* ty=Tensor[(2, 14, 3), float64] */
  };
  %64() /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_2413() -> Tensor[(10, 2, 8), uint8] {
  @func_2411() /* ty=Tensor[(10, 2, 8), uint8] */
}

def @func_1786(%var_1758: Tensor[(14, 12, 9), float64]) -> Tensor[(14, 12, 9), uint64] {
  %65 = cast(%var_1758, dtype="float64") /* ty=Tensor[(14, 12, 9), float64] */;
  %66 = atan(%65) /* ty=Tensor[(14, 12, 9), float64] */;
  %67 = cast(%66, dtype="uint64") /* ty=Tensor[(14, 12, 9), uint64] */;
  %68 = shape_of(%var_1758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%var_1758, dtype="uint64") /* ty=Tensor[(14, 12, 9), uint64] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%69, %70) /* ty=Tensor[(14, 12, 9), uint64] */
}

def @func_2359() -> (Tensor[(2, 14, 3), int16],) {
  @func_2357() /* ty=(Tensor[(2, 14, 3), int16],) */
}

def @func_2926() -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64]) {
  %73 = fn () -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64]) {
    %71 = @func_2174() /* ty=Tensor[(2, 14, 3), float64] */;
    %72 = @func_2174() /* ty=Tensor[(2, 14, 3), float64] */;
    (%71, %72)
  };
  %73() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64]) */
}

def @func_3302(%var_3300: Tensor[(10, 2, 8), uint8]) -> (Tensor[(10, 2, 8), uint8], Tensor[(2, 14, 3), int16], Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), bool]) {
  @func_3299(%var_3300) /* ty=(Tensor[(10, 2, 8), uint8], Tensor[(2, 14, 3), int16], Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), bool]) */
}

def @func_2230(%var_2229: Tensor[(1512), float64]) -> (Tensor[(14, 12, 9), uint64], Tensor[(1512), float64], Tensor[(2, 14, 3), float32], Tensor[(16, 11, 5), float64], Tensor[(4, 220), float64]) {
  %86 = fn (%var_2204: Tensor[(1512), float64]) -> (Tensor[(14, 12, 9), uint64], Tensor[(1512), float64], Tensor[(2, 14, 3), float32], Tensor[(16, 11, 5), float64], Tensor[(4, 220), float64]) {
    %74 = cast(%var_2204, dtype="float64") /* ty=Tensor[(1512), float64] */;
    %75 = reshape(%74, newshape=[1512]) /* ty=Tensor[(1512), float64] */;
    %76 = @func_1886(%75) /* ty=(Tensor[(2, 14, 3), float32], Tensor[(14, 12, 9), uint64], Tensor[(1512), float64]) */;
    %77 = @func_888() /* ty=(Tensor[(2, 14, 3), float64],) */;
    %78 = %77.0;
    %79 = cast(%78, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
    %80 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 220), float64] */, dtype="float64") /* ty=Tensor[(4, 220), float64] */;
    %81 = reshape(%80, newshape=[16, 11, 5]) /* ty=Tensor[(16, 11, 5), float64] */;
    %82 = @func_1149(%81) /* ty=(Tensor[(16, 11, 5), float64], Tensor[(16, 11, 5), float32]) */;
    %83 = %76.1;
    %84 = sinh(%79) /* ty=Tensor[(2, 14, 3), float32] */;
    %85 = %82.0;
    (%83, %var_2204, %84, %85, meta[relay.Constant][3] /* ty=Tensor[(4, 220), float64] */)
  };
  %86(%var_2229) /* ty=(Tensor[(14, 12, 9), uint64], Tensor[(1512), float64], Tensor[(2, 14, 3), float32], Tensor[(16, 11, 5), float64], Tensor[(4, 220), float64]) */
}

def @func_3415() -> Tensor[(2, 14, 3), float64] {
  @func_3413() /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_1060() -> Tensor[(2, 14, 3), float32] {
  @func_1058() /* ty=Tensor[(2, 14, 3), float32] */
}

def @func_4372(%var_4370: Tensor[(14, 6, 9), float64]) -> (Tensor[(14, 6, 9), float64], Tensor[(10, 2, 8), bool], Tensor[(8, 20), uint8], Tensor[(56), float32]) {
  @func_4369(%var_4370) /* ty=(Tensor[(14, 6, 9), float64], Tensor[(10, 2, 8), bool], Tensor[(8, 20), uint8], Tensor[(56), float32]) */
}

def @func_3310() -> Tensor[(2, 14, 3), int16] {
  %87 = @func_2357() /* ty=(Tensor[(2, 14, 3), int16],) */;
  %87.0
}

def @func_1364() -> (Tensor[(2, 14, 3), float64],) {
  @func_1362() /* ty=(Tensor[(2, 14, 3), float64],) */
}

def @func_3192() -> (Tensor[(4, 6, 4), float32],) {
  %88 = @func_2047() /* ty=Tensor[(4, 6, 4), bool] */;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(4, 6, 4), float32] */;
  %90 = asin(%89) /* ty=Tensor[(4, 6, 4), float32] */;
  (%90,)
}

def @func_4831() -> (Tensor[(10, 2, 8), int8], Tensor[(2, 14, 3), float64]) {
  @func_4829() /* ty=(Tensor[(10, 2, 8), int8], Tensor[(2, 14, 3), float64]) */
}

def @func_761(%var_728: Tensor[(36), float64], %var_729: Tensor[(180), uint64], %var_741: Tensor[(3, 12, 5), float32]) -> (Tensor[(2, 14, 3), float64], Tensor[(9, 7, 13), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(819), float64], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), float64], Tensor[(36, 6), float64]) {
  %91 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %92 = cast(meta[relay.Constant][4] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
  %93 = reshape(%92, newshape=[9, 7, 13]) /* ty=Tensor[(9, 7, 13), int32] */;
  %94 = cast(meta[relay.Constant][4] /* ty=Tensor[(819), int32] */, dtype="float64") /* ty=Tensor[(819), float64] */;
  %95 = cast(%var_728, dtype="float64") /* ty=Tensor[(36), float64] */;
  %96 = cast(%var_729, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %97 = cast(%var_729, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %98 = cast(meta[relay.Constant][5] /* ty=Tensor[(36, 6), float64] */, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
  %99 = reshape(%95, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %100 = reshape(%96, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %101 = reshape(%97, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %102 = reshape(%98, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %103 = @func_225(%99, %100, %101, %102) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %104 = cast(%var_728, dtype="float64") /* ty=Tensor[(36), float64] */;
  %105 = cast(%var_729, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %106 = cast(%var_729, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %107 = cast(meta[relay.Constant][5] /* ty=Tensor[(36, 6), float64] */, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
  %108 = reshape(%104, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %109 = reshape(%105, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %110 = reshape(%106, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %111 = reshape(%107, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %112 = @func_225(%108, %109, %110, %111) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %113 = %112.0;
  %114 = cast(%113, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  %115 = cast(%var_741, dtype="float64") /* ty=Tensor[(3, 12, 5), float64] */;
  %116 = cast(meta[relay.Constant][5] /* ty=Tensor[(36, 6), float64] */, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
  %117 = %91.0;
  %118 = @func_711(%93) /* ty=Tensor[(9, 7, 13), bool] */;
  %119 = atanh(%94) /* ty=Tensor[(819), float64] */;
  %120 = %103.1;
  %121 = power(%114, %115) /* ty=Tensor[(3, 12, 5), float64] */;
  %122 = tan(%116) /* ty=Tensor[(36, 6), float64] */;
  (%117, %118, %var_728, %var_729, %119, %120, %121, %122)
}

def @func_802(%var_800: Tensor[(36), float64], %var_801: Tensor[(180, 1), uint64]) -> (Tensor[(2, 14, 3), float64], Tensor[(36, 6), float64], Tensor[(36), float64], Tensor[(180, 1), uint64]) {
  %133 = fn (%var_789: Tensor[(36), float64], %var_790: Tensor[(180, 1), uint64]) -> (Tensor[(2, 14, 3), float64], Tensor[(36, 6), float64], Tensor[(36), float64], Tensor[(180, 1), uint64]) {
    %123 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
    %124 = cast(%var_789, dtype="float64") /* ty=Tensor[(36), float64] */;
    %125 = cast(%var_790, dtype="uint64") /* ty=Tensor[(180, 1), uint64] */;
    %126 = cast(%var_790, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
    %127 = reshape(%124, newshape=[36]) /* ty=Tensor[(36), float64] */;
    %128 = reshape(%125, newshape=[180]) /* ty=Tensor[(180), uint64] */;
    %129 = reshape(%126, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), float32] */;
    %130 = @func_761(%127, %128, %129) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(9, 7, 13), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(819), float64], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), float64], Tensor[(36, 6), float64]) */;
    %131 = %123.0;
    %132 = %130.7;
    (%131, %132, %var_789, %var_790)
  };
  %133(%var_800, %var_801) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(36, 6), float64], Tensor[(36), float64], Tensor[(180, 1), uint64]) */
}

def @func_4829() -> (Tensor[(10, 2, 8), int8], Tensor[(2, 14, 3), float64]) {
  %134 = @func_3375() /* ty=(Tensor[(10, 2, 8), int8],) */;
  %135 = @func_2383() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %136 = %134.0;
  %137 = %135.0;
  (%136, %137)
}

def @func_1517() -> (Tensor[(2, 14, 3), float64],) {
  %138 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %139 = %138.0;
  (%139,)
}

def @func_666() -> (Tensor[(2, 14, 3), float64],) {
  %141 = fn () -> (Tensor[(2, 14, 3), float64],) {
    %140 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
    (%140,)
  };
  %141() /* ty=(Tensor[(2, 14, 3), float64],) */
}

def @func_3376() -> (Tensor[(10, 2, 8), int8],) {
  %144 = fn () -> (Tensor[(10, 2, 8), int8],) {
    %142 = @func_2458() /* ty=(Tensor[(10, 2, 8), int8],) */;
    %143 = %142.0;
    (%143,)
  };
  %144() /* ty=(Tensor[(10, 2, 8), int8],) */
}

def @func_2730() -> (Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), uint8]) {
  %145 = @func_2458() /* ty=(Tensor[(10, 2, 8), int8],) */;
  %146 = %145.0;
  %147 = cast(%146, dtype="float64") /* ty=Tensor[(10, 2, 8), float64] */;
  %148 = asinh(%147) /* ty=Tensor[(10, 2, 8), float64] */;
  %149 = @func_2593() /* ty=Tensor[(10, 2, 8), uint8] */;
  (%148, %149)
}

def @func_4120(%var_4118: Tensor[(9, 2, 11), int64], %var_4119: Tensor[(3, 12), float64]) -> (Tensor[(9, 2, 11), bool], Tensor[(36), float64], Tensor[(3, 12), float64], Tensor[(9, 2, 11), float32]) {
  %161 = fn (%var_4087: Tensor[(9, 2, 11), int64], %var_4094: Tensor[(3, 12), float64]) -> (Tensor[(9, 2, 11), bool], Tensor[(36), float64], Tensor[(3, 12), float64], Tensor[(9, 2, 11), float32]) {
    %150 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 2, 11), int64] */, dtype="bool") /* ty=Tensor[(9, 2, 11), bool] */;
    %151 = shape_of(%var_4087, dtype="int32") /* ty=Tensor[(3), int32] */;
    %152 = cast(%var_4087, dtype="bool") /* ty=Tensor[(9, 2, 11), bool] */;
    %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %154 = cast(%var_4094, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
    %155 = reshape(%154, newshape=[36]) /* ty=Tensor[(36), float64] */;
    %156 = @func_1734(%155) /* ty=(Tensor[(3, 12, 5), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int64]) */;
    %157 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 2, 11), int64] */, dtype="float32") /* ty=Tensor[(9, 2, 11), float32] */;
    %158 = not_equal(%152, %153) /* ty=Tensor[(9, 2, 11), bool] */;
    %159 = %156.1;
    %160 = rsqrt(%157) /* ty=Tensor[(9, 2, 11), float32] */;
    (%158, %159, %var_4094, %160)
  };
  %161(%var_4118, %var_4119) /* ty=(Tensor[(9, 2, 11), bool], Tensor[(36), float64], Tensor[(3, 12), float64], Tensor[(9, 2, 11), float32]) */
}

def @func_3119() -> (Tensor[(2, 14, 3), float64],) {
  %162 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %163 = %162.0;
  (%163,)
}

def @func_2499() -> (Tensor[(2, 14, 3), float64],) {
  @func_2497() /* ty=(Tensor[(2, 14, 3), float64],) */
}

def @func_2575(%var_2564: Tensor[(91), bool]) -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float32], Tensor[(728), bool], Tensor[(91), bool], Tensor[(2, 14, 3), int16]) {
  %164 = cast(%var_2564, dtype="bool") /* ty=Tensor[(91), bool] */;
  %165 = reshape(%164, newshape=[91]) /* ty=Tensor[(91), bool] */;
  %166 = @func_2282(%165) /* ty=(Tensor[(13, 7, 8), bool], Tensor[(728), bool], Tensor[(91), int64], Tensor[(2, 14, 3), float32]) */;
  %167 = @func_2357() /* ty=(Tensor[(2, 14, 3), int16],) */;
  %168 = @func_2470() /* ty=Tensor[(2, 14, 3), float64] */;
  %169 = @func_1058() /* ty=Tensor[(2, 14, 3), float32] */;
  %170 = %166.1;
  %171 = %167.0;
  (%168, %169, %170, %var_2564, %171)
}

def @func_1331() -> Tensor[(2, 14, 3), float64] {
  %173 = fn () -> Tensor[(2, 14, 3), float64] {
    %172 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
    %172.0
  };
  %173() /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_3772() -> (Tensor[(2, 14, 3), int16], Tensor[(2, 14, 3), float64]) {
  @func_3770() /* ty=(Tensor[(2, 14, 3), int16], Tensor[(2, 14, 3), float64]) */
}

def @func_3670(%var_3669: Tensor[(10, 2, 8), uint8]) -> (Tensor[(10, 2, 8), float32], Tensor[(2, 14, 3), float64], Tensor[(36), float64], Tensor[(2, 14, 3), float64]) {
  %186 = fn (%var_3645: Tensor[(10, 2, 8), uint8]) -> (Tensor[(10, 2, 8), float32], Tensor[(2, 14, 3), float64], Tensor[(36), float64], Tensor[(2, 14, 3), float64]) {
    %174 = @func_1297() /* ty=(Tensor[(10, 2, 8), uint8],) */;
    %175 = %174.0;
    %176 = cast(%var_3645, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
    %177 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
    %178 = cast(%175, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
    %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %180 = cast(meta[relay.Constant][7] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
    %181 = reshape(%180, newshape=[36]) /* ty=Tensor[(36), float64] */;
    %182 = @func_1734(%181) /* ty=(Tensor[(3, 12, 5), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int64]) */;
    %183 = floor_divide(%178, %179) /* ty=Tensor[(10, 2, 8), float32] */;
    %184 = %182.3;
    %185 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
    (%183, %184, meta[relay.Constant][7] /* ty=Tensor[(36), float64] */, %185)
  };
  %186(%var_3669) /* ty=(Tensor[(10, 2, 8), float32], Tensor[(2, 14, 3), float64], Tensor[(36), float64], Tensor[(2, 14, 3), float64]) */
}

def @func_2049() -> Tensor[(4, 6, 4), bool] {
  @func_2047() /* ty=Tensor[(4, 6, 4), bool] */
}

def @func_1025(%var_1022: Tensor[(3, 12), float64], %var_1023: Tensor[(90, 2), uint64], %var_1024: Tensor[(216), float64]) -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), uint64], Tensor[(3, 12, 5), bool], Tensor[(3, 12), float64], Tensor[(90, 2), uint64], Tensor[(216), float64], Tensor[(2, 14, 3), float64]) {
  @func_1020(%var_1022, %var_1023, %var_1024) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), uint64], Tensor[(3, 12, 5), bool], Tensor[(3, 12), float64], Tensor[(90, 2), uint64], Tensor[(216), float64], Tensor[(2, 14, 3), float64]) */
}

def @func_2795(%var_2790: Tensor[(2, 15, 10), float32], %var_2791: Tensor[(2, 15, 10), float32], %var_2792: Tensor[(288), float32], %var_2793: Tensor[(880), float64], %var_2794: Tensor[(280), float32]) -> (Tensor[(2, 15, 10), float32], Tensor[(16, 11, 5), float64], Tensor[(288), float32], Tensor[(880), float64], float32, Tensor[(280), float32]) {
  @func_2788(%var_2790, %var_2791, %var_2792, %var_2793, %var_2794) /* ty=(Tensor[(2, 15, 10), float32], Tensor[(16, 11, 5), float64], Tensor[(288), float32], Tensor[(880), float64], float32, Tensor[(280), float32]) */
}

def @func_1736(%var_1735: Tensor[(36), float64]) -> (Tensor[(3, 12, 5), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int64]) {
  %218 = fn (%var_1705: Tensor[(36), float64]) -> (Tensor[(3, 12, 5), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int64]) {
    %187 = cast(%var_1705, dtype="float64") /* ty=Tensor[(36), float64] */;
    %188 = cast(meta[relay.Constant][8] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %189 = cast(meta[relay.Constant][8] /* ty=Tensor[(180), uint64] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %190 = reshape(%187, newshape=[36]) /* ty=Tensor[(36), float64] */;
    %191 = reshape(%188, newshape=[180]) /* ty=Tensor[(180), uint64] */;
    %192 = reshape(%189, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), float32] */;
    %193 = @func_761(%190, %191, %192) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(9, 7, 13), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(819), float64], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), float64], Tensor[(36, 6), float64]) */;
    %194 = @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */;
    %195 = %194.0;
    %196 = cast(%195, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
    %197 = erf(%196) /* ty=Tensor[(2, 14, 3), float64] */;
    %198 = cast(%195, dtype="uint8") /* ty=Tensor[(2, 14, 3), uint8] */;
    %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
    %200 = cast(%197, dtype="uint8") /* ty=Tensor[(2, 14, 3), uint8] */;
    %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %202 = multiply(%200, %201) /* ty=Tensor[(2, 14, 3), uint8] */;
    %203 = cast(%202, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
    %204 = cast(%195, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
    %205 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
    %206 = cast(%197, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
    %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %208 = logical_and(%206, %207) /* ty=Tensor[(2, 14, 3), bool] */;
    %209 = cast(%208, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
    %210 = rsqrt(%209) /* ty=Tensor[(2, 14, 3), float32] */;
    %211 = cast(%197, dtype="int64") /* ty=Tensor[(2, 14, 3), int64] */;
    %212 = shape_of(%210, dtype="int32") /* ty=Tensor[(3), int32] */;
    %213 = cast(%210, dtype="int64") /* ty=Tensor[(2, 14, 3), int64] */;
    %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %215 = %193.5;
    %216 = cos(%203) /* ty=Tensor[(2, 14, 3), float64] */;
    %217 = bitwise_or(%213, %214) /* ty=Tensor[(2, 14, 3), int64] */;
    (%215, %var_1705, meta[relay.Constant][8] /* ty=Tensor[(180), uint64] */, %216, %217)
  };
  %218(%var_1735) /* ty=(Tensor[(3, 12, 5), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int64]) */
}

def @func_4628() -> (Tensor[(2, 14, 3), float64], Tensor[(8, 7, 16), float64], Tensor[(2, 14, 3), float64], Tensor[(896), float64], Tensor[(10, 2, 8), uint8]) {
  %231 = fn () -> (Tensor[(2, 14, 3), float64], Tensor[(8, 7, 16), float64], Tensor[(2, 14, 3), float64], Tensor[(896), float64], Tensor[(10, 2, 8), uint8]) {
    %219 = cast(meta[relay.Constant][9] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %220 = reshape(%219, newshape=[8, 7, 16]) /* ty=Tensor[(8, 7, 16), float64] */;
    %221 = @func_3033(%220) /* ty=(Tensor[(8, 7, 16), float64],) */;
    %222 = @func_4143() /* ty=(Tensor[(2, 14, 3), float64],) */;
    %223 = cast(meta[relay.Constant][9] /* ty=Tensor[(896), float64] */, dtype="float32") /* ty=Tensor[(896), float32] */;
    %224 = cos(%223) /* ty=Tensor[(896), float32] */;
    %225 = cast(%224, dtype="float64") /* ty=Tensor[(896), float64] */;
    %226 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
    %227 = %221.0;
    %228 = %222.0;
    %229 = acosh(%225) /* ty=Tensor[(896), float64] */;
    %230 = @func_2411() /* ty=Tensor[(10, 2, 8), uint8] */;
    (%226, %227, %228, %229, %230)
  };
  %231() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(8, 7, 16), float64], Tensor[(2, 14, 3), float64], Tensor[(896), float64], Tensor[(10, 2, 8), uint8]) */
}

def @func_4693(%var_4691: Tensor[(280), float32], %var_4692: Tensor[(216), float64]) -> (Tensor[(2, 14, 3), float32], Tensor[(2, 14, 3), float64], Tensor[(8, 5, 16), float32], Tensor[(280), float32], Tensor[(3, 12, 5), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(216), float64]) {
  %251 = fn (%var_4665: Tensor[(280), float32], %var_4685: Tensor[(216), float64]) -> (Tensor[(2, 14, 3), float32], Tensor[(2, 14, 3), float64], Tensor[(8, 5, 16), float32], Tensor[(280), float32], Tensor[(3, 12, 5), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(216), float64]) {
    %232 = @func_3939() /* ty=Tensor[(2, 14, 3), uint32] */;
    %233 = cast(%232, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
    %234 = @func_4009() /* ty=(Tensor[(10, 2, 8), float32], Tensor[(180), uint64], Tensor[(280), float32], Tensor[(2, 14, 3), int16], Tensor[(2, 14, 3), float64]) */;
    %235 = cast(%var_4665, dtype="float32") /* ty=Tensor[(280), float32] */;
    %236 = reshape(%235, newshape=[70, 4]) /* ty=Tensor[(70, 4), float32] */;
    %237 = @func_1983(%236) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(8, 5, 16), float32], float32, Tensor[(70, 4), float32], Tensor[(180), uint64], Tensor[(216), float64]) */;
    %238 = cast(meta[relay.Constant][10] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
    %239 = cast(meta[relay.Constant][11] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %240 = cast(meta[relay.Constant][11] /* ty=Tensor[(180), uint64] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %241 = cast(%var_4685, dtype="float64") /* ty=Tensor[(216), float64] */;
    %242 = reshape(%238, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
    %243 = reshape(%239, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
    %244 = reshape(%240, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
    %245 = reshape(%241, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
    %246 = @func_225(%242, %243, %244, %245) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
    %247 = acosh(%233) /* ty=Tensor[(2, 14, 3), float32] */;
    %248 = %234.4;
    %249 = %237.1;
    %250 = %246.1;
    (%247, %248, %249, %var_4665, %250, meta[relay.Constant][10] /* ty=Tensor[(36), float64] */, meta[relay.Constant][11] /* ty=Tensor[(180), uint64] */, %var_4685)
  };
  %251(%var_4691, %var_4692) /* ty=(Tensor[(2, 14, 3), float32], Tensor[(2, 14, 3), float64], Tensor[(8, 5, 16), float32], Tensor[(280), float32], Tensor[(3, 12, 5), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(216), float64]) */
}

def @func_929() -> (Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) {
  %252 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 2, 8), uint8] */, dtype="uint8") /* ty=Tensor[(10, 2, 8), uint8] */;
  %253 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(10, 2, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 2, 8), uint8] */, dtype="uint8") /* ty=Tensor[(10, 2, 8), uint8] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %256 = logical_xor(%254, %255) /* ty=Tensor[(10, 2, 8), uint8] */;
  %257 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 2, 8), uint8] */, dtype="uint8") /* ty=Tensor[(10, 2, 8), uint8] */;
  %258 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%256, dtype="uint8") /* ty=Tensor[(10, 2, 8), uint8] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %261 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  %262 = bitwise_xor(%259, %260) /* ty=Tensor[(10, 2, 8), uint8] */;
  (%261, %262)
}

def @func_1152(%var_1150: Tensor[(16, 11, 5), float64]) -> (Tensor[(16, 11, 5), float64], Tensor[(16, 11, 5), float32]) {
  @func_1149(%var_1150) /* ty=(Tensor[(16, 11, 5), float64], Tensor[(16, 11, 5), float32]) */
}

def @func_1149(%var_1133: Tensor[(16, 11, 5), float64]) -> (Tensor[(16, 11, 5), float64], Tensor[(16, 11, 5), float32]) {
  %263 = cast(%var_1133, dtype="float64") /* ty=Tensor[(16, 11, 5), float64] */;
  %264 = asin(%263) /* ty=Tensor[(16, 11, 5), float64] */;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(16, 11, 5), float64] */;
  %266 = cast(%var_1133, dtype="float32") /* ty=Tensor[(16, 11, 5), float32] */;
  %267 = log2(%265) /* ty=Tensor[(16, 11, 5), float64] */;
  %268 = erf(%266) /* ty=Tensor[(16, 11, 5), float32] */;
  (%267, %268)
}

def @func_3353() -> Tensor[(2, 14, 3), float64] {
  %270 = fn () -> Tensor[(2, 14, 3), float64] {
    %269 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
    %269.0
  };
  %270() /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_3413() -> Tensor[(2, 14, 3), float64] {
  @func_2470() /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_3716(%var_3715: Tensor[(2, 14, 3), float64]) -> (Tensor[(2, 14, 3), bool], Tensor[(10, 2, 8), uint8], Tensor[(4, 6, 4), float32]) {
  %282 = fn (%var_3679: Tensor[(2, 14, 3), float64]) -> (Tensor[(2, 14, 3), bool], Tensor[(10, 2, 8), uint8], Tensor[(4, 6, 4), float32]) {
    %271 = @func_1362() /* ty=(Tensor[(2, 14, 3), float64],) */;
    %272 = %271.0;
    %273 = cast(%var_3679, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
    %274 = shape_of(%272, dtype="int32") /* ty=Tensor[(3), int32] */;
    %275 = cast(%272, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
    %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %277 = @func_1297() /* ty=(Tensor[(10, 2, 8), uint8],) */;
    %278 = @func_3192() /* ty=(Tensor[(4, 6, 4), float32],) */;
    %279 = not_equal(%275, %276) /* ty=Tensor[(2, 14, 3), bool] */;
    %280 = %277.0;
    %281 = %278.0;
    (%279, %280, %281)
  };
  %282(%var_3715) /* ty=(Tensor[(2, 14, 3), bool], Tensor[(10, 2, 8), uint8], Tensor[(4, 6, 4), float32]) */
}

def @func_1256() -> (Tensor[(2, 14, 3), float64], Tensor[(16, 11, 5), float64], Tensor[(880), float32]) {
  %291 = fn () -> (Tensor[(2, 14, 3), float64], Tensor[(16, 11, 5), float64], Tensor[(880), float32]) {
    %283 = @func_888() /* ty=(Tensor[(2, 14, 3), float64],) */;
    %284 = cast(meta[relay.Constant][14] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
    %285 = reshape(%284, newshape=[16, 11, 5]) /* ty=Tensor[(16, 11, 5), float64] */;
    %286 = @func_1149(%285) /* ty=(Tensor[(16, 11, 5), float64], Tensor[(16, 11, 5), float32]) */;
    %287 = cast(meta[relay.Constant][14] /* ty=Tensor[(880), float64] */, dtype="float32") /* ty=Tensor[(880), float32] */;
    %288 = %283.0;
    %289 = %286.0;
    %290 = log(%287) /* ty=Tensor[(880), float32] */;
    (%288, %289, %290)
  };
  %291() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(16, 11, 5), float64], Tensor[(880), float32]) */
}

def @func_430(%var_354: float32, %var_355: Tensor[(5, 7, 8), float32], %var_362: Tensor[(180), uint64], %var_363: Tensor[(1, 216), float64]) -> (Tensor[(3, 12, 6), float32], Tensor[(36), float64], Tensor[(5, 7, 8), uint16], Tensor[(1, 216), uint64], Tensor[(8, 5, 16), float32], Tensor[(3, 12, 180), float64], Tensor[(3, 12, 6), float32], Tensor[(3, 12, 6), float32]) {
  %292 = cast(meta[relay.Constant][15] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %293 = cast(%var_362, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %294 = cast(%var_362, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %295 = cast(%var_363, dtype="float64") /* ty=Tensor[(1, 216), float64] */;
  %296 = reshape(%292, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %297 = reshape(%293, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %298 = reshape(%294, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %299 = reshape(%295, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %300 = @func_225(%296, %297, %298, %299) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %301 = cast(%var_354, dtype="float32") /* ty=float32 */;
  %302 = cast(%var_355, dtype="float32") /* ty=Tensor[(5, 7, 8), float32] */;
  %303 = floor_mod(%301, %302) /* ty=Tensor[(5, 7, 8), float32] */;
  %304 = cast(%303, dtype="uint16") /* ty=Tensor[(5, 7, 8), uint16] */;
  %305 = cast(%var_354, dtype="uint16") /* ty=uint16 */;
  %306 = cast(%var_363, dtype="uint64") /* ty=Tensor[(1, 216), uint64] */;
  %307 = cast(%var_354, dtype="uint64") /* ty=uint64 */;
  %308 = cast(%var_354, dtype="float32") /* ty=float32 */;
  %309 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 5, 16), float32] */, dtype="float32") /* ty=Tensor[(8, 5, 16), float32] */;
  %310 = cast(meta[relay.Constant][15] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %311 = cast(%var_362, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %312 = cast(%var_362, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %313 = %300.3;
  %314 = cast(%313, dtype="float64") /* ty=Tensor[(3, 12, 6), float64] */;
  %315 = reshape(%310, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %316 = reshape(%311, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %317 = reshape(%312, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %318 = reshape(%314, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %319 = @func_225(%315, %316, %317, %318) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %320 = %319.0;
  %321 = cast(%320, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  %322 = cast(%var_362, dtype="float64") /* ty=Tensor[(180), float64] */;
  %323 = cast(meta[relay.Constant][15] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %324 = cast(%var_362, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %325 = cast(%var_362, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %326 = cast(%320, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
  %327 = cast(%var_362, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %328 = cast(%var_362, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %329 = cast(%313, dtype="float64") /* ty=Tensor[(3, 12, 6), float64] */;
  %330 = reshape(%326, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %331 = reshape(%327, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %332 = reshape(%328, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %333 = reshape(%329, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %334 = @func_225(%330, %331, %332, %333) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %335 = %334.3;
  %336 = cast(%335, dtype="float64") /* ty=Tensor[(3, 12, 6), float64] */;
  %337 = reshape(%323, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
  %338 = reshape(%324, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
  %339 = reshape(%325, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
  %340 = reshape(%336, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
  %341 = @func_225(%337, %338, %339, %340) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
  %342 = cast(%335, dtype="float32") /* ty=Tensor[(3, 12, 6), float32] */;
  %343 = left_shift(%304, %305) /* ty=Tensor[(5, 7, 8), uint16] */;
  %344 = bitwise_or(%306, %307) /* ty=Tensor[(1, 216), uint64] */;
  %345 = multiply(%308, %309) /* ty=Tensor[(8, 5, 16), float32] */;
  %346 = divide(%321, %322) /* ty=Tensor[(3, 12, 180), float64] */;
  %347 = %341.3;
  %348 = atan(%342) /* ty=Tensor[(3, 12, 6), float32] */;
  (%313, meta[relay.Constant][15] /* ty=Tensor[(36), float64] */, %343, %344, %345, %346, %347, %348)
}

def @func_3636() -> Tensor[(2, 14, 3), float64] {
  @func_3634() /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_4914(%var_4894: Tensor[(12, 7, 1), int8], %var_4895: Tensor[(12, 7, 8), int8]) -> Tensor[(12, 7, 8), bool] {
  %349 = cast(%var_4894, dtype="bool") /* ty=Tensor[(12, 7, 1), bool] */;
  %350 = cast(%var_4895, dtype="bool") /* ty=Tensor[(12, 7, 8), bool] */;
  less_equal(%349, %350) /* ty=Tensor[(12, 7, 8), bool] */
}

def @func_4887(%var_4885: int8, %var_4886: Tensor[(14, 11, 2), int8]) -> (Tensor[(14, 11, 2), int8],) {
  %354 = fn (%var_4876: int8, %var_4877: Tensor[(14, 11, 2), int8]) -> (Tensor[(14, 11, 2), int8],) {
    %351 = cast(%var_4876, dtype="int8") /* ty=int8 */;
    %352 = cast(%var_4877, dtype="int8") /* ty=Tensor[(14, 11, 2), int8] */;
    %353 = left_shift(%351, %352) /* ty=Tensor[(14, 11, 2), int8] */;
    (%353,)
  };
  %354(%var_4885, %var_4886) /* ty=(Tensor[(14, 11, 2), int8],) */
}

def @func_3033(%var_3007: Tensor[(8, 7, 16), float64]) -> (Tensor[(8, 7, 16), float64],) {
  %355 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(8, 7, 16), float64] */;
  %356 = shape_of(%var_3007, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%var_3007, dtype="float64") /* ty=Tensor[(8, 7, 16), float64] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %359 = maximum(%357, %358) /* ty=Tensor[(8, 7, 16), float64] */;
  %360 = cast(%359, dtype="float64") /* ty=Tensor[(8, 7, 16), float64] */;
  %361 = log2(%360) /* ty=Tensor[(8, 7, 16), float64] */;
  (%361,)
}

def @func_4010() -> (Tensor[(10, 2, 8), float32], Tensor[(180), uint64], Tensor[(280), float32], Tensor[(2, 14, 3), int16], Tensor[(2, 14, 3), float64]) {
  %373 = fn () -> (Tensor[(10, 2, 8), float32], Tensor[(180), uint64], Tensor[(280), float32], Tensor[(2, 14, 3), int16], Tensor[(2, 14, 3), float64]) {
    %362 = @func_2730() /* ty=(Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), uint8]) */;
    %363 = %362.1;
    %364 = cast(%363, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
    %365 = cast(meta[relay.Constant][18] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
    %366 = reshape(%365, newshape=[280, 1]) /* ty=Tensor[(280, 1), float32] */;
    %367 = @func_617(%366) /* ty=(Tensor[(3, 12, 6), float32], Tensor[(280, 1), float32], Tensor[(180), uint64], Tensor[(108, 2), float64], Tensor[(3, 12, 6), float32], Tensor[(36), float64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int8], Tensor[(2, 14, 3), float64], Tensor[(3, 12, 6), float32], Tensor[(2, 14, 3), uint64]) */;
    %368 = @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */;
    %369 = exp(%364) /* ty=Tensor[(10, 2, 8), float32] */;
    %370 = %367.2;
    %371 = @func_3310() /* ty=Tensor[(2, 14, 3), int16] */;
    %372 = %368.0;
    (%369, %370, meta[relay.Constant][18] /* ty=Tensor[(280), float32] */, %371, %372)
  };
  %373() /* ty=(Tensor[(10, 2, 8), float32], Tensor[(180), uint64], Tensor[(280), float32], Tensor[(2, 14, 3), int16], Tensor[(2, 14, 3), float64]) */
}

def @func_1194(%var_1168: Tensor[(4, 2, 7), float32], %var_1179: Tensor[(4, 2, 7), float32]) -> (Tensor[(4, 2, 7), float32], Tensor[(2, 14, 3), float64], Tensor[(4, 2, 7), bool]) {
  %374 = cast(%var_1168, dtype="float32") /* ty=Tensor[(4, 2, 7), float32] */;
  %375 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %376 = cast(%var_1179, dtype="bool") /* ty=Tensor[(4, 2, 7), bool] */;
  %377 = shape_of(%var_1168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%var_1168, dtype="bool") /* ty=Tensor[(4, 2, 7), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %380 = atanh(%374) /* ty=Tensor[(4, 2, 7), float32] */;
  %381 = %375.0;
  %382 = not_equal(%378, %379) /* ty=Tensor[(4, 2, 7), bool] */;
  (%380, %381, %382)
}

def @func_1326(%var_1324: Tensor[(13, 7, 1), bool], %var_1325: Tensor[(13, 7, 8), bool]) -> Tensor[(13, 7, 8), bool] {
  @func_1322(%var_1324, %var_1325) /* ty=Tensor[(13, 7, 8), bool] */
}

def @func_2595() -> Tensor[(10, 2, 8), uint8] {
  @func_2593() /* ty=Tensor[(10, 2, 8), uint8] */
}

def @func_3121() -> (Tensor[(2, 14, 3), float64],) {
  @func_3119() /* ty=(Tensor[(2, 14, 3), float64],) */
}

def @func_2677(%var_2675: Tensor[(288), float32], %var_2676: Tensor[(440, 2), float64]) -> (Tensor[(2, 14, 3), float64], Tensor[(6, 12, 4), uint64], Tensor[(288), float32], Tensor[(16, 11, 5), float64], Tensor[(440, 2), float64]) {
  @func_2673(%var_2675, %var_2676) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(6, 12, 4), uint64], Tensor[(288), float32], Tensor[(16, 11, 5), float64], Tensor[(440, 2), float64]) */
}

def @func_2593() -> Tensor[(10, 2, 8), uint8] {
  %383 = @func_929() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) */;
  %383.1
}

def @func_3838() -> (Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), int8], Tensor[(2, 14, 3), float64], Tensor[(36), float64], Tensor[(180), uint64]) {
  @func_3836() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), int8], Tensor[(2, 14, 3), float64], Tensor[(36), float64], Tensor[(180), uint64]) */
}

def @func_4145() -> (Tensor[(2, 14, 3), float64],) {
  @func_4143() /* ty=(Tensor[(2, 14, 3), float64],) */
}

def @func_766(%var_763: Tensor[(36), float64], %var_764: Tensor[(180), uint64], %var_765: Tensor[(3, 12, 5), float32]) -> (Tensor[(2, 14, 3), float64], Tensor[(9, 7, 13), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(819), float64], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), float64], Tensor[(36, 6), float64]) {
  @func_761(%var_763, %var_764, %var_765) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(9, 7, 13), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(819), float64], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), float64], Tensor[(36, 6), float64]) */
}

def @func_713(%var_712: Tensor[(9, 7, 13), int32]) -> Tensor[(9, 7, 13), bool] {
  %388 = fn (%var_704: Tensor[(9, 7, 13), int32]) -> Tensor[(9, 7, 13), bool] {
    %384 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 7, 13), int32] */, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
    %385 = shape_of(%var_704, dtype="int32") /* ty=Tensor[(3), int32] */;
    %386 = cast(%var_704, dtype="bool") /* ty=Tensor[(9, 7, 13), bool] */;
    %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%386, %387) /* ty=Tensor[(9, 7, 13), bool] */
  };
  %388(%var_712) /* ty=Tensor[(9, 7, 13), bool] */
}

def @func_2086() -> (Tensor[(2, 14, 3), uint32],) {
  %389 = @func_1330() /* ty=Tensor[(2, 14, 3), float64] */;
  %390 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 14, 3), float64] */, dtype="uint32") /* ty=Tensor[(2, 14, 3), uint32] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%389, dtype="uint32") /* ty=Tensor[(2, 14, 3), uint32] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %394 = logical_xor(%392, %393) /* ty=Tensor[(2, 14, 3), uint32] */;
  (%394,)
}

def @func_2047() -> Tensor[(4, 6, 4), bool] {
  %395 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 6, 1), int8] */, dtype="int8") /* ty=Tensor[(4, 6, 1), int8] */;
  %396 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 6, 4), int8] */, dtype="int8") /* ty=Tensor[(4, 6, 4), int8] */;
  %397 = minimum(%395, %396) /* ty=Tensor[(4, 6, 4), int8] */;
  %398 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 6, 1), int8] */, dtype="bool") /* ty=Tensor[(4, 6, 1), bool] */;
  %399 = cast(%397, dtype="bool") /* ty=Tensor[(4, 6, 4), bool] */;
  less_equal(%398, %399) /* ty=Tensor[(4, 6, 4), bool] */
}

def @func_1198(%var_1196: Tensor[(4, 2, 7), float32], %var_1197: Tensor[(4, 2, 7), float32]) -> (Tensor[(4, 2, 7), float32], Tensor[(2, 14, 3), float64], Tensor[(4, 2, 7), bool]) {
  @func_1194(%var_1196, %var_1197) /* ty=(Tensor[(4, 2, 7), float32], Tensor[(2, 14, 3), float64], Tensor[(4, 2, 7), bool]) */
}

def @func_1484() -> (Tensor[(2, 14, 3), float64],) {
  @func_1482() /* ty=(Tensor[(2, 14, 3), float64],) */
}

def @func_1888(%var_1887: Tensor[(1512), float64]) -> (Tensor[(2, 14, 3), float32], Tensor[(14, 12, 9), uint64], Tensor[(1512), float64]) {
  %404 = fn (%var_1878: Tensor[(1512), float64]) -> (Tensor[(2, 14, 3), float32], Tensor[(14, 12, 9), uint64], Tensor[(1512), float64]) {
    %400 = cast(%var_1878, dtype="float64") /* ty=Tensor[(1512), float64] */;
    %401 = reshape(%400, newshape=[14, 12, 9]) /* ty=Tensor[(14, 12, 9), float64] */;
    %402 = @func_1058() /* ty=Tensor[(2, 14, 3), float32] */;
    %403 = @func_1786(%401) /* ty=Tensor[(14, 12, 9), uint64] */;
    (%402, %403, %var_1878)
  };
  %404(%var_1887) /* ty=(Tensor[(2, 14, 3), float32], Tensor[(14, 12, 9), uint64], Tensor[(1512), float64]) */
}

def @func_619(%var_618: Tensor[(280, 1), float32]) -> (Tensor[(3, 12, 6), float32], Tensor[(280, 1), float32], Tensor[(180), uint64], Tensor[(108, 2), float64], Tensor[(3, 12, 6), float32], Tensor[(36), float64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int8], Tensor[(2, 14, 3), float64], Tensor[(3, 12, 6), float32], Tensor[(2, 14, 3), uint64]) {
  %448 = fn (%var_550: Tensor[(280, 1), float32]) -> (Tensor[(3, 12, 6), float32], Tensor[(280, 1), float32], Tensor[(180), uint64], Tensor[(108, 2), float64], Tensor[(3, 12, 6), float32], Tensor[(36), float64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int8], Tensor[(2, 14, 3), float64], Tensor[(3, 12, 6), float32], Tensor[(2, 14, 3), uint64]) {
    %405 = cast(5.57814f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %406 = cast(%var_550, dtype="float32") /* ty=Tensor[(280, 1), float32] */;
    %407 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %408 = cast(meta[relay.Constant][24] /* ty=Tensor[(108, 2), float64] */, dtype="float64") /* ty=Tensor[(108, 2), float64] */;
    %409 = reshape(%405, newshape=[]) /* ty=float32 */;
    %410 = reshape(%406, newshape=[5, 7, 8]) /* ty=Tensor[(5, 7, 8), float32] */;
    %411 = reshape(%407, newshape=[180]) /* ty=Tensor[(180), uint64] */;
    %412 = reshape(%408, newshape=[1, 216]) /* ty=Tensor[(1, 216), float64] */;
    %413 = @func_430(%409, %410, %411, %412) /* ty=(Tensor[(3, 12, 6), float32], Tensor[(36), float64], Tensor[(5, 7, 8), uint16], Tensor[(1, 216), uint64], Tensor[(8, 5, 16), float32], Tensor[(3, 12, 180), float64], Tensor[(3, 12, 6), float32], Tensor[(3, 12, 6), float32]) */;
    %414 = cast(meta[relay.Constant][25] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
    %415 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %416 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), uint64] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %417 = cast(meta[relay.Constant][24] /* ty=Tensor[(108, 2), float64] */, dtype="float64") /* ty=Tensor[(108, 2), float64] */;
    %418 = reshape(%414, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
    %419 = reshape(%415, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
    %420 = reshape(%416, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
    %421 = reshape(%417, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
    %422 = @func_225(%418, %419, %420, %421) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
    %423 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
    %424 = cast(%423, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
    %425 = sqrt(%424) /* ty=Tensor[(2, 14, 3), float32] */;
    %426 = cast(%423, dtype="int8") /* ty=Tensor[(2, 14, 3), int8] */;
    %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
    %428 = cast(%425, dtype="int8") /* ty=Tensor[(2, 14, 3), int8] */;
    %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %430 = cast(meta[relay.Constant][25] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
    %431 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %432 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), uint64] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %433 = %413.7;
    %434 = cast(%433, dtype="float64") /* ty=Tensor[(3, 12, 6), float64] */;
    %435 = reshape(%430, newshape=[3, 12, 1]) /* ty=Tensor[(3, 12, 1), float64] */;
    %436 = reshape(%431, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint64] */;
    %437 = reshape(%432, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), uint16] */;
    %438 = reshape(%434, newshape=[3, 12, 6]) /* ty=Tensor[(3, 12, 6), float64] */;
    %439 = @func_225(%435, %436, %437, %438) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */;
    %440 = cast(%425, dtype="uint64") /* ty=Tensor[(2, 14, 3), uint64] */;
    %441 = cast(5.57814f /* ty=float32 */, dtype="uint64") /* ty=uint64 */;
    %442 = %422.3;
    %443 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
    %444 = maximum(%428, %429) /* ty=Tensor[(2, 14, 3), int8] */;
    %445 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
    %446 = %439.3;
    %447 = bitwise_and(%440, %441) /* ty=Tensor[(2, 14, 3), uint64] */;
    (%433, %var_550, meta[relay.Constant][23] /* ty=Tensor[(180), uint64] */, meta[relay.Constant][24] /* ty=Tensor[(108, 2), float64] */, %442, meta[relay.Constant][25] /* ty=Tensor[(36), float64] */, %443, %444, %445, %446, %447)
  };
  %448(%var_618) /* ty=(Tensor[(3, 12, 6), float32], Tensor[(280, 1), float32], Tensor[(180), uint64], Tensor[(108, 2), float64], Tensor[(3, 12, 6), float32], Tensor[(36), float64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int8], Tensor[(2, 14, 3), float64], Tensor[(3, 12, 6), float32], Tensor[(2, 14, 3), uint64]) */
}

def @func_2470() -> Tensor[(2, 14, 3), float64] {
  %449 = @func_1058() /* ty=Tensor[(2, 14, 3), float32] */;
  %450 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 14, 3), float32] */, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%449, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%452, %453) /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_1608(%var_1544: Tensor[(10, 2, 8), uint8], %var_1575: Tensor[(56), float32]) -> (Tensor[(10, 2, 8), bool], Tensor[(4, 2, 7), float32]) {
  %454 = @func_929() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) */;
  %455 = %454.1;
  %456 = cast(%var_1544, dtype="bool") /* ty=Tensor[(10, 2, 8), bool] */;
  %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%455, dtype="bool") /* ty=Tensor[(10, 2, 8), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %460 = cast(%var_1575, dtype="float32") /* ty=Tensor[(56), float32] */;
  %461 = cast(%var_1575, dtype="float32") /* ty=Tensor[(56), float32] */;
  %462 = reshape(%460, newshape=[4, 2, 7]) /* ty=Tensor[(4, 2, 7), float32] */;
  %463 = reshape(%461, newshape=[4, 2, 7]) /* ty=Tensor[(4, 2, 7), float32] */;
  %464 = @func_1194(%462, %463) /* ty=(Tensor[(4, 2, 7), float32], Tensor[(2, 14, 3), float64], Tensor[(4, 2, 7), bool]) */;
  %465 = %464.0;
  %466 = cast(%var_1575, dtype="float32") /* ty=Tensor[(56), float32] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%465, dtype="float32") /* ty=Tensor[(4, 2, 7), float32] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %470 = greater_equal(%458, %459) /* ty=Tensor[(10, 2, 8), bool] */;
  %471 = add(%468, %469) /* ty=Tensor[(4, 2, 7), float32] */;
  (%470, %471)
}

def @func_2578(%var_2576: Tensor[(91), bool]) -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float32], Tensor[(728), bool], Tensor[(91), bool], Tensor[(2, 14, 3), int16]) {
  @func_2575(%var_2576) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float32], Tensor[(728), bool], Tensor[(91), bool], Tensor[(2, 14, 3), int16]) */
}

def @func_1058() -> Tensor[(2, 14, 3), float32] {
  %472 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  tan(%473) /* ty=Tensor[(2, 14, 3), float32] */
}

def @func_1298() -> (Tensor[(10, 2, 8), uint8],) {
  %476 = fn () -> (Tensor[(10, 2, 8), uint8],) {
    %474 = @func_929() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) */;
    %475 = %474.1;
    (%475,)
  };
  %476() /* ty=(Tensor[(10, 2, 8), uint8],) */
}

def @func_889() -> (Tensor[(2, 14, 3), float64],) {
  %478 = fn () -> (Tensor[(2, 14, 3), float64],) {
    %477 = @func_525() /* ty=Tensor[(2, 14, 3), float64] */;
    (%477,)
  };
  %478() /* ty=(Tensor[(2, 14, 3), float64],) */
}

def @func_4219(%var_4217: Tensor[(3, 9, 6), float32]) -> (Tensor[(2, 14, 3), uint32], Tensor[(2, 14, 3), float64], Tensor[(3, 9, 6), float32]) {
  @func_4216(%var_4217) /* ty=(Tensor[(2, 14, 3), uint32], Tensor[(2, 14, 3), float64], Tensor[(3, 9, 6), float32]) */
}

def @func_2161() -> (Tensor[(2, 14, 3), float64],) {
  %481 = fn () -> (Tensor[(2, 14, 3), float64],) {
    %479 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
    %480 = %479.0;
    (%480,)
  };
  %481() /* ty=(Tensor[(2, 14, 3), float64],) */
}

def @func_2788(%var_2761: Tensor[(2, 15, 10), float32], %var_2762: Tensor[(2, 15, 10), float32], %var_2767: Tensor[(288), float32], %var_2768: Tensor[(880), float64], %var_2784: Tensor[(280), float32]) -> (Tensor[(2, 15, 10), float32], Tensor[(16, 11, 5), float64], Tensor[(288), float32], Tensor[(880), float64], float32, Tensor[(280), float32]) {
  %482 = cast(%var_2762, dtype="float32") /* ty=Tensor[(2, 15, 10), float32] */;
  %483 = shape_of(%var_2761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_2761, dtype="float32") /* ty=Tensor[(2, 15, 10), float32] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %486 = cast(%var_2767, dtype="float32") /* ty=Tensor[(288), float32] */;
  %487 = cast(%var_2768, dtype="float64") /* ty=Tensor[(880), float64] */;
  %488 = reshape(%486, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %489 = reshape(%487, newshape=[440, 2]) /* ty=Tensor[(440, 2), float64] */;
  %490 = @func_2673(%488, %489) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(6, 12, 4), uint64], Tensor[(288), float32], Tensor[(16, 11, 5), float64], Tensor[(440, 2), float64]) */;
  %491 = cast(%var_2784, dtype="float32") /* ty=Tensor[(280), float32] */;
  %492 = reshape(%491, newshape=[70, 4]) /* ty=Tensor[(70, 4), float32] */;
  %493 = @func_1983(%492) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(8, 5, 16), float32], float32, Tensor[(70, 4), float32], Tensor[(180), uint64], Tensor[(216), float64]) */;
  %494 = power(%484, %485) /* ty=Tensor[(2, 15, 10), float32] */;
  %495 = %490.3;
  %496 = %493.2;
  (%494, %495, %var_2767, %var_2768, %496, %var_2784)
}

def @func_4561() -> (Tensor[(1512), float64], Tensor[(2, 14, 3), bool], Tensor[(2, 14, 3), float32]) {
  @func_4559() /* ty=(Tensor[(1512), float64], Tensor[(2, 14, 3), bool], Tensor[(2, 14, 3), float32]) */
}

def @func_2732() -> (Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), uint8]) {
  @func_2730() /* ty=(Tensor[(10, 2, 8), float64], Tensor[(10, 2, 8), uint8]) */
}

def @func_4532() -> (Tensor[(880), float32],) {
  %499 = fn () -> (Tensor[(880), float32],) {
    %497 = @func_1255() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(16, 11, 5), float64], Tensor[(880), float32]) */;
    %498 = %497.2;
    (%498,)
  };
  %499() /* ty=(Tensor[(880), float32],) */
}

def @func_4559() -> (Tensor[(1512), float64], Tensor[(2, 14, 3), bool], Tensor[(2, 14, 3), float32]) {
  %500 = cast(meta[relay.Constant][27] /* ty=Tensor[(1512), float64] */, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %501 = reshape(%500, newshape=[1512]) /* ty=Tensor[(1512), float64] */;
  %502 = @func_1886(%501) /* ty=(Tensor[(2, 14, 3), float32], Tensor[(14, 12, 9), uint64], Tensor[(1512), float64]) */;
  %503 = %502.0;
  %504 = @func_2497() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %505 = %504.0;
  %506 = cast(%505, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
  %507 = shape_of(%503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%503, dtype="bool") /* ty=Tensor[(2, 14, 3), bool] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %510 = cast(%505, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  %511 = acos(%510) /* ty=Tensor[(2, 14, 3), float32] */;
  %512 = cast(%511, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  %513 = greater(%508, %509) /* ty=Tensor[(2, 14, 3), bool] */;
  %514 = log(%512) /* ty=Tensor[(2, 14, 3), float32] */;
  (meta[relay.Constant][27] /* ty=Tensor[(1512), float64] */, %513, %514)
}

def @func_3770() -> (Tensor[(2, 14, 3), int16], Tensor[(2, 14, 3), float64]) {
  %515 = @func_2357() /* ty=(Tensor[(2, 14, 3), int16],) */;
  %516 = @func_2160() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %517 = %516.0;
  %518 = cast(%517, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %519 = %515.0;
  %520 = exp(%518) /* ty=Tensor[(2, 14, 3), float64] */;
  (%519, %520)
}

def @func_1482() -> (Tensor[(2, 14, 3), float64],) {
  %521 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %522 = %521.0;
  %523 = cast(%522, dtype="float64") /* ty=Tensor[(2, 14, 3), float64] */;
  %524 = asinh(%523) /* ty=Tensor[(2, 14, 3), float64] */;
  (%524,)
}

def @func_4437(%var_4428: Tensor[(180), uint64]) -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int64], Tensor[(180), uint64], Tensor[(3, 12), float64], Tensor[(180), uint64], Tensor[(4, 6, 4), bool]) {
  %525 = @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %526 = %525.0;
  %527 = @func_1330() /* ty=Tensor[(2, 14, 3), float64] */;
  %528 = cast(%527, dtype="int64") /* ty=Tensor[(2, 14, 3), int64] */;
  %529 = shape_of(%526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%526, dtype="int64") /* ty=Tensor[(2, 14, 3), int64] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %532 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 12), float64] */, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
  %533 = cast(%var_4428, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %534 = cast(%var_4428, dtype="float32") /* ty=Tensor[(180), float32] */;
  %535 = reshape(%532, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %536 = reshape(%533, newshape=[180]) /* ty=Tensor[(180), uint64] */;
  %537 = reshape(%534, newshape=[3, 12, 5]) /* ty=Tensor[(3, 12, 5), float32] */;
  %538 = @func_761(%535, %536, %537) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(9, 7, 13), bool], Tensor[(36), float64], Tensor[(180), uint64], Tensor[(819), float64], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), float64], Tensor[(36, 6), float64]) */;
  %539 = @func_2470() /* ty=Tensor[(2, 14, 3), float64] */;
  %540 = bitwise_xor(%530, %531) /* ty=Tensor[(2, 14, 3), int64] */;
  %541 = %538.3;
  %542 = @func_2047() /* ty=Tensor[(4, 6, 4), bool] */;
  (%539, %540, %541, meta[relay.Constant][28] /* ty=Tensor[(3, 12), float64] */, %var_4428, %542)
}

def @func_2384() -> (Tensor[(2, 14, 3), float64],) {
  %545 = fn () -> (Tensor[(2, 14, 3), float64],) {
    %543 = @func_1482() /* ty=(Tensor[(2, 14, 3), float64],) */;
    %544 = %543.0;
    (%544,)
  };
  %545() /* ty=(Tensor[(2, 14, 3), float64],) */
}

def @func_3036(%var_3034: Tensor[(8, 7, 16), float64]) -> (Tensor[(8, 7, 16), float64],) {
  @func_3033(%var_3034) /* ty=(Tensor[(8, 7, 16), float64],) */
}

def @func_2411() -> Tensor[(10, 2, 8), uint8] {
  %546 = @func_1297() /* ty=(Tensor[(10, 2, 8), uint8],) */;
  %546.0
}

def @func_2175() -> Tensor[(2, 14, 3), float64] {
  %547 = fn () -> Tensor[(2, 14, 3), float64] {
    @func_525() /* ty=Tensor[(2, 14, 3), float64] */
  };
  %547() /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_4380() -> Tensor[(2, 14, 3), float64] {
  %549 = fn () -> Tensor[(2, 14, 3), float64] {
    %548 = @func_3727() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(160), uint8]) */;
    %548.0
  };
  %549() /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_4241() -> Tensor[(7, 15, 12), int8] {
  %550 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 1, 12), int8] */, dtype="int8") /* ty=Tensor[(7, 1, 12), int8] */;
  %551 = cast(meta[relay.Constant][30] /* ty=Tensor[(7, 15, 12), int8] */, dtype="int8") /* ty=Tensor[(7, 15, 12), int8] */;
  add(%550, %551) /* ty=Tensor[(7, 15, 12), int8] */
}

def @func_2915() -> Tensor[(2, 14, 3), float64] {
  %552 = fn () -> Tensor[(2, 14, 3), float64] {
    @func_525() /* ty=Tensor[(2, 14, 3), float64] */
  };
  %552() /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_2673(%var_2611: Tensor[(288), float32], %var_2668: Tensor[(440, 2), float64]) -> (Tensor[(2, 14, 3), float64], Tensor[(6, 12, 4), uint64], Tensor[(288), float32], Tensor[(16, 11, 5), float64], Tensor[(440, 2), float64]) {
  %553 = @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %554 = cast(%var_2611, dtype="float32") /* ty=Tensor[(288), float32] */;
  %555 = reshape(%554, newshape=[6, 12, 4]) /* ty=Tensor[(6, 12, 4), float32] */;
  %556 = @func_2519(%555) /* ty=(Tensor[(6, 12, 4), uint64],) */;
  %557 = cast(%var_2668, dtype="float64") /* ty=Tensor[(440, 2), float64] */;
  %558 = reshape(%557, newshape=[16, 11, 5]) /* ty=Tensor[(16, 11, 5), float64] */;
  %559 = @func_1149(%558) /* ty=(Tensor[(16, 11, 5), float64], Tensor[(16, 11, 5), float32]) */;
  %560 = %553.0;
  %561 = %556.0;
  %562 = %559.0;
  (%560, %561, %var_2611, %562, %var_2668)
}

def @func_3634() -> Tensor[(2, 14, 3), float64] {
  %563 = @func_2383() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %563.0
}

def @func_4918(%var_4916: Tensor[(12, 7, 1), int8], %var_4917: Tensor[(12, 7, 8), int8]) -> Tensor[(12, 7, 8), bool] {
  @func_4914(%var_4916, %var_4917) /* ty=Tensor[(12, 7, 8), bool] */
}

def @func_1519() -> (Tensor[(2, 14, 3), float64],) {
  @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */
}

def @func_2357() -> (Tensor[(2, 14, 3), int16],) {
  %564 = @func_665() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %565 = %564.0;
  %566 = cast(%565, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  %567 = sin(%566) /* ty=Tensor[(2, 14, 3), float32] */;
  %568 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 14, 3), float32] */, dtype="int16") /* ty=Tensor[(2, 14, 3), int16] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%567, dtype="int16") /* ty=Tensor[(2, 14, 3), int16] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %572 = right_shift(%570, %571) /* ty=Tensor[(2, 14, 3), int16] */;
  (%572,)
}

def @func_3940() -> Tensor[(2, 14, 3), uint32] {
  %574 = fn () -> Tensor[(2, 14, 3), uint32] {
    %573 = @func_2086() /* ty=(Tensor[(2, 14, 3), uint32],) */;
    %573.0
  };
  %574() /* ty=Tensor[(2, 14, 3), uint32] */
}

def @func_4440(%var_4438: Tensor[(180), uint64]) -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int64], Tensor[(180), uint64], Tensor[(3, 12), float64], Tensor[(180), uint64], Tensor[(4, 6, 4), bool]) {
  @func_4437(%var_4438) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), int64], Tensor[(180), uint64], Tensor[(3, 12), float64], Tensor[(180), uint64], Tensor[(4, 6, 4), bool]) */
}

def @func_4969() -> (Tensor[(2, 14, 3), uint32],) {
  @func_4967() /* ty=(Tensor[(2, 14, 3), uint32],) */
}

def @main(%var_5043: Tensor[(2, 8, 15), float64]) -> (Tensor[(2, 8, 15), float64],) {
  %575 = cast(%var_5043, dtype="float64") /* ty=Tensor[(2, 8, 15), float64] */;
  %576 = acosh(%575) /* ty=Tensor[(2, 8, 15), float64] */;
  (%576,)
}

def @func_1322(%var_1310: Tensor[(13, 7, 1), bool], %var_1311: Tensor[(13, 7, 8), bool]) -> Tensor[(13, 7, 8), bool] {
  %577 = cast(%var_1310, dtype="bool") /* ty=Tensor[(13, 7, 1), bool] */;
  %578 = cast(%var_1311, dtype="bool") /* ty=Tensor[(13, 7, 8), bool] */;
  logical_and(%577, %578) /* ty=Tensor[(13, 7, 8), bool] */
}

def @func_3468(%var_3467: Tensor[(14, 7, 11), uint8]) -> (Tensor[(14, 7, 11), uint8], Tensor[(10, 2, 8), uint8], Tensor[(14, 7, 11), int16]) {
  %595 = fn (%var_3433: Tensor[(14, 7, 11), uint8]) -> (Tensor[(14, 7, 11), uint8], Tensor[(10, 2, 8), uint8], Tensor[(14, 7, 11), int16]) {
    %579 = cast(%var_3433, dtype="uint8") /* ty=Tensor[(14, 7, 11), uint8] */;
    %580 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(14, 7, 11), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %581 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 7, 11), uint8] */, dtype="uint8") /* ty=Tensor[(14, 7, 11), uint8] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %583 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 7, 11), uint8] */, dtype="bool") /* ty=Tensor[(14, 7, 11), bool] */;
    %584 = shape_of(%var_3433, dtype="int32") /* ty=Tensor[(3), int32] */;
    %585 = cast(%var_3433, dtype="bool") /* ty=Tensor[(14, 7, 11), bool] */;
    %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %587 = greater_equal(%585, %586) /* ty=Tensor[(14, 7, 11), bool] */;
    %588 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 7, 11), uint8] */, dtype="int16") /* ty=Tensor[(14, 7, 11), int16] */;
    %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
    %590 = cast(%587, dtype="int16") /* ty=Tensor[(14, 7, 11), int16] */;
    %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %592 = bitwise_and(%581, %582) /* ty=Tensor[(14, 7, 11), uint8] */;
    %593 = @func_2593() /* ty=Tensor[(10, 2, 8), uint8] */;
    %594 = minimum(%590, %591) /* ty=Tensor[(14, 7, 11), int16] */;
    (%592, %593, %594)
  };
  %595(%var_3467) /* ty=(Tensor[(14, 7, 11), uint8], Tensor[(10, 2, 8), uint8], Tensor[(14, 7, 11), int16]) */
}

def @func_4859() -> Tensor[(10, 2, 8), uint8] {
  %596 = fn () -> Tensor[(10, 2, 8), uint8] {
    @func_2411() /* ty=Tensor[(10, 2, 8), uint8] */
  };
  %596() /* ty=Tensor[(10, 2, 8), uint8] */
}

def @func_4967() -> (Tensor[(2, 14, 3), uint32],) {
  %597 = @func_3939() /* ty=Tensor[(2, 14, 3), uint32] */;
  (%597,)
}

def @func_1985(%var_1984: Tensor[(70, 4), float32]) -> (Tensor[(2, 14, 3), float64], Tensor[(8, 5, 16), float32], float32, Tensor[(70, 4), float32], Tensor[(180), uint64], Tensor[(216), float64]) {
  %610 = fn (%var_1975: Tensor[(70, 4), float32]) -> (Tensor[(2, 14, 3), float64], Tensor[(8, 5, 16), float32], float32, Tensor[(70, 4), float32], Tensor[(180), uint64], Tensor[(216), float64]) {
    %598 = @func_929() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) */;
    %599 = cast(-3.28429f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %600 = cast(%var_1975, dtype="float32") /* ty=Tensor[(70, 4), float32] */;
    %601 = cast(meta[relay.Constant][34] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %602 = cast(meta[relay.Constant][35] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
    %603 = reshape(%599, newshape=[]) /* ty=float32 */;
    %604 = reshape(%600, newshape=[5, 7, 8]) /* ty=Tensor[(5, 7, 8), float32] */;
    %605 = reshape(%601, newshape=[180]) /* ty=Tensor[(180), uint64] */;
    %606 = reshape(%602, newshape=[1, 216]) /* ty=Tensor[(1, 216), float64] */;
    %607 = @func_430(%603, %604, %605, %606) /* ty=(Tensor[(3, 12, 6), float32], Tensor[(36), float64], Tensor[(5, 7, 8), uint16], Tensor[(1, 216), uint64], Tensor[(8, 5, 16), float32], Tensor[(3, 12, 180), float64], Tensor[(3, 12, 6), float32], Tensor[(3, 12, 6), float32]) */;
    %608 = %598.0;
    %609 = %607.4;
    (%608, %609, -3.28429f /* ty=float32 */, %var_1975, meta[relay.Constant][34] /* ty=Tensor[(180), uint64] */, meta[relay.Constant][35] /* ty=Tensor[(216), float64] */)
  };
  %610(%var_1984) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(8, 5, 16), float32], float32, Tensor[(70, 4), float32], Tensor[(180), uint64], Tensor[(216), float64]) */
}

def @func_2895(%var_2889: Tensor[(8, 10, 6), int32], %var_2890: Tensor[(8, 10, 6), int32], %var_2891: Tensor[(91), bool], %var_2892: Tensor[(91), bool], %var_2893: Tensor[(180), uint64], %var_2894: Tensor[(91), bool]) -> (Tensor[(8, 10, 6), bool], Tensor[(2, 14, 3), float32], Tensor[(2, 14, 3), float64], Tensor[(3, 12), float64], Tensor[(180), uint64], Tensor[(216), float64], Tensor[(91), bool], Tensor[(2, 14, 3), float64], Tensor[(91), bool], Tensor[(10, 2, 8), uint8]) {
  %649 = fn (%var_2824: Tensor[(8, 10, 6), int32], %var_2825: Tensor[(8, 10, 6), int32], %var_2837: Tensor[(91), bool], %var_2844: Tensor[(91), bool], %var_2854: Tensor[(180), uint64], %var_2857: Tensor[(91), bool]) -> (Tensor[(8, 10, 6), bool], Tensor[(2, 14, 3), float32], Tensor[(2, 14, 3), float64], Tensor[(3, 12), float64], Tensor[(180), uint64], Tensor[(216), float64], Tensor[(91), bool], Tensor[(2, 14, 3), float64], Tensor[(91), bool], Tensor[(10, 2, 8), uint8]) {
    %611 = cast(%var_2825, dtype="bool") /* ty=Tensor[(8, 10, 6), bool] */;
    %612 = shape_of(%var_2824, dtype="int32") /* ty=Tensor[(3), int32] */;
    %613 = cast(%var_2824, dtype="bool") /* ty=Tensor[(8, 10, 6), bool] */;
    %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %615 = cast(%var_2837, dtype="bool") /* ty=Tensor[(91), bool] */;
    %616 = reshape(%615, newshape=[91]) /* ty=Tensor[(91), bool] */;
    %617 = @func_2575(%616) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float32], Tensor[(728), bool], Tensor[(91), bool], Tensor[(2, 14, 3), int16]) */;
    %618 = cast(meta[relay.Constant][36] /* ty=Tensor[(3, 12), float64] */, dtype="float64") /* ty=Tensor[(3, 12), float64] */;
    %619 = cast(%var_2854, dtype="uint64") /* ty=Tensor[(180), uint64] */;
    %620 = cast(meta[relay.Constant][37] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
    %621 = reshape(%618, newshape=[3, 12]) /* ty=Tensor[(3, 12), float64] */;
    %622 = reshape(%619, newshape=[90, 2]) /* ty=Tensor[(90, 2), uint64] */;
    %623 = reshape(%620, newshape=[216]) /* ty=Tensor[(216), float64] */;
    %624 = @func_1020(%621, %622, %623) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8], Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), uint64], Tensor[(3, 12, 5), bool], Tensor[(3, 12), float64], Tensor[(90, 2), uint64], Tensor[(216), float64], Tensor[(2, 14, 3), float64]) */;
    %625 = cast(%var_2857, dtype="bool") /* ty=Tensor[(91), bool] */;
    %626 = shape_of(%var_2837, dtype="int32") /* ty=Tensor[(1), int32] */;
    %627 = cast(%var_2837, dtype="bool") /* ty=Tensor[(91), bool] */;
    %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?), bool] */;
    %629 = @func_2383() /* ty=(Tensor[(2, 14, 3), float64],) */;
    %630 = cast(%var_2844, dtype="float64") /* ty=Tensor[(91), float64] */;
    %631 = cos(%630) /* ty=Tensor[(91), float64] */;
    %632 = cast(%var_2844, dtype="float32") /* ty=Tensor[(91), float32] */;
    %633 = shape_of(%var_2837, dtype="int32") /* ty=Tensor[(1), int32] */;
    %634 = cast(%var_2837, dtype="float32") /* ty=Tensor[(91), float32] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?), float32] */;
    %636 = power(%634, %635) /* ty=Tensor[(91), float32] */;
    %637 = cast(%636, dtype="bool") /* ty=Tensor[(91), bool] */;
    %638 = shape_of(%631, dtype="int32") /* ty=Tensor[(1), int32] */;
    %639 = cast(%631, dtype="bool") /* ty=Tensor[(91), bool] */;
    %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?), bool] */;
    %641 = @func_1297() /* ty=(Tensor[(10, 2, 8), uint8],) */;
    %642 = greater_equal(%613, %614) /* ty=Tensor[(8, 10, 6), bool] */;
    %643 = %617.1;
    %644 = %624.10;
    %645 = greater(%627, %628) /* ty=Tensor[(91), bool] */;
    %646 = %629.0;
    %647 = logical_or(%639, %640) /* ty=Tensor[(91), bool] */;
    %648 = %641.0;
    (%642, %643, %644, meta[relay.Constant][36] /* ty=Tensor[(3, 12), float64] */, %var_2854, meta[relay.Constant][37] /* ty=Tensor[(216), float64] */, %645, %646, %647, %648)
  };
  %649(%var_2889, %var_2890, %var_2891, %var_2892, %var_2893, %var_2894) /* ty=(Tensor[(8, 10, 6), bool], Tensor[(2, 14, 3), float32], Tensor[(2, 14, 3), float64], Tensor[(3, 12), float64], Tensor[(180), uint64], Tensor[(216), float64], Tensor[(91), bool], Tensor[(2, 14, 3), float64], Tensor[(91), bool], Tensor[(10, 2, 8), uint8]) */
}

def @func_2459() -> (Tensor[(10, 2, 8), int8],) {
  %659 = fn () -> (Tensor[(10, 2, 8), int8],) {
    %650 = @func_1297() /* ty=(Tensor[(10, 2, 8), uint8],) */;
    %651 = %650.0;
    %652 = cast(%651, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
    %653 = tan(%652) /* ty=Tensor[(10, 2, 8), float32] */;
    %654 = cast(%651, dtype="int8") /* ty=Tensor[(10, 2, 8), int8] */;
    %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
    %656 = cast(%653, dtype="int8") /* ty=Tensor[(10, 2, 8), int8] */;
    %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %658 = maximum(%656, %657) /* ty=Tensor[(10, 2, 8), int8] */;
    (%658,)
  };
  %659() /* ty=(Tensor[(10, 2, 8), int8],) */
}

def @func_931() -> (Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) {
  @func_929() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), uint8]) */
}

def @func_2521(%var_2520: Tensor[(6, 12, 4), float32]) -> (Tensor[(6, 12, 4), uint64],) {
  %667 = fn (%var_2511: Tensor[(6, 12, 4), float32]) -> (Tensor[(6, 12, 4), uint64],) {
    %660 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 4), float32] */;
    %661 = log10(%660) /* ty=Tensor[(6, 12, 4), float32] */;
    %662 = cast(%var_2511, dtype="uint64") /* ty=Tensor[(6, 12, 4), uint64] */;
    %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %664 = cast(%661, dtype="uint64") /* ty=Tensor[(6, 12, 4), uint64] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %666 = add(%664, %665) /* ty=Tensor[(6, 12, 4), uint64] */;
    (%666,)
  };
  %667(%var_2520) /* ty=(Tensor[(6, 12, 4), uint64],) */
}

def @func_3194() -> (Tensor[(4, 6, 4), float32],) {
  @func_3192() /* ty=(Tensor[(4, 6, 4), float32],) */
}

def @func_2472() -> Tensor[(2, 14, 3), float64] {
  @func_2470() /* ty=Tensor[(2, 14, 3), float64] */
}

def @func_3299(%var_3281: Tensor[(10, 2, 8), uint8]) -> (Tensor[(10, 2, 8), uint8], Tensor[(2, 14, 3), int16], Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), bool]) {
  %668 = @func_2357() /* ty=(Tensor[(2, 14, 3), int16],) */;
  %669 = @func_3119() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %670 = @func_2411() /* ty=Tensor[(10, 2, 8), uint8] */;
  %671 = cast(%670, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  %672 = sigmoid(%671) /* ty=Tensor[(10, 2, 8), float32] */;
  %673 = cast(%var_3281, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  %674 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%670, dtype="float32") /* ty=Tensor[(10, 2, 8), float32] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %677 = floor_mod(%675, %676) /* ty=Tensor[(10, 2, 8), float32] */;
  %678 = cast(%677, dtype="bool") /* ty=Tensor[(10, 2, 8), bool] */;
  %679 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%672, dtype="bool") /* ty=Tensor[(10, 2, 8), bool] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %682 = @func_2593() /* ty=Tensor[(10, 2, 8), uint8] */;
  %683 = %668.0;
  %684 = %669.0;
  %685 = less_equal(%680, %681) /* ty=Tensor[(10, 2, 8), bool] */;
  (%682, %683, %684, %685)
}

def @func_3575() -> (Tensor[(10, 2, 8), uint8],) {
  %687 = fn () -> (Tensor[(10, 2, 8), uint8],) {
    %686 = @func_2411() /* ty=Tensor[(10, 2, 8), uint8] */;
    (%686,)
  };
  %687() /* ty=(Tensor[(10, 2, 8), uint8],) */
}

def @func_3836() -> (Tensor[(2, 14, 3), float64], Tensor[(10, 2, 8), int8], Tensor[(2, 14, 3), float64], Tensor[(36), float64], Tensor[(180), uint64]) {
  %688 = @func_2925() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64]) */;
  %689 = @func_2458() /* ty=(Tensor[(10, 2, 8), int8],) */;
  %690 = cast(meta[relay.Constant][39] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %691 = cast(meta[relay.Constant][40] /* ty=Tensor[(180), uint64] */, dtype="uint64") /* ty=Tensor[(180), uint64] */;
  %692 = reshape(%690, newshape=[36]) /* ty=Tensor[(36), float64] */;
  %693 = reshape(%691, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint64] */;
  %694 = @func_799(%692, %693) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(36, 6), float64], Tensor[(36), float64], Tensor[(180, 1), uint64]) */;
  %695 = %688.1;
  %696 = %689.0;
  %697 = %694.0;
  (%695, %696, %697, meta[relay.Constant][39] /* ty=Tensor[(36), float64] */, meta[relay.Constant][40] /* ty=Tensor[(180), uint64] */)
}

def @func_5030(%var_5029: Tensor[(1512), float64]) -> (Tensor[(2, 14, 3), uint16], Tensor[(2, 14, 3), float32], Tensor[(1512), float64], Tensor[(6, 12, 4), uint64], Tensor[(288), float32], Tensor[(880), float64]) {
  %717 = fn (%var_5015: Tensor[(1512), float64]) -> (Tensor[(2, 14, 3), uint16], Tensor[(2, 14, 3), float32], Tensor[(1512), float64], Tensor[(6, 12, 4), uint64], Tensor[(288), float32], Tensor[(880), float64]) {
    %698 = @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */;
    %699 = %698.0;
    %700 = @func_2383() /* ty=(Tensor[(2, 14, 3), float64],) */;
    %701 = %700.0;
    %702 = cast(%701, dtype="uint16") /* ty=Tensor[(2, 14, 3), uint16] */;
    %703 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
    %704 = cast(%699, dtype="uint16") /* ty=Tensor[(2, 14, 3), uint16] */;
    %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %706 = cast(%var_5015, dtype="float64") /* ty=Tensor[(1512), float64] */;
    %707 = reshape(%706, newshape=[1512]) /* ty=Tensor[(1512), float64] */;
    %708 = @func_1886(%707) /* ty=(Tensor[(2, 14, 3), float32], Tensor[(14, 12, 9), uint64], Tensor[(1512), float64]) */;
    %709 = cast(meta[relay.Constant][41] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %710 = cast(meta[relay.Constant][42] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
    %711 = reshape(%709, newshape=[288]) /* ty=Tensor[(288), float32] */;
    %712 = reshape(%710, newshape=[440, 2]) /* ty=Tensor[(440, 2), float64] */;
    %713 = @func_2673(%711, %712) /* ty=(Tensor[(2, 14, 3), float64], Tensor[(6, 12, 4), uint64], Tensor[(288), float32], Tensor[(16, 11, 5), float64], Tensor[(440, 2), float64]) */;
    %714 = minimum(%704, %705) /* ty=Tensor[(2, 14, 3), uint16] */;
    %715 = %708.0;
    %716 = %713.1;
    (%714, %715, %var_5015, %716, meta[relay.Constant][41] /* ty=Tensor[(288), float32] */, meta[relay.Constant][42] /* ty=Tensor[(880), float64] */)
  };
  %717(%var_5029) /* ty=(Tensor[(2, 14, 3), uint16], Tensor[(2, 14, 3), float32], Tensor[(1512), float64], Tensor[(6, 12, 4), uint64], Tensor[(288), float32], Tensor[(880), float64]) */
}

def @func_230(%var_226: Tensor[(3, 12, 1), float64], %var_227: Tensor[(3, 12, 5), uint64], %var_228: Tensor[(3, 12, 5), uint16], %var_229: Tensor[(3, 12, 6), float64]) -> (Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) {
  %756 = fn (%var_115: Tensor[(3, 12, 1), float64], %var_175: Tensor[(3, 12, 5), uint64], %var_187: Tensor[(3, 12, 5), uint16], %var_219: Tensor[(3, 12, 6), float64]) -> (Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) {
    %718 = cast(%var_115, dtype="float64") /* ty=Tensor[(3, 12, 1), float64] */;
    %719 = acosh(%718) /* ty=Tensor[(3, 12, 1), float64] */;
    %720 = cast(%719, dtype="float32") /* ty=Tensor[(3, 12, 1), float32] */;
    %721 = cast(%719, dtype="uint32") /* ty=Tensor[(3, 12, 1), uint32] */;
    %722 = shape_of(%var_115, dtype="int32") /* ty=Tensor[(3), int32] */;
    %723 = cast(%var_115, dtype="uint32") /* ty=Tensor[(3, 12, 1), uint32] */;
    %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %725 = bitwise_and(%723, %724) /* ty=Tensor[(3, 12, ?), uint32] */;
    %726 = cast(%var_115, dtype="bool") /* ty=Tensor[(3, 12, 1), bool] */;
    %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
    %728 = cast(%725, dtype="bool") /* ty=Tensor[(3, 12, ?), bool] */;
    %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %730 = not_equal(%728, %729) /* ty=Tensor[(3, 12, ?), bool] */;
    %731 = cast(%730, dtype="float32") /* ty=Tensor[(3, 12, ?), float32] */;
    %732 = asin(%731) /* ty=Tensor[(3, 12, ?), float32] */;
    %733 = cast(%732, dtype="uint16") /* ty=Tensor[(3, 12, ?), uint16] */;
    %734 = cast(%var_175, dtype="uint16") /* ty=Tensor[(3, 12, 5), uint16] */;
    %735 = logical_xor(%733, %734) /* ty=Tensor[(3, 12, 5), uint16] */;
    %736 = cast(%var_187, dtype="bool") /* ty=Tensor[(3, 12, 5), bool] */;
    %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
    %738 = cast(%735, dtype="bool") /* ty=Tensor[(3, 12, 5), bool] */;
    %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %740 = cast(%var_115, dtype="uint64") /* ty=Tensor[(3, 12, 1), uint64] */;
    %741 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
    %742 = cast(%732, dtype="uint64") /* ty=Tensor[(3, 12, ?), uint64] */;
    %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %744 = multiply(%742, %743) /* ty=Tensor[(3, 12, ?), uint64] */;
    %745 = cast(%744, dtype="int64") /* ty=Tensor[(3, 12, ?), int64] */;
    %746 = cast(%var_175, dtype="int64") /* ty=Tensor[(3, 12, 5), int64] */;
    %747 = subtract(%745, %746) /* ty=Tensor[(3, 12, 5), int64] */;
    %748 = cast(%732, dtype="bool") /* ty=Tensor[(3, 12, ?), bool] */;
    %749 = cast(%747, dtype="bool") /* ty=Tensor[(3, 12, 5), bool] */;
    %750 = cast(%719, dtype="float32") /* ty=Tensor[(3, 12, 1), float32] */;
    %751 = cast(%var_219, dtype="float32") /* ty=Tensor[(3, 12, 6), float32] */;
    %752 = sigmoid(%720) /* ty=Tensor[(3, 12, 1), float32] */;
    %753 = not_equal(%738, %739) /* ty=Tensor[(3, 12, 5), bool] */;
    %754 = logical_and(%748, %749) /* ty=Tensor[(3, 12, 5), bool] */;
    %755 = mod(%750, %751) /* ty=Tensor[(3, 12, 6), float32] */;
    (%752, %753, %754, %755)
  };
  %756(%var_226, %var_227, %var_228, %var_229) /* ty=(Tensor[(3, 12, 1), float32], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 5), bool], Tensor[(3, 12, 6), float32]) */
}

def @func_3728() -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(160), uint8]) {
  %762 = fn () -> (Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(160), uint8]) {
    %757 = cast(meta[relay.Constant][43] /* ty=Tensor[(160), uint8] */, dtype="uint8") /* ty=Tensor[(160), uint8] */;
    %758 = reshape(%757, newshape=[10, 2, 8]) /* ty=Tensor[(10, 2, 8), uint8] */;
    %759 = @func_3668(%758) /* ty=(Tensor[(10, 2, 8), float32], Tensor[(2, 14, 3), float64], Tensor[(36), float64], Tensor[(2, 14, 3), float64]) */;
    %760 = @func_2914() /* ty=Tensor[(2, 14, 3), float64] */;
    %761 = %759.3;
    (%760, %761, meta[relay.Constant][43] /* ty=Tensor[(160), uint8] */)
  };
  %762() /* ty=(Tensor[(2, 14, 3), float64], Tensor[(2, 14, 3), float64], Tensor[(160), uint8]) */
}

def @func_4143() -> (Tensor[(2, 14, 3), float64],) {
  %763 = @func_1517() /* ty=(Tensor[(2, 14, 3), float64],) */;
  %764 = %763.0;
  (%764,)
}

def @func_2282(%var_2261: Tensor[(91), bool]) -> (Tensor[(13, 7, 8), bool], Tensor[(728), bool], Tensor[(91), int64], Tensor[(2, 14, 3), float32]) {
  %765 = cast(meta[relay.Constant][44] /* ty=Tensor[(91), bool] */, dtype="bool") /* ty=Tensor[(91), bool] */;
  %766 = cast(meta[relay.Constant][45] /* ty=Tensor[(728), bool] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %767 = reshape(%765, newshape=[13, 7, 1]) /* ty=Tensor[(13, 7, 1), bool] */;
  %768 = reshape(%766, newshape=[13, 7, 8]) /* ty=Tensor[(13, 7, 8), bool] */;
  %769 = cast(%var_2261, dtype="int64") /* ty=Tensor[(91), int64] */;
  %770 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(91), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %771 = cast(meta[relay.Constant][44] /* ty=Tensor[(91), bool] */, dtype="int64") /* ty=Tensor[(91), int64] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?), int64] */;
  %773 = @func_1330() /* ty=Tensor[(2, 14, 3), float64] */;
  %774 = cast(%773, dtype="float32") /* ty=Tensor[(2, 14, 3), float32] */;
  %775 = @func_1322(%767, %768) /* ty=Tensor[(13, 7, 8), bool] */;
  %776 = logical_xor(%771, %772) /* ty=Tensor[(91), int64] */;
  %777 = atanh(%774) /* ty=Tensor[(2, 14, 3), float32] */;
  (%775, meta[relay.Constant][45] /* ty=Tensor[(728), bool] */, %776, %777)
}

def @func_2285(%var_2283: Tensor[(91), bool]) -> (Tensor[(13, 7, 8), bool], Tensor[(728), bool], Tensor[(91), int64], Tensor[(2, 14, 3), float32]) {
  @func_2282(%var_2283) /* ty=(Tensor[(13, 7, 8), bool], Tensor[(728), bool], Tensor[(91), int64], Tensor[(2, 14, 3), float32]) */
}

def @func_4243() -> Tensor[(7, 15, 12), int8] {
  @func_4241() /* ty=Tensor[(7, 15, 12), int8] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen53/build/output.py:1806: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen53/build/output.py", line 1811, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(240) tvmgen_default_fused_acosh_kernel0(double* __restrict__ T_acosh, double* __restrict__ placeholder) {
  T_acosh[(((int)threadIdx.x))] = acosh(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

