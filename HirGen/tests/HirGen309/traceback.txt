==========mod==========
#[version = "0.0.5"]
def @func_2751(%var_2717: Tensor[(12, 1, 5), float64], %var_2722: Tensor[(560), float32]) -> (Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(12, 1, 5), float64]) {
  %0 = cast(%var_2722, dtype="float32") /* ty=Tensor[(560), float32] */;
  %1 = reshape(%0, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float32] */;
  %2 = cast(%var_2717, dtype="float64") /* ty=Tensor[(12, 1, 5), float64] */;
  %3 = exp(%2) /* ty=Tensor[(12, 1, 5), float64] */;
  %4 = cast(%3, dtype="float64") /* ty=Tensor[(12, 1, 5), float64] */;
  %5 = @func_1963(%1) /* ty=Tensor[(10, 8, 7), float32] */;
  %6 = cosh(%4) /* ty=Tensor[(12, 1, 5), float64] */;
  (%5, %var_2722, %6)
}

def @func_2579(%var_2556: Tensor[(11, 1, 10), float32], %var_2557: Tensor[(11, 7, 10), float32]) -> (Tensor[(11, 7, 10), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) {
  %7 = cast(%var_2556, dtype="float32") /* ty=Tensor[(11, 1, 10), float32] */;
  %8 = cast(%var_2557, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %10 = reshape(%9, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %11 = floor_divide(%7, %8) /* ty=Tensor[(11, 7, 10), float32] */;
  %12 = @func_1303(%10) /* ty=Tensor[(12, 11, 7), float32] */;
  (%11, %12, meta[relay.Constant][0] /* ty=Tensor[(924), float32] */)
}

def @func_4684(%var_4638: Tensor[(4, 12, 3), int32], %var_4643: Tensor[(4, 12, 3), float32], %var_4651: Tensor[(560), float32]) -> (Tensor[(4, 12, 3), int16], Tensor[(4, 12, 3), float32], Tensor[(60), float64], Tensor[(560), float32], Tensor[(4, 12, 3), int32], Tensor[(4, 12, 3), float32], Tensor[(560), float64]) {
  %13 = @func_3749() /* ty=Tensor[(4, 12, 3), int32] */;
  %14 = cast(%var_4638, dtype="int16") /* ty=Tensor[(4, 12, 3), int16] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="int16") /* ty=Tensor[(4, 12, 3), int16] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %18 = cast(%13, dtype="float32") /* ty=Tensor[(4, 12, 3), float32] */;
  %19 = log10(%18) /* ty=Tensor[(4, 12, 3), float32] */;
  %20 = cast(%var_4643, dtype="float32") /* ty=Tensor[(4, 12, 3), float32] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="float32") /* ty=Tensor[(4, 12, 3), float32] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %24 = cast(%13, dtype="int32") /* ty=Tensor[(4, 12, 3), int32] */;
  %25 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%19, dtype="int32") /* ty=Tensor[(4, 12, 3), int32] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %28 = cast(%13, dtype="float32") /* ty=Tensor[(4, 12, 3), float32] */;
  %29 = cast(meta[relay.Constant][1] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %30 = cast(%var_4651, dtype="float32") /* ty=Tensor[(560), float32] */;
  %31 = reshape(%29, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), float64] */;
  %32 = reshape(%30, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %33 = @func_2751(%31, %32) /* ty=(Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(12, 1, 5), float64]) */;
  %34 = %33.1;
  %35 = cast(%34, dtype="float32") /* ty=Tensor[(560), float32] */;
  %36 = atan(%35) /* ty=Tensor[(560), float32] */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(560), float32] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(1), int32] */;
  %39 = cast(%36, dtype="float64") /* ty=Tensor[(560), float64] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?), float64] */;
  %41 = bitwise_or(%16, %17) /* ty=Tensor[(4, 12, 3), int16] */;
  %42 = floor_divide(%22, %23) /* ty=Tensor[(4, 12, 3), float32] */;
  %43 = left_shift(%26, %27) /* ty=Tensor[(4, 12, 3), int32] */;
  %44 = rsqrt(%28) /* ty=Tensor[(4, 12, 3), float32] */;
  %45 = divide(%39, %40) /* ty=Tensor[(560), float64] */;
  (%41, %42, meta[relay.Constant][1] /* ty=Tensor[(60), float64] */, %var_4651, %43, %44, %45)
}

def @func_4745() -> (Tensor[(4, 12, 1), float32],) {
  %46 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %47 = %46.0;
  (%47,)
}

def @func_4889() -> Tensor[(4, 12, 560), float64] {
  %48 = @func_3554() /* ty=(Tensor[(10, 8, 7), float32], Tensor[(4, 12, 560), float64]) */;
  %48.1
}

def @func_5592(%var_5588: Tensor[(560), float32], %var_5589: Tensor[(450, 2), float64]) -> (Tensor[(4, 12, 1), float32], Tensor[(560, 1), float64], Tensor[(560), float32], Tensor[(450, 2), float64]) {
  %49 = @func_5360() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %50 = %49.0;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(4, 12, 1), float32] */;
  %52 = cast(%var_5588, dtype="float32") /* ty=Tensor[(560), float32] */;
  %53 = cast(%var_5589, dtype="float64") /* ty=Tensor[(450, 2), float64] */;
  %54 = reshape(%52, newshape=[560, 1]) /* ty=Tensor[(560, 1), float32] */;
  %55 = reshape(%53, newshape=[60, 15]) /* ty=Tensor[(60, 15), float64] */;
  %56 = @func_3926(%54, %55) /* ty=(Tensor[(560), float32], Tensor[(60, 15), bool], Tensor[(4, 12, 1), float32], Tensor[(7, 1, 2), float32], Tensor[(14), float32], Tensor[(2, 16, 5), float64], Tensor[(560, 1), float64]) */;
  %57 = exp(%51) /* ty=Tensor[(4, 12, 1), float32] */;
  %58 = %56.6;
  (%57, %58, %var_5588, %var_5589)
}

def @func_2975(%var_2958: Tensor[(3, 9, 3), int64], %var_2965: Tensor[(840), float32]) -> (Tensor[(7, 10, 12), float32], Tensor[(840), float32], Tensor[(3, 9, 3), uint8]) {
  %59 = cast(%var_2965, dtype="float32") /* ty=Tensor[(840), float32] */;
  %60 = reshape(%59, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), float32] */;
  %61 = @func_2096(%60) /* ty=(Tensor[(7, 10, 12), float32], Tensor[(7, 10, 12), float32]) */;
  %62 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 9, 3), int64] */, dtype="int64") /* ty=Tensor[(3, 9, 3), int64] */;
  %63 = shape_of(%var_2958, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%var_2958, dtype="int64") /* ty=Tensor[(3, 9, 3), int64] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %66 = right_shift(%64, %65) /* ty=Tensor[(3, 9, 3), int64] */;
  %67 = cast(%var_2958, dtype="uint8") /* ty=Tensor[(3, 9, 3), uint8] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="uint8") /* ty=Tensor[(3, 9, 3), uint8] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %71 = %61.1;
  %72 = bitwise_xor(%69, %70) /* ty=Tensor[(3, 9, 3), uint8] */;
  (%71, %var_2965, %72)
}

def @func_5085() -> (Tensor[(4, 12, 560), float64],) {
  %73 = @func_4889() /* ty=Tensor[(4, 12, 560), float64] */;
  (%73,)
}

def @func_8151(%var_8131: Tensor[(9, 16, 4), float64], %var_8132: Tensor[(9, 16, 4), float64]) -> Tensor[(9, 16, 4), bool] {
  %74 = cast(%var_8132, dtype="bool") /* ty=Tensor[(9, 16, 4), bool] */;
  %75 = shape_of(%var_8131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%var_8131, dtype="bool") /* ty=Tensor[(9, 16, 4), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%76, %77) /* ty=Tensor[(9, 16, 4), bool] */
}

def @func_5320() -> Tensor[(4, 12, 924), uint16] {
  %78 = @func_4551() /* ty=(Tensor[(4, 12, 924), bool],) */;
  %79 = %78.0;
  %80 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 12, 924), bool] */, dtype="uint16") /* ty=Tensor[(4, 12, 924), uint16] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%79, dtype="uint16") /* ty=Tensor[(4, 12, 924), uint16] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  maximum(%82, %83) /* ty=Tensor[(4, 12, 924), uint16] */
}

def @func_1523(%var_1500: Tensor[(6, 2, 5), int32], %var_1514: Tensor[(14), float32]) -> (Tensor[(6, 2, 5), bool], Tensor[(7, 1, 2), float32], Tensor[(14), float32]) {
  %84 = cast(%var_1500, dtype="bool") /* ty=Tensor[(6, 2, 5), bool] */;
  %85 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(6, 2, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 2, 5), int32] */, dtype="bool") /* ty=Tensor[(6, 2, 5), bool] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %88 = cast(%var_1514, dtype="float32") /* ty=Tensor[(14), float32] */;
  %89 = reshape(%88, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), float32] */;
  %90 = greater(%86, %87) /* ty=Tensor[(6, 2, 5), bool] */;
  %91 = @func_590(%89) /* ty=Tensor[(7, 1, 2), float32] */;
  (%90, %91, %var_1514)
}

def @func_3044() -> Tensor[(4, 12, 1), float32] {
  %92 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(4, 12, 1), float32] */;
  sinh(%92) /* ty=Tensor[(4, 12, 1), float32] */
}

def @func_954(%var_939: Tensor[(10, 13, 5), int32]) -> (Tensor[(10, 13, 5), int32],) {
  %93 = cast(%var_939, dtype="int32") /* ty=Tensor[(10, 13, 5), int32] */;
  %94 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(10, 13, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 13, 5), int32] */, dtype="int32") /* ty=Tensor[(10, 13, 5), int32] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %97 = bitwise_and(%95, %96) /* ty=Tensor[(10, 13, 5), int32] */;
  (%97,)
}

def @func_3554() -> (Tensor[(10, 8, 7), float32], Tensor[(4, 12, 560), float64]) {
  %98 = cast(meta[relay.Constant][8] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %99 = reshape(%98, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float32] */;
  %100 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %101 = %100.0;
  %102 = cast(meta[relay.Constant][8] /* ty=Tensor[(560), float32] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %103 = cast(%101, dtype="float64") /* ty=Tensor[(4, 12, 1), float64] */;
  %104 = @func_1963(%99) /* ty=Tensor[(10, 8, 7), float32] */;
  %105 = add(%102, %103) /* ty=Tensor[(4, 12, 560), float64] */;
  (%104, %105)
}

def @func_4392(%var_4318: Tensor[(1, 12, 9), int32], %var_4369: Tensor[(60), int32], %var_4383: Tensor[(650), int32]) -> (Tensor[(3, 12, 9), bool], Tensor[(9, 14, 12), uint32], Tensor[(6, 16, 12), float32], Tensor[(1512), float32], Tensor[(7, 1, 2), float32], Tensor[(60), int32], Tensor[(14), float32], Tensor[(10, 13, 5), int32], Tensor[(650), int32], Tensor[(1152), bool]) {
  %106 = cast(%var_4318, dtype="bool") /* ty=Tensor[(1, 12, 9), bool] */;
  %107 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 12, 9), int32] */, dtype="bool") /* ty=Tensor[(3, 12, 9), bool] */;
  %108 = cast(meta[relay.Constant][10] /* ty=Tensor[(1512), uint32] */, dtype="uint32") /* ty=Tensor[(1512), uint32] */;
  %109 = reshape(%108, newshape=[9, 14, 12]) /* ty=Tensor[(9, 14, 12), uint32] */;
  %110 = cast(meta[relay.Constant][11] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %111 = reshape(%110, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), float32] */;
  %112 = @func_1539(%111) /* ty=Tensor[(6, 16, 12), float32] */;
  %113 = cast(meta[relay.Constant][11] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%112, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %117 = cast(meta[relay.Constant][10] /* ty=Tensor[(1512), uint32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %118 = cast(%var_4369, dtype="int32") /* ty=Tensor[(60), int32] */;
  %119 = cast(meta[relay.Constant][12] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %120 = reshape(%118, newshape=[6, 2, 5]) /* ty=Tensor[(6, 2, 5), int32] */;
  %121 = reshape(%119, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %122 = @func_1523(%120, %121) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(7, 1, 2), float32], Tensor[(14), float32]) */;
  %123 = cast(%var_4383, dtype="int32") /* ty=Tensor[(650), int32] */;
  %124 = reshape(%123, newshape=[10, 13, 5]) /* ty=Tensor[(10, 13, 5), int32] */;
  %125 = @func_954(%124) /* ty=(Tensor[(10, 13, 5), int32],) */;
  %126 = cast(meta[relay.Constant][11] /* ty=Tensor[(1152), float32] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %127 = sinh(%126) /* ty=Tensor[(1152), float64] */;
  %128 = cast(meta[relay.Constant][11] /* ty=Tensor[(1152), float32] */, dtype="bool") /* ty=Tensor[(1152), bool] */;
  %129 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%112, dtype="bool") /* ty=Tensor[(6, 16, 12), bool] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %132 = logical_or(%130, %131) /* ty=Tensor[(6, 16, 12), bool] */;
  %133 = cast(%132, dtype="bool") /* ty=Tensor[(6, 16, 12), bool] */;
  %134 = shape_of(%127, dtype="int32") /* ty=Tensor[(1), int32] */;
  %135 = cast(%127, dtype="bool") /* ty=Tensor[(1152), bool] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?), bool] */;
  %137 = greater_equal(%106, %107) /* ty=Tensor[(3, 12, 9), bool] */;
  %138 = @func_2157(%109) /* ty=Tensor[(9, 14, 12), uint32] */;
  %139 = floor_mod(%115, %116) /* ty=Tensor[(6, 16, 12), float32] */;
  %140 = acosh(%117) /* ty=Tensor[(1512), float32] */;
  %141 = %122.1;
  %142 = %125.0;
  %143 = greater_equal(%135, %136) /* ty=Tensor[(1152), bool] */;
  (%137, %138, %139, %140, %141, %var_4369, meta[relay.Constant][12] /* ty=Tensor[(14), float32] */, %142, %var_4383, %143)
}

def @func_3749() -> Tensor[(4, 12, 3), int32] {
  %144 = @func_3044() /* ty=Tensor[(4, 12, 1), float32] */;
  %145 = cast(%144, dtype="uint64") /* ty=Tensor[(4, 12, 1), uint64] */;
  %146 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 12, 3), float32] */, dtype="uint64") /* ty=Tensor[(4, 12, 3), uint64] */;
  %147 = maximum(%145, %146) /* ty=Tensor[(4, 12, 3), uint64] */;
  %148 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 12, 3), float32] */, dtype="int32") /* ty=Tensor[(4, 12, 3), int32] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="int32") /* ty=Tensor[(4, 12, 3), int32] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%150, %151) /* ty=Tensor[(4, 12, 3), int32] */
}

def @func_5185() -> (Tensor[(2, 16, 5), float64], Tensor[(924), float32], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) {
  %152 = @func_3355() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %153 = @func_4517() /* ty=(Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */;
  %154 = cast(meta[relay.Constant][14] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %155 = reshape(%154, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float64] */;
  %156 = @func_41(%155) /* ty=(Tensor[(15, 4, 8), int8],) */;
  %157 = %152.0;
  %158 = %153.3;
  %159 = %156.0;
  (%157, %158, %159, meta[relay.Constant][14] /* ty=Tensor[(480), float64] */)
}

def @func_41(%var_3: Tensor[(15, 4, 8), float64]) -> (Tensor[(15, 4, 8), int8],) {
  %160 = cast(%var_3, dtype="float64") /* ty=Tensor[(15, 4, 8), float64] */;
  %161 = sqrt(%160) /* ty=Tensor[(15, 4, 8), float64] */;
  %162 = cast(%var_3, dtype="int8") /* ty=Tensor[(15, 4, 8), int8] */;
  %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(%161, dtype="int8") /* ty=Tensor[(15, 4, 8), int8] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %166 = logical_xor(%164, %165) /* ty=Tensor[(15, 4, 8), int8] */;
  (%166,)
}

def @func_2157(%var_2150: Tensor[(9, 14, 12), uint32]) -> Tensor[(9, 14, 12), uint32] {
  %167 = cast(%var_2150, dtype="uint32") /* ty=Tensor[(9, 14, 12), uint32] */;
  %168 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(9, 14, 12), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 14, 12), uint32] */, dtype="uint32") /* ty=Tensor[(9, 14, 12), uint32] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%169, %170) /* ty=Tensor[(9, 14, 12), uint32] */
}

def @func_7292(%var_7270: Tensor[(4, 4), float32]) -> (Tensor[(10, 8, 7), float32], Tensor[(924), float32], Tensor[(4, 4), float32], Tensor[(14), float32], Tensor[(60), int32], Tensor[(14), float32]) {
  %171 = cast(%var_7270, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %172 = reshape(%171, newshape=[16]) /* ty=Tensor[(16), float32] */;
  %173 = @func_5259(%172) /* ty=(Tensor[(924), float32], Tensor[(?, 2, 8), bool], Tensor[(16), float32]) */;
  %174 = cast(meta[relay.Constant][16] /* ty=Tensor[(60), int32] */, dtype="int32") /* ty=Tensor[(60), int32] */;
  %175 = cast(meta[relay.Constant][17] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %176 = reshape(%174, newshape=[6, 2, 5]) /* ty=Tensor[(6, 2, 5), int32] */;
  %177 = reshape(%175, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %178 = @func_1523(%176, %177) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(7, 1, 2), float32], Tensor[(14), float32]) */;
  %179 = @func_6148() /* ty=Tensor[(10, 8, 7), float32] */;
  %180 = %173.0;
  %181 = %178.2;
  (%179, %180, %var_7270, %181, meta[relay.Constant][16] /* ty=Tensor[(60), int32] */, meta[relay.Constant][17] /* ty=Tensor[(14), float32] */)
}

def @func_7734(%var_7708: Tensor[(480), float64]) -> (Tensor[(12, 6, 4), float32], Tensor[(288), float32], Tensor[(560), float32], Tensor[(480), float64], Tensor[(4, 12, 1008), int16], Tensor[(2, 16, 5), float64], Tensor[(480), float64]) {
  %182 = cast(meta[relay.Constant][18] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %183 = cast(meta[relay.Constant][19] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %184 = cast(meta[relay.Constant][20] /* ty=Tensor[(1008), uint8] */, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %185 = cast(%var_7708, dtype="float64") /* ty=Tensor[(480), float64] */;
  %186 = reshape(%182, newshape=[12, 6, 4]) /* ty=Tensor[(12, 6, 4), float32] */;
  %187 = reshape(%183, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %188 = reshape(%184, newshape=[1008]) /* ty=Tensor[(1008), uint8] */;
  %189 = reshape(%185, newshape=[120, 4]) /* ty=Tensor[(120, 4), float64] */;
  %190 = @func_2899(%186, %187, %188, %189) /* ty=(Tensor[(12, 6, 4), float32], Tensor[(10, 8, 7), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8], Tensor[(7, 9, 9), uint64], Tensor[(1, 81), uint64], Tensor[(9, 63), uint64], Tensor[(120, 4), float64]) */;
  %191 = @func_7397() /* ty=(Tensor[(4, 12, ?), float64],) */;
  %192 = %191.0;
  %193 = cast(meta[relay.Constant][20] /* ty=Tensor[(1008), uint8] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %194 = cast(%192, dtype="int16") /* ty=Tensor[(4, 12, ?), int16] */;
  %195 = @func_4246() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %196 = @func_6768() /* ty=(Tensor[(4, 12, 924), float32], Tensor[(15, 4, 8), int8], Tensor[(480), float64], Tensor[(4, 12, 924), float32]) */;
  %197 = %190.0;
  %198 = logical_xor(%193, %194) /* ty=Tensor[(4, 12, 1008), int16] */;
  %199 = %195.0;
  %200 = %196.2;
  (%197, meta[relay.Constant][18] /* ty=Tensor[(288), float32] */, meta[relay.Constant][19] /* ty=Tensor[(560), float32] */, %var_7708, %198, %199, %200)
}

def @func_5444(%var_5429: Tensor[(4, 12, 924), bool]) -> (Tensor[(4, 12, 924), uint32], Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32]) {
  %201 = @func_4551() /* ty=(Tensor[(4, 12, 924), bool],) */;
  %202 = %201.0;
  %203 = cast(%var_5429, dtype="uint32") /* ty=Tensor[(4, 12, 924), uint32] */;
  %204 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%202, dtype="uint32") /* ty=Tensor[(4, 12, 924), uint32] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %207 = @func_4745() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %208 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %209 = minimum(%205, %206) /* ty=Tensor[(4, 12, 924), uint32] */;
  %210 = %207.0;
  %211 = %208.0;
  (%209, %210, %211)
}

def @func_8083(%var_8062: Tensor[(210), float64], %var_8072: Tensor[(1, 336), float32], %var_8076: Tensor[(81), int64], %var_8077: Tensor[(2, 420), float32]) -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(210), float64], Tensor[(7, 8, 6), float32], Tensor[(1, 336), float32], Tensor[(81), int64], Tensor[(81), int64], Tensor[(2, 420), float32]) {
  %212 = cast(%var_8062, dtype="float64") /* ty=Tensor[(210), float64] */;
  %213 = reshape(%212, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float64] */;
  %214 = @func_3665(%213) /* ty=(Tensor[(1, 15, 14), float64], Tensor[(4, 12, 1), float32]) */;
  %215 = cast(%var_8072, dtype="float32") /* ty=Tensor[(1, 336), float32] */;
  %216 = reshape(%215, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), float32] */;
  %217 = @func_7492(%216) /* ty=(Tensor[(7, 8, 6), float32],) */;
  %218 = cast(%var_8076, dtype="int64") /* ty=Tensor[(81), int64] */;
  %219 = cast(%var_8077, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
  %220 = reshape(%218, newshape=[81]) /* ty=Tensor[(81), int64] */;
  %221 = reshape(%219, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %222 = @func_3703(%220, %221) /* ty=(Tensor[(2, 16, 5), float64], Tensor[(840), float32], Tensor[(81), int64], Tensor[(840), float32]) */;
  %223 = @func_5144() /* ty=Tensor[(4, 12, 1), float32] */;
  %224 = %214.1;
  %225 = %217.0;
  %226 = %222.2;
  (%223, %224, %var_8062, %225, %var_8072, %226, %var_8076, %var_8077)
}

def @func_3223() -> (Tensor[(4, 12, 1), float32],) {
  %227 = @func_3044() /* ty=Tensor[(4, 12, 1), float32] */;
  (%227,)
}

def @func_7397() -> (Tensor[(4, 12, ?), float64],) {
  %228 = @func_7196() /* ty=Tensor[(4, 12, ?), float64] */;
  (%228,)
}

def @main(%var_8584: Tensor[(4, 12, 9), float32]) -> (Tensor[(4, 12, 9), int32], Tensor[(4, 12, 560), float32], Tensor[(7, 1, 2), float32], Tensor[(26880), uint8]) {
  %229 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %230 = %229.0;
  %231 = cast(%230, dtype="int32") /* ty=Tensor[(4, 12, 1), int32] */;
  %232 = cast(%var_8584, dtype="int32") /* ty=Tensor[(4, 12, 9), int32] */;
  %233 = cast(meta[relay.Constant][21] /* ty=Tensor[(26880), float64] */, dtype="float64") /* ty=Tensor[(26880), float64] */;
  %234 = reshape(%233, newshape=[4, 12, 560]) /* ty=Tensor[(4, 12, 560), float64] */;
  %235 = @func_8309(%234) /* ty=(Tensor[(4, 12, 560), float32],) */;
  %236 = @func_6118() /* ty=(Tensor[(12, 11, 7), float32], Tensor[(7, 1, 2), float32], Tensor[(1, 14), float32]) */;
  %237 = cast(meta[relay.Constant][22] /* ty=Tensor[(26880), float64] */, dtype="uint8") /* ty=Tensor[(26880), uint8] */;
  %238 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(26880), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %239 = cast(meta[relay.Constant][21] /* ty=Tensor[(26880), float64] */, dtype="uint8") /* ty=Tensor[(26880), uint8] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %241 = add(%239, %240) /* ty=Tensor[(26880), uint8] */;
  %242 = cast(meta[relay.Constant][22] /* ty=Tensor[(26880), float64] */, dtype="uint8") /* ty=Tensor[(26880), uint8] */;
  %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(1), int32] */;
  %244 = cast(%241, dtype="uint8") /* ty=Tensor[(26880), uint8] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %246 = right_shift(%231, %232) /* ty=Tensor[(4, 12, 9), int32] */;
  %247 = %235.0;
  %248 = %236.1;
  %249 = bitwise_xor(%244, %245) /* ty=Tensor[(26880), uint8] */;
  (%246, %247, %248, %249)
}

def @func_2938(%var_2922: Tensor[(1, 2, 8), float32]) -> (Tensor[(?, 2, 8), bool],) {
  %250 = cast(%var_2922, dtype="float32") /* ty=Tensor[(1, 2, 8), float32] */;
  %251 = log(%250) /* ty=Tensor[(1, 2, 8), float32] */;
  %252 = cast(%var_2922, dtype="bool") /* ty=Tensor[(1, 2, 8), bool] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%251, dtype="bool") /* ty=Tensor[(1, 2, 8), bool] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %256 = logical_or(%254, %255) /* ty=Tensor[(?, 2, 8), bool] */;
  (%256,)
}

def @func_5259(%var_5225: Tensor[(16), float32]) -> (Tensor[(924), float32], Tensor[(?, 2, 8), bool], Tensor[(16), float32]) {
  %257 = @func_3121() /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) */;
  %258 = cast(%var_5225, dtype="float32") /* ty=Tensor[(16), float32] */;
  %259 = reshape(%258, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), float32] */;
  %260 = @func_2938(%259) /* ty=(Tensor[(?, 2, 8), bool],) */;
  %261 = %257.3;
  %262 = %260.0;
  (%261, %262, %var_5225)
}

def @func_3594(%var_3586: Tensor[(40, 12), float64]) -> (Tensor[(12, 12, 7), bool], Tensor[(15, 4, 8), float64], Tensor[(9, 9), uint64], Tensor[(567), uint64], Tensor[(40, 12), float64], Tensor[(4, 12, 1), float32]) {
  %263 = @func_3121() /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) */;
  %264 = cast(meta[relay.Constant][23] /* ty=Tensor[(9, 9), uint64] */, dtype="uint64") /* ty=Tensor[(9, 9), uint64] */;
  %265 = cast(meta[relay.Constant][24] /* ty=Tensor[(567), uint64] */, dtype="uint64") /* ty=Tensor[(567), uint64] */;
  %266 = cast(%var_3586, dtype="float64") /* ty=Tensor[(40, 12), float64] */;
  %267 = reshape(%264, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), uint64] */;
  %268 = reshape(%265, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), uint64] */;
  %269 = reshape(%266, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %270 = @func_403(%267, %268, %269) /* ty=(Tensor[(7, 9, 9), uint64], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int32], Tensor[(15, 4, 8), float64], Tensor[(7, 10, 8), bool]) */;
  %271 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %272 = %263.4;
  %273 = %270.4;
  %274 = %271.0;
  (%272, %273, meta[relay.Constant][23] /* ty=Tensor[(9, 9), uint64] */, meta[relay.Constant][24] /* ty=Tensor[(567), uint64] */, %var_3586, %274)
}

def @func_198(%var_190: Tensor[(480), float64]) -> (Tensor[(7, 10, 8), bool], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) {
  %275 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 10, 8), float64] */, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
  %276 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(7, 10, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 10, 8), float64] */, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %279 = cast(%var_190, dtype="float64") /* ty=Tensor[(480), float64] */;
  %280 = reshape(%279, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float64] */;
  %281 = @func_41(%280) /* ty=(Tensor[(15, 4, 8), int8],) */;
  %282 = greater(%277, %278) /* ty=Tensor[(7, 10, 8), bool] */;
  %283 = %281.0;
  (%282, %283, %var_190)
}

def @func_5735() -> (Tensor[(4, 12, 560), float64],) {
  %284 = @func_3554() /* ty=(Tensor[(10, 8, 7), float32], Tensor[(4, 12, 560), float64]) */;
  %285 = %284.1;
  (%285,)
}

def @func_3703(%var_3699: Tensor[(81), int64], %var_3700: Tensor[(840), float32]) -> (Tensor[(2, 16, 5), float64], Tensor[(840), float32], Tensor[(81), int64], Tensor[(840), float32]) {
  %286 = @func_3442() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %287 = cast(%var_3699, dtype="int64") /* ty=Tensor[(81), int64] */;
  %288 = cast(%var_3700, dtype="float32") /* ty=Tensor[(840), float32] */;
  %289 = reshape(%287, newshape=[3, 9, 3]) /* ty=Tensor[(3, 9, 3), int64] */;
  %290 = reshape(%288, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %291 = @func_2975(%289, %290) /* ty=(Tensor[(7, 10, 12), float32], Tensor[(840), float32], Tensor[(3, 9, 3), uint8]) */;
  %292 = %286.0;
  %293 = %291.1;
  (%292, %293, %var_3699, %var_3700)
}

def @func_5144() -> Tensor[(4, 12, 1), float32] {
  %294 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %294.0
}

def @func_1963(%var_1960: Tensor[(10, 8, 7), float32]) -> Tensor[(10, 8, 7), float32] {
  %295 = cast(%var_1960, dtype="float32") /* ty=Tensor[(10, 8, 7), float32] */;
  sinh(%295) /* ty=Tensor[(10, 8, 7), float32] */
}

def @func_4841() -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32]) {
  %296 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %297 = %296.0;
  %298 = @func_4598() /* ty=Tensor[(4, 12, 1), float32] */;
  (%297, %298)
}

def @func_5523(%var_5497: Tensor[(3, 5, 6), float64], %var_5507: Tensor[(3, 5, 6), float64]) -> (Tensor[(3, 5, 6), float64], Tensor[(3, 5, 6), bool], Tensor[(3, 5, 6), bool]) {
  %299 = cast(%var_5497, dtype="float64") /* ty=Tensor[(3, 5, 6), float64] */;
  %300 = cast(%var_5507, dtype="bool") /* ty=Tensor[(3, 5, 6), bool] */;
  %301 = shape_of(%var_5497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%var_5497, dtype="bool") /* ty=Tensor[(3, 5, 6), bool] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %304 = cast(%var_5497, dtype="bool") /* ty=Tensor[(3, 5, 6), bool] */;
  %305 = shape_of(%var_5507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%var_5507, dtype="bool") /* ty=Tensor[(3, 5, 6), bool] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %308 = acosh(%299) /* ty=Tensor[(3, 5, 6), float64] */;
  %309 = greater_equal(%302, %303) /* ty=Tensor[(3, 5, 6), bool] */;
  %310 = less(%306, %307) /* ty=Tensor[(3, 5, 6), bool] */;
  (%308, %309, %310)
}

def @func_7222() -> Tensor[(2, 16, 5), float64] {
  %311 = @func_4246() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %311.0
}

def @func_8001(%var_7999: Tensor[(560), float32]) -> (Tensor[(2, 16, 5), float64], Tensor[(10, 8, 7), float32], Tensor[(560), float32]) {
  %312 = @func_7056() /* ty=(Tensor[(2, 16, 5), float64], Tensor[(4, 12, 924), uint16], Tensor[(7, 10, 12), float32], Tensor[(840), float32]) */;
  %313 = cast(%var_7999, dtype="float32") /* ty=Tensor[(560), float32] */;
  %314 = reshape(%313, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float32] */;
  %315 = %312.0;
  %316 = @func_1963(%314) /* ty=Tensor[(10, 8, 7), float32] */;
  (%315, %316, %var_7999)
}

def @func_1632(%var_1624: Tensor[(12, 12, 7), uint8], %var_1625: Tensor[(12, 12, 7), uint8]) -> (Tensor[(12, 12, 7), bool],) {
  %317 = cast(%var_1625, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %318 = shape_of(%var_1624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%var_1624, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %321 = greater(%319, %320) /* ty=Tensor[(12, 12, 7), bool] */;
  (%321,)
}

def @func_5161(%var_5159: Tensor[(14), float32]) -> (Tensor[(4, 12, 3), float64], Tensor[(10, 13, 5), int32], Tensor[(210), float64], Tensor[(650, 1), int32], Tensor[(7, 1, 2), float32], Tensor[(14), float32]) {
  %322 = @func_3749() /* ty=Tensor[(4, 12, 3), int32] */;
  %323 = cast(%322, dtype="float64") /* ty=Tensor[(4, 12, 3), float64] */;
  %324 = cast(meta[relay.Constant][27] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %325 = cast(meta[relay.Constant][28] /* ty=Tensor[(650, 1), int32] */, dtype="int32") /* ty=Tensor[(650, 1), int32] */;
  %326 = reshape(%324, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %327 = reshape(%325, newshape=[650]) /* ty=Tensor[(650), int32] */;
  %328 = @func_4153(%326, %327) /* ty=(Tensor[(12, 12, 7), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64], Tensor[(10, 13, 5), int32], Tensor[(650), int32]) */;
  %329 = cast(%var_5159, dtype="float32") /* ty=Tensor[(14), float32] */;
  %330 = reshape(%329, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), float32] */;
  %331 = sinh(%323) /* ty=Tensor[(4, 12, 3), float64] */;
  %332 = %328.3;
  %333 = @func_590(%330) /* ty=Tensor[(7, 1, 2), float32] */;
  (%331, %332, meta[relay.Constant][27] /* ty=Tensor[(210), float64] */, meta[relay.Constant][28] /* ty=Tensor[(650, 1), int32] */, %333, %var_5159)
}

def @func_6768() -> (Tensor[(4, 12, 924), float32], Tensor[(15, 4, 8), int8], Tensor[(480), float64], Tensor[(4, 12, 924), float32]) {
  %334 = @func_4551() /* ty=(Tensor[(4, 12, 924), bool],) */;
  %335 = %334.0;
  %336 = cast(%335, dtype="float32") /* ty=Tensor[(4, 12, 924), float32] */;
  %337 = cast(meta[relay.Constant][29] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %338 = reshape(%337, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float64] */;
  %339 = @func_41(%338) /* ty=(Tensor[(15, 4, 8), int8],) */;
  %340 = cast(%335, dtype="float32") /* ty=Tensor[(4, 12, 924), float32] */;
  %341 = tan(%336) /* ty=Tensor[(4, 12, 924), float32] */;
  %342 = %339.0;
  %343 = atan(%340) /* ty=Tensor[(4, 12, 924), float32] */;
  (%341, %342, meta[relay.Constant][29] /* ty=Tensor[(480), float64] */, %343)
}

def @func_3259() -> (Tensor[(4, 12, 1), float32],) {
  %344 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %345 = %344.0;
  (%345,)
}

def @func_3121() -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) {
  %346 = @func_3044() /* ty=Tensor[(4, 12, 1), float32] */;
  %347 = cast(%346, dtype="float32") /* ty=Tensor[(4, 12, 1), float32] */;
  %348 = cast(%346, dtype="float32") /* ty=Tensor[(4, 12, 1), float32] */;
  %349 = cast(meta[relay.Constant][30] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %350 = reshape(%349, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %351 = cast(meta[relay.Constant][31] /* ty=Tensor[(1008), uint8] */, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %352 = cast(meta[relay.Constant][31] /* ty=Tensor[(1008), uint8] */, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %353 = reshape(%351, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), uint8] */;
  %354 = reshape(%352, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), uint8] */;
  %355 = @func_1632(%353, %354) /* ty=(Tensor[(12, 12, 7), bool],) */;
  %356 = erf(%347) /* ty=Tensor[(4, 12, 1), float32] */;
  %357 = asinh(%348) /* ty=Tensor[(4, 12, 1), float32] */;
  %358 = @func_1303(%350) /* ty=Tensor[(12, 11, 7), float32] */;
  %359 = %355.0;
  (%356, %357, %358, meta[relay.Constant][30] /* ty=Tensor[(924), float32] */, %359, meta[relay.Constant][31] /* ty=Tensor[(1008), uint8] */)
}

def @func_6641(%var_6630: Tensor[(288), int32]) -> (Tensor[(4, 12, 560), float64], Tensor[(4, 12, 1), float32], Tensor[(288), int32]) {
  %360 = @func_5735() /* ty=(Tensor[(4, 12, 560), float64],) */;
  %361 = cast(%var_6630, dtype="int32") /* ty=Tensor[(288), int32] */;
  %362 = reshape(%361, newshape=[6, 8, 6]) /* ty=Tensor[(6, 8, 6), int32] */;
  %363 = @func_6130(%362) /* ty=(Tensor[(6, 8, 6), int32], Tensor[(6, 8, 6), float32], Tensor[(4, 12, 1), float32]) */;
  %364 = %360.0;
  %365 = %363.2;
  (%364, %365, %var_6630)
}

def @func_6148() -> Tensor[(10, 8, 7), float32] {
  @func_4765() /* ty=Tensor[(10, 8, 7), float32] */
}

def @func_3926(%var_3836: Tensor[(560, 1), float32], %var_3843: Tensor[(60, 15), float64]) -> (Tensor[(560), float32], Tensor[(60, 15), bool], Tensor[(4, 12, 1), float32], Tensor[(7, 1, 2), float32], Tensor[(14), float32], Tensor[(2, 16, 5), float64], Tensor[(560, 1), float64]) {
  %366 = cast(meta[relay.Constant][32] /* ty=Tensor[(60, 1), float64] */, dtype="float64") /* ty=Tensor[(60, 1), float64] */;
  %367 = cast(%var_3836, dtype="float32") /* ty=Tensor[(560, 1), float32] */;
  %368 = reshape(%366, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), float64] */;
  %369 = reshape(%367, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %370 = @func_2751(%368, %369) /* ty=(Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(12, 1, 5), float64]) */;
  %371 = cast(meta[relay.Constant][32] /* ty=Tensor[(60, 1), float64] */, dtype="bool") /* ty=Tensor[(60, 1), bool] */;
  %372 = cast(%var_3843, dtype="bool") /* ty=Tensor[(60, 15), bool] */;
  %373 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %374 = cast(meta[relay.Constant][32] /* ty=Tensor[(60, 1), float64] */, dtype="int32") /* ty=Tensor[(60, 1), int32] */;
  %375 = cast(meta[relay.Constant][33] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %376 = reshape(%374, newshape=[6, 2, 5]) /* ty=Tensor[(6, 2, 5), int32] */;
  %377 = reshape(%375, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %378 = @func_1523(%376, %377) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(7, 1, 2), float32], Tensor[(14), float32]) */;
  %379 = @func_3442() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %380 = %379.0;
  %381 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 16, 5), float64] */, dtype="bool") /* ty=Tensor[(2, 16, 5), bool] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%380, dtype="bool") /* ty=Tensor[(2, 16, 5), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %385 = greater(%383, %384) /* ty=Tensor[(2, 16, 5), bool] */;
  %386 = @func_3442() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %387 = %386.0;
  %388 = cast(%387, dtype="float64") /* ty=Tensor[(2, 16, 5), float64] */;
  %389 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%385, dtype="float64") /* ty=Tensor[(2, 16, 5), float64] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %392 = cast(%var_3836, dtype="float32") /* ty=Tensor[(560, 1), float32] */;
  %393 = cos(%392) /* ty=Tensor[(560, 1), float32] */;
  %394 = cast(%393, dtype="float64") /* ty=Tensor[(560, 1), float64] */;
  %395 = %370.1;
  %396 = greater_equal(%371, %372) /* ty=Tensor[(60, 15), bool] */;
  %397 = %373.0;
  %398 = %378.1;
  %399 = subtract(%390, %391) /* ty=Tensor[(2, 16, 5), float64] */;
  %400 = rsqrt(%394) /* ty=Tensor[(560, 1), float64] */;
  (%395, %396, %397, %398, meta[relay.Constant][33] /* ty=Tensor[(14), float32] */, %399, %400)
}

def @func_5889(%var_5869: Tensor[(1200), float64], %var_5870: Tensor[(81, 1), uint64], %var_5871: Tensor[(480), float64]) -> (Tensor[(81), uint64], Tensor[(240), float64], Tensor[(1200), float64], Tensor[(81, 1), uint64], Tensor[(480), float64], Tensor[(?, 2, 8), bool], Tensor[(16), float32], Tensor[(4, 12, 560), bool]) {
  %401 = cast(meta[relay.Constant][35] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %402 = cast(%var_5869, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %403 = cast(%var_5870, dtype="uint64") /* ty=Tensor[(81, 1), uint64] */;
  %404 = cast(%var_5871, dtype="float64") /* ty=Tensor[(480), float64] */;
  %405 = reshape(%401, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %406 = reshape(%402, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %407 = reshape(%403, newshape=[81]) /* ty=Tensor[(81), uint64] */;
  %408 = reshape(%404, newshape=[40, 12]) /* ty=Tensor[(40, 12), float64] */;
  %409 = @func_4052(%405, %406, %407, %408) /* ty=(Tensor[(5, 15, 16), uint32], Tensor[(5, 15, 16), float32], Tensor[(81), uint64], Tensor[(567), uint64], Tensor[(15, 4, 8), int8]) */;
  %410 = cast(meta[relay.Constant][36] /* ty=Tensor[(16), float32] */, dtype="float32") /* ty=Tensor[(16), float32] */;
  %411 = reshape(%410, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), float32] */;
  %412 = @func_2938(%411) /* ty=(Tensor[(?, 2, 8), bool],) */;
  %413 = @func_5085() /* ty=(Tensor[(4, 12, 560), float64],) */;
  %414 = %413.0;
  %415 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 12, 560), float64] */, dtype="bool") /* ty=Tensor[(4, 12, 560), bool] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="bool") /* ty=Tensor[(4, 12, 560), bool] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %419 = %409.2;
  %420 = %412.0;
  %421 = less_equal(%417, %418) /* ty=Tensor[(4, 12, 560), bool] */;
  (%419, meta[relay.Constant][35] /* ty=Tensor[(240), float64] */, %var_5869, %var_5870, %var_5871, %420, meta[relay.Constant][36] /* ty=Tensor[(16), float32] */, %421)
}

def @func_8052() -> (Tensor[(10, 8, 7), float32], Tensor[(3, 5, 6), bool], Tensor[(90), float64]) {
  %422 = @func_7621() /* ty=(Tensor[(10, 8, 7), float32],) */;
  %423 = cast(meta[relay.Constant][38] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %424 = cast(meta[relay.Constant][38] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %425 = reshape(%423, newshape=[3, 5, 6]) /* ty=Tensor[(3, 5, 6), float64] */;
  %426 = reshape(%424, newshape=[3, 5, 6]) /* ty=Tensor[(3, 5, 6), float64] */;
  %427 = @func_5523(%425, %426) /* ty=(Tensor[(3, 5, 6), float64], Tensor[(3, 5, 6), bool], Tensor[(3, 5, 6), bool]) */;
  %428 = %422.0;
  %429 = %427.1;
  (%428, %429, meta[relay.Constant][38] /* ty=Tensor[(90), float64] */)
}

def @func_7056() -> (Tensor[(2, 16, 5), float64], Tensor[(4, 12, 924), uint16], Tensor[(7, 10, 12), float32], Tensor[(840), float32]) {
  %430 = @func_3442() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %431 = cast(meta[relay.Constant][39] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %432 = reshape(%431, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), float32] */;
  %433 = @func_2096(%432) /* ty=(Tensor[(7, 10, 12), float32], Tensor[(7, 10, 12), float32]) */;
  %434 = %430.0;
  %435 = @func_5320() /* ty=Tensor[(4, 12, 924), uint16] */;
  %436 = %433.1;
  (%434, %435, %436, meta[relay.Constant][39] /* ty=Tensor[(840), float32] */)
}

def @func_6118() -> (Tensor[(12, 11, 7), float32], Tensor[(7, 1, 2), float32], Tensor[(1, 14), float32]) {
  %437 = @func_4517() /* ty=(Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */;
  %438 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 14), float32] */, dtype="float32") /* ty=Tensor[(1, 14), float32] */;
  %439 = reshape(%438, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), float32] */;
  %440 = %437.2;
  %441 = @func_590(%439) /* ty=Tensor[(7, 1, 2), float32] */;
  (%440, %441, meta[relay.Constant][40] /* ty=Tensor[(1, 14), float32] */)
}

def @func_7448(%var_7436: Tensor[(60), float64], %var_7437: Tensor[(560), float32]) -> (Tensor[(4, 12, 560), float64], Tensor[(12, 11, 7), float32], Tensor[(12, 1, 5), float64], Tensor[(60), float64], Tensor[(560), float32]) {
  %442 = @func_5735() /* ty=(Tensor[(4, 12, 560), float64],) */;
  %443 = @func_4517() /* ty=(Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */;
  %444 = cast(%var_7436, dtype="float64") /* ty=Tensor[(60), float64] */;
  %445 = cast(%var_7437, dtype="float32") /* ty=Tensor[(560), float32] */;
  %446 = reshape(%444, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), float64] */;
  %447 = reshape(%445, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %448 = @func_2751(%446, %447) /* ty=(Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(12, 1, 5), float64]) */;
  %449 = %442.0;
  %450 = %443.2;
  %451 = %448.2;
  (%449, %450, %451, %var_7436, %var_7437)
}

def @func_7621() -> (Tensor[(10, 8, 7), float32],) {
  %452 = @func_4885() /* ty=Tensor[(10, 8, 7), float32] */;
  (%452,)
}

def @func_7954(%var_7903: Tensor[(9, 7, 14), float64]) -> (Tensor[(9, 7, 14), float64], Tensor[(288), float32], Tensor[(480), float64], Tensor[(6, 16, 12), float32], Tensor[(6, 16, 12), float32]) {
  %453 = cast(%var_7903, dtype="float64") /* ty=Tensor[(9, 7, 14), float64] */;
  %454 = cast(meta[relay.Constant][41] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %455 = reshape(%454, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %456 = @func_7734(%455) /* ty=(Tensor[(12, 6, 4), float32], Tensor[(288), float32], Tensor[(560), float32], Tensor[(480), float64], Tensor[(4, 12, 1008), int16], Tensor[(2, 16, 5), float64], Tensor[(480), float64]) */;
  %457 = cast(meta[relay.Constant][42] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %458 = reshape(%457, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), float32] */;
  %459 = @func_1539(%458) /* ty=Tensor[(6, 16, 12), float32] */;
  %460 = cast(meta[relay.Constant][42] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%459, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %464 = divide(%462, %463) /* ty=Tensor[(6, 16, 12), float32] */;
  %465 = cast(%464, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
  %466 = reshape(%465, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), float32] */;
  %467 = sigmoid(%453) /* ty=Tensor[(9, 7, 14), float64] */;
  %468 = %456.1;
  %469 = @func_1539(%466) /* ty=Tensor[(6, 16, 12), float32] */;
  (%467, %468, meta[relay.Constant][41] /* ty=Tensor[(480), float64] */, %464, %469)
}

def @func_6870() -> (Tensor[(2, 16, 5), float64], Tensor[(4, 12, 924), bool], Tensor[(6, 8, 6), float32], Tensor[(288), int32], Tensor[(924), float32], Tensor[(2, 16, 5), float64]) {
  %470 = @func_4246() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %471 = @func_4551() /* ty=(Tensor[(4, 12, 924), bool],) */;
  %472 = cast(meta[relay.Constant][43] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %473 = reshape(%472, newshape=[6, 8, 6]) /* ty=Tensor[(6, 8, 6), int32] */;
  %474 = @func_6130(%473) /* ty=(Tensor[(6, 8, 6), int32], Tensor[(6, 8, 6), float32], Tensor[(4, 12, 1), float32]) */;
  %475 = @func_4517() /* ty=(Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */;
  %476 = @func_5185() /* ty=(Tensor[(2, 16, 5), float64], Tensor[(924), float32], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) */;
  %477 = %470.0;
  %478 = %471.0;
  %479 = %474.1;
  %480 = %475.3;
  %481 = %476.0;
  (%477, %478, %479, meta[relay.Constant][43] /* ty=Tensor[(288), int32] */, %480, %481)
}

def @func_8466() -> (Tensor[(4, 12, ?), float64], Tensor[(900, 1), float64], Tensor[(900), float64]) {
  %482 = cast(meta[relay.Constant][44] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %483 = reshape(%482, newshape=[900, 1]) /* ty=Tensor[(900, 1), float64] */;
  %484 = @func_7359(%483) /* ty=(Tensor[(4, 12, 1), float32], Tensor[(2, 16, 5), float64], Tensor[(900, 1), float64], Tensor[(1, 455), float32], Tensor[(1, 455), float32]) */;
  %485 = @func_7196() /* ty=Tensor[(4, 12, ?), float64] */;
  %486 = %484.2;
  (%485, %486, meta[relay.Constant][44] /* ty=Tensor[(900), float64] */)
}

def @func_4052(%var_4022: Tensor[(1, 15, 16), float64], %var_4032: Tensor[(5, 15, 16), float64], %var_4041: Tensor[(81), uint64], %var_4043: Tensor[(40, 12), float64]) -> (Tensor[(5, 15, 16), uint32], Tensor[(5, 15, 16), float32], Tensor[(81), uint64], Tensor[(567), uint64], Tensor[(15, 4, 8), int8]) {
  %487 = cast(%var_4022, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
  %488 = log(%487) /* ty=Tensor[(1, 15, 16), float64] */;
  %489 = cast(%488, dtype="uint32") /* ty=Tensor[(1, 15, 16), uint32] */;
  %490 = cast(%var_4032, dtype="uint32") /* ty=Tensor[(5, 15, 16), uint32] */;
  %491 = cast(%var_4032, dtype="float32") /* ty=Tensor[(5, 15, 16), float32] */;
  %492 = cast(%var_4041, dtype="uint64") /* ty=Tensor[(81), uint64] */;
  %493 = cast(meta[relay.Constant][45] /* ty=Tensor[(567), uint64] */, dtype="uint64") /* ty=Tensor[(567), uint64] */;
  %494 = cast(%var_4043, dtype="float64") /* ty=Tensor[(40, 12), float64] */;
  %495 = reshape(%492, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), uint64] */;
  %496 = reshape(%493, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), uint64] */;
  %497 = reshape(%494, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %498 = @func_403(%495, %496, %497) /* ty=(Tensor[(7, 9, 9), uint64], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int32], Tensor[(15, 4, 8), float64], Tensor[(7, 10, 8), bool]) */;
  %499 = %498.4;
  %500 = cast(%var_4043, dtype="int8") /* ty=Tensor[(40, 12), int8] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%499, dtype="int8") /* ty=Tensor[(15, 4, 8), int8] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %504 = right_shift(%489, %490) /* ty=Tensor[(5, 15, 16), uint32] */;
  %505 = sin(%491) /* ty=Tensor[(5, 15, 16), float32] */;
  %506 = bitwise_xor(%502, %503) /* ty=Tensor[(15, 4, 8), int8] */;
  (%504, %505, %var_4041, meta[relay.Constant][45] /* ty=Tensor[(567), uint64] */, %506)
}

def @func_3442() -> (Tensor[(2, 16, 5), float64],) {
  %507 = @func_3355() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %508 = %507.0;
  (%508,)
}

def @func_4551() -> (Tensor[(4, 12, 924), bool],) {
  %509 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %510 = %509.0;
  %511 = @func_4517() /* ty=(Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */;
  %512 = %511.3;
  %513 = cast(%510, dtype="bool") /* ty=Tensor[(4, 12, 1), bool] */;
  %514 = cast(%512, dtype="bool") /* ty=Tensor[(924), bool] */;
  %515 = greater(%513, %514) /* ty=Tensor[(4, 12, 924), bool] */;
  (%515,)
}

def @func_4577() -> Tensor[(2, 16, 5), float64] {
  %516 = @func_3442() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %516.0
}

def @func_5360() -> (Tensor[(4, 12, 1), float32],) {
  %517 = @func_4598() /* ty=Tensor[(4, 12, 1), float32] */;
  (%517,)
}

def @func_4246() -> (Tensor[(2, 16, 5), float64],) {
  %518 = @func_3442() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %519 = %518.0;
  (%519,)
}

def @func_4440(%var_4431: Tensor[(7, 5, 16), uint16], %var_4432: Tensor[(7, 5, 16), uint16]) -> Tensor[(7, 5, 16), uint16] {
  %520 = cast(%var_4432, dtype="uint16") /* ty=Tensor[(7, 5, 16), uint16] */;
  %521 = shape_of(%var_4431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%var_4431, dtype="uint16") /* ty=Tensor[(7, 5, 16), uint16] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  minimum(%522, %523) /* ty=Tensor[(7, 5, 16), uint16] */
}

def @func_8103() -> (Tensor[(10, 4, 15), float64], Tensor[(4, 12, 1), float32]) {
  %524 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 4, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
  %525 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %526 = acosh(%524) /* ty=Tensor[(10, 4, 15), float64] */;
  %527 = %525.0;
  (%526, %527)
}

def @func_2096(%var_2086: Tensor[(7, 10, 12), float32]) -> (Tensor[(7, 10, 12), float32], Tensor[(7, 10, 12), float32]) {
  %528 = cast(%var_2086, dtype="float32") /* ty=Tensor[(7, 10, 12), float32] */;
  %529 = cast(%var_2086, dtype="float32") /* ty=Tensor[(7, 10, 12), float32] */;
  %530 = acosh(%528) /* ty=Tensor[(7, 10, 12), float32] */;
  %531 = log2(%529) /* ty=Tensor[(7, 10, 12), float32] */;
  (%530, %531)
}

def @func_6546(%var_6473: Tensor[(10, 8, 7), float32], %var_6521: Tensor[(10, 8, 7), float32]) -> (Tensor[(4, 12, 3), int32], Tensor[(480), float64], Tensor[(480), float64], Tensor[(10, 8, 7), uint32], Tensor[(10, 8, 7), uint16], Tensor[(9, 14, 12), uint32], Tensor[(3, 504), uint32]) {
  %532 = cast(meta[relay.Constant][47] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %533 = reshape(%532, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %534 = @func_198(%533) /* ty=(Tensor[(7, 10, 8), bool], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) */;
  %535 = @func_4885() /* ty=Tensor[(10, 8, 7), float32] */;
  %536 = cast(%var_6473, dtype="bool") /* ty=Tensor[(10, 8, 7), bool] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%535, dtype="bool") /* ty=Tensor[(10, 8, 7), bool] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %540 = logical_and(%538, %539) /* ty=Tensor[(10, 8, 7), bool] */;
  %541 = cast(%540, dtype="uint32") /* ty=Tensor[(10, 8, 7), uint32] */;
  %542 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%535, dtype="uint32") /* ty=Tensor[(10, 8, 7), uint32] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %545 = cast(%var_6521, dtype="uint16") /* ty=Tensor[(10, 8, 7), uint16] */;
  %546 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%535, dtype="uint16") /* ty=Tensor[(10, 8, 7), uint16] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %549 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 504), uint32] */, dtype="uint32") /* ty=Tensor[(3, 504), uint32] */;
  %550 = reshape(%549, newshape=[9, 14, 12]) /* ty=Tensor[(9, 14, 12), uint32] */;
  %551 = @func_3749() /* ty=Tensor[(4, 12, 3), int32] */;
  %552 = %534.2;
  %553 = bitwise_and(%543, %544) /* ty=Tensor[(10, 8, 7), uint32] */;
  %554 = logical_xor(%547, %548) /* ty=Tensor[(10, 8, 7), uint16] */;
  %555 = @func_2157(%550) /* ty=Tensor[(9, 14, 12), uint32] */;
  (%551, %552, meta[relay.Constant][47] /* ty=Tensor[(480), float64] */, %553, %554, %555, meta[relay.Constant][48] /* ty=Tensor[(3, 504), uint32] */)
}

def @func_7359(%var_7344: Tensor[(900, 1), float64]) -> (Tensor[(4, 12, 1), float32], Tensor[(2, 16, 5), float64], Tensor[(900, 1), float64], Tensor[(1, 455), float32], Tensor[(1, 455), float32]) {
  %556 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %557 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 455), uint8] */, dtype="uint8") /* ty=Tensor[(1, 455), uint8] */;
  %558 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 455), uint8] */, dtype="uint8") /* ty=Tensor[(1, 455), uint8] */;
  %559 = cast(%var_7344, dtype="float64") /* ty=Tensor[(900, 1), float64] */;
  %560 = reshape(%557, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), uint8] */;
  %561 = reshape(%558, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), uint8] */;
  %562 = reshape(%559, newshape=[900, 1]) /* ty=Tensor[(900, 1), float64] */;
  %563 = @func_4989(%560, %561, %562) /* ty=(Tensor[(5, 13, 7), uint8], Tensor[(4, 12, 1), float32], Tensor[(2, 16, 5), float64], Tensor[(900, 1), float64], Tensor[(4, 12, 560), float64]) */;
  %564 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 455), uint8] */, dtype="float32") /* ty=Tensor[(1, 455), float32] */;
  %565 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 455), uint8] */, dtype="float32") /* ty=Tensor[(1, 455), float32] */;
  %566 = %556.0;
  %567 = %563.2;
  %568 = asinh(%564) /* ty=Tensor[(1, 455), float32] */;
  %569 = tan(%565) /* ty=Tensor[(1, 455), float32] */;
  (%566, %567, %var_7344, %568, %569)
}

def @func_4765() -> Tensor[(10, 8, 7), float32] {
  %570 = @func_3554() /* ty=(Tensor[(10, 8, 7), float32], Tensor[(4, 12, 560), float64]) */;
  %570.0
}

def @func_8280() -> (Tensor[(2, 16, 5), float64],) {
  %571 = @func_7222() /* ty=Tensor[(2, 16, 5), float64] */;
  (%571,)
}

def @func_3355() -> (Tensor[(2, 16, 5), float64],) {
  %572 = cast(meta[relay.Constant][50] /* ty=Tensor[(2, 16, 5), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 5), float64] */;
  %573 = cosh(%572) /* ty=Tensor[(2, 16, 5), float64] */;
  (%573,)
}

def @func_1303(%var_1300: Tensor[(12, 11, 7), float32]) -> Tensor[(12, 11, 7), float32] {
  %574 = cast(%var_1300, dtype="float32") /* ty=Tensor[(12, 11, 7), float32] */;
  sigmoid(%574) /* ty=Tensor[(12, 11, 7), float32] */
}

def @func_8518(%var_8504: Tensor[(110), float32]) -> (Tensor[(2, 16, 5), float64], Tensor[(924), float32], Tensor[(110), float32], Tensor[(770), float32]) {
  %575 = cast(%var_8504, dtype="float32") /* ty=Tensor[(110), float32] */;
  %576 = cast(meta[relay.Constant][51] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %577 = reshape(%575, newshape=[11, 1, 10]) /* ty=Tensor[(11, 1, 10), float32] */;
  %578 = reshape(%576, newshape=[11, 7, 10]) /* ty=Tensor[(11, 7, 10), float32] */;
  %579 = @func_2579(%577, %578) /* ty=(Tensor[(11, 7, 10), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */;
  %580 = @func_5332() /* ty=Tensor[(2, 16, 5), float64] */;
  %581 = %579.2;
  (%580, %581, %var_8504, meta[relay.Constant][51] /* ty=Tensor[(770), float32] */)
}

def @func_5069(%var_5058: int16, %var_5059: Tensor[(10, 1), int16]) -> (Tensor[(10, 1), int16],) {
  %582 = cast(%var_5058, dtype="int16") /* ty=int16 */;
  %583 = cast(%var_5059, dtype="int16") /* ty=Tensor[(10, 1), int16] */;
  %584 = left_shift(%582, %583) /* ty=Tensor[(10, 1), int16] */;
  (%584,)
}

def @func_3484(%var_3464: Tensor[(560), float32]) -> (Tensor[(924), float32], Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(560), float32], Tensor[(60), float64], Tensor[(2, 16, 5), float64]) {
  %585 = @func_3121() /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) */;
  %586 = cast(%var_3464, dtype="float32") /* ty=Tensor[(560), float32] */;
  %587 = reshape(%586, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float32] */;
  %588 = cast(meta[relay.Constant][52] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %589 = cast(%var_3464, dtype="float32") /* ty=Tensor[(560), float32] */;
  %590 = reshape(%588, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), float64] */;
  %591 = reshape(%589, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %592 = @func_2751(%590, %591) /* ty=(Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(12, 1, 5), float64]) */;
  %593 = @func_3355() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %594 = %585.3;
  %595 = @func_1963(%587) /* ty=Tensor[(10, 8, 7), float32] */;
  %596 = %592.1;
  %597 = %593.0;
  (%594, %595, %var_3464, %596, meta[relay.Constant][52] /* ty=Tensor[(60), float64] */, %597)
}

def @func_1539(%var_1534: Tensor[(6, 16, 12), float32]) -> Tensor[(6, 16, 12), float32] {
  %598 = cast(%var_1534, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
  atanh(%598) /* ty=Tensor[(6, 16, 12), float32] */
}

def @func_6930(%var_6894: Tensor[(4, 12, 8), float32], %var_6905: Tensor[(560, 1), uint16]) -> (Tensor[(4, 12, 8), bool], Tensor[(560, ?), float32]) {
  %599 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %600 = %599.0;
  %601 = cast(%600, dtype="float32") /* ty=Tensor[(4, 12, 1), float32] */;
  %602 = cast(%var_6894, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %603 = divide(%601, %602) /* ty=Tensor[(4, 12, 8), float32] */;
  %604 = cast(%600, dtype="bool") /* ty=Tensor[(4, 12, 1), bool] */;
  %605 = cast(%603, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %606 = cast(%var_6905, dtype="uint16") /* ty=Tensor[(560, 1), uint16] */;
  %607 = cast(%var_6905, dtype="uint16") /* ty=Tensor[(560, 1), uint16] */;
  %608 = reshape(%606, newshape=[7, 5, 16]) /* ty=Tensor[(7, 5, 16), uint16] */;
  %609 = reshape(%607, newshape=[7, 5, 16]) /* ty=Tensor[(7, 5, 16), uint16] */;
  %610 = @func_4440(%608, %609) /* ty=Tensor[(7, 5, 16), uint16] */;
  %611 = cast(%610, dtype="float32") /* ty=Tensor[(7, 5, 16), float32] */;
  %612 = shape_of(%var_6905, dtype="int32") /* ty=Tensor[(2), int32] */;
  %613 = cast(%var_6905, dtype="float32") /* ty=Tensor[(560, 1), float32] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %615 = logical_or(%604, %605) /* ty=Tensor[(4, 12, 8), bool] */;
  %616 = floor_mod(%613, %614) /* ty=Tensor[(560, ?), float32] */;
  (%615, %616)
}

def @func_4598() -> Tensor[(4, 12, 1), float32] {
  %617 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %617.0
}

def @func_4517() -> (Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) {
  %618 = @func_3554() /* ty=(Tensor[(10, 8, 7), float32], Tensor[(4, 12, 560), float64]) */;
  %619 = cast(meta[relay.Constant][53] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %620 = reshape(%619, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %621 = @func_3749() /* ty=Tensor[(4, 12, 3), int32] */;
  %622 = %618.0;
  %623 = @func_1303(%620) /* ty=Tensor[(12, 11, 7), float32] */;
  (%621, %622, %623, meta[relay.Constant][53] /* ty=Tensor[(924), float32] */)
}

def @func_5332() -> Tensor[(2, 16, 5), float64] {
  @func_4577() /* ty=Tensor[(2, 16, 5), float64] */
}

def @func_3665(%var_3646: Tensor[(1, 15, 14), float64]) -> (Tensor[(1, 15, 14), float64], Tensor[(4, 12, 1), float32]) {
  %624 = cast(%var_3646, dtype="float64") /* ty=Tensor[(1, 15, 14), float64] */;
  %625 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %626 = log(%624) /* ty=Tensor[(1, 15, 14), float64] */;
  %627 = %625.0;
  (%626, %627)
}

def @func_6728(%var_6723: Tensor[(144), int32]) -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 3), float32], Tensor[(144), int32], Tensor[(560), float32]) {
  %628 = @func_4745() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %629 = cast(%var_6723, dtype="int32") /* ty=Tensor[(144), int32] */;
  %630 = cast(%var_6723, dtype="float32") /* ty=Tensor[(144), float32] */;
  %631 = cast(meta[relay.Constant][54] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %632 = reshape(%629, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), int32] */;
  %633 = reshape(%630, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), float32] */;
  %634 = reshape(%631, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %635 = @func_4684(%632, %633, %634) /* ty=(Tensor[(4, 12, 3), int16], Tensor[(4, 12, 3), float32], Tensor[(60), float64], Tensor[(560), float32], Tensor[(4, 12, 3), int32], Tensor[(4, 12, 3), float32], Tensor[(560), float64]) */;
  %636 = %628.0;
  %637 = %635.1;
  (%636, %637, %var_6723, meta[relay.Constant][54] /* ty=Tensor[(560), float32] */)
}

def @func_7822() -> (Tensor[(12, 11, 7), float32],) {
  %638 = @func_3121() /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) */;
  %639 = %638.2;
  (%639,)
}

def @func_8309(%var_8291: Tensor[(4, 12, 560), float64]) -> (Tensor[(4, 12, 560), float32],) {
  %640 = @func_5085() /* ty=(Tensor[(4, 12, 560), float64],) */;
  %641 = %640.0;
  %642 = cast(%var_8291, dtype="bool") /* ty=Tensor[(4, 12, 560), bool] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="bool") /* ty=Tensor[(4, 12, 560), bool] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %646 = less(%644, %645) /* ty=Tensor[(4, 12, 560), bool] */;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(4, 12, 560), float32] */;
  %648 = cos(%647) /* ty=Tensor[(4, 12, 560), float32] */;
  (%648,)
}

def @func_4885() -> Tensor[(10, 8, 7), float32] {
  %649 = @func_3554() /* ty=(Tensor[(10, 8, 7), float32], Tensor[(4, 12, 560), float64]) */;
  %649.0
}

def @func_7693(%var_7677: Tensor[(4, 12, 560), float64]) -> Tensor[(4, 12, 560), int8] {
  %650 = @func_5735() /* ty=(Tensor[(4, 12, 560), float64],) */;
  %651 = %650.0;
  %652 = cast(%var_7677, dtype="int8") /* ty=Tensor[(4, 12, 560), int8] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="int8") /* ty=Tensor[(4, 12, 560), int8] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  logical_xor(%654, %655) /* ty=Tensor[(4, 12, 560), int8] */
}

def @func_7196() -> Tensor[(4, 12, ?), float64] {
  %656 = @func_6026() /* ty=Tensor[(4, 12, ?), int8] */;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(4, 12, ?), float64] */;
  atan(%657) /* ty=Tensor[(4, 12, ?), float64] */
}

def @func_6130(%var_6120: Tensor[(6, 8, 6), int32]) -> (Tensor[(6, 8, 6), int32], Tensor[(6, 8, 6), float32], Tensor[(4, 12, 1), float32]) {
  %658 = cast(meta[relay.Constant][55] /* ty=Tensor[(6, 8, 6), int32] */, dtype="int32") /* ty=Tensor[(6, 8, 6), int32] */;
  %659 = shape_of(%var_6120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%var_6120, dtype="int32") /* ty=Tensor[(6, 8, 6), int32] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %662 = cast(%var_6120, dtype="float32") /* ty=Tensor[(6, 8, 6), float32] */;
  %663 = bitwise_and(%660, %661) /* ty=Tensor[(6, 8, 6), int32] */;
  %664 = tan(%662) /* ty=Tensor[(6, 8, 6), float32] */;
  %665 = @func_5144() /* ty=Tensor[(4, 12, 1), float32] */;
  (%663, %664, %665)
}

def @func_7492(%var_7469: Tensor[(7, 8, 6), float32]) -> (Tensor[(7, 8, 6), float32],) {
  %666 = cast(%var_7469, dtype="float32") /* ty=Tensor[(7, 8, 6), float32] */;
  %667 = asin(%666) /* ty=Tensor[(7, 8, 6), float32] */;
  (%667,)
}

def @func_2899(%var_2863: Tensor[(12, 6, 4), float32], %var_2871: Tensor[(560), float32], %var_2889: Tensor[(1008), uint8], %var_2894: Tensor[(120, 4), float64]) -> (Tensor[(12, 6, 4), float32], Tensor[(10, 8, 7), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8], Tensor[(7, 9, 9), uint64], Tensor[(1, 81), uint64], Tensor[(9, 63), uint64], Tensor[(120, 4), float64]) {
  %668 = cast(%var_2863, dtype="float32") /* ty=Tensor[(12, 6, 4), float32] */;
  %669 = cast(%var_2871, dtype="float32") /* ty=Tensor[(560), float32] */;
  %670 = reshape(%669, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float32] */;
  %671 = @func_1963(%670) /* ty=Tensor[(10, 8, 7), float32] */;
  %672 = cast(%var_2871, dtype="float32") /* ty=Tensor[(560), float32] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%671, dtype="float32") /* ty=Tensor[(10, 8, 7), float32] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %676 = cast(%var_2889, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %677 = cast(%var_2889, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %678 = reshape(%676, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), uint8] */;
  %679 = reshape(%677, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), uint8] */;
  %680 = @func_1632(%678, %679) /* ty=(Tensor[(12, 12, 7), bool],) */;
  %681 = cast(meta[relay.Constant][56] /* ty=Tensor[(1, 81), uint64] */, dtype="uint64") /* ty=Tensor[(1, 81), uint64] */;
  %682 = cast(meta[relay.Constant][57] /* ty=Tensor[(9, 63), uint64] */, dtype="uint64") /* ty=Tensor[(9, 63), uint64] */;
  %683 = cast(%var_2894, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
  %684 = reshape(%681, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), uint64] */;
  %685 = reshape(%682, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), uint64] */;
  %686 = reshape(%683, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %687 = @func_403(%684, %685, %686) /* ty=(Tensor[(7, 9, 9), uint64], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int32], Tensor[(15, 4, 8), float64], Tensor[(7, 10, 8), bool]) */;
  %688 = log(%668) /* ty=Tensor[(12, 6, 4), float32] */;
  %689 = floor_mod(%674, %675) /* ty=Tensor[(10, 8, 7), float32] */;
  %690 = %680.0;
  %691 = %687.0;
  (%688, %689, %690, %var_2889, %691, meta[relay.Constant][56] /* ty=Tensor[(1, 81), uint64] */, meta[relay.Constant][57] /* ty=Tensor[(9, 63), uint64] */, %var_2894)
}

def @func_4153(%var_4136: Tensor[(210), float64], %var_4150: Tensor[(650), int32]) -> (Tensor[(12, 12, 7), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64], Tensor[(10, 13, 5), int32], Tensor[(650), int32]) {
  %692 = @func_3121() /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) */;
  %693 = cast(%var_4136, dtype="float64") /* ty=Tensor[(210), float64] */;
  %694 = reshape(%693, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float64] */;
  %695 = @func_3665(%694) /* ty=(Tensor[(1, 15, 14), float64], Tensor[(4, 12, 1), float32]) */;
  %696 = cast(%var_4150, dtype="int32") /* ty=Tensor[(650), int32] */;
  %697 = reshape(%696, newshape=[10, 13, 5]) /* ty=Tensor[(10, 13, 5), int32] */;
  %698 = @func_954(%697) /* ty=(Tensor[(10, 13, 5), int32],) */;
  %699 = %692.4;
  %700 = %695.0;
  %701 = %698.0;
  (%699, %700, %var_4136, %701, %var_4150)
}

def @func_4989(%var_4924: Tensor[(5, 13, 7), uint8], %var_4925: Tensor[(5, 13, 7), uint8], %var_4946: Tensor[(900, 1), float64]) -> (Tensor[(5, 13, 7), uint8], Tensor[(4, 12, 1), float32], Tensor[(2, 16, 5), float64], Tensor[(900, 1), float64], Tensor[(4, 12, 560), float64]) {
  %702 = cast(%var_4925, dtype="uint8") /* ty=Tensor[(5, 13, 7), uint8] */;
  %703 = shape_of(%var_4924, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%var_4924, dtype="uint8") /* ty=Tensor[(5, 13, 7), uint8] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %706 = cast(meta[relay.Constant][58] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %707 = cast(%var_4946, dtype="float64") /* ty=Tensor[(900, 1), float64] */;
  %708 = reshape(%706, newshape=[560, 1]) /* ty=Tensor[(560, 1), float32] */;
  %709 = reshape(%707, newshape=[60, 15]) /* ty=Tensor[(60, 15), float64] */;
  %710 = @func_3926(%708, %709) /* ty=(Tensor[(560), float32], Tensor[(60, 15), bool], Tensor[(4, 12, 1), float32], Tensor[(7, 1, 2), float32], Tensor[(14), float32], Tensor[(2, 16, 5), float64], Tensor[(560, 1), float64]) */;
  %711 = %710.2;
  %712 = cast(meta[relay.Constant][58] /* ty=Tensor[(560), float32] */, dtype="bool") /* ty=Tensor[(560), bool] */;
  %713 = cast(%711, dtype="bool") /* ty=Tensor[(4, 12, 1), bool] */;
  %714 = logical_and(%712, %713) /* ty=Tensor[(4, 12, 560), bool] */;
  %715 = @func_3121() /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) */;
  %716 = %715.1;
  %717 = cast(%714, dtype="float64") /* ty=Tensor[(4, 12, 560), float64] */;
  %718 = cast(%716, dtype="float64") /* ty=Tensor[(4, 12, 1), float64] */;
  %719 = left_shift(%704, %705) /* ty=Tensor[(5, 13, 7), uint8] */;
  %720 = @func_4598() /* ty=Tensor[(4, 12, 1), float32] */;
  %721 = @func_4577() /* ty=Tensor[(2, 16, 5), float64] */;
  %722 = divide(%717, %718) /* ty=Tensor[(4, 12, 560), float64] */;
  (%719, %720, %721, %var_4946, %722)
}

def @func_6190(%var_6178: Tensor[(840), float32], %var_6181: Tensor[(7, 10, 12), float32]) -> (Tensor[(10, 8, 7), float32], Tensor[(840), float32], Tensor[(7, 10, 12), uint16]) {
  %723 = @func_4517() /* ty=(Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */;
  %724 = cast(%var_6178, dtype="float32") /* ty=Tensor[(840), float32] */;
  %725 = reshape(%724, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), float32] */;
  %726 = @func_2096(%725) /* ty=(Tensor[(7, 10, 12), float32], Tensor[(7, 10, 12), float32]) */;
  %727 = %726.1;
  %728 = cast(%var_6181, dtype="uint16") /* ty=Tensor[(7, 10, 12), uint16] */;
  %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%727, dtype="uint16") /* ty=Tensor[(7, 10, 12), uint16] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %732 = %723.1;
  %733 = bitwise_xor(%730, %731) /* ty=Tensor[(7, 10, 12), uint16] */;
  (%732, %var_6178, %733)
}

def @func_4312(%var_4282: Tensor[(12, 100), float64], %var_4283: Tensor[(81), uint64], %var_4293: Tensor[(1, 60), float64]) -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(210), float64], Tensor[(15, 4, 8), int8], Tensor[(480), float64], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8], Tensor[(4, 12, 3), int32], Tensor[(240), float64], Tensor[(12, 100), float64], Tensor[(81), uint64], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(560), float32], Tensor[(1, 60), float64], Tensor[(560, 1), float32], Tensor[(15, 4, 8), float32]) {
  %734 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %735 = cast(meta[relay.Constant][59] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
  %736 = reshape(%735, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float64] */;
  %737 = @func_3665(%736) /* ty=(Tensor[(1, 15, 14), float64], Tensor[(4, 12, 1), float32]) */;
  %738 = cast(meta[relay.Constant][60] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %739 = reshape(%738, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float64] */;
  %740 = @func_41(%739) /* ty=(Tensor[(15, 4, 8), int8],) */;
  %741 = cast(meta[relay.Constant][61] /* ty=Tensor[(1008), uint8] */, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %742 = cast(meta[relay.Constant][61] /* ty=Tensor[(1008), uint8] */, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %743 = reshape(%741, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), uint8] */;
  %744 = reshape(%742, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), uint8] */;
  %745 = @func_1632(%743, %744) /* ty=(Tensor[(12, 12, 7), bool],) */;
  %746 = cast(meta[relay.Constant][63] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %747 = reshape(%746, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %748 = cast(%var_4293, dtype="float64") /* ty=Tensor[(1, 60), float64] */;
  %749 = cast(meta[relay.Constant][64] /* ty=Tensor[(560, 1), float32] */, dtype="float32") /* ty=Tensor[(560, 1), float32] */;
  %750 = reshape(%748, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), float64] */;
  %751 = reshape(%749, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %752 = @func_2751(%750, %751) /* ty=(Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(12, 1, 5), float64]) */;
  %753 = cast(meta[relay.Constant][62] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %754 = cast(%var_4282, dtype="float64") /* ty=Tensor[(12, 100), float64] */;
  %755 = cast(%var_4283, dtype="uint64") /* ty=Tensor[(81), uint64] */;
  %756 = cast(meta[relay.Constant][60] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %757 = reshape(%753, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %758 = reshape(%754, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %759 = reshape(%755, newshape=[81]) /* ty=Tensor[(81), uint64] */;
  %760 = reshape(%756, newshape=[40, 12]) /* ty=Tensor[(40, 12), float64] */;
  %761 = @func_4052(%757, %758, %759, %760) /* ty=(Tensor[(5, 15, 16), uint32], Tensor[(5, 15, 16), float32], Tensor[(81), uint64], Tensor[(567), uint64], Tensor[(15, 4, 8), int8]) */;
  %762 = %761.4;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(15, 4, 8), float32] */;
  %764 = %734.0;
  %765 = %737.1;
  %766 = %740.0;
  %767 = %745.0;
  %768 = @func_3749() /* ty=Tensor[(4, 12, 3), int32] */;
  %769 = @func_1303(%747) /* ty=Tensor[(12, 11, 7), float32] */;
  %770 = %752.1;
  %771 = sin(%763) /* ty=Tensor[(15, 4, 8), float32] */;
  (%764, %765, meta[relay.Constant][59] /* ty=Tensor[(210), float64] */, %766, meta[relay.Constant][60] /* ty=Tensor[(480), float64] */, %767, meta[relay.Constant][61] /* ty=Tensor[(1008), uint8] */, %768, meta[relay.Constant][62] /* ty=Tensor[(240), float64] */, %var_4282, %var_4283, %769, meta[relay.Constant][63] /* ty=Tensor[(924), float32] */, %770, %var_4293, meta[relay.Constant][64] /* ty=Tensor[(560, 1), float32] */, %771)
}

def @func_7870(%var_7847: Tensor[(12, 10, 8), float32]) -> (Tensor[(12, 10, 8), float32],) {
  %772 = cast(%var_7847, dtype="float32") /* ty=Tensor[(12, 10, 8), float32] */;
  %773 = atanh(%772) /* ty=Tensor[(12, 10, 8), float32] */;
  (%773,)
}

def @func_6026() -> Tensor[(4, 12, ?), int8] {
  %774 = @func_4598() /* ty=Tensor[(4, 12, 1), float32] */;
  %775 = cast(%774, dtype="float64") /* ty=Tensor[(4, 12, 1), float64] */;
  %776 = log10(%775) /* ty=Tensor[(4, 12, 1), float64] */;
  %777 = cast(%774, dtype="int8") /* ty=Tensor[(4, 12, 1), int8] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%776, dtype="int8") /* ty=Tensor[(4, 12, 1), int8] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%779, %780) /* ty=Tensor[(4, 12, ?), int8] */
}

def @func_403(%var_305: Tensor[(1, 9, 9), uint64], %var_306: Tensor[(7, 9, 9), uint64], %var_316: Tensor[(480), float64]) -> (Tensor[(7, 9, 9), uint64], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int32], Tensor[(15, 4, 8), float64], Tensor[(7, 10, 8), bool]) {
  %781 = cast(%var_305, dtype="uint64") /* ty=Tensor[(1, 9, 9), uint64] */;
  %782 = cast(%var_306, dtype="uint64") /* ty=Tensor[(7, 9, 9), uint64] */;
  %783 = cast(%var_316, dtype="float64") /* ty=Tensor[(480), float64] */;
  %784 = reshape(%783, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float64] */;
  %785 = @func_41(%784) /* ty=(Tensor[(15, 4, 8), int8],) */;
  %786 = cast(%var_316, dtype="float64") /* ty=Tensor[(480), float64] */;
  %787 = reshape(%786, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float64] */;
  %788 = @func_41(%787) /* ty=(Tensor[(15, 4, 8), int8],) */;
  %789 = %788.0;
  %790 = cast(%789, dtype="float64") /* ty=Tensor[(15, 4, 8), float64] */;
  %791 = reshape(%790, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float64] */;
  %792 = @func_41(%791) /* ty=(Tensor[(15, 4, 8), int8],) */;
  %793 = cast(%var_316, dtype="int32") /* ty=Tensor[(480), int32] */;
  %794 = shape_of(%789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(%789, dtype="int32") /* ty=Tensor[(15, 4, 8), int32] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %797 = cast(%789, dtype="float64") /* ty=Tensor[(15, 4, 8), float64] */;
  %798 = reshape(%797, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %799 = @func_198(%798) /* ty=(Tensor[(7, 10, 8), bool], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) */;
  %800 = %799.1;
  %801 = cast(%800, dtype="float64") /* ty=Tensor[(15, 4, 8), float64] */;
  %802 = left_shift(%795, %796) /* ty=Tensor[(15, 4, 8), int32] */;
  %803 = cast(%802, dtype="float64") /* ty=Tensor[(15, 4, 8), float64] */;
  %804 = reshape(%803, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %805 = @func_198(%804) /* ty=(Tensor[(7, 10, 8), bool], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) */;
  %806 = minimum(%781, %782) /* ty=Tensor[(7, 9, 9), uint64] */;
  %807 = %785.0;
  %808 = %792.0;
  %809 = asinh(%801) /* ty=Tensor[(15, 4, 8), float64] */;
  %810 = %805.0;
  (%806, %807, %808, %802, %809, %810)
}

def @func_5300(%var_5274: Tensor[(1200), float64]) -> (Tensor[(2, 16, 5), float64], Tensor[(12, 12, 7), bool], Tensor[(1200), float64], Tensor[(81), uint64], Tensor[(15, 4), float64], Tensor[(6, 16, 12), float32], Tensor[(1152), float32]) {
  %811 = @func_4246() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %812 = %811.0;
  %813 = cast(%812, dtype="float64") /* ty=Tensor[(2, 16, 5), float64] */;
  %814 = cast(%var_5274, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %815 = cast(meta[relay.Constant][65] /* ty=Tensor[(81), uint64] */, dtype="uint64") /* ty=Tensor[(81), uint64] */;
  %816 = cast(meta[relay.Constant][66] /* ty=Tensor[(15, 4), float64] */, dtype="float64") /* ty=Tensor[(15, 4), float64] */;
  %817 = reshape(%814, newshape=[12, 100]) /* ty=Tensor[(12, 100), float64] */;
  %818 = reshape(%815, newshape=[81]) /* ty=Tensor[(81), uint64] */;
  %819 = reshape(%816, newshape=[1, 60]) /* ty=Tensor[(1, 60), float64] */;
  %820 = @func_4312(%817, %818, %819) /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(210), float64], Tensor[(15, 4, 8), int8], Tensor[(480), float64], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8], Tensor[(4, 12, 3), int32], Tensor[(240), float64], Tensor[(12, 100), float64], Tensor[(81), uint64], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(560), float32], Tensor[(1, 60), float64], Tensor[(560, 1), float32], Tensor[(15, 4, 8), float32]) */;
  %821 = cast(meta[relay.Constant][67] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %822 = reshape(%821, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), float32] */;
  %823 = acos(%813) /* ty=Tensor[(2, 16, 5), float64] */;
  %824 = %820.5;
  %825 = @func_1539(%822) /* ty=Tensor[(6, 16, 12), float32] */;
  (%823, %824, %var_5274, meta[relay.Constant][65] /* ty=Tensor[(81), uint64] */, meta[relay.Constant][66] /* ty=Tensor[(15, 4), float64] */, %825, meta[relay.Constant][67] /* ty=Tensor[(1152), float32] */)
}

def @func_590(%var_587: Tensor[(7, 1, 2), float32]) -> Tensor[(7, 1, 2), float32] {
  %826 = cast(%var_587, dtype="float32") /* ty=Tensor[(7, 1, 2), float32] */;
  log(%826) /* ty=Tensor[(7, 1, 2), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2755(%var_2753: Tensor[(12, 1, 5), float64], %var_2754: Tensor[(560), float32]) -> (Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(12, 1, 5), float64]) {
  @func_2751(%var_2753, %var_2754) /* ty=(Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(12, 1, 5), float64]) */
}

def @func_7222() -> Tensor[(2, 16, 5), float64] {
  %0 = @func_4246() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %0.0
}

def @func_8052() -> (Tensor[(10, 8, 7), float32], Tensor[(3, 5, 6), bool], Tensor[(90), float64]) {
  %1 = @func_7621() /* ty=(Tensor[(10, 8, 7), float32],) */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %4 = reshape(%2, newshape=[3, 5, 6]) /* ty=Tensor[(3, 5, 6), float64] */;
  %5 = reshape(%3, newshape=[3, 5, 6]) /* ty=Tensor[(3, 5, 6), float64] */;
  %6 = @func_5523(%4, %5) /* ty=(Tensor[(3, 5, 6), float64], Tensor[(3, 5, 6), bool], Tensor[(3, 5, 6), bool]) */;
  %7 = %1.0;
  %8 = %6.1;
  (%7, %8, meta[relay.Constant][0] /* ty=Tensor[(90), float64] */)
}

def @func_5073(%var_5071: int16, %var_5072: Tensor[(10, 1), int16]) -> (Tensor[(10, 1), int16],) {
  @func_5069(%var_5071, %var_5072) /* ty=(Tensor[(10, 1), int16],) */
}

def @func_6643(%var_6642: Tensor[(288), int32]) -> (Tensor[(4, 12, 560), float64], Tensor[(4, 12, 1), float32], Tensor[(288), int32]) {
  %15 = fn (%var_6630: Tensor[(288), int32]) -> (Tensor[(4, 12, 560), float64], Tensor[(4, 12, 1), float32], Tensor[(288), int32]) {
    %9 = @func_5735() /* ty=(Tensor[(4, 12, 560), float64],) */;
    %10 = cast(%var_6630, dtype="int32") /* ty=Tensor[(288), int32] */;
    %11 = reshape(%10, newshape=[6, 8, 6]) /* ty=Tensor[(6, 8, 6), int32] */;
    %12 = @func_6130(%11) /* ty=(Tensor[(6, 8, 6), int32], Tensor[(6, 8, 6), float32], Tensor[(4, 12, 1), float32]) */;
    %13 = %9.0;
    %14 = %12.2;
    (%13, %14, %var_6630)
  };
  %15(%var_6642) /* ty=(Tensor[(4, 12, 560), float64], Tensor[(4, 12, 1), float32], Tensor[(288), int32]) */
}

def @func_1632(%var_1624: Tensor[(12, 12, 7), uint8], %var_1625: Tensor[(12, 12, 7), uint8]) -> (Tensor[(12, 12, 7), bool],) {
  %16 = cast(%var_1625, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %17 = shape_of(%var_1624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%var_1624, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %20 = greater(%18, %19) /* ty=Tensor[(12, 12, 7), bool] */;
  (%20,)
}

def @func_6870() -> (Tensor[(2, 16, 5), float64], Tensor[(4, 12, 924), bool], Tensor[(6, 8, 6), float32], Tensor[(288), int32], Tensor[(924), float32], Tensor[(2, 16, 5), float64]) {
  %21 = @func_4246() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %22 = @func_4551() /* ty=(Tensor[(4, 12, 924), bool],) */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %24 = reshape(%23, newshape=[6, 8, 6]) /* ty=Tensor[(6, 8, 6), int32] */;
  %25 = @func_6130(%24) /* ty=(Tensor[(6, 8, 6), int32], Tensor[(6, 8, 6), float32], Tensor[(4, 12, 1), float32]) */;
  %26 = @func_4517() /* ty=(Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */;
  %27 = @func_5185() /* ty=(Tensor[(2, 16, 5), float64], Tensor[(924), float32], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) */;
  %28 = %21.0;
  %29 = %22.0;
  %30 = %25.1;
  %31 = %26.3;
  %32 = %27.0;
  (%28, %29, %30, meta[relay.Constant][1] /* ty=Tensor[(288), int32] */, %31, %32)
}

def @func_4397(%var_4394: Tensor[(1, 12, 9), int32], %var_4395: Tensor[(60), int32], %var_4396: Tensor[(650), int32]) -> (Tensor[(3, 12, 9), bool], Tensor[(9, 14, 12), uint32], Tensor[(6, 16, 12), float32], Tensor[(1512), float32], Tensor[(7, 1, 2), float32], Tensor[(60), int32], Tensor[(14), float32], Tensor[(10, 13, 5), int32], Tensor[(650), int32], Tensor[(1152), bool]) {
  @func_4392(%var_4394, %var_4395, %var_4396) /* ty=(Tensor[(3, 12, 9), bool], Tensor[(9, 14, 12), uint32], Tensor[(6, 16, 12), float32], Tensor[(1512), float32], Tensor[(7, 1, 2), float32], Tensor[(60), int32], Tensor[(14), float32], Tensor[(10, 13, 5), int32], Tensor[(650), int32], Tensor[(1152), bool]) */
}

def @func_7492(%var_7469: Tensor[(7, 8, 6), float32]) -> (Tensor[(7, 8, 6), float32],) {
  %33 = cast(%var_7469, dtype="float32") /* ty=Tensor[(7, 8, 6), float32] */;
  %34 = asin(%33) /* ty=Tensor[(7, 8, 6), float32] */;
  (%34,)
}

def @func_5300(%var_5274: Tensor[(1200), float64]) -> (Tensor[(2, 16, 5), float64], Tensor[(12, 12, 7), bool], Tensor[(1200), float64], Tensor[(81), uint64], Tensor[(15, 4), float64], Tensor[(6, 16, 12), float32], Tensor[(1152), float32]) {
  %35 = @func_4246() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %36 = %35.0;
  %37 = cast(%36, dtype="float64") /* ty=Tensor[(2, 16, 5), float64] */;
  %38 = cast(%var_5274, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(81), uint64] */, dtype="uint64") /* ty=Tensor[(81), uint64] */;
  %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 4), float64] */, dtype="float64") /* ty=Tensor[(15, 4), float64] */;
  %41 = reshape(%38, newshape=[12, 100]) /* ty=Tensor[(12, 100), float64] */;
  %42 = reshape(%39, newshape=[81]) /* ty=Tensor[(81), uint64] */;
  %43 = reshape(%40, newshape=[1, 60]) /* ty=Tensor[(1, 60), float64] */;
  %44 = @func_4312(%41, %42, %43) /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(210), float64], Tensor[(15, 4, 8), int8], Tensor[(480), float64], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8], Tensor[(4, 12, 3), int32], Tensor[(240), float64], Tensor[(12, 100), float64], Tensor[(81), uint64], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(560), float32], Tensor[(1, 60), float64], Tensor[(560, 1), float32], Tensor[(15, 4, 8), float32]) */;
  %45 = cast(meta[relay.Constant][4] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %46 = reshape(%45, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), float32] */;
  %47 = acos(%37) /* ty=Tensor[(2, 16, 5), float64] */;
  %48 = %44.5;
  %49 = @func_1539(%46) /* ty=Tensor[(6, 16, 12), float32] */;
  (%47, %48, %var_5274, meta[relay.Constant][2] /* ty=Tensor[(81), uint64] */, meta[relay.Constant][3] /* ty=Tensor[(15, 4), float64] */, %49, meta[relay.Constant][4] /* ty=Tensor[(1152), float32] */)
}

def @func_7873(%var_7871: Tensor[(12, 10, 8), float32]) -> (Tensor[(12, 10, 8), float32],) {
  @func_7870(%var_7871) /* ty=(Tensor[(12, 10, 8), float32],) */
}

def @func_954(%var_939: Tensor[(10, 13, 5), int32]) -> (Tensor[(10, 13, 5), int32],) {
  %50 = cast(%var_939, dtype="int32") /* ty=Tensor[(10, 13, 5), int32] */;
  %51 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(10, 13, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 13, 5), int32] */, dtype="int32") /* ty=Tensor[(10, 13, 5), int32] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %54 = bitwise_and(%52, %53) /* ty=Tensor[(10, 13, 5), int32] */;
  (%54,)
}

def @func_5303(%var_5301: Tensor[(1200), float64]) -> (Tensor[(2, 16, 5), float64], Tensor[(12, 12, 7), bool], Tensor[(1200), float64], Tensor[(81), uint64], Tensor[(15, 4), float64], Tensor[(6, 16, 12), float32], Tensor[(1152), float32]) {
  @func_5300(%var_5301) /* ty=(Tensor[(2, 16, 5), float64], Tensor[(12, 12, 7), bool], Tensor[(1200), float64], Tensor[(81), uint64], Tensor[(15, 4), float64], Tensor[(6, 16, 12), float32], Tensor[(1152), float32]) */
}

def @func_5186() -> (Tensor[(2, 16, 5), float64], Tensor[(924), float32], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) {
  %63 = fn () -> (Tensor[(2, 16, 5), float64], Tensor[(924), float32], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) {
    %55 = @func_3355() /* ty=(Tensor[(2, 16, 5), float64],) */;
    %56 = @func_4517() /* ty=(Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */;
    %57 = cast(meta[relay.Constant][6] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %58 = reshape(%57, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float64] */;
    %59 = @func_41(%58) /* ty=(Tensor[(15, 4, 8), int8],) */;
    %60 = %55.0;
    %61 = %56.3;
    %62 = %59.0;
    (%60, %61, %62, meta[relay.Constant][6] /* ty=Tensor[(480), float64] */)
  };
  %63() /* ty=(Tensor[(2, 16, 5), float64], Tensor[(924), float32], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) */
}

def @func_5526(%var_5524: Tensor[(3, 5, 6), float64], %var_5525: Tensor[(3, 5, 6), float64]) -> (Tensor[(3, 5, 6), float64], Tensor[(3, 5, 6), bool], Tensor[(3, 5, 6), bool]) {
  %76 = fn (%var_5497: Tensor[(3, 5, 6), float64], %var_5507: Tensor[(3, 5, 6), float64]) -> (Tensor[(3, 5, 6), float64], Tensor[(3, 5, 6), bool], Tensor[(3, 5, 6), bool]) {
    %64 = cast(%var_5497, dtype="float64") /* ty=Tensor[(3, 5, 6), float64] */;
    %65 = cast(%var_5507, dtype="bool") /* ty=Tensor[(3, 5, 6), bool] */;
    %66 = shape_of(%var_5497, dtype="int32") /* ty=Tensor[(3), int32] */;
    %67 = cast(%var_5497, dtype="bool") /* ty=Tensor[(3, 5, 6), bool] */;
    %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %69 = cast(%var_5497, dtype="bool") /* ty=Tensor[(3, 5, 6), bool] */;
    %70 = shape_of(%var_5507, dtype="int32") /* ty=Tensor[(3), int32] */;
    %71 = cast(%var_5507, dtype="bool") /* ty=Tensor[(3, 5, 6), bool] */;
    %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %73 = acosh(%64) /* ty=Tensor[(3, 5, 6), float64] */;
    %74 = greater_equal(%67, %68) /* ty=Tensor[(3, 5, 6), bool] */;
    %75 = less(%71, %72) /* ty=Tensor[(3, 5, 6), bool] */;
    (%73, %74, %75)
  };
  %76(%var_5524, %var_5525) /* ty=(Tensor[(3, 5, 6), float64], Tensor[(3, 5, 6), bool], Tensor[(3, 5, 6), bool]) */
}

def @func_3355() -> (Tensor[(2, 16, 5), float64],) {
  %77 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 16, 5), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 5), float64] */;
  %78 = cosh(%77) /* ty=Tensor[(2, 16, 5), float64] */;
  (%78,)
}

def @func_8088(%var_8084: Tensor[(210), float64], %var_8085: Tensor[(1, 336), float32], %var_8086: Tensor[(81), int64], %var_8087: Tensor[(2, 420), float32]) -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(210), float64], Tensor[(7, 8, 6), float32], Tensor[(1, 336), float32], Tensor[(81), int64], Tensor[(81), int64], Tensor[(2, 420), float32]) {
  %94 = fn (%var_8062: Tensor[(210), float64], %var_8072: Tensor[(1, 336), float32], %var_8076: Tensor[(81), int64], %var_8077: Tensor[(2, 420), float32]) -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(210), float64], Tensor[(7, 8, 6), float32], Tensor[(1, 336), float32], Tensor[(81), int64], Tensor[(81), int64], Tensor[(2, 420), float32]) {
    %79 = cast(%var_8062, dtype="float64") /* ty=Tensor[(210), float64] */;
    %80 = reshape(%79, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float64] */;
    %81 = @func_3665(%80) /* ty=(Tensor[(1, 15, 14), float64], Tensor[(4, 12, 1), float32]) */;
    %82 = cast(%var_8072, dtype="float32") /* ty=Tensor[(1, 336), float32] */;
    %83 = reshape(%82, newshape=[7, 8, 6]) /* ty=Tensor[(7, 8, 6), float32] */;
    %84 = @func_7492(%83) /* ty=(Tensor[(7, 8, 6), float32],) */;
    %85 = cast(%var_8076, dtype="int64") /* ty=Tensor[(81), int64] */;
    %86 = cast(%var_8077, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
    %87 = reshape(%85, newshape=[81]) /* ty=Tensor[(81), int64] */;
    %88 = reshape(%86, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %89 = @func_3703(%87, %88) /* ty=(Tensor[(2, 16, 5), float64], Tensor[(840), float32], Tensor[(81), int64], Tensor[(840), float32]) */;
    %90 = @func_5144() /* ty=Tensor[(4, 12, 1), float32] */;
    %91 = %81.1;
    %92 = %84.0;
    %93 = %89.2;
    (%90, %91, %var_8062, %92, %var_8072, %93, %var_8076, %var_8077)
  };
  %94(%var_8084, %var_8085, %var_8086, %var_8087) /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(210), float64], Tensor[(7, 8, 6), float32], Tensor[(1, 336), float32], Tensor[(81), int64], Tensor[(81), int64], Tensor[(2, 420), float32]) */
}

def @func_8311(%var_8310: Tensor[(4, 12, 560), float64]) -> (Tensor[(4, 12, 560), float32],) {
  %104 = fn (%var_8291: Tensor[(4, 12, 560), float64]) -> (Tensor[(4, 12, 560), float32],) {
    %95 = @func_5085() /* ty=(Tensor[(4, 12, 560), float64],) */;
    %96 = %95.0;
    %97 = cast(%var_8291, dtype="bool") /* ty=Tensor[(4, 12, 560), bool] */;
    %98 = shape_of(%96, dtype="int32") /* ty=Tensor[(3), int32] */;
    %99 = cast(%96, dtype="bool") /* ty=Tensor[(4, 12, 560), bool] */;
    %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %101 = less(%99, %100) /* ty=Tensor[(4, 12, 560), bool] */;
    %102 = cast(%101, dtype="float32") /* ty=Tensor[(4, 12, 560), float32] */;
    %103 = cos(%102) /* ty=Tensor[(4, 12, 560), float32] */;
    (%103,)
  };
  %104(%var_8310) /* ty=(Tensor[(4, 12, 560), float32],) */
}

def @func_4891() -> Tensor[(4, 12, 560), float64] {
  @func_4889() /* ty=Tensor[(4, 12, 560), float64] */
}

def @func_8004(%var_8002: Tensor[(560), float32]) -> (Tensor[(2, 16, 5), float64], Tensor[(10, 8, 7), float32], Tensor[(560), float32]) {
  @func_8001(%var_8002) /* ty=(Tensor[(2, 16, 5), float64], Tensor[(10, 8, 7), float32], Tensor[(560), float32]) */
}

def @func_4889() -> Tensor[(4, 12, 560), float64] {
  %105 = @func_3554() /* ty=(Tensor[(10, 8, 7), float32], Tensor[(4, 12, 560), float64]) */;
  %105.1
}

def @func_6769() -> (Tensor[(4, 12, 924), float32], Tensor[(15, 4, 8), int8], Tensor[(480), float64], Tensor[(4, 12, 924), float32]) {
  %116 = fn () -> (Tensor[(4, 12, 924), float32], Tensor[(15, 4, 8), int8], Tensor[(480), float64], Tensor[(4, 12, 924), float32]) {
    %106 = @func_4551() /* ty=(Tensor[(4, 12, 924), bool],) */;
    %107 = %106.0;
    %108 = cast(%107, dtype="float32") /* ty=Tensor[(4, 12, 924), float32] */;
    %109 = cast(meta[relay.Constant][8] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %110 = reshape(%109, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float64] */;
    %111 = @func_41(%110) /* ty=(Tensor[(15, 4, 8), int8],) */;
    %112 = cast(%107, dtype="float32") /* ty=Tensor[(4, 12, 924), float32] */;
    %113 = tan(%108) /* ty=Tensor[(4, 12, 924), float32] */;
    %114 = %111.0;
    %115 = atan(%112) /* ty=Tensor[(4, 12, 924), float32] */;
    (%113, %114, meta[relay.Constant][8] /* ty=Tensor[(480), float64] */, %115)
  };
  %116() /* ty=(Tensor[(4, 12, 924), float32], Tensor[(15, 4, 8), int8], Tensor[(480), float64], Tensor[(4, 12, 924), float32]) */
}

def @func_44(%var_42: Tensor[(15, 4, 8), float64]) -> (Tensor[(15, 4, 8), int8],) {
  @func_41(%var_42) /* ty=(Tensor[(15, 4, 8), int8],) */
}

def @func_5333() -> Tensor[(2, 16, 5), float64] {
  %117 = fn () -> Tensor[(2, 16, 5), float64] {
    @func_4577() /* ty=Tensor[(2, 16, 5), float64] */
  };
  %117() /* ty=Tensor[(2, 16, 5), float64] */
}

def @func_4443(%var_4441: Tensor[(7, 5, 16), uint16], %var_4442: Tensor[(7, 5, 16), uint16]) -> Tensor[(7, 5, 16), uint16] {
  %122 = fn (%var_4431: Tensor[(7, 5, 16), uint16], %var_4432: Tensor[(7, 5, 16), uint16]) -> Tensor[(7, 5, 16), uint16] {
    %118 = cast(%var_4432, dtype="uint16") /* ty=Tensor[(7, 5, 16), uint16] */;
    %119 = shape_of(%var_4431, dtype="int32") /* ty=Tensor[(3), int32] */;
    %120 = cast(%var_4431, dtype="uint16") /* ty=Tensor[(7, 5, 16), uint16] */;
    %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    minimum(%120, %121) /* ty=Tensor[(7, 5, 16), uint16] */
  };
  %122(%var_4441, %var_4442) /* ty=Tensor[(7, 5, 16), uint16] */
}

def @func_6934(%var_6932: Tensor[(4, 12, 8), float32], %var_6933: Tensor[(560, 1), uint16]) -> (Tensor[(4, 12, 8), bool], Tensor[(560, ?), float32]) {
  @func_6930(%var_6932, %var_6933) /* ty=(Tensor[(4, 12, 8), bool], Tensor[(560, ?), float32]) */
}

def @func_6026() -> Tensor[(4, 12, ?), int8] {
  %123 = @func_4598() /* ty=Tensor[(4, 12, 1), float32] */;
  %124 = cast(%123, dtype="float64") /* ty=Tensor[(4, 12, 1), float64] */;
  %125 = log10(%124) /* ty=Tensor[(4, 12, 1), float64] */;
  %126 = cast(%123, dtype="int8") /* ty=Tensor[(4, 12, 1), int8] */;
  %127 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%125, dtype="int8") /* ty=Tensor[(4, 12, 1), int8] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%128, %129) /* ty=Tensor[(4, 12, ?), int8] */
}

def @func_4316(%var_4313: Tensor[(12, 100), float64], %var_4314: Tensor[(81), uint64], %var_4315: Tensor[(1, 60), float64]) -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(210), float64], Tensor[(15, 4, 8), int8], Tensor[(480), float64], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8], Tensor[(4, 12, 3), int32], Tensor[(240), float64], Tensor[(12, 100), float64], Tensor[(81), uint64], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(560), float32], Tensor[(1, 60), float64], Tensor[(560, 1), float32], Tensor[(15, 4, 8), float32]) {
  %168 = fn (%var_4282: Tensor[(12, 100), float64], %var_4283: Tensor[(81), uint64], %var_4293: Tensor[(1, 60), float64]) -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(210), float64], Tensor[(15, 4, 8), int8], Tensor[(480), float64], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8], Tensor[(4, 12, 3), int32], Tensor[(240), float64], Tensor[(12, 100), float64], Tensor[(81), uint64], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(560), float32], Tensor[(1, 60), float64], Tensor[(560, 1), float32], Tensor[(15, 4, 8), float32]) {
    %130 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
    %131 = cast(meta[relay.Constant][9] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
    %132 = reshape(%131, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float64] */;
    %133 = @func_3665(%132) /* ty=(Tensor[(1, 15, 14), float64], Tensor[(4, 12, 1), float32]) */;
    %134 = cast(meta[relay.Constant][10] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %135 = reshape(%134, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float64] */;
    %136 = @func_41(%135) /* ty=(Tensor[(15, 4, 8), int8],) */;
    %137 = cast(meta[relay.Constant][11] /* ty=Tensor[(1008), uint8] */, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
    %138 = cast(meta[relay.Constant][11] /* ty=Tensor[(1008), uint8] */, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
    %139 = reshape(%137, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), uint8] */;
    %140 = reshape(%138, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), uint8] */;
    %141 = @func_1632(%139, %140) /* ty=(Tensor[(12, 12, 7), bool],) */;
    %142 = cast(meta[relay.Constant][13] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
    %143 = reshape(%142, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
    %144 = cast(%var_4293, dtype="float64") /* ty=Tensor[(1, 60), float64] */;
    %145 = cast(meta[relay.Constant][14] /* ty=Tensor[(560, 1), float32] */, dtype="float32") /* ty=Tensor[(560, 1), float32] */;
    %146 = reshape(%144, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), float64] */;
    %147 = reshape(%145, newshape=[560]) /* ty=Tensor[(560), float32] */;
    %148 = @func_2751(%146, %147) /* ty=(Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(12, 1, 5), float64]) */;
    %149 = cast(meta[relay.Constant][12] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %150 = cast(%var_4282, dtype="float64") /* ty=Tensor[(12, 100), float64] */;
    %151 = cast(%var_4283, dtype="uint64") /* ty=Tensor[(81), uint64] */;
    %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %153 = reshape(%149, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
    %154 = reshape(%150, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
    %155 = reshape(%151, newshape=[81]) /* ty=Tensor[(81), uint64] */;
    %156 = reshape(%152, newshape=[40, 12]) /* ty=Tensor[(40, 12), float64] */;
    %157 = @func_4052(%153, %154, %155, %156) /* ty=(Tensor[(5, 15, 16), uint32], Tensor[(5, 15, 16), float32], Tensor[(81), uint64], Tensor[(567), uint64], Tensor[(15, 4, 8), int8]) */;
    %158 = %157.4;
    %159 = cast(%158, dtype="float32") /* ty=Tensor[(15, 4, 8), float32] */;
    %160 = %130.0;
    %161 = %133.1;
    %162 = %136.0;
    %163 = %141.0;
    %164 = @func_3749() /* ty=Tensor[(4, 12, 3), int32] */;
    %165 = @func_1303(%143) /* ty=Tensor[(12, 11, 7), float32] */;
    %166 = %148.1;
    %167 = sin(%159) /* ty=Tensor[(15, 4, 8), float32] */;
    (%160, %161, meta[relay.Constant][9] /* ty=Tensor[(210), float64] */, %162, meta[relay.Constant][10] /* ty=Tensor[(480), float64] */, %163, meta[relay.Constant][11] /* ty=Tensor[(1008), uint8] */, %164, meta[relay.Constant][12] /* ty=Tensor[(240), float64] */, %var_4282, %var_4283, %165, meta[relay.Constant][13] /* ty=Tensor[(924), float32] */, %166, %var_4293, meta[relay.Constant][14] /* ty=Tensor[(560, 1), float32] */, %167)
  };
  %168(%var_4313, %var_4314, %var_4315) /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(210), float64], Tensor[(15, 4, 8), int8], Tensor[(480), float64], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8], Tensor[(4, 12, 3), int32], Tensor[(240), float64], Tensor[(12, 100), float64], Tensor[(81), uint64], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(560), float32], Tensor[(1, 60), float64], Tensor[(560, 1), float32], Tensor[(15, 4, 8), float32]) */
}

def @func_3703(%var_3699: Tensor[(81), int64], %var_3700: Tensor[(840), float32]) -> (Tensor[(2, 16, 5), float64], Tensor[(840), float32], Tensor[(81), int64], Tensor[(840), float32]) {
  %169 = @func_3442() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %170 = cast(%var_3699, dtype="int64") /* ty=Tensor[(81), int64] */;
  %171 = cast(%var_3700, dtype="float32") /* ty=Tensor[(840), float32] */;
  %172 = reshape(%170, newshape=[3, 9, 3]) /* ty=Tensor[(3, 9, 3), int64] */;
  %173 = reshape(%171, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %174 = @func_2975(%172, %173) /* ty=(Tensor[(7, 10, 12), float32], Tensor[(840), float32], Tensor[(3, 9, 3), uint8]) */;
  %175 = %169.0;
  %176 = %174.1;
  (%175, %176, %var_3699, %var_3700)
}

def @func_7824() -> (Tensor[(12, 11, 7), float32],) {
  @func_7822() /* ty=(Tensor[(12, 11, 7), float32],) */
}

def @func_3594(%var_3586: Tensor[(40, 12), float64]) -> (Tensor[(12, 12, 7), bool], Tensor[(15, 4, 8), float64], Tensor[(9, 9), uint64], Tensor[(567), uint64], Tensor[(40, 12), float64], Tensor[(4, 12, 1), float32]) {
  %177 = @func_3121() /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) */;
  %178 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 9), uint64] */, dtype="uint64") /* ty=Tensor[(9, 9), uint64] */;
  %179 = cast(meta[relay.Constant][16] /* ty=Tensor[(567), uint64] */, dtype="uint64") /* ty=Tensor[(567), uint64] */;
  %180 = cast(%var_3586, dtype="float64") /* ty=Tensor[(40, 12), float64] */;
  %181 = reshape(%178, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), uint64] */;
  %182 = reshape(%179, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), uint64] */;
  %183 = reshape(%180, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %184 = @func_403(%181, %182, %183) /* ty=(Tensor[(7, 9, 9), uint64], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int32], Tensor[(15, 4, 8), float64], Tensor[(7, 10, 8), bool]) */;
  %185 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %186 = %177.4;
  %187 = %184.4;
  %188 = %185.0;
  (%186, %187, meta[relay.Constant][15] /* ty=Tensor[(9, 9), uint64] */, meta[relay.Constant][16] /* ty=Tensor[(567), uint64] */, %var_3586, %188)
}

def @func_4766() -> Tensor[(10, 8, 7), float32] {
  %190 = fn () -> Tensor[(10, 8, 7), float32] {
    %189 = @func_3554() /* ty=(Tensor[(10, 8, 7), float32], Tensor[(4, 12, 560), float64]) */;
    %189.0
  };
  %190() /* ty=Tensor[(10, 8, 7), float32] */
}

def @func_3121() -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) {
  %191 = @func_3044() /* ty=Tensor[(4, 12, 1), float32] */;
  %192 = cast(%191, dtype="float32") /* ty=Tensor[(4, 12, 1), float32] */;
  %193 = cast(%191, dtype="float32") /* ty=Tensor[(4, 12, 1), float32] */;
  %194 = cast(meta[relay.Constant][17] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %195 = reshape(%194, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
  %196 = cast(meta[relay.Constant][18] /* ty=Tensor[(1008), uint8] */, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %197 = cast(meta[relay.Constant][18] /* ty=Tensor[(1008), uint8] */, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %198 = reshape(%196, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), uint8] */;
  %199 = reshape(%197, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), uint8] */;
  %200 = @func_1632(%198, %199) /* ty=(Tensor[(12, 12, 7), bool],) */;
  %201 = erf(%192) /* ty=Tensor[(4, 12, 1), float32] */;
  %202 = asinh(%193) /* ty=Tensor[(4, 12, 1), float32] */;
  %203 = @func_1303(%195) /* ty=Tensor[(12, 11, 7), float32] */;
  %204 = %200.0;
  (%201, %202, %203, meta[relay.Constant][17] /* ty=Tensor[(924), float32] */, %204, meta[relay.Constant][18] /* ty=Tensor[(1008), uint8] */)
}

def @func_3261() -> (Tensor[(4, 12, 1), float32],) {
  @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */
}

def @func_4153(%var_4136: Tensor[(210), float64], %var_4150: Tensor[(650), int32]) -> (Tensor[(12, 12, 7), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64], Tensor[(10, 13, 5), int32], Tensor[(650), int32]) {
  %205 = @func_3121() /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) */;
  %206 = cast(%var_4136, dtype="float64") /* ty=Tensor[(210), float64] */;
  %207 = reshape(%206, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float64] */;
  %208 = @func_3665(%207) /* ty=(Tensor[(1, 15, 14), float64], Tensor[(4, 12, 1), float32]) */;
  %209 = cast(%var_4150, dtype="int32") /* ty=Tensor[(650), int32] */;
  %210 = reshape(%209, newshape=[10, 13, 5]) /* ty=Tensor[(10, 13, 5), int32] */;
  %211 = @func_954(%210) /* ty=(Tensor[(10, 13, 5), int32],) */;
  %212 = %205.4;
  %213 = %208.0;
  %214 = %211.0;
  (%212, %213, %var_4136, %214, %var_4150)
}

def @func_3707(%var_3705: Tensor[(81), int64], %var_3706: Tensor[(840), float32]) -> (Tensor[(2, 16, 5), float64], Tensor[(840), float32], Tensor[(81), int64], Tensor[(840), float32]) {
  @func_3703(%var_3705, %var_3706) /* ty=(Tensor[(2, 16, 5), float64], Tensor[(840), float32], Tensor[(81), int64], Tensor[(840), float32]) */
}

def @func_3224() -> (Tensor[(4, 12, 1), float32],) {
  %216 = fn () -> (Tensor[(4, 12, 1), float32],) {
    %215 = @func_3044() /* ty=Tensor[(4, 12, 1), float32] */;
    (%215,)
  };
  %216() /* ty=(Tensor[(4, 12, 1), float32],) */
}

def @func_6132(%var_6131: Tensor[(6, 8, 6), int32]) -> (Tensor[(6, 8, 6), int32], Tensor[(6, 8, 6), float32], Tensor[(4, 12, 1), float32]) {
  %225 = fn (%var_6120: Tensor[(6, 8, 6), int32]) -> (Tensor[(6, 8, 6), int32], Tensor[(6, 8, 6), float32], Tensor[(4, 12, 1), float32]) {
    %217 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 8, 6), int32] */, dtype="int32") /* ty=Tensor[(6, 8, 6), int32] */;
    %218 = shape_of(%var_6120, dtype="int32") /* ty=Tensor[(3), int32] */;
    %219 = cast(%var_6120, dtype="int32") /* ty=Tensor[(6, 8, 6), int32] */;
    %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %221 = cast(%var_6120, dtype="float32") /* ty=Tensor[(6, 8, 6), float32] */;
    %222 = bitwise_and(%219, %220) /* ty=Tensor[(6, 8, 6), int32] */;
    %223 = tan(%221) /* ty=Tensor[(6, 8, 6), float32] */;
    %224 = @func_5144() /* ty=Tensor[(4, 12, 1), float32] */;
    (%222, %223, %224)
  };
  %225(%var_6131) /* ty=(Tensor[(6, 8, 6), int32], Tensor[(6, 8, 6), float32], Tensor[(4, 12, 1), float32]) */
}

def @func_6028() -> Tensor[(4, 12, ?), int8] {
  @func_6026() /* ty=Tensor[(4, 12, ?), int8] */
}

def @func_7197() -> Tensor[(4, 12, ?), float64] {
  %228 = fn () -> Tensor[(4, 12, ?), float64] {
    %226 = @func_6026() /* ty=Tensor[(4, 12, ?), int8] */;
    %227 = cast(%226, dtype="float64") /* ty=Tensor[(4, 12, ?), float64] */;
    atan(%227) /* ty=Tensor[(4, 12, ?), float64] */
  };
  %228() /* ty=Tensor[(4, 12, ?), float64] */
}

def @func_3929(%var_3927: Tensor[(560, 1), float32], %var_3928: Tensor[(60, 15), float64]) -> (Tensor[(560), float32], Tensor[(60, 15), bool], Tensor[(4, 12, 1), float32], Tensor[(7, 1, 2), float32], Tensor[(14), float32], Tensor[(2, 16, 5), float64], Tensor[(560, 1), float64]) {
  %264 = fn (%var_3836: Tensor[(560, 1), float32], %var_3843: Tensor[(60, 15), float64]) -> (Tensor[(560), float32], Tensor[(60, 15), bool], Tensor[(4, 12, 1), float32], Tensor[(7, 1, 2), float32], Tensor[(14), float32], Tensor[(2, 16, 5), float64], Tensor[(560, 1), float64]) {
    %229 = cast(meta[relay.Constant][20] /* ty=Tensor[(60, 1), float64] */, dtype="float64") /* ty=Tensor[(60, 1), float64] */;
    %230 = cast(%var_3836, dtype="float32") /* ty=Tensor[(560, 1), float32] */;
    %231 = reshape(%229, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), float64] */;
    %232 = reshape(%230, newshape=[560]) /* ty=Tensor[(560), float32] */;
    %233 = @func_2751(%231, %232) /* ty=(Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(12, 1, 5), float64]) */;
    %234 = cast(meta[relay.Constant][20] /* ty=Tensor[(60, 1), float64] */, dtype="bool") /* ty=Tensor[(60, 1), bool] */;
    %235 = cast(%var_3843, dtype="bool") /* ty=Tensor[(60, 15), bool] */;
    %236 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
    %237 = cast(meta[relay.Constant][20] /* ty=Tensor[(60, 1), float64] */, dtype="int32") /* ty=Tensor[(60, 1), int32] */;
    %238 = cast(meta[relay.Constant][21] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
    %239 = reshape(%237, newshape=[6, 2, 5]) /* ty=Tensor[(6, 2, 5), int32] */;
    %240 = reshape(%238, newshape=[14]) /* ty=Tensor[(14), float32] */;
    %241 = @func_1523(%239, %240) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(7, 1, 2), float32], Tensor[(14), float32]) */;
    %242 = @func_3442() /* ty=(Tensor[(2, 16, 5), float64],) */;
    %243 = %242.0;
    %244 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 16, 5), float64] */, dtype="bool") /* ty=Tensor[(2, 16, 5), bool] */;
    %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
    %246 = cast(%243, dtype="bool") /* ty=Tensor[(2, 16, 5), bool] */;
    %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %248 = greater(%246, %247) /* ty=Tensor[(2, 16, 5), bool] */;
    %249 = @func_3442() /* ty=(Tensor[(2, 16, 5), float64],) */;
    %250 = %249.0;
    %251 = cast(%250, dtype="float64") /* ty=Tensor[(2, 16, 5), float64] */;
    %252 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
    %253 = cast(%248, dtype="float64") /* ty=Tensor[(2, 16, 5), float64] */;
    %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %255 = cast(%var_3836, dtype="float32") /* ty=Tensor[(560, 1), float32] */;
    %256 = cos(%255) /* ty=Tensor[(560, 1), float32] */;
    %257 = cast(%256, dtype="float64") /* ty=Tensor[(560, 1), float64] */;
    %258 = %233.1;
    %259 = greater_equal(%234, %235) /* ty=Tensor[(60, 15), bool] */;
    %260 = %236.0;
    %261 = %241.1;
    %262 = subtract(%253, %254) /* ty=Tensor[(2, 16, 5), float64] */;
    %263 = rsqrt(%257) /* ty=Tensor[(560, 1), float64] */;
    (%258, %259, %260, %261, meta[relay.Constant][21] /* ty=Tensor[(14), float32] */, %262, %263)
  };
  %264(%var_3927, %var_3928) /* ty=(Tensor[(560), float32], Tensor[(60, 15), bool], Tensor[(4, 12, 1), float32], Tensor[(7, 1, 2), float32], Tensor[(14), float32], Tensor[(2, 16, 5), float64], Tensor[(560, 1), float64]) */
}

def @func_5735() -> (Tensor[(4, 12, 560), float64],) {
  %265 = @func_3554() /* ty=(Tensor[(10, 8, 7), float32], Tensor[(4, 12, 560), float64]) */;
  %266 = %265.1;
  (%266,)
}

def @func_6872() -> (Tensor[(2, 16, 5), float64], Tensor[(4, 12, 924), bool], Tensor[(6, 8, 6), float32], Tensor[(288), int32], Tensor[(924), float32], Tensor[(2, 16, 5), float64]) {
  @func_6870() /* ty=(Tensor[(2, 16, 5), float64], Tensor[(4, 12, 924), bool], Tensor[(6, 8, 6), float32], Tensor[(288), int32], Tensor[(924), float32], Tensor[(2, 16, 5), float64]) */
}

def @func_4392(%var_4318: Tensor[(1, 12, 9), int32], %var_4369: Tensor[(60), int32], %var_4383: Tensor[(650), int32]) -> (Tensor[(3, 12, 9), bool], Tensor[(9, 14, 12), uint32], Tensor[(6, 16, 12), float32], Tensor[(1512), float32], Tensor[(7, 1, 2), float32], Tensor[(60), int32], Tensor[(14), float32], Tensor[(10, 13, 5), int32], Tensor[(650), int32], Tensor[(1152), bool]) {
  %267 = cast(%var_4318, dtype="bool") /* ty=Tensor[(1, 12, 9), bool] */;
  %268 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 12, 9), int32] */, dtype="bool") /* ty=Tensor[(3, 12, 9), bool] */;
  %269 = cast(meta[relay.Constant][24] /* ty=Tensor[(1512), uint32] */, dtype="uint32") /* ty=Tensor[(1512), uint32] */;
  %270 = reshape(%269, newshape=[9, 14, 12]) /* ty=Tensor[(9, 14, 12), uint32] */;
  %271 = cast(meta[relay.Constant][25] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %272 = reshape(%271, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), float32] */;
  %273 = @func_1539(%272) /* ty=Tensor[(6, 16, 12), float32] */;
  %274 = cast(meta[relay.Constant][25] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %278 = cast(meta[relay.Constant][24] /* ty=Tensor[(1512), uint32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %279 = cast(%var_4369, dtype="int32") /* ty=Tensor[(60), int32] */;
  %280 = cast(meta[relay.Constant][26] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %281 = reshape(%279, newshape=[6, 2, 5]) /* ty=Tensor[(6, 2, 5), int32] */;
  %282 = reshape(%280, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %283 = @func_1523(%281, %282) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(7, 1, 2), float32], Tensor[(14), float32]) */;
  %284 = cast(%var_4383, dtype="int32") /* ty=Tensor[(650), int32] */;
  %285 = reshape(%284, newshape=[10, 13, 5]) /* ty=Tensor[(10, 13, 5), int32] */;
  %286 = @func_954(%285) /* ty=(Tensor[(10, 13, 5), int32],) */;
  %287 = cast(meta[relay.Constant][25] /* ty=Tensor[(1152), float32] */, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %288 = sinh(%287) /* ty=Tensor[(1152), float64] */;
  %289 = cast(meta[relay.Constant][25] /* ty=Tensor[(1152), float32] */, dtype="bool") /* ty=Tensor[(1152), bool] */;
  %290 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%273, dtype="bool") /* ty=Tensor[(6, 16, 12), bool] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %293 = logical_or(%291, %292) /* ty=Tensor[(6, 16, 12), bool] */;
  %294 = cast(%293, dtype="bool") /* ty=Tensor[(6, 16, 12), bool] */;
  %295 = shape_of(%288, dtype="int32") /* ty=Tensor[(1), int32] */;
  %296 = cast(%288, dtype="bool") /* ty=Tensor[(1152), bool] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?), bool] */;
  %298 = greater_equal(%267, %268) /* ty=Tensor[(3, 12, 9), bool] */;
  %299 = @func_2157(%270) /* ty=Tensor[(9, 14, 12), uint32] */;
  %300 = floor_mod(%276, %277) /* ty=Tensor[(6, 16, 12), float32] */;
  %301 = acosh(%278) /* ty=Tensor[(1512), float32] */;
  %302 = %283.1;
  %303 = %286.0;
  %304 = greater_equal(%296, %297) /* ty=Tensor[(1152), bool] */;
  (%298, %299, %300, %301, %302, %var_4369, meta[relay.Constant][26] /* ty=Tensor[(14), float32] */, %303, %var_4383, %304)
}

def @func_3357() -> (Tensor[(2, 16, 5), float64],) {
  @func_3355() /* ty=(Tensor[(2, 16, 5), float64],) */
}

def @func_407(%var_404: Tensor[(1, 9, 9), uint64], %var_405: Tensor[(7, 9, 9), uint64], %var_406: Tensor[(480), float64]) -> (Tensor[(7, 9, 9), uint64], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int32], Tensor[(15, 4, 8), float64], Tensor[(7, 10, 8), bool]) {
  %335 = fn (%var_305: Tensor[(1, 9, 9), uint64], %var_306: Tensor[(7, 9, 9), uint64], %var_316: Tensor[(480), float64]) -> (Tensor[(7, 9, 9), uint64], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int32], Tensor[(15, 4, 8), float64], Tensor[(7, 10, 8), bool]) {
    %305 = cast(%var_305, dtype="uint64") /* ty=Tensor[(1, 9, 9), uint64] */;
    %306 = cast(%var_306, dtype="uint64") /* ty=Tensor[(7, 9, 9), uint64] */;
    %307 = cast(%var_316, dtype="float64") /* ty=Tensor[(480), float64] */;
    %308 = reshape(%307, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float64] */;
    %309 = @func_41(%308) /* ty=(Tensor[(15, 4, 8), int8],) */;
    %310 = cast(%var_316, dtype="float64") /* ty=Tensor[(480), float64] */;
    %311 = reshape(%310, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float64] */;
    %312 = @func_41(%311) /* ty=(Tensor[(15, 4, 8), int8],) */;
    %313 = %312.0;
    %314 = cast(%313, dtype="float64") /* ty=Tensor[(15, 4, 8), float64] */;
    %315 = reshape(%314, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float64] */;
    %316 = @func_41(%315) /* ty=(Tensor[(15, 4, 8), int8],) */;
    %317 = cast(%var_316, dtype="int32") /* ty=Tensor[(480), int32] */;
    %318 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
    %319 = cast(%313, dtype="int32") /* ty=Tensor[(15, 4, 8), int32] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %321 = cast(%313, dtype="float64") /* ty=Tensor[(15, 4, 8), float64] */;
    %322 = reshape(%321, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %323 = @func_198(%322) /* ty=(Tensor[(7, 10, 8), bool], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) */;
    %324 = %323.1;
    %325 = cast(%324, dtype="float64") /* ty=Tensor[(15, 4, 8), float64] */;
    %326 = left_shift(%319, %320) /* ty=Tensor[(15, 4, 8), int32] */;
    %327 = cast(%326, dtype="float64") /* ty=Tensor[(15, 4, 8), float64] */;
    %328 = reshape(%327, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %329 = @func_198(%328) /* ty=(Tensor[(7, 10, 8), bool], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) */;
    %330 = minimum(%305, %306) /* ty=Tensor[(7, 9, 9), uint64] */;
    %331 = %309.0;
    %332 = %316.0;
    %333 = asinh(%325) /* ty=Tensor[(15, 4, 8), float64] */;
    %334 = %329.0;
    (%330, %331, %332, %326, %333, %334)
  };
  %335(%var_404, %var_405, %var_406) /* ty=(Tensor[(7, 9, 9), uint64], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int32], Tensor[(15, 4, 8), float64], Tensor[(7, 10, 8), bool]) */
}

def @func_2940(%var_2939: Tensor[(1, 2, 8), float32]) -> (Tensor[(?, 2, 8), bool],) {
  %343 = fn (%var_2922: Tensor[(1, 2, 8), float32]) -> (Tensor[(?, 2, 8), bool],) {
    %336 = cast(%var_2922, dtype="float32") /* ty=Tensor[(1, 2, 8), float32] */;
    %337 = log(%336) /* ty=Tensor[(1, 2, 8), float32] */;
    %338 = cast(%var_2922, dtype="bool") /* ty=Tensor[(1, 2, 8), bool] */;
    %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
    %340 = cast(%337, dtype="bool") /* ty=Tensor[(1, 2, 8), bool] */;
    %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %342 = logical_or(%340, %341) /* ty=Tensor[(?, 2, 8), bool] */;
    (%342,)
  };
  %343(%var_2939) /* ty=(Tensor[(?, 2, 8), bool],) */
}

def @func_3259() -> (Tensor[(4, 12, 1), float32],) {
  %344 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %345 = %344.0;
  (%345,)
}

def @func_5444(%var_5429: Tensor[(4, 12, 924), bool]) -> (Tensor[(4, 12, 924), uint32], Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32]) {
  %346 = @func_4551() /* ty=(Tensor[(4, 12, 924), bool],) */;
  %347 = %346.0;
  %348 = cast(%var_5429, dtype="uint32") /* ty=Tensor[(4, 12, 924), uint32] */;
  %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%347, dtype="uint32") /* ty=Tensor[(4, 12, 924), uint32] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %352 = @func_4745() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %353 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %354 = minimum(%350, %351) /* ty=Tensor[(4, 12, 924), uint32] */;
  %355 = %352.0;
  %356 = %353.0;
  (%354, %355, %356)
}

def @func_5447(%var_5445: Tensor[(4, 12, 924), bool]) -> (Tensor[(4, 12, 924), uint32], Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32]) {
  @func_5444(%var_5445) /* ty=(Tensor[(4, 12, 924), uint32], Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32]) */
}

def @func_6728(%var_6723: Tensor[(144), int32]) -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 3), float32], Tensor[(144), int32], Tensor[(560), float32]) {
  %357 = @func_4745() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %358 = cast(%var_6723, dtype="int32") /* ty=Tensor[(144), int32] */;
  %359 = cast(%var_6723, dtype="float32") /* ty=Tensor[(144), float32] */;
  %360 = cast(meta[relay.Constant][27] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %361 = reshape(%358, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), int32] */;
  %362 = reshape(%359, newshape=[4, 12, 3]) /* ty=Tensor[(4, 12, 3), float32] */;
  %363 = reshape(%360, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %364 = @func_4684(%361, %362, %363) /* ty=(Tensor[(4, 12, 3), int16], Tensor[(4, 12, 3), float32], Tensor[(60), float64], Tensor[(560), float32], Tensor[(4, 12, 3), int32], Tensor[(4, 12, 3), float32], Tensor[(560), float64]) */;
  %365 = %357.0;
  %366 = %364.1;
  (%365, %366, %var_6723, meta[relay.Constant][27] /* ty=Tensor[(560), float32] */)
}

def @func_5889(%var_5869: Tensor[(1200), float64], %var_5870: Tensor[(81, 1), uint64], %var_5871: Tensor[(480), float64]) -> (Tensor[(81), uint64], Tensor[(240), float64], Tensor[(1200), float64], Tensor[(81, 1), uint64], Tensor[(480), float64], Tensor[(?, 2, 8), bool], Tensor[(16), float32], Tensor[(4, 12, 560), bool]) {
  %367 = cast(meta[relay.Constant][28] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %368 = cast(%var_5869, dtype="float64") /* ty=Tensor[(1200), float64] */;
  %369 = cast(%var_5870, dtype="uint64") /* ty=Tensor[(81, 1), uint64] */;
  %370 = cast(%var_5871, dtype="float64") /* ty=Tensor[(480), float64] */;
  %371 = reshape(%367, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float64] */;
  %372 = reshape(%368, newshape=[5, 15, 16]) /* ty=Tensor[(5, 15, 16), float64] */;
  %373 = reshape(%369, newshape=[81]) /* ty=Tensor[(81), uint64] */;
  %374 = reshape(%370, newshape=[40, 12]) /* ty=Tensor[(40, 12), float64] */;
  %375 = @func_4052(%371, %372, %373, %374) /* ty=(Tensor[(5, 15, 16), uint32], Tensor[(5, 15, 16), float32], Tensor[(81), uint64], Tensor[(567), uint64], Tensor[(15, 4, 8), int8]) */;
  %376 = cast(meta[relay.Constant][29] /* ty=Tensor[(16), float32] */, dtype="float32") /* ty=Tensor[(16), float32] */;
  %377 = reshape(%376, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), float32] */;
  %378 = @func_2938(%377) /* ty=(Tensor[(?, 2, 8), bool],) */;
  %379 = @func_5085() /* ty=(Tensor[(4, 12, 560), float64],) */;
  %380 = %379.0;
  %381 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 12, 560), float64] */, dtype="bool") /* ty=Tensor[(4, 12, 560), bool] */;
  %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%380, dtype="bool") /* ty=Tensor[(4, 12, 560), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %385 = %375.2;
  %386 = %378.0;
  %387 = less_equal(%383, %384) /* ty=Tensor[(4, 12, 560), bool] */;
  (%385, meta[relay.Constant][28] /* ty=Tensor[(240), float64] */, %var_5869, %var_5870, %var_5871, %386, meta[relay.Constant][29] /* ty=Tensor[(16), float32] */, %387)
}

def @func_4600() -> Tensor[(4, 12, 1), float32] {
  @func_4598() /* ty=Tensor[(4, 12, 1), float32] */
}

def @func_4157(%var_4155: Tensor[(210), float64], %var_4156: Tensor[(650), int32]) -> (Tensor[(12, 12, 7), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64], Tensor[(10, 13, 5), int32], Tensor[(650), int32]) {
  @func_4153(%var_4155, %var_4156) /* ty=(Tensor[(12, 12, 7), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64], Tensor[(10, 13, 5), int32], Tensor[(650), int32]) */
}

def @func_6194(%var_6192: Tensor[(840), float32], %var_6193: Tensor[(7, 10, 12), float32]) -> (Tensor[(10, 8, 7), float32], Tensor[(840), float32], Tensor[(7, 10, 12), uint16]) {
  @func_6190(%var_6192, %var_6193) /* ty=(Tensor[(10, 8, 7), float32], Tensor[(840), float32], Tensor[(7, 10, 12), uint16]) */
}

def @func_5360() -> (Tensor[(4, 12, 1), float32],) {
  %388 = @func_4598() /* ty=Tensor[(4, 12, 1), float32] */;
  (%388,)
}

def @func_4843() -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32]) {
  @func_4841() /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32]) */
}

def @func_7292(%var_7270: Tensor[(4, 4), float32]) -> (Tensor[(10, 8, 7), float32], Tensor[(924), float32], Tensor[(4, 4), float32], Tensor[(14), float32], Tensor[(60), int32], Tensor[(14), float32]) {
  %389 = cast(%var_7270, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %390 = reshape(%389, newshape=[16]) /* ty=Tensor[(16), float32] */;
  %391 = @func_5259(%390) /* ty=(Tensor[(924), float32], Tensor[(?, 2, 8), bool], Tensor[(16), float32]) */;
  %392 = cast(meta[relay.Constant][31] /* ty=Tensor[(60), int32] */, dtype="int32") /* ty=Tensor[(60), int32] */;
  %393 = cast(meta[relay.Constant][32] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %394 = reshape(%392, newshape=[6, 2, 5]) /* ty=Tensor[(6, 2, 5), int32] */;
  %395 = reshape(%393, newshape=[14]) /* ty=Tensor[(14), float32] */;
  %396 = @func_1523(%394, %395) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(7, 1, 2), float32], Tensor[(14), float32]) */;
  %397 = @func_6148() /* ty=Tensor[(10, 8, 7), float32] */;
  %398 = %391.0;
  %399 = %396.2;
  (%397, %398, %var_7270, %399, meta[relay.Constant][31] /* ty=Tensor[(60), int32] */, meta[relay.Constant][32] /* ty=Tensor[(14), float32] */)
}

def @func_6190(%var_6178: Tensor[(840), float32], %var_6181: Tensor[(7, 10, 12), float32]) -> (Tensor[(10, 8, 7), float32], Tensor[(840), float32], Tensor[(7, 10, 12), uint16]) {
  %400 = @func_4517() /* ty=(Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */;
  %401 = cast(%var_6178, dtype="float32") /* ty=Tensor[(840), float32] */;
  %402 = reshape(%401, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), float32] */;
  %403 = @func_2096(%402) /* ty=(Tensor[(7, 10, 12), float32], Tensor[(7, 10, 12), float32]) */;
  %404 = %403.1;
  %405 = cast(%var_6181, dtype="uint16") /* ty=Tensor[(7, 10, 12), uint16] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%404, dtype="uint16") /* ty=Tensor[(7, 10, 12), uint16] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %409 = %400.1;
  %410 = bitwise_xor(%407, %408) /* ty=Tensor[(7, 10, 12), uint16] */;
  (%409, %var_6178, %410)
}

def @func_8466() -> (Tensor[(4, 12, ?), float64], Tensor[(900, 1), float64], Tensor[(900), float64]) {
  %411 = cast(meta[relay.Constant][33] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %412 = reshape(%411, newshape=[900, 1]) /* ty=Tensor[(900, 1), float64] */;
  %413 = @func_7359(%412) /* ty=(Tensor[(4, 12, 1), float32], Tensor[(2, 16, 5), float64], Tensor[(900, 1), float64], Tensor[(1, 455), float32], Tensor[(1, 455), float32]) */;
  %414 = @func_7196() /* ty=Tensor[(4, 12, ?), float64] */;
  %415 = %413.2;
  (%414, %415, meta[relay.Constant][33] /* ty=Tensor[(900), float64] */)
}

def @func_5145() -> Tensor[(4, 12, 1), float32] {
  %417 = fn () -> Tensor[(4, 12, 1), float32] {
    %416 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
    %416.0
  };
  %417() /* ty=Tensor[(4, 12, 1), float32] */
}

def @func_7058() -> (Tensor[(2, 16, 5), float64], Tensor[(4, 12, 924), uint16], Tensor[(7, 10, 12), float32], Tensor[(840), float32]) {
  @func_7056() /* ty=(Tensor[(2, 16, 5), float64], Tensor[(4, 12, 924), uint16], Tensor[(7, 10, 12), float32], Tensor[(840), float32]) */
}

def @func_8281() -> (Tensor[(2, 16, 5), float64],) {
  %419 = fn () -> (Tensor[(2, 16, 5), float64],) {
    %418 = @func_7222() /* ty=Tensor[(2, 16, 5), float64] */;
    (%418,)
  };
  %419() /* ty=(Tensor[(2, 16, 5), float64],) */
}

def @func_8468() -> (Tensor[(4, 12, ?), float64], Tensor[(900, 1), float64], Tensor[(900), float64]) {
  @func_8466() /* ty=(Tensor[(4, 12, ?), float64], Tensor[(900, 1), float64], Tensor[(900), float64]) */
}

def @func_6550(%var_6548: Tensor[(10, 8, 7), float32], %var_6549: Tensor[(10, 8, 7), float32]) -> (Tensor[(4, 12, 3), int32], Tensor[(480), float64], Tensor[(480), float64], Tensor[(10, 8, 7), uint32], Tensor[(10, 8, 7), uint16], Tensor[(9, 14, 12), uint32], Tensor[(3, 504), uint32]) {
  @func_6546(%var_6548, %var_6549) /* ty=(Tensor[(4, 12, 3), int32], Tensor[(480), float64], Tensor[(480), float64], Tensor[(10, 8, 7), uint32], Tensor[(10, 8, 7), uint16], Tensor[(9, 14, 12), uint32], Tensor[(3, 504), uint32]) */
}

def @func_7224() -> Tensor[(2, 16, 5), float64] {
  @func_7222() /* ty=Tensor[(2, 16, 5), float64] */
}

def @func_200(%var_199: Tensor[(480), float64]) -> (Tensor[(7, 10, 8), bool], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) {
  %429 = fn (%var_190: Tensor[(480), float64]) -> (Tensor[(7, 10, 8), bool], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) {
    %420 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 10, 8), float64] */, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
    %421 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(7, 10, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %422 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 10, 8), float64] */, dtype="bool") /* ty=Tensor[(7, 10, 8), bool] */;
    %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %424 = cast(%var_190, dtype="float64") /* ty=Tensor[(480), float64] */;
    %425 = reshape(%424, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), float64] */;
    %426 = @func_41(%425) /* ty=(Tensor[(15, 4, 8), int8],) */;
    %427 = greater(%422, %423) /* ty=Tensor[(7, 10, 8), bool] */;
    %428 = %426.0;
    (%427, %428, %var_190)
  };
  %429(%var_199) /* ty=(Tensor[(7, 10, 8), bool], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) */
}

def @func_1541(%var_1540: Tensor[(6, 16, 12), float32]) -> Tensor[(6, 16, 12), float32] {
  %431 = fn (%var_1534: Tensor[(6, 16, 12), float32]) -> Tensor[(6, 16, 12), float32] {
    %430 = cast(%var_1534, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
    atanh(%430) /* ty=Tensor[(6, 16, 12), float32] */
  };
  %431(%var_1540) /* ty=Tensor[(6, 16, 12), float32] */
}

def @func_593(%var_591: Tensor[(7, 1, 2), float32]) -> Tensor[(7, 1, 2), float32] {
  @func_590(%var_591) /* ty=Tensor[(7, 1, 2), float32] */
}

def @func_5894(%var_5891: Tensor[(1200), float64], %var_5892: Tensor[(81, 1), uint64], %var_5893: Tensor[(480), float64]) -> (Tensor[(81), uint64], Tensor[(240), float64], Tensor[(1200), float64], Tensor[(81, 1), uint64], Tensor[(480), float64], Tensor[(?, 2, 8), bool], Tensor[(16), float32], Tensor[(4, 12, 560), bool]) {
  @func_5889(%var_5891, %var_5892, %var_5893) /* ty=(Tensor[(81), uint64], Tensor[(240), float64], Tensor[(1200), float64], Tensor[(81, 1), uint64], Tensor[(480), float64], Tensor[(?, 2, 8), bool], Tensor[(16), float32], Tensor[(4, 12, 560), bool]) */
}

def @func_7361(%var_7360: Tensor[(900, 1), float64]) -> (Tensor[(4, 12, 1), float32], Tensor[(2, 16, 5), float64], Tensor[(900, 1), float64], Tensor[(1, 455), float32], Tensor[(1, 455), float32]) {
  %446 = fn (%var_7344: Tensor[(900, 1), float64]) -> (Tensor[(4, 12, 1), float32], Tensor[(2, 16, 5), float64], Tensor[(900, 1), float64], Tensor[(1, 455), float32], Tensor[(1, 455), float32]) {
    %432 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
    %433 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 455), uint8] */, dtype="uint8") /* ty=Tensor[(1, 455), uint8] */;
    %434 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 455), uint8] */, dtype="uint8") /* ty=Tensor[(1, 455), uint8] */;
    %435 = cast(%var_7344, dtype="float64") /* ty=Tensor[(900, 1), float64] */;
    %436 = reshape(%433, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), uint8] */;
    %437 = reshape(%434, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), uint8] */;
    %438 = reshape(%435, newshape=[900, 1]) /* ty=Tensor[(900, 1), float64] */;
    %439 = @func_4989(%436, %437, %438) /* ty=(Tensor[(5, 13, 7), uint8], Tensor[(4, 12, 1), float32], Tensor[(2, 16, 5), float64], Tensor[(900, 1), float64], Tensor[(4, 12, 560), float64]) */;
    %440 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 455), uint8] */, dtype="float32") /* ty=Tensor[(1, 455), float32] */;
    %441 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 455), uint8] */, dtype="float32") /* ty=Tensor[(1, 455), float32] */;
    %442 = %432.0;
    %443 = %439.2;
    %444 = asinh(%440) /* ty=Tensor[(1, 455), float32] */;
    %445 = tan(%441) /* ty=Tensor[(1, 455), float32] */;
    (%442, %443, %var_7344, %444, %445)
  };
  %446(%var_7360) /* ty=(Tensor[(4, 12, 1), float32], Tensor[(2, 16, 5), float64], Tensor[(900, 1), float64], Tensor[(1, 455), float32], Tensor[(1, 455), float32]) */
}

def @func_8151(%var_8131: Tensor[(9, 16, 4), float64], %var_8132: Tensor[(9, 16, 4), float64]) -> Tensor[(9, 16, 4), bool] {
  %447 = cast(%var_8132, dtype="bool") /* ty=Tensor[(9, 16, 4), bool] */;
  %448 = shape_of(%var_8131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%var_8131, dtype="bool") /* ty=Tensor[(9, 16, 4), bool] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%449, %450) /* ty=Tensor[(9, 16, 4), bool] */
}

def @func_1526(%var_1524: Tensor[(6, 2, 5), int32], %var_1525: Tensor[(14), float32]) -> (Tensor[(6, 2, 5), bool], Tensor[(7, 1, 2), float32], Tensor[(14), float32]) {
  %459 = fn (%var_1500: Tensor[(6, 2, 5), int32], %var_1514: Tensor[(14), float32]) -> (Tensor[(6, 2, 5), bool], Tensor[(7, 1, 2), float32], Tensor[(14), float32]) {
    %451 = cast(%var_1500, dtype="bool") /* ty=Tensor[(6, 2, 5), bool] */;
    %452 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(6, 2, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %453 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 2, 5), int32] */, dtype="bool") /* ty=Tensor[(6, 2, 5), bool] */;
    %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %455 = cast(%var_1514, dtype="float32") /* ty=Tensor[(14), float32] */;
    %456 = reshape(%455, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), float32] */;
    %457 = greater(%453, %454) /* ty=Tensor[(6, 2, 5), bool] */;
    %458 = @func_590(%456) /* ty=Tensor[(7, 1, 2), float32] */;
    (%457, %458, %var_1514)
  };
  %459(%var_1524, %var_1525) /* ty=(Tensor[(6, 2, 5), bool], Tensor[(7, 1, 2), float32], Tensor[(14), float32]) */
}

def @func_4688(%var_4685: Tensor[(4, 12, 3), int32], %var_4686: Tensor[(4, 12, 3), float32], %var_4687: Tensor[(560), float32]) -> (Tensor[(4, 12, 3), int16], Tensor[(4, 12, 3), float32], Tensor[(60), float64], Tensor[(560), float32], Tensor[(4, 12, 3), int32], Tensor[(4, 12, 3), float32], Tensor[(560), float64]) {
  %493 = fn (%var_4638: Tensor[(4, 12, 3), int32], %var_4643: Tensor[(4, 12, 3), float32], %var_4651: Tensor[(560), float32]) -> (Tensor[(4, 12, 3), int16], Tensor[(4, 12, 3), float32], Tensor[(60), float64], Tensor[(560), float32], Tensor[(4, 12, 3), int32], Tensor[(4, 12, 3), float32], Tensor[(560), float64]) {
    %460 = @func_3749() /* ty=Tensor[(4, 12, 3), int32] */;
    %461 = cast(%var_4638, dtype="int16") /* ty=Tensor[(4, 12, 3), int16] */;
    %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
    %463 = cast(%460, dtype="int16") /* ty=Tensor[(4, 12, 3), int16] */;
    %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %465 = cast(%460, dtype="float32") /* ty=Tensor[(4, 12, 3), float32] */;
    %466 = log10(%465) /* ty=Tensor[(4, 12, 3), float32] */;
    %467 = cast(%var_4643, dtype="float32") /* ty=Tensor[(4, 12, 3), float32] */;
    %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
    %469 = cast(%466, dtype="float32") /* ty=Tensor[(4, 12, 3), float32] */;
    %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %471 = cast(%460, dtype="int32") /* ty=Tensor[(4, 12, 3), int32] */;
    %472 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
    %473 = cast(%466, dtype="int32") /* ty=Tensor[(4, 12, 3), int32] */;
    %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %475 = cast(%460, dtype="float32") /* ty=Tensor[(4, 12, 3), float32] */;
    %476 = cast(meta[relay.Constant][38] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
    %477 = cast(%var_4651, dtype="float32") /* ty=Tensor[(560), float32] */;
    %478 = reshape(%476, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), float64] */;
    %479 = reshape(%477, newshape=[560]) /* ty=Tensor[(560), float32] */;
    %480 = @func_2751(%478, %479) /* ty=(Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(12, 1, 5), float64]) */;
    %481 = %480.1;
    %482 = cast(%481, dtype="float32") /* ty=Tensor[(560), float32] */;
    %483 = atan(%482) /* ty=Tensor[(560), float32] */;
    %484 = cast(meta[relay.Constant][39] /* ty=Tensor[(560), float32] */, dtype="float64") /* ty=Tensor[(560), float64] */;
    %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(1), int32] */;
    %486 = cast(%483, dtype="float64") /* ty=Tensor[(560), float64] */;
    %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?), float64] */;
    %488 = bitwise_or(%463, %464) /* ty=Tensor[(4, 12, 3), int16] */;
    %489 = floor_divide(%469, %470) /* ty=Tensor[(4, 12, 3), float32] */;
    %490 = left_shift(%473, %474) /* ty=Tensor[(4, 12, 3), int32] */;
    %491 = rsqrt(%475) /* ty=Tensor[(4, 12, 3), float32] */;
    %492 = divide(%486, %487) /* ty=Tensor[(560), float64] */;
    (%488, %489, meta[relay.Constant][38] /* ty=Tensor[(60), float64] */, %var_4651, %490, %491, %492)
  };
  %493(%var_4685, %var_4686, %var_4687) /* ty=(Tensor[(4, 12, 3), int16], Tensor[(4, 12, 3), float32], Tensor[(60), float64], Tensor[(560), float32], Tensor[(4, 12, 3), int32], Tensor[(4, 12, 3), float32], Tensor[(560), float64]) */
}

def @func_1965(%var_1964: Tensor[(10, 8, 7), float32]) -> Tensor[(10, 8, 7), float32] {
  %495 = fn (%var_1960: Tensor[(10, 8, 7), float32]) -> Tensor[(10, 8, 7), float32] {
    %494 = cast(%var_1960, dtype="float32") /* ty=Tensor[(10, 8, 7), float32] */;
    sinh(%494) /* ty=Tensor[(10, 8, 7), float32] */
  };
  %495(%var_1964) /* ty=Tensor[(10, 8, 7), float32] */
}

def @func_3668(%var_3666: Tensor[(1, 15, 14), float64]) -> (Tensor[(1, 15, 14), float64], Tensor[(4, 12, 1), float32]) {
  @func_3665(%var_3666) /* ty=(Tensor[(1, 15, 14), float64], Tensor[(4, 12, 1), float32]) */
}

def @func_2582(%var_2580: Tensor[(11, 1, 10), float32], %var_2581: Tensor[(11, 7, 10), float32]) -> (Tensor[(11, 7, 10), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) {
  %502 = fn (%var_2556: Tensor[(11, 1, 10), float32], %var_2557: Tensor[(11, 7, 10), float32]) -> (Tensor[(11, 7, 10), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) {
    %496 = cast(%var_2556, dtype="float32") /* ty=Tensor[(11, 1, 10), float32] */;
    %497 = cast(%var_2557, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
    %498 = cast(meta[relay.Constant][40] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
    %499 = reshape(%498, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
    %500 = floor_divide(%496, %497) /* ty=Tensor[(11, 7, 10), float32] */;
    %501 = @func_1303(%499) /* ty=Tensor[(12, 11, 7), float32] */;
    (%500, %501, meta[relay.Constant][40] /* ty=Tensor[(924), float32] */)
  };
  %502(%var_2580, %var_2581) /* ty=(Tensor[(11, 7, 10), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */
}

def @func_5261(%var_5260: Tensor[(16), float32]) -> (Tensor[(924), float32], Tensor[(?, 2, 8), bool], Tensor[(16), float32]) {
  %509 = fn (%var_5225: Tensor[(16), float32]) -> (Tensor[(924), float32], Tensor[(?, 2, 8), bool], Tensor[(16), float32]) {
    %503 = @func_3121() /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) */;
    %504 = cast(%var_5225, dtype="float32") /* ty=Tensor[(16), float32] */;
    %505 = reshape(%504, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), float32] */;
    %506 = @func_2938(%505) /* ty=(Tensor[(?, 2, 8), bool],) */;
    %507 = %503.3;
    %508 = %506.0;
    (%507, %508, %var_5225)
  };
  %509(%var_5260) /* ty=(Tensor[(924), float32], Tensor[(?, 2, 8), bool], Tensor[(16), float32]) */
}

def @func_5737() -> (Tensor[(4, 12, 560), float64],) {
  @func_5735() /* ty=(Tensor[(4, 12, 560), float64],) */
}

def @func_8155(%var_8153: Tensor[(9, 16, 4), float64], %var_8154: Tensor[(9, 16, 4), float64]) -> Tensor[(9, 16, 4), bool] {
  @func_8151(%var_8153, %var_8154) /* ty=Tensor[(9, 16, 4), bool] */
}

def @func_4578() -> Tensor[(2, 16, 5), float64] {
  %511 = fn () -> Tensor[(2, 16, 5), float64] {
    %510 = @func_3442() /* ty=(Tensor[(2, 16, 5), float64],) */;
    %510.0
  };
  %511() /* ty=Tensor[(2, 16, 5), float64] */
}

def @main(%var_8584: Tensor[(4, 12, 9), float32]) -> (Tensor[(4, 12, 9), int32], Tensor[(4, 12, 560), float32], Tensor[(7, 1, 2), float32], Tensor[(26880), uint8]) {
  %512 = @func_3261() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %513 = %512.0;
  %514 = cast(%513, dtype="int32") /* ty=Tensor[(4, 12, 1), int32] */;
  %515 = cast(%var_8584, dtype="int32") /* ty=Tensor[(4, 12, 9), int32] */;
  %516 = cast(meta[relay.Constant][41] /* ty=Tensor[(26880), float64] */, dtype="float64") /* ty=Tensor[(26880), float64] */;
  %517 = reshape(%516, newshape=[4, 12, 560]) /* ty=Tensor[(4, 12, 560), float64] */;
  %518 = @func_8311(%517) /* ty=(Tensor[(4, 12, 560), float32],) */;
  %519 = @func_6119() /* ty=(Tensor[(12, 11, 7), float32], Tensor[(7, 1, 2), float32], Tensor[(1, 14), float32]) */;
  %520 = cast(meta[relay.Constant][42] /* ty=Tensor[(26880), float64] */, dtype="uint8") /* ty=Tensor[(26880), uint8] */;
  %521 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(26880), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %522 = cast(meta[relay.Constant][41] /* ty=Tensor[(26880), float64] */, dtype="uint8") /* ty=Tensor[(26880), uint8] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %524 = add(%522, %523) /* ty=Tensor[(26880), uint8] */;
  %525 = cast(meta[relay.Constant][42] /* ty=Tensor[(26880), float64] */, dtype="uint8") /* ty=Tensor[(26880), uint8] */;
  %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(1), int32] */;
  %527 = cast(%524, dtype="uint8") /* ty=Tensor[(26880), uint8] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %529 = right_shift(%514, %515) /* ty=Tensor[(4, 12, 9), int32] */;
  %530 = %518.0;
  %531 = %519.1;
  %532 = bitwise_xor(%527, %528) /* ty=Tensor[(26880), uint8] */;
  (%529, %530, %531, %532)
}

def @func_4518() -> (Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) {
  %539 = fn () -> (Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) {
    %533 = @func_3554() /* ty=(Tensor[(10, 8, 7), float32], Tensor[(4, 12, 560), float64]) */;
    %534 = cast(meta[relay.Constant][43] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
    %535 = reshape(%534, newshape=[12, 11, 7]) /* ty=Tensor[(12, 11, 7), float32] */;
    %536 = @func_3749() /* ty=Tensor[(4, 12, 3), int32] */;
    %537 = %533.0;
    %538 = @func_1303(%535) /* ty=Tensor[(12, 11, 7), float32] */;
    (%536, %537, %538, meta[relay.Constant][43] /* ty=Tensor[(924), float32] */)
  };
  %539() /* ty=(Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */
}

def @func_6149() -> Tensor[(10, 8, 7), float32] {
  %540 = fn () -> Tensor[(10, 8, 7), float32] {
    @func_4765() /* ty=Tensor[(10, 8, 7), float32] */
  };
  %540() /* ty=Tensor[(10, 8, 7), float32] */
}

def @func_3749() -> Tensor[(4, 12, 3), int32] {
  %541 = @func_3044() /* ty=Tensor[(4, 12, 1), float32] */;
  %542 = cast(%541, dtype="uint64") /* ty=Tensor[(4, 12, 1), uint64] */;
  %543 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 12, 3), float32] */, dtype="uint64") /* ty=Tensor[(4, 12, 3), uint64] */;
  %544 = maximum(%542, %543) /* ty=Tensor[(4, 12, 3), uint64] */;
  %545 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 12, 3), float32] */, dtype="int32") /* ty=Tensor[(4, 12, 3), int32] */;
  %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%544, dtype="int32") /* ty=Tensor[(4, 12, 3), int32] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%547, %548) /* ty=Tensor[(4, 12, 3), int32] */
}

def @func_3751() -> Tensor[(4, 12, 3), int32] {
  @func_3749() /* ty=Tensor[(4, 12, 3), int32] */
}

def @func_7621() -> (Tensor[(10, 8, 7), float32],) {
  %549 = @func_4885() /* ty=Tensor[(10, 8, 7), float32] */;
  (%549,)
}

def @func_5595(%var_5593: Tensor[(560), float32], %var_5594: Tensor[(450, 2), float64]) -> (Tensor[(4, 12, 1), float32], Tensor[(560, 1), float64], Tensor[(560), float32], Tensor[(450, 2), float64]) {
  %560 = fn (%var_5588: Tensor[(560), float32], %var_5589: Tensor[(450, 2), float64]) -> (Tensor[(4, 12, 1), float32], Tensor[(560, 1), float64], Tensor[(560), float32], Tensor[(450, 2), float64]) {
    %550 = @func_5360() /* ty=(Tensor[(4, 12, 1), float32],) */;
    %551 = %550.0;
    %552 = cast(%551, dtype="float32") /* ty=Tensor[(4, 12, 1), float32] */;
    %553 = cast(%var_5588, dtype="float32") /* ty=Tensor[(560), float32] */;
    %554 = cast(%var_5589, dtype="float64") /* ty=Tensor[(450, 2), float64] */;
    %555 = reshape(%553, newshape=[560, 1]) /* ty=Tensor[(560, 1), float32] */;
    %556 = reshape(%554, newshape=[60, 15]) /* ty=Tensor[(60, 15), float64] */;
    %557 = @func_3926(%555, %556) /* ty=(Tensor[(560), float32], Tensor[(60, 15), bool], Tensor[(4, 12, 1), float32], Tensor[(7, 1, 2), float32], Tensor[(14), float32], Tensor[(2, 16, 5), float64], Tensor[(560, 1), float64]) */;
    %558 = exp(%552) /* ty=Tensor[(4, 12, 1), float32] */;
    %559 = %557.6;
    (%558, %559, %var_5588, %var_5589)
  };
  %560(%var_5593, %var_5594) /* ty=(Tensor[(4, 12, 1), float32], Tensor[(560, 1), float64], Tensor[(560), float32], Tensor[(450, 2), float64]) */
}

def @func_8521(%var_8519: Tensor[(110), float32]) -> (Tensor[(2, 16, 5), float64], Tensor[(924), float32], Tensor[(110), float32], Tensor[(770), float32]) {
  @func_8518(%var_8519) /* ty=(Tensor[(2, 16, 5), float64], Tensor[(924), float32], Tensor[(110), float32], Tensor[(770), float32]) */
}

def @func_8518(%var_8504: Tensor[(110), float32]) -> (Tensor[(2, 16, 5), float64], Tensor[(924), float32], Tensor[(110), float32], Tensor[(770), float32]) {
  %561 = cast(%var_8504, dtype="float32") /* ty=Tensor[(110), float32] */;
  %562 = cast(meta[relay.Constant][45] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %563 = reshape(%561, newshape=[11, 1, 10]) /* ty=Tensor[(11, 1, 10), float32] */;
  %564 = reshape(%562, newshape=[11, 7, 10]) /* ty=Tensor[(11, 7, 10), float32] */;
  %565 = @func_2579(%563, %564) /* ty=(Tensor[(11, 7, 10), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */;
  %566 = @func_5332() /* ty=Tensor[(2, 16, 5), float64] */;
  %567 = %565.2;
  (%566, %567, %var_8504, meta[relay.Constant][45] /* ty=Tensor[(770), float32] */)
}

def @func_6119() -> (Tensor[(12, 11, 7), float32], Tensor[(7, 1, 2), float32], Tensor[(1, 14), float32]) {
  %573 = fn () -> (Tensor[(12, 11, 7), float32], Tensor[(7, 1, 2), float32], Tensor[(1, 14), float32]) {
    %568 = @func_4517() /* ty=(Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */;
    %569 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 14), float32] */, dtype="float32") /* ty=Tensor[(1, 14), float32] */;
    %570 = reshape(%569, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), float32] */;
    %571 = %568.2;
    %572 = @func_590(%570) /* ty=Tensor[(7, 1, 2), float32] */;
    (%571, %572, meta[relay.Constant][46] /* ty=Tensor[(1, 14), float32] */)
  };
  %573() /* ty=(Tensor[(12, 11, 7), float32], Tensor[(7, 1, 2), float32], Tensor[(1, 14), float32]) */
}

def @func_7451(%var_7449: Tensor[(60), float64], %var_7450: Tensor[(560), float32]) -> (Tensor[(4, 12, 560), float64], Tensor[(12, 11, 7), float32], Tensor[(12, 1, 5), float64], Tensor[(60), float64], Tensor[(560), float32]) {
  %584 = fn (%var_7436: Tensor[(60), float64], %var_7437: Tensor[(560), float32]) -> (Tensor[(4, 12, 560), float64], Tensor[(12, 11, 7), float32], Tensor[(12, 1, 5), float64], Tensor[(60), float64], Tensor[(560), float32]) {
    %574 = @func_5735() /* ty=(Tensor[(4, 12, 560), float64],) */;
    %575 = @func_4517() /* ty=(Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */;
    %576 = cast(%var_7436, dtype="float64") /* ty=Tensor[(60), float64] */;
    %577 = cast(%var_7437, dtype="float32") /* ty=Tensor[(560), float32] */;
    %578 = reshape(%576, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), float64] */;
    %579 = reshape(%577, newshape=[560]) /* ty=Tensor[(560), float32] */;
    %580 = @func_2751(%578, %579) /* ty=(Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(12, 1, 5), float64]) */;
    %581 = %574.0;
    %582 = %575.2;
    %583 = %580.2;
    (%581, %582, %583, %var_7436, %var_7437)
  };
  %584(%var_7449, %var_7450) /* ty=(Tensor[(4, 12, 560), float64], Tensor[(12, 11, 7), float32], Tensor[(12, 1, 5), float64], Tensor[(60), float64], Tensor[(560), float32]) */
}

def @func_6731(%var_6729: Tensor[(144), int32]) -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 3), float32], Tensor[(144), int32], Tensor[(560), float32]) {
  @func_6728(%var_6729) /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 3), float32], Tensor[(144), int32], Tensor[(560), float32]) */
}

def @func_957(%var_955: Tensor[(10, 13, 5), int32]) -> (Tensor[(10, 13, 5), int32],) {
  @func_954(%var_955) /* ty=(Tensor[(10, 13, 5), int32],) */
}

def @func_7398() -> (Tensor[(4, 12, ?), float64],) {
  %586 = fn () -> (Tensor[(4, 12, ?), float64],) {
    %585 = @func_7196() /* ty=Tensor[(4, 12, ?), float64] */;
    (%585,)
  };
  %586() /* ty=(Tensor[(4, 12, ?), float64],) */
}

def @func_4248() -> (Tensor[(2, 16, 5), float64],) {
  @func_4246() /* ty=(Tensor[(2, 16, 5), float64],) */
}

def @func_4745() -> (Tensor[(4, 12, 1), float32],) {
  %587 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %588 = %587.0;
  (%588,)
}

def @func_7623() -> (Tensor[(10, 8, 7), float32],) {
  @func_7621() /* ty=(Tensor[(10, 8, 7), float32],) */
}

def @func_3045() -> Tensor[(4, 12, 1), float32] {
  %590 = fn () -> Tensor[(4, 12, 1), float32] {
    %589 = cast(meta[relay.Constant][47] /* ty=Tensor[(4, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(4, 12, 1), float32] */;
    sinh(%589) /* ty=Tensor[(4, 12, 1), float32] */
  };
  %590() /* ty=Tensor[(4, 12, 1), float32] */
}

def @func_5320() -> Tensor[(4, 12, 924), uint16] {
  %591 = @func_4551() /* ty=(Tensor[(4, 12, 924), bool],) */;
  %592 = %591.0;
  %593 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 12, 924), bool] */, dtype="uint16") /* ty=Tensor[(4, 12, 924), uint16] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="uint16") /* ty=Tensor[(4, 12, 924), uint16] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  maximum(%595, %596) /* ty=Tensor[(4, 12, 924), uint16] */
}

def @func_6930(%var_6894: Tensor[(4, 12, 8), float32], %var_6905: Tensor[(560, 1), uint16]) -> (Tensor[(4, 12, 8), bool], Tensor[(560, ?), float32]) {
  %597 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %598 = %597.0;
  %599 = cast(%598, dtype="float32") /* ty=Tensor[(4, 12, 1), float32] */;
  %600 = cast(%var_6894, dtype="float32") /* ty=Tensor[(4, 12, 8), float32] */;
  %601 = divide(%599, %600) /* ty=Tensor[(4, 12, 8), float32] */;
  %602 = cast(%598, dtype="bool") /* ty=Tensor[(4, 12, 1), bool] */;
  %603 = cast(%601, dtype="bool") /* ty=Tensor[(4, 12, 8), bool] */;
  %604 = cast(%var_6905, dtype="uint16") /* ty=Tensor[(560, 1), uint16] */;
  %605 = cast(%var_6905, dtype="uint16") /* ty=Tensor[(560, 1), uint16] */;
  %606 = reshape(%604, newshape=[7, 5, 16]) /* ty=Tensor[(7, 5, 16), uint16] */;
  %607 = reshape(%605, newshape=[7, 5, 16]) /* ty=Tensor[(7, 5, 16), uint16] */;
  %608 = @func_4440(%606, %607) /* ty=Tensor[(7, 5, 16), uint16] */;
  %609 = cast(%608, dtype="float32") /* ty=Tensor[(7, 5, 16), float32] */;
  %610 = shape_of(%var_6905, dtype="int32") /* ty=Tensor[(2), int32] */;
  %611 = cast(%var_6905, dtype="float32") /* ty=Tensor[(560, 1), float32] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %613 = logical_or(%602, %603) /* ty=Tensor[(4, 12, 8), bool] */;
  %614 = floor_mod(%611, %612) /* ty=Tensor[(560, ?), float32] */;
  (%613, %614)
}

def @func_7956(%var_7955: Tensor[(9, 7, 14), float64]) -> (Tensor[(9, 7, 14), float64], Tensor[(288), float32], Tensor[(480), float64], Tensor[(6, 16, 12), float32], Tensor[(6, 16, 12), float32]) {
  %632 = fn (%var_7903: Tensor[(9, 7, 14), float64]) -> (Tensor[(9, 7, 14), float64], Tensor[(288), float32], Tensor[(480), float64], Tensor[(6, 16, 12), float32], Tensor[(6, 16, 12), float32]) {
    %615 = cast(%var_7903, dtype="float64") /* ty=Tensor[(9, 7, 14), float64] */;
    %616 = cast(meta[relay.Constant][49] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %617 = reshape(%616, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %618 = @func_7734(%617) /* ty=(Tensor[(12, 6, 4), float32], Tensor[(288), float32], Tensor[(560), float32], Tensor[(480), float64], Tensor[(4, 12, 1008), int16], Tensor[(2, 16, 5), float64], Tensor[(480), float64]) */;
    %619 = cast(meta[relay.Constant][50] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %620 = reshape(%619, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), float32] */;
    %621 = @func_1539(%620) /* ty=Tensor[(6, 16, 12), float32] */;
    %622 = cast(meta[relay.Constant][50] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
    %624 = cast(%621, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
    %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %626 = divide(%624, %625) /* ty=Tensor[(6, 16, 12), float32] */;
    %627 = cast(%626, dtype="float32") /* ty=Tensor[(6, 16, 12), float32] */;
    %628 = reshape(%627, newshape=[6, 16, 12]) /* ty=Tensor[(6, 16, 12), float32] */;
    %629 = sigmoid(%615) /* ty=Tensor[(9, 7, 14), float64] */;
    %630 = %618.1;
    %631 = @func_1539(%628) /* ty=Tensor[(6, 16, 12), float32] */;
    (%629, %630, meta[relay.Constant][49] /* ty=Tensor[(480), float64] */, %626, %631)
  };
  %632(%var_7955) /* ty=(Tensor[(9, 7, 14), float64], Tensor[(288), float32], Tensor[(480), float64], Tensor[(6, 16, 12), float32], Tensor[(6, 16, 12), float32]) */
}

def @func_5086() -> (Tensor[(4, 12, 560), float64],) {
  %634 = fn () -> (Tensor[(4, 12, 560), float64],) {
    %633 = @func_4889() /* ty=Tensor[(4, 12, 560), float64] */;
    (%633,)
  };
  %634() /* ty=(Tensor[(4, 12, 560), float64],) */
}

def @func_8104() -> (Tensor[(10, 4, 15), float64], Tensor[(4, 12, 1), float32]) {
  %639 = fn () -> (Tensor[(10, 4, 15), float64], Tensor[(4, 12, 1), float32]) {
    %635 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 4, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 15), float64] */;
    %636 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
    %637 = acosh(%635) /* ty=Tensor[(10, 4, 15), float64] */;
    %638 = %636.0;
    (%637, %638)
  };
  %639() /* ty=(Tensor[(10, 4, 15), float64], Tensor[(4, 12, 1), float32]) */
}

def @func_41(%var_3: Tensor[(15, 4, 8), float64]) -> (Tensor[(15, 4, 8), int8],) {
  %640 = cast(%var_3, dtype="float64") /* ty=Tensor[(15, 4, 8), float64] */;
  %641 = sqrt(%640) /* ty=Tensor[(15, 4, 8), float64] */;
  %642 = cast(%var_3, dtype="int8") /* ty=Tensor[(15, 4, 8), int8] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="int8") /* ty=Tensor[(15, 4, 8), int8] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %646 = logical_xor(%644, %645) /* ty=Tensor[(15, 4, 8), int8] */;
  (%646,)
}

def @func_7696(%var_7694: Tensor[(4, 12, 560), float64]) -> Tensor[(4, 12, 560), int8] {
  @func_7693(%var_7694) /* ty=Tensor[(4, 12, 560), int8] */
}

def @func_7734(%var_7708: Tensor[(480), float64]) -> (Tensor[(12, 6, 4), float32], Tensor[(288), float32], Tensor[(560), float32], Tensor[(480), float64], Tensor[(4, 12, 1008), int16], Tensor[(2, 16, 5), float64], Tensor[(480), float64]) {
  %647 = cast(meta[relay.Constant][52] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %648 = cast(meta[relay.Constant][53] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %649 = cast(meta[relay.Constant][54] /* ty=Tensor[(1008), uint8] */, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %650 = cast(%var_7708, dtype="float64") /* ty=Tensor[(480), float64] */;
  %651 = reshape(%647, newshape=[12, 6, 4]) /* ty=Tensor[(12, 6, 4), float32] */;
  %652 = reshape(%648, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %653 = reshape(%649, newshape=[1008]) /* ty=Tensor[(1008), uint8] */;
  %654 = reshape(%650, newshape=[120, 4]) /* ty=Tensor[(120, 4), float64] */;
  %655 = @func_2899(%651, %652, %653, %654) /* ty=(Tensor[(12, 6, 4), float32], Tensor[(10, 8, 7), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8], Tensor[(7, 9, 9), uint64], Tensor[(1, 81), uint64], Tensor[(9, 63), uint64], Tensor[(120, 4), float64]) */;
  %656 = @func_7397() /* ty=(Tensor[(4, 12, ?), float64],) */;
  %657 = %656.0;
  %658 = cast(meta[relay.Constant][54] /* ty=Tensor[(1008), uint8] */, dtype="int16") /* ty=Tensor[(1008), int16] */;
  %659 = cast(%657, dtype="int16") /* ty=Tensor[(4, 12, ?), int16] */;
  %660 = @func_4246() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %661 = @func_6768() /* ty=(Tensor[(4, 12, 924), float32], Tensor[(15, 4, 8), int8], Tensor[(480), float64], Tensor[(4, 12, 924), float32]) */;
  %662 = %655.0;
  %663 = logical_xor(%658, %659) /* ty=Tensor[(4, 12, 1008), int16] */;
  %664 = %660.0;
  %665 = %661.2;
  (%662, meta[relay.Constant][52] /* ty=Tensor[(288), float32] */, meta[relay.Constant][53] /* ty=Tensor[(560), float32] */, %var_7708, %663, %664, %665)
}

def @func_4598() -> Tensor[(4, 12, 1), float32] {
  %666 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %666.0
}

def @func_5069(%var_5058: int16, %var_5059: Tensor[(10, 1), int16]) -> (Tensor[(10, 1), int16],) {
  %667 = cast(%var_5058, dtype="int16") /* ty=int16 */;
  %668 = cast(%var_5059, dtype="int16") /* ty=Tensor[(10, 1), int16] */;
  %669 = left_shift(%667, %668) /* ty=Tensor[(10, 1), int16] */;
  (%669,)
}

def @func_5322() -> Tensor[(4, 12, 924), uint16] {
  @func_5320() /* ty=Tensor[(4, 12, 924), uint16] */
}

def @func_7822() -> (Tensor[(12, 11, 7), float32],) {
  %670 = @func_3121() /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) */;
  %671 = %670.2;
  (%671,)
}

def @func_2899(%var_2863: Tensor[(12, 6, 4), float32], %var_2871: Tensor[(560), float32], %var_2889: Tensor[(1008), uint8], %var_2894: Tensor[(120, 4), float64]) -> (Tensor[(12, 6, 4), float32], Tensor[(10, 8, 7), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8], Tensor[(7, 9, 9), uint64], Tensor[(1, 81), uint64], Tensor[(9, 63), uint64], Tensor[(120, 4), float64]) {
  %672 = cast(%var_2863, dtype="float32") /* ty=Tensor[(12, 6, 4), float32] */;
  %673 = cast(%var_2871, dtype="float32") /* ty=Tensor[(560), float32] */;
  %674 = reshape(%673, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float32] */;
  %675 = @func_1963(%674) /* ty=Tensor[(10, 8, 7), float32] */;
  %676 = cast(%var_2871, dtype="float32") /* ty=Tensor[(560), float32] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="float32") /* ty=Tensor[(10, 8, 7), float32] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %680 = cast(%var_2889, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %681 = cast(%var_2889, dtype="uint8") /* ty=Tensor[(1008), uint8] */;
  %682 = reshape(%680, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), uint8] */;
  %683 = reshape(%681, newshape=[12, 12, 7]) /* ty=Tensor[(12, 12, 7), uint8] */;
  %684 = @func_1632(%682, %683) /* ty=(Tensor[(12, 12, 7), bool],) */;
  %685 = cast(meta[relay.Constant][55] /* ty=Tensor[(1, 81), uint64] */, dtype="uint64") /* ty=Tensor[(1, 81), uint64] */;
  %686 = cast(meta[relay.Constant][56] /* ty=Tensor[(9, 63), uint64] */, dtype="uint64") /* ty=Tensor[(9, 63), uint64] */;
  %687 = cast(%var_2894, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
  %688 = reshape(%685, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), uint64] */;
  %689 = reshape(%686, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), uint64] */;
  %690 = reshape(%687, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %691 = @func_403(%688, %689, %690) /* ty=(Tensor[(7, 9, 9), uint64], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int32], Tensor[(15, 4, 8), float64], Tensor[(7, 10, 8), bool]) */;
  %692 = log(%672) /* ty=Tensor[(12, 6, 4), float32] */;
  %693 = floor_mod(%678, %679) /* ty=Tensor[(10, 8, 7), float32] */;
  %694 = %684.0;
  %695 = %691.0;
  (%692, %693, %694, %var_2889, %695, meta[relay.Constant][55] /* ty=Tensor[(1, 81), uint64] */, meta[relay.Constant][56] /* ty=Tensor[(9, 63), uint64] */, %var_2894)
}

def @func_1305(%var_1304: Tensor[(12, 11, 7), float32]) -> Tensor[(12, 11, 7), float32] {
  %697 = fn (%var_1300: Tensor[(12, 11, 7), float32]) -> Tensor[(12, 11, 7), float32] {
    %696 = cast(%var_1300, dtype="float32") /* ty=Tensor[(12, 11, 7), float32] */;
    sigmoid(%696) /* ty=Tensor[(12, 11, 7), float32] */
  };
  %697(%var_1304) /* ty=Tensor[(12, 11, 7), float32] */
}

def @func_590(%var_587: Tensor[(7, 1, 2), float32]) -> Tensor[(7, 1, 2), float32] {
  %698 = cast(%var_587, dtype="float32") /* ty=Tensor[(7, 1, 2), float32] */;
  log(%698) /* ty=Tensor[(7, 1, 2), float32] */
}

def @func_4993(%var_4990: Tensor[(5, 13, 7), uint8], %var_4991: Tensor[(5, 13, 7), uint8], %var_4992: Tensor[(900, 1), float64]) -> (Tensor[(5, 13, 7), uint8], Tensor[(4, 12, 1), float32], Tensor[(2, 16, 5), float64], Tensor[(900, 1), float64], Tensor[(4, 12, 560), float64]) {
  %720 = fn (%var_4924: Tensor[(5, 13, 7), uint8], %var_4925: Tensor[(5, 13, 7), uint8], %var_4946: Tensor[(900, 1), float64]) -> (Tensor[(5, 13, 7), uint8], Tensor[(4, 12, 1), float32], Tensor[(2, 16, 5), float64], Tensor[(900, 1), float64], Tensor[(4, 12, 560), float64]) {
    %699 = cast(%var_4925, dtype="uint8") /* ty=Tensor[(5, 13, 7), uint8] */;
    %700 = shape_of(%var_4924, dtype="int32") /* ty=Tensor[(3), int32] */;
    %701 = cast(%var_4924, dtype="uint8") /* ty=Tensor[(5, 13, 7), uint8] */;
    %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %703 = cast(meta[relay.Constant][57] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
    %704 = cast(%var_4946, dtype="float64") /* ty=Tensor[(900, 1), float64] */;
    %705 = reshape(%703, newshape=[560, 1]) /* ty=Tensor[(560, 1), float32] */;
    %706 = reshape(%704, newshape=[60, 15]) /* ty=Tensor[(60, 15), float64] */;
    %707 = @func_3926(%705, %706) /* ty=(Tensor[(560), float32], Tensor[(60, 15), bool], Tensor[(4, 12, 1), float32], Tensor[(7, 1, 2), float32], Tensor[(14), float32], Tensor[(2, 16, 5), float64], Tensor[(560, 1), float64]) */;
    %708 = %707.2;
    %709 = cast(meta[relay.Constant][57] /* ty=Tensor[(560), float32] */, dtype="bool") /* ty=Tensor[(560), bool] */;
    %710 = cast(%708, dtype="bool") /* ty=Tensor[(4, 12, 1), bool] */;
    %711 = logical_and(%709, %710) /* ty=Tensor[(4, 12, 560), bool] */;
    %712 = @func_3121() /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) */;
    %713 = %712.1;
    %714 = cast(%711, dtype="float64") /* ty=Tensor[(4, 12, 560), float64] */;
    %715 = cast(%713, dtype="float64") /* ty=Tensor[(4, 12, 1), float64] */;
    %716 = left_shift(%701, %702) /* ty=Tensor[(5, 13, 7), uint8] */;
    %717 = @func_4598() /* ty=Tensor[(4, 12, 1), float32] */;
    %718 = @func_4577() /* ty=Tensor[(2, 16, 5), float64] */;
    %719 = divide(%714, %715) /* ty=Tensor[(4, 12, 560), float64] */;
    (%716, %717, %718, %var_4946, %719)
  };
  %720(%var_4990, %var_4991, %var_4992) /* ty=(Tensor[(5, 13, 7), uint8], Tensor[(4, 12, 1), float32], Tensor[(2, 16, 5), float64], Tensor[(900, 1), float64], Tensor[(4, 12, 560), float64]) */
}

def @func_3597(%var_3595: Tensor[(40, 12), float64]) -> (Tensor[(12, 12, 7), bool], Tensor[(15, 4, 8), float64], Tensor[(9, 9), uint64], Tensor[(567), uint64], Tensor[(40, 12), float64], Tensor[(4, 12, 1), float32]) {
  @func_3594(%var_3595) /* ty=(Tensor[(12, 12, 7), bool], Tensor[(15, 4, 8), float64], Tensor[(9, 9), uint64], Tensor[(567), uint64], Tensor[(40, 12), float64], Tensor[(4, 12, 1), float32]) */
}

def @func_2905(%var_2901: Tensor[(12, 6, 4), float32], %var_2902: Tensor[(560), float32], %var_2903: Tensor[(1008), uint8], %var_2904: Tensor[(120, 4), float64]) -> (Tensor[(12, 6, 4), float32], Tensor[(10, 8, 7), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8], Tensor[(7, 9, 9), uint64], Tensor[(1, 81), uint64], Tensor[(9, 63), uint64], Tensor[(120, 4), float64]) {
  @func_2899(%var_2901, %var_2902, %var_2903, %var_2904) /* ty=(Tensor[(12, 6, 4), float32], Tensor[(10, 8, 7), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8], Tensor[(7, 9, 9), uint64], Tensor[(1, 81), uint64], Tensor[(9, 63), uint64], Tensor[(120, 4), float64]) */
}

def @func_1636(%var_1634: Tensor[(12, 12, 7), uint8], %var_1635: Tensor[(12, 12, 7), uint8]) -> (Tensor[(12, 12, 7), bool],) {
  @func_1632(%var_1634, %var_1635) /* ty=(Tensor[(12, 12, 7), bool],) */
}

def @func_6546(%var_6473: Tensor[(10, 8, 7), float32], %var_6521: Tensor[(10, 8, 7), float32]) -> (Tensor[(4, 12, 3), int32], Tensor[(480), float64], Tensor[(480), float64], Tensor[(10, 8, 7), uint32], Tensor[(10, 8, 7), uint16], Tensor[(9, 14, 12), uint32], Tensor[(3, 504), uint32]) {
  %721 = cast(meta[relay.Constant][58] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %722 = reshape(%721, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %723 = @func_198(%722) /* ty=(Tensor[(7, 10, 8), bool], Tensor[(15, 4, 8), int8], Tensor[(480), float64]) */;
  %724 = @func_4885() /* ty=Tensor[(10, 8, 7), float32] */;
  %725 = cast(%var_6473, dtype="bool") /* ty=Tensor[(10, 8, 7), bool] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="bool") /* ty=Tensor[(10, 8, 7), bool] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %729 = logical_and(%727, %728) /* ty=Tensor[(10, 8, 7), bool] */;
  %730 = cast(%729, dtype="uint32") /* ty=Tensor[(10, 8, 7), uint32] */;
  %731 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%724, dtype="uint32") /* ty=Tensor[(10, 8, 7), uint32] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %734 = cast(%var_6521, dtype="uint16") /* ty=Tensor[(10, 8, 7), uint16] */;
  %735 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%724, dtype="uint16") /* ty=Tensor[(10, 8, 7), uint16] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %738 = cast(meta[relay.Constant][59] /* ty=Tensor[(3, 504), uint32] */, dtype="uint32") /* ty=Tensor[(3, 504), uint32] */;
  %739 = reshape(%738, newshape=[9, 14, 12]) /* ty=Tensor[(9, 14, 12), uint32] */;
  %740 = @func_3749() /* ty=Tensor[(4, 12, 3), int32] */;
  %741 = %723.2;
  %742 = bitwise_and(%732, %733) /* ty=Tensor[(10, 8, 7), uint32] */;
  %743 = logical_xor(%736, %737) /* ty=Tensor[(10, 8, 7), uint16] */;
  %744 = @func_2157(%739) /* ty=Tensor[(9, 14, 12), uint32] */;
  (%740, %741, meta[relay.Constant][58] /* ty=Tensor[(480), float64] */, %742, %743, %744, meta[relay.Constant][59] /* ty=Tensor[(3, 504), uint32] */)
}

def @func_8054() -> (Tensor[(10, 8, 7), float32], Tensor[(3, 5, 6), bool], Tensor[(90), float64]) {
  @func_8052() /* ty=(Tensor[(10, 8, 7), float32], Tensor[(3, 5, 6), bool], Tensor[(90), float64]) */
}

def @func_2098(%var_2097: Tensor[(7, 10, 12), float32]) -> (Tensor[(7, 10, 12), float32], Tensor[(7, 10, 12), float32]) {
  %749 = fn (%var_2086: Tensor[(7, 10, 12), float32]) -> (Tensor[(7, 10, 12), float32], Tensor[(7, 10, 12), float32]) {
    %745 = cast(%var_2086, dtype="float32") /* ty=Tensor[(7, 10, 12), float32] */;
    %746 = cast(%var_2086, dtype="float32") /* ty=Tensor[(7, 10, 12), float32] */;
    %747 = acosh(%745) /* ty=Tensor[(7, 10, 12), float32] */;
    %748 = log2(%746) /* ty=Tensor[(7, 10, 12), float32] */;
    (%747, %748)
  };
  %749(%var_2097) /* ty=(Tensor[(7, 10, 12), float32], Tensor[(7, 10, 12), float32]) */
}

def @func_4552() -> (Tensor[(4, 12, 924), bool],) {
  %757 = fn () -> (Tensor[(4, 12, 924), bool],) {
    %750 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
    %751 = %750.0;
    %752 = @func_4517() /* ty=(Tensor[(4, 12, 3), int32], Tensor[(10, 8, 7), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32]) */;
    %753 = %752.3;
    %754 = cast(%751, dtype="bool") /* ty=Tensor[(4, 12, 1), bool] */;
    %755 = cast(%753, dtype="bool") /* ty=Tensor[(924), bool] */;
    %756 = greater(%754, %755) /* ty=Tensor[(4, 12, 924), bool] */;
    (%756,)
  };
  %757() /* ty=(Tensor[(4, 12, 924), bool],) */
}

def @func_4246() -> (Tensor[(2, 16, 5), float64],) {
  %758 = @func_3442() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %759 = %758.0;
  (%759,)
}

def @func_2751(%var_2717: Tensor[(12, 1, 5), float64], %var_2722: Tensor[(560), float32]) -> (Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(12, 1, 5), float64]) {
  %760 = cast(%var_2722, dtype="float32") /* ty=Tensor[(560), float32] */;
  %761 = reshape(%760, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float32] */;
  %762 = cast(%var_2717, dtype="float64") /* ty=Tensor[(12, 1, 5), float64] */;
  %763 = exp(%762) /* ty=Tensor[(12, 1, 5), float64] */;
  %764 = cast(%763, dtype="float64") /* ty=Tensor[(12, 1, 5), float64] */;
  %765 = @func_1963(%761) /* ty=Tensor[(10, 8, 7), float32] */;
  %766 = cosh(%764) /* ty=Tensor[(12, 1, 5), float64] */;
  (%765, %var_2722, %766)
}

def @func_7056() -> (Tensor[(2, 16, 5), float64], Tensor[(4, 12, 924), uint16], Tensor[(7, 10, 12), float32], Tensor[(840), float32]) {
  %767 = @func_3442() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %768 = cast(meta[relay.Constant][60] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %769 = reshape(%768, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), float32] */;
  %770 = @func_2096(%769) /* ty=(Tensor[(7, 10, 12), float32], Tensor[(7, 10, 12), float32]) */;
  %771 = %767.0;
  %772 = @func_5320() /* ty=Tensor[(4, 12, 924), uint16] */;
  %773 = %770.1;
  (%771, %772, %773, meta[relay.Constant][60] /* ty=Tensor[(840), float32] */)
}

def @func_8001(%var_7999: Tensor[(560), float32]) -> (Tensor[(2, 16, 5), float64], Tensor[(10, 8, 7), float32], Tensor[(560), float32]) {
  %774 = @func_7056() /* ty=(Tensor[(2, 16, 5), float64], Tensor[(4, 12, 924), uint16], Tensor[(7, 10, 12), float32], Tensor[(840), float32]) */;
  %775 = cast(%var_7999, dtype="float32") /* ty=Tensor[(560), float32] */;
  %776 = reshape(%775, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float32] */;
  %777 = %774.0;
  %778 = @func_1963(%776) /* ty=Tensor[(10, 8, 7), float32] */;
  (%777, %778, %var_7999)
}

def @func_7870(%var_7847: Tensor[(12, 10, 8), float32]) -> (Tensor[(12, 10, 8), float32],) {
  %779 = cast(%var_7847, dtype="float32") /* ty=Tensor[(12, 10, 8), float32] */;
  %780 = atanh(%779) /* ty=Tensor[(12, 10, 8), float32] */;
  (%780,)
}

def @func_3665(%var_3646: Tensor[(1, 15, 14), float64]) -> (Tensor[(1, 15, 14), float64], Tensor[(4, 12, 1), float32]) {
  %781 = cast(%var_3646, dtype="float64") /* ty=Tensor[(1, 15, 14), float64] */;
  %782 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %783 = log(%781) /* ty=Tensor[(1, 15, 14), float64] */;
  %784 = %782.0;
  (%783, %784)
}

def @func_7295(%var_7293: Tensor[(4, 4), float32]) -> (Tensor[(10, 8, 7), float32], Tensor[(924), float32], Tensor[(4, 4), float32], Tensor[(14), float32], Tensor[(60), int32], Tensor[(14), float32]) {
  @func_7292(%var_7293) /* ty=(Tensor[(10, 8, 7), float32], Tensor[(924), float32], Tensor[(4, 4), float32], Tensor[(14), float32], Tensor[(60), int32], Tensor[(14), float32]) */
}

def @func_2157(%var_2150: Tensor[(9, 14, 12), uint32]) -> Tensor[(9, 14, 12), uint32] {
  %785 = cast(%var_2150, dtype="uint32") /* ty=Tensor[(9, 14, 12), uint32] */;
  %786 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(9, 14, 12), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(meta[relay.Constant][61] /* ty=Tensor[(9, 14, 12), uint32] */, dtype="uint32") /* ty=Tensor[(9, 14, 12), uint32] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%787, %788) /* ty=Tensor[(9, 14, 12), uint32] */
}

def @func_5163(%var_5162: Tensor[(14), float32]) -> (Tensor[(4, 12, 3), float64], Tensor[(10, 13, 5), int32], Tensor[(210), float64], Tensor[(650, 1), int32], Tensor[(7, 1, 2), float32], Tensor[(14), float32]) {
  %801 = fn (%var_5159: Tensor[(14), float32]) -> (Tensor[(4, 12, 3), float64], Tensor[(10, 13, 5), int32], Tensor[(210), float64], Tensor[(650, 1), int32], Tensor[(7, 1, 2), float32], Tensor[(14), float32]) {
    %789 = @func_3749() /* ty=Tensor[(4, 12, 3), int32] */;
    %790 = cast(%789, dtype="float64") /* ty=Tensor[(4, 12, 3), float64] */;
    %791 = cast(meta[relay.Constant][62] /* ty=Tensor[(210), float64] */, dtype="float64") /* ty=Tensor[(210), float64] */;
    %792 = cast(meta[relay.Constant][63] /* ty=Tensor[(650, 1), int32] */, dtype="int32") /* ty=Tensor[(650, 1), int32] */;
    %793 = reshape(%791, newshape=[210]) /* ty=Tensor[(210), float64] */;
    %794 = reshape(%792, newshape=[650]) /* ty=Tensor[(650), int32] */;
    %795 = @func_4153(%793, %794) /* ty=(Tensor[(12, 12, 7), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64], Tensor[(10, 13, 5), int32], Tensor[(650), int32]) */;
    %796 = cast(%var_5159, dtype="float32") /* ty=Tensor[(14), float32] */;
    %797 = reshape(%796, newshape=[7, 1, 2]) /* ty=Tensor[(7, 1, 2), float32] */;
    %798 = sinh(%790) /* ty=Tensor[(4, 12, 3), float64] */;
    %799 = %795.3;
    %800 = @func_590(%797) /* ty=Tensor[(7, 1, 2), float32] */;
    (%798, %799, meta[relay.Constant][62] /* ty=Tensor[(210), float64] */, meta[relay.Constant][63] /* ty=Tensor[(650, 1), int32] */, %800, %var_5159)
  };
  %801(%var_5162) /* ty=(Tensor[(4, 12, 3), float64], Tensor[(10, 13, 5), int32], Tensor[(210), float64], Tensor[(650, 1), int32], Tensor[(7, 1, 2), float32], Tensor[(14), float32]) */
}

def @func_4886() -> Tensor[(10, 8, 7), float32] {
  %803 = fn () -> Tensor[(10, 8, 7), float32] {
    %802 = @func_3554() /* ty=(Tensor[(10, 8, 7), float32], Tensor[(4, 12, 560), float64]) */;
    %802.0
  };
  %803() /* ty=Tensor[(10, 8, 7), float32] */
}

def @func_7737(%var_7735: Tensor[(480), float64]) -> (Tensor[(12, 6, 4), float32], Tensor[(288), float32], Tensor[(560), float32], Tensor[(480), float64], Tensor[(4, 12, 1008), int16], Tensor[(2, 16, 5), float64], Tensor[(480), float64]) {
  @func_7734(%var_7735) /* ty=(Tensor[(12, 6, 4), float32], Tensor[(288), float32], Tensor[(560), float32], Tensor[(480), float64], Tensor[(4, 12, 1008), int16], Tensor[(2, 16, 5), float64], Tensor[(480), float64]) */
}

def @func_2978(%var_2976: Tensor[(3, 9, 3), int64], %var_2977: Tensor[(840), float32]) -> (Tensor[(7, 10, 12), float32], Tensor[(840), float32], Tensor[(3, 9, 3), uint8]) {
  %818 = fn (%var_2958: Tensor[(3, 9, 3), int64], %var_2965: Tensor[(840), float32]) -> (Tensor[(7, 10, 12), float32], Tensor[(840), float32], Tensor[(3, 9, 3), uint8]) {
    %804 = cast(%var_2965, dtype="float32") /* ty=Tensor[(840), float32] */;
    %805 = reshape(%804, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), float32] */;
    %806 = @func_2096(%805) /* ty=(Tensor[(7, 10, 12), float32], Tensor[(7, 10, 12), float32]) */;
    %807 = cast(meta[relay.Constant][64] /* ty=Tensor[(3, 9, 3), int64] */, dtype="int64") /* ty=Tensor[(3, 9, 3), int64] */;
    %808 = shape_of(%var_2958, dtype="int32") /* ty=Tensor[(3), int32] */;
    %809 = cast(%var_2958, dtype="int64") /* ty=Tensor[(3, 9, 3), int64] */;
    %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %811 = right_shift(%809, %810) /* ty=Tensor[(3, 9, 3), int64] */;
    %812 = cast(%var_2958, dtype="uint8") /* ty=Tensor[(3, 9, 3), uint8] */;
    %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(3), int32] */;
    %814 = cast(%811, dtype="uint8") /* ty=Tensor[(3, 9, 3), uint8] */;
    %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %816 = %806.1;
    %817 = bitwise_xor(%814, %815) /* ty=Tensor[(3, 9, 3), uint8] */;
    (%816, %var_2965, %817)
  };
  %818(%var_2976, %var_2977) /* ty=(Tensor[(7, 10, 12), float32], Tensor[(840), float32], Tensor[(3, 9, 3), uint8]) */
}

def @func_7693(%var_7677: Tensor[(4, 12, 560), float64]) -> Tensor[(4, 12, 560), int8] {
  %819 = @func_5735() /* ty=(Tensor[(4, 12, 560), float64],) */;
  %820 = %819.0;
  %821 = cast(%var_7677, dtype="int8") /* ty=Tensor[(4, 12, 560), int8] */;
  %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%820, dtype="int8") /* ty=Tensor[(4, 12, 560), int8] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  logical_xor(%823, %824) /* ty=Tensor[(4, 12, 560), int8] */
}

def @func_5362() -> (Tensor[(4, 12, 1), float32],) {
  @func_5360() /* ty=(Tensor[(4, 12, 1), float32],) */
}

def @func_3442() -> (Tensor[(2, 16, 5), float64],) {
  %825 = @func_3355() /* ty=(Tensor[(2, 16, 5), float64],) */;
  %826 = %825.0;
  (%826,)
}

def @func_7495(%var_7493: Tensor[(7, 8, 6), float32]) -> (Tensor[(7, 8, 6), float32],) {
  @func_7492(%var_7493) /* ty=(Tensor[(7, 8, 6), float32],) */
}

def @func_4057(%var_4053: Tensor[(1, 15, 16), float64], %var_4054: Tensor[(5, 15, 16), float64], %var_4055: Tensor[(81), uint64], %var_4056: Tensor[(40, 12), float64]) -> (Tensor[(5, 15, 16), uint32], Tensor[(5, 15, 16), float32], Tensor[(81), uint64], Tensor[(567), uint64], Tensor[(15, 4, 8), int8]) {
  %847 = fn (%var_4022: Tensor[(1, 15, 16), float64], %var_4032: Tensor[(5, 15, 16), float64], %var_4041: Tensor[(81), uint64], %var_4043: Tensor[(40, 12), float64]) -> (Tensor[(5, 15, 16), uint32], Tensor[(5, 15, 16), float32], Tensor[(81), uint64], Tensor[(567), uint64], Tensor[(15, 4, 8), int8]) {
    %827 = cast(%var_4022, dtype="float64") /* ty=Tensor[(1, 15, 16), float64] */;
    %828 = log(%827) /* ty=Tensor[(1, 15, 16), float64] */;
    %829 = cast(%828, dtype="uint32") /* ty=Tensor[(1, 15, 16), uint32] */;
    %830 = cast(%var_4032, dtype="uint32") /* ty=Tensor[(5, 15, 16), uint32] */;
    %831 = cast(%var_4032, dtype="float32") /* ty=Tensor[(5, 15, 16), float32] */;
    %832 = cast(%var_4041, dtype="uint64") /* ty=Tensor[(81), uint64] */;
    %833 = cast(meta[relay.Constant][65] /* ty=Tensor[(567), uint64] */, dtype="uint64") /* ty=Tensor[(567), uint64] */;
    %834 = cast(%var_4043, dtype="float64") /* ty=Tensor[(40, 12), float64] */;
    %835 = reshape(%832, newshape=[1, 9, 9]) /* ty=Tensor[(1, 9, 9), uint64] */;
    %836 = reshape(%833, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), uint64] */;
    %837 = reshape(%834, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %838 = @func_403(%835, %836, %837) /* ty=(Tensor[(7, 9, 9), uint64], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int8], Tensor[(15, 4, 8), int32], Tensor[(15, 4, 8), float64], Tensor[(7, 10, 8), bool]) */;
    %839 = %838.4;
    %840 = cast(%var_4043, dtype="int8") /* ty=Tensor[(40, 12), int8] */;
    %841 = shape_of(%839, dtype="int32") /* ty=Tensor[(3), int32] */;
    %842 = cast(%839, dtype="int8") /* ty=Tensor[(15, 4, 8), int8] */;
    %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %844 = right_shift(%829, %830) /* ty=Tensor[(5, 15, 16), uint32] */;
    %845 = sin(%831) /* ty=Tensor[(5, 15, 16), float32] */;
    %846 = bitwise_xor(%842, %843) /* ty=Tensor[(15, 4, 8), int8] */;
    (%844, %845, %var_4041, meta[relay.Constant][65] /* ty=Tensor[(567), uint64] */, %846)
  };
  %847(%var_4053, %var_4054, %var_4055, %var_4056) /* ty=(Tensor[(5, 15, 16), uint32], Tensor[(5, 15, 16), float32], Tensor[(81), uint64], Tensor[(567), uint64], Tensor[(15, 4, 8), int8]) */
}

def @func_4747() -> (Tensor[(4, 12, 1), float32],) {
  @func_4745() /* ty=(Tensor[(4, 12, 1), float32],) */
}

def @func_3444() -> (Tensor[(2, 16, 5), float64],) {
  @func_3442() /* ty=(Tensor[(2, 16, 5), float64],) */
}

def @func_3486(%var_3485: Tensor[(560), float32]) -> (Tensor[(924), float32], Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(560), float32], Tensor[(60), float64], Tensor[(2, 16, 5), float64]) {
  %861 = fn (%var_3464: Tensor[(560), float32]) -> (Tensor[(924), float32], Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(560), float32], Tensor[(60), float64], Tensor[(2, 16, 5), float64]) {
    %848 = @func_3121() /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) */;
    %849 = cast(%var_3464, dtype="float32") /* ty=Tensor[(560), float32] */;
    %850 = reshape(%849, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float32] */;
    %851 = cast(meta[relay.Constant][66] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
    %852 = cast(%var_3464, dtype="float32") /* ty=Tensor[(560), float32] */;
    %853 = reshape(%851, newshape=[12, 1, 5]) /* ty=Tensor[(12, 1, 5), float64] */;
    %854 = reshape(%852, newshape=[560]) /* ty=Tensor[(560), float32] */;
    %855 = @func_2751(%853, %854) /* ty=(Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(12, 1, 5), float64]) */;
    %856 = @func_3355() /* ty=(Tensor[(2, 16, 5), float64],) */;
    %857 = %848.3;
    %858 = @func_1963(%850) /* ty=Tensor[(10, 8, 7), float32] */;
    %859 = %855.1;
    %860 = %856.0;
    (%857, %858, %var_3464, %859, meta[relay.Constant][66] /* ty=Tensor[(60), float64] */, %860)
  };
  %861(%var_3485) /* ty=(Tensor[(924), float32], Tensor[(10, 8, 7), float32], Tensor[(560), float32], Tensor[(560), float32], Tensor[(60), float64], Tensor[(2, 16, 5), float64]) */
}

def @func_3123() -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) {
  @func_3121() /* ty=(Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32], Tensor[(12, 11, 7), float32], Tensor[(924), float32], Tensor[(12, 12, 7), bool], Tensor[(1008), uint8]) */
}

def @func_3555() -> (Tensor[(10, 8, 7), float32], Tensor[(4, 12, 560), float64]) {
  %870 = fn () -> (Tensor[(10, 8, 7), float32], Tensor[(4, 12, 560), float64]) {
    %862 = cast(meta[relay.Constant][67] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
    %863 = reshape(%862, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float32] */;
    %864 = @func_3259() /* ty=(Tensor[(4, 12, 1), float32],) */;
    %865 = %864.0;
    %866 = cast(meta[relay.Constant][67] /* ty=Tensor[(560), float32] */, dtype="float64") /* ty=Tensor[(560), float64] */;
    %867 = cast(%865, dtype="float64") /* ty=Tensor[(4, 12, 1), float64] */;
    %868 = @func_1963(%863) /* ty=Tensor[(10, 8, 7), float32] */;
    %869 = add(%866, %867) /* ty=Tensor[(4, 12, 560), float64] */;
    (%868, %869)
  };
  %870() /* ty=(Tensor[(10, 8, 7), float32], Tensor[(4, 12, 560), float64]) */
}

def @func_2160(%var_2158: Tensor[(9, 14, 12), uint32]) -> Tensor[(9, 14, 12), uint32] {
  @func_2157(%var_2158) /* ty=Tensor[(9, 14, 12), uint32] */
}

def @func_4841() -> (Tensor[(4, 12, 1), float32], Tensor[(4, 12, 1), float32]) {
  %871 = @func_3223() /* ty=(Tensor[(4, 12, 1), float32],) */;
  %872 = %871.0;
  %873 = @func_4598() /* ty=Tensor[(4, 12, 1), float32] */;
  (%872, %873)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen309/build/output.py", line 2144, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:05:53] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

