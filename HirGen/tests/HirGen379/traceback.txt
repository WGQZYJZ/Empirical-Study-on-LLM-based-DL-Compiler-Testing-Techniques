==========mod==========
#[version = "0.0.5"]
def @func_6926() -> (Tensor[(8, 14, 10), int8],) {
  %0 = @func_4460() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */;
  %1 = %0.7;
  (%1,)
}

def @func_6742(%var_6681: Tensor[(2, 8, 12), uint64]) -> (Tensor[(2, 8, 12), bool], Tensor[(6, 13, 4), float32]) {
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 8, 12), uint64] */, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %3 = shape_of(%var_6681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%var_6681, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %6 = @func_5309() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32]) */;
  %7 = less_equal(%4, %5) /* ty=Tensor[(2, 8, 12), bool] */;
  %8 = %6.1;
  (%7, %8)
}

def @func_10568() -> (Tensor[(6, 13, 4), float64],) {
  %9 = @func_3359() /* ty=Tensor[(6, 13, 4), float64] */;
  (%9,)
}

def @func_9933() -> (Tensor[(8, 14, 10), int8],) {
  %10 = @func_4598() /* ty=Tensor[(8, 14, 10), int8] */;
  (%10,)
}

def @func_3907() -> (Tensor[(6, 13, 4), float64],) {
  %11 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %12 = %11.0;
  (%12,)
}

def @func_4822() -> (Tensor[(4, 11, 16), int32],) {
  %13 = @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */;
  %14 = %13.5;
  (%14,)
}

def @func_2587() -> (Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) {
  %15 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %16 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %17 = %16.1;
  %18 = %15.2;
  %19 = cast(%18, dtype="int8") /* ty=Tensor[(112), int8] */;
  %20 = cast(%17, dtype="int8") /* ty=Tensor[(8, 14, 10), int8] */;
  %21 = reshape(%19, newshape=[112]) /* ty=Tensor[(112), int8] */;
  %22 = reshape(%20, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %23 = @func_2080(%21, %22) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8], Tensor[(6, 13, 4), float64]) */;
  %24 = %23.1;
  %25 = cast(%24, dtype="int64") /* ty=Tensor[(8, 14, 10), int64] */;
  %26 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%17, dtype="int64") /* ty=Tensor[(8, 14, 10), int64] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %29 = @func_2361() /* ty=Tensor[(8, 14, 10), int8] */;
  %30 = left_shift(%27, %28) /* ty=Tensor[(8, 14, 10), int64] */;
  %31 = @func_2281() /* ty=Tensor[(8, 14, 10), int8] */;
  (%18, %29, %30, %31)
}

def @func_2403() -> (Tensor[(8, 14, 10), int8],) {
  %32 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %33 = %32.1;
  (%33,)
}

def @func_2510(%var_2477: Tensor[(312), float32]) -> (Tensor[(4, 11, 16), int32], Tensor[(312), float32], Tensor[(6, 13, 4), float32]) {
  %34 = @func_2297() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) */;
  %35 = %34.2;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(312), float32] */;
  %37 = reshape(%36, newshape=[312, 1]) /* ty=Tensor[(312, 1), float32] */;
  %38 = @func_1588(%37) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(312, 1), float32]) */;
  %39 = cast(%var_2477, dtype="float32") /* ty=Tensor[(312), float32] */;
  %40 = shape_of(%35, dtype="int32") /* ty=Tensor[(1), int32] */;
  %41 = cast(%35, dtype="float32") /* ty=Tensor[(312), float32] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?), float32] */;
  %43 = mod(%41, %42) /* ty=Tensor[(312), float32] */;
  %44 = cast(%43, dtype="float32") /* ty=Tensor[(312), float32] */;
  %45 = reshape(%44, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), float32] */;
  %46 = @func_1258(%45) /* ty=(Tensor[(6, 13, 4), float32],) */;
  %47 = %38.1;
  %48 = %46.0;
  (%47, %43, %48)
}

def @func_8049(%var_8046: Tensor[(12, 1, 13), float64]) -> (Tensor[(12, 1, 13), float64],) {
  %49 = cast(%var_8046, dtype="float64") /* ty=Tensor[(12, 1, 13), float64] */;
  %50 = sigmoid(%49) /* ty=Tensor[(12, 1, 13), float64] */;
  (%50,)
}

def @func_3359() -> Tensor[(6, 13, 4), float64] {
  %51 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %51.0
}

def @func_6541() -> Tensor[(112), int8] {
  %52 = @func_5732() /* ty=(Tensor[(112), int8],) */;
  %52.0
}

def @func_5013() -> Tensor[(8, 14, 10), float64] {
  %53 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %54 = %53.1;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(8, 14, 10), float64] */;
  erf(%55) /* ty=Tensor[(8, 14, 10), float64] */
}

def @func_9627() -> (Tensor[(6, 13, 4), float32],) {
  %56 = @func_5559() /* ty=(Tensor[(6, 13, 4), float32],) */;
  %57 = %56.0;
  (%57,)
}

def @func_1912() -> (Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) {
  %58 = @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %59 = %58.0;
  %60 = cast(%59, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %61 = reshape(%60, newshape=[312, 1]) /* ty=Tensor[(312, 1), float32] */;
  %62 = @func_1588(%61) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(312, 1), float32]) */;
  %63 = @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %64 = %62.1;
  %65 = %63.0;
  (%59, %64, %65)
}

def @func_1964(%var_1955: Tensor[(363), uint32]) -> (Tensor[(6, 13, 4), float64], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) {
  %66 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %67 = cast(%var_1955, dtype="uint32") /* ty=Tensor[(363), uint32] */;
  %68 = reshape(%67, newshape=[11, 3, 11]) /* ty=Tensor[(11, 3, 11), uint32] */;
  %69 = @func_1824(%68) /* ty=(Tensor[(11, 3, 11), uint32],) */;
  %70 = %66.0;
  %71 = %69.0;
  (%70, %71, %var_1955)
}

def @func_10747() -> (Tensor[(1350), int8], Tensor[(8, 14, 10), float32]) {
  %72 = @func_10241() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(10, 15, 9), int8], Tensor[(1350), int8]) */;
  %73 = @func_6595() /* ty=(Tensor[(8, 14, 10), float32],) */;
  %74 = %72.3;
  %75 = %73.0;
  (%74, %75)
}

def @func_6670() -> Tensor[(6, 13, 4), float64] {
  @func_3418() /* ty=Tensor[(6, 13, 4), float64] */
}

def @func_2297() -> (Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) {
  %76 = cast(meta[relay.Constant][1] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %77 = reshape(%76, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
  %78 = @func_1535(%77) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */;
  %79 = @func_2281() /* ty=Tensor[(8, 14, 10), int8] */;
  %80 = %78.2;
  (%79, %80, meta[relay.Constant][1] /* ty=Tensor[(312), float32] */)
}

def @func_7024(%var_7002: Tensor[(7, 7, 1), int64], %var_7003: Tensor[(7, 7, 8), int64]) -> (Tensor[(7, 7, 8), int64], Tensor[(16, 14, 5), float32], Tensor[(1120), float32], Tensor[(7, 7, 8), int32]) {
  %81 = cast(%var_7002, dtype="int64") /* ty=Tensor[(7, 7, 1), int64] */;
  %82 = cast(%var_7003, dtype="int64") /* ty=Tensor[(7, 7, 8), int64] */;
  %83 = cast(meta[relay.Constant][2] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %84 = cast(meta[relay.Constant][2] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %85 = reshape(%83, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %86 = reshape(%84, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %87 = cast(%var_7003, dtype="int32") /* ty=Tensor[(7, 7, 8), int32] */;
  %88 = cast(%var_7002, dtype="int32") /* ty=Tensor[(7, 7, 1), int32] */;
  %89 = logical_xor(%81, %82) /* ty=Tensor[(7, 7, 8), int64] */;
  %90 = @func_2804(%85, %86) /* ty=Tensor[(16, 14, 5), float32] */;
  %91 = left_shift(%87, %88) /* ty=Tensor[(7, 7, 8), int32] */;
  (%89, %90, meta[relay.Constant][2] /* ty=Tensor[(1120), float32] */, %91)
}

def @func_2714() -> Tensor[(8, 14, 10), int8] {
  @func_2361() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_3143(%var_3075: Tensor[(15, 4, 5), float32], %var_3126: Tensor[(6, 52), float32], %var_3130: Tensor[(8, 14, 10), int8]) -> (Tensor[(15, 4, 5), uint16], Tensor[(4, 11, 16), int32], Tensor[(6, 52), float32], Tensor[(8, 14, 10), bool], Tensor[(8, 14, 10), int8]) {
  %92 = cast(%var_3075, dtype="float32") /* ty=Tensor[(15, 4, 5), float32] */;
  %93 = exp(%92) /* ty=Tensor[(15, 4, 5), float32] */;
  %94 = cast(%93, dtype="float32") /* ty=Tensor[(15, 4, 5), float32] */;
  %95 = shape_of(%var_3075, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%var_3075, dtype="float32") /* ty=Tensor[(15, 4, 5), float32] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %98 = minimum(%96, %97) /* ty=Tensor[(15, 4, 5), float32] */;
  %99 = cast(%98, dtype="float32") /* ty=Tensor[(15, 4, 5), float32] */;
  %100 = asinh(%99) /* ty=Tensor[(15, 4, 5), float32] */;
  %101 = cast(%93, dtype="uint16") /* ty=Tensor[(15, 4, 5), uint16] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %103 = cast(%100, dtype="uint16") /* ty=Tensor[(15, 4, 5), uint16] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %105 = cast(%var_3126, dtype="float32") /* ty=Tensor[(6, 52), float32] */;
  %106 = reshape(%105, newshape=[312, 1]) /* ty=Tensor[(312, 1), float32] */;
  %107 = @func_1588(%106) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(312, 1), float32]) */;
  %108 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %109 = %108.1;
  %110 = cast(%var_3130, dtype="bool") /* ty=Tensor[(8, 14, 10), bool] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="bool") /* ty=Tensor[(8, 14, 10), bool] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %114 = @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */;
  %115 = bitwise_and(%103, %104) /* ty=Tensor[(15, 4, 5), uint16] */;
  %116 = %107.1;
  %117 = less_equal(%112, %113) /* ty=Tensor[(8, 14, 10), bool] */;
  %118 = %114.0;
  (%115, %116, %var_3126, %117, %118)
}

def @func_1803() -> (Tensor[(6, 13, 4), float64],) {
  %119 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %120 = %119.0;
  (%120,)
}

def @func_4869() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(6, 13, 4), float64]) {
  %121 = cast(meta[relay.Constant][3] /* ty=Tensor[(112), int8] */, dtype="int8") /* ty=Tensor[(112), int8] */;
  %122 = @func_2281() /* ty=Tensor[(8, 14, 10), int8] */;
  %123 = cast(%122, dtype="int8") /* ty=Tensor[(8, 14, 10), int8] */;
  %124 = reshape(%121, newshape=[8, 14, 1]) /* ty=Tensor[(8, 14, 1), int8] */;
  %125 = reshape(%123, newshape=[8, 14, 10]) /* ty=Tensor[(8, 14, 10), int8] */;
  %126 = @func_4064() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %127 = @func_307(%124, %125) /* ty=Tensor[(8, 14, 10), int8] */;
  %128 = %126.0;
  (%122, %127, meta[relay.Constant][3] /* ty=Tensor[(112), int8] */, %128)
}

def @func_3536(%var_3503: Tensor[(5, 13, 12), float64]) -> (Tensor[(5, 13, 12), bool], Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(5, 13, 12), float64], Tensor[(312, 1), float32]) {
  %129 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 13, 12), float64] */, dtype="bool") /* ty=Tensor[(5, 13, 12), bool] */;
  %130 = shape_of(%var_3503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%var_3503, dtype="bool") /* ty=Tensor[(5, 13, 12), bool] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %133 = @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %134 = cast(%var_3503, dtype="float64") /* ty=Tensor[(5, 13, 12), float64] */;
  %135 = %133.0;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %137 = reshape(%136, newshape=[312, 1]) /* ty=Tensor[(312, 1), float32] */;
  %138 = @func_1588(%137) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(312, 1), float32]) */;
  %139 = greater_equal(%131, %132) /* ty=Tensor[(5, 13, 12), bool] */;
  %140 = @func_3418() /* ty=Tensor[(6, 13, 4), float64] */;
  %141 = acosh(%134) /* ty=Tensor[(5, 13, 12), float64] */;
  %142 = %138.2;
  (%139, %135, %140, %141, %142)
}

def @func_3841() -> (Tensor[(112), int8], Tensor[(8, 14, 10), float64]) {
  %143 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %144 = @func_3047() /* ty=(Tensor[(8, 14, 10), int8],) */;
  %145 = %144.0;
  %146 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 14, 10), int8] */, dtype="float64") /* ty=Tensor[(8, 14, 10), float64] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%145, dtype="float64") /* ty=Tensor[(8, 14, 10), float64] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %150 = %143.2;
  %151 = minimum(%148, %149) /* ty=Tensor[(8, 14, 10), float64] */;
  (%150, %151)
}

def @func_9175() -> Tensor[(8, 14, 10), int8] {
  %152 = @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */;
  %152.0
}

def @func_8955(%var_8931: Tensor[(10, 15, 9), int8]) -> Tensor[(10, 15, 9), int8] {
  %153 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 15, 9), int8] */, dtype="int8") /* ty=Tensor[(10, 15, 9), int8] */;
  %154 = shape_of(%var_8931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%var_8931, dtype="int8") /* ty=Tensor[(10, 15, 9), int8] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%155, %156) /* ty=Tensor[(10, 15, 9), int8] */
}

def @func_8328() -> (Tensor[(6, 52), float32],) {
  %157 = @func_3492() /* ty=(Tensor[(312), float32], Tensor[(6, 52), float32], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), uint16]) */;
  %158 = %157.1;
  (%158,)
}

def @func_10834() -> (Tensor[(8, 14, 10), int8], Tensor[(112), int8]) {
  %159 = @func_2714() /* ty=Tensor[(8, 14, 10), int8] */;
  %160 = @func_6541() /* ty=Tensor[(112), int8] */;
  (%159, %160)
}

def @func_10618() -> (Tensor[(1, 6, 15), float64],) {
  %161 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 6, 15), float64] */, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
  %162 = atanh(%161) /* ty=Tensor[(1, 6, 15), float64] */;
  (%162,)
}

def @func_4558() -> (Tensor[(4, 11, 16), int32],) {
  %163 = @func_4316() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %164 = %163.0;
  (%164,)
}

def @func_5710(%var_5702: float64, %var_5703: Tensor[(1, 11, 8), float64]) -> (Tensor[(1, 11, 8), float64], Tensor[(4, 11, 16), int32]) {
  %165 = cast(%var_5702, dtype="float64") /* ty=float64 */;
  %166 = cast(%var_5703, dtype="float64") /* ty=Tensor[(1, 11, 8), float64] */;
  %167 = @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */;
  %168 = floor_mod(%165, %166) /* ty=Tensor[(1, 11, 8), float64] */;
  %169 = %167.4;
  (%168, %169)
}

def @func_2804(%var_2799: Tensor[(16, 14, 5), float32], %var_2800: Tensor[(16, 14, 5), float32]) -> Tensor[(16, 14, 5), float32] {
  %170 = cast(%var_2800, dtype="float32") /* ty=Tensor[(16, 14, 5), float32] */;
  %171 = shape_of(%var_2799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%var_2799, dtype="float32") /* ty=Tensor[(16, 14, 5), float32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%172, %173) /* ty=Tensor[(16, 14, 5), float32] */
}

def @func_5648() -> (Tensor[(8, 14, 10), float64], Tensor[(8, 14, 10), float32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) {
  %174 = @func_4460() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */;
  %175 = %174.7;
  %176 = cast(%175, dtype="float32") /* ty=Tensor[(8, 14, 10), float32] */;
  %177 = @func_4460() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */;
  %178 = @func_5013() /* ty=Tensor[(8, 14, 10), float64] */;
  %179 = rsqrt(%176) /* ty=Tensor[(8, 14, 10), float32] */;
  %180 = @func_4598() /* ty=Tensor[(8, 14, 10), int8] */;
  %181 = %177.7;
  (%178, %179, %180, %181)
}

def @func_1488() -> (Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) {
  %182 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 11, 16), int32] */, dtype="int32") /* ty=Tensor[(4, 11, 16), int32] */;
  %183 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(4, 11, 16), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 11, 16), int32] */, dtype="int32") /* ty=Tensor[(4, 11, 16), int32] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %187 = reshape(%186, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), float32] */;
  %188 = @func_1258(%187) /* ty=(Tensor[(6, 13, 4), float32],) */;
  %189 = %188.0;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %191 = reshape(%190, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), float32] */;
  %192 = @func_1258(%191) /* ty=(Tensor[(6, 13, 4), float32],) */;
  %193 = cast(%189, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %194 = reshape(%193, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), float32] */;
  %195 = @func_1258(%194) /* ty=(Tensor[(6, 13, 4), float32],) */;
  %196 = multiply(%184, %185) /* ty=Tensor[(4, 11, 16), int32] */;
  %197 = %192.0;
  %198 = %195.0;
  (%196, %189, meta[relay.Constant][10] /* ty=Tensor[(312), float32] */, %197, %198)
}

def @func_2032(%var_2027: Tensor[(6, 13, 4), float32]) -> (Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), bool]) {
  %199 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %200 = %199.0;
  %201 = cast(%200, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %202 = reshape(%201, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
  %203 = @func_1535(%202) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */;
  %204 = %203.1;
  %205 = cast(%var_2027, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %209 = logical_and(%207, %208) /* ty=Tensor[(6, 13, 4), bool] */;
  (%200, %209)
}

def @func_4081(%var_4075: Tensor[(6, 12, 5), float32]) -> Tensor[(6, 12, 5), float32] {
  %210 = cast(%var_4075, dtype="float32") /* ty=Tensor[(6, 12, 5), float32] */;
  exp(%210) /* ty=Tensor[(6, 12, 5), float32] */
}

def @func_5219() -> (Tensor[(8, 14, 10), int8], Tensor[(1120), int8], Tensor[(6, 52), float32]) {
  %211 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %212 = @func_5124() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 52), float32]) */;
  %213 = @func_3692() /* ty=Tensor[(8, 14, 10), int8] */;
  %214 = %211.3;
  %215 = %212.1;
  (%213, %214, %215)
}

def @func_8360(%var_8339: float64, %var_8340: Tensor[(2, 15, 14), float64]) -> Tensor[(2, 15, 14), float64] {
  %216 = cast(%var_8339, dtype="float64") /* ty=float64 */;
  %217 = cast(%var_8340, dtype="float64") /* ty=Tensor[(2, 15, 14), float64] */;
  mod(%216, %217) /* ty=Tensor[(2, 15, 14), float64] */
}

def @func_9759() -> Tensor[(8, 14, 10), int8] {
  @func_9265() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_9924() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  %218 = @func_2587() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) */;
  %219 = @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %220 = %218.1;
  %221 = %219.0;
  (%220, %221)
}

def @func_10123(%var_10109: bool, %var_10110: Tensor[(56, 8), bool]) -> (Tensor[(6, 13, 4), float64], Tensor[(363), uint32], bool, Tensor[(56, 8), bool], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8]) {
  %222 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %223 = cast(%var_10109, dtype="bool") /* ty=bool */;
  %224 = cast(%var_10110, dtype="bool") /* ty=Tensor[(56, 8), bool] */;
  %225 = reshape(%223, newshape=[]) /* ty=bool */;
  %226 = reshape(%224, newshape=[448]) /* ty=Tensor[(448), bool] */;
  %227 = @func_6514(%225, %226) /* ty=(Tensor[(16, 14, 5), float32], Tensor[(1120, 1), float32], Tensor[(363), uint32], Tensor[(8, 14, 10), int8], Tensor[(14, 4, 8), bool], bool, Tensor[(448), bool], Tensor[(6, 13, 4), float32]) */;
  %228 = @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %229 = %222.0;
  %230 = %227.2;
  %231 = %228.1;
  %232 = @func_2361() /* ty=Tensor[(8, 14, 10), int8] */;
  (%229, %230, %var_10109, %var_10110, %231, %232)
}

def @func_4927(%var_4903: uint8, %var_4904: Tensor[(12, 3, 12), uint8], %var_4914: Tensor[(1092), float64]) -> (Tensor[(12, 3, 12), bool], Tensor[(12, 7, 13), float64], Tensor[(1092), float64]) {
  %233 = cast(%var_4903, dtype="bool") /* ty=bool */;
  %234 = cast(%var_4904, dtype="bool") /* ty=Tensor[(12, 3, 12), bool] */;
  %235 = cast(%var_4914, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %236 = reshape(%235, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
  %237 = greater(%233, %234) /* ty=Tensor[(12, 3, 12), bool] */;
  %238 = @func_4031(%236) /* ty=Tensor[(12, 7, 13), float64] */;
  (%237, %238, %var_4914)
}

def @func_7640() -> Tensor[(6, 13, 4), float64] {
  %239 = @func_3907() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %239.0
}

def @func_7323(%var_7316: uint8, %var_7317: Tensor[(432), uint8], %var_7318: Tensor[(1092), float64]) -> (Tensor[(4, 11, 16), int32], Tensor[(1092), float64], uint8, Tensor[(432), uint8], Tensor[(1092), float64]) {
  %240 = @func_4822() /* ty=(Tensor[(4, 11, 16), int32],) */;
  %241 = cast(%var_7316, dtype="uint8") /* ty=uint8 */;
  %242 = cast(%var_7317, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %243 = cast(%var_7318, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %244 = reshape(%241, newshape=[]) /* ty=uint8 */;
  %245 = reshape(%242, newshape=[12, 3, 12]) /* ty=Tensor[(12, 3, 12), uint8] */;
  %246 = reshape(%243, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %247 = @func_4927(%244, %245, %246) /* ty=(Tensor[(12, 3, 12), bool], Tensor[(12, 7, 13), float64], Tensor[(1092), float64]) */;
  %248 = %240.0;
  %249 = %247.2;
  (%248, %249, %var_7316, %var_7317, %var_7318)
}

def @func_3571() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) {
  %250 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %251 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %252 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %253 = @func_3418() /* ty=Tensor[(6, 13, 4), float64] */;
  %254 = %250.0;
  %255 = %251.1;
  %256 = %252.0;
  (%253, %254, %255, %256)
}

def @func_4966() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  %257 = @func_3870() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %258 = @func_2361() /* ty=Tensor[(8, 14, 10), int8] */;
  %259 = %257.0;
  (%258, %259)
}

def @func_9335() -> Tensor[(112), int8] {
  %260 = @func_5732() /* ty=(Tensor[(112), int8],) */;
  %260.0
}

def @func_3492() -> (Tensor[(312), float32], Tensor[(6, 52), float32], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), uint16]) {
  %261 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 52), float32] */, dtype="float32") /* ty=Tensor[(6, 52), float32] */;
  %262 = reshape(%261, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %263 = @func_2510(%262) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(312), float32], Tensor[(6, 13, 4), float32]) */;
  %264 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 52), float32] */, dtype="float32") /* ty=Tensor[(6, 52), float32] */;
  %265 = reshape(%264, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %266 = @func_2510(%265) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(312), float32], Tensor[(6, 13, 4), float32]) */;
  %267 = @func_3463() /* ty=(Tensor[(8, 14, 10), float32],) */;
  %268 = %267.0;
  %269 = cast(%268, dtype="float64") /* ty=Tensor[(8, 14, 10), float64] */;
  %270 = atan(%269) /* ty=Tensor[(8, 14, 10), float64] */;
  %271 = cast(%268, dtype="uint16") /* ty=Tensor[(8, 14, 10), uint16] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="uint16") /* ty=Tensor[(8, 14, 10), uint16] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %275 = %263.1;
  %276 = %266.2;
  %277 = maximum(%273, %274) /* ty=Tensor[(8, 14, 10), uint16] */;
  (%275, meta[relay.Constant][11] /* ty=Tensor[(6, 52), float32] */, %276, %277)
}

def @func_9952(%var_9948: Tensor[(5, 12, 9), uint8]) -> Tensor[(5, 12, 9), uint8] {
  %278 = cast(%var_9948, dtype="uint8") /* ty=Tensor[(5, 12, 9), uint8] */;
  %279 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(5, 12, 9), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 12, 9), uint8] */, dtype="uint8") /* ty=Tensor[(5, 12, 9), uint8] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  minimum(%280, %281) /* ty=Tensor[(5, 12, 9), uint8] */
}

def @func_4598() -> Tensor[(8, 14, 10), int8] {
  %282 = @func_4316() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %282.2
}

def @func_10140(%var_10135: int32, %var_10136: Tensor[(6, 12, 11), int32]) -> (Tensor[(6, 12, 11), int32],) {
  %283 = cast(%var_10135, dtype="int32") /* ty=int32 */;
  %284 = cast(%var_10136, dtype="int32") /* ty=Tensor[(6, 12, 11), int32] */;
  %285 = maximum(%283, %284) /* ty=Tensor[(6, 12, 11), int32] */;
  (%285,)
}

def @func_6558() -> Tensor[(8, 14, 10), int8] {
  %286 = @func_5648() /* ty=(Tensor[(8, 14, 10), float64], Tensor[(8, 14, 10), float32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %286.2
}

def @func_3463() -> (Tensor[(8, 14, 10), float32],) {
  %287 = @func_3212() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32]) */;
  %288 = %287.1;
  (%288,)
}

def @func_10710() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) {
  %289 = @func_5219() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1120), int8], Tensor[(6, 52), float32]) */;
  %290 = @func_4375() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */;
  %291 = %289.0;
  %292 = %290.1;
  (%291, %292)
}

def @func_3212() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32]) {
  %293 = @func_2403() /* ty=(Tensor[(8, 14, 10), int8],) */;
  %294 = %293.0;
  %295 = cast(%294, dtype="float32") /* ty=Tensor[(8, 14, 10), float32] */;
  %296 = @func_2281() /* ty=Tensor[(8, 14, 10), int8] */;
  %297 = sin(%295) /* ty=Tensor[(8, 14, 10), float32] */;
  (%296, %297)
}

def @func_1706(%var_1693: Tensor[(6, 13, 4), float64]) -> (Tensor[(6, 13, 4), bool],) {
  %298 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %299 = %298.0;
  %300 = cast(%var_1693, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%299, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %304 = greater_equal(%302, %303) /* ty=Tensor[(6, 13, 4), bool] */;
  %305 = cast(%var_1693, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%304, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %309 = greater(%307, %308) /* ty=Tensor[(6, 13, 4), bool] */;
  (%309,)
}

def @func_307(%var_300: Tensor[(8, 14, 1), int8], %var_301: Tensor[(8, 14, 10), int8]) -> Tensor[(8, 14, 10), int8] {
  %310 = cast(%var_300, dtype="int8") /* ty=Tensor[(8, 14, 1), int8] */;
  %311 = cast(%var_301, dtype="int8") /* ty=Tensor[(8, 14, 10), int8] */;
  bitwise_xor(%310, %311) /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_8563() -> (Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32]) {
  %312 = @func_4208() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(3, 104), bool]) */;
  %313 = @func_4822() /* ty=(Tensor[(4, 11, 16), int32],) */;
  %314 = %312.0;
  %315 = %313.0;
  (%314, %315)
}

def @func_10772() -> Tensor[(8, 14, 10), int8] {
  %316 = @func_5309() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32]) */;
  %316.0
}

def @func_4256() -> Tensor[(8, 14, 10), int8] {
  @func_2714() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_7387(%var_7362: uint8, %var_7364: Tensor[(1092), float64]) -> (Tensor[(8, 14, 10), float32], Tensor[(1092), float64], uint8, Tensor[(432), uint8], Tensor[(1092), float64]) {
  %317 = @func_6595() /* ty=(Tensor[(8, 14, 10), float32],) */;
  %318 = cast(%var_7362, dtype="uint8") /* ty=uint8 */;
  %319 = cast(meta[relay.Constant][13] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %320 = cast(%var_7364, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %321 = reshape(%318, newshape=[]) /* ty=uint8 */;
  %322 = reshape(%319, newshape=[12, 3, 12]) /* ty=Tensor[(12, 3, 12), uint8] */;
  %323 = reshape(%320, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %324 = @func_4927(%321, %322, %323) /* ty=(Tensor[(12, 3, 12), bool], Tensor[(12, 7, 13), float64], Tensor[(1092), float64]) */;
  %325 = %317.0;
  %326 = %324.2;
  (%325, %326, %var_7362, meta[relay.Constant][13] /* ty=Tensor[(432), uint8] */, %var_7364)
}

def @func_9538() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), bool], Tensor[(10, 11, 16), float32], Tensor[(8, 14, 10), int8]) {
  %327 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %328 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %329 = @func_5063() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(312), float32]) */;
  %330 = %329.0;
  %331 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 14, 10), int8] */, dtype="bool") /* ty=Tensor[(8, 14, 10), bool] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="bool") /* ty=Tensor[(8, 14, 10), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = @func_9293() /* ty=(Tensor[(10, 11, 16), float32], Tensor[(6, 13, 4), float64]) */;
  %336 = @func_9029() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %337 = %327.0;
  %338 = %328.0;
  %339 = greater_equal(%333, %334) /* ty=Tensor[(8, 14, 10), bool] */;
  %340 = %335.0;
  %341 = %336.0;
  (%337, %338, %339, %340, %341)
}

def @func_4031(%var_4015: Tensor[(12, 7, 13), float64]) -> Tensor[(12, 7, 13), float64] {
  %342 = cast(%var_4015, dtype="float64") /* ty=Tensor[(12, 7, 13), float64] */;
  sinh(%342) /* ty=Tensor[(12, 7, 13), float64] */
}

def @func_6514(%var_6478: bool, %var_6479: Tensor[(448), bool]) -> (Tensor[(16, 14, 5), float32], Tensor[(1120, 1), float32], Tensor[(363), uint32], Tensor[(8, 14, 10), int8], Tensor[(14, 4, 8), bool], bool, Tensor[(448), bool], Tensor[(6, 13, 4), float32]) {
  %343 = cast(meta[relay.Constant][15] /* ty=Tensor[(1120, 1), float32] */, dtype="float32") /* ty=Tensor[(1120, 1), float32] */;
  %344 = cast(meta[relay.Constant][15] /* ty=Tensor[(1120, 1), float32] */, dtype="float32") /* ty=Tensor[(1120, 1), float32] */;
  %345 = reshape(%343, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %346 = reshape(%344, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %347 = @func_4942() /* ty=(Tensor[(8, 14, 10), int8],) */;
  %348 = cast(%var_6478, dtype="bool") /* ty=bool */;
  %349 = cast(%var_6479, dtype="bool") /* ty=Tensor[(448), bool] */;
  %350 = reshape(%348, newshape=[]) /* ty=bool */;
  %351 = reshape(%349, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), bool] */;
  %352 = @func_3789() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %353 = %352.0;
  %354 = cast(meta[relay.Constant][16] /* ty=Tensor[(363), uint32] */, dtype="uint32") /* ty=Tensor[(363), uint32] */;
  %355 = reshape(%354, newshape=[363]) /* ty=Tensor[(363), uint32] */;
  %356 = @func_1964(%355) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) */;
  %357 = %356.0;
  %358 = cast(%357, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %359 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(%353, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %362 = @func_2804(%345, %346) /* ty=Tensor[(16, 14, 5), float32] */;
  %363 = %347.0;
  %364 = @func_4123(%350, %351) /* ty=Tensor[(14, 4, 8), bool] */;
  %365 = floor_mod(%360, %361) /* ty=Tensor[(6, 13, 4), float32] */;
  (%362, meta[relay.Constant][15] /* ty=Tensor[(1120, 1), float32] */, meta[relay.Constant][16] /* ty=Tensor[(363), uint32] */, %363, %364, %var_6478, %var_6479, %365)
}

def @func_10463(%var_10447: Tensor[(792), int32]) -> (Tensor[(6, 13, 4), float64], Tensor[(2, 8, 12), bool], Tensor[(192), uint64], Tensor[(6, 13, 4), float64], Tensor[(56, 2), int8], Tensor[(6, 12, 11), int32], int32, Tensor[(792), int32], Tensor[(6, 13, 4), float64]) {
  %366 = cast(meta[relay.Constant][17] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %367 = reshape(%366, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), uint64] */;
  %368 = @func_6742(%367) /* ty=(Tensor[(2, 8, 12), bool], Tensor[(6, 13, 4), float32]) */;
  %369 = @func_7098() /* ty=(Tensor[(112), int8], Tensor[(6, 13, 4), float64]) */;
  %370 = @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */;
  %371 = cast(3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %372 = cast(%var_10447, dtype="int32") /* ty=Tensor[(792), int32] */;
  %373 = reshape(%371, newshape=[]) /* ty=int32 */;
  %374 = reshape(%372, newshape=[6, 12, 11]) /* ty=Tensor[(6, 12, 11), int32] */;
  %375 = @func_10140(%373, %374) /* ty=(Tensor[(6, 12, 11), int32],) */;
  %376 = @func_7640() /* ty=Tensor[(6, 13, 4), float64] */;
  %377 = %368.0;
  %378 = %369.1;
  %379 = %370.3;
  %380 = %375.0;
  %381 = @func_9593() /* ty=Tensor[(6, 13, 4), float64] */;
  (%376, %377, meta[relay.Constant][17] /* ty=Tensor[(192), uint64] */, %378, %379, %380, 3 /* ty=int32 */, %var_10447, %381)
}

def @func_10798() -> (Tensor[(4, 6, 3), float32],) {
  %382 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 6, 3), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 3), float32] */;
  %383 = atan(%382) /* ty=Tensor[(4, 6, 3), float32] */;
  (%383,)
}

def @func_2937() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) {
  %384 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %385 = @func_2204() /* ty=Tensor[(6, 13, 4), float32] */;
  %386 = cast(%385, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %387 = rsqrt(%386) /* ty=Tensor[(6, 13, 4), float32] */;
  %388 = cast(%387, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %389 = atanh(%388) /* ty=Tensor[(6, 13, 4), float32] */;
  %390 = cast(%389, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
  %391 = log2(%390) /* ty=Tensor[(6, 13, 4), float64] */;
  %392 = cast(%391, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %393 = cast(meta[relay.Constant][19] /* ty=Tensor[(56, 2), int8] */, dtype="int8") /* ty=Tensor[(56, 2), int8] */;
  %394 = %384.1;
  %395 = cast(%394, dtype="int8") /* ty=Tensor[(8, 14, 10), int8] */;
  %396 = reshape(%393, newshape=[112]) /* ty=Tensor[(112), int8] */;
  %397 = reshape(%395, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %398 = @func_2080(%396, %397) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8], Tensor[(6, 13, 4), float64]) */;
  %399 = @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %400 = cast(%387, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %401 = reshape(%400, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
  %402 = @func_1535(%401) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */;
  %403 = cast(%385, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %404 = reshape(%403, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), float32] */;
  %405 = @func_1258(%404) /* ty=(Tensor[(6, 13, 4), float32],) */;
  %406 = cos(%392) /* ty=Tensor[(6, 13, 4), float32] */;
  %407 = %398.1;
  %408 = %399.0;
  %409 = %402.0;
  %410 = %405.0;
  (%394, %406, %407, meta[relay.Constant][19] /* ty=Tensor[(56, 2), int8] */, %408, %409, %410)
}

def @func_10241() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(10, 15, 9), int8], Tensor[(1350), int8]) {
  %411 = @func_6399() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 11, 8), float64], float64, Tensor[(88), float64]) */;
  %412 = cast(meta[relay.Constant][20] /* ty=Tensor[(1350), int8] */, dtype="int8") /* ty=Tensor[(1350), int8] */;
  %413 = reshape(%412, newshape=[10, 15, 9]) /* ty=Tensor[(10, 15, 9), int8] */;
  %414 = @func_9759() /* ty=Tensor[(8, 14, 10), int8] */;
  %415 = %411.0;
  %416 = @func_8955(%413) /* ty=Tensor[(10, 15, 9), int8] */;
  (%414, %415, %416, meta[relay.Constant][20] /* ty=Tensor[(1350), int8] */)
}

def @func_4208() -> (Tensor[(6, 13, 4), float64], Tensor[(3, 104), bool]) {
  %417 = @func_3950() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64]) */;
  %418 = %417.1;
  %419 = cast(%418, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
  %420 = cast(%418, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
  %421 = reshape(%419, newshape=[3, 104]) /* ty=Tensor[(3, 104), float64] */;
  %422 = reshape(%420, newshape=[3, 104]) /* ty=Tensor[(3, 104), float64] */;
  %423 = @func_3335(%421, %422) /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(3, 104), float32], Tensor[(3, 104), bool], Tensor[(312), float32]) */;
  %424 = %423.3;
  (%418, %424)
}

def @func_4504() -> (Tensor[(112), int8], Tensor[(8, 14, 10), int64]) {
  %425 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %426 = @func_2587() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) */;
  %427 = %425.2;
  %428 = %426.2;
  (%427, %428)
}

def @func_6013() -> (Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 52), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float32], Tensor[(16, 14, 5), float32], Tensor[(8, 140), float32], Tensor[(6, 13, 4), bool]) {
  %429 = @func_5811() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %430 = @func_3789() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %431 = @func_5124() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 52), float32]) */;
  %432 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %433 = @func_5820() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %434 = %433.0;
  %435 = cast(%434, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %436 = reshape(%435, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), float32] */;
  %437 = @func_2032(%436) /* ty=(Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), bool]) */;
  %438 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 140), float32] */, dtype="float32") /* ty=Tensor[(8, 140), float32] */;
  %439 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 140), float32] */, dtype="float32") /* ty=Tensor[(8, 140), float32] */;
  %440 = reshape(%438, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %441 = reshape(%439, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %442 = cast(%434, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %443 = asinh(%442) /* ty=Tensor[(6, 13, 4), float32] */;
  %444 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 13, 4), float32] */, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %448 = %429.0;
  %449 = %430.0;
  %450 = %431.1;
  %451 = %432.2;
  %452 = %437.0;
  %453 = @func_2804(%440, %441) /* ty=Tensor[(16, 14, 5), float32] */;
  %454 = not_equal(%446, %447) /* ty=Tensor[(6, 13, 4), bool] */;
  (%448, %449, %450, %451, %452, %453, meta[relay.Constant][21] /* ty=Tensor[(8, 140), float32] */, %454)
}

def @func_6595() -> (Tensor[(8, 14, 10), float32],) {
  %455 = @func_4256() /* ty=Tensor[(8, 14, 10), int8] */;
  %456 = cast(%455, dtype="float32") /* ty=Tensor[(8, 14, 10), float32] */;
  %457 = cosh(%456) /* ty=Tensor[(8, 14, 10), float32] */;
  (%457,)
}

def @func_10628() -> Tensor[(6, 13, 4), float64] {
  %458 = @func_10568() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %458.0
}

def @func_1535(%var_1530: Tensor[(1, 312), float32]) -> (Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) {
  %459 = @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %460 = cast(%var_1530, dtype="float32") /* ty=Tensor[(1, 312), float32] */;
  %461 = reshape(%460, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), float32] */;
  %462 = @func_1258(%461) /* ty=(Tensor[(6, 13, 4), float32],) */;
  %463 = %459.0;
  %464 = %462.0;
  (%463, %464, %var_1530)
}

def @func_10187() -> (Tensor[(3, 104), bool],) {
  %465 = @func_8428() /* ty=(Tensor[(112), int8], Tensor[(6, 13, 4), float64], Tensor[(3, 104), bool], Tensor[(6, 13, 4), float64]) */;
  %466 = %465.2;
  (%466,)
}

def @func_10957() -> Tensor[(1, 312), float32] {
  %467 = @func_8276() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(1, 312), float32]) */;
  %467.1
}

def @func_5533() -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) {
  %468 = @func_4064() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %469 = @func_3463() /* ty=(Tensor[(8, 14, 10), float32],) */;
  %470 = %468.0;
  %471 = %469.0;
  (%470, %471)
}

def @func_5124() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 52), float32]) {
  %472 = @func_4316() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %473 = @func_3492() /* ty=(Tensor[(312), float32], Tensor[(6, 52), float32], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), uint16]) */;
  %474 = %472.2;
  %475 = %473.1;
  (%474, %475)
}

def @func_9456() -> Tensor[(6, 13, 4), float32] {
  %476 = @func_5811() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %476.0
}

def @func_9593() -> Tensor[(6, 13, 4), float64] {
  %477 = @func_8276() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(1, 312), float32]) */;
  %477.0
}

def @func_8820(%var_8802: Tensor[(780), float64]) -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], float64, Tensor[(312, 1), float32], Tensor[(780), float64]) {
  %478 = @func_7075() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) */;
  %479 = cast(7.36557f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %480 = reshape(%479, newshape=[]) /* ty=float64 */;
  %481 = @func_6167(%480) /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 9, 11), float64], Tensor[(6, 13, 4), float64], Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %482 = cast(%var_8802, dtype="float64") /* ty=Tensor[(780), float64] */;
  %483 = reshape(%482, newshape=[5, 13, 12]) /* ty=Tensor[(5, 13, 12), float64] */;
  %484 = @func_3536(%483) /* ty=(Tensor[(5, 13, 12), bool], Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(5, 13, 12), float64], Tensor[(312, 1), float32]) */;
  %485 = %478.0;
  %486 = %481.5;
  %487 = %484.4;
  (%485, %486, 7.36557f64 /* ty=float64 */, %487, %var_8802)
}

def @func_8736() -> (Tensor[(8, 14, 10), int8],) {
  %488 = @func_6558() /* ty=Tensor[(8, 14, 10), int8] */;
  (%488,)
}

def @func_4064() -> (Tensor[(6, 13, 4), float64],) {
  %489 = @func_1912() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) */;
  %490 = %489.0;
  (%490,)
}

def @func_3870() -> (Tensor[(6, 13, 4), float64],) {
  %491 = @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %492 = %491.0;
  (%492,)
}

def @func_10866(%var_10849: Tensor[(10, 2, 5), float32]) -> (Tensor[(10, 2, 5), bool],) {
  %493 = cast(%var_10849, dtype="float32") /* ty=Tensor[(10, 2, 5), float32] */;
  %494 = sqrt(%493) /* ty=Tensor[(10, 2, 5), float32] */;
  %495 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 2, 5), float32] */, dtype="bool") /* ty=Tensor[(10, 2, 5), bool] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="bool") /* ty=Tensor[(10, 2, 5), bool] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %499 = not_equal(%497, %498) /* ty=Tensor[(10, 2, 5), bool] */;
  (%499,)
}

def @func_7098() -> (Tensor[(112), int8], Tensor[(6, 13, 4), float64]) {
  %500 = @func_5732() /* ty=(Tensor[(112), int8],) */;
  %501 = @func_4064() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %502 = %500.0;
  %503 = %501.0;
  (%502, %503)
}

def @func_6806() -> (Tensor[(6, 13, 4), float32],) {
  %504 = @func_5309() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32]) */;
  %505 = %504.1;
  %506 = cast(%505, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %507 = log(%506) /* ty=Tensor[(6, 13, 4), float32] */;
  (%507,)
}

def @func_8499(%var_8454: Tensor[(363), uint32]) -> (Tensor[(11, 3, 11), uint32], Tensor[(363), uint32], Tensor[(192), uint64], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), int16]) {
  %508 = cast(%var_8454, dtype="uint32") /* ty=Tensor[(363), uint32] */;
  %509 = reshape(%508, newshape=[363]) /* ty=Tensor[(363), uint32] */;
  %510 = @func_1964(%509) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) */;
  %511 = @func_3212() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32]) */;
  %512 = cast(meta[relay.Constant][24] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %513 = reshape(%512, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), uint64] */;
  %514 = @func_6742(%513) /* ty=(Tensor[(2, 8, 12), bool], Tensor[(6, 13, 4), float32]) */;
  %515 = %514.1;
  %516 = @func_1912() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) */;
  %517 = %516.0;
  %518 = cast(%517, dtype="int16") /* ty=Tensor[(6, 13, 4), int16] */;
  %519 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%515, dtype="int16") /* ty=Tensor[(6, 13, 4), int16] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %522 = %510.1;
  %523 = %511.0;
  %524 = @func_8071() /* ty=Tensor[(6, 13, 4), float64] */;
  %525 = bitwise_or(%520, %521) /* ty=Tensor[(6, 13, 4), int16] */;
  (%522, %var_8454, meta[relay.Constant][24] /* ty=Tensor[(192), uint64] */, %523, %524, %525)
}

def @func_8871() -> (Tensor[(8, 14, 10), int8], Tensor[(448), bool], Tensor[(945), uint16], Tensor[(448), bool]) {
  %526 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %527 = cast(meta[relay.Constant][25] /* ty=Tensor[(945), uint16] */, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %528 = cast(meta[relay.Constant][25] /* ty=Tensor[(945), uint16] */, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %529 = cast(meta[relay.Constant][26] /* ty=Tensor[(448), bool] */, dtype="bool") /* ty=Tensor[(448), bool] */;
  %530 = reshape(%527, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), uint16] */;
  %531 = reshape(%528, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), uint16] */;
  %532 = reshape(%529, newshape=[448]) /* ty=Tensor[(448), bool] */;
  %533 = @func_7575(%530, %531, %532) /* ty=(Tensor[(9, 15, 7), uint16], Tensor[(8, 14, 10), int8], bool, Tensor[(448), bool]) */;
  %534 = %526.0;
  %535 = %533.3;
  (%534, %535, meta[relay.Constant][25] /* ty=Tensor[(945), uint16] */, meta[relay.Constant][26] /* ty=Tensor[(448), bool] */)
}

def @func_5341() -> Tensor[(8, 14, 10), float64] {
  @func_5013() /* ty=Tensor[(8, 14, 10), float64] */
}

def @func_2281() -> Tensor[(8, 14, 10), int8] {
  %536 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %536.1
}

def @func_4123(%var_4112: bool, %var_4113: Tensor[(14, 4, 8), bool]) -> Tensor[(14, 4, 8), bool] {
  %537 = cast(%var_4112, dtype="bool") /* ty=bool */;
  %538 = cast(%var_4113, dtype="bool") /* ty=Tensor[(14, 4, 8), bool] */;
  logical_or(%537, %538) /* ty=Tensor[(14, 4, 8), bool] */
}

def @func_10045() -> (Tensor[(4, 11, 16), float32], Tensor[(88), float64], Tensor[(8, 14, 10), float64], Tensor[(6, 13, 4), float64], uint8, Tensor[(1092), float64]) {
  %539 = @func_4558() /* ty=(Tensor[(4, 11, 16), int32],) */;
  %540 = %539.0;
  %541 = cast(%540, dtype="float32") /* ty=Tensor[(4, 11, 16), float32] */;
  %542 = @func_6399() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 11, 8), float64], float64, Tensor[(88), float64]) */;
  %543 = cast(meta[relay.Constant][27] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %544 = cast(meta[relay.Constant][28] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %545 = reshape(%543, newshape=[]) /* ty=uint8 */;
  %546 = reshape(%544, newshape=[546, 2]) /* ty=Tensor[(546, 2), float64] */;
  %547 = @func_5432(%545, %546) /* ty=(Tensor[(8, 14, 10), float64], Tensor[(6, 13, 4), float64], Tensor[(1092), float64], uint8, Tensor[(4, 108), uint8], Tensor[(546, 2), float64], Tensor[(6, 13, 4), float64]) */;
  %548 = atanh(%541) /* ty=Tensor[(4, 11, 16), float32] */;
  %549 = %542.3;
  %550 = @func_5013() /* ty=Tensor[(8, 14, 10), float64] */;
  %551 = %547.1;
  (%548, %549, %550, %551, meta[relay.Constant][27] /* ty=uint8 */, meta[relay.Constant][28] /* ty=Tensor[(1092), float64] */)
}

def @func_8276() -> (Tensor[(6, 13, 4), float64], Tensor[(1, 312), float32]) {
  %552 = @func_3870() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %553 = %552.0;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %555 = reshape(%554, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
  %556 = @func_1535(%555) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */;
  %557 = %556.2;
  (%553, %557)
}

def @func_3950() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64]) {
  %558 = @func_3571() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %559 = @func_3789() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %560 = %559.0;
  %561 = cast(%560, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
  %562 = %558.0;
  %563 = acosh(%561) /* ty=Tensor[(6, 13, 4), float64] */;
  (%562, %563)
}

def @func_8210() -> Tensor[(6, 13, 4), float32] {
  %564 = @func_5559() /* ty=(Tensor[(6, 13, 4), float32],) */;
  %564.0
}

def @func_4375() -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) {
  %565 = @func_3571() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %566 = %565.1;
  %567 = @func_3692() /* ty=Tensor[(8, 14, 10), int8] */;
  (%566, %567)
}

def @func_3335(%var_3293: Tensor[(3, 104), float64], %var_3322: Tensor[(3, 104), float64]) -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(3, 104), float32], Tensor[(3, 104), bool], Tensor[(312), float32]) {
  %568 = @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */;
  %569 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 104), float32] */, dtype="float32") /* ty=Tensor[(3, 104), float32] */;
  %570 = reshape(%569, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %571 = @func_2510(%570) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(312), float32], Tensor[(6, 13, 4), float32]) */;
  %572 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 104), float32] */, dtype="uint8") /* ty=Tensor[(3, 104), uint8] */;
  %573 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(3, 104), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %574 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 104), float32] */, dtype="uint8") /* ty=Tensor[(3, 104), uint8] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %576 = multiply(%574, %575) /* ty=Tensor[(3, 104), uint8] */;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(3, 104), float64] */;
  %578 = cosh(%577) /* ty=Tensor[(3, 104), float64] */;
  %579 = cast(%var_3293, dtype="float32") /* ty=Tensor[(3, 104), float32] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(2), int32] */;
  %581 = cast(%578, dtype="float32") /* ty=Tensor[(3, 104), float32] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %583 = mod(%581, %582) /* ty=Tensor[(3, 104), float32] */;
  %584 = cast(%var_3293, dtype="float32") /* ty=Tensor[(3, 104), float32] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(2), int32] */;
  %586 = cast(%583, dtype="float32") /* ty=Tensor[(3, 104), float32] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %588 = cast(%583, dtype="float64") /* ty=Tensor[(3, 104), float64] */;
  %589 = acos(%588) /* ty=Tensor[(3, 104), float64] */;
  %590 = cast(%var_3322, dtype="bool") /* ty=Tensor[(3, 104), bool] */;
  %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(2), int32] */;
  %592 = cast(%589, dtype="bool") /* ty=Tensor[(3, 104), bool] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %594 = @func_2297() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) */;
  %595 = %568.0;
  %596 = %571.2;
  %597 = floor_mod(%586, %587) /* ty=Tensor[(3, 104), float32] */;
  %598 = not_equal(%592, %593) /* ty=Tensor[(3, 104), bool] */;
  %599 = %594.2;
  (%595, %596, %597, %598, %599)
}

def @func_4460() -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) {
  %600 = @func_3789() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %601 = @func_2297() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) */;
  %602 = cast(meta[relay.Constant][31] /* ty=Tensor[(363), uint32] */, dtype="uint32") /* ty=Tensor[(363), uint32] */;
  %603 = reshape(%602, newshape=[363]) /* ty=Tensor[(363), uint32] */;
  %604 = @func_1964(%603) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) */;
  %605 = %604.0;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %607 = reshape(%606, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
  %608 = @func_1535(%607) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */;
  %609 = @func_3571() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %610 = %600.0;
  %611 = %601.0;
  %612 = @func_2281() /* ty=Tensor[(8, 14, 10), int8] */;
  %613 = %608.1;
  %614 = %609.0;
  %615 = @func_2714() /* ty=Tensor[(8, 14, 10), int8] */;
  (%610, %611, %612, %605, meta[relay.Constant][31] /* ty=Tensor[(363), uint32] */, %613, %614, %615)
}

def @func_1769() -> (Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) {
  %616 = @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %617 = cast(meta[relay.Constant][32] /* ty=Tensor[(112), int8] */, dtype="int8") /* ty=Tensor[(112), int8] */;
  %618 = cast(meta[relay.Constant][33] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %619 = reshape(%617, newshape=[8, 14, 1]) /* ty=Tensor[(8, 14, 1), int8] */;
  %620 = reshape(%618, newshape=[8, 14, 10]) /* ty=Tensor[(8, 14, 10), int8] */;
  %621 = %616.4;
  %622 = @func_307(%619, %620) /* ty=Tensor[(8, 14, 10), int8] */;
  (%621, %622, meta[relay.Constant][32] /* ty=Tensor[(112), int8] */, meta[relay.Constant][33] /* ty=Tensor[(1120), int8] */)
}

def @func_6399() -> (Tensor[(8, 14, 10), int8], Tensor[(1, 11, 8), float64], float64, Tensor[(88), float64]) {
  %623 = @func_2297() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) */;
  %624 = cast(6.38723f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %625 = cast(meta[relay.Constant][34] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %626 = reshape(%624, newshape=[]) /* ty=float64 */;
  %627 = reshape(%625, newshape=[1, 11, 8]) /* ty=Tensor[(1, 11, 8), float64] */;
  %628 = @func_5710(%626, %627) /* ty=(Tensor[(1, 11, 8), float64], Tensor[(4, 11, 16), int32]) */;
  %629 = %623.0;
  %630 = %628.0;
  (%629, %630, 6.38723f64 /* ty=float64 */, meta[relay.Constant][34] /* ty=Tensor[(88), float64] */)
}

def @func_4942() -> (Tensor[(8, 14, 10), int8],) {
  %631 = @func_2403() /* ty=(Tensor[(8, 14, 10), int8],) */;
  %632 = %631.0;
  (%632,)
}

def @func_8140(%var_8086: Tensor[(2, 12, 12), uint16], %var_8102: Tensor[(2, 56), int8], %var_8134: Tensor[(300), float32]) -> (Tensor[(2, 12, 12), uint16], Tensor[(6, 52), float32], Tensor[(1120), int8], Tensor[(6, 13, 4), float64], Tensor[(2, 56), int8], Tensor[(78, 4), float32], Tensor[(300), float32]) {
  %633 = cast(%var_8086, dtype="uint16") /* ty=Tensor[(2, 12, 12), uint16] */;
  %634 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(2, 12, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 12, 12), uint16] */, dtype="uint16") /* ty=Tensor[(2, 12, 12), uint16] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %637 = cast(meta[relay.Constant][36] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %638 = cast(meta[relay.Constant][37] /* ty=Tensor[(78, 4), float32] */, dtype="float32") /* ty=Tensor[(78, 4), float32] */;
  %639 = cast(meta[relay.Constant][38] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %640 = reshape(%637, newshape=[15, 4, 5]) /* ty=Tensor[(15, 4, 5), float32] */;
  %641 = reshape(%638, newshape=[6, 52]) /* ty=Tensor[(6, 52), float32] */;
  %642 = reshape(%639, newshape=[8, 14, 10]) /* ty=Tensor[(8, 14, 10), int8] */;
  %643 = @func_3143(%640, %641, %642) /* ty=(Tensor[(15, 4, 5), uint16], Tensor[(4, 11, 16), int32], Tensor[(6, 52), float32], Tensor[(8, 14, 10), bool], Tensor[(8, 14, 10), int8]) */;
  %644 = cast(%var_8102, dtype="int8") /* ty=Tensor[(2, 56), int8] */;
  %645 = cast(meta[relay.Constant][38] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %646 = reshape(%644, newshape=[112]) /* ty=Tensor[(112), int8] */;
  %647 = reshape(%645, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %648 = @func_2080(%646, %647) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8], Tensor[(6, 13, 4), float64]) */;
  %649 = cast(meta[relay.Constant][37] /* ty=Tensor[(78, 4), float32] */, dtype="float32") /* ty=Tensor[(78, 4), float32] */;
  %650 = cast(%var_8134, dtype="float32") /* ty=Tensor[(300), float32] */;
  %651 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(300), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %652 = cast(meta[relay.Constant][36] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?), float32] */;
  %654 = minimum(%635, %636) /* ty=Tensor[(2, 12, 12), uint16] */;
  %655 = %643.2;
  %656 = %648.4;
  %657 = erf(%649) /* ty=Tensor[(78, 4), float32] */;
  %658 = floor_mod(%652, %653) /* ty=Tensor[(300), float32] */;
  (%654, %655, meta[relay.Constant][38] /* ty=Tensor[(1120), int8] */, %656, %var_8102, %657, %658)
}

def @func_9293() -> (Tensor[(10, 11, 16), float32], Tensor[(6, 13, 4), float64]) {
  %659 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 11, 16), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 16), float32] */;
  %660 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(10, 11, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 11, 16), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 16), float32] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %663 = floor_divide(%661, %662) /* ty=Tensor[(10, 11, 16), float32] */;
  %664 = @func_9156() /* ty=Tensor[(6, 13, 4), float64] */;
  (%663, %664)
}

def @func_7075() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) {
  %665 = @func_2403() /* ty=(Tensor[(8, 14, 10), int8],) */;
  %666 = @func_2587() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) */;
  %667 = @func_4822() /* ty=(Tensor[(4, 11, 16), int32],) */;
  %668 = @func_3870() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %669 = %665.0;
  %670 = %666.3;
  %671 = %667.0;
  %672 = %668.0;
  (%669, %670, %671, %672)
}

def @func_9863(%var_9837: Tensor[(88), float64]) -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(88), float64], Tensor[(1, 11, 8), int8]) {
  %673 = @func_3047() /* ty=(Tensor[(8, 14, 10), int8],) */;
  %674 = @func_4460() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */;
  %675 = @func_4460() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */;
  %676 = cast(-2.28531f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %677 = cast(%var_9837, dtype="float64") /* ty=Tensor[(88), float64] */;
  %678 = reshape(%676, newshape=[]) /* ty=float64 */;
  %679 = reshape(%677, newshape=[1, 11, 8]) /* ty=Tensor[(1, 11, 8), float64] */;
  %680 = @func_5710(%678, %679) /* ty=(Tensor[(1, 11, 8), float64], Tensor[(4, 11, 16), int32]) */;
  %681 = %680.0;
  %682 = cast(%681, dtype="int8") /* ty=Tensor[(1, 11, 8), int8] */;
  %683 = cast(-2.28531f64 /* ty=float64 */, dtype="int8") /* ty=int8 */;
  %684 = %673.0;
  %685 = %674.3;
  %686 = %675.7;
  %687 = bitwise_xor(%682, %683) /* ty=Tensor[(1, 11, 8), int8] */;
  (%684, %685, %686, %var_9837, %687)
}

def @func_3789() -> (Tensor[(6, 13, 4), float64],) {
  %688 = @func_1912() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) */;
  %689 = %688.2;
  (%689,)
}

def @func_5432(%var_5404: uint8, %var_5406: Tensor[(546, 2), float64]) -> (Tensor[(8, 14, 10), float64], Tensor[(6, 13, 4), float64], Tensor[(1092), float64], uint8, Tensor[(4, 108), uint8], Tensor[(546, 2), float64], Tensor[(6, 13, 4), float64]) {
  %690 = @func_1912() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) */;
  %691 = cast(%var_5404, dtype="uint8") /* ty=uint8 */;
  %692 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 108), uint8] */, dtype="uint8") /* ty=Tensor[(4, 108), uint8] */;
  %693 = cast(%var_5406, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
  %694 = reshape(%691, newshape=[]) /* ty=uint8 */;
  %695 = reshape(%692, newshape=[12, 3, 12]) /* ty=Tensor[(12, 3, 12), uint8] */;
  %696 = reshape(%693, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %697 = @func_4927(%694, %695, %696) /* ty=(Tensor[(12, 3, 12), bool], Tensor[(12, 7, 13), float64], Tensor[(1092), float64]) */;
  %698 = @func_5063() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(312), float32]) */;
  %699 = %698.1;
  %700 = cast(%699, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
  %701 = @func_5013() /* ty=Tensor[(8, 14, 10), float64] */;
  %702 = %690.0;
  %703 = %697.2;
  %704 = sigmoid(%700) /* ty=Tensor[(6, 13, 4), float64] */;
  (%701, %702, %703, %var_5404, meta[relay.Constant][41] /* ty=Tensor[(4, 108), uint8] */, %var_5406, %704)
}

def @func_9968() -> (Tensor[(8, 14, 10), float32], Tensor[(6, 13, 4), float32]) {
  %705 = @func_9600() /* ty=(Tensor[(8, 14, 10), float32],) */;
  %706 = %705.0;
  %707 = @func_8210() /* ty=Tensor[(6, 13, 4), float32] */;
  (%706, %707)
}

def @func_3418() -> Tensor[(6, 13, 4), float64] {
  @func_3359() /* ty=Tensor[(6, 13, 4), float64] */
}

def @func_3978(%var_3959: Tensor[(363), uint32]) -> (Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(363), uint32]) {
  %708 = @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %709 = cast(%var_3959, dtype="uint32") /* ty=Tensor[(363), uint32] */;
  %710 = reshape(%709, newshape=[363]) /* ty=Tensor[(363), uint32] */;
  %711 = @func_1964(%710) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) */;
  %712 = %708.0;
  %713 = %711.2;
  (%712, %713, %var_3959)
}

def @func_2162() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  %714 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %715 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %716 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %717 = %714.1;
  %718 = %715.1;
  %719 = %716.0;
  (%717, %718, %719)
}

def @func_2361() -> Tensor[(8, 14, 10), int8] {
  @func_2281() /* ty=Tensor[(8, 14, 10), int8] */
}

def @main(%var_10980: Tensor[(3, 104), bool], %var_10986: Tensor[(495, 1), float64], %var_10988: Tensor[(495, 7), float64]) -> (Tensor[(3, 104), float64], Tensor[(11, 3, 15), float64], Tensor[(495, 7), float32]) {
  %720 = @func_10187() /* ty=(Tensor[(3, 104), bool],) */;
  %721 = %720.0;
  %722 = cast(%var_10980, dtype="float64") /* ty=Tensor[(3, 104), float64] */;
  %723 = shape_of(%721, dtype="int32") /* ty=Tensor[(2), int32] */;
  %724 = cast(%721, dtype="float64") /* ty=Tensor[(3, 104), float64] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %726 = cast(%var_10986, dtype="float64") /* ty=Tensor[(495, 1), float64] */;
  %727 = reshape(%726, newshape=[11, 3, 15]) /* ty=Tensor[(11, 3, 15), float64] */;
  %728 = cast(%var_10986, dtype="float32") /* ty=Tensor[(495, 1), float32] */;
  %729 = cast(%var_10988, dtype="float32") /* ty=Tensor[(495, 7), float32] */;
  %730 = divide(%728, %729) /* ty=Tensor[(495, 7), float32] */;
  %731 = cast(%730, dtype="float32") /* ty=Tensor[(495, 7), float32] */;
  %732 = floor_divide(%724, %725) /* ty=Tensor[(3, 104), float64] */;
  %733 = @func_7843(%727) /* ty=Tensor[(11, 3, 15), float64] */;
  %734 = erf(%731) /* ty=Tensor[(495, 7), float32] */;
  (%732, %733, %734)
}

def @func_5498() -> Tensor[(9, 5, 10), float64] {
  %735 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(9, 5, 10), float64] */;
  asinh(%735) /* ty=Tensor[(9, 5, 10), float64] */
}

def @func_1824(%var_1815: Tensor[(11, 3, 11), uint32]) -> (Tensor[(11, 3, 11), uint32],) {
  %736 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 3, 11), uint32] */, dtype="uint32") /* ty=Tensor[(11, 3, 11), uint32] */;
  %737 = shape_of(%var_1815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%var_1815, dtype="uint32") /* ty=Tensor[(11, 3, 11), uint32] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %740 = logical_xor(%738, %739) /* ty=Tensor[(11, 3, 11), uint32] */;
  (%740,)
}

def @func_10173() -> (Tensor[(8, 14, 10), float64], Tensor[(6, 13, 4), float64]) {
  %741 = @func_9383() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(10, 1, 6), uint8], Tensor[(15, 4), uint8]) */;
  %742 = @func_5013() /* ty=Tensor[(8, 14, 10), float64] */;
  %743 = %741.0;
  (%742, %743)
}

def @func_8428() -> (Tensor[(112), int8], Tensor[(6, 13, 4), float64], Tensor[(3, 104), bool], Tensor[(6, 13, 4), float64]) {
  %744 = @func_3841() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), float64]) */;
  %745 = @func_3950() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64]) */;
  %746 = @func_4208() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(3, 104), bool]) */;
  %747 = %744.0;
  %748 = %745.0;
  %749 = %746.1;
  %750 = @func_7640() /* ty=Tensor[(6, 13, 4), float64] */;
  (%747, %748, %749, %750)
}

def @func_9792(%var_9762: Tensor[(12, 14, 13), uint32], %var_9763: Tensor[(12, 14, 13), uint32]) -> (Tensor[(12, 14, 13), uint32], Tensor[(312), float32], Tensor[(12, 14, 13), float64], Tensor[(6, 13, 4), float32], Tensor[(1, 11, 8), float64]) {
  %751 = cast(%var_9763, dtype="uint32") /* ty=Tensor[(12, 14, 13), uint32] */;
  %752 = shape_of(%var_9762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%var_9762, dtype="uint32") /* ty=Tensor[(12, 14, 13), uint32] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %755 = @func_2297() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) */;
  %756 = cast(%var_9763, dtype="float64") /* ty=Tensor[(12, 14, 13), float64] */;
  %757 = @func_5309() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32]) */;
  %758 = @func_6399() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 11, 8), float64], float64, Tensor[(88), float64]) */;
  %759 = bitwise_and(%753, %754) /* ty=Tensor[(12, 14, 13), uint32] */;
  %760 = %755.2;
  %761 = erf(%756) /* ty=Tensor[(12, 14, 13), float64] */;
  %762 = %757.1;
  %763 = %758.1;
  (%759, %760, %761, %762, %763)
}

def @func_10330() -> Tensor[(8, 14, 10), int8] {
  @func_6558() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_9265() -> Tensor[(8, 14, 10), int8] {
  %764 = @func_5063() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(312), float32]) */;
  %764.0
}

def @func_4180() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float32]) {
  %765 = @func_3418() /* ty=Tensor[(6, 13, 4), float64] */;
  %766 = @func_3950() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64]) */;
  %767 = %766.1;
  %768 = cast(%767, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
  %769 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%765, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %772 = mod(%770, %771) /* ty=Tensor[(6, 13, 4), float64] */;
  %773 = @func_2204() /* ty=Tensor[(6, 13, 4), float32] */;
  (%772, %773)
}

def @func_8622() -> (Tensor[(6, 13, 4), float64],) {
  %774 = @func_3907() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %775 = %774.0;
  (%775,)
}

def @func_10597() -> (Tensor[(6, 13, 4), float64],) {
  %776 = @func_6086() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) */;
  %777 = %776.0;
  (%777,)
}

def @func_7515() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) {
  %778 = @func_5124() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 52), float32]) */;
  %779 = @func_3907() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %780 = %778.0;
  %781 = %779.0;
  %782 = @func_2361() /* ty=Tensor[(8, 14, 10), int8] */;
  (%780, %781, %782)
}

def @func_2204() -> Tensor[(6, 13, 4), float32] {
  %783 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %783.0
}

def @func_9029() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  %784 = @func_3571() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %785 = %784.3;
  %786 = @func_6670() /* ty=Tensor[(6, 13, 4), float64] */;
  (%785, %786)
}

def @func_6868() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 52), float32]) {
  %787 = @func_4180() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float32]) */;
  %788 = @func_3950() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64]) */;
  %789 = @func_5219() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1120), int8], Tensor[(6, 52), float32]) */;
  %790 = @func_6558() /* ty=Tensor[(8, 14, 10), int8] */;
  %791 = %787.1;
  %792 = %788.0;
  %793 = %789.2;
  (%790, %791, %792, %793)
}

def @func_9600() -> (Tensor[(8, 14, 10), float32],) {
  %794 = @func_6086() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) */;
  %795 = %794.1;
  (%795,)
}

def @func_6167(%var_6095: float64) -> (Tensor[(8, 14, 10), int8], Tensor[(1, 9, 11), float64], Tensor[(6, 13, 4), float64], Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  %796 = @func_4316() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %797 = cast(%var_6095, dtype="float64") /* ty=float64 */;
  %798 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 9, 11), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 11), float64] */;
  %799 = floor_mod(%797, %798) /* ty=Tensor[(1, 9, 11), float64] */;
  %800 = cast(%799, dtype="float64") /* ty=Tensor[(1, 9, 11), float64] */;
  %801 = cast(meta[relay.Constant][45] /* ty=Tensor[(112), int8] */, dtype="int8") /* ty=Tensor[(112), int8] */;
  %802 = %796.1;
  %803 = cast(%802, dtype="int8") /* ty=Tensor[(8, 14, 10), int8] */;
  %804 = reshape(%801, newshape=[112]) /* ty=Tensor[(112), int8] */;
  %805 = reshape(%803, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %806 = @func_2080(%804, %805) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8], Tensor[(6, 13, 4), float64]) */;
  %807 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %808 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %809 = cos(%800) /* ty=Tensor[(1, 9, 11), float64] */;
  %810 = %806.0;
  %811 = %807.0;
  %812 = %808.0;
  (%802, %809, %810, meta[relay.Constant][45] /* ty=Tensor[(112), int8] */, %811, %812)
}

def @func_1556() -> (Tensor[(6, 13, 4), float64],) {
  %813 = @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %814 = %813.3;
  %815 = cast(%814, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
  %816 = atan(%815) /* ty=Tensor[(6, 13, 4), float64] */;
  (%816,)
}

def @func_7468(%var_7433: Tensor[(312), float64], %var_7443: Tensor[(363, 1), uint32], %var_7453: bool, %var_7454: Tensor[(448), bool]) -> (Tensor[(312), float32], Tensor[(312), float64], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], bool, bool, Tensor[(448), bool], Tensor[(363, 112), int32]) {
  %817 = cast(%var_7433, dtype="float64") /* ty=Tensor[(312), float64] */;
  %818 = cast(%var_7433, dtype="float64") /* ty=Tensor[(312), float64] */;
  %819 = reshape(%817, newshape=[3, 104]) /* ty=Tensor[(3, 104), float64] */;
  %820 = reshape(%818, newshape=[3, 104]) /* ty=Tensor[(3, 104), float64] */;
  %821 = @func_3335(%819, %820) /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(3, 104), float32], Tensor[(3, 104), bool], Tensor[(312), float32]) */;
  %822 = @func_3870() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %823 = cast(%var_7443, dtype="uint32") /* ty=Tensor[(363, 1), uint32] */;
  %824 = reshape(%823, newshape=[363]) /* ty=Tensor[(363), uint32] */;
  %825 = @func_3978(%824) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(363), uint32]) */;
  %826 = cast(%var_7453, dtype="bool") /* ty=bool */;
  %827 = cast(%var_7454, dtype="bool") /* ty=Tensor[(448), bool] */;
  %828 = reshape(%826, newshape=[]) /* ty=bool */;
  %829 = reshape(%827, newshape=[448]) /* ty=Tensor[(448), bool] */;
  %830 = @func_6514(%828, %829) /* ty=(Tensor[(16, 14, 5), float32], Tensor[(1120, 1), float32], Tensor[(363), uint32], Tensor[(8, 14, 10), int8], Tensor[(14, 4, 8), bool], bool, Tensor[(448), bool], Tensor[(6, 13, 4), float32]) */;
  %831 = @func_6541() /* ty=Tensor[(112), int8] */;
  %832 = cast(%831, dtype="float32") /* ty=Tensor[(112), float32] */;
  %833 = log2(%832) /* ty=Tensor[(112), float32] */;
  %834 = cast(%var_7443, dtype="int32") /* ty=Tensor[(363, 1), int32] */;
  %835 = cast(%833, dtype="int32") /* ty=Tensor[(112), int32] */;
  %836 = %821.4;
  %837 = %822.0;
  %838 = %825.2;
  %839 = %830.5;
  %840 = subtract(%834, %835) /* ty=Tensor[(363, 112), int32] */;
  (%836, %var_7433, %837, %838, %839, %var_7453, %var_7454, %840)
}

def @func_1258(%var_1245: Tensor[(6, 13, 4), float32]) -> (Tensor[(6, 13, 4), float32],) {
  %841 = cast(%var_1245, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %842 = tan(%841) /* ty=Tensor[(6, 13, 4), float32] */;
  %843 = cast(%var_1245, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %844 = log10(%843) /* ty=Tensor[(6, 13, 4), float32] */;
  %845 = cast(%844, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %846 = shape_of(%842, dtype="int32") /* ty=Tensor[(3), int32] */;
  %847 = cast(%842, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %849 = power(%847, %848) /* ty=Tensor[(6, 13, 4), float32] */;
  (%849,)
}

def @func_4316() -> (Tensor[(4, 11, 16), int32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) {
  %850 = @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */;
  %851 = @func_2297() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) */;
  %852 = %850.4;
  %853 = %851.0;
  %854 = @func_2714() /* ty=Tensor[(8, 14, 10), int8] */;
  %855 = @func_2714() /* ty=Tensor[(8, 14, 10), int8] */;
  (%852, %853, %854, %855)
}

def @func_8994(%var_8972: Tensor[(4, 28), int8], %var_8973: Tensor[(8, 140), int8]) -> (Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(4, 28), int8], Tensor[(8, 140), int8], Tensor[(312, 1), float32], Tensor[(780), float64], Tensor[(8, 10, 2), float64]) {
  %856 = @func_5811() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %857 = cast(%var_8972, dtype="int8") /* ty=Tensor[(4, 28), int8] */;
  %858 = cast(%var_8973, dtype="int8") /* ty=Tensor[(8, 140), int8] */;
  %859 = reshape(%857, newshape=[112]) /* ty=Tensor[(112), int8] */;
  %860 = reshape(%858, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %861 = @func_2080(%859, %860) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8], Tensor[(6, 13, 4), float64]) */;
  %862 = cast(meta[relay.Constant][46] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %863 = reshape(%862, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %864 = @func_8820(%863) /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], float64, Tensor[(312, 1), float32], Tensor[(780), float64]) */;
  %865 = @func_7212() /* ty=(Tensor[(8, 10, 2), float64],) */;
  %866 = %856.0;
  %867 = %861.4;
  %868 = %864.3;
  %869 = %865.0;
  (%866, %867, %var_8972, %var_8973, %868, meta[relay.Constant][46] /* ty=Tensor[(780), float64] */, %869)
}

def @func_5063() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(312), float32]) {
  %870 = @func_4997() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %871 = cast(meta[relay.Constant][47] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %872 = reshape(%871, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
  %873 = @func_1535(%872) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */;
  %874 = %870.0;
  %875 = %873.1;
  (%874, %875, meta[relay.Constant][47] /* ty=Tensor[(312), float32] */)
}

def @func_9434(%var_9427: Tensor[(15, 14, 10), uint32], %var_9428: Tensor[(15, 14, 10), uint32]) -> Tensor[(15, 14, 10), bool] {
  %876 = cast(%var_9428, dtype="bool") /* ty=Tensor[(15, 14, 10), bool] */;
  %877 = shape_of(%var_9427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(%var_9427, dtype="bool") /* ty=Tensor[(15, 14, 10), bool] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%878, %879) /* ty=Tensor[(15, 14, 10), bool] */
}

def @func_5309() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32]) {
  %880 = @func_4997() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %881 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %882 = %880.0;
  %883 = %881.0;
  (%882, %883)
}

def @func_5820() -> (Tensor[(6, 13, 4), float64],) {
  %884 = @func_4869() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(6, 13, 4), float64]) */;
  %885 = %884.3;
  (%885,)
}

def @func_8916(%var_8910: Tensor[(8, 14, 10), int8]) -> (Tensor[(8, 14, 10), uint8],) {
  %886 = @func_2281() /* ty=Tensor[(8, 14, 10), int8] */;
  %887 = cast(%var_8910, dtype="uint8") /* ty=Tensor[(8, 14, 10), uint8] */;
  %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%886, dtype="uint8") /* ty=Tensor[(8, 14, 10), uint8] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %891 = subtract(%889, %890) /* ty=Tensor[(8, 14, 10), uint8] */;
  (%891,)
}

def @func_5811() -> (Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) {
  %892 = @func_3907() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %893 = %892.0;
  %894 = cast(%893, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %895 = cast(%893, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %896 = asin(%894) /* ty=Tensor[(6, 13, 4), float32] */;
  %897 = acos(%895) /* ty=Tensor[(6, 13, 4), float32] */;
  (%896, %897)
}

def @func_7987() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int64], Tensor[(112), int8]) {
  %898 = @func_4180() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float32]) */;
  %899 = @func_2587() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) */;
  %900 = @func_3359() /* ty=Tensor[(6, 13, 4), float64] */;
  %901 = %898.0;
  %902 = %899.2;
  %903 = @func_7189() /* ty=Tensor[(112), int8] */;
  (%900, %901, %902, %903)
}

def @func_4997() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  %904 = @func_3907() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %905 = @func_4256() /* ty=Tensor[(8, 14, 10), int8] */;
  %906 = %904.0;
  (%905, %906)
}

def @func_8185() -> (Tensor[(8, 14, 10), float64],) {
  %907 = @func_5341() /* ty=Tensor[(8, 14, 10), float64] */;
  (%907,)
}

def @func_6640() -> (Tensor[(6, 13, 4), float64],) {
  %908 = @func_3907() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %909 = %908.0;
  (%909,)
}

def @func_7575(%var_7561: Tensor[(9, 15, 7), uint16], %var_7562: Tensor[(9, 15, 7), uint16], %var_7569: Tensor[(448), bool]) -> (Tensor[(9, 15, 7), uint16], Tensor[(8, 14, 10), int8], bool, Tensor[(448), bool]) {
  %910 = cast(%var_7562, dtype="uint16") /* ty=Tensor[(9, 15, 7), uint16] */;
  %911 = shape_of(%var_7561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %912 = cast(%var_7561, dtype="uint16") /* ty=Tensor[(9, 15, 7), uint16] */;
  %913 = dyn.reshape(%910, %911, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %914 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %915 = cast(%var_7569, dtype="bool") /* ty=Tensor[(448), bool] */;
  %916 = reshape(%914, newshape=[]) /* ty=bool */;
  %917 = reshape(%915, newshape=[448]) /* ty=Tensor[(448), bool] */;
  %918 = @func_6514(%916, %917) /* ty=(Tensor[(16, 14, 5), float32], Tensor[(1120, 1), float32], Tensor[(363), uint32], Tensor[(8, 14, 10), int8], Tensor[(14, 4, 8), bool], bool, Tensor[(448), bool], Tensor[(6, 13, 4), float32]) */;
  %919 = left_shift(%912, %913) /* ty=Tensor[(9, 15, 7), uint16] */;
  %920 = %918.3;
  (%919, %920, True /* ty=bool */, %var_7569)
}

def @func_1588(%var_1585: Tensor[(312, 1), float32]) -> (Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(312, 1), float32]) {
  %921 = @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %922 = cast(%var_1585, dtype="float32") /* ty=Tensor[(312, 1), float32] */;
  %923 = reshape(%922, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
  %924 = @func_1535(%923) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */;
  %925 = %921.0;
  %926 = %924.0;
  (%925, %926, %var_1585)
}

def @func_9097() -> Tensor[(8, 14, 10), int8] {
  %927 = @func_4966() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %927.0
}

def @func_7189() -> Tensor[(112), int8] {
  @func_6541() /* ty=Tensor[(112), int8] */
}

def @func_10302(%var_10270: Tensor[(5, 8, 12), uint64]) -> (Tensor[(5, 8, 12), uint64], Tensor[(5, 8, 12), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 52), float32]) {
  %928 = cast(%var_10270, dtype="uint64") /* ty=Tensor[(5, 8, 12), uint64] */;
  %929 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(5, 8, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %930 = cast(meta[relay.Constant][48] /* ty=Tensor[(5, 8, 12), uint64] */, dtype="uint64") /* ty=Tensor[(5, 8, 12), uint64] */;
  %931 = dyn.reshape(%928, %929, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %932 = cast(%var_10270, dtype="float32") /* ty=Tensor[(5, 8, 12), float32] */;
  %933 = @func_4869() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(6, 13, 4), float64]) */;
  %934 = @func_6868() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 52), float32]) */;
  %935 = add(%930, %931) /* ty=Tensor[(5, 8, 12), uint64] */;
  %936 = erf(%932) /* ty=Tensor[(5, 8, 12), float32] */;
  %937 = %933.3;
  %938 = %934.3;
  (%935, %936, %937, %938)
}

def @func_2080(%var_2062: Tensor[(112), int8], %var_2063: Tensor[(1120), int8]) -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8], Tensor[(6, 13, 4), float64]) {
  %939 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %940 = cast(%var_2062, dtype="int8") /* ty=Tensor[(112), int8] */;
  %941 = cast(%var_2063, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %942 = reshape(%940, newshape=[8, 14, 1]) /* ty=Tensor[(8, 14, 1), int8] */;
  %943 = reshape(%941, newshape=[8, 14, 10]) /* ty=Tensor[(8, 14, 10), int8] */;
  %944 = @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %945 = %939.0;
  %946 = @func_307(%942, %943) /* ty=Tensor[(8, 14, 10), int8] */;
  %947 = %944.0;
  (%945, %946, %var_2062, %var_2063, %947)
}

def @func_5459(%var_5439: Tensor[(10, 1, 6), uint8]) -> (Tensor[(10, 1, 6), uint8],) {
  %948 = cast(meta[relay.Constant][49] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %949 = cast(%var_5439, dtype="uint8") /* ty=Tensor[(10, 1, 6), uint8] */;
  %950 = bitwise_and(%948, %949) /* ty=Tensor[(10, 1, 6), uint8] */;
  (%950,)
}

def @func_6086() -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) {
  %951 = @func_4997() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %952 = @func_3463() /* ty=(Tensor[(8, 14, 10), float32],) */;
  %953 = %951.1;
  %954 = %952.0;
  (%953, %954)
}

def @func_9383() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(10, 1, 6), uint8], Tensor[(15, 4), uint8]) {
  %955 = @func_8276() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(1, 312), float32]) */;
  %956 = @func_9029() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %957 = %956.1;
  %958 = cast(%957, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
  %959 = cast(meta[relay.Constant][50] /* ty=Tensor[(15, 4), uint8] */, dtype="uint8") /* ty=Tensor[(15, 4), uint8] */;
  %960 = reshape(%959, newshape=[10, 1, 6]) /* ty=Tensor[(10, 1, 6), uint8] */;
  %961 = @func_5459(%960) /* ty=(Tensor[(10, 1, 6), uint8],) */;
  %962 = %955.0;
  %963 = exp(%958) /* ty=Tensor[(6, 13, 4), float64] */;
  %964 = %961.0;
  (%962, %963, %964, meta[relay.Constant][50] /* ty=Tensor[(15, 4), uint8] */)
}

def @func_7212() -> (Tensor[(8, 10, 2), float64],) {
  %965 = cast(meta[relay.Constant][51] /* ty=Tensor[(8, 10, 2), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 2), float64] */;
  %966 = cosh(%965) /* ty=Tensor[(8, 10, 2), float64] */;
  (%966,)
}

def @func_6979() -> (Tensor[(8, 7, 4), int64],) {
  %967 = cast(meta[relay.Constant][53] /* ty=Tensor[(8, 7, 4), int64] */, dtype="int64") /* ty=Tensor[(8, 7, 4), int64] */;
  %968 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(8, 7, 4), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %969 = cast(meta[relay.Constant][52] /* ty=Tensor[(8, 7, 4), int64] */, dtype="int64") /* ty=Tensor[(8, 7, 4), int64] */;
  %970 = dyn.reshape(%967, %968, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %971 = subtract(%969, %970) /* ty=Tensor[(8, 7, 4), int64] */;
  (%971,)
}

def @func_7000() -> (Tensor[(8, 14, 10), float32],) {
  %972 = @func_3212() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32]) */;
  %973 = %972.1;
  (%973,)
}

def @func_9156() -> Tensor[(6, 13, 4), float64] {
  %974 = @func_5533() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) */;
  %974.0
}

def @func_9737() -> (Tensor[(8, 14, 10), float32],) {
  %975 = @func_5533() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) */;
  %976 = %975.1;
  (%976,)
}

def @func_10689() -> Tensor[(4, 11, 16), float32] {
  %977 = @func_7075() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) */;
  %978 = %977.2;
  %979 = cast(%978, dtype="float32") /* ty=Tensor[(4, 11, 16), float32] */;
  rsqrt(%979) /* ty=Tensor[(4, 11, 16), float32] */
}

def @func_9060() -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) {
  %980 = @func_4180() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float32]) */;
  %981 = %980.1;
  %982 = cast(%981, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
  %983 = @func_2587() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) */;
  %984 = sqrt(%982) /* ty=Tensor[(6, 13, 4), float64] */;
  %985 = %983.1;
  (%984, %985)
}

def @func_7151(%var_7113: Tensor[(8, 14, 10), float32]) -> (Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(8, 14, 10), float32]) {
  %986 = @func_3212() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32]) */;
  %987 = %986.1;
  %988 = cast(%var_7113, dtype="int8") /* ty=Tensor[(8, 14, 10), int8] */;
  %989 = shape_of(%987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %990 = cast(%987, dtype="int8") /* ty=Tensor[(8, 14, 10), int8] */;
  %991 = dyn.reshape(%988, %989, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %992 = cast(%987, dtype="float32") /* ty=Tensor[(8, 14, 10), float32] */;
  %993 = logical_xor(%990, %991) /* ty=Tensor[(8, 14, 10), int8] */;
  %994 = @func_6541() /* ty=Tensor[(112), int8] */;
  %995 = sigmoid(%992) /* ty=Tensor[(8, 14, 10), float32] */;
  (%993, %994, %995)
}

def @func_7843(%var_7835: Tensor[(11, 3, 15), float64]) -> Tensor[(11, 3, 15), float64] {
  %996 = cast(%var_7835, dtype="float64") /* ty=Tensor[(11, 3, 15), float64] */;
  sqrt(%996) /* ty=Tensor[(11, 3, 15), float64] */
}

def @func_7926(%var_7923: Tensor[(14, 16, 3), float32]) -> Tensor[(14, 16, 3), float32] {
  %997 = cast(%var_7923, dtype="float32") /* ty=Tensor[(14, 16, 3), float32] */;
  sigmoid(%997) /* ty=Tensor[(14, 16, 3), float32] */
}

def @func_8071() -> Tensor[(6, 13, 4), float64] {
  @func_3418() /* ty=Tensor[(6, 13, 4), float64] */
}

def @func_5559() -> (Tensor[(6, 13, 4), float32],) {
  %998 = @func_5309() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32]) */;
  %999 = %998.1;
  (%999,)
}

def @func_3047() -> (Tensor[(8, 14, 10), int8],) {
  %1000 = @func_2361() /* ty=Tensor[(8, 14, 10), int8] */;
  (%1000,)
}

def @func_6281(%var_6217: Tensor[(182, 6), float64], %var_6256: Tensor[(12, 7, 13), float64], %var_6277: Tensor[(363), uint32]) -> (Tensor[(8, 14, 10), float64], Tensor[(182, 6), float64], Tensor[(12, 7, 13), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32], Tensor[(12, 7, 13), float32], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) {
  %1001 = @func_5063() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(312), float32]) */;
  %1002 = %1001.0;
  %1003 = cast(%1002, dtype="float64") /* ty=Tensor[(8, 14, 10), float64] */;
  %1004 = cast(%var_6217, dtype="float64") /* ty=Tensor[(182, 6), float64] */;
  %1005 = reshape(%1004, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
  %1006 = @func_4031(%1005) /* ty=Tensor[(12, 7, 13), float64] */;
  %1007 = cast(%1006, dtype="float64") /* ty=Tensor[(12, 7, 13), float64] */;
  %1008 = reshape(%1007, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
  %1009 = @func_2587() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) */;
  %1010 = @func_5533() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) */;
  %1011 = cast(%var_6256, dtype="float32") /* ty=Tensor[(12, 7, 13), float32] */;
  %1012 = shape_of(%1006, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1013 = cast(%1006, dtype="float32") /* ty=Tensor[(12, 7, 13), float32] */;
  %1014 = dyn.reshape(%1011, %1012, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1015 = cast(%var_6277, dtype="uint32") /* ty=Tensor[(363), uint32] */;
  %1016 = reshape(%1015, newshape=[11, 3, 11]) /* ty=Tensor[(11, 3, 11), uint32] */;
  %1017 = @func_1824(%1016) /* ty=(Tensor[(11, 3, 11), uint32],) */;
  %1018 = acos(%1003) /* ty=Tensor[(8, 14, 10), float64] */;
  %1019 = @func_4031(%1008) /* ty=Tensor[(12, 7, 13), float64] */;
  %1020 = %1009.3;
  %1021 = %1010.1;
  %1022 = floor_mod(%1013, %1014) /* ty=Tensor[(12, 7, 13), float32] */;
  %1023 = %1017.0;
  (%1018, %var_6217, %1019, %1020, %1021, %1022, %1023, %var_6277)
}

def @func_5732() -> (Tensor[(112), int8],) {
  %1024 = @func_3841() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), float64]) */;
  %1025 = %1024.0;
  (%1025,)
}

def @func_7726() -> (Tensor[(6, 13, 4), float32],) {
  %1026 = @func_3492() /* ty=(Tensor[(312), float32], Tensor[(6, 52), float32], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), uint16]) */;
  %1027 = %1026.2;
  (%1027,)
}

def @func_10906(%var_10892: Tensor[(3, 104), float32]) -> (Tensor[(3, 104), int32], Tensor[(6, 52), float32]) {
  %1028 = @func_10187() /* ty=(Tensor[(3, 104), bool],) */;
  %1029 = %1028.0;
  %1030 = cast(%1029, dtype="float32") /* ty=Tensor[(3, 104), float32] */;
  %1031 = log2(%1030) /* ty=Tensor[(3, 104), float32] */;
  %1032 = cast(%var_10892, dtype="int32") /* ty=Tensor[(3, 104), int32] */;
  %1033 = shape_of(%1031, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1034 = cast(%1031, dtype="int32") /* ty=Tensor[(3, 104), int32] */;
  %1035 = dyn.reshape(%1032, %1033, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %1036 = @func_8328() /* ty=(Tensor[(6, 52), float32],) */;
  %1037 = right_shift(%1034, %1035) /* ty=Tensor[(3, 104), int32] */;
  %1038 = %1036.0;
  (%1037, %1038)
}

def @func_3692() -> Tensor[(8, 14, 10), int8] {
  @func_2714() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_2320() -> (Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8]) {
  %1039 = @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %1040 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %1041 = %1039.1;
  %1042 = %1040.0;
  (%1041, %1042)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3950() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64]) {
  %0 = @func_3571() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %1 = @func_3789() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %2 = %1.0;
  %3 = cast(%2, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
  %4 = %0.0;
  %5 = acosh(%3) /* ty=Tensor[(6, 13, 4), float64] */;
  (%4, %5)
}

def @func_6641() -> (Tensor[(6, 13, 4), float64],) {
  %8 = fn () -> (Tensor[(6, 13, 4), float64],) {
    %6 = @func_3907() /* ty=(Tensor[(6, 13, 4), float64],) */;
    %7 = %6.0;
    (%7,)
  };
  %8() /* ty=(Tensor[(6, 13, 4), float64],) */
}

def @func_5064() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(312), float32]) {
  %15 = fn () -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(312), float32]) {
    %9 = @func_4997() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
    %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
    %11 = reshape(%10, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
    %12 = @func_1535(%11) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */;
    %13 = %9.0;
    %14 = %12.1;
    (%13, %14, meta[relay.Constant][0] /* ty=Tensor[(312), float32] */)
  };
  %15() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(312), float32]) */
}

def @func_10302(%var_10270: Tensor[(5, 8, 12), uint64]) -> (Tensor[(5, 8, 12), uint64], Tensor[(5, 8, 12), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 52), float32]) {
  %16 = cast(%var_10270, dtype="uint64") /* ty=Tensor[(5, 8, 12), uint64] */;
  %17 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(5, 8, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 8, 12), uint64] */, dtype="uint64") /* ty=Tensor[(5, 8, 12), uint64] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %20 = cast(%var_10270, dtype="float32") /* ty=Tensor[(5, 8, 12), float32] */;
  %21 = @func_4869() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(6, 13, 4), float64]) */;
  %22 = @func_6868() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 52), float32]) */;
  %23 = add(%18, %19) /* ty=Tensor[(5, 8, 12), uint64] */;
  %24 = erf(%20) /* ty=Tensor[(5, 8, 12), float32] */;
  %25 = %21.3;
  %26 = %22.3;
  (%23, %24, %25, %26)
}

def @func_7728() -> (Tensor[(6, 13, 4), float32],) {
  @func_7726() /* ty=(Tensor[(6, 13, 4), float32],) */
}

def @func_10691() -> Tensor[(4, 11, 16), float32] {
  @func_10689() /* ty=Tensor[(4, 11, 16), float32] */
}

def @func_7328(%var_7325: uint8, %var_7326: Tensor[(432), uint8], %var_7327: Tensor[(1092), float64]) -> (Tensor[(4, 11, 16), int32], Tensor[(1092), float64], uint8, Tensor[(432), uint8], Tensor[(1092), float64]) {
  @func_7323(%var_7325, %var_7326, %var_7327) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(1092), float64], uint8, Tensor[(432), uint8], Tensor[(1092), float64]) */
}

def @func_10712() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) {
  @func_10710() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */
}

def @func_3492() -> (Tensor[(312), float32], Tensor[(6, 52), float32], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), uint16]) {
  %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 52), float32] */, dtype="float32") /* ty=Tensor[(6, 52), float32] */;
  %28 = reshape(%27, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %29 = @func_2510(%28) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(312), float32], Tensor[(6, 13, 4), float32]) */;
  %30 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 52), float32] */, dtype="float32") /* ty=Tensor[(6, 52), float32] */;
  %31 = reshape(%30, newshape=[312]) /* ty=Tensor[(312), float32] */;
  %32 = @func_2510(%31) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(312), float32], Tensor[(6, 13, 4), float32]) */;
  %33 = @func_3463() /* ty=(Tensor[(8, 14, 10), float32],) */;
  %34 = %33.0;
  %35 = cast(%34, dtype="float64") /* ty=Tensor[(8, 14, 10), float64] */;
  %36 = atan(%35) /* ty=Tensor[(8, 14, 10), float64] */;
  %37 = cast(%34, dtype="uint16") /* ty=Tensor[(8, 14, 10), uint16] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%36, dtype="uint16") /* ty=Tensor[(8, 14, 10), uint16] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %41 = %29.1;
  %42 = %32.2;
  %43 = maximum(%39, %40) /* ty=Tensor[(8, 14, 10), uint16] */;
  (%41, meta[relay.Constant][2] /* ty=Tensor[(6, 52), float32] */, %42, %43)
}

def @func_9437(%var_9435: Tensor[(15, 14, 10), uint32], %var_9436: Tensor[(15, 14, 10), uint32]) -> Tensor[(15, 14, 10), bool] {
  %48 = fn (%var_9427: Tensor[(15, 14, 10), uint32], %var_9428: Tensor[(15, 14, 10), uint32]) -> Tensor[(15, 14, 10), bool] {
    %44 = cast(%var_9428, dtype="bool") /* ty=Tensor[(15, 14, 10), bool] */;
    %45 = shape_of(%var_9427, dtype="int32") /* ty=Tensor[(3), int32] */;
    %46 = cast(%var_9427, dtype="bool") /* ty=Tensor[(15, 14, 10), bool] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%46, %47) /* ty=Tensor[(15, 14, 10), bool] */
  };
  %48(%var_9435, %var_9436) /* ty=Tensor[(15, 14, 10), bool] */
}

def @func_9175() -> Tensor[(8, 14, 10), int8] {
  %49 = @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */;
  %49.0
}

def @func_7988() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int64], Tensor[(112), int8]) {
  %56 = fn () -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int64], Tensor[(112), int8]) {
    %50 = @func_4180() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float32]) */;
    %51 = @func_2587() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) */;
    %52 = @func_3359() /* ty=Tensor[(6, 13, 4), float64] */;
    %53 = %50.0;
    %54 = %51.2;
    %55 = @func_7189() /* ty=Tensor[(112), int8] */;
    (%52, %53, %54, %55)
  };
  %56() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int64], Tensor[(112), int8]) */
}

def @func_5812() -> (Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) {
  %63 = fn () -> (Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) {
    %57 = @func_3907() /* ty=(Tensor[(6, 13, 4), float64],) */;
    %58 = %57.0;
    %59 = cast(%58, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
    %60 = cast(%58, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
    %61 = asin(%59) /* ty=Tensor[(6, 13, 4), float32] */;
    %62 = acos(%60) /* ty=Tensor[(6, 13, 4), float32] */;
    (%61, %62)
  };
  %63() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */
}

def @func_4599() -> Tensor[(8, 14, 10), int8] {
  %65 = fn () -> Tensor[(8, 14, 10), int8] {
    %64 = @func_4316() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
    %64.2
  };
  %65() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_5436(%var_5434: uint8, %var_5435: Tensor[(546, 2), float64]) -> (Tensor[(8, 14, 10), float64], Tensor[(6, 13, 4), float64], Tensor[(1092), float64], uint8, Tensor[(4, 108), uint8], Tensor[(546, 2), float64], Tensor[(6, 13, 4), float64]) {
  @func_5432(%var_5434, %var_5435) /* ty=(Tensor[(8, 14, 10), float64], Tensor[(6, 13, 4), float64], Tensor[(1092), float64], uint8, Tensor[(4, 108), uint8], Tensor[(546, 2), float64], Tensor[(6, 13, 4), float64]) */
}

def @func_8185() -> (Tensor[(8, 14, 10), float64],) {
  %66 = @func_5341() /* ty=Tensor[(8, 14, 10), float64] */;
  (%66,)
}

def @func_6087() -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) {
  %71 = fn () -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) {
    %67 = @func_4997() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
    %68 = @func_3463() /* ty=(Tensor[(8, 14, 10), float32],) */;
    %69 = %67.1;
    %70 = %68.0;
    (%69, %70)
  };
  %71() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) */
}

def @func_4942() -> (Tensor[(8, 14, 10), int8],) {
  %72 = @func_2403() /* ty=(Tensor[(8, 14, 10), int8],) */;
  %73 = %72.0;
  (%73,)
}

def @func_4257() -> Tensor[(8, 14, 10), int8] {
  %74 = fn () -> Tensor[(8, 14, 10), int8] {
    @func_2714() /* ty=Tensor[(8, 14, 10), int8] */
  };
  %74() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_4944() -> (Tensor[(8, 14, 10), int8],) {
  @func_4942() /* ty=(Tensor[(8, 14, 10), int8],) */
}

def @func_2715() -> Tensor[(8, 14, 10), int8] {
  %75 = fn () -> Tensor[(8, 14, 10), int8] {
    @func_2361() /* ty=Tensor[(8, 14, 10), int8] */
  };
  %75() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_1535(%var_1530: Tensor[(1, 312), float32]) -> (Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) {
  %76 = @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %77 = cast(%var_1530, dtype="float32") /* ty=Tensor[(1, 312), float32] */;
  %78 = reshape(%77, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), float32] */;
  %79 = @func_1258(%78) /* ty=(Tensor[(6, 13, 4), float32],) */;
  %80 = %76.0;
  %81 = %79.0;
  (%80, %81, %var_1530)
}

def @main(%var_10980: Tensor[(3, 104), bool], %var_10986: Tensor[(495, 1), float64], %var_10988: Tensor[(495, 7), float64]) -> (Tensor[(3, 104), float64], Tensor[(11, 3, 15), float64], Tensor[(495, 7), float32]) {
  %82 = @func_10188() /* ty=(Tensor[(3, 104), bool],) */;
  %83 = %82.0;
  %84 = cast(%var_10980, dtype="float64") /* ty=Tensor[(3, 104), float64] */;
  %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(2), int32] */;
  %86 = cast(%83, dtype="float64") /* ty=Tensor[(3, 104), float64] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %88 = cast(%var_10986, dtype="float64") /* ty=Tensor[(495, 1), float64] */;
  %89 = reshape(%88, newshape=[11, 3, 15]) /* ty=Tensor[(11, 3, 15), float64] */;
  %90 = cast(%var_10986, dtype="float32") /* ty=Tensor[(495, 1), float32] */;
  %91 = cast(%var_10988, dtype="float32") /* ty=Tensor[(495, 7), float32] */;
  %92 = divide(%90, %91) /* ty=Tensor[(495, 7), float32] */;
  %93 = cast(%92, dtype="float32") /* ty=Tensor[(495, 7), float32] */;
  %94 = floor_divide(%86, %87) /* ty=Tensor[(3, 104), float64] */;
  %95 = @func_7843(%89) /* ty=Tensor[(11, 3, 15), float64] */;
  %96 = erf(%93) /* ty=Tensor[(495, 7), float32] */;
  (%94, %95, %96)
}

def @func_6558() -> Tensor[(8, 14, 10), int8] {
  %97 = @func_5648() /* ty=(Tensor[(8, 14, 10), float64], Tensor[(8, 14, 10), float32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %97.2
}

def @func_9294() -> (Tensor[(10, 11, 16), float32], Tensor[(6, 13, 4), float64]) {
  %104 = fn () -> (Tensor[(10, 11, 16), float32], Tensor[(6, 13, 4), float64]) {
    %98 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 11, 16), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 16), float32] */;
    %99 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(10, 11, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %100 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 11, 16), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 16), float32] */;
    %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %102 = floor_divide(%100, %101) /* ty=Tensor[(10, 11, 16), float32] */;
    %103 = @func_9156() /* ty=Tensor[(6, 13, 4), float64] */;
    (%102, %103)
  };
  %104() /* ty=(Tensor[(10, 11, 16), float32], Tensor[(6, 13, 4), float64]) */
}

def @func_4123(%var_4112: bool, %var_4113: Tensor[(14, 4, 8), bool]) -> Tensor[(14, 4, 8), bool] {
  %105 = cast(%var_4112, dtype="bool") /* ty=bool */;
  %106 = cast(%var_4113, dtype="bool") /* ty=Tensor[(14, 4, 8), bool] */;
  logical_or(%105, %106) /* ty=Tensor[(14, 4, 8), bool] */
}

def @func_9737() -> (Tensor[(8, 14, 10), float32],) {
  %107 = @func_5533() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) */;
  %108 = %107.1;
  (%108,)
}

def @func_10188() -> (Tensor[(3, 104), bool],) {
  %111 = fn () -> (Tensor[(3, 104), bool],) {
    %109 = @func_8428() /* ty=(Tensor[(112), int8], Tensor[(6, 13, 4), float64], Tensor[(3, 104), bool], Tensor[(6, 13, 4), float64]) */;
    %110 = %109.2;
    (%110,)
  };
  %111() /* ty=(Tensor[(3, 104), bool],) */
}

def @func_5432(%var_5404: uint8, %var_5406: Tensor[(546, 2), float64]) -> (Tensor[(8, 14, 10), float64], Tensor[(6, 13, 4), float64], Tensor[(1092), float64], uint8, Tensor[(4, 108), uint8], Tensor[(546, 2), float64], Tensor[(6, 13, 4), float64]) {
  %112 = @func_1912() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) */;
  %113 = cast(%var_5404, dtype="uint8") /* ty=uint8 */;
  %114 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 108), uint8] */, dtype="uint8") /* ty=Tensor[(4, 108), uint8] */;
  %115 = cast(%var_5406, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
  %116 = reshape(%113, newshape=[]) /* ty=uint8 */;
  %117 = reshape(%114, newshape=[12, 3, 12]) /* ty=Tensor[(12, 3, 12), uint8] */;
  %118 = reshape(%115, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %119 = @func_4927(%116, %117, %118) /* ty=(Tensor[(12, 3, 12), bool], Tensor[(12, 7, 13), float64], Tensor[(1092), float64]) */;
  %120 = @func_5063() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(312), float32]) */;
  %121 = %120.1;
  %122 = cast(%121, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
  %123 = @func_5013() /* ty=Tensor[(8, 14, 10), float64] */;
  %124 = %112.0;
  %125 = %119.2;
  %126 = sigmoid(%122) /* ty=Tensor[(6, 13, 4), float64] */;
  (%123, %124, %125, %var_5404, meta[relay.Constant][5] /* ty=Tensor[(4, 108), uint8] */, %var_5406, %126)
}

def @func_2362() -> Tensor[(8, 14, 10), int8] {
  %127 = fn () -> Tensor[(8, 14, 10), int8] {
    @func_2281() /* ty=Tensor[(8, 14, 10), int8] */
  };
  %127() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_8276() -> (Tensor[(6, 13, 4), float64], Tensor[(1, 312), float32]) {
  %128 = @func_3870() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %129 = %128.0;
  %130 = cast(%129, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %131 = reshape(%130, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
  %132 = @func_1535(%131) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */;
  %133 = %132.2;
  (%129, %133)
}

def @func_2403() -> (Tensor[(8, 14, 10), int8],) {
  %134 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %135 = %134.1;
  (%135,)
}

def @func_10710() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) {
  %136 = @func_5219() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1120), int8], Tensor[(6, 52), float32]) */;
  %137 = @func_4375() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */;
  %138 = %136.0;
  %139 = %137.1;
  (%138, %139)
}

def @func_7154(%var_7152: Tensor[(8, 14, 10), float32]) -> (Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(8, 14, 10), float32]) {
  @func_7151(%var_7152) /* ty=(Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(8, 14, 10), float32]) */
}

def @func_3214() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32]) {
  @func_3212() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32]) */
}

def @func_5499() -> Tensor[(9, 5, 10), float64] {
  %141 = fn () -> Tensor[(9, 5, 10), float64] {
    %140 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(9, 5, 10), float64] */;
    asinh(%140) /* ty=Tensor[(9, 5, 10), float64] */
  };
  %141() /* ty=Tensor[(9, 5, 10), float64] */
}

def @func_6285(%var_6282: Tensor[(182, 6), float64], %var_6283: Tensor[(12, 7, 13), float64], %var_6284: Tensor[(363), uint32]) -> (Tensor[(8, 14, 10), float64], Tensor[(182, 6), float64], Tensor[(12, 7, 13), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32], Tensor[(12, 7, 13), float32], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) {
  %165 = fn (%var_6217: Tensor[(182, 6), float64], %var_6256: Tensor[(12, 7, 13), float64], %var_6277: Tensor[(363), uint32]) -> (Tensor[(8, 14, 10), float64], Tensor[(182, 6), float64], Tensor[(12, 7, 13), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32], Tensor[(12, 7, 13), float32], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) {
    %142 = @func_5063() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(312), float32]) */;
    %143 = %142.0;
    %144 = cast(%143, dtype="float64") /* ty=Tensor[(8, 14, 10), float64] */;
    %145 = cast(%var_6217, dtype="float64") /* ty=Tensor[(182, 6), float64] */;
    %146 = reshape(%145, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
    %147 = @func_4031(%146) /* ty=Tensor[(12, 7, 13), float64] */;
    %148 = cast(%147, dtype="float64") /* ty=Tensor[(12, 7, 13), float64] */;
    %149 = reshape(%148, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
    %150 = @func_2587() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) */;
    %151 = @func_5533() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) */;
    %152 = cast(%var_6256, dtype="float32") /* ty=Tensor[(12, 7, 13), float32] */;
    %153 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
    %154 = cast(%147, dtype="float32") /* ty=Tensor[(12, 7, 13), float32] */;
    %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %156 = cast(%var_6277, dtype="uint32") /* ty=Tensor[(363), uint32] */;
    %157 = reshape(%156, newshape=[11, 3, 11]) /* ty=Tensor[(11, 3, 11), uint32] */;
    %158 = @func_1824(%157) /* ty=(Tensor[(11, 3, 11), uint32],) */;
    %159 = acos(%144) /* ty=Tensor[(8, 14, 10), float64] */;
    %160 = @func_4031(%149) /* ty=Tensor[(12, 7, 13), float64] */;
    %161 = %150.3;
    %162 = %151.1;
    %163 = floor_mod(%154, %155) /* ty=Tensor[(12, 7, 13), float32] */;
    %164 = %158.0;
    (%159, %var_6217, %160, %161, %162, %163, %164, %var_6277)
  };
  %165(%var_6282, %var_6283, %var_6284) /* ty=(Tensor[(8, 14, 10), float64], Tensor[(182, 6), float64], Tensor[(12, 7, 13), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32], Tensor[(12, 7, 13), float32], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) */
}

def @func_7391(%var_7389: uint8, %var_7390: Tensor[(1092), float64]) -> (Tensor[(8, 14, 10), float32], Tensor[(1092), float64], uint8, Tensor[(432), uint8], Tensor[(1092), float64]) {
  @func_7387(%var_7389, %var_7390) /* ty=(Tensor[(8, 14, 10), float32], Tensor[(1092), float64], uint8, Tensor[(432), uint8], Tensor[(1092), float64]) */
}

def @func_2321() -> (Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8]) {
  %170 = fn () -> (Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8]) {
    %166 = @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
    %167 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
    %168 = %166.1;
    %169 = %167.0;
    (%168, %169)
  };
  %170() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8]) */
}

def @func_10906(%var_10892: Tensor[(3, 104), float32]) -> (Tensor[(3, 104), int32], Tensor[(6, 52), float32]) {
  %171 = @func_10187() /* ty=(Tensor[(3, 104), bool],) */;
  %172 = %171.0;
  %173 = cast(%172, dtype="float32") /* ty=Tensor[(3, 104), float32] */;
  %174 = log2(%173) /* ty=Tensor[(3, 104), float32] */;
  %175 = cast(%var_10892, dtype="int32") /* ty=Tensor[(3, 104), int32] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(2), int32] */;
  %177 = cast(%174, dtype="int32") /* ty=Tensor[(3, 104), int32] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %179 = @func_8328() /* ty=(Tensor[(6, 52), float32],) */;
  %180 = right_shift(%177, %178) /* ty=Tensor[(3, 104), int32] */;
  %181 = %179.0;
  (%180, %181)
}

def @func_10748() -> (Tensor[(1350), int8], Tensor[(8, 14, 10), float32]) {
  %186 = fn () -> (Tensor[(1350), int8], Tensor[(8, 14, 10), float32]) {
    %182 = @func_10241() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(10, 15, 9), int8], Tensor[(1350), int8]) */;
    %183 = @func_6595() /* ty=(Tensor[(8, 14, 10), float32],) */;
    %184 = %182.3;
    %185 = %183.0;
    (%184, %185)
  };
  %186() /* ty=(Tensor[(1350), int8], Tensor[(8, 14, 10), float32]) */
}

def @func_2807(%var_2805: Tensor[(16, 14, 5), float32], %var_2806: Tensor[(16, 14, 5), float32]) -> Tensor[(16, 14, 5), float32] {
  %191 = fn (%var_2799: Tensor[(16, 14, 5), float32], %var_2800: Tensor[(16, 14, 5), float32]) -> Tensor[(16, 14, 5), float32] {
    %187 = cast(%var_2800, dtype="float32") /* ty=Tensor[(16, 14, 5), float32] */;
    %188 = shape_of(%var_2799, dtype="int32") /* ty=Tensor[(3), int32] */;
    %189 = cast(%var_2799, dtype="float32") /* ty=Tensor[(16, 14, 5), float32] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%189, %190) /* ty=Tensor[(16, 14, 5), float32] */
  };
  %191(%var_2805, %var_2806) /* ty=Tensor[(16, 14, 5), float32] */
}

def @func_7580(%var_7577: Tensor[(9, 15, 7), uint16], %var_7578: Tensor[(9, 15, 7), uint16], %var_7579: Tensor[(448), bool]) -> (Tensor[(9, 15, 7), uint16], Tensor[(8, 14, 10), int8], bool, Tensor[(448), bool]) {
  @func_7575(%var_7577, %var_7578, %var_7579) /* ty=(Tensor[(9, 15, 7), uint16], Tensor[(8, 14, 10), int8], bool, Tensor[(448), bool]) */
}

def @func_8916(%var_8910: Tensor[(8, 14, 10), int8]) -> (Tensor[(8, 14, 10), uint8],) {
  %192 = @func_2281() /* ty=Tensor[(8, 14, 10), int8] */;
  %193 = cast(%var_8910, dtype="uint8") /* ty=Tensor[(8, 14, 10), uint8] */;
  %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%192, dtype="uint8") /* ty=Tensor[(8, 14, 10), uint8] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %197 = subtract(%195, %196) /* ty=Tensor[(8, 14, 10), uint8] */;
  (%197,)
}

def @func_1914() -> (Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) {
  @func_1912() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) */
}

def @func_5013() -> Tensor[(8, 14, 10), float64] {
  %198 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %199 = %198.1;
  %200 = cast(%199, dtype="float64") /* ty=Tensor[(8, 14, 10), float64] */;
  erf(%200) /* ty=Tensor[(8, 14, 10), float64] */
}

def @func_9335() -> Tensor[(112), int8] {
  %201 = @func_5732() /* ty=(Tensor[(112), int8],) */;
  %201.0
}

def @func_10123(%var_10109: bool, %var_10110: Tensor[(56, 8), bool]) -> (Tensor[(6, 13, 4), float64], Tensor[(363), uint32], bool, Tensor[(56, 8), bool], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8]) {
  %202 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %203 = cast(%var_10109, dtype="bool") /* ty=bool */;
  %204 = cast(%var_10110, dtype="bool") /* ty=Tensor[(56, 8), bool] */;
  %205 = reshape(%203, newshape=[]) /* ty=bool */;
  %206 = reshape(%204, newshape=[448]) /* ty=Tensor[(448), bool] */;
  %207 = @func_6514(%205, %206) /* ty=(Tensor[(16, 14, 5), float32], Tensor[(1120, 1), float32], Tensor[(363), uint32], Tensor[(8, 14, 10), int8], Tensor[(14, 4, 8), bool], bool, Tensor[(448), bool], Tensor[(6, 13, 4), float32]) */;
  %208 = @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %209 = %202.0;
  %210 = %207.2;
  %211 = %208.1;
  %212 = @func_2361() /* ty=Tensor[(8, 14, 10), int8] */;
  (%209, %210, %var_10109, %var_10110, %211, %212)
}

def @func_4968() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  @func_4966() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */
}

def @func_9795(%var_9793: Tensor[(12, 14, 13), uint32], %var_9794: Tensor[(12, 14, 13), uint32]) -> (Tensor[(12, 14, 13), uint32], Tensor[(312), float32], Tensor[(12, 14, 13), float64], Tensor[(6, 13, 4), float32], Tensor[(1, 11, 8), float64]) {
  %226 = fn (%var_9762: Tensor[(12, 14, 13), uint32], %var_9763: Tensor[(12, 14, 13), uint32]) -> (Tensor[(12, 14, 13), uint32], Tensor[(312), float32], Tensor[(12, 14, 13), float64], Tensor[(6, 13, 4), float32], Tensor[(1, 11, 8), float64]) {
    %213 = cast(%var_9763, dtype="uint32") /* ty=Tensor[(12, 14, 13), uint32] */;
    %214 = shape_of(%var_9762, dtype="int32") /* ty=Tensor[(3), int32] */;
    %215 = cast(%var_9762, dtype="uint32") /* ty=Tensor[(12, 14, 13), uint32] */;
    %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %217 = @func_2297() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) */;
    %218 = cast(%var_9763, dtype="float64") /* ty=Tensor[(12, 14, 13), float64] */;
    %219 = @func_5309() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32]) */;
    %220 = @func_6399() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 11, 8), float64], float64, Tensor[(88), float64]) */;
    %221 = bitwise_and(%215, %216) /* ty=Tensor[(12, 14, 13), uint32] */;
    %222 = %217.2;
    %223 = erf(%218) /* ty=Tensor[(12, 14, 13), float64] */;
    %224 = %219.1;
    %225 = %220.1;
    (%221, %222, %223, %224, %225)
  };
  %226(%var_9793, %var_9794) /* ty=(Tensor[(12, 14, 13), uint32], Tensor[(312), float32], Tensor[(12, 14, 13), float64], Tensor[(6, 13, 4), float32], Tensor[(1, 11, 8), float64]) */
}

def @func_1709(%var_1707: Tensor[(6, 13, 4), float64]) -> (Tensor[(6, 13, 4), bool],) {
  @func_1706(%var_1707) /* ty=(Tensor[(6, 13, 4), bool],) */
}

def @func_10305(%var_10303: Tensor[(5, 8, 12), uint64]) -> (Tensor[(5, 8, 12), uint64], Tensor[(5, 8, 12), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 52), float32]) {
  @func_10302(%var_10303) /* ty=(Tensor[(5, 8, 12), uint64], Tensor[(5, 8, 12), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 52), float32]) */
}

def @func_5650() -> (Tensor[(8, 14, 10), float64], Tensor[(8, 14, 10), float32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) {
  @func_5648() /* ty=(Tensor[(8, 14, 10), float64], Tensor[(8, 14, 10), float32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */
}

def @func_5461(%var_5460: Tensor[(10, 1, 6), uint8]) -> (Tensor[(10, 1, 6), uint8],) {
  %230 = fn (%var_5439: Tensor[(10, 1, 6), uint8]) -> (Tensor[(10, 1, 6), uint8],) {
    %227 = cast(meta[relay.Constant][7] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %228 = cast(%var_5439, dtype="uint8") /* ty=Tensor[(10, 1, 6), uint8] */;
    %229 = bitwise_and(%227, %228) /* ty=Tensor[(10, 1, 6), uint8] */;
    (%229,)
  };
  %230(%var_5460) /* ty=(Tensor[(10, 1, 6), uint8],) */
}

def @func_6928() -> (Tensor[(8, 14, 10), int8],) {
  @func_6926() /* ty=(Tensor[(8, 14, 10), int8],) */
}

def @func_3143(%var_3075: Tensor[(15, 4, 5), float32], %var_3126: Tensor[(6, 52), float32], %var_3130: Tensor[(8, 14, 10), int8]) -> (Tensor[(15, 4, 5), uint16], Tensor[(4, 11, 16), int32], Tensor[(6, 52), float32], Tensor[(8, 14, 10), bool], Tensor[(8, 14, 10), int8]) {
  %231 = cast(%var_3075, dtype="float32") /* ty=Tensor[(15, 4, 5), float32] */;
  %232 = exp(%231) /* ty=Tensor[(15, 4, 5), float32] */;
  %233 = cast(%232, dtype="float32") /* ty=Tensor[(15, 4, 5), float32] */;
  %234 = shape_of(%var_3075, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%var_3075, dtype="float32") /* ty=Tensor[(15, 4, 5), float32] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %237 = minimum(%235, %236) /* ty=Tensor[(15, 4, 5), float32] */;
  %238 = cast(%237, dtype="float32") /* ty=Tensor[(15, 4, 5), float32] */;
  %239 = asinh(%238) /* ty=Tensor[(15, 4, 5), float32] */;
  %240 = cast(%232, dtype="uint16") /* ty=Tensor[(15, 4, 5), uint16] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="uint16") /* ty=Tensor[(15, 4, 5), uint16] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %244 = cast(%var_3126, dtype="float32") /* ty=Tensor[(6, 52), float32] */;
  %245 = reshape(%244, newshape=[312, 1]) /* ty=Tensor[(312, 1), float32] */;
  %246 = @func_1588(%245) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(312, 1), float32]) */;
  %247 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %248 = %247.1;
  %249 = cast(%var_3130, dtype="bool") /* ty=Tensor[(8, 14, 10), bool] */;
  %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%248, dtype="bool") /* ty=Tensor[(8, 14, 10), bool] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %253 = @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */;
  %254 = bitwise_and(%242, %243) /* ty=Tensor[(15, 4, 5), uint16] */;
  %255 = %246.1;
  %256 = less_equal(%251, %252) /* ty=Tensor[(8, 14, 10), bool] */;
  %257 = %253.0;
  (%254, %255, %var_3126, %256, %257)
}

def @func_4081(%var_4075: Tensor[(6, 12, 5), float32]) -> Tensor[(6, 12, 5), float32] {
  %258 = cast(%var_4075, dtype="float32") /* ty=Tensor[(6, 12, 5), float32] */;
  exp(%258) /* ty=Tensor[(6, 12, 5), float32] */
}

def @func_7214() -> (Tensor[(8, 10, 2), float64],) {
  @func_7212() /* ty=(Tensor[(8, 10, 2), float64],) */
}

def @func_4181() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float32]) {
  %268 = fn () -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float32]) {
    %259 = @func_3418() /* ty=Tensor[(6, 13, 4), float64] */;
    %260 = @func_3950() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64]) */;
    %261 = %260.1;
    %262 = cast(%261, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
    %263 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
    %264 = cast(%259, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
    %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %266 = mod(%264, %265) /* ty=Tensor[(6, 13, 4), float64] */;
    %267 = @func_2204() /* ty=Tensor[(6, 13, 4), float32] */;
    (%266, %267)
  };
  %268() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float32]) */
}

def @func_3418() -> Tensor[(6, 13, 4), float64] {
  @func_3359() /* ty=Tensor[(6, 13, 4), float64] */
}

def @func_3952() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64]) {
  @func_3950() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64]) */
}

def @func_9934() -> (Tensor[(8, 14, 10), int8],) {
  %270 = fn () -> (Tensor[(8, 14, 10), int8],) {
    %269 = @func_4598() /* ty=Tensor[(8, 14, 10), int8] */;
    (%269,)
  };
  %270() /* ty=(Tensor[(8, 14, 10), int8],) */
}

def @func_10869(%var_10867: Tensor[(10, 2, 5), float32]) -> (Tensor[(10, 2, 5), bool],) {
  @func_10866(%var_10867) /* ty=(Tensor[(10, 2, 5), bool],) */
}

def @func_2297() -> (Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) {
  %271 = cast(meta[relay.Constant][8] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %272 = reshape(%271, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
  %273 = @func_1535(%272) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */;
  %274 = @func_2281() /* ty=Tensor[(8, 14, 10), int8] */;
  %275 = %273.2;
  (%274, %275, meta[relay.Constant][8] /* ty=Tensor[(312), float32] */)
}

def @func_9267() -> Tensor[(8, 14, 10), int8] {
  @func_9265() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_7928(%var_7927: Tensor[(14, 16, 3), float32]) -> Tensor[(14, 16, 3), float32] {
  %277 = fn (%var_7923: Tensor[(14, 16, 3), float32]) -> Tensor[(14, 16, 3), float32] {
    %276 = cast(%var_7923, dtype="float32") /* ty=Tensor[(14, 16, 3), float32] */;
    sigmoid(%276) /* ty=Tensor[(14, 16, 3), float32] */
  };
  %277(%var_7927) /* ty=Tensor[(14, 16, 3), float32] */
}

def @func_10619() -> (Tensor[(1, 6, 15), float64],) {
  %280 = fn () -> (Tensor[(1, 6, 15), float64],) {
    %278 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 6, 15), float64] */, dtype="float64") /* ty=Tensor[(1, 6, 15), float64] */;
    %279 = atanh(%278) /* ty=Tensor[(1, 6, 15), float64] */;
    (%279,)
  };
  %280() /* ty=(Tensor[(1, 6, 15), float64],) */
}

def @func_310(%var_308: Tensor[(8, 14, 1), int8], %var_309: Tensor[(8, 14, 10), int8]) -> Tensor[(8, 14, 10), int8] {
  %283 = fn (%var_300: Tensor[(8, 14, 1), int8], %var_301: Tensor[(8, 14, 10), int8]) -> Tensor[(8, 14, 10), int8] {
    %281 = cast(%var_300, dtype="int8") /* ty=Tensor[(8, 14, 1), int8] */;
    %282 = cast(%var_301, dtype="int8") /* ty=Tensor[(8, 14, 10), int8] */;
    bitwise_xor(%281, %282) /* ty=Tensor[(8, 14, 10), int8] */
  };
  %283(%var_308, %var_309) /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_10569() -> (Tensor[(6, 13, 4), float64],) {
  %285 = fn () -> (Tensor[(6, 13, 4), float64],) {
    %284 = @func_3359() /* ty=Tensor[(6, 13, 4), float64] */;
    (%284,)
  };
  %285() /* ty=(Tensor[(6, 13, 4), float64],) */
}

def @func_10800() -> (Tensor[(4, 6, 3), float32],) {
  @func_10798() /* ty=(Tensor[(4, 6, 3), float32],) */
}

def @func_8429() -> (Tensor[(112), int8], Tensor[(6, 13, 4), float64], Tensor[(3, 104), bool], Tensor[(6, 13, 4), float64]) {
  %293 = fn () -> (Tensor[(112), int8], Tensor[(6, 13, 4), float64], Tensor[(3, 104), bool], Tensor[(6, 13, 4), float64]) {
    %286 = @func_3841() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), float64]) */;
    %287 = @func_3950() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64]) */;
    %288 = @func_4208() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(3, 104), bool]) */;
    %289 = %286.0;
    %290 = %287.0;
    %291 = %288.1;
    %292 = @func_7640() /* ty=Tensor[(6, 13, 4), float64] */;
    (%289, %290, %291, %292)
  };
  %293() /* ty=(Tensor[(112), int8], Tensor[(6, 13, 4), float64], Tensor[(3, 104), bool], Tensor[(6, 13, 4), float64]) */
}

def @func_8563() -> (Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32]) {
  %294 = @func_4208() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(3, 104), bool]) */;
  %295 = @func_4822() /* ty=(Tensor[(4, 11, 16), int32],) */;
  %296 = %294.0;
  %297 = %295.0;
  (%296, %297)
}

def @func_3909() -> (Tensor[(6, 13, 4), float64],) {
  @func_3907() /* ty=(Tensor[(6, 13, 4), float64],) */
}

def @func_4377() -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) {
  @func_4375() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */
}

def @func_10909(%var_10907: Tensor[(3, 104), float32]) -> (Tensor[(3, 104), int32], Tensor[(6, 52), float32]) {
  @func_10906(%var_10907) /* ty=(Tensor[(3, 104), int32], Tensor[(6, 52), float32]) */
}

def @func_4461() -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) {
  %314 = fn () -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) {
    %298 = @func_3789() /* ty=(Tensor[(6, 13, 4), float64],) */;
    %299 = @func_2297() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) */;
    %300 = cast(meta[relay.Constant][10] /* ty=Tensor[(363), uint32] */, dtype="uint32") /* ty=Tensor[(363), uint32] */;
    %301 = reshape(%300, newshape=[363]) /* ty=Tensor[(363), uint32] */;
    %302 = @func_1964(%301) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) */;
    %303 = %302.0;
    %304 = cast(%303, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
    %305 = reshape(%304, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
    %306 = @func_1535(%305) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */;
    %307 = @func_3571() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
    %308 = %298.0;
    %309 = %299.0;
    %310 = @func_2281() /* ty=Tensor[(8, 14, 10), int8] */;
    %311 = %306.1;
    %312 = %307.0;
    %313 = @func_2714() /* ty=Tensor[(8, 14, 10), int8] */;
    (%308, %309, %310, %303, meta[relay.Constant][10] /* ty=Tensor[(363), uint32] */, %311, %312, %313)
  };
  %314() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */
}

def @func_8212() -> Tensor[(6, 13, 4), float32] {
  @func_8210() /* ty=Tensor[(6, 13, 4), float32] */
}

def @func_9969() -> (Tensor[(8, 14, 10), float32], Tensor[(6, 13, 4), float32]) {
  %318 = fn () -> (Tensor[(8, 14, 10), float32], Tensor[(6, 13, 4), float32]) {
    %315 = @func_9600() /* ty=(Tensor[(8, 14, 10), float32],) */;
    %316 = %315.0;
    %317 = @func_8210() /* ty=Tensor[(6, 13, 4), float32] */;
    (%316, %317)
  };
  %318() /* ty=(Tensor[(8, 14, 10), float32], Tensor[(6, 13, 4), float32]) */
}

def @func_10597() -> (Tensor[(6, 13, 4), float64],) {
  %319 = @func_6086() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) */;
  %320 = %319.0;
  (%320,)
}

def @func_6560() -> Tensor[(8, 14, 10), int8] {
  @func_6558() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_8499(%var_8454: Tensor[(363), uint32]) -> (Tensor[(11, 3, 11), uint32], Tensor[(363), uint32], Tensor[(192), uint64], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), int16]) {
  %321 = cast(%var_8454, dtype="uint32") /* ty=Tensor[(363), uint32] */;
  %322 = reshape(%321, newshape=[363]) /* ty=Tensor[(363), uint32] */;
  %323 = @func_1964(%322) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) */;
  %324 = @func_3212() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32]) */;
  %325 = cast(meta[relay.Constant][11] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %326 = reshape(%325, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), uint64] */;
  %327 = @func_6742(%326) /* ty=(Tensor[(2, 8, 12), bool], Tensor[(6, 13, 4), float32]) */;
  %328 = %327.1;
  %329 = @func_1912() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) */;
  %330 = %329.0;
  %331 = cast(%330, dtype="int16") /* ty=Tensor[(6, 13, 4), int16] */;
  %332 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%328, dtype="int16") /* ty=Tensor[(6, 13, 4), int16] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %335 = %323.1;
  %336 = %324.0;
  %337 = @func_8071() /* ty=Tensor[(6, 13, 4), float64] */;
  %338 = bitwise_or(%333, %334) /* ty=Tensor[(6, 13, 4), int16] */;
  (%335, %var_8454, meta[relay.Constant][11] /* ty=Tensor[(192), uint64] */, %336, %337, %338)
}

def @func_6401() -> (Tensor[(8, 14, 10), int8], Tensor[(1, 11, 8), float64], float64, Tensor[(88), float64]) {
  @func_6399() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 11, 8), float64], float64, Tensor[(88), float64]) */
}

def @func_6542() -> Tensor[(112), int8] {
  %340 = fn () -> Tensor[(112), int8] {
    %339 = @func_5732() /* ty=(Tensor[(112), int8],) */;
    %339.0
  };
  %340() /* ty=Tensor[(112), int8] */
}

def @func_4209() -> (Tensor[(6, 13, 4), float64], Tensor[(3, 104), bool]) {
  %349 = fn () -> (Tensor[(6, 13, 4), float64], Tensor[(3, 104), bool]) {
    %341 = @func_3950() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64]) */;
    %342 = %341.1;
    %343 = cast(%342, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
    %344 = cast(%342, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
    %345 = reshape(%343, newshape=[3, 104]) /* ty=Tensor[(3, 104), float64] */;
    %346 = reshape(%344, newshape=[3, 104]) /* ty=Tensor[(3, 104), float64] */;
    %347 = @func_3335(%345, %346) /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(3, 104), float32], Tensor[(3, 104), bool], Tensor[(312), float32]) */;
    %348 = %347.3;
    (%342, %348)
  };
  %349() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(3, 104), bool]) */
}

def @func_6170(%var_6168: float64) -> (Tensor[(8, 14, 10), int8], Tensor[(1, 9, 11), float64], Tensor[(6, 13, 4), float64], Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  @func_6167(%var_6168) /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 9, 11), float64], Tensor[(6, 13, 4), float64], Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */
}

def @func_7151(%var_7113: Tensor[(8, 14, 10), float32]) -> (Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(8, 14, 10), float32]) {
  %350 = @func_3212() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32]) */;
  %351 = %350.1;
  %352 = cast(%var_7113, dtype="int8") /* ty=Tensor[(8, 14, 10), int8] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="int8") /* ty=Tensor[(8, 14, 10), int8] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %356 = cast(%351, dtype="float32") /* ty=Tensor[(8, 14, 10), float32] */;
  %357 = logical_xor(%354, %355) /* ty=Tensor[(8, 14, 10), int8] */;
  %358 = @func_6541() /* ty=Tensor[(112), int8] */;
  %359 = sigmoid(%356) /* ty=Tensor[(8, 14, 10), float32] */;
  (%357, %358, %359)
}

def @func_2080(%var_2062: Tensor[(112), int8], %var_2063: Tensor[(1120), int8]) -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8], Tensor[(6, 13, 4), float64]) {
  %360 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %361 = cast(%var_2062, dtype="int8") /* ty=Tensor[(112), int8] */;
  %362 = cast(%var_2063, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %363 = reshape(%361, newshape=[8, 14, 1]) /* ty=Tensor[(8, 14, 1), int8] */;
  %364 = reshape(%362, newshape=[8, 14, 10]) /* ty=Tensor[(8, 14, 10), int8] */;
  %365 = @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %366 = %360.0;
  %367 = @func_307(%363, %364) /* ty=Tensor[(8, 14, 10), int8] */;
  %368 = %365.0;
  (%366, %367, %var_2062, %var_2063, %368)
}

def @func_1967(%var_1965: Tensor[(363), uint32]) -> (Tensor[(6, 13, 4), float64], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) {
  @func_1964(%var_1965) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) */
}

def @func_9759() -> Tensor[(8, 14, 10), int8] {
  @func_9265() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_5710(%var_5702: float64, %var_5703: Tensor[(1, 11, 8), float64]) -> (Tensor[(1, 11, 8), float64], Tensor[(4, 11, 16), int32]) {
  %369 = cast(%var_5702, dtype="float64") /* ty=float64 */;
  %370 = cast(%var_5703, dtype="float64") /* ty=Tensor[(1, 11, 8), float64] */;
  %371 = @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */;
  %372 = floor_mod(%369, %370) /* ty=Tensor[(1, 11, 8), float64] */;
  %373 = %371.4;
  (%372, %373)
}

def @func_5820() -> (Tensor[(6, 13, 4), float64],) {
  %374 = @func_4869() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(6, 13, 4), float64]) */;
  %375 = %374.3;
  (%375,)
}

def @func_3981(%var_3979: Tensor[(363), uint32]) -> (Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(363), uint32]) {
  @func_3978(%var_3979) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(363), uint32]) */
}

def @func_8145(%var_8142: Tensor[(2, 12, 12), uint16], %var_8143: Tensor[(2, 56), int8], %var_8144: Tensor[(300), float32]) -> (Tensor[(2, 12, 12), uint16], Tensor[(6, 52), float32], Tensor[(1120), int8], Tensor[(6, 13, 4), float64], Tensor[(2, 56), int8], Tensor[(78, 4), float32], Tensor[(300), float32]) {
  @func_8140(%var_8142, %var_8143, %var_8144) /* ty=(Tensor[(2, 12, 12), uint16], Tensor[(6, 52), float32], Tensor[(1120), int8], Tensor[(6, 13, 4), float64], Tensor[(2, 56), int8], Tensor[(78, 4), float32], Tensor[(300), float32]) */
}

def @func_8873() -> (Tensor[(8, 14, 10), int8], Tensor[(448), bool], Tensor[(945), uint16], Tensor[(448), bool]) {
  @func_8871() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(448), bool], Tensor[(945), uint16], Tensor[(448), bool]) */
}

def @func_6596() -> (Tensor[(8, 14, 10), float32],) {
  %379 = fn () -> (Tensor[(8, 14, 10), float32],) {
    %376 = @func_4256() /* ty=Tensor[(8, 14, 10), int8] */;
    %377 = cast(%376, dtype="float32") /* ty=Tensor[(8, 14, 10), float32] */;
    %378 = cosh(%377) /* ty=Tensor[(8, 14, 10), float32] */;
    (%378,)
  };
  %379() /* ty=(Tensor[(8, 14, 10), float32],) */
}

def @func_2281() -> Tensor[(8, 14, 10), int8] {
  %380 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %380.1
}

def @func_8919(%var_8917: Tensor[(8, 14, 10), int8]) -> (Tensor[(8, 14, 10), uint8],) {
  @func_8916(%var_8917) /* ty=(Tensor[(8, 14, 10), uint8],) */
}

def @func_9865(%var_9864: Tensor[(88), float64]) -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(88), float64], Tensor[(1, 11, 8), int8]) {
  %396 = fn (%var_9837: Tensor[(88), float64]) -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(88), float64], Tensor[(1, 11, 8), int8]) {
    %381 = @func_3047() /* ty=(Tensor[(8, 14, 10), int8],) */;
    %382 = @func_4460() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */;
    %383 = @func_4460() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */;
    %384 = cast(-2.28531f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %385 = cast(%var_9837, dtype="float64") /* ty=Tensor[(88), float64] */;
    %386 = reshape(%384, newshape=[]) /* ty=float64 */;
    %387 = reshape(%385, newshape=[1, 11, 8]) /* ty=Tensor[(1, 11, 8), float64] */;
    %388 = @func_5710(%386, %387) /* ty=(Tensor[(1, 11, 8), float64], Tensor[(4, 11, 16), int32]) */;
    %389 = %388.0;
    %390 = cast(%389, dtype="int8") /* ty=Tensor[(1, 11, 8), int8] */;
    %391 = cast(-2.28531f64 /* ty=float64 */, dtype="int8") /* ty=int8 */;
    %392 = %381.0;
    %393 = %382.3;
    %394 = %383.7;
    %395 = bitwise_xor(%390, %391) /* ty=Tensor[(1, 11, 8), int8] */;
    (%392, %393, %394, %var_9837, %395)
  };
  %396(%var_9864) /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(88), float64], Tensor[(1, 11, 8), int8]) */
}

def @func_10463(%var_10447: Tensor[(792), int32]) -> (Tensor[(6, 13, 4), float64], Tensor[(2, 8, 12), bool], Tensor[(192), uint64], Tensor[(6, 13, 4), float64], Tensor[(56, 2), int8], Tensor[(6, 12, 11), int32], int32, Tensor[(792), int32], Tensor[(6, 13, 4), float64]) {
  %397 = cast(meta[relay.Constant][12] /* ty=Tensor[(192), uint64] */, dtype="uint64") /* ty=Tensor[(192), uint64] */;
  %398 = reshape(%397, newshape=[2, 8, 12]) /* ty=Tensor[(2, 8, 12), uint64] */;
  %399 = @func_6742(%398) /* ty=(Tensor[(2, 8, 12), bool], Tensor[(6, 13, 4), float32]) */;
  %400 = @func_7098() /* ty=(Tensor[(112), int8], Tensor[(6, 13, 4), float64]) */;
  %401 = @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */;
  %402 = cast(3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %403 = cast(%var_10447, dtype="int32") /* ty=Tensor[(792), int32] */;
  %404 = reshape(%402, newshape=[]) /* ty=int32 */;
  %405 = reshape(%403, newshape=[6, 12, 11]) /* ty=Tensor[(6, 12, 11), int32] */;
  %406 = @func_10140(%404, %405) /* ty=(Tensor[(6, 12, 11), int32],) */;
  %407 = @func_7640() /* ty=Tensor[(6, 13, 4), float64] */;
  %408 = %399.0;
  %409 = %400.1;
  %410 = %401.3;
  %411 = %406.0;
  %412 = @func_9593() /* ty=Tensor[(6, 13, 4), float64] */;
  (%407, %408, meta[relay.Constant][12] /* ty=Tensor[(192), uint64] */, %409, %410, %411, 3 /* ty=int32 */, %var_10447, %412)
}

def @func_3907() -> (Tensor[(6, 13, 4), float64],) {
  %413 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %414 = %413.0;
  (%414,)
}

def @func_7001() -> (Tensor[(8, 14, 10), float32],) {
  %417 = fn () -> (Tensor[(8, 14, 10), float32],) {
    %415 = @func_3212() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32]) */;
    %416 = %415.1;
    (%416,)
  };
  %417() /* ty=(Tensor[(8, 14, 10), float32],) */
}

def @func_9593() -> Tensor[(6, 13, 4), float64] {
  %418 = @func_8276() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(1, 312), float32]) */;
  %418.0
}

def @func_2163() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  %425 = fn () -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
    %419 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
    %420 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
    %421 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
    %422 = %419.1;
    %423 = %420.1;
    %424 = %421.0;
    (%422, %423, %424)
  };
  %425() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */
}

def @func_8330() -> (Tensor[(6, 52), float32],) {
  @func_8328() /* ty=(Tensor[(6, 52), float32],) */
}

def @func_7640() -> Tensor[(6, 13, 4), float64] {
  %426 = @func_3907() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %426.0
}

def @func_9031() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  @func_9029() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */
}

def @func_10798() -> (Tensor[(4, 6, 3), float32],) {
  %427 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 6, 3), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 3), float32] */;
  %428 = atan(%427) /* ty=Tensor[(4, 6, 3), float32] */;
  (%428,)
}

def @func_7323(%var_7316: uint8, %var_7317: Tensor[(432), uint8], %var_7318: Tensor[(1092), float64]) -> (Tensor[(4, 11, 16), int32], Tensor[(1092), float64], uint8, Tensor[(432), uint8], Tensor[(1092), float64]) {
  %429 = @func_4822() /* ty=(Tensor[(4, 11, 16), int32],) */;
  %430 = cast(%var_7316, dtype="uint8") /* ty=uint8 */;
  %431 = cast(%var_7317, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %432 = cast(%var_7318, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %433 = reshape(%430, newshape=[]) /* ty=uint8 */;
  %434 = reshape(%431, newshape=[12, 3, 12]) /* ty=Tensor[(12, 3, 12), uint8] */;
  %435 = reshape(%432, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %436 = @func_4927(%433, %434, %435) /* ty=(Tensor[(12, 3, 12), bool], Tensor[(12, 7, 13), float64], Tensor[(1092), float64]) */;
  %437 = %429.0;
  %438 = %436.2;
  (%437, %438, %var_7316, %var_7317, %var_7318)
}

def @func_1557() -> (Tensor[(6, 13, 4), float64],) {
  %443 = fn () -> (Tensor[(6, 13, 4), float64],) {
    %439 = @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
    %440 = %439.3;
    %441 = cast(%440, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
    %442 = atan(%441) /* ty=Tensor[(6, 13, 4), float64] */;
    (%442,)
  };
  %443() /* ty=(Tensor[(6, 13, 4), float64],) */
}

def @func_9337() -> Tensor[(112), int8] {
  @func_9335() /* ty=Tensor[(112), int8] */
}

def @func_9924() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  %444 = @func_2587() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) */;
  %445 = @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %446 = %444.1;
  %447 = %445.0;
  (%446, %447)
}

def @func_2084(%var_2082: Tensor[(112), int8], %var_2083: Tensor[(1120), int8]) -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8], Tensor[(6, 13, 4), float64]) {
  @func_2080(%var_2082, %var_2083) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8], Tensor[(6, 13, 4), float64]) */
}

def @func_7843(%var_7835: Tensor[(11, 3, 15), float64]) -> Tensor[(11, 3, 15), float64] {
  %448 = cast(%var_7835, dtype="float64") /* ty=Tensor[(11, 3, 15), float64] */;
  sqrt(%448) /* ty=Tensor[(11, 3, 15), float64] */
}

def @func_9156() -> Tensor[(6, 13, 4), float64] {
  %449 = @func_5533() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) */;
  %449.0
}

def @func_3842() -> (Tensor[(112), int8], Tensor[(8, 14, 10), float64]) {
  %459 = fn () -> (Tensor[(112), int8], Tensor[(8, 14, 10), float64]) {
    %450 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
    %451 = @func_3047() /* ty=(Tensor[(8, 14, 10), int8],) */;
    %452 = %451.0;
    %453 = cast(meta[relay.Constant][14] /* ty=Tensor[(8, 14, 10), int8] */, dtype="float64") /* ty=Tensor[(8, 14, 10), float64] */;
    %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
    %455 = cast(%452, dtype="float64") /* ty=Tensor[(8, 14, 10), float64] */;
    %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %457 = %450.2;
    %458 = minimum(%455, %456) /* ty=Tensor[(8, 14, 10), float64] */;
    (%457, %458)
  };
  %459() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), float64]) */
}

def @func_5560() -> (Tensor[(6, 13, 4), float32],) {
  %462 = fn () -> (Tensor[(6, 13, 4), float32],) {
    %460 = @func_5309() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32]) */;
    %461 = %460.1;
    (%461,)
  };
  %462() /* ty=(Tensor[(6, 13, 4), float32],) */
}

def @func_8624() -> (Tensor[(6, 13, 4), float64],) {
  @func_8622() /* ty=(Tensor[(6, 13, 4), float64],) */
}

def @func_8823(%var_8821: Tensor[(780), float64]) -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], float64, Tensor[(312, 1), float32], Tensor[(780), float64]) {
  @func_8820(%var_8821) /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], float64, Tensor[(312, 1), float32], Tensor[(780), float64]) */
}

def @func_8994(%var_8972: Tensor[(4, 28), int8], %var_8973: Tensor[(8, 140), int8]) -> (Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(4, 28), int8], Tensor[(8, 140), int8], Tensor[(312, 1), float32], Tensor[(780), float64], Tensor[(8, 10, 2), float64]) {
  %463 = @func_5811() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %464 = cast(%var_8972, dtype="int8") /* ty=Tensor[(4, 28), int8] */;
  %465 = cast(%var_8973, dtype="int8") /* ty=Tensor[(8, 140), int8] */;
  %466 = reshape(%464, newshape=[112]) /* ty=Tensor[(112), int8] */;
  %467 = reshape(%465, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %468 = @func_2080(%466, %467) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8], Tensor[(6, 13, 4), float64]) */;
  %469 = cast(meta[relay.Constant][15] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %470 = reshape(%469, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %471 = @func_8820(%470) /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], float64, Tensor[(312, 1), float32], Tensor[(780), float64]) */;
  %472 = @func_7212() /* ty=(Tensor[(8, 10, 2), float64],) */;
  %473 = %463.0;
  %474 = %468.4;
  %475 = %471.3;
  %476 = %472.0;
  (%473, %474, %var_8972, %var_8973, %475, meta[relay.Constant][15] /* ty=Tensor[(780), float64] */, %476)
}

def @func_4127(%var_4125: bool, %var_4126: Tensor[(14, 4, 8), bool]) -> Tensor[(14, 4, 8), bool] {
  @func_4123(%var_4125, %var_4126) /* ty=Tensor[(14, 4, 8), bool] */
}

def @func_8502(%var_8500: Tensor[(363), uint32]) -> (Tensor[(11, 3, 11), uint32], Tensor[(363), uint32], Tensor[(192), uint64], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), int16]) {
  @func_8499(%var_8500) /* ty=(Tensor[(11, 3, 11), uint32], Tensor[(363), uint32], Tensor[(192), uint64], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), int16]) */
}

def @func_2510(%var_2477: Tensor[(312), float32]) -> (Tensor[(4, 11, 16), int32], Tensor[(312), float32], Tensor[(6, 13, 4), float32]) {
  %477 = @func_2297() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) */;
  %478 = %477.2;
  %479 = cast(%478, dtype="float32") /* ty=Tensor[(312), float32] */;
  %480 = reshape(%479, newshape=[312, 1]) /* ty=Tensor[(312, 1), float32] */;
  %481 = @func_1588(%480) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(312, 1), float32]) */;
  %482 = cast(%var_2477, dtype="float32") /* ty=Tensor[(312), float32] */;
  %483 = shape_of(%478, dtype="int32") /* ty=Tensor[(1), int32] */;
  %484 = cast(%478, dtype="float32") /* ty=Tensor[(312), float32] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?), float32] */;
  %486 = mod(%484, %485) /* ty=Tensor[(312), float32] */;
  %487 = cast(%486, dtype="float32") /* ty=Tensor[(312), float32] */;
  %488 = reshape(%487, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), float32] */;
  %489 = @func_1258(%488) /* ty=(Tensor[(6, 13, 4), float32],) */;
  %490 = %481.1;
  %491 = %489.0;
  (%490, %486, %491)
}

def @func_7027(%var_7025: Tensor[(7, 7, 1), int64], %var_7026: Tensor[(7, 7, 8), int64]) -> (Tensor[(7, 7, 8), int64], Tensor[(16, 14, 5), float32], Tensor[(1120), float32], Tensor[(7, 7, 8), int32]) {
  %503 = fn (%var_7002: Tensor[(7, 7, 1), int64], %var_7003: Tensor[(7, 7, 8), int64]) -> (Tensor[(7, 7, 8), int64], Tensor[(16, 14, 5), float32], Tensor[(1120), float32], Tensor[(7, 7, 8), int32]) {
    %492 = cast(%var_7002, dtype="int64") /* ty=Tensor[(7, 7, 1), int64] */;
    %493 = cast(%var_7003, dtype="int64") /* ty=Tensor[(7, 7, 8), int64] */;
    %494 = cast(meta[relay.Constant][16] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %495 = cast(meta[relay.Constant][16] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %496 = reshape(%494, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
    %497 = reshape(%495, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
    %498 = cast(%var_7003, dtype="int32") /* ty=Tensor[(7, 7, 8), int32] */;
    %499 = cast(%var_7002, dtype="int32") /* ty=Tensor[(7, 7, 1), int32] */;
    %500 = logical_xor(%492, %493) /* ty=Tensor[(7, 7, 8), int64] */;
    %501 = @func_2804(%496, %497) /* ty=Tensor[(16, 14, 5), float32] */;
    %502 = left_shift(%498, %499) /* ty=Tensor[(7, 7, 8), int32] */;
    (%500, %501, meta[relay.Constant][16] /* ty=Tensor[(1120), float32] */, %502)
  };
  %503(%var_7025, %var_7026) /* ty=(Tensor[(7, 7, 8), int64], Tensor[(16, 14, 5), float32], Tensor[(1120), float32], Tensor[(7, 7, 8), int32]) */
}

def @func_8820(%var_8802: Tensor[(780), float64]) -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], float64, Tensor[(312, 1), float32], Tensor[(780), float64]) {
  %504 = @func_7075() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) */;
  %505 = cast(7.36557f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %506 = reshape(%505, newshape=[]) /* ty=float64 */;
  %507 = @func_6167(%506) /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 9, 11), float64], Tensor[(6, 13, 4), float64], Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %508 = cast(%var_8802, dtype="float64") /* ty=Tensor[(780), float64] */;
  %509 = reshape(%508, newshape=[5, 13, 12]) /* ty=Tensor[(5, 13, 12), float64] */;
  %510 = @func_3536(%509) /* ty=(Tensor[(5, 13, 12), bool], Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(5, 13, 12), float64], Tensor[(312, 1), float32]) */;
  %511 = %504.0;
  %512 = %507.5;
  %513 = %510.4;
  (%511, %512, 7.36557f64 /* ty=float64 */, %513, %var_8802)
}

def @func_7575(%var_7561: Tensor[(9, 15, 7), uint16], %var_7562: Tensor[(9, 15, 7), uint16], %var_7569: Tensor[(448), bool]) -> (Tensor[(9, 15, 7), uint16], Tensor[(8, 14, 10), int8], bool, Tensor[(448), bool]) {
  %514 = cast(%var_7562, dtype="uint16") /* ty=Tensor[(9, 15, 7), uint16] */;
  %515 = shape_of(%var_7561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%var_7561, dtype="uint16") /* ty=Tensor[(9, 15, 7), uint16] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %518 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %519 = cast(%var_7569, dtype="bool") /* ty=Tensor[(448), bool] */;
  %520 = reshape(%518, newshape=[]) /* ty=bool */;
  %521 = reshape(%519, newshape=[448]) /* ty=Tensor[(448), bool] */;
  %522 = @func_6514(%520, %521) /* ty=(Tensor[(16, 14, 5), float32], Tensor[(1120, 1), float32], Tensor[(363), uint32], Tensor[(8, 14, 10), int8], Tensor[(14, 4, 8), bool], bool, Tensor[(448), bool], Tensor[(6, 13, 4), float32]) */;
  %523 = left_shift(%516, %517) /* ty=Tensor[(9, 15, 7), uint16] */;
  %524 = %522.3;
  (%523, %524, True /* ty=bool */, %var_7569)
}

def @func_8140(%var_8086: Tensor[(2, 12, 12), uint16], %var_8102: Tensor[(2, 56), int8], %var_8134: Tensor[(300), float32]) -> (Tensor[(2, 12, 12), uint16], Tensor[(6, 52), float32], Tensor[(1120), int8], Tensor[(6, 13, 4), float64], Tensor[(2, 56), int8], Tensor[(78, 4), float32], Tensor[(300), float32]) {
  %525 = cast(%var_8086, dtype="uint16") /* ty=Tensor[(2, 12, 12), uint16] */;
  %526 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(2, 12, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 12, 12), uint16] */, dtype="uint16") /* ty=Tensor[(2, 12, 12), uint16] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %529 = cast(meta[relay.Constant][18] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %530 = cast(meta[relay.Constant][19] /* ty=Tensor[(78, 4), float32] */, dtype="float32") /* ty=Tensor[(78, 4), float32] */;
  %531 = cast(meta[relay.Constant][20] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %532 = reshape(%529, newshape=[15, 4, 5]) /* ty=Tensor[(15, 4, 5), float32] */;
  %533 = reshape(%530, newshape=[6, 52]) /* ty=Tensor[(6, 52), float32] */;
  %534 = reshape(%531, newshape=[8, 14, 10]) /* ty=Tensor[(8, 14, 10), int8] */;
  %535 = @func_3143(%532, %533, %534) /* ty=(Tensor[(15, 4, 5), uint16], Tensor[(4, 11, 16), int32], Tensor[(6, 52), float32], Tensor[(8, 14, 10), bool], Tensor[(8, 14, 10), int8]) */;
  %536 = cast(%var_8102, dtype="int8") /* ty=Tensor[(2, 56), int8] */;
  %537 = cast(meta[relay.Constant][20] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %538 = reshape(%536, newshape=[112]) /* ty=Tensor[(112), int8] */;
  %539 = reshape(%537, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %540 = @func_2080(%538, %539) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8], Tensor[(6, 13, 4), float64]) */;
  %541 = cast(meta[relay.Constant][19] /* ty=Tensor[(78, 4), float32] */, dtype="float32") /* ty=Tensor[(78, 4), float32] */;
  %542 = cast(%var_8134, dtype="float32") /* ty=Tensor[(300), float32] */;
  %543 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(300), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %544 = cast(meta[relay.Constant][18] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?), float32] */;
  %546 = minimum(%527, %528) /* ty=Tensor[(2, 12, 12), uint16] */;
  %547 = %535.2;
  %548 = %540.4;
  %549 = erf(%541) /* ty=Tensor[(78, 4), float32] */;
  %550 = floor_mod(%544, %545) /* ty=Tensor[(300), float32] */;
  (%546, %547, meta[relay.Constant][20] /* ty=Tensor[(1120), int8] */, %548, %var_8102, %549, %550)
}

def @func_6926() -> (Tensor[(8, 14, 10), int8],) {
  %551 = @func_4460() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */;
  %552 = %551.7;
  (%552,)
}

def @func_1490() -> (Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) {
  @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */
}

def @func_10958() -> Tensor[(1, 312), float32] {
  %554 = fn () -> Tensor[(1, 312), float32] {
    %553 = @func_8276() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(1, 312), float32]) */;
    %553.1
  };
  %554() /* ty=Tensor[(1, 312), float32] */
}

def @func_1590(%var_1589: Tensor[(312, 1), float32]) -> (Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(312, 1), float32]) {
  %561 = fn (%var_1585: Tensor[(312, 1), float32]) -> (Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(312, 1), float32]) {
    %555 = @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
    %556 = cast(%var_1585, dtype="float32") /* ty=Tensor[(312, 1), float32] */;
    %557 = reshape(%556, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
    %558 = @func_1535(%557) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */;
    %559 = %555.0;
    %560 = %558.0;
    (%559, %560, %var_1585)
  };
  %561(%var_1589) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(312, 1), float32]) */
}

def @func_6744(%var_6743: Tensor[(2, 8, 12), uint64]) -> (Tensor[(2, 8, 12), bool], Tensor[(6, 13, 4), float32]) {
  %569 = fn (%var_6681: Tensor[(2, 8, 12), uint64]) -> (Tensor[(2, 8, 12), bool], Tensor[(6, 13, 4), float32]) {
    %562 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 8, 12), uint64] */, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
    %563 = shape_of(%var_6681, dtype="int32") /* ty=Tensor[(3), int32] */;
    %564 = cast(%var_6681, dtype="bool") /* ty=Tensor[(2, 8, 12), bool] */;
    %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %566 = @func_5309() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32]) */;
    %567 = less_equal(%564, %565) /* ty=Tensor[(2, 8, 12), bool] */;
    %568 = %566.1;
    (%567, %568)
  };
  %569(%var_6743) /* ty=(Tensor[(2, 8, 12), bool], Tensor[(6, 13, 4), float32]) */
}

def @func_6399() -> (Tensor[(8, 14, 10), int8], Tensor[(1, 11, 8), float64], float64, Tensor[(88), float64]) {
  %570 = @func_2297() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) */;
  %571 = cast(6.38723f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %572 = cast(meta[relay.Constant][22] /* ty=Tensor[(88), float64] */, dtype="float64") /* ty=Tensor[(88), float64] */;
  %573 = reshape(%571, newshape=[]) /* ty=float64 */;
  %574 = reshape(%572, newshape=[1, 11, 8]) /* ty=Tensor[(1, 11, 8), float64] */;
  %575 = @func_5710(%573, %574) /* ty=(Tensor[(1, 11, 8), float64], Tensor[(4, 11, 16), int32]) */;
  %576 = %570.0;
  %577 = %575.0;
  (%576, %577, 6.38723f64 /* ty=float64 */, meta[relay.Constant][22] /* ty=Tensor[(88), float64] */)
}

def @func_5822() -> (Tensor[(6, 13, 4), float64],) {
  @func_5820() /* ty=(Tensor[(6, 13, 4), float64],) */
}

def @func_5015() -> Tensor[(8, 14, 10), float64] {
  @func_5013() /* ty=Tensor[(8, 14, 10), float64] */
}

def @func_1805() -> (Tensor[(6, 13, 4), float64],) {
  @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */
}

def @func_8622() -> (Tensor[(6, 13, 4), float64],) {
  %578 = @func_3907() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %579 = %578.0;
  (%579,)
}

def @func_9158() -> Tensor[(6, 13, 4), float64] {
  @func_9156() /* ty=Tensor[(6, 13, 4), float64] */
}

def @func_5219() -> (Tensor[(8, 14, 10), int8], Tensor[(1120), int8], Tensor[(6, 52), float32]) {
  %580 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %581 = @func_5124() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 52), float32]) */;
  %582 = @func_3692() /* ty=Tensor[(8, 14, 10), int8] */;
  %583 = %580.3;
  %584 = %581.1;
  (%582, %583, %584)
}

def @func_5124() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 52), float32]) {
  %585 = @func_4316() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %586 = @func_3492() /* ty=(Tensor[(312), float32], Tensor[(6, 52), float32], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), uint16]) */;
  %587 = %585.2;
  %588 = %586.1;
  (%587, %588)
}

def @func_9540() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), bool], Tensor[(10, 11, 16), float32], Tensor[(8, 14, 10), int8]) {
  @func_9538() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), bool], Tensor[(10, 11, 16), float32], Tensor[(8, 14, 10), int8]) */
}

def @func_10174() -> (Tensor[(8, 14, 10), float64], Tensor[(6, 13, 4), float64]) {
  %592 = fn () -> (Tensor[(8, 14, 10), float64], Tensor[(6, 13, 4), float64]) {
    %589 = @func_9383() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(10, 1, 6), uint8], Tensor[(15, 4), uint8]) */;
    %590 = @func_5013() /* ty=Tensor[(8, 14, 10), float64] */;
    %591 = %589.0;
    (%590, %591)
  };
  %592() /* ty=(Tensor[(8, 14, 10), float64], Tensor[(6, 13, 4), float64]) */
}

def @func_6807() -> (Tensor[(6, 13, 4), float32],) {
  %597 = fn () -> (Tensor[(6, 13, 4), float32],) {
    %593 = @func_5309() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32]) */;
    %594 = %593.1;
    %595 = cast(%594, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
    %596 = log(%595) /* ty=Tensor[(6, 13, 4), float32] */;
    (%596,)
  };
  %597() /* ty=(Tensor[(6, 13, 4), float32],) */
}

def @func_9385() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(10, 1, 6), uint8], Tensor[(15, 4), uint8]) {
  @func_9383() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(10, 1, 6), uint8], Tensor[(15, 4), uint8]) */
}

def @func_1488() -> (Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) {
  %598 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 11, 16), int32] */, dtype="int32") /* ty=Tensor[(4, 11, 16), int32] */;
  %599 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(4, 11, 16), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 11, 16), int32] */, dtype="int32") /* ty=Tensor[(4, 11, 16), int32] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %602 = cast(meta[relay.Constant][25] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %603 = reshape(%602, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), float32] */;
  %604 = @func_1258(%603) /* ty=(Tensor[(6, 13, 4), float32],) */;
  %605 = %604.0;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %607 = reshape(%606, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), float32] */;
  %608 = @func_1258(%607) /* ty=(Tensor[(6, 13, 4), float32],) */;
  %609 = cast(%605, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %610 = reshape(%609, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), float32] */;
  %611 = @func_1258(%610) /* ty=(Tensor[(6, 13, 4), float32],) */;
  %612 = multiply(%600, %601) /* ty=Tensor[(4, 11, 16), int32] */;
  %613 = %608.0;
  %614 = %611.0;
  (%612, %605, meta[relay.Constant][25] /* ty=Tensor[(312), float32] */, %613, %614)
}

def @func_10046() -> (Tensor[(4, 11, 16), float32], Tensor[(88), float64], Tensor[(8, 14, 10), float64], Tensor[(6, 13, 4), float64], uint8, Tensor[(1092), float64]) {
  %628 = fn () -> (Tensor[(4, 11, 16), float32], Tensor[(88), float64], Tensor[(8, 14, 10), float64], Tensor[(6, 13, 4), float64], uint8, Tensor[(1092), float64]) {
    %615 = @func_4558() /* ty=(Tensor[(4, 11, 16), int32],) */;
    %616 = %615.0;
    %617 = cast(%616, dtype="float32") /* ty=Tensor[(4, 11, 16), float32] */;
    %618 = @func_6399() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 11, 8), float64], float64, Tensor[(88), float64]) */;
    %619 = cast(meta[relay.Constant][26] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %620 = cast(meta[relay.Constant][27] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %621 = reshape(%619, newshape=[]) /* ty=uint8 */;
    %622 = reshape(%620, newshape=[546, 2]) /* ty=Tensor[(546, 2), float64] */;
    %623 = @func_5432(%621, %622) /* ty=(Tensor[(8, 14, 10), float64], Tensor[(6, 13, 4), float64], Tensor[(1092), float64], uint8, Tensor[(4, 108), uint8], Tensor[(546, 2), float64], Tensor[(6, 13, 4), float64]) */;
    %624 = atanh(%617) /* ty=Tensor[(4, 11, 16), float32] */;
    %625 = %618.3;
    %626 = @func_5013() /* ty=Tensor[(8, 14, 10), float64] */;
    %627 = %623.1;
    (%624, %625, %626, %627, meta[relay.Constant][26] /* ty=uint8 */, meta[relay.Constant][27] /* ty=Tensor[(1092), float64] */)
  };
  %628() /* ty=(Tensor[(4, 11, 16), float32], Tensor[(88), float64], Tensor[(8, 14, 10), float64], Tensor[(6, 13, 4), float64], uint8, Tensor[(1092), float64]) */
}

def @func_9029() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  %629 = @func_3571() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %630 = %629.3;
  %631 = @func_6670() /* ty=Tensor[(6, 13, 4), float64] */;
  (%630, %631)
}

def @func_4997() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  %632 = @func_3907() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %633 = @func_4256() /* ty=Tensor[(8, 14, 10), int8] */;
  %634 = %632.0;
  (%633, %634)
}

def @func_7212() -> (Tensor[(8, 10, 2), float64],) {
  %635 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 10, 2), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 2), float64] */;
  %636 = cosh(%635) /* ty=Tensor[(8, 10, 2), float64] */;
  (%636,)
}

def @func_1538(%var_1536: Tensor[(1, 312), float32]) -> (Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) {
  @func_1535(%var_1536) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */
}

def @func_1258(%var_1245: Tensor[(6, 13, 4), float32]) -> (Tensor[(6, 13, 4), float32],) {
  %637 = cast(%var_1245, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %638 = tan(%637) /* ty=Tensor[(6, 13, 4), float32] */;
  %639 = cast(%var_1245, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %640 = log10(%639) /* ty=Tensor[(6, 13, 4), float32] */;
  %641 = cast(%640, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %642 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%638, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %645 = power(%643, %644) /* ty=Tensor[(6, 13, 4), float32] */;
  (%645,)
}

def @func_10774() -> Tensor[(8, 14, 10), int8] {
  @func_10772() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_8187() -> (Tensor[(8, 14, 10), float64],) {
  @func_8185() /* ty=(Tensor[(8, 14, 10), float64],) */
}

def @func_2588() -> (Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) {
  %663 = fn () -> (Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) {
    %646 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
    %647 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
    %648 = %647.1;
    %649 = %646.2;
    %650 = cast(%649, dtype="int8") /* ty=Tensor[(112), int8] */;
    %651 = cast(%648, dtype="int8") /* ty=Tensor[(8, 14, 10), int8] */;
    %652 = reshape(%650, newshape=[112]) /* ty=Tensor[(112), int8] */;
    %653 = reshape(%651, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
    %654 = @func_2080(%652, %653) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8], Tensor[(6, 13, 4), float64]) */;
    %655 = %654.1;
    %656 = cast(%655, dtype="int64") /* ty=Tensor[(8, 14, 10), int64] */;
    %657 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
    %658 = cast(%648, dtype="int64") /* ty=Tensor[(8, 14, 10), int64] */;
    %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %660 = @func_2361() /* ty=Tensor[(8, 14, 10), int8] */;
    %661 = left_shift(%658, %659) /* ty=Tensor[(8, 14, 10), int64] */;
    %662 = @func_2281() /* ty=Tensor[(8, 14, 10), int8] */;
    (%649, %660, %661, %662)
  };
  %663() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) */
}

def @func_7100() -> (Tensor[(112), int8], Tensor[(6, 13, 4), float64]) {
  @func_7098() /* ty=(Tensor[(112), int8], Tensor[(6, 13, 4), float64]) */
}

def @func_8565() -> (Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32]) {
  @func_8563() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32]) */
}

def @func_8871() -> (Tensor[(8, 14, 10), int8], Tensor[(448), bool], Tensor[(945), uint16], Tensor[(448), bool]) {
  %664 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %665 = cast(meta[relay.Constant][29] /* ty=Tensor[(945), uint16] */, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %666 = cast(meta[relay.Constant][29] /* ty=Tensor[(945), uint16] */, dtype="uint16") /* ty=Tensor[(945), uint16] */;
  %667 = cast(meta[relay.Constant][30] /* ty=Tensor[(448), bool] */, dtype="bool") /* ty=Tensor[(448), bool] */;
  %668 = reshape(%665, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), uint16] */;
  %669 = reshape(%666, newshape=[9, 15, 7]) /* ty=Tensor[(9, 15, 7), uint16] */;
  %670 = reshape(%667, newshape=[448]) /* ty=Tensor[(448), bool] */;
  %671 = @func_7575(%668, %669, %670) /* ty=(Tensor[(9, 15, 7), uint16], Tensor[(8, 14, 10), int8], bool, Tensor[(448), bool]) */;
  %672 = %664.0;
  %673 = %671.3;
  (%672, %673, meta[relay.Constant][29] /* ty=Tensor[(945), uint16] */, meta[relay.Constant][30] /* ty=Tensor[(448), bool] */)
}

def @func_9099() -> Tensor[(8, 14, 10), int8] {
  @func_9097() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_5341() -> Tensor[(8, 14, 10), float64] {
  @func_5013() /* ty=Tensor[(8, 14, 10), float64] */
}

def @func_3360() -> Tensor[(6, 13, 4), float64] {
  %675 = fn () -> Tensor[(6, 13, 4), float64] {
    %674 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
    %674.0
  };
  %675() /* ty=Tensor[(6, 13, 4), float64] */
}

def @func_2513(%var_2511: Tensor[(312), float32]) -> (Tensor[(4, 11, 16), int32], Tensor[(312), float32], Tensor[(6, 13, 4), float32]) {
  @func_2510(%var_2511) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(312), float32], Tensor[(6, 13, 4), float32]) */
}

def @func_5343() -> Tensor[(8, 14, 10), float64] {
  @func_5341() /* ty=Tensor[(8, 14, 10), float64] */
}

def @func_4033(%var_4032: Tensor[(12, 7, 13), float64]) -> Tensor[(12, 7, 13), float64] {
  %677 = fn (%var_4015: Tensor[(12, 7, 13), float64]) -> Tensor[(12, 7, 13), float64] {
    %676 = cast(%var_4015, dtype="float64") /* ty=Tensor[(12, 7, 13), float64] */;
    sinh(%676) /* ty=Tensor[(12, 7, 13), float64] */
  };
  %677(%var_4032) /* ty=Tensor[(12, 7, 13), float64] */
}

def @func_5535() -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) {
  @func_5533() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) */
}

def @func_7726() -> (Tensor[(6, 13, 4), float32],) {
  %678 = @func_3492() /* ty=(Tensor[(312), float32], Tensor[(6, 52), float32], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), uint16]) */;
  %679 = %678.2;
  (%679,)
}

def @func_4932(%var_4929: uint8, %var_4930: Tensor[(12, 3, 12), uint8], %var_4931: Tensor[(1092), float64]) -> (Tensor[(12, 3, 12), bool], Tensor[(12, 7, 13), float64], Tensor[(1092), float64]) {
  @func_4927(%var_4929, %var_4930, %var_4931) /* ty=(Tensor[(12, 3, 12), bool], Tensor[(12, 7, 13), float64], Tensor[(1092), float64]) */
}

def @func_7846(%var_7844: Tensor[(11, 3, 15), float64]) -> Tensor[(11, 3, 15), float64] {
  @func_7843(%var_7844) /* ty=Tensor[(11, 3, 15), float64] */
}

def @func_9061() -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) {
  %686 = fn () -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) {
    %680 = @func_4180() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float32]) */;
    %681 = %680.1;
    %682 = cast(%681, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
    %683 = @func_2587() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) */;
    %684 = sqrt(%682) /* ty=Tensor[(6, 13, 4), float64] */;
    %685 = %683.1;
    (%684, %685)
  };
  %686() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */
}

def @func_3978(%var_3959: Tensor[(363), uint32]) -> (Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(363), uint32]) {
  %687 = @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %688 = cast(%var_3959, dtype="uint32") /* ty=Tensor[(363), uint32] */;
  %689 = reshape(%688, newshape=[363]) /* ty=Tensor[(363), uint32] */;
  %690 = @func_1964(%689) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) */;
  %691 = %687.0;
  %692 = %690.2;
  (%691, %692, %var_3959)
}

def @func_3212() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32]) {
  %693 = @func_2403() /* ty=(Tensor[(8, 14, 10), int8],) */;
  %694 = %693.0;
  %695 = cast(%694, dtype="float32") /* ty=Tensor[(8, 14, 10), float32] */;
  %696 = @func_2281() /* ty=Tensor[(8, 14, 10), int8] */;
  %697 = sin(%695) /* ty=Tensor[(8, 14, 10), float32] */;
  (%696, %697)
}

def @func_9457() -> Tensor[(6, 13, 4), float32] {
  %699 = fn () -> Tensor[(6, 13, 4), float32] {
    %698 = @func_5811() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
    %698.0
  };
  %699() /* ty=Tensor[(6, 13, 4), float32] */
}

def @func_10689() -> Tensor[(4, 11, 16), float32] {
  %700 = @func_7075() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) */;
  %701 = %700.2;
  %702 = cast(%701, dtype="float32") /* ty=Tensor[(4, 11, 16), float32] */;
  rsqrt(%702) /* ty=Tensor[(4, 11, 16), float32] */
}

def @func_4822() -> (Tensor[(4, 11, 16), int32],) {
  %703 = @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */;
  %704 = %703.5;
  (%704,)
}

def @func_1771() -> (Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) {
  @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */
}

def @func_10332() -> Tensor[(8, 14, 10), int8] {
  @func_10330() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_6167(%var_6095: float64) -> (Tensor[(8, 14, 10), int8], Tensor[(1, 9, 11), float64], Tensor[(6, 13, 4), float64], Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  %705 = @func_4316() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %706 = cast(%var_6095, dtype="float64") /* ty=float64 */;
  %707 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 9, 11), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 11), float64] */;
  %708 = floor_mod(%706, %707) /* ty=Tensor[(1, 9, 11), float64] */;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(1, 9, 11), float64] */;
  %710 = cast(meta[relay.Constant][32] /* ty=Tensor[(112), int8] */, dtype="int8") /* ty=Tensor[(112), int8] */;
  %711 = %705.1;
  %712 = cast(%711, dtype="int8") /* ty=Tensor[(8, 14, 10), int8] */;
  %713 = reshape(%710, newshape=[112]) /* ty=Tensor[(112), int8] */;
  %714 = reshape(%712, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %715 = @func_2080(%713, %714) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8], Tensor[(6, 13, 4), float64]) */;
  %716 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %717 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %718 = cos(%709) /* ty=Tensor[(1, 9, 11), float64] */;
  %719 = %715.0;
  %720 = %716.0;
  %721 = %717.0;
  (%711, %718, %719, meta[relay.Constant][32] /* ty=Tensor[(112), int8] */, %720, %721)
}

def @func_3338(%var_3336: Tensor[(3, 104), float64], %var_3337: Tensor[(3, 104), float64]) -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(3, 104), float32], Tensor[(3, 104), bool], Tensor[(312), float32]) {
  %754 = fn (%var_3293: Tensor[(3, 104), float64], %var_3322: Tensor[(3, 104), float64]) -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(3, 104), float32], Tensor[(3, 104), bool], Tensor[(312), float32]) {
    %722 = @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */;
    %723 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 104), float32] */, dtype="float32") /* ty=Tensor[(3, 104), float32] */;
    %724 = reshape(%723, newshape=[312]) /* ty=Tensor[(312), float32] */;
    %725 = @func_2510(%724) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(312), float32], Tensor[(6, 13, 4), float32]) */;
    %726 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 104), float32] */, dtype="uint8") /* ty=Tensor[(3, 104), uint8] */;
    %727 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(3, 104), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %728 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 104), float32] */, dtype="uint8") /* ty=Tensor[(3, 104), uint8] */;
    %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %730 = multiply(%728, %729) /* ty=Tensor[(3, 104), uint8] */;
    %731 = cast(%730, dtype="float64") /* ty=Tensor[(3, 104), float64] */;
    %732 = cosh(%731) /* ty=Tensor[(3, 104), float64] */;
    %733 = cast(%var_3293, dtype="float32") /* ty=Tensor[(3, 104), float32] */;
    %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(2), int32] */;
    %735 = cast(%732, dtype="float32") /* ty=Tensor[(3, 104), float32] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %737 = mod(%735, %736) /* ty=Tensor[(3, 104), float32] */;
    %738 = cast(%var_3293, dtype="float32") /* ty=Tensor[(3, 104), float32] */;
    %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(2), int32] */;
    %740 = cast(%737, dtype="float32") /* ty=Tensor[(3, 104), float32] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %742 = cast(%737, dtype="float64") /* ty=Tensor[(3, 104), float64] */;
    %743 = acos(%742) /* ty=Tensor[(3, 104), float64] */;
    %744 = cast(%var_3322, dtype="bool") /* ty=Tensor[(3, 104), bool] */;
    %745 = shape_of(%743, dtype="int32") /* ty=Tensor[(2), int32] */;
    %746 = cast(%743, dtype="bool") /* ty=Tensor[(3, 104), bool] */;
    %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %748 = @func_2297() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) */;
    %749 = %722.0;
    %750 = %725.2;
    %751 = floor_mod(%740, %741) /* ty=Tensor[(3, 104), float32] */;
    %752 = not_equal(%746, %747) /* ty=Tensor[(3, 104), bool] */;
    %753 = %748.2;
    (%749, %750, %751, %752, %753)
  };
  %754(%var_3336, %var_3337) /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(3, 104), float32], Tensor[(3, 104), bool], Tensor[(312), float32]) */
}

def @func_1261(%var_1259: Tensor[(6, 13, 4), float32]) -> (Tensor[(6, 13, 4), float32],) {
  @func_1258(%var_1259) /* ty=(Tensor[(6, 13, 4), float32],) */
}

def @func_8998(%var_8996: Tensor[(4, 28), int8], %var_8997: Tensor[(8, 140), int8]) -> (Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(4, 28), int8], Tensor[(8, 140), int8], Tensor[(312, 1), float32], Tensor[(780), float64], Tensor[(8, 10, 2), float64]) {
  @func_8994(%var_8996, %var_8997) /* ty=(Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(4, 28), int8], Tensor[(8, 140), int8], Tensor[(312, 1), float32], Tensor[(780), float64], Tensor[(8, 10, 2), float64]) */
}

def @func_10866(%var_10849: Tensor[(10, 2, 5), float32]) -> (Tensor[(10, 2, 5), bool],) {
  %755 = cast(%var_10849, dtype="float32") /* ty=Tensor[(10, 2, 5), float32] */;
  %756 = sqrt(%755) /* ty=Tensor[(10, 2, 5), float32] */;
  %757 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 2, 5), float32] */, dtype="bool") /* ty=Tensor[(10, 2, 5), bool] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="bool") /* ty=Tensor[(10, 2, 5), bool] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %761 = not_equal(%759, %760) /* ty=Tensor[(10, 2, 5), bool] */;
  (%761,)
}

def @func_4927(%var_4903: uint8, %var_4904: Tensor[(12, 3, 12), uint8], %var_4914: Tensor[(1092), float64]) -> (Tensor[(12, 3, 12), bool], Tensor[(12, 7, 13), float64], Tensor[(1092), float64]) {
  %762 = cast(%var_4903, dtype="bool") /* ty=bool */;
  %763 = cast(%var_4904, dtype="bool") /* ty=Tensor[(12, 3, 12), bool] */;
  %764 = cast(%var_4914, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %765 = reshape(%764, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), float64] */;
  %766 = greater(%762, %763) /* ty=Tensor[(12, 3, 12), bool] */;
  %767 = @func_4031(%765) /* ty=Tensor[(12, 7, 13), float64] */;
  (%766, %767, %var_4914)
}

def @func_10835() -> (Tensor[(8, 14, 10), int8], Tensor[(112), int8]) {
  %770 = fn () -> (Tensor[(8, 14, 10), int8], Tensor[(112), int8]) {
    %768 = @func_2714() /* ty=Tensor[(8, 14, 10), int8] */;
    %769 = @func_6541() /* ty=Tensor[(112), int8] */;
    (%768, %769)
  };
  %770() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(112), int8]) */
}

def @func_8955(%var_8931: Tensor[(10, 15, 9), int8]) -> Tensor[(10, 15, 9), int8] {
  %771 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 15, 9), int8] */, dtype="int8") /* ty=Tensor[(10, 15, 9), int8] */;
  %772 = shape_of(%var_8931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%var_8931, dtype="int8") /* ty=Tensor[(10, 15, 9), int8] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%773, %774) /* ty=Tensor[(10, 15, 9), int8] */
}

def @func_10599() -> (Tensor[(6, 13, 4), float64],) {
  @func_10597() /* ty=(Tensor[(6, 13, 4), float64],) */
}

def @func_7642() -> Tensor[(6, 13, 4), float64] {
  @func_7640() /* ty=Tensor[(6, 13, 4), float64] */
}

def @func_8958(%var_8956: Tensor[(10, 15, 9), int8]) -> Tensor[(10, 15, 9), int8] {
  @func_8955(%var_8956) /* ty=Tensor[(10, 15, 9), int8] */
}

def @func_8073() -> Tensor[(6, 13, 4), float64] {
  @func_8071() /* ty=Tensor[(6, 13, 4), float64] */
}

def @func_10140(%var_10135: int32, %var_10136: Tensor[(6, 12, 11), int32]) -> (Tensor[(6, 12, 11), int32],) {
  %775 = cast(%var_10135, dtype="int32") /* ty=int32 */;
  %776 = cast(%var_10136, dtype="int32") /* ty=Tensor[(6, 12, 11), int32] */;
  %777 = maximum(%775, %776) /* ty=Tensor[(6, 12, 11), int32] */;
  (%777,)
}

def @func_8071() -> Tensor[(6, 13, 4), float64] {
  @func_3418() /* ty=Tensor[(6, 13, 4), float64] */
}

def @func_2283() -> Tensor[(8, 14, 10), int8] {
  @func_2281() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_4504() -> (Tensor[(112), int8], Tensor[(8, 14, 10), int64]) {
  %778 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
  %779 = @func_2587() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) */;
  %780 = %778.2;
  %781 = %779.2;
  (%780, %781)
}

def @func_4375() -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) {
  %782 = @func_3571() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
  %783 = %782.1;
  %784 = @func_3692() /* ty=Tensor[(8, 14, 10), int8] */;
  (%783, %784)
}

def @func_5714(%var_5712: float64, %var_5713: Tensor[(1, 11, 8), float64]) -> (Tensor[(1, 11, 8), float64], Tensor[(4, 11, 16), int32]) {
  @func_5710(%var_5712, %var_5713) /* ty=(Tensor[(1, 11, 8), float64], Tensor[(4, 11, 16), int32]) */
}

def @func_2205() -> Tensor[(6, 13, 4), float32] {
  %786 = fn () -> Tensor[(6, 13, 4), float32] {
    %785 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
    %785.0
  };
  %786() /* ty=Tensor[(6, 13, 4), float32] */
}

def @func_6013() -> (Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 52), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float32], Tensor[(16, 14, 5), float32], Tensor[(8, 140), float32], Tensor[(6, 13, 4), bool]) {
  %787 = @func_5811() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %788 = @func_3789() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %789 = @func_5124() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 52), float32]) */;
  %790 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %791 = @func_5820() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %792 = %791.0;
  %793 = cast(%792, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %794 = reshape(%793, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), float32] */;
  %795 = @func_2032(%794) /* ty=(Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), bool]) */;
  %796 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 140), float32] */, dtype="float32") /* ty=Tensor[(8, 140), float32] */;
  %797 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 140), float32] */, dtype="float32") /* ty=Tensor[(8, 140), float32] */;
  %798 = reshape(%796, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %799 = reshape(%797, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %800 = cast(%792, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %801 = asinh(%800) /* ty=Tensor[(6, 13, 4), float32] */;
  %802 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 13, 4), float32] */, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
  %803 = shape_of(%801, dtype="int32") /* ty=Tensor[(3), int32] */;
  %804 = cast(%801, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %806 = %787.0;
  %807 = %788.0;
  %808 = %789.1;
  %809 = %790.2;
  %810 = %795.0;
  %811 = @func_2804(%798, %799) /* ty=Tensor[(16, 14, 5), float32] */;
  %812 = not_equal(%804, %805) /* ty=Tensor[(6, 13, 4), bool] */;
  (%806, %807, %808, %809, %810, %811, meta[relay.Constant][37] /* ty=Tensor[(8, 140), float32] */, %812)
}

def @func_4506() -> (Tensor[(112), int8], Tensor[(8, 14, 10), int64]) {
  @func_4504() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), int64]) */
}

def @func_10330() -> Tensor[(8, 14, 10), int8] {
  @func_6558() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_8363(%var_8361: float64, %var_8362: Tensor[(2, 15, 14), float64]) -> Tensor[(2, 15, 14), float64] {
  %815 = fn (%var_8339: float64, %var_8340: Tensor[(2, 15, 14), float64]) -> Tensor[(2, 15, 14), float64] {
    %813 = cast(%var_8339, dtype="float64") /* ty=float64 */;
    %814 = cast(%var_8340, dtype="float64") /* ty=Tensor[(2, 15, 14), float64] */;
    mod(%813, %814) /* ty=Tensor[(2, 15, 14), float64] */
  };
  %815(%var_8361, %var_8362) /* ty=Tensor[(2, 15, 14), float64] */
}

def @func_3790() -> (Tensor[(6, 13, 4), float64],) {
  %818 = fn () -> (Tensor[(6, 13, 4), float64],) {
    %816 = @func_1912() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) */;
    %817 = %816.2;
    (%817,)
  };
  %818() /* ty=(Tensor[(6, 13, 4), float64],) */
}

def @func_6869() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 52), float32]) {
  %826 = fn () -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 52), float32]) {
    %819 = @func_4180() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float32]) */;
    %820 = @func_3950() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64]) */;
    %821 = @func_5219() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1120), int8], Tensor[(6, 52), float32]) */;
    %822 = @func_6558() /* ty=Tensor[(8, 14, 10), int8] */;
    %823 = %819.1;
    %824 = %820.0;
    %825 = %821.2;
    (%822, %823, %824, %825)
  };
  %826() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 52), float32]) */
}

def @func_8051(%var_8050: Tensor[(12, 1, 13), float64]) -> (Tensor[(12, 1, 13), float64],) {
  %829 = fn (%var_8046: Tensor[(12, 1, 13), float64]) -> (Tensor[(12, 1, 13), float64],) {
    %827 = cast(%var_8046, dtype="float64") /* ty=Tensor[(12, 1, 13), float64] */;
    %828 = sigmoid(%827) /* ty=Tensor[(12, 1, 13), float64] */;
    (%828,)
  };
  %829(%var_8050) /* ty=(Tensor[(12, 1, 13), float64],) */
}

def @func_6015() -> (Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 52), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float32], Tensor[(16, 14, 5), float32], Tensor[(8, 140), float32], Tensor[(6, 13, 4), bool]) {
  @func_6013() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 52), float32], Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float32], Tensor[(16, 14, 5), float32], Tensor[(8, 140), float32], Tensor[(6, 13, 4), bool]) */
}

def @func_1803() -> (Tensor[(6, 13, 4), float64],) {
  %830 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %831 = %830.0;
  (%831,)
}

def @func_5221() -> (Tensor[(8, 14, 10), int8], Tensor[(1120), int8], Tensor[(6, 52), float32]) {
  @func_5219() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1120), int8], Tensor[(6, 52), float32]) */
}

def @func_5732() -> (Tensor[(112), int8],) {
  %832 = @func_3841() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), float64]) */;
  %833 = %832.0;
  (%833,)
}

def @func_2299() -> (Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) {
  @func_2297() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) */
}

def @func_10127(%var_10125: bool, %var_10126: Tensor[(56, 8), bool]) -> (Tensor[(6, 13, 4), float64], Tensor[(363), uint32], bool, Tensor[(56, 8), bool], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8]) {
  @func_10123(%var_10125, %var_10126) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(363), uint32], bool, Tensor[(56, 8), bool], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8]) */
}

def @func_3693() -> Tensor[(8, 14, 10), int8] {
  %834 = fn () -> Tensor[(8, 14, 10), int8] {
    @func_2714() /* ty=Tensor[(8, 14, 10), int8] */
  };
  %834() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_1964(%var_1955: Tensor[(363), uint32]) -> (Tensor[(6, 13, 4), float64], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) {
  %835 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %836 = cast(%var_1955, dtype="uint32") /* ty=Tensor[(363), uint32] */;
  %837 = reshape(%836, newshape=[11, 3, 11]) /* ty=Tensor[(11, 3, 11), uint32] */;
  %838 = @func_1824(%837) /* ty=(Tensor[(11, 3, 11), uint32],) */;
  %839 = %835.0;
  %840 = %838.0;
  (%839, %840, %var_1955)
}

def @func_4065() -> (Tensor[(6, 13, 4), float64],) {
  %843 = fn () -> (Tensor[(6, 13, 4), float64],) {
    %841 = @func_1912() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) */;
    %842 = %841.0;
    (%842,)
  };
  %843() /* ty=(Tensor[(6, 13, 4), float64],) */
}

def @func_4966() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  %844 = @func_3870() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %845 = @func_2361() /* ty=Tensor[(8, 14, 10), int8] */;
  %846 = %844.0;
  (%845, %846)
}

def @func_4999() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  @func_4997() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */
}

def @func_9761() -> Tensor[(8, 14, 10), int8] {
  @func_9759() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_7190() -> Tensor[(112), int8] {
  %847 = fn () -> Tensor[(112), int8] {
    @func_6541() /* ty=Tensor[(112), int8] */
  };
  %847() /* ty=Tensor[(112), int8] */
}

def @func_3420() -> Tensor[(6, 13, 4), float64] {
  @func_3418() /* ty=Tensor[(6, 13, 4), float64] */
}

def @func_5310() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32]) {
  %852 = fn () -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32]) {
    %848 = @func_4997() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
    %849 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
    %850 = %848.0;
    %851 = %849.0;
    (%850, %851)
  };
  %852() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32]) */
}

def @func_9739() -> (Tensor[(8, 14, 10), float32],) {
  @func_9737() /* ty=(Tensor[(8, 14, 10), float32],) */
}

def @func_7076() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) {
  %861 = fn () -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) {
    %853 = @func_2403() /* ty=(Tensor[(8, 14, 10), int8],) */;
    %854 = @func_2587() /* ty=(Tensor[(112), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int64], Tensor[(8, 14, 10), int8]) */;
    %855 = @func_4822() /* ty=(Tensor[(4, 11, 16), int32],) */;
    %856 = @func_3870() /* ty=(Tensor[(6, 13, 4), float64],) */;
    %857 = %853.0;
    %858 = %854.3;
    %859 = %855.0;
    %860 = %856.0;
    (%857, %858, %859, %860)
  };
  %861() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) */
}

def @func_8328() -> (Tensor[(6, 52), float32],) {
  %862 = @func_3492() /* ty=(Tensor[(312), float32], Tensor[(6, 52), float32], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), uint16]) */;
  %863 = %862.1;
  (%863,)
}

def @func_3871() -> (Tensor[(6, 13, 4), float64],) {
  %866 = fn () -> (Tensor[(6, 13, 4), float64],) {
    %864 = @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */;
    %865 = %864.0;
    (%865,)
  };
  %866() /* ty=(Tensor[(6, 13, 4), float64],) */
}

def @func_1826(%var_1825: Tensor[(11, 3, 11), uint32]) -> (Tensor[(11, 3, 11), uint32],) {
  %872 = fn (%var_1815: Tensor[(11, 3, 11), uint32]) -> (Tensor[(11, 3, 11), uint32],) {
    %867 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 3, 11), uint32] */, dtype="uint32") /* ty=Tensor[(11, 3, 11), uint32] */;
    %868 = shape_of(%var_1815, dtype="int32") /* ty=Tensor[(3), int32] */;
    %869 = cast(%var_1815, dtype="uint32") /* ty=Tensor[(11, 3, 11), uint32] */;
    %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %871 = logical_xor(%869, %870) /* ty=Tensor[(11, 3, 11), uint32] */;
    (%871,)
  };
  %872(%var_1825) /* ty=(Tensor[(11, 3, 11), uint32],) */
}

def @func_3494() -> (Tensor[(312), float32], Tensor[(6, 52), float32], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), uint16]) {
  @func_3492() /* ty=(Tensor[(312), float32], Tensor[(6, 52), float32], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), uint16]) */
}

def @func_5648() -> (Tensor[(8, 14, 10), float64], Tensor[(8, 14, 10), float32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) {
  %873 = @func_4460() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */;
  %874 = %873.7;
  %875 = cast(%874, dtype="float32") /* ty=Tensor[(8, 14, 10), float32] */;
  %876 = @func_4460() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */;
  %877 = @func_5013() /* ty=Tensor[(8, 14, 10), float64] */;
  %878 = rsqrt(%875) /* ty=Tensor[(8, 14, 10), float32] */;
  %879 = @func_4598() /* ty=Tensor[(8, 14, 10), int8] */;
  %880 = %876.7;
  (%877, %878, %879, %880)
}

def @func_4824() -> (Tensor[(4, 11, 16), int32],) {
  @func_4822() /* ty=(Tensor[(4, 11, 16), int32],) */
}

def @func_9538() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), bool], Tensor[(10, 11, 16), float32], Tensor[(8, 14, 10), int8]) {
  %881 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %882 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %883 = @func_5063() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(312), float32]) */;
  %884 = %883.0;
  %885 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 14, 10), int8] */, dtype="bool") /* ty=Tensor[(8, 14, 10), bool] */;
  %886 = shape_of(%884, dtype="int32") /* ty=Tensor[(3), int32] */;
  %887 = cast(%884, dtype="bool") /* ty=Tensor[(8, 14, 10), bool] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %889 = @func_9293() /* ty=(Tensor[(10, 11, 16), float32], Tensor[(6, 13, 4), float64]) */;
  %890 = @func_9029() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %891 = %881.0;
  %892 = %882.0;
  %893 = greater_equal(%887, %888) /* ty=Tensor[(8, 14, 10), bool] */;
  %894 = %889.0;
  %895 = %890.0;
  (%891, %892, %893, %894, %895)
}

def @func_4559() -> (Tensor[(4, 11, 16), int32],) {
  %898 = fn () -> (Tensor[(4, 11, 16), int32],) {
    %896 = @func_4316() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */;
    %897 = %896.0;
    (%897,)
  };
  %898() /* ty=(Tensor[(4, 11, 16), int32],) */
}

def @func_7387(%var_7362: uint8, %var_7364: Tensor[(1092), float64]) -> (Tensor[(8, 14, 10), float32], Tensor[(1092), float64], uint8, Tensor[(432), uint8], Tensor[(1092), float64]) {
  %899 = @func_6595() /* ty=(Tensor[(8, 14, 10), float32],) */;
  %900 = cast(%var_7362, dtype="uint8") /* ty=uint8 */;
  %901 = cast(meta[relay.Constant][41] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %902 = cast(%var_7364, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %903 = reshape(%900, newshape=[]) /* ty=uint8 */;
  %904 = reshape(%901, newshape=[12, 3, 12]) /* ty=Tensor[(12, 3, 12), uint8] */;
  %905 = reshape(%902, newshape=[1092]) /* ty=Tensor[(1092), float64] */;
  %906 = @func_4927(%903, %904, %905) /* ty=(Tensor[(12, 3, 12), bool], Tensor[(12, 7, 13), float64], Tensor[(1092), float64]) */;
  %907 = %899.0;
  %908 = %906.2;
  (%907, %908, %var_7362, meta[relay.Constant][41] /* ty=Tensor[(432), uint8] */, %var_7364)
}

def @func_1769() -> (Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) {
  %909 = @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %910 = cast(meta[relay.Constant][42] /* ty=Tensor[(112), int8] */, dtype="int8") /* ty=Tensor[(112), int8] */;
  %911 = cast(meta[relay.Constant][43] /* ty=Tensor[(1120), int8] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %912 = reshape(%910, newshape=[8, 14, 1]) /* ty=Tensor[(8, 14, 1), int8] */;
  %913 = reshape(%911, newshape=[8, 14, 10]) /* ty=Tensor[(8, 14, 10), int8] */;
  %914 = %909.4;
  %915 = @func_307(%912, %913) /* ty=Tensor[(8, 14, 10), int8] */;
  (%914, %915, meta[relay.Constant][42] /* ty=Tensor[(112), int8] */, meta[relay.Constant][43] /* ty=Tensor[(1120), int8] */)
}

def @func_9954(%var_9953: Tensor[(5, 12, 9), uint8]) -> Tensor[(5, 12, 9), uint8] {
  %920 = fn (%var_9948: Tensor[(5, 12, 9), uint8]) -> Tensor[(5, 12, 9), uint8] {
    %916 = cast(%var_9948, dtype="uint8") /* ty=Tensor[(5, 12, 9), uint8] */;
    %917 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(5, 12, 9), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %918 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 12, 9), uint8] */, dtype="uint8") /* ty=Tensor[(5, 12, 9), uint8] */;
    %919 = dyn.reshape(%916, %917, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    minimum(%918, %919) /* ty=Tensor[(5, 12, 9), uint8] */
  };
  %920(%var_9953) /* ty=Tensor[(5, 12, 9), uint8] */
}

def @func_10466(%var_10464: Tensor[(792), int32]) -> (Tensor[(6, 13, 4), float64], Tensor[(2, 8, 12), bool], Tensor[(192), uint64], Tensor[(6, 13, 4), float64], Tensor[(56, 2), int8], Tensor[(6, 12, 11), int32], int32, Tensor[(792), int32], Tensor[(6, 13, 4), float64]) {
  @func_10463(%var_10464) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(2, 8, 12), bool], Tensor[(192), uint64], Tensor[(6, 13, 4), float64], Tensor[(56, 2), int8], Tensor[(6, 12, 11), int32], int32, Tensor[(792), int32], Tensor[(6, 13, 4), float64]) */
}

def @func_2937() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) {
  %921 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %922 = @func_2204() /* ty=Tensor[(6, 13, 4), float32] */;
  %923 = cast(%922, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %924 = rsqrt(%923) /* ty=Tensor[(6, 13, 4), float32] */;
  %925 = cast(%924, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %926 = atanh(%925) /* ty=Tensor[(6, 13, 4), float32] */;
  %927 = cast(%926, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
  %928 = log2(%927) /* ty=Tensor[(6, 13, 4), float64] */;
  %929 = cast(%928, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %930 = cast(meta[relay.Constant][45] /* ty=Tensor[(56, 2), int8] */, dtype="int8") /* ty=Tensor[(56, 2), int8] */;
  %931 = %921.1;
  %932 = cast(%931, dtype="int8") /* ty=Tensor[(8, 14, 10), int8] */;
  %933 = reshape(%930, newshape=[112]) /* ty=Tensor[(112), int8] */;
  %934 = reshape(%932, newshape=[1120]) /* ty=Tensor[(1120), int8] */;
  %935 = @func_2080(%933, %934) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8], Tensor[(6, 13, 4), float64]) */;
  %936 = @func_1488() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(312), float32], Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), float32]) */;
  %937 = cast(%924, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %938 = reshape(%937, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
  %939 = @func_1535(%938) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */;
  %940 = cast(%922, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %941 = reshape(%940, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), float32] */;
  %942 = @func_1258(%941) /* ty=(Tensor[(6, 13, 4), float32],) */;
  %943 = cos(%929) /* ty=Tensor[(6, 13, 4), float32] */;
  %944 = %935.1;
  %945 = %936.0;
  %946 = %939.0;
  %947 = %942.0;
  (%931, %943, %944, meta[relay.Constant][45] /* ty=Tensor[(56, 2), int8] */, %945, %946, %947)
}

def @func_9383() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(10, 1, 6), uint8], Tensor[(15, 4), uint8]) {
  %948 = @func_8276() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(1, 312), float32]) */;
  %949 = @func_9029() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %950 = %949.1;
  %951 = cast(%950, dtype="float64") /* ty=Tensor[(6, 13, 4), float64] */;
  %952 = cast(meta[relay.Constant][46] /* ty=Tensor[(15, 4), uint8] */, dtype="uint8") /* ty=Tensor[(15, 4), uint8] */;
  %953 = reshape(%952, newshape=[10, 1, 6]) /* ty=Tensor[(10, 1, 6), uint8] */;
  %954 = @func_5459(%953) /* ty=(Tensor[(10, 1, 6), uint8],) */;
  %955 = %948.0;
  %956 = exp(%951) /* ty=Tensor[(6, 13, 4), float64] */;
  %957 = %954.0;
  (%955, %956, %957, meta[relay.Constant][46] /* ty=Tensor[(15, 4), uint8] */)
}

def @func_3148(%var_3145: Tensor[(15, 4, 5), float32], %var_3146: Tensor[(6, 52), float32], %var_3147: Tensor[(8, 14, 10), int8]) -> (Tensor[(15, 4, 5), uint16], Tensor[(4, 11, 16), int32], Tensor[(6, 52), float32], Tensor[(8, 14, 10), bool], Tensor[(8, 14, 10), int8]) {
  @func_3143(%var_3145, %var_3146, %var_3147) /* ty=(Tensor[(15, 4, 5), uint16], Tensor[(4, 11, 16), int32], Tensor[(6, 52), float32], Tensor[(8, 14, 10), bool], Tensor[(8, 14, 10), int8]) */
}

def @func_10242() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(10, 15, 9), int8], Tensor[(1350), int8]) {
  %964 = fn () -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(10, 15, 9), int8], Tensor[(1350), int8]) {
    %958 = @func_6399() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 11, 8), float64], float64, Tensor[(88), float64]) */;
    %959 = cast(meta[relay.Constant][47] /* ty=Tensor[(1350), int8] */, dtype="int8") /* ty=Tensor[(1350), int8] */;
    %960 = reshape(%959, newshape=[10, 15, 9]) /* ty=Tensor[(10, 15, 9), int8] */;
    %961 = @func_9759() /* ty=Tensor[(8, 14, 10), int8] */;
    %962 = %958.0;
    %963 = @func_8955(%960) /* ty=Tensor[(10, 15, 9), int8] */;
    (%961, %962, %963, meta[relay.Constant][47] /* ty=Tensor[(1350), int8] */)
  };
  %964() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(10, 15, 9), int8], Tensor[(1350), int8]) */
}

def @func_3572() -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) {
  %972 = fn () -> (Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) {
    %965 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
    %966 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
    %967 = @func_2162() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
    %968 = @func_3418() /* ty=Tensor[(6, 13, 4), float64] */;
    %969 = %965.0;
    %970 = %966.1;
    %971 = %967.0;
    (%968, %969, %970, %971)
  };
  %972() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */
}

def @func_4317() -> (Tensor[(4, 11, 16), int32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) {
  %979 = fn () -> (Tensor[(4, 11, 16), int32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) {
    %973 = @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */;
    %974 = @func_2297() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(1, 312), float32], Tensor[(312), float32]) */;
    %975 = %973.4;
    %976 = %974.0;
    %977 = @func_2714() /* ty=Tensor[(8, 14, 10), int8] */;
    %978 = @func_2714() /* ty=Tensor[(8, 14, 10), int8] */;
    (%975, %976, %977, %978)
  };
  %979() /* ty=(Tensor[(4, 11, 16), int32], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8]) */
}

def @func_7516() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) {
  %985 = fn () -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) {
    %980 = @func_5124() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 52), float32]) */;
    %981 = @func_3907() /* ty=(Tensor[(6, 13, 4), float64],) */;
    %982 = %980.0;
    %983 = %981.0;
    %984 = @func_2361() /* ty=Tensor[(8, 14, 10), int8] */;
    (%982, %983, %984)
  };
  %985() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), int8]) */
}

def @func_3538(%var_3537: Tensor[(5, 13, 12), float64]) -> (Tensor[(5, 13, 12), bool], Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(5, 13, 12), float64], Tensor[(312, 1), float32]) {
  %1000 = fn (%var_3503: Tensor[(5, 13, 12), float64]) -> (Tensor[(5, 13, 12), bool], Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(5, 13, 12), float64], Tensor[(312, 1), float32]) {
    %986 = cast(meta[relay.Constant][48] /* ty=Tensor[(5, 13, 12), float64] */, dtype="bool") /* ty=Tensor[(5, 13, 12), bool] */;
    %987 = shape_of(%var_3503, dtype="int32") /* ty=Tensor[(3), int32] */;
    %988 = cast(%var_3503, dtype="bool") /* ty=Tensor[(5, 13, 12), bool] */;
    %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %990 = @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */;
    %991 = cast(%var_3503, dtype="float64") /* ty=Tensor[(5, 13, 12), float64] */;
    %992 = %990.0;
    %993 = cast(%992, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
    %994 = reshape(%993, newshape=[312, 1]) /* ty=Tensor[(312, 1), float32] */;
    %995 = @func_1588(%994) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(312, 1), float32]) */;
    %996 = greater_equal(%988, %989) /* ty=Tensor[(5, 13, 12), bool] */;
    %997 = @func_3418() /* ty=Tensor[(6, 13, 4), float64] */;
    %998 = acosh(%991) /* ty=Tensor[(5, 13, 12), float64] */;
    %999 = %995.2;
    (%996, %992, %997, %998, %999)
  };
  %1000(%var_3537) /* ty=(Tensor[(5, 13, 12), bool], Tensor[(6, 13, 4), float64], Tensor[(6, 13, 4), float64], Tensor[(5, 13, 12), float64], Tensor[(312, 1), float32]) */
}

def @func_1706(%var_1693: Tensor[(6, 13, 4), float64]) -> (Tensor[(6, 13, 4), bool],) {
  %1001 = @func_1556() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %1002 = %1001.0;
  %1003 = cast(%var_1693, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
  %1004 = shape_of(%1002, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1005 = cast(%1002, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
  %1006 = dyn.reshape(%1003, %1004, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1007 = greater_equal(%1005, %1006) /* ty=Tensor[(6, 13, 4), bool] */;
  %1008 = cast(%var_1693, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
  %1009 = shape_of(%1007, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1010 = cast(%1007, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
  %1011 = dyn.reshape(%1008, %1009, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1012 = greater(%1010, %1011) /* ty=Tensor[(6, 13, 4), bool] */;
  (%1012,)
}

def @func_6671() -> Tensor[(6, 13, 4), float64] {
  %1013 = fn () -> Tensor[(6, 13, 4), float64] {
    @func_3418() /* ty=Tensor[(6, 13, 4), float64] */
  };
  %1013() /* ty=Tensor[(6, 13, 4), float64] */
}

def @func_10629() -> Tensor[(6, 13, 4), float64] {
  %1015 = fn () -> Tensor[(6, 13, 4), float64] {
    %1014 = @func_10568() /* ty=(Tensor[(6, 13, 4), float64],) */;
    %1014.0
  };
  %1015() /* ty=Tensor[(6, 13, 4), float64] */
}

def @func_9177() -> Tensor[(8, 14, 10), int8] {
  @func_9175() /* ty=Tensor[(8, 14, 10), int8] */
}

def @func_1912() -> (Tensor[(6, 13, 4), float64], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float64]) {
  %1016 = @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %1017 = %1016.0;
  %1018 = cast(%1017, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
  %1019 = reshape(%1018, newshape=[312, 1]) /* ty=Tensor[(312, 1), float32] */;
  %1020 = @func_1588(%1019) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(312, 1), float32]) */;
  %1021 = @func_1803() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %1022 = %1020.1;
  %1023 = %1021.0;
  (%1017, %1022, %1023)
}

def @func_6980() -> (Tensor[(8, 7, 4), int64],) {
  %1029 = fn () -> (Tensor[(8, 7, 4), int64],) {
    %1024 = cast(meta[relay.Constant][50] /* ty=Tensor[(8, 7, 4), int64] */, dtype="int64") /* ty=Tensor[(8, 7, 4), int64] */;
    %1025 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(8, 7, 4), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1026 = cast(meta[relay.Constant][49] /* ty=Tensor[(8, 7, 4), int64] */, dtype="int64") /* ty=Tensor[(8, 7, 4), int64] */;
    %1027 = dyn.reshape(%1024, %1025, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1028 = subtract(%1026, %1027) /* ty=Tensor[(8, 7, 4), int64] */;
    (%1028,)
  };
  %1029() /* ty=(Tensor[(8, 7, 4), int64],) */
}

def @func_10144(%var_10142: int32, %var_10143: Tensor[(6, 12, 11), int32]) -> (Tensor[(6, 12, 11), int32],) {
  @func_10140(%var_10142, %var_10143) /* ty=(Tensor[(6, 12, 11), int32],) */
}

def @func_2405() -> (Tensor[(8, 14, 10), int8],) {
  @func_2403() /* ty=(Tensor[(8, 14, 10), int8],) */
}

def @func_3048() -> (Tensor[(8, 14, 10), int8],) {
  %1031 = fn () -> (Tensor[(8, 14, 10), int8],) {
    %1030 = @func_2361() /* ty=Tensor[(8, 14, 10), int8] */;
    (%1030,)
  };
  %1031() /* ty=(Tensor[(8, 14, 10), int8],) */
}

def @func_7468(%var_7433: Tensor[(312), float64], %var_7443: Tensor[(363, 1), uint32], %var_7453: bool, %var_7454: Tensor[(448), bool]) -> (Tensor[(312), float32], Tensor[(312), float64], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], bool, bool, Tensor[(448), bool], Tensor[(363, 112), int32]) {
  %1032 = cast(%var_7433, dtype="float64") /* ty=Tensor[(312), float64] */;
  %1033 = cast(%var_7433, dtype="float64") /* ty=Tensor[(312), float64] */;
  %1034 = reshape(%1032, newshape=[3, 104]) /* ty=Tensor[(3, 104), float64] */;
  %1035 = reshape(%1033, newshape=[3, 104]) /* ty=Tensor[(3, 104), float64] */;
  %1036 = @func_3335(%1034, %1035) /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(3, 104), float32], Tensor[(3, 104), bool], Tensor[(312), float32]) */;
  %1037 = @func_3870() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %1038 = cast(%var_7443, dtype="uint32") /* ty=Tensor[(363, 1), uint32] */;
  %1039 = reshape(%1038, newshape=[363]) /* ty=Tensor[(363), uint32] */;
  %1040 = @func_3978(%1039) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(363), uint32], Tensor[(363), uint32]) */;
  %1041 = cast(%var_7453, dtype="bool") /* ty=bool */;
  %1042 = cast(%var_7454, dtype="bool") /* ty=Tensor[(448), bool] */;
  %1043 = reshape(%1041, newshape=[]) /* ty=bool */;
  %1044 = reshape(%1042, newshape=[448]) /* ty=Tensor[(448), bool] */;
  %1045 = @func_6514(%1043, %1044) /* ty=(Tensor[(16, 14, 5), float32], Tensor[(1120, 1), float32], Tensor[(363), uint32], Tensor[(8, 14, 10), int8], Tensor[(14, 4, 8), bool], bool, Tensor[(448), bool], Tensor[(6, 13, 4), float32]) */;
  %1046 = @func_6541() /* ty=Tensor[(112), int8] */;
  %1047 = cast(%1046, dtype="float32") /* ty=Tensor[(112), float32] */;
  %1048 = log2(%1047) /* ty=Tensor[(112), float32] */;
  %1049 = cast(%var_7443, dtype="int32") /* ty=Tensor[(363, 1), int32] */;
  %1050 = cast(%1048, dtype="int32") /* ty=Tensor[(112), int32] */;
  %1051 = %1036.4;
  %1052 = %1037.0;
  %1053 = %1040.2;
  %1054 = %1045.5;
  %1055 = subtract(%1049, %1050) /* ty=Tensor[(363, 112), int32] */;
  (%1051, %var_7433, %1052, %1053, %1054, %var_7453, %var_7454, %1055)
}

def @func_7098() -> (Tensor[(112), int8], Tensor[(6, 13, 4), float64]) {
  %1056 = @func_5732() /* ty=(Tensor[(112), int8],) */;
  %1057 = @func_4064() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %1058 = %1056.0;
  %1059 = %1057.0;
  (%1058, %1059)
}

def @func_8737() -> (Tensor[(8, 14, 10), int8],) {
  %1061 = fn () -> (Tensor[(8, 14, 10), int8],) {
    %1060 = @func_6558() /* ty=Tensor[(8, 14, 10), int8] */;
    (%1060,)
  };
  %1061() /* ty=(Tensor[(8, 14, 10), int8],) */
}

def @func_9265() -> Tensor[(8, 14, 10), int8] {
  %1062 = @func_5063() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(312), float32]) */;
  %1062.0
}

def @func_4871() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(6, 13, 4), float64]) {
  @func_4869() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(6, 13, 4), float64]) */
}

def @func_8278() -> (Tensor[(6, 13, 4), float64], Tensor[(1, 312), float32]) {
  @func_8276() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(1, 312), float32]) */
}

def @func_3464() -> (Tensor[(8, 14, 10), float32],) {
  %1065 = fn () -> (Tensor[(8, 14, 10), float32],) {
    %1063 = @func_3212() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), float32]) */;
    %1064 = %1063.1;
    (%1064,)
  };
  %1065() /* ty=(Tensor[(8, 14, 10), float32],) */
}

def @func_5734() -> (Tensor[(112), int8],) {
  @func_5732() /* ty=(Tensor[(112), int8],) */
}

def @func_9595() -> Tensor[(6, 13, 4), float64] {
  @func_9593() /* ty=Tensor[(6, 13, 4), float64] */
}

def @func_4869() -> (Tensor[(8, 14, 10), int8], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(6, 13, 4), float64]) {
  %1066 = cast(meta[relay.Constant][51] /* ty=Tensor[(112), int8] */, dtype="int8") /* ty=Tensor[(112), int8] */;
  %1067 = @func_2281() /* ty=Tensor[(8, 14, 10), int8] */;
  %1068 = cast(%1067, dtype="int8") /* ty=Tensor[(8, 14, 10), int8] */;
  %1069 = reshape(%1066, newshape=[8, 14, 1]) /* ty=Tensor[(8, 14, 1), int8] */;
  %1070 = reshape(%1068, newshape=[8, 14, 10]) /* ty=Tensor[(8, 14, 10), int8] */;
  %1071 = @func_4064() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %1072 = @func_307(%1069, %1070) /* ty=Tensor[(8, 14, 10), int8] */;
  %1073 = %1071.0;
  (%1067, %1072, meta[relay.Constant][51] /* ty=Tensor[(112), int8] */, %1073)
}

def @func_9601() -> (Tensor[(8, 14, 10), float32],) {
  %1076 = fn () -> (Tensor[(8, 14, 10), float32],) {
    %1074 = @func_6086() /* ty=(Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) */;
    %1075 = %1074.1;
    (%1075,)
  };
  %1076() /* ty=(Tensor[(8, 14, 10), float32],) */
}

def @func_7474(%var_7470: Tensor[(312), float64], %var_7471: Tensor[(363, 1), uint32], %var_7472: bool, %var_7473: Tensor[(448), bool]) -> (Tensor[(312), float32], Tensor[(312), float64], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], bool, bool, Tensor[(448), bool], Tensor[(363, 112), int32]) {
  @func_7468(%var_7470, %var_7471, %var_7472, %var_7473) /* ty=(Tensor[(312), float32], Tensor[(312), float64], Tensor[(6, 13, 4), float64], Tensor[(363), uint32], bool, bool, Tensor[(448), bool], Tensor[(363, 112), int32]) */
}

def @func_9926() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) {
  @func_9924() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */
}

def @func_9097() -> Tensor[(8, 14, 10), int8] {
  %1077 = @func_4966() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float64]) */;
  %1077.0
}

def @func_4084(%var_4082: Tensor[(6, 12, 5), float32]) -> Tensor[(6, 12, 5), float32] {
  @func_4081(%var_4082) /* ty=Tensor[(6, 12, 5), float32] */
}

def @func_9628() -> (Tensor[(6, 13, 4), float32],) {
  %1080 = fn () -> (Tensor[(6, 13, 4), float32],) {
    %1078 = @func_5559() /* ty=(Tensor[(6, 13, 4), float32],) */;
    %1079 = %1078.0;
    (%1079,)
  };
  %1080() /* ty=(Tensor[(6, 13, 4), float32],) */
}

def @func_8210() -> Tensor[(6, 13, 4), float32] {
  %1081 = @func_5559() /* ty=(Tensor[(6, 13, 4), float32],) */;
  %1081.0
}

def @func_5126() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 52), float32]) {
  @func_5124() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 52), float32]) */
}

def @func_10772() -> Tensor[(8, 14, 10), int8] {
  %1082 = @func_5309() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32]) */;
  %1082.0
}

def @func_5533() -> (Tensor[(6, 13, 4), float64], Tensor[(8, 14, 10), float32]) {
  %1083 = @func_4064() /* ty=(Tensor[(6, 13, 4), float64],) */;
  %1084 = @func_3463() /* ty=(Tensor[(8, 14, 10), float32],) */;
  %1085 = %1083.0;
  %1086 = %1084.0;
  (%1085, %1086)
}

def @func_6517(%var_6515: bool, %var_6516: Tensor[(448), bool]) -> (Tensor[(16, 14, 5), float32], Tensor[(1120, 1), float32], Tensor[(363), uint32], Tensor[(8, 14, 10), int8], Tensor[(14, 4, 8), bool], bool, Tensor[(448), bool], Tensor[(6, 13, 4), float32]) {
  %1110 = fn (%var_6478: bool, %var_6479: Tensor[(448), bool]) -> (Tensor[(16, 14, 5), float32], Tensor[(1120, 1), float32], Tensor[(363), uint32], Tensor[(8, 14, 10), int8], Tensor[(14, 4, 8), bool], bool, Tensor[(448), bool], Tensor[(6, 13, 4), float32]) {
    %1087 = cast(meta[relay.Constant][52] /* ty=Tensor[(1120, 1), float32] */, dtype="float32") /* ty=Tensor[(1120, 1), float32] */;
    %1088 = cast(meta[relay.Constant][52] /* ty=Tensor[(1120, 1), float32] */, dtype="float32") /* ty=Tensor[(1120, 1), float32] */;
    %1089 = reshape(%1087, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
    %1090 = reshape(%1088, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
    %1091 = @func_4942() /* ty=(Tensor[(8, 14, 10), int8],) */;
    %1092 = cast(%var_6478, dtype="bool") /* ty=bool */;
    %1093 = cast(%var_6479, dtype="bool") /* ty=Tensor[(448), bool] */;
    %1094 = reshape(%1092, newshape=[]) /* ty=bool */;
    %1095 = reshape(%1093, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), bool] */;
    %1096 = @func_3789() /* ty=(Tensor[(6, 13, 4), float64],) */;
    %1097 = %1096.0;
    %1098 = cast(meta[relay.Constant][53] /* ty=Tensor[(363), uint32] */, dtype="uint32") /* ty=Tensor[(363), uint32] */;
    %1099 = reshape(%1098, newshape=[363]) /* ty=Tensor[(363), uint32] */;
    %1100 = @func_1964(%1099) /* ty=(Tensor[(6, 13, 4), float64], Tensor[(11, 3, 11), uint32], Tensor[(363), uint32]) */;
    %1101 = %1100.0;
    %1102 = cast(%1101, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
    %1103 = shape_of(%1097, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1104 = cast(%1097, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
    %1105 = dyn.reshape(%1102, %1103, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1106 = @func_2804(%1089, %1090) /* ty=Tensor[(16, 14, 5), float32] */;
    %1107 = %1091.0;
    %1108 = @func_4123(%1094, %1095) /* ty=Tensor[(14, 4, 8), bool] */;
    %1109 = floor_mod(%1104, %1105) /* ty=Tensor[(6, 13, 4), float32] */;
    (%1106, meta[relay.Constant][52] /* ty=Tensor[(1120, 1), float32] */, meta[relay.Constant][53] /* ty=Tensor[(363), uint32] */, %1107, %1108, %var_6478, %var_6479, %1109)
  };
  %1110(%var_6515, %var_6516) /* ty=(Tensor[(16, 14, 5), float32], Tensor[(1120, 1), float32], Tensor[(363), uint32], Tensor[(8, 14, 10), int8], Tensor[(14, 4, 8), bool], bool, Tensor[(448), bool], Tensor[(6, 13, 4), float32]) */
}

def @func_2034(%var_2033: Tensor[(6, 13, 4), float32]) -> (Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), bool]) {
  %1122 = fn (%var_2027: Tensor[(6, 13, 4), float32]) -> (Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), bool]) {
    %1111 = @func_1769() /* ty=(Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(112), int8], Tensor[(1120), int8]) */;
    %1112 = %1111.0;
    %1113 = cast(%1112, dtype="float32") /* ty=Tensor[(6, 13, 4), float32] */;
    %1114 = reshape(%1113, newshape=[1, 312]) /* ty=Tensor[(1, 312), float32] */;
    %1115 = @func_1535(%1114) /* ty=(Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32], Tensor[(1, 312), float32]) */;
    %1116 = %1115.1;
    %1117 = cast(%var_2027, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
    %1118 = shape_of(%1116, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1119 = cast(%1116, dtype="bool") /* ty=Tensor[(6, 13, 4), bool] */;
    %1120 = dyn.reshape(%1117, %1118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1121 = logical_and(%1119, %1120) /* ty=Tensor[(6, 13, 4), bool] */;
    (%1112, %1121)
  };
  %1122(%var_2033) /* ty=(Tensor[(6, 13, 4), float32], Tensor[(6, 13, 4), bool]) */
}

def @func_2939() -> (Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) {
  @func_2937() /* ty=(Tensor[(8, 14, 10), int8], Tensor[(6, 13, 4), float32], Tensor[(8, 14, 10), int8], Tensor[(56, 2), int8], Tensor[(4, 11, 16), int32], Tensor[(4, 11, 16), int32], Tensor[(6, 13, 4), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen379/build/output.py", line 3592, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:12:01] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

