==========mod==========
#[version = "0.0.5"]
def @func_6594() -> (Tensor[(16), uint64],) {
  %0 = @func_766() /* ty=Tensor[(16), uint64] */;
  (%0,)
}

def @func_9747() -> (uint64,) {
  %1 = @func_4503() /* ty=(Tensor[(16), uint64], uint64) */;
  %2 = %1.1;
  (%2,)
}

def @func_6909() -> (uint64, Tensor[(16), uint64], uint64) {
  %3 = @func_4397() /* ty=(uint64,) */;
  %4 = @func_4861() /* ty=(Tensor[(16), uint64],) */;
  %5 = @func_3057() /* ty=(uint64,) */;
  %6 = %3.0;
  %7 = %4.0;
  %8 = %5.0;
  (%6, %7, %8)
}

def @func_2700(%var_2693: Tensor[(9, 8, 3), float64]) -> (Tensor[(9, 8, 3), float64],) {
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 8, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 8, 3), float64] */;
  %10 = shape_of(%var_2693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%var_2693, dtype="float64") /* ty=Tensor[(9, 8, 3), float64] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %13 = divide(%11, %12) /* ty=Tensor[(9, 8, 3), float64] */;
  (%13,)
}

def @func_3595() -> Tensor[(16), uint64] {
  @func_1116() /* ty=Tensor[(16), uint64] */
}

def @func_9047(%var_9024: Tensor[(7, 6, 13), int64], %var_9025: Tensor[(7, 6, 13), int64], %var_9038: Tensor[(7, 6, 13), int64]) -> (Tensor[(16), uint64], Tensor[(7, 6, 13), int64], Tensor[(16), uint64]) {
  %14 = cast(%var_9025, dtype="int64") /* ty=Tensor[(7, 6, 13), int64] */;
  %15 = shape_of(%var_9024, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%var_9024, dtype="int64") /* ty=Tensor[(7, 6, 13), int64] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %18 = logical_xor(%16, %17) /* ty=Tensor[(7, 6, 13), int64] */;
  %19 = cast(%var_9038, dtype="int64") /* ty=Tensor[(7, 6, 13), int64] */;
  %20 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%18, dtype="int64") /* ty=Tensor[(7, 6, 13), int64] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %23 = @func_490() /* ty=(Tensor[(16), uint64],) */;
  %24 = @func_3977() /* ty=Tensor[(16), uint64] */;
  %25 = left_shift(%21, %22) /* ty=Tensor[(7, 6, 13), int64] */;
  %26 = %23.0;
  (%24, %25, %26)
}

def @func_718() -> (uint64, Tensor[(16), uint64]) {
  %27 = @func_364() /* ty=uint64 */;
  %28 = @func_467() /* ty=Tensor[(16), uint64] */;
  (%27, %28)
}

def @func_3082(%var_3073: Tensor[(5, 15, 12), float64], %var_3080: Tensor[(270), int32]) -> (Tensor[(5, 15, 12), float64], Tensor[(16), uint64], Tensor[(6, 15, 3), float64], Tensor[(270), int32]) {
  %29 = cast(%var_3073, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %30 = @func_1904() /* ty=(Tensor[(16), uint64],) */;
  %31 = cast(%var_3080, dtype="int32") /* ty=Tensor[(270), int32] */;
  %32 = cast(%var_3080, dtype="float64") /* ty=Tensor[(270), float64] */;
  %33 = reshape(%31, newshape=[6, 15, 3]) /* ty=Tensor[(6, 15, 3), int32] */;
  %34 = reshape(%32, newshape=[6, 15, 3]) /* ty=Tensor[(6, 15, 3), float64] */;
  %35 = @func_274(%33, %34) /* ty=(Tensor[(6, 15, 3), float64],) */;
  %36 = log10(%29) /* ty=Tensor[(5, 15, 12), float64] */;
  %37 = %30.0;
  %38 = %35.0;
  (%36, %37, %38, %var_3080)
}

def @func_1084() -> (Tensor[(16), uint64],) {
  %39 = @func_490() /* ty=(Tensor[(16), uint64],) */;
  %40 = %39.0;
  (%40,)
}

def @func_320() -> (Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) {
  %41 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 6, 11), float32] */, dtype="float32") /* ty=Tensor[(7, 6, 11), float32] */;
  %42 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 6, 11), float32] */, dtype="float32") /* ty=Tensor[(7, 6, 11), float32] */;
  %43 = cast(meta[relay.Constant][2] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(16), uint64] */, dtype="uint64") /* ty=Tensor[(16), uint64] */;
  %45 = reshape(%43, newshape=[]) /* ty=uint64 */;
  %46 = reshape(%44, newshape=[1, 16]) /* ty=Tensor[(1, 16), uint64] */;
  %47 = @func_107(%45, %46) /* ty=(Tensor[(1, 16), bool],) */;
  %48 = log10(%41) /* ty=Tensor[(7, 6, 11), float32] */;
  %49 = log2(%42) /* ty=Tensor[(7, 6, 11), float32] */;
  %50 = %47.0;
  (%48, %49, %50, meta[relay.Constant][2] /* ty=uint64 */, meta[relay.Constant][3] /* ty=Tensor[(16), uint64] */)
}

def @func_438(%var_430: Tensor[(3, 11, 16), uint64]) -> (Tensor[(3, 11, 16), uint32], Tensor[(3, 11, 16), float32]) {
  %51 = @func_364() /* ty=uint64 */;
  %52 = cast(%51, dtype="uint32") /* ty=uint32 */;
  %53 = cast(%var_430, dtype="uint32") /* ty=Tensor[(3, 11, 16), uint32] */;
  %54 = cast(%var_430, dtype="float32") /* ty=Tensor[(3, 11, 16), float32] */;
  %55 = logical_xor(%52, %53) /* ty=Tensor[(3, 11, 16), uint32] */;
  %56 = sqrt(%54) /* ty=Tensor[(3, 11, 16), float32] */;
  (%55, %56)
}

def @func_3115() -> Tensor[(16), uint64] {
  %57 = @func_490() /* ty=(Tensor[(16), uint64],) */;
  %57.0
}

def @func_7375(%var_7365: Tensor[(8, 13), float64]) -> Tensor[(8, 13), float64] {
  %58 = cast(%var_7365, dtype="float64") /* ty=Tensor[(8, 13), float64] */;
  sin(%58) /* ty=Tensor[(8, 13), float64] */
}

def @func_4397() -> (uint64,) {
  %59 = @func_3563() /* ty=(Tensor[(16), uint64], uint64) */;
  %60 = %59.1;
  (%60,)
}

def @func_4019(%var_3988: Tensor[(8, 7, 15), float32], %var_3998: Tensor[(900), float64], %var_3999: Tensor[(3, 90), int32], %var_4007: Tensor[(24, 14), bool]) -> (Tensor[(16), uint64], Tensor[(900), float64], Tensor[(3, 90), int32], Tensor[(8, 7, 15), float32], Tensor[(16, 3, 7), bool], Tensor[(24, 14), bool]) {
  %61 = cast(%var_3998, dtype="float64") /* ty=Tensor[(900), float64] */;
  %62 = cast(%var_3999, dtype="int32") /* ty=Tensor[(3, 90), int32] */;
  %63 = reshape(%61, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float64] */;
  %64 = reshape(%62, newshape=[270]) /* ty=Tensor[(270), int32] */;
  %65 = @func_3082(%63, %64) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(16), uint64], Tensor[(6, 15, 3), float64], Tensor[(270), int32]) */;
  %66 = cast(%var_3988, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
  %67 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(8, 7, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 7, 15), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %70 = floor_mod(%68, %69) /* ty=Tensor[(8, 7, 15), float32] */;
  %71 = cast(%70, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
  %72 = cast(%var_4007, dtype="bool") /* ty=Tensor[(24, 14), bool] */;
  %73 = reshape(%72, newshape=[16, 3, 7]) /* ty=Tensor[(16, 3, 7), bool] */;
  %74 = @func_3924(%73) /* ty=(Tensor[(16, 3, 7), bool], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %75 = %65.1;
  %76 = acos(%71) /* ty=Tensor[(8, 7, 15), float32] */;
  %77 = %74.0;
  (%75, %var_3998, %var_3999, %76, %77, %var_4007)
}

def @func_7119(%var_7092: Tensor[(364), float32], %var_7096: Tensor[(140, 1), float32]) -> (uint64, Tensor[(16), uint64], Tensor[(32), float64], Tensor[(364), float32], Tensor[(364), float32], Tensor[(140), float32], Tensor[(140, 1), float32], Tensor[(1, 2, 3), float32]) {
  %78 = @func_6909() /* ty=(uint64, Tensor[(16), uint64], uint64) */;
  %79 = cast(meta[relay.Constant][5] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %80 = reshape(%79, newshape=[8, 1, 4]) /* ty=Tensor[(8, 1, 4), float64] */;
  %81 = @func_5146(%80) /* ty=(Tensor[(8, ?, 4), float32], Tensor[(16), uint64], Tensor[(8, 1, 4), float64], uint64, Tensor[(16), uint64]) */;
  %82 = cast(%var_7092, dtype="float32") /* ty=Tensor[(364), float32] */;
  %83 = reshape(%82, newshape=[364]) /* ty=Tensor[(364), float32] */;
  %84 = @func_1250(%83) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */;
  %85 = cast(%var_7096, dtype="float32") /* ty=Tensor[(140, 1), float32] */;
  %86 = reshape(%85, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %87 = @func_2933(%86) /* ty=(Tensor[(16), uint64], Tensor[(140), float32], Tensor[(14, 10, ?), float32]) */;
  %88 = cast(%var_7096, dtype="float32") /* ty=Tensor[(140, 1), float32] */;
  %89 = reshape(%88, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %90 = @func_5760(%89) /* ty=(Tensor[(16), uint64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32], Tensor[(16), uint64], Tensor[(7, 52), int8], Tensor[(14, 10, ?), int64], Tensor[(140), float32], Tensor[(7, 52), int32], Tensor[(7, 52), bool]) */;
  %91 = %78.2;
  %92 = %81.1;
  %93 = %84.2;
  %94 = %87.1;
  %95 = %90.2;
  (%91, %92, meta[relay.Constant][5] /* ty=Tensor[(32), float64] */, %93, %var_7092, %94, %var_7096, %95)
}

def @func_7934() -> (Tensor[(16), uint64], Tensor[(6), float32], Tensor[(6), float32]) {
  %96 = cast(meta[relay.Constant][6] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %97 = reshape(%96, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %98 = @func_3586(%97) /* ty=(Tensor[(16), uint64], Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
  %99 = @func_5018() /* ty=Tensor[(16), uint64] */;
  %100 = %98.2;
  (%99, %100, meta[relay.Constant][6] /* ty=Tensor[(6), float32] */)
}

def @func_9277() -> (uint64, Tensor[(16), uint64], Tensor[(16, 16), float64]) {
  %101 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 16), float64] */, dtype="float64") /* ty=Tensor[(16, 16), float64] */;
  %102 = reshape(%101, newshape=[4, 8, 8]) /* ty=Tensor[(4, 8, 8), float64] */;
  %103 = @func_6136(%102) /* ty=(uint64, Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(4, 8, 8), uint64], Tensor[(16), uint64], Tensor[(4, 8, 8), float32]) */;
  %104 = @func_905() /* ty=uint64 */;
  %105 = %103.2;
  (%104, %105, meta[relay.Constant][7] /* ty=Tensor[(16, 16), float64] */)
}

def @func_5662() -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(1456), float32], Tensor[(364), uint16]) {
  %106 = @func_3161() /* ty=(Tensor[(16), uint64],) */;
  %107 = @func_3734() /* ty=(Tensor[(16), uint64],) */;
  %108 = cast(meta[relay.Constant][8] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %109 = cast(meta[relay.Constant][9] /* ty=Tensor[(91, 4), float32] */, dtype="float32") /* ty=Tensor[(91, 4), float32] */;
  %110 = reshape(%108, newshape=[1456, 1]) /* ty=Tensor[(1456, 1), float32] */;
  %111 = reshape(%109, newshape=[364]) /* ty=Tensor[(364), float32] */;
  %112 = @func_3257(%110, %111) /* ty=(uint64, Tensor[(3, 11, 16), float32], Tensor[(1456, 1), float32], Tensor[(140), float32], uint64, Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */;
  %113 = %112.7;
  %114 = cast(meta[relay.Constant][9] /* ty=Tensor[(91, 4), float32] */, dtype="uint16") /* ty=Tensor[(91, 4), uint16] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(1), int32] */;
  %116 = cast(%113, dtype="uint16") /* ty=Tensor[(364), uint16] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %118 = @func_3115() /* ty=Tensor[(16), uint64] */;
  %119 = %106.0;
  %120 = %107.0;
  %121 = bitwise_xor(%116, %117) /* ty=Tensor[(364), uint16] */;
  (%118, %119, %120, meta[relay.Constant][8] /* ty=Tensor[(1456), float32] */, %121)
}

def @func_9727(%var_9694: Tensor[(4, 1, 4), float64]) -> (Tensor[(4, 1, 4), float64], Tensor[(16), uint64], Tensor[(7), uint64], Tensor[(16), uint64], Tensor[(1, 2, 3), float32], Tensor[(6), float32]) {
  %122 = cast(%var_9694, dtype="float64") /* ty=Tensor[(4, 1, 4), float64] */;
  %123 = cast(meta[relay.Constant][10] /* ty=Tensor[(7), uint64] */, dtype="uint64") /* ty=Tensor[(7), uint64] */;
  %124 = reshape(%123, newshape=[1, 7]) /* ty=Tensor[(1, 7), uint64] */;
  %125 = @func_8006(%124) /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(7, 1), bool], Tensor[(1, 7), uint64]) */;
  %126 = cast(meta[relay.Constant][11] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %127 = reshape(%126, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), float32] */;
  %128 = @func_639(%127) /* ty=(Tensor[(1, 2, 3), float32],) */;
  %129 = erf(%122) /* ty=Tensor[(4, 1, 4), float64] */;
  %130 = %125.0;
  %131 = @func_8946() /* ty=Tensor[(16), uint64] */;
  %132 = %128.0;
  (%129, %130, meta[relay.Constant][10] /* ty=Tensor[(7), uint64] */, %131, %132, meta[relay.Constant][11] /* ty=Tensor[(6), float32] */)
}

def @func_3499(%var_3479: Tensor[(3, 12, 14), float64]) -> (Tensor[(3, 12, 14), float64],) {
  %133 = cast(%var_3479, dtype="float64") /* ty=Tensor[(3, 12, 14), float64] */;
  %134 = log10(%133) /* ty=Tensor[(3, 12, 14), float64] */;
  (%134,)
}

def @func_7258() -> Tensor[(16), uint64] {
  %135 = @func_3147() /* ty=(Tensor[(16), uint64],) */;
  %135.0
}

def @func_3644() -> uint64 {
  %136 = @func_2687() /* ty=(uint64, uint64) */;
  %136.1
}

def @func_7981(%var_7968: Tensor[(2, 11, 6), uint32], %var_7969: Tensor[(2, 11, 6), uint32]) -> (Tensor[(2, 11, 6), uint32], Tensor[(2, 11, 6), float32]) {
  %137 = cast(%var_7969, dtype="uint32") /* ty=Tensor[(2, 11, 6), uint32] */;
  %138 = shape_of(%var_7968, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%var_7968, dtype="uint32") /* ty=Tensor[(2, 11, 6), uint32] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %141 = cast(%var_7968, dtype="float32") /* ty=Tensor[(2, 11, 6), float32] */;
  %142 = bitwise_or(%139, %140) /* ty=Tensor[(2, 11, 6), uint32] */;
  %143 = exp(%141) /* ty=Tensor[(2, 11, 6), float32] */;
  (%142, %143)
}

def @func_4974(%var_4967: Tensor[(704), uint64]) -> (uint64, Tensor[(1, 16), bool], Tensor[(2, 8), float32], Tensor[(4, 11, 16), bool], Tensor[(704), uint64]) {
  %144 = @func_2083() /* ty=(uint64, uint64) */;
  %145 = %144.1;
  %146 = cast(%145, dtype="uint64") /* ty=uint64 */;
  %147 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 8), uint64] */, dtype="uint64") /* ty=Tensor[(2, 8), uint64] */;
  %148 = reshape(%146, newshape=[]) /* ty=uint64 */;
  %149 = reshape(%147, newshape=[1, 16]) /* ty=Tensor[(1, 16), uint64] */;
  %150 = @func_107(%148, %149) /* ty=(Tensor[(1, 16), bool],) */;
  %151 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 8), uint64] */, dtype="float32") /* ty=Tensor[(2, 8), float32] */;
  %152 = cast(%var_4967, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %153 = reshape(%152, newshape=[4, 11, 16]) /* ty=Tensor[(4, 11, 16), uint64] */;
  %154 = %150.0;
  %155 = log2(%151) /* ty=Tensor[(2, 8), float32] */;
  %156 = @func_2970(%153) /* ty=Tensor[(4, 11, 16), bool] */;
  (%145, %154, %155, %156, %var_4967)
}

def @func_7893() -> (Tensor[(16), uint64], Tensor[(10, 140), float32], Tensor[(10, 140), float32]) {
  %157 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 140), float32] */, dtype="float32") /* ty=Tensor[(10, 140), float32] */;
  %158 = reshape(%157, newshape=[10, 140]) /* ty=Tensor[(10, 140), float32] */;
  %159 = @func_5332(%158) /* ty=(Tensor[(16), uint64], Tensor[(10, 140), float32], Tensor[(1, 140), float64]) */;
  %160 = @func_1116() /* ty=Tensor[(16), uint64] */;
  %161 = %159.1;
  (%160, %161, meta[relay.Constant][13] /* ty=Tensor[(10, 140), float32] */)
}

def @func_5018() -> Tensor[(16), uint64] {
  %162 = @func_2449() /* ty=(Tensor[(16), uint64],) */;
  %162.0
}

def @func_1250(%var_1240: Tensor[(364), float32]) -> (Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) {
  %163 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %164 = cast(%var_1240, dtype="float32") /* ty=Tensor[(364), float32] */;
  %165 = reshape(%164, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), float32] */;
  %166 = %163.4;
  %167 = @func_560(%165) /* ty=Tensor[(2, 14, 13), float32] */;
  (%166, %167, %var_1240)
}

def @func_2636(%var_2532: Tensor[(7, 16, 13), float32], %var_2547: Tensor[(35, 4), float32], %var_2551: Tensor[(35, 4), float32]) -> (Tensor[(140), bool], Tensor[(35, 4), bool], Tensor[(16), uint64], Tensor[(7, 16, 13), int16], Tensor[(3, 11, 16), float32], Tensor[(528), uint64], Tensor[(7, 16, 13), float64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(364), float32], Tensor[(3, 11, 16), float32]) {
  %168 = cast(%var_2547, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
  %169 = reshape(%168, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %170 = @func_2405(%169) /* ty=(Tensor[(16), uint64], Tensor[(140), bool], Tensor[(140), int64], uint64) */;
  %171 = cast(%var_2551, dtype="bool") /* ty=Tensor[(35, 4), bool] */;
  %172 = shape_of(%var_2547, dtype="int32") /* ty=Tensor[(2), int32] */;
  %173 = cast(%var_2547, dtype="bool") /* ty=Tensor[(35, 4), bool] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %175 = @func_1793() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %176 = cast(%var_2532, dtype="float32") /* ty=Tensor[(7, 16, 13), float32] */;
  %177 = asin(%176) /* ty=Tensor[(7, 16, 13), float32] */;
  %178 = cast(%177, dtype="float32") /* ty=Tensor[(7, 16, 13), float32] */;
  %179 = log(%178) /* ty=Tensor[(7, 16, 13), float32] */;
  %180 = cast(%var_2532, dtype="int16") /* ty=Tensor[(7, 16, 13), int16] */;
  %181 = shape_of(%179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(%179, dtype="int16") /* ty=Tensor[(7, 16, 13), int16] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %184 = cast(meta[relay.Constant][14] /* ty=Tensor[(528), uint64] */, dtype="uint64") /* ty=Tensor[(528), uint64] */;
  %185 = reshape(%184, newshape=[3, 11, 16]) /* ty=Tensor[(3, 11, 16), uint64] */;
  %186 = @func_438(%185) /* ty=(Tensor[(3, 11, 16), uint32], Tensor[(3, 11, 16), float32]) */;
  %187 = cast(%179, dtype="float64") /* ty=Tensor[(7, 16, 13), float64] */;
  %188 = @func_1793() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %189 = @func_2449() /* ty=(Tensor[(16), uint64],) */;
  %190 = @func_1904() /* ty=(Tensor[(16), uint64],) */;
  %191 = @func_2326() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64, uint64, Tensor[(364), float32]) */;
  %192 = %186.1;
  %193 = cast(%192, dtype="uint64") /* ty=Tensor[(3, 11, 16), uint64] */;
  %194 = reshape(%193, newshape=[3, 11, 16]) /* ty=Tensor[(3, 11, 16), uint64] */;
  %195 = @func_438(%194) /* ty=(Tensor[(3, 11, 16), uint32], Tensor[(3, 11, 16), float32]) */;
  %196 = %170.1;
  %197 = greater(%173, %174) /* ty=Tensor[(35, 4), bool] */;
  %198 = %175.0;
  %199 = add(%182, %183) /* ty=Tensor[(7, 16, 13), int16] */;
  %200 = exp(%187) /* ty=Tensor[(7, 16, 13), float64] */;
  %201 = %188.1;
  %202 = %189.0;
  %203 = %190.0;
  %204 = %191.4;
  %205 = %195.1;
  (%196, %197, %198, %199, %192, meta[relay.Constant][14] /* ty=Tensor[(528), uint64] */, %200, %201, %202, %203, %204, %205)
}

def @func_5190() -> (Tensor[(16), uint64],) {
  %206 = @func_1116() /* ty=Tensor[(16), uint64] */;
  (%206,)
}

def @func_1358(%var_1321: Tensor[(364), float32]) -> (uint64, uint64, Tensor[(2, 14, 13), float32], Tensor[(16), uint64], uint64, Tensor[(364), float64]) {
  %207 = @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %208 = @func_718() /* ty=(uint64, Tensor[(16), uint64]) */;
  %209 = cast(%var_1321, dtype="float32") /* ty=Tensor[(364), float32] */;
  %210 = reshape(%209, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), float32] */;
  %211 = @func_1039() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %212 = cast(%var_1321, dtype="float32") /* ty=Tensor[(364), float32] */;
  %213 = sqrt(%212) /* ty=Tensor[(364), float32] */;
  %214 = cast(%213, dtype="float64") /* ty=Tensor[(364), float64] */;
  %215 = %207.2;
  %216 = %208.0;
  %217 = @func_560(%210) /* ty=Tensor[(2, 14, 13), float32] */;
  %218 = %211.1;
  %219 = @func_905() /* ty=uint64 */;
  %220 = cos(%214) /* ty=Tensor[(364), float64] */;
  (%215, %216, %217, %218, %219, %220)
}

def @func_6955(%var_6946: Tensor[(7, 12, 4), float32]) -> (Tensor[(7, 12, 4), float32], Tensor[(1, 2, 3), float32], Tensor[(12), float32]) {
  %221 = cast(%var_6946, dtype="float32") /* ty=Tensor[(7, 12, 4), float32] */;
  %222 = cast(meta[relay.Constant][15] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
  %223 = reshape(%222, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float32] */;
  %224 = @func_6529(%223) /* ty=(Tensor[(1, 2, 3), float32], Tensor[(6), float32], Tensor[(3, 2, 2), int16], Tensor[(16), uint64]) */;
  %225 = sqrt(%221) /* ty=Tensor[(7, 12, 4), float32] */;
  %226 = %224.0;
  (%225, %226, meta[relay.Constant][15] /* ty=Tensor[(12), float32] */)
}

def @func_5760(%var_5738: Tensor[(140), float32]) -> (Tensor[(16), uint64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32], Tensor[(16), uint64], Tensor[(7, 52), int8], Tensor[(14, 10, ?), int64], Tensor[(140), float32], Tensor[(7, 52), int32], Tensor[(7, 52), bool]) {
  %227 = @func_5573() /* ty=(Tensor[(16), uint64],) */;
  %228 = @func_2687() /* ty=(uint64, uint64) */;
  %229 = cast(meta[relay.Constant][16] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %230 = reshape(%229, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), float32] */;
  %231 = @func_639(%230) /* ty=(Tensor[(1, 2, 3), float32],) */;
  %232 = @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %233 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 52), float32] */, dtype="float32") /* ty=Tensor[(7, 52), float32] */;
  %234 = reshape(%233, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), float32] */;
  %235 = @func_560(%234) /* ty=Tensor[(2, 14, 13), float32] */;
  %236 = cast(%235, dtype="int8") /* ty=Tensor[(2, 14, 13), int8] */;
  %237 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(7, 52), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %238 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 52), float32] */, dtype="int8") /* ty=Tensor[(7, 52), int8] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %240 = cast(%var_5738, dtype="float32") /* ty=Tensor[(140), float32] */;
  %241 = cast(%var_5738, dtype="float32") /* ty=Tensor[(140), float32] */;
  %242 = reshape(%240, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %243 = reshape(%241, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %244 = @func_987(%242, %243) /* ty=(Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
  %245 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 52), float32] */, dtype="float32") /* ty=Tensor[(7, 52), float32] */;
  %246 = acos(%245) /* ty=Tensor[(7, 52), float32] */;
  %247 = cast(%235, dtype="int32") /* ty=Tensor[(2, 14, 13), int32] */;
  %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(2), int32] */;
  %249 = cast(%246, dtype="int32") /* ty=Tensor[(7, 52), int32] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %251 = cast(%235, dtype="bool") /* ty=Tensor[(2, 14, 13), bool] */;
  %252 = shape_of(%246, dtype="int32") /* ty=Tensor[(2), int32] */;
  %253 = cast(%246, dtype="bool") /* ty=Tensor[(7, 52), bool] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %255 = %227.0;
  %256 = %228.1;
  %257 = %231.0;
  %258 = %232.3;
  %259 = bitwise_or(%238, %239) /* ty=Tensor[(7, 52), int8] */;
  %260 = %244.0;
  %261 = bitwise_xor(%249, %250) /* ty=Tensor[(7, 52), int32] */;
  %262 = greater(%253, %254) /* ty=Tensor[(7, 52), bool] */;
  (%255, %256, %257, meta[relay.Constant][16] /* ty=Tensor[(6), float32] */, %258, %259, %260, %var_5738, %261, %262)
}

def @func_7561() -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
  %263 = @func_6909() /* ty=(uint64, Tensor[(16), uint64], uint64) */;
  %264 = @func_3312() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64) */;
  %265 = %263.1;
  %266 = %264.0;
  (%265, %266)
}

def @func_5573() -> (Tensor[(16), uint64],) {
  %267 = @func_5190() /* ty=(Tensor[(16), uint64],) */;
  %268 = %267.0;
  (%268,)
}

def @func_5848(%var_5841: Tensor[(3, 12, 14), float64]) -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(182, 2), float32], Tensor[(504), float64], Tensor[(3, 12, 14), bool]) {
  %269 = @func_4671() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %270 = cast(meta[relay.Constant][18] /* ty=Tensor[(182, 2), float32] */, dtype="float32") /* ty=Tensor[(182, 2), float32] */;
  %271 = reshape(%270, newshape=[364]) /* ty=Tensor[(364), float32] */;
  %272 = @func_1250(%271) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */;
  %273 = cast(meta[relay.Constant][19] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %274 = reshape(%273, newshape=[3, 12, 14]) /* ty=Tensor[(3, 12, 14), float64] */;
  %275 = @func_3499(%274) /* ty=(Tensor[(3, 12, 14), float64],) */;
  %276 = %275.0;
  %277 = cast(%var_5841, dtype="bool") /* ty=Tensor[(3, 12, 14), bool] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%276, dtype="bool") /* ty=Tensor[(3, 12, 14), bool] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %281 = %269.1;
  %282 = @func_1957() /* ty=Tensor[(16), uint64] */;
  %283 = %272.0;
  %284 = less(%279, %280) /* ty=Tensor[(3, 12, 14), bool] */;
  (%281, %282, %283, meta[relay.Constant][18] /* ty=Tensor[(182, 2), float32] */, meta[relay.Constant][19] /* ty=Tensor[(504), float64] */, %284)
}

def @func_5957() -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) {
  %285 = @func_5237() /* ty=(Tensor[(16), uint64],) */;
  %286 = @func_2897() /* ty=(Tensor[(16), uint64], Tensor[(?, 16), float64], Tensor[(16), uint64], Tensor[(1, 140), float32]) */;
  %287 = @func_3977() /* ty=Tensor[(16), uint64] */;
  %288 = @func_766() /* ty=Tensor[(16), uint64] */;
  %289 = %285.0;
  %290 = %286.2;
  (%287, %288, %289, %290)
}

def @func_2326() -> (Tensor[(16), uint64], Tensor[(16), uint64], uint64, uint64, Tensor[(364), float32]) {
  %291 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %292 = @func_718() /* ty=(uint64, Tensor[(16), uint64]) */;
  %293 = cast(meta[relay.Constant][20] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %294 = reshape(%293, newshape=[364]) /* ty=Tensor[(364), float32] */;
  %295 = @func_1358(%294) /* ty=(uint64, uint64, Tensor[(2, 14, 13), float32], Tensor[(16), uint64], uint64, Tensor[(364), float64]) */;
  %296 = cast(meta[relay.Constant][20] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %297 = %291.0;
  %298 = @func_467() /* ty=Tensor[(16), uint64] */;
  %299 = %292.0;
  %300 = %295.0;
  %301 = acosh(%296) /* ty=Tensor[(364), float32] */;
  (%297, %298, %299, %300, %301)
}

def @func_8992(%var_8954: Tensor[(8, 3, 11), int8]) -> (Tensor[(8, 3, 11), int8], Tensor[(16), uint64], Tensor[(16), uint64]) {
  %302 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 3, 1), int8] */, dtype="int8") /* ty=Tensor[(8, 3, 1), int8] */;
  %303 = cast(%var_8954, dtype="int8") /* ty=Tensor[(8, 3, 11), int8] */;
  %304 = right_shift(%302, %303) /* ty=Tensor[(8, 3, 11), int8] */;
  %305 = @func_8946() /* ty=Tensor[(16), uint64] */;
  %306 = @func_766() /* ty=Tensor[(16), uint64] */;
  (%304, %305, %306)
}

def @main(%var_9778: Tensor[(7, 7), float32]) -> (Tensor[(7, 7), float32],) {
  %307 = cast(%var_9778, dtype="float32") /* ty=Tensor[(7, 7), float32] */;
  %308 = log(%307) /* ty=Tensor[(7, 7), float32] */;
  (%308,)
}

def @func_9409() -> (Tensor[(16), uint64],) {
  %309 = @func_9277() /* ty=(uint64, Tensor[(16), uint64], Tensor[(16, 16), float64]) */;
  %310 = %309.1;
  (%310,)
}

def @func_905() -> uint64 {
  @func_364() /* ty=uint64 */
}

def @func_3057() -> (uint64,) {
  %311 = @func_1861() /* ty=uint64 */;
  (%311,)
}

def @func_1097() -> (Tensor[(16), uint64],) {
  %312 = @func_766() /* ty=Tensor[(16), uint64] */;
  (%312,)
}

def @func_987(%var_938: Tensor[(14, 10, 1), float32], %var_946: Tensor[(14, 10, 1), float32]) -> (Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) {
  %313 = cast(%var_938, dtype="float32") /* ty=Tensor[(14, 10, 1), float32] */;
  %314 = atanh(%313) /* ty=Tensor[(14, 10, 1), float32] */;
  %315 = cast(%var_946, dtype="int64") /* ty=Tensor[(14, 10, 1), int64] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="int64") /* ty=Tensor[(14, 10, 1), int64] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %319 = cast(meta[relay.Constant][22] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %320 = reshape(%319, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), float32] */;
  %321 = @func_639(%320) /* ty=(Tensor[(1, 2, 3), float32],) */;
  %322 = bitwise_and(%317, %318) /* ty=Tensor[(14, 10, ?), int64] */;
  %323 = @func_364() /* ty=uint64 */;
  %324 = %321.0;
  (%322, %323, %324, meta[relay.Constant][22] /* ty=Tensor[(6), float32] */)
}

def @func_1861() -> uint64 {
  %325 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %325.3
}

def @func_3336(%var_3319: Tensor[(2, 6, 7), float64]) -> Tensor[(2, 6, 7), float64] {
  %326 = cast(%var_3319, dtype="float64") /* ty=Tensor[(2, 6, 7), float64] */;
  log2(%326) /* ty=Tensor[(2, 6, 7), float64] */
}

def @func_4671() -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
  %327 = @func_1084() /* ty=(Tensor[(16), uint64],) */;
  %328 = @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %329 = %327.0;
  %330 = %328.0;
  (%329, %330)
}

def @func_4439(%var_4407: Tensor[(2, 16, 12), float32]) -> Tensor[(2, 16, 12), bool] {
  %331 = cast(%var_4407, dtype="float32") /* ty=Tensor[(2, 16, 12), float32] */;
  %332 = sqrt(%331) /* ty=Tensor[(2, 16, 12), float32] */;
  %333 = cast(%var_4407, dtype="bool") /* ty=Tensor[(2, 16, 12), bool] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%332, dtype="bool") /* ty=Tensor[(2, 16, 12), bool] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%335, %336) /* ty=Tensor[(2, 16, 12), bool] */
}

def @func_3000(%var_2994: Tensor[(15, 1, 2), bool], %var_2995: Tensor[(15, 5, 2), bool]) -> (Tensor[(15, 5, 2), bool],) {
  %337 = cast(%var_2994, dtype="bool") /* ty=Tensor[(15, 1, 2), bool] */;
  %338 = cast(%var_2995, dtype="bool") /* ty=Tensor[(15, 5, 2), bool] */;
  %339 = logical_or(%337, %338) /* ty=Tensor[(15, 5, 2), bool] */;
  (%339,)
}

def @func_7607(%var_7597: uint32, %var_7598: Tensor[(12, 13, 8), uint32]) -> Tensor[(12, 13, 8), uint32] {
  %340 = cast(%var_7597, dtype="uint32") /* ty=uint32 */;
  %341 = cast(%var_7598, dtype="uint32") /* ty=Tensor[(12, 13, 8), uint32] */;
  multiply(%340, %341) /* ty=Tensor[(12, 13, 8), uint32] */
}

def @func_8843() -> Tensor[(16), uint64] {
  %342 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %342.0
}

def @func_1116() -> Tensor[(16), uint64] {
  %343 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %343.0
}

def @func_4503() -> (Tensor[(16), uint64], uint64) {
  %344 = @func_1904() /* ty=(Tensor[(16), uint64],) */;
  %345 = %344.0;
  %346 = @func_4256() /* ty=uint64 */;
  (%345, %346)
}

def @func_6136(%var_6080: Tensor[(4, 8, 8), float64]) -> (uint64, Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(4, 8, 8), uint64], Tensor[(16), uint64], Tensor[(4, 8, 8), float32]) {
  %347 = @func_3026() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64) */;
  %348 = @func_3161() /* ty=(Tensor[(16), uint64],) */;
  %349 = cast(%var_6080, dtype="float64") /* ty=Tensor[(4, 8, 8), float64] */;
  %350 = acos(%349) /* ty=Tensor[(4, 8, 8), float64] */;
  %351 = cast(%var_6080, dtype="float64") /* ty=Tensor[(4, 8, 8), float64] */;
  %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%350, dtype="float64") /* ty=Tensor[(4, 8, 8), float64] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %355 = floor_divide(%353, %354) /* ty=Tensor[(4, 8, 8), float64] */;
  %356 = cast(%350, dtype="uint64") /* ty=Tensor[(4, 8, 8), uint64] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%355, dtype="uint64") /* ty=Tensor[(4, 8, 8), uint64] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %360 = @func_2449() /* ty=(Tensor[(16), uint64],) */;
  %361 = cast(%355, dtype="float32") /* ty=Tensor[(4, 8, 8), float32] */;
  %362 = %347.2;
  %363 = %348.0;
  %364 = @func_3595() /* ty=Tensor[(16), uint64] */;
  %365 = bitwise_xor(%358, %359) /* ty=Tensor[(4, 8, 8), uint64] */;
  %366 = %360.0;
  %367 = sinh(%361) /* ty=Tensor[(4, 8, 8), float32] */;
  (%362, %363, %364, %365, %366, %367)
}

def @func_8705() -> (Tensor[(7, 11, 8), uint8],) {
  %368 = @func_5688() /* ty=(Tensor[(7, 11, 8), float32], Tensor[(7, 11, 8), uint32]) */;
  %369 = %368.0;
  %370 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 11, 8), float32] */, dtype="uint8") /* ty=Tensor[(7, 11, 8), uint8] */;
  %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%369, dtype="uint8") /* ty=Tensor[(7, 11, 8), uint8] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %374 = logical_xor(%372, %373) /* ty=Tensor[(7, 11, 8), uint8] */;
  (%374,)
}

def @func_2186() -> (Tensor[(7, 6, 11), float32], Tensor[(16), uint64]) {
  %375 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %376 = @func_1039() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %377 = %375.0;
  %378 = %376.1;
  (%377, %378)
}

def @func_6740() -> (uint64,) {
  %379 = @func_4256() /* ty=uint64 */;
  (%379,)
}

def @func_3977() -> Tensor[(16), uint64] {
  %380 = @func_1793() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %380.1
}

def @func_560(%var_555: Tensor[(2, 14, 13), float32]) -> Tensor[(2, 14, 13), float32] {
  %381 = cast(%var_555, dtype="float32") /* ty=Tensor[(2, 14, 13), float32] */;
  exp(%381) /* ty=Tensor[(2, 14, 13), float32] */
}

def @func_9327(%var_9319: uint16, %var_9320: Tensor[(8, 8, 1), uint16]) -> Tensor[(8, 8, 1), uint16] {
  %382 = cast(%var_9319, dtype="uint16") /* ty=uint16 */;
  %383 = cast(%var_9320, dtype="uint16") /* ty=Tensor[(8, 8, 1), uint16] */;
  logical_xor(%382, %383) /* ty=Tensor[(8, 8, 1), uint16] */
}

def @func_5418() -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
  %384 = @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %385 = @func_5190() /* ty=(Tensor[(16), uint64],) */;
  %386 = %384.0;
  %387 = %385.0;
  (%386, %387)
}

def @func_8176() -> uint64 {
  @func_3210() /* ty=uint64 */
}

def @func_6406() -> (Tensor[(16), uint64], Tensor[(16), uint64], uint64, Tensor[(16), uint64], uint64, Tensor[(70, 2), float32]) {
  %388 = cast(meta[relay.Constant][24] /* ty=Tensor[(70, 2), float32] */, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
  %389 = cast(meta[relay.Constant][24] /* ty=Tensor[(70, 2), float32] */, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
  %390 = reshape(%388, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %391 = reshape(%389, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %392 = @func_987(%390, %391) /* ty=(Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
  %393 = @func_766() /* ty=Tensor[(16), uint64] */;
  %394 = @func_1539() /* ty=Tensor[(16), uint64] */;
  %395 = @func_364() /* ty=uint64 */;
  %396 = @func_5883() /* ty=Tensor[(16), uint64] */;
  %397 = %392.1;
  (%393, %394, %395, %396, %397, meta[relay.Constant][24] /* ty=Tensor[(70, 2), float32] */)
}

def @func_1904() -> (Tensor[(16), uint64],) {
  %398 = @func_1116() /* ty=Tensor[(16), uint64] */;
  (%398,)
}

def @func_5607() -> (uint64, Tensor[(16), uint64]) {
  %399 = @func_1485() /* ty=(Tensor[(16), uint64], uint64) */;
  %400 = @func_3563() /* ty=(Tensor[(16), uint64], uint64) */;
  %401 = %399.1;
  %402 = %400.0;
  (%401, %402)
}

def @func_854() -> Tensor[(16), uint64] {
  @func_467() /* ty=Tensor[(16), uint64] */
}

def @func_8759() -> (Tensor[(16), uint64], uint64) {
  %403 = @func_5607() /* ty=(uint64, Tensor[(16), uint64]) */;
  %404 = @func_5018() /* ty=Tensor[(16), uint64] */;
  %405 = %403.0;
  (%404, %405)
}

def @func_6171(%var_6151: Tensor[(13, 9, 13), float64]) -> (Tensor[(13, 9, 13), float64], Tensor[(16), uint64], Tensor[(16), uint64]) {
  %406 = cast(%var_6151, dtype="float64") /* ty=Tensor[(13, 9, 13), float64] */;
  %407 = @func_5190() /* ty=(Tensor[(16), uint64],) */;
  %408 = asin(%406) /* ty=Tensor[(13, 9, 13), float64] */;
  %409 = @func_5018() /* ty=Tensor[(16), uint64] */;
  %410 = %407.0;
  (%408, %409, %410)
}

def @func_8946() -> Tensor[(16), uint64] {
  %411 = @func_3312() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64) */;
  %411.0
}

def @func_3210() -> uint64 {
  %412 = @func_3026() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64) */;
  %412.2
}

def @func_6356(%var_6307: Tensor[(78), int16], %var_6309: Tensor[(13, 6, 12), int16], %var_6334: Tensor[(1400), float32], %var_6347: Tensor[(336), bool]) -> (Tensor[(16), uint64], Tensor[(78), int16], Tensor[(13, 6, 12), float32], Tensor[(16), uint64], Tensor[(1400), float32], Tensor[(16), uint64], Tensor[(336), bool]) {
  %413 = @func_4671() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %414 = cast(%var_6307, dtype="int16") /* ty=Tensor[(78), int16] */;
  %415 = reshape(%414, newshape=[13, 6, 1]) /* ty=Tensor[(13, 6, 1), int16] */;
  %416 = @func_6279(%415) /* ty=(Tensor[(13, 6, 12), int16], Tensor[(16), uint64]) */;
  %417 = %416.0;
  %418 = cast(%var_6309, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%417, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %422 = greater(%420, %421) /* ty=Tensor[(13, 6, 12), bool] */;
  %423 = cast(%422, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
  %424 = cast(%var_6334, dtype="float32") /* ty=Tensor[(1400), float32] */;
  %425 = reshape(%424, newshape=[10, 140]) /* ty=Tensor[(10, 140), float32] */;
  %426 = @func_5332(%425) /* ty=(Tensor[(16), uint64], Tensor[(10, 140), float32], Tensor[(1, 140), float64]) */;
  %427 = cast(%var_6347, dtype="bool") /* ty=Tensor[(336), bool] */;
  %428 = reshape(%427, newshape=[16, 3, 7]) /* ty=Tensor[(16, 3, 7), bool] */;
  %429 = @func_3924(%428) /* ty=(Tensor[(16, 3, 7), bool], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %430 = %413.1;
  %431 = acos(%423) /* ty=Tensor[(13, 6, 12), float32] */;
  %432 = %426.0;
  %433 = %429.2;
  (%430, %var_6307, %431, %432, %var_6334, %433, %var_6347)
}

def @func_2449() -> (Tensor[(16), uint64],) {
  %434 = @func_1039() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %435 = %434.0;
  (%435,)
}

def @func_9592() -> Tensor[(7, 6, 11), float32] {
  %436 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %436.0
}

def @func_2933(%var_2920: Tensor[(140), float32]) -> (Tensor[(16), uint64], Tensor[(140), float32], Tensor[(14, 10, ?), float32]) {
  %437 = @func_1485() /* ty=(Tensor[(16), uint64], uint64) */;
  %438 = cast(%var_2920, dtype="float32") /* ty=Tensor[(140), float32] */;
  %439 = cast(%var_2920, dtype="float32") /* ty=Tensor[(140), float32] */;
  %440 = reshape(%438, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %441 = reshape(%439, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %442 = @func_987(%440, %441) /* ty=(Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
  %443 = %442.0;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(14, 10, ?), float32] */;
  %445 = %437.0;
  %446 = asin(%444) /* ty=Tensor[(14, 10, ?), float32] */;
  (%445, %var_2920, %446)
}

def @func_5146(%var_5089: Tensor[(8, 1, 4), float64]) -> (Tensor[(8, ?, 4), float32], Tensor[(16), uint64], Tensor[(8, 1, 4), float64], uint64, Tensor[(16), uint64]) {
  %447 = cast(%var_5089, dtype="float64") /* ty=Tensor[(8, 1, 4), float64] */;
  %448 = asin(%447) /* ty=Tensor[(8, 1, 4), float64] */;
  %449 = cast(%var_5089, dtype="uint8") /* ty=Tensor[(8, 1, 4), uint8] */;
  %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%448, dtype="uint8") /* ty=Tensor[(8, 1, 4), uint8] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %453 = bitwise_or(%451, %452) /* ty=Tensor[(8, ?, 4), uint8] */;
  %454 = cast(%453, dtype="uint32") /* ty=Tensor[(8, ?, 4), uint32] */;
  %455 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%448, dtype="uint32") /* ty=Tensor[(8, 1, 4), uint32] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %458 = right_shift(%456, %457) /* ty=Tensor[(8, ?, 4), uint32] */;
  %459 = cast(%458, dtype="float32") /* ty=Tensor[(8, ?, 4), float32] */;
  %460 = @func_2186() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(16), uint64]) */;
  %461 = cast(%var_5089, dtype="float64") /* ty=Tensor[(8, 1, 4), float64] */;
  %462 = @func_3057() /* ty=(uint64,) */;
  %463 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %464 = log(%459) /* ty=Tensor[(8, ?, 4), float32] */;
  %465 = %460.1;
  %466 = atan(%461) /* ty=Tensor[(8, 1, 4), float64] */;
  %467 = %462.0;
  %468 = %463.0;
  (%464, %465, %466, %467, %468)
}

def @func_9631() -> (uint64,) {
  %469 = @func_6740() /* ty=(uint64,) */;
  %470 = %469.0;
  (%470,)
}

def @func_3343() -> (Tensor[(1, 16), bool],) {
  %471 = @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %472 = %471.1;
  (%472,)
}

def @func_4354() -> (Tensor[(16), uint64],) {
  %473 = @func_1904() /* ty=(Tensor[(16), uint64],) */;
  %474 = %473.0;
  (%474,)
}

def @func_5883() -> Tensor[(16), uint64] {
  @func_2789() /* ty=Tensor[(16), uint64] */
}

def @func_6823(%var_6801: Tensor[(4, 16, 8), float32], %var_6811: Tensor[(4, 16, 8), float32]) -> (Tensor[(4, 16, 8), float32], Tensor[(4, 16, 8), uint8]) {
  %475 = cast(%var_6801, dtype="float32") /* ty=Tensor[(4, 16, 8), float32] */;
  %476 = cast(%var_6811, dtype="uint8") /* ty=Tensor[(4, 16, 8), uint8] */;
  %477 = shape_of(%var_6801, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%var_6801, dtype="uint8") /* ty=Tensor[(4, 16, 8), uint8] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %480 = atanh(%475) /* ty=Tensor[(4, 16, 8), float32] */;
  %481 = subtract(%478, %479) /* ty=Tensor[(4, 16, 8), uint8] */;
  (%480, %481)
}

def @func_4168(%var_4115: Tensor[(1456), float32], %var_4116: Tensor[(1, 140), float32], %var_4128: Tensor[(840), float32], %var_4129: Tensor[(900), float64], %var_4130: Tensor[(30, 9), int32], %var_4157: Tensor[(2640), float64]) -> (Tensor[(1456), float32], Tensor[(1, 140), float32], Tensor[(3, 11, 16), bool], Tensor[(840), float32], Tensor[(900), float64], Tensor[(336), bool], Tensor[(16, 15, 11), float64], Tensor[(2640), float64], Tensor[(3, 90), bool]) {
  %482 = cast(%var_4115, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %483 = cast(%var_4116, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
  %484 = cast(%var_4116, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
  %485 = reshape(%482, newshape=[7, 16, 13]) /* ty=Tensor[(7, 16, 13), float32] */;
  %486 = reshape(%483, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
  %487 = reshape(%484, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
  %488 = @func_2636(%485, %486, %487) /* ty=(Tensor[(140), bool], Tensor[(35, 4), bool], Tensor[(16), uint64], Tensor[(7, 16, 13), int16], Tensor[(3, 11, 16), float32], Tensor[(528), uint64], Tensor[(7, 16, 13), float64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(364), float32], Tensor[(3, 11, 16), float32]) */;
  %489 = %488.4;
  %490 = @func_3343() /* ty=(Tensor[(1, 16), bool],) */;
  %491 = %490.0;
  %492 = cast(%489, dtype="bool") /* ty=Tensor[(3, 11, 16), bool] */;
  %493 = cast(%491, dtype="bool") /* ty=Tensor[(1, 16), bool] */;
  %494 = cast(%var_4157, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %495 = cast(%var_4157, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %496 = reshape(%494, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float64] */;
  %497 = reshape(%495, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float32] */;
  %498 = @func_1422(%496, %497) /* ty=(Tensor[(16, 15, 11), float64], Tensor[(16, 15, 11), float64], Tensor[(16), uint64]) */;
  %499 = cast(%var_4128, dtype="float32") /* ty=Tensor[(840), float32] */;
  %500 = cast(%var_4129, dtype="float64") /* ty=Tensor[(900), float64] */;
  %501 = cast(%var_4130, dtype="int32") /* ty=Tensor[(30, 9), int32] */;
  %502 = cast(meta[relay.Constant][25] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %503 = reshape(%499, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %504 = reshape(%500, newshape=[900]) /* ty=Tensor[(900), float64] */;
  %505 = reshape(%501, newshape=[3, 90]) /* ty=Tensor[(3, 90), int32] */;
  %506 = reshape(%502, newshape=[24, 14]) /* ty=Tensor[(24, 14), bool] */;
  %507 = @func_4019(%503, %504, %505, %506) /* ty=(Tensor[(16), uint64], Tensor[(900), float64], Tensor[(3, 90), int32], Tensor[(8, 7, 15), float32], Tensor[(16, 3, 7), bool], Tensor[(24, 14), bool]) */;
  %508 = %507.2;
  %509 = cast(%var_4130, dtype="bool") /* ty=Tensor[(30, 9), bool] */;
  %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(2), int32] */;
  %511 = cast(%508, dtype="bool") /* ty=Tensor[(3, 90), bool] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %513 = logical_and(%492, %493) /* ty=Tensor[(3, 11, 16), bool] */;
  %514 = %498.0;
  %515 = not_equal(%511, %512) /* ty=Tensor[(3, 90), bool] */;
  (%var_4115, %var_4116, %513, %var_4128, %var_4129, meta[relay.Constant][25] /* ty=Tensor[(336), bool] */, %514, %var_4157, %515)
}

def @func_1039() -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
  %516 = @func_490() /* ty=(Tensor[(16), uint64],) */;
  %517 = %516.0;
  %518 = @func_467() /* ty=Tensor[(16), uint64] */;
  (%517, %518)
}

def @func_6279(%var_6268: Tensor[(13, 6, 1), int16]) -> (Tensor[(13, 6, 12), int16], Tensor[(16), uint64]) {
  %519 = cast(%var_6268, dtype="int16") /* ty=Tensor[(13, 6, 1), int16] */;
  %520 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 6, 12), int16] */, dtype="int16") /* ty=Tensor[(13, 6, 12), int16] */;
  %521 = bitwise_xor(%519, %520) /* ty=Tensor[(13, 6, 12), int16] */;
  %522 = @func_5883() /* ty=Tensor[(16), uint64] */;
  (%521, %522)
}

def @func_4861() -> (Tensor[(16), uint64],) {
  %523 = @func_1485() /* ty=(Tensor[(16), uint64], uint64) */;
  %524 = %523.0;
  (%524,)
}

def @func_7051() -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) {
  %525 = @func_5237() /* ty=(Tensor[(16), uint64],) */;
  %526 = @func_5607() /* ty=(uint64, Tensor[(16), uint64]) */;
  %527 = %525.0;
  %528 = %526.1;
  %529 = @func_766() /* ty=Tensor[(16), uint64] */;
  (%527, %528, %529)
}

def @func_1485() -> (Tensor[(16), uint64], uint64) {
  %530 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %531 = %530.0;
  %532 = @func_905() /* ty=uint64 */;
  (%531, %532)
}

def @func_7860(%var_7849: Tensor[(7, 1), uint64]) -> (Tensor[(7, 1), bool], Tensor[(16), uint64]) {
  %533 = @func_6759() /* ty=uint64 */;
  %534 = cast(%533, dtype="bool") /* ty=bool */;
  %535 = cast(%var_7849, dtype="bool") /* ty=Tensor[(7, 1), bool] */;
  %536 = @func_1904() /* ty=(Tensor[(16), uint64],) */;
  %537 = logical_or(%534, %535) /* ty=Tensor[(7, 1), bool] */;
  %538 = %536.0;
  (%537, %538)
}

def @func_2789() -> Tensor[(16), uint64] {
  %539 = @func_2186() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(16), uint64]) */;
  %539.1
}

def @func_5688() -> (Tensor[(7, 11, 8), float32], Tensor[(7, 11, 8), uint32]) {
  %540 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(7, 11, 8), float32] */;
  %541 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(7, 11, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(7, 11, 8), float32] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %544 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 11, 8), float32] */, dtype="uint32") /* ty=Tensor[(7, 11, 8), uint32] */;
  %545 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(7, 11, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 11, 8), float32] */, dtype="uint32") /* ty=Tensor[(7, 11, 8), uint32] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %548 = power(%542, %543) /* ty=Tensor[(7, 11, 8), float32] */;
  %549 = multiply(%546, %547) /* ty=Tensor[(7, 11, 8), uint32] */;
  (%548, %549)
}

def @func_5547(%var_5537: Tensor[(9, 1, 4), float32]) -> (Tensor[(9, 1, 4), float32], Tensor[(16, 15, 11), float64]) {
  %550 = cast(%var_5537, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %551 = @func_4565() /* ty=(uint64, Tensor[(16, 15, 11), float64], Tensor[(132, 20), float64]) */;
  %552 = atan(%550) /* ty=Tensor[(9, 1, 4), float32] */;
  %553 = %551.1;
  (%552, %553)
}

def @func_364() -> uint64 {
  %554 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %554.3
}

def @func_3924(%var_3864: Tensor[(16, 3, 7), bool]) -> (Tensor[(16, 3, 7), bool], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) {
  %555 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %556 = cast(%var_3864, dtype="bool") /* ty=Tensor[(16, 3, 7), bool] */;
  %557 = @func_1904() /* ty=(Tensor[(16), uint64],) */;
  %558 = @func_1485() /* ty=(Tensor[(16), uint64], uint64) */;
  %559 = logical_and(%555, %556) /* ty=Tensor[(16, 3, 7), bool] */;
  %560 = @func_766() /* ty=Tensor[(16), uint64] */;
  %561 = %557.0;
  %562 = %558.0;
  (%559, %560, %561, %562)
}

def @func_9122() -> Tensor[(6), float32] {
  %563 = @func_7934() /* ty=(Tensor[(16), uint64], Tensor[(6), float32], Tensor[(6), float32]) */;
  %563.2
}

def @func_5332(%var_5302: Tensor[(10, 140), float32]) -> (Tensor[(16), uint64], Tensor[(10, 140), float32], Tensor[(1, 140), float64]) {
  %564 = @func_2897() /* ty=(Tensor[(16), uint64], Tensor[(?, 16), float64], Tensor[(16), uint64], Tensor[(1, 140), float32]) */;
  %565 = %564.3;
  %566 = cast(%565, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
  %567 = cast(%var_5302, dtype="float32") /* ty=Tensor[(10, 140), float32] */;
  %568 = cast(%565, dtype="float64") /* ty=Tensor[(1, 140), float64] */;
  %569 = @func_1957() /* ty=Tensor[(16), uint64] */;
  %570 = floor_divide(%566, %567) /* ty=Tensor[(10, 140), float32] */;
  %571 = erf(%568) /* ty=Tensor[(1, 140), float64] */;
  (%569, %570, %571)
}

def @func_7737() -> (Tensor[(16), uint64], uint64, uint64) {
  %572 = @func_4503() /* ty=(Tensor[(16), uint64], uint64) */;
  %573 = @func_5018() /* ty=Tensor[(16), uint64] */;
  %574 = @func_905() /* ty=uint64 */;
  %575 = %572.1;
  (%573, %574, %575)
}

def @func_274(%var_259: Tensor[(6, 15, 3), int32], %var_268: Tensor[(6, 15, 3), float64]) -> (Tensor[(6, 15, 3), float64],) {
  %576 = cast(%var_259, dtype="int32") /* ty=Tensor[(6, 15, 3), int32] */;
  %577 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(6, 15, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 15, 3), int32] */, dtype="int32") /* ty=Tensor[(6, 15, 3), int32] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %580 = minimum(%578, %579) /* ty=Tensor[(6, 15, 3), int32] */;
  %581 = cast(%580, dtype="float64") /* ty=Tensor[(6, 15, 3), float64] */;
  %582 = acosh(%581) /* ty=Tensor[(6, 15, 3), float64] */;
  %583 = cast(%var_268, dtype="float64") /* ty=Tensor[(6, 15, 3), float64] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%582, dtype="float64") /* ty=Tensor[(6, 15, 3), float64] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %587 = divide(%585, %586) /* ty=Tensor[(6, 15, 3), float64] */;
  (%587,)
}

def @func_639(%var_632: Tensor[(1, 2, 3), float32]) -> (Tensor[(1, 2, 3), float32],) {
  %588 = cast(%var_632, dtype="float32") /* ty=Tensor[(1, 2, 3), float32] */;
  %589 = acos(%588) /* ty=Tensor[(1, 2, 3), float32] */;
  (%589,)
}

def @func_6725(%var_6720: Tensor[(9, 14, 9), int64], %var_6721: Tensor[(9, 14, 9), int64]) -> Tensor[(9, 14, 9), int64] {
  %590 = cast(%var_6721, dtype="int64") /* ty=Tensor[(9, 14, 9), int64] */;
  %591 = shape_of(%var_6720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%var_6720, dtype="int64") /* ty=Tensor[(9, 14, 9), int64] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  multiply(%592, %593) /* ty=Tensor[(9, 14, 9), int64] */
}

def @func_5237() -> (Tensor[(16), uint64],) {
  %594 = @func_1793() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %595 = %594.1;
  (%595,)
}

def @func_8612(%var_8593: Tensor[(7), uint64]) -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(7), uint64], uint64) {
  %596 = cast(%var_8593, dtype="uint64") /* ty=Tensor[(7), uint64] */;
  %597 = reshape(%596, newshape=[1, 7]) /* ty=Tensor[(1, 7), uint64] */;
  %598 = @func_8006(%597) /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(7, 1), bool], Tensor[(1, 7), uint64]) */;
  %599 = @func_3977() /* ty=Tensor[(16), uint64] */;
  %600 = %598.0;
  %601 = @func_364() /* ty=uint64 */;
  (%599, %600, %var_8593, %601)
}

def @func_9186() -> Tensor[(16), uint64] {
  %602 = @func_3161() /* ty=(Tensor[(16), uint64],) */;
  %602.0
}

def @func_601() -> (Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) {
  %603 = cast(meta[relay.Constant][30] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %604 = @func_467() /* ty=Tensor[(16), uint64] */;
  %605 = cast(%604, dtype="uint64") /* ty=Tensor[(16), uint64] */;
  %606 = reshape(%603, newshape=[]) /* ty=uint64 */;
  %607 = reshape(%605, newshape=[1, 16]) /* ty=Tensor[(1, 16), uint64] */;
  %608 = @func_107(%606, %607) /* ty=(Tensor[(1, 16), bool],) */;
  %609 = @func_490() /* ty=(Tensor[(16), uint64],) */;
  %610 = %608.0;
  %611 = %609.0;
  (%604, %610, meta[relay.Constant][30] /* ty=uint64 */, %611)
}

def @func_8658() -> Tensor[(16), uint64] {
  %612 = @func_5190() /* ty=(Tensor[(16), uint64],) */;
  %612.0
}

def @func_8315() -> (Tensor[(16), uint64], Tensor[(9, 8, 3), float64], Tensor[(216), float64]) {
  %613 = @func_6909() /* ty=(uint64, Tensor[(16), uint64], uint64) */;
  %614 = cast(meta[relay.Constant][31] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %615 = reshape(%614, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), float64] */;
  %616 = @func_2700(%615) /* ty=(Tensor[(9, 8, 3), float64],) */;
  %617 = %613.1;
  %618 = %616.0;
  (%617, %618, meta[relay.Constant][31] /* ty=Tensor[(216), float64] */)
}

def @func_8822(%var_8816: Tensor[(1, 364), float32]) -> (Tensor[(16), uint64], Tensor[(6), float32], Tensor[(1, 364), float32], Tensor[(6), float32]) {
  %619 = @func_3312() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64) */;
  %620 = cast(%var_8816, dtype="float32") /* ty=Tensor[(1, 364), float32] */;
  %621 = cast(meta[relay.Constant][32] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %622 = reshape(%620, newshape=[1, 364]) /* ty=Tensor[(1, 364), float32] */;
  %623 = reshape(%621, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %624 = @func_8163(%622, %623) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(1, 364), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
  %625 = %619.0;
  %626 = %624.3;
  (%625, %626, %var_8816, meta[relay.Constant][32] /* ty=Tensor[(6), float32] */)
}

def @func_8390() -> (uint64,) {
  %627 = @func_8064() /* ty=uint64 */;
  (%627,)
}

def @func_9544() -> (uint64, uint64, Tensor[(16), uint64]) {
  %628 = @func_7447() /* ty=(Tensor[(16), uint64], uint64, Tensor[(16), uint64], Tensor[(14, 10, ?), float32], Tensor[(140), float32]) */;
  %629 = @func_2083() /* ty=(uint64, uint64) */;
  %630 = @func_3734() /* ty=(Tensor[(16), uint64],) */;
  %631 = %628.1;
  %632 = %629.0;
  %633 = %630.0;
  (%631, %632, %633)
}

def @func_3450(%var_3413: Tensor[(2, 13, 9), float64], %var_3423: Tensor[(1, 364), float32]) -> (Tensor[(2, 13, 9), float64], Tensor[(364), float32], Tensor[(1, 364), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(1, 140), float32]) {
  %634 = cast(%var_3413, dtype="float64") /* ty=Tensor[(2, 13, 9), float64] */;
  %635 = cast(%var_3423, dtype="float32") /* ty=Tensor[(1, 364), float32] */;
  %636 = reshape(%635, newshape=[364]) /* ty=Tensor[(364), float32] */;
  %637 = @func_1250(%636) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */;
  %638 = cast(meta[relay.Constant][33] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %639 = cast(meta[relay.Constant][34] /* ty=Tensor[(16), uint64] */, dtype="uint64") /* ty=Tensor[(16), uint64] */;
  %640 = reshape(%638, newshape=[]) /* ty=uint64 */;
  %641 = reshape(%639, newshape=[1, 16]) /* ty=Tensor[(1, 16), uint64] */;
  %642 = @func_107(%640, %641) /* ty=(Tensor[(1, 16), bool],) */;
  %643 = @func_2897() /* ty=(Tensor[(16), uint64], Tensor[(?, 16), float64], Tensor[(16), uint64], Tensor[(1, 140), float32]) */;
  %644 = sinh(%634) /* ty=Tensor[(2, 13, 9), float64] */;
  %645 = %637.2;
  %646 = %642.0;
  %647 = @func_1116() /* ty=Tensor[(16), uint64] */;
  %648 = %643.3;
  (%644, %645, %var_3423, %646, meta[relay.Constant][33] /* ty=uint64 */, meta[relay.Constant][34] /* ty=Tensor[(16), uint64] */, %647, %648)
}

def @func_6529(%var_6472: Tensor[(3, 2, 2), float32]) -> (Tensor[(1, 2, 3), float32], Tensor[(6), float32], Tensor[(3, 2, 2), int16], Tensor[(16), uint64]) {
  %649 = cast(meta[relay.Constant][35] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %650 = reshape(%649, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), float32] */;
  %651 = @func_639(%650) /* ty=(Tensor[(1, 2, 3), float32],) */;
  %652 = cast(%var_6472, dtype="float32") /* ty=Tensor[(3, 2, 2), float32] */;
  %653 = atanh(%652) /* ty=Tensor[(3, 2, 2), float32] */;
  %654 = cast(%var_6472, dtype="int16") /* ty=Tensor[(3, 2, 2), int16] */;
  %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%653, dtype="int16") /* ty=Tensor[(3, 2, 2), int16] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %658 = @func_490() /* ty=(Tensor[(16), uint64],) */;
  %659 = %651.0;
  %660 = subtract(%656, %657) /* ty=Tensor[(3, 2, 2), int16] */;
  %661 = %658.0;
  (%659, meta[relay.Constant][35] /* ty=Tensor[(6), float32] */, %660, %661)
}

def @func_1957() -> Tensor[(16), uint64] {
  %662 = @func_1485() /* ty=(Tensor[(16), uint64], uint64) */;
  %662.0
}

def @func_2664() -> Tensor[(1, 16), bool] {
  %663 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %663.2
}

def @func_4565() -> (uint64, Tensor[(16, 15, 11), float64], Tensor[(132, 20), float64]) {
  %664 = @func_718() /* ty=(uint64, Tensor[(16), uint64]) */;
  %665 = cast(meta[relay.Constant][36] /* ty=Tensor[(132, 20), float64] */, dtype="float64") /* ty=Tensor[(132, 20), float64] */;
  %666 = cast(meta[relay.Constant][36] /* ty=Tensor[(132, 20), float64] */, dtype="float32") /* ty=Tensor[(132, 20), float32] */;
  %667 = reshape(%665, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float64] */;
  %668 = reshape(%666, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float32] */;
  %669 = @func_1422(%667, %668) /* ty=(Tensor[(16, 15, 11), float64], Tensor[(16, 15, 11), float64], Tensor[(16), uint64]) */;
  %670 = %664.0;
  %671 = %669.1;
  (%670, %671, meta[relay.Constant][36] /* ty=Tensor[(132, 20), float64] */)
}

def @func_3257(%var_3236: Tensor[(1456, 1), float32], %var_3254: Tensor[(364), float32]) -> (uint64, Tensor[(3, 11, 16), float32], Tensor[(1456, 1), float32], Tensor[(140), float32], uint64, Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) {
  %672 = @func_2687() /* ty=(uint64, uint64) */;
  %673 = cast(%var_3236, dtype="float32") /* ty=Tensor[(1456, 1), float32] */;
  %674 = cast(meta[relay.Constant][37] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %675 = cast(meta[relay.Constant][37] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %676 = reshape(%673, newshape=[7, 16, 13]) /* ty=Tensor[(7, 16, 13), float32] */;
  %677 = reshape(%674, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
  %678 = reshape(%675, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
  %679 = @func_2636(%676, %677, %678) /* ty=(Tensor[(140), bool], Tensor[(35, 4), bool], Tensor[(16), uint64], Tensor[(7, 16, 13), int16], Tensor[(3, 11, 16), float32], Tensor[(528), uint64], Tensor[(7, 16, 13), float64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(364), float32], Tensor[(3, 11, 16), float32]) */;
  %680 = cast(meta[relay.Constant][37] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %681 = cast(meta[relay.Constant][37] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %682 = reshape(%680, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %683 = reshape(%681, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %684 = @func_987(%682, %683) /* ty=(Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
  %685 = cast(%var_3254, dtype="float32") /* ty=Tensor[(364), float32] */;
  %686 = reshape(%685, newshape=[364]) /* ty=Tensor[(364), float32] */;
  %687 = @func_1250(%686) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */;
  %688 = %672.1;
  %689 = %679.4;
  %690 = %684.1;
  %691 = @func_1116() /* ty=Tensor[(16), uint64] */;
  %692 = %687.1;
  (%688, %689, %var_3236, meta[relay.Constant][37] /* ty=Tensor[(140), float32] */, %690, %691, %692, %var_3254)
}

def @func_1793() -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
  %693 = @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %694 = @func_467() /* ty=Tensor[(16), uint64] */;
  %695 = %693.3;
  (%694, %695)
}

def @func_8911() -> Tensor[(16), uint64] {
  %696 = @func_4861() /* ty=(Tensor[(16), uint64],) */;
  %696.0
}

def @func_9385() -> (Tensor[(16), uint64],) {
  %697 = @func_9186() /* ty=Tensor[(16), uint64] */;
  (%697,)
}

def @func_2083() -> (uint64, uint64) {
  %698 = @func_718() /* ty=(uint64, Tensor[(16), uint64]) */;
  %699 = %698.0;
  %700 = @func_364() /* ty=uint64 */;
  (%699, %700)
}

def @func_8476(%var_8474: Tensor[(1, 2640), float64]) -> (Tensor[(1, 16), bool], Tensor[(4, 16, 8), float32], Tensor[(16), uint64], Tensor[(16), uint64], uint64, Tensor[(512), float32], Tensor[(16), uint64], Tensor[(1, 2640), float64]) {
  %701 = @func_7190() /* ty=(Tensor[(1, 16), bool],) */;
  %702 = cast(meta[relay.Constant][38] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %703 = cast(meta[relay.Constant][38] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %704 = reshape(%702, newshape=[4, 16, 8]) /* ty=Tensor[(4, 16, 8), float32] */;
  %705 = reshape(%703, newshape=[4, 16, 8]) /* ty=Tensor[(4, 16, 8), float32] */;
  %706 = @func_6823(%704, %705) /* ty=(Tensor[(4, 16, 8), float32], Tensor[(4, 16, 8), uint8]) */;
  %707 = @func_3161() /* ty=(Tensor[(16), uint64],) */;
  %708 = @func_2083() /* ty=(uint64, uint64) */;
  %709 = cast(meta[relay.Constant][38] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %710 = sigmoid(%709) /* ty=Tensor[(512), float32] */;
  %711 = cast(meta[relay.Constant][38] /* ty=Tensor[(512), float32] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(1), int32] */;
  %713 = cast(%710, dtype="bool") /* ty=Tensor[(512), bool] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?), bool] */;
  %715 = greater(%713, %714) /* ty=Tensor[(512), bool] */;
  %716 = cast(%715, dtype="float32") /* ty=Tensor[(512), float32] */;
  %717 = cast(%var_8474, dtype="float64") /* ty=Tensor[(1, 2640), float64] */;
  %718 = cast(%var_8474, dtype="float32") /* ty=Tensor[(1, 2640), float32] */;
  %719 = reshape(%717, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float64] */;
  %720 = reshape(%718, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float32] */;
  %721 = @func_1422(%719, %720) /* ty=(Tensor[(16, 15, 11), float64], Tensor[(16, 15, 11), float64], Tensor[(16), uint64]) */;
  %722 = %701.0;
  %723 = %706.0;
  %724 = %707.0;
  %725 = @func_1116() /* ty=Tensor[(16), uint64] */;
  %726 = %708.1;
  %727 = log2(%716) /* ty=Tensor[(512), float32] */;
  %728 = %721.2;
  (%722, %723, %724, %725, %726, %727, %728, %var_8474)
}

def @func_3147() -> (Tensor[(16), uint64],) {
  %729 = @func_854() /* ty=Tensor[(16), uint64] */;
  (%729,)
}

def @func_1422(%var_1396: Tensor[(16, 15, 11), float64], %var_1412: Tensor[(16, 15, 11), float32]) -> (Tensor[(16, 15, 11), float64], Tensor[(16, 15, 11), float64], Tensor[(16), uint64]) {
  %730 = cast(%var_1396, dtype="float32") /* ty=Tensor[(16, 15, 11), float32] */;
  %731 = sqrt(%730) /* ty=Tensor[(16, 15, 11), float32] */;
  %732 = cast(%var_1396, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %733 = sigmoid(%732) /* ty=Tensor[(16, 15, 11), float64] */;
  %734 = cast(%733, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %735 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%731, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %738 = cast(%var_1412, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %739 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%731, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %742 = @func_1039() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %743 = divide(%736, %737) /* ty=Tensor[(16, 15, 11), float64] */;
  %744 = floor_divide(%740, %741) /* ty=Tensor[(16, 15, 11), float64] */;
  %745 = %742.1;
  (%743, %744, %745)
}

def @func_9368() -> (Tensor[(16), uint64],) {
  %746 = @func_5237() /* ty=(Tensor[(16), uint64],) */;
  %747 = %746.0;
  (%747,)
}

def @func_4256() -> uint64 {
  %748 = @func_2326() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64, uint64, Tensor[(364), float32]) */;
  %748.3
}

def @func_8538(%var_8529: Tensor[(234), float64]) -> (Tensor[(16), uint64], uint64, Tensor[(234), float64], Tensor[(364), float32], uint64) {
  %749 = @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %750 = cast(%var_8529, dtype="float64") /* ty=Tensor[(234), float64] */;
  %751 = cast(meta[relay.Constant][39] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %752 = reshape(%750, newshape=[2, 13, 9]) /* ty=Tensor[(2, 13, 9), float64] */;
  %753 = reshape(%751, newshape=[1, 364]) /* ty=Tensor[(1, 364), float32] */;
  %754 = @func_3450(%752, %753) /* ty=(Tensor[(2, 13, 9), float64], Tensor[(364), float32], Tensor[(1, 364), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(1, 140), float32]) */;
  %755 = %749.0;
  %756 = %754.4;
  %757 = @func_7470() /* ty=uint64 */;
  (%755, %756, %var_8529, meta[relay.Constant][39] /* ty=Tensor[(364), float32] */, %757)
}

def @func_3312() -> (Tensor[(16), uint64], Tensor[(16), uint64], uint64) {
  %758 = @func_1039() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %759 = @func_854() /* ty=Tensor[(16), uint64] */;
  %760 = %758.1;
  %761 = @func_905() /* ty=uint64 */;
  (%759, %760, %761)
}

def @func_8064() -> uint64 {
  %762 = @func_4397() /* ty=(uint64,) */;
  %762.0
}

def @func_1539() -> Tensor[(16), uint64] {
  @func_467() /* ty=Tensor[(16), uint64] */
}

def @func_4726() -> (Tensor[(11, 11, 8), float64], uint64, Tensor[(140), float32], Tensor[(2, 16, 12), bool], Tensor[(384, 1), float32]) {
  %763 = cast(meta[relay.Constant][40] /* ty=Tensor[(11, 11, 8), float64] */, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
  %764 = cast(meta[relay.Constant][41] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %765 = cast(meta[relay.Constant][41] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %766 = reshape(%764, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %767 = reshape(%765, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %768 = @func_987(%766, %767) /* ty=(Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
  %769 = cast(meta[relay.Constant][42] /* ty=Tensor[(384, 1), float32] */, dtype="float32") /* ty=Tensor[(384, 1), float32] */;
  %770 = reshape(%769, newshape=[2, 16, 12]) /* ty=Tensor[(2, 16, 12), float32] */;
  %771 = cos(%763) /* ty=Tensor[(11, 11, 8), float64] */;
  %772 = %768.1;
  %773 = @func_4439(%770) /* ty=Tensor[(2, 16, 12), bool] */;
  (%771, %772, meta[relay.Constant][41] /* ty=Tensor[(140), float32] */, %773, meta[relay.Constant][42] /* ty=Tensor[(384, 1), float32] */)
}

def @func_9317() -> (Tensor[(1, 16), bool],) {
  %774 = @func_7190() /* ty=(Tensor[(1, 16), bool],) */;
  %775 = %774.0;
  (%775,)
}

def @func_5268() -> Tensor[(16), uint64] {
  %776 = @func_4861() /* ty=(Tensor[(16), uint64],) */;
  %776.0
}

def @func_3161() -> (Tensor[(16), uint64],) {
  %777 = @func_3147() /* ty=(Tensor[(16), uint64],) */;
  %778 = %777.0;
  (%778,)
}

def @func_2687() -> (uint64, uint64) {
  %779 = @func_1485() /* ty=(Tensor[(16), uint64], uint64) */;
  %780 = @func_2326() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64, uint64, Tensor[(364), float32]) */;
  %781 = %779.1;
  %782 = %780.3;
  (%781, %782)
}

def @func_2405(%var_2375: Tensor[(140), float32]) -> (Tensor[(16), uint64], Tensor[(140), bool], Tensor[(140), int64], uint64) {
  %783 = cast(%var_2375, dtype="float32") /* ty=Tensor[(140), float32] */;
  %784 = reshape(%783, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %785 = @func_1656(%784) /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(14, 10, ?), int64], Tensor[(140), float32], Tensor[(16), uint64]) */;
  %786 = @func_2083() /* ty=(uint64, uint64) */;
  %787 = %786.1;
  %788 = cast(%var_2375, dtype="bool") /* ty=Tensor[(140), bool] */;
  %789 = cast(%787, dtype="bool") /* ty=bool */;
  %790 = cast(%787, dtype="int64") /* ty=int64 */;
  %791 = cast(%var_2375, dtype="int64") /* ty=Tensor[(140), int64] */;
  %792 = %785.0;
  %793 = greater_equal(%788, %789) /* ty=Tensor[(140), bool] */;
  %794 = add(%790, %791) /* ty=Tensor[(140), int64] */;
  %795 = @func_1861() /* ty=uint64 */;
  (%792, %793, %794, %795)
}

def @func_4827(%var_4819: Tensor[(364), float32]) -> (Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) {
  %796 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %797 = cast(%var_4819, dtype="float32") /* ty=Tensor[(364), float32] */;
  %798 = reshape(%797, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), float32] */;
  %799 = %796.0;
  %800 = @func_560(%798) /* ty=Tensor[(2, 14, 13), float32] */;
  (%799, %800, %var_4819)
}

def @func_7470() -> uint64 {
  %801 = @func_2687() /* ty=(uint64, uint64) */;
  %801.0
}

def @func_6221() -> (uint64,) {
  %802 = @func_3644() /* ty=uint64 */;
  (%802,)
}

def @func_3026() -> (Tensor[(16), uint64], Tensor[(1, 16), bool], uint64) {
  %803 = cast(meta[relay.Constant][43] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %804 = @func_766() /* ty=Tensor[(16), uint64] */;
  %805 = cast(%804, dtype="uint64") /* ty=Tensor[(16), uint64] */;
  %806 = reshape(%803, newshape=[]) /* ty=uint64 */;
  %807 = reshape(%805, newshape=[1, 16]) /* ty=Tensor[(1, 16), uint64] */;
  %808 = @func_107(%806, %807) /* ty=(Tensor[(1, 16), bool],) */;
  %809 = %808.0;
  (%804, %809, meta[relay.Constant][43] /* ty=uint64 */)
}

def @func_3586(%var_3584: Tensor[(6), float32]) -> (Tensor[(16), uint64], Tensor[(1, 2, 3), float32], Tensor[(6), float32]) {
  %810 = @func_1904() /* ty=(Tensor[(16), uint64],) */;
  %811 = cast(%var_3584, dtype="float32") /* ty=Tensor[(6), float32] */;
  %812 = reshape(%811, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), float32] */;
  %813 = @func_639(%812) /* ty=(Tensor[(1, 2, 3), float32],) */;
  %814 = %810.0;
  %815 = %813.0;
  (%814, %815, %var_3584)
}

def @func_6759() -> uint64 {
  @func_905() /* ty=uint64 */
}

def @func_7343() -> (Tensor[(7, 11, 8), float32], Tensor[(16), uint64]) {
  %816 = @func_5688() /* ty=(Tensor[(7, 11, 8), float32], Tensor[(7, 11, 8), uint32]) */;
  %817 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %818 = %816.0;
  %819 = %817.0;
  (%818, %819)
}

def @func_3198(%var_3186: Tensor[(15, 11, 14), float32]) -> (Tensor[(15, 11, 14), float32], Tensor[(15, 11, 14), float32]) {
  %820 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 11, 14), float32] */, dtype="float32") /* ty=Tensor[(15, 11, 14), float32] */;
  %821 = shape_of(%var_3186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%var_3186, dtype="float32") /* ty=Tensor[(15, 11, 14), float32] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %824 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 11, 14), float32] */, dtype="float32") /* ty=Tensor[(15, 11, 14), float32] */;
  %825 = multiply(%822, %823) /* ty=Tensor[(15, 11, 14), float32] */;
  %826 = cos(%824) /* ty=Tensor[(15, 11, 14), float32] */;
  (%825, %826)
}

def @func_8006(%var_8000: Tensor[(1, 7), uint64]) -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(7, 1), bool], Tensor[(1, 7), uint64]) {
  %827 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %828 = @func_3026() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64) */;
  %829 = cast(%var_8000, dtype="uint64") /* ty=Tensor[(1, 7), uint64] */;
  %830 = reshape(%829, newshape=[7, 1]) /* ty=Tensor[(7, 1), uint64] */;
  %831 = @func_7860(%830) /* ty=(Tensor[(7, 1), bool], Tensor[(16), uint64]) */;
  %832 = %827.0;
  %833 = %828.0;
  %834 = %831.0;
  (%832, %833, %834, %var_8000)
}

def @func_6256(%var_6224: Tensor[(2, 5, 8), float64], %var_6231: Tensor[(3, 28), float64], %var_6248: Tensor[(140), float32]) -> (Tensor[(2, 6, 7), float64], Tensor[(3, 28), float64], Tensor[(2, 5, 8), int8], Tensor[(140), bool]) {
  %835 = cast(%var_6231, dtype="float64") /* ty=Tensor[(3, 28), float64] */;
  %836 = reshape(%835, newshape=[2, 6, 7]) /* ty=Tensor[(2, 6, 7), float64] */;
  %837 = cast(%var_6224, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %838 = log(%837) /* ty=Tensor[(2, 5, 8), float64] */;
  %839 = cast(%var_6224, dtype="int8") /* ty=Tensor[(2, 5, 8), int8] */;
  %840 = shape_of(%838, dtype="int32") /* ty=Tensor[(3), int32] */;
  %841 = cast(%838, dtype="int8") /* ty=Tensor[(2, 5, 8), int8] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %843 = @func_4726() /* ty=(Tensor[(11, 11, 8), float64], uint64, Tensor[(140), float32], Tensor[(2, 16, 12), bool], Tensor[(384, 1), float32]) */;
  %844 = %843.2;
  %845 = cast(%var_6248, dtype="bool") /* ty=Tensor[(140), bool] */;
  %846 = shape_of(%844, dtype="int32") /* ty=Tensor[(1), int32] */;
  %847 = cast(%844, dtype="bool") /* ty=Tensor[(140), bool] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?), bool] */;
  %849 = @func_3336(%836) /* ty=Tensor[(2, 6, 7), float64] */;
  %850 = left_shift(%841, %842) /* ty=Tensor[(2, 5, 8), int8] */;
  %851 = less_equal(%847, %848) /* ty=Tensor[(140), bool] */;
  (%849, %var_6231, %850, %851)
}

def @func_766() -> Tensor[(16), uint64] {
  %852 = @func_718() /* ty=(uint64, Tensor[(16), uint64]) */;
  %852.1
}

def @func_4299(%var_4282: Tensor[(12, 10, 11), float32]) -> (Tensor[(12, 10, 11), uint64], Tensor[(12, 10, 11), float32]) {
  %853 = cast(%var_4282, dtype="float32") /* ty=Tensor[(12, 10, 11), float32] */;
  %854 = log(%853) /* ty=Tensor[(12, 10, 11), float32] */;
  %855 = cast(%var_4282, dtype="uint64") /* ty=Tensor[(12, 10, 11), uint64] */;
  %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%854, dtype="uint64") /* ty=Tensor[(12, 10, 11), uint64] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %859 = cast(%var_4282, dtype="float32") /* ty=Tensor[(12, 10, 11), float32] */;
  %860 = logical_xor(%857, %858) /* ty=Tensor[(12, 10, 11), uint64] */;
  %861 = sinh(%859) /* ty=Tensor[(12, 10, 11), float32] */;
  (%860, %861)
}

def @func_2970(%var_2958: Tensor[(4, 11, 16), uint64]) -> Tensor[(4, 11, 16), bool] {
  %862 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 11, 16), uint64] */, dtype="bool") /* ty=Tensor[(4, 11, 16), bool] */;
  %863 = shape_of(%var_2958, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%var_2958, dtype="bool") /* ty=Tensor[(4, 11, 16), bool] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%864, %865) /* ty=Tensor[(4, 11, 16), bool] */
}

def @func_7447() -> (Tensor[(16), uint64], uint64, Tensor[(16), uint64], Tensor[(14, 10, ?), float32], Tensor[(140), float32]) {
  %866 = @func_5237() /* ty=(Tensor[(16), uint64],) */;
  %867 = @func_2687() /* ty=(uint64, uint64) */;
  %868 = @func_2326() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64, uint64, Tensor[(364), float32]) */;
  %869 = cast(meta[relay.Constant][46] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %870 = reshape(%869, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %871 = @func_2933(%870) /* ty=(Tensor[(16), uint64], Tensor[(140), float32], Tensor[(14, 10, ?), float32]) */;
  %872 = %866.0;
  %873 = %867.1;
  %874 = %868.0;
  %875 = %871.2;
  (%872, %873, %874, %875, meta[relay.Constant][46] /* ty=Tensor[(140), float32] */)
}

def @func_9622(%var_9616: uint32, %var_9617: Tensor[(1248), uint32]) -> (Tensor[(16), uint64], Tensor[(1, 16), bool], Tensor[(12, 13, 8), uint32], uint32, Tensor[(1248), uint32]) {
  %876 = @func_7561() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %877 = @func_3343() /* ty=(Tensor[(1, 16), bool],) */;
  %878 = cast(%var_9616, dtype="uint32") /* ty=uint32 */;
  %879 = cast(%var_9617, dtype="uint32") /* ty=Tensor[(1248), uint32] */;
  %880 = reshape(%878, newshape=[]) /* ty=uint32 */;
  %881 = reshape(%879, newshape=[12, 13, 8]) /* ty=Tensor[(12, 13, 8), uint32] */;
  %882 = %876.1;
  %883 = %877.0;
  %884 = @func_7607(%880, %881) /* ty=Tensor[(12, 13, 8), uint32] */;
  (%882, %883, %884, %var_9616, %var_9617)
}

def @func_107(%var_97: uint64, %var_98: Tensor[(1, 16), uint64]) -> (Tensor[(1, 16), bool],) {
  %885 = cast(%var_97, dtype="bool") /* ty=bool */;
  %886 = cast(%var_98, dtype="bool") /* ty=Tensor[(1, 16), bool] */;
  %887 = greater(%885, %886) /* ty=Tensor[(1, 16), bool] */;
  (%887,)
}

def @func_467() -> Tensor[(16), uint64] {
  %888 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %888.4
}

def @func_2897() -> (Tensor[(16), uint64], Tensor[(?, 16), float64], Tensor[(16), uint64], Tensor[(1, 140), float32]) {
  %889 = @func_2326() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64, uint64, Tensor[(364), float32]) */;
  %890 = @func_2664() /* ty=Tensor[(1, 16), bool] */;
  %891 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %892 = %891.4;
  %893 = cast(%892, dtype="float64") /* ty=Tensor[(16), float64] */;
  %894 = shape_of(%890, dtype="int32") /* ty=Tensor[(2), int32] */;
  %895 = cast(%890, dtype="float64") /* ty=Tensor[(1, 16), float64] */;
  %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %897 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 140), float32] */, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
  %898 = reshape(%897, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %899 = @func_1656(%898) /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(14, 10, ?), int64], Tensor[(140), float32], Tensor[(16), uint64]) */;
  %900 = %889.1;
  %901 = power(%895, %896) /* ty=Tensor[(?, 16), float64] */;
  %902 = %899.0;
  (%900, %901, %902, meta[relay.Constant][47] /* ty=Tensor[(1, 140), float32] */)
}

def @func_490() -> (Tensor[(16), uint64],) {
  %903 = @func_467() /* ty=Tensor[(16), uint64] */;
  (%903,)
}

def @func_1656(%var_1638: Tensor[(140), float32]) -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(14, 10, ?), int64], Tensor[(140), float32], Tensor[(16), uint64]) {
  %904 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %905 = cast(%var_1638, dtype="float32") /* ty=Tensor[(140), float32] */;
  %906 = cast(%var_1638, dtype="float32") /* ty=Tensor[(140), float32] */;
  %907 = reshape(%905, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %908 = reshape(%906, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %909 = @func_987(%907, %908) /* ty=(Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
  %910 = @func_766() /* ty=Tensor[(16), uint64] */;
  %911 = %904.0;
  %912 = %909.0;
  %913 = @func_854() /* ty=Tensor[(16), uint64] */;
  (%910, %911, %912, %var_1638, %913)
}

def @func_8163(%var_8156: Tensor[(1, 364), float32], %var_8159: Tensor[(6), float32]) -> (Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(1, 364), float32], Tensor[(6), float32], Tensor[(6), float32]) {
  %914 = @func_5237() /* ty=(Tensor[(16), uint64],) */;
  %915 = cast(%var_8156, dtype="float32") /* ty=Tensor[(1, 364), float32] */;
  %916 = reshape(%915, newshape=[364]) /* ty=Tensor[(364), float32] */;
  %917 = @func_1250(%916) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */;
  %918 = cast(%var_8159, dtype="float32") /* ty=Tensor[(6), float32] */;
  %919 = reshape(%918, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %920 = @func_3586(%919) /* ty=(Tensor[(16), uint64], Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
  %921 = %914.0;
  %922 = %917.1;
  %923 = %920.2;
  (%921, %922, %var_8156, %923, %var_8159)
}

def @func_4879(%var_4868: Tensor[(16, 9, 14), float32]) -> (Tensor[(16, 9, 14), float32], Tensor[(16, 9, 14), float32]) {
  %924 = cast(%var_4868, dtype="float32") /* ty=Tensor[(16, 9, 14), float32] */;
  %925 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(16, 9, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(meta[relay.Constant][48] /* ty=Tensor[(16, 9, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 9, 14), float32] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %928 = cast(%var_4868, dtype="float32") /* ty=Tensor[(16, 9, 14), float32] */;
  %929 = floor_divide(%926, %927) /* ty=Tensor[(16, 9, 14), float32] */;
  %930 = acos(%928) /* ty=Tensor[(16, 9, 14), float32] */;
  (%929, %930)
}

def @func_3563() -> (Tensor[(16), uint64], uint64) {
  %931 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %932 = @func_3057() /* ty=(uint64,) */;
  %933 = %931.0;
  %934 = %932.0;
  (%933, %934)
}

def @func_7190() -> (Tensor[(1, 16), bool],) {
  %935 = @func_2664() /* ty=Tensor[(1, 16), bool] */;
  (%935,)
}

def @func_6023() -> (Tensor[(12, 2, 1), float32],) {
  %936 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 1), float32] */;
  %937 = sigmoid(%936) /* ty=Tensor[(12, 2, 1), float32] */;
  (%937,)
}

def @func_6687(%var_6660: Tensor[(6, 140), float32]) -> (Tensor[(16), uint64], Tensor[(16, 3, 7), bool], Tensor[(6, 140), float32], Tensor[(900), float64], Tensor[(270), int32], Tensor[(336), bool]) {
  %938 = @func_6594() /* ty=(Tensor[(16), uint64],) */;
  %939 = cast(%var_6660, dtype="float32") /* ty=Tensor[(6, 140), float32] */;
  %940 = cast(meta[relay.Constant][50] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %941 = cast(meta[relay.Constant][51] /* ty=Tensor[(270), int32] */, dtype="int32") /* ty=Tensor[(270), int32] */;
  %942 = cast(meta[relay.Constant][52] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %943 = reshape(%939, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %944 = reshape(%940, newshape=[900]) /* ty=Tensor[(900), float64] */;
  %945 = reshape(%941, newshape=[3, 90]) /* ty=Tensor[(3, 90), int32] */;
  %946 = reshape(%942, newshape=[24, 14]) /* ty=Tensor[(24, 14), bool] */;
  %947 = @func_4019(%943, %944, %945, %946) /* ty=(Tensor[(16), uint64], Tensor[(900), float64], Tensor[(3, 90), int32], Tensor[(8, 7, 15), float32], Tensor[(16, 3, 7), bool], Tensor[(24, 14), bool]) */;
  %948 = %938.0;
  %949 = %947.4;
  (%948, %949, %var_6660, meta[relay.Constant][50] /* ty=Tensor[(900), float64] */, meta[relay.Constant][51] /* ty=Tensor[(270), int32] */, meta[relay.Constant][52] /* ty=Tensor[(336), bool] */)
}

def @func_3734() -> (Tensor[(16), uint64],) {
  %950 = @func_3312() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64) */;
  %951 = %950.1;
  (%951,)
}

def @func_8498(%var_8492: Tensor[(364), float32], %var_8493: Tensor[(6), float32]) -> (uint64, Tensor[(2, 14, 13), float32], Tensor[(364), float32], Tensor[(6), float32]) {
  %952 = @func_2687() /* ty=(uint64, uint64) */;
  %953 = cast(%var_8492, dtype="float32") /* ty=Tensor[(364), float32] */;
  %954 = cast(%var_8493, dtype="float32") /* ty=Tensor[(6), float32] */;
  %955 = reshape(%953, newshape=[1, 364]) /* ty=Tensor[(1, 364), float32] */;
  %956 = reshape(%954, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %957 = @func_8163(%955, %956) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(1, 364), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
  %958 = %952.0;
  %959 = %957.1;
  (%958, %959, %var_8492, %var_8493)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7985(%var_7983: Tensor[(2, 11, 6), uint32], %var_7984: Tensor[(2, 11, 6), uint32]) -> (Tensor[(2, 11, 6), uint32], Tensor[(2, 11, 6), float32]) {
  @func_7981(%var_7983, %var_7984) /* ty=(Tensor[(2, 11, 6), uint32], Tensor[(2, 11, 6), float32]) */
}

def @func_1861() -> uint64 {
  %0 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %0.3
}

def @func_2326() -> (Tensor[(16), uint64], Tensor[(16), uint64], uint64, uint64, Tensor[(364), float32]) {
  %1 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %2 = @func_718() /* ty=(uint64, Tensor[(16), uint64]) */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %4 = reshape(%3, newshape=[364]) /* ty=Tensor[(364), float32] */;
  %5 = @func_1358(%4) /* ty=(uint64, uint64, Tensor[(2, 14, 13), float32], Tensor[(16), uint64], uint64, Tensor[(364), float64]) */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %7 = %1.0;
  %8 = @func_467() /* ty=Tensor[(16), uint64] */;
  %9 = %2.0;
  %10 = %5.0;
  %11 = acosh(%6) /* ty=Tensor[(364), float32] */;
  (%7, %8, %9, %10, %11)
}

def @func_8315() -> (Tensor[(16), uint64], Tensor[(9, 8, 3), float64], Tensor[(216), float64]) {
  %12 = @func_6909() /* ty=(uint64, Tensor[(16), uint64], uint64) */;
  %13 = cast(meta[relay.Constant][1] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %14 = reshape(%13, newshape=[9, 8, 3]) /* ty=Tensor[(9, 8, 3), float64] */;
  %15 = @func_2700(%14) /* ty=(Tensor[(9, 8, 3), float64],) */;
  %16 = %12.1;
  %17 = %15.0;
  (%16, %17, meta[relay.Constant][1] /* ty=Tensor[(216), float64] */)
}

def @func_8167(%var_8165: Tensor[(1, 364), float32], %var_8166: Tensor[(6), float32]) -> (Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(1, 364), float32], Tensor[(6), float32], Tensor[(6), float32]) {
  @func_8163(%var_8165, %var_8166) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(1, 364), float32], Tensor[(6), float32], Tensor[(6), float32]) */
}

def @func_8006(%var_8000: Tensor[(1, 7), uint64]) -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(7, 1), bool], Tensor[(1, 7), uint64]) {
  %18 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %19 = @func_3026() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64) */;
  %20 = cast(%var_8000, dtype="uint64") /* ty=Tensor[(1, 7), uint64] */;
  %21 = reshape(%20, newshape=[7, 1]) /* ty=Tensor[(7, 1), uint64] */;
  %22 = @func_7860(%21) /* ty=(Tensor[(7, 1), bool], Tensor[(16), uint64]) */;
  %23 = %18.0;
  %24 = %19.0;
  %25 = %22.0;
  (%23, %24, %25, %var_8000)
}

def @func_8705() -> (Tensor[(7, 11, 8), uint8],) {
  %26 = @func_5688() /* ty=(Tensor[(7, 11, 8), float32], Tensor[(7, 11, 8), uint32]) */;
  %27 = %26.0;
  %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 11, 8), float32] */, dtype="uint8") /* ty=Tensor[(7, 11, 8), uint8] */;
  %29 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%27, dtype="uint8") /* ty=Tensor[(7, 11, 8), uint8] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %32 = logical_xor(%30, %31) /* ty=Tensor[(7, 11, 8), uint8] */;
  (%32,)
}

def @func_8992(%var_8954: Tensor[(8, 3, 11), int8]) -> (Tensor[(8, 3, 11), int8], Tensor[(16), uint64], Tensor[(16), uint64]) {
  %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 3, 1), int8] */, dtype="int8") /* ty=Tensor[(8, 3, 1), int8] */;
  %34 = cast(%var_8954, dtype="int8") /* ty=Tensor[(8, 3, 11), int8] */;
  %35 = right_shift(%33, %34) /* ty=Tensor[(8, 3, 11), int8] */;
  %36 = @func_8946() /* ty=Tensor[(16), uint64] */;
  %37 = @func_766() /* ty=Tensor[(16), uint64] */;
  (%35, %36, %37)
}

def @func_9545() -> (uint64, uint64, Tensor[(16), uint64]) {
  %44 = fn () -> (uint64, uint64, Tensor[(16), uint64]) {
    %38 = @func_7447() /* ty=(Tensor[(16), uint64], uint64, Tensor[(16), uint64], Tensor[(14, 10, ?), float32], Tensor[(140), float32]) */;
    %39 = @func_2083() /* ty=(uint64, uint64) */;
    %40 = @func_3734() /* ty=(Tensor[(16), uint64],) */;
    %41 = %38.1;
    %42 = %39.0;
    %43 = %40.0;
    (%41, %42, %43)
  };
  %44() /* ty=(uint64, uint64, Tensor[(16), uint64]) */
}

def @func_991(%var_989: Tensor[(14, 10, 1), float32], %var_990: Tensor[(14, 10, 1), float32]) -> (Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) {
  @func_987(%var_989, %var_990) /* ty=(Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */
}

def @func_9277() -> (uint64, Tensor[(16), uint64], Tensor[(16, 16), float64]) {
  %45 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 16), float64] */, dtype="float64") /* ty=Tensor[(16, 16), float64] */;
  %46 = reshape(%45, newshape=[4, 8, 8]) /* ty=Tensor[(4, 8, 8), float64] */;
  %47 = @func_6136(%46) /* ty=(uint64, Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(4, 8, 8), uint64], Tensor[(16), uint64], Tensor[(4, 8, 8), float32]) */;
  %48 = @func_905() /* ty=uint64 */;
  %49 = %47.2;
  (%48, %49, meta[relay.Constant][4] /* ty=Tensor[(16, 16), float64] */)
}

def @func_1540() -> Tensor[(16), uint64] {
  %50 = fn () -> Tensor[(16), uint64] {
    @func_467() /* ty=Tensor[(16), uint64] */
  };
  %50() /* ty=Tensor[(16), uint64] */
}

def @func_8163(%var_8156: Tensor[(1, 364), float32], %var_8159: Tensor[(6), float32]) -> (Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(1, 364), float32], Tensor[(6), float32], Tensor[(6), float32]) {
  %51 = @func_5237() /* ty=(Tensor[(16), uint64],) */;
  %52 = cast(%var_8156, dtype="float32") /* ty=Tensor[(1, 364), float32] */;
  %53 = reshape(%52, newshape=[364]) /* ty=Tensor[(364), float32] */;
  %54 = @func_1250(%53) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */;
  %55 = cast(%var_8159, dtype="float32") /* ty=Tensor[(6), float32] */;
  %56 = reshape(%55, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %57 = @func_3586(%56) /* ty=(Tensor[(16), uint64], Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
  %58 = %51.0;
  %59 = %54.1;
  %60 = %57.2;
  (%58, %59, %var_8156, %60, %var_8159)
}

def @func_639(%var_632: Tensor[(1, 2, 3), float32]) -> (Tensor[(1, 2, 3), float32],) {
  %61 = cast(%var_632, dtype="float32") /* ty=Tensor[(1, 2, 3), float32] */;
  %62 = acos(%61) /* ty=Tensor[(1, 2, 3), float32] */;
  (%62,)
}

def @func_4503() -> (Tensor[(16), uint64], uint64) {
  %63 = @func_1904() /* ty=(Tensor[(16), uint64],) */;
  %64 = %63.0;
  %65 = @func_4256() /* ty=uint64 */;
  (%64, %65)
}

def @func_3646() -> uint64 {
  @func_3644() /* ty=uint64 */
}

def @func_2664() -> Tensor[(1, 16), bool] {
  %66 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %66.2
}

def @func_4827(%var_4819: Tensor[(364), float32]) -> (Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) {
  %67 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %68 = cast(%var_4819, dtype="float32") /* ty=Tensor[(364), float32] */;
  %69 = reshape(%68, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), float32] */;
  %70 = %67.0;
  %71 = @func_560(%69) /* ty=Tensor[(2, 14, 13), float32] */;
  (%70, %71, %var_4819)
}

def @func_3149() -> (Tensor[(16), uint64],) {
  @func_3147() /* ty=(Tensor[(16), uint64],) */
}

def @func_469() -> Tensor[(16), uint64] {
  @func_467() /* ty=Tensor[(16), uint64] */
}

def @func_6690(%var_6688: Tensor[(6, 140), float32]) -> (Tensor[(16), uint64], Tensor[(16, 3, 7), bool], Tensor[(6, 140), float32], Tensor[(900), float64], Tensor[(270), int32], Tensor[(336), bool]) {
  @func_6687(%var_6688) /* ty=(Tensor[(16), uint64], Tensor[(16, 3, 7), bool], Tensor[(6, 140), float32], Tensor[(900), float64], Tensor[(270), int32], Tensor[(336), bool]) */
}

def @func_5608() -> (uint64, Tensor[(16), uint64]) {
  %76 = fn () -> (uint64, Tensor[(16), uint64]) {
    %72 = @func_1485() /* ty=(Tensor[(16), uint64], uint64) */;
    %73 = @func_3563() /* ty=(Tensor[(16), uint64], uint64) */;
    %74 = %72.1;
    %75 = %73.0;
    (%74, %75)
  };
  %76() /* ty=(uint64, Tensor[(16), uint64]) */
}

def @func_7260() -> Tensor[(16), uint64] {
  @func_7258() /* ty=Tensor[(16), uint64] */
}

def @func_7448() -> (Tensor[(16), uint64], uint64, Tensor[(16), uint64], Tensor[(14, 10, ?), float32], Tensor[(140), float32]) {
  %87 = fn () -> (Tensor[(16), uint64], uint64, Tensor[(16), uint64], Tensor[(14, 10, ?), float32], Tensor[(140), float32]) {
    %77 = @func_5237() /* ty=(Tensor[(16), uint64],) */;
    %78 = @func_2687() /* ty=(uint64, uint64) */;
    %79 = @func_2326() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64, uint64, Tensor[(364), float32]) */;
    %80 = cast(meta[relay.Constant][5] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
    %81 = reshape(%80, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %82 = @func_2933(%81) /* ty=(Tensor[(16), uint64], Tensor[(140), float32], Tensor[(14, 10, ?), float32]) */;
    %83 = %77.0;
    %84 = %78.1;
    %85 = %79.0;
    %86 = %82.2;
    (%83, %84, %85, %86, meta[relay.Constant][5] /* ty=Tensor[(140), float32] */)
  };
  %87() /* ty=(Tensor[(16), uint64], uint64, Tensor[(16), uint64], Tensor[(14, 10, ?), float32], Tensor[(140), float32]) */
}

def @func_2700(%var_2693: Tensor[(9, 8, 3), float64]) -> (Tensor[(9, 8, 3), float64],) {
  %88 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 8, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 8, 3), float64] */;
  %89 = shape_of(%var_2693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%var_2693, dtype="float64") /* ty=Tensor[(9, 8, 3), float64] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %92 = divide(%90, %91) /* ty=Tensor[(9, 8, 3), float64] */;
  (%92,)
}

def @func_6687(%var_6660: Tensor[(6, 140), float32]) -> (Tensor[(16), uint64], Tensor[(16, 3, 7), bool], Tensor[(6, 140), float32], Tensor[(900), float64], Tensor[(270), int32], Tensor[(336), bool]) {
  %93 = @func_6594() /* ty=(Tensor[(16), uint64],) */;
  %94 = cast(%var_6660, dtype="float32") /* ty=Tensor[(6, 140), float32] */;
  %95 = cast(meta[relay.Constant][7] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %96 = cast(meta[relay.Constant][8] /* ty=Tensor[(270), int32] */, dtype="int32") /* ty=Tensor[(270), int32] */;
  %97 = cast(meta[relay.Constant][9] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %98 = reshape(%94, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %99 = reshape(%95, newshape=[900]) /* ty=Tensor[(900), float64] */;
  %100 = reshape(%96, newshape=[3, 90]) /* ty=Tensor[(3, 90), int32] */;
  %101 = reshape(%97, newshape=[24, 14]) /* ty=Tensor[(24, 14), bool] */;
  %102 = @func_4019(%98, %99, %100, %101) /* ty=(Tensor[(16), uint64], Tensor[(900), float64], Tensor[(3, 90), int32], Tensor[(8, 7, 15), float32], Tensor[(16, 3, 7), bool], Tensor[(24, 14), bool]) */;
  %103 = %93.0;
  %104 = %102.4;
  (%103, %104, %var_6660, meta[relay.Constant][7] /* ty=Tensor[(900), float64] */, meta[relay.Constant][8] /* ty=Tensor[(270), int32] */, meta[relay.Constant][9] /* ty=Tensor[(336), bool] */)
}

def @func_8178() -> uint64 {
  @func_8176() /* ty=uint64 */
}

def @func_6742() -> (uint64,) {
  @func_6740() /* ty=(uint64,) */
}

def @func_2407(%var_2406: Tensor[(140), float32]) -> (Tensor[(16), uint64], Tensor[(140), bool], Tensor[(140), int64], uint64) {
  %118 = fn (%var_2375: Tensor[(140), float32]) -> (Tensor[(16), uint64], Tensor[(140), bool], Tensor[(140), int64], uint64) {
    %105 = cast(%var_2375, dtype="float32") /* ty=Tensor[(140), float32] */;
    %106 = reshape(%105, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %107 = @func_1656(%106) /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(14, 10, ?), int64], Tensor[(140), float32], Tensor[(16), uint64]) */;
    %108 = @func_2083() /* ty=(uint64, uint64) */;
    %109 = %108.1;
    %110 = cast(%var_2375, dtype="bool") /* ty=Tensor[(140), bool] */;
    %111 = cast(%109, dtype="bool") /* ty=bool */;
    %112 = cast(%109, dtype="int64") /* ty=int64 */;
    %113 = cast(%var_2375, dtype="int64") /* ty=Tensor[(140), int64] */;
    %114 = %107.0;
    %115 = greater_equal(%110, %111) /* ty=Tensor[(140), bool] */;
    %116 = add(%112, %113) /* ty=Tensor[(140), int64] */;
    %117 = @func_1861() /* ty=uint64 */;
    (%114, %115, %116, %117)
  };
  %118(%var_2406) /* ty=(Tensor[(16), uint64], Tensor[(140), bool], Tensor[(140), int64], uint64) */
}

def @func_987(%var_938: Tensor[(14, 10, 1), float32], %var_946: Tensor[(14, 10, 1), float32]) -> (Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) {
  %119 = cast(%var_938, dtype="float32") /* ty=Tensor[(14, 10, 1), float32] */;
  %120 = atanh(%119) /* ty=Tensor[(14, 10, 1), float32] */;
  %121 = cast(%var_946, dtype="int64") /* ty=Tensor[(14, 10, 1), int64] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="int64") /* ty=Tensor[(14, 10, 1), int64] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %125 = cast(meta[relay.Constant][10] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
  %126 = reshape(%125, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), float32] */;
  %127 = @func_639(%126) /* ty=(Tensor[(1, 2, 3), float32],) */;
  %128 = bitwise_and(%123, %124) /* ty=Tensor[(14, 10, ?), int64] */;
  %129 = @func_364() /* ty=uint64 */;
  %130 = %127.0;
  (%128, %129, %130, meta[relay.Constant][10] /* ty=Tensor[(6), float32] */)
}

def @func_906() -> uint64 {
  %131 = fn () -> uint64 {
    @func_364() /* ty=uint64 */
  };
  %131() /* ty=uint64 */
}

def @func_1959() -> Tensor[(16), uint64] {
  @func_1957() /* ty=Tensor[(16), uint64] */
}

def @func_3082(%var_3073: Tensor[(5, 15, 12), float64], %var_3080: Tensor[(270), int32]) -> (Tensor[(5, 15, 12), float64], Tensor[(16), uint64], Tensor[(6, 15, 3), float64], Tensor[(270), int32]) {
  %132 = cast(%var_3073, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %133 = @func_1904() /* ty=(Tensor[(16), uint64],) */;
  %134 = cast(%var_3080, dtype="int32") /* ty=Tensor[(270), int32] */;
  %135 = cast(%var_3080, dtype="float64") /* ty=Tensor[(270), float64] */;
  %136 = reshape(%134, newshape=[6, 15, 3]) /* ty=Tensor[(6, 15, 3), int32] */;
  %137 = reshape(%135, newshape=[6, 15, 3]) /* ty=Tensor[(6, 15, 3), float64] */;
  %138 = @func_274(%136, %137) /* ty=(Tensor[(6, 15, 3), float64],) */;
  %139 = log10(%132) /* ty=Tensor[(5, 15, 12), float64] */;
  %140 = %133.0;
  %141 = %138.0;
  (%139, %140, %141, %var_3080)
}

def @func_3260(%var_3258: Tensor[(1456, 1), float32], %var_3259: Tensor[(364), float32]) -> (uint64, Tensor[(3, 11, 16), float32], Tensor[(1456, 1), float32], Tensor[(140), float32], uint64, Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) {
  %163 = fn (%var_3236: Tensor[(1456, 1), float32], %var_3254: Tensor[(364), float32]) -> (uint64, Tensor[(3, 11, 16), float32], Tensor[(1456, 1), float32], Tensor[(140), float32], uint64, Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) {
    %142 = @func_2687() /* ty=(uint64, uint64) */;
    %143 = cast(%var_3236, dtype="float32") /* ty=Tensor[(1456, 1), float32] */;
    %144 = cast(meta[relay.Constant][11] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
    %145 = cast(meta[relay.Constant][11] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
    %146 = reshape(%143, newshape=[7, 16, 13]) /* ty=Tensor[(7, 16, 13), float32] */;
    %147 = reshape(%144, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
    %148 = reshape(%145, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
    %149 = @func_2636(%146, %147, %148) /* ty=(Tensor[(140), bool], Tensor[(35, 4), bool], Tensor[(16), uint64], Tensor[(7, 16, 13), int16], Tensor[(3, 11, 16), float32], Tensor[(528), uint64], Tensor[(7, 16, 13), float64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(364), float32], Tensor[(3, 11, 16), float32]) */;
    %150 = cast(meta[relay.Constant][11] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
    %151 = cast(meta[relay.Constant][11] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
    %152 = reshape(%150, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
    %153 = reshape(%151, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
    %154 = @func_987(%152, %153) /* ty=(Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
    %155 = cast(%var_3254, dtype="float32") /* ty=Tensor[(364), float32] */;
    %156 = reshape(%155, newshape=[364]) /* ty=Tensor[(364), float32] */;
    %157 = @func_1250(%156) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */;
    %158 = %142.1;
    %159 = %149.4;
    %160 = %154.1;
    %161 = @func_1116() /* ty=Tensor[(16), uint64] */;
    %162 = %157.1;
    (%158, %159, %var_3236, meta[relay.Constant][11] /* ty=Tensor[(140), float32] */, %160, %161, %162, %var_3254)
  };
  %163(%var_3258, %var_3259) /* ty=(uint64, Tensor[(3, 11, 16), float32], Tensor[(1456, 1), float32], Tensor[(140), float32], uint64, Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */
}

def @func_7190() -> (Tensor[(1, 16), bool],) {
  %164 = @func_2664() /* ty=Tensor[(1, 16), bool] */;
  (%164,)
}

def @func_320() -> (Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) {
  %165 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 6, 11), float32] */, dtype="float32") /* ty=Tensor[(7, 6, 11), float32] */;
  %166 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 6, 11), float32] */, dtype="float32") /* ty=Tensor[(7, 6, 11), float32] */;
  %167 = cast(meta[relay.Constant][13] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %168 = cast(meta[relay.Constant][14] /* ty=Tensor[(16), uint64] */, dtype="uint64") /* ty=Tensor[(16), uint64] */;
  %169 = reshape(%167, newshape=[]) /* ty=uint64 */;
  %170 = reshape(%168, newshape=[1, 16]) /* ty=Tensor[(1, 16), uint64] */;
  %171 = @func_107(%169, %170) /* ty=(Tensor[(1, 16), bool],) */;
  %172 = log10(%165) /* ty=Tensor[(7, 6, 11), float32] */;
  %173 = log2(%166) /* ty=Tensor[(7, 6, 11), float32] */;
  %174 = %171.0;
  (%172, %173, %174, meta[relay.Constant][13] /* ty=uint64 */, meta[relay.Constant][14] /* ty=Tensor[(16), uint64] */)
}

def @func_2449() -> (Tensor[(16), uint64],) {
  %175 = @func_1039() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %176 = %175.0;
  (%176,)
}

def @func_5663() -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(1456), float32], Tensor[(364), uint16]) {
  %193 = fn () -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(1456), float32], Tensor[(364), uint16]) {
    %177 = @func_3161() /* ty=(Tensor[(16), uint64],) */;
    %178 = @func_3734() /* ty=(Tensor[(16), uint64],) */;
    %179 = cast(meta[relay.Constant][15] /* ty=Tensor[(1456), float32] */, dtype="float32") /* ty=Tensor[(1456), float32] */;
    %180 = cast(meta[relay.Constant][16] /* ty=Tensor[(91, 4), float32] */, dtype="float32") /* ty=Tensor[(91, 4), float32] */;
    %181 = reshape(%179, newshape=[1456, 1]) /* ty=Tensor[(1456, 1), float32] */;
    %182 = reshape(%180, newshape=[364]) /* ty=Tensor[(364), float32] */;
    %183 = @func_3257(%181, %182) /* ty=(uint64, Tensor[(3, 11, 16), float32], Tensor[(1456, 1), float32], Tensor[(140), float32], uint64, Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */;
    %184 = %183.7;
    %185 = cast(meta[relay.Constant][16] /* ty=Tensor[(91, 4), float32] */, dtype="uint16") /* ty=Tensor[(91, 4), uint16] */;
    %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(1), int32] */;
    %187 = cast(%184, dtype="uint16") /* ty=Tensor[(364), uint16] */;
    %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %189 = @func_3115() /* ty=Tensor[(16), uint64] */;
    %190 = %177.0;
    %191 = %178.0;
    %192 = bitwise_xor(%187, %188) /* ty=Tensor[(364), uint16] */;
    (%189, %190, %191, meta[relay.Constant][15] /* ty=Tensor[(1456), float32] */, %192)
  };
  %193() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(1456), float32], Tensor[(364), uint16]) */
}

def @func_4302(%var_4300: Tensor[(12, 10, 11), float32]) -> (Tensor[(12, 10, 11), uint64], Tensor[(12, 10, 11), float32]) {
  @func_4299(%var_4300) /* ty=(Tensor[(12, 10, 11), uint64], Tensor[(12, 10, 11), float32]) */
}

def @func_9594() -> Tensor[(7, 6, 11), float32] {
  @func_9592() /* ty=Tensor[(7, 6, 11), float32] */
}

def @func_4258() -> uint64 {
  @func_4256() /* ty=uint64 */
}

def @func_3314() -> (Tensor[(16), uint64], Tensor[(16), uint64], uint64) {
  @func_3312() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64) */
}

def @func_4977(%var_4975: Tensor[(704), uint64]) -> (uint64, Tensor[(1, 16), bool], Tensor[(2, 8), float32], Tensor[(4, 11, 16), bool], Tensor[(704), uint64]) {
  @func_4974(%var_4975) /* ty=(uint64, Tensor[(1, 16), bool], Tensor[(2, 8), float32], Tensor[(4, 11, 16), bool], Tensor[(704), uint64]) */
}

def @func_366() -> uint64 {
  @func_364() /* ty=uint64 */
}

def @func_5146(%var_5089: Tensor[(8, 1, 4), float64]) -> (Tensor[(8, ?, 4), float32], Tensor[(16), uint64], Tensor[(8, 1, 4), float64], uint64, Tensor[(16), uint64]) {
  %194 = cast(%var_5089, dtype="float64") /* ty=Tensor[(8, 1, 4), float64] */;
  %195 = asin(%194) /* ty=Tensor[(8, 1, 4), float64] */;
  %196 = cast(%var_5089, dtype="uint8") /* ty=Tensor[(8, 1, 4), uint8] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="uint8") /* ty=Tensor[(8, 1, 4), uint8] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %200 = bitwise_or(%198, %199) /* ty=Tensor[(8, ?, 4), uint8] */;
  %201 = cast(%200, dtype="uint32") /* ty=Tensor[(8, ?, 4), uint32] */;
  %202 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%195, dtype="uint32") /* ty=Tensor[(8, 1, 4), uint32] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %205 = right_shift(%203, %204) /* ty=Tensor[(8, ?, 4), uint32] */;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(8, ?, 4), float32] */;
  %207 = @func_2186() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(16), uint64]) */;
  %208 = cast(%var_5089, dtype="float64") /* ty=Tensor[(8, 1, 4), float64] */;
  %209 = @func_3057() /* ty=(uint64,) */;
  %210 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %211 = log(%206) /* ty=Tensor[(8, ?, 4), float32] */;
  %212 = %207.1;
  %213 = atan(%208) /* ty=Tensor[(8, 1, 4), float64] */;
  %214 = %209.0;
  %215 = %210.0;
  (%211, %212, %213, %214, %215)
}

def @func_3116() -> Tensor[(16), uint64] {
  %217 = fn () -> Tensor[(16), uint64] {
    %216 = @func_490() /* ty=(Tensor[(16), uint64],) */;
    %216.0
  };
  %217() /* ty=Tensor[(16), uint64] */
}

def @func_6740() -> (uint64,) {
  %218 = @func_4256() /* ty=uint64 */;
  (%218,)
}

def @func_5191() -> (Tensor[(16), uint64],) {
  %220 = fn () -> (Tensor[(16), uint64],) {
    %219 = @func_1116() /* ty=Tensor[(16), uint64] */;
    (%219,)
  };
  %220() /* ty=(Tensor[(16), uint64],) */
}

def @func_1795() -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
  @func_1793() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */
}

def @func_6728(%var_6726: Tensor[(9, 14, 9), int64], %var_6727: Tensor[(9, 14, 9), int64]) -> Tensor[(9, 14, 9), int64] {
  %225 = fn (%var_6720: Tensor[(9, 14, 9), int64], %var_6721: Tensor[(9, 14, 9), int64]) -> Tensor[(9, 14, 9), int64] {
    %221 = cast(%var_6721, dtype="int64") /* ty=Tensor[(9, 14, 9), int64] */;
    %222 = shape_of(%var_6720, dtype="int32") /* ty=Tensor[(3), int32] */;
    %223 = cast(%var_6720, dtype="int64") /* ty=Tensor[(9, 14, 9), int64] */;
    %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    multiply(%223, %224) /* ty=Tensor[(9, 14, 9), int64] */
  };
  %225(%var_6726, %var_6727) /* ty=Tensor[(9, 14, 9), int64] */
}

def @func_3343() -> (Tensor[(1, 16), bool],) {
  %226 = @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %227 = %226.1;
  (%227,)
}

def @func_2640(%var_2637: Tensor[(7, 16, 13), float32], %var_2638: Tensor[(35, 4), float32], %var_2639: Tensor[(35, 4), float32]) -> (Tensor[(140), bool], Tensor[(35, 4), bool], Tensor[(16), uint64], Tensor[(7, 16, 13), int16], Tensor[(3, 11, 16), float32], Tensor[(528), uint64], Tensor[(7, 16, 13), float64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(364), float32], Tensor[(3, 11, 16), float32]) {
  %266 = fn (%var_2532: Tensor[(7, 16, 13), float32], %var_2547: Tensor[(35, 4), float32], %var_2551: Tensor[(35, 4), float32]) -> (Tensor[(140), bool], Tensor[(35, 4), bool], Tensor[(16), uint64], Tensor[(7, 16, 13), int16], Tensor[(3, 11, 16), float32], Tensor[(528), uint64], Tensor[(7, 16, 13), float64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(364), float32], Tensor[(3, 11, 16), float32]) {
    %228 = cast(%var_2547, dtype="float32") /* ty=Tensor[(35, 4), float32] */;
    %229 = reshape(%228, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %230 = @func_2405(%229) /* ty=(Tensor[(16), uint64], Tensor[(140), bool], Tensor[(140), int64], uint64) */;
    %231 = cast(%var_2551, dtype="bool") /* ty=Tensor[(35, 4), bool] */;
    %232 = shape_of(%var_2547, dtype="int32") /* ty=Tensor[(2), int32] */;
    %233 = cast(%var_2547, dtype="bool") /* ty=Tensor[(35, 4), bool] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %235 = @func_1793() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
    %236 = cast(%var_2532, dtype="float32") /* ty=Tensor[(7, 16, 13), float32] */;
    %237 = asin(%236) /* ty=Tensor[(7, 16, 13), float32] */;
    %238 = cast(%237, dtype="float32") /* ty=Tensor[(7, 16, 13), float32] */;
    %239 = log(%238) /* ty=Tensor[(7, 16, 13), float32] */;
    %240 = cast(%var_2532, dtype="int16") /* ty=Tensor[(7, 16, 13), int16] */;
    %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
    %242 = cast(%239, dtype="int16") /* ty=Tensor[(7, 16, 13), int16] */;
    %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %244 = cast(meta[relay.Constant][17] /* ty=Tensor[(528), uint64] */, dtype="uint64") /* ty=Tensor[(528), uint64] */;
    %245 = reshape(%244, newshape=[3, 11, 16]) /* ty=Tensor[(3, 11, 16), uint64] */;
    %246 = @func_438(%245) /* ty=(Tensor[(3, 11, 16), uint32], Tensor[(3, 11, 16), float32]) */;
    %247 = cast(%239, dtype="float64") /* ty=Tensor[(7, 16, 13), float64] */;
    %248 = @func_1793() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
    %249 = @func_2449() /* ty=(Tensor[(16), uint64],) */;
    %250 = @func_1904() /* ty=(Tensor[(16), uint64],) */;
    %251 = @func_2326() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64, uint64, Tensor[(364), float32]) */;
    %252 = %246.1;
    %253 = cast(%252, dtype="uint64") /* ty=Tensor[(3, 11, 16), uint64] */;
    %254 = reshape(%253, newshape=[3, 11, 16]) /* ty=Tensor[(3, 11, 16), uint64] */;
    %255 = @func_438(%254) /* ty=(Tensor[(3, 11, 16), uint32], Tensor[(3, 11, 16), float32]) */;
    %256 = %230.1;
    %257 = greater(%233, %234) /* ty=Tensor[(35, 4), bool] */;
    %258 = %235.0;
    %259 = add(%242, %243) /* ty=Tensor[(7, 16, 13), int16] */;
    %260 = exp(%247) /* ty=Tensor[(7, 16, 13), float64] */;
    %261 = %248.1;
    %262 = %249.0;
    %263 = %250.0;
    %264 = %251.4;
    %265 = %255.1;
    (%256, %257, %258, %259, %252, meta[relay.Constant][17] /* ty=Tensor[(528), uint64] */, %260, %261, %262, %263, %264, %265)
  };
  %266(%var_2637, %var_2638, %var_2639) /* ty=(Tensor[(140), bool], Tensor[(35, 4), bool], Tensor[(16), uint64], Tensor[(7, 16, 13), int16], Tensor[(3, 11, 16), float32], Tensor[(528), uint64], Tensor[(7, 16, 13), float64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(364), float32], Tensor[(3, 11, 16), float32]) */
}

def @func_5149(%var_5147: Tensor[(8, 1, 4), float64]) -> (Tensor[(8, ?, 4), float32], Tensor[(16), uint64], Tensor[(8, 1, 4), float64], uint64, Tensor[(16), uint64]) {
  @func_5146(%var_5147) /* ty=(Tensor[(8, ?, 4), float32], Tensor[(16), uint64], Tensor[(8, 1, 4), float64], uint64, Tensor[(16), uint64]) */
}

def @func_1116() -> Tensor[(16), uint64] {
  %267 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
  %267.0
}

def @func_7860(%var_7849: Tensor[(7, 1), uint64]) -> (Tensor[(7, 1), bool], Tensor[(16), uint64]) {
  %268 = @func_6759() /* ty=uint64 */;
  %269 = cast(%268, dtype="bool") /* ty=bool */;
  %270 = cast(%var_7849, dtype="bool") /* ty=Tensor[(7, 1), bool] */;
  %271 = @func_1904() /* ty=(Tensor[(16), uint64],) */;
  %272 = logical_or(%269, %270) /* ty=Tensor[(7, 1), bool] */;
  %273 = %271.0;
  (%272, %273)
}

def @func_8176() -> uint64 {
  @func_3210() /* ty=uint64 */
}

def @func_4726() -> (Tensor[(11, 11, 8), float64], uint64, Tensor[(140), float32], Tensor[(2, 16, 12), bool], Tensor[(384, 1), float32]) {
  %274 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 11, 8), float64] */, dtype="float64") /* ty=Tensor[(11, 11, 8), float64] */;
  %275 = cast(meta[relay.Constant][19] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %276 = cast(meta[relay.Constant][19] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %277 = reshape(%275, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %278 = reshape(%276, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
  %279 = @func_987(%277, %278) /* ty=(Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
  %280 = cast(meta[relay.Constant][20] /* ty=Tensor[(384, 1), float32] */, dtype="float32") /* ty=Tensor[(384, 1), float32] */;
  %281 = reshape(%280, newshape=[2, 16, 12]) /* ty=Tensor[(2, 16, 12), float32] */;
  %282 = cos(%274) /* ty=Tensor[(11, 11, 8), float64] */;
  %283 = %279.1;
  %284 = @func_4439(%281) /* ty=Tensor[(2, 16, 12), bool] */;
  (%282, %283, meta[relay.Constant][19] /* ty=Tensor[(140), float32] */, %284, meta[relay.Constant][20] /* ty=Tensor[(384, 1), float32] */)
}

def @func_5334(%var_5333: Tensor[(10, 140), float32]) -> (Tensor[(16), uint64], Tensor[(10, 140), float32], Tensor[(1, 140), float64]) {
  %293 = fn (%var_5302: Tensor[(10, 140), float32]) -> (Tensor[(16), uint64], Tensor[(10, 140), float32], Tensor[(1, 140), float64]) {
    %285 = @func_2897() /* ty=(Tensor[(16), uint64], Tensor[(?, 16), float64], Tensor[(16), uint64], Tensor[(1, 140), float32]) */;
    %286 = %285.3;
    %287 = cast(%286, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
    %288 = cast(%var_5302, dtype="float32") /* ty=Tensor[(10, 140), float32] */;
    %289 = cast(%286, dtype="float64") /* ty=Tensor[(1, 140), float64] */;
    %290 = @func_1957() /* ty=Tensor[(16), uint64] */;
    %291 = floor_divide(%287, %288) /* ty=Tensor[(10, 140), float32] */;
    %292 = erf(%289) /* ty=Tensor[(1, 140), float64] */;
    (%290, %291, %292)
  };
  %293(%var_5333) /* ty=(Tensor[(16), uint64], Tensor[(10, 140), float32], Tensor[(1, 140), float64]) */
}

def @func_5883() -> Tensor[(16), uint64] {
  @func_2789() /* ty=Tensor[(16), uint64] */
}

def @func_2451() -> (Tensor[(16), uint64],) {
  @func_2449() /* ty=(Tensor[(16), uint64],) */
}

def @func_4354() -> (Tensor[(16), uint64],) {
  %294 = @func_1904() /* ty=(Tensor[(16), uint64],) */;
  %295 = %294.0;
  (%295,)
}

def @func_6223() -> (uint64,) {
  @func_6221() /* ty=(uint64,) */
}

def @func_6909() -> (uint64, Tensor[(16), uint64], uint64) {
  %296 = @func_4397() /* ty=(uint64,) */;
  %297 = @func_4861() /* ty=(Tensor[(16), uint64],) */;
  %298 = @func_3057() /* ty=(uint64,) */;
  %299 = %296.0;
  %300 = %297.0;
  %301 = %298.0;
  (%299, %300, %301)
}

def @func_8317() -> (Tensor[(16), uint64], Tensor[(9, 8, 3), float64], Tensor[(216), float64]) {
  @func_8315() /* ty=(Tensor[(16), uint64], Tensor[(9, 8, 3), float64], Tensor[(216), float64]) */
}

def @func_9632() -> (uint64,) {
  %304 = fn () -> (uint64,) {
    %302 = @func_6740() /* ty=(uint64,) */;
    %303 = %302.0;
    (%303,)
  };
  %304() /* ty=(uint64,) */
}

def @func_3059() -> (uint64,) {
  @func_3057() /* ty=(uint64,) */
}

def @func_8844() -> Tensor[(16), uint64] {
  %306 = fn () -> Tensor[(16), uint64] {
    %305 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
    %305.0
  };
  %306() /* ty=Tensor[(16), uint64] */
}

def @func_5239() -> (Tensor[(16), uint64],) {
  @func_5237() /* ty=(Tensor[(16), uint64],) */
}

def @func_5958() -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) {
  %313 = fn () -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) {
    %307 = @func_5237() /* ty=(Tensor[(16), uint64],) */;
    %308 = @func_2897() /* ty=(Tensor[(16), uint64], Tensor[(?, 16), float64], Tensor[(16), uint64], Tensor[(1, 140), float32]) */;
    %309 = @func_3977() /* ty=Tensor[(16), uint64] */;
    %310 = @func_766() /* ty=Tensor[(16), uint64] */;
    %311 = %307.0;
    %312 = %308.2;
    (%309, %310, %311, %312)
  };
  %313() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) */
}

def @func_7738() -> (Tensor[(16), uint64], uint64, uint64) {
  %318 = fn () -> (Tensor[(16), uint64], uint64, uint64) {
    %314 = @func_4503() /* ty=(Tensor[(16), uint64], uint64) */;
    %315 = @func_5018() /* ty=Tensor[(16), uint64] */;
    %316 = @func_905() /* ty=uint64 */;
    %317 = %314.1;
    (%315, %316, %317)
  };
  %318() /* ty=(Tensor[(16), uint64], uint64, uint64) */
}

def @func_5237() -> (Tensor[(16), uint64],) {
  %319 = @func_1793() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %320 = %319.1;
  (%320,)
}

def @func_8659() -> Tensor[(16), uint64] {
  %322 = fn () -> Tensor[(16), uint64] {
    %321 = @func_5190() /* ty=(Tensor[(16), uint64],) */;
    %321.0
  };
  %322() /* ty=Tensor[(16), uint64] */
}

def @func_9386() -> (Tensor[(16), uint64],) {
  %324 = fn () -> (Tensor[(16), uint64],) {
    %323 = @func_9186() /* ty=Tensor[(16), uint64] */;
    (%323,)
  };
  %324() /* ty=(Tensor[(16), uint64],) */
}

def @func_6957(%var_6956: Tensor[(7, 12, 4), float32]) -> (Tensor[(7, 12, 4), float32], Tensor[(1, 2, 3), float32], Tensor[(12), float32]) {
  %331 = fn (%var_6946: Tensor[(7, 12, 4), float32]) -> (Tensor[(7, 12, 4), float32], Tensor[(1, 2, 3), float32], Tensor[(12), float32]) {
    %325 = cast(%var_6946, dtype="float32") /* ty=Tensor[(7, 12, 4), float32] */;
    %326 = cast(meta[relay.Constant][21] /* ty=Tensor[(12), float32] */, dtype="float32") /* ty=Tensor[(12), float32] */;
    %327 = reshape(%326, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float32] */;
    %328 = @func_6529(%327) /* ty=(Tensor[(1, 2, 3), float32], Tensor[(6), float32], Tensor[(3, 2, 2), int16], Tensor[(16), uint64]) */;
    %329 = sqrt(%325) /* ty=Tensor[(7, 12, 4), float32] */;
    %330 = %328.0;
    (%329, %330, meta[relay.Constant][21] /* ty=Tensor[(12), float32] */)
  };
  %331(%var_6956) /* ty=(Tensor[(7, 12, 4), float32], Tensor[(1, 2, 3), float32], Tensor[(12), float32]) */
}

def @func_3927(%var_3925: Tensor[(16, 3, 7), bool]) -> (Tensor[(16, 3, 7), bool], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) {
  @func_3924(%var_3925) /* ty=(Tensor[(16, 3, 7), bool], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) */
}

def @func_5850(%var_5849: Tensor[(3, 12, 14), float64]) -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(182, 2), float32], Tensor[(504), float64], Tensor[(3, 12, 14), bool]) {
  %348 = fn (%var_5841: Tensor[(3, 12, 14), float64]) -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(182, 2), float32], Tensor[(504), float64], Tensor[(3, 12, 14), bool]) {
    %332 = @func_4671() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
    %333 = cast(meta[relay.Constant][22] /* ty=Tensor[(182, 2), float32] */, dtype="float32") /* ty=Tensor[(182, 2), float32] */;
    %334 = reshape(%333, newshape=[364]) /* ty=Tensor[(364), float32] */;
    %335 = @func_1250(%334) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */;
    %336 = cast(meta[relay.Constant][23] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
    %337 = reshape(%336, newshape=[3, 12, 14]) /* ty=Tensor[(3, 12, 14), float64] */;
    %338 = @func_3499(%337) /* ty=(Tensor[(3, 12, 14), float64],) */;
    %339 = %338.0;
    %340 = cast(%var_5841, dtype="bool") /* ty=Tensor[(3, 12, 14), bool] */;
    %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
    %342 = cast(%339, dtype="bool") /* ty=Tensor[(3, 12, 14), bool] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %344 = %332.1;
    %345 = @func_1957() /* ty=Tensor[(16), uint64] */;
    %346 = %335.0;
    %347 = less(%342, %343) /* ty=Tensor[(3, 12, 14), bool] */;
    (%344, %345, %346, meta[relay.Constant][22] /* ty=Tensor[(182, 2), float32] */, meta[relay.Constant][23] /* ty=Tensor[(504), float64] */, %347)
  };
  %348(%var_5849) /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(182, 2), float32], Tensor[(504), float64], Tensor[(3, 12, 14), bool]) */
}

def @func_4830(%var_4828: Tensor[(364), float32]) -> (Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) {
  @func_4827(%var_4828) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */
}

def @func_8391() -> (uint64,) {
  %350 = fn () -> (uint64,) {
    %349 = @func_8064() /* ty=uint64 */;
    (%349,)
  };
  %350() /* ty=(uint64,) */
}

def @func_3453(%var_3451: Tensor[(2, 13, 9), float64], %var_3452: Tensor[(1, 364), float32]) -> (Tensor[(2, 13, 9), float64], Tensor[(364), float32], Tensor[(1, 364), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(1, 140), float32]) {
  %366 = fn (%var_3413: Tensor[(2, 13, 9), float64], %var_3423: Tensor[(1, 364), float32]) -> (Tensor[(2, 13, 9), float64], Tensor[(364), float32], Tensor[(1, 364), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(1, 140), float32]) {
    %351 = cast(%var_3413, dtype="float64") /* ty=Tensor[(2, 13, 9), float64] */;
    %352 = cast(%var_3423, dtype="float32") /* ty=Tensor[(1, 364), float32] */;
    %353 = reshape(%352, newshape=[364]) /* ty=Tensor[(364), float32] */;
    %354 = @func_1250(%353) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */;
    %355 = cast(meta[relay.Constant][24] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %356 = cast(meta[relay.Constant][25] /* ty=Tensor[(16), uint64] */, dtype="uint64") /* ty=Tensor[(16), uint64] */;
    %357 = reshape(%355, newshape=[]) /* ty=uint64 */;
    %358 = reshape(%356, newshape=[1, 16]) /* ty=Tensor[(1, 16), uint64] */;
    %359 = @func_107(%357, %358) /* ty=(Tensor[(1, 16), bool],) */;
    %360 = @func_2897() /* ty=(Tensor[(16), uint64], Tensor[(?, 16), float64], Tensor[(16), uint64], Tensor[(1, 140), float32]) */;
    %361 = sinh(%351) /* ty=Tensor[(2, 13, 9), float64] */;
    %362 = %354.2;
    %363 = %359.0;
    %364 = @func_1116() /* ty=Tensor[(16), uint64] */;
    %365 = %360.3;
    (%361, %362, %var_3423, %363, meta[relay.Constant][24] /* ty=uint64 */, meta[relay.Constant][25] /* ty=Tensor[(16), uint64] */, %364, %365)
  };
  %366(%var_3451, %var_3452) /* ty=(Tensor[(2, 13, 9), float64], Tensor[(364), float32], Tensor[(1, 364), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(1, 140), float32]) */
}

def @func_2970(%var_2958: Tensor[(4, 11, 16), uint64]) -> Tensor[(4, 11, 16), bool] {
  %367 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 11, 16), uint64] */, dtype="bool") /* ty=Tensor[(4, 11, 16), bool] */;
  %368 = shape_of(%var_2958, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%var_2958, dtype="bool") /* ty=Tensor[(4, 11, 16), bool] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%369, %370) /* ty=Tensor[(4, 11, 16), bool] */
}

def @func_6174(%var_6172: Tensor[(13, 9, 13), float64]) -> (Tensor[(13, 9, 13), float64], Tensor[(16), uint64], Tensor[(16), uint64]) {
  @func_6171(%var_6172) /* ty=(Tensor[(13, 9, 13), float64], Tensor[(16), uint64], Tensor[(16), uint64]) */
}

def @func_8760() -> (Tensor[(16), uint64], uint64) {
  %374 = fn () -> (Tensor[(16), uint64], uint64) {
    %371 = @func_5607() /* ty=(uint64, Tensor[(16), uint64]) */;
    %372 = @func_5018() /* ty=Tensor[(16), uint64] */;
    %373 = %371.0;
    (%372, %373)
  };
  %374() /* ty=(Tensor[(16), uint64], uint64) */
}

def @func_8498(%var_8492: Tensor[(364), float32], %var_8493: Tensor[(6), float32]) -> (uint64, Tensor[(2, 14, 13), float32], Tensor[(364), float32], Tensor[(6), float32]) {
  %375 = @func_2687() /* ty=(uint64, uint64) */;
  %376 = cast(%var_8492, dtype="float32") /* ty=Tensor[(364), float32] */;
  %377 = cast(%var_8493, dtype="float32") /* ty=Tensor[(6), float32] */;
  %378 = reshape(%376, newshape=[1, 364]) /* ty=Tensor[(1, 364), float32] */;
  %379 = reshape(%377, newshape=[6]) /* ty=Tensor[(6), float32] */;
  %380 = @func_8163(%378, %379) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(1, 364), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
  %381 = %375.0;
  %382 = %380.1;
  (%381, %382, %var_8492, %var_8493)
}

def @func_9279() -> (uint64, Tensor[(16), uint64], Tensor[(16, 16), float64]) {
  @func_9277() /* ty=(uint64, Tensor[(16), uint64], Tensor[(16, 16), float64]) */
}

def @func_6531(%var_6530: Tensor[(3, 2, 2), float32]) -> (Tensor[(1, 2, 3), float32], Tensor[(6), float32], Tensor[(3, 2, 2), int16], Tensor[(16), uint64]) {
  %396 = fn (%var_6472: Tensor[(3, 2, 2), float32]) -> (Tensor[(1, 2, 3), float32], Tensor[(6), float32], Tensor[(3, 2, 2), int16], Tensor[(16), uint64]) {
    %383 = cast(meta[relay.Constant][27] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
    %384 = reshape(%383, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), float32] */;
    %385 = @func_639(%384) /* ty=(Tensor[(1, 2, 3), float32],) */;
    %386 = cast(%var_6472, dtype="float32") /* ty=Tensor[(3, 2, 2), float32] */;
    %387 = atanh(%386) /* ty=Tensor[(3, 2, 2), float32] */;
    %388 = cast(%var_6472, dtype="int16") /* ty=Tensor[(3, 2, 2), int16] */;
    %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
    %390 = cast(%387, dtype="int16") /* ty=Tensor[(3, 2, 2), int16] */;
    %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %392 = @func_490() /* ty=(Tensor[(16), uint64],) */;
    %393 = %385.0;
    %394 = subtract(%390, %391) /* ty=Tensor[(3, 2, 2), int16] */;
    %395 = %392.0;
    (%393, meta[relay.Constant][27] /* ty=Tensor[(6), float32] */, %394, %395)
  };
  %396(%var_6530) /* ty=(Tensor[(1, 2, 3), float32], Tensor[(6), float32], Tensor[(3, 2, 2), int16], Tensor[(16), uint64]) */
}

def @main(%var_9778: Tensor[(7, 7), float32]) -> (Tensor[(7, 7), float32],) {
  %397 = cast(%var_9778, dtype="float32") /* ty=Tensor[(7, 7), float32] */;
  %398 = log(%397) /* ty=Tensor[(7, 7), float32] */;
  (%398,)
}

def @func_2083() -> (uint64, uint64) {
  %399 = @func_718() /* ty=(uint64, Tensor[(16), uint64]) */;
  %400 = %399.0;
  %401 = @func_364() /* ty=uint64 */;
  (%400, %401)
}

def @func_3924(%var_3864: Tensor[(16, 3, 7), bool]) -> (Tensor[(16, 3, 7), bool], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) {
  %402 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %403 = cast(%var_3864, dtype="bool") /* ty=Tensor[(16, 3, 7), bool] */;
  %404 = @func_1904() /* ty=(Tensor[(16), uint64],) */;
  %405 = @func_1485() /* ty=(Tensor[(16), uint64], uint64) */;
  %406 = logical_and(%402, %403) /* ty=Tensor[(16, 3, 7), bool] */;
  %407 = @func_766() /* ty=Tensor[(16), uint64] */;
  %408 = %404.0;
  %409 = %405.0;
  (%406, %407, %408, %409)
}

def @func_4505() -> (Tensor[(16), uint64], uint64) {
  @func_4503() /* ty=(Tensor[(16), uint64], uint64) */
}

def @func_1905() -> (Tensor[(16), uint64],) {
  %411 = fn () -> (Tensor[(16), uint64],) {
    %410 = @func_1116() /* ty=Tensor[(16), uint64] */;
    (%410,)
  };
  %411() /* ty=(Tensor[(16), uint64],) */
}

def @func_8824(%var_8823: Tensor[(1, 364), float32]) -> (Tensor[(16), uint64], Tensor[(6), float32], Tensor[(1, 364), float32], Tensor[(6), float32]) {
  %420 = fn (%var_8816: Tensor[(1, 364), float32]) -> (Tensor[(16), uint64], Tensor[(6), float32], Tensor[(1, 364), float32], Tensor[(6), float32]) {
    %412 = @func_3312() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64) */;
    %413 = cast(%var_8816, dtype="float32") /* ty=Tensor[(1, 364), float32] */;
    %414 = cast(meta[relay.Constant][28] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
    %415 = reshape(%413, newshape=[1, 364]) /* ty=Tensor[(1, 364), float32] */;
    %416 = reshape(%414, newshape=[6]) /* ty=Tensor[(6), float32] */;
    %417 = @func_8163(%415, %416) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(1, 364), float32], Tensor[(6), float32], Tensor[(6), float32]) */;
    %418 = %412.0;
    %419 = %417.3;
    (%418, %419, %var_8816, meta[relay.Constant][28] /* ty=Tensor[(6), float32] */)
  };
  %420(%var_8823) /* ty=(Tensor[(16), uint64], Tensor[(6), float32], Tensor[(1, 364), float32], Tensor[(6), float32]) */
}

def @func_3597() -> Tensor[(16), uint64] {
  @func_3595() /* ty=Tensor[(16), uint64] */
}

def @func_3057() -> (uint64,) {
  %421 = @func_1861() /* ty=uint64 */;
  (%421,)
}

def @func_3162() -> (Tensor[(16), uint64],) {
  %424 = fn () -> (Tensor[(16), uint64],) {
    %422 = @func_3147() /* ty=(Tensor[(16), uint64],) */;
    %423 = %422.0;
    (%423,)
  };
  %424() /* ty=(Tensor[(16), uint64],) */
}

def @func_6823(%var_6801: Tensor[(4, 16, 8), float32], %var_6811: Tensor[(4, 16, 8), float32]) -> (Tensor[(4, 16, 8), float32], Tensor[(4, 16, 8), uint8]) {
  %425 = cast(%var_6801, dtype="float32") /* ty=Tensor[(4, 16, 8), float32] */;
  %426 = cast(%var_6811, dtype="uint8") /* ty=Tensor[(4, 16, 8), uint8] */;
  %427 = shape_of(%var_6801, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%var_6801, dtype="uint8") /* ty=Tensor[(4, 16, 8), uint8] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %430 = atanh(%425) /* ty=Tensor[(4, 16, 8), float32] */;
  %431 = subtract(%428, %429) /* ty=Tensor[(4, 16, 8), uint8] */;
  (%430, %431)
}

def @func_4881(%var_4880: Tensor[(16, 9, 14), float32]) -> (Tensor[(16, 9, 14), float32], Tensor[(16, 9, 14), float32]) {
  %439 = fn (%var_4868: Tensor[(16, 9, 14), float32]) -> (Tensor[(16, 9, 14), float32], Tensor[(16, 9, 14), float32]) {
    %432 = cast(%var_4868, dtype="float32") /* ty=Tensor[(16, 9, 14), float32] */;
    %433 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(16, 9, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %434 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 9, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 9, 14), float32] */;
    %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %436 = cast(%var_4868, dtype="float32") /* ty=Tensor[(16, 9, 14), float32] */;
    %437 = floor_divide(%434, %435) /* ty=Tensor[(16, 9, 14), float32] */;
    %438 = acos(%436) /* ty=Tensor[(16, 9, 14), float32] */;
    (%437, %438)
  };
  %439(%var_4880) /* ty=(Tensor[(16, 9, 14), float32], Tensor[(16, 9, 14), float32]) */
}

def @func_9369() -> (Tensor[(16), uint64],) {
  %442 = fn () -> (Tensor[(16), uint64],) {
    %440 = @func_5237() /* ty=(Tensor[(16), uint64],) */;
    %441 = %440.0;
    (%441,)
  };
  %442() /* ty=(Tensor[(16), uint64],) */
}

def @func_5574() -> (Tensor[(16), uint64],) {
  %445 = fn () -> (Tensor[(16), uint64],) {
    %443 = @func_5190() /* ty=(Tensor[(16), uint64],) */;
    %444 = %443.0;
    (%444,)
  };
  %445() /* ty=(Tensor[(16), uint64],) */
}

def @func_8912() -> Tensor[(16), uint64] {
  %447 = fn () -> Tensor[(16), uint64] {
    %446 = @func_4861() /* ty=(Tensor[(16), uint64],) */;
    %446.0
  };
  %447() /* ty=Tensor[(16), uint64] */
}

def @func_2898() -> (Tensor[(16), uint64], Tensor[(?, 16), float64], Tensor[(16), uint64], Tensor[(1, 140), float32]) {
  %462 = fn () -> (Tensor[(16), uint64], Tensor[(?, 16), float64], Tensor[(16), uint64], Tensor[(1, 140), float32]) {
    %448 = @func_2326() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64, uint64, Tensor[(364), float32]) */;
    %449 = @func_2664() /* ty=Tensor[(1, 16), bool] */;
    %450 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
    %451 = %450.4;
    %452 = cast(%451, dtype="float64") /* ty=Tensor[(16), float64] */;
    %453 = shape_of(%449, dtype="int32") /* ty=Tensor[(2), int32] */;
    %454 = cast(%449, dtype="float64") /* ty=Tensor[(1, 16), float64] */;
    %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %456 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 140), float32] */, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
    %457 = reshape(%456, newshape=[140]) /* ty=Tensor[(140), float32] */;
    %458 = @func_1656(%457) /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(14, 10, ?), int64], Tensor[(140), float32], Tensor[(16), uint64]) */;
    %459 = %448.1;
    %460 = power(%454, %455) /* ty=Tensor[(?, 16), float64] */;
    %461 = %458.0;
    (%459, %460, %461, meta[relay.Constant][30] /* ty=Tensor[(1, 140), float32] */)
  };
  %462() /* ty=(Tensor[(16), uint64], Tensor[(?, 16), float64], Tensor[(16), uint64], Tensor[(1, 140), float32]) */
}

def @func_3312() -> (Tensor[(16), uint64], Tensor[(16), uint64], uint64) {
  %463 = @func_1039() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %464 = @func_854() /* ty=Tensor[(16), uint64] */;
  %465 = %463.1;
  %466 = @func_905() /* ty=uint64 */;
  (%464, %465, %466)
}

def @func_8476(%var_8474: Tensor[(1, 2640), float64]) -> (Tensor[(1, 16), bool], Tensor[(4, 16, 8), float32], Tensor[(16), uint64], Tensor[(16), uint64], uint64, Tensor[(512), float32], Tensor[(16), uint64], Tensor[(1, 2640), float64]) {
  %467 = @func_7190() /* ty=(Tensor[(1, 16), bool],) */;
  %468 = cast(meta[relay.Constant][31] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %469 = cast(meta[relay.Constant][31] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %470 = reshape(%468, newshape=[4, 16, 8]) /* ty=Tensor[(4, 16, 8), float32] */;
  %471 = reshape(%469, newshape=[4, 16, 8]) /* ty=Tensor[(4, 16, 8), float32] */;
  %472 = @func_6823(%470, %471) /* ty=(Tensor[(4, 16, 8), float32], Tensor[(4, 16, 8), uint8]) */;
  %473 = @func_3161() /* ty=(Tensor[(16), uint64],) */;
  %474 = @func_2083() /* ty=(uint64, uint64) */;
  %475 = cast(meta[relay.Constant][31] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %476 = sigmoid(%475) /* ty=Tensor[(512), float32] */;
  %477 = cast(meta[relay.Constant][31] /* ty=Tensor[(512), float32] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(1), int32] */;
  %479 = cast(%476, dtype="bool") /* ty=Tensor[(512), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?), bool] */;
  %481 = greater(%479, %480) /* ty=Tensor[(512), bool] */;
  %482 = cast(%481, dtype="float32") /* ty=Tensor[(512), float32] */;
  %483 = cast(%var_8474, dtype="float64") /* ty=Tensor[(1, 2640), float64] */;
  %484 = cast(%var_8474, dtype="float32") /* ty=Tensor[(1, 2640), float32] */;
  %485 = reshape(%483, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float64] */;
  %486 = reshape(%484, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float32] */;
  %487 = @func_1422(%485, %486) /* ty=(Tensor[(16, 15, 11), float64], Tensor[(16, 15, 11), float64], Tensor[(16), uint64]) */;
  %488 = %467.0;
  %489 = %472.0;
  %490 = %473.0;
  %491 = @func_1116() /* ty=Tensor[(16), uint64] */;
  %492 = %474.1;
  %493 = log2(%482) /* ty=Tensor[(512), float32] */;
  %494 = %487.2;
  (%488, %489, %490, %491, %492, %493, %494, %var_8474)
}

def @func_9330(%var_9328: uint16, %var_9329: Tensor[(8, 8, 1), uint16]) -> Tensor[(8, 8, 1), uint16] {
  %497 = fn (%var_9319: uint16, %var_9320: Tensor[(8, 8, 1), uint16]) -> Tensor[(8, 8, 1), uint16] {
    %495 = cast(%var_9319, dtype="uint16") /* ty=uint16 */;
    %496 = cast(%var_9320, dtype="uint16") /* ty=Tensor[(8, 8, 1), uint16] */;
    logical_xor(%495, %496) /* ty=Tensor[(8, 8, 1), uint16] */
  };
  %497(%var_9328, %var_9329) /* ty=Tensor[(8, 8, 1), uint16] */
}

def @func_3338(%var_3337: Tensor[(2, 6, 7), float64]) -> Tensor[(2, 6, 7), float64] {
  %499 = fn (%var_3319: Tensor[(2, 6, 7), float64]) -> Tensor[(2, 6, 7), float64] {
    %498 = cast(%var_3319, dtype="float64") /* ty=Tensor[(2, 6, 7), float64] */;
    log2(%498) /* ty=Tensor[(2, 6, 7), float64] */
  };
  %499(%var_3337) /* ty=Tensor[(2, 6, 7), float64] */
}

def @func_1039() -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
  %500 = @func_490() /* ty=(Tensor[(16), uint64],) */;
  %501 = %500.0;
  %502 = @func_467() /* ty=Tensor[(16), uint64] */;
  (%501, %502)
}

def @func_9409() -> (Tensor[(16), uint64],) {
  %503 = @func_9277() /* ty=(uint64, Tensor[(16), uint64], Tensor[(16, 16), float64]) */;
  %504 = %503.1;
  (%504,)
}

def @func_9122() -> Tensor[(6), float32] {
  %505 = @func_7934() /* ty=(Tensor[(16), uint64], Tensor[(6), float32], Tensor[(6), float32]) */;
  %505.2
}

def @func_8995(%var_8993: Tensor[(8, 3, 11), int8]) -> (Tensor[(8, 3, 11), int8], Tensor[(16), uint64], Tensor[(16), uint64]) {
  @func_8992(%var_8993) /* ty=(Tensor[(8, 3, 11), int8], Tensor[(16), uint64], Tensor[(16), uint64]) */
}

def @func_9749() -> (uint64,) {
  @func_9747() /* ty=(uint64,) */
}

def @func_4356() -> (Tensor[(16), uint64],) {
  @func_4354() /* ty=(Tensor[(16), uint64],) */
}

def @func_3588(%var_3587: Tensor[(6), float32]) -> (Tensor[(16), uint64], Tensor[(1, 2, 3), float32], Tensor[(6), float32]) {
  %512 = fn (%var_3584: Tensor[(6), float32]) -> (Tensor[(16), uint64], Tensor[(1, 2, 3), float32], Tensor[(6), float32]) {
    %506 = @func_1904() /* ty=(Tensor[(16), uint64],) */;
    %507 = cast(%var_3584, dtype="float32") /* ty=Tensor[(6), float32] */;
    %508 = reshape(%507, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), float32] */;
    %509 = @func_639(%508) /* ty=(Tensor[(1, 2, 3), float32],) */;
    %510 = %506.0;
    %511 = %509.0;
    (%510, %511, %var_3584)
  };
  %512(%var_3587) /* ty=(Tensor[(16), uint64], Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */
}

def @func_9187() -> Tensor[(16), uint64] {
  %514 = fn () -> Tensor[(16), uint64] {
    %513 = @func_3161() /* ty=(Tensor[(16), uint64],) */;
    %513.0
  };
  %514() /* ty=Tensor[(16), uint64] */
}

def @func_9318() -> (Tensor[(1, 16), bool],) {
  %517 = fn () -> (Tensor[(1, 16), bool],) {
    %515 = @func_7190() /* ty=(Tensor[(1, 16), bool],) */;
    %516 = %515.0;
    (%516,)
  };
  %517() /* ty=(Tensor[(1, 16), bool],) */
}

def @func_1360(%var_1359: Tensor[(364), float32]) -> (uint64, uint64, Tensor[(2, 14, 13), float32], Tensor[(16), uint64], uint64, Tensor[(364), float64]) {
  %532 = fn (%var_1321: Tensor[(364), float32]) -> (uint64, uint64, Tensor[(2, 14, 13), float32], Tensor[(16), uint64], uint64, Tensor[(364), float64]) {
    %518 = @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
    %519 = @func_718() /* ty=(uint64, Tensor[(16), uint64]) */;
    %520 = cast(%var_1321, dtype="float32") /* ty=Tensor[(364), float32] */;
    %521 = reshape(%520, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), float32] */;
    %522 = @func_1039() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
    %523 = cast(%var_1321, dtype="float32") /* ty=Tensor[(364), float32] */;
    %524 = sqrt(%523) /* ty=Tensor[(364), float32] */;
    %525 = cast(%524, dtype="float64") /* ty=Tensor[(364), float64] */;
    %526 = %518.2;
    %527 = %519.0;
    %528 = @func_560(%521) /* ty=Tensor[(2, 14, 13), float32] */;
    %529 = %522.1;
    %530 = @func_905() /* ty=uint64 */;
    %531 = cos(%525) /* ty=Tensor[(364), float64] */;
    (%526, %527, %528, %529, %530, %531)
  };
  %532(%var_1359) /* ty=(uint64, uint64, Tensor[(2, 14, 13), float32], Tensor[(16), uint64], uint64, Tensor[(364), float64]) */
}

def @func_718() -> (uint64, Tensor[(16), uint64]) {
  %533 = @func_364() /* ty=uint64 */;
  %534 = @func_467() /* ty=Tensor[(16), uint64] */;
  (%533, %534)
}

def @func_4863() -> (Tensor[(16), uint64],) {
  @func_4861() /* ty=(Tensor[(16), uint64],) */
}

def @func_2666() -> Tensor[(1, 16), bool] {
  @func_2664() /* ty=Tensor[(1, 16), bool] */
}

def @func_438(%var_430: Tensor[(3, 11, 16), uint64]) -> (Tensor[(3, 11, 16), uint32], Tensor[(3, 11, 16), float32]) {
  %535 = @func_364() /* ty=uint64 */;
  %536 = cast(%535, dtype="uint32") /* ty=uint32 */;
  %537 = cast(%var_430, dtype="uint32") /* ty=Tensor[(3, 11, 16), uint32] */;
  %538 = cast(%var_430, dtype="float32") /* ty=Tensor[(3, 11, 16), float32] */;
  %539 = logical_xor(%536, %537) /* ty=Tensor[(3, 11, 16), uint32] */;
  %540 = sqrt(%538) /* ty=Tensor[(3, 11, 16), float32] */;
  (%539, %540)
}

def @func_5270() -> Tensor[(16), uint64] {
  @func_5268() /* ty=Tensor[(16), uint64] */
}

def @func_6407() -> (Tensor[(16), uint64], Tensor[(16), uint64], uint64, Tensor[(16), uint64], uint64, Tensor[(70, 2), float32]) {
  %551 = fn () -> (Tensor[(16), uint64], Tensor[(16), uint64], uint64, Tensor[(16), uint64], uint64, Tensor[(70, 2), float32]) {
    %541 = cast(meta[relay.Constant][32] /* ty=Tensor[(70, 2), float32] */, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
    %542 = cast(meta[relay.Constant][32] /* ty=Tensor[(70, 2), float32] */, dtype="float32") /* ty=Tensor[(70, 2), float32] */;
    %543 = reshape(%541, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
    %544 = reshape(%542, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
    %545 = @func_987(%543, %544) /* ty=(Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
    %546 = @func_766() /* ty=Tensor[(16), uint64] */;
    %547 = @func_1539() /* ty=Tensor[(16), uint64] */;
    %548 = @func_364() /* ty=uint64 */;
    %549 = @func_5883() /* ty=Tensor[(16), uint64] */;
    %550 = %545.1;
    (%546, %547, %548, %549, %550, meta[relay.Constant][32] /* ty=Tensor[(70, 2), float32] */)
  };
  %551() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64, Tensor[(16), uint64], uint64, Tensor[(70, 2), float32]) */
}

def @func_3734() -> (Tensor[(16), uint64],) {
  %552 = @func_3312() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64) */;
  %553 = %552.1;
  (%553,)
}

def @func_2973(%var_2971: Tensor[(4, 11, 16), uint64]) -> Tensor[(4, 11, 16), bool] {
  @func_2970(%var_2971) /* ty=Tensor[(4, 11, 16), bool] */
}

def @func_7935() -> (Tensor[(16), uint64], Tensor[(6), float32], Tensor[(6), float32]) {
  %559 = fn () -> (Tensor[(16), uint64], Tensor[(6), float32], Tensor[(6), float32]) {
    %554 = cast(meta[relay.Constant][33] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
    %555 = reshape(%554, newshape=[6]) /* ty=Tensor[(6), float32] */;
    %556 = @func_3586(%555) /* ty=(Tensor[(16), uint64], Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
    %557 = @func_5018() /* ty=Tensor[(16), uint64] */;
    %558 = %556.2;
    (%557, %558, meta[relay.Constant][33] /* ty=Tensor[(6), float32] */)
  };
  %559() /* ty=(Tensor[(16), uint64], Tensor[(6), float32], Tensor[(6), float32]) */
}

def @func_7981(%var_7968: Tensor[(2, 11, 6), uint32], %var_7969: Tensor[(2, 11, 6), uint32]) -> (Tensor[(2, 11, 6), uint32], Tensor[(2, 11, 6), float32]) {
  %560 = cast(%var_7969, dtype="uint32") /* ty=Tensor[(2, 11, 6), uint32] */;
  %561 = shape_of(%var_7968, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%var_7968, dtype="uint32") /* ty=Tensor[(2, 11, 6), uint32] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %564 = cast(%var_7968, dtype="float32") /* ty=Tensor[(2, 11, 6), float32] */;
  %565 = bitwise_or(%562, %563) /* ty=Tensor[(2, 11, 6), uint32] */;
  %566 = exp(%564) /* ty=Tensor[(2, 11, 6), float32] */;
  (%565, %566)
}

def @func_8502(%var_8500: Tensor[(364), float32], %var_8501: Tensor[(6), float32]) -> (uint64, Tensor[(2, 14, 13), float32], Tensor[(364), float32], Tensor[(6), float32]) {
  @func_8498(%var_8500, %var_8501) /* ty=(uint64, Tensor[(2, 14, 13), float32], Tensor[(364), float32], Tensor[(6), float32]) */
}

def @func_3502(%var_3500: Tensor[(3, 12, 14), float64]) -> (Tensor[(3, 12, 14), float64],) {
  @func_3499(%var_3500) /* ty=(Tensor[(3, 12, 14), float64],) */
}

def @func_1957() -> Tensor[(16), uint64] {
  %567 = @func_1485() /* ty=(Tensor[(16), uint64], uint64) */;
  %567.0
}

def @func_4671() -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
  %568 = @func_1084() /* ty=(Tensor[(16), uint64],) */;
  %569 = @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %570 = %568.0;
  %571 = %569.0;
  (%570, %571)
}

def @func_278(%var_276: Tensor[(6, 15, 3), int32], %var_277: Tensor[(6, 15, 3), float64]) -> (Tensor[(6, 15, 3), float64],) {
  @func_274(%var_276, %var_277) /* ty=(Tensor[(6, 15, 3), float64],) */
}

def @func_5420() -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
  @func_5418() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */
}

def @func_9625(%var_9623: uint32, %var_9624: Tensor[(1248), uint32]) -> (Tensor[(16), uint64], Tensor[(1, 16), bool], Tensor[(12, 13, 8), uint32], uint32, Tensor[(1248), uint32]) {
  %581 = fn (%var_9616: uint32, %var_9617: Tensor[(1248), uint32]) -> (Tensor[(16), uint64], Tensor[(1, 16), bool], Tensor[(12, 13, 8), uint32], uint32, Tensor[(1248), uint32]) {
    %572 = @func_7561() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
    %573 = @func_3343() /* ty=(Tensor[(1, 16), bool],) */;
    %574 = cast(%var_9616, dtype="uint32") /* ty=uint32 */;
    %575 = cast(%var_9617, dtype="uint32") /* ty=Tensor[(1248), uint32] */;
    %576 = reshape(%574, newshape=[]) /* ty=uint32 */;
    %577 = reshape(%575, newshape=[12, 13, 8]) /* ty=Tensor[(12, 13, 8), uint32] */;
    %578 = %572.1;
    %579 = %573.0;
    %580 = @func_7607(%576, %577) /* ty=Tensor[(12, 13, 8), uint32] */;
    (%578, %579, %580, %var_9616, %var_9617)
  };
  %581(%var_9623, %var_9624) /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], Tensor[(12, 13, 8), uint32], uint32, Tensor[(1248), uint32]) */
}

def @func_2789() -> Tensor[(16), uint64] {
  %582 = @func_2186() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(16), uint64]) */;
  %582.1
}

def @func_6281(%var_6280: Tensor[(13, 6, 1), int16]) -> (Tensor[(13, 6, 12), int16], Tensor[(16), uint64]) {
  %587 = fn (%var_6268: Tensor[(13, 6, 1), int16]) -> (Tensor[(13, 6, 12), int16], Tensor[(16), uint64]) {
    %583 = cast(%var_6268, dtype="int16") /* ty=Tensor[(13, 6, 1), int16] */;
    %584 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 6, 12), int16] */, dtype="int16") /* ty=Tensor[(13, 6, 12), int16] */;
    %585 = bitwise_xor(%583, %584) /* ty=Tensor[(13, 6, 12), int16] */;
    %586 = @func_5883() /* ty=Tensor[(16), uint64] */;
    (%585, %586)
  };
  %587(%var_6280) /* ty=(Tensor[(13, 6, 12), int16], Tensor[(16), uint64]) */
}

def @func_7119(%var_7092: Tensor[(364), float32], %var_7096: Tensor[(140, 1), float32]) -> (uint64, Tensor[(16), uint64], Tensor[(32), float64], Tensor[(364), float32], Tensor[(364), float32], Tensor[(140), float32], Tensor[(140, 1), float32], Tensor[(1, 2, 3), float32]) {
  %588 = @func_6909() /* ty=(uint64, Tensor[(16), uint64], uint64) */;
  %589 = cast(meta[relay.Constant][35] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %590 = reshape(%589, newshape=[8, 1, 4]) /* ty=Tensor[(8, 1, 4), float64] */;
  %591 = @func_5146(%590) /* ty=(Tensor[(8, ?, 4), float32], Tensor[(16), uint64], Tensor[(8, 1, 4), float64], uint64, Tensor[(16), uint64]) */;
  %592 = cast(%var_7092, dtype="float32") /* ty=Tensor[(364), float32] */;
  %593 = reshape(%592, newshape=[364]) /* ty=Tensor[(364), float32] */;
  %594 = @func_1250(%593) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */;
  %595 = cast(%var_7096, dtype="float32") /* ty=Tensor[(140, 1), float32] */;
  %596 = reshape(%595, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %597 = @func_2933(%596) /* ty=(Tensor[(16), uint64], Tensor[(140), float32], Tensor[(14, 10, ?), float32]) */;
  %598 = cast(%var_7096, dtype="float32") /* ty=Tensor[(140, 1), float32] */;
  %599 = reshape(%598, newshape=[140]) /* ty=Tensor[(140), float32] */;
  %600 = @func_5760(%599) /* ty=(Tensor[(16), uint64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32], Tensor[(16), uint64], Tensor[(7, 52), int8], Tensor[(14, 10, ?), int64], Tensor[(140), float32], Tensor[(7, 52), int32], Tensor[(7, 52), bool]) */;
  %601 = %588.2;
  %602 = %591.1;
  %603 = %594.2;
  %604 = %597.1;
  %605 = %600.2;
  (%601, %602, meta[relay.Constant][35] /* ty=Tensor[(32), float64] */, %603, %var_7092, %604, %var_7096, %605)
}

def @func_2935(%var_2934: Tensor[(140), float32]) -> (Tensor[(16), uint64], Tensor[(140), float32], Tensor[(14, 10, ?), float32]) {
  %616 = fn (%var_2920: Tensor[(140), float32]) -> (Tensor[(16), uint64], Tensor[(140), float32], Tensor[(14, 10, ?), float32]) {
    %606 = @func_1485() /* ty=(Tensor[(16), uint64], uint64) */;
    %607 = cast(%var_2920, dtype="float32") /* ty=Tensor[(140), float32] */;
    %608 = cast(%var_2920, dtype="float32") /* ty=Tensor[(140), float32] */;
    %609 = reshape(%607, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
    %610 = reshape(%608, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
    %611 = @func_987(%609, %610) /* ty=(Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
    %612 = %611.0;
    %613 = cast(%612, dtype="float32") /* ty=Tensor[(14, 10, ?), float32] */;
    %614 = %606.0;
    %615 = asin(%613) /* ty=Tensor[(14, 10, ?), float32] */;
    (%614, %var_2920, %615)
  };
  %616(%var_2934) /* ty=(Tensor[(16), uint64], Tensor[(140), float32], Tensor[(14, 10, ?), float32]) */
}

def @func_4441(%var_4440: Tensor[(2, 16, 12), float32]) -> Tensor[(2, 16, 12), bool] {
  %623 = fn (%var_4407: Tensor[(2, 16, 12), float32]) -> Tensor[(2, 16, 12), bool] {
    %617 = cast(%var_4407, dtype="float32") /* ty=Tensor[(2, 16, 12), float32] */;
    %618 = sqrt(%617) /* ty=Tensor[(2, 16, 12), float32] */;
    %619 = cast(%var_4407, dtype="bool") /* ty=Tensor[(2, 16, 12), bool] */;
    %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
    %621 = cast(%618, dtype="bool") /* ty=Tensor[(2, 16, 12), bool] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%621, %622) /* ty=Tensor[(2, 16, 12), bool] */
  };
  %623(%var_4440) /* ty=Tensor[(2, 16, 12), bool] */
}

def @func_3644() -> uint64 {
  %624 = @func_2687() /* ty=(uint64, uint64) */;
  %624.1
}

def @func_5762(%var_5761: Tensor[(140), float32]) -> (Tensor[(16), uint64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32], Tensor[(16), uint64], Tensor[(7, 52), int8], Tensor[(14, 10, ?), int64], Tensor[(140), float32], Tensor[(7, 52), int32], Tensor[(7, 52), bool]) {
  %661 = fn (%var_5738: Tensor[(140), float32]) -> (Tensor[(16), uint64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32], Tensor[(16), uint64], Tensor[(7, 52), int8], Tensor[(14, 10, ?), int64], Tensor[(140), float32], Tensor[(7, 52), int32], Tensor[(7, 52), bool]) {
    %625 = @func_5573() /* ty=(Tensor[(16), uint64],) */;
    %626 = @func_2687() /* ty=(uint64, uint64) */;
    %627 = cast(meta[relay.Constant][36] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
    %628 = reshape(%627, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), float32] */;
    %629 = @func_639(%628) /* ty=(Tensor[(1, 2, 3), float32],) */;
    %630 = @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
    %631 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 52), float32] */, dtype="float32") /* ty=Tensor[(7, 52), float32] */;
    %632 = reshape(%631, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), float32] */;
    %633 = @func_560(%632) /* ty=Tensor[(2, 14, 13), float32] */;
    %634 = cast(%633, dtype="int8") /* ty=Tensor[(2, 14, 13), int8] */;
    %635 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(7, 52), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %636 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 52), float32] */, dtype="int8") /* ty=Tensor[(7, 52), int8] */;
    %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %638 = cast(%var_5738, dtype="float32") /* ty=Tensor[(140), float32] */;
    %639 = cast(%var_5738, dtype="float32") /* ty=Tensor[(140), float32] */;
    %640 = reshape(%638, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
    %641 = reshape(%639, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
    %642 = @func_987(%640, %641) /* ty=(Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
    %643 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 52), float32] */, dtype="float32") /* ty=Tensor[(7, 52), float32] */;
    %644 = acos(%643) /* ty=Tensor[(7, 52), float32] */;
    %645 = cast(%633, dtype="int32") /* ty=Tensor[(2, 14, 13), int32] */;
    %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(2), int32] */;
    %647 = cast(%644, dtype="int32") /* ty=Tensor[(7, 52), int32] */;
    %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %649 = cast(%633, dtype="bool") /* ty=Tensor[(2, 14, 13), bool] */;
    %650 = shape_of(%644, dtype="int32") /* ty=Tensor[(2), int32] */;
    %651 = cast(%644, dtype="bool") /* ty=Tensor[(7, 52), bool] */;
    %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %653 = %625.0;
    %654 = %626.1;
    %655 = %629.0;
    %656 = %630.3;
    %657 = bitwise_or(%636, %637) /* ty=Tensor[(7, 52), int8] */;
    %658 = %642.0;
    %659 = bitwise_xor(%647, %648) /* ty=Tensor[(7, 52), int32] */;
    %660 = greater(%651, %652) /* ty=Tensor[(7, 52), bool] */;
    (%653, %654, %655, meta[relay.Constant][36] /* ty=Tensor[(6), float32] */, %656, %657, %658, %var_5738, %659, %660)
  };
  %661(%var_5761) /* ty=(Tensor[(16), uint64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32], Tensor[(16), uint64], Tensor[(7, 52), int8], Tensor[(14, 10, ?), int64], Tensor[(140), float32], Tensor[(7, 52), int32], Tensor[(7, 52), bool]) */
}

def @func_8065() -> uint64 {
  %663 = fn () -> uint64 {
    %662 = @func_4397() /* ty=(uint64,) */;
    %662.0
  };
  %663() /* ty=uint64 */
}

def @func_5689() -> (Tensor[(7, 11, 8), float32], Tensor[(7, 11, 8), uint32]) {
  %674 = fn () -> (Tensor[(7, 11, 8), float32], Tensor[(7, 11, 8), uint32]) {
    %664 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(7, 11, 8), float32] */;
    %665 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(7, 11, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %666 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(7, 11, 8), float32] */;
    %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %668 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 11, 8), float32] */, dtype="uint32") /* ty=Tensor[(7, 11, 8), uint32] */;
    %669 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(7, 11, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 11, 8), float32] */, dtype="uint32") /* ty=Tensor[(7, 11, 8), uint32] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %672 = power(%666, %667) /* ty=Tensor[(7, 11, 8), float32] */;
    %673 = multiply(%670, %671) /* ty=Tensor[(7, 11, 8), uint32] */;
    (%672, %673)
  };
  %674() /* ty=(Tensor[(7, 11, 8), float32], Tensor[(7, 11, 8), uint32]) */
}

def @func_3086(%var_3084: Tensor[(5, 15, 12), float64], %var_3085: Tensor[(270), int32]) -> (Tensor[(5, 15, 12), float64], Tensor[(16), uint64], Tensor[(6, 15, 3), float64], Tensor[(270), int32]) {
  @func_3082(%var_3084, %var_3085) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(16), uint64], Tensor[(6, 15, 3), float64], Tensor[(270), int32]) */
}

def @func_2328() -> (Tensor[(16), uint64], Tensor[(16), uint64], uint64, uint64, Tensor[(364), float32]) {
  @func_2326() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64, uint64, Tensor[(364), float32]) */
}

def @func_720() -> (uint64, Tensor[(16), uint64]) {
  @func_718() /* ty=(uint64, Tensor[(16), uint64]) */
}

def @func_5547(%var_5537: Tensor[(9, 1, 4), float32]) -> (Tensor[(9, 1, 4), float32], Tensor[(16, 15, 11), float64]) {
  %675 = cast(%var_5537, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %676 = @func_4565() /* ty=(uint64, Tensor[(16, 15, 11), float64], Tensor[(132, 20), float64]) */;
  %677 = atan(%675) /* ty=Tensor[(9, 1, 4), float32] */;
  %678 = %676.1;
  (%677, %678)
}

def @func_6171(%var_6151: Tensor[(13, 9, 13), float64]) -> (Tensor[(13, 9, 13), float64], Tensor[(16), uint64], Tensor[(16), uint64]) {
  %679 = cast(%var_6151, dtype="float64") /* ty=Tensor[(13, 9, 13), float64] */;
  %680 = @func_5190() /* ty=(Tensor[(16), uint64],) */;
  %681 = asin(%679) /* ty=Tensor[(13, 9, 13), float64] */;
  %682 = @func_5018() /* ty=Tensor[(16), uint64] */;
  %683 = %680.0;
  (%681, %682, %683)
}

def @func_3345() -> (Tensor[(1, 16), bool],) {
  @func_3343() /* ty=(Tensor[(1, 16), bool],) */
}

def @func_2791() -> Tensor[(16), uint64] {
  @func_2789() /* ty=Tensor[(16), uint64] */
}

def @func_3147() -> (Tensor[(16), uint64],) {
  %684 = @func_854() /* ty=Tensor[(16), uint64] */;
  (%684,)
}

def @func_1252(%var_1251: Tensor[(364), float32]) -> (Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) {
  %690 = fn (%var_1240: Tensor[(364), float32]) -> (Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) {
    %685 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
    %686 = cast(%var_1240, dtype="float32") /* ty=Tensor[(364), float32] */;
    %687 = reshape(%686, newshape=[2, 14, 13]) /* ty=Tensor[(2, 14, 13), float32] */;
    %688 = %685.4;
    %689 = @func_560(%687) /* ty=Tensor[(2, 14, 13), float32] */;
    (%688, %689, %var_1240)
  };
  %690(%var_1251) /* ty=(Tensor[(16), uint64], Tensor[(2, 14, 13), float32], Tensor[(364), float32]) */
}

def @func_1486() -> (Tensor[(16), uint64], uint64) {
  %694 = fn () -> (Tensor[(16), uint64], uint64) {
    %691 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
    %692 = %691.0;
    %693 = @func_905() /* ty=uint64 */;
    (%692, %693)
  };
  %694() /* ty=(Tensor[(16), uint64], uint64) */
}

def @func_274(%var_259: Tensor[(6, 15, 3), int32], %var_268: Tensor[(6, 15, 3), float64]) -> (Tensor[(6, 15, 3), float64],) {
  %695 = cast(%var_259, dtype="int32") /* ty=Tensor[(6, 15, 3), int32] */;
  %696 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(6, 15, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %697 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 15, 3), int32] */, dtype="int32") /* ty=Tensor[(6, 15, 3), int32] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %699 = minimum(%697, %698) /* ty=Tensor[(6, 15, 3), int32] */;
  %700 = cast(%699, dtype="float64") /* ty=Tensor[(6, 15, 3), float64] */;
  %701 = acosh(%700) /* ty=Tensor[(6, 15, 3), float64] */;
  %702 = cast(%var_268, dtype="float64") /* ty=Tensor[(6, 15, 3), float64] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%701, dtype="float64") /* ty=Tensor[(6, 15, 3), float64] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %706 = divide(%704, %705) /* ty=Tensor[(6, 15, 3), float64] */;
  (%706,)
}

def @func_1658(%var_1657: Tensor[(140), float32]) -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(14, 10, ?), int64], Tensor[(140), float32], Tensor[(16), uint64]) {
  %717 = fn (%var_1638: Tensor[(140), float32]) -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(14, 10, ?), int64], Tensor[(140), float32], Tensor[(16), uint64]) {
    %707 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
    %708 = cast(%var_1638, dtype="float32") /* ty=Tensor[(140), float32] */;
    %709 = cast(%var_1638, dtype="float32") /* ty=Tensor[(140), float32] */;
    %710 = reshape(%708, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
    %711 = reshape(%709, newshape=[14, 10, 1]) /* ty=Tensor[(14, 10, 1), float32] */;
    %712 = @func_987(%710, %711) /* ty=(Tensor[(14, 10, ?), int64], uint64, Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */;
    %713 = @func_766() /* ty=Tensor[(16), uint64] */;
    %714 = %707.0;
    %715 = %712.0;
    %716 = @func_854() /* ty=Tensor[(16), uint64] */;
    (%713, %714, %715, %var_1638, %716)
  };
  %717(%var_1657) /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(14, 10, ?), int64], Tensor[(140), float32], Tensor[(16), uint64]) */
}

def @func_491() -> (Tensor[(16), uint64],) {
  %719 = fn () -> (Tensor[(16), uint64],) {
    %718 = @func_467() /* ty=Tensor[(16), uint64] */;
    (%718,)
  };
  %719() /* ty=(Tensor[(16), uint64],) */
}

def @func_5268() -> Tensor[(16), uint64] {
  %720 = @func_4861() /* ty=(Tensor[(16), uint64],) */;
  %720.0
}

def @func_6911() -> (uint64, Tensor[(16), uint64], uint64) {
  @func_6909() /* ty=(uint64, Tensor[(16), uint64], uint64) */
}

def @func_5550(%var_5548: Tensor[(9, 1, 4), float32]) -> (Tensor[(9, 1, 4), float32], Tensor[(16, 15, 11), float64]) {
  @func_5547(%var_5548) /* ty=(Tensor[(9, 1, 4), float32], Tensor[(16, 15, 11), float64]) */
}

def @func_6221() -> (uint64,) {
  %721 = @func_3644() /* ty=uint64 */;
  (%721,)
}

def @func_6256(%var_6224: Tensor[(2, 5, 8), float64], %var_6231: Tensor[(3, 28), float64], %var_6248: Tensor[(140), float32]) -> (Tensor[(2, 6, 7), float64], Tensor[(3, 28), float64], Tensor[(2, 5, 8), int8], Tensor[(140), bool]) {
  %722 = cast(%var_6231, dtype="float64") /* ty=Tensor[(3, 28), float64] */;
  %723 = reshape(%722, newshape=[2, 6, 7]) /* ty=Tensor[(2, 6, 7), float64] */;
  %724 = cast(%var_6224, dtype="float64") /* ty=Tensor[(2, 5, 8), float64] */;
  %725 = log(%724) /* ty=Tensor[(2, 5, 8), float64] */;
  %726 = cast(%var_6224, dtype="int8") /* ty=Tensor[(2, 5, 8), int8] */;
  %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%725, dtype="int8") /* ty=Tensor[(2, 5, 8), int8] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %730 = @func_4726() /* ty=(Tensor[(11, 11, 8), float64], uint64, Tensor[(140), float32], Tensor[(2, 16, 12), bool], Tensor[(384, 1), float32]) */;
  %731 = %730.2;
  %732 = cast(%var_6248, dtype="bool") /* ty=Tensor[(140), bool] */;
  %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(1), int32] */;
  %734 = cast(%731, dtype="bool") /* ty=Tensor[(140), bool] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?), bool] */;
  %736 = @func_3336(%723) /* ty=Tensor[(2, 6, 7), float64] */;
  %737 = left_shift(%728, %729) /* ty=Tensor[(2, 5, 8), int8] */;
  %738 = less_equal(%734, %735) /* ty=Tensor[(140), bool] */;
  (%736, %var_6231, %737, %738)
}

def @func_364() -> uint64 {
  %739 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %739.3
}

def @func_1426(%var_1424: Tensor[(16, 15, 11), float64], %var_1425: Tensor[(16, 15, 11), float32]) -> (Tensor[(16, 15, 11), float64], Tensor[(16, 15, 11), float64], Tensor[(16), uint64]) {
  @func_1422(%var_1424, %var_1425) /* ty=(Tensor[(16, 15, 11), float64], Tensor[(16, 15, 11), float64], Tensor[(16), uint64]) */
}

def @func_3198(%var_3186: Tensor[(15, 11, 14), float32]) -> (Tensor[(15, 11, 14), float32], Tensor[(15, 11, 14), float32]) {
  %740 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 11, 14), float32] */, dtype="float32") /* ty=Tensor[(15, 11, 14), float32] */;
  %741 = shape_of(%var_3186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%var_3186, dtype="float32") /* ty=Tensor[(15, 11, 14), float32] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %744 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 11, 14), float32] */, dtype="float32") /* ty=Tensor[(15, 11, 14), float32] */;
  %745 = multiply(%742, %743) /* ty=Tensor[(15, 11, 14), float32] */;
  %746 = cos(%744) /* ty=Tensor[(15, 11, 14), float32] */;
  (%745, %746)
}

def @func_767() -> Tensor[(16), uint64] {
  %748 = fn () -> Tensor[(16), uint64] {
    %747 = @func_718() /* ty=(uint64, Tensor[(16), uint64]) */;
    %747.1
  };
  %748() /* ty=Tensor[(16), uint64] */
}

def @func_7344() -> (Tensor[(7, 11, 8), float32], Tensor[(16), uint64]) {
  %753 = fn () -> (Tensor[(7, 11, 8), float32], Tensor[(16), uint64]) {
    %749 = @func_5688() /* ty=(Tensor[(7, 11, 8), float32], Tensor[(7, 11, 8), uint32]) */;
    %750 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
    %751 = %749.0;
    %752 = %750.0;
    (%751, %752)
  };
  %753() /* ty=(Tensor[(7, 11, 8), float32], Tensor[(16), uint64]) */
}

def @func_3201(%var_3199: Tensor[(15, 11, 14), float32]) -> (Tensor[(15, 11, 14), float32], Tensor[(15, 11, 14), float32]) {
  @func_3198(%var_3199) /* ty=(Tensor[(15, 11, 14), float32], Tensor[(15, 11, 14), float32]) */
}

def @func_6361(%var_6357: Tensor[(78), int16], %var_6358: Tensor[(13, 6, 12), int16], %var_6359: Tensor[(1400), float32], %var_6360: Tensor[(336), bool]) -> (Tensor[(16), uint64], Tensor[(78), int16], Tensor[(13, 6, 12), float32], Tensor[(16), uint64], Tensor[(1400), float32], Tensor[(16), uint64], Tensor[(336), bool]) {
  %775 = fn (%var_6307: Tensor[(78), int16], %var_6309: Tensor[(13, 6, 12), int16], %var_6334: Tensor[(1400), float32], %var_6347: Tensor[(336), bool]) -> (Tensor[(16), uint64], Tensor[(78), int16], Tensor[(13, 6, 12), float32], Tensor[(16), uint64], Tensor[(1400), float32], Tensor[(16), uint64], Tensor[(336), bool]) {
    %754 = @func_4671() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
    %755 = cast(%var_6307, dtype="int16") /* ty=Tensor[(78), int16] */;
    %756 = reshape(%755, newshape=[13, 6, 1]) /* ty=Tensor[(13, 6, 1), int16] */;
    %757 = @func_6279(%756) /* ty=(Tensor[(13, 6, 12), int16], Tensor[(16), uint64]) */;
    %758 = %757.0;
    %759 = cast(%var_6309, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
    %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
    %761 = cast(%758, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
    %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %763 = greater(%761, %762) /* ty=Tensor[(13, 6, 12), bool] */;
    %764 = cast(%763, dtype="float32") /* ty=Tensor[(13, 6, 12), float32] */;
    %765 = cast(%var_6334, dtype="float32") /* ty=Tensor[(1400), float32] */;
    %766 = reshape(%765, newshape=[10, 140]) /* ty=Tensor[(10, 140), float32] */;
    %767 = @func_5332(%766) /* ty=(Tensor[(16), uint64], Tensor[(10, 140), float32], Tensor[(1, 140), float64]) */;
    %768 = cast(%var_6347, dtype="bool") /* ty=Tensor[(336), bool] */;
    %769 = reshape(%768, newshape=[16, 3, 7]) /* ty=Tensor[(16, 3, 7), bool] */;
    %770 = @func_3924(%769) /* ty=(Tensor[(16, 3, 7), bool], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) */;
    %771 = %754.1;
    %772 = acos(%764) /* ty=Tensor[(13, 6, 12), float32] */;
    %773 = %767.0;
    %774 = %770.2;
    (%771, %var_6307, %772, %773, %var_6334, %774, %var_6347)
  };
  %775(%var_6357, %var_6358, %var_6359, %var_6360) /* ty=(Tensor[(16), uint64], Tensor[(78), int16], Tensor[(13, 6, 12), float32], Tensor[(16), uint64], Tensor[(1400), float32], Tensor[(16), uint64], Tensor[(336), bool]) */
}

def @func_6136(%var_6080: Tensor[(4, 8, 8), float64]) -> (uint64, Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(4, 8, 8), uint64], Tensor[(16), uint64], Tensor[(4, 8, 8), float32]) {
  %776 = @func_3026() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64) */;
  %777 = @func_3161() /* ty=(Tensor[(16), uint64],) */;
  %778 = cast(%var_6080, dtype="float64") /* ty=Tensor[(4, 8, 8), float64] */;
  %779 = acos(%778) /* ty=Tensor[(4, 8, 8), float64] */;
  %780 = cast(%var_6080, dtype="float64") /* ty=Tensor[(4, 8, 8), float64] */;
  %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(%779, dtype="float64") /* ty=Tensor[(4, 8, 8), float64] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %784 = floor_divide(%782, %783) /* ty=Tensor[(4, 8, 8), float64] */;
  %785 = cast(%779, dtype="uint64") /* ty=Tensor[(4, 8, 8), uint64] */;
  %786 = shape_of(%784, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%784, dtype="uint64") /* ty=Tensor[(4, 8, 8), uint64] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %789 = @func_2449() /* ty=(Tensor[(16), uint64],) */;
  %790 = cast(%784, dtype="float32") /* ty=Tensor[(4, 8, 8), float32] */;
  %791 = %776.2;
  %792 = %777.0;
  %793 = @func_3595() /* ty=Tensor[(16), uint64] */;
  %794 = bitwise_xor(%787, %788) /* ty=Tensor[(4, 8, 8), uint64] */;
  %795 = %789.0;
  %796 = sinh(%790) /* ty=Tensor[(4, 8, 8), float32] */;
  (%791, %792, %793, %794, %795, %796)
}

def @func_4728() -> (Tensor[(11, 11, 8), float64], uint64, Tensor[(140), float32], Tensor[(2, 16, 12), bool], Tensor[(384, 1), float32]) {
  @func_4726() /* ty=(Tensor[(11, 11, 8), float64], uint64, Tensor[(140), float32], Tensor[(2, 16, 12), bool], Tensor[(384, 1), float32]) */
}

def @func_4861() -> (Tensor[(16), uint64],) {
  %797 = @func_1485() /* ty=(Tensor[(16), uint64], uint64) */;
  %798 = %797.0;
  (%798,)
}

def @func_3026() -> (Tensor[(16), uint64], Tensor[(1, 16), bool], uint64) {
  %799 = cast(meta[relay.Constant][42] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %800 = @func_766() /* ty=Tensor[(16), uint64] */;
  %801 = cast(%800, dtype="uint64") /* ty=Tensor[(16), uint64] */;
  %802 = reshape(%799, newshape=[]) /* ty=uint64 */;
  %803 = reshape(%801, newshape=[1, 16]) /* ty=Tensor[(1, 16), uint64] */;
  %804 = @func_107(%802, %803) /* ty=(Tensor[(1, 16), bool],) */;
  %805 = %804.0;
  (%800, %805, meta[relay.Constant][42] /* ty=uint64 */)
}

def @func_7377(%var_7376: Tensor[(8, 13), float64]) -> Tensor[(8, 13), float64] {
  %807 = fn (%var_7365: Tensor[(8, 13), float64]) -> Tensor[(8, 13), float64] {
    %806 = cast(%var_7365, dtype="float64") /* ty=Tensor[(8, 13), float64] */;
    sin(%806) /* ty=Tensor[(8, 13), float64] */
  };
  %807(%var_7376) /* ty=Tensor[(8, 13), float64] */
}

def @func_7052() -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) {
  %813 = fn () -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) {
    %808 = @func_5237() /* ty=(Tensor[(16), uint64],) */;
    %809 = @func_5607() /* ty=(uint64, Tensor[(16), uint64]) */;
    %810 = %808.0;
    %811 = %809.1;
    %812 = @func_766() /* ty=Tensor[(16), uint64] */;
    (%810, %811, %812)
  };
  %813() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) */
}

def @func_1863() -> uint64 {
  @func_1861() /* ty=uint64 */
}

def @func_4566() -> (uint64, Tensor[(16, 15, 11), float64], Tensor[(132, 20), float64]) {
  %822 = fn () -> (uint64, Tensor[(16, 15, 11), float64], Tensor[(132, 20), float64]) {
    %814 = @func_718() /* ty=(uint64, Tensor[(16), uint64]) */;
    %815 = cast(meta[relay.Constant][43] /* ty=Tensor[(132, 20), float64] */, dtype="float64") /* ty=Tensor[(132, 20), float64] */;
    %816 = cast(meta[relay.Constant][43] /* ty=Tensor[(132, 20), float64] */, dtype="float32") /* ty=Tensor[(132, 20), float32] */;
    %817 = reshape(%815, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float64] */;
    %818 = reshape(%816, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float32] */;
    %819 = @func_1422(%817, %818) /* ty=(Tensor[(16, 15, 11), float64], Tensor[(16, 15, 11), float64], Tensor[(16), uint64]) */;
    %820 = %814.0;
    %821 = %819.1;
    (%820, %821, meta[relay.Constant][43] /* ty=Tensor[(132, 20), float64] */)
  };
  %822() /* ty=(uint64, Tensor[(16, 15, 11), float64], Tensor[(132, 20), float64]) */
}

def @func_603() -> (Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) {
  @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */
}

def @func_2688() -> (uint64, uint64) {
  %827 = fn () -> (uint64, uint64) {
    %823 = @func_1485() /* ty=(Tensor[(16), uint64], uint64) */;
    %824 = @func_2326() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64, uint64, Tensor[(364), float32]) */;
    %825 = %823.1;
    %826 = %824.3;
    (%825, %826)
  };
  %827() /* ty=(uint64, uint64) */
}

def @func_3977() -> Tensor[(16), uint64] {
  %828 = @func_1793() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %828.1
}

def @func_107(%var_97: uint64, %var_98: Tensor[(1, 16), uint64]) -> (Tensor[(1, 16), bool],) {
  %829 = cast(%var_97, dtype="bool") /* ty=bool */;
  %830 = cast(%var_98, dtype="bool") /* ty=Tensor[(1, 16), bool] */;
  %831 = greater(%829, %830) /* ty=Tensor[(1, 16), bool] */;
  (%831,)
}

def @func_4673() -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
  @func_4671() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */
}

def @func_4025(%var_4021: Tensor[(8, 7, 15), float32], %var_4022: Tensor[(900), float64], %var_4023: Tensor[(3, 90), int32], %var_4024: Tensor[(24, 14), bool]) -> (Tensor[(16), uint64], Tensor[(900), float64], Tensor[(3, 90), int32], Tensor[(8, 7, 15), float32], Tensor[(16, 3, 7), bool], Tensor[(24, 14), bool]) {
  @func_4019(%var_4021, %var_4022, %var_4023, %var_4024) /* ty=(Tensor[(16), uint64], Tensor[(900), float64], Tensor[(3, 90), int32], Tensor[(8, 7, 15), float32], Tensor[(16, 3, 7), bool], Tensor[(24, 14), bool]) */
}

def @func_855() -> Tensor[(16), uint64] {
  %832 = fn () -> Tensor[(16), uint64] {
    @func_467() /* ty=Tensor[(16), uint64] */
  };
  %832() /* ty=Tensor[(16), uint64] */
}

def @func_3595() -> Tensor[(16), uint64] {
  @func_1116() /* ty=Tensor[(16), uint64] */
}

def @func_1085() -> (Tensor[(16), uint64],) {
  %835 = fn () -> (Tensor[(16), uint64],) {
    %833 = @func_490() /* ty=(Tensor[(16), uint64],) */;
    %834 = %833.0;
    (%834,)
  };
  %835() /* ty=(Tensor[(16), uint64],) */
}

def @func_562(%var_561: Tensor[(2, 14, 13), float32]) -> Tensor[(2, 14, 13), float32] {
  %837 = fn (%var_555: Tensor[(2, 14, 13), float32]) -> Tensor[(2, 14, 13), float32] {
    %836 = cast(%var_555, dtype="float32") /* ty=Tensor[(2, 14, 13), float32] */;
    exp(%836) /* ty=Tensor[(2, 14, 13), float32] */
  };
  %837(%var_561) /* ty=Tensor[(2, 14, 13), float32] */
}

def @func_3736() -> (Tensor[(16), uint64],) {
  @func_3734() /* ty=(Tensor[(16), uint64],) */
}

def @func_4399() -> (uint64,) {
  @func_4397() /* ty=(uint64,) */
}

def @func_8479(%var_8477: Tensor[(1, 2640), float64]) -> (Tensor[(1, 16), bool], Tensor[(4, 16, 8), float32], Tensor[(16), uint64], Tensor[(16), uint64], uint64, Tensor[(512), float32], Tensor[(16), uint64], Tensor[(1, 2640), float64]) {
  @func_8476(%var_8477) /* ty=(Tensor[(1, 16), bool], Tensor[(4, 16, 8), float32], Tensor[(16), uint64], Tensor[(16), uint64], uint64, Tensor[(512), float32], Tensor[(16), uint64], Tensor[(1, 2640), float64]) */
}

def @func_3211() -> uint64 {
  %839 = fn () -> uint64 {
    %838 = @func_3026() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64) */;
    %838.2
  };
  %839() /* ty=uint64 */
}

def @func_9411() -> (Tensor[(16), uint64],) {
  @func_9409() /* ty=(Tensor[(16), uint64],) */
}

def @func_2703(%var_2701: Tensor[(9, 8, 3), float64]) -> (Tensor[(9, 8, 3), float64],) {
  @func_2700(%var_2701) /* ty=(Tensor[(9, 8, 3), float64],) */
}

def @func_8707() -> (Tensor[(7, 11, 8), uint8],) {
  @func_8705() /* ty=(Tensor[(7, 11, 8), uint8],) */
}

def @func_6025() -> (Tensor[(12, 2, 1), float32],) {
  @func_6023() /* ty=(Tensor[(12, 2, 1), float32],) */
}

def @func_4256() -> uint64 {
  %840 = @func_2326() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64, uint64, Tensor[(364), float32]) */;
  %840.3
}

def @func_3499(%var_3479: Tensor[(3, 12, 14), float64]) -> (Tensor[(3, 12, 14), float64],) {
  %841 = cast(%var_3479, dtype="float64") /* ty=Tensor[(3, 12, 14), float64] */;
  %842 = log10(%841) /* ty=Tensor[(3, 12, 14), float64] */;
  (%842,)
}

def @func_3564() -> (Tensor[(16), uint64], uint64) {
  %847 = fn () -> (Tensor[(16), uint64], uint64) {
    %843 = @func_1097() /* ty=(Tensor[(16), uint64],) */;
    %844 = @func_3057() /* ty=(uint64,) */;
    %845 = %843.0;
    %846 = %844.0;
    (%845, %846)
  };
  %847() /* ty=(Tensor[(16), uint64], uint64) */
}

def @func_7863(%var_7861: Tensor[(7, 1), uint64]) -> (Tensor[(7, 1), bool], Tensor[(16), uint64]) {
  @func_7860(%var_7861) /* ty=(Tensor[(7, 1), bool], Tensor[(16), uint64]) */
}

def @func_5885() -> Tensor[(16), uint64] {
  @func_5883() /* ty=Tensor[(16), uint64] */
}

def @func_4168(%var_4115: Tensor[(1456), float32], %var_4116: Tensor[(1, 140), float32], %var_4128: Tensor[(840), float32], %var_4129: Tensor[(900), float64], %var_4130: Tensor[(30, 9), int32], %var_4157: Tensor[(2640), float64]) -> (Tensor[(1456), float32], Tensor[(1, 140), float32], Tensor[(3, 11, 16), bool], Tensor[(840), float32], Tensor[(900), float64], Tensor[(336), bool], Tensor[(16, 15, 11), float64], Tensor[(2640), float64], Tensor[(3, 90), bool]) {
  %848 = cast(%var_4115, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %849 = cast(%var_4116, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
  %850 = cast(%var_4116, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
  %851 = reshape(%848, newshape=[7, 16, 13]) /* ty=Tensor[(7, 16, 13), float32] */;
  %852 = reshape(%849, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
  %853 = reshape(%850, newshape=[35, 4]) /* ty=Tensor[(35, 4), float32] */;
  %854 = @func_2636(%851, %852, %853) /* ty=(Tensor[(140), bool], Tensor[(35, 4), bool], Tensor[(16), uint64], Tensor[(7, 16, 13), int16], Tensor[(3, 11, 16), float32], Tensor[(528), uint64], Tensor[(7, 16, 13), float64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(364), float32], Tensor[(3, 11, 16), float32]) */;
  %855 = %854.4;
  %856 = @func_3343() /* ty=(Tensor[(1, 16), bool],) */;
  %857 = %856.0;
  %858 = cast(%855, dtype="bool") /* ty=Tensor[(3, 11, 16), bool] */;
  %859 = cast(%857, dtype="bool") /* ty=Tensor[(1, 16), bool] */;
  %860 = cast(%var_4157, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %861 = cast(%var_4157, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %862 = reshape(%860, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float64] */;
  %863 = reshape(%861, newshape=[16, 15, 11]) /* ty=Tensor[(16, 15, 11), float32] */;
  %864 = @func_1422(%862, %863) /* ty=(Tensor[(16, 15, 11), float64], Tensor[(16, 15, 11), float64], Tensor[(16), uint64]) */;
  %865 = cast(%var_4128, dtype="float32") /* ty=Tensor[(840), float32] */;
  %866 = cast(%var_4129, dtype="float64") /* ty=Tensor[(900), float64] */;
  %867 = cast(%var_4130, dtype="int32") /* ty=Tensor[(30, 9), int32] */;
  %868 = cast(meta[relay.Constant][44] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %869 = reshape(%865, newshape=[8, 7, 15]) /* ty=Tensor[(8, 7, 15), float32] */;
  %870 = reshape(%866, newshape=[900]) /* ty=Tensor[(900), float64] */;
  %871 = reshape(%867, newshape=[3, 90]) /* ty=Tensor[(3, 90), int32] */;
  %872 = reshape(%868, newshape=[24, 14]) /* ty=Tensor[(24, 14), bool] */;
  %873 = @func_4019(%869, %870, %871, %872) /* ty=(Tensor[(16), uint64], Tensor[(900), float64], Tensor[(3, 90), int32], Tensor[(8, 7, 15), float32], Tensor[(16, 3, 7), bool], Tensor[(24, 14), bool]) */;
  %874 = %873.2;
  %875 = cast(%var_4130, dtype="bool") /* ty=Tensor[(30, 9), bool] */;
  %876 = shape_of(%874, dtype="int32") /* ty=Tensor[(2), int32] */;
  %877 = cast(%874, dtype="bool") /* ty=Tensor[(3, 90), bool] */;
  %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %879 = logical_and(%858, %859) /* ty=Tensor[(3, 11, 16), bool] */;
  %880 = %864.0;
  %881 = not_equal(%877, %878) /* ty=Tensor[(3, 90), bool] */;
  (%var_4115, %var_4116, %879, %var_4128, %var_4129, meta[relay.Constant][44] /* ty=Tensor[(336), bool] */, %880, %var_4157, %881)
}

def @func_1041() -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
  @func_1039() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */
}

def @func_3028() -> (Tensor[(16), uint64], Tensor[(1, 16), bool], uint64) {
  @func_3026() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64) */
}

def @func_6139(%var_6137: Tensor[(4, 8, 8), float64]) -> (uint64, Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(4, 8, 8), uint64], Tensor[(16), uint64], Tensor[(4, 8, 8), float32]) {
  @func_6136(%var_6137) /* ty=(uint64, Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(4, 8, 8), uint64], Tensor[(16), uint64], Tensor[(4, 8, 8), float32]) */
}

def @func_9051(%var_9048: Tensor[(7, 6, 13), int64], %var_9049: Tensor[(7, 6, 13), int64], %var_9050: Tensor[(7, 6, 13), int64]) -> (Tensor[(16), uint64], Tensor[(7, 6, 13), int64], Tensor[(16), uint64]) {
  %895 = fn (%var_9024: Tensor[(7, 6, 13), int64], %var_9025: Tensor[(7, 6, 13), int64], %var_9038: Tensor[(7, 6, 13), int64]) -> (Tensor[(16), uint64], Tensor[(7, 6, 13), int64], Tensor[(16), uint64]) {
    %882 = cast(%var_9025, dtype="int64") /* ty=Tensor[(7, 6, 13), int64] */;
    %883 = shape_of(%var_9024, dtype="int32") /* ty=Tensor[(3), int32] */;
    %884 = cast(%var_9024, dtype="int64") /* ty=Tensor[(7, 6, 13), int64] */;
    %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %886 = logical_xor(%884, %885) /* ty=Tensor[(7, 6, 13), int64] */;
    %887 = cast(%var_9038, dtype="int64") /* ty=Tensor[(7, 6, 13), int64] */;
    %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
    %889 = cast(%886, dtype="int64") /* ty=Tensor[(7, 6, 13), int64] */;
    %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %891 = @func_490() /* ty=(Tensor[(16), uint64],) */;
    %892 = @func_3977() /* ty=Tensor[(16), uint64] */;
    %893 = left_shift(%889, %890) /* ty=Tensor[(7, 6, 13), int64] */;
    %894 = %891.0;
    (%892, %893, %894)
  };
  %895(%var_9048, %var_9049, %var_9050) /* ty=(Tensor[(16), uint64], Tensor[(7, 6, 13), int64], Tensor[(16), uint64]) */
}

def @func_467() -> Tensor[(16), uint64] {
  %896 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %896.4
}

def @func_4019(%var_3988: Tensor[(8, 7, 15), float32], %var_3998: Tensor[(900), float64], %var_3999: Tensor[(3, 90), int32], %var_4007: Tensor[(24, 14), bool]) -> (Tensor[(16), uint64], Tensor[(900), float64], Tensor[(3, 90), int32], Tensor[(8, 7, 15), float32], Tensor[(16, 3, 7), bool], Tensor[(24, 14), bool]) {
  %897 = cast(%var_3998, dtype="float64") /* ty=Tensor[(900), float64] */;
  %898 = cast(%var_3999, dtype="int32") /* ty=Tensor[(3, 90), int32] */;
  %899 = reshape(%897, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), float64] */;
  %900 = reshape(%898, newshape=[270]) /* ty=Tensor[(270), int32] */;
  %901 = @func_3082(%899, %900) /* ty=(Tensor[(5, 15, 12), float64], Tensor[(16), uint64], Tensor[(6, 15, 3), float64], Tensor[(270), int32]) */;
  %902 = cast(%var_3988, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
  %903 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(8, 7, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 7, 15), float32] */, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %906 = floor_mod(%904, %905) /* ty=Tensor[(8, 7, 15), float32] */;
  %907 = cast(%906, dtype="float32") /* ty=Tensor[(8, 7, 15), float32] */;
  %908 = cast(%var_4007, dtype="bool") /* ty=Tensor[(24, 14), bool] */;
  %909 = reshape(%908, newshape=[16, 3, 7]) /* ty=Tensor[(16, 3, 7), bool] */;
  %910 = @func_3924(%909) /* ty=(Tensor[(16, 3, 7), bool], Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %911 = %901.1;
  %912 = acos(%907) /* ty=Tensor[(8, 7, 15), float32] */;
  %913 = %910.0;
  (%911, %var_3998, %var_3999, %912, %913, %var_4007)
}

def @func_4974(%var_4967: Tensor[(704), uint64]) -> (uint64, Tensor[(1, 16), bool], Tensor[(2, 8), float32], Tensor[(4, 11, 16), bool], Tensor[(704), uint64]) {
  %914 = @func_2083() /* ty=(uint64, uint64) */;
  %915 = %914.1;
  %916 = cast(%915, dtype="uint64") /* ty=uint64 */;
  %917 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 8), uint64] */, dtype="uint64") /* ty=Tensor[(2, 8), uint64] */;
  %918 = reshape(%916, newshape=[]) /* ty=uint64 */;
  %919 = reshape(%917, newshape=[1, 16]) /* ty=Tensor[(1, 16), uint64] */;
  %920 = @func_107(%918, %919) /* ty=(Tensor[(1, 16), bool],) */;
  %921 = cast(meta[relay.Constant][46] /* ty=Tensor[(2, 8), uint64] */, dtype="float32") /* ty=Tensor[(2, 8), float32] */;
  %922 = cast(%var_4967, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %923 = reshape(%922, newshape=[4, 11, 16]) /* ty=Tensor[(4, 11, 16), uint64] */;
  %924 = %920.0;
  %925 = log2(%921) /* ty=Tensor[(2, 8), float32] */;
  %926 = @func_2970(%923) /* ty=Tensor[(4, 11, 16), bool] */;
  (%915, %924, %925, %926, %var_4967)
}

def @func_2085() -> (uint64, uint64) {
  @func_2083() /* ty=(uint64, uint64) */
}

def @func_1118() -> Tensor[(16), uint64] {
  @func_1116() /* ty=Tensor[(16), uint64] */
}

def @func_111(%var_109: uint64, %var_110: Tensor[(1, 16), uint64]) -> (Tensor[(1, 16), bool],) {
  @func_107(%var_109, %var_110) /* ty=(Tensor[(1, 16), bool],) */
}

def @func_322() -> (Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) {
  @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */
}

def @func_6827(%var_6825: Tensor[(4, 16, 8), float32], %var_6826: Tensor[(4, 16, 8), float32]) -> (Tensor[(4, 16, 8), float32], Tensor[(4, 16, 8), uint8]) {
  @func_6823(%var_6825, %var_6826) /* ty=(Tensor[(4, 16, 8), float32], Tensor[(4, 16, 8), uint8]) */
}

def @func_6261(%var_6258: Tensor[(2, 5, 8), float64], %var_6259: Tensor[(3, 28), float64], %var_6260: Tensor[(140), float32]) -> (Tensor[(2, 6, 7), float64], Tensor[(3, 28), float64], Tensor[(2, 5, 8), int8], Tensor[(140), bool]) {
  @func_6256(%var_6258, %var_6259, %var_6260) /* ty=(Tensor[(2, 6, 7), float64], Tensor[(3, 28), float64], Tensor[(2, 5, 8), int8], Tensor[(140), bool]) */
}

def @func_5418() -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
  %927 = @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %928 = @func_5190() /* ty=(Tensor[(16), uint64],) */;
  %929 = %927.0;
  %930 = %928.0;
  (%929, %930)
}

def @func_6760() -> uint64 {
  %931 = fn () -> uint64 {
    @func_905() /* ty=uint64 */
  };
  %931() /* ty=uint64 */
}

def @func_441(%var_439: Tensor[(3, 11, 16), uint64]) -> (Tensor[(3, 11, 16), uint32], Tensor[(3, 11, 16), float32]) {
  @func_438(%var_439) /* ty=(Tensor[(3, 11, 16), uint32], Tensor[(3, 11, 16), float32]) */
}

def @func_8540(%var_8539: Tensor[(234), float64]) -> (Tensor[(16), uint64], uint64, Tensor[(234), float64], Tensor[(364), float32], uint64) {
  %941 = fn (%var_8529: Tensor[(234), float64]) -> (Tensor[(16), uint64], uint64, Tensor[(234), float64], Tensor[(364), float32], uint64) {
    %932 = @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
    %933 = cast(%var_8529, dtype="float64") /* ty=Tensor[(234), float64] */;
    %934 = cast(meta[relay.Constant][47] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
    %935 = reshape(%933, newshape=[2, 13, 9]) /* ty=Tensor[(2, 13, 9), float64] */;
    %936 = reshape(%934, newshape=[1, 364]) /* ty=Tensor[(1, 364), float32] */;
    %937 = @func_3450(%935, %936) /* ty=(Tensor[(2, 13, 9), float64], Tensor[(364), float32], Tensor[(1, 364), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(1, 140), float32]) */;
    %938 = %932.0;
    %939 = %937.4;
    %940 = @func_7470() /* ty=uint64 */;
    (%938, %939, %var_8529, meta[relay.Constant][47] /* ty=Tensor[(364), float32] */, %940)
  };
  %941(%var_8539) /* ty=(Tensor[(16), uint64], uint64, Tensor[(234), float64], Tensor[(364), float32], uint64) */
}

def @func_7610(%var_7608: uint32, %var_7609: Tensor[(12, 13, 8), uint32]) -> Tensor[(12, 13, 8), uint32] {
  %944 = fn (%var_7597: uint32, %var_7598: Tensor[(12, 13, 8), uint32]) -> Tensor[(12, 13, 8), uint32] {
    %942 = cast(%var_7597, dtype="uint32") /* ty=uint32 */;
    %943 = cast(%var_7598, dtype="uint32") /* ty=Tensor[(12, 13, 8), uint32] */;
    multiply(%942, %943) /* ty=Tensor[(12, 13, 8), uint32] */
  };
  %944(%var_7608, %var_7609) /* ty=Tensor[(12, 13, 8), uint32] */
}

def @func_9747() -> (uint64,) {
  %945 = @func_4503() /* ty=(Tensor[(16), uint64], uint64) */;
  %946 = %945.1;
  (%946,)
}

def @func_8614(%var_8613: Tensor[(7), uint64]) -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(7), uint64], uint64) {
  %953 = fn (%var_8593: Tensor[(7), uint64]) -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(7), uint64], uint64) {
    %947 = cast(%var_8593, dtype="uint64") /* ty=Tensor[(7), uint64] */;
    %948 = reshape(%947, newshape=[1, 7]) /* ty=Tensor[(1, 7), uint64] */;
    %949 = @func_8006(%948) /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(7, 1), bool], Tensor[(1, 7), uint64]) */;
    %950 = @func_3977() /* ty=Tensor[(16), uint64] */;
    %951 = %949.0;
    %952 = @func_364() /* ty=uint64 */;
    (%950, %951, %var_8593, %952)
  };
  %953(%var_8613) /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(7), uint64], uint64) */
}

def @func_9729(%var_9728: Tensor[(4, 1, 4), float64]) -> (Tensor[(4, 1, 4), float64], Tensor[(16), uint64], Tensor[(7), uint64], Tensor[(16), uint64], Tensor[(1, 2, 3), float32], Tensor[(6), float32]) {
  %965 = fn (%var_9694: Tensor[(4, 1, 4), float64]) -> (Tensor[(4, 1, 4), float64], Tensor[(16), uint64], Tensor[(7), uint64], Tensor[(16), uint64], Tensor[(1, 2, 3), float32], Tensor[(6), float32]) {
    %954 = cast(%var_9694, dtype="float64") /* ty=Tensor[(4, 1, 4), float64] */;
    %955 = cast(meta[relay.Constant][48] /* ty=Tensor[(7), uint64] */, dtype="uint64") /* ty=Tensor[(7), uint64] */;
    %956 = reshape(%955, newshape=[1, 7]) /* ty=Tensor[(1, 7), uint64] */;
    %957 = @func_8006(%956) /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(7, 1), bool], Tensor[(1, 7), uint64]) */;
    %958 = cast(meta[relay.Constant][49] /* ty=Tensor[(6), float32] */, dtype="float32") /* ty=Tensor[(6), float32] */;
    %959 = reshape(%958, newshape=[1, 2, 3]) /* ty=Tensor[(1, 2, 3), float32] */;
    %960 = @func_639(%959) /* ty=(Tensor[(1, 2, 3), float32],) */;
    %961 = erf(%954) /* ty=Tensor[(4, 1, 4), float64] */;
    %962 = %957.0;
    %963 = @func_8946() /* ty=Tensor[(16), uint64] */;
    %964 = %960.0;
    (%961, %962, meta[relay.Constant][48] /* ty=Tensor[(7), uint64] */, %963, %964, meta[relay.Constant][49] /* ty=Tensor[(6), float32] */)
  };
  %965(%var_9728) /* ty=(Tensor[(4, 1, 4), float64], Tensor[(16), uint64], Tensor[(7), uint64], Tensor[(16), uint64], Tensor[(1, 2, 3), float32], Tensor[(6), float32]) */
}

def @func_4397() -> (uint64,) {
  %966 = @func_3563() /* ty=(Tensor[(16), uint64], uint64) */;
  %967 = %966.1;
  (%967,)
}

def @func_7192() -> (Tensor[(1, 16), bool],) {
  @func_7190() /* ty=(Tensor[(1, 16), bool],) */
}

def @func_3003(%var_3001: Tensor[(15, 1, 2), bool], %var_3002: Tensor[(15, 5, 2), bool]) -> (Tensor[(15, 5, 2), bool],) {
  %971 = fn (%var_2994: Tensor[(15, 1, 2), bool], %var_2995: Tensor[(15, 5, 2), bool]) -> (Tensor[(15, 5, 2), bool],) {
    %968 = cast(%var_2994, dtype="bool") /* ty=Tensor[(15, 1, 2), bool] */;
    %969 = cast(%var_2995, dtype="bool") /* ty=Tensor[(15, 5, 2), bool] */;
    %970 = logical_or(%968, %969) /* ty=Tensor[(15, 5, 2), bool] */;
    (%970,)
  };
  %971(%var_3001, %var_3002) /* ty=(Tensor[(15, 5, 2), bool],) */
}

def @func_7123(%var_7121: Tensor[(364), float32], %var_7122: Tensor[(140, 1), float32]) -> (uint64, Tensor[(16), uint64], Tensor[(32), float64], Tensor[(364), float32], Tensor[(364), float32], Tensor[(140), float32], Tensor[(140, 1), float32], Tensor[(1, 2, 3), float32]) {
  @func_7119(%var_7121, %var_7122) /* ty=(uint64, Tensor[(16), uint64], Tensor[(32), float64], Tensor[(364), float32], Tensor[(364), float32], Tensor[(140), float32], Tensor[(140, 1), float32], Tensor[(1, 2, 3), float32]) */
}

def @func_4299(%var_4282: Tensor[(12, 10, 11), float32]) -> (Tensor[(12, 10, 11), uint64], Tensor[(12, 10, 11), float32]) {
  %972 = cast(%var_4282, dtype="float32") /* ty=Tensor[(12, 10, 11), float32] */;
  %973 = log(%972) /* ty=Tensor[(12, 10, 11), float32] */;
  %974 = cast(%var_4282, dtype="uint64") /* ty=Tensor[(12, 10, 11), uint64] */;
  %975 = shape_of(%973, dtype="int32") /* ty=Tensor[(3), int32] */;
  %976 = cast(%973, dtype="uint64") /* ty=Tensor[(12, 10, 11), uint64] */;
  %977 = dyn.reshape(%974, %975, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %978 = cast(%var_4282, dtype="float32") /* ty=Tensor[(12, 10, 11), float32] */;
  %979 = logical_xor(%976, %977) /* ty=Tensor[(12, 10, 11), uint64] */;
  %980 = sinh(%978) /* ty=Tensor[(12, 10, 11), float32] */;
  (%979, %980)
}

def @func_1793() -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
  %981 = @func_601() /* ty=(Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %982 = @func_467() /* ty=Tensor[(16), uint64] */;
  %983 = %981.3;
  (%982, %983)
}

def @func_9124() -> Tensor[(6), float32] {
  @func_9122() /* ty=Tensor[(6), float32] */
}

def @func_1422(%var_1396: Tensor[(16, 15, 11), float64], %var_1412: Tensor[(16, 15, 11), float32]) -> (Tensor[(16, 15, 11), float64], Tensor[(16, 15, 11), float64], Tensor[(16), uint64]) {
  %984 = cast(%var_1396, dtype="float32") /* ty=Tensor[(16, 15, 11), float32] */;
  %985 = sqrt(%984) /* ty=Tensor[(16, 15, 11), float32] */;
  %986 = cast(%var_1396, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %987 = sigmoid(%986) /* ty=Tensor[(16, 15, 11), float64] */;
  %988 = cast(%987, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %989 = shape_of(%985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %990 = cast(%985, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %991 = dyn.reshape(%988, %989, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %992 = cast(%var_1412, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %993 = shape_of(%985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %994 = cast(%985, dtype="float64") /* ty=Tensor[(16, 15, 11), float64] */;
  %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %996 = @func_1039() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
  %997 = divide(%990, %991) /* ty=Tensor[(16, 15, 11), float64] */;
  %998 = floor_divide(%994, %995) /* ty=Tensor[(16, 15, 11), float64] */;
  %999 = %996.1;
  (%997, %998, %999)
}

def @func_5019() -> Tensor[(16), uint64] {
  %1001 = fn () -> Tensor[(16), uint64] {
    %1000 = @func_2449() /* ty=(Tensor[(16), uint64],) */;
    %1000.0
  };
  %1001() /* ty=Tensor[(16), uint64] */
}

def @func_3979() -> Tensor[(16), uint64] {
  @func_3977() /* ty=Tensor[(16), uint64] */
}

def @func_7562() -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
  %1006 = fn () -> (Tensor[(16), uint64], Tensor[(16), uint64]) {
    %1002 = @func_6909() /* ty=(uint64, Tensor[(16), uint64], uint64) */;
    %1003 = @func_3312() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64) */;
    %1004 = %1002.1;
    %1005 = %1003.0;
    (%1004, %1005)
  };
  %1006() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */
}

def @func_8946() -> Tensor[(16), uint64] {
  %1007 = @func_3312() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], uint64) */;
  %1007.0
}

def @func_642(%var_640: Tensor[(1, 2, 3), float32]) -> (Tensor[(1, 2, 3), float32],) {
  @func_639(%var_640) /* ty=(Tensor[(1, 2, 3), float32],) */
}

def @func_8948() -> Tensor[(16), uint64] {
  @func_8946() /* ty=Tensor[(16), uint64] */
}

def @func_4176(%var_4170: Tensor[(1456), float32], %var_4171: Tensor[(1, 140), float32], %var_4172: Tensor[(840), float32], %var_4173: Tensor[(900), float64], %var_4174: Tensor[(30, 9), int32], %var_4175: Tensor[(2640), float64]) -> (Tensor[(1456), float32], Tensor[(1, 140), float32], Tensor[(3, 11, 16), bool], Tensor[(840), float32], Tensor[(900), float64], Tensor[(336), bool], Tensor[(16, 15, 11), float64], Tensor[(2640), float64], Tensor[(3, 90), bool]) {
  @func_4168(%var_4170, %var_4171, %var_4172, %var_4173, %var_4174, %var_4175) /* ty=(Tensor[(1456), float32], Tensor[(1, 140), float32], Tensor[(3, 11, 16), bool], Tensor[(840), float32], Tensor[(900), float64], Tensor[(336), bool], Tensor[(16, 15, 11), float64], Tensor[(2640), float64], Tensor[(3, 90), bool]) */
}

def @func_7471() -> uint64 {
  %1009 = fn () -> uint64 {
    %1008 = @func_2687() /* ty=(uint64, uint64) */;
    %1008.0
  };
  %1009() /* ty=uint64 */
}

def @func_7894() -> (Tensor[(16), uint64], Tensor[(10, 140), float32], Tensor[(10, 140), float32]) {
  %1015 = fn () -> (Tensor[(16), uint64], Tensor[(10, 140), float32], Tensor[(10, 140), float32]) {
    %1010 = cast(meta[relay.Constant][50] /* ty=Tensor[(10, 140), float32] */, dtype="float32") /* ty=Tensor[(10, 140), float32] */;
    %1011 = reshape(%1010, newshape=[10, 140]) /* ty=Tensor[(10, 140), float32] */;
    %1012 = @func_5332(%1011) /* ty=(Tensor[(16), uint64], Tensor[(10, 140), float32], Tensor[(1, 140), float64]) */;
    %1013 = @func_1116() /* ty=Tensor[(16), uint64] */;
    %1014 = %1012.1;
    (%1013, %1014, meta[relay.Constant][50] /* ty=Tensor[(10, 140), float32] */)
  };
  %1015() /* ty=(Tensor[(16), uint64], Tensor[(10, 140), float32], Tensor[(10, 140), float32]) */
}

def @func_1098() -> (Tensor[(16), uint64],) {
  %1017 = fn () -> (Tensor[(16), uint64],) {
    %1016 = @func_766() /* ty=Tensor[(16), uint64] */;
    (%1016,)
  };
  %1017() /* ty=(Tensor[(16), uint64],) */
}

def @func_8009(%var_8007: Tensor[(1, 7), uint64]) -> (Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(7, 1), bool], Tensor[(1, 7), uint64]) {
  @func_8006(%var_8007) /* ty=(Tensor[(16), uint64], Tensor[(16), uint64], Tensor[(7, 1), bool], Tensor[(1, 7), uint64]) */
}

def @func_9592() -> Tensor[(7, 6, 11), float32] {
  %1018 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
  %1018.0
}

def @func_2187() -> (Tensor[(7, 6, 11), float32], Tensor[(16), uint64]) {
  %1023 = fn () -> (Tensor[(7, 6, 11), float32], Tensor[(16), uint64]) {
    %1019 = @func_320() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(7, 6, 11), float32], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) */;
    %1020 = @func_1039() /* ty=(Tensor[(16), uint64], Tensor[(16), uint64]) */;
    %1021 = %1019.0;
    %1022 = %1020.1;
    (%1021, %1022)
  };
  %1023() /* ty=(Tensor[(7, 6, 11), float32], Tensor[(16), uint64]) */
}

def @func_6595() -> (Tensor[(16), uint64],) {
  %1025 = fn () -> (Tensor[(16), uint64],) {
    %1024 = @func_766() /* ty=Tensor[(16), uint64] */;
    (%1024,)
  };
  %1025() /* ty=(Tensor[(16), uint64],) */
}

def @func_6023() -> (Tensor[(12, 2, 1), float32],) {
  %1026 = cast(meta[relay.Constant][51] /* ty=Tensor[(12, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 1), float32] */;
  %1027 = sigmoid(%1026) /* ty=Tensor[(12, 2, 1), float32] */;
  (%1027,)
}

def @func_7258() -> Tensor[(16), uint64] {
  %1028 = @func_3147() /* ty=(Tensor[(16), uint64],) */;
  %1028.0
}

def @func_601() -> (Tensor[(16), uint64], Tensor[(1, 16), bool], uint64, Tensor[(16), uint64]) {
  %1029 = cast(meta[relay.Constant][52] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %1030 = @func_467() /* ty=Tensor[(16), uint64] */;
  %1031 = cast(%1030, dtype="uint64") /* ty=Tensor[(16), uint64] */;
  %1032 = reshape(%1029, newshape=[]) /* ty=uint64 */;
  %1033 = reshape(%1031, newshape=[1, 16]) /* ty=Tensor[(1, 16), uint64] */;
  %1034 = @func_107(%1032, %1033) /* ty=(Tensor[(1, 16), bool],) */;
  %1035 = @func_490() /* ty=(Tensor[(16), uint64],) */;
  %1036 = %1034.0;
  %1037 = %1035.0;
  (%1030, %1036, meta[relay.Constant][52] /* ty=uint64 */, %1037)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen89/build/output.py:3262: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen89/build/output.py", line 3267, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(49) tvmgen_default_fused_log_kernel0(float* __restrict__ T_log, float* __restrict__ placeholder) {
  T_log[(((int)threadIdx.x))] = __logf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

