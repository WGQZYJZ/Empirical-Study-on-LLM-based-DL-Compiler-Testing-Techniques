==========mod==========
#[version = "0.0.5"]
def @func_18056(%var_18022: Tensor[(3, 11, 6), bool], %var_18023: Tensor[(3, 11, 6), bool], %var_18041: Tensor[(210), uint8]) -> (Tensor[(3, 11, 6), bool], Tensor[(3, 11, 6), float32], Tensor[(4, 308), int64], Tensor[(210), uint8], Tensor[(1232), int64]) {
  %0 = cast(%var_18023, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
  %1 = shape_of(%var_18022, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_18022, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = cast(%var_18023, dtype="float32") /* ty=Tensor[(3, 11, 6), float32] */;
  %5 = cast(%var_18041, dtype="uint8") /* ty=Tensor[(210), uint8] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(1232), int64] */, dtype="int64") /* ty=Tensor[(1232), int64] */;
  %7 = reshape(%5, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint8] */;
  %8 = reshape(%6, newshape=[1232]) /* ty=Tensor[(1232), int64] */;
  %9 = @func_11924(%7, %8) /* ty=(Tensor[(4, 308), int64], Tensor[(507), float32], Tensor[(1232), int64], Tensor[(3, 14, 5), int8]) */;
  %10 = logical_and(%2, %3) /* ty=Tensor[(3, 11, 6), bool] */;
  %11 = sinh(%4) /* ty=Tensor[(3, 11, 6), float32] */;
  %12 = %9.0;
  (%10, %11, %12, %var_18041, meta[relay.Constant][0] /* ty=Tensor[(1232), int64] */)
}

def @func_8225(%var_8170: int64, %var_8171: Tensor[(3, 9, 13), int64], %var_8216: Tensor[(726), uint8]) -> (Tensor[(3, 9, 13), bool], Tensor[(10, 5, 12), float32], Tensor[(600), float32], Tensor[(3, 15, 12), uint64], Tensor[(540), uint32], Tensor[(3, 9, 13), float32], Tensor[(3, 700), float64], Tensor[(726), uint8]) {
  %13 = cast(%var_8170, dtype="bool") /* ty=bool */;
  %14 = cast(%var_8171, dtype="bool") /* ty=Tensor[(3, 9, 13), bool] */;
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %16 = reshape(%15, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
  %17 = @func_1049(%16) /* ty=(Tensor[(10, 5, 12), float32],) */;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %20 = reshape(%18, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), uint32] */;
  %21 = reshape(%19, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), uint32] */;
  %22 = @func_5398(%20, %21) /* ty=(Tensor[(3, 15, 12), float64], Tensor[(3, 15, 12), uint64]) */;
  %23 = cast(%var_8171, dtype="float32") /* ty=Tensor[(3, 9, 13), float32] */;
  %24 = cast(%var_8216, dtype="uint8") /* ty=Tensor[(726), uint8] */;
  %25 = reshape(%24, newshape=[6, 11, 11]) /* ty=Tensor[(6, 11, 11), uint8] */;
  %26 = @func_6626(%25) /* ty=(Tensor[(6, 11, 11), uint8], Tensor[(15, 10, 14), float64], Tensor[(3, 700), float64], Tensor[(6, 11, 11), int8]) */;
  %27 = not_equal(%13, %14) /* ty=Tensor[(3, 9, 13), bool] */;
  %28 = %17.0;
  %29 = %22.1;
  %30 = acos(%23) /* ty=Tensor[(3, 9, 13), float32] */;
  %31 = %26.2;
  (%27, %28, meta[relay.Constant][1] /* ty=Tensor[(600), float32] */, %29, meta[relay.Constant][2] /* ty=Tensor[(540), uint32] */, %30, %31, %var_8216)
}

def @func_4816(%var_4806: Tensor[(15, 10, 14), float64]) -> Tensor[(15, 10, 14), float64] {
  %32 = cast(%var_4806, dtype="float64") /* ty=Tensor[(15, 10, 14), float64] */;
  log2(%32) /* ty=Tensor[(15, 10, 14), float64] */
}

def @func_16114(%var_16102: int8) -> (Tensor[(10, 15, 6), int8],) {
  %33 = cast(%var_16102, dtype="int8") /* ty=int8 */;
  %34 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 15, 6), int8] */, dtype="int8") /* ty=Tensor[(10, 15, 6), int8] */;
  %35 = maximum(%33, %34) /* ty=Tensor[(10, 15, 6), int8] */;
  (%35,)
}

def @func_7560(%var_7517: Tensor[(3, 7, 3), uint16], %var_7518: Tensor[(3, 7, 3), uint16], %var_7543: Tensor[(3, 7, 3), uint16]) -> (Tensor[(3, 7, 3), float32], Tensor[(3, 7, 3), int8], Tensor[(11, 9, 11), int8], int8, Tensor[(1089), int8]) {
  %36 = cast(%var_7518, dtype="uint16") /* ty=Tensor[(3, 7, 3), uint16] */;
  %37 = shape_of(%var_7517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%var_7517, dtype="uint16") /* ty=Tensor[(3, 7, 3), uint16] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %40 = bitwise_and(%38, %39) /* ty=Tensor[(3, 7, 3), uint16] */;
  %41 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 7, 3), uint16] */, dtype="float32") /* ty=Tensor[(3, 7, 3), float32] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%40, dtype="float32") /* ty=Tensor[(3, 7, 3), float32] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %45 = cast(%var_7543, dtype="int8") /* ty=Tensor[(3, 7, 3), int8] */;
  %46 = shape_of(%var_7518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%var_7518, dtype="int8") /* ty=Tensor[(3, 7, 3), int8] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %49 = cast(meta[relay.Constant][5] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %50 = cast(meta[relay.Constant][6] /* ty=Tensor[(1089), int8] */, dtype="int8") /* ty=Tensor[(1089), int8] */;
  %51 = reshape(%49, newshape=[]) /* ty=int8 */;
  %52 = reshape(%50, newshape=[11, 9, 11]) /* ty=Tensor[(11, 9, 11), int8] */;
  %53 = power(%43, %44) /* ty=Tensor[(3, 7, 3), float32] */;
  %54 = maximum(%47, %48) /* ty=Tensor[(3, 7, 3), int8] */;
  %55 = @func_7239(%51, %52) /* ty=Tensor[(11, 9, 11), int8] */;
  (%53, %54, %55, meta[relay.Constant][5] /* ty=int8 */, meta[relay.Constant][6] /* ty=Tensor[(1089), int8] */)
}

def @func_9533(%var_9523: Tensor[(225), int64], %var_9530: Tensor[(12, 48), float64], %var_9531: Tensor[(1232), int64]) -> (Tensor[(2, 8, 13), float32], Tensor[(5, 3, 15), bool], Tensor[(45), int64], Tensor[(225), int64], Tensor[(507), float32], Tensor[(12, 48), float64], Tensor[(1232), int64]) {
  %56 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 8, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 8, 13), float32] */;
  %57 = cast(meta[relay.Constant][8] /* ty=Tensor[(45), int64] */, dtype="int64") /* ty=Tensor[(45), int64] */;
  %58 = cast(%var_9523, dtype="int64") /* ty=Tensor[(225), int64] */;
  %59 = reshape(%57, newshape=[1, 3, 15]) /* ty=Tensor[(1, 3, 15), int64] */;
  %60 = reshape(%58, newshape=[5, 3, 15]) /* ty=Tensor[(5, 3, 15), int64] */;
  %61 = cast(%var_9530, dtype="float64") /* ty=Tensor[(12, 48), float64] */;
  %62 = cast(%var_9531, dtype="int64") /* ty=Tensor[(1232), int64] */;
  %63 = reshape(%61, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float64] */;
  %64 = reshape(%62, newshape=[1232]) /* ty=Tensor[(1232), int64] */;
  %65 = @func_8432(%63, %64) /* ty=(Tensor[(4, 9, 16), float64], Tensor[(16, 11, 7), bool], Tensor[(507), float32], Tensor[(1232), int64]) */;
  %66 = asinh(%56) /* ty=Tensor[(2, 8, 13), float32] */;
  %67 = @func_5835(%59, %60) /* ty=Tensor[(5, 3, 15), bool] */;
  %68 = %65.2;
  (%66, %67, meta[relay.Constant][8] /* ty=Tensor[(45), int64] */, %var_9523, %68, %var_9530, %var_9531)
}

def @func_1049(%var_1030: Tensor[(10, 5, 12), float32]) -> (Tensor[(10, 5, 12), float32],) {
  %69 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 12), float32] */;
  %70 = shape_of(%var_1030, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%var_1030, dtype="float32") /* ty=Tensor[(10, 5, 12), float32] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %73 = floor_divide(%71, %72) /* ty=Tensor[(10, 5, 12), float32] */;
  (%73,)
}

def @func_2830(%var_2824: Tensor[(15, 1, 6), float64]) -> Tensor[(15, 1, 6), float64] {
  %74 = cast(%var_2824, dtype="float64") /* ty=Tensor[(15, 1, 6), float64] */;
  sigmoid(%74) /* ty=Tensor[(15, 1, 6), float64] */
}

def @func_13152(%var_13132: Tensor[(2, 13, 14), uint64], %var_13133: Tensor[(2, 13, 14), uint64], %var_13150: Tensor[(576), float64]) -> (Tensor[(2, 13, 14), uint64], Tensor[(576), float64], Tensor[(72), float64], Tensor[(576), float64]) {
  %75 = cast(%var_13133, dtype="uint64") /* ty=Tensor[(2, 13, 14), uint64] */;
  %76 = shape_of(%var_13132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%var_13132, dtype="uint64") /* ty=Tensor[(2, 13, 14), uint64] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %79 = cast(meta[relay.Constant][10] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %80 = cast(%var_13150, dtype="float64") /* ty=Tensor[(576), float64] */;
  %81 = reshape(%79, newshape=[8, 9, 1]) /* ty=Tensor[(8, 9, 1), float64] */;
  %82 = reshape(%80, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %83 = @func_11386(%81, %82) /* ty=(Tensor[(8, 9, 1), float64], Tensor[(225), int64], Tensor[(225), int64], Tensor[(576), float64], Tensor[(616, 2), int64]) */;
  %84 = subtract(%77, %78) /* ty=Tensor[(2, 13, 14), uint64] */;
  %85 = %83.3;
  (%84, %85, meta[relay.Constant][10] /* ty=Tensor[(72), float64] */, %var_13150)
}

def @func_5398(%var_5357: Tensor[(3, 15, 12), uint32], %var_5358: Tensor[(3, 15, 12), uint32]) -> (Tensor[(3, 15, 12), float64], Tensor[(3, 15, 12), uint64]) {
  %86 = cast(%var_5358, dtype="float64") /* ty=Tensor[(3, 15, 12), float64] */;
  %87 = cast(%var_5358, dtype="float64") /* ty=Tensor[(3, 15, 12), float64] */;
  %88 = asinh(%87) /* ty=Tensor[(3, 15, 12), float64] */;
  %89 = cast(%var_5358, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %90 = shape_of(%var_5357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%var_5357, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %93 = equal(%91, %92) /* ty=Tensor[(3, 15, 12), bool] */;
  %94 = cast(%93, dtype="uint64") /* ty=Tensor[(3, 15, 12), uint64] */;
  %95 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%88, dtype="uint64") /* ty=Tensor[(3, 15, 12), uint64] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %98 = sin(%86) /* ty=Tensor[(3, 15, 12), float64] */;
  %99 = logical_xor(%96, %97) /* ty=Tensor[(3, 15, 12), uint64] */;
  (%98, %99)
}

def @func_1370(%var_1315: Tensor[(15, 2, 16), bool], %var_1328: Tensor[(7, 6), uint64], %var_1335: Tensor[(1296), int32], %var_1336: Tensor[(600), float32], %var_1362: Tensor[(15, 2, 16), bool]) -> (Tensor[(6, 15, 7), uint64], Tensor[(7, 6), uint64], Tensor[(210, 3), uint64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(600), float32], Tensor[(6, 15, 7), uint64], Tensor[(15, 2, 16), bool], Tensor[(10, 5, 12), float32]) {
  %100 = cast(%var_1328, dtype="uint64") /* ty=Tensor[(7, 6), uint64] */;
  %101 = cast(meta[relay.Constant][11] /* ty=Tensor[(210, 3), uint64] */, dtype="uint64") /* ty=Tensor[(210, 3), uint64] */;
  %102 = reshape(%100, newshape=[6, 1, 7]) /* ty=Tensor[(6, 1, 7), uint64] */;
  %103 = reshape(%101, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), uint64] */;
  %104 = @func_1280(%102, %103) /* ty=(Tensor[(6, 15, 7), uint64],) */;
  %105 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %106 = cast(%var_1335, dtype="int32") /* ty=Tensor[(1296), int32] */;
  %107 = cast(%var_1336, dtype="float32") /* ty=Tensor[(600), float32] */;
  %108 = reshape(%105, newshape=[]) /* ty=int32 */;
  %109 = reshape(%106, newshape=[12, 12, 9]) /* ty=Tensor[(12, 12, 9), int32] */;
  %110 = reshape(%107, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %111 = @func_1132(%108, %109, %110) /* ty=(Tensor[(10, 5, 12), float32], Tensor[(600), float32], Tensor[(12, 12, 9), bool], Tensor[(10, 5, 12), float32]) */;
  %112 = cast(%var_1328, dtype="uint64") /* ty=Tensor[(7, 6), uint64] */;
  %113 = cast(meta[relay.Constant][11] /* ty=Tensor[(210, 3), uint64] */, dtype="uint64") /* ty=Tensor[(210, 3), uint64] */;
  %114 = reshape(%112, newshape=[6, 1, 7]) /* ty=Tensor[(6, 1, 7), uint64] */;
  %115 = reshape(%113, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), uint64] */;
  %116 = @func_1280(%114, %115) /* ty=(Tensor[(6, 15, 7), uint64],) */;
  %117 = cast(%var_1315, dtype="bool") /* ty=Tensor[(15, 2, 16), bool] */;
  %118 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(15, 2, 16), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 2, 16), bool] */, dtype="bool") /* ty=Tensor[(15, 2, 16), bool] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %121 = logical_or(%119, %120) /* ty=Tensor[(15, 2, 16), bool] */;
  %122 = cast(%var_1362, dtype="bool") /* ty=Tensor[(15, 2, 16), bool] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="bool") /* ty=Tensor[(15, 2, 16), bool] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %126 = cast(%var_1336, dtype="float32") /* ty=Tensor[(600), float32] */;
  %127 = reshape(%126, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
  %128 = @func_1049(%127) /* ty=(Tensor[(10, 5, 12), float32],) */;
  %129 = %104.0;
  %130 = %111.1;
  %131 = %116.0;
  %132 = less(%124, %125) /* ty=Tensor[(15, 2, 16), bool] */;
  %133 = %128.0;
  (%129, %var_1328, meta[relay.Constant][11] /* ty=Tensor[(210, 3), uint64] */, %130, 2 /* ty=int32 */, %var_1335, %var_1336, %131, %132, %133)
}

def @func_2947(%var_2927: Tensor[(10, 2, 11), uint32], %var_2936: Tensor[(120, 4), bool], %var_2937: Tensor[(42), uint64], %var_2939: Tensor[(600, 1), float32]) -> (Tensor[(10, 2, 11), uint32], Tensor[(210, 3), uint64], Tensor[(120, 4), bool], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600, 1), float32]) {
  %134 = cast(meta[relay.Constant][13] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %135 = cast(%var_2927, dtype="uint32") /* ty=Tensor[(10, 2, 11), uint32] */;
  %136 = cast(%var_2936, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %137 = cast(%var_2937, dtype="uint64") /* ty=Tensor[(42), uint64] */;
  %138 = cast(meta[relay.Constant][14] /* ty=Tensor[(1296), int32] */, dtype="int32") /* ty=Tensor[(1296), int32] */;
  %139 = cast(%var_2939, dtype="float32") /* ty=Tensor[(600, 1), float32] */;
  %140 = cast(%var_2936, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %141 = reshape(%136, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %142 = reshape(%137, newshape=[7, 6]) /* ty=Tensor[(7, 6), uint64] */;
  %143 = reshape(%138, newshape=[1296]) /* ty=Tensor[(1296), int32] */;
  %144 = reshape(%139, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %145 = reshape(%140, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %146 = @func_1370(%141, %142, %143, %144, %145) /* ty=(Tensor[(6, 15, 7), uint64], Tensor[(7, 6), uint64], Tensor[(210, 3), uint64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(600), float32], Tensor[(6, 15, 7), uint64], Tensor[(15, 2, 16), bool], Tensor[(10, 5, 12), float32]) */;
  %147 = bitwise_or(%134, %135) /* ty=Tensor[(10, 2, 11), uint32] */;
  %148 = %146.2;
  (%147, %148, %var_2936, %var_2937, meta[relay.Constant][14] /* ty=Tensor[(1296), int32] */, %var_2939)
}

def @func_7239(%var_7220: int8, %var_7221: Tensor[(11, 9, 11), int8]) -> Tensor[(11, 9, 11), int8] {
  %149 = cast(%var_7220, dtype="int8") /* ty=int8 */;
  %150 = cast(%var_7221, dtype="int8") /* ty=Tensor[(11, 9, 11), int8] */;
  bitwise_xor(%149, %150) /* ty=Tensor[(11, 9, 11), int8] */
}

def @func_3899(%var_3886: uint16, %var_3887: Tensor[(10, 8, 1), uint16]) -> (Tensor[(10, 8, 1), uint16],) {
  %151 = cast(%var_3886, dtype="uint16") /* ty=uint16 */;
  %152 = cast(%var_3887, dtype="uint16") /* ty=Tensor[(10, 8, 1), uint16] */;
  %153 = minimum(%151, %152) /* ty=Tensor[(10, 8, 1), uint16] */;
  (%153,)
}

def @func_21479(%var_21474: Tensor[(8, 3, 8), float32]) -> Tensor[(8, 3, 8), float32] {
  %154 = cast(%var_21474, dtype="float32") /* ty=Tensor[(8, 3, 8), float32] */;
  sqrt(%154) /* ty=Tensor[(8, 3, 8), float32] */
}

def @func_11924(%var_11911: Tensor[(3, 14, 5), uint8], %var_11918: Tensor[(1232), int64]) -> (Tensor[(4, 308), int64], Tensor[(507), float32], Tensor[(1232), int64], Tensor[(3, 14, 5), int8]) {
  %155 = cast(meta[relay.Constant][15] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
  %156 = cast(meta[relay.Constant][15] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
  %157 = cast(%var_11918, dtype="int64") /* ty=Tensor[(1232), int64] */;
  %158 = reshape(%155, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
  %159 = reshape(%156, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
  %160 = reshape(%157, newshape=[4, 308]) /* ty=Tensor[(4, 308), int64] */;
  %161 = @func_3834(%158, %159, %160) /* ty=(Tensor[(3, 13, 13), float32], Tensor[(16, 11, 7), bool], Tensor[(4, 308), int64], Tensor[(1296), float64]) */;
  %162 = cast(%var_11911, dtype="uint8") /* ty=Tensor[(3, 14, 5), uint8] */;
  %163 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(3, 14, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 14, 5), uint8] */, dtype="uint8") /* ty=Tensor[(3, 14, 5), uint8] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %166 = subtract(%164, %165) /* ty=Tensor[(3, 14, 5), uint8] */;
  %167 = cast(%166, dtype="int8") /* ty=Tensor[(3, 14, 5), int8] */;
  %168 = shape_of(%var_11911, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%var_11911, dtype="int8") /* ty=Tensor[(3, 14, 5), int8] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %171 = %161.2;
  %172 = bitwise_or(%169, %170) /* ty=Tensor[(3, 14, 5), int8] */;
  (%171, meta[relay.Constant][15] /* ty=Tensor[(507), float32] */, %var_11918, %172)
}

def @func_12608(%var_12584: Tensor[(3, 1, 7), uint64]) -> (Tensor[(3, 1, 7), uint64], Tensor[(15, 10, 14), float64], Tensor[(330), uint16], Tensor[(2100), float64], Tensor[(325), uint8], Tensor[(1296), int32]) {
  %173 = cast(meta[relay.Constant][17] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %174 = cast(%var_12584, dtype="uint64") /* ty=Tensor[(3, 1, 7), uint64] */;
  %175 = cast(meta[relay.Constant][18] /* ty=Tensor[(330), uint16] */, dtype="uint16") /* ty=Tensor[(330), uint16] */;
  %176 = cast(meta[relay.Constant][18] /* ty=Tensor[(330), uint16] */, dtype="uint16") /* ty=Tensor[(330), uint16] */;
  %177 = cast(meta[relay.Constant][19] /* ty=Tensor[(2100), float64] */, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %178 = cast(meta[relay.Constant][20] /* ty=Tensor[(325), uint8] */, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %179 = reshape(%175, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), uint16] */;
  %180 = reshape(%176, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), uint16] */;
  %181 = reshape(%177, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
  %182 = reshape(%178, newshape=[325]) /* ty=Tensor[(325), uint8] */;
  %183 = @func_6776(%179, %180, %181, %182) /* ty=(Tensor[(5, 11, 6), bool], Tensor[(15, 10, 14), float64], Tensor[(2100), float64], Tensor[(594), float64], Tensor[(325), uint8], Tensor[(594), float64]) */;
  %184 = cast(meta[relay.Constant][17] /* ty=uint64 */, dtype="float32") /* ty=float32 */;
  %185 = reshape(%184, newshape=[]) /* ty=float32 */;
  %186 = @func_1892(%185) /* ty=(Tensor[(13, 1, 9), float32], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600), float32], Tensor[(480, 600), int64]) */;
  %187 = bitwise_or(%173, %174) /* ty=Tensor[(3, 1, 7), uint64] */;
  %188 = %183.1;
  %189 = %186.2;
  (%187, %188, meta[relay.Constant][18] /* ty=Tensor[(330), uint16] */, meta[relay.Constant][19] /* ty=Tensor[(2100), float64] */, meta[relay.Constant][20] /* ty=Tensor[(325), uint8] */, %189)
}

def @func_7097(%var_7059: Tensor[(8, 2, 6), float32], %var_7079: float32) -> (Tensor[(1296), int32], float32, Tensor[(8, 2, 6), bool]) {
  %190 = cast(%var_7079, dtype="float32") /* ty=float32 */;
  %191 = reshape(%190, newshape=[]) /* ty=float32 */;
  %192 = @func_1892(%191) /* ty=(Tensor[(13, 1, 9), float32], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600), float32], Tensor[(480, 600), int64]) */;
  %193 = cast(%var_7059, dtype="float32") /* ty=Tensor[(8, 2, 6), float32] */;
  %194 = sqrt(%193) /* ty=Tensor[(8, 2, 6), float32] */;
  %195 = cast(%var_7059, dtype="bool") /* ty=Tensor[(8, 2, 6), bool] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="bool") /* ty=Tensor[(8, 2, 6), bool] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %199 = %192.2;
  %200 = equal(%197, %198) /* ty=Tensor[(8, 2, 6), bool] */;
  (%199, %var_7079, %200)
}

def @func_18137(%var_18094: Tensor[(14, 11, 14), float32], %var_18104: uint16, %var_18131: Tensor[(14, 11, 14), float32]) -> (Tensor[(10, 8, 1), uint16], uint16, Tensor[(80, 1), uint16], Tensor[(14, 11, 14), float64], Tensor[(10, 8, 1), uint16]) {
  %201 = cast(%var_18104, dtype="uint16") /* ty=uint16 */;
  %202 = cast(meta[relay.Constant][21] /* ty=Tensor[(80, 1), uint16] */, dtype="uint16") /* ty=Tensor[(80, 1), uint16] */;
  %203 = reshape(%201, newshape=[]) /* ty=uint16 */;
  %204 = reshape(%202, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), uint16] */;
  %205 = @func_3899(%203, %204) /* ty=(Tensor[(10, 8, 1), uint16],) */;
  %206 = cast(%var_18094, dtype="float32") /* ty=Tensor[(14, 11, 14), float32] */;
  %207 = sinh(%206) /* ty=Tensor[(14, 11, 14), float32] */;
  %208 = cast(%var_18131, dtype="float64") /* ty=Tensor[(14, 11, 14), float64] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="float64") /* ty=Tensor[(14, 11, 14), float64] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %212 = cast(%var_18104, dtype="uint16") /* ty=uint16 */;
  %213 = %205.0;
  %214 = cast(%213, dtype="uint16") /* ty=Tensor[(10, 8, 1), uint16] */;
  %215 = reshape(%212, newshape=[]) /* ty=uint16 */;
  %216 = reshape(%214, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), uint16] */;
  %217 = @func_3899(%215, %216) /* ty=(Tensor[(10, 8, 1), uint16],) */;
  %218 = floor_mod(%210, %211) /* ty=Tensor[(14, 11, 14), float64] */;
  %219 = %217.0;
  (%213, %var_18104, meta[relay.Constant][21] /* ty=Tensor[(80, 1), uint16] */, %218, %219)
}

def @func_21175(%var_21158: Tensor[(10, 7, 5), float64]) -> Tensor[(10, 7, 5), float64] {
  %220 = cast(%var_21158, dtype="float64") /* ty=Tensor[(10, 7, 5), float64] */;
  asin(%220) /* ty=Tensor[(10, 7, 5), float64] */
}

def @func_5697(%var_5642: Tensor[(5, 13, 5), uint8], %var_5643: Tensor[(5, 13, 5), uint8], %var_5669: Tensor[(594), float64], %var_5683: Tensor[(5, 13, 5), float32], %var_5689: Tensor[(5, 13, 5), bool]) -> (Tensor[(6, 11, 9), float64], Tensor[(594), float64], Tensor[(1232), bool], Tensor[(5, 13, 5), bool]) {
  %221 = cast(%var_5669, dtype="float64") /* ty=Tensor[(594), float64] */;
  %222 = cast(meta[relay.Constant][22] /* ty=Tensor[(1232), bool] */, dtype="bool") /* ty=Tensor[(1232), bool] */;
  %223 = reshape(%221, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), float64] */;
  %224 = reshape(%222, newshape=[16, 11, 7]) /* ty=Tensor[(16, 11, 7), bool] */;
  %225 = @func_4264(%223, %224) /* ty=(Tensor[(6, 11, 9), float64], Tensor[(10, 5, 12), float32], Tensor[(480), bool], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(60, 10), float32], Tensor[(10, 5, 12), float32], Tensor[(1232), int64], Tensor[(16, 11, 7), int16], Tensor[(6, 15, 7), uint64], Tensor[(630), uint64], Tensor[(7, 6), uint64], Tensor[(10, 5, 12), float32]) */;
  %226 = cast(%var_5643, dtype="uint8") /* ty=Tensor[(5, 13, 5), uint8] */;
  %227 = shape_of(%var_5642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%var_5642, dtype="uint8") /* ty=Tensor[(5, 13, 5), uint8] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %230 = left_shift(%228, %229) /* ty=Tensor[(5, 13, 5), uint8] */;
  %231 = cast(%230, dtype="float32") /* ty=Tensor[(5, 13, 5), float32] */;
  %232 = erf(%231) /* ty=Tensor[(5, 13, 5), float32] */;
  %233 = cast(%var_5683, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %237 = greater(%235, %236) /* ty=Tensor[(5, 13, 5), bool] */;
  %238 = cast(%var_5689, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%237, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %242 = %225.0;
  %243 = greater_equal(%240, %241) /* ty=Tensor[(5, 13, 5), bool] */;
  (%242, %var_5669, meta[relay.Constant][22] /* ty=Tensor[(1232), bool] */, %243)
}

def @func_9848(%var_9843: Tensor[(14, 3, 16), bool]) -> (Tensor[(14, 3, 16), bool],) {
  %244 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 3, 16), bool] */, dtype="bool") /* ty=Tensor[(14, 3, 16), bool] */;
  %245 = shape_of(%var_9843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%var_9843, dtype="bool") /* ty=Tensor[(14, 3, 16), bool] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %248 = logical_and(%246, %247) /* ty=Tensor[(14, 3, 16), bool] */;
  (%248,)
}

def @func_17818(%var_17795: Tensor[(1, 5, 14), float32]) -> Tensor[(1, 5, 14), float64] {
  %249 = cast(%var_17795, dtype="float32") /* ty=Tensor[(1, 5, 14), float32] */;
  %250 = tan(%249) /* ty=Tensor[(1, 5, 14), float32] */;
  %251 = cast(%250, dtype="float64") /* ty=Tensor[(1, 5, 14), float64] */;
  sqrt(%251) /* ty=Tensor[(1, 5, 14), float64] */
}

def @main(%var_22124: Tensor[(13, 13, 12), float32]) -> Tensor[(13, 13, 12), float32] {
  %252 = cast(%var_22124, dtype="float32") /* ty=Tensor[(13, 13, 12), float32] */;
  acos(%252) /* ty=Tensor[(13, 13, 12), float32] */
}

def @func_20197(%var_20186: uint64, %var_20187: Tensor[(13, 14, 2), uint64]) -> (Tensor[(13, 14, 2), bool],) {
  %253 = cast(%var_20186, dtype="bool") /* ty=bool */;
  %254 = cast(%var_20187, dtype="bool") /* ty=Tensor[(13, 14, 2), bool] */;
  %255 = greater(%253, %254) /* ty=Tensor[(13, 14, 2), bool] */;
  (%255,)
}

def @func_11386(%var_11367: Tensor[(8, 9, 1), float64], %var_11383: Tensor[(576), float64]) -> (Tensor[(8, 9, 1), float64], Tensor[(225), int64], Tensor[(225), int64], Tensor[(576), float64], Tensor[(616, 2), int64]) {
  %256 = cast(%var_11367, dtype="float64") /* ty=Tensor[(8, 9, 1), float64] */;
  %257 = cast(meta[relay.Constant][24] /* ty=Tensor[(225), int64] */, dtype="int64") /* ty=Tensor[(225), int64] */;
  %258 = cast(%var_11383, dtype="float64") /* ty=Tensor[(576), float64] */;
  %259 = cast(meta[relay.Constant][25] /* ty=Tensor[(616, 2), int64] */, dtype="int64") /* ty=Tensor[(616, 2), int64] */;
  %260 = reshape(%257, newshape=[225]) /* ty=Tensor[(225), int64] */;
  %261 = reshape(%258, newshape=[12, 48]) /* ty=Tensor[(12, 48), float64] */;
  %262 = reshape(%259, newshape=[1232]) /* ty=Tensor[(1232), int64] */;
  %263 = @func_9533(%260, %261, %262) /* ty=(Tensor[(2, 8, 13), float32], Tensor[(5, 3, 15), bool], Tensor[(45), int64], Tensor[(225), int64], Tensor[(507), float32], Tensor[(12, 48), float64], Tensor[(1232), int64]) */;
  %264 = acosh(%256) /* ty=Tensor[(8, 9, 1), float64] */;
  %265 = %263.3;
  (%264, %265, meta[relay.Constant][24] /* ty=Tensor[(225), int64] */, %var_11383, meta[relay.Constant][25] /* ty=Tensor[(616, 2), int64] */)
}

def @func_19022(%var_19013: Tensor[(8, 4, 14), int64]) -> (Tensor[(8, 4, 14), bool], Tensor[(1296), int32], Tensor[(2, 48), float32], float32) {
  %266 = cast(%var_19013, dtype="bool") /* ty=Tensor[(8, 4, 14), bool] */;
  %267 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(8, 4, 14), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 4, 14), int64] */, dtype="bool") /* ty=Tensor[(8, 4, 14), bool] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %270 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 48), float32] */, dtype="float32") /* ty=Tensor[(2, 48), float32] */;
  %271 = cast(-0.872531f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %272 = reshape(%270, newshape=[8, 2, 6]) /* ty=Tensor[(8, 2, 6), float32] */;
  %273 = reshape(%271, newshape=[]) /* ty=float32 */;
  %274 = @func_7097(%272, %273) /* ty=(Tensor[(1296), int32], float32, Tensor[(8, 2, 6), bool]) */;
  %275 = less_equal(%268, %269) /* ty=Tensor[(8, 4, 14), bool] */;
  %276 = %274.0;
  (%275, %276, meta[relay.Constant][27] /* ty=Tensor[(2, 48), float32] */, -0.872531f /* ty=float32 */)
}

def @func_8432(%var_8406: Tensor[(4, 9, 16), float64], %var_8412: Tensor[(1232), int64]) -> (Tensor[(4, 9, 16), float64], Tensor[(16, 11, 7), bool], Tensor[(507), float32], Tensor[(1232), int64]) {
  %277 = cast(%var_8406, dtype="float64") /* ty=Tensor[(4, 9, 16), float64] */;
  %278 = cast(meta[relay.Constant][28] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
  %279 = cast(meta[relay.Constant][28] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
  %280 = cast(%var_8412, dtype="int64") /* ty=Tensor[(1232), int64] */;
  %281 = reshape(%278, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
  %282 = reshape(%279, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
  %283 = reshape(%280, newshape=[4, 308]) /* ty=Tensor[(4, 308), int64] */;
  %284 = @func_3834(%281, %282, %283) /* ty=(Tensor[(3, 13, 13), float32], Tensor[(16, 11, 7), bool], Tensor[(4, 308), int64], Tensor[(1296), float64]) */;
  %285 = erf(%277) /* ty=Tensor[(4, 9, 16), float64] */;
  %286 = %284.1;
  (%285, %286, meta[relay.Constant][28] /* ty=Tensor[(507), float32] */, %var_8412)
}

def @func_8947(%var_8940: Tensor[(16, 2, 1), float32]) -> (Tensor[(16, 2, 1), float32],) {
  %287 = cast(%var_8940, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %288 = log10(%287) /* ty=Tensor[(16, 2, 1), float32] */;
  (%288,)
}

def @func_20353(%var_20311: Tensor[(14, 14, 1), float32], %var_20324: Tensor[(1, 1050), float32]) -> (Tensor[(16, 11, 7), bool], Tensor[(13, 39), float32], Tensor[(616, 2), int64], Tensor[(14, 15, 5), float32], Tensor[(14, 14, 1050), float32]) {
  %289 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 39), float32] */, dtype="float32") /* ty=Tensor[(13, 39), float32] */;
  %290 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 39), float32] */, dtype="float32") /* ty=Tensor[(13, 39), float32] */;
  %291 = cast(meta[relay.Constant][30] /* ty=Tensor[(616, 2), int64] */, dtype="int64") /* ty=Tensor[(616, 2), int64] */;
  %292 = reshape(%289, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
  %293 = reshape(%290, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
  %294 = reshape(%291, newshape=[4, 308]) /* ty=Tensor[(4, 308), int64] */;
  %295 = @func_3834(%292, %293, %294) /* ty=(Tensor[(3, 13, 13), float32], Tensor[(16, 11, 7), bool], Tensor[(4, 308), int64], Tensor[(1296), float64]) */;
  %296 = cast(%var_20324, dtype="float32") /* ty=Tensor[(1, 1050), float32] */;
  %297 = reshape(%296, newshape=[14, 15, 5]) /* ty=Tensor[(14, 15, 5), float32] */;
  %298 = cast(%var_20311, dtype="float32") /* ty=Tensor[(14, 14, 1), float32] */;
  %299 = asinh(%298) /* ty=Tensor[(14, 14, 1), float32] */;
  %300 = cast(%299, dtype="float32") /* ty=Tensor[(14, 14, 1), float32] */;
  %301 = cast(%var_20324, dtype="float32") /* ty=Tensor[(1, 1050), float32] */;
  %302 = %295.1;
  %303 = @func_13324(%297) /* ty=Tensor[(14, 15, 5), float32] */;
  %304 = divide(%300, %301) /* ty=Tensor[(14, 14, 1050), float32] */;
  (%302, meta[relay.Constant][29] /* ty=Tensor[(13, 39), float32] */, meta[relay.Constant][30] /* ty=Tensor[(616, 2), int64] */, %303, %304)
}

def @func_4698(%var_4683: Tensor[(11, 6, 5), float64]) -> (Tensor[(11, 6, 5), float64],) {
  %305 = cast(%var_4683, dtype="float64") /* ty=Tensor[(11, 6, 5), float64] */;
  %306 = log(%305) /* ty=Tensor[(11, 6, 5), float64] */;
  (%306,)
}

def @func_18778(%var_18762: Tensor[(13, 3, 4), float32], %var_18772: Tensor[(210), uint8]) -> (Tensor[(13, 3, 4), float32], Tensor[(3, 14, 5), int8], Tensor[(210), uint8], Tensor[(616, 2), int64]) {
  %307 = cast(%var_18762, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
  %308 = cast(%var_18772, dtype="uint8") /* ty=Tensor[(210), uint8] */;
  %309 = cast(meta[relay.Constant][31] /* ty=Tensor[(616, 2), int64] */, dtype="int64") /* ty=Tensor[(616, 2), int64] */;
  %310 = reshape(%308, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint8] */;
  %311 = reshape(%309, newshape=[1232]) /* ty=Tensor[(1232), int64] */;
  %312 = @func_11924(%310, %311) /* ty=(Tensor[(4, 308), int64], Tensor[(507), float32], Tensor[(1232), int64], Tensor[(3, 14, 5), int8]) */;
  %313 = erf(%307) /* ty=Tensor[(13, 3, 4), float32] */;
  %314 = %312.3;
  (%313, %314, %var_18772, meta[relay.Constant][31] /* ty=Tensor[(616, 2), int64] */)
}

def @func_7670(%var_7626: Tensor[(3, 8, 6), float64], %var_7627: Tensor[(3, 8, 6), float64], %var_7639: Tensor[(325), uint8], %var_7640: Tensor[(594), float64], %var_7652: Tensor[(90), float64], %var_7664: float32) -> (Tensor[(3, 8, 6), bool], Tensor[(5, 13, 5), bool], Tensor[(325), uint8], Tensor[(594), float64], Tensor[(15, 1, 6), float64], Tensor[(90), float64], Tensor[(42), uint64], float32) {
  %315 = cast(%var_7627, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
  %316 = shape_of(%var_7626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%var_7626, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %319 = cast(%var_7639, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %320 = cast(%var_7639, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %321 = cast(%var_7640, dtype="float64") /* ty=Tensor[(594), float64] */;
  %322 = cast(%var_7639, dtype="float32") /* ty=Tensor[(325), float32] */;
  %323 = cast(%var_7639, dtype="bool") /* ty=Tensor[(325), bool] */;
  %324 = reshape(%319, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
  %325 = reshape(%320, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
  %326 = reshape(%321, newshape=[594]) /* ty=Tensor[(594), float64] */;
  %327 = reshape(%322, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), float32] */;
  %328 = reshape(%323, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), bool] */;
  %329 = @func_5697(%324, %325, %326, %327, %328) /* ty=(Tensor[(6, 11, 9), float64], Tensor[(594), float64], Tensor[(1232), bool], Tensor[(5, 13, 5), bool]) */;
  %330 = cast(%var_7652, dtype="float64") /* ty=Tensor[(90), float64] */;
  %331 = reshape(%330, newshape=[15, 1, 6]) /* ty=Tensor[(15, 1, 6), float64] */;
  %332 = cast(%var_7664, dtype="float32") /* ty=float32 */;
  %333 = reshape(%332, newshape=[]) /* ty=float32 */;
  %334 = @func_1892(%333) /* ty=(Tensor[(13, 1, 9), float32], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600), float32], Tensor[(480, 600), int64]) */;
  %335 = not_equal(%317, %318) /* ty=Tensor[(3, 8, 6), bool] */;
  %336 = %329.3;
  %337 = @func_2830(%331) /* ty=Tensor[(15, 1, 6), float64] */;
  %338 = %334.1;
  (%335, %336, %var_7639, %var_7640, %337, %var_7652, %338, %var_7664)
}

def @func_14497(%var_14491: Tensor[(8, 14, 15), uint16], %var_14492: Tensor[(8, 14, 15), uint16]) -> Tensor[(8, 14, 15), uint16] {
  %339 = cast(%var_14492, dtype="uint16") /* ty=Tensor[(8, 14, 15), uint16] */;
  %340 = shape_of(%var_14491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%var_14491, dtype="uint16") /* ty=Tensor[(8, 14, 15), uint16] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  add(%341, %342) /* ty=Tensor[(8, 14, 15), uint16] */
}

def @func_13324(%var_13315: Tensor[(14, 15, 5), float32]) -> Tensor[(14, 15, 5), float32] {
  %343 = cast(%var_13315, dtype="float32") /* ty=Tensor[(14, 15, 5), float32] */;
  acos(%343) /* ty=Tensor[(14, 15, 5), float32] */
}

def @func_1280(%var_1270: Tensor[(6, 1, 7), uint64], %var_1271: Tensor[(6, 15, 7), uint64]) -> (Tensor[(6, 15, 7), uint64],) {
  %344 = cast(%var_1270, dtype="uint64") /* ty=Tensor[(6, 1, 7), uint64] */;
  %345 = cast(%var_1271, dtype="uint64") /* ty=Tensor[(6, 15, 7), uint64] */;
  %346 = bitwise_or(%344, %345) /* ty=Tensor[(6, 15, 7), uint64] */;
  (%346,)
}

def @func_3834(%var_3782: Tensor[(3, 13, 13), float32], %var_3783: Tensor[(3, 13, 13), float32], %var_3801: Tensor[(4, 308), int64]) -> (Tensor[(3, 13, 13), float32], Tensor[(16, 11, 7), bool], Tensor[(4, 308), int64], Tensor[(1296), float64]) {
  %347 = cast(%var_3783, dtype="float32") /* ty=Tensor[(3, 13, 13), float32] */;
  %348 = shape_of(%var_3782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%var_3782, dtype="float32") /* ty=Tensor[(3, 13, 13), float32] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %351 = cast(%var_3801, dtype="int64") /* ty=Tensor[(4, 308), int64] */;
  %352 = cast(%var_3801, dtype="int64") /* ty=Tensor[(4, 308), int64] */;
  %353 = reshape(%351, newshape=[16, 11, 7]) /* ty=Tensor[(16, 11, 7), int64] */;
  %354 = reshape(%352, newshape=[16, 11, 7]) /* ty=Tensor[(16, 11, 7), int64] */;
  %355 = cast(-4.11527f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %356 = reshape(%355, newshape=[]) /* ty=float32 */;
  %357 = @func_1892(%356) /* ty=(Tensor[(13, 1, 9), float32], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600), float32], Tensor[(480, 600), int64]) */;
  %358 = %357.2;
  %359 = cast(%358, dtype="int8") /* ty=Tensor[(1296), int8] */;
  %360 = cast(-4.11527f /* ty=float32 */, dtype="int8") /* ty=int8 */;
  %361 = multiply(%359, %360) /* ty=Tensor[(1296), int8] */;
  %362 = cast(%361, dtype="float64") /* ty=Tensor[(1296), float64] */;
  %363 = mod(%349, %350) /* ty=Tensor[(3, 13, 13), float32] */;
  %364 = @func_1780(%353, %354) /* ty=Tensor[(16, 11, 7), bool] */;
  %365 = tan(%362) /* ty=Tensor[(1296), float64] */;
  (%363, %364, %var_3801, %365)
}

def @func_21370(%var_21334: Tensor[(7, 8, 12), float64]) -> (Tensor[(7, 8, 12), float64],) {
  %366 = cast(%var_21334, dtype="float64") /* ty=Tensor[(7, 8, 12), float64] */;
  %367 = erf(%366) /* ty=Tensor[(7, 8, 12), float64] */;
  (%367,)
}

def @func_12102(%var_12095: Tensor[(15, 15, 8), float64]) -> (Tensor[(15, 15, 8), float64],) {
  %368 = cast(%var_12095, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
  %369 = erf(%368) /* ty=Tensor[(15, 15, 8), float64] */;
  (%369,)
}

def @func_9329(%var_9313: Tensor[(10, 6, 14), float64], %var_9326: Tensor[(1296), int32]) -> (Tensor[(10, 6, 14), float64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(2, 300), float32]) {
  %370 = cast(%var_9313, dtype="float64") /* ty=Tensor[(10, 6, 14), float64] */;
  %371 = cast(10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %372 = cast(%var_9326, dtype="int32") /* ty=Tensor[(1296), int32] */;
  %373 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 300), float32] */, dtype="float32") /* ty=Tensor[(2, 300), float32] */;
  %374 = reshape(%371, newshape=[]) /* ty=int32 */;
  %375 = reshape(%372, newshape=[12, 12, 9]) /* ty=Tensor[(12, 12, 9), int32] */;
  %376 = reshape(%373, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %377 = @func_1132(%374, %375, %376) /* ty=(Tensor[(10, 5, 12), float32], Tensor[(600), float32], Tensor[(12, 12, 9), bool], Tensor[(10, 5, 12), float32]) */;
  %378 = sqrt(%370) /* ty=Tensor[(10, 6, 14), float64] */;
  %379 = %377.1;
  (%378, %379, 10 /* ty=int32 */, %var_9326, meta[relay.Constant][32] /* ty=Tensor[(2, 300), float32] */)
}

def @func_17148(%var_17130: Tensor[(5, 4, 9), float64]) -> (Tensor[(5, 4, 9), float64], Tensor[(6, 11, 11), int8], Tensor[(1, 726), uint8]) {
  %380 = cast(%var_17130, dtype="float64") /* ty=Tensor[(5, 4, 9), float64] */;
  %381 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 726), uint8] */, dtype="uint8") /* ty=Tensor[(1, 726), uint8] */;
  %382 = reshape(%381, newshape=[6, 11, 11]) /* ty=Tensor[(6, 11, 11), uint8] */;
  %383 = @func_6626(%382) /* ty=(Tensor[(6, 11, 11), uint8], Tensor[(15, 10, 14), float64], Tensor[(3, 700), float64], Tensor[(6, 11, 11), int8]) */;
  %384 = tan(%380) /* ty=Tensor[(5, 4, 9), float64] */;
  %385 = %383.3;
  (%384, %385, meta[relay.Constant][33] /* ty=Tensor[(1, 726), uint8] */)
}

def @func_20242(%var_20237: Tensor[(8, 7, 5), float32]) -> Tensor[(8, 7, 5), float32] {
  %386 = cast(%var_20237, dtype="float32") /* ty=Tensor[(8, 7, 5), float32] */;
  sinh(%386) /* ty=Tensor[(8, 7, 5), float32] */
}

def @func_9116(%var_9044: float32, %var_9045: Tensor[(16, 12, 7), float32], %var_9052: Tensor[(45), int64], %var_9057: Tensor[(2100), float64], %var_9106: Tensor[(1232), int64]) -> (Tensor[(5, 3, 15), bool], Tensor[(45), int64], Tensor[(15, 10, 14), float64], Tensor[(2100), float64], Tensor[(75, 3), int8], Tensor[(16, 12, 7), int16], Tensor[(16, 12, 7), float64], Tensor[(16, 11, 7), bool], Tensor[(507), float32], Tensor[(1232), int64]) {
  %387 = cast(%var_9052, dtype="int64") /* ty=Tensor[(45), int64] */;
  %388 = cast(meta[relay.Constant][34] /* ty=Tensor[(75, 3), int64] */, dtype="int64") /* ty=Tensor[(75, 3), int64] */;
  %389 = reshape(%387, newshape=[1, 3, 15]) /* ty=Tensor[(1, 3, 15), int64] */;
  %390 = reshape(%388, newshape=[5, 3, 15]) /* ty=Tensor[(5, 3, 15), int64] */;
  %391 = cast(%var_9057, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %392 = reshape(%391, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float64] */;
  %393 = cast(meta[relay.Constant][34] /* ty=Tensor[(75, 3), int64] */, dtype="int8") /* ty=Tensor[(75, 3), int8] */;
  %394 = cast(%var_9044, dtype="int8") /* ty=int8 */;
  %395 = cast(%var_9045, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %396 = log10(%395) /* ty=Tensor[(16, 12, 7), float32] */;
  %397 = cast(%var_9044, dtype="float32") /* ty=float32 */;
  %398 = cast(%var_9045, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %399 = mod(%397, %398) /* ty=Tensor[(16, 12, 7), float32] */;
  %400 = cast(%399, dtype="int16") /* ty=Tensor[(16, 12, 7), int16] */;
  %401 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%396, dtype="int16") /* ty=Tensor[(16, 12, 7), int16] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %404 = cast(%396, dtype="float64") /* ty=Tensor[(16, 12, 7), float64] */;
  %405 = cast(meta[relay.Constant][35] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
  %406 = cast(meta[relay.Constant][35] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
  %407 = cast(%var_9106, dtype="int64") /* ty=Tensor[(1232), int64] */;
  %408 = reshape(%405, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
  %409 = reshape(%406, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
  %410 = reshape(%407, newshape=[4, 308]) /* ty=Tensor[(4, 308), int64] */;
  %411 = @func_3834(%408, %409, %410) /* ty=(Tensor[(3, 13, 13), float32], Tensor[(16, 11, 7), bool], Tensor[(4, 308), int64], Tensor[(1296), float64]) */;
  %412 = @func_5835(%389, %390) /* ty=Tensor[(5, 3, 15), bool] */;
  %413 = @func_4816(%392) /* ty=Tensor[(15, 10, 14), float64] */;
  %414 = bitwise_and(%393, %394) /* ty=Tensor[(75, 3), int8] */;
  %415 = bitwise_xor(%402, %403) /* ty=Tensor[(16, 12, 7), int16] */;
  %416 = tan(%404) /* ty=Tensor[(16, 12, 7), float64] */;
  %417 = %411.1;
  (%412, %var_9052, %413, %var_9057, %414, %415, %416, %417, meta[relay.Constant][35] /* ty=Tensor[(507), float32] */, %var_9106)
}

def @func_7837(%var_7832: Tensor[(9, 8, 6), int16]) -> Tensor[(9, 8, 6), int16] {
  %418 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 8, 6), int16] */, dtype="int16") /* ty=Tensor[(9, 8, 6), int16] */;
  %419 = shape_of(%var_7832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%var_7832, dtype="int16") /* ty=Tensor[(9, 8, 6), int16] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_and(%420, %421) /* ty=Tensor[(9, 8, 6), int16] */
}

def @func_19429(%var_19395: Tensor[(9, 4, 13), float64], %var_19422: Tensor[(63), uint16]) -> (Tensor[(9, 4, 13), float64], Tensor[(4, 9, 16), float64], Tensor[(576), float64], Tensor[(1232), int64], int8, Tensor[(63), uint16]) {
  %422 = cast(%var_19395, dtype="float64") /* ty=Tensor[(9, 4, 13), float64] */;
  %423 = cast(meta[relay.Constant][37] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %424 = cast(meta[relay.Constant][38] /* ty=Tensor[(1232), int64] */, dtype="int64") /* ty=Tensor[(1232), int64] */;
  %425 = reshape(%423, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float64] */;
  %426 = reshape(%424, newshape=[1232]) /* ty=Tensor[(1232), int64] */;
  %427 = @func_8432(%425, %426) /* ty=(Tensor[(4, 9, 16), float64], Tensor[(16, 11, 7), bool], Tensor[(507), float32], Tensor[(1232), int64]) */;
  %428 = cast(%var_19422, dtype="uint16") /* ty=Tensor[(63), uint16] */;
  %429 = cast(%var_19422, dtype="uint16") /* ty=Tensor[(63), uint16] */;
  %430 = cast(%var_19422, dtype="uint16") /* ty=Tensor[(63), uint16] */;
  %431 = reshape(%428, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), uint16] */;
  %432 = reshape(%429, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), uint16] */;
  %433 = reshape(%430, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), uint16] */;
  %434 = @func_7560(%431, %432, %433) /* ty=(Tensor[(3, 7, 3), float32], Tensor[(3, 7, 3), int8], Tensor[(11, 9, 11), int8], int8, Tensor[(1089), int8]) */;
  %435 = atan(%422) /* ty=Tensor[(9, 4, 13), float64] */;
  %436 = %427.0;
  %437 = %434.3;
  (%435, %436, meta[relay.Constant][37] /* ty=Tensor[(576), float64] */, meta[relay.Constant][38] /* ty=Tensor[(1232), int64] */, %437, %var_19422)
}

def @func_1780(%var_1774: Tensor[(16, 11, 7), int64], %var_1775: Tensor[(16, 11, 7), int64]) -> Tensor[(16, 11, 7), bool] {
  %438 = cast(%var_1775, dtype="bool") /* ty=Tensor[(16, 11, 7), bool] */;
  %439 = shape_of(%var_1774, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%var_1774, dtype="bool") /* ty=Tensor[(16, 11, 7), bool] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%440, %441) /* ty=Tensor[(16, 11, 7), bool] */
}

def @func_6336(%var_6319: Tensor[(10, 3, 2), float64]) -> (Tensor[(10, 3, 2), float64],) {
  %442 = cast(%var_6319, dtype="float64") /* ty=Tensor[(10, 3, 2), float64] */;
  %443 = cos(%442) /* ty=Tensor[(10, 3, 2), float64] */;
  (%443,)
}

def @func_12456(%var_12405: Tensor[(15, 12, 3), int32], %var_12418: Tensor[(1232), bool], %var_12422: float32, %var_12440: Tensor[(42), uint64], %var_12441: Tensor[(630), uint64]) -> (Tensor[(15, 12, 3), int32], Tensor[(10, 5, 12), float32], Tensor[(594), float64], Tensor[(1232), bool], Tensor[(13, 1, 9), float32], float32, Tensor[(6, 11, 9), float64], Tensor[(325), uint8], Tensor[(6, 15, 7), uint64], Tensor[(42), uint64], Tensor[(630), uint64]) {
  %444 = cast(%var_12405, dtype="int32") /* ty=Tensor[(15, 12, 3), int32] */;
  %445 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(15, 12, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 12, 3), int32] */, dtype="int32") /* ty=Tensor[(15, 12, 3), int32] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %448 = cast(meta[relay.Constant][40] /* ty=Tensor[(594), float64] */, dtype="float64") /* ty=Tensor[(594), float64] */;
  %449 = cast(%var_12418, dtype="bool") /* ty=Tensor[(1232), bool] */;
  %450 = reshape(%448, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), float64] */;
  %451 = reshape(%449, newshape=[16, 11, 7]) /* ty=Tensor[(16, 11, 7), bool] */;
  %452 = @func_4264(%450, %451) /* ty=(Tensor[(6, 11, 9), float64], Tensor[(10, 5, 12), float32], Tensor[(480), bool], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(60, 10), float32], Tensor[(10, 5, 12), float32], Tensor[(1232), int64], Tensor[(16, 11, 7), int16], Tensor[(6, 15, 7), uint64], Tensor[(630), uint64], Tensor[(7, 6), uint64], Tensor[(10, 5, 12), float32]) */;
  %453 = cast(%var_12422, dtype="float32") /* ty=float32 */;
  %454 = reshape(%453, newshape=[]) /* ty=float32 */;
  %455 = @func_1892(%454) /* ty=(Tensor[(13, 1, 9), float32], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600), float32], Tensor[(480, 600), int64]) */;
  %456 = cast(meta[relay.Constant][41] /* ty=Tensor[(325), uint8] */, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %457 = cast(meta[relay.Constant][41] /* ty=Tensor[(325), uint8] */, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %458 = cast(meta[relay.Constant][40] /* ty=Tensor[(594), float64] */, dtype="float64") /* ty=Tensor[(594), float64] */;
  %459 = cast(meta[relay.Constant][41] /* ty=Tensor[(325), uint8] */, dtype="float32") /* ty=Tensor[(325), float32] */;
  %460 = cast(meta[relay.Constant][41] /* ty=Tensor[(325), uint8] */, dtype="bool") /* ty=Tensor[(325), bool] */;
  %461 = reshape(%456, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
  %462 = reshape(%457, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
  %463 = reshape(%458, newshape=[594]) /* ty=Tensor[(594), float64] */;
  %464 = reshape(%459, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), float32] */;
  %465 = reshape(%460, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), bool] */;
  %466 = @func_5697(%461, %462, %463, %464, %465) /* ty=(Tensor[(6, 11, 9), float64], Tensor[(594), float64], Tensor[(1232), bool], Tensor[(5, 13, 5), bool]) */;
  %467 = cast(%var_12440, dtype="uint64") /* ty=Tensor[(42), uint64] */;
  %468 = cast(%var_12441, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %469 = reshape(%467, newshape=[6, 1, 7]) /* ty=Tensor[(6, 1, 7), uint64] */;
  %470 = reshape(%468, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), uint64] */;
  %471 = @func_1280(%469, %470) /* ty=(Tensor[(6, 15, 7), uint64],) */;
  %472 = add(%446, %447) /* ty=Tensor[(15, 12, 3), int32] */;
  %473 = %452.6;
  %474 = %455.0;
  %475 = %466.0;
  %476 = %471.0;
  (%472, %473, meta[relay.Constant][40] /* ty=Tensor[(594), float64] */, %var_12418, %474, %var_12422, %475, meta[relay.Constant][41] /* ty=Tensor[(325), uint8] */, %476, %var_12440, %var_12441)
}

def @func_17361(%var_17265: Tensor[(8, 16, 1), float64], %var_17311: Tensor[(490), int32]) -> (Tensor[(14, 15, 5), float32], Tensor[(1050), float32], Tensor[(8, 16, ?), int16], Tensor[(10, 7, 7), bool], Tensor[(490), int32], Tensor[(8, 16, ?), float32], Tensor[(11, 9, 11), int8], Tensor[(63), uint16], Tensor[(8, 16, ?), uint32]) {
  %477 = cast(meta[relay.Constant][42] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %478 = reshape(%477, newshape=[14, 15, 5]) /* ty=Tensor[(14, 15, 5), float32] */;
  %479 = cast(%var_17265, dtype="float64") /* ty=Tensor[(8, 16, 1), float64] */;
  %480 = sinh(%479) /* ty=Tensor[(8, 16, 1), float64] */;
  %481 = cast(%var_17265, dtype="bool") /* ty=Tensor[(8, 16, 1), bool] */;
  %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%480, dtype="bool") /* ty=Tensor[(8, 16, 1), bool] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %485 = greater_equal(%483, %484) /* ty=Tensor[(8, 16, ?), bool] */;
  %486 = cast(%480, dtype="float32") /* ty=Tensor[(8, 16, 1), float32] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%485, dtype="float32") /* ty=Tensor[(8, 16, ?), float32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %490 = subtract(%488, %489) /* ty=Tensor[(8, 16, ?), float32] */;
  %491 = cast(%485, dtype="int16") /* ty=Tensor[(8, 16, ?), int16] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="int16") /* ty=Tensor[(8, 16, ?), int16] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %495 = cast(%var_17311, dtype="int32") /* ty=Tensor[(490), int32] */;
  %496 = cast(%var_17311, dtype="int32") /* ty=Tensor[(490), int32] */;
  %497 = reshape(%495, newshape=[10, 7, 7]) /* ty=Tensor[(10, 7, 7), int32] */;
  %498 = reshape(%496, newshape=[10, 7, 7]) /* ty=Tensor[(10, 7, 7), int32] */;
  %499 = cast(%485, dtype="float64") /* ty=Tensor[(8, 16, ?), float64] */;
  %500 = asinh(%499) /* ty=Tensor[(8, 16, ?), float64] */;
  %501 = cast(%500, dtype="float32") /* ty=Tensor[(8, 16, ?), float32] */;
  %502 = cast(meta[relay.Constant][43] /* ty=Tensor[(63), uint16] */, dtype="uint16") /* ty=Tensor[(63), uint16] */;
  %503 = cast(meta[relay.Constant][43] /* ty=Tensor[(63), uint16] */, dtype="uint16") /* ty=Tensor[(63), uint16] */;
  %504 = cast(meta[relay.Constant][43] /* ty=Tensor[(63), uint16] */, dtype="uint16") /* ty=Tensor[(63), uint16] */;
  %505 = reshape(%502, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), uint16] */;
  %506 = reshape(%503, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), uint16] */;
  %507 = reshape(%504, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), uint16] */;
  %508 = @func_7560(%505, %506, %507) /* ty=(Tensor[(3, 7, 3), float32], Tensor[(3, 7, 3), int8], Tensor[(11, 9, 11), int8], int8, Tensor[(1089), int8]) */;
  %509 = cast(%485, dtype="uint32") /* ty=Tensor[(8, 16, ?), uint32] */;
  %510 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%500, dtype="uint32") /* ty=Tensor[(8, 16, ?), uint32] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %513 = @func_13324(%478) /* ty=Tensor[(14, 15, 5), float32] */;
  %514 = add(%493, %494) /* ty=Tensor[(8, 16, ?), int16] */;
  %515 = @func_13971(%497, %498) /* ty=Tensor[(10, 7, 7), bool] */;
  %516 = rsqrt(%501) /* ty=Tensor[(8, 16, ?), float32] */;
  %517 = %508.2;
  %518 = bitwise_xor(%511, %512) /* ty=Tensor[(8, 16, ?), uint32] */;
  (%513, meta[relay.Constant][42] /* ty=Tensor[(1050), float32] */, %514, %515, %var_17311, %516, %517, meta[relay.Constant][43] /* ty=Tensor[(63), uint16] */, %518)
}

def @func_7381(%var_7375: Tensor[(9, 15, 9), uint32], %var_7376: Tensor[(9, 15, 9), uint32]) -> (Tensor[(9, 15, 9), bool],) {
  %519 = cast(%var_7376, dtype="bool") /* ty=Tensor[(9, 15, 9), bool] */;
  %520 = shape_of(%var_7375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%var_7375, dtype="bool") /* ty=Tensor[(9, 15, 9), bool] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %523 = not_equal(%521, %522) /* ty=Tensor[(9, 15, 9), bool] */;
  (%523,)
}

def @func_2631(%var_2616: Tensor[(7, 12, 13), uint16], %var_2617: Tensor[(7, 12, 13), uint16], %var_2624: Tensor[(7, 12, 13), uint16]) -> Tensor[(7, 12, 13), float32] {
  %524 = cast(%var_2617, dtype="uint16") /* ty=Tensor[(7, 12, 13), uint16] */;
  %525 = shape_of(%var_2616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%var_2616, dtype="uint16") /* ty=Tensor[(7, 12, 13), uint16] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %528 = right_shift(%526, %527) /* ty=Tensor[(7, 12, 13), uint16] */;
  %529 = cast(%var_2624, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
  %530 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%528, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%531, %532) /* ty=Tensor[(7, 12, 13), float32] */
}

def @func_5835(%var_5818: Tensor[(1, 3, 15), int64], %var_5819: Tensor[(5, 3, 15), int64]) -> Tensor[(5, 3, 15), bool] {
  %533 = cast(%var_5818, dtype="bool") /* ty=Tensor[(1, 3, 15), bool] */;
  %534 = cast(%var_5819, dtype="bool") /* ty=Tensor[(5, 3, 15), bool] */;
  equal(%533, %534) /* ty=Tensor[(5, 3, 15), bool] */
}

def @func_1132(%var_1083: int32, %var_1084: Tensor[(12, 12, 9), int32], %var_1108: Tensor[(600), float32]) -> (Tensor[(10, 5, 12), float32], Tensor[(600), float32], Tensor[(12, 12, 9), bool], Tensor[(10, 5, 12), float32]) {
  %535 = cast(%var_1108, dtype="float32") /* ty=Tensor[(600), float32] */;
  %536 = reshape(%535, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
  %537 = @func_1049(%536) /* ty=(Tensor[(10, 5, 12), float32],) */;
  %538 = cast(%var_1083, dtype="int32") /* ty=int32 */;
  %539 = cast(%var_1084, dtype="int32") /* ty=Tensor[(12, 12, 9), int32] */;
  %540 = bitwise_and(%538, %539) /* ty=Tensor[(12, 12, 9), int32] */;
  %541 = cast(%540, dtype="bool") /* ty=Tensor[(12, 12, 9), bool] */;
  %542 = shape_of(%var_1084, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%var_1084, dtype="bool") /* ty=Tensor[(12, 12, 9), bool] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %545 = logical_or(%543, %544) /* ty=Tensor[(12, 12, 9), bool] */;
  %546 = cast(%545, dtype="bool") /* ty=Tensor[(12, 12, 9), bool] */;
  %547 = cast(%var_1083, dtype="bool") /* ty=bool */;
  %548 = %537.0;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(10, 5, 12), float32] */;
  %550 = reshape(%549, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
  %551 = @func_1049(%550) /* ty=(Tensor[(10, 5, 12), float32],) */;
  %552 = greater_equal(%546, %547) /* ty=Tensor[(12, 12, 9), bool] */;
  %553 = %551.0;
  (%548, %var_1108, %552, %553)
}

def @func_20509(%var_20487: Tensor[(8, 14, 6), uint64], %var_20488: Tensor[(8, 14, 6), uint64], %var_20505: Tensor[(8, 14, 6), uint64]) -> (Tensor[(8, 14, 6), bool], Tensor[(14, 15, 5), float32], Tensor[(1050), float32], Tensor[(8, 14, 6), int64]) {
  %554 = cast(%var_20488, dtype="bool") /* ty=Tensor[(8, 14, 6), bool] */;
  %555 = shape_of(%var_20487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%var_20487, dtype="bool") /* ty=Tensor[(8, 14, 6), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %558 = cast(meta[relay.Constant][44] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %559 = reshape(%558, newshape=[14, 15, 5]) /* ty=Tensor[(14, 15, 5), float32] */;
  %560 = cast(%var_20505, dtype="int64") /* ty=Tensor[(8, 14, 6), int64] */;
  %561 = shape_of(%var_20488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%var_20488, dtype="int64") /* ty=Tensor[(8, 14, 6), int64] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %564 = greater_equal(%556, %557) /* ty=Tensor[(8, 14, 6), bool] */;
  %565 = @func_13324(%559) /* ty=Tensor[(14, 15, 5), float32] */;
  %566 = subtract(%562, %563) /* ty=Tensor[(8, 14, 6), int64] */;
  (%564, %565, meta[relay.Constant][44] /* ty=Tensor[(1050), float32] */, %566)
}

def @func_21251(%var_21217: Tensor[(8, 7, 1), uint32], %var_21231: Tensor[(60), float64]) -> (Tensor[(8, 7, 1), uint32], Tensor[(10, 3, 2), float64], Tensor[(60), float64]) {
  %567 = cast(meta[relay.Constant][45] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %568 = cast(%var_21217, dtype="uint32") /* ty=Tensor[(8, 7, 1), uint32] */;
  %569 = cast(%var_21231, dtype="float64") /* ty=Tensor[(60), float64] */;
  %570 = reshape(%569, newshape=[10, 3, 2]) /* ty=Tensor[(10, 3, 2), float64] */;
  %571 = @func_6336(%570) /* ty=(Tensor[(10, 3, 2), float64],) */;
  %572 = add(%567, %568) /* ty=Tensor[(8, 7, 1), uint32] */;
  %573 = %571.0;
  (%572, %573, %var_21231)
}

def @func_4264(%var_4193: Tensor[(6, 11, 9), float64], %var_4242: Tensor[(16, 11, 7), bool]) -> (Tensor[(6, 11, 9), float64], Tensor[(10, 5, 12), float32], Tensor[(480), bool], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(60, 10), float32], Tensor[(10, 5, 12), float32], Tensor[(1232), int64], Tensor[(16, 11, 7), int16], Tensor[(6, 15, 7), uint64], Tensor[(630), uint64], Tensor[(7, 6), uint64], Tensor[(10, 5, 12), float32]) {
  %574 = cast(%var_4193, dtype="float64") /* ty=Tensor[(6, 11, 9), float64] */;
  %575 = cast(meta[relay.Constant][46] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %576 = cast(meta[relay.Constant][47] /* ty=Tensor[(42), uint64] */, dtype="uint64") /* ty=Tensor[(42), uint64] */;
  %577 = cast(meta[relay.Constant][48] /* ty=Tensor[(1296), int32] */, dtype="int32") /* ty=Tensor[(1296), int32] */;
  %578 = cast(meta[relay.Constant][49] /* ty=Tensor[(60, 10), float32] */, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
  %579 = cast(meta[relay.Constant][46] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %580 = reshape(%575, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %581 = reshape(%576, newshape=[7, 6]) /* ty=Tensor[(7, 6), uint64] */;
  %582 = reshape(%577, newshape=[1296]) /* ty=Tensor[(1296), int32] */;
  %583 = reshape(%578, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %584 = reshape(%579, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %585 = @func_1370(%580, %581, %582, %583, %584) /* ty=(Tensor[(6, 15, 7), uint64], Tensor[(7, 6), uint64], Tensor[(210, 3), uint64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(600), float32], Tensor[(6, 15, 7), uint64], Tensor[(15, 2, 16), bool], Tensor[(10, 5, 12), float32]) */;
  %586 = cast(meta[relay.Constant][49] /* ty=Tensor[(60, 10), float32] */, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
  %587 = reshape(%586, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
  %588 = @func_1049(%587) /* ty=(Tensor[(10, 5, 12), float32],) */;
  %589 = cast(meta[relay.Constant][50] /* ty=Tensor[(1232), int64] */, dtype="int64") /* ty=Tensor[(1232), int64] */;
  %590 = cast(meta[relay.Constant][50] /* ty=Tensor[(1232), int64] */, dtype="int64") /* ty=Tensor[(1232), int64] */;
  %591 = reshape(%589, newshape=[16, 11, 7]) /* ty=Tensor[(16, 11, 7), int64] */;
  %592 = reshape(%590, newshape=[16, 11, 7]) /* ty=Tensor[(16, 11, 7), int64] */;
  %593 = @func_1780(%591, %592) /* ty=Tensor[(16, 11, 7), bool] */;
  %594 = cast(%var_4242, dtype="int16") /* ty=Tensor[(16, 11, 7), int16] */;
  %595 = shape_of(%593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%593, dtype="int16") /* ty=Tensor[(16, 11, 7), int16] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %598 = cast(meta[relay.Constant][47] /* ty=Tensor[(42), uint64] */, dtype="uint64") /* ty=Tensor[(42), uint64] */;
  %599 = cast(meta[relay.Constant][51] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %600 = reshape(%598, newshape=[6, 1, 7]) /* ty=Tensor[(6, 1, 7), uint64] */;
  %601 = reshape(%599, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), uint64] */;
  %602 = @func_1280(%600, %601) /* ty=(Tensor[(6, 15, 7), uint64],) */;
  %603 = cast(meta[relay.Constant][46] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %604 = cast(meta[relay.Constant][47] /* ty=Tensor[(42), uint64] */, dtype="uint64") /* ty=Tensor[(42), uint64] */;
  %605 = cast(meta[relay.Constant][48] /* ty=Tensor[(1296), int32] */, dtype="int32") /* ty=Tensor[(1296), int32] */;
  %606 = %588.0;
  %607 = cast(%606, dtype="float32") /* ty=Tensor[(10, 5, 12), float32] */;
  %608 = cast(meta[relay.Constant][46] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %609 = reshape(%603, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %610 = reshape(%604, newshape=[7, 6]) /* ty=Tensor[(7, 6), uint64] */;
  %611 = reshape(%605, newshape=[1296]) /* ty=Tensor[(1296), int32] */;
  %612 = reshape(%607, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %613 = reshape(%608, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %614 = @func_1370(%609, %610, %611, %612, %613) /* ty=(Tensor[(6, 15, 7), uint64], Tensor[(7, 6), uint64], Tensor[(210, 3), uint64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(600), float32], Tensor[(6, 15, 7), uint64], Tensor[(15, 2, 16), bool], Tensor[(10, 5, 12), float32]) */;
  %615 = %585.9;
  %616 = cast(%615, dtype="float32") /* ty=Tensor[(10, 5, 12), float32] */;
  %617 = reshape(%616, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
  %618 = @func_1049(%617) /* ty=(Tensor[(10, 5, 12), float32],) */;
  %619 = rsqrt(%574) /* ty=Tensor[(6, 11, 9), float64] */;
  %620 = multiply(%596, %597) /* ty=Tensor[(16, 11, 7), int16] */;
  %621 = %602.0;
  %622 = %614.1;
  %623 = %618.0;
  (%619, %615, meta[relay.Constant][46] /* ty=Tensor[(480), bool] */, meta[relay.Constant][47] /* ty=Tensor[(42), uint64] */, meta[relay.Constant][48] /* ty=Tensor[(1296), int32] */, meta[relay.Constant][49] /* ty=Tensor[(60, 10), float32] */, %606, meta[relay.Constant][50] /* ty=Tensor[(1232), int64] */, %620, %621, meta[relay.Constant][51] /* ty=Tensor[(630), uint64] */, %622, %623)
}

def @func_13971(%var_13957: Tensor[(10, 7, 7), int32], %var_13958: Tensor[(10, 7, 7), int32]) -> Tensor[(10, 7, 7), bool] {
  %624 = cast(%var_13958, dtype="bool") /* ty=Tensor[(10, 7, 7), bool] */;
  %625 = shape_of(%var_13957, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_13957, dtype="bool") /* ty=Tensor[(10, 7, 7), bool] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%626, %627) /* ty=Tensor[(10, 7, 7), bool] */
}

def @func_6626(%var_6586: Tensor[(6, 11, 11), uint8]) -> (Tensor[(6, 11, 11), uint8], Tensor[(15, 10, 14), float64], Tensor[(3, 700), float64], Tensor[(6, 11, 11), int8]) {
  %628 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 11, 11), uint8] */, dtype="uint8") /* ty=Tensor[(6, 11, 11), uint8] */;
  %629 = shape_of(%var_6586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%var_6586, dtype="uint8") /* ty=Tensor[(6, 11, 11), uint8] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %632 = cast(meta[relay.Constant][53] /* ty=Tensor[(3, 700), float64] */, dtype="float64") /* ty=Tensor[(3, 700), float64] */;
  %633 = reshape(%632, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float64] */;
  %634 = cast(meta[relay.Constant][52] /* ty=Tensor[(6, 11, 11), uint8] */, dtype="int8") /* ty=Tensor[(6, 11, 11), int8] */;
  %635 = shape_of(%var_6586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%var_6586, dtype="int8") /* ty=Tensor[(6, 11, 11), int8] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %638 = bitwise_and(%630, %631) /* ty=Tensor[(6, 11, 11), uint8] */;
  %639 = @func_4816(%633) /* ty=Tensor[(15, 10, 14), float64] */;
  %640 = bitwise_xor(%636, %637) /* ty=Tensor[(6, 11, 11), int8] */;
  (%638, %639, meta[relay.Constant][53] /* ty=Tensor[(3, 700), float64] */, %640)
}

def @func_10799(%var_10773: uint16, %var_10774: Tensor[(80), uint16]) -> (Tensor[(10, 8, 1), uint16], uint16, Tensor[(80), uint16], Tensor[(9, 2, 15), float32]) {
  %641 = cast(%var_10773, dtype="uint16") /* ty=uint16 */;
  %642 = cast(%var_10774, dtype="uint16") /* ty=Tensor[(80), uint16] */;
  %643 = reshape(%641, newshape=[]) /* ty=uint16 */;
  %644 = reshape(%642, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), uint16] */;
  %645 = @func_3899(%643, %644) /* ty=(Tensor[(10, 8, 1), uint16],) */;
  %646 = cast(meta[relay.Constant][54] /* ty=Tensor[(9, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 15), float64] */;
  %647 = asinh(%646) /* ty=Tensor[(9, 2, 15), float64] */;
  %648 = cast(%647, dtype="float32") /* ty=Tensor[(9, 2, 15), float32] */;
  %649 = rsqrt(%648) /* ty=Tensor[(9, 2, 15), float32] */;
  %650 = cast(%649, dtype="float64") /* ty=Tensor[(9, 2, 15), float64] */;
  %651 = log2(%650) /* ty=Tensor[(9, 2, 15), float64] */;
  %652 = cast(%649, dtype="float32") /* ty=Tensor[(9, 2, 15), float32] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="float32") /* ty=Tensor[(9, 2, 15), float32] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %656 = %645.0;
  %657 = floor_mod(%654, %655) /* ty=Tensor[(9, 2, 15), float32] */;
  (%656, %var_10773, %var_10774, %657)
}

def @func_6776(%var_6759: Tensor[(5, 11, 6), uint16], %var_6760: Tensor[(5, 11, 6), uint16], %var_6765: Tensor[(2100), float64], %var_6769: Tensor[(325), uint8]) -> (Tensor[(5, 11, 6), bool], Tensor[(15, 10, 14), float64], Tensor[(2100), float64], Tensor[(594), float64], Tensor[(325), uint8], Tensor[(594), float64]) {
  %658 = cast(%var_6760, dtype="bool") /* ty=Tensor[(5, 11, 6), bool] */;
  %659 = shape_of(%var_6759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%var_6759, dtype="bool") /* ty=Tensor[(5, 11, 6), bool] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %662 = cast(%var_6765, dtype="float64") /* ty=Tensor[(2100), float64] */;
  %663 = reshape(%662, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float64] */;
  %664 = cast(%var_6769, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %665 = cast(%var_6769, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %666 = cast(meta[relay.Constant][55] /* ty=Tensor[(594), float64] */, dtype="float64") /* ty=Tensor[(594), float64] */;
  %667 = cast(%var_6769, dtype="float32") /* ty=Tensor[(325), float32] */;
  %668 = cast(%var_6769, dtype="bool") /* ty=Tensor[(325), bool] */;
  %669 = reshape(%664, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
  %670 = reshape(%665, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
  %671 = reshape(%666, newshape=[594]) /* ty=Tensor[(594), float64] */;
  %672 = reshape(%667, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), float32] */;
  %673 = reshape(%668, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), bool] */;
  %674 = @func_5697(%669, %670, %671, %672, %673) /* ty=(Tensor[(6, 11, 9), float64], Tensor[(594), float64], Tensor[(1232), bool], Tensor[(5, 13, 5), bool]) */;
  %675 = less_equal(%660, %661) /* ty=Tensor[(5, 11, 6), bool] */;
  %676 = @func_4816(%663) /* ty=Tensor[(15, 10, 14), float64] */;
  %677 = %674.1;
  (%675, %676, %var_6765, %677, %var_6769, meta[relay.Constant][55] /* ty=Tensor[(594), float64] */)
}

def @func_1892(%var_1871: float32) -> (Tensor[(13, 1, 9), float32], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600), float32], Tensor[(480, 600), int64]) {
  %678 = cast(%var_1871, dtype="float32") /* ty=float32 */;
  %679 = cast(meta[relay.Constant][56] /* ty=Tensor[(13, 1, 9), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 9), float32] */;
  %680 = cast(meta[relay.Constant][60] /* ty=Tensor[(480, 1), bool] */, dtype="bool") /* ty=Tensor[(480, 1), bool] */;
  %681 = cast(meta[relay.Constant][57] /* ty=Tensor[(42), uint64] */, dtype="uint64") /* ty=Tensor[(42), uint64] */;
  %682 = cast(meta[relay.Constant][58] /* ty=Tensor[(1296), int32] */, dtype="int32") /* ty=Tensor[(1296), int32] */;
  %683 = cast(meta[relay.Constant][59] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %684 = cast(meta[relay.Constant][60] /* ty=Tensor[(480, 1), bool] */, dtype="bool") /* ty=Tensor[(480, 1), bool] */;
  %685 = reshape(%680, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %686 = reshape(%681, newshape=[7, 6]) /* ty=Tensor[(7, 6), uint64] */;
  %687 = reshape(%682, newshape=[1296]) /* ty=Tensor[(1296), int32] */;
  %688 = reshape(%683, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %689 = reshape(%684, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %690 = @func_1370(%685, %686, %687, %688, %689) /* ty=(Tensor[(6, 15, 7), uint64], Tensor[(7, 6), uint64], Tensor[(210, 3), uint64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(600), float32], Tensor[(6, 15, 7), uint64], Tensor[(15, 2, 16), bool], Tensor[(10, 5, 12), float32]) */;
  %691 = %690.3;
  %692 = cast(%691, dtype="int64") /* ty=Tensor[(600), int64] */;
  %693 = cast(meta[relay.Constant][60] /* ty=Tensor[(480, 1), bool] */, dtype="int64") /* ty=Tensor[(480, 1), int64] */;
  %694 = floor_divide(%678, %679) /* ty=Tensor[(13, 1, 9), float32] */;
  %695 = bitwise_xor(%692, %693) /* ty=Tensor[(480, 600), int64] */;
  (%694, meta[relay.Constant][57] /* ty=Tensor[(42), uint64] */, meta[relay.Constant][58] /* ty=Tensor[(1296), int32] */, meta[relay.Constant][59] /* ty=Tensor[(600), float32] */, %695)
}

def @func_10406(%var_10382: Tensor[(4, 14, 8), int32], %var_10383: Tensor[(4, 14, 8), int32]) -> (Tensor[(4, 14, 8), bool], Tensor[(14, 3, 16), bool], Tensor[(56, 12), bool]) {
  %696 = cast(%var_10383, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
  %697 = shape_of(%var_10382, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%var_10382, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %700 = cast(meta[relay.Constant][61] /* ty=Tensor[(56, 12), bool] */, dtype="bool") /* ty=Tensor[(56, 12), bool] */;
  %701 = reshape(%700, newshape=[14, 3, 16]) /* ty=Tensor[(14, 3, 16), bool] */;
  %702 = @func_9848(%701) /* ty=(Tensor[(14, 3, 16), bool],) */;
  %703 = greater(%698, %699) /* ty=Tensor[(4, 14, 8), bool] */;
  %704 = %702.0;
  (%703, %704, meta[relay.Constant][61] /* ty=Tensor[(56, 12), bool] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1132(%var_1083: int32, %var_1084: Tensor[(12, 12, 9), int32], %var_1108: Tensor[(600), float32]) -> (Tensor[(10, 5, 12), float32], Tensor[(600), float32], Tensor[(12, 12, 9), bool], Tensor[(10, 5, 12), float32]) {
  %0 = cast(%var_1108, dtype="float32") /* ty=Tensor[(600), float32] */;
  %1 = reshape(%0, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
  %2 = @func_1049(%1) /* ty=(Tensor[(10, 5, 12), float32],) */;
  %3 = cast(%var_1083, dtype="int32") /* ty=int32 */;
  %4 = cast(%var_1084, dtype="int32") /* ty=Tensor[(12, 12, 9), int32] */;
  %5 = bitwise_and(%3, %4) /* ty=Tensor[(12, 12, 9), int32] */;
  %6 = cast(%5, dtype="bool") /* ty=Tensor[(12, 12, 9), bool] */;
  %7 = shape_of(%var_1084, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%var_1084, dtype="bool") /* ty=Tensor[(12, 12, 9), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %10 = logical_or(%8, %9) /* ty=Tensor[(12, 12, 9), bool] */;
  %11 = cast(%10, dtype="bool") /* ty=Tensor[(12, 12, 9), bool] */;
  %12 = cast(%var_1083, dtype="bool") /* ty=bool */;
  %13 = %2.0;
  %14 = cast(%13, dtype="float32") /* ty=Tensor[(10, 5, 12), float32] */;
  %15 = reshape(%14, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
  %16 = @func_1049(%15) /* ty=(Tensor[(10, 5, 12), float32],) */;
  %17 = greater_equal(%11, %12) /* ty=Tensor[(12, 12, 9), bool] */;
  %18 = %16.0;
  (%13, %var_1108, %17, %18)
}

def @func_1895(%var_1893: float32) -> (Tensor[(13, 1, 9), float32], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600), float32], Tensor[(480, 600), int64]) {
  @func_1892(%var_1893) /* ty=(Tensor[(13, 1, 9), float32], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600), float32], Tensor[(480, 600), int64]) */
}

def @func_14501(%var_14499: Tensor[(8, 14, 15), uint16], %var_14500: Tensor[(8, 14, 15), uint16]) -> Tensor[(8, 14, 15), uint16] {
  @func_14497(%var_14499, %var_14500) /* ty=Tensor[(8, 14, 15), uint16] */
}

def @func_9850(%var_9849: Tensor[(14, 3, 16), bool]) -> (Tensor[(14, 3, 16), bool],) {
  %24 = fn (%var_9843: Tensor[(14, 3, 16), bool]) -> (Tensor[(14, 3, 16), bool],) {
    %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 3, 16), bool] */, dtype="bool") /* ty=Tensor[(14, 3, 16), bool] */;
    %20 = shape_of(%var_9843, dtype="int32") /* ty=Tensor[(3), int32] */;
    %21 = cast(%var_9843, dtype="bool") /* ty=Tensor[(14, 3, 16), bool] */;
    %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %23 = logical_and(%21, %22) /* ty=Tensor[(14, 3, 16), bool] */;
    (%23,)
  };
  %24(%var_9849) /* ty=(Tensor[(14, 3, 16), bool],) */
}

def @func_21177(%var_21176: Tensor[(10, 7, 5), float64]) -> Tensor[(10, 7, 5), float64] {
  %26 = fn (%var_21158: Tensor[(10, 7, 5), float64]) -> Tensor[(10, 7, 5), float64] {
    %25 = cast(%var_21158, dtype="float64") /* ty=Tensor[(10, 7, 5), float64] */;
    asin(%25) /* ty=Tensor[(10, 7, 5), float64] */
  };
  %26(%var_21176) /* ty=Tensor[(10, 7, 5), float64] */
}

def @main(%var_22124: Tensor[(13, 13, 12), float32]) -> Tensor[(13, 13, 12), float32] {
  %27 = cast(%var_22124, dtype="float32") /* ty=Tensor[(13, 13, 12), float32] */;
  acos(%27) /* ty=Tensor[(13, 13, 12), float32] */
}

def @func_9122(%var_9117: float32, %var_9118: Tensor[(16, 12, 7), float32], %var_9119: Tensor[(45), int64], %var_9120: Tensor[(2100), float64], %var_9121: Tensor[(1232), int64]) -> (Tensor[(5, 3, 15), bool], Tensor[(45), int64], Tensor[(15, 10, 14), float64], Tensor[(2100), float64], Tensor[(75, 3), int8], Tensor[(16, 12, 7), int16], Tensor[(16, 12, 7), float64], Tensor[(16, 11, 7), bool], Tensor[(507), float32], Tensor[(1232), int64]) {
  %59 = fn (%var_9044: float32, %var_9045: Tensor[(16, 12, 7), float32], %var_9052: Tensor[(45), int64], %var_9057: Tensor[(2100), float64], %var_9106: Tensor[(1232), int64]) -> (Tensor[(5, 3, 15), bool], Tensor[(45), int64], Tensor[(15, 10, 14), float64], Tensor[(2100), float64], Tensor[(75, 3), int8], Tensor[(16, 12, 7), int16], Tensor[(16, 12, 7), float64], Tensor[(16, 11, 7), bool], Tensor[(507), float32], Tensor[(1232), int64]) {
    %28 = cast(%var_9052, dtype="int64") /* ty=Tensor[(45), int64] */;
    %29 = cast(meta[relay.Constant][1] /* ty=Tensor[(75, 3), int64] */, dtype="int64") /* ty=Tensor[(75, 3), int64] */;
    %30 = reshape(%28, newshape=[1, 3, 15]) /* ty=Tensor[(1, 3, 15), int64] */;
    %31 = reshape(%29, newshape=[5, 3, 15]) /* ty=Tensor[(5, 3, 15), int64] */;
    %32 = cast(%var_9057, dtype="float64") /* ty=Tensor[(2100), float64] */;
    %33 = reshape(%32, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float64] */;
    %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(75, 3), int64] */, dtype="int8") /* ty=Tensor[(75, 3), int8] */;
    %35 = cast(%var_9044, dtype="int8") /* ty=int8 */;
    %36 = cast(%var_9045, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
    %37 = log10(%36) /* ty=Tensor[(16, 12, 7), float32] */;
    %38 = cast(%var_9044, dtype="float32") /* ty=float32 */;
    %39 = cast(%var_9045, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
    %40 = mod(%38, %39) /* ty=Tensor[(16, 12, 7), float32] */;
    %41 = cast(%40, dtype="int16") /* ty=Tensor[(16, 12, 7), int16] */;
    %42 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
    %43 = cast(%37, dtype="int16") /* ty=Tensor[(16, 12, 7), int16] */;
    %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %45 = cast(%37, dtype="float64") /* ty=Tensor[(16, 12, 7), float64] */;
    %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
    %47 = cast(meta[relay.Constant][2] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
    %48 = cast(%var_9106, dtype="int64") /* ty=Tensor[(1232), int64] */;
    %49 = reshape(%46, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
    %50 = reshape(%47, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
    %51 = reshape(%48, newshape=[4, 308]) /* ty=Tensor[(4, 308), int64] */;
    %52 = @func_3834(%49, %50, %51) /* ty=(Tensor[(3, 13, 13), float32], Tensor[(16, 11, 7), bool], Tensor[(4, 308), int64], Tensor[(1296), float64]) */;
    %53 = @func_5835(%30, %31) /* ty=Tensor[(5, 3, 15), bool] */;
    %54 = @func_4816(%33) /* ty=Tensor[(15, 10, 14), float64] */;
    %55 = bitwise_and(%34, %35) /* ty=Tensor[(75, 3), int8] */;
    %56 = bitwise_xor(%43, %44) /* ty=Tensor[(16, 12, 7), int16] */;
    %57 = tan(%45) /* ty=Tensor[(16, 12, 7), float64] */;
    %58 = %52.1;
    (%53, %var_9052, %54, %var_9057, %55, %56, %57, %58, meta[relay.Constant][2] /* ty=Tensor[(507), float32] */, %var_9106)
  };
  %59(%var_9117, %var_9118, %var_9119, %var_9120, %var_9121) /* ty=(Tensor[(5, 3, 15), bool], Tensor[(45), int64], Tensor[(15, 10, 14), float64], Tensor[(2100), float64], Tensor[(75, 3), int8], Tensor[(16, 12, 7), int16], Tensor[(16, 12, 7), float64], Tensor[(16, 11, 7), bool], Tensor[(507), float32], Tensor[(1232), int64]) */
}

def @func_1892(%var_1871: float32) -> (Tensor[(13, 1, 9), float32], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600), float32], Tensor[(480, 600), int64]) {
  %60 = cast(%var_1871, dtype="float32") /* ty=float32 */;
  %61 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 1, 9), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 9), float32] */;
  %62 = cast(meta[relay.Constant][7] /* ty=Tensor[(480, 1), bool] */, dtype="bool") /* ty=Tensor[(480, 1), bool] */;
  %63 = cast(meta[relay.Constant][4] /* ty=Tensor[(42), uint64] */, dtype="uint64") /* ty=Tensor[(42), uint64] */;
  %64 = cast(meta[relay.Constant][5] /* ty=Tensor[(1296), int32] */, dtype="int32") /* ty=Tensor[(1296), int32] */;
  %65 = cast(meta[relay.Constant][6] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %66 = cast(meta[relay.Constant][7] /* ty=Tensor[(480, 1), bool] */, dtype="bool") /* ty=Tensor[(480, 1), bool] */;
  %67 = reshape(%62, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %68 = reshape(%63, newshape=[7, 6]) /* ty=Tensor[(7, 6), uint64] */;
  %69 = reshape(%64, newshape=[1296]) /* ty=Tensor[(1296), int32] */;
  %70 = reshape(%65, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %71 = reshape(%66, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %72 = @func_1370(%67, %68, %69, %70, %71) /* ty=(Tensor[(6, 15, 7), uint64], Tensor[(7, 6), uint64], Tensor[(210, 3), uint64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(600), float32], Tensor[(6, 15, 7), uint64], Tensor[(15, 2, 16), bool], Tensor[(10, 5, 12), float32]) */;
  %73 = %72.3;
  %74 = cast(%73, dtype="int64") /* ty=Tensor[(600), int64] */;
  %75 = cast(meta[relay.Constant][7] /* ty=Tensor[(480, 1), bool] */, dtype="int64") /* ty=Tensor[(480, 1), int64] */;
  %76 = floor_divide(%60, %61) /* ty=Tensor[(13, 1, 9), float32] */;
  %77 = bitwise_xor(%74, %75) /* ty=Tensor[(480, 600), int64] */;
  (%76, meta[relay.Constant][4] /* ty=Tensor[(42), uint64] */, meta[relay.Constant][5] /* ty=Tensor[(1296), int32] */, meta[relay.Constant][6] /* ty=Tensor[(600), float32] */, %77)
}

def @func_20357(%var_20355: Tensor[(14, 14, 1), float32], %var_20356: Tensor[(1, 1050), float32]) -> (Tensor[(16, 11, 7), bool], Tensor[(13, 39), float32], Tensor[(616, 2), int64], Tensor[(14, 15, 5), float32], Tensor[(14, 14, 1050), float32]) {
  @func_20353(%var_20355, %var_20356) /* ty=(Tensor[(16, 11, 7), bool], Tensor[(13, 39), float32], Tensor[(616, 2), int64], Tensor[(14, 15, 5), float32], Tensor[(14, 14, 1050), float32]) */
}

def @func_21373(%var_21371: Tensor[(7, 8, 12), float64]) -> (Tensor[(7, 8, 12), float64],) {
  @func_21370(%var_21371) /* ty=(Tensor[(7, 8, 12), float64],) */
}

def @func_1049(%var_1030: Tensor[(10, 5, 12), float32]) -> (Tensor[(10, 5, 12), float32],) {
  %78 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 12), float32] */;
  %79 = shape_of(%var_1030, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%var_1030, dtype="float32") /* ty=Tensor[(10, 5, 12), float32] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %82 = floor_divide(%80, %81) /* ty=Tensor[(10, 5, 12), float32] */;
  (%82,)
}

def @func_4268(%var_4266: Tensor[(6, 11, 9), float64], %var_4267: Tensor[(16, 11, 7), bool]) -> (Tensor[(6, 11, 9), float64], Tensor[(10, 5, 12), float32], Tensor[(480), bool], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(60, 10), float32], Tensor[(10, 5, 12), float32], Tensor[(1232), int64], Tensor[(16, 11, 7), int16], Tensor[(6, 15, 7), uint64], Tensor[(630), uint64], Tensor[(7, 6), uint64], Tensor[(10, 5, 12), float32]) {
  @func_4264(%var_4266, %var_4267) /* ty=(Tensor[(6, 11, 9), float64], Tensor[(10, 5, 12), float32], Tensor[(480), bool], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(60, 10), float32], Tensor[(10, 5, 12), float32], Tensor[(1232), int64], Tensor[(16, 11, 7), int16], Tensor[(6, 15, 7), uint64], Tensor[(630), uint64], Tensor[(7, 6), uint64], Tensor[(10, 5, 12), float32]) */
}

def @func_7837(%var_7832: Tensor[(9, 8, 6), int16]) -> Tensor[(9, 8, 6), int16] {
  %83 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 8, 6), int16] */, dtype="int16") /* ty=Tensor[(9, 8, 6), int16] */;
  %84 = shape_of(%var_7832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%var_7832, dtype="int16") /* ty=Tensor[(9, 8, 6), int16] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_and(%85, %86) /* ty=Tensor[(9, 8, 6), int16] */
}

def @func_8947(%var_8940: Tensor[(16, 2, 1), float32]) -> (Tensor[(16, 2, 1), float32],) {
  %87 = cast(%var_8940, dtype="float32") /* ty=Tensor[(16, 2, 1), float32] */;
  %88 = log10(%87) /* ty=Tensor[(16, 2, 1), float32] */;
  (%88,)
}

def @func_11389(%var_11387: Tensor[(8, 9, 1), float64], %var_11388: Tensor[(576), float64]) -> (Tensor[(8, 9, 1), float64], Tensor[(225), int64], Tensor[(225), int64], Tensor[(576), float64], Tensor[(616, 2), int64]) {
  %99 = fn (%var_11367: Tensor[(8, 9, 1), float64], %var_11383: Tensor[(576), float64]) -> (Tensor[(8, 9, 1), float64], Tensor[(225), int64], Tensor[(225), int64], Tensor[(576), float64], Tensor[(616, 2), int64]) {
    %89 = cast(%var_11367, dtype="float64") /* ty=Tensor[(8, 9, 1), float64] */;
    %90 = cast(meta[relay.Constant][10] /* ty=Tensor[(225), int64] */, dtype="int64") /* ty=Tensor[(225), int64] */;
    %91 = cast(%var_11383, dtype="float64") /* ty=Tensor[(576), float64] */;
    %92 = cast(meta[relay.Constant][11] /* ty=Tensor[(616, 2), int64] */, dtype="int64") /* ty=Tensor[(616, 2), int64] */;
    %93 = reshape(%90, newshape=[225]) /* ty=Tensor[(225), int64] */;
    %94 = reshape(%91, newshape=[12, 48]) /* ty=Tensor[(12, 48), float64] */;
    %95 = reshape(%92, newshape=[1232]) /* ty=Tensor[(1232), int64] */;
    %96 = @func_9533(%93, %94, %95) /* ty=(Tensor[(2, 8, 13), float32], Tensor[(5, 3, 15), bool], Tensor[(45), int64], Tensor[(225), int64], Tensor[(507), float32], Tensor[(12, 48), float64], Tensor[(1232), int64]) */;
    %97 = acosh(%89) /* ty=Tensor[(8, 9, 1), float64] */;
    %98 = %96.3;
    (%97, %98, meta[relay.Constant][10] /* ty=Tensor[(225), int64] */, %var_11383, meta[relay.Constant][11] /* ty=Tensor[(616, 2), int64] */)
  };
  %99(%var_11387, %var_11388) /* ty=(Tensor[(8, 9, 1), float64], Tensor[(225), int64], Tensor[(225), int64], Tensor[(576), float64], Tensor[(616, 2), int64]) */
}

def @func_11927(%var_11925: Tensor[(3, 14, 5), uint8], %var_11926: Tensor[(1232), int64]) -> (Tensor[(4, 308), int64], Tensor[(507), float32], Tensor[(1232), int64], Tensor[(3, 14, 5), int8]) {
  %118 = fn (%var_11911: Tensor[(3, 14, 5), uint8], %var_11918: Tensor[(1232), int64]) -> (Tensor[(4, 308), int64], Tensor[(507), float32], Tensor[(1232), int64], Tensor[(3, 14, 5), int8]) {
    %100 = cast(meta[relay.Constant][12] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
    %101 = cast(meta[relay.Constant][12] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
    %102 = cast(%var_11918, dtype="int64") /* ty=Tensor[(1232), int64] */;
    %103 = reshape(%100, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
    %104 = reshape(%101, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
    %105 = reshape(%102, newshape=[4, 308]) /* ty=Tensor[(4, 308), int64] */;
    %106 = @func_3834(%103, %104, %105) /* ty=(Tensor[(3, 13, 13), float32], Tensor[(16, 11, 7), bool], Tensor[(4, 308), int64], Tensor[(1296), float64]) */;
    %107 = cast(%var_11911, dtype="uint8") /* ty=Tensor[(3, 14, 5), uint8] */;
    %108 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(3, 14, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %109 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 14, 5), uint8] */, dtype="uint8") /* ty=Tensor[(3, 14, 5), uint8] */;
    %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %111 = subtract(%109, %110) /* ty=Tensor[(3, 14, 5), uint8] */;
    %112 = cast(%111, dtype="int8") /* ty=Tensor[(3, 14, 5), int8] */;
    %113 = shape_of(%var_11911, dtype="int32") /* ty=Tensor[(3), int32] */;
    %114 = cast(%var_11911, dtype="int8") /* ty=Tensor[(3, 14, 5), int8] */;
    %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %116 = %106.2;
    %117 = bitwise_or(%114, %115) /* ty=Tensor[(3, 14, 5), int8] */;
    (%116, meta[relay.Constant][12] /* ty=Tensor[(507), float32] */, %var_11918, %117)
  };
  %118(%var_11925, %var_11926) /* ty=(Tensor[(4, 308), int64], Tensor[(507), float32], Tensor[(1232), int64], Tensor[(3, 14, 5), int8]) */
}

def @func_16116(%var_16115: int8) -> (Tensor[(10, 15, 6), int8],) {
  %122 = fn (%var_16102: int8) -> (Tensor[(10, 15, 6), int8],) {
    %119 = cast(%var_16102, dtype="int8") /* ty=int8 */;
    %120 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 15, 6), int8] */, dtype="int8") /* ty=Tensor[(10, 15, 6), int8] */;
    %121 = maximum(%119, %120) /* ty=Tensor[(10, 15, 6), int8] */;
    (%121,)
  };
  %122(%var_16115) /* ty=(Tensor[(10, 15, 6), int8],) */
}

def @func_17148(%var_17130: Tensor[(5, 4, 9), float64]) -> (Tensor[(5, 4, 9), float64], Tensor[(6, 11, 11), int8], Tensor[(1, 726), uint8]) {
  %123 = cast(%var_17130, dtype="float64") /* ty=Tensor[(5, 4, 9), float64] */;
  %124 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 726), uint8] */, dtype="uint8") /* ty=Tensor[(1, 726), uint8] */;
  %125 = reshape(%124, newshape=[6, 11, 11]) /* ty=Tensor[(6, 11, 11), uint8] */;
  %126 = @func_6626(%125) /* ty=(Tensor[(6, 11, 11), uint8], Tensor[(15, 10, 14), float64], Tensor[(3, 700), float64], Tensor[(6, 11, 11), int8]) */;
  %127 = tan(%123) /* ty=Tensor[(5, 4, 9), float64] */;
  %128 = %126.3;
  (%127, %128, meta[relay.Constant][15] /* ty=Tensor[(1, 726), uint8] */)
}

def @func_20514(%var_20511: Tensor[(8, 14, 6), uint64], %var_20512: Tensor[(8, 14, 6), uint64], %var_20513: Tensor[(8, 14, 6), uint64]) -> (Tensor[(8, 14, 6), bool], Tensor[(14, 15, 5), float32], Tensor[(1050), float32], Tensor[(8, 14, 6), int64]) {
  @func_20509(%var_20511, %var_20512, %var_20513) /* ty=(Tensor[(8, 14, 6), bool], Tensor[(14, 15, 5), float32], Tensor[(1050), float32], Tensor[(8, 14, 6), int64]) */
}

def @func_8435(%var_8433: Tensor[(4, 9, 16), float64], %var_8434: Tensor[(1232), int64]) -> (Tensor[(4, 9, 16), float64], Tensor[(16, 11, 7), bool], Tensor[(507), float32], Tensor[(1232), int64]) {
  %139 = fn (%var_8406: Tensor[(4, 9, 16), float64], %var_8412: Tensor[(1232), int64]) -> (Tensor[(4, 9, 16), float64], Tensor[(16, 11, 7), bool], Tensor[(507), float32], Tensor[(1232), int64]) {
    %129 = cast(%var_8406, dtype="float64") /* ty=Tensor[(4, 9, 16), float64] */;
    %130 = cast(meta[relay.Constant][16] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
    %131 = cast(meta[relay.Constant][16] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
    %132 = cast(%var_8412, dtype="int64") /* ty=Tensor[(1232), int64] */;
    %133 = reshape(%130, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
    %134 = reshape(%131, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
    %135 = reshape(%132, newshape=[4, 308]) /* ty=Tensor[(4, 308), int64] */;
    %136 = @func_3834(%133, %134, %135) /* ty=(Tensor[(3, 13, 13), float32], Tensor[(16, 11, 7), bool], Tensor[(4, 308), int64], Tensor[(1296), float64]) */;
    %137 = erf(%129) /* ty=Tensor[(4, 9, 16), float64] */;
    %138 = %136.1;
    (%137, %138, meta[relay.Constant][16] /* ty=Tensor[(507), float32] */, %var_8412)
  };
  %139(%var_8433, %var_8434) /* ty=(Tensor[(4, 9, 16), float64], Tensor[(16, 11, 7), bool], Tensor[(507), float32], Tensor[(1232), int64]) */
}

def @func_12462(%var_12457: Tensor[(15, 12, 3), int32], %var_12458: Tensor[(1232), bool], %var_12459: float32, %var_12460: Tensor[(42), uint64], %var_12461: Tensor[(630), uint64]) -> (Tensor[(15, 12, 3), int32], Tensor[(10, 5, 12), float32], Tensor[(594), float64], Tensor[(1232), bool], Tensor[(13, 1, 9), float32], float32, Tensor[(6, 11, 9), float64], Tensor[(325), uint8], Tensor[(6, 15, 7), uint64], Tensor[(42), uint64], Tensor[(630), uint64]) {
  %173 = fn (%var_12405: Tensor[(15, 12, 3), int32], %var_12418: Tensor[(1232), bool], %var_12422: float32, %var_12440: Tensor[(42), uint64], %var_12441: Tensor[(630), uint64]) -> (Tensor[(15, 12, 3), int32], Tensor[(10, 5, 12), float32], Tensor[(594), float64], Tensor[(1232), bool], Tensor[(13, 1, 9), float32], float32, Tensor[(6, 11, 9), float64], Tensor[(325), uint8], Tensor[(6, 15, 7), uint64], Tensor[(42), uint64], Tensor[(630), uint64]) {
    %140 = cast(%var_12405, dtype="int32") /* ty=Tensor[(15, 12, 3), int32] */;
    %141 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(15, 12, 3), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %142 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 12, 3), int32] */, dtype="int32") /* ty=Tensor[(15, 12, 3), int32] */;
    %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %144 = cast(meta[relay.Constant][18] /* ty=Tensor[(594), float64] */, dtype="float64") /* ty=Tensor[(594), float64] */;
    %145 = cast(%var_12418, dtype="bool") /* ty=Tensor[(1232), bool] */;
    %146 = reshape(%144, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), float64] */;
    %147 = reshape(%145, newshape=[16, 11, 7]) /* ty=Tensor[(16, 11, 7), bool] */;
    %148 = @func_4264(%146, %147) /* ty=(Tensor[(6, 11, 9), float64], Tensor[(10, 5, 12), float32], Tensor[(480), bool], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(60, 10), float32], Tensor[(10, 5, 12), float32], Tensor[(1232), int64], Tensor[(16, 11, 7), int16], Tensor[(6, 15, 7), uint64], Tensor[(630), uint64], Tensor[(7, 6), uint64], Tensor[(10, 5, 12), float32]) */;
    %149 = cast(%var_12422, dtype="float32") /* ty=float32 */;
    %150 = reshape(%149, newshape=[]) /* ty=float32 */;
    %151 = @func_1892(%150) /* ty=(Tensor[(13, 1, 9), float32], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600), float32], Tensor[(480, 600), int64]) */;
    %152 = cast(meta[relay.Constant][19] /* ty=Tensor[(325), uint8] */, dtype="uint8") /* ty=Tensor[(325), uint8] */;
    %153 = cast(meta[relay.Constant][19] /* ty=Tensor[(325), uint8] */, dtype="uint8") /* ty=Tensor[(325), uint8] */;
    %154 = cast(meta[relay.Constant][18] /* ty=Tensor[(594), float64] */, dtype="float64") /* ty=Tensor[(594), float64] */;
    %155 = cast(meta[relay.Constant][19] /* ty=Tensor[(325), uint8] */, dtype="float32") /* ty=Tensor[(325), float32] */;
    %156 = cast(meta[relay.Constant][19] /* ty=Tensor[(325), uint8] */, dtype="bool") /* ty=Tensor[(325), bool] */;
    %157 = reshape(%152, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
    %158 = reshape(%153, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
    %159 = reshape(%154, newshape=[594]) /* ty=Tensor[(594), float64] */;
    %160 = reshape(%155, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), float32] */;
    %161 = reshape(%156, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), bool] */;
    %162 = @func_5697(%157, %158, %159, %160, %161) /* ty=(Tensor[(6, 11, 9), float64], Tensor[(594), float64], Tensor[(1232), bool], Tensor[(5, 13, 5), bool]) */;
    %163 = cast(%var_12440, dtype="uint64") /* ty=Tensor[(42), uint64] */;
    %164 = cast(%var_12441, dtype="uint64") /* ty=Tensor[(630), uint64] */;
    %165 = reshape(%163, newshape=[6, 1, 7]) /* ty=Tensor[(6, 1, 7), uint64] */;
    %166 = reshape(%164, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), uint64] */;
    %167 = @func_1280(%165, %166) /* ty=(Tensor[(6, 15, 7), uint64],) */;
    %168 = add(%142, %143) /* ty=Tensor[(15, 12, 3), int32] */;
    %169 = %148.6;
    %170 = %151.0;
    %171 = %162.0;
    %172 = %167.0;
    (%168, %169, meta[relay.Constant][18] /* ty=Tensor[(594), float64] */, %var_12418, %170, %var_12422, %171, meta[relay.Constant][19] /* ty=Tensor[(325), uint8] */, %172, %var_12440, %var_12441)
  };
  %173(%var_12457, %var_12458, %var_12459, %var_12460, %var_12461) /* ty=(Tensor[(15, 12, 3), int32], Tensor[(10, 5, 12), float32], Tensor[(594), float64], Tensor[(1232), bool], Tensor[(13, 1, 9), float32], float32, Tensor[(6, 11, 9), float64], Tensor[(325), uint8], Tensor[(6, 15, 7), uint64], Tensor[(42), uint64], Tensor[(630), uint64]) */
}

def @func_1052(%var_1050: Tensor[(10, 5, 12), float32]) -> (Tensor[(10, 5, 12), float32],) {
  @func_1049(%var_1050) /* ty=(Tensor[(10, 5, 12), float32],) */
}

def @func_5704(%var_5699: Tensor[(5, 13, 5), uint8], %var_5700: Tensor[(5, 13, 5), uint8], %var_5701: Tensor[(594), float64], %var_5702: Tensor[(5, 13, 5), float32], %var_5703: Tensor[(5, 13, 5), bool]) -> (Tensor[(6, 11, 9), float64], Tensor[(594), float64], Tensor[(1232), bool], Tensor[(5, 13, 5), bool]) {
  @func_5697(%var_5699, %var_5700, %var_5701, %var_5702, %var_5703) /* ty=(Tensor[(6, 11, 9), float64], Tensor[(594), float64], Tensor[(1232), bool], Tensor[(5, 13, 5), bool]) */
}

def @func_1783(%var_1781: Tensor[(16, 11, 7), int64], %var_1782: Tensor[(16, 11, 7), int64]) -> Tensor[(16, 11, 7), bool] {
  %178 = fn (%var_1774: Tensor[(16, 11, 7), int64], %var_1775: Tensor[(16, 11, 7), int64]) -> Tensor[(16, 11, 7), bool] {
    %174 = cast(%var_1775, dtype="bool") /* ty=Tensor[(16, 11, 7), bool] */;
    %175 = shape_of(%var_1774, dtype="int32") /* ty=Tensor[(3), int32] */;
    %176 = cast(%var_1774, dtype="bool") /* ty=Tensor[(16, 11, 7), bool] */;
    %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%176, %177) /* ty=Tensor[(16, 11, 7), bool] */
  };
  %178(%var_1781, %var_1782) /* ty=Tensor[(16, 11, 7), bool] */
}

def @func_2832(%var_2831: Tensor[(15, 1, 6), float64]) -> Tensor[(15, 1, 6), float64] {
  %180 = fn (%var_2824: Tensor[(15, 1, 6), float64]) -> Tensor[(15, 1, 6), float64] {
    %179 = cast(%var_2824, dtype="float64") /* ty=Tensor[(15, 1, 6), float64] */;
    sigmoid(%179) /* ty=Tensor[(15, 1, 6), float64] */
  };
  %180(%var_2831) /* ty=Tensor[(15, 1, 6), float64] */
}

def @func_7384(%var_7382: Tensor[(9, 15, 9), uint32], %var_7383: Tensor[(9, 15, 9), uint32]) -> (Tensor[(9, 15, 9), bool],) {
  %186 = fn (%var_7375: Tensor[(9, 15, 9), uint32], %var_7376: Tensor[(9, 15, 9), uint32]) -> (Tensor[(9, 15, 9), bool],) {
    %181 = cast(%var_7376, dtype="bool") /* ty=Tensor[(9, 15, 9), bool] */;
    %182 = shape_of(%var_7375, dtype="int32") /* ty=Tensor[(3), int32] */;
    %183 = cast(%var_7375, dtype="bool") /* ty=Tensor[(9, 15, 9), bool] */;
    %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %185 = not_equal(%183, %184) /* ty=Tensor[(9, 15, 9), bool] */;
    (%185,)
  };
  %186(%var_7382, %var_7383) /* ty=(Tensor[(9, 15, 9), bool],) */
}

def @func_5838(%var_5836: Tensor[(1, 3, 15), int64], %var_5837: Tensor[(5, 3, 15), int64]) -> Tensor[(5, 3, 15), bool] {
  %189 = fn (%var_5818: Tensor[(1, 3, 15), int64], %var_5819: Tensor[(5, 3, 15), int64]) -> Tensor[(5, 3, 15), bool] {
    %187 = cast(%var_5818, dtype="bool") /* ty=Tensor[(1, 3, 15), bool] */;
    %188 = cast(%var_5819, dtype="bool") /* ty=Tensor[(5, 3, 15), bool] */;
    equal(%187, %188) /* ty=Tensor[(5, 3, 15), bool] */
  };
  %189(%var_5836, %var_5837) /* ty=Tensor[(5, 3, 15), bool] */
}

def @func_7242(%var_7240: int8, %var_7241: Tensor[(11, 9, 11), int8]) -> Tensor[(11, 9, 11), int8] {
  %192 = fn (%var_7220: int8, %var_7221: Tensor[(11, 9, 11), int8]) -> Tensor[(11, 9, 11), int8] {
    %190 = cast(%var_7220, dtype="int8") /* ty=int8 */;
    %191 = cast(%var_7221, dtype="int8") /* ty=Tensor[(11, 9, 11), int8] */;
    bitwise_xor(%190, %191) /* ty=Tensor[(11, 9, 11), int8] */
  };
  %192(%var_7240, %var_7241) /* ty=Tensor[(11, 9, 11), int8] */
}

def @func_20353(%var_20311: Tensor[(14, 14, 1), float32], %var_20324: Tensor[(1, 1050), float32]) -> (Tensor[(16, 11, 7), bool], Tensor[(13, 39), float32], Tensor[(616, 2), int64], Tensor[(14, 15, 5), float32], Tensor[(14, 14, 1050), float32]) {
  %193 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 39), float32] */, dtype="float32") /* ty=Tensor[(13, 39), float32] */;
  %194 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 39), float32] */, dtype="float32") /* ty=Tensor[(13, 39), float32] */;
  %195 = cast(meta[relay.Constant][21] /* ty=Tensor[(616, 2), int64] */, dtype="int64") /* ty=Tensor[(616, 2), int64] */;
  %196 = reshape(%193, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
  %197 = reshape(%194, newshape=[3, 13, 13]) /* ty=Tensor[(3, 13, 13), float32] */;
  %198 = reshape(%195, newshape=[4, 308]) /* ty=Tensor[(4, 308), int64] */;
  %199 = @func_3834(%196, %197, %198) /* ty=(Tensor[(3, 13, 13), float32], Tensor[(16, 11, 7), bool], Tensor[(4, 308), int64], Tensor[(1296), float64]) */;
  %200 = cast(%var_20324, dtype="float32") /* ty=Tensor[(1, 1050), float32] */;
  %201 = reshape(%200, newshape=[14, 15, 5]) /* ty=Tensor[(14, 15, 5), float32] */;
  %202 = cast(%var_20311, dtype="float32") /* ty=Tensor[(14, 14, 1), float32] */;
  %203 = asinh(%202) /* ty=Tensor[(14, 14, 1), float32] */;
  %204 = cast(%203, dtype="float32") /* ty=Tensor[(14, 14, 1), float32] */;
  %205 = cast(%var_20324, dtype="float32") /* ty=Tensor[(1, 1050), float32] */;
  %206 = %199.1;
  %207 = @func_13324(%201) /* ty=Tensor[(14, 15, 5), float32] */;
  %208 = divide(%204, %205) /* ty=Tensor[(14, 14, 1050), float32] */;
  (%206, meta[relay.Constant][20] /* ty=Tensor[(13, 39), float32] */, meta[relay.Constant][21] /* ty=Tensor[(616, 2), int64] */, %207, %208)
}

def @func_7100(%var_7098: Tensor[(8, 2, 6), float32], %var_7099: float32) -> (Tensor[(1296), int32], float32, Tensor[(8, 2, 6), bool]) {
  %220 = fn (%var_7059: Tensor[(8, 2, 6), float32], %var_7079: float32) -> (Tensor[(1296), int32], float32, Tensor[(8, 2, 6), bool]) {
    %209 = cast(%var_7079, dtype="float32") /* ty=float32 */;
    %210 = reshape(%209, newshape=[]) /* ty=float32 */;
    %211 = @func_1892(%210) /* ty=(Tensor[(13, 1, 9), float32], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600), float32], Tensor[(480, 600), int64]) */;
    %212 = cast(%var_7059, dtype="float32") /* ty=Tensor[(8, 2, 6), float32] */;
    %213 = sqrt(%212) /* ty=Tensor[(8, 2, 6), float32] */;
    %214 = cast(%var_7059, dtype="bool") /* ty=Tensor[(8, 2, 6), bool] */;
    %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
    %216 = cast(%213, dtype="bool") /* ty=Tensor[(8, 2, 6), bool] */;
    %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %218 = %211.2;
    %219 = equal(%216, %217) /* ty=Tensor[(8, 2, 6), bool] */;
    (%218, %var_7079, %219)
  };
  %220(%var_7098, %var_7099) /* ty=(Tensor[(1296), int32], float32, Tensor[(8, 2, 6), bool]) */
}

def @func_5697(%var_5642: Tensor[(5, 13, 5), uint8], %var_5643: Tensor[(5, 13, 5), uint8], %var_5669: Tensor[(594), float64], %var_5683: Tensor[(5, 13, 5), float32], %var_5689: Tensor[(5, 13, 5), bool]) -> (Tensor[(6, 11, 9), float64], Tensor[(594), float64], Tensor[(1232), bool], Tensor[(5, 13, 5), bool]) {
  %221 = cast(%var_5669, dtype="float64") /* ty=Tensor[(594), float64] */;
  %222 = cast(meta[relay.Constant][22] /* ty=Tensor[(1232), bool] */, dtype="bool") /* ty=Tensor[(1232), bool] */;
  %223 = reshape(%221, newshape=[6, 11, 9]) /* ty=Tensor[(6, 11, 9), float64] */;
  %224 = reshape(%222, newshape=[16, 11, 7]) /* ty=Tensor[(16, 11, 7), bool] */;
  %225 = @func_4264(%223, %224) /* ty=(Tensor[(6, 11, 9), float64], Tensor[(10, 5, 12), float32], Tensor[(480), bool], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(60, 10), float32], Tensor[(10, 5, 12), float32], Tensor[(1232), int64], Tensor[(16, 11, 7), int16], Tensor[(6, 15, 7), uint64], Tensor[(630), uint64], Tensor[(7, 6), uint64], Tensor[(10, 5, 12), float32]) */;
  %226 = cast(%var_5643, dtype="uint8") /* ty=Tensor[(5, 13, 5), uint8] */;
  %227 = shape_of(%var_5642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%var_5642, dtype="uint8") /* ty=Tensor[(5, 13, 5), uint8] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %230 = left_shift(%228, %229) /* ty=Tensor[(5, 13, 5), uint8] */;
  %231 = cast(%230, dtype="float32") /* ty=Tensor[(5, 13, 5), float32] */;
  %232 = erf(%231) /* ty=Tensor[(5, 13, 5), float32] */;
  %233 = cast(%var_5683, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %237 = greater(%235, %236) /* ty=Tensor[(5, 13, 5), bool] */;
  %238 = cast(%var_5689, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%237, dtype="bool") /* ty=Tensor[(5, 13, 5), bool] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %242 = %225.0;
  %243 = greater_equal(%240, %241) /* ty=Tensor[(5, 13, 5), bool] */;
  (%242, %var_5669, meta[relay.Constant][22] /* ty=Tensor[(1232), bool] */, %243)
}

def @func_18060(%var_18057: Tensor[(3, 11, 6), bool], %var_18058: Tensor[(3, 11, 6), bool], %var_18059: Tensor[(210), uint8]) -> (Tensor[(3, 11, 6), bool], Tensor[(3, 11, 6), float32], Tensor[(4, 308), int64], Tensor[(210), uint8], Tensor[(1232), int64]) {
  %257 = fn (%var_18022: Tensor[(3, 11, 6), bool], %var_18023: Tensor[(3, 11, 6), bool], %var_18041: Tensor[(210), uint8]) -> (Tensor[(3, 11, 6), bool], Tensor[(3, 11, 6), float32], Tensor[(4, 308), int64], Tensor[(210), uint8], Tensor[(1232), int64]) {
    %244 = cast(%var_18023, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
    %245 = shape_of(%var_18022, dtype="int32") /* ty=Tensor[(3), int32] */;
    %246 = cast(%var_18022, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
    %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %248 = cast(%var_18023, dtype="float32") /* ty=Tensor[(3, 11, 6), float32] */;
    %249 = cast(%var_18041, dtype="uint8") /* ty=Tensor[(210), uint8] */;
    %250 = cast(meta[relay.Constant][23] /* ty=Tensor[(1232), int64] */, dtype="int64") /* ty=Tensor[(1232), int64] */;
    %251 = reshape(%249, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint8] */;
    %252 = reshape(%250, newshape=[1232]) /* ty=Tensor[(1232), int64] */;
    %253 = @func_11924(%251, %252) /* ty=(Tensor[(4, 308), int64], Tensor[(507), float32], Tensor[(1232), int64], Tensor[(3, 14, 5), int8]) */;
    %254 = logical_and(%246, %247) /* ty=Tensor[(3, 11, 6), bool] */;
    %255 = sinh(%248) /* ty=Tensor[(3, 11, 6), float32] */;
    %256 = %253.0;
    (%254, %255, %256, %var_18041, meta[relay.Constant][23] /* ty=Tensor[(1232), int64] */)
  };
  %257(%var_18057, %var_18058, %var_18059) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(3, 11, 6), float32], Tensor[(4, 308), int64], Tensor[(210), uint8], Tensor[(1232), int64]) */
}

def @func_13157(%var_13154: Tensor[(2, 13, 14), uint64], %var_13155: Tensor[(2, 13, 14), uint64], %var_13156: Tensor[(576), float64]) -> (Tensor[(2, 13, 14), uint64], Tensor[(576), float64], Tensor[(72), float64], Tensor[(576), float64]) {
  @func_13152(%var_13154, %var_13155, %var_13156) /* ty=(Tensor[(2, 13, 14), uint64], Tensor[(576), float64], Tensor[(72), float64], Tensor[(576), float64]) */
}

def @func_8950(%var_8948: Tensor[(16, 2, 1), float32]) -> (Tensor[(16, 2, 1), float32],) {
  @func_8947(%var_8948) /* ty=(Tensor[(16, 2, 1), float32],) */
}

def @func_9332(%var_9330: Tensor[(10, 6, 14), float64], %var_9331: Tensor[(1296), int32]) -> (Tensor[(10, 6, 14), float64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(2, 300), float32]) {
  %268 = fn (%var_9313: Tensor[(10, 6, 14), float64], %var_9326: Tensor[(1296), int32]) -> (Tensor[(10, 6, 14), float64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(2, 300), float32]) {
    %258 = cast(%var_9313, dtype="float64") /* ty=Tensor[(10, 6, 14), float64] */;
    %259 = cast(10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %260 = cast(%var_9326, dtype="int32") /* ty=Tensor[(1296), int32] */;
    %261 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 300), float32] */, dtype="float32") /* ty=Tensor[(2, 300), float32] */;
    %262 = reshape(%259, newshape=[]) /* ty=int32 */;
    %263 = reshape(%260, newshape=[12, 12, 9]) /* ty=Tensor[(12, 12, 9), int32] */;
    %264 = reshape(%261, newshape=[600]) /* ty=Tensor[(600), float32] */;
    %265 = @func_1132(%262, %263, %264) /* ty=(Tensor[(10, 5, 12), float32], Tensor[(600), float32], Tensor[(12, 12, 9), bool], Tensor[(10, 5, 12), float32]) */;
    %266 = sqrt(%258) /* ty=Tensor[(10, 6, 14), float64] */;
    %267 = %265.1;
    (%266, %267, 10 /* ty=int32 */, %var_9326, meta[relay.Constant][24] /* ty=Tensor[(2, 300), float32] */)
  };
  %268(%var_9330, %var_9331) /* ty=(Tensor[(10, 6, 14), float64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(2, 300), float32]) */
}

def @func_18142(%var_18139: Tensor[(14, 11, 14), float32], %var_18140: uint16, %var_18141: Tensor[(14, 11, 14), float32]) -> (Tensor[(10, 8, 1), uint16], uint16, Tensor[(80, 1), uint16], Tensor[(14, 11, 14), float64], Tensor[(10, 8, 1), uint16]) {
  @func_18137(%var_18139, %var_18140, %var_18141) /* ty=(Tensor[(10, 8, 1), uint16], uint16, Tensor[(80, 1), uint16], Tensor[(14, 11, 14), float64], Tensor[(10, 8, 1), uint16]) */
}

def @func_18781(%var_18779: Tensor[(13, 3, 4), float32], %var_18780: Tensor[(210), uint8]) -> (Tensor[(13, 3, 4), float32], Tensor[(3, 14, 5), int8], Tensor[(210), uint8], Tensor[(616, 2), int64]) {
  %277 = fn (%var_18762: Tensor[(13, 3, 4), float32], %var_18772: Tensor[(210), uint8]) -> (Tensor[(13, 3, 4), float32], Tensor[(3, 14, 5), int8], Tensor[(210), uint8], Tensor[(616, 2), int64]) {
    %269 = cast(%var_18762, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
    %270 = cast(%var_18772, dtype="uint8") /* ty=Tensor[(210), uint8] */;
    %271 = cast(meta[relay.Constant][25] /* ty=Tensor[(616, 2), int64] */, dtype="int64") /* ty=Tensor[(616, 2), int64] */;
    %272 = reshape(%270, newshape=[3, 14, 5]) /* ty=Tensor[(3, 14, 5), uint8] */;
    %273 = reshape(%271, newshape=[1232]) /* ty=Tensor[(1232), int64] */;
    %274 = @func_11924(%272, %273) /* ty=(Tensor[(4, 308), int64], Tensor[(507), float32], Tensor[(1232), int64], Tensor[(3, 14, 5), int8]) */;
    %275 = erf(%269) /* ty=Tensor[(13, 3, 4), float32] */;
    %276 = %274.3;
    (%275, %276, %var_18772, meta[relay.Constant][25] /* ty=Tensor[(616, 2), int64] */)
  };
  %277(%var_18779, %var_18780) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(3, 14, 5), int8], Tensor[(210), uint8], Tensor[(616, 2), int64]) */
}

def @func_12105(%var_12103: Tensor[(15, 15, 8), float64]) -> (Tensor[(15, 15, 8), float64],) {
  @func_12102(%var_12103) /* ty=(Tensor[(15, 15, 8), float64],) */
}

def @func_6781(%var_6777: Tensor[(5, 11, 6), uint16], %var_6778: Tensor[(5, 11, 6), uint16], %var_6779: Tensor[(2100), float64], %var_6780: Tensor[(325), uint8]) -> (Tensor[(5, 11, 6), bool], Tensor[(15, 10, 14), float64], Tensor[(2100), float64], Tensor[(594), float64], Tensor[(325), uint8], Tensor[(594), float64]) {
  %298 = fn (%var_6759: Tensor[(5, 11, 6), uint16], %var_6760: Tensor[(5, 11, 6), uint16], %var_6765: Tensor[(2100), float64], %var_6769: Tensor[(325), uint8]) -> (Tensor[(5, 11, 6), bool], Tensor[(15, 10, 14), float64], Tensor[(2100), float64], Tensor[(594), float64], Tensor[(325), uint8], Tensor[(594), float64]) {
    %278 = cast(%var_6760, dtype="bool") /* ty=Tensor[(5, 11, 6), bool] */;
    %279 = shape_of(%var_6759, dtype="int32") /* ty=Tensor[(3), int32] */;
    %280 = cast(%var_6759, dtype="bool") /* ty=Tensor[(5, 11, 6), bool] */;
    %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %282 = cast(%var_6765, dtype="float64") /* ty=Tensor[(2100), float64] */;
    %283 = reshape(%282, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float64] */;
    %284 = cast(%var_6769, dtype="uint8") /* ty=Tensor[(325), uint8] */;
    %285 = cast(%var_6769, dtype="uint8") /* ty=Tensor[(325), uint8] */;
    %286 = cast(meta[relay.Constant][26] /* ty=Tensor[(594), float64] */, dtype="float64") /* ty=Tensor[(594), float64] */;
    %287 = cast(%var_6769, dtype="float32") /* ty=Tensor[(325), float32] */;
    %288 = cast(%var_6769, dtype="bool") /* ty=Tensor[(325), bool] */;
    %289 = reshape(%284, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
    %290 = reshape(%285, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
    %291 = reshape(%286, newshape=[594]) /* ty=Tensor[(594), float64] */;
    %292 = reshape(%287, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), float32] */;
    %293 = reshape(%288, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), bool] */;
    %294 = @func_5697(%289, %290, %291, %292, %293) /* ty=(Tensor[(6, 11, 9), float64], Tensor[(594), float64], Tensor[(1232), bool], Tensor[(5, 13, 5), bool]) */;
    %295 = less_equal(%280, %281) /* ty=Tensor[(5, 11, 6), bool] */;
    %296 = @func_4816(%283) /* ty=Tensor[(15, 10, 14), float64] */;
    %297 = %294.1;
    (%295, %296, %var_6765, %297, %var_6769, meta[relay.Constant][26] /* ty=Tensor[(594), float64] */)
  };
  %298(%var_6777, %var_6778, %var_6779, %var_6780) /* ty=(Tensor[(5, 11, 6), bool], Tensor[(15, 10, 14), float64], Tensor[(2100), float64], Tensor[(594), float64], Tensor[(325), uint8], Tensor[(594), float64]) */
}

def @func_12610(%var_12609: Tensor[(3, 1, 7), uint64]) -> (Tensor[(3, 1, 7), uint64], Tensor[(15, 10, 14), float64], Tensor[(330), uint16], Tensor[(2100), float64], Tensor[(325), uint8], Tensor[(1296), int32]) {
  %316 = fn (%var_12584: Tensor[(3, 1, 7), uint64]) -> (Tensor[(3, 1, 7), uint64], Tensor[(15, 10, 14), float64], Tensor[(330), uint16], Tensor[(2100), float64], Tensor[(325), uint8], Tensor[(1296), int32]) {
    %299 = cast(meta[relay.Constant][27] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %300 = cast(%var_12584, dtype="uint64") /* ty=Tensor[(3, 1, 7), uint64] */;
    %301 = cast(meta[relay.Constant][28] /* ty=Tensor[(330), uint16] */, dtype="uint16") /* ty=Tensor[(330), uint16] */;
    %302 = cast(meta[relay.Constant][28] /* ty=Tensor[(330), uint16] */, dtype="uint16") /* ty=Tensor[(330), uint16] */;
    %303 = cast(meta[relay.Constant][29] /* ty=Tensor[(2100), float64] */, dtype="float64") /* ty=Tensor[(2100), float64] */;
    %304 = cast(meta[relay.Constant][30] /* ty=Tensor[(325), uint8] */, dtype="uint8") /* ty=Tensor[(325), uint8] */;
    %305 = reshape(%301, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), uint16] */;
    %306 = reshape(%302, newshape=[5, 11, 6]) /* ty=Tensor[(5, 11, 6), uint16] */;
    %307 = reshape(%303, newshape=[2100]) /* ty=Tensor[(2100), float64] */;
    %308 = reshape(%304, newshape=[325]) /* ty=Tensor[(325), uint8] */;
    %309 = @func_6776(%305, %306, %307, %308) /* ty=(Tensor[(5, 11, 6), bool], Tensor[(15, 10, 14), float64], Tensor[(2100), float64], Tensor[(594), float64], Tensor[(325), uint8], Tensor[(594), float64]) */;
    %310 = cast(meta[relay.Constant][27] /* ty=uint64 */, dtype="float32") /* ty=float32 */;
    %311 = reshape(%310, newshape=[]) /* ty=float32 */;
    %312 = @func_1892(%311) /* ty=(Tensor[(13, 1, 9), float32], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600), float32], Tensor[(480, 600), int64]) */;
    %313 = bitwise_or(%299, %300) /* ty=Tensor[(3, 1, 7), uint64] */;
    %314 = %309.1;
    %315 = %312.2;
    (%313, %314, meta[relay.Constant][28] /* ty=Tensor[(330), uint16] */, meta[relay.Constant][29] /* ty=Tensor[(2100), float64] */, meta[relay.Constant][30] /* ty=Tensor[(325), uint8] */, %315)
  };
  %316(%var_12609) /* ty=(Tensor[(3, 1, 7), uint64], Tensor[(15, 10, 14), float64], Tensor[(330), uint16], Tensor[(2100), float64], Tensor[(325), uint8], Tensor[(1296), int32]) */
}

def @func_3903(%var_3901: uint16, %var_3902: Tensor[(10, 8, 1), uint16]) -> (Tensor[(10, 8, 1), uint16],) {
  @func_3899(%var_3901, %var_3902) /* ty=(Tensor[(10, 8, 1), uint16],) */
}

def @func_21370(%var_21334: Tensor[(7, 8, 12), float64]) -> (Tensor[(7, 8, 12), float64],) {
  %317 = cast(%var_21334, dtype="float64") /* ty=Tensor[(7, 8, 12), float64] */;
  %318 = erf(%317) /* ty=Tensor[(7, 8, 12), float64] */;
  (%318,)
}

def @func_4264(%var_4193: Tensor[(6, 11, 9), float64], %var_4242: Tensor[(16, 11, 7), bool]) -> (Tensor[(6, 11, 9), float64], Tensor[(10, 5, 12), float32], Tensor[(480), bool], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(60, 10), float32], Tensor[(10, 5, 12), float32], Tensor[(1232), int64], Tensor[(16, 11, 7), int16], Tensor[(6, 15, 7), uint64], Tensor[(630), uint64], Tensor[(7, 6), uint64], Tensor[(10, 5, 12), float32]) {
  %319 = cast(%var_4193, dtype="float64") /* ty=Tensor[(6, 11, 9), float64] */;
  %320 = cast(meta[relay.Constant][31] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %321 = cast(meta[relay.Constant][32] /* ty=Tensor[(42), uint64] */, dtype="uint64") /* ty=Tensor[(42), uint64] */;
  %322 = cast(meta[relay.Constant][33] /* ty=Tensor[(1296), int32] */, dtype="int32") /* ty=Tensor[(1296), int32] */;
  %323 = cast(meta[relay.Constant][34] /* ty=Tensor[(60, 10), float32] */, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
  %324 = cast(meta[relay.Constant][31] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %325 = reshape(%320, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %326 = reshape(%321, newshape=[7, 6]) /* ty=Tensor[(7, 6), uint64] */;
  %327 = reshape(%322, newshape=[1296]) /* ty=Tensor[(1296), int32] */;
  %328 = reshape(%323, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %329 = reshape(%324, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %330 = @func_1370(%325, %326, %327, %328, %329) /* ty=(Tensor[(6, 15, 7), uint64], Tensor[(7, 6), uint64], Tensor[(210, 3), uint64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(600), float32], Tensor[(6, 15, 7), uint64], Tensor[(15, 2, 16), bool], Tensor[(10, 5, 12), float32]) */;
  %331 = cast(meta[relay.Constant][34] /* ty=Tensor[(60, 10), float32] */, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
  %332 = reshape(%331, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
  %333 = @func_1049(%332) /* ty=(Tensor[(10, 5, 12), float32],) */;
  %334 = cast(meta[relay.Constant][35] /* ty=Tensor[(1232), int64] */, dtype="int64") /* ty=Tensor[(1232), int64] */;
  %335 = cast(meta[relay.Constant][35] /* ty=Tensor[(1232), int64] */, dtype="int64") /* ty=Tensor[(1232), int64] */;
  %336 = reshape(%334, newshape=[16, 11, 7]) /* ty=Tensor[(16, 11, 7), int64] */;
  %337 = reshape(%335, newshape=[16, 11, 7]) /* ty=Tensor[(16, 11, 7), int64] */;
  %338 = @func_1780(%336, %337) /* ty=Tensor[(16, 11, 7), bool] */;
  %339 = cast(%var_4242, dtype="int16") /* ty=Tensor[(16, 11, 7), int16] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="int16") /* ty=Tensor[(16, 11, 7), int16] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %343 = cast(meta[relay.Constant][32] /* ty=Tensor[(42), uint64] */, dtype="uint64") /* ty=Tensor[(42), uint64] */;
  %344 = cast(meta[relay.Constant][36] /* ty=Tensor[(630), uint64] */, dtype="uint64") /* ty=Tensor[(630), uint64] */;
  %345 = reshape(%343, newshape=[6, 1, 7]) /* ty=Tensor[(6, 1, 7), uint64] */;
  %346 = reshape(%344, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), uint64] */;
  %347 = @func_1280(%345, %346) /* ty=(Tensor[(6, 15, 7), uint64],) */;
  %348 = cast(meta[relay.Constant][31] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %349 = cast(meta[relay.Constant][32] /* ty=Tensor[(42), uint64] */, dtype="uint64") /* ty=Tensor[(42), uint64] */;
  %350 = cast(meta[relay.Constant][33] /* ty=Tensor[(1296), int32] */, dtype="int32") /* ty=Tensor[(1296), int32] */;
  %351 = %333.0;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(10, 5, 12), float32] */;
  %353 = cast(meta[relay.Constant][31] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %354 = reshape(%348, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %355 = reshape(%349, newshape=[7, 6]) /* ty=Tensor[(7, 6), uint64] */;
  %356 = reshape(%350, newshape=[1296]) /* ty=Tensor[(1296), int32] */;
  %357 = reshape(%352, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %358 = reshape(%353, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %359 = @func_1370(%354, %355, %356, %357, %358) /* ty=(Tensor[(6, 15, 7), uint64], Tensor[(7, 6), uint64], Tensor[(210, 3), uint64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(600), float32], Tensor[(6, 15, 7), uint64], Tensor[(15, 2, 16), bool], Tensor[(10, 5, 12), float32]) */;
  %360 = %330.9;
  %361 = cast(%360, dtype="float32") /* ty=Tensor[(10, 5, 12), float32] */;
  %362 = reshape(%361, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
  %363 = @func_1049(%362) /* ty=(Tensor[(10, 5, 12), float32],) */;
  %364 = rsqrt(%319) /* ty=Tensor[(6, 11, 9), float64] */;
  %365 = multiply(%341, %342) /* ty=Tensor[(16, 11, 7), int16] */;
  %366 = %347.0;
  %367 = %359.1;
  %368 = %363.0;
  (%364, %360, meta[relay.Constant][31] /* ty=Tensor[(480), bool] */, meta[relay.Constant][32] /* ty=Tensor[(42), uint64] */, meta[relay.Constant][33] /* ty=Tensor[(1296), int32] */, meta[relay.Constant][34] /* ty=Tensor[(60, 10), float32] */, %351, meta[relay.Constant][35] /* ty=Tensor[(1232), int64] */, %365, %366, meta[relay.Constant][36] /* ty=Tensor[(630), uint64] */, %367, %368)
}

def @func_9533(%var_9523: Tensor[(225), int64], %var_9530: Tensor[(12, 48), float64], %var_9531: Tensor[(1232), int64]) -> (Tensor[(2, 8, 13), float32], Tensor[(5, 3, 15), bool], Tensor[(45), int64], Tensor[(225), int64], Tensor[(507), float32], Tensor[(12, 48), float64], Tensor[(1232), int64]) {
  %369 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 8, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 8, 13), float32] */;
  %370 = cast(meta[relay.Constant][38] /* ty=Tensor[(45), int64] */, dtype="int64") /* ty=Tensor[(45), int64] */;
  %371 = cast(%var_9523, dtype="int64") /* ty=Tensor[(225), int64] */;
  %372 = reshape(%370, newshape=[1, 3, 15]) /* ty=Tensor[(1, 3, 15), int64] */;
  %373 = reshape(%371, newshape=[5, 3, 15]) /* ty=Tensor[(5, 3, 15), int64] */;
  %374 = cast(%var_9530, dtype="float64") /* ty=Tensor[(12, 48), float64] */;
  %375 = cast(%var_9531, dtype="int64") /* ty=Tensor[(1232), int64] */;
  %376 = reshape(%374, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float64] */;
  %377 = reshape(%375, newshape=[1232]) /* ty=Tensor[(1232), int64] */;
  %378 = @func_8432(%376, %377) /* ty=(Tensor[(4, 9, 16), float64], Tensor[(16, 11, 7), bool], Tensor[(507), float32], Tensor[(1232), int64]) */;
  %379 = asinh(%369) /* ty=Tensor[(2, 8, 13), float32] */;
  %380 = @func_5835(%372, %373) /* ty=Tensor[(5, 3, 15), bool] */;
  %381 = %378.2;
  (%379, %380, meta[relay.Constant][38] /* ty=Tensor[(45), int64] */, %var_9523, %381, %var_9530, %var_9531)
}

def @func_19024(%var_19023: Tensor[(8, 4, 14), int64]) -> (Tensor[(8, 4, 14), bool], Tensor[(1296), int32], Tensor[(2, 48), float32], float32) {
  %393 = fn (%var_19013: Tensor[(8, 4, 14), int64]) -> (Tensor[(8, 4, 14), bool], Tensor[(1296), int32], Tensor[(2, 48), float32], float32) {
    %382 = cast(%var_19013, dtype="bool") /* ty=Tensor[(8, 4, 14), bool] */;
    %383 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(8, 4, 14), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %384 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 4, 14), int64] */, dtype="bool") /* ty=Tensor[(8, 4, 14), bool] */;
    %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %386 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 48), float32] */, dtype="float32") /* ty=Tensor[(2, 48), float32] */;
    %387 = cast(-0.872531f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %388 = reshape(%386, newshape=[8, 2, 6]) /* ty=Tensor[(8, 2, 6), float32] */;
    %389 = reshape(%387, newshape=[]) /* ty=float32 */;
    %390 = @func_7097(%388, %389) /* ty=(Tensor[(1296), int32], float32, Tensor[(8, 2, 6), bool]) */;
    %391 = less_equal(%384, %385) /* ty=Tensor[(8, 4, 14), bool] */;
    %392 = %390.0;
    (%391, %392, meta[relay.Constant][40] /* ty=Tensor[(2, 48), float32] */, -0.872531f /* ty=float32 */)
  };
  %393(%var_19023) /* ty=(Tensor[(8, 4, 14), bool], Tensor[(1296), int32], Tensor[(2, 48), float32], float32) */
}

def @func_6336(%var_6319: Tensor[(10, 3, 2), float64]) -> (Tensor[(10, 3, 2), float64],) {
  %394 = cast(%var_6319, dtype="float64") /* ty=Tensor[(10, 3, 2), float64] */;
  %395 = cos(%394) /* ty=Tensor[(10, 3, 2), float64] */;
  (%395,)
}

def @func_13971(%var_13957: Tensor[(10, 7, 7), int32], %var_13958: Tensor[(10, 7, 7), int32]) -> Tensor[(10, 7, 7), bool] {
  %396 = cast(%var_13958, dtype="bool") /* ty=Tensor[(10, 7, 7), bool] */;
  %397 = shape_of(%var_13957, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%var_13957, dtype="bool") /* ty=Tensor[(10, 7, 7), bool] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%398, %399) /* ty=Tensor[(10, 7, 7), bool] */
}

def @func_21481(%var_21480: Tensor[(8, 3, 8), float32]) -> Tensor[(8, 3, 8), float32] {
  %401 = fn (%var_21474: Tensor[(8, 3, 8), float32]) -> Tensor[(8, 3, 8), float32] {
    %400 = cast(%var_21474, dtype="float32") /* ty=Tensor[(8, 3, 8), float32] */;
    sqrt(%400) /* ty=Tensor[(8, 3, 8), float32] */
  };
  %401(%var_21480) /* ty=Tensor[(8, 3, 8), float32] */
}

def @func_7840(%var_7838: Tensor[(9, 8, 6), int16]) -> Tensor[(9, 8, 6), int16] {
  @func_7837(%var_7838) /* ty=Tensor[(9, 8, 6), int16] */
}

def @func_7678(%var_7672: Tensor[(3, 8, 6), float64], %var_7673: Tensor[(3, 8, 6), float64], %var_7674: Tensor[(325), uint8], %var_7675: Tensor[(594), float64], %var_7676: Tensor[(90), float64], %var_7677: float32) -> (Tensor[(3, 8, 6), bool], Tensor[(5, 13, 5), bool], Tensor[(325), uint8], Tensor[(594), float64], Tensor[(15, 1, 6), float64], Tensor[(90), float64], Tensor[(42), uint64], float32) {
  @func_7670(%var_7672, %var_7673, %var_7674, %var_7675, %var_7676, %var_7677) /* ty=(Tensor[(3, 8, 6), bool], Tensor[(5, 13, 5), bool], Tensor[(325), uint8], Tensor[(594), float64], Tensor[(15, 1, 6), float64], Tensor[(90), float64], Tensor[(42), uint64], float32) */
}

def @func_1376(%var_1371: Tensor[(15, 2, 16), bool], %var_1372: Tensor[(7, 6), uint64], %var_1373: Tensor[(1296), int32], %var_1374: Tensor[(600), float32], %var_1375: Tensor[(15, 2, 16), bool]) -> (Tensor[(6, 15, 7), uint64], Tensor[(7, 6), uint64], Tensor[(210, 3), uint64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(600), float32], Tensor[(6, 15, 7), uint64], Tensor[(15, 2, 16), bool], Tensor[(10, 5, 12), float32]) {
  %436 = fn (%var_1315: Tensor[(15, 2, 16), bool], %var_1328: Tensor[(7, 6), uint64], %var_1335: Tensor[(1296), int32], %var_1336: Tensor[(600), float32], %var_1362: Tensor[(15, 2, 16), bool]) -> (Tensor[(6, 15, 7), uint64], Tensor[(7, 6), uint64], Tensor[(210, 3), uint64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(600), float32], Tensor[(6, 15, 7), uint64], Tensor[(15, 2, 16), bool], Tensor[(10, 5, 12), float32]) {
    %402 = cast(%var_1328, dtype="uint64") /* ty=Tensor[(7, 6), uint64] */;
    %403 = cast(meta[relay.Constant][41] /* ty=Tensor[(210, 3), uint64] */, dtype="uint64") /* ty=Tensor[(210, 3), uint64] */;
    %404 = reshape(%402, newshape=[6, 1, 7]) /* ty=Tensor[(6, 1, 7), uint64] */;
    %405 = reshape(%403, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), uint64] */;
    %406 = @func_1280(%404, %405) /* ty=(Tensor[(6, 15, 7), uint64],) */;
    %407 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %408 = cast(%var_1335, dtype="int32") /* ty=Tensor[(1296), int32] */;
    %409 = cast(%var_1336, dtype="float32") /* ty=Tensor[(600), float32] */;
    %410 = reshape(%407, newshape=[]) /* ty=int32 */;
    %411 = reshape(%408, newshape=[12, 12, 9]) /* ty=Tensor[(12, 12, 9), int32] */;
    %412 = reshape(%409, newshape=[600]) /* ty=Tensor[(600), float32] */;
    %413 = @func_1132(%410, %411, %412) /* ty=(Tensor[(10, 5, 12), float32], Tensor[(600), float32], Tensor[(12, 12, 9), bool], Tensor[(10, 5, 12), float32]) */;
    %414 = cast(%var_1328, dtype="uint64") /* ty=Tensor[(7, 6), uint64] */;
    %415 = cast(meta[relay.Constant][41] /* ty=Tensor[(210, 3), uint64] */, dtype="uint64") /* ty=Tensor[(210, 3), uint64] */;
    %416 = reshape(%414, newshape=[6, 1, 7]) /* ty=Tensor[(6, 1, 7), uint64] */;
    %417 = reshape(%415, newshape=[6, 15, 7]) /* ty=Tensor[(6, 15, 7), uint64] */;
    %418 = @func_1280(%416, %417) /* ty=(Tensor[(6, 15, 7), uint64],) */;
    %419 = cast(%var_1315, dtype="bool") /* ty=Tensor[(15, 2, 16), bool] */;
    %420 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(15, 2, 16), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %421 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 2, 16), bool] */, dtype="bool") /* ty=Tensor[(15, 2, 16), bool] */;
    %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %423 = logical_or(%421, %422) /* ty=Tensor[(15, 2, 16), bool] */;
    %424 = cast(%var_1362, dtype="bool") /* ty=Tensor[(15, 2, 16), bool] */;
    %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
    %426 = cast(%423, dtype="bool") /* ty=Tensor[(15, 2, 16), bool] */;
    %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %428 = cast(%var_1336, dtype="float32") /* ty=Tensor[(600), float32] */;
    %429 = reshape(%428, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
    %430 = @func_1049(%429) /* ty=(Tensor[(10, 5, 12), float32],) */;
    %431 = %406.0;
    %432 = %413.1;
    %433 = %418.0;
    %434 = less(%426, %427) /* ty=Tensor[(15, 2, 16), bool] */;
    %435 = %430.0;
    (%431, %var_1328, meta[relay.Constant][41] /* ty=Tensor[(210, 3), uint64] */, %432, 2 /* ty=int32 */, %var_1335, %var_1336, %433, %434, %435)
  };
  %436(%var_1371, %var_1372, %var_1373, %var_1374, %var_1375) /* ty=(Tensor[(6, 15, 7), uint64], Tensor[(7, 6), uint64], Tensor[(210, 3), uint64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(600), float32], Tensor[(6, 15, 7), uint64], Tensor[(15, 2, 16), bool], Tensor[(10, 5, 12), float32]) */
}

def @func_13152(%var_13132: Tensor[(2, 13, 14), uint64], %var_13133: Tensor[(2, 13, 14), uint64], %var_13150: Tensor[(576), float64]) -> (Tensor[(2, 13, 14), uint64], Tensor[(576), float64], Tensor[(72), float64], Tensor[(576), float64]) {
  %437 = cast(%var_13133, dtype="uint64") /* ty=Tensor[(2, 13, 14), uint64] */;
  %438 = shape_of(%var_13132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%var_13132, dtype="uint64") /* ty=Tensor[(2, 13, 14), uint64] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %441 = cast(meta[relay.Constant][43] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %442 = cast(%var_13150, dtype="float64") /* ty=Tensor[(576), float64] */;
  %443 = reshape(%441, newshape=[8, 9, 1]) /* ty=Tensor[(8, 9, 1), float64] */;
  %444 = reshape(%442, newshape=[576]) /* ty=Tensor[(576), float64] */;
  %445 = @func_11386(%443, %444) /* ty=(Tensor[(8, 9, 1), float64], Tensor[(225), int64], Tensor[(225), int64], Tensor[(576), float64], Tensor[(616, 2), int64]) */;
  %446 = subtract(%439, %440) /* ty=Tensor[(2, 13, 14), uint64] */;
  %447 = %445.3;
  (%446, %447, meta[relay.Constant][43] /* ty=Tensor[(72), float64] */, %var_13150)
}

def @func_21254(%var_21252: Tensor[(8, 7, 1), uint32], %var_21253: Tensor[(60), float64]) -> (Tensor[(8, 7, 1), uint32], Tensor[(10, 3, 2), float64], Tensor[(60), float64]) {
  %455 = fn (%var_21217: Tensor[(8, 7, 1), uint32], %var_21231: Tensor[(60), float64]) -> (Tensor[(8, 7, 1), uint32], Tensor[(10, 3, 2), float64], Tensor[(60), float64]) {
    %448 = cast(meta[relay.Constant][44] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %449 = cast(%var_21217, dtype="uint32") /* ty=Tensor[(8, 7, 1), uint32] */;
    %450 = cast(%var_21231, dtype="float64") /* ty=Tensor[(60), float64] */;
    %451 = reshape(%450, newshape=[10, 3, 2]) /* ty=Tensor[(10, 3, 2), float64] */;
    %452 = @func_6336(%451) /* ty=(Tensor[(10, 3, 2), float64],) */;
    %453 = add(%448, %449) /* ty=Tensor[(8, 7, 1), uint32] */;
    %454 = %452.0;
    (%453, %454, %var_21231)
  };
  %455(%var_21252, %var_21253) /* ty=(Tensor[(8, 7, 1), uint32], Tensor[(10, 3, 2), float64], Tensor[(60), float64]) */
}

def @func_13326(%var_13325: Tensor[(14, 15, 5), float32]) -> Tensor[(14, 15, 5), float32] {
  %457 = fn (%var_13315: Tensor[(14, 15, 5), float32]) -> Tensor[(14, 15, 5), float32] {
    %456 = cast(%var_13315, dtype="float32") /* ty=Tensor[(14, 15, 5), float32] */;
    acos(%456) /* ty=Tensor[(14, 15, 5), float32] */
  };
  %457(%var_13325) /* ty=Tensor[(14, 15, 5), float32] */
}

def @func_9538(%var_9535: Tensor[(225), int64], %var_9536: Tensor[(12, 48), float64], %var_9537: Tensor[(1232), int64]) -> (Tensor[(2, 8, 13), float32], Tensor[(5, 3, 15), bool], Tensor[(45), int64], Tensor[(225), int64], Tensor[(507), float32], Tensor[(12, 48), float64], Tensor[(1232), int64]) {
  @func_9533(%var_9535, %var_9536, %var_9537) /* ty=(Tensor[(2, 8, 13), float32], Tensor[(5, 3, 15), bool], Tensor[(45), int64], Tensor[(225), int64], Tensor[(507), float32], Tensor[(12, 48), float64], Tensor[(1232), int64]) */
}

def @func_1137(%var_1134: int32, %var_1135: Tensor[(12, 12, 9), int32], %var_1136: Tensor[(600), float32]) -> (Tensor[(10, 5, 12), float32], Tensor[(600), float32], Tensor[(12, 12, 9), bool], Tensor[(10, 5, 12), float32]) {
  @func_1132(%var_1134, %var_1135, %var_1136) /* ty=(Tensor[(10, 5, 12), float32], Tensor[(600), float32], Tensor[(12, 12, 9), bool], Tensor[(10, 5, 12), float32]) */
}

def @func_1280(%var_1270: Tensor[(6, 1, 7), uint64], %var_1271: Tensor[(6, 15, 7), uint64]) -> (Tensor[(6, 15, 7), uint64],) {
  %458 = cast(%var_1270, dtype="uint64") /* ty=Tensor[(6, 1, 7), uint64] */;
  %459 = cast(%var_1271, dtype="uint64") /* ty=Tensor[(6, 15, 7), uint64] */;
  %460 = bitwise_or(%458, %459) /* ty=Tensor[(6, 15, 7), uint64] */;
  (%460,)
}

def @func_8225(%var_8170: int64, %var_8171: Tensor[(3, 9, 13), int64], %var_8216: Tensor[(726), uint8]) -> (Tensor[(3, 9, 13), bool], Tensor[(10, 5, 12), float32], Tensor[(600), float32], Tensor[(3, 15, 12), uint64], Tensor[(540), uint32], Tensor[(3, 9, 13), float32], Tensor[(3, 700), float64], Tensor[(726), uint8]) {
  %461 = cast(%var_8170, dtype="bool") /* ty=bool */;
  %462 = cast(%var_8171, dtype="bool") /* ty=Tensor[(3, 9, 13), bool] */;
  %463 = cast(meta[relay.Constant][45] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %464 = reshape(%463, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
  %465 = @func_1049(%464) /* ty=(Tensor[(10, 5, 12), float32],) */;
  %466 = cast(meta[relay.Constant][46] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %467 = cast(meta[relay.Constant][46] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %468 = reshape(%466, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), uint32] */;
  %469 = reshape(%467, newshape=[3, 15, 12]) /* ty=Tensor[(3, 15, 12), uint32] */;
  %470 = @func_5398(%468, %469) /* ty=(Tensor[(3, 15, 12), float64], Tensor[(3, 15, 12), uint64]) */;
  %471 = cast(%var_8171, dtype="float32") /* ty=Tensor[(3, 9, 13), float32] */;
  %472 = cast(%var_8216, dtype="uint8") /* ty=Tensor[(726), uint8] */;
  %473 = reshape(%472, newshape=[6, 11, 11]) /* ty=Tensor[(6, 11, 11), uint8] */;
  %474 = @func_6626(%473) /* ty=(Tensor[(6, 11, 11), uint8], Tensor[(15, 10, 14), float64], Tensor[(3, 700), float64], Tensor[(6, 11, 11), int8]) */;
  %475 = not_equal(%461, %462) /* ty=Tensor[(3, 9, 13), bool] */;
  %476 = %465.0;
  %477 = %470.1;
  %478 = acos(%471) /* ty=Tensor[(3, 9, 13), float32] */;
  %479 = %474.2;
  (%475, %476, meta[relay.Constant][45] /* ty=Tensor[(600), float32] */, %477, meta[relay.Constant][46] /* ty=Tensor[(540), uint32] */, %478, %479, %var_8216)
}

def @func_2947(%var_2927: Tensor[(10, 2, 11), uint32], %var_2936: Tensor[(120, 4), bool], %var_2937: Tensor[(42), uint64], %var_2939: Tensor[(600, 1), float32]) -> (Tensor[(10, 2, 11), uint32], Tensor[(210, 3), uint64], Tensor[(120, 4), bool], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600, 1), float32]) {
  %480 = cast(meta[relay.Constant][47] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %481 = cast(%var_2927, dtype="uint32") /* ty=Tensor[(10, 2, 11), uint32] */;
  %482 = cast(%var_2936, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %483 = cast(%var_2937, dtype="uint64") /* ty=Tensor[(42), uint64] */;
  %484 = cast(meta[relay.Constant][48] /* ty=Tensor[(1296), int32] */, dtype="int32") /* ty=Tensor[(1296), int32] */;
  %485 = cast(%var_2939, dtype="float32") /* ty=Tensor[(600, 1), float32] */;
  %486 = cast(%var_2936, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %487 = reshape(%482, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %488 = reshape(%483, newshape=[7, 6]) /* ty=Tensor[(7, 6), uint64] */;
  %489 = reshape(%484, newshape=[1296]) /* ty=Tensor[(1296), int32] */;
  %490 = reshape(%485, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %491 = reshape(%486, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), bool] */;
  %492 = @func_1370(%487, %488, %489, %490, %491) /* ty=(Tensor[(6, 15, 7), uint64], Tensor[(7, 6), uint64], Tensor[(210, 3), uint64], Tensor[(600), float32], int32, Tensor[(1296), int32], Tensor[(600), float32], Tensor[(6, 15, 7), uint64], Tensor[(15, 2, 16), bool], Tensor[(10, 5, 12), float32]) */;
  %493 = bitwise_or(%480, %481) /* ty=Tensor[(10, 2, 11), uint32] */;
  %494 = %492.2;
  (%493, %494, %var_2936, %var_2937, meta[relay.Constant][48] /* ty=Tensor[(1296), int32] */, %var_2939)
}

def @func_7670(%var_7626: Tensor[(3, 8, 6), float64], %var_7627: Tensor[(3, 8, 6), float64], %var_7639: Tensor[(325), uint8], %var_7640: Tensor[(594), float64], %var_7652: Tensor[(90), float64], %var_7664: float32) -> (Tensor[(3, 8, 6), bool], Tensor[(5, 13, 5), bool], Tensor[(325), uint8], Tensor[(594), float64], Tensor[(15, 1, 6), float64], Tensor[(90), float64], Tensor[(42), uint64], float32) {
  %495 = cast(%var_7627, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
  %496 = shape_of(%var_7626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%var_7626, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %499 = cast(%var_7639, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %500 = cast(%var_7639, dtype="uint8") /* ty=Tensor[(325), uint8] */;
  %501 = cast(%var_7640, dtype="float64") /* ty=Tensor[(594), float64] */;
  %502 = cast(%var_7639, dtype="float32") /* ty=Tensor[(325), float32] */;
  %503 = cast(%var_7639, dtype="bool") /* ty=Tensor[(325), bool] */;
  %504 = reshape(%499, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
  %505 = reshape(%500, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), uint8] */;
  %506 = reshape(%501, newshape=[594]) /* ty=Tensor[(594), float64] */;
  %507 = reshape(%502, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), float32] */;
  %508 = reshape(%503, newshape=[5, 13, 5]) /* ty=Tensor[(5, 13, 5), bool] */;
  %509 = @func_5697(%504, %505, %506, %507, %508) /* ty=(Tensor[(6, 11, 9), float64], Tensor[(594), float64], Tensor[(1232), bool], Tensor[(5, 13, 5), bool]) */;
  %510 = cast(%var_7652, dtype="float64") /* ty=Tensor[(90), float64] */;
  %511 = reshape(%510, newshape=[15, 1, 6]) /* ty=Tensor[(15, 1, 6), float64] */;
  %512 = cast(%var_7664, dtype="float32") /* ty=float32 */;
  %513 = reshape(%512, newshape=[]) /* ty=float32 */;
  %514 = @func_1892(%513) /* ty=(Tensor[(13, 1, 9), float32], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600), float32], Tensor[(480, 600), int64]) */;
  %515 = not_equal(%497, %498) /* ty=Tensor[(3, 8, 6), bool] */;
  %516 = %509.3;
  %517 = @func_2830(%511) /* ty=Tensor[(15, 1, 6), float64] */;
  %518 = %514.1;
  (%515, %516, %var_7639, %var_7640, %517, %var_7652, %518, %var_7664)
}

def @func_5398(%var_5357: Tensor[(3, 15, 12), uint32], %var_5358: Tensor[(3, 15, 12), uint32]) -> (Tensor[(3, 15, 12), float64], Tensor[(3, 15, 12), uint64]) {
  %519 = cast(%var_5358, dtype="float64") /* ty=Tensor[(3, 15, 12), float64] */;
  %520 = cast(%var_5358, dtype="float64") /* ty=Tensor[(3, 15, 12), float64] */;
  %521 = asinh(%520) /* ty=Tensor[(3, 15, 12), float64] */;
  %522 = cast(%var_5358, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %523 = shape_of(%var_5357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%var_5357, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %526 = equal(%524, %525) /* ty=Tensor[(3, 15, 12), bool] */;
  %527 = cast(%526, dtype="uint64") /* ty=Tensor[(3, 15, 12), uint64] */;
  %528 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(%521, dtype="uint64") /* ty=Tensor[(3, 15, 12), uint64] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %531 = sin(%519) /* ty=Tensor[(3, 15, 12), float64] */;
  %532 = logical_xor(%529, %530) /* ty=Tensor[(3, 15, 12), uint64] */;
  (%531, %532)
}

def @func_14497(%var_14491: Tensor[(8, 14, 15), uint16], %var_14492: Tensor[(8, 14, 15), uint16]) -> Tensor[(8, 14, 15), uint16] {
  %533 = cast(%var_14492, dtype="uint16") /* ty=Tensor[(8, 14, 15), uint16] */;
  %534 = shape_of(%var_14491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%var_14491, dtype="uint16") /* ty=Tensor[(8, 14, 15), uint16] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  add(%535, %536) /* ty=Tensor[(8, 14, 15), uint16] */
}

def @func_10406(%var_10382: Tensor[(4, 14, 8), int32], %var_10383: Tensor[(4, 14, 8), int32]) -> (Tensor[(4, 14, 8), bool], Tensor[(14, 3, 16), bool], Tensor[(56, 12), bool]) {
  %537 = cast(%var_10383, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
  %538 = shape_of(%var_10382, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(%var_10382, dtype="bool") /* ty=Tensor[(4, 14, 8), bool] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %541 = cast(meta[relay.Constant][49] /* ty=Tensor[(56, 12), bool] */, dtype="bool") /* ty=Tensor[(56, 12), bool] */;
  %542 = reshape(%541, newshape=[14, 3, 16]) /* ty=Tensor[(14, 3, 16), bool] */;
  %543 = @func_9848(%542) /* ty=(Tensor[(14, 3, 16), bool],) */;
  %544 = greater(%539, %540) /* ty=Tensor[(4, 14, 8), bool] */;
  %545 = %543.0;
  (%544, %545, meta[relay.Constant][49] /* ty=Tensor[(56, 12), bool] */)
}

def @func_6339(%var_6337: Tensor[(10, 3, 2), float64]) -> (Tensor[(10, 3, 2), float64],) {
  @func_6336(%var_6337) /* ty=(Tensor[(10, 3, 2), float64],) */
}

def @func_20201(%var_20199: uint64, %var_20200: Tensor[(13, 14, 2), uint64]) -> (Tensor[(13, 14, 2), bool],) {
  @func_20197(%var_20199, %var_20200) /* ty=(Tensor[(13, 14, 2), bool],) */
}

def @func_3838(%var_3835: Tensor[(3, 13, 13), float32], %var_3836: Tensor[(3, 13, 13), float32], %var_3837: Tensor[(4, 308), int64]) -> (Tensor[(3, 13, 13), float32], Tensor[(16, 11, 7), bool], Tensor[(4, 308), int64], Tensor[(1296), float64]) {
  %565 = fn (%var_3782: Tensor[(3, 13, 13), float32], %var_3783: Tensor[(3, 13, 13), float32], %var_3801: Tensor[(4, 308), int64]) -> (Tensor[(3, 13, 13), float32], Tensor[(16, 11, 7), bool], Tensor[(4, 308), int64], Tensor[(1296), float64]) {
    %546 = cast(%var_3783, dtype="float32") /* ty=Tensor[(3, 13, 13), float32] */;
    %547 = shape_of(%var_3782, dtype="int32") /* ty=Tensor[(3), int32] */;
    %548 = cast(%var_3782, dtype="float32") /* ty=Tensor[(3, 13, 13), float32] */;
    %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %550 = cast(%var_3801, dtype="int64") /* ty=Tensor[(4, 308), int64] */;
    %551 = cast(%var_3801, dtype="int64") /* ty=Tensor[(4, 308), int64] */;
    %552 = reshape(%550, newshape=[16, 11, 7]) /* ty=Tensor[(16, 11, 7), int64] */;
    %553 = reshape(%551, newshape=[16, 11, 7]) /* ty=Tensor[(16, 11, 7), int64] */;
    %554 = cast(-4.11527f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %555 = reshape(%554, newshape=[]) /* ty=float32 */;
    %556 = @func_1892(%555) /* ty=(Tensor[(13, 1, 9), float32], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600), float32], Tensor[(480, 600), int64]) */;
    %557 = %556.2;
    %558 = cast(%557, dtype="int8") /* ty=Tensor[(1296), int8] */;
    %559 = cast(-4.11527f /* ty=float32 */, dtype="int8") /* ty=int8 */;
    %560 = multiply(%558, %559) /* ty=Tensor[(1296), int8] */;
    %561 = cast(%560, dtype="float64") /* ty=Tensor[(1296), float64] */;
    %562 = mod(%548, %549) /* ty=Tensor[(3, 13, 13), float32] */;
    %563 = @func_1780(%552, %553) /* ty=Tensor[(16, 11, 7), bool] */;
    %564 = tan(%561) /* ty=Tensor[(1296), float64] */;
    (%562, %563, %var_3801, %564)
  };
  %565(%var_3835, %var_3836, %var_3837) /* ty=(Tensor[(3, 13, 13), float32], Tensor[(16, 11, 7), bool], Tensor[(4, 308), int64], Tensor[(1296), float64]) */
}

def @func_1284(%var_1282: Tensor[(6, 1, 7), uint64], %var_1283: Tensor[(6, 15, 7), uint64]) -> (Tensor[(6, 15, 7), uint64],) {
  @func_1280(%var_1282, %var_1283) /* ty=(Tensor[(6, 15, 7), uint64],) */
}

def @func_17820(%var_17819: Tensor[(1, 5, 14), float32]) -> Tensor[(1, 5, 14), float64] {
  %569 = fn (%var_17795: Tensor[(1, 5, 14), float32]) -> Tensor[(1, 5, 14), float64] {
    %566 = cast(%var_17795, dtype="float32") /* ty=Tensor[(1, 5, 14), float32] */;
    %567 = tan(%566) /* ty=Tensor[(1, 5, 14), float32] */;
    %568 = cast(%567, dtype="float64") /* ty=Tensor[(1, 5, 14), float64] */;
    sqrt(%568) /* ty=Tensor[(1, 5, 14), float64] */
  };
  %569(%var_17819) /* ty=Tensor[(1, 5, 14), float64] */
}

def @func_4700(%var_4699: Tensor[(11, 6, 5), float64]) -> (Tensor[(11, 6, 5), float64],) {
  %572 = fn (%var_4683: Tensor[(11, 6, 5), float64]) -> (Tensor[(11, 6, 5), float64],) {
    %570 = cast(%var_4683, dtype="float64") /* ty=Tensor[(11, 6, 5), float64] */;
    %571 = log(%570) /* ty=Tensor[(11, 6, 5), float64] */;
    (%571,)
  };
  %572(%var_4699) /* ty=(Tensor[(11, 6, 5), float64],) */
}

def @func_17151(%var_17149: Tensor[(5, 4, 9), float64]) -> (Tensor[(5, 4, 9), float64], Tensor[(6, 11, 11), int8], Tensor[(1, 726), uint8]) {
  @func_17148(%var_17149) /* ty=(Tensor[(5, 4, 9), float64], Tensor[(6, 11, 11), int8], Tensor[(1, 726), uint8]) */
}

def @func_12102(%var_12095: Tensor[(15, 15, 8), float64]) -> (Tensor[(15, 15, 8), float64],) {
  %573 = cast(%var_12095, dtype="float64") /* ty=Tensor[(15, 15, 8), float64] */;
  %574 = erf(%573) /* ty=Tensor[(15, 15, 8), float64] */;
  (%574,)
}

def @func_20245(%var_20243: Tensor[(8, 7, 5), float32]) -> Tensor[(8, 7, 5), float32] {
  @func_20242(%var_20243) /* ty=Tensor[(8, 7, 5), float32] */
}

def @func_6628(%var_6627: Tensor[(6, 11, 11), uint8]) -> (Tensor[(6, 11, 11), uint8], Tensor[(15, 10, 14), float64], Tensor[(3, 700), float64], Tensor[(6, 11, 11), int8]) {
  %588 = fn (%var_6586: Tensor[(6, 11, 11), uint8]) -> (Tensor[(6, 11, 11), uint8], Tensor[(15, 10, 14), float64], Tensor[(3, 700), float64], Tensor[(6, 11, 11), int8]) {
    %575 = cast(meta[relay.Constant][50] /* ty=Tensor[(6, 11, 11), uint8] */, dtype="uint8") /* ty=Tensor[(6, 11, 11), uint8] */;
    %576 = shape_of(%var_6586, dtype="int32") /* ty=Tensor[(3), int32] */;
    %577 = cast(%var_6586, dtype="uint8") /* ty=Tensor[(6, 11, 11), uint8] */;
    %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %579 = cast(meta[relay.Constant][51] /* ty=Tensor[(3, 700), float64] */, dtype="float64") /* ty=Tensor[(3, 700), float64] */;
    %580 = reshape(%579, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float64] */;
    %581 = cast(meta[relay.Constant][50] /* ty=Tensor[(6, 11, 11), uint8] */, dtype="int8") /* ty=Tensor[(6, 11, 11), int8] */;
    %582 = shape_of(%var_6586, dtype="int32") /* ty=Tensor[(3), int32] */;
    %583 = cast(%var_6586, dtype="int8") /* ty=Tensor[(6, 11, 11), int8] */;
    %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %585 = bitwise_and(%577, %578) /* ty=Tensor[(6, 11, 11), uint8] */;
    %586 = @func_4816(%580) /* ty=Tensor[(15, 10, 14), float64] */;
    %587 = bitwise_xor(%583, %584) /* ty=Tensor[(6, 11, 11), int8] */;
    (%585, %586, meta[relay.Constant][51] /* ty=Tensor[(3, 700), float64] */, %587)
  };
  %588(%var_6627) /* ty=(Tensor[(6, 11, 11), uint8], Tensor[(15, 10, 14), float64], Tensor[(3, 700), float64], Tensor[(6, 11, 11), int8]) */
}

def @func_20242(%var_20237: Tensor[(8, 7, 5), float32]) -> Tensor[(8, 7, 5), float32] {
  %589 = cast(%var_20237, dtype="float32") /* ty=Tensor[(8, 7, 5), float32] */;
  sinh(%589) /* ty=Tensor[(8, 7, 5), float32] */
}

def @func_19432(%var_19430: Tensor[(9, 4, 13), float64], %var_19431: Tensor[(63), uint16]) -> (Tensor[(9, 4, 13), float64], Tensor[(4, 9, 16), float64], Tensor[(576), float64], Tensor[(1232), int64], int8, Tensor[(63), uint16]) {
  %606 = fn (%var_19395: Tensor[(9, 4, 13), float64], %var_19422: Tensor[(63), uint16]) -> (Tensor[(9, 4, 13), float64], Tensor[(4, 9, 16), float64], Tensor[(576), float64], Tensor[(1232), int64], int8, Tensor[(63), uint16]) {
    %590 = cast(%var_19395, dtype="float64") /* ty=Tensor[(9, 4, 13), float64] */;
    %591 = cast(meta[relay.Constant][52] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
    %592 = cast(meta[relay.Constant][53] /* ty=Tensor[(1232), int64] */, dtype="int64") /* ty=Tensor[(1232), int64] */;
    %593 = reshape(%591, newshape=[4, 9, 16]) /* ty=Tensor[(4, 9, 16), float64] */;
    %594 = reshape(%592, newshape=[1232]) /* ty=Tensor[(1232), int64] */;
    %595 = @func_8432(%593, %594) /* ty=(Tensor[(4, 9, 16), float64], Tensor[(16, 11, 7), bool], Tensor[(507), float32], Tensor[(1232), int64]) */;
    %596 = cast(%var_19422, dtype="uint16") /* ty=Tensor[(63), uint16] */;
    %597 = cast(%var_19422, dtype="uint16") /* ty=Tensor[(63), uint16] */;
    %598 = cast(%var_19422, dtype="uint16") /* ty=Tensor[(63), uint16] */;
    %599 = reshape(%596, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), uint16] */;
    %600 = reshape(%597, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), uint16] */;
    %601 = reshape(%598, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), uint16] */;
    %602 = @func_7560(%599, %600, %601) /* ty=(Tensor[(3, 7, 3), float32], Tensor[(3, 7, 3), int8], Tensor[(11, 9, 11), int8], int8, Tensor[(1089), int8]) */;
    %603 = atan(%590) /* ty=Tensor[(9, 4, 13), float64] */;
    %604 = %595.0;
    %605 = %602.3;
    (%603, %604, meta[relay.Constant][52] /* ty=Tensor[(576), float64] */, meta[relay.Constant][53] /* ty=Tensor[(1232), int64] */, %605, %var_19422)
  };
  %606(%var_19430, %var_19431) /* ty=(Tensor[(9, 4, 13), float64], Tensor[(4, 9, 16), float64], Tensor[(576), float64], Tensor[(1232), int64], int8, Tensor[(63), uint16]) */
}

def @func_20509(%var_20487: Tensor[(8, 14, 6), uint64], %var_20488: Tensor[(8, 14, 6), uint64], %var_20505: Tensor[(8, 14, 6), uint64]) -> (Tensor[(8, 14, 6), bool], Tensor[(14, 15, 5), float32], Tensor[(1050), float32], Tensor[(8, 14, 6), int64]) {
  %607 = cast(%var_20488, dtype="bool") /* ty=Tensor[(8, 14, 6), bool] */;
  %608 = shape_of(%var_20487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%var_20487, dtype="bool") /* ty=Tensor[(8, 14, 6), bool] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %611 = cast(meta[relay.Constant][54] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
  %612 = reshape(%611, newshape=[14, 15, 5]) /* ty=Tensor[(14, 15, 5), float32] */;
  %613 = cast(%var_20505, dtype="int64") /* ty=Tensor[(8, 14, 6), int64] */;
  %614 = shape_of(%var_20488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%var_20488, dtype="int64") /* ty=Tensor[(8, 14, 6), int64] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %617 = greater_equal(%609, %610) /* ty=Tensor[(8, 14, 6), bool] */;
  %618 = @func_13324(%612) /* ty=Tensor[(14, 15, 5), float32] */;
  %619 = subtract(%615, %616) /* ty=Tensor[(8, 14, 6), int64] */;
  (%617, %618, meta[relay.Constant][54] /* ty=Tensor[(1050), float32] */, %619)
}

def @func_10410(%var_10408: Tensor[(4, 14, 8), int32], %var_10409: Tensor[(4, 14, 8), int32]) -> (Tensor[(4, 14, 8), bool], Tensor[(14, 3, 16), bool], Tensor[(56, 12), bool]) {
  @func_10406(%var_10408, %var_10409) /* ty=(Tensor[(4, 14, 8), bool], Tensor[(14, 3, 16), bool], Tensor[(56, 12), bool]) */
}

def @func_20197(%var_20186: uint64, %var_20187: Tensor[(13, 14, 2), uint64]) -> (Tensor[(13, 14, 2), bool],) {
  %620 = cast(%var_20186, dtype="bool") /* ty=bool */;
  %621 = cast(%var_20187, dtype="bool") /* ty=Tensor[(13, 14, 2), bool] */;
  %622 = greater(%620, %621) /* ty=Tensor[(13, 14, 2), bool] */;
  (%622,)
}

def @func_13975(%var_13973: Tensor[(10, 7, 7), int32], %var_13974: Tensor[(10, 7, 7), int32]) -> Tensor[(10, 7, 7), bool] {
  @func_13971(%var_13973, %var_13974) /* ty=Tensor[(10, 7, 7), bool] */
}

def @func_17364(%var_17362: Tensor[(8, 16, 1), float64], %var_17363: Tensor[(490), int32]) -> (Tensor[(14, 15, 5), float32], Tensor[(1050), float32], Tensor[(8, 16, ?), int16], Tensor[(10, 7, 7), bool], Tensor[(490), int32], Tensor[(8, 16, ?), float32], Tensor[(11, 9, 11), int8], Tensor[(63), uint16], Tensor[(8, 16, ?), uint32]) {
  %665 = fn (%var_17265: Tensor[(8, 16, 1), float64], %var_17311: Tensor[(490), int32]) -> (Tensor[(14, 15, 5), float32], Tensor[(1050), float32], Tensor[(8, 16, ?), int16], Tensor[(10, 7, 7), bool], Tensor[(490), int32], Tensor[(8, 16, ?), float32], Tensor[(11, 9, 11), int8], Tensor[(63), uint16], Tensor[(8, 16, ?), uint32]) {
    %623 = cast(meta[relay.Constant][55] /* ty=Tensor[(1050), float32] */, dtype="float32") /* ty=Tensor[(1050), float32] */;
    %624 = reshape(%623, newshape=[14, 15, 5]) /* ty=Tensor[(14, 15, 5), float32] */;
    %625 = cast(%var_17265, dtype="float64") /* ty=Tensor[(8, 16, 1), float64] */;
    %626 = sinh(%625) /* ty=Tensor[(8, 16, 1), float64] */;
    %627 = cast(%var_17265, dtype="bool") /* ty=Tensor[(8, 16, 1), bool] */;
    %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
    %629 = cast(%626, dtype="bool") /* ty=Tensor[(8, 16, 1), bool] */;
    %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %631 = greater_equal(%629, %630) /* ty=Tensor[(8, 16, ?), bool] */;
    %632 = cast(%626, dtype="float32") /* ty=Tensor[(8, 16, 1), float32] */;
    %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
    %634 = cast(%631, dtype="float32") /* ty=Tensor[(8, 16, ?), float32] */;
    %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %636 = subtract(%634, %635) /* ty=Tensor[(8, 16, ?), float32] */;
    %637 = cast(%631, dtype="int16") /* ty=Tensor[(8, 16, ?), int16] */;
    %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
    %639 = cast(%636, dtype="int16") /* ty=Tensor[(8, 16, ?), int16] */;
    %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %641 = cast(%var_17311, dtype="int32") /* ty=Tensor[(490), int32] */;
    %642 = cast(%var_17311, dtype="int32") /* ty=Tensor[(490), int32] */;
    %643 = reshape(%641, newshape=[10, 7, 7]) /* ty=Tensor[(10, 7, 7), int32] */;
    %644 = reshape(%642, newshape=[10, 7, 7]) /* ty=Tensor[(10, 7, 7), int32] */;
    %645 = cast(%631, dtype="float64") /* ty=Tensor[(8, 16, ?), float64] */;
    %646 = asinh(%645) /* ty=Tensor[(8, 16, ?), float64] */;
    %647 = cast(%646, dtype="float32") /* ty=Tensor[(8, 16, ?), float32] */;
    %648 = cast(meta[relay.Constant][56] /* ty=Tensor[(63), uint16] */, dtype="uint16") /* ty=Tensor[(63), uint16] */;
    %649 = cast(meta[relay.Constant][56] /* ty=Tensor[(63), uint16] */, dtype="uint16") /* ty=Tensor[(63), uint16] */;
    %650 = cast(meta[relay.Constant][56] /* ty=Tensor[(63), uint16] */, dtype="uint16") /* ty=Tensor[(63), uint16] */;
    %651 = reshape(%648, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), uint16] */;
    %652 = reshape(%649, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), uint16] */;
    %653 = reshape(%650, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), uint16] */;
    %654 = @func_7560(%651, %652, %653) /* ty=(Tensor[(3, 7, 3), float32], Tensor[(3, 7, 3), int8], Tensor[(11, 9, 11), int8], int8, Tensor[(1089), int8]) */;
    %655 = cast(%631, dtype="uint32") /* ty=Tensor[(8, 16, ?), uint32] */;
    %656 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
    %657 = cast(%646, dtype="uint32") /* ty=Tensor[(8, 16, ?), uint32] */;
    %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %659 = @func_13324(%624) /* ty=Tensor[(14, 15, 5), float32] */;
    %660 = add(%639, %640) /* ty=Tensor[(8, 16, ?), int16] */;
    %661 = @func_13971(%643, %644) /* ty=Tensor[(10, 7, 7), bool] */;
    %662 = rsqrt(%647) /* ty=Tensor[(8, 16, ?), float32] */;
    %663 = %654.2;
    %664 = bitwise_xor(%657, %658) /* ty=Tensor[(8, 16, ?), uint32] */;
    (%659, meta[relay.Constant][55] /* ty=Tensor[(1050), float32] */, %660, %661, %var_17311, %662, %663, meta[relay.Constant][56] /* ty=Tensor[(63), uint16] */, %664)
  };
  %665(%var_17362, %var_17363) /* ty=(Tensor[(14, 15, 5), float32], Tensor[(1050), float32], Tensor[(8, 16, ?), int16], Tensor[(10, 7, 7), bool], Tensor[(490), int32], Tensor[(8, 16, ?), float32], Tensor[(11, 9, 11), int8], Tensor[(63), uint16], Tensor[(8, 16, ?), uint32]) */
}

def @func_18137(%var_18094: Tensor[(14, 11, 14), float32], %var_18104: uint16, %var_18131: Tensor[(14, 11, 14), float32]) -> (Tensor[(10, 8, 1), uint16], uint16, Tensor[(80, 1), uint16], Tensor[(14, 11, 14), float64], Tensor[(10, 8, 1), uint16]) {
  %666 = cast(%var_18104, dtype="uint16") /* ty=uint16 */;
  %667 = cast(meta[relay.Constant][57] /* ty=Tensor[(80, 1), uint16] */, dtype="uint16") /* ty=Tensor[(80, 1), uint16] */;
  %668 = reshape(%666, newshape=[]) /* ty=uint16 */;
  %669 = reshape(%667, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), uint16] */;
  %670 = @func_3899(%668, %669) /* ty=(Tensor[(10, 8, 1), uint16],) */;
  %671 = cast(%var_18094, dtype="float32") /* ty=Tensor[(14, 11, 14), float32] */;
  %672 = sinh(%671) /* ty=Tensor[(14, 11, 14), float32] */;
  %673 = cast(%var_18131, dtype="float64") /* ty=Tensor[(14, 11, 14), float64] */;
  %674 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%672, dtype="float64") /* ty=Tensor[(14, 11, 14), float64] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %677 = cast(%var_18104, dtype="uint16") /* ty=uint16 */;
  %678 = %670.0;
  %679 = cast(%678, dtype="uint16") /* ty=Tensor[(10, 8, 1), uint16] */;
  %680 = reshape(%677, newshape=[]) /* ty=uint16 */;
  %681 = reshape(%679, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), uint16] */;
  %682 = @func_3899(%680, %681) /* ty=(Tensor[(10, 8, 1), uint16],) */;
  %683 = floor_mod(%675, %676) /* ty=Tensor[(14, 11, 14), float64] */;
  %684 = %682.0;
  (%678, %var_18104, meta[relay.Constant][57] /* ty=Tensor[(80, 1), uint16] */, %683, %684)
}

def @func_2635(%var_2632: Tensor[(7, 12, 13), uint16], %var_2633: Tensor[(7, 12, 13), uint16], %var_2634: Tensor[(7, 12, 13), uint16]) -> Tensor[(7, 12, 13), float32] {
  %694 = fn (%var_2616: Tensor[(7, 12, 13), uint16], %var_2617: Tensor[(7, 12, 13), uint16], %var_2624: Tensor[(7, 12, 13), uint16]) -> Tensor[(7, 12, 13), float32] {
    %685 = cast(%var_2617, dtype="uint16") /* ty=Tensor[(7, 12, 13), uint16] */;
    %686 = shape_of(%var_2616, dtype="int32") /* ty=Tensor[(3), int32] */;
    %687 = cast(%var_2616, dtype="uint16") /* ty=Tensor[(7, 12, 13), uint16] */;
    %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %689 = right_shift(%687, %688) /* ty=Tensor[(7, 12, 13), uint16] */;
    %690 = cast(%var_2624, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
    %691 = shape_of(%689, dtype="int32") /* ty=Tensor[(3), int32] */;
    %692 = cast(%689, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
    %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%692, %693) /* ty=Tensor[(7, 12, 13), float32] */
  };
  %694(%var_2632, %var_2633, %var_2634) /* ty=Tensor[(7, 12, 13), float32] */
}

def @func_7564(%var_7561: Tensor[(3, 7, 3), uint16], %var_7562: Tensor[(3, 7, 3), uint16], %var_7563: Tensor[(3, 7, 3), uint16]) -> (Tensor[(3, 7, 3), float32], Tensor[(3, 7, 3), int8], Tensor[(11, 9, 11), int8], int8, Tensor[(1089), int8]) {
  %715 = fn (%var_7517: Tensor[(3, 7, 3), uint16], %var_7518: Tensor[(3, 7, 3), uint16], %var_7543: Tensor[(3, 7, 3), uint16]) -> (Tensor[(3, 7, 3), float32], Tensor[(3, 7, 3), int8], Tensor[(11, 9, 11), int8], int8, Tensor[(1089), int8]) {
    %695 = cast(%var_7518, dtype="uint16") /* ty=Tensor[(3, 7, 3), uint16] */;
    %696 = shape_of(%var_7517, dtype="int32") /* ty=Tensor[(3), int32] */;
    %697 = cast(%var_7517, dtype="uint16") /* ty=Tensor[(3, 7, 3), uint16] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %699 = bitwise_and(%697, %698) /* ty=Tensor[(3, 7, 3), uint16] */;
    %700 = cast(meta[relay.Constant][58] /* ty=Tensor[(3, 7, 3), uint16] */, dtype="float32") /* ty=Tensor[(3, 7, 3), float32] */;
    %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
    %702 = cast(%699, dtype="float32") /* ty=Tensor[(3, 7, 3), float32] */;
    %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %704 = cast(%var_7543, dtype="int8") /* ty=Tensor[(3, 7, 3), int8] */;
    %705 = shape_of(%var_7518, dtype="int32") /* ty=Tensor[(3), int32] */;
    %706 = cast(%var_7518, dtype="int8") /* ty=Tensor[(3, 7, 3), int8] */;
    %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %708 = cast(meta[relay.Constant][59] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %709 = cast(meta[relay.Constant][60] /* ty=Tensor[(1089), int8] */, dtype="int8") /* ty=Tensor[(1089), int8] */;
    %710 = reshape(%708, newshape=[]) /* ty=int8 */;
    %711 = reshape(%709, newshape=[11, 9, 11]) /* ty=Tensor[(11, 9, 11), int8] */;
    %712 = power(%702, %703) /* ty=Tensor[(3, 7, 3), float32] */;
    %713 = maximum(%706, %707) /* ty=Tensor[(3, 7, 3), int8] */;
    %714 = @func_7239(%710, %711) /* ty=Tensor[(11, 9, 11), int8] */;
    (%712, %713, %714, meta[relay.Constant][59] /* ty=int8 */, meta[relay.Constant][60] /* ty=Tensor[(1089), int8] */)
  };
  %715(%var_7561, %var_7562, %var_7563) /* ty=(Tensor[(3, 7, 3), float32], Tensor[(3, 7, 3), int8], Tensor[(11, 9, 11), int8], int8, Tensor[(1089), int8]) */
}

def @func_3899(%var_3886: uint16, %var_3887: Tensor[(10, 8, 1), uint16]) -> (Tensor[(10, 8, 1), uint16],) {
  %716 = cast(%var_3886, dtype="uint16") /* ty=uint16 */;
  %717 = cast(%var_3887, dtype="uint16") /* ty=Tensor[(10, 8, 1), uint16] */;
  %718 = minimum(%716, %717) /* ty=Tensor[(10, 8, 1), uint16] */;
  (%718,)
}

def @func_5402(%var_5400: Tensor[(3, 15, 12), uint32], %var_5401: Tensor[(3, 15, 12), uint32]) -> (Tensor[(3, 15, 12), float64], Tensor[(3, 15, 12), uint64]) {
  @func_5398(%var_5400, %var_5401) /* ty=(Tensor[(3, 15, 12), float64], Tensor[(3, 15, 12), uint64]) */
}

def @func_2953(%var_2949: Tensor[(10, 2, 11), uint32], %var_2950: Tensor[(120, 4), bool], %var_2951: Tensor[(42), uint64], %var_2952: Tensor[(600, 1), float32]) -> (Tensor[(10, 2, 11), uint32], Tensor[(210, 3), uint64], Tensor[(120, 4), bool], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600, 1), float32]) {
  @func_2947(%var_2949, %var_2950, %var_2951, %var_2952) /* ty=(Tensor[(10, 2, 11), uint32], Tensor[(210, 3), uint64], Tensor[(120, 4), bool], Tensor[(42), uint64], Tensor[(1296), int32], Tensor[(600, 1), float32]) */
}

def @func_8230(%var_8227: int64, %var_8228: Tensor[(3, 9, 13), int64], %var_8229: Tensor[(726), uint8]) -> (Tensor[(3, 9, 13), bool], Tensor[(10, 5, 12), float32], Tensor[(600), float32], Tensor[(3, 15, 12), uint64], Tensor[(540), uint32], Tensor[(3, 9, 13), float32], Tensor[(3, 700), float64], Tensor[(726), uint8]) {
  @func_8225(%var_8227, %var_8228, %var_8229) /* ty=(Tensor[(3, 9, 13), bool], Tensor[(10, 5, 12), float32], Tensor[(600), float32], Tensor[(3, 15, 12), uint64], Tensor[(540), uint32], Tensor[(3, 9, 13), float32], Tensor[(3, 700), float64], Tensor[(726), uint8]) */
}

def @func_10802(%var_10800: uint16, %var_10801: Tensor[(80), uint16]) -> (Tensor[(10, 8, 1), uint16], uint16, Tensor[(80), uint16], Tensor[(9, 2, 15), float32]) {
  %736 = fn (%var_10773: uint16, %var_10774: Tensor[(80), uint16]) -> (Tensor[(10, 8, 1), uint16], uint16, Tensor[(80), uint16], Tensor[(9, 2, 15), float32]) {
    %719 = cast(%var_10773, dtype="uint16") /* ty=uint16 */;
    %720 = cast(%var_10774, dtype="uint16") /* ty=Tensor[(80), uint16] */;
    %721 = reshape(%719, newshape=[]) /* ty=uint16 */;
    %722 = reshape(%720, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), uint16] */;
    %723 = @func_3899(%721, %722) /* ty=(Tensor[(10, 8, 1), uint16],) */;
    %724 = cast(meta[relay.Constant][61] /* ty=Tensor[(9, 2, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 15), float64] */;
    %725 = asinh(%724) /* ty=Tensor[(9, 2, 15), float64] */;
    %726 = cast(%725, dtype="float32") /* ty=Tensor[(9, 2, 15), float32] */;
    %727 = rsqrt(%726) /* ty=Tensor[(9, 2, 15), float32] */;
    %728 = cast(%727, dtype="float64") /* ty=Tensor[(9, 2, 15), float64] */;
    %729 = log2(%728) /* ty=Tensor[(9, 2, 15), float64] */;
    %730 = cast(%727, dtype="float32") /* ty=Tensor[(9, 2, 15), float32] */;
    %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
    %732 = cast(%729, dtype="float32") /* ty=Tensor[(9, 2, 15), float32] */;
    %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %734 = %723.0;
    %735 = floor_mod(%732, %733) /* ty=Tensor[(9, 2, 15), float32] */;
    (%734, %var_10773, %var_10774, %735)
  };
  %736(%var_10800, %var_10801) /* ty=(Tensor[(10, 8, 1), uint16], uint16, Tensor[(80), uint16], Tensor[(9, 2, 15), float32]) */
}

def @func_4818(%var_4817: Tensor[(15, 10, 14), float64]) -> Tensor[(15, 10, 14), float64] {
  %738 = fn (%var_4806: Tensor[(15, 10, 14), float64]) -> Tensor[(15, 10, 14), float64] {
    %737 = cast(%var_4806, dtype="float64") /* ty=Tensor[(15, 10, 14), float64] */;
    log2(%737) /* ty=Tensor[(15, 10, 14), float64] */
  };
  %738(%var_4817) /* ty=Tensor[(15, 10, 14), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen823/build/output.py:1356: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen823/build/output.py", line 1361, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_acos_kernel0(float* __restrict__ T_acos, float* __restrict__ placeholder) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 2028) {
    T_acos[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = acosf(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

