import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_1030 = relay.var("var_1030", dtype = "float32", shape = (10, 5, 12))#candidate|1030|(10, 5, 12)|var|float32
const_1031 = relay.const([[[-0.314478,3.126784,-0.821143,-7.636612,4.529840,8.296917,3.836645,-2.547538,-9.802576,0.452661,0.150582,9.427481],[9.168289,0.696189,9.000668,8.866480,0.671712,4.558801,-1.832694,0.535981,-0.371115,-6.806340,-1.295241,-4.025811],[9.020080,6.143254,9.287109,4.773507,5.489240,-7.338433,4.386719,-6.532822,-9.038309,-8.092502,2.209882,-2.290017],[-2.729092,-6.569568,-3.573271,-8.927889,-4.973914,-7.398409,-0.938499,-2.402365,2.926673,-8.124450,8.109239,5.233331],[-1.643383,-6.069060,5.391032,-6.467650,7.537271,-3.204963,6.532458,5.677234,-3.930999,7.805361,-7.857448,-7.372133]],[[-8.143901,-6.171012,7.880027,5.186634,-9.705097,-2.136194,2.466430,8.847646,8.132595,-9.231210,-1.450570,-1.651268],[8.896250,8.294256,-1.800685,0.595335,3.698641,-3.360648,0.095578,-3.338684,2.303476,9.903801,4.615954,-0.469622],[-4.278141,7.487354,-3.816753,-9.826609,9.336586,3.641280,9.896298,-9.567799,4.754080,-1.014230,8.602419,-3.079184],[1.325424,9.983802,-7.072483,8.642483,-0.530843,-1.652119,-2.884242,-6.477276,-8.269020,3.925341,5.339519,-7.690430],[-9.819913,1.317907,-2.515593,2.827008,-6.992747,-1.379504,-5.993435,6.621182,7.560429,5.618743,-9.613103,7.284026]],[[-8.307011,4.715798,4.604037,-2.176792,-0.693207,9.466680,4.960896,-2.230082,3.646739,-5.529764,-9.177869,-4.252016],[7.280542,3.108632,4.242969,8.416374,-5.910733,4.594182,-6.193568,5.725736,-8.132318,9.243588,1.572533,0.801430],[4.077390,-2.581610,7.025435,1.676834,0.224610,4.858641,2.769557,-4.936018,5.842175,3.108938,0.891046,-2.247141],[8.222957,1.044187,9.281764,0.871331,-1.453373,-0.385730,-6.402002,9.146156,-6.575648,2.317292,6.664012,4.304610],[5.452949,-3.770589,-8.053071,-8.067256,9.691273,-5.852002,-3.061772,4.136906,-8.292368,2.702786,5.420599,-2.591934]],[[7.020738,1.182148,2.551357,7.956847,-8.254253,6.199592,-1.864964,-6.034954,7.552352,-9.623939,6.815454,-9.105904],[5.725223,-2.170980,-4.237493,-1.636757,-0.669048,-3.169863,9.187406,7.231148,-8.987262,-8.719533,-5.187758,-7.159133],[5.472948,-7.870697,-1.761286,-3.612850,-6.312955,-3.751876,3.468434,-9.899616,-2.932512,8.103473,-3.720138,1.348648],[5.200515,2.944229,0.385029,3.002923,-2.095233,1.160118,0.938648,-4.582065,-7.040300,-7.946379,2.145750,-9.828336],[-7.868490,5.225323,-7.556429,2.989065,-7.063697,7.322427,-5.204961,9.857698,-4.096180,4.076913,-0.794803,1.188442]],[[-2.791591,1.032865,-1.565868,3.033226,0.760024,0.499222,-2.302668,-9.231316,0.015643,-7.108744,-8.994691,-8.936311],[-0.426896,-1.930973,3.234322,3.165312,-1.491380,-2.195701,-4.732062,7.070109,-9.619997,1.750325,9.649606,-5.311151],[-0.739381,-8.881424,-1.268477,0.798234,-2.457093,3.146515,-1.183886,3.959259,3.646745,5.851896,7.650157,-4.641545],[-7.835501,-1.276867,0.307932,-6.533921,8.601560,-8.570937,-4.349872,-1.189856,-3.685461,-8.423912,8.765701,2.026003],[3.574358,-2.286479,4.594155,2.599910,1.903012,6.936015,-7.440001,-3.239460,-4.178213,2.014046,-4.445448,5.431268]],[[5.339545,8.777747,5.948433,-9.694920,-4.512013,2.562637,1.137829,5.197093,1.494357,9.426358,-6.192088,0.898581],[-7.569581,1.174159,9.186400,4.187782,3.074307,8.655555,9.182661,2.957950,-7.835010,6.944349,4.375819,-9.903507],[8.578391,-6.638916,9.164709,-2.040715,-2.333314,3.489912,-9.150547,8.787045,0.767630,-6.402170,-4.023999,-5.797551],[3.220333,-5.745886,-7.939398,9.658447,-2.811270,-9.836804,5.795855,7.741215,-6.470802,3.262936,-2.592199,-9.613386],[4.052315,-9.285178,8.574795,0.734790,6.012863,8.509082,-6.719462,8.748406,3.488982,0.993186,9.584121,-6.702951]],[[8.851207,-9.665460,-5.594265,7.005102,-7.814385,8.500506,6.197199,-6.178451,-1.448272,-5.854947,-6.343652,5.135187],[1.089294,-4.660189,-7.332163,9.699902,0.406581,0.819566,-5.100656,8.624604,-8.902889,-6.777123,0.901435,-3.988715],[7.700207,7.936030,0.456854,3.863964,7.602251,2.028640,-1.845031,7.936885,-7.507655,-0.536702,9.550876,1.345322],[-7.111030,7.244686,-2.531248,-2.310098,6.083655,2.797614,-3.987516,3.247033,0.252786,4.165011,7.251596,5.890020],[0.308743,4.966805,8.774778,4.577536,-6.099713,-7.204041,-9.936272,-5.054639,-9.264167,-3.631339,-2.281117,-9.047051]],[[-3.001752,-7.124221,-0.524942,-7.487424,6.947524,-9.685543,-0.322397,-8.268362,4.379661,-2.522531,6.272432,1.690209],[-8.690763,8.319231,0.263327,-2.592335,2.924155,-8.049182,-9.584148,-1.413107,-8.773113,9.897629,-7.085695,4.353897],[-6.602829,3.875438,7.345640,9.761781,2.075754,-0.328319,-1.009795,-8.699919,1.120847,2.317028,2.277920,7.171369],[-5.355286,6.594150,7.417311,-8.818600,-3.748087,5.312464,-0.673162,2.988387,7.978665,3.648089,4.458619,-5.881529],[-3.454722,-5.927778,6.859997,6.521494,-8.235436,-2.350175,3.070948,5.236943,-0.721429,3.946786,1.864525,-5.854027]],[[0.773436,-8.521949,-1.696407,5.141642,-4.596361,-6.991384,-9.481390,-7.263205,-8.449737,-8.595587,0.239422,0.371809],[-1.341957,0.192792,-7.902008,8.939118,8.458862,-0.243841,-9.648528,-7.080887,5.488548,-1.958924,-0.150603,4.169891],[4.872343,-7.460393,5.932773,-8.045268,3.677559,-6.464786,-5.383984,2.648594,6.710096,2.323096,4.341250,6.864602],[-7.109749,-8.023041,-7.885969,-8.188768,8.334756,-8.461643,-1.482912,2.611762,-1.959988,3.766667,5.933753,-2.939861],[-3.675576,-4.358090,6.288475,2.389928,8.982381,-0.135978,7.935150,8.058529,-7.206605,9.528515,-8.554348,-1.626282]],[[-2.679395,2.308097,-9.862755,2.209783,0.859966,-0.433010,1.676177,1.746594,-4.369618,-1.219926,-8.939905,-0.117331],[4.099328,5.496879,-5.493455,9.832429,-9.440197,-6.771738,-4.089918,0.082818,7.201780,4.917919,5.978701,3.924216],[-9.421938,9.513605,0.757659,3.705676,-8.158234,9.306489,-3.935642,9.844414,8.122158,5.678607,5.879271,-9.712963],[2.082763,5.391150,-9.004869,-8.671338,-6.396660,4.035863,4.477233,6.871424,1.408687,5.147721,3.210700,-0.536059],[-0.021642,-0.524080,0.883457,8.096823,-7.198855,4.883235,0.051302,-6.970845,-5.996863,-8.810853,-8.472153,7.289007]]], dtype = "float32")#candidate|1031|(10, 5, 12)|const|float32
bop_1032 = relay.floor_divide(var_1030.astype('float32'), relay.reshape(const_1031.astype('float32'), relay.shape_of(var_1030))) # shape=(10, 5, 12)
output = relay.Tuple([bop_1032,])
output2 = relay.Tuple([bop_1032,])
func_1049 = relay.Function([var_1030,], output)
mod['func_1049'] = func_1049
mod = relay.transform.InferType()(mod)
mutated_mod['func_1049'] = func_1049
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1050 = relay.var("var_1050", dtype = "float32", shape = (10, 5, 12))#candidate|1050|(10, 5, 12)|var|float32
func_1049_call = mutated_mod.get_global_var('func_1049')
call_1051 = func_1049_call(var_1050)
output = call_1051
func_1052 = relay.Function([var_1050], output)
mutated_mod['func_1052'] = func_1052
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1083 = relay.var("var_1083", dtype = "int32", shape = ())#candidate|1083|()|var|int32
var_1084 = relay.var("var_1084", dtype = "int32", shape = (12, 12, 9))#candidate|1084|(12, 12, 9)|var|int32
bop_1085 = relay.bitwise_and(var_1083.astype('int32'), var_1084.astype('int32')) # shape=(12, 12, 9)
func_1049_call = mod.get_global_var('func_1049')
func_1052_call = mutated_mod.get_global_var('func_1052')
var_1108 = relay.var("var_1108", dtype = "float32", shape = (600,))#candidate|1108|(600,)|var|float32
call_1107 = relay.TupleGetItem(func_1049_call(relay.reshape(var_1108.astype('float32'), [10, 5, 12])), 0)
call_1109 = relay.TupleGetItem(func_1052_call(relay.reshape(var_1108.astype('float32'), [10, 5, 12])), 0)
bop_1110 = relay.logical_or(var_1084.astype('bool'), relay.reshape(bop_1085.astype('bool'), relay.shape_of(var_1084))) # shape=(12, 12, 9)
bop_1122 = relay.greater_equal(bop_1110.astype('bool'), var_1083.astype('bool')) # shape=(12, 12, 9)
func_1049_call = mod.get_global_var('func_1049')
func_1052_call = mutated_mod.get_global_var('func_1052')
call_1127 = relay.TupleGetItem(func_1049_call(relay.reshape(call_1107.astype('float32'), [10, 5, 12])), 0)
call_1128 = relay.TupleGetItem(func_1052_call(relay.reshape(call_1107.astype('float32'), [10, 5, 12])), 0)
output = relay.Tuple([call_1107,var_1108,bop_1122,call_1127,])
output2 = relay.Tuple([call_1109,var_1108,bop_1122,call_1128,])
func_1132 = relay.Function([var_1083,var_1084,var_1108,], output)
mod['func_1132'] = func_1132
mod = relay.transform.InferType()(mod)
mutated_mod['func_1132'] = func_1132
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1132_call = mutated_mod.get_global_var('func_1132')
var_1134 = relay.var("var_1134", dtype = "int32", shape = ())#candidate|1134|()|var|int32
var_1135 = relay.var("var_1135", dtype = "int32", shape = (12, 12, 9))#candidate|1135|(12, 12, 9)|var|int32
var_1136 = relay.var("var_1136", dtype = "float32", shape = (600,))#candidate|1136|(600,)|var|float32
call_1133 = func_1132_call(var_1134,var_1135,var_1136,)
output = call_1133
func_1137 = relay.Function([var_1134,var_1135,var_1136,], output)
mutated_mod['func_1137'] = func_1137
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1270 = relay.var("var_1270", dtype = "uint64", shape = (6, 1, 7))#candidate|1270|(6, 1, 7)|var|uint64
var_1271 = relay.var("var_1271", dtype = "uint64", shape = (6, 15, 7))#candidate|1271|(6, 15, 7)|var|uint64
bop_1272 = relay.bitwise_or(var_1270.astype('uint64'), var_1271.astype('uint64')) # shape=(6, 15, 7)
output = relay.Tuple([bop_1272,])
output2 = relay.Tuple([bop_1272,])
func_1280 = relay.Function([var_1270,var_1271,], output)
mod['func_1280'] = func_1280
mod = relay.transform.InferType()(mod)
mutated_mod['func_1280'] = func_1280
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1280_call = mutated_mod.get_global_var('func_1280')
var_1282 = relay.var("var_1282", dtype = "uint64", shape = (6, 1, 7))#candidate|1282|(6, 1, 7)|var|uint64
var_1283 = relay.var("var_1283", dtype = "uint64", shape = (6, 15, 7))#candidate|1283|(6, 15, 7)|var|uint64
call_1281 = func_1280_call(var_1282,var_1283,)
output = call_1281
func_1284 = relay.Function([var_1282,var_1283,], output)
mutated_mod['func_1284'] = func_1284
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1314 = relay.const([[[True,False,False,True,True,True,False,True,False,False,False,True,True,True,True,True],[False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,True]],[[False,False,False,True,True,True,True,False,True,True,True,False,False,False,True,False],[False,False,True,False,False,True,True,False,False,False,True,False,False,True,False,False]],[[True,False,True,True,True,False,True,True,False,False,True,False,True,True,True,True],[True,False,False,True,False,True,True,False,True,True,True,True,False,True,True,False]],[[True,True,True,True,True,False,False,True,False,True,False,True,False,True,True,True],[True,True,True,True,False,False,False,False,True,True,True,False,False,True,False,True]],[[False,True,False,True,True,False,True,True,False,True,True,False,False,False,False,True],[True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,False]],[[False,False,True,True,False,False,False,False,True,True,True,True,True,True,True,False],[False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False]],[[False,False,True,True,False,False,True,False,True,False,True,True,True,False,True,True],[False,True,True,True,True,True,False,True,True,True,False,True,False,False,False,False]],[[False,True,True,True,True,True,True,True,True,False,False,True,True,True,False,True],[True,True,True,False,True,True,True,False,True,True,True,True,False,True,True,False]],[[True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False],[False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,True]],[[False,True,False,False,True,True,False,False,True,False,False,False,True,False,False,False],[False,False,True,False,True,True,True,False,False,True,True,False,True,True,False,True]],[[False,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True],[False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True]],[[True,True,False,False,True,False,True,True,True,True,True,True,False,True,False,False],[True,False,False,True,True,True,False,True,True,True,True,False,False,False,True,True]],[[True,True,True,False,False,False,True,True,False,True,False,False,False,True,False,True],[True,True,True,False,False,True,True,True,False,False,True,False,False,False,True,True]],[[True,False,True,True,True,True,False,True,False,True,True,False,False,True,False,True],[False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,False]],[[True,False,True,False,True,False,True,True,True,False,False,True,False,False,False,False],[True,True,True,True,True,False,True,False,True,True,False,True,False,True,True,True]]], dtype = "bool")#candidate|1314|(15, 2, 16)|const|bool
var_1315 = relay.var("var_1315", dtype = "bool", shape = (15, 2, 16))#candidate|1315|(15, 2, 16)|var|bool
bop_1316 = relay.logical_or(const_1314.astype('bool'), relay.reshape(var_1315.astype('bool'), relay.shape_of(const_1314))) # shape=(15, 2, 16)
func_1280_call = mod.get_global_var('func_1280')
func_1284_call = mutated_mod.get_global_var('func_1284')
var_1328 = relay.var("var_1328", dtype = "uint64", shape = (7, 6))#candidate|1328|(7, 6)|var|uint64
const_1329 = relay.const([[-8,-6,-7],[-4,-1,7],[6,5,-2],[3,4,-3],[-8,-3,5],[-8,4,5],[4,-8,-10],[6,-5,-4],[-7,-10,-6],[7,-4,-8],[-6,1,2],[-3,-5,1],[6,-1,-10],[7,-3,-10],[1,-5,-8],[3,1,5],[-2,-2,-7],[-4,2,-3],[2,2,10],[6,-9,-6],[6,-10,7],[-4,2,-8],[1,-4,-7],[7,-9,-5],[-1,10,-4],[7,-8,-8],[-2,6,8],[-7,-7,-4],[-9,4,-2],[-7,-1,-2],[-1,-4,-6],[6,5,-6],[-5,4,3],[4,10,10],[-10,4,-1],[-6,-7,-3],[-5,3,-8],[-4,3,3],[-9,9,-9],[-3,3,-10],[-6,-9,1],[6,-1,-7],[-1,2,-3],[1,5,1],[-7,5,-2],[6,-3,10],[7,1,8],[-6,3,2],[-6,5,-3],[7,1,-9],[7,2,10],[-6,-10,4],[-7,9,-2],[-5,6,-2],[-8,-8,-1],[5,-2,-7],[-1,-9,2],[-10,-6,10],[-4,8,6],[-10,9,5],[-4,-7,9],[9,9,-10],[-5,-1,-1],[-1,-5,-6],[9,5,-1],[9,3,2],[-9,10,2],[8,-2,8],[-9,10,-8],[-5,2,8],[-2,-1,-10],[-7,-7,-7],[-8,-6,-4],[-6,3,-9],[2,-9,-3],[2,-3,-2],[-7,2,-7],[4,-5,-8],[5,6,-9],[9,8,-8],[7,8,-4],[-3,-9,-6],[5,2,10],[-3,-3,3],[1,-3,-1],[1,2,6],[-8,-6,3],[3,-2,9],[6,-7,10],[-9,3,1],[-5,-10,2],[3,-6,-6],[1,-8,-6],[-6,-1,-1],[4,-6,-4],[-9,-9,-7],[8,10,-7],[2,8,2],[8,-8,3],[-2,1,-2],[-4,5,-3],[-6,-10,-4],[5,-8,5],[-6,-8,-2],[6,-7,-3],[-2,-3,4],[-9,6,7],[10,-3,4],[8,3,-6],[8,10,-9],[-6,3,9],[-5,8,-10],[9,-6,8],[-2,-1,4],[-1,-9,8],[5,-10,3],[-4,8,8],[-6,9,1],[3,4,10],[1,-10,2],[2,-2,-6],[2,1,-3],[-9,8,-2],[-3,-6,-8],[7,-10,2],[5,-1,-6],[1,-8,-7],[3,-9,-4],[-2,3,6],[-6,1,-9],[8,-6,-10],[6,10,2],[-3,3,-8],[3,4,9],[9,4,-1],[-4,-5,-8],[3,-6,7],[2,5,-4],[-2,4,-6],[9,-10,5],[4,-2,2],[-5,3,-9],[9,2,7],[-6,4,-9],[3,-6,-9],[-4,-2,3],[8,10,9],[-4,1,2],[-4,8,-8],[-10,3,6],[1,-6,-8],[-9,-8,10],[8,-6,9],[-6,-8,-5],[-1,9,-3],[7,-5,-6],[-1,1,-6],[5,-4,3],[-10,-8,-5],[-5,8,-10],[7,4,10],[8,7,-1],[10,-6,-8],[10,2,-4],[-3,-3,3],[1,-3,-3],[-6,-4,-10],[-5,10,7],[-2,6,6],[-1,9,9],[9,3,6],[-3,-6,-5],[-10,1,2],[8,4,8],[-5,7,2],[7,8,3],[5,6,3],[-2,-4,4],[8,1,-7],[-1,9,6],[6,7,3],[-9,6,-2],[9,-1,-4],[10,-9,5],[4,-8,-4],[8,-10,-5],[3,-3,-9],[7,6,2],[4,-3,7],[-7,-2,5],[9,-7,10],[-2,-3,-3],[10,2,-9],[8,-8,-4],[-9,-7,-6],[-10,-8,6],[8,-1,4],[5,4,-10],[2,6,-10],[-7,1,-1],[-6,4,7],[-2,-9,-6],[-8,5,-6],[7,-4,10],[-3,-5,10],[-3,-7,10],[8,-9,-8],[-10,-3,10],[-1,-9,-10],[-8,-7,9]], dtype = "uint64")#candidate|1329|(210, 3)|const|uint64
call_1327 = relay.TupleGetItem(func_1280_call(relay.reshape(var_1328.astype('uint64'), [6, 1, 7]), relay.reshape(const_1329.astype('uint64'), [6, 15, 7]), ), 0)
call_1330 = relay.TupleGetItem(func_1284_call(relay.reshape(var_1328.astype('uint64'), [6, 1, 7]), relay.reshape(const_1329.astype('uint64'), [6, 15, 7]), ), 0)
func_1132_call = mod.get_global_var('func_1132')
func_1137_call = mutated_mod.get_global_var('func_1137')
const_1334 = relay.const(2, dtype = "int32")#candidate|1334|()|const|int32
var_1335 = relay.var("var_1335", dtype = "int32", shape = (1296,))#candidate|1335|(1296,)|var|int32
var_1336 = relay.var("var_1336", dtype = "float32", shape = (600,))#candidate|1336|(600,)|var|float32
call_1333 = relay.TupleGetItem(func_1132_call(relay.reshape(const_1334.astype('int32'), []), relay.reshape(var_1335.astype('int32'), [12, 12, 9]), relay.reshape(var_1336.astype('float32'), [600,]), ), 1)
call_1337 = relay.TupleGetItem(func_1137_call(relay.reshape(const_1334.astype('int32'), []), relay.reshape(var_1335.astype('int32'), [12, 12, 9]), relay.reshape(var_1336.astype('float32'), [600,]), ), 1)
func_1280_call = mod.get_global_var('func_1280')
func_1284_call = mutated_mod.get_global_var('func_1284')
call_1357 = relay.TupleGetItem(func_1280_call(relay.reshape(var_1328.astype('uint64'), [6, 1, 7]), relay.reshape(const_1329.astype('uint64'), [6, 15, 7]), ), 0)
call_1358 = relay.TupleGetItem(func_1284_call(relay.reshape(var_1328.astype('uint64'), [6, 1, 7]), relay.reshape(const_1329.astype('uint64'), [6, 15, 7]), ), 0)
var_1362 = relay.var("var_1362", dtype = "bool", shape = (15, 2, 16))#candidate|1362|(15, 2, 16)|var|bool
bop_1363 = relay.less(bop_1316.astype('bool'), relay.reshape(var_1362.astype('bool'), relay.shape_of(bop_1316))) # shape=(15, 2, 16)
func_1049_call = mod.get_global_var('func_1049')
func_1052_call = mutated_mod.get_global_var('func_1052')
call_1368 = relay.TupleGetItem(func_1049_call(relay.reshape(var_1336.astype('float32'), [10, 5, 12])), 0)
call_1369 = relay.TupleGetItem(func_1052_call(relay.reshape(var_1336.astype('float32'), [10, 5, 12])), 0)
output = relay.Tuple([call_1327,var_1328,const_1329,call_1333,const_1334,var_1335,var_1336,call_1357,bop_1363,call_1368,])
output2 = relay.Tuple([call_1330,var_1328,const_1329,call_1337,const_1334,var_1335,var_1336,call_1358,bop_1363,call_1369,])
func_1370 = relay.Function([var_1315,var_1328,var_1335,var_1336,var_1362,], output)
mod['func_1370'] = func_1370
mod = relay.transform.InferType()(mod)
var_1371 = relay.var("var_1371", dtype = "bool", shape = (15, 2, 16))#candidate|1371|(15, 2, 16)|var|bool
var_1372 = relay.var("var_1372", dtype = "uint64", shape = (7, 6))#candidate|1372|(7, 6)|var|uint64
var_1373 = relay.var("var_1373", dtype = "int32", shape = (1296,))#candidate|1373|(1296,)|var|int32
var_1374 = relay.var("var_1374", dtype = "float32", shape = (600,))#candidate|1374|(600,)|var|float32
var_1375 = relay.var("var_1375", dtype = "bool", shape = (15, 2, 16))#candidate|1375|(15, 2, 16)|var|bool
output = func_1370(var_1371,var_1372,var_1373,var_1374,var_1375,)
func_1376 = relay.Function([var_1371,var_1372,var_1373,var_1374,var_1375,], output)
mutated_mod['func_1376'] = func_1376
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1774 = relay.var("var_1774", dtype = "int64", shape = (16, 11, 7))#candidate|1774|(16, 11, 7)|var|int64
var_1775 = relay.var("var_1775", dtype = "int64", shape = (16, 11, 7))#candidate|1775|(16, 11, 7)|var|int64
bop_1776 = relay.greater(var_1774.astype('bool'), relay.reshape(var_1775.astype('bool'), relay.shape_of(var_1774))) # shape=(16, 11, 7)
output = bop_1776
output2 = bop_1776
func_1780 = relay.Function([var_1774,var_1775,], output)
mod['func_1780'] = func_1780
mod = relay.transform.InferType()(mod)
var_1781 = relay.var("var_1781", dtype = "int64", shape = (16, 11, 7))#candidate|1781|(16, 11, 7)|var|int64
var_1782 = relay.var("var_1782", dtype = "int64", shape = (16, 11, 7))#candidate|1782|(16, 11, 7)|var|int64
output = func_1780(var_1781,var_1782,)
func_1783 = relay.Function([var_1781,var_1782,], output)
mutated_mod['func_1783'] = func_1783
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1871 = relay.var("var_1871", dtype = "float32", shape = ())#candidate|1871|()|var|float32
const_1872 = relay.const([[[-8.614913,3.740050,5.356294,8.308743,-2.566162,-9.664930,4.408927,5.957961,-8.722150]],[[9.637588,7.747515,-6.100866,-5.280176,8.592428,0.040049,-5.829793,-6.708736,-9.705909]],[[-9.853696,2.469244,-6.783207,-5.038854,-7.044537,6.422225,-1.168347,5.534144,-5.001590]],[[-8.079904,-5.618685,-4.583292,-0.057408,1.712616,-9.652548,5.240561,1.374559,-1.512353]],[[-0.923133,8.636666,-9.340005,3.137016,5.081264,5.580445,4.633026,-7.178097,6.368314]],[[3.324095,-9.374668,-7.291715,-0.566034,0.435464,3.223911,8.756067,-4.230840,-4.425594]],[[1.929308,-8.416919,8.500038,-6.532240,3.515537,-2.021036,4.146458,1.801999,-5.998233]],[[2.207333,2.473178,-5.964644,-1.340464,-7.324535,0.864146,9.623660,4.865662,8.789122]],[[3.142820,2.102566,4.540648,0.096671,2.474546,-5.217918,3.642643,-8.242871,-3.035218]],[[8.889242,-9.861875,9.946030,-4.283993,-0.183882,-8.608547,-5.981408,1.156178,4.105592]],[[7.613496,8.781301,0.268699,-4.680963,7.778611,9.186717,-9.320346,-6.656445,-2.670799]],[[-5.602496,4.038882,-4.797646,-4.535839,5.393607,-5.077886,-3.014715,-3.080442,-7.668564]],[[1.832939,-3.053714,4.786738,-4.708168,-6.665028,-7.844104,8.735942,9.533966,3.371136]]], dtype = "float32")#candidate|1872|(13, 1, 9)|const|float32
bop_1873 = relay.floor_divide(var_1871.astype('float32'), const_1872.astype('float32')) # shape=(13, 1, 9)
func_1370_call = mod.get_global_var('func_1370')
func_1376_call = mutated_mod.get_global_var('func_1376')
const_1877 = relay.const([[False],[True],[True],[True],[True],[True],[False],[True],[False],[True],[True],[False],[True],[False],[True],[True],[True],[False],[True],[False],[True],[True],[True],[False],[False],[True],[False],[False],[True],[True],[True],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[False],[False],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[False],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[True],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[False],[False],[False],[False],[True],[True],[True],[True],[False],[False],[True],[True],[False],[True],[False],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[False],[True],[True],[False],[True],[True],[False],[True],[True],[True],[True],[True],[False],[False],[True],[False],[True],[False],[False],[True],[True],[True],[True],[True],[False],[False],[True],[True],[False],[True],[True],[False],[False],[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[False],[False],[False],[True],[True],[True],[False],[True],[False],[True],[True],[True],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[True],[False],[False],[False],[False],[False],[False],[False],[True],[False],[False],[True],[True],[True],[False],[True],[False],[False],[True],[False],[True],[True],[False],[False],[False],[True],[True],[True],[False],[False],[True],[True],[False],[True],[False],[False],[True],[False],[False],[False],[False],[True],[True],[False],[False],[True],[True],[True],[False],[False],[True],[True],[True],[True],[False],[False],[False],[True],[True],[False],[True],[False],[True],[True],[False],[True],[True],[True],[True],[False],[False],[False],[True],[True],[False],[True],[True],[True],[False],[True],[False],[True],[False],[True],[False],[False],[True],[False],[True],[False],[False],[False],[True],[False],[True],[True],[True],[True],[False],[True],[True],[False],[True],[False],[False],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True],[False],[False],[False],[True],[False],[True],[False],[True],[False],[False],[True],[True],[False],[False],[False],[False],[False],[False],[True],[False],[False],[True],[True],[False],[False],[False],[False],[True],[True],[True],[False],[True],[True],[False],[True],[True],[False],[True],[False],[False],[False],[True],[False],[False],[True],[False],[False],[True],[False],[True],[False],[True],[True],[True],[True],[True],[True],[True],[False],[False],[False],[False],[False],[True],[False],[True],[False],[False],[False],[True],[True],[False],[False],[True],[False],[False],[True],[False],[True],[True],[False],[True],[False],[True],[True],[True],[False],[False],[False],[False],[True],[False],[False],[True],[True],[False],[False],[False],[True],[False],[True],[False],[True],[True],[True],[True],[True],[False],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True],[False],[False],[True],[True],[False],[True],[False],[False],[True],[False],[False],[False],[False],[True],[False],[True],[False],[True],[True],[False],[True],[True],[True],[True],[True],[True],[True],[False],[True],[False],[True],[True],[False],[False],[False],[True],[True],[False],[True],[False],[False],[True],[True],[False],[False],[True],[False],[False],[True],[True],[False],[False],[False],[True],[True],[True],[True]], dtype = "bool")#candidate|1877|(480, 1)|const|bool
const_1878 = relay.const([-3,-5,4,6,-6,-10,4,-5,9,-8,10,-2,-3,-4,-7,3,9,10,9,-7,2,8,-9,-6,-6,1,-8,5,-1,4,3,-9,-9,-6,-2,3,-2,1,6,10,-2,8], dtype = "uint64")#candidate|1878|(42,)|const|uint64
const_1879 = relay.const([-1,1,4,5,6,2,-2,7,-10,4,8,9,-2,10,2,4,-10,1,8,-9,9,8,-8,7,-4,1,3,-2,2,-6,5,-8,-6,9,4,-2,-9,-6,-5,-7,6,-3,-8,3,-6,4,10,6,-2,1,5,1,-2,-1,2,8,-5,-4,-5,-5,-5,-10,-3,-10,-3,1,2,2,-2,3,-10,-9,-1,10,-9,6,-3,10,5,1,1,-6,7,-9,10,1,6,-6,5,4,10,2,6,-9,4,-9,-1,9,2,5,3,-1,-9,5,-5,-10,7,-8,5,-4,-7,-3,-7,-6,-2,10,-8,4,9,1,-10,-1,-4,2,6,8,8,-2,4,5,-1,-1,5,6,7,-10,-10,-6,1,4,3,-3,-5,-7,2,-5,6,-2,5,6,7,1,-8,4,2,-9,1,-7,6,5,7,-3,-8,-3,-2,7,5,-7,-4,4,-8,-10,-4,5,-2,-10,-10,9,7,-3,10,-8,-9,-2,7,-8,1,-6,-6,7,-1,6,-9,1,8,4,-7,7,-9,-8,4,-1,-5,-10,-8,-10,3,2,10,7,-9,-8,-3,-10,-1,-9,4,2,7,-10,-8,-5,6,-2,-1,6,9,-4,-8,-7,5,-6,5,8,-9,-8,1,-5,-3,3,7,1,3,8,-2,-2,10,3,5,7,2,-8,-3,9,-1,7,6,-4,5,-2,-9,-1,-10,2,8,9,9,4,-10,5,9,-1,-1,-4,7,1,-8,-4,-9,-6,-8,-10,2,-10,-8,6,-8,-10,10,-5,-2,4,1,10,4,8,3,-10,1,-7,-6,6,-10,5,2,8,8,-4,7,10,4,-3,5,1,-5,5,-3,-7,7,4,4,3,-5,-3,-3,-4,-1,3,2,10,-4,1,5,-2,-2,2,-10,9,6,-8,7,7,10,-3,-5,4,-9,-9,-4,7,-9,3,-5,-7,-6,-1,8,10,7,-4,8,2,-4,-10,-3,-4,5,6,-2,3,9,-3,-2,-8,-8,-1,-10,-4,5,-3,-10,-3,-6,6,-1,8,-3,-8,5,5,-8,-10,3,-5,7,-9,6,-1,-10,-2,8,-2,10,7,5,9,-10,4,-2,-4,-6,5,4,6,-4,8,8,-2,-1,6,-3,-1,-3,-8,1,-5,4,1,-9,-3,-5,5,-2,-4,8,-1,6,-3,7,5,3,7,3,5,-4,4,-9,7,-6,6,-2,4,-9,6,-8,3,2,-9,9,6,2,5,9,-5,-2,10,8,-9,-10,-2,-5,-10,-7,1,-2,-9,6,-8,-5,-1,-3,-10,-2,-7,-3,1,-4,-8,-1,-8,7,7,-1,-10,7,-3,10,-1,-2,7,7,-7,10,-3,4,1,-9,5,-5,-8,4,-5,5,-1,6,4,7,-4,5,-5,9,10,-6,7,8,6,-9,10,-8,-10,-10,-8,8,-1,7,1,4,3,-6,3,-8,-10,1,10,3,-6,6,10,-3,-6,9,-8,1,-2,4,3,-6,8,4,-7,-7,10,4,-9,2,-9,5,5,9,-2,-5,-4,7,8,-9,8,7,-1,-1,2,-6,-6,8,-6,9,9,-3,4,-4,-3,7,-9,3,-9,-10,6,10,8,3,7,2,-9,9,-6,6,-4,-3,9,-4,-10,9,-2,-10,-9,6,9,1,4,-9,-1,-2,-2,-9,-2,-1,-9,10,9,4,3,5,-8,7,-6,-4,5,-3,4,-8,-7,9,-9,-9,-9,8,5,-3,10,8,-10,5,8,-10,2,-9,9,8,8,-6,-2,-8,-10,3,5,-7,4,10,-10,4,-10,-4,2,-7,-9,9,9,-10,10,-10,5,-2,7,-10,-2,-10,9,3,6,-4,-5,6,-2,-3,-4,-9,-10,9,-1,-6,-5,-7,-10,8,10,-1,-6,-9,5,-1,6,-7,1,6,5,6,8,-6,6,4,-5,3,2,-10,-7,-6,-2,-1,-1,4,-1,-9,6,9,7,-9,10,8,5,1,-10,5,3,5,-5,3,-9,-4,6,-6,9,-7,-7,-3,4,4,-2,-6,-5,1,7,-5,-4,1,4,-3,5,4,-7,-6,-2,5,-9,10,-9,5,3,-4,7,-7,5,4,3,3,6,1,2,-1,-6,-7,10,-2,-10,-1,4,-9,-1,-10,-2,4,-6,3,2,9,5,-4,-9,-9,5,-7,-10,-7,-1,5,3,9,-8,-5,8,-8,-3,-7,1,1,-6,4,-5,8,9,9,-5,-1,-5,-3,2,6,-6,-8,-7,-10,7,10,4,-10,-9,6,1,7,6,9,-1,-3,-5,3,-10,-6,8,1,-4,-6,-3,-9,2,10,-5,-5,-3,-5,-1,-4,-3,10,-8,5,3,7,6,10,-3,5,1,-6,8,7,-2,-2,3,6,2,-3,3,-1,-7,6,-1,-6,2,-9,5,-2,4,2,6,1,1,5,6,-2,6,1,-2,-10,-10,5,-2,4,10,7,6,-4,-2,1,-4,10,-5,-7,-7,9,7,-7,-8,-9,9,-6,2,1,10,1,-7,4,-2,-6,2,-10,-7,10,-8,-8,2,9,6,9,4,-10,3,-2,8,5,3,-9,-10,10,7,-2,-1,-5,5,-1,-6,-9,-6,5,10,4,-3,4,1,3,1,6,-10,-9,5,-3,4,1,4,-3,-3,-6,9,4,-5,5,2,-1,2,-5,-3,-1,2,-6,7,-9,-6,1,-8,-3,-9,10,-2,4,-3,3,9,1,-6,-6,-4,-5,3,-6,-10,3,-9,-1,-3,7,5,-10,-5,-4,7,6,-6,-4,9,-9,10,10,-4,-10,-7,-3,-8,5,-5,6,10,7,-5,6,-2,-4,-6,2,5,-6,-3,-5,3,4,-10,4,-2,-9,-4,2,-1,-10,3,6,8,-10,-3,9,6,8,4,7,4,3,-2,-6,1,9,-10,2,9,6,-9,-9,-10,3,10,-8,-6,4,5,-1,6,2,7,3,-10,-9,5,5,7,-7,-8,3,7,-3,7,-3,-6,-10,-1,-10,-3,-9,6,-2,-4,2,-8,-7,2,9,6,6,-9,6,1,-2,-4,1,-6,7,-3,-1,5,6,-8,9,-9,7,-1,-1,-10,5,3,-5,10,-1,2,4,10,5,8,-5,8,6,-6,2,-9,9,4,3,8,8,5,-7,5,6,-5,10,-2,5,-5,-3,7,-8,-10,6,4,9,-8,-6,-8,6,-1,1,7,1,-6,-6,-8,3,-7,5,-2,1,-9,-3,-1,-4,-7,8,-10,6,5,8,-8,9,-9,7,7,3,6,6,-7,10,3,8,8,1,5,5,8,9,8,-1,3,-4,-2,-6,1,2,5,9,-1,-5,10,10,-5,7,4,-8,-2,3,3,2,5,-7,-2,-4,-9,-9,-10,-6,9,-6,-9,-7,-1,4,2,-7,10,7,-4,-4,9,-9,6,4,9,8,6,-1,-8,10,-3,-6,5,-4,6,10,-5,6,6,-7,-10,3,2], dtype = "int32")#candidate|1879|(1296,)|const|int32
const_1880 = relay.const([-9.065524,-3.156258,3.283750,-6.384693,-3.590703,0.988052,2.068653,-0.859224,5.717205,-6.901499,2.776271,-4.307883,7.601192,-8.122120,-2.706748,8.058161,-1.243145,-6.098096,8.200913,4.436691,-2.784922,7.687648,2.227060,9.853703,5.359431,4.859146,-8.922163,-0.693758,1.748160,-7.846886,1.393422,-8.864648,7.412971,5.238226,-9.009918,-9.018616,7.971802,-4.146867,5.559516,7.116654,-0.488883,-7.716897,5.007612,-4.632353,1.620865,-2.309534,-2.684051,-8.055268,1.777531,7.534224,3.524652,9.372031,0.355516,3.385483,1.320802,6.804629,8.260149,-6.653159,0.246860,5.279686,6.341160,0.551993,-7.672223,-3.452829,6.971742,2.420063,5.671847,-7.365036,2.431829,-5.879769,-7.139137,-3.845400,9.778494,-1.686421,3.454347,9.305888,-5.644175,-6.509668,0.147009,-3.611878,-0.504097,7.178106,-5.689755,4.573856,8.955980,0.163721,7.418444,7.755050,-2.583661,3.353384,2.146918,8.201412,0.483093,-8.056531,-3.973305,-0.842998,5.241817,-1.657429,4.518142,9.039842,8.768580,-3.099293,-3.163427,3.204106,-5.585506,-8.571337,-8.214122,0.105214,2.923566,-6.672845,-3.880749,6.995318,-8.403375,-4.509302,3.360354,-5.819140,-4.149688,3.768588,-4.838632,4.461347,-5.856590,-6.903442,6.064981,-7.445146,3.085780,-8.040540,7.605479,1.637465,-7.470704,4.619547,1.782761,-3.533059,8.515382,-9.144901,4.701705,-0.380722,0.879287,-2.312694,-3.496970,-7.627991,6.519924,3.194377,-1.815794,-1.568390,-5.487037,-5.264520,5.905607,6.533345,-3.667275,-4.305935,-8.253061,2.960807,9.398029,-3.895965,3.855780,1.649983,-4.831212,3.741052,-8.877113,4.182122,-6.675628,-0.105999,-6.714155,-7.675033,-9.617906,-7.533840,2.684811,-6.829445,4.647173,-4.220398,3.514233,9.007441,-4.604328,-2.781922,-1.326761,-7.647667,8.431394,-7.807709,-8.167875,5.501068,6.769004,7.630328,1.679899,3.223135,4.666469,7.944213,-8.106498,-8.279315,-6.548306,8.385336,-7.262458,3.825558,-9.747221,1.387917,-3.989859,2.616692,7.864866,-7.109251,6.917899,5.920885,7.734364,1.821471,-6.026309,-4.603074,7.709625,9.347667,5.133675,6.699798,1.449131,7.368077,4.505494,6.831031,8.570149,-0.994883,-0.348258,1.818370,-3.362648,6.447353,-4.937732,2.055552,8.262698,9.827224,6.021866,-2.390949,-5.596094,-8.995021,7.695128,-9.874585,1.723854,7.155970,-5.260715,5.627169,7.854607,4.670264,3.700837,6.168249,-7.681483,4.499629,-0.834802,-2.363162,6.512883,-5.190763,-8.467940,-4.359898,9.711446,3.469965,-0.464797,7.355301,1.840488,-5.248436,6.474419,0.978121,-4.572808,-9.025519,9.906280,7.498625,2.666051,6.778234,-5.944802,-8.788382,1.141879,-1.510118,-4.195427,2.308869,-7.097821,-7.748168,-0.799735,3.689128,9.305764,0.841296,-4.961397,2.834753,-6.464194,-5.980010,-1.772043,7.326723,-0.156643,-3.117898,3.210018,8.126897,6.399520,2.679595,1.183663,-8.412727,-6.066862,9.652776,4.770508,2.159032,0.484751,-5.548646,-4.395677,0.922024,9.599510,2.182021,-1.061060,1.775317,9.711403,6.031080,9.097992,5.644931,0.053329,1.928942,6.997812,-6.697165,-0.701574,4.421834,-5.702177,1.376446,-0.215834,-3.230423,5.974917,-8.044679,5.072799,-6.471325,0.453158,-5.460484,-8.781583,0.308024,-3.482921,5.193555,7.451245,1.543076,8.079701,0.672233,-1.821869,-3.616832,9.377986,-1.113209,-9.367097,-9.854590,-7.432341,-5.124378,-5.998348,-2.221574,-3.037634,8.477119,-2.129086,8.743910,6.317907,3.178686,6.387225,-2.761756,-5.245070,6.078082,4.090701,9.067402,-1.974616,-4.076402,7.736139,-6.099892,-4.521011,1.572654,-3.298999,0.756002,-3.936011,5.692769,-2.130745,-6.343655,-6.822618,-8.311763,5.362240,9.546132,3.785910,-1.934756,7.180349,-9.527133,-1.216922,-2.602387,2.504193,8.974388,8.135242,7.235417,-3.905667,-0.989251,0.322785,-2.456580,-2.680105,-9.583029,1.770641,7.225724,9.660612,1.396657,9.998290,3.380715,0.278581,-6.121431,8.436929,-1.674693,-2.114465,3.354074,4.733664,-7.210749,6.973550,-2.663357,-8.857404,7.944026,1.063958,3.989726,3.819531,8.394260,0.524783,5.939785,9.867453,-5.541400,-3.468996,7.460511,1.552360,-3.061321,9.424808,-7.391782,-7.563472,8.398954,-1.675539,-2.636416,1.724238,-4.670281,-2.980874,-3.530260,6.994542,3.437697,-3.974037,-2.189503,-7.098467,-5.068660,9.411804,9.662933,3.811392,5.275406,-1.681620,8.027457,-2.398565,-7.014215,3.827672,-2.245141,-1.287189,-9.650698,3.167572,-1.061979,1.861455,2.871972,1.253795,-5.362252,0.472833,-7.651835,-9.679127,-9.741697,2.622453,3.584261,9.129429,-1.982831,4.362369,-3.585200,0.508691,-0.443439,3.347016,0.905717,7.686255,4.194631,6.184556,-2.946845,6.280424,-4.865374,9.399796,1.171897,-5.718573,-3.624928,9.030533,-5.650928,-9.975920,5.896769,-3.642127,-9.181342,5.359797,-6.266283,-5.809620,-6.936739,2.894144,-0.325164,-1.172089,6.968696,7.139626,-1.826595,-1.908449,0.675183,0.367581,4.967367,5.120931,0.327015,8.573692,-5.529273,-2.832285,-1.232131,7.965921,6.334052,-3.742230,-7.753601,-4.645612,-6.302181,2.541740,4.652875,8.872696,-1.711943,8.292902,0.496563,-2.049038,-5.814610,-6.242018,-1.618248,4.408124,4.603044,0.400766,-0.206000,-1.696841,-4.911725,-2.643959,-8.010951,-4.255721,8.568452,9.110017,2.887682,-2.948494,-9.235217,-6.269141,-7.078791,-3.248007,5.063122,-1.586957,-6.268294,8.420244,-3.679159,-5.871870,5.924431,-6.538459,-6.520714,0.318738,0.419363,5.879301,-6.353939,-6.710712,-2.397075,-3.328349,-6.769725,2.244312,2.235763,-1.753880,-5.681093,-1.157936,8.598454,-1.713703,-6.246980,2.590306,8.502007,-2.392778,-9.976154,4.482036,3.947755,8.948931,-7.917913,-8.786695,7.785575,0.957271,-2.693532,6.631617,-2.876973,2.396862,4.653993,-1.455746,-8.789805,-8.196051,-9.540906,1.098774,7.088005,5.352881,8.729113,6.650579,-7.752183,-9.031561,-6.879765,6.655250,-0.475491,-0.684762,4.770605,-3.325987,6.875504,3.115335,-8.685203,3.400378,2.581007,4.363559,3.735521,2.517404,-4.074836,-4.245727,5.354482,6.474182,-6.622624,9.916935,2.380205,1.378315,-2.534281], dtype = "float32")#candidate|1880|(600,)|const|float32
call_1876 = relay.TupleGetItem(func_1370_call(relay.reshape(const_1877.astype('bool'), [15, 2, 16]), relay.reshape(const_1878.astype('uint64'), [7, 6]), relay.reshape(const_1879.astype('int32'), [1296,]), relay.reshape(const_1880.astype('float32'), [600,]), relay.reshape(const_1877.astype('bool'), [15, 2, 16]), ), 3)
call_1881 = relay.TupleGetItem(func_1376_call(relay.reshape(const_1877.astype('bool'), [15, 2, 16]), relay.reshape(const_1878.astype('uint64'), [7, 6]), relay.reshape(const_1879.astype('int32'), [1296,]), relay.reshape(const_1880.astype('float32'), [600,]), relay.reshape(const_1877.astype('bool'), [15, 2, 16]), ), 3)
bop_1883 = relay.bitwise_xor(call_1876.astype('int64'), const_1877.astype('int64')) # shape=(480, 600)
bop_1886 = relay.bitwise_xor(call_1881.astype('int64'), const_1877.astype('int64')) # shape=(480, 600)
output = relay.Tuple([bop_1873,const_1878,const_1879,const_1880,bop_1883,])
output2 = relay.Tuple([bop_1873,const_1878,const_1879,const_1880,bop_1886,])
func_1892 = relay.Function([var_1871,], output)
mod['func_1892'] = func_1892
mod = relay.transform.InferType()(mod)
mutated_mod['func_1892'] = func_1892
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1893 = relay.var("var_1893", dtype = "float32", shape = ())#candidate|1893|()|var|float32
func_1892_call = mutated_mod.get_global_var('func_1892')
call_1894 = func_1892_call(var_1893)
output = call_1894
func_1895 = relay.Function([var_1893], output)
mutated_mod['func_1895'] = func_1895
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2616 = relay.var("var_2616", dtype = "uint16", shape = (7, 12, 13))#candidate|2616|(7, 12, 13)|var|uint16
var_2617 = relay.var("var_2617", dtype = "uint16", shape = (7, 12, 13))#candidate|2617|(7, 12, 13)|var|uint16
bop_2618 = relay.right_shift(var_2616.astype('uint16'), relay.reshape(var_2617.astype('uint16'), relay.shape_of(var_2616))) # shape=(7, 12, 13)
var_2624 = relay.var("var_2624", dtype = "uint16", shape = (7, 12, 13))#candidate|2624|(7, 12, 13)|var|uint16
bop_2625 = relay.mod(bop_2618.astype('float32'), relay.reshape(var_2624.astype('float32'), relay.shape_of(bop_2618))) # shape=(7, 12, 13)
output = bop_2625
output2 = bop_2625
func_2631 = relay.Function([var_2616,var_2617,var_2624,], output)
mod['func_2631'] = func_2631
mod = relay.transform.InferType()(mod)
var_2632 = relay.var("var_2632", dtype = "uint16", shape = (7, 12, 13))#candidate|2632|(7, 12, 13)|var|uint16
var_2633 = relay.var("var_2633", dtype = "uint16", shape = (7, 12, 13))#candidate|2633|(7, 12, 13)|var|uint16
var_2634 = relay.var("var_2634", dtype = "uint16", shape = (7, 12, 13))#candidate|2634|(7, 12, 13)|var|uint16
output = func_2631(var_2632,var_2633,var_2634,)
func_2635 = relay.Function([var_2632,var_2633,var_2634,], output)
mutated_mod['func_2635'] = func_2635
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2824 = relay.var("var_2824", dtype = "float64", shape = (15, 1, 6))#candidate|2824|(15, 1, 6)|var|float64
uop_2825 = relay.sigmoid(var_2824.astype('float64')) # shape=(15, 1, 6)
output = uop_2825
output2 = uop_2825
func_2830 = relay.Function([var_2824,], output)
mod['func_2830'] = func_2830
mod = relay.transform.InferType()(mod)
var_2831 = relay.var("var_2831", dtype = "float64", shape = (15, 1, 6))#candidate|2831|(15, 1, 6)|var|float64
output = func_2830(var_2831)
func_2832 = relay.Function([var_2831], output)
mutated_mod['func_2832'] = func_2832
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2926 = relay.const(-2, dtype = "uint32")#candidate|2926|()|const|uint32
var_2927 = relay.var("var_2927", dtype = "uint32", shape = (10, 2, 11))#candidate|2927|(10, 2, 11)|var|uint32
bop_2928 = relay.bitwise_or(const_2926.astype('uint32'), var_2927.astype('uint32')) # shape=(10, 2, 11)
func_1370_call = mod.get_global_var('func_1370')
func_1376_call = mutated_mod.get_global_var('func_1376')
var_2936 = relay.var("var_2936", dtype = "bool", shape = (120, 4))#candidate|2936|(120, 4)|var|bool
var_2937 = relay.var("var_2937", dtype = "uint64", shape = (42,))#candidate|2937|(42,)|var|uint64
const_2938 = relay.const([7,-8,-9,-1,-6,10,-6,7,-7,-8,-10,5,-10,2,-5,7,-8,2,-3,-8,-5,-2,1,6,8,-8,-7,-4,10,-8,-4,8,1,-9,4,-5,6,-9,9,-4,-9,5,-7,-2,8,1,-6,4,-8,4,-10,2,8,-2,-5,4,-9,2,2,5,4,10,5,-1,-8,-7,-6,6,-10,-1,-5,1,-5,-1,6,5,-2,-2,-2,1,8,8,-9,-9,3,4,-6,3,9,-8,-2,5,-9,-2,-9,-1,-5,2,5,2,3,7,4,-1,-6,6,-4,-3,-7,4,-9,5,-5,-7,10,8,9,3,5,-4,4,8,-2,-1,-5,-7,1,10,10,-4,-9,6,-8,-1,4,4,7,6,-5,10,-1,6,-10,-5,6,-3,-4,2,7,-6,1,10,6,-7,10,-10,-4,-10,3,-7,9,-3,-8,-6,10,-7,-4,9,1,-8,3,2,6,-2,-1,7,8,2,9,-10,-8,2,-5,9,-6,9,-6,-9,-4,1,-1,-5,10,-4,3,-10,2,-2,-2,5,9,9,4,10,-8,-3,-9,7,-4,-10,6,10,1,-7,5,3,3,-3,-10,4,2,-9,6,4,-9,-8,4,3,2,-8,-1,2,3,-2,6,2,-5,-1,-7,2,-9,10,-10,9,-4,-8,-10,-2,6,7,-2,-10,-10,-8,5,-4,4,-8,-9,-8,-3,-10,9,-5,8,4,1,-6,6,1,-6,8,8,-4,-2,-10,9,10,-1,-10,7,8,-2,2,-8,3,-5,-2,8,10,8,-7,-9,4,1,1,-2,9,-3,3,-3,5,-7,3,-5,-5,4,-2,8,4,-2,7,-8,-9,5,-4,10,6,-8,-5,3,-6,4,9,3,-9,-10,10,-3,9,-5,-8,-2,-4,-5,-3,-1,-3,-8,6,6,8,-4,-4,-9,6,-7,9,-9,4,-4,-2,8,9,-8,7,10,9,-6,-10,-9,-1,1,10,4,3,10,4,-1,-4,-8,2,-8,4,8,-1,2,-3,-3,-4,4,-7,-5,2,4,6,7,-3,-10,1,5,-3,3,2,1,-4,-3,1,4,5,-9,1,8,-3,3,6,-5,4,7,5,-10,-2,2,3,7,3,7,-2,-7,3,10,-7,8,-6,-5,-2,-1,-10,-8,-10,-8,-10,8,2,-10,7,-6,-6,4,-1,4,8,10,10,-10,4,5,5,-8,1,3,8,2,6,-8,7,-10,7,2,7,-2,-1,5,-2,-4,8,3,-9,-2,1,9,1,-4,7,-8,9,5,6,-6,2,-3,9,8,9,10,9,-1,-9,9,-2,-2,6,10,7,2,6,-2,1,3,-10,-3,2,-1,8,9,-8,10,-8,10,6,7,-9,-9,6,2,2,-9,1,7,10,1,5,-6,2,10,-7,-10,-3,9,-8,9,8,8,8,9,9,7,-9,-9,-8,9,-6,-2,-7,-2,1,8,-9,-7,10,-6,3,-5,8,-5,6,4,2,-3,-6,-5,8,6,-8,6,-10,8,-10,8,-10,-6,7,-8,-5,-10,-8,10,8,5,3,-5,6,6,8,-5,9,5,-1,-6,4,9,-3,-7,-7,7,4,2,-7,7,4,-4,-5,-10,-9,-5,4,-4,3,8,-4,9,-8,7,9,1,-5,-6,-3,9,5,-7,-9,6,4,3,8,3,3,1,3,-7,6,-1,2,-3,3,5,-2,-6,-2,4,1,6,-7,-7,-9,-1,10,6,-1,8,-8,5,-2,8,-10,-4,10,-6,-8,-1,1,-4,3,2,6,5,-1,-5,3,-6,6,5,-1,4,8,-6,7,-10,9,-2,10,-10,2,-5,-9,-10,-3,10,8,3,1,-4,1,-7,-4,5,8,6,-1,7,-3,4,9,-8,-9,-2,-2,9,8,4,-6,-7,-6,-6,-5,-8,7,-2,7,-5,3,-9,4,2,3,-6,-7,-3,8,-2,2,9,4,-8,-3,9,10,5,-5,10,3,7,8,2,1,9,4,5,-1,-8,5,2,-5,-3,-4,-10,-6,-6,1,2,-2,7,9,3,-4,4,-8,7,5,-6,1,-3,-3,3,7,-7,-6,-4,-6,-7,-5,10,-9,-7,-4,-1,-8,-2,-5,6,10,-10,8,3,8,4,3,9,8,-8,8,7,-6,-9,-2,3,-8,8,5,-10,1,8,-6,8,2,6,5,-8,-2,4,-1,6,7,5,-7,-7,-9,-4,4,10,-10,-8,2,8,4,-8,6,-8,9,-7,10,-7,-10,3,5,-10,2,9,-5,-5,-6,7,8,7,9,-4,-7,-6,-1,9,-4,10,8,-7,-4,-3,7,4,-3,3,-2,-9,-7,6,-7,4,5,-5,-3,5,7,10,5,-9,3,-8,-8,-4,3,-3,-4,-2,-2,1,1,3,-1,4,-4,-2,-7,-2,9,-10,-5,-5,-1,-7,5,-6,-1,6,1,7,5,2,4,-4,9,9,8,-2,-10,10,6,-2,7,10,8,-3,9,-2,1,-7,-2,4,-10,-9,-5,8,6,-8,-7,-1,8,-5,-1,-9,7,-3,-2,-10,-3,-5,-9,10,10,-8,-8,2,-3,2,-6,-4,-9,-1,-4,-5,2,-5,-2,6,-3,-9,-3,7,-9,-8,4,-9,9,-5,-3,-9,-2,-5,9,6,-4,-7,7,-3,-4,3,-4,-10,4,-7,-8,3,-3,4,-8,8,-5,-10,-10,9,3,2,6,-2,9,-1,-8,-9,-1,-4,3,-2,8,1,5,10,3,7,5,-2,-9,-5,5,7,-7,6,5,-8,-2,-1,-8,8,4,-1,-5,5,-5,-2,-6,-8,-1,5,-4,1,2,4,-2,1,8,-4,4,8,2,10,8,-3,2,-5,10,4,-7,-2,-3,-2,5,-3,-7,-6,10,9,6,8,-9,-6,-8,-1,-1,3,-5,2,-1,7,-9,-9,1,-8,9,6,-9,-8,-5,4,-1,-7,-2,-6,-7,10,-10,-6,8,-9,-9,6,-9,7,-1,-7,9,-1,-6,-3,4,10,4,-6,-9,-9,1,-6,-8,-2,7,-5,7,7,-5,-6,-4,4,2,8,6,-8,1,-7,1,9,-3,4,2,-3,10,7,-6,1,2,7,-7,7,1,8,-5,9,3,6,-5,-2,8,10,-2,-2,-10,-4,-6,-6,5,10,-3,6,4,-1,10,-5,-3,-4,6,9,7,-5,-2,-1,-5,7,-3,3,-6,6,8,-6,-6,5,-8,-10,-8,7,3,7,2,5,-8,1,-5,-1,10,-1,8,10,10,1,4,8,-8,7,-10,5,3,3,5,-8,-1,-1,6,-7,1,4,7,-5,8,7,6,-7,8,-6,4,-7,-6,-4,-10,-1,-8,-8,-7,-10,-5,-5,8,10,4,6,2,2,2,10,-8,6,-6,-3,-9,1,1,-5,-10,3,-2,3,-4,2,5,-9,5,-9,10,-7,6,-3,6,5,4,1,9,-10,10,-1,7,8,-3], dtype = "int32")#candidate|2938|(1296,)|const|int32
var_2939 = relay.var("var_2939", dtype = "float32", shape = (600, 1))#candidate|2939|(600, 1)|var|float32
call_2935 = relay.TupleGetItem(func_1370_call(relay.reshape(var_2936.astype('bool'), [15, 2, 16]), relay.reshape(var_2937.astype('uint64'), [7, 6]), relay.reshape(const_2938.astype('int32'), [1296,]), relay.reshape(var_2939.astype('float32'), [600,]), relay.reshape(var_2936.astype('bool'), [15, 2, 16]), ), 2)
call_2940 = relay.TupleGetItem(func_1376_call(relay.reshape(var_2936.astype('bool'), [15, 2, 16]), relay.reshape(var_2937.astype('uint64'), [7, 6]), relay.reshape(const_2938.astype('int32'), [1296,]), relay.reshape(var_2939.astype('float32'), [600,]), relay.reshape(var_2936.astype('bool'), [15, 2, 16]), ), 2)
output = relay.Tuple([bop_2928,call_2935,var_2936,var_2937,const_2938,var_2939,])
output2 = relay.Tuple([bop_2928,call_2940,var_2936,var_2937,const_2938,var_2939,])
func_2947 = relay.Function([var_2927,var_2936,var_2937,var_2939,], output)
mod['func_2947'] = func_2947
mod = relay.transform.InferType()(mod)
mutated_mod['func_2947'] = func_2947
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2947_call = mutated_mod.get_global_var('func_2947')
var_2949 = relay.var("var_2949", dtype = "uint32", shape = (10, 2, 11))#candidate|2949|(10, 2, 11)|var|uint32
var_2950 = relay.var("var_2950", dtype = "bool", shape = (120, 4))#candidate|2950|(120, 4)|var|bool
var_2951 = relay.var("var_2951", dtype = "uint64", shape = (42,))#candidate|2951|(42,)|var|uint64
var_2952 = relay.var("var_2952", dtype = "float32", shape = (600, 1))#candidate|2952|(600, 1)|var|float32
call_2948 = func_2947_call(var_2949,var_2950,var_2951,var_2952,)
output = call_2948
func_2953 = relay.Function([var_2949,var_2950,var_2951,var_2952,], output)
mutated_mod['func_2953'] = func_2953
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3782 = relay.var("var_3782", dtype = "float32", shape = (3, 13, 13))#candidate|3782|(3, 13, 13)|var|float32
var_3783 = relay.var("var_3783", dtype = "float32", shape = (3, 13, 13))#candidate|3783|(3, 13, 13)|var|float32
bop_3784 = relay.mod(var_3782.astype('float32'), relay.reshape(var_3783.astype('float32'), relay.shape_of(var_3782))) # shape=(3, 13, 13)
func_1892_call = mod.get_global_var('func_1892')
func_1895_call = mutated_mod.get_global_var('func_1895')
const_3790 = relay.const(-4.115271, dtype = "float32")#candidate|3790|()|const|float32
call_3789 = relay.TupleGetItem(func_1892_call(relay.reshape(const_3790.astype('float32'), [])), 2)
call_3791 = relay.TupleGetItem(func_1895_call(relay.reshape(const_3790.astype('float32'), [])), 2)
func_1780_call = mod.get_global_var('func_1780')
func_1783_call = mutated_mod.get_global_var('func_1783')
var_3801 = relay.var("var_3801", dtype = "int64", shape = (4, 308))#candidate|3801|(4, 308)|var|int64
call_3800 = func_1780_call(relay.reshape(var_3801.astype('int64'), [16, 11, 7]), relay.reshape(var_3801.astype('int64'), [16, 11, 7]), )
call_3802 = func_1780_call(relay.reshape(var_3801.astype('int64'), [16, 11, 7]), relay.reshape(var_3801.astype('int64'), [16, 11, 7]), )
bop_3813 = relay.multiply(call_3789.astype('int8'), const_3790.astype('int8')) # shape=(1296,)
bop_3816 = relay.multiply(call_3791.astype('int8'), const_3790.astype('int8')) # shape=(1296,)
uop_3819 = relay.tan(bop_3813.astype('float64')) # shape=(1296,)
uop_3821 = relay.tan(bop_3816.astype('float64')) # shape=(1296,)
output = relay.Tuple([bop_3784,call_3800,var_3801,uop_3819,])
output2 = relay.Tuple([bop_3784,call_3802,var_3801,uop_3821,])
func_3834 = relay.Function([var_3782,var_3783,var_3801,], output)
mod['func_3834'] = func_3834
mod = relay.transform.InferType()(mod)
var_3835 = relay.var("var_3835", dtype = "float32", shape = (3, 13, 13))#candidate|3835|(3, 13, 13)|var|float32
var_3836 = relay.var("var_3836", dtype = "float32", shape = (3, 13, 13))#candidate|3836|(3, 13, 13)|var|float32
var_3837 = relay.var("var_3837", dtype = "int64", shape = (4, 308))#candidate|3837|(4, 308)|var|int64
output = func_3834(var_3835,var_3836,var_3837,)
func_3838 = relay.Function([var_3835,var_3836,var_3837,], output)
mutated_mod['func_3838'] = func_3838
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3886 = relay.var("var_3886", dtype = "uint16", shape = ())#candidate|3886|()|var|uint16
var_3887 = relay.var("var_3887", dtype = "uint16", shape = (10, 8, 1))#candidate|3887|(10, 8, 1)|var|uint16
bop_3888 = relay.minimum(var_3886.astype('uint16'), var_3887.astype('uint16')) # shape=(10, 8, 1)
output = relay.Tuple([bop_3888,])
output2 = relay.Tuple([bop_3888,])
func_3899 = relay.Function([var_3886,var_3887,], output)
mod['func_3899'] = func_3899
mod = relay.transform.InferType()(mod)
mutated_mod['func_3899'] = func_3899
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3899_call = mutated_mod.get_global_var('func_3899')
var_3901 = relay.var("var_3901", dtype = "uint16", shape = ())#candidate|3901|()|var|uint16
var_3902 = relay.var("var_3902", dtype = "uint16", shape = (10, 8, 1))#candidate|3902|(10, 8, 1)|var|uint16
call_3900 = func_3899_call(var_3901,var_3902,)
output = call_3900
func_3903 = relay.Function([var_3901,var_3902,], output)
mutated_mod['func_3903'] = func_3903
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4193 = relay.var("var_4193", dtype = "float64", shape = (6, 11, 9))#candidate|4193|(6, 11, 9)|var|float64
uop_4194 = relay.rsqrt(var_4193.astype('float64')) # shape=(6, 11, 9)
func_1370_call = mod.get_global_var('func_1370')
func_1376_call = mutated_mod.get_global_var('func_1376')
const_4205 = relay.const([True,True,True,True,True,False,True,False,True,True,True,True,False,False,True,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,False,False,True,False,True,True,True,False,False,True,False,True,True,True,True,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,True,True,False,False,True,True,True,False,False,True,False,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,False,True,True,True,False,True,True,False,False,False,True,False,False,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,False,False,False,False,True,True,False,True,True,True,False,False,True,False,False,True,True,True,False,True,True,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,True,False,True,True,False,True,False,True,True,True,False,True,True,True,False,True,True,False,True,True,True,True,True,True,False,True,True,False,True,True,False,False,True,True,True,False,False,True,True,True,False,True,True,True,False,True,True,False,False,False,True,True,True,False,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,False,False,False,True,False,True,True,True,False,False,False,True,False,True,False,False,False,True,False,True,True,True,True,True,False,False,False,True,True,False,True,True,False,True,False,True,False,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,False], dtype = "bool")#candidate|4205|(480,)|const|bool
const_4206 = relay.const([10,5,10,2,8,-5,9,8,10,3,-10,2,8,-5,5,6,-5,1,8,-5,7,7,5,2,-3,7,2,5,9,4,9,-9,-2,-10,-4,-7,8,-8,9,-6,7,-8], dtype = "uint64")#candidate|4206|(42,)|const|uint64
const_4207 = relay.const([8,-2,-9,-4,-5,-9,-9,1,-5,-9,-2,5,3,-3,10,5,-1,-2,-9,-9,3,9,-2,-7,1,-3,6,-3,1,-1,2,-9,-2,5,7,6,-3,-3,7,-5,-6,3,6,1,2,8,-8,8,8,-3,-5,-7,6,-5,-10,3,-7,-7,4,8,-10,7,3,-1,-9,10,-3,-4,6,2,-8,-1,-3,7,6,1,-4,-5,-6,-10,1,10,-6,3,-2,10,-1,-6,-7,2,-8,1,-3,-9,-5,5,10,1,10,1,-8,3,-10,-4,1,2,8,3,10,-10,4,2,-1,-1,-7,-2,-1,-6,5,10,5,7,-7,-5,-4,-3,-10,-4,10,-1,-10,-3,1,4,9,-2,-7,-10,-1,1,-9,6,1,-4,7,-7,-10,8,8,-7,-7,3,-10,-8,7,-6,6,-10,4,-8,-9,8,3,-3,7,2,-9,-7,8,-9,7,-3,-9,-9,-7,6,10,-7,9,6,10,-9,2,7,3,7,3,-2,3,9,-8,7,-8,-1,-2,4,-4,2,-1,6,-7,4,4,-6,7,8,10,-3,8,7,2,4,4,-2,7,9,-2,3,10,3,-5,-3,6,5,-2,8,6,10,9,5,1,-9,-8,10,-4,-5,6,5,-6,10,5,-1,-1,10,-2,-8,-10,7,9,-6,-2,1,-1,-4,9,4,-3,4,4,5,-1,-1,10,-3,-9,4,-1,1,-3,8,8,-7,-7,-4,7,8,-4,10,-1,7,-1,-1,-7,-6,-9,4,6,-8,-4,-5,6,10,-4,-6,-3,-5,3,1,-2,2,-9,9,-8,10,3,-5,-9,-9,-5,-8,-7,5,2,-9,2,4,-8,9,-1,-9,6,-3,9,8,8,-2,-2,4,2,-6,7,-6,-4,2,-5,2,-5,6,9,-7,1,-4,6,-7,-3,3,-3,-4,5,4,7,3,3,5,3,-10,1,9,2,-6,-9,5,-7,8,-3,5,-8,-1,8,-2,-9,-9,-6,8,4,-3,10,-6,-4,-2,-7,-6,-3,-6,6,4,-4,-8,1,8,-7,-10,-6,-7,-3,7,5,-6,4,-1,-4,8,8,-6,-9,6,-5,4,-5,2,-9,7,-6,-2,5,-1,-8,4,-2,-5,-7,10,7,1,-6,-7,6,8,-7,2,-6,10,1,-10,-6,-7,-5,-3,10,2,1,-10,-5,8,-1,-3,-5,-10,9,-1,-4,8,-3,2,6,-9,7,-3,10,-4,2,-7,-10,-3,-7,-4,3,2,4,1,-10,-7,2,9,1,-2,-1,-2,-7,2,1,7,-9,-2,-3,-10,-5,-1,-9,8,2,-5,-10,5,-3,-3,2,-10,9,3,5,6,-2,-7,-7,-1,5,-3,-6,-4,5,3,7,10,5,9,-7,-2,-4,-2,-1,2,-10,3,-3,-4,4,10,3,9,-5,2,5,-3,-10,-2,9,-9,8,6,2,-2,9,10,-3,-2,7,-10,-7,-3,-9,7,8,-6,1,10,2,-10,5,3,-8,6,-10,-2,-1,-3,2,8,-8,-6,8,2,9,1,3,2,10,9,-6,6,-7,-2,8,9,-6,-7,-3,2,-3,6,8,9,7,9,-10,3,-3,6,-4,-9,4,-5,-9,8,2,9,-1,-10,-10,-2,-4,-10,1,-10,3,-5,9,3,-1,-9,-7,4,9,-8,3,-9,-6,-5,5,4,-7,6,-1,4,-1,4,5,10,2,-3,2,9,1,7,-9,5,-9,4,9,1,-4,2,3,-1,1,-7,8,-1,1,-6,-6,-8,1,5,1,1,-1,3,4,6,-10,6,-10,-8,4,3,4,-5,5,-6,-3,2,-10,7,-2,9,7,-1,-4,-10,-2,6,-6,10,10,8,3,-7,-8,6,7,-4,-3,-3,-6,3,8,2,2,-5,-10,-8,-4,5,-1,-2,10,-5,2,10,-3,-4,6,-4,1,-3,-2,-3,7,-8,3,-9,9,6,1,9,-10,-4,-2,5,8,6,10,-6,-9,5,8,5,-7,-9,6,6,-3,-2,-1,-10,-6,8,-6,-5,1,-7,6,-6,-2,3,5,3,10,-4,-2,-9,-1,-8,-3,1,3,-3,-1,-3,-8,-10,6,2,9,-8,-2,-1,3,-1,-2,-10,-2,5,-6,4,-5,-6,8,-10,3,7,-4,-8,8,5,4,7,10,7,10,-9,-6,7,-2,10,-4,1,-5,-7,10,5,9,10,-5,7,-8,2,3,9,-6,-1,4,-8,-4,-4,-7,8,2,-7,-5,-4,-3,9,4,1,7,-10,-5,1,-3,6,5,-8,-4,-6,1,1,4,10,-10,-10,5,1,8,1,-9,1,-1,-5,-6,-3,8,-1,-8,4,3,6,-4,10,-10,-3,-10,-5,3,-7,8,6,-5,-2,-9,10,8,2,4,-4,-4,3,1,-4,-5,-5,-10,3,-9,8,-1,2,8,-3,-5,-7,6,-3,-6,-5,-8,8,-3,-5,7,-2,6,10,-9,6,-4,3,1,-6,4,1,-2,-4,-1,-9,4,7,-9,-4,3,-10,-3,6,-10,-10,-6,8,10,-4,1,-9,9,7,-4,4,-2,-6,-9,6,5,-8,9,-10,10,-9,-9,9,6,-6,8,-10,6,3,8,-9,-9,5,-4,6,1,4,6,10,9,2,5,8,-10,7,2,1,2,7,3,10,1,-3,-7,-8,-6,6,4,3,4,-10,-7,-6,-8,-4,8,-4,8,-5,8,-5,-4,10,-2,-10,4,-3,-10,1,-3,9,-1,-10,10,-5,-9,-5,-1,8,7,-2,-9,-3,3,9,10,-7,2,-1,-1,1,9,2,2,-3,-2,-1,9,10,-9,-10,-8,2,-2,-10,-1,4,10,10,-10,2,-10,-10,8,-3,-8,8,9,4,4,6,-7,-5,-10,9,-8,9,4,6,-1,1,-3,-5,-2,6,5,3,-4,-10,-3,-4,10,10,-5,7,7,-5,-8,3,-1,8,-10,-9,9,-1,-2,7,8,-7,-6,-9,4,-3,4,4,4,-1,-3,1,4,6,6,-8,-1,-9,1,9,-2,10,10,-1,-8,-1,5,-2,-3,-4,2,-5,-9,9,4,7,-2,-2,-3,-7,5,9,-1,8,-9,-4,6,-3,8,5,2,6,1,6,-8,4,-4,-5,5,-8,-6,5,-6,7,4,3,-5,2,6,-9,-3,-10,-7,-2,8,9,4,8,-4,-3,-8,-4,5,1,4,-8,3,5,-2,-4,-7,-4,7,-1,8,9,8,3,9,-5,-3,1,-10,8,1,2,-5,9,10,-4,3,6,-9,9,2,1,8,1,-8,9,3,9,8,1,-9,-8,-10,-6,-5,7,8,3,9,3,5,7,3,-5,4,-1,-10,-7,-3,-7,9,-6,-1,-4,-2,-10,-1,2,-4,7,2,-3,8,3,3,10,6,-9,-6,9,-10,-5,-7,4,-6,9,10,-2,-2,-10,7,-8,-9,-1,-2,10,-9,-2,4,8], dtype = "int32")#candidate|4207|(1296,)|const|int32
const_4208 = relay.const([[-5.392801,9.417047,6.299884,0.938335,-7.664197,-4.284981,-8.442337,8.514064,-5.271567,-3.446794],[-5.268772,3.773000,-0.667091,-5.064461,-5.251126,1.712280,8.600365,4.327826,5.889773,3.824182],[0.465046,-4.787062,-0.405772,-4.165756,5.029845,-4.809949,6.660667,0.456260,-7.910983,8.669446],[-2.414887,-9.310896,2.461042,-1.090233,-4.055108,-0.766360,9.583405,-0.807633,-3.359386,4.294260],[5.223310,0.110771,9.471408,0.942620,-1.790062,-8.854757,4.076102,-5.082832,-1.083824,4.196251],[-9.661186,8.625728,5.699625,4.451296,-6.595453,3.111368,8.706814,0.627873,-4.838256,-6.244613],[3.659269,4.826526,8.985731,4.497585,-6.455427,5.446072,-1.118804,-3.494834,-0.908881,8.562099],[-2.588810,-4.511036,3.799223,1.779315,-4.014746,7.991280,-8.062691,7.027359,-1.624983,-4.243800],[2.964046,-1.969293,-9.086448,2.961581,-1.522747,9.779058,-9.002850,-8.314377,9.336669,1.942008],[-6.053763,6.654067,5.940327,-9.389461,0.490977,-3.191317,-5.985765,-3.769197,6.153924,3.206883],[-5.181144,4.630597,7.442828,4.600340,3.787184,-1.544277,9.025405,-2.026043,-1.747781,-1.285573],[8.235886,6.270394,4.737670,-1.938263,2.416263,3.534608,0.068755,-5.827647,-3.081192,3.472696],[-1.232616,0.608084,-3.694868,-6.450587,7.012997,-8.743480,1.004620,-2.263541,-7.678528,-8.994079],[9.882160,8.324926,-5.642808,5.650554,8.067720,-9.584146,-5.908675,8.756396,6.422317,-1.549383],[1.808993,-4.095581,-2.945725,2.623891,0.080316,-6.181613,2.000514,8.652946,-5.492315,3.360413],[-4.219081,7.006543,9.831968,6.585353,6.017455,8.539491,-9.526619,6.350046,6.280068,7.466948],[-4.888825,8.086709,-2.400954,9.261713,8.369232,-7.931797,-3.375152,-8.064403,5.218182,3.725106],[4.845277,1.950412,-3.752466,-7.844321,4.962819,-9.046868,-8.575222,-3.801469,9.613289,0.779473],[-7.952593,-0.636061,9.423094,-6.108331,-3.751318,4.932949,6.270787,3.652123,-8.649613,0.624255],[-7.605201,1.835279,1.885381,2.168543,-8.129905,3.285965,-1.788671,0.670110,-9.625724,-9.473007],[2.014115,1.070338,-4.528623,-8.071310,-1.964940,9.310100,-7.392887,0.417553,-3.854674,-9.490085],[4.824463,1.268425,1.046160,-1.304251,-2.124990,-4.076754,-6.514911,-2.003302,-0.454660,8.178808],[-9.060493,1.885419,-8.434151,-0.762828,4.071895,2.671827,-1.133370,9.532743,4.168983,-5.425370],[-4.777876,-7.272519,-8.325936,-2.309835,0.109373,2.369688,-8.670994,-1.011255,-7.994145,1.991883],[8.374816,-8.221295,5.521745,3.017681,0.985964,-3.090161,-3.543775,5.067752,-1.008626,-3.834911],[0.616918,6.047451,-1.470593,-2.833582,3.936315,8.830844,-2.182786,-7.722015,4.277766,6.897644],[1.299176,-6.810310,-4.537078,-1.337957,7.785558,-3.694039,8.684169,-9.882855,-1.561736,-1.452864],[-1.155452,-7.020618,7.028248,-4.820017,7.180523,-2.180412,-5.391766,-5.966886,-8.691376,1.775754],[3.571153,-2.711750,6.611172,0.258707,-9.288670,6.366369,1.827278,1.790018,9.169643,7.040346],[7.923503,8.430394,-8.536670,-7.295874,7.490338,6.236200,-3.122223,1.909959,-3.154227,9.156144],[-1.991032,-2.295134,-2.568961,-1.999557,6.704974,-8.019096,8.948658,-8.748469,-2.657747,-6.227929],[-1.484231,-4.019435,-9.133919,0.062843,-5.100382,6.258187,6.071928,-2.297750,5.304938,8.488380],[-3.073867,-8.276976,-8.183210,-7.848345,1.124105,-8.457452,-7.820986,-7.167221,-9.984078,0.265773],[-4.419798,5.048128,-2.201306,-2.219261,-4.988557,1.952563,6.870119,5.493485,-8.808036,-6.543485],[-1.712215,-2.438121,-1.055569,8.755731,-5.458119,0.737175,6.244882,-0.803439,5.997372,-3.241336],[0.940169,-8.410797,6.131220,-5.488414,1.198142,1.247152,3.262373,-1.502353,0.628081,-8.918681],[4.142940,-6.209602,-4.561929,-9.500037,3.291201,5.337730,-7.241614,-4.939528,6.760659,-1.957935],[5.885127,5.342681,7.455327,-2.449992,4.692918,-2.155739,6.115393,-7.932802,0.525801,3.517348],[7.561882,1.301891,-8.501766,0.264446,-7.293123,7.570909,3.022173,-8.851245,-2.970911,9.466291],[4.755054,-1.449531,0.680288,-8.898859,-7.649238,3.942699,1.224500,9.387032,-5.261025,4.745208],[-8.476897,1.967277,3.081059,-0.041496,-5.448683,-5.973639,1.396660,-7.056326,0.261708,-2.318196],[-9.726430,2.405174,-4.391469,-7.377610,5.253284,-7.336405,-2.464106,0.037213,9.693871,4.811136],[-3.532739,-5.583761,6.991716,-5.275578,2.978512,-9.521058,-3.321110,1.677448,-2.088662,-5.920650],[-3.095997,-4.694085,-7.734809,-3.461956,8.845277,7.692603,1.237610,-0.062091,8.677830,7.348524],[8.510601,-3.558630,2.137324,-4.210246,3.888448,9.001904,1.112076,-0.886916,-3.587755,-4.831312],[9.448525,0.567118,2.580549,1.826406,-9.044960,1.220716,-6.368958,8.629847,-8.513558,9.538638],[-5.131308,0.931235,-9.779331,4.576986,-2.902685,1.540400,-7.575891,3.154945,-7.926675,-3.784006],[8.474101,-6.392811,7.158027,-3.166897,4.667531,-4.871874,-3.245675,-5.451326,8.560871,0.255666],[7.231768,6.555781,0.916859,6.840000,6.128200,-2.902712,5.137988,-9.585145,4.859988,-8.135949],[4.590214,-4.908221,-7.228046,-2.739043,7.769859,-8.253359,-5.857909,-9.884928,-5.954936,2.260602],[5.201017,-9.506873,-1.136595,7.020423,0.072085,0.781538,-7.846437,4.342985,-5.202267,6.979035],[4.965842,-2.419497,3.941513,-3.082430,-7.402285,-6.662814,6.633459,-7.506441,8.668883,3.643967],[-0.968804,6.065749,2.035558,2.903770,7.856594,6.818708,-5.896393,-8.522378,-0.998739,8.730890],[1.497882,-6.843873,7.236901,-7.619412,-9.206822,3.861853,-4.488724,-5.424629,2.661865,7.199364],[-9.863222,-6.190138,-8.743164,-9.937577,1.053852,7.118968,9.940219,0.412717,4.451671,-4.879886],[-3.975478,-7.851483,-4.480519,-7.521331,-8.277696,-0.722294,-0.183244,-9.634331,-6.061840,7.888476],[-9.926739,-8.616832,-2.460069,-9.468066,2.299356,0.783671,5.640554,9.525569,-6.208871,9.246180],[7.698271,6.298279,-5.803855,7.094532,3.310318,-8.527351,1.345096,9.661170,8.113823,6.664311],[-0.882572,-1.413959,-4.035076,-0.897594,1.614771,-3.868357,2.060781,-1.243124,3.952937,-4.669578],[-6.797853,-2.868050,5.081500,0.062337,-4.708879,-8.260365,0.784472,-5.263032,-9.570932,2.926439]], dtype = "float32")#candidate|4208|(60, 10)|const|float32
call_4204 = relay.TupleGetItem(func_1370_call(relay.reshape(const_4205.astype('bool'), [15, 2, 16]), relay.reshape(const_4206.astype('uint64'), [7, 6]), relay.reshape(const_4207.astype('int32'), [1296,]), relay.reshape(const_4208.astype('float32'), [600,]), relay.reshape(const_4205.astype('bool'), [15, 2, 16]), ), 9)
call_4209 = relay.TupleGetItem(func_1376_call(relay.reshape(const_4205.astype('bool'), [15, 2, 16]), relay.reshape(const_4206.astype('uint64'), [7, 6]), relay.reshape(const_4207.astype('int32'), [1296,]), relay.reshape(const_4208.astype('float32'), [600,]), relay.reshape(const_4205.astype('bool'), [15, 2, 16]), ), 9)
func_1049_call = mod.get_global_var('func_1049')
func_1052_call = mutated_mod.get_global_var('func_1052')
call_4213 = relay.TupleGetItem(func_1049_call(relay.reshape(const_4208.astype('float32'), [10, 5, 12])), 0)
call_4214 = relay.TupleGetItem(func_1052_call(relay.reshape(const_4208.astype('float32'), [10, 5, 12])), 0)
func_1780_call = mod.get_global_var('func_1780')
func_1783_call = mutated_mod.get_global_var('func_1783')
const_4231 = relay.const([5,10,-7,-1,-4,9,5,9,2,6,5,10,-2,6,-2,6,6,-9,2,8,-4,-7,-2,2,-10,-6,2,8,2,-9,-9,-2,-2,-10,4,10,4,6,-4,7,-7,-1,-1,-4,-3,9,-7,-8,3,-3,3,-2,-1,-10,7,10,-2,-4,10,-10,-10,-4,10,-5,-8,-8,4,-10,10,-1,-9,10,4,6,9,-6,5,-5,-9,-7,-1,-10,7,-9,9,-4,2,2,6,-9,-6,-4,-2,5,9,2,9,4,-1,-4,4,-1,-2,2,2,2,6,-6,-7,4,5,8,8,-3,-7,-1,7,-9,6,-6,5,-6,-6,-3,-5,8,1,-7,8,-9,-9,7,-4,-6,10,-9,-3,-9,-7,-1,7,6,7,-8,3,1,-10,1,-7,-2,-10,5,6,-2,6,9,5,3,7,7,1,-6,-8,-2,-4,3,7,-7,2,8,-5,3,-10,-9,10,-1,-4,1,-3,-7,9,-3,8,9,-1,1,-4,5,-1,-3,2,1,10,-8,-6,2,-6,2,-4,7,-8,3,-1,7,5,-4,-3,-5,-6,10,9,-7,-4,1,10,5,-4,-1,7,10,6,-8,-8,6,5,8,-5,-1,4,8,9,3,2,-10,-9,-10,4,-6,1,8,7,2,-1,-2,4,-10,-3,-6,-6,-5,-9,-10,3,7,9,1,-1,7,-5,-10,8,2,2,8,6,-3,-8,-10,-10,-6,2,4,-2,9,9,-8,9,8,-8,9,10,1,-8,3,-7,8,8,-7,4,-8,3,-8,6,4,-4,7,7,-4,-8,3,-5,7,5,-4,7,-2,7,-3,-7,4,1,5,-1,3,7,-5,8,-8,3,2,3,2,-3,1,-1,-1,-10,10,-5,-1,10,-7,-5,3,-6,-9,10,-8,-6,5,8,10,10,9,3,-2,-3,3,-3,-9,-3,1,-10,6,-10,3,-7,-3,-5,4,10,2,4,-5,-4,-9,1,-10,-9,-8,9,4,-6,-3,-9,8,-3,-7,8,6,-4,-10,-5,7,9,10,7,-2,-2,4,1,5,6,1,-1,7,1,10,8,-9,-1,4,4,-2,2,10,-10,7,4,-10,-6,10,-4,5,-8,-10,-3,8,2,-4,6,6,-6,9,-5,-4,-8,10,5,-6,2,-3,-2,-2,10,9,-9,-1,-9,6,-1,-7,-7,1,-4,6,-4,-1,-9,-3,7,5,8,-3,-6,3,9,6,-8,-9,-5,8,-1,10,-2,-9,4,6,-1,8,-6,-7,-10,-3,10,-3,-7,8,2,10,-10,4,4,-7,9,-2,-8,-3,2,9,8,-8,-2,2,4,-7,-10,8,1,9,-3,-6,-10,1,5,-3,-1,5,-7,7,-9,-6,5,5,1,7,-4,7,2,-5,8,-1,9,2,4,-7,-4,-4,-9,5,2,6,-5,-2,-10,5,5,7,-3,-1,-8,2,3,1,4,4,7,3,-2,10,-2,-10,-2,-10,-7,4,9,-9,1,-4,5,-2,-7,-4,-2,3,-1,8,1,8,8,5,-7,10,6,4,4,-6,5,-2,-6,8,7,1,-3,-5,-3,8,7,-8,2,4,2,-6,2,1,-2,-5,4,-4,7,7,2,-7,-1,-1,1,-8,-5,-7,4,-7,6,3,8,-6,-1,-2,-8,3,8,-4,-9,-1,1,-5,5,-1,-2,2,6,-6,2,-1,8,2,7,-4,-10,-5,2,-8,-10,9,-3,-3,-10,-7,6,5,-1,-10,4,-7,9,-7,-1,-10,-4,-4,-2,8,-7,-6,-3,7,-9,2,-2,-8,-2,6,8,8,-4,10,1,-2,3,9,1,9,6,-1,-2,-3,-4,10,2,-5,-2,6,1,10,-8,-9,7,-8,9,3,-8,6,3,5,5,4,3,1,-8,9,9,4,5,-1,1,6,10,3,-1,9,-6,-3,2,6,-4,5,-4,3,1,6,10,1,-7,3,1,-3,-6,-10,2,-10,3,-2,-6,-10,1,-9,1,2,4,-5,-9,6,7,-6,3,5,-3,7,-2,-6,-5,5,-7,-4,-2,10,5,7,-3,1,6,4,-3,-1,-7,9,4,-8,10,-5,-8,2,-10,-5,9,-1,-2,-6,-7,9,4,6,3,-10,-5,-3,-10,8,5,5,9,-3,-2,-5,8,4,3,1,-5,9,7,-3,-9,7,6,10,-1,-6,1,-3,-7,-10,-7,8,-3,-2,-9,7,7,1,-7,9,-5,-10,-8,5,10,-8,8,8,3,4,-6,1,5,7,5,2,10,-6,7,-6,1,-5,-1,2,5,-7,7,4,-10,-5,-6,-4,-1,7,-6,-6,-10,-7,3,7,7,9,-2,5,-4,8,7,8,-6,5,-9,-8,9,-10,-7,10,-10,6,-2,7,-1,-7,9,-6,10,9,-10,6,4,-4,2,-5,-3,-8,3,-2,-10,-3,-4,-8,-8,-2,3,8,6,8,-7,2,-5,-6,6,1,9,-9,-2,-5,-3,9,-7,-5,2,-10,-8,9,-5,-10,-5,10,-6,4,5,10,-6,-6,-9,-5,4,-8,-2,-6,1,9,-8,9,8,-3,3,-3,-4,2,-9,4,6,8,10,2,-7,-7,-10,8,-10,-10,-6,-1,-3,-6,4,8,2,6,7,3,-1,-10,9,-8,2,-1,3,9,-7,-8,4,10,1,10,-8,-5,-5,1,-6,-4,-8,-7,9,9,-10,8,5,2,6,6,-4,2,-8,5,3,-2,-4,-4,-6,8,9,2,6,10,3,-7,-6,6,3,8,1,-6,9,-8,2,1,-4,7,-6,-3,2,-7,10,-4,7,6,4,-2,2,9,6,7,-4,1,1,10,5,-6,3,7,-4,7,-4,2,-9,-10,-3,-4,-1,-9,-10,-8,8,-9,3,-10,-6,4,6,-8,9,1,-6,10,-1,-2,8,5,3,7,-7,-3,-4,4,5,6,-1,5,-3,7,-4,4,-8,-7,10,-6,-1,-9,-6,-6,9,6,-10,-9,5,-6,4,10,6,2,-1,2,-7,-8,7,5,-7,-6,-1,-9,-3,-3,4,1,-1,7,-1,-6,1,-3,-8,-4,9,-2,-9,7,8,2,-3,4,-8,-6,2,-9,-5,-3,1,8,1,2,-10,3,1,10,8,8,6,5,7,5,6,-7,-7,-9,-4,10,2,-10,1,-6,5,-7,9,3,5,2,-5,-10,-3,-3,-2,10,8,-6,3,10,-8,-1,8,-5,-9,6,-5,8,-5,-4,6,10,6,-7,-8,7,3,-2,-1,7,1,7,10,-3,-8,2,3,-2,-8,9,5,1], dtype = "int64")#candidate|4231|(1232,)|const|int64
call_4230 = func_1780_call(relay.reshape(const_4231.astype('int64'), [16, 11, 7]), relay.reshape(const_4231.astype('int64'), [16, 11, 7]), )
call_4232 = func_1780_call(relay.reshape(const_4231.astype('int64'), [16, 11, 7]), relay.reshape(const_4231.astype('int64'), [16, 11, 7]), )
var_4242 = relay.var("var_4242", dtype = "bool", shape = (16, 11, 7))#candidate|4242|(16, 11, 7)|var|bool
bop_4243 = relay.multiply(call_4230.astype('int16'), relay.reshape(var_4242.astype('int16'), relay.shape_of(call_4230))) # shape=(16, 11, 7)
bop_4246 = relay.multiply(call_4232.astype('int16'), relay.reshape(var_4242.astype('int16'), relay.shape_of(call_4232))) # shape=(16, 11, 7)
func_1280_call = mod.get_global_var('func_1280')
func_1284_call = mutated_mod.get_global_var('func_1284')
const_4253 = relay.const([-1,-7,-1,7,5,3,-7,-4,-10,10,6,-4,10,6,-10,3,-10,-10,9,-4,-7,8,-10,7,-9,9,-9,-6,4,-4,-3,-8,7,-5,-7,-3,-3,-8,-1,-4,6,-8,8,-3,-5,7,-5,-4,-2,1,5,-6,2,5,1,-6,5,-1,9,5,2,-6,6,-9,7,8,3,4,7,1,-1,6,-2,-10,10,4,7,9,10,-4,10,-10,-7,8,-6,-4,5,-4,5,-5,9,-9,9,-4,5,-5,9,8,2,9,-3,6,3,5,3,-4,-9,-3,-10,7,-2,-10,2,6,-4,-3,-10,-4,-8,-10,9,7,7,-10,6,4,-2,10,2,7,3,-2,-10,3,-7,10,8,-8,7,4,5,-1,2,-10,-9,10,-10,4,-1,7,3,8,5,8,3,-5,-10,7,10,-8,-6,-1,-3,6,4,-3,-1,6,-8,9,-8,10,-3,-10,4,-9,6,-9,-5,-4,8,-5,10,-6,8,8,2,-4,6,-7,3,3,8,-10,-4,-1,2,1,7,-10,5,-1,-7,1,8,-4,-5,-2,-6,5,7,-2,2,-10,-1,6,-8,2,-1,-9,-2,-9,1,-2,-4,-8,-3,-9,-4,-5,-1,4,9,5,10,8,10,-2,1,-7,-9,7,5,-8,-6,7,-8,-5,6,7,-7,-9,4,-7,3,1,10,7,-3,6,2,5,4,-6,-1,8,10,6,-9,1,8,8,-10,-5,2,2,-5,-3,-6,-1,4,8,9,9,8,3,-4,4,-8,6,-10,-3,5,8,-4,2,-10,-1,-4,-8,10,8,4,7,3,-9,6,-2,7,4,-8,-1,-9,-9,5,-5,9,-9,9,5,3,-7,-8,-10,6,8,4,-4,2,-6,-1,1,8,2,-10,-9,1,-4,4,5,9,6,1,-6,3,9,7,-5,2,2,4,-4,9,5,-1,-5,-4,-6,5,7,8,-4,-5,-9,6,-8,-7,7,-10,1,-5,-6,9,3,5,-2,5,7,-4,-9,-10,-1,1,2,4,-5,-10,-7,2,-3,-7,8,-2,4,-1,-6,-1,-5,7,-4,-1,-8,-7,-1,3,3,-10,6,6,-6,4,-8,-9,7,-2,-6,7,5,-9,4,10,-5,-10,10,2,5,-10,-1,7,4,9,4,4,-2,6,6,-3,6,-2,1,4,10,-8,4,10,-7,-8,5,-2,6,4,8,4,3,2,-10,10,2,-2,7,4,3,7,-5,-6,9,-2,-7,10,-2,4,1,-3,-5,-9,9,6,-5,-1,-4,-3,4,1,-2,1,-5,10,-10,9,10,-8,1,-2,-9,-9,7,-5,7,-4,6,7,-4,-7,9,-2,6,-7,-5,5,9,8,-8,-9,-8,-8,-2,-10,-1,1,-5,-9,4,-9,-5,7,-10,10,-8,3,-5,4,5,4,-1,5,9,-6,-10,-3,9,8,5,-7,8,8,-10,-1,-4,-10,1,10,9,-4,-3,1,9,1,-7,4,8,-1,6,-3,8,-5,9,10,3,7,2,-8,-9,-4,9,4,-2,6,-8,10,4,-8,3,3,3,-2,9,-8,10,5,-2,7,-5,-3,5,2,1,2,-9,1,-4,10,4,-2,-2,4,-7,1,7,8,9,9,1,5,-8,-5,-7,8,7,-6,8,-4,-2,-10,10,10,7,1,-3,-1,1], dtype = "uint64")#candidate|4253|(630,)|const|uint64
call_4252 = relay.TupleGetItem(func_1280_call(relay.reshape(const_4206.astype('uint64'), [6, 1, 7]), relay.reshape(const_4253.astype('uint64'), [6, 15, 7]), ), 0)
call_4254 = relay.TupleGetItem(func_1284_call(relay.reshape(const_4206.astype('uint64'), [6, 1, 7]), relay.reshape(const_4253.astype('uint64'), [6, 15, 7]), ), 0)
func_1370_call = mod.get_global_var('func_1370')
func_1376_call = mutated_mod.get_global_var('func_1376')
call_4255 = relay.TupleGetItem(func_1370_call(relay.reshape(const_4205.astype('bool'), [15, 2, 16]), relay.reshape(const_4206.astype('uint64'), [7, 6]), relay.reshape(const_4207.astype('int32'), [1296,]), relay.reshape(call_4213.astype('float32'), [600,]), relay.reshape(const_4205.astype('bool'), [15, 2, 16]), ), 1)
call_4256 = relay.TupleGetItem(func_1376_call(relay.reshape(const_4205.astype('bool'), [15, 2, 16]), relay.reshape(const_4206.astype('uint64'), [7, 6]), relay.reshape(const_4207.astype('int32'), [1296,]), relay.reshape(call_4213.astype('float32'), [600,]), relay.reshape(const_4205.astype('bool'), [15, 2, 16]), ), 1)
func_1049_call = mod.get_global_var('func_1049')
func_1052_call = mutated_mod.get_global_var('func_1052')
call_4257 = relay.TupleGetItem(func_1049_call(relay.reshape(call_4204.astype('float32'), [10, 5, 12])), 0)
call_4258 = relay.TupleGetItem(func_1052_call(relay.reshape(call_4204.astype('float32'), [10, 5, 12])), 0)
output = relay.Tuple([uop_4194,call_4204,const_4205,const_4206,const_4207,const_4208,call_4213,const_4231,bop_4243,call_4252,const_4253,call_4255,call_4257,])
output2 = relay.Tuple([uop_4194,call_4209,const_4205,const_4206,const_4207,const_4208,call_4214,const_4231,bop_4246,call_4254,const_4253,call_4256,call_4258,])
func_4264 = relay.Function([var_4193,var_4242,], output)
mod['func_4264'] = func_4264
mod = relay.transform.InferType()(mod)
mutated_mod['func_4264'] = func_4264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4264_call = mutated_mod.get_global_var('func_4264')
var_4266 = relay.var("var_4266", dtype = "float64", shape = (6, 11, 9))#candidate|4266|(6, 11, 9)|var|float64
var_4267 = relay.var("var_4267", dtype = "bool", shape = (16, 11, 7))#candidate|4267|(16, 11, 7)|var|bool
call_4265 = func_4264_call(var_4266,var_4267,)
output = call_4265
func_4268 = relay.Function([var_4266,var_4267,], output)
mutated_mod['func_4268'] = func_4268
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4683 = relay.var("var_4683", dtype = "float64", shape = (11, 6, 5))#candidate|4683|(11, 6, 5)|var|float64
uop_4684 = relay.log(var_4683.astype('float64')) # shape=(11, 6, 5)
output = relay.Tuple([uop_4684,])
output2 = relay.Tuple([uop_4684,])
func_4698 = relay.Function([var_4683,], output)
mod['func_4698'] = func_4698
mod = relay.transform.InferType()(mod)
var_4699 = relay.var("var_4699", dtype = "float64", shape = (11, 6, 5))#candidate|4699|(11, 6, 5)|var|float64
output = func_4698(var_4699)
func_4700 = relay.Function([var_4699], output)
mutated_mod['func_4700'] = func_4700
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4806 = relay.var("var_4806", dtype = "float64", shape = (15, 10, 14))#candidate|4806|(15, 10, 14)|var|float64
uop_4807 = relay.log2(var_4806.astype('float64')) # shape=(15, 10, 14)
output = uop_4807
output2 = uop_4807
func_4816 = relay.Function([var_4806,], output)
mod['func_4816'] = func_4816
mod = relay.transform.InferType()(mod)
var_4817 = relay.var("var_4817", dtype = "float64", shape = (15, 10, 14))#candidate|4817|(15, 10, 14)|var|float64
output = func_4816(var_4817)
func_4818 = relay.Function([var_4817], output)
mutated_mod['func_4818'] = func_4818
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5357 = relay.var("var_5357", dtype = "uint32", shape = (3, 15, 12))#candidate|5357|(3, 15, 12)|var|uint32
var_5358 = relay.var("var_5358", dtype = "uint32", shape = (3, 15, 12))#candidate|5358|(3, 15, 12)|var|uint32
bop_5359 = relay.equal(var_5357.astype('bool'), relay.reshape(var_5358.astype('bool'), relay.shape_of(var_5357))) # shape=(3, 15, 12)
uop_5385 = relay.sin(var_5358.astype('float64')) # shape=(3, 15, 12)
uop_5389 = relay.asinh(var_5358.astype('float64')) # shape=(3, 15, 12)
bop_5394 = relay.logical_xor(uop_5389.astype('uint64'), relay.reshape(bop_5359.astype('uint64'), relay.shape_of(uop_5389))) # shape=(3, 15, 12)
output = relay.Tuple([uop_5385,bop_5394,])
output2 = relay.Tuple([uop_5385,bop_5394,])
func_5398 = relay.Function([var_5357,var_5358,], output)
mod['func_5398'] = func_5398
mod = relay.transform.InferType()(mod)
mutated_mod['func_5398'] = func_5398
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5398_call = mutated_mod.get_global_var('func_5398')
var_5400 = relay.var("var_5400", dtype = "uint32", shape = (3, 15, 12))#candidate|5400|(3, 15, 12)|var|uint32
var_5401 = relay.var("var_5401", dtype = "uint32", shape = (3, 15, 12))#candidate|5401|(3, 15, 12)|var|uint32
call_5399 = func_5398_call(var_5400,var_5401,)
output = call_5399
func_5402 = relay.Function([var_5400,var_5401,], output)
mutated_mod['func_5402'] = func_5402
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5642 = relay.var("var_5642", dtype = "uint8", shape = (5, 13, 5))#candidate|5642|(5, 13, 5)|var|uint8
var_5643 = relay.var("var_5643", dtype = "uint8", shape = (5, 13, 5))#candidate|5643|(5, 13, 5)|var|uint8
bop_5644 = relay.left_shift(var_5642.astype('uint8'), relay.reshape(var_5643.astype('uint8'), relay.shape_of(var_5642))) # shape=(5, 13, 5)
func_4264_call = mod.get_global_var('func_4264')
func_4268_call = mutated_mod.get_global_var('func_4268')
var_5669 = relay.var("var_5669", dtype = "float64", shape = (594,))#candidate|5669|(594,)|var|float64
const_5670 = relay.const([False,True,False,True,True,True,False,False,False,True,True,True,True,False,True,False,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,False,True,True,True,False,True,False,True,False,True,True,True,True,False,False,False,True,True,False,False,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,False,True,True,True,True,True,True,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,False,True,False,True,True,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,False,True,True,False,True,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,True,False,True,True,True,False,False,False,True,False,True,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,True,False,False,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,True,False,False,True,True,True,False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,False,False,False,True,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,True,True,False,True,False,False,True,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,False,False,True,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,False,False,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,True,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,False,False,True,False,False,True,False,True,True,True,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,True,True,False,True,False,False,False,True,True,True,True,False,True,False,False,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,False,True,False,True,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,True,True,False,False,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,False,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,True,True,True,False,True,True,False,False,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,True,True,False,True,False,False,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,True,False,True,True,False,False,False,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,True,False,False,False,False,True,False,False,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,True,True,True,True,True,False,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,False,True,True,False,False,True,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False], dtype = "bool")#candidate|5670|(1232,)|const|bool
call_5668 = relay.TupleGetItem(func_4264_call(relay.reshape(var_5669.astype('float64'), [6, 11, 9]), relay.reshape(const_5670.astype('bool'), [16, 11, 7]), ), 0)
call_5671 = relay.TupleGetItem(func_4268_call(relay.reshape(var_5669.astype('float64'), [6, 11, 9]), relay.reshape(const_5670.astype('bool'), [16, 11, 7]), ), 0)
uop_5672 = relay.erf(bop_5644.astype('float32')) # shape=(5, 13, 5)
var_5683 = relay.var("var_5683", dtype = "float32", shape = (5, 13, 5))#candidate|5683|(5, 13, 5)|var|float32
bop_5684 = relay.greater(uop_5672.astype('bool'), relay.reshape(var_5683.astype('bool'), relay.shape_of(uop_5672))) # shape=(5, 13, 5)
var_5689 = relay.var("var_5689", dtype = "bool", shape = (5, 13, 5))#candidate|5689|(5, 13, 5)|var|bool
bop_5690 = relay.greater_equal(bop_5684.astype('bool'), relay.reshape(var_5689.astype('bool'), relay.shape_of(bop_5684))) # shape=(5, 13, 5)
output = relay.Tuple([call_5668,var_5669,const_5670,bop_5690,])
output2 = relay.Tuple([call_5671,var_5669,const_5670,bop_5690,])
func_5697 = relay.Function([var_5642,var_5643,var_5669,var_5683,var_5689,], output)
mod['func_5697'] = func_5697
mod = relay.transform.InferType()(mod)
mutated_mod['func_5697'] = func_5697
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5697_call = mutated_mod.get_global_var('func_5697')
var_5699 = relay.var("var_5699", dtype = "uint8", shape = (5, 13, 5))#candidate|5699|(5, 13, 5)|var|uint8
var_5700 = relay.var("var_5700", dtype = "uint8", shape = (5, 13, 5))#candidate|5700|(5, 13, 5)|var|uint8
var_5701 = relay.var("var_5701", dtype = "float64", shape = (594,))#candidate|5701|(594,)|var|float64
var_5702 = relay.var("var_5702", dtype = "float32", shape = (5, 13, 5))#candidate|5702|(5, 13, 5)|var|float32
var_5703 = relay.var("var_5703", dtype = "bool", shape = (5, 13, 5))#candidate|5703|(5, 13, 5)|var|bool
call_5698 = func_5697_call(var_5699,var_5700,var_5701,var_5702,var_5703,)
output = call_5698
func_5704 = relay.Function([var_5699,var_5700,var_5701,var_5702,var_5703,], output)
mutated_mod['func_5704'] = func_5704
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5818 = relay.var("var_5818", dtype = "int64", shape = (1, 3, 15))#candidate|5818|(1, 3, 15)|var|int64
var_5819 = relay.var("var_5819", dtype = "int64", shape = (5, 3, 15))#candidate|5819|(5, 3, 15)|var|int64
bop_5820 = relay.equal(var_5818.astype('bool'), var_5819.astype('bool')) # shape=(5, 3, 15)
output = bop_5820
output2 = bop_5820
func_5835 = relay.Function([var_5818,var_5819,], output)
mod['func_5835'] = func_5835
mod = relay.transform.InferType()(mod)
var_5836 = relay.var("var_5836", dtype = "int64", shape = (1, 3, 15))#candidate|5836|(1, 3, 15)|var|int64
var_5837 = relay.var("var_5837", dtype = "int64", shape = (5, 3, 15))#candidate|5837|(5, 3, 15)|var|int64
output = func_5835(var_5836,var_5837,)
func_5838 = relay.Function([var_5836,var_5837,], output)
mutated_mod['func_5838'] = func_5838
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6319 = relay.var("var_6319", dtype = "float64", shape = (10, 3, 2))#candidate|6319|(10, 3, 2)|var|float64
uop_6320 = relay.cos(var_6319.astype('float64')) # shape=(10, 3, 2)
output = relay.Tuple([uop_6320,])
output2 = relay.Tuple([uop_6320,])
func_6336 = relay.Function([var_6319,], output)
mod['func_6336'] = func_6336
mod = relay.transform.InferType()(mod)
mutated_mod['func_6336'] = func_6336
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6337 = relay.var("var_6337", dtype = "float64", shape = (10, 3, 2))#candidate|6337|(10, 3, 2)|var|float64
func_6336_call = mutated_mod.get_global_var('func_6336')
call_6338 = func_6336_call(var_6337)
output = call_6338
func_6339 = relay.Function([var_6337], output)
mutated_mod['func_6339'] = func_6339
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6586 = relay.var("var_6586", dtype = "uint8", shape = (6, 11, 11))#candidate|6586|(6, 11, 11)|var|uint8
const_6587 = relay.const([[[3,4,-7,-9,-3,-8,-4,-7,4,-7,3],[8,10,8,-10,-1,-1,7,6,-1,-10,10],[-8,6,8,-2,1,6,3,-9,7,8,-2],[5,2,7,-7,-8,3,-6,9,-4,7,2],[-4,-5,-8,10,-7,-8,-3,2,1,6,6],[-8,9,3,-4,7,3,-10,2,-3,-4,-9],[7,8,1,-3,-3,2,-3,-7,-10,-4,4],[-8,-3,-7,-3,6,10,-7,6,-8,2,-1],[4,1,-4,-1,-10,-7,9,10,2,9,9],[-3,-7,-6,-10,4,-6,-10,-10,9,7,3],[-1,5,10,-7,1,6,10,8,10,4,7]],[[-8,-4,-6,-4,8,-3,-1,8,-4,8,8],[1,-10,8,-6,-7,-1,-3,3,-8,-3,3],[-8,1,-1,-1,7,-6,2,10,-8,-2,1],[6,3,4,-6,9,7,5,9,10,5,-4],[10,7,-4,-7,-4,-6,6,2,-6,-8,-1],[2,7,9,-9,-1,8,7,6,-6,6,9],[3,-7,-6,-1,-6,-8,-8,-8,-9,-6,-6],[-8,8,7,5,7,9,4,-9,-2,-1,-9],[-9,-6,8,5,4,8,-5,-5,1,6,-7],[7,9,-10,-4,-9,-10,9,-6,9,8,-1],[2,-1,7,-7,2,-10,-5,-1,-3,-2,-5]],[[8,7,-3,-7,-6,-10,6,-8,4,8,9],[6,2,10,2,-7,9,10,-7,-6,-7,-1],[6,7,7,5,9,-6,1,-9,1,1,-7],[2,9,-8,6,1,-1,5,-6,-4,10,-7],[5,-3,-1,-6,5,-4,-8,3,4,-8,-4],[2,3,-4,9,-5,-9,-1,-3,1,-7,-2],[-9,-10,9,-7,3,1,-9,-9,8,3,10],[-8,-10,-1,-3,-3,10,-5,-1,1,4,-10],[-9,-1,2,-6,7,7,2,8,3,-10,-3],[3,9,-10,8,-8,-6,5,5,2,5,1],[7,7,-9,4,-1,-9,-1,-3,-6,7,2]],[[-2,5,-8,5,-10,-9,4,-3,1,7,2],[9,-8,-6,9,-9,6,-8,6,4,-6,2],[-10,-10,9,-2,-5,6,-6,-10,-2,-7,-7],[-3,-8,9,-9,-6,8,-9,-5,-5,2,6],[6,2,-9,6,-5,6,-5,7,-8,2,-3],[2,-4,8,10,3,-4,-4,5,8,3,3],[-3,-4,7,8,9,-6,8,-6,-2,6,3],[8,2,-7,-3,4,3,6,4,-8,5,5],[-9,-2,1,6,8,3,1,-6,2,-10,-8],[5,-2,4,-6,-1,-9,8,2,3,8,-3],[-5,5,1,-2,-4,10,9,-3,10,-2,8]],[[-8,-3,-2,6,-10,-4,-10,-10,3,-1,-2],[-6,7,-1,-4,8,3,10,2,1,-9,-9],[-2,-3,-5,-10,5,1,2,1,-5,6,10],[-3,4,-4,-9,-3,-2,-7,-1,3,3,-7],[8,-8,7,-10,4,9,7,2,-8,8,1],[8,-4,-9,-5,-1,4,-7,-7,-10,-10,8],[6,-3,3,6,-9,-8,-7,2,-3,6,-4],[10,2,10,-1,-9,-8,-1,6,-5,-4,-7],[-7,-3,-2,10,4,7,2,-7,-8,9,-9],[-7,10,9,4,-4,-7,-3,-8,6,3,-5],[3,-7,8,-6,-6,9,4,7,4,-1,8]],[[9,-7,5,8,-4,-4,3,4,-9,4,-4],[8,8,-5,-4,-3,7,9,9,-6,10,1],[-3,7,-5,2,1,3,1,-10,-10,-7,2],[-1,-5,3,10,-1,1,7,-10,7,8,-3],[-7,5,6,4,-9,-3,3,-10,-2,-8,-8],[10,3,-9,7,-1,5,-10,9,2,-1,10],[1,-9,-2,5,-3,10,-2,8,-3,4,6],[-10,9,10,-7,6,-4,-10,-3,6,9,1],[-7,1,-7,-7,-8,-7,-10,-7,-9,2,7],[8,6,3,4,-7,10,-10,-2,1,5,-8],[-2,2,5,5,-8,1,10,1,5,-4,7]]], dtype = "uint8")#candidate|6587|(6, 11, 11)|const|uint8
bop_6588 = relay.bitwise_and(var_6586.astype('uint8'), relay.reshape(const_6587.astype('uint8'), relay.shape_of(var_6586))) # shape=(6, 11, 11)
func_4816_call = mod.get_global_var('func_4816')
func_4818_call = mutated_mod.get_global_var('func_4818')
const_6600 = relay.const([[-2.040034,-3.222094,-6.122545,3.275185,-2.057705,2.622709,-0.595780,1.051334,0.630225,8.694549,5.941103,0.269604,3.114560,4.471130,4.506717,8.509793,4.916086,-4.949692,-7.934732,3.321999,-9.958416,9.412579,9.205793,-4.363635,-2.119686,-7.634541,2.976331,-4.714411,1.684901,-9.425825,9.253291,-4.807206,-6.450809,3.074464,0.218189,3.938636,8.994354,-3.630314,3.541273,0.393738,-2.572716,8.551546,8.119590,-3.411363,-8.295064,4.782613,1.865507,-4.241351,2.472453,-6.649550,5.436270,-8.799515,-4.097323,8.269729,2.516640,-4.481850,-1.153923,2.422623,1.605170,-3.448496,4.289537,3.433225,-3.484262,-5.033331,8.115927,-8.294291,-9.950659,-5.176719,1.588474,-5.926616,-1.348311,3.342665,4.781569,7.461936,-7.066023,-8.720850,2.345220,-2.333116,8.607444,6.747479,6.227424,9.075504,-9.296497,1.088873,1.895484,-0.824587,-2.165612,3.726532,3.882275,-4.758588,-3.629337,7.051293,-5.208043,4.433679,-1.399498,3.069213,-7.038312,0.060491,-7.285700,9.325956,-7.415628,2.875763,7.696449,-6.877528,7.374317,-5.432159,7.581871,-5.036331,-7.478601,-9.145752,-5.304322,-6.513901,-2.675774,-7.703080,-9.633543,5.375386,0.881691,4.259164,3.573090,7.228454,-9.202976,-7.254201,7.958366,-0.749660,7.948830,-8.679722,-5.239535,-1.640333,-5.437306,9.591773,-3.451932,-1.698914,9.537508,-1.088935,6.453188,-3.894113,-5.715323,-6.992150,0.014365,2.489476,8.736258,-6.095238,-4.622479,-6.565474,0.189428,-3.675809,-4.849046,-4.565329,-6.037307,-7.186981,-1.853919,-4.469619,-9.452151,4.778964,6.566351,-6.652495,-7.059891,-3.761655,1.599524,-9.603900,-9.877939,3.668274,1.196720,-7.768900,-9.789466,5.156405,5.824542,7.326212,-9.558826,2.221242,1.690948,-0.587507,7.135550,3.723523,-1.460337,0.806098,-5.421288,6.339077,-4.383117,0.163753,3.395310,-0.413037,-3.494593,-3.257501,-8.298140,-0.782388,4.767542,2.029183,0.766188,6.743674,-7.681684,-2.571720,8.162435,-9.061050,-0.520545,2.257357,3.829246,-5.592984,2.966444,-3.832897,2.705717,-6.952942,-9.081795,4.129119,-8.015406,0.107850,6.020937,9.598350,7.369222,8.231535,5.460062,7.203704,-4.153536,5.974813,-8.670559,4.237468,-4.461286,-2.449861,7.725543,1.861532,9.002401,7.566573,-0.490012,1.772081,-6.132913,0.270189,8.600915,-9.631865,7.324451,-9.035732,-3.479548,5.972712,7.149863,7.866548,3.668484,-8.499670,0.959727,7.630773,-0.990727,1.470543,4.031024,-3.778314,-4.689547,-7.698668,-4.268775,9.130092,-2.191457,-5.901352,6.968698,5.010555,-8.052231,0.008277,3.524862,3.846880,0.504886,-5.108751,-5.540905,-6.433554,-8.263085,-2.976662,5.246428,9.349423,-7.441174,9.665286,5.905833,-8.778498,-5.985104,6.335688,-4.372881,0.311145,2.222206,2.375385,-1.753289,-5.052271,-3.135876,-4.246549,5.230406,-2.527172,1.539746,7.151957,-9.509779,-5.541232,6.967203,-3.575716,-6.997832,2.773508,6.803751,9.460690,-7.147018,-9.958940,-5.732870,-0.201949,-9.498089,3.438328,-8.808861,-7.408315,-9.210203,2.001320,-2.314703,-2.820342,7.963778,4.299117,-6.719756,7.175740,-7.629576,6.462354,-4.967315,-3.465089,-6.554487,-7.240705,-1.579834,9.247414,2.683879,-0.638805,-2.586577,-7.126602,6.237954,3.252092,8.853922,-4.813379,-9.620685,-6.811610,-1.186779,-3.483076,3.338116,3.229595,3.048817,-7.260062,-3.199587,8.040119,7.064987,-7.966098,6.201591,-3.629418,-6.614929,-1.677797,2.476902,2.644843,-4.678435,-5.533129,-6.154411,9.729652,6.855739,-8.879227,9.684219,-3.103511,-9.923317,3.386081,-8.935431,-8.574366,-9.346557,-9.999627,2.159910,5.620103,8.052615,8.568344,-2.926829,7.979497,0.814599,4.231692,8.948957,0.411558,-0.114048,1.601029,2.012922,-2.815499,0.058896,0.737723,-6.438247,-6.026096,-2.226995,-6.608217,-4.104456,-6.223017,9.904011,-7.083792,-6.154779,-0.516697,-1.717359,1.255017,0.669304,-0.434694,-0.165173,-0.688143,-2.448510,-0.341537,-8.632264,6.601964,6.593372,-4.445761,1.546560,9.236618,9.325158,0.027640,-6.658451,6.852488,-5.360324,-6.344484,0.836527,5.420600,8.823055,-2.730640,-6.635074,-0.348353,-9.661501,0.719769,-0.398474,2.031084,-7.745290,0.396322,5.627381,6.210011,-8.958038,2.361514,-1.606633,-1.170489,-7.040689,2.825432,-7.134441,-1.267820,3.467861,0.719357,0.001238,5.270217,4.282833,-7.264521,4.655542,-4.617620,3.149502,3.389469,-8.894744,5.700950,-0.430001,-3.141356,-5.647653,3.765352,-1.471531,0.022532,6.569127,0.248408,-4.026721,-6.044904,1.493103,9.176265,-6.309414,-6.286905,-9.513578,2.890416,9.389104,-5.390522,6.416857,6.444542,-3.006344,7.892916,7.036144,-3.666918,-1.696940,3.737769,7.955722,-8.300278,2.696359,-7.894027,-4.782423,-2.009144,4.117142,0.510458,8.205008,-7.964502,-5.412506,6.104906,3.785978,7.770101,-0.462691,8.211190,3.918648,4.457145,3.047181,5.882263,-5.771685,9.714570,-5.649850,-6.752623,0.684802,0.708116,-9.872323,0.841348,-6.137227,4.979579,2.302403,-5.167461,-0.631688,5.483737,0.835726,4.336936,-2.581101,-3.491103,6.117993,-9.415488,3.426274,-1.852102,7.197205,8.379808,-8.822999,-6.079875,-8.602664,2.943951,4.056681,-7.786962,7.934969,-2.274701,-1.021374,-5.781223,8.762679,-4.502376,-2.241224,-4.123958,-7.330590,8.363649,-7.899909,-7.877959,-6.077089,6.250274,-1.129234,-9.002561,5.774095,1.992391,8.453250,5.091057,7.485042,-0.922190,0.841152,6.709756,-5.193808,-3.009835,-8.174471,8.957480,-8.092118,-4.844885,-3.741576,-1.323219,1.482021,7.520777,0.964168,2.871252,-3.269976,-0.832850,-3.316235,0.427126,-8.318164,0.830116,-1.584906,1.161095,4.481888,6.331487,8.221557,3.792809,-7.278216,9.634653,-8.114913,-9.628291,-3.956248,-9.528227,-9.499754,-5.257896,7.833525,9.178255,-4.148031,8.455380,9.077017,-0.476586,-2.810263,5.173816,-6.038404,0.142080,-6.495276,-2.177970,-3.907612,3.959404,-9.497490,-6.380612,-4.285982,-3.083578,-6.092891,-2.233893,-1.784967,-0.072727,9.807286,8.967061,7.536083,-0.805957,-2.153225,-9.489172,5.599389,7.754148,7.877984,0.331144,-4.945034,1.567235,5.823182,-6.910456,-4.444325,4.625107,-3.021487,7.132192,4.078581,0.638662,-2.599010,-6.694680,-2.479444,-2.449152,2.968723,9.629244,6.267453,2.367928,-6.951919,-2.593722,-7.488934,-0.550689,2.613054,-7.893182,1.221743,-3.835637,-0.042859,4.536675,0.901977,-6.451001,-3.744485,-8.348213,-4.837702,-6.071293,1.622006,7.068169,-8.159744,-0.565116,-6.250585,-5.901253,0.607216,4.728374,-2.262506,-8.559888,-5.922569,-7.339544,-4.928219,-9.680941,-5.853049,6.607060,-4.031907,-9.371775,4.115278,-6.035026,3.923178,1.421998,0.217367,-5.458918,-8.363206,6.958566,-1.277770,4.625748,-9.771956,6.238788,-4.800137,-7.072238,-8.534839,-0.515209,-6.775282,5.446862,7.527776,-3.854672,0.128670,-2.674487,8.575698,6.882489,-7.888819,-5.229694,-3.897120,5.854684,-3.505931,0.448393,-5.574593,-8.703284,-6.109393,5.204879,6.456932,0.482401,-2.225414,-9.611443,7.797386,5.986263,-1.443613,4.681640,-5.694537,7.463873,-7.798360,8.466006,-8.538489,3.545596,5.332124,2.113949,-7.855358,3.654013],[-9.208960,-8.075043,9.629362,4.345281,3.945517,4.018510,-7.836545,0.067928,6.705751,9.552042,-8.089881,0.585746,2.328941,-1.051436,2.961032,3.054742,1.187948,3.815217,6.755312,-3.619197,9.949256,-7.474864,4.577471,4.135834,-7.842852,-4.624739,7.786495,-4.049844,-3.926976,6.636535,9.539190,-1.393319,-9.879887,1.354651,-4.525266,0.512512,0.663702,3.512429,0.447363,-4.941649,-3.231161,-6.653146,-9.014543,-8.508277,-2.254544,-9.767131,-6.789046,-5.250169,-2.130934,8.051374,-6.002100,7.370121,-4.438098,-2.700250,7.419488,-3.133736,9.859892,2.118348,0.207598,3.652203,5.450550,6.513317,-5.315444,0.321580,-1.712593,4.975629,7.041843,-7.024420,-1.040935,7.410354,1.499631,5.872382,-1.945096,-1.172401,-4.419347,0.315102,3.214374,-1.981391,8.308430,1.035364,-0.217854,-5.612999,3.981274,2.175645,0.644217,1.221160,-8.993867,4.018761,0.802585,5.534896,1.791096,-7.983985,2.176667,-3.804054,-5.695038,-5.182853,8.772031,-0.783281,-7.171296,-5.419586,-0.917770,-5.686105,-0.937805,4.599640,-3.994348,6.840935,-6.310324,-6.369735,-4.659572,-0.841831,-1.999403,5.946788,1.109279,-4.992664,-5.375159,9.618325,-7.108287,1.526207,5.779873,8.109368,7.317138,-6.944628,-6.425597,-7.127094,0.283767,9.590337,4.179509,8.146715,-8.134100,-2.629612,-5.101057,7.872351,-7.316785,7.999458,4.456138,8.635568,-0.202926,-6.341578,-5.514584,9.745641,8.582013,-9.296508,-1.982087,6.253048,9.822199,3.087689,3.450966,8.624159,0.709070,-6.614268,1.287120,-7.077212,6.605103,-6.982916,0.094850,7.211856,-4.009547,2.144876,-7.648950,9.675301,7.772175,7.151512,8.255455,-9.847792,-3.503629,3.931858,-2.055699,5.195219,8.322348,2.599906,2.598576,2.213184,-9.263185,-8.846904,-3.444727,5.802334,-0.535334,-0.543663,4.948266,5.937520,2.177226,6.763666,-1.090800,1.132862,-1.357301,-6.402995,-4.744087,5.946748,-7.832107,5.436940,7.055236,-8.203943,6.218264,5.141050,0.664014,-9.223509,2.173508,-6.504041,-7.003903,7.039406,2.453799,2.512597,-6.814969,-6.132969,-7.995691,5.000631,-7.192710,-1.133542,-5.828392,-3.370821,-3.463290,8.288633,-7.335042,4.288234,4.758771,9.373114,-2.152572,-8.407602,9.637235,9.058003,-4.347655,2.256718,3.495659,3.014219,6.584792,6.203935,-1.225765,-6.983387,9.753480,-7.745879,-2.181987,2.253425,-4.717134,5.860502,-6.688110,3.280774,4.904697,-1.412981,-2.854161,3.121375,9.116585,5.742554,7.619372,6.447956,3.685931,3.635094,5.419136,-8.304015,9.804986,-1.566673,3.654255,-5.898294,-4.846411,6.659092,-6.868950,7.004514,1.401203,-0.626012,-8.158855,3.467004,1.164892,6.924010,8.086687,-9.886996,-1.553528,7.713515,-6.017710,-8.503607,-3.451413,-3.068872,-8.341545,-4.379217,-2.180897,-9.766084,-3.321474,8.000853,9.831433,3.773898,-3.289765,2.873415,-5.622811,-1.975176,-6.415716,3.656728,-6.381958,-1.061925,9.417029,3.846157,2.141392,-6.619311,4.538413,2.995389,0.402752,-3.167923,-4.683068,-5.903330,-4.034503,1.490411,9.388506,7.190358,-3.335585,2.908199,-6.181939,-4.732439,-7.296133,-4.927201,-4.461655,-1.821031,-4.037131,4.625919,-5.617143,6.729648,2.263061,-5.287966,3.491767,-9.783046,9.407737,-7.629990,-1.339625,1.197449,5.874027,5.683635,4.742529,4.487327,-0.239772,-7.919396,-5.176288,9.842905,-5.652079,8.688571,7.491550,-9.698933,9.956101,-9.333584,0.961465,-1.142895,0.241137,-5.739539,-0.354848,-9.207534,-7.963458,1.981360,-1.045679,-6.935412,-3.104438,3.049313,-7.471529,-4.142311,-7.199048,6.135288,-1.906221,-8.601623,4.217478,-0.388374,0.627117,-3.514206,3.870953,-0.277558,-7.702540,2.666594,-2.178558,-0.094835,-8.219989,-7.326203,-4.560133,-5.080430,-3.004375,-3.020151,2.011529,6.533957,-2.891308,-6.700139,4.707423,8.754736,-6.955592,0.126615,5.676651,0.009837,-8.370772,-5.337957,0.919965,-1.944349,-2.201587,-5.174435,5.351553,-7.074732,4.102134,-5.049276,4.099515,5.652140,-9.336084,2.373490,-3.355774,0.134282,-1.293282,1.804075,-4.189650,5.307146,2.062867,-4.522738,6.191148,-3.017415,5.467119,-6.222824,-8.915984,-7.665199,-2.472101,4.493349,-1.813688,9.380788,-9.440728,5.651596,-6.637876,7.944328,-9.133982,0.201532,-3.661046,-3.757037,-4.133809,0.956257,-7.897511,0.412995,8.544333,-4.068998,7.168841,-5.814841,-5.740564,-2.396946,4.252604,-8.483380,1.291592,7.212681,8.086600,3.927363,-5.360982,3.473755,4.517520,4.110603,1.302496,-6.483433,-6.584944,-1.555896,-0.984883,5.071889,7.286802,0.118112,1.956693,-5.139961,3.769493,-1.828153,-3.657645,-1.558309,-1.215354,-5.239530,1.812940,-1.320889,-0.504506,4.998577,7.338096,-6.767233,-0.536421,1.348463,-6.127833,8.821401,-0.838634,-7.186821,2.112502,-4.064846,-1.240541,8.490529,1.715141,1.173929,-6.410776,7.504706,-7.663434,-3.437396,7.095457,-0.400990,-3.133170,1.444584,-5.670158,4.423001,6.844768,4.170270,3.662626,3.273293,5.240779,-3.388578,2.692622,3.792199,4.267076,6.478789,-9.329696,-5.490932,3.761068,4.479113,5.595889,9.456342,-0.628672,9.045751,5.104645,-2.272606,7.365130,-4.698355,-8.906915,-2.898073,-9.347925,8.933045,-8.502812,7.747026,0.491069,8.927505,9.225726,3.958488,3.510573,2.022432,-7.087708,8.879974,-6.959091,-7.393992,-1.300048,-9.736309,-1.634983,8.765560,-3.608443,-5.849939,2.902003,-8.803007,-8.638192,-2.361334,-0.205581,-6.866719,2.643835,8.135229,-2.557444,1.744924,-8.983201,9.320587,7.703228,9.174454,0.699797,9.606561,1.686352,4.476719,-3.269018,-5.852360,-2.430093,3.809934,-3.741624,0.442960,-8.955091,1.296233,1.862958,-5.043848,2.483606,-9.940341,6.672959,1.682021,0.255982,1.403528,-9.411975,1.966139,-7.281957,5.900173,9.880341,6.406902,1.164417,-4.103164,6.775828,2.629039,5.500798,4.005464,6.669264,0.800785,-9.287643,-7.593629,-0.631988,4.018216,-9.278348,-9.399865,9.975227,-7.613278,-0.846967,3.255781,1.236973,2.859570,-8.763314,8.424175,6.871553,8.731203,0.014315,8.445857,4.243497,6.833419,8.407094,0.187058,1.148307,9.807465,-5.118014,-1.524092,7.953270,-6.562160,-2.521732,4.094590,2.759090,3.809444,6.412839,-2.347367,4.116318,-4.004918,4.257168,-8.799568,0.059776,5.650761,-2.339451,2.484979,7.673544,-2.932942,-5.674981,9.490044,-3.576878,-4.365808,7.800444,-9.987051,-3.609829,7.591220,-5.592892,3.037952,1.186590,8.762963,-0.496828,9.352257,4.320739,9.630591,-7.357777,8.898316,-3.504009,-9.770713,-3.287778,-5.819979,4.015044,6.328138,8.225750,-2.369768,5.925136,2.998193,-8.766521,6.409693,-6.716107,7.919236,2.854295,9.614451,1.587733,-6.196172,-0.062275,-2.480094,-1.237503,0.319567,-5.023844,3.156676,6.439175,9.029251,7.845191,0.924895,-4.479761,-1.269118,7.091334,9.484703,0.159669,9.482166,-9.758612,-4.253488,3.595021,9.953936,8.874148,3.790042,2.585785,-0.479267,7.244671,-4.338400,0.131944,5.014021,-7.775227,9.101559,-7.757713,0.661898,-6.933973,-6.866226,7.184178,-4.361482,-7.197475,5.461289,-1.975084,-4.757995,-5.126174,8.961192,-9.495450,-1.661058,6.845307,-2.104378],[-1.413655,3.918995,0.060626,-0.342655,4.159875,7.495826,-8.972548,9.153380,3.629178,-1.278806,-6.649518,9.519416,4.960455,7.641175,7.943378,-8.720066,9.398087,-3.251817,7.492781,2.594497,3.521421,-4.833551,8.511548,8.391902,-0.991650,-5.866974,6.009052,7.954054,-6.224352,-4.364865,-2.175241,4.390933,-6.902499,3.353335,4.477578,-3.314843,1.813769,-8.771705,-2.233880,2.958149,-7.384224,8.990748,9.605958,-5.019893,2.699764,5.812542,1.671732,4.455707,8.540492,-4.619968,4.266620,6.539407,0.980357,7.901284,6.157249,-3.098622,7.811585,-3.318967,-0.300450,-7.565986,9.817241,-0.531411,-7.690095,-5.928810,-4.194537,-9.359086,6.489292,-3.537074,-4.314817,-6.796606,5.812120,3.932342,-2.055614,5.332146,-8.756932,-0.754090,-4.493608,-7.665920,-1.385976,-9.899028,6.641862,-6.660366,-5.207096,-7.162315,-0.182236,2.423671,7.522169,-4.704031,-4.620228,4.051430,6.328124,-7.376518,-4.994525,8.818490,4.516257,3.142143,-7.378959,6.437164,-1.466103,2.646240,-1.412503,-8.976259,4.783069,6.806776,8.823670,-9.887753,-8.957993,-0.518803,-2.528244,9.486777,6.827718,-7.884987,-4.912239,-3.687289,2.936304,9.459690,-9.893318,-2.021136,2.947035,4.985446,-2.840427,4.001997,-8.104823,0.517419,6.096233,-5.948591,8.552871,8.554027,-0.825702,-1.626405,3.812688,5.126021,-8.633945,-2.077659,1.945103,-9.522416,1.083042,-8.316567,4.477965,-3.172619,-2.008858,8.837685,-7.498983,0.897680,-4.715643,-8.679376,-2.975034,-0.403850,2.385576,-1.135373,-1.817197,-7.616162,-2.392026,-0.947457,-2.139231,5.293124,7.923390,-0.458612,5.206780,6.928368,-5.747894,0.795941,0.711924,3.134123,-1.569458,-6.465720,-0.914298,1.085943,6.210091,-6.151712,-9.726555,4.674776,-4.046108,1.588766,9.146367,3.803754,9.849752,-5.049300,-8.926532,4.602303,3.158205,-1.580198,6.237934,5.730899,4.269497,-9.349524,3.584357,0.338669,-2.676595,6.484730,2.811338,9.862849,4.217088,-4.335484,9.733245,5.262738,1.020068,-9.732733,0.137925,9.634204,9.122637,-5.443287,6.911554,-5.292240,4.255203,-5.371492,-4.296785,5.056303,5.023546,-7.499841,5.559724,-2.004492,9.375879,3.074685,-6.823491,5.454998,5.764328,-8.919032,1.315694,-6.115892,-9.285643,-8.147376,-8.166856,-3.491416,1.854733,-4.733759,-4.613823,1.397383,8.576457,-3.796322,9.413952,2.658418,-7.055703,-6.376333,-0.645931,-0.788546,1.722091,2.688398,-7.233911,2.698002,-6.103917,-2.569945,-9.016329,-5.616385,6.555091,0.115591,-6.644295,5.475686,-1.966198,4.865893,-1.523112,0.723667,-9.226379,3.570069,9.460435,-3.704363,-7.977121,-0.450983,-8.455124,-5.009280,-1.381158,-2.849685,-4.263617,5.259575,0.364993,0.959819,-2.508485,3.478973,5.890323,7.351151,-1.603510,3.902749,-6.791807,0.708328,-7.885942,-3.821106,-7.497248,-7.463970,-7.316467,5.755137,-6.472469,2.772212,-0.873520,5.040473,3.255449,-7.465210,-8.083502,-4.720399,4.779009,3.688645,9.175303,-6.536385,-4.461433,-1.965177,-6.895674,2.796621,-5.222225,0.818092,7.336278,0.385000,6.987461,-9.817464,4.588760,9.977855,1.766684,-2.534404,-4.505426,-4.638082,6.049677,-1.783542,-4.232187,-9.813500,-8.542374,4.202765,-5.661272,1.130597,-6.272731,3.536214,-8.488850,4.571701,3.949160,3.083011,-9.608136,0.636156,-1.457937,-6.365836,5.431951,-1.334669,-3.715700,6.337551,-0.928121,9.624508,6.590381,-0.181587,3.816736,9.359240,3.178780,-7.323662,-8.128358,-1.404846,5.517301,4.047836,2.903753,0.079486,-0.567424,7.555532,2.923220,3.740669,7.053884,-4.085950,4.484047,-7.695679,-0.820759,4.300832,-3.914907,-6.293606,-9.499508,-4.202890,5.847678,7.148895,-0.945453,-2.349998,7.024997,-6.442682,7.498087,5.709083,-7.124039,8.299586,6.544918,3.903897,-4.156266,6.793961,-8.185588,3.516446,5.688725,4.211027,4.067370,6.863841,8.719800,0.363721,8.865955,-6.985759,-8.529697,-3.300822,-5.060960,9.664403,6.798416,8.067146,-8.013379,5.224283,7.782907,-5.476718,-1.659882,-7.914105,6.516563,-9.578280,-6.608282,5.159753,3.335633,-8.020606,0.667444,-2.836477,3.516192,-8.809243,-8.738325,6.410575,-9.565876,-1.725501,-8.575760,2.397122,8.245458,-2.016144,-1.019495,-6.943377,2.249253,2.656803,6.463398,-4.844874,8.048728,-2.749164,-7.257303,8.785714,2.348474,-4.204727,-2.539330,-0.331405,5.684936,-0.950814,-2.139603,3.412002,0.700109,-6.678108,1.865068,6.348346,-2.084235,-9.472962,-6.618132,4.301854,-9.132741,3.353769,1.605609,-9.807317,-7.101831,-1.686255,0.397301,-4.991147,-4.048594,4.759853,9.444582,-6.996984,5.921100,3.935000,9.949490,9.079829,-2.984714,-7.826652,-8.958423,-5.538583,3.184901,6.290585,6.016724,-1.080073,8.409040,7.293270,-3.342507,-0.368180,-3.246073,2.859575,-7.345227,0.345806,4.198521,0.203707,-9.138109,-7.462682,-3.702663,5.776759,-8.900755,-4.336476,4.873914,-4.018811,8.533925,3.324465,-0.714297,0.370724,-6.192423,6.230182,7.758734,4.507808,5.156490,6.075984,-6.927070,7.159826,-4.812744,-1.667317,4.130719,-6.686681,8.465379,-8.933544,-9.257714,-1.195379,4.760085,4.451108,-1.580217,-6.719685,-1.096074,-8.071851,-0.815705,2.729925,5.530339,8.313580,2.937532,9.817481,4.615914,-4.717195,-4.688650,-6.657319,9.634229,-5.964843,9.350412,0.231364,-9.666764,-7.337789,7.542749,-5.855942,9.581162,9.656525,0.180017,7.145609,-1.786054,-6.753722,-3.361384,-5.796507,-1.561941,-0.332576,-6.452727,-2.704091,3.399424,2.542600,-3.654858,5.933145,2.258651,-6.931232,5.661866,-8.041420,-2.210376,-8.015897,9.381085,-9.468636,9.455004,6.088486,-4.062255,3.199509,-3.423758,-2.400771,-5.884752,-7.820769,-0.595505,-5.020758,-4.022286,7.576698,5.566372,-4.860103,6.405823,7.323645,8.141717,-3.608285,-2.351929,5.603892,-5.745508,4.220850,2.619274,1.678834,9.830657,4.660053,-7.000968,-6.845885,1.282870,-3.290664,7.602856,6.779620,1.776622,-8.061123,0.255040,-5.921753,3.459307,-3.208801,-0.217950,-8.178756,4.213058,8.704233,-3.602337,-4.616777,-5.746489,-1.062548,-1.172239,-3.678384,1.092418,5.733333,-5.804700,6.879542,7.506508,-9.298988,0.231889,5.879055,4.910026,-6.072184,-5.731133,0.248270,0.784259,-3.513034,7.427480,7.294194,2.636033,-4.089689,9.123861,6.823649,0.805025,-9.766200,-2.935030,-6.479382,-2.620985,-7.742239,4.456084,-0.720061,6.536765,-7.366527,7.986562,-4.473033,-3.835382,0.214281,-9.122617,-6.369026,-3.977157,-5.745510,4.587385,-5.082483,8.692296,-6.980207,-8.886108,8.960775,-2.849136,9.721704,-4.748923,-3.385207,-2.646847,-8.746450,2.254324,-9.681983,0.548420,-8.231954,5.507060,-6.005879,5.383123,1.787257,7.543087,-2.026049,-0.729583,-5.222605,8.257638,0.944834,-5.853114,-3.684554,8.443490,8.814885,5.212916,4.079201,9.465376,2.492544,-9.078812,-5.697815,0.984821,1.608715,-1.441472,-4.538843,1.790943,2.463770,0.872694,2.528351,2.262886,5.165671,-3.009656,8.530838,0.100971,5.816156,-0.194324,4.952572,-3.920209,1.579920,-5.379695,-0.908100,-3.855578,3.575318,8.903989,-8.302972,-4.358769,7.718378,-0.430033,-5.863188,9.417711,0.463124]], dtype = "float64")#candidate|6600|(3, 700)|const|float64
call_6599 = func_4816_call(relay.reshape(const_6600.astype('float64'), [15, 10, 14]))
call_6601 = func_4816_call(relay.reshape(const_6600.astype('float64'), [15, 10, 14]))
bop_6623 = relay.bitwise_xor(var_6586.astype('int8'), relay.reshape(const_6587.astype('int8'), relay.shape_of(var_6586))) # shape=(6, 11, 11)
output = relay.Tuple([bop_6588,call_6599,const_6600,bop_6623,])
output2 = relay.Tuple([bop_6588,call_6601,const_6600,bop_6623,])
func_6626 = relay.Function([var_6586,], output)
mod['func_6626'] = func_6626
mod = relay.transform.InferType()(mod)
var_6627 = relay.var("var_6627", dtype = "uint8", shape = (6, 11, 11))#candidate|6627|(6, 11, 11)|var|uint8
output = func_6626(var_6627)
func_6628 = relay.Function([var_6627], output)
mutated_mod['func_6628'] = func_6628
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6759 = relay.var("var_6759", dtype = "uint16", shape = (5, 11, 6))#candidate|6759|(5, 11, 6)|var|uint16
var_6760 = relay.var("var_6760", dtype = "uint16", shape = (5, 11, 6))#candidate|6760|(5, 11, 6)|var|uint16
bop_6761 = relay.less_equal(var_6759.astype('bool'), relay.reshape(var_6760.astype('bool'), relay.shape_of(var_6759))) # shape=(5, 11, 6)
func_4816_call = mod.get_global_var('func_4816')
func_4818_call = mutated_mod.get_global_var('func_4818')
var_6765 = relay.var("var_6765", dtype = "float64", shape = (2100,))#candidate|6765|(2100,)|var|float64
call_6764 = func_4816_call(relay.reshape(var_6765.astype('float64'), [15, 10, 14]))
call_6766 = func_4816_call(relay.reshape(var_6765.astype('float64'), [15, 10, 14]))
func_5697_call = mod.get_global_var('func_5697')
func_5704_call = mutated_mod.get_global_var('func_5704')
var_6769 = relay.var("var_6769", dtype = "uint8", shape = (325,))#candidate|6769|(325,)|var|uint8
const_6770 = relay.const([8.970549,9.654504,-5.103137,-0.141028,-1.840763,-0.062876,5.296956,4.219963,-1.334371,-0.314566,-9.789091,8.770200,-9.529648,2.514472,8.329024,6.977855,0.267729,-6.151552,-8.876251,7.390672,-0.894362,-3.763406,-8.641785,0.585807,-5.366040,-7.025185,-3.209663,-2.735158,-1.417839,-7.385871,3.673494,-8.839771,-5.902656,5.615321,-9.728816,-6.602504,-8.383984,-1.290577,-0.601128,9.572659,-4.684460,0.952930,0.955101,3.935228,3.237853,0.772821,-9.638261,-3.502967,8.157335,2.874747,-2.220992,-1.943774,-2.887335,9.686343,-4.795635,4.774582,-0.133961,8.137360,-6.327342,-2.737937,-2.541436,2.649740,8.386312,-4.301530,9.739690,-8.040838,9.630356,-0.654608,-6.072035,-1.905992,-4.449130,6.667508,-0.904363,9.360364,4.763891,7.560932,0.637250,-0.589970,-8.386333,2.344374,1.013746,4.718315,-6.267674,-5.364393,4.100013,3.435261,6.012062,5.903898,1.136366,-9.565611,-9.008358,7.502566,-2.079204,-5.586963,-9.025508,-1.857177,-5.389809,-7.443536,2.531908,4.868118,4.711978,0.834696,4.804684,-1.663864,2.467945,3.415176,-0.932041,5.541926,1.347312,5.701724,-7.682562,5.584650,6.822074,8.908463,-2.056824,-6.981072,-6.033118,-1.093641,-0.064938,-5.137287,-9.802532,5.969400,-2.813534,9.591584,-6.987616,0.983954,3.204332,5.884685,-5.562028,3.635237,8.618844,-6.627576,3.597808,3.643914,-9.860861,6.194785,-7.714799,5.707842,-2.879681,-4.727793,-2.545964,8.721478,-2.111378,-8.030199,0.706559,1.418143,5.276454,-0.474198,6.534391,-8.361189,-3.037131,-2.420315,-9.845886,2.669605,-5.948191,-7.392742,-2.452244,-1.695746,-9.354182,1.021581,9.504485,8.092532,4.731621,3.668273,1.825871,-7.085314,-6.181489,-0.218928,-8.339599,8.353960,3.241397,8.485142,2.073509,-3.892207,8.653708,0.936986,4.744813,8.003170,5.955991,8.306975,9.786922,-4.653815,-0.439930,-5.391054,-7.377096,4.259273,4.827407,9.802518,8.158073,8.345854,-2.695374,1.760989,3.590252,-3.235172,4.465191,2.774022,0.258557,-1.470685,3.025409,-6.631553,-1.736276,1.849275,2.775408,-5.711456,0.907795,0.260445,1.757970,0.686332,8.148204,9.031916,3.340174,7.212273,-8.323008,-7.956023,7.395780,0.991445,-4.021108,7.893778,-4.473455,-5.583275,6.918652,2.170596,-9.115136,7.836720,-3.996516,7.157078,-0.934165,-8.664447,-6.248520,-2.654742,8.867756,-6.615514,-1.204600,9.936048,2.971896,-0.031605,7.253449,8.682564,-1.183812,-1.797381,2.744628,-6.794588,-6.112657,-6.381602,3.911150,-1.758571,4.490846,3.827781,0.174963,-0.030506,-5.779871,4.393961,-0.142383,-5.964156,-2.824501,3.536307,-3.954963,1.581474,-2.108181,5.883411,-8.762850,-1.988799,-9.641032,6.733338,7.155856,1.301846,6.798812,3.939204,4.915793,-4.692231,-5.677600,-6.068896,-0.424277,-4.820044,0.580060,-2.024629,2.479971,6.059126,-9.114350,5.355387,-2.028743,-5.768445,-5.128641,9.136698,8.832438,1.979067,4.217035,-1.080246,1.842303,-2.917567,-2.730399,-2.082255,-4.670250,-3.754835,-1.949636,-7.238997,-3.330907,-0.814070,-2.438824,-8.418337,-8.457888,-7.580015,6.107065,3.135294,7.234198,-9.783179,-5.640582,9.292240,-4.113513,-0.108453,-6.433340,-6.959668,7.174846,1.767698,-3.712187,5.868694,2.433066,4.490766,-8.497539,0.332291,-2.578328,1.711726,-0.706681,2.307759,-9.451907,1.208857,-4.893419,1.404074,6.043465,-2.593662,4.689788,-8.934441,3.555346,0.207361,-8.643038,2.852312,-6.642622,6.030089,8.045718,-4.090447,-5.167312,-2.304866,4.152179,-4.237977,-9.439569,-4.093983,-5.299619,-0.624812,-5.048730,8.827706,-8.368000,-3.210318,-8.576270,0.720997,-1.477387,3.780657,-7.336813,-0.851452,-4.549067,-2.786377,0.593262,-3.725775,4.376586,3.097018,-7.906705,-7.664332,7.258210,-6.051229,-6.013614,5.399476,1.452526,-3.594729,3.425659,5.595435,5.299785,-0.335821,-4.399904,7.555304,-9.437781,-5.139137,9.457234,6.175735,3.382009,-9.155611,-3.998858,-3.386913,9.570387,9.674107,7.276405,-6.091141,-6.986013,2.243800,5.434802,-0.215942,2.332136,-9.231899,7.077353,2.962243,2.295780,-3.641211,-7.359700,8.265506,0.226171,-4.086208,4.352382,-8.520768,2.001199,6.967747,-9.945496,-0.998985,-2.567957,-0.897702,6.663801,-1.173637,-0.886541,-7.119974,0.265207,-3.344961,-2.016414,-8.824469,1.355752,5.101290,-7.325425,0.871435,-3.881800,7.582388,-4.762740,-9.154366,9.541177,2.150024,7.900107,-1.505535,7.264746,-4.806382,6.632432,-1.678125,0.006488,-0.367963,-7.168354,-7.649102,0.922869,0.088140,6.330044,0.664693,-3.891355,-9.004752,-5.670506,-3.298399,2.931052,6.228928,7.945005,7.870394,9.855830,5.897117,3.994855,-4.468580,1.346510,8.299856,9.429474,6.092902,5.562478,-0.054214,5.570774,8.486182,3.567376,4.335898,-1.728854,1.510352,-9.892735,8.471921,-7.634246,9.799553,3.700912,-3.992824,1.598285,-7.353439,-7.453094,4.784104,-7.490810,-3.877335,2.003013,-7.776985,9.199391,-9.455178,-0.792549,8.649372,9.982759,-4.986924,7.015234,-1.609315,9.991929,9.305945,0.364221,1.907161,-0.256219,1.941341,0.287589,7.397595,2.300492,1.617762,-6.332652,-6.912094,9.447098,-7.738448,7.310853,6.674106,-5.557801,-5.539661,9.941745,4.985422,-8.783714,-3.874026,-9.280978,-7.262380,7.818259,-7.280138,-9.769077,2.356595,0.594120,2.635678,-0.762338,3.855405,0.144367,-4.248257,1.126223,-1.879318,-4.165400,-9.443390,7.938128,-7.267031,-9.992751,-9.477484,0.556591,-1.995043,6.367404,-7.324753,-9.649187,-7.433963,9.436528,5.403032,-8.441626,-8.259403,-2.188991,-6.833975,3.723617,-4.734222,7.146562,1.995165,-3.572156,1.364970,2.096705,-8.537183,-8.656184,5.398128,3.842416,-5.527777,9.816532,7.201545,4.825218,3.810125,-7.936361,-8.147484,-9.103238,7.977051,5.671018,-2.854101,-8.535569,9.069610,-4.896400,-3.844114,4.669842,1.422199,-7.826235,-3.292034,-8.926475,-4.870386,0.048365,-0.483663,-1.638747,-5.591320,8.832811,-8.819311,4.746880,-7.571192,5.745948,-8.379833,8.419783,6.929608,-8.705371,-5.660824,9.294206,8.484323,8.756463,-9.913816], dtype = "float64")#candidate|6770|(594,)|const|float64
call_6768 = relay.TupleGetItem(func_5697_call(relay.reshape(var_6769.astype('uint8'), [5, 13, 5]), relay.reshape(var_6769.astype('uint8'), [5, 13, 5]), relay.reshape(const_6770.astype('float64'), [594,]), relay.reshape(var_6769.astype('float32'), [5, 13, 5]), relay.reshape(var_6769.astype('bool'), [5, 13, 5]), ), 1)
call_6771 = relay.TupleGetItem(func_5704_call(relay.reshape(var_6769.astype('uint8'), [5, 13, 5]), relay.reshape(var_6769.astype('uint8'), [5, 13, 5]), relay.reshape(const_6770.astype('float64'), [594,]), relay.reshape(var_6769.astype('float32'), [5, 13, 5]), relay.reshape(var_6769.astype('bool'), [5, 13, 5]), ), 1)
output = relay.Tuple([bop_6761,call_6764,var_6765,call_6768,var_6769,const_6770,])
output2 = relay.Tuple([bop_6761,call_6766,var_6765,call_6771,var_6769,const_6770,])
func_6776 = relay.Function([var_6759,var_6760,var_6765,var_6769,], output)
mod['func_6776'] = func_6776
mod = relay.transform.InferType()(mod)
var_6777 = relay.var("var_6777", dtype = "uint16", shape = (5, 11, 6))#candidate|6777|(5, 11, 6)|var|uint16
var_6778 = relay.var("var_6778", dtype = "uint16", shape = (5, 11, 6))#candidate|6778|(5, 11, 6)|var|uint16
var_6779 = relay.var("var_6779", dtype = "float64", shape = (2100,))#candidate|6779|(2100,)|var|float64
var_6780 = relay.var("var_6780", dtype = "uint8", shape = (325,))#candidate|6780|(325,)|var|uint8
output = func_6776(var_6777,var_6778,var_6779,var_6780,)
func_6781 = relay.Function([var_6777,var_6778,var_6779,var_6780,], output)
mutated_mod['func_6781'] = func_6781
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7059 = relay.var("var_7059", dtype = "float32", shape = (8, 2, 6))#candidate|7059|(8, 2, 6)|var|float32
uop_7060 = relay.sqrt(var_7059.astype('float32')) # shape=(8, 2, 6)
func_1892_call = mod.get_global_var('func_1892')
func_1895_call = mutated_mod.get_global_var('func_1895')
var_7079 = relay.var("var_7079", dtype = "float32", shape = ())#candidate|7079|()|var|float32
call_7078 = relay.TupleGetItem(func_1892_call(relay.reshape(var_7079.astype('float32'), [])), 2)
call_7080 = relay.TupleGetItem(func_1895_call(relay.reshape(var_7079.astype('float32'), [])), 2)
bop_7081 = relay.equal(uop_7060.astype('bool'), relay.reshape(var_7059.astype('bool'), relay.shape_of(uop_7060))) # shape=(8, 2, 6)
output = relay.Tuple([call_7078,var_7079,bop_7081,])
output2 = relay.Tuple([call_7080,var_7079,bop_7081,])
func_7097 = relay.Function([var_7059,var_7079,], output)
mod['func_7097'] = func_7097
mod = relay.transform.InferType()(mod)
var_7098 = relay.var("var_7098", dtype = "float32", shape = (8, 2, 6))#candidate|7098|(8, 2, 6)|var|float32
var_7099 = relay.var("var_7099", dtype = "float32", shape = ())#candidate|7099|()|var|float32
output = func_7097(var_7098,var_7099,)
func_7100 = relay.Function([var_7098,var_7099,], output)
mutated_mod['func_7100'] = func_7100
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7220 = relay.var("var_7220", dtype = "int8", shape = ())#candidate|7220|()|var|int8
var_7221 = relay.var("var_7221", dtype = "int8", shape = (11, 9, 11))#candidate|7221|(11, 9, 11)|var|int8
bop_7222 = relay.bitwise_xor(var_7220.astype('int8'), var_7221.astype('int8')) # shape=(11, 9, 11)
output = bop_7222
output2 = bop_7222
func_7239 = relay.Function([var_7220,var_7221,], output)
mod['func_7239'] = func_7239
mod = relay.transform.InferType()(mod)
var_7240 = relay.var("var_7240", dtype = "int8", shape = ())#candidate|7240|()|var|int8
var_7241 = relay.var("var_7241", dtype = "int8", shape = (11, 9, 11))#candidate|7241|(11, 9, 11)|var|int8
output = func_7239(var_7240,var_7241,)
func_7242 = relay.Function([var_7240,var_7241,], output)
mutated_mod['func_7242'] = func_7242
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7375 = relay.var("var_7375", dtype = "uint32", shape = (9, 15, 9))#candidate|7375|(9, 15, 9)|var|uint32
var_7376 = relay.var("var_7376", dtype = "uint32", shape = (9, 15, 9))#candidate|7376|(9, 15, 9)|var|uint32
bop_7377 = relay.not_equal(var_7375.astype('bool'), relay.reshape(var_7376.astype('bool'), relay.shape_of(var_7375))) # shape=(9, 15, 9)
output = relay.Tuple([bop_7377,])
output2 = relay.Tuple([bop_7377,])
func_7381 = relay.Function([var_7375,var_7376,], output)
mod['func_7381'] = func_7381
mod = relay.transform.InferType()(mod)
var_7382 = relay.var("var_7382", dtype = "uint32", shape = (9, 15, 9))#candidate|7382|(9, 15, 9)|var|uint32
var_7383 = relay.var("var_7383", dtype = "uint32", shape = (9, 15, 9))#candidate|7383|(9, 15, 9)|var|uint32
output = func_7381(var_7382,var_7383,)
func_7384 = relay.Function([var_7382,var_7383,], output)
mutated_mod['func_7384'] = func_7384
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7517 = relay.var("var_7517", dtype = "uint16", shape = (3, 7, 3))#candidate|7517|(3, 7, 3)|var|uint16
var_7518 = relay.var("var_7518", dtype = "uint16", shape = (3, 7, 3))#candidate|7518|(3, 7, 3)|var|uint16
bop_7519 = relay.bitwise_and(var_7517.astype('uint16'), relay.reshape(var_7518.astype('uint16'), relay.shape_of(var_7517))) # shape=(3, 7, 3)
const_7530 = relay.const([[[-6,4,5],[-6,-3,8],[-4,-3,-7],[-1,-5,10],[-10,4,4],[-2,6,-6],[6,-5,-2]],[[1,6,-6],[6,-3,-2],[6,-8,2],[6,2,1],[-4,-1,8],[-4,1,4],[-4,-7,-9]],[[10,3,-8],[9,6,-5],[-1,-6,9],[-6,-4,4],[4,-6,5],[-2,-5,-4],[-7,-8,-6]]], dtype = "uint16")#candidate|7530|(3, 7, 3)|const|uint16
bop_7531 = relay.power(bop_7519.astype('float32'), relay.reshape(const_7530.astype('float32'), relay.shape_of(bop_7519))) # shape=(3, 7, 3)
var_7543 = relay.var("var_7543", dtype = "uint16", shape = (3, 7, 3))#candidate|7543|(3, 7, 3)|var|uint16
bop_7544 = relay.maximum(var_7518.astype('int8'), relay.reshape(var_7543.astype('int8'), relay.shape_of(var_7518))) # shape=(3, 7, 3)
func_7239_call = mod.get_global_var('func_7239')
func_7242_call = mutated_mod.get_global_var('func_7242')
const_7557 = relay.const(-9, dtype = "int8")#candidate|7557|()|const|int8
const_7558 = relay.const([9,-10,-9,5,1,6,6,-8,-1,-2,-5,6,3,-3,-10,-9,-10,-5,3,10,9,-5,-6,-1,1,5,-4,9,-6,10,-7,-4,7,5,-9,-5,-1,-5,-3,-3,4,2,9,-5,-6,-9,-5,9,2,3,-8,-10,-7,5,5,-6,-8,-7,10,9,7,8,-3,-6,-10,4,5,9,3,6,4,7,8,6,-5,3,-5,6,7,-2,-8,7,4,-7,-9,-5,5,-6,5,1,7,4,5,1,-9,-9,1,2,1,2,-4,-5,-8,-2,-3,3,-8,-3,6,-5,8,3,9,5,-7,-9,4,2,7,5,10,1,4,3,9,-4,-3,6,-2,-1,10,2,8,-7,9,-4,-9,-6,-8,-2,6,-3,5,-2,-4,8,5,-9,-3,5,-8,10,3,-2,-5,-7,2,-2,1,4,5,1,-1,2,-7,-5,-7,4,-10,-10,-3,-6,6,4,9,5,9,5,-6,-3,5,2,4,9,-4,-7,-5,4,10,-3,7,7,3,7,9,6,9,-4,-4,6,-4,-5,-7,-4,-8,-8,-4,2,-6,-1,-8,-7,-5,-9,-5,-6,-8,-2,1,-4,3,-5,-6,8,-5,-7,6,-7,6,-1,-1,-2,8,-3,-9,8,-8,9,-10,-6,-6,8,-8,4,-3,6,1,-10,-1,-8,10,2,-2,2,8,9,-2,7,-1,5,-9,5,-9,9,-10,10,-6,7,-5,-10,-10,8,-5,1,9,10,-7,8,-2,5,5,-3,10,-10,1,-8,8,-3,3,9,-2,-8,3,-6,-2,-8,-8,9,-1,5,-9,-4,-8,-10,-5,-1,-7,7,-4,5,-3,2,-4,-1,1,10,8,-7,-3,7,5,4,-8,1,3,7,-3,-9,-1,-3,-8,-2,-8,-5,5,8,2,3,-4,-2,-4,-5,10,-3,8,-5,10,-7,6,1,5,-3,-3,7,-1,-8,-7,-2,-9,-10,-3,-7,2,-1,-5,-10,-4,-7,7,6,-4,5,-7,10,1,7,5,-7,8,-3,-2,1,-6,-3,-4,-3,1,-10,6,-8,-10,-1,7,-9,-7,7,-7,-5,9,-6,-7,9,-8,8,-9,-10,-9,3,10,2,8,9,8,-8,2,-9,-4,6,-9,5,3,8,-8,-10,5,-8,-1,-8,-2,7,-2,-4,-9,10,7,8,3,-1,-9,7,-5,8,-3,9,5,-1,4,-5,8,-1,-1,6,-6,-4,10,-10,-8,2,-5,7,7,-6,5,-4,-7,9,-5,-3,-2,6,6,-6,6,-6,-9,10,-4,6,8,-2,4,-4,-6,10,1,9,-3,4,5,10,-6,1,-7,-9,9,-1,-3,-4,9,7,1,9,-3,3,2,3,6,-8,-2,-9,6,-8,4,-10,-5,4,4,-1,-6,-6,-10,6,4,-10,-1,-9,-10,8,8,-8,6,8,5,9,-6,2,4,3,-2,-4,1,-1,-10,-6,8,1,5,-6,-1,-4,7,-4,-3,-9,-9,9,-6,-2,9,3,1,3,-5,6,3,-2,5,-3,4,-3,-3,-4,1,5,5,9,-4,-10,3,-5,-8,-7,5,-9,-2,-4,5,3,-6,-7,-6,7,-1,7,4,8,-10,-7,7,-6,10,-1,9,-10,2,-8,-4,-8,-1,-6,-8,-1,3,3,-5,8,-8,8,-5,-4,6,5,4,-4,8,-4,-8,3,2,-1,5,-10,-8,-2,-9,-10,-6,-4,6,-7,-1,9,5,-1,9,4,1,9,-4,-2,5,5,-7,-2,-8,7,10,-1,7,-2,5,-10,-9,8,10,-4,4,-4,10,-3,-7,-10,-6,3,-2,-2,10,3,-3,-3,-3,-7,8,-7,9,7,-2,-4,7,-6,2,-5,-3,4,-1,10,7,10,-1,4,-9,-8,9,1,-9,6,-6,6,1,-5,8,-6,-3,10,5,3,-6,-7,1,2,5,-3,-9,10,10,2,-9,3,-5,5,9,-4,-7,2,8,-1,-2,-6,5,10,-9,3,9,1,1,3,-4,-4,9,2,-10,2,7,-2,2,-8,-4,-1,9,10,10,9,-2,6,9,-7,-10,10,7,-2,5,9,10,-6,-2,8,-10,5,-10,-1,8,5,-9,9,-8,-2,-10,-4,-1,-1,7,-4,-8,8,9,-4,-9,6,5,-5,-6,-8,10,-1,2,-3,-5,7,3,9,7,8,6,6,-9,6,10,6,-6,8,-10,9,7,7,1,1,-1,6,4,9,-4,1,-9,-1,-3,-2,-1,6,-7,9,1,8,10,-9,5,-8,-5,3,3,8,5,8,-3,4,-7,7,-3,-10,-8,-7,-9,2,-3,9,-10,-3,8,-1,-6,-10,9,3,-2,-7,3,5,-9,7,3,10,-2,-8,-4,1,3,-5,9,-6,-2,-1,-5,9,5,-7,-2,10,10,6,7,6,-7,4,-10,6,1,8,-6,-1,-5,-7,-7,-2,-7,3,-4,-5,1,-6,8,-6,1,-9,3,6,-10,6,2,-4,-6,2,-5,2,6,8,2,-5,8,-10,3,10,10,1,-3,10,10,-1,9,-3,-5,-1,7,-2,9,7,-9,-5,10,-1,-1,-2,5,7,9,10,-3,3,-6,-6,-6,-7,9,-1,10,-3,5,3,1,3,-2,-5,4,6,2,5,6,-10,5,-7,5,7,7,9,10,1,-7,-6,6,-10,-5,-6,-8,7,10,-10,5,-7,7,-2,8,-6,10,5,-5,2,-4,2,-7,-7,4,3,7,2,6,1,-5,-8,-3,9,-9,-8,1,5,9,-4,1,2,9,-2,-6,-10,3,6,-2,4,5,-6,-9,4,-5,3,-10,-4,7,-6,10,-5,-6,9,-5,-1,4,-7,-10,-3,3,-1,-10,-2,10,1,-5,-6,-7,-1,9,-3,1,8,-2,6,-6,8,1,-5,1,-4,-4,1,5], dtype = "int8")#candidate|7558|(1089,)|const|int8
call_7556 = func_7239_call(relay.reshape(const_7557.astype('int8'), []), relay.reshape(const_7558.astype('int8'), [11, 9, 11]), )
call_7559 = func_7239_call(relay.reshape(const_7557.astype('int8'), []), relay.reshape(const_7558.astype('int8'), [11, 9, 11]), )
output = relay.Tuple([bop_7531,bop_7544,call_7556,const_7557,const_7558,])
output2 = relay.Tuple([bop_7531,bop_7544,call_7559,const_7557,const_7558,])
func_7560 = relay.Function([var_7517,var_7518,var_7543,], output)
mod['func_7560'] = func_7560
mod = relay.transform.InferType()(mod)
var_7561 = relay.var("var_7561", dtype = "uint16", shape = (3, 7, 3))#candidate|7561|(3, 7, 3)|var|uint16
var_7562 = relay.var("var_7562", dtype = "uint16", shape = (3, 7, 3))#candidate|7562|(3, 7, 3)|var|uint16
var_7563 = relay.var("var_7563", dtype = "uint16", shape = (3, 7, 3))#candidate|7563|(3, 7, 3)|var|uint16
output = func_7560(var_7561,var_7562,var_7563,)
func_7564 = relay.Function([var_7561,var_7562,var_7563,], output)
mutated_mod['func_7564'] = func_7564
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7626 = relay.var("var_7626", dtype = "float64", shape = (3, 8, 6))#candidate|7626|(3, 8, 6)|var|float64
var_7627 = relay.var("var_7627", dtype = "float64", shape = (3, 8, 6))#candidate|7627|(3, 8, 6)|var|float64
bop_7628 = relay.not_equal(var_7626.astype('bool'), relay.reshape(var_7627.astype('bool'), relay.shape_of(var_7626))) # shape=(3, 8, 6)
func_5697_call = mod.get_global_var('func_5697')
func_5704_call = mutated_mod.get_global_var('func_5704')
var_7639 = relay.var("var_7639", dtype = "uint8", shape = (325,))#candidate|7639|(325,)|var|uint8
var_7640 = relay.var("var_7640", dtype = "float64", shape = (594,))#candidate|7640|(594,)|var|float64
call_7638 = relay.TupleGetItem(func_5697_call(relay.reshape(var_7639.astype('uint8'), [5, 13, 5]), relay.reshape(var_7639.astype('uint8'), [5, 13, 5]), relay.reshape(var_7640.astype('float64'), [594,]), relay.reshape(var_7639.astype('float32'), [5, 13, 5]), relay.reshape(var_7639.astype('bool'), [5, 13, 5]), ), 3)
call_7641 = relay.TupleGetItem(func_5704_call(relay.reshape(var_7639.astype('uint8'), [5, 13, 5]), relay.reshape(var_7639.astype('uint8'), [5, 13, 5]), relay.reshape(var_7640.astype('float64'), [594,]), relay.reshape(var_7639.astype('float32'), [5, 13, 5]), relay.reshape(var_7639.astype('bool'), [5, 13, 5]), ), 3)
func_2830_call = mod.get_global_var('func_2830')
func_2832_call = mutated_mod.get_global_var('func_2832')
var_7652 = relay.var("var_7652", dtype = "float64", shape = (90,))#candidate|7652|(90,)|var|float64
call_7651 = func_2830_call(relay.reshape(var_7652.astype('float64'), [15, 1, 6]))
call_7653 = func_2830_call(relay.reshape(var_7652.astype('float64'), [15, 1, 6]))
func_1892_call = mod.get_global_var('func_1892')
func_1895_call = mutated_mod.get_global_var('func_1895')
var_7664 = relay.var("var_7664", dtype = "float32", shape = ())#candidate|7664|()|var|float32
call_7663 = relay.TupleGetItem(func_1892_call(relay.reshape(var_7664.astype('float32'), [])), 1)
call_7665 = relay.TupleGetItem(func_1895_call(relay.reshape(var_7664.astype('float32'), [])), 1)
output = relay.Tuple([bop_7628,call_7638,var_7639,var_7640,call_7651,var_7652,call_7663,var_7664,])
output2 = relay.Tuple([bop_7628,call_7641,var_7639,var_7640,call_7653,var_7652,call_7665,var_7664,])
func_7670 = relay.Function([var_7626,var_7627,var_7639,var_7640,var_7652,var_7664,], output)
mod['func_7670'] = func_7670
mod = relay.transform.InferType()(mod)
mutated_mod['func_7670'] = func_7670
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7670_call = mutated_mod.get_global_var('func_7670')
var_7672 = relay.var("var_7672", dtype = "float64", shape = (3, 8, 6))#candidate|7672|(3, 8, 6)|var|float64
var_7673 = relay.var("var_7673", dtype = "float64", shape = (3, 8, 6))#candidate|7673|(3, 8, 6)|var|float64
var_7674 = relay.var("var_7674", dtype = "uint8", shape = (325,))#candidate|7674|(325,)|var|uint8
var_7675 = relay.var("var_7675", dtype = "float64", shape = (594,))#candidate|7675|(594,)|var|float64
var_7676 = relay.var("var_7676", dtype = "float64", shape = (90,))#candidate|7676|(90,)|var|float64
var_7677 = relay.var("var_7677", dtype = "float32", shape = ())#candidate|7677|()|var|float32
call_7671 = func_7670_call(var_7672,var_7673,var_7674,var_7675,var_7676,var_7677,)
output = call_7671
func_7678 = relay.Function([var_7672,var_7673,var_7674,var_7675,var_7676,var_7677,], output)
mutated_mod['func_7678'] = func_7678
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7832 = relay.var("var_7832", dtype = "int16", shape = (9, 8, 6))#candidate|7832|(9, 8, 6)|var|int16
const_7833 = relay.const([[[6,-5,9,7,7,7],[-1,-6,2,9,2,8],[9,-7,2,2,-8,-9],[10,-10,-9,3,-3,-1],[8,9,-7,1,6,4],[-2,7,7,8,3,-8],[-4,-4,-9,4,-5,9],[-9,-8,10,4,-10,3]],[[-7,7,-6,4,-4,-9],[-1,4,7,6,6,2],[5,8,-4,-5,2,3],[-4,10,-5,-5,-3,4],[2,7,-5,-4,2,8],[-4,9,4,6,10,6],[-6,-4,9,10,-10,-7],[-3,-5,-4,-2,-7,-6]],[[2,-7,-7,-8,5,5],[-9,-5,-1,2,-5,10],[-2,-10,1,8,-6,-4],[1,10,-3,9,-2,-1],[-7,9,-3,-3,-9,-6],[7,-6,10,-9,-3,6],[-6,9,9,10,-6,10],[-6,-4,6,-9,-3,-7]],[[6,-3,-7,-4,4,-10],[5,1,-7,-1,-3,-9],[-5,1,5,3,6,-8],[-7,-7,-8,-5,4,-6],[-6,5,-2,-10,7,8],[-1,-1,9,1,4,8],[-2,-6,-9,-1,-9,-6],[-3,9,8,-1,-8,-6]],[[-2,2,3,-9,-3,5],[-7,-8,-3,9,-3,-7],[6,9,-8,3,-2,-7],[5,1,-9,1,-1,4],[5,1,4,8,3,7],[4,3,-5,10,6,-9],[6,-3,-10,10,-4,3],[8,-9,-1,-4,6,-1]],[[-10,2,-10,1,2,-2],[4,-8,-4,8,6,-3],[-4,2,-6,1,-1,4],[-6,7,2,2,5,4],[-3,-3,10,6,5,-5],[2,-1,-1,-6,1,-4],[-5,8,-6,-3,-5,-10],[4,-10,-5,-4,-3,9]],[[9,8,1,2,10,-7],[-2,-7,-9,-3,-4,-2],[10,-7,-2,-6,4,-10],[7,10,-1,4,-9,10],[10,9,-8,5,8,10],[8,10,1,-6,3,6],[3,5,4,10,-9,-10],[-1,-5,-6,-10,3,8]],[[-1,2,10,-5,-9,9],[-6,-7,-7,9,1,10],[3,4,1,9,8,-5],[1,-5,10,2,-2,-10],[6,-8,5,4,9,3],[-2,9,8,-2,4,7],[-1,2,8,2,-1,-10],[-10,6,2,7,-6,6]],[[2,10,5,-2,8,10],[5,-9,4,-5,-4,2],[-2,2,7,1,7,-7],[-1,-1,-2,5,2,-4],[-5,-1,-1,5,-3,-1],[-6,-2,-6,-7,8,5],[8,-9,-6,-9,3,-10],[-2,-6,-3,-5,-1,-3]]], dtype = "int16")#candidate|7833|(9, 8, 6)|const|int16
bop_7834 = relay.bitwise_and(var_7832.astype('int16'), relay.reshape(const_7833.astype('int16'), relay.shape_of(var_7832))) # shape=(9, 8, 6)
output = bop_7834
output2 = bop_7834
func_7837 = relay.Function([var_7832,], output)
mod['func_7837'] = func_7837
mod = relay.transform.InferType()(mod)
mutated_mod['func_7837'] = func_7837
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7838 = relay.var("var_7838", dtype = "int16", shape = (9, 8, 6))#candidate|7838|(9, 8, 6)|var|int16
func_7837_call = mutated_mod.get_global_var('func_7837')
call_7839 = func_7837_call(var_7838)
output = call_7839
func_7840 = relay.Function([var_7838], output)
mutated_mod['func_7840'] = func_7840
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8170 = relay.var("var_8170", dtype = "int64", shape = ())#candidate|8170|()|var|int64
var_8171 = relay.var("var_8171", dtype = "int64", shape = (3, 9, 13))#candidate|8171|(3, 9, 13)|var|int64
bop_8172 = relay.not_equal(var_8170.astype('bool'), var_8171.astype('bool')) # shape=(3, 9, 13)
func_1049_call = mod.get_global_var('func_1049')
func_1052_call = mutated_mod.get_global_var('func_1052')
const_8185 = relay.const([7.648250,-2.707629,6.383081,3.550791,3.719440,7.136973,1.632846,0.037550,-2.677799,0.508209,4.129542,-7.452786,-6.113188,8.937294,3.504101,-6.334878,4.443229,-6.272272,1.459512,-8.011209,-8.896476,-7.359376,7.844893,8.884165,9.260445,9.567939,2.189296,8.914845,3.545940,4.668771,2.836345,3.336789,-9.173768,2.594637,4.662820,-0.299989,-2.388058,7.902091,-0.889264,4.429457,9.902308,-6.422382,9.792584,-9.505933,-3.243765,7.649047,-8.679198,9.817209,-5.254872,-4.052287,-3.805499,7.680483,9.158857,-1.166939,-8.875781,7.390543,-8.252624,-6.360606,-4.989319,-9.919257,-8.853300,-4.146191,-7.503037,7.905086,6.313806,-3.075257,4.512556,-5.931704,-5.849352,-3.293442,-6.377858,-8.080718,-1.377464,-9.669482,-0.746160,9.437732,-2.935712,6.187624,9.023956,4.947443,-2.915612,-5.310240,-2.714683,0.903359,4.248854,3.771783,9.109491,6.154605,-5.337648,-9.681180,-5.435186,9.903821,-5.908394,-7.189576,7.954949,-5.330103,3.097416,7.814607,7.298788,4.782502,7.214526,-6.268297,-0.771263,-1.554104,-6.496084,1.647487,-7.697232,9.902859,0.005688,0.678914,-7.739983,2.036752,-5.959111,1.105512,9.414038,1.124054,1.961378,4.848149,3.227988,-0.493115,5.483987,-6.586965,-3.141702,-9.346167,7.319182,-2.522435,0.939514,-4.815639,7.901575,4.223072,-3.104172,8.882849,-6.931544,0.054252,-7.500918,2.484383,-6.842001,0.412436,-5.583180,-2.092834,4.993603,6.601777,-5.652876,0.061165,4.896563,-3.629887,0.479702,5.333280,8.193039,1.969787,-7.607472,8.788291,-7.291233,9.158585,-4.297902,2.581470,-8.335938,-8.561781,-3.295326,-9.909799,-5.242997,6.574873,-4.128765,4.824662,7.501207,6.773742,-8.096742,-6.495000,-3.729930,8.945143,-1.304664,-7.151552,0.993456,1.830653,-4.625196,4.060677,3.523136,-2.569923,0.656880,4.567656,-9.758246,-9.494988,8.874536,-6.728618,-9.914201,-2.884251,-5.726901,2.761293,4.069332,2.344807,8.080791,-4.666970,6.520459,-0.800545,-3.816904,0.056920,2.839566,5.777292,4.144036,-7.660698,6.585459,-4.973348,0.258004,3.315445,-7.681011,8.535368,4.726940,-0.993470,-5.868435,5.677472,-4.307545,-4.631637,-3.239506,-9.367566,4.337820,3.230563,0.744757,-7.985492,-1.567355,6.462605,-1.866232,-9.308900,-4.046398,-0.653651,1.778560,-8.206560,-5.200735,5.508443,-5.183667,-0.348452,-9.573227,1.693909,2.263268,1.803555,9.859039,4.994322,9.992838,-0.932689,-8.442014,-7.479331,-9.027607,-9.458691,4.995015,-3.089145,8.464234,8.793599,-8.876108,-0.006128,-5.450860,4.887403,-7.055039,8.858640,-8.013391,-4.773300,-3.332347,5.561433,4.250268,-8.628557,9.689916,-6.078909,3.356181,0.995245,-5.102853,-1.725637,8.097201,4.257022,-8.719163,6.257322,-8.774298,5.123994,-1.481212,6.418069,-6.245510,8.711566,-8.256967,4.162584,7.251728,-6.039871,-4.054012,9.871541,-7.167169,5.241948,7.860207,-4.492716,-1.630960,8.447882,-2.782909,-1.961731,-8.592978,-5.148073,-1.944785,-5.866695,-0.858708,3.471664,7.186048,-8.538745,8.765926,-8.985179,-0.086433,-2.648908,6.596669,-4.259814,5.242821,-4.121124,-3.428692,-8.649456,-1.926981,-9.675900,9.127037,2.360294,-0.560615,4.844160,-5.630905,7.366713,-3.722427,3.465196,8.611524,7.586030,5.267125,-8.568007,-5.488834,-7.574416,0.429650,-9.285113,-2.222858,-5.944758,7.973718,8.834281,9.720607,1.937767,-2.284566,6.480480,-9.595468,-1.016422,2.034649,3.437661,-8.617947,-4.619067,-9.459184,-4.312655,0.072902,-1.705513,-7.340717,-6.653500,-1.896186,2.555611,-6.487777,-0.461339,4.405531,-0.148016,1.206471,7.292526,4.350061,7.260169,-8.660702,5.861892,-6.483408,-1.199201,8.062728,4.784352,-6.336877,-9.074340,2.353712,8.436516,-8.125089,9.346607,2.348627,8.568240,2.190251,1.566915,-4.777976,5.856062,-0.710198,-3.113038,-1.384677,1.363364,-9.785223,0.283634,-9.971608,8.182652,3.884186,-6.150945,1.154187,5.742042,-8.387160,-8.153516,2.411806,-4.156204,9.367962,7.684757,-5.072865,0.981620,5.689356,-9.793144,0.533726,-3.913584,6.110326,-5.255410,-0.278518,2.262754,-4.020882,0.045567,3.170747,4.060365,-1.859479,-7.138253,0.044218,-0.960402,-8.455093,-1.092329,-0.221195,-5.349294,2.751664,-6.412230,0.741724,-4.004742,7.987424,4.716692,0.119529,9.444973,-6.386627,-1.426047,2.121882,-3.987496,-7.512404,-7.222285,8.995971,-8.038469,9.270388,-1.083138,-6.090277,-7.587100,-4.894374,-2.968140,-9.973770,-2.945477,1.885461,-5.699758,1.648528,-1.336341,9.526064,-9.357435,-8.259838,2.981989,7.768317,-3.952959,-1.062787,8.701737,-6.976123,9.127765,2.883793,5.920980,-8.347723,-5.741753,-7.665277,0.370236,9.747614,-6.955144,-1.276294,3.440458,6.591842,3.034180,-7.797345,4.247552,-2.636090,6.989710,-5.993273,-2.155108,-2.833377,-0.204194,-8.777363,-7.003180,5.965277,8.891440,-0.296169,2.945826,-6.704029,9.044499,8.777916,2.450684,5.321441,2.170049,-1.180884,8.318786,-8.348436,2.149190,3.644601,-5.085705,7.308753,3.154462,-1.050241,1.330263,5.999783,9.812686,3.376253,8.150122,2.373858,-6.920908,-3.304947,-2.362373,5.983524,1.810354,0.685997,7.476470,0.349443,-3.600830,4.832566,-4.684662,7.249820,4.396345,5.001081,3.361503,-0.254206,-5.799803,2.599705,5.975994,-3.280134,-3.497899,2.291795,-6.026581,-0.418818,-0.603812,7.818201,-4.253857,4.602462,5.209186,-7.842267,0.912295,2.112789,-1.201886,1.726746,8.334866,-5.787899,5.400443,-9.388993,1.459537,7.893709,-2.575619,-2.334567,2.017280,4.377712,-1.482823,3.088928,-1.694539,9.576928,-5.658389,-7.471311,0.574120,1.194807,-7.458193,-8.372937,-5.858314,-1.825135,-4.779821,5.444746,-5.564093,7.158749,2.161857,-2.484471,9.496281,-7.158418,-9.006834,2.531737,4.507596,9.726306,-1.205444,4.594552,6.948731,-1.945917,2.790271,3.832947,-5.053169,-6.702840,4.716075,1.150449,7.515221,-6.088740,-5.335651,2.716097,-4.810148,-6.587371,-4.628316,4.164382,2.651658,-5.253822,-2.869902,-1.542062,-2.129586,-7.700943,9.038408,-3.810746,6.141941,6.535945,-0.393045,6.603855,2.116790,-2.888119,-2.405117,8.230373,5.060097], dtype = "float32")#candidate|8185|(600,)|const|float32
call_8184 = relay.TupleGetItem(func_1049_call(relay.reshape(const_8185.astype('float32'), [10, 5, 12])), 0)
call_8186 = relay.TupleGetItem(func_1052_call(relay.reshape(const_8185.astype('float32'), [10, 5, 12])), 0)
func_5398_call = mod.get_global_var('func_5398')
func_5402_call = mutated_mod.get_global_var('func_5402')
const_8188 = relay.const([6,9,-9,10,-7,-6,5,-7,6,2,-7,-8,-6,-5,-1,-8,-4,9,-8,-9,-8,-3,10,7,-9,3,3,-9,2,9,8,-10,-6,6,-2,8,-9,-4,2,-4,-10,7,8,-4,1,4,1,-2,7,-3,-2,-10,4,1,-5,7,3,1,-1,2,10,-1,-1,10,-10,6,5,-4,-10,-3,1,-2,-3,4,10,5,-3,1,-1,2,5,5,6,7,6,10,-9,10,7,-5,1,9,8,7,-2,-3,9,-6,-9,2,2,-3,-6,10,-10,-2,-7,-4,-10,4,-2,-10,-5,7,-9,9,10,-2,-8,2,9,8,5,-9,-5,-9,-10,-9,5,-10,4,6,3,2,10,9,10,-3,1,1,7,-4,-1,3,-6,2,2,6,4,9,2,3,-7,-6,-10,-6,-9,5,1,7,1,-9,-5,-10,-1,-7,7,6,8,-2,-10,-7,-9,8,2,-7,-5,8,1,3,7,6,9,7,3,6,-8,-2,-5,6,6,-10,2,-2,-6,-5,-2,6,-5,9,-2,3,7,-8,-6,10,10,4,8,4,-1,-6,2,-6,-4,-4,9,-8,-3,-9,-3,-2,8,4,3,3,-7,-9,-10,-7,-10,-3,-8,-5,9,1,-4,-4,10,10,6,-1,2,-3,7,-9,10,-7,-2,1,-8,-3,5,5,-5,-3,10,-3,6,-7,5,9,7,-6,-10,-4,9,-1,7,4,-4,-3,10,9,4,-8,-3,6,5,-2,-7,3,4,-10,1,2,-10,-10,-3,-8,-4,-7,5,8,5,3,4,8,2,-8,-2,6,7,4,-4,8,9,6,1,2,-2,8,4,6,3,-7,-6,7,-3,-5,3,7,-1,6,7,-7,-6,6,10,4,-8,8,-7,7,-6,-7,6,-1,-6,-10,-6,3,4,9,-3,-9,5,-5,4,2,-4,1,2,-6,10,1,-7,-7,6,-6,1,2,-3,-10,-8,-9,1,2,-3,-2,-8,-8,-9,-5,2,-6,9,1,-4,10,-3,-6,-8,-8,1,-3,-2,4,-9,6,10,-4,-9,-10,-8,-7,-9,7,-5,10,6,-5,-8,10,7,9,-8,-6,-10,10,-9,10,1,-9,4,-2,-5,-9,-3,-10,-6,8,4,3,-2,-1,-1,3,8,-8,-1,1,7,-1,-10,3,-2,2,-4,-7,7,1,8,-9,6,-7,10,-5,9,-9,6,6,2,-3,2,-7,7,4,2,2,-1,-6,-8,-9,-8,-9,-10,-4,3,-1,7,-4,3,-10,1,6,-2,4,5,10,-2,10,3,4,-1,-3,-10,3,-4,10,-6,7,1,9,-3,-9,-7,6,-3,8,-3,10,-7,-9,-5,-6,7,10,-5,4,-7,2,2,-4,8,8,-4,-7,1,-3,6,9,5,3,-8,7,-10,9,-8,-8,8,10,-4,4,4,4,-9,5,-2,-3], dtype = "uint32")#candidate|8188|(540,)|const|uint32
call_8187 = relay.TupleGetItem(func_5398_call(relay.reshape(const_8188.astype('uint32'), [3, 15, 12]), relay.reshape(const_8188.astype('uint32'), [3, 15, 12]), ), 1)
call_8189 = relay.TupleGetItem(func_5402_call(relay.reshape(const_8188.astype('uint32'), [3, 15, 12]), relay.reshape(const_8188.astype('uint32'), [3, 15, 12]), ), 1)
uop_8213 = relay.acos(var_8171.astype('float32')) # shape=(3, 9, 13)
func_6626_call = mod.get_global_var('func_6626')
func_6628_call = mutated_mod.get_global_var('func_6628')
var_8216 = relay.var("var_8216", dtype = "uint8", shape = (726,))#candidate|8216|(726,)|var|uint8
call_8215 = relay.TupleGetItem(func_6626_call(relay.reshape(var_8216.astype('uint8'), [6, 11, 11])), 2)
call_8217 = relay.TupleGetItem(func_6628_call(relay.reshape(var_8216.astype('uint8'), [6, 11, 11])), 2)
output = relay.Tuple([bop_8172,call_8184,const_8185,call_8187,const_8188,uop_8213,call_8215,var_8216,])
output2 = relay.Tuple([bop_8172,call_8186,const_8185,call_8189,const_8188,uop_8213,call_8217,var_8216,])
func_8225 = relay.Function([var_8170,var_8171,var_8216,], output)
mod['func_8225'] = func_8225
mod = relay.transform.InferType()(mod)
mutated_mod['func_8225'] = func_8225
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8225_call = mutated_mod.get_global_var('func_8225')
var_8227 = relay.var("var_8227", dtype = "int64", shape = ())#candidate|8227|()|var|int64
var_8228 = relay.var("var_8228", dtype = "int64", shape = (3, 9, 13))#candidate|8228|(3, 9, 13)|var|int64
var_8229 = relay.var("var_8229", dtype = "uint8", shape = (726,))#candidate|8229|(726,)|var|uint8
call_8226 = func_8225_call(var_8227,var_8228,var_8229,)
output = call_8226
func_8230 = relay.Function([var_8227,var_8228,var_8229,], output)
mutated_mod['func_8230'] = func_8230
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8406 = relay.var("var_8406", dtype = "float64", shape = (4, 9, 16))#candidate|8406|(4, 9, 16)|var|float64
uop_8407 = relay.erf(var_8406.astype('float64')) # shape=(4, 9, 16)
func_3834_call = mod.get_global_var('func_3834')
func_3838_call = mutated_mod.get_global_var('func_3838')
const_8411 = relay.const([8.920696,-8.506533,5.924992,2.204150,9.275990,-7.875422,6.591317,-1.962084,7.629660,9.686353,-2.483494,1.344086,0.116089,-3.157567,-6.032021,-5.016972,-3.645837,1.026956,9.748701,-3.576665,-3.631482,6.093104,7.769394,-1.864420,-6.334316,-5.616009,-1.450462,0.954930,-4.682541,-3.272174,7.322061,-9.326188,8.395021,-8.829707,7.637590,7.614902,8.261240,6.111943,-3.307580,6.958008,1.355533,8.711533,0.568288,8.044122,7.783390,2.731697,4.898082,-5.700916,4.024851,1.118484,-7.729979,9.155461,-4.390490,-2.894115,-8.578510,8.125144,9.346860,-7.668076,4.413360,-6.840125,9.939802,5.951914,-7.336687,-4.320969,-1.709813,-7.958390,-9.145277,0.435579,-2.538082,-8.457689,5.458640,-6.630732,-8.815674,-1.732752,-9.056103,-1.075834,-5.628240,-0.182577,-8.911157,-0.729486,0.381590,5.860419,-5.613911,-6.827856,-0.882119,-1.660292,-1.916269,-8.075464,1.644155,-6.534777,-2.423965,5.118683,-3.684544,5.731233,-2.421482,-7.370881,-4.233401,-0.126065,-6.339434,4.938130,8.910438,-0.651040,-0.571107,-4.559693,1.885940,3.863972,-4.709866,-2.619765,4.812716,0.348444,-6.285566,5.451239,5.243591,7.013570,-1.467288,-9.392649,-7.900260,2.818282,1.646503,-6.052421,-9.374416,-6.914277,6.659365,2.145358,-8.536560,-1.657121,-5.745979,1.017491,7.266149,5.439984,1.652521,2.300881,0.554174,-6.006426,5.928293,9.493699,4.310267,-3.697443,8.892713,3.487428,-8.129452,-4.767398,4.172574,-9.270453,-6.424593,-3.844846,5.710292,-6.573322,-7.773148,9.405751,7.959848,1.060681,4.008928,6.146496,5.484139,-8.995524,4.076958,7.866756,0.706525,3.865336,8.490725,9.646279,-5.858116,2.811069,3.594584,-4.916626,-8.001092,2.208651,9.682592,-0.511733,5.212411,-8.444317,7.417706,0.405156,5.384614,-4.626991,-9.614468,4.931849,0.872598,1.461598,4.050984,-7.626167,1.076169,6.849504,-9.216558,1.914932,9.082275,-8.451520,5.639356,2.771745,4.105209,-4.957460,3.995536,-2.029968,-6.327589,3.166937,3.094671,6.212060,1.766561,2.284462,-8.905191,6.571737,-0.417486,-7.508947,4.291559,-2.111755,-5.772467,-7.317285,-5.033905,-2.763717,-7.188171,-3.014847,7.415837,-7.945368,3.310783,5.620143,9.741357,3.097414,-3.494900,7.693089,4.289943,-1.265188,-9.328983,7.334591,0.168715,-8.198181,-3.800766,0.223163,-1.412749,-1.745488,2.510698,-5.064185,2.986348,-0.804606,2.142035,3.356595,5.780568,-6.698237,0.590149,-1.233422,-2.909568,-0.625641,-4.515754,-5.774003,-7.061847,-2.318971,-6.461008,-4.811931,-9.565246,-4.083297,-0.215610,-3.995836,5.192291,-4.507519,-6.054005,-0.897683,4.176801,0.284638,-8.839868,-9.599157,4.911014,0.864728,0.057162,9.718838,-4.245349,-7.731349,7.582890,7.612192,2.971295,7.307042,-5.196034,-6.328637,2.991997,1.539368,-6.901885,-9.950526,-2.661624,1.475362,1.644448,4.729224,-7.651977,-2.394017,-8.241232,7.057837,4.109891,-2.313493,-5.219478,4.730589,-1.683999,0.349961,1.268203,-7.801734,7.690850,9.507889,-0.641722,2.620196,-7.552629,7.973019,3.150070,1.674516,7.498973,-5.887687,-8.621542,4.667605,0.498026,5.494519,-1.638324,-6.164105,-5.801412,-3.526579,9.786584,0.511725,-2.176046,-5.635467,0.051119,-9.600052,4.013426,-3.272640,9.397656,2.339879,8.509465,4.371031,-7.978753,4.255466,0.562731,-3.317371,9.219604,5.339656,-5.950046,3.589624,5.536871,-2.437116,8.279660,-8.252304,5.361852,3.577125,1.202985,-1.820430,-1.691864,-1.056325,-3.640559,-3.480112,-8.106719,3.129223,-5.415597,6.876821,-1.062328,-1.239565,-0.058013,-7.553947,-7.014277,-2.831430,-5.107033,-2.332656,0.156278,8.936180,8.063787,5.320531,3.957682,-6.964728,-4.763748,9.897221,2.378048,-7.406057,-5.167046,3.305417,-5.420778,-4.022449,7.116033,5.404192,9.944186,-4.143528,2.690969,5.392079,-6.458592,-0.055956,4.128580,3.644963,1.946212,-4.860857,8.725899,8.690517,-0.787292,-7.842518,-6.895492,-4.129595,-7.870373,-4.174792,-0.521530,-3.768916,7.683933,2.458636,-5.169709,8.507109,-7.020010,-5.577311,-1.766738,3.933375,9.497615,-2.847297,-6.823788,-2.152920,6.128225,-5.604041,-4.550407,-2.318073,4.125725,-4.468666,-9.053784,9.556163,6.906443,-4.114770,8.635711,-5.925931,-0.851118,-5.956294,5.046601,4.449751,0.143816,1.308128,8.112828,4.889762,1.174177,-7.774689,-0.749535,8.806721,0.132429,0.018616,3.014782,-2.848012,-4.057497,-2.561854,6.766420,-2.874757,9.609364,-8.938526,3.811101,5.270232,5.952562,-3.483964,-8.594567,0.251965,-6.779519,-7.352905,3.947233,0.699979,-0.151041,5.856578,7.438942,-4.908333,5.393040,5.805507,1.435528,-0.302517,8.245010,-5.057727,-3.033650,5.139019,-1.188811,-5.461676,-0.274231,2.807158,-8.872017,-3.177488,-0.035058,-8.151774,1.714944,-2.935871,0.769143,1.304592,6.079665,-3.096049,-8.854036,-2.765970,3.860974,-3.062463,-3.372922,-6.432121,-0.076463,9.454030,-4.351428,0.313711,9.954429,-9.758983,-4.033888,3.830092,6.688837,3.128267,-9.370364,-8.838375,-2.765567,1.008487,-9.589985,5.964108,1.887340,2.281045,1.680437,8.358012,-8.778038,6.229099,-9.539326,-2.242039,-1.813012,1.415945,-1.618883,-3.966560,-1.212019], dtype = "float32")#candidate|8411|(507,)|const|float32
var_8412 = relay.var("var_8412", dtype = "int64", shape = (1232,))#candidate|8412|(1232,)|var|int64
call_8410 = relay.TupleGetItem(func_3834_call(relay.reshape(const_8411.astype('float32'), [3, 13, 13]), relay.reshape(const_8411.astype('float32'), [3, 13, 13]), relay.reshape(var_8412.astype('int64'), [4, 308]), ), 1)
call_8413 = relay.TupleGetItem(func_3838_call(relay.reshape(const_8411.astype('float32'), [3, 13, 13]), relay.reshape(const_8411.astype('float32'), [3, 13, 13]), relay.reshape(var_8412.astype('int64'), [4, 308]), ), 1)
output = relay.Tuple([uop_8407,call_8410,const_8411,var_8412,])
output2 = relay.Tuple([uop_8407,call_8413,const_8411,var_8412,])
func_8432 = relay.Function([var_8406,var_8412,], output)
mod['func_8432'] = func_8432
mod = relay.transform.InferType()(mod)
var_8433 = relay.var("var_8433", dtype = "float64", shape = (4, 9, 16))#candidate|8433|(4, 9, 16)|var|float64
var_8434 = relay.var("var_8434", dtype = "int64", shape = (1232,))#candidate|8434|(1232,)|var|int64
output = func_8432(var_8433,var_8434,)
func_8435 = relay.Function([var_8433,var_8434,], output)
mutated_mod['func_8435'] = func_8435
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8940 = relay.var("var_8940", dtype = "float32", shape = (16, 2, 1))#candidate|8940|(16, 2, 1)|var|float32
uop_8941 = relay.log10(var_8940.astype('float32')) # shape=(16, 2, 1)
output = relay.Tuple([uop_8941,])
output2 = relay.Tuple([uop_8941,])
func_8947 = relay.Function([var_8940,], output)
mod['func_8947'] = func_8947
mod = relay.transform.InferType()(mod)
mutated_mod['func_8947'] = func_8947
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8948 = relay.var("var_8948", dtype = "float32", shape = (16, 2, 1))#candidate|8948|(16, 2, 1)|var|float32
func_8947_call = mutated_mod.get_global_var('func_8947')
call_8949 = func_8947_call(var_8948)
output = call_8949
func_8950 = relay.Function([var_8948], output)
mutated_mod['func_8950'] = func_8950
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9044 = relay.var("var_9044", dtype = "float32", shape = ())#candidate|9044|()|var|float32
var_9045 = relay.var("var_9045", dtype = "float32", shape = (16, 12, 7))#candidate|9045|(16, 12, 7)|var|float32
bop_9046 = relay.mod(var_9044.astype('float32'), var_9045.astype('float32')) # shape=(16, 12, 7)
func_5835_call = mod.get_global_var('func_5835')
func_5838_call = mutated_mod.get_global_var('func_5838')
var_9052 = relay.var("var_9052", dtype = "int64", shape = (45,))#candidate|9052|(45,)|var|int64
const_9053 = relay.const([[4,-7,-5],[1,8,2],[-9,-10,-1],[-5,7,5],[-5,2,-2],[8,2,-1],[2,6,5],[-5,-4,3],[8,-2,-4],[-9,-7,-10],[-1,-4,-4],[3,-9,6],[-6,-10,6],[8,3,-10],[-6,-6,10],[-3,-6,6],[-2,-4,8],[6,-10,4],[2,-3,1],[-2,2,3],[3,5,-3],[-7,-9,-7],[-2,-9,-9],[-2,7,6],[9,-7,5],[5,6,-7],[-10,-3,7],[4,-2,4],[7,4,1],[2,-9,3],[10,2,-7],[-6,-3,-5],[-8,-2,3],[-4,1,-6],[2,-2,-8],[-5,-2,-6],[-7,-7,-1],[3,-5,-2],[10,-1,-5],[-5,7,-8],[-4,-3,3],[7,-4,-2],[-9,8,1],[-4,-5,-4],[-2,-7,-6],[-3,-1,7],[10,4,10],[-10,-3,5],[-8,5,-4],[6,-9,6],[-10,-6,-7],[-3,-8,-10],[-2,-9,1],[-9,3,-2],[4,-4,1],[-8,6,1],[8,-10,-10],[-5,3,9],[10,-2,-1],[-9,-2,-8],[10,3,-2],[1,8,-6],[-4,-3,7],[-2,10,-9],[8,-6,10],[5,-1,-7],[-5,-3,-2],[3,10,-4],[8,3,9],[8,9,-10],[-1,-10,-7],[7,7,-5],[7,-6,6],[3,7,-3],[-7,4,9]], dtype = "int64")#candidate|9053|(75, 3)|const|int64
call_9051 = func_5835_call(relay.reshape(var_9052.astype('int64'), [1, 3, 15]), relay.reshape(const_9053.astype('int64'), [5, 3, 15]), )
call_9054 = func_5835_call(relay.reshape(var_9052.astype('int64'), [1, 3, 15]), relay.reshape(const_9053.astype('int64'), [5, 3, 15]), )
func_4816_call = mod.get_global_var('func_4816')
func_4818_call = mutated_mod.get_global_var('func_4818')
var_9057 = relay.var("var_9057", dtype = "float64", shape = (2100,))#candidate|9057|(2100,)|var|float64
call_9056 = func_4816_call(relay.reshape(var_9057.astype('float64'), [15, 10, 14]))
call_9058 = func_4816_call(relay.reshape(var_9057.astype('float64'), [15, 10, 14]))
bop_9059 = relay.bitwise_and(const_9053.astype('int8'), var_9044.astype('int8')) # shape=(75, 3)
uop_9077 = relay.log10(var_9045.astype('float32')) # shape=(16, 12, 7)
bop_9092 = relay.bitwise_xor(uop_9077.astype('int16'), relay.reshape(bop_9046.astype('int16'), relay.shape_of(uop_9077))) # shape=(16, 12, 7)
uop_9101 = relay.tan(uop_9077.astype('float64')) # shape=(16, 12, 7)
func_3834_call = mod.get_global_var('func_3834')
func_3838_call = mutated_mod.get_global_var('func_3838')
const_9105 = relay.const([5.005317,-2.869855,5.257719,4.955679,-5.762260,-0.318658,-0.740390,-0.433387,9.676367,-8.220668,1.762526,-6.321136,6.807774,4.143719,1.705831,4.089337,-4.754157,2.153967,2.050518,-6.675050,-3.343107,-3.060953,7.628921,-5.673548,4.009390,-0.117833,-6.571764,-1.992268,2.436672,-5.401824,-8.581721,0.032983,6.199741,-4.571710,-8.058665,-8.496699,-7.019185,7.383305,-9.459147,-1.302331,-5.342005,-4.478784,6.372694,-7.829812,-8.996665,2.039509,1.603202,9.882870,-5.327637,1.873042,-8.700849,6.984490,-5.480668,9.686983,2.166914,-6.724801,-5.414660,-1.290338,-3.744409,-0.751738,7.198735,7.112720,1.763726,8.331040,4.178536,-6.423065,-7.762921,-8.198274,-8.595367,1.250026,2.558404,7.196885,-3.946037,5.978261,-8.862071,-3.554066,0.050109,-6.823167,-9.604681,-4.274091,5.151656,-2.961875,1.087732,-2.793372,-6.219798,6.549448,-8.173747,5.250835,-9.295361,2.124969,-2.819985,-8.769202,9.390251,-7.652146,-2.990852,4.789275,1.195334,5.401608,-3.260099,-3.033451,-2.897893,-0.736240,-0.325504,2.198466,-7.075183,-6.266758,-1.855266,5.401922,6.452462,-2.197865,-2.178600,3.593614,3.491145,-0.501319,4.888638,-8.895788,-8.289540,-1.179677,-7.996627,6.382621,-5.755076,5.139605,-1.468870,-4.394872,0.428318,6.851417,0.274443,0.987508,-4.670233,-2.778631,8.472287,1.801038,-6.607460,-2.139543,7.179573,5.889188,1.139693,1.746084,4.830517,-8.363251,-8.189547,9.471364,-2.765120,-1.416643,-9.488882,-9.255193,5.657641,-3.787532,3.991101,-5.487721,-4.290834,-2.479035,-6.740031,-8.126920,-3.374474,-2.702760,-3.470393,-4.517225,3.171655,3.120126,1.918195,7.272158,2.042945,-1.220637,-7.461944,-7.415539,4.634671,1.660317,-1.994136,5.680472,-7.720217,4.975887,9.640670,6.305046,-6.627059,6.406720,4.127194,-3.312334,-0.587278,8.327233,4.915710,5.623277,0.080576,-8.249430,-4.183127,-3.287830,-0.075403,-6.605885,1.470116,-0.771445,-9.149314,9.127328,-3.262037,9.293005,8.899864,1.172725,-7.511644,6.972524,4.204959,0.132758,0.951867,-3.235242,5.197586,-3.496924,7.983999,-4.586605,-2.640591,3.195740,6.749761,7.064633,4.389455,3.134082,4.293670,5.643656,-8.136043,0.436387,-6.322643,7.468277,-0.154057,-0.912951,-4.316114,2.779739,5.431875,2.035683,0.183375,9.956434,-0.527138,-4.229773,9.984510,-4.935106,-6.490645,2.312673,-5.102824,-5.150476,-9.627484,-6.053567,2.514868,9.365284,-0.985877,5.573741,9.749178,-2.849196,3.432626,-1.852384,1.521858,7.823777,-6.922186,-0.816515,0.598553,1.588557,-0.731300,6.504768,0.834784,-1.910923,1.082092,-3.175512,-1.679842,-2.224686,1.835554,-4.110380,-3.167591,5.352623,-8.005539,4.951135,-1.693457,-1.118948,-4.036290,5.267280,-9.465279,6.858659,9.416087,7.870290,-8.533974,-5.989269,-4.783493,-5.290327,-6.305535,3.766650,-3.732013,-7.004510,3.802010,3.777548,-6.745364,1.026047,-1.359878,4.775443,-5.040563,8.950383,-3.889553,0.130258,-4.879205,2.835658,4.379198,2.417817,0.519900,-5.855122,-3.841174,-2.707414,-9.032065,-6.735435,-2.518159,6.258274,-2.919861,-8.092394,-6.157838,7.125091,3.214492,2.946593,4.034903,-0.528896,-9.154482,4.864105,-9.499707,-0.439191,8.395754,5.255527,-9.236773,9.673033,6.457343,5.812564,6.263585,-9.784445,-6.262511,1.133459,5.946138,-2.587403,-9.037953,-9.085154,-4.387701,-4.237599,1.156991,8.855542,-8.162678,-2.672029,-6.174375,9.294665,-8.192692,8.126819,9.573744,-4.590942,-9.423528,-7.575182,-0.975693,-7.632606,5.270930,1.515450,-6.154641,-5.041623,0.775721,0.761420,5.570609,6.833692,-7.520001,-7.989016,6.662785,-3.199099,4.557502,-4.441259,-9.732209,-7.688210,4.421510,-3.437246,6.024680,-4.879600,-4.516839,-4.490711,-3.318390,2.613494,-4.952944,-6.615827,4.711711,-7.493781,-2.157182,-4.730443,1.006875,-9.489219,-3.716223,-0.645387,-5.572303,-5.635146,-2.759765,-8.256658,-1.641817,-1.923139,8.070241,-3.952707,4.728907,5.869896,-7.203364,-2.809667,0.769391,-1.859507,-9.663729,8.324340,-9.203700,5.573312,-3.997308,8.630837,7.860921,-9.091874,5.713167,4.974277,3.164835,-0.009683,5.028067,3.166059,7.876852,-3.291340,-8.625656,-0.559954,-6.171355,-2.371690,0.763473,0.138522,7.183375,6.558131,4.081713,8.314688,-9.975069,-9.106024,0.894903,-3.553506,9.756130,-2.443770,-8.985835,-7.674103,-3.164587,7.203046,2.708006,-1.797389,-3.323890,0.437648,4.320387,-6.835879,-3.779304,1.438958,-7.520099,-8.006238,-1.054093,-0.128211,-2.064554,3.644664,0.864645,-4.507199,-2.615753,2.394928,9.021535,-0.939083,8.604287,-5.582098,3.458414,9.310236,0.837553,5.467003,-0.278783,-6.304149,0.287100,6.385866,-9.702675,7.346074,9.353075,-0.783840,4.912923,9.176999,4.500433,-1.116746,2.436600,9.790812,3.513497,-0.643421,-9.344932,-4.572043,5.665966,-6.667086,-7.215877,-8.434102,-3.383988,-8.260321,9.176113,-8.650299,7.079499,6.040853,6.704334,0.071109,2.017458,-5.460717,-3.635014,1.618304,8.676391,0.467762,6.877864,5.409152,-1.775218,3.716859,7.370870,3.895196,-4.190370,7.915162,5.409687,7.266422,-7.060350,-5.675272,-0.750713,-2.059419,0.220509,2.944543,4.485290], dtype = "float32")#candidate|9105|(507,)|const|float32
var_9106 = relay.var("var_9106", dtype = "int64", shape = (1232,))#candidate|9106|(1232,)|var|int64
call_9104 = relay.TupleGetItem(func_3834_call(relay.reshape(const_9105.astype('float32'), [3, 13, 13]), relay.reshape(const_9105.astype('float32'), [3, 13, 13]), relay.reshape(var_9106.astype('int64'), [4, 308]), ), 1)
call_9107 = relay.TupleGetItem(func_3838_call(relay.reshape(const_9105.astype('float32'), [3, 13, 13]), relay.reshape(const_9105.astype('float32'), [3, 13, 13]), relay.reshape(var_9106.astype('int64'), [4, 308]), ), 1)
output = relay.Tuple([call_9051,var_9052,call_9056,var_9057,bop_9059,bop_9092,uop_9101,call_9104,const_9105,var_9106,])
output2 = relay.Tuple([call_9054,var_9052,call_9058,var_9057,bop_9059,bop_9092,uop_9101,call_9107,const_9105,var_9106,])
func_9116 = relay.Function([var_9044,var_9045,var_9052,var_9057,var_9106,], output)
mod['func_9116'] = func_9116
mod = relay.transform.InferType()(mod)
var_9117 = relay.var("var_9117", dtype = "float32", shape = ())#candidate|9117|()|var|float32
var_9118 = relay.var("var_9118", dtype = "float32", shape = (16, 12, 7))#candidate|9118|(16, 12, 7)|var|float32
var_9119 = relay.var("var_9119", dtype = "int64", shape = (45,))#candidate|9119|(45,)|var|int64
var_9120 = relay.var("var_9120", dtype = "float64", shape = (2100,))#candidate|9120|(2100,)|var|float64
var_9121 = relay.var("var_9121", dtype = "int64", shape = (1232,))#candidate|9121|(1232,)|var|int64
output = func_9116(var_9117,var_9118,var_9119,var_9120,var_9121,)
func_9122 = relay.Function([var_9117,var_9118,var_9119,var_9120,var_9121,], output)
mutated_mod['func_9122'] = func_9122
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9313 = relay.var("var_9313", dtype = "float64", shape = (10, 6, 14))#candidate|9313|(10, 6, 14)|var|float64
uop_9314 = relay.sqrt(var_9313.astype('float64')) # shape=(10, 6, 14)
func_1132_call = mod.get_global_var('func_1132')
func_1137_call = mutated_mod.get_global_var('func_1137')
const_9325 = relay.const(10, dtype = "int32")#candidate|9325|()|const|int32
var_9326 = relay.var("var_9326", dtype = "int32", shape = (1296,))#candidate|9326|(1296,)|var|int32
const_9327 = relay.const([[-3.651303,4.019514,4.792980,-0.690639,-3.851484,-3.341577,4.229950,-1.198434,-1.129722,2.641188,-8.539942,-8.400407,7.655397,8.772706,3.422335,0.527463,-9.788407,3.022852,9.838482,9.600466,-9.408282,-5.679056,-8.089094,-0.906548,9.293393,-0.810421,0.643838,-0.529663,-6.251587,-6.707034,0.840758,9.660533,-9.786723,8.507692,-1.689473,-2.919670,-0.516008,5.125520,0.602899,-1.466797,7.579159,-9.102988,4.806863,-7.505406,4.701601,1.499023,-3.210073,-1.365107,-4.775119,-0.906314,-3.004105,1.710560,8.883894,7.970106,5.124146,2.247839,-8.566509,6.334206,-8.394469,-6.712137,8.034507,-8.146881,-0.594184,-8.832012,1.779357,-3.502363,1.149067,-7.774687,-1.191244,2.515893,6.488392,-7.147304,1.320540,-5.940609,5.505603,7.864290,-3.832139,-7.582279,-9.429971,6.043954,6.064491,4.543796,-7.644206,7.423436,7.146073,-6.351734,-7.603644,-4.326984,-1.492530,7.935543,3.572291,-2.594353,1.480673,7.469611,-4.287733,3.586851,-9.661010,-3.995761,-8.039357,9.393196,7.505670,6.153200,-7.559426,1.395702,-6.713869,7.726550,9.413396,5.766536,-9.536956,-2.376580,-1.771941,3.710106,-0.545142,2.446683,6.409115,-0.607128,-5.255065,-6.379969,8.871662,9.846241,9.139806,-0.185679,2.150943,5.864379,-1.262101,-7.962109,1.547811,6.525766,3.613746,-8.657999,4.523458,0.071283,-0.087661,-1.526935,4.339573,9.150140,-5.303797,4.699960,-6.235469,-4.919677,-8.740941,7.453055,-5.232260,5.403461,8.355714,-9.123115,-9.106276,-2.817985,-1.548128,7.025331,-1.313594,-7.005156,-3.455224,-2.829051,-9.988285,1.701970,1.442564,-4.790400,2.922575,-9.592958,0.112973,3.797388,-5.649212,0.847160,-9.016808,4.201805,3.021105,-8.767405,7.213350,-7.744036,2.887383,1.047935,-7.706348,-4.044266,7.677913,-8.759175,4.736068,9.970695,2.798718,-7.917425,9.191377,4.612949,4.464822,-4.065510,-4.586408,-8.051601,-6.817717,3.397659,1.131981,-2.655900,-9.100789,-8.757952,-3.341346,1.475825,-2.723207,1.358678,7.242785,-9.458578,-7.939847,-8.788142,-7.277126,-1.114931,-8.393746,9.418069,1.366592,-2.183715,3.997762,-1.429405,-0.446410,1.030350,9.757744,-3.733632,6.575799,-9.989541,4.564505,5.157323,1.928785,-9.602382,0.077144,-5.938980,4.575640,-0.056423,1.124389,-8.173613,-6.259790,-5.149579,3.514813,6.732084,1.458372,-7.309599,-8.202158,-0.648227,-7.878234,8.424113,7.902036,-4.971384,-9.499900,8.503103,6.230821,-1.019645,0.431895,-6.714182,2.501155,-7.676948,7.724779,-2.646325,-0.826390,2.405369,3.825965,-5.154023,-1.024157,-1.500583,7.197281,-6.107186,2.932208,-6.814122,7.889446,5.219269,-8.951123,-2.238440,4.535651,4.606133,7.004584,-9.245037,4.000691,3.460067,7.671949,7.144669,0.683270,-0.328829,-5.093126,-8.802647,3.584388,-8.497911,4.686883,4.231334,5.859418,-1.661536,1.485893,-6.201000,3.746033,0.883705,5.058216,7.490712,-1.834096,8.795421,-7.955664,7.816896,-1.777712,-8.535483,-3.879438,-9.437867,-6.297715,-6.765380,2.053245,9.640324,6.093619,5.220541,7.540730,5.005038],[-9.062763,-6.314045,-8.053384,-6.730365,7.267791,-5.000850,-5.724251,-2.392672,8.187339,7.313838,4.500189,5.417149,4.302280,4.275558,1.629266,-5.810300,7.931478,2.265983,-1.692895,-2.315198,-8.381895,5.774330,9.737034,0.828288,9.357345,9.502785,1.532311,1.567061,-1.936606,4.275882,5.497203,1.717701,-7.834548,1.290588,6.085562,4.247056,-2.249381,-1.970369,-6.236290,0.092165,-8.706478,-8.129418,5.102360,-1.355614,-5.316143,-8.180261,-8.556449,-8.002784,-3.085972,1.804385,-0.704789,3.655248,-4.420191,-3.032913,2.491634,-4.715903,1.880209,-0.140084,-9.014583,-0.695693,-7.077327,-1.038412,-5.957816,-0.454450,-7.791224,-2.030626,-4.564108,-6.099276,-6.136170,7.280684,-5.183669,0.303609,-7.436305,-4.791309,7.222894,8.617902,1.528581,-0.859301,-8.426653,-2.381909,-9.968378,9.221966,-2.328668,8.042439,3.581217,4.435239,-5.175419,4.656144,-6.266701,5.890711,-6.969090,2.508553,8.339826,2.140857,-9.580683,-5.212481,5.196667,2.132985,9.388595,-7.006627,4.869815,-6.011005,-9.615781,-9.335192,-0.633361,-6.981688,-8.258781,-5.251395,5.719652,-0.977010,-7.962263,0.728844,-6.230019,4.036527,0.715749,-4.809546,9.465220,8.015934,-7.610139,-5.698498,3.395836,1.570134,2.267185,9.028905,-2.273740,-6.226059,8.487992,-6.823255,2.957991,4.737919,6.909989,0.291446,6.143107,-9.962669,7.525328,-8.287101,-3.065752,-1.638797,7.563198,-4.727794,5.319361,-0.943570,-0.491495,3.023806,4.814452,7.287389,-1.727879,0.161600,1.798212,-6.237349,2.851117,1.125400,-6.549285,8.367010,-3.301662,1.240756,-5.662218,-0.189005,-6.965665,-3.799534,-6.887569,-4.986938,8.181838,-9.077505,-8.851931,8.478364,6.319293,0.981798,-9.229980,-6.670552,-0.148714,0.241661,0.750021,-3.098238,7.670348,6.849428,-8.535924,-7.283038,-1.327871,-1.800316,6.250394,-9.575236,-7.978943,7.876695,-4.840848,1.796262,4.148677,2.472638,-3.911969,5.361974,6.919798,-8.553922,-1.077954,5.934081,8.162283,0.485330,6.547505,-7.783869,8.303140,-8.876683,3.332772,2.387963,-3.009265,4.049202,-0.576973,-5.227872,-1.763715,8.776763,-5.873148,4.170936,-4.673174,-3.359801,-5.025740,1.201204,-4.506385,2.307116,-9.685116,3.703170,3.614192,2.353669,5.273751,8.713276,-3.869739,-3.318804,0.520722,0.141501,9.153508,6.562864,-1.608553,4.383106,2.723799,-6.717479,1.894482,-5.928805,-4.741711,-7.727101,-3.443265,4.757139,-3.712642,8.624500,8.389960,0.832833,-9.716802,-6.188449,-7.744769,-5.630786,-9.865566,4.319475,-0.070819,7.257943,7.323868,-6.037852,6.004507,4.885621,3.818333,-5.681344,3.222448,8.999733,-6.562627,-0.965979,-3.180039,-8.873274,1.198078,-4.472588,-2.958793,-9.842493,-0.737953,4.929882,5.044132,0.811322,5.492403,2.441315,-2.305917,-0.017623,3.057167,4.522156,2.748958,-4.657400,5.041437,-7.577910,-4.832143,0.836476,0.519370,6.505397,0.640549,-7.286248,-5.673227,2.055479,-4.006598,5.319680,-5.504628,0.808714,9.052723,-8.610780,0.889251,-5.452769,-5.545511,-9.360701,-5.885757,-8.884161]], dtype = "float32")#candidate|9327|(2, 300)|const|float32
call_9324 = relay.TupleGetItem(func_1132_call(relay.reshape(const_9325.astype('int32'), []), relay.reshape(var_9326.astype('int32'), [12, 12, 9]), relay.reshape(const_9327.astype('float32'), [600,]), ), 1)
call_9328 = relay.TupleGetItem(func_1137_call(relay.reshape(const_9325.astype('int32'), []), relay.reshape(var_9326.astype('int32'), [12, 12, 9]), relay.reshape(const_9327.astype('float32'), [600,]), ), 1)
output = relay.Tuple([uop_9314,call_9324,const_9325,var_9326,const_9327,])
output2 = relay.Tuple([uop_9314,call_9328,const_9325,var_9326,const_9327,])
func_9329 = relay.Function([var_9313,var_9326,], output)
mod['func_9329'] = func_9329
mod = relay.transform.InferType()(mod)
var_9330 = relay.var("var_9330", dtype = "float64", shape = (10, 6, 14))#candidate|9330|(10, 6, 14)|var|float64
var_9331 = relay.var("var_9331", dtype = "int32", shape = (1296,))#candidate|9331|(1296,)|var|int32
output = func_9329(var_9330,var_9331,)
func_9332 = relay.Function([var_9330,var_9331,], output)
mutated_mod['func_9332'] = func_9332
mutated_mod = relay.transform.InferType()(mutated_mod)
const_9512 = relay.const([[[1.234383,-7.231497,-7.749779,1.319784,6.428497,-5.964456,8.093505,6.153103,8.158837,-1.342112,-6.399472,-9.549401,1.909332],[8.842609,9.269379,3.077895,-4.309165,-1.325554,2.720043,2.753991,3.416355,1.621624,-2.548771,-5.171239,-4.715383,-2.637318],[1.737313,4.205748,2.119715,-5.268468,6.968187,5.346498,2.724836,-0.331908,-9.570908,3.729032,-9.185819,-9.910240,-4.892089],[-7.014106,-7.872487,8.005517,1.790452,-7.927335,8.907600,-9.497790,4.688517,-0.357666,6.011109,2.805326,0.595901,7.183484],[1.772892,-9.569363,-1.388950,-8.182944,4.891245,-4.375705,-3.659952,5.354419,2.954598,-9.915947,-4.406113,-8.637605,-7.022176],[9.575136,-4.079201,0.187539,-4.296787,6.114673,-2.614891,8.363967,4.304593,8.544772,5.431255,5.682463,-8.686528,5.612188],[2.096674,-3.984332,3.022714,8.245784,-9.610901,1.089138,-9.072635,9.881948,-9.492702,3.105275,-9.388024,7.402904,2.882004],[0.659843,-5.998327,-2.675999,-8.920113,3.256181,-6.805270,1.052887,0.135907,-8.238716,-4.769848,4.699115,-8.005401,-8.352081]],[[0.254923,-1.489558,6.472716,-7.165918,-8.044877,2.930048,9.327066,-6.440060,8.040840,-3.102132,-0.731085,-3.481053,-6.765615],[5.975401,-3.041036,8.655639,2.751335,2.796577,6.613356,1.421757,-4.722475,-4.747937,0.426282,-6.265892,8.040725,-8.341384],[6.893787,-7.483559,-7.570755,-2.725171,5.359551,-6.713044,-3.149043,1.877289,8.700683,1.349988,6.534538,0.547448,4.446020],[5.713574,-8.876246,-7.200701,1.812397,8.732527,3.542684,-3.050149,7.055750,6.328420,-3.891516,-3.313008,6.121285,-6.009004],[1.407412,-2.646900,2.950398,3.413365,2.049877,1.889229,-3.019103,-6.346249,-6.476488,8.696767,5.649581,7.205880,3.726075],[8.516642,-6.521868,-9.397002,2.490056,-9.659311,-3.563192,-7.121605,7.756726,-9.008882,-8.405796,4.298272,-8.197386,-7.712846],[-4.472553,7.911935,5.171188,-3.078282,-8.782979,-5.118065,4.291870,-5.202321,-6.139567,4.687703,-4.756267,-8.961950,-3.252199],[-1.370202,-3.256110,-8.014177,-7.081930,-3.839325,-5.644488,7.008829,2.739879,-6.831305,-7.413522,9.106449,5.616980,4.078834]]], dtype = "float32")#candidate|9512|(2, 8, 13)|const|float32
uop_9513 = relay.asinh(const_9512.astype('float32')) # shape=(2, 8, 13)
func_5835_call = mod.get_global_var('func_5835')
func_5838_call = mutated_mod.get_global_var('func_5838')
const_9522 = relay.const([-7,3,-5,-3,-9,-2,-9,10,10,-7,-3,-8,10,-2,-7,7,10,-1,6,-3,-10,9,-2,9,6,-8,-2,-2,2,-5,5,-2,-5,-1,1,-6,-8,10,6,1,7,1,-8,6,-8], dtype = "int64")#candidate|9522|(45,)|const|int64
var_9523 = relay.var("var_9523", dtype = "int64", shape = (225,))#candidate|9523|(225,)|var|int64
call_9521 = func_5835_call(relay.reshape(const_9522.astype('int64'), [1, 3, 15]), relay.reshape(var_9523.astype('int64'), [5, 3, 15]), )
call_9524 = func_5835_call(relay.reshape(const_9522.astype('int64'), [1, 3, 15]), relay.reshape(var_9523.astype('int64'), [5, 3, 15]), )
func_8432_call = mod.get_global_var('func_8432')
func_8435_call = mutated_mod.get_global_var('func_8435')
var_9530 = relay.var("var_9530", dtype = "float64", shape = (12, 48))#candidate|9530|(12, 48)|var|float64
var_9531 = relay.var("var_9531", dtype = "int64", shape = (1232,))#candidate|9531|(1232,)|var|int64
call_9529 = relay.TupleGetItem(func_8432_call(relay.reshape(var_9530.astype('float64'), [4, 9, 16]), relay.reshape(var_9531.astype('int64'), [1232,]), ), 2)
call_9532 = relay.TupleGetItem(func_8435_call(relay.reshape(var_9530.astype('float64'), [4, 9, 16]), relay.reshape(var_9531.astype('int64'), [1232,]), ), 2)
output = relay.Tuple([uop_9513,call_9521,const_9522,var_9523,call_9529,var_9530,var_9531,])
output2 = relay.Tuple([uop_9513,call_9524,const_9522,var_9523,call_9532,var_9530,var_9531,])
func_9533 = relay.Function([var_9523,var_9530,var_9531,], output)
mod['func_9533'] = func_9533
mod = relay.transform.InferType()(mod)
mutated_mod['func_9533'] = func_9533
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9533_call = mutated_mod.get_global_var('func_9533')
var_9535 = relay.var("var_9535", dtype = "int64", shape = (225,))#candidate|9535|(225,)|var|int64
var_9536 = relay.var("var_9536", dtype = "float64", shape = (12, 48))#candidate|9536|(12, 48)|var|float64
var_9537 = relay.var("var_9537", dtype = "int64", shape = (1232,))#candidate|9537|(1232,)|var|int64
call_9534 = func_9533_call(var_9535,var_9536,var_9537,)
output = call_9534
func_9538 = relay.Function([var_9535,var_9536,var_9537,], output)
mutated_mod['func_9538'] = func_9538
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9843 = relay.var("var_9843", dtype = "bool", shape = (14, 3, 16))#candidate|9843|(14, 3, 16)|var|bool
const_9844 = relay.const([[[False,True,True,True,False,False,True,False,True,True,False,False,True,False,False,True],[False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False],[True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,False]],[[True,True,False,False,False,False,False,True,False,True,False,False,True,False,True,False],[False,True,True,True,False,False,False,True,False,True,True,True,True,False,True,False],[True,False,True,True,False,True,False,False,False,True,True,True,True,False,True,True]],[[True,False,True,True,False,True,False,True,True,True,False,False,False,True,False,True],[True,True,True,False,False,True,False,False,False,True,True,False,True,False,True,False],[False,False,False,True,False,False,False,True,False,False,True,False,True,True,True,True]],[[True,False,True,True,False,True,False,False,True,True,False,False,False,False,True,False],[False,True,True,False,True,True,True,True,True,False,True,True,False,True,False,True],[True,True,False,True,False,False,False,True,False,False,False,False,False,True,False,True]],[[False,False,True,True,True,True,True,True,True,False,False,True,True,False,False,True],[True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False],[False,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True]],[[True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,False],[True,False,True,False,True,False,True,False,False,True,False,True,True,False,False,True],[False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False]],[[True,False,False,False,False,True,False,False,False,False,True,False,False,False,True,False],[True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False],[True,True,False,True,False,False,True,True,True,True,True,True,True,False,False,False]],[[True,True,True,False,False,True,False,False,False,True,False,True,False,True,False,True],[False,False,False,False,True,True,True,False,False,False,True,True,False,True,False,True],[False,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False]],[[False,False,False,True,False,False,True,False,False,True,False,True,False,False,False,True],[True,False,True,False,True,False,False,False,True,False,False,True,False,False,True,True],[True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True]],[[False,False,True,True,False,True,True,True,False,True,False,False,False,True,True,True],[False,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False],[True,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True]],[[False,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True],[False,True,False,False,False,False,False,False,False,True,True,True,True,False,True,True],[False,False,True,True,False,False,True,False,True,True,True,False,True,True,True,False]],[[False,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False],[False,True,True,False,True,False,False,False,True,False,False,True,True,False,True,True],[False,True,True,False,False,True,True,False,True,False,True,True,True,True,True,True]],[[False,False,True,True,False,False,False,True,False,False,False,True,False,True,False,False],[True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,True],[True,True,True,True,True,True,True,True,True,True,False,False,True,False,False,False]],[[True,True,True,True,False,True,True,False,True,True,False,False,True,False,True,False],[True,False,False,False,True,True,True,True,False,True,True,True,True,True,True,False],[True,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True]]], dtype = "bool")#candidate|9844|(14, 3, 16)|const|bool
bop_9845 = relay.logical_and(var_9843.astype('bool'), relay.reshape(const_9844.astype('bool'), relay.shape_of(var_9843))) # shape=(14, 3, 16)
output = relay.Tuple([bop_9845,])
output2 = relay.Tuple([bop_9845,])
func_9848 = relay.Function([var_9843,], output)
mod['func_9848'] = func_9848
mod = relay.transform.InferType()(mod)
var_9849 = relay.var("var_9849", dtype = "bool", shape = (14, 3, 16))#candidate|9849|(14, 3, 16)|var|bool
output = func_9848(var_9849)
func_9850 = relay.Function([var_9849], output)
mutated_mod['func_9850'] = func_9850
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10382 = relay.var("var_10382", dtype = "int32", shape = (4, 14, 8))#candidate|10382|(4, 14, 8)|var|int32
var_10383 = relay.var("var_10383", dtype = "int32", shape = (4, 14, 8))#candidate|10383|(4, 14, 8)|var|int32
bop_10384 = relay.greater(var_10382.astype('bool'), relay.reshape(var_10383.astype('bool'), relay.shape_of(var_10382))) # shape=(4, 14, 8)
func_9848_call = mod.get_global_var('func_9848')
func_9850_call = mutated_mod.get_global_var('func_9850')
const_10399 = relay.const([[False,True,False,True,True,True,True,False,False,True,True,True],[False,True,True,True,True,False,True,True,False,False,False,True],[True,False,True,True,False,False,True,False,True,True,True,True],[False,True,True,True,False,False,False,False,True,False,True,False],[False,False,False,False,True,False,True,False,False,False,True,True],[True,False,True,False,True,True,True,False,False,False,True,False],[True,True,True,False,True,False,True,True,True,True,False,False],[True,True,False,False,False,False,True,True,False,False,True,False],[True,True,False,True,True,True,False,False,False,True,True,False],[True,False,True,False,True,True,False,False,True,True,False,True],[True,True,False,True,False,True,True,True,False,True,True,False],[False,True,False,True,False,True,True,True,True,False,False,False],[False,False,True,True,True,True,False,False,True,False,False,True],[True,True,False,False,True,True,False,True,False,False,False,False],[False,True,False,True,False,False,False,False,False,True,True,False],[False,True,False,True,True,False,False,False,False,True,False,True],[False,False,False,True,True,True,True,True,False,True,False,False],[True,False,False,False,True,True,False,False,False,False,True,True],[True,False,False,True,True,False,False,True,True,False,False,False],[True,False,True,False,True,True,False,True,False,True,True,True],[False,True,True,True,True,True,False,False,True,False,True,False],[True,True,True,False,False,False,False,True,False,True,True,True],[False,False,False,False,True,True,False,True,False,True,False,False],[False,True,False,True,True,False,True,False,True,True,False,True],[True,False,True,True,True,False,False,False,False,True,False,True],[False,False,True,True,False,True,True,False,False,True,False,False],[True,True,False,True,False,True,False,True,True,True,False,True],[False,True,True,False,False,True,False,False,False,True,True,False],[False,False,False,True,False,False,True,True,False,True,False,False],[False,True,False,False,False,False,True,False,True,False,True,True],[True,True,False,True,False,True,True,False,False,False,True,False],[False,False,True,False,False,False,True,False,True,True,False,True],[True,True,False,True,True,True,False,True,False,False,False,False],[False,False,False,False,False,False,False,False,False,True,True,False],[True,False,True,False,True,True,False,False,True,False,True,False],[True,False,True,True,False,False,True,False,False,True,False,False],[True,False,False,False,False,True,False,True,True,True,False,False],[True,False,True,False,False,False,False,True,False,False,False,True],[False,True,True,False,False,False,False,False,False,False,False,False],[False,False,False,True,False,False,False,True,False,True,True,False],[True,True,True,False,True,True,True,True,False,False,True,False],[False,True,False,True,False,False,True,False,True,True,True,True],[True,True,False,True,False,True,True,False,False,False,False,False],[True,True,True,True,True,True,False,False,False,False,True,False],[True,False,False,False,False,False,True,True,True,True,True,False],[False,False,False,False,True,False,False,False,True,False,False,False],[True,False,False,True,False,True,False,True,False,False,True,False],[False,False,True,False,True,False,False,True,True,False,False,False],[False,False,False,True,False,False,True,True,False,False,True,True],[True,True,False,True,True,False,True,False,False,True,False,False],[True,False,True,False,False,True,False,False,False,True,True,False],[True,False,False,False,False,True,True,False,False,True,True,True],[True,True,True,False,False,True,False,True,True,True,False,True],[True,False,True,True,True,False,True,True,True,True,True,True],[False,False,True,False,True,True,False,True,False,True,True,False],[True,True,True,False,False,True,False,True,False,True,False,True]], dtype = "bool")#candidate|10399|(56, 12)|const|bool
call_10398 = relay.TupleGetItem(func_9848_call(relay.reshape(const_10399.astype('bool'), [14, 3, 16])), 0)
call_10400 = relay.TupleGetItem(func_9850_call(relay.reshape(const_10399.astype('bool'), [14, 3, 16])), 0)
output = relay.Tuple([bop_10384,call_10398,const_10399,])
output2 = relay.Tuple([bop_10384,call_10400,const_10399,])
func_10406 = relay.Function([var_10382,var_10383,], output)
mod['func_10406'] = func_10406
mod = relay.transform.InferType()(mod)
mutated_mod['func_10406'] = func_10406
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10406_call = mutated_mod.get_global_var('func_10406')
var_10408 = relay.var("var_10408", dtype = "int32", shape = (4, 14, 8))#candidate|10408|(4, 14, 8)|var|int32
var_10409 = relay.var("var_10409", dtype = "int32", shape = (4, 14, 8))#candidate|10409|(4, 14, 8)|var|int32
call_10407 = func_10406_call(var_10408,var_10409,)
output = call_10407
func_10410 = relay.Function([var_10408,var_10409,], output)
mutated_mod['func_10410'] = func_10410
mutated_mod = relay.transform.InferType()(mutated_mod)
const_10762 = relay.const([[[3.379770,7.410598,1.805152,8.589211,-7.691740,-4.728510,6.972908,-6.312851,6.341629,-7.048695,9.060110,-2.858326,2.892635,1.979149,-1.865681],[1.376752,-3.934248,5.422270,0.813301,-3.617758,-1.200738,1.474520,3.887219,-9.913391,-5.910625,6.928280,8.263592,-7.727897,4.197892,0.782096]],[[-7.150806,6.910600,-9.351255,-6.154583,9.450685,8.311776,8.727919,5.889812,8.049303,2.912327,-9.091871,3.509458,-0.773547,3.967144,4.182248],[4.490343,6.615141,0.174325,7.580623,-2.344063,-8.694890,6.033273,-5.924164,-0.604918,-6.209775,6.436360,3.601137,-7.571222,-1.753050,9.417413]],[[8.714763,9.930960,1.730309,-7.592020,-5.638313,5.873304,-1.834145,-3.060508,-8.386211,-3.889776,-4.039760,4.406637,0.825107,6.944951,1.534750],[7.362568,9.910785,-9.376142,9.910647,5.991809,7.885994,1.482315,5.444990,-6.460888,-7.373787,-3.843338,-3.611798,-8.220424,-2.159558,8.088726]],[[-3.537364,-9.446674,5.855822,-5.483315,0.230720,-6.200918,6.633647,-6.142009,3.370730,-0.351904,-0.526696,-9.850664,-4.025554,-6.768931,-6.989399],[2.861466,-3.167675,-3.933194,-0.674162,4.004108,-1.436899,-8.831329,8.445528,5.143304,6.319324,-9.260007,-2.443572,-1.022703,-5.673842,2.263034]],[[-7.302828,1.153767,-0.106264,-6.352292,6.920622,-5.242934,0.736233,2.039486,-5.447149,7.716294,-5.695573,2.891794,-9.617079,0.679292,-9.792760],[1.855373,7.507125,9.019620,-7.969769,-0.696500,0.242799,8.535814,1.263481,7.979828,9.709657,6.985304,5.136115,0.118214,-7.368190,-6.799258]],[[7.310252,3.203516,-5.319697,5.328393,-5.503234,-4.603968,-7.358687,-2.854892,-4.580234,5.830163,-4.705679,5.066408,0.505504,0.706060,-8.571001],[-4.397051,6.449928,-2.813945,3.863466,-4.235387,-6.156268,2.286034,8.589236,-9.179719,-6.648931,8.932604,6.772987,-5.871018,3.504906,-7.479924]],[[1.609297,-3.293225,1.850240,-6.706856,-4.418529,-9.972824,-3.675005,6.871370,-6.838295,7.317657,-3.017744,2.797813,-5.204807,-4.707841,-9.334807],[1.564354,-3.247257,-4.266226,-0.702656,-6.470595,-0.524469,8.243171,-1.180323,-9.048297,6.815506,0.921270,-2.363803,3.070212,-0.195863,3.935522]],[[-4.615335,-9.490864,-7.854902,-7.917388,-9.489881,9.429420,-4.146363,2.946552,7.626089,9.520610,7.578086,-6.082757,1.642884,-7.301776,-0.508095],[-1.561619,-8.644696,3.633181,-7.926236,-9.055673,-2.619293,4.993489,-7.870745,4.297240,-4.008217,-4.501257,-6.103912,7.384175,-0.776555,8.437988]],[[5.775162,-5.036879,0.589165,-4.889893,7.874268,-6.726001,-5.894743,-4.163063,-4.934413,9.672519,-1.904046,-5.315646,-4.788215,3.071628,-8.432635],[9.576142,-0.922900,5.741846,7.829569,0.941426,-9.244315,-6.026154,6.568133,-7.986330,9.843502,-9.083531,2.689406,-2.702209,3.413952,1.988457]]], dtype = "float64")#candidate|10762|(9, 2, 15)|const|float64
uop_10763 = relay.asinh(const_10762.astype('float64')) # shape=(9, 2, 15)
uop_10765 = relay.rsqrt(uop_10763.astype('float32')) # shape=(9, 2, 15)
func_3899_call = mod.get_global_var('func_3899')
func_3903_call = mutated_mod.get_global_var('func_3903')
var_10773 = relay.var("var_10773", dtype = "uint16", shape = ())#candidate|10773|()|var|uint16
var_10774 = relay.var("var_10774", dtype = "uint16", shape = (80,))#candidate|10774|(80,)|var|uint16
call_10772 = relay.TupleGetItem(func_3899_call(relay.reshape(var_10773.astype('uint16'), []), relay.reshape(var_10774.astype('uint16'), [10, 8, 1]), ), 0)
call_10775 = relay.TupleGetItem(func_3903_call(relay.reshape(var_10773.astype('uint16'), []), relay.reshape(var_10774.astype('uint16'), [10, 8, 1]), ), 0)
uop_10779 = relay.log2(uop_10765.astype('float64')) # shape=(9, 2, 15)
bop_10784 = relay.floor_mod(uop_10779.astype('float32'), relay.reshape(uop_10765.astype('float32'), relay.shape_of(uop_10779))) # shape=(9, 2, 15)
output = relay.Tuple([call_10772,var_10773,var_10774,bop_10784,])
output2 = relay.Tuple([call_10775,var_10773,var_10774,bop_10784,])
func_10799 = relay.Function([var_10773,var_10774,], output)
mod['func_10799'] = func_10799
mod = relay.transform.InferType()(mod)
var_10800 = relay.var("var_10800", dtype = "uint16", shape = ())#candidate|10800|()|var|uint16
var_10801 = relay.var("var_10801", dtype = "uint16", shape = (80,))#candidate|10801|(80,)|var|uint16
output = func_10799(var_10800,var_10801,)
func_10802 = relay.Function([var_10800,var_10801,], output)
mutated_mod['func_10802'] = func_10802
mutated_mod = relay.transform.InferType()(mutated_mod)
var_11367 = relay.var("var_11367", dtype = "float64", shape = (8, 9, 1))#candidate|11367|(8, 9, 1)|var|float64
uop_11368 = relay.acosh(var_11367.astype('float64')) # shape=(8, 9, 1)
func_9533_call = mod.get_global_var('func_9533')
func_9538_call = mutated_mod.get_global_var('func_9538')
const_11382 = relay.const([6,4,10,5,-5,-2,-1,-4,-2,9,-5,4,-2,3,4,-5,3,-4,-7,1,-3,9,-3,4,-5,-5,-7,2,-8,3,1,4,7,7,6,-8,-2,-6,-1,2,-3,-6,8,10,-3,9,10,9,1,3,-7,-10,-7,6,5,4,7,-6,8,-2,-8,-6,-4,6,-5,5,-10,-3,-1,3,-6,-2,6,9,-6,6,4,4,1,5,9,-9,7,5,10,-2,6,-1,-3,-8,-3,-5,-8,-7,9,6,4,-8,-7,8,3,-4,-5,-3,5,-9,10,7,1,7,-6,9,-8,10,9,1,-8,-3,9,-3,-9,-5,4,-7,4,6,-8,-9,-1,-4,-6,4,-1,1,5,4,-4,-3,1,-5,7,-6,-8,3,-5,-2,1,9,5,2,1,5,5,6,-9,2,4,-3,4,-2,3,1,1,6,7,-7,-3,6,2,3,-2,-9,2,9,-6,-4,6,-2,3,-5,5,-1,-4,-6,8,10,-6,-6,-9,-4,-7,-5,-4,-10,-7,7,6,-2,-4,9,-2,2,7,8,-5,4,-1,-5,-10,-1,-9,-10,-8,-9,5,-4,8,4,-6,-5,5,2,-10,2,-1], dtype = "int64")#candidate|11382|(225,)|const|int64
var_11383 = relay.var("var_11383", dtype = "float64", shape = (576,))#candidate|11383|(576,)|var|float64
const_11384 = relay.const([[9,-7],[-9,-5],[-3,1],[-7,-6],[-10,-9],[5,-7],[7,-3],[-1,8],[-6,-10],[9,-9],[-8,-6],[3,1],[8,10],[5,-10],[-7,3],[-8,10],[5,-9],[7,-9],[-8,7],[7,-5],[-8,-8],[2,-7],[5,-9],[-2,4],[-10,4],[-1,-2],[7,10],[-9,-1],[-10,10],[-9,3],[9,-4],[2,10],[3,9],[6,2],[-3,1],[7,-9],[-1,9],[5,3],[-5,-9],[-8,-10],[3,-4],[-1,4],[9,5],[5,3],[2,7],[5,5],[10,-8],[1,1],[7,2],[-4,-3],[-2,-8],[-4,-7],[2,-6],[-6,6],[5,6],[4,-1],[-3,-1],[1,-7],[-6,-2],[-6,7],[-4,5],[-3,8],[9,-3],[1,3],[9,10],[-2,3],[-4,6],[-7,-7],[5,-1],[-7,6],[4,8],[-7,9],[7,-6],[-6,6],[-7,9],[-7,-2],[-10,-3],[-5,2],[10,5],[3,3],[-5,10],[7,3],[-8,7],[1,-8],[-4,10],[9,9],[2,-9],[1,-4],[9,8],[-9,2],[-3,3],[-8,-5],[-3,2],[-6,3],[8,-2],[4,-3],[-9,-2],[2,-6],[-1,-9],[1,1],[-10,7],[-5,-4],[4,2],[-2,-2],[-6,9],[-8,-6],[-3,8],[-10,9],[-4,-4],[1,-4],[3,-3],[-10,6],[-1,7],[10,-10],[8,-9],[9,-8],[6,-5],[-9,-2],[-4,-7],[-3,-2],[8,6],[3,-10],[-4,-9],[9,-5],[9,-4],[1,-3],[2,-1],[5,-1],[-3,2],[1,-6],[3,7],[1,8],[3,8],[-9,-9],[3,8],[-5,2],[4,-5],[9,1],[5,3],[9,7],[5,-6],[-8,-5],[-8,10],[2,1],[-7,-4],[-8,-8],[10,-10],[-5,2],[4,-6],[6,-3],[4,6],[-5,-3],[-5,-1],[-1,-5],[-2,-1],[4,9],[-3,10],[6,-2],[5,10],[6,4],[-10,4],[4,2],[8,5],[9,10],[10,-1],[-1,9],[-4,-10],[2,-2],[9,-6],[9,10],[-3,9],[-8,-6],[-9,5],[2,8],[4,-6],[1,9],[-6,-2],[-4,2],[9,9],[-10,-8],[-2,9],[-8,9],[4,-8],[-3,-3],[-1,8],[1,-3],[3,8],[7,-2],[-8,2],[-9,-7],[6,8],[-2,2],[7,-1],[10,-9],[-5,6],[-2,2],[3,-7],[5,-5],[-9,4],[-3,-7],[6,1],[3,9],[-6,2],[7,-9],[8,-3],[1,-5],[1,4],[-6,6],[-10,-10],[-6,2],[5,-1],[10,3],[9,-10],[-3,3],[-6,8],[9,-8],[1,-3],[-6,-1],[1,-5],[6,-8],[1,-5],[4,-10],[4,-6],[4,-1],[9,-3],[1,10],[-8,2],[3,6],[9,-10],[-1,5],[8,8],[5,-6],[5,3],[-3,-9],[-8,-4],[-10,-4],[-4,-2],[-3,-10],[-10,3],[-8,-2],[-10,9],[8,6],[-9,-4],[1,-10],[2,-1],[2,-8],[-8,10],[3,8],[-8,9],[-7,1],[-5,8],[5,-4],[1,4],[5,-8],[4,-10],[9,-10],[-7,3],[4,-1],[-3,7],[-9,6],[4,-5],[-1,-5],[-10,-4],[3,6],[-5,-5],[6,-9],[6,-6],[-7,-7],[2,2],[-5,-10],[2,-4],[8,-6],[-10,1],[8,5],[-6,-1],[3,3],[-9,9],[-4,7],[-3,-4],[2,5],[2,7],[5,-7],[5,3],[-5,-3],[5,-8],[-3,6],[7,-8],[-1,-8],[8,-4],[1,4],[-9,-4],[-7,-1],[-1,1],[4,-9],[-9,-10],[7,-5],[5,-7],[-3,2],[2,-8],[-5,1],[-8,9],[2,-2],[4,-3],[-10,-7],[8,-3],[9,-2],[-3,9],[-9,-5],[3,-8],[-1,-7],[-4,9],[9,-1],[2,-5],[-1,-9],[7,-4],[8,-5],[3,-7],[-6,3],[-7,4],[-8,2],[-2,8],[-5,-10],[7,-1],[3,-8],[-9,-5],[3,5],[-8,-5],[-7,-6],[-3,-2],[3,3],[6,-7],[-9,-9],[1,-3],[10,4],[8,-6],[-8,2],[7,2],[-6,2],[-8,-2],[3,5],[-3,-8],[-8,-3],[-6,1],[-1,7],[-9,-10],[5,-6],[10,-10],[-7,-6],[-3,5],[1,-8],[-5,2],[4,-4],[10,5],[-5,-8],[8,7],[-5,6],[-9,1],[-9,6],[-10,9],[-8,6],[-8,-3],[3,-9],[1,4],[1,4],[-3,10],[4,7],[4,7],[-1,-10],[-5,4],[-6,6],[-3,3],[-4,-5],[-2,10],[-1,-9],[3,9],[-10,-2],[5,10],[3,9],[6,-9],[9,-9],[9,6],[-6,-6],[-2,2],[-5,-4],[2,-2],[-9,10],[-4,-8],[-3,5],[-6,-3],[-7,-1],[6,-10],[8,1],[-9,-5],[-5,6],[6,-4],[2,-2],[-2,3],[5,-10],[-7,-4],[-6,3],[2,-6],[4,6],[-7,-10],[10,7],[8,3],[4,-6],[4,4],[-9,-7],[-8,7],[4,-2],[4,10],[-6,7],[-9,-7],[2,3],[-5,9],[-7,-4],[9,7],[-3,-6],[4,2],[-3,2],[-7,-4],[-4,8],[6,-3],[4,-8],[-9,8],[-7,-2],[10,-9],[-2,2],[9,10],[-3,-3],[4,1],[-5,2],[-5,9],[-5,-1],[2,-8],[10,-6],[8,-4],[-2,9],[5,5],[1,8],[-8,-8],[-6,9],[-10,4],[9,-10],[-6,7],[3,6],[-7,10],[8,4],[4,2],[10,10],[10,-9],[-4,5],[3,-7],[-7,-4],[6,2],[3,4],[5,-7],[-9,2],[-9,-8],[10,-4],[-3,-1],[6,7],[-1,-9],[-5,2],[-9,7],[-4,-7],[2,9],[-9,6],[3,-4],[-7,2],[10,-2],[4,-6],[-3,-1],[2,1],[5,5],[-2,-8],[2,-4],[5,-7],[-7,1],[-5,4],[-2,6],[-5,7],[8,8],[6,-4],[9,5],[4,-10],[-3,2],[-2,5],[-3,7],[1,-2],[7,-8],[5,9],[-8,2],[8,-4],[-5,-6],[-5,10],[-5,8],[2,-4],[9,1],[-2,9],[-9,-3],[-3,6],[3,6],[7,8],[6,8],[5,6],[-4,7],[1,7],[9,5],[-6,1],[-6,-9],[-4,7],[-2,-7],[-8,8],[-1,-7],[3,2],[-3,3],[9,1],[2,6],[-9,-7],[9,6],[8,-9],[-1,1],[2,5],[10,7],[5,-3],[-9,4],[-4,-9],[-6,8],[10,-2],[6,4],[-9,-3],[8,-8],[-9,-9],[-2,8],[-5,-10],[-3,6],[-8,4],[-4,-1],[-7,1],[4,6],[2,4],[10,3],[1,8],[-2,9],[3,-5],[10,-1],[8,-2],[-3,10],[6,1],[-7,3],[8,4],[-8,-1],[6,9],[9,5],[-1,-4],[5,-10],[-7,7],[5,-2],[1,-2],[-10,-9],[8,2],[-7,-7],[-4,-3],[-2,-10],[-3,-2],[6,1],[9,6],[6,-6],[5,-2],[-7,-9],[9,-9],[-6,-9],[-5,9],[-5,9],[-4,5],[-2,8],[1,8],[-10,-10],[-10,9],[8,-4],[9,6],[-4,9],[-10,1],[5,7],[-9,5],[-5,-8],[4,10],[-7,8],[-10,1],[-7,-5],[5,9],[7,-10],[-5,6],[10,5],[-1,-7],[-1,-4],[9,-8],[-8,-5],[1,4],[2,-4],[9,-6],[-4,-4],[-6,-5],[7,-10],[7,-3],[9,7],[-4,7],[7,2],[1,-6],[9,-4],[-10,-1],[-10,-5],[7,1],[8,7],[1,7]], dtype = "int64")#candidate|11384|(616, 2)|const|int64
call_11381 = relay.TupleGetItem(func_9533_call(relay.reshape(const_11382.astype('int64'), [225,]), relay.reshape(var_11383.astype('float64'), [12, 48]), relay.reshape(const_11384.astype('int64'), [1232,]), ), 3)
call_11385 = relay.TupleGetItem(func_9538_call(relay.reshape(const_11382.astype('int64'), [225,]), relay.reshape(var_11383.astype('float64'), [12, 48]), relay.reshape(const_11384.astype('int64'), [1232,]), ), 3)
output = relay.Tuple([uop_11368,call_11381,const_11382,var_11383,const_11384,])
output2 = relay.Tuple([uop_11368,call_11385,const_11382,var_11383,const_11384,])
func_11386 = relay.Function([var_11367,var_11383,], output)
mod['func_11386'] = func_11386
mod = relay.transform.InferType()(mod)
var_11387 = relay.var("var_11387", dtype = "float64", shape = (8, 9, 1))#candidate|11387|(8, 9, 1)|var|float64
var_11388 = relay.var("var_11388", dtype = "float64", shape = (576,))#candidate|11388|(576,)|var|float64
output = func_11386(var_11387,var_11388,)
func_11389 = relay.Function([var_11387,var_11388,], output)
mutated_mod['func_11389'] = func_11389
mutated_mod = relay.transform.InferType()(mutated_mod)
const_11910 = relay.const([[[-7,-8,2,2,9],[-3,-8,-9,-2,3],[-3,5,-9,2,-9],[-9,5,3,-5,7],[5,-8,-3,-7,-8],[-1,1,10,-9,3],[-7,-6,-10,-2,-6],[-6,6,-5,-10,4],[-5,1,-8,-9,3],[-7,-6,3,-4,8],[1,-10,-9,8,1],[9,8,5,3,5],[6,6,-6,8,3],[9,-2,-5,-6,-2]],[[6,5,3,9,2],[2,7,1,-9,3],[-5,-8,-3,-9,7],[-6,-3,8,-8,4],[3,9,-5,3,-1],[6,9,2,10,-1],[-3,1,-9,-5,-7],[9,4,10,-2,1],[-9,9,2,2,-5],[8,-1,5,9,-8],[-9,-6,7,-2,7],[2,2,-6,3,8],[-10,-5,9,-10,1],[5,-5,3,-5,2]],[[-8,-9,-4,-7,-2],[2,-3,-2,8,-1],[2,-9,6,-10,4],[-4,4,5,8,-4],[8,10,-4,4,-6],[3,10,6,3,-7],[-8,1,4,-4,9],[1,-6,9,-5,6],[-9,-3,2,-6,-7],[-3,-6,1,-2,10],[-2,7,6,-10,10],[-6,4,9,-9,10],[-10,1,9,3,6],[3,8,6,7,-5]]], dtype = "uint8")#candidate|11910|(3, 14, 5)|const|uint8
var_11911 = relay.var("var_11911", dtype = "uint8", shape = (3, 14, 5))#candidate|11911|(3, 14, 5)|var|uint8
bop_11912 = relay.subtract(const_11910.astype('uint8'), relay.reshape(var_11911.astype('uint8'), relay.shape_of(const_11910))) # shape=(3, 14, 5)
func_3834_call = mod.get_global_var('func_3834')
func_3838_call = mutated_mod.get_global_var('func_3838')
const_11917 = relay.const([-2.942204,9.392139,6.475628,9.720036,7.029508,-8.128925,9.822566,-3.186711,-1.673771,0.658284,-7.077670,6.672693,3.640351,0.493314,-1.284886,7.035413,3.976889,-3.125640,-4.049997,8.633140,2.185736,-8.880239,-3.600331,2.554133,-4.533890,2.439173,-1.489575,3.577253,5.515251,-5.282689,-1.509519,2.346052,-7.798818,-2.014583,6.571597,-1.460080,6.400789,0.173387,0.248300,-6.401769,1.060211,6.254158,3.473559,8.548807,0.725990,-4.828094,6.675021,-6.582672,5.435443,-7.318122,-0.073325,8.947890,0.168351,-1.420629,5.579592,-8.535426,-1.676260,9.429137,-5.865781,9.883975,-1.286737,7.705746,8.555675,-3.772649,0.073754,7.390353,4.081753,7.534185,6.428910,-6.705559,5.768122,6.652619,-9.731745,1.125909,8.749252,-5.381448,-1.957411,7.185588,8.161120,-4.641169,-4.582918,4.529915,-7.068859,-0.190724,-2.406921,7.240452,4.713705,3.436022,3.412858,-9.171534,2.017745,-3.274589,8.454959,7.759558,1.459873,5.000677,6.975356,-5.968946,6.253714,3.414999,1.812600,3.310447,0.662740,-8.806995,3.514094,1.034338,3.596596,-4.228470,0.487926,-6.576119,4.312346,-2.983590,-2.376154,0.592860,3.125188,2.654200,8.321100,7.227876,9.018681,4.455530,0.125304,-0.936235,-9.834470,0.716156,-7.826053,4.514773,2.820723,0.963936,-0.593365,0.948677,7.366600,-8.786363,-4.495968,-0.108281,6.209350,-4.228397,-6.738862,6.860256,-9.183034,0.994465,-1.214958,-4.883690,-5.471300,5.411360,-8.042507,4.065703,1.350730,-3.155136,6.724143,-3.898310,-5.729827,5.253941,0.832278,-0.679751,4.033176,-4.983502,-8.792069,5.953934,-5.162812,3.905681,-8.545314,7.637829,-7.912341,0.564425,-4.549427,-1.887473,-5.426489,4.384857,-0.366217,8.971478,4.226435,-8.990219,6.594490,9.741428,-5.669640,-9.408443,9.742262,1.790467,-5.064640,1.457146,-1.069649,8.324633,-9.310554,-3.225352,-1.565511,-3.559968,5.740702,5.784341,0.362012,0.772516,3.179430,-6.677705,9.290729,-3.766271,-6.760893,-7.026334,0.999946,8.882819,-1.624808,6.046034,-5.730777,5.225381,-7.145919,-2.799588,5.040195,9.983216,5.131463,2.164188,4.466908,-8.603755,6.710436,-3.406843,3.558675,-7.024397,1.478903,-6.819850,-1.818426,-9.837981,6.979355,-4.141095,-1.586652,2.065827,8.776990,-7.298190,7.472634,-2.416455,4.498870,5.945209,-1.867056,-3.741186,8.842467,7.956344,-9.008301,-1.399389,-5.512947,-2.055732,1.404658,2.689884,-6.385184,4.155524,-3.882976,1.036730,2.062225,-9.802082,-5.240799,2.344188,-8.300436,5.937427,-0.232137,-8.737531,-4.570410,0.420776,-2.514033,-2.951832,-1.504327,-5.639612,5.204593,-2.272558,2.970639,5.789692,-3.994639,0.438149,9.621432,6.276161,7.677104,6.668950,9.491182,9.609047,9.946686,-9.282269,8.474080,-3.106280,-3.512596,6.852935,-3.734567,-7.354911,-8.342020,7.524933,-9.638861,2.040617,-0.622186,-4.443217,-2.397669,5.696905,5.510090,0.094988,2.386069,-2.733218,1.188660,1.643402,-2.884160,-1.397489,6.271954,-8.253253,-6.693446,1.867225,-5.820939,-6.064670,0.767870,-7.790023,-1.653185,-8.100801,-4.488797,7.273979,-1.876759,1.637337,-4.599294,9.828634,8.823723,-1.554257,-0.986113,-5.347153,1.360294,7.771998,-4.581651,0.504525,1.722999,-3.447537,-3.870981,5.855457,-9.658236,2.954530,-8.613391,0.735467,2.427262,-4.505759,1.302130,-1.680145,1.670538,-9.480701,-6.872588,-3.265021,6.053856,4.001680,3.445767,-9.727554,6.658430,-3.891574,1.200507,4.911735,9.894255,-6.217530,-7.162630,2.122898,-5.092862,8.319604,-8.796018,-0.622866,1.873816,6.186779,0.974649,-2.944574,-5.294391,-6.295041,-9.448842,-0.136716,5.726211,2.269931,7.074012,-7.365593,-4.582460,-2.780305,0.674347,-3.302147,-5.981362,9.444887,3.250602,-0.278399,5.829345,7.122690,-0.567570,3.729447,-9.838683,7.074557,-6.222862,5.727125,-2.783065,2.637398,2.507917,-6.402340,2.926481,1.767947,6.695005,-7.678815,-2.176727,9.511617,5.378089,0.786844,6.927201,-4.638284,-4.479204,-4.241946,9.978518,-8.508198,6.973610,8.200661,8.172520,1.969065,-3.646499,7.935187,-6.750792,-4.352642,3.993614,6.172970,-4.982228,-1.107451,-8.448961,6.519765,-6.892343,-4.323125,-7.402887,6.088141,-8.538051,6.855553,-7.725701,2.338104,4.935701,2.622539,9.992642,9.369574,-6.564258,-4.091006,-6.498381,-7.620626,-1.418133,-4.692385,-2.196534,-2.146124,-0.491115,-1.059842,-2.630976,1.856936,6.842878,-1.625203,-5.385265,-7.801662,-3.019306,8.376531,4.841965,0.513339,-2.263810,-5.479718,3.659994,7.039479,-3.800695,5.939067,4.706756,-6.312277,4.121657,-8.093752,-9.028008,-7.521310,5.242350,3.174817,6.075322,-6.658113,-4.645253,0.862786,1.061027,-1.426790,-5.601662,-6.732833,-2.151328,-5.821911,-3.098723,0.934495,3.522131,8.537014,7.065570,5.455081,3.332025,-6.917171,2.463027,-1.496613,-9.096587,-8.605967,-0.616592,1.525575,-8.031628,-5.735925,-5.330231,8.924892,4.261720,-8.487274,-5.980707,0.960049,-4.539140,9.082744,9.926239,-3.452219,-1.579282,-3.201355,-8.061850,-0.607184,7.694109,3.876281,-0.848994,-8.609311,0.357435,2.852620,-7.342194,6.184433,-9.160907,-2.643163,-0.596948,-7.474437,-2.519584], dtype = "float32")#candidate|11917|(507,)|const|float32
var_11918 = relay.var("var_11918", dtype = "int64", shape = (1232,))#candidate|11918|(1232,)|var|int64
call_11916 = relay.TupleGetItem(func_3834_call(relay.reshape(const_11917.astype('float32'), [3, 13, 13]), relay.reshape(const_11917.astype('float32'), [3, 13, 13]), relay.reshape(var_11918.astype('int64'), [4, 308]), ), 2)
call_11919 = relay.TupleGetItem(func_3838_call(relay.reshape(const_11917.astype('float32'), [3, 13, 13]), relay.reshape(const_11917.astype('float32'), [3, 13, 13]), relay.reshape(var_11918.astype('int64'), [4, 308]), ), 2)
bop_11920 = relay.bitwise_or(var_11911.astype('int8'), relay.reshape(bop_11912.astype('int8'), relay.shape_of(var_11911))) # shape=(3, 14, 5)
output = relay.Tuple([call_11916,const_11917,var_11918,bop_11920,])
output2 = relay.Tuple([call_11919,const_11917,var_11918,bop_11920,])
func_11924 = relay.Function([var_11911,var_11918,], output)
mod['func_11924'] = func_11924
mod = relay.transform.InferType()(mod)
var_11925 = relay.var("var_11925", dtype = "uint8", shape = (3, 14, 5))#candidate|11925|(3, 14, 5)|var|uint8
var_11926 = relay.var("var_11926", dtype = "int64", shape = (1232,))#candidate|11926|(1232,)|var|int64
output = func_11924(var_11925,var_11926,)
func_11927 = relay.Function([var_11925,var_11926,], output)
mutated_mod['func_11927'] = func_11927
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12095 = relay.var("var_12095", dtype = "float64", shape = (15, 15, 8))#candidate|12095|(15, 15, 8)|var|float64
uop_12096 = relay.erf(var_12095.astype('float64')) # shape=(15, 15, 8)
output = relay.Tuple([uop_12096,])
output2 = relay.Tuple([uop_12096,])
func_12102 = relay.Function([var_12095,], output)
mod['func_12102'] = func_12102
mod = relay.transform.InferType()(mod)
mutated_mod['func_12102'] = func_12102
mutated_mod = relay.transform.InferType()(mutated_mod)
var_12103 = relay.var("var_12103", dtype = "float64", shape = (15, 15, 8))#candidate|12103|(15, 15, 8)|var|float64
func_12102_call = mutated_mod.get_global_var('func_12102')
call_12104 = func_12102_call(var_12103)
output = call_12104
func_12105 = relay.Function([var_12103], output)
mutated_mod['func_12105'] = func_12105
mutated_mod = relay.transform.InferType()(mutated_mod)
const_12404 = relay.const([[[-6,-4,-8],[2,5,7],[4,-1,3],[-2,2,9],[-8,-6,-5],[2,-4,4],[1,9,-5],[-1,-8,-10],[10,6,-7],[-1,-7,-9],[5,-2,10],[-2,3,4]],[[-10,9,-9],[-9,-8,-10],[-1,1,9],[-10,1,-7],[9,9,-3],[-2,-10,-8],[-7,-8,1],[3,3,10],[1,-8,2],[-1,-5,5],[-5,-8,7],[6,3,10]],[[-3,8,6],[-8,5,-9],[-9,10,-3],[1,-9,7],[-5,1,-6],[-3,-5,-3],[-6,7,-6],[2,1,9],[-4,-3,1],[10,-2,3],[-3,7,5],[8,10,7]],[[-4,-1,-9],[-10,-3,8],[5,-10,-9],[7,9,-10],[3,-10,-3],[-10,5,3],[-2,-9,-8],[-10,4,-1],[3,7,-3],[8,2,10],[-4,6,2],[3,2,10]],[[8,-4,10],[-7,5,-4],[-8,-4,-2],[-8,7,-4],[-3,2,9],[-7,1,-1],[-9,3,10],[-4,-2,1],[-5,10,2],[10,3,3],[1,10,3],[3,8,8]],[[5,-8,-2],[-3,-7,10],[7,7,1],[1,-9,-6],[-10,6,6],[8,8,10],[-7,7,-6],[-5,9,10],[-1,-2,9],[3,-6,9],[-5,-5,5],[10,-8,5]],[[-8,-4,4],[4,4,6],[-3,-5,9],[3,3,4],[-3,1,5],[-5,8,-7],[5,6,7],[-5,2,-1],[5,3,-4],[-9,1,-10],[4,9,-5],[4,8,-1]],[[1,-7,-7],[-2,-4,4],[1,-7,-1],[-1,2,-7],[-6,9,1],[1,6,-7],[-6,-7,5],[8,-3,10],[-2,9,3],[-1,6,-5],[9,-3,1],[10,-8,-8]],[[6,-10,-1],[-3,3,4],[-7,-7,6],[2,-7,2],[2,7,-7],[-4,9,4],[-4,2,6],[-5,1,-5],[-5,2,-1],[-2,-6,-4],[2,-10,2],[2,8,5]],[[-9,6,-6],[9,-10,-5],[-7,6,4],[8,10,10],[1,-9,-5],[6,7,-4],[-5,-4,3],[-5,-6,4],[1,-9,-2],[-2,-8,-6],[7,7,-6],[-9,-5,7]],[[4,-8,3],[2,8,6],[8,-6,10],[1,6,1],[10,-2,-3],[-1,-10,-7],[3,-8,9],[-10,3,5],[-8,1,4],[-5,-4,-7],[5,-5,-1],[2,2,-4]],[[6,-9,-1],[-2,-1,-4],[-7,-1,-7],[9,8,-9],[-6,4,10],[10,3,-7],[-6,-7,4],[-5,-2,3],[5,-1,5],[4,2,-9],[6,-10,-1],[-5,-6,7]],[[4,2,-6],[-5,-8,-6],[8,-4,5],[-5,-5,10],[-4,6,-7],[-1,-4,-7],[9,-1,-8],[-1,6,9],[1,2,10],[3,-7,3],[9,-7,8],[-3,-7,3]],[[-3,4,-10],[-1,-6,6],[-5,10,-7],[7,7,-10],[1,-10,-10],[-4,9,-10],[-2,1,-4],[-3,-5,2],[-6,-7,5],[5,-1,-4],[2,-1,7],[-2,-4,6]],[[10,-4,2],[7,5,10],[1,5,2],[2,7,-5],[-7,-3,9],[-9,-9,-6],[-1,9,-6],[7,4,-9],[3,-10,-7],[7,1,-6],[-9,1,-10],[-9,9,6]]], dtype = "int32")#candidate|12404|(15, 12, 3)|const|int32
var_12405 = relay.var("var_12405", dtype = "int32", shape = (15, 12, 3))#candidate|12405|(15, 12, 3)|var|int32
bop_12406 = relay.add(const_12404.astype('int32'), relay.reshape(var_12405.astype('int32'), relay.shape_of(const_12404))) # shape=(15, 12, 3)
func_4264_call = mod.get_global_var('func_4264')
func_4268_call = mutated_mod.get_global_var('func_4268')
const_12417 = relay.const([2.608569,2.521071,-5.370924,-5.398814,-4.293054,-2.258842,8.473512,-7.639001,-6.274772,4.202011,6.277449,8.746179,-7.286678,-0.117551,-6.315465,-8.130393,0.722504,9.424682,6.771484,-6.083041,-5.327449,3.779647,9.709915,5.990888,-2.413317,-0.838719,-1.760707,7.810989,9.590964,-7.830691,8.477830,3.540844,5.961170,0.284527,-6.992599,-6.937665,-3.486092,7.477618,4.630422,2.147446,4.290141,0.174991,-1.409612,-0.155350,-3.703675,3.182793,-5.828629,4.665496,9.625796,-1.393451,-9.727140,-6.208607,-6.568955,-6.639478,-2.814908,8.674970,-8.709924,3.793103,2.162445,-5.801859,4.652593,9.129304,1.228306,4.940298,6.299414,-0.963145,-5.168346,-2.055256,-5.646714,-1.263644,9.622479,3.729900,-9.211178,-7.679392,-3.675965,-1.784483,-9.708050,3.054400,-6.826247,-8.841963,-6.593858,8.783736,9.144041,8.050526,-5.295395,-1.888992,0.250898,4.869328,-7.355789,2.842913,1.229568,-6.232929,-6.900302,1.843112,-7.038419,-7.680364,-0.903517,9.326756,-2.833483,-5.346277,-0.233827,-4.495215,-6.821405,-8.842669,8.705855,0.722361,5.444247,-5.971019,-0.261178,-8.064063,3.399971,7.841628,-8.616817,8.779615,-9.063165,3.360788,-0.110454,-5.996018,-9.331309,0.981498,2.222376,-8.267680,2.071841,-2.842852,-8.555848,-2.573149,5.425100,4.058126,1.196328,-9.621727,-2.831138,-2.092155,5.863136,6.838643,7.018126,8.032731,-7.165892,9.920219,-5.551328,3.082309,-4.149894,-1.446794,0.382951,1.668836,-8.270487,-5.550330,-6.352777,6.220454,-9.989233,6.169907,-6.624177,-3.718546,-1.378924,-4.558223,6.908965,0.023243,4.593685,9.085926,1.958390,9.109947,5.052525,5.533059,8.877266,1.541021,2.170420,5.748948,-1.667179,-3.779482,-0.991317,7.302397,-1.873407,3.552232,7.572146,6.365791,-4.097877,-0.376999,-8.905234,8.603244,0.793898,6.496825,3.102596,-6.521179,-3.409883,-5.697076,4.753963,-8.520682,-9.312690,9.474543,9.771647,-0.247896,-0.716817,7.522904,-4.521934,-3.861957,5.058213,2.266645,-5.709214,-4.176223,-8.600492,0.202993,6.729721,-4.053705,-5.205123,6.170124,-2.153282,5.201358,-4.807134,4.685968,6.554781,-2.697218,-4.025778,8.923491,6.015995,6.714708,-8.129279,3.848502,0.113879,3.065097,-5.037511,2.028765,-8.190555,3.961656,5.813458,-2.167448,-6.203627,1.268720,-3.987394,3.556552,3.823025,7.740303,-2.436436,9.237782,-0.293470,2.517190,5.888549,0.365400,6.558954,-3.767681,-9.372451,3.997086,-0.587490,8.323427,0.536428,-1.484898,7.165500,-9.234772,9.254719,3.884171,-9.328708,-9.430504,2.013489,3.964757,-2.625869,3.920849,-8.292627,0.007039,-0.557744,5.116674,4.401738,-0.905567,-9.013946,-2.063002,-6.696762,0.037853,-0.642613,-3.604541,-4.234454,-2.578492,6.083171,7.113326,-6.986896,-1.868241,6.503997,-6.508038,-7.600253,9.881921,5.644868,-7.386676,-0.011972,-5.204166,6.331171,-3.264322,3.566870,-3.800136,8.571016,-3.276791,-4.580208,-2.831821,6.499629,-4.419752,5.195863,-6.591268,-3.150315,-2.359571,-8.256567,7.604464,3.960027,9.532855,4.873650,2.269322,8.528811,-0.497942,2.301917,3.744949,-9.605654,-4.537826,-5.513636,-1.596759,4.567565,9.056662,-8.791533,3.489673,-8.312114,-3.084739,-4.104336,-6.020354,2.082986,0.165983,7.928890,8.084399,-1.879160,8.503941,-6.018629,8.063619,-7.569886,-1.331660,-0.888658,-0.667691,-0.562649,-8.308724,8.332209,2.234770,7.273330,4.810953,8.310318,-0.266370,-1.471131,-4.015702,-8.622421,-3.770092,-0.453542,2.328966,-9.146965,-3.400526,-5.610497,6.084010,7.467959,-6.816255,1.024362,-4.999240,7.959033,-7.776429,-5.533208,-4.714596,0.103249,-2.652518,8.039148,-7.953770,8.355492,4.861823,3.282105,5.335820,1.972889,0.692308,9.920397,5.513679,3.699771,-6.074717,3.385483,-6.954874,3.318845,-3.009729,-3.743114,-8.644936,1.603058,3.568205,-1.133107,-7.006903,-5.854926,-6.971798,4.203694,-2.223263,-6.377370,-1.171971,-6.299697,-0.389466,1.628687,-8.890957,5.284872,-2.511166,-3.208282,6.939125,-9.461620,-0.454567,7.626499,7.369152,9.616683,4.156448,-1.890568,9.889109,-2.303757,3.049352,-4.272753,3.798933,-5.635124,6.429558,2.827541,-4.671935,-8.174072,7.531704,7.946188,-1.688393,-6.690506,-8.651883,5.716639,8.677166,1.416279,-7.809174,2.309542,6.871187,9.533966,-5.416828,0.906620,-2.883849,-9.996633,-4.494572,-0.865448,-3.302921,-9.362428,-3.026581,-0.844626,-9.313864,-8.761960,4.602623,-8.874546,3.123757,4.820975,7.792263,-3.356831,-4.204089,2.633727,1.185391,1.118149,-3.389107,-7.708092,-4.392289,7.664715,7.037783,2.897353,6.286938,8.972045,0.340925,-7.679406,-7.216472,-7.714301,8.844841,9.527426,-2.419968,-2.336807,-7.649607,6.661666,8.466017,7.042329,-1.397831,-5.727639,8.117016,-5.097862,-3.303948,4.199010,-9.209821,-2.844069,5.274905,-1.022840,-0.363925,-8.933721,5.824197,9.662040,-8.998842,5.507210,0.816093,-4.464781,-0.969148,3.177840,-2.829135,8.294020,0.356387,-1.640023,5.987306,-4.672631,-8.290751,-0.791027,-5.223938,-8.031108,8.373979,1.762414,4.953272,3.103061,-7.810533,9.978870,0.002867,6.989427,-7.236375,4.872490,-0.468021,6.975858,-3.595069,5.686390,-4.094197,-8.223342,2.752762,-7.030465,0.865091,-3.944168,5.635094,-9.930650,-8.122168,7.942164,-4.159925,-6.558168,-0.962256,0.698951,-9.833702,3.770222,-2.573511,-7.933294,1.124686,4.570348,-0.738725,-3.632795,6.548389,-3.591358,5.237959,-9.600358,-7.249778,-6.308002,-3.909155,3.176493,-2.933211,1.811036,-8.262063,1.046080,1.753737,4.187083,-7.891686,8.610243,-9.865292,-2.818491,4.988511,4.936421,9.610767,-5.106080,5.467099,-9.976930,-3.955839,9.064351,9.403023,-8.535230,0.641968,-7.648265,9.403360,5.613713,1.362220,5.286647,-5.334465,-8.856169,2.788163,1.959770,1.564433,-5.762787,-0.847776,-6.153425,-5.725288,-8.508668,-9.349595,-2.452403,-6.852288,-8.667375,7.199091,-1.005892,-7.724656,2.556378,2.374891,6.442175,1.157379,-6.614483,0.880197,1.295873,4.129426,9.474189,7.686143,1.901351,9.469875,9.833113,-0.088698], dtype = "float64")#candidate|12417|(594,)|const|float64
var_12418 = relay.var("var_12418", dtype = "bool", shape = (1232,))#candidate|12418|(1232,)|var|bool
call_12416 = relay.TupleGetItem(func_4264_call(relay.reshape(const_12417.astype('float64'), [6, 11, 9]), relay.reshape(var_12418.astype('bool'), [16, 11, 7]), ), 6)
call_12419 = relay.TupleGetItem(func_4268_call(relay.reshape(const_12417.astype('float64'), [6, 11, 9]), relay.reshape(var_12418.astype('bool'), [16, 11, 7]), ), 6)
func_1892_call = mod.get_global_var('func_1892')
func_1895_call = mutated_mod.get_global_var('func_1895')
var_12422 = relay.var("var_12422", dtype = "float32", shape = ())#candidate|12422|()|var|float32
call_12421 = relay.TupleGetItem(func_1892_call(relay.reshape(var_12422.astype('float32'), [])), 0)
call_12423 = relay.TupleGetItem(func_1895_call(relay.reshape(var_12422.astype('float32'), [])), 0)
func_5697_call = mod.get_global_var('func_5697')
func_5704_call = mutated_mod.get_global_var('func_5704')
const_12430 = relay.const([-3,3,2,-7,-5,9,-6,3,-10,7,-5,7,4,2,-4,-4,-1,3,10,-8,2,3,6,9,6,-8,-1,-9,-7,-10,2,-7,10,-8,-9,-5,4,10,7,8,7,6,-8,-4,-6,7,-8,-2,-4,7,9,-6,-4,-2,10,-4,-5,7,-5,-2,5,10,-6,10,-5,5,2,8,2,7,-2,-8,-1,-4,-10,-9,8,8,4,-5,-6,-4,4,4,-3,-7,-4,-6,4,3,-8,6,-4,9,-4,-6,5,-1,-3,4,-8,5,-5,-6,2,-10,-4,4,5,-3,-10,-1,10,-3,-9,-2,-7,8,7,1,-5,-8,9,6,-9,-3,1,-3,8,-5,4,-5,-4,3,8,1,-6,4,-2,9,1,-10,6,3,-3,2,-8,8,-9,-3,6,-10,-4,-8,-7,10,9,-10,7,-2,6,6,10,-5,-9,-5,4,-7,-2,-7,-4,-6,-10,1,-2,6,4,1,9,2,-6,-1,4,1,5,-4,-4,3,7,-1,-4,8,-10,3,-4,-5,1,3,8,-1,9,-3,4,-8,9,-1,-8,-2,-7,-8,-1,3,3,-7,-7,5,4,2,-5,10,-2,8,1,8,6,-10,9,8,1,-4,-4,6,-6,-7,-1,-6,9,2,-5,-9,-6,-7,-4,8,10,6,8,3,2,-8,6,-7,7,8,-10,10,-8,1,-2,7,-1,-8,-5,-5,-1,-2,-7,4,6,4,9,-2,-1,-8,3,6,10,-3,3,4,10,-10,2,-1,-8,-8,8,-5,-4,3,10,-1,3,9,-1,9,8,-10,-5,-3,-7,3,3,-8,1,-6,1,5,-1,-10,-7,6,8,10,-1,10,5,3,9,7,-3,3,10,9,-2], dtype = "uint8")#candidate|12430|(325,)|const|uint8
call_12429 = relay.TupleGetItem(func_5697_call(relay.reshape(const_12430.astype('uint8'), [5, 13, 5]), relay.reshape(const_12430.astype('uint8'), [5, 13, 5]), relay.reshape(const_12417.astype('float64'), [594,]), relay.reshape(const_12430.astype('float32'), [5, 13, 5]), relay.reshape(const_12430.astype('bool'), [5, 13, 5]), ), 0)
call_12431 = relay.TupleGetItem(func_5704_call(relay.reshape(const_12430.astype('uint8'), [5, 13, 5]), relay.reshape(const_12430.astype('uint8'), [5, 13, 5]), relay.reshape(const_12417.astype('float64'), [594,]), relay.reshape(const_12430.astype('float32'), [5, 13, 5]), relay.reshape(const_12430.astype('bool'), [5, 13, 5]), ), 0)
func_1280_call = mod.get_global_var('func_1280')
func_1284_call = mutated_mod.get_global_var('func_1284')
var_12440 = relay.var("var_12440", dtype = "uint64", shape = (42,))#candidate|12440|(42,)|var|uint64
var_12441 = relay.var("var_12441", dtype = "uint64", shape = (630,))#candidate|12441|(630,)|var|uint64
call_12439 = relay.TupleGetItem(func_1280_call(relay.reshape(var_12440.astype('uint64'), [6, 1, 7]), relay.reshape(var_12441.astype('uint64'), [6, 15, 7]), ), 0)
call_12442 = relay.TupleGetItem(func_1284_call(relay.reshape(var_12440.astype('uint64'), [6, 1, 7]), relay.reshape(var_12441.astype('uint64'), [6, 15, 7]), ), 0)
output = relay.Tuple([bop_12406,call_12416,const_12417,var_12418,call_12421,var_12422,call_12429,const_12430,call_12439,var_12440,var_12441,])
output2 = relay.Tuple([bop_12406,call_12419,const_12417,var_12418,call_12423,var_12422,call_12431,const_12430,call_12442,var_12440,var_12441,])
func_12456 = relay.Function([var_12405,var_12418,var_12422,var_12440,var_12441,], output)
mod['func_12456'] = func_12456
mod = relay.transform.InferType()(mod)
var_12457 = relay.var("var_12457", dtype = "int32", shape = (15, 12, 3))#candidate|12457|(15, 12, 3)|var|int32
var_12458 = relay.var("var_12458", dtype = "bool", shape = (1232,))#candidate|12458|(1232,)|var|bool
var_12459 = relay.var("var_12459", dtype = "float32", shape = ())#candidate|12459|()|var|float32
var_12460 = relay.var("var_12460", dtype = "uint64", shape = (42,))#candidate|12460|(42,)|var|uint64
var_12461 = relay.var("var_12461", dtype = "uint64", shape = (630,))#candidate|12461|(630,)|var|uint64
output = func_12456(var_12457,var_12458,var_12459,var_12460,var_12461,)
func_12462 = relay.Function([var_12457,var_12458,var_12459,var_12460,var_12461,], output)
mutated_mod['func_12462'] = func_12462
mutated_mod = relay.transform.InferType()(mutated_mod)
const_12583 = relay.const(-3, dtype = "uint64")#candidate|12583|()|const|uint64
var_12584 = relay.var("var_12584", dtype = "uint64", shape = (3, 1, 7))#candidate|12584|(3, 1, 7)|var|uint64
bop_12585 = relay.bitwise_or(const_12583.astype('uint64'), var_12584.astype('uint64')) # shape=(3, 1, 7)
func_6776_call = mod.get_global_var('func_6776')
func_6781_call = mutated_mod.get_global_var('func_6781')
const_12596 = relay.const([-9,7,5,-5,-8,-7,-10,-7,2,8,10,-4,-9,-2,8,-2,-8,5,2,-10,-2,-1,1,3,-3,9,1,2,-8,4,-2,3,5,5,9,-8,-2,5,8,9,1,7,-5,3,-5,-9,3,-9,1,6,9,3,2,9,6,-1,7,-10,-9,4,-9,-3,7,1,-5,-10,-10,10,-2,3,-6,-6,4,-5,-8,9,4,-10,-3,10,9,-2,6,-2,-10,8,-9,9,2,-6,-3,-10,6,-9,-2,-5,-3,-9,-1,-7,3,-9,2,6,3,6,7,-6,-5,-10,-6,-7,5,7,-6,1,10,4,9,7,9,10,7,-1,-1,-9,-7,7,2,-10,-8,8,2,-1,-9,4,10,-8,-2,-9,-9,1,5,-9,-1,3,-3,-9,-2,-5,9,-3,-5,-5,-7,9,5,3,9,-6,5,2,-2,-3,1,7,9,-8,8,-1,-2,-2,-4,6,1,6,3,5,8,10,-8,-9,7,-1,-3,-2,7,-3,-1,6,2,9,7,1,-2,5,9,6,3,1,-4,-2,-8,-3,5,2,-1,-3,5,-6,-6,-8,4,1,1,-3,6,5,-10,7,-8,-3,2,-7,-1,-5,-3,3,6,5,7,-2,3,9,8,9,4,2,7,2,-2,6,-1,3,3,5,-5,-5,6,2,-9,-7,10,-9,-1,-6,10,-10,-2,-6,-10,7,10,4,5,8,-4,6,-8,-4,6,4,3,-4,-5,-2,-3,-10,2,-9,-9,-10,5,8,1,-2,3,10,8,-3,-8,9,5,-6,-5,-3,-5,-7,8,-2,9,-5,-10,8,-1,-2,-5,2,-2,6,-7,-10,-1,1,-2,10,8,2,2,-7,-1,4,10,6,6,7,-3,4,-4,5], dtype = "uint16")#candidate|12596|(330,)|const|uint16
const_12597 = relay.const([-0.870965,2.822656,-2.836417,0.149561,-0.884341,4.136868,5.677414,-3.889938,3.014473,9.930118,6.995862,4.416948,-2.203793,6.622819,-0.575616,-0.982030,9.052975,8.907760,0.092740,9.030974,6.698675,-9.844256,-5.477332,1.085301,5.358502,7.880521,-4.160742,-9.852768,7.014453,-2.462068,-5.964756,-0.992613,-3.009912,-5.695589,-1.182868,1.579825,-1.082363,0.618459,-1.097690,-4.069238,0.987732,-0.121288,-6.415301,-0.434939,9.333927,-1.761329,1.734907,5.530382,-8.501308,8.156689,4.080525,-9.525452,9.964218,-3.362202,-2.390251,8.984983,-8.419209,7.067534,-1.614744,-8.669477,-9.488166,-7.591940,7.796211,5.224749,0.325763,0.009780,-9.156793,-1.243842,5.125908,5.980838,3.609640,5.209567,3.584336,-0.478820,-2.616182,4.102007,5.162678,-3.019323,4.290702,-2.114898,8.316270,9.463964,8.338200,3.640354,-8.194134,2.347584,3.086552,0.123323,4.597224,0.300358,-9.486715,8.220735,-0.502440,-8.064952,7.839994,-3.433131,-9.767399,-0.493993,9.733704,-7.414261,7.196467,7.682847,-6.014436,6.721728,-2.496427,2.751128,8.282320,4.847939,6.222750,8.995840,-5.089839,4.719072,8.944106,2.039701,8.230910,-6.248723,6.728873,4.829508,-1.954043,4.887355,7.696881,1.991893,7.566183,-2.630795,-4.160071,-7.237480,2.534403,-6.144267,7.222247,9.385247,3.717585,4.502007,0.862444,1.384766,3.585917,5.715344,5.877383,4.242329,1.200049,7.492196,1.102334,-7.061248,5.419022,6.436065,-6.311205,8.725005,-6.363560,-8.960382,-2.086429,2.174038,2.362108,-0.461811,7.942248,0.989693,-0.009124,0.698468,-9.529877,-2.582080,-7.559203,7.635557,4.724056,-2.146574,8.451180,8.434012,-6.554701,-0.387639,0.284858,2.211045,-4.778771,5.168418,9.920803,6.876339,7.948084,-0.733750,3.403702,-2.383136,-7.210036,3.085391,-8.818590,6.310471,7.561106,-8.466918,8.171323,-9.978340,-0.471574,-4.750905,-2.643875,-8.275466,4.092114,0.499857,-1.297030,9.670013,-1.941136,-4.127783,-3.718179,-6.823315,2.489017,-7.990522,-4.956183,9.762288,5.380680,-1.911963,8.211643,0.250853,2.192194,0.675336,-0.869518,0.797821,1.502244,7.997765,8.867394,-2.415910,-6.998442,5.153288,5.978474,-7.281425,-2.643734,-5.128307,8.144566,1.057573,-0.685696,-2.503599,6.059864,4.458504,2.018967,-2.551658,-5.481107,-7.401664,-5.133134,7.011602,-8.387275,-4.455354,7.162461,-6.207621,-6.360787,6.417761,-4.047177,3.985134,4.708969,7.527656,-4.680439,-0.937305,-6.012987,4.736500,-1.543096,-6.793110,-6.011537,-5.663541,9.436524,-2.644238,-1.077610,-5.796225,9.084179,-6.121998,-5.022748,-0.703907,-5.810586,-1.784978,3.004471,3.006056,-8.736643,-0.746867,-3.052408,-1.077720,5.258227,8.732423,3.923587,-1.593008,6.483343,0.730692,-9.412473,-2.246272,-7.470663,7.070018,2.002668,-7.122370,-0.818400,-9.311486,9.306331,-6.729559,-8.172180,-9.316651,7.074758,-4.701663,0.982936,0.490348,3.060885,-5.550774,-8.335102,1.897686,-1.551197,5.411364,-0.678484,0.954753,1.744601,-2.184183,4.459448,5.860002,-6.437361,-0.709449,9.069735,1.763405,7.562571,0.790369,-6.394096,8.098706,-3.440772,9.448434,6.200423,-7.437854,2.616557,-3.222318,7.361791,3.097861,3.880574,0.335727,2.998433,-4.677658,0.469076,-6.142287,-1.908494,-2.201718,7.516263,-8.183069,8.158489,8.090409,6.353664,4.122316,4.480239,-0.833652,-4.772942,1.217038,8.964932,8.800218,1.362349,-8.011637,1.313838,-7.665591,-8.316178,4.077604,7.208068,-1.667490,-2.496160,6.546259,8.528317,6.289624,-7.436209,4.946889,-2.693268,-7.496673,4.397823,6.720455,7.517926,0.750007,-0.867798,7.714687,9.583420,7.359059,-0.338842,0.548589,-3.334018,4.896239,7.615778,-2.820899,6.359278,-2.265918,9.113108,-3.147231,3.613550,6.867776,-4.517501,-7.724322,-4.593726,-8.326255,-4.299600,-3.766182,-9.806684,0.425426,8.189229,2.074248,-2.900618,0.170883,4.364442,2.811095,2.467920,6.994010,0.650561,7.577399,7.685228,-1.667775,9.199749,-7.568686,7.236070,1.970369,-5.675450,0.940642,-4.590725,-6.614728,-4.897627,4.992344,-6.873868,-3.282759,-7.756471,-7.737003,6.562766,8.601124,5.982111,-2.160909,-2.199156,1.114579,-4.454765,4.780526,4.892013,-8.950244,8.602921,1.144089,-0.017593,-8.604531,4.852746,-8.327132,8.760301,2.509632,-9.707591,3.749960,-2.788484,5.088547,-4.229717,4.314184,-9.897832,1.462993,4.274612,-1.758326,-2.844738,-7.041715,7.583792,-5.688642,0.519442,8.955130,3.168424,-8.740180,-1.681566,-9.027222,-6.425732,-0.729189,-1.765452,5.719222,2.660819,3.320230,-2.239780,2.566823,7.533733,-2.135226,-1.359943,-6.549736,2.854465,8.624906,-6.000971,-2.926300,7.491414,3.347393,-5.938122,-7.301549,-6.109109,-9.103245,2.654264,-5.236549,9.026649,7.686533,6.030661,-4.562425,-4.592860,-8.872425,8.848211,-6.870065,4.768110,-0.991925,-5.214917,8.604694,7.961459,4.010946,-5.759053,1.800668,-5.475298,5.001689,-2.595663,-4.501971,2.381776,0.036385,6.590083,3.085266,2.486995,9.245627,-6.876681,5.737374,-1.990569,6.191878,-4.393951,-7.269403,7.409872,-8.127556,7.504841,3.831470,6.031864,-2.822632,-4.242075,-3.125990,4.425005,6.995759,-5.633068,6.660000,9.325959,5.349014,9.617835,-5.998898,0.090879,-9.624681,-9.014286,4.721055,-8.784066,-0.159544,-8.903053,9.168059,-5.937878,7.746943,1.599346,5.362052,4.859992,-9.347441,6.397272,-8.664109,-9.571320,6.054318,-3.091236,-7.463280,-1.461092,4.438846,7.100633,0.807445,2.178940,2.402825,3.642521,8.300372,7.935587,-3.045226,-5.103291,-0.981458,6.818773,5.968328,-6.922042,0.550974,9.774140,1.059068,6.784871,-9.104215,-0.213564,3.980270,5.630061,-7.304905,-5.296723,0.628623,1.981114,1.302442,1.746876,-8.743198,8.018407,5.747818,-3.535744,3.474929,9.280076,-1.495829,6.162518,7.486096,-8.229524,-3.345122,-3.722770,-4.153192,4.994229,7.732219,-9.582931,-8.129161,8.369161,-4.434782,9.988624,8.328522,-2.439421,-2.107683,6.397723,-5.369223,5.932915,-2.818430,-3.927033,-9.131443,8.747753,-1.069157,7.938782,6.967176,-7.224510,2.400492,8.138793,-4.980733,-6.217444,-3.780076,0.449644,-4.429667,3.437290,-2.695054,1.554718,2.247305,-5.857811,-7.538731,-7.965395,-4.095650,-0.140326,-4.444503,-5.735484,5.939190,0.384949,-3.484005,-4.944662,-4.231134,-7.234751,9.212114,4.001124,-3.566563,-5.761300,7.793739,-8.645196,-9.515171,5.868371,-0.222272,4.305927,3.664791,7.330343,7.600822,-0.462858,6.209305,9.306736,-2.171156,9.354712,-5.628105,8.784302,2.855126,-7.686522,-8.660229,-0.352629,9.568937,-5.736271,9.833962,2.846335,3.907418,-9.246376,-6.243238,8.366354,-1.926266,2.072039,7.963045,-4.083680,-9.535254,-6.246214,2.598140,1.370075,-6.261729,1.839338,-8.065399,6.718332,-7.487323,-3.127396,7.130662,2.479501,5.051184,-1.553787,6.323263,2.597907,8.795855,5.764720,-3.006774,-6.079728,-1.137724,-4.168596,-9.220048,7.835046,0.287213,2.214684,2.970377,-6.350934,7.067900,6.665321,-6.088376,-7.105393,-4.056663,-9.621963,-3.490136,-4.273235,-4.330234,9.136567,-3.657949,7.573752,1.824922,-0.478296,9.227583,4.612221,0.391768,0.395670,4.376373,-0.811988,4.853067,-6.747216,1.612307,2.243494,-4.580814,-6.782585,8.949260,-4.924075,-9.046540,4.146132,-2.559095,-3.612639,-4.220284,6.811346,7.788530,6.854983,-5.803502,-7.475052,-0.486328,5.454754,3.938501,2.368524,7.993335,8.047148,-4.833963,4.960563,7.711615,1.066172,5.740036,9.111550,-3.819297,-9.035823,-3.668090,-9.621692,-4.421214,4.862946,8.238800,-1.747890,9.017107,-7.548050,-6.612338,-7.534546,9.543495,8.456500,-6.684242,7.380048,-0.063052,7.636135,-0.190431,1.950807,3.710333,-1.642304,-5.741861,3.811939,-4.147570,4.221488,2.910858,-8.384441,5.418177,0.454106,-5.072889,-5.544591,-2.366145,-3.590244,0.715339,2.267710,-3.633140,7.980818,-4.026052,-0.368380,-2.343220,-0.573397,2.104895,-2.951156,-8.669026,-8.496701,-7.503682,1.310462,-9.684186,-9.974846,-6.927763,-9.452029,3.843333,6.352326,-0.798555,5.681791,6.148628,-8.839194,-7.962715,-9.955085,9.127605,-6.463147,7.064758,-9.421102,3.634991,-3.603441,1.494194,-4.200074,-2.844850,-6.904438,-1.994878,-2.352447,7.132692,-5.936745,5.763425,3.907946,-7.582743,6.968359,8.860620,0.812484,-9.659987,-1.860332,9.178224,-7.325845,-2.048112,-4.987062,-8.966399,8.012422,-5.571724,-7.896280,-1.085874,-2.261468,5.413511,-7.203366,4.423969,8.447752,3.111222,1.643285,-3.970200,6.125309,1.276096,0.358251,-1.224500,5.594880,4.403120,-3.844296,2.051806,-8.498227,-0.417296,-3.192618,-1.388933,9.503020,1.762567,-7.436678,2.823614,3.155221,-2.714041,-2.440398,7.551362,1.921108,0.271396,-6.574508,-2.002505,7.381783,1.618804,-9.562950,0.762785,-6.627356,1.360627,8.874324,-8.232145,8.829862,8.171342,6.061775,9.972486,6.371540,-8.020412,-1.958106,-6.546436,-3.791914,7.340131,-1.274459,-8.125229,8.627800,7.830948,-8.855460,3.666709,-6.713069,-1.056613,0.146892,-6.156355,-2.928716,-2.742156,1.972300,8.800988,2.686592,6.305592,4.786253,-1.898046,8.351483,1.139397,8.316668,1.510144,-2.222589,5.278804,8.132019,-0.009278,-9.569652,-2.288101,-9.311314,6.546091,-0.436593,6.401213,7.684407,9.515219,4.786513,-0.069140,1.661248,9.929808,3.271210,-1.441330,-3.017029,7.528124,9.625999,9.955316,6.884890,8.732919,6.911261,6.046037,-9.698989,9.290268,-6.278452,-6.531948,2.423937,5.543614,-2.759425,5.019953,-8.977776,-7.542618,8.766053,8.929013,-5.645638,-7.568225,6.905282,-4.662811,-9.507047,-4.866576,-2.070505,2.481472,-3.634020,-7.945933,-1.094915,4.599684,-6.105591,-4.327666,2.501144,-9.134461,4.973109,7.802125,9.772935,-1.900227,8.410201,-9.746261,-9.702349,1.811574,-8.941373,4.015897,-4.765867,5.726168,-5.935407,-3.856910,-5.361977,-2.494718,5.602006,-5.673457,9.913117,6.942935,4.642625,-2.705339,4.103239,-2.850246,-5.193479,-9.781660,9.782501,3.394023,5.329892,7.777558,3.953598,8.542196,-9.432746,9.679150,5.074314,-8.064119,-3.132119,-5.187847,9.772903,9.658490,-9.993224,-5.508405,4.469480,-2.139590,7.956832,-0.745794,4.569094,4.247007,-7.749335,7.421394,6.112977,-6.604955,4.562033,1.639880,-6.812552,-8.477232,-8.506021,-1.747935,-1.036821,9.448620,-8.483493,-0.675565,9.010925,7.147930,-3.429306,5.946076,9.412330,6.039010,-0.550197,7.022725,5.161369,-8.137792,-0.072398,-0.556762,2.300477,-9.555408,0.644254,7.360830,-2.847580,-6.946506,5.147980,9.663960,-1.913784,0.727322,7.072236,7.325821,-7.734318,8.867554,-1.084612,-8.072311,6.757498,4.641364,0.552522,8.105322,-0.749122,0.245184,-3.463097,-6.351176,3.352109,3.371962,-9.143710,-0.778942,-4.123000,0.992279,0.313017,-2.774379,-5.790955,6.374768,-2.738833,8.854391,2.790635,6.986213,9.905950,-3.744273,4.462980,-2.333551,-4.722767,5.539551,-0.189263,4.426426,-5.276636,-5.166520,3.923993,-8.681578,-5.349948,-5.199089,-2.515858,2.928446,9.789232,5.548518,-6.714310,-5.360023,-0.624074,5.634276,-0.240262,-5.138684,5.687177,5.815911,-9.235762,-8.779709,-0.822755,-7.867773,-6.901608,-3.973093,3.275631,5.196018,2.208985,-7.988786,9.588464,-2.569533,-2.152719,-4.978496,3.972497,9.594693,7.767356,9.789597,-5.149165,4.692690,6.899133,4.111083,7.303745,-5.387185,-1.210478,-1.068427,9.572166,-6.310210,9.106299,5.849543,-2.089244,-4.024041,-6.113249,8.502200,-9.602165,-5.331866,1.354051,-3.892498,-2.619501,6.513756,-5.724284,-6.117295,0.729868,3.241458,8.714943,6.939292,9.111093,8.304498,2.350998,5.944222,6.916949,-9.764997,8.043005,3.287056,3.546505,-5.468668,-7.773683,3.634665,7.730876,-2.176037,2.660291,9.849330,-4.074416,2.036723,4.951205,8.909051,-1.325974,6.747558,-6.936380,9.289877,-7.580072,4.645362,-9.417927,-3.716294,-7.116239,-7.556877,-1.455377,-4.759255,-5.845193,7.569852,-6.585517,9.322545,-7.468090,-7.814569,4.946136,-6.408445,-5.230614,6.639082,8.763873,-2.316438,-3.388164,4.182414,-8.152115,2.946036,6.005702,8.708111,0.913796,-2.094036,1.961287,0.825587,-5.600701,-0.338054,2.703279,1.214655,6.183933,-2.761671,-5.886416,9.019259,-7.066024,-9.873649,3.155399,0.971759,-6.455711,-3.147450,9.424611,-4.245442,7.885992,-4.634328,-2.619833,8.111514,9.553362,-5.549032,-2.732961,4.404820,-1.439204,-2.694872,8.391320,0.268460,-2.800204,0.737339,9.532259,5.665197,6.513192,1.233609,-9.288781,9.557249,0.657798,2.615456,0.387628,-2.653489,-4.091035,6.518974,-9.945692,1.738448,-3.616811,-2.149872,6.253387,2.447009,5.187613,-7.753401,6.973579,-6.098844,3.859644,-5.477982,-9.719757,4.348291,-8.263287,-9.780480,2.689182,7.797770,-9.017427,6.753586,3.744690,-4.338101,9.744716,-1.826908,0.117595,3.802108,1.345404,9.997049,-3.966318,-4.493784,-9.527929,-5.201805,3.449305,1.289870,7.742999,6.774402,6.878602,-3.276490,-6.260910,-5.766256,1.356689,2.945422,0.141554,-0.255212,9.336074,-0.545102,5.571589,8.025299,-2.943334,-2.706038,2.856738,8.753458,-6.029542,6.795441,-1.485705,-6.408049,-1.389589,-6.441004,-3.228626,1.780768,-9.230636,8.630171,-9.315623,-6.723999,-5.326509,0.138896,-0.066117,-1.141874,-4.849491,9.335249,7.707203,-0.239171,7.085576,-1.940093,5.991153,0.851377,5.794191,9.975560,7.866914,0.626344,-1.742077,5.997025,9.375376,4.001037,-2.454512,-2.232793,-9.190535,3.142571,-4.538295,-7.030161,4.427883,0.919566,-7.775993,1.050164,-2.065178,9.569919,5.811850,1.489625,7.691508,-3.041910,5.734200,5.974205,2.191313,-2.725877,-2.054926,7.258766,-9.635153,1.096223,1.876089,1.655180,3.203637,-7.780571,8.975766,7.208660,7.435752,-8.349377,-4.259731,-7.958169,-6.494756,3.588910,4.375170,9.499674,4.607420,3.275949,8.653226,-6.120258,6.775671,9.699368,-4.302605,0.695491,-1.929942,2.433472,-4.223538,-7.864259,-2.417933,1.877432,-5.564400,5.932589,5.141238,-4.028713,3.609977,1.777659,4.123595,-6.850447,4.217969,3.847222,6.165836,2.300276,1.060788,5.955403,8.644305,2.511185,2.641872,-5.669225,6.479059,7.009634,7.861004,-5.568981,9.122531,1.510687,-1.591410,-4.093530,0.505388,3.552870,2.165761,-2.418858,-9.296552,-6.177454,-1.349687,-7.939985,0.633983,2.503180,1.422922,7.776298,-2.197079,5.322885,-1.421192,-0.863537,4.606300,-0.114818,-1.423177,-6.103295,-6.992929,-9.433303,6.987828,0.493340,-4.475229,4.765617,-2.851525,-6.245182,3.461691,7.993695,8.341873,1.631788,-3.915278,1.211817,-4.631201,8.236337,-9.741056,-8.794389,-7.547316,-9.131722,-1.226777,-0.486771,2.165225,0.924593,8.953075,-2.481405,-5.673836,7.514413,4.694685,-7.019873,-0.684813,-9.257972,6.730218,-9.650763,-0.671321,9.023656,9.196545,8.049820,-9.634261,1.848133,-2.127085,8.700290,-9.513240,4.349895,1.356395,6.603630,1.553842,5.319836,-8.753039,-6.607771,-2.592481,8.491139,-3.674484,-6.837110,2.701594,-6.305411,2.064726,0.045789,-8.637686,7.504253,-1.884900,-7.214911,6.688382,-7.089918,0.445279,-4.505490,-5.311109,7.722010,3.276646,-9.951113,-8.053898,-8.853860,-3.470231,2.316570,-0.061613,-4.279405,6.407441,-1.529729,-5.403576,0.930398,1.274775,-4.866098,4.337559,-5.608483,1.976657,-4.965362,2.074310,-0.042886,-2.240554,1.151458,-7.826931,1.171305,-4.906449,-2.966362,-6.276684,-9.610125,-7.219823,-9.759457,9.428903,-2.523198,3.944648,-8.622731,6.949766,-0.536185,-2.470685,-5.537621,1.545976,-3.875412,9.198630,6.080947,-4.013700,6.934126,-0.017804,9.603872,3.281142,-9.080646,-9.439326,8.281538,5.146430,9.497850,1.458648,7.034489,5.338248,-0.125038,-4.298523,-0.985956,-4.476744,4.415461,8.884463,-2.526172,-8.687699,1.679411,9.595620,-1.617367,-5.825920,-9.541845,5.771818,7.932881,4.539887,3.024893,7.111672,8.284363,-6.634002,-7.029751,6.672933,-6.406524,1.026668,-2.896897,-4.734920,-8.588707,-5.680871,9.780216,-7.715867,-5.237640,-2.914433,5.555312,4.196635,0.830654,-5.097555,-4.591399,-2.212424,2.520478,-1.395041,-6.825399,7.117308,-1.591576,2.413765,7.923079,-0.339569,-2.418407,-2.775162,-0.122839,-8.783840,2.765557,9.169728,-6.851428,-2.542271,3.531034,0.988356,6.459788,-7.488784,-5.706903,6.525262,7.567614,1.820679,5.641434,-6.429909,5.092653,4.070494,0.059177,-6.807993,3.930158,0.464433,-9.452231,-9.386332,1.908767,6.081242,2.065234,-6.857971,-2.980924,-8.863255,3.946273,5.236751,9.234119,4.806857,8.922894,-5.207013,-6.424942,2.755572,-4.729512,-0.148651,3.720721,2.942493,6.364443,9.162002,0.654905,2.946453,-6.902823,7.010946,0.084001,-0.564256,8.523347,0.992004,0.666622,-2.586191,6.636745,2.217923,-6.493699,9.138944,-5.042455,7.081460,-7.061416,-5.778332,4.385344,-8.361954,-7.572870,0.044520,8.323263,4.090384,2.882686,-0.286039,2.335672,1.062523,-1.572422,5.404322,-7.618198,-5.510006,2.634677,1.743584,-2.976248,6.458380,6.232304,-4.375025,-1.747925,6.998238,6.684315,-5.350456,4.391727,-7.382091,-5.621600,0.364899,-4.845787,5.143040,-7.074271,-2.121730,-5.142767,-7.695360,-1.609703,-8.487008,-6.755137,1.856092,7.710548,-9.929733,5.838864,-6.565761,-2.524878,-8.083688,9.815609,-0.870662,3.336253,-0.060141,2.829627,2.244951,-5.114018,-4.450275,3.547300,-3.307567,5.158931,0.552932,-9.308574,-1.895564,2.736538,5.510361,-2.958225,3.779290,6.138441,3.310686,-3.989565,-9.663361,-7.199058,8.901765,-1.067256,-7.461158,7.637416,2.273779,7.702709,-1.140255,-7.791668,6.038155,-7.299202,-6.653130,-8.839312,-1.438488,-9.433695,5.508220,7.509212,-6.476269,4.130962,9.570257,0.725769,-5.874190,-3.473443,1.875774,-1.172656,4.630376,2.195272,-6.407391,2.652935,-2.723979,-4.813895,-2.950074,0.483250,8.867022,1.803106,4.622635,0.663942,6.567605,-3.848524,5.684342,8.720174,2.638549,-6.491043,-2.785484,-4.363714,-6.444942,7.524620,-4.405992,7.271176,8.744967,-8.213453,9.300519,-9.511061,4.747836,-9.139694,8.645480,1.497043,-0.839556,9.741164,5.092299,-0.814417,-2.084256,-4.848421,-4.618373,-5.313337,-6.808096,-6.649735,7.007572,-6.996320,0.643269,8.548155,-2.217634,-1.521991,-9.153472,-2.905328,0.847640,0.070694,-2.866129,2.482051,-5.811131,-9.993915,-3.026738,-3.270877,7.276263,8.812763,2.971634,9.339805,7.525975,0.662182,4.045087,-7.942484,-9.462549,-7.497484,7.193850,0.677057,-5.318390,6.633758,-5.056602,-5.842594,-9.130948,-8.633436,-0.991609,-9.004940,5.787002,9.600306,9.637722,-6.751827,-4.319782,-4.496674,-8.655834,3.097810,6.257921,5.562680,-9.070602,2.929206,0.717475,9.963189,7.839349,-4.560838,7.640783,-4.610788,5.879737,-8.859649,9.919059,4.123916,-3.853678,-4.736527,2.479976,6.515492,1.210771,0.313820,-2.626610,-0.502970,-7.172509,4.198732,7.569258,-7.895643,-9.547869,-2.245543,4.255730,7.525575,-2.906295,3.923332,3.933193,0.366935,4.447976,-0.962422,0.768582,5.942452,5.919781,5.472532,-1.415171,8.259742,-0.743840,5.561782,8.962847,4.038595,-2.648644,-9.042323,0.943459,3.763992,-9.234840,2.255346,-4.060062,8.136935,1.752967,-3.470253,-3.753689,-6.143815,4.390557,-4.923131,-2.829966,-3.640546,-0.790518,-0.245570,0.318381,-0.927707,8.788518,8.948723,-8.603260,4.505513,-9.894914,-6.696627,4.398790,5.736063,-5.443024,-9.162974,-5.138682,2.497098,3.536429,-3.110119,7.450963,-0.264721,-6.927955,8.658110,-7.837639,-5.281565,-6.796000,8.500039,3.458554,8.197510,-4.880619,-6.412240,-9.200813,9.511694,-3.226659,-6.458059,-8.928127,-9.284518,9.582929,2.333981,6.225651,-7.483115,-5.016107,9.541531,-1.631471,5.411403,-0.091390,4.025680,-5.160379,-5.428958,2.593176,-8.758170,5.669750,-1.410627,-3.955328,-1.520701,-6.334123,-7.150583,-6.029436,-9.354865,-2.843386,0.727298,-6.766462,5.007449,4.159459,0.343526,6.806089,-5.805927,-7.735199,5.705704,8.686793,-1.197763,-9.285939,-9.475611,1.690095,9.543393,2.350319,-7.506534,-5.955885,-5.507635,-8.896050,-1.736138,3.880841,-8.018075,1.845993,0.943910,-0.775333,-8.635063,-9.589373,1.195390,-1.632150,9.243237,-5.552294,9.589014,6.666254,-4.108264,8.546041,3.612019,-6.782555,-3.695084,3.566373,-9.242094,-0.979961,-1.847669,0.818600,-6.798081,1.446969,8.371870,1.872612,-7.310437,-1.844567,-0.503804,0.464330,0.372787,-0.658500,2.019779,7.071980,8.607669,0.518478,-5.877333,5.227271,-6.977343,-1.993203,-5.706536,-3.994964,-0.073296,-8.149758,-2.235970,4.588877,4.660594,5.856428,4.776650,-0.160966,-2.130988,6.381352,-3.577232,8.609916,4.425581,7.439909,-3.774623,-1.663373,-5.234319,8.544065,-4.887307,-6.364638,-1.497878,-4.411827,-8.462401,-7.552007,-0.207003,1.984845,0.341382,1.817472,-9.792408,-4.925281,-4.297650,-8.723432,0.748505,7.107521,-3.139668,2.035996,-8.138313,-0.972821,-9.503627,3.145141,-1.302535,-3.168807,-6.203429,-0.875851,-5.804603,9.647744,8.130937,7.648158,5.426944,-2.147146,7.165153,6.819369,-1.136663,-3.980843,-2.077196,9.955111,7.038228,-1.597578,-4.800460,-8.149890,-8.886127,1.238213,3.413316,-2.678690,-9.112607,-8.906993,9.366424,8.009920,-0.375566,-6.910152,6.395217,8.903148,4.294588,-7.235769,8.161693,-8.029758,-8.662639,4.994342,6.249066,2.603021,0.689003,2.084462,7.014496,-2.724250,-8.561964,-9.898931,-7.519708,-4.149303,-3.330502,1.052431,-4.193128], dtype = "float64")#candidate|12597|(2100,)|const|float64
const_12598 = relay.const([-4,-1,10,-9,3,2,-3,-2,-10,-4,2,-5,2,3,2,8,-2,-6,-6,-9,-7,2,-3,-8,3,1,-9,4,-2,5,-4,1,1,-8,-2,-7,10,-7,-6,-6,-9,6,1,-1,6,10,8,-6,7,-7,-3,-8,-4,5,-3,2,-8,-2,-8,-6,3,-4,5,2,-6,-1,-3,-1,5,8,-9,-2,1,-7,-10,-3,7,4,9,-4,-2,3,5,4,-2,-9,-5,9,6,-4,9,7,-9,7,-6,-3,7,6,10,5,-2,-4,-7,2,-8,-10,-8,-4,10,4,-4,4,1,-5,-8,6,5,9,-4,7,-1,-1,-6,5,6,-9,6,-4,-3,-9,-1,5,6,10,-4,4,-4,4,9,5,1,-8,9,-4,-2,7,10,1,-5,8,10,5,-6,-3,2,-10,3,-8,7,7,4,5,8,-2,9,-2,-1,-4,-8,1,4,-1,-7,-1,10,8,-4,10,10,-4,-3,9,-3,-2,-9,-1,4,2,-2,10,3,-9,-10,8,2,-1,8,10,3,2,-7,-7,-8,4,1,3,-9,-10,3,1,2,2,-1,1,8,-10,-10,-6,5,8,4,-2,6,-4,-4,6,-6,-7,-5,-3,-4,8,9,2,-5,-1,-2,4,7,-8,-4,6,-3,6,-1,-10,3,9,-3,-7,-1,-9,-3,2,-4,10,3,7,1,7,-4,7,7,7,-6,10,5,10,-4,-8,1,6,8,-3,5,-8,-6,-4,2,-3,-8,-6,2,-10,8,-7,-10,4,-4,-4,8,-10,9,-7,7,-9,-5,-9,3,-5,1,-10,5,-6,5,-10,4,-9,-3,-5,-8,-9,-1,2,-10,-5,-1,2,2,-6,10,2,-3,-8,-9], dtype = "uint8")#candidate|12598|(325,)|const|uint8
call_12595 = relay.TupleGetItem(func_6776_call(relay.reshape(const_12596.astype('uint16'), [5, 11, 6]), relay.reshape(const_12596.astype('uint16'), [5, 11, 6]), relay.reshape(const_12597.astype('float64'), [2100,]), relay.reshape(const_12598.astype('uint8'), [325,]), ), 1)
call_12599 = relay.TupleGetItem(func_6781_call(relay.reshape(const_12596.astype('uint16'), [5, 11, 6]), relay.reshape(const_12596.astype('uint16'), [5, 11, 6]), relay.reshape(const_12597.astype('float64'), [2100,]), relay.reshape(const_12598.astype('uint8'), [325,]), ), 1)
func_1892_call = mod.get_global_var('func_1892')
func_1895_call = mutated_mod.get_global_var('func_1895')
call_12605 = relay.TupleGetItem(func_1892_call(relay.reshape(const_12583.astype('float32'), [])), 2)
call_12606 = relay.TupleGetItem(func_1895_call(relay.reshape(const_12583.astype('float32'), [])), 2)
output = relay.Tuple([bop_12585,call_12595,const_12596,const_12597,const_12598,call_12605,])
output2 = relay.Tuple([bop_12585,call_12599,const_12596,const_12597,const_12598,call_12606,])
func_12608 = relay.Function([var_12584,], output)
mod['func_12608'] = func_12608
mod = relay.transform.InferType()(mod)
var_12609 = relay.var("var_12609", dtype = "uint64", shape = (3, 1, 7))#candidate|12609|(3, 1, 7)|var|uint64
output = func_12608(var_12609)
func_12610 = relay.Function([var_12609], output)
mutated_mod['func_12610'] = func_12610
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13132 = relay.var("var_13132", dtype = "uint64", shape = (2, 13, 14))#candidate|13132|(2, 13, 14)|var|uint64
var_13133 = relay.var("var_13133", dtype = "uint64", shape = (2, 13, 14))#candidate|13133|(2, 13, 14)|var|uint64
bop_13134 = relay.subtract(var_13132.astype('uint64'), relay.reshape(var_13133.astype('uint64'), relay.shape_of(var_13132))) # shape=(2, 13, 14)
func_11386_call = mod.get_global_var('func_11386')
func_11389_call = mutated_mod.get_global_var('func_11389')
const_13149 = relay.const([3.456132,-0.167109,2.248185,-1.190518,9.446272,7.763952,6.075344,4.503193,7.540628,-5.887387,-3.660044,2.254875,-1.121214,-5.649438,-7.952800,-5.933213,-9.296563,-6.988892,5.346784,5.920642,8.394542,5.866773,-9.610531,9.365177,4.950029,-4.616986,2.543871,-9.782894,-4.570087,-0.002256,-9.936464,-2.904247,6.464890,8.288545,4.208252,7.107410,8.289314,9.272874,4.812830,0.126829,-6.461080,-1.553593,2.405808,-8.819913,6.172026,-0.786329,3.282994,-7.544179,-5.823357,-0.869854,3.243182,-8.886945,-3.927775,-5.815048,-7.075358,-1.481163,-3.789953,0.519093,5.644649,8.028815,-0.995519,2.027445,-8.741608,-6.737770,3.690800,4.791402,-3.469379,4.718339,3.198906,5.147517,4.494944,4.117476], dtype = "float64")#candidate|13149|(72,)|const|float64
var_13150 = relay.var("var_13150", dtype = "float64", shape = (576,))#candidate|13150|(576,)|var|float64
call_13148 = relay.TupleGetItem(func_11386_call(relay.reshape(const_13149.astype('float64'), [8, 9, 1]), relay.reshape(var_13150.astype('float64'), [576,]), ), 3)
call_13151 = relay.TupleGetItem(func_11389_call(relay.reshape(const_13149.astype('float64'), [8, 9, 1]), relay.reshape(var_13150.astype('float64'), [576,]), ), 3)
output = relay.Tuple([bop_13134,call_13148,const_13149,var_13150,])
output2 = relay.Tuple([bop_13134,call_13151,const_13149,var_13150,])
func_13152 = relay.Function([var_13132,var_13133,var_13150,], output)
mod['func_13152'] = func_13152
mod = relay.transform.InferType()(mod)
mutated_mod['func_13152'] = func_13152
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13152_call = mutated_mod.get_global_var('func_13152')
var_13154 = relay.var("var_13154", dtype = "uint64", shape = (2, 13, 14))#candidate|13154|(2, 13, 14)|var|uint64
var_13155 = relay.var("var_13155", dtype = "uint64", shape = (2, 13, 14))#candidate|13155|(2, 13, 14)|var|uint64
var_13156 = relay.var("var_13156", dtype = "float64", shape = (576,))#candidate|13156|(576,)|var|float64
call_13153 = func_13152_call(var_13154,var_13155,var_13156,)
output = call_13153
func_13157 = relay.Function([var_13154,var_13155,var_13156,], output)
mutated_mod['func_13157'] = func_13157
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13315 = relay.var("var_13315", dtype = "float32", shape = (14, 15, 5))#candidate|13315|(14, 15, 5)|var|float32
uop_13316 = relay.acos(var_13315.astype('float32')) # shape=(14, 15, 5)
output = uop_13316
output2 = uop_13316
func_13324 = relay.Function([var_13315,], output)
mod['func_13324'] = func_13324
mod = relay.transform.InferType()(mod)
var_13325 = relay.var("var_13325", dtype = "float32", shape = (14, 15, 5))#candidate|13325|(14, 15, 5)|var|float32
output = func_13324(var_13325)
func_13326 = relay.Function([var_13325], output)
mutated_mod['func_13326'] = func_13326
mutated_mod = relay.transform.InferType()(mutated_mod)
var_13957 = relay.var("var_13957", dtype = "int32", shape = (10, 7, 7))#candidate|13957|(10, 7, 7)|var|int32
var_13958 = relay.var("var_13958", dtype = "int32", shape = (10, 7, 7))#candidate|13958|(10, 7, 7)|var|int32
bop_13959 = relay.less_equal(var_13957.astype('bool'), relay.reshape(var_13958.astype('bool'), relay.shape_of(var_13957))) # shape=(10, 7, 7)
output = bop_13959
output2 = bop_13959
func_13971 = relay.Function([var_13957,var_13958,], output)
mod['func_13971'] = func_13971
mod = relay.transform.InferType()(mod)
mutated_mod['func_13971'] = func_13971
mutated_mod = relay.transform.InferType()(mutated_mod)
func_13971_call = mutated_mod.get_global_var('func_13971')
var_13973 = relay.var("var_13973", dtype = "int32", shape = (10, 7, 7))#candidate|13973|(10, 7, 7)|var|int32
var_13974 = relay.var("var_13974", dtype = "int32", shape = (10, 7, 7))#candidate|13974|(10, 7, 7)|var|int32
call_13972 = func_13971_call(var_13973,var_13974,)
output = call_13972
func_13975 = relay.Function([var_13973,var_13974,], output)
mutated_mod['func_13975'] = func_13975
mutated_mod = relay.transform.InferType()(mutated_mod)
var_14491 = relay.var("var_14491", dtype = "uint16", shape = (8, 14, 15))#candidate|14491|(8, 14, 15)|var|uint16
var_14492 = relay.var("var_14492", dtype = "uint16", shape = (8, 14, 15))#candidate|14492|(8, 14, 15)|var|uint16
bop_14493 = relay.add(var_14491.astype('uint16'), relay.reshape(var_14492.astype('uint16'), relay.shape_of(var_14491))) # shape=(8, 14, 15)
output = bop_14493
output2 = bop_14493
func_14497 = relay.Function([var_14491,var_14492,], output)
mod['func_14497'] = func_14497
mod = relay.transform.InferType()(mod)
mutated_mod['func_14497'] = func_14497
mutated_mod = relay.transform.InferType()(mutated_mod)
func_14497_call = mutated_mod.get_global_var('func_14497')
var_14499 = relay.var("var_14499", dtype = "uint16", shape = (8, 14, 15))#candidate|14499|(8, 14, 15)|var|uint16
var_14500 = relay.var("var_14500", dtype = "uint16", shape = (8, 14, 15))#candidate|14500|(8, 14, 15)|var|uint16
call_14498 = func_14497_call(var_14499,var_14500,)
output = call_14498
func_14501 = relay.Function([var_14499,var_14500,], output)
mutated_mod['func_14501'] = func_14501
mutated_mod = relay.transform.InferType()(mutated_mod)
var_16102 = relay.var("var_16102", dtype = "int8", shape = ())#candidate|16102|()|var|int8
const_16103 = relay.const([[[8,10,3,-10,-2,9],[4,1,2,-3,8,-10],[-9,-10,4,4,1,-5],[-10,5,-4,3,8,7],[1,10,3,4,2,5],[-6,-7,3,-1,-7,-2],[-1,-8,-9,8,4,-1],[7,8,-1,-7,-2,-2],[-6,-5,-1,5,-3,2],[7,-6,-7,-7,2,6],[-6,8,9,4,-7,8],[7,-10,6,4,2,-2],[5,-5,-3,-10,-8,-1],[-8,-10,-4,-3,-4,1],[6,3,5,1,7,9]],[[-9,-2,-7,3,6,2],[-4,10,1,9,-9,7],[10,-8,-4,-8,7,-3],[1,-2,9,-8,1,2],[1,1,-6,6,6,2],[10,-6,-9,3,-3,8],[1,7,-6,-3,-2,7],[-3,-5,-6,1,-8,4],[6,-9,2,-4,-5,-4],[2,8,-4,-6,-7,-7],[8,10,9,-5,-1,5],[-4,-8,-2,2,4,9],[-6,-6,-6,7,-3,9],[-2,6,-9,-1,-1,-1],[-3,-6,4,6,10,4]],[[-5,9,-1,9,-3,9],[5,6,-8,9,-2,10],[-8,-8,8,-4,5,8],[-4,-9,1,10,7,2],[-4,1,-3,4,7,2],[3,8,-1,-6,-3,-1],[-5,2,8,-1,4,8],[3,3,-1,-7,2,6],[4,-10,9,1,4,-9],[-7,5,-10,-3,5,7],[2,2,-1,-9,2,-10],[-1,-6,6,7,6,9],[5,1,9,-7,3,-8],[8,7,-9,3,-2,6],[4,3,7,8,-5,3]],[[-8,-6,-10,3,-4,-9],[9,-2,1,-9,1,-7],[-4,-2,3,-3,-6,1],[-5,-5,7,9,-6,-9],[9,3,1,-10,-4,-4],[-10,7,-9,-1,3,3],[-9,-5,5,1,-3,-6],[4,-9,-8,5,-3,-3],[1,7,1,-3,2,5],[-4,-3,-3,-1,-5,-5],[-5,-3,5,1,2,-9],[7,3,-3,-9,7,6],[-1,4,7,-10,-2,-1],[9,-4,-9,1,-6,-3],[5,6,4,-9,-8,10]],[[4,8,-3,4,2,-10],[-2,4,7,7,-1,-3],[4,1,-7,-7,-1,1],[-7,-5,-5,-9,7,-5],[3,8,4,1,3,1],[-3,3,7,-7,8,-3],[-6,-10,-6,-7,6,2],[-7,9,5,2,-10,1],[8,4,-9,-9,-9,-7],[-5,-3,2,-10,-10,-10],[10,-10,-8,2,8,-2],[-10,1,-3,6,3,-6],[7,-5,-6,4,9,-10],[7,-3,-7,2,-9,9],[-9,7,-6,-8,-10,2]],[[8,-5,1,3,7,-3],[-10,-4,-5,-10,-7,10],[-1,-8,9,-6,7,-3],[-7,6,-2,-10,1,-3],[6,5,-10,9,-3,-2],[-9,1,-10,-6,-3,-4],[-9,-9,-8,-9,6,2],[-8,9,9,4,-2,8],[9,10,4,7,8,-4],[-8,5,-6,2,-7,3],[-4,8,2,-7,-7,3],[3,-5,-3,9,3,-7],[-8,-2,4,3,-4,2],[-6,-7,8,-4,-7,1],[-9,3,-4,-10,-3,-9]],[[10,3,-4,10,-7,-3],[-6,-3,-8,-4,5,-1],[-10,-1,-5,-10,-4,-9],[-1,8,-7,-1,8,3],[-10,-4,-6,6,-8,-9],[-7,8,-3,10,7,9],[9,-4,-6,4,5,1],[-7,-7,3,-7,-4,-4],[3,8,3,5,-7,-10],[7,-9,6,-6,-8,-7],[9,-3,-9,2,4,4],[-9,-1,8,-9,7,-9],[-1,-5,8,-10,-6,-1],[-4,6,3,7,-9,-8],[2,-1,-9,-4,-7,-7]],[[-3,-5,-4,5,-9,7],[-1,6,5,-6,-5,-5],[-1,-3,2,-5,-9,-3],[7,2,-8,-2,3,10],[3,-4,7,3,10,8],[5,6,-4,-8,8,-6],[1,7,5,-4,7,9],[7,4,7,1,5,-8],[10,-9,8,-5,5,-4],[3,-1,4,-6,1,2],[10,-7,-3,-4,-3,-1],[8,1,-10,-4,-3,-3],[4,-9,7,-10,-7,4],[4,-4,8,-1,1,-10],[8,-2,-6,9,-2,4]],[[2,-8,2,10,9,4],[-7,-4,8,-7,-5,-7],[-4,2,5,-7,9,-5],[-9,-7,-6,6,8,2],[-3,2,2,2,6,-3],[-9,7,8,-8,-6,5],[-10,9,-2,-3,4,6],[7,-1,1,5,6,9],[3,-1,6,4,9,-3],[-6,6,6,-5,10,-7],[8,5,3,8,-3,8],[8,-5,-7,8,7,-5],[-7,-5,4,10,-1,8],[8,1,-8,3,10,3],[-6,-1,6,-3,6,-2]],[[9,4,6,3,9,-9],[2,-3,10,10,-6,9],[8,-6,10,-5,-9,-9],[1,1,8,9,10,4],[7,-7,6,-6,8,9],[8,-6,-4,-2,-9,-7],[2,8,-7,3,-6,-8],[6,7,5,-1,1,-2],[4,-10,-8,9,2,-4],[-10,2,9,8,-5,7],[-10,-5,-6,4,2,3],[10,1,-1,-8,4,-7],[-1,6,2,5,2,3],[-8,9,2,1,-6,-3],[-7,-8,-2,-2,1,-6]]], dtype = "int8")#candidate|16103|(10, 15, 6)|const|int8
bop_16104 = relay.maximum(var_16102.astype('int8'), const_16103.astype('int8')) # shape=(10, 15, 6)
output = relay.Tuple([bop_16104,])
output2 = relay.Tuple([bop_16104,])
func_16114 = relay.Function([var_16102,], output)
mod['func_16114'] = func_16114
mod = relay.transform.InferType()(mod)
var_16115 = relay.var("var_16115", dtype = "int8", shape = ())#candidate|16115|()|var|int8
output = func_16114(var_16115)
func_16116 = relay.Function([var_16115], output)
mutated_mod['func_16116'] = func_16116
mutated_mod = relay.transform.InferType()(mutated_mod)
var_17130 = relay.var("var_17130", dtype = "float64", shape = (5, 4, 9))#candidate|17130|(5, 4, 9)|var|float64
uop_17131 = relay.tan(var_17130.astype('float64')) # shape=(5, 4, 9)
func_6626_call = mod.get_global_var('func_6626')
func_6628_call = mutated_mod.get_global_var('func_6628')
const_17144 = relay.const([[-9,-2,-1,-4,6,-10,1,10,-4,8,-10,-3,-6,-7,-10,-10,8,-3,-7,-1,-6,-9,10,5,-4,1,8,6,-10,4,10,10,-8,-6,-9,7,9,4,-7,5,-4,5,10,-7,6,2,-9,-3,-7,-1,9,-4,6,-10,-9,-4,9,6,-3,-10,6,5,6,10,9,10,1,-6,3,8,1,6,1,9,-5,-5,5,-4,-9,2,8,-8,7,-6,2,-2,-5,-2,10,-2,-4,-4,6,8,6,5,-4,-3,-9,-1,2,-1,-2,7,8,-7,-6,-9,-10,-2,-9,-2,-10,-5,-3,-9,10,4,-4,-5,10,-5,4,-3,-3,3,-1,-8,-10,-1,9,-10,9,4,6,-8,-3,7,8,-2,-4,-4,1,-8,-3,4,9,3,-9,-5,-8,3,5,7,-9,-4,-7,10,10,-7,-6,-7,6,-5,8,-9,-3,6,-4,1,3,8,6,5,5,9,4,8,-5,-4,1,7,-8,1,-5,7,2,7,-3,-3,6,-10,5,10,-9,5,10,5,5,1,-10,10,-2,-7,-9,3,-2,6,1,9,10,1,6,-7,-1,10,7,-1,-5,5,-1,-1,-1,10,5,-3,3,-5,9,-9,2,-10,-9,7,-1,2,-3,5,-10,-8,-6,9,5,10,8,4,9,7,7,4,10,-2,-8,7,-3,2,5,1,-7,-4,10,-5,2,-1,-9,10,10,2,-10,6,3,-5,1,-8,8,-5,2,1,3,-4,6,2,6,2,3,1,7,-6,-5,1,8,6,-8,-3,-9,-3,-3,-9,-1,6,10,-1,7,-5,4,8,2,2,-8,-10,6,-2,-2,-7,-1,-8,2,7,-7,-4,10,2,3,-3,3,-10,1,-7,2,-6,8,-5,3,4,6,-8,-9,10,6,-4,9,7,7,-2,7,1,4,-10,8,5,-9,2,-5,9,-8,-8,1,10,9,-5,2,4,4,2,-7,5,2,-5,2,8,-8,-10,4,-7,1,-1,-9,-10,-10,-4,1,-4,-9,-2,2,-2,8,1,1,7,9,-7,-3,-1,9,-10,5,5,-3,-4,7,-7,-7,1,6,1,5,6,-5,1,-2,-4,8,-10,6,-8,-9,10,-5,5,-8,-9,-4,-1,1,1,-4,8,-4,-5,-2,3,-9,-5,-5,-6,-7,-4,-9,8,-8,1,7,5,10,2,-10,1,-2,-4,9,10,6,-4,10,4,4,9,7,-3,-4,6,3,-5,-6,-2,8,8,7,-8,-8,4,-8,-1,8,3,-10,8,-8,8,10,6,3,4,8,8,6,7,-8,-10,-4,-10,2,8,9,-4,8,-10,6,1,-8,1,1,-8,6,-5,3,-5,-3,6,8,4,-10,7,10,1,6,-2,9,8,-9,8,-10,8,-5,-7,4,1,6,1,5,-4,5,-10,7,4,2,-10,4,-8,-2,-3,6,10,1,8,5,-9,-9,7,-8,3,-2,4,3,-6,-7,-3,5,5,-7,4,-6,-2,-1,-2,-9,-8,-10,-6,6,-1,-1,6,-8,-3,-5,-6,-7,7,-9,-6,-3,-9,9,-9,-9,8,5,-7,-6,-9,-5,-1,7,-2,-4,-7,3,2,-3,-8,1,2,1,-8,-10,-7,4,-9,5,-7,8,-10,10,-6,2,5,2,-9,7,-2,-4,1,-9,9,2,7,-10,4,8,2,3,-5,-5,8,4,8,-10,-8,-1,-3,4,4,6,5,5,-7,-5,5,-9,-1,-2,-2,1,-1,8,-5,5,-10,7,-6,1,3,8,-5,1,-9,-6,-7,-3,-9,-2,5,6,-8,-9,7,10,7,10,-4,-9,-5,-5,1,-3,-9,7,-4,-1,7,-9,-1,6,4,1,8,2,-4,8,-5,8,-7,9,-7,6,-2,10,-3,-5,-4,-4,6,-8,10,-8,8,-10,8,-6,2,2,-6,-9,-1]], dtype = "uint8")#candidate|17144|(1, 726)|const|uint8
call_17143 = relay.TupleGetItem(func_6626_call(relay.reshape(const_17144.astype('uint8'), [6, 11, 11])), 3)
call_17145 = relay.TupleGetItem(func_6628_call(relay.reshape(const_17144.astype('uint8'), [6, 11, 11])), 3)
output = relay.Tuple([uop_17131,call_17143,const_17144,])
output2 = relay.Tuple([uop_17131,call_17145,const_17144,])
func_17148 = relay.Function([var_17130,], output)
mod['func_17148'] = func_17148
mod = relay.transform.InferType()(mod)
mutated_mod['func_17148'] = func_17148
mutated_mod = relay.transform.InferType()(mutated_mod)
var_17149 = relay.var("var_17149", dtype = "float64", shape = (5, 4, 9))#candidate|17149|(5, 4, 9)|var|float64
func_17148_call = mutated_mod.get_global_var('func_17148')
call_17150 = func_17148_call(var_17149)
output = call_17150
func_17151 = relay.Function([var_17149], output)
mutated_mod['func_17151'] = func_17151
mutated_mod = relay.transform.InferType()(mutated_mod)
var_17265 = relay.var("var_17265", dtype = "float64", shape = (8, 16, 1))#candidate|17265|(8, 16, 1)|var|float64
uop_17266 = relay.sinh(var_17265.astype('float64')) # shape=(8, 16, 1)
bop_17281 = relay.greater_equal(uop_17266.astype('bool'), relay.reshape(var_17265.astype('bool'), relay.shape_of(uop_17266))) # shape=(8, 16, 1)
bop_17293 = relay.subtract(bop_17281.astype('float32'), relay.reshape(uop_17266.astype('float32'), relay.shape_of(bop_17281))) # shape=(8, 16, 1)
func_13324_call = mod.get_global_var('func_13324')
func_13326_call = mutated_mod.get_global_var('func_13326')
const_17297 = relay.const([-4.016875,-7.435205,-0.467843,8.165409,-8.151463,-4.442455,9.547394,-1.965900,-9.000083,-7.343570,-6.571574,0.610024,1.984816,7.002214,-2.840829,6.477848,7.525757,-1.286196,9.391733,4.342595,0.603903,2.473383,-1.193877,-1.644361,3.189231,-6.277679,0.860956,-4.139675,8.113171,0.688518,4.603970,-9.505848,-8.220360,-1.881243,3.832881,5.081032,1.776397,4.068416,-7.949479,2.078794,-3.435249,5.864106,6.233336,-3.849633,8.736877,-9.399679,-5.166866,5.508419,3.879702,-1.737317,5.055726,6.393429,2.049517,-4.097017,-8.159059,1.214735,-0.015410,-8.878368,-1.325898,-6.393122,-9.970023,-7.000389,-1.018618,6.893929,-4.802195,-9.625842,5.024597,-4.718265,-6.383575,-9.963929,-2.753263,-1.234026,-9.309180,-8.487342,4.231991,-0.525880,3.794166,8.751484,8.851537,0.907658,-5.690878,0.426729,6.308957,-9.962955,7.502673,-5.911217,-0.875882,-2.333903,3.482843,9.458822,9.330325,-5.634770,8.613070,-9.370935,-4.142782,-1.701233,2.468531,-2.595930,4.897957,6.628917,5.828052,3.574027,-5.759906,-2.536481,-6.942177,-8.715701,-5.281020,1.957112,-4.193630,-8.670829,5.324376,-2.616736,-8.977292,-7.449420,1.433902,-6.011554,1.198596,6.498806,1.437342,-5.697974,4.674936,-4.469305,9.066034,3.458399,3.447005,2.768997,-0.421851,-5.321079,-9.423230,9.402882,-4.340857,5.467863,9.765188,6.771341,-1.880418,-9.901801,-3.482733,0.947920,-6.667576,-7.183683,-1.395987,5.741458,0.222906,-0.803299,-1.317127,3.353387,2.162428,-2.297685,3.656425,-1.399030,3.197085,-2.730542,4.481027,-9.904884,-6.025654,0.758306,-3.871622,-9.304700,-7.655683,9.943174,-2.425114,1.999914,7.373282,-9.869666,6.202595,2.678844,4.840264,0.234200,2.782518,0.811278,-6.316587,2.792208,2.731245,-3.103642,-8.666110,-0.216663,-3.006045,-8.336397,1.994211,8.432261,4.937353,-2.005209,-6.294716,3.800251,2.575644,0.748360,-8.002366,-7.336334,-8.715248,8.244185,-2.695273,0.875214,-7.895009,9.612125,-7.473923,-8.029152,4.742392,0.804512,-5.953513,0.948986,1.400037,4.341985,0.930956,7.356777,-3.684226,-6.837255,-0.993356,-9.838653,-4.723459,-1.398289,-5.665866,-6.597032,0.541969,6.849666,0.734150,9.496873,4.033287,-1.144161,-4.482757,9.600293,-5.862109,-4.904849,6.404311,5.363940,-4.654329,1.738406,5.921348,-8.990589,1.511765,-0.305676,-7.077324,9.395773,5.387543,4.446034,0.922522,-4.261864,-2.337147,-1.295439,0.181155,1.410844,1.018818,-1.441399,7.775627,-7.580604,-4.672946,7.585253,-7.382253,9.574743,-2.288342,-9.908891,4.590983,3.523250,6.866400,5.721860,-5.163352,-1.076095,7.481423,-6.677000,5.718376,0.308833,3.826289,-9.587734,7.062205,9.493356,-3.088057,1.659569,9.080300,-8.641560,-1.965400,3.979404,-3.995310,3.298430,0.148675,-5.983376,-0.503235,-0.102657,-4.310503,8.899121,-2.368064,1.219723,-6.614248,-8.171831,-3.764908,-3.281664,2.801881,4.577927,9.359318,7.251936,-6.739569,4.457930,-0.373529,-2.123928,7.558535,-2.754419,6.879301,-1.849776,0.947065,7.246569,8.600001,-2.859890,9.757885,0.980789,-5.281535,9.182060,-2.079447,5.342454,6.709737,-6.259619,-6.356132,-9.023382,-7.169130,5.145319,-1.856211,0.590649,2.218285,-2.805367,1.864986,7.724005,-3.388459,-6.597346,-7.980809,5.724501,-9.746010,-2.880686,2.797300,-3.352992,7.150565,2.472598,-3.965953,-5.254643,-3.992158,-9.146247,-7.302526,-4.815964,5.960617,8.208161,-9.518317,0.607087,-0.180863,6.721439,-5.081819,-4.872188,-3.741819,7.273643,-5.304261,-3.530933,-2.697700,9.304563,-7.100334,-9.442609,-9.783411,1.801410,-2.500178,7.816526,-0.062739,-1.223022,-8.461023,3.793971,-1.930532,5.258704,-9.968217,-3.314017,0.081039,7.394544,9.924945,8.934180,9.153445,-1.952809,6.478014,3.536625,2.309183,-5.113241,-0.620738,-1.624032,0.567658,5.571875,0.129031,-4.542325,5.014127,-3.400532,2.752783,3.629296,6.757053,9.071153,5.378431,-2.981405,-3.299995,5.152753,-1.265070,-1.764164,1.890168,0.025466,6.625913,0.620795,3.559554,7.793084,4.048390,-0.104751,-4.267355,4.850962,-8.382174,-6.600005,0.359855,6.767258,0.991105,1.227801,4.771745,2.037445,-9.130553,-1.465099,9.627564,0.527707,-0.862970,3.308748,4.127069,-1.444106,-1.209829,-6.469178,-0.868026,-9.470183,9.740096,8.521023,-8.385280,4.514936,5.107193,6.795867,1.687223,-1.473720,-3.673927,0.275181,-7.137209,9.227253,-3.723397,-0.545122,6.494739,8.706456,-0.948986,6.458872,0.267366,-5.927104,-7.533137,2.969656,-2.785065,1.103913,4.754196,-1.986429,2.173326,5.199958,2.748883,-6.280029,-5.293792,-6.188890,-0.144952,0.714140,-8.778496,8.262387,7.300852,3.573449,-5.377732,-5.265816,7.869341,6.967261,-3.803563,-3.705760,4.525090,-6.539253,-8.325057,-5.982813,2.485040,1.040062,1.710972,-5.305088,5.661225,-4.987493,9.836109,-7.143252,9.498425,9.350822,-8.004247,-4.883020,-4.607866,7.547581,5.408936,-2.645758,1.718868,-6.286860,-4.411103,-7.623067,-9.127940,2.076237,7.046834,-3.275228,6.304738,7.297524,-8.334690,3.607468,-4.012123,9.895083,8.827228,-3.928130,6.516112,8.477892,-9.305262,-0.023804,8.800306,-6.102717,8.976026,3.991513,-1.151645,-3.968632,-5.489353,5.215555,-4.828885,-8.695143,-1.879368,-3.323501,-7.027460,4.920116,1.615693,0.905645,9.886243,-0.194437,1.279699,-1.701507,-0.030542,-8.773680,-5.132867,2.729486,-7.344289,-8.903064,4.091690,8.563230,1.399853,-3.335913,-6.196066,8.427526,9.447396,-1.912042,9.565856,-0.379301,2.333283,3.165482,-7.489987,-2.369626,-0.173604,-7.356549,4.539315,8.612309,-6.614336,-6.492022,-5.050518,3.263395,6.560002,-5.696456,-2.489664,-0.159288,7.693995,7.495554,-8.668329,-7.284230,5.854310,-8.368885,-0.881367,3.740767,8.381282,0.439442,2.044452,3.802696,-0.312425,9.597782,-7.455735,-4.773779,5.054871,-6.372829,1.393628,3.792108,2.368525,-8.151753,6.175836,-6.796649,4.411045,-5.459209,-0.382274,3.493535,8.513919,3.973017,-4.725412,2.260658,-7.922411,5.446388,5.998851,-2.204180,6.046606,-4.012201,-1.684980,0.067040,7.069849,-8.875477,-5.245304,-3.890142,-8.504452,4.344712,-7.950702,8.159904,-0.421690,-1.096968,2.049366,-6.898835,1.032608,8.114652,-4.938544,5.814154,2.411077,6.020574,7.042283,9.741992,-6.032085,-0.879134,-1.915827,2.432815,7.034380,-3.453406,-5.087339,3.638111,1.603237,6.163211,5.492516,1.073190,-7.417962,-5.241885,3.004932,2.352229,0.826698,-6.796045,7.129249,-7.647725,9.520195,8.878622,-2.198613,-9.344192,-8.576156,7.297924,-2.639457,-2.817300,6.327824,8.317422,-4.191412,-7.468143,-3.406205,1.479563,-0.809910,-4.460859,-0.095836,4.517714,-1.675796,7.318268,2.265072,9.140525,8.889358,-0.042845,-3.798460,3.970302,9.721395,-9.402347,-8.927247,1.654612,-1.015616,7.649957,-7.219826,7.491216,-8.229171,6.883661,5.843257,3.898141,-2.598364,4.787307,5.346029,9.248686,9.606490,5.573083,-4.201932,-1.356418,-0.381258,7.823186,8.687437,-8.498495,1.817181,4.422438,-8.012590,-5.879044,6.233802,3.963952,-2.538325,6.224360,8.950640,-1.618406,5.735853,-8.862355,-0.290082,-6.996957,-5.647309,4.961571,-7.324397,-8.740291,8.348584,2.314068,-9.319384,-1.952090,-3.695181,-4.879301,-4.498524,2.205927,-3.650160,7.619658,6.313170,-0.995453,-8.171919,-1.420219,-5.663077,6.829940,8.851051,-2.602686,-6.482565,-5.401808,-6.045587,-0.547981,2.230446,0.568979,0.752217,-4.475874,-3.389359,-6.125377,-3.676136,-8.095409,3.501672,9.912370,-6.901214,-2.639514,-6.164626,4.246063,-1.111904,7.489333,1.009521,1.592932,5.560345,-9.082089,-6.670647,8.690049,8.367399,4.600758,6.469443,4.182298,2.140225,-6.577414,-5.544160,-2.725289,3.295042,1.560792,-8.875440,4.037587,-3.536586,-1.247346,-6.789539,-6.979270,7.510282,-9.929592,-3.184401,-3.712644,-6.242520,6.607593,9.244769,9.041639,8.971356,6.560756,9.988046,4.080709,-8.566656,-9.535167,5.672883,-5.456759,-7.715444,-5.227624,-2.244673,-8.385193,5.894838,-0.502087,-9.553694,-2.105203,-2.122682,9.956166,-6.346605,0.309297,-6.444130,-6.672797,-9.842771,-2.191440,6.275979,0.432529,-7.952316,-9.673655,1.277669,-1.402504,-0.938769,6.176201,-1.772483,-2.516323,-3.413562,-5.657457,7.524365,-4.867168,0.982914,8.870767,4.145620,9.851379,-5.828035,-0.844577,-5.421005,2.206732,3.042766,4.844989,-6.456871,-9.742515,8.110298,7.423776,1.497099,9.565574,9.230424,-8.844149,1.128363,-8.178022,3.340034,-7.849123,0.547558,1.609366,-3.527474,-2.163261,-1.556765,2.817715,9.380035,6.337724,3.734695,-8.908771,4.955765,4.647243,-1.701525,-9.532689,-9.780677,3.706977,7.918125,-7.043455,9.414100,-4.605801,-8.210243,4.191622,-3.945244,-4.016777,0.401801,-5.080738,7.063879,-5.708379,4.131133,-7.404669,4.257593,7.012384,-6.356206,-7.346567,6.966327,7.902283,1.568856,3.990995,3.678120,6.658373,-7.688456,5.510621,8.181181,0.821611,3.729564,1.609242,6.665761,2.183172,-3.156124,6.735989,-7.565262,1.460725,-8.515468,9.812075,3.046641,-6.148512,8.273521,3.317887,5.263473,2.429055,-2.417951,3.957164,-8.932978,3.146309,0.941088,-7.044264,-0.533514,2.102023,-8.436007,-5.422264,6.050315,-0.274441,9.572668,7.810728,-8.715179,5.479991,5.239235,2.473479,9.302338,0.632067,1.738670,-2.049942,8.616932,-4.372633,-7.573743,3.483882,-2.854530,-4.061358,-3.832368,-9.735731,9.424183,6.341898,0.083485,-6.129177,-2.220420,0.467340,6.564641,4.574751,3.883544,-8.027210,-9.680846,4.388990,5.462062,-7.304291,1.514982,5.684143,-9.486326,-5.943015,9.608151,-7.612884,-0.371793,9.582425,0.503969,-9.735267,8.759578,3.275463,3.325449,-7.501581,-9.392113,-9.590307,2.613108,-1.034250,-6.379177,4.939855,9.099281,2.674557,5.409373,5.130363,5.308339,4.143277,0.112715,9.491012,3.079660,0.085213,-3.939592,-5.225655,9.842010,-6.661361,8.102099,3.146343,8.783809,-5.010382,-3.302692,-8.975188,1.436598,-1.504758,-1.047466,3.294490,3.887249,3.181501,-2.389322,8.723378,7.146658,-9.306904,-2.517019,7.139898,-3.554170,-8.424597,-6.371346,0.750308,9.189004,-4.312409,8.579772,9.811800,-0.832043,-9.288578,-2.354641,5.523610,6.790216,-6.125225,4.964922,-8.756600,6.914653,-3.126521,2.372598,-3.303847,0.229014,-0.448358,-1.108576,9.173461,-6.025338,-5.688718,-9.957327,-1.598225,3.520328,7.181739,7.999447,-9.616529,-0.623137,-1.607390,-1.445418,-0.564872,7.282292,-4.169164,0.285708,-7.369330,-1.287441,-8.252859,-1.339413,-6.464749,-4.168858,1.603794,2.744971,-8.402792,-3.122086,8.469666,5.433809,0.245041,-8.427511,0.240304,2.084415,-0.138044,-8.147146,-4.587320,5.433638,-3.378559,-7.990995,4.746773], dtype = "float32")#candidate|17297|(1050,)|const|float32
call_17296 = func_13324_call(relay.reshape(const_17297.astype('float32'), [14, 15, 5]))
call_17298 = func_13324_call(relay.reshape(const_17297.astype('float32'), [14, 15, 5]))
bop_17302 = relay.add(bop_17293.astype('int16'), relay.reshape(bop_17281.astype('int16'), relay.shape_of(bop_17293))) # shape=(8, 16, 1)
uop_17308 = relay.asinh(bop_17281.astype('float64')) # shape=(8, 16, 1)
func_13971_call = mod.get_global_var('func_13971')
func_13975_call = mutated_mod.get_global_var('func_13975')
var_17311 = relay.var("var_17311", dtype = "int32", shape = (490,))#candidate|17311|(490,)|var|int32
call_17310 = func_13971_call(relay.reshape(var_17311.astype('int32'), [10, 7, 7]), relay.reshape(var_17311.astype('int32'), [10, 7, 7]), )
call_17312 = func_13971_call(relay.reshape(var_17311.astype('int32'), [10, 7, 7]), relay.reshape(var_17311.astype('int32'), [10, 7, 7]), )
uop_17314 = relay.rsqrt(uop_17308.astype('float32')) # shape=(8, 16, 1)
func_7560_call = mod.get_global_var('func_7560')
func_7564_call = mutated_mod.get_global_var('func_7564')
const_17319 = relay.const([4,-9,-2,-5,-8,-3,-1,-4,2,-2,3,-3,8,-9,4,4,-1,6,-8,10,4,-10,10,-6,3,-1,7,5,1,-6,9,-5,-7,-4,2,2,9,2,7,2,-5,-8,6,-8,1,-1,5,9,-7,-8,8,6,1,9,-6,-10,3,-3,-5,-5,4,5,4], dtype = "uint16")#candidate|17319|(63,)|const|uint16
call_17318 = relay.TupleGetItem(func_7560_call(relay.reshape(const_17319.astype('uint16'), [3, 7, 3]), relay.reshape(const_17319.astype('uint16'), [3, 7, 3]), relay.reshape(const_17319.astype('uint16'), [3, 7, 3]), ), 2)
call_17320 = relay.TupleGetItem(func_7564_call(relay.reshape(const_17319.astype('uint16'), [3, 7, 3]), relay.reshape(const_17319.astype('uint16'), [3, 7, 3]), relay.reshape(const_17319.astype('uint16'), [3, 7, 3]), ), 2)
bop_17348 = relay.bitwise_xor(uop_17308.astype('uint32'), relay.reshape(bop_17281.astype('uint32'), relay.shape_of(uop_17308))) # shape=(8, 16, 1)
output = relay.Tuple([call_17296,const_17297,bop_17302,call_17310,var_17311,uop_17314,call_17318,const_17319,bop_17348,])
output2 = relay.Tuple([call_17298,const_17297,bop_17302,call_17312,var_17311,uop_17314,call_17320,const_17319,bop_17348,])
func_17361 = relay.Function([var_17265,var_17311,], output)
mod['func_17361'] = func_17361
mod = relay.transform.InferType()(mod)
var_17362 = relay.var("var_17362", dtype = "float64", shape = (8, 16, 1))#candidate|17362|(8, 16, 1)|var|float64
var_17363 = relay.var("var_17363", dtype = "int32", shape = (490,))#candidate|17363|(490,)|var|int32
output = func_17361(var_17362,var_17363,)
func_17364 = relay.Function([var_17362,var_17363,], output)
mutated_mod['func_17364'] = func_17364
mutated_mod = relay.transform.InferType()(mutated_mod)
var_17795 = relay.var("var_17795", dtype = "float32", shape = (1, 5, 14))#candidate|17795|(1, 5, 14)|var|float32
uop_17796 = relay.tan(var_17795.astype('float32')) # shape=(1, 5, 14)
uop_17803 = relay.sqrt(uop_17796.astype('float64')) # shape=(1, 5, 14)
output = uop_17803
output2 = uop_17803
func_17818 = relay.Function([var_17795,], output)
mod['func_17818'] = func_17818
mod = relay.transform.InferType()(mod)
var_17819 = relay.var("var_17819", dtype = "float32", shape = (1, 5, 14))#candidate|17819|(1, 5, 14)|var|float32
output = func_17818(var_17819)
func_17820 = relay.Function([var_17819], output)
mutated_mod['func_17820'] = func_17820
mutated_mod = relay.transform.InferType()(mutated_mod)
var_18022 = relay.var("var_18022", dtype = "bool", shape = (3, 11, 6))#candidate|18022|(3, 11, 6)|var|bool
var_18023 = relay.var("var_18023", dtype = "bool", shape = (3, 11, 6))#candidate|18023|(3, 11, 6)|var|bool
bop_18024 = relay.logical_and(var_18022.astype('bool'), relay.reshape(var_18023.astype('bool'), relay.shape_of(var_18022))) # shape=(3, 11, 6)
uop_18027 = relay.sinh(var_18023.astype('float32')) # shape=(3, 11, 6)
func_11924_call = mod.get_global_var('func_11924')
func_11927_call = mutated_mod.get_global_var('func_11927')
var_18041 = relay.var("var_18041", dtype = "uint8", shape = (210,))#candidate|18041|(210,)|var|uint8
const_18042 = relay.const([-9,7,4,-1,10,8,-3,-2,-8,-10,-4,7,-4,3,3,1,9,-3,-3,-5,-6,-4,10,10,5,-3,2,10,8,9,9,1,-7,2,9,-1,-10,8,1,8,-7,-4,-2,-7,10,-2,-6,-7,-9,3,6,-5,-10,-6,8,-6,-6,-5,5,-1,-10,5,5,-10,-3,-2,-8,-7,7,-9,9,3,-6,-8,-2,7,3,7,4,-4,-10,-7,-3,-7,8,-9,-3,-6,1,-9,4,-5,6,5,-7,6,-5,-6,-7,-1,8,4,2,-10,4,6,-3,-5,10,8,8,7,-9,10,-3,-1,-10,-2,-4,5,-2,-8,-3,4,4,3,8,-3,-10,-2,-5,5,7,8,-2,3,-6,-8,5,-2,-6,9,4,2,7,10,7,5,-7,-9,-8,4,3,-2,-6,7,1,5,-8,-3,8,-4,1,3,4,6,2,5,3,-4,-4,-10,-7,-10,9,9,-7,4,-6,-5,-9,-4,2,-6,9,-6,1,5,9,4,-1,7,7,5,10,-6,2,8,1,10,4,-10,2,-4,1,8,10,-9,9,-2,5,-8,10,-2,1,-9,-10,1,-4,-2,10,8,-7,9,-2,-5,-1,-5,-10,-1,3,-8,-9,-4,4,10,7,-6,-5,-10,-7,6,-9,-10,2,-4,1,7,-2,5,-8,-2,2,-9,4,-4,6,1,-2,6,2,8,-1,5,7,-9,-6,-2,-10,5,-10,-7,8,-2,8,-4,-8,-6,-7,-4,3,-1,-4,-7,-6,10,-1,2,4,-10,4,7,-8,2,-5,2,-10,9,8,10,-8,1,7,9,-9,-8,-4,-6,-7,8,5,-8,-4,8,-2,-7,-9,2,-4,-9,-1,-10,9,7,-4,-6,8,-5,2,6,2,-6,4,6,8,-2,2,4,-8,9,-10,5,10,10,-3,-8,10,7,2,3,-1,-9,-7,-6,7,-8,-10,-5,-1,4,1,-1,6,6,-1,9,4,-5,-4,5,-6,-8,-6,-7,-10,-10,-1,-2,9,8,-7,-2,-7,-1,7,2,-8,10,-7,-8,-5,8,1,6,9,8,1,6,-6,-10,-10,-8,7,10,-4,1,-1,9,8,-10,9,3,-9,-9,6,9,6,-6,-7,6,-9,5,3,-9,-7,-10,-8,-6,3,-1,-9,-9,-2,-5,-3,2,-8,-1,-9,4,1,4,-8,-8,8,-4,-2,1,7,-2,-6,4,3,5,-10,-10,4,2,-4,4,2,10,-8,9,-6,-8,7,-6,-1,-2,1,-2,4,6,-6,10,8,-1,1,-4,3,1,5,-8,-10,7,-2,8,-5,-4,7,-9,5,1,-10,-7,8,2,-5,2,-3,-1,-8,-1,-7,1,2,-9,10,5,7,-4,9,-8,8,-4,-9,-8,-5,-9,5,-4,-2,3,7,5,-1,-8,-4,-7,-8,-5,-7,3,1,2,-4,2,1,9,7,-3,2,1,8,10,10,-3,8,8,-10,7,7,1,7,8,-5,-2,-2,4,-4,6,-4,10,-6,3,-9,9,8,-5,-1,8,-6,2,-5,10,5,-3,6,10,4,-6,-2,8,-7,6,8,4,4,1,-6,-7,8,9,5,-6,3,-1,-8,-6,4,3,-3,5,6,-7,9,-3,-5,-1,-4,-9,-8,3,-1,-3,10,-8,-4,10,-3,2,2,10,-10,8,-7,-10,-1,-3,1,-9,3,-3,10,-8,-2,-6,-8,2,5,-1,-8,9,5,4,-7,4,-10,-6,-10,-5,5,-5,-6,-2,-8,5,-7,7,-4,5,-4,1,5,6,10,-6,-3,-1,-9,-1,-7,4,9,-3,2,6,8,-2,3,-8,1,1,6,-4,4,-3,2,-4,-7,-5,6,7,-9,6,-8,8,-8,-5,10,1,-5,-4,2,-9,4,9,7,5,-6,-9,-5,4,-3,-8,-8,-6,5,-1,7,-5,-6,-2,-2,-9,8,-3,-3,6,7,9,-5,10,5,7,3,-5,-8,-10,-6,9,4,-6,-8,-5,6,-2,-10,-1,6,-9,1,8,10,10,-6,9,10,9,10,4,-9,-9,1,-6,-9,7,-8,9,-10,6,-7,-8,-4,4,-10,-10,-7,7,-8,-4,-7,-6,6,5,-6,4,9,2,-8,5,-5,8,-1,-9,-8,-5,5,-2,-9,-7,-9,2,-4,9,-1,1,-9,-7,5,-1,-10,-10,10,-8,-8,-7,7,-4,2,-2,-2,-8,-3,3,-2,1,-1,-10,10,1,2,-6,5,-7,-5,-9,-1,10,-3,-2,-5,10,-3,-8,-6,-10,7,5,-7,-1,3,-1,-1,10,2,-1,-4,-7,-3,9,-6,-8,-6,6,-7,-6,-1,7,-8,5,9,-8,-1,10,-2,3,-8,10,6,-7,-7,5,2,9,9,9,-4,-10,6,6,9,-5,-10,2,2,-1,4,6,-6,-5,9,-2,3,-7,-2,-6,-4,-9,-5,-10,-10,-8,7,-10,9,9,-9,2,-2,2,1,4,-8,-10,4,4,3,10,-5,4,-8,-3,-1,-1,-1,-7,-1,-10,4,6,1,3,1,3,-6,10,-9,10,-8,-3,6,-3,-10,7,-4,1,-2,-9,-10,9,-1,-9,-3,-10,-2,2,-4,-4,-10,8,6,9,-6,1,3,3,10,-4,-2,4,9,1,-2,8,10,6,-7,-5,3,10,-5,-2,6,-6,2,2,5,-7,-2,1,-2,9,-3,-2,-10,4,5,8,4,10,5,9,7,9,2,-3,-8,-2,7,-7,8,10,-7,-5,-4,9,6,1,6,5,3,-2,10,-10,-10,2,10,9,10,-10,-8,-8,-7,-8,-1,10,-10,-5,-6,5,-1,4,-9,-9,-9,-7,-8,-3,-4,-7,-5,10,-1,6,-9,-5,-8,-4,-4,-7,-3,-1,-7,-7,7,-7,3,8,2,1,-4,2,3,-8,10,-1,-10,-4,-7,2,-5,8,6,-9,-1,10,5,7,1,-7,3,-1,-10,-3,-6,-3,-4,8,-9,10,7,5,-3,4,-10,-4,8,-9,10,7,7,-6,3,10,-1,3,-10,2,3,-7,6,9,7,-4,7,5,-3,4,-5,9,-3,-7,-5,8,6,2,-9,8,8,-2,-1,-9,-8,-10,7,2,-6,-5,-10,8,8,-8,10,2,-5,-4,-3,-3,-8,-7,-4,7,10,8,6,-5,-5,-3,10,4,-2,-4,-3,-6,-1,6,-2,5,6,1,1,-6,3,-5,5,-8,10,-9,-10,2,10,9,2,5,1,-7,5,1,3,9,-7,-4,-1,-8,10,4,-9,-5,9,6,-7,2,-8,-10,-1,10,9,5,-7,-3], dtype = "int64")#candidate|18042|(1232,)|const|int64
call_18040 = relay.TupleGetItem(func_11924_call(relay.reshape(var_18041.astype('uint8'), [3, 14, 5]), relay.reshape(const_18042.astype('int64'), [1232,]), ), 0)
call_18043 = relay.TupleGetItem(func_11927_call(relay.reshape(var_18041.astype('uint8'), [3, 14, 5]), relay.reshape(const_18042.astype('int64'), [1232,]), ), 0)
output = relay.Tuple([bop_18024,uop_18027,call_18040,var_18041,const_18042,])
output2 = relay.Tuple([bop_18024,uop_18027,call_18043,var_18041,const_18042,])
func_18056 = relay.Function([var_18022,var_18023,var_18041,], output)
mod['func_18056'] = func_18056
mod = relay.transform.InferType()(mod)
var_18057 = relay.var("var_18057", dtype = "bool", shape = (3, 11, 6))#candidate|18057|(3, 11, 6)|var|bool
var_18058 = relay.var("var_18058", dtype = "bool", shape = (3, 11, 6))#candidate|18058|(3, 11, 6)|var|bool
var_18059 = relay.var("var_18059", dtype = "uint8", shape = (210,))#candidate|18059|(210,)|var|uint8
output = func_18056(var_18057,var_18058,var_18059,)
func_18060 = relay.Function([var_18057,var_18058,var_18059,], output)
mutated_mod['func_18060'] = func_18060
mutated_mod = relay.transform.InferType()(mutated_mod)
var_18094 = relay.var("var_18094", dtype = "float32", shape = (14, 11, 14))#candidate|18094|(14, 11, 14)|var|float32
uop_18095 = relay.sinh(var_18094.astype('float32')) # shape=(14, 11, 14)
func_3899_call = mod.get_global_var('func_3899')
func_3903_call = mutated_mod.get_global_var('func_3903')
var_18104 = relay.var("var_18104", dtype = "uint16", shape = ())#candidate|18104|()|var|uint16
const_18105 = relay.const([[-7],[7],[-9],[8],[8],[-1],[-7],[-8],[-10],[-3],[9],[4],[2],[6],[-1],[-10],[7],[8],[4],[9],[-9],[-2],[9],[-5],[9],[5],[3],[-3],[1],[-10],[-6],[-5],[-10],[6],[-8],[-5],[-5],[3],[-6],[-4],[6],[3],[9],[6],[-7],[-6],[-9],[-3],[-1],[-4],[-6],[-6],[-5],[-5],[-7],[6],[-8],[-5],[-4],[1],[-7],[4],[6],[-4],[8],[10],[6],[-5],[6],[2],[10],[-7],[8],[7],[2],[5],[5],[-3],[9],[-1]], dtype = "uint16")#candidate|18105|(80, 1)|const|uint16
call_18103 = relay.TupleGetItem(func_3899_call(relay.reshape(var_18104.astype('uint16'), []), relay.reshape(const_18105.astype('uint16'), [10, 8, 1]), ), 0)
call_18106 = relay.TupleGetItem(func_3903_call(relay.reshape(var_18104.astype('uint16'), []), relay.reshape(const_18105.astype('uint16'), [10, 8, 1]), ), 0)
var_18131 = relay.var("var_18131", dtype = "float32", shape = (14, 11, 14))#candidate|18131|(14, 11, 14)|var|float32
bop_18132 = relay.floor_mod(uop_18095.astype('float64'), relay.reshape(var_18131.astype('float64'), relay.shape_of(uop_18095))) # shape=(14, 11, 14)
func_3899_call = mod.get_global_var('func_3899')
func_3903_call = mutated_mod.get_global_var('func_3903')
call_18135 = relay.TupleGetItem(func_3899_call(relay.reshape(var_18104.astype('uint16'), []), relay.reshape(call_18103.astype('uint16'), [10, 8, 1]), ), 0)
call_18136 = relay.TupleGetItem(func_3903_call(relay.reshape(var_18104.astype('uint16'), []), relay.reshape(call_18103.astype('uint16'), [10, 8, 1]), ), 0)
output = relay.Tuple([call_18103,var_18104,const_18105,bop_18132,call_18135,])
output2 = relay.Tuple([call_18106,var_18104,const_18105,bop_18132,call_18136,])
func_18137 = relay.Function([var_18094,var_18104,var_18131,], output)
mod['func_18137'] = func_18137
mod = relay.transform.InferType()(mod)
mutated_mod['func_18137'] = func_18137
mutated_mod = relay.transform.InferType()(mutated_mod)
func_18137_call = mutated_mod.get_global_var('func_18137')
var_18139 = relay.var("var_18139", dtype = "float32", shape = (14, 11, 14))#candidate|18139|(14, 11, 14)|var|float32
var_18140 = relay.var("var_18140", dtype = "uint16", shape = ())#candidate|18140|()|var|uint16
var_18141 = relay.var("var_18141", dtype = "float32", shape = (14, 11, 14))#candidate|18141|(14, 11, 14)|var|float32
call_18138 = func_18137_call(var_18139,var_18140,var_18141,)
output = call_18138
func_18142 = relay.Function([var_18139,var_18140,var_18141,], output)
mutated_mod['func_18142'] = func_18142
mutated_mod = relay.transform.InferType()(mutated_mod)
var_18762 = relay.var("var_18762", dtype = "float32", shape = (13, 3, 4))#candidate|18762|(13, 3, 4)|var|float32
uop_18763 = relay.erf(var_18762.astype('float32')) # shape=(13, 3, 4)
func_11924_call = mod.get_global_var('func_11924')
func_11927_call = mutated_mod.get_global_var('func_11927')
var_18772 = relay.var("var_18772", dtype = "uint8", shape = (210,))#candidate|18772|(210,)|var|uint8
const_18773 = relay.const([[2,-4],[-10,10],[3,8],[7,-8],[-3,-2],[-10,3],[-10,-1],[-4,4],[-2,-4],[3,10],[3,5],[-2,-2],[-3,3],[7,-9],[2,2],[10,-3],[-6,-5],[-10,-4],[-2,2],[-9,-10],[-9,6],[-10,2],[5,-7],[10,7],[6,5],[-6,-8],[-8,-4],[-5,9],[-9,9],[-2,-3],[-3,-1],[-2,-8],[-10,-4],[-4,9],[-3,10],[1,-1],[6,2],[-10,-4],[5,7],[4,6],[2,2],[-4,-9],[6,-4],[-9,-7],[-6,-3],[-4,-1],[-10,8],[6,8],[6,6],[-5,-7],[-2,-7],[-10,6],[-5,-2],[5,2],[4,1],[-4,9],[-1,1],[10,6],[-3,-3],[-9,-6],[-7,5],[-4,7],[-7,-9],[7,4],[-5,-5],[-5,6],[-6,-10],[7,1],[-6,4],[-5,9],[9,-6],[8,-4],[7,7],[-10,9],[-2,-3],[6,-3],[-2,2],[9,-3],[1,-3],[-9,9],[6,-7],[1,-4],[-6,-3],[1,-3],[-4,2],[10,2],[-7,8],[1,4],[-5,6],[9,-8],[7,5],[9,10],[-7,-9],[-10,-8],[-5,4],[6,-5],[-9,9],[-3,10],[10,5],[-7,3],[1,-1],[-10,-9],[7,-2],[9,6],[-10,-5],[3,10],[-3,1],[4,-4],[-7,-8],[-5,-3],[-2,5],[-4,-9],[-7,-7],[10,-2],[-6,4],[10,-7],[-2,3],[3,10],[-10,-7],[8,-9],[2,5],[-5,6],[-1,-1],[8,-7],[4,10],[7,3],[6,4],[-9,9],[8,5],[1,5],[2,7],[4,2],[6,-5],[1,10],[9,-1],[6,-2],[-4,-8],[-8,10],[-8,10],[1,-10],[-4,-9],[5,2],[3,4],[3,-4],[1,-3],[4,1],[-10,-4],[4,7],[-8,-3],[-4,-7],[-8,6],[5,10],[1,-6],[-7,-5],[-7,10],[-2,9],[1,-3],[9,-6],[10,-8],[-2,-2],[-2,-8],[-5,-7],[-3,-6],[-4,-6],[-9,4],[8,-2],[-1,-5],[1,-6],[8,-3],[6,-7],[-9,-3],[-10,-9],[-8,4],[10,4],[10,-4],[7,-3],[3,-7],[-8,-7],[1,-9],[9,-7],[-9,-4],[-1,-2],[-8,-10],[-6,1],[3,-8],[4,7],[7,6],[3,4],[-6,-5],[-7,-8],[3,1],[2,-1],[-1,5],[8,3],[-1,-3],[2,-8],[-6,-7],[-10,-9],[2,-6],[-3,1],[-10,1],[2,5],[-3,-8],[6,5],[-9,-8],[-7,5],[8,-6],[-2,6],[5,2],[-9,9],[-5,-7],[2,-4],[4,3],[-8,1],[-2,8],[-3,-8],[10,-4],[-4,3],[9,-10],[-3,2],[-8,-9],[5,-4],[-6,-3],[-7,-5],[-8,7],[1,1],[9,-9],[-10,2],[-7,-4],[-10,9],[1,4],[10,4],[-8,2],[-1,9],[8,6],[10,6],[6,10],[-10,-1],[1,-10],[5,-1],[-7,4],[9,1],[9,5],[-3,7],[-3,-7],[-5,6],[6,-9],[2,-5],[6,-10],[-3,10],[8,1],[8,-3],[6,4],[10,7],[7,-8],[7,-1],[-5,8],[10,9],[-5,9],[10,-4],[2,8],[-9,-10],[3,7],[-3,5],[-9,-3],[-10,7],[5,-9],[-10,3],[-1,5],[-8,-6],[5,2],[-4,-6],[-9,2],[-3,7],[8,3],[10,-1],[-7,-1],[-3,5],[-2,6],[4,-9],[-10,6],[-1,-1],[10,-5],[10,-1],[4,1],[9,-5],[-4,7],[2,-5],[-6,-4],[-4,3],[9,-4],[6,7],[5,7],[-5,-7],[5,1],[7,-8],[4,9],[8,-2],[10,7],[9,-7],[-3,10],[-9,9],[10,-1],[-3,-9],[4,-7],[-10,1],[-2,7],[2,8],[8,-5],[5,-3],[5,2],[-5,-7],[9,-1],[-2,8],[-9,-7],[-6,-10],[3,3],[1,-4],[10,-6],[-7,3],[-6,4],[5,4],[-6,8],[-6,-8],[6,-8],[9,-3],[8,-5],[-2,-2],[3,8],[1,-5],[-5,-10],[-3,-1],[-2,-4],[-2,10],[-6,-6],[3,9],[-7,5],[1,4],[-5,6],[-7,-5],[-5,-9],[-7,7],[-6,-4],[-3,7],[9,8],[4,-5],[-8,-4],[-7,3],[-9,-9],[3,-2],[8,-2],[-8,-9],[-2,7],[10,-4],[-3,3],[-9,-2],[-9,7],[-6,5],[-4,3],[5,-8],[-10,3],[-7,8],[7,-1],[-8,-7],[5,-10],[-2,3],[9,7],[-9,-1],[10,-8],[-4,10],[-8,10],[-6,-2],[10,2],[-7,9],[10,-10],[-2,9],[-8,10],[5,-3],[-1,-10],[7,-7],[-4,-10],[-3,-6],[6,-5],[10,10],[-3,8],[-8,-3],[-4,-7],[-7,-10],[3,-3],[-3,-3],[-7,-7],[2,-5],[-8,5],[5,-7],[2,-2],[8,1],[5,10],[-3,5],[3,4],[-9,-2],[-1,-3],[6,-7],[-3,9],[-2,5],[-2,-3],[9,-4],[-2,-8],[9,-8],[-9,-9],[10,-7],[-5,-6],[-9,-2],[5,-6],[5,-7],[-10,6],[8,-10],[-4,6],[-6,-10],[-1,6],[5,-1],[-3,-7],[8,-3],[-2,8],[4,9],[-8,5],[9,-5],[-10,-8],[-8,9],[7,10],[-1,-2],[4,5],[9,-8],[-10,-2],[-8,7],[5,5],[6,5],[-2,-7],[-9,-8],[-2,-5],[-6,9],[-5,4],[8,-1],[9,-8],[-2,8],[-9,-6],[7,-5],[6,9],[2,9],[9,-1],[5,1],[2,6],[-4,9],[-1,-6],[-9,-7],[-1,-9],[4,-10],[-1,3],[-5,-7],[4,2],[-10,-3],[-5,9],[-10,-3],[3,-1],[9,-2],[-2,-4],[9,-7],[-7,-3],[9,-9],[-7,-10],[-7,7],[4,8],[9,6],[5,2],[3,9],[8,8],[9,2],[8,-2],[-7,-4],[7,6],[2,-9],[4,-10],[-1,-7],[-2,4],[2,9],[2,-4],[10,-1],[10,3],[9,-8],[5,10],[-9,-5],[-3,4],[7,-7],[5,-7],[1,-2],[-5,-10],[8,9],[-8,-7],[7,-9],[1,8],[-5,8],[-6,4],[4,8],[-8,-8],[-8,10],[-8,-2],[1,7],[-5,1],[-10,9],[-5,-5],[7,-10],[4,3],[-7,-8],[2,-1],[-3,4],[-5,-7],[5,3],[9,2],[-3,-4],[2,-7],[-2,5],[-6,6],[7,9],[-6,-7],[4,-4],[-9,-10],[-9,-7],[2,2],[-10,-8],[1,8],[-6,10],[-3,5],[-8,-10],[-5,9],[-5,-7],[-10,-4],[3,-7],[-8,4],[1,-5],[2,10],[9,7],[10,-8],[-2,-5],[3,3],[1,-4],[-6,-10],[4,-1],[-5,8],[-1,-6],[1,-8],[-10,-5],[10,2],[-1,-10],[-5,-4],[-8,-9],[6,-5],[-2,-7],[-8,8],[-8,2],[3,9],[10,-1],[-2,6],[-9,-10],[-2,-1],[-9,-1],[-3,-4],[2,-9],[10,8],[-1,-5],[-5,-10],[-7,1],[-9,-6],[-3,7],[6,7],[7,-2],[7,-7],[3,9],[4,-6],[4,-10],[2,-3],[-3,-8],[-2,-6],[2,8],[-9,8],[-8,2],[8,10],[-5,-7],[8,-9],[4,9],[-4,-7],[-4,6],[1,-5],[-10,-10],[3,2],[-10,-5],[3,-9],[-1,3],[5,4],[6,-3],[3,-5],[-5,3],[4,-7],[6,-5],[4,-4],[-4,2],[6,9],[5,8],[-7,3],[9,-1],[-3,1],[8,10],[10,7],[-10,5],[5,9],[-3,-8],[-1,4],[10,7]], dtype = "int64")#candidate|18773|(616, 2)|const|int64
call_18771 = relay.TupleGetItem(func_11924_call(relay.reshape(var_18772.astype('uint8'), [3, 14, 5]), relay.reshape(const_18773.astype('int64'), [1232,]), ), 3)
call_18774 = relay.TupleGetItem(func_11927_call(relay.reshape(var_18772.astype('uint8'), [3, 14, 5]), relay.reshape(const_18773.astype('int64'), [1232,]), ), 3)
output = relay.Tuple([uop_18763,call_18771,var_18772,const_18773,])
output2 = relay.Tuple([uop_18763,call_18774,var_18772,const_18773,])
func_18778 = relay.Function([var_18762,var_18772,], output)
mod['func_18778'] = func_18778
mod = relay.transform.InferType()(mod)
var_18779 = relay.var("var_18779", dtype = "float32", shape = (13, 3, 4))#candidate|18779|(13, 3, 4)|var|float32
var_18780 = relay.var("var_18780", dtype = "uint8", shape = (210,))#candidate|18780|(210,)|var|uint8
output = func_18778(var_18779,var_18780,)
func_18781 = relay.Function([var_18779,var_18780,], output)
mutated_mod['func_18781'] = func_18781
mutated_mod = relay.transform.InferType()(mutated_mod)
const_19012 = relay.const([[[-9,-5,7,7,8,3,4,-9,9,10,8,-3,6,5],[-2,-6,-3,-5,8,6,-4,8,-10,3,-6,9,6,-10],[-7,-6,9,-7,-10,7,-6,6,3,8,-2,-1,7,-4],[-3,5,9,-8,-3,3,9,3,-2,-5,-6,-6,-7,7]],[[-8,-5,7,-2,1,-3,9,8,-5,-3,-2,1,3,-4],[-6,-4,-4,-9,9,5,3,4,5,2,-3,-8,5,-4],[-7,-1,-1,-1,-4,-6,-2,-4,-1,9,-10,-8,5,-9],[5,1,2,-7,4,10,8,2,-8,-7,7,-7,-6,-2]],[[-2,1,6,9,3,3,-6,7,8,6,-6,-5,10,9],[-10,6,2,9,-1,-8,-6,2,-3,-6,8,6,-6,6],[6,1,-6,6,-6,8,5,2,6,-3,-10,-9,-2,2],[-8,3,4,10,3,-2,10,6,5,-7,1,9,9,-2]],[[2,1,2,4,10,-8,9,-3,9,6,-7,-6,-3,10],[2,4,-5,4,9,-5,-3,3,2,-2,-5,-6,1,1],[-6,7,4,-10,6,-8,3,5,6,-7,-4,-1,7,-1],[9,6,6,3,-7,-1,-8,-10,-4,-8,-5,-1,6,-7]],[[-1,-3,4,-8,-3,10,-4,4,2,7,-1,6,-10,4],[-1,8,3,6,9,6,7,-3,-9,-4,-1,6,-6,7],[-1,1,-3,-6,10,-4,8,-4,-7,7,-2,-8,-2,4],[-9,3,3,2,4,-4,1,-7,9,-3,8,4,-1,-2]],[[1,10,-10,-9,-8,1,-10,8,5,10,7,-10,-3,5],[-9,6,7,-9,8,10,-1,-10,7,2,-5,6,4,-9],[10,-1,-4,-10,-1,-8,7,7,-10,-6,-4,9,-1,-3],[10,-3,7,1,1,2,10,-2,-9,-2,-5,6,-9,1]],[[9,-4,-8,-9,-1,8,-2,3,-4,9,-2,-2,1,8],[-2,-7,-5,-10,-8,-9,9,-10,-2,5,5,-7,4,6],[9,5,-3,4,5,-10,-1,1,-10,5,3,-6,-5,-7],[-4,6,7,7,-4,-7,-5,2,-7,7,6,-9,-5,1]],[[-10,3,-3,9,10,9,9,5,-2,9,1,-9,2,-10],[-3,-9,9,-8,10,-2,7,6,-7,9,9,-3,6,1],[-9,4,-4,-6,-4,-5,2,-7,-1,5,6,-1,2,9],[-3,-5,-3,-6,-4,10,-5,-2,-4,-7,2,7,6,4]]], dtype = "int64")#candidate|19012|(8, 4, 14)|const|int64
var_19013 = relay.var("var_19013", dtype = "int64", shape = (8, 4, 14))#candidate|19013|(8, 4, 14)|var|int64
bop_19014 = relay.less_equal(const_19012.astype('bool'), relay.reshape(var_19013.astype('bool'), relay.shape_of(const_19012))) # shape=(8, 4, 14)
func_7097_call = mod.get_global_var('func_7097')
func_7100_call = mutated_mod.get_global_var('func_7100')
const_19019 = relay.const([[-9.681694,-9.897079,-8.789634,2.929866,8.710377,-6.316346,9.134020,2.334223,8.366360,-7.072563,-5.317420,1.452554,-7.216628,4.981687,-6.875906,2.884475,8.431411,7.641045,8.156764,4.802615,-7.495407,-3.222660,3.512138,2.023731,-1.694925,-4.971392,1.124866,0.899088,4.172646,-6.681650,6.482324,-4.049637,4.743286,-4.451826,-5.882105,6.427419,9.732247,-3.649623,7.418289,-9.556494,1.853533,-2.171571,-9.587735,-8.033914,-7.542235,8.307665,0.380064,-1.343410],[5.872455,9.429009,-2.303700,5.948771,3.749912,-3.974868,1.147267,-8.834196,-6.585559,4.318093,-0.745575,-0.454567,-4.145334,-3.994546,1.297671,-1.901703,5.683200,-0.741831,-1.207035,-7.284551,-5.899480,-1.455174,8.070775,-7.147006,-8.822385,-7.251366,-3.693790,3.707577,4.685121,-6.936886,4.729955,7.789707,-7.060193,-1.655132,0.360300,-6.659515,-6.877576,5.217486,5.573251,6.127195,3.398627,-4.551417,-2.809685,-2.328362,0.458711,-5.576105,5.259671,-4.558757]], dtype = "float32")#candidate|19019|(2, 48)|const|float32
const_19020 = relay.const(-0.872531, dtype = "float32")#candidate|19020|()|const|float32
call_19018 = relay.TupleGetItem(func_7097_call(relay.reshape(const_19019.astype('float32'), [8, 2, 6]), relay.reshape(const_19020.astype('float32'), []), ), 0)
call_19021 = relay.TupleGetItem(func_7100_call(relay.reshape(const_19019.astype('float32'), [8, 2, 6]), relay.reshape(const_19020.astype('float32'), []), ), 0)
output = relay.Tuple([bop_19014,call_19018,const_19019,const_19020,])
output2 = relay.Tuple([bop_19014,call_19021,const_19019,const_19020,])
func_19022 = relay.Function([var_19013,], output)
mod['func_19022'] = func_19022
mod = relay.transform.InferType()(mod)
var_19023 = relay.var("var_19023", dtype = "int64", shape = (8, 4, 14))#candidate|19023|(8, 4, 14)|var|int64
output = func_19022(var_19023)
func_19024 = relay.Function([var_19023], output)
mutated_mod['func_19024'] = func_19024
mutated_mod = relay.transform.InferType()(mutated_mod)
var_19395 = relay.var("var_19395", dtype = "float64", shape = (9, 4, 13))#candidate|19395|(9, 4, 13)|var|float64
uop_19396 = relay.atan(var_19395.astype('float64')) # shape=(9, 4, 13)
func_8432_call = mod.get_global_var('func_8432')
func_8435_call = mutated_mod.get_global_var('func_8435')
const_19412 = relay.const([-5.418381,-2.379593,-2.774540,-7.062657,-7.979947,2.751853,0.838701,-6.972738,-3.372815,5.770367,1.147618,-0.703667,1.281718,1.404452,-1.359601,1.523525,8.838267,-3.931558,7.904774,2.581363,8.895191,-3.081143,9.629830,0.381652,8.034390,-7.662494,-8.974053,1.463262,-5.921988,-1.261692,4.294195,7.274464,7.646767,-4.876729,3.679174,-8.538346,-9.238110,3.812302,-8.299959,5.317184,8.468638,-2.155954,-2.193022,3.253642,-8.238218,-9.036155,5.056018,-0.331019,4.004039,7.702954,-7.917965,8.177464,-0.356750,8.755251,1.724716,0.304005,-9.775888,-5.188893,3.732302,4.903899,-5.238336,4.251526,6.256509,-4.579160,-3.717987,7.980729,-3.369909,4.814087,2.076671,3.655353,9.248127,1.447954,-0.522564,-4.124140,-5.324381,2.534462,5.482678,-6.326777,1.806073,-0.578345,5.877644,-0.751759,-2.713630,-4.463192,-5.951814,4.688256,-0.668201,4.928527,-6.983521,-7.624407,6.283131,1.789900,-7.673695,-3.246610,1.250524,1.114392,-0.056999,-8.456758,0.005726,2.867498,-5.013438,3.563553,4.601280,3.917569,0.492506,-4.398049,2.775969,3.505188,-3.475134,3.125210,-1.647652,-3.407047,9.252562,-3.049432,6.933788,-2.279305,-4.438218,4.115015,3.815835,6.271631,-8.736301,1.401187,-7.493122,-7.321663,-8.656664,-9.869520,-1.331362,-8.003472,4.924758,7.636523,-1.691147,-0.621527,2.488511,-8.698244,-2.058171,4.508141,-1.352474,-4.199414,-4.164490,9.441029,2.499782,9.757686,-7.232142,0.077659,-0.621097,-8.006599,-0.480527,9.665662,-0.473324,-2.180091,-6.834845,-6.224609,8.403313,7.392376,3.082549,-6.308360,-3.295107,-5.911982,6.525113,-8.611348,-6.616645,-4.185858,5.059365,1.703673,-0.752394,-0.080009,0.296479,5.451738,3.490196,-7.936668,5.105198,7.507950,3.513339,-1.155331,4.517392,-7.201313,9.145615,4.106214,9.061137,2.662560,-0.489516,-8.813398,-0.529199,-9.024776,-4.639929,-5.359648,-9.714626,0.706167,6.593678,-8.827680,-3.194523,7.430216,-4.869379,-0.716468,0.271791,0.213740,0.752131,1.870744,6.058291,6.896650,7.583273,1.487716,-0.452236,8.476648,-7.343577,-1.771973,-4.083025,-0.579425,-2.283640,-2.636459,-5.884327,-9.506994,4.219671,7.996728,2.995285,-3.227294,-2.707953,-8.872645,-4.827715,8.995242,-0.072429,1.037401,3.097046,0.733343,-0.652965,0.455951,8.411478,-1.208009,1.803919,3.960938,0.402877,7.135803,5.337266,-3.385821,8.313372,-7.848896,7.297329,4.437667,3.521072,0.528996,-7.816240,3.262594,-7.844138,4.387738,8.190688,-4.507383,-1.645089,1.873515,-4.284556,-5.924618,9.554174,9.420302,-9.723834,0.631845,9.184938,-8.002039,6.655710,9.020870,8.488091,8.798781,9.546087,3.942241,-6.784601,9.787161,-3.281591,-8.103683,-9.204710,9.201377,-2.366208,-6.837171,2.297030,-3.186330,-0.636503,-6.648368,-9.090812,6.780593,3.462808,9.879730,0.448538,-8.989354,-4.442157,6.205507,-5.866246,-9.628406,6.550286,-6.362706,8.104163,3.953310,-1.461458,1.781528,1.884828,-7.372051,-7.843216,-1.351440,-6.204304,0.756137,-2.254466,9.697257,4.264253,6.731228,5.890742,0.044443,-0.237887,-0.602333,-8.888841,8.717604,-6.336018,0.101818,-4.716183,-8.942052,-2.747045,4.691583,-1.820830,-1.902375,-4.580372,-9.549340,8.327909,-5.187781,-8.964591,8.329657,9.247022,3.049518,-5.219893,-1.045954,-6.546261,-3.520565,-4.389189,4.728339,-4.339998,0.732996,-5.512454,-4.287905,0.409119,7.594551,-3.851063,3.805970,-9.517326,3.412263,4.691607,7.632242,2.488552,-0.503902,4.268865,-5.695841,9.692815,6.708098,-0.612781,-7.668475,-3.880400,0.341008,-2.768515,-8.058419,3.460586,9.222884,3.057591,1.231859,-9.532481,1.530991,7.113950,-5.852094,6.025483,-3.836315,6.145691,1.423509,1.466542,-5.739038,1.586975,-9.946499,2.930140,0.612737,-3.238387,3.338433,1.678697,-0.046667,-3.378793,8.201060,-4.768087,9.986925,-5.058718,-9.607802,-5.073954,2.084139,1.689715,-4.038266,-3.208505,-6.460700,-6.391909,4.653772,-1.199459,2.647695,-4.828757,-4.920685,-8.440104,8.182470,-7.319945,-4.603996,-0.784874,7.024784,4.680365,-1.254121,3.041479,-7.935473,-6.501797,6.533534,-2.793396,-4.943802,-6.479614,9.617411,-2.254243,9.789672,-7.603908,9.379357,-5.523284,9.112968,3.677848,1.024432,-5.386830,-7.620656,4.312267,1.410719,-4.154770,7.379813,-5.074327,-1.416575,9.999855,7.563550,6.787538,-1.685002,0.619018,-6.603447,-1.562353,-7.477519,5.510679,9.816900,-1.728017,-0.235452,-8.090763,7.803752,4.771494,-8.380562,-0.500902,-2.127702,-3.489864,8.351239,-5.751030,-1.101215,8.618587,7.301533,-5.252127,1.796052,6.722635,0.930295,2.477169,-1.293753,-4.024146,1.740742,0.750468,8.374922,3.744597,4.702623,-4.534745,-9.096800,-3.230631,-1.493430,-0.896997,-4.763426,-3.325946,-8.677524,-2.812635,-7.098481,5.537460,6.165965,6.281606,-5.520235,9.362334,5.200506,-1.159068,9.214913,6.136636,3.413822,-8.584409,-5.762045,0.807527,-9.046672,5.441298,3.257656,2.896313,6.818916,1.842441,3.584661,-7.908354,-1.896504,-5.018051,6.675570,9.484033,1.279366,-9.677499,-6.901944,-5.969622,-2.501094,3.815837,-2.132470,-5.055285,-3.438732,-9.296756,8.140395,-6.780693,1.413487,4.738493,-6.444245,8.775315,-8.885728,1.613416,6.087245,-8.843559,-2.550133,4.976483,-1.350954,-7.393506,7.503171,-3.412027,0.604608,-3.609494,7.796841,-6.060054,0.825049,6.155607,8.810173,-8.921284,8.073008,-9.235755,9.579071,-8.131205,-1.276602,-2.197429,3.669183,-3.705852,9.196049,1.781782,-6.409381,-7.802294,5.142630,-4.910574,3.394097,-0.474142,4.637785,-7.519762,-3.885280,-5.590398,2.116074,5.838110,9.636549,-3.900271,-8.340517,0.925301,8.237441,-0.593489,8.368760,2.172060,-9.677997,0.920076,6.869353,-2.931480,8.768101,-3.539329,1.671743,6.603535,4.921423,1.191014,-1.362636,-6.696624,-7.289651,-0.454327,5.225151,-5.453339,4.053895], dtype = "float64")#candidate|19412|(576,)|const|float64
const_19413 = relay.const([-1,6,6,-2,-5,5,3,-3,-9,-8,-10,-1,-1,2,1,5,-4,-3,-4,-5,3,9,2,-8,9,-3,4,7,7,1,1,-3,9,-7,-2,6,-4,3,6,-1,7,4,-10,-5,2,-6,-5,10,-6,9,-9,5,-9,-1,2,-10,8,8,-6,-4,2,1,-10,3,6,-3,-8,-10,9,-4,3,-7,9,-6,2,-3,-1,-6,-7,-6,3,-10,10,-10,1,-1,7,3,5,10,3,-6,10,-7,10,-2,7,-4,1,-7,7,5,5,-1,-1,-10,8,9,7,-7,-1,10,10,-4,-9,1,8,1,8,-6,6,-3,3,2,-10,-6,9,-1,-9,10,-8,3,9,-9,-9,5,-10,-8,10,2,-1,3,4,9,-8,1,-9,2,-2,6,8,5,-8,1,-6,-10,-1,7,6,9,4,-10,8,-3,-6,2,-10,2,-3,-8,7,-6,-10,4,-10,9,-6,-8,-4,-7,-2,4,9,2,10,2,9,-8,2,4,-6,7,4,8,-8,8,-5,2,10,-7,3,10,7,2,9,-1,-10,6,-4,2,1,-2,4,-2,9,7,-1,5,-4,-7,-2,9,-9,-6,9,-6,9,9,-3,10,-10,-5,3,-9,4,1,6,-8,4,9,1,6,-5,-5,-3,2,1,6,-5,2,-3,-7,-2,-4,-8,-2,10,1,2,-4,1,2,-1,-6,3,8,-1,-5,-2,1,-5,1,2,1,-9,1,-10,4,1,-10,9,2,-6,5,7,-6,-3,-8,-10,-1,3,-1,-4,8,6,-2,7,5,1,1,-9,2,5,-7,8,-6,-1,-8,3,-2,4,-3,8,-6,1,-6,-4,2,-8,-4,8,-1,-6,-4,3,-9,-8,9,2,4,1,-4,10,-4,-5,-7,8,-10,5,5,-9,-6,-7,-4,8,-4,8,6,4,-6,-6,-1,-1,9,6,5,-8,-4,-5,6,4,4,10,2,10,4,-1,10,-8,9,5,-9,4,-8,2,4,-7,-8,10,10,7,8,9,-1,9,10,3,-6,5,-8,1,-10,2,-3,9,-4,7,6,2,-2,-7,-4,2,-7,-8,-3,-7,-5,-3,1,2,-10,-9,-5,-6,-9,-7,-1,-7,-7,1,1,-5,7,5,-1,5,-7,2,3,-7,8,9,7,8,-2,6,-7,2,-8,-3,-5,2,5,2,-1,4,6,-9,-1,7,-5,7,-1,-7,-5,9,1,9,-7,-5,1,8,-1,10,-3,5,9,2,-10,-2,9,2,5,5,-4,2,8,-5,-8,-2,2,-1,-1,5,-9,-4,-8,-8,8,7,-4,7,9,-2,7,-10,-3,-3,3,6,5,-10,-4,8,-2,4,-5,9,-3,3,-6,10,-3,6,1,7,1,10,6,7,-4,3,4,-3,2,6,8,-9,-8,-8,8,4,-3,-5,4,-4,-5,-8,-10,5,-7,-9,-8,8,7,5,-1,3,5,2,1,8,6,4,-6,-5,-1,-8,7,7,3,-9,2,10,-1,-7,-10,-8,-10,10,3,-7,-4,-5,2,-4,5,1,7,-5,4,1,-4,2,-3,-9,2,3,10,6,10,-7,3,-2,-9,-9,6,1,-8,5,-5,-8,-10,-2,8,2,-10,-5,-9,5,4,5,3,2,-6,3,-3,10,-3,-2,2,1,7,7,2,5,6,-8,5,2,-8,5,-7,3,-1,1,2,-5,7,-4,6,7,-9,-10,-4,6,-9,-1,9,-6,-10,-2,-8,-1,3,-4,-7,8,5,-10,2,10,8,8,7,6,9,-2,-8,-2,10,-7,-6,-3,-5,-9,-1,-8,2,6,8,-9,-1,5,-5,10,2,4,-2,-8,-10,-6,8,9,10,9,7,-6,-10,8,6,3,-5,6,4,6,3,-4,-8,2,6,5,-1,2,1,-9,7,-5,-8,2,6,-7,-4,9,2,9,3,1,-4,-5,4,2,-7,6,7,-9,-9,-2,-7,-4,-2,-7,4,1,5,-3,-2,-10,1,6,5,-2,2,-7,5,-8,-4,-4,-6,-8,-2,8,5,3,-6,-5,6,5,-9,7,-6,3,-1,-8,-3,-8,7,-1,5,-8,2,-2,-9,6,-3,-2,-9,7,-3,9,-3,-2,-4,-1,-6,-10,10,-9,-10,7,-10,-2,-5,3,6,-7,-10,7,2,2,7,-6,-5,6,-2,1,-5,4,-2,9,8,6,4,3,3,4,7,-9,-7,-10,-9,2,3,-3,3,-2,-9,-1,4,-1,-9,-7,4,-1,-10,-1,-3,4,-1,9,-2,-6,-9,-5,3,10,-10,-8,-2,7,-3,2,3,10,-4,9,1,-6,-4,-5,-7,-9,-3,-1,-8,-8,9,7,-7,-6,-7,4,10,-10,9,1,2,4,7,-10,-6,-7,10,6,10,-8,-7,-7,-2,-3,-2,-8,-4,-10,8,7,-10,-8,6,-10,6,-7,10,-1,-1,-5,9,-7,-6,4,-9,-9,-3,1,-10,10,-9,-10,9,3,-6,-4,2,7,-10,-3,2,-8,-6,8,10,-4,3,9,-5,-5,-1,-7,-10,-2,-7,-1,-6,6,10,9,-10,-10,-7,8,-3,3,1,8,4,4,-4,2,4,1,-2,3,-3,6,5,-2,-8,-2,-4,-2,2,-2,9,-6,2,8,-10,-5,-5,3,-8,8,-7,-6,-3,-1,-4,-1,5,-7,-5,-10,-5,7,9,-10,4,-2,10,-4,-6,-6,-8,-3,-4,-1,-5,-5,-7,10,4,-2,10,3,-1,3,-4,10,-7,4,-3,-2,7,9,-2,1,-1,-8,6,-2,-8,6,3,-1,-9,2,1,10,-5,-1,8,-5,-2,1,-2,-7,-8,-4,1,1,-2,1,9,1,-10,3,2,-10,-10,-6,-4,5,-8,-2,6,-8,-6,-2,-2,-1,5,4,-1,-4,5,-3,3,-2,-9,-1,-8,3,-9,1,8,-6,3,10,4,4,6,-10,-7,3,9,-3,4,-10,-3,-6,2,-5,4,10,-3,-9,2,-9,2,-7,5,-7,-7,2,10,2,2,7,-3,5,-1,-5,4,2,-8,-8,-10,-2,3,-7,-3,-5,6,-2,10,5,4,4,5,-5,-6,6,7,1,5,5,6,-5,-5,-3,8,6,-9,-7,6,-9,-4,-8,-6,-5,8,-9,1,9,4,-10,-2,-4,7,-7,-3,7,3,2,-4,-10,-6,-9,4,-2,-9,-1,-9,2,-6,2,7,-1,-5,-10,8,1,9,-3,-7,-3,7,9,-1,-3,10,-10,-5,9,-2,8,9,5,1,-4,3,7,3,8,-7,-1,-8,-5,-10,10,-5], dtype = "int64")#candidate|19413|(1232,)|const|int64
call_19411 = relay.TupleGetItem(func_8432_call(relay.reshape(const_19412.astype('float64'), [4, 9, 16]), relay.reshape(const_19413.astype('int64'), [1232,]), ), 0)
call_19414 = relay.TupleGetItem(func_8435_call(relay.reshape(const_19412.astype('float64'), [4, 9, 16]), relay.reshape(const_19413.astype('int64'), [1232,]), ), 0)
func_7560_call = mod.get_global_var('func_7560')
func_7564_call = mutated_mod.get_global_var('func_7564')
var_19422 = relay.var("var_19422", dtype = "uint16", shape = (63,))#candidate|19422|(63,)|var|uint16
call_19421 = relay.TupleGetItem(func_7560_call(relay.reshape(var_19422.astype('uint16'), [3, 7, 3]), relay.reshape(var_19422.astype('uint16'), [3, 7, 3]), relay.reshape(var_19422.astype('uint16'), [3, 7, 3]), ), 3)
call_19423 = relay.TupleGetItem(func_7564_call(relay.reshape(var_19422.astype('uint16'), [3, 7, 3]), relay.reshape(var_19422.astype('uint16'), [3, 7, 3]), relay.reshape(var_19422.astype('uint16'), [3, 7, 3]), ), 3)
output = relay.Tuple([uop_19396,call_19411,const_19412,const_19413,call_19421,var_19422,])
output2 = relay.Tuple([uop_19396,call_19414,const_19412,const_19413,call_19423,var_19422,])
func_19429 = relay.Function([var_19395,var_19422,], output)
mod['func_19429'] = func_19429
mod = relay.transform.InferType()(mod)
var_19430 = relay.var("var_19430", dtype = "float64", shape = (9, 4, 13))#candidate|19430|(9, 4, 13)|var|float64
var_19431 = relay.var("var_19431", dtype = "uint16", shape = (63,))#candidate|19431|(63,)|var|uint16
output = func_19429(var_19430,var_19431,)
func_19432 = relay.Function([var_19430,var_19431,], output)
mutated_mod['func_19432'] = func_19432
mutated_mod = relay.transform.InferType()(mutated_mod)
var_20186 = relay.var("var_20186", dtype = "uint64", shape = ())#candidate|20186|()|var|uint64
var_20187 = relay.var("var_20187", dtype = "uint64", shape = (13, 14, 2))#candidate|20187|(13, 14, 2)|var|uint64
bop_20188 = relay.greater(var_20186.astype('bool'), var_20187.astype('bool')) # shape=(13, 14, 2)
output = relay.Tuple([bop_20188,])
output2 = relay.Tuple([bop_20188,])
func_20197 = relay.Function([var_20186,var_20187,], output)
mod['func_20197'] = func_20197
mod = relay.transform.InferType()(mod)
mutated_mod['func_20197'] = func_20197
mutated_mod = relay.transform.InferType()(mutated_mod)
func_20197_call = mutated_mod.get_global_var('func_20197')
var_20199 = relay.var("var_20199", dtype = "uint64", shape = ())#candidate|20199|()|var|uint64
var_20200 = relay.var("var_20200", dtype = "uint64", shape = (13, 14, 2))#candidate|20200|(13, 14, 2)|var|uint64
call_20198 = func_20197_call(var_20199,var_20200,)
output = call_20198
func_20201 = relay.Function([var_20199,var_20200,], output)
mutated_mod['func_20201'] = func_20201
mutated_mod = relay.transform.InferType()(mutated_mod)
var_20237 = relay.var("var_20237", dtype = "float32", shape = (8, 7, 5))#candidate|20237|(8, 7, 5)|var|float32
uop_20238 = relay.sinh(var_20237.astype('float32')) # shape=(8, 7, 5)
output = uop_20238
output2 = uop_20238
func_20242 = relay.Function([var_20237,], output)
mod['func_20242'] = func_20242
mod = relay.transform.InferType()(mod)
mutated_mod['func_20242'] = func_20242
mutated_mod = relay.transform.InferType()(mutated_mod)
var_20243 = relay.var("var_20243", dtype = "float32", shape = (8, 7, 5))#candidate|20243|(8, 7, 5)|var|float32
func_20242_call = mutated_mod.get_global_var('func_20242')
call_20244 = func_20242_call(var_20243)
output = call_20244
func_20245 = relay.Function([var_20243], output)
mutated_mod['func_20245'] = func_20245
mutated_mod = relay.transform.InferType()(mutated_mod)
var_20311 = relay.var("var_20311", dtype = "float32", shape = (14, 14, 1))#candidate|20311|(14, 14, 1)|var|float32
uop_20312 = relay.asinh(var_20311.astype('float32')) # shape=(14, 14, 1)
func_3834_call = mod.get_global_var('func_3834')
func_3838_call = mutated_mod.get_global_var('func_3838')
const_20320 = relay.const([[-0.309234,5.511178,5.885150,5.374658,-7.320128,-1.760380,9.231586,3.992380,-1.125237,5.189529,-9.420662,-7.383677,-5.624380,-9.126719,4.665967,4.047718,-4.821942,-5.025289,0.376405,9.875226,9.455784,-3.651025,-1.233573,3.070111,0.534766,2.840622,5.875433,-2.300501,6.749256,-9.635909,1.612751,2.883569,-8.810186,1.122532,2.279227,-4.337904,-9.059101,-6.918938,-9.077576],[7.449858,-5.161863,6.941535,4.665720,4.828795,-5.232489,3.435751,4.205184,6.080468,-1.784988,4.190837,3.805648,-5.986600,3.836469,0.049985,7.360713,7.710447,0.494037,2.116195,-2.291188,-7.315793,-2.286140,-7.184382,-6.490338,-5.558220,5.206768,-8.917139,1.988527,-4.600166,2.891743,-9.488576,6.873263,-1.744823,-5.256675,6.980938,-4.987235,1.486254,7.790045,5.481733],[0.280386,4.004518,9.840992,-3.766804,-9.369599,3.310484,-9.633849,-8.476186,1.239305,-8.117659,-3.626464,-3.321688,8.199551,-2.048475,-8.126102,-8.695127,2.092618,-6.776444,-2.564491,7.836019,7.299598,-3.259249,-5.484872,2.440052,-4.119411,3.195539,9.754076,1.606504,4.578954,-6.684661,5.609442,6.491625,-7.282162,-8.808410,-5.455204,1.674504,-0.804402,6.386625,8.838976],[2.137038,0.620763,-8.425560,-4.492158,0.131337,3.941104,4.578927,7.215156,9.209430,-6.625106,-6.474728,9.681276,8.393947,5.589975,-8.032886,2.236563,-8.280577,-0.139304,-3.729274,4.876347,-9.473978,6.516328,7.860547,7.968329,-2.624700,-8.302114,-4.696781,-8.822604,-7.821318,8.568706,-4.563833,-5.241748,8.309079,-9.866391,4.530884,4.668981,-7.056207,-2.146988,7.919537],[5.816398,0.829058,-1.241965,8.951248,3.744319,2.480269,9.987506,-3.685678,-1.281012,-3.084347,1.074007,-3.424179,-9.244017,0.616253,1.153887,-7.043275,-5.546391,-5.838962,4.811682,8.043826,5.522407,5.625277,5.224106,-3.486972,7.351470,-6.231595,8.009516,-2.000344,4.012424,-1.366697,-8.475394,0.807971,-6.977355,-8.157194,-8.139728,0.697383,-4.075187,-4.477114,-1.299055],[4.014010,9.298678,-3.287825,8.187367,-3.186452,-6.981057,0.721420,8.694738,1.323218,-2.528168,-3.597429,3.935094,0.502908,-8.275997,2.384728,-0.217154,4.646166,-2.238507,-7.200029,-1.674357,3.013279,0.639916,1.432722,1.526122,9.752769,-5.853996,-1.433190,0.629140,8.738670,4.854109,-9.356739,-7.712356,-5.920406,8.394014,-4.188398,1.863781,-0.241043,-3.054208,-8.097113],[-2.397971,8.480385,8.886807,-0.308165,8.576030,-6.083233,8.625918,0.863278,-1.302410,-3.566419,-3.500254,0.255545,-1.454382,7.513143,-6.866845,2.703917,2.250157,3.176755,-5.151978,0.051036,-9.368035,3.235258,-8.565770,1.514224,-2.906613,-1.645456,-8.621848,-0.779312,9.661699,0.936015,4.131400,-3.375306,7.019412,0.966030,4.249059,-5.323382,7.019557,7.657348,-1.505143],[-6.205718,5.507902,6.943077,0.329605,-8.795947,7.420599,-0.990237,-6.596636,9.581879,-4.300937,-3.761566,4.923330,1.782826,-5.224082,-1.444392,8.017160,6.433724,4.393276,-3.033735,-6.891539,4.995023,-6.645737,7.539091,-6.714191,3.255609,8.787198,7.549501,-8.656340,1.034334,2.069887,9.440083,2.492157,6.515359,1.393049,7.889456,8.253639,-4.177175,-3.048550,-2.339019],[-3.914123,5.672867,0.384226,7.592942,-0.171585,-6.542552,-3.757266,-9.327075,-4.526969,1.321408,-5.881942,-3.475316,6.243800,4.367377,-6.042961,8.243172,2.088787,-2.262103,6.788267,-3.010064,4.308598,2.266283,-1.932043,7.858109,-5.763627,6.837450,4.277798,-7.477455,-0.267325,-6.008209,5.627164,5.594514,-7.823059,-1.964097,5.760545,9.807120,0.892957,4.490190,5.949193],[8.651508,4.559778,-8.037512,-0.217248,1.439450,-0.578010,9.638371,7.316984,5.512025,-2.240543,6.097785,-1.474320,-8.825252,-6.724423,-4.389795,-6.171056,0.391031,-5.758874,-3.658001,-4.931975,4.004876,7.694921,-7.431965,7.025122,7.298240,0.480197,-7.604504,1.762351,-1.354430,-1.674911,1.016112,-7.041186,-4.072735,-8.080058,5.466483,-7.647809,-1.238166,0.453861,8.306379],[-6.658069,-1.279023,5.242402,0.852303,-6.238389,-3.488241,-1.226828,5.199625,-3.925015,0.179500,8.143950,8.610635,7.147589,0.948381,1.357600,-6.548322,7.418795,6.141255,9.538983,-5.588522,-5.090714,-4.952695,-4.305174,7.845503,3.052249,-8.867052,7.069711,-8.056091,9.736174,3.239155,-5.833498,-8.154771,4.070246,2.653961,-3.444528,-1.289188,-7.399376,-4.708621,-6.470653],[-8.650662,-3.510950,-3.394147,-1.252921,7.323144,1.170379,-5.571837,-0.405318,5.154131,8.547443,-3.710374,-2.923252,-9.781690,2.830759,-5.677543,1.791167,2.438839,3.923039,7.700315,-1.952140,7.727982,-8.015906,-5.729431,-5.526521,-9.767754,-2.447214,6.937268,2.575031,0.968660,-0.616220,-4.811695,-9.567474,-4.818840,-2.767614,-3.684069,-9.612036,-0.529875,5.221455,3.795386],[-7.947693,0.870836,-3.021789,-8.425299,2.510071,-7.402713,2.270595,5.777259,-5.153652,7.740353,2.648575,0.855546,5.201855,-9.717924,-4.629110,-6.770144,7.244053,3.796726,-6.015393,1.286455,-3.477708,-5.463450,3.062690,8.218952,5.885579,-1.543800,-9.041298,-2.522178,5.892672,2.183293,-2.923341,-7.442451,8.575452,9.798606,4.540872,2.187584,-0.137559,3.123541,6.390370]], dtype = "float32")#candidate|20320|(13, 39)|const|float32
const_20321 = relay.const([[5,-5],[10,-10],[10,6],[7,-4],[-1,5],[3,1],[-2,-8],[4,10],[-1,-4],[1,-2],[3,4],[-4,-6],[-9,4],[10,4],[6,10],[-3,9],[9,5],[-7,-1],[-6,2],[-5,-5],[-9,4],[4,5],[9,10],[-6,-8],[-4,5],[9,-4],[10,3],[6,10],[6,-5],[2,-2],[5,-7],[-3,-8],[-5,2],[8,8],[-4,5],[-8,-5],[9,-9],[-2,-5],[3,8],[6,-6],[-8,4],[-4,3],[-3,8],[-3,10],[-5,-6],[7,3],[-3,7],[8,10],[-2,1],[-7,2],[3,5],[-4,-10],[1,-7],[-7,-10],[3,10],[3,-7],[-4,-10],[3,5],[3,3],[-3,10],[9,4],[-10,-4],[6,-4],[4,5],[-2,-1],[7,2],[-5,1],[10,-4],[9,-2],[-6,1],[2,10],[-7,-8],[-10,-5],[-6,-10],[3,-1],[-1,9],[4,-8],[-2,2],[-4,-2],[7,-1],[8,5],[4,4],[-7,8],[9,9],[-1,-6],[7,8],[10,4],[9,-6],[5,2],[-9,7],[-3,-3],[4,-8],[10,-9],[9,10],[-9,-9],[-4,-7],[8,-8],[-8,-10],[-10,3],[-6,1],[4,5],[-9,-5],[1,-7],[8,-4],[3,-1],[5,-2],[-6,-10],[-6,10],[-3,5],[10,-10],[-3,6],[3,8],[-9,9],[-4,-2],[-7,-3],[-5,3],[8,2],[10,-6],[1,6],[1,-1],[5,-6],[-2,9],[1,2],[-7,-6],[7,-10],[1,9],[8,-7],[-1,9],[2,-5],[4,-6],[8,-2],[5,9],[-5,-8],[-4,8],[4,3],[6,1],[9,-4],[2,9],[6,-4],[-9,-4],[1,-1],[-10,-1],[4,10],[-7,-10],[9,-1],[-2,10],[4,-10],[8,-7],[7,-5],[7,-1],[-7,-3],[-4,-1],[6,1],[-2,7],[-6,1],[4,-4],[-6,-8],[-3,5],[10,6],[-2,-6],[-9,-8],[9,-9],[4,-2],[7,-9],[-2,-7],[-6,9],[-10,-1],[-2,-3],[-3,5],[6,-10],[3,-1],[5,-5],[-7,-6],[-5,-8],[-7,-9],[5,3],[-3,-1],[-2,3],[2,-6],[-6,-5],[-1,5],[-3,-3],[3,3],[-4,-5],[3,-7],[-6,10],[6,4],[-5,2],[-8,-4],[-1,3],[-8,9],[3,10],[1,-2],[-10,4],[8,-6],[7,-3],[-7,9],[-3,-10],[-1,3],[-5,1],[-10,3],[-7,4],[5,10],[-9,10],[-9,4],[1,3],[6,-5],[6,-7],[1,6],[6,-5],[3,-4],[10,8],[1,1],[7,4],[-7,4],[-7,2],[10,-5],[-2,-9],[6,7],[7,5],[-9,-10],[8,10],[4,-3],[-5,-8],[4,3],[-4,1],[4,-3],[-3,-9],[-5,-9],[-6,2],[-2,-1],[-9,4],[-2,9],[9,-5],[-8,-4],[-9,1],[3,-6],[-8,-8],[-3,-9],[-8,6],[-2,-6],[-7,-4],[9,5],[-2,-1],[8,-5],[-8,-7],[2,3],[-3,-1],[-8,-5],[-8,-1],[6,7],[4,-4],[-5,-9],[10,4],[-3,3],[6,10],[9,-10],[-4,-5],[6,-8],[-10,-3],[1,-10],[9,4],[-8,8],[9,9],[-5,6],[-9,10],[5,-8],[-2,1],[-6,-4],[-2,-6],[5,8],[4,-5],[-8,8],[4,-5],[-8,7],[7,-3],[9,-7],[-8,-5],[9,-9],[1,-3],[5,-8],[-9,-9],[9,7],[3,8],[-9,-5],[8,-10],[-3,9],[2,-5],[-1,-5],[8,-1],[9,-3],[-10,-4],[-4,6],[1,8],[-4,10],[-6,3],[9,-2],[-2,-4],[-1,-5],[7,-9],[-10,-4],[2,5],[-6,-4],[-1,2],[4,7],[-4,-9],[9,5],[-5,1],[-1,8],[-5,-1],[-9,5],[-3,10],[-10,-5],[9,9],[-10,-7],[1,2],[-1,7],[-3,-10],[3,-2],[2,-4],[-8,-7],[5,-8],[10,-9],[1,5],[2,-9],[10,7],[5,-2],[9,9],[6,-6],[-2,5],[-8,-5],[8,3],[1,2],[3,7],[-9,9],[6,7],[6,5],[8,1],[6,8],[-7,-1],[5,2],[-5,8],[-9,-5],[-4,8],[-8,7],[-5,-5],[-4,3],[4,-10],[9,6],[2,-1],[-10,-7],[-1,-4],[2,-6],[-2,5],[3,-7],[-4,-3],[10,1],[3,4],[-10,-10],[10,9],[-7,-6],[-7,-5],[1,-7],[-9,-1],[2,-3],[-6,10],[8,7],[6,-7],[-3,2],[-5,2],[8,-2],[2,8],[-5,-10],[-5,-7],[2,2],[-9,9],[-3,-6],[7,-6],[-7,-4],[2,-4],[-2,-8],[-9,-2],[8,-7],[3,1],[-8,-6],[-4,1],[-1,-2],[-8,9],[-3,7],[-1,-2],[-2,-6],[-6,5],[-3,-2],[3,8],[-10,-8],[7,6],[-6,1],[-3,8],[2,4],[-10,-6],[10,-2],[3,1],[-2,-2],[8,-8],[-3,4],[4,3],[6,7],[-8,3],[-1,3],[6,-7],[-2,-7],[9,7],[-8,9],[-2,9],[-2,4],[-1,8],[-1,-6],[-4,5],[-2,-10],[-2,2],[-7,2],[-5,-7],[-9,-7],[-9,2],[5,-9],[1,-8],[-8,5],[-5,-10],[9,-2],[-4,1],[2,-6],[10,-1],[8,-5],[5,3],[2,-5],[-6,-7],[-8,-9],[-10,8],[6,-2],[-3,-5],[-4,1],[4,5],[3,-10],[7,-4],[-8,9],[-1,1],[4,8],[-8,-8],[3,-6],[-3,-2],[-2,-5],[-2,6],[-10,-10],[-6,2],[4,-7],[1,7],[-5,1],[-5,-4],[5,-8],[8,9],[-2,1],[-9,8],[-3,8],[-10,-7],[9,3],[-1,10],[8,-5],[3,6],[-2,-3],[-10,-4],[6,6],[-6,-9],[3,8],[-10,-3],[8,7],[-1,-7],[8,4],[1,-2],[10,2],[-2,-3],[-4,-2],[9,5],[1,-9],[2,5],[-7,9],[-7,-6],[-8,-4],[-9,7],[10,-10],[-5,6],[-6,10],[2,10],[-4,-1],[10,9],[6,-10],[2,10],[9,1],[-6,9],[4,10],[5,-7],[-8,2],[-6,8],[6,-8],[-7,10],[-2,-7],[-8,10],[6,-1],[-9,9],[-9,-5],[-2,8],[1,6],[-6,-4],[-5,-7],[-9,-8],[7,5],[-10,-3],[-5,-3],[-3,5],[-6,-4],[5,-3],[8,7],[8,-2],[5,-3],[4,-3],[6,8],[-4,5],[-3,-4],[-8,-1],[8,-6],[5,1],[5,-4],[-10,8],[2,5],[-8,-8],[1,9],[1,-6],[2,-3],[-9,-7],[-8,5],[-10,4],[-8,8],[1,-9],[9,4],[2,7],[3,8],[-6,-8],[10,10],[6,-3],[-3,2],[-8,8],[9,-7],[3,4],[6,8],[9,-6],[-9,10],[-10,-10],[4,9],[-5,1],[-1,6],[2,10],[1,2],[3,-10],[4,-8],[5,-7],[1,2],[5,9],[-2,9],[-4,4],[6,5],[1,2],[9,10],[-7,2],[-5,6],[-10,5],[2,5],[-3,-9],[-2,8],[4,-9],[-9,7],[-7,6],[5,-3],[6,6],[4,-4],[-8,-3],[9,-6],[-1,-8],[-5,6],[5,-8],[-3,7],[1,-7],[-5,-1],[6,-7],[-5,-10],[7,7],[-2,-6],[5,7],[-4,-9],[-10,-9],[9,-1],[-4,-10],[9,-7],[7,-10],[9,5],[-9,5],[-9,-8],[1,3],[9,-5],[-2,4],[-4,-10],[7,9],[4,-3],[6,-6],[-2,-1],[4,-5],[10,6],[6,3]], dtype = "int64")#candidate|20321|(616, 2)|const|int64
call_20319 = relay.TupleGetItem(func_3834_call(relay.reshape(const_20320.astype('float32'), [3, 13, 13]), relay.reshape(const_20320.astype('float32'), [3, 13, 13]), relay.reshape(const_20321.astype('int64'), [4, 308]), ), 1)
call_20322 = relay.TupleGetItem(func_3838_call(relay.reshape(const_20320.astype('float32'), [3, 13, 13]), relay.reshape(const_20320.astype('float32'), [3, 13, 13]), relay.reshape(const_20321.astype('int64'), [4, 308]), ), 1)
func_13324_call = mod.get_global_var('func_13324')
func_13326_call = mutated_mod.get_global_var('func_13326')
var_20324 = relay.var("var_20324", dtype = "float32", shape = (1, 1050))#candidate|20324|(1, 1050)|var|float32
call_20323 = func_13324_call(relay.reshape(var_20324.astype('float32'), [14, 15, 5]))
call_20325 = func_13324_call(relay.reshape(var_20324.astype('float32'), [14, 15, 5]))
bop_20329 = relay.divide(uop_20312.astype('float32'), var_20324.astype('float32')) # shape=(14, 14, 1050)
output = relay.Tuple([call_20319,const_20320,const_20321,call_20323,bop_20329,])
output2 = relay.Tuple([call_20322,const_20320,const_20321,call_20325,bop_20329,])
func_20353 = relay.Function([var_20311,var_20324,], output)
mod['func_20353'] = func_20353
mod = relay.transform.InferType()(mod)
mutated_mod['func_20353'] = func_20353
mutated_mod = relay.transform.InferType()(mutated_mod)
func_20353_call = mutated_mod.get_global_var('func_20353')
var_20355 = relay.var("var_20355", dtype = "float32", shape = (14, 14, 1))#candidate|20355|(14, 14, 1)|var|float32
var_20356 = relay.var("var_20356", dtype = "float32", shape = (1, 1050))#candidate|20356|(1, 1050)|var|float32
call_20354 = func_20353_call(var_20355,var_20356,)
output = call_20354
func_20357 = relay.Function([var_20355,var_20356,], output)
mutated_mod['func_20357'] = func_20357
mutated_mod = relay.transform.InferType()(mutated_mod)
var_20487 = relay.var("var_20487", dtype = "uint64", shape = (8, 14, 6))#candidate|20487|(8, 14, 6)|var|uint64
var_20488 = relay.var("var_20488", dtype = "uint64", shape = (8, 14, 6))#candidate|20488|(8, 14, 6)|var|uint64
bop_20489 = relay.greater_equal(var_20487.astype('bool'), relay.reshape(var_20488.astype('bool'), relay.shape_of(var_20487))) # shape=(8, 14, 6)
func_13324_call = mod.get_global_var('func_13324')
func_13326_call = mutated_mod.get_global_var('func_13326')
const_20498 = relay.const([3.142136,3.862284,3.431173,7.783999,0.037522,-9.155617,0.488733,6.010187,0.123527,-4.579058,-2.780280,6.986831,5.840143,8.288717,-8.531496,1.206920,2.648688,-8.775360,9.834910,-3.843714,-5.174952,8.845440,1.403050,8.376639,-6.967350,1.591696,-0.956857,-8.145361,7.922707,-2.979374,-7.222054,9.367659,-7.157844,-0.262737,7.061308,-0.441100,0.573492,-6.974317,4.450803,9.774855,5.689974,-5.612990,1.096434,-1.859989,-6.226698,-7.158649,-4.501573,-4.560233,1.564080,-3.670162,-4.332969,-7.707410,-7.780723,-0.301881,4.299539,4.983080,3.755326,-8.061376,3.305274,8.537755,3.967115,-9.820802,5.042258,-7.183995,-6.629970,5.736199,-5.700231,-8.024308,-8.929354,-6.373928,6.775415,8.667823,0.467468,5.049106,-0.474073,-5.244699,0.557133,4.462375,-2.950558,2.833032,9.987274,3.701003,4.855254,-8.545401,-3.461714,3.478317,5.295883,-8.248993,-6.923406,7.647050,-2.965918,-6.460519,-2.331455,-9.397586,9.941680,1.111671,5.368462,-2.322795,2.860059,-2.253493,5.284176,1.921040,-1.198667,3.237840,3.774794,2.859498,4.912258,7.432915,-1.336342,-8.527975,-3.370638,-4.736304,-4.437585,-8.390268,4.524336,6.311897,-9.536964,9.670971,0.139305,1.601995,0.598783,-2.332636,-8.789390,8.284860,-1.268230,-1.167473,8.709564,-2.109351,-2.671248,4.393491,3.499814,-7.266807,8.800378,0.009013,1.181138,-5.639502,7.044312,6.215810,-1.246961,-9.406449,-4.621078,1.063847,2.844513,0.404977,-4.468553,-6.687633,3.378481,3.005913,-5.354563,0.648516,3.664353,4.105855,6.817231,-9.554946,7.611851,-3.938407,-3.130913,0.265443,4.908056,7.917918,-8.322274,9.788926,-7.975512,-7.074805,8.676033,-8.372214,9.127951,-1.802282,-3.138595,3.567212,1.418609,7.815664,7.830375,-2.156350,2.154712,3.375178,6.267587,-1.989765,3.639093,-3.304929,-7.396991,-8.725952,-1.368042,-9.538626,1.343397,-2.440996,1.129918,-5.477551,4.139552,3.403451,-9.413197,-4.530771,-7.273485,-9.738068,2.777908,-1.974516,2.355907,-0.883969,5.850861,3.404842,-5.288402,-7.006121,2.293642,-5.969155,2.702056,-5.856547,-1.477659,1.923940,1.895311,8.957908,-3.831639,-3.586441,-3.073916,-8.183064,-2.088418,-2.461669,5.822124,-9.870438,-5.263330,6.890475,3.456352,5.512978,-3.079475,-4.631550,-8.174853,5.853911,4.818882,8.526894,-6.024993,-3.622795,4.627869,3.300327,2.733744,6.809408,-3.092641,5.128948,-6.036396,-7.027225,8.941710,-5.093265,-6.400914,-3.639310,-9.965994,5.807036,1.396040,7.946416,-8.622923,-3.991984,-9.733937,3.571165,-0.753172,-7.151028,-7.628470,-6.627791,0.565816,7.545246,-7.923858,-3.518746,8.180079,7.515807,3.546279,5.137169,9.012079,7.934567,-2.284179,-5.248191,1.619958,3.884455,7.370081,1.485231,2.663212,-1.259596,-5.390133,-4.017102,-6.865513,6.500018,-5.688156,-7.010637,-4.793649,2.626882,-7.898915,6.945587,1.453765,8.788730,-5.513743,1.235959,-7.507364,0.890054,-5.160166,-3.229314,1.277612,-4.841978,2.271074,9.079512,-1.168800,-5.253563,4.908339,-3.064469,-5.803182,7.919613,-9.061168,-5.636473,6.313585,-3.866346,4.303865,-1.882995,-0.931835,-7.002539,1.118293,3.495173,3.680637,3.764438,6.907093,5.344204,4.119406,1.789149,7.089217,-3.641986,3.842863,8.429652,-0.423801,-3.949907,-0.649823,-5.695146,-6.751514,-6.203697,1.897776,-0.433169,6.947670,-4.796558,6.803021,5.921106,-7.836082,2.580343,-5.261724,-2.105357,-1.770690,2.115825,-9.020664,2.302539,2.831026,-5.305246,7.633615,0.357565,-6.241355,9.303596,8.497615,-4.761763,9.773490,-6.665919,-9.883429,-0.405125,2.323505,-3.484352,5.014942,-9.936977,9.292461,0.825736,-1.889964,8.945867,-0.698209,-4.890774,2.169871,2.384587,-8.575428,-3.364820,4.572852,6.063126,-9.834529,-9.982607,1.095044,-6.994944,7.392735,9.961775,9.926769,-9.145441,-5.757875,3.536796,3.511572,-8.015460,-5.950600,0.551587,7.653527,-4.675684,-1.245197,3.215326,-5.311395,-6.192793,1.291504,2.727805,-8.325350,-9.217767,-5.932409,2.734674,3.944422,0.004755,-4.469881,0.268364,9.457619,-6.205022,-0.020444,-8.459612,9.316496,-3.947899,-7.343543,8.861725,1.502007,6.515113,-7.548768,3.822428,-0.352624,0.564375,9.783282,-6.222202,1.412241,-5.934142,-6.141969,-1.001207,0.372906,-9.747021,-9.901316,8.503541,-9.255620,6.681358,9.258757,-0.255729,4.304724,-2.313281,-7.272781,4.721085,7.784834,5.080992,-0.223388,-6.203728,-4.242738,-2.971921,-0.977918,-2.242670,-9.383020,0.572332,-7.722520,-6.410343,-7.264076,6.103161,2.672246,-7.524774,-9.208554,2.326681,9.356309,5.995646,-0.651889,-4.629108,5.809586,6.313407,-8.016220,3.375184,-0.833743,-1.028121,-4.473998,7.510446,-9.219091,3.148689,2.439880,-5.688861,-8.874700,-1.482656,0.394258,9.687274,6.234785,-1.046104,-6.144211,6.985759,9.718733,5.659635,0.864538,-9.905284,-2.742079,-4.739676,-4.782130,-2.292584,-5.915633,3.186491,0.024202,-2.185857,-1.993670,-7.095384,-0.692474,7.513737,8.113918,-8.477861,-6.012335,-9.941726,-1.992615,-0.982168,9.891021,1.358503,-7.699676,3.836669,2.667720,-1.852579,6.023182,-1.115245,-1.441502,6.218550,-2.043084,-9.061806,-6.467640,1.294025,-2.203211,4.337928,-7.793299,7.761630,-2.919416,-1.477662,6.425158,7.368077,7.340284,-4.939660,2.737750,2.764132,7.772557,-2.142908,5.964965,-1.604070,-7.994291,3.909597,-4.197512,4.365619,-2.835412,9.770756,-7.908189,-2.625192,-1.819244,-9.488908,-6.742229,-9.468387,2.241500,-4.223298,-3.589207,-5.965410,-6.560540,-2.180882,0.469105,7.542812,2.944350,8.531545,2.955277,-9.654018,-1.589671,-7.396086,-3.793334,0.596537,0.860222,-3.066018,-9.453045,-2.072855,9.736541,-3.118857,-5.328168,-5.308233,-0.351536,-4.455398,4.127519,6.364136,2.958458,-8.367883,-3.317009,0.633871,8.251718,-3.221821,7.525406,7.796737,6.195616,6.954794,2.988124,2.248269,1.894175,-8.086704,-1.291587,-0.461188,9.137024,-9.794591,-1.078863,4.343083,5.514680,-5.405869,7.932934,4.061440,5.248598,-6.860679,-4.105086,-6.078168,0.252461,-1.967981,-8.104179,0.916485,-8.309618,-4.266043,-9.579515,-2.253577,9.412949,-1.753070,-4.866703,2.316816,-3.062857,0.804791,4.588356,-0.632052,-9.049393,5.218298,6.855532,-9.723664,-3.331486,9.749249,-2.706009,-0.113588,-9.986918,-3.412355,3.441572,-2.152698,-1.436414,-3.561750,6.329922,-3.996449,-5.543867,-7.469579,1.630357,2.508739,5.824960,-8.551164,-7.963048,0.137832,8.651404,-2.857908,7.223640,-3.455218,-7.118310,-1.158472,6.818506,7.510173,-5.980804,8.612081,-2.788609,8.533961,6.078156,6.669648,-9.531799,-4.918127,0.396143,-6.206534,3.245270,-1.949221,-0.562030,5.321583,4.344599,7.984390,2.191710,5.977146,9.017892,2.481063,-1.036227,-6.423374,-1.585812,-7.273834,3.191563,-1.554385,8.419348,-1.598283,0.579290,7.317060,-9.113214,-6.450136,-0.975575,9.640635,-9.659496,-5.464283,-7.883075,-0.816626,-0.962490,-0.228924,4.084327,-9.073353,2.295343,-6.064308,7.874654,4.415217,-6.460750,7.685435,-3.869270,-4.496935,2.618674,0.655438,-8.855646,-0.171047,9.024587,-0.122729,-5.951659,8.299356,-7.116258,-3.070486,-1.409399,5.458186,-7.885591,7.035839,-4.137505,4.848868,-9.003432,1.616695,-0.458524,0.700397,-2.932850,6.614618,5.769586,-6.433737,-9.955050,8.678424,-6.651705,-6.032945,5.198720,1.812659,3.246587,8.004600,-5.612372,-4.838105,9.373886,-9.039802,-3.822991,-4.897035,-6.159251,1.300870,8.691014,1.170179,6.529735,-0.202189,7.570631,-3.933827,2.498082,3.400832,-8.514390,-5.556049,8.282713,3.084814,-8.560048,0.687608,-9.713078,-9.647779,4.722390,-2.385207,3.369142,8.305428,-0.569439,7.864481,-6.713349,7.329789,8.837272,-8.104697,-9.017493,-0.988797,4.564425,-4.860376,-7.888536,4.360724,-2.805681,-4.879879,1.885619,6.324418,-0.182088,3.572261,9.740984,4.612586,-9.586631,7.295080,-7.235507,-4.640589,-3.208731,3.250410,1.424825,-9.609468,-6.352412,1.660106,0.680993,-5.290667,4.190800,-1.637665,-7.383938,3.489249,3.597368,-0.983294,-3.198752,5.679478,5.789200,2.494171,9.581400,-4.299700,4.375107,3.780846,-3.978771,-0.606193,3.853094,-0.139345,-7.622822,5.957327,9.367119,5.938452,-1.698256,-0.592234,-1.428256,-9.653782,4.135280,2.194714,-6.150022,6.385967,-2.850057,-1.864360,-6.611608,-7.229785,4.042538,-1.235451,7.146558,-9.797260,-1.631020,5.515190,5.197599,4.197460,-3.721339,1.609548,3.469894,-7.347553,-5.012804,-8.602048,7.605180,8.249632,-3.211060,1.830052,-5.629603,3.412289,-0.269379,1.183723,-3.824493,5.299324,0.912665,5.459662,9.683030,6.776984,-2.273991,3.062672,-5.687103,-6.942960,-4.542987,-1.673764,-6.543626,-5.787743,-9.665127,-7.781422,-9.100435,6.302173,-9.315926,-8.834012,-0.805289,8.538612,8.040562,4.893015,1.487009,-5.298286,1.436938,-7.542651,-5.084568,7.948259,-7.947980,7.072713,9.133838,5.146218,0.298150,4.181822,3.797807,0.088093,6.126666,-0.429751,-4.650776,3.340266,5.139780,8.220085,-5.059628,-9.238073,-0.993316,6.665073,-8.006416,7.249057,-9.990221,-8.119876,3.999240,4.426033,-0.920255,-7.890444,-3.481534,-4.637517,2.783015,-9.901006,-8.511566,4.156720,-9.776057,-2.892202,2.778408,9.306705,4.551989,9.645178,5.416711,0.413699,-3.107056,-2.923345,1.054849,-3.621518,6.823451,-7.336376,4.640857,-9.788847,-1.643370,-0.894613,2.639722,-5.307256,3.642399,1.465481,-3.014486,-0.648822,-5.098218,5.700488,-6.496757,5.366510,-7.630974,4.129644,4.613540,-1.509018,3.011927,2.940147,-1.962797,8.550715,4.274930,-9.561733,0.143691,-4.172947,1.267043,-0.750629,9.671350,0.723051,7.988151,7.190071,1.353450,5.711802,-0.163454,3.746107,-9.972123,5.046222,6.078928,6.791273,-6.088032,9.510220,1.154056,6.605535,2.761767,6.034626,-3.434259,9.320231,-7.911739,-6.379995,1.802334,5.918330,-0.261391,5.772535,-1.550020,-8.166281,-7.281839,-3.745987,4.779020,-8.508262,9.900066,-7.405518,-1.763058,5.257346,-1.454926,7.011100,2.701174,7.895791,3.336874,2.667906,6.326625,8.021946,6.377999,1.334325,8.827711,5.805880,3.267293,-6.309748,5.948804,-3.423656,7.744062,0.369663,-1.674066,-2.458935,8.556331,3.533942,-7.186414,-3.576540,5.781231,-6.544834,4.620406,0.374468,9.577348,-4.076030,2.346807,-0.953854,3.092205,6.266806,-3.131118,8.735158,8.739262,-8.880216,3.539405,-0.479560,7.673558,-7.921365,-0.592530,8.568345,5.533105,6.128201,4.570493,-9.545876,9.019046,-5.509934,0.980808,-1.634421,1.231701,-9.325263,3.585008,5.632287,-3.733806,-0.599143,7.313511,-0.949310,3.703651,0.295000,-0.062248,2.771975,5.460897,9.811249,-1.187301,8.976336,1.597104,-9.010007,-3.642323,6.027365], dtype = "float32")#candidate|20498|(1050,)|const|float32
call_20497 = func_13324_call(relay.reshape(const_20498.astype('float32'), [14, 15, 5]))
call_20499 = func_13324_call(relay.reshape(const_20498.astype('float32'), [14, 15, 5]))
var_20505 = relay.var("var_20505", dtype = "uint64", shape = (8, 14, 6))#candidate|20505|(8, 14, 6)|var|uint64
bop_20506 = relay.subtract(var_20488.astype('int64'), relay.reshape(var_20505.astype('int64'), relay.shape_of(var_20488))) # shape=(8, 14, 6)
output = relay.Tuple([bop_20489,call_20497,const_20498,bop_20506,])
output2 = relay.Tuple([bop_20489,call_20499,const_20498,bop_20506,])
func_20509 = relay.Function([var_20487,var_20488,var_20505,], output)
mod['func_20509'] = func_20509
mod = relay.transform.InferType()(mod)
mutated_mod['func_20509'] = func_20509
mutated_mod = relay.transform.InferType()(mutated_mod)
func_20509_call = mutated_mod.get_global_var('func_20509')
var_20511 = relay.var("var_20511", dtype = "uint64", shape = (8, 14, 6))#candidate|20511|(8, 14, 6)|var|uint64
var_20512 = relay.var("var_20512", dtype = "uint64", shape = (8, 14, 6))#candidate|20512|(8, 14, 6)|var|uint64
var_20513 = relay.var("var_20513", dtype = "uint64", shape = (8, 14, 6))#candidate|20513|(8, 14, 6)|var|uint64
call_20510 = func_20509_call(var_20511,var_20512,var_20513,)
output = call_20510
func_20514 = relay.Function([var_20511,var_20512,var_20513,], output)
mutated_mod['func_20514'] = func_20514
mutated_mod = relay.transform.InferType()(mutated_mod)
var_21158 = relay.var("var_21158", dtype = "float64", shape = (10, 7, 5))#candidate|21158|(10, 7, 5)|var|float64
uop_21159 = relay.asin(var_21158.astype('float64')) # shape=(10, 7, 5)
output = uop_21159
output2 = uop_21159
func_21175 = relay.Function([var_21158,], output)
mod['func_21175'] = func_21175
mod = relay.transform.InferType()(mod)
var_21176 = relay.var("var_21176", dtype = "float64", shape = (10, 7, 5))#candidate|21176|(10, 7, 5)|var|float64
output = func_21175(var_21176)
func_21177 = relay.Function([var_21176], output)
mutated_mod['func_21177'] = func_21177
mutated_mod = relay.transform.InferType()(mutated_mod)
const_21216 = relay.const(10, dtype = "uint32")#candidate|21216|()|const|uint32
var_21217 = relay.var("var_21217", dtype = "uint32", shape = (8, 7, 1))#candidate|21217|(8, 7, 1)|var|uint32
bop_21218 = relay.add(const_21216.astype('uint32'), var_21217.astype('uint32')) # shape=(8, 7, 1)
func_6336_call = mod.get_global_var('func_6336')
func_6339_call = mutated_mod.get_global_var('func_6339')
var_21231 = relay.var("var_21231", dtype = "float64", shape = (60,))#candidate|21231|(60,)|var|float64
call_21230 = relay.TupleGetItem(func_6336_call(relay.reshape(var_21231.astype('float64'), [10, 3, 2])), 0)
call_21232 = relay.TupleGetItem(func_6339_call(relay.reshape(var_21231.astype('float64'), [10, 3, 2])), 0)
output = relay.Tuple([bop_21218,call_21230,var_21231,])
output2 = relay.Tuple([bop_21218,call_21232,var_21231,])
func_21251 = relay.Function([var_21217,var_21231,], output)
mod['func_21251'] = func_21251
mod = relay.transform.InferType()(mod)
var_21252 = relay.var("var_21252", dtype = "uint32", shape = (8, 7, 1))#candidate|21252|(8, 7, 1)|var|uint32
var_21253 = relay.var("var_21253", dtype = "float64", shape = (60,))#candidate|21253|(60,)|var|float64
output = func_21251(var_21252,var_21253,)
func_21254 = relay.Function([var_21252,var_21253,], output)
mutated_mod['func_21254'] = func_21254
mutated_mod = relay.transform.InferType()(mutated_mod)
var_21334 = relay.var("var_21334", dtype = "float64", shape = (7, 8, 12))#candidate|21334|(7, 8, 12)|var|float64
uop_21335 = relay.erf(var_21334.astype('float64')) # shape=(7, 8, 12)
output = relay.Tuple([uop_21335,])
output2 = relay.Tuple([uop_21335,])
func_21370 = relay.Function([var_21334,], output)
mod['func_21370'] = func_21370
mod = relay.transform.InferType()(mod)
mutated_mod['func_21370'] = func_21370
mutated_mod = relay.transform.InferType()(mutated_mod)
var_21371 = relay.var("var_21371", dtype = "float64", shape = (7, 8, 12))#candidate|21371|(7, 8, 12)|var|float64
func_21370_call = mutated_mod.get_global_var('func_21370')
call_21372 = func_21370_call(var_21371)
output = call_21372
func_21373 = relay.Function([var_21371], output)
mutated_mod['func_21373'] = func_21373
mutated_mod = relay.transform.InferType()(mutated_mod)
var_21474 = relay.var("var_21474", dtype = "float32", shape = (8, 3, 8))#candidate|21474|(8, 3, 8)|var|float32
uop_21475 = relay.sqrt(var_21474.astype('float32')) # shape=(8, 3, 8)
output = uop_21475
output2 = uop_21475
func_21479 = relay.Function([var_21474,], output)
mod['func_21479'] = func_21479
mod = relay.transform.InferType()(mod)
var_21480 = relay.var("var_21480", dtype = "float32", shape = (8, 3, 8))#candidate|21480|(8, 3, 8)|var|float32
output = func_21479(var_21480)
func_21481 = relay.Function([var_21480], output)
mutated_mod['func_21481'] = func_21481
mutated_mod = relay.transform.InferType()(mutated_mod)
var_22124 = relay.var("var_22124", dtype = "float32", shape = (13, 13, 12))#candidate|22124|(13, 13, 12)|var|float32
uop_22125 = relay.acos(var_22124.astype('float32')) # shape=(13, 13, 12)
output = uop_22125
output2 = uop_22125
F = relay.Function([var_22124,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_22124,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
