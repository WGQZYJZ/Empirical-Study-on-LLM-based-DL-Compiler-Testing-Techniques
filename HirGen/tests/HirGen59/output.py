import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_41 = relay.var("var_41", dtype = "int16", shape = (3, 16))#candidate|41|(3, 16)|var|int16
var_42 = relay.var("var_42", dtype = "int16", shape = (3, 16))#candidate|42|(3, 16)|var|int16
bop_43 = relay.logical_xor(var_41.astype('int16'), relay.reshape(var_42.astype('int16'), relay.shape_of(var_41))) # shape=(3, 16)
output = bop_43
output2 = bop_43
func_54 = relay.Function([var_41,var_42,], output)
mod['func_54'] = func_54
mod = relay.transform.InferType()(mod)
var_55 = relay.var("var_55", dtype = "int16", shape = (3, 16))#candidate|55|(3, 16)|var|int16
var_56 = relay.var("var_56", dtype = "int16", shape = (3, 16))#candidate|56|(3, 16)|var|int16
output = func_54(var_55,var_56,)
func_57 = relay.Function([var_55,var_56,], output)
mutated_mod['func_57'] = func_57
mutated_mod = relay.transform.InferType()(mutated_mod)
var_148 = relay.var("var_148", dtype = "float32", shape = (3, 13, 10))#candidate|148|(3, 13, 10)|var|float32
uop_149 = relay.atan(var_148.astype('float32')) # shape=(3, 13, 10)
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
var_161 = relay.var("var_161", dtype = "int16", shape = (48,))#candidate|161|(48,)|var|int16
call_160 = func_54_call(relay.reshape(var_161.astype('int16'), [3, 16]), relay.reshape(var_161.astype('int16'), [3, 16]), )
call_162 = func_54_call(relay.reshape(var_161.astype('int16'), [3, 16]), relay.reshape(var_161.astype('int16'), [3, 16]), )
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
call_172 = func_54_call(relay.reshape(var_161.astype('int16'), [3, 16]), relay.reshape(var_161.astype('int16'), [3, 16]), )
call_173 = func_54_call(relay.reshape(var_161.astype('int16'), [3, 16]), relay.reshape(var_161.astype('int16'), [3, 16]), )
uop_183 = relay.sinh(uop_149.astype('float32')) # shape=(3, 13, 10)
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
call_189 = func_54_call(relay.reshape(call_172.astype('int16'), [3, 16]), relay.reshape(call_160.astype('int16'), [3, 16]), )
call_190 = func_54_call(relay.reshape(call_172.astype('int16'), [3, 16]), relay.reshape(call_160.astype('int16'), [3, 16]), )
output = relay.Tuple([call_160,var_161,call_172,uop_183,call_189,])
output2 = relay.Tuple([call_162,var_161,call_173,uop_183,call_190,])
func_203 = relay.Function([var_148,var_161,], output)
mod['func_203'] = func_203
mod = relay.transform.InferType()(mod)
mutated_mod['func_203'] = func_203
mutated_mod = relay.transform.InferType()(mutated_mod)
func_203_call = mutated_mod.get_global_var('func_203')
var_205 = relay.var("var_205", dtype = "float32", shape = (3, 13, 10))#candidate|205|(3, 13, 10)|var|float32
var_206 = relay.var("var_206", dtype = "int16", shape = (48,))#candidate|206|(48,)|var|int16
call_204 = func_203_call(var_205,var_206,)
output = call_204
func_207 = relay.Function([var_205,var_206,], output)
mutated_mod['func_207'] = func_207
mutated_mod = relay.transform.InferType()(mutated_mod)
var_284 = relay.var("var_284", dtype = "bool", shape = (14, 16, 15))#candidate|284|(14, 16, 15)|var|bool
var_285 = relay.var("var_285", dtype = "bool", shape = (14, 16, 15))#candidate|285|(14, 16, 15)|var|bool
bop_286 = relay.logical_and(var_284.astype('bool'), relay.reshape(var_285.astype('bool'), relay.shape_of(var_284))) # shape=(14, 16, 15)
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
var_299 = relay.var("var_299", dtype = "int16", shape = (48,))#candidate|299|(48,)|var|int16
call_298 = func_54_call(relay.reshape(var_299.astype('int16'), [3, 16]), relay.reshape(var_299.astype('int16'), [3, 16]), )
call_300 = func_54_call(relay.reshape(var_299.astype('int16'), [3, 16]), relay.reshape(var_299.astype('int16'), [3, 16]), )
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
call_308 = func_54_call(relay.reshape(var_299.astype('int16'), [3, 16]), relay.reshape(var_299.astype('int16'), [3, 16]), )
call_309 = func_54_call(relay.reshape(var_299.astype('int16'), [3, 16]), relay.reshape(var_299.astype('int16'), [3, 16]), )
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
call_323 = func_54_call(relay.reshape(call_308.astype('int16'), [3, 16]), relay.reshape(var_299.astype('int16'), [3, 16]), )
call_324 = func_54_call(relay.reshape(call_308.astype('int16'), [3, 16]), relay.reshape(var_299.astype('int16'), [3, 16]), )
func_203_call = mod.get_global_var('func_203')
func_207_call = mutated_mod.get_global_var('func_207')
var_329 = relay.var("var_329", dtype = "float32", shape = (390,))#candidate|329|(390,)|var|float32
call_328 = relay.TupleGetItem(func_203_call(relay.reshape(var_329.astype('float32'), [3, 13, 10]), relay.reshape(var_299.astype('int16'), [48,]), ), 1)
call_330 = relay.TupleGetItem(func_207_call(relay.reshape(var_329.astype('float32'), [3, 13, 10]), relay.reshape(var_299.astype('int16'), [48,]), ), 1)
uop_336 = relay.atan(var_284.astype('float32')) # shape=(14, 16, 15)
output = relay.Tuple([bop_286,call_298,var_299,call_308,call_323,call_328,var_329,uop_336,])
output2 = relay.Tuple([bop_286,call_300,var_299,call_309,call_324,call_330,var_329,uop_336,])
func_338 = relay.Function([var_284,var_285,var_299,var_329,], output)
mod['func_338'] = func_338
mod = relay.transform.InferType()(mod)
mutated_mod['func_338'] = func_338
mutated_mod = relay.transform.InferType()(mutated_mod)
func_338_call = mutated_mod.get_global_var('func_338')
var_340 = relay.var("var_340", dtype = "bool", shape = (14, 16, 15))#candidate|340|(14, 16, 15)|var|bool
var_341 = relay.var("var_341", dtype = "bool", shape = (14, 16, 15))#candidate|341|(14, 16, 15)|var|bool
var_342 = relay.var("var_342", dtype = "int16", shape = (48,))#candidate|342|(48,)|var|int16
var_343 = relay.var("var_343", dtype = "float32", shape = (390,))#candidate|343|(390,)|var|float32
call_339 = func_338_call(var_340,var_341,var_342,var_343,)
output = call_339
func_344 = relay.Function([var_340,var_341,var_342,var_343,], output)
mutated_mod['func_344'] = func_344
mutated_mod = relay.transform.InferType()(mutated_mod)
const_562 = relay.const([[[-6.371658,-4.138140,6.997055,-8.598561,-4.430565,-7.064483,5.957970,-3.779907],[5.199899,-0.674694,-6.887294,-2.064821,-2.234994,8.957328,1.669198,-7.417874],[-7.422107,-0.331409,1.908251,8.087873,0.055152,5.869556,9.032959,-6.816335],[-2.034476,0.649600,-5.276649,-4.905694,-3.797333,9.894044,4.544020,9.039951],[-4.967752,9.685849,5.312948,-0.644788,-1.197857,7.520412,7.814557,-0.466117],[-5.607603,8.819494,5.362443,0.185485,0.572791,-6.772429,3.441584,-1.187049],[5.508200,6.708751,-6.991949,7.429380,1.162264,4.256357,1.013741,-6.769300],[9.039091,-8.412920,-3.212617,-8.772611,-2.041753,-8.178757,3.838818,-7.717086],[-0.218992,3.787416,5.732877,7.520304,9.306334,4.398482,0.250852,-0.501626],[3.415919,8.306377,-0.739326,-6.859144,-8.008776,-5.285740,1.011644,-7.725823],[5.883906,2.079851,0.698505,1.339313,6.056770,5.507920,0.043642,9.672775],[-2.684342,-2.330341,2.342200,5.417299,5.712413,8.262724,-7.687714,-2.510154],[4.255590,-8.545271,-8.137839,6.942157,7.951010,-4.851768,-8.334378,5.918920],[2.675224,9.026521,-2.325741,-2.428777,8.219772,7.471019,-0.907185,8.877919],[6.576051,-5.761642,4.763605,9.818627,-4.045537,2.972987,2.584588,8.145233]]], dtype = "float64")#candidate|562|(1, 15, 8)|const|float64
uop_563 = relay.sigmoid(const_562.astype('float64')) # shape=(1, 15, 8)
output = relay.Tuple([uop_563,])
output2 = relay.Tuple([uop_563,])
func_572 = relay.Function([], output)
mod['func_572'] = func_572
mod = relay.transform.InferType()(mod)
output = func_572()
func_573 = relay.Function([], output)
mutated_mod['func_573'] = func_573
mutated_mod = relay.transform.InferType()(mutated_mod)
func_572_call = mod.get_global_var('func_572')
func_573_call = mutated_mod.get_global_var('func_573')
call_595 = relay.TupleGetItem(func_572_call(), 0)
call_596 = relay.TupleGetItem(func_573_call(), 0)
output = call_595
output2 = call_596
func_599 = relay.Function([], output)
mod['func_599'] = func_599
mod = relay.transform.InferType()(mod)
output = func_599()
func_600 = relay.Function([], output)
mutated_mod['func_600'] = func_600
mutated_mod = relay.transform.InferType()(mutated_mod)
func_572_call = mod.get_global_var('func_572')
func_573_call = mutated_mod.get_global_var('func_573')
call_624 = relay.TupleGetItem(func_572_call(), 0)
call_625 = relay.TupleGetItem(func_573_call(), 0)
output = call_624
output2 = call_625
func_627 = relay.Function([], output)
mod['func_627'] = func_627
mod = relay.transform.InferType()(mod)
output = func_627()
func_628 = relay.Function([], output)
mutated_mod['func_628'] = func_628
mutated_mod = relay.transform.InferType()(mutated_mod)
var_629 = relay.var("var_629", dtype = "float32", shape = (8, 7, 15))#candidate|629|(8, 7, 15)|var|float32
const_630 = relay.const([[[-0.043988,2.460837,-4.524853,9.770810,-3.674779,2.986052,7.024886,-4.420379,-7.308706,-5.788670,-5.759225,7.643524,2.856716,-5.626324,6.130869],[-8.781134,4.048210,6.950163,2.426771,-7.008126,4.304827,1.244422,8.788210,-8.790691,-6.531871,-2.207475,0.623774,3.127936,5.529346,-7.841509],[0.609927,-3.680587,-7.118875,-3.577611,-7.564652,4.473030,-7.085676,-9.638905,-4.637893,-0.823470,-2.016055,3.861853,-7.461799,-9.202726,-6.420510],[9.371515,4.110064,-2.376877,1.905271,-3.185207,1.081760,4.016242,-4.071088,-8.424654,-8.805723,-2.552399,5.996105,-8.094669,-4.125687,0.313967],[2.561839,-0.355062,-7.474660,-9.841088,1.094669,-7.314309,7.406595,-4.359850,3.949503,-2.275267,3.128763,-9.039802,3.275142,5.503809,5.798405],[-0.047876,8.957585,-2.015966,-2.486164,6.599887,7.861380,-5.547806,8.181381,-5.069116,8.580567,-1.458648,6.195180,-8.463912,2.479594,-4.565398],[-1.255940,-7.130333,8.136677,-3.045076,3.447723,4.913047,1.683091,4.633814,8.180134,4.568197,6.764866,2.357005,6.391365,9.702746,9.332248]],[[3.289013,-9.926392,1.259531,-0.315768,5.773227,1.998589,-9.071038,4.930524,0.040215,-8.111247,7.528949,-7.453473,-9.691418,-5.391317,8.018297],[-2.672904,-3.675108,-5.168630,-8.078913,7.899121,-0.027411,6.250919,2.030524,2.449260,3.037583,0.974787,3.692832,0.256747,9.978800,9.083146],[-5.172583,-6.975335,-3.869825,-2.393118,2.846677,0.534598,2.674052,6.752005,6.510020,4.993157,-9.133907,7.009337,4.510547,0.030679,8.513058],[1.748057,-8.941199,-1.280422,-2.791188,-7.956751,-0.145808,3.998829,-1.962937,-1.807152,1.392955,-2.011878,-6.069779,3.195358,-9.462950,3.425965],[0.775748,5.385454,-2.271250,9.777304,1.836978,-6.892562,6.349069,4.341229,-2.805029,7.529071,1.342047,1.409551,7.366973,6.707707,-4.833719],[0.710085,9.612446,7.527655,-4.045485,-8.312637,-2.824847,6.069745,4.407268,0.221801,-6.320675,3.405841,-6.056975,-8.598106,-4.400354,-8.552679],[-1.004011,-3.043383,-8.693023,6.529384,-5.113954,-9.972977,-8.286827,-4.861609,-4.000095,-5.819113,-6.058612,0.518352,-0.205120,1.466477,9.066446]],[[9.626818,0.911541,-2.051489,-0.886132,6.803532,4.414648,7.859970,3.667857,5.168689,-3.574838,2.014314,-7.430452,1.908843,-2.204540,1.111262],[-5.251933,2.618701,-2.721787,-0.278731,9.056559,-9.669752,7.468144,-9.551429,3.031114,9.550009,3.339459,5.147092,4.224634,4.972094,7.965510],[2.746389,5.840159,4.324517,-1.285885,-1.960742,0.288920,5.389392,2.268546,-4.953381,0.176141,-7.192133,-1.873169,-2.153225,-4.599885,8.383866],[-9.309963,-7.066913,2.136634,-0.048628,6.205158,3.423739,2.615488,7.759091,-4.003811,7.923965,8.271079,4.183377,8.927779,6.302158,5.746827],[9.355884,-1.070229,5.404540,-5.109402,0.423015,8.662454,-7.353307,9.666883,5.727125,7.921109,-0.175524,-0.996125,-7.607739,3.923628,5.734301],[-5.064891,0.486977,-7.832396,-7.504120,-6.577981,-2.905387,-8.876643,-4.009595,7.099920,-4.631079,-9.239215,0.431082,-9.989842,8.878059,-5.004210],[-6.315823,8.123150,9.497517,-1.462983,-7.678367,0.167126,-5.011135,-6.001189,-9.854830,-6.930657,-3.846207,6.406726,8.582909,-6.155010,3.669543]],[[-6.254217,5.721306,7.686751,2.810902,3.574672,-9.109076,8.896099,-6.069283,6.075234,6.669741,6.230455,5.459785,4.503554,-3.038670,7.390348],[-3.222934,6.834033,8.124132,-8.880500,4.532513,2.939941,5.636136,-6.912861,-1.411892,-7.748824,-2.257936,3.232796,-8.639494,-2.263670,-1.223600],[-0.100883,9.414947,5.642368,1.526483,-0.702054,3.340691,-2.423496,-0.536086,-7.099788,6.889038,-6.036778,8.457308,4.099164,-7.880311,-7.758013],[1.623306,-1.743882,2.378282,1.197514,1.328906,9.087152,6.586440,9.321168,-3.770031,-2.205713,-6.715920,1.425085,8.762444,7.006242,8.355660],[-0.059321,5.197577,0.133785,-3.816635,8.051447,-1.195319,-7.373296,-5.777835,3.991405,-1.351735,-5.670217,-3.433186,-1.790202,-7.644690,-3.802608],[2.890024,-6.521448,7.086367,2.572080,6.007344,7.447959,6.777116,9.180366,-4.965136,5.650470,9.636692,8.926117,6.537771,6.264819,-3.998625],[9.197438,-3.166514,-3.313979,-7.544800,-6.439062,-0.716146,2.360285,0.395567,1.366411,-7.672214,-5.655902,9.055523,8.651435,8.549344,-6.881258]],[[-1.444875,-5.552679,-7.128636,-8.258119,-6.409147,-1.055938,5.007469,5.526184,-7.817521,-4.219187,7.951576,-0.793677,-0.598471,4.899351,-2.480323],[0.213990,-4.158299,-4.752295,-8.306871,8.339902,7.232088,6.111173,7.207288,9.168080,-7.496340,-3.578149,1.220777,-2.950623,2.762789,2.933422],[8.818108,-2.100541,-2.665314,-9.262967,-3.132742,-7.730868,3.314998,-6.475989,-2.787027,9.440369,7.893898,-1.547647,-9.238296,-4.423982,-0.155211],[-9.113712,4.958676,9.400324,2.406215,-6.449697,3.986177,0.838137,7.305772,-3.029519,3.226565,-7.760816,1.903503,6.835036,8.442881,6.076437],[-6.486951,9.223336,6.643048,7.847789,9.344437,-9.203805,-1.117206,2.911423,0.456092,9.002503,4.102712,5.664286,-9.976563,6.595191,-8.642194],[-6.186851,-8.388549,-6.196206,-5.391385,-3.944371,-2.561010,6.021771,-0.924611,-0.397969,-9.909381,-3.213073,0.889722,-3.366184,0.068694,0.749033],[0.945045,-1.314669,7.186105,4.858947,-6.562260,2.412544,-6.572781,-7.665575,-4.269360,-6.900754,-8.891945,-2.156218,-1.444003,-6.156522,-6.895318]],[[5.183418,0.891763,0.196812,1.640802,-5.554731,-3.552180,-1.418388,-1.951629,5.983075,3.041421,8.976971,2.445924,6.468277,0.307395,8.345252],[0.518172,8.371008,-0.250274,8.315853,5.990433,4.560883,-8.174072,-9.879830,-0.648690,3.364496,4.214669,-4.726779,-3.586390,-8.499485,4.815479],[-5.020190,-1.251602,4.391709,-1.557867,-4.048494,-5.780082,-7.350587,3.247855,-7.935016,-2.216666,0.455012,-4.165015,-3.959934,7.576776,-2.812650],[-1.577866,5.014886,-1.113166,5.355356,-6.199561,-4.483506,-9.912028,8.545126,1.233929,5.638313,6.039063,3.497535,-8.921483,-6.691486,-4.314614],[-1.948382,0.687614,-3.942832,-1.818854,9.819296,2.697512,-2.905233,-0.935081,-7.370281,2.051476,9.722107,-9.080772,-0.935975,9.284735,3.216083],[-7.002414,-4.320229,6.915540,1.642444,2.088805,-5.077920,1.952767,-5.443656,-8.941369,1.312662,-7.993678,-0.693978,-1.117802,-0.208170,-7.882437],[2.105036,4.691134,-0.020713,-9.656427,7.670272,-6.560889,4.272072,-4.820822,2.866846,-3.152632,-3.883927,-9.034437,0.901632,3.938172,-5.658386]],[[1.966037,-2.804335,2.514677,-8.159881,0.965929,8.555642,3.707173,3.481522,-9.347035,8.526715,8.115756,-9.899627,-2.931875,-9.367239,2.027116],[1.144358,5.525968,1.171516,8.185620,-2.412650,6.738137,-7.403465,-9.374690,-8.469262,2.398701,4.977882,3.951754,-7.167814,-3.334809,-5.958974],[3.160601,-8.728780,6.923772,8.689112,9.531625,8.033266,-1.770314,-7.182593,0.915699,6.311510,-4.163917,-5.922448,-9.613076,7.441332,6.782591],[-0.382047,-4.495391,3.072229,3.947816,-4.437297,7.485169,8.519805,2.349239,-2.900623,2.549106,1.796379,1.629707,4.391262,-5.094257,-4.546898],[-6.262492,-4.101187,3.748401,2.911875,9.307029,-1.955206,5.571877,-0.163945,7.142626,-2.834232,-0.471226,-0.582746,5.947524,-1.140761,-0.651263],[2.187383,0.087931,5.925300,-7.933094,5.305082,-5.052484,-8.922871,-5.095626,9.200999,0.323744,-2.342045,3.249028,4.602701,-5.450582,3.366388],[-8.581772,-3.440779,-1.663216,4.298425,-3.758931,-5.600773,-4.686035,-8.503392,2.874622,-9.569367,0.840085,3.928744,4.035096,0.483755,-7.224034]],[[-1.579578,-3.337434,-7.948563,2.580280,5.436327,0.660318,-5.924158,-7.022965,-6.379997,-7.399929,-8.522103,5.927392,8.210972,8.404188,-6.710387],[7.534032,-0.552510,1.746165,-8.973015,-6.614419,-4.083039,-1.797547,4.611909,-8.859419,-9.670357,-4.777206,-5.174156,-0.094622,-0.628760,1.910312],[2.752043,-1.240396,-1.785287,2.974442,-3.341225,-3.829362,4.033151,7.312803,3.468464,-3.368616,4.907171,-5.273487,-1.216783,9.648485,-2.560821],[1.463813,9.730675,-3.770003,-5.748600,-1.857140,7.348378,4.987021,1.341353,-1.398439,-4.427661,8.256967,8.185179,-1.708665,-5.127703,6.516998],[-2.597102,6.172803,-2.439096,3.770821,6.434147,3.110096,-6.678624,7.634649,7.051646,-0.977017,-8.782964,8.387641,4.604422,5.397388,4.941857],[9.843312,1.682260,6.308566,-3.876073,-4.620770,0.705978,-5.308973,4.440114,6.033671,1.874403,-5.585942,0.223633,-1.898154,4.703851,4.744158],[-6.001271,-3.946431,9.419182,5.915340,-3.665491,3.585587,3.222541,1.001685,3.360333,3.133262,-0.576860,-4.440798,-0.171719,1.020357,-1.929208]]], dtype = "float32")#candidate|630|(8, 7, 15)|const|float32
bop_631 = relay.mod(var_629.astype('float32'), relay.reshape(const_630.astype('float32'), relay.shape_of(var_629))) # shape=(8, 7, 15)
bop_650 = relay.maximum(const_630.astype('int8'), relay.reshape(var_629.astype('int8'), relay.shape_of(const_630))) # shape=(8, 7, 15)
func_203_call = mod.get_global_var('func_203')
func_207_call = mutated_mod.get_global_var('func_207')
var_658 = relay.var("var_658", dtype = "float32", shape = (390,))#candidate|658|(390,)|var|float32
var_659 = relay.var("var_659", dtype = "int16", shape = (48,))#candidate|659|(48,)|var|int16
call_657 = relay.TupleGetItem(func_203_call(relay.reshape(var_658.astype('float32'), [3, 13, 10]), relay.reshape(var_659.astype('int16'), [48,]), ), 3)
call_660 = relay.TupleGetItem(func_207_call(relay.reshape(var_658.astype('float32'), [3, 13, 10]), relay.reshape(var_659.astype('int16'), [48,]), ), 3)
const_678 = relay.const([[[8.603955,-6.608367,9.782146,-2.581954,-1.556962,0.783412,7.270858,-4.655546,-6.839529,7.742780,7.290812,-8.297529,3.436198,-0.873425,-7.114947],[-9.540074,-1.282247,-9.721040,9.237505,-1.655044,-7.828123,-8.072678,-9.731406,-7.106414,-2.667136,-7.867207,6.626768,-4.502314,-4.813724,-4.768358],[-1.871919,-8.696706,5.154795,1.823327,-7.943127,4.592921,5.884674,-5.517572,-1.224549,-1.833257,-2.493364,-3.460242,7.311229,2.784191,9.071872],[2.849252,-8.235379,-1.485765,-2.911490,-5.347894,-2.801368,6.485853,-4.194726,2.651884,4.407825,8.332179,-9.487519,2.423111,-8.190252,-2.503569],[2.910714,-0.346390,0.740617,7.817438,-1.809701,-7.838549,1.515029,-4.392378,-9.425487,2.939178,3.352837,3.653412,-1.061617,6.182902,1.837092],[0.783656,2.515873,-0.144542,-4.001841,-3.451553,-4.342279,4.632997,5.174303,9.283014,9.470262,5.114534,3.270664,0.978040,9.089216,1.742020],[-9.385102,7.291839,-3.923662,-2.630267,-3.455403,1.751611,-2.313745,-6.600853,-9.976471,4.717564,-6.685654,-0.732530,6.661436,-4.708959,-9.734468]],[[-6.287275,-9.613156,7.039207,1.013738,8.413828,-4.225467,-6.582917,-3.538957,-9.098826,-0.131391,-6.784917,-9.327208,2.647650,-6.360361,0.498624],[4.771831,6.565013,0.007896,-0.160009,2.145836,-7.379168,-2.580244,-4.387853,-5.471547,7.502109,-6.153543,4.670681,-3.093071,-4.306141,-8.878991],[5.607697,3.324273,8.983958,1.593410,-9.376974,-4.868152,8.651241,0.143302,0.544766,-0.933131,6.567404,-8.425087,-1.267857,9.824820,-3.627485],[-3.401908,7.825468,-1.924009,-1.126910,-5.270562,-3.402641,-8.188139,4.630185,5.512301,5.844266,2.905657,-7.928507,7.740032,-3.390447,-6.353287],[4.136802,-0.270449,-8.175657,3.786572,2.145646,1.938244,-5.334835,8.020760,-1.563622,-6.041814,-9.154094,-1.491681,-9.547188,7.135452,-9.461391],[1.833705,-5.554507,-0.568429,-2.033701,-8.500761,3.479707,-6.243961,6.840964,5.367122,-5.669172,7.308714,5.273961,-6.839836,1.507848,-0.306626],[0.092854,2.082317,2.024325,-9.263444,-8.140965,2.267453,9.846701,4.594279,8.707209,-0.378872,6.657942,2.282403,6.106617,-8.369357,8.553754]],[[-0.746725,-1.896971,5.921336,1.394382,5.981019,-4.137007,2.581760,-7.526399,-4.119313,1.722173,-7.171078,-1.788308,2.136745,4.056747,-9.160688],[-4.055519,3.024232,8.885599,-2.637262,-6.117592,-3.920947,5.698871,-1.491182,-1.130420,0.442828,1.699163,-9.190000,5.992666,0.935825,8.439525],[-9.974023,-5.870614,-0.669573,-4.698184,-9.031405,4.187376,0.215535,-3.776934,-3.697804,-9.817216,-4.548032,6.752680,6.192965,-0.615134,1.206491],[-2.760315,7.945684,6.371620,-6.420569,7.040055,7.559347,1.444190,9.707102,-1.321498,2.262576,5.196209,4.476317,-0.946636,-3.278671,3.563611],[1.058292,7.293146,4.436152,-0.162491,-2.206633,-7.926642,-5.767693,-6.976938,-7.024299,-6.965179,8.047674,6.707082,-9.559952,6.618766,1.506695],[2.100101,-8.187029,3.137044,2.180827,-3.874168,8.841594,1.806746,-3.972039,0.891405,9.531960,-1.484250,-4.003591,6.331634,-0.894850,6.802727],[4.954277,-7.738523,4.707757,6.358885,2.057036,-2.306856,9.541038,8.780783,1.865274,-7.116606,-6.548537,5.041177,-1.238979,9.011467,5.359893]],[[-8.780701,4.311419,-6.843760,1.673812,-3.301660,5.469894,0.166198,-4.685442,0.777795,-4.790196,-2.163743,-8.685699,3.245165,-6.570866,0.053261],[6.227112,1.807095,-0.684645,9.897522,4.732712,4.616579,-5.628477,1.086875,3.977742,-8.936652,-2.128301,-0.339153,-4.005969,-7.502741,-2.294923],[-1.166038,8.010793,4.428045,3.874508,7.937435,-0.247156,-2.118106,-4.363296,5.850554,-6.956833,1.284396,7.766367,0.963296,8.994445,-1.513080],[-7.738914,3.944439,-4.625979,7.516225,6.903536,0.762599,2.520849,-6.392814,4.083714,6.028092,3.478735,9.317832,-5.479188,-2.630155,-7.820010],[-5.526812,9.097013,-0.610072,-1.870603,7.791389,7.714966,1.646021,-6.103491,-6.694014,4.014409,9.152175,-0.867206,5.460278,-6.006822,-2.870871],[7.651466,9.917260,-8.471534,-1.252062,5.355255,-1.683657,-9.024218,-3.706175,7.281818,5.123844,-4.171843,5.831681,1.461674,-4.200136,-3.483846],[-8.628086,2.273265,-9.616929,8.574214,-1.014089,-3.256645,9.550025,-6.370258,-0.295825,-3.239987,-1.971622,-6.255762,3.064801,5.135008,1.433146]],[[-1.542910,5.643284,9.492641,3.176389,-8.270198,-8.224710,-4.474095,-5.976852,9.694465,-0.880913,-5.495865,-3.448235,-2.457624,-5.875294,7.440308],[5.635435,7.501978,1.020199,-0.721476,8.669442,-9.978514,-9.968498,-1.601439,2.520646,7.270814,7.993898,9.193698,-1.274403,-6.283233,4.790350],[4.954585,6.934015,2.389418,8.787403,-8.255786,-9.659563,-1.185032,3.580750,2.406312,-8.620354,3.525724,-8.032685,-3.287883,-6.720013,4.006635],[-9.956618,9.249397,3.135396,7.743334,-4.451898,-2.098533,-2.964695,0.571184,4.957640,0.623947,0.075604,9.453968,8.142663,2.095728,-0.058246],[5.799774,5.490291,7.616724,0.088902,4.161406,-7.911346,-9.256504,7.095865,-1.043301,8.739969,-7.273843,-9.122658,-5.475787,2.762956,-7.422324],[6.649917,3.151848,-7.662372,6.607097,1.721526,9.197486,-0.026206,-6.757404,-6.090443,-3.645137,-8.352426,-9.593364,4.444281,-0.698599,-9.418857],[-7.746259,-0.512790,-2.757382,-6.281379,-9.167697,6.273518,8.522336,-3.857938,4.019787,4.472660,-8.280299,-8.053897,-7.561718,1.431541,1.045511]],[[5.169113,8.799668,6.329621,-1.669948,-8.497824,7.260649,4.401814,5.538603,-5.497600,-3.856730,1.518104,-4.421585,5.718050,7.481283,9.784913],[0.083434,-1.827706,3.622090,-4.375857,-8.923503,-3.241379,-4.096254,-3.786475,9.596875,-4.418145,-3.625532,-0.215181,-7.444422,-6.230443,0.277584],[-3.926175,-2.561564,4.164290,-1.941766,-6.040798,-5.972745,-3.116538,-1.822666,9.965098,5.400550,1.675898,1.291165,-3.913481,0.029307,0.272750],[8.452994,1.297356,-0.063924,5.037684,5.321095,4.896905,-4.152830,-8.322923,0.150633,6.824142,-1.840871,-0.588563,-9.519695,3.202507,7.246535],[-1.592813,-5.613154,5.418502,1.149479,7.424074,-0.201043,-9.345794,-0.461021,9.765305,-7.038420,-4.669385,3.442205,-8.332227,-1.898710,0.976684],[-1.176439,-8.070014,-7.670406,-7.567053,-0.248143,-5.925951,-5.727682,1.148793,1.072454,-9.398790,0.266350,-3.793995,-6.973292,7.501321,-6.248807],[-6.673972,-8.108385,2.175431,-6.327824,-5.745888,8.475511,3.708179,-6.699858,-7.783585,4.998469,7.908303,-0.998071,1.986130,8.384119,1.929165]],[[-3.931244,-8.478717,-0.714147,6.501457,8.156858,4.380817,-0.820000,0.745290,3.037878,-4.347654,-2.634064,-0.108297,-5.469898,3.011136,-0.110368],[0.818843,9.797530,3.369923,-3.769523,-8.150992,2.145209,-4.674434,4.998577,-4.939251,-3.656456,8.673454,-0.912067,6.423036,-2.964494,-1.154993],[6.653228,8.052359,-5.104119,-2.406793,9.146590,-8.273537,-1.926462,-5.560776,-0.171696,-1.943429,7.783950,-2.865314,0.184013,-3.115374,-6.728958],[-4.411403,0.071521,-5.873862,4.629562,-7.821551,-0.661504,0.104163,3.175627,-9.601918,-6.885134,-9.879157,-3.795387,6.051385,-0.067422,6.746852],[0.184948,-8.368855,8.799786,-9.791408,5.250561,0.363054,5.708988,-9.557407,-3.242466,5.160891,-9.428342,0.886062,-6.945457,-8.922619,-2.704525],[6.985738,-1.569971,-6.332496,1.265145,-8.054638,8.105640,-1.372825,-3.096878,-0.977428,3.030760,2.112626,6.775599,-3.886131,9.132310,8.455118],[5.795517,3.284254,-3.239362,6.180844,-3.171726,9.031321,-6.263132,9.406522,-1.544603,4.695036,2.902620,3.720701,5.611560,-2.703300,4.462764]],[[6.175906,-2.688268,-2.700741,-0.752524,-7.604565,3.438763,6.588354,4.193614,-0.231894,-0.274195,3.917396,-0.988332,-7.033076,3.432023,-3.066519],[-5.402482,6.302376,4.895167,-7.954382,7.330873,-3.819326,-0.240271,-0.500510,-4.655190,9.216048,6.280962,-3.692021,-1.655956,9.288012,6.748837],[-9.951430,9.485616,2.094015,5.111089,7.976792,-1.420285,1.222525,2.246066,0.034531,-5.620393,-0.979240,9.504958,7.050103,1.337559,0.889973],[-2.677720,5.869074,0.137765,-6.403297,-0.610031,-7.114406,-6.305468,2.522313,7.867781,1.644734,8.997590,7.853136,4.623677,-0.820494,-2.192271],[0.537508,9.964905,-2.791953,6.919206,8.328071,-5.635590,7.311097,5.030767,-1.071423,7.842000,-3.959265,6.190178,0.056598,-4.261119,-3.885883],[-3.209980,-7.170586,-5.709610,-4.041631,6.775046,6.168309,2.627468,-2.936350,3.810558,-9.796453,8.547242,1.853429,-7.923221,6.475080,1.986016],[4.169721,6.826412,1.639102,7.996391,-0.167737,-6.738384,-8.495000,-9.837188,-6.235624,-3.927643,-2.347117,-4.608612,-8.855008,-2.823853,8.916715]]], dtype = "float32")#candidate|678|(8, 7, 15)|const|float32
bop_679 = relay.floor_divide(bop_631.astype('float32'), relay.reshape(const_678.astype('float32'), relay.shape_of(bop_631))) # shape=(8, 7, 15)
output = relay.Tuple([bop_650,call_657,var_658,var_659,bop_679,])
output2 = relay.Tuple([bop_650,call_660,var_658,var_659,bop_679,])
func_683 = relay.Function([var_629,var_658,var_659,], output)
mod['func_683'] = func_683
mod = relay.transform.InferType()(mod)
var_684 = relay.var("var_684", dtype = "float32", shape = (8, 7, 15))#candidate|684|(8, 7, 15)|var|float32
var_685 = relay.var("var_685", dtype = "float32", shape = (390,))#candidate|685|(390,)|var|float32
var_686 = relay.var("var_686", dtype = "int16", shape = (48,))#candidate|686|(48,)|var|int16
output = func_683(var_684,var_685,var_686,)
func_687 = relay.Function([var_684,var_685,var_686,], output)
mutated_mod['func_687'] = func_687
mutated_mod = relay.transform.InferType()(mutated_mod)
const_693 = relay.const([[[7.908704,5.717279,-6.286252,7.646300,-1.583372,6.048358],[-0.150567,1.001040,4.086279,-0.948576,0.221121,1.818402],[-3.873704,9.289383,3.004990,-6.341103,-4.043862,-2.209953],[-5.682125,2.055064,-8.331653,3.892887,2.490904,6.088153],[1.528662,-9.002471,-0.347973,7.361816,-6.475284,0.622509],[3.899989,0.070743,1.221072,-7.459959,9.245349,2.157214],[3.739576,-6.696303,2.997678,8.251470,-4.544587,6.744809],[-3.556425,6.685212,-6.523852,-5.203722,-6.496679,8.409564],[4.943172,-8.616850,-7.345602,-3.658225,-8.197389,-5.242534],[-8.590988,5.704104,2.462318,0.314365,6.564207,-6.615036],[3.739975,-1.914048,-6.737308,-9.053537,4.348174,8.628541]],[[-9.458550,3.676844,-9.462507,-2.613396,-3.270372,2.700785],[3.792238,7.978575,-7.593100,-6.384760,-4.813501,9.490426],[-7.433764,-2.586775,-0.580283,3.801085,2.360193,-7.848180],[-1.268229,3.133322,-0.181185,-9.322489,7.201960,-0.545557],[-7.433947,-6.812730,7.095369,1.855127,7.908387,-4.819119],[3.566460,-9.478341,-9.206533,1.468054,9.837577,3.755985],[4.255696,6.475484,7.833852,-3.299286,-7.090816,-1.524653],[5.852986,-6.211556,5.438357,-6.897249,-7.480059,-2.828311],[6.106512,-4.159519,-9.375707,-3.068687,8.901519,-4.856405],[-2.646091,-8.039095,1.715289,-8.567660,0.043412,3.082666],[8.805897,2.534499,-9.333722,5.160776,9.338610,2.612808]],[[0.316898,-4.176673,4.696088,-6.136143,1.167138,5.152901],[5.913277,5.199367,-3.351024,-5.787267,1.424467,3.608266],[5.783944,9.707210,-4.973296,-3.186151,2.461770,9.514330],[2.004478,-2.704382,-2.696375,-8.923103,9.769440,-7.484601],[-8.915769,-9.162714,3.019801,-2.269611,-7.510431,2.567316],[-6.082142,-0.138478,-7.782562,-9.669118,3.483080,1.631648],[-5.682266,-6.913627,2.737139,0.250808,1.380375,0.655861],[-5.577922,8.968471,-7.935079,5.823624,-6.242858,-3.291825],[5.675559,-7.374842,4.152296,2.587654,0.960036,8.600068],[-2.320149,8.190773,-6.543450,-4.750918,-3.117147,0.137039],[0.595715,5.973349,3.101025,-0.430694,-6.720343,1.796581]],[[-9.329639,-0.104968,-3.182478,6.998216,-8.929370,-1.556526],[4.603982,8.535944,-9.254875,-1.477305,-1.290310,2.260942],[8.693707,-8.384792,3.257695,7.641367,-1.775029,8.883924],[-3.936519,-2.334874,4.771955,6.589202,2.900866,-4.046692],[-0.905680,7.560337,-8.377549,-0.220992,5.912642,-0.224472],[-4.627487,-3.505539,5.586831,-0.476505,-5.034624,-3.108712],[2.951005,2.943362,1.987899,0.353122,-0.235954,-5.200235],[8.579511,0.548387,3.155754,3.618769,2.784147,7.263078],[-4.601971,-5.065857,-2.045080,-9.281765,7.706834,-4.071487],[-7.316673,-7.813298,5.369601,4.518721,3.575108,9.339513],[-8.145467,-1.415861,-8.422426,-3.020494,7.075163,-9.124886]],[[-3.688049,-0.324839,-5.209840,-8.237175,-3.345048,9.596343],[9.948726,-4.472092,8.151423,3.678364,7.553568,-5.053687],[1.197835,-3.830454,9.189712,-7.769012,2.690210,0.318448],[-6.054157,-4.073661,-0.315813,-5.251883,9.071398,-3.659429],[-7.885358,-3.396480,-6.737726,3.719032,-0.782624,-6.396854],[-3.837259,1.190686,8.527215,8.121201,-9.451944,-7.433007],[-7.115990,-6.442690,-3.471846,-4.568402,-4.359401,-1.713657],[6.352650,1.964113,2.294394,-9.128164,-6.749360,3.956901],[-5.558411,4.915393,5.510947,-6.937829,-7.973941,1.314183],[2.698118,1.234210,-9.306417,-5.536488,-0.230368,9.693577],[-5.865611,2.319086,5.041849,-3.271195,-7.409635,-0.713735]],[[-2.688358,9.680145,3.678616,8.958629,-6.090431,7.103923],[-7.544197,9.003678,9.566320,-0.744422,-0.084261,-4.029684],[-9.656854,4.959711,0.887181,-2.133643,-1.270188,-0.434511],[-1.233767,2.508231,6.868834,-0.688399,-8.317824,-1.029070],[-4.939721,6.890686,-4.271354,4.405773,5.112040,2.890636],[-0.589469,-5.919276,5.025713,0.172017,-1.018083,9.986451],[9.190720,3.100072,4.295971,2.444957,-2.937162,-3.769876],[-1.880611,0.039643,-0.695255,-0.571387,6.966617,-9.665290],[-4.050759,-3.546778,-8.416346,-4.705031,0.407057,8.220685],[0.981950,1.003003,-4.604665,-4.643159,6.962141,-0.854520],[6.119737,-2.050146,0.103896,9.328287,-8.953154,-2.092254]],[[9.916490,-1.192580,-1.402243,2.335139,-1.875591,2.404469],[-7.198529,-7.980920,7.183116,-3.737596,9.616718,2.254750],[2.995310,-9.005294,9.520864,-6.303788,9.829781,5.151370],[-2.372708,4.927469,9.941129,3.091118,6.882767,6.850048],[-8.235563,9.713773,9.521171,-1.121686,1.385860,-8.654800],[8.028493,-7.129582,-0.013269,-8.390338,-0.996020,0.883414],[-0.511117,-9.326519,-2.596613,1.831721,5.552799,4.371245],[7.002768,3.923780,-5.680352,5.954219,-9.063407,5.561257],[-2.962931,3.993280,1.057017,-9.499023,-8.379566,2.268978],[7.822886,0.235150,6.261213,4.858772,3.179722,-6.307119],[-4.346671,0.982865,7.571394,4.335693,5.743166,-8.540382]],[[-1.040660,-2.624432,4.446964,7.574022,-8.876211,8.920536],[3.592659,6.844867,9.618059,2.971782,3.394604,-5.365670],[4.618528,-3.912485,3.443316,0.881156,-7.833510,-4.400577],[-5.643993,-1.379277,-1.635433,-4.289647,-7.857224,-7.680600],[3.661294,1.920894,8.161733,1.685420,-7.239553,0.862721],[5.420519,1.130020,-4.998149,8.003386,6.764969,-2.020958],[-3.537379,-2.666523,-7.403776,-7.303932,-3.306875,-0.836234],[-6.446411,-9.586324,-0.546307,-8.146074,-8.943449,4.961489],[5.008397,1.903837,-3.143569,-1.777659,3.370267,6.280139],[-1.710420,8.059468,8.927320,-5.548418,-1.928678,-0.651978],[-4.146619,-6.574787,-6.683227,1.487146,-2.153403,4.887656]],[[-0.805986,9.224287,-2.984705,9.607801,1.884091,1.218931],[7.701210,-6.528862,-6.096400,-0.508087,2.267782,3.105230],[-2.979564,5.326001,-3.362794,1.238434,-7.482596,-7.951115],[6.812508,5.785719,-7.200788,3.488052,-5.931162,1.301062],[3.544268,2.381662,-9.633971,-9.585163,-6.819809,-0.003566],[-8.312168,1.168528,-6.808546,2.946611,-0.001251,-1.295941],[8.483391,-0.041290,2.647177,-3.711608,2.824507,7.315607],[9.014403,-8.694263,7.089823,-5.340562,-0.551089,3.770653],[8.027016,-9.193803,4.328170,-6.072109,-7.249657,4.517021],[3.899609,-9.591943,0.816485,-8.932780,-7.045995,-0.839266],[6.357537,5.076618,5.360373,2.967475,-2.149733,-4.553639]],[[-5.828776,-0.351568,8.312603,5.186657,-3.703631,3.097849],[5.179168,-6.658180,-3.337919,-3.215524,5.797336,8.777959],[-9.007151,5.706550,-5.527270,-2.187362,-5.428508,2.548441],[-9.820800,-0.858201,4.128915,9.054992,-9.948656,-5.360188],[-8.470886,-9.677693,-5.903527,-0.669138,-1.937474,5.205154],[0.484620,-1.985659,6.645985,2.118203,-3.461691,-5.826149],[9.345694,-4.636173,6.031865,-9.775158,6.649721,6.210504],[-4.376154,-1.745665,7.938467,1.572252,-3.381506,-1.916384],[-3.977907,1.658801,-3.529587,-9.867332,3.862399,5.816554],[0.697143,7.566265,-2.302390,-0.475034,-2.045073,-0.998722],[8.082529,9.722923,5.771119,5.559486,2.504239,-4.560690]],[[-5.760464,-6.949938,2.513573,-1.280291,0.947130,-6.887956],[-9.546739,3.218323,9.686277,-2.718337,6.564918,-6.277382],[4.257002,-2.920808,0.244143,-0.311703,8.614547,2.074401],[-6.007500,9.095972,8.006354,-0.725811,9.990200,3.484890],[9.892691,0.214027,2.778101,9.703730,8.141922,4.073722],[-6.253094,-3.879609,-3.709980,-4.456593,0.878115,7.116353],[4.308518,-6.854273,4.081155,-8.104950,6.298717,6.580875],[7.475402,3.390378,0.821160,7.317033,3.810651,3.388280],[-2.828592,-9.185705,-2.591918,-3.297666,3.521143,-7.481858],[-5.309054,3.568092,-9.309946,-6.929808,1.099783,-3.919861],[2.777817,-7.125224,3.407070,-4.462593,-8.206196,7.380590]],[[-7.890931,-5.695716,-2.431870,-8.940931,8.856251,-7.039160],[9.260437,-5.523118,-6.412869,9.568153,-6.417721,-0.008943],[4.817101,6.052305,-3.640305,-5.801680,4.209243,-3.901643],[7.220086,-1.189591,6.816086,-0.040054,-0.557293,0.558813],[1.991904,-6.556692,9.354360,9.494884,6.559882,-8.753029],[3.672875,7.235062,5.014175,-1.159308,-1.238499,-7.360820],[8.651169,-6.254365,0.590404,7.469612,-6.991964,-6.333021],[-5.759987,3.902900,7.199421,0.699874,-1.148267,6.401330],[5.519169,1.014456,-2.587563,2.592886,-4.018552,3.453521],[8.110597,9.069287,-8.218300,6.994674,1.899631,1.690900],[-4.442877,-1.743434,1.352133,3.006657,3.164569,-6.431225]],[[-3.246076,-5.654095,-7.159060,-3.352050,-1.818719,9.227139],[0.859062,5.639316,6.037577,1.185749,-9.940959,9.835876],[7.130437,-1.472876,9.605639,8.982772,-4.866536,-5.327032],[3.270817,-4.346003,-7.167942,0.896329,2.691424,2.869094],[4.563941,-0.708632,-0.009061,5.026304,-8.403071,-8.410002],[-8.070834,1.955255,3.455843,2.698551,-6.835443,-9.911154],[-4.165244,1.266690,1.171271,-6.159976,9.863975,-0.971260],[-5.607411,-8.174708,6.582493,-6.324361,-3.721749,-4.643580],[-4.650696,-6.188743,0.971731,7.262520,-2.312173,9.919633],[1.653655,-0.628648,1.382431,-9.420684,-1.751274,-3.536510],[-5.020835,-7.390282,6.365530,-7.953560,-4.912799,-3.814484]]], dtype = "float32")#candidate|693|(13, 11, 6)|const|float32
var_694 = relay.var("var_694", dtype = "float32", shape = (13, 11, 6))#candidate|694|(13, 11, 6)|var|float32
bop_695 = relay.floor_divide(const_693.astype('float32'), relay.reshape(var_694.astype('float32'), relay.shape_of(const_693))) # shape=(13, 11, 6)
uop_699 = relay.sin(bop_695.astype('float64')) # shape=(13, 11, 6)
func_627_call = mod.get_global_var('func_627')
func_628_call = mutated_mod.get_global_var('func_628')
call_701 = func_627_call()
call_702 = func_627_call()
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
const_705 = relay.const([-4,-10,8,10,2,-10,-3,-3,-8,10,-4,4,-7,6,-6,-3,-10,1,-7,-7,-9,5,3,-5,-3,-4,7,6,3,-2,-1,-9,-8,-8,-1,5,1,2,-9,8,1,-1,-7,2,1,9,9,-4], dtype = "int16")#candidate|705|(48,)|const|int16
call_704 = func_54_call(relay.reshape(const_705.astype('int16'), [3, 16]), relay.reshape(const_705.astype('int16'), [3, 16]), )
call_706 = func_54_call(relay.reshape(const_705.astype('int16'), [3, 16]), relay.reshape(const_705.astype('int16'), [3, 16]), )
output = relay.Tuple([uop_699,call_701,call_704,const_705,])
output2 = relay.Tuple([uop_699,call_702,call_706,const_705,])
func_711 = relay.Function([var_694,], output)
mod['func_711'] = func_711
mod = relay.transform.InferType()(mod)
var_712 = relay.var("var_712", dtype = "float32", shape = (13, 11, 6))#candidate|712|(13, 11, 6)|var|float32
output = func_711(var_712)
func_713 = relay.Function([var_712], output)
mutated_mod['func_713'] = func_713
mutated_mod = relay.transform.InferType()(mutated_mod)
var_717 = relay.var("var_717", dtype = "float32", shape = (2, 2, 6))#candidate|717|(2, 2, 6)|var|float32
uop_718 = relay.log10(var_717.astype('float32')) # shape=(2, 2, 6)
uop_724 = relay.log(uop_718.astype('float32')) # shape=(2, 2, 6)
func_572_call = mod.get_global_var('func_572')
func_573_call = mutated_mod.get_global_var('func_573')
call_729 = relay.TupleGetItem(func_572_call(), 0)
call_730 = relay.TupleGetItem(func_573_call(), 0)
output = relay.Tuple([uop_724,call_729,])
output2 = relay.Tuple([uop_724,call_730,])
func_746 = relay.Function([var_717,], output)
mod['func_746'] = func_746
mod = relay.transform.InferType()(mod)
var_747 = relay.var("var_747", dtype = "float32", shape = (2, 2, 6))#candidate|747|(2, 2, 6)|var|float32
output = func_746(var_747)
func_748 = relay.Function([var_747], output)
mutated_mod['func_748'] = func_748
mutated_mod = relay.transform.InferType()(mutated_mod)
func_599_call = mod.get_global_var('func_599')
func_600_call = mutated_mod.get_global_var('func_600')
call_752 = func_599_call()
call_753 = func_599_call()
func_683_call = mod.get_global_var('func_683')
func_687_call = mutated_mod.get_global_var('func_687')
var_760 = relay.var("var_760", dtype = "float32", shape = (840,))#candidate|760|(840,)|var|float32
var_761 = relay.var("var_761", dtype = "float32", shape = (390,))#candidate|761|(390,)|var|float32
var_762 = relay.var("var_762", dtype = "int16", shape = (48,))#candidate|762|(48,)|var|int16
call_759 = relay.TupleGetItem(func_683_call(relay.reshape(var_760.astype('float32'), [8, 7, 15]), relay.reshape(var_761.astype('float32'), [390,]), relay.reshape(var_762.astype('int16'), [48,]), ), 4)
call_763 = relay.TupleGetItem(func_687_call(relay.reshape(var_760.astype('float32'), [8, 7, 15]), relay.reshape(var_761.astype('float32'), [390,]), relay.reshape(var_762.astype('int16'), [48,]), ), 4)
var_770 = relay.var("var_770", dtype = "float32", shape = (390,))#candidate|770|(390,)|var|float32
bop_771 = relay.less_equal(var_761.astype('bool'), relay.reshape(var_770.astype('bool'), relay.shape_of(var_761))) # shape=(390,)
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
call_774 = func_54_call(relay.reshape(var_762.astype('int16'), [3, 16]), relay.reshape(var_762.astype('int16'), [3, 16]), )
call_775 = func_54_call(relay.reshape(var_762.astype('int16'), [3, 16]), relay.reshape(var_762.astype('int16'), [3, 16]), )
func_599_call = mod.get_global_var('func_599')
func_600_call = mutated_mod.get_global_var('func_600')
call_791 = func_599_call()
call_792 = func_599_call()
output = relay.Tuple([call_752,call_759,var_760,var_762,bop_771,call_774,call_791,])
output2 = relay.Tuple([call_753,call_763,var_760,var_762,bop_771,call_775,call_792,])
func_795 = relay.Function([var_760,var_761,var_762,var_770,], output)
mod['func_795'] = func_795
mod = relay.transform.InferType()(mod)
var_796 = relay.var("var_796", dtype = "float32", shape = (840,))#candidate|796|(840,)|var|float32
var_797 = relay.var("var_797", dtype = "float32", shape = (390,))#candidate|797|(390,)|var|float32
var_798 = relay.var("var_798", dtype = "int16", shape = (48,))#candidate|798|(48,)|var|int16
var_799 = relay.var("var_799", dtype = "float32", shape = (390,))#candidate|799|(390,)|var|float32
output = func_795(var_796,var_797,var_798,var_799,)
func_800 = relay.Function([var_796,var_797,var_798,var_799,], output)
mutated_mod['func_800'] = func_800
mutated_mod = relay.transform.InferType()(mutated_mod)
func_599_call = mod.get_global_var('func_599')
func_600_call = mutated_mod.get_global_var('func_600')
call_819 = func_599_call()
call_820 = func_599_call()
func_572_call = mod.get_global_var('func_572')
func_573_call = mutated_mod.get_global_var('func_573')
call_829 = relay.TupleGetItem(func_572_call(), 0)
call_830 = relay.TupleGetItem(func_573_call(), 0)
output = relay.Tuple([call_819,call_829,])
output2 = relay.Tuple([call_820,call_830,])
func_836 = relay.Function([], output)
mod['func_836'] = func_836
mod = relay.transform.InferType()(mod)
mutated_mod['func_836'] = func_836
mutated_mod = relay.transform.InferType()(mutated_mod)
func_836_call = mutated_mod.get_global_var('func_836')
call_837 = func_836_call()
output = call_837
func_838 = relay.Function([], output)
mutated_mod['func_838'] = func_838
mutated_mod = relay.transform.InferType()(mutated_mod)
func_627_call = mod.get_global_var('func_627')
func_628_call = mutated_mod.get_global_var('func_628')
call_852 = func_627_call()
call_853 = func_627_call()
var_859 = relay.var("var_859", dtype = "float64", shape = (5, 15, 8))#candidate|859|(5, 15, 8)|var|float64
bop_860 = relay.maximum(call_852.astype('uint32'), var_859.astype('uint32')) # shape=(5, 15, 8)
bop_863 = relay.maximum(call_853.astype('uint32'), var_859.astype('uint32')) # shape=(5, 15, 8)
uop_873 = relay.rsqrt(call_852.astype('float64')) # shape=(1, 15, 8)
uop_875 = relay.rsqrt(call_853.astype('float64')) # shape=(1, 15, 8)
func_711_call = mod.get_global_var('func_711')
func_713_call = mutated_mod.get_global_var('func_713')
const_879 = relay.const([[-5.353189,9.845552,4.014781,9.165989,7.613473,3.417598],[-1.366615,4.039507,-5.165016,7.030442,7.409714,-4.814699],[2.257197,-6.051174,-0.553890,-7.102317,-7.674922,8.970511],[3.991606,2.271416,-5.812829,-6.943446,6.176225,-9.284311],[-3.975545,-1.215438,-1.814234,3.703177,1.871930,-9.684999],[7.109811,-9.055176,-2.980098,8.226503,-7.148128,-3.502174],[6.024636,1.760343,-1.250188,6.394091,8.087417,-2.739263],[-2.823832,4.817400,-9.190020,-4.131778,-4.899523,4.041036],[-9.288688,-5.366355,7.137809,-6.510409,2.494242,1.578022],[1.266367,-2.464185,4.290699,-4.975066,9.107362,6.844032],[6.924298,6.267171,-4.771110,-1.674193,9.910302,5.671904],[2.846459,0.016413,0.105870,6.087889,9.232703,8.723450],[-2.804378,5.075315,6.797319,5.757530,-4.056491,-9.226929],[2.624580,0.254603,-3.939504,9.542296,-7.053510,-6.957458],[-1.879948,-4.035790,-4.612353,-1.127429,-4.640868,-8.579572],[-8.197529,-8.287730,-5.323681,9.505003,-3.275785,-1.038696],[6.716918,-5.353798,-3.399696,0.716267,-7.772890,3.711485],[9.115857,-7.027048,0.722216,5.242349,-6.323781,-1.484679],[-8.528536,5.549568,-5.220664,2.032964,6.582237,-4.711664],[2.104433,-6.092049,8.746178,-1.594375,6.841012,-2.349841],[8.473867,-5.077323,-9.725007,-4.361465,-2.647932,6.883830],[1.666620,-4.725759,-0.604989,-2.270013,-7.973659,-2.530517],[-5.176233,-4.838921,5.494465,-9.095475,-0.601789,-6.927852],[2.988874,-8.013484,-5.290427,2.471487,-1.191609,3.985095],[-4.743740,-2.350610,-3.371542,-5.217537,8.296934,9.485191],[-8.700600,7.904366,-0.494538,7.706366,-9.932053,-7.300339],[6.177858,-5.038758,8.367223,-4.683743,-6.129997,7.436837],[4.362267,2.597061,-7.702261,5.432187,4.204520,-5.767004],[6.238414,1.190982,4.815234,-3.623133,0.773588,-8.868212],[-7.548897,-1.756999,-1.598241,-5.187705,-9.911266,-0.726810],[-9.978747,0.256322,0.157956,3.433740,5.355996,-7.813896],[-4.572985,2.876172,-0.998568,1.649982,-2.024694,1.563379],[0.006293,3.439406,2.352220,-6.742076,5.803765,5.867360],[4.884044,7.824937,-1.575575,7.671007,9.535407,-6.540939],[9.403786,-0.614840,-6.760518,-3.321910,1.847531,0.541807],[4.485013,-8.323629,8.143255,3.969258,2.308171,6.571403],[8.498574,-9.274134,1.952805,-4.483227,-0.245097,-5.029660],[-5.483455,-8.039212,-9.761402,-4.827708,-8.182255,2.937489],[4.357457,-5.616026,4.522578,-2.924253,4.807557,9.642563],[2.318619,3.581459,3.123006,-5.307389,-1.600818,6.293844],[-9.828243,-1.875763,3.904033,-1.517379,7.853255,2.229851],[-6.818627,7.250290,-4.796061,-1.548911,-9.965469,-8.837340],[-6.529244,9.319523,4.891814,9.666992,-0.723926,-6.350111],[2.539839,-7.998309,-9.293493,-9.255242,6.803729,-9.710817],[-1.015789,-5.352805,-7.126238,-9.686871,0.499283,5.236227],[6.910378,0.342539,-1.262263,4.208501,-9.143681,-3.355997],[5.440230,-6.868160,-3.147182,-5.027804,8.440055,4.733131],[3.607948,-9.896590,8.257252,-5.239558,1.287900,0.416063],[5.270239,8.121843,-6.474890,-3.998663,-2.549805,0.519295],[5.525906,-4.026196,-5.244438,-2.065567,5.865766,-8.819042],[-1.992169,0.117656,-9.709770,-9.268491,0.446534,-8.055268],[6.090285,1.398031,8.105711,9.857943,9.644229,8.081483],[3.482450,7.021546,1.478388,-5.127859,-0.155113,8.284102],[-0.688741,7.288882,4.979703,1.959688,-1.815162,3.563771],[9.322649,3.798348,-8.313057,-4.770535,-7.040598,-6.087104],[-9.052190,-1.290997,7.946484,5.412008,0.390525,2.347457],[-9.083007,0.442892,-3.978864,-6.336923,7.398745,-9.116877],[2.616944,-2.531449,-6.053358,2.836081,2.884725,-3.128950],[9.562360,-0.470550,-0.920926,5.262530,-1.163261,2.908732],[5.739508,8.553624,4.561907,-5.811893,-0.398236,4.123288],[-4.160863,7.213524,-2.304372,-7.226165,-9.445510,-6.189703],[-8.386223,8.740139,-5.631042,5.660405,5.772838,4.685381],[-1.588029,1.346518,-9.513196,-1.279050,9.262737,-9.894411],[7.606479,8.227549,3.424228,-4.422647,0.676944,-5.185280],[-0.848806,-9.881261,-0.827114,7.319110,0.565928,-3.349924],[0.858258,-9.740741,-8.126789,-7.636783,7.023284,6.544068],[2.988153,8.742698,-3.073035,-3.727426,6.341173,-3.827837],[-7.679518,1.689298,-7.418664,3.837204,-8.280480,-3.918648],[-3.428280,-6.685454,-2.305423,-1.303277,8.583145,-8.096070],[-8.054562,-1.046892,1.152505,1.166992,-6.922540,-3.094103],[-4.097287,-8.404269,0.551871,-6.678600,9.540658,-5.306544],[-6.239599,6.751783,-2.801885,0.313008,7.663259,-7.377407],[-9.598441,-6.314514,-3.034197,2.936266,6.647089,3.135196],[-7.438581,-7.566631,-4.103139,2.932397,-3.548788,-2.634551],[3.740123,8.014761,-9.050399,4.485391,7.924339,2.333615],[-2.452190,5.384485,6.639972,1.324122,-4.655780,7.470960],[-3.737380,0.878396,-3.130688,4.410983,-8.309878,-6.319557],[-1.943468,8.841392,7.880971,-9.502246,-9.940550,8.632084],[-7.412233,8.161542,1.907283,-9.159426,-7.649209,-9.690860],[2.821652,-3.459518,-9.341018,-8.996124,-5.243901,-5.422604],[0.803593,-2.904049,-1.348799,6.135774,-3.456220,1.780854],[4.606026,5.110300,-3.047217,-9.776376,2.975713,7.319822],[7.204308,-9.372358,0.617711,-7.553606,4.598640,-4.340659],[-4.790429,5.138424,3.791225,-5.782161,-5.310038,-3.403457],[9.457946,-5.495122,7.964905,-9.259167,-7.052714,-0.066676],[-6.652649,-4.524924,9.010969,4.261967,-8.578089,-8.469214],[-5.150303,-1.775282,-2.765773,9.216758,-6.153456,-5.641724],[3.495728,-1.496056,-6.626665,6.311742,2.963485,-1.410922],[5.329057,5.366330,-7.702602,4.308779,-8.266894,2.236058],[-0.961800,5.809515,5.192900,-7.720713,-8.654683,-9.530467],[1.962697,8.679827,3.711163,-6.667673,-1.819101,-2.269691],[6.623345,1.417510,0.063323,2.597063,9.896445,-1.387720],[-6.603564,8.170695,-4.922739,4.626684,3.311128,-5.383791],[5.573587,1.631397,-2.075552,-4.423966,2.250213,-9.987516],[3.306582,-3.074122,-3.258685,6.374457,0.523834,2.340581],[-5.501750,-5.180449,-9.506234,-5.198757,1.852644,2.169842],[4.773896,7.182450,2.574237,0.765557,8.499108,4.620112],[3.337747,5.492500,6.991168,-1.594252,2.294597,6.482928],[1.834782,0.935334,-3.290052,6.277360,0.299576,-2.689213],[-3.328715,5.030478,-5.599816,5.997128,8.910501,-4.909604],[9.916144,-9.199879,2.982402,-3.389766,5.924751,5.689066],[-6.260989,6.969979,-5.100065,-0.583474,2.899974,-7.968484],[-4.518720,0.163630,-4.986183,-8.455324,-6.029142,5.814784],[5.993992,4.802845,1.878810,-3.975062,0.862253,7.735548],[0.663705,-6.683568,9.213842,-2.549062,-9.909273,2.010997],[-6.766847,-1.822894,-7.940843,-8.761143,-7.112329,-0.033092],[5.855535,2.514731,-0.961585,-6.447828,8.645833,3.244864],[2.733830,-2.248747,9.301777,0.206551,-4.010637,2.400542],[7.729098,-1.490630,8.832912,5.217991,2.913954,5.186934],[-6.725292,1.857630,-6.836869,-6.208130,9.728730,5.911521],[8.070277,-8.984405,-1.988592,-4.848357,4.168898,5.953827],[-7.804646,8.462993,-2.321158,8.339417,-0.164757,-6.595634],[2.369321,9.247686,6.447467,-1.489113,4.274045,-6.978716],[-7.092947,1.945814,8.280275,-8.513891,1.031281,6.070587],[-1.694911,-4.876385,-5.772252,5.571709,-3.499179,-0.767460],[9.197801,-8.907028,6.579425,-8.369649,7.587824,4.477954],[5.979219,-7.393457,-6.280382,-0.292255,2.272376,6.072440],[7.883435,7.873232,0.505694,0.002130,-3.863952,6.899231],[3.257961,6.321502,5.618511,7.929301,-4.612265,-4.223761],[-1.183065,6.663407,7.973698,5.493528,5.641608,-7.240320],[-0.542698,8.862672,4.078092,-4.150144,9.451035,-3.821697],[-7.142747,0.085929,9.637042,5.738923,-0.735564,5.984211],[-7.228880,-8.819697,-4.568802,-3.461312,-3.644086,3.646254],[8.952394,-4.326779,-1.302424,6.592181,5.880978,0.094931],[-1.678007,-8.431823,-6.457793,0.201005,-1.544788,-3.648298],[-0.206188,8.327538,7.767289,1.912421,-6.656413,2.310572],[-2.250294,9.021445,5.117880,-2.582766,-8.207064,-0.264976],[0.735948,8.804519,9.116208,-6.055070,-3.880771,-3.803303],[-5.118821,-2.744541,-3.284149,8.588149,7.354469,-4.003154],[-0.200346,-5.628682,8.014981,9.171436,-7.793461,-9.350000],[-0.145732,-5.073794,-3.861723,-0.360468,-9.871928,4.239468],[-3.005770,8.199067,4.406774,-0.139547,-8.669217,-2.467519],[2.823101,-4.595300,-5.141733,6.919720,7.870929,-9.891869],[3.938621,6.233032,0.662254,-6.760820,6.455362,9.311598],[3.871620,-3.389517,5.650508,9.676043,-0.484703,-9.671599],[-7.257603,-0.813019,8.671228,2.028359,6.496760,-9.282616],[9.853755,4.653796,-7.677055,4.661568,-1.549505,-0.458190],[2.074458,0.723225,8.985073,-4.325737,8.914576,-0.533732],[8.187968,2.741142,-8.454803,-2.447445,-8.123797,-5.499783],[-3.619003,-2.449958,-5.563180,-2.940677,-8.447904,9.754874],[-9.741924,6.113243,-6.024492,-4.939447,5.394882,0.376625],[-8.142489,5.374347,0.193562,5.306546,-8.925917,-9.913164],[-9.318103,-6.448494,-2.820823,0.776332,9.940040,1.702625]], dtype = "float32")#candidate|879|(143, 6)|const|float32
call_878 = relay.TupleGetItem(func_711_call(relay.reshape(const_879.astype('float32'), [13, 11, 6])), 1)
call_880 = relay.TupleGetItem(func_713_call(relay.reshape(const_879.astype('float32'), [13, 11, 6])), 1)
output = relay.Tuple([bop_860,uop_873,call_878,const_879,])
output2 = relay.Tuple([bop_863,uop_875,call_880,const_879,])
func_885 = relay.Function([var_859,], output)
mod['func_885'] = func_885
mod = relay.transform.InferType()(mod)
mutated_mod['func_885'] = func_885
mutated_mod = relay.transform.InferType()(mutated_mod)
var_886 = relay.var("var_886", dtype = "float64", shape = (5, 15, 8))#candidate|886|(5, 15, 8)|var|float64
func_885_call = mutated_mod.get_global_var('func_885')
call_887 = func_885_call(var_886)
output = call_887
func_888 = relay.Function([var_886], output)
mutated_mod['func_888'] = func_888
mutated_mod = relay.transform.InferType()(mutated_mod)
func_627_call = mod.get_global_var('func_627')
func_628_call = mutated_mod.get_global_var('func_628')
call_908 = func_627_call()
call_909 = func_627_call()
output = relay.Tuple([call_908,])
output2 = relay.Tuple([call_909,])
func_921 = relay.Function([], output)
mod['func_921'] = func_921
mod = relay.transform.InferType()(mod)
mutated_mod['func_921'] = func_921
mutated_mod = relay.transform.InferType()(mutated_mod)
func_921_call = mutated_mod.get_global_var('func_921')
call_922 = func_921_call()
output = call_922
func_923 = relay.Function([], output)
mutated_mod['func_923'] = func_923
mutated_mod = relay.transform.InferType()(mutated_mod)
func_572_call = mod.get_global_var('func_572')
func_573_call = mutated_mod.get_global_var('func_573')
call_926 = relay.TupleGetItem(func_572_call(), 0)
call_927 = relay.TupleGetItem(func_573_call(), 0)
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
var_930 = relay.var("var_930", dtype = "int16", shape = (48,))#candidate|930|(48,)|var|int16
call_929 = func_54_call(relay.reshape(var_930.astype('int16'), [3, 16]), relay.reshape(var_930.astype('int16'), [3, 16]), )
call_931 = func_54_call(relay.reshape(var_930.astype('int16'), [3, 16]), relay.reshape(var_930.astype('int16'), [3, 16]), )
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
call_935 = func_54_call(relay.reshape(call_929.astype('int16'), [3, 16]), relay.reshape(call_929.astype('int16'), [3, 16]), )
call_936 = func_54_call(relay.reshape(call_929.astype('int16'), [3, 16]), relay.reshape(call_929.astype('int16'), [3, 16]), )
output = relay.Tuple([call_926,call_929,var_930,call_935,])
output2 = relay.Tuple([call_927,call_931,var_930,call_936,])
func_940 = relay.Function([var_930,], output)
mod['func_940'] = func_940
mod = relay.transform.InferType()(mod)
var_941 = relay.var("var_941", dtype = "int16", shape = (48,))#candidate|941|(48,)|var|int16
output = func_940(var_941)
func_942 = relay.Function([var_941], output)
mutated_mod['func_942'] = func_942
mutated_mod = relay.transform.InferType()(mutated_mod)
var_944 = relay.var("var_944", dtype = "uint8", shape = ())#candidate|944|()|var|uint8
var_945 = relay.var("var_945", dtype = "uint8", shape = (11, 15, 15))#candidate|945|(11, 15, 15)|var|uint8
bop_946 = relay.bitwise_or(var_944.astype('uint8'), var_945.astype('uint8')) # shape=(11, 15, 15)
output = bop_946
output2 = bop_946
func_949 = relay.Function([var_944,var_945,], output)
mod['func_949'] = func_949
mod = relay.transform.InferType()(mod)
var_950 = relay.var("var_950", dtype = "uint8", shape = ())#candidate|950|()|var|uint8
var_951 = relay.var("var_951", dtype = "uint8", shape = (11, 15, 15))#candidate|951|(11, 15, 15)|var|uint8
output = func_949(var_950,var_951,)
func_952 = relay.Function([var_950,var_951,], output)
mutated_mod['func_952'] = func_952
mutated_mod = relay.transform.InferType()(mutated_mod)
func_921_call = mod.get_global_var('func_921')
func_923_call = mutated_mod.get_global_var('func_923')
call_1002 = relay.TupleGetItem(func_921_call(), 0)
call_1003 = relay.TupleGetItem(func_923_call(), 0)
var_1021 = relay.var("var_1021", dtype = "float64", shape = (4, 15, 8))#candidate|1021|(4, 15, 8)|var|float64
bop_1022 = relay.power(call_1002.astype('float32'), var_1021.astype('float32')) # shape=(4, 15, 8)
bop_1025 = relay.power(call_1003.astype('float32'), var_1021.astype('float32')) # shape=(4, 15, 8)
output = relay.Tuple([bop_1022,])
output2 = relay.Tuple([bop_1025,])
func_1030 = relay.Function([var_1021,], output)
mod['func_1030'] = func_1030
mod = relay.transform.InferType()(mod)
mutated_mod['func_1030'] = func_1030
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1031 = relay.var("var_1031", dtype = "float64", shape = (4, 15, 8))#candidate|1031|(4, 15, 8)|var|float64
func_1030_call = mutated_mod.get_global_var('func_1030')
call_1032 = func_1030_call(var_1031)
output = call_1032
func_1033 = relay.Function([var_1031], output)
mutated_mod['func_1033'] = func_1033
mutated_mod = relay.transform.InferType()(mutated_mod)
func_599_call = mod.get_global_var('func_599')
func_600_call = mutated_mod.get_global_var('func_600')
call_1037 = func_599_call()
call_1038 = func_599_call()
var_1042 = relay.var("var_1042", dtype = "float64", shape = (5, 15, 8))#candidate|1042|(5, 15, 8)|var|float64
bop_1043 = relay.logical_xor(call_1037.astype('int8'), var_1042.astype('int8')) # shape=(5, 15, 8)
bop_1046 = relay.logical_xor(call_1038.astype('int8'), var_1042.astype('int8')) # shape=(5, 15, 8)
bop_1049 = relay.less_equal(bop_1043.astype('bool'), relay.reshape(var_1042.astype('bool'), relay.shape_of(bop_1043))) # shape=(5, 15, 8)
bop_1052 = relay.less_equal(bop_1046.astype('bool'), relay.reshape(var_1042.astype('bool'), relay.shape_of(bop_1046))) # shape=(5, 15, 8)
uop_1059 = relay.asin(bop_1043.astype('float32')) # shape=(5, 15, 8)
uop_1061 = relay.asin(bop_1046.astype('float32')) # shape=(5, 15, 8)
output = relay.Tuple([bop_1049,uop_1059,])
output2 = relay.Tuple([bop_1052,uop_1061,])
func_1063 = relay.Function([var_1042,], output)
mod['func_1063'] = func_1063
mod = relay.transform.InferType()(mod)
var_1064 = relay.var("var_1064", dtype = "float64", shape = (5, 15, 8))#candidate|1064|(5, 15, 8)|var|float64
output = func_1063(var_1064)
func_1065 = relay.Function([var_1064], output)
mutated_mod['func_1065'] = func_1065
mutated_mod = relay.transform.InferType()(mutated_mod)
func_921_call = mod.get_global_var('func_921')
func_923_call = mutated_mod.get_global_var('func_923')
call_1100 = relay.TupleGetItem(func_921_call(), 0)
call_1101 = relay.TupleGetItem(func_923_call(), 0)
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
const_1113 = relay.const([-8,5,6,-1,-8,10,-6,8,3,-1,-10,-4,2,7,5,-7,2,-4,-6,9,9,5,8,-5,3,6,4,-2,-7,4,-2,6,-5,-2,5,-6,-9,-10,-6,1,-3,-5,-8,5,-5,-1,2,-8], dtype = "int16")#candidate|1113|(48,)|const|int16
call_1112 = func_54_call(relay.reshape(const_1113.astype('int16'), [3, 16]), relay.reshape(const_1113.astype('int16'), [3, 16]), )
call_1114 = func_54_call(relay.reshape(const_1113.astype('int16'), [3, 16]), relay.reshape(const_1113.astype('int16'), [3, 16]), )
func_627_call = mod.get_global_var('func_627')
func_628_call = mutated_mod.get_global_var('func_628')
call_1135 = func_627_call()
call_1136 = func_627_call()
output = relay.Tuple([call_1100,call_1112,const_1113,call_1135,])
output2 = relay.Tuple([call_1101,call_1114,const_1113,call_1136,])
func_1160 = relay.Function([], output)
mod['func_1160'] = func_1160
mod = relay.transform.InferType()(mod)
output = func_1160()
func_1161 = relay.Function([], output)
mutated_mod['func_1161'] = func_1161
mutated_mod = relay.transform.InferType()(mutated_mod)
func_921_call = mod.get_global_var('func_921')
func_923_call = mutated_mod.get_global_var('func_923')
call_1269 = relay.TupleGetItem(func_921_call(), 0)
call_1270 = relay.TupleGetItem(func_923_call(), 0)
func_949_call = mod.get_global_var('func_949')
func_952_call = mutated_mod.get_global_var('func_952')
var_1272 = relay.var("var_1272", dtype = "uint8", shape = ())#candidate|1272|()|var|uint8
var_1273 = relay.var("var_1273", dtype = "uint8", shape = (2475, 1))#candidate|1273|(2475, 1)|var|uint8
call_1271 = func_949_call(relay.reshape(var_1272.astype('uint8'), []), relay.reshape(var_1273.astype('uint8'), [11, 15, 15]), )
call_1274 = func_949_call(relay.reshape(var_1272.astype('uint8'), []), relay.reshape(var_1273.astype('uint8'), [11, 15, 15]), )
func_1030_call = mod.get_global_var('func_1030')
func_1033_call = mutated_mod.get_global_var('func_1033')
var_1276 = relay.var("var_1276", dtype = "float64", shape = (480,))#candidate|1276|(480,)|var|float64
call_1275 = relay.TupleGetItem(func_1030_call(relay.reshape(var_1276.astype('float64'), [4, 15, 8])), 0)
call_1277 = relay.TupleGetItem(func_1033_call(relay.reshape(var_1276.astype('float64'), [4, 15, 8])), 0)
const_1284 = relay.const([[[-5.061025,8.828124,-5.260750,2.637549,-6.564349,-8.161938,-3.449770,-3.529372],[1.147152,-5.644073,-2.260378,8.152345,0.202246,-1.273939,-8.516585,0.139013],[6.763444,-8.072938,8.224022,-2.334893,4.043016,-5.085970,-2.464476,-1.689754],[6.646768,-0.677367,9.209903,-7.153267,6.607027,7.218965,-1.586320,-2.109437],[8.419605,2.318825,-1.701576,0.150004,2.880753,-2.195853,-8.437546,6.857783],[1.920376,-9.443938,0.436763,8.518282,8.114952,-9.352674,3.894885,4.544042],[-3.459930,3.728041,9.610158,-4.908684,3.336004,-2.129957,9.218127,9.355540],[9.542570,-7.191460,-7.909238,1.165055,-4.877544,-5.631307,3.359004,9.301222],[-0.897320,-3.028586,0.585344,-6.777219,3.195451,-2.591580,-9.204251,-8.209786],[5.747509,5.968446,-8.927215,1.193241,-3.437290,7.132792,-9.979012,4.779059],[5.412389,-0.790146,-1.286599,3.627090,8.409907,5.036435,4.990665,-5.622995],[-5.731936,9.198620,-5.388426,5.898297,-7.930214,-6.550802,9.160466,4.138046],[-8.090181,6.406205,3.935876,-4.091473,5.861434,-8.439905,7.856871,3.921593],[-2.019280,1.721511,-4.902298,-6.442301,6.115001,8.019923,-0.146534,4.781788],[-7.487380,-5.402161,-6.678719,-4.360094,-3.180083,-1.429055,9.535181,8.569442]],[[-8.776002,1.418998,3.527029,4.548932,-9.521172,-5.250981,-9.245379,7.060995],[-7.507397,-5.228281,9.822856,-1.956677,5.335934,7.704930,5.384304,5.795033],[2.277586,-7.896091,-8.635633,4.036163,-5.934847,2.173571,-5.370060,6.152082],[-7.600666,8.323265,-9.799860,1.367982,-7.437657,6.566671,8.517794,-9.346168],[4.172143,-8.775284,-8.723727,-3.195178,1.902859,0.957442,3.923003,-2.956944],[-8.193619,6.309959,-7.626524,5.051574,6.032303,-5.696125,0.465316,-3.074729],[5.316499,-6.128797,-5.773337,-9.970631,-1.325208,4.867971,-1.355957,-2.696473],[9.838166,3.490204,-8.083290,1.534372,5.741075,2.808988,-0.500757,9.011408],[-8.193994,0.930836,7.230061,-0.313252,-0.086858,8.314420,3.329489,8.810867],[7.152846,-3.158584,6.035885,3.688824,9.541017,0.953901,-6.424215,2.706481],[-0.128213,-7.813149,-6.371435,-7.992518,-0.905322,6.177029,7.064839,8.516580],[-6.187127,-7.980101,3.965494,-8.654617,-6.516293,-1.876370,7.560287,3.478396],[-0.989798,4.708386,-2.291288,4.796947,9.316505,3.907774,-8.801346,5.654053],[-7.047494,-2.390370,2.535587,1.207123,3.251915,0.678809,0.052449,-7.877561],[-2.358268,0.984123,2.146805,7.204686,0.536907,6.423856,4.989795,-2.695709]],[[9.438739,4.217096,-0.471988,-1.114599,-8.865317,-3.136327,3.879204,-0.975627],[-7.692825,-6.603083,-8.579990,-0.010636,-2.707692,0.379883,-1.580306,-8.959807],[2.767969,-0.271367,-9.471803,4.548329,-1.013524,-0.753973,-7.927767,8.883377],[-4.056123,9.629338,-0.251644,1.279601,9.098592,-1.542264,-2.711781,4.724658],[0.576375,6.878845,6.913655,-6.257383,-8.760228,4.031598,3.864202,4.732517],[-0.650794,5.226677,-1.941218,-7.250703,3.073731,6.110852,6.872565,7.705367],[4.841165,-8.381266,0.279284,-9.987232,2.685604,8.659641,9.362296,3.200102],[8.290716,-7.007571,7.434522,5.138827,4.529906,-2.153723,-4.283631,4.745495],[1.478454,-3.412014,3.390822,-2.199715,-8.576605,9.947697,2.272189,7.493551],[1.404433,-2.088703,-9.595418,-0.184254,5.802361,-0.262136,-4.065994,7.079584],[6.241685,9.027561,-4.888067,-7.994825,0.071588,-5.187654,-8.489382,6.418617],[7.136158,-4.567344,6.313410,-6.012812,2.375610,-1.504644,-4.377719,9.439760],[0.446713,-6.362308,7.039895,-7.941301,8.783075,4.382222,8.460848,6.454141],[-3.329947,-3.763388,-1.657270,-8.119466,-6.163589,-7.449418,-1.560591,-4.026514],[-0.307105,-8.788407,2.833972,-9.391541,7.553168,-0.402261,-0.756754,-3.270151]],[[0.830842,-4.934726,6.026643,-9.182995,-3.920582,-1.139813,-8.345499,-2.564613],[-4.049715,-2.404213,-8.097465,-0.235145,-5.286045,-9.006361,-2.089497,-0.256020],[8.718652,-7.614616,1.535482,-9.797707,5.091640,1.860263,-4.865737,-9.139455],[-4.551581,-0.173052,8.743754,-6.007238,-3.965103,-5.472029,7.047710,-8.507697],[6.297254,9.021169,8.419184,-7.820404,7.238612,5.616611,-9.211495,-2.558234],[-2.554195,3.953614,0.299503,-5.331772,-4.429258,-4.745307,2.127732,-4.124212],[1.415113,1.827915,-7.432452,0.395380,9.117008,8.060765,-4.418315,-1.916857],[-0.330677,-3.428515,-8.443966,1.736883,9.389071,-9.399732,4.003276,-5.213198],[0.013235,2.709551,1.617352,3.347746,1.591448,-6.393195,-7.117373,5.232942],[-8.762856,-9.757259,-7.982069,7.089617,4.190992,-5.751509,4.105643,-1.330404],[-5.184517,-7.339676,-3.065279,8.168258,-0.388412,-3.973677,-7.583944,7.968744],[4.806170,9.706987,-1.242132,-6.964587,0.703282,-5.170684,8.910085,7.136036],[-2.553728,3.661216,9.502583,7.956200,9.878207,-0.231694,0.914416,-3.466256],[1.598851,-3.519806,7.480338,0.274619,6.682423,6.919433,-7.483112,-3.041685],[-5.433850,-2.379573,-6.652423,7.883768,6.359246,-1.850176,2.645567,4.468633]]], dtype = "float32")#candidate|1284|(4, 15, 8)|const|float32
bop_1285 = relay.subtract(call_1275.astype('uint8'), relay.reshape(const_1284.astype('uint8'), relay.shape_of(call_1275))) # shape=(4, 15, 8)
bop_1288 = relay.subtract(call_1277.astype('uint8'), relay.reshape(const_1284.astype('uint8'), relay.shape_of(call_1277))) # shape=(4, 15, 8)
uop_1293 = relay.asinh(bop_1285.astype('float64')) # shape=(4, 15, 8)
uop_1295 = relay.asinh(bop_1288.astype('float64')) # shape=(4, 15, 8)
bop_1300 = relay.greater(uop_1293.astype('bool'), relay.reshape(bop_1285.astype('bool'), relay.shape_of(uop_1293))) # shape=(4, 15, 8)
bop_1303 = relay.greater(uop_1295.astype('bool'), relay.reshape(bop_1288.astype('bool'), relay.shape_of(uop_1295))) # shape=(4, 15, 8)
func_572_call = mod.get_global_var('func_572')
func_573_call = mutated_mod.get_global_var('func_573')
call_1312 = relay.TupleGetItem(func_572_call(), 0)
call_1313 = relay.TupleGetItem(func_573_call(), 0)
bop_1318 = relay.less_equal(bop_1300.astype('bool'), var_1272.astype('bool')) # shape=(4, 15, 8)
bop_1321 = relay.less_equal(bop_1303.astype('bool'), var_1272.astype('bool')) # shape=(4, 15, 8)
bop_1326 = relay.maximum(uop_1293.astype('uint8'), relay.reshape(var_1276.astype('uint8'), relay.shape_of(uop_1293))) # shape=(4, 15, 8)
bop_1329 = relay.maximum(uop_1295.astype('uint8'), relay.reshape(var_1276.astype('uint8'), relay.shape_of(uop_1295))) # shape=(4, 15, 8)
output = relay.Tuple([call_1269,call_1271,var_1273,call_1312,bop_1318,bop_1326,])
output2 = relay.Tuple([call_1270,call_1274,var_1273,call_1313,bop_1321,bop_1329,])
func_1333 = relay.Function([var_1272,var_1273,var_1276,], output)
mod['func_1333'] = func_1333
mod = relay.transform.InferType()(mod)
mutated_mod['func_1333'] = func_1333
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1333_call = mutated_mod.get_global_var('func_1333')
var_1335 = relay.var("var_1335", dtype = "uint8", shape = ())#candidate|1335|()|var|uint8
var_1336 = relay.var("var_1336", dtype = "uint8", shape = (2475, 1))#candidate|1336|(2475, 1)|var|uint8
var_1337 = relay.var("var_1337", dtype = "float64", shape = (480,))#candidate|1337|(480,)|var|float64
call_1334 = func_1333_call(var_1335,var_1336,var_1337,)
output = call_1334
func_1338 = relay.Function([var_1335,var_1336,var_1337,], output)
mutated_mod['func_1338'] = func_1338
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1386 = relay.const(5.635304, dtype = "float64")#candidate|1386|()|const|float64
const_1387 = relay.const([[[5.639415,-9.878042,-1.524115,3.513606,-2.572946,6.220248,-3.440926,-4.251783,5.104132,-0.918745],[-8.407195,7.814980,-9.993975,4.453660,4.505250,2.383036,1.454060,-8.542643,-0.409979,8.711425],[5.841663,-8.400929,8.402160,-8.974725,-0.496590,7.450437,4.046053,9.065515,2.939139,8.279990],[0.918326,5.906843,-2.424794,-1.998775,0.751602,1.696875,-0.016308,8.256527,-5.753797,0.153605],[-6.369520,8.167049,4.368147,9.438114,5.362279,7.629273,0.987496,-5.537310,-2.411441,-8.400981],[-9.943208,9.273731,4.052131,-2.764393,-3.112172,-9.324257,-8.566837,-4.735113,-8.566425,-3.002908],[-4.739123,-3.049347,-4.890934,3.190135,-1.847551,-8.491879,4.045462,9.415539,-4.570343,-2.714871],[1.539099,-7.770273,1.744780,5.133717,-2.826479,6.645627,5.057458,6.581564,-7.265012,6.476892],[-9.854539,9.638705,7.952363,1.163831,-7.366704,-6.525292,-6.858810,9.596157,6.004860,-5.688917],[-4.761135,6.685286,4.138058,5.475668,9.053789,-4.588564,8.379051,-9.520966,8.715009,-1.053609],[7.850673,6.707189,1.350400,3.085577,-7.254289,0.650447,-5.519229,-5.354847,2.889185,2.438094]],[[-7.308976,-7.198090,-1.032979,-9.893396,-4.479107,1.370373,2.109524,-4.923331,-3.677728,-7.478871],[8.747183,9.570101,-9.378855,0.784993,-5.013548,-7.147783,5.655972,-3.814700,8.797577,6.534720],[4.085540,-6.318756,2.659503,-7.938616,-9.601819,-8.148946,-8.316338,8.044111,-7.704682,-7.282981],[-7.218764,6.679655,6.929352,0.047103,0.297980,1.347984,0.751105,5.299435,-5.179375,-5.502965],[-2.519873,-9.062524,4.810467,1.393508,-3.278158,-1.793891,2.563887,-0.130447,9.307277,5.683797],[-8.717744,9.652969,-3.602812,2.999402,-4.685606,-4.730139,-2.435302,3.907454,-2.636264,1.491957],[-0.347174,8.523072,-0.524061,0.593544,0.071587,-5.920345,2.411995,-6.264391,-0.081148,-7.763992],[6.133700,-1.466313,1.479486,8.212902,-7.556113,-1.329964,-9.102610,-4.930188,-3.136930,-1.161087],[3.607546,8.613834,9.034834,-8.815976,0.709261,-6.793899,8.488184,5.942002,7.677134,0.501611],[0.291839,-6.018992,2.030179,-9.493658,-4.828616,-3.462739,9.933475,-1.524159,9.252617,9.631599],[1.011407,0.438040,-4.902159,0.199975,-9.682905,6.943550,9.780147,0.671482,7.211561,-9.775938]],[[5.131126,4.924006,-3.527768,6.535901,-3.681110,8.040546,-3.180460,7.878508,2.658861,-6.687375],[3.557439,4.961688,-2.452967,0.309991,3.752013,8.181358,-6.493793,6.241939,0.485363,-8.888920],[5.396082,8.296718,5.685205,-5.120344,-0.562661,-2.672905,5.724986,-3.551879,-3.430567,9.323853],[0.838251,-3.370008,4.607429,-1.403754,-0.424330,-7.096908,-8.011555,-1.945303,-7.260372,-4.103606],[5.503060,-7.763605,9.886071,-0.730271,2.124258,3.552197,4.948956,-7.566918,8.448685,5.586546],[-9.538868,-5.903392,7.023122,-0.324931,9.698600,-1.043224,1.476682,6.487828,8.145868,-1.664149],[4.372682,7.160411,-0.947241,5.406994,8.288650,9.363003,9.667680,-9.227186,-2.228208,-4.496164],[-6.781903,5.757083,-5.251175,-1.291919,-8.332460,-0.940487,-3.924911,-0.455455,6.901021,-1.653757],[-3.622868,-1.528261,2.415384,6.715334,7.309370,-0.150272,-4.383713,7.982676,-5.242707,6.745986],[8.015958,2.545732,1.129477,-3.081824,2.084479,5.865417,-1.339927,1.495073,8.666059,-6.805564],[1.471627,-2.557019,-2.153917,-8.836235,2.468034,7.697997,0.759262,-1.225798,5.675833,3.381327]],[[0.199792,-4.495088,9.758732,-8.167046,-7.937635,0.698402,6.448246,-8.432479,-0.942736,-8.899515],[-2.669403,-7.867138,-1.905578,-0.505380,0.934504,3.651376,5.035683,-2.526874,8.062041,1.333506],[7.741100,0.287717,-1.425747,-4.211796,-2.599054,-5.735808,9.567408,-2.041687,6.388765,8.756813],[5.785473,3.237415,-7.530909,7.817630,-9.856053,-5.297522,3.521703,-4.759401,3.081159,-8.448884],[-8.574290,-6.179631,3.650908,1.794378,8.771623,9.518662,9.824625,0.387035,2.058211,-5.003038],[4.018767,7.137922,-0.753016,-9.899634,3.589060,-1.392715,3.416253,3.510940,5.760396,9.799826],[1.218609,2.897093,-2.996311,-6.605040,9.704477,8.484122,7.666772,-9.308144,3.213141,1.422933],[1.057120,-9.861570,-5.001804,-6.108686,-7.470558,6.746797,-8.617218,1.202240,7.632179,-0.854165],[-0.873784,-3.344696,0.576446,4.255189,4.049685,0.003481,-4.754653,-9.217177,1.280199,0.099662],[-7.873741,5.908587,1.898669,4.718124,-1.095494,-7.599993,-9.476735,9.639496,8.158626,-0.415798],[0.189483,9.542998,4.838687,4.082903,-0.595663,-5.797373,4.748814,-7.053228,-3.263085,7.293022]],[[2.781344,2.650072,-2.393141,3.025250,-6.764980,0.399475,4.644715,2.925107,-1.081164,9.123516],[9.456417,5.921564,7.572918,-5.675261,-1.413311,1.779196,5.862194,8.675855,5.990542,5.553281],[-9.247835,5.193300,9.143281,-9.342000,7.642404,3.717591,2.428745,7.365651,-3.391370,9.213268],[-5.649273,-2.378758,9.320169,2.259497,8.498033,-7.360978,4.722311,2.937343,9.073261,-4.685169],[-8.111493,8.222848,2.041891,-0.497865,-6.613534,-4.257370,-7.518968,-2.079054,-8.496107,-0.480550],[-5.100912,8.982044,5.140380,0.997812,-0.281482,1.189365,5.872924,-2.382560,-8.712055,-1.149224],[-1.058467,7.186218,1.340565,8.028778,0.495346,0.672729,-1.026660,-3.214435,-2.168572,-6.238187],[3.221601,5.374603,2.699819,8.895672,-3.993337,-0.703364,-2.136676,-5.777858,-4.944073,0.280839],[1.179652,6.931593,8.125864,7.861324,1.001558,-6.979148,-2.801770,2.409773,-7.720714,9.048415],[-6.865246,8.336061,1.915505,7.934092,2.274418,3.499776,3.848282,4.607624,-5.602116,-5.154172],[-4.209332,2.212107,-5.412030,-5.986515,0.133030,-1.070929,-6.478515,5.734024,7.592218,2.043991]],[[7.561941,4.162170,4.787944,-4.826151,-1.367465,-1.735074,3.865277,1.155076,-8.716213,-0.632123],[6.406433,-5.677469,7.681220,4.494494,-0.179195,2.335529,6.140845,-1.074456,0.891631,2.080507],[-7.307337,7.628835,7.248870,2.104278,-0.090678,0.103741,-2.793814,2.558469,9.765638,-8.102379],[4.577516,-9.599572,8.701941,-1.811396,9.935436,-9.774554,9.840952,3.528269,-6.873147,-8.784240],[7.848931,-9.870043,0.445887,9.988070,-3.795691,-8.060429,0.016759,-1.431878,-1.003822,-1.410339],[-7.145207,6.263106,-6.368396,-9.672209,4.750637,4.887533,3.664050,8.320326,-5.111050,3.663437],[-6.180138,-3.443885,-2.175377,-8.082544,5.935907,-7.403684,1.954386,5.529075,7.004471,-2.007732],[1.332723,6.143956,0.639222,6.123259,5.747310,-4.184895,4.270157,8.342840,-7.101149,-1.957259],[-8.474850,4.220589,-2.638588,2.343591,3.748156,-2.881807,-6.367361,4.582075,-2.928281,3.509399],[5.345166,-2.234277,-5.542859,4.857075,8.927372,3.109699,-7.072841,-0.592226,0.723204,-1.693597],[6.179356,0.524297,-1.992237,-7.164803,-7.463898,-8.273510,0.929806,-1.014739,9.830725,-1.358923]],[[6.437126,-1.850216,4.271770,-8.182929,0.487240,4.262981,5.129510,-4.081139,2.068605,1.429581],[-1.169411,4.843343,-3.681309,4.100293,8.809150,-5.562148,0.060170,0.372723,8.385798,-6.871613],[-6.747956,-0.493352,-5.139479,-0.718062,7.103252,2.700393,4.840765,9.286298,-1.694239,0.018453],[2.981250,-8.970024,3.346410,5.781831,5.344653,6.917043,1.500259,-3.326598,-7.749464,5.016302],[-8.905147,2.097910,4.373177,5.365567,1.608686,-3.770979,-4.566329,-1.217921,-8.385156,5.276697],[1.405768,6.038211,-2.083108,-2.754777,-7.502869,-4.121618,4.269337,9.328615,-7.454905,-2.226908],[0.403092,-8.052181,-4.254795,2.395135,-3.326728,-0.583714,1.582307,-2.141127,1.099598,-1.132718],[-5.226646,-6.032079,-3.335722,6.796356,-6.487639,2.045964,-8.357065,-1.697176,-2.808728,5.690996],[-3.135071,-8.515909,3.577431,5.462361,4.999791,1.698063,-7.457941,8.449306,5.704591,3.040173],[2.425866,5.491066,3.026808,-7.013316,-8.065557,-2.437638,6.477124,-8.357394,-0.956811,-4.753572],[-2.826377,8.489582,0.330359,6.079195,4.408946,3.180485,2.910383,-6.369827,-4.579349,-1.290112]],[[-0.056067,7.327169,7.384364,5.956618,3.827801,-3.343161,9.190475,-1.435783,-1.022578,3.181412],[-9.719349,-0.696386,2.628543,-3.924824,7.462491,-2.498446,-9.313763,-0.033099,-4.444117,8.140928],[1.377774,4.631475,6.434026,1.605354,4.845872,-4.575610,0.467801,-4.986511,6.890600,-4.201558],[8.684088,1.887051,-8.032135,-4.826354,4.177458,-6.906152,2.980394,8.358571,3.914017,-6.833189],[1.690985,9.169141,-4.807687,3.191038,-9.758592,-7.567826,6.608715,3.484589,7.675002,-1.764982],[3.471504,1.537787,-9.928414,-5.575465,-4.441810,-0.431090,2.030487,-8.483453,6.869903,3.114499],[-9.902978,-2.680124,9.456343,2.339942,2.230828,3.902807,3.509938,5.779374,6.098007,9.227773],[-4.045183,0.757179,4.679685,4.644714,-3.858907,3.171203,0.032545,-0.805667,4.935526,0.217999],[5.912998,-5.824320,-0.471349,-5.786864,2.171451,6.420691,5.468019,9.391804,-3.899312,-9.895611],[1.745581,9.237893,5.348067,-7.762123,-9.671647,2.518534,-0.537501,-2.439899,8.950574,6.170937],[-6.452561,-4.448344,8.292683,0.569815,7.728954,-3.429908,7.458902,7.721415,3.672323,5.404987]]], dtype = "float64")#candidate|1387|(8, 11, 10)|const|float64
bop_1388 = relay.add(const_1386.astype('float64'), const_1387.astype('float64')) # shape=(8, 11, 10)
func_746_call = mod.get_global_var('func_746')
func_748_call = mutated_mod.get_global_var('func_748')
const_1395 = relay.const([[-1.681403,-4.645209,7.176297,-1.561110,7.075487,-6.641671,-6.478486,5.356294,1.108124,-8.352871,4.637208,-7.300549,-7.668965,-1.884104,-2.903603,-3.439235,9.908272,-5.200807,3.019731,2.953023,-3.854438,4.175737,-2.738817,4.245126]], dtype = "float32")#candidate|1395|(1, 24)|const|float32
call_1394 = relay.TupleGetItem(func_746_call(relay.reshape(const_1395.astype('float32'), [2, 2, 6])), 1)
call_1396 = relay.TupleGetItem(func_748_call(relay.reshape(const_1395.astype('float32'), [2, 2, 6])), 1)
output = relay.Tuple([bop_1388,call_1394,const_1395,])
output2 = relay.Tuple([bop_1388,call_1396,const_1395,])
func_1398 = relay.Function([], output)
mod['func_1398'] = func_1398
mod = relay.transform.InferType()(mod)
mutated_mod['func_1398'] = func_1398
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1398_call = mutated_mod.get_global_var('func_1398')
call_1399 = func_1398_call()
output = call_1399
func_1400 = relay.Function([], output)
mutated_mod['func_1400'] = func_1400
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1416 = relay.var("var_1416", dtype = "float64", shape = (3, 9, 11))#candidate|1416|(3, 9, 11)|var|float64
uop_1417 = relay.acos(var_1416.astype('float64')) # shape=(3, 9, 11)
uop_1426 = relay.acosh(uop_1417.astype('float32')) # shape=(3, 9, 11)
output = uop_1426
output2 = uop_1426
func_1430 = relay.Function([var_1416,], output)
mod['func_1430'] = func_1430
mod = relay.transform.InferType()(mod)
mutated_mod['func_1430'] = func_1430
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1431 = relay.var("var_1431", dtype = "float64", shape = (3, 9, 11))#candidate|1431|(3, 9, 11)|var|float64
func_1430_call = mutated_mod.get_global_var('func_1430')
call_1432 = func_1430_call(var_1431)
output = call_1432
func_1433 = relay.Function([var_1431], output)
mutated_mod['func_1433'] = func_1433
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1160_call = mod.get_global_var('func_1160')
func_1161_call = mutated_mod.get_global_var('func_1161')
call_1454 = relay.TupleGetItem(func_1160_call(), 0)
call_1455 = relay.TupleGetItem(func_1161_call(), 0)
output = call_1454
output2 = call_1455
func_1464 = relay.Function([], output)
mod['func_1464'] = func_1464
mod = relay.transform.InferType()(mod)
mutated_mod['func_1464'] = func_1464
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1464_call = mutated_mod.get_global_var('func_1464')
call_1465 = func_1464_call()
output = call_1465
func_1466 = relay.Function([], output)
mutated_mod['func_1466'] = func_1466
mutated_mod = relay.transform.InferType()(mutated_mod)
func_599_call = mod.get_global_var('func_599')
func_600_call = mutated_mod.get_global_var('func_600')
call_1473 = func_599_call()
call_1474 = func_599_call()
func_1063_call = mod.get_global_var('func_1063')
func_1065_call = mutated_mod.get_global_var('func_1065')
var_1484 = relay.var("var_1484", dtype = "float64", shape = (600,))#candidate|1484|(600,)|var|float64
call_1483 = relay.TupleGetItem(func_1063_call(relay.reshape(var_1484.astype('float64'), [5, 15, 8])), 0)
call_1485 = relay.TupleGetItem(func_1065_call(relay.reshape(var_1484.astype('float64'), [5, 15, 8])), 0)
output = relay.Tuple([call_1473,call_1483,var_1484,])
output2 = relay.Tuple([call_1474,call_1485,var_1484,])
func_1491 = relay.Function([var_1484,], output)
mod['func_1491'] = func_1491
mod = relay.transform.InferType()(mod)
mutated_mod['func_1491'] = func_1491
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1492 = relay.var("var_1492", dtype = "float64", shape = (600,))#candidate|1492|(600,)|var|float64
func_1491_call = mutated_mod.get_global_var('func_1491')
call_1493 = func_1491_call(var_1492)
output = call_1493
func_1494 = relay.Function([var_1492], output)
mutated_mod['func_1494'] = func_1494
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1506 = relay.var("var_1506", dtype = "int64", shape = (6, 2, 8))#candidate|1506|(6, 2, 8)|var|int64
var_1507 = relay.var("var_1507", dtype = "int64", shape = (6, 2, 8))#candidate|1507|(6, 2, 8)|var|int64
bop_1508 = relay.left_shift(var_1506.astype('int64'), relay.reshape(var_1507.astype('int64'), relay.shape_of(var_1506))) # shape=(6, 2, 8)
uop_1519 = relay.atan(var_1506.astype('float64')) # shape=(6, 2, 8)
func_795_call = mod.get_global_var('func_795')
func_800_call = mutated_mod.get_global_var('func_800')
const_1536 = relay.const([2.303876,-0.320391,-4.001028,-4.099988,-9.949178,2.304500,-5.233044,-6.828012,4.817407,-8.133259,-6.066587,6.894760,-4.551709,-3.644045,-2.400841,1.944037,-0.124130,4.291295,-2.811556,7.038646,-3.170364,2.693538,8.653689,-3.002782,1.890783,3.154596,-5.959342,8.631314,4.751683,-8.661470,-5.902314,9.847708,-2.810332,-7.835814,1.913573,1.929430,-5.724116,-8.562415,-2.979200,-3.792444,-7.478444,-8.114228,-2.575879,2.278816,2.020662,7.391030,0.549426,-1.391763,3.183575,-2.985145,7.221620,0.535713,8.671737,8.301630,-6.358694,5.728195,0.688956,3.762162,7.650736,8.419963,1.901378,-6.919960,-2.863296,-1.968844,8.477196,-3.973625,-8.040562,-1.744157,2.290338,1.121162,8.124178,-6.284177,-2.555578,3.235527,-1.939971,-3.390702,9.709513,-6.549720,-3.157339,-0.772206,-2.422445,-7.626805,-1.804064,-3.232997,-0.383754,7.006120,-2.019450,6.029863,6.606515,-5.348354,0.691314,0.104402,0.832751,-6.288809,-1.516627,-4.225726,5.405885,4.851245,8.520387,-5.356708,-3.632149,-3.657618,5.232045,1.875027,-8.124559,3.329355,2.665338,-6.456535,-0.213152,-7.888199,7.132405,4.410498,2.724463,-3.370883,-2.100769,-6.758881,-9.224435,1.704507,-6.319849,7.347664,-6.286171,9.493118,2.122760,4.930986,-0.047604,4.402301,-7.378716,3.388904,6.581875,-5.291563,-1.098474,-6.764059,0.298826,-2.600354,3.923825,-7.799047,-9.799638,7.732064,-0.984107,-6.946801,-4.392643,-2.740677,-3.498591,-2.950208,-0.444869,-6.292823,8.556925,3.751942,-1.744524,5.120791,4.067866,-6.779657,7.907952,-0.777090,-4.196985,-4.806537,-7.915151,2.301080,-0.168027,-4.502091,-4.905723,1.095790,-3.027866,9.063529,0.701295,-9.164121,-6.206988,-2.526699,-5.177161,1.672475,1.594741,4.399457,2.588696,0.189737,-4.012953,-2.423381,-2.229022,-1.606037,-9.295141,2.142541,-6.383846,9.452067,-8.116860,-2.422746,-9.390752,9.924394,-0.574317,3.580421,1.636223,9.932027,-8.792327,2.064296,-5.312496,7.308445,6.605174,-1.485893,-3.970588,-7.422186,8.383006,3.042102,9.110510,-6.924412,8.977103,5.248026,-7.352791,-4.598021,-7.781846,2.907685,-8.106758,2.719910,2.636601,6.815520,7.166113,0.471785,0.451349,-5.532629,3.742068,-7.096122,-1.551743,-3.925942,-0.020631,-5.199550,-5.562543,1.883184,-3.914952,-5.796073,-8.456388,-8.089059,3.580475,2.623917,-6.926784,7.903404,-3.247286,6.835237,5.500807,6.974792,-8.988156,-1.941645,4.278631,8.761289,7.587786,9.654850,-7.674655,6.093870,7.533087,-9.028607,8.465111,-2.844190,1.648771,-6.525478,7.112469,-3.106168,0.899008,-1.701599,6.882757,4.278044,9.643968,-6.334097,-9.583349,4.498442,-6.552817,5.266038,-3.046639,3.764668,8.906947,-4.856821,0.291465,2.858849,-3.709282,0.463644,2.157447,-7.079725,-4.026467,-4.052379,-1.829312,-8.113830,8.690807,-3.542064,1.676609,1.415226,-2.493626,8.929522,9.844383,-4.168590,-8.787781,3.959030,-0.180673,-7.358383,-9.887722,9.454826,4.822334,-0.432608,-2.449548,-9.606319,-1.190653,-0.249034,6.929869,3.771695,-0.754033,-4.746766,4.346320,0.830702,9.310831,-5.679960,-1.167966,8.110255,-9.387569,0.438669,-8.779920,-3.335125,6.545753,9.577378,5.587338,9.958428,4.848166,-2.879713,5.329731,-0.820433,-0.257919,3.005848,2.218739,-1.467897,-7.635701,-9.071116,2.948111,9.654057,4.188999,5.363794,5.167548,4.414104,8.361593,-8.885341,5.873295,8.578684,0.965787,-8.404870,6.256597,-8.580297,-4.802200,2.052869,-1.162896,5.273144,6.638122,-3.322765,4.579857,5.112014,8.522046,-4.903524,0.004442,-0.230281,-5.756784,1.157337,0.653756,8.551820,-7.788639,0.919493,6.768520,-9.543168,-9.749857,-4.409715,-3.956907,-4.196041,1.148040,-6.725882,-9.989624,9.145914,-6.894370,1.644978,7.348310,6.522778,9.197432,-7.125587,1.212237,0.899074,7.033000,-2.738244,-0.144905,4.829557,7.900475,-0.581455,1.039730,-3.234003,-4.553218,7.770205,-4.697430,7.430260,-5.355315,-9.458074,-4.453064,1.329979,1.418930,-0.006711,-0.597893,8.268081,7.732343,4.717833,-5.629056,-0.135174,6.453549,-8.795441,2.346816,4.841984,2.995527,0.975787,-1.552475,8.456865,-7.850555,6.326467,0.337551,-3.161229,-4.630334,1.332664,3.484283,1.280556,-8.021790,-6.988242,1.118626,3.356946,-8.477007,-8.615096,1.755706,-0.843355,1.405950,-4.993052,5.169156,-8.573931,-3.363976,-3.673135,3.314163,6.452468,6.460937,8.525579,1.817662,8.400460,-2.205552,-6.090349,0.352601,7.073851,-2.911749,4.443851,9.126167,6.124834,-9.080114,2.889444,2.184902,7.603344,1.778452,5.952071,4.149259,-8.018724,7.750851,7.781016,2.596585,6.143301,-7.374308,3.133355,-6.803975,2.485489,-6.630147,0.944835,0.578727,-6.636851,0.005114,-1.779064,-1.642533,-7.624841,3.430054,-0.079299,9.096753,9.588307,4.557625,4.121689,6.399019,-1.346580,0.197244,-8.671085,-5.896921,4.780100,-2.150684,-4.276591,-9.869364,-6.615893,-4.967498,0.472027,1.674861,3.107541,7.330240,-5.681345,8.717803,6.903020,-7.460845,-6.667814,-2.087158,7.500488,9.898672,-0.165741,-1.152233,6.118406,5.170703,-7.279687,5.376212,6.491836,-6.487144,-0.296325,-3.005496,6.606279,7.641439,5.120335,6.532032,-5.329667,-8.604635,3.252203,-8.546041,9.114398,7.194517,-4.306086,3.734535,4.750533,4.188745,-7.505778,4.829383,8.786966,8.865265,8.496638,0.095173,9.185478,-6.870129,-3.817403,5.368682,-7.389711,-7.864477,-5.127337,9.048723,5.307035,7.107825,-7.343132,6.939990,1.621780,8.765286,-0.624817,-0.702005,-4.222506,-1.350785,2.607064,0.965716,-2.994714,-0.168020,7.292519,-7.533609,1.919687,-0.788397,7.979144,8.167433,-3.170815,4.562738,1.183652,-3.476853,-4.093668,-4.730890,1.891730,9.704130,5.786823,-3.704537,5.802804,-0.950539,-3.196922,0.325195,-6.054010,-5.564479,2.702809,8.959089,7.685938,-5.141006,-4.240127,-2.974691,-4.535824,4.722697,0.136425,4.698203,4.861766,7.818163,-5.592589,7.237764,4.156374,-8.250523,7.080966,6.994261,4.273766,-4.995316,5.289301,4.441472,-7.278151,5.601648,-7.638093,5.745567,-9.879402,0.436217,3.337396,-1.411077,-7.071707,8.066080,-9.312276,4.372354,-9.612714,-6.673084,-6.838965,-7.739213,-6.364387,-9.669383,-6.900800,-0.881727,3.202818,0.728560,-0.907412,7.980213,-3.569737,-4.974303,-9.503915,7.533011,8.572809,-8.778578,9.952874,0.522256,-7.015175,7.245191,0.235981,-5.718013,6.299666,6.967408,6.291323,1.428091,4.432649,-6.631179,9.091119,-7.532131,9.875907,-6.845527,7.601822,9.315226,5.587495,-6.189188,-3.503949,5.728941,0.841712,-6.592056,-7.327888,-0.749008,3.113515,7.149532,-3.365419,-4.102809,-7.463138,5.655419,-3.738734,6.716301,8.725183,-5.500925,-8.474514,3.967728,-7.463302,-1.260382,9.994149,-9.808280,-5.881629,5.568487,0.249561,-9.845438,-6.749268,-3.044981,-8.781269,3.718533,4.932100,-5.021626,5.806394,6.838064,9.556625,-8.684851,6.435159,8.230615,-4.365110,-0.202199,-0.121385,7.363133,-5.388232,8.627604,-5.024471,-7.068582,-6.052676,1.078585,4.351446,6.997696,8.743301,9.075452,-4.532245,-9.660441,-1.296229,7.969059,1.519506,4.373666,-9.308388,8.577556,4.423634,-8.749663,-7.681832,-8.072855,0.268035,-9.883049,8.745135,2.984948,-4.466593,0.583601,-9.510418,-1.283608,1.036593,-3.913300,-3.064279,-4.978714,4.401857,-0.278539,3.464654,3.555310,-7.173988,1.453951,-3.607299,-4.172680,-7.223017,7.928568,-3.516971,-4.876268,0.984450,2.761564,-1.206627,-6.961787,-0.902614,8.450255,6.030223,-9.561944,-8.642156,7.539814,-5.813145,-0.073432,1.977414,-7.020327,3.925370,-3.079390,6.163439,-0.837605,7.082623,3.643473,0.322596,5.148735,-0.405049,8.240236,3.958105,3.910714,-5.838968,-1.915746,0.824807,7.249437,-6.559632,6.729367,7.667204,8.874112,-2.871098,-0.947992,-2.880902,-1.323199,-3.983063,1.786729,3.441129,0.804772,-1.355924,9.774253,-3.063811,-8.380272,-5.832057,-0.755187,-2.194186,3.045255,3.785214,-9.347552,6.200852,-7.015050,-4.606034,-6.709316,-0.112712,8.135571,7.011035,-8.655412,4.916678,-4.105682,-7.943172,6.269573,4.085541,-0.876765,6.995160,-9.847076,8.963635,-5.237338,-0.062992,4.205820,-6.527933,-5.753943,-9.402842,-1.135334,3.681250,3.430638,4.616299,-0.706383,0.947721,8.067388,-1.917207,-8.683377,-0.493756,7.041864,9.288999,2.347693,-6.679319,8.644472,-0.357815,-9.753685,9.195343,-8.540611,0.583860,2.653404,7.058798,8.370075,-2.520037,5.032543,-9.122776,6.788369,-4.699538,9.313022,-0.838956,5.879017,-4.066632,6.603028,4.751727,8.449086,-9.764725], dtype = "float32")#candidate|1536|(840,)|const|float32
var_1537 = relay.var("var_1537", dtype = "float32", shape = (390,))#candidate|1537|(390,)|var|float32
const_1538 = relay.const([-7,7,7,-5,-1,10,-6,-2,3,-7,4,-1,10,4,-2,-9,7,10,-1,-7,-1,-2,-10,-6,-6,9,-1,-3,-8,8,-7,-8,-2,-8,-7,-5,2,5,-4,4,6,-3,6,5,-2,4,9,-4], dtype = "int16")#candidate|1538|(48,)|const|int16
call_1535 = relay.TupleGetItem(func_795_call(relay.reshape(const_1536.astype('float32'), [840,]), relay.reshape(var_1537.astype('float32'), [390,]), relay.reshape(const_1538.astype('int16'), [48,]), relay.reshape(var_1537.astype('float32'), [390,]), ), 5)
call_1539 = relay.TupleGetItem(func_800_call(relay.reshape(const_1536.astype('float32'), [840,]), relay.reshape(var_1537.astype('float32'), [390,]), relay.reshape(const_1538.astype('int16'), [48,]), relay.reshape(var_1537.astype('float32'), [390,]), ), 5)
bop_1547 = relay.greater(uop_1519.astype('bool'), relay.reshape(var_1506.astype('bool'), relay.shape_of(uop_1519))) # shape=(6, 2, 8)
func_949_call = mod.get_global_var('func_949')
func_952_call = mutated_mod.get_global_var('func_952')
const_1554 = relay.const(5, dtype = "uint8")#candidate|1554|()|const|uint8
var_1555 = relay.var("var_1555", dtype = "uint8", shape = (2475,))#candidate|1555|(2475,)|var|uint8
call_1553 = func_949_call(relay.reshape(const_1554.astype('uint8'), []), relay.reshape(var_1555.astype('uint8'), [11, 15, 15]), )
call_1556 = func_949_call(relay.reshape(const_1554.astype('uint8'), []), relay.reshape(var_1555.astype('uint8'), [11, 15, 15]), )
uop_1562 = relay.log(uop_1519.astype('float32')) # shape=(6, 2, 8)
output = relay.Tuple([bop_1508,call_1535,const_1536,var_1537,const_1538,bop_1547,call_1553,const_1554,var_1555,uop_1562,])
output2 = relay.Tuple([bop_1508,call_1539,const_1536,var_1537,const_1538,bop_1547,call_1556,const_1554,var_1555,uop_1562,])
func_1573 = relay.Function([var_1506,var_1507,var_1537,var_1555,], output)
mod['func_1573'] = func_1573
mod = relay.transform.InferType()(mod)
mutated_mod['func_1573'] = func_1573
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1573_call = mutated_mod.get_global_var('func_1573')
var_1575 = relay.var("var_1575", dtype = "int64", shape = (6, 2, 8))#candidate|1575|(6, 2, 8)|var|int64
var_1576 = relay.var("var_1576", dtype = "int64", shape = (6, 2, 8))#candidate|1576|(6, 2, 8)|var|int64
var_1577 = relay.var("var_1577", dtype = "float32", shape = (390,))#candidate|1577|(390,)|var|float32
var_1578 = relay.var("var_1578", dtype = "uint8", shape = (2475,))#candidate|1578|(2475,)|var|uint8
call_1574 = func_1573_call(var_1575,var_1576,var_1577,var_1578,)
output = call_1574
func_1579 = relay.Function([var_1575,var_1576,var_1577,var_1578,], output)
mutated_mod['func_1579'] = func_1579
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1755 = relay.var("var_1755", dtype = "uint8", shape = (2, 3, 14))#candidate|1755|(2, 3, 14)|var|uint8
var_1756 = relay.var("var_1756", dtype = "uint8", shape = (2, 3, 14))#candidate|1756|(2, 3, 14)|var|uint8
bop_1757 = relay.bitwise_and(var_1755.astype('uint8'), relay.reshape(var_1756.astype('uint8'), relay.shape_of(var_1755))) # shape=(2, 3, 14)
bop_1765 = relay.power(var_1756.astype('float64'), relay.reshape(bop_1757.astype('float64'), relay.shape_of(var_1756))) # shape=(2, 3, 14)
func_627_call = mod.get_global_var('func_627')
func_628_call = mutated_mod.get_global_var('func_628')
call_1783 = func_627_call()
call_1784 = func_627_call()
uop_1795 = relay.acos(call_1783.astype('float64')) # shape=(1, 15, 8)
uop_1797 = relay.acos(call_1784.astype('float64')) # shape=(1, 15, 8)
output = relay.Tuple([bop_1765,uop_1795,])
output2 = relay.Tuple([bop_1765,uop_1797,])
func_1803 = relay.Function([var_1755,var_1756,], output)
mod['func_1803'] = func_1803
mod = relay.transform.InferType()(mod)
mutated_mod['func_1803'] = func_1803
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1803_call = mutated_mod.get_global_var('func_1803')
var_1805 = relay.var("var_1805", dtype = "uint8", shape = (2, 3, 14))#candidate|1805|(2, 3, 14)|var|uint8
var_1806 = relay.var("var_1806", dtype = "uint8", shape = (2, 3, 14))#candidate|1806|(2, 3, 14)|var|uint8
call_1804 = func_1803_call(var_1805,var_1806,)
output = call_1804
func_1807 = relay.Function([var_1805,var_1806,], output)
mutated_mod['func_1807'] = func_1807
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1839 = relay.var("var_1839", dtype = "int64", shape = (13, 11))#candidate|1839|(13, 11)|var|int64
var_1840 = relay.var("var_1840", dtype = "int64", shape = (13, 11))#candidate|1840|(13, 11)|var|int64
bop_1841 = relay.less(var_1839.astype('bool'), relay.reshape(var_1840.astype('bool'), relay.shape_of(var_1839))) # shape=(13, 11)
func_338_call = mod.get_global_var('func_338')
func_344_call = mutated_mod.get_global_var('func_344')
var_1864 = relay.var("var_1864", dtype = "bool", shape = (3360,))#candidate|1864|(3360,)|var|bool
const_1865 = relay.const([[3,9,-2,2],[10,-3,8,6],[7,-4,4,3],[-8,-10,6,5],[9,3,6,-9],[7,-7,-2,-9],[-5,-7,-4,8],[7,6,-3,3],[7,-5,-5,-1],[8,9,3,9],[10,4,6,7],[-9,9,4,-7]], dtype = "int16")#candidate|1865|(12, 4)|const|int16
const_1866 = relay.const([6.381278,-1.358456,7.962371,-2.394825,5.164403,-3.883026,-5.441208,4.564591,6.444954,-9.585779,-7.951662,9.913655,-9.316433,8.212292,4.799715,6.966826,-4.961874,5.951435,1.457706,-4.637546,9.030976,0.875743,-6.248795,4.773492,2.899425,8.591684,0.034176,-9.482414,-1.841817,9.277541,8.782258,-7.367806,-7.718505,3.586517,7.508053,-0.874233,-8.027528,3.014447,1.662374,-4.364627,-0.978571,-0.913632,-9.558673,-4.992444,-2.702014,5.617750,-8.336252,0.576398,8.914772,1.890916,2.239758,4.870803,9.911849,-3.219951,4.983877,-2.543655,-4.334162,8.946565,7.503352,3.929272,5.753245,3.686086,-8.348590,6.160546,7.385628,0.132217,-3.516150,-1.964589,6.252780,-4.018209,-1.536974,-3.877620,6.958333,7.196777,0.738846,7.394456,3.918760,1.671626,1.712060,9.712410,3.724749,8.189958,5.695713,4.730860,-7.642816,2.341522,-8.115101,4.458971,8.914650,-0.572236,4.282491,-6.344625,-8.973628,1.410736,-4.997171,-8.682414,6.158080,9.024864,-7.795051,6.428602,2.783778,3.922962,-2.559357,4.848967,6.783739,8.992702,7.078227,-8.295611,8.462364,-1.416026,-6.990188,4.606757,-2.039194,0.764514,8.639296,-2.021477,1.949013,6.921215,-7.800250,-6.743302,-1.374894,6.942485,6.568145,-9.996541,6.469285,-6.623705,6.190000,4.058152,-5.462682,-7.081793,1.559011,-5.168757,-6.069615,-0.832922,0.255387,2.967760,-1.945730,1.567360,-9.948657,-7.444069,-6.858932,2.984409,-7.796567,-5.902068,4.072575,4.488361,0.661469,-6.976970,0.364888,-2.429376,1.433174,-6.695688,-5.716808,7.914490,6.481983,-8.628272,-5.147179,-3.949322,-9.206967,2.974093,2.763727,-1.657027,9.615340,8.139310,-2.848616,1.725675,2.866233,4.779380,5.139473,-2.130932,5.367904,2.225196,-4.717151,-5.562062,-9.160509,0.361789,-9.926800,-7.943432,-5.421923,-3.323869,2.933386,-2.147827,-6.927667,9.208378,-2.510375,-0.619954,-3.117890,1.643183,9.465609,-2.736666,0.372970,-6.510538,8.627309,0.425334,-7.098889,-4.850069,7.020185,-5.095502,2.044518,-2.487528,6.766759,0.219764,-6.990929,-0.722112,-2.789864,8.267547,-6.055235,-9.491459,-2.313901,7.295246,1.120535,-0.554475,-4.202154,-8.712429,-9.993395,9.766897,-9.103874,-9.666367,4.002855,-5.447752,7.923427,-8.086386,6.995299,8.006491,-2.023682,-2.196327,1.400704,1.559457,7.157780,4.631244,-9.037850,6.839056,0.968279,2.012126,9.963014,-5.036715,0.962794,-6.722410,6.128229,-1.657964,5.823323,-3.242949,5.692548,-3.255069,3.961466,9.050070,2.889436,-2.816237,-4.713166,4.546584,-9.507354,-2.499061,-4.627276,-3.314463,-0.114161,-5.162933,-3.493236,-0.683849,-9.667134,-6.372745,-9.846642,4.517715,7.046749,-0.472443,0.276269,2.931068,-3.111351,1.906180,-1.974943,-3.196027,-5.707860,-2.381987,3.180211,-1.636429,-7.051297,-1.765519,-7.254344,-9.041658,8.132099,5.935856,-4.508969,-5.588744,-2.587752,-6.063814,-3.056428,-3.713797,4.981052,7.024069,8.306731,-9.602158,-4.395492,7.085586,-4.640158,-2.331367,-5.348238,-4.317837,-9.776072,3.306961,-6.147512,-2.398573,3.316441,0.685976,4.475625,4.379773,-7.389237,-0.468835,-5.674707,-0.586853,7.825578,7.317718,-4.832692,1.619680,-0.420210,-3.488327,-9.136419,9.071614,8.346800,-5.293032,0.596911,1.005729,5.712794,0.768468,7.164552,-0.280127,-8.143459,7.586311,4.145290,-4.628121,3.828450,-2.301826,4.929765,7.368048,-6.013527,9.059535,-7.816619,8.619980,2.611803,3.150111,-1.073813,9.918988,1.261702,-0.328092,9.315636,4.982226,9.132601,-5.346278,1.466744,7.771947,4.012577,-1.839577,8.924950,1.175635,-7.982542,-4.924129,-6.241550,6.838356,-3.302730,-2.457277,-5.236359,-2.269034,4.663732,-8.804538,8.722985,-7.719757,2.090247,-6.011854,3.048144,7.891000,-0.573359,-7.520417,5.999959,5.720138,5.734536,-4.078174,2.136971,0.002142,8.828734,8.534223,8.950002,-1.885671,-5.320582,-7.464624,-3.321649,7.694462,5.026446,-8.298943,-6.499882,-9.021538,0.059768,4.304179], dtype = "float32")#candidate|1866|(390,)|const|float32
call_1863 = relay.TupleGetItem(func_338_call(relay.reshape(var_1864.astype('bool'), [14, 16, 15]), relay.reshape(var_1864.astype('bool'), [14, 16, 15]), relay.reshape(const_1865.astype('int16'), [48,]), relay.reshape(const_1866.astype('float32'), [390,]), ), 3)
call_1867 = relay.TupleGetItem(func_344_call(relay.reshape(var_1864.astype('bool'), [14, 16, 15]), relay.reshape(var_1864.astype('bool'), [14, 16, 15]), relay.reshape(const_1865.astype('int16'), [48,]), relay.reshape(const_1866.astype('float32'), [390,]), ), 3)
output = relay.Tuple([bop_1841,call_1863,var_1864,const_1865,const_1866,])
output2 = relay.Tuple([bop_1841,call_1867,var_1864,const_1865,const_1866,])
func_1883 = relay.Function([var_1839,var_1840,var_1864,], output)
mod['func_1883'] = func_1883
mod = relay.transform.InferType()(mod)
var_1884 = relay.var("var_1884", dtype = "int64", shape = (13, 11))#candidate|1884|(13, 11)|var|int64
var_1885 = relay.var("var_1885", dtype = "int64", shape = (13, 11))#candidate|1885|(13, 11)|var|int64
var_1886 = relay.var("var_1886", dtype = "bool", shape = (3360,))#candidate|1886|(3360,)|var|bool
output = func_1883(var_1884,var_1885,var_1886,)
func_1887 = relay.Function([var_1884,var_1885,var_1886,], output)
mutated_mod['func_1887'] = func_1887
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1915 = relay.var("var_1915", dtype = "uint16", shape = ())#candidate|1915|()|var|uint16
var_1916 = relay.var("var_1916", dtype = "uint16", shape = (16, 3, 14))#candidate|1916|(16, 3, 14)|var|uint16
bop_1917 = relay.equal(var_1915.astype('bool'), var_1916.astype('bool')) # shape=(16, 3, 14)
output = relay.Tuple([bop_1917,])
output2 = relay.Tuple([bop_1917,])
func_1922 = relay.Function([var_1915,var_1916,], output)
mod['func_1922'] = func_1922
mod = relay.transform.InferType()(mod)
var_1923 = relay.var("var_1923", dtype = "uint16", shape = ())#candidate|1923|()|var|uint16
var_1924 = relay.var("var_1924", dtype = "uint16", shape = (16, 3, 14))#candidate|1924|(16, 3, 14)|var|uint16
output = func_1922(var_1923,var_1924,)
func_1925 = relay.Function([var_1923,var_1924,], output)
mutated_mod['func_1925'] = func_1925
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1945 = relay.var("var_1945", dtype = "float32", shape = (2, 6, 13))#candidate|1945|(2, 6, 13)|var|float32
uop_1946 = relay.atanh(var_1945.astype('float32')) # shape=(2, 6, 13)
output = uop_1946
output2 = uop_1946
func_1948 = relay.Function([var_1945,], output)
mod['func_1948'] = func_1948
mod = relay.transform.InferType()(mod)
mutated_mod['func_1948'] = func_1948
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1949 = relay.var("var_1949", dtype = "float32", shape = (2, 6, 13))#candidate|1949|(2, 6, 13)|var|float32
func_1948_call = mutated_mod.get_global_var('func_1948')
call_1950 = func_1948_call(var_1949)
output = call_1950
func_1951 = relay.Function([var_1949], output)
mutated_mod['func_1951'] = func_1951
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1160_call = mod.get_global_var('func_1160')
func_1161_call = mutated_mod.get_global_var('func_1161')
call_1970 = relay.TupleGetItem(func_1160_call(), 3)
call_1971 = relay.TupleGetItem(func_1161_call(), 3)
output = relay.Tuple([call_1970,])
output2 = relay.Tuple([call_1971,])
func_1982 = relay.Function([], output)
mod['func_1982'] = func_1982
mod = relay.transform.InferType()(mod)
output = func_1982()
func_1983 = relay.Function([], output)
mutated_mod['func_1983'] = func_1983
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1982_call = mod.get_global_var('func_1982')
func_1983_call = mutated_mod.get_global_var('func_1983')
call_1987 = relay.TupleGetItem(func_1982_call(), 0)
call_1988 = relay.TupleGetItem(func_1983_call(), 0)
var_1992 = relay.var("var_1992", dtype = "float64", shape = (12, 15, 8))#candidate|1992|(12, 15, 8)|var|float64
bop_1993 = relay.equal(call_1987.astype('bool'), var_1992.astype('bool')) # shape=(12, 15, 8)
bop_1996 = relay.equal(call_1988.astype('bool'), var_1992.astype('bool')) # shape=(12, 15, 8)
bop_1998 = relay.greater(bop_1993.astype('bool'), call_1987.astype('bool')) # shape=(12, 15, 8)
bop_2001 = relay.greater(bop_1996.astype('bool'), call_1988.astype('bool')) # shape=(12, 15, 8)
bop_2012 = relay.bitwise_or(var_1992.astype('int64'), call_1987.astype('int64')) # shape=(12, 15, 8)
bop_2015 = relay.bitwise_or(var_1992.astype('int64'), call_1988.astype('int64')) # shape=(12, 15, 8)
uop_2017 = relay.cos(var_1992.astype('float64')) # shape=(12, 15, 8)
output = relay.Tuple([bop_1998,bop_2012,uop_2017,])
output2 = relay.Tuple([bop_2001,bop_2015,uop_2017,])
func_2044 = relay.Function([var_1992,], output)
mod['func_2044'] = func_2044
mod = relay.transform.InferType()(mod)
var_2045 = relay.var("var_2045", dtype = "float64", shape = (12, 15, 8))#candidate|2045|(12, 15, 8)|var|float64
output = func_2044(var_2045)
func_2046 = relay.Function([var_2045], output)
mutated_mod['func_2046'] = func_2046
mutated_mod = relay.transform.InferType()(mutated_mod)
func_627_call = mod.get_global_var('func_627')
func_628_call = mutated_mod.get_global_var('func_628')
call_2071 = func_627_call()
call_2072 = func_627_call()
output = call_2071
output2 = call_2072
func_2077 = relay.Function([], output)
mod['func_2077'] = func_2077
mod = relay.transform.InferType()(mod)
mutated_mod['func_2077'] = func_2077
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2077_call = mutated_mod.get_global_var('func_2077')
call_2078 = func_2077_call()
output = call_2078
func_2079 = relay.Function([], output)
mutated_mod['func_2079'] = func_2079
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2077_call = mod.get_global_var('func_2077')
func_2079_call = mutated_mod.get_global_var('func_2079')
call_2080 = func_2077_call()
call_2081 = func_2077_call()
func_1922_call = mod.get_global_var('func_1922')
func_1925_call = mutated_mod.get_global_var('func_1925')
const_2086 = relay.const(-1, dtype = "uint16")#candidate|2086|()|const|uint16
const_2087 = relay.const([-10,-1,2,-2,-10,-9,2,1,1,9,-8,-8,8,-8,-8,5,10,2,-5,-6,-7,-8,-5,7,8,-9,6,-5,-3,-3,9,-3,-7,8,9,7,-7,5,5,-1,7,-9,9,9,-10,7,2,6,-4,1,10,-9,2,-10,-3,10,-5,5,3,-8,-8,-2,-4,10,-3,-1,-7,-10,4,8,5,9,4,-1,-10,2,3,-8,2,-7,7,8,8,-4,9,2,-7,1,-7,-2,3,-6,-8,5,2,-5,-10,2,-8,-10,10,1,3,1,-6,8,9,-6,-6,-6,-3,-7,1,-10,-10,8,-2,-7,10,-6,5,4,6,10,2,-2,5,7,1,-7,-6,10,3,-5,-9,7,-3,-5,-4,-4,-9,1,-8,-1,4,9,-4,-9,8,10,-5,9,-2,10,9,2,10,5,-2,6,-6,-7,6,9,-2,-3,-8,6,7,5,7,8,-3,-7,9,2,-10,8,-8,4,-6,6,7,5,7,-4,9,4,-2,6,4,-9,-8,-2,3,-6,-1,6,-6,6,1,8,1,-10,10,-6,-6,9,-3,-2,-7,9,1,-9,-4,-10,4,-5,-7,10,2,2,-3,2,3,2,2,-9,-7,-2,3,6,-10,-2,7,-6,8,-7,-2,6,-4,-7,-2,-3,-5,9,-9,-7,9,7,3,-5,3,3,2,9,10,6,2,-10,-4,-9,8,-3,-5,-3,4,-9,-1,-10,-2,10,-7,-3,-6,10,-5,-5,4,10,-8,10,-10,-9,-1,-5,-2,-6,-3,-1,-5,-1,1,3,-7,7,-7,-7,5,-7,9,-1,9,9,6,1,3,2,-1,9,10,-3,-10,4,-10,-2,-5,7,10,-3,10,-10,9,6,8,8,-1,5,-3,9,-9,2,5,7,-9,-4,8,9,9,-7,-1,5,8,-3,8,-6,-2,5,10,-3,-4,-6,-4,-10,-10,-9,4,3,5,-4,-8,4,-9,-7,8,-7,-10,5,-8,4,3,-1,7,-8,-1,-7,-3,1,7,10,-10,10,-10,2,3,5,9,-1,-9,-1,1,9,1,3,-8,5,-2,9,-3,9,9,2,-10,-8,-1,-9,-9,4,10,7,-4,7,-9,-7,7,8,10,6,2,10,3,6,10,1,1,10,-10,1,-3,-2,4,8,10,3,8,-7,-5,-4,-7,6,10,-3,-3,2,5,-6,-5,-3,10,9,1,8,1,10,-6,-7,-4,-9,-7,1,-4,-8,-3,6,-9,1,2,-4,3,2,2,-8,-10,-3,7,-8,3,1,-9,9,-1,5,-4,-8,-5,-8,10,5,-2,-8,2,-1,-1,1,9,-7,-4,6,1,5,-4,5,1,-7,-8,-2,-8,5,5,-1,-8,5,-3,10,-4,-2,-9,6,8,-3,-6,-7,7,-6,-10,9,7,7,-6,4,1,-2,-4,10,-2,10,-7,-4,1,-9,1,8,-3,-10,2,-2,-1,-5,3,-8,-8,4,-7,2,-10,-10,8,-1,-3,-1,-4,-9,-7,1,-2,4,-7,-7,-9,-4,-9,-10,-2,-9,1,-9,-3,9,7,-10,8,10,4,-4,6,2,2,-2,4,-7,-1,9,9,4,9,-2,9,4,9,6,6,1,-1,-2,2,9,10,-7,-7,2,6,5,-7,-3,-7,-4,-9,2,-5,3,8,3,2,-6,3,-7,3,8,-2,-8,10,-3,6,6,-4,1,3,-9,-3,5,4,-7,-5,6,-4,6,4,-10,7,-2,-7,2,-6,-4,-7,-7,5,7,-6,7,5,3,-3,10,9,10,6,7,-4,-2,-1,1], dtype = "uint16")#candidate|2087|(672,)|const|uint16
call_2085 = relay.TupleGetItem(func_1922_call(relay.reshape(const_2086.astype('uint16'), []), relay.reshape(const_2087.astype('uint16'), [16, 3, 14]), ), 0)
call_2088 = relay.TupleGetItem(func_1925_call(relay.reshape(const_2086.astype('uint16'), []), relay.reshape(const_2087.astype('uint16'), [16, 3, 14]), ), 0)
bop_2089 = relay.divide(const_2086.astype('float64'), call_2080.astype('float64')) # shape=(1, 15, 8)
bop_2092 = relay.divide(const_2086.astype('float64'), call_2081.astype('float64')) # shape=(1, 15, 8)
func_711_call = mod.get_global_var('func_711')
func_713_call = mutated_mod.get_global_var('func_713')
var_2098 = relay.var("var_2098", dtype = "float32", shape = (858,))#candidate|2098|(858,)|var|float32
call_2097 = relay.TupleGetItem(func_711_call(relay.reshape(var_2098.astype('float32'), [13, 11, 6])), 0)
call_2099 = relay.TupleGetItem(func_713_call(relay.reshape(var_2098.astype('float32'), [13, 11, 6])), 0)
output = relay.Tuple([call_2085,const_2087,bop_2089,call_2097,var_2098,])
output2 = relay.Tuple([call_2088,const_2087,bop_2092,call_2099,var_2098,])
func_2102 = relay.Function([var_2098,], output)
mod['func_2102'] = func_2102
mod = relay.transform.InferType()(mod)
var_2103 = relay.var("var_2103", dtype = "float32", shape = (858,))#candidate|2103|(858,)|var|float32
output = func_2102(var_2103)
func_2104 = relay.Function([var_2103], output)
mutated_mod['func_2104'] = func_2104
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1398_call = mod.get_global_var('func_1398')
func_1400_call = mutated_mod.get_global_var('func_1400')
call_2124 = relay.TupleGetItem(func_1398_call(), 1)
call_2125 = relay.TupleGetItem(func_1400_call(), 1)
uop_2126 = relay.asin(call_2124.astype('float64')) # shape=(1, 15, 8)
uop_2128 = relay.asin(call_2125.astype('float64')) # shape=(1, 15, 8)
func_203_call = mod.get_global_var('func_203')
func_207_call = mutated_mod.get_global_var('func_207')
const_2132 = relay.const([[3.179060,7.313531,-9.382971,-0.030965,8.649561,-8.061126],[-2.175283,-5.778240,-0.945045,2.279977,-3.551300,-2.530790],[1.889560,9.584556,2.085280,4.328120,0.844871,7.795728],[-4.010156,-5.539494,3.802273,-3.531693,8.507003,-8.177309],[-0.834707,3.931544,8.143395,-7.706371,-9.627691,5.247976],[1.171060,-2.402198,7.271102,-3.212574,9.667754,-7.999993],[7.446431,-5.402508,5.254910,9.084065,6.375964,-2.160890],[-0.455586,6.224306,-5.049969,-8.160678,0.955268,2.797109],[-6.535254,-2.500157,-1.306292,9.506386,-9.651943,-4.262264],[-2.437888,4.121286,-7.169835,-3.804803,-4.934625,2.864026],[-9.863357,1.937929,-6.964005,1.055969,-6.771468,2.172709],[-2.175827,8.612191,-1.143434,-4.803228,8.789193,-1.608285],[7.642643,-5.237760,0.891347,-6.562327,-9.578657,1.577926],[-9.793022,0.502173,3.585958,2.747977,3.187170,-0.916602],[-0.540740,-4.226740,-9.267090,-4.148068,-0.831614,8.575952],[-3.747358,2.940267,2.049512,-3.822149,2.186975,0.026832],[-6.022150,-7.095474,0.955283,7.168462,8.131206,9.203817],[2.290068,9.338005,-4.581068,1.815508,3.260955,7.875197],[5.633809,-9.814372,-4.148877,1.227197,0.934627,-7.133213],[-4.407430,-2.706210,-4.848665,5.651157,9.479792,8.878837],[-3.771828,1.340520,6.617983,-4.944182,-3.917251,-9.464070],[-4.796356,2.772204,6.186776,-8.198745,5.919367,-0.290741],[-2.154417,0.807670,-4.368590,-4.780199,5.940496,-4.976616],[-8.541793,-4.245799,-3.727892,6.719770,-1.174191,-0.412866],[8.280307,-7.995566,2.366854,-3.513636,-8.607420,-4.998221],[-2.713711,4.515881,-4.018133,-3.718525,3.257608,6.353802],[7.665789,-4.176819,6.985133,-2.107994,-3.165319,1.015768],[5.787831,6.819339,-2.247372,-1.237524,-3.352854,-0.905828],[-6.399728,-0.791902,2.681292,5.294874,-6.946050,8.426374],[-3.653805,-8.774428,-9.581043,-4.647844,2.925352,1.986098],[2.546837,-6.497573,-2.586987,-7.184579,-6.294583,-8.199836],[-5.918968,-9.189647,4.233857,-6.838691,0.011093,-5.712720],[8.728561,2.692268,0.882008,-1.214569,4.961931,-1.157831],[6.498837,-9.835710,4.879692,-2.613868,-2.648828,9.188754],[-7.591587,5.185942,-0.996387,3.681340,-0.498267,9.446825],[2.669835,2.676398,-5.997691,-1.030791,-9.409188,9.812354],[6.583611,-6.904701,0.340319,-5.173743,3.487193,4.806065],[2.799105,1.364375,-6.575436,5.606508,-9.316199,-4.842660],[2.893795,3.825665,6.065458,5.067190,-3.113934,-9.052403],[3.960478,6.535067,-4.708619,8.938145,6.911359,8.621989],[5.719303,2.448397,2.570030,-2.887531,2.250826,2.650478],[1.565816,8.488830,-9.722872,5.358053,-3.970480,-7.542706],[2.333105,3.371701,0.965313,-4.295213,4.184697,-6.493365],[5.006706,7.355307,-5.438584,3.626663,-6.407624,5.875916],[-1.792307,-9.647910,0.433199,9.447089,-6.999626,3.364319],[-9.053797,-6.181730,-0.274277,-7.969762,-1.488961,-2.471024],[-0.009681,-7.725126,-6.006040,7.149833,-3.561849,-8.031719],[3.252943,-9.731762,-9.348911,2.189188,-2.184885,-7.406080],[-6.637719,-6.428479,7.756060,-3.381641,7.676314,-3.185799],[-7.131138,-1.289497,1.301342,0.785057,7.660195,8.640128],[2.905270,-6.848706,-1.871879,-9.339162,6.567884,8.168330],[0.596189,6.474358,-9.004500,5.646319,9.993042,3.948569],[-7.579953,6.386365,6.574286,7.780240,7.449074,-7.487341],[-3.307483,3.754931,2.879055,-8.933244,-0.776211,0.648303],[7.103607,6.453575,5.294404,-2.327816,0.859286,0.521358],[-8.657917,-4.047059,-4.836730,9.127393,6.715910,-7.681740],[-4.141917,-9.687672,-6.828705,2.387975,-6.256413,9.053902],[-2.843243,2.943686,3.760794,-7.189263,9.921642,-0.707056],[0.376496,-0.708022,-0.433821,1.565767,-0.302794,2.342307],[-7.958933,-2.819315,7.482996,-3.085284,9.589344,-0.538218],[-2.593886,-1.238585,7.454917,3.558404,4.712528,1.091970],[-1.498876,-7.066943,-0.391778,-8.711756,-0.423543,3.026382],[-1.946077,7.422275,5.036277,-3.934337,-8.900173,3.353119],[2.764496,-3.105122,3.547567,-5.879615,4.757103,-8.558039],[-0.921880,-1.290211,5.708469,2.031730,4.337258,-8.456146]], dtype = "float32")#candidate|2132|(65, 6)|const|float32
var_2133 = relay.var("var_2133", dtype = "int16", shape = (48,))#candidate|2133|(48,)|var|int16
call_2131 = relay.TupleGetItem(func_203_call(relay.reshape(const_2132.astype('float32'), [3, 13, 10]), relay.reshape(var_2133.astype('int16'), [48,]), ), 4)
call_2134 = relay.TupleGetItem(func_207_call(relay.reshape(const_2132.astype('float32'), [3, 13, 10]), relay.reshape(var_2133.astype('int16'), [48,]), ), 4)
const_2146 = relay.const([[[5.012614,5.281648,4.782550,-3.360910,7.238417,-3.242897,-8.952305,-1.973323],[8.467071,-4.611975,7.215106,-9.450933,-0.383689,2.161844,5.875543,-5.685759],[2.687646,2.148165,8.904161,2.981395,4.818005,0.563927,1.284138,-3.489583],[2.689940,-1.676408,-1.594547,-2.387413,-7.099712,2.637947,-2.264189,-7.856788],[3.548741,-4.676181,3.748433,3.264590,-5.152934,-0.352975,-8.717603,-0.192088],[-6.779859,-5.647323,4.528849,9.658975,0.001839,-1.957137,-3.043476,2.558555],[-5.434498,-1.677614,5.879569,-3.525503,4.497679,-1.232251,-8.679058,1.465033],[7.746781,3.408543,-0.910400,-4.060485,2.726626,-7.792939,2.121444,3.646718],[5.168570,-2.934724,1.268262,-0.584976,0.165009,-3.425856,4.142654,-8.599679],[-6.707185,-8.587561,-0.875043,-2.209061,8.955211,8.309639,-1.026567,-2.025470],[9.014350,-5.759600,-9.617895,2.645653,6.528962,5.653614,3.506648,-6.904954],[0.938340,9.447764,9.341565,-7.992834,-3.991115,-8.415698,-0.860312,-5.713601],[3.751695,0.952314,-0.823772,1.243657,-7.422914,-8.968682,6.569069,5.446464],[8.745068,-3.941249,-7.025301,5.685449,1.828641,0.931029,1.493649,2.158442],[6.261917,-0.407705,0.755895,5.462051,-4.401979,7.143706,-4.923744,-0.131048]],[[3.762748,8.683432,1.367554,-0.834606,-7.796247,1.856572,-6.290165,-8.817650],[3.009009,7.841896,-3.647835,-9.186692,-6.517735,-7.684734,2.561653,3.654227],[-2.204205,-1.736673,9.201822,-6.256051,8.596092,8.477719,-7.321231,3.526099],[-8.651784,-9.493735,7.443639,9.430393,-2.090266,0.829408,2.737757,1.227809],[9.270399,5.257065,-6.970204,-4.935434,3.159447,0.886440,5.867280,7.499653],[2.407672,-9.890093,0.367436,1.301574,-8.258705,7.560082,0.640791,3.343525],[-0.652141,6.887342,-2.402581,-7.865424,-0.435492,5.848173,-7.254044,6.787529],[-0.781242,8.915754,-6.581525,3.404361,0.234984,-3.003547,3.936278,9.614267],[-4.253675,0.598865,-9.521328,0.402240,6.465505,-3.138172,3.911194,-6.048402],[1.998163,8.557810,-6.867462,-6.589498,8.815891,-1.926814,-6.902144,1.608362],[-6.202903,0.580031,-8.325917,3.975080,7.253268,-0.411616,-1.500640,-2.669837],[-4.077882,6.230686,2.304071,-0.963507,-9.766273,3.117205,-0.832769,7.236317],[1.473964,5.557418,5.192457,-4.790874,-6.523449,-7.123322,2.241235,-9.406863],[-0.981374,-5.008982,-2.071055,8.082844,2.783928,2.628495,0.673877,-9.355954],[-7.384355,-8.590268,3.518757,-6.882534,8.394558,-1.327582,-1.845742,-0.779781]],[[-9.188539,-1.933928,3.465030,3.642654,-3.614201,-0.958076,0.225948,4.732200],[-9.206268,-8.917077,-0.147062,5.859240,8.432258,-3.539327,1.928294,-9.651995],[8.011781,-3.727351,-6.794060,2.502097,-8.510327,-4.360859,-8.131032,0.622858],[-5.101121,-1.646021,9.064461,-9.878026,0.132619,-5.592504,-3.146900,-9.087054],[7.352794,-2.576677,-4.438178,-1.530406,-3.205158,7.031378,-7.360015,1.755760],[-1.144735,0.007338,-9.424130,-3.392542,-8.073398,-4.302552,1.400337,-8.102144],[7.871492,7.523486,-3.991864,-2.427012,-2.422347,-8.381888,5.744352,0.800915],[2.015009,8.970911,4.893501,-3.878613,-9.792259,-6.921989,9.155928,-3.801855],[9.415735,7.731841,2.602000,-8.039169,8.362151,1.257657,3.309436,-7.955688],[1.863696,-5.817053,2.398834,1.734918,2.171459,2.340158,-6.176381,8.913440],[1.181274,-9.544500,-5.333938,1.776240,8.867090,-3.299160,0.461039,0.598454],[-8.326063,6.655023,-5.469480,4.332524,-7.355687,4.941113,-7.311079,7.246961],[9.607057,9.778147,-4.848591,6.401337,8.490224,-6.998951,-9.770013,9.666394],[3.317548,-3.813206,4.613411,5.776873,-7.534519,4.523359,1.288789,7.199698],[-5.647292,9.539886,1.337342,-6.019017,-7.275916,6.990928,-2.308572,-2.719440]],[[-5.635037,-0.225520,-2.432786,8.546334,-9.266644,-6.812156,0.143756,-9.250545],[-4.452496,2.030086,-8.581340,-4.667565,-2.836232,3.753401,-1.069019,6.220377],[-8.360276,5.899894,7.208908,8.390161,5.045853,-1.398113,5.683358,-8.876100],[-7.770748,2.352622,8.821284,6.224769,-4.717398,-4.967153,-0.804725,7.126317],[6.957040,-7.720523,8.433618,-1.648505,4.881640,-6.944753,9.596940,-0.062785],[-0.913722,-3.224128,4.592733,3.565250,-9.361853,-8.112922,0.479388,3.880065],[-1.818580,-6.328217,-2.882913,-4.872125,8.135677,-6.569993,2.886748,-0.614689],[6.380677,0.318407,-1.278050,-0.221453,0.148835,-8.819303,-3.199517,8.007813],[8.229482,-7.878444,1.251591,4.056911,0.268790,7.047385,-9.797436,-2.937492],[2.338983,-9.583426,6.153662,-1.775720,3.604388,4.167228,6.205249,7.397438],[-8.563350,-6.124132,-6.877513,-5.347052,4.127471,1.377996,0.699541,3.756027],[4.464107,2.351110,-5.098689,1.946077,-6.933106,0.893613,-9.648054,-9.623492],[1.637777,-6.060508,-9.888437,0.194142,-7.098049,0.704589,4.691614,-2.019727],[-5.444341,9.763570,-8.297252,-3.392211,4.372906,-1.836428,-3.252104,7.623394],[8.829381,-8.459369,-4.375591,0.308439,-8.645431,9.256790,-1.236829,-8.047008]],[[5.711023,1.897346,6.319694,-6.227349,-4.925753,-1.414277,6.169771,-9.956097],[7.868514,-2.800531,-4.453075,-5.546496,-6.730636,-3.678903,-4.336798,9.375123],[-9.896517,7.038749,-5.765574,2.363348,-1.420688,-9.240913,5.881883,-1.889276],[8.229337,-9.031454,-1.479129,-3.054853,-4.585822,1.442534,7.192006,-0.882611],[-7.392436,5.669888,6.498936,5.743557,-9.560262,2.025431,-3.379115,-9.170176],[-4.012009,6.993025,-5.592166,8.365094,6.577870,1.173713,8.262549,-9.970001],[1.217151,2.379667,-6.691840,-2.434794,-3.479874,-5.550296,2.615360,-9.655623],[-7.056359,-8.850918,9.313390,8.915832,6.799616,5.912215,5.372381,-4.239679],[-0.156670,0.736649,-4.971004,6.589099,-2.674264,8.950279,9.432342,6.945540],[8.216550,-8.412202,-4.333083,9.467036,-5.498811,-5.200242,0.785709,-9.855390],[-9.521863,-4.254074,3.075093,7.363303,-9.418394,0.293455,-2.281693,9.658917],[-7.290388,-5.815471,2.749469,-1.137123,9.800439,9.662453,5.359258,-3.255653],[-6.786241,-1.343597,-8.305490,9.423260,-3.012545,-8.137421,7.420456,4.155886],[9.342561,-5.943147,3.852443,-3.660664,-7.454805,4.948538,7.423893,1.697297],[2.988366,5.285551,-3.064062,-5.480212,5.509958,2.067003,-8.060388,1.702767]],[[9.111802,-9.351537,-1.971512,9.667483,4.773912,6.510047,-3.711002,-0.493293],[-0.746793,4.131514,-8.016596,-0.766909,7.009324,-2.826441,-0.896335,7.108686],[-4.238437,-9.680844,7.839006,6.727616,5.822006,8.436348,6.847007,5.993847],[-4.938231,-4.597551,-6.731979,-7.455042,9.237426,5.104721,-7.562599,0.539875],[-3.599768,-3.403348,2.544153,-1.049453,-9.676351,-4.914396,6.752754,6.315909],[-6.548370,-5.716185,-7.123736,-0.076184,-2.977061,9.368449,5.376029,9.346958],[2.364100,3.200868,4.012193,2.539783,3.143782,1.472041,0.401176,-0.249862],[3.193731,-7.987385,-2.384901,5.632334,-4.041365,9.377118,7.847442,5.210324],[-0.467243,7.999510,5.850294,0.292915,-7.935398,3.473235,-7.578083,9.841732],[5.530808,1.765097,2.878012,-7.491456,-1.117760,9.744056,-3.081612,-7.657610],[1.134472,-3.821059,-3.012628,9.176358,-2.126174,-6.534509,1.422938,-6.048641],[8.923184,-6.096973,-5.651532,-1.433914,-0.738591,-0.771828,-4.122922,-0.758288],[-5.882885,-3.437587,-0.677989,2.669054,1.513898,2.936150,-0.719274,7.941854],[-5.878349,-1.901730,-9.801143,1.977258,-4.658064,0.004332,-9.752176,-2.499292],[-1.800659,7.821366,-3.338723,2.668976,-6.647277,-5.174302,9.359477,-5.220125]],[[7.365688,-0.791005,4.540542,8.516092,-8.498275,-4.672584,-6.790337,5.728697],[-9.026351,0.355571,-8.704090,-5.514408,-5.968040,9.801301,-1.417286,2.606072],[-5.724349,7.071602,8.353941,3.311398,5.955548,-8.223433,-2.669947,-6.246556],[-3.591560,0.375807,-4.563885,4.238970,8.554331,-3.409273,-8.927223,7.130731],[-6.815597,-5.210240,8.380392,6.434988,1.272327,-1.154124,5.470384,-1.430863],[5.818193,-0.112909,1.302016,-0.106073,-0.589556,-6.539874,-0.347150,6.387428],[-2.617434,-0.616444,0.406648,-3.015996,5.155877,-6.631128,1.605849,-0.466550],[3.180211,9.113080,-2.773811,6.768496,-7.580622,6.346820,0.489785,0.520626],[-6.502281,-5.040026,2.142130,-0.052020,2.211418,-5.950770,-1.129092,0.281321],[9.803417,-3.259248,-4.614627,7.736549,-5.717590,7.849955,3.996774,3.784622],[-6.864492,-3.799315,4.007947,-3.036607,0.446551,7.380801,6.653780,5.587861],[2.453072,-4.366085,3.915484,3.976168,-2.665543,-0.366699,0.951156,2.199305],[1.081426,-7.941153,1.653370,2.969204,4.226296,-5.812443,-7.394508,8.828119],[8.416616,3.421229,4.856082,-0.152277,-7.972717,-3.280448,9.703060,6.165444],[7.519334,5.881095,9.059835,0.312264,2.317191,5.299694,-0.563036,-7.576605]],[[5.414663,-9.673172,-6.235946,-9.381765,6.833885,-2.606704,1.325461,3.234715],[0.887319,7.105943,-6.791474,9.377419,-9.780659,0.925266,-1.142906,-4.717452],[6.923606,-9.740610,-0.618595,-7.238803,1.600389,-1.495604,8.069313,6.138670],[-2.098940,1.294700,-2.668125,-7.629581,4.437078,6.374459,2.114750,7.154371],[-8.857645,-6.847649,2.020198,0.417890,-5.749398,9.647004,9.957597,-6.821000],[8.556057,-7.988531,8.964658,-0.438535,-2.523269,-1.576847,3.704741,2.322793],[1.966250,-0.899146,-6.651358,-2.822355,0.255370,-7.217730,-1.511157,-9.809589],[-9.805346,5.845920,-7.109613,2.838913,9.422577,-2.369327,5.167478,4.936365],[-3.322415,4.442880,2.445671,4.946625,6.428502,4.217508,-8.568011,6.981140],[3.305648,-2.252475,-6.481566,-7.151293,7.557842,1.011795,-3.229488,-5.949269],[-1.118075,-1.668497,6.100794,1.237141,9.721310,-3.201859,-5.239219,3.911800],[9.518430,1.659512,3.982384,6.408823,8.460782,7.121212,7.809774,-4.841120],[-9.502139,0.945521,-9.199491,-5.844560,-6.347440,6.415340,3.745321,-8.841668],[7.638935,-2.991625,4.218527,7.252270,-7.234832,8.586043,-0.440262,-9.741808],[-7.866024,-5.903977,-2.728692,-4.626211,-4.303697,6.669112,-5.048839,-9.285095]],[[-2.966170,-7.675446,-3.172283,-7.372916,4.167124,9.005459,9.891357,-1.327494],[8.013240,-0.746584,2.807362,-9.854406,-4.086820,4.155483,5.703968,-9.793477],[7.888636,-2.473666,4.217536,-7.636489,-2.863006,-6.495620,6.393095,0.900882],[-9.733366,-7.918160,-5.255005,9.742917,5.193604,-3.263966,-7.801916,-6.521102],[2.762557,9.218727,0.098864,2.515833,4.261894,5.249642,-7.370656,-0.352667],[-2.075600,6.591533,8.953587,2.913353,7.210096,-8.172481,2.425745,5.935066],[9.441816,0.076477,6.543685,-9.285870,-2.559522,8.127103,-6.473379,3.906633],[0.016294,4.491504,8.694281,9.052711,-7.828049,-7.966187,-7.971197,2.909554],[2.548907,-0.684471,4.043672,3.691883,-8.618845,4.007397,-2.113731,7.178101],[7.596619,2.284191,2.498542,8.109088,-4.334616,7.379234,-2.532222,-3.572308],[4.015657,-4.644197,2.307090,2.889434,-5.492947,-9.115699,5.988896,-7.767389],[-0.259826,-7.373810,-7.839819,-6.957792,0.674223,7.451881,-2.002980,0.094790],[-1.531697,-4.613757,-6.219986,4.434565,-7.725940,9.213463,2.068766,-2.457222],[9.179982,-8.056539,1.829022,-8.657877,-5.406951,-2.123002,6.813640,9.977314],[1.205529,8.685525,2.228976,-3.615160,-0.886900,8.449360,-4.840168,-4.884303]]], dtype = "float64")#candidate|2146|(9, 15, 8)|const|float64
bop_2147 = relay.greater(uop_2126.astype('bool'), const_2146.astype('bool')) # shape=(9, 15, 8)
bop_2150 = relay.greater(uop_2128.astype('bool'), const_2146.astype('bool')) # shape=(9, 15, 8)
bop_2151 = relay.bitwise_or(bop_2147.astype('int64'), uop_2126.astype('int64')) # shape=(9, 15, 8)
bop_2154 = relay.bitwise_or(bop_2150.astype('int64'), uop_2128.astype('int64')) # shape=(9, 15, 8)
func_940_call = mod.get_global_var('func_940')
func_942_call = mutated_mod.get_global_var('func_942')
call_2156 = relay.TupleGetItem(func_940_call(relay.reshape(var_2133.astype('int16'), [48,])), 3)
call_2157 = relay.TupleGetItem(func_942_call(relay.reshape(var_2133.astype('int16'), [48,])), 3)
bop_2159 = relay.minimum(bop_2151.astype('uint16'), relay.reshape(const_2146.astype('uint16'), relay.shape_of(bop_2151))) # shape=(9, 15, 8)
bop_2162 = relay.minimum(bop_2154.astype('uint16'), relay.reshape(const_2146.astype('uint16'), relay.shape_of(bop_2154))) # shape=(9, 15, 8)
bop_2178 = relay.mod(uop_2126.astype('float64'), bop_2159.astype('float64')) # shape=(9, 15, 8)
bop_2181 = relay.mod(uop_2128.astype('float64'), bop_2162.astype('float64')) # shape=(9, 15, 8)
output = relay.Tuple([call_2131,const_2132,var_2133,call_2156,bop_2178,])
output2 = relay.Tuple([call_2134,const_2132,var_2133,call_2157,bop_2181,])
func_2185 = relay.Function([var_2133,], output)
mod['func_2185'] = func_2185
mod = relay.transform.InferType()(mod)
var_2186 = relay.var("var_2186", dtype = "int16", shape = (48,))#candidate|2186|(48,)|var|int16
output = func_2185(var_2186)
func_2187 = relay.Function([var_2186], output)
mutated_mod['func_2187'] = func_2187
mutated_mod = relay.transform.InferType()(mutated_mod)
func_599_call = mod.get_global_var('func_599')
func_600_call = mutated_mod.get_global_var('func_600')
call_2216 = func_599_call()
call_2217 = func_599_call()
func_2185_call = mod.get_global_var('func_2185')
func_2187_call = mutated_mod.get_global_var('func_2187')
const_2219 = relay.const([-1,-2,-3,-7,7,9,-9,2,6,8,1,-4,-1,-1,10,6,3,10,-8,-2,9,8,4,-1,-6,-4,5,9,4,-10,8,-8,4,10,4,-9,-1,5,9,-6,3,1,7,7,-9,-8,2,9], dtype = "int16")#candidate|2219|(48,)|const|int16
call_2218 = relay.TupleGetItem(func_2185_call(relay.reshape(const_2219.astype('int16'), [48,])), 2)
call_2220 = relay.TupleGetItem(func_2187_call(relay.reshape(const_2219.astype('int16'), [48,])), 2)
func_2077_call = mod.get_global_var('func_2077')
func_2079_call = mutated_mod.get_global_var('func_2079')
call_2233 = func_2077_call()
call_2234 = func_2077_call()
func_1803_call = mod.get_global_var('func_1803')
func_1807_call = mutated_mod.get_global_var('func_1807')
const_2236 = relay.const([-7,-2,-10,-7,-10,-1,3,-5,4,-4,4,-3,10,4,-2,10,8,4,10,4,10,-3,3,-9,-9,-9,-7,-10,10,6,9,-9,9,4,-5,-1,4,-7,-2,-4,-9,4,5,-7,-9,7,9,2,-1,9,-5,-10,2,7,-6,-5,-4,-3,4,-6,-2,-1,-2,1,1,9,10,-6,1,-8,-4,1,3,-9,-3,10,-1,-8,-3,-4,1,-10,-7,7], dtype = "uint8")#candidate|2236|(84,)|const|uint8
call_2235 = relay.TupleGetItem(func_1803_call(relay.reshape(const_2236.astype('uint8'), [2, 3, 14]), relay.reshape(const_2236.astype('uint8'), [2, 3, 14]), ), 1)
call_2237 = relay.TupleGetItem(func_1807_call(relay.reshape(const_2236.astype('uint8'), [2, 3, 14]), relay.reshape(const_2236.astype('uint8'), [2, 3, 14]), ), 1)
func_1063_call = mod.get_global_var('func_1063')
func_1065_call = mutated_mod.get_global_var('func_1065')
var_2250 = relay.var("var_2250", dtype = "float64", shape = (6, 100))#candidate|2250|(6, 100)|var|float64
call_2249 = relay.TupleGetItem(func_1063_call(relay.reshape(var_2250.astype('float64'), [5, 15, 8])), 1)
call_2251 = relay.TupleGetItem(func_1065_call(relay.reshape(var_2250.astype('float64'), [5, 15, 8])), 1)
output = relay.Tuple([call_2216,call_2218,const_2219,call_2233,call_2235,const_2236,call_2249,var_2250,])
output2 = relay.Tuple([call_2217,call_2220,const_2219,call_2234,call_2237,const_2236,call_2251,var_2250,])
func_2252 = relay.Function([var_2250,], output)
mod['func_2252'] = func_2252
mod = relay.transform.InferType()(mod)
mutated_mod['func_2252'] = func_2252
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2253 = relay.var("var_2253", dtype = "float64", shape = (6, 100))#candidate|2253|(6, 100)|var|float64
func_2252_call = mutated_mod.get_global_var('func_2252')
call_2254 = func_2252_call(var_2253)
output = call_2254
func_2255 = relay.Function([var_2253], output)
mutated_mod['func_2255'] = func_2255
mutated_mod = relay.transform.InferType()(mutated_mod)
func_599_call = mod.get_global_var('func_599')
func_600_call = mutated_mod.get_global_var('func_600')
call_2257 = func_599_call()
call_2258 = func_599_call()
var_2269 = relay.var("var_2269", dtype = "float64", shape = (16, 15, 8))#candidate|2269|(16, 15, 8)|var|float64
bop_2270 = relay.not_equal(call_2257.astype('bool'), var_2269.astype('bool')) # shape=(16, 15, 8)
bop_2273 = relay.not_equal(call_2258.astype('bool'), var_2269.astype('bool')) # shape=(16, 15, 8)
var_2274 = relay.var("var_2274", dtype = "float64", shape = (16, 15, 8))#candidate|2274|(16, 15, 8)|var|float64
bop_2275 = relay.less_equal(var_2269.astype('bool'), relay.reshape(var_2274.astype('bool'), relay.shape_of(var_2269))) # shape=(16, 15, 8)
func_949_call = mod.get_global_var('func_949')
func_952_call = mutated_mod.get_global_var('func_952')
const_2292 = relay.const(-1, dtype = "uint8")#candidate|2292|()|const|uint8
const_2293 = relay.const([[5,-5,-9,5,-2,-1,-7,6,3,8,8,10,-10,9,8,6,-9,-8,-3,-10,-3,1,-9,-2,1,-8,7,-8,6,9,-1,7,-3,2,8,-10,-3,1,-8,-6,4,-9,-1,-6,-2,-1,9,7,-3,-9,-1,1,1,-7,6,9,7,-1,-5,-7,3,4,-8,-5,1,1,4,-7,-6,6,-8,-2,-5,3,-1,6,8,5,10,6,-5,-3,-3,-3,-5,-10,6,-7,-6,-10,9,-10,-8,5,-6,-1,-10,-7,-7,1,-3,-4,-5,-1,-9,2,9,-9,7,-4,2,4,-10,-4,-5,-8,6,-9,-10,5,-1,1,9,4,-1,8,4,7,5,10,6,6,9,-4,6,-10,6,-7,-1,-10,-1,-8,-10,-10,6,-5,-9,4,-8,7,-8,3,8,7,-2,2,7,10,-4,-4,-2,3,-2,7,7],[-6,-1,-9,8,8,2,3,9,9,-6,6,-2,7,-7,-3,-10,-9,7,-8,3,3,6,-7,1,-10,6,5,6,1,-10,-10,-3,-9,-5,3,3,-3,6,-5,5,6,-5,9,-6,-9,-5,5,7,8,3,10,-9,-6,-5,2,10,1,-10,9,1,2,-6,-3,3,5,-3,3,-9,9,-3,6,-10,1,7,5,7,-5,-6,-7,2,-4,-6,10,-7,-1,-9,-4,-4,-10,4,-3,5,-5,8,8,2,6,-1,5,-5,-6,3,-5,2,10,-1,6,-10,-4,3,-10,-6,-4,5,4,-8,-4,10,-8,5,10,-2,1,-9,2,-9,-8,-1,1,-2,7,7,10,3,2,7,-3,8,1,-8,-1,5,1,2,3,-9,3,-4,-5,-3,4,-9,-9,10,6,2,7,7,-5,-2,-2,-9,-8,9,9],[-10,-2,-9,-8,2,8,-3,3,-3,-6,7,5,-2,10,-6,-5,-1,7,-9,-8,3,7,3,6,8,-8,-2,10,7,7,-8,-4,-9,-8,8,-1,4,-6,8,2,6,1,-6,-5,-3,-8,5,10,3,-6,6,1,-5,-8,1,-9,9,-6,-10,-7,3,6,7,6,5,-10,-7,-10,8,-7,7,7,-5,2,5,-10,5,10,1,-4,6,-7,5,-9,-7,-3,2,10,-4,-7,-4,-9,3,2,5,-10,10,-6,-5,9,1,6,-3,-5,1,-9,-6,-3,-10,-5,-1,-6,2,-5,8,9,-7,7,3,8,-3,-6,-5,-10,-6,-10,9,7,1,-8,-5,10,-4,-1,-10,-9,-5,-4,6,7,-8,-8,-2,-10,-8,-4,7,-6,-3,-8,-5,8,5,-2,5,-4,6,-1,10,3,-2,-10,1,2,2],[-8,10,-1,-7,8,2,-4,6,9,9,-4,7,9,-10,3,-4,3,7,9,-6,-6,10,7,7,4,7,6,1,-3,10,-5,7,6,-1,-9,-3,5,3,9,-7,-6,8,10,1,2,-9,4,4,-3,-7,2,-5,1,-1,10,3,4,-9,-3,-8,-2,2,5,5,3,-8,2,-3,1,-3,-2,8,8,-10,10,5,-5,5,5,7,4,4,-1,6,1,-5,-6,8,-2,6,-6,-1,8,-10,8,2,5,7,-4,-7,2,9,5,-5,-6,7,10,3,-6,2,2,-7,3,-10,6,-4,-1,8,10,3,2,10,-9,-3,-9,8,-2,-6,-6,-2,8,-1,-10,-3,4,-8,7,10,4,9,-10,-3,-4,7,-9,-2,-6,-6,-6,9,-4,-6,-9,-6,-2,6,-4,6,10,-7,4,-8,6,9,2],[2,4,-8,6,6,9,-4,1,-8,-3,1,-6,-10,-2,2,4,1,-2,3,-1,10,10,-2,3,-1,-4,-6,5,3,-2,1,-1,-5,1,2,6,-1,-5,-7,-2,-7,-5,9,8,7,-8,-7,3,1,2,6,-7,-6,2,1,4,-2,-2,8,4,-9,4,-1,-9,-8,8,-3,-3,-7,4,8,-7,-6,-5,8,-10,4,-4,8,9,-6,-4,-2,-8,1,-7,10,3,-5,-10,10,10,3,-10,7,1,-6,10,1,7,8,10,9,5,2,5,-7,-5,-8,3,2,-7,-8,-8,-5,-10,-8,2,-4,9,2,5,8,-10,-2,-2,-9,-7,-5,6,8,2,4,1,-1,-3,6,-2,7,3,-7,6,-1,10,5,-6,2,1,4,-6,-4,-1,7,5,7,5,-10,-7,3,-8,7,-5,4,7,-8],[4,-3,10,-10,6,-2,1,-2,-4,-8,-7,-6,4,-6,7,-5,6,8,10,1,-5,-6,7,-5,-7,3,7,-6,-7,-3,6,7,-8,10,-3,5,-5,2,-1,3,9,-1,7,-9,-10,1,4,10,5,1,10,-5,7,7,6,7,9,-4,-3,-1,9,9,-9,5,-8,1,-2,-2,-6,8,-10,9,-1,6,-8,-7,8,-10,6,1,2,3,-8,5,-4,8,-8,-5,-10,6,-7,-4,-10,2,-10,1,4,-9,9,-10,7,-8,3,-7,-6,10,6,10,10,4,-4,-5,-9,5,-8,-2,1,1,7,8,3,-9,-3,4,1,-5,-5,5,5,-3,-3,8,-4,9,-1,5,6,-10,4,-4,4,-10,-2,-2,-3,9,-7,-1,10,-4,-6,2,4,-2,-9,-3,-8,1,-8,-8,-7,8,-8,7,-8],[8,2,7,-5,6,7,-7,4,6,1,4,5,-4,-10,10,3,-3,7,3,-9,5,10,-1,-8,-8,-3,8,6,-8,2,6,5,10,-7,3,4,2,-10,10,-1,8,1,-9,-8,5,6,-5,9,2,-10,4,3,-8,8,-2,6,-3,5,-6,-1,-5,2,-8,7,7,-7,3,-6,2,1,-4,-3,8,9,3,6,-8,7,-7,6,-2,-6,2,8,-5,9,5,-6,-9,6,-4,-7,-1,8,9,-4,6,7,-10,-3,1,-4,-1,-9,5,2,10,-4,6,-8,8,7,10,2,-7,6,-7,6,3,2,-5,-9,-6,5,-7,-8,-3,-6,6,-4,7,3,-2,-3,6,-3,2,5,7,1,-1,6,1,-8,4,-2,-1,6,-5,10,-4,4,7,3,9,9,-2,-5,-8,2,6,4,10,-3,-9],[-8,-6,-1,2,-8,-8,1,1,-5,-1,-5,-2,4,-9,8,-10,2,-1,-8,7,-3,2,-6,-2,-3,9,-7,9,2,-8,7,-9,1,-4,-10,-6,7,-9,-10,6,-1,5,6,9,1,10,-5,-9,-6,9,5,3,1,4,10,-9,7,-10,6,-10,-1,9,9,4,2,-5,9,6,9,-3,4,-1,4,3,-5,10,-3,-1,6,2,-1,4,5,9,-4,3,4,6,-7,9,1,-5,-8,-1,-4,-2,-9,4,-8,8,-5,7,-4,7,-3,-3,-8,3,9,-8,-6,-7,-9,-9,-5,-9,7,-2,-1,2,7,-10,-8,-9,-6,9,9,9,10,-5,4,-5,-9,1,6,-6,1,-8,-9,-5,5,-9,1,-4,-5,-5,-4,7,7,-5,-3,6,5,2,-2,-10,-2,-1,4,-3,-6,-5,9,6,-4],[-9,-2,-9,-10,2,10,6,9,-7,5,-2,-10,-3,-3,-5,10,1,10,10,3,-1,-3,8,-8,-5,-5,-6,-3,4,-10,2,4,3,-3,5,4,-2,-4,-7,5,5,-10,-5,-10,1,-9,-9,4,8,-4,5,8,2,-8,-4,2,3,10,5,10,-9,8,-3,-9,-2,-5,-10,-6,4,-1,9,6,5,1,-6,-7,1,5,8,6,-9,-8,-1,-1,-10,-3,-6,-10,-7,-5,1,9,7,-7,-10,-6,-3,7,-9,-1,1,-8,5,9,1,6,-6,-6,-1,-10,6,-9,10,-1,2,-10,7,9,-7,3,-4,10,6,-5,-6,5,10,-9,9,9,-5,4,8,2,-4,3,-6,10,-8,-8,-1,-8,-6,-3,-8,-6,-3,5,-8,7,3,-1,-5,-10,9,9,10,1,4,-1,-6,7,1,-3,8],[10,1,10,-6,9,8,-5,3,4,-10,2,-6,-7,9,-6,1,-8,-1,8,-7,-1,5,5,4,7,-6,1,-8,-1,-10,5,2,4,10,-1,9,5,-9,-3,-10,6,9,-10,-8,5,-7,-1,-4,2,-5,2,-6,9,7,-6,-10,5,-10,8,5,7,-2,10,-1,9,-7,1,9,-9,-10,5,7,-1,6,-6,1,-2,-10,-10,-7,7,1,1,8,8,7,9,-5,3,-2,-4,-10,7,-1,3,5,3,-9,-7,6,-4,1,7,6,9,8,-10,-10,-10,-3,8,-2,3,7,8,-5,6,-10,2,-2,-3,-4,1,-1,4,4,1,5,7,1,-5,2,10,4,-7,5,-9,4,-3,-2,6,-9,2,-10,-5,-6,7,4,7,1,8,-3,-7,8,-1,-8,-6,5,-2,7,-6,-10,3,10,3],[4,-9,10,-6,-9,9,-4,-4,-3,4,6,6,-10,-1,9,-4,-7,1,-3,6,-2,9,1,4,2,7,7,3,2,-10,9,-3,-8,-2,1,-3,4,-8,-5,-1,2,4,-3,7,-2,6,10,6,4,-1,9,-8,5,-9,10,-7,10,-2,-8,-8,-5,-2,4,2,-7,4,6,10,-8,2,-1,-2,2,-5,2,-3,-10,1,2,-3,-8,-6,9,-6,4,-6,-10,-5,-4,-3,4,3,-10,7,10,2,6,-2,3,-3,7,10,-10,10,-5,-10,10,4,-10,1,-2,-7,2,-3,-9,-1,-6,6,8,-9,8,6,7,-7,3,-8,-2,3,-4,8,-3,-2,2,4,-3,-4,6,-8,-10,-9,-2,5,-2,7,-5,1,-5,-6,2,-4,-6,-5,-8,3,-9,-8,1,-6,-2,-1,9,-2,7,-1,9],[-4,-6,7,-4,-10,5,4,3,-9,5,9,-3,8,2,-1,-7,-8,-3,-4,7,8,6,-10,-1,4,-10,-10,8,5,9,1,-8,-8,-5,-8,10,4,9,5,-2,8,1,-7,7,-9,5,-4,-10,-5,-7,-7,10,-1,5,1,-4,-1,8,-6,-7,3,6,6,2,-2,6,-3,9,7,1,-3,-8,4,2,1,6,1,3,-9,-1,-1,-8,-5,-10,3,10,-8,10,-4,-1,-2,-1,10,-2,-9,10,2,-4,-7,9,8,7,10,10,-2,1,10,8,-5,9,-3,-4,6,-2,-2,6,10,8,3,-4,-8,8,6,-6,-6,5,-3,-6,6,-4,7,-8,3,9,-1,10,7,-7,-6,5,9,1,8,-9,-5,1,-2,1,7,1,4,-7,-1,-5,9,-9,10,8,-9,-10,-1,8,-2,-9,10],[6,1,-4,-2,-9,9,-9,10,-6,-8,3,9,-5,2,-1,3,-6,-3,-7,1,5,-4,2,-2,2,7,1,9,-9,9,-3,7,5,4,-4,7,-9,-2,6,-9,7,-6,-2,-4,5,-10,4,-10,5,10,-10,-9,-10,8,-8,-4,3,-1,4,7,-9,-8,2,3,-3,-9,1,-2,8,9,-8,-10,3,-9,9,6,3,-10,-5,6,-7,3,-2,1,6,5,4,-7,7,6,2,-3,-8,-3,7,3,4,-3,10,6,7,1,9,8,6,1,8,4,-8,-10,-4,-10,-6,5,-1,3,-2,-9,4,6,-1,-7,-2,6,-6,6,9,10,-3,3,-4,1,-3,-9,-8,-5,4,10,3,-8,2,10,-4,-7,3,-10,-8,-5,9,-8,-8,6,4,-10,1,5,5,-7,4,-5,-5,6,-4,-6,2],[2,6,-4,3,7,-3,1,8,5,3,-10,5,-2,6,3,-2,10,2,-8,7,1,8,5,2,-7,-2,-1,-5,-5,3,-9,-1,-10,-2,-10,-4,8,-4,5,5,-9,10,-1,7,4,-3,4,1,-9,-4,1,-9,-7,1,9,5,10,-1,2,10,7,-10,-9,5,-3,8,-7,2,2,-8,-7,10,-10,-2,-9,10,-6,-5,1,-5,-10,-8,-2,1,-2,-6,1,10,-6,-4,3,-1,4,5,9,-8,5,-4,-6,4,3,9,-5,-5,-9,8,-3,-2,6,-10,9,3,-4,2,3,10,-5,8,-5,-3,-2,-8,-1,-1,10,-3,9,-3,-5,7,-1,4,3,6,-6,4,-3,2,7,-4,-5,3,4,-1,1,1,-2,-7,-8,4,-5,2,3,3,-7,6,-3,8,-5,10,-6,9,5,-4,1],[7,-8,-4,-4,2,4,-5,-7,6,-3,-9,7,-8,3,7,2,8,4,-3,-8,2,-3,9,-2,-3,3,-4,9,5,8,6,8,1,5,-2,9,5,3,-3,10,7,-7,4,-5,-9,-2,2,-10,-4,7,10,-2,-9,8,7,7,1,-7,1,7,6,9,-1,-10,-4,3,-4,-8,9,2,-3,-1,4,-3,-3,-9,10,-6,-4,6,-5,1,-3,2,-4,9,5,4,-10,-4,-7,-2,10,-8,6,2,2,-1,-2,-6,-9,-4,4,4,4,9,-3,-8,8,-7,9,-6,-5,-5,-1,-3,-7,9,-4,-7,2,-2,6,-8,-6,-9,-6,-6,-3,8,-4,-8,-8,2,9,2,5,8,4,6,-3,-4,9,10,3,-7,8,9,10,2,3,1,-10,1,-5,3,-1,6,9,1,-5,2,-4,3,-4]], dtype = "uint8")#candidate|2293|(15, 165)|const|uint8
call_2291 = func_949_call(relay.reshape(const_2292.astype('uint8'), []), relay.reshape(const_2293.astype('uint8'), [11, 15, 15]), )
call_2294 = func_949_call(relay.reshape(const_2292.astype('uint8'), []), relay.reshape(const_2293.astype('uint8'), [11, 15, 15]), )
uop_2295 = relay.atanh(const_2293.astype('float32')) # shape=(15, 165)
output = relay.Tuple([bop_2270,bop_2275,call_2291,const_2292,uop_2295,])
output2 = relay.Tuple([bop_2273,bop_2275,call_2294,const_2292,uop_2295,])
func_2308 = relay.Function([var_2269,var_2274,], output)
mod['func_2308'] = func_2308
mod = relay.transform.InferType()(mod)
var_2309 = relay.var("var_2309", dtype = "float64", shape = (16, 15, 8))#candidate|2309|(16, 15, 8)|var|float64
var_2310 = relay.var("var_2310", dtype = "float64", shape = (16, 15, 8))#candidate|2310|(16, 15, 8)|var|float64
output = func_2308(var_2309,var_2310,)
func_2311 = relay.Function([var_2309,var_2310,], output)
mutated_mod['func_2311'] = func_2311
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2331 = relay.var("var_2331", dtype = "uint16", shape = ())#candidate|2331|()|var|uint16
var_2332 = relay.var("var_2332", dtype = "uint16", shape = (11, 4, 1))#candidate|2332|(11, 4, 1)|var|uint16
bop_2333 = relay.less(var_2331.astype('bool'), var_2332.astype('bool')) # shape=(11, 4, 1)
output = bop_2333
output2 = bop_2333
func_2352 = relay.Function([var_2331,var_2332,], output)
mod['func_2352'] = func_2352
mod = relay.transform.InferType()(mod)
var_2353 = relay.var("var_2353", dtype = "uint16", shape = ())#candidate|2353|()|var|uint16
var_2354 = relay.var("var_2354", dtype = "uint16", shape = (11, 4, 1))#candidate|2354|(11, 4, 1)|var|uint16
output = func_2352(var_2353,var_2354,)
func_2355 = relay.Function([var_2353,var_2354,], output)
mutated_mod['func_2355'] = func_2355
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2384 = relay.const([[[0.174656,-3.260408,-0.613674,6.260982,-5.015598,8.004311,3.213276,8.221066,5.859021,4.065072,5.159836,-2.449167,1.791280],[8.516326,-7.743905,4.801481,6.292657,5.453959,-0.015576,-5.663210,0.724782,0.908354,-7.773219,-8.959700,5.606541,-2.147077],[5.659326,9.065300,-7.767166,-9.468415,6.890863,-6.848034,9.508852,1.247492,-9.338376,0.064349,8.993126,-6.256606,5.398161],[8.674554,4.744046,8.422443,-4.633216,5.868237,0.593926,-0.577181,-3.784634,-5.225705,-9.836039,1.013481,1.420239,-3.671178]],[[-9.845514,-2.530617,-3.219155,-1.981118,6.626674,-8.967856,-9.989062,-7.269006,9.784515,-0.198944,6.651215,-0.744394,-0.899430],[-5.932322,-8.188913,2.500407,-1.924710,-5.756446,1.634182,-5.701843,7.909201,3.978141,-3.239562,4.906845,-8.680081,4.454960],[-7.062074,2.110152,-3.111904,-7.939663,9.288352,3.437070,9.556983,-9.666554,-8.584223,-1.095833,8.922915,0.486551,1.527983],[-4.013959,-0.712698,-9.043734,8.316507,-7.801126,9.002883,-9.199163,-6.395584,-4.606850,8.204247,-7.316814,7.682595,6.572148]],[[-5.427825,4.071398,-2.647124,9.555522,2.681803,7.946626,-4.161833,-9.542394,1.258523,-8.311601,-4.441724,0.603137,9.484029],[5.551442,-7.400618,3.191388,3.803245,9.946286,-2.841764,5.060796,-2.949666,-4.443764,-3.811617,-6.852320,0.069123,5.742129],[-9.206613,-8.774863,-3.119764,-4.328116,-2.448534,-7.667274,-1.133290,6.859955,-5.121920,8.404582,-0.406983,6.338056,-4.872584],[-3.577221,-6.330846,-3.262959,-0.734691,-4.010690,-8.777440,-6.995095,4.758686,9.554358,-7.568994,-2.749894,3.095761,6.531516]],[[-4.485221,-0.463757,-3.175795,-0.419842,-4.511328,2.666005,9.680992,5.294939,6.234591,4.118667,-1.406770,-6.658517,5.468299],[-0.364346,-7.623741,-5.845977,-8.836015,-6.085831,3.862088,-8.587967,8.477553,9.718146,6.210887,-5.213085,-2.385846,1.319752],[-1.883406,1.150691,6.636694,-2.262431,9.111967,-2.845854,3.262947,-1.614846,9.194490,-0.303879,4.382808,-1.263906,2.913911],[8.804087,-8.897755,-3.932694,-2.836958,-2.543466,4.395723,-4.551582,-3.559402,4.275941,1.028904,-4.977876,-2.899381,4.888978]],[[-5.121525,-8.295908,-3.823786,0.134314,4.460160,-9.588072,5.149403,1.567744,9.621523,7.477000,-6.235832,-9.400592,7.166778],[-1.265904,3.690226,9.736548,9.291194,2.305659,4.574744,-9.551244,7.915446,-8.100049,-1.444343,4.132191,2.577848,4.494157],[9.856228,4.057638,-5.006313,-2.451426,9.703680,-1.617116,-7.187166,3.057367,-2.723877,-4.207716,-9.391106,0.476094,-5.779259],[-1.651157,2.375404,8.776462,4.583371,2.222779,-2.926630,-6.482750,2.562479,9.757449,-2.232617,5.591695,-9.309566,-9.010027]],[[6.943956,6.898376,3.435269,1.390586,8.980679,0.829736,-9.466095,8.436681,9.776406,-4.852914,-9.200868,-1.115018,-3.401810],[0.195494,0.882509,4.601362,7.993740,-4.703942,4.341054,-9.829323,-1.884074,1.171472,-5.483286,4.022999,-4.727997,7.942930],[8.408176,-3.115917,2.257251,0.153670,0.213658,9.486654,7.610772,8.802839,-4.993725,-2.629612,-1.970783,5.750378,-1.907354],[-9.356142,-8.380670,7.685217,6.030353,-1.743255,1.685071,3.166735,-7.770238,-6.601790,-1.276307,-1.369481,0.850108,5.985641]],[[7.473110,-0.403952,7.088315,-1.383775,-3.101524,-1.450247,5.407545,2.798708,-5.124957,-7.508641,5.713939,-5.103103,-6.263329],[-6.312111,4.301867,6.789627,-9.348540,-4.601553,-9.986546,-6.239206,-4.198200,-6.358125,0.990809,8.482854,-6.831124,-8.888422],[-0.690103,5.195605,-7.966020,-3.238068,3.440283,-4.244641,6.020898,-4.267925,9.041170,5.779599,5.266350,-5.826216,3.081741],[-5.464905,6.816333,8.842397,6.535145,-8.443194,8.081629,-2.017092,1.781185,-5.483393,9.131380,-9.125449,2.084346,2.103757]],[[-6.259719,5.487260,0.608397,6.317447,1.541669,-4.019701,-8.998868,-6.480596,3.303745,-8.969082,9.671896,3.570227,1.842928],[9.949575,6.627124,6.696930,-8.568048,9.413896,-0.487790,-5.236328,-8.903132,3.146071,-8.935705,-2.900795,-7.107979,-0.471025],[0.155731,-1.304983,2.629660,-7.271158,-9.682176,-8.486814,-5.921069,-1.188032,6.344374,-9.890266,2.542538,-5.368937,9.033941],[4.604706,9.891731,6.118063,-4.327580,-8.557863,-1.426918,-3.630050,-1.967778,7.152022,2.841346,-3.251077,0.053479,-2.665724]],[[-1.998054,-7.818903,0.135045,0.317748,3.018137,2.827579,-5.418438,3.185562,-6.934792,-7.254721,1.729613,-9.688080,1.336356],[0.968385,7.939023,-8.617321,-7.087563,-8.369838,-5.151551,-7.599606,-1.439928,3.257716,3.274824,5.444248,7.860370,4.554161],[-2.191965,7.563813,-6.922608,-8.187977,-7.251162,8.913528,1.327737,-6.872354,8.195824,9.167783,-2.045040,-5.303431,6.870488],[-6.295040,0.537230,6.984013,6.304785,-7.379853,4.803985,4.669493,8.162318,-5.769955,-9.138660,-3.093303,-4.071597,-8.138856]],[[1.970379,-2.594579,-2.403216,9.943708,-2.897854,0.459350,5.075787,2.349139,-8.272659,-5.820095,3.826042,-0.423291,9.794542],[1.558686,-1.076092,-5.428199,9.797238,5.496346,8.772779,0.579612,8.131194,7.130634,-0.705508,-0.429777,-5.185506,-4.633487],[8.233862,6.076972,-4.703138,-2.216275,-3.031536,-5.984223,-6.653469,-1.508599,-7.941745,7.171994,-0.729375,-3.435537,-3.805934],[-0.560377,9.681517,-7.366490,1.310554,9.200574,9.020007,0.056272,-1.692877,4.401351,8.750339,4.755732,1.117711,7.777668]],[[6.346195,7.412132,-1.358907,-4.762279,-7.334196,4.812106,7.607044,7.082877,-9.900476,-8.338026,-7.123059,4.988895,9.134399],[9.841943,-2.503656,6.253735,-1.536441,4.987512,-0.327825,-8.937964,-7.178124,-5.990929,-2.436323,-8.187528,-8.389721,-1.638677],[-1.758738,-4.954929,-7.432153,7.092860,0.446136,-5.132412,8.514676,-6.943526,-3.823793,-8.254665,-4.681422,-2.283514,7.003605],[-0.568733,8.664439,-3.663690,-9.734299,-7.723673,6.721523,3.275808,-8.461599,-8.606339,7.709021,8.206463,-5.537712,8.247708]],[[-8.515618,3.236159,-4.266403,-6.576063,-5.307505,-3.010154,0.253853,4.081050,-9.559654,4.273239,2.554192,-2.617500,4.781740],[-5.875365,6.761149,-5.316630,7.340331,2.951381,3.180135,4.038792,3.569682,0.052612,-0.884286,9.327999,0.917077,4.705411],[-8.362669,-3.866617,3.032270,1.322481,-9.177205,4.447294,-5.937264,4.108236,-4.100327,9.130307,-1.182249,-3.365734,-2.556152],[8.995134,9.196930,-6.582724,-7.877794,5.807091,8.191886,5.178379,-1.538071,8.103764,3.060714,8.115462,7.676010,1.022784]],[[4.268685,6.628139,4.624109,0.323112,8.623348,0.656924,-7.648541,-1.485510,6.172294,1.929563,-7.478935,-4.335148,-9.811769],[1.262597,4.712551,4.022794,-0.273408,-2.922906,-4.506829,-6.048246,3.443013,2.773660,-1.305943,5.479088,3.197591,-3.370652],[5.534258,-8.622454,-5.136321,6.251459,-1.140225,-7.062506,1.987697,7.844871,-1.157548,-0.756785,7.855310,-7.237326,7.888731],[1.471999,-9.092547,-4.477032,0.594641,4.197720,-1.711807,9.745217,-1.411813,3.218291,-0.108522,4.074785,2.718899,-0.581707]]], dtype = "float64")#candidate|2384|(13, 4, 13)|const|float64
uop_2385 = relay.asinh(const_2384.astype('float64')) # shape=(13, 4, 13)
func_54_call = mod.get_global_var('func_54')
func_57_call = mutated_mod.get_global_var('func_57')
const_2391 = relay.const([7,-6,-1,-9,7,1,8,-6,-4,-5,4,1,9,2,-1,1,-2,2,-5,-8,-4,10,8,-10,-6,-1,-8,-8,4,-4,-3,-2,4,-8,8,1,-6,-3,-7,-9,10,3,10,5,-3,8,4,3], dtype = "int16")#candidate|2391|(48,)|const|int16
call_2390 = func_54_call(relay.reshape(const_2391.astype('int16'), [3, 16]), relay.reshape(const_2391.astype('int16'), [3, 16]), )
call_2392 = func_54_call(relay.reshape(const_2391.astype('int16'), [3, 16]), relay.reshape(const_2391.astype('int16'), [3, 16]), )
func_711_call = mod.get_global_var('func_711')
func_713_call = mutated_mod.get_global_var('func_713')
var_2396 = relay.var("var_2396", dtype = "float32", shape = (858,))#candidate|2396|(858,)|var|float32
call_2395 = relay.TupleGetItem(func_711_call(relay.reshape(var_2396.astype('float32'), [13, 11, 6])), 0)
call_2397 = relay.TupleGetItem(func_713_call(relay.reshape(var_2396.astype('float32'), [13, 11, 6])), 0)
uop_2404 = relay.sigmoid(uop_2385.astype('float32')) # shape=(13, 4, 13)
var_2406 = relay.var("var_2406", dtype = "float64", shape = (13, 4, 13))#candidate|2406|(13, 4, 13)|var|float64
bop_2407 = relay.floor_divide(uop_2385.astype('float32'), relay.reshape(var_2406.astype('float32'), relay.shape_of(uop_2385))) # shape=(13, 4, 13)
bop_2419 = relay.minimum(uop_2404.astype('int8'), relay.reshape(uop_2385.astype('int8'), relay.shape_of(uop_2404))) # shape=(13, 4, 13)
func_836_call = mod.get_global_var('func_836')
func_838_call = mutated_mod.get_global_var('func_838')
call_2428 = relay.TupleGetItem(func_836_call(), 0)
call_2429 = relay.TupleGetItem(func_838_call(), 0)
var_2435 = relay.var("var_2435", dtype = "float32", shape = (13, 4, 13))#candidate|2435|(13, 4, 13)|var|float32
bop_2436 = relay.right_shift(uop_2404.astype('int8'), relay.reshape(var_2435.astype('int8'), relay.shape_of(uop_2404))) # shape=(13, 4, 13)
uop_2445 = relay.erf(uop_2385.astype('float32')) # shape=(13, 4, 13)
bop_2447 = relay.logical_or(bop_2436.astype('bool'), relay.reshape(const_2384.astype('bool'), relay.shape_of(bop_2436))) # shape=(13, 4, 13)
output = relay.Tuple([call_2390,const_2391,call_2395,var_2396,bop_2407,bop_2419,call_2428,uop_2445,bop_2447,])
output2 = relay.Tuple([call_2392,const_2391,call_2397,var_2396,bop_2407,bop_2419,call_2429,uop_2445,bop_2447,])
func_2453 = relay.Function([var_2396,var_2406,var_2435,], output)
mod['func_2453'] = func_2453
mod = relay.transform.InferType()(mod)
mutated_mod['func_2453'] = func_2453
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2453_call = mutated_mod.get_global_var('func_2453')
var_2455 = relay.var("var_2455", dtype = "float32", shape = (858,))#candidate|2455|(858,)|var|float32
var_2456 = relay.var("var_2456", dtype = "float64", shape = (13, 4, 13))#candidate|2456|(13, 4, 13)|var|float64
var_2457 = relay.var("var_2457", dtype = "float32", shape = (13, 4, 13))#candidate|2457|(13, 4, 13)|var|float32
call_2454 = func_2453_call(var_2455,var_2456,var_2457,)
output = call_2454
func_2458 = relay.Function([var_2455,var_2456,var_2457,], output)
mutated_mod['func_2458'] = func_2458
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2460 = relay.var("var_2460", dtype = "float32", shape = (3, 1, 7))#candidate|2460|(3, 1, 7)|var|float32
uop_2461 = relay.acos(var_2460.astype('float32')) # shape=(3, 1, 7)
func_949_call = mod.get_global_var('func_949')
func_952_call = mutated_mod.get_global_var('func_952')
var_2469 = relay.var("var_2469", dtype = "uint8", shape = ())#candidate|2469|()|var|uint8
const_2470 = relay.const([[-8,-4,10,7,8,-8,-10,-6,-1,-2,8,3,-6,-2,4,-2,3,-5,-1,10,-2,6,7,7,-8,-9,2,4,-8,-10,-10,-7,10,4,6,3,-6,2,-1,-3,7,-7,4,6,-8,6,-1,-1,-7,-6,-2,-5,-10,-4,-7,1,-9,-2,2,6,-6,-9,7,10,6,-9,7,-7,-10,-7,7,10,8,10,-1,9,-1,6,8,-4,-4,-3,6,7,2,-4,1,5,-7,9,-3,7,5,-4,3,-7,10,9,1,-1,-9,-10,-10,-10,-9,-4,7,6,7,5,7,-7,4,-10,-2,-6,9,-1,-2,-3,2,-3,9,1,1,-5,9,-3,10,8,8,2,1,-6,6,3,-7,7,8,-3,5,7,-2,9,-8,3,-8,-5,8,-1,9,2,-2,5,6,-1,7,-7,2,2,-10,8,-10,8,-2,-4,-2,-8,-3,6,-2,2,-7,-10,-4,9,-9,-3,-9,1,-1,2,-9,-10,5,4,3,7,-5,-6,-3,-3,1,-3,9,2,7,5,-8,10,1,1,10,-3,-8,1,4,-4,-10,-7,-1,10,5,-5,10,-4,-9,-4,-6,-3,-8,4,10,8,6,-10,-4,-6,6,2,9,7,-3,-9,10,3,-8,-9,-6,-10,-4,-9,1,-9,-9,4,-7,7,4,8,10,3,10,-8,-10,-9,9,5,3,8,5,1,-3,-3,-4,2,-2,-4,8,9,10,-4,-5,-10,5,10,2,-3,10,3,-6,-2,3,-1,7,10,-7,6,-7,10,-8,3,4,6,-1,1,-5,8,-8,8,-10,-3,-5,10,-7,4,-5,-7,5,4,-2,5,-10,5,3,-3,4,-1,7,10,4,-1,-3,7,-10,3,-9,-9,-3,-7,10,1,-8,-2,4,10,8,-8,-8,8,-7,1,-1,-5,7,-3,5,-10,6,7,5,-9,-9,-1,-1,6,-2,-6,-7,7,4,-2,4,4,-3,-10,-10,-1,-8,-5,-3,-7,-10,-8,-5,-3,-9,-9,-5,2,6,10,5,-5,8,-1,3,-8,2,-9,2,-5,-5,3,7,-1,9,9,5,-6,3,3,-5,8,6,-4,9,9,-4,-5,-2,-6,-10,-7,-10,-5,10,1,-9,-3,-6,3,-6,9,-9,-5,-3,-1,9,-9,1,-3,1,6,-3,-5,10,2,4,-8,-8,-1,-5,5,2,-2,-7,4,9,10,-3,-8,-4,-8,4,9,-8,-2,-7,-6,8,-10,3,2,5,3,-6,-8,-3,-9,2,-6,2,-7,4,6,3,6,-9,7,10,-2,1,9,8,-1,-7,5,7,-8,5,-5,-9,4,1,4,3,10,-7,10,-10,-10,-9,6,-8,9,8,4,6,5,-1,-9,-6,8,1,-1,-8,7,7,-7,8,10,1,3,-2,-5,7,7,4,-7,5,3,2,-3,5,-5,8,-9,9,-6,-10,4,-4,3,6,10,-9,-7,5,1,1,-3,1,-8,5,9,-5,-5,4,7,-7,1,2,-6,-9,-6,-2,1,-2,2,-5,5,4,8,-7,7,-2,9,-8,2,3,-10,-9,-6,2,-10,-9,-8,4,-8,-3,-4,-3,8,7,1,-9,5,-3,-3,-9,3,-8,2,9,5,-6,6,10,-3,5,9,6,-4,-4,-6,-9,-2,2,-3,3,2,4,9,1,3,5,-9,-5,-1,-9,-2,8,7,6,-10,5,6,-9,5,6,-5,9,1,-7,3,-1,-4,8,8,1,-3,-1,8,-4,9,9,1,8,-4,-6,8,-9,-6,-6,-1,4,3,-2,7,-4,-8,-2,2,4,-2,-10,-8,5,-8,-10,-7,-2,2,-3,-2,7,9,10,1,9,2,6,-10,6,3,8,2,2,4,5,2,5,-3,-7,8,-8,5,2,6,-5,6,2,-3,-2,-10,4,-8,5,3,6,8,-4,9,-8,6,7,-9,1,-3,-9,-9,5,2,-1,-4,8,4,-4,-8,9,8,-5,2,8,-1,8,-10,9,7,-6,-10,10,6,6,-8,5,10,-10,-10,-8,5,-10,9,4,-1,6,7,-5,1,7,6,-3,6,7,-4,-4,10,-4,3,-6,2,-6,-7,-4,-10,-8,-4,1,6,5,-4,1,-5,5,-4,-2,1,7,-7,-8,1,5,7,-5,-5,-5,1,5,10,4,10,-2,4,-1,-10,9,-5,9,10,4,-6,6,-6,5,-10,-2,5,-1,3,9,1,7,2,-7,-1,8,4,7,5,-4,9,7,-1,-4,-2,-10,-2,-10,-2,-7,-10,10,-8,-3,-7,10,-4,3,-5,10,1,-10,-6,9,9,-2,-10,-4,7,3,-4,-3,2,-4,2,-6,-5,-8,-9,10,1,-7,-2,1,-6,-7,-9,-1,-4,-10,10,-1,-4,-5,-4,-9,4,-5,-4,-8,-3,5,3,5,-10,6,-2,-4,-6,9,1,-4,-1,3,-7,10,-6,-2,-10,10,3,-9,-3,-1,-1,8,8,8,2,7,-2,9,-3,-9,-1,10,-5,9,3,8,2,-7,-9,-10,-8,-10,5,10,-4,10,6,-9,10,-10,10,8,-3,10,1,10,-8,-10,4,10,9,-3,-9,-7,-2,1,-2,-2,5,-6,4,6,8,5,-7,2,-5,10,-9,5,3,-1,-7,9,-7,-8,1,-10,-1,-3,-10,-4,-9,-10,-3,-10,-1,1,-4,-9,5,1,-1,-7,8,1,-4,-4,3,-3,-9,5,4,9,6,8,-5,-7,1,-9,3,-6,6,4,-2,-8,-10,2,-6,-1,-8,6,-1,10,-9,1,-6,1,-7,-3,-3,-1,-1,8,-5,-2,9,6,2,-2,-2,1,9,4,-8,-4,-6,-4,9,4,1,5,-5,2,7,-6,-6,-1,-2,3,-9,-9,-2,-2,4,-5,6,-7,-10,-8,-2,10,-5,4,-3,7,4,9,-10,-8,-8,9,2,-5,-4,1,-9,-3,1,2,-4,10,-5,-5,9,-9,-6,-3,4,-3,10,2,5,2,3,-2,2,-5,10,-4,-5,7,1,2,-5,6,6,-5,-5,9,-2,7,4,3,-3,-2,-9,-2,1,8,6,3,3,-7,4,8,-10,10,-8,7,-9,2,9,8,9,-6,-1,-8,-7,-7,-4,7,-2,5,3,3,-10,9,10,-1,-7,-5,8,-7,10,-5,10,6,2,-4,-5,6,4,7,5,5,5,-10,-3,7,10,-8,6,2,7,-3,-3,-8,-4,-2,-2,-9,-5,1,8,1,-2,6,-5,5,6,-4,7,-5,8,-8,-2,-9,-7,-5,8,3,-7,7,-9,3,2,-4,3,8,5,-4,-4,-6,-3,6,-8,-3,-7,-8,5,-2,1,6,3,5,-9,-9,-2,-3,-7,-8,7,-2,2,-1,-1,5,-6,8,-4,-9,4,5,-2,-2,-9,-6,2,1,7,-2,-4,4,8,1,-7,-5,8,-8,2,3,-10,8,-6,5,-10,6,6,3,-2,-7,5,-1,-6,7,-8,-9,-9,8,5,-1,-4,8,6,7,-6,-6,-8,5,-3,10,-3,8,6,-7,3,6,4,-7,-7,-6,-9,-5,-9,-9,-3,4,9,-7,-9,-4,2,-8,-5,-7,-1,7,-7,-7,5,9,-6,-3,4,-8,4,-3,-3,5,8,-4,8,9,6,-4,-1,-8,-5,-1,-2,-1,-2,-5,5,-7,-3,-2,-2,6,6,-8,2,-5,6,-5,-5,-5,9,4,-1,9,-1,4,-3,-1,10,-7,5,9,-5,10,-9,7,-6,-5,3,10,6,-7,-2,-7,10,-5,5,-6,10,-10,-2,8,9,4,9,8,-6,4,5,-2,-7,-10,3,-3,-4,2,2,-4,5,-5,-2,10,7,-7,7,-7,-6,-7,3,-2,2,2,5,-5,4,7,-2,-3,2,9,-9,4,-3,4,2,2,-1,-6,-10,1,10,9,4,8,2,-7,-6,-6,-3,-5,-6,7,-1,8,-5,-5,-4,6,6,7,-3,-9,-5,-10,-5,3,3,-1,-6,-6,-7,-3,-3,2,-3,7,1,-9,-3,7,3,9,4,8,10,-9,5,7,-3,7,-8,-3,2,-7,10,-3,8,9,-4,9,3,3,2,-5,-1,-2,-7,-7,-9,-4,-10,2,-10,9,-9,10,-8,9,-4,-6,7,3,-5,6,7,-2,8,-5,6,2,2,-9,-4,-4,-3,3,-8,-5,-7,6,-1,-10,-4,-5,1,-8,-9,5,3,4,-10,7,5,3,-5,7,9,4,4,-4,9,8,-6,5,-2,7,-8,-10,-8,-7,3,-8,-3,4,6,-4,9,-6,7,-6,10,1,-10,3,5,1,-5,-8,5,-8,1,5,4,-5,-3,-9,6,3,2,-6,-7,3,-7,-10,5,3,-10,4,-10,-6,-1,7,5,-5,-7,2,-9,-8,7,9,8,8,10,3,-4,-2,3,4,9,-5,-10,2,5,6,-10,6,6,-7,9,-6,-8,-7,6,-1,3,-1,4,-4,3,-2,4,-2,-3,9,-10,4,1,-1,3,2,-7,-10,-6,1,-4,-4,-3,1,5,8,4,3,3,4,5,3,1,-4,-8,8,-10,-10,-9,6,2,-1,-6,-2,8,7,4,-7,3,-3,8,1,-6,-10,-6,10,2,4,8,9,4,1,-3,-2,-2,7,6,10,1,-6,-8,-4,-10,2,-6,3,-6,7,-3,-6,-4,6,1,4,6,10,8,8,-4,-7,-1,4,7,7,-2,6,5,8,8,9,-1,9,5,-1,-8,-1,1,4,-9,-9,-3,-7,-6,6,6,-7,-6,-10,2,10,-8,-8,-8,-6,-5,-8,-9,-9,-1,-7,4,-7,10,1,-7,-1,4,5,-4,-1,-7,9,5,10,-7,-4,-1,-9,-8,-3,3,-1,5,-1,10,-10,-2,-2,-9,2,9,4,8,-1,4,-3,-7,-4,-2,-3,-8,9,2,-4,2,-4,3,-1,3,-9,-5,4,9,-6,4,5,-2,1,-4,6,2,-8,-10,-7,-10,-10,1,7,-3,-10,4,-10,-10,2,-7,-1,-10,3,10,3,-8,-5,8,-6,-6,-1,-4,7,-3,7,9,6,-8,1,10,-6,-6,7,4,6,-2,8,-7,7,6,-7,-3,-4,3,7,-9,2,-5,-1,2,6,-2,9,9,-9,-1,10,9,-3,9,-6,4,-4,-4,-7,-2,-10,7,-4,-7,-1,-9,-4,-5,1,-8,2,6,10,-3,-6,-8,-9,-8,-3,-8,-7,5,5,8,-4,4,6,-4,-10,3,-1,-6,8,-3,-1,3,-8,-9,8,9,-4,10,3,-8,8,-10,-2,9,-10,-1,5,-1,4,-4,-7,-6,7,3,-9,-2,-2,-8,-9,-6,-1,-10,-3,-9,-10,3,7,-8,-7,-4,-2,5,-9,8,-2,-4,1,9,-4,-5,1,-4,9,-3,-3,-3,3,8,-3,-9,1,7,-1,8,-5,2,10,4,-7,8,-4,-4,-10,-9,9,7,-3,-1,-3,10,1,3,7,3,-6,4,1,-7,2,-6,-5,-10,9,5,-10,9,-8,-7,2,10,2,-8,-6,5,-10,-9,-4,-5,10,-5,6,4,-6,10,-2,6,6,6,-6,10,-10,2,9,8,-9,4,7,-1,10,1,-4,3,-8,2,9,-1,-2,-4,-4,4,5,9,7,-5,3,-8,-10,5,-9,-3,10,9,8,-4,-8,-8,-8,5,8,10,-5,-6,-9,-4,-9,-9,2,2,-1,-4,7,-2,-8,-8,-10,-8,9,1,-7,8,-3,-7,-5,6,-7,5,-4,-9,-7,-9,-9,1,10,-8,8,-5,3,5,-10,3,5,1,8,-2,-9,3,9,-6,5,-8,-1,3,2,1,-3,9,-6,-7,-10,-1,-9,9,-8,9,-10,-8,7,-5,3,2,2,-4,-10,3,8,-1,8,-7,4,10,2,-2,-1,-1,-3,-8,2,3,3,-4,-10,1,4,6,5,-1,-6,-7,2,-9,1,-9,-1,7,-10,6,7,-10,5,-8,-4,7,-3,-4,4,-9,-3,8,-3,-8,5,3,-1,-2,10,7,10,-1,10,-8,-1,7,-7,9,-9,5,3,7,-10,10,-10,4,-1,-3,-2,-5,-9,-10,9,-8,-8,-4,10,5,-10,-2,2,-10,-2,-5,-5,-1,3,3,-1,-8,-4,8,-4,6,7,-6,-3,-1,-1,-1,-7,3,4,-9,4,1,-2,2,3,-1,5,9,-4,-4,9,1,8,3,9,4,-3,-3,-6,-2,4,-9,-1,-8,-9,9,-8,3,6,5,-1,-1,5,-9,3,-10,-7,8,7,2,-8,5,5,1,5,-9,4,1,5,10,5,5,-9,9,-8,-4,-6,-4,9,4,-1,2,-6,7,-7,9,7,4,-8,-3,-8,5,-10,-6,-4,4,-5,3,3,3,6,-2,10,10,2,6,-2,5,2,10,-4,-3,3,2,-5,6,9,-4,-5,-8,-8,7,7,-2,5,-3,8,-8,2,-7,-5,10,-10,-6,9,-1,8,8,2,-4,-4,4,5,-3,3,5,10,3,-10,-4,-3,-9,-3,-8,-9,-1,-9,4,-8,10,4,1,-3,-5,-5,5,4,-1,-10,-3,1,-3,1,-6,-4,-2,4,-4,10,-9,8,3,7,-8,-2,10,-5,6,10,-4,-8,3,-10]], dtype = "uint8")#candidate|2470|(1, 2475)|const|uint8
call_2468 = func_949_call(relay.reshape(var_2469.astype('uint8'), []), relay.reshape(const_2470.astype('uint8'), [11, 15, 15]), )
call_2471 = func_949_call(relay.reshape(var_2469.astype('uint8'), []), relay.reshape(const_2470.astype('uint8'), [11, 15, 15]), )
output = relay.Tuple([uop_2461,call_2468,var_2469,const_2470,])
output2 = relay.Tuple([uop_2461,call_2471,var_2469,const_2470,])
func_2480 = relay.Function([var_2460,var_2469,], output)
mod['func_2480'] = func_2480
mod = relay.transform.InferType()(mod)
var_2481 = relay.var("var_2481", dtype = "float32", shape = (3, 1, 7))#candidate|2481|(3, 1, 7)|var|float32
var_2482 = relay.var("var_2482", dtype = "uint8", shape = ())#candidate|2482|()|var|uint8
output = func_2480(var_2481,var_2482,)
func_2483 = relay.Function([var_2481,var_2482,], output)
mutated_mod['func_2483'] = func_2483
mutated_mod = relay.transform.InferType()(mutated_mod)
func_836_call = mod.get_global_var('func_836')
func_838_call = mutated_mod.get_global_var('func_838')
call_2572 = relay.TupleGetItem(func_836_call(), 1)
call_2573 = relay.TupleGetItem(func_838_call(), 1)
output = relay.Tuple([call_2572,])
output2 = relay.Tuple([call_2573,])
func_2585 = relay.Function([], output)
mod['func_2585'] = func_2585
mod = relay.transform.InferType()(mod)
output = func_2585()
func_2586 = relay.Function([], output)
mutated_mod['func_2586'] = func_2586
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1982_call = mod.get_global_var('func_1982')
func_1983_call = mutated_mod.get_global_var('func_1983')
call_2642 = relay.TupleGetItem(func_1982_call(), 0)
call_2643 = relay.TupleGetItem(func_1983_call(), 0)
output = relay.Tuple([call_2642,])
output2 = relay.Tuple([call_2643,])
func_2666 = relay.Function([], output)
mod['func_2666'] = func_2666
mod = relay.transform.InferType()(mod)
mutated_mod['func_2666'] = func_2666
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2666_call = mutated_mod.get_global_var('func_2666')
call_2667 = func_2666_call()
output = call_2667
func_2668 = relay.Function([], output)
mutated_mod['func_2668'] = func_2668
mutated_mod = relay.transform.InferType()(mutated_mod)
func_599_call = mod.get_global_var('func_599')
func_600_call = mutated_mod.get_global_var('func_600')
call_2680 = func_599_call()
call_2681 = func_599_call()
var_2697 = relay.var("var_2697", dtype = "float64", shape = (12, 15, 8))#candidate|2697|(12, 15, 8)|var|float64
bop_2698 = relay.mod(call_2680.astype('float64'), var_2697.astype('float64')) # shape=(12, 15, 8)
bop_2701 = relay.mod(call_2681.astype('float64'), var_2697.astype('float64')) # shape=(12, 15, 8)
output = relay.Tuple([bop_2698,])
output2 = relay.Tuple([bop_2701,])
func_2702 = relay.Function([var_2697,], output)
mod['func_2702'] = func_2702
mod = relay.transform.InferType()(mod)
var_2703 = relay.var("var_2703", dtype = "float64", shape = (12, 15, 8))#candidate|2703|(12, 15, 8)|var|float64
output = func_2702(var_2703)
func_2704 = relay.Function([var_2703], output)
mutated_mod['func_2704'] = func_2704
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1982_call = mod.get_global_var('func_1982')
func_1983_call = mutated_mod.get_global_var('func_1983')
call_2746 = relay.TupleGetItem(func_1982_call(), 0)
call_2747 = relay.TupleGetItem(func_1983_call(), 0)
uop_2748 = relay.cosh(call_2746.astype('float32')) # shape=(1, 15, 8)
uop_2750 = relay.cosh(call_2747.astype('float32')) # shape=(1, 15, 8)
bop_2752 = relay.bitwise_or(uop_2748.astype('int64'), relay.reshape(call_2746.astype('int64'), relay.shape_of(uop_2748))) # shape=(1, 15, 8)
bop_2755 = relay.bitwise_or(uop_2750.astype('int64'), relay.reshape(call_2747.astype('int64'), relay.shape_of(uop_2750))) # shape=(1, 15, 8)
output = bop_2752
output2 = bop_2755
func_2765 = relay.Function([], output)
mod['func_2765'] = func_2765
mod = relay.transform.InferType()(mod)
mutated_mod['func_2765'] = func_2765
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2765_call = mutated_mod.get_global_var('func_2765')
call_2766 = func_2765_call()
output = call_2766
func_2767 = relay.Function([], output)
mutated_mod['func_2767'] = func_2767
mutated_mod = relay.transform.InferType()(mutated_mod)
func_572_call = mod.get_global_var('func_572')
func_573_call = mutated_mod.get_global_var('func_573')
call_2786 = relay.TupleGetItem(func_572_call(), 0)
call_2787 = relay.TupleGetItem(func_573_call(), 0)
func_1803_call = mod.get_global_var('func_1803')
func_1807_call = mutated_mod.get_global_var('func_1807')
const_2801 = relay.const([-5,-6,-3,-8,-7,6,10,-3,1,-8,9,-8,7,4,-10,-1,-9,-1,-5,-1,-10,8,6,-2,-5,7,-4,2,6,3,-7,10,3,-10,-2,9,-7,-4,6,-3,-8,-6,-7,6,-2,-9,3,-7,-3,-5,8,-7,-8,-2,-8,-7,5,-1,-2,6,-5,-5,4,-7,10,2,-5,-5,-9,-9,-9,-3,2,7,-10,9,5,6,-5,8,6,-3,10,-3], dtype = "uint8")#candidate|2801|(84,)|const|uint8
call_2800 = relay.TupleGetItem(func_1803_call(relay.reshape(const_2801.astype('uint8'), [2, 3, 14]), relay.reshape(const_2801.astype('uint8'), [2, 3, 14]), ), 1)
call_2802 = relay.TupleGetItem(func_1807_call(relay.reshape(const_2801.astype('uint8'), [2, 3, 14]), relay.reshape(const_2801.astype('uint8'), [2, 3, 14]), ), 1)
func_1030_call = mod.get_global_var('func_1030')
func_1033_call = mutated_mod.get_global_var('func_1033')
var_2811 = relay.var("var_2811", dtype = "float64", shape = (480,))#candidate|2811|(480,)|var|float64
call_2810 = relay.TupleGetItem(func_1030_call(relay.reshape(var_2811.astype('float64'), [4, 15, 8])), 0)
call_2812 = relay.TupleGetItem(func_1033_call(relay.reshape(var_2811.astype('float64'), [4, 15, 8])), 0)
func_1464_call = mod.get_global_var('func_1464')
func_1466_call = mutated_mod.get_global_var('func_1466')
call_2813 = func_1464_call()
call_2814 = func_1464_call()
output = relay.Tuple([call_2786,call_2800,const_2801,call_2810,var_2811,call_2813,])
output2 = relay.Tuple([call_2787,call_2802,const_2801,call_2812,var_2811,call_2814,])
func_2827 = relay.Function([var_2811,], output)
mod['func_2827'] = func_2827
mod = relay.transform.InferType()(mod)
var_2828 = relay.var("var_2828", dtype = "float64", shape = (480,))#candidate|2828|(480,)|var|float64
output = func_2827(var_2828)
func_2829 = relay.Function([var_2828], output)
mutated_mod['func_2829'] = func_2829
mutated_mod = relay.transform.InferType()(mutated_mod)
func_836_call = mod.get_global_var('func_836')
func_838_call = mutated_mod.get_global_var('func_838')
call_2850 = relay.TupleGetItem(func_836_call(), 0)
call_2851 = relay.TupleGetItem(func_838_call(), 0)
func_1464_call = mod.get_global_var('func_1464')
func_1466_call = mutated_mod.get_global_var('func_1466')
call_2855 = func_1464_call()
call_2856 = func_1464_call()
output = relay.Tuple([call_2850,call_2855,])
output2 = relay.Tuple([call_2851,call_2856,])
func_2866 = relay.Function([], output)
mod['func_2866'] = func_2866
mod = relay.transform.InferType()(mod)
mutated_mod['func_2866'] = func_2866
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2866_call = mutated_mod.get_global_var('func_2866')
call_2867 = func_2866_call()
output = call_2867
func_2868 = relay.Function([], output)
mutated_mod['func_2868'] = func_2868
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1982_call = mod.get_global_var('func_1982')
func_1983_call = mutated_mod.get_global_var('func_1983')
call_2883 = relay.TupleGetItem(func_1982_call(), 0)
call_2884 = relay.TupleGetItem(func_1983_call(), 0)
output = relay.Tuple([call_2883,])
output2 = relay.Tuple([call_2884,])
func_2887 = relay.Function([], output)
mod['func_2887'] = func_2887
mod = relay.transform.InferType()(mod)
mutated_mod['func_2887'] = func_2887
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2887_call = mutated_mod.get_global_var('func_2887')
call_2888 = func_2887_call()
output = call_2888
func_2889 = relay.Function([], output)
mutated_mod['func_2889'] = func_2889
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2910 = relay.constdtype = "float32")#candidate|2910|(13, 13, 13)|const|float32
var_2911 = relay.var("var_2911", dtype = "float32", shape = (13, 13, 13))#candidate|2911|(13, 13, 13)|var|float32
bop_2912 = relay.divide(const_2910.astype('float32'), relay.reshape(var_2911.astype('float32'), relay.shape_of(const_2910))) # shape=(13, 13, 13)
output = relay.Tuple([bop_2912,])
output2 = relay.Tuple([bop_2912,])
func_2915 = relay.Function([var_2911,], output)
mod['func_2915'] = func_2915
mod = relay.transform.InferType()(mod)
var_2916 = relay.var("var_2916", dtype = "float32", shape = (13, 13, 13))#candidate|2916|(13, 13, 13)|var|float32
output = func_2915(var_2916)
func_2917 = relay.Function([var_2916], output)
mutated_mod['func_2917'] = func_2917
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2585_call = mod.get_global_var('func_2585')
func_2586_call = mutated_mod.get_global_var('func_2586')
call_2999 = relay.TupleGetItem(func_2585_call(), 0)
call_3000 = relay.TupleGetItem(func_2586_call(), 0)
var_3011 = relay.var("var_3011", dtype = "float64", shape = (6, 15, 8))#candidate|3011|(6, 15, 8)|var|float64
bop_3012 = relay.logical_or(call_2999.astype('bool'), var_3011.astype('bool')) # shape=(6, 15, 8)
bop_3015 = relay.logical_or(call_3000.astype('bool'), var_3011.astype('bool')) # shape=(6, 15, 8)
output = relay.Tuple([bop_3012,])
output2 = relay.Tuple([bop_3015,])
func_3016 = relay.Function([var_3011,], output)
mod['func_3016'] = func_3016
mod = relay.transform.InferType()(mod)
mutated_mod['func_3016'] = func_3016
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3017 = relay.var("var_3017", dtype = "float64", shape = (6, 15, 8))#candidate|3017|(6, 15, 8)|var|float64
func_3016_call = mutated_mod.get_global_var('func_3016')
call_3018 = func_3016_call(var_3017)
output = call_3018
func_3019 = relay.Function([var_3017], output)
mutated_mod['func_3019'] = func_3019
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2765_call = mod.get_global_var('func_2765')
func_2767_call = mutated_mod.get_global_var('func_2767')
call_3031 = func_2765_call()
call_3032 = func_2765_call()
output = call_3031
output2 = call_3032
func_3036 = relay.Function([], output)
mod['func_3036'] = func_3036
mod = relay.transform.InferType()(mod)
mutated_mod['func_3036'] = func_3036
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3036_call = mutated_mod.get_global_var('func_3036')
call_3037 = func_3036_call()
output = call_3037
func_3038 = relay.Function([], output)
mutated_mod['func_3038'] = func_3038
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2077_call = mod.get_global_var('func_2077')
func_2079_call = mutated_mod.get_global_var('func_2079')
call_3086 = func_2077_call()
call_3087 = func_2077_call()
func_599_call = mod.get_global_var('func_599')
func_600_call = mutated_mod.get_global_var('func_600')
call_3102 = func_599_call()
call_3103 = func_599_call()
output = relay.Tuple([call_3086,call_3102,])
output2 = relay.Tuple([call_3087,call_3103,])
func_3112 = relay.Function([], output)
mod['func_3112'] = func_3112
mod = relay.transform.InferType()(mod)
mutated_mod['func_3112'] = func_3112
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3112_call = mutated_mod.get_global_var('func_3112')
call_3113 = func_3112_call()
output = call_3113
func_3114 = relay.Function([], output)
mutated_mod['func_3114'] = func_3114
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2866_call = mod.get_global_var('func_2866')
func_2868_call = mutated_mod.get_global_var('func_2868')
call_3150 = relay.TupleGetItem(func_2866_call(), 1)
call_3151 = relay.TupleGetItem(func_2868_call(), 1)
func_2866_call = mod.get_global_var('func_2866')
func_2868_call = mutated_mod.get_global_var('func_2868')
call_3166 = relay.TupleGetItem(func_2866_call(), 0)
call_3167 = relay.TupleGetItem(func_2868_call(), 0)
func_2352_call = mod.get_global_var('func_2352')
func_2355_call = mutated_mod.get_global_var('func_2355')
var_3173 = relay.var("var_3173", dtype = "uint16", shape = ())#candidate|3173|()|var|uint16
const_3174 = relay.const([[10],[8],[-10],[-6],[4],[10],[6],[-6],[8],[7],[7],[-2],[9],[9],[-5],[-8],[10],[2],[-6],[-6],[8],[8],[2],[9],[10],[-7],[-7],[-5],[2],[-4],[1],[-1],[7],[3],[-4],[6],[3],[-6],[-7],[-4],[-2],[-3],[-1],[-5]], dtype = "uint16")#candidate|3174|(44, 1)|const|uint16
call_3172 = func_2352_call(relay.reshape(var_3173.astype('uint16'), []), relay.reshape(const_3174.astype('uint16'), [11, 4, 1]), )
call_3175 = func_2352_call(relay.reshape(var_3173.astype('uint16'), []), relay.reshape(const_3174.astype('uint16'), [11, 4, 1]), )
func_1922_call = mod.get_global_var('func_1922')
func_1925_call = mutated_mod.get_global_var('func_1925')
const_3190 = relay.const([6,-5,-7,-2,5,6,8,5,-3,-8,10,-7,-10,8,-6,1,3,10,2,-4,5,10,6,-7,-6,3,-8,6,-3,5,3,1,1,-6,3,-4,2,4,-9,-6,5,-10,-2,-2,-1,4,4,-8,7,9,-5,-10,7,6,-6,-1,-4,5,-7,10,-5,-2,8,-3,-5,6,-5,1,-2,-8,-9,-9,-9,-8,-1,-4,1,-5,-7,5,-1,6,-9,6,1,-10,-2,-5,5,-7,2,-5,9,-3,8,-10,2,3,-2,5,-10,8,-5,-2,8,9,3,4,-1,10,-6,-8,-8,-2,-7,-6,1,10,-6,-6,-6,-4,-8,10,-5,1,-3,-2,8,-1,-10,-4,10,-8,-10,3,-1,4,-5,-9,7,4,8,10,9,-1,-10,-1,-10,-9,5,-6,-8,4,-9,2,4,7,-1,8,-8,-10,-5,-9,1,-7,9,-3,-6,-8,1,-2,-7,6,3,9,-2,-2,-1,-2,-10,-7,2,7,6,-4,7,-3,-4,4,3,-1,-2,10,7,-6,-10,-7,2,4,-1,-8,-4,-5,-9,6,-4,-5,-3,10,8,6,-10,4,-6,1,-7,-6,-9,1,-1,10,-7,2,1,-9,-9,-10,-7,10,-3,3,-1,4,1,7,-2,7,-1,9,-2,-4,-3,-9,-1,6,-9,5,-9,9,-4,-3,-1,-8,-1,6,-5,-4,5,9,-2,9,3,1,-4,-3,7,7,-10,2,-3,-7,-1,5,6,-1,8,-2,-7,-4,-5,1,6,-10,2,10,-2,-4,-1,8,-4,8,2,-4,2,10,-8,9,-9,-2,1,-6,10,6,10,9,-5,-7,-6,4,10,5,-4,-2,3,4,8,9,-2,9,8,-8,-6,10,6,2,-9,-4,3,-6,1,-2,-1,-7,5,7,-6,6,7,-4,9,9,-2,1,-8,-2,6,-8,-3,4,-10,1,5,8,3,-7,7,-10,-8,2,5,-4,6,-10,8,-8,4,-6,7,2,-5,2,-2,1,-1,-5,9,-9,-5,5,-2,2,2,-6,-2,-7,-5,1,1,-9,-6,-9,8,-1,7,-4,9,-7,-6,10,-9,-6,-7,-6,-10,-9,9,-5,-5,10,2,-3,2,4,2,5,-10,-8,10,5,8,10,3,-4,10,2,-8,5,-4,-7,4,8,2,10,9,-4,1,-4,-7,-3,-6,1,10,5,8,10,3,3,-3,7,-10,1,-5,4,-7,1,3,-7,-1,-7,-2,8,-5,3,5,2,-3,7,-7,-9,1,8,-3,9,5,10,4,-5,10,9,-7,5,3,7,-4,-6,8,10,-7,5,6,-9,7,9,3,-5,8,-2,1,-1,-10,1,-1,9,-2,9,-4,-8,4,8,-7,10,2,-6,-3,-9,6,-1,3,-4,-6,4,-1,1,-2,-5,-2,4,-8,7,1,-4,-6,-5,-5,-5,-2,-3,1,-2,-4,4,1,8,-2,1,-10,2,2,-4,-6,9,10,-5,-7,6,4,-7,-1,6,-1,7,-4,7,6,-2,-2,2,-5,3,-4,3,-10,-4,-5,-4,-9,-6,-10,8,6,-10,-3,8,-9,-9,-9,-2,-3,10,7,4,5,-9,-5,-10,-1,9,3,3,8,9,-6,-8,7,9,-2,-10,-5,1,-7,2,3,3,9,-10,-8,4,-9,-5,10,10,6,-10,-8,4,-4,-5,-8,-3,-2,3,1,6,-2,6,-4,6,6,-5,-9,-2,-3,-9,3,7,-4,-7,-10,7,-3,-5,-3,9,9,4,2,10,-2,8,9,-5,6,2,-5,9,3,-9,5,6,3,-9], dtype = "uint16")#candidate|3190|(672,)|const|uint16
call_3189 = relay.TupleGetItem(func_1922_call(relay.reshape(var_3173.astype('uint16'), []), relay.reshape(const_3190.astype('uint16'), [16, 3, 14]), ), 0)
call_3191 = relay.TupleGetItem(func_1925_call(relay.reshape(var_3173.astype('uint16'), []), relay.reshape(const_3190.astype('uint16'), [16, 3, 14]), ), 0)
func_1982_call = mod.get_global_var('func_1982')
func_1983_call = mutated_mod.get_global_var('func_1983')
call_3197 = relay.TupleGetItem(func_1982_call(), 0)
call_3198 = relay.TupleGetItem(func_1983_call(), 0)
output = relay.Tuple([call_3150,call_3166,call_3172,var_3173,const_3174,call_3189,const_3190,call_3197,])
output2 = relay.Tuple([call_3151,call_3167,call_3175,var_3173,const_3174,call_3191,const_3190,call_3198,])
func_3208 = relay.Function([var_3173,], output)
mod['func_3208'] = func_3208
mod = relay.transform.InferType()(mod)
var_3209 = relay.var("var_3209", dtype = "uint16", shape = ())#candidate|3209|()|var|uint16
output = func_3208(var_3209)
func_3210 = relay.Function([var_3209], output)
mutated_mod['func_3210'] = func_3210
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3212 = relay.var("var_3212", dtype = "float32", shape = (2, 12, 2))#candidate|3212|(2, 12, 2)|var|float32
uop_3213 = relay.cosh(var_3212.astype('float32')) # shape=(2, 12, 2)
func_2585_call = mod.get_global_var('func_2585')
func_2586_call = mutated_mod.get_global_var('func_2586')
call_3224 = relay.TupleGetItem(func_2585_call(), 0)
call_3225 = relay.TupleGetItem(func_2586_call(), 0)
func_940_call = mod.get_global_var('func_940')
func_942_call = mutated_mod.get_global_var('func_942')
call_3230 = relay.TupleGetItem(func_940_call(relay.reshape(uop_3213.astype('int16'), [48,])), 3)
call_3231 = relay.TupleGetItem(func_942_call(relay.reshape(uop_3213.astype('int16'), [48,])), 3)
output = relay.Tuple([uop_3213,call_3224,call_3230,])
output2 = relay.Tuple([uop_3213,call_3225,call_3231,])
func_3242 = relay.Function([var_3212,], output)
mod['func_3242'] = func_3242
mod = relay.transform.InferType()(mod)
mutated_mod['func_3242'] = func_3242
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3243 = relay.var("var_3243", dtype = "float32", shape = (2, 12, 2))#candidate|3243|(2, 12, 2)|var|float32
func_3242_call = mutated_mod.get_global_var('func_3242')
call_3244 = func_3242_call(var_3243)
output = call_3244
func_3245 = relay.Function([var_3243], output)
mutated_mod['func_3245'] = func_3245
mutated_mod = relay.transform.InferType()(mutated_mod)
func_836_call = mod.get_global_var('func_836')
func_838_call = mutated_mod.get_global_var('func_838')
call_3269 = relay.TupleGetItem(func_836_call(), 1)
call_3270 = relay.TupleGetItem(func_838_call(), 1)
uop_3274 = relay.log2(call_3269.astype('float32')) # shape=(1, 15, 8)
uop_3276 = relay.log2(call_3270.astype('float32')) # shape=(1, 15, 8)
output = relay.Tuple([uop_3274,])
output2 = relay.Tuple([uop_3276,])
func_3286 = relay.Function([], output)
mod['func_3286'] = func_3286
mod = relay.transform.InferType()(mod)
mutated_mod['func_3286'] = func_3286
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3286_call = mutated_mod.get_global_var('func_3286')
call_3287 = func_3286_call()
output = call_3287
func_3288 = relay.Function([], output)
mutated_mod['func_3288'] = func_3288
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3295 = relay.var("var_3295", dtype = "int16", shape = ())#candidate|3295|()|var|int16
const_3296 = relay.const([[[8,-4,-1,5,-10,-8],[-1,1,-6,-3,1,9],[9,-7,-9,-6,10,-8],[-6,10,-8,-2,-3,-10],[8,-6,-9,8,-3,8],[4,8,1,3,-9,-3],[3,9,-10,5,-10,-8],[-5,1,-9,-9,1,7],[5,1,-6,4,-2,5],[2,10,10,5,2,5],[-2,-6,-4,-9,4,-5],[-4,10,-4,6,7,-9],[1,6,9,7,-10,6],[-6,4,-7,-2,10,7]],[[-9,1,10,-6,-4,-6],[-6,4,-6,9,-9,3],[4,5,9,9,6,7],[9,-6,-8,6,3,-1],[4,2,4,7,3,1],[5,-2,-9,-6,-2,1],[-3,5,9,-7,-7,6],[6,-9,-7,-3,-2,5],[5,10,-2,-9,-8,-4],[-10,9,2,9,3,7],[2,-4,6,-6,1,-8],[4,9,-4,8,4,3],[7,3,2,9,1,-8],[3,8,1,6,-5,-7]],[[7,-5,7,6,10,3],[9,-7,5,7,-1,-3],[-5,8,-5,-1,2,-3],[3,-2,-9,6,7,8],[9,2,-4,-2,2,-9],[7,-9,-5,10,4,-1],[-9,2,-10,-7,-8,9],[-4,1,3,4,9,8],[8,9,2,-6,7,-8],[-8,6,-6,10,-7,5],[-8,-9,2,10,-7,-1],[-1,9,-3,-2,2,9],[-4,7,9,-1,-8,-5],[-10,-10,3,6,-6,-1]],[[4,4,-3,3,1,7],[1,-8,-10,1,7,7],[-1,-6,-9,-10,2,8],[-6,-1,2,-8,9,4],[-8,-9,6,-8,10,6],[1,-2,-7,-8,-1,9],[-8,6,4,7,5,-10],[4,8,2,-5,9,7],[8,-10,-4,-4,-9,-8],[-10,-6,2,8,1,-2],[-1,7,-4,7,-10,1],[-9,6,5,8,10,-4],[7,8,7,3,7,-7],[6,5,2,-2,2,8]],[[6,5,-9,8,-1,6],[-8,-6,-2,-8,-9,-6],[10,4,8,9,8,-1],[3,5,-8,1,-1,-5],[-2,-3,7,-3,-7,-6],[1,-10,9,7,3,-5],[-2,-10,-3,-8,-7,5],[-10,10,-9,4,-4,-8],[8,-7,7,3,-8,2],[6,-8,1,-9,-6,-10],[-9,-3,-1,-8,-6,9],[4,-3,-4,8,7,5],[1,-10,-4,2,-5,6],[7,4,-8,-9,6,7]],[[-8,-10,-10,6,-8,10],[9,5,8,9,-7,1],[9,-8,-1,-4,1,-6],[8,4,-8,-10,-8,-10],[-10,10,-5,3,-10,-8],[-7,9,-6,-10,-7,-2],[3,-4,9,-5,-7,6],[-7,-6,1,7,-6,-7],[3,1,-6,-9,-7,7],[-8,-6,-9,-7,-3,-1],[-6,-4,7,9,3,-2],[-4,-5,5,-8,-6,8],[-7,2,-5,-6,-3,5],[4,-2,1,3,6,-6]],[[-1,1,-9,3,-3,7],[7,-9,4,10,6,-2],[-5,-4,-4,-1,-5,4],[-3,-3,1,-2,-5,-1],[-5,-6,5,9,4,3],[4,-5,-6,4,-6,-4],[6,9,9,10,-3,4],[-6,-9,6,10,-4,8],[4,9,-8,-10,1,8],[1,5,-6,-3,-3,3],[-4,7,8,10,-9,3],[-4,-4,4,8,-1,1],[-1,10,-7,-3,-7,-1],[-8,-8,-1,-4,8,1]],[[-9,-7,-1,8,3,8],[-4,-10,-5,-8,1,-10],[1,-7,-4,-10,1,-3],[-6,-6,2,8,9,9],[-1,5,-6,-4,2,5],[4,-9,5,-7,5,-9],[-1,5,6,-2,-2,9],[-5,-7,6,3,9,5],[3,4,-9,-7,1,10],[7,-4,-10,-8,-8,2],[-7,6,-4,-10,4,5],[7,4,3,3,6,8],[2,1,-1,4,7,-5],[-10,7,9,9,-5,3]],[[-9,-9,-6,2,-5,6],[7,5,9,-6,7,4],[7,-1,8,-2,10,3],[8,-2,10,8,-9,1],[5,6,1,7,5,2],[-1,2,8,7,-3,-9],[-8,-8,10,-2,7,8],[-10,-7,2,-10,-8,4],[10,-9,2,-5,5,-5],[3,1,-7,-9,3,-4],[9,-9,10,10,9,-4],[9,9,-3,10,-2,-7],[1,8,5,-10,9,1],[7,9,3,4,3,6]],[[10,1,9,2,7,4],[5,-6,5,4,-9,9],[8,-3,-9,-8,-7,10],[8,-5,-6,-7,-3,5],[-8,-2,-6,8,4,-7],[-4,-3,-4,6,7,-7],[10,-3,-6,-1,-9,-3],[3,1,5,-4,2,10],[10,-10,-7,9,-2,8],[-1,2,3,-7,9,6],[7,-2,5,7,-6,-2],[5,-10,-2,-6,-9,-6],[-6,-9,-2,-6,4,8],[-10,5,-1,10,-6,4]],[[1,4,-10,4,-3,10],[7,4,6,1,6,-1],[-10,-4,3,6,-10,6],[9,6,1,9,2,9],[5,3,3,8,-4,2],[2,3,-6,-2,7,1],[3,-9,-3,-2,-8,2],[8,-7,-4,-2,-6,-10],[4,-1,9,-10,-2,-9],[7,7,-6,-9,1,-9],[-6,1,7,-8,3,-1],[-1,-7,2,-10,-7,6],[-4,-2,-2,9,-3,4],[4,-9,9,-3,3,-3]]], dtype = "int16")#candidate|3296|(11, 14, 6)|const|int16
bop_3297 = relay.greater_equal(var_3295.astype('bool'), const_3296.astype('bool')) # shape=(11, 14, 6)
func_1883_call = mod.get_global_var('func_1883')
func_1887_call = mutated_mod.get_global_var('func_1887')
const_3304 = relay.const([-4,-3,2,6,5,-6,4,3,6,-9,10,7,1,-9,7,10,-4,-6,7,8,1,-1,10,5,9,-5,3,9,9,-1,-9,8,4,-10,7,-2,-10,5,8,-7,3,-8,-8,-10,-6,-3,-2,8,4,6,6,2,-1,-7,7,8,10,6,-2,4,9,-2,-10,-8,8,8,4,-1,6,-5,-4,3,-8,3,-7,-7,8,-9,2,3,-1,-4,-10,1,-3,-1,9,4,-4,7,-7,10,-4,4,-4,5,-5,-2,6,-2,-10,-7,-8,-8,1,8,8,3,-4,-7,3,8,1,-4,-5,-5,9,6,6,-2,7,-6,7,-8,-8,1,-9,9,1,6,-8,-9,-6,6,8,10,7,10,-5,7,5,5,7], dtype = "int64")#candidate|3304|(143,)|const|int64
const_3305 = relay.const([True,False,True,False,False,True,True,True,False,True,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,False,False,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,True,True,True,False,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,True,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,True,False,False,True,False,False,False,True,True,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,True,False,True,True,True,False,False,True,True,True,False,True,True,False,True,True,True,True,True,True,False,True,True,True,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,False,True,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,True,True,True,True,True,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,False,False,False,False,True,True,False,False,True,False,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,True,False,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,True,True,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,False,True,False,True,True,True,True,True,True,False,True,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,True,True,True,False,False,False,True,False,True,False,True,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,False,False,True,False,False,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,False,False,True,False,True,False,True,True,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,False,False,True,True,False,True,True,False,False,False,True,True,False,False,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,True,True,False,False,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,False,False,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,True,False,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,True,True,True,False,True,True,False,True,True,True,True,False,True,False,False,True,False,True,True,True,True,True,False,True,False,False,True,False,True,True,False,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,False,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,True,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,False,True,True,True,False,True,False,True,False,True,False,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,False,True,True,False,True,True,True,True,False,False,False,False,False,True,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,True,False,True,False,False,True,False,True,True,True,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,False,True,False,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,False,True,True,True,False,False,False,True,True,True,True,True,False,True,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,False,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,True,False,False,True,True,False,True,False,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,True,True,False,False,False,True,True,False,False,True,False,False,True,False,True,True,False,True,True,True,False,True,True,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,True,False,True,False,True,False,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,False,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,False,False,True,False,True,True,False,False,True,True,False,False,True,False,True,True,False,False,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,False,False,False,False,True,True,True,True,False,False,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,False,True,True,True,True,False,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,True,False,False,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,False,True,False,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,False,True,False,False,False,True,True,True,True,True,False,False,False,True,True,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,False,True,True,False,True,True,False,False,False,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,True,False,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,False,True,False,False,True,False,True,False,False,True,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,True,True,False,True,True,True,False,True,True,True,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,False,False,True,False,False,False,False,False,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,True,False,False,False,True,True,False,False,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,False,True,False,False,True,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,True,True,True,False,True,True,False,True,True,True,False,True,True,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,True,True,False,False,True,True,True,False,False,True,True,True,False,True,True,True,True,False,True,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,False,False,False,True,False,False,True,False,False,False,True,True,True,False,False,True,True,True,False,True,True,False,False,True,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,True,False,True,False,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,True,False,False,True,True,True,True,False,True,True,False,True,False,False,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,True,True,True,True,True,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,False,False,False,False,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,False,True,True,False,True,True,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,False,False,True,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,True,True,False,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,False,True,True,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,True,True,True,False,True,False,False,True,False,True,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,True,False,True,True,True,True,False,False,True,False,False,True,True,False,False,True,False,True,False,True,True,True,True,True,False,False,True,False,True,False,True,False,False,False,True,True,True,True,False,True,True,False,False,True,True,True,False,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,False,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,False,True,True,True,True,False,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,True,False,False,False,True,False,True,False,False,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,True,False,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,False,False,False,True,True,True,False,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,True,False,True,False,False,True,False,True,True,True,False,False,False,False,True,True,False,False,False,True,True,True,False,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,False,True,False,True,True,True,True,False,False], dtype = "bool")#candidate|3305|(3360,)|const|bool
call_3303 = relay.TupleGetItem(func_1883_call(relay.reshape(const_3304.astype('int64'), [13, 11]), relay.reshape(const_3304.astype('int64'), [13, 11]), relay.reshape(const_3305.astype('bool'), [3360,]), ), 0)
call_3306 = relay.TupleGetItem(func_1887_call(relay.reshape(const_3304.astype('int64'), [13, 11]), relay.reshape(const_3304.astype('int64'), [13, 11]), relay.reshape(const_3305.astype('bool'), [3360,]), ), 0)
var_3366 = relay.var("var_3366", dtype = "bool", shape = (3360,))#candidate|3366|(3360,)|var|bool
bop_3367 = relay.floor_mod(const_3305.astype('float64'), relay.reshape(var_3366.astype('float64'), relay.shape_of(const_3305))) # shape=(3360,)
func_2480_call = mod.get_global_var('func_2480')
func_2483_call = mutated_mod.get_global_var('func_2483')
var_3377 = relay.var("var_3377", dtype = "float32", shape = (21,))#candidate|3377|(21,)|var|float32
call_3376 = relay.TupleGetItem(func_2480_call(relay.reshape(var_3377.astype('float32'), [3, 1, 7]), relay.reshape(var_3295.astype('uint8'), []), ), 2)
call_3378 = relay.TupleGetItem(func_2483_call(relay.reshape(var_3377.astype('float32'), [3, 1, 7]), relay.reshape(var_3295.astype('uint8'), []), ), 2)
output = relay.Tuple([bop_3297,call_3303,const_3304,bop_3367,call_3376,var_3377,])
output2 = relay.Tuple([bop_3297,call_3306,const_3304,bop_3367,call_3378,var_3377,])
func_3395 = relay.Function([var_3295,var_3366,var_3377,], output)
mod['func_3395'] = func_3395
mod = relay.transform.InferType()(mod)
var_3396 = relay.var("var_3396", dtype = "int16", shape = ())#candidate|3396|()|var|int16
var_3397 = relay.var("var_3397", dtype = "bool", shape = (3360,))#candidate|3397|(3360,)|var|bool
var_3398 = relay.var("var_3398", dtype = "float32", shape = (21,))#candidate|3398|(21,)|var|float32
output = func_3395(var_3396,var_3397,var_3398,)
func_3399 = relay.Function([var_3396,var_3397,var_3398,], output)
mutated_mod['func_3399'] = func_3399
mutated_mod = relay.transform.InferType()(mutated_mod)
func_627_call = mod.get_global_var('func_627')
func_628_call = mutated_mod.get_global_var('func_628')
call_3439 = func_627_call()
call_3440 = func_627_call()
func_836_call = mod.get_global_var('func_836')
func_838_call = mutated_mod.get_global_var('func_838')
call_3445 = relay.TupleGetItem(func_836_call(), 1)
call_3446 = relay.TupleGetItem(func_838_call(), 1)
output = relay.Tuple([call_3439,call_3445,])
output2 = relay.Tuple([call_3440,call_3446,])
func_3450 = relay.Function([], output)
mod['func_3450'] = func_3450
mod = relay.transform.InferType()(mod)
output = func_3450()
func_3451 = relay.Function([], output)
mutated_mod['func_3451'] = func_3451
mutated_mod = relay.transform.InferType()(mutated_mod)
func_572_call = mod.get_global_var('func_572')
func_573_call = mutated_mod.get_global_var('func_573')
call_3454 = relay.TupleGetItem(func_572_call(), 0)
call_3455 = relay.TupleGetItem(func_573_call(), 0)
func_2102_call = mod.get_global_var('func_2102')
func_2104_call = mutated_mod.get_global_var('func_2104')
const_3465 = relay.const([7.972007,2.687511,-8.157355,-2.698624,-5.173242,5.825277,-2.833607,-8.959482,-9.464170,2.991341,-9.749334,2.108178,9.556144,-6.808842,-6.385987,-2.436939,2.662944,1.038616,2.013081,-0.258121,-4.486232,3.608260,-5.140797,-7.205056,-6.420178,-4.953653,-7.474283,4.847333,-5.189758,1.551898,3.017029,-3.986695,6.910737,-7.403225,3.415659,8.687745,8.350579,-0.577176,-7.462516,-2.838319,-3.410964,-8.556901,4.461922,-5.120555,2.184422,-5.865895,9.348272,8.045626,-7.550755,-1.947411,5.958933,1.709781,-2.712300,-0.355829,4.361990,2.697614,5.468638,-5.485779,-2.111059,-4.862064,-4.327881,-8.017630,1.453638,5.579494,-3.367260,3.644951,6.764493,-9.074197,1.406676,-3.214328,8.018653,-9.670174,8.293979,5.782717,-6.415146,-2.405582,-0.926563,-7.249920,-8.807109,-5.830282,9.273251,-4.069120,-4.137047,3.102334,2.098769,-4.091155,4.667350,-3.918110,-6.266071,-9.286465,9.597202,3.399063,-5.357359,-3.969012,3.011529,1.190390,-7.340153,3.593428,-5.149646,-3.648112,2.598515,-9.514353,-2.172640,3.726404,5.196715,3.302629,-6.472541,-9.460388,-5.314134,-5.551574,2.530249,2.463275,3.304985,8.069687,6.479000,-3.098754,-2.135865,2.691319,6.430501,8.286119,7.339745,5.344979,-8.821693,-9.030276,-1.072553,-1.188383,-0.752925,-4.549727,5.076588,6.036496,9.431915,9.331681,-8.638298,-5.935847,2.595733,-2.650145,-1.380055,2.054740,-6.100598,-6.714038,-9.244294,-7.429525,-7.269538,-1.533395,-7.193726,-6.024553,6.773954,-4.982104,-5.254550,2.234687,-9.808327,-0.883264,-2.183100,2.930614,0.189459,2.093143,6.046015,-7.036044,-1.992448,1.522966,-6.411111,7.062877,4.781754,-7.969653,-4.983750,8.231017,2.993827,-5.069219,8.856352,-2.220200,5.297007,-3.972487,-6.662563,-4.800355,-4.917086,8.980047,2.827806,-6.128449,-1.682936,-0.602332,4.844006,-0.025830,-3.917231,-5.437511,-4.975831,-0.623528,-1.117204,-4.112357,-2.309649,-5.480711,-1.001725,3.130518,-0.052106,-6.913865,-6.988263,0.889697,3.096615,8.010873,-1.034894,4.342180,-8.170850,-5.446952,5.262109,3.354748,7.979512,-3.936181,-7.314107,1.937461,0.145168,2.581680,9.285724,3.207854,-7.547459,-5.883376,-4.578305,-7.038195,2.482518,-3.458602,2.376049,-8.913816,9.818783,4.071291,3.976962,-0.805731,-4.684690,-4.073569,-7.247126,-2.588744,-0.350197,-6.156661,3.973839,-0.185418,4.499044,4.069137,-4.074157,-1.949465,-2.538525,7.643450,-2.072309,-2.053597,-9.306625,-6.238171,5.691108,6.626799,7.764642,-1.450820,-3.109931,-2.415729,7.538193,8.541023,7.393007,0.256808,2.008782,3.435296,-1.918362,-9.054911,7.081113,-4.192690,-1.079021,-7.779159,4.036668,-6.792244,4.877141,2.057193,-2.615829,2.032743,-9.702272,2.000129,3.840636,-0.918573,-1.485459,-3.762583,4.888444,-5.591034,7.590998,-5.959413,-2.908067,-0.350761,0.542332,-3.543070,-5.877110,5.415976,6.338002,-8.840308,-3.940417,-0.654895,-1.353452,-5.721180,1.654538,8.554021,5.678253,8.507617,-4.125875,-6.444050,-4.429626,1.914615,-0.358687,8.217304,7.647403,-5.100008,-8.291071,-7.547717,-4.064144,7.999893,-5.569105,-3.917891,-2.328443,4.350637,6.810922,-2.729832,-5.953113,7.826975,-1.080512,-3.354978,-6.088905,7.527113,-5.542419,4.059390,-5.340029,-3.955327,6.600368,4.395701,6.925662,-7.339637,-9.526604,-7.432829,-2.849186,2.532012,-4.477549,-3.749124,-9.166519,-4.265459,-3.574804,3.857383,-1.558996,7.911242,-3.822801,0.764960,4.118345,3.107047,-6.305772,-1.858742,3.450121,8.772821,-6.989814,-0.671700,-7.520673,0.408478,5.442129,9.126135,-0.719435,6.439008,6.412206,-6.290401,3.431602,-4.546977,1.703902,-6.021837,-4.097934,7.806849,-3.619438,-4.076592,-9.362884,5.097071,-4.892607,8.920705,2.300369,-2.660699,0.976889,9.721849,-4.346688,-6.726744,-1.654214,-9.711011,-3.310593,2.819181,2.492534,7.370679,8.584984,6.022770,-4.692555,8.690993,-8.046575,-9.388639,-9.822948,-0.360177,-0.368419,8.416361,4.787895,1.771124,6.680336,-9.172303,-1.053628,-0.986749,-8.817078,-8.405112,-9.423043,-2.769445,8.241295,-9.225223,-1.942583,-4.811405,5.323673,-3.500665,9.896640,-3.428632,-8.186296,8.752145,8.466959,3.348190,-2.818140,-2.189843,2.239265,8.763163,7.027562,-0.810004,-7.936281,-5.190712,-9.319653,-7.029694,4.543866,-9.731823,-2.326939,-7.367684,2.517389,3.903232,6.491596,-8.646649,8.505984,4.206808,1.565790,-2.152812,-0.485234,4.248602,2.427860,-9.067585,5.080202,8.668220,2.350153,7.607527,6.714345,-1.848210,-3.166177,1.981053,-3.530239,-6.432917,-0.584458,9.007459,-8.192534,-3.705688,-9.590507,-4.358768,2.424583,2.877743,7.213614,-3.421696,-2.869120,-3.485529,5.413683,-3.140611,-3.226515,-2.296230,0.638851,-6.464648,-8.981050,-3.494339,1.946251,-8.037018,-1.769917,8.915116,-1.139140,-1.784846,-4.855550,5.401254,-7.430103,7.801983,9.621696,6.382746,7.807747,-2.175656,-4.436257,1.502377,0.646778,8.995200,1.834213,7.307109,-2.081533,-6.390966,-1.425468,-2.562705,8.809856,-6.467619,0.439202,-4.047688,8.871538,6.206407,7.505572,5.274718,-2.909694,-1.334710,-0.742606,-8.432414,7.905531,9.420987,-9.516075,-3.310772,-1.362592,-7.949042,-6.536346,-5.833532,3.359211,-7.659198,-3.910343,6.897949,-7.721528,9.664315,-5.245626,2.058294,-3.715023,7.057470,-7.032475,0.467604,-3.797622,1.055673,-7.401397,-1.242032,9.279491,-1.342655,3.124727,-6.235813,8.037486,-3.058574,2.245792,9.001510,-2.234914,6.628902,-7.968029,0.528657,-7.978398,7.369972,9.204064,7.631738,-8.676850,-4.055854,6.380288,3.005497,-0.104939,-5.385004,6.252587,-9.619344,6.616190,2.101972,-8.635037,-7.298514,0.887053,6.831658,-5.238947,1.001907,-7.727145,-0.334251,-6.813814,-6.111188,2.562878,4.079306,-9.975825,-9.339912,9.425368,0.091182,8.070741,-4.934039,4.773503,2.319969,-0.821175,4.157990,-9.469278,7.329446,1.580202,-3.551907,-2.571503,-1.802646,5.071207,-9.197543,-6.957819,-1.182183,-7.519832,-4.927886,-6.941510,9.543697,-9.923839,1.367077,-6.172145,3.765981,-2.556279,-4.714856,9.197829,5.639785,9.259677,0.031807,5.590849,2.604336,3.726212,7.803599,7.496383,-4.252387,0.723960,7.128745,-9.389527,-0.507905,-7.832103,-2.492714,1.295968,-3.651899,0.056834,-3.702413,1.089547,-8.298235,0.612440,-7.338377,-3.891992,-3.605121,-9.048680,4.968264,-5.009132,1.105130,-5.096671,0.512582,1.780282,8.965853,0.413825,0.093783,4.853205,9.051008,5.232378,-8.240655,0.091482,-9.740784,-0.817987,-6.661167,8.951467,7.294121,1.390084,6.856922,-4.291228,-6.841880,-4.314120,-9.949658,4.979103,-4.941935,9.866546,4.950455,9.255575,-0.528535,4.126936,-2.293532,-0.937426,9.385726,-5.016710,-0.399260,3.289275,5.027475,-0.445950,7.605850,7.315377,-9.813654,-8.134604,1.519350,7.426948,5.651545,0.978665,1.367195,1.475902,1.201030,4.335209,-1.427957,-6.186846,-8.901516,5.038827,8.512566,2.613051,8.650475,3.205070,1.958712,-1.096049,0.243826,3.367866,5.903940,4.497937,-7.288044,-3.170654,3.624811,-4.761479,0.747841,-9.712216,2.534692,7.098789,1.672051,4.810860,6.197053,-6.145551,1.404752,-6.867665,-1.454578,-5.454828,-5.576038,-7.094669,8.488774,-9.276238,-3.973966,7.893699,-2.963386,6.544024,2.915140,2.822861,-1.386633,-1.729723,7.315806,5.082857,-4.525589,-5.385824,-8.702675,4.602289,-5.233115,7.752738,-5.936963,-6.926009,4.707943,-5.733413,-9.438559,9.079639,3.589434,1.923691,-8.298209,9.901848,-4.479851,-4.869534,-1.348564,-4.997724,0.316492,5.343097,0.501032,-8.120185,3.020991,1.684129,-3.942269,9.757341,-6.323716,-1.988548,4.037509,-5.653924,-8.530830,-3.948187,-7.442069,8.140865,-3.413291,7.407693,-5.675388,-0.424977,-2.164429,3.227457,9.224885,7.200963,7.646197,-8.555529,3.154771,-9.819916,8.713419,-6.116057,-9.776443,2.912076,-7.383618,-8.536252,8.104263,7.128120,-9.479928,-6.968183,0.423113,-5.543014,-6.815416,2.936209,6.208201,8.424832,-7.025632,-5.965628,9.326806,-9.776274,-4.386635,-7.604593,5.970850,8.009610,-4.989190,1.848791,0.180243,7.686287,4.196123,0.901100,-4.331204,5.197032,-7.656524,7.441599,-3.599722,-9.139591,-2.251941,-6.614513,-1.065415,-5.894657,3.954694,-3.997485,2.482825,-9.255938,-4.750214,3.665457,-8.490069,0.433419,-9.232840,-8.792869,-4.870202,5.926745,4.924255,9.306288,1.628706,1.945822,2.740139,-7.584881,1.970607,9.202940,-6.305108,-9.141875,-5.458336,-3.469018,7.466177,9.579380,0.553502,-6.250314,-6.750229,-1.280105,8.166021,-0.703822,6.034290,4.621710,-6.644221,-9.728083,4.257884,6.943085,-5.761284,-8.158323,3.517937,-6.005797,-6.690744,8.849986,-5.413161,6.746234,7.599563,-4.401441,-8.859555,6.345512,8.793549,8.749333,1.562996], dtype = "float32")#candidate|3465|(858,)|const|float32
call_3464 = relay.TupleGetItem(func_2102_call(relay.reshape(const_3465.astype('float32'), [858,])), 3)
call_3466 = relay.TupleGetItem(func_2104_call(relay.reshape(const_3465.astype('float32'), [858,])), 3)
func_1948_call = mod.get_global_var('func_1948')
func_1951_call = mutated_mod.get_global_var('func_1951')
const_3485 = relay.const([-8.090626,6.389705,-4.940502,5.838953,-0.001083,8.068066,9.356896,3.801347,0.521126,-8.648540,-8.509144,-1.486923,-6.641970,-4.692341,-4.012602,3.739350,-9.440360,9.420275,-1.834580,-0.500605,7.369371,-5.424118,6.375350,5.762785,3.143113,0.232846,-5.978003,7.606768,-9.678462,6.240634,9.943741,-7.004447,3.911398,-0.051693,-9.575953,-1.470727,-2.098416,-0.514538,-0.625244,1.528942,-0.109280,7.874653,-9.204225,9.086193,-1.956728,1.848194,0.612440,-5.405928,2.688110,-6.308818,0.881505,1.352302,6.682783,-9.822651,-4.296913,-3.682013,-1.345820,7.685899,-0.461852,6.297452,3.032812,5.270047,-4.972061,7.094923,-7.231657,-0.377052,-1.809042,-2.850956,3.121133,6.615196,-8.080584,-9.210433,-2.824679,8.573587,-5.780790,5.762648,7.716028,-2.942834,-7.625448,-6.325743,-7.528967,1.373532,-4.851506,-6.677656,-9.257786,1.485048,0.556924,0.588129,-3.082382,0.969430,7.621898,-3.420645,0.871002,1.822067,7.812944,-9.428530,-3.373939,-8.895753,7.997504,-3.630294,0.766801,-7.039068,-6.742974,-1.397756,-0.636315,3.676934,-9.630882,1.453622,4.470978,-0.621943,-4.909787,-3.896412,-6.808735,1.175944,0.938361,8.028709,-2.739309,-6.535215,1.849167,5.234491,-1.707739,9.250924,-8.203245,-9.333780,5.263264,-3.243442,2.168326,-6.791401,-4.975386,-7.022034,-8.865861,-9.413219,1.413734,1.984410,8.317644,4.054643,8.215721,-8.542157,3.903846,7.534731,6.788679,-6.171267,-1.796326,-3.983181,-1.012723,9.388494,-2.730732,9.901456,-0.281983,-6.124014,5.118263,5.292724,6.932370,8.982253,-4.824881,1.732623], dtype = "float32")#candidate|3485|(156,)|const|float32
call_3484 = func_1948_call(relay.reshape(const_3485.astype('float32'), [2, 6, 13]))
call_3486 = func_1948_call(relay.reshape(const_3485.astype('float32'), [2, 6, 13]))
func_2077_call = mod.get_global_var('func_2077')
func_2079_call = mutated_mod.get_global_var('func_2079')
call_3496 = func_2077_call()
call_3497 = func_2077_call()
func_2102_call = mod.get_global_var('func_2102')
func_2104_call = mutated_mod.get_global_var('func_2104')
call_3501 = relay.TupleGetItem(func_2102_call(relay.reshape(call_3464.astype('float32'), [858,])), 0)
call_3502 = relay.TupleGetItem(func_2104_call(relay.reshape(call_3464.astype('float32'), [858,])), 0)
output = relay.Tuple([call_3454,call_3464,const_3465,call_3484,const_3485,call_3496,call_3501,])
output2 = relay.Tuple([call_3455,call_3466,const_3465,call_3486,const_3485,call_3497,call_3502,])
func_3504 = relay.Function([], output)
mod['func_3504'] = func_3504
mod = relay.transform.InferType()(mod)
mutated_mod['func_3504'] = func_3504
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3504_call = mutated_mod.get_global_var('func_3504')
call_3505 = func_3504_call()
output = call_3505
func_3506 = relay.Function([], output)
mutated_mod['func_3506'] = func_3506
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3286_call = mod.get_global_var('func_3286')
func_3288_call = mutated_mod.get_global_var('func_3288')
call_3522 = relay.TupleGetItem(func_3286_call(), 0)
call_3523 = relay.TupleGetItem(func_3288_call(), 0)
func_627_call = mod.get_global_var('func_627')
func_628_call = mutated_mod.get_global_var('func_628')
call_3526 = func_627_call()
call_3527 = func_627_call()
func_2765_call = mod.get_global_var('func_2765')
func_2767_call = mutated_mod.get_global_var('func_2767')
call_3528 = func_2765_call()
call_3529 = func_2765_call()
uop_3537 = relay.exp(call_3526.astype('float32')) # shape=(1, 15, 8)
uop_3539 = relay.exp(call_3527.astype('float32')) # shape=(1, 15, 8)
output = relay.Tuple([call_3522,call_3528,uop_3537,])
output2 = relay.Tuple([call_3523,call_3529,uop_3539,])
func_3542 = relay.Function([], output)
mod['func_3542'] = func_3542
mod = relay.transform.InferType()(mod)
output = func_3542()
func_3543 = relay.Function([], output)
mutated_mod['func_3543'] = func_3543
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3546 = relay.var("var_3546", dtype = "float64", shape = ())#candidate|3546|()|var|float64
const_3547 = relay.const([[[3.618007,-0.148098,3.509444,-7.275592,-5.733506,-9.672634,-1.837417],[9.278136,-1.293396,-2.557626,-7.044008,1.040907,2.004721,0.250920],[8.834090,-6.152376,1.801213,-7.751812,-6.340666,-9.419279,6.009093],[-1.203250,8.455035,6.442121,-3.835831,-0.761381,8.896010,6.353210],[-5.135747,2.818261,9.685803,-7.890011,5.375913,6.998773,4.715132],[-6.894754,-1.931491,9.258099,-5.844035,-8.545799,-8.309459,5.300748],[-9.981281,1.039475,1.510704,-3.584724,-2.952772,1.411322,-8.074634]],[[9.695388,1.946040,-7.870359,-5.978072,4.483738,6.433536,7.000969],[-1.705909,4.868343,-1.418308,9.013341,0.152990,-1.522350,-1.730454],[9.336115,0.834307,-8.773226,-2.842699,-1.703141,-6.868071,-6.892113],[0.137702,-2.603014,-9.762134,2.977731,-7.630657,9.825447,-1.258781],[0.125015,2.490103,8.021525,-3.591118,6.604034,9.350802,2.722609],[1.938953,4.423687,-2.501425,-3.179737,9.765699,3.116644,-8.738528],[1.092318,-8.423342,9.207424,-0.435790,-4.216377,4.188866,8.199267]],[[-2.723947,-2.691566,-6.632738,-3.228848,5.192279,-0.739377,-8.536762],[-6.279182,-7.039182,-5.823562,8.152685,-2.110897,-6.207373,-5.752599],[8.641380,-0.626320,-1.911177,9.307328,-1.065645,9.044146,8.447640],[-9.419596,5.008094,-9.393810,2.360126,3.813906,0.673420,-9.080475],[-0.067648,5.607496,-7.747274,7.378947,-0.677480,-6.955601,7.885296],[7.499190,8.518958,-5.388059,-5.079320,-1.310791,6.635112,-4.114761],[6.009384,0.907717,3.924452,3.501248,-5.556598,5.507093,-1.967328]],[[-4.008884,2.074356,-3.674972,9.205631,-4.555219,2.539367,7.734020],[-6.609125,3.861361,-0.837146,6.738780,8.301630,-9.463664,-4.606304],[5.331417,8.024807,-2.058887,8.904156,7.482999,5.987018,-4.102561],[-2.121567,-9.621440,-5.399806,-8.202374,-0.793919,-8.640279,4.129735],[4.566780,-1.726818,-8.727349,-5.110102,9.592379,2.596702,3.638125],[-2.765131,6.086242,0.070606,1.246344,-3.254080,1.961874,2.283106],[-2.218385,-8.755324,-8.261786,-4.392477,-2.843759,3.016071,-2.906694]],[[-3.035984,-8.550197,-5.440573,7.441435,7.968537,1.580345,-6.152165],[-1.536747,-0.535621,-9.843209,-9.315399,-3.178247,2.885060,-4.880081],[-6.951372,3.960546,-5.037724,4.729210,-6.217998,-4.222483,9.999462],[1.329719,-9.860852,3.174948,-9.389537,3.211370,7.828470,-2.749549],[-0.230910,2.336894,5.777407,2.577289,-9.051599,-1.493679,4.020174],[-5.836263,-3.811962,7.125987,3.411406,-6.931009,-3.735377,4.048317],[2.766575,8.984927,-7.803021,-1.974135,7.304414,6.929773,-3.661915]],[[-6.634239,-3.417609,-5.485245,-6.504539,-1.131957,-9.732957,-9.179492],[-9.470717,-5.584159,0.502697,-2.070181,1.108359,9.855334,-0.381125],[-5.974434,3.507090,3.634533,-9.234980,-6.510947,2.153322,-8.243022],[3.907775,-9.349085,-5.818683,6.118272,-1.539163,8.723283,-1.645732],[8.430204,7.784004,0.195991,-1.107034,4.458937,-9.413949,-4.863952],[-1.518880,-2.135593,9.032041,1.900936,4.606920,5.457552,-9.170971],[8.566525,4.361722,-8.812429,8.482880,9.064490,-3.094763,-9.571949]],[[9.175785,-1.846527,9.321268,4.204711,7.657461,0.788608,-2.280854],[0.596238,8.153143,4.885147,8.554870,-9.886936,-8.370542,-2.502006],[-0.686668,0.633267,4.362463,9.765953,-5.057737,3.762355,7.528923],[2.928943,5.474118,0.096133,6.163909,-7.142340,-0.928205,0.712098],[-6.198373,1.556166,-6.947722,-3.335826,-3.914841,8.086014,9.242973],[-4.783131,3.316414,-2.781940,-4.622883,7.075251,-5.746151,-4.593404],[-2.594188,7.633411,-8.375873,4.577147,-6.469714,-2.210388,5.990964]],[[1.623935,1.612803,-8.583647,9.346192,0.765122,-0.915973,-3.766135],[-1.899291,5.205652,-6.853080,-8.090738,0.233806,-6.056691,2.402690],[-8.768012,-6.541083,0.997735,1.987907,-8.024785,-4.117784,2.382304],[-2.239042,-7.759450,-0.718509,-8.105836,-6.331833,9.328766,-6.534622],[7.825891,8.565333,9.312361,-1.176824,6.052394,-4.078192,-4.514901],[1.745828,0.207988,2.543085,5.417720,7.120377,3.776679,-4.218281],[1.128039,-8.185072,-8.732283,-8.876271,0.668903,2.824846,-7.965159]],[[-6.315796,-7.786334,-7.201711,0.367673,5.433733,-9.075206,-2.098441],[4.791893,-1.031321,-6.197737,5.184198,-7.303679,-7.418230,-8.745663],[-0.913154,2.837760,-8.148852,7.455034,3.915529,-5.361201,3.589884],[7.783846,-6.645188,-4.381613,9.854935,1.839239,5.033863,-0.710361],[7.237284,0.089728,9.572059,-6.545468,4.675400,1.628797,9.296491],[0.266498,-6.904525,-2.837401,6.784197,6.579819,1.506990,-1.229797],[6.798098,-6.912068,5.375506,-9.967980,-6.985262,-3.802670,-6.160785]],[[-5.928885,-7.414414,-0.232784,-9.128278,4.228769,6.510380,-8.362359],[-0.806427,-3.353228,3.546263,-8.583612,-8.987787,-4.791754,-4.356913],[-5.770793,-6.417618,-9.595681,3.140518,9.756691,0.620800,1.195454],[0.882267,-5.886240,-2.835148,1.863988,2.185682,3.799201,5.499510],[6.777519,-8.811198,-0.112918,-2.890642,7.366937,-5.348317,-5.993459],[-6.090796,-5.139124,1.539137,8.921220,4.447341,-8.118588,-7.617545],[8.916590,1.636767,3.536782,-4.993613,-7.684912,-9.572406,-2.573251]],[[-6.388159,1.191728,4.872436,-5.663136,-0.984415,-8.890532,2.650659],[-8.053064,-3.224462,5.009846,-1.065290,-6.820050,-6.231470,-5.495390],[-9.398878,7.464473,0.096821,2.785740,1.325315,3.434554,3.701241],[0.410033,-5.740893,7.944583,1.448931,-2.058232,7.608824,0.227415],[7.643653,3.554270,-6.187922,-6.453262,9.524437,-4.932343,-1.280505],[-4.198279,-9.367214,-0.108644,2.752340,1.010326,-9.911308,1.942316],[-2.159413,3.090871,-7.146150,-8.068036,-8.175205,-2.908923,-6.536558]],[[-7.596546,-0.540310,1.103836,-9.204517,-3.494233,9.573835,5.138209],[6.213875,0.965264,3.589945,-4.785779,6.610976,-6.314271,7.745487],[7.975433,-6.849180,-0.534905,-9.208010,5.660692,0.374899,0.863340],[5.725441,-1.534383,8.823220,6.964810,0.387161,-9.285907,-6.799676],[-0.346330,2.246043,4.972918,3.380583,-8.114125,5.733602,-3.810417],[5.469666,3.546131,-8.085772,-2.868951,-7.982090,-7.917025,7.449513],[-2.865262,-3.387041,7.734887,8.353041,4.507525,8.979529,-0.462095]],[[8.480822,6.680427,-4.371848,1.969562,3.614924,-6.201931,4.557724],[5.389777,4.118065,-2.103536,-5.759945,1.452262,9.635406,-3.619552],[6.697793,3.316069,5.415305,7.972710,-0.506651,9.571007,-8.013970],[2.688153,-0.021847,-1.294626,-4.056597,3.042733,2.905649,-9.469132],[0.649957,3.751352,-2.830497,8.303166,1.841929,1.613594,-1.884788],[4.048230,9.845327,-7.945829,8.766431,7.871581,-0.056449,-4.642631],[-7.648107,-4.894184,5.862752,-2.599584,-5.209173,-2.057148,-3.470733]],[[6.521626,-4.920881,-8.904298,2.241452,4.386362,7.932205,7.624835],[-2.980041,6.704884,-1.834067,-8.000283,9.165485,8.337079,4.022282],[-1.048706,-2.724855,-6.894228,-9.798279,-9.387127,2.819463,9.692679],[-1.708402,-3.506189,-3.972943,5.890289,9.051371,1.410935,-1.576845],[7.627563,-6.174467,-8.840694,3.499603,3.976915,5.890419,-6.943274],[9.993710,8.252961,-4.772327,-1.763930,-5.979934,8.580641,-2.822635],[-5.652961,-6.042966,-6.104427,6.539173,0.679397,9.904401,7.337448]],[[-3.744515,2.519311,1.416537,5.087423,0.414700,-1.933178,-9.492744],[7.098019,-5.729394,0.788870,1.755966,8.056900,-0.566129,-1.820844],[1.520372,-4.051684,0.649649,-2.368933,1.311375,-8.834777,3.510851],[-6.588445,-5.455456,-7.834272,6.197256,4.216893,2.226416,-9.093269],[2.207326,5.815270,-1.735420,-2.460347,-8.631068,-8.421715,5.236113],[-8.061027,0.098409,-0.442343,-2.238480,9.857387,-2.323374,9.480760],[5.413051,-2.787532,-1.574033,-6.461762,6.309230,-6.774708,1.857304]],[[3.470626,5.962760,8.429723,-0.835316,-2.331263,3.345556,8.143890],[5.426465,5.215415,-9.606716,0.047453,-1.568126,1.360170,4.630534],[4.595347,-5.606113,0.368621,-6.872301,-4.774563,-2.589274,7.436631],[-1.515220,0.825971,6.477497,6.754207,-9.286058,-0.258752,-4.048290],[7.182354,8.424480,-9.382001,1.894853,7.669223,-4.264660,8.625075],[8.265780,-8.133951,3.714179,9.562961,6.334925,-2.839690,2.539023],[-0.254338,-0.340413,8.372703,-5.305694,9.165265,0.400492,6.709746]]], dtype = "float64")#candidate|3547|(16, 7, 7)|const|float64
bop_3548 = relay.floor_mod(var_3546.astype('float64'), const_3547.astype('float64')) # shape=(16, 7, 7)
func_746_call = mod.get_global_var('func_746')
func_748_call = mutated_mod.get_global_var('func_748')
const_3557 = relay.const([-2.760585,7.869612,-2.806399,2.161664,8.161541,9.636447,1.221167,-9.354849,-8.875033,0.201926,7.763649,-4.887246,-6.052717,-1.320713,0.134692,-7.404370,7.807696,-5.270653,-4.853740,7.388874,-7.606505,-8.774098,-9.486367,-6.083279], dtype = "float32")#candidate|3557|(24,)|const|float32
call_3556 = relay.TupleGetItem(func_746_call(relay.reshape(const_3557.astype('float32'), [2, 2, 6])), 0)
call_3558 = relay.TupleGetItem(func_748_call(relay.reshape(const_3557.astype('float32'), [2, 2, 6])), 0)
func_1063_call = mod.get_global_var('func_1063')
func_1065_call = mutated_mod.get_global_var('func_1065')
var_3572 = relay.var("var_3572", dtype = "float64", shape = (600,))#candidate|3572|(600,)|var|float64
call_3571 = relay.TupleGetItem(func_1063_call(relay.reshape(var_3572.astype('float64'), [5, 15, 8])), 0)
call_3573 = relay.TupleGetItem(func_1065_call(relay.reshape(var_3572.astype('float64'), [5, 15, 8])), 0)
func_2765_call = mod.get_global_var('func_2765')
func_2767_call = mutated_mod.get_global_var('func_2767')
call_3603 = func_2765_call()
call_3604 = func_2765_call()
output = relay.Tuple([bop_3548,call_3556,const_3557,call_3571,var_3572,call_3603,])
output2 = relay.Tuple([bop_3548,call_3558,const_3557,call_3573,var_3572,call_3604,])
func_3622 = relay.Function([var_3546,var_3572,], output)
mod['func_3622'] = func_3622
mod = relay.transform.InferType()(mod)
var_3623 = relay.var("var_3623", dtype = "float64", shape = ())#candidate|3623|()|var|float64
var_3624 = relay.var("var_3624", dtype = "float64", shape = (600,))#candidate|3624|(600,)|var|float64
output = func_3622(var_3623,var_3624,)
func_3625 = relay.Function([var_3623,var_3624,], output)
mutated_mod['func_3625'] = func_3625
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3635 = relay.const([[[-2.316594,-9.249122,-8.582065,-9.443525,7.040905,-3.003554]],[[9.823997,5.850116,8.125310,-2.074633,-3.443539,-7.276537]],[[-7.752099,4.973112,-0.513710,4.110078,-3.802748,-1.284540]],[[-0.880970,-8.920526,-9.149303,5.700459,3.322933,6.634298]]], dtype = "float32")#candidate|3635|(4, 1, 6)|const|float32
uop_3636 = relay.acosh(const_3635.astype('float32')) # shape=(4, 1, 6)
func_2765_call = mod.get_global_var('func_2765')
func_2767_call = mutated_mod.get_global_var('func_2767')
call_3647 = func_2765_call()
call_3648 = func_2765_call()
uop_3650 = relay.acos(uop_3636.astype('float64')) # shape=(4, 1, 6)
bop_3663 = relay.not_equal(uop_3650.astype('bool'), relay.reshape(const_3635.astype('bool'), relay.shape_of(uop_3650))) # shape=(4, 1, 6)
output = relay.Tuple([call_3647,bop_3663,])
output2 = relay.Tuple([call_3648,bop_3663,])
func_3666 = relay.Function([], output)
mod['func_3666'] = func_3666
mod = relay.transform.InferType()(mod)
mutated_mod['func_3666'] = func_3666
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3666_call = mutated_mod.get_global_var('func_3666')
call_3667 = func_3666_call()
output = call_3667
func_3668 = relay.Function([], output)
mutated_mod['func_3668'] = func_3668
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1398_call = mod.get_global_var('func_1398')
func_1400_call = mutated_mod.get_global_var('func_1400')
call_3674 = relay.TupleGetItem(func_1398_call(), 0)
call_3675 = relay.TupleGetItem(func_1400_call(), 0)
const_3677 = relay.const([[[6.279204,9.898619,-9.060758,-7.042950,-1.121981,8.436212,2.302614,-8.229647,2.045644,-3.935228],[5.354787,5.076229,2.832624,-8.326292,8.945924,-5.642945,0.086487,-1.664937,-2.100382,0.217346],[-4.552727,-5.996502,3.728364,2.227979,-6.529651,8.179487,-3.900522,5.059990,-4.083169,-3.525817],[7.764815,-3.138556,-3.762145,-8.901064,3.022095,-9.090671,8.696824,7.151843,1.670615,9.332301],[0.422424,-3.841316,0.103310,4.923482,3.841289,5.219326,1.633674,9.094731,-1.890932,-7.542302],[-7.044560,5.588612,8.479498,-4.850178,5.740195,2.480154,-9.656961,7.116986,2.647895,1.454782],[-4.730307,-3.814017,0.472492,-2.315903,3.769402,8.864046,7.087672,2.280394,-3.792626,1.737095],[7.332757,-9.174807,-5.010854,-0.909819,-2.174256,-9.777042,-0.663102,-1.611942,0.273358,-7.085953],[-2.758139,-6.602648,-8.251128,-7.392762,9.724951,9.555751,-7.997124,5.053633,1.753915,3.943273],[7.747277,-1.122874,-2.815827,0.519635,3.820790,-3.822593,-2.491345,2.783084,0.445262,4.644824],[-0.966578,2.871056,-9.886408,4.661237,-9.150136,3.459321,3.561795,-7.897493,3.651390,9.802371]],[[7.987560,-4.491509,-1.957697,-3.115689,1.197458,-4.396205,-8.408301,1.448913,-2.092974,-9.191648],[7.972634,5.591905,-3.171299,-2.859175,3.611624,-7.385192,5.266374,-8.453495,7.035952,1.136345],[-6.426918,-1.960149,-6.768621,8.892029,-5.170350,1.564475,-4.632739,-7.226523,-4.391928,-3.525031],[-7.579005,-2.290422,5.165943,5.828461,-9.779593,2.427003,7.850511,5.124931,9.185648,-0.427752],[5.548088,7.522056,-1.358545,-4.693528,-6.935755,7.132528,4.063530,3.939412,-2.361691,5.818537],[5.950858,-8.004721,-5.349573,-4.742396,-2.753524,-4.471081,1.909694,9.296780,6.289952,-7.442776],[-9.606809,0.614418,-8.107758,-5.909032,2.713949,5.411762,6.398283,7.146112,2.006324,8.988280],[9.127407,8.515082,-9.523857,-7.317333,-4.213515,8.790356,-6.494162,5.761386,1.505748,-5.572702],[3.311215,-4.509030,2.218331,0.621309,9.962243,-4.694024,-5.101299,8.937540,5.399031,-5.586689],[1.496564,-2.118170,-2.582694,-8.576029,-3.685311,9.363111,-0.306671,-6.080460,4.186641,-6.743934],[-7.404867,1.455682,7.923042,1.439136,6.053187,-0.227761,-6.095750,-7.917683,-1.063964,-3.474113]],[[2.479700,5.091448,6.592467,7.086493,9.219744,-1.362880,8.059719,-7.500212,-1.355810,1.215300],[0.149232,-9.067173,-8.527191,3.535515,5.383703,9.266644,9.026875,-9.371857,-9.029049,2.788425],[-2.835427,-2.814170,-3.198402,-5.392106,-7.759749,-7.948028,9.075026,0.980079,6.447240,9.607804],[2.109763,-9.248015,3.189319,3.639014,-2.763091,8.082468,-6.873554,-5.714436,-0.936114,-9.693705],[-1.844333,-6.595750,8.258084,-3.845921,-4.567325,-7.160772,-4.770238,-7.050813,2.709589,-8.979712],[6.916232,-0.953658,2.404070,-7.508260,6.685022,-9.274365,1.545015,-1.169901,4.400525,8.617983],[-6.600219,3.552017,-7.593581,-6.320881,9.282853,-5.526787,-8.758127,4.305880,0.931378,6.212075],[-1.736933,1.709929,-2.135454,-1.402234,-8.786314,-0.638569,1.715549,0.849613,0.763840,-9.327190],[-4.167719,7.496904,0.996140,-5.488666,-7.109083,-7.353660,-9.068158,-0.289042,2.107706,-9.356320],[1.959290,-2.974374,-8.550270,-5.768022,8.967413,-2.014515,8.743912,-0.921988,-9.931091,-8.385059],[-9.331269,1.909549,-2.678940,1.133492,3.328309,1.200964,-1.763653,5.713587,0.185159,0.641554]],[[-9.803249,1.966928,3.252743,0.246391,-9.503669,6.129401,-9.666177,4.299772,-1.038199,-9.666286],[-8.947890,-0.080783,8.204810,1.839590,-1.403431,9.615917,1.597083,-2.186773,-9.560733,-6.396213],[0.516505,1.834026,8.715010,-1.679011,3.370473,6.324541,-9.229985,0.790025,1.732932,5.826776],[9.175105,8.905527,9.414674,2.989493,6.174361,-7.346044,1.385864,-0.371781,1.447656,0.198994],[0.087903,-2.520872,-4.348677,9.687262,8.790075,8.087822,5.262418,6.703888,8.271651,-0.118024],[-2.931159,0.417862,-3.373076,-8.460291,5.855631,-7.810076,-6.006102,-4.738644,-0.998565,9.067573],[-0.778364,-0.993656,3.834561,-8.323461,7.118510,1.266200,-5.549996,0.663726,-1.280784,-9.696130],[5.603631,-4.984764,4.972029,6.166831,-4.615924,9.586601,8.091782,-8.466023,8.046472,8.966677],[7.266460,3.523367,-4.357012,-1.783537,-4.953800,-0.302997,1.046677,-2.558022,9.074488,7.038835],[-0.836601,6.288954,-3.410132,-0.583925,-0.002052,-3.377383,-1.535741,0.060756,6.908419,2.043823],[-7.763267,0.795415,-6.682270,2.731524,2.607565,0.039390,0.748274,-8.309379,-4.744019,-9.520341]],[[-4.851746,-4.435717,-2.260599,6.183106,7.795662,8.504190,-7.781867,6.494323,-9.906418,5.133724],[5.330573,3.266886,1.339755,9.135754,-8.394453,-7.248831,-7.912270,6.969795,8.763742,-9.464650],[8.317924,-4.150058,0.139607,-8.824593,-9.824380,3.016243,-1.788076,8.741265,-6.122818,9.883885],[-9.545433,-7.882185,-7.259441,1.909455,-3.488447,-9.564913,5.655521,-6.664361,9.736246,2.100025],[-9.812908,7.241241,8.928956,-4.423601,0.877788,1.132204,9.193557,1.192525,7.817316,9.723096],[-6.519421,-4.124507,4.594534,-6.670765,1.246096,-8.615984,3.227258,9.303388,-2.843720,-7.912268],[6.751610,7.971792,4.078112,9.437616,7.124129,1.887764,-1.242221,-3.188534,-9.584172,-8.731490],[-5.192027,0.505772,4.137422,-9.830970,-0.260998,4.471332,-5.160411,-4.402034,3.252779,6.292831],[8.177855,3.618261,-0.181496,3.629289,-4.230450,-4.741257,-2.758901,-7.968142,-5.352591,-2.540386],[-6.658396,5.525477,-4.099346,-8.445908,3.620702,4.281501,-4.643013,-5.731315,-5.513380,4.638142],[-7.492727,4.422231,5.724817,-4.295428,-4.321307,-9.659000,-4.816296,-5.176460,-6.120577,0.220709]],[[-3.193038,-2.108068,1.384465,1.273106,-3.628264,-8.043725,-7.112024,0.948346,-7.295169,-2.022462],[-6.711813,0.108756,-9.055608,-2.020601,-9.611766,-5.177126,-4.520665,-3.854134,6.770861,2.885939],[-6.263647,-4.541853,9.589219,2.893198,8.544219,-6.117197,-8.642227,2.071391,3.371183,9.302030],[7.239934,-4.768706,-2.914051,8.415165,-0.834221,5.887731,-4.683810,-7.779587,-3.135436,0.462842],[2.220242,6.163642,9.552974,-7.274579,-2.179641,7.506919,1.662124,3.931669,-5.733131,3.457259],[4.420553,1.363000,8.860439,4.777319,3.888172,6.856460,5.597478,3.065881,0.253785,0.015816],[7.025854,7.042964,8.766821,7.615953,5.190937,-6.285339,0.009689,2.214615,6.334695,-1.737556],[9.484153,5.888706,0.591924,-0.482780,-9.794731,-7.897424,-3.604435,-1.546869,6.390769,8.015674],[8.959305,0.666152,3.614534,5.633587,-4.902278,-3.493869,6.615651,-6.758589,-9.410857,-0.736960],[-7.196380,-7.019835,-4.935880,-3.264458,-6.829718,1.736799,-1.976125,5.657922,0.050484,-5.426047],[-8.306879,3.326583,4.271531,-0.400204,-8.967587,-6.881807,-7.039339,6.130936,-1.850372,-8.208434]],[[2.724492,-9.121864,-8.043850,-0.014122,-9.705929,1.086916,6.482001,-5.202190,-2.581629,-1.932999],[0.524427,-4.045665,5.131920,0.707361,7.261732,2.940519,1.382668,-1.467853,8.748273,0.128671],[-6.698704,-7.618271,6.251552,-6.606926,-6.758764,8.399529,2.587703,0.956758,9.481233,-5.968010],[-4.904543,-6.493776,5.619577,4.524723,2.722423,-0.863861,-7.354504,4.128854,-7.043844,3.278043],[-3.288162,-2.368402,-5.579365,-2.602717,-7.265157,5.248664,-0.294944,-4.894343,-0.082653,-4.979331],[-1.157880,8.611675,-7.365828,0.675676,-6.948793,2.386570,9.394529,6.208462,4.544407,5.462698],[-0.677888,-7.243236,-5.504979,9.323687,-0.824297,-9.660880,-1.768836,2.704911,-1.625787,4.859763],[-3.497051,1.311357,2.288190,4.446115,0.209132,-0.920501,9.661412,-9.226527,-5.558218,0.681422],[-6.048158,3.684788,8.820322,5.300271,8.230739,3.928624,3.392648,0.275737,3.502145,9.911959],[-6.842651,-9.700904,-4.968839,5.870757,-1.451761,4.436525,7.045725,-1.443630,-6.610145,-9.168830],[-6.482672,2.398631,9.038549,-6.694239,5.592020,6.525296,-1.247605,-3.165222,-6.379945,4.590043]],[[-7.506575,8.494408,3.855442,-5.613280,4.875461,-5.523172,-2.213028,8.476109,-2.543368,-4.367805],[9.886273,0.401883,-0.476476,-5.352427,-5.437025,3.371534,8.825749,-2.413663,-3.454091,-5.182129],[6.164694,-8.624631,-4.198636,3.229836,2.178060,-8.957046,6.755738,-9.616959,2.914495,6.413077],[-6.742877,-2.883580,9.578726,3.438422,-5.341442,-1.628117,-5.454642,9.616182,-7.218222,3.700186],[4.419236,1.848315,-6.466501,-6.927074,-7.800599,6.906283,-3.973589,-1.224716,-8.514903,-0.343321],[6.337060,-2.709713,6.193617,-3.020223,6.372651,9.321327,-7.399920,5.513222,6.932662,-1.816442],[8.209184,-8.116437,-9.164556,-4.100237,-5.921537,1.436418,7.255505,9.300583,9.459566,-9.386883],[-5.039059,8.966659,-0.217970,2.622188,-5.262327,-9.272281,8.829908,-4.581597,1.846878,-7.169319],[5.426976,-4.235261,3.688936,7.412841,4.261377,2.789433,6.886107,-6.528698,-5.945079,0.561201],[-9.373041,-9.792362,5.102682,9.305552,3.814058,-0.424489,5.180525,5.222299,5.138037,9.658386],[2.045243,-4.628262,-4.209080,-6.510458,-0.627425,5.064930,0.811390,-5.020169,-4.511338,-0.902055]]], dtype = "float64")#candidate|3677|(8, 11, 10)|const|float64
bop_3678 = relay.not_equal(call_3674.astype('bool'), relay.reshape(const_3677.astype('bool'), relay.shape_of(call_3674))) # shape=(8, 11, 10)
bop_3681 = relay.not_equal(call_3675.astype('bool'), relay.reshape(const_3677.astype('bool'), relay.shape_of(call_3675))) # shape=(8, 11, 10)
output = bop_3678
output2 = bop_3681
func_3684 = relay.Function([], output)
mod['func_3684'] = func_3684
mod = relay.transform.InferType()(mod)
output = func_3684()
func_3685 = relay.Function([], output)
mutated_mod['func_3685'] = func_3685
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2887_call = mod.get_global_var('func_2887')
func_2889_call = mutated_mod.get_global_var('func_2889')
call_3699 = relay.TupleGetItem(func_2887_call(), 0)
call_3700 = relay.TupleGetItem(func_2889_call(), 0)
const_3716 = relay.const([[[2.404800,5.083690,9.536883,-5.229286,2.387971,1.231765,-3.961700,-2.691161],[6.008305,1.849381,-6.000289,-7.288546,-1.242734,-6.657811,-5.272264,2.610852],[-6.807929,3.472982,5.447255,-3.139092,-9.770751,6.186094,-1.588143,-2.401474],[-5.259322,-5.754897,6.796444,-5.777363,-7.215975,-7.493243,-7.359599,-4.441996],[-3.037758,-4.792423,7.935396,-4.014417,7.540342,-4.170842,5.547199,2.672290],[0.958518,-0.438468,-1.838496,-6.682074,7.840654,5.761591,-0.991362,4.686468],[-8.775771,-7.342134,-8.224534,5.370483,-2.287293,-5.808630,-8.701609,-9.261829],[0.964926,-8.026570,1.352899,-4.665884,3.065796,-2.761250,-9.180670,7.312044],[8.685387,-6.431407,-7.423028,5.915612,-8.275691,6.042672,-0.868002,-0.648310],[-1.625138,0.188900,7.660542,9.244722,-2.829497,-9.971968,3.141082,8.783584],[-5.167285,-5.574552,7.809661,0.612923,1.100158,-3.968573,-5.012434,-0.363170],[9.568515,-1.436026,6.725476,-6.513721,5.804333,-1.240379,-7.024958,-6.652289],[-9.413884,8.910517,-2.062746,3.597509,1.825437,1.450903,-1.955918,9.168379],[-5.989644,-2.264147,9.792850,7.382254,8.588183,8.674961,6.647526,-6.702079],[-5.217484,4.511989,0.715700,0.550032,-0.060346,-2.618319,-4.592644,-1.197473]],[[-7.301849,-2.225770,1.373858,-2.955046,-9.430459,-1.839784,2.752392,0.297008],[9.430126,4.424715,9.046537,1.873561,9.160264,-0.834083,4.565937,-9.952200],[1.100444,8.834326,-5.344041,7.226783,3.728761,-3.385147,4.963478,7.499014],[-0.601486,3.832433,2.050965,4.081753,-5.156451,-4.913242,3.787659,5.178540],[5.054163,2.380569,3.770008,-8.317614,8.763538,9.107921,-1.684817,8.094969],[3.433288,-9.050282,2.992733,-4.010613,3.914777,-4.972532,1.035412,6.197135],[-4.789624,8.433366,-9.277244,5.393525,-5.782754,-5.380944,5.703577,-7.380679],[-4.427651,4.987759,-2.405288,0.017430,-4.055547,-9.354163,-8.693283,-0.243549],[2.411612,-8.271663,-2.495774,8.069195,-3.222414,4.377637,9.833266,6.915787],[4.910018,0.270870,-0.385224,7.374820,-9.789829,-8.780184,-0.401627,-4.608862],[-4.412008,0.093384,-8.164358,-8.055365,-2.152329,-3.686271,8.985668,0.034378],[-2.171786,-9.753916,0.423339,2.979325,-7.751319,-8.923333,-3.018425,-5.297512],[7.010501,9.504198,-4.796273,5.222604,-5.582878,-7.454515,9.033693,-9.218920],[-1.594744,-8.089596,-7.091741,-2.579817,6.109385,7.178469,0.816781,1.800491],[5.332263,-3.632208,-8.755634,-0.830655,7.155027,-2.603661,-6.838583,-9.256146]],[[3.421053,4.801668,-9.096673,-5.767074,-7.047055,1.274438,4.560472,1.737983],[-6.881310,-4.618793,8.523109,5.386132,7.110320,0.961128,-5.434020,5.049199],[-5.577074,2.111739,-6.359382,-8.842688,-0.890498,-3.861851,-9.539917,-3.675311],[0.013389,0.936648,-1.445342,2.821605,-6.048389,0.595510,-1.221527,2.677616],[6.759995,2.374455,-3.934039,5.064177,3.171661,6.046853,5.558134,-7.589855],[-5.733945,2.190028,-8.193867,5.192569,7.949031,3.811562,0.189003,-7.154079],[-1.079615,-0.762197,1.244784,5.415736,2.065489,4.832697,-1.670533,4.300236],[0.747304,2.079951,2.519650,6.854173,-1.031954,-2.623609,1.620067,-3.068751],[-2.586553,-4.553935,-7.798576,-0.184804,-4.884405,-5.032129,-9.870294,-2.304265],[-3.635258,6.847889,-8.260867,-3.446161,-2.446574,-0.836003,3.789257,3.254832],[4.206171,-0.145037,7.511867,0.275361,-4.020098,-6.162035,0.585684,-4.907288],[8.861903,8.888702,-9.826393,-1.002471,-6.490690,-4.913139,9.412060,7.311811],[-9.560482,0.446027,-9.075981,3.829436,-7.265007,8.085845,-2.562446,-7.636740],[-1.414566,8.476937,1.386045,4.920927,-3.527477,-3.894450,7.612523,-1.294751],[8.170618,7.492215,-4.094337,-9.853954,-4.211695,-3.778190,7.021080,-5.628052]],[[-6.476842,3.983257,0.946868,0.820442,-4.206371,-6.413157,8.771654,6.472709],[-7.265888,3.833718,-5.080396,7.556471,1.001820,0.736050,-5.844507,-3.832787],[-7.499911,5.921064,-1.584600,9.578177,-9.314455,-9.733932,4.647965,-7.478703],[-9.133590,-2.872634,7.644879,-3.876058,-7.953833,9.974672,4.940562,0.606348],[3.748272,-2.408538,-0.179101,6.176589,1.674686,-4.782176,9.389537,-5.411936],[-2.499947,-9.570364,-2.940881,9.875013,2.280466,-0.256692,-3.502543,-4.619640],[-7.807323,-6.033925,-6.916061,7.326185,8.738675,-6.083707,-2.966712,1.565942],[-7.659610,-9.323103,-0.009261,1.449302,-5.173333,-9.704012,3.281431,2.648417],[7.381407,-4.823487,8.280185,7.022725,-7.385504,7.871156,-8.896567,2.017524],[1.573089,-8.025534,2.192191,0.957554,1.158325,1.888458,-8.315623,-6.740851],[-1.497210,7.972985,-4.819932,-1.538318,4.263707,9.309681,-2.047651,-7.572642],[-6.148724,7.288521,-4.508176,5.236593,7.179146,-8.574761,2.646065,4.759820],[-3.250726,3.988491,-7.423792,4.136775,-2.911833,2.250626,1.777439,-5.897820],[-3.648018,-0.322473,-8.128677,-1.437303,-3.093649,8.597599,9.286053,5.581434],[9.613925,-3.699353,-4.988580,0.461186,-8.498217,-4.963956,-9.947279,4.456501]],[[-1.114239,8.712671,-1.125552,-2.475451,0.215912,-1.983937,6.372314,-3.300925],[2.098380,-6.720521,-0.969590,-8.326312,-1.784008,-2.800068,4.545861,-0.728684],[0.176963,-0.768064,7.007901,-9.772245,-9.143148,-1.404293,-2.732714,-9.283618],[8.501845,-7.161442,7.383311,7.395993,2.823871,-4.232580,3.757918,-9.467679],[4.743008,-6.229165,-6.243370,1.991249,-8.282983,-1.691420,-8.889858,-7.173676],[5.061307,9.620063,6.616465,-0.650597,-6.763718,8.972848,7.024091,2.093843],[-1.395824,-6.941731,-6.386867,2.269386,6.043591,-4.897308,-0.839532,6.871641],[0.140607,-6.418077,5.014750,8.824662,-5.514479,-4.457656,-9.504025,-1.324588],[8.975118,7.873772,-0.132153,-8.776407,-1.702060,8.339670,3.391282,-5.734021],[2.989371,0.125463,-1.360928,-4.029822,5.918080,-1.797317,-8.277410,-4.378110],[8.124529,-1.998510,-8.810663,7.550900,4.905176,-4.986713,-0.861145,4.756620],[9.899574,-3.149161,5.527042,-2.370749,1.417645,-9.308436,0.129721,-3.593183],[8.199393,-4.211139,8.120178,-0.400565,-9.952091,-9.395558,-7.034184,-1.417081],[-1.225557,5.947835,-3.400709,2.376936,-0.933328,9.471063,-7.569440,8.646698],[-7.755900,-7.764730,2.265296,-4.095181,0.349912,-3.760232,-1.303099,9.184670]]], dtype = "float64")#candidate|3716|(5, 15, 8)|const|float64
bop_3717 = relay.logical_or(call_3699.astype('bool'), const_3716.astype('bool')) # shape=(5, 15, 8)
bop_3720 = relay.logical_or(call_3700.astype('bool'), const_3716.astype('bool')) # shape=(5, 15, 8)
output = bop_3717
output2 = bop_3720
func_3726 = relay.Function([], output)
mod['func_3726'] = func_3726
mod = relay.transform.InferType()(mod)
output = func_3726()
func_3727 = relay.Function([], output)
mutated_mod['func_3727'] = func_3727
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3740 = relay.var("var_3740", dtype = "float64", shape = (8, 9, 14))#candidate|3740|(8, 9, 14)|var|float64
var_3741 = relay.var("var_3741", dtype = "float64", shape = (8, 9, 14))#candidate|3741|(8, 9, 14)|var|float64
bop_3742 = relay.floor_divide(var_3740.astype('float64'), relay.reshape(var_3741.astype('float64'), relay.shape_of(var_3740))) # shape=(8, 9, 14)
uop_3748 = relay.erf(var_3741.astype('float32')) # shape=(8, 9, 14)
func_1982_call = mod.get_global_var('func_1982')
func_1983_call = mutated_mod.get_global_var('func_1983')
call_3752 = relay.TupleGetItem(func_1982_call(), 0)
call_3753 = relay.TupleGetItem(func_1983_call(), 0)
output = relay.Tuple([bop_3742,uop_3748,call_3752,])
output2 = relay.Tuple([bop_3742,uop_3748,call_3753,])
func_3778 = relay.Function([var_3740,var_3741,], output)
mod['func_3778'] = func_3778
mod = relay.transform.InferType()(mod)
mutated_mod['func_3778'] = func_3778
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3778_call = mutated_mod.get_global_var('func_3778')
var_3780 = relay.var("var_3780", dtype = "float64", shape = (8, 9, 14))#candidate|3780|(8, 9, 14)|var|float64
var_3781 = relay.var("var_3781", dtype = "float64", shape = (8, 9, 14))#candidate|3781|(8, 9, 14)|var|float64
call_3779 = func_3778_call(var_3780,var_3781,)
output = call_3779
func_3782 = relay.Function([var_3780,var_3781,], output)
mutated_mod['func_3782'] = func_3782
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3036_call = mod.get_global_var('func_3036')
func_3038_call = mutated_mod.get_global_var('func_3038')
call_3834 = func_3036_call()
call_3835 = func_3036_call()
func_3726_call = mod.get_global_var('func_3726')
func_3727_call = mutated_mod.get_global_var('func_3727')
call_3851 = func_3726_call()
call_3852 = func_3726_call()
func_2308_call = mod.get_global_var('func_2308')
func_2311_call = mutated_mod.get_global_var('func_2311')
const_3858 = relay.const([[4.537398,-8.463298,-4.145486,8.733246,-2.292554,-0.503923,2.723669,8.341608,9.804194,1.004124,9.579800,5.275349,0.486732,4.745578,3.169500,-0.994290,-2.511451,-7.630983,5.076957,0.712620,0.104710,-3.003119,5.682235,-6.823316,6.987305,0.262060,-0.798585,6.810542,1.466350,2.062408,5.813126,-4.400014,-7.302886,-4.584169,-0.902945,4.517101,-4.487754,0.940884,9.334877,-0.956040,4.149044,-0.258596,5.486629,1.954288,-3.157753,0.810464,-4.556058,1.259091,-2.229518,-5.402653,-2.391786,-0.496676,5.756171,-0.479026,9.847839,-3.696757,-0.803417,4.414214,-2.487168,-6.317059,4.436901,4.465349,3.079124,1.545877,-7.066242,5.461997,4.334465,8.676967,1.935776,-6.143671,2.673547,7.538043,2.775584,8.967446,3.550006,-5.023308,2.710334,-9.339269,-8.974424,-7.612271,8.068446,3.773589,-3.225881,6.684914,-2.827604,-3.415908,-4.309024,5.756637,-2.699188,-2.997089,1.786409,6.656008,-6.082812,8.431338,9.985718,0.957230,0.451592,8.518248,-2.407852,4.527429,-7.996674,-9.041052,5.329181,-4.424481,-1.284648,1.145685,4.842248,-8.698641,-9.163962,3.678211,0.231180,-2.083068,4.341943,-7.782677,1.626851,8.239113,-1.626193,-9.894347,6.289158,2.111907,2.067779,2.258885,1.587580,-9.332981,-4.961669,9.941026,2.854898,-2.102408,-2.978982,-0.203154,6.644660,4.983181,6.711801,5.311891,3.992531,-3.485666,-0.583319,4.458118,8.780361,6.799877,2.833953,4.994266,3.199082,-9.040466,8.832726,6.362019,-9.006155,-7.999024,-3.316936,-5.140430,-2.532589,7.585798,7.500466,6.510386,-4.968859,-0.764064,0.574643,-1.259729,3.593318,-3.359933,1.148159,6.964391,0.333218,3.729209,-9.464166,2.234615,-4.193804,0.535642,7.142925,-8.834639,5.958673,-1.001801,4.259256,4.910973,3.296365,7.028833,4.272560,-9.519292,-1.752227,5.485257,6.128577,9.427342,8.320688,6.101840,0.239678,-9.878510,-6.828765,-6.804810,-9.376978,8.545715,0.654459,-3.558352,7.639122,3.592744,3.564578,-6.834012,2.953224,-5.304085,-1.488836,-4.450421,-4.159219,7.780181,2.749872,-7.865951,3.255645,4.412421,-8.355254,-4.054533,-2.087454,6.298375,-1.904894,-5.982416,7.272617,-8.913483,5.143814,-9.073973,7.478569,-2.229186,5.463553,-6.860728,-2.046331,2.708201,-7.580710,7.857346,-3.679941,-2.582247,-2.942058,-0.161037,3.462226,-9.021810,2.830915,-7.944686,-7.759480,6.168359,3.153234,-9.806554,8.760502,-9.100340,8.445864,-8.483461,-4.060981,-6.352824,-5.783816,9.229199,6.737238,-3.255645,-6.035931,-1.521647,9.149194,-2.401326,6.620154,1.895722,-3.394247,-5.667025,4.118890,4.499374,5.996695,-9.611113,3.012017,-7.276352,7.766075,1.921413,8.095911,-6.660387,-9.797471,-6.840452,-1.360828,-0.048466,4.894663,-0.450528,-9.448265,1.341382,-9.625205,5.023422,9.003643,-8.380586,-5.399160,-8.338039,8.560587,-1.198491,7.500119,-1.350613,-8.981839,-3.703645,9.632699,-5.699824,1.215545,-8.463382,-2.650619,3.870808,5.497758,-5.734877,9.853489,1.143345,-9.178749,-2.341736,-2.360490,6.650934,-7.121175,2.053562,-2.226322,0.760924,4.359947,3.297591,0.065401,9.599306,9.988532,-8.120225,-7.948974,8.345030,7.207193,-1.499473,-6.729242,6.945231,2.953549,3.530990,-4.219289,9.007712,-5.142287,9.756652,4.532396,-1.821841,2.827243,-0.133746,-7.545490,-2.457768,2.025104,-6.798402,-9.496644,-3.274283,-0.607357,6.306878,-6.264598,-5.609945,-3.963468,-9.825681,-7.255660,-0.153052,0.463928,4.660743,-9.904185,-8.237808,-0.493526,-8.769828,-0.995920,-6.342703,-7.941056,3.970903,1.974163,9.271891,-6.470968,3.501720,-9.106831,-7.197488,-3.991966,1.914357,0.279188,8.596766,-4.847890,-0.664229,-8.759653,0.948986,-9.653311,-5.684218,-1.892745,7.214979,4.308326,3.334292,-0.293372,-2.815425,6.857797,-5.368810,3.489387,-6.216338,8.693626,-8.977704,-8.675208,-2.161349,-9.828207,-8.248532,-8.849086,7.932808,-5.232709,5.233501,-5.178292,-7.036519,4.529848,-3.402717,-7.893499,8.019752,8.817450,1.839158,7.308150,1.871017,-1.894355,5.322741,8.601178,9.089860,3.436669,7.784026,-1.392389,-8.537916,-3.052110,-8.165949,9.719797,-4.809405,8.889465,-7.613304,7.345168,-9.267405,1.757352,-2.265997,5.562484,7.511883,-8.437957,-5.938993,-8.865111,-9.340373,-8.112069,9.449990,-8.173298,-9.733301,8.529630,6.188665,-4.798865,8.297018,8.418525,9.071060,2.264192,3.140910,1.744316,-4.345320,-7.976584,-1.298672,8.237445,5.186853,1.606802,2.996564,-7.264827,6.413941,-5.257949,6.977943,-3.197741,-7.382871,1.159095,7.148693,-0.418065,-8.734013,-8.180959,6.571631,-7.044271,-2.288405,-2.370000,-6.882550,-8.099116,-8.881314,-0.146987,-6.261449,-9.980788,-6.464913,-6.017472,-6.691884,1.979056,-1.838350,5.440161,2.558073,-9.548465,4.706320,5.898230,0.715891,8.204392,5.987405,6.929209,-0.865948,-7.021154,7.024914,-5.840081,9.493804,-5.004914,8.295867],[4.507804,2.948367,-4.867699,6.719404,4.494254,7.970907,-8.981397,-6.644111,-9.548882,6.474674,-4.805679,-1.463342,-0.399118,-6.996098,6.667706,-3.439902,8.063057,-7.413434,-6.049194,0.629649,-0.090773,-7.759476,7.911848,1.786688,4.696273,0.038383,1.973440,-3.050883,5.573063,5.599908,-5.530534,-7.237257,3.830081,-5.514376,-0.454493,5.479638,-3.222794,4.387699,4.248734,-8.136358,5.542234,-8.933740,3.977669,-7.941598,5.927364,3.448392,0.422194,2.369046,-2.360578,-9.584427,-4.864977,3.863570,3.548727,-4.906523,0.349647,6.548170,-6.512079,-3.044583,-7.457589,0.308131,-7.320880,3.633213,-4.820900,-1.926746,-0.459339,8.726683,4.421224,-7.411903,6.194297,5.787017,9.325795,5.059119,-4.041183,9.678863,-3.414327,-5.105294,1.259399,-7.559791,0.025540,-0.366461,8.301241,-3.327571,-8.148937,0.680460,9.613419,6.726449,7.426440,7.927935,-6.226707,-8.127086,8.913219,9.869107,-7.924955,-3.753296,-3.978044,-3.600804,-1.188680,-5.004854,8.923786,-7.527403,-7.642849,6.021380,-3.682891,0.474486,5.711438,3.708032,8.278216,1.562358,-0.246249,5.444422,-2.022887,-1.985225,-3.150957,9.782311,-7.781483,-8.815878,2.530661,-5.254275,-6.483371,-4.219119,9.080957,-9.870412,-1.801461,-4.529771,4.879973,-7.319444,4.970263,-9.953799,9.913708,0.759756,2.682490,6.699461,1.205119,-4.662000,2.507976,6.777470,-9.354249,5.169062,0.971620,1.338136,4.320450,-0.377970,-8.006966,-4.750324,7.166495,3.454565,-4.019447,6.333975,-8.178915,3.246766,4.562819,-4.051058,5.923803,-1.365323,-0.425878,0.564831,5.673601,-1.476586,1.893021,-0.194129,2.393157,2.630459,-9.283551,9.754988,7.061008,-2.245664,-8.336824,-1.854949,2.347199,-5.821314,3.409962,0.755903,-9.209813,-2.557592,4.176815,-0.605489,2.068983,-2.957274,-5.136826,-8.974776,-6.930679,-1.278386,-4.314823,-5.851907,-4.900787,9.677925,5.671657,-4.531152,-3.519893,3.646923,0.837898,-9.374103,8.680046,-3.233452,5.845421,9.788153,-6.690497,-0.447454,3.031099,-6.769377,9.513449,1.883839,-5.387833,-4.709515,-3.533864,-2.118974,7.399821,-7.831612,4.595942,5.984015,-0.756362,0.526209,-2.793999,8.823651,-9.049944,9.663655,0.615876,-0.279186,2.156637,-3.976966,-3.914718,2.490238,-7.608142,4.947521,6.791244,-0.180485,6.909125,-7.875052,9.111398,5.532481,0.150513,4.944560,4.397971,-9.474626,6.749086,6.365308,-8.398091,9.191000,-4.603338,-7.928172,6.508585,1.087639,-0.743232,2.936484,7.323753,-4.485314,9.178984,5.873006,5.903118,3.944973,0.647425,1.690750,-6.936110,-6.527849,8.204927,-3.068601,7.591994,2.538227,7.585681,5.705869,-8.708422,0.478475,5.552602,-8.993831,-5.562338,6.304051,-2.188357,4.620772,-1.477207,-0.930173,7.693915,-1.657747,-9.679922,-7.142161,-3.302164,4.371775,7.607745,7.190760,6.850693,-9.242744,0.619706,8.077056,-8.323878,-2.602372,-2.405748,-4.784387,1.906481,-8.052700,-8.941452,9.746223,-8.018542,5.863648,3.063510,0.114544,9.155375,4.123393,2.892564,-3.797018,7.708538,-1.338511,8.827152,1.944616,-1.743445,7.038229,1.384859,6.219273,2.815035,6.877879,4.938263,6.199727,-5.893761,-7.692636,-2.059389,6.870681,3.323681,7.621202,-0.579014,-6.486869,8.018806,-6.472300,-2.938247,-5.321906,-5.841015,1.814976,-6.665847,-1.742010,7.043971,0.855733,-1.054687,9.757399,-7.103060,-5.072287,-7.632965,5.666156,-3.301331,-9.512173,-6.873939,-5.278719,-8.498082,-7.473690,6.025108,-6.389720,1.015608,-6.843064,-5.895317,-2.460403,-1.126777,-8.041470,5.769250,-8.292970,8.513687,-0.703651,-1.391697,-8.872116,-7.266746,8.684396,-4.353130,-9.468773,4.967907,9.394039,5.615861,4.479722,-6.277536,-8.801954,1.199577,-6.806546,3.369029,-9.335892,8.651495,-7.936022,-2.982108,8.128196,2.985864,-0.954012,-4.818651,6.071360,9.122636,-0.667255,-5.934961,6.773968,9.673435,-7.080105,2.335670,-1.528457,8.120043,-1.229960,5.314747,-6.438414,-4.752391,5.523490,-1.149487,-3.956568,4.139430,-7.404408,8.162718,-2.892082,7.370249,5.251646,9.845743,8.899907,-7.135062,-4.655861,-5.167711,8.835639,-5.874982,5.179706,2.764444,-9.397356,-2.720014,-9.320326,2.555689,3.362445,0.182209,7.036744,-9.588040,1.447848,-1.688279,-1.557515,2.724162,3.874045,3.858093,-9.594757,-5.248146,6.734307,4.429713,-4.795564,-6.372125,3.448176,-5.050817,9.411311,-2.176857,-2.757626,-7.768542,0.871743,-4.602383,3.873573,4.238300,-8.028434,5.749899,5.963794,6.131222,2.865604,5.234606,5.924077,5.538650,-7.334972,2.749573,-1.777867,-5.508384,6.011909,5.617082,-1.842413,5.945622,-0.929731,-7.934860,1.700882,-6.699271,-8.482282,-1.578890,6.035325,-4.540836,7.531633,-5.033207,9.316204,9.836229,0.131224,-1.158158,9.971117,-2.315809,-4.958023,2.221025,-5.015823,-2.239067,8.983311,-9.440524,-9.086923,2.395796,1.592751,4.278413,-2.486546],[2.837783,4.538754,7.079079,0.421282,9.496606,-4.952252,-9.470616,-6.644563,2.446931,4.035198,-0.070221,-8.292155,2.318865,-8.662866,4.620938,3.383068,-9.029569,-9.666704,2.853061,-4.950567,0.897151,-5.047091,2.040705,-0.286827,-3.511257,0.957954,5.583710,-7.049051,5.122468,4.688751,0.073890,1.816662,-5.454273,8.683191,-7.213177,-7.403947,5.657248,4.576056,3.761362,9.243775,8.942715,-4.208006,9.701223,4.551933,8.420452,1.294541,5.443618,7.451371,-4.126023,7.260336,-5.125279,-9.546950,-3.761476,-2.596989,5.016511,-9.839867,-6.540513,7.410808,1.504962,-5.029886,8.808971,-0.302557,8.156794,-6.335745,-3.871049,-8.969733,3.518794,-0.457095,-3.863444,8.415624,7.389400,-1.539119,1.041221,7.224075,-4.943628,1.077192,1.149661,-2.639260,5.488485,-5.016544,-3.217265,-8.549343,2.711862,-5.810205,-3.307192,1.549395,1.142020,3.859466,0.160014,1.693608,3.216371,3.300020,-0.763217,6.499675,9.334114,-8.996476,-3.737111,6.111642,2.744218,5.959690,-1.309974,4.871942,-2.149855,-1.660150,3.746224,8.554940,-0.890312,3.646463,-1.179232,1.003118,-3.725714,6.623054,-7.661816,-0.415121,-8.097812,8.930661,-6.830474,-4.846669,-0.119312,-7.804094,7.568542,-8.623856,3.273079,-8.685533,-6.282385,8.480723,1.743798,9.079605,3.266725,-4.327040,3.287338,-3.833264,-5.511774,-0.353787,1.230153,7.981015,-9.008503,3.061054,7.029039,5.649751,7.543254,1.838744,2.783108,-8.820381,-3.273627,8.368136,9.970759,-4.212589,-1.254330,-3.065420,5.022728,-1.466838,9.936522,6.147403,-7.608024,-1.129962,4.628507,-1.275781,-7.516133,-6.124933,3.199778,-9.797628,4.263446,5.803243,6.526749,-4.833897,7.887655,-2.481795,-0.058174,6.376278,-6.725897,-6.237547,5.551787,-3.571176,6.656632,9.140914,-9.763138,6.976684,-0.543238,-8.624137,-8.397574,-0.362839,7.608471,-7.915230,3.688051,-6.669638,4.574018,7.457777,-6.912536,-4.164216,-0.025305,-6.576873,6.886455,9.041991,-8.014075,7.157528,-0.051505,-8.808066,-7.418260,6.301367,9.330408,7.468908,-6.819137,3.490744,9.294746,-7.621528,5.315782,-9.386825,4.112077,-4.774268,4.191501,-9.604856,-2.961153,-5.931973,-8.322859,-6.971176,6.980605,-7.814613,-5.410302,-9.606264,-0.996650,-2.445828,-6.501042,-4.990081,-5.858720,3.984679,1.669518,5.775914,0.629654,-4.996903,4.771503,6.459292,1.145078,-4.156605,4.864340,6.243385,7.055843,-1.214895,-2.461950,0.805904,1.183032,2.864312,2.935318,-1.793750,-9.100418,-6.220069,6.183274,-5.924464,4.681070,5.177366,-0.130610,-1.505639,-6.122881,5.970021,-8.710330,1.073507,6.209971,-6.174765,2.043112,7.908524,0.041657,1.470427,1.518136,5.086229,-0.195733,-7.768627,0.412830,-0.310692,6.538546,8.403854,2.403335,1.549772,0.111147,5.618816,6.409237,-4.177442,-4.498677,7.137803,0.732033,-6.343855,7.712451,-7.241694,-1.114641,-4.290352,-1.778962,2.206498,-9.762365,0.165084,-7.583301,-8.279897,1.414011,-1.923795,-5.413894,-3.842717,7.003316,6.587260,3.125479,5.741999,3.197208,3.953546,3.863098,9.693356,5.710930,1.107777,4.312735,5.156673,-2.743780,-4.348883,-8.096157,9.857183,4.780074,-8.354200,-1.989329,-4.836777,-2.509084,-0.005935,-4.083296,6.051835,-3.860631,9.967817,5.998147,-1.201804,5.093336,-0.104199,3.222290,8.100630,7.492208,4.076799,5.304804,6.972162,3.972203,-9.308544,2.242361,-7.663150,-4.475994,1.534025,-2.868620,-4.725820,-7.310749,4.555531,-0.500535,-6.364228,2.564754,6.597813,-4.128710,-2.651190,-7.097336,0.456622,-4.490460,5.887741,-8.525490,-0.500893,8.363385,-5.321549,-8.857696,9.451892,-4.107128,-4.196291,-1.130090,-5.480319,-3.275487,-6.705329,9.499138,-0.787498,7.822960,3.202338,-7.662530,8.718002,-5.468246,9.627261,0.448269,8.343087,-3.710638,1.028549,6.493634,6.686501,-0.776573,8.493853,-7.035619,-3.675387,3.445103,8.191034,3.458324,4.984372,-1.259394,-0.194125,-4.345258,0.571318,9.093265,5.369286,-4.012811,-7.866894,-0.519824,1.249581,3.183360,8.847767,8.918211,-7.164697,9.004109,-2.781602,-9.791912,6.494227,-8.249062,-8.381681,-3.170259,-5.932736,-4.708672,2.906425,-7.123996,0.627878,-5.828676,8.038940,4.605119,9.001156,0.520983,-8.752662,-0.500759,-5.486486,-4.336815,7.970171,-0.755223,-0.776026,-0.771741,-1.626715,-1.175340,9.467672,-8.144838,-9.378425,-8.260359,-6.223151,5.429956,-8.750956,-1.352234,-8.302399,1.852995,1.217124,2.190972,-6.488446,-1.635766,0.283479,7.145980,4.554852,6.603488,2.988482,8.147525,0.508877,5.485613,4.724023,1.985834,-0.467469,2.837859,-5.810125,5.489036,-5.655420,1.350465,-9.744719,-7.037327,-7.180293,6.793538,-3.462643,6.544352,5.843404,2.641042,2.158698,-3.355850,2.813351,7.539750,6.530151,-0.835120,-2.245685,7.275224,-3.903262,8.364774,1.277750,4.797268,5.219887,5.830799,5.840075,2.884143,1.502603],[-5.726005,4.880466,6.477117,5.217016,8.829901,4.007333,-3.523626,-2.392501,0.044675,6.685683,4.276991,6.197505,7.298326,1.505704,1.106141,3.973946,2.375166,-7.341364,3.766600,9.974419,1.230854,1.216767,-3.704279,3.210116,2.385080,-8.082665,-5.959462,5.034302,-9.309029,-7.421035,-8.620137,-3.610062,2.172393,-4.220053,-5.627058,7.707255,-9.459503,1.739109,-6.011842,-7.168996,3.591531,7.578826,7.270054,-3.378499,1.318452,5.005183,-8.059331,-1.255528,-5.398483,-3.178944,-2.635726,5.530859,-8.725745,8.394086,7.342452,-2.512818,0.601289,-3.994795,-4.464025,-1.890517,-8.338040,1.149693,0.344930,-8.562310,-1.111494,-0.820693,-4.995140,-1.323750,3.347791,5.036174,8.770097,5.722933,7.636549,9.681711,-2.599439,-5.872553,-9.614805,5.609877,8.943471,6.815510,-8.720236,-3.661426,1.901507,0.438422,-2.465146,-1.812278,-7.342618,-7.273046,4.194751,-1.858857,-0.067905,-3.607197,-3.328414,-3.107216,8.817651,-6.376724,-4.021397,-2.031742,3.454750,-9.582779,4.023529,9.112657,-6.152457,2.280904,-5.480647,-8.798302,-0.867212,4.687236,-0.856793,-1.694228,0.272569,-9.049369,5.162736,-9.868863,-0.266996,6.933121,2.884528,-4.847823,-8.874412,8.758147,4.874772,5.861411,7.386953,-9.105089,6.481029,7.403856,9.456481,-8.726262,8.733691,5.642564,0.969926,6.744259,-6.572252,-9.034667,8.863664,5.914267,3.893749,3.822287,7.468625,7.438216,-8.067924,1.747902,-6.552063,6.492730,-9.631508,0.700412,0.762167,-7.360247,-9.921667,-6.574951,8.824304,-9.949163,7.456627,6.867198,-2.812573,4.030892,1.538257,-0.148729,-8.147819,9.095062,3.647125,-6.884217,7.590600,-8.623616,9.057338,-6.139451,-1.719085,-1.551292,-1.982935,-2.686655,-6.885949,5.229283,-6.976772,1.924079,0.373241,-6.921394,3.494125,7.959493,1.233072,0.473425,5.194940,9.048500,-2.224755,3.051283,3.762255,8.647792,9.044122,-0.971923,9.595787,-5.410608,-4.402615,6.360611,4.136248,3.589546,-2.961152,4.715929,-5.781442,0.790388,-0.304336,6.021986,-3.563132,5.818757,5.461474,5.190858,6.681716,-7.434221,-1.496451,-4.199751,-6.255590,1.120451,-1.630412,-2.806640,8.525256,9.428028,-5.348271,-7.092643,-3.649010,-1.734435,2.636812,-4.244355,8.028803,-8.010997,-9.766658,7.617041,-2.260500,8.215341,-9.117030,6.984190,3.150428,2.672917,9.286891,-3.471923,-9.117817,-3.229357,-9.420100,-8.454183,6.195814,-3.093712,3.394386,-2.298986,-3.737714,-7.800982,-6.401623,-5.276736,3.694076,1.561866,4.464026,-2.351563,1.620000,2.975175,0.268289,6.117679,5.384722,-5.146637,-9.808310,-4.104112,-7.648015,5.375410,5.234413,-3.566650,2.091518,0.646390,5.748506,-4.572245,-2.483532,-8.066633,-9.515450,-1.410663,4.304115,-4.062392,-0.212604,-1.000555,-0.594788,2.994360,-2.841999,-5.658493,9.132342,-9.511812,2.616940,7.998213,5.846024,5.498374,-0.999359,5.995586,-1.590642,3.020435,-7.018564,2.969153,6.596177,-3.443601,-8.604501,2.202024,0.729684,-9.209588,3.286379,-3.305764,0.569859,-2.815640,-5.882490,-5.850651,9.282922,8.298466,0.332956,-1.282517,1.103537,-6.099461,5.824631,4.566117,-9.426945,6.559170,-8.039699,-9.531069,4.045595,9.643281,-5.282534,-4.254798,0.804226,0.060904,-9.097638,0.836376,1.534020,3.637494,0.342002,6.713258,-9.845435,8.508700,-0.121233,0.300260,-6.995762,1.728985,-1.570074,6.611471,1.299175,-8.553990,-2.878390,2.468148,-9.707678,6.812141,-6.068799,9.240498,2.138137,2.883619,-6.906339,-4.157578,3.586409,1.019049,8.309987,4.646552,2.842716,8.045906,6.970868,4.283352,6.373243,7.488447,3.967171,4.957065,-4.875531,1.380165,4.381187,3.208231,8.536944,-4.308059,1.085312,-1.919958,6.045738,6.904308,-8.180112,-0.437032,5.604696,0.153958,-3.656561,7.858585,5.738784,9.154034,-3.012049,9.190362,4.414589,4.000425,0.413719,-3.422906,0.157836,3.397903,-4.693912,4.000128,-2.702641,7.562399,4.586854,3.987926,6.264074,2.694439,4.962983,3.986719,-2.964789,-9.915639,-5.891367,8.905970,-2.849929,-6.241047,-9.504582,-9.828435,-1.042531,-8.121460,-5.358386,0.897819,-1.729662,-4.953572,2.138841,1.931781,-1.818646,-1.071890,-4.796555,-7.040369,-9.998093,4.653112,-1.152039,5.127847,8.897376,6.829960,1.800718,0.749852,9.846966,-4.983747,-9.284630,0.571807,3.086229,5.713858,7.221553,-3.156301,-0.852872,-2.621630,1.123845,-1.972629,5.190632,-2.588224,-4.277938,6.642666,4.166366,-5.885372,7.930065,-8.179341,3.951860,-3.868867,2.176760,7.730020,-1.462729,7.327040,4.422385,1.350787,4.900104,-6.166302,4.307557,0.113088,0.624225,-4.083080,8.630105,4.523848,5.526246,1.129009,-9.780393,-3.785191,4.611240,-6.983893,0.625917,6.881102,9.431817,-4.175421,3.464227,-9.560468,-7.892895,8.248967,9.196772,-5.844909,-9.100986,-7.077436,-3.473622,-4.520398,-4.125078,3.920147,-8.758811,-6.987543]], dtype = "float64")#candidate|3858|(4, 480)|const|float64
call_3857 = relay.TupleGetItem(func_2308_call(relay.reshape(const_3858.astype('float64'), [16, 15, 8]), relay.reshape(const_3858.astype('float64'), [16, 15, 8]), ), 3)
call_3859 = relay.TupleGetItem(func_2311_call(relay.reshape(const_3858.astype('float64'), [16, 15, 8]), relay.reshape(const_3858.astype('float64'), [16, 15, 8]), ), 3)
func_1030_call = mod.get_global_var('func_1030')
func_1033_call = mutated_mod.get_global_var('func_1033')
const_3863 = relay.const([-8.050867,-9.062128,-6.416828,2.511416,-2.056930,1.012893,-3.448455,2.850045,-6.776374,-0.808531,-1.199786,8.229385,5.990772,4.699523,-3.754254,9.982781,-2.659551,1.737400,-3.721099,-7.473401,-5.068067,5.417856,8.276168,-9.099936,-9.272505,-3.507922,1.360852,-9.100584,-0.877309,9.500778,7.499058,4.374711,-9.245558,2.565963,-0.808963,-0.440089,1.046900,5.260490,-5.125293,-9.124386,-9.886289,1.896165,-2.505074,8.845912,-1.396808,0.115491,7.049728,5.441307,0.259005,3.071070,-5.353631,8.461296,5.262131,-5.510406,-0.057539,4.635327,4.178513,-4.348971,-6.304750,5.066552,5.766083,7.482108,2.146166,-8.396448,4.248824,-5.812473,3.217335,6.453115,9.274243,-2.275736,1.853306,-4.826025,9.563109,-5.963331,-4.569513,-5.716322,3.367161,3.277831,-6.332346,7.937169,9.486687,-8.767249,7.279351,9.790676,7.554682,4.541414,2.677635,-2.325151,-0.076773,1.479885,-6.353761,-8.916140,0.582277,-4.795740,-2.837695,8.271721,-8.058634,-5.270459,7.159379,-7.830156,-3.532453,4.354940,5.209607,-1.731818,2.330608,6.528626,9.144231,4.327231,8.497253,-7.956083,6.418514,6.387390,8.729612,-3.111673,4.895397,-9.871017,-0.641047,-5.975030,9.681529,6.492378,-3.371963,-1.930340,2.904463,-0.678589,4.112720,-0.663551,-0.308127,-4.158629,5.416763,-6.567539,5.801242,-9.894503,8.579118,-6.665697,8.597651,4.104539,-4.036867,1.958472,9.728406,-4.528614,0.034615,2.539716,-0.420097,1.950348,-2.295169,-1.251307,-3.905365,3.276932,5.516629,-3.036404,-6.571307,-5.199320,9.122710,-2.796718,0.258883,-4.078927,0.237203,-9.076631,2.092391,1.558137,-8.037290,-6.911129,8.397117,-6.985561,1.887582,9.050098,-2.996902,-8.540035,-0.055360,-6.349086,6.004262,-3.705520,-9.926688,-3.105195,-8.270882,-9.498504,6.849100,-1.940682,-2.224297,-5.354205,4.552021,1.054364,9.983530,-2.654394,-3.372796,-9.990096,3.433901,-4.739536,9.692372,0.834135,5.812225,-8.192582,-3.944335,2.568238,5.017275,-4.435705,2.927204,-0.789432,2.156342,-2.012824,1.941066,3.237863,0.861381,1.146482,-1.465879,1.432797,-8.567561,4.781321,-1.109096,1.167543,-9.016873,-0.649198,-5.223110,-8.179437,2.309769,1.119998,5.294622,7.925623,9.258726,-7.854676,-4.392321,8.010530,8.399150,0.845451,0.223566,-1.643853,3.392125,7.673861,7.178797,3.849512,4.016694,-0.769455,-9.205831,5.423716,-1.431042,9.657078,7.595367,1.804133,6.551421,-3.977698,1.730279,-3.551880,-8.247015,-7.644178,-5.584709,-5.555456,9.018466,-6.939170,4.157701,1.734503,8.363885,-6.419537,1.640517,-4.096724,-8.755769,3.015413,6.171848,-1.950908,3.199769,8.789600,9.472342,2.137589,-2.946153,-3.606756,-9.726888,9.819341,-9.512213,-7.406774,2.346376,1.622521,-9.562988,-0.054403,-1.925352,3.540305,1.817520,8.891401,-4.591167,5.264126,1.833289,-6.901526,2.435642,6.163887,2.139012,6.672577,-7.675302,1.664453,6.920689,-3.874168,-1.890616,-7.288067,9.404646,-8.595593,-7.102933,-8.128589,7.773843,2.273296,1.281523,0.470062,0.755623,9.304251,8.271517,-7.102845,-3.866217,-4.391664,-8.771049,9.257990,7.404365,6.926246,7.374715,1.445287,2.420188,-5.115466,0.701953,7.437615,-3.374070,4.068158,9.102734,5.865290,-0.326680,9.031044,-3.295321,-6.546543,-4.093837,6.358715,-7.815047,5.031992,-2.008509,-8.452693,8.987623,-2.027180,-2.290052,2.785097,2.013632,-7.405630,-6.234632,-6.346802,-3.319211,-8.928204,-1.801943,-0.989831,-2.299689,-0.578488,6.715850,4.921236,2.382026,1.225873,8.782411,9.840070,7.115669,-1.454875,9.585482,-5.152130,-4.578571,8.153345,-9.908462,0.336954,1.193809,5.023284,-2.938329,9.091298,-7.017706,2.235827,3.082189,-1.243388,-0.137880,-5.257273,4.381329,1.014540,-1.025921,5.155855,3.938760,4.856632,-8.121368,2.394985,0.404685,-5.771661,3.264491,6.173637,8.229407,4.973487,6.272232,1.634419,-0.439226,-6.340785,1.091079,-7.059265,-1.017271,2.391224,-7.774620,8.198768,1.708801,-0.592312,3.756218,4.288486,9.217447,1.160545,5.888127,-0.355232,3.304095,-2.041050,-4.641363,5.678010,-8.399469,5.022169,-6.363436,4.463973,6.137601,-1.869511,8.492808,0.692004,3.807775,5.381354,5.090449,-5.761465,-2.681905,-8.762401,9.064879,3.357460,-4.785341,3.873927,1.830999,0.022923,-2.269637,-9.306271,6.281745,-6.309693,-3.972803,1.652615,6.130745,-7.014439,-4.909460,-2.429270,8.416294,-9.180328,7.846352,-9.549419,-5.683444,5.733686,7.742338,-5.342026,8.812002,9.499279,6.082096,4.326756,3.191687,-6.482194,-6.844805,3.961304,0.569632,-4.144923,6.936335,1.064418,-1.558326,-9.879650,-8.228886,-1.149810,-5.314150,5.298569,4.470814,-2.035908,7.361385,-1.619555,-5.839181,8.455478,8.650629,-2.473493,-4.149650,-6.723420,-3.279877,-8.823363,-1.687982,-6.222499,8.167187,-2.317707,-2.311048,9.556567,6.015342,-6.385904,8.454959,6.860098], dtype = "float64")#candidate|3863|(480,)|const|float64
call_3862 = relay.TupleGetItem(func_1030_call(relay.reshape(const_3863.astype('float64'), [4, 15, 8])), 0)
call_3864 = relay.TupleGetItem(func_1033_call(relay.reshape(const_3863.astype('float64'), [4, 15, 8])), 0)
bop_3888 = relay.bitwise_or(call_3862.astype('int16'), call_3857.astype('int16')) # shape=(4, 15, 8)
bop_3891 = relay.bitwise_or(call_3864.astype('int16'), call_3859.astype('int16')) # shape=(4, 15, 8)
output = relay.Tuple([call_3834,call_3851,const_3858,const_3863,bop_3888,])
output2 = relay.Tuple([call_3835,call_3852,const_3858,const_3863,bop_3891,])
func_3906 = relay.Function([], output)
mod['func_3906'] = func_3906
mod = relay.transform.InferType()(mod)
output = func_3906()
func_3907 = relay.Function([], output)
mutated_mod['func_3907'] = func_3907
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3504_call = mod.get_global_var('func_3504')
func_3506_call = mutated_mod.get_global_var('func_3506')
call_3921 = relay.TupleGetItem(func_3504_call(), 4)
call_3922 = relay.TupleGetItem(func_3506_call(), 4)
output = call_3921
output2 = call_3922
func_3927 = relay.Function([], output)
mod['func_3927'] = func_3927
mod = relay.transform.InferType()(mod)
output = func_3927()
func_3928 = relay.Function([], output)
mutated_mod['func_3928'] = func_3928
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3726_call = mod.get_global_var('func_3726')
func_3727_call = mutated_mod.get_global_var('func_3727')
call_3991 = func_3726_call()
call_3992 = func_3726_call()
func_3242_call = mod.get_global_var('func_3242')
func_3245_call = mutated_mod.get_global_var('func_3245')
const_4001 = relay.const([-2.592444,-1.018186,-1.750644,-5.197050,-5.534859,-7.379769,-0.079211,-5.696308,2.001237,-8.595010,9.754322,8.259666,8.265856,-7.307981,9.386088,2.494408,0.671324,-0.382892,1.419381,-3.096759,3.876296,7.658596,-0.667641,-0.938915,-0.756207,-3.593555,-8.478253,-1.300442,-0.576032,-7.613079,5.963518,9.398908,-8.604224,8.417194,-8.051607,2.060861,-5.403182,4.259970,-0.506306,8.031438,3.734755,3.515792,3.533062,1.353329,-3.000193,-6.900018,1.493193,-3.218147], dtype = "float32")#candidate|4001|(48,)|const|float32
call_4000 = relay.TupleGetItem(func_3242_call(relay.reshape(const_4001.astype('float32'), [2, 12, 2])), 1)
call_4002 = relay.TupleGetItem(func_3245_call(relay.reshape(const_4001.astype('float32'), [2, 12, 2])), 1)
output = relay.Tuple([call_3991,call_4000,const_4001,])
output2 = relay.Tuple([call_3992,call_4002,const_4001,])
func_4004 = relay.Function([], output)
mod['func_4004'] = func_4004
mod = relay.transform.InferType()(mod)
mutated_mod['func_4004'] = func_4004
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4004_call = mutated_mod.get_global_var('func_4004')
call_4005 = func_4004_call()
output = call_4005
func_4006 = relay.Function([], output)
mutated_mod['func_4006'] = func_4006
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3906_call = mod.get_global_var('func_3906')
func_3907_call = mutated_mod.get_global_var('func_3907')
call_4009 = relay.TupleGetItem(func_3906_call(), 3)
call_4010 = relay.TupleGetItem(func_3907_call(), 3)
func_921_call = mod.get_global_var('func_921')
func_923_call = mutated_mod.get_global_var('func_923')
call_4011 = relay.TupleGetItem(func_921_call(), 0)
call_4012 = relay.TupleGetItem(func_923_call(), 0)
output = relay.Tuple([call_4009,call_4011,])
output2 = relay.Tuple([call_4010,call_4012,])
func_4015 = relay.Function([], output)
mod['func_4015'] = func_4015
mod = relay.transform.InferType()(mod)
output = func_4015()
func_4016 = relay.Function([], output)
mutated_mod['func_4016'] = func_4016
mutated_mod = relay.transform.InferType()(mutated_mod)
func_921_call = mod.get_global_var('func_921')
func_923_call = mutated_mod.get_global_var('func_923')
call_4030 = relay.TupleGetItem(func_921_call(), 0)
call_4031 = relay.TupleGetItem(func_923_call(), 0)
func_3016_call = mod.get_global_var('func_3016')
func_3019_call = mutated_mod.get_global_var('func_3019')
var_4046 = relay.var("var_4046", dtype = "float64", shape = (720,))#candidate|4046|(720,)|var|float64
call_4045 = relay.TupleGetItem(func_3016_call(relay.reshape(var_4046.astype('float64'), [6, 15, 8])), 0)
call_4047 = relay.TupleGetItem(func_3019_call(relay.reshape(var_4046.astype('float64'), [6, 15, 8])), 0)
output = relay.Tuple([call_4030,call_4045,var_4046,])
output2 = relay.Tuple([call_4031,call_4047,var_4046,])
func_4063 = relay.Function([var_4046,], output)
mod['func_4063'] = func_4063
mod = relay.transform.InferType()(mod)
var_4064 = relay.var("var_4064", dtype = "float64", shape = (720,))#candidate|4064|(720,)|var|float64
output = func_4063(var_4064)
func_4065 = relay.Function([var_4064], output)
mutated_mod['func_4065'] = func_4065
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4079 = relay.var("var_4079", dtype = "float32", shape = (2, 6, 2))#candidate|4079|(2, 6, 2)|var|float32
uop_4080 = relay.exp(var_4079.astype('float32')) # shape=(2, 6, 2)
output = uop_4080
output2 = uop_4080
func_4094 = relay.Function([var_4079,], output)
mod['func_4094'] = func_4094
mod = relay.transform.InferType()(mod)
mutated_mod['func_4094'] = func_4094
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4095 = relay.var("var_4095", dtype = "float32", shape = (2, 6, 2))#candidate|4095|(2, 6, 2)|var|float32
func_4094_call = mutated_mod.get_global_var('func_4094')
call_4096 = func_4094_call(var_4095)
output = call_4096
func_4097 = relay.Function([var_4095], output)
mutated_mod['func_4097'] = func_4097
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3112_call = mod.get_global_var('func_3112')
func_3114_call = mutated_mod.get_global_var('func_3114')
call_4117 = relay.TupleGetItem(func_3112_call(), 1)
call_4118 = relay.TupleGetItem(func_3114_call(), 1)
func_3666_call = mod.get_global_var('func_3666')
func_3668_call = mutated_mod.get_global_var('func_3668')
call_4124 = relay.TupleGetItem(func_3666_call(), 0)
call_4125 = relay.TupleGetItem(func_3668_call(), 0)
func_1982_call = mod.get_global_var('func_1982')
func_1983_call = mutated_mod.get_global_var('func_1983')
call_4136 = relay.TupleGetItem(func_1982_call(), 0)
call_4137 = relay.TupleGetItem(func_1983_call(), 0)
uop_4140 = relay.cos(call_4117.astype('float64')) # shape=(1, 15, 8)
uop_4142 = relay.cos(call_4118.astype('float64')) # shape=(1, 15, 8)
output = relay.Tuple([call_4124,call_4136,uop_4140,])
output2 = relay.Tuple([call_4125,call_4137,uop_4142,])
func_4150 = relay.Function([], output)
mod['func_4150'] = func_4150
mod = relay.transform.InferType()(mod)
output = func_4150()
func_4151 = relay.Function([], output)
mutated_mod['func_4151'] = func_4151
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3906_call = mod.get_global_var('func_3906')
func_3907_call = mutated_mod.get_global_var('func_3907')
call_4177 = relay.TupleGetItem(func_3906_call(), 3)
call_4178 = relay.TupleGetItem(func_3907_call(), 3)
func_3395_call = mod.get_global_var('func_3395')
func_3399_call = mutated_mod.get_global_var('func_3399')
var_4183 = relay.var("var_4183", dtype = "int16", shape = ())#candidate|4183|()|var|int16
const_4184 = relay.const([False,False,False,True,False,True,False,False,True,True,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,False,True,False,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,True,False,False,False,True,True,False,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,True,True,True,False,True,True,False,False,False,True,True,True,False,False,True,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,True,True,True,True,True,True,True,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,False,True,False,False,True,False,False,False,True,True,False,False,True,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,True,False,True,True,False,True,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,True,False,True,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,False,True,True,True,False,False,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,True,True,True,False,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,False,False,False,True,True,True,True,False,True,False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,False,False,True,False,False,False,False,True,False,False,False,True,True,True,False,True,True,True,False,True,True,False,False,True,False,False,True,False,False,True,True,False,True,True,False,False,True,True,True,False,True,True,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,False,False,False,False,True,False,False,False,True,True,False,False,True,True,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,True,False,False,True,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,True,False,False,False,True,False,True,True,False,True,True,False,False,False,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,True,False,True,False,False,False,True,True,False,True,True,True,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,True,False,True,False,False,True,False,True,False,True,True,True,False,False,True,False,False,True,False,False,False,True,False,True,True,False,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,False,False,True,True,False,True,True,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,True,False,False,False,True,False,True,False,True,True,True,False,False,False,True,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,False,False,True,False,False,True,True,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,False,False,True,True,False,True,True,False,True,False,False,True,False,False,False,True,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,False,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,True,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,True,False,False,True,True,False,False,False,True,True,False,False,True,False,False,False,False,True,True,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,True,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,True,True,True,False,True,True,False,False,True,True,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,True,False,True,False,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,False,False,False,True,True,False,False,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,True,False,True,True,False,False,True,True,False,False,False,False,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,False,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,True,True,False,True,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,False,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,True,False,False,True,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,True,True,False,True,True,False,True,False,False,False,True,True,False,False,True,True,False,False,True,False,True,True,True,True,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,True,True,True,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,False,True,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,False,True,False,False,False,False,False,True,False,False,False,True,True,False,False,False,False,True,False,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,True,True,True,True,True,True,False,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False,False,True,True,True,True,False,False,False,False,True,False,True,False,False,False,True,True,True,False,True,True,True,True,False,True,False,False,True,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,True,False,True,False,True,True,True,False,True,False,False,True,False,True,True,True,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,False,False,True,True,True,True,True,False,False,False,False,False,True,True,False,False,False,False,True,True,False,True,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,False,False,False,True,False,False,False,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,True,False,True,True,True,True,False,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,True,True,True,True,False,False,False,True,True,True,True,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,True,False,True,True,True,True,True,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,False,False,True,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,True,True,False,False,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,False,False,False,True,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,False,True,True,False,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,True,True,True,True,True,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,True,False,False,True,False,True,True,True,True,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,False,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,False,False,False,False,True,False,True,False,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,True,False,True,True,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,False,False,False,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,False,True,True,True,True,False,True,False,False,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,True,True,True,True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True,True,False,True,False,True,False,False,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,False,False,True,True,False,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,True,False,False,True,True,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,True,False,True,True,False,False,True,True,True,False,False,False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,True,True,True,False,True,False,True,False,True,True,False,False,True,False,False,True,True,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,False,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,False,False,False,False,True,False,False,False,True,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,False,True,True,False,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,False,True,False,True,True,True,False,True,False,True,True,True,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,False,False,True,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,True,False,False,True,True,True,False,True,True,False,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,True,True,True,True,True,True,False,False,False,True,True,False,False,True,False,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True,False,True,False,False,True,True,True,True,True,True,True,False,True,False,True,False,False,True,True,False,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,False,False,True,False,True,False,False,True,False,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,False,False,False,True,True,True,False,True,True,True,True,False,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,False,True,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,False,True,True,True,False,False,False,False,True,True,True,True,False,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,True,False,False,True,False,True,True,False,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,True,True,False,False,True,True,True,True,True,True], dtype = "bool")#candidate|4184|(3360,)|const|bool
var_4185 = relay.var("var_4185", dtype = "float32", shape = (21, 1))#candidate|4185|(21, 1)|var|float32
call_4182 = relay.TupleGetItem(func_3395_call(relay.reshape(var_4183.astype('int16'), []), relay.reshape(const_4184.astype('bool'), [3360,]), relay.reshape(var_4185.astype('float32'), [21,]), ), 1)
call_4186 = relay.TupleGetItem(func_3399_call(relay.reshape(var_4183.astype('int16'), []), relay.reshape(const_4184.astype('bool'), [3360,]), relay.reshape(var_4185.astype('float32'), [21,]), ), 1)
uop_4194 = relay.log10(var_4185.astype('float64')) # shape=(21, 1)
output = relay.Tuple([call_4177,call_4182,var_4183,const_4184,uop_4194,])
output2 = relay.Tuple([call_4178,call_4186,var_4183,const_4184,uop_4194,])
func_4211 = relay.Function([var_4183,var_4185,], output)
mod['func_4211'] = func_4211
mod = relay.transform.InferType()(mod)
mutated_mod['func_4211'] = func_4211
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4211_call = mutated_mod.get_global_var('func_4211')
var_4213 = relay.var("var_4213", dtype = "int16", shape = ())#candidate|4213|()|var|int16
var_4214 = relay.var("var_4214", dtype = "float32", shape = (21, 1))#candidate|4214|(21, 1)|var|float32
call_4212 = func_4211_call(var_4213,var_4214,)
output = call_4212
func_4215 = relay.Function([var_4213,var_4214,], output)
mutated_mod['func_4215'] = func_4215
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4235 = relay.var("var_4235", dtype = "float32", shape = (1, 6, 1))#candidate|4235|(1, 6, 1)|var|float32
uop_4236 = relay.rsqrt(var_4235.astype('float32')) # shape=(1, 6, 1)
output = relay.Tuple([uop_4236,])
output2 = relay.Tuple([uop_4236,])
func_4252 = relay.Function([var_4235,], output)
mod['func_4252'] = func_4252
mod = relay.transform.InferType()(mod)
mutated_mod['func_4252'] = func_4252
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4253 = relay.var("var_4253", dtype = "float32", shape = (1, 6, 1))#candidate|4253|(1, 6, 1)|var|float32
func_4252_call = mutated_mod.get_global_var('func_4252')
call_4254 = func_4252_call(var_4253)
output = call_4254
func_4255 = relay.Function([var_4253], output)
mutated_mod['func_4255'] = func_4255
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4257 = relay.var("var_4257", dtype = "float32", shape = (14, 10, 1))#candidate|4257|(14, 10, 1)|var|float32
uop_4258 = relay.cos(var_4257.astype('float32')) # shape=(14, 10, 1)
uop_4262 = relay.sinh(var_4257.astype('float32')) # shape=(14, 10, 1)
var_4265 = relay.var("var_4265", dtype = "float32", shape = (14, 10, 16))#candidate|4265|(14, 10, 16)|var|float32
bop_4266 = relay.not_equal(uop_4262.astype('bool'), var_4265.astype('bool')) # shape=(14, 10, 16)
output = relay.Tuple([uop_4258,bop_4266,])
output2 = relay.Tuple([uop_4258,bop_4266,])
func_4270 = relay.Function([var_4257,var_4265,], output)
mod['func_4270'] = func_4270
mod = relay.transform.InferType()(mod)
mutated_mod['func_4270'] = func_4270
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4270_call = mutated_mod.get_global_var('func_4270')
var_4272 = relay.var("var_4272", dtype = "float32", shape = (14, 10, 1))#candidate|4272|(14, 10, 1)|var|float32
var_4273 = relay.var("var_4273", dtype = "float32", shape = (14, 10, 16))#candidate|4273|(14, 10, 16)|var|float32
call_4271 = func_4270_call(var_4272,var_4273,)
output = call_4271
func_4274 = relay.Function([var_4272,var_4273,], output)
mutated_mod['func_4274'] = func_4274
mutated_mod = relay.transform.InferType()(mutated_mod)
func_572_call = mod.get_global_var('func_572')
func_573_call = mutated_mod.get_global_var('func_573')
call_4313 = relay.TupleGetItem(func_572_call(), 0)
call_4314 = relay.TupleGetItem(func_573_call(), 0)
func_4270_call = mod.get_global_var('func_4270')
func_4274_call = mutated_mod.get_global_var('func_4274')
var_4320 = relay.var("var_4320", dtype = "float32", shape = (140,))#candidate|4320|(140,)|var|float32
const_4321 = relay.const([-3.761789,-0.409797,7.678412,9.995688,5.178297,4.918666,7.798793,9.177387,-0.080826,-8.598895,7.992934,5.445676,-1.757594,4.436042,5.099415,-0.628822,3.913928,-4.505534,4.685387,7.498535,-7.719619,-0.822943,0.765056,3.776096,6.304000,4.905916,-4.082686,9.556487,5.129592,-8.470238,-6.576690,-7.411402,4.260794,5.521139,1.100301,0.330257,2.350397,6.289813,3.614648,3.886648,1.894403,5.641689,0.049318,-4.959201,-2.671472,-6.936944,2.958100,-5.730199,0.225674,8.475754,2.176988,-8.051899,4.169873,8.997993,7.679052,9.241964,0.084507,-8.753530,5.258278,-5.821645,2.002428,9.953699,2.552238,9.486786,1.112523,3.280542,1.679121,5.157200,-4.948995,-9.996402,0.881247,-9.854004,-5.246073,-7.954801,1.979697,2.312263,9.867870,6.955075,7.817884,3.796134,-2.264202,1.390958,-6.829081,-2.243118,6.099371,-2.437610,-3.595379,5.932135,8.303149,2.050996,-9.982695,6.020149,9.749327,8.818298,7.893969,6.199084,0.595947,-8.633029,3.606459,-4.649290,3.751042,-9.722783,6.236365,-0.922767,4.046692,9.876508,3.221743,9.860244,-6.429919,6.510812,2.766768,0.156579,2.297810,-4.462275,-5.029505,1.986114,-7.105560,6.208287,7.289030,-0.771003,6.278183,2.781426,7.656627,9.537818,5.696034,2.843228,7.898406,5.008530,-4.811507,-4.291211,0.726529,-8.191955,1.304845,8.098679,-3.911110,0.588972,-8.412443,-7.209372,9.453283,6.894301,-4.681822,0.753354,5.449572,-5.712471,-8.448438,-4.753044,-3.127828,8.513370,-0.170363,-1.279794,8.484530,1.924475,-2.451269,9.753935,1.242904,-9.098356,7.506983,-3.637483,9.116930,8.873220,6.369187,8.893311,-5.931147,7.326460,0.497062,7.003630,8.248946,-9.026912,-7.983825,3.787934,-2.117856,6.321239,2.791693,-7.274128,-4.755261,-9.365086,6.254692,0.919431,3.866907,6.006727,9.509577,4.702297,8.094791,-9.700849,8.735856,5.299821,-2.756705,8.833640,-5.365719,-4.270070,4.935936,-9.807246,-7.919983,6.142065,-0.115040,-8.663192,3.583521,-1.757819,-3.867540,2.820264,-5.688699,7.605980,2.327185,-6.694927,8.162514,6.274616,-9.521079,1.513090,5.329948,-9.583326,7.038877,5.281088,-8.728077,9.752434,1.564263,-7.433740,-6.734612,-9.308873,-5.803028,8.769682,9.570278,1.173214,6.797941,-2.963504,9.931168,-2.787590,1.980851,2.662519,-8.413785,-1.048344,5.391349,0.205050,8.370175,-7.448127,3.545595,4.900689,-7.729732,-2.340643,6.489269,-9.752472,1.233622,-5.805006,8.505583,-7.914150,-6.196597,4.475919,4.891017,2.450942,-7.936719,-1.037940,-7.786029,-2.899111,-5.505277,-8.953550,7.906286,-6.724197,1.524013,8.393192,8.049146,-5.643228,8.703163,6.925600,9.131933,3.277651,-4.950761,8.953463,6.594317,5.450908,-6.318778,6.397528,2.480780,-3.720536,-5.859982,1.930630,2.851036,-9.237551,3.735711,8.972620,-3.550073,-0.094301,-5.813196,1.826763,7.801325,-5.804865,-5.050752,4.425910,5.912514,9.349856,0.881858,5.261134,-2.677697,6.601514,-4.670007,-4.037434,2.289743,3.678358,-0.855844,2.356891,-7.123957,5.046418,-5.559967,-9.562891,-5.948856,4.235227,-7.429469,-1.378387,-4.273718,-3.963503,-8.892162,-6.738039,0.414406,-5.103839,-5.444088,4.546240,3.430303,-0.942847,4.912501,2.875350,-9.656081,3.808410,-7.852642,8.647817,-4.239801,7.014033,3.766397,-9.907225,6.707653,-3.188618,5.550539,-0.790818,7.869733,-2.005493,0.957207,-0.775726,-8.969182,-8.408639,-5.063263,-9.958393,7.378354,7.574937,7.005256,9.420728,-2.243754,-7.832099,8.834094,-3.173362,9.388823,8.822031,2.555766,-9.061088,-9.557148,-6.469250,1.936534,4.267119,-8.933436,3.484058,-0.211956,-7.410567,-8.487856,-2.801420,-9.389206,-0.916391,2.701692,-8.985180,-1.265573,3.313339,-2.991101,8.264862,-1.932466,-9.993744,0.299119,-4.678257,2.507518,3.437216,3.385077,1.126678,-0.161272,-2.805657,-8.784430,-9.385088,8.726606,0.890998,1.776572,7.869298,7.385106,-9.260122,2.940337,-2.977500,-0.915695,7.055761,-6.131543,9.004944,-3.169687,-0.256367,-8.459660,3.896731,-7.760669,6.899788,9.811517,8.186744,2.304532,-0.259733,-7.465826,3.567843,-6.585561,4.773748,4.644137,0.121061,-1.143024,-8.482081,2.048091,-5.731704,-1.618412,9.526791,4.730474,-3.613741,2.108843,8.539312,-1.879010,-6.053519,5.108113,2.010001,-1.728823,3.055063,-4.369181,1.589249,8.556894,-8.896770,-4.498475,-9.085841,-8.594499,-9.204366,2.053745,-4.688416,-3.767623,-3.404184,-2.289638,-7.774328,-3.410688,2.305418,-9.622959,-3.447326,-8.600365,6.840944,6.966612,-2.436909,3.470871,8.024845,6.525336,-2.429243,-0.555324,7.674563,-2.507307,6.098453,5.540371,9.595211,6.042038,-0.479123,-8.909659,-7.101254,4.202348,-8.121963,5.672600,2.388839,4.451623,-0.998998,-1.984427,-7.699567,-5.486546,9.485178,-1.181012,4.608311,7.400042,5.692204,6.055704,4.730659,5.726035,0.085615,2.832701,2.860659,-9.348486,-8.182998,8.388345,8.063781,-0.296237,-7.154951,-2.835895,-9.705237,7.162737,6.045288,-4.223574,6.313143,-4.883945,-0.619904,0.387686,-9.634610,-5.100600,-4.792511,9.283100,8.922317,-0.834077,-9.896575,7.531733,-4.483143,4.598725,3.887843,-4.108711,4.335495,-3.011769,-4.987751,7.208143,7.503903,0.471688,1.359290,-5.613760,-1.015954,-3.234570,4.725130,-5.069640,-5.997779,4.459759,8.447103,-0.665551,7.693310,-1.387113,-5.149556,-1.816173,7.930288,0.531123,4.757923,7.696730,4.438441,-9.042051,3.338128,-4.067161,-6.086438,-1.069443,-4.172944,-4.332416,4.365725,7.426020,-9.915498,4.102723,-3.908542,5.095490,-3.309917,0.254138,-5.652659,-8.470936,-3.210381,-9.251332,2.273750,-7.087280,7.195961,2.419628,-4.323054,8.523886,-1.591770,-8.384230,1.748949,-5.470357,1.735572,2.117754,-3.724927,5.981550,8.661825,5.513904,-5.459465,-9.401212,3.574496,-5.217246,-4.889564,-1.270371,3.889948,0.059306,-5.288822,-9.607126,-9.904720,-7.247658,-5.601814,0.455662,0.982096,-4.724607,1.981797,6.956402,-7.757505,-0.858508,8.107086,8.617806,3.051290,-7.911245,3.672094,6.065874,-8.517735,-8.341717,-3.418913,-2.857793,-4.702261,2.379192,1.660125,-5.081434,0.885827,2.689288,-4.384895,1.772661,0.044122,4.233273,-6.908086,-1.908516,-3.005722,0.843651,0.990330,-1.769353,-1.937439,5.121478,0.098144,2.454375,-2.596799,3.239964,-8.543561,-6.413311,-8.440780,-4.284693,5.012265,-1.380790,2.693259,-0.261298,0.804776,-0.460267,-9.901824,-8.240838,-8.603192,-8.980754,-5.324473,7.878583,-2.767822,-2.620432,8.132071,-4.992418,-8.007817,3.153910,-5.732654,-8.161686,-6.014003,-9.878362,-1.870818,-2.817626,-7.439117,1.148888,9.973411,8.126410,-0.567304,-6.736308,-8.306828,-5.519529,4.776441,-9.986418,1.775151,-8.908971,-1.622090,4.790026,3.624031,1.785799,-2.964228,-1.142225,8.584055,-2.494709,2.449063,3.852344,4.292701,-6.340890,3.335960,-8.985239,2.534405,6.012602,7.450215,-1.175546,-5.151032,3.033484,-4.483205,-5.202962,1.062228,-3.856687,-9.422951,2.589291,7.471943,-8.339445,-2.362165,-1.997000,0.141850,7.583567,-4.067714,2.813364,5.453549,4.135425,-5.903363,9.312764,-7.935435,0.950749,-3.204751,-0.807577,-3.759683,-0.866378,-1.063173,7.892894,-2.278512,-6.624938,-0.391127,-0.891651,-5.142121,-1.062816,6.441046,1.000967,2.035781,-5.554067,5.001866,5.165162,-1.701719,-0.174271,-1.424556,-3.848256,0.188792,5.463794,1.502359,3.989405,-6.508586,-4.870145,-4.643022,4.165882,-7.879129,2.162903,0.534981,-5.674201,-3.175508,-1.535661,-4.347955,-6.172833,3.923147,3.771614,7.849868,7.587627,-9.593047,9.330173,1.728855,-0.607699,5.613407,6.008670,1.023945,-7.659929,-7.528260,-3.315295,7.453345,-7.001867,0.349671,6.219535,4.901511,-1.443957,9.722185,-7.817191,-5.527519,-3.521978,-2.069497,-2.504864,8.512007,7.900165,2.738677,-7.730283,-9.717890,-6.320736,5.311692,-1.734105,-8.629746,-8.159413,0.136061,-3.182458,-9.654239,8.117763,-5.118532,-6.877054,-7.774662,9.621778,3.167538,-8.835580,2.502130,3.915237,9.358493,5.398721,-8.576335,4.639997,-8.675254,-7.768025,-6.299374,8.494918,9.186990,7.065534,3.835712,-3.656384,-4.306133,8.688533,7.620881,-0.872603,-7.790924,-2.179161,-8.377233,-8.492145,1.559044,6.532341,-4.757052,-9.382275,-7.875627,3.929758,-3.785289,-9.089980,3.499700,-3.173073,0.676329,0.899307,-1.762496,-2.115912,4.685470,0.932153,0.042851,-0.024084,4.006767,-8.441212,-6.803654,-8.312475,3.860732,-5.917150,-5.174326,5.999087,0.454835,4.528386,-0.381927,-9.473036,7.122630,-3.616103,-0.393048,-6.396511,4.193898,5.992940,1.772871,-8.654105,4.269187,1.278537,-2.560882,6.014764,8.230710,5.846857,-6.653860,5.365503,-3.667934,6.064764,-9.378688,-7.601856,-9.286949,-9.655014,7.946067,-1.422136,3.228142,-9.813893,-0.148952,8.765151,3.917940,9.109567,6.167312,5.972925,-4.515138,-3.603586,-8.695457,-1.259897,3.888103,-2.706286,5.907421,7.138580,-5.970859,-1.901965,6.041675,-7.930039,7.323815,-0.233787,-3.517991,-1.229757,-1.305801,-1.108333,0.947343,8.968657,8.300037,-3.680015,-5.414579,8.578315,2.281646,1.020391,4.485335,1.810467,4.647759,2.074405,4.944994,-6.062235,0.977946,9.928414,9.780880,3.606613,-2.565228,-0.102706,0.776666,-1.122114,3.463496,3.014351,7.075123,0.048141,-0.115607,3.455717,-2.741779,-1.805763,-1.438677,1.788093,-6.872397,-5.911891,-2.526273,-6.427783,-7.617033,-3.225613,-8.067690,-6.098626,9.770619,4.031020,4.295091,8.761608,-8.149964,9.213674,0.777650,1.435414,7.647971,3.416073,-2.483105,4.957283,-9.561312,-0.311078,7.041992,-1.498884,2.549491,-2.582684,-4.993996,-8.103976,3.239176,4.795391,-2.375152,0.025537,-1.400696,7.995818,-5.660924,6.535860,4.748640,4.643833,8.412653,1.391407,9.025203,6.217949,9.516544,1.263478,7.406485,-9.671735,0.842049,3.483486,-7.149868,-5.488369,3.608669,3.864553,1.747177,5.157786,-1.149041,3.010294,-0.580916,-0.203639,2.618351,2.783615,-3.253443,-3.022508,4.305278,-1.498387,5.615718,-8.728087,-9.619509,0.100291,-6.239304,-3.264707,5.713230,0.300736,-1.073385,9.257180,0.410965,-1.449283,-1.986815,7.267390,-0.270446,8.324733,-7.528948,-8.985996,8.039139,-7.174606,-0.045817,3.204771,1.566715,-0.863132,-6.519108,2.013072,-5.088320,9.998127,-1.677023,-0.404614,-4.931646,-2.074195,1.893097,-0.389113,-2.302332,-6.224823,0.077411,-2.209681,-9.036137,4.703325,0.465390,-4.551919,-1.637971,-1.537479,-1.787665,-8.913341,9.026551,0.218548,2.722913,9.833833,2.226662,3.472600,4.259546,1.655172,-7.205915,-4.469329,9.650420,6.645818,9.676819,-7.244861,-7.387526,-0.678437,-6.895582,-4.309677,8.494841,3.500008,4.566135,-7.241810,6.979207,0.848234,-0.924866,6.594268,-9.788251,2.216423,-1.162703,-3.173991,-6.327333,-3.980483,-6.507092,3.025063,3.525166,-8.363852,4.938589,1.951461,-7.948085,-5.040022,7.928225,-9.507878,-8.776182,6.800379,-8.946669,2.882534,-7.185525,0.481048,-0.507149,5.887986,0.048144,-5.027395,-2.746580,4.277865,-8.400916,5.092384,2.868203,-4.921670,3.379751,0.294394,2.065868,2.659035,-9.172757,-3.851746,9.292806,-9.328870,-8.777516,7.969091,9.580620,5.095648,-5.063942,9.664000,1.552287,7.527717,6.195804,-3.989887,6.448544,-4.136113,-4.573672,-1.743582,-5.556768,-3.379899,2.313344,4.720282,8.691379,4.246017,2.098095,6.501953,-0.920930,-5.193709,3.680987,-9.278019,-1.564538,6.040887,3.620194,-4.778886,-9.073459,-4.038974,-8.770358,-5.340647,5.749986,8.126470,-3.653035,1.017917,7.947944,-4.068569,-2.248599,2.611329,-0.259106,1.034145,-0.563476,8.739817,-9.655668,-6.717482,-7.536270,-2.745143,-4.427244,-2.487573,2.082020,7.555448,0.875180,7.368550,-5.101812,-1.001810,0.110441,7.977729,8.381391,3.628543,-1.236554,-0.757507,-7.998447,-4.284737,-7.153525,-7.640603,-3.240919,-4.701416,3.670686,6.532317,-3.068735,-0.573404,7.270256,4.709734,5.520452,4.567535,0.210307,-0.986806,-6.617647,-5.340752,2.654279,-6.064714,1.838392,-5.009216,8.746045,-8.235973,3.571306,4.774480,-7.416979,-3.644886,0.957448,-1.924803,8.181368,4.905096,0.471504,2.994639,-0.229212,5.471852,-1.764505,-2.722700,2.964687,-1.207874,-5.386050,-4.416147,-4.875038,-9.947604,-8.994262,-9.954743,4.352221,1.433636,-8.697383,0.002213,5.717191,-1.223473,-1.214839,0.751404,6.882588,5.666908,9.149780,5.818523,-6.879163,-1.223354,-6.487471,-2.683654,-7.112878,-5.126834,-7.296129,2.038943,-9.808601,-5.905756,-2.922001,5.289703,7.106361,9.626767,-8.299802,-6.282873,-4.995057,5.532773,-1.532914,-6.810612,9.280185,6.346077,3.549802,7.877842,-4.454158,-5.572809,6.936142,-5.719838,-7.127748,-7.803088,-9.917203,7.551262,6.188938,1.833434,6.175938,-6.536925,3.096366,-7.189256,-8.710608,-7.006962,5.546943,6.282103,-9.508090,2.668475,-6.546796,9.128919,5.393541,1.507408,5.821306,-9.198887,6.724456,-7.459946,-3.461048,1.286078,-2.265644,2.178383,-0.264605,8.250557,-3.336764,-6.694256,-3.961851,-8.326611,-1.906637,-4.907084,-2.702423,-7.605750,3.200798,-3.262279,-5.070134,-1.579768,-9.752543,-3.271636,-4.044032,3.329457,9.948208,9.836770,-7.854764,0.017225,-5.767665,-6.222791,-6.171889,-4.537305,0.486772,2.930644,-9.181675,1.442198,0.542281,0.125836,7.320084,-2.393641,-8.234571,-1.622360,6.709234,-5.353317,8.824739,8.545702,9.817736,8.227224,-9.895738,-7.119088,-6.717783,5.146250,-5.132712,6.187632,-8.626770,-5.473764,-0.084218,3.558310,-5.354803,3.278492,-3.780184,9.076142,-6.443650,7.358426,1.898040,0.687379,4.734572,6.645600,6.041805,2.904612,-6.565803,9.051585,-7.282319,8.960198,-4.654460,-0.477928,1.237282,-1.045798,-7.939044,-0.187813,-2.516663,8.180649,5.114803,4.268760,5.547373,-3.320502,-1.723032,-9.048474,-6.114230,5.715317,-2.667578,8.158605,8.593102,9.042666,5.147456,8.126768,1.793572,8.241209,2.172124,-3.720495,4.783204,-4.261440,-9.003618,-6.027960,-9.699793,8.893607,0.735443,-6.631674,-8.143170,-4.401058,-1.447783,9.839808,-6.582720,-8.042450,9.748121,7.337535,1.729515,-6.496623,-8.705750,-0.752976,-3.026306,-8.025440,-2.708361,-8.111188,-3.043746,6.692510,-0.063695,2.115564,8.987822,-3.178710,-3.319404,-3.659466,-1.716138,9.298939,6.308641,2.493554,5.580184,-3.026949,4.639088,-5.201902,6.708796,-0.608936,6.222704,8.063953,3.684340,9.440756,8.098367,7.851858,2.751789,-7.548709,-5.925842,-0.370830,8.385187,9.914404,-7.974309,3.475670,3.814465,5.836487,3.156813,-3.068056,8.809736,-9.048467,3.332293,-8.349306,-5.662216,0.497990,-9.559773,-2.547110,-6.225992,-6.131250,2.766396,6.173208,9.334765,0.574087,2.139100,6.385832,-0.892354,4.399237,4.782340,-9.742427,-4.072364,-7.795756,6.013506,7.728748,5.286102,-1.721452,3.321243,2.740957,4.596787,1.547259,-4.264697,1.730111,-1.791939,-4.242985,-8.889405,6.372898,5.030523,1.271423,-0.692468,-7.934800,9.086324,-0.497132,-1.269300,5.947895,3.163271,-0.703224,-2.575990,-7.496060,-0.127958,-8.234985,8.984428,-7.578424,-8.290617,2.151504,-1.361732,-3.943557,5.742739,-0.873931,-6.094916,9.857566,-2.958265,-5.817424,3.466278,6.458902,0.034975,-4.274646,0.192267,5.869376,-8.692999,-1.547008,2.850835,-7.109937,1.433041,-9.314073,7.796737,5.193406,-9.546316,-1.158251,-9.326027,7.433643,5.484983,-8.382177,-3.029910,-7.977241,3.790501,9.742125,5.176434,2.420878,-7.849669,1.882126,9.696243,6.171832,-0.690395,0.159043,0.039013,-6.482994,-5.326998,8.153693,6.154158,5.892781,-8.583629,8.181679,1.444615,8.031964,-1.784007,1.248760,7.172241,5.158466,-0.804215,8.072573,-6.954058,-0.786755,-4.794881,6.032375,-8.398076,-0.987458,-1.194206,-2.256359,-3.521761,8.203408,-4.430366,-7.827914,-2.536509,9.659133,-2.358715,-8.216963,7.298687,0.918997,1.297950,2.269578,-6.879419,-7.763341,4.541084,-0.883214,-3.543387,-3.149485,-0.687572,0.294696,6.385390,4.660267,0.586531,-6.246764,-6.821073,-4.713603,-2.001149,6.467708,-2.445624,4.685058,3.859244,4.218537,-8.187342,-6.341169,3.851223,4.336871,9.283523,-8.682487,-6.796745,2.643777,0.081043,-6.846836,4.017181,-6.645525,-8.375532,3.891253,3.882290,1.510960,-0.208109,-0.611439,3.231498,-7.526181,-4.138914,6.058988,5.895174,3.888597,9.561199,6.835245,-5.127038,-6.935771,4.756010,-8.489819,-0.510937,-7.000750,5.870204,-4.832933,-5.060589,2.244605,-1.879270,-6.084301,2.202007,-3.493666,7.646244,3.707463,7.771588,-9.327619,4.835249,0.701776,8.857441,7.004294,-0.312168,9.387468,-6.996092,9.766905,-7.966735,0.724852,0.355565,-8.324928,7.543524,-4.007178,1.378126,6.081303,3.573112,-0.725974,5.880225,-8.668452,-6.933615,-4.513908,-8.205520,0.869133,9.002434,1.211326,-5.517948,-2.034106,1.366279,-9.138515,3.217445,-5.668756,-9.436319,5.171102,-2.425311,9.730533,-1.861786,0.521568,7.093363,7.638604,8.808246,4.395013,-8.606845,9.389558,5.867537,-9.943347,-0.445898,4.263286,8.896828,-3.383683,-4.005495,-1.120763,7.087012,-5.239208,-8.344131,-5.220507,-8.661019,8.914117,1.168281,-4.576435,-6.162212,7.702279,7.034916,6.301902,-4.736069,-9.606084,4.050744,0.053971,6.946941,4.681390,9.981414,1.989189,-3.521477,-2.004279,-3.104935,-4.395050,5.023010,2.789566,-0.661269,7.083476,-7.542097,-9.170206,2.314805,-1.204788,6.587019,-0.466162,8.596790,-1.465312,0.784754,2.019968,7.814170,-9.548362,-3.447661,-5.747872,5.345671,9.559765,0.026426,4.990504,4.324443,2.615406,-3.926217,2.115703,-6.351118,4.849045,-0.646706,2.606887,-5.116788,-6.186636,8.528384,5.982418,-6.216125,-7.493535,-5.388451,-6.559872,7.905675,-3.564888,-2.348312,-2.231110,8.285017,-9.698610,-6.337967,-5.815866,9.309540,0.948171,4.921416,2.811706,9.392217,6.552093,-6.174431,4.335149,-5.331789,4.545594,0.639615,0.861132,5.069108,-2.705342,3.654946,-4.122008,4.771850,3.667006,-7.294440,9.136191,-9.100347,-5.249167,-0.827003,-0.237942,0.820686,5.114466,2.740461,-4.354343,-2.493139,8.109818,9.025447,5.337125,5.519202,1.121781,8.832662,-5.289120,7.465481,-9.530834,-7.048343,-8.550961,-0.674842,7.781068,-6.637284,-7.818138,-0.546166,-3.807787,0.701060,6.018047,-8.261871,0.619279,3.596305,6.618992,-4.330755,-3.392913,7.697865,-5.368500,8.372181,5.165090,6.692008,-7.248298,7.112526,8.415109,-4.658456,-4.839193,3.154504,9.091329,9.305917,-2.243449,-7.979062,-7.228784,6.030766,-8.465164,-0.591156,9.265227,0.967905,-9.679328,-6.036643,-2.952521,-7.512324,-4.681609,-5.908575,-9.128472,-8.113214,2.806036,3.597140,-8.602088,-0.066464,1.367843,1.646867,9.135535,9.929870,7.917449,3.487503,-3.172808,-6.102721,-8.338727,-8.859088,-5.220886,6.658463,-0.576060,-5.257939,3.358858,1.590630,7.622697,3.224053,4.964107,-2.248406,1.625847,-2.235604,9.803824,-2.727109,2.829231,-7.122500,8.021116,7.408166,8.912404,2.684091,1.076352,8.194142,9.960925,4.569906,0.729214,4.881563,2.211087,2.552949,1.433824,-5.721808,-1.242545,-8.440357,-5.785008,1.414338,2.451793,2.114384,4.389250,-0.328339,7.007399,-1.504058,6.839786,5.122422,1.788300,-9.556497,-3.104064,-7.015462,7.402485,4.607034,-2.128822,0.586406,9.859394,-6.010547,-1.623056,2.218321,-4.028380,-9.293006,5.604770,7.315668,-6.718664,5.290575,-5.088210,-0.161888,0.055488,-3.738232,-7.536480,0.123890,-2.505956,3.856466,-8.513174,-3.562351,-9.100225,8.233152,1.344092,-1.306729,-1.616789,-6.213088,3.138065,-9.643266,-0.836013,8.857766,1.751791,-4.404159,-1.671218,-8.207661,-1.263888,-3.356276,6.653897,2.347408,-7.009548,0.646895,4.689848,4.607605,-4.073542,4.953672,-4.935623,6.572797,-0.470987,1.057246,8.040766,4.329795,1.338225,-8.314703,4.776314,5.760148,-2.653846,-4.113253,-6.414507,-1.823911,-9.764226,-2.032041,-1.091974,-7.754248,6.416370,-6.449978,0.546064,7.456437,6.450024,4.954904,6.471752,-9.964720,2.235302,2.082858,-3.251533,-6.383475,-8.247384,-1.363239,8.315396,3.320290,-6.305407,4.034985,2.349193,-5.388540,5.672575,-3.251629,-2.924020,-5.052428,0.265986,-8.454256,1.240821,-2.741033,6.298549,3.550697,7.302324,6.755150,-6.683664,0.049021,7.476316,-3.967263,-7.273266,3.330229,3.441127,-3.461916,-7.820270,-7.536470,-0.051636,9.477886,6.974886,-2.777350,5.921963,4.513625,-6.437098,1.175380,-5.986790,-1.815462,-4.283317,-6.675830,7.754701,1.815510,4.682654,-4.844984,-1.819783,3.121402,-0.381313,4.485899,0.061887,0.032703,4.639623,-8.622585,-5.416439,-6.754138,-8.027560,-8.039652,-0.181056,3.645090,7.442132,1.330531,1.360760,-8.215370,-7.436282,3.743788,-9.281104,2.845456,-4.880044,4.540849,8.649447,6.264221,-4.770669,7.865229,1.615891,-0.357146,-0.997322,7.395509,-1.887014,3.662750,2.829692,7.276720,6.265671,1.616125,-8.430901,-0.527538,2.628764,0.290220,1.551359,-8.868632,-5.745533,-5.873621,-2.399287,-4.327197,2.739140,6.231669,8.122898,-9.182547,8.153604,-9.423101,-6.610589,5.554849,-5.645230,-6.688277,-4.893445,9.146349,3.633334,7.307244,8.460380,6.031422,-7.393934,4.343800,6.284625,-3.714468,2.511920,-3.468243,-3.783722,0.256068,-1.391518,-8.220227,-2.300473,0.350657,5.555368,5.294138,2.875951,1.105727,6.063850,5.530666,-1.613588,-2.591797,-2.848726,-2.594683,-6.659875,0.819158,6.715482,6.858470,6.540306,2.134130,-9.799305,6.261254,6.038459,1.133589,8.197561,4.151915,-6.411867,-8.071148,-9.200860,4.199265,-2.598388,-7.880960,7.747434,-8.160936,-2.586758,6.227095,-9.538999,-8.139403,-7.317173,4.700508,-1.018094,1.894442,-5.525543,8.202044,-7.336557,1.762997,-1.970472,-7.366916,-9.109826,-3.626116,9.909930,9.036009,6.569373,4.528191,1.592550,1.666799,-2.895256,-4.950840,-7.348606,5.848653,0.813158,-2.844902,-1.208085,8.306503,2.900609,-9.707783,0.465911,-2.898867,3.096554,-2.399858,-9.958348,1.598014,8.233208,8.030344,8.424907,-1.303916,-4.128274,-1.185985,-7.273668,0.439456,-3.294680,-9.744180,3.385881,-3.390840,-5.809073,4.305838,-6.792952,0.378938,-7.940995,-4.901757,-8.875543,-6.044881,8.134860,8.272908,-0.263174,7.260611,-7.846661,8.792823,-6.315857,5.850078,-4.345517,-5.064802,3.631633,-4.764993,-9.343231,6.817564,-8.232518,6.405591,0.240865,1.256513,0.518082,-5.406840,-3.399542,5.261894,7.359192,5.202160,2.259103,-6.426440,-6.662206,0.323079,8.133776,8.323133,-2.686485,0.278420,8.552727,-6.518780,8.922353,2.122727,-1.072320,6.723659,2.385831,6.275091,-0.542643,0.730823,8.916159,0.744650,9.194631,-5.670305,-5.501777,7.061868,-4.550466,-4.089971,-4.810037,1.785752,8.985546,-2.653461,6.725052,3.146257,-0.993211,-6.038185,5.854408,-4.545002,-2.844205,2.138071,2.394666,9.691887,-0.938303,4.396301,5.304657,5.446271], dtype = "float32")#candidate|4321|(2240,)|const|float32
call_4319 = relay.TupleGetItem(func_4270_call(relay.reshape(var_4320.astype('float32'), [14, 10, 1]), relay.reshape(const_4321.astype('float32'), [14, 10, 16]), ), 0)
call_4322 = relay.TupleGetItem(func_4274_call(relay.reshape(var_4320.astype('float32'), [14, 10, 1]), relay.reshape(const_4321.astype('float32'), [14, 10, 16]), ), 0)
var_4328 = relay.var("var_4328", dtype = "float32", shape = (14, 10, 13))#candidate|4328|(14, 10, 13)|var|float32
bop_4329 = relay.greater(call_4319.astype('bool'), var_4328.astype('bool')) # shape=(14, 10, 13)
bop_4332 = relay.greater(call_4322.astype('bool'), var_4328.astype('bool')) # shape=(14, 10, 13)
func_2480_call = mod.get_global_var('func_2480')
func_2483_call = mutated_mod.get_global_var('func_2483')
var_4334 = relay.var("var_4334", dtype = "float32", shape = (21,))#candidate|4334|(21,)|var|float32
const_4335 = relay.const(5, dtype = "uint8")#candidate|4335|()|const|uint8
call_4333 = relay.TupleGetItem(func_2480_call(relay.reshape(var_4334.astype('float32'), [3, 1, 7]), relay.reshape(const_4335.astype('uint8'), []), ), 2)
call_4336 = relay.TupleGetItem(func_2483_call(relay.reshape(var_4334.astype('float32'), [3, 1, 7]), relay.reshape(const_4335.astype('uint8'), []), ), 2)
func_3036_call = mod.get_global_var('func_3036')
func_3038_call = mutated_mod.get_global_var('func_3038')
call_4351 = func_3036_call()
call_4352 = func_3036_call()
func_1160_call = mod.get_global_var('func_1160')
func_1161_call = mutated_mod.get_global_var('func_1161')
call_4359 = relay.TupleGetItem(func_1160_call(), 2)
call_4360 = relay.TupleGetItem(func_1161_call(), 2)
output = relay.Tuple([call_4313,var_4320,const_4321,bop_4329,call_4333,var_4334,const_4335,call_4351,call_4359,])
output2 = relay.Tuple([call_4314,var_4320,const_4321,bop_4332,call_4336,var_4334,const_4335,call_4352,call_4360,])
func_4364 = relay.Function([var_4320,var_4328,var_4334,], output)
mod['func_4364'] = func_4364
mod = relay.transform.InferType()(mod)
var_4365 = relay.var("var_4365", dtype = "float32", shape = (140,))#candidate|4365|(140,)|var|float32
var_4366 = relay.var("var_4366", dtype = "float32", shape = (14, 10, 13))#candidate|4366|(14, 10, 13)|var|float32
var_4367 = relay.var("var_4367", dtype = "float32", shape = (21,))#candidate|4367|(21,)|var|float32
output = func_4364(var_4365,var_4366,var_4367,)
func_4368 = relay.Function([var_4365,var_4366,var_4367,], output)
mutated_mod['func_4368'] = func_4368
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3286_call = mod.get_global_var('func_3286')
func_3288_call = mutated_mod.get_global_var('func_3288')
call_4373 = relay.TupleGetItem(func_3286_call(), 0)
call_4374 = relay.TupleGetItem(func_3288_call(), 0)
func_885_call = mod.get_global_var('func_885')
func_888_call = mutated_mod.get_global_var('func_888')
var_4398 = relay.var("var_4398", dtype = "float64", shape = (600,))#candidate|4398|(600,)|var|float64
call_4397 = relay.TupleGetItem(func_885_call(relay.reshape(var_4398.astype('float64'), [5, 15, 8])), 2)
call_4399 = relay.TupleGetItem(func_888_call(relay.reshape(var_4398.astype('float64'), [5, 15, 8])), 2)
func_3450_call = mod.get_global_var('func_3450')
func_3451_call = mutated_mod.get_global_var('func_3451')
call_4401 = relay.TupleGetItem(func_3450_call(), 0)
call_4402 = relay.TupleGetItem(func_3451_call(), 0)
func_2077_call = mod.get_global_var('func_2077')
func_2079_call = mutated_mod.get_global_var('func_2079')
call_4407 = func_2077_call()
call_4408 = func_2077_call()
output = relay.Tuple([call_4373,call_4397,var_4398,call_4401,call_4407,])
output2 = relay.Tuple([call_4374,call_4399,var_4398,call_4402,call_4408,])
func_4427 = relay.Function([var_4398,], output)
mod['func_4427'] = func_4427
mod = relay.transform.InferType()(mod)
mutated_mod['func_4427'] = func_4427
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4428 = relay.var("var_4428", dtype = "float64", shape = (600,))#candidate|4428|(600,)|var|float64
func_4427_call = mutated_mod.get_global_var('func_4427')
call_4429 = func_4427_call(var_4428)
output = call_4429
func_4430 = relay.Function([var_4428], output)
mutated_mod['func_4430'] = func_4430
mutated_mod = relay.transform.InferType()(mutated_mod)
func_572_call = mod.get_global_var('func_572')
func_573_call = mutated_mod.get_global_var('func_573')
call_4463 = relay.TupleGetItem(func_572_call(), 0)
call_4464 = relay.TupleGetItem(func_573_call(), 0)
func_2585_call = mod.get_global_var('func_2585')
func_2586_call = mutated_mod.get_global_var('func_2586')
call_4478 = relay.TupleGetItem(func_2585_call(), 0)
call_4479 = relay.TupleGetItem(func_2586_call(), 0)
bop_4483 = relay.power(call_4478.astype('float32'), relay.reshape(call_4463.astype('float32'), relay.shape_of(call_4478))) # shape=(1, 15, 8)
bop_4486 = relay.power(call_4479.astype('float32'), relay.reshape(call_4464.astype('float32'), relay.shape_of(call_4479))) # shape=(1, 15, 8)
output = bop_4483
output2 = bop_4486
func_4488 = relay.Function([], output)
mod['func_4488'] = func_4488
mod = relay.transform.InferType()(mod)
output = func_4488()
func_4489 = relay.Function([], output)
mutated_mod['func_4489'] = func_4489
mutated_mod = relay.transform.InferType()(mutated_mod)
func_921_call = mod.get_global_var('func_921')
func_923_call = mutated_mod.get_global_var('func_923')
call_4522 = relay.TupleGetItem(func_921_call(), 0)
call_4523 = relay.TupleGetItem(func_923_call(), 0)
output = relay.Tuple([call_4522,])
output2 = relay.Tuple([call_4523,])
func_4529 = relay.Function([], output)
mod['func_4529'] = func_4529
mod = relay.transform.InferType()(mod)
mutated_mod['func_4529'] = func_4529
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4529_call = mutated_mod.get_global_var('func_4529')
call_4530 = func_4529_call()
output = call_4530
func_4531 = relay.Function([], output)
mutated_mod['func_4531'] = func_4531
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3286_call = mod.get_global_var('func_3286')
func_3288_call = mutated_mod.get_global_var('func_3288')
call_4592 = relay.TupleGetItem(func_3286_call(), 0)
call_4593 = relay.TupleGetItem(func_3288_call(), 0)
output = relay.Tuple([call_4592,])
output2 = relay.Tuple([call_4593,])
func_4594 = relay.Function([], output)
mod['func_4594'] = func_4594
mod = relay.transform.InferType()(mod)
mutated_mod['func_4594'] = func_4594
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4594_call = mutated_mod.get_global_var('func_4594')
call_4595 = func_4594_call()
output = call_4595
func_4596 = relay.Function([], output)
mutated_mod['func_4596'] = func_4596
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1398_call = mod.get_global_var('func_1398')
func_1400_call = mutated_mod.get_global_var('func_1400')
call_4627 = relay.TupleGetItem(func_1398_call(), 0)
call_4628 = relay.TupleGetItem(func_1400_call(), 0)
func_940_call = mod.get_global_var('func_940')
func_942_call = mutated_mod.get_global_var('func_942')
const_4653 = relay.const([4,2,-7,-2,-3,3,-9,-1,8,-3,-8,-1,8,6,-3,-7,-6,-10,4,-6,-6,-4,-5,-4,-10,5,1,2,6,-9,9,-5,-7,-10,9,-9,-6,10,9,4,2,-1,5,-4,1,9,9,7], dtype = "int16")#candidate|4653|(48,)|const|int16
call_4652 = relay.TupleGetItem(func_940_call(relay.reshape(const_4653.astype('int16'), [48,])), 3)
call_4654 = relay.TupleGetItem(func_942_call(relay.reshape(const_4653.astype('int16'), [48,])), 3)
output = relay.Tuple([call_4627,call_4652,const_4653,])
output2 = relay.Tuple([call_4628,call_4654,const_4653,])
func_4656 = relay.Function([], output)
mod['func_4656'] = func_4656
mod = relay.transform.InferType()(mod)
output = func_4656()
func_4657 = relay.Function([], output)
mutated_mod['func_4657'] = func_4657
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4150_call = mod.get_global_var('func_4150')
func_4151_call = mutated_mod.get_global_var('func_4151')
call_4658 = relay.TupleGetItem(func_4150_call(), 0)
call_4659 = relay.TupleGetItem(func_4151_call(), 0)
func_599_call = mod.get_global_var('func_599')
func_600_call = mutated_mod.get_global_var('func_600')
call_4669 = func_599_call()
call_4670 = func_599_call()
func_2915_call = mod.get_global_var('func_2915')
func_2917_call = mutated_mod.get_global_var('func_2917')
const_4673 = relay.const([-5.715084,-0.514941,2.016011,1.256179,-0.964908,-9.371186,6.628735,-0.355687,-9.187332,-7.092561,-9.362411,2.462517,-1.991773,5.436837,-4.669341,1.121055,-8.955701,3.489479,9.469687,6.579594,7.626074,-8.622963,1.513611,2.872891,-0.429603,8.802356,-3.412507,-1.885404,2.276896,-4.341160,-4.757483,1.589174,2.390170,1.592808,8.988641,-2.086398,-6.635323,4.634401,-9.152414,2.514551,-3.684982,4.182133,1.075032,6.042638,3.667263,-1.680419,-6.195562,-6.157541,1.784425,-9.772429,-3.858456,1.318131,0.916940,-1.359136,-5.829446,8.790666,3.075975,6.349310,-3.834089,6.468643,-2.774765,1.229012,3.909746,7.023978,5.896292,7.468493,-3.703043,8.474432,2.386463,2.658210,6.112289,-5.654908,1.172302,-1.501884,6.150128,-6.914991,9.703543,-9.951283,1.779464,6.001034,0.438394,0.234089,-4.905010,-2.902785,-1.139852,7.384630,-1.094321,-5.438233,9.519045,1.511348,1.176617,-4.873107,9.838280,6.539252,-4.566598,-9.015524,-7.011655,-9.219918,-5.456807,-8.340602,-7.740550,-8.103977,-7.853510,9.808612,7.596592,-9.725666,-9.601949,-3.627059,0.933893,-1.858444,-9.646066,3.967787,-5.514519,9.342036,-2.576003,-8.747319,0.637244,3.720467,6.445498,9.675403,3.525810,7.531158,3.239793,-3.372275,-9.731192,-7.189523,4.785480,1.882881,3.244832,-8.906071,-0.176535,1.624244,7.962644,2.310810,5.189893,-7.123156,-5.476655,-6.978620,6.559824,-6.496328,0.888965,-5.885802,1.733582,7.106934,5.394322,-7.766571,-0.334261,3.241775,7.072852,-6.708867,-0.445039,1.705175,9.393776,-9.032609,-4.623353,-7.197398,2.269353,-5.115127,-6.498201,-5.752962,7.640547,3.435177,-6.654887,-1.724063,-8.424239,-8.841418,8.342639,7.071927,7.431942,4.341910,6.066316,5.227465,-4.190902,3.921814,3.542969,-6.001490,-5.894588,-2.751982,4.141769,-6.626320,-9.842528,-2.398037,2.334987,-9.041756,7.633667,-0.463456,8.259697,3.251647,-5.058510,-0.970444,-2.168802,-2.073854,-0.821428,4.873393,3.962472,1.048478,-7.048714,5.296659,-0.567105,-9.211740,5.851145,-4.896825,1.772889,0.363870,-1.373089,0.638928,-7.618994,4.383068,9.614043,-0.962454,5.872886,-4.296980,5.135308,8.665579,6.791200,6.818681,-7.910725,6.176650,-7.360306,2.988920,-9.249144,7.890766,0.097234,0.849982,-9.555760,5.675681,-6.197887,7.201527,-7.543660,7.615901,3.145921,-0.061575,-6.622226,1.900252,-3.352487,8.570780,0.118387,-3.617882,3.891746,4.810388,6.801924,3.238262,-5.923332,-0.802541,7.491847,-2.115548,-0.054582,1.286557,-1.106666,0.575442,5.372207,2.651901,-0.921364,4.041222,-0.676159,7.300757,-5.389366,2.745311,2.412448,0.747554,2.477983,6.683252,-6.085927,-9.233554,4.886013,-1.759587,-5.141870,-0.900044,7.368717,-6.713795,-0.579479,6.021952,0.487664,-4.998707,-2.551322,9.860476,3.825651,-2.506378,0.803881,3.966269,-9.003789,-0.987204,8.492515,7.374144,-3.731082,-6.361742,5.788721,5.531561,-7.250912,-1.437880,4.560957,-2.366802,-9.671796,5.422614,3.949438,9.844687,-7.109836,-9.335288,-7.264728,-8.007382,-8.702540,8.577884,-2.449663,-5.301934,-4.753175,-8.506559,-3.791129,5.951961,2.213720,5.360892,9.579760,-8.176097,-6.281983,3.012142,8.425141,4.930427,1.389480,3.125418,-8.846008,-8.503663,-9.380031,-1.644190,-0.795908,-2.416552,-2.848065,-4.121376,-9.895708,4.634105,-1.326239,3.083696,-3.365309,7.565469,3.054620,-7.464311,-5.151491,0.289125,7.075986,8.941555,8.638125,5.709403,9.460782,0.308153,-8.581733,-7.633266,4.379012,-8.435971,1.080673,0.802960,0.433174,-0.285199,1.270101,-2.795752,3.962564,-4.618814,2.698426,8.494810,3.984849,-9.435138,7.402184,-5.451247,-6.186774,7.355243,-0.386178,9.512747,-8.372056,1.685047,0.378392,-6.436645,-2.949127,5.301226,-7.523564,-9.725273,8.648909,4.585356,-7.093999,3.891146,2.956154,-7.165165,-4.510213,7.467223,9.839880,-3.829782,-0.291481,0.838769,0.882454,0.440388,0.559563,0.259989,-6.614131,-0.754392,7.522213,-1.530534,-6.354499,-9.392810,-9.187573,7.894865,2.367773,-0.011036,-8.543941,-6.854642,-8.739824,4.403994,8.619021,-1.538313,2.285338,-3.266292,-7.880811,3.860244,1.859983,5.014755,9.244803,0.395172,-9.603298,7.913150,-8.615434,-7.960651,5.213538,-5.360848,2.117644,-9.803139,4.258673,7.825339,4.944003,-6.907389,-7.422326,-3.174142,-3.897073,-4.672945,4.499535,8.408777,9.237447,-9.871889,0.932842,-8.799415,0.617920,-5.090095,4.051716,3.228646,-8.279456,-2.530576,1.721739,3.214984,-1.224110,7.340266,8.005448,6.271145,-5.647050,7.080606,2.229080,-8.481758,-9.304332,8.521958,-4.853617,9.083397,9.061004,-7.911271,-4.357398,-8.414822,8.632494,2.786009,0.067362,-3.156375,-6.221006,6.869759,2.285834,7.773701,-7.586275,4.109702,4.584088,-4.682435,-0.485489,5.384702,-9.033912,-5.781162,7.509900,-6.238476,-6.811009,2.341936,-8.507146,-4.249256,-2.532554,1.657306,1.434691,-5.432001,5.044437,2.354458,5.322711,7.669100,-1.779390,3.433490,9.244805,-2.628350,-4.094069,-9.115697,5.523922,-2.039821,-7.918989,-3.578680,2.270520,-1.395490,9.699861,-4.927710,6.549737,-2.991784,0.209605,6.115742,2.046791,3.842825,0.961453,-3.527064,-0.178401,1.657220,2.489661,-3.147480,-9.952553,9.761722,-6.054274,-0.896948,9.025962,-4.320588,-5.411051,8.366879,7.035853,-7.783915,9.137420,1.241086,8.086172,-3.507236,1.852741,2.191863,-8.622065,3.603435,5.759897,-4.960840,1.368036,8.032503,-6.083275,8.626148,3.489531,8.441608,9.631727,4.628309,9.493174,0.464371,-3.331889,-7.147495,6.304388,-4.842040,1.964093,-0.639277,0.649475,-3.527334,-6.727556,3.379118,5.058390,-3.127769,-5.956352,-3.821589,-6.938676,-6.650887,-4.760987,2.953463,-6.739273,-7.349427,-8.612222,-4.338833,9.659393,4.948781,4.643474,1.663550,4.067360,2.871074,8.855041,1.811118,8.095950,5.876296,-1.129522,8.497376,-3.690650,-1.076128,-6.595216,-6.786684,-5.811432,-7.769189,-1.398553,-2.563189,0.481363,4.796357,2.028486,-3.107653,-5.198957,9.335715,-2.164854,-7.221449,-5.958754,9.609636,8.157939,-2.902471,-1.017822,9.818930,5.429186,-3.718592,7.201860,8.897188,4.982756,8.449371,0.145287,-7.034392,-0.531537,-7.185180,-5.823864,5.873187,9.595787,2.588123,-4.633565,9.618921,-6.097366,4.349919,6.008409,7.713262,-4.774861,5.555868,3.069240,-0.023788,-6.890030,-9.348185,-5.093547,-6.452892,-3.405855,0.164298,8.348956,-0.158402,4.975916,2.074176,-3.214354,4.132233,-3.461575,7.125858,-1.709152,3.567591,-3.370755,1.249891,8.044654,0.557894,4.482989,2.797009,4.509517,9.030723,6.704086,8.193122,5.541534,-1.481334,1.467513,3.435354,4.777351,-1.327603,-7.493080,1.525697,-5.131485,9.402859,7.441589,-6.675327,-4.798518,9.378980,-3.517423,-3.163476,4.400273,9.945635,-4.309479,5.176700,4.271580,9.411833,2.885546,-3.971388,1.888633,-3.423781,-6.781831,8.434155,-4.069638,-3.131543,-5.444950,-3.104855,6.686707,-3.814653,-5.992386,-7.934894,-0.824899,8.233153,-0.391471,1.043185,-4.842306,-4.978998,-4.520762,2.360943,8.915771,0.046766,-3.648043,3.940325,-6.825408,4.479343,3.911569,-9.367541,-2.653605,-5.202503,6.580644,-0.506560,7.565960,-3.329641,9.845305,-9.762573,3.160871,-8.540109,8.990771,-4.944520,1.479952,-2.969130,7.975196,-7.358626,-1.924378,-4.457248,-7.080911,9.886691,9.947275,1.363552,-6.492284,0.917820,-9.195979,0.184852,-0.468517,4.344249,-4.712878,-9.914157,-4.348601,8.601038,9.382655,7.309021,-5.594125,2.434558,-0.745735,-0.938534,-7.184826,5.801455,0.820374,-5.201973,-9.888065,-8.065677,8.788377,-9.592453,4.415031,5.097394,3.397922,4.986870,6.354936,3.203164,9.240362,-9.873709,-2.171219,-9.115228,0.276488,3.052967,-2.239487,-9.169151,-1.583460,-7.157250,-1.289020,4.158630,-4.251513,4.234214,2.617057,7.189994,9.130530,7.484405,7.109012,6.449929,-0.322251,-6.461756,-4.431232,2.483073,5.051466,3.690316,8.473126,1.390773,4.998861,1.471189,-2.415149,6.546993,9.116303,0.696773,9.973605,9.629868,5.705254,-6.549167,-0.082087,-6.211055,5.208441,6.324618,-7.461341,-4.559561,2.148469,9.561006,7.763254,1.956299,5.786704,7.862124,-1.540029,-6.055250,6.892533,9.704339,-7.603760,3.515028,3.880749,-3.168973,-3.892852,2.103281,5.353241,2.325704,-9.289444,2.190685,4.044641,-7.012962,9.874640,6.292291,6.757235,-8.257716,-3.842424,-2.380799,-4.393436,-9.830113,9.496095,-3.442344,-9.331733,8.327829,2.147797,-9.291952,-2.029743,-3.941870,4.334856,-5.813030,-0.647827,2.624193,-3.711880,4.326905,-5.503265,0.074349,8.803348,-3.020222,7.573701,-7.585258,-5.942970,1.290944,8.982122,-6.363522,2.088528,-6.057309,5.755628,2.612939,8.206699,-0.350122,-0.839672,4.543499,-2.614289,7.718396,-1.472401,-6.082032,-8.221860,9.939003,6.436325,-1.436995,-1.061001,-6.873481,-4.297734,2.564667,-1.479072,-2.518491,-7.301348,5.707884,9.031743,-4.980038,-6.679264,1.995849,8.725984,5.912118,-2.838083,5.608149,-5.888253,4.169940,1.134090,-4.415786,-1.102406,-7.122908,-8.244902,8.585411,-0.107099,8.420022,-8.943622,1.448563,8.501586,-5.031101,4.528784,-1.883265,-3.002463,-5.357406,4.151179,6.873708,8.807187,-1.361029,3.567281,-2.944154,5.361134,5.050021,-9.767904,5.403198,9.871379,0.793247,-0.575400,-7.318058,6.571565,-6.651052,0.504086,5.756223,-6.499153,-8.614226,0.487294,4.935930,7.318064,8.336843,-7.107154,1.775816,-4.072448,-7.710838,5.615919,5.507402,3.635751,9.854327,-5.076452,-1.221713,-9.491023,-8.947803,0.598381,-9.760225,-2.103855,-0.173187,5.680473,-2.942300,-2.828638,-8.998962,3.799956,9.372309,7.023051,2.311846,1.395631,-4.419636,6.936237,4.767754,5.321284,7.727256,5.266710,-8.066516,0.170776,6.329057,8.588687,9.313914,3.850103,4.588437,9.725213,-0.194816,-0.530557,-6.489582,-1.960941,-3.912618,-3.754823,9.422467,0.982793,-3.364854,8.092046,7.879475,4.637202,1.629024,3.013675,8.959848,-3.827988,3.724366,2.177014,-0.522732,0.030835,2.109786,-6.798871,-5.409290,-5.322632,-4.086312,-9.611732,-1.281260,8.878782,-3.279266,-1.780595,2.890857,-9.840117,-2.759288,7.752614,1.927604,9.995678,-0.505940,4.562420,-2.221316,1.547714,7.570721,-0.848264,4.056777,-1.271802,-0.889988,7.569390,1.029937,-4.690178,4.382305,-9.621393,-9.634028,0.311338,3.098543,2.320835,-2.310793,-5.717438,-1.230252,8.661563,-0.216217,-9.506303,8.688353,6.550986,2.272045,-9.692826,6.635339,4.695012,-3.172971,-8.859109,1.123198,4.957392,-0.159979,-4.831220,-3.233245,-1.845875,6.691445,9.651162,-2.158917,6.298595,-5.904735,3.697658,-0.049894,-2.228491,8.496269,-3.925164,-1.121731,7.388651,1.918963,-1.587258,3.024611,4.330564,7.797728,6.414337,2.158656,0.315924,-5.207829,5.950022,7.281017,-2.060053,-1.556688,2.619336,-6.710840,3.491516,-3.229357,-0.335421,-9.241880,-7.349660,-3.251622,5.148822,-9.191262,-7.027280,7.612069,7.044118,2.447893,-0.354192,-5.253339,-8.212621,-8.080102,2.075575,7.331659,-4.189747,5.291953,9.504125,1.951853,0.794077,1.549778,-8.553742,8.470230,5.034107,2.332705,-5.935410,-2.584556,7.423451,-6.344280,9.813075,-0.140193,9.214539,4.665926,2.177741,0.630609,-7.770323,-0.067420,-3.587936,2.629940,-6.142684,2.610832,-9.140752,-9.820254,-3.092507,-5.801539,-8.179225,5.560165,-9.601994,8.131895,7.969715,-3.523649,7.004293,3.456989,-8.375895,-1.292629,9.370600,7.706094,3.574936,8.530998,-1.280930,2.094171,-6.212578,-3.294379,1.985306,7.637809,4.618443,1.239397,-3.634058,-3.257017,6.840158,-9.280023,-4.691093,-1.749347,6.152175,3.876105,-5.163236,-5.762508,3.590745,6.175536,-2.647479,-6.836532,6.011748,1.731510,-4.268161,-7.054235,-6.792588,-7.118897,7.388756,-4.417562,5.460611,-0.266995,-8.921554,-6.197360,-2.601462,3.372388,-3.788103,-4.866292,0.635113,-0.422062,5.877291,5.678981,2.767156,-2.443789,-7.361559,9.125438,-8.396204,0.218600,-0.370097,-0.525583,-6.030349,-7.073879,4.188575,-8.937969,-7.182321,-2.380024,0.689596,8.730076,-9.308244,6.094408,-6.336506,-7.484578,4.624861,6.210567,3.831548,-4.793428,0.771323,1.663450,0.727322,8.995332,-5.208897,2.173696,8.750183,-2.952320,-8.913231,1.975234,-7.224754,5.258592,1.069895,0.698748,-4.796124,-0.985419,-0.956273,7.007750,1.509690,5.367934,-3.977647,-8.212313,8.679563,1.040053,-4.480325,-1.705129,-2.830502,-5.302291,8.704775,4.157101,4.705356,1.226254,9.922390,9.268915,-6.495449,-3.809625,3.935695,-7.305816,5.244132,-4.395016,-7.148896,-1.527129,-7.982562,1.514673,-9.120849,-3.310963,-5.867760,-1.233986,-1.863605,0.530700,-5.537147,7.580865,-3.990355,6.163481,-5.663133,8.417523,-5.957541,9.178505,7.420015,-6.948591,8.289562,9.137454,5.075569,7.386804,-1.051331,-7.694657,-8.296500,-4.052369,8.758369,-6.035052,-7.532244,4.438227,1.644239,1.496077,2.229358,8.376416,-5.698213,-8.210953,-7.719647,0.331581,-5.687514,4.576121,-8.117552,2.199500,7.212102,4.435452,-0.551397,4.153585,8.829769,-6.169741,-7.604212,-7.175556,-5.056557,-1.231739,-0.721653,6.549499,9.324631,-8.776647,9.496080,-0.635722,6.261517,-5.276905,-6.582412,-3.386122,-5.570967,-8.613607,-9.976939,-8.880030,8.649076,5.013367,-4.953362,8.103552,9.105468,4.062427,0.605665,-6.349140,1.965819,-8.831588,-5.219706,-8.430112,0.977726,4.719214,0.874677,0.274582,1.568307,-6.945538,4.941876,2.764309,2.755080,0.582941,-9.714982,-1.892591,-6.925939,7.148124,6.916577,-2.969658,-8.683420,-4.367598,0.208348,5.440773,-1.923046,-3.508836,2.547258,-6.619490,1.264747,6.984691,0.182200,8.311567,6.897687,-5.067401,-5.638808,4.549892,3.163296,-2.361939,7.130198,8.068191,-5.582395,-7.077736,1.661849,-9.175457,-1.441181,0.749251,7.800713,-8.314543,4.647648,9.595685,8.018266,6.315205,-9.138854,9.815525,4.065804,1.297068,-3.060598,9.143139,8.774467,-0.975984,6.140221,4.514637,1.760345,9.069793,9.312266,-7.549933,-2.595685,1.862957,-4.313637,-8.318708,6.673461,4.080421,0.385855,6.796954,-7.744445,2.562047,1.490276,4.686914,-4.085177,-3.995199,3.491311,-7.582313,-3.105763,5.051346,-0.562232,-2.295399,3.783954,7.599015,-6.768509,8.670200,0.357145,-4.471441,-5.648475,8.181012,1.024509,-0.881032,-2.716869,-5.283736,-7.888810,7.506644,3.436597,-1.505294,2.976170,-6.186509,-5.220902,7.399802,-2.392064,6.565839,2.645975,1.755384,-9.533608,4.540955,-7.364121,0.510137,1.027029,6.218430,-4.710134,-8.299506,5.041358,1.240671,-0.481216,8.497586,-7.962221,7.642629,3.808706,-9.131445,-9.971945,2.377274,0.202133,0.315845,7.429357,-6.914089,-1.897940,-5.189799,3.718078,-5.647567,-9.545369,-3.661452,-0.348063,-6.514284,-4.584876,8.928057,-6.816446,1.730582,1.612649,3.187992,0.310497,-7.931177,-6.923373,4.357231,-4.388942,9.588640,-3.418215,4.421116,-8.649106,-1.594092,1.593408,7.373257,-7.653736,6.190944,-8.910754,5.248317,-7.293574,6.955099,-5.917882,-4.342619,-9.750985,6.672749,1.732845,4.893498,-5.548733,-6.795233,4.176411,4.751666,-5.948443,4.634104,0.445148,-1.671506,-2.383112,-0.768744,2.266221,4.880501,6.963015,-3.905028,-2.166158,-5.985627,1.067204,-9.400290,-9.496893,8.850738,-9.019416,5.831413,6.541154,-4.061699,-8.510932,-6.993507,2.127175,6.724060,-1.697541,-8.069732,-1.862480,5.147016,6.915347,-4.089833,9.909070,5.066645,5.495228,-4.341623,-8.982255,-2.700491,2.779221,-9.231877,1.818857,5.785480,6.827758,-8.414693,-3.708126,-3.232021,8.190300,-8.316784,-0.116842,-0.060234,-7.134012,-8.102433,5.015268,3.363318,4.091746,-1.654419,-4.209837,-7.464027,2.185851,6.037365,-2.969777,4.317407,-7.834782,-5.820017,4.638658,-6.480186,3.872142,1.130283,-2.520810,-0.239464,-7.319820,-1.814073,-1.075991,8.872474,3.127347,-5.689513,-5.914087,7.230642,2.596535,8.413382,-7.150250,-1.704616,-4.191400,4.714793,4.419400,-8.759940,-6.915309,-6.645030,5.911039,-9.930524,-6.071990,-0.305663,-6.653884,6.496498,4.806902,8.748574,8.861686,-9.432505,9.578138,-8.447992,1.717666,-7.804857,5.587363,-6.962995,-8.001788,2.213071,4.491012,8.424208,2.803606,8.714883,3.296570,-0.710649,7.807847,-0.049099,-3.327547,0.289354,0.409136,0.113653,-3.373039,4.854701,-1.192433,0.279935,-6.360944,-9.303349,1.770430,8.131884,-3.848831,9.254919,-6.811324,-9.195953,-7.802731,-9.216423,4.006357,-6.882386,8.722482,6.614940,-1.328610,-0.331247,6.508795,-3.699041,-5.181190,-3.321186,-3.990259,-0.568737,2.691788,2.256384,-6.333403,-7.466642,-4.077691,3.602232,-2.055184,5.002167,7.690795,-9.264283,-4.391048,-9.908788,-3.029993,9.627651,-8.938869,5.403487,-4.501391,-2.650226,-5.547812,5.529518,0.516940,-8.042630,2.936361,0.396683,1.075424,6.868260,-8.836701,5.736364,-2.949848,8.304491,-5.198247,1.321645,-6.918390,-7.185694,-6.487421,7.788410,-5.750481,1.392464,5.783764,5.691696,-5.762083,7.705954,-4.389446,1.846103,8.325718,8.921813,5.101871,0.139995,-9.911720,-1.129068,6.057846,5.335308,-6.868474,7.618708,4.463187,-6.602770,2.323559,-6.593413,-4.873434,6.781553,6.920018,-3.025473,1.889153,-0.768205,9.270959,-7.297632,-2.866006,-8.218049,-1.627697,-0.290883,-1.789818,-8.218696,-7.285824,6.909863,-8.329027,2.005545,-3.029281,0.830816,9.664368,0.954273,-2.095013,0.374191,1.490130,5.009204,5.718305,9.143138,5.650191,0.939500,4.367664,-3.969492,9.494014,9.769612,8.362177,1.825007,-7.811734,6.280290,-7.058165,2.585934,2.491381,-0.582054,-4.552300,-7.954620,8.242893,-5.005920,8.331313,-1.828634,-6.370321,-0.376941,-2.720460,-7.030318,-0.179161,-6.818297,-5.872344,4.346488,-2.901860,-1.659130,7.796965,-6.269457,-3.390291,3.913957,-8.488060,4.949844,8.463830,-2.579472,1.607518,-6.763041,7.939367,5.131793,-7.516586,0.574035,-5.602572,-0.605600,-8.362382,-3.777179,2.129588,-4.471397,6.181972,-2.770706,8.111148,7.124514,9.752686,5.255163,-6.577163,-5.648324,1.924096,5.228426,8.839777,8.152656,0.037106,-9.643730,-7.589960,-5.683281,-2.749123,-5.809755,7.148222,1.828250,-0.706577,3.509211,6.702224,0.331833,7.449458,-2.892669,-8.066336,1.492191,1.396385,-7.190452,-6.348654,8.345819,3.250030,7.167513,8.200847,5.267137,0.937512,-4.560916,-7.913399,6.407941,8.352175,-9.937074,7.749868,2.256231,-4.065780,-3.569199,-8.471821,7.217108,-5.956596,-8.962514,6.454326,5.125365,5.105477,4.017955,3.258094,0.624543,-9.156761,4.933891,2.705611,-8.642794,-9.678909,6.443724,2.843160,4.475240,3.037714,2.899453,3.533015,6.286396,4.067051,6.273898,4.305915,0.631875,-3.100870,1.178746,0.724509,3.965461,7.304411,-2.995262,-9.352056,-3.971277,1.054202,-0.602477,-8.638835,9.483456,8.113278,-5.574455,-4.436275,-8.753151,-3.429754,-9.523646,-4.626269,-5.310427,-4.627774,-2.666374,-9.876161,-9.563624,-0.944505,-5.957854,-5.596838,-4.615009,-3.234435,-2.065632,-0.128626,-2.552490,5.891875,-1.598108,-0.463416,1.370832,2.503628,0.896517,-5.543555,-7.027699,8.706180,0.211779,-8.555178,2.045811,-3.009380,4.044185,-2.867498,-4.378791,2.980848,3.541487,3.951619,-0.279186,-2.318722,-0.110761,-0.591309,-1.678100,0.778517,2.885975,0.360615,4.257475,2.996588,5.339902,-2.393873,9.468816,-3.533189,3.258727,1.774653,7.258687,-3.786450,-7.100677,-8.150391,-9.967674,-6.304361,8.125555,-9.438999,0.144241,-5.152765,5.450103,-8.867789,-9.657883,-5.181044,-0.007897,6.048763,3.636053,9.074710,-7.647575,-1.178378,-1.748267,3.074465,8.402565,-5.133304,4.690229,3.542438,1.101816,4.384626,-4.216020,5.969858,9.564118,-3.124641,-4.774012,-3.117007,8.882282,6.666450,1.558816,-8.479607,-8.583505,5.470721,1.719600,4.424748,0.574885,-7.970680,-5.308254,-6.935368,-4.500556,-9.109455,0.846022,-3.030743,-2.439156,-4.746316,-8.742106,-5.676028,3.291355,-3.306961,-5.100436,4.149642,-7.783775,2.111432,4.670527,-7.267435,3.947853,4.285724,4.747227,0.580921,6.852793,8.290057,-7.066888,4.286771,1.830424,-8.201958,9.328742,5.050541,6.855172,-2.176437,7.538402,8.506151,2.873369,8.590291,-7.282815,-8.765531,-4.326891,2.736048,7.562446,-0.891050,-6.089682,-7.289105,-0.544935,3.147668,4.511796,-7.071203,-4.589200,1.490973,-3.153813,-3.015849,3.527351,6.040331,-8.731959,1.070419,3.812842,-1.344042,-4.072463,3.549607,3.189430,0.264886,-3.699330,3.727374,3.607230,-0.701195,2.615244,-2.609026,-6.509857,-3.932997,-6.622146,-4.980311,7.755200,4.286669,-2.955507,-7.080553,9.937686,-6.784943,6.879279,-1.138010,-5.441624,5.371709,5.150817,-1.939388,5.386331,-4.071647,-9.908046,4.045417,3.214631,-5.295317,1.018728,5.974312,-9.314534,-0.017852,7.615704,-2.420298,8.508196,8.145765,1.418938,-2.145088,-5.355045,-4.600345,-5.020244,-9.188599,-2.813960,0.901737,6.430702,-0.620532,-6.514721,-7.265799,7.040693,0.553633,-4.999761,5.289846,-4.772102,-1.018611,-0.487350,-3.287107,-7.126996,-6.290361,5.481971,-8.253563,2.065110,-1.308237,6.609074,3.390698,0.023902,5.084788,-6.712007,0.302554,4.912284,6.970571,-0.632949,-0.455157,6.516633,4.569115,-2.509377,1.212340,-3.362839,0.877059,-7.664253,-9.589609,2.428540,5.047612,-8.546093,-4.469418,-8.280829,7.336161,0.124415,2.985955,-8.242886,6.953072,-9.589036,-3.090082,-6.135414,-4.029987,0.306862,-6.251209,2.146033,-2.122278,-3.807311,4.778230,-4.510285,4.179226,-4.584176,-7.138041,0.956157,3.581630,9.638595,-5.677726,5.244259,-6.631480,9.810103,6.729539,6.963318,-9.731196,-5.075807,-5.106333,-1.465133,2.140089,5.282660,-8.806897,1.962028,-8.330630,9.886909,6.006230,-2.152870,1.183682,-6.195240,-5.040531,-1.500390,-9.237496,-7.837834,-4.033852,-2.285581,7.874377,3.160470,7.574722,3.253872,6.440057,-8.057355,1.088389,4.230750,7.972459,2.411697,8.572660,-1.809729,-5.394563,-9.044628,-1.298852,-5.240462,-1.802476,2.680593,5.667955,-2.371374,5.309371,0.781453,8.917787,-0.198246,-8.674544,-0.279839,0.942623,1.390593,8.290616,-1.605012,5.605127,5.938523,8.074356,9.269513,5.779834,9.757105,-4.277442,9.518713,3.222918,-6.464774,4.693841,9.985606,-5.892482,-8.758655,2.672524,0.519155,-9.141028,-1.181379,3.875877,-1.328816,6.322228,3.222989,-9.924648,4.013636,-3.644494,8.602343,-5.865304], dtype = "float32")#candidate|4673|(2197,)|const|float32
call_4672 = relay.TupleGetItem(func_2915_call(relay.reshape(const_4673.astype('float32'), [13, 13, 13])), 0)
call_4674 = relay.TupleGetItem(func_2917_call(relay.reshape(const_4673.astype('float32'), [13, 13, 13])), 0)
output = relay.Tuple([call_4658,call_4669,call_4672,const_4673,])
output2 = relay.Tuple([call_4659,call_4670,call_4674,const_4673,])
func_4682 = relay.Function([], output)
mod['func_4682'] = func_4682
mod = relay.transform.InferType()(mod)
output = func_4682()
func_4683 = relay.Function([], output)
mutated_mod['func_4683'] = func_4683
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4699 = relay.var("var_4699", dtype = "uint16", shape = (6, 12, 16))#candidate|4699|(6, 12, 16)|var|uint16
var_4700 = relay.var("var_4700", dtype = "uint16", shape = (6, 12, 16))#candidate|4700|(6, 12, 16)|var|uint16
bop_4701 = relay.less(var_4699.astype('bool'), relay.reshape(var_4700.astype('bool'), relay.shape_of(var_4699))) # shape=(6, 12, 16)
uop_4704 = relay.cosh(bop_4701.astype('float32')) # shape=(6, 12, 16)
bop_4707 = relay.left_shift(uop_4704.astype('int64'), relay.reshape(bop_4701.astype('int64'), relay.shape_of(uop_4704))) # shape=(6, 12, 16)
uop_4718 = relay.erf(bop_4707.astype('float64')) # shape=(6, 12, 16)
func_4364_call = mod.get_global_var('func_4364')
func_4368_call = mutated_mod.get_global_var('func_4368')
var_4724 = relay.var("var_4724", dtype = "float32", shape = (140,))#candidate|4724|(140,)|var|float32
var_4725 = relay.var("var_4725", dtype = "float32", shape = (1820,))#candidate|4725|(1820,)|var|float32
const_4726 = relay.const([[-2.193957,3.712679,4.779643],[3.465888,-3.260706,1.036034],[-6.388052,1.110565,2.504143],[7.236016,-7.589073,-8.492308],[5.088485,1.012663,6.162674],[2.066440,-7.694991,5.908079],[-0.134565,7.141013,5.375583]], dtype = "float32")#candidate|4726|(7, 3)|const|float32
call_4723 = relay.TupleGetItem(func_4364_call(relay.reshape(var_4724.astype('float32'), [140,]), relay.reshape(var_4725.astype('float32'), [14, 10, 13]), relay.reshape(const_4726.astype('float32'), [21,]), ), 3)
call_4727 = relay.TupleGetItem(func_4368_call(relay.reshape(var_4724.astype('float32'), [140,]), relay.reshape(var_4725.astype('float32'), [14, 10, 13]), relay.reshape(const_4726.astype('float32'), [21,]), ), 3)
output = relay.Tuple([uop_4718,call_4723,var_4724,var_4725,const_4726,])
output2 = relay.Tuple([uop_4718,call_4727,var_4724,var_4725,const_4726,])
func_4730 = relay.Function([var_4699,var_4700,var_4724,var_4725,], output)
mod['func_4730'] = func_4730
mod = relay.transform.InferType()(mod)
var_4731 = relay.var("var_4731", dtype = "uint16", shape = (6, 12, 16))#candidate|4731|(6, 12, 16)|var|uint16
var_4732 = relay.var("var_4732", dtype = "uint16", shape = (6, 12, 16))#candidate|4732|(6, 12, 16)|var|uint16
var_4733 = relay.var("var_4733", dtype = "float32", shape = (140,))#candidate|4733|(140,)|var|float32
var_4734 = relay.var("var_4734", dtype = "float32", shape = (1820,))#candidate|4734|(1820,)|var|float32
output = func_4730(var_4731,var_4732,var_4733,var_4734,)
func_4735 = relay.Function([var_4731,var_4732,var_4733,var_4734,], output)
mutated_mod['func_4735'] = func_4735
mutated_mod = relay.transform.InferType()(mutated_mod)
const_4740 = relay.const([[[1.782074,-8.534348,5.480656],[8.487982,2.825551,-0.270246],[-3.316318,4.530406,-6.254270],[9.334510,9.415627,-1.395796]],[[-6.157364,0.921829,-1.087744],[6.602565,-6.747996,1.369316],[-4.700287,-1.857417,7.388119],[3.434533,4.551206,9.123148]],[[4.878172,9.175466,-4.978244],[4.829467,-3.251252,-2.077661],[3.798884,4.881970,2.524012],[3.996640,3.819557,-0.010954]],[[-9.050883,-0.785061,-4.918088],[-0.968338,-1.238706,-8.918863],[8.631650,7.704030,8.330993],[-1.506635,0.568451,-1.755681]],[[-4.375756,1.105499,2.337628],[-9.010275,5.923358,2.001787],[-3.090096,0.391632,7.905541],[-3.899541,0.299229,9.158780]],[[8.686479,-8.338876,3.516989],[-0.197574,-1.886104,3.549998],[8.984311,-1.356713,-3.057213],[-9.361326,9.134533,2.458259]],[[2.619626,9.839689,-0.774441],[6.799603,5.190782,-9.354720],[-1.061957,-2.540537,-2.292098],[6.437704,-8.623451,-3.829208]],[[9.841647,2.187952,5.158163],[-2.811714,-4.902934,8.609072],[-4.615410,4.150907,-8.040838],[-9.507454,-0.991875,-8.450007]],[[-9.127258,-9.981021,8.911083],[1.864446,3.542304,1.046631],[9.285100,9.636476,1.326774],[-2.789819,-9.424462,9.615923]],[[-2.977431,2.224978,7.381451],[8.548704,9.118773,-3.412324],[0.593477,-2.997985,-6.850790],[9.310742,5.835484,-6.901950]],[[4.486391,-4.267286,-5.482541],[4.247337,7.568301,4.759744],[-8.915070,-7.025070,-4.431193],[-0.428903,-7.391667,-6.408891]],[[-0.142293,-7.223109,-5.023320],[-9.203143,-2.322217,5.727803],[3.729584,9.316345,-5.165470],[3.303284,1.313577,-4.426014]],[[-4.983417,3.465857,1.934645],[8.491188,3.587133,5.022112],[-9.968763,-3.707816,-6.757168],[4.046280,-1.809958,-1.746133]],[[7.370828,5.344744,2.307782],[-2.456050,-3.892655,-9.219946],[4.405362,7.284641,-1.141229],[2.585818,-7.425861,5.773158]],[[0.841159,-8.549153,1.378477],[-8.876535,-9.322954,5.030478],[-6.850403,1.438402,-2.903511],[-9.196565,-0.909085,-7.364563]],[[9.116191,9.485120,6.598241],[-4.695503,-2.266421,-2.636379],[-6.841047,-8.477752,-4.772792],[-3.861715,-0.772597,6.364377]]], dtype = "float64")#candidate|4740|(16, 4, 3)|const|float64
var_4741 = relay.var("var_4741", dtype = "float64", shape = (16, 4, 3))#candidate|4741|(16, 4, 3)|var|float64
bop_4742 = relay.multiply(const_4740.astype('float64'), relay.reshape(var_4741.astype('float64'), relay.shape_of(const_4740))) # shape=(16, 4, 3)
func_3726_call = mod.get_global_var('func_3726')
func_3727_call = mutated_mod.get_global_var('func_3727')
call_4750 = func_3726_call()
call_4751 = func_3726_call()
func_4364_call = mod.get_global_var('func_4364')
func_4368_call = mutated_mod.get_global_var('func_4368')
const_4758 = relay.const([-8.523497,-2.305335,5.724208,2.154468,-0.975192,-5.200225,-0.332464,9.939285,-5.296036,0.653590,1.131364,2.900353,-5.904353,-6.772388,7.399396,-8.943866,4.197591,-1.836614,5.607596,2.448562,-7.741772,7.532105,-6.362222,2.030263,-3.802553,1.342133,-7.442107,7.960821,1.690699,2.390769,-7.196730,-4.101593,-2.584168,-4.871418,3.320117,4.122509,2.845723,-7.279033,1.582964,-6.759907,2.862056,7.089928,-9.474790,-2.681347,-1.760488,-0.806997,3.156845,3.147315,-4.290741,1.249160,0.895123,5.856802,9.039630,-5.101483,-0.463129,8.716263,0.540129,9.562656,1.560135,4.990543,4.017083,-3.835684,-8.696348,-7.618404,0.862584,-4.892448,-0.063965,3.431138,-0.904365,1.682558,3.381649,-6.835865,1.724970,-7.811058,7.619848,4.284010,-3.703727,-1.519269,3.936654,1.090081,-6.881271,5.675949,9.674698,3.689785,-9.475925,-1.860806,5.570554,-3.969946,3.340857,6.203952,-1.349235,1.358336,-4.002428,-7.431975,3.983294,-8.055341,7.423606,-9.370538,-4.056899,-0.962974,-0.473773,-8.225533,6.249905,1.416909,-3.176714,-0.147312,7.526574,5.323334,2.675262,9.731831,5.519952,-2.612336,0.471656,6.439037,-1.633891,-1.025004,6.320058,-7.750757,-0.724200,4.502232,-2.087259,4.671913,6.619729,6.599068,-1.404034,8.077245,-1.171005,1.132318,1.020075,-9.502656,-6.858846,-1.557651,9.111942,2.976681,-7.135287,-7.504256,-8.528774,-2.332436,-5.654050,-8.320580], dtype = "float32")#candidate|4758|(140,)|const|float32
var_4759 = relay.var("var_4759", dtype = "float32", shape = (14, 130))#candidate|4759|(14, 130)|var|float32
var_4760 = relay.var("var_4760", dtype = "float32", shape = (21,))#candidate|4760|(21,)|var|float32
call_4757 = relay.TupleGetItem(func_4364_call(relay.reshape(const_4758.astype('float32'), [140,]), relay.reshape(var_4759.astype('float32'), [14, 10, 13]), relay.reshape(var_4760.astype('float32'), [21,]), ), 0)
call_4761 = relay.TupleGetItem(func_4368_call(relay.reshape(const_4758.astype('float32'), [140,]), relay.reshape(var_4759.astype('float32'), [14, 10, 13]), relay.reshape(var_4760.astype('float32'), [21,]), ), 0)
var_4770 = relay.var("var_4770", dtype = "bool", shape = (5, 15, 8))#candidate|4770|(5, 15, 8)|var|bool
bop_4771 = relay.logical_and(call_4750.astype('bool'), relay.reshape(var_4770.astype('bool'), relay.shape_of(call_4750))) # shape=(5, 15, 8)
bop_4774 = relay.logical_and(call_4751.astype('bool'), relay.reshape(var_4770.astype('bool'), relay.shape_of(call_4751))) # shape=(5, 15, 8)
func_1398_call = mod.get_global_var('func_1398')
func_1400_call = mutated_mod.get_global_var('func_1400')
call_4783 = relay.TupleGetItem(func_1398_call(), 2)
call_4784 = relay.TupleGetItem(func_1400_call(), 2)
const_4785 = relay.const([[-9.764206,1.868658,5.797212,-8.980040,-9.558161,3.491423,6.978352,9.174983,0.143451,1.360115,-8.424184,1.052883,8.325376,-6.446980,4.728009,2.841912,-5.757825,5.557172,6.731205,-0.627948,-5.284166,-9.604391,3.441829,-3.960346]], dtype = "float32")#candidate|4785|(1, 24)|const|float32
bop_4786 = relay.not_equal(call_4783.astype('bool'), relay.reshape(const_4785.astype('bool'), relay.shape_of(call_4783))) # shape=(1, 24)
bop_4789 = relay.not_equal(call_4784.astype('bool'), relay.reshape(const_4785.astype('bool'), relay.shape_of(call_4784))) # shape=(1, 24)
output = relay.Tuple([bop_4742,call_4757,const_4758,var_4759,var_4760,bop_4771,bop_4786,])
output2 = relay.Tuple([bop_4742,call_4761,const_4758,var_4759,var_4760,bop_4774,bop_4789,])
func_4793 = relay.Function([var_4741,var_4759,var_4760,var_4770,], output)
mod['func_4793'] = func_4793
mod = relay.transform.InferType()(mod)
var_4794 = relay.var("var_4794", dtype = "float64", shape = (16, 4, 3))#candidate|4794|(16, 4, 3)|var|float64
var_4795 = relay.var("var_4795", dtype = "float32", shape = (14, 130))#candidate|4795|(14, 130)|var|float32
var_4796 = relay.var("var_4796", dtype = "float32", shape = (21,))#candidate|4796|(21,)|var|float32
var_4797 = relay.var("var_4797", dtype = "bool", shape = (5, 15, 8))#candidate|4797|(5, 15, 8)|var|bool
output = func_4793(var_4794,var_4795,var_4796,var_4797,)
func_4798 = relay.Function([var_4794,var_4795,var_4796,var_4797,], output)
mutated_mod['func_4798'] = func_4798
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3112_call = mod.get_global_var('func_3112')
func_3114_call = mutated_mod.get_global_var('func_3114')
call_4800 = relay.TupleGetItem(func_3112_call(), 0)
call_4801 = relay.TupleGetItem(func_3114_call(), 0)
output = relay.Tuple([call_4800,])
output2 = relay.Tuple([call_4801,])
func_4802 = relay.Function([], output)
mod['func_4802'] = func_4802
mod = relay.transform.InferType()(mod)
output = func_4802()
func_4803 = relay.Function([], output)
mutated_mod['func_4803'] = func_4803
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1464_call = mod.get_global_var('func_1464')
func_1466_call = mutated_mod.get_global_var('func_1466')
call_4804 = func_1464_call()
call_4805 = func_1464_call()
func_1491_call = mod.get_global_var('func_1491')
func_1494_call = mutated_mod.get_global_var('func_1494')
var_4818 = relay.var("var_4818", dtype = "float64", shape = (600,))#candidate|4818|(600,)|var|float64
call_4817 = relay.TupleGetItem(func_1491_call(relay.reshape(var_4818.astype('float64'), [600,])), 0)
call_4819 = relay.TupleGetItem(func_1494_call(relay.reshape(var_4818.astype('float64'), [600,])), 0)
func_836_call = mod.get_global_var('func_836')
func_838_call = mutated_mod.get_global_var('func_838')
call_4831 = relay.TupleGetItem(func_836_call(), 0)
call_4832 = relay.TupleGetItem(func_838_call(), 0)
output = relay.Tuple([call_4804,call_4817,var_4818,call_4831,])
output2 = relay.Tuple([call_4805,call_4819,var_4818,call_4832,])
func_4861 = relay.Function([var_4818,], output)
mod['func_4861'] = func_4861
mod = relay.transform.InferType()(mod)
mutated_mod['func_4861'] = func_4861
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4862 = relay.var("var_4862", dtype = "float64", shape = (600,))#candidate|4862|(600,)|var|float64
func_4861_call = mutated_mod.get_global_var('func_4861')
call_4863 = func_4861_call(var_4862)
output = call_4863
func_4864 = relay.Function([var_4862], output)
mutated_mod['func_4864'] = func_4864
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4488_call = mod.get_global_var('func_4488')
func_4489_call = mutated_mod.get_global_var('func_4489')
call_4950 = func_4488_call()
call_4951 = func_4488_call()
var_4954 = relay.var("var_4954", dtype = "float32", shape = (16, 15, 8))#candidate|4954|(16, 15, 8)|var|float32
bop_4955 = relay.subtract(call_4950.astype('int8'), var_4954.astype('int8')) # shape=(16, 15, 8)
bop_4958 = relay.subtract(call_4951.astype('int8'), var_4954.astype('int8')) # shape=(16, 15, 8)
func_3504_call = mod.get_global_var('func_3504')
func_3506_call = mutated_mod.get_global_var('func_3506')
call_4959 = relay.TupleGetItem(func_3504_call(), 4)
call_4960 = relay.TupleGetItem(func_3506_call(), 4)
func_3286_call = mod.get_global_var('func_3286')
func_3288_call = mutated_mod.get_global_var('func_3288')
call_4961 = relay.TupleGetItem(func_3286_call(), 0)
call_4962 = relay.TupleGetItem(func_3288_call(), 0)
output = relay.Tuple([bop_4955,call_4959,call_4961,])
output2 = relay.Tuple([bop_4958,call_4960,call_4962,])
func_4965 = relay.Function([var_4954,], output)
mod['func_4965'] = func_4965
mod = relay.transform.InferType()(mod)
var_4966 = relay.var("var_4966", dtype = "float32", shape = (16, 15, 8))#candidate|4966|(16, 15, 8)|var|float32
output = func_4965(var_4966)
func_4967 = relay.Function([var_4966], output)
mutated_mod['func_4967'] = func_4967
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4004_call = mod.get_global_var('func_4004')
func_4006_call = mutated_mod.get_global_var('func_4006')
call_4984 = relay.TupleGetItem(func_4004_call(), 1)
call_4985 = relay.TupleGetItem(func_4006_call(), 1)
output = relay.Tuple([call_4984,])
output2 = relay.Tuple([call_4985,])
func_4991 = relay.Function([], output)
mod['func_4991'] = func_4991
mod = relay.transform.InferType()(mod)
output = func_4991()
func_4992 = relay.Function([], output)
mutated_mod['func_4992'] = func_4992
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1982_call = mod.get_global_var('func_1982')
func_1983_call = mutated_mod.get_global_var('func_1983')
call_5040 = relay.TupleGetItem(func_1982_call(), 0)
call_5041 = relay.TupleGetItem(func_1983_call(), 0)
uop_5057 = relay.sqrt(call_5040.astype('float64')) # shape=(1, 15, 8)
uop_5059 = relay.sqrt(call_5041.astype('float64')) # shape=(1, 15, 8)
func_3450_call = mod.get_global_var('func_3450')
func_3451_call = mutated_mod.get_global_var('func_3451')
call_5061 = relay.TupleGetItem(func_3450_call(), 1)
call_5062 = relay.TupleGetItem(func_3451_call(), 1)
output = relay.Tuple([uop_5057,call_5061,])
output2 = relay.Tuple([uop_5059,call_5062,])
func_5069 = relay.Function([], output)
mod['func_5069'] = func_5069
mod = relay.transform.InferType()(mod)
output = func_5069()
func_5070 = relay.Function([], output)
mutated_mod['func_5070'] = func_5070
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3504_call = mod.get_global_var('func_3504')
func_3506_call = mutated_mod.get_global_var('func_3506')
call_5082 = relay.TupleGetItem(func_3504_call(), 0)
call_5083 = relay.TupleGetItem(func_3506_call(), 0)
output = call_5082
output2 = call_5083
func_5084 = relay.Function([], output)
mod['func_5084'] = func_5084
mod = relay.transform.InferType()(mod)
mutated_mod['func_5084'] = func_5084
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5084_call = mutated_mod.get_global_var('func_5084')
call_5085 = func_5084_call()
output = call_5085
func_5086 = relay.Function([], output)
mutated_mod['func_5086'] = func_5086
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3726_call = mod.get_global_var('func_3726')
func_3727_call = mutated_mod.get_global_var('func_3727')
call_5164 = func_3726_call()
call_5165 = func_3726_call()
uop_5177 = relay.rsqrt(call_5164.astype('float32')) # shape=(5, 15, 8)
uop_5179 = relay.rsqrt(call_5165.astype('float32')) # shape=(5, 15, 8)
uop_5180 = relay.log2(uop_5177.astype('float64')) # shape=(5, 15, 8)
uop_5182 = relay.log2(uop_5179.astype('float64')) # shape=(5, 15, 8)
output = uop_5180
output2 = uop_5182
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
