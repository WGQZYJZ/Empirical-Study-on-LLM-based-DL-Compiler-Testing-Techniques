==========mod==========
#[version = "0.0.5"]
def @func_3035() -> (Tensor[(15, 15, 13), float64],) {
  %0 = @func_1034() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_2356(%var_2284: Tensor[(15, 15, 13), float32]) -> (Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %2 = @func_2125() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %3 = %2.0;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %5 = tan(%4) /* ty=Tensor[(15, 15, 13), float32] */;
  %6 = cast(%var_2284, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%5, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %10 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %11 = @func_1678() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %12 = power(%8, %9) /* ty=Tensor[(15, 15, 13), float32] */;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %14 = reshape(%13, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
  %15 = @func_674(%14) /* ty=(Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), float64]) */;
  %16 = %10.0;
  %17 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  %18 = %11.0;
  %19 = %15.1;
  (%12, %16, %17, %18, %19)
}

def @func_821(%var_803: Tensor[(26, 13), int32]) -> (Tensor[(15, 15, 13), float64], Tensor[(26, 13), int64]) {
  %20 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %21 = cast(%var_803, dtype="int32") /* ty=Tensor[(26, 13), int32] */;
  %22 = reshape(%21, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), int32] */;
  %23 = @func_117(%22) /* ty=(Tensor[(13, 13, 2), bool],) */;
  %24 = %23.0;
  %25 = cast(%24, dtype="int64") /* ty=Tensor[(13, 13, 2), int64] */;
  %26 = shape_of(%var_803, dtype="int32") /* ty=Tensor[(2), int32] */;
  %27 = cast(%var_803, dtype="int64") /* ty=Tensor[(26, 13), int64] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %29 = %20.0;
  %30 = add(%27, %28) /* ty=Tensor[(26, 13), int64] */;
  (%29, %30)
}

def @func_117(%var_107: Tensor[(13, 13, 2), int32]) -> (Tensor[(13, 13, 2), bool],) {
  %31 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 13, 2), int32] */, dtype="bool") /* ty=Tensor[(13, 13, 2), bool] */;
  %32 = shape_of(%var_107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%var_107, dtype="bool") /* ty=Tensor[(13, 13, 2), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %35 = greater_equal(%33, %34) /* ty=Tensor[(13, 13, 2), bool] */;
  (%35,)
}

def @func_4207(%var_4192: Tensor[(8, 10, 5), int32]) -> (Tensor[(8, 10, 5), int32], Tensor[(15, 15, 13), bool], Tensor[(8, 10, 5), float64]) {
  %36 = cast(%var_4192, dtype="int32") /* ty=Tensor[(8, 10, 5), int32] */;
  %37 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(8, 10, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 10, 5), int32] */, dtype="int32") /* ty=Tensor[(8, 10, 5), int32] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %40 = @func_3432() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
  %41 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 10, 5), int32] */, dtype="float64") /* ty=Tensor[(8, 10, 5), float64] */;
  %42 = shape_of(%var_4192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%var_4192, dtype="float64") /* ty=Tensor[(8, 10, 5), float64] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %45 = left_shift(%38, %39) /* ty=Tensor[(8, 10, 5), int32] */;
  %46 = %40.1;
  %47 = floor_mod(%43, %44) /* ty=Tensor[(8, 10, 5), float64] */;
  (%45, %46, %47)
}

def @func_5085() -> (Tensor[(15, 15, 13), float64], Tensor[(1, 1, 9), float64], Tensor[(1, 1, 9), float64]) {
  %48 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 1, 9), float32] */, dtype="float32") /* ty=Tensor[(1, 1, 9), float32] */;
  %49 = log(%48) /* ty=Tensor[(1, 1, 9), float32] */;
  %50 = cast(%49, dtype="float64") /* ty=Tensor[(1, 1, 9), float64] */;
  %51 = cast(%49, dtype="float64") /* ty=Tensor[(1, 1, 9), float64] */;
  %52 = @func_2200() /* ty=Tensor[(15, 15, 13), float64] */;
  %53 = erf(%50) /* ty=Tensor[(1, 1, 9), float64] */;
  %54 = asinh(%51) /* ty=Tensor[(1, 1, 9), float64] */;
  (%52, %53, %54)
}

def @func_5241() -> (Tensor[(15, 15, 13), float64],) {
  %55 = @func_916() /* ty=Tensor[(15, 15, 13), float64] */;
  (%55,)
}

def @func_5256() -> (Tensor[(15, 15, 13), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64]) {
  %56 = @func_3753() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
  %57 = @func_1828() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %58 = @func_4577() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %59 = %56.1;
  %60 = %57.3;
  %61 = %58.0;
  (%59, %60, %61)
}

def @func_5190(%var_5177: Tensor[(6, 7, 6), int32]) -> (Tensor[(6, 7, 6), bool], Tensor[(1, 10, 9), float64], Tensor[(90), float64]) {
  %62 = @func_3542() /* ty=(Tensor[(6, 7, 6), int32], Tensor[(15, 15, 13), float64]) */;
  %63 = %62.0;
  %64 = cast(%var_5177, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%63, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %68 = cast(meta[relay.Constant][3] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %69 = reshape(%68, newshape=[1, 10, 9]) /* ty=Tensor[(1, 10, 9), float64] */;
  %70 = @func_4748(%69) /* ty=(Tensor[(1, 10, 9), float64],) */;
  %71 = greater_equal(%66, %67) /* ty=Tensor[(6, 7, 6), bool] */;
  %72 = %70.0;
  (%71, %72, meta[relay.Constant][3] /* ty=Tensor[(90), float64] */)
}

def @func_5396() -> (Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64]) {
  %73 = @func_3432() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
  %74 = @func_4279() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %75 = %73.1;
  %76 = %74.0;
  (%75, %76)
}

def @func_2154() -> Tensor[(15, 15, 13), float64] {
  %77 = @func_2144() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %77.1
}

def @func_4440() -> (Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64]) {
  %78 = @func_3020() /* ty=(Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %79 = @func_4147() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %80 = %78.0;
  %81 = %79.0;
  (%80, %81)
}

def @func_4359(%var_4352: Tensor[(12, 7, 12), int8], %var_4353: Tensor[(12, 7, 12), int8]) -> (Tensor[(12, 7, 12), int8],) {
  %82 = cast(%var_4353, dtype="int8") /* ty=Tensor[(12, 7, 12), int8] */;
  %83 = shape_of(%var_4352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%var_4352, dtype="int8") /* ty=Tensor[(12, 7, 12), int8] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %86 = bitwise_and(%84, %85) /* ty=Tensor[(12, 7, 12), int8] */;
  (%86,)
}

def @func_240() -> (Tensor[(15, 15, 13), float64],) {
  %87 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  (%87,)
}

def @func_3432() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) {
  %88 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
  %89 = cast(%88, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %90 = reshape(%89, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
  %91 = @func_1353(%90) /* ty=Tensor[(15, 15, 13), bool] */;
  (%88, %91)
}

def @func_5695() -> (Tensor[(15, 15, 13), float64],) {
  %92 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %93 = %92.0;
  (%93,)
}

def @func_1267(%var_1228: Tensor[(4, 16), float64], %var_1248: Tensor[(252), int8]) -> (Tensor[(4, 16), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8], Tensor[(280), float64]) {
  %94 = cast(%var_1228, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
  %95 = cast(%var_1248, dtype="int8") /* ty=Tensor[(252), int8] */;
  %96 = reshape(%95, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), int8] */;
  %97 = @func_489() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
  %98 = %97.1;
  %99 = cast(%98, dtype="float64") /* ty=Tensor[(280), float64] */;
  %100 = sin(%94) /* ty=Tensor[(4, 16), float64] */;
  %101 = @func_970(%96) /* ty=Tensor[(6, 7, 6), bool] */;
  %102 = sinh(%99) /* ty=Tensor[(280), float64] */;
  (%100, %101, %var_1248, %102)
}

def @func_3217() -> (Tensor[(15, 15, 13), float64], Tensor[(252), int8], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %103 = @func_2641() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %104 = @func_2652() /* ty=(Tensor[(252), int8],) */;
  %105 = @func_2898() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool]) */;
  %106 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %107 = %103.0;
  %108 = %104.0;
  %109 = %105.0;
  %110 = @func_662() /* ty=Tensor[(15, 15, 13), float64] */;
  %111 = %106.0;
  (%107, %108, %109, %110, %111)
}

def @func_3736(%var_3730: Tensor[(10, 7, 1), uint64], %var_3731: Tensor[(10, 7, 4), uint64]) -> Tensor[(10, 7, 4), uint64] {
  %112 = cast(%var_3730, dtype="uint64") /* ty=Tensor[(10, 7, 1), uint64] */;
  %113 = cast(%var_3731, dtype="uint64") /* ty=Tensor[(10, 7, 4), uint64] */;
  left_shift(%112, %113) /* ty=Tensor[(10, 7, 4), uint64] */
}

def @func_744(%var_733: Tensor[(15, 15, 13), float64]) -> (Tensor[(15, 15, 13), int64], Tensor[(15, 15, 13), float64]) {
  %114 = @func_221() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %115 = %114.0;
  %116 = cast(%var_733, dtype="int64") /* ty=Tensor[(15, 15, 13), int64] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="int64") /* ty=Tensor[(15, 15, 13), int64] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %120 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %121 = add(%118, %119) /* ty=Tensor[(15, 15, 13), int64] */;
  %122 = %120.1;
  (%121, %122)
}

def @func_700() -> Tensor[(15, 15, 13), float64] {
  %123 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %123.1
}

def @func_1608(%var_1596: Tensor[(15, 15, 13), float64]) -> (Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64]) {
  %124 = @func_1034() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %125 = %124.0;
  %126 = cast(%var_1596, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
  %127 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%125, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %130 = cast(%var_1596, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %131 = greater(%128, %129) /* ty=Tensor[(15, 15, 13), bool] */;
  %132 = sin(%130) /* ty=Tensor[(15, 15, 13), float64] */;
  (%131, %132)
}

def @func_3753() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) {
  %133 = @func_489() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
  %134 = @func_2853() /* ty=Tensor[(15, 15, 13), float64] */;
  %135 = %133.5;
  (%134, %135)
}

def @func_1979() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %136 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %137 = @func_489() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
  %138 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %139 = %136.0;
  %140 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
  %141 = %137.3;
  %142 = @func_662() /* ty=Tensor[(15, 15, 13), float64] */;
  %143 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  %144 = %138.0;
  %145 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  (%139, %140, %141, %142, %143, %144, %145)
}

def @func_3408(%var_3378: Tensor[(15, 5, 6), float32], %var_3385: Tensor[(60), float32], %var_3397: Tensor[(280), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float32], Tensor[(15, 5, 6), bool], Tensor[(4, 5, 3), float32], Tensor[(60), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), int16], Tensor[(280), bool], Tensor[(15, 15, 13), float64]) {
  %146 = @func_3020() /* ty=(Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %147 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 6), float64] */;
  %148 = log(%147) /* ty=Tensor[(15, 1, 6), float64] */;
  %149 = cast(%148, dtype="float32") /* ty=Tensor[(15, 1, 6), float32] */;
  %150 = cos(%149) /* ty=Tensor[(15, 1, 6), float32] */;
  %151 = cast(%150, dtype="bool") /* ty=Tensor[(15, 1, 6), bool] */;
  %152 = cast(%var_3378, dtype="bool") /* ty=Tensor[(15, 5, 6), bool] */;
  %153 = cast(%var_3385, dtype="float32") /* ty=Tensor[(60), float32] */;
  %154 = cast(%var_3385, dtype="float32") /* ty=Tensor[(60), float32] */;
  %155 = reshape(%153, newshape=[4, 5, 3]) /* ty=Tensor[(4, 5, 3), float32] */;
  %156 = reshape(%154, newshape=[4, 5, 3]) /* ty=Tensor[(4, 5, 3), float32] */;
  %157 = cast(%var_3397, dtype="bool") /* ty=Tensor[(280), bool] */;
  %158 = @func_2697() /* ty=Tensor[(15, 15, 13), float64] */;
  %159 = cast(%158, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %160 = reshape(%157, newshape=[280]) /* ty=Tensor[(280), bool] */;
  %161 = reshape(%159, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float32] */;
  %162 = @func_1106(%160, %161) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(280), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), bool], Tensor[(15, 3, 7), int16]) */;
  %163 = @func_2154() /* ty=Tensor[(15, 15, 13), float64] */;
  %164 = %146.0;
  %165 = logical_or(%151, %152) /* ty=Tensor[(15, 5, 6), bool] */;
  %166 = @func_3107(%155, %156) /* ty=Tensor[(4, 5, 3), float32] */;
  %167 = %162.4;
  %168 = @func_700() /* ty=Tensor[(15, 15, 13), float64] */;
  (%163, %164, %165, %166, %var_3385, %158, %167, %var_3397, %168)
}

def @func_221() -> (Tensor[(15, 15, 13), float64],) {
  %169 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  %170 = cast(%169, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %171 = atanh(%170) /* ty=Tensor[(15, 15, 13), float64] */;
  (%171,)
}

def @func_3420() -> Tensor[(15, 15, 13), float64] {
  %172 = @func_221() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %172.0
}

def @func_874() -> Tensor[(15, 15, 13), float64] {
  %173 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %173.1
}

def @func_1106(%var_1056: Tensor[(280), bool], %var_1062: Tensor[(15, 15, 13), float32]) -> (Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(280), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), bool], Tensor[(15, 3, 7), int16]) {
  %174 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %175 = cast(%var_1056, dtype="bool") /* ty=Tensor[(280), bool] */;
  %176 = cast(%var_1056, dtype="bool") /* ty=Tensor[(280), bool] */;
  %177 = reshape(%175, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %178 = reshape(%176, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %179 = @func_385(%177, %178) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) */;
  %180 = @func_916() /* ty=Tensor[(15, 15, 13), float64] */;
  %181 = cast(%180, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %182 = log10(%181) /* ty=Tensor[(15, 15, 13), float32] */;
  %183 = cast(%var_1062, dtype="int64") /* ty=Tensor[(15, 15, 13), int64] */;
  %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%182, dtype="int64") /* ty=Tensor[(15, 15, 13), int64] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %187 = bitwise_and(%185, %186) /* ty=Tensor[(15, 15, 13), int64] */;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %189 = reshape(%188, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
  %190 = @func_674(%189) /* ty=(Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), float64]) */;
  %191 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
  %192 = cast(%191, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
  %193 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%187, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %196 = cast(meta[relay.Constant][5] /* ty=Tensor[(315), int8] */, dtype="int8") /* ty=Tensor[(315), int8] */;
  %197 = reshape(%196, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), int8] */;
  %198 = @func_100(%197) /* ty=(Tensor[(15, 3, 7), int8], Tensor[(15, 3, 7), float32]) */;
  %199 = %198.0;
  %200 = cast(meta[relay.Constant][5] /* ty=Tensor[(315), int8] */, dtype="int16") /* ty=Tensor[(315), int16] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%199, dtype="int16") /* ty=Tensor[(15, 3, 7), int16] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %204 = %174.1;
  %205 = %179.1;
  %206 = @func_700() /* ty=Tensor[(15, 15, 13), float64] */;
  %207 = %190.0;
  %208 = greater_equal(%194, %195) /* ty=Tensor[(15, 15, 13), bool] */;
  %209 = left_shift(%202, %203) /* ty=Tensor[(15, 3, 7), int16] */;
  (%204, %205, %var_1056, %206, %207, %208, %209)
}

def @func_2684(%var_2671: Tensor[(13, 11, 12), float64]) -> Tensor[(13, 11, 12), float32] {
  %210 = cast(%var_2671, dtype="float64") /* ty=Tensor[(13, 11, 12), float64] */;
  %211 = rsqrt(%210) /* ty=Tensor[(13, 11, 12), float64] */;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(13, 11, 12), float32] */;
  log10(%212) /* ty=Tensor[(13, 11, 12), float32] */
}

def @func_2588(%var_2555: Tensor[(252), int8]) -> (Tensor[(280), float64], Tensor[(1, 64), float64], Tensor[(252), int8], Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), bool]) {
  %213 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 64), float64] */, dtype="float64") /* ty=Tensor[(1, 64), float64] */;
  %214 = cast(%var_2555, dtype="int8") /* ty=Tensor[(252), int8] */;
  %215 = reshape(%213, newshape=[4, 16]) /* ty=Tensor[(4, 16), float64] */;
  %216 = reshape(%214, newshape=[252]) /* ty=Tensor[(252), int8] */;
  %217 = @func_1267(%215, %216) /* ty=(Tensor[(4, 16), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8], Tensor[(280), float64]) */;
  %218 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 26), int32] */, dtype="int32") /* ty=Tensor[(13, 26), int32] */;
  %219 = reshape(%218, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), int32] */;
  %220 = @func_117(%219) /* ty=(Tensor[(13, 13, 2), bool],) */;
  %221 = @func_2125() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %222 = %221.0;
  %223 = @func_916() /* ty=Tensor[(15, 15, 13), float64] */;
  %224 = cast(%223, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
  %225 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%222, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %228 = %217.3;
  %229 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
  %230 = %220.0;
  %231 = less_equal(%226, %227) /* ty=Tensor[(15, 15, 13), bool] */;
  (%228, meta[relay.Constant][6] /* ty=Tensor[(1, 64), float64] */, %var_2555, %229, %230, meta[relay.Constant][7] /* ty=Tensor[(13, 26), int32] */, %231)
}

def @func_5106(%var_5093: Tensor[(2, 6, 8), uint16]) -> Tensor[(2, 6, 8), bool] {
  %232 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 6, 8), uint16] */, dtype="bool") /* ty=Tensor[(2, 6, 8), bool] */;
  %233 = shape_of(%var_5093, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%var_5093, dtype="bool") /* ty=Tensor[(2, 6, 8), bool] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%234, %235) /* ty=Tensor[(2, 6, 8), bool] */
}

def @func_662() -> Tensor[(15, 15, 13), float64] {
  %236 = @func_221() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %236.0
}

def @func_1415() -> (Tensor[(15, 15, 13), float64],) {
  %237 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %238 = %237.1;
  (%238,)
}

def @func_489() -> (Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) {
  %239 = cast(meta[relay.Constant][9] /* ty=Tensor[(280), bool] */, dtype="bool") /* ty=Tensor[(280), bool] */;
  %240 = cast(meta[relay.Constant][9] /* ty=Tensor[(280), bool] */, dtype="bool") /* ty=Tensor[(280), bool] */;
  %241 = reshape(%239, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %242 = reshape(%240, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %243 = @func_385(%241, %242) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) */;
  %244 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 26), int32] */, dtype="int32") /* ty=Tensor[(13, 26), int32] */;
  %245 = reshape(%244, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), int32] */;
  %246 = @func_117(%245) /* ty=(Tensor[(13, 13, 2), bool],) */;
  %247 = @func_221() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %248 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %249 = %248.0;
  %250 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %251 = %250.0;
  %252 = cast(%251, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
  %253 = shape_of(%249, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%249, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %256 = %243.0;
  %257 = %246.0;
  %258 = %247.0;
  %259 = not_equal(%254, %255) /* ty=Tensor[(15, 15, 13), bool] */;
  (%256, meta[relay.Constant][9] /* ty=Tensor[(280), bool] */, %257, meta[relay.Constant][10] /* ty=Tensor[(13, 26), int32] */, %258, %259)
}

def @func_4147() -> (Tensor[(15, 15, 13), float64],) {
  %260 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %261 = %260.0;
  (%261,)
}

def @func_351() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %262 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %263 = %262.0;
  %264 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  (%263, %264)
}

def @func_4331() -> (Tensor[(13, 5, 5), float64], Tensor[(13, 5, 5), bool]) {
  %265 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 5, 5), float32] */, dtype="float32") /* ty=Tensor[(13, 5, 5), float32] */;
  %266 = rsqrt(%265) /* ty=Tensor[(13, 5, 5), float32] */;
  %267 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 5, 5), float32] */, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
  %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%266, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %271 = logical_and(%269, %270) /* ty=Tensor[(13, 5, 5), bool] */;
  %272 = cast(%266, dtype="float64") /* ty=Tensor[(13, 5, 5), float64] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="float64") /* ty=Tensor[(13, 5, 5), float64] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %276 = cast(%266, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
  %277 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(13, 5, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 5, 5), float32] */, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %280 = mod(%274, %275) /* ty=Tensor[(13, 5, 5), float64] */;
  %281 = less_equal(%278, %279) /* ty=Tensor[(13, 5, 5), bool] */;
  (%280, %281)
}

def @func_621(%var_549: Tensor[(280), bool], %var_591: Tensor[(13, 13, 2), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(338), float32], Tensor[(13, 13, 2), bool], Tensor[(13, 13, 2), bool]) {
  %282 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %283 = cast(%var_549, dtype="bool") /* ty=Tensor[(280), bool] */;
  %284 = cast(%var_549, dtype="bool") /* ty=Tensor[(280), bool] */;
  %285 = reshape(%283, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %286 = reshape(%284, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %287 = @func_385(%285, %286) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) */;
  %288 = @func_221() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %289 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %290 = cast(%var_549, dtype="bool") /* ty=Tensor[(280), bool] */;
  %291 = cast(%var_549, dtype="bool") /* ty=Tensor[(280), bool] */;
  %292 = reshape(%290, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %293 = reshape(%291, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %294 = @func_385(%292, %293) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) */;
  %295 = cast(meta[relay.Constant][13] /* ty=Tensor[(338), int32] */, dtype="int32") /* ty=Tensor[(338), int32] */;
  %296 = reshape(%295, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), int32] */;
  %297 = @func_117(%296) /* ty=(Tensor[(13, 13, 2), bool],) */;
  %298 = %297.0;
  %299 = cast(%298, dtype="int32") /* ty=Tensor[(13, 13, 2), int32] */;
  %300 = reshape(%299, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), int32] */;
  %301 = @func_117(%300) /* ty=(Tensor[(13, 13, 2), bool],) */;
  %302 = cast(meta[relay.Constant][13] /* ty=Tensor[(338), int32] */, dtype="float32") /* ty=Tensor[(338), float32] */;
  %303 = cast(%var_591, dtype="bool") /* ty=Tensor[(13, 13, 2), bool] */;
  %304 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%298, dtype="bool") /* ty=Tensor[(13, 13, 2), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %307 = acos(%302) /* ty=Tensor[(338), float32] */;
  %308 = cast(%307, dtype="int32") /* ty=Tensor[(338), int32] */;
  %309 = reshape(%308, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), int32] */;
  %310 = @func_117(%309) /* ty=(Tensor[(13, 13, 2), bool],) */;
  %311 = %282.0;
  %312 = %287.2;
  %313 = %288.0;
  %314 = %289.0;
  %315 = %294.0;
  %316 = %301.0;
  %317 = less_equal(%305, %306) /* ty=Tensor[(13, 13, 2), bool] */;
  %318 = %310.0;
  (%311, %312, %var_549, %313, %314, %315, %316, %307, %317, %318)
}

def @func_5875() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %319 = @func_2125() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %320 = @func_662() /* ty=Tensor[(15, 15, 13), float64] */;
  %321 = %319.0;
  (%320, %321)
}

def @func_1353(%var_1348: Tensor[(15, 15, 13), float64]) -> Tensor[(15, 15, 13), bool] {
  %322 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  %323 = cast(%var_1348, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
  %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%322, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%325, %326) /* ty=Tensor[(15, 15, 13), bool] */
}

def @func_970(%var_959: Tensor[(6, 7, 6), int8]) -> Tensor[(6, 7, 6), bool] {
  %327 = cast(meta[relay.Constant][14] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %328 = cast(%var_959, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  less(%327, %328) /* ty=Tensor[(6, 7, 6), bool] */
}

def @func_2898() -> (Tensor[(15, 15, 13), float64], Tensor[(280), bool]) {
  %329 = @func_1828() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %330 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
  %331 = %329.2;
  (%330, %331)
}

def @func_2641() -> (Tensor[(15, 15, 13), float64],) {
  %332 = @func_1828() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %333 = %332.1;
  (%333,)
}

def @func_5494(%var_5489: Tensor[(7, 7, 8), int8], %var_5490: Tensor[(7, 7, 8), int8]) -> Tensor[(7, 7, 8), bool] {
  %334 = cast(%var_5490, dtype="bool") /* ty=Tensor[(7, 7, 8), bool] */;
  %335 = shape_of(%var_5489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%var_5489, dtype="bool") /* ty=Tensor[(7, 7, 8), bool] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%336, %337) /* ty=Tensor[(7, 7, 8), bool] */
}

def @func_1018(%var_1011: Tensor[(2, 3, 4), uint32], %var_1012: Tensor[(2, 3, 4), uint32]) -> (Tensor[(2, 3, 4), uint32],) {
  %338 = cast(%var_1012, dtype="uint32") /* ty=Tensor[(2, 3, 4), uint32] */;
  %339 = shape_of(%var_1011, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%var_1011, dtype="uint32") /* ty=Tensor[(2, 3, 4), uint32] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %342 = minimum(%340, %341) /* ty=Tensor[(2, 3, 4), uint32] */;
  (%342,)
}

def @func_3326() -> (Tensor[(15, 15, 13), float64], Tensor[(338), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), int32], Tensor[(26, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), float64]) {
  %343 = @func_2242() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %344 = @func_2805() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %345 = %343.0;
  %346 = cast(%345, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %347 = reshape(%346, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
  %348 = %344.0;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %350 = reshape(%349, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
  %351 = @func_1608(%350) /* ty=(Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64]) */;
  %352 = @func_2601() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %353 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 42), int8] */, dtype="int8") /* ty=Tensor[(6, 42), int8] */;
  %354 = reshape(%353, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), int8] */;
  %355 = @func_970(%354) /* ty=Tensor[(6, 7, 6), bool] */;
  %356 = cast(%355, dtype="float64") /* ty=Tensor[(6, 7, 6), float64] */;
  %357 = atan(%356) /* ty=Tensor[(6, 7, 6), float64] */;
  %358 = cast(%357, dtype="float32") /* ty=Tensor[(6, 7, 6), float32] */;
  %359 = log(%358) /* ty=Tensor[(6, 7, 6), float32] */;
  %360 = cast(%355, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  %361 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%357, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %364 = logical_or(%362, %363) /* ty=Tensor[(6, 7, 6), bool] */;
  %365 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 42), int8] */, dtype="bool") /* ty=Tensor[(6, 42), bool] */;
  %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%364, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %369 = less_equal(%367, %368) /* ty=Tensor[(6, 7, 6), bool] */;
  %370 = cast(%369, dtype="int32") /* ty=Tensor[(6, 7, 6), int32] */;
  %371 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%359, dtype="int32") /* ty=Tensor[(6, 7, 6), int32] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %374 = cast(meta[relay.Constant][15] /* ty=Tensor[(338), int32] */, dtype="int32") /* ty=Tensor[(338), int32] */;
  %375 = reshape(%374, newshape=[26, 13]) /* ty=Tensor[(26, 13), int32] */;
  %376 = @func_821(%375) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(26, 13), int64]) */;
  %377 = %376.1;
  %378 = cast(%377, dtype="float64") /* ty=Tensor[(26, 13), float64] */;
  %379 = @func_3020() /* ty=(Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %380 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 7, 6), bool] */, dtype="float64") /* ty=Tensor[(6, 7, 6), float64] */;
  %381 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%364, dtype="float64") /* ty=Tensor[(6, 7, 6), float64] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %384 = @func_2697() /* ty=Tensor[(15, 15, 13), float64] */;
  %385 = @func_1353(%347) /* ty=Tensor[(15, 15, 13), bool] */;
  %386 = %351.1;
  %387 = %352.0;
  %388 = left_shift(%372, %373) /* ty=Tensor[(6, 7, 6), int32] */;
  %389 = atanh(%378) /* ty=Tensor[(26, 13), float64] */;
  %390 = %379.2;
  %391 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  %392 = divide(%382, %383) /* ty=Tensor[(6, 7, 6), float64] */;
  (%345, meta[relay.Constant][15] /* ty=Tensor[(338), int32] */, %384, %348, %385, %386, %387, %388, %389, %390, %391, %392)
}

def @func_3020() -> (Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %393 = @func_2940() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool]) */;
  %394 = %393.0;
  %395 = cast(%394, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %396 = @func_1979() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %397 = %396.4;
  %398 = cast(%397, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %399 = reshape(%398, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float32] */;
  %400 = @func_2356(%399) /* ty=(Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %401 = exp(%395) /* ty=Tensor[(15, 15, 13), float32] */;
  %402 = %400.2;
  (%401, %397, %402)
}

def @func_4801() -> Tensor[(15, 15, 13), float64] {
  %403 = @func_3217() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(252), int8], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %403.0
}

def @func_2242() -> (Tensor[(15, 15, 13), float64],) {
  %404 = @func_1979() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %405 = %404.0;
  (%405,)
}

def @func_4494() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %406 = @func_1186() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8]) */;
  %407 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %408 = %406.0;
  %409 = %407.0;
  (%408, %409)
}

def @func_2853() -> Tensor[(15, 15, 13), float64] {
  @func_2154() /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_4878(%var_4864: Tensor[(16, 6, 13), float64], %var_4865: Tensor[(16, 6, 13), float64]) -> (Tensor[(16, 6, 13), float64], Tensor[(16, 6, 13), int32]) {
  %410 = cast(%var_4865, dtype="float64") /* ty=Tensor[(16, 6, 13), float64] */;
  %411 = shape_of(%var_4864, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%var_4864, dtype="float64") /* ty=Tensor[(16, 6, 13), float64] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %414 = cast(%var_4865, dtype="int32") /* ty=Tensor[(16, 6, 13), int32] */;
  %415 = shape_of(%var_4864, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%var_4864, dtype="int32") /* ty=Tensor[(16, 6, 13), int32] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %418 = subtract(%412, %413) /* ty=Tensor[(16, 6, 13), float64] */;
  %419 = left_shift(%416, %417) /* ty=Tensor[(16, 6, 13), int32] */;
  (%418, %419)
}

def @func_2940() -> (Tensor[(15, 15, 13), float64], Tensor[(280), bool]) {
  %420 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %421 = @func_2898() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool]) */;
  %422 = %420.0;
  %423 = %421.1;
  (%422, %423)
}

def @func_1828() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %424 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %425 = cast(meta[relay.Constant][18] /* ty=Tensor[(280), bool] */, dtype="bool") /* ty=Tensor[(280), bool] */;
  %426 = cast(meta[relay.Constant][19] /* ty=Tensor[(338), bool] */, dtype="bool") /* ty=Tensor[(338), bool] */;
  %427 = reshape(%425, newshape=[280]) /* ty=Tensor[(280), bool] */;
  %428 = reshape(%426, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), bool] */;
  %429 = @func_621(%427, %428) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(338), float32], Tensor[(13, 13, 2), bool], Tensor[(13, 13, 2), bool]) */;
  %430 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %433 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %434 = %424.1;
  %435 = %429.3;
  %436 = sigmoid(%432) /* ty=Tensor[(15, 15, 13), float64] */;
  %437 = %433.0;
  (%434, %435, meta[relay.Constant][18] /* ty=Tensor[(280), bool] */, meta[relay.Constant][19] /* ty=Tensor[(338), bool] */, %436, %437)
}

def @func_5373(%var_5366: Tensor[(10, 11, 13), int16], %var_5367: Tensor[(10, 11, 13), int16]) -> Tensor[(10, 11, 13), bool] {
  %438 = cast(%var_5367, dtype="bool") /* ty=Tensor[(10, 11, 13), bool] */;
  %439 = shape_of(%var_5366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%var_5366, dtype="bool") /* ty=Tensor[(10, 11, 13), bool] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%440, %441) /* ty=Tensor[(10, 11, 13), bool] */
}

def @func_5893(%var_5881: Tensor[(9, 16, 9), float32]) -> Tensor[(9, 16, 9), float32] {
  %442 = cast(%var_5881, dtype="float32") /* ty=Tensor[(9, 16, 9), float32] */;
  atan(%442) /* ty=Tensor[(9, 16, 9), float32] */
}

def @func_5510(%var_5502: Tensor[(10, 1, 11), float64]) -> (Tensor[(10, 1, 11), float64],) {
  %443 = cast(%var_5502, dtype="float64") /* ty=Tensor[(10, 1, 11), float64] */;
  %444 = cosh(%443) /* ty=Tensor[(10, 1, 11), float64] */;
  (%444,)
}

def @func_2697() -> Tensor[(15, 15, 13), float64] {
  %445 = @func_1678() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %445.0
}

def @func_4748(%var_4745: Tensor[(1, 10, 9), float64]) -> (Tensor[(1, 10, 9), float64],) {
  %446 = cast(%var_4745, dtype="float64") /* ty=Tensor[(1, 10, 9), float64] */;
  %447 = cos(%446) /* ty=Tensor[(1, 10, 9), float64] */;
  (%447,)
}

def @func_5676() -> (Tensor[(13, 26), int32], Tensor[(?, 280), bool]) {
  %448 = @func_1979() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %449 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 280), uint64] */, dtype="uint64") /* ty=Tensor[(1, 280), uint64] */;
  %450 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 280), uint64] */, dtype="float32") /* ty=Tensor[(1, 280), float32] */;
  %451 = reshape(%449, newshape=[280]) /* ty=Tensor[(280), uint64] */;
  %452 = reshape(%450, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), float32] */;
  %453 = @func_3998(%451, %452) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(70), uint64], Tensor[(2, 5, 12), float32], Tensor[(120), float32], Tensor[(10, 7, 4), uint8], Tensor[(15, 15, 13), float64], Tensor[(10, 7, 4), float32], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 3, 7), float32], Tensor[(315), int8]) */;
  %454 = %453.6;
  %455 = cast(%454, dtype="bool") /* ty=Tensor[(10, 7, 4), bool] */;
  %456 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(1, 280), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %457 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 280), uint64] */, dtype="bool") /* ty=Tensor[(1, 280), bool] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %459 = %448.2;
  %460 = logical_or(%457, %458) /* ty=Tensor[(?, 280), bool] */;
  (%459, %460)
}

def @func_3542() -> (Tensor[(6, 7, 6), int32], Tensor[(15, 15, 13), float64]) {
  %461 = @func_3326() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(338), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), int32], Tensor[(26, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), float64]) */;
  %462 = %461.7;
  %463 = @func_2697() /* ty=Tensor[(15, 15, 13), float64] */;
  (%462, %463)
}

def @func_916() -> Tensor[(15, 15, 13), float64] {
  %464 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %464.0
}

def @func_5687() -> (Tensor[(15, 15, 13), float64],) {
  %465 = @func_662() /* ty=Tensor[(15, 15, 13), float64] */;
  (%465,)
}

def @func_2417() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), uint32]) {
  %466 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %467 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
  %468 = @func_2242() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %469 = %468.0;
  %470 = cast(%469, dtype="uint32") /* ty=Tensor[(15, 15, 13), uint32] */;
  %471 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%467, dtype="uint32") /* ty=Tensor[(15, 15, 13), uint32] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %474 = %466.0;
  %475 = maximum(%472, %473) /* ty=Tensor[(15, 15, 13), uint32] */;
  (%474, %475)
}

def @func_5328(%var_5304: Tensor[(32), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(10, 5, 7), bool], Tensor[(5, 70), bool], Tensor[(32), bool], Tensor[(15, 15, 13), float64]) {
  %476 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %478 = reshape(%477, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
  %479 = @func_674(%478) /* ty=(Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), float64]) */;
  %480 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 70), bool] */, dtype="bool") /* ty=Tensor[(5, 70), bool] */;
  %481 = cast(%var_5304, dtype="bool") /* ty=Tensor[(32), bool] */;
  %482 = reshape(%480, newshape=[10, 5, 7]) /* ty=Tensor[(10, 5, 7), bool] */;
  %483 = reshape(%481, newshape=[2, 16, 1]) /* ty=Tensor[(2, 16, 1), bool] */;
  %484 = @func_4946(%482, %483) /* ty=(Tensor[(10, 5, 7), bool], Tensor[(2, 16, 1), uint32], Tensor[(2, 16, 1), float32]) */;
  %485 = %479.1;
  %486 = %484.0;
  %487 = @func_662() /* ty=Tensor[(15, 15, 13), float64] */;
  (%476, %485, %486, meta[relay.Constant][21] /* ty=Tensor[(5, 70), bool] */, %var_5304, %487)
}

def @func_5947() -> (Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(280), bool]) {
  %488 = @func_5863() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %489 = cast(meta[relay.Constant][22] /* ty=Tensor[(280), bool] */, dtype="bool") /* ty=Tensor[(280), bool] */;
  %490 = cast(meta[relay.Constant][22] /* ty=Tensor[(280), bool] */, dtype="bool") /* ty=Tensor[(280), bool] */;
  %491 = reshape(%489, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %492 = reshape(%490, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %493 = @func_385(%491, %492) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) */;
  %494 = %488.0;
  %495 = %493.1;
  (%494, %495, meta[relay.Constant][22] /* ty=Tensor[(280), bool] */)
}

def @func_4713() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(252), int8], Tensor[(2, 504), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %496 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %497 = @func_1186() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8]) */;
  %498 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 504), int8] */, dtype="int8") /* ty=Tensor[(2, 504), int8] */;
  %499 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 504), int8] */, dtype="int8") /* ty=Tensor[(2, 504), int8] */;
  %500 = reshape(%498, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %501 = reshape(%499, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %502 = @func_4359(%500, %501) /* ty=(Tensor[(12, 7, 12), int8],) */;
  %503 = %502.0;
  %504 = cast(%503, dtype="int32") /* ty=Tensor[(12, 7, 12), int32] */;
  %505 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(2, 504), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %506 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 504), int8] */, dtype="int32") /* ty=Tensor[(2, 504), int32] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %508 = @func_3420() /* ty=Tensor[(15, 15, 13), float64] */;
  %509 = %496.0;
  %510 = %497.2;
  %511 = left_shift(%506, %507) /* ty=Tensor[(2, 504), int32] */;
  %512 = @func_3420() /* ty=Tensor[(15, 15, 13), float64] */;
  %513 = @func_3420() /* ty=Tensor[(15, 15, 13), float64] */;
  (%508, %509, %510, %511, %512, %513)
}

def @func_5863() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %514 = @func_4279() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %515 = @func_5013() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %516 = %514.0;
  %517 = %515.1;
  (%516, %517)
}

def @func_2044(%var_2036: Tensor[(6, 16, 1), float64], %var_2037: Tensor[(6, 16, 6), float64]) -> (Tensor[(6, 16, 6), float64],) {
  %518 = cast(%var_2036, dtype="float64") /* ty=Tensor[(6, 16, 1), float64] */;
  %519 = cast(%var_2037, dtype="float64") /* ty=Tensor[(6, 16, 6), float64] */;
  %520 = mod(%518, %519) /* ty=Tensor[(6, 16, 6), float64] */;
  (%520,)
}

def @func_1034() -> (Tensor[(15, 15, 13), float64],) {
  %521 = @func_700() /* ty=Tensor[(15, 15, 13), float64] */;
  (%521,)
}

def @func_2144() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %522 = @func_1678() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %523 = @func_662() /* ty=Tensor[(15, 15, 13), float64] */;
  %524 = %522.0;
  (%523, %524)
}

def @func_5608(%var_5571: Tensor[(11, 7, 5), uint64]) -> (Tensor[(11, 7, 5), uint64], Tensor[(11, 7, 5), int32], Tensor[(11, 7, 5), float32], Tensor[(15, 15, 13), float64]) {
  %525 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 7, 5), uint64] */, dtype="uint64") /* ty=Tensor[(11, 7, 5), uint64] */;
  %526 = shape_of(%var_5571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%var_5571, dtype="uint64") /* ty=Tensor[(11, 7, 5), uint64] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %529 = cast(%var_5571, dtype="int32") /* ty=Tensor[(11, 7, 5), int32] */;
  %530 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(11, 7, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 7, 5), uint64] */, dtype="int32") /* ty=Tensor[(11, 7, 5), int32] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %533 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 7, 5), uint64] */, dtype="float64") /* ty=Tensor[(11, 7, 5), float64] */;
  %534 = shape_of(%var_5571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%var_5571, dtype="float64") /* ty=Tensor[(11, 7, 5), float64] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %537 = divide(%535, %536) /* ty=Tensor[(11, 7, 5), float64] */;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(11, 7, 5), float32] */;
  %539 = @func_3813() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %540 = minimum(%527, %528) /* ty=Tensor[(11, 7, 5), uint64] */;
  %541 = bitwise_xor(%531, %532) /* ty=Tensor[(11, 7, 5), int32] */;
  %542 = log(%538) /* ty=Tensor[(11, 7, 5), float32] */;
  %543 = %539.0;
  (%540, %541, %542, %543)
}

def @func_674(%var_667: Tensor[(15, 15, 13), float64]) -> (Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), float64]) {
  %544 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  %545 = cast(%var_667, dtype="int16") /* ty=Tensor[(15, 15, 13), int16] */;
  %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%544, dtype="int16") /* ty=Tensor[(15, 15, 13), int16] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %549 = cast(%var_667, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %550 = minimum(%547, %548) /* ty=Tensor[(15, 15, 13), int16] */;
  %551 = sinh(%549) /* ty=Tensor[(15, 15, 13), float64] */;
  (%550, %551)
}

def @func_2086(%var_2061: Tensor[(13, 26), int32], %var_2074: Tensor[(35, 9), int8], %var_2076: Tensor[(252), int8]) -> (Tensor[(13, 26), int16], Tensor[(15, 15, 13), bool], Tensor[(35, 9), int8], Tensor[(4, 16), float64], Tensor[(252), int8]) {
  %552 = @func_489() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
  %553 = %552.3;
  %554 = cast(%var_2061, dtype="int16") /* ty=Tensor[(13, 26), int16] */;
  %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(2), int32] */;
  %556 = cast(%553, dtype="int16") /* ty=Tensor[(13, 26), int16] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %558 = logical_xor(%556, %557) /* ty=Tensor[(13, 26), int16] */;
  %559 = cast(%558, dtype="int32") /* ty=Tensor[(13, 26), int32] */;
  %560 = cast(%var_2074, dtype="int8") /* ty=Tensor[(35, 9), int8] */;
  %561 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
  %562 = cast(%var_2076, dtype="int8") /* ty=Tensor[(252), int8] */;
  %563 = cast(%553, dtype="bool") /* ty=Tensor[(13, 26), bool] */;
  %564 = reshape(%559, newshape=[1, 338]) /* ty=Tensor[(1, 338), int32] */;
  %565 = reshape(%560, newshape=[315]) /* ty=Tensor[(315), int8] */;
  %566 = reshape(%561, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %567 = reshape(%562, newshape=[1, 252]) /* ty=Tensor[(1, 252), int8] */;
  %568 = reshape(%563, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), bool] */;
  %569 = @func_1582(%564, %565, %566, %567, %568) /* ty=(Tensor[(15, 15, 13), int16], Tensor[(1, 338), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 3, 7), int8], Tensor[(315), int8], Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), bool], Tensor[(252), int8], Tensor[(64), float64], Tensor[(1, 252), int8], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), bool], Tensor[(13, 13, 2), int64]) */;
  %570 = %569.6;
  (%558, %570, %var_2074, meta[relay.Constant][26] /* ty=Tensor[(4, 16), float64] */, %var_2076)
}

def @func_3107(%var_3101: Tensor[(4, 5, 3), float32], %var_3102: Tensor[(4, 5, 3), float32]) -> Tensor[(4, 5, 3), float32] {
  %571 = cast(%var_3102, dtype="float32") /* ty=Tensor[(4, 5, 3), float32] */;
  %572 = shape_of(%var_3101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%var_3101, dtype="float32") /* ty=Tensor[(4, 5, 3), float32] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%573, %574) /* ty=Tensor[(4, 5, 3), float32] */
}

def @func_1678() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %575 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %576 = @func_1115() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %577 = %575.0;
  %578 = %576.1;
  (%577, %578)
}

def @func_4184(%var_4180: Tensor[(280), bool], %var_4181: Tensor[(338), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(280), bool], Tensor[(338), bool]) {
  %579 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %580 = cast(%var_4180, dtype="bool") /* ty=Tensor[(280), bool] */;
  %581 = cast(%var_4181, dtype="bool") /* ty=Tensor[(338), bool] */;
  %582 = reshape(%580, newshape=[280]) /* ty=Tensor[(280), bool] */;
  %583 = reshape(%581, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), bool] */;
  %584 = @func_621(%582, %583) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(338), float32], Tensor[(13, 13, 2), bool], Tensor[(13, 13, 2), bool]) */;
  %585 = %579.0;
  %586 = %584.9;
  (%585, %586, %var_4180, %var_4181)
}

def @func_4036(%var_4024: Tensor[(15, 15, 13), bool]) -> (Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64]) {
  %587 = @func_3753() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
  %588 = %587.1;
  %589 = cast(%var_4024, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %593 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %594 = floor_mod(%591, %592) /* ty=Tensor[(15, 15, 13), float32] */;
  %595 = %593.0;
  (%594, %595)
}

def @func_4279() -> (Tensor[(15, 15, 13), float64],) {
  %596 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %597 = %596.0;
  (%597,)
}

def @func_385(%var_353: Tensor[(14, 2, 10), bool], %var_377: Tensor[(14, 2, 10), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) {
  %598 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %599 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 2, 10), bool] */, dtype="bool") /* ty=Tensor[(14, 2, 10), bool] */;
  %600 = shape_of(%var_353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%var_353, dtype="bool") /* ty=Tensor[(14, 2, 10), bool] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %603 = logical_and(%601, %602) /* ty=Tensor[(14, 2, 10), bool] */;
  %604 = cast(%var_377, dtype="uint16") /* ty=Tensor[(14, 2, 10), uint16] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%603, dtype="uint16") /* ty=Tensor[(14, 2, 10), uint16] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %608 = %598.0;
  %609 = bitwise_and(%606, %607) /* ty=Tensor[(14, 2, 10), uint16] */;
  %610 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  (%608, %609, %610)
}

def @func_3563(%var_3555: Tensor[(6, 7, 6), int32]) -> (Tensor[(6, 7, 6), bool], Tensor[(15, 15, 13), float64]) {
  %611 = @func_3542() /* ty=(Tensor[(6, 7, 6), int32], Tensor[(15, 15, 13), float64]) */;
  %612 = %611.0;
  %613 = cast(%var_3555, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%612, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %617 = equal(%615, %616) /* ty=Tensor[(6, 7, 6), bool] */;
  %618 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  (%617, %618)
}

def @func_1582(%var_1434: Tensor[(1, 338), int32], %var_1441: Tensor[(315), int8], %var_1483: Tensor[(64), float64], %var_1484: Tensor[(1, 252), int8], %var_1555: Tensor[(13, 13, 2), bool]) -> (Tensor[(15, 15, 13), int16], Tensor[(1, 338), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 3, 7), int8], Tensor[(315), int8], Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), bool], Tensor[(252), int8], Tensor[(64), float64], Tensor[(1, 252), int8], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), bool], Tensor[(13, 13, 2), int64]) {
  %619 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  %620 = cast(%619, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %621 = reshape(%620, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
  %622 = @func_674(%621) /* ty=(Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), float64]) */;
  %623 = cast(%var_1441, dtype="int8") /* ty=Tensor[(315), int8] */;
  %624 = reshape(%623, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), int8] */;
  %625 = @func_100(%624) /* ty=(Tensor[(15, 3, 7), int8], Tensor[(15, 3, 7), float32]) */;
  %626 = cast(%619, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %627 = reshape(%626, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
  %628 = cast(%619, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %629 = erf(%628) /* ty=Tensor[(15, 15, 13), float64] */;
  %630 = cast(%629, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %631 = reshape(%630, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
  %632 = cast(%var_1483, dtype="float64") /* ty=Tensor[(64), float64] */;
  %633 = cast(%var_1484, dtype="int8") /* ty=Tensor[(1, 252), int8] */;
  %634 = reshape(%632, newshape=[4, 16]) /* ty=Tensor[(4, 16), float64] */;
  %635 = reshape(%633, newshape=[252]) /* ty=Tensor[(252), int8] */;
  %636 = @func_1267(%634, %635) /* ty=(Tensor[(4, 16), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8], Tensor[(280), float64]) */;
  %637 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %638 = cast(%629, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %639 = %622.0;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %641 = reshape(%640, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
  %642 = cast(%var_1434, dtype="int32") /* ty=Tensor[(1, 338), int32] */;
  %643 = reshape(%642, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), int32] */;
  %644 = @func_117(%643) /* ty=(Tensor[(13, 13, 2), bool],) */;
  %645 = %644.0;
  %646 = cast(%var_1555, dtype="int64") /* ty=Tensor[(13, 13, 2), int64] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%645, dtype="int64") /* ty=Tensor[(13, 13, 2), int64] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %650 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  %651 = %625.0;
  %652 = @func_1353(%627) /* ty=Tensor[(15, 15, 13), bool] */;
  %653 = @func_1353(%631) /* ty=Tensor[(15, 15, 13), bool] */;
  %654 = %636.2;
  %655 = %637.0;
  %656 = cosh(%638) /* ty=Tensor[(15, 15, 13), float32] */;
  %657 = @func_1353(%641) /* ty=Tensor[(15, 15, 13), bool] */;
  %658 = logical_xor(%648, %649) /* ty=Tensor[(13, 13, 2), int64] */;
  (%639, %var_1434, %650, %651, %var_1441, %652, %653, %654, %var_1483, %var_1484, %655, %656, %657, %658)
}

def @func_1186() -> (Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8]) {
  %659 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %660 = cast(meta[relay.Constant][28] /* ty=Tensor[(252), int8] */, dtype="int8") /* ty=Tensor[(252), int8] */;
  %661 = reshape(%660, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), int8] */;
  %662 = %659.0;
  %663 = @func_970(%661) /* ty=Tensor[(6, 7, 6), bool] */;
  (%662, %663, meta[relay.Constant][28] /* ty=Tensor[(252), int8] */)
}

def @func_5013() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %664 = @func_1828() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %665 = @func_1034() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %666 = %664.1;
  %667 = %665.0;
  (%666, %667)
}

def @func_5426() -> Tensor[(15, 15, 13), float64] {
  %668 = @func_2125() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %668.0
}

def @main(%var_5965: Tensor[(8, 4, 4), uint32]) -> Tensor[(8, 4, 4), bool] {
  %669 = cast(meta[relay.Constant][29] /* ty=Tensor[(8, 4, 4), uint32] */, dtype="bool") /* ty=Tensor[(8, 4, 4), bool] */;
  %670 = shape_of(%var_5965, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%var_5965, dtype="bool") /* ty=Tensor[(8, 4, 4), bool] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%671, %672) /* ty=Tensor[(8, 4, 4), bool] */
}

def @func_3813() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %673 = @func_3075() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %674 = @func_2601() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %675 = @func_2154() /* ty=Tensor[(15, 15, 13), float64] */;
  %676 = %673.0;
  %677 = %674.0;
  (%675, %676, %677)
}

def @func_4770() -> Tensor[(13, 26), int32] {
  %678 = @func_1979() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %678.2
}

def @func_3143(%var_3124: Tensor[(2, 5, 12), float32]) -> (Tensor[(2, 5, 12), float32], Tensor[(15, 15, 13), float64]) {
  %679 = cast(%var_3124, dtype="float32") /* ty=Tensor[(2, 5, 12), float32] */;
  %680 = @func_1115() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %681 = tan(%679) /* ty=Tensor[(2, 5, 12), float32] */;
  %682 = %680.1;
  (%681, %682)
}

def @func_4577() -> (Tensor[(15, 15, 13), float64],) {
  %683 = @func_2154() /* ty=Tensor[(15, 15, 13), float64] */;
  (%683,)
}

def @func_4946(%var_4931: Tensor[(10, 5, 7), bool], %var_4938: Tensor[(2, 16, 1), bool]) -> (Tensor[(10, 5, 7), bool], Tensor[(2, 16, 1), uint32], Tensor[(2, 16, 1), float32]) {
  %684 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %685 = cast(%var_4931, dtype="bool") /* ty=Tensor[(10, 5, 7), bool] */;
  %686 = cast(False /* ty=bool */, dtype="uint32") /* ty=uint32 */;
  %687 = cast(%var_4938, dtype="uint32") /* ty=Tensor[(2, 16, 1), uint32] */;
  %688 = cast(%var_4938, dtype="float32") /* ty=Tensor[(2, 16, 1), float32] */;
  %689 = logical_or(%684, %685) /* ty=Tensor[(10, 5, 7), bool] */;
  %690 = multiply(%686, %687) /* ty=Tensor[(2, 16, 1), uint32] */;
  %691 = atanh(%688) /* ty=Tensor[(2, 16, 1), float32] */;
  (%689, %690, %691)
}

def @func_3714(%var_3674: Tensor[(338), int32], %var_3675: Tensor[(315), int8]) -> (Tensor[(15, 15, 13), float64], Tensor[(64), float64], Tensor[(315), int8], Tensor[(4, 16), float64], Tensor[(126, 2), int8], Tensor[(338), uint64], Tensor[(15, 15, 13), float64], Tensor[(10, 28), bool]) {
  %692 = cast(%var_3674, dtype="int32") /* ty=Tensor[(338), int32] */;
  %693 = cast(%var_3675, dtype="int8") /* ty=Tensor[(315), int8] */;
  %694 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
  %695 = cast(meta[relay.Constant][31] /* ty=Tensor[(126, 2), int8] */, dtype="int8") /* ty=Tensor[(126, 2), int8] */;
  %696 = cast(%var_3674, dtype="bool") /* ty=Tensor[(338), bool] */;
  %697 = reshape(%692, newshape=[1, 338]) /* ty=Tensor[(1, 338), int32] */;
  %698 = reshape(%693, newshape=[315]) /* ty=Tensor[(315), int8] */;
  %699 = reshape(%694, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %700 = reshape(%695, newshape=[1, 252]) /* ty=Tensor[(1, 252), int8] */;
  %701 = reshape(%696, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), bool] */;
  %702 = @func_1582(%697, %698, %699, %700, %701) /* ty=(Tensor[(15, 15, 13), int16], Tensor[(1, 338), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 3, 7), int8], Tensor[(315), int8], Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), bool], Tensor[(252), int8], Tensor[(64), float64], Tensor[(1, 252), int8], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), bool], Tensor[(13, 13, 2), int64]) */;
  %703 = cast(meta[relay.Constant][32] /* ty=Tensor[(338), int32] */, dtype="uint64") /* ty=Tensor[(338), uint64] */;
  %704 = shape_of(%var_3674, dtype="int32") /* ty=Tensor[(1), int32] */;
  %705 = cast(%var_3674, dtype="uint64") /* ty=Tensor[(338), uint64] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %707 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 28), bool] */, dtype="bool") /* ty=Tensor[(10, 28), bool] */;
  %708 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 28), bool] */, dtype="bool") /* ty=Tensor[(10, 28), bool] */;
  %709 = reshape(%707, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %710 = reshape(%708, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %711 = @func_385(%709, %710) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) */;
  %712 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
  %713 = %702.8;
  %714 = left_shift(%705, %706) /* ty=Tensor[(338), uint64] */;
  %715 = %711.2;
  (%712, %713, %var_3675, meta[relay.Constant][30] /* ty=Tensor[(4, 16), float64] */, meta[relay.Constant][31] /* ty=Tensor[(126, 2), int8] */, %714, %715, meta[relay.Constant][33] /* ty=Tensor[(10, 28), bool] */)
}

def @func_5799() -> Tensor[(15, 3, 2), bool] {
  %716 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 3, 2), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
  %717 = log2(%716) /* ty=Tensor[(15, 3, 2), float32] */;
  %718 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 3, 2), float32] */, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
  %719 = shape_of(%717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%717, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %722 = equal(%720, %721) /* ty=Tensor[(15, 3, 2), bool] */;
  %723 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 3, 2), float32] */, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
  %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%722, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%725, %726) /* ty=Tensor[(15, 3, 2), bool] */
}

def @func_3075() -> (Tensor[(15, 15, 13), float64],) {
  %727 = @func_1115() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %728 = %727.0;
  (%728,)
}

def @func_2805() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %729 = @func_2641() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %730 = %729.0;
  %731 = @func_2697() /* ty=Tensor[(15, 15, 13), float64] */;
  %732 = @func_2200() /* ty=Tensor[(15, 15, 13), float64] */;
  (%730, %731, %732)
}

def @func_2652() -> (Tensor[(252), int8],) {
  %733 = @func_1186() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8]) */;
  %734 = %733.2;
  (%734,)
}

def @func_4912(%var_4896: Tensor[(13, 5, 5), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(13, 5, 5), bool], Tensor[(6, 7, 6), bool]) {
  %735 = @func_3035() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %736 = @func_4331() /* ty=(Tensor[(13, 5, 5), float64], Tensor[(13, 5, 5), bool]) */;
  %737 = %736.1;
  %738 = cast(%var_4896, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
  %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%737, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %742 = @func_1186() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8]) */;
  %743 = %735.0;
  %744 = not_equal(%740, %741) /* ty=Tensor[(13, 5, 5), bool] */;
  %745 = %742.1;
  (%743, %744, %745)
}

def @func_100(%var_88: Tensor[(15, 3, 7), int8]) -> (Tensor[(15, 3, 7), int8], Tensor[(15, 3, 7), float32]) {
  %746 = cast(%var_88, dtype="int8") /* ty=Tensor[(15, 3, 7), int8] */;
  %747 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(15, 3, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 3, 7), int8] */, dtype="int8") /* ty=Tensor[(15, 3, 7), int8] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %750 = cast(%var_88, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
  %751 = maximum(%748, %749) /* ty=Tensor[(15, 3, 7), int8] */;
  %752 = erf(%750) /* ty=Tensor[(15, 3, 7), float32] */;
  (%751, %752)
}

def @func_194() -> Tensor[(15, 15, 13), float64] {
  %753 = cast(meta[relay.Constant][36] /* ty=Tensor[(15, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  cos(%753) /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_2200() -> Tensor[(15, 15, 13), float64] {
  %754 = @func_1034() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %754.0
}

def @func_2125() -> (Tensor[(15, 15, 13), float64],) {
  %755 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %756 = %755.0;
  (%756,)
}

def @func_1115() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %757 = @func_700() /* ty=Tensor[(15, 15, 13), float64] */;
  %758 = @func_662() /* ty=Tensor[(15, 15, 13), float64] */;
  (%757, %758)
}

def @func_2601() -> (Tensor[(15, 15, 13), float64],) {
  %759 = @func_1115() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %760 = %759.0;
  (%760,)
}

def @func_1208(%var_1194: int32, %var_1195: Tensor[(12, 14, 6), int32]) -> Tensor[(12, 14, 6), bool] {
  %761 = cast(%var_1194, dtype="bool") /* ty=bool */;
  %762 = cast(%var_1195, dtype="bool") /* ty=Tensor[(12, 14, 6), bool] */;
  equal(%761, %762) /* ty=Tensor[(12, 14, 6), bool] */
}

def @func_3998(%var_3870: Tensor[(280), uint64], %var_3902: Tensor[(10, 7, 4), float32]) -> (Tensor[(15, 15, 13), float64], Tensor[(70), uint64], Tensor[(2, 5, 12), float32], Tensor[(120), float32], Tensor[(10, 7, 4), uint8], Tensor[(15, 15, 13), float64], Tensor[(10, 7, 4), float32], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 3, 7), float32], Tensor[(315), int8]) {
  %763 = cast(meta[relay.Constant][38] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %764 = reshape(%763, newshape=[2, 5, 12]) /* ty=Tensor[(2, 5, 12), float32] */;
  %765 = @func_3143(%764) /* ty=(Tensor[(2, 5, 12), float32], Tensor[(15, 15, 13), float64]) */;
  %766 = cast(meta[relay.Constant][37] /* ty=Tensor[(70), uint64] */, dtype="uint64") /* ty=Tensor[(70), uint64] */;
  %767 = cast(%var_3870, dtype="uint64") /* ty=Tensor[(280), uint64] */;
  %768 = reshape(%766, newshape=[10, 7, 1]) /* ty=Tensor[(10, 7, 1), uint64] */;
  %769 = reshape(%767, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint64] */;
  %770 = @func_3736(%768, %769) /* ty=Tensor[(10, 7, 4), uint64] */;
  %771 = cast(%770, dtype="float32") /* ty=Tensor[(10, 7, 4), float32] */;
  %772 = acosh(%771) /* ty=Tensor[(10, 7, 4), float32] */;
  %773 = cast(%772, dtype="float32") /* ty=Tensor[(10, 7, 4), float32] */;
  %774 = sinh(%773) /* ty=Tensor[(10, 7, 4), float32] */;
  %775 = cast(%772, dtype="uint8") /* ty=Tensor[(10, 7, 4), uint8] */;
  %776 = shape_of(%774, dtype="int32") /* ty=Tensor[(3), int32] */;
  %777 = cast(%774, dtype="uint8") /* ty=Tensor[(10, 7, 4), uint8] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %779 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %780 = cast(%var_3902, dtype="bool") /* ty=Tensor[(10, 7, 4), bool] */;
  %781 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(%772, dtype="bool") /* ty=Tensor[(10, 7, 4), bool] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %784 = equal(%782, %783) /* ty=Tensor[(10, 7, 4), bool] */;
  %785 = cast(%784, dtype="float32") /* ty=Tensor[(10, 7, 4), float32] */;
  %786 = cast(%774, dtype="uint8") /* ty=Tensor[(10, 7, 4), uint8] */;
  %787 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%772, dtype="uint8") /* ty=Tensor[(10, 7, 4), uint8] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %790 = bitwise_or(%788, %789) /* ty=Tensor[(10, 7, 4), uint8] */;
  %791 = cast(%790, dtype="float32") /* ty=Tensor[(10, 7, 4), float32] */;
  %792 = log(%791) /* ty=Tensor[(10, 7, 4), float32] */;
  %793 = cast(%var_3870, dtype="bool") /* ty=Tensor[(280), bool] */;
  %794 = shape_of(%792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %795 = cast(%792, dtype="bool") /* ty=Tensor[(10, 7, 4), bool] */;
  %796 = dyn.reshape(%793, %794, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %797 = greater(%795, %796) /* ty=Tensor[(10, 7, 4), bool] */;
  %798 = cast(%797, dtype="float64") /* ty=Tensor[(10, 7, 4), float64] */;
  %799 = cast(%797, dtype="float32") /* ty=Tensor[(10, 7, 4), float32] */;
  %800 = asin(%799) /* ty=Tensor[(10, 7, 4), float32] */;
  %801 = cast(%800, dtype="float64") /* ty=Tensor[(10, 7, 4), float64] */;
  %802 = @func_221() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %803 = cast(meta[relay.Constant][39] /* ty=Tensor[(315), int8] */, dtype="int8") /* ty=Tensor[(315), int8] */;
  %804 = reshape(%803, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), int8] */;
  %805 = @func_100(%804) /* ty=(Tensor[(15, 3, 7), int8], Tensor[(15, 3, 7), float32]) */;
  %806 = @func_2200() /* ty=Tensor[(15, 15, 13), float64] */;
  %807 = %765.0;
  %808 = subtract(%777, %778) /* ty=Tensor[(10, 7, 4), uint8] */;
  %809 = %779.0;
  %810 = log10(%785) /* ty=Tensor[(10, 7, 4), float32] */;
  %811 = exp(%798) /* ty=Tensor[(10, 7, 4), float64] */;
  %812 = erf(%801) /* ty=Tensor[(10, 7, 4), float64] */;
  %813 = %802.0;
  %814 = %805.1;
  (%806, meta[relay.Constant][37] /* ty=Tensor[(70), uint64] */, %807, meta[relay.Constant][38] /* ty=Tensor[(120), float32] */, %808, %809, %810, %811, %812, %813, %814, meta[relay.Constant][39] /* ty=Tensor[(315), int8] */)
}

def @func_4829(%var_4819: Tensor[(15, 12, 6), bool]) -> (Tensor[(15, 12, 6), bool], Tensor[(15, 15, 13), float64]) {
  %815 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 12, 6), bool] */, dtype="bool") /* ty=Tensor[(15, 12, 6), bool] */;
  %816 = shape_of(%var_4819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%var_4819, dtype="bool") /* ty=Tensor[(15, 12, 6), bool] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %819 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %820 = logical_or(%817, %818) /* ty=Tensor[(15, 12, 6), bool] */;
  %821 = %819.0;
  (%820, %821)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5085() -> (Tensor[(15, 15, 13), float64], Tensor[(1, 1, 9), float64], Tensor[(1, 1, 9), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 1, 9), float32] */, dtype="float32") /* ty=Tensor[(1, 1, 9), float32] */;
  %1 = log(%0) /* ty=Tensor[(1, 1, 9), float32] */;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(1, 1, 9), float64] */;
  %3 = cast(%1, dtype="float64") /* ty=Tensor[(1, 1, 9), float64] */;
  %4 = @func_2200() /* ty=Tensor[(15, 15, 13), float64] */;
  %5 = erf(%2) /* ty=Tensor[(1, 1, 9), float64] */;
  %6 = asinh(%3) /* ty=Tensor[(1, 1, 9), float64] */;
  (%4, %5, %6)
}

def @func_4441() -> (Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64]) {
  %11 = fn () -> (Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64]) {
    %7 = @func_3020() /* ty=(Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %8 = @func_4147() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %9 = %7.0;
    %10 = %8.0;
    (%9, %10)
  };
  %11() /* ty=(Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64]) */
}

def @func_2807() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  @func_2805() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_5242() -> (Tensor[(15, 15, 13), float64],) {
  %13 = fn () -> (Tensor[(15, 15, 13), float64],) {
    %12 = @func_916() /* ty=Tensor[(15, 15, 13), float64] */;
    (%12,)
  };
  %13() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_3107(%var_3101: Tensor[(4, 5, 3), float32], %var_3102: Tensor[(4, 5, 3), float32]) -> Tensor[(4, 5, 3), float32] {
  %14 = cast(%var_3102, dtype="float32") /* ty=Tensor[(4, 5, 3), float32] */;
  %15 = shape_of(%var_3101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%var_3101, dtype="float32") /* ty=Tensor[(4, 5, 3), float32] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%16, %17) /* ty=Tensor[(4, 5, 3), float32] */
}

def @func_5330(%var_5329: Tensor[(32), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(10, 5, 7), bool], Tensor[(5, 70), bool], Tensor[(32), bool], Tensor[(15, 15, 13), float64]) {
  %30 = fn (%var_5304: Tensor[(32), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(10, 5, 7), bool], Tensor[(5, 70), bool], Tensor[(32), bool], Tensor[(15, 15, 13), float64]) {
    %18 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
    %19 = cast(%18, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
    %20 = reshape(%19, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
    %21 = @func_674(%20) /* ty=(Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), float64]) */;
    %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 70), bool] */, dtype="bool") /* ty=Tensor[(5, 70), bool] */;
    %23 = cast(%var_5304, dtype="bool") /* ty=Tensor[(32), bool] */;
    %24 = reshape(%22, newshape=[10, 5, 7]) /* ty=Tensor[(10, 5, 7), bool] */;
    %25 = reshape(%23, newshape=[2, 16, 1]) /* ty=Tensor[(2, 16, 1), bool] */;
    %26 = @func_4946(%24, %25) /* ty=(Tensor[(10, 5, 7), bool], Tensor[(2, 16, 1), uint32], Tensor[(2, 16, 1), float32]) */;
    %27 = %21.1;
    %28 = %26.0;
    %29 = @func_662() /* ty=Tensor[(15, 15, 13), float64] */;
    (%18, %27, %28, meta[relay.Constant][1] /* ty=Tensor[(5, 70), bool] */, %var_5304, %29)
  };
  %30(%var_5329) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(10, 5, 7), bool], Tensor[(5, 70), bool], Tensor[(32), bool], Tensor[(15, 15, 13), float64]) */
}

def @func_2805() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %31 = @func_2641() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %32 = %31.0;
  %33 = @func_2697() /* ty=Tensor[(15, 15, 13), float64] */;
  %34 = @func_2200() /* ty=Tensor[(15, 15, 13), float64] */;
  (%32, %33, %34)
}

def @func_120(%var_118: Tensor[(13, 13, 2), int32]) -> (Tensor[(13, 13, 2), bool],) {
  @func_117(%var_118) /* ty=(Tensor[(13, 13, 2), bool],) */
}

def @func_5875() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %35 = @func_2125() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %36 = @func_662() /* ty=Tensor[(15, 15, 13), float64] */;
  %37 = %35.0;
  (%36, %37)
}

def @func_3566(%var_3564: Tensor[(6, 7, 6), int32]) -> (Tensor[(6, 7, 6), bool], Tensor[(15, 15, 13), float64]) {
  @func_3563(%var_3564) /* ty=(Tensor[(6, 7, 6), bool], Tensor[(15, 15, 13), float64]) */
}

def @func_1211(%var_1209: int32, %var_1210: Tensor[(12, 14, 6), int32]) -> Tensor[(12, 14, 6), bool] {
  %40 = fn (%var_1194: int32, %var_1195: Tensor[(12, 14, 6), int32]) -> Tensor[(12, 14, 6), bool] {
    %38 = cast(%var_1194, dtype="bool") /* ty=bool */;
    %39 = cast(%var_1195, dtype="bool") /* ty=Tensor[(12, 14, 6), bool] */;
    equal(%38, %39) /* ty=Tensor[(12, 14, 6), bool] */
  };
  %40(%var_1209, %var_1210) /* ty=Tensor[(12, 14, 6), bool] */
}

def @func_4036(%var_4024: Tensor[(15, 15, 13), bool]) -> (Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64]) {
  %41 = @func_3753() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
  %42 = %41.1;
  %43 = cast(%var_4024, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%42, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %47 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %48 = floor_mod(%45, %46) /* ty=Tensor[(15, 15, 13), float32] */;
  %49 = %47.0;
  (%48, %49)
}

def @func_3815() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  @func_3813() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_2125() -> (Tensor[(15, 15, 13), float64],) {
  %50 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %51 = %50.0;
  (%51,)
}

def @func_5397() -> (Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64]) {
  %56 = fn () -> (Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64]) {
    %52 = @func_3432() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
    %53 = @func_4279() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %54 = %52.1;
    %55 = %53.0;
    (%54, %55)
  };
  %56() /* ty=(Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64]) */
}

def @func_2698() -> Tensor[(15, 15, 13), float64] {
  %58 = fn () -> Tensor[(15, 15, 13), float64] {
    %57 = @func_1678() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %57.0
  };
  %58() /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_5258() -> (Tensor[(15, 15, 13), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64]) {
  @func_5256() /* ty=(Tensor[(15, 15, 13), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64]) */
}

def @func_4039(%var_4037: Tensor[(15, 15, 13), bool]) -> (Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64]) {
  @func_4036(%var_4037) /* ty=(Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64]) */
}

def @func_4187(%var_4185: Tensor[(280), bool], %var_4186: Tensor[(338), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(280), bool], Tensor[(338), bool]) {
  %67 = fn (%var_4180: Tensor[(280), bool], %var_4181: Tensor[(338), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(280), bool], Tensor[(338), bool]) {
    %59 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %60 = cast(%var_4180, dtype="bool") /* ty=Tensor[(280), bool] */;
    %61 = cast(%var_4181, dtype="bool") /* ty=Tensor[(338), bool] */;
    %62 = reshape(%60, newshape=[280]) /* ty=Tensor[(280), bool] */;
    %63 = reshape(%61, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), bool] */;
    %64 = @func_621(%62, %63) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(338), float32], Tensor[(13, 13, 2), bool], Tensor[(13, 13, 2), bool]) */;
    %65 = %59.0;
    %66 = %64.9;
    (%65, %66, %var_4180, %var_4181)
  };
  %67(%var_4185, %var_4186) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(280), bool], Tensor[(338), bool]) */
}

def @func_4577() -> (Tensor[(15, 15, 13), float64],) {
  %68 = @func_2154() /* ty=Tensor[(15, 15, 13), float64] */;
  (%68,)
}

def @func_4881(%var_4879: Tensor[(16, 6, 13), float64], %var_4880: Tensor[(16, 6, 13), float64]) -> (Tensor[(16, 6, 13), float64], Tensor[(16, 6, 13), int32]) {
  %79 = fn (%var_4864: Tensor[(16, 6, 13), float64], %var_4865: Tensor[(16, 6, 13), float64]) -> (Tensor[(16, 6, 13), float64], Tensor[(16, 6, 13), int32]) {
    %69 = cast(%var_4865, dtype="float64") /* ty=Tensor[(16, 6, 13), float64] */;
    %70 = shape_of(%var_4864, dtype="int32") /* ty=Tensor[(3), int32] */;
    %71 = cast(%var_4864, dtype="float64") /* ty=Tensor[(16, 6, 13), float64] */;
    %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %73 = cast(%var_4865, dtype="int32") /* ty=Tensor[(16, 6, 13), int32] */;
    %74 = shape_of(%var_4864, dtype="int32") /* ty=Tensor[(3), int32] */;
    %75 = cast(%var_4864, dtype="int32") /* ty=Tensor[(16, 6, 13), int32] */;
    %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %77 = subtract(%71, %72) /* ty=Tensor[(16, 6, 13), float64] */;
    %78 = left_shift(%75, %76) /* ty=Tensor[(16, 6, 13), int32] */;
    (%77, %78)
  };
  %79(%var_4879, %var_4880) /* ty=(Tensor[(16, 6, 13), float64], Tensor[(16, 6, 13), int32]) */
}

def @func_5895(%var_5894: Tensor[(9, 16, 9), float32]) -> Tensor[(9, 16, 9), float32] {
  %81 = fn (%var_5881: Tensor[(9, 16, 9), float32]) -> Tensor[(9, 16, 9), float32] {
    %80 = cast(%var_5881, dtype="float32") /* ty=Tensor[(9, 16, 9), float32] */;
    atan(%80) /* ty=Tensor[(9, 16, 9), float32] */
  };
  %81(%var_5894) /* ty=Tensor[(9, 16, 9), float32] */
}

def @func_2127() -> (Tensor[(15, 15, 13), float64],) {
  @func_2125() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_5949() -> (Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(280), bool]) {
  @func_5947() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(280), bool]) */
}

def @func_5014() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %86 = fn () -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
    %82 = @func_1828() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %83 = @func_1034() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %84 = %82.1;
    %85 = %83.0;
    (%84, %85)
  };
  %86() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_3422() -> Tensor[(15, 15, 13), float64] {
  @func_3420() /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_5087() -> (Tensor[(15, 15, 13), float64], Tensor[(1, 1, 9), float64], Tensor[(1, 1, 9), float64]) {
  @func_5085() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(1, 1, 9), float64], Tensor[(1, 1, 9), float64]) */
}

def @func_4748(%var_4745: Tensor[(1, 10, 9), float64]) -> (Tensor[(1, 10, 9), float64],) {
  %87 = cast(%var_4745, dtype="float64") /* ty=Tensor[(1, 10, 9), float64] */;
  %88 = cos(%87) /* ty=Tensor[(1, 10, 9), float64] */;
  (%88,)
}

def @func_2091(%var_2088: Tensor[(13, 26), int32], %var_2089: Tensor[(35, 9), int8], %var_2090: Tensor[(252), int8]) -> (Tensor[(13, 26), int16], Tensor[(15, 15, 13), bool], Tensor[(35, 9), int8], Tensor[(4, 16), float64], Tensor[(252), int8]) {
  @func_2086(%var_2088, %var_2089, %var_2090) /* ty=(Tensor[(13, 26), int16], Tensor[(15, 15, 13), bool], Tensor[(35, 9), int8], Tensor[(4, 16), float64], Tensor[(252), int8]) */
}

def @func_662() -> Tensor[(15, 15, 13), float64] {
  %89 = @func_221() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %89.0
}

def @func_102(%var_101: Tensor[(15, 3, 7), int8]) -> (Tensor[(15, 3, 7), int8], Tensor[(15, 3, 7), float32]) {
  %97 = fn (%var_88: Tensor[(15, 3, 7), int8]) -> (Tensor[(15, 3, 7), int8], Tensor[(15, 3, 7), float32]) {
    %90 = cast(%var_88, dtype="int8") /* ty=Tensor[(15, 3, 7), int8] */;
    %91 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(15, 3, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %92 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 3, 7), int8] */, dtype="int8") /* ty=Tensor[(15, 3, 7), int8] */;
    %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %94 = cast(%var_88, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
    %95 = maximum(%92, %93) /* ty=Tensor[(15, 3, 7), int8] */;
    %96 = erf(%94) /* ty=Tensor[(15, 3, 7), float32] */;
    (%95, %96)
  };
  %97(%var_101) /* ty=(Tensor[(15, 3, 7), int8], Tensor[(15, 3, 7), float32]) */
}

def @main(%var_5965: Tensor[(8, 4, 4), uint32]) -> Tensor[(8, 4, 4), bool] {
  %98 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 4, 4), uint32] */, dtype="bool") /* ty=Tensor[(8, 4, 4), bool] */;
  %99 = shape_of(%var_5965, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%var_5965, dtype="bool") /* ty=Tensor[(8, 4, 4), bool] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%100, %101) /* ty=Tensor[(8, 4, 4), bool] */
}

def @func_2356(%var_2284: Tensor[(15, 15, 13), float32]) -> (Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %102 = @func_2125() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %103 = %102.0;
  %104 = cast(%103, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %105 = tan(%104) /* ty=Tensor[(15, 15, 13), float32] */;
  %106 = cast(%var_2284, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%105, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %110 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %111 = @func_1678() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %112 = power(%108, %109) /* ty=Tensor[(15, 15, 13), float32] */;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %114 = reshape(%113, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
  %115 = @func_674(%114) /* ty=(Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), float64]) */;
  %116 = %110.0;
  %117 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  %118 = %111.0;
  %119 = %115.1;
  (%112, %116, %117, %118, %119)
}

def @func_5678() -> (Tensor[(13, 26), int32], Tensor[(?, 280), bool]) {
  @func_5676() /* ty=(Tensor[(13, 26), int32], Tensor[(?, 280), bool]) */
}

def @func_3217() -> (Tensor[(15, 15, 13), float64], Tensor[(252), int8], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %120 = @func_2641() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %121 = @func_2652() /* ty=(Tensor[(252), int8],) */;
  %122 = @func_2898() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool]) */;
  %123 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %124 = %120.0;
  %125 = %121.0;
  %126 = %122.0;
  %127 = @func_662() /* ty=Tensor[(15, 15, 13), float64] */;
  %128 = %123.0;
  (%124, %125, %126, %127, %128)
}

def @func_676(%var_675: Tensor[(15, 15, 13), float64]) -> (Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), float64]) {
  %137 = fn (%var_667: Tensor[(15, 15, 13), float64]) -> (Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), float64]) {
    %129 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
    %130 = cast(%var_667, dtype="int16") /* ty=Tensor[(15, 15, 13), int16] */;
    %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
    %132 = cast(%129, dtype="int16") /* ty=Tensor[(15, 15, 13), int16] */;
    %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %134 = cast(%var_667, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
    %135 = minimum(%132, %133) /* ty=Tensor[(15, 15, 13), int16] */;
    %136 = sinh(%134) /* ty=Tensor[(15, 15, 13), float64] */;
    (%135, %136)
  };
  %137(%var_675) /* ty=(Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), float64]) */
}

def @func_1610(%var_1609: Tensor[(15, 15, 13), float64]) -> (Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64]) {
  %147 = fn (%var_1596: Tensor[(15, 15, 13), float64]) -> (Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64]) {
    %138 = @func_1034() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %139 = %138.0;
    %140 = cast(%var_1596, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
    %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
    %142 = cast(%139, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
    %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %144 = cast(%var_1596, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
    %145 = greater(%142, %143) /* ty=Tensor[(15, 15, 13), bool] */;
    %146 = sin(%144) /* ty=Tensor[(15, 15, 13), float64] */;
    (%145, %146)
  };
  %147(%var_1609) /* ty=(Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64]) */
}

def @func_491() -> (Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) {
  @func_489() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */
}

def @func_240() -> (Tensor[(15, 15, 13), float64],) {
  %148 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  (%148,)
}

def @func_3544() -> (Tensor[(6, 7, 6), int32], Tensor[(15, 15, 13), float64]) {
  @func_3542() /* ty=(Tensor[(6, 7, 6), int32], Tensor[(15, 15, 13), float64]) */
}

def @func_2200() -> Tensor[(15, 15, 13), float64] {
  %149 = @func_1034() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %149.0
}

def @func_2687(%var_2685: Tensor[(13, 11, 12), float64]) -> Tensor[(13, 11, 12), float32] {
  @func_2684(%var_2685) /* ty=Tensor[(13, 11, 12), float32] */
}

def @func_4829(%var_4819: Tensor[(15, 12, 6), bool]) -> (Tensor[(15, 12, 6), bool], Tensor[(15, 15, 13), float64]) {
  %150 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 12, 6), bool] */, dtype="bool") /* ty=Tensor[(15, 12, 6), bool] */;
  %151 = shape_of(%var_4819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%var_4819, dtype="bool") /* ty=Tensor[(15, 12, 6), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %154 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %155 = logical_or(%152, %153) /* ty=Tensor[(15, 12, 6), bool] */;
  %156 = %154.0;
  (%155, %156)
}

def @func_5428() -> Tensor[(15, 15, 13), float64] {
  @func_5426() /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_2601() -> (Tensor[(15, 15, 13), float64],) {
  %157 = @func_1115() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %158 = %157.0;
  (%158,)
}

def @func_2603() -> (Tensor[(15, 15, 13), float64],) {
  @func_2601() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_1187() -> (Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8]) {
  %164 = fn () -> (Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8]) {
    %159 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %160 = cast(meta[relay.Constant][5] /* ty=Tensor[(252), int8] */, dtype="int8") /* ty=Tensor[(252), int8] */;
    %161 = reshape(%160, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), int8] */;
    %162 = %159.0;
    %163 = @func_970(%161) /* ty=Tensor[(6, 7, 6), bool] */;
    (%162, %163, meta[relay.Constant][5] /* ty=Tensor[(252), int8] */)
  };
  %164() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8]) */
}

def @func_5494(%var_5489: Tensor[(7, 7, 8), int8], %var_5490: Tensor[(7, 7, 8), int8]) -> Tensor[(7, 7, 8), bool] {
  %165 = cast(%var_5490, dtype="bool") /* ty=Tensor[(7, 7, 8), bool] */;
  %166 = shape_of(%var_5489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%var_5489, dtype="bool") /* ty=Tensor[(7, 7, 8), bool] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%167, %168) /* ty=Tensor[(7, 7, 8), bool] */
}

def @func_702() -> Tensor[(15, 15, 13), float64] {
  @func_700() /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_1116() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %171 = fn () -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
    %169 = @func_700() /* ty=Tensor[(15, 15, 13), float64] */;
    %170 = @func_662() /* ty=Tensor[(15, 15, 13), float64] */;
    (%169, %170)
  };
  %171() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_2419() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), uint32]) {
  @func_2417() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), uint32]) */
}

def @func_4281() -> (Tensor[(15, 15, 13), float64],) {
  @func_4279() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_1830() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  @func_1828() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_5256() -> (Tensor[(15, 15, 13), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64]) {
  %172 = @func_3753() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
  %173 = @func_1828() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %174 = @func_4577() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %175 = %172.1;
  %176 = %173.3;
  %177 = %174.0;
  (%175, %176, %177)
}

def @func_385(%var_353: Tensor[(14, 2, 10), bool], %var_377: Tensor[(14, 2, 10), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) {
  %178 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %179 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 2, 10), bool] */, dtype="bool") /* ty=Tensor[(14, 2, 10), bool] */;
  %180 = shape_of(%var_353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%var_353, dtype="bool") /* ty=Tensor[(14, 2, 10), bool] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %183 = logical_and(%181, %182) /* ty=Tensor[(14, 2, 10), bool] */;
  %184 = cast(%var_377, dtype="uint16") /* ty=Tensor[(14, 2, 10), uint16] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%183, dtype="uint16") /* ty=Tensor[(14, 2, 10), uint16] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %188 = %178.0;
  %189 = bitwise_and(%186, %187) /* ty=Tensor[(14, 2, 10), uint16] */;
  %190 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  (%188, %189, %190)
}

def @func_5377(%var_5375: Tensor[(10, 11, 13), int16], %var_5376: Tensor[(10, 11, 13), int16]) -> Tensor[(10, 11, 13), bool] {
  @func_5373(%var_5375, %var_5376) /* ty=Tensor[(10, 11, 13), bool] */
}

def @func_874() -> Tensor[(15, 15, 13), float64] {
  %191 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %191.1
}

def @func_972(%var_971: Tensor[(6, 7, 6), int8]) -> Tensor[(6, 7, 6), bool] {
  %194 = fn (%var_959: Tensor[(6, 7, 6), int8]) -> Tensor[(6, 7, 6), bool] {
    %192 = cast(meta[relay.Constant][7] /* ty=int8 */, dtype="bool") /* ty=bool */;
    %193 = cast(%var_959, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
    less(%192, %193) /* ty=Tensor[(6, 7, 6), bool] */
  };
  %194(%var_971) /* ty=Tensor[(6, 7, 6), bool] */
}

def @func_242() -> (Tensor[(15, 15, 13), float64],) {
  @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_3542() -> (Tensor[(6, 7, 6), int32], Tensor[(15, 15, 13), float64]) {
  %195 = @func_3326() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(338), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), int32], Tensor[(26, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), float64]) */;
  %196 = %195.7;
  %197 = @func_2697() /* ty=Tensor[(15, 15, 13), float64] */;
  (%196, %197)
}

def @func_4148() -> (Tensor[(15, 15, 13), float64],) {
  %200 = fn () -> (Tensor[(15, 15, 13), float64],) {
    %198 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %199 = %198.0;
    (%199,)
  };
  %200() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_196() -> Tensor[(15, 15, 13), float64] {
  @func_194() /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_2855() -> Tensor[(15, 15, 13), float64] {
  @func_2853() /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_916() -> Tensor[(15, 15, 13), float64] {
  %201 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %201.0
}

def @func_1267(%var_1228: Tensor[(4, 16), float64], %var_1248: Tensor[(252), int8]) -> (Tensor[(4, 16), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8], Tensor[(280), float64]) {
  %202 = cast(%var_1228, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
  %203 = cast(%var_1248, dtype="int8") /* ty=Tensor[(252), int8] */;
  %204 = reshape(%203, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), int8] */;
  %205 = @func_489() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
  %206 = %205.1;
  %207 = cast(%206, dtype="float64") /* ty=Tensor[(280), float64] */;
  %208 = sin(%202) /* ty=Tensor[(4, 16), float64] */;
  %209 = @func_970(%204) /* ty=Tensor[(6, 7, 6), bool] */;
  %210 = sinh(%207) /* ty=Tensor[(280), float64] */;
  (%208, %209, %var_1248, %210)
}

def @func_5498(%var_5496: Tensor[(7, 7, 8), int8], %var_5497: Tensor[(7, 7, 8), int8]) -> Tensor[(7, 7, 8), bool] {
  @func_5494(%var_5496, %var_5497) /* ty=Tensor[(7, 7, 8), bool] */
}

def @func_2900() -> (Tensor[(15, 15, 13), float64], Tensor[(280), bool]) {
  @func_2898() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool]) */
}

def @func_194() -> Tensor[(15, 15, 13), float64] {
  %211 = cast(meta[relay.Constant][8] /* ty=Tensor[(15, 15, 13), float64] */, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  cos(%211) /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_3146(%var_3144: Tensor[(2, 5, 12), float32]) -> (Tensor[(2, 5, 12), float32], Tensor[(15, 15, 13), float64]) {
  @func_3143(%var_3144) /* ty=(Tensor[(2, 5, 12), float32], Tensor[(15, 15, 13), float64]) */
}

def @func_5688() -> (Tensor[(15, 15, 13), float64],) {
  %213 = fn () -> (Tensor[(15, 15, 13), float64],) {
    %212 = @func_662() /* ty=Tensor[(15, 15, 13), float64] */;
    (%212,)
  };
  %213() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_3420() -> Tensor[(15, 15, 13), float64] {
  %214 = @func_221() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %214.0
}

def @func_2853() -> Tensor[(15, 15, 13), float64] {
  @func_2154() /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_223() -> (Tensor[(15, 15, 13), float64],) {
  @func_221() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_3813() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %215 = @func_3075() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %216 = @func_2601() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %217 = @func_2154() /* ty=Tensor[(15, 15, 13), float64] */;
  %218 = %215.0;
  %219 = %216.0;
  (%217, %218, %219)
}

def @func_2155() -> Tensor[(15, 15, 13), float64] {
  %221 = fn () -> Tensor[(15, 15, 13), float64] {
    %220 = @func_2144() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %220.1
  };
  %221() /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_3754() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) {
  %225 = fn () -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) {
    %222 = @func_489() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
    %223 = @func_2853() /* ty=Tensor[(15, 15, 13), float64] */;
    %224 = %222.5;
    (%223, %224)
  };
  %225() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */
}

def @func_3020() -> (Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %226 = @func_2940() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool]) */;
  %227 = %226.0;
  %228 = cast(%227, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %229 = @func_1979() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %230 = %229.4;
  %231 = cast(%230, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
  %232 = reshape(%231, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float32] */;
  %233 = @func_2356(%232) /* ty=(Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %234 = exp(%228) /* ty=Tensor[(15, 15, 13), float32] */;
  %235 = %233.2;
  (%234, %230, %235)
}

def @func_1980() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %246 = fn () -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
    %236 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %237 = @func_489() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
    %238 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %239 = %236.0;
    %240 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
    %241 = %237.3;
    %242 = @func_662() /* ty=Tensor[(15, 15, 13), float64] */;
    %243 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
    %244 = %238.0;
    %245 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
    (%239, %240, %241, %242, %243, %244, %245)
  };
  %246() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_5426() -> Tensor[(15, 15, 13), float64] {
  %247 = @func_2125() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %247.0
}

def @func_5108(%var_5107: Tensor[(2, 6, 8), uint16]) -> Tensor[(2, 6, 8), bool] {
  %252 = fn (%var_5093: Tensor[(2, 6, 8), uint16]) -> Tensor[(2, 6, 8), bool] {
    %248 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 6, 8), uint16] */, dtype="bool") /* ty=Tensor[(2, 6, 8), bool] */;
    %249 = shape_of(%var_5093, dtype="int32") /* ty=Tensor[(3), int32] */;
    %250 = cast(%var_5093, dtype="bool") /* ty=Tensor[(2, 6, 8), bool] */;
    %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%250, %251) /* ty=Tensor[(2, 6, 8), bool] */
  };
  %252(%var_5107) /* ty=Tensor[(2, 6, 8), bool] */
}

def @func_5373(%var_5366: Tensor[(10, 11, 13), int16], %var_5367: Tensor[(10, 11, 13), int16]) -> Tensor[(10, 11, 13), bool] {
  %253 = cast(%var_5367, dtype="bool") /* ty=Tensor[(10, 11, 13), bool] */;
  %254 = shape_of(%var_5366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%var_5366, dtype="bool") /* ty=Tensor[(10, 11, 13), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%255, %256) /* ty=Tensor[(10, 11, 13), bool] */
}

def @func_4950(%var_4948: Tensor[(10, 5, 7), bool], %var_4949: Tensor[(2, 16, 1), bool]) -> (Tensor[(10, 5, 7), bool], Tensor[(2, 16, 1), uint32], Tensor[(2, 16, 1), float32]) {
  @func_4946(%var_4948, %var_4949) /* ty=(Tensor[(10, 5, 7), bool], Tensor[(2, 16, 1), uint32], Tensor[(2, 16, 1), float32]) */
}

def @func_2086(%var_2061: Tensor[(13, 26), int32], %var_2074: Tensor[(35, 9), int8], %var_2076: Tensor[(252), int8]) -> (Tensor[(13, 26), int16], Tensor[(15, 15, 13), bool], Tensor[(35, 9), int8], Tensor[(4, 16), float64], Tensor[(252), int8]) {
  %257 = @func_489() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
  %258 = %257.3;
  %259 = cast(%var_2061, dtype="int16") /* ty=Tensor[(13, 26), int16] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(2), int32] */;
  %261 = cast(%258, dtype="int16") /* ty=Tensor[(13, 26), int16] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %263 = logical_xor(%261, %262) /* ty=Tensor[(13, 26), int16] */;
  %264 = cast(%263, dtype="int32") /* ty=Tensor[(13, 26), int32] */;
  %265 = cast(%var_2074, dtype="int8") /* ty=Tensor[(35, 9), int8] */;
  %266 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
  %267 = cast(%var_2076, dtype="int8") /* ty=Tensor[(252), int8] */;
  %268 = cast(%258, dtype="bool") /* ty=Tensor[(13, 26), bool] */;
  %269 = reshape(%264, newshape=[1, 338]) /* ty=Tensor[(1, 338), int32] */;
  %270 = reshape(%265, newshape=[315]) /* ty=Tensor[(315), int8] */;
  %271 = reshape(%266, newshape=[64]) /* ty=Tensor[(64), float64] */;
  %272 = reshape(%267, newshape=[1, 252]) /* ty=Tensor[(1, 252), int8] */;
  %273 = reshape(%268, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), bool] */;
  %274 = @func_1582(%269, %270, %271, %272, %273) /* ty=(Tensor[(15, 15, 13), int16], Tensor[(1, 338), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 3, 7), int8], Tensor[(315), int8], Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), bool], Tensor[(252), int8], Tensor[(64), float64], Tensor[(1, 252), int8], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), bool], Tensor[(13, 13, 2), int64]) */;
  %275 = %274.6;
  (%263, %275, %var_2074, meta[relay.Constant][10] /* ty=Tensor[(4, 16), float64] */, %var_2076)
}

def @func_4209(%var_4208: Tensor[(8, 10, 5), int32]) -> (Tensor[(8, 10, 5), int32], Tensor[(15, 15, 13), bool], Tensor[(8, 10, 5), float64]) {
  %288 = fn (%var_4192: Tensor[(8, 10, 5), int32]) -> (Tensor[(8, 10, 5), int32], Tensor[(15, 15, 13), bool], Tensor[(8, 10, 5), float64]) {
    %276 = cast(%var_4192, dtype="int32") /* ty=Tensor[(8, 10, 5), int32] */;
    %277 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(8, 10, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %278 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 10, 5), int32] */, dtype="int32") /* ty=Tensor[(8, 10, 5), int32] */;
    %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %280 = @func_3432() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */;
    %281 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 10, 5), int32] */, dtype="float64") /* ty=Tensor[(8, 10, 5), float64] */;
    %282 = shape_of(%var_4192, dtype="int32") /* ty=Tensor[(3), int32] */;
    %283 = cast(%var_4192, dtype="float64") /* ty=Tensor[(8, 10, 5), float64] */;
    %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %285 = left_shift(%278, %279) /* ty=Tensor[(8, 10, 5), int32] */;
    %286 = %280.1;
    %287 = floor_mod(%283, %284) /* ty=Tensor[(8, 10, 5), float64] */;
    (%285, %286, %287)
  };
  %288(%var_4208) /* ty=(Tensor[(8, 10, 5), int32], Tensor[(15, 15, 13), bool], Tensor[(8, 10, 5), float64]) */
}

def @func_4495() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %293 = fn () -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
    %289 = @func_1186() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8]) */;
    %290 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %291 = %289.0;
    %292 = %290.0;
    (%291, %292)
  };
  %293() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_5676() -> (Tensor[(13, 26), int32], Tensor[(?, 280), bool]) {
  %294 = @func_1979() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %295 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 280), uint64] */, dtype="uint64") /* ty=Tensor[(1, 280), uint64] */;
  %296 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 280), uint64] */, dtype="float32") /* ty=Tensor[(1, 280), float32] */;
  %297 = reshape(%295, newshape=[280]) /* ty=Tensor[(280), uint64] */;
  %298 = reshape(%296, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), float32] */;
  %299 = @func_3998(%297, %298) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(70), uint64], Tensor[(2, 5, 12), float32], Tensor[(120), float32], Tensor[(10, 7, 4), uint8], Tensor[(15, 15, 13), float64], Tensor[(10, 7, 4), float32], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 3, 7), float32], Tensor[(315), int8]) */;
  %300 = %299.6;
  %301 = cast(%300, dtype="bool") /* ty=Tensor[(10, 7, 4), bool] */;
  %302 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(1, 280), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %303 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 280), uint64] */, dtype="bool") /* ty=Tensor[(1, 280), bool] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %305 = %294.2;
  %306 = logical_or(%303, %304) /* ty=Tensor[(?, 280), bool] */;
  (%305, %306)
}

def @func_2359(%var_2357: Tensor[(15, 15, 13), float32]) -> (Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  @func_2356(%var_2357) /* ty=(Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_2642() -> (Tensor[(15, 15, 13), float64],) {
  %309 = fn () -> (Tensor[(15, 15, 13), float64],) {
    %307 = @func_1828() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %308 = %307.1;
    (%308,)
  };
  %309() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_221() -> (Tensor[(15, 15, 13), float64],) {
  %310 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  %311 = cast(%310, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %312 = atanh(%311) /* ty=Tensor[(15, 15, 13), float64] */;
  (%312,)
}

def @func_5610(%var_5609: Tensor[(11, 7, 5), uint64]) -> (Tensor[(11, 7, 5), uint64], Tensor[(11, 7, 5), int32], Tensor[(11, 7, 5), float32], Tensor[(15, 15, 13), float64]) {
  %332 = fn (%var_5571: Tensor[(11, 7, 5), uint64]) -> (Tensor[(11, 7, 5), uint64], Tensor[(11, 7, 5), int32], Tensor[(11, 7, 5), float32], Tensor[(15, 15, 13), float64]) {
    %313 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 7, 5), uint64] */, dtype="uint64") /* ty=Tensor[(11, 7, 5), uint64] */;
    %314 = shape_of(%var_5571, dtype="int32") /* ty=Tensor[(3), int32] */;
    %315 = cast(%var_5571, dtype="uint64") /* ty=Tensor[(11, 7, 5), uint64] */;
    %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %317 = cast(%var_5571, dtype="int32") /* ty=Tensor[(11, 7, 5), int32] */;
    %318 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(11, 7, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %319 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 7, 5), uint64] */, dtype="int32") /* ty=Tensor[(11, 7, 5), int32] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %321 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 7, 5), uint64] */, dtype="float64") /* ty=Tensor[(11, 7, 5), float64] */;
    %322 = shape_of(%var_5571, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(%var_5571, dtype="float64") /* ty=Tensor[(11, 7, 5), float64] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %325 = divide(%323, %324) /* ty=Tensor[(11, 7, 5), float64] */;
    %326 = cast(%325, dtype="float32") /* ty=Tensor[(11, 7, 5), float32] */;
    %327 = @func_3813() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %328 = minimum(%315, %316) /* ty=Tensor[(11, 7, 5), uint64] */;
    %329 = bitwise_xor(%319, %320) /* ty=Tensor[(11, 7, 5), int32] */;
    %330 = log(%326) /* ty=Tensor[(11, 7, 5), float32] */;
    %331 = %327.0;
    (%328, %329, %330, %331)
  };
  %332(%var_5609) /* ty=(Tensor[(11, 7, 5), uint64], Tensor[(11, 7, 5), int32], Tensor[(11, 7, 5), float32], Tensor[(15, 15, 13), float64]) */
}

def @func_823(%var_822: Tensor[(26, 13), int32]) -> (Tensor[(15, 15, 13), float64], Tensor[(26, 13), int64]) {
  %344 = fn (%var_803: Tensor[(26, 13), int32]) -> (Tensor[(15, 15, 13), float64], Tensor[(26, 13), int64]) {
    %333 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %334 = cast(%var_803, dtype="int32") /* ty=Tensor[(26, 13), int32] */;
    %335 = reshape(%334, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), int32] */;
    %336 = @func_117(%335) /* ty=(Tensor[(13, 13, 2), bool],) */;
    %337 = %336.0;
    %338 = cast(%337, dtype="int64") /* ty=Tensor[(13, 13, 2), int64] */;
    %339 = shape_of(%var_803, dtype="int32") /* ty=Tensor[(2), int32] */;
    %340 = cast(%var_803, dtype="int64") /* ty=Tensor[(26, 13), int64] */;
    %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %342 = %333.0;
    %343 = add(%340, %341) /* ty=Tensor[(26, 13), int64] */;
    (%342, %343)
  };
  %344(%var_822) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(26, 13), int64]) */
}

def @func_1679() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %349 = fn () -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
    %345 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %346 = @func_1115() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %347 = %345.0;
    %348 = %346.1;
    (%347, %348)
  };
  %349() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_4914(%var_4913: Tensor[(13, 5, 5), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(13, 5, 5), bool], Tensor[(6, 7, 6), bool]) {
  %361 = fn (%var_4896: Tensor[(13, 5, 5), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(13, 5, 5), bool], Tensor[(6, 7, 6), bool]) {
    %350 = @func_3035() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %351 = @func_4331() /* ty=(Tensor[(13, 5, 5), float64], Tensor[(13, 5, 5), bool]) */;
    %352 = %351.1;
    %353 = cast(%var_4896, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
    %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
    %355 = cast(%352, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
    %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %357 = @func_1186() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8]) */;
    %358 = %350.0;
    %359 = not_equal(%355, %356) /* ty=Tensor[(13, 5, 5), bool] */;
    %360 = %357.1;
    (%358, %359, %360)
  };
  %361(%var_4913) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(13, 5, 5), bool], Tensor[(6, 7, 6), bool]) */
}

def @func_2898() -> (Tensor[(15, 15, 13), float64], Tensor[(280), bool]) {
  %362 = @func_1828() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %363 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
  %364 = %362.2;
  (%363, %364)
}

def @func_1109(%var_1107: Tensor[(280), bool], %var_1108: Tensor[(15, 15, 13), float32]) -> (Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(280), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), bool], Tensor[(15, 3, 7), int16]) {
  %401 = fn (%var_1056: Tensor[(280), bool], %var_1062: Tensor[(15, 15, 13), float32]) -> (Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(280), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), bool], Tensor[(15, 3, 7), int16]) {
    %365 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %366 = cast(%var_1056, dtype="bool") /* ty=Tensor[(280), bool] */;
    %367 = cast(%var_1056, dtype="bool") /* ty=Tensor[(280), bool] */;
    %368 = reshape(%366, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
    %369 = reshape(%367, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
    %370 = @func_385(%368, %369) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) */;
    %371 = @func_916() /* ty=Tensor[(15, 15, 13), float64] */;
    %372 = cast(%371, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
    %373 = log10(%372) /* ty=Tensor[(15, 15, 13), float32] */;
    %374 = cast(%var_1062, dtype="int64") /* ty=Tensor[(15, 15, 13), int64] */;
    %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
    %376 = cast(%373, dtype="int64") /* ty=Tensor[(15, 15, 13), int64] */;
    %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %378 = bitwise_and(%376, %377) /* ty=Tensor[(15, 15, 13), int64] */;
    %379 = cast(%378, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
    %380 = reshape(%379, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
    %381 = @func_674(%380) /* ty=(Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), float64]) */;
    %382 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
    %383 = cast(%382, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
    %384 = shape_of(%378, dtype="int32") /* ty=Tensor[(3), int32] */;
    %385 = cast(%378, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
    %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %387 = cast(meta[relay.Constant][15] /* ty=Tensor[(315), int8] */, dtype="int8") /* ty=Tensor[(315), int8] */;
    %388 = reshape(%387, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), int8] */;
    %389 = @func_100(%388) /* ty=(Tensor[(15, 3, 7), int8], Tensor[(15, 3, 7), float32]) */;
    %390 = %389.0;
    %391 = cast(meta[relay.Constant][15] /* ty=Tensor[(315), int8] */, dtype="int16") /* ty=Tensor[(315), int16] */;
    %392 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
    %393 = cast(%390, dtype="int16") /* ty=Tensor[(15, 3, 7), int16] */;
    %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %395 = %365.1;
    %396 = %370.1;
    %397 = @func_700() /* ty=Tensor[(15, 15, 13), float64] */;
    %398 = %381.0;
    %399 = greater_equal(%385, %386) /* ty=Tensor[(15, 15, 13), bool] */;
    %400 = left_shift(%393, %394) /* ty=Tensor[(15, 3, 7), int16] */;
    (%395, %396, %var_1056, %397, %398, %399, %400)
  };
  %401(%var_1107, %var_1108) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(280), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), bool], Tensor[(15, 3, 7), int16]) */
}

def @func_4802() -> Tensor[(15, 15, 13), float64] {
  %403 = fn () -> Tensor[(15, 15, 13), float64] {
    %402 = @func_3217() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(252), int8], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %402.0
  };
  %403() /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_5877() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  @func_5875() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_3412(%var_3409: Tensor[(15, 5, 6), float32], %var_3410: Tensor[(60), float32], %var_3411: Tensor[(280), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float32], Tensor[(15, 5, 6), bool], Tensor[(4, 5, 3), float32], Tensor[(60), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), int16], Tensor[(280), bool], Tensor[(15, 15, 13), float64]) {
  %427 = fn (%var_3378: Tensor[(15, 5, 6), float32], %var_3385: Tensor[(60), float32], %var_3397: Tensor[(280), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float32], Tensor[(15, 5, 6), bool], Tensor[(4, 5, 3), float32], Tensor[(60), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), int16], Tensor[(280), bool], Tensor[(15, 15, 13), float64]) {
    %404 = @func_3020() /* ty=(Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %405 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 1, 6), float64] */, dtype="float64") /* ty=Tensor[(15, 1, 6), float64] */;
    %406 = log(%405) /* ty=Tensor[(15, 1, 6), float64] */;
    %407 = cast(%406, dtype="float32") /* ty=Tensor[(15, 1, 6), float32] */;
    %408 = cos(%407) /* ty=Tensor[(15, 1, 6), float32] */;
    %409 = cast(%408, dtype="bool") /* ty=Tensor[(15, 1, 6), bool] */;
    %410 = cast(%var_3378, dtype="bool") /* ty=Tensor[(15, 5, 6), bool] */;
    %411 = cast(%var_3385, dtype="float32") /* ty=Tensor[(60), float32] */;
    %412 = cast(%var_3385, dtype="float32") /* ty=Tensor[(60), float32] */;
    %413 = reshape(%411, newshape=[4, 5, 3]) /* ty=Tensor[(4, 5, 3), float32] */;
    %414 = reshape(%412, newshape=[4, 5, 3]) /* ty=Tensor[(4, 5, 3), float32] */;
    %415 = cast(%var_3397, dtype="bool") /* ty=Tensor[(280), bool] */;
    %416 = @func_2697() /* ty=Tensor[(15, 15, 13), float64] */;
    %417 = cast(%416, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
    %418 = reshape(%415, newshape=[280]) /* ty=Tensor[(280), bool] */;
    %419 = reshape(%417, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float32] */;
    %420 = @func_1106(%418, %419) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(280), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), bool], Tensor[(15, 3, 7), int16]) */;
    %421 = @func_2154() /* ty=Tensor[(15, 15, 13), float64] */;
    %422 = %404.0;
    %423 = logical_or(%409, %410) /* ty=Tensor[(15, 5, 6), bool] */;
    %424 = @func_3107(%413, %414) /* ty=Tensor[(4, 5, 3), float32] */;
    %425 = %420.4;
    %426 = @func_700() /* ty=Tensor[(15, 15, 13), float64] */;
    (%421, %422, %423, %424, %var_3385, %416, %425, %var_3397, %426)
  };
  %427(%var_3409, %var_3410, %var_3411) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float32], Tensor[(15, 5, 6), bool], Tensor[(4, 5, 3), float32], Tensor[(60), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), int16], Tensor[(280), bool], Tensor[(15, 15, 13), float64]) */
}

def @func_3328() -> (Tensor[(15, 15, 13), float64], Tensor[(338), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), int32], Tensor[(26, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), float64]) {
  @func_3326() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(338), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), int32], Tensor[(26, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), float64]) */
}

def @func_5947() -> (Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(280), bool]) {
  %428 = @func_5863() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %429 = cast(meta[relay.Constant][17] /* ty=Tensor[(280), bool] */, dtype="bool") /* ty=Tensor[(280), bool] */;
  %430 = cast(meta[relay.Constant][17] /* ty=Tensor[(280), bool] */, dtype="bool") /* ty=Tensor[(280), bool] */;
  %431 = reshape(%429, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %432 = reshape(%430, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %433 = @func_385(%431, %432) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) */;
  %434 = %428.0;
  %435 = %433.1;
  (%434, %435, meta[relay.Constant][17] /* ty=Tensor[(280), bool] */)
}

def @func_664() -> Tensor[(15, 15, 13), float64] {
  @func_662() /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_1355(%var_1354: Tensor[(15, 15, 13), float64]) -> Tensor[(15, 15, 13), bool] {
  %441 = fn (%var_1348: Tensor[(15, 15, 13), float64]) -> Tensor[(15, 15, 13), bool] {
    %436 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
    %437 = cast(%var_1348, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
    %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
    %439 = cast(%436, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
    %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%439, %440) /* ty=Tensor[(15, 15, 13), bool] */
  };
  %441(%var_1354) /* ty=Tensor[(15, 15, 13), bool] */
}

def @func_2684(%var_2671: Tensor[(13, 11, 12), float64]) -> Tensor[(13, 11, 12), float32] {
  %442 = cast(%var_2671, dtype="float64") /* ty=Tensor[(13, 11, 12), float64] */;
  %443 = rsqrt(%442) /* ty=Tensor[(13, 11, 12), float64] */;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(13, 11, 12), float32] */;
  log10(%444) /* ty=Tensor[(13, 11, 12), float32] */
}

def @func_4713() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(252), int8], Tensor[(2, 504), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %445 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %446 = @func_1186() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8]) */;
  %447 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 504), int8] */, dtype="int8") /* ty=Tensor[(2, 504), int8] */;
  %448 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 504), int8] */, dtype="int8") /* ty=Tensor[(2, 504), int8] */;
  %449 = reshape(%447, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %450 = reshape(%448, newshape=[12, 7, 12]) /* ty=Tensor[(12, 7, 12), int8] */;
  %451 = @func_4359(%449, %450) /* ty=(Tensor[(12, 7, 12), int8],) */;
  %452 = %451.0;
  %453 = cast(%452, dtype="int32") /* ty=Tensor[(12, 7, 12), int32] */;
  %454 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(2, 504), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %455 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 504), int8] */, dtype="int32") /* ty=Tensor[(2, 504), int32] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %457 = @func_3420() /* ty=Tensor[(15, 15, 13), float64] */;
  %458 = %445.0;
  %459 = %446.2;
  %460 = left_shift(%455, %456) /* ty=Tensor[(2, 504), int32] */;
  %461 = @func_3420() /* ty=Tensor[(15, 15, 13), float64] */;
  %462 = @func_3420() /* ty=Tensor[(15, 15, 13), float64] */;
  (%457, %458, %459, %460, %461, %462)
}

def @func_700() -> Tensor[(15, 15, 13), float64] {
  %463 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %463.1
}

def @func_4751(%var_4749: Tensor[(1, 10, 9), float64]) -> (Tensor[(1, 10, 9), float64],) {
  @func_4748(%var_4749) /* ty=(Tensor[(1, 10, 9), float64],) */
}

def @func_5800() -> Tensor[(15, 3, 2), bool] {
  %475 = fn () -> Tensor[(15, 3, 2), bool] {
    %464 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 3, 2), float32] */, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
    %465 = log2(%464) /* ty=Tensor[(15, 3, 2), float32] */;
    %466 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 3, 2), float32] */, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
    %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
    %468 = cast(%465, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
    %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %470 = equal(%468, %469) /* ty=Tensor[(15, 3, 2), bool] */;
    %471 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 3, 2), float32] */, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
    %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
    %473 = cast(%470, dtype="bool") /* ty=Tensor[(15, 3, 2), bool] */;
    %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%473, %474) /* ty=Tensor[(15, 3, 2), bool] */
  };
  %475() /* ty=Tensor[(15, 3, 2), bool] */
}

def @func_2244() -> (Tensor[(15, 15, 13), float64],) {
  @func_2242() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_3036() -> (Tensor[(15, 15, 13), float64],) {
  %478 = fn () -> (Tensor[(15, 15, 13), float64],) {
    %476 = @func_1034() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %477 = %476.0;
    (%477,)
  };
  %478() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_4001(%var_3999: Tensor[(280), uint64], %var_4000: Tensor[(10, 7, 4), float32]) -> (Tensor[(15, 15, 13), float64], Tensor[(70), uint64], Tensor[(2, 5, 12), float32], Tensor[(120), float32], Tensor[(10, 7, 4), uint8], Tensor[(15, 15, 13), float64], Tensor[(10, 7, 4), float32], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 3, 7), float32], Tensor[(315), int8]) {
  %531 = fn (%var_3870: Tensor[(280), uint64], %var_3902: Tensor[(10, 7, 4), float32]) -> (Tensor[(15, 15, 13), float64], Tensor[(70), uint64], Tensor[(2, 5, 12), float32], Tensor[(120), float32], Tensor[(10, 7, 4), uint8], Tensor[(15, 15, 13), float64], Tensor[(10, 7, 4), float32], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 3, 7), float32], Tensor[(315), int8]) {
    %479 = cast(meta[relay.Constant][21] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %480 = reshape(%479, newshape=[2, 5, 12]) /* ty=Tensor[(2, 5, 12), float32] */;
    %481 = @func_3143(%480) /* ty=(Tensor[(2, 5, 12), float32], Tensor[(15, 15, 13), float64]) */;
    %482 = cast(meta[relay.Constant][20] /* ty=Tensor[(70), uint64] */, dtype="uint64") /* ty=Tensor[(70), uint64] */;
    %483 = cast(%var_3870, dtype="uint64") /* ty=Tensor[(280), uint64] */;
    %484 = reshape(%482, newshape=[10, 7, 1]) /* ty=Tensor[(10, 7, 1), uint64] */;
    %485 = reshape(%483, newshape=[10, 7, 4]) /* ty=Tensor[(10, 7, 4), uint64] */;
    %486 = @func_3736(%484, %485) /* ty=Tensor[(10, 7, 4), uint64] */;
    %487 = cast(%486, dtype="float32") /* ty=Tensor[(10, 7, 4), float32] */;
    %488 = acosh(%487) /* ty=Tensor[(10, 7, 4), float32] */;
    %489 = cast(%488, dtype="float32") /* ty=Tensor[(10, 7, 4), float32] */;
    %490 = sinh(%489) /* ty=Tensor[(10, 7, 4), float32] */;
    %491 = cast(%488, dtype="uint8") /* ty=Tensor[(10, 7, 4), uint8] */;
    %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
    %493 = cast(%490, dtype="uint8") /* ty=Tensor[(10, 7, 4), uint8] */;
    %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %495 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %496 = cast(%var_3902, dtype="bool") /* ty=Tensor[(10, 7, 4), bool] */;
    %497 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
    %498 = cast(%488, dtype="bool") /* ty=Tensor[(10, 7, 4), bool] */;
    %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %500 = equal(%498, %499) /* ty=Tensor[(10, 7, 4), bool] */;
    %501 = cast(%500, dtype="float32") /* ty=Tensor[(10, 7, 4), float32] */;
    %502 = cast(%490, dtype="uint8") /* ty=Tensor[(10, 7, 4), uint8] */;
    %503 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
    %504 = cast(%488, dtype="uint8") /* ty=Tensor[(10, 7, 4), uint8] */;
    %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %506 = bitwise_or(%504, %505) /* ty=Tensor[(10, 7, 4), uint8] */;
    %507 = cast(%506, dtype="float32") /* ty=Tensor[(10, 7, 4), float32] */;
    %508 = log(%507) /* ty=Tensor[(10, 7, 4), float32] */;
    %509 = cast(%var_3870, dtype="bool") /* ty=Tensor[(280), bool] */;
    %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
    %511 = cast(%508, dtype="bool") /* ty=Tensor[(10, 7, 4), bool] */;
    %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %513 = greater(%511, %512) /* ty=Tensor[(10, 7, 4), bool] */;
    %514 = cast(%513, dtype="float64") /* ty=Tensor[(10, 7, 4), float64] */;
    %515 = cast(%513, dtype="float32") /* ty=Tensor[(10, 7, 4), float32] */;
    %516 = asin(%515) /* ty=Tensor[(10, 7, 4), float32] */;
    %517 = cast(%516, dtype="float64") /* ty=Tensor[(10, 7, 4), float64] */;
    %518 = @func_221() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %519 = cast(meta[relay.Constant][22] /* ty=Tensor[(315), int8] */, dtype="int8") /* ty=Tensor[(315), int8] */;
    %520 = reshape(%519, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), int8] */;
    %521 = @func_100(%520) /* ty=(Tensor[(15, 3, 7), int8], Tensor[(15, 3, 7), float32]) */;
    %522 = @func_2200() /* ty=Tensor[(15, 15, 13), float64] */;
    %523 = %481.0;
    %524 = subtract(%493, %494) /* ty=Tensor[(10, 7, 4), uint8] */;
    %525 = %495.0;
    %526 = log10(%501) /* ty=Tensor[(10, 7, 4), float32] */;
    %527 = exp(%514) /* ty=Tensor[(10, 7, 4), float64] */;
    %528 = erf(%517) /* ty=Tensor[(10, 7, 4), float64] */;
    %529 = %518.0;
    %530 = %521.1;
    (%522, meta[relay.Constant][20] /* ty=Tensor[(70), uint64] */, %523, meta[relay.Constant][21] /* ty=Tensor[(120), float32] */, %524, %525, %526, %527, %528, %529, %530, meta[relay.Constant][22] /* ty=Tensor[(315), int8] */)
  };
  %531(%var_3999, %var_4000) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(70), uint64], Tensor[(2, 5, 12), float32], Tensor[(120), float32], Tensor[(10, 7, 4), uint8], Tensor[(15, 15, 13), float64], Tensor[(10, 7, 4), float32], Tensor[(10, 7, 4), float64], Tensor[(10, 7, 4), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 3, 7), float32], Tensor[(315), int8]) */
}

def @func_3143(%var_3124: Tensor[(2, 5, 12), float32]) -> (Tensor[(2, 5, 12), float32], Tensor[(15, 15, 13), float64]) {
  %532 = cast(%var_3124, dtype="float32") /* ty=Tensor[(2, 5, 12), float32] */;
  %533 = @func_1115() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %534 = tan(%532) /* ty=Tensor[(2, 5, 12), float32] */;
  %535 = %533.1;
  (%534, %535)
}

def @func_3111(%var_3109: Tensor[(4, 5, 3), float32], %var_3110: Tensor[(4, 5, 3), float32]) -> Tensor[(4, 5, 3), float32] {
  @func_3107(%var_3109, %var_3110) /* ty=Tensor[(4, 5, 3), float32] */
}

def @func_4579() -> (Tensor[(15, 15, 13), float64],) {
  @func_4577() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_746(%var_745: Tensor[(15, 15, 13), float64]) -> (Tensor[(15, 15, 13), int64], Tensor[(15, 15, 13), float64]) {
  %545 = fn (%var_733: Tensor[(15, 15, 13), float64]) -> (Tensor[(15, 15, 13), int64], Tensor[(15, 15, 13), float64]) {
    %536 = @func_221() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %537 = %536.0;
    %538 = cast(%var_733, dtype="int64") /* ty=Tensor[(15, 15, 13), int64] */;
    %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(%537, dtype="int64") /* ty=Tensor[(15, 15, 13), int64] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %542 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %543 = add(%540, %541) /* ty=Tensor[(15, 15, 13), int64] */;
    %544 = %542.1;
    (%543, %544)
  };
  %545(%var_745) /* ty=(Tensor[(15, 15, 13), int64], Tensor[(15, 15, 13), float64]) */
}

def @func_1035() -> (Tensor[(15, 15, 13), float64],) {
  %547 = fn () -> (Tensor[(15, 15, 13), float64],) {
    %546 = @func_700() /* ty=Tensor[(15, 15, 13), float64] */;
    (%546,)
  };
  %547() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_489() -> (Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) {
  %548 = cast(meta[relay.Constant][23] /* ty=Tensor[(280), bool] */, dtype="bool") /* ty=Tensor[(280), bool] */;
  %549 = cast(meta[relay.Constant][23] /* ty=Tensor[(280), bool] */, dtype="bool") /* ty=Tensor[(280), bool] */;
  %550 = reshape(%548, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %551 = reshape(%549, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
  %552 = @func_385(%550, %551) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) */;
  %553 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 26), int32] */, dtype="int32") /* ty=Tensor[(13, 26), int32] */;
  %554 = reshape(%553, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), int32] */;
  %555 = @func_117(%554) /* ty=(Tensor[(13, 13, 2), bool],) */;
  %556 = @func_221() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %557 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %558 = %557.0;
  %559 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %560 = %559.0;
  %561 = cast(%560, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
  %562 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%558, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %565 = %552.0;
  %566 = %555.0;
  %567 = %556.0;
  %568 = not_equal(%563, %564) /* ty=Tensor[(15, 15, 13), bool] */;
  (%565, meta[relay.Constant][23] /* ty=Tensor[(280), bool] */, %566, meta[relay.Constant][24] /* ty=Tensor[(13, 26), int32] */, %567, %568)
}

def @func_2942() -> (Tensor[(15, 15, 13), float64], Tensor[(280), bool]) {
  @func_2940() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool]) */
}

def @func_876() -> Tensor[(15, 15, 13), float64] {
  @func_874() /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_4946(%var_4931: Tensor[(10, 5, 7), bool], %var_4938: Tensor[(2, 16, 1), bool]) -> (Tensor[(10, 5, 7), bool], Tensor[(2, 16, 1), uint32], Tensor[(2, 16, 1), float32]) {
  %569 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %570 = cast(%var_4931, dtype="bool") /* ty=Tensor[(10, 5, 7), bool] */;
  %571 = cast(False /* ty=bool */, dtype="uint32") /* ty=uint32 */;
  %572 = cast(%var_4938, dtype="uint32") /* ty=Tensor[(2, 16, 1), uint32] */;
  %573 = cast(%var_4938, dtype="float32") /* ty=Tensor[(2, 16, 1), float32] */;
  %574 = logical_or(%569, %570) /* ty=Tensor[(10, 5, 7), bool] */;
  %575 = multiply(%571, %572) /* ty=Tensor[(2, 16, 1), uint32] */;
  %576 = atanh(%573) /* ty=Tensor[(2, 16, 1), float32] */;
  (%574, %575, %576)
}

def @func_2652() -> (Tensor[(252), int8],) {
  %577 = @func_1186() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8]) */;
  %578 = %577.2;
  (%578,)
}

def @func_4279() -> (Tensor[(15, 15, 13), float64],) {
  %579 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %580 = %579.0;
  (%580,)
}

def @func_3563(%var_3555: Tensor[(6, 7, 6), int32]) -> (Tensor[(6, 7, 6), bool], Tensor[(15, 15, 13), float64]) {
  %581 = @func_3542() /* ty=(Tensor[(6, 7, 6), int32], Tensor[(15, 15, 13), float64]) */;
  %582 = %581.0;
  %583 = cast(%var_3555, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%582, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %587 = equal(%585, %586) /* ty=Tensor[(6, 7, 6), bool] */;
  %588 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  (%587, %588)
}

def @func_624(%var_622: Tensor[(280), bool], %var_623: Tensor[(13, 13, 2), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(338), float32], Tensor[(13, 13, 2), bool], Tensor[(13, 13, 2), bool]) {
  %626 = fn (%var_549: Tensor[(280), bool], %var_591: Tensor[(13, 13, 2), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(338), float32], Tensor[(13, 13, 2), bool], Tensor[(13, 13, 2), bool]) {
    %589 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %590 = cast(%var_549, dtype="bool") /* ty=Tensor[(280), bool] */;
    %591 = cast(%var_549, dtype="bool") /* ty=Tensor[(280), bool] */;
    %592 = reshape(%590, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
    %593 = reshape(%591, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
    %594 = @func_385(%592, %593) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) */;
    %595 = @func_221() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %596 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %597 = cast(%var_549, dtype="bool") /* ty=Tensor[(280), bool] */;
    %598 = cast(%var_549, dtype="bool") /* ty=Tensor[(280), bool] */;
    %599 = reshape(%597, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
    %600 = reshape(%598, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
    %601 = @func_385(%599, %600) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) */;
    %602 = cast(meta[relay.Constant][25] /* ty=Tensor[(338), int32] */, dtype="int32") /* ty=Tensor[(338), int32] */;
    %603 = reshape(%602, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), int32] */;
    %604 = @func_117(%603) /* ty=(Tensor[(13, 13, 2), bool],) */;
    %605 = %604.0;
    %606 = cast(%605, dtype="int32") /* ty=Tensor[(13, 13, 2), int32] */;
    %607 = reshape(%606, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), int32] */;
    %608 = @func_117(%607) /* ty=(Tensor[(13, 13, 2), bool],) */;
    %609 = cast(meta[relay.Constant][25] /* ty=Tensor[(338), int32] */, dtype="float32") /* ty=Tensor[(338), float32] */;
    %610 = cast(%var_591, dtype="bool") /* ty=Tensor[(13, 13, 2), bool] */;
    %611 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
    %612 = cast(%605, dtype="bool") /* ty=Tensor[(13, 13, 2), bool] */;
    %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %614 = acos(%609) /* ty=Tensor[(338), float32] */;
    %615 = cast(%614, dtype="int32") /* ty=Tensor[(338), int32] */;
    %616 = reshape(%615, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), int32] */;
    %617 = @func_117(%616) /* ty=(Tensor[(13, 13, 2), bool],) */;
    %618 = %589.0;
    %619 = %594.2;
    %620 = %595.0;
    %621 = %596.0;
    %622 = %601.0;
    %623 = %608.0;
    %624 = less_equal(%612, %613) /* ty=Tensor[(13, 13, 2), bool] */;
    %625 = %617.0;
    (%618, %619, %var_549, %620, %621, %622, %623, %614, %624, %625)
  };
  %626(%var_622, %var_623) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(338), float32], Tensor[(13, 13, 2), bool], Tensor[(13, 13, 2), bool]) */
}

def @func_3326() -> (Tensor[(15, 15, 13), float64], Tensor[(338), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), int32], Tensor[(26, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(6, 7, 6), float64]) {
  %627 = @func_2242() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %628 = @func_2805() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %629 = %627.0;
  %630 = cast(%629, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %631 = reshape(%630, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
  %632 = %628.0;
  %633 = cast(%632, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %634 = reshape(%633, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
  %635 = @func_1608(%634) /* ty=(Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), float64]) */;
  %636 = @func_2601() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %637 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 42), int8] */, dtype="int8") /* ty=Tensor[(6, 42), int8] */;
  %638 = reshape(%637, newshape=[6, 7, 6]) /* ty=Tensor[(6, 7, 6), int8] */;
  %639 = @func_970(%638) /* ty=Tensor[(6, 7, 6), bool] */;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(6, 7, 6), float64] */;
  %641 = atan(%640) /* ty=Tensor[(6, 7, 6), float64] */;
  %642 = cast(%641, dtype="float32") /* ty=Tensor[(6, 7, 6), float32] */;
  %643 = log(%642) /* ty=Tensor[(6, 7, 6), float32] */;
  %644 = cast(%639, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  %645 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%641, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %648 = logical_or(%646, %647) /* ty=Tensor[(6, 7, 6), bool] */;
  %649 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 42), int8] */, dtype="bool") /* ty=Tensor[(6, 42), bool] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %653 = less_equal(%651, %652) /* ty=Tensor[(6, 7, 6), bool] */;
  %654 = cast(%653, dtype="int32") /* ty=Tensor[(6, 7, 6), int32] */;
  %655 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%643, dtype="int32") /* ty=Tensor[(6, 7, 6), int32] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %658 = cast(meta[relay.Constant][26] /* ty=Tensor[(338), int32] */, dtype="int32") /* ty=Tensor[(338), int32] */;
  %659 = reshape(%658, newshape=[26, 13]) /* ty=Tensor[(26, 13), int32] */;
  %660 = @func_821(%659) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(26, 13), int64]) */;
  %661 = %660.1;
  %662 = cast(%661, dtype="float64") /* ty=Tensor[(26, 13), float64] */;
  %663 = @func_3020() /* ty=(Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %664 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 7, 6), bool] */, dtype="float64") /* ty=Tensor[(6, 7, 6), float64] */;
  %665 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%648, dtype="float64") /* ty=Tensor[(6, 7, 6), float64] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %668 = @func_2697() /* ty=Tensor[(15, 15, 13), float64] */;
  %669 = @func_1353(%631) /* ty=Tensor[(15, 15, 13), bool] */;
  %670 = %635.1;
  %671 = %636.0;
  %672 = left_shift(%656, %657) /* ty=Tensor[(6, 7, 6), int32] */;
  %673 = atanh(%662) /* ty=Tensor[(26, 13), float64] */;
  %674 = %663.2;
  %675 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
  %676 = divide(%666, %667) /* ty=Tensor[(6, 7, 6), float64] */;
  (%629, meta[relay.Constant][26] /* ty=Tensor[(338), int32] */, %668, %632, %669, %670, %671, %672, %673, %674, %675, %676)
}

def @func_4832(%var_4830: Tensor[(15, 12, 6), bool]) -> (Tensor[(15, 12, 6), bool], Tensor[(15, 15, 13), float64]) {
  @func_4829(%var_4830) /* ty=(Tensor[(15, 12, 6), bool], Tensor[(15, 15, 13), float64]) */
}

def @func_2202() -> Tensor[(15, 15, 13), float64] {
  @func_2200() /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_352() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %680 = fn () -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
    %677 = @func_240() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %678 = %677.0;
    %679 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
    (%678, %679)
  };
  %680() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_1588(%var_1583: Tensor[(1, 338), int32], %var_1584: Tensor[(315), int8], %var_1585: Tensor[(64), float64], %var_1586: Tensor[(1, 252), int8], %var_1587: Tensor[(13, 13, 2), bool]) -> (Tensor[(15, 15, 13), int16], Tensor[(1, 338), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 3, 7), int8], Tensor[(315), int8], Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), bool], Tensor[(252), int8], Tensor[(64), float64], Tensor[(1, 252), int8], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), bool], Tensor[(13, 13, 2), int64]) {
  %721 = fn (%var_1434: Tensor[(1, 338), int32], %var_1441: Tensor[(315), int8], %var_1483: Tensor[(64), float64], %var_1484: Tensor[(1, 252), int8], %var_1555: Tensor[(13, 13, 2), bool]) -> (Tensor[(15, 15, 13), int16], Tensor[(1, 338), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 3, 7), int8], Tensor[(315), int8], Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), bool], Tensor[(252), int8], Tensor[(64), float64], Tensor[(1, 252), int8], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), bool], Tensor[(13, 13, 2), int64]) {
    %681 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
    %682 = cast(%681, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
    %683 = reshape(%682, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
    %684 = @func_674(%683) /* ty=(Tensor[(15, 15, 13), int16], Tensor[(15, 15, 13), float64]) */;
    %685 = cast(%var_1441, dtype="int8") /* ty=Tensor[(315), int8] */;
    %686 = reshape(%685, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), int8] */;
    %687 = @func_100(%686) /* ty=(Tensor[(15, 3, 7), int8], Tensor[(15, 3, 7), float32]) */;
    %688 = cast(%681, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
    %689 = reshape(%688, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
    %690 = cast(%681, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
    %691 = erf(%690) /* ty=Tensor[(15, 15, 13), float64] */;
    %692 = cast(%691, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
    %693 = reshape(%692, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
    %694 = cast(%var_1483, dtype="float64") /* ty=Tensor[(64), float64] */;
    %695 = cast(%var_1484, dtype="int8") /* ty=Tensor[(1, 252), int8] */;
    %696 = reshape(%694, newshape=[4, 16]) /* ty=Tensor[(4, 16), float64] */;
    %697 = reshape(%695, newshape=[252]) /* ty=Tensor[(252), int8] */;
    %698 = @func_1267(%696, %697) /* ty=(Tensor[(4, 16), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8], Tensor[(280), float64]) */;
    %699 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %700 = cast(%691, dtype="float32") /* ty=Tensor[(15, 15, 13), float32] */;
    %701 = %684.0;
    %702 = cast(%701, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
    %703 = reshape(%702, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
    %704 = cast(%var_1434, dtype="int32") /* ty=Tensor[(1, 338), int32] */;
    %705 = reshape(%704, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), int32] */;
    %706 = @func_117(%705) /* ty=(Tensor[(13, 13, 2), bool],) */;
    %707 = %706.0;
    %708 = cast(%var_1555, dtype="int64") /* ty=Tensor[(13, 13, 2), int64] */;
    %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %710 = cast(%707, dtype="int64") /* ty=Tensor[(13, 13, 2), int64] */;
    %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %712 = @func_194() /* ty=Tensor[(15, 15, 13), float64] */;
    %713 = %687.0;
    %714 = @func_1353(%689) /* ty=Tensor[(15, 15, 13), bool] */;
    %715 = @func_1353(%693) /* ty=Tensor[(15, 15, 13), bool] */;
    %716 = %698.2;
    %717 = %699.0;
    %718 = cosh(%700) /* ty=Tensor[(15, 15, 13), float32] */;
    %719 = @func_1353(%703) /* ty=Tensor[(15, 15, 13), bool] */;
    %720 = logical_xor(%710, %711) /* ty=Tensor[(13, 13, 2), int64] */;
    (%701, %var_1434, %712, %713, %var_1441, %714, %715, %716, %var_1483, %var_1484, %717, %718, %719, %720)
  };
  %721(%var_1583, %var_1584, %var_1585, %var_1586, %var_1587) /* ty=(Tensor[(15, 15, 13), int16], Tensor[(1, 338), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 3, 7), int8], Tensor[(315), int8], Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), bool], Tensor[(252), int8], Tensor[(64), float64], Tensor[(1, 252), int8], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), bool], Tensor[(13, 13, 2), int64]) */
}

def @func_2047(%var_2045: Tensor[(6, 16, 1), float64], %var_2046: Tensor[(6, 16, 6), float64]) -> (Tensor[(6, 16, 6), float64],) {
  %725 = fn (%var_2036: Tensor[(6, 16, 1), float64], %var_2037: Tensor[(6, 16, 6), float64]) -> (Tensor[(6, 16, 6), float64],) {
    %722 = cast(%var_2036, dtype="float64") /* ty=Tensor[(6, 16, 1), float64] */;
    %723 = cast(%var_2037, dtype="float64") /* ty=Tensor[(6, 16, 6), float64] */;
    %724 = mod(%722, %723) /* ty=Tensor[(6, 16, 6), float64] */;
    (%724,)
  };
  %725(%var_2045, %var_2046) /* ty=(Tensor[(6, 16, 6), float64],) */
}

def @func_5193(%var_5191: Tensor[(6, 7, 6), int32]) -> (Tensor[(6, 7, 6), bool], Tensor[(1, 10, 9), float64], Tensor[(90), float64]) {
  @func_5190(%var_5191) /* ty=(Tensor[(6, 7, 6), bool], Tensor[(1, 10, 9), float64], Tensor[(90), float64]) */
}

def @func_2144() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %726 = @func_1678() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %727 = @func_662() /* ty=Tensor[(15, 15, 13), float64] */;
  %728 = %726.0;
  (%727, %728)
}

def @func_5512(%var_5511: Tensor[(10, 1, 11), float64]) -> (Tensor[(10, 1, 11), float64],) {
  %731 = fn (%var_5502: Tensor[(10, 1, 11), float64]) -> (Tensor[(10, 1, 11), float64],) {
    %729 = cast(%var_5502, dtype="float64") /* ty=Tensor[(10, 1, 11), float64] */;
    %730 = cosh(%729) /* ty=Tensor[(10, 1, 11), float64] */;
    (%730,)
  };
  %731(%var_5511) /* ty=(Tensor[(10, 1, 11), float64],) */
}

def @func_2940() -> (Tensor[(15, 15, 13), float64], Tensor[(280), bool]) {
  %732 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %733 = @func_2898() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(280), bool]) */;
  %734 = %732.0;
  %735 = %733.1;
  (%734, %735)
}

def @func_2417() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), uint32]) {
  %736 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %737 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
  %738 = @func_2242() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %739 = %738.0;
  %740 = cast(%739, dtype="uint32") /* ty=Tensor[(15, 15, 13), uint32] */;
  %741 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%737, dtype="uint32") /* ty=Tensor[(15, 15, 13), uint32] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %744 = %736.0;
  %745 = maximum(%742, %743) /* ty=Tensor[(15, 15, 13), uint32] */;
  (%744, %745)
}

def @func_1271(%var_1269: Tensor[(4, 16), float64], %var_1270: Tensor[(252), int8]) -> (Tensor[(4, 16), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8], Tensor[(280), float64]) {
  @func_1267(%var_1269, %var_1270) /* ty=(Tensor[(4, 16), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8], Tensor[(280), float64]) */
}

def @func_3433() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) {
  %750 = fn () -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) {
    %746 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
    %747 = cast(%746, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
    %748 = reshape(%747, newshape=[15, 15, 13]) /* ty=Tensor[(15, 15, 13), float64] */;
    %749 = @func_1353(%748) /* ty=Tensor[(15, 15, 13), bool] */;
    (%746, %749)
  };
  %750() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), bool]) */
}

def @func_5696() -> (Tensor[(15, 15, 13), float64],) {
  %753 = fn () -> (Tensor[(15, 15, 13), float64],) {
    %751 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %752 = %751.0;
    (%752,)
  };
  %753() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_3076() -> (Tensor[(15, 15, 13), float64],) {
  %756 = fn () -> (Tensor[(15, 15, 13), float64],) {
    %754 = @func_1115() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %755 = %754.0;
    (%755,)
  };
  %756() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_1021(%var_1019: Tensor[(2, 3, 4), uint32], %var_1020: Tensor[(2, 3, 4), uint32]) -> (Tensor[(2, 3, 4), uint32],) {
  %762 = fn (%var_1011: Tensor[(2, 3, 4), uint32], %var_1012: Tensor[(2, 3, 4), uint32]) -> (Tensor[(2, 3, 4), uint32],) {
    %757 = cast(%var_1012, dtype="uint32") /* ty=Tensor[(2, 3, 4), uint32] */;
    %758 = shape_of(%var_1011, dtype="int32") /* ty=Tensor[(3), int32] */;
    %759 = cast(%var_1011, dtype="uint32") /* ty=Tensor[(2, 3, 4), uint32] */;
    %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %761 = minimum(%759, %760) /* ty=Tensor[(2, 3, 4), uint32] */;
    (%761,)
  };
  %762(%var_1019, %var_1020) /* ty=(Tensor[(2, 3, 4), uint32],) */
}

def @func_1416() -> (Tensor[(15, 15, 13), float64],) {
  %765 = fn () -> (Tensor[(15, 15, 13), float64],) {
    %763 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %764 = %763.1;
    (%764,)
  };
  %765() /* ty=(Tensor[(15, 15, 13), float64],) */
}

def @func_3717(%var_3715: Tensor[(338), int32], %var_3716: Tensor[(315), int8]) -> (Tensor[(15, 15, 13), float64], Tensor[(64), float64], Tensor[(315), int8], Tensor[(4, 16), float64], Tensor[(126, 2), int8], Tensor[(338), uint64], Tensor[(15, 15, 13), float64], Tensor[(10, 28), bool]) {
  %790 = fn (%var_3674: Tensor[(338), int32], %var_3675: Tensor[(315), int8]) -> (Tensor[(15, 15, 13), float64], Tensor[(64), float64], Tensor[(315), int8], Tensor[(4, 16), float64], Tensor[(126, 2), int8], Tensor[(338), uint64], Tensor[(15, 15, 13), float64], Tensor[(10, 28), bool]) {
    %766 = cast(%var_3674, dtype="int32") /* ty=Tensor[(338), int32] */;
    %767 = cast(%var_3675, dtype="int8") /* ty=Tensor[(315), int8] */;
    %768 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 16), float64] */, dtype="float64") /* ty=Tensor[(4, 16), float64] */;
    %769 = cast(meta[relay.Constant][30] /* ty=Tensor[(126, 2), int8] */, dtype="int8") /* ty=Tensor[(126, 2), int8] */;
    %770 = cast(%var_3674, dtype="bool") /* ty=Tensor[(338), bool] */;
    %771 = reshape(%766, newshape=[1, 338]) /* ty=Tensor[(1, 338), int32] */;
    %772 = reshape(%767, newshape=[315]) /* ty=Tensor[(315), int8] */;
    %773 = reshape(%768, newshape=[64]) /* ty=Tensor[(64), float64] */;
    %774 = reshape(%769, newshape=[1, 252]) /* ty=Tensor[(1, 252), int8] */;
    %775 = reshape(%770, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), bool] */;
    %776 = @func_1582(%771, %772, %773, %774, %775) /* ty=(Tensor[(15, 15, 13), int16], Tensor[(1, 338), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 3, 7), int8], Tensor[(315), int8], Tensor[(15, 15, 13), bool], Tensor[(15, 15, 13), bool], Tensor[(252), int8], Tensor[(64), float64], Tensor[(1, 252), int8], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), bool], Tensor[(13, 13, 2), int64]) */;
    %777 = cast(meta[relay.Constant][31] /* ty=Tensor[(338), int32] */, dtype="uint64") /* ty=Tensor[(338), uint64] */;
    %778 = shape_of(%var_3674, dtype="int32") /* ty=Tensor[(1), int32] */;
    %779 = cast(%var_3674, dtype="uint64") /* ty=Tensor[(338), uint64] */;
    %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %781 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 28), bool] */, dtype="bool") /* ty=Tensor[(10, 28), bool] */;
    %782 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 28), bool] */, dtype="bool") /* ty=Tensor[(10, 28), bool] */;
    %783 = reshape(%781, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
    %784 = reshape(%782, newshape=[14, 2, 10]) /* ty=Tensor[(14, 2, 10), bool] */;
    %785 = @func_385(%783, %784) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) */;
    %786 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
    %787 = %776.8;
    %788 = left_shift(%779, %780) /* ty=Tensor[(338), uint64] */;
    %789 = %785.2;
    (%786, %787, %var_3675, meta[relay.Constant][29] /* ty=Tensor[(4, 16), float64] */, meta[relay.Constant][30] /* ty=Tensor[(126, 2), int8] */, %788, %789, meta[relay.Constant][32] /* ty=Tensor[(10, 28), bool] */)
  };
  %790(%var_3715, %var_3716) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(64), float64], Tensor[(315), int8], Tensor[(4, 16), float64], Tensor[(126, 2), int8], Tensor[(338), uint64], Tensor[(15, 15, 13), float64], Tensor[(10, 28), bool]) */
}

def @func_3022() -> (Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  @func_3020() /* ty=(Tensor[(15, 15, 13), float32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_5864() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %795 = fn () -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
    %791 = @func_4279() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %792 = @func_5013() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %793 = %791.0;
    %794 = %792.1;
    (%793, %794)
  };
  %795() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_117(%var_107: Tensor[(13, 13, 2), int32]) -> (Tensor[(13, 13, 2), bool],) {
  %796 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 13, 2), int32] */, dtype="bool") /* ty=Tensor[(13, 13, 2), bool] */;
  %797 = shape_of(%var_107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%var_107, dtype="bool") /* ty=Tensor[(13, 13, 2), bool] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %800 = greater_equal(%798, %799) /* ty=Tensor[(13, 13, 2), bool] */;
  (%800,)
}

def @func_2654() -> (Tensor[(252), int8],) {
  @func_2652() /* ty=(Tensor[(252), int8],) */
}

def @func_2242() -> (Tensor[(15, 15, 13), float64],) {
  %801 = @func_1979() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %802 = %801.0;
  (%802,)
}

def @func_5190(%var_5177: Tensor[(6, 7, 6), int32]) -> (Tensor[(6, 7, 6), bool], Tensor[(1, 10, 9), float64], Tensor[(90), float64]) {
  %803 = @func_3542() /* ty=(Tensor[(6, 7, 6), int32], Tensor[(15, 15, 13), float64]) */;
  %804 = %803.0;
  %805 = cast(%var_5177, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  %806 = shape_of(%804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %807 = cast(%804, dtype="bool") /* ty=Tensor[(6, 7, 6), bool] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %809 = cast(meta[relay.Constant][34] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %810 = reshape(%809, newshape=[1, 10, 9]) /* ty=Tensor[(1, 10, 9), float64] */;
  %811 = @func_4748(%810) /* ty=(Tensor[(1, 10, 9), float64],) */;
  %812 = greater_equal(%807, %808) /* ty=Tensor[(6, 7, 6), bool] */;
  %813 = %811.0;
  (%812, %813, meta[relay.Constant][34] /* ty=Tensor[(90), float64] */)
}

def @func_4715() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(252), int8], Tensor[(2, 504), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  @func_4713() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(252), int8], Tensor[(2, 504), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_4363(%var_4361: Tensor[(12, 7, 12), int8], %var_4362: Tensor[(12, 7, 12), int8]) -> (Tensor[(12, 7, 12), int8],) {
  @func_4359(%var_4361, %var_4362) /* ty=(Tensor[(12, 7, 12), int8],) */
}

def @func_3739(%var_3737: Tensor[(10, 7, 1), uint64], %var_3738: Tensor[(10, 7, 4), uint64]) -> Tensor[(10, 7, 4), uint64] {
  %816 = fn (%var_3730: Tensor[(10, 7, 1), uint64], %var_3731: Tensor[(10, 7, 4), uint64]) -> Tensor[(10, 7, 4), uint64] {
    %814 = cast(%var_3730, dtype="uint64") /* ty=Tensor[(10, 7, 1), uint64] */;
    %815 = cast(%var_3731, dtype="uint64") /* ty=Tensor[(10, 7, 4), uint64] */;
    left_shift(%814, %815) /* ty=Tensor[(10, 7, 4), uint64] */
  };
  %816(%var_3737, %var_3738) /* ty=Tensor[(10, 7, 4), uint64] */
}

def @func_4332() -> (Tensor[(13, 5, 5), float64], Tensor[(13, 5, 5), bool]) {
  %834 = fn () -> (Tensor[(13, 5, 5), float64], Tensor[(13, 5, 5), bool]) {
    %817 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 5, 5), float32] */, dtype="float32") /* ty=Tensor[(13, 5, 5), float32] */;
    %818 = rsqrt(%817) /* ty=Tensor[(13, 5, 5), float32] */;
    %819 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 5, 5), float32] */, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
    %820 = shape_of(%818, dtype="int32") /* ty=Tensor[(3), int32] */;
    %821 = cast(%818, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
    %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %823 = logical_and(%821, %822) /* ty=Tensor[(13, 5, 5), bool] */;
    %824 = cast(%818, dtype="float64") /* ty=Tensor[(13, 5, 5), float64] */;
    %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(3), int32] */;
    %826 = cast(%823, dtype="float64") /* ty=Tensor[(13, 5, 5), float64] */;
    %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %828 = cast(%818, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
    %829 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(13, 5, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %830 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 5, 5), float32] */, dtype="bool") /* ty=Tensor[(13, 5, 5), bool] */;
    %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %832 = mod(%826, %827) /* ty=Tensor[(13, 5, 5), float64] */;
    %833 = less_equal(%830, %831) /* ty=Tensor[(13, 5, 5), bool] */;
    (%832, %833)
  };
  %834() /* ty=(Tensor[(13, 5, 5), float64], Tensor[(13, 5, 5), bool]) */
}

def @func_2590(%var_2589: Tensor[(252), int8]) -> (Tensor[(280), float64], Tensor[(1, 64), float64], Tensor[(252), int8], Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), bool]) {
  %854 = fn (%var_2555: Tensor[(252), int8]) -> (Tensor[(280), float64], Tensor[(1, 64), float64], Tensor[(252), int8], Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), bool]) {
    %835 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 64), float64] */, dtype="float64") /* ty=Tensor[(1, 64), float64] */;
    %836 = cast(%var_2555, dtype="int8") /* ty=Tensor[(252), int8] */;
    %837 = reshape(%835, newshape=[4, 16]) /* ty=Tensor[(4, 16), float64] */;
    %838 = reshape(%836, newshape=[252]) /* ty=Tensor[(252), int8] */;
    %839 = @func_1267(%837, %838) /* ty=(Tensor[(4, 16), float64], Tensor[(6, 7, 6), bool], Tensor[(252), int8], Tensor[(280), float64]) */;
    %840 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 26), int32] */, dtype="int32") /* ty=Tensor[(13, 26), int32] */;
    %841 = reshape(%840, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), int32] */;
    %842 = @func_117(%841) /* ty=(Tensor[(13, 13, 2), bool],) */;
    %843 = @func_2125() /* ty=(Tensor[(15, 15, 13), float64],) */;
    %844 = %843.0;
    %845 = @func_916() /* ty=Tensor[(15, 15, 13), float64] */;
    %846 = cast(%845, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
    %847 = shape_of(%844, dtype="int32") /* ty=Tensor[(3), int32] */;
    %848 = cast(%844, dtype="bool") /* ty=Tensor[(15, 15, 13), bool] */;
    %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %850 = %839.3;
    %851 = @func_874() /* ty=Tensor[(15, 15, 13), float64] */;
    %852 = %842.0;
    %853 = less_equal(%848, %849) /* ty=Tensor[(15, 15, 13), bool] */;
    (%850, meta[relay.Constant][37] /* ty=Tensor[(1, 64), float64] */, %var_2555, %851, %852, meta[relay.Constant][38] /* ty=Tensor[(13, 26), int32] */, %853)
  };
  %854(%var_2589) /* ty=(Tensor[(280), float64], Tensor[(1, 64), float64], Tensor[(252), int8], Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(13, 26), int32], Tensor[(15, 15, 13), bool]) */
}

def @func_2146() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  @func_2144() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_4359(%var_4352: Tensor[(12, 7, 12), int8], %var_4353: Tensor[(12, 7, 12), int8]) -> (Tensor[(12, 7, 12), int8],) {
  %855 = cast(%var_4353, dtype="int8") /* ty=Tensor[(12, 7, 12), int8] */;
  %856 = shape_of(%var_4352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%var_4352, dtype="int8") /* ty=Tensor[(12, 7, 12), int8] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %859 = bitwise_and(%857, %858) /* ty=Tensor[(12, 7, 12), int8] */;
  (%859,)
}

def @func_389(%var_387: Tensor[(14, 2, 10), bool], %var_388: Tensor[(14, 2, 10), bool]) -> (Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) {
  @func_385(%var_387, %var_388) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(14, 2, 10), uint16], Tensor[(15, 15, 13), float64]) */
}

def @func_918() -> Tensor[(15, 15, 13), float64] {
  @func_916() /* ty=Tensor[(15, 15, 13), float64] */
}

def @func_3219() -> (Tensor[(15, 15, 13), float64], Tensor[(252), int8], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  @func_3217() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(252), int8], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */
}

def @func_4771() -> Tensor[(13, 26), int32] {
  %861 = fn () -> Tensor[(13, 26), int32] {
    %860 = @func_1979() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 26), int32], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
    %860.2
  };
  %861() /* ty=Tensor[(13, 26), int32] */
}

def @func_1828() -> (Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(338), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) {
  %862 = @func_351() /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64]) */;
  %863 = cast(meta[relay.Constant][39] /* ty=Tensor[(280), bool] */, dtype="bool") /* ty=Tensor[(280), bool] */;
  %864 = cast(meta[relay.Constant][40] /* ty=Tensor[(338), bool] */, dtype="bool") /* ty=Tensor[(338), bool] */;
  %865 = reshape(%863, newshape=[280]) /* ty=Tensor[(280), bool] */;
  %866 = reshape(%864, newshape=[13, 13, 2]) /* ty=Tensor[(13, 13, 2), bool] */;
  %867 = @func_621(%865, %866) /* ty=(Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(280), bool], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(15, 15, 13), float64], Tensor[(13, 13, 2), bool], Tensor[(338), float32], Tensor[(13, 13, 2), bool], Tensor[(13, 13, 2), bool]) */;
  %868 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %869 = %868.0;
  %870 = cast(%869, dtype="float64") /* ty=Tensor[(15, 15, 13), float64] */;
  %871 = @func_1415() /* ty=(Tensor[(15, 15, 13), float64],) */;
  %872 = %862.1;
  %873 = %867.3;
  %874 = sigmoid(%870) /* ty=Tensor[(15, 15, 13), float64] */;
  %875 = %871.0;
  (%872, %873, meta[relay.Constant][39] /* ty=Tensor[(280), bool] */, meta[relay.Constant][40] /* ty=Tensor[(338), bool] */, %874, %875)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen90/build/output.py:2312: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen90/build/output.py", line 2317, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) tvmgen_default_fused_cast_less_equal_kernel0(signed char* __restrict__ T_less_equal, uint* __restrict__ placeholder, signed char* __restrict__ placeholder1) {
  T_less_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) <= ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

