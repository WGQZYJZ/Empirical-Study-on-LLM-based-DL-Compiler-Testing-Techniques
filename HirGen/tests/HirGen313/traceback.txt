==========mod==========
#[version = "0.0.5"]
def @func_4200(%var_4189: Tensor[(7, 6, 10), float32]) -> (Tensor[(7, 6, 10), int64],) {
  %0 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %1 = %0.0;
  %2 = cast(%var_4189, dtype="int64") /* ty=Tensor[(7, 6, 10), int64] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="int64") /* ty=Tensor[(7, 6, 10), int64] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %6 = maximum(%4, %5) /* ty=Tensor[(7, 6, 10), int64] */;
  (%6,)
}

def @func_2923() -> (Tensor[(6, 30), int32], Tensor[(6, 30), bool]) {
  %7 = @func_2651() /* ty=Tensor[(6, 30), uint16] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 30), uint16] */, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(2), int32] */;
  %10 = cast(%7, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %12 = cast(%7, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %13 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(6, 30), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 30), uint16] */, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %16 = right_shift(%10, %11) /* ty=Tensor[(6, 30), int32] */;
  %17 = logical_and(%14, %15) /* ty=Tensor[(6, 30), bool] */;
  (%16, %17)
}

def @func_4929(%var_4873: Tensor[(4, 12, 5), bool], %var_4874: Tensor[(4, 12, 5), bool]) -> (Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), float32], Tensor[(4, 12, 5), float64], Tensor[(4, 12, 5), float32]) {
  %18 = cast(%var_4874, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %19 = shape_of(%var_4873, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%var_4873, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %22 = cast(%var_4874, dtype="float32") /* ty=Tensor[(4, 12, 5), float32] */;
  %23 = cast(%var_4874, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
  %24 = cast(%var_4873, dtype="float32") /* ty=Tensor[(4, 12, 5), float32] */;
  %25 = logical_or(%20, %21) /* ty=Tensor[(4, 12, 5), bool] */;
  %26 = asinh(%22) /* ty=Tensor[(4, 12, 5), float32] */;
  %27 = cosh(%23) /* ty=Tensor[(4, 12, 5), float64] */;
  %28 = exp(%24) /* ty=Tensor[(4, 12, 5), float32] */;
  (%25, %26, %27, %28)
}

def @main(%var_6349: Tensor[(16, 8, 1), float64], %var_6352: Tensor[(16, 8, 8), float64]) -> (Tensor[(16, 8, 1), float64], Tensor[(16, 8, 8), uint8]) {
  %29 = cast(%var_6349, dtype="float64") /* ty=Tensor[(16, 8, 1), float64] */;
  %30 = cast(%var_6349, dtype="uint8") /* ty=Tensor[(16, 8, 1), uint8] */;
  %31 = cast(%var_6352, dtype="uint8") /* ty=Tensor[(16, 8, 8), uint8] */;
  %32 = log(%29) /* ty=Tensor[(16, 8, 1), float64] */;
  %33 = logical_xor(%30, %31) /* ty=Tensor[(16, 8, 8), uint8] */;
  (%32, %33)
}

def @func_5443() -> (Tensor[(6, 30), uint16],) {
  %34 = @func_2543() /* ty=(Tensor[(6, 30), uint16],) */;
  %35 = %34.0;
  (%35,)
}

def @func_1881(%var_1869: Tensor[(180), uint16], %var_1877: float32) -> (Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), float32], Tensor[(180), uint16], Tensor[(7, 6, 10), bool], float32) {
  %36 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %37 = cast(%var_1869, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %38 = cast(%var_1869, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %39 = reshape(%37, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
  %40 = reshape(%38, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
  %41 = @func_1050(%39, %40) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), bool]) */;
  %42 = %36.0;
  %43 = cast(%42, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %44 = cast(%var_1877, dtype="float32") /* ty=float32 */;
  %45 = reshape(%43, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), float32] */;
  %46 = reshape(%44, newshape=[]) /* ty=float32 */;
  %47 = @func_1800(%45, %46) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(3, 6, 2), bool], Tensor[(6, 1), int32], Tensor[(4, 5, 1), bool], float32) */;
  %48 = %41.0;
  %49 = %47.0;
  (%42, %48, %var_1869, %49, %var_1877)
}

def @func_4791() -> (Tensor[(15, 4, 3), bool], Tensor[(6, 30), float32]) {
  %50 = @func_3554() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) */;
  %51 = %50.0;
  %52 = @func_3554() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) */;
  %53 = %52.0;
  %54 = cast(%53, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %55 = shape_of(%51, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%51, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %58 = @func_4211() /* ty=(Tensor[(6, 30), uint16],) */;
  %59 = %58.0;
  %60 = cast(%59, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %61 = logical_or(%56, %57) /* ty=Tensor[(15, 4, 3), bool] */;
  %62 = acosh(%60) /* ty=Tensor[(6, 30), float32] */;
  (%61, %62)
}

def @func_5845() -> Tensor[(6, 30), float64] {
  %63 = @func_5443() /* ty=(Tensor[(6, 30), uint16],) */;
  %64 = %63.0;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  log(%65) /* ty=Tensor[(6, 30), float64] */
}

def @func_5312(%var_5230: Tensor[(11, 3, 7), uint32], %var_5270: Tensor[(6, 30), uint16]) -> (Tensor[(11, 3, 7), uint32], Tensor[(6, 30), float32], Tensor[(6, 30), uint64], Tensor[(6, 30), uint16]) {
  %66 = cast(%var_5230, dtype="uint32") /* ty=Tensor[(11, 3, 7), uint32] */;
  %67 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(11, 3, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 3, 7), uint32] */, dtype="uint32") /* ty=Tensor[(11, 3, 7), uint32] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %70 = @func_4018() /* ty=(Tensor[(6, 30), float32],) */;
  %71 = @func_4578() /* ty=(Tensor[(6, 30), uint16],) */;
  %72 = %71.0;
  %73 = cast(%var_5270, dtype="uint64") /* ty=Tensor[(6, 30), uint64] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(2), int32] */;
  %75 = cast(%72, dtype="uint64") /* ty=Tensor[(6, 30), uint64] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %77 = @func_2543() /* ty=(Tensor[(6, 30), uint16],) */;
  %78 = maximum(%68, %69) /* ty=Tensor[(11, 3, 7), uint32] */;
  %79 = %70.0;
  %80 = bitwise_or(%75, %76) /* ty=Tensor[(6, 30), uint64] */;
  %81 = %77.0;
  (%78, %79, %80, %81)
}

def @func_2773() -> (Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) {
  %82 = @func_2543() /* ty=(Tensor[(6, 30), uint16],) */;
  %83 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
  %84 = %82.0;
  %85 = %83.2;
  (%84, %85)
}

def @func_5566(%var_5497: uint16, %var_5498: Tensor[(1, 11, 1), uint16]) -> (Tensor[(6, 30), float64], Tensor[(?, 11, ?), bool], Tensor[(1, 11, 1), float32], Tensor[(1, 11, 1), float64], Tensor[(6, 30), uint64], Tensor[(15, 4, 3), float64], Tensor[(1, 11, 1), float32]) {
  %86 = cast(%var_5497, dtype="uint16") /* ty=uint16 */;
  %87 = cast(%var_5498, dtype="uint16") /* ty=Tensor[(1, 11, 1), uint16] */;
  %88 = maximum(%86, %87) /* ty=Tensor[(1, 11, 1), uint16] */;
  %89 = cast(%88, dtype="bool") /* ty=Tensor[(1, 11, 1), bool] */;
  %90 = shape_of(%var_5498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%var_5498, dtype="bool") /* ty=Tensor[(1, 11, 1), bool] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %93 = cast(%88, dtype="uint32") /* ty=Tensor[(1, 11, 1), uint32] */;
  %94 = cast(%var_5497, dtype="uint32") /* ty=uint32 */;
  %95 = left_shift(%93, %94) /* ty=Tensor[(1, 11, 1), uint32] */;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(1, 11, 1), float32] */;
  %97 = cast(%var_5497, dtype="float32") /* ty=float32 */;
  %98 = cast(%var_5497, dtype="float64") /* ty=float64 */;
  %99 = cast(%88, dtype="float64") /* ty=Tensor[(1, 11, 1), float64] */;
  %100 = @func_5124() /* ty=(Tensor[(15, 4, 3), int16], Tensor[(6, 30), uint64]) */;
  %101 = cast(%95, dtype="float64") /* ty=Tensor[(1, 11, 1), float64] */;
  %102 = cosh(%101) /* ty=Tensor[(1, 11, 1), float64] */;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(1, 11, 1), float32] */;
  %104 = @func_3530() /* ty=Tensor[(6, 30), float64] */;
  %105 = logical_or(%91, %92) /* ty=Tensor[(?, 11, ?), bool] */;
  %106 = power(%96, %97) /* ty=Tensor[(1, 11, 1), float32] */;
  %107 = floor_mod(%98, %99) /* ty=Tensor[(1, 11, 1), float64] */;
  %108 = %100.1;
  %109 = @func_4390() /* ty=Tensor[(15, 4, 3), float64] */;
  %110 = erf(%103) /* ty=Tensor[(1, 11, 1), float32] */;
  (%104, %105, %106, %107, %108, %109, %110)
}

def @func_2210(%var_2207: Tensor[(180), uint16]) -> (Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), float32], Tensor[(6, 30), uint64], Tensor[(180), uint16]) {
  %111 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
  %112 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %113 = cast(%var_2207, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %114 = reshape(%113, newshape=[6, 30]) /* ty=Tensor[(6, 30), uint16] */;
  %115 = %111.2;
  %116 = %112.0;
  %117 = @func_2096(%114) /* ty=Tensor[(6, 30), uint64] */;
  (%115, %116, %117, %var_2207)
}

def @func_845(%var_808: float32) -> Tensor[(4, 5, 1), bool] {
  %118 = cast(%var_808, dtype="bool") /* ty=bool */;
  %119 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 5, 1), float32] */, dtype="bool") /* ty=Tensor[(4, 5, 1), bool] */;
  not_equal(%118, %119) /* ty=Tensor[(4, 5, 1), bool] */
}

def @func_5012() -> (Tensor[(7, 6, 10), float32],) {
  %120 = @func_2866() /* ty=Tensor[(7, 6, 10), float32] */;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %122 = rsqrt(%121) /* ty=Tensor[(7, 6, 10), float32] */;
  %123 = cast(%120, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %127 = floor_divide(%125, %126) /* ty=Tensor[(7, 6, 10), float32] */;
  (%127,)
}

def @func_6073() -> Tensor[(15, 4, 3), float32] {
  %128 = @func_6050() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), float32]) */;
  %128.0
}

def @func_2832(%var_2821: Tensor[(12, 1, 8), float64]) -> (Tensor[(12, 1, 8), float64],) {
  %129 = cast(%var_2821, dtype="float64") /* ty=Tensor[(12, 1, 8), float64] */;
  %130 = sinh(%129) /* ty=Tensor[(12, 1, 8), float64] */;
  (%130,)
}

def @func_5410() -> (Tensor[(6, 30), uint16],) {
  %131 = @func_4229() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16]) */;
  %132 = %131.1;
  (%132,)
}

def @func_2808(%var_2799: float32) -> (Tensor[(7, 6, 10), float32], float32, float32) {
  %133 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %134 = %133.0;
  %135 = cast(%134, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %136 = cast(%var_2799, dtype="float32") /* ty=float32 */;
  %137 = reshape(%136, newshape=[]) /* ty=float32 */;
  %138 = @func_1833(%137) /* ty=(Tensor[(7, 6, 10), float64], Tensor[(3, 6, 2), bool], float32) */;
  %139 = atanh(%135) /* ty=Tensor[(7, 6, 10), float32] */;
  %140 = %138.2;
  (%139, %140, %var_2799)
}

def @func_4464() -> Tensor[(7, 6, 10), float32] {
  @func_2866() /* ty=Tensor[(7, 6, 10), float32] */
}

def @func_2866() -> Tensor[(7, 6, 10), float32] {
  %141 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %141.0
}

def @func_3877(%var_3874: Tensor[(1, 4, 6), float32]) -> Tensor[(1, 4, 6), float32] {
  %142 = cast(%var_3874, dtype="float32") /* ty=Tensor[(1, 4, 6), float32] */;
  erf(%142) /* ty=Tensor[(1, 4, 6), float32] */
}

def @func_3554() -> (Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) {
  %143 = @func_3435() /* ty=(Tensor[(7, 6, 10), float32], Tensor[(7, 6, 10), bool], Tensor[(15, 4, 3), int16], Tensor[(15, 4, 3), bool], Tensor[(10, 13, 3), float64], Tensor[(390), uint16]) */;
  %144 = @func_2476() /* ty=(Tensor[(6, 30), uint16],) */;
  %145 = %143.3;
  %146 = %144.0;
  (%145, %146)
}

def @func_1107(%var_1081: Tensor[(8, 2, 10), float64]) -> (Tensor[(8, 2, 10), float64], Tensor[(5, 3, ?), float64], Tensor[(240), float64]) {
  %147 = cast(%var_1081, dtype="float64") /* ty=Tensor[(8, 2, 10), float64] */;
  %148 = cast(meta[relay.Constant][3] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %149 = reshape(%148, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), float64] */;
  %150 = @func_244(%149) /* ty=(Tensor[(5, 3, ?), float64], Tensor[(5, 3, 16), float64]) */;
  %151 = asinh(%147) /* ty=Tensor[(8, 2, 10), float64] */;
  %152 = %150.0;
  (%151, %152, meta[relay.Constant][3] /* ty=Tensor[(240), float64] */)
}

def @func_3195(%var_3187: Tensor[(7, 6, 10), float32]) -> (Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), bool]) {
  %153 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
  %154 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %155 = %154.0;
  %156 = cast(%var_3187, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%155, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %160 = %153.2;
  %161 = less_equal(%158, %159) /* ty=Tensor[(7, 6, 10), bool] */;
  (%160, %161)
}

def @func_2264(%var_2255: Tensor[(7, 6, 10), float32]) -> (Tensor[(7, 6, 10), bool],) {
  %162 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %163 = %162.0;
  %164 = cast(%var_2255, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %168 = subtract(%166, %167) /* ty=Tensor[(7, 6, 10), float32] */;
  %169 = cast(%168, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %170 = shape_of(%var_2255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%var_2255, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %173 = less(%171, %172) /* ty=Tensor[(7, 6, 10), bool] */;
  (%173,)
}

def @func_4322(%var_4304: Tensor[(16, 10), float64], %var_4316: Tensor[(420), float32]) -> (Tensor[(6, 30), uint16], Tensor[(15, 4, 3), bool], Tensor[(8, 2, 10), float64], Tensor[(16, 10), float64], Tensor[(7, 6, 10), bool], Tensor[(420), float32]) {
  %174 = @func_2543() /* ty=(Tensor[(6, 30), uint16],) */;
  %175 = @func_3816() /* ty=(Tensor[(15, 4, 3), bool],) */;
  %176 = cast(%var_4304, dtype="float64") /* ty=Tensor[(16, 10), float64] */;
  %177 = reshape(%176, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), float64] */;
  %178 = @func_1107(%177) /* ty=(Tensor[(8, 2, 10), float64], Tensor[(5, 3, ?), float64], Tensor[(240), float64]) */;
  %179 = cast(%var_4316, dtype="float32") /* ty=Tensor[(420), float32] */;
  %180 = reshape(%179, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), float32] */;
  %181 = @func_3195(%180) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), bool]) */;
  %182 = %174.0;
  %183 = %175.0;
  %184 = %178.0;
  %185 = %181.1;
  (%182, %183, %184, %var_4304, %185, %var_4316)
}

def @func_3052(%var_3044: Tensor[(6, 30), uint16]) -> Tensor[(6, 30), float64] {
  %186 = @func_2773() /* ty=(Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
  %187 = %186.0;
  %188 = cast(%var_3044, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(2), int32] */;
  %190 = cast(%187, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  floor_divide(%190, %191) /* ty=Tensor[(6, 30), float64] */
}

def @func_244(%var_234: Tensor[(5, 3, 16), float64]) -> (Tensor[(5, 3, ?), float64], Tensor[(5, 3, 16), float64]) {
  %192 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 3, 1), float64] */;
  %193 = sinh(%192) /* ty=Tensor[(5, 3, 1), float64] */;
  %194 = cast(%193, dtype="int16") /* ty=Tensor[(5, 3, 1), int16] */;
  %195 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(5, 3, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 3, 1), float64] */, dtype="int16") /* ty=Tensor[(5, 3, 1), int16] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %198 = bitwise_and(%196, %197) /* ty=Tensor[(5, 3, ?), int16] */;
  %199 = cast(%198, dtype="float64") /* ty=Tensor[(5, 3, ?), float64] */;
  %200 = cast(%193, dtype="float64") /* ty=Tensor[(5, 3, 1), float64] */;
  %201 = cast(%var_234, dtype="float64") /* ty=Tensor[(5, 3, 16), float64] */;
  %202 = sin(%199) /* ty=Tensor[(5, 3, ?), float64] */;
  %203 = multiply(%200, %201) /* ty=Tensor[(5, 3, 16), float64] */;
  (%202, %203)
}

def @func_2476() -> (Tensor[(6, 30), uint16],) {
  %204 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
  %205 = %204.1;
  (%205,)
}

def @func_5213(%var_5210: Tensor[(160), float64]) -> (Tensor[(15, 4, 3), bool], Tensor[(6, 30), float32], Tensor[(420), float32], Tensor[(160), float64], Tensor[(420), float32]) {
  %206 = @func_3816() /* ty=(Tensor[(15, 4, 3), bool],) */;
  %207 = @func_4791() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), float32]) */;
  %208 = cast(%var_5210, dtype="float64") /* ty=Tensor[(160), float64] */;
  %209 = cast(meta[relay.Constant][5] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %210 = reshape(%208, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %211 = reshape(%209, newshape=[420]) /* ty=Tensor[(420), float32] */;
  %212 = @func_4531(%210, %211) /* ty=(Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool], Tensor[(160), float64], Tensor[(420), float32]) */;
  %213 = %206.0;
  %214 = %207.1;
  %215 = %212.3;
  (%213, %214, %215, %var_5210, meta[relay.Constant][5] /* ty=Tensor[(420), float32] */)
}

def @func_5657() -> (Tensor[(15, 4, 3), float32],) {
  %216 = @func_4229() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16]) */;
  %217 = %216.0;
  (%217,)
}

def @func_5783() -> (Tensor[(6, 30), int32],) {
  %218 = @func_2923() /* ty=(Tensor[(6, 30), int32], Tensor[(6, 30), bool]) */;
  %219 = %218.0;
  (%219,)
}

def @func_3340() -> (float32, Tensor[(3, 6, 2), bool], Tensor[(6), int32], Tensor[(3, 6, 7), float64], Tensor[(126), float64], Tensor[(15, 4, 3), int16]) {
  %220 = cast(meta[relay.Constant][6] /* ty=Tensor[(6), int32] */, dtype="int32") /* ty=Tensor[(6), int32] */;
  %221 = reshape(%220, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), int32] */;
  %222 = cast(meta[relay.Constant][7] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %223 = reshape(%222, newshape=[3, 6, 7]) /* ty=Tensor[(3, 6, 7), float64] */;
  %224 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
  %225 = %224.0;
  %226 = cast(%225, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %227 = tan(%226) /* ty=Tensor[(15, 4, 3), float32] */;
  %228 = cast(%227, dtype="uint16") /* ty=Tensor[(15, 4, 3), uint16] */;
  %229 = cast(1.52752f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %230 = reshape(%228, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %231 = reshape(%229, newshape=[]) /* ty=float32 */;
  %232 = @func_1881(%230, %231) /* ty=(Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), float32], Tensor[(180), uint16], Tensor[(7, 6, 10), bool], float32) */;
  %233 = %232.2;
  %234 = cast(%233, dtype="int16") /* ty=Tensor[(180), int16] */;
  %235 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%227, dtype="int16") /* ty=Tensor[(15, 4, 3), int16] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %238 = @func_1330(%221) /* ty=Tensor[(3, 6, 2), bool] */;
  %239 = @func_893(%223) /* ty=Tensor[(3, 6, 7), float64] */;
  %240 = maximum(%236, %237) /* ty=Tensor[(15, 4, 3), int16] */;
  (1.52752f /* ty=float32 */, %238, meta[relay.Constant][6] /* ty=Tensor[(6), int32] */, %239, meta[relay.Constant][7] /* ty=Tensor[(126), float64] */, %240)
}

def @func_6050() -> (Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), float32]) {
  %241 = @func_5429() /* ty=Tensor[(15, 4, 3), bool] */;
  %242 = cast(%241, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %243 = asin(%242) /* ty=Tensor[(15, 4, 3), float32] */;
  %244 = cast(%243, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %245 = cast(%243, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %246 = atanh(%244) /* ty=Tensor[(15, 4, 3), float32] */;
  %247 = erf(%245) /* ty=Tensor[(15, 4, 3), float32] */;
  (%246, %247)
}

def @func_5736(%var_5712: Tensor[(10, 42), float32], %var_5728: Tensor[(240), bool], %var_5731: Tensor[(525), uint16]) -> (Tensor[(7, 15, 11), bool], Tensor[(15, 4, 3), int16], Tensor[(3, 6, 2), bool], Tensor[(6), int32], Tensor[(7, 15, 11), float32], Tensor[(7, 6, 10), int64], Tensor[(10, 42), float32], Tensor[(7, 15, 11), float64], Tensor[(4, 12, 5), float64], Tensor[(240), bool], Tensor[(525), uint32]) {
  %248 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 15, 11), float64] */, dtype="bool") /* ty=Tensor[(7, 15, 11), bool] */;
  %249 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(7, 15, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 15, 11), float64] */, dtype="bool") /* ty=Tensor[(7, 15, 11), bool] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %252 = @func_5124() /* ty=(Tensor[(15, 4, 3), int16], Tensor[(6, 30), uint64]) */;
  %253 = cast(meta[relay.Constant][10] /* ty=Tensor[(6), int32] */, dtype="int32") /* ty=Tensor[(6), int32] */;
  %254 = reshape(%253, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), int32] */;
  %255 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 15, 11), float64] */, dtype="bool") /* ty=Tensor[(7, 15, 11), bool] */;
  %256 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(7, 15, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 15, 11), float64] */, dtype="bool") /* ty=Tensor[(7, 15, 11), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %259 = equal(%257, %258) /* ty=Tensor[(7, 15, 11), bool] */;
  %260 = cast(%259, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
  %261 = cos(%260) /* ty=Tensor[(7, 15, 11), float64] */;
  %262 = cast(%261, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
  %263 = asin(%262) /* ty=Tensor[(7, 15, 11), float64] */;
  %264 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 15, 11), float64] */, dtype="float32") /* ty=Tensor[(7, 15, 11), float32] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%263, dtype="float32") /* ty=Tensor[(7, 15, 11), float32] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %268 = cast(meta[relay.Constant][11] /* ty=Tensor[(525), uint16] */, dtype="uint16") /* ty=Tensor[(525), uint16] */;
  %269 = cast(meta[relay.Constant][11] /* ty=Tensor[(525), uint16] */, dtype="uint16") /* ty=Tensor[(525), uint16] */;
  %270 = cast(%var_5712, dtype="float32") /* ty=Tensor[(10, 42), float32] */;
  %271 = reshape(%268, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), uint16] */;
  %272 = reshape(%269, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), uint16] */;
  %273 = reshape(%270, newshape=[420]) /* ty=Tensor[(420), float32] */;
  %274 = @func_4258(%271, %272, %273) /* ty=(Tensor[(7, 15, 5), bool], Tensor[(7, 6, 10), int64], Tensor[(420), float32], Tensor[(15, 4, 3), float32]) */;
  %275 = cast(%263, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
  %276 = sin(%275) /* ty=Tensor[(7, 15, 11), float64] */;
  %277 = cast(%276, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
  %278 = cast(%var_5728, dtype="bool") /* ty=Tensor[(240), bool] */;
  %279 = cast(%var_5728, dtype="bool") /* ty=Tensor[(240), bool] */;
  %280 = reshape(%278, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), bool] */;
  %281 = reshape(%279, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), bool] */;
  %282 = @func_4929(%280, %281) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), float32], Tensor[(4, 12, 5), float64], Tensor[(4, 12, 5), float32]) */;
  %283 = cast(%var_5731, dtype="uint32") /* ty=Tensor[(525), uint32] */;
  %284 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(525), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %285 = cast(meta[relay.Constant][11] /* ty=Tensor[(525), uint16] */, dtype="uint32") /* ty=Tensor[(525), uint32] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %287 = less(%250, %251) /* ty=Tensor[(7, 15, 11), bool] */;
  %288 = %252.0;
  %289 = @func_1330(%254) /* ty=Tensor[(3, 6, 2), bool] */;
  %290 = floor_divide(%266, %267) /* ty=Tensor[(7, 15, 11), float32] */;
  %291 = %274.1;
  %292 = tan(%277) /* ty=Tensor[(7, 15, 11), float64] */;
  %293 = %282.2;
  %294 = left_shift(%285, %286) /* ty=Tensor[(525), uint32] */;
  (%287, %288, %289, meta[relay.Constant][10] /* ty=Tensor[(6), int32] */, %290, %291, %var_5712, %292, %293, %var_5728, %294)
}

def @func_5188() -> (Tensor[(6, 30), uint16], Tensor[(6, 30), float64], Tensor[(1, 4, 6), float32], Tensor[(6, 4), float32]) {
  %295 = @func_2651() /* ty=Tensor[(6, 30), uint16] */;
  %296 = cast(%295, dtype="uint64") /* ty=Tensor[(6, 30), uint64] */;
  %297 = reshape(%296, newshape=[6, 30]) /* ty=Tensor[(6, 30), uint64] */;
  %298 = @func_4637(%297) /* ty=(Tensor[(6, 30), int32], Tensor[(6, 30), float64]) */;
  %299 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 4), float32] */;
  %300 = reshape(%299, newshape=[1, 4, 6]) /* ty=Tensor[(1, 4, 6), float32] */;
  %301 = %298.1;
  %302 = @func_3877(%300) /* ty=Tensor[(1, 4, 6), float32] */;
  (%295, %301, %302, meta[relay.Constant][12] /* ty=Tensor[(6, 4), float32] */)
}

def @func_2422(%var_2400: Tensor[(7, 1, 4), float32]) -> (Tensor[(7, ?, 4), int64],) {
  %303 = cast(%var_2400, dtype="float32") /* ty=Tensor[(7, 1, 4), float32] */;
  %304 = acos(%303) /* ty=Tensor[(7, 1, 4), float32] */;
  %305 = cast(%var_2400, dtype="int64") /* ty=Tensor[(7, 1, 4), int64] */;
  %306 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%304, dtype="int64") /* ty=Tensor[(7, 1, 4), int64] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %309 = maximum(%307, %308) /* ty=Tensor[(7, ?, 4), int64] */;
  (%309,)
}

def @func_5124() -> (Tensor[(15, 4, 3), int16], Tensor[(6, 30), uint64]) {
  %310 = @func_3435() /* ty=(Tensor[(7, 6, 10), float32], Tensor[(7, 6, 10), bool], Tensor[(15, 4, 3), int16], Tensor[(15, 4, 3), bool], Tensor[(10, 13, 3), float64], Tensor[(390), uint16]) */;
  %311 = %310.2;
  %312 = cast(%311, dtype="uint16") /* ty=Tensor[(15, 4, 3), uint16] */;
  %313 = reshape(%312, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %314 = @func_2210(%313) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), float32], Tensor[(6, 30), uint64], Tensor[(180), uint16]) */;
  %315 = %314.2;
  (%311, %315)
}

def @func_4970() -> (Tensor[(6, 30), uint16], Tensor[(6, 30), uint16]) {
  %316 = @func_4578() /* ty=(Tensor[(6, 30), uint16],) */;
  %317 = @func_4211() /* ty=(Tensor[(6, 30), uint16],) */;
  %318 = %316.0;
  %319 = %317.0;
  (%318, %319)
}

def @func_4578() -> (Tensor[(6, 30), uint16],) {
  %320 = @func_2476() /* ty=(Tensor[(6, 30), uint16],) */;
  %321 = %320.0;
  (%321,)
}

def @func_4211() -> (Tensor[(6, 30), uint16],) {
  %322 = @func_2651() /* ty=Tensor[(6, 30), uint16] */;
  (%322,)
}

def @func_5766(%var_5743: Tensor[(6, 9, 10), float32], %var_5744: Tensor[(6, 9, 10), float32]) -> (Tensor[(6, 9, 10), float32], Tensor[(6, 9, 10), int16]) {
  %323 = cast(%var_5744, dtype="float32") /* ty=Tensor[(6, 9, 10), float32] */;
  %324 = shape_of(%var_5743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%var_5743, dtype="float32") /* ty=Tensor[(6, 9, 10), float32] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %327 = cast(%var_5744, dtype="float32") /* ty=Tensor[(6, 9, 10), float32] */;
  %328 = log2(%327) /* ty=Tensor[(6, 9, 10), float32] */;
  %329 = cast(%var_5743, dtype="int16") /* ty=Tensor[(6, 9, 10), int16] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%328, dtype="int16") /* ty=Tensor[(6, 9, 10), int16] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %333 = power(%325, %326) /* ty=Tensor[(6, 9, 10), float32] */;
  %334 = bitwise_and(%331, %332) /* ty=Tensor[(6, 9, 10), int16] */;
  (%333, %334)
}

def @func_5219() -> Tensor[(6, 30), uint64] {
  %335 = @func_4608() /* ty=(Tensor[(6, 30), float32], Tensor[(6, 30), uint64]) */;
  %335.1
}

def @func_2852() -> (Tensor[(6, 30), float64], Tensor[(4, 5, 1), bool], float32) {
  %336 = @func_2543() /* ty=(Tensor[(6, 30), uint16],) */;
  %337 = %336.0;
  %338 = cast(%337, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %339 = cast(-1.55467f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %340 = reshape(%339, newshape=[]) /* ty=float32 */;
  %341 = cosh(%338) /* ty=Tensor[(6, 30), float64] */;
  %342 = @func_845(%340) /* ty=Tensor[(4, 5, 1), bool] */;
  (%341, %342, -1.55467f /* ty=float32 */)
}

def @func_3693(%var_3631: Tensor[(6, 30), uint16]) -> (Tensor[(6, 30), uint64], Tensor[(6, 1), int32], Tensor[(420), float32], float32, Tensor[(6, 30), float32], Tensor[(6, 30), int32], Tensor[(15, 4, 3), float32], Tensor[(6, 30), float32]) {
  %343 = @func_2651() /* ty=Tensor[(6, 30), uint16] */;
  %344 = cast(%343, dtype="uint16") /* ty=Tensor[(6, 30), uint16] */;
  %345 = reshape(%344, newshape=[6, 30]) /* ty=Tensor[(6, 30), uint16] */;
  %346 = cast(meta[relay.Constant][13] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %347 = cast(9.07386f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %348 = reshape(%346, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), float32] */;
  %349 = reshape(%347, newshape=[]) /* ty=float32 */;
  %350 = @func_1800(%348, %349) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(3, 6, 2), bool], Tensor[(6, 1), int32], Tensor[(4, 5, 1), bool], float32) */;
  %351 = cast(%var_3631, dtype="uint32") /* ty=Tensor[(6, 30), uint32] */;
  %352 = shape_of(%343, dtype="int32") /* ty=Tensor[(2), int32] */;
  %353 = cast(%343, dtype="uint32") /* ty=Tensor[(6, 30), uint32] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %355 = multiply(%353, %354) /* ty=Tensor[(6, 30), uint32] */;
  %356 = cast(%355, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %357 = sin(%356) /* ty=Tensor[(6, 30), float32] */;
  %358 = cast(%357, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %359 = cast(%var_3631, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %360 = rsqrt(%359) /* ty=Tensor[(6, 30), float64] */;
  %361 = cast(%var_3631, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(2), int32] */;
  %363 = cast(%360, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %365 = sqrt(%358) /* ty=Tensor[(6, 30), float32] */;
  %366 = cast(%365, dtype="uint16") /* ty=Tensor[(6, 30), uint16] */;
  %367 = cast(9.07386f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %368 = reshape(%366, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %369 = reshape(%367, newshape=[]) /* ty=float32 */;
  %370 = @func_1881(%368, %369) /* ty=(Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), float32], Tensor[(180), uint16], Tensor[(7, 6, 10), bool], float32) */;
  %371 = cast(%355, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %372 = shape_of(%357, dtype="int32") /* ty=Tensor[(2), int32] */;
  %373 = cast(%357, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %375 = @func_2096(%345) /* ty=Tensor[(6, 30), uint64] */;
  %376 = %350.2;
  %377 = minimum(%363, %364) /* ty=Tensor[(6, 30), int32] */;
  %378 = %370.1;
  %379 = floor_mod(%373, %374) /* ty=Tensor[(6, 30), float32] */;
  (%375, %376, meta[relay.Constant][13] /* ty=Tensor[(420), float32] */, 9.07386f /* ty=float32 */, %365, %377, %378, %379)
}

def @func_4608() -> (Tensor[(6, 30), float32], Tensor[(6, 30), uint64]) {
  %380 = @func_4018() /* ty=(Tensor[(6, 30), float32],) */;
  %381 = %380.0;
  %382 = cast(%381, dtype="uint16") /* ty=Tensor[(6, 30), uint16] */;
  %383 = reshape(%382, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %384 = @func_2210(%383) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), float32], Tensor[(6, 30), uint64], Tensor[(180), uint16]) */;
  %385 = %384.2;
  (%381, %385)
}

def @func_5429() -> Tensor[(15, 4, 3), bool] {
  %386 = @func_3554() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) */;
  %386.0
}

def @func_6293(%var_6278: Tensor[(4, 2, 12), float32]) -> (Tensor[(4, 2, 12), float32], Tensor[(15, 4, 3), bool]) {
  %387 = cast(%var_6278, dtype="float32") /* ty=Tensor[(4, 2, 12), float32] */;
  %388 = @func_3554() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) */;
  %389 = sigmoid(%387) /* ty=Tensor[(4, 2, 12), float32] */;
  %390 = %388.0;
  (%389, %390)
}

def @func_3246(%var_3231: Tensor[(10, 1, 15), int16]) -> (Tensor[(10, 6, 15), int16],) {
  %391 = cast(%var_3231, dtype="int16") /* ty=Tensor[(10, 1, 15), int16] */;
  %392 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 6, 15), int16] */, dtype="int16") /* ty=Tensor[(10, 6, 15), int16] */;
  %393 = right_shift(%391, %392) /* ty=Tensor[(10, 6, 15), int16] */;
  (%393,)
}

def @func_5872() -> Tensor[(6, 30), float64] {
  @func_3530() /* ty=Tensor[(6, 30), float64] */
}

def @func_1833(%var_1828: float32) -> (Tensor[(7, 6, 10), float64], Tensor[(3, 6, 2), bool], float32) {
  %394 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %395 = %394.0;
  %396 = cast(%395, dtype="float64") /* ty=Tensor[(7, 6, 10), float64] */;
  %397 = cast(%395, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %398 = cast(%var_1828, dtype="float32") /* ty=float32 */;
  %399 = reshape(%397, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), float32] */;
  %400 = reshape(%398, newshape=[]) /* ty=float32 */;
  %401 = @func_1800(%399, %400) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(3, 6, 2), bool], Tensor[(6, 1), int32], Tensor[(4, 5, 1), bool], float32) */;
  %402 = asin(%396) /* ty=Tensor[(7, 6, 10), float64] */;
  %403 = %401.1;
  (%402, %403, %var_1828)
}

def @func_2637(%var_2617: Tensor[(10, 13, 3), uint16], %var_2618: Tensor[(10, 13, 3), uint16]) -> (Tensor[(10, 13, 3), float64],) {
  %404 = cast(%var_2618, dtype="uint16") /* ty=Tensor[(10, 13, 3), uint16] */;
  %405 = shape_of(%var_2617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%var_2617, dtype="uint16") /* ty=Tensor[(10, 13, 3), uint16] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %408 = bitwise_or(%406, %407) /* ty=Tensor[(10, 13, 3), uint16] */;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(10, 13, 3), float64] */;
  %410 = atan(%409) /* ty=Tensor[(10, 13, 3), float64] */;
  (%410,)
}

def @func_3816() -> (Tensor[(15, 4, 3), bool],) {
  %411 = @func_3554() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) */;
  %412 = %411.0;
  (%412,)
}

def @func_893(%var_876: Tensor[(3, 6, 7), float64]) -> Tensor[(3, 6, 7), float64] {
  %413 = cast(%var_876, dtype="float64") /* ty=Tensor[(3, 6, 7), float64] */;
  cosh(%413) /* ty=Tensor[(3, 6, 7), float64] */
}

def @func_4067(%var_4051: Tensor[(15, 4, 3), float32]) -> (Tensor[(15, 4, 3), bool], Tensor[(6, 30), float32]) {
  %414 = @func_2079() /* ty=(Tensor[(15, 4, 3), float32],) */;
  %415 = %414.0;
  %416 = cast(%var_4051, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %417 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%415, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = @func_4018() /* ty=(Tensor[(6, 30), float32],) */;
  %421 = less_equal(%418, %419) /* ty=Tensor[(15, 4, 3), bool] */;
  %422 = %420.0;
  (%421, %422)
}

def @func_2357(%var_2318: Tensor[(180), uint16], %var_2319: float32) -> (Tensor[(7, 6, 10), float32], float32, Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), bool], Tensor[(8, 2, 10), float64], Tensor[(160), float64], Tensor[(180), uint16]) {
  %423 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %424 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %425 = cast(%var_2318, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %426 = cast(%var_2319, dtype="float32") /* ty=float32 */;
  %427 = reshape(%425, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %428 = reshape(%426, newshape=[]) /* ty=float32 */;
  %429 = @func_1881(%427, %428) /* ty=(Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), float32], Tensor[(180), uint16], Tensor[(7, 6, 10), bool], float32) */;
  %430 = %429.1;
  %431 = cast(%var_2318, dtype="bool") /* ty=Tensor[(180), bool] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %435 = cast(meta[relay.Constant][15] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %436 = reshape(%435, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), float64] */;
  %437 = @func_1107(%436) /* ty=(Tensor[(8, 2, 10), float64], Tensor[(5, 3, ?), float64], Tensor[(240), float64]) */;
  %438 = less(%433, %434) /* ty=Tensor[(15, 4, 3), bool] */;
  %439 = cast(%438, dtype="uint16") /* ty=Tensor[(15, 4, 3), uint16] */;
  %440 = cast(%var_2319, dtype="float32") /* ty=float32 */;
  %441 = reshape(%439, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %442 = reshape(%440, newshape=[]) /* ty=float32 */;
  %443 = @func_1881(%441, %442) /* ty=(Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), float32], Tensor[(180), uint16], Tensor[(7, 6, 10), bool], float32) */;
  %444 = %423.0;
  %445 = %424.0;
  %446 = %437.0;
  %447 = %443.2;
  (%444, %var_2319, %445, %438, %446, meta[relay.Constant][15] /* ty=Tensor[(160), float64] */, %447)
}

def @func_6273() -> (Tensor[(6, 30), uint16],) {
  %448 = @func_3554() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) */;
  %449 = %448.1;
  (%449,)
}

def @func_6135() -> Tensor[(6, 30), float64] {
  @func_3530() /* ty=Tensor[(6, 30), float64] */
}

def @func_1050(%var_1019: Tensor[(15, 4, 3), uint16], %var_1020: Tensor[(15, 4, 3), uint16]) -> (Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), bool]) {
  %450 = cast(%var_1019, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %451 = cast(%var_1020, dtype="uint16") /* ty=Tensor[(15, 4, 3), uint16] */;
  %452 = shape_of(%var_1019, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%var_1019, dtype="uint16") /* ty=Tensor[(15, 4, 3), uint16] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %455 = left_shift(%453, %454) /* ty=Tensor[(15, 4, 3), uint16] */;
  %456 = cast(%var_1020, dtype="float64") /* ty=Tensor[(15, 4, 3), float64] */;
  %457 = sigmoid(%456) /* ty=Tensor[(15, 4, 3), float64] */;
  %458 = cast(%457, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %459 = shape_of(%var_1020, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%var_1020, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %462 = greater_equal(%460, %461) /* ty=Tensor[(15, 4, 3), bool] */;
  %463 = cast(%462, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %464 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%455, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %467 = log2(%450) /* ty=Tensor[(15, 4, 3), float32] */;
  %468 = greater(%465, %466) /* ty=Tensor[(15, 4, 3), bool] */;
  (%467, %468)
}

def @func_2096(%var_2091: Tensor[(6, 30), uint16]) -> Tensor[(6, 30), uint64] {
  %469 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
  %470 = %469.1;
  %471 = cast(%var_2091, dtype="uint64") /* ty=Tensor[(6, 30), uint64] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(2), int32] */;
  %473 = cast(%470, dtype="uint64") /* ty=Tensor[(6, 30), uint64] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  left_shift(%473, %474) /* ty=Tensor[(6, 30), uint64] */
}

def @func_3111(%var_3067: Tensor[(10, 9, 14), bool]) -> (Tensor[(10, 9, 14), bool], Tensor[(6, 30), uint16], Tensor[(15, 4, 3), bool]) {
  %475 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 1, 14), bool] */, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
  %476 = cast(%var_3067, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
  %477 = @func_2543() /* ty=(Tensor[(6, 30), uint16],) */;
  %478 = %477.0;
  %479 = cast(%478, dtype="uint16") /* ty=Tensor[(6, 30), uint16] */;
  %480 = cast(%478, dtype="uint16") /* ty=Tensor[(6, 30), uint16] */;
  %481 = reshape(%479, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
  %482 = reshape(%480, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
  %483 = @func_1050(%481, %482) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), bool]) */;
  %484 = logical_or(%475, %476) /* ty=Tensor[(10, 9, 14), bool] */;
  %485 = %483.1;
  (%484, %478, %485)
}

def @func_1800(%var_1778: Tensor[(7, 6, 10), float32], %var_1794: float32) -> (Tensor[(7, 6, 10), bool], Tensor[(3, 6, 2), bool], Tensor[(6, 1), int32], Tensor[(4, 5, 1), bool], float32) {
  %486 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %487 = %486.0;
  %488 = cast(%var_1778, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%487, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %492 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 1), int32] */, dtype="int32") /* ty=Tensor[(6, 1), int32] */;
  %493 = reshape(%492, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), int32] */;
  %494 = cast(%var_1794, dtype="float32") /* ty=float32 */;
  %495 = reshape(%494, newshape=[]) /* ty=float32 */;
  %496 = equal(%490, %491) /* ty=Tensor[(7, 6, 10), bool] */;
  %497 = @func_1330(%493) /* ty=Tensor[(3, 6, 2), bool] */;
  %498 = @func_845(%495) /* ty=Tensor[(4, 5, 1), bool] */;
  (%496, %497, meta[relay.Constant][17] /* ty=Tensor[(6, 1), int32] */, %498, %var_1794)
}

def @func_4531(%var_4524: Tensor[(160), float64], %var_4525: Tensor[(420), float32]) -> (Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool], Tensor[(160), float64], Tensor[(420), float32]) {
  %499 = @func_4229() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16]) */;
  %500 = cast(%var_4524, dtype="float64") /* ty=Tensor[(160), float64] */;
  %501 = cast(%var_4525, dtype="float32") /* ty=Tensor[(420), float32] */;
  %502 = reshape(%500, newshape=[16, 10]) /* ty=Tensor[(16, 10), float64] */;
  %503 = reshape(%501, newshape=[420]) /* ty=Tensor[(420), float32] */;
  %504 = @func_4322(%502, %503) /* ty=(Tensor[(6, 30), uint16], Tensor[(15, 4, 3), bool], Tensor[(8, 2, 10), float64], Tensor[(16, 10), float64], Tensor[(7, 6, 10), bool], Tensor[(420), float32]) */;
  %505 = %499.1;
  %506 = %504.4;
  (%505, %506, %var_4524, %var_4525)
}

def @func_1330(%var_1308: Tensor[(3, 1, 2), int32]) -> Tensor[(3, 6, 2), bool] {
  %507 = cast(%var_1308, dtype="bool") /* ty=Tensor[(3, 1, 2), bool] */;
  %508 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 6, 2), int32] */, dtype="bool") /* ty=Tensor[(3, 6, 2), bool] */;
  less_equal(%507, %508) /* ty=Tensor[(3, 6, 2), bool] */
}

def @func_4258(%var_4231: Tensor[(7, 15, 5), uint16], %var_4232: Tensor[(7, 15, 5), uint16], %var_4240: Tensor[(420), float32]) -> (Tensor[(7, 15, 5), bool], Tensor[(7, 6, 10), int64], Tensor[(420), float32], Tensor[(15, 4, 3), float32]) {
  %509 = cast(%var_4232, dtype="bool") /* ty=Tensor[(7, 15, 5), bool] */;
  %510 = shape_of(%var_4231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%var_4231, dtype="bool") /* ty=Tensor[(7, 15, 5), bool] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %513 = cast(%var_4240, dtype="float32") /* ty=Tensor[(420), float32] */;
  %514 = reshape(%513, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), float32] */;
  %515 = @func_4200(%514) /* ty=(Tensor[(7, 6, 10), int64],) */;
  %516 = @func_4229() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16]) */;
  %517 = greater_equal(%511, %512) /* ty=Tensor[(7, 15, 5), bool] */;
  %518 = %515.0;
  %519 = %516.0;
  (%517, %518, %var_4240, %519)
}

def @func_2651() -> Tensor[(6, 30), uint16] {
  %520 = @func_2543() /* ty=(Tensor[(6, 30), uint16],) */;
  %520.0
}

def @func_1714() -> (Tensor[(7, 6, 10), float32],) {
  %521 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %522 = cos(%521) /* ty=Tensor[(7, 6, 10), float32] */;
  (%522,)
}

def @func_3530() -> Tensor[(6, 30), float64] {
  %523 = @func_2852() /* ty=(Tensor[(6, 30), float64], Tensor[(4, 5, 1), bool], float32) */;
  %523.0
}

def @func_3783(%var_3769: Tensor[(6, 30), uint16]) -> (Tensor[(10, 13, 3), float64], Tensor[(6, 30), float32]) {
  %524 = @func_3435() /* ty=(Tensor[(7, 6, 10), float32], Tensor[(7, 6, 10), bool], Tensor[(15, 4, 3), int16], Tensor[(15, 4, 3), bool], Tensor[(10, 13, 3), float64], Tensor[(390), uint16]) */;
  %525 = @func_2476() /* ty=(Tensor[(6, 30), uint16],) */;
  %526 = %525.0;
  %527 = cast(%var_3769, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %528 = shape_of(%526, dtype="int32") /* ty=Tensor[(2), int32] */;
  %529 = cast(%526, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %531 = divide(%529, %530) /* ty=Tensor[(6, 30), float32] */;
  %532 = cast(%531, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %533 = %524.4;
  %534 = erf(%532) /* ty=Tensor[(6, 30), float32] */;
  (%533, %534)
}

def @func_4229() -> (Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16]) {
  %535 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
  %536 = %535.0;
  %537 = @func_2651() /* ty=Tensor[(6, 30), uint16] */;
  (%536, %537)
}

def @func_4838() -> (Tensor[(7, 6, 10), float32],) {
  %538 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %539 = %538.0;
  (%539,)
}

def @func_3435() -> (Tensor[(7, 6, 10), float32], Tensor[(7, 6, 10), bool], Tensor[(15, 4, 3), int16], Tensor[(15, 4, 3), bool], Tensor[(10, 13, 3), float64], Tensor[(390), uint16]) {
  %540 = @func_2866() /* ty=Tensor[(7, 6, 10), float32] */;
  %541 = cast(%540, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %542 = reshape(%541, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), float32] */;
  %543 = @func_3195(%542) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), bool]) */;
  %544 = @func_3340() /* ty=(float32, Tensor[(3, 6, 2), bool], Tensor[(6), int32], Tensor[(3, 6, 7), float64], Tensor[(126), float64], Tensor[(15, 4, 3), int16]) */;
  %545 = %544.5;
  %546 = cast(%545, dtype="uint16") /* ty=Tensor[(15, 4, 3), uint16] */;
  %547 = cast(%545, dtype="uint16") /* ty=Tensor[(15, 4, 3), uint16] */;
  %548 = reshape(%546, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
  %549 = reshape(%547, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
  %550 = @func_1050(%548, %549) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), bool]) */;
  %551 = cast(meta[relay.Constant][20] /* ty=Tensor[(390), uint16] */, dtype="uint16") /* ty=Tensor[(390), uint16] */;
  %552 = cast(meta[relay.Constant][20] /* ty=Tensor[(390), uint16] */, dtype="uint16") /* ty=Tensor[(390), uint16] */;
  %553 = reshape(%551, newshape=[10, 13, 3]) /* ty=Tensor[(10, 13, 3), uint16] */;
  %554 = reshape(%552, newshape=[10, 13, 3]) /* ty=Tensor[(10, 13, 3), uint16] */;
  %555 = @func_2637(%553, %554) /* ty=(Tensor[(10, 13, 3), float64],) */;
  %556 = %543.1;
  %557 = %550.1;
  %558 = %555.0;
  (%540, %556, %545, %557, %558, meta[relay.Constant][20] /* ty=Tensor[(390), uint16] */)
}

def @func_4637(%var_4620: Tensor[(6, 30), uint64]) -> (Tensor[(6, 30), int32], Tensor[(6, 30), float64]) {
  %559 = @func_4608() /* ty=(Tensor[(6, 30), float32], Tensor[(6, 30), uint64]) */;
  %560 = %559.1;
  %561 = cast(%var_4620, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %562 = shape_of(%560, dtype="int32") /* ty=Tensor[(2), int32] */;
  %563 = cast(%560, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %565 = bitwise_and(%563, %564) /* ty=Tensor[(6, 30), int32] */;
  %566 = cast(%565, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %567 = shape_of(%560, dtype="int32") /* ty=Tensor[(2), int32] */;
  %568 = cast(%560, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %570 = cast(%var_4620, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %571 = bitwise_xor(%568, %569) /* ty=Tensor[(6, 30), int32] */;
  %572 = atanh(%570) /* ty=Tensor[(6, 30), float64] */;
  (%571, %572)
}

def @func_4390() -> Tensor[(15, 4, 3), float64] {
  %573 = @func_2079() /* ty=(Tensor[(15, 4, 3), float32],) */;
  %574 = %573.0;
  %575 = cast(%574, dtype="float64") /* ty=Tensor[(15, 4, 3), float64] */;
  acos(%575) /* ty=Tensor[(15, 4, 3), float64] */
}

def @func_2006() -> (Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) {
  %576 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 30), uint16] */, dtype="uint16") /* ty=Tensor[(6, 30), uint16] */;
  %577 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 30), uint16] */, dtype="uint16") /* ty=Tensor[(6, 30), uint16] */;
  %578 = reshape(%576, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
  %579 = reshape(%577, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
  %580 = @func_1050(%578, %579) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), bool]) */;
  %581 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %582 = %581.0;
  %583 = cast(%582, dtype="float64") /* ty=Tensor[(7, 6, 10), float64] */;
  %584 = acosh(%583) /* ty=Tensor[(7, 6, 10), float64] */;
  %585 = cast(%584, dtype="float64") /* ty=Tensor[(7, 6, 10), float64] */;
  %586 = atan(%585) /* ty=Tensor[(7, 6, 10), float64] */;
  %587 = cast(%584, dtype="float64") /* ty=Tensor[(7, 6, 10), float64] */;
  %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%586, dtype="float64") /* ty=Tensor[(7, 6, 10), float64] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %591 = mod(%589, %590) /* ty=Tensor[(7, 6, 10), float64] */;
  %592 = cast(%591, dtype="int64") /* ty=Tensor[(7, 6, 10), int64] */;
  %593 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%584, dtype="int64") /* ty=Tensor[(7, 6, 10), int64] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %596 = add(%594, %595) /* ty=Tensor[(7, 6, 10), int64] */;
  %597 = cast(%591, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%596, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %601 = %580.0;
  %602 = greater(%599, %600) /* ty=Tensor[(7, 6, 10), bool] */;
  (%601, meta[relay.Constant][21] /* ty=Tensor[(6, 30), uint16] */, %602)
}

def @func_6211(%var_6201: Tensor[(6, 30), uint16]) -> (Tensor[(6, 30), bool],) {
  %603 = @func_4229() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16]) */;
  %604 = %603.1;
  %605 = cast(%var_6201, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(2), int32] */;
  %607 = cast(%604, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %609 = not_equal(%607, %608) /* ty=Tensor[(6, 30), bool] */;
  (%609,)
}

def @func_3571(%var_3560: Tensor[(11, 16, 16), int32], %var_3561: Tensor[(11, 16, 16), int32]) -> (Tensor[(11, 16, 16), int32], Tensor[(3, 6, 7), float64]) {
  %610 = cast(%var_3561, dtype="int32") /* ty=Tensor[(11, 16, 16), int32] */;
  %611 = shape_of(%var_3560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(%var_3560, dtype="int32") /* ty=Tensor[(11, 16, 16), int32] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %614 = @func_3340() /* ty=(float32, Tensor[(3, 6, 2), bool], Tensor[(6), int32], Tensor[(3, 6, 7), float64], Tensor[(126), float64], Tensor[(15, 4, 3), int16]) */;
  %615 = left_shift(%612, %613) /* ty=Tensor[(11, 16, 16), int32] */;
  %616 = %614.3;
  (%615, %616)
}

def @func_2079() -> (Tensor[(15, 4, 3), float32],) {
  %617 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
  %618 = %617.0;
  (%618,)
}

def @func_5070(%var_5029: Tensor[(420), float32], %var_5067: float32) -> (Tensor[(7, 6, 10), bool], Tensor[(420), float32], Tensor[(?, 7, 13), float32], Tensor[(1, 7, 13), float32], Tensor[(4, 5, 1), bool], float32) {
  %619 = cast(%var_5029, dtype="float32") /* ty=Tensor[(420), float32] */;
  %620 = reshape(%619, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), float32] */;
  %621 = @func_3195(%620) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), bool]) */;
  %622 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 7, 13), float64] */, dtype="float64") /* ty=Tensor[(1, 7, 13), float64] */;
  %623 = cosh(%622) /* ty=Tensor[(1, 7, 13), float64] */;
  %624 = cast(%623, dtype="float64") /* ty=Tensor[(1, 7, 13), float64] */;
  %625 = log10(%624) /* ty=Tensor[(1, 7, 13), float64] */;
  %626 = cast(%625, dtype="float32") /* ty=Tensor[(1, 7, 13), float32] */;
  %627 = asinh(%626) /* ty=Tensor[(1, 7, 13), float32] */;
  %628 = cast(%623, dtype="bool") /* ty=Tensor[(1, 7, 13), bool] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="bool") /* ty=Tensor[(1, 7, 13), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %632 = less(%630, %631) /* ty=Tensor[(?, 7, 13), bool] */;
  %633 = cast(%632, dtype="float32") /* ty=Tensor[(?, 7, 13), float32] */;
  %634 = cast(%627, dtype="float32") /* ty=Tensor[(1, 7, 13), float32] */;
  %635 = cast(%var_5067, dtype="float32") /* ty=float32 */;
  %636 = reshape(%635, newshape=[]) /* ty=float32 */;
  %637 = %621.0;
  %638 = acosh(%633) /* ty=Tensor[(?, 7, 13), float32] */;
  %639 = asin(%634) /* ty=Tensor[(1, 7, 13), float32] */;
  %640 = @func_845(%636) /* ty=Tensor[(4, 5, 1), bool] */;
  (%637, %var_5029, %638, %639, %640, %var_5067)
}

def @func_2543() -> (Tensor[(6, 30), uint16],) {
  %641 = @func_2476() /* ty=(Tensor[(6, 30), uint16],) */;
  %642 = %641.0;
  (%642,)
}

def @func_4018() -> (Tensor[(6, 30), float32],) {
  %643 = @func_2923() /* ty=(Tensor[(6, 30), int32], Tensor[(6, 30), bool]) */;
  %644 = %643.0;
  %645 = cast(%644, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %646 = asinh(%645) /* ty=Tensor[(6, 30), float32] */;
  (%646,)
}

def @func_5975() -> Tensor[(7, 6, 10), float32] {
  %647 = @func_5012() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %647.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4230() -> (Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16]) {
  %3 = fn () -> (Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16]) {
    %0 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
    %1 = %0.0;
    %2 = @func_2651() /* ty=Tensor[(6, 30), uint16] */;
    (%1, %2)
  };
  %3() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16]) */
}

def @func_5785() -> (Tensor[(6, 30), int32],) {
  @func_5783() /* ty=(Tensor[(6, 30), int32],) */
}

def @func_2835(%var_2833: Tensor[(12, 1, 8), float64]) -> (Tensor[(12, 1, 8), float64],) {
  @func_2832(%var_2833) /* ty=(Tensor[(12, 1, 8), float64],) */
}

def @func_3054(%var_3053: Tensor[(6, 30), uint16]) -> Tensor[(6, 30), float64] {
  %10 = fn (%var_3044: Tensor[(6, 30), uint16]) -> Tensor[(6, 30), float64] {
    %4 = @func_2773() /* ty=(Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
    %5 = %4.0;
    %6 = cast(%var_3044, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
    %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(2), int32] */;
    %8 = cast(%5, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    floor_divide(%8, %9) /* ty=Tensor[(6, 30), float64] */
  };
  %10(%var_3053) /* ty=Tensor[(6, 30), float64] */
}

def @func_4932(%var_4930: Tensor[(4, 12, 5), bool], %var_4931: Tensor[(4, 12, 5), bool]) -> (Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), float32], Tensor[(4, 12, 5), float64], Tensor[(4, 12, 5), float32]) {
  %22 = fn (%var_4873: Tensor[(4, 12, 5), bool], %var_4874: Tensor[(4, 12, 5), bool]) -> (Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), float32], Tensor[(4, 12, 5), float64], Tensor[(4, 12, 5), float32]) {
    %11 = cast(%var_4874, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
    %12 = shape_of(%var_4873, dtype="int32") /* ty=Tensor[(3), int32] */;
    %13 = cast(%var_4873, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
    %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %15 = cast(%var_4874, dtype="float32") /* ty=Tensor[(4, 12, 5), float32] */;
    %16 = cast(%var_4874, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
    %17 = cast(%var_4873, dtype="float32") /* ty=Tensor[(4, 12, 5), float32] */;
    %18 = logical_or(%13, %14) /* ty=Tensor[(4, 12, 5), bool] */;
    %19 = asinh(%15) /* ty=Tensor[(4, 12, 5), float32] */;
    %20 = cosh(%16) /* ty=Tensor[(4, 12, 5), float64] */;
    %21 = exp(%17) /* ty=Tensor[(4, 12, 5), float32] */;
    (%18, %19, %20, %21)
  };
  %22(%var_4930, %var_4931) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), float32], Tensor[(4, 12, 5), float64], Tensor[(4, 12, 5), float32]) */
}

def @func_2923() -> (Tensor[(6, 30), int32], Tensor[(6, 30), bool]) {
  %23 = @func_2651() /* ty=Tensor[(6, 30), uint16] */;
  %24 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 30), uint16] */, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(2), int32] */;
  %26 = cast(%23, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %28 = cast(%23, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %29 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(6, 30), uint16] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %30 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 30), uint16] */, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %32 = right_shift(%26, %27) /* ty=Tensor[(6, 30), int32] */;
  %33 = logical_and(%30, %31) /* ty=Tensor[(6, 30), bool] */;
  (%32, %33)
}

def @func_5845() -> Tensor[(6, 30), float64] {
  %34 = @func_5443() /* ty=(Tensor[(6, 30), uint16],) */;
  %35 = %34.0;
  %36 = cast(%35, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  log(%36) /* ty=Tensor[(6, 30), float64] */
}

def @func_6050() -> (Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), float32]) {
  %37 = @func_5429() /* ty=Tensor[(15, 4, 3), bool] */;
  %38 = cast(%37, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %39 = asin(%38) /* ty=Tensor[(15, 4, 3), float32] */;
  %40 = cast(%39, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %41 = cast(%39, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %42 = atanh(%40) /* ty=Tensor[(15, 4, 3), float32] */;
  %43 = erf(%41) /* ty=Tensor[(15, 4, 3), float32] */;
  (%42, %43)
}

def @func_6273() -> (Tensor[(6, 30), uint16],) {
  %44 = @func_3554() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) */;
  %45 = %44.1;
  (%45,)
}

def @func_2832(%var_2821: Tensor[(12, 1, 8), float64]) -> (Tensor[(12, 1, 8), float64],) {
  %46 = cast(%var_2821, dtype="float64") /* ty=Tensor[(12, 1, 8), float64] */;
  %47 = sinh(%46) /* ty=Tensor[(12, 1, 8), float64] */;
  (%47,)
}

def @func_3531() -> Tensor[(6, 30), float64] {
  %49 = fn () -> Tensor[(6, 30), float64] {
    %48 = @func_2852() /* ty=(Tensor[(6, 30), float64], Tensor[(4, 5, 1), bool], float32) */;
    %48.0
  };
  %49() /* ty=Tensor[(6, 30), float64] */
}

def @func_1109(%var_1108: Tensor[(8, 2, 10), float64]) -> (Tensor[(8, 2, 10), float64], Tensor[(5, 3, ?), float64], Tensor[(240), float64]) {
  %56 = fn (%var_1081: Tensor[(8, 2, 10), float64]) -> (Tensor[(8, 2, 10), float64], Tensor[(5, 3, ?), float64], Tensor[(240), float64]) {
    %50 = cast(%var_1081, dtype="float64") /* ty=Tensor[(8, 2, 10), float64] */;
    %51 = cast(meta[relay.Constant][1] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %52 = reshape(%51, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), float64] */;
    %53 = @func_244(%52) /* ty=(Tensor[(5, 3, ?), float64], Tensor[(5, 3, 16), float64]) */;
    %54 = asinh(%50) /* ty=Tensor[(8, 2, 10), float64] */;
    %55 = %53.0;
    (%54, %55, meta[relay.Constant][1] /* ty=Tensor[(240), float64] */)
  };
  %56(%var_1108) /* ty=(Tensor[(8, 2, 10), float64], Tensor[(5, 3, ?), float64], Tensor[(240), float64]) */
}

def @func_4609() -> (Tensor[(6, 30), float32], Tensor[(6, 30), uint64]) {
  %63 = fn () -> (Tensor[(6, 30), float32], Tensor[(6, 30), uint64]) {
    %57 = @func_4018() /* ty=(Tensor[(6, 30), float32],) */;
    %58 = %57.0;
    %59 = cast(%58, dtype="uint16") /* ty=Tensor[(6, 30), uint16] */;
    %60 = reshape(%59, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %61 = @func_2210(%60) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), float32], Tensor[(6, 30), uint64], Tensor[(180), uint16]) */;
    %62 = %61.2;
    (%58, %62)
  };
  %63() /* ty=(Tensor[(6, 30), float32], Tensor[(6, 30), uint64]) */
}

def @func_5315(%var_5313: Tensor[(11, 3, 7), uint32], %var_5314: Tensor[(6, 30), uint16]) -> (Tensor[(11, 3, 7), uint32], Tensor[(6, 30), float32], Tensor[(6, 30), uint64], Tensor[(6, 30), uint16]) {
  %80 = fn (%var_5230: Tensor[(11, 3, 7), uint32], %var_5270: Tensor[(6, 30), uint16]) -> (Tensor[(11, 3, 7), uint32], Tensor[(6, 30), float32], Tensor[(6, 30), uint64], Tensor[(6, 30), uint16]) {
    %64 = cast(%var_5230, dtype="uint32") /* ty=Tensor[(11, 3, 7), uint32] */;
    %65 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(11, 3, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %66 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 3, 7), uint32] */, dtype="uint32") /* ty=Tensor[(11, 3, 7), uint32] */;
    %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %68 = @func_4018() /* ty=(Tensor[(6, 30), float32],) */;
    %69 = @func_4578() /* ty=(Tensor[(6, 30), uint16],) */;
    %70 = %69.0;
    %71 = cast(%var_5270, dtype="uint64") /* ty=Tensor[(6, 30), uint64] */;
    %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(2), int32] */;
    %73 = cast(%70, dtype="uint64") /* ty=Tensor[(6, 30), uint64] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %75 = @func_2543() /* ty=(Tensor[(6, 30), uint16],) */;
    %76 = maximum(%66, %67) /* ty=Tensor[(11, 3, 7), uint32] */;
    %77 = %68.0;
    %78 = bitwise_or(%73, %74) /* ty=Tensor[(6, 30), uint64] */;
    %79 = %75.0;
    (%76, %77, %78, %79)
  };
  %80(%var_5313, %var_5314) /* ty=(Tensor[(11, 3, 7), uint32], Tensor[(6, 30), float32], Tensor[(6, 30), uint64], Tensor[(6, 30), uint16]) */
}

def @func_5411() -> (Tensor[(6, 30), uint16],) {
  %83 = fn () -> (Tensor[(6, 30), uint16],) {
    %81 = @func_4229() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16]) */;
    %82 = %81.1;
    (%82,)
  };
  %83() /* ty=(Tensor[(6, 30), uint16],) */
}

def @func_5444() -> (Tensor[(6, 30), uint16],) {
  %86 = fn () -> (Tensor[(6, 30), uint16],) {
    %84 = @func_2543() /* ty=(Tensor[(6, 30), uint16],) */;
    %85 = %84.0;
    (%85,)
  };
  %86() /* ty=(Tensor[(6, 30), uint16],) */
}

def @func_4640(%var_4638: Tensor[(6, 30), uint64]) -> (Tensor[(6, 30), int32], Tensor[(6, 30), float64]) {
  @func_4637(%var_4638) /* ty=(Tensor[(6, 30), int32], Tensor[(6, 30), float64]) */
}

def @func_5431() -> Tensor[(15, 4, 3), bool] {
  @func_5429() /* ty=Tensor[(15, 4, 3), bool] */
}

def @func_3436() -> (Tensor[(7, 6, 10), float32], Tensor[(7, 6, 10), bool], Tensor[(15, 4, 3), int16], Tensor[(15, 4, 3), bool], Tensor[(10, 13, 3), float64], Tensor[(390), uint16]) {
  %106 = fn () -> (Tensor[(7, 6, 10), float32], Tensor[(7, 6, 10), bool], Tensor[(15, 4, 3), int16], Tensor[(15, 4, 3), bool], Tensor[(10, 13, 3), float64], Tensor[(390), uint16]) {
    %87 = @func_2866() /* ty=Tensor[(7, 6, 10), float32] */;
    %88 = cast(%87, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
    %89 = reshape(%88, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), float32] */;
    %90 = @func_3195(%89) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), bool]) */;
    %91 = @func_3340() /* ty=(float32, Tensor[(3, 6, 2), bool], Tensor[(6), int32], Tensor[(3, 6, 7), float64], Tensor[(126), float64], Tensor[(15, 4, 3), int16]) */;
    %92 = %91.5;
    %93 = cast(%92, dtype="uint16") /* ty=Tensor[(15, 4, 3), uint16] */;
    %94 = cast(%92, dtype="uint16") /* ty=Tensor[(15, 4, 3), uint16] */;
    %95 = reshape(%93, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
    %96 = reshape(%94, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
    %97 = @func_1050(%95, %96) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), bool]) */;
    %98 = cast(meta[relay.Constant][3] /* ty=Tensor[(390), uint16] */, dtype="uint16") /* ty=Tensor[(390), uint16] */;
    %99 = cast(meta[relay.Constant][3] /* ty=Tensor[(390), uint16] */, dtype="uint16") /* ty=Tensor[(390), uint16] */;
    %100 = reshape(%98, newshape=[10, 13, 3]) /* ty=Tensor[(10, 13, 3), uint16] */;
    %101 = reshape(%99, newshape=[10, 13, 3]) /* ty=Tensor[(10, 13, 3), uint16] */;
    %102 = @func_2637(%100, %101) /* ty=(Tensor[(10, 13, 3), float64],) */;
    %103 = %90.1;
    %104 = %97.1;
    %105 = %102.0;
    (%87, %103, %92, %104, %105, meta[relay.Constant][3] /* ty=Tensor[(390), uint16] */)
  };
  %106() /* ty=(Tensor[(7, 6, 10), float32], Tensor[(7, 6, 10), bool], Tensor[(15, 4, 3), int16], Tensor[(15, 4, 3), bool], Tensor[(10, 13, 3), float64], Tensor[(390), uint16]) */
}

def @func_5220() -> Tensor[(6, 30), uint64] {
  %108 = fn () -> Tensor[(6, 30), uint64] {
    %107 = @func_4608() /* ty=(Tensor[(6, 30), float32], Tensor[(6, 30), uint64]) */;
    %107.1
  };
  %108() /* ty=Tensor[(6, 30), uint64] */
}

def @func_3571(%var_3560: Tensor[(11, 16, 16), int32], %var_3561: Tensor[(11, 16, 16), int32]) -> (Tensor[(11, 16, 16), int32], Tensor[(3, 6, 7), float64]) {
  %109 = cast(%var_3561, dtype="int32") /* ty=Tensor[(11, 16, 16), int32] */;
  %110 = shape_of(%var_3560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%var_3560, dtype="int32") /* ty=Tensor[(11, 16, 16), int32] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %113 = @func_3340() /* ty=(float32, Tensor[(3, 6, 2), bool], Tensor[(6), int32], Tensor[(3, 6, 7), float64], Tensor[(126), float64], Tensor[(15, 4, 3), int16]) */;
  %114 = left_shift(%111, %112) /* ty=Tensor[(11, 16, 16), int32] */;
  %115 = %113.3;
  (%114, %115)
}

def @func_6275() -> (Tensor[(6, 30), uint16],) {
  @func_6273() /* ty=(Tensor[(6, 30), uint16],) */
}

def @func_6296(%var_6294: Tensor[(4, 2, 12), float32]) -> (Tensor[(4, 2, 12), float32], Tensor[(15, 4, 3), bool]) {
  @func_6293(%var_6294) /* ty=(Tensor[(4, 2, 12), float32], Tensor[(15, 4, 3), bool]) */
}

def @func_2477() -> (Tensor[(6, 30), uint16],) {
  %118 = fn () -> (Tensor[(6, 30), uint16],) {
    %116 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
    %117 = %116.1;
    (%117,)
  };
  %118() /* ty=(Tensor[(6, 30), uint16],) */
}

def @func_5189() -> (Tensor[(6, 30), uint16], Tensor[(6, 30), float64], Tensor[(1, 4, 6), float32], Tensor[(6, 4), float32]) {
  %127 = fn () -> (Tensor[(6, 30), uint16], Tensor[(6, 30), float64], Tensor[(1, 4, 6), float32], Tensor[(6, 4), float32]) {
    %119 = @func_2651() /* ty=Tensor[(6, 30), uint16] */;
    %120 = cast(%119, dtype="uint64") /* ty=Tensor[(6, 30), uint64] */;
    %121 = reshape(%120, newshape=[6, 30]) /* ty=Tensor[(6, 30), uint64] */;
    %122 = @func_4637(%121) /* ty=(Tensor[(6, 30), int32], Tensor[(6, 30), float64]) */;
    %123 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 4), float32] */, dtype="float32") /* ty=Tensor[(6, 4), float32] */;
    %124 = reshape(%123, newshape=[1, 4, 6]) /* ty=Tensor[(1, 4, 6), float32] */;
    %125 = %122.1;
    %126 = @func_3877(%124) /* ty=Tensor[(1, 4, 6), float32] */;
    (%119, %125, %126, meta[relay.Constant][4] /* ty=Tensor[(6, 4), float32] */)
  };
  %127() /* ty=(Tensor[(6, 30), uint16], Tensor[(6, 30), float64], Tensor[(1, 4, 6), float32], Tensor[(6, 4), float32]) */
}

def @func_3575(%var_3573: Tensor[(11, 16, 16), int32], %var_3574: Tensor[(11, 16, 16), int32]) -> (Tensor[(11, 16, 16), int32], Tensor[(3, 6, 7), float64]) {
  @func_3571(%var_3573, %var_3574) /* ty=(Tensor[(11, 16, 16), int32], Tensor[(3, 6, 7), float64]) */
}

def @func_3877(%var_3874: Tensor[(1, 4, 6), float32]) -> Tensor[(1, 4, 6), float32] {
  %128 = cast(%var_3874, dtype="float32") /* ty=Tensor[(1, 4, 6), float32] */;
  erf(%128) /* ty=Tensor[(1, 4, 6), float32] */
}

def @func_2424(%var_2423: Tensor[(7, 1, 4), float32]) -> (Tensor[(7, ?, 4), int64],) {
  %136 = fn (%var_2400: Tensor[(7, 1, 4), float32]) -> (Tensor[(7, ?, 4), int64],) {
    %129 = cast(%var_2400, dtype="float32") /* ty=Tensor[(7, 1, 4), float32] */;
    %130 = acos(%129) /* ty=Tensor[(7, 1, 4), float32] */;
    %131 = cast(%var_2400, dtype="int64") /* ty=Tensor[(7, 1, 4), int64] */;
    %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
    %133 = cast(%130, dtype="int64") /* ty=Tensor[(7, 1, 4), int64] */;
    %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %135 = maximum(%133, %134) /* ty=Tensor[(7, ?, 4), int64] */;
    (%135,)
  };
  %136(%var_2423) /* ty=(Tensor[(7, ?, 4), int64],) */
}

def @func_246(%var_245: Tensor[(5, 3, 16), float64]) -> (Tensor[(5, 3, ?), float64], Tensor[(5, 3, 16), float64]) {
  %149 = fn (%var_234: Tensor[(5, 3, 16), float64]) -> (Tensor[(5, 3, ?), float64], Tensor[(5, 3, 16), float64]) {
    %137 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 3, 1), float64] */;
    %138 = sinh(%137) /* ty=Tensor[(5, 3, 1), float64] */;
    %139 = cast(%138, dtype="int16") /* ty=Tensor[(5, 3, 1), int16] */;
    %140 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(5, 3, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %141 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 3, 1), float64] */, dtype="int16") /* ty=Tensor[(5, 3, 1), int16] */;
    %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %143 = bitwise_and(%141, %142) /* ty=Tensor[(5, 3, ?), int16] */;
    %144 = cast(%143, dtype="float64") /* ty=Tensor[(5, 3, ?), float64] */;
    %145 = cast(%138, dtype="float64") /* ty=Tensor[(5, 3, 1), float64] */;
    %146 = cast(%var_234, dtype="float64") /* ty=Tensor[(5, 3, 16), float64] */;
    %147 = sin(%144) /* ty=Tensor[(5, 3, ?), float64] */;
    %148 = multiply(%145, %146) /* ty=Tensor[(5, 3, 16), float64] */;
    (%147, %148)
  };
  %149(%var_245) /* ty=(Tensor[(5, 3, ?), float64], Tensor[(5, 3, 16), float64]) */
}

def @func_2810(%var_2809: float32) -> (Tensor[(7, 6, 10), float32], float32, float32) {
  %158 = fn (%var_2799: float32) -> (Tensor[(7, 6, 10), float32], float32, float32) {
    %150 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
    %151 = %150.0;
    %152 = cast(%151, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
    %153 = cast(%var_2799, dtype="float32") /* ty=float32 */;
    %154 = reshape(%153, newshape=[]) /* ty=float32 */;
    %155 = @func_1833(%154) /* ty=(Tensor[(7, 6, 10), float64], Tensor[(3, 6, 2), bool], float32) */;
    %156 = atanh(%152) /* ty=Tensor[(7, 6, 10), float32] */;
    %157 = %155.2;
    (%156, %157, %var_2799)
  };
  %158(%var_2809) /* ty=(Tensor[(7, 6, 10), float32], float32, float32) */
}

def @func_3113(%var_3112: Tensor[(10, 9, 14), bool]) -> (Tensor[(10, 9, 14), bool], Tensor[(6, 30), uint16], Tensor[(15, 4, 3), bool]) {
  %170 = fn (%var_3067: Tensor[(10, 9, 14), bool]) -> (Tensor[(10, 9, 14), bool], Tensor[(6, 30), uint16], Tensor[(15, 4, 3), bool]) {
    %159 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 1, 14), bool] */, dtype="bool") /* ty=Tensor[(10, 1, 14), bool] */;
    %160 = cast(%var_3067, dtype="bool") /* ty=Tensor[(10, 9, 14), bool] */;
    %161 = @func_2543() /* ty=(Tensor[(6, 30), uint16],) */;
    %162 = %161.0;
    %163 = cast(%162, dtype="uint16") /* ty=Tensor[(6, 30), uint16] */;
    %164 = cast(%162, dtype="uint16") /* ty=Tensor[(6, 30), uint16] */;
    %165 = reshape(%163, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
    %166 = reshape(%164, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
    %167 = @func_1050(%165, %166) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), bool]) */;
    %168 = logical_or(%159, %160) /* ty=Tensor[(10, 9, 14), bool] */;
    %169 = %167.1;
    (%168, %162, %169)
  };
  %170(%var_3112) /* ty=(Tensor[(10, 9, 14), bool], Tensor[(6, 30), uint16], Tensor[(15, 4, 3), bool]) */
}

def @func_1332(%var_1331: Tensor[(3, 1, 2), int32]) -> Tensor[(3, 6, 2), bool] {
  %173 = fn (%var_1308: Tensor[(3, 1, 2), int32]) -> Tensor[(3, 6, 2), bool] {
    %171 = cast(%var_1308, dtype="bool") /* ty=Tensor[(3, 1, 2), bool] */;
    %172 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 6, 2), int32] */, dtype="bool") /* ty=Tensor[(3, 6, 2), bool] */;
    less_equal(%171, %172) /* ty=Tensor[(3, 6, 2), bool] */
  };
  %173(%var_1331) /* ty=Tensor[(3, 6, 2), bool] */
}

def @func_2008() -> (Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) {
  @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */
}

def @func_3696(%var_3694: Tensor[(6, 30), uint16]) -> (Tensor[(6, 30), uint64], Tensor[(6, 1), int32], Tensor[(420), float32], float32, Tensor[(6, 30), float32], Tensor[(6, 30), int32], Tensor[(15, 4, 3), float32], Tensor[(6, 30), float32]) {
  @func_3693(%var_3694) /* ty=(Tensor[(6, 30), uint64], Tensor[(6, 1), int32], Tensor[(420), float32], float32, Tensor[(6, 30), float32], Tensor[(6, 30), int32], Tensor[(15, 4, 3), float32], Tensor[(6, 30), float32]) */
}

def @func_3880(%var_3878: Tensor[(1, 4, 6), float32]) -> Tensor[(1, 4, 6), float32] {
  @func_3877(%var_3878) /* ty=Tensor[(1, 4, 6), float32] */
}

def @func_3693(%var_3631: Tensor[(6, 30), uint16]) -> (Tensor[(6, 30), uint64], Tensor[(6, 1), int32], Tensor[(420), float32], float32, Tensor[(6, 30), float32], Tensor[(6, 30), int32], Tensor[(15, 4, 3), float32], Tensor[(6, 30), float32]) {
  %174 = @func_2651() /* ty=Tensor[(6, 30), uint16] */;
  %175 = cast(%174, dtype="uint16") /* ty=Tensor[(6, 30), uint16] */;
  %176 = reshape(%175, newshape=[6, 30]) /* ty=Tensor[(6, 30), uint16] */;
  %177 = cast(meta[relay.Constant][8] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
  %178 = cast(9.07386f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %179 = reshape(%177, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), float32] */;
  %180 = reshape(%178, newshape=[]) /* ty=float32 */;
  %181 = @func_1800(%179, %180) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(3, 6, 2), bool], Tensor[(6, 1), int32], Tensor[(4, 5, 1), bool], float32) */;
  %182 = cast(%var_3631, dtype="uint32") /* ty=Tensor[(6, 30), uint32] */;
  %183 = shape_of(%174, dtype="int32") /* ty=Tensor[(2), int32] */;
  %184 = cast(%174, dtype="uint32") /* ty=Tensor[(6, 30), uint32] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %186 = multiply(%184, %185) /* ty=Tensor[(6, 30), uint32] */;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %188 = sin(%187) /* ty=Tensor[(6, 30), float32] */;
  %189 = cast(%188, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %190 = cast(%var_3631, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %191 = rsqrt(%190) /* ty=Tensor[(6, 30), float64] */;
  %192 = cast(%var_3631, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(2), int32] */;
  %194 = cast(%191, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %196 = sqrt(%189) /* ty=Tensor[(6, 30), float32] */;
  %197 = cast(%196, dtype="uint16") /* ty=Tensor[(6, 30), uint16] */;
  %198 = cast(9.07386f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %199 = reshape(%197, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %200 = reshape(%198, newshape=[]) /* ty=float32 */;
  %201 = @func_1881(%199, %200) /* ty=(Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), float32], Tensor[(180), uint16], Tensor[(7, 6, 10), bool], float32) */;
  %202 = cast(%186, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %203 = shape_of(%188, dtype="int32") /* ty=Tensor[(2), int32] */;
  %204 = cast(%188, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %206 = @func_2096(%176) /* ty=Tensor[(6, 30), uint64] */;
  %207 = %181.2;
  %208 = minimum(%194, %195) /* ty=Tensor[(6, 30), int32] */;
  %209 = %201.1;
  %210 = floor_mod(%204, %205) /* ty=Tensor[(6, 30), float32] */;
  (%206, %207, meta[relay.Constant][8] /* ty=Tensor[(420), float32] */, 9.07386f /* ty=float32 */, %196, %208, %209, %210)
}

def @func_2096(%var_2091: Tensor[(6, 30), uint16]) -> Tensor[(6, 30), uint64] {
  %211 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
  %212 = %211.1;
  %213 = cast(%var_2091, dtype="uint64") /* ty=Tensor[(6, 30), uint64] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(2), int32] */;
  %215 = cast(%212, dtype="uint64") /* ty=Tensor[(6, 30), uint64] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  left_shift(%215, %216) /* ty=Tensor[(6, 30), uint64] */
}

def @func_847(%var_846: float32) -> Tensor[(4, 5, 1), bool] {
  %219 = fn (%var_808: float32) -> Tensor[(4, 5, 1), bool] {
    %217 = cast(%var_808, dtype="bool") /* ty=bool */;
    %218 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 5, 1), float32] */, dtype="bool") /* ty=Tensor[(4, 5, 1), bool] */;
    not_equal(%217, %218) /* ty=Tensor[(4, 5, 1), bool] */
  };
  %219(%var_846) /* ty=Tensor[(4, 5, 1), bool] */
}

def @func_2641(%var_2639: Tensor[(10, 13, 3), uint16], %var_2640: Tensor[(10, 13, 3), uint16]) -> (Tensor[(10, 13, 3), float64],) {
  @func_2637(%var_2639, %var_2640) /* ty=(Tensor[(10, 13, 3), float64],) */
}

def @func_2651() -> Tensor[(6, 30), uint16] {
  %220 = @func_2543() /* ty=(Tensor[(6, 30), uint16],) */;
  %220.0
}

def @func_3246(%var_3231: Tensor[(10, 1, 15), int16]) -> (Tensor[(10, 6, 15), int16],) {
  %221 = cast(%var_3231, dtype="int16") /* ty=Tensor[(10, 1, 15), int16] */;
  %222 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 6, 15), int16] */, dtype="int16") /* ty=Tensor[(10, 6, 15), int16] */;
  %223 = right_shift(%221, %222) /* ty=Tensor[(10, 6, 15), int16] */;
  (%223,)
}

def @func_4391() -> Tensor[(15, 4, 3), float64] {
  %227 = fn () -> Tensor[(15, 4, 3), float64] {
    %224 = @func_2079() /* ty=(Tensor[(15, 4, 3), float32],) */;
    %225 = %224.0;
    %226 = cast(%225, dtype="float64") /* ty=Tensor[(15, 4, 3), float64] */;
    acos(%226) /* ty=Tensor[(15, 4, 3), float64] */
  };
  %227() /* ty=Tensor[(15, 4, 3), float64] */
}

def @func_3342() -> (float32, Tensor[(3, 6, 2), bool], Tensor[(6), int32], Tensor[(3, 6, 7), float64], Tensor[(126), float64], Tensor[(15, 4, 3), int16]) {
  @func_3340() /* ty=(float32, Tensor[(3, 6, 2), bool], Tensor[(6), int32], Tensor[(3, 6, 7), float64], Tensor[(126), float64], Tensor[(15, 4, 3), int16]) */
}

def @func_5012() -> (Tensor[(7, 6, 10), float32],) {
  %228 = @func_2866() /* ty=Tensor[(7, 6, 10), float32] */;
  %229 = cast(%228, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %230 = rsqrt(%229) /* ty=Tensor[(7, 6, 10), float32] */;
  %231 = cast(%228, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%230, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %235 = floor_divide(%233, %234) /* ty=Tensor[(7, 6, 10), float32] */;
  (%235,)
}

def @func_5569(%var_5567: uint16, %var_5568: Tensor[(1, 11, 1), uint16]) -> (Tensor[(6, 30), float64], Tensor[(?, 11, ?), bool], Tensor[(1, 11, 1), float32], Tensor[(1, 11, 1), float64], Tensor[(6, 30), uint64], Tensor[(15, 4, 3), float64], Tensor[(1, 11, 1), float32]) {
  %261 = fn (%var_5497: uint16, %var_5498: Tensor[(1, 11, 1), uint16]) -> (Tensor[(6, 30), float64], Tensor[(?, 11, ?), bool], Tensor[(1, 11, 1), float32], Tensor[(1, 11, 1), float64], Tensor[(6, 30), uint64], Tensor[(15, 4, 3), float64], Tensor[(1, 11, 1), float32]) {
    %236 = cast(%var_5497, dtype="uint16") /* ty=uint16 */;
    %237 = cast(%var_5498, dtype="uint16") /* ty=Tensor[(1, 11, 1), uint16] */;
    %238 = maximum(%236, %237) /* ty=Tensor[(1, 11, 1), uint16] */;
    %239 = cast(%238, dtype="bool") /* ty=Tensor[(1, 11, 1), bool] */;
    %240 = shape_of(%var_5498, dtype="int32") /* ty=Tensor[(3), int32] */;
    %241 = cast(%var_5498, dtype="bool") /* ty=Tensor[(1, 11, 1), bool] */;
    %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %243 = cast(%238, dtype="uint32") /* ty=Tensor[(1, 11, 1), uint32] */;
    %244 = cast(%var_5497, dtype="uint32") /* ty=uint32 */;
    %245 = left_shift(%243, %244) /* ty=Tensor[(1, 11, 1), uint32] */;
    %246 = cast(%245, dtype="float32") /* ty=Tensor[(1, 11, 1), float32] */;
    %247 = cast(%var_5497, dtype="float32") /* ty=float32 */;
    %248 = cast(%var_5497, dtype="float64") /* ty=float64 */;
    %249 = cast(%238, dtype="float64") /* ty=Tensor[(1, 11, 1), float64] */;
    %250 = @func_5124() /* ty=(Tensor[(15, 4, 3), int16], Tensor[(6, 30), uint64]) */;
    %251 = cast(%245, dtype="float64") /* ty=Tensor[(1, 11, 1), float64] */;
    %252 = cosh(%251) /* ty=Tensor[(1, 11, 1), float64] */;
    %253 = cast(%252, dtype="float32") /* ty=Tensor[(1, 11, 1), float32] */;
    %254 = @func_3530() /* ty=Tensor[(6, 30), float64] */;
    %255 = logical_or(%241, %242) /* ty=Tensor[(?, 11, ?), bool] */;
    %256 = power(%246, %247) /* ty=Tensor[(1, 11, 1), float32] */;
    %257 = floor_mod(%248, %249) /* ty=Tensor[(1, 11, 1), float64] */;
    %258 = %250.1;
    %259 = @func_4390() /* ty=Tensor[(15, 4, 3), float64] */;
    %260 = erf(%253) /* ty=Tensor[(1, 11, 1), float32] */;
    (%254, %255, %256, %257, %258, %259, %260)
  };
  %261(%var_5567, %var_5568) /* ty=(Tensor[(6, 30), float64], Tensor[(?, 11, ?), bool], Tensor[(1, 11, 1), float32], Tensor[(1, 11, 1), float64], Tensor[(6, 30), uint64], Tensor[(15, 4, 3), float64], Tensor[(1, 11, 1), float32]) */
}

def @func_6073() -> Tensor[(15, 4, 3), float32] {
  %262 = @func_6050() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), float32]) */;
  %262.0
}

def @func_4791() -> (Tensor[(15, 4, 3), bool], Tensor[(6, 30), float32]) {
  %263 = @func_3554() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) */;
  %264 = %263.0;
  %265 = @func_3554() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) */;
  %266 = %265.0;
  %267 = cast(%266, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %268 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%264, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %271 = @func_4211() /* ty=(Tensor[(6, 30), uint16],) */;
  %272 = %271.0;
  %273 = cast(%272, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %274 = logical_or(%269, %270) /* ty=Tensor[(15, 4, 3), bool] */;
  %275 = acosh(%273) /* ty=Tensor[(6, 30), float32] */;
  (%274, %275)
}

def @func_2006() -> (Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) {
  %276 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 30), uint16] */, dtype="uint16") /* ty=Tensor[(6, 30), uint16] */;
  %277 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 30), uint16] */, dtype="uint16") /* ty=Tensor[(6, 30), uint16] */;
  %278 = reshape(%276, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
  %279 = reshape(%277, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
  %280 = @func_1050(%278, %279) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), bool]) */;
  %281 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %282 = %281.0;
  %283 = cast(%282, dtype="float64") /* ty=Tensor[(7, 6, 10), float64] */;
  %284 = acosh(%283) /* ty=Tensor[(7, 6, 10), float64] */;
  %285 = cast(%284, dtype="float64") /* ty=Tensor[(7, 6, 10), float64] */;
  %286 = atan(%285) /* ty=Tensor[(7, 6, 10), float64] */;
  %287 = cast(%284, dtype="float64") /* ty=Tensor[(7, 6, 10), float64] */;
  %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%286, dtype="float64") /* ty=Tensor[(7, 6, 10), float64] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %291 = mod(%289, %290) /* ty=Tensor[(7, 6, 10), float64] */;
  %292 = cast(%291, dtype="int64") /* ty=Tensor[(7, 6, 10), int64] */;
  %293 = shape_of(%284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%284, dtype="int64") /* ty=Tensor[(7, 6, 10), int64] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %296 = add(%294, %295) /* ty=Tensor[(7, 6, 10), int64] */;
  %297 = cast(%291, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %298 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%296, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %301 = %280.0;
  %302 = greater(%299, %300) /* ty=Tensor[(7, 6, 10), bool] */;
  (%301, meta[relay.Constant][11] /* ty=Tensor[(6, 30), uint16] */, %302)
}

def @func_2774() -> (Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) {
  %307 = fn () -> (Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) {
    %303 = @func_2543() /* ty=(Tensor[(6, 30), uint16],) */;
    %304 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
    %305 = %303.0;
    %306 = %304.2;
    (%305, %306)
  };
  %307() /* ty=(Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */
}

def @func_4637(%var_4620: Tensor[(6, 30), uint64]) -> (Tensor[(6, 30), int32], Tensor[(6, 30), float64]) {
  %308 = @func_4608() /* ty=(Tensor[(6, 30), float32], Tensor[(6, 30), uint64]) */;
  %309 = %308.1;
  %310 = cast(%var_4620, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(2), int32] */;
  %312 = cast(%309, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %314 = bitwise_and(%312, %313) /* ty=Tensor[(6, 30), int32] */;
  %315 = cast(%314, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %316 = shape_of(%309, dtype="int32") /* ty=Tensor[(2), int32] */;
  %317 = cast(%309, dtype="int32") /* ty=Tensor[(6, 30), int32] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %319 = cast(%var_4620, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %320 = bitwise_xor(%317, %318) /* ty=Tensor[(6, 30), int32] */;
  %321 = atanh(%319) /* ty=Tensor[(6, 30), float64] */;
  (%320, %321)
}

def @func_2099(%var_2097: Tensor[(6, 30), uint16]) -> Tensor[(6, 30), uint64] {
  @func_2096(%var_2097) /* ty=Tensor[(6, 30), uint64] */
}

def @func_5659() -> (Tensor[(15, 4, 3), float32],) {
  @func_5657() /* ty=(Tensor[(15, 4, 3), float32],) */
}

def @func_4018() -> (Tensor[(6, 30), float32],) {
  %322 = @func_2923() /* ty=(Tensor[(6, 30), int32], Tensor[(6, 30), bool]) */;
  %323 = %322.0;
  %324 = cast(%323, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %325 = asinh(%324) /* ty=Tensor[(6, 30), float32] */;
  (%325,)
}

def @func_4203(%var_4201: Tensor[(7, 6, 10), float32]) -> (Tensor[(7, 6, 10), int64],) {
  @func_4200(%var_4201) /* ty=(Tensor[(7, 6, 10), int64],) */
}

def @func_5741(%var_5738: Tensor[(10, 42), float32], %var_5739: Tensor[(240), bool], %var_5740: Tensor[(525), uint16]) -> (Tensor[(7, 15, 11), bool], Tensor[(15, 4, 3), int16], Tensor[(3, 6, 2), bool], Tensor[(6), int32], Tensor[(7, 15, 11), float32], Tensor[(7, 6, 10), int64], Tensor[(10, 42), float32], Tensor[(7, 15, 11), float64], Tensor[(4, 12, 5), float64], Tensor[(240), bool], Tensor[(525), uint32]) {
  @func_5736(%var_5738, %var_5739, %var_5740) /* ty=(Tensor[(7, 15, 11), bool], Tensor[(15, 4, 3), int16], Tensor[(3, 6, 2), bool], Tensor[(6), int32], Tensor[(7, 15, 11), float32], Tensor[(7, 6, 10), int64], Tensor[(10, 42), float32], Tensor[(7, 15, 11), float64], Tensor[(4, 12, 5), float64], Tensor[(240), bool], Tensor[(525), uint32]) */
}

def @func_5847() -> Tensor[(6, 30), float64] {
  @func_5845() /* ty=Tensor[(6, 30), float64] */
}

def @func_6293(%var_6278: Tensor[(4, 2, 12), float32]) -> (Tensor[(4, 2, 12), float32], Tensor[(15, 4, 3), bool]) {
  %326 = cast(%var_6278, dtype="float32") /* ty=Tensor[(4, 2, 12), float32] */;
  %327 = @func_3554() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) */;
  %328 = sigmoid(%326) /* ty=Tensor[(4, 2, 12), float32] */;
  %329 = %327.0;
  (%328, %329)
}

def @func_5014() -> (Tensor[(7, 6, 10), float32],) {
  @func_5012() /* ty=(Tensor[(7, 6, 10), float32],) */
}

def @func_5657() -> (Tensor[(15, 4, 3), float32],) {
  %330 = @func_4229() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16]) */;
  %331 = %330.0;
  (%331,)
}

def @func_2264(%var_2255: Tensor[(7, 6, 10), float32]) -> (Tensor[(7, 6, 10), bool],) {
  %332 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %333 = %332.0;
  %334 = cast(%var_2255, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %338 = subtract(%336, %337) /* ty=Tensor[(7, 6, 10), float32] */;
  %339 = cast(%338, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %340 = shape_of(%var_2255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%var_2255, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %343 = less(%341, %342) /* ty=Tensor[(7, 6, 10), bool] */;
  (%343,)
}

def @func_5783() -> (Tensor[(6, 30), int32],) {
  %344 = @func_2923() /* ty=(Tensor[(6, 30), int32], Tensor[(6, 30), bool]) */;
  %345 = %344.0;
  (%345,)
}

def @func_5976() -> Tensor[(7, 6, 10), float32] {
  %347 = fn () -> Tensor[(7, 6, 10), float32] {
    %346 = @func_5012() /* ty=(Tensor[(7, 6, 10), float32],) */;
    %346.0
  };
  %347() /* ty=Tensor[(7, 6, 10), float32] */
}

def @func_2267(%var_2265: Tensor[(7, 6, 10), float32]) -> (Tensor[(7, 6, 10), bool],) {
  @func_2264(%var_2265) /* ty=(Tensor[(7, 6, 10), bool],) */
}

def @func_1881(%var_1869: Tensor[(180), uint16], %var_1877: float32) -> (Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), float32], Tensor[(180), uint16], Tensor[(7, 6, 10), bool], float32) {
  %348 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %349 = cast(%var_1869, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %350 = cast(%var_1869, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %351 = reshape(%349, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
  %352 = reshape(%350, newshape=[15, 4, 3]) /* ty=Tensor[(15, 4, 3), uint16] */;
  %353 = @func_1050(%351, %352) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), bool]) */;
  %354 = %348.0;
  %355 = cast(%354, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
  %356 = cast(%var_1877, dtype="float32") /* ty=float32 */;
  %357 = reshape(%355, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), float32] */;
  %358 = reshape(%356, newshape=[]) /* ty=float32 */;
  %359 = @func_1800(%357, %358) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(3, 6, 2), bool], Tensor[(6, 1), int32], Tensor[(4, 5, 1), bool], float32) */;
  %360 = %353.0;
  %361 = %359.0;
  (%354, %360, %var_1869, %361, %var_1877)
}

def @func_4213() -> (Tensor[(6, 30), uint16],) {
  @func_4211() /* ty=(Tensor[(6, 30), uint16],) */
}

def @func_3195(%var_3187: Tensor[(7, 6, 10), float32]) -> (Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), bool]) {
  %362 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
  %363 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %364 = %363.0;
  %365 = cast(%var_3187, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%364, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %369 = %362.2;
  %370 = less_equal(%367, %368) /* ty=Tensor[(7, 6, 10), bool] */;
  (%369, %370)
}

def @func_895(%var_894: Tensor[(3, 6, 7), float64]) -> Tensor[(3, 6, 7), float64] {
  %372 = fn (%var_876: Tensor[(3, 6, 7), float64]) -> Tensor[(3, 6, 7), float64] {
    %371 = cast(%var_876, dtype="float64") /* ty=Tensor[(3, 6, 7), float64] */;
    cosh(%371) /* ty=Tensor[(3, 6, 7), float64] */
  };
  %372(%var_894) /* ty=Tensor[(3, 6, 7), float64] */
}

def @func_2213(%var_2211: Tensor[(180), uint16]) -> (Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), float32], Tensor[(6, 30), uint64], Tensor[(180), uint16]) {
  @func_2210(%var_2211) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), float32], Tensor[(6, 30), uint64], Tensor[(180), uint16]) */
}

def @func_2360(%var_2358: Tensor[(180), uint16], %var_2359: float32) -> (Tensor[(7, 6, 10), float32], float32, Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), bool], Tensor[(8, 2, 10), float64], Tensor[(160), float64], Tensor[(180), uint16]) {
  %398 = fn (%var_2318: Tensor[(180), uint16], %var_2319: float32) -> (Tensor[(7, 6, 10), float32], float32, Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), bool], Tensor[(8, 2, 10), float64], Tensor[(160), float64], Tensor[(180), uint16]) {
    %373 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
    %374 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
    %375 = cast(%var_2318, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %376 = cast(%var_2319, dtype="float32") /* ty=float32 */;
    %377 = reshape(%375, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %378 = reshape(%376, newshape=[]) /* ty=float32 */;
    %379 = @func_1881(%377, %378) /* ty=(Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), float32], Tensor[(180), uint16], Tensor[(7, 6, 10), bool], float32) */;
    %380 = %379.1;
    %381 = cast(%var_2318, dtype="bool") /* ty=Tensor[(180), bool] */;
    %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
    %383 = cast(%380, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
    %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %385 = cast(meta[relay.Constant][12] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %386 = reshape(%385, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), float64] */;
    %387 = @func_1107(%386) /* ty=(Tensor[(8, 2, 10), float64], Tensor[(5, 3, ?), float64], Tensor[(240), float64]) */;
    %388 = less(%383, %384) /* ty=Tensor[(15, 4, 3), bool] */;
    %389 = cast(%388, dtype="uint16") /* ty=Tensor[(15, 4, 3), uint16] */;
    %390 = cast(%var_2319, dtype="float32") /* ty=float32 */;
    %391 = reshape(%389, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %392 = reshape(%390, newshape=[]) /* ty=float32 */;
    %393 = @func_1881(%391, %392) /* ty=(Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), float32], Tensor[(180), uint16], Tensor[(7, 6, 10), bool], float32) */;
    %394 = %373.0;
    %395 = %374.0;
    %396 = %387.0;
    %397 = %393.2;
    (%394, %var_2319, %395, %388, %396, meta[relay.Constant][12] /* ty=Tensor[(160), float64] */, %397)
  };
  %398(%var_2358, %var_2359) /* ty=(Tensor[(7, 6, 10), float32], float32, Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), bool], Tensor[(8, 2, 10), float64], Tensor[(160), float64], Tensor[(180), uint16]) */
}

def @func_1804(%var_1802: Tensor[(7, 6, 10), float32], %var_1803: float32) -> (Tensor[(7, 6, 10), bool], Tensor[(3, 6, 2), bool], Tensor[(6, 1), int32], Tensor[(4, 5, 1), bool], float32) {
  @func_1800(%var_1802, %var_1803) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(3, 6, 2), bool], Tensor[(6, 1), int32], Tensor[(4, 5, 1), bool], float32) */
}

def @func_2544() -> (Tensor[(6, 30), uint16],) {
  %401 = fn () -> (Tensor[(6, 30), uint16],) {
    %399 = @func_2476() /* ty=(Tensor[(6, 30), uint16],) */;
    %400 = %399.0;
    (%400,)
  };
  %401() /* ty=(Tensor[(6, 30), uint16],) */
}

def @func_2853() -> (Tensor[(6, 30), float64], Tensor[(4, 5, 1), bool], float32) {
  %409 = fn () -> (Tensor[(6, 30), float64], Tensor[(4, 5, 1), bool], float32) {
    %402 = @func_2543() /* ty=(Tensor[(6, 30), uint16],) */;
    %403 = %402.0;
    %404 = cast(%403, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
    %405 = cast(-1.55467f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %406 = reshape(%405, newshape=[]) /* ty=float32 */;
    %407 = cosh(%404) /* ty=Tensor[(6, 30), float64] */;
    %408 = @func_845(%406) /* ty=Tensor[(4, 5, 1), bool] */;
    (%407, %408, -1.55467f /* ty=float32 */)
  };
  %409() /* ty=(Tensor[(6, 30), float64], Tensor[(4, 5, 1), bool], float32) */
}

def @func_5873() -> Tensor[(6, 30), float64] {
  %410 = fn () -> Tensor[(6, 30), float64] {
    @func_3530() /* ty=Tensor[(6, 30), float64] */
  };
  %410() /* ty=Tensor[(6, 30), float64] */
}

def @func_4579() -> (Tensor[(6, 30), uint16],) {
  %413 = fn () -> (Tensor[(6, 30), uint16],) {
    %411 = @func_2476() /* ty=(Tensor[(6, 30), uint16],) */;
    %412 = %411.0;
    (%412,)
  };
  %413() /* ty=(Tensor[(6, 30), uint16],) */
}

def @func_5070(%var_5029: Tensor[(420), float32], %var_5067: float32) -> (Tensor[(7, 6, 10), bool], Tensor[(420), float32], Tensor[(?, 7, 13), float32], Tensor[(1, 7, 13), float32], Tensor[(4, 5, 1), bool], float32) {
  %414 = cast(%var_5029, dtype="float32") /* ty=Tensor[(420), float32] */;
  %415 = reshape(%414, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), float32] */;
  %416 = @func_3195(%415) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), bool]) */;
  %417 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 7, 13), float64] */, dtype="float64") /* ty=Tensor[(1, 7, 13), float64] */;
  %418 = cosh(%417) /* ty=Tensor[(1, 7, 13), float64] */;
  %419 = cast(%418, dtype="float64") /* ty=Tensor[(1, 7, 13), float64] */;
  %420 = log10(%419) /* ty=Tensor[(1, 7, 13), float64] */;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(1, 7, 13), float32] */;
  %422 = asinh(%421) /* ty=Tensor[(1, 7, 13), float32] */;
  %423 = cast(%418, dtype="bool") /* ty=Tensor[(1, 7, 13), bool] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%422, dtype="bool") /* ty=Tensor[(1, 7, 13), bool] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %427 = less(%425, %426) /* ty=Tensor[(?, 7, 13), bool] */;
  %428 = cast(%427, dtype="float32") /* ty=Tensor[(?, 7, 13), float32] */;
  %429 = cast(%422, dtype="float32") /* ty=Tensor[(1, 7, 13), float32] */;
  %430 = cast(%var_5067, dtype="float32") /* ty=float32 */;
  %431 = reshape(%430, newshape=[]) /* ty=float32 */;
  %432 = %416.0;
  %433 = acosh(%428) /* ty=Tensor[(?, 7, 13), float32] */;
  %434 = asin(%429) /* ty=Tensor[(1, 7, 13), float32] */;
  %435 = @func_845(%431) /* ty=Tensor[(4, 5, 1), bool] */;
  (%432, %var_5029, %433, %434, %435, %var_5067)
}

def @func_4262(%var_4259: Tensor[(7, 15, 5), uint16], %var_4260: Tensor[(7, 15, 5), uint16], %var_4261: Tensor[(420), float32]) -> (Tensor[(7, 15, 5), bool], Tensor[(7, 6, 10), int64], Tensor[(420), float32], Tensor[(15, 4, 3), float32]) {
  %447 = fn (%var_4231: Tensor[(7, 15, 5), uint16], %var_4232: Tensor[(7, 15, 5), uint16], %var_4240: Tensor[(420), float32]) -> (Tensor[(7, 15, 5), bool], Tensor[(7, 6, 10), int64], Tensor[(420), float32], Tensor[(15, 4, 3), float32]) {
    %436 = cast(%var_4232, dtype="bool") /* ty=Tensor[(7, 15, 5), bool] */;
    %437 = shape_of(%var_4231, dtype="int32") /* ty=Tensor[(3), int32] */;
    %438 = cast(%var_4231, dtype="bool") /* ty=Tensor[(7, 15, 5), bool] */;
    %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %440 = cast(%var_4240, dtype="float32") /* ty=Tensor[(420), float32] */;
    %441 = reshape(%440, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), float32] */;
    %442 = @func_4200(%441) /* ty=(Tensor[(7, 6, 10), int64],) */;
    %443 = @func_4229() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16]) */;
    %444 = greater_equal(%438, %439) /* ty=Tensor[(7, 15, 5), bool] */;
    %445 = %442.0;
    %446 = %443.0;
    (%444, %445, %var_4240, %446)
  };
  %447(%var_4259, %var_4260, %var_4261) /* ty=(Tensor[(7, 15, 5), bool], Tensor[(7, 6, 10), int64], Tensor[(420), float32], Tensor[(15, 4, 3), float32]) */
}

def @func_3785(%var_3784: Tensor[(6, 30), uint16]) -> (Tensor[(10, 13, 3), float64], Tensor[(6, 30), float32]) {
  %459 = fn (%var_3769: Tensor[(6, 30), uint16]) -> (Tensor[(10, 13, 3), float64], Tensor[(6, 30), float32]) {
    %448 = @func_3435() /* ty=(Tensor[(7, 6, 10), float32], Tensor[(7, 6, 10), bool], Tensor[(15, 4, 3), int16], Tensor[(15, 4, 3), bool], Tensor[(10, 13, 3), float64], Tensor[(390), uint16]) */;
    %449 = @func_2476() /* ty=(Tensor[(6, 30), uint16],) */;
    %450 = %449.0;
    %451 = cast(%var_3769, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
    %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(2), int32] */;
    %453 = cast(%450, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
    %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %455 = divide(%453, %454) /* ty=Tensor[(6, 30), float32] */;
    %456 = cast(%455, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
    %457 = %448.4;
    %458 = erf(%456) /* ty=Tensor[(6, 30), float32] */;
    (%457, %458)
  };
  %459(%var_3784) /* ty=(Tensor[(10, 13, 3), float64], Tensor[(6, 30), float32]) */
}

def @func_2653() -> Tensor[(6, 30), uint16] {
  @func_2651() /* ty=Tensor[(6, 30), uint16] */
}

def @func_5215(%var_5214: Tensor[(160), float64]) -> (Tensor[(15, 4, 3), bool], Tensor[(6, 30), float32], Tensor[(420), float32], Tensor[(160), float64], Tensor[(420), float32]) {
  %470 = fn (%var_5210: Tensor[(160), float64]) -> (Tensor[(15, 4, 3), bool], Tensor[(6, 30), float32], Tensor[(420), float32], Tensor[(160), float64], Tensor[(420), float32]) {
    %460 = @func_3816() /* ty=(Tensor[(15, 4, 3), bool],) */;
    %461 = @func_4791() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), float32]) */;
    %462 = cast(%var_5210, dtype="float64") /* ty=Tensor[(160), float64] */;
    %463 = cast(meta[relay.Constant][14] /* ty=Tensor[(420), float32] */, dtype="float32") /* ty=Tensor[(420), float32] */;
    %464 = reshape(%462, newshape=[160]) /* ty=Tensor[(160), float64] */;
    %465 = reshape(%463, newshape=[420]) /* ty=Tensor[(420), float32] */;
    %466 = @func_4531(%464, %465) /* ty=(Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool], Tensor[(160), float64], Tensor[(420), float32]) */;
    %467 = %460.0;
    %468 = %461.1;
    %469 = %466.3;
    (%467, %468, %469, %var_5210, meta[relay.Constant][14] /* ty=Tensor[(420), float32] */)
  };
  %470(%var_5214) /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), float32], Tensor[(420), float32], Tensor[(160), float64], Tensor[(420), float32]) */
}

def @func_6052() -> (Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), float32]) {
  @func_6050() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), float32]) */
}

def @func_3198(%var_3196: Tensor[(7, 6, 10), float32]) -> (Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), bool]) {
  @func_3195(%var_3196) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), bool]) */
}

def @func_2080() -> (Tensor[(15, 4, 3), float32],) {
  %473 = fn () -> (Tensor[(15, 4, 3), float32],) {
    %471 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
    %472 = %471.0;
    (%472,)
  };
  %473() /* ty=(Tensor[(15, 4, 3), float32],) */
}

def @func_4531(%var_4524: Tensor[(160), float64], %var_4525: Tensor[(420), float32]) -> (Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool], Tensor[(160), float64], Tensor[(420), float32]) {
  %474 = @func_4229() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16]) */;
  %475 = cast(%var_4524, dtype="float64") /* ty=Tensor[(160), float64] */;
  %476 = cast(%var_4525, dtype="float32") /* ty=Tensor[(420), float32] */;
  %477 = reshape(%475, newshape=[16, 10]) /* ty=Tensor[(16, 10), float64] */;
  %478 = reshape(%476, newshape=[420]) /* ty=Tensor[(420), float32] */;
  %479 = @func_4322(%477, %478) /* ty=(Tensor[(6, 30), uint16], Tensor[(15, 4, 3), bool], Tensor[(8, 2, 10), float64], Tensor[(16, 10), float64], Tensor[(7, 6, 10), bool], Tensor[(420), float32]) */;
  %480 = %474.1;
  %481 = %479.4;
  (%480, %481, %var_4524, %var_4525)
}

def @func_4020() -> (Tensor[(6, 30), float32],) {
  @func_4018() /* ty=(Tensor[(6, 30), float32],) */
}

def @func_3340() -> (float32, Tensor[(3, 6, 2), bool], Tensor[(6), int32], Tensor[(3, 6, 7), float64], Tensor[(126), float64], Tensor[(15, 4, 3), int16]) {
  %482 = cast(meta[relay.Constant][15] /* ty=Tensor[(6), int32] */, dtype="int32") /* ty=Tensor[(6), int32] */;
  %483 = reshape(%482, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), int32] */;
  %484 = cast(meta[relay.Constant][16] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %485 = reshape(%484, newshape=[3, 6, 7]) /* ty=Tensor[(3, 6, 7), float64] */;
  %486 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
  %487 = %486.0;
  %488 = cast(%487, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
  %489 = tan(%488) /* ty=Tensor[(15, 4, 3), float32] */;
  %490 = cast(%489, dtype="uint16") /* ty=Tensor[(15, 4, 3), uint16] */;
  %491 = cast(1.52752f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %492 = reshape(%490, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %493 = reshape(%491, newshape=[]) /* ty=float32 */;
  %494 = @func_1881(%492, %493) /* ty=(Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), float32], Tensor[(180), uint16], Tensor[(7, 6, 10), bool], float32) */;
  %495 = %494.2;
  %496 = cast(%495, dtype="int16") /* ty=Tensor[(180), int16] */;
  %497 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%489, dtype="int16") /* ty=Tensor[(15, 4, 3), int16] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %500 = @func_1330(%483) /* ty=Tensor[(3, 6, 2), bool] */;
  %501 = @func_893(%485) /* ty=Tensor[(3, 6, 7), float64] */;
  %502 = maximum(%498, %499) /* ty=Tensor[(15, 4, 3), int16] */;
  (1.52752f /* ty=float32 */, %500, meta[relay.Constant][15] /* ty=Tensor[(6), int32] */, %501, meta[relay.Constant][16] /* ty=Tensor[(126), float64] */, %502)
}

def @func_6075() -> Tensor[(15, 4, 3), float32] {
  @func_6073() /* ty=Tensor[(15, 4, 3), float32] */
}

def @func_1835(%var_1834: float32) -> (Tensor[(7, 6, 10), float64], Tensor[(3, 6, 2), bool], float32) {
  %513 = fn (%var_1828: float32) -> (Tensor[(7, 6, 10), float64], Tensor[(3, 6, 2), bool], float32) {
    %503 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
    %504 = %503.0;
    %505 = cast(%504, dtype="float64") /* ty=Tensor[(7, 6, 10), float64] */;
    %506 = cast(%504, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
    %507 = cast(%var_1828, dtype="float32") /* ty=float32 */;
    %508 = reshape(%506, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), float32] */;
    %509 = reshape(%507, newshape=[]) /* ty=float32 */;
    %510 = @func_1800(%508, %509) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(3, 6, 2), bool], Tensor[(6, 1), int32], Tensor[(4, 5, 1), bool], float32) */;
    %511 = asin(%505) /* ty=Tensor[(7, 6, 10), float64] */;
    %512 = %510.1;
    (%511, %512, %var_1828)
  };
  %513(%var_1834) /* ty=(Tensor[(7, 6, 10), float64], Tensor[(3, 6, 2), bool], float32) */
}

def @func_3249(%var_3247: Tensor[(10, 1, 15), int16]) -> (Tensor[(10, 6, 15), int16],) {
  @func_3246(%var_3247) /* ty=(Tensor[(10, 6, 15), int16],) */
}

def @func_4069(%var_4068: Tensor[(15, 4, 3), float32]) -> (Tensor[(15, 4, 3), bool], Tensor[(6, 30), float32]) {
  %523 = fn (%var_4051: Tensor[(15, 4, 3), float32]) -> (Tensor[(15, 4, 3), bool], Tensor[(6, 30), float32]) {
    %514 = @func_2079() /* ty=(Tensor[(15, 4, 3), float32],) */;
    %515 = %514.0;
    %516 = cast(%var_4051, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
    %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
    %518 = cast(%515, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
    %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %520 = @func_4018() /* ty=(Tensor[(6, 30), float32],) */;
    %521 = less_equal(%518, %519) /* ty=Tensor[(15, 4, 3), bool] */;
    %522 = %520.0;
    (%521, %522)
  };
  %523(%var_4068) /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), float32]) */
}

def @func_1885(%var_1883: Tensor[(180), uint16], %var_1884: float32) -> (Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), float32], Tensor[(180), uint16], Tensor[(7, 6, 10), bool], float32) {
  @func_1881(%var_1883, %var_1884) /* ty=(Tensor[(7, 6, 10), float32], Tensor[(15, 4, 3), float32], Tensor[(180), uint16], Tensor[(7, 6, 10), bool], float32) */
}

def @func_4971() -> (Tensor[(6, 30), uint16], Tensor[(6, 30), uint16]) {
  %528 = fn () -> (Tensor[(6, 30), uint16], Tensor[(6, 30), uint16]) {
    %524 = @func_4578() /* ty=(Tensor[(6, 30), uint16],) */;
    %525 = @func_4211() /* ty=(Tensor[(6, 30), uint16],) */;
    %526 = %524.0;
    %527 = %525.0;
    (%526, %527)
  };
  %528() /* ty=(Tensor[(6, 30), uint16], Tensor[(6, 30), uint16]) */
}

def @func_5125() -> (Tensor[(15, 4, 3), int16], Tensor[(6, 30), uint64]) {
  %535 = fn () -> (Tensor[(15, 4, 3), int16], Tensor[(6, 30), uint64]) {
    %529 = @func_3435() /* ty=(Tensor[(7, 6, 10), float32], Tensor[(7, 6, 10), bool], Tensor[(15, 4, 3), int16], Tensor[(15, 4, 3), bool], Tensor[(10, 13, 3), float64], Tensor[(390), uint16]) */;
    %530 = %529.2;
    %531 = cast(%530, dtype="uint16") /* ty=Tensor[(15, 4, 3), uint16] */;
    %532 = reshape(%531, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %533 = @func_2210(%532) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), float32], Tensor[(6, 30), uint64], Tensor[(180), uint16]) */;
    %534 = %533.2;
    (%530, %534)
  };
  %535() /* ty=(Tensor[(15, 4, 3), int16], Tensor[(6, 30), uint64]) */
}

def @func_2637(%var_2617: Tensor[(10, 13, 3), uint16], %var_2618: Tensor[(10, 13, 3), uint16]) -> (Tensor[(10, 13, 3), float64],) {
  %536 = cast(%var_2618, dtype="uint16") /* ty=Tensor[(10, 13, 3), uint16] */;
  %537 = shape_of(%var_2617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%var_2617, dtype="uint16") /* ty=Tensor[(10, 13, 3), uint16] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %540 = bitwise_or(%538, %539) /* ty=Tensor[(10, 13, 3), uint16] */;
  %541 = cast(%540, dtype="float64") /* ty=Tensor[(10, 13, 3), float64] */;
  %542 = atan(%541) /* ty=Tensor[(10, 13, 3), float64] */;
  (%542,)
}

def @func_6137() -> Tensor[(6, 30), float64] {
  @func_6135() /* ty=Tensor[(6, 30), float64] */
}

def @func_2210(%var_2207: Tensor[(180), uint16]) -> (Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), float32], Tensor[(6, 30), uint64], Tensor[(180), uint16]) {
  %543 = @func_2006() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool]) */;
  %544 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %545 = cast(%var_2207, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %546 = reshape(%545, newshape=[6, 30]) /* ty=Tensor[(6, 30), uint16] */;
  %547 = %543.2;
  %548 = %544.0;
  %549 = @func_2096(%546) /* ty=Tensor[(6, 30), uint64] */;
  (%547, %548, %549, %var_2207)
}

def @func_4535(%var_4533: Tensor[(160), float64], %var_4534: Tensor[(420), float32]) -> (Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool], Tensor[(160), float64], Tensor[(420), float32]) {
  @func_4531(%var_4533, %var_4534) /* ty=(Tensor[(6, 30), uint16], Tensor[(7, 6, 10), bool], Tensor[(160), float64], Tensor[(420), float32]) */
}

def @func_6135() -> Tensor[(6, 30), float64] {
  @func_3530() /* ty=Tensor[(6, 30), float64] */
}

def @func_1715() -> (Tensor[(7, 6, 10), float32],) {
  %552 = fn () -> (Tensor[(7, 6, 10), float32],) {
    %550 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 6, 10), float32] */;
    %551 = cos(%550) /* ty=Tensor[(7, 6, 10), float32] */;
    (%551,)
  };
  %552() /* ty=(Tensor[(7, 6, 10), float32],) */
}

def @func_2925() -> (Tensor[(6, 30), int32], Tensor[(6, 30), bool]) {
  @func_2923() /* ty=(Tensor[(6, 30), int32], Tensor[(6, 30), bool]) */
}

def @func_3556() -> (Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) {
  @func_3554() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) */
}

def @func_4465() -> Tensor[(7, 6, 10), float32] {
  %553 = fn () -> Tensor[(7, 6, 10), float32] {
    @func_2866() /* ty=Tensor[(7, 6, 10), float32] */
  };
  %553() /* ty=Tensor[(7, 6, 10), float32] */
}

def @func_4322(%var_4304: Tensor[(16, 10), float64], %var_4316: Tensor[(420), float32]) -> (Tensor[(6, 30), uint16], Tensor[(15, 4, 3), bool], Tensor[(8, 2, 10), float64], Tensor[(16, 10), float64], Tensor[(7, 6, 10), bool], Tensor[(420), float32]) {
  %554 = @func_2543() /* ty=(Tensor[(6, 30), uint16],) */;
  %555 = @func_3816() /* ty=(Tensor[(15, 4, 3), bool],) */;
  %556 = cast(%var_4304, dtype="float64") /* ty=Tensor[(16, 10), float64] */;
  %557 = reshape(%556, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), float64] */;
  %558 = @func_1107(%557) /* ty=(Tensor[(8, 2, 10), float64], Tensor[(5, 3, ?), float64], Tensor[(240), float64]) */;
  %559 = cast(%var_4316, dtype="float32") /* ty=Tensor[(420), float32] */;
  %560 = reshape(%559, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), float32] */;
  %561 = @func_3195(%560) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(7, 6, 10), bool]) */;
  %562 = %554.0;
  %563 = %555.0;
  %564 = %558.0;
  %565 = %561.1;
  (%562, %563, %564, %var_4304, %565, %var_4316)
}

def @func_6213(%var_6212: Tensor[(6, 30), uint16]) -> (Tensor[(6, 30), bool],) {
  %573 = fn (%var_6201: Tensor[(6, 30), uint16]) -> (Tensor[(6, 30), bool],) {
    %566 = @func_4229() /* ty=(Tensor[(15, 4, 3), float32], Tensor[(6, 30), uint16]) */;
    %567 = %566.1;
    %568 = cast(%var_6201, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
    %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(2), int32] */;
    %570 = cast(%567, dtype="bool") /* ty=Tensor[(6, 30), bool] */;
    %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %572 = not_equal(%570, %571) /* ty=Tensor[(6, 30), bool] */;
    (%572,)
  };
  %573(%var_6212) /* ty=(Tensor[(6, 30), bool],) */
}

def @func_3817() -> (Tensor[(15, 4, 3), bool],) {
  %576 = fn () -> (Tensor[(15, 4, 3), bool],) {
    %574 = @func_3554() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) */;
    %575 = %574.0;
    (%575,)
  };
  %576() /* ty=(Tensor[(15, 4, 3), bool],) */
}

def @func_5429() -> Tensor[(15, 4, 3), bool] {
  %577 = @func_3554() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) */;
  %577.0
}

def @func_3554() -> (Tensor[(15, 4, 3), bool], Tensor[(6, 30), uint16]) {
  %578 = @func_3435() /* ty=(Tensor[(7, 6, 10), float32], Tensor[(7, 6, 10), bool], Tensor[(15, 4, 3), int16], Tensor[(15, 4, 3), bool], Tensor[(10, 13, 3), float64], Tensor[(390), uint16]) */;
  %579 = @func_2476() /* ty=(Tensor[(6, 30), uint16],) */;
  %580 = %578.3;
  %581 = %579.0;
  (%580, %581)
}

def @func_5736(%var_5712: Tensor[(10, 42), float32], %var_5728: Tensor[(240), bool], %var_5731: Tensor[(525), uint16]) -> (Tensor[(7, 15, 11), bool], Tensor[(15, 4, 3), int16], Tensor[(3, 6, 2), bool], Tensor[(6), int32], Tensor[(7, 15, 11), float32], Tensor[(7, 6, 10), int64], Tensor[(10, 42), float32], Tensor[(7, 15, 11), float64], Tensor[(4, 12, 5), float64], Tensor[(240), bool], Tensor[(525), uint32]) {
  %582 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 15, 11), float64] */, dtype="bool") /* ty=Tensor[(7, 15, 11), bool] */;
  %583 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(7, 15, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 15, 11), float64] */, dtype="bool") /* ty=Tensor[(7, 15, 11), bool] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %586 = @func_5124() /* ty=(Tensor[(15, 4, 3), int16], Tensor[(6, 30), uint64]) */;
  %587 = cast(meta[relay.Constant][20] /* ty=Tensor[(6), int32] */, dtype="int32") /* ty=Tensor[(6), int32] */;
  %588 = reshape(%587, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), int32] */;
  %589 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 15, 11), float64] */, dtype="bool") /* ty=Tensor[(7, 15, 11), bool] */;
  %590 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(7, 15, 11), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 15, 11), float64] */, dtype="bool") /* ty=Tensor[(7, 15, 11), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = equal(%591, %592) /* ty=Tensor[(7, 15, 11), bool] */;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
  %595 = cos(%594) /* ty=Tensor[(7, 15, 11), float64] */;
  %596 = cast(%595, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
  %597 = asin(%596) /* ty=Tensor[(7, 15, 11), float64] */;
  %598 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 15, 11), float64] */, dtype="float32") /* ty=Tensor[(7, 15, 11), float32] */;
  %599 = shape_of(%597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%597, dtype="float32") /* ty=Tensor[(7, 15, 11), float32] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %602 = cast(meta[relay.Constant][21] /* ty=Tensor[(525), uint16] */, dtype="uint16") /* ty=Tensor[(525), uint16] */;
  %603 = cast(meta[relay.Constant][21] /* ty=Tensor[(525), uint16] */, dtype="uint16") /* ty=Tensor[(525), uint16] */;
  %604 = cast(%var_5712, dtype="float32") /* ty=Tensor[(10, 42), float32] */;
  %605 = reshape(%602, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), uint16] */;
  %606 = reshape(%603, newshape=[7, 15, 5]) /* ty=Tensor[(7, 15, 5), uint16] */;
  %607 = reshape(%604, newshape=[420]) /* ty=Tensor[(420), float32] */;
  %608 = @func_4258(%605, %606, %607) /* ty=(Tensor[(7, 15, 5), bool], Tensor[(7, 6, 10), int64], Tensor[(420), float32], Tensor[(15, 4, 3), float32]) */;
  %609 = cast(%597, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
  %610 = sin(%609) /* ty=Tensor[(7, 15, 11), float64] */;
  %611 = cast(%610, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
  %612 = cast(%var_5728, dtype="bool") /* ty=Tensor[(240), bool] */;
  %613 = cast(%var_5728, dtype="bool") /* ty=Tensor[(240), bool] */;
  %614 = reshape(%612, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), bool] */;
  %615 = reshape(%613, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), bool] */;
  %616 = @func_4929(%614, %615) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), float32], Tensor[(4, 12, 5), float64], Tensor[(4, 12, 5), float32]) */;
  %617 = cast(%var_5731, dtype="uint32") /* ty=Tensor[(525), uint32] */;
  %618 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(525), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %619 = cast(meta[relay.Constant][21] /* ty=Tensor[(525), uint16] */, dtype="uint32") /* ty=Tensor[(525), uint32] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %621 = less(%584, %585) /* ty=Tensor[(7, 15, 11), bool] */;
  %622 = %586.0;
  %623 = @func_1330(%588) /* ty=Tensor[(3, 6, 2), bool] */;
  %624 = floor_divide(%600, %601) /* ty=Tensor[(7, 15, 11), float32] */;
  %625 = %608.1;
  %626 = tan(%611) /* ty=Tensor[(7, 15, 11), float64] */;
  %627 = %616.2;
  %628 = left_shift(%619, %620) /* ty=Tensor[(525), uint32] */;
  (%621, %622, %623, meta[relay.Constant][20] /* ty=Tensor[(6), int32] */, %624, %625, %var_5712, %626, %627, %var_5728, %628)
}

def @func_4200(%var_4189: Tensor[(7, 6, 10), float32]) -> (Tensor[(7, 6, 10), int64],) {
  %629 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %630 = %629.0;
  %631 = cast(%var_4189, dtype="int64") /* ty=Tensor[(7, 6, 10), int64] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%630, dtype="int64") /* ty=Tensor[(7, 6, 10), int64] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %635 = maximum(%633, %634) /* ty=Tensor[(7, 6, 10), int64] */;
  (%635,)
}

def @main(%var_6349: Tensor[(16, 8, 1), float64], %var_6352: Tensor[(16, 8, 8), float64]) -> (Tensor[(16, 8, 1), float64], Tensor[(16, 8, 8), uint8]) {
  %636 = cast(%var_6349, dtype="float64") /* ty=Tensor[(16, 8, 1), float64] */;
  %637 = cast(%var_6349, dtype="uint8") /* ty=Tensor[(16, 8, 1), uint8] */;
  %638 = cast(%var_6352, dtype="uint8") /* ty=Tensor[(16, 8, 8), uint8] */;
  %639 = log(%636) /* ty=Tensor[(16, 8, 1), float64] */;
  %640 = logical_xor(%637, %638) /* ty=Tensor[(16, 8, 8), uint8] */;
  (%639, %640)
}

def @func_2867() -> Tensor[(7, 6, 10), float32] {
  %642 = fn () -> Tensor[(7, 6, 10), float32] {
    %641 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
    %641.0
  };
  %642() /* ty=Tensor[(7, 6, 10), float32] */
}

def @func_4211() -> (Tensor[(6, 30), uint16],) {
  %643 = @func_2651() /* ty=Tensor[(6, 30), uint16] */;
  (%643,)
}

def @func_4839() -> (Tensor[(7, 6, 10), float32],) {
  %646 = fn () -> (Tensor[(7, 6, 10), float32],) {
    %644 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
    %645 = %644.0;
    (%645,)
  };
  %646() /* ty=(Tensor[(7, 6, 10), float32],) */
}

def @func_5769(%var_5767: Tensor[(6, 9, 10), float32], %var_5768: Tensor[(6, 9, 10), float32]) -> (Tensor[(6, 9, 10), float32], Tensor[(6, 9, 10), int16]) {
  %659 = fn (%var_5743: Tensor[(6, 9, 10), float32], %var_5744: Tensor[(6, 9, 10), float32]) -> (Tensor[(6, 9, 10), float32], Tensor[(6, 9, 10), int16]) {
    %647 = cast(%var_5744, dtype="float32") /* ty=Tensor[(6, 9, 10), float32] */;
    %648 = shape_of(%var_5743, dtype="int32") /* ty=Tensor[(3), int32] */;
    %649 = cast(%var_5743, dtype="float32") /* ty=Tensor[(6, 9, 10), float32] */;
    %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %651 = cast(%var_5744, dtype="float32") /* ty=Tensor[(6, 9, 10), float32] */;
    %652 = log2(%651) /* ty=Tensor[(6, 9, 10), float32] */;
    %653 = cast(%var_5743, dtype="int16") /* ty=Tensor[(6, 9, 10), int16] */;
    %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
    %655 = cast(%652, dtype="int16") /* ty=Tensor[(6, 9, 10), int16] */;
    %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %657 = power(%649, %650) /* ty=Tensor[(6, 9, 10), float32] */;
    %658 = bitwise_and(%655, %656) /* ty=Tensor[(6, 9, 10), int16] */;
    (%657, %658)
  };
  %659(%var_5767, %var_5768) /* ty=(Tensor[(6, 9, 10), float32], Tensor[(6, 9, 10), int16]) */
}

def @func_5074(%var_5072: Tensor[(420), float32], %var_5073: float32) -> (Tensor[(7, 6, 10), bool], Tensor[(420), float32], Tensor[(?, 7, 13), float32], Tensor[(1, 7, 13), float32], Tensor[(4, 5, 1), bool], float32) {
  @func_5070(%var_5072, %var_5073) /* ty=(Tensor[(7, 6, 10), bool], Tensor[(420), float32], Tensor[(?, 7, 13), float32], Tensor[(1, 7, 13), float32], Tensor[(4, 5, 1), bool], float32) */
}

def @func_1800(%var_1778: Tensor[(7, 6, 10), float32], %var_1794: float32) -> (Tensor[(7, 6, 10), bool], Tensor[(3, 6, 2), bool], Tensor[(6, 1), int32], Tensor[(4, 5, 1), bool], float32) {
  %660 = @func_1714() /* ty=(Tensor[(7, 6, 10), float32],) */;
  %661 = %660.0;
  %662 = cast(%var_1778, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="bool") /* ty=Tensor[(7, 6, 10), bool] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %666 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 1), int32] */, dtype="int32") /* ty=Tensor[(6, 1), int32] */;
  %667 = reshape(%666, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), int32] */;
  %668 = cast(%var_1794, dtype="float32") /* ty=float32 */;
  %669 = reshape(%668, newshape=[]) /* ty=float32 */;
  %670 = equal(%664, %665) /* ty=Tensor[(7, 6, 10), bool] */;
  %671 = @func_1330(%667) /* ty=Tensor[(3, 6, 2), bool] */;
  %672 = @func_845(%669) /* ty=Tensor[(4, 5, 1), bool] */;
  (%670, %671, meta[relay.Constant][22] /* ty=Tensor[(6, 1), int32] */, %672, %var_1794)
}

def @func_4326(%var_4324: Tensor[(16, 10), float64], %var_4325: Tensor[(420), float32]) -> (Tensor[(6, 30), uint16], Tensor[(15, 4, 3), bool], Tensor[(8, 2, 10), float64], Tensor[(16, 10), float64], Tensor[(7, 6, 10), bool], Tensor[(420), float32]) {
  @func_4322(%var_4324, %var_4325) /* ty=(Tensor[(6, 30), uint16], Tensor[(15, 4, 3), bool], Tensor[(8, 2, 10), float64], Tensor[(16, 10), float64], Tensor[(7, 6, 10), bool], Tensor[(420), float32]) */
}

def @func_4793() -> (Tensor[(15, 4, 3), bool], Tensor[(6, 30), float32]) {
  @func_4791() /* ty=(Tensor[(15, 4, 3), bool], Tensor[(6, 30), float32]) */
}

def @func_1053(%var_1051: Tensor[(15, 4, 3), uint16], %var_1052: Tensor[(15, 4, 3), uint16]) -> (Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), bool]) {
  %692 = fn (%var_1019: Tensor[(15, 4, 3), uint16], %var_1020: Tensor[(15, 4, 3), uint16]) -> (Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), bool]) {
    %673 = cast(%var_1019, dtype="float32") /* ty=Tensor[(15, 4, 3), float32] */;
    %674 = cast(%var_1020, dtype="uint16") /* ty=Tensor[(15, 4, 3), uint16] */;
    %675 = shape_of(%var_1019, dtype="int32") /* ty=Tensor[(3), int32] */;
    %676 = cast(%var_1019, dtype="uint16") /* ty=Tensor[(15, 4, 3), uint16] */;
    %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %678 = left_shift(%676, %677) /* ty=Tensor[(15, 4, 3), uint16] */;
    %679 = cast(%var_1020, dtype="float64") /* ty=Tensor[(15, 4, 3), float64] */;
    %680 = sigmoid(%679) /* ty=Tensor[(15, 4, 3), float64] */;
    %681 = cast(%680, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
    %682 = shape_of(%var_1020, dtype="int32") /* ty=Tensor[(3), int32] */;
    %683 = cast(%var_1020, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
    %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %685 = greater_equal(%683, %684) /* ty=Tensor[(15, 4, 3), bool] */;
    %686 = cast(%685, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
    %687 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
    %688 = cast(%678, dtype="bool") /* ty=Tensor[(15, 4, 3), bool] */;
    %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %690 = log2(%673) /* ty=Tensor[(15, 4, 3), float32] */;
    %691 = greater(%688, %689) /* ty=Tensor[(15, 4, 3), bool] */;
    (%690, %691)
  };
  %692(%var_1051, %var_1052) /* ty=(Tensor[(15, 4, 3), float32], Tensor[(15, 4, 3), bool]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen313/build/output.py:1662: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen313/build/output.py", line 1667, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) tvmgen_default_fused_log_kernel0(double* __restrict__ T_log, double* __restrict__ placeholder) {
  T_log[(((int)threadIdx.x))] = log(placeholder[(((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_cast_cast_logical_xor_kernel0(uchar* __restrict__ T_logical_xor, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  T_logical_xor[(((int)threadIdx.x))] = (((uchar)placeholder[((((int)threadIdx.x) >> 3))]) ^ ((uchar)placeholder1[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

