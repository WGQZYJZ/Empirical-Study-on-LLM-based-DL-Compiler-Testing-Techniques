==========mod==========
#[version = "0.0.5"]
def @func_7636() -> Tensor[(11, 10, 16), float64] {
  %0 = @func_6804() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %0.1
}

def @func_8383(%var_8378: Tensor[(104), int16], %var_8379: Tensor[(192), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(96, 2), uint16], Tensor[(104), int16], Tensor[(192), uint16]) {
  %1 = cast(%var_8378, dtype="int16") /* ty=Tensor[(104), int16] */;
  %2 = cast(%var_8379, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %3 = reshape(%1, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), int16] */;
  %4 = reshape(%2, newshape=[96, 2]) /* ty=Tensor[(96, 2), uint16] */;
  %5 = @func_5233(%3, %4) /* ty=(Tensor[(13, 2, 4), bool], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(96, 2), uint16], Tensor[(13, 2, 4), float64]) */;
  %6 = @func_5161() /* ty=Tensor[(11, 10, 16), float64] */;
  %7 = %5.3;
  (%6, %7, %var_8378, %var_8379)
}

def @func_7838(%var_7830: Tensor[(2, 12, 6), uint64], %var_7831: Tensor[(2, 12, 6), uint64]) -> (Tensor[(2, 12, 6), uint64],) {
  %8 = cast(%var_7831, dtype="uint64") /* ty=Tensor[(2, 12, 6), uint64] */;
  %9 = shape_of(%var_7830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%var_7830, dtype="uint64") /* ty=Tensor[(2, 12, 6), uint64] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %12 = logical_xor(%10, %11) /* ty=Tensor[(2, 12, 6), uint64] */;
  (%12,)
}

def @func_6010(%var_6002: Tensor[(8, 1, 2), float64]) -> Tensor[(8, 1, 2), float64] {
  %13 = cast(%var_6002, dtype="float64") /* ty=Tensor[(8, 1, 2), float64] */;
  %14 = acos(%13) /* ty=Tensor[(8, 1, 2), float64] */;
  %15 = cast(%14, dtype="float64") /* ty=Tensor[(8, 1, 2), float64] */;
  log2(%15) /* ty=Tensor[(8, 1, 2), float64] */
}

def @func_238(%var_227: Tensor[(16, 4, 3), uint16], %var_228: Tensor[(16, 4, 3), uint16]) -> (Tensor[(16, 4, 3), uint16],) {
  %16 = cast(%var_228, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
  %17 = shape_of(%var_227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%var_227, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %20 = left_shift(%18, %19) /* ty=Tensor[(16, 4, 3), uint16] */;
  (%20,)
}

def @func_9812(%var_9783: Tensor[(13, 8, 4), float64]) -> (Tensor[(13, 8, 4), float64], Tensor[(13, 8, 4), float64]) {
  %21 = cast(%var_9783, dtype="float64") /* ty=Tensor[(13, 8, 4), float64] */;
  %22 = cast(%var_9783, dtype="float64") /* ty=Tensor[(13, 8, 4), float64] */;
  %23 = atan(%21) /* ty=Tensor[(13, 8, 4), float64] */;
  %24 = log2(%22) /* ty=Tensor[(13, 8, 4), float64] */;
  (%23, %24)
}

def @func_397(%var_364: Tensor[(10, 2, 1), float32], %var_377: Tensor[(192), uint16]) -> (Tensor[(10, 2, 1), float32], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(16, 4, 3), uint16]) {
  %25 = cast(%var_364, dtype="float32") /* ty=Tensor[(10, 2, 1), float32] */;
  %26 = cast(%var_377, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %27 = cast(%var_377, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %28 = reshape(%26, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %29 = reshape(%27, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %30 = @func_238(%28, %29) /* ty=(Tensor[(16, 4, 3), uint16],) */;
  %31 = %30.0;
  %32 = cast(%31, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
  %33 = cast(%31, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
  %34 = reshape(%32, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %35 = reshape(%33, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %36 = @func_238(%34, %35) /* ty=(Tensor[(16, 4, 3), uint16],) */;
  %37 = sigmoid(%25) /* ty=Tensor[(10, 2, 1), float32] */;
  %38 = %36.0;
  (%37, %31, %var_377, %38)
}

def @func_11874(%var_11857: Tensor[(24, 8), bool]) -> (Tensor[(11, 10, 16), bool], Tensor[(24, 8), float32], Tensor[(24, 8), uint8]) {
  %39 = @func_8533() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
  %40 = @func_9657() /* ty=(Tensor[(24, 8), bool], Tensor[(11, 10, 16), float64], Tensor[(512), float32], Tensor[(24, 8), float32], Tensor[(24, 8), bool]) */;
  %41 = @func_9657() /* ty=(Tensor[(24, 8), bool], Tensor[(11, 10, 16), float64], Tensor[(512), float32], Tensor[(24, 8), float32], Tensor[(24, 8), bool]) */;
  %42 = %41.4;
  %43 = cast(%var_11857, dtype="uint8") /* ty=Tensor[(24, 8), uint8] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(2), int32] */;
  %45 = cast(%42, dtype="uint8") /* ty=Tensor[(24, 8), uint8] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %47 = %39.0;
  %48 = %40.3;
  %49 = multiply(%45, %46) /* ty=Tensor[(24, 8), uint8] */;
  (%47, %48, %49)
}

def @func_11793() -> (Tensor[(11, 10, 16), float64],) {
  %50 = @func_8533() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
  %51 = %50.1;
  (%51,)
}

def @func_6396() -> (Tensor[(11, 10, 16), float64],) {
  %52 = @func_3768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %53 = %52.1;
  (%53,)
}

def @func_11409() -> Tensor[(11, 10, 16), float64] {
  %54 = @func_6370() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %54.0
}

def @func_3331(%var_3286: Tensor[(11, 10, 16), float64], %var_3308: Tensor[(48, 4), uint16]) -> (Tensor[(11, 10, 16), uint64], Tensor[(10, 2), float32], Tensor[(48, 4), bool]) {
  %55 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %56 = %55.0;
  %57 = cast(%var_3286, dtype="uint64") /* ty=Tensor[(11, 10, 16), uint64] */;
  %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%56, dtype="uint64") /* ty=Tensor[(11, 10, 16), uint64] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %61 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 2), float32] */, dtype="float32") /* ty=Tensor[(10, 2), float32] */;
  %62 = cast(%var_3308, dtype="uint16") /* ty=Tensor[(48, 4), uint16] */;
  %63 = reshape(%61, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
  %64 = reshape(%62, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %65 = @func_397(%63, %64) /* ty=(Tensor[(10, 2, 1), float32], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(16, 4, 3), uint16]) */;
  %66 = %65.3;
  %67 = cast(%66, dtype="bool") /* ty=Tensor[(16, 4, 3), bool] */;
  %68 = shape_of(%var_3308, dtype="int32") /* ty=Tensor[(2), int32] */;
  %69 = cast(%var_3308, dtype="bool") /* ty=Tensor[(48, 4), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %71 = logical_xor(%59, %60) /* ty=Tensor[(11, 10, 16), uint64] */;
  %72 = greater(%69, %70) /* ty=Tensor[(48, 4), bool] */;
  (%71, meta[relay.Constant][0] /* ty=Tensor[(10, 2), float32] */, %72)
}

def @func_11109() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %73 = @func_8161() /* ty=(Tensor[(11, 10, 16), bool],) */;
  %74 = @func_3419() /* ty=Tensor[(11, 10, 16), float64] */;
  %75 = %73.0;
  (%74, %75)
}

def @func_4068(%var_4064: Tensor[(192), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) {
  %76 = cast(meta[relay.Constant][1] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
  %77 = cast(%var_4064, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %78 = reshape(%76, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
  %79 = reshape(%77, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %80 = @func_397(%78, %79) /* ty=(Tensor[(10, 2, 1), float32], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(16, 4, 3), uint16]) */;
  %81 = @func_3768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %82 = @func_3419() /* ty=Tensor[(11, 10, 16), float64] */;
  %83 = %80.3;
  %84 = %81.0;
  (%82, %83, meta[relay.Constant][1] /* ty=Tensor[(20), float32] */, %var_4064, %84)
}

def @func_5020(%var_4994: Tensor[(16, 2, 16), float32]) -> (Tensor[(11, 10, 16), uint64], Tensor[(1760), float64], Tensor[(192), uint16], Tensor[(6, 7, 5), float32], float32, Tensor[(16, 2, 16), float64]) {
  %85 = cast(meta[relay.Constant][2] /* ty=Tensor[(1760), float64] */, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %86 = cast(meta[relay.Constant][3] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %87 = reshape(%85, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %88 = reshape(%86, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint16] */;
  %89 = @func_3331(%87, %88) /* ty=(Tensor[(11, 10, 16), uint64], Tensor[(10, 2), float32], Tensor[(48, 4), bool]) */;
  %90 = cast(-2.0977f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %91 = reshape(%90, newshape=[]) /* ty=float32 */;
  %92 = @func_2154(%91) /* ty=(Tensor[(6, 7, 5), float32],) */;
  %93 = cast(%var_4994, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
  %94 = asin(%93) /* ty=Tensor[(16, 2, 16), float32] */;
  %95 = cast(%94, dtype="float64") /* ty=Tensor[(16, 2, 16), float64] */;
  %96 = %89.0;
  %97 = %92.0;
  %98 = atan(%95) /* ty=Tensor[(16, 2, 16), float64] */;
  (%96, meta[relay.Constant][2] /* ty=Tensor[(1760), float64] */, meta[relay.Constant][3] /* ty=Tensor[(192), uint16] */, %97, -2.0977f /* ty=float32 */, %98)
}

def @func_4438() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %99 = @func_3690() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %100 = @func_3768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %101 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %102 = %99.0;
  %103 = %100.1;
  %104 = %101.0;
  (%102, %103, %104)
}

def @func_7307() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float32], Tensor[(11, 10, 16), float64]) {
  %105 = @func_5444() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(5, 16, 2), float32], Tensor[(336), uint16], Tensor[(11, 10, 16), bool]) */;
  %106 = @func_6804() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %107 = %106.1;
  %108 = cast(%107, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %109 = reshape(%108, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), bool] */;
  %110 = @func_6689(%109) /* ty=(Tensor[(11, 10, 16), float32], Tensor[(11, 10, 16), bool]) */;
  %111 = @func_5909() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %112 = %105.0;
  %113 = @func_4299() /* ty=Tensor[(11, 10, 16), float64] */;
  %114 = %110.0;
  %115 = %111.0;
  (%112, %113, %107, %114, %115)
}

def @func_8104() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint16]) {
  %116 = @func_7230() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16], Tensor[(5, 16, 2), float32], Tensor[(24, 14), uint16], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(11, 10, 16), bool]) */;
  %117 = %116.0;
  %118 = @func_5875() /* ty=Tensor[(11, 10, 16), uint16] */;
  (%117, %118)
}

def @func_10129() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %119 = @func_9193() /* ty=Tensor[(11, 10, 16), float64] */;
  %120 = @func_3243() /* ty=Tensor[(11, 10, 16), float64] */;
  %121 = @func_9138() /* ty=Tensor[(11, 10, 16), float64] */;
  (%119, %120, %121)
}

def @func_10648() -> (Tensor[(11, 10, 16), float64],) {
  %122 = @func_10510() /* ty=Tensor[(11, 10, 16), float64] */;
  (%122,)
}

def @func_6563() -> (Tensor[(11, 10, 16), float64],) {
  %123 = @func_5161() /* ty=Tensor[(11, 10, 16), float64] */;
  %124 = cast(%123, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %125 = log10(%124) /* ty=Tensor[(11, 10, 16), float64] */;
  (%125,)
}

def @func_3489(%var_3483: Tensor[(11, 10, 16), float64]) -> (Tensor[(11, 10, 16), bool],) {
  %126 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %127 = %126.0;
  %128 = cast(%var_3483, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%127, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %132 = less(%130, %131) /* ty=Tensor[(11, 10, 16), bool] */;
  (%132,)
}

def @func_5161() -> Tensor[(11, 10, 16), float64] {
  %133 = @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %133.1
}

def @func_6919(%var_6904: Tensor[(256, 2), float32]) -> (Tensor[(11, 10, 16), float64], Tensor[(1760), float64], Tensor[(256, 2), float32]) {
  %134 = @func_3690() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %135 = cast(%var_6904, dtype="float32") /* ty=Tensor[(256, 2), float32] */;
  %136 = reshape(%135, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float32] */;
  %137 = @func_5020(%136) /* ty=(Tensor[(11, 10, 16), uint64], Tensor[(1760), float64], Tensor[(192), uint16], Tensor[(6, 7, 5), float32], float32, Tensor[(16, 2, 16), float64]) */;
  %138 = %134.0;
  %139 = %137.1;
  (%138, %139, %var_6904)
}

def @func_11464() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %140 = @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */;
  %141 = @func_7580() /* ty=Tensor[(11, 10, 16), float64] */;
  %142 = %140.0;
  (%141, %142)
}

def @func_11395() -> Tensor[(512), uint16] {
  %143 = @func_7997() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16]) */;
  %143.1
}

def @func_5760(%var_5691: Tensor[(8, 13, 13), uint16], %var_5692: Tensor[(8, 13, 13), uint16]) -> (Tensor[(8, 13, 13), uint16], Tensor[(11, 10, 16), bool], Tensor[(8, 13, 13), int16], Tensor[(11, 10, 16), float64]) {
  %144 = cast(%var_5692, dtype="uint16") /* ty=Tensor[(8, 13, 13), uint16] */;
  %145 = shape_of(%var_5691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%var_5691, dtype="uint16") /* ty=Tensor[(8, 13, 13), uint16] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %148 = cast(%var_5692, dtype="float32") /* ty=Tensor[(8, 13, 13), float32] */;
  %149 = atanh(%148) /* ty=Tensor[(8, 13, 13), float32] */;
  %150 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 13, 13), float32] */, dtype="int64") /* ty=Tensor[(8, 13, 13), int64] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="int64") /* ty=Tensor[(8, 13, 13), int64] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %154 = logical_xor(%152, %153) /* ty=Tensor[(8, 13, 13), int64] */;
  %155 = cast(%154, dtype="int16") /* ty=Tensor[(8, 13, 13), int16] */;
  %156 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%149, dtype="int16") /* ty=Tensor[(8, 13, 13), int16] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %159 = @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */;
  %160 = bitwise_xor(%146, %147) /* ty=Tensor[(8, 13, 13), uint16] */;
  %161 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  %162 = left_shift(%157, %158) /* ty=Tensor[(8, 13, 13), int16] */;
  %163 = %159.0;
  (%160, %161, %162, %163)
}

def @func_4353(%var_4346: Tensor[(13, 1, 15), float64], %var_4349: Tensor[(13, 5, 15), float64]) -> (Tensor[(13, 1, 15), float64], Tensor[(13, 5, 15), int64]) {
  %164 = cast(%var_4346, dtype="float64") /* ty=Tensor[(13, 1, 15), float64] */;
  %165 = cast(%var_4346, dtype="int64") /* ty=Tensor[(13, 1, 15), int64] */;
  %166 = cast(%var_4349, dtype="int64") /* ty=Tensor[(13, 5, 15), int64] */;
  %167 = log10(%164) /* ty=Tensor[(13, 1, 15), float64] */;
  %168 = logical_xor(%165, %166) /* ty=Tensor[(13, 5, 15), int64] */;
  (%167, %168)
}

def @func_11488() -> Tensor[(11, 10, 16), bool] {
  %169 = @func_4703() /* ty=(Tensor[(11, 10, 16), bool],) */;
  %169.0
}

def @func_6079() -> Tensor[(11, 10, 16), float64] {
  %170 = @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %170.0
}

def @func_10860() -> Tensor[(11, 10, 16), bool] {
  %171 = @func_8161() /* ty=(Tensor[(11, 10, 16), bool],) */;
  %171.0
}

def @func_9728(%var_9695: Tensor[(15, 6, 2), float32], %var_9701: Tensor[(16, 10), float32]) -> (Tensor[(15, 6, 2), uint64], Tensor[(5, 16, 2), float32], Tensor[(16, 10), float32], Tensor[(11, 10, 16), float32], Tensor[(1, 1760), float64]) {
  %172 = @func_4090() /* ty=(Tensor[(15, 6, 2), float32],) */;
  %173 = %172.0;
  %174 = cast(%var_9695, dtype="uint64") /* ty=Tensor[(15, 6, 2), uint64] */;
  %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%173, dtype="uint64") /* ty=Tensor[(15, 6, 2), uint64] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %178 = cast(%var_9701, dtype="float32") /* ty=Tensor[(16, 10), float32] */;
  %179 = reshape(%178, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), float32] */;
  %180 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 1760), float64] */, dtype="float64") /* ty=Tensor[(1, 1760), float64] */;
  %181 = reshape(%180, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %182 = @func_4201(%181) /* ty=(Tensor[(11, 10, 16), float32],) */;
  %183 = logical_xor(%176, %177) /* ty=Tensor[(15, 6, 2), uint64] */;
  %184 = @func_972(%179) /* ty=Tensor[(5, 16, 2), float32] */;
  %185 = %182.0;
  (%183, %184, %var_9701, %185, meta[relay.Constant][5] /* ty=Tensor[(1, 1760), float64] */)
}

def @func_3635(%var_3593: Tensor[(14, 7, 8), float32], %var_3598: Tensor[(192), uint16]) -> (Tensor[(192), uint16], Tensor[(1760), uint32], Tensor[(14, 7, 8), float64], Tensor[(14, 7, 8), float64]) {
  %186 = cast(meta[relay.Constant][6] /* ty=Tensor[(1760), float64] */, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %187 = cast(%var_3598, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %188 = reshape(%186, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %189 = reshape(%187, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint16] */;
  %190 = @func_3331(%188, %189) /* ty=(Tensor[(11, 10, 16), uint64], Tensor[(10, 2), float32], Tensor[(48, 4), bool]) */;
  %191 = %190.0;
  %192 = cast(%191, dtype="uint32") /* ty=Tensor[(11, 10, 16), uint32] */;
  %193 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(1760), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %194 = cast(meta[relay.Constant][6] /* ty=Tensor[(1760), float64] */, dtype="uint32") /* ty=Tensor[(1760), uint32] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %196 = cast(%var_3593, dtype="float32") /* ty=Tensor[(14, 7, 8), float32] */;
  %197 = log(%196) /* ty=Tensor[(14, 7, 8), float32] */;
  %198 = cast(%197, dtype="float64") /* ty=Tensor[(14, 7, 8), float64] */;
  %199 = cast(%197, dtype="float32") /* ty=Tensor[(14, 7, 8), float32] */;
  %200 = sigmoid(%199) /* ty=Tensor[(14, 7, 8), float32] */;
  %201 = cast(%200, dtype="float64") /* ty=Tensor[(14, 7, 8), float64] */;
  %202 = minimum(%194, %195) /* ty=Tensor[(1760), uint32] */;
  %203 = cos(%198) /* ty=Tensor[(14, 7, 8), float64] */;
  %204 = cosh(%201) /* ty=Tensor[(14, 7, 8), float64] */;
  (%var_3598, %202, %203, %204)
}

def @func_7736(%var_7697: Tensor[(168), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(168), float64], Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  %205 = cast(%var_7697, dtype="float64") /* ty=Tensor[(168), float64] */;
  %206 = reshape(%205, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %207 = @func_4325(%206) /* ty=(Tensor[(6, 14, 2), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %208 = %207.1;
  %209 = cast(%208, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %210 = reshape(%209, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %211 = @func_6043(%210) /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), int64]) */;
  %212 = @func_4299() /* ty=Tensor[(11, 10, 16), float64] */;
  %213 = %211.0;
  %214 = @func_4551() /* ty=Tensor[(11, 10, 16), float64] */;
  (%212, %208, %var_7697, %213, %214)
}

def @func_5676(%var_5669: Tensor[(1, 13, 1), uint64], %var_5670: Tensor[(15, 13, 4), uint64]) -> (Tensor[(15, 13, 4), uint64],) {
  %215 = cast(%var_5669, dtype="uint64") /* ty=Tensor[(1, 13, 1), uint64] */;
  %216 = cast(%var_5670, dtype="uint64") /* ty=Tensor[(15, 13, 4), uint64] */;
  %217 = right_shift(%215, %216) /* ty=Tensor[(15, 13, 4), uint64] */;
  (%217,)
}

def @func_6738() -> Tensor[(11, 10, 16), float64] {
  @func_4551() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_8345() -> Tensor[(11, 10, 16), float64] {
  %218 = @func_6738() /* ty=Tensor[(11, 10, 16), float64] */;
  %219 = cast(%218, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  log2(%219) /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_5336(%var_5332: Tensor[(4, 196), float32]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), float64], Tensor[(14, 7, 8), float64], Tensor[(4, 196), float32]) {
  %220 = @func_3768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %221 = @func_5087() /* ty=(Tensor[(11, 10, 16), uint16],) */;
  %222 = cast(%var_5332, dtype="float32") /* ty=Tensor[(4, 196), float32] */;
  %223 = reshape(%222, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %224 = @func_4985(%223) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(14, 7, 8), float64], Tensor[(784), float32], Tensor[(11, 10, 16), bool]) */;
  %225 = %220.1;
  %226 = %221.0;
  %227 = @func_4831() /* ty=Tensor[(11, 10, 16), float64] */;
  %228 = %224.2;
  (%225, %226, %227, %228, %var_5332)
}

def @func_10575(%var_10558: Tensor[(15, 9, 10), bool], %var_10559: Tensor[(15, 9, 10), bool]) -> (Tensor[(15, 9, 10), bool], Tensor[(192), uint16], Tensor[(15, 9, 10), float64]) {
  %229 = cast(%var_10559, dtype="bool") /* ty=Tensor[(15, 9, 10), bool] */;
  %230 = shape_of(%var_10558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%var_10558, dtype="bool") /* ty=Tensor[(15, 9, 10), bool] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %233 = @func_4232() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(192), uint16], Tensor[(784, 1), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) */;
  %234 = cast(%var_10558, dtype="float64") /* ty=Tensor[(15, 9, 10), float64] */;
  %235 = shape_of(%var_10559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%var_10559, dtype="float64") /* ty=Tensor[(15, 9, 10), float64] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %238 = logical_and(%231, %232) /* ty=Tensor[(15, 9, 10), bool] */;
  %239 = %233.4;
  %240 = floor_mod(%236, %237) /* ty=Tensor[(15, 9, 10), float64] */;
  (%238, %239, %240)
}

def @func_4325(%var_4302: Tensor[(6, 14, 2), float64]) -> (Tensor[(6, 14, 2), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %241 = cast(%var_4302, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
  %242 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %243 = asin(%241) /* ty=Tensor[(6, 14, 2), float64] */;
  %244 = @func_4244() /* ty=Tensor[(11, 10, 16), float64] */;
  %245 = @func_4244() /* ty=Tensor[(11, 10, 16), float64] */;
  %246 = %242.0;
  (%243, %244, %245, %246)
}

def @func_5561(%var_5557: Tensor[(9, 9, 16), float64]) -> Tensor[(9, 9, 16), float64] {
  %247 = cast(%var_5557, dtype="float64") /* ty=Tensor[(9, 9, 16), float64] */;
  asinh(%247) /* ty=Tensor[(9, 9, 16), float64] */
}

def @func_8028() -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  %248 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  %249 = @func_4551() /* ty=Tensor[(11, 10, 16), float64] */;
  (%248, %249)
}

def @func_3690() -> (Tensor[(11, 10, 16), float64],) {
  %250 = @func_3243() /* ty=Tensor[(11, 10, 16), float64] */;
  (%250,)
}

def @func_6353() -> (Tensor[(11, 10, 16), float64],) {
  %251 = @func_5161() /* ty=Tensor[(11, 10, 16), float64] */;
  (%251,)
}

def @func_4009() -> (Tensor[(11, 10, 16), float64],) {
  %252 = @func_3889() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
  %253 = %252.1;
  (%253,)
}

def @func_8533() -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  %254 = @func_8161() /* ty=(Tensor[(11, 10, 16), bool],) */;
  %255 = %254.0;
  %256 = @func_4831() /* ty=Tensor[(11, 10, 16), float64] */;
  (%255, %256)
}

def @func_10544() -> Tensor[(11, 10, 16), float64] {
  %257 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %257.0
}

def @func_12181() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %258 = @func_11793() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %259 = @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */;
  %260 = %258.0;
  %261 = %259.3;
  (%260, %261)
}

def @func_3768() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %262 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %263 = %262.0;
  %264 = @func_3419() /* ty=Tensor[(11, 10, 16), float64] */;
  (%263, %264)
}

def @func_9193() -> Tensor[(11, 10, 16), float64] {
  @func_4244() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_6521() -> (Tensor[(11, 10, 16), float64], Tensor[(975), float64], Tensor[(975), float64]) {
  %265 = @func_5511() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %266 = cast(meta[relay.Constant][7] /* ty=Tensor[(975), float64] */, dtype="float64") /* ty=Tensor[(975), float64] */;
  %267 = reshape(%266, newshape=[975]) /* ty=Tensor[(975), float64] */;
  %268 = @func_6231(%267) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(8, 1, 2), float64], Tensor[(16), float64], Tensor[(13, 5, 15), int64], Tensor[(195), float64], Tensor[(975), float64]) */;
  %269 = %265.0;
  %270 = %268.5;
  (%269, %270, meta[relay.Constant][7] /* ty=Tensor[(975), float64] */)
}

def @func_9053() -> (Tensor[(11, 10, 16), int16],) {
  %271 = @func_6285() /* ty=(Tensor[(11, 10, 16), int16],) */;
  %272 = %271.0;
  (%272,)
}

def @func_3419() -> Tensor[(11, 10, 16), float64] {
  %273 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %273.0
}

def @func_8582() -> (Tensor[(11, 10, 16), uint16],) {
  %274 = @func_5087() /* ty=(Tensor[(11, 10, 16), uint16],) */;
  %275 = %274.0;
  (%275,)
}

def @func_9138() -> Tensor[(11, 10, 16), float64] {
  %276 = @func_7764() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %276.0
}

def @func_5133(%var_5092: Tensor[(12, 15, 13), uint16], %var_5093: Tensor[(12, 15, 13), uint16]) -> (Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), bool]) {
  %277 = cast(%var_5092, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  %278 = cast(%var_5093, dtype="uint16") /* ty=Tensor[(12, 15, 13), uint16] */;
  %279 = shape_of(%var_5092, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%var_5092, dtype="uint16") /* ty=Tensor[(12, 15, 13), uint16] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %282 = bitwise_xor(%280, %281) /* ty=Tensor[(12, 15, 13), uint16] */;
  %283 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 15, 13), uint16] */, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %284 = shape_of(%282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%282, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %287 = tan(%277) /* ty=Tensor[(12, 15, 13), float32] */;
  %288 = less(%285, %286) /* ty=Tensor[(12, 15, 13), bool] */;
  (%287, %288)
}

def @func_6370() -> (Tensor[(11, 10, 16), float64],) {
  %289 = @func_5909() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %290 = %289.1;
  (%290,)
}

def @func_4244() -> Tensor[(11, 10, 16), float64] {
  @func_4180() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_3379() -> (Tensor[(11, 10, 16), float64],) {
  %291 = @func_3243() /* ty=Tensor[(11, 10, 16), float64] */;
  (%291,)
}

def @func_9007() -> Tensor[(11, 10, 16), bool] {
  %292 = @func_4703() /* ty=(Tensor[(11, 10, 16), bool],) */;
  %292.0
}

def @func_6285() -> (Tensor[(11, 10, 16), int16],) {
  %293 = @func_4831() /* ty=Tensor[(11, 10, 16), float64] */;
  %294 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 10, 16), float64] */, dtype="int16") /* ty=Tensor[(11, 10, 16), int16] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="int16") /* ty=Tensor[(11, 10, 16), int16] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %298 = bitwise_or(%296, %297) /* ty=Tensor[(11, 10, 16), int16] */;
  (%298,)
}

def @func_7038() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %299 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %300 = @func_5511() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %301 = %299.0;
  %302 = %300.0;
  (%301, %302)
}

def @func_4763() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool], Tensor[(48, 4), float32], Tensor[(4, 48), uint16]) {
  %303 = @func_4232() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(192), uint16], Tensor[(784, 1), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) */;
  %304 = @func_4634() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
  %305 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 48), uint16] */, dtype="uint16") /* ty=Tensor[(4, 48), uint16] */;
  %306 = reshape(%305, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint16] */;
  %307 = @func_3801(%306) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint64], Tensor[(11, 10, 16), float64], Tensor[(48, 4), float32]) */;
  %308 = %303.5;
  %309 = %304.1;
  %310 = %307.3;
  (%308, %309, %310, meta[relay.Constant][10] /* ty=Tensor[(4, 48), uint16] */)
}

def @func_9674() -> (Tensor[(11, 10, 16), float64],) {
  %311 = @func_5511() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %312 = %311.0;
  (%312,)
}

def @func_11561() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %313 = @func_7038() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %314 = %313.1;
  %315 = cast(%314, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %316 = reshape(%315, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), bool] */;
  %317 = @func_6689(%316) /* ty=(Tensor[(11, 10, 16), float32], Tensor[(11, 10, 16), bool]) */;
  %318 = %317.1;
  (%314, %318)
}

def @func_10390() -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), uint16]) {
  %319 = @func_4703() /* ty=(Tensor[(11, 10, 16), bool],) */;
  %320 = @func_8582() /* ty=(Tensor[(11, 10, 16), uint16],) */;
  %321 = %319.0;
  %322 = %320.0;
  (%321, %322)
}

def @func_9078() -> (Tensor[(15, 6, 2), float32],) {
  %323 = @func_4090() /* ty=(Tensor[(15, 6, 2), float32],) */;
  %324 = %323.0;
  (%324,)
}

def @func_6231(%var_6206: Tensor[(975), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(8, 1, 2), float64], Tensor[(16), float64], Tensor[(13, 5, 15), int64], Tensor[(195), float64], Tensor[(975), float64]) {
  %325 = @func_4763() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool], Tensor[(48, 4), float32], Tensor[(4, 48), uint16]) */;
  %326 = cast(meta[relay.Constant][11] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %327 = reshape(%326, newshape=[8, 1, 2]) /* ty=Tensor[(8, 1, 2), float64] */;
  %328 = cast(meta[relay.Constant][12] /* ty=Tensor[(195), float64] */, dtype="float64") /* ty=Tensor[(195), float64] */;
  %329 = cast(%var_6206, dtype="float64") /* ty=Tensor[(975), float64] */;
  %330 = reshape(%328, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), float64] */;
  %331 = reshape(%329, newshape=[13, 5, 15]) /* ty=Tensor[(13, 5, 15), float64] */;
  %332 = @func_4353(%330, %331) /* ty=(Tensor[(13, 1, 15), float64], Tensor[(13, 5, 15), int64]) */;
  %333 = %325.0;
  %334 = @func_6010(%327) /* ty=Tensor[(8, 1, 2), float64] */;
  %335 = %332.1;
  (%333, %334, meta[relay.Constant][11] /* ty=Tensor[(16), float64] */, %335, meta[relay.Constant][12] /* ty=Tensor[(195), float64] */, %var_6206)
}

def @func_11829() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %336 = @func_4739() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %337 = @func_11561() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
  %338 = %336.2;
  %339 = %337.0;
  (%338, %339)
}

def @func_8785(%var_8766: uint8, %var_8767: Tensor[(12, 11, 10), uint8]) -> Tensor[(12, 11, 10), bool] {
  %340 = cast(%var_8766, dtype="bool") /* ty=bool */;
  %341 = cast(%var_8767, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
  equal(%340, %341) /* ty=Tensor[(12, 11, 10), bool] */
}

def @func_6043(%var_6032: Tensor[(11, 10, 16), float64]) -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), int64]) {
  %342 = @func_4244() /* ty=Tensor[(11, 10, 16), float64] */;
  %343 = cast(%var_6032, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%342, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %347 = @func_4551() /* ty=Tensor[(11, 10, 16), float64] */;
  %348 = cast(%var_6032, dtype="int64") /* ty=Tensor[(11, 10, 16), int64] */;
  %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%347, dtype="int64") /* ty=Tensor[(11, 10, 16), int64] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %352 = logical_or(%345, %346) /* ty=Tensor[(11, 10, 16), bool] */;
  %353 = bitwise_xor(%350, %351) /* ty=Tensor[(11, 10, 16), int64] */;
  (%352, %353)
}

def @func_6898() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %354 = @func_6079() /* ty=Tensor[(11, 10, 16), float64] */;
  %355 = @func_6450() /* ty=Tensor[(11, 10, 16), float64] */;
  %356 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  (%354, %355, %356)
}

def @func_7230() -> (Tensor[(11, 10, 16), float64], Tensor[(512), uint16], Tensor[(5, 16, 2), float32], Tensor[(24, 14), uint16], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(11, 10, 16), bool]) {
  %357 = @func_5612() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %358 = @func_7124() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16]) */;
  %359 = cast(meta[relay.Constant][13] /* ty=Tensor[(24, 14), uint16] */, dtype="uint16") /* ty=Tensor[(24, 14), uint16] */;
  %360 = reshape(%359, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), uint16] */;
  %361 = @func_2283(%360) /* ty=(Tensor[(14, 2, 12), bool], Tensor[(5, 16, 2), float32], Tensor[(2, 80), float32], Tensor[(5, 16, 2), float32]) */;
  %362 = cast(meta[relay.Constant][14] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %363 = cast(meta[relay.Constant][14] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %364 = reshape(%362, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %365 = reshape(%363, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %366 = @func_238(%364, %365) /* ty=(Tensor[(16, 4, 3), uint16],) */;
  %367 = %357.1;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %369 = reshape(%368, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %370 = @func_3489(%369) /* ty=(Tensor[(11, 10, 16), bool],) */;
  %371 = %358.1;
  %372 = %361.3;
  %373 = %366.0;
  %374 = %370.0;
  (%367, %371, %372, meta[relay.Constant][13] /* ty=Tensor[(24, 14), uint16] */, %373, meta[relay.Constant][14] /* ty=Tensor[(192), uint16] */, %374)
}

def @func_5652() -> (Tensor[(11, 10, 16), float64],) {
  %375 = @func_3768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %376 = %375.0;
  (%376,)
}

def @func_5909() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %377 = @func_4739() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %378 = @func_4232() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(192), uint16], Tensor[(784, 1), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) */;
  %379 = %377.1;
  %380 = %378.5;
  (%379, %380)
}

def @func_8943() -> (Tensor[(11, 10, 16), uint16], Tensor[(3, 780), uint8]) {
  %381 = @func_5087() /* ty=(Tensor[(11, 10, 16), uint16],) */;
  %382 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 780), uint16] */, dtype="float32") /* ty=Tensor[(3, 780), float32] */;
  %383 = atan(%382) /* ty=Tensor[(3, 780), float32] */;
  %384 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 780), uint16] */, dtype="uint16") /* ty=Tensor[(3, 780), uint16] */;
  %385 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 780), uint16] */, dtype="uint16") /* ty=Tensor[(3, 780), uint16] */;
  %386 = reshape(%384, newshape=[12, 15, 13]) /* ty=Tensor[(12, 15, 13), uint16] */;
  %387 = reshape(%385, newshape=[12, 15, 13]) /* ty=Tensor[(12, 15, 13), uint16] */;
  %388 = @func_5133(%386, %387) /* ty=(Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), bool]) */;
  %389 = %388.0;
  %390 = cast(%389, dtype="uint8") /* ty=Tensor[(12, 15, 13), uint8] */;
  %391 = shape_of(%383, dtype="int32") /* ty=Tensor[(2), int32] */;
  %392 = cast(%383, dtype="uint8") /* ty=Tensor[(3, 780), uint8] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %394 = %381.0;
  %395 = bitwise_xor(%392, %393) /* ty=Tensor[(3, 780), uint8] */;
  (%394, %395)
}

def @main(%var_12652: Tensor[(14, 11, 3), float32]) -> (Tensor[(14, 11, 3), float64], Tensor[(11, 10, 16), float64], Tensor[(14, 11, 3), bool]) {
  %396 = cast(%var_12652, dtype="float64") /* ty=Tensor[(14, 11, 3), float64] */;
  %397 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(14, 11, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 11, 3), float32] */, dtype="float64") /* ty=Tensor[(14, 11, 3), float64] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %400 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 11, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 11, 3), float32] */;
  %401 = cosh(%400) /* ty=Tensor[(14, 11, 3), float32] */;
  %402 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 11, 3), float32] */, dtype="uint8") /* ty=Tensor[(14, 11, 3), uint8] */;
  %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%401, dtype="uint8") /* ty=Tensor[(14, 11, 3), uint8] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %406 = multiply(%404, %405) /* ty=Tensor[(14, 11, 3), uint8] */;
  %407 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 11, 3), float32] */, dtype="bool") /* ty=Tensor[(14, 11, 3), bool] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%406, dtype="bool") /* ty=Tensor[(14, 11, 3), bool] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %411 = floor_mod(%398, %399) /* ty=Tensor[(14, 11, 3), float64] */;
  %412 = @func_11409() /* ty=Tensor[(11, 10, 16), float64] */;
  %413 = equal(%409, %410) /* ty=Tensor[(14, 11, 3), bool] */;
  (%411, %412, %413)
}

def @func_3251() -> (Tensor[(11, 10, 16), float64],) {
  %414 = @func_3243() /* ty=Tensor[(11, 10, 16), float64] */;
  (%414,)
}

def @func_10851() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %415 = @func_10768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(168), float64], Tensor[(9, 9, 16), float64], Tensor[(1, 1296), float64]) */;
  %416 = %415.4;
  %417 = @func_4551() /* ty=Tensor[(11, 10, 16), float64] */;
  %418 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  (%416, %417, %418)
}

def @func_2283(%var_2259: Tensor[(14, 2, 12), uint16]) -> (Tensor[(14, 2, 12), bool], Tensor[(5, 16, 2), float32], Tensor[(2, 80), float32], Tensor[(5, 16, 2), float32]) {
  %419 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 1, 12), uint16] */, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
  %420 = cast(%var_2259, dtype="bool") /* ty=Tensor[(14, 2, 12), bool] */;
  %421 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 80), float32] */, dtype="float32") /* ty=Tensor[(2, 80), float32] */;
  %422 = reshape(%421, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), float32] */;
  %423 = @func_972(%422) /* ty=Tensor[(5, 16, 2), float32] */;
  %424 = cast(%423, dtype="float32") /* ty=Tensor[(5, 16, 2), float32] */;
  %425 = reshape(%424, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), float32] */;
  %426 = equal(%419, %420) /* ty=Tensor[(14, 2, 12), bool] */;
  %427 = @func_972(%425) /* ty=Tensor[(5, 16, 2), float32] */;
  (%426, %423, meta[relay.Constant][18] /* ty=Tensor[(2, 80), float32] */, %427)
}

def @func_4201(%var_4190: Tensor[(11, 10, 16), float64]) -> (Tensor[(11, 10, 16), float32],) {
  %428 = @func_3551() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %429 = %428.0;
  %430 = cast(%var_4190, dtype="uint16") /* ty=Tensor[(11, 10, 16), uint16] */;
  %431 = shape_of(%429, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%429, dtype="uint16") /* ty=Tensor[(11, 10, 16), uint16] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %434 = add(%432, %433) /* ty=Tensor[(11, 10, 16), uint16] */;
  %435 = cast(%434, dtype="float32") /* ty=Tensor[(11, 10, 16), float32] */;
  %436 = exp(%435) /* ty=Tensor[(11, 10, 16), float32] */;
  (%436,)
}

def @func_3801(%var_3794: Tensor[(48, 4), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint64], Tensor[(11, 10, 16), float64], Tensor[(48, 4), float32]) {
  %437 = @func_3419() /* ty=Tensor[(11, 10, 16), float64] */;
  %438 = cast(%437, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %439 = cast(%var_3794, dtype="uint16") /* ty=Tensor[(48, 4), uint16] */;
  %440 = reshape(%438, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %441 = reshape(%439, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint16] */;
  %442 = @func_3331(%440, %441) /* ty=(Tensor[(11, 10, 16), uint64], Tensor[(10, 2), float32], Tensor[(48, 4), bool]) */;
  %443 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %444 = cast(%var_3794, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %445 = %442.0;
  %446 = %443.0;
  %447 = asin(%444) /* ty=Tensor[(48, 4), float32] */;
  (%437, %445, %446, %447)
}

def @func_12454() -> (Tensor[(11, 10, 16), uint16],) {
  %448 = @func_8582() /* ty=(Tensor[(11, 10, 16), uint16],) */;
  %449 = %448.0;
  (%449,)
}

def @func_4703() -> (Tensor[(11, 10, 16), bool],) {
  %450 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  (%450,)
}

def @func_3889() -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  %451 = @func_3551() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %452 = %451.0;
  %453 = @func_3551() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %454 = %453.0;
  %455 = cast(%454, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %456 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%452, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %459 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %460 = less_equal(%457, %458) /* ty=Tensor[(11, 10, 16), bool] */;
  %461 = %459.0;
  (%460, %461)
}

def @func_4299() -> Tensor[(11, 10, 16), float64] {
  @func_3419() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_7891() -> (Tensor[(11, 10, 16), float64],) {
  %462 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %463 = %462.0;
  (%463,)
}

def @func_7438() -> (Tensor[(11, 10, 16), float64],) {
  %464 = @func_6370() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %465 = %464.0;
  (%465,)
}

def @func_11628() -> (Tensor[(11, 10, 16), float64], Tensor[(3, 5, 15), int64], Tensor[(25, 9), int64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %466 = cast(meta[relay.Constant][19] /* ty=Tensor[(25, 9), int64] */, dtype="int64") /* ty=Tensor[(25, 9), int64] */;
  %467 = cast(meta[relay.Constant][19] /* ty=Tensor[(25, 9), int64] */, dtype="int64") /* ty=Tensor[(25, 9), int64] */;
  %468 = reshape(%466, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
  %469 = reshape(%467, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
  %470 = @func_8285(%468, %469) /* ty=(Tensor[(3, 5, 15), int64],) */;
  %471 = @func_10193() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %472 = @func_8533() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
  %473 = @func_6738() /* ty=Tensor[(11, 10, 16), float64] */;
  %474 = %470.0;
  %475 = %471.0;
  %476 = %472.0;
  (%473, %474, meta[relay.Constant][19] /* ty=Tensor[(25, 9), int64] */, %475, %476)
}

def @func_5233(%var_5195: Tensor[(13, 2, 4), int16], %var_5223: Tensor[(96, 2), uint16]) -> (Tensor[(13, 2, 4), bool], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(96, 2), uint16], Tensor[(13, 2, 4), float64]) {
  %477 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 2, 4), int16] */, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  %478 = shape_of(%var_5195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%var_5195, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %481 = greater(%479, %480) /* ty=Tensor[(13, 2, 4), bool] */;
  %482 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 2, 4), int16] */, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%481, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %486 = cast(meta[relay.Constant][21] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
  %487 = cast(%var_5223, dtype="uint16") /* ty=Tensor[(96, 2), uint16] */;
  %488 = reshape(%486, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
  %489 = reshape(%487, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %490 = @func_397(%488, %489) /* ty=(Tensor[(10, 2, 1), float32], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(16, 4, 3), uint16]) */;
  %491 = cast(%var_5195, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %492 = asinh(%491) /* ty=Tensor[(13, 2, 4), float32] */;
  %493 = cast(%492, dtype="float64") /* ty=Tensor[(13, 2, 4), float64] */;
  %494 = logical_and(%484, %485) /* ty=Tensor[(13, 2, 4), bool] */;
  %495 = %490.3;
  %496 = cosh(%493) /* ty=Tensor[(13, 2, 4), float64] */;
  (%494, %495, meta[relay.Constant][21] /* ty=Tensor[(20), float32] */, %var_5223, %496)
}

def @func_4739() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %497 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %498 = @func_3690() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %499 = @func_4180() /* ty=Tensor[(11, 10, 16), float64] */;
  %500 = %497.0;
  %501 = %498.0;
  %502 = @func_4244() /* ty=Tensor[(11, 10, 16), float64] */;
  (%499, %500, %501, %502)
}

def @func_7264(%var_7234: Tensor[(9, 14, 7), float64]) -> (Tensor[(9, 14, 7), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %503 = cast(%var_7234, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %504 = @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %505 = asin(%503) /* ty=Tensor[(9, 14, 7), float64] */;
  %506 = @func_3419() /* ty=Tensor[(11, 10, 16), float64] */;
  %507 = @func_4180() /* ty=Tensor[(11, 10, 16), float64] */;
  %508 = %504.2;
  (%505, %506, %507, %508)
}

def @func_4985(%var_4946: Tensor[(784), float32]) -> (Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(14, 7, 8), float64], Tensor[(784), float32], Tensor[(11, 10, 16), bool]) {
  %509 = @func_4009() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %510 = %509.0;
  %511 = cast(%510, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %512 = @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */;
  %513 = cast(%var_4946, dtype="float32") /* ty=Tensor[(784), float32] */;
  %514 = %512.2;
  %515 = cast(%514, dtype="uint16") /* ty=Tensor[(24, 8), uint16] */;
  %516 = reshape(%513, newshape=[14, 7, 8]) /* ty=Tensor[(14, 7, 8), float32] */;
  %517 = reshape(%515, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %518 = @func_3635(%516, %517) /* ty=(Tensor[(192), uint16], Tensor[(1760), uint32], Tensor[(14, 7, 8), float64], Tensor[(14, 7, 8), float64]) */;
  %519 = @func_4634() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
  %520 = cos(%511) /* ty=Tensor[(11, 10, 16), float64] */;
  %521 = %518.2;
  %522 = %519.1;
  (%520, %514, %521, %var_4946, %522)
}

def @func_9989() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(192), uint16], Tensor[(8, 13, 13), int16], Tensor[(1352, 1), uint16]) {
  %523 = @func_7764() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %524 = cast(meta[relay.Constant][22] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %525 = reshape(%524, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %526 = @func_4068(%525) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) */;
  %527 = cast(meta[relay.Constant][23] /* ty=Tensor[(1352, 1), uint16] */, dtype="uint16") /* ty=Tensor[(1352, 1), uint16] */;
  %528 = cast(meta[relay.Constant][23] /* ty=Tensor[(1352, 1), uint16] */, dtype="uint16") /* ty=Tensor[(1352, 1), uint16] */;
  %529 = reshape(%527, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), uint16] */;
  %530 = reshape(%528, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), uint16] */;
  %531 = @func_5760(%529, %530) /* ty=(Tensor[(8, 13, 13), uint16], Tensor[(11, 10, 16), bool], Tensor[(8, 13, 13), int16], Tensor[(11, 10, 16), float64]) */;
  %532 = %523.0;
  %533 = %526.4;
  %534 = %531.2;
  (%532, %533, meta[relay.Constant][22] /* ty=Tensor[(192), uint16] */, %534, meta[relay.Constant][23] /* ty=Tensor[(1352, 1), uint16] */)
}

def @func_11277(%var_11243: Tensor[(1, 168), float64]) -> (Tensor[(24, 8), bool], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(1, 168), float32]) {
  %535 = @func_9657() /* ty=(Tensor[(24, 8), bool], Tensor[(11, 10, 16), float64], Tensor[(512), float32], Tensor[(24, 8), float32], Tensor[(24, 8), bool]) */;
  %536 = cast(%var_11243, dtype="float64") /* ty=Tensor[(1, 168), float64] */;
  %537 = reshape(%536, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %538 = @func_7736(%537) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(168), float64], Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
  %539 = @func_9327() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
  %540 = cast(%var_11243, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %541 = sqrt(%540) /* ty=Tensor[(1, 168), float32] */;
  %542 = cast(%541, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %543 = %535.4;
  %544 = %538.1;
  %545 = %539.1;
  %546 = atanh(%542) /* ty=Tensor[(1, 168), float32] */;
  (%543, %544, %545, %546)
}

def @func_12513() -> (Tensor[(975), float64],) {
  %547 = @func_6521() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(975), float64], Tensor[(975), float64]) */;
  %548 = %547.1;
  (%548,)
}

def @func_7824() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %549 = @func_6898() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
  %550 = %549.1;
  %551 = @func_4180() /* ty=Tensor[(11, 10, 16), float64] */;
  (%550, %551)
}

def @func_8195(%var_8180: Tensor[(882), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(882), float32]) {
  %552 = @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %553 = cast(%var_8180, dtype="float64") /* ty=Tensor[(882), float64] */;
  %554 = reshape(%553, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), float64] */;
  %555 = @func_7264(%554) /* ty=(Tensor[(9, 14, 7), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %556 = cast(meta[relay.Constant][24] /* ty=Tensor[(882), float64] */, dtype="float32") /* ty=Tensor[(882), float32] */;
  %557 = shape_of(%var_8180, dtype="int32") /* ty=Tensor[(1), int32] */;
  %558 = cast(%var_8180, dtype="float32") /* ty=Tensor[(882), float32] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?), float32] */;
  %560 = %552.1;
  %561 = %555.1;
  %562 = power(%558, %559) /* ty=Tensor[(882), float32] */;
  (%560, %561, %562)
}

def @func_9046() -> (Tensor[(15, 6, 2), float32],) {
  %563 = @func_4090() /* ty=(Tensor[(15, 6, 2), float32],) */;
  %564 = %563.0;
  (%564,)
}

def @func_3243() -> Tensor[(11, 10, 16), float64] {
  %565 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 10, 16), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  sigmoid(%565) /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_6689(%var_6642: Tensor[(11, 10, 16), bool]) -> (Tensor[(11, 10, 16), float32], Tensor[(11, 10, 16), bool]) {
  %566 = @func_3889() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
  %567 = %566.0;
  %568 = cast(%var_6642, dtype="float32") /* ty=Tensor[(11, 10, 16), float32] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%567, dtype="float32") /* ty=Tensor[(11, 10, 16), float32] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %572 = cast(%567, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %573 = reshape(%572, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %574 = @func_3489(%573) /* ty=(Tensor[(11, 10, 16), bool],) */;
  %575 = floor_divide(%570, %571) /* ty=Tensor[(11, 10, 16), float32] */;
  %576 = %574.0;
  (%575, %576)
}

def @func_10510() -> Tensor[(11, 10, 16), float64] {
  %577 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %577.0
}

def @func_4232() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(192), uint16], Tensor[(784, 1), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) {
  %578 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %579 = @func_3690() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %580 = cast(meta[relay.Constant][26] /* ty=Tensor[(784, 1), float32] */, dtype="float32") /* ty=Tensor[(784, 1), float32] */;
  %581 = cast(meta[relay.Constant][27] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %582 = reshape(%580, newshape=[14, 7, 8]) /* ty=Tensor[(14, 7, 8), float32] */;
  %583 = reshape(%581, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %584 = @func_3635(%582, %583) /* ty=(Tensor[(192), uint16], Tensor[(1760), uint32], Tensor[(14, 7, 8), float64], Tensor[(14, 7, 8), float64]) */;
  %585 = %578.0;
  %586 = %579.0;
  %587 = %584.0;
  %588 = @func_3419() /* ty=Tensor[(11, 10, 16), float64] */;
  (%585, %586, %587, meta[relay.Constant][26] /* ty=Tensor[(784, 1), float32] */, meta[relay.Constant][27] /* ty=Tensor[(192), uint16] */, %588)
}

def @func_10193() -> (Tensor[(11, 10, 16), float64],) {
  %589 = @func_5161() /* ty=Tensor[(11, 10, 16), float64] */;
  (%589,)
}

def @func_3551() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %590 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %591 = @func_3243() /* ty=Tensor[(11, 10, 16), float64] */;
  %592 = %590.0;
  (%591, %592)
}

def @func_10218() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %593 = @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */;
  %594 = @func_8028() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
  %595 = %593.0;
  %596 = %594.1;
  (%595, %596)
}

def @func_5087() -> (Tensor[(11, 10, 16), uint16],) {
  %597 = @func_4551() /* ty=Tensor[(11, 10, 16), float64] */;
  %598 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 10, 16), float64] */, dtype="uint16") /* ty=Tensor[(11, 10, 16), uint16] */;
  %599 = shape_of(%597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%597, dtype="uint16") /* ty=Tensor[(11, 10, 16), uint16] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %602 = maximum(%600, %601) /* ty=Tensor[(11, 10, 16), uint16] */;
  (%602,)
}

def @func_10326(%var_10307: Tensor[(192), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(15, 6, 2), float64], Tensor[(1760), uint32], Tensor[(784), float32], Tensor[(192), uint16], Tensor[(24, 8), float32]) {
  %603 = @func_4763() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool], Tensor[(48, 4), float32], Tensor[(4, 48), uint16]) */;
  %604 = @func_9300() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %605 = @func_9078() /* ty=(Tensor[(15, 6, 2), float32],) */;
  %606 = %605.0;
  %607 = cast(%606, dtype="float64") /* ty=Tensor[(15, 6, 2), float64] */;
  %608 = cast(meta[relay.Constant][29] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %609 = cast(%var_10307, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %610 = reshape(%608, newshape=[14, 7, 8]) /* ty=Tensor[(14, 7, 8), float32] */;
  %611 = reshape(%609, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %612 = @func_3635(%610, %611) /* ty=(Tensor[(192), uint16], Tensor[(1760), uint32], Tensor[(14, 7, 8), float64], Tensor[(14, 7, 8), float64]) */;
  %613 = cast(meta[relay.Constant][29] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %614 = reshape(%613, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %615 = @func_4985(%614) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(14, 7, 8), float64], Tensor[(784), float32], Tensor[(11, 10, 16), bool]) */;
  %616 = %603.0;
  %617 = %604.0;
  %618 = sinh(%607) /* ty=Tensor[(15, 6, 2), float64] */;
  %619 = %612.1;
  %620 = %615.1;
  (%616, %617, %618, %619, meta[relay.Constant][29] /* ty=Tensor[(784), float32] */, %var_10307, %620)
}

def @func_7764() -> (Tensor[(11, 10, 16), float64],) {
  %621 = @func_4739() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %622 = %621.0;
  (%622,)
}

def @func_7366() -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  %623 = @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %624 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  %625 = %623.0;
  (%624, %625)
}

def @func_5379() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %626 = @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %627 = %626.1;
  %628 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  (%627, %628)
}

def @func_8829() -> (Tensor[(11, 10, 16), float64],) {
  %629 = @func_7438() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %630 = %629.0;
  (%630,)
}

def @func_4634() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %631 = @func_4244() /* ty=Tensor[(11, 10, 16), float64] */;
  %632 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  (%631, %632)
}

def @func_2154(%var_2148: float32) -> (Tensor[(6, 7, 5), float32],) {
  %633 = cast(%var_2148, dtype="float32") /* ty=float32 */;
  %634 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 7, 5), float32] */, dtype="float32") /* ty=Tensor[(6, 7, 5), float32] */;
  %635 = power(%633, %634) /* ty=Tensor[(6, 7, 5), float32] */;
  (%635,)
}

def @func_7124() -> (Tensor[(11, 10, 16), float64], Tensor[(512), uint16]) {
  %636 = @func_3768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %637 = cast(meta[relay.Constant][31] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %638 = reshape(%637, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float32] */;
  %639 = @func_5020(%638) /* ty=(Tensor[(11, 10, 16), uint64], Tensor[(1760), float64], Tensor[(192), uint16], Tensor[(6, 7, 5), float32], float32, Tensor[(16, 2, 16), float64]) */;
  %640 = %639.5;
  %641 = cast(%640, dtype="uint16") /* ty=Tensor[(16, 2, 16), uint16] */;
  %642 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(512), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %643 = cast(meta[relay.Constant][31] /* ty=Tensor[(512), float32] */, dtype="uint16") /* ty=Tensor[(512), uint16] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %645 = %636.1;
  %646 = bitwise_xor(%643, %644) /* ty=Tensor[(512), uint16] */;
  (%645, %646)
}

def @func_9439(%var_9417: Tensor[(1, 784), float32], %var_9418: Tensor[(192), uint16]) -> (Tensor[(1, 784), float32], Tensor[(192), uint16], Tensor[(1760), int16]) {
  %647 = cast(%var_9417, dtype="float32") /* ty=Tensor[(1, 784), float32] */;
  %648 = cast(%var_9418, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %649 = reshape(%647, newshape=[14, 7, 8]) /* ty=Tensor[(14, 7, 8), float32] */;
  %650 = reshape(%648, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %651 = @func_3635(%649, %650) /* ty=(Tensor[(192), uint16], Tensor[(1760), uint32], Tensor[(14, 7, 8), float64], Tensor[(14, 7, 8), float64]) */;
  %652 = %651.1;
  %653 = @func_9193() /* ty=Tensor[(11, 10, 16), float64] */;
  %654 = cast(%653, dtype="int16") /* ty=Tensor[(11, 10, 16), int16] */;
  %655 = shape_of(%652, dtype="int32") /* ty=Tensor[(1), int32] */;
  %656 = cast(%652, dtype="int16") /* ty=Tensor[(1760), int16] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?), int16] */;
  %658 = multiply(%656, %657) /* ty=Tensor[(1760), int16] */;
  (%var_9417, %var_9418, %658)
}

def @func_11220() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %659 = @func_6804() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %660 = @func_5612() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %661 = @func_11109() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
  %662 = @func_7580() /* ty=Tensor[(11, 10, 16), float64] */;
  %663 = %659.0;
  %664 = %660.0;
  %665 = %661.0;
  (%662, %663, %664, %665)
}

def @func_8863() -> Tensor[(11, 10, 16), float64] {
  %666 = @func_7438() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %666.0
}

def @func_11350(%var_11346: Tensor[(6, 5, 8), uint8]) -> (Tensor[(6, 5, 8), bool], Tensor[(6, 5, 8), bool]) {
  %667 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 5, 8), uint8] */, dtype="bool") /* ty=Tensor[(6, 5, 8), bool] */;
  %668 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(6, 5, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 5, 8), uint8] */, dtype="bool") /* ty=Tensor[(6, 5, 8), bool] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %671 = cast(%var_11346, dtype="bool") /* ty=Tensor[(6, 5, 8), bool] */;
  %672 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(6, 5, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(meta[relay.Constant][32] /* ty=Tensor[(6, 5, 8), uint8] */, dtype="bool") /* ty=Tensor[(6, 5, 8), bool] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %675 = less(%669, %670) /* ty=Tensor[(6, 5, 8), bool] */;
  %676 = logical_or(%673, %674) /* ty=Tensor[(6, 5, 8), bool] */;
  (%675, %676)
}

def @func_9106(%var_9101: Tensor[(6, 15, 15), bool], %var_9102: Tensor[(6, 15, 15), bool]) -> (Tensor[(6, 15, 15), bool],) {
  %677 = cast(%var_9102, dtype="bool") /* ty=Tensor[(6, 15, 15), bool] */;
  %678 = shape_of(%var_9101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%var_9101, dtype="bool") /* ty=Tensor[(6, 15, 15), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %681 = logical_and(%679, %680) /* ty=Tensor[(6, 15, 15), bool] */;
  (%681,)
}

def @func_10092() -> (Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), bool], Tensor[(2, 12, 6), uint64], Tensor[(144), uint64]) {
  %682 = @func_5087() /* ty=(Tensor[(11, 10, 16), uint16],) */;
  %683 = @func_8161() /* ty=(Tensor[(11, 10, 16), bool],) */;
  %684 = cast(meta[relay.Constant][34] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %685 = cast(meta[relay.Constant][34] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %686 = reshape(%684, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), uint64] */;
  %687 = reshape(%685, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), uint64] */;
  %688 = @func_7838(%686, %687) /* ty=(Tensor[(2, 12, 6), uint64],) */;
  %689 = %682.0;
  %690 = %683.0;
  %691 = %688.0;
  (%689, %690, %691, meta[relay.Constant][34] /* ty=Tensor[(144), uint64] */)
}

def @func_12524() -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  %692 = @func_8738() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %693 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  %694 = %692.0;
  (%693, %694)
}

def @func_10467(%var_10429: Tensor[(882), float64], %var_10457: Tensor[(192), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(1, 1760), float64], Tensor[(180), float32], Tensor[(160), float32], Tensor[(11, 10, 16), float64], Tensor[(15, 6, 2), float64], Tensor[(192), uint16], Tensor[(882), float32]) {
  %695 = @func_6353() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %696 = @func_8582() /* ty=(Tensor[(11, 10, 16), uint16],) */;
  %697 = cast(%var_10429, dtype="float64") /* ty=Tensor[(882), float64] */;
  %698 = reshape(%697, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), float64] */;
  %699 = @func_7264(%698) /* ty=(Tensor[(9, 14, 7), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %700 = @func_6353() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %701 = cast(meta[relay.Constant][35] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %702 = cast(meta[relay.Constant][36] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
  %703 = reshape(%701, newshape=[15, 6, 2]) /* ty=Tensor[(15, 6, 2), float32] */;
  %704 = reshape(%702, newshape=[16, 10]) /* ty=Tensor[(16, 10), float32] */;
  %705 = @func_9728(%703, %704) /* ty=(Tensor[(15, 6, 2), uint64], Tensor[(5, 16, 2), float32], Tensor[(16, 10), float32], Tensor[(11, 10, 16), float32], Tensor[(1, 1760), float64]) */;
  %706 = @func_7824() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %707 = cast(%var_10457, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %708 = reshape(%707, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %709 = @func_10326(%708) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(15, 6, 2), float64], Tensor[(1760), uint32], Tensor[(784), float32], Tensor[(192), uint16], Tensor[(24, 8), float32]) */;
  %710 = cast(%var_10429, dtype="float32") /* ty=Tensor[(882), float32] */;
  %711 = @func_6079() /* ty=Tensor[(11, 10, 16), float64] */;
  %712 = %695.0;
  %713 = %696.0;
  %714 = %699.3;
  %715 = %700.0;
  %716 = %705.4;
  %717 = %706.0;
  %718 = %709.2;
  %719 = acosh(%710) /* ty=Tensor[(882), float32] */;
  (%711, %712, %713, %714, %715, %716, meta[relay.Constant][35] /* ty=Tensor[(180), float32] */, meta[relay.Constant][36] /* ty=Tensor[(160), float32] */, %717, %718, %var_10457, %719)
}

def @func_11367() -> (Tensor[(11, 10, 16), bool],) {
  %720 = @func_11109() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
  %721 = %720.1;
  (%721,)
}

def @func_6450() -> Tensor[(11, 10, 16), float64] {
  %722 = @func_6370() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %722.0
}

def @func_5612() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %723 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %724 = %723.0;
  %725 = @func_5161() /* ty=Tensor[(11, 10, 16), float64] */;
  (%724, %725)
}

def @func_4551() -> Tensor[(11, 10, 16), float64] {
  %726 = @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %726.1
}

def @func_12636() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(15, 6, 2), float32], Tensor[(11, 10, 16), bool]) {
  %727 = @func_11464() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %728 = @func_9078() /* ty=(Tensor[(15, 6, 2), float32],) */;
  %729 = @func_8863() /* ty=Tensor[(11, 10, 16), float64] */;
  %730 = %727.1;
  %731 = %728.0;
  %732 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  (%729, %730, %731, %732)
}

def @func_12106(%var_12081: Tensor[(2, 10, 4), int16]) -> (Tensor[(2, 10, 4), float32], Tensor[(11, 10, 16), float64]) {
  %733 = cast(%var_12081, dtype="int16") /* ty=Tensor[(2, 10, 4), int16] */;
  %734 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(2, 10, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 10, 4), int16] */, dtype="int16") /* ty=Tensor[(2, 10, 4), int16] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %737 = bitwise_xor(%735, %736) /* ty=Tensor[(2, 10, 4), int16] */;
  %738 = cast(%737, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
  %739 = atanh(%738) /* ty=Tensor[(2, 10, 4), float32] */;
  %740 = @func_7636() /* ty=Tensor[(11, 10, 16), float64] */;
  (%739, %740)
}

def @func_12253() -> (Tensor[(11, 10, 16), float64],) {
  %741 = @func_6396() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %742 = %741.0;
  (%742,)
}

def @func_11677(%var_11668: Tensor[(975), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(975), float64], Tensor[(975), float64]) {
  %743 = @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */;
  %744 = cast(%var_11668, dtype="float64") /* ty=Tensor[(975), float64] */;
  %745 = reshape(%744, newshape=[975]) /* ty=Tensor[(975), float64] */;
  %746 = @func_6231(%745) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(8, 1, 2), float64], Tensor[(16), float64], Tensor[(13, 5, 15), int64], Tensor[(195), float64], Tensor[(975), float64]) */;
  %747 = %743.3;
  %748 = %746.5;
  (%747, %748, %var_11668)
}

def @func_8738() -> (Tensor[(11, 10, 16), float64],) {
  %749 = @func_4739() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %750 = %749.0;
  (%750,)
}

def @func_8714(%var_8699: Tensor[(2, 6, 7), uint64], %var_8700: Tensor[(2, 6, 7), uint64]) -> Tensor[(2, 6, 7), float64] {
  %751 = cast(%var_8700, dtype="uint64") /* ty=Tensor[(2, 6, 7), uint64] */;
  %752 = shape_of(%var_8699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%var_8699, dtype="uint64") /* ty=Tensor[(2, 6, 7), uint64] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %755 = bitwise_and(%753, %754) /* ty=Tensor[(2, 6, 7), uint64] */;
  %756 = cast(%755, dtype="float64") /* ty=Tensor[(2, 6, 7), float64] */;
  log(%756) /* ty=Tensor[(2, 6, 7), float64] */
}

def @func_9300() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %757 = @func_7230() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16], Tensor[(5, 16, 2), float32], Tensor[(24, 14), uint16], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(11, 10, 16), bool]) */;
  %758 = %757.0;
  %759 = @func_6738() /* ty=Tensor[(11, 10, 16), float64] */;
  (%758, %759)
}

def @func_972(%var_967: Tensor[(5, 16, 2), float32]) -> Tensor[(5, 16, 2), float32] {
  %760 = cast(%var_967, dtype="float32") /* ty=Tensor[(5, 16, 2), float32] */;
  cos(%760) /* ty=Tensor[(5, 16, 2), float32] */
}

def @func_4180() -> Tensor[(11, 10, 16), float64] {
  %761 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %761.0
}

def @func_4090() -> (Tensor[(15, 6, 2), float32],) {
  %762 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 6, 2), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 2), float32] */;
  %763 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(15, 6, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 6, 2), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 2), float32] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %766 = floor_divide(%764, %765) /* ty=Tensor[(15, 6, 2), float32] */;
  (%766,)
}

def @func_5875() -> Tensor[(11, 10, 16), uint16] {
  %767 = @func_5087() /* ty=(Tensor[(11, 10, 16), uint16],) */;
  %767.0
}

def @func_4875() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) {
  %768 = cast(meta[relay.Constant][40] /* ty=Tensor[(24, 8), uint16] */, dtype="uint16") /* ty=Tensor[(24, 8), uint16] */;
  %769 = reshape(%768, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %770 = @func_4068(%769) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) */;
  %771 = cast(meta[relay.Constant][40] /* ty=Tensor[(24, 8), uint16] */, dtype="float32") /* ty=Tensor[(24, 8), float32] */;
  %772 = @func_4739() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %773 = @func_4180() /* ty=Tensor[(11, 10, 16), float64] */;
  %774 = %770.4;
  %775 = log10(%771) /* ty=Tensor[(24, 8), float32] */;
  %776 = %772.2;
  (%773, %774, %775, %776)
}

def @func_5444() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(5, 16, 2), float32], Tensor[(336), uint16], Tensor[(11, 10, 16), bool]) {
  %777 = @func_4634() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
  %778 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %779 = cast(meta[relay.Constant][41] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %780 = reshape(%779, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), uint16] */;
  %781 = @func_2283(%780) /* ty=(Tensor[(14, 2, 12), bool], Tensor[(5, 16, 2), float32], Tensor[(2, 80), float32], Tensor[(5, 16, 2), float32]) */;
  %782 = %777.0;
  %783 = cast(%782, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %784 = reshape(%783, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %785 = @func_3489(%784) /* ty=(Tensor[(11, 10, 16), bool],) */;
  %786 = %778.0;
  %787 = %781.3;
  %788 = %785.0;
  (%782, %786, %787, meta[relay.Constant][41] /* ty=Tensor[(336), uint16] */, %788)
}

def @func_5279(%var_5250: Tensor[(1760), float64], %var_5264: Tensor[(39, 5), float64]) -> (Tensor[(48, 4), float32], Tensor[(11, 10, 16), uint64], Tensor[(1760), float64], Tensor[(13, 1, 15), float64], Tensor[(39, 5), float64], Tensor[(975), float64], Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  %789 = @func_4763() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool], Tensor[(48, 4), float32], Tensor[(4, 48), uint16]) */;
  %790 = cast(%var_5250, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %791 = %789.2;
  %792 = cast(%791, dtype="uint16") /* ty=Tensor[(48, 4), uint16] */;
  %793 = reshape(%790, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %794 = reshape(%792, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint16] */;
  %795 = @func_3331(%793, %794) /* ty=(Tensor[(11, 10, 16), uint64], Tensor[(10, 2), float32], Tensor[(48, 4), bool]) */;
  %796 = cast(%var_5264, dtype="float64") /* ty=Tensor[(39, 5), float64] */;
  %797 = cast(meta[relay.Constant][42] /* ty=Tensor[(975), float64] */, dtype="float64") /* ty=Tensor[(975), float64] */;
  %798 = reshape(%796, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), float64] */;
  %799 = reshape(%797, newshape=[13, 5, 15]) /* ty=Tensor[(13, 5, 15), float64] */;
  %800 = @func_4353(%798, %799) /* ty=(Tensor[(13, 1, 15), float64], Tensor[(13, 5, 15), int64]) */;
  %801 = cast(meta[relay.Constant][42] /* ty=Tensor[(975), float64] */, dtype="float64") /* ty=Tensor[(975), float64] */;
  %802 = %795.0;
  %803 = %800.0;
  %804 = cosh(%801) /* ty=Tensor[(975), float64] */;
  %805 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  %806 = @func_4831() /* ty=Tensor[(11, 10, 16), float64] */;
  (%791, %802, %var_5250, %803, %var_5264, %804, %805, %806)
}

def @func_4153() -> Tensor[(11, 10, 16), bool] {
  %807 = @func_3889() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
  %807.0
}

def @func_5812() -> (Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), float64]) {
  %808 = @func_5087() /* ty=(Tensor[(11, 10, 16), uint16],) */;
  %809 = @func_5161() /* ty=Tensor[(11, 10, 16), float64] */;
  %810 = @func_3419() /* ty=Tensor[(11, 10, 16), float64] */;
  %811 = cast(%810, dtype="uint64") /* ty=Tensor[(11, 10, 16), uint64] */;
  %812 = shape_of(%809, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(%809, dtype="uint64") /* ty=Tensor[(11, 10, 16), uint64] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %815 = bitwise_and(%813, %814) /* ty=Tensor[(11, 10, 16), uint64] */;
  %816 = cast(%815, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %817 = %808.0;
  %818 = atan(%816) /* ty=Tensor[(11, 10, 16), float64] */;
  (%817, %818)
}

def @func_6804() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %819 = @func_5909() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %820 = @func_3768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %821 = %819.0;
  %822 = %820.1;
  (%821, %822)
}

def @func_9657() -> (Tensor[(24, 8), bool], Tensor[(11, 10, 16), float64], Tensor[(512), float32], Tensor[(24, 8), float32], Tensor[(24, 8), bool]) {
  %823 = @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */;
  %824 = %823.2;
  %825 = cast(%824, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %826 = log2(%825) /* ty=Tensor[(24, 8), float64] */;
  %827 = cast(%826, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
  %828 = asinh(%827) /* ty=Tensor[(24, 8), float64] */;
  %829 = cast(meta[relay.Constant][43] /* ty=Tensor[(24, 8), float64] */, dtype="bool") /* ty=Tensor[(24, 8), bool] */;
  %830 = shape_of(%828, dtype="int32") /* ty=Tensor[(2), int32] */;
  %831 = cast(%828, dtype="bool") /* ty=Tensor[(24, 8), bool] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %833 = cast(meta[relay.Constant][44] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %834 = reshape(%833, newshape=[256, 2]) /* ty=Tensor[(256, 2), float32] */;
  %835 = @func_6919(%834) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(1760), float64], Tensor[(256, 2), float32]) */;
  %836 = cast(%828, dtype="float32") /* ty=Tensor[(24, 8), float32] */;
  %837 = cast(%828, dtype="int8") /* ty=Tensor[(24, 8), int8] */;
  %838 = shape_of(%826, dtype="int32") /* ty=Tensor[(2), int32] */;
  %839 = cast(%826, dtype="int8") /* ty=Tensor[(24, 8), int8] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %841 = bitwise_or(%839, %840) /* ty=Tensor[(24, 8), int8] */;
  %842 = cast(meta[relay.Constant][45] /* ty=Tensor[(24, 8), int8] */, dtype="bool") /* ty=Tensor[(24, 8), bool] */;
  %843 = shape_of(%841, dtype="int32") /* ty=Tensor[(2), int32] */;
  %844 = cast(%841, dtype="bool") /* ty=Tensor[(24, 8), bool] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %846 = logical_or(%831, %832) /* ty=Tensor[(24, 8), bool] */;
  %847 = %835.0;
  %848 = rsqrt(%836) /* ty=Tensor[(24, 8), float32] */;
  %849 = greater(%844, %845) /* ty=Tensor[(24, 8), bool] */;
  (%846, %847, meta[relay.Constant][44] /* ty=Tensor[(512), float32] */, %848, %849)
}

def @func_10013() -> (Tensor[(11, 10, 16), float64],) {
  %850 = @func_6804() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %851 = %850.0;
  (%851,)
}

def @func_12490(%var_12459: Tensor[(14, 9, 14), float32]) -> (Tensor[(14, 9, 14), float32], Tensor[(11, 10, 16), float64]) {
  %852 = cast(%var_12459, dtype="float32") /* ty=Tensor[(14, 9, 14), float32] */;
  %853 = @func_7891() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %854 = atan(%852) /* ty=Tensor[(14, 9, 14), float32] */;
  %855 = %853.0;
  (%854, %855)
}

def @func_10768() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(168), float64], Tensor[(9, 9, 16), float64], Tensor[(1, 1296), float64]) {
  %856 = @func_10193() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %857 = @func_6563() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %858 = cast(meta[relay.Constant][46] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %859 = reshape(%858, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
  %860 = @func_4325(%859) /* ty=(Tensor[(6, 14, 2), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %861 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 1296), float64] */, dtype="float64") /* ty=Tensor[(1, 1296), float64] */;
  %862 = reshape(%861, newshape=[9, 9, 16]) /* ty=Tensor[(9, 9, 16), float64] */;
  %863 = @func_6738() /* ty=Tensor[(11, 10, 16), float64] */;
  %864 = %856.0;
  %865 = %857.0;
  %866 = @func_9193() /* ty=Tensor[(11, 10, 16), float64] */;
  %867 = %860.2;
  %868 = @func_5561(%862) /* ty=Tensor[(9, 9, 16), float64] */;
  (%863, %864, %865, %866, %867, meta[relay.Constant][46] /* ty=Tensor[(168), float64] */, %868, meta[relay.Constant][47] /* ty=Tensor[(1, 1296), float64] */)
}

def @func_8670(%var_8617: int16, %var_8618: Tensor[(16, 7, 1), int16], %var_8658: Tensor[(104), int16]) -> (Tensor[(16, 7, 1), int16], Tensor[(16, 7, 975), uint32], Tensor[(975), uint8], Tensor[(96, 2), uint16], Tensor[(104), int16], Tensor[(2, 96), int16]) {
  %869 = cast(%var_8617, dtype="int16") /* ty=int16 */;
  %870 = cast(%var_8618, dtype="int16") /* ty=Tensor[(16, 7, 1), int16] */;
  %871 = @func_6521() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(975), float64], Tensor[(975), float64]) */;
  %872 = %871.1;
  %873 = cast(%872, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %874 = cast(%var_8618, dtype="uint32") /* ty=Tensor[(16, 7, 1), uint32] */;
  %875 = cast(%var_8617, dtype="uint8") /* ty=uint8 */;
  %876 = cast(%872, dtype="uint8") /* ty=Tensor[(975), uint8] */;
  %877 = cast(%var_8658, dtype="int16") /* ty=Tensor[(104), int16] */;
  %878 = cast(meta[relay.Constant][48] /* ty=Tensor[(2, 96), uint16] */, dtype="uint16") /* ty=Tensor[(2, 96), uint16] */;
  %879 = reshape(%877, newshape=[104]) /* ty=Tensor[(104), int16] */;
  %880 = reshape(%878, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %881 = @func_8383(%879, %880) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(96, 2), uint16], Tensor[(104), int16], Tensor[(192), uint16]) */;
  %882 = cast(meta[relay.Constant][48] /* ty=Tensor[(2, 96), uint16] */, dtype="int16") /* ty=Tensor[(2, 96), int16] */;
  %883 = cast(%var_8617, dtype="int16") /* ty=int16 */;
  %884 = add(%869, %870) /* ty=Tensor[(16, 7, 1), int16] */;
  %885 = left_shift(%873, %874) /* ty=Tensor[(16, 7, 975), uint32] */;
  %886 = left_shift(%875, %876) /* ty=Tensor[(975), uint8] */;
  %887 = %881.1;
  %888 = maximum(%882, %883) /* ty=Tensor[(2, 96), int16] */;
  (%884, %885, %886, %887, %var_8658, %888)
}

def @func_8285(%var_8278: Tensor[(3, 5, 15), int64], %var_8279: Tensor[(3, 5, 15), int64]) -> (Tensor[(3, 5, 15), int64],) {
  %889 = cast(%var_8279, dtype="int64") /* ty=Tensor[(3, 5, 15), int64] */;
  %890 = shape_of(%var_8278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(%var_8278, dtype="int64") /* ty=Tensor[(3, 5, 15), int64] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %893 = logical_xor(%891, %892) /* ty=Tensor[(3, 5, 15), int64] */;
  (%893,)
}

def @func_11305() -> (Tensor[(11, 10, 16), float64],) {
  %894 = @func_5161() /* ty=Tensor[(11, 10, 16), float64] */;
  (%894,)
}

def @func_4831() -> Tensor[(11, 10, 16), float64] {
  %895 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %896 = %895.0;
  %897 = cast(%896, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  erf(%897) /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_5511() -> (Tensor[(11, 10, 16), float64],) {
  %898 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %899 = %898.0;
  (%899,)
}

def @func_7580() -> Tensor[(11, 10, 16), float64] {
  %900 = @func_7307() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float32], Tensor[(11, 10, 16), float64]) */;
  %900.2
}

def @func_9327() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %901 = @func_7438() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %902 = @func_6521() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(975), float64], Tensor[(975), float64]) */;
  %903 = %901.0;
  %904 = %902.0;
  %905 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  (%903, %904, %905)
}

def @func_8161() -> (Tensor[(11, 10, 16), bool],) {
  %906 = @func_5444() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(5, 16, 2), float32], Tensor[(336), uint16], Tensor[(11, 10, 16), bool]) */;
  %907 = %906.4;
  (%907,)
}

def @func_4689(%var_4659: Tensor[(48, 4), uint16]) -> (Tensor[(11, 10, 16), bool], Tensor[(20), float32], Tensor[(48, 4), uint16], Tensor[(16, 4, 3), uint16]) {
  %908 = @func_3889() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
  %909 = cast(%var_4659, dtype="uint16") /* ty=Tensor[(48, 4), uint16] */;
  %910 = reshape(%909, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %911 = @func_4068(%910) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) */;
  %912 = %911.2;
  %913 = cast(%912, dtype="float32") /* ty=Tensor[(20), float32] */;
  %914 = cast(%var_4659, dtype="uint16") /* ty=Tensor[(48, 4), uint16] */;
  %915 = reshape(%913, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
  %916 = reshape(%914, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %917 = @func_397(%915, %916) /* ty=(Tensor[(10, 2, 1), float32], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(16, 4, 3), uint16]) */;
  %918 = %908.0;
  %919 = %917.1;
  (%918, %912, %var_4659, %919)
}

def @func_9288() -> (Tensor[(11, 10, 16), float64],) {
  %920 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %921 = %920.0;
  (%921,)
}

def @func_11887() -> Tensor[(24, 14), uint16] {
  %922 = @func_7230() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16], Tensor[(5, 16, 2), float32], Tensor[(24, 14), uint16], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(11, 10, 16), bool]) */;
  %922.3
}

def @func_9398(%var_9352: Tensor[(1350), bool], %var_9369: Tensor[(2, 880), float64]) -> (Tensor[(4, 14, 3), float32], Tensor[(1350), bool], Tensor[(11, 10, 16), int64], Tensor[(2, 880), float64], Tensor[(6, 15, 15), int16], Tensor[(11, 10, 16), float64]) {
  %923 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 14, 3), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 3), float32] */;
  %924 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(4, 14, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %925 = cast(meta[relay.Constant][49] /* ty=Tensor[(4, 14, 3), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 3), float32] */;
  %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %927 = cast(%var_9369, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
  %928 = reshape(%927, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %929 = @func_6043(%928) /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), int64]) */;
  %930 = cast(%var_9352, dtype="bool") /* ty=Tensor[(1350), bool] */;
  %931 = cast(%var_9352, dtype="bool") /* ty=Tensor[(1350), bool] */;
  %932 = reshape(%930, newshape=[6, 15, 15]) /* ty=Tensor[(6, 15, 15), bool] */;
  %933 = reshape(%931, newshape=[6, 15, 15]) /* ty=Tensor[(6, 15, 15), bool] */;
  %934 = @func_9106(%932, %933) /* ty=(Tensor[(6, 15, 15), bool],) */;
  %935 = %934.0;
  %936 = cast(%935, dtype="float64") /* ty=Tensor[(6, 15, 15), float64] */;
  %937 = asinh(%936) /* ty=Tensor[(6, 15, 15), float64] */;
  %938 = cast(%937, dtype="float64") /* ty=Tensor[(6, 15, 15), float64] */;
  %939 = cos(%938) /* ty=Tensor[(6, 15, 15), float64] */;
  %940 = cast(%939, dtype="float32") /* ty=Tensor[(6, 15, 15), float32] */;
  %941 = sinh(%940) /* ty=Tensor[(6, 15, 15), float32] */;
  %942 = cast(%939, dtype="int16") /* ty=Tensor[(6, 15, 15), int16] */;
  %943 = shape_of(%941, dtype="int32") /* ty=Tensor[(3), int32] */;
  %944 = cast(%941, dtype="int16") /* ty=Tensor[(6, 15, 15), int16] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %946 = @func_7891() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %947 = mod(%925, %926) /* ty=Tensor[(4, 14, 3), float32] */;
  %948 = %929.1;
  %949 = maximum(%944, %945) /* ty=Tensor[(6, 15, 15), int16] */;
  %950 = %946.0;
  (%947, %var_9352, %948, %var_9369, %949, %950)
}

def @func_12576(%var_12546: Tensor[(13), uint64]) -> (Tensor[(11, 10, 16), bool], Tensor[(13), uint64], Tensor[(5, 156), uint16], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %951 = @func_8161() /* ty=(Tensor[(11, 10, 16), bool],) */;
  %952 = cast(%var_12546, dtype="uint64") /* ty=Tensor[(13), uint64] */;
  %953 = cast(meta[relay.Constant][51] /* ty=Tensor[(5, 156), uint64] */, dtype="uint64") /* ty=Tensor[(5, 156), uint64] */;
  %954 = reshape(%952, newshape=[1, 13, 1]) /* ty=Tensor[(1, 13, 1), uint64] */;
  %955 = reshape(%953, newshape=[15, 13, 4]) /* ty=Tensor[(15, 13, 4), uint64] */;
  %956 = @func_5676(%954, %955) /* ty=(Tensor[(15, 13, 4), uint64],) */;
  %957 = %956.0;
  %958 = cast(%957, dtype="uint16") /* ty=Tensor[(15, 13, 4), uint16] */;
  %959 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(5, 156), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %960 = cast(meta[relay.Constant][51] /* ty=Tensor[(5, 156), uint64] */, dtype="uint16") /* ty=Tensor[(5, 156), uint16] */;
  %961 = dyn.reshape(%958, %959, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %962 = @func_7824() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %963 = @func_3551() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %964 = %951.0;
  %965 = bitwise_and(%960, %961) /* ty=Tensor[(5, 156), uint16] */;
  %966 = %962.1;
  %967 = %963.1;
  (%964, %var_12546, %965, %966, %967)
}

def @func_2071(%var_2042: Tensor[(96, 2), uint16], %var_2066: Tensor[(20), float32]) -> (Tensor[(4, 14, 1), float64], Tensor[(16, 4, 3), uint16], Tensor[(96, 2), uint16], Tensor[(16, 4, 3), uint16], Tensor[(20), float32]) {
  %968 = cast(meta[relay.Constant][52] /* ty=Tensor[(4, 14, 1), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 1), float64] */;
  %969 = cast(%var_2042, dtype="uint16") /* ty=Tensor[(96, 2), uint16] */;
  %970 = cast(%var_2042, dtype="uint16") /* ty=Tensor[(96, 2), uint16] */;
  %971 = reshape(%969, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %972 = reshape(%970, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %973 = @func_238(%971, %972) /* ty=(Tensor[(16, 4, 3), uint16],) */;
  %974 = cast(%var_2066, dtype="float32") /* ty=Tensor[(20), float32] */;
  %975 = %973.0;
  %976 = cast(%975, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
  %977 = reshape(%974, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
  %978 = reshape(%976, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %979 = @func_397(%977, %978) /* ty=(Tensor[(10, 2, 1), float32], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(16, 4, 3), uint16]) */;
  %980 = atanh(%968) /* ty=Tensor[(4, 14, 1), float64] */;
  %981 = %979.3;
  (%980, %975, %var_2042, %981, %var_2066)
}

def @func_7997() -> (Tensor[(11, 10, 16), float64], Tensor[(512), uint16]) {
  %982 = @func_7124() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16]) */;
  %983 = @func_4299() /* ty=Tensor[(11, 10, 16), float64] */;
  %984 = %982.1;
  (%983, %984)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4299() -> Tensor[(11, 10, 16), float64] {
  @func_3419() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_9138() -> Tensor[(11, 10, 16), float64] {
  %0 = @func_7764() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %0.0
}

def @func_10545() -> Tensor[(11, 10, 16), float64] {
  %2 = fn () -> Tensor[(11, 10, 16), float64] {
    %1 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %1.0
  };
  %2() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_6285() -> (Tensor[(11, 10, 16), int16],) {
  %3 = @func_4831() /* ty=Tensor[(11, 10, 16), float64] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 10, 16), float64] */, dtype="int16") /* ty=Tensor[(11, 10, 16), int16] */;
  %5 = shape_of(%3, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%3, dtype="int16") /* ty=Tensor[(11, 10, 16), int16] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %8 = bitwise_or(%6, %7) /* ty=Tensor[(11, 10, 16), int16] */;
  (%8,)
}

def @func_8386(%var_8384: Tensor[(104), int16], %var_8385: Tensor[(192), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(96, 2), uint16], Tensor[(104), int16], Tensor[(192), uint16]) {
  %16 = fn (%var_8378: Tensor[(104), int16], %var_8379: Tensor[(192), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(96, 2), uint16], Tensor[(104), int16], Tensor[(192), uint16]) {
    %9 = cast(%var_8378, dtype="int16") /* ty=Tensor[(104), int16] */;
    %10 = cast(%var_8379, dtype="uint16") /* ty=Tensor[(192), uint16] */;
    %11 = reshape(%9, newshape=[13, 2, 4]) /* ty=Tensor[(13, 2, 4), int16] */;
    %12 = reshape(%10, newshape=[96, 2]) /* ty=Tensor[(96, 2), uint16] */;
    %13 = @func_5233(%11, %12) /* ty=(Tensor[(13, 2, 4), bool], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(96, 2), uint16], Tensor[(13, 2, 4), float64]) */;
    %14 = @func_5161() /* ty=Tensor[(11, 10, 16), float64] */;
    %15 = %13.3;
    (%14, %15, %var_8378, %var_8379)
  };
  %16(%var_8384, %var_8385) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(96, 2), uint16], Tensor[(104), int16], Tensor[(192), uint16]) */
}

def @func_5564(%var_5562: Tensor[(9, 9, 16), float64]) -> Tensor[(9, 9, 16), float64] {
  @func_5561(%var_5562) /* ty=Tensor[(9, 9, 16), float64] */
}

def @func_11562() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %23 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
    %17 = @func_7038() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %18 = %17.1;
    %19 = cast(%18, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
    %20 = reshape(%19, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), bool] */;
    %21 = @func_6689(%20) /* ty=(Tensor[(11, 10, 16), float32], Tensor[(11, 10, 16), bool]) */;
    %22 = %21.1;
    (%18, %22)
  };
  %23() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */
}

def @func_8582() -> (Tensor[(11, 10, 16), uint16],) {
  %24 = @func_5087() /* ty=(Tensor[(11, 10, 16), uint16],) */;
  %25 = %24.0;
  (%25,)
}

def @func_8717(%var_8715: Tensor[(2, 6, 7), uint64], %var_8716: Tensor[(2, 6, 7), uint64]) -> Tensor[(2, 6, 7), float64] {
  %32 = fn (%var_8699: Tensor[(2, 6, 7), uint64], %var_8700: Tensor[(2, 6, 7), uint64]) -> Tensor[(2, 6, 7), float64] {
    %26 = cast(%var_8700, dtype="uint64") /* ty=Tensor[(2, 6, 7), uint64] */;
    %27 = shape_of(%var_8699, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(%var_8699, dtype="uint64") /* ty=Tensor[(2, 6, 7), uint64] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %30 = bitwise_and(%28, %29) /* ty=Tensor[(2, 6, 7), uint64] */;
    %31 = cast(%30, dtype="float64") /* ty=Tensor[(2, 6, 7), float64] */;
    log(%31) /* ty=Tensor[(2, 6, 7), float64] */
  };
  %32(%var_8715, %var_8716) /* ty=Tensor[(2, 6, 7), float64] */
}

def @func_3552() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %36 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %33 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %34 = @func_3243() /* ty=Tensor[(11, 10, 16), float64] */;
    %35 = %33.0;
    (%34, %35)
  };
  %36() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_4068(%var_4064: Tensor[(192), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) {
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
  %38 = cast(%var_4064, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %39 = reshape(%37, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
  %40 = reshape(%38, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %41 = @func_397(%39, %40) /* ty=(Tensor[(10, 2, 1), float32], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(16, 4, 3), uint16]) */;
  %42 = @func_3768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %43 = @func_3419() /* ty=Tensor[(11, 10, 16), float64] */;
  %44 = %41.3;
  %45 = %42.0;
  (%43, %44, meta[relay.Constant][1] /* ty=Tensor[(20), float32] */, %var_4064, %45)
}

def @func_9658() -> (Tensor[(24, 8), bool], Tensor[(11, 10, 16), float64], Tensor[(512), float32], Tensor[(24, 8), float32], Tensor[(24, 8), bool]) {
  %73 = fn () -> (Tensor[(24, 8), bool], Tensor[(11, 10, 16), float64], Tensor[(512), float32], Tensor[(24, 8), float32], Tensor[(24, 8), bool]) {
    %46 = @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */;
    %47 = %46.2;
    %48 = cast(%47, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
    %49 = log2(%48) /* ty=Tensor[(24, 8), float64] */;
    %50 = cast(%49, dtype="float64") /* ty=Tensor[(24, 8), float64] */;
    %51 = asinh(%50) /* ty=Tensor[(24, 8), float64] */;
    %52 = cast(meta[relay.Constant][2] /* ty=Tensor[(24, 8), float64] */, dtype="bool") /* ty=Tensor[(24, 8), bool] */;
    %53 = shape_of(%51, dtype="int32") /* ty=Tensor[(2), int32] */;
    %54 = cast(%51, dtype="bool") /* ty=Tensor[(24, 8), bool] */;
    %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
    %57 = reshape(%56, newshape=[256, 2]) /* ty=Tensor[(256, 2), float32] */;
    %58 = @func_6919(%57) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(1760), float64], Tensor[(256, 2), float32]) */;
    %59 = cast(%51, dtype="float32") /* ty=Tensor[(24, 8), float32] */;
    %60 = cast(%51, dtype="int8") /* ty=Tensor[(24, 8), int8] */;
    %61 = shape_of(%49, dtype="int32") /* ty=Tensor[(2), int32] */;
    %62 = cast(%49, dtype="int8") /* ty=Tensor[(24, 8), int8] */;
    %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %64 = bitwise_or(%62, %63) /* ty=Tensor[(24, 8), int8] */;
    %65 = cast(meta[relay.Constant][4] /* ty=Tensor[(24, 8), int8] */, dtype="bool") /* ty=Tensor[(24, 8), bool] */;
    %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(2), int32] */;
    %67 = cast(%64, dtype="bool") /* ty=Tensor[(24, 8), bool] */;
    %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %69 = logical_or(%54, %55) /* ty=Tensor[(24, 8), bool] */;
    %70 = %58.0;
    %71 = rsqrt(%59) /* ty=Tensor[(24, 8), float32] */;
    %72 = greater(%67, %68) /* ty=Tensor[(24, 8), bool] */;
    (%69, %70, meta[relay.Constant][3] /* ty=Tensor[(512), float32] */, %71, %72)
  };
  %73() /* ty=(Tensor[(24, 8), bool], Tensor[(11, 10, 16), float64], Tensor[(512), float32], Tensor[(24, 8), float32], Tensor[(24, 8), bool]) */
}

def @func_3692() -> (Tensor[(11, 10, 16), float64],) {
  @func_3690() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_9676() -> (Tensor[(11, 10, 16), float64],) {
  @func_9674() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_5020(%var_4994: Tensor[(16, 2, 16), float32]) -> (Tensor[(11, 10, 16), uint64], Tensor[(1760), float64], Tensor[(192), uint16], Tensor[(6, 7, 5), float32], float32, Tensor[(16, 2, 16), float64]) {
  %74 = cast(meta[relay.Constant][5] /* ty=Tensor[(1760), float64] */, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %75 = cast(meta[relay.Constant][6] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %76 = reshape(%74, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %77 = reshape(%75, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint16] */;
  %78 = @func_3331(%76, %77) /* ty=(Tensor[(11, 10, 16), uint64], Tensor[(10, 2), float32], Tensor[(48, 4), bool]) */;
  %79 = cast(-2.0977f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %80 = reshape(%79, newshape=[]) /* ty=float32 */;
  %81 = @func_2154(%80) /* ty=(Tensor[(6, 7, 5), float32],) */;
  %82 = cast(%var_4994, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
  %83 = asin(%82) /* ty=Tensor[(16, 2, 16), float32] */;
  %84 = cast(%83, dtype="float64") /* ty=Tensor[(16, 2, 16), float64] */;
  %85 = %78.0;
  %86 = %81.0;
  %87 = atan(%84) /* ty=Tensor[(16, 2, 16), float64] */;
  (%85, meta[relay.Constant][5] /* ty=Tensor[(1760), float64] */, meta[relay.Constant][6] /* ty=Tensor[(192), uint16] */, %86, -2.0977f /* ty=float32 */, %87)
}

def @func_9078() -> (Tensor[(15, 6, 2), float32],) {
  %88 = @func_4090() /* ty=(Tensor[(15, 6, 2), float32],) */;
  %89 = %88.0;
  (%89,)
}

def @func_6804() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %90 = @func_5909() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %91 = @func_3768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %92 = %90.0;
  %93 = %91.1;
  (%92, %93)
}

def @func_12454() -> (Tensor[(11, 10, 16), uint16],) {
  %94 = @func_8582() /* ty=(Tensor[(11, 10, 16), uint16],) */;
  %95 = %94.0;
  (%95,)
}

def @func_11888() -> Tensor[(24, 14), uint16] {
  %97 = fn () -> Tensor[(24, 14), uint16] {
    %96 = @func_7230() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16], Tensor[(5, 16, 2), float32], Tensor[(24, 14), uint16], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(11, 10, 16), bool]) */;
    %96.3
  };
  %97() /* ty=Tensor[(24, 14), uint16] */
}

def @func_5380() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %101 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
    %98 = @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %99 = %98.1;
    %100 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
    (%99, %100)
  };
  %101() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */
}

def @func_8738() -> (Tensor[(11, 10, 16), float64],) {
  %102 = @func_4739() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %103 = %102.0;
  (%103,)
}

def @func_12637() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(15, 6, 2), float32], Tensor[(11, 10, 16), bool]) {
  %110 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(15, 6, 2), float32], Tensor[(11, 10, 16), bool]) {
    %104 = @func_11464() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %105 = @func_9078() /* ty=(Tensor[(15, 6, 2), float32],) */;
    %106 = @func_8863() /* ty=Tensor[(11, 10, 16), float64] */;
    %107 = %104.1;
    %108 = %105.0;
    %109 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
    (%106, %107, %108, %109)
  };
  %110() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(15, 6, 2), float32], Tensor[(11, 10, 16), bool]) */
}

def @func_12526() -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  @func_12524() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */
}

def @func_3690() -> (Tensor[(11, 10, 16), float64],) {
  %111 = @func_3243() /* ty=Tensor[(11, 10, 16), float64] */;
  (%111,)
}

def @func_9815(%var_9813: Tensor[(13, 8, 4), float64]) -> (Tensor[(13, 8, 4), float64], Tensor[(13, 8, 4), float64]) {
  @func_9812(%var_9813) /* ty=(Tensor[(13, 8, 4), float64], Tensor[(13, 8, 4), float64]) */
}

def @func_10013() -> (Tensor[(11, 10, 16), float64],) {
  %112 = @func_6804() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %113 = %112.0;
  (%113,)
}

def @func_12514() -> (Tensor[(975), float64],) {
  %116 = fn () -> (Tensor[(975), float64],) {
    %114 = @func_6521() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(975), float64], Tensor[(975), float64]) */;
    %115 = %114.1;
    (%115,)
  };
  %116() /* ty=(Tensor[(975), float64],) */
}

def @func_10769() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(168), float64], Tensor[(9, 9, 16), float64], Tensor[(1, 1296), float64]) {
  %130 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(168), float64], Tensor[(9, 9, 16), float64], Tensor[(1, 1296), float64]) {
    %117 = @func_10193() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %118 = @func_6563() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %119 = cast(meta[relay.Constant][7] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %120 = reshape(%119, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
    %121 = @func_4325(%120) /* ty=(Tensor[(6, 14, 2), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %122 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 1296), float64] */, dtype="float64") /* ty=Tensor[(1, 1296), float64] */;
    %123 = reshape(%122, newshape=[9, 9, 16]) /* ty=Tensor[(9, 9, 16), float64] */;
    %124 = @func_6738() /* ty=Tensor[(11, 10, 16), float64] */;
    %125 = %117.0;
    %126 = %118.0;
    %127 = @func_9193() /* ty=Tensor[(11, 10, 16), float64] */;
    %128 = %121.2;
    %129 = @func_5561(%123) /* ty=Tensor[(9, 9, 16), float64] */;
    (%124, %125, %126, %127, %128, meta[relay.Constant][7] /* ty=Tensor[(168), float64] */, %129, meta[relay.Constant][8] /* ty=Tensor[(1, 1296), float64] */)
  };
  %130() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(168), float64], Tensor[(9, 9, 16), float64], Tensor[(1, 1296), float64]) */
}

def @func_4831() -> Tensor[(11, 10, 16), float64] {
  %131 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %132 = %131.0;
  %133 = cast(%132, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  erf(%133) /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_401(%var_399: Tensor[(10, 2, 1), float32], %var_400: Tensor[(192), uint16]) -> (Tensor[(10, 2, 1), float32], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(16, 4, 3), uint16]) {
  @func_397(%var_399, %var_400) /* ty=(Tensor[(10, 2, 1), float32], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(16, 4, 3), uint16]) */
}

def @func_6522() -> (Tensor[(11, 10, 16), float64], Tensor[(975), float64], Tensor[(975), float64]) {
  %140 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(975), float64], Tensor[(975), float64]) {
    %134 = @func_5511() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %135 = cast(meta[relay.Constant][9] /* ty=Tensor[(975), float64] */, dtype="float64") /* ty=Tensor[(975), float64] */;
    %136 = reshape(%135, newshape=[975]) /* ty=Tensor[(975), float64] */;
    %137 = @func_6231(%136) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(8, 1, 2), float64], Tensor[(16), float64], Tensor[(13, 5, 15), int64], Tensor[(195), float64], Tensor[(975), float64]) */;
    %138 = %134.0;
    %139 = %137.5;
    (%138, %139, meta[relay.Constant][9] /* ty=Tensor[(975), float64] */)
  };
  %140() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(975), float64], Tensor[(975), float64]) */
}

def @func_8198(%var_8196: Tensor[(882), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(882), float32]) {
  @func_8195(%var_8196) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(882), float32]) */
}

def @func_12182() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %145 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %141 = @func_11793() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %142 = @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */;
    %143 = %141.0;
    %144 = %142.3;
    (%143, %144)
  };
  %145() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_3491(%var_3490: Tensor[(11, 10, 16), float64]) -> (Tensor[(11, 10, 16), bool],) {
  %153 = fn (%var_3483: Tensor[(11, 10, 16), float64]) -> (Tensor[(11, 10, 16), bool],) {
    %146 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %147 = %146.0;
    %148 = cast(%var_3483, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
    %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
    %150 = cast(%147, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
    %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %152 = less(%150, %151) /* ty=Tensor[(11, 10, 16), bool] */;
    (%152,)
  };
  %153(%var_3490) /* ty=(Tensor[(11, 10, 16), bool],) */
}

def @func_10326(%var_10307: Tensor[(192), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(15, 6, 2), float64], Tensor[(1760), uint32], Tensor[(784), float32], Tensor[(192), uint16], Tensor[(24, 8), float32]) {
  %154 = @func_4763() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool], Tensor[(48, 4), float32], Tensor[(4, 48), uint16]) */;
  %155 = @func_9300() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %156 = @func_9078() /* ty=(Tensor[(15, 6, 2), float32],) */;
  %157 = %156.0;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(15, 6, 2), float64] */;
  %159 = cast(meta[relay.Constant][10] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %160 = cast(%var_10307, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %161 = reshape(%159, newshape=[14, 7, 8]) /* ty=Tensor[(14, 7, 8), float32] */;
  %162 = reshape(%160, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %163 = @func_3635(%161, %162) /* ty=(Tensor[(192), uint16], Tensor[(1760), uint32], Tensor[(14, 7, 8), float64], Tensor[(14, 7, 8), float64]) */;
  %164 = cast(meta[relay.Constant][10] /* ty=Tensor[(784), float32] */, dtype="float32") /* ty=Tensor[(784), float32] */;
  %165 = reshape(%164, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %166 = @func_4985(%165) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(14, 7, 8), float64], Tensor[(784), float32], Tensor[(11, 10, 16), bool]) */;
  %167 = %154.0;
  %168 = %155.0;
  %169 = sinh(%158) /* ty=Tensor[(15, 6, 2), float64] */;
  %170 = %163.1;
  %171 = %166.1;
  (%167, %168, %169, %170, meta[relay.Constant][10] /* ty=Tensor[(784), float32] */, %var_10307, %171)
}

def @func_6689(%var_6642: Tensor[(11, 10, 16), bool]) -> (Tensor[(11, 10, 16), float32], Tensor[(11, 10, 16), bool]) {
  %172 = @func_3889() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
  %173 = %172.0;
  %174 = cast(%var_6642, dtype="float32") /* ty=Tensor[(11, 10, 16), float32] */;
  %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%173, dtype="float32") /* ty=Tensor[(11, 10, 16), float32] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %178 = cast(%173, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %179 = reshape(%178, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %180 = @func_3489(%179) /* ty=(Tensor[(11, 10, 16), bool],) */;
  %181 = floor_divide(%176, %177) /* ty=Tensor[(11, 10, 16), float32] */;
  %182 = %180.0;
  (%181, %182)
}

def @func_3420() -> Tensor[(11, 10, 16), float64] {
  %184 = fn () -> Tensor[(11, 10, 16), float64] {
    %183 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %183.0
  };
  %184() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_6738() -> Tensor[(11, 10, 16), float64] {
  @func_4551() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_10470(%var_10468: Tensor[(882), float64], %var_10469: Tensor[(192), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(1, 1760), float64], Tensor[(180), float32], Tensor[(160), float32], Tensor[(11, 10, 16), float64], Tensor[(15, 6, 2), float64], Tensor[(192), uint16], Tensor[(882), float32]) {
  %210 = fn (%var_10429: Tensor[(882), float64], %var_10457: Tensor[(192), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(1, 1760), float64], Tensor[(180), float32], Tensor[(160), float32], Tensor[(11, 10, 16), float64], Tensor[(15, 6, 2), float64], Tensor[(192), uint16], Tensor[(882), float32]) {
    %185 = @func_6353() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %186 = @func_8582() /* ty=(Tensor[(11, 10, 16), uint16],) */;
    %187 = cast(%var_10429, dtype="float64") /* ty=Tensor[(882), float64] */;
    %188 = reshape(%187, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), float64] */;
    %189 = @func_7264(%188) /* ty=(Tensor[(9, 14, 7), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %190 = @func_6353() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %191 = cast(meta[relay.Constant][11] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %192 = cast(meta[relay.Constant][12] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
    %193 = reshape(%191, newshape=[15, 6, 2]) /* ty=Tensor[(15, 6, 2), float32] */;
    %194 = reshape(%192, newshape=[16, 10]) /* ty=Tensor[(16, 10), float32] */;
    %195 = @func_9728(%193, %194) /* ty=(Tensor[(15, 6, 2), uint64], Tensor[(5, 16, 2), float32], Tensor[(16, 10), float32], Tensor[(11, 10, 16), float32], Tensor[(1, 1760), float64]) */;
    %196 = @func_7824() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %197 = cast(%var_10457, dtype="uint16") /* ty=Tensor[(192), uint16] */;
    %198 = reshape(%197, newshape=[192]) /* ty=Tensor[(192), uint16] */;
    %199 = @func_10326(%198) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(15, 6, 2), float64], Tensor[(1760), uint32], Tensor[(784), float32], Tensor[(192), uint16], Tensor[(24, 8), float32]) */;
    %200 = cast(%var_10429, dtype="float32") /* ty=Tensor[(882), float32] */;
    %201 = @func_6079() /* ty=Tensor[(11, 10, 16), float64] */;
    %202 = %185.0;
    %203 = %186.0;
    %204 = %189.3;
    %205 = %190.0;
    %206 = %195.4;
    %207 = %196.0;
    %208 = %199.2;
    %209 = acosh(%200) /* ty=Tensor[(882), float32] */;
    (%201, %202, %203, %204, %205, %206, meta[relay.Constant][11] /* ty=Tensor[(180), float32] */, meta[relay.Constant][12] /* ty=Tensor[(160), float32] */, %207, %208, %var_10457, %209)
  };
  %210(%var_10468, %var_10469) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(1, 1760), float64], Tensor[(180), float32], Tensor[(160), float32], Tensor[(11, 10, 16), float64], Tensor[(15, 6, 2), float64], Tensor[(192), uint16], Tensor[(882), float32]) */
}

def @func_7842(%var_7840: Tensor[(2, 12, 6), uint64], %var_7841: Tensor[(2, 12, 6), uint64]) -> (Tensor[(2, 12, 6), uint64],) {
  @func_7838(%var_7840, %var_7841) /* ty=(Tensor[(2, 12, 6), uint64],) */
}

def @func_6287() -> (Tensor[(11, 10, 16), int16],) {
  @func_6285() /* ty=(Tensor[(11, 10, 16), int16],) */
}

def @func_3804(%var_3802: Tensor[(48, 4), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint64], Tensor[(11, 10, 16), float64], Tensor[(48, 4), float32]) {
  @func_3801(%var_3802) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint64], Tensor[(11, 10, 16), float64], Tensor[(48, 4), float32]) */
}

def @func_5089() -> (Tensor[(11, 10, 16), uint16],) {
  @func_5087() /* ty=(Tensor[(11, 10, 16), uint16],) */
}

def @func_8675(%var_8672: int16, %var_8673: Tensor[(16, 7, 1), int16], %var_8674: Tensor[(104), int16]) -> (Tensor[(16, 7, 1), int16], Tensor[(16, 7, 975), uint32], Tensor[(975), uint8], Tensor[(96, 2), uint16], Tensor[(104), int16], Tensor[(2, 96), int16]) {
  @func_8670(%var_8672, %var_8673, %var_8674) /* ty=(Tensor[(16, 7, 1), int16], Tensor[(16, 7, 975), uint32], Tensor[(975), uint8], Tensor[(96, 2), uint16], Tensor[(104), int16], Tensor[(2, 96), int16]) */
}

def @func_4353(%var_4346: Tensor[(13, 1, 15), float64], %var_4349: Tensor[(13, 5, 15), float64]) -> (Tensor[(13, 1, 15), float64], Tensor[(13, 5, 15), int64]) {
  %211 = cast(%var_4346, dtype="float64") /* ty=Tensor[(13, 1, 15), float64] */;
  %212 = cast(%var_4346, dtype="int64") /* ty=Tensor[(13, 1, 15), int64] */;
  %213 = cast(%var_4349, dtype="int64") /* ty=Tensor[(13, 5, 15), int64] */;
  %214 = log10(%211) /* ty=Tensor[(13, 1, 15), float64] */;
  %215 = logical_xor(%212, %213) /* ty=Tensor[(13, 5, 15), int64] */;
  (%214, %215)
}

def @func_4357(%var_4355: Tensor[(13, 1, 15), float64], %var_4356: Tensor[(13, 5, 15), float64]) -> (Tensor[(13, 1, 15), float64], Tensor[(13, 5, 15), int64]) {
  @func_4353(%var_4355, %var_4356) /* ty=(Tensor[(13, 1, 15), float64], Tensor[(13, 5, 15), int64]) */
}

def @func_241(%var_239: Tensor[(16, 4, 3), uint16], %var_240: Tensor[(16, 4, 3), uint16]) -> (Tensor[(16, 4, 3), uint16],) {
  %221 = fn (%var_227: Tensor[(16, 4, 3), uint16], %var_228: Tensor[(16, 4, 3), uint16]) -> (Tensor[(16, 4, 3), uint16],) {
    %216 = cast(%var_228, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
    %217 = shape_of(%var_227, dtype="int32") /* ty=Tensor[(3), int32] */;
    %218 = cast(%var_227, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
    %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %220 = left_shift(%218, %219) /* ty=Tensor[(16, 4, 3), uint16] */;
    (%220,)
  };
  %221(%var_239, %var_240) /* ty=(Tensor[(16, 4, 3), uint16],) */
}

def @func_7838(%var_7830: Tensor[(2, 12, 6), uint64], %var_7831: Tensor[(2, 12, 6), uint64]) -> (Tensor[(2, 12, 6), uint64],) {
  %222 = cast(%var_7831, dtype="uint64") /* ty=Tensor[(2, 12, 6), uint64] */;
  %223 = shape_of(%var_7830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%var_7830, dtype="uint64") /* ty=Tensor[(2, 12, 6), uint64] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %226 = logical_xor(%224, %225) /* ty=Tensor[(2, 12, 6), uint64] */;
  (%226,)
}

def @func_3252() -> (Tensor[(11, 10, 16), float64],) {
  %228 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %227 = @func_3243() /* ty=Tensor[(11, 10, 16), float64] */;
    (%227,)
  };
  %228() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_5339(%var_5337: Tensor[(4, 196), float32]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), float64], Tensor[(14, 7, 8), float64], Tensor[(4, 196), float32]) {
  @func_5336(%var_5337) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), float64], Tensor[(14, 7, 8), float64], Tensor[(4, 196), float32]) */
}

def @func_4636() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  @func_4634() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */
}

def @func_12108(%var_12107: Tensor[(2, 10, 4), int16]) -> (Tensor[(2, 10, 4), float32], Tensor[(11, 10, 16), float64]) {
  %237 = fn (%var_12081: Tensor[(2, 10, 4), int16]) -> (Tensor[(2, 10, 4), float32], Tensor[(11, 10, 16), float64]) {
    %229 = cast(%var_12081, dtype="int16") /* ty=Tensor[(2, 10, 4), int16] */;
    %230 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(2, 10, 4), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %231 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 10, 4), int16] */, dtype="int16") /* ty=Tensor[(2, 10, 4), int16] */;
    %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %233 = bitwise_xor(%231, %232) /* ty=Tensor[(2, 10, 4), int16] */;
    %234 = cast(%233, dtype="float32") /* ty=Tensor[(2, 10, 4), float32] */;
    %235 = atanh(%234) /* ty=Tensor[(2, 10, 4), float32] */;
    %236 = @func_7636() /* ty=Tensor[(11, 10, 16), float64] */;
    (%235, %236)
  };
  %237(%var_12107) /* ty=(Tensor[(2, 10, 4), float32], Tensor[(11, 10, 16), float64]) */
}

def @func_11396() -> Tensor[(512), uint16] {
  %239 = fn () -> Tensor[(512), uint16] {
    %238 = @func_7997() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16]) */;
    %238.1
  };
  %239() /* ty=Tensor[(512), uint16] */
}

def @func_7440() -> (Tensor[(11, 10, 16), float64],) {
  @func_7438() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_12254() -> (Tensor[(11, 10, 16), float64],) {
  %242 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %240 = @func_6396() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %241 = %240.0;
    (%241,)
  };
  %242() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_7438() -> (Tensor[(11, 10, 16), float64],) {
  %243 = @func_6370() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %244 = %243.0;
  (%244,)
}

def @func_11221() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %252 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %245 = @func_6804() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %246 = @func_5612() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %247 = @func_11109() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
    %248 = @func_7580() /* ty=Tensor[(11, 10, 16), float64] */;
    %249 = %245.0;
    %250 = %246.0;
    %251 = %247.0;
    (%248, %249, %250, %251)
  };
  %252() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_4438() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %253 = @func_3690() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %254 = @func_3768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %255 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %256 = %253.0;
  %257 = %254.1;
  %258 = %255.0;
  (%256, %257, %258)
}

def @func_4740() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %265 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %259 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %260 = @func_3690() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %261 = @func_4180() /* ty=Tensor[(11, 10, 16), float64] */;
    %262 = %259.0;
    %263 = %260.0;
    %264 = @func_4244() /* ty=Tensor[(11, 10, 16), float64] */;
    (%261, %262, %263, %264)
  };
  %265() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_7637() -> Tensor[(11, 10, 16), float64] {
  %267 = fn () -> Tensor[(11, 10, 16), float64] {
    %266 = @func_6804() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %266.1
  };
  %267() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_7824() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %268 = @func_6898() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
  %269 = %268.1;
  %270 = @func_4180() /* ty=Tensor[(11, 10, 16), float64] */;
  (%269, %270)
}

def @func_8788(%var_8786: uint8, %var_8787: Tensor[(12, 11, 10), uint8]) -> Tensor[(12, 11, 10), bool] {
  %273 = fn (%var_8766: uint8, %var_8767: Tensor[(12, 11, 10), uint8]) -> Tensor[(12, 11, 10), bool] {
    %271 = cast(%var_8766, dtype="bool") /* ty=bool */;
    %272 = cast(%var_8767, dtype="bool") /* ty=Tensor[(12, 11, 10), bool] */;
    equal(%271, %272) /* ty=Tensor[(12, 11, 10), bool] */
  };
  %273(%var_8786, %var_8787) /* ty=Tensor[(12, 11, 10), bool] */
}

def @func_9990() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(192), uint16], Tensor[(8, 13, 13), int16], Tensor[(1352, 1), uint16]) {
  %286 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(192), uint16], Tensor[(8, 13, 13), int16], Tensor[(1352, 1), uint16]) {
    %274 = @func_7764() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %275 = cast(meta[relay.Constant][14] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
    %276 = reshape(%275, newshape=[192]) /* ty=Tensor[(192), uint16] */;
    %277 = @func_4068(%276) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) */;
    %278 = cast(meta[relay.Constant][15] /* ty=Tensor[(1352, 1), uint16] */, dtype="uint16") /* ty=Tensor[(1352, 1), uint16] */;
    %279 = cast(meta[relay.Constant][15] /* ty=Tensor[(1352, 1), uint16] */, dtype="uint16") /* ty=Tensor[(1352, 1), uint16] */;
    %280 = reshape(%278, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), uint16] */;
    %281 = reshape(%279, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), uint16] */;
    %282 = @func_5760(%280, %281) /* ty=(Tensor[(8, 13, 13), uint16], Tensor[(11, 10, 16), bool], Tensor[(8, 13, 13), int16], Tensor[(11, 10, 16), float64]) */;
    %283 = %274.0;
    %284 = %277.4;
    %285 = %282.2;
    (%283, %284, meta[relay.Constant][14] /* ty=Tensor[(192), uint16] */, %285, meta[relay.Constant][15] /* ty=Tensor[(1352, 1), uint16] */)
  };
  %286() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(192), uint16], Tensor[(8, 13, 13), int16], Tensor[(1352, 1), uint16]) */
}

def @func_4703() -> (Tensor[(11, 10, 16), bool],) {
  %287 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  (%287,)
}

def @func_5512() -> (Tensor[(11, 10, 16), float64],) {
  %290 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %288 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %289 = %288.0;
    (%289,)
  };
  %290() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_7892() -> (Tensor[(11, 10, 16), float64],) {
  %293 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %291 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %292 = %291.0;
    (%292,)
  };
  %293() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_4154() -> Tensor[(11, 10, 16), bool] {
  %295 = fn () -> Tensor[(11, 10, 16), bool] {
    %294 = @func_3889() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
    %294.0
  };
  %295() /* ty=Tensor[(11, 10, 16), bool] */
}

def @func_9289() -> (Tensor[(11, 10, 16), float64],) {
  %298 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %296 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %297 = %296.0;
    (%297,)
  };
  %298() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_10578(%var_10576: Tensor[(15, 9, 10), bool], %var_10577: Tensor[(15, 9, 10), bool]) -> (Tensor[(15, 9, 10), bool], Tensor[(192), uint16], Tensor[(15, 9, 10), float64]) {
  %311 = fn (%var_10558: Tensor[(15, 9, 10), bool], %var_10559: Tensor[(15, 9, 10), bool]) -> (Tensor[(15, 9, 10), bool], Tensor[(192), uint16], Tensor[(15, 9, 10), float64]) {
    %299 = cast(%var_10559, dtype="bool") /* ty=Tensor[(15, 9, 10), bool] */;
    %300 = shape_of(%var_10558, dtype="int32") /* ty=Tensor[(3), int32] */;
    %301 = cast(%var_10558, dtype="bool") /* ty=Tensor[(15, 9, 10), bool] */;
    %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %303 = @func_4232() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(192), uint16], Tensor[(784, 1), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) */;
    %304 = cast(%var_10558, dtype="float64") /* ty=Tensor[(15, 9, 10), float64] */;
    %305 = shape_of(%var_10559, dtype="int32") /* ty=Tensor[(3), int32] */;
    %306 = cast(%var_10559, dtype="float64") /* ty=Tensor[(15, 9, 10), float64] */;
    %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %308 = logical_and(%301, %302) /* ty=Tensor[(15, 9, 10), bool] */;
    %309 = %303.4;
    %310 = floor_mod(%306, %307) /* ty=Tensor[(15, 9, 10), float64] */;
    (%308, %309, %310)
  };
  %311(%var_10576, %var_10577) /* ty=(Tensor[(15, 9, 10), bool], Tensor[(192), uint16], Tensor[(15, 9, 10), float64]) */
}

def @func_8864() -> Tensor[(11, 10, 16), float64] {
  %313 = fn () -> Tensor[(11, 10, 16), float64] {
    %312 = @func_7438() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %312.0
  };
  %313() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_6043(%var_6032: Tensor[(11, 10, 16), float64]) -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), int64]) {
  %314 = @func_4244() /* ty=Tensor[(11, 10, 16), float64] */;
  %315 = cast(%var_6032, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %319 = @func_4551() /* ty=Tensor[(11, 10, 16), float64] */;
  %320 = cast(%var_6032, dtype="int64") /* ty=Tensor[(11, 10, 16), int64] */;
  %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%319, dtype="int64") /* ty=Tensor[(11, 10, 16), int64] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %324 = logical_or(%317, %318) /* ty=Tensor[(11, 10, 16), bool] */;
  %325 = bitwise_xor(%322, %323) /* ty=Tensor[(11, 10, 16), int64] */;
  (%324, %325)
}

def @func_397(%var_364: Tensor[(10, 2, 1), float32], %var_377: Tensor[(192), uint16]) -> (Tensor[(10, 2, 1), float32], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(16, 4, 3), uint16]) {
  %326 = cast(%var_364, dtype="float32") /* ty=Tensor[(10, 2, 1), float32] */;
  %327 = cast(%var_377, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %328 = cast(%var_377, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %329 = reshape(%327, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %330 = reshape(%328, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %331 = @func_238(%329, %330) /* ty=(Tensor[(16, 4, 3), uint16],) */;
  %332 = %331.0;
  %333 = cast(%332, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
  %334 = cast(%332, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
  %335 = reshape(%333, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %336 = reshape(%334, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
  %337 = @func_238(%335, %336) /* ty=(Tensor[(16, 4, 3), uint16],) */;
  %338 = sigmoid(%326) /* ty=Tensor[(10, 2, 1), float32] */;
  %339 = %337.0;
  (%338, %332, %var_377, %339)
}

def @func_8830() -> (Tensor[(11, 10, 16), float64],) {
  %342 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %340 = @func_7438() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %341 = %340.0;
    (%341,)
  };
  %342() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_9439(%var_9417: Tensor[(1, 784), float32], %var_9418: Tensor[(192), uint16]) -> (Tensor[(1, 784), float32], Tensor[(192), uint16], Tensor[(1760), int16]) {
  %343 = cast(%var_9417, dtype="float32") /* ty=Tensor[(1, 784), float32] */;
  %344 = cast(%var_9418, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %345 = reshape(%343, newshape=[14, 7, 8]) /* ty=Tensor[(14, 7, 8), float32] */;
  %346 = reshape(%344, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %347 = @func_3635(%345, %346) /* ty=(Tensor[(192), uint16], Tensor[(1760), uint32], Tensor[(14, 7, 8), float64], Tensor[(14, 7, 8), float64]) */;
  %348 = %347.1;
  %349 = @func_9193() /* ty=Tensor[(11, 10, 16), float64] */;
  %350 = cast(%349, dtype="int16") /* ty=Tensor[(11, 10, 16), int16] */;
  %351 = shape_of(%348, dtype="int32") /* ty=Tensor[(1), int32] */;
  %352 = cast(%348, dtype="int16") /* ty=Tensor[(1760), int16] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?), int16] */;
  %354 = multiply(%352, %353) /* ty=Tensor[(1760), int16] */;
  (%var_9417, %var_9418, %354)
}

def @func_4071(%var_4069: Tensor[(192), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) {
  @func_4068(%var_4069) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) */
}

def @func_8104() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint16]) {
  %355 = @func_7230() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16], Tensor[(5, 16, 2), float32], Tensor[(24, 14), uint16], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(11, 10, 16), bool]) */;
  %356 = %355.0;
  %357 = @func_5875() /* ty=Tensor[(11, 10, 16), uint16] */;
  (%356, %357)
}

def @func_7039() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %362 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %358 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %359 = @func_5511() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %360 = %358.0;
    %361 = %359.0;
    (%360, %361)
  };
  %362() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_10092() -> (Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), bool], Tensor[(2, 12, 6), uint64], Tensor[(144), uint64]) {
  %363 = @func_5087() /* ty=(Tensor[(11, 10, 16), uint16],) */;
  %364 = @func_8161() /* ty=(Tensor[(11, 10, 16), bool],) */;
  %365 = cast(meta[relay.Constant][16] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %366 = cast(meta[relay.Constant][16] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %367 = reshape(%365, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), uint64] */;
  %368 = reshape(%366, newshape=[2, 12, 6]) /* ty=Tensor[(2, 12, 6), uint64] */;
  %369 = @func_7838(%367, %368) /* ty=(Tensor[(2, 12, 6), uint64],) */;
  %370 = %363.0;
  %371 = %364.0;
  %372 = %369.0;
  (%370, %371, %372, meta[relay.Constant][16] /* ty=Tensor[(144), uint64] */)
}

def @func_6921(%var_6920: Tensor[(256, 2), float32]) -> (Tensor[(11, 10, 16), float64], Tensor[(1760), float64], Tensor[(256, 2), float32]) {
  %379 = fn (%var_6904: Tensor[(256, 2), float32]) -> (Tensor[(11, 10, 16), float64], Tensor[(1760), float64], Tensor[(256, 2), float32]) {
    %373 = @func_3690() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %374 = cast(%var_6904, dtype="float32") /* ty=Tensor[(256, 2), float32] */;
    %375 = reshape(%374, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float32] */;
    %376 = @func_5020(%375) /* ty=(Tensor[(11, 10, 16), uint64], Tensor[(1760), float64], Tensor[(192), uint16], Tensor[(6, 7, 5), float32], float32, Tensor[(16, 2, 16), float64]) */;
    %377 = %373.0;
    %378 = %376.1;
    (%377, %378, %var_6904)
  };
  %379(%var_6920) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(1760), float64], Tensor[(256, 2), float32]) */
}

def @func_5910() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %384 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %380 = @func_4739() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %381 = @func_4232() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(192), uint16], Tensor[(784, 1), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) */;
    %382 = %380.1;
    %383 = %381.5;
    (%382, %383)
  };
  %384() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_3335(%var_3333: Tensor[(11, 10, 16), float64], %var_3334: Tensor[(48, 4), uint16]) -> (Tensor[(11, 10, 16), uint64], Tensor[(10, 2), float32], Tensor[(48, 4), bool]) {
  @func_3331(%var_3333, %var_3334) /* ty=(Tensor[(11, 10, 16), uint64], Tensor[(10, 2), float32], Tensor[(48, 4), bool]) */
}

def @func_4327(%var_4326: Tensor[(6, 14, 2), float64]) -> (Tensor[(6, 14, 2), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %391 = fn (%var_4302: Tensor[(6, 14, 2), float64]) -> (Tensor[(6, 14, 2), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %385 = cast(%var_4302, dtype="float64") /* ty=Tensor[(6, 14, 2), float64] */;
    %386 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %387 = asin(%385) /* ty=Tensor[(6, 14, 2), float64] */;
    %388 = @func_4244() /* ty=Tensor[(11, 10, 16), float64] */;
    %389 = @func_4244() /* ty=Tensor[(11, 10, 16), float64] */;
    %390 = %386.0;
    (%387, %388, %389, %390)
  };
  %391(%var_4326) /* ty=(Tensor[(6, 14, 2), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_4232() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(192), uint16], Tensor[(784, 1), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) {
  %392 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %393 = @func_3690() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %394 = cast(meta[relay.Constant][17] /* ty=Tensor[(784, 1), float32] */, dtype="float32") /* ty=Tensor[(784, 1), float32] */;
  %395 = cast(meta[relay.Constant][18] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %396 = reshape(%394, newshape=[14, 7, 8]) /* ty=Tensor[(14, 7, 8), float32] */;
  %397 = reshape(%395, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %398 = @func_3635(%396, %397) /* ty=(Tensor[(192), uint16], Tensor[(1760), uint32], Tensor[(14, 7, 8), float64], Tensor[(14, 7, 8), float64]) */;
  %399 = %392.0;
  %400 = %393.0;
  %401 = %398.0;
  %402 = @func_3419() /* ty=Tensor[(11, 10, 16), float64] */;
  (%399, %400, %401, meta[relay.Constant][17] /* ty=Tensor[(784, 1), float32] */, meta[relay.Constant][18] /* ty=Tensor[(192), uint16] */, %402)
}

def @func_5237(%var_5235: Tensor[(13, 2, 4), int16], %var_5236: Tensor[(96, 2), uint16]) -> (Tensor[(13, 2, 4), bool], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(96, 2), uint16], Tensor[(13, 2, 4), float64]) {
  @func_5233(%var_5235, %var_5236) /* ty=(Tensor[(13, 2, 4), bool], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(96, 2), uint16], Tensor[(13, 2, 4), float64]) */
}

def @func_4234() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(192), uint16], Tensor[(784, 1), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) {
  @func_4232() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(192), uint16], Tensor[(784, 1), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) */
}

def @func_7997() -> (Tensor[(11, 10, 16), float64], Tensor[(512), uint16]) {
  %403 = @func_7124() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16]) */;
  %404 = @func_4299() /* ty=Tensor[(11, 10, 16), float64] */;
  %405 = %403.1;
  (%404, %405)
}

def @func_3639(%var_3637: Tensor[(14, 7, 8), float32], %var_3638: Tensor[(192), uint16]) -> (Tensor[(192), uint16], Tensor[(1760), uint32], Tensor[(14, 7, 8), float64], Tensor[(14, 7, 8), float64]) {
  @func_3635(%var_3637, %var_3638) /* ty=(Tensor[(192), uint16], Tensor[(1760), uint32], Tensor[(14, 7, 8), float64], Tensor[(14, 7, 8), float64]) */
}

def @func_8534() -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  %409 = fn () -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
    %406 = @func_8161() /* ty=(Tensor[(11, 10, 16), bool],) */;
    %407 = %406.0;
    %408 = @func_4831() /* ty=Tensor[(11, 10, 16), float64] */;
    (%407, %408)
  };
  %409() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */
}

def @func_5282(%var_5280: Tensor[(1760), float64], %var_5281: Tensor[(39, 5), float64]) -> (Tensor[(48, 4), float32], Tensor[(11, 10, 16), uint64], Tensor[(1760), float64], Tensor[(13, 1, 15), float64], Tensor[(39, 5), float64], Tensor[(975), float64], Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  %428 = fn (%var_5250: Tensor[(1760), float64], %var_5264: Tensor[(39, 5), float64]) -> (Tensor[(48, 4), float32], Tensor[(11, 10, 16), uint64], Tensor[(1760), float64], Tensor[(13, 1, 15), float64], Tensor[(39, 5), float64], Tensor[(975), float64], Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
    %410 = @func_4763() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool], Tensor[(48, 4), float32], Tensor[(4, 48), uint16]) */;
    %411 = cast(%var_5250, dtype="float64") /* ty=Tensor[(1760), float64] */;
    %412 = %410.2;
    %413 = cast(%412, dtype="uint16") /* ty=Tensor[(48, 4), uint16] */;
    %414 = reshape(%411, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
    %415 = reshape(%413, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint16] */;
    %416 = @func_3331(%414, %415) /* ty=(Tensor[(11, 10, 16), uint64], Tensor[(10, 2), float32], Tensor[(48, 4), bool]) */;
    %417 = cast(%var_5264, dtype="float64") /* ty=Tensor[(39, 5), float64] */;
    %418 = cast(meta[relay.Constant][19] /* ty=Tensor[(975), float64] */, dtype="float64") /* ty=Tensor[(975), float64] */;
    %419 = reshape(%417, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), float64] */;
    %420 = reshape(%418, newshape=[13, 5, 15]) /* ty=Tensor[(13, 5, 15), float64] */;
    %421 = @func_4353(%419, %420) /* ty=(Tensor[(13, 1, 15), float64], Tensor[(13, 5, 15), int64]) */;
    %422 = cast(meta[relay.Constant][19] /* ty=Tensor[(975), float64] */, dtype="float64") /* ty=Tensor[(975), float64] */;
    %423 = %416.0;
    %424 = %421.0;
    %425 = cosh(%422) /* ty=Tensor[(975), float64] */;
    %426 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
    %427 = @func_4831() /* ty=Tensor[(11, 10, 16), float64] */;
    (%412, %423, %var_5250, %424, %var_5264, %425, %426, %427)
  };
  %428(%var_5280, %var_5281) /* ty=(Tensor[(48, 4), float32], Tensor[(11, 10, 16), uint64], Tensor[(1760), float64], Tensor[(13, 1, 15), float64], Tensor[(39, 5), float64], Tensor[(975), float64], Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */
}

def @func_4301() -> Tensor[(11, 10, 16), float64] {
  @func_4299() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_7826() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  @func_7824() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_8944() -> (Tensor[(11, 10, 16), uint16], Tensor[(3, 780), uint8]) {
  %444 = fn () -> (Tensor[(11, 10, 16), uint16], Tensor[(3, 780), uint8]) {
    %429 = @func_5087() /* ty=(Tensor[(11, 10, 16), uint16],) */;
    %430 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 780), uint16] */, dtype="float32") /* ty=Tensor[(3, 780), float32] */;
    %431 = atan(%430) /* ty=Tensor[(3, 780), float32] */;
    %432 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 780), uint16] */, dtype="uint16") /* ty=Tensor[(3, 780), uint16] */;
    %433 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 780), uint16] */, dtype="uint16") /* ty=Tensor[(3, 780), uint16] */;
    %434 = reshape(%432, newshape=[12, 15, 13]) /* ty=Tensor[(12, 15, 13), uint16] */;
    %435 = reshape(%433, newshape=[12, 15, 13]) /* ty=Tensor[(12, 15, 13), uint16] */;
    %436 = @func_5133(%434, %435) /* ty=(Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), bool]) */;
    %437 = %436.0;
    %438 = cast(%437, dtype="uint8") /* ty=Tensor[(12, 15, 13), uint8] */;
    %439 = shape_of(%431, dtype="int32") /* ty=Tensor[(2), int32] */;
    %440 = cast(%431, dtype="uint8") /* ty=Tensor[(3, 780), uint8] */;
    %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %442 = %429.0;
    %443 = bitwise_xor(%440, %441) /* ty=Tensor[(3, 780), uint8] */;
    (%442, %443)
  };
  %444() /* ty=(Tensor[(11, 10, 16), uint16], Tensor[(3, 780), uint8]) */
}

def @func_11830() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %449 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %445 = @func_4739() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %446 = @func_11561() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
    %447 = %445.2;
    %448 = %446.0;
    (%447, %448)
  };
  %449() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_9080() -> (Tensor[(15, 6, 2), float32],) {
  @func_9078() /* ty=(Tensor[(15, 6, 2), float32],) */
}

def @func_7582() -> Tensor[(11, 10, 16), float64] {
  @func_7580() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_8345() -> Tensor[(11, 10, 16), float64] {
  %450 = @func_6738() /* ty=Tensor[(11, 10, 16), float64] */;
  %451 = cast(%450, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  log2(%451) /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_11795() -> (Tensor[(11, 10, 16), float64],) {
  @func_11793() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_974(%var_973: Tensor[(5, 16, 2), float32]) -> Tensor[(5, 16, 2), float32] {
  %453 = fn (%var_967: Tensor[(5, 16, 2), float32]) -> Tensor[(5, 16, 2), float32] {
    %452 = cast(%var_967, dtype="float32") /* ty=Tensor[(5, 16, 2), float32] */;
    cos(%452) /* ty=Tensor[(5, 16, 2), float32] */
  };
  %453(%var_973) /* ty=Tensor[(5, 16, 2), float32] */
}

def @func_6451() -> Tensor[(11, 10, 16), float64] {
  %455 = fn () -> Tensor[(11, 10, 16), float64] {
    %454 = @func_6370() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %454.0
  };
  %455() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_4180() -> Tensor[(11, 10, 16), float64] {
  %456 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %456.0
}

def @func_11466() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  @func_11464() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_11306() -> (Tensor[(11, 10, 16), float64],) {
  %458 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %457 = @func_5161() /* ty=Tensor[(11, 10, 16), float64] */;
    (%457,)
  };
  %458() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_3801(%var_3794: Tensor[(48, 4), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint64], Tensor[(11, 10, 16), float64], Tensor[(48, 4), float32]) {
  %459 = @func_3419() /* ty=Tensor[(11, 10, 16), float64] */;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %461 = cast(%var_3794, dtype="uint16") /* ty=Tensor[(48, 4), uint16] */;
  %462 = reshape(%460, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %463 = reshape(%461, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint16] */;
  %464 = @func_3331(%462, %463) /* ty=(Tensor[(11, 10, 16), uint64], Tensor[(10, 2), float32], Tensor[(48, 4), bool]) */;
  %465 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %466 = cast(%var_3794, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %467 = %464.0;
  %468 = %465.0;
  %469 = asin(%466) /* ty=Tensor[(48, 4), float32] */;
  (%459, %467, %468, %469)
}

def @func_5445() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(5, 16, 2), float32], Tensor[(336), uint16], Tensor[(11, 10, 16), bool]) {
  %482 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(5, 16, 2), float32], Tensor[(336), uint16], Tensor[(11, 10, 16), bool]) {
    %470 = @func_4634() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
    %471 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %472 = cast(meta[relay.Constant][21] /* ty=Tensor[(336), uint16] */, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %473 = reshape(%472, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), uint16] */;
    %474 = @func_2283(%473) /* ty=(Tensor[(14, 2, 12), bool], Tensor[(5, 16, 2), float32], Tensor[(2, 80), float32], Tensor[(5, 16, 2), float32]) */;
    %475 = %470.0;
    %476 = cast(%475, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
    %477 = reshape(%476, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
    %478 = @func_3489(%477) /* ty=(Tensor[(11, 10, 16), bool],) */;
    %479 = %471.0;
    %480 = %474.3;
    %481 = %478.0;
    (%475, %479, %480, meta[relay.Constant][21] /* ty=Tensor[(336), uint16] */, %481)
  };
  %482() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(5, 16, 2), float32], Tensor[(336), uint16], Tensor[(11, 10, 16), bool]) */
}

def @func_4201(%var_4190: Tensor[(11, 10, 16), float64]) -> (Tensor[(11, 10, 16), float32],) {
  %483 = @func_3551() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %484 = %483.0;
  %485 = cast(%var_4190, dtype="uint16") /* ty=Tensor[(11, 10, 16), uint16] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="uint16") /* ty=Tensor[(11, 10, 16), uint16] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %489 = add(%487, %488) /* ty=Tensor[(11, 10, 16), uint16] */;
  %490 = cast(%489, dtype="float32") /* ty=Tensor[(11, 10, 16), float32] */;
  %491 = exp(%490) /* ty=Tensor[(11, 10, 16), float32] */;
  (%491,)
}

def @func_6397() -> (Tensor[(11, 10, 16), float64],) {
  %494 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %492 = @func_3768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %493 = %492.1;
    (%493,)
  };
  %494() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_7764() -> (Tensor[(11, 10, 16), float64],) {
  %495 = @func_4739() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %496 = %495.0;
  (%496,)
}

def @func_7231() -> (Tensor[(11, 10, 16), float64], Tensor[(512), uint16], Tensor[(5, 16, 2), float32], Tensor[(24, 14), uint16], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(11, 10, 16), bool]) {
  %515 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(512), uint16], Tensor[(5, 16, 2), float32], Tensor[(24, 14), uint16], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(11, 10, 16), bool]) {
    %497 = @func_5612() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %498 = @func_7124() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16]) */;
    %499 = cast(meta[relay.Constant][22] /* ty=Tensor[(24, 14), uint16] */, dtype="uint16") /* ty=Tensor[(24, 14), uint16] */;
    %500 = reshape(%499, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), uint16] */;
    %501 = @func_2283(%500) /* ty=(Tensor[(14, 2, 12), bool], Tensor[(5, 16, 2), float32], Tensor[(2, 80), float32], Tensor[(5, 16, 2), float32]) */;
    %502 = cast(meta[relay.Constant][23] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
    %503 = cast(meta[relay.Constant][23] /* ty=Tensor[(192), uint16] */, dtype="uint16") /* ty=Tensor[(192), uint16] */;
    %504 = reshape(%502, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
    %505 = reshape(%503, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
    %506 = @func_238(%504, %505) /* ty=(Tensor[(16, 4, 3), uint16],) */;
    %507 = %497.1;
    %508 = cast(%507, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
    %509 = reshape(%508, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
    %510 = @func_3489(%509) /* ty=(Tensor[(11, 10, 16), bool],) */;
    %511 = %498.1;
    %512 = %501.3;
    %513 = %506.0;
    %514 = %510.0;
    (%507, %511, %512, meta[relay.Constant][22] /* ty=Tensor[(24, 14), uint16] */, %513, meta[relay.Constant][23] /* ty=Tensor[(192), uint16] */, %514)
  };
  %515() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16], Tensor[(5, 16, 2), float32], Tensor[(24, 14), uint16], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(11, 10, 16), bool]) */
}

def @func_8670(%var_8617: int16, %var_8618: Tensor[(16, 7, 1), int16], %var_8658: Tensor[(104), int16]) -> (Tensor[(16, 7, 1), int16], Tensor[(16, 7, 975), uint32], Tensor[(975), uint8], Tensor[(96, 2), uint16], Tensor[(104), int16], Tensor[(2, 96), int16]) {
  %516 = cast(%var_8617, dtype="int16") /* ty=int16 */;
  %517 = cast(%var_8618, dtype="int16") /* ty=Tensor[(16, 7, 1), int16] */;
  %518 = @func_6521() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(975), float64], Tensor[(975), float64]) */;
  %519 = %518.1;
  %520 = cast(%519, dtype="uint32") /* ty=Tensor[(975), uint32] */;
  %521 = cast(%var_8618, dtype="uint32") /* ty=Tensor[(16, 7, 1), uint32] */;
  %522 = cast(%var_8617, dtype="uint8") /* ty=uint8 */;
  %523 = cast(%519, dtype="uint8") /* ty=Tensor[(975), uint8] */;
  %524 = cast(%var_8658, dtype="int16") /* ty=Tensor[(104), int16] */;
  %525 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 96), uint16] */, dtype="uint16") /* ty=Tensor[(2, 96), uint16] */;
  %526 = reshape(%524, newshape=[104]) /* ty=Tensor[(104), int16] */;
  %527 = reshape(%525, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %528 = @func_8383(%526, %527) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(96, 2), uint16], Tensor[(104), int16], Tensor[(192), uint16]) */;
  %529 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 96), uint16] */, dtype="int16") /* ty=Tensor[(2, 96), int16] */;
  %530 = cast(%var_8617, dtype="int16") /* ty=int16 */;
  %531 = add(%516, %517) /* ty=Tensor[(16, 7, 1), int16] */;
  %532 = left_shift(%520, %521) /* ty=Tensor[(16, 7, 975), uint32] */;
  %533 = left_shift(%522, %523) /* ty=Tensor[(975), uint8] */;
  %534 = %528.1;
  %535 = maximum(%529, %530) /* ty=Tensor[(2, 96), int16] */;
  (%531, %532, %533, %534, %var_8658, %535)
}

def @func_9140() -> Tensor[(11, 10, 16), float64] {
  @func_9138() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_9443(%var_9441: Tensor[(1, 784), float32], %var_9442: Tensor[(192), uint16]) -> (Tensor[(1, 784), float32], Tensor[(192), uint16], Tensor[(1760), int16]) {
  @func_9439(%var_9441, %var_9442) /* ty=(Tensor[(1, 784), float32], Tensor[(192), uint16], Tensor[(1760), int16]) */
}

def @func_6371() -> (Tensor[(11, 10, 16), float64],) {
  %538 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %536 = @func_5909() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %537 = %536.1;
    (%537,)
  };
  %538() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_3890() -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  %550 = fn () -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
    %539 = @func_3551() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %540 = %539.0;
    %541 = @func_3551() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %542 = %541.0;
    %543 = cast(%542, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
    %544 = shape_of(%540, dtype="int32") /* ty=Tensor[(3), int32] */;
    %545 = cast(%540, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %547 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %548 = less_equal(%545, %546) /* ty=Tensor[(11, 10, 16), bool] */;
    %549 = %547.0;
    (%548, %549)
  };
  %550() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */
}

def @func_6012(%var_6011: Tensor[(8, 1, 2), float64]) -> Tensor[(8, 1, 2), float64] {
  %554 = fn (%var_6002: Tensor[(8, 1, 2), float64]) -> Tensor[(8, 1, 2), float64] {
    %551 = cast(%var_6002, dtype="float64") /* ty=Tensor[(8, 1, 2), float64] */;
    %552 = acos(%551) /* ty=Tensor[(8, 1, 2), float64] */;
    %553 = cast(%552, dtype="float64") /* ty=Tensor[(8, 1, 2), float64] */;
    log2(%553) /* ty=Tensor[(8, 1, 2), float64] */
  };
  %554(%var_6011) /* ty=Tensor[(8, 1, 2), float64] */
}

def @func_8162() -> (Tensor[(11, 10, 16), bool],) {
  %557 = fn () -> (Tensor[(11, 10, 16), bool],) {
    %555 = @func_5444() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(5, 16, 2), float32], Tensor[(336), uint16], Tensor[(11, 10, 16), bool]) */;
    %556 = %555.4;
    (%556,)
  };
  %557() /* ty=(Tensor[(11, 10, 16), bool],) */
}

def @func_9009() -> Tensor[(11, 10, 16), bool] {
  @func_9007() /* ty=Tensor[(11, 10, 16), bool] */
}

def @func_10094() -> (Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), bool], Tensor[(2, 12, 6), uint64], Tensor[(144), uint64]) {
  @func_10092() /* ty=(Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), bool], Tensor[(2, 12, 6), uint64], Tensor[(144), uint64]) */
}

def @func_4204(%var_4202: Tensor[(11, 10, 16), float64]) -> (Tensor[(11, 10, 16), float32],) {
  @func_4201(%var_4202) /* ty=(Tensor[(11, 10, 16), float32],) */
}

def @func_8106() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint16]) {
  @func_8104() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint16]) */
}

def @func_12578(%var_12577: Tensor[(13), uint64]) -> (Tensor[(11, 10, 16), bool], Tensor[(13), uint64], Tensor[(5, 156), uint16], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %575 = fn (%var_12546: Tensor[(13), uint64]) -> (Tensor[(11, 10, 16), bool], Tensor[(13), uint64], Tensor[(5, 156), uint16], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %558 = @func_8161() /* ty=(Tensor[(11, 10, 16), bool],) */;
    %559 = cast(%var_12546, dtype="uint64") /* ty=Tensor[(13), uint64] */;
    %560 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 156), uint64] */, dtype="uint64") /* ty=Tensor[(5, 156), uint64] */;
    %561 = reshape(%559, newshape=[1, 13, 1]) /* ty=Tensor[(1, 13, 1), uint64] */;
    %562 = reshape(%560, newshape=[15, 13, 4]) /* ty=Tensor[(15, 13, 4), uint64] */;
    %563 = @func_5676(%561, %562) /* ty=(Tensor[(15, 13, 4), uint64],) */;
    %564 = %563.0;
    %565 = cast(%564, dtype="uint16") /* ty=Tensor[(15, 13, 4), uint16] */;
    %566 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(5, 156), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %567 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 156), uint64] */, dtype="uint16") /* ty=Tensor[(5, 156), uint16] */;
    %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %569 = @func_7824() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %570 = @func_3551() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %571 = %558.0;
    %572 = bitwise_and(%567, %568) /* ty=Tensor[(5, 156), uint16] */;
    %573 = %569.1;
    %574 = %570.1;
    (%571, %var_12546, %572, %573, %574)
  };
  %575(%var_12577) /* ty=(Tensor[(11, 10, 16), bool], Tensor[(13), uint64], Tensor[(5, 156), uint16], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_11352(%var_11351: Tensor[(6, 5, 8), uint8]) -> (Tensor[(6, 5, 8), bool], Tensor[(6, 5, 8), bool]) {
  %586 = fn (%var_11346: Tensor[(6, 5, 8), uint8]) -> (Tensor[(6, 5, 8), bool], Tensor[(6, 5, 8), bool]) {
    %576 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 5, 8), uint8] */, dtype="bool") /* ty=Tensor[(6, 5, 8), bool] */;
    %577 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(6, 5, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %578 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 5, 8), uint8] */, dtype="bool") /* ty=Tensor[(6, 5, 8), bool] */;
    %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %580 = cast(%var_11346, dtype="bool") /* ty=Tensor[(6, 5, 8), bool] */;
    %581 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(6, 5, 8), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %582 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 5, 8), uint8] */, dtype="bool") /* ty=Tensor[(6, 5, 8), bool] */;
    %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %584 = less(%578, %579) /* ty=Tensor[(6, 5, 8), bool] */;
    %585 = logical_or(%582, %583) /* ty=Tensor[(6, 5, 8), bool] */;
    (%584, %585)
  };
  %586(%var_11351) /* ty=(Tensor[(6, 5, 8), bool], Tensor[(6, 5, 8), bool]) */
}

def @func_5760(%var_5691: Tensor[(8, 13, 13), uint16], %var_5692: Tensor[(8, 13, 13), uint16]) -> (Tensor[(8, 13, 13), uint16], Tensor[(11, 10, 16), bool], Tensor[(8, 13, 13), int16], Tensor[(11, 10, 16), float64]) {
  %587 = cast(%var_5692, dtype="uint16") /* ty=Tensor[(8, 13, 13), uint16] */;
  %588 = shape_of(%var_5691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%var_5691, dtype="uint16") /* ty=Tensor[(8, 13, 13), uint16] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %591 = cast(%var_5692, dtype="float32") /* ty=Tensor[(8, 13, 13), float32] */;
  %592 = atanh(%591) /* ty=Tensor[(8, 13, 13), float32] */;
  %593 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 13, 13), float32] */, dtype="int64") /* ty=Tensor[(8, 13, 13), int64] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="int64") /* ty=Tensor[(8, 13, 13), int64] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %597 = logical_xor(%595, %596) /* ty=Tensor[(8, 13, 13), int64] */;
  %598 = cast(%597, dtype="int16") /* ty=Tensor[(8, 13, 13), int16] */;
  %599 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %600 = cast(%592, dtype="int16") /* ty=Tensor[(8, 13, 13), int16] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %602 = @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */;
  %603 = bitwise_xor(%589, %590) /* ty=Tensor[(8, 13, 13), uint16] */;
  %604 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  %605 = left_shift(%600, %601) /* ty=Tensor[(8, 13, 13), int16] */;
  %606 = %602.0;
  (%603, %604, %605, %606)
}

def @func_8288(%var_8286: Tensor[(3, 5, 15), int64], %var_8287: Tensor[(3, 5, 15), int64]) -> (Tensor[(3, 5, 15), int64],) {
  %612 = fn (%var_8278: Tensor[(3, 5, 15), int64], %var_8279: Tensor[(3, 5, 15), int64]) -> (Tensor[(3, 5, 15), int64],) {
    %607 = cast(%var_8279, dtype="int64") /* ty=Tensor[(3, 5, 15), int64] */;
    %608 = shape_of(%var_8278, dtype="int32") /* ty=Tensor[(3), int32] */;
    %609 = cast(%var_8278, dtype="int64") /* ty=Tensor[(3, 5, 15), int64] */;
    %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %611 = logical_xor(%609, %610) /* ty=Tensor[(3, 5, 15), int64] */;
    (%611,)
  };
  %612(%var_8286, %var_8287) /* ty=(Tensor[(3, 5, 15), int64],) */
}

def @func_11793() -> (Tensor[(11, 10, 16), float64],) {
  %613 = @func_8533() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
  %614 = %613.1;
  (%614,)
}

def @func_2156(%var_2155: float32) -> (Tensor[(6, 7, 5), float32],) {
  %618 = fn (%var_2148: float32) -> (Tensor[(6, 7, 5), float32],) {
    %615 = cast(%var_2148, dtype="float32") /* ty=float32 */;
    %616 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 7, 5), float32] */, dtype="float32") /* ty=Tensor[(6, 7, 5), float32] */;
    %617 = power(%615, %616) /* ty=Tensor[(6, 7, 5), float32] */;
    (%617,)
  };
  %618(%var_2155) /* ty=(Tensor[(6, 7, 5), float32],) */
}

def @func_7124() -> (Tensor[(11, 10, 16), float64], Tensor[(512), uint16]) {
  %619 = @func_3768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %620 = cast(meta[relay.Constant][30] /* ty=Tensor[(512), float32] */, dtype="float32") /* ty=Tensor[(512), float32] */;
  %621 = reshape(%620, newshape=[16, 2, 16]) /* ty=Tensor[(16, 2, 16), float32] */;
  %622 = @func_5020(%621) /* ty=(Tensor[(11, 10, 16), uint64], Tensor[(1760), float64], Tensor[(192), uint16], Tensor[(6, 7, 5), float32], float32, Tensor[(16, 2, 16), float64]) */;
  %623 = %622.5;
  %624 = cast(%623, dtype="uint16") /* ty=Tensor[(16, 2, 16), uint16] */;
  %625 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(512), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %626 = cast(meta[relay.Constant][30] /* ty=Tensor[(512), float32] */, dtype="uint16") /* ty=Tensor[(512), uint16] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %628 = %619.1;
  %629 = bitwise_xor(%626, %627) /* ty=Tensor[(512), uint16] */;
  (%628, %629)
}

def @func_7766() -> (Tensor[(11, 10, 16), float64],) {
  @func_7764() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_7309() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float32], Tensor[(11, 10, 16), float64]) {
  @func_7307() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float32], Tensor[(11, 10, 16), float64]) */
}

def @func_11489() -> Tensor[(11, 10, 16), bool] {
  %631 = fn () -> Tensor[(11, 10, 16), bool] {
    %630 = @func_4703() /* ty=(Tensor[(11, 10, 16), bool],) */;
    %630.0
  };
  %631() /* ty=Tensor[(11, 10, 16), bool] */
}

def @func_5233(%var_5195: Tensor[(13, 2, 4), int16], %var_5223: Tensor[(96, 2), uint16]) -> (Tensor[(13, 2, 4), bool], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(96, 2), uint16], Tensor[(13, 2, 4), float64]) {
  %632 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 2, 4), int16] */, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  %633 = shape_of(%var_5195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%var_5195, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %636 = greater(%634, %635) /* ty=Tensor[(13, 2, 4), bool] */;
  %637 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 2, 4), int16] */, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%636, dtype="bool") /* ty=Tensor[(13, 2, 4), bool] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %641 = cast(meta[relay.Constant][32] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
  %642 = cast(%var_5223, dtype="uint16") /* ty=Tensor[(96, 2), uint16] */;
  %643 = reshape(%641, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
  %644 = reshape(%642, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %645 = @func_397(%643, %644) /* ty=(Tensor[(10, 2, 1), float32], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(16, 4, 3), uint16]) */;
  %646 = cast(%var_5195, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %647 = asinh(%646) /* ty=Tensor[(13, 2, 4), float32] */;
  %648 = cast(%647, dtype="float64") /* ty=Tensor[(13, 2, 4), float64] */;
  %649 = logical_and(%639, %640) /* ty=Tensor[(13, 2, 4), bool] */;
  %650 = %645.3;
  %651 = cosh(%648) /* ty=Tensor[(13, 2, 4), float64] */;
  (%649, %650, meta[relay.Constant][32] /* ty=Tensor[(20), float32] */, %var_5223, %651)
}

def @func_10391() -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), uint16]) {
  %656 = fn () -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), uint16]) {
    %652 = @func_4703() /* ty=(Tensor[(11, 10, 16), bool],) */;
    %653 = @func_8582() /* ty=(Tensor[(11, 10, 16), uint16],) */;
    %654 = %652.0;
    %655 = %653.0;
    (%654, %655)
  };
  %656() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), uint16]) */
}

def @func_4875() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) {
  %657 = cast(meta[relay.Constant][33] /* ty=Tensor[(24, 8), uint16] */, dtype="uint16") /* ty=Tensor[(24, 8), uint16] */;
  %658 = reshape(%657, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %659 = @func_4068(%658) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) */;
  %660 = cast(meta[relay.Constant][33] /* ty=Tensor[(24, 8), uint16] */, dtype="float32") /* ty=Tensor[(24, 8), float32] */;
  %661 = @func_4739() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %662 = @func_4180() /* ty=Tensor[(11, 10, 16), float64] */;
  %663 = %659.4;
  %664 = log10(%660) /* ty=Tensor[(24, 8), float32] */;
  %665 = %661.2;
  (%662, %663, %664, %665)
}

def @func_4182() -> Tensor[(11, 10, 16), float64] {
  @func_4180() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_9301() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %669 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %666 = @func_7230() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16], Tensor[(5, 16, 2), float32], Tensor[(24, 14), uint16], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(11, 10, 16), bool]) */;
    %667 = %666.0;
    %668 = @func_6738() /* ty=Tensor[(11, 10, 16), float64] */;
    (%667, %668)
  };
  %669() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_6231(%var_6206: Tensor[(975), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(8, 1, 2), float64], Tensor[(16), float64], Tensor[(13, 5, 15), int64], Tensor[(195), float64], Tensor[(975), float64]) {
  %670 = @func_4763() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool], Tensor[(48, 4), float32], Tensor[(4, 48), uint16]) */;
  %671 = cast(meta[relay.Constant][34] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %672 = reshape(%671, newshape=[8, 1, 2]) /* ty=Tensor[(8, 1, 2), float64] */;
  %673 = cast(meta[relay.Constant][35] /* ty=Tensor[(195), float64] */, dtype="float64") /* ty=Tensor[(195), float64] */;
  %674 = cast(%var_6206, dtype="float64") /* ty=Tensor[(975), float64] */;
  %675 = reshape(%673, newshape=[13, 1, 15]) /* ty=Tensor[(13, 1, 15), float64] */;
  %676 = reshape(%674, newshape=[13, 5, 15]) /* ty=Tensor[(13, 5, 15), float64] */;
  %677 = @func_4353(%675, %676) /* ty=(Tensor[(13, 1, 15), float64], Tensor[(13, 5, 15), int64]) */;
  %678 = %670.0;
  %679 = @func_6010(%672) /* ty=Tensor[(8, 1, 2), float64] */;
  %680 = %677.1;
  (%678, %679, meta[relay.Constant][34] /* ty=Tensor[(16), float64] */, %680, meta[relay.Constant][35] /* ty=Tensor[(195), float64] */, %var_6206)
}

def @func_3244() -> Tensor[(11, 10, 16), float64] {
  %682 = fn () -> Tensor[(11, 10, 16), float64] {
    %681 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 10, 16), float64] */, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
    sigmoid(%681) /* ty=Tensor[(11, 10, 16), float64] */
  };
  %682() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_4245() -> Tensor[(11, 10, 16), float64] {
  %683 = fn () -> Tensor[(11, 10, 16), float64] {
    @func_4180() /* ty=Tensor[(11, 10, 16), float64] */
  };
  %683() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_6899() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %687 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
    %684 = @func_6079() /* ty=Tensor[(11, 10, 16), float64] */;
    %685 = @func_6450() /* ty=Tensor[(11, 10, 16), float64] */;
    %686 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
    (%684, %685, %686)
  };
  %687() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */
}

def @func_10648() -> (Tensor[(11, 10, 16), float64],) {
  %688 = @func_10510() /* ty=Tensor[(11, 10, 16), float64] */;
  (%688,)
}

def @func_12524() -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  %689 = @func_8738() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %690 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  %691 = %689.0;
  (%690, %691)
}

def @func_8030() -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  @func_8028() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */
}

def @func_12490(%var_12459: Tensor[(14, 9, 14), float32]) -> (Tensor[(14, 9, 14), float32], Tensor[(11, 10, 16), float64]) {
  %692 = cast(%var_12459, dtype="float32") /* ty=Tensor[(14, 9, 14), float32] */;
  %693 = @func_7891() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %694 = atan(%692) /* ty=Tensor[(14, 9, 14), float32] */;
  %695 = %693.0;
  (%694, %695)
}

def @func_5023(%var_5021: Tensor[(16, 2, 16), float32]) -> (Tensor[(11, 10, 16), uint64], Tensor[(1760), float64], Tensor[(192), uint16], Tensor[(6, 7, 5), float32], float32, Tensor[(16, 2, 16), float64]) {
  @func_5020(%var_5021) /* ty=(Tensor[(11, 10, 16), uint64], Tensor[(1760), float64], Tensor[(192), uint16], Tensor[(6, 7, 5), float32], float32, Tensor[(16, 2, 16), float64]) */
}

def @func_10852() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %700 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
    %696 = @func_10768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(168), float64], Tensor[(9, 9, 16), float64], Tensor[(1, 1296), float64]) */;
    %697 = %696.4;
    %698 = @func_4551() /* ty=Tensor[(11, 10, 16), float64] */;
    %699 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
    (%697, %698, %699)
  };
  %700() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */
}

def @func_9328() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %706 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
    %701 = @func_7438() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %702 = @func_6521() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(975), float64], Tensor[(975), float64]) */;
    %703 = %701.0;
    %704 = %702.0;
    %705 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
    (%703, %704, %705)
  };
  %706() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */
}

def @func_10511() -> Tensor[(11, 10, 16), float64] {
  %708 = fn () -> Tensor[(11, 10, 16), float64] {
    %707 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %707.0
  };
  %708() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_12456() -> (Tensor[(11, 10, 16), uint16],) {
  @func_12454() /* ty=(Tensor[(11, 10, 16), uint16],) */
}

def @func_4988(%var_4986: Tensor[(784), float32]) -> (Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(14, 7, 8), float64], Tensor[(784), float32], Tensor[(11, 10, 16), bool]) {
  @func_4985(%var_4986) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(14, 7, 8), float64], Tensor[(784), float32], Tensor[(11, 10, 16), bool]) */
}

def @func_6806() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  @func_6804() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_11409() -> Tensor[(11, 10, 16), float64] {
  %709 = @func_6370() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %709.0
}

def @func_9728(%var_9695: Tensor[(15, 6, 2), float32], %var_9701: Tensor[(16, 10), float32]) -> (Tensor[(15, 6, 2), uint64], Tensor[(5, 16, 2), float32], Tensor[(16, 10), float32], Tensor[(11, 10, 16), float32], Tensor[(1, 1760), float64]) {
  %710 = @func_4090() /* ty=(Tensor[(15, 6, 2), float32],) */;
  %711 = %710.0;
  %712 = cast(%var_9695, dtype="uint64") /* ty=Tensor[(15, 6, 2), uint64] */;
  %713 = shape_of(%711, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%711, dtype="uint64") /* ty=Tensor[(15, 6, 2), uint64] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %716 = cast(%var_9701, dtype="float32") /* ty=Tensor[(16, 10), float32] */;
  %717 = reshape(%716, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), float32] */;
  %718 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 1760), float64] */, dtype="float64") /* ty=Tensor[(1, 1760), float64] */;
  %719 = reshape(%718, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %720 = @func_4201(%719) /* ty=(Tensor[(11, 10, 16), float32],) */;
  %721 = logical_xor(%714, %715) /* ty=Tensor[(15, 6, 2), uint64] */;
  %722 = @func_972(%717) /* ty=Tensor[(5, 16, 2), float32] */;
  %723 = %720.0;
  (%721, %722, %var_9701, %723, meta[relay.Constant][37] /* ty=Tensor[(1, 1760), float64] */)
}

def @func_10131() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  @func_10129() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_4552() -> Tensor[(11, 10, 16), float64] {
  %725 = fn () -> Tensor[(11, 10, 16), float64] {
    %724 = @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %724.1
  };
  %725() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_6046(%var_6044: Tensor[(11, 10, 16), float64]) -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), int64]) {
  @func_6043(%var_6044) /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), int64]) */
}

def @func_7266(%var_7265: Tensor[(9, 14, 7), float64]) -> (Tensor[(9, 14, 7), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %732 = fn (%var_7234: Tensor[(9, 14, 7), float64]) -> (Tensor[(9, 14, 7), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %726 = cast(%var_7234, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
    %727 = @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %728 = asin(%726) /* ty=Tensor[(9, 14, 7), float64] */;
    %729 = @func_3419() /* ty=Tensor[(11, 10, 16), float64] */;
    %730 = @func_4180() /* ty=Tensor[(11, 10, 16), float64] */;
    %731 = %727.2;
    (%728, %729, %730, %731)
  };
  %732(%var_7265) /* ty=(Tensor[(9, 14, 7), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_7999() -> (Tensor[(11, 10, 16), float64], Tensor[(512), uint16]) {
  @func_7997() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16]) */
}

def @func_4091() -> (Tensor[(15, 6, 2), float32],) {
  %738 = fn () -> (Tensor[(15, 6, 2), float32],) {
    %733 = cast(meta[relay.Constant][39] /* ty=Tensor[(15, 6, 2), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 2), float32] */;
    %734 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(15, 6, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %735 = cast(meta[relay.Constant][38] /* ty=Tensor[(15, 6, 2), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 2), float32] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %737 = floor_divide(%735, %736) /* ty=Tensor[(15, 6, 2), float32] */;
    (%737,)
  };
  %738() /* ty=(Tensor[(15, 6, 2), float32],) */
}

def @func_5679(%var_5677: Tensor[(1, 13, 1), uint64], %var_5678: Tensor[(15, 13, 4), uint64]) -> (Tensor[(15, 13, 4), uint64],) {
  %742 = fn (%var_5669: Tensor[(1, 13, 1), uint64], %var_5670: Tensor[(15, 13, 4), uint64]) -> (Tensor[(15, 13, 4), uint64],) {
    %739 = cast(%var_5669, dtype="uint64") /* ty=Tensor[(1, 13, 1), uint64] */;
    %740 = cast(%var_5670, dtype="uint64") /* ty=Tensor[(15, 13, 4), uint64] */;
    %741 = right_shift(%739, %740) /* ty=Tensor[(15, 13, 4), uint64] */;
    (%741,)
  };
  %742(%var_5677, %var_5678) /* ty=(Tensor[(15, 13, 4), uint64],) */
}

def @func_9812(%var_9783: Tensor[(13, 8, 4), float64]) -> (Tensor[(13, 8, 4), float64], Tensor[(13, 8, 4), float64]) {
  %743 = cast(%var_9783, dtype="float64") /* ty=Tensor[(13, 8, 4), float64] */;
  %744 = cast(%var_9783, dtype="float64") /* ty=Tensor[(13, 8, 4), float64] */;
  %745 = atan(%743) /* ty=Tensor[(13, 8, 4), float64] */;
  %746 = log2(%744) /* ty=Tensor[(13, 8, 4), float64] */;
  (%745, %746)
}

def @func_11110() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %750 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
    %747 = @func_8161() /* ty=(Tensor[(11, 10, 16), bool],) */;
    %748 = @func_3419() /* ty=Tensor[(11, 10, 16), float64] */;
    %749 = %747.0;
    (%748, %749)
  };
  %750() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */
}

def @func_4634() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %751 = @func_4244() /* ty=Tensor[(11, 10, 16), float64] */;
  %752 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  (%751, %752)
}

def @func_11877(%var_11875: Tensor[(24, 8), bool]) -> (Tensor[(11, 10, 16), bool], Tensor[(24, 8), float32], Tensor[(24, 8), uint8]) {
  @func_11874(%var_11875) /* ty=(Tensor[(11, 10, 16), bool], Tensor[(24, 8), float32], Tensor[(24, 8), uint8]) */
}

def @func_5764(%var_5762: Tensor[(8, 13, 13), uint16], %var_5763: Tensor[(8, 13, 13), uint16]) -> (Tensor[(8, 13, 13), uint16], Tensor[(11, 10, 16), bool], Tensor[(8, 13, 13), int16], Tensor[(11, 10, 16), float64]) {
  @func_5760(%var_5762, %var_5763) /* ty=(Tensor[(8, 13, 13), uint16], Tensor[(11, 10, 16), bool], Tensor[(8, 13, 13), int16], Tensor[(11, 10, 16), float64]) */
}

def @func_4705() -> (Tensor[(11, 10, 16), bool],) {
  @func_4703() /* ty=(Tensor[(11, 10, 16), bool],) */
}

def @func_4877() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) {
  @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */
}

def @func_9674() -> (Tensor[(11, 10, 16), float64],) {
  %753 = @func_5511() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %754 = %753.0;
  (%754,)
}

def @func_6354() -> (Tensor[(11, 10, 16), float64],) {
  %756 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %755 = @func_5161() /* ty=Tensor[(11, 10, 16), float64] */;
    (%755,)
  };
  %756() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_7126() -> (Tensor[(11, 10, 16), float64], Tensor[(512), uint16]) {
  @func_7124() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(512), uint16]) */
}

def @func_6740() -> Tensor[(11, 10, 16), float64] {
  @func_6738() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_9007() -> Tensor[(11, 10, 16), bool] {
  %757 = @func_4703() /* ty=(Tensor[(11, 10, 16), bool],) */;
  %757.0
}

def @func_10015() -> (Tensor[(11, 10, 16), float64],) {
  @func_10013() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_7307() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float32], Tensor[(11, 10, 16), float64]) {
  %758 = @func_5444() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(5, 16, 2), float32], Tensor[(336), uint16], Tensor[(11, 10, 16), bool]) */;
  %759 = @func_6804() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %760 = %759.1;
  %761 = cast(%760, dtype="bool") /* ty=Tensor[(11, 10, 16), bool] */;
  %762 = reshape(%761, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), bool] */;
  %763 = @func_6689(%762) /* ty=(Tensor[(11, 10, 16), float32], Tensor[(11, 10, 16), bool]) */;
  %764 = @func_5909() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %765 = %758.0;
  %766 = @func_4299() /* ty=Tensor[(11, 10, 16), float64] */;
  %767 = %763.0;
  %768 = %764.0;
  (%765, %766, %760, %767, %768)
}

def @func_4010() -> (Tensor[(11, 10, 16), float64],) {
  %771 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %769 = @func_3889() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
    %770 = %769.1;
    (%770,)
  };
  %771() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_8347() -> Tensor[(11, 10, 16), float64] {
  @func_8345() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_10650() -> (Tensor[(11, 10, 16), float64],) {
  @func_10648() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_5877() -> Tensor[(11, 10, 16), uint16] {
  @func_5875() /* ty=Tensor[(11, 10, 16), uint16] */
}

def @func_5613() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %775 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %772 = @func_3379() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %773 = %772.0;
    %774 = @func_5161() /* ty=Tensor[(11, 10, 16), float64] */;
    (%773, %774)
  };
  %775() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_10219() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %780 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %776 = @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */;
    %777 = @func_8028() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
    %778 = %776.0;
    %779 = %777.1;
    (%778, %779)
  };
  %780() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_2074(%var_2072: Tensor[(96, 2), uint16], %var_2073: Tensor[(20), float32]) -> (Tensor[(4, 14, 1), float64], Tensor[(16, 4, 3), uint16], Tensor[(96, 2), uint16], Tensor[(16, 4, 3), uint16], Tensor[(20), float32]) {
  %795 = fn (%var_2042: Tensor[(96, 2), uint16], %var_2066: Tensor[(20), float32]) -> (Tensor[(4, 14, 1), float64], Tensor[(16, 4, 3), uint16], Tensor[(96, 2), uint16], Tensor[(16, 4, 3), uint16], Tensor[(20), float32]) {
    %781 = cast(meta[relay.Constant][40] /* ty=Tensor[(4, 14, 1), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 1), float64] */;
    %782 = cast(%var_2042, dtype="uint16") /* ty=Tensor[(96, 2), uint16] */;
    %783 = cast(%var_2042, dtype="uint16") /* ty=Tensor[(96, 2), uint16] */;
    %784 = reshape(%782, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
    %785 = reshape(%783, newshape=[16, 4, 3]) /* ty=Tensor[(16, 4, 3), uint16] */;
    %786 = @func_238(%784, %785) /* ty=(Tensor[(16, 4, 3), uint16],) */;
    %787 = cast(%var_2066, dtype="float32") /* ty=Tensor[(20), float32] */;
    %788 = %786.0;
    %789 = cast(%788, dtype="uint16") /* ty=Tensor[(16, 4, 3), uint16] */;
    %790 = reshape(%787, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
    %791 = reshape(%789, newshape=[192]) /* ty=Tensor[(192), uint16] */;
    %792 = @func_397(%790, %791) /* ty=(Tensor[(10, 2, 1), float32], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(16, 4, 3), uint16]) */;
    %793 = atanh(%781) /* ty=Tensor[(4, 14, 1), float64] */;
    %794 = %792.3;
    (%793, %788, %var_2042, %794, %var_2066)
  };
  %795(%var_2072, %var_2073) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(16, 4, 3), uint16], Tensor[(96, 2), uint16], Tensor[(16, 4, 3), uint16], Tensor[(20), float32]) */
}

def @func_5087() -> (Tensor[(11, 10, 16), uint16],) {
  %796 = @func_4551() /* ty=Tensor[(11, 10, 16), float64] */;
  %797 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 10, 16), float64] */, dtype="uint16") /* ty=Tensor[(11, 10, 16), uint16] */;
  %798 = shape_of(%796, dtype="int32") /* ty=Tensor[(3), int32] */;
  %799 = cast(%796, dtype="uint16") /* ty=Tensor[(11, 10, 16), uint16] */;
  %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %801 = maximum(%799, %800) /* ty=Tensor[(11, 10, 16), uint16] */;
  (%801,)
}

def @func_10861() -> Tensor[(11, 10, 16), bool] {
  %803 = fn () -> Tensor[(11, 10, 16), bool] {
    %802 = @func_8161() /* ty=(Tensor[(11, 10, 16), bool],) */;
    %802.0
  };
  %803() /* ty=Tensor[(11, 10, 16), bool] */
}

def @func_11874(%var_11857: Tensor[(24, 8), bool]) -> (Tensor[(11, 10, 16), bool], Tensor[(24, 8), float32], Tensor[(24, 8), uint8]) {
  %804 = @func_8533() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
  %805 = @func_9657() /* ty=(Tensor[(24, 8), bool], Tensor[(11, 10, 16), float64], Tensor[(512), float32], Tensor[(24, 8), float32], Tensor[(24, 8), bool]) */;
  %806 = @func_9657() /* ty=(Tensor[(24, 8), bool], Tensor[(11, 10, 16), float64], Tensor[(512), float32], Tensor[(24, 8), float32], Tensor[(24, 8), bool]) */;
  %807 = %806.4;
  %808 = cast(%var_11857, dtype="uint8") /* ty=Tensor[(24, 8), uint8] */;
  %809 = shape_of(%807, dtype="int32") /* ty=Tensor[(2), int32] */;
  %810 = cast(%807, dtype="uint8") /* ty=Tensor[(24, 8), uint8] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %812 = %804.0;
  %813 = %805.3;
  %814 = multiply(%810, %811) /* ty=Tensor[(24, 8), uint8] */;
  (%812, %813, %814)
}

def @main(%var_12652: Tensor[(14, 11, 3), float32]) -> (Tensor[(14, 11, 3), float64], Tensor[(11, 10, 16), float64], Tensor[(14, 11, 3), bool]) {
  %815 = cast(%var_12652, dtype="float64") /* ty=Tensor[(14, 11, 3), float64] */;
  %816 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(14, 11, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 11, 3), float32] */, dtype="float64") /* ty=Tensor[(14, 11, 3), float64] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %819 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 11, 3), float32] */, dtype="float32") /* ty=Tensor[(14, 11, 3), float32] */;
  %820 = cosh(%819) /* ty=Tensor[(14, 11, 3), float32] */;
  %821 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 11, 3), float32] */, dtype="uint8") /* ty=Tensor[(14, 11, 3), uint8] */;
  %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%820, dtype="uint8") /* ty=Tensor[(14, 11, 3), uint8] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %825 = multiply(%823, %824) /* ty=Tensor[(14, 11, 3), uint8] */;
  %826 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 11, 3), float32] */, dtype="bool") /* ty=Tensor[(14, 11, 3), bool] */;
  %827 = shape_of(%825, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = cast(%825, dtype="bool") /* ty=Tensor[(14, 11, 3), bool] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %830 = floor_mod(%817, %818) /* ty=Tensor[(14, 11, 3), float64] */;
  %831 = @func_11409() /* ty=Tensor[(11, 10, 16), float64] */;
  %832 = equal(%828, %829) /* ty=Tensor[(14, 11, 3), bool] */;
  (%830, %831, %832)
}

def @func_6080() -> Tensor[(11, 10, 16), float64] {
  %834 = fn () -> Tensor[(11, 10, 16), float64] {
    %833 = @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %833.0
  };
  %834() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_4763() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool], Tensor[(48, 4), float32], Tensor[(4, 48), uint16]) {
  %835 = @func_4232() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(192), uint16], Tensor[(784, 1), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) */;
  %836 = @func_4634() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
  %837 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 48), uint16] */, dtype="uint16") /* ty=Tensor[(4, 48), uint16] */;
  %838 = reshape(%837, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint16] */;
  %839 = @func_3801(%838) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint64], Tensor[(11, 10, 16), float64], Tensor[(48, 4), float32]) */;
  %840 = %835.5;
  %841 = %836.1;
  %842 = %839.3;
  (%840, %841, %842, meta[relay.Constant][43] /* ty=Tensor[(4, 48), uint16] */)
}

def @func_7367() -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  %846 = fn () -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
    %843 = @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %844 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
    %845 = %843.0;
    (%844, %845)
  };
  %846() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */
}

def @func_7738(%var_7737: Tensor[(168), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(168), float64], Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  %857 = fn (%var_7697: Tensor[(168), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(168), float64], Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
    %847 = cast(%var_7697, dtype="float64") /* ty=Tensor[(168), float64] */;
    %848 = reshape(%847, newshape=[6, 14, 2]) /* ty=Tensor[(6, 14, 2), float64] */;
    %849 = @func_4325(%848) /* ty=(Tensor[(6, 14, 2), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %850 = %849.1;
    %851 = cast(%850, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
    %852 = reshape(%851, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
    %853 = @func_6043(%852) /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), int64]) */;
    %854 = @func_4299() /* ty=Tensor[(11, 10, 16), float64] */;
    %855 = %853.0;
    %856 = @func_4551() /* ty=Tensor[(11, 10, 16), float64] */;
    (%854, %850, %var_7697, %855, %856)
  };
  %857(%var_7737) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(168), float64], Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */
}

def @func_5136(%var_5134: Tensor[(12, 15, 13), uint16], %var_5135: Tensor[(12, 15, 13), uint16]) -> (Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), bool]) {
  %870 = fn (%var_5092: Tensor[(12, 15, 13), uint16], %var_5093: Tensor[(12, 15, 13), uint16]) -> (Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), bool]) {
    %858 = cast(%var_5092, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
    %859 = cast(%var_5093, dtype="uint16") /* ty=Tensor[(12, 15, 13), uint16] */;
    %860 = shape_of(%var_5092, dtype="int32") /* ty=Tensor[(3), int32] */;
    %861 = cast(%var_5092, dtype="uint16") /* ty=Tensor[(12, 15, 13), uint16] */;
    %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %863 = bitwise_xor(%861, %862) /* ty=Tensor[(12, 15, 13), uint16] */;
    %864 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 15, 13), uint16] */, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
    %865 = shape_of(%863, dtype="int32") /* ty=Tensor[(3), int32] */;
    %866 = cast(%863, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
    %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %868 = tan(%858) /* ty=Tensor[(12, 15, 13), float32] */;
    %869 = less(%866, %867) /* ty=Tensor[(12, 15, 13), bool] */;
    (%868, %869)
  };
  %870(%var_5134, %var_5135) /* ty=(Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), bool]) */
}

def @func_9401(%var_9399: Tensor[(1350), bool], %var_9400: Tensor[(2, 880), float64]) -> (Tensor[(4, 14, 3), float32], Tensor[(1350), bool], Tensor[(11, 10, 16), int64], Tensor[(2, 880), float64], Tensor[(6, 15, 15), int16], Tensor[(11, 10, 16), float64]) {
  %899 = fn (%var_9352: Tensor[(1350), bool], %var_9369: Tensor[(2, 880), float64]) -> (Tensor[(4, 14, 3), float32], Tensor[(1350), bool], Tensor[(11, 10, 16), int64], Tensor[(2, 880), float64], Tensor[(6, 15, 15), int16], Tensor[(11, 10, 16), float64]) {
    %871 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 14, 3), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 3), float32] */;
    %872 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(4, 14, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %873 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 14, 3), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 3), float32] */;
    %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %875 = cast(%var_9369, dtype="float64") /* ty=Tensor[(2, 880), float64] */;
    %876 = reshape(%875, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
    %877 = @func_6043(%876) /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), int64]) */;
    %878 = cast(%var_9352, dtype="bool") /* ty=Tensor[(1350), bool] */;
    %879 = cast(%var_9352, dtype="bool") /* ty=Tensor[(1350), bool] */;
    %880 = reshape(%878, newshape=[6, 15, 15]) /* ty=Tensor[(6, 15, 15), bool] */;
    %881 = reshape(%879, newshape=[6, 15, 15]) /* ty=Tensor[(6, 15, 15), bool] */;
    %882 = @func_9106(%880, %881) /* ty=(Tensor[(6, 15, 15), bool],) */;
    %883 = %882.0;
    %884 = cast(%883, dtype="float64") /* ty=Tensor[(6, 15, 15), float64] */;
    %885 = asinh(%884) /* ty=Tensor[(6, 15, 15), float64] */;
    %886 = cast(%885, dtype="float64") /* ty=Tensor[(6, 15, 15), float64] */;
    %887 = cos(%886) /* ty=Tensor[(6, 15, 15), float64] */;
    %888 = cast(%887, dtype="float32") /* ty=Tensor[(6, 15, 15), float32] */;
    %889 = sinh(%888) /* ty=Tensor[(6, 15, 15), float32] */;
    %890 = cast(%887, dtype="int16") /* ty=Tensor[(6, 15, 15), int16] */;
    %891 = shape_of(%889, dtype="int32") /* ty=Tensor[(3), int32] */;
    %892 = cast(%889, dtype="int16") /* ty=Tensor[(6, 15, 15), int16] */;
    %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %894 = @func_7891() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %895 = mod(%873, %874) /* ty=Tensor[(4, 14, 3), float32] */;
    %896 = %877.1;
    %897 = maximum(%892, %893) /* ty=Tensor[(6, 15, 15), int16] */;
    %898 = %894.0;
    (%895, %var_9352, %896, %var_9369, %897, %898)
  };
  %899(%var_9399, %var_9400) /* ty=(Tensor[(4, 14, 3), float32], Tensor[(1350), bool], Tensor[(11, 10, 16), int64], Tensor[(2, 880), float64], Tensor[(6, 15, 15), int16], Tensor[(11, 10, 16), float64]) */
}

def @func_7580() -> Tensor[(11, 10, 16), float64] {
  %900 = @func_7307() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float32], Tensor[(11, 10, 16), float64]) */;
  %900.2
}

def @func_3635(%var_3593: Tensor[(14, 7, 8), float32], %var_3598: Tensor[(192), uint16]) -> (Tensor[(192), uint16], Tensor[(1760), uint32], Tensor[(14, 7, 8), float64], Tensor[(14, 7, 8), float64]) {
  %901 = cast(meta[relay.Constant][47] /* ty=Tensor[(1760), float64] */, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %902 = cast(%var_3598, dtype="uint16") /* ty=Tensor[(192), uint16] */;
  %903 = reshape(%901, newshape=[11, 10, 16]) /* ty=Tensor[(11, 10, 16), float64] */;
  %904 = reshape(%902, newshape=[48, 4]) /* ty=Tensor[(48, 4), uint16] */;
  %905 = @func_3331(%903, %904) /* ty=(Tensor[(11, 10, 16), uint64], Tensor[(10, 2), float32], Tensor[(48, 4), bool]) */;
  %906 = %905.0;
  %907 = cast(%906, dtype="uint32") /* ty=Tensor[(11, 10, 16), uint32] */;
  %908 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(1760), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %909 = cast(meta[relay.Constant][47] /* ty=Tensor[(1760), float64] */, dtype="uint32") /* ty=Tensor[(1760), uint32] */;
  %910 = dyn.reshape(%907, %908, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %911 = cast(%var_3593, dtype="float32") /* ty=Tensor[(14, 7, 8), float32] */;
  %912 = log(%911) /* ty=Tensor[(14, 7, 8), float32] */;
  %913 = cast(%912, dtype="float64") /* ty=Tensor[(14, 7, 8), float64] */;
  %914 = cast(%912, dtype="float32") /* ty=Tensor[(14, 7, 8), float32] */;
  %915 = sigmoid(%914) /* ty=Tensor[(14, 7, 8), float32] */;
  %916 = cast(%915, dtype="float64") /* ty=Tensor[(14, 7, 8), float64] */;
  %917 = minimum(%909, %910) /* ty=Tensor[(1760), uint32] */;
  %918 = cos(%913) /* ty=Tensor[(14, 7, 8), float64] */;
  %919 = cosh(%916) /* ty=Tensor[(14, 7, 8), float64] */;
  (%var_3598, %917, %918, %919)
}

def @func_5653() -> (Tensor[(11, 10, 16), float64],) {
  %922 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %920 = @func_3768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %921 = %920.0;
    (%921,)
  };
  %922() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_5336(%var_5332: Tensor[(4, 196), float32]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), float64], Tensor[(14, 7, 8), float64], Tensor[(4, 196), float32]) {
  %923 = @func_3768() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %924 = @func_5087() /* ty=(Tensor[(11, 10, 16), uint16],) */;
  %925 = cast(%var_5332, dtype="float32") /* ty=Tensor[(4, 196), float32] */;
  %926 = reshape(%925, newshape=[784]) /* ty=Tensor[(784), float32] */;
  %927 = @func_4985(%926) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(14, 7, 8), float64], Tensor[(784), float32], Tensor[(11, 10, 16), bool]) */;
  %928 = %923.1;
  %929 = %924.0;
  %930 = @func_4831() /* ty=Tensor[(11, 10, 16), float64] */;
  %931 = %927.2;
  (%928, %929, %930, %931, %var_5332)
}

def @func_9047() -> (Tensor[(15, 6, 2), float32],) {
  %934 = fn () -> (Tensor[(15, 6, 2), float32],) {
    %932 = @func_4090() /* ty=(Tensor[(15, 6, 2), float32],) */;
    %933 = %932.0;
    (%933,)
  };
  %934() /* ty=(Tensor[(15, 6, 2), float32],) */
}

def @func_5162() -> Tensor[(11, 10, 16), float64] {
  %936 = fn () -> Tensor[(11, 10, 16), float64] {
    %935 = @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
    %935.1
  };
  %936() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_8028() -> (Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) {
  %937 = @func_4153() /* ty=Tensor[(11, 10, 16), bool] */;
  %938 = @func_4551() /* ty=Tensor[(11, 10, 16), float64] */;
  (%937, %938)
}

def @func_11280(%var_11278: Tensor[(1, 168), float64]) -> (Tensor[(24, 8), bool], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(1, 168), float32]) {
  @func_11277(%var_11278) /* ty=(Tensor[(24, 8), bool], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(1, 168), float32]) */
}

def @func_10194() -> (Tensor[(11, 10, 16), float64],) {
  %940 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %939 = @func_5161() /* ty=Tensor[(11, 10, 16), float64] */;
    (%939,)
  };
  %940() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_11630() -> (Tensor[(11, 10, 16), float64], Tensor[(3, 5, 15), int64], Tensor[(25, 9), int64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  @func_11628() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(3, 5, 15), int64], Tensor[(25, 9), int64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */
}

def @func_6692(%var_6690: Tensor[(11, 10, 16), bool]) -> (Tensor[(11, 10, 16), float32], Tensor[(11, 10, 16), bool]) {
  @func_6689(%var_6690) /* ty=(Tensor[(11, 10, 16), float32], Tensor[(11, 10, 16), bool]) */
}

def @func_4691(%var_4690: Tensor[(48, 4), uint16]) -> (Tensor[(11, 10, 16), bool], Tensor[(20), float32], Tensor[(48, 4), uint16], Tensor[(16, 4, 3), uint16]) {
  %953 = fn (%var_4659: Tensor[(48, 4), uint16]) -> (Tensor[(11, 10, 16), bool], Tensor[(20), float32], Tensor[(48, 4), uint16], Tensor[(16, 4, 3), uint16]) {
    %941 = @func_3889() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
    %942 = cast(%var_4659, dtype="uint16") /* ty=Tensor[(48, 4), uint16] */;
    %943 = reshape(%942, newshape=[192]) /* ty=Tensor[(192), uint16] */;
    %944 = @func_4068(%943) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(16, 4, 3), uint16], Tensor[(20), float32], Tensor[(192), uint16], Tensor[(11, 10, 16), float64]) */;
    %945 = %944.2;
    %946 = cast(%945, dtype="float32") /* ty=Tensor[(20), float32] */;
    %947 = cast(%var_4659, dtype="uint16") /* ty=Tensor[(48, 4), uint16] */;
    %948 = reshape(%946, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
    %949 = reshape(%947, newshape=[192]) /* ty=Tensor[(192), uint16] */;
    %950 = @func_397(%948, %949) /* ty=(Tensor[(10, 2, 1), float32], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(16, 4, 3), uint16]) */;
    %951 = %941.0;
    %952 = %950.1;
    (%951, %945, %var_4659, %952)
  };
  %953(%var_4690) /* ty=(Tensor[(11, 10, 16), bool], Tensor[(20), float32], Tensor[(48, 4), uint16], Tensor[(16, 4, 3), uint16]) */
}

def @func_6564() -> (Tensor[(11, 10, 16), float64],) {
  %957 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %954 = @func_5161() /* ty=Tensor[(11, 10, 16), float64] */;
    %955 = cast(%954, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
    %956 = log10(%955) /* ty=Tensor[(11, 10, 16), float64] */;
    (%956,)
  };
  %957() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_8195(%var_8180: Tensor[(882), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(882), float32]) {
  %958 = @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %959 = cast(%var_8180, dtype="float64") /* ty=Tensor[(882), float64] */;
  %960 = reshape(%959, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), float64] */;
  %961 = @func_7264(%960) /* ty=(Tensor[(9, 14, 7), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */;
  %962 = cast(meta[relay.Constant][48] /* ty=Tensor[(882), float64] */, dtype="float32") /* ty=Tensor[(882), float32] */;
  %963 = shape_of(%var_8180, dtype="int32") /* ty=Tensor[(1), int32] */;
  %964 = cast(%var_8180, dtype="float32") /* ty=Tensor[(882), float32] */;
  %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?), float32] */;
  %966 = %958.1;
  %967 = %961.1;
  %968 = power(%964, %965) /* ty=Tensor[(882), float32] */;
  (%966, %967, %968)
}

def @func_5561(%var_5557: Tensor[(9, 9, 16), float64]) -> Tensor[(9, 9, 16), float64] {
  %969 = cast(%var_5557, dtype="float64") /* ty=Tensor[(9, 9, 16), float64] */;
  asinh(%969) /* ty=Tensor[(9, 9, 16), float64] */
}

def @func_11411() -> Tensor[(11, 10, 16), float64] {
  @func_11409() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_8740() -> (Tensor[(11, 10, 16), float64],) {
  @func_8738() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_10129() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %970 = @func_9193() /* ty=Tensor[(11, 10, 16), float64] */;
  %971 = @func_3243() /* ty=Tensor[(11, 10, 16), float64] */;
  %972 = @func_9138() /* ty=Tensor[(11, 10, 16), float64] */;
  (%970, %971, %972)
}

def @func_9194() -> Tensor[(11, 10, 16), float64] {
  %973 = fn () -> Tensor[(11, 10, 16), float64] {
    @func_4244() /* ty=Tensor[(11, 10, 16), float64] */
  };
  %973() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_4833() -> Tensor[(11, 10, 16), float64] {
  @func_4831() /* ty=Tensor[(11, 10, 16), float64] */
}

def @func_5875() -> Tensor[(11, 10, 16), uint16] {
  %974 = @func_5087() /* ty=(Tensor[(11, 10, 16), uint16],) */;
  %974.0
}

def @func_4440() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  @func_4438() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_4985(%var_4946: Tensor[(784), float32]) -> (Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(14, 7, 8), float64], Tensor[(784), float32], Tensor[(11, 10, 16), bool]) {
  %975 = @func_4009() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %976 = %975.0;
  %977 = cast(%976, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
  %978 = @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */;
  %979 = cast(%var_4946, dtype="float32") /* ty=Tensor[(784), float32] */;
  %980 = %978.2;
  %981 = cast(%980, dtype="uint16") /* ty=Tensor[(24, 8), uint16] */;
  %982 = reshape(%979, newshape=[14, 7, 8]) /* ty=Tensor[(14, 7, 8), float32] */;
  %983 = reshape(%981, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %984 = @func_3635(%982, %983) /* ty=(Tensor[(192), uint16], Tensor[(1760), uint32], Tensor[(14, 7, 8), float64], Tensor[(14, 7, 8), float64]) */;
  %985 = @func_4634() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
  %986 = cos(%977) /* ty=Tensor[(11, 10, 16), float64] */;
  %987 = %984.2;
  %988 = %985.1;
  (%986, %980, %987, %var_4946, %988)
}

def @func_9054() -> (Tensor[(11, 10, 16), int16],) {
  %991 = fn () -> (Tensor[(11, 10, 16), int16],) {
    %989 = @func_6285() /* ty=(Tensor[(11, 10, 16), int16],) */;
    %990 = %989.0;
    (%990,)
  };
  %991() /* ty=(Tensor[(11, 10, 16), int16],) */
}

def @func_9732(%var_9730: Tensor[(15, 6, 2), float32], %var_9731: Tensor[(16, 10), float32]) -> (Tensor[(15, 6, 2), uint64], Tensor[(5, 16, 2), float32], Tensor[(16, 10), float32], Tensor[(11, 10, 16), float32], Tensor[(1, 1760), float64]) {
  @func_9728(%var_9730, %var_9731) /* ty=(Tensor[(15, 6, 2), uint64], Tensor[(5, 16, 2), float32], Tensor[(16, 10), float32], Tensor[(11, 10, 16), float32], Tensor[(1, 1760), float64]) */
}

def @func_2285(%var_2284: Tensor[(14, 2, 12), uint16]) -> (Tensor[(14, 2, 12), bool], Tensor[(5, 16, 2), float32], Tensor[(2, 80), float32], Tensor[(5, 16, 2), float32]) {
  %1001 = fn (%var_2259: Tensor[(14, 2, 12), uint16]) -> (Tensor[(14, 2, 12), bool], Tensor[(5, 16, 2), float32], Tensor[(2, 80), float32], Tensor[(5, 16, 2), float32]) {
    %992 = cast(meta[relay.Constant][49] /* ty=Tensor[(14, 1, 12), uint16] */, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
    %993 = cast(%var_2259, dtype="bool") /* ty=Tensor[(14, 2, 12), bool] */;
    %994 = cast(meta[relay.Constant][50] /* ty=Tensor[(2, 80), float32] */, dtype="float32") /* ty=Tensor[(2, 80), float32] */;
    %995 = reshape(%994, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), float32] */;
    %996 = @func_972(%995) /* ty=Tensor[(5, 16, 2), float32] */;
    %997 = cast(%996, dtype="float32") /* ty=Tensor[(5, 16, 2), float32] */;
    %998 = reshape(%997, newshape=[5, 16, 2]) /* ty=Tensor[(5, 16, 2), float32] */;
    %999 = equal(%992, %993) /* ty=Tensor[(14, 2, 12), bool] */;
    %1000 = @func_972(%998) /* ty=Tensor[(5, 16, 2), float32] */;
    (%999, %996, meta[relay.Constant][50] /* ty=Tensor[(2, 80), float32] */, %1000)
  };
  %1001(%var_2284) /* ty=(Tensor[(14, 2, 12), bool], Tensor[(5, 16, 2), float32], Tensor[(2, 80), float32], Tensor[(5, 16, 2), float32]) */
}

def @func_3380() -> (Tensor[(11, 10, 16), float64],) {
  %1003 = fn () -> (Tensor[(11, 10, 16), float64],) {
    %1002 = @func_3243() /* ty=Tensor[(11, 10, 16), float64] */;
    (%1002,)
  };
  %1003() /* ty=(Tensor[(11, 10, 16), float64],) */
}

def @func_12493(%var_12491: Tensor[(14, 9, 14), float32]) -> (Tensor[(14, 9, 14), float32], Tensor[(11, 10, 16), float64]) {
  @func_12490(%var_12491) /* ty=(Tensor[(14, 9, 14), float32], Tensor[(11, 10, 16), float64]) */
}

def @func_9109(%var_9107: Tensor[(6, 15, 15), bool], %var_9108: Tensor[(6, 15, 15), bool]) -> (Tensor[(6, 15, 15), bool],) {
  %1009 = fn (%var_9101: Tensor[(6, 15, 15), bool], %var_9102: Tensor[(6, 15, 15), bool]) -> (Tensor[(6, 15, 15), bool],) {
    %1004 = cast(%var_9102, dtype="bool") /* ty=Tensor[(6, 15, 15), bool] */;
    %1005 = shape_of(%var_9101, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1006 = cast(%var_9101, dtype="bool") /* ty=Tensor[(6, 15, 15), bool] */;
    %1007 = dyn.reshape(%1004, %1005, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1008 = logical_and(%1006, %1007) /* ty=Tensor[(6, 15, 15), bool] */;
    (%1008,)
  };
  %1009(%var_9107, %var_9108) /* ty=(Tensor[(6, 15, 15), bool],) */
}

def @func_11277(%var_11243: Tensor[(1, 168), float64]) -> (Tensor[(24, 8), bool], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(1, 168), float32]) {
  %1010 = @func_9657() /* ty=(Tensor[(24, 8), bool], Tensor[(11, 10, 16), float64], Tensor[(512), float32], Tensor[(24, 8), float32], Tensor[(24, 8), bool]) */;
  %1011 = cast(%var_11243, dtype="float64") /* ty=Tensor[(1, 168), float64] */;
  %1012 = reshape(%1011, newshape=[168]) /* ty=Tensor[(168), float64] */;
  %1013 = @func_7736(%1012) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(168), float64], Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
  %1014 = @func_9327() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
  %1015 = cast(%var_11243, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %1016 = sqrt(%1015) /* ty=Tensor[(1, 168), float32] */;
  %1017 = cast(%1016, dtype="float32") /* ty=Tensor[(1, 168), float32] */;
  %1018 = %1010.4;
  %1019 = %1013.1;
  %1020 = %1014.1;
  %1021 = atanh(%1017) /* ty=Tensor[(1, 168), float32] */;
  (%1018, %1019, %1020, %1021)
}

def @func_3331(%var_3286: Tensor[(11, 10, 16), float64], %var_3308: Tensor[(48, 4), uint16]) -> (Tensor[(11, 10, 16), uint64], Tensor[(10, 2), float32], Tensor[(48, 4), bool]) {
  %1022 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %1023 = %1022.0;
  %1024 = cast(%var_3286, dtype="uint64") /* ty=Tensor[(11, 10, 16), uint64] */;
  %1025 = shape_of(%1023, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1026 = cast(%1023, dtype="uint64") /* ty=Tensor[(11, 10, 16), uint64] */;
  %1027 = dyn.reshape(%1024, %1025, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1028 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 2), float32] */, dtype="float32") /* ty=Tensor[(10, 2), float32] */;
  %1029 = cast(%var_3308, dtype="uint16") /* ty=Tensor[(48, 4), uint16] */;
  %1030 = reshape(%1028, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
  %1031 = reshape(%1029, newshape=[192]) /* ty=Tensor[(192), uint16] */;
  %1032 = @func_397(%1030, %1031) /* ty=(Tensor[(10, 2, 1), float32], Tensor[(16, 4, 3), uint16], Tensor[(192), uint16], Tensor[(16, 4, 3), uint16]) */;
  %1033 = %1032.3;
  %1034 = cast(%1033, dtype="bool") /* ty=Tensor[(16, 4, 3), bool] */;
  %1035 = shape_of(%var_3308, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1036 = cast(%var_3308, dtype="bool") /* ty=Tensor[(48, 4), bool] */;
  %1037 = dyn.reshape(%1034, %1035, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1038 = logical_xor(%1026, %1027) /* ty=Tensor[(11, 10, 16), uint64] */;
  %1039 = greater(%1036, %1037) /* ty=Tensor[(48, 4), bool] */;
  (%1038, meta[relay.Constant][51] /* ty=Tensor[(10, 2), float32] */, %1039)
}

def @func_8584() -> (Tensor[(11, 10, 16), uint16],) {
  @func_8582() /* ty=(Tensor[(11, 10, 16), uint16],) */
}

def @func_3769() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %1043 = fn () -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
    %1040 = @func_3251() /* ty=(Tensor[(11, 10, 16), float64],) */;
    %1041 = %1040.0;
    %1042 = @func_3419() /* ty=Tensor[(11, 10, 16), float64] */;
    (%1041, %1042)
  };
  %1043() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) */
}

def @func_11628() -> (Tensor[(11, 10, 16), float64], Tensor[(3, 5, 15), int64], Tensor[(25, 9), int64], Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) {
  %1044 = cast(meta[relay.Constant][52] /* ty=Tensor[(25, 9), int64] */, dtype="int64") /* ty=Tensor[(25, 9), int64] */;
  %1045 = cast(meta[relay.Constant][52] /* ty=Tensor[(25, 9), int64] */, dtype="int64") /* ty=Tensor[(25, 9), int64] */;
  %1046 = reshape(%1044, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
  %1047 = reshape(%1045, newshape=[3, 5, 15]) /* ty=Tensor[(3, 5, 15), int64] */;
  %1048 = @func_8285(%1046, %1047) /* ty=(Tensor[(3, 5, 15), int64],) */;
  %1049 = @func_10193() /* ty=(Tensor[(11, 10, 16), float64],) */;
  %1050 = @func_8533() /* ty=(Tensor[(11, 10, 16), bool], Tensor[(11, 10, 16), float64]) */;
  %1051 = @func_6738() /* ty=Tensor[(11, 10, 16), float64] */;
  %1052 = %1048.0;
  %1053 = %1049.0;
  %1054 = %1050.0;
  (%1051, %1052, meta[relay.Constant][52] /* ty=Tensor[(25, 9), int64] */, %1053, %1054)
}

def @func_11464() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64]) {
  %1055 = @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */;
  %1056 = @func_7580() /* ty=Tensor[(11, 10, 16), float64] */;
  %1057 = %1055.0;
  (%1056, %1057)
}

def @func_5813() -> (Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), float64]) {
  %1069 = fn () -> (Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), float64]) {
    %1058 = @func_5087() /* ty=(Tensor[(11, 10, 16), uint16],) */;
    %1059 = @func_5161() /* ty=Tensor[(11, 10, 16), float64] */;
    %1060 = @func_3419() /* ty=Tensor[(11, 10, 16), float64] */;
    %1061 = cast(%1060, dtype="uint64") /* ty=Tensor[(11, 10, 16), uint64] */;
    %1062 = shape_of(%1059, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1063 = cast(%1059, dtype="uint64") /* ty=Tensor[(11, 10, 16), uint64] */;
    %1064 = dyn.reshape(%1061, %1062, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1065 = bitwise_and(%1063, %1064) /* ty=Tensor[(11, 10, 16), uint64] */;
    %1066 = cast(%1065, dtype="float64") /* ty=Tensor[(11, 10, 16), float64] */;
    %1067 = %1058.0;
    %1068 = atan(%1066) /* ty=Tensor[(11, 10, 16), float64] */;
    (%1067, %1068)
  };
  %1069() /* ty=(Tensor[(11, 10, 16), uint16], Tensor[(11, 10, 16), float64]) */
}

def @func_4765() -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool], Tensor[(48, 4), float32], Tensor[(4, 48), uint16]) {
  @func_4763() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool], Tensor[(48, 4), float32], Tensor[(4, 48), uint16]) */
}

def @func_11368() -> (Tensor[(11, 10, 16), bool],) {
  %1072 = fn () -> (Tensor[(11, 10, 16), bool],) {
    %1070 = @func_11109() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), bool]) */;
    %1071 = %1070.1;
    (%1071,)
  };
  %1072() /* ty=(Tensor[(11, 10, 16), bool],) */
}

def @func_10329(%var_10327: Tensor[(192), uint16]) -> (Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(15, 6, 2), float64], Tensor[(1760), uint32], Tensor[(784), float32], Tensor[(192), uint16], Tensor[(24, 8), float32]) {
  @func_10326(%var_10327) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(15, 6, 2), float64], Tensor[(1760), uint32], Tensor[(784), float32], Tensor[(192), uint16], Tensor[(24, 8), float32]) */
}

def @func_11679(%var_11678: Tensor[(975), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(975), float64], Tensor[(975), float64]) {
  %1079 = fn (%var_11668: Tensor[(975), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(975), float64], Tensor[(975), float64]) {
    %1073 = @func_4875() /* ty=(Tensor[(11, 10, 16), float64], Tensor[(11, 10, 16), float64], Tensor[(24, 8), float32], Tensor[(11, 10, 16), float64]) */;
    %1074 = cast(%var_11668, dtype="float64") /* ty=Tensor[(975), float64] */;
    %1075 = reshape(%1074, newshape=[975]) /* ty=Tensor[(975), float64] */;
    %1076 = @func_6231(%1075) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(8, 1, 2), float64], Tensor[(16), float64], Tensor[(13, 5, 15), int64], Tensor[(195), float64], Tensor[(975), float64]) */;
    %1077 = %1073.3;
    %1078 = %1076.5;
    (%1077, %1078, %var_11668)
  };
  %1079(%var_11678) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(975), float64], Tensor[(975), float64]) */
}

def @func_6234(%var_6232: Tensor[(975), float64]) -> (Tensor[(11, 10, 16), float64], Tensor[(8, 1, 2), float64], Tensor[(16), float64], Tensor[(13, 5, 15), int64], Tensor[(195), float64], Tensor[(975), float64]) {
  @func_6231(%var_6232) /* ty=(Tensor[(11, 10, 16), float64], Tensor[(8, 1, 2), float64], Tensor[(16), float64], Tensor[(13, 5, 15), int64], Tensor[(195), float64], Tensor[(975), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen559/build/output.py", line 3242, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:32:40] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

