==========mod==========
#[version = "0.0.5"]
def @func_166(%var_110: Tensor[(1, 7, 9), float32]) -> (Tensor[(?, 7, 9), float32], Tensor[(3, 7, 9), bool]) {
  %0 = cast(%var_110, dtype="float32") /* ty=Tensor[(1, 7, 9), float32] */;
  %1 = exp(%0) /* ty=Tensor[(1, 7, 9), float32] */;
  %2 = cast(%var_110, dtype="int64") /* ty=Tensor[(1, 7, 9), int64] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="int64") /* ty=Tensor[(1, 7, 9), int64] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %6 = subtract(%4, %5) /* ty=Tensor[(?, 7, 9), int64] */;
  %7 = cast(%var_110, dtype="bool") /* ty=Tensor[(1, 7, 9), bool] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%6, dtype="bool") /* ty=Tensor[(?, 7, 9), bool] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %11 = greater_equal(%9, %10) /* ty=Tensor[(?, 7, 9), bool] */;
  %12 = cast(%11, dtype="float32") /* ty=Tensor[(?, 7, 9), float32] */;
  %13 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%6, dtype="float32") /* ty=Tensor[(?, 7, 9), float32] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %16 = cast(%var_110, dtype="bool") /* ty=Tensor[(1, 7, 9), bool] */;
  %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 7, 9), float32] */, dtype="bool") /* ty=Tensor[(3, 7, 9), bool] */;
  %18 = multiply(%14, %15) /* ty=Tensor[(?, 7, 9), float32] */;
  %19 = logical_and(%16, %17) /* ty=Tensor[(3, 7, 9), bool] */;
  (%18, %19)
}

def @func_1211(%var_1172: Tensor[(9, 8, 7), uint32], %var_1178: Tensor[(150), uint8], %var_1194: Tensor[(160), float64]) -> (Tensor[(9, 8, 7), uint16], Tensor[(150), uint8], Tensor[(?, 63), bool], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(10, 8, 2), float64]) {
  %20 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %21 = %20.0;
  %22 = cast(%var_1172, dtype="uint16") /* ty=Tensor[(9, 8, 7), uint16] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="uint16") /* ty=Tensor[(9, 8, 7), uint16] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %26 = cast(%var_1178, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %27 = cast(%var_1178, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %28 = cast(%var_1178, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %29 = cast(meta[relay.Constant][1] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %30 = cast(%var_1178, dtype="float64") /* ty=Tensor[(150), float64] */;
  %31 = reshape(%26, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
  %32 = reshape(%27, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
  %33 = reshape(%28, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
  %34 = reshape(%29, newshape=[1, 63]) /* ty=Tensor[(1, 63), float32] */;
  %35 = reshape(%30, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), float64] */;
  %36 = @func_360(%31, %32, %33, %34, %35) /* ty=(Tensor[(15, 2, 5), bool], Tensor[(3, 7, 9), bool], Tensor[(1, 63), float32], Tensor[(15, 2, 5), int64]) */;
  %37 = %36.2;
  %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(63), float32] */, dtype="bool") /* ty=Tensor[(63), bool] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(2), int32] */;
  %40 = cast(%37, dtype="bool") /* ty=Tensor[(1, 63), bool] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %42 = cast(%var_1194, dtype="float64") /* ty=Tensor[(160), float64] */;
  %43 = cast(%var_1194, dtype="float32") /* ty=Tensor[(160), float32] */;
  %44 = reshape(%42, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %45 = reshape(%43, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float32] */;
  %46 = @func_1057(%44, %45) /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), bool]) */;
  %47 = cast(%var_1194, dtype="float64") /* ty=Tensor[(160), float64] */;
  %48 = cast(%var_1194, dtype="float32") /* ty=Tensor[(160), float32] */;
  %49 = reshape(%47, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %50 = reshape(%48, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float32] */;
  %51 = @func_1057(%49, %50) /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), bool]) */;
  %52 = minimum(%24, %25) /* ty=Tensor[(9, 8, 7), uint16] */;
  %53 = logical_and(%40, %41) /* ty=Tensor[(?, 63), bool] */;
  %54 = %46.0;
  %55 = %51.0;
  (%52, %var_1178, %53, %54, %var_1194, %55)
}

def @func_1683() -> Tensor[(9, 8, 7), uint32] {
  %56 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %56.0
}

def @func_2305(%var_2214: Tensor[(384), float64]) -> (Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), uint32], Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32], Tensor[(8, 16, 3), int8]) {
  %57 = @func_1828() /* ty=(Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32]) */;
  %58 = %57.0;
  %59 = cast(%58, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %60 = reshape(%59, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %61 = @func_1281(%60) /* ty=Tensor[(10, 8, 2), int32] */;
  %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 8, 2), int32] */, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %63 = shape_of(%61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%61, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %66 = cast(%61, dtype="uint32") /* ty=Tensor[(10, 8, 2), uint32] */;
  %67 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%58, dtype="uint32") /* ty=Tensor[(10, 8, 2), uint32] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %70 = cast(%61, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
  %71 = cosh(%70) /* ty=Tensor[(10, 8, 2), float32] */;
  %72 = cast(%61, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %73 = cast(%61, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
  %74 = reshape(%72, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %75 = reshape(%73, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float32] */;
  %76 = @func_1057(%74, %75) /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), bool]) */;
  %77 = %76.1;
  %78 = cast(%77, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %79 = shape_of(%71, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%71, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %82 = cast(%var_2214, dtype="float64") /* ty=Tensor[(384), float64] */;
  %83 = reshape(%82, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), float64] */;
  %84 = @func_1881(%83) /* ty=(Tensor[(8, 16, 3), float64], Tensor[(9, 8, 7), uint32]) */;
  %85 = %84.0;
  %86 = cast(%var_2214, dtype="bool") /* ty=Tensor[(384), bool] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%85, dtype="bool") /* ty=Tensor[(8, 16, 3), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = logical_or(%88, %89) /* ty=Tensor[(8, 16, 3), bool] */;
  %91 = cast(%var_2214, dtype="int8") /* ty=Tensor[(384), int8] */;
  %92 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%90, dtype="int8") /* ty=Tensor[(8, 16, 3), int8] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %95 = minimum(%64, %65) /* ty=Tensor[(10, 8, 2), float64] */;
  %96 = bitwise_or(%68, %69) /* ty=Tensor[(10, 8, 2), uint32] */;
  %97 = equal(%80, %81) /* ty=Tensor[(10, 8, 2), bool] */;
  %98 = @func_1683() /* ty=Tensor[(9, 8, 7), uint32] */;
  %99 = subtract(%93, %94) /* ty=Tensor[(8, 16, 3), int8] */;
  (%95, %96, %97, %98, %99)
}

def @func_3723() -> (Tensor[(9, 8, 7), uint32],) {
  %100 = @func_1860() /* ty=Tensor[(9, 8, 7), uint32] */;
  (%100,)
}

def @func_4178() -> Tensor[(9, 8, 7), uint32] {
  %101 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %101.0
}

def @func_4351() -> (Tensor[(9, 8, 7), uint32], Tensor[(315), uint16]) {
  %102 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %103 = @func_4228() /* ty=Tensor[(9, 8, 7), uint32] */;
  %104 = %102.3;
  (%103, %104)
}

def @func_4782(%var_4771: Tensor[(8, 16, 7), float64]) -> Tensor[(8, 16, 7), float64] {
  %105 = cast(%var_4771, dtype="float64") /* ty=Tensor[(8, 16, 7), float64] */;
  tan(%105) /* ty=Tensor[(8, 16, 7), float64] */
}

def @func_3803() -> (Tensor[(468), float64],) {
  %106 = @func_2444() /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) */;
  %107 = %106.5;
  (%107,)
}

def @func_4767(%var_4731: Tensor[(13, 4, 6), float32]) -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(13, 4, 6), float32]) {
  %108 = @func_2463() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */;
  %109 = cast(%var_4731, dtype="float32") /* ty=Tensor[(13, 4, 6), float32] */;
  %110 = sinh(%109) /* ty=Tensor[(13, 4, 6), float32] */;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(13, 4, 6), float32] */;
  %112 = %108.1;
  %113 = @func_4228() /* ty=Tensor[(9, 8, 7), uint32] */;
  %114 = acos(%111) /* ty=Tensor[(13, 4, 6), float32] */;
  (%112, %113, %114)
}

def @func_3030() -> (Tensor[(468), float64], Tensor[(2, 5, 2), float64], Tensor[(20), float64]) {
  %115 = @func_2444() /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) */;
  %116 = cast(meta[relay.Constant][3] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %117 = cast(meta[relay.Constant][3] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %118 = reshape(%116, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
  %119 = reshape(%117, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
  %120 = @func_66(%118, %119) /* ty=(Tensor[(2, 5, 2), float64],) */;
  %121 = %115.5;
  %122 = %120.0;
  (%121, %122, meta[relay.Constant][3] /* ty=Tensor[(20), float64] */)
}

def @func_2123() -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) {
  %123 = @func_1426() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %124 = %123.0;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %126 = reshape(%125, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), float64] */;
  %127 = @func_1482(%126) /* ty=(Tensor[(9, 8, 7), bool],) */;
  %128 = %127.0;
  (%124, %128)
}

def @func_3090() -> Tensor[(9, 8, 7), uint32] {
  %129 = @func_2123() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) */;
  %129.0
}

def @func_1410(%var_1381: Tensor[(9, 8, 7), uint32], %var_1391: Tensor[(25, 6), uint8], %var_1392: Tensor[(80, 2), float64]) -> (Tensor[(?, 63), bool], Tensor[(25, 6), uint8], Tensor[(80, 2), float64], Tensor[(9, 8, 7), float32]) {
  %130 = cast(%var_1381, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
  %131 = cast(%var_1391, dtype="uint8") /* ty=Tensor[(25, 6), uint8] */;
  %132 = cast(%var_1392, dtype="float64") /* ty=Tensor[(80, 2), float64] */;
  %133 = reshape(%130, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), uint32] */;
  %134 = reshape(%131, newshape=[150]) /* ty=Tensor[(150), uint8] */;
  %135 = reshape(%132, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %136 = @func_1211(%133, %134, %135) /* ty=(Tensor[(9, 8, 7), uint16], Tensor[(150), uint8], Tensor[(?, 63), bool], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(10, 8, 2), float64]) */;
  %137 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %138 = %137.0;
  %139 = cast(%var_1381, dtype="int8") /* ty=Tensor[(9, 8, 7), int8] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%138, dtype="int8") /* ty=Tensor[(9, 8, 7), int8] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %143 = multiply(%141, %142) /* ty=Tensor[(9, 8, 7), int8] */;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %145 = %136.2;
  %146 = erf(%144) /* ty=Tensor[(9, 8, 7), float32] */;
  (%145, %var_1391, %var_1392, %146)
}

def @func_3290(%var_3280: uint16, %var_3282: Tensor[(132), float32]) -> (Tensor[(6, 12, 3), uint16], uint16, Tensor[(216), uint16], Tensor[(132), float32], Tensor[(15, 3, 7), float32]) {
  %147 = cast(%var_3280, dtype="uint16") /* ty=uint16 */;
  %148 = cast(meta[relay.Constant][4] /* ty=Tensor[(216), uint16] */, dtype="uint16") /* ty=Tensor[(216), uint16] */;
  %149 = cast(%var_3282, dtype="float32") /* ty=Tensor[(132), float32] */;
  %150 = reshape(%147, newshape=[]) /* ty=uint16 */;
  %151 = reshape(%148, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), uint16] */;
  %152 = reshape(%149, newshape=[3, 44]) /* ty=Tensor[(3, 44), float32] */;
  %153 = @func_702(%150, %151, %152) /* ty=(Tensor[(6, 12, 3), uint16], Tensor[(4, 3, 11), float32], Tensor[(3, 44), float32]) */;
  %154 = @func_2020() /* ty=Tensor[(15, 3, 7), bool] */;
  %155 = cast(%154, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
  %156 = %153.0;
  %157 = sin(%155) /* ty=Tensor[(15, 3, 7), float32] */;
  (%156, %var_3280, meta[relay.Constant][4] /* ty=Tensor[(216), uint16] */, %var_3282, %157)
}

def @func_4420() -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
  %158 = @func_3771() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */;
  %159 = @func_4351() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(315), uint16]) */;
  %160 = %158.0;
  %161 = %159.0;
  (%160, %161)
}

def @func_2193(%var_2166: Tensor[(9, 8, 7), uint32]) -> (Tensor[(9, 8, 7), uint16], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint8]) {
  %162 = @func_1683() /* ty=Tensor[(9, 8, 7), uint32] */;
  %163 = cast(%var_2166, dtype="int16") /* ty=Tensor[(9, 8, 7), int16] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="int16") /* ty=Tensor[(9, 8, 7), int16] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %167 = maximum(%165, %166) /* ty=Tensor[(9, 8, 7), int16] */;
  %168 = cast(%var_2166, dtype="uint16") /* ty=Tensor[(9, 8, 7), uint16] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%167, dtype="uint16") /* ty=Tensor[(9, 8, 7), uint16] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %172 = @func_1860() /* ty=Tensor[(9, 8, 7), uint32] */;
  %173 = cast(%172, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
  %174 = reshape(%173, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), uint32] */;
  %175 = @func_1912(%174) /* ty=(Tensor[(9, 8, 7), uint8],) */;
  %176 = logical_xor(%170, %171) /* ty=Tensor[(9, 8, 7), uint16] */;
  %177 = %175.0;
  (%176, %172, %177)
}

def @func_1482(%var_1477: Tensor[(9, 8, 7), float64]) -> (Tensor[(9, 8, 7), bool],) {
  %178 = @func_1426() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %179 = %178.0;
  %180 = cast(%179, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %181 = cosh(%180) /* ty=Tensor[(9, 8, 7), float64] */;
  %182 = cast(%181, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %183 = tan(%182) /* ty=Tensor[(9, 8, 7), float32] */;
  %184 = cast(%183, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %185 = sqrt(%184) /* ty=Tensor[(9, 8, 7), float64] */;
  %186 = cast(%var_1477, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%185, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %190 = less_equal(%188, %189) /* ty=Tensor[(9, 8, 7), bool] */;
  (%190,)
}

def @func_1135() -> (Tensor[(9, 8, 7), uint32],) {
  %191 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %192 = %191.0;
  (%192,)
}

def @func_360(%var_328: Tensor[(15, 2, 5), uint8], %var_329: Tensor[(15, 2, 5), uint8], %var_339: Tensor[(15, 2, 5), uint8], %var_344: Tensor[(1, 63), float32], %var_353: Tensor[(15, 2, 5), float64]) -> (Tensor[(15, 2, 5), bool], Tensor[(3, 7, 9), bool], Tensor[(1, 63), float32], Tensor[(15, 2, 5), int64]) {
  %193 = cast(%var_329, dtype="bool") /* ty=Tensor[(15, 2, 5), bool] */;
  %194 = shape_of(%var_328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%var_328, dtype="bool") /* ty=Tensor[(15, 2, 5), bool] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %197 = cast(%var_344, dtype="float32") /* ty=Tensor[(1, 63), float32] */;
  %198 = reshape(%197, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
  %199 = @func_166(%198) /* ty=(Tensor[(?, 7, 9), float32], Tensor[(3, 7, 9), bool]) */;
  %200 = cast(%var_339, dtype="float64") /* ty=Tensor[(15, 2, 5), float64] */;
  %201 = shape_of(%var_329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%var_329, dtype="float64") /* ty=Tensor[(15, 2, 5), float64] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %204 = add(%202, %203) /* ty=Tensor[(15, 2, 5), float64] */;
  %205 = cast(%var_353, dtype="int64") /* ty=Tensor[(15, 2, 5), int64] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="int64") /* ty=Tensor[(15, 2, 5), int64] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %209 = not_equal(%195, %196) /* ty=Tensor[(15, 2, 5), bool] */;
  %210 = %199.1;
  %211 = bitwise_or(%207, %208) /* ty=Tensor[(15, 2, 5), int64] */;
  (%209, %210, %var_344, %211)
}

def @func_2688() -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
  %212 = @func_2123() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) */;
  %213 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %214 = @func_2123() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) */;
  %215 = %212.0;
  %216 = %213.0;
  %217 = %214.0;
  (%215, %216, %217)
}

def @func_2739(%var_2732: Tensor[(315), uint16]) -> (Tensor[(9, 8, 7), uint32], Tensor[(15, 3, 7), float64], Tensor[(315), uint16], Tensor[(9, 8, 7), uint32]) {
  %218 = @func_1426() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %219 = cast(%var_2732, dtype="uint16") /* ty=Tensor[(315), uint16] */;
  %220 = reshape(%219, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint16] */;
  %221 = @func_441(%220) /* ty=(Tensor[(15, 3, 7), bool], Tensor[(15, 3, 7), float64]) */;
  %222 = @func_2688() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */;
  %223 = %218.0;
  %224 = %221.1;
  %225 = %222.0;
  (%223, %224, %var_2732, %225)
}

def @func_3771() -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
  %226 = @func_2712() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */;
  %227 = %226.1;
  %228 = @func_1683() /* ty=Tensor[(9, 8, 7), uint32] */;
  (%227, %228)
}

def @func_983() -> (Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) {
  %229 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %230 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(10, 8, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %233 = floor_divide(%231, %232) /* ty=Tensor[(10, 8, 2), float64] */;
  %234 = cast(%233, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %235 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %236 = cast(meta[relay.Constant][7] /* ty=Tensor[(315), uint16] */, dtype="uint16") /* ty=Tensor[(315), uint16] */;
  %237 = reshape(%236, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint16] */;
  %238 = @func_441(%237) /* ty=(Tensor[(15, 3, 7), bool], Tensor[(15, 3, 7), float64]) */;
  %239 = cast(meta[relay.Constant][8] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %240 = cast(meta[relay.Constant][8] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %241 = reshape(%239, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %242 = reshape(%240, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %243 = sigmoid(%234) /* ty=Tensor[(10, 8, 2), float64] */;
  %244 = acosh(%235) /* ty=Tensor[(10, 8, 2), float64] */;
  %245 = %238.0;
  %246 = @func_851(%241, %242) /* ty=Tensor[(13, 4, 9), float64] */;
  (%243, %244, %245, meta[relay.Constant][7] /* ty=Tensor[(315), uint16] */, %246, meta[relay.Constant][8] /* ty=Tensor[(468), float64] */)
}

def @func_2854() -> Tensor[(9, 8, 7), uint32] {
  @func_2818() /* ty=Tensor[(9, 8, 7), uint32] */
}

def @func_851(%var_845: Tensor[(13, 4, 9), float64], %var_846: Tensor[(13, 4, 9), float64]) -> Tensor[(13, 4, 9), float64] {
  %247 = cast(%var_846, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
  %248 = shape_of(%var_845, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%var_845, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%249, %250) /* ty=Tensor[(13, 4, 9), float64] */
}

def @func_5049(%var_5030: Tensor[(468), float64]) -> (Tensor[(9, 8, 7), uint32], Tensor[(10, 8, 2), float64], Tensor[(150), uint8], Tensor[(160), float64], Tensor[(10, 8, 2), float32], Tensor[(10, 8, 2), bool], Tensor[(468), float64], Tensor[(25, 6), float64], Tensor[(9, 8, 7), uint32], Tensor[(10, 8, 2), float64], Tensor[(315), uint16]) {
  %251 = @func_2688() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */;
  %252 = %251.2;
  %253 = cast(%252, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
  %254 = cast(meta[relay.Constant][9] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %255 = cast(meta[relay.Constant][10] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %256 = reshape(%253, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), uint32] */;
  %257 = reshape(%254, newshape=[150]) /* ty=Tensor[(150), uint8] */;
  %258 = reshape(%255, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %259 = @func_1211(%256, %257, %258) /* ty=(Tensor[(9, 8, 7), uint16], Tensor[(150), uint8], Tensor[(?, 63), bool], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(10, 8, 2), float64]) */;
  %260 = @func_3718() /* ty=(Tensor[(10, 8, 2), float32], Tensor[(9, 8, 7), float64]) */;
  %261 = cast(%var_5030, dtype="float64") /* ty=Tensor[(468), float64] */;
  %262 = %259.3;
  %263 = cast(%262, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %264 = reshape(%261, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %265 = reshape(%263, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %266 = @func_2349(%264, %265) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(468), float64], Tensor[(10, 8, 2), bool]) */;
  %267 = @func_1828() /* ty=(Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32]) */;
  %268 = %260.0;
  %269 = cast(%268, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %270 = cast(%268, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
  %271 = reshape(%269, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %272 = reshape(%270, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float32] */;
  %273 = @func_1057(%271, %272) /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), bool]) */;
  %274 = @func_4351() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(315), uint16]) */;
  %275 = %266.2;
  %276 = @func_4557() /* ty=Tensor[(25, 6), float64] */;
  %277 = %267.1;
  %278 = %273.0;
  %279 = %274.1;
  (%252, %262, meta[relay.Constant][9] /* ty=Tensor[(150), uint8] */, meta[relay.Constant][10] /* ty=Tensor[(160), float64] */, %268, %275, %var_5030, %276, %277, %278, %279)
}

def @func_2841(%var_2821: Tensor[(6, 14, 16), float64], %var_2830: Tensor[(63), float32]) -> (Tensor[(6, 14, 16), float64], Tensor[(3, 7, 9), bool], Tensor[(150), uint8], Tensor[(63), float32]) {
  %280 = cast(%var_2821, dtype="float64") /* ty=Tensor[(6, 14, 16), float64] */;
  %281 = cast(meta[relay.Constant][11] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %282 = cast(meta[relay.Constant][11] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %283 = cast(meta[relay.Constant][11] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %284 = cast(%var_2830, dtype="float32") /* ty=Tensor[(63), float32] */;
  %285 = cast(meta[relay.Constant][11] /* ty=Tensor[(150), uint8] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %286 = reshape(%281, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
  %287 = reshape(%282, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
  %288 = reshape(%283, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
  %289 = reshape(%284, newshape=[1, 63]) /* ty=Tensor[(1, 63), float32] */;
  %290 = reshape(%285, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), float64] */;
  %291 = @func_360(%286, %287, %288, %289, %290) /* ty=(Tensor[(15, 2, 5), bool], Tensor[(3, 7, 9), bool], Tensor[(1, 63), float32], Tensor[(15, 2, 5), int64]) */;
  %292 = acos(%280) /* ty=Tensor[(6, 14, 16), float64] */;
  %293 = %291.1;
  (%292, %293, meta[relay.Constant][11] /* ty=Tensor[(150), uint8] */, %var_2830)
}

def @func_4825() -> (Tensor[(13, 4, 9), float64],) {
  %294 = @func_2444() /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) */;
  %295 = %294.7;
  (%295,)
}

def @func_5306() -> (Tensor[(9, 8, 7), float64],) {
  %296 = @func_5203() /* ty=(Tensor[(9, 8, 7), bool],) */;
  %297 = %296.0;
  %298 = cast(%297, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %299 = atan(%298) /* ty=Tensor[(9, 8, 7), float64] */;
  (%299,)
}

def @func_4663(%var_4638: Tensor[(6, 78), float64]) -> (Tensor[(9, 8, 7), bool], Tensor[(468), float64], Tensor[(150), uint8], Tensor[(6, 78), float32], Tensor[(6, 78), int32]) {
  %300 = @func_2524() /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) */;
  %301 = %300.0;
  %302 = cast(%301, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
  %303 = cast(meta[relay.Constant][12] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %304 = cast(meta[relay.Constant][13] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %305 = reshape(%302, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), uint32] */;
  %306 = reshape(%303, newshape=[6, 78]) /* ty=Tensor[(6, 78), float64] */;
  %307 = reshape(%304, newshape=[150, 1]) /* ty=Tensor[(150, 1), uint8] */;
  %308 = @func_1624(%305, %306, %307) /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), bool], Tensor[(13, 4, 9), float64], Tensor[(6, 78), float64], Tensor[(3, 7, 9), bool], Tensor[(150, 1), uint8], Tensor[(63), float32], Tensor[(9, 8, 7), float64]) */;
  %309 = %308.3;
  %310 = cast(%var_4638, dtype="float32") /* ty=Tensor[(6, 78), float32] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(2), int32] */;
  %312 = cast(%309, dtype="float32") /* ty=Tensor[(6, 78), float32] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %314 = cast(%var_4638, dtype="int32") /* ty=Tensor[(6, 78), int32] */;
  %315 = shape_of(%309, dtype="int32") /* ty=Tensor[(2), int32] */;
  %316 = cast(%309, dtype="int32") /* ty=Tensor[(6, 78), int32] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %318 = mod(%312, %313) /* ty=Tensor[(6, 78), float32] */;
  %319 = maximum(%316, %317) /* ty=Tensor[(6, 78), int32] */;
  (%301, meta[relay.Constant][12] /* ty=Tensor[(468), float64] */, meta[relay.Constant][13] /* ty=Tensor[(150), uint8] */, %318, %319)
}

def @func_2020() -> Tensor[(15, 3, 7), bool] {
  %320 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %320.2
}

def @func_4929(%var_4902: Tensor[(16, 6, 7), float64]) -> (Tensor[(10, 8, 2), float32], Tensor[(16, 6, 7), uint32], Tensor[(9, 8, 7), uint32]) {
  %321 = cast(%var_4902, dtype="float64") /* ty=Tensor[(16, 6, 7), float64] */;
  %322 = acosh(%321) /* ty=Tensor[(16, 6, 7), float64] */;
  %323 = cast(%var_4902, dtype="uint32") /* ty=Tensor[(16, 6, 7), uint32] */;
  %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%322, dtype="uint32") /* ty=Tensor[(16, 6, 7), uint32] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %327 = @func_1581() /* ty=Tensor[(10, 8, 2), float32] */;
  %328 = minimum(%325, %326) /* ty=Tensor[(16, 6, 7), uint32] */;
  %329 = @func_4178() /* ty=Tensor[(9, 8, 7), uint32] */;
  (%327, %328, %329)
}

def @func_811(%var_796: Tensor[(2, 2, 9), float64]) -> (Tensor[(2, 2, 9), float64],) {
  %330 = cast(%var_796, dtype="float64") /* ty=Tensor[(2, 2, 9), float64] */;
  %331 = exp(%330) /* ty=Tensor[(2, 2, 9), float64] */;
  (%331,)
}

def @func_5253() -> (Tensor[(9, 8, 7), uint32],) {
  %332 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %333 = %332.0;
  (%333,)
}

def @func_4092() -> (Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) {
  %334 = @func_2524() /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) */;
  %335 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %336 = %334.0;
  %337 = %335.0;
  (%336, %337)
}

def @func_1426() -> (Tensor[(9, 8, 7), uint32],) {
  %338 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %339 = %338.0;
  (%339,)
}

def @func_1912(%var_1902: Tensor[(9, 8, 7), uint32]) -> (Tensor[(9, 8, 7), uint8],) {
  %340 = @func_1860() /* ty=Tensor[(9, 8, 7), uint32] */;
  %341 = cast(%var_1902, dtype="uint8") /* ty=Tensor[(9, 8, 7), uint8] */;
  %342 = shape_of(%340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%340, dtype="uint8") /* ty=Tensor[(9, 8, 7), uint8] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %345 = bitwise_and(%343, %344) /* ty=Tensor[(9, 8, 7), uint8] */;
  (%345,)
}

def @func_2524() -> (Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) {
  %346 = @func_2123() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) */;
  %347 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %348 = %346.1;
  %349 = %347.0;
  (%348, %349)
}

def @func_2349(%var_2335: Tensor[(468), float64], %var_2344: Tensor[(10, 8, 2), float64]) -> (Tensor[(13, 4, 9), float64], Tensor[(468), float64], Tensor[(10, 8, 2), bool]) {
  %350 = cast(%var_2335, dtype="float64") /* ty=Tensor[(468), float64] */;
  %351 = cast(%var_2335, dtype="float64") /* ty=Tensor[(468), float64] */;
  %352 = reshape(%350, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %353 = reshape(%351, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %354 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %355 = %354.1;
  %356 = cast(%var_2344, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %357 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%355, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %360 = @func_851(%352, %353) /* ty=Tensor[(13, 4, 9), float64] */;
  %361 = less_equal(%358, %359) /* ty=Tensor[(10, 8, 2), bool] */;
  (%360, %var_2335, %361)
}

def @func_3832() -> (Tensor[(9, 8, 7), uint32],) {
  %362 = @func_1828() /* ty=(Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32]) */;
  %363 = %362.1;
  (%363,)
}

def @func_1144(%var_1138: Tensor[(16, 16, 2), float32]) -> Tensor[(16, 16, 2), float32] {
  %364 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 2), float32] */;
  %365 = shape_of(%var_1138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%var_1138, dtype="float32") /* ty=Tensor[(16, 16, 2), float32] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%366, %367) /* ty=Tensor[(16, 16, 2), float32] */
}

def @func_4004(%var_3991: float64, %var_3992: Tensor[(1, 16), float64]) -> Tensor[(1, 16), bool] {
  %368 = cast(%var_3991, dtype="bool") /* ty=bool */;
  %369 = cast(%var_3992, dtype="bool") /* ty=Tensor[(1, 16), bool] */;
  less_equal(%368, %369) /* ty=Tensor[(1, 16), bool] */
}

def @func_1881(%var_1867: Tensor[(8, 16, 3), float64]) -> (Tensor[(8, 16, 3), float64], Tensor[(9, 8, 7), uint32]) {
  %370 = cast(%var_1867, dtype="float64") /* ty=Tensor[(8, 16, 3), float64] */;
  %371 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %372 = rsqrt(%370) /* ty=Tensor[(8, 16, 3), float64] */;
  %373 = %371.0;
  (%372, %373)
}

def @func_1245(%var_1237: Tensor[(9, 8, 7), float32]) -> (Tensor[(9, 8, 7), bool],) {
  %374 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %375 = %374.0;
  %376 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %377 = %376.0;
  %378 = cast(%377, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %379 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%375, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %382 = mod(%380, %381) /* ty=Tensor[(9, 8, 7), float32] */;
  %383 = cast(%var_1237, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
  %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%382, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %387 = greater(%385, %386) /* ty=Tensor[(9, 8, 7), bool] */;
  (%387,)
}

def @func_2444() -> (Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) {
  %388 = @func_1426() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %389 = %388.0;
  %390 = cast(%389, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %391 = cast(meta[relay.Constant][15] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %392 = reshape(%391, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %393 = sinh(%390) /* ty=Tensor[(9, 8, 7), float32] */;
  %394 = cast(%393, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
  %395 = cast(meta[relay.Constant][16] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %396 = cast(meta[relay.Constant][15] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %397 = reshape(%394, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), uint32] */;
  %398 = reshape(%395, newshape=[25, 6]) /* ty=Tensor[(25, 6), uint8] */;
  %399 = reshape(%396, newshape=[80, 2]) /* ty=Tensor[(80, 2), float64] */;
  %400 = @func_1410(%397, %398, %399) /* ty=(Tensor[(?, 63), bool], Tensor[(25, 6), uint8], Tensor[(80, 2), float64], Tensor[(9, 8, 7), float32]) */;
  %401 = @func_1281(%392) /* ty=Tensor[(10, 8, 2), int32] */;
  %402 = cast(%401, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %403 = cast(meta[relay.Constant][17] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %404 = reshape(%402, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %405 = reshape(%403, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %406 = @func_1654(%404, %405) /* ty=(Tensor[(10, 8, 2), bool], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %407 = cast(%401, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %408 = cast(meta[relay.Constant][17] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %409 = reshape(%407, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %410 = reshape(%408, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %411 = @func_1654(%409, %410) /* ty=(Tensor[(10, 8, 2), bool], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %412 = %400.1;
  %413 = %406.2;
  %414 = %411.1;
  (%393, %401, meta[relay.Constant][15] /* ty=Tensor[(160), float64] */, %412, meta[relay.Constant][16] /* ty=Tensor[(150), uint8] */, %413, meta[relay.Constant][17] /* ty=Tensor[(468), float64] */, %414)
}

def @func_1654(%var_1638: Tensor[(10, 8, 2), float64], %var_1647: Tensor[(468), float64]) -> (Tensor[(10, 8, 2), bool], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) {
  %415 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %416 = %415.1;
  %417 = cast(%var_1638, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %421 = cast(%var_1647, dtype="float64") /* ty=Tensor[(468), float64] */;
  %422 = cast(%var_1647, dtype="float64") /* ty=Tensor[(468), float64] */;
  %423 = reshape(%421, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %424 = reshape(%422, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %425 = not_equal(%419, %420) /* ty=Tensor[(10, 8, 2), bool] */;
  %426 = @func_851(%423, %424) /* ty=Tensor[(13, 4, 9), float64] */;
  (%425, %426, %var_1647)
}

def @func_3628(%var_3615: Tensor[(9, 8, 7), uint32]) -> Tensor[(9, 8, 7), float32] {
  %427 = @func_1860() /* ty=Tensor[(9, 8, 7), uint32] */;
  %428 = cast(%var_3615, dtype="uint16") /* ty=Tensor[(9, 8, 7), uint16] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="uint16") /* ty=Tensor[(9, 8, 7), uint16] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %432 = add(%430, %431) /* ty=Tensor[(9, 8, 7), uint16] */;
  %433 = cast(%432, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  exp(%433) /* ty=Tensor[(9, 8, 7), float32] */
}

def @func_3519() -> (Tensor[(9, 8, 7), bool],) {
  %434 = @func_2123() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) */;
  %435 = %434.1;
  (%435,)
}

def @func_1101() -> (Tensor[(9, 8, 7), uint32],) {
  %436 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 8, 7), uint32] */, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
  %437 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(9, 8, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 8, 7), uint32] */, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %440 = bitwise_xor(%438, %439) /* ty=Tensor[(9, 8, 7), uint32] */;
  (%440,)
}

def @func_2712() -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
  %441 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %442 = @func_1860() /* ty=Tensor[(9, 8, 7), uint32] */;
  %443 = %441.0;
  (%442, %443)
}

def @func_5335() -> (Tensor[(2, 5, 2), float64],) {
  %444 = @func_3030() /* ty=(Tensor[(468), float64], Tensor[(2, 5, 2), float64], Tensor[(20), float64]) */;
  %445 = %444.1;
  (%445,)
}

def @func_2796() -> Tensor[(10, 8, 2), int16] {
  %446 = @func_1581() /* ty=Tensor[(10, 8, 2), float32] */;
  %447 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 8, 2), float32] */, dtype="int16") /* ty=Tensor[(10, 8, 2), int16] */;
  %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%446, dtype="int16") /* ty=Tensor[(10, 8, 2), int16] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  left_shift(%449, %450) /* ty=Tensor[(10, 8, 2), int16] */
}

def @func_5203() -> (Tensor[(9, 8, 7), bool],) {
  %451 = @func_2524() /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) */;
  %452 = %451.0;
  (%452,)
}

def @func_1828() -> (Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32]) {
  %453 = @func_1581() /* ty=Tensor[(10, 8, 2), float32] */;
  %454 = cast(%453, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %455 = sinh(%454) /* ty=Tensor[(10, 8, 2), float64] */;
  %456 = cast(%455, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %457 = shape_of(%453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%453, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %460 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %461 = greater_equal(%458, %459) /* ty=Tensor[(10, 8, 2), bool] */;
  %462 = %460.0;
  (%461, %462)
}

def @func_4557() -> Tensor[(25, 6), float64] {
  %463 = @func_2444() /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) */;
  %464 = %463.3;
  %465 = cast(%464, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  acos(%465) /* ty=Tensor[(25, 6), float64] */
}

def @func_5159() -> (Tensor[(468), float64],) {
  %466 = @func_3803() /* ty=(Tensor[(468), float64],) */;
  %467 = %466.0;
  %468 = cast(%467, dtype="float32") /* ty=Tensor[(468), float32] */;
  %469 = rsqrt(%468) /* ty=Tensor[(468), float32] */;
  %470 = cast(%469, dtype="float64") /* ty=Tensor[(468), float64] */;
  %471 = log2(%470) /* ty=Tensor[(468), float64] */;
  (%471,)
}

def @func_2818() -> Tensor[(9, 8, 7), uint32] {
  @func_1860() /* ty=Tensor[(9, 8, 7), uint32] */
}

def @func_673(%var_662: float32, %var_663: Tensor[(4, 3, 11), float32]) -> (Tensor[(4, 3, 11), float32],) {
  %472 = cast(%var_662, dtype="float32") /* ty=float32 */;
  %473 = cast(%var_663, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %474 = mod(%472, %473) /* ty=Tensor[(4, 3, 11), float32] */;
  (%474,)
}

def @func_3906(%var_3874: Tensor[(25, 6), uint8]) -> (Tensor[(25, 6), bool], Tensor[(25, 6), float32]) {
  %475 = @func_2444() /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) */;
  %476 = %475.3;
  %477 = cast(%var_3874, dtype="bool") /* ty=Tensor[(25, 6), bool] */;
  %478 = shape_of(%476, dtype="int32") /* ty=Tensor[(2), int32] */;
  %479 = cast(%476, dtype="bool") /* ty=Tensor[(25, 6), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %481 = logical_and(%479, %480) /* ty=Tensor[(25, 6), bool] */;
  %482 = cast(%var_3874, dtype="bool") /* ty=Tensor[(25, 6), bool] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(2), int32] */;
  %484 = cast(%481, dtype="bool") /* ty=Tensor[(25, 6), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %486 = cast(%476, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %487 = asinh(%486) /* ty=Tensor[(25, 6), float64] */;
  %488 = cast(meta[relay.Constant][21] /* ty=Tensor[(25, 6), float64] */, dtype="float32") /* ty=Tensor[(25, 6), float32] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(2), int32] */;
  %490 = cast(%487, dtype="float32") /* ty=Tensor[(25, 6), float32] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %492 = not_equal(%484, %485) /* ty=Tensor[(25, 6), bool] */;
  %493 = floor_divide(%490, %491) /* ty=Tensor[(25, 6), float32] */;
  (%492, %493)
}

def @func_4686() -> (Tensor[(315), uint16], Tensor[(9, 8, 7), uint32], Tensor[(15, 3, 7), float64]) {
  %494 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %495 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %496 = %494.3;
  %497 = cast(%496, dtype="uint16") /* ty=Tensor[(315), uint16] */;
  %498 = reshape(%497, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint16] */;
  %499 = @func_441(%498) /* ty=(Tensor[(15, 3, 7), bool], Tensor[(15, 3, 7), float64]) */;
  %500 = %495.0;
  %501 = %499.1;
  (%496, %500, %501)
}

def @func_2934(%var_2899: Tensor[(13, 14, 4), uint32], %var_2900: Tensor[(13, 14, 4), uint32], %var_2911: Tensor[(504), float64]) -> (Tensor[(9, 8, 7), bool], Tensor[(504), float64], Tensor[(13, 14, 4), float32]) {
  %502 = cast(%var_2911, dtype="float64") /* ty=Tensor[(504), float64] */;
  %503 = reshape(%502, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), float64] */;
  %504 = @func_1482(%503) /* ty=(Tensor[(9, 8, 7), bool],) */;
  %505 = cast(%var_2900, dtype="bool") /* ty=Tensor[(13, 14, 4), bool] */;
  %506 = shape_of(%var_2899, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%var_2899, dtype="bool") /* ty=Tensor[(13, 14, 4), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %509 = greater_equal(%507, %508) /* ty=Tensor[(13, 14, 4), bool] */;
  %510 = cast(%509, dtype="float64") /* ty=Tensor[(13, 14, 4), float64] */;
  %511 = log10(%510) /* ty=Tensor[(13, 14, 4), float64] */;
  %512 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 14, 4), float64] */, dtype="float64") /* ty=Tensor[(13, 14, 4), float64] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="float64") /* ty=Tensor[(13, 14, 4), float64] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %516 = floor_mod(%514, %515) /* ty=Tensor[(13, 14, 4), float64] */;
  %517 = cast(%516, dtype="float32") /* ty=Tensor[(13, 14, 4), float32] */;
  %518 = %504.0;
  %519 = sin(%517) /* ty=Tensor[(13, 14, 4), float32] */;
  (%518, %var_2911, %519)
}

def @func_3718() -> (Tensor[(10, 8, 2), float32], Tensor[(9, 8, 7), float64]) {
  %520 = @func_1683() /* ty=Tensor[(9, 8, 7), uint32] */;
  %521 = cast(%520, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %522 = @func_1581() /* ty=Tensor[(10, 8, 2), float32] */;
  %523 = rsqrt(%521) /* ty=Tensor[(9, 8, 7), float64] */;
  (%522, %523)
}

def @main() -> (Tensor[(25, 6), float64],) {
  %524 = @func_4557() /* ty=Tensor[(25, 6), float64] */;
  %525 = cast(%524, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %526 = log(%525) /* ty=Tensor[(25, 6), float64] */;
  (%526,)
}

def @func_702(%var_690: uint16, %var_691: Tensor[(6, 12, 3), uint16], %var_696: Tensor[(3, 44), float32]) -> (Tensor[(6, 12, 3), uint16], Tensor[(4, 3, 11), float32], Tensor[(3, 44), float32]) {
  %527 = cast(%var_690, dtype="uint16") /* ty=uint16 */;
  %528 = cast(%var_691, dtype="uint16") /* ty=Tensor[(6, 12, 3), uint16] */;
  %529 = cast(%var_690, dtype="float32") /* ty=float32 */;
  %530 = cast(%var_696, dtype="float32") /* ty=Tensor[(3, 44), float32] */;
  %531 = reshape(%529, newshape=[]) /* ty=float32 */;
  %532 = reshape(%530, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), float32] */;
  %533 = @func_673(%531, %532) /* ty=(Tensor[(4, 3, 11), float32],) */;
  %534 = multiply(%527, %528) /* ty=Tensor[(6, 12, 3), uint16] */;
  %535 = %533.0;
  (%534, %535, %var_696)
}

def @func_5362() -> Tensor[(9, 8, 7), float32] {
  %536 = @func_5306() /* ty=(Tensor[(9, 8, 7), float64],) */;
  %537 = %536.0;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  log(%538) /* ty=Tensor[(9, 8, 7), float32] */
}

def @func_1520(%var_1516: Tensor[(234, 2), float64]) -> (Tensor[(15, 3, 7), bool], Tensor[(13, 4, 9), float64], Tensor[(234, 2), float64]) {
  %539 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %540 = cast(%var_1516, dtype="float64") /* ty=Tensor[(234, 2), float64] */;
  %541 = cast(%var_1516, dtype="float64") /* ty=Tensor[(234, 2), float64] */;
  %542 = reshape(%540, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %543 = reshape(%541, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %544 = %539.2;
  %545 = @func_851(%542, %543) /* ty=Tensor[(13, 4, 9), float64] */;
  (%544, %545, %var_1516)
}

def @func_441(%var_430: Tensor[(15, 3, 7), uint16]) -> (Tensor[(15, 3, 7), bool], Tensor[(15, 3, 7), float64]) {
  %546 = cast(%var_430, dtype="bool") /* ty=Tensor[(15, 3, 7), bool] */;
  %547 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(15, 3, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 3, 7), uint16] */, dtype="bool") /* ty=Tensor[(15, 3, 7), bool] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %550 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 3, 7), uint16] */, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
  %551 = acosh(%550) /* ty=Tensor[(15, 3, 7), float32] */;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(15, 3, 7), float64] */;
  %553 = greater(%548, %549) /* ty=Tensor[(15, 3, 7), bool] */;
  %554 = rsqrt(%552) /* ty=Tensor[(15, 3, 7), float64] */;
  (%553, %554)
}

def @func_2610(%var_2565: Tensor[(63), float32], %var_2600: Tensor[(192, 2), float64]) -> (Tensor[(9, 8, 7), uint32], Tensor[(?, 7, 9), float32], Tensor[(63), float32], Tensor[(9, 8, 7), float32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(192, 2), float64]) {
  %555 = @func_2463() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */;
  %556 = cast(%var_2565, dtype="float32") /* ty=Tensor[(63), float32] */;
  %557 = reshape(%556, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
  %558 = @func_166(%557) /* ty=(Tensor[(?, 7, 9), float32], Tensor[(3, 7, 9), bool]) */;
  %559 = @func_1683() /* ty=Tensor[(9, 8, 7), uint32] */;
  %560 = @func_1828() /* ty=(Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32]) */;
  %561 = %560.1;
  %562 = cast(%561, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
  %563 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%559, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %566 = equal(%564, %565) /* ty=Tensor[(9, 8, 7), bool] */;
  %567 = cast(%566, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %568 = @func_2123() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) */;
  %569 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %570 = cast(%var_2600, dtype="float64") /* ty=Tensor[(192, 2), float64] */;
  %571 = reshape(%570, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), float64] */;
  %572 = @func_1881(%571) /* ty=(Tensor[(8, 16, 3), float64], Tensor[(9, 8, 7), uint32]) */;
  %573 = %555.0;
  %574 = %558.0;
  %575 = acosh(%567) /* ty=Tensor[(9, 8, 7), float32] */;
  %576 = %568.0;
  %577 = %569.0;
  %578 = %572.1;
  (%573, %574, %var_2565, %575, %576, %577, %578, %var_2600)
}

def @func_4228() -> Tensor[(9, 8, 7), uint32] {
  @func_3090() /* ty=Tensor[(9, 8, 7), uint32] */
}

def @func_4506() -> Tensor[(9, 6, 5), float32] {
  %579 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(9, 6, 5), float64] */;
  %580 = asin(%579) /* ty=Tensor[(9, 6, 5), float64] */;
  %581 = cast(%580, dtype="float32") /* ty=Tensor[(9, 6, 5), float32] */;
  erf(%581) /* ty=Tensor[(9, 6, 5), float32] */
}

def @func_3416(%var_3410: Tensor[(4, 10, 9), int16], %var_3411: Tensor[(4, 10, 9), int16]) -> (Tensor[(4, 10, 9), int16],) {
  %582 = cast(%var_3411, dtype="int16") /* ty=Tensor[(4, 10, 9), int16] */;
  %583 = shape_of(%var_3410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%var_3410, dtype="int16") /* ty=Tensor[(4, 10, 9), int16] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %586 = bitwise_xor(%584, %585) /* ty=Tensor[(4, 10, 9), int16] */;
  (%586,)
}

def @func_3375() -> Tensor[(9, 9, 2), float64] {
  %587 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 9, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 9, 2), float64] */;
  atanh(%587) /* ty=Tensor[(9, 9, 2), float64] */
}

def @func_1581() -> Tensor[(10, 8, 2), float32] {
  %588 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %589 = %588.0;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
  %591 = atanh(%590) /* ty=Tensor[(10, 8, 2), float32] */;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
  log(%592) /* ty=Tensor[(10, 8, 2), float32] */
}

def @func_1281(%var_1260: Tensor[(10, 8, 2), float64]) -> Tensor[(10, 8, 2), int32] {
  %593 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %594 = %593.0;
  %595 = cast(%var_1260, dtype="int32") /* ty=Tensor[(10, 8, 2), int32] */;
  %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%594, dtype="int32") /* ty=Tensor[(10, 8, 2), int32] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  add(%597, %598) /* ty=Tensor[(10, 8, 2), int32] */
}

def @func_3199(%var_3184: Tensor[(10, 15, 15), int16]) -> (Tensor[(10, 15, 15), bool],) {
  %599 = cast(%var_3184, dtype="bool") /* ty=Tensor[(10, 15, 15), bool] */;
  %600 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(10, 15, 15), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 15, 15), int16] */, dtype="bool") /* ty=Tensor[(10, 15, 15), bool] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %603 = not_equal(%601, %602) /* ty=Tensor[(10, 15, 15), bool] */;
  %604 = cast(%603, dtype="bool") /* ty=Tensor[(10, 15, 15), bool] */;
  %605 = shape_of(%var_3184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%var_3184, dtype="bool") /* ty=Tensor[(10, 15, 15), bool] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %608 = less_equal(%606, %607) /* ty=Tensor[(10, 15, 15), bool] */;
  (%608,)
}

def @func_1057(%var_989: Tensor[(10, 8, 2), float64], %var_1038: Tensor[(10, 8, 2), float32]) -> (Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), bool]) {
  %609 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %610 = %609.1;
  %611 = cast(%var_989, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = logical_or(%613, %614) /* ty=Tensor[(10, 8, 2), bool] */;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %617 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%610, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %620 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 8, 2), bool] */, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
  %621 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%615, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %624 = power(%622, %623) /* ty=Tensor[(10, 8, 2), float32] */;
  %625 = cast(%var_1038, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %626 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%624, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %629 = mod(%618, %619) /* ty=Tensor[(10, 8, 2), float64] */;
  %630 = logical_and(%627, %628) /* ty=Tensor[(10, 8, 2), bool] */;
  (%629, %630)
}

def @func_66(%var_52: Tensor[(2, 5, 2), float64], %var_53: Tensor[(2, 5, 2), float64]) -> (Tensor[(2, 5, 2), float64],) {
  %631 = cast(%var_53, dtype="float64") /* ty=Tensor[(2, 5, 2), float64] */;
  %632 = shape_of(%var_52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%var_52, dtype="float64") /* ty=Tensor[(2, 5, 2), float64] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %635 = divide(%633, %634) /* ty=Tensor[(2, 5, 2), float64] */;
  (%635,)
}

def @func_2463() -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
  %636 = @func_1828() /* ty=(Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32]) */;
  %637 = @func_1426() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %638 = %636.1;
  %639 = %637.0;
  (%638, %639)
}

def @func_269(%var_184: Tensor[(10, 10, 14), uint8], %var_243: Tensor[(63), float32]) -> (Tensor[(2, 5, 2), float64], Tensor[(20, 1), float64], Tensor[(2, 5, 2), float64], Tensor[(?, 7, 9), float32], Tensor[(63), float32], Tensor[(2, 5, 2), float64], Tensor[(10, 10, 14), float64]) {
  %640 = cast(meta[relay.Constant][28] /* ty=Tensor[(20, 1), float64] */, dtype="float64") /* ty=Tensor[(20, 1), float64] */;
  %641 = cast(meta[relay.Constant][28] /* ty=Tensor[(20, 1), float64] */, dtype="float64") /* ty=Tensor[(20, 1), float64] */;
  %642 = reshape(%640, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
  %643 = reshape(%641, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
  %644 = @func_66(%642, %643) /* ty=(Tensor[(2, 5, 2), float64],) */;
  %645 = %644.0;
  %646 = cast(%645, dtype="float64") /* ty=Tensor[(2, 5, 2), float64] */;
  %647 = cast(%645, dtype="float64") /* ty=Tensor[(2, 5, 2), float64] */;
  %648 = reshape(%646, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
  %649 = reshape(%647, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
  %650 = @func_66(%648, %649) /* ty=(Tensor[(2, 5, 2), float64],) */;
  %651 = cast(%var_243, dtype="float32") /* ty=Tensor[(63), float32] */;
  %652 = reshape(%651, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
  %653 = @func_166(%652) /* ty=(Tensor[(?, 7, 9), float32], Tensor[(3, 7, 9), bool]) */;
  %654 = %650.0;
  %655 = cast(%654, dtype="float64") /* ty=Tensor[(2, 5, 2), float64] */;
  %656 = cast(%654, dtype="float64") /* ty=Tensor[(2, 5, 2), float64] */;
  %657 = reshape(%655, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
  %658 = reshape(%656, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
  %659 = @func_66(%657, %658) /* ty=(Tensor[(2, 5, 2), float64],) */;
  %660 = cast(%var_184, dtype="float64") /* ty=Tensor[(10, 10, 14), float64] */;
  %661 = tan(%660) /* ty=Tensor[(10, 10, 14), float64] */;
  %662 = cast(%var_184, dtype="uint8") /* ty=Tensor[(10, 10, 14), uint8] */;
  %663 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(10, 10, 14), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 10, 14), uint8] */, dtype="uint8") /* ty=Tensor[(10, 10, 14), uint8] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %666 = logical_xor(%664, %665) /* ty=Tensor[(10, 10, 14), uint8] */;
  %667 = cast(%666, dtype="float64") /* ty=Tensor[(10, 10, 14), float64] */;
  %668 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%661, dtype="float64") /* ty=Tensor[(10, 10, 14), float64] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %671 = %653.0;
  %672 = %659.0;
  %673 = floor_divide(%669, %670) /* ty=Tensor[(10, 10, 14), float64] */;
  (%645, meta[relay.Constant][28] /* ty=Tensor[(20, 1), float64] */, %654, %671, %var_243, %672, %673)
}

def @func_1624(%var_1604: Tensor[(9, 8, 7), uint32], %var_1612: Tensor[(6, 78), float64], %var_1617: Tensor[(150, 1), uint8]) -> (Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), bool], Tensor[(13, 4, 9), float64], Tensor[(6, 78), float64], Tensor[(3, 7, 9), bool], Tensor[(150, 1), uint8], Tensor[(63), float32], Tensor[(9, 8, 7), float64]) {
  %674 = @func_1426() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %675 = %674.0;
  %676 = cast(%var_1604, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %680 = cast(%var_1604, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %681 = reshape(%680, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), float32] */;
  %682 = @func_1245(%681) /* ty=(Tensor[(9, 8, 7), bool],) */;
  %683 = cast(%var_1612, dtype="float64") /* ty=Tensor[(6, 78), float64] */;
  %684 = reshape(%683, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
  %685 = @func_1520(%684) /* ty=(Tensor[(15, 3, 7), bool], Tensor[(13, 4, 9), float64], Tensor[(234, 2), float64]) */;
  %686 = cast(%var_1617, dtype="uint8") /* ty=Tensor[(150, 1), uint8] */;
  %687 = cast(%var_1617, dtype="uint8") /* ty=Tensor[(150, 1), uint8] */;
  %688 = cast(%var_1617, dtype="uint8") /* ty=Tensor[(150, 1), uint8] */;
  %689 = cast(meta[relay.Constant][30] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
  %690 = cast(%var_1617, dtype="float64") /* ty=Tensor[(150, 1), float64] */;
  %691 = reshape(%686, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
  %692 = reshape(%687, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
  %693 = reshape(%688, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
  %694 = reshape(%689, newshape=[1, 63]) /* ty=Tensor[(1, 63), float32] */;
  %695 = reshape(%690, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), float64] */;
  %696 = @func_360(%691, %692, %693, %694, %695) /* ty=(Tensor[(15, 2, 5), bool], Tensor[(3, 7, 9), bool], Tensor[(1, 63), float32], Tensor[(15, 2, 5), int64]) */;
  %697 = cast(%675, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %698 = logical_and(%678, %679) /* ty=Tensor[(9, 8, 7), bool] */;
  %699 = %682.0;
  %700 = %685.1;
  %701 = %696.1;
  %702 = cos(%697) /* ty=Tensor[(9, 8, 7), float64] */;
  (%698, %699, %700, %var_1612, %701, %var_1617, meta[relay.Constant][30] /* ty=Tensor[(63), float32] */, %702)
}

def @func_4163() -> (Tensor[(9, 8, 7), uint32], uint16, Tensor[(216), uint16], Tensor[(132), float32]) {
  %703 = cast(meta[relay.Constant][31] /* ty=Tensor[(216), uint16] */, dtype="uint16") /* ty=Tensor[(216), uint16] */;
  %704 = cast(meta[relay.Constant][32] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
  %705 = reshape(%703, newshape=[1, 216]) /* ty=Tensor[(1, 216), uint16] */;
  %706 = reshape(%704, newshape=[132]) /* ty=Tensor[(132), float32] */;
  %707 = @func_3562(%705, %706) /* ty=(Tensor[(9, 8, 7), uint32], uint16, Tensor[(1, 216), uint16], Tensor[(132), float32], Tensor[(160), float64], Tensor[(10, 8, 2), float64]) */;
  %708 = @func_3090() /* ty=Tensor[(9, 8, 7), uint32] */;
  %709 = %707.1;
  (%708, %709, meta[relay.Constant][31] /* ty=Tensor[(216), uint16] */, meta[relay.Constant][32] /* ty=Tensor[(132), float32] */)
}

def @func_2877(%var_2860: Tensor[(216), uint16], %var_2861: Tensor[(132), float32]) -> (Tensor[(9, 8, 7), uint32], Tensor[(3, 44), float32], uint16, Tensor[(216), uint16], Tensor[(132), float32], Tensor[(9, 8, 7), uint32]) {
  %710 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %711 = cast(meta[relay.Constant][33] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %712 = cast(%var_2860, dtype="uint16") /* ty=Tensor[(216), uint16] */;
  %713 = cast(%var_2861, dtype="float32") /* ty=Tensor[(132), float32] */;
  %714 = reshape(%711, newshape=[]) /* ty=uint16 */;
  %715 = reshape(%712, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), uint16] */;
  %716 = reshape(%713, newshape=[3, 44]) /* ty=Tensor[(3, 44), float32] */;
  %717 = @func_702(%714, %715, %716) /* ty=(Tensor[(6, 12, 3), uint16], Tensor[(4, 3, 11), float32], Tensor[(3, 44), float32]) */;
  %718 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %719 = %710.0;
  %720 = %717.2;
  %721 = %718.0;
  (%719, %720, meta[relay.Constant][33] /* ty=uint16 */, %var_2860, %var_2861, %721)
}

def @func_3607(%var_3595: Tensor[(9, 9, 2), float64]) -> (Tensor[(9, 9, 2), float32], Tensor[(9, 8, 7), uint32]) {
  %722 = @func_3375() /* ty=Tensor[(9, 9, 2), float64] */;
  %723 = cast(%var_3595, dtype="float32") /* ty=Tensor[(9, 9, 2), float32] */;
  %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%722, dtype="float32") /* ty=Tensor[(9, 9, 2), float32] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %727 = divide(%725, %726) /* ty=Tensor[(9, 9, 2), float32] */;
  %728 = @func_2818() /* ty=Tensor[(9, 8, 7), uint32] */;
  (%727, %728)
}

def @func_2770(%var_2765: Tensor[(15, 12, 10), float32], %var_2766: Tensor[(15, 12, 10), float32]) -> Tensor[(15, 12, 10), float32] {
  %729 = cast(%var_2766, dtype="float32") /* ty=Tensor[(15, 12, 10), float32] */;
  %730 = shape_of(%var_2765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%var_2765, dtype="float32") /* ty=Tensor[(15, 12, 10), float32] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%731, %732) /* ty=Tensor[(15, 12, 10), float32] */
}

def @func_3562(%var_3550: Tensor[(1, 216), uint16], %var_3551: Tensor[(132), float32]) -> (Tensor[(9, 8, 7), uint32], uint16, Tensor[(1, 216), uint16], Tensor[(132), float32], Tensor[(160), float64], Tensor[(10, 8, 2), float64]) {
  %733 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %734 = cast(%var_3550, dtype="uint16") /* ty=Tensor[(1, 216), uint16] */;
  %735 = cast(%var_3551, dtype="float32") /* ty=Tensor[(132), float32] */;
  %736 = reshape(%734, newshape=[216]) /* ty=Tensor[(216), uint16] */;
  %737 = reshape(%735, newshape=[132]) /* ty=Tensor[(132), float32] */;
  %738 = @func_2877(%736, %737) /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(3, 44), float32], uint16, Tensor[(216), uint16], Tensor[(132), float32], Tensor[(9, 8, 7), uint32]) */;
  %739 = cast(meta[relay.Constant][34] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %740 = cast(meta[relay.Constant][34] /* ty=Tensor[(160), float64] */, dtype="float32") /* ty=Tensor[(160), float32] */;
  %741 = reshape(%739, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %742 = reshape(%740, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float32] */;
  %743 = @func_1057(%741, %742) /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), bool]) */;
  %744 = %743.0;
  %745 = cast(%744, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %746 = %733.0;
  %747 = %738.2;
  %748 = sqrt(%745) /* ty=Tensor[(10, 8, 2), float64] */;
  (%746, %747, %var_3550, %var_3551, meta[relay.Constant][34] /* ty=Tensor[(160), float64] */, %748)
}

def @func_3149(%var_3132: Tensor[(315), uint16]) -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32], Tensor[(315), uint64], Tensor[(160), float64]) {
  %749 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %750 = @func_2524() /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) */;
  %751 = cast(%var_3132, dtype="uint16") /* ty=Tensor[(315), uint16] */;
  %752 = reshape(%751, newshape=[315]) /* ty=Tensor[(315), uint16] */;
  %753 = @func_2739(%752) /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(15, 3, 7), float64], Tensor[(315), uint16], Tensor[(9, 8, 7), uint32]) */;
  %754 = cast(%var_3132, dtype="float64") /* ty=Tensor[(315), float64] */;
  %755 = asinh(%754) /* ty=Tensor[(315), float64] */;
  %756 = cast(%var_3132, dtype="uint64") /* ty=Tensor[(315), uint64] */;
  %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(1), int32] */;
  %758 = cast(%755, dtype="uint64") /* ty=Tensor[(315), uint64] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %760 = @func_2444() /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) */;
  %761 = %749.0;
  %762 = %750.0;
  %763 = %753.0;
  %764 = maximum(%758, %759) /* ty=Tensor[(315), uint64] */;
  %765 = %760.2;
  (%761, %762, %763, %764, %765)
}

def @func_1860() -> Tensor[(9, 8, 7), uint32] {
  %766 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %766.0
}

def @func_4316(%var_4311: Tensor[(468), float64]) -> (Tensor[(10, 8, 2), int16], Tensor[(9, 8, 7), uint32], Tensor[(9, 9, 2), float64], Tensor[(132), float32], Tensor[(9, 8, 7), uint32], Tensor[(150, 1), uint8], Tensor[(468), float64], Tensor[(150), uint8]) {
  %767 = @func_4163() /* ty=(Tensor[(9, 8, 7), uint32], uint16, Tensor[(216), uint16], Tensor[(132), float32]) */;
  %768 = @func_3723() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %769 = @func_4228() /* ty=Tensor[(9, 8, 7), uint32] */;
  %770 = cast(%769, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
  %771 = cast(%var_4311, dtype="float64") /* ty=Tensor[(468), float64] */;
  %772 = cast(meta[relay.Constant][35] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %773 = reshape(%770, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), uint32] */;
  %774 = reshape(%771, newshape=[6, 78]) /* ty=Tensor[(6, 78), float64] */;
  %775 = reshape(%772, newshape=[150, 1]) /* ty=Tensor[(150, 1), uint8] */;
  %776 = @func_1624(%773, %774, %775) /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), bool], Tensor[(13, 4, 9), float64], Tensor[(6, 78), float64], Tensor[(3, 7, 9), bool], Tensor[(150, 1), uint8], Tensor[(63), float32], Tensor[(9, 8, 7), float64]) */;
  %777 = @func_2796() /* ty=Tensor[(10, 8, 2), int16] */;
  %778 = @func_3375() /* ty=Tensor[(9, 9, 2), float64] */;
  %779 = %767.3;
  %780 = %768.0;
  %781 = %776.5;
  (%777, %769, %778, %779, %780, %781, %var_4311, meta[relay.Constant][35] /* ty=Tensor[(150), uint8] */)
}

def @func_4726(%var_4721: Tensor[(9, 8, 7), uint32]) -> (Tensor[(9, 8, 7), bool],) {
  %782 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %783 = %782.0;
  %784 = cast(%var_4721, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
  %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%783, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %788 = greater_equal(%786, %787) /* ty=Tensor[(9, 8, 7), bool] */;
  (%788,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2818() -> Tensor[(9, 8, 7), uint32] {
  @func_1860() /* ty=Tensor[(9, 8, 7), uint32] */
}

def @func_2844(%var_2842: Tensor[(6, 14, 16), float64], %var_2843: Tensor[(63), float32]) -> (Tensor[(6, 14, 16), float64], Tensor[(3, 7, 9), bool], Tensor[(150), uint8], Tensor[(63), float32]) {
  %14 = fn (%var_2821: Tensor[(6, 14, 16), float64], %var_2830: Tensor[(63), float32]) -> (Tensor[(6, 14, 16), float64], Tensor[(3, 7, 9), bool], Tensor[(150), uint8], Tensor[(63), float32]) {
    %0 = cast(%var_2821, dtype="float64") /* ty=Tensor[(6, 14, 16), float64] */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
    %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
    %4 = cast(%var_2830, dtype="float32") /* ty=Tensor[(63), float32] */;
    %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(150), uint8] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %6 = reshape(%1, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
    %7 = reshape(%2, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
    %8 = reshape(%3, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
    %9 = reshape(%4, newshape=[1, 63]) /* ty=Tensor[(1, 63), float32] */;
    %10 = reshape(%5, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), float64] */;
    %11 = @func_360(%6, %7, %8, %9, %10) /* ty=(Tensor[(15, 2, 5), bool], Tensor[(3, 7, 9), bool], Tensor[(1, 63), float32], Tensor[(15, 2, 5), int64]) */;
    %12 = acos(%0) /* ty=Tensor[(6, 14, 16), float64] */;
    %13 = %11.1;
    (%12, %13, meta[relay.Constant][0] /* ty=Tensor[(150), uint8] */, %var_2830)
  };
  %14(%var_2842, %var_2843) /* ty=(Tensor[(6, 14, 16), float64], Tensor[(3, 7, 9), bool], Tensor[(150), uint8], Tensor[(63), float32]) */
}

def @func_2939(%var_2936: Tensor[(13, 14, 4), uint32], %var_2937: Tensor[(13, 14, 4), uint32], %var_2938: Tensor[(504), float64]) -> (Tensor[(9, 8, 7), bool], Tensor[(504), float64], Tensor[(13, 14, 4), float32]) {
  @func_2934(%var_2936, %var_2937, %var_2938) /* ty=(Tensor[(9, 8, 7), bool], Tensor[(504), float64], Tensor[(13, 14, 4), float32]) */
}

def @func_444(%var_442: Tensor[(15, 3, 7), uint16]) -> (Tensor[(15, 3, 7), bool], Tensor[(15, 3, 7), float64]) {
  @func_441(%var_442) /* ty=(Tensor[(15, 3, 7), bool], Tensor[(15, 3, 7), float64]) */
}

def @func_272(%var_270: Tensor[(10, 10, 14), uint8], %var_271: Tensor[(63), float32]) -> (Tensor[(2, 5, 2), float64], Tensor[(20, 1), float64], Tensor[(2, 5, 2), float64], Tensor[(?, 7, 9), float32], Tensor[(63), float32], Tensor[(2, 5, 2), float64], Tensor[(10, 10, 14), float64]) {
  %49 = fn (%var_184: Tensor[(10, 10, 14), uint8], %var_243: Tensor[(63), float32]) -> (Tensor[(2, 5, 2), float64], Tensor[(20, 1), float64], Tensor[(2, 5, 2), float64], Tensor[(?, 7, 9), float32], Tensor[(63), float32], Tensor[(2, 5, 2), float64], Tensor[(10, 10, 14), float64]) {
    %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(20, 1), float64] */, dtype="float64") /* ty=Tensor[(20, 1), float64] */;
    %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(20, 1), float64] */, dtype="float64") /* ty=Tensor[(20, 1), float64] */;
    %17 = reshape(%15, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
    %18 = reshape(%16, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
    %19 = @func_66(%17, %18) /* ty=(Tensor[(2, 5, 2), float64],) */;
    %20 = %19.0;
    %21 = cast(%20, dtype="float64") /* ty=Tensor[(2, 5, 2), float64] */;
    %22 = cast(%20, dtype="float64") /* ty=Tensor[(2, 5, 2), float64] */;
    %23 = reshape(%21, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
    %24 = reshape(%22, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
    %25 = @func_66(%23, %24) /* ty=(Tensor[(2, 5, 2), float64],) */;
    %26 = cast(%var_243, dtype="float32") /* ty=Tensor[(63), float32] */;
    %27 = reshape(%26, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
    %28 = @func_166(%27) /* ty=(Tensor[(?, 7, 9), float32], Tensor[(3, 7, 9), bool]) */;
    %29 = %25.0;
    %30 = cast(%29, dtype="float64") /* ty=Tensor[(2, 5, 2), float64] */;
    %31 = cast(%29, dtype="float64") /* ty=Tensor[(2, 5, 2), float64] */;
    %32 = reshape(%30, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
    %33 = reshape(%31, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
    %34 = @func_66(%32, %33) /* ty=(Tensor[(2, 5, 2), float64],) */;
    %35 = cast(%var_184, dtype="float64") /* ty=Tensor[(10, 10, 14), float64] */;
    %36 = tan(%35) /* ty=Tensor[(10, 10, 14), float64] */;
    %37 = cast(%var_184, dtype="uint8") /* ty=Tensor[(10, 10, 14), uint8] */;
    %38 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(10, 10, 14), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 10, 14), uint8] */, dtype="uint8") /* ty=Tensor[(10, 10, 14), uint8] */;
    %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %41 = logical_xor(%39, %40) /* ty=Tensor[(10, 10, 14), uint8] */;
    %42 = cast(%41, dtype="float64") /* ty=Tensor[(10, 10, 14), float64] */;
    %43 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
    %44 = cast(%36, dtype="float64") /* ty=Tensor[(10, 10, 14), float64] */;
    %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %46 = %28.0;
    %47 = %34.0;
    %48 = floor_divide(%44, %45) /* ty=Tensor[(10, 10, 14), float64] */;
    (%20, meta[relay.Constant][1] /* ty=Tensor[(20, 1), float64] */, %29, %46, %var_243, %47, %48)
  };
  %49(%var_270, %var_271) /* ty=(Tensor[(2, 5, 2), float64], Tensor[(20, 1), float64], Tensor[(2, 5, 2), float64], Tensor[(?, 7, 9), float32], Tensor[(63), float32], Tensor[(2, 5, 2), float64], Tensor[(10, 10, 14), float64]) */
}

def @func_1144(%var_1138: Tensor[(16, 16, 2), float32]) -> Tensor[(16, 16, 2), float32] {
  %50 = cast(meta[relay.Constant][3] /* ty=Tensor[(16, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 2), float32] */;
  %51 = shape_of(%var_1138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%var_1138, dtype="float32") /* ty=Tensor[(16, 16, 2), float32] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%52, %53) /* ty=Tensor[(16, 16, 2), float32] */
}

def @func_69(%var_67: Tensor[(2, 5, 2), float64], %var_68: Tensor[(2, 5, 2), float64]) -> (Tensor[(2, 5, 2), float64],) {
  %59 = fn (%var_52: Tensor[(2, 5, 2), float64], %var_53: Tensor[(2, 5, 2), float64]) -> (Tensor[(2, 5, 2), float64],) {
    %54 = cast(%var_53, dtype="float64") /* ty=Tensor[(2, 5, 2), float64] */;
    %55 = shape_of(%var_52, dtype="int32") /* ty=Tensor[(3), int32] */;
    %56 = cast(%var_52, dtype="float64") /* ty=Tensor[(2, 5, 2), float64] */;
    %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %58 = divide(%56, %57) /* ty=Tensor[(2, 5, 2), float64] */;
    (%58,)
  };
  %59(%var_67, %var_68) /* ty=(Tensor[(2, 5, 2), float64],) */
}

def @func_2464() -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
  %64 = fn () -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
    %60 = @func_1828() /* ty=(Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32]) */;
    %61 = @func_1426() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %62 = %60.1;
    %63 = %61.0;
    (%62, %63)
  };
  %64() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */
}

def @func_1283(%var_1282: Tensor[(10, 8, 2), float64]) -> Tensor[(10, 8, 2), int32] {
  %71 = fn (%var_1260: Tensor[(10, 8, 2), float64]) -> Tensor[(10, 8, 2), int32] {
    %65 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
    %66 = %65.0;
    %67 = cast(%var_1260, dtype="int32") /* ty=Tensor[(10, 8, 2), int32] */;
    %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
    %69 = cast(%66, dtype="int32") /* ty=Tensor[(10, 8, 2), int32] */;
    %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    add(%69, %70) /* ty=Tensor[(10, 8, 2), int32] */
  };
  %71(%var_1282) /* ty=Tensor[(10, 8, 2), int32] */
}

def @func_3377() -> Tensor[(9, 9, 2), float64] {
  @func_3375() /* ty=Tensor[(9, 9, 2), float64] */
}

def @func_1103() -> (Tensor[(9, 8, 7), uint32],) {
  @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */
}

def @func_2352(%var_2350: Tensor[(468), float64], %var_2351: Tensor[(10, 8, 2), float64]) -> (Tensor[(13, 4, 9), float64], Tensor[(468), float64], Tensor[(10, 8, 2), bool]) {
  %84 = fn (%var_2335: Tensor[(468), float64], %var_2344: Tensor[(10, 8, 2), float64]) -> (Tensor[(13, 4, 9), float64], Tensor[(468), float64], Tensor[(10, 8, 2), bool]) {
    %72 = cast(%var_2335, dtype="float64") /* ty=Tensor[(468), float64] */;
    %73 = cast(%var_2335, dtype="float64") /* ty=Tensor[(468), float64] */;
    %74 = reshape(%72, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
    %75 = reshape(%73, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
    %76 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
    %77 = %76.1;
    %78 = cast(%var_2344, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
    %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
    %80 = cast(%77, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
    %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %82 = @func_851(%74, %75) /* ty=Tensor[(13, 4, 9), float64] */;
    %83 = less_equal(%80, %81) /* ty=Tensor[(10, 8, 2), bool] */;
    (%82, %var_2335, %83)
  };
  %84(%var_2350, %var_2351) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(468), float64], Tensor[(10, 8, 2), bool]) */
}

def @func_2689() -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
  %91 = fn () -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
    %85 = @func_2123() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) */;
    %86 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %87 = @func_2123() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) */;
    %88 = %85.0;
    %89 = %86.0;
    %90 = %87.0;
    (%88, %89, %90)
  };
  %91() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */
}

def @func_4164() -> (Tensor[(9, 8, 7), uint32], uint16, Tensor[(216), uint16], Tensor[(132), float32]) {
  %99 = fn () -> (Tensor[(9, 8, 7), uint32], uint16, Tensor[(216), uint16], Tensor[(132), float32]) {
    %92 = cast(meta[relay.Constant][4] /* ty=Tensor[(216), uint16] */, dtype="uint16") /* ty=Tensor[(216), uint16] */;
    %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(132), float32] */, dtype="float32") /* ty=Tensor[(132), float32] */;
    %94 = reshape(%92, newshape=[1, 216]) /* ty=Tensor[(1, 216), uint16] */;
    %95 = reshape(%93, newshape=[132]) /* ty=Tensor[(132), float32] */;
    %96 = @func_3562(%94, %95) /* ty=(Tensor[(9, 8, 7), uint32], uint16, Tensor[(1, 216), uint16], Tensor[(132), float32], Tensor[(160), float64], Tensor[(10, 8, 2), float64]) */;
    %97 = @func_3090() /* ty=Tensor[(9, 8, 7), uint32] */;
    %98 = %96.1;
    (%97, %98, meta[relay.Constant][4] /* ty=Tensor[(216), uint16] */, meta[relay.Constant][5] /* ty=Tensor[(132), float32] */)
  };
  %99() /* ty=(Tensor[(9, 8, 7), uint32], uint16, Tensor[(216), uint16], Tensor[(132), float32]) */
}

def @func_1628(%var_1625: Tensor[(9, 8, 7), uint32], %var_1626: Tensor[(6, 78), float64], %var_1627: Tensor[(150, 1), uint8]) -> (Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), bool], Tensor[(13, 4, 9), float64], Tensor[(6, 78), float64], Tensor[(3, 7, 9), bool], Tensor[(150, 1), uint8], Tensor[(63), float32], Tensor[(9, 8, 7), float64]) {
  %129 = fn (%var_1604: Tensor[(9, 8, 7), uint32], %var_1612: Tensor[(6, 78), float64], %var_1617: Tensor[(150, 1), uint8]) -> (Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), bool], Tensor[(13, 4, 9), float64], Tensor[(6, 78), float64], Tensor[(3, 7, 9), bool], Tensor[(150, 1), uint8], Tensor[(63), float32], Tensor[(9, 8, 7), float64]) {
    %100 = @func_1426() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %101 = %100.0;
    %102 = cast(%var_1604, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
    %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
    %104 = cast(%101, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
    %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %106 = cast(%var_1604, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
    %107 = reshape(%106, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), float32] */;
    %108 = @func_1245(%107) /* ty=(Tensor[(9, 8, 7), bool],) */;
    %109 = cast(%var_1612, dtype="float64") /* ty=Tensor[(6, 78), float64] */;
    %110 = reshape(%109, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
    %111 = @func_1520(%110) /* ty=(Tensor[(15, 3, 7), bool], Tensor[(13, 4, 9), float64], Tensor[(234, 2), float64]) */;
    %112 = cast(%var_1617, dtype="uint8") /* ty=Tensor[(150, 1), uint8] */;
    %113 = cast(%var_1617, dtype="uint8") /* ty=Tensor[(150, 1), uint8] */;
    %114 = cast(%var_1617, dtype="uint8") /* ty=Tensor[(150, 1), uint8] */;
    %115 = cast(meta[relay.Constant][6] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
    %116 = cast(%var_1617, dtype="float64") /* ty=Tensor[(150, 1), float64] */;
    %117 = reshape(%112, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
    %118 = reshape(%113, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
    %119 = reshape(%114, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
    %120 = reshape(%115, newshape=[1, 63]) /* ty=Tensor[(1, 63), float32] */;
    %121 = reshape(%116, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), float64] */;
    %122 = @func_360(%117, %118, %119, %120, %121) /* ty=(Tensor[(15, 2, 5), bool], Tensor[(3, 7, 9), bool], Tensor[(1, 63), float32], Tensor[(15, 2, 5), int64]) */;
    %123 = cast(%101, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
    %124 = logical_and(%104, %105) /* ty=Tensor[(9, 8, 7), bool] */;
    %125 = %108.0;
    %126 = %111.1;
    %127 = %122.1;
    %128 = cos(%123) /* ty=Tensor[(9, 8, 7), float64] */;
    (%124, %125, %126, %var_1612, %127, %var_1617, meta[relay.Constant][6] /* ty=Tensor[(63), float32] */, %128)
  };
  %129(%var_1625, %var_1626, %var_1627) /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), bool], Tensor[(13, 4, 9), float64], Tensor[(6, 78), float64], Tensor[(3, 7, 9), bool], Tensor[(150, 1), uint8], Tensor[(63), float32], Tensor[(9, 8, 7), float64]) */
}

def @func_4508() -> Tensor[(9, 6, 5), float32] {
  @func_4506() /* ty=Tensor[(9, 6, 5), float32] */
}

def @func_2196(%var_2194: Tensor[(9, 8, 7), uint32]) -> (Tensor[(9, 8, 7), uint16], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint8]) {
  @func_2193(%var_2194) /* ty=(Tensor[(9, 8, 7), uint16], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint8]) */
}

def @func_5306() -> (Tensor[(9, 8, 7), float64],) {
  %130 = @func_5203() /* ty=(Tensor[(9, 8, 7), bool],) */;
  %131 = %130.0;
  %132 = cast(%131, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %133 = atan(%132) /* ty=Tensor[(9, 8, 7), float64] */;
  (%133,)
}

def @func_441(%var_430: Tensor[(15, 3, 7), uint16]) -> (Tensor[(15, 3, 7), bool], Tensor[(15, 3, 7), float64]) {
  %134 = cast(%var_430, dtype="bool") /* ty=Tensor[(15, 3, 7), bool] */;
  %135 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(15, 3, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 3, 7), uint16] */, dtype="bool") /* ty=Tensor[(15, 3, 7), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %138 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 3, 7), uint16] */, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
  %139 = acosh(%138) /* ty=Tensor[(15, 3, 7), float32] */;
  %140 = cast(%139, dtype="float64") /* ty=Tensor[(15, 3, 7), float64] */;
  %141 = greater(%136, %137) /* ty=Tensor[(15, 3, 7), bool] */;
  %142 = rsqrt(%140) /* ty=Tensor[(15, 3, 7), float64] */;
  (%141, %142)
}

def @func_1658(%var_1656: Tensor[(10, 8, 2), float64], %var_1657: Tensor[(468), float64]) -> (Tensor[(10, 8, 2), bool], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) {
  @func_1654(%var_1656, %var_1657) /* ty=(Tensor[(10, 8, 2), bool], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */
}

def @func_1583() -> Tensor[(10, 8, 2), float32] {
  @func_1581() /* ty=Tensor[(10, 8, 2), float32] */
}

def @func_3805() -> (Tensor[(468), float64],) {
  @func_3803() /* ty=(Tensor[(468), float64],) */
}

def @func_1482(%var_1477: Tensor[(9, 8, 7), float64]) -> (Tensor[(9, 8, 7), bool],) {
  %143 = @func_1426() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %144 = %143.0;
  %145 = cast(%144, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %146 = cosh(%145) /* ty=Tensor[(9, 8, 7), float64] */;
  %147 = cast(%146, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %148 = tan(%147) /* ty=Tensor[(9, 8, 7), float32] */;
  %149 = cast(%148, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %150 = sqrt(%149) /* ty=Tensor[(9, 8, 7), float64] */;
  %151 = cast(%var_1477, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%150, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %155 = less_equal(%153, %154) /* ty=Tensor[(9, 8, 7), bool] */;
  (%155,)
}

def @func_1215(%var_1212: Tensor[(9, 8, 7), uint32], %var_1213: Tensor[(150), uint8], %var_1214: Tensor[(160), float64]) -> (Tensor[(9, 8, 7), uint16], Tensor[(150), uint8], Tensor[(?, 63), bool], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(10, 8, 2), float64]) {
  %192 = fn (%var_1172: Tensor[(9, 8, 7), uint32], %var_1178: Tensor[(150), uint8], %var_1194: Tensor[(160), float64]) -> (Tensor[(9, 8, 7), uint16], Tensor[(150), uint8], Tensor[(?, 63), bool], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(10, 8, 2), float64]) {
    %156 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %157 = %156.0;
    %158 = cast(%var_1172, dtype="uint16") /* ty=Tensor[(9, 8, 7), uint16] */;
    %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
    %160 = cast(%157, dtype="uint16") /* ty=Tensor[(9, 8, 7), uint16] */;
    %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %162 = cast(%var_1178, dtype="uint8") /* ty=Tensor[(150), uint8] */;
    %163 = cast(%var_1178, dtype="uint8") /* ty=Tensor[(150), uint8] */;
    %164 = cast(%var_1178, dtype="uint8") /* ty=Tensor[(150), uint8] */;
    %165 = cast(meta[relay.Constant][8] /* ty=Tensor[(63), float32] */, dtype="float32") /* ty=Tensor[(63), float32] */;
    %166 = cast(%var_1178, dtype="float64") /* ty=Tensor[(150), float64] */;
    %167 = reshape(%162, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
    %168 = reshape(%163, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
    %169 = reshape(%164, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), uint8] */;
    %170 = reshape(%165, newshape=[1, 63]) /* ty=Tensor[(1, 63), float32] */;
    %171 = reshape(%166, newshape=[15, 2, 5]) /* ty=Tensor[(15, 2, 5), float64] */;
    %172 = @func_360(%167, %168, %169, %170, %171) /* ty=(Tensor[(15, 2, 5), bool], Tensor[(3, 7, 9), bool], Tensor[(1, 63), float32], Tensor[(15, 2, 5), int64]) */;
    %173 = %172.2;
    %174 = cast(meta[relay.Constant][8] /* ty=Tensor[(63), float32] */, dtype="bool") /* ty=Tensor[(63), bool] */;
    %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(2), int32] */;
    %176 = cast(%173, dtype="bool") /* ty=Tensor[(1, 63), bool] */;
    %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %178 = cast(%var_1194, dtype="float64") /* ty=Tensor[(160), float64] */;
    %179 = cast(%var_1194, dtype="float32") /* ty=Tensor[(160), float32] */;
    %180 = reshape(%178, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
    %181 = reshape(%179, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float32] */;
    %182 = @func_1057(%180, %181) /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), bool]) */;
    %183 = cast(%var_1194, dtype="float64") /* ty=Tensor[(160), float64] */;
    %184 = cast(%var_1194, dtype="float32") /* ty=Tensor[(160), float32] */;
    %185 = reshape(%183, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
    %186 = reshape(%184, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float32] */;
    %187 = @func_1057(%185, %186) /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), bool]) */;
    %188 = minimum(%160, %161) /* ty=Tensor[(9, 8, 7), uint16] */;
    %189 = logical_and(%176, %177) /* ty=Tensor[(?, 63), bool] */;
    %190 = %182.0;
    %191 = %187.0;
    (%188, %var_1178, %189, %190, %var_1194, %191)
  };
  %192(%var_1212, %var_1213, %var_1214) /* ty=(Tensor[(9, 8, 7), uint16], Tensor[(150), uint8], Tensor[(?, 63), bool], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(10, 8, 2), float64]) */
}

def @func_3202(%var_3200: Tensor[(10, 15, 15), int16]) -> (Tensor[(10, 15, 15), bool],) {
  @func_3199(%var_3200) /* ty=(Tensor[(10, 15, 15), bool],) */
}

def @func_4557() -> Tensor[(25, 6), float64] {
  %193 = @func_2444() /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) */;
  %194 = %193.3;
  %195 = cast(%194, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  acos(%195) /* ty=Tensor[(25, 6), float64] */
}

def @func_3628(%var_3615: Tensor[(9, 8, 7), uint32]) -> Tensor[(9, 8, 7), float32] {
  %196 = @func_1860() /* ty=Tensor[(9, 8, 7), uint32] */;
  %197 = cast(%var_3615, dtype="uint16") /* ty=Tensor[(9, 8, 7), uint16] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="uint16") /* ty=Tensor[(9, 8, 7), uint16] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %201 = add(%199, %200) /* ty=Tensor[(9, 8, 7), uint16] */;
  %202 = cast(%201, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  exp(%202) /* ty=Tensor[(9, 8, 7), float32] */
}

def @func_3803() -> (Tensor[(468), float64],) {
  %203 = @func_2444() /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) */;
  %204 = %203.5;
  (%204,)
}

def @func_2934(%var_2899: Tensor[(13, 14, 4), uint32], %var_2900: Tensor[(13, 14, 4), uint32], %var_2911: Tensor[(504), float64]) -> (Tensor[(9, 8, 7), bool], Tensor[(504), float64], Tensor[(13, 14, 4), float32]) {
  %205 = cast(%var_2911, dtype="float64") /* ty=Tensor[(504), float64] */;
  %206 = reshape(%205, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), float64] */;
  %207 = @func_1482(%206) /* ty=(Tensor[(9, 8, 7), bool],) */;
  %208 = cast(%var_2900, dtype="bool") /* ty=Tensor[(13, 14, 4), bool] */;
  %209 = shape_of(%var_2899, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%var_2899, dtype="bool") /* ty=Tensor[(13, 14, 4), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %212 = greater_equal(%210, %211) /* ty=Tensor[(13, 14, 4), bool] */;
  %213 = cast(%212, dtype="float64") /* ty=Tensor[(13, 14, 4), float64] */;
  %214 = log10(%213) /* ty=Tensor[(13, 14, 4), float64] */;
  %215 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 14, 4), float64] */, dtype="float64") /* ty=Tensor[(13, 14, 4), float64] */;
  %216 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%214, dtype="float64") /* ty=Tensor[(13, 14, 4), float64] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %219 = floor_mod(%217, %218) /* ty=Tensor[(13, 14, 4), float64] */;
  %220 = cast(%219, dtype="float32") /* ty=Tensor[(13, 14, 4), float32] */;
  %221 = %207.0;
  %222 = sin(%220) /* ty=Tensor[(13, 14, 4), float32] */;
  (%221, %var_2911, %222)
}

def @func_5337() -> (Tensor[(2, 5, 2), float64],) {
  @func_5335() /* ty=(Tensor[(2, 5, 2), float64],) */
}

def @func_1829() -> (Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32]) {
  %233 = fn () -> (Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32]) {
    %223 = @func_1581() /* ty=Tensor[(10, 8, 2), float32] */;
    %224 = cast(%223, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
    %225 = sinh(%224) /* ty=Tensor[(10, 8, 2), float64] */;
    %226 = cast(%225, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
    %227 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
    %228 = cast(%223, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
    %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %230 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %231 = greater_equal(%228, %229) /* ty=Tensor[(10, 8, 2), bool] */;
    %232 = %230.0;
    (%231, %232)
  };
  %233() /* ty=(Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32]) */
}

def @func_1685() -> Tensor[(9, 8, 7), uint32] {
  @func_1683() /* ty=Tensor[(9, 8, 7), uint32] */
}

def @func_4316(%var_4311: Tensor[(468), float64]) -> (Tensor[(10, 8, 2), int16], Tensor[(9, 8, 7), uint32], Tensor[(9, 9, 2), float64], Tensor[(132), float32], Tensor[(9, 8, 7), uint32], Tensor[(150, 1), uint8], Tensor[(468), float64], Tensor[(150), uint8]) {
  %234 = @func_4163() /* ty=(Tensor[(9, 8, 7), uint32], uint16, Tensor[(216), uint16], Tensor[(132), float32]) */;
  %235 = @func_3723() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %236 = @func_4228() /* ty=Tensor[(9, 8, 7), uint32] */;
  %237 = cast(%236, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
  %238 = cast(%var_4311, dtype="float64") /* ty=Tensor[(468), float64] */;
  %239 = cast(meta[relay.Constant][10] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %240 = reshape(%237, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), uint32] */;
  %241 = reshape(%238, newshape=[6, 78]) /* ty=Tensor[(6, 78), float64] */;
  %242 = reshape(%239, newshape=[150, 1]) /* ty=Tensor[(150, 1), uint8] */;
  %243 = @func_1624(%240, %241, %242) /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), bool], Tensor[(13, 4, 9), float64], Tensor[(6, 78), float64], Tensor[(3, 7, 9), bool], Tensor[(150, 1), uint8], Tensor[(63), float32], Tensor[(9, 8, 7), float64]) */;
  %244 = @func_2796() /* ty=Tensor[(10, 8, 2), int16] */;
  %245 = @func_3375() /* ty=Tensor[(9, 9, 2), float64] */;
  %246 = %234.3;
  %247 = %235.0;
  %248 = %243.5;
  (%244, %236, %245, %246, %247, %248, %var_4311, meta[relay.Constant][10] /* ty=Tensor[(150), uint8] */)
}

def @func_2124() -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) {
  %255 = fn () -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) {
    %249 = @func_1426() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %250 = %249.0;
    %251 = cast(%250, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
    %252 = reshape(%251, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), float64] */;
    %253 = @func_1482(%252) /* ty=(Tensor[(9, 8, 7), bool],) */;
    %254 = %253.0;
    (%250, %254)
  };
  %255() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) */
}

def @func_707(%var_704: uint16, %var_705: Tensor[(6, 12, 3), uint16], %var_706: Tensor[(3, 44), float32]) -> (Tensor[(6, 12, 3), uint16], Tensor[(4, 3, 11), float32], Tensor[(3, 44), float32]) {
  @func_702(%var_704, %var_705, %var_706) /* ty=(Tensor[(6, 12, 3), uint16], Tensor[(4, 3, 11), float32], Tensor[(3, 44), float32]) */
}

def @func_4663(%var_4638: Tensor[(6, 78), float64]) -> (Tensor[(9, 8, 7), bool], Tensor[(468), float64], Tensor[(150), uint8], Tensor[(6, 78), float32], Tensor[(6, 78), int32]) {
  %256 = @func_2524() /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) */;
  %257 = %256.0;
  %258 = cast(%257, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
  %259 = cast(meta[relay.Constant][11] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %260 = cast(meta[relay.Constant][12] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %261 = reshape(%258, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), uint32] */;
  %262 = reshape(%259, newshape=[6, 78]) /* ty=Tensor[(6, 78), float64] */;
  %263 = reshape(%260, newshape=[150, 1]) /* ty=Tensor[(150, 1), uint8] */;
  %264 = @func_1624(%261, %262, %263) /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), bool], Tensor[(13, 4, 9), float64], Tensor[(6, 78), float64], Tensor[(3, 7, 9), bool], Tensor[(150, 1), uint8], Tensor[(63), float32], Tensor[(9, 8, 7), float64]) */;
  %265 = %264.3;
  %266 = cast(%var_4638, dtype="float32") /* ty=Tensor[(6, 78), float32] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(2), int32] */;
  %268 = cast(%265, dtype="float32") /* ty=Tensor[(6, 78), float32] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %270 = cast(%var_4638, dtype="int32") /* ty=Tensor[(6, 78), int32] */;
  %271 = shape_of(%265, dtype="int32") /* ty=Tensor[(2), int32] */;
  %272 = cast(%265, dtype="int32") /* ty=Tensor[(6, 78), int32] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %274 = mod(%268, %269) /* ty=Tensor[(6, 78), float32] */;
  %275 = maximum(%272, %273) /* ty=Tensor[(6, 78), int32] */;
  (%257, meta[relay.Constant][11] /* ty=Tensor[(468), float64] */, meta[relay.Constant][12] /* ty=Tensor[(150), uint8] */, %274, %275)
}

def @func_2021() -> Tensor[(15, 3, 7), bool] {
  %277 = fn () -> Tensor[(15, 3, 7), bool] {
    %276 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
    %276.2
  };
  %277() /* ty=Tensor[(15, 3, 7), bool] */
}

def @func_3293(%var_3291: uint16, %var_3292: Tensor[(132), float32]) -> (Tensor[(6, 12, 3), uint16], uint16, Tensor[(216), uint16], Tensor[(132), float32], Tensor[(15, 3, 7), float32]) {
  %289 = fn (%var_3280: uint16, %var_3282: Tensor[(132), float32]) -> (Tensor[(6, 12, 3), uint16], uint16, Tensor[(216), uint16], Tensor[(132), float32], Tensor[(15, 3, 7), float32]) {
    %278 = cast(%var_3280, dtype="uint16") /* ty=uint16 */;
    %279 = cast(meta[relay.Constant][13] /* ty=Tensor[(216), uint16] */, dtype="uint16") /* ty=Tensor[(216), uint16] */;
    %280 = cast(%var_3282, dtype="float32") /* ty=Tensor[(132), float32] */;
    %281 = reshape(%278, newshape=[]) /* ty=uint16 */;
    %282 = reshape(%279, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), uint16] */;
    %283 = reshape(%280, newshape=[3, 44]) /* ty=Tensor[(3, 44), float32] */;
    %284 = @func_702(%281, %282, %283) /* ty=(Tensor[(6, 12, 3), uint16], Tensor[(4, 3, 11), float32], Tensor[(3, 44), float32]) */;
    %285 = @func_2020() /* ty=Tensor[(15, 3, 7), bool] */;
    %286 = cast(%285, dtype="float32") /* ty=Tensor[(15, 3, 7), float32] */;
    %287 = %284.0;
    %288 = sin(%286) /* ty=Tensor[(15, 3, 7), float32] */;
    (%287, %var_3280, meta[relay.Constant][13] /* ty=Tensor[(216), uint16] */, %var_3282, %288)
  };
  %289(%var_3291, %var_3292) /* ty=(Tensor[(6, 12, 3), uint16], uint16, Tensor[(216), uint16], Tensor[(132), float32], Tensor[(15, 3, 7), float32]) */
}

def @func_984() -> (Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) {
  %308 = fn () -> (Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) {
    %290 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
    %291 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(10, 8, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %292 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
    %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %294 = floor_divide(%292, %293) /* ty=Tensor[(10, 8, 2), float64] */;
    %295 = cast(%294, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
    %296 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
    %297 = cast(meta[relay.Constant][16] /* ty=Tensor[(315), uint16] */, dtype="uint16") /* ty=Tensor[(315), uint16] */;
    %298 = reshape(%297, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint16] */;
    %299 = @func_441(%298) /* ty=(Tensor[(15, 3, 7), bool], Tensor[(15, 3, 7), float64]) */;
    %300 = cast(meta[relay.Constant][17] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %301 = cast(meta[relay.Constant][17] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %302 = reshape(%300, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
    %303 = reshape(%301, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
    %304 = sigmoid(%295) /* ty=Tensor[(10, 8, 2), float64] */;
    %305 = acosh(%296) /* ty=Tensor[(10, 8, 2), float64] */;
    %306 = %299.0;
    %307 = @func_851(%302, %303) /* ty=Tensor[(13, 4, 9), float64] */;
    (%304, %305, %306, meta[relay.Constant][16] /* ty=Tensor[(315), uint16] */, %307, meta[relay.Constant][17] /* ty=Tensor[(468), float64] */)
  };
  %308() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */
}

def @func_1135() -> (Tensor[(9, 8, 7), uint32],) {
  %309 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %310 = %309.0;
  (%310,)
}

def @func_3375() -> Tensor[(9, 9, 2), float64] {
  %311 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 9, 2), float64] */, dtype="float64") /* ty=Tensor[(9, 9, 2), float64] */;
  atanh(%311) /* ty=Tensor[(9, 9, 2), float64] */
}

def @func_1914(%var_1913: Tensor[(9, 8, 7), uint32]) -> (Tensor[(9, 8, 7), uint8],) {
  %318 = fn (%var_1902: Tensor[(9, 8, 7), uint32]) -> (Tensor[(9, 8, 7), uint8],) {
    %312 = @func_1860() /* ty=Tensor[(9, 8, 7), uint32] */;
    %313 = cast(%var_1902, dtype="uint8") /* ty=Tensor[(9, 8, 7), uint8] */;
    %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
    %315 = cast(%312, dtype="uint8") /* ty=Tensor[(9, 8, 7), uint8] */;
    %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %317 = bitwise_and(%315, %316) /* ty=Tensor[(9, 8, 7), uint8] */;
    (%317,)
  };
  %318(%var_1913) /* ty=(Tensor[(9, 8, 7), uint8],) */
}

def @func_168(%var_167: Tensor[(1, 7, 9), float32]) -> (Tensor[(?, 7, 9), float32], Tensor[(3, 7, 9), bool]) {
  %339 = fn (%var_110: Tensor[(1, 7, 9), float32]) -> (Tensor[(?, 7, 9), float32], Tensor[(3, 7, 9), bool]) {
    %319 = cast(%var_110, dtype="float32") /* ty=Tensor[(1, 7, 9), float32] */;
    %320 = exp(%319) /* ty=Tensor[(1, 7, 9), float32] */;
    %321 = cast(%var_110, dtype="int64") /* ty=Tensor[(1, 7, 9), int64] */;
    %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(%320, dtype="int64") /* ty=Tensor[(1, 7, 9), int64] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %325 = subtract(%323, %324) /* ty=Tensor[(?, 7, 9), int64] */;
    %326 = cast(%var_110, dtype="bool") /* ty=Tensor[(1, 7, 9), bool] */;
    %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
    %328 = cast(%325, dtype="bool") /* ty=Tensor[(?, 7, 9), bool] */;
    %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %330 = greater_equal(%328, %329) /* ty=Tensor[(?, 7, 9), bool] */;
    %331 = cast(%330, dtype="float32") /* ty=Tensor[(?, 7, 9), float32] */;
    %332 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
    %333 = cast(%325, dtype="float32") /* ty=Tensor[(?, 7, 9), float32] */;
    %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %335 = cast(%var_110, dtype="bool") /* ty=Tensor[(1, 7, 9), bool] */;
    %336 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 7, 9), float32] */, dtype="bool") /* ty=Tensor[(3, 7, 9), bool] */;
    %337 = multiply(%333, %334) /* ty=Tensor[(?, 7, 9), float32] */;
    %338 = logical_and(%335, %336) /* ty=Tensor[(3, 7, 9), bool] */;
    (%337, %338)
  };
  %339(%var_167) /* ty=(Tensor[(?, 7, 9), float32], Tensor[(3, 7, 9), bool]) */
}

def @func_2305(%var_2214: Tensor[(384), float64]) -> (Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), uint32], Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32], Tensor[(8, 16, 3), int8]) {
  %340 = @func_1828() /* ty=(Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32]) */;
  %341 = %340.0;
  %342 = cast(%341, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %343 = reshape(%342, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %344 = @func_1281(%343) /* ty=Tensor[(10, 8, 2), int32] */;
  %345 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 8, 2), int32] */, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%344, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %349 = cast(%344, dtype="uint32") /* ty=Tensor[(10, 8, 2), uint32] */;
  %350 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%341, dtype="uint32") /* ty=Tensor[(10, 8, 2), uint32] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %353 = cast(%344, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
  %354 = cosh(%353) /* ty=Tensor[(10, 8, 2), float32] */;
  %355 = cast(%344, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %356 = cast(%344, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
  %357 = reshape(%355, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %358 = reshape(%356, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float32] */;
  %359 = @func_1057(%357, %358) /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), bool]) */;
  %360 = %359.1;
  %361 = cast(%360, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %362 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%354, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %365 = cast(%var_2214, dtype="float64") /* ty=Tensor[(384), float64] */;
  %366 = reshape(%365, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), float64] */;
  %367 = @func_1881(%366) /* ty=(Tensor[(8, 16, 3), float64], Tensor[(9, 8, 7), uint32]) */;
  %368 = %367.0;
  %369 = cast(%var_2214, dtype="bool") /* ty=Tensor[(384), bool] */;
  %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%368, dtype="bool") /* ty=Tensor[(8, 16, 3), bool] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %373 = logical_or(%371, %372) /* ty=Tensor[(8, 16, 3), bool] */;
  %374 = cast(%var_2214, dtype="int8") /* ty=Tensor[(384), int8] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="int8") /* ty=Tensor[(8, 16, 3), int8] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %378 = minimum(%347, %348) /* ty=Tensor[(10, 8, 2), float64] */;
  %379 = bitwise_or(%351, %352) /* ty=Tensor[(10, 8, 2), uint32] */;
  %380 = equal(%363, %364) /* ty=Tensor[(10, 8, 2), bool] */;
  %381 = @func_1683() /* ty=Tensor[(9, 8, 7), uint32] */;
  %382 = subtract(%376, %377) /* ty=Tensor[(8, 16, 3), int8] */;
  (%378, %379, %380, %381, %382)
}

def @func_855(%var_853: Tensor[(13, 4, 9), float64], %var_854: Tensor[(13, 4, 9), float64]) -> Tensor[(13, 4, 9), float64] {
  @func_851(%var_853, %var_854) /* ty=Tensor[(13, 4, 9), float64] */
}

def @func_4353() -> (Tensor[(9, 8, 7), uint32], Tensor[(315), uint16]) {
  @func_4351() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(315), uint16]) */
}

def @func_4826() -> (Tensor[(13, 4, 9), float64],) {
  %385 = fn () -> (Tensor[(13, 4, 9), float64],) {
    %383 = @func_2444() /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) */;
    %384 = %383.7;
    (%384,)
  };
  %385() /* ty=(Tensor[(13, 4, 9), float64],) */
}

def @func_3631(%var_3629: Tensor[(9, 8, 7), uint32]) -> Tensor[(9, 8, 7), float32] {
  @func_3628(%var_3629) /* ty=Tensor[(9, 8, 7), float32] */
}

def @func_3723() -> (Tensor[(9, 8, 7), uint32],) {
  %386 = @func_1860() /* ty=Tensor[(9, 8, 7), uint32] */;
  (%386,)
}

def @func_366(%var_361: Tensor[(15, 2, 5), uint8], %var_362: Tensor[(15, 2, 5), uint8], %var_363: Tensor[(15, 2, 5), uint8], %var_364: Tensor[(1, 63), float32], %var_365: Tensor[(15, 2, 5), float64]) -> (Tensor[(15, 2, 5), bool], Tensor[(3, 7, 9), bool], Tensor[(1, 63), float32], Tensor[(15, 2, 5), int64]) {
  %406 = fn (%var_328: Tensor[(15, 2, 5), uint8], %var_329: Tensor[(15, 2, 5), uint8], %var_339: Tensor[(15, 2, 5), uint8], %var_344: Tensor[(1, 63), float32], %var_353: Tensor[(15, 2, 5), float64]) -> (Tensor[(15, 2, 5), bool], Tensor[(3, 7, 9), bool], Tensor[(1, 63), float32], Tensor[(15, 2, 5), int64]) {
    %387 = cast(%var_329, dtype="bool") /* ty=Tensor[(15, 2, 5), bool] */;
    %388 = shape_of(%var_328, dtype="int32") /* ty=Tensor[(3), int32] */;
    %389 = cast(%var_328, dtype="bool") /* ty=Tensor[(15, 2, 5), bool] */;
    %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %391 = cast(%var_344, dtype="float32") /* ty=Tensor[(1, 63), float32] */;
    %392 = reshape(%391, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
    %393 = @func_166(%392) /* ty=(Tensor[(?, 7, 9), float32], Tensor[(3, 7, 9), bool]) */;
    %394 = cast(%var_339, dtype="float64") /* ty=Tensor[(15, 2, 5), float64] */;
    %395 = shape_of(%var_329, dtype="int32") /* ty=Tensor[(3), int32] */;
    %396 = cast(%var_329, dtype="float64") /* ty=Tensor[(15, 2, 5), float64] */;
    %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %398 = add(%396, %397) /* ty=Tensor[(15, 2, 5), float64] */;
    %399 = cast(%var_353, dtype="int64") /* ty=Tensor[(15, 2, 5), int64] */;
    %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
    %401 = cast(%398, dtype="int64") /* ty=Tensor[(15, 2, 5), int64] */;
    %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %403 = not_equal(%389, %390) /* ty=Tensor[(15, 2, 5), bool] */;
    %404 = %393.1;
    %405 = bitwise_or(%401, %402) /* ty=Tensor[(15, 2, 5), int64] */;
    (%403, %404, %var_344, %405)
  };
  %406(%var_361, %var_362, %var_363, %var_364, %var_365) /* ty=(Tensor[(15, 2, 5), bool], Tensor[(3, 7, 9), bool], Tensor[(1, 63), float32], Tensor[(15, 2, 5), int64]) */
}

def @func_4230() -> Tensor[(9, 8, 7), uint32] {
  @func_4228() /* ty=Tensor[(9, 8, 7), uint32] */
}

def @func_4351() -> (Tensor[(9, 8, 7), uint32], Tensor[(315), uint16]) {
  %407 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %408 = @func_4228() /* ty=Tensor[(9, 8, 7), uint32] */;
  %409 = %407.3;
  (%408, %409)
}

def @func_5204() -> (Tensor[(9, 8, 7), bool],) {
  %412 = fn () -> (Tensor[(9, 8, 7), bool],) {
    %410 = @func_2524() /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) */;
    %411 = %410.0;
    (%411,)
  };
  %412() /* ty=(Tensor[(9, 8, 7), bool],) */
}

def @func_3908(%var_3907: Tensor[(25, 6), uint8]) -> (Tensor[(25, 6), bool], Tensor[(25, 6), float32]) {
  %432 = fn (%var_3874: Tensor[(25, 6), uint8]) -> (Tensor[(25, 6), bool], Tensor[(25, 6), float32]) {
    %413 = @func_2444() /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) */;
    %414 = %413.3;
    %415 = cast(%var_3874, dtype="bool") /* ty=Tensor[(25, 6), bool] */;
    %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(2), int32] */;
    %417 = cast(%414, dtype="bool") /* ty=Tensor[(25, 6), bool] */;
    %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %419 = logical_and(%417, %418) /* ty=Tensor[(25, 6), bool] */;
    %420 = cast(%var_3874, dtype="bool") /* ty=Tensor[(25, 6), bool] */;
    %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(2), int32] */;
    %422 = cast(%419, dtype="bool") /* ty=Tensor[(25, 6), bool] */;
    %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %424 = cast(%414, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
    %425 = asinh(%424) /* ty=Tensor[(25, 6), float64] */;
    %426 = cast(meta[relay.Constant][21] /* ty=Tensor[(25, 6), float64] */, dtype="float32") /* ty=Tensor[(25, 6), float32] */;
    %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(2), int32] */;
    %428 = cast(%425, dtype="float32") /* ty=Tensor[(25, 6), float32] */;
    %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %430 = not_equal(%422, %423) /* ty=Tensor[(25, 6), bool] */;
    %431 = floor_divide(%428, %429) /* ty=Tensor[(25, 6), float32] */;
    (%430, %431)
  };
  %432(%var_3907) /* ty=(Tensor[(25, 6), bool], Tensor[(25, 6), float32]) */
}

def @func_1883(%var_1882: Tensor[(8, 16, 3), float64]) -> (Tensor[(8, 16, 3), float64], Tensor[(9, 8, 7), uint32]) {
  %437 = fn (%var_1867: Tensor[(8, 16, 3), float64]) -> (Tensor[(8, 16, 3), float64], Tensor[(9, 8, 7), uint32]) {
    %433 = cast(%var_1867, dtype="float64") /* ty=Tensor[(8, 16, 3), float64] */;
    %434 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %435 = rsqrt(%433) /* ty=Tensor[(8, 16, 3), float64] */;
    %436 = %434.0;
    (%435, %436)
  };
  %437(%var_1882) /* ty=(Tensor[(8, 16, 3), float64], Tensor[(9, 8, 7), uint32]) */
}

def @func_4769(%var_4768: Tensor[(13, 4, 6), float32]) -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(13, 4, 6), float32]) {
  %445 = fn (%var_4731: Tensor[(13, 4, 6), float32]) -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(13, 4, 6), float32]) {
    %438 = @func_2463() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */;
    %439 = cast(%var_4731, dtype="float32") /* ty=Tensor[(13, 4, 6), float32] */;
    %440 = sinh(%439) /* ty=Tensor[(13, 4, 6), float32] */;
    %441 = cast(%440, dtype="float32") /* ty=Tensor[(13, 4, 6), float32] */;
    %442 = %438.1;
    %443 = @func_4228() /* ty=Tensor[(9, 8, 7), uint32] */;
    %444 = acos(%441) /* ty=Tensor[(13, 4, 6), float32] */;
    (%442, %443, %444)
  };
  %445(%var_4768) /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(13, 4, 6), float32]) */
}

def @func_2713() -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
  %449 = fn () -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
    %446 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %447 = @func_1860() /* ty=Tensor[(9, 8, 7), uint32] */;
    %448 = %446.0;
    (%447, %448)
  };
  %449() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */
}

def @func_1485(%var_1483: Tensor[(9, 8, 7), float64]) -> (Tensor[(9, 8, 7), bool],) {
  @func_1482(%var_1483) /* ty=(Tensor[(9, 8, 7), bool],) */
}

def @func_2877(%var_2860: Tensor[(216), uint16], %var_2861: Tensor[(132), float32]) -> (Tensor[(9, 8, 7), uint32], Tensor[(3, 44), float32], uint16, Tensor[(216), uint16], Tensor[(132), float32], Tensor[(9, 8, 7), uint32]) {
  %450 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %451 = cast(meta[relay.Constant][22] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %452 = cast(%var_2860, dtype="uint16") /* ty=Tensor[(216), uint16] */;
  %453 = cast(%var_2861, dtype="float32") /* ty=Tensor[(132), float32] */;
  %454 = reshape(%451, newshape=[]) /* ty=uint16 */;
  %455 = reshape(%452, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), uint16] */;
  %456 = reshape(%453, newshape=[3, 44]) /* ty=Tensor[(3, 44), float32] */;
  %457 = @func_702(%454, %455, %456) /* ty=(Tensor[(6, 12, 3), uint16], Tensor[(4, 3, 11), float32], Tensor[(3, 44), float32]) */;
  %458 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %459 = %450.0;
  %460 = %457.2;
  %461 = %458.0;
  (%459, %460, meta[relay.Constant][22] /* ty=uint16 */, %var_2860, %var_2861, %461)
}

def @func_4228() -> Tensor[(9, 8, 7), uint32] {
  @func_3090() /* ty=Tensor[(9, 8, 7), uint32] */
}

def @func_814(%var_812: Tensor[(2, 2, 9), float64]) -> (Tensor[(2, 2, 9), float64],) {
  @func_811(%var_812) /* ty=(Tensor[(2, 2, 9), float64],) */
}

def @func_5160() -> (Tensor[(468), float64],) {
  %468 = fn () -> (Tensor[(468), float64],) {
    %462 = @func_3803() /* ty=(Tensor[(468), float64],) */;
    %463 = %462.0;
    %464 = cast(%463, dtype="float32") /* ty=Tensor[(468), float32] */;
    %465 = rsqrt(%464) /* ty=Tensor[(468), float32] */;
    %466 = cast(%465, dtype="float64") /* ty=Tensor[(468), float64] */;
    %467 = log2(%466) /* ty=Tensor[(468), float64] */;
    (%467,)
  };
  %468() /* ty=(Tensor[(468), float64],) */
}

def @func_1137() -> (Tensor[(9, 8, 7), uint32],) {
  @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */
}

def @func_1427() -> (Tensor[(9, 8, 7), uint32],) {
  %471 = fn () -> (Tensor[(9, 8, 7), uint32],) {
    %469 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %470 = %469.0;
    (%470,)
  };
  %471() /* ty=(Tensor[(9, 8, 7), uint32],) */
}

def @func_702(%var_690: uint16, %var_691: Tensor[(6, 12, 3), uint16], %var_696: Tensor[(3, 44), float32]) -> (Tensor[(6, 12, 3), uint16], Tensor[(4, 3, 11), float32], Tensor[(3, 44), float32]) {
  %472 = cast(%var_690, dtype="uint16") /* ty=uint16 */;
  %473 = cast(%var_691, dtype="uint16") /* ty=Tensor[(6, 12, 3), uint16] */;
  %474 = cast(%var_690, dtype="float32") /* ty=float32 */;
  %475 = cast(%var_696, dtype="float32") /* ty=Tensor[(3, 44), float32] */;
  %476 = reshape(%474, newshape=[]) /* ty=float32 */;
  %477 = reshape(%475, newshape=[4, 3, 11]) /* ty=Tensor[(4, 3, 11), float32] */;
  %478 = @func_673(%476, %477) /* ty=(Tensor[(4, 3, 11), float32],) */;
  %479 = multiply(%472, %473) /* ty=Tensor[(6, 12, 3), uint16] */;
  %480 = %478.0;
  (%479, %480, %var_696)
}

def @func_1654(%var_1638: Tensor[(10, 8, 2), float64], %var_1647: Tensor[(468), float64]) -> (Tensor[(10, 8, 2), bool], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) {
  %481 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %482 = %481.1;
  %483 = cast(%var_1638, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %487 = cast(%var_1647, dtype="float64") /* ty=Tensor[(468), float64] */;
  %488 = cast(%var_1647, dtype="float64") /* ty=Tensor[(468), float64] */;
  %489 = reshape(%487, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %490 = reshape(%488, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %491 = not_equal(%485, %486) /* ty=Tensor[(10, 8, 2), bool] */;
  %492 = @func_851(%489, %490) /* ty=Tensor[(13, 4, 9), float64] */;
  (%491, %492, %var_1647)
}

def @func_3773() -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
  @func_3771() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */
}

def @func_3151(%var_3150: Tensor[(315), uint16]) -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32], Tensor[(315), uint64], Tensor[(160), float64]) {
  %510 = fn (%var_3132: Tensor[(315), uint16]) -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32], Tensor[(315), uint64], Tensor[(160), float64]) {
    %493 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %494 = @func_2524() /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) */;
    %495 = cast(%var_3132, dtype="uint16") /* ty=Tensor[(315), uint16] */;
    %496 = reshape(%495, newshape=[315]) /* ty=Tensor[(315), uint16] */;
    %497 = @func_2739(%496) /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(15, 3, 7), float64], Tensor[(315), uint16], Tensor[(9, 8, 7), uint32]) */;
    %498 = cast(%var_3132, dtype="float64") /* ty=Tensor[(315), float64] */;
    %499 = asinh(%498) /* ty=Tensor[(315), float64] */;
    %500 = cast(%var_3132, dtype="uint64") /* ty=Tensor[(315), uint64] */;
    %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(1), int32] */;
    %502 = cast(%499, dtype="uint64") /* ty=Tensor[(315), uint64] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %504 = @func_2444() /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) */;
    %505 = %493.0;
    %506 = %494.0;
    %507 = %497.0;
    %508 = maximum(%502, %503) /* ty=Tensor[(315), uint64] */;
    %509 = %504.2;
    (%505, %506, %507, %508, %509)
  };
  %510(%var_3150) /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32], Tensor[(315), uint64], Tensor[(160), float64]) */
}

def @func_5049(%var_5030: Tensor[(468), float64]) -> (Tensor[(9, 8, 7), uint32], Tensor[(10, 8, 2), float64], Tensor[(150), uint8], Tensor[(160), float64], Tensor[(10, 8, 2), float32], Tensor[(10, 8, 2), bool], Tensor[(468), float64], Tensor[(25, 6), float64], Tensor[(9, 8, 7), uint32], Tensor[(10, 8, 2), float64], Tensor[(315), uint16]) {
  %511 = @func_2688() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */;
  %512 = %511.2;
  %513 = cast(%512, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
  %514 = cast(meta[relay.Constant][23] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
  %515 = cast(meta[relay.Constant][24] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %516 = reshape(%513, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), uint32] */;
  %517 = reshape(%514, newshape=[150]) /* ty=Tensor[(150), uint8] */;
  %518 = reshape(%515, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %519 = @func_1211(%516, %517, %518) /* ty=(Tensor[(9, 8, 7), uint16], Tensor[(150), uint8], Tensor[(?, 63), bool], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(10, 8, 2), float64]) */;
  %520 = @func_3718() /* ty=(Tensor[(10, 8, 2), float32], Tensor[(9, 8, 7), float64]) */;
  %521 = cast(%var_5030, dtype="float64") /* ty=Tensor[(468), float64] */;
  %522 = %519.3;
  %523 = cast(%522, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %524 = reshape(%521, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %525 = reshape(%523, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %526 = @func_2349(%524, %525) /* ty=(Tensor[(13, 4, 9), float64], Tensor[(468), float64], Tensor[(10, 8, 2), bool]) */;
  %527 = @func_1828() /* ty=(Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32]) */;
  %528 = %520.0;
  %529 = cast(%528, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
  %530 = cast(%528, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
  %531 = reshape(%529, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
  %532 = reshape(%530, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float32] */;
  %533 = @func_1057(%531, %532) /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), bool]) */;
  %534 = @func_4351() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(315), uint16]) */;
  %535 = %526.2;
  %536 = @func_4557() /* ty=Tensor[(25, 6), float64] */;
  %537 = %527.1;
  %538 = %533.0;
  %539 = %534.1;
  (%512, %522, meta[relay.Constant][23] /* ty=Tensor[(150), uint8] */, meta[relay.Constant][24] /* ty=Tensor[(160), float64] */, %528, %535, %var_5030, %536, %537, %538, %539)
}

def @func_4319(%var_4317: Tensor[(468), float64]) -> (Tensor[(10, 8, 2), int16], Tensor[(9, 8, 7), uint32], Tensor[(9, 9, 2), float64], Tensor[(132), float32], Tensor[(9, 8, 7), uint32], Tensor[(150, 1), uint8], Tensor[(468), float64], Tensor[(150), uint8]) {
  @func_4316(%var_4317) /* ty=(Tensor[(10, 8, 2), int16], Tensor[(9, 8, 7), uint32], Tensor[(9, 9, 2), float64], Tensor[(132), float32], Tensor[(9, 8, 7), uint32], Tensor[(150, 1), uint8], Tensor[(468), float64], Tensor[(150), uint8]) */
}

def @func_5335() -> (Tensor[(2, 5, 2), float64],) {
  %540 = @func_3030() /* ty=(Tensor[(468), float64], Tensor[(2, 5, 2), float64], Tensor[(20), float64]) */;
  %541 = %540.1;
  (%541,)
}

def @func_4686() -> (Tensor[(315), uint16], Tensor[(9, 8, 7), uint32], Tensor[(15, 3, 7), float64]) {
  %542 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %543 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %544 = %542.3;
  %545 = cast(%544, dtype="uint16") /* ty=Tensor[(315), uint16] */;
  %546 = reshape(%545, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint16] */;
  %547 = @func_441(%546) /* ty=(Tensor[(15, 3, 7), bool], Tensor[(15, 3, 7), float64]) */;
  %548 = %543.0;
  %549 = %547.1;
  (%544, %548, %549)
}

def @func_2445() -> (Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) {
  %577 = fn () -> (Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) {
    %550 = @func_1426() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %551 = %550.0;
    %552 = cast(%551, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
    %553 = cast(meta[relay.Constant][25] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %554 = reshape(%553, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
    %555 = sinh(%552) /* ty=Tensor[(9, 8, 7), float32] */;
    %556 = cast(%555, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
    %557 = cast(meta[relay.Constant][26] /* ty=Tensor[(150), uint8] */, dtype="uint8") /* ty=Tensor[(150), uint8] */;
    %558 = cast(meta[relay.Constant][25] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %559 = reshape(%556, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), uint32] */;
    %560 = reshape(%557, newshape=[25, 6]) /* ty=Tensor[(25, 6), uint8] */;
    %561 = reshape(%558, newshape=[80, 2]) /* ty=Tensor[(80, 2), float64] */;
    %562 = @func_1410(%559, %560, %561) /* ty=(Tensor[(?, 63), bool], Tensor[(25, 6), uint8], Tensor[(80, 2), float64], Tensor[(9, 8, 7), float32]) */;
    %563 = @func_1281(%554) /* ty=Tensor[(10, 8, 2), int32] */;
    %564 = cast(%563, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
    %565 = cast(meta[relay.Constant][27] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %566 = reshape(%564, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
    %567 = reshape(%565, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %568 = @func_1654(%566, %567) /* ty=(Tensor[(10, 8, 2), bool], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
    %569 = cast(%563, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
    %570 = cast(meta[relay.Constant][27] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %571 = reshape(%569, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
    %572 = reshape(%570, newshape=[468]) /* ty=Tensor[(468), float64] */;
    %573 = @func_1654(%571, %572) /* ty=(Tensor[(10, 8, 2), bool], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
    %574 = %562.1;
    %575 = %568.2;
    %576 = %573.1;
    (%555, %563, meta[relay.Constant][25] /* ty=Tensor[(160), float64] */, %574, meta[relay.Constant][26] /* ty=Tensor[(150), uint8] */, %575, meta[relay.Constant][27] /* ty=Tensor[(468), float64] */, %576)
  };
  %577() /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) */
}

def @func_4179() -> Tensor[(9, 8, 7), uint32] {
  %579 = fn () -> Tensor[(9, 8, 7), uint32] {
    %578 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %578.0
  };
  %579() /* ty=Tensor[(9, 8, 7), uint32] */
}

def @func_3091() -> Tensor[(9, 8, 7), uint32] {
  %581 = fn () -> Tensor[(9, 8, 7), uint32] {
    %580 = @func_2123() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) */;
    %580.0
  };
  %581() /* ty=Tensor[(9, 8, 7), uint32] */
}

def @func_5052(%var_5050: Tensor[(468), float64]) -> (Tensor[(9, 8, 7), uint32], Tensor[(10, 8, 2), float64], Tensor[(150), uint8], Tensor[(160), float64], Tensor[(10, 8, 2), float32], Tensor[(10, 8, 2), bool], Tensor[(468), float64], Tensor[(25, 6), float64], Tensor[(9, 8, 7), uint32], Tensor[(10, 8, 2), float64], Tensor[(315), uint16]) {
  @func_5049(%var_5050) /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(10, 8, 2), float64], Tensor[(150), uint8], Tensor[(160), float64], Tensor[(10, 8, 2), float32], Tensor[(10, 8, 2), bool], Tensor[(468), float64], Tensor[(25, 6), float64], Tensor[(9, 8, 7), uint32], Tensor[(10, 8, 2), float64], Tensor[(315), uint16]) */
}

def @func_2773(%var_2771: Tensor[(15, 12, 10), float32], %var_2772: Tensor[(15, 12, 10), float32]) -> Tensor[(15, 12, 10), float32] {
  %586 = fn (%var_2765: Tensor[(15, 12, 10), float32], %var_2766: Tensor[(15, 12, 10), float32]) -> Tensor[(15, 12, 10), float32] {
    %582 = cast(%var_2766, dtype="float32") /* ty=Tensor[(15, 12, 10), float32] */;
    %583 = shape_of(%var_2765, dtype="int32") /* ty=Tensor[(3), int32] */;
    %584 = cast(%var_2765, dtype="float32") /* ty=Tensor[(15, 12, 10), float32] */;
    %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%584, %585) /* ty=Tensor[(15, 12, 10), float32] */
  };
  %586(%var_2771, %var_2772) /* ty=Tensor[(15, 12, 10), float32] */
}

def @func_2881(%var_2879: Tensor[(216), uint16], %var_2880: Tensor[(132), float32]) -> (Tensor[(9, 8, 7), uint32], Tensor[(3, 44), float32], uint16, Tensor[(216), uint16], Tensor[(132), float32], Tensor[(9, 8, 7), uint32]) {
  @func_2877(%var_2879, %var_2880) /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(3, 44), float32], uint16, Tensor[(216), uint16], Tensor[(132), float32], Tensor[(9, 8, 7), uint32]) */
}

def @func_5254() -> (Tensor[(9, 8, 7), uint32],) {
  %589 = fn () -> (Tensor[(9, 8, 7), uint32],) {
    %587 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %588 = %587.0;
    (%588,)
  };
  %589() /* ty=(Tensor[(9, 8, 7), uint32],) */
}

def @func_2525() -> (Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) {
  %594 = fn () -> (Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) {
    %590 = @func_2123() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) */;
    %591 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %592 = %590.1;
    %593 = %591.0;
    (%592, %593)
  };
  %594() /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) */
}

def @func_811(%var_796: Tensor[(2, 2, 9), float64]) -> (Tensor[(2, 2, 9), float64],) {
  %595 = cast(%var_796, dtype="float64") /* ty=Tensor[(2, 2, 9), float64] */;
  %596 = exp(%595) /* ty=Tensor[(2, 2, 9), float64] */;
  (%596,)
}

def @func_4421() -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
  %601 = fn () -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
    %597 = @func_3771() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */;
    %598 = @func_4351() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(315), uint16]) */;
    %599 = %597.0;
    %600 = %598.0;
    (%599, %600)
  };
  %601() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */
}

def @func_1861() -> Tensor[(9, 8, 7), uint32] {
  %603 = fn () -> Tensor[(9, 8, 7), uint32] {
    %602 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %602.0
  };
  %603() /* ty=Tensor[(9, 8, 7), uint32] */
}

def @func_3609(%var_3608: Tensor[(9, 9, 2), float64]) -> (Tensor[(9, 9, 2), float32], Tensor[(9, 8, 7), uint32]) {
  %611 = fn (%var_3595: Tensor[(9, 9, 2), float64]) -> (Tensor[(9, 9, 2), float32], Tensor[(9, 8, 7), uint32]) {
    %604 = @func_3375() /* ty=Tensor[(9, 9, 2), float64] */;
    %605 = cast(%var_3595, dtype="float32") /* ty=Tensor[(9, 9, 2), float32] */;
    %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
    %607 = cast(%604, dtype="float32") /* ty=Tensor[(9, 9, 2), float32] */;
    %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %609 = divide(%607, %608) /* ty=Tensor[(9, 9, 2), float32] */;
    %610 = @func_2818() /* ty=Tensor[(9, 8, 7), uint32] */;
    (%609, %610)
  };
  %611(%var_3608) /* ty=(Tensor[(9, 9, 2), float32], Tensor[(9, 8, 7), uint32]) */
}

def @func_3419(%var_3417: Tensor[(4, 10, 9), int16], %var_3418: Tensor[(4, 10, 9), int16]) -> (Tensor[(4, 10, 9), int16],) {
  %617 = fn (%var_3410: Tensor[(4, 10, 9), int16], %var_3411: Tensor[(4, 10, 9), int16]) -> (Tensor[(4, 10, 9), int16],) {
    %612 = cast(%var_3411, dtype="int16") /* ty=Tensor[(4, 10, 9), int16] */;
    %613 = shape_of(%var_3410, dtype="int32") /* ty=Tensor[(3), int32] */;
    %614 = cast(%var_3410, dtype="int16") /* ty=Tensor[(4, 10, 9), int16] */;
    %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %616 = bitwise_xor(%614, %615) /* ty=Tensor[(4, 10, 9), int16] */;
    (%616,)
  };
  %617(%var_3417, %var_3418) /* ty=(Tensor[(4, 10, 9), int16],) */
}

def @func_4506() -> Tensor[(9, 6, 5), float32] {
  %618 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(9, 6, 5), float64] */;
  %619 = asin(%618) /* ty=Tensor[(9, 6, 5), float64] */;
  %620 = cast(%619, dtype="float32") /* ty=Tensor[(9, 6, 5), float32] */;
  erf(%620) /* ty=Tensor[(9, 6, 5), float32] */
}

def @func_5308() -> (Tensor[(9, 8, 7), float64],) {
  @func_5306() /* ty=(Tensor[(9, 8, 7), float64],) */
}

def @func_3519() -> (Tensor[(9, 8, 7), bool],) {
  %621 = @func_2123() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) */;
  %622 = %621.1;
  (%622,)
}

def @func_4784(%var_4783: Tensor[(8, 16, 7), float64]) -> Tensor[(8, 16, 7), float64] {
  %624 = fn (%var_4771: Tensor[(8, 16, 7), float64]) -> Tensor[(8, 16, 7), float64] {
    %623 = cast(%var_4771, dtype="float64") /* ty=Tensor[(8, 16, 7), float64] */;
    tan(%623) /* ty=Tensor[(8, 16, 7), float64] */
  };
  %624(%var_4783) /* ty=Tensor[(8, 16, 7), float64] */
}

def @func_2193(%var_2166: Tensor[(9, 8, 7), uint32]) -> (Tensor[(9, 8, 7), uint16], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint8]) {
  %625 = @func_1683() /* ty=Tensor[(9, 8, 7), uint32] */;
  %626 = cast(%var_2166, dtype="int16") /* ty=Tensor[(9, 8, 7), int16] */;
  %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%625, dtype="int16") /* ty=Tensor[(9, 8, 7), int16] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %630 = maximum(%628, %629) /* ty=Tensor[(9, 8, 7), int16] */;
  %631 = cast(%var_2166, dtype="uint16") /* ty=Tensor[(9, 8, 7), uint16] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%630, dtype="uint16") /* ty=Tensor[(9, 8, 7), uint16] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %635 = @func_1860() /* ty=Tensor[(9, 8, 7), uint32] */;
  %636 = cast(%635, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
  %637 = reshape(%636, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), uint32] */;
  %638 = @func_1912(%637) /* ty=(Tensor[(9, 8, 7), uint8],) */;
  %639 = logical_xor(%633, %634) /* ty=Tensor[(9, 8, 7), uint16] */;
  %640 = %638.0;
  (%639, %635, %640)
}

def @func_2741(%var_2740: Tensor[(315), uint16]) -> (Tensor[(9, 8, 7), uint32], Tensor[(15, 3, 7), float64], Tensor[(315), uint16], Tensor[(9, 8, 7), uint32]) {
  %649 = fn (%var_2732: Tensor[(315), uint16]) -> (Tensor[(9, 8, 7), uint32], Tensor[(15, 3, 7), float64], Tensor[(315), uint16], Tensor[(9, 8, 7), uint32]) {
    %641 = @func_1426() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %642 = cast(%var_2732, dtype="uint16") /* ty=Tensor[(315), uint16] */;
    %643 = reshape(%642, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint16] */;
    %644 = @func_441(%643) /* ty=(Tensor[(15, 3, 7), bool], Tensor[(15, 3, 7), float64]) */;
    %645 = @func_2688() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */;
    %646 = %641.0;
    %647 = %644.1;
    %648 = %645.0;
    (%646, %647, %var_2732, %648)
  };
  %649(%var_2740) /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(15, 3, 7), float64], Tensor[(315), uint16], Tensor[(9, 8, 7), uint32]) */
}

def @func_4726(%var_4721: Tensor[(9, 8, 7), uint32]) -> (Tensor[(9, 8, 7), bool],) {
  %650 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %651 = %650.0;
  %652 = cast(%var_4721, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
  %653 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%651, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %656 = greater_equal(%654, %655) /* ty=Tensor[(9, 8, 7), bool] */;
  (%656,)
}

def @func_3833() -> (Tensor[(9, 8, 7), uint32],) {
  %659 = fn () -> (Tensor[(9, 8, 7), uint32],) {
    %657 = @func_1828() /* ty=(Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32]) */;
    %658 = %657.1;
    (%658,)
  };
  %659() /* ty=(Tensor[(9, 8, 7), uint32],) */
}

def @func_1147(%var_1145: Tensor[(16, 16, 2), float32]) -> Tensor[(16, 16, 2), float32] {
  @func_1144(%var_1145) /* ty=Tensor[(16, 16, 2), float32] */
}

def @func_2613(%var_2611: Tensor[(63), float32], %var_2612: Tensor[(192, 2), float64]) -> (Tensor[(9, 8, 7), uint32], Tensor[(?, 7, 9), float32], Tensor[(63), float32], Tensor[(9, 8, 7), float32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(192, 2), float64]) {
  %684 = fn (%var_2565: Tensor[(63), float32], %var_2600: Tensor[(192, 2), float64]) -> (Tensor[(9, 8, 7), uint32], Tensor[(?, 7, 9), float32], Tensor[(63), float32], Tensor[(9, 8, 7), float32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(192, 2), float64]) {
    %660 = @func_2463() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */;
    %661 = cast(%var_2565, dtype="float32") /* ty=Tensor[(63), float32] */;
    %662 = reshape(%661, newshape=[1, 7, 9]) /* ty=Tensor[(1, 7, 9), float32] */;
    %663 = @func_166(%662) /* ty=(Tensor[(?, 7, 9), float32], Tensor[(3, 7, 9), bool]) */;
    %664 = @func_1683() /* ty=Tensor[(9, 8, 7), uint32] */;
    %665 = @func_1828() /* ty=(Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32]) */;
    %666 = %665.1;
    %667 = cast(%666, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
    %668 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
    %669 = cast(%664, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
    %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %671 = equal(%669, %670) /* ty=Tensor[(9, 8, 7), bool] */;
    %672 = cast(%671, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
    %673 = @func_2123() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), bool]) */;
    %674 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %675 = cast(%var_2600, dtype="float64") /* ty=Tensor[(192, 2), float64] */;
    %676 = reshape(%675, newshape=[8, 16, 3]) /* ty=Tensor[(8, 16, 3), float64] */;
    %677 = @func_1881(%676) /* ty=(Tensor[(8, 16, 3), float64], Tensor[(9, 8, 7), uint32]) */;
    %678 = %660.0;
    %679 = %663.0;
    %680 = acosh(%672) /* ty=Tensor[(9, 8, 7), float32] */;
    %681 = %673.0;
    %682 = %674.0;
    %683 = %677.1;
    (%678, %679, %var_2565, %680, %681, %682, %683, %var_2600)
  };
  %684(%var_2611, %var_2612) /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(?, 7, 9), float32], Tensor[(63), float32], Tensor[(9, 8, 7), float32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32], Tensor[(192, 2), float64]) */
}

def @func_673(%var_662: float32, %var_663: Tensor[(4, 3, 11), float32]) -> (Tensor[(4, 3, 11), float32],) {
  %685 = cast(%var_662, dtype="float32") /* ty=float32 */;
  %686 = cast(%var_663, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %687 = mod(%685, %686) /* ty=Tensor[(4, 3, 11), float32] */;
  (%687,)
}

def @func_4093() -> (Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) {
  %692 = fn () -> (Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) {
    %688 = @func_2524() /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) */;
    %689 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %690 = %688.0;
    %691 = %689.0;
    (%690, %691)
  };
  %692() /* ty=(Tensor[(9, 8, 7), bool], Tensor[(9, 8, 7), uint32]) */
}

def @func_3521() -> (Tensor[(9, 8, 7), bool],) {
  @func_3519() /* ty=(Tensor[(9, 8, 7), bool],) */
}

def @func_3031() -> (Tensor[(468), float64], Tensor[(2, 5, 2), float64], Tensor[(20), float64]) {
  %701 = fn () -> (Tensor[(468), float64], Tensor[(2, 5, 2), float64], Tensor[(20), float64]) {
    %693 = @func_2444() /* ty=(Tensor[(9, 8, 7), float32], Tensor[(10, 8, 2), int32], Tensor[(160), float64], Tensor[(25, 6), uint8], Tensor[(150), uint8], Tensor[(468), float64], Tensor[(468), float64], Tensor[(13, 4, 9), float64]) */;
    %694 = cast(meta[relay.Constant][29] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
    %695 = cast(meta[relay.Constant][29] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
    %696 = reshape(%694, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
    %697 = reshape(%695, newshape=[2, 5, 2]) /* ty=Tensor[(2, 5, 2), float64] */;
    %698 = @func_66(%696, %697) /* ty=(Tensor[(2, 5, 2), float64],) */;
    %699 = %693.5;
    %700 = %698.0;
    (%699, %700, meta[relay.Constant][29] /* ty=Tensor[(20), float64] */)
  };
  %701() /* ty=(Tensor[(468), float64], Tensor[(2, 5, 2), float64], Tensor[(20), float64]) */
}

def @func_1581() -> Tensor[(10, 8, 2), float32] {
  %702 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %703 = %702.0;
  %704 = cast(%703, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
  %705 = atanh(%704) /* ty=Tensor[(10, 8, 2), float32] */;
  %706 = cast(%705, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
  log(%706) /* ty=Tensor[(10, 8, 2), float32] */
}

def @func_3199(%var_3184: Tensor[(10, 15, 15), int16]) -> (Tensor[(10, 15, 15), bool],) {
  %707 = cast(%var_3184, dtype="bool") /* ty=Tensor[(10, 15, 15), bool] */;
  %708 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(10, 15, 15), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 15, 15), int16] */, dtype="bool") /* ty=Tensor[(10, 15, 15), bool] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %711 = not_equal(%709, %710) /* ty=Tensor[(10, 15, 15), bool] */;
  %712 = cast(%711, dtype="bool") /* ty=Tensor[(10, 15, 15), bool] */;
  %713 = shape_of(%var_3184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%var_3184, dtype="bool") /* ty=Tensor[(10, 15, 15), bool] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %716 = less_equal(%714, %715) /* ty=Tensor[(10, 15, 15), bool] */;
  (%716,)
}

def @func_4729(%var_4727: Tensor[(9, 8, 7), uint32]) -> (Tensor[(9, 8, 7), bool],) {
  @func_4726(%var_4727) /* ty=(Tensor[(9, 8, 7), bool],) */
}

def @func_1520(%var_1516: Tensor[(234, 2), float64]) -> (Tensor[(15, 3, 7), bool], Tensor[(13, 4, 9), float64], Tensor[(234, 2), float64]) {
  %717 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
  %718 = cast(%var_1516, dtype="float64") /* ty=Tensor[(234, 2), float64] */;
  %719 = cast(%var_1516, dtype="float64") /* ty=Tensor[(234, 2), float64] */;
  %720 = reshape(%718, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %721 = reshape(%719, newshape=[13, 4, 9]) /* ty=Tensor[(13, 4, 9), float64] */;
  %722 = %717.2;
  %723 = @func_851(%720, %721) /* ty=Tensor[(13, 4, 9), float64] */;
  (%722, %723, %var_1516)
}

def @func_1101() -> (Tensor[(9, 8, 7), uint32],) {
  %724 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 8, 7), uint32] */, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
  %725 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(9, 8, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 8, 7), uint32] */, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %728 = bitwise_xor(%726, %727) /* ty=Tensor[(9, 8, 7), uint32] */;
  (%728,)
}

def @func_2308(%var_2306: Tensor[(384), float64]) -> (Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), uint32], Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32], Tensor[(8, 16, 3), int8]) {
  @func_2305(%var_2306) /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), uint32], Tensor[(10, 8, 2), bool], Tensor[(9, 8, 7), uint32], Tensor[(8, 16, 3), int8]) */
}

def @func_1683() -> Tensor[(9, 8, 7), uint32] {
  %729 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
  %729.0
}

def @func_3565(%var_3563: Tensor[(1, 216), uint16], %var_3564: Tensor[(132), float32]) -> (Tensor[(9, 8, 7), uint32], uint16, Tensor[(1, 216), uint16], Tensor[(132), float32], Tensor[(160), float64], Tensor[(10, 8, 2), float64]) {
  %746 = fn (%var_3550: Tensor[(1, 216), uint16], %var_3551: Tensor[(132), float32]) -> (Tensor[(9, 8, 7), uint32], uint16, Tensor[(1, 216), uint16], Tensor[(132), float32], Tensor[(160), float64], Tensor[(10, 8, 2), float64]) {
    %730 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %731 = cast(%var_3550, dtype="uint16") /* ty=Tensor[(1, 216), uint16] */;
    %732 = cast(%var_3551, dtype="float32") /* ty=Tensor[(132), float32] */;
    %733 = reshape(%731, newshape=[216]) /* ty=Tensor[(216), uint16] */;
    %734 = reshape(%732, newshape=[132]) /* ty=Tensor[(132), float32] */;
    %735 = @func_2877(%733, %734) /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(3, 44), float32], uint16, Tensor[(216), uint16], Tensor[(132), float32], Tensor[(9, 8, 7), uint32]) */;
    %736 = cast(meta[relay.Constant][33] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %737 = cast(meta[relay.Constant][33] /* ty=Tensor[(160), float64] */, dtype="float32") /* ty=Tensor[(160), float32] */;
    %738 = reshape(%736, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float64] */;
    %739 = reshape(%737, newshape=[10, 8, 2]) /* ty=Tensor[(10, 8, 2), float32] */;
    %740 = @func_1057(%738, %739) /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), bool]) */;
    %741 = %740.0;
    %742 = cast(%741, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
    %743 = %730.0;
    %744 = %735.2;
    %745 = sqrt(%742) /* ty=Tensor[(10, 8, 2), float64] */;
    (%743, %744, %var_3550, %var_3551, meta[relay.Constant][33] /* ty=Tensor[(160), float64] */, %745)
  };
  %746(%var_3563, %var_3564) /* ty=(Tensor[(9, 8, 7), uint32], uint16, Tensor[(1, 216), uint16], Tensor[(132), float32], Tensor[(160), float64], Tensor[(10, 8, 2), float64]) */
}

def @func_3725() -> (Tensor[(9, 8, 7), uint32],) {
  @func_3723() /* ty=(Tensor[(9, 8, 7), uint32],) */
}

def @func_4666(%var_4664: Tensor[(6, 78), float64]) -> (Tensor[(9, 8, 7), bool], Tensor[(468), float64], Tensor[(150), uint8], Tensor[(6, 78), float32], Tensor[(6, 78), int32]) {
  @func_4663(%var_4664) /* ty=(Tensor[(9, 8, 7), bool], Tensor[(468), float64], Tensor[(150), uint8], Tensor[(6, 78), float32], Tensor[(6, 78), int32]) */
}

def @func_851(%var_845: Tensor[(13, 4, 9), float64], %var_846: Tensor[(13, 4, 9), float64]) -> Tensor[(13, 4, 9), float64] {
  %747 = cast(%var_846, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
  %748 = shape_of(%var_845, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_845, dtype="float64") /* ty=Tensor[(13, 4, 9), float64] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%749, %750) /* ty=Tensor[(13, 4, 9), float64] */
}

def @func_3718() -> (Tensor[(10, 8, 2), float32], Tensor[(9, 8, 7), float64]) {
  %751 = @func_1683() /* ty=Tensor[(9, 8, 7), uint32] */;
  %752 = cast(%751, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %753 = @func_1581() /* ty=Tensor[(10, 8, 2), float32] */;
  %754 = rsqrt(%752) /* ty=Tensor[(9, 8, 7), float64] */;
  (%753, %754)
}

def @func_677(%var_675: float32, %var_676: Tensor[(4, 3, 11), float32]) -> (Tensor[(4, 3, 11), float32],) {
  @func_673(%var_675, %var_676) /* ty=(Tensor[(4, 3, 11), float32],) */
}

def @func_3720() -> (Tensor[(10, 8, 2), float32], Tensor[(9, 8, 7), float64]) {
  @func_3718() /* ty=(Tensor[(10, 8, 2), float32], Tensor[(9, 8, 7), float64]) */
}

def @func_3771() -> (Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) {
  %755 = @func_2712() /* ty=(Tensor[(9, 8, 7), uint32], Tensor[(9, 8, 7), uint32]) */;
  %756 = %755.1;
  %757 = @func_1683() /* ty=Tensor[(9, 8, 7), uint32] */;
  (%756, %757)
}

def @func_4007(%var_4005: float64, %var_4006: Tensor[(1, 16), float64]) -> Tensor[(1, 16), bool] {
  %760 = fn (%var_3991: float64, %var_3992: Tensor[(1, 16), float64]) -> Tensor[(1, 16), bool] {
    %758 = cast(%var_3991, dtype="bool") /* ty=bool */;
    %759 = cast(%var_3992, dtype="bool") /* ty=Tensor[(1, 16), bool] */;
    less_equal(%758, %759) /* ty=Tensor[(1, 16), bool] */
  };
  %760(%var_4005, %var_4006) /* ty=Tensor[(1, 16), bool] */
}

def @func_5363() -> Tensor[(9, 8, 7), float32] {
  %764 = fn () -> Tensor[(9, 8, 7), float32] {
    %761 = @func_5306() /* ty=(Tensor[(9, 8, 7), float64],) */;
    %762 = %761.0;
    %763 = cast(%762, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
    log(%763) /* ty=Tensor[(9, 8, 7), float32] */
  };
  %764() /* ty=Tensor[(9, 8, 7), float32] */
}

def @func_4688() -> (Tensor[(315), uint16], Tensor[(9, 8, 7), uint32], Tensor[(15, 3, 7), float64]) {
  @func_4686() /* ty=(Tensor[(315), uint16], Tensor[(9, 8, 7), uint32], Tensor[(15, 3, 7), float64]) */
}

def @func_2820() -> Tensor[(9, 8, 7), uint32] {
  @func_2818() /* ty=Tensor[(9, 8, 7), uint32] */
}

def @func_4931(%var_4930: Tensor[(16, 6, 7), float64]) -> (Tensor[(10, 8, 2), float32], Tensor[(16, 6, 7), uint32], Tensor[(9, 8, 7), uint32]) {
  %774 = fn (%var_4902: Tensor[(16, 6, 7), float64]) -> (Tensor[(10, 8, 2), float32], Tensor[(16, 6, 7), uint32], Tensor[(9, 8, 7), uint32]) {
    %765 = cast(%var_4902, dtype="float64") /* ty=Tensor[(16, 6, 7), float64] */;
    %766 = acosh(%765) /* ty=Tensor[(16, 6, 7), float64] */;
    %767 = cast(%var_4902, dtype="uint32") /* ty=Tensor[(16, 6, 7), uint32] */;
    %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
    %769 = cast(%766, dtype="uint32") /* ty=Tensor[(16, 6, 7), uint32] */;
    %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %771 = @func_1581() /* ty=Tensor[(10, 8, 2), float32] */;
    %772 = minimum(%769, %770) /* ty=Tensor[(16, 6, 7), uint32] */;
    %773 = @func_4178() /* ty=Tensor[(9, 8, 7), uint32] */;
    (%771, %772, %773)
  };
  %774(%var_4930) /* ty=(Tensor[(10, 8, 2), float32], Tensor[(16, 6, 7), uint32], Tensor[(9, 8, 7), uint32]) */
}

def @func_4559() -> Tensor[(25, 6), float64] {
  @func_4557() /* ty=Tensor[(25, 6), float64] */
}

def @func_1247(%var_1246: Tensor[(9, 8, 7), float32]) -> (Tensor[(9, 8, 7), bool],) {
  %789 = fn (%var_1237: Tensor[(9, 8, 7), float32]) -> (Tensor[(9, 8, 7), bool],) {
    %775 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %776 = %775.0;
    %777 = @func_1101() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %778 = %777.0;
    %779 = cast(%778, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
    %780 = shape_of(%776, dtype="int32") /* ty=Tensor[(3), int32] */;
    %781 = cast(%776, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
    %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %783 = mod(%781, %782) /* ty=Tensor[(9, 8, 7), float32] */;
    %784 = cast(%var_1237, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
    %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
    %786 = cast(%783, dtype="bool") /* ty=Tensor[(9, 8, 7), bool] */;
    %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %788 = greater(%786, %787) /* ty=Tensor[(9, 8, 7), bool] */;
    (%788,)
  };
  %789(%var_1246) /* ty=(Tensor[(9, 8, 7), bool],) */
}

def @func_1523(%var_1521: Tensor[(234, 2), float64]) -> (Tensor[(15, 3, 7), bool], Tensor[(13, 4, 9), float64], Tensor[(234, 2), float64]) {
  @func_1520(%var_1521) /* ty=(Tensor[(15, 3, 7), bool], Tensor[(13, 4, 9), float64], Tensor[(234, 2), float64]) */
}

def @func_2797() -> Tensor[(10, 8, 2), int16] {
  %795 = fn () -> Tensor[(10, 8, 2), int16] {
    %790 = @func_1581() /* ty=Tensor[(10, 8, 2), float32] */;
    %791 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 8, 2), float32] */, dtype="int16") /* ty=Tensor[(10, 8, 2), int16] */;
    %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(3), int32] */;
    %793 = cast(%790, dtype="int16") /* ty=Tensor[(10, 8, 2), int16] */;
    %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    left_shift(%793, %794) /* ty=Tensor[(10, 8, 2), int16] */
  };
  %795() /* ty=Tensor[(10, 8, 2), int16] */
}

def @func_2855() -> Tensor[(9, 8, 7), uint32] {
  %796 = fn () -> Tensor[(9, 8, 7), uint32] {
    @func_2818() /* ty=Tensor[(9, 8, 7), uint32] */
  };
  %796() /* ty=Tensor[(9, 8, 7), uint32] */
}

def @func_1060(%var_1058: Tensor[(10, 8, 2), float64], %var_1059: Tensor[(10, 8, 2), float32]) -> (Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), bool]) {
  %819 = fn (%var_989: Tensor[(10, 8, 2), float64], %var_1038: Tensor[(10, 8, 2), float32]) -> (Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), bool]) {
    %797 = @func_983() /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), float64], Tensor[(15, 3, 7), bool], Tensor[(315), uint16], Tensor[(13, 4, 9), float64], Tensor[(468), float64]) */;
    %798 = %797.1;
    %799 = cast(%var_989, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
    %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
    %801 = cast(%798, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
    %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %803 = logical_or(%801, %802) /* ty=Tensor[(10, 8, 2), bool] */;
    %804 = cast(%803, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
    %805 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
    %806 = cast(%798, dtype="float64") /* ty=Tensor[(10, 8, 2), float64] */;
    %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %808 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 8, 2), bool] */, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
    %809 = shape_of(%803, dtype="int32") /* ty=Tensor[(3), int32] */;
    %810 = cast(%803, dtype="float32") /* ty=Tensor[(10, 8, 2), float32] */;
    %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %812 = power(%810, %811) /* ty=Tensor[(10, 8, 2), float32] */;
    %813 = cast(%var_1038, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
    %814 = shape_of(%812, dtype="int32") /* ty=Tensor[(3), int32] */;
    %815 = cast(%812, dtype="bool") /* ty=Tensor[(10, 8, 2), bool] */;
    %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %817 = mod(%806, %807) /* ty=Tensor[(10, 8, 2), float64] */;
    %818 = logical_and(%815, %816) /* ty=Tensor[(10, 8, 2), bool] */;
    (%817, %818)
  };
  %819(%var_1058, %var_1059) /* ty=(Tensor[(10, 8, 2), float64], Tensor[(10, 8, 2), bool]) */
}

def @func_1414(%var_1411: Tensor[(9, 8, 7), uint32], %var_1412: Tensor[(25, 6), uint8], %var_1413: Tensor[(80, 2), float64]) -> (Tensor[(?, 63), bool], Tensor[(25, 6), uint8], Tensor[(80, 2), float64], Tensor[(9, 8, 7), float32]) {
  %837 = fn (%var_1381: Tensor[(9, 8, 7), uint32], %var_1391: Tensor[(25, 6), uint8], %var_1392: Tensor[(80, 2), float64]) -> (Tensor[(?, 63), bool], Tensor[(25, 6), uint8], Tensor[(80, 2), float64], Tensor[(9, 8, 7), float32]) {
    %820 = cast(%var_1381, dtype="uint32") /* ty=Tensor[(9, 8, 7), uint32] */;
    %821 = cast(%var_1391, dtype="uint8") /* ty=Tensor[(25, 6), uint8] */;
    %822 = cast(%var_1392, dtype="float64") /* ty=Tensor[(80, 2), float64] */;
    %823 = reshape(%820, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), uint32] */;
    %824 = reshape(%821, newshape=[150]) /* ty=Tensor[(150), uint8] */;
    %825 = reshape(%822, newshape=[160]) /* ty=Tensor[(160), float64] */;
    %826 = @func_1211(%823, %824, %825) /* ty=(Tensor[(9, 8, 7), uint16], Tensor[(150), uint8], Tensor[(?, 63), bool], Tensor[(10, 8, 2), float64], Tensor[(160), float64], Tensor[(10, 8, 2), float64]) */;
    %827 = @func_1135() /* ty=(Tensor[(9, 8, 7), uint32],) */;
    %828 = %827.0;
    %829 = cast(%var_1381, dtype="int8") /* ty=Tensor[(9, 8, 7), int8] */;
    %830 = shape_of(%828, dtype="int32") /* ty=Tensor[(3), int32] */;
    %831 = cast(%828, dtype="int8") /* ty=Tensor[(9, 8, 7), int8] */;
    %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %833 = multiply(%831, %832) /* ty=Tensor[(9, 8, 7), int8] */;
    %834 = cast(%833, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
    %835 = %826.2;
    %836 = erf(%834) /* ty=Tensor[(9, 8, 7), float32] */;
    (%835, %var_1391, %var_1392, %836)
  };
  %837(%var_1411, %var_1412, %var_1413) /* ty=(Tensor[(?, 63), bool], Tensor[(25, 6), uint8], Tensor[(80, 2), float64], Tensor[(9, 8, 7), float32]) */
}

def @main() -> (Tensor[(25, 6), float64],) {
  %838 = @func_4557() /* ty=Tensor[(25, 6), float64] */;
  %839 = cast(%838, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %840 = log(%839) /* ty=Tensor[(25, 6), float64] */;
  (%840,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen115/build/output.py", line 1904, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:50:46] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

