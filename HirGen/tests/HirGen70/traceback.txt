==========mod==========
#[version = "0.0.5"]
def @func_4638() -> (Tensor[(3, 11, 11), float64],) {
  %0 = @func_3231() /* ty=Tensor[(3, 11, 11), float64] */;
  (%0,)
}

def @func_3034() -> Tensor[(3, 11, 11), float64] {
  %1 = @func_2021() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %1.0
}

def @func_4434() -> (Tensor[(7, 14, 16), float32], Tensor[(1, 165), float64]) {
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 14, 16), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
  %3 = acosh(%2) /* ty=Tensor[(7, 14, 16), float32] */;
  %4 = @func_4175() /* ty=Tensor[(1, 165), float64] */;
  (%3, %4)
}

def @func_5680() -> Tensor[(360), float64] {
  %5 = @func_5400() /* ty=(Tensor[(360), float64],) */;
  %5.0
}

def @func_3922(%var_3879: Tensor[(12, 16, 15), float32], %var_3896: Tensor[(165), float32], %var_3897: Tensor[(330), float64]) -> (Tensor[(2, 14, 2), bool], float32, Tensor[(12, 16, 15), int8], Tensor[(5, 66), float64], Tensor[(165), float32], Tensor[(330), float64], Tensor[(12, 16, 15), float64], Tensor[(3, 11, 11), float64]) {
  %6 = cast(-2.27391f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %7 = reshape(%6, newshape=[]) /* ty=float32 */;
  %8 = @func_3687(%7) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(2, 14, 2), bool], Tensor[(56), uint64], Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(330), float64], Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(3, 11, 11), bool], Tensor[(2, 9, 4), int8], Tensor[(6, 12), int8], Tensor[(5, 66), float32]) */;
  %9 = @func_3561() /* ty=(Tensor[(12, 16, 15), float32],) */;
  %10 = %9.0;
  %11 = cast(%var_3879, dtype="bool") /* ty=Tensor[(12, 16, 15), bool] */;
  %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%10, dtype="bool") /* ty=Tensor[(12, 16, 15), bool] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %15 = not_equal(%13, %14) /* ty=Tensor[(12, 16, 15), bool] */;
  %16 = cast(%10, dtype="int8") /* ty=Tensor[(12, 16, 15), int8] */;
  %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%15, dtype="int8") /* ty=Tensor[(12, 16, 15), int8] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %20 = cast(%var_3896, dtype="float32") /* ty=Tensor[(165), float32] */;
  %21 = cast(%var_3897, dtype="float64") /* ty=Tensor[(330), float64] */;
  %22 = reshape(%20, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %23 = reshape(%21, newshape=[5, 66]) /* ty=Tensor[(5, 66), float64] */;
  %24 = @func_2169(%22, %23) /* ty=(Tensor[(3, 11, 11), float32], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(15, 2, 11), float64], Tensor[(5, 66), float64]) */;
  %25 = cast(%var_3879, dtype="float64") /* ty=Tensor[(12, 16, 15), float64] */;
  %26 = %8.3;
  %27 = bitwise_xor(%18, %19) /* ty=Tensor[(12, 16, 15), int8] */;
  %28 = %24.5;
  %29 = erf(%25) /* ty=Tensor[(12, 16, 15), float64] */;
  %30 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
  (%26, -2.27391f /* ty=float32 */, %27, %28, %var_3896, %var_3897, %29, %30)
}

def @func_5754(%var_5740: Tensor[(7, 165), float64]) -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(7, 165), uint32], Tensor[(33, 5), float64]) {
  %31 = @func_5525() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %32 = @func_4727() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %33 = @func_4175() /* ty=Tensor[(1, 165), float64] */;
  %34 = cast(%33, dtype="uint32") /* ty=Tensor[(1, 165), uint32] */;
  %35 = cast(%var_5740, dtype="uint32") /* ty=Tensor[(7, 165), uint32] */;
  %36 = cast(%33, dtype="float32") /* ty=Tensor[(1, 165), float32] */;
  %37 = reshape(%36, newshape=[33, 5]) /* ty=Tensor[(33, 5), float32] */;
  %38 = @func_3766(%37) /* ty=(Tensor[(33, 5), float64],) */;
  %39 = %31.0;
  %40 = %32.0;
  %41 = left_shift(%34, %35) /* ty=Tensor[(7, 165), uint32] */;
  %42 = %38.0;
  (%39, %40, %41, %42)
}

def @func_2091() -> (Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) {
  %43 = @func_2021() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %44 = cast(meta[relay.Constant][1] /* ty=Tensor[(33, 5), float32] */, dtype="float32") /* ty=Tensor[(33, 5), float32] */;
  %45 = reshape(%44, newshape=[1, 165]) /* ty=Tensor[(1, 165), float32] */;
  %46 = @func_1604(%45) /* ty=(Tensor[(7, 15, 8), int16], Tensor[(1, 165), float32], Tensor[(?, 6, 3), int64]) */;
  %47 = %43.0;
  %48 = %46.1;
  (%47, %48, meta[relay.Constant][1] /* ty=Tensor[(33, 5), float32] */)
}

def @func_3154(%var_3119: float32) -> (Tensor[(3, 11, 11), float32], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 165), float32]) {
  %49 = @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %50 = %49.0;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %52 = cast(%var_3119, dtype="float32") /* ty=float32 */;
  %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %54 = reshape(%52, newshape=[]) /* ty=float32 */;
  %55 = reshape(%53, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %56 = @func_2380(%54, %55) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32]) */;
  %57 = cast(meta[relay.Constant][2] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %58 = reshape(%57, newshape=[1, 165]) /* ty=Tensor[(1, 165), float32] */;
  %59 = @func_1604(%58) /* ty=(Tensor[(7, 15, 8), int16], Tensor[(1, 165), float32], Tensor[(?, 6, 3), int64]) */;
  %60 = log2(%51) /* ty=Tensor[(3, 11, 11), float32] */;
  %61 = %56.3;
  %62 = %59.1;
  (%60, %61, %var_3119, meta[relay.Constant][2] /* ty=Tensor[(165), float32] */, %62)
}

def @func_2414() -> Tensor[(3, 11, 11), float64] {
  @func_1997() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_6088() -> (Tensor[(3, 11, 11), float64],) {
  %63 = @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %64 = %63.0;
  (%64,)
}

def @func_2393() -> Tensor[(3, 11, 11), float64] {
  @func_1997() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_2169(%var_2149: Tensor[(165), float32], %var_2163: Tensor[(5, 66), float64]) -> (Tensor[(3, 11, 11), float32], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(15, 2, 11), float64], Tensor[(5, 66), float64]) {
  %65 = @func_2021() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %66 = %65.0;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %68 = cast(4.3404f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %69 = cast(%var_2149, dtype="float32") /* ty=Tensor[(165), float32] */;
  %70 = reshape(%68, newshape=[]) /* ty=float32 */;
  %71 = reshape(%69, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %72 = @func_870(%70, %71) /* ty=(Tensor[(2, 7, 7), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32]) */;
  %73 = cast(%var_2163, dtype="float64") /* ty=Tensor[(5, 66), float64] */;
  %74 = reshape(%73, newshape=[15, 2, 11]) /* ty=Tensor[(15, 2, 11), float64] */;
  %75 = @func_1966(%74) /* ty=(Tensor[(15, 2, 11), float64],) */;
  %76 = atan(%67) /* ty=Tensor[(3, 11, 11), float32] */;
  %77 = %72.1;
  %78 = %75.0;
  (%76, %77, 4.3404f /* ty=float32 */, %var_2149, %78, %var_2163)
}

def @func_2540(%var_2518: int8, %var_2519: Tensor[(36, 2), int8]) -> (Tensor[(3, 11, 11), float64], int8, Tensor[(36, 2), int8], Tensor[(2, 9, 4), float32]) {
  %79 = @func_2091() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) */;
  %80 = cast(%var_2518, dtype="int8") /* ty=int8 */;
  %81 = cast(%var_2519, dtype="int8") /* ty=Tensor[(36, 2), int8] */;
  %82 = reshape(%80, newshape=[]) /* ty=int8 */;
  %83 = reshape(%81, newshape=[2, 9, 4]) /* ty=Tensor[(2, 9, 4), int8] */;
  %84 = @func_2049(%82, %83) /* ty=(Tensor[(2, 9, 4), int8],) */;
  %85 = %84.0;
  %86 = cast(%85, dtype="float32") /* ty=Tensor[(2, 9, 4), float32] */;
  %87 = %79.0;
  %88 = log(%86) /* ty=Tensor[(2, 9, 4), float32] */;
  (%87, %var_2518, %var_2519, %88)
}

def @func_4937() -> (Tensor[(3, 11, 11), int8],) {
  %89 = @func_4881() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), int8]) */;
  %90 = %89.1;
  (%90,)
}

def @func_128(%var_122: float64) -> (Tensor[(1, 6, 3), float64],) {
  %91 = cast(%var_122, dtype="float64") /* ty=float64 */;
  %92 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 6, 3), float64] */, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
  %93 = floor_mod(%91, %92) /* ty=Tensor[(1, 6, 3), float64] */;
  (%93,)
}

def @func_5102() -> (Tensor[(12, 16, 15), float32], Tensor[(360), float64], Tensor[(11, 3, 11), int16], Tensor[(11, 3, 11), float32]) {
  %94 = @func_4368() /* ty=(Tensor[(3, 165), float32], Tensor[(360), float64], Tensor[(3, 11, 11), float64]) */;
  %95 = @func_4274() /* ty=Tensor[(11, 3, 11), float32] */;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(11, 3, 11), float32] */;
  %97 = log(%96) /* ty=Tensor[(11, 3, 11), float32] */;
  %98 = cast(%97, dtype="float64") /* ty=Tensor[(11, 3, 11), float64] */;
  %99 = erf(%98) /* ty=Tensor[(11, 3, 11), float64] */;
  %100 = cast(%97, dtype="int16") /* ty=Tensor[(11, 3, 11), int16] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%99, dtype="int16") /* ty=Tensor[(11, 3, 11), int16] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %104 = @func_4392() /* ty=Tensor[(12, 16, 15), float32] */;
  %105 = %94.1;
  %106 = bitwise_and(%102, %103) /* ty=Tensor[(11, 3, 11), int16] */;
  %107 = @func_4274() /* ty=Tensor[(11, 3, 11), float32] */;
  (%104, %105, %106, %107)
}

def @func_3535(%var_3517: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), bool], Tensor[(3, 11, 11), bool]) {
  %108 = @func_2393() /* ty=Tensor[(3, 11, 11), float64] */;
  %109 = cast(%var_3517, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%108, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %113 = cast(%108, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %114 = shape_of(%var_3517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%var_3517, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %117 = logical_or(%111, %112) /* ty=Tensor[(3, 11, 11), bool] */;
  %118 = less_equal(%115, %116) /* ty=Tensor[(3, 11, 11), bool] */;
  (%117, %118)
}

def @func_4727() -> (Tensor[(3, 11, 11), float64],) {
  %119 = @func_3501() /* ty=Tensor[(3, 11, 11), float64] */;
  (%119,)
}

def @func_1966(%var_1960: Tensor[(15, 2, 11), float64]) -> (Tensor[(15, 2, 11), float64],) {
  %120 = cast(%var_1960, dtype="float64") /* ty=Tensor[(15, 2, 11), float64] */;
  %121 = sinh(%120) /* ty=Tensor[(15, 2, 11), float64] */;
  (%121,)
}

def @func_3834(%var_3821: Tensor[(15, 3, 8), float64]) -> (Tensor[(3, 11, 11), float64], Tensor[(15, 3, 8), float64]) {
  %122 = cast(%var_3821, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %123 = rsqrt(%122) /* ty=Tensor[(15, 3, 8), float64] */;
  %124 = cast(%123, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
  %125 = @func_3501() /* ty=Tensor[(3, 11, 11), float64] */;
  %126 = log(%124) /* ty=Tensor[(15, 3, 8), float64] */;
  (%125, %126)
}

def @func_3468(%var_3390: Tensor[(10, 11, 12), float64], %var_3431: Tensor[(7, 6, 3), float64], %var_3462: Tensor[(10, 11, 12), float64]) -> (Tensor[(10, 11, 12), float64], Tensor[(165), float32], Tensor[(7, 6, 3), int8], Tensor[(3, 11, 11), float64], Tensor[(1, 6, 3), float64], float64, Tensor[(10, 11, 12), int64]) {
  %127 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
  %128 = shape_of(%var_3390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%var_3390, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %131 = cast(meta[relay.Constant][5] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %132 = reshape(%131, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %133 = @func_2467(%132) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 6, 3), float64], Tensor[(1755), float64], Tensor[(3, 11, 11), float32]) */;
  %134 = %133.4;
  %135 = cast(%134, dtype="int8") /* ty=Tensor[(1, 6, 3), int8] */;
  %136 = cast(%var_3431, dtype="int8") /* ty=Tensor[(7, 6, 3), int8] */;
  %137 = cast(8.22495f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %138 = reshape(%137, newshape=[]) /* ty=float64 */;
  %139 = @func_128(%138) /* ty=(Tensor[(1, 6, 3), float64],) */;
  %140 = cast(%var_3462, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
  %141 = shape_of(%var_3390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%var_3390, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %144 = floor_divide(%129, %130) /* ty=Tensor[(10, 11, 12), float64] */;
  %145 = bitwise_xor(%135, %136) /* ty=Tensor[(7, 6, 3), int8] */;
  %146 = @func_1997() /* ty=Tensor[(3, 11, 11), float64] */;
  %147 = %139.0;
  %148 = bitwise_or(%142, %143) /* ty=Tensor[(10, 11, 12), int64] */;
  (%144, meta[relay.Constant][5] /* ty=Tensor[(165), float32] */, %145, %146, %147, 8.22495f64 /* ty=float64 */, %148)
}

def @func_4034() -> Tensor[(3, 11, 11), int32] {
  %149 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
  %150 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 11, 11), float64] */, dtype="int32") /* ty=Tensor[(3, 11, 11), int32] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="int32") /* ty=Tensor[(3, 11, 11), int32] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  logical_xor(%152, %153) /* ty=Tensor[(3, 11, 11), int32] */
}

def @func_5216(%var_5181: Tensor[(8, 60), float32], %var_5182: Tensor[(15, 117), float64], %var_5191: Tensor[(15, 117), float64]) -> (Tensor[(3, 11, 11), float32], Tensor[(3, 11, 11), float64], Tensor[(12, 16, 15), float32], Tensor[(165), float32], Tensor[(8, 60), float32], Tensor[(15, 117), int64], Tensor[(3, 11, 11), uint8], Tensor[(1, 165), float64]) {
  %154 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
  %155 = cast(%154, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %156 = reshape(%155, newshape=[3, 11, 11]) /* ty=Tensor[(3, 11, 11), float64] */;
  %157 = @func_2931(%156) /* ty=(Tensor[(3, 11, 11), float32],) */;
  %158 = cast(%154, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %159 = acos(%158) /* ty=Tensor[(3, 11, 11), float32] */;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %161 = cast(%var_5181, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %162 = cast(%var_5182, dtype="float64") /* ty=Tensor[(15, 117), float64] */;
  %163 = cast(%var_5181, dtype="bool") /* ty=Tensor[(8, 60), bool] */;
  %164 = reshape(%161, newshape=[16, 15, 2]) /* ty=Tensor[(16, 15, 2), float32] */;
  %165 = reshape(%162, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
  %166 = reshape(%163, newshape=[16, 15, 2]) /* ty=Tensor[(16, 15, 2), bool] */;
  %167 = @func_1492(%164, %165, %166) /* ty=(Tensor[(252), uint64], float64, Tensor[(1755), float64], Tensor[(1, 6, 3), float64], Tensor[(11, 5, 3), bool], Tensor[(165), float32], Tensor[(13, 15, 9), bool], Tensor[(16, 15, 2), float64], Tensor[(16, 15, 2), float64]) */;
  %168 = cast(%var_5191, dtype="int64") /* ty=Tensor[(15, 117), int64] */;
  %169 = shape_of(%var_5182, dtype="int32") /* ty=Tensor[(2), int32] */;
  %170 = cast(%var_5182, dtype="int64") /* ty=Tensor[(15, 117), int64] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %172 = cast(%154, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %173 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%159, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %176 = @func_2758() /* ty=Tensor[(1, 165), float32] */;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(1, 165), float64] */;
  %178 = asin(%177) /* ty=Tensor[(1, 165), float64] */;
  %179 = cast(%178, dtype="float64") /* ty=Tensor[(1, 165), float64] */;
  %180 = %157.0;
  %181 = sqrt(%160) /* ty=Tensor[(3, 11, 11), float64] */;
  %182 = @func_2764() /* ty=Tensor[(12, 16, 15), float32] */;
  %183 = %167.5;
  %184 = left_shift(%170, %171) /* ty=Tensor[(15, 117), int64] */;
  %185 = multiply(%174, %175) /* ty=Tensor[(3, 11, 11), uint8] */;
  %186 = atanh(%179) /* ty=Tensor[(1, 165), float64] */;
  (%180, %181, %182, %183, %var_5181, %184, %185, %186)
}

def @func_5848(%var_5829: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), bool], Tensor[(8, 3, 7), uint16], Tensor[(168), uint16]) {
  %187 = @func_4727() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %188 = %187.0;
  %189 = cast(%var_5829, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%188, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %193 = cast(meta[relay.Constant][7] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %194 = cast(meta[relay.Constant][7] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %195 = reshape(%193, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), uint16] */;
  %196 = reshape(%194, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), uint16] */;
  %197 = greater(%191, %192) /* ty=Tensor[(3, 11, 11), bool] */;
  %198 = @func_4736(%195, %196) /* ty=Tensor[(8, 3, 7), uint16] */;
  (%197, %198, meta[relay.Constant][7] /* ty=Tensor[(168), uint16] */)
}

def @func_870(%var_866: float32, %var_867: Tensor[(165), float32]) -> (Tensor[(2, 7, 7), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32]) {
  %199 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 7, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 7, 7), float64] */;
  %200 = asinh(%199) /* ty=Tensor[(2, 7, 7), float64] */;
  %201 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 7, 7), float64] */, dtype="bool") /* ty=Tensor[(2, 7, 7), bool] */;
  %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%200, dtype="bool") /* ty=Tensor[(2, 7, 7), bool] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %205 = greater_equal(%203, %204) /* ty=Tensor[(2, 7, 7), bool] */;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(2, 7, 7), float64] */;
  %207 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%200, dtype="float64") /* ty=Tensor[(2, 7, 7), float64] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %210 = cast(%var_866, dtype="float32") /* ty=float32 */;
  %211 = cast(%var_867, dtype="float32") /* ty=Tensor[(165), float32] */;
  %212 = reshape(%210, newshape=[]) /* ty=float32 */;
  %213 = reshape(%211, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
  %214 = @func_307(%212, %213) /* ty=(Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) */;
  %215 = floor_mod(%208, %209) /* ty=Tensor[(2, 7, 7), float64] */;
  %216 = %214.3;
  (%215, %216, %var_866, %var_867)
}

def @func_4616() -> Tensor[(12, 16, 15), float32] {
  %217 = @func_2764() /* ty=Tensor[(12, 16, 15), float32] */;
  %218 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 16, 15), float32] */, dtype="float64") /* ty=Tensor[(12, 16, 15), float64] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="float64") /* ty=Tensor[(12, 16, 15), float64] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %222 = floor_divide(%220, %221) /* ty=Tensor[(12, 16, 15), float64] */;
  %223 = cast(%222, dtype="float32") /* ty=Tensor[(12, 16, 15), float32] */;
  log(%223) /* ty=Tensor[(12, 16, 15), float32] */
}

def @func_4082() -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(360), float64], Tensor[(3, 11, 11), uint8]) {
  %224 = @func_2021() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %225 = cast(meta[relay.Constant][10] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %226 = reshape(%225, newshape=[15, 3, 8]) /* ty=Tensor[(15, 3, 8), float64] */;
  %227 = @func_3834(%226) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(15, 3, 8), float64]) */;
  %228 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
  %229 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 11, 11), float64] */, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%228, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %233 = mod(%231, %232) /* ty=Tensor[(3, 11, 11), float32] */;
  %234 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 11, 11), float64] */, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%233, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %238 = %224.0;
  %239 = %227.0;
  %240 = add(%236, %237) /* ty=Tensor[(3, 11, 11), uint8] */;
  (%238, %239, meta[relay.Constant][10] /* ty=Tensor[(360), float64] */, %240)
}

def @func_2380(%var_2377: float32, %var_2378: Tensor[(165), float32]) -> (Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32]) {
  %241 = @func_1997() /* ty=Tensor[(3, 11, 11), float64] */;
  %242 = cast(%241, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %243 = cast(%var_2377, dtype="float32") /* ty=float32 */;
  %244 = cast(%var_2378, dtype="float32") /* ty=Tensor[(165), float32] */;
  %245 = reshape(%243, newshape=[]) /* ty=float32 */;
  %246 = reshape(%244, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %247 = @func_870(%245, %246) /* ty=(Tensor[(2, 7, 7), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32]) */;
  %248 = log10(%242) /* ty=Tensor[(3, 11, 11), float64] */;
  %249 = %247.3;
  (%248, %249, %var_2377, %var_2378)
}

def @func_4544() -> Tensor[(3, 11, 11), int32] {
  %250 = @func_4530() /* ty=(Tensor[(3, 11, 11), int32],) */;
  %250.0
}

def @func_5014() -> (Tensor[(360), float64],) {
  %251 = @func_4902() /* ty=(Tensor[(360), float64],) */;
  %252 = %251.0;
  (%252,)
}

def @func_5130() -> Tensor[(3, 11, 11), float64] {
  %253 = @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %253.0
}

def @func_4736(%var_4731: Tensor[(8, 3, 7), uint16], %var_4732: Tensor[(8, 3, 7), uint16]) -> Tensor[(8, 3, 7), uint16] {
  %254 = cast(%var_4732, dtype="uint16") /* ty=Tensor[(8, 3, 7), uint16] */;
  %255 = shape_of(%var_4731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%var_4731, dtype="uint16") /* ty=Tensor[(8, 3, 7), uint16] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  maximum(%256, %257) /* ty=Tensor[(8, 3, 7), uint16] */
}

def @func_4175() -> Tensor[(1, 165), float64] {
  %258 = @func_4118() /* ty=(Tensor[(1, 165), float64],) */;
  %258.0
}

def @main(%var_6174: Tensor[(4, 9, 15), float32]) -> (Tensor[(4, 9, 15), float32],) {
  %259 = cast(%var_6174, dtype="float32") /* ty=Tensor[(4, 9, 15), float32] */;
  %260 = asin(%259) /* ty=Tensor[(4, 9, 15), float32] */;
  (%260,)
}

def @func_6016(%var_6001: Tensor[(165), float32]) -> (Tensor[(360), float64], Tensor[(3, 11, 11), float32], Tensor[(165), float32], Tensor[(12, 16, 15), float32]) {
  %261 = cast(%var_6001, dtype="float32") /* ty=Tensor[(165), float32] */;
  %262 = reshape(%261, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %263 = @func_2467(%262) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 6, 3), float64], Tensor[(1755), float64], Tensor[(3, 11, 11), float32]) */;
  %264 = @func_5680() /* ty=Tensor[(360), float64] */;
  %265 = %263.6;
  %266 = @func_4616() /* ty=Tensor[(12, 16, 15), float32] */;
  (%264, %265, %var_6001, %266)
}

def @func_4190() -> Tensor[(11, 3, 11), float32] {
  %267 = cast(meta[relay.Constant][12] /* ty=Tensor[(11, 3, 11), float32] */, dtype="float32") /* ty=Tensor[(11, 3, 11), float32] */;
  atan(%267) /* ty=Tensor[(11, 3, 11), float32] */
}

def @func_4413() -> (Tensor[(3, 11, 11), float64],) {
  %268 = @func_4082() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(360), float64], Tensor[(3, 11, 11), uint8]) */;
  %269 = %268.0;
  (%269,)
}

def @func_1743(%var_1680: Tensor[(2, 14, 2), uint64], %var_1681: Tensor[(2, 14, 2), uint64], %var_1699: Tensor[(2, 14, 2), uint64]) -> (Tensor[(2, 14, 2), bool], Tensor[(2, 14, 2), bool], Tensor[(13, 15, 9), bool], Tensor[(?, 1755), bool]) {
  %270 = cast(%var_1681, dtype="bool") /* ty=Tensor[(2, 14, 2), bool] */;
  %271 = shape_of(%var_1680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%var_1680, dtype="bool") /* ty=Tensor[(2, 14, 2), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %274 = cast(%var_1699, dtype="bool") /* ty=Tensor[(2, 14, 2), bool] */;
  %275 = shape_of(%var_1680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%var_1680, dtype="bool") /* ty=Tensor[(2, 14, 2), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %278 = cast(0.952312f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %279 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 1755), float64] */, dtype="float64") /* ty=Tensor[(1, 1755), float64] */;
  %280 = reshape(%278, newshape=[]) /* ty=float64 */;
  %281 = reshape(%279, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float64] */;
  %282 = @func_1295(%280, %281) /* ty=(Tensor[(13, 15, 9), bool], Tensor[(1, 6, 3), float64], Tensor[(252), uint64], Tensor[(165), float32]) */;
  %283 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 1755), float64] */, dtype="bool") /* ty=Tensor[(1, 1755), bool] */;
  %284 = cast(0.952312f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %285 = greater(%283, %284) /* ty=Tensor[(1, 1755), bool] */;
  %286 = cast(%285, dtype="float64") /* ty=Tensor[(1, 1755), float64] */;
  %287 = sin(%286) /* ty=Tensor[(1, 1755), float64] */;
  %288 = cast(%287, dtype="bool") /* ty=Tensor[(1, 1755), bool] */;
  %289 = cast(0.952312f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %290 = not_equal(%288, %289) /* ty=Tensor[(1, 1755), bool] */;
  %291 = cast(%290, dtype="bool") /* ty=Tensor[(1, 1755), bool] */;
  %292 = shape_of(%287, dtype="int32") /* ty=Tensor[(2), int32] */;
  %293 = cast(%287, dtype="bool") /* ty=Tensor[(1, 1755), bool] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %295 = less_equal(%272, %273) /* ty=Tensor[(2, 14, 2), bool] */;
  %296 = less(%276, %277) /* ty=Tensor[(2, 14, 2), bool] */;
  %297 = %282.0;
  %298 = logical_and(%293, %294) /* ty=Tensor[(?, 1755), bool] */;
  (%295, %296, %297, %298)
}

def @func_4881() -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), int8]) {
  %299 = @func_2854() /* ty=(Tensor[(12, 16, 15), float32], Tensor[(3, 11, 11), float64]) */;
  %300 = @func_2091() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) */;
  %301 = %300.0;
  %302 = @func_3231() /* ty=Tensor[(3, 11, 11), float64] */;
  %303 = cast(%302, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %304 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%301, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %307 = divide(%305, %306) /* ty=Tensor[(3, 11, 11), float32] */;
  %308 = cast(%307, dtype="int8") /* ty=Tensor[(3, 11, 11), int8] */;
  %309 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%301, dtype="int8") /* ty=Tensor[(3, 11, 11), int8] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %312 = %299.1;
  %313 = bitwise_or(%310, %311) /* ty=Tensor[(3, 11, 11), int8] */;
  (%312, %313)
}

def @func_2126() -> Tensor[(3, 165), float32] {
  %314 = @func_2091() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) */;
  %315 = %314.1;
  %316 = cast(%315, dtype="int64") /* ty=Tensor[(1, 165), int64] */;
  %317 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 165), float32] */, dtype="int64") /* ty=Tensor[(3, 165), int64] */;
  %318 = logical_xor(%316, %317) /* ty=Tensor[(3, 165), int64] */;
  %319 = cast(%318, dtype="float32") /* ty=Tensor[(3, 165), float32] */;
  log10(%319) /* ty=Tensor[(3, 165), float32] */
}

def @func_4902() -> (Tensor[(360), float64],) {
  %320 = @func_4368() /* ty=(Tensor[(3, 165), float32], Tensor[(360), float64], Tensor[(3, 11, 11), float64]) */;
  %321 = %320.1;
  (%321,)
}

def @func_3862() -> (Tensor[(3, 165), float32],) {
  %322 = @func_2126() /* ty=Tensor[(3, 165), float32] */;
  (%322,)
}

def @func_5036() -> (Tensor[(360), float64],) {
  %323 = @func_4902() /* ty=(Tensor[(360), float64],) */;
  %324 = %323.0;
  (%324,)
}

def @func_5487() -> Tensor[(3, 11, 11), float64] {
  @func_2393() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_6050() -> Tensor[(3, 11, 11), float64] {
  @func_3231() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_4368() -> (Tensor[(3, 165), float32], Tensor[(360), float64], Tensor[(3, 11, 11), float64]) {
  %325 = @func_4303() /* ty=(Tensor[(360), float64],) */;
  %326 = @func_2854() /* ty=(Tensor[(12, 16, 15), float32], Tensor[(3, 11, 11), float64]) */;
  %327 = @func_2126() /* ty=Tensor[(3, 165), float32] */;
  %328 = %325.0;
  %329 = %326.1;
  (%327, %328, %329)
}

def @func_307(%var_260: float32, %var_261: Tensor[(11, 5, 3), float32]) -> (Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) {
  %330 = cast(%var_260, dtype="bool") /* ty=bool */;
  %331 = cast(%var_261, dtype="bool") /* ty=Tensor[(11, 5, 3), bool] */;
  %332 = cast(%var_260, dtype="float64") /* ty=float64 */;
  %333 = reshape(%332, newshape=[]) /* ty=float64 */;
  %334 = @func_128(%333) /* ty=(Tensor[(1, 6, 3), float64],) */;
  %335 = cast(%var_260, dtype="float64") /* ty=float64 */;
  %336 = reshape(%335, newshape=[]) /* ty=float64 */;
  %337 = @func_128(%336) /* ty=(Tensor[(1, 6, 3), float64],) */;
  %338 = cast(%var_260, dtype="float64") /* ty=float64 */;
  %339 = reshape(%338, newshape=[]) /* ty=float64 */;
  %340 = @func_128(%339) /* ty=(Tensor[(1, 6, 3), float64],) */;
  %341 = less(%330, %331) /* ty=Tensor[(11, 5, 3), bool] */;
  %342 = %334.0;
  %343 = %337.0;
  %344 = %340.0;
  (%341, %342, %343, %344)
}

def @func_2021() -> (Tensor[(3, 11, 11), float64],) {
  %345 = @func_1997() /* ty=Tensor[(3, 11, 11), float64] */;
  (%345,)
}

def @func_2854() -> (Tensor[(12, 16, 15), float32], Tensor[(3, 11, 11), float64]) {
  %346 = @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %347 = %346.0;
  %348 = cast(%347, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %349 = @func_2764() /* ty=Tensor[(12, 16, 15), float32] */;
  %350 = asinh(%348) /* ty=Tensor[(3, 11, 11), float64] */;
  (%349, %350)
}

def @func_2834(%var_2782: Tensor[(3, 11, 11), float64], %var_2791: float32, %var_2792: Tensor[(165), float32]) -> (Tensor[(3, 11, 11), bool], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(3, 11, 11), float64]) {
  %351 = @func_2021() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %352 = %351.0;
  %353 = cast(%var_2782, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%352, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %357 = cast(%var_2791, dtype="float32") /* ty=float32 */;
  %358 = cast(%var_2792, dtype="float32") /* ty=Tensor[(165), float32] */;
  %359 = reshape(%357, newshape=[]) /* ty=float32 */;
  %360 = reshape(%358, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
  %361 = @func_307(%359, %360) /* ty=(Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) */;
  %362 = cast(%var_2782, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %363 = sigmoid(%362) /* ty=Tensor[(3, 11, 11), float64] */;
  %364 = cast(%363, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %365 = less(%355, %356) /* ty=Tensor[(3, 11, 11), bool] */;
  %366 = %361.2;
  %367 = cosh(%364) /* ty=Tensor[(3, 11, 11), float64] */;
  (%365, %366, %var_2791, %var_2792, %367)
}

def @func_2668(%var_2662: Tensor[(165), float32]) -> (Tensor[(3, 11, 11), uint8], Tensor[(?, 6, 3), int64], Tensor[(165), float32]) {
  %368 = @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %369 = %368.0;
  %370 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 11, 11), float64] */, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %371 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %372 = cast(%369, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %373 = dyn.reshape(%370, %371, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %374 = cast(%var_2662, dtype="float32") /* ty=Tensor[(165), float32] */;
  %375 = reshape(%374, newshape=[1, 165]) /* ty=Tensor[(1, 165), float32] */;
  %376 = @func_1604(%375) /* ty=(Tensor[(7, 15, 8), int16], Tensor[(1, 165), float32], Tensor[(?, 6, 3), int64]) */;
  %377 = subtract(%372, %373) /* ty=Tensor[(3, 11, 11), uint8] */;
  %378 = %376.2;
  (%377, %378, %var_2662)
}

def @func_5625() -> (Tensor[(1, 165), float64], Tensor[(3, 11, 11), int8]) {
  %379 = @func_4937() /* ty=(Tensor[(3, 11, 11), int8],) */;
  %380 = @func_4175() /* ty=Tensor[(1, 165), float64] */;
  %381 = %379.0;
  (%380, %381)
}

def @func_3052(%var_3044: Tensor[(9, 16, 11), float64]) -> Tensor[(9, 16, 11), float64] {
  %382 = cast(%var_3044, dtype="float64") /* ty=Tensor[(9, 16, 11), float64] */;
  %383 = log10(%382) /* ty=Tensor[(9, 16, 11), float64] */;
  %384 = cast(%var_3044, dtype="float64") /* ty=Tensor[(9, 16, 11), float64] */;
  %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%383, dtype="float64") /* ty=Tensor[(9, 16, 11), float64] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%386, %387) /* ty=Tensor[(9, 16, 11), float64] */
}

def @func_5422(%var_5417: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), int16],) {
  %388 = @func_2854() /* ty=(Tensor[(12, 16, 15), float32], Tensor[(3, 11, 11), float64]) */;
  %389 = %388.1;
  %390 = cast(%var_5417, dtype="int16") /* ty=Tensor[(3, 11, 11), int16] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%389, dtype="int16") /* ty=Tensor[(3, 11, 11), int16] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %394 = right_shift(%392, %393) /* ty=Tensor[(3, 11, 11), int16] */;
  (%394,)
}

def @func_5333() -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float32], Tensor[(3, 11, 11), int8]) {
  %395 = @func_4638() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %396 = %395.0;
  %397 = cast(%396, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %398 = cast(%396, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %399 = @func_4937() /* ty=(Tensor[(3, 11, 11), int8],) */;
  %400 = sinh(%397) /* ty=Tensor[(3, 11, 11), float64] */;
  %401 = log(%398) /* ty=Tensor[(3, 11, 11), float32] */;
  %402 = %399.0;
  (%400, %401, %402)
}

def @func_4303() -> (Tensor[(360), float64],) {
  %403 = @func_4082() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(360), float64], Tensor[(3, 11, 11), uint8]) */;
  %404 = %403.2;
  (%404,)
}

def @func_5525() -> (Tensor[(3, 11, 11), float64],) {
  %405 = @func_2021() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %406 = %405.0;
  (%406,)
}

def @func_4530() -> (Tensor[(3, 11, 11), int32],) {
  %407 = @func_4034() /* ty=Tensor[(3, 11, 11), int32] */;
  (%407,)
}

def @func_6124() -> (Tensor[(3, 11, 11), uint8],) {
  %408 = @func_4082() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(360), float64], Tensor[(3, 11, 11), uint8]) */;
  %409 = %408.3;
  (%409,)
}

def @func_2931(%var_2920: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), float32],) {
  %410 = @func_1997() /* ty=Tensor[(3, 11, 11), float64] */;
  %411 = cast(%var_2920, dtype="uint32") /* ty=Tensor[(3, 11, 11), uint32] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="uint32") /* ty=Tensor[(3, 11, 11), uint32] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %415 = bitwise_xor(%413, %414) /* ty=Tensor[(3, 11, 11), uint32] */;
  %416 = cast(%415, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %417 = acosh(%416) /* ty=Tensor[(3, 11, 11), float32] */;
  (%417,)
}

def @func_1295(%var_1257: float64, %var_1258: Tensor[(13, 15, 9), float64]) -> (Tensor[(13, 15, 9), bool], Tensor[(1, 6, 3), float64], Tensor[(252), uint64], Tensor[(165), float32]) {
  %418 = cast(%var_1257, dtype="bool") /* ty=bool */;
  %419 = cast(%var_1258, dtype="bool") /* ty=Tensor[(13, 15, 9), bool] */;
  %420 = cast(%var_1257, dtype="float64") /* ty=float64 */;
  %421 = reshape(%420, newshape=[]) /* ty=float64 */;
  %422 = @func_128(%421) /* ty=(Tensor[(1, 6, 3), float64],) */;
  %423 = cast(meta[relay.Constant][16] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %424 = reshape(%423, newshape=[1, 165]) /* ty=Tensor[(1, 165), float32] */;
  %425 = @func_1250(%424) /* ty=(Tensor[(14, 10, 8), float32], Tensor[(1, 6, 3), float64], Tensor[(1, 165), float32], Tensor[(252), uint64], Tensor[(7, 3, 12), float32]) */;
  %426 = greater_equal(%418, %419) /* ty=Tensor[(13, 15, 9), bool] */;
  %427 = %422.0;
  %428 = %425.3;
  (%426, %427, %428, meta[relay.Constant][16] /* ty=Tensor[(165), float32] */)
}

def @func_2467(%var_2440: Tensor[(165), float32]) -> (Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 6, 3), float64], Tensor[(1755), float64], Tensor[(3, 11, 11), float32]) {
  %429 = cast(4.21793f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %430 = cast(%var_2440, dtype="float32") /* ty=Tensor[(165), float32] */;
  %431 = reshape(%429, newshape=[]) /* ty=float32 */;
  %432 = reshape(%430, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %433 = @func_870(%431, %432) /* ty=(Tensor[(2, 7, 7), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32]) */;
  %434 = cast(4.21793f /* ty=float32 */, dtype="float64") /* ty=float64 */;
  %435 = cast(meta[relay.Constant][17] /* ty=Tensor[(1755), float64] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %436 = reshape(%434, newshape=[]) /* ty=float64 */;
  %437 = reshape(%435, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float64] */;
  %438 = @func_1295(%436, %437) /* ty=(Tensor[(13, 15, 9), bool], Tensor[(1, 6, 3), float64], Tensor[(252), uint64], Tensor[(165), float32]) */;
  %439 = @func_2393() /* ty=Tensor[(3, 11, 11), float64] */;
  %440 = cast(%439, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %441 = atanh(%440) /* ty=Tensor[(3, 11, 11), float64] */;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %443 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
  %444 = %433.3;
  %445 = %438.1;
  %446 = exp(%442) /* ty=Tensor[(3, 11, 11), float32] */;
  (%443, %444, 4.21793f /* ty=float32 */, %var_2440, %445, meta[relay.Constant][17] /* ty=Tensor[(1755), float64] */, %446)
}

def @func_5960() -> Tensor[(3, 11, 11), float64] {
  @func_3231() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_2498(%var_2490: Tensor[(4, 4, 12), float64], %var_2494: Tensor[(480), float32], %var_2495: Tensor[(1755), float64]) -> (Tensor[(4, 4, 12), float64], Tensor[(252), uint64], Tensor[(480), float32], Tensor[(1755), float64]) {
  %447 = cast(%var_2490, dtype="float64") /* ty=Tensor[(4, 4, 12), float64] */;
  %448 = cast(%var_2494, dtype="float32") /* ty=Tensor[(480), float32] */;
  %449 = cast(%var_2495, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %450 = cast(%var_2494, dtype="bool") /* ty=Tensor[(480), bool] */;
  %451 = reshape(%448, newshape=[16, 15, 2]) /* ty=Tensor[(16, 15, 2), float32] */;
  %452 = reshape(%449, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
  %453 = reshape(%450, newshape=[16, 15, 2]) /* ty=Tensor[(16, 15, 2), bool] */;
  %454 = @func_1492(%451, %452, %453) /* ty=(Tensor[(252), uint64], float64, Tensor[(1755), float64], Tensor[(1, 6, 3), float64], Tensor[(11, 5, 3), bool], Tensor[(165), float32], Tensor[(13, 15, 9), bool], Tensor[(16, 15, 2), float64], Tensor[(16, 15, 2), float64]) */;
  %455 = sigmoid(%447) /* ty=Tensor[(4, 4, 12), float64] */;
  %456 = %454.0;
  (%455, %456, %var_2494, %var_2495)
}

def @func_2306() -> (Tensor[(3, 11, 11), float64],) {
  %457 = @func_1997() /* ty=Tensor[(3, 11, 11), float64] */;
  (%457,)
}

def @func_2733(%var_2707: float32) -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(3, 165), float32], Tensor[(1, 6, 3), float64]) {
  %458 = @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %459 = cast(%var_2707, dtype="float32") /* ty=float32 */;
  %460 = cast(meta[relay.Constant][18] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %461 = reshape(%459, newshape=[]) /* ty=float32 */;
  %462 = reshape(%460, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
  %463 = @func_307(%461, %462) /* ty=(Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) */;
  %464 = cast(meta[relay.Constant][18] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %465 = reshape(%464, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %466 = @func_2467(%465) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 6, 3), float64], Tensor[(1755), float64], Tensor[(3, 11, 11), float32]) */;
  %467 = @func_2393() /* ty=Tensor[(3, 11, 11), float64] */;
  %468 = %458.0;
  %469 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
  %470 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
  %471 = %463.1;
  %472 = @func_2126() /* ty=Tensor[(3, 165), float32] */;
  %473 = %466.4;
  (%467, %468, %469, %470, %471, %var_2707, meta[relay.Constant][18] /* ty=Tensor[(165), float32] */, %472, %473)
}

def @func_2758() -> Tensor[(1, 165), float32] {
  %474 = @func_2091() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) */;
  %474.1
}

def @func_4233(%var_4221: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), bool], Tensor[(5, 5, 9), uint16], Tensor[(225), uint16]) {
  %475 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
  %476 = cast(%var_4221, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%475, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %480 = cast(meta[relay.Constant][19] /* ty=Tensor[(225), uint16] */, dtype="uint16") /* ty=Tensor[(225), uint16] */;
  %481 = cast(meta[relay.Constant][19] /* ty=Tensor[(225), uint16] */, dtype="uint16") /* ty=Tensor[(225), uint16] */;
  %482 = reshape(%480, newshape=[5, 5, 9]) /* ty=Tensor[(5, 5, 9), uint16] */;
  %483 = reshape(%481, newshape=[5, 5, 9]) /* ty=Tensor[(5, 5, 9), uint16] */;
  %484 = greater_equal(%478, %479) /* ty=Tensor[(3, 11, 11), bool] */;
  %485 = @func_4182(%482, %483) /* ty=Tensor[(5, 5, 9), uint16] */;
  (%484, %485, meta[relay.Constant][19] /* ty=Tensor[(225), uint16] */)
}

def @func_4274() -> Tensor[(11, 3, 11), float32] {
  @func_4190() /* ty=Tensor[(11, 3, 11), float32] */
}

def @func_2049(%var_2039: int8, %var_2040: Tensor[(2, 9, 4), int8]) -> (Tensor[(2, 9, 4), int8],) {
  %486 = cast(%var_2039, dtype="int8") /* ty=int8 */;
  %487 = cast(%var_2040, dtype="int8") /* ty=Tensor[(2, 9, 4), int8] */;
  %488 = right_shift(%486, %487) /* ty=Tensor[(2, 9, 4), int8] */;
  (%488,)
}

def @func_3561() -> (Tensor[(12, 16, 15), float32],) {
  %489 = @func_2764() /* ty=Tensor[(12, 16, 15), float32] */;
  (%489,)
}

def @func_3501() -> Tensor[(3, 11, 11), float64] {
  @func_2393() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_2235(%var_2222: Tensor[(3, 11, 11), float64], %var_2228: Tensor[(165, 1), float32], %var_2229: Tensor[(55, 6), float64]) -> (Tensor[(3, 11, 11), uint8], float32, Tensor[(165, 1), float32], Tensor[(55, 6), float64]) {
  %490 = @func_2091() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) */;
  %491 = %490.0;
  %492 = cast(%var_2222, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %496 = cast(%var_2228, dtype="float32") /* ty=Tensor[(165, 1), float32] */;
  %497 = cast(%var_2229, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
  %498 = reshape(%496, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %499 = reshape(%497, newshape=[5, 66]) /* ty=Tensor[(5, 66), float64] */;
  %500 = @func_2169(%498, %499) /* ty=(Tensor[(3, 11, 11), float32], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(15, 2, 11), float64], Tensor[(5, 66), float64]) */;
  %501 = left_shift(%494, %495) /* ty=Tensor[(3, 11, 11), uint8] */;
  %502 = %500.2;
  (%501, %502, %var_2228, %var_2229)
}

def @func_4118() -> (Tensor[(1, 165), float64],) {
  %503 = @func_2758() /* ty=Tensor[(1, 165), float32] */;
  %504 = cast(%503, dtype="float64") /* ty=Tensor[(1, 165), float64] */;
  %505 = tan(%504) /* ty=Tensor[(1, 165), float64] */;
  (%505,)
}

def @func_4182(%var_4177: Tensor[(5, 5, 9), uint16], %var_4178: Tensor[(5, 5, 9), uint16]) -> Tensor[(5, 5, 9), uint16] {
  %506 = cast(%var_4178, dtype="uint16") /* ty=Tensor[(5, 5, 9), uint16] */;
  %507 = shape_of(%var_4177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%var_4177, dtype="uint16") /* ty=Tensor[(5, 5, 9), uint16] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  minimum(%508, %509) /* ty=Tensor[(5, 5, 9), uint16] */
}

def @func_3766(%var_3721: Tensor[(33, 5), float32]) -> (Tensor[(33, 5), float64],) {
  %510 = @func_2091() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) */;
  %511 = %510.2;
  %512 = cast(%511, dtype="int32") /* ty=Tensor[(33, 5), int32] */;
  %513 = shape_of(%var_3721, dtype="int32") /* ty=Tensor[(2), int32] */;
  %514 = cast(%var_3721, dtype="int32") /* ty=Tensor[(33, 5), int32] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %516 = left_shift(%514, %515) /* ty=Tensor[(33, 5), int32] */;
  %517 = cast(%var_3721, dtype="uint64") /* ty=Tensor[(33, 5), uint64] */;
  %518 = shape_of(%511, dtype="int32") /* ty=Tensor[(2), int32] */;
  %519 = cast(%511, dtype="uint64") /* ty=Tensor[(33, 5), uint64] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %521 = logical_xor(%519, %520) /* ty=Tensor[(33, 5), uint64] */;
  %522 = cast(%521, dtype="uint32") /* ty=Tensor[(33, 5), uint32] */;
  %523 = shape_of(%516, dtype="int32") /* ty=Tensor[(2), int32] */;
  %524 = cast(%516, dtype="uint32") /* ty=Tensor[(33, 5), uint32] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %526 = bitwise_xor(%524, %525) /* ty=Tensor[(33, 5), uint32] */;
  %527 = cast(%526, dtype="float32") /* ty=Tensor[(33, 5), float32] */;
  %528 = sigmoid(%527) /* ty=Tensor[(33, 5), float32] */;
  %529 = cast(%528, dtype="float64") /* ty=Tensor[(33, 5), float64] */;
  %530 = atan(%529) /* ty=Tensor[(33, 5), float64] */;
  (%530,)
}

def @func_1250(%var_1216: Tensor[(1, 165), float32]) -> (Tensor[(14, 10, 8), float32], Tensor[(1, 6, 3), float64], Tensor[(1, 165), float32], Tensor[(252), uint64], Tensor[(7, 3, 12), float32]) {
  %531 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 10, 8), float32] */, dtype="float32") /* ty=Tensor[(14, 10, 8), float32] */;
  %532 = cast(-3.25989f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %533 = cast(%var_1216, dtype="float32") /* ty=Tensor[(1, 165), float32] */;
  %534 = reshape(%532, newshape=[]) /* ty=float32 */;
  %535 = reshape(%533, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %536 = @func_870(%534, %535) /* ty=(Tensor[(2, 7, 7), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32]) */;
  %537 = cast(meta[relay.Constant][21] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %538 = reshape(%537, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint64] */;
  %539 = @func_937(%538) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(7, 3, 12), float32]) */;
  %540 = %539.0;
  %541 = cast(%540, dtype="float32") /* ty=Tensor[(7, 3, 12), float32] */;
  %542 = sigmoid(%541) /* ty=Tensor[(7, 3, 12), float32] */;
  %543 = cast(%542, dtype="float32") /* ty=Tensor[(7, 3, 12), float32] */;
  %544 = cast(-3.25989f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %545 = acos(%531) /* ty=Tensor[(14, 10, 8), float32] */;
  %546 = %536.1;
  %547 = mod(%543, %544) /* ty=Tensor[(7, 3, 12), float32] */;
  (%545, %546, %var_1216, meta[relay.Constant][21] /* ty=Tensor[(252), uint64] */, %547)
}

def @func_5895() -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), int8], Tensor[(1, 165), float32], Tensor[(?, 165), int64]) {
  %548 = @func_5625() /* ty=(Tensor[(1, 165), float64], Tensor[(3, 11, 11), int8]) */;
  %549 = @func_4175() /* ty=Tensor[(1, 165), float64] */;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(1, 165), float32] */;
  %551 = cast(%549, dtype="float64") /* ty=Tensor[(1, 165), float64] */;
  %552 = acosh(%551) /* ty=Tensor[(1, 165), float64] */;
  %553 = cast(%549, dtype="int64") /* ty=Tensor[(1, 165), int64] */;
  %554 = shape_of(%552, dtype="int32") /* ty=Tensor[(2), int32] */;
  %555 = cast(%552, dtype="int64") /* ty=Tensor[(1, 165), int64] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %557 = @func_3501() /* ty=Tensor[(3, 11, 11), float64] */;
  %558 = %548.1;
  %559 = sqrt(%550) /* ty=Tensor[(1, 165), float32] */;
  %560 = subtract(%555, %556) /* ty=Tensor[(?, 165), int64] */;
  (%557, %558, %559, %560)
}

def @func_1492(%var_1402: Tensor[(16, 15, 2), float32], %var_1422: Tensor[(1755), float64], %var_1462: Tensor[(16, 15, 2), bool]) -> (Tensor[(252), uint64], float64, Tensor[(1755), float64], Tensor[(1, 6, 3), float64], Tensor[(11, 5, 3), bool], Tensor[(165), float32], Tensor[(13, 15, 9), bool], Tensor[(16, 15, 2), float64], Tensor[(16, 15, 2), float64]) {
  %561 = cast(5.95792f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %562 = cast(%var_1422, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %563 = reshape(%561, newshape=[]) /* ty=float64 */;
  %564 = reshape(%562, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float64] */;
  %565 = @func_1295(%563, %564) /* ty=(Tensor[(13, 15, 9), bool], Tensor[(1, 6, 3), float64], Tensor[(252), uint64], Tensor[(165), float32]) */;
  %566 = cast(5.95792f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %567 = reshape(%566, newshape=[]) /* ty=float64 */;
  %568 = @func_128(%567) /* ty=(Tensor[(1, 6, 3), float64],) */;
  %569 = cast(5.95792f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %570 = cast(meta[relay.Constant][22] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %571 = reshape(%569, newshape=[]) /* ty=float32 */;
  %572 = reshape(%570, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
  %573 = @func_307(%571, %572) /* ty=(Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) */;
  %574 = cast(5.95792f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %575 = cast(%var_1422, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %576 = reshape(%574, newshape=[]) /* ty=float64 */;
  %577 = reshape(%575, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float64] */;
  %578 = @func_1295(%576, %577) /* ty=(Tensor[(13, 15, 9), bool], Tensor[(1, 6, 3), float64], Tensor[(252), uint64], Tensor[(165), float32]) */;
  %579 = cast(%var_1402, dtype="float32") /* ty=Tensor[(16, 15, 2), float32] */;
  %580 = cos(%579) /* ty=Tensor[(16, 15, 2), float32] */;
  %581 = cast(%580, dtype="float32") /* ty=Tensor[(16, 15, 2), float32] */;
  %582 = acosh(%581) /* ty=Tensor[(16, 15, 2), float32] */;
  %583 = cast(%580, dtype="int8") /* ty=Tensor[(16, 15, 2), int8] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%582, dtype="int8") /* ty=Tensor[(16, 15, 2), int8] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %587 = left_shift(%585, %586) /* ty=Tensor[(16, 15, 2), int8] */;
  %588 = cast(%580, dtype="bool") /* ty=Tensor[(16, 15, 2), bool] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%587, dtype="bool") /* ty=Tensor[(16, 15, 2), bool] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %592 = greater_equal(%590, %591) /* ty=Tensor[(16, 15, 2), bool] */;
  %593 = cast(%var_1462, dtype="float64") /* ty=Tensor[(16, 15, 2), float64] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%592, dtype="float64") /* ty=Tensor[(16, 15, 2), float64] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %597 = cast(%580, dtype="float64") /* ty=Tensor[(16, 15, 2), float64] */;
  %598 = %565.2;
  %599 = %568.0;
  %600 = %573.0;
  %601 = %578.0;
  %602 = divide(%595, %596) /* ty=Tensor[(16, 15, 2), float64] */;
  %603 = exp(%597) /* ty=Tensor[(16, 15, 2), float64] */;
  (%598, 5.95792f64 /* ty=float64 */, %var_1422, %599, %600, meta[relay.Constant][22] /* ty=Tensor[(165), float32] */, %601, %602, %603)
}

def @func_2764() -> Tensor[(12, 16, 15), float32] {
  %604 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 15), float32] */;
  acosh(%604) /* ty=Tensor[(12, 16, 15), float32] */
}

def @func_5803(%var_5797: Tensor[(5, 6, 13), float32]) -> Tensor[(5, 6, 13), float32] {
  %605 = cast(%var_5797, dtype="float32") /* ty=Tensor[(5, 6, 13), float32] */;
  %606 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(5, 6, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 6, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 6, 13), float32] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%607, %608) /* ty=Tensor[(5, 6, 13), float32] */
}

def @func_6076() -> Tensor[(11, 3, 11), float32] {
  @func_4190() /* ty=Tensor[(11, 3, 11), float32] */
}

def @func_3687(%var_3571: float32) -> (Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(2, 14, 2), bool], Tensor[(56), uint64], Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(330), float64], Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(3, 11, 11), bool], Tensor[(2, 9, 4), int8], Tensor[(6, 12), int8], Tensor[(5, 66), float32]) {
  %609 = cast(%var_3571, dtype="float32") /* ty=float32 */;
  %610 = reshape(%609, newshape=[]) /* ty=float32 */;
  %611 = @func_3154(%610) /* ty=(Tensor[(3, 11, 11), float32], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 165), float32]) */;
  %612 = cast(meta[relay.Constant][25] /* ty=Tensor[(56), uint64] */, dtype="uint64") /* ty=Tensor[(56), uint64] */;
  %613 = cast(meta[relay.Constant][25] /* ty=Tensor[(56), uint64] */, dtype="uint64") /* ty=Tensor[(56), uint64] */;
  %614 = cast(meta[relay.Constant][25] /* ty=Tensor[(56), uint64] */, dtype="uint64") /* ty=Tensor[(56), uint64] */;
  %615 = reshape(%612, newshape=[2, 14, 2]) /* ty=Tensor[(2, 14, 2), uint64] */;
  %616 = reshape(%613, newshape=[2, 14, 2]) /* ty=Tensor[(2, 14, 2), uint64] */;
  %617 = reshape(%614, newshape=[2, 14, 2]) /* ty=Tensor[(2, 14, 2), uint64] */;
  %618 = @func_1743(%615, %616, %617) /* ty=(Tensor[(2, 14, 2), bool], Tensor[(2, 14, 2), bool], Tensor[(13, 15, 9), bool], Tensor[(?, 1755), bool]) */;
  %619 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
  %620 = cast(%619, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %621 = @func_3231() /* ty=Tensor[(3, 11, 11), float64] */;
  %622 = cast(%621, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %623 = reshape(%622, newshape=[3, 11, 11]) /* ty=Tensor[(3, 11, 11), float64] */;
  %624 = @func_3535(%623) /* ty=(Tensor[(3, 11, 11), bool], Tensor[(3, 11, 11), bool]) */;
  %625 = cast(%var_3571, dtype="int8") /* ty=int8 */;
  %626 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 12), int8] */, dtype="int8") /* ty=Tensor[(6, 12), int8] */;
  %627 = reshape(%625, newshape=[]) /* ty=int8 */;
  %628 = reshape(%626, newshape=[2, 9, 4]) /* ty=Tensor[(2, 9, 4), int8] */;
  %629 = @func_2049(%627, %628) /* ty=(Tensor[(2, 9, 4), int8],) */;
  %630 = %611.1;
  %631 = cast(%630, dtype="float32") /* ty=Tensor[(165), float32] */;
  %632 = cast(meta[relay.Constant][26] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %633 = reshape(%631, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %634 = reshape(%632, newshape=[5, 66]) /* ty=Tensor[(5, 66), float64] */;
  %635 = @func_2169(%633, %634) /* ty=(Tensor[(3, 11, 11), float32], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(15, 2, 11), float64], Tensor[(5, 66), float64]) */;
  %636 = %635.5;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
  %638 = %618.0;
  %639 = @func_1997() /* ty=Tensor[(3, 11, 11), float64] */;
  %640 = erf(%620) /* ty=Tensor[(3, 11, 11), float64] */;
  %641 = @func_2393() /* ty=Tensor[(3, 11, 11), float64] */;
  %642 = @func_2758() /* ty=Tensor[(1, 165), float32] */;
  %643 = %624.1;
  %644 = %629.0;
  %645 = acosh(%637) /* ty=Tensor[(5, 66), float32] */;
  (%621, %630, %var_3571, %638, meta[relay.Constant][25] /* ty=Tensor[(56), uint64] */, %639, %640, meta[relay.Constant][26] /* ty=Tensor[(330), float64] */, %641, %642, %643, %644, meta[relay.Constant][27] /* ty=Tensor[(6, 12), int8] */, %645)
}

def @func_937(%var_925: Tensor[(7, 3, 12), uint64]) -> (Tensor[(7, 3, 12), bool], Tensor[(7, 3, 12), float32]) {
  %646 = cast(%var_925, dtype="bool") /* ty=Tensor[(7, 3, 12), bool] */;
  %647 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(7, 3, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 3, 12), uint64] */, dtype="bool") /* ty=Tensor[(7, 3, 12), bool] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %650 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 3, 12), uint64] */, dtype="float32") /* ty=Tensor[(7, 3, 12), float32] */;
  %651 = less(%648, %649) /* ty=Tensor[(7, 3, 12), bool] */;
  %652 = acosh(%650) /* ty=Tensor[(7, 3, 12), float32] */;
  (%651, %652)
}

def @func_5476() -> (Tensor[(3, 11, 11), float64], Tensor[(360), float64]) {
  %653 = @func_4638() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %654 = @func_4303() /* ty=(Tensor[(360), float64],) */;
  %655 = %653.0;
  %656 = %654.0;
  (%655, %656)
}

def @func_5949(%var_5913: Tensor[(5, 4, 4), uint32], %var_5914: Tensor[(5, 4, 4), uint32]) -> (Tensor[(5, 4, 4), uint32], Tensor[(5, 4, 4), float64]) {
  %657 = cast(%var_5914, dtype="uint32") /* ty=Tensor[(5, 4, 4), uint32] */;
  %658 = shape_of(%var_5913, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%var_5913, dtype="uint32") /* ty=Tensor[(5, 4, 4), uint32] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %661 = cast(%var_5913, dtype="float64") /* ty=Tensor[(5, 4, 4), float64] */;
  %662 = shape_of(%var_5914, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%var_5914, dtype="float64") /* ty=Tensor[(5, 4, 4), float64] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %665 = bitwise_or(%659, %660) /* ty=Tensor[(5, 4, 4), uint32] */;
  %666 = divide(%663, %664) /* ty=Tensor[(5, 4, 4), float64] */;
  (%665, %666)
}

def @func_3231() -> Tensor[(3, 11, 11), float64] {
  %667 = @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %667.0
}

def @func_1997() -> Tensor[(3, 11, 11), float64] {
  %668 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 11, 1), float64] */, dtype="float64") /* ty=Tensor[(3, 11, 1), float64] */;
  %669 = cast(meta[relay.Constant][30] /* ty=Tensor[(3, 11, 11), float64] */, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  power(%668, %669) /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_4392() -> Tensor[(12, 16, 15), float32] {
  %670 = @func_3561() /* ty=(Tensor[(12, 16, 15), float32],) */;
  %670.0
}

def @func_5400() -> (Tensor[(360), float64],) {
  %671 = @func_4303() /* ty=(Tensor[(360), float64],) */;
  %672 = %671.0;
  (%672,)
}

def @func_1604(%var_1586: Tensor[(1, 165), float32]) -> (Tensor[(7, 15, 8), int16], Tensor[(1, 165), float32], Tensor[(?, 6, 3), int64]) {
  %673 = cast(meta[relay.Constant][31] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %674 = cast(meta[relay.Constant][32] /* ty=Tensor[(7, 15, 8), int16] */, dtype="int16") /* ty=Tensor[(7, 15, 8), int16] */;
  %675 = cast(meta[relay.Constant][31] /* ty=int16 */, dtype="float32") /* ty=float32 */;
  %676 = cast(%var_1586, dtype="float32") /* ty=Tensor[(1, 165), float32] */;
  %677 = reshape(%675, newshape=[]) /* ty=float32 */;
  %678 = reshape(%676, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
  %679 = @func_307(%677, %678) /* ty=(Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) */;
  %680 = %679.1;
  %681 = cast(meta[relay.Constant][31] /* ty=int16 */, dtype="float32") /* ty=float32 */;
  %682 = cast(%var_1586, dtype="float32") /* ty=Tensor[(1, 165), float32] */;
  %683 = reshape(%681, newshape=[]) /* ty=float32 */;
  %684 = reshape(%682, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
  %685 = @func_307(%683, %684) /* ty=(Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) */;
  %686 = %685.1;
  %687 = cast(%686, dtype="int64") /* ty=Tensor[(1, 6, 3), int64] */;
  %688 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%680, dtype="int64") /* ty=Tensor[(1, 6, 3), int64] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %691 = bitwise_and(%673, %674) /* ty=Tensor[(7, 15, 8), int16] */;
  %692 = maximum(%689, %690) /* ty=Tensor[(?, 6, 3), int64] */;
  (%691, %var_1586, %692)
}

def @func_4052(%var_4048: Tensor[(11, 5, 13), float64]) -> Tensor[(11, 5, 13), float64] {
  %693 = cast(%var_4048, dtype="float64") /* ty=Tensor[(11, 5, 13), float64] */;
  %694 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(11, 5, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 5, 13), float64] */, dtype="float64") /* ty=Tensor[(11, 5, 13), float64] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%695, %696) /* ty=Tensor[(11, 5, 13), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5402() -> (Tensor[(360), float64],) {
  @func_5400() /* ty=(Tensor[(360), float64],) */
}

def @func_4082() -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(360), float64], Tensor[(3, 11, 11), uint8]) {
  %0 = @func_2021() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %2 = reshape(%1, newshape=[15, 3, 8]) /* ty=Tensor[(15, 3, 8), float64] */;
  %3 = @func_3834(%2) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(15, 3, 8), float64]) */;
  %4 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 11, 11), float64] */, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %9 = mod(%7, %8) /* ty=Tensor[(3, 11, 11), float32] */;
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 11, 11), float64] */, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%9, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %14 = %0.0;
  %15 = %3.0;
  %16 = add(%12, %13) /* ty=Tensor[(3, 11, 11), uint8] */;
  (%14, %15, meta[relay.Constant][0] /* ty=Tensor[(360), float64] */, %16)
}

def @main(%var_6174: Tensor[(4, 9, 15), float32]) -> (Tensor[(4, 9, 15), float32],) {
  %17 = cast(%var_6174, dtype="float32") /* ty=Tensor[(4, 9, 15), float32] */;
  %18 = asin(%17) /* ty=Tensor[(4, 9, 15), float32] */;
  (%18,)
}

def @func_3862() -> (Tensor[(3, 165), float32],) {
  %19 = @func_2126() /* ty=Tensor[(3, 165), float32] */;
  (%19,)
}

def @func_4413() -> (Tensor[(3, 11, 11), float64],) {
  %20 = @func_4082() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(360), float64], Tensor[(3, 11, 11), uint8]) */;
  %21 = %20.0;
  (%21,)
}

def @func_4119() -> (Tensor[(1, 165), float64],) {
  %25 = fn () -> (Tensor[(1, 165), float64],) {
    %22 = @func_2758() /* ty=Tensor[(1, 165), float32] */;
    %23 = cast(%22, dtype="float64") /* ty=Tensor[(1, 165), float64] */;
    %24 = tan(%23) /* ty=Tensor[(1, 165), float64] */;
    (%24,)
  };
  %25() /* ty=(Tensor[(1, 165), float64],) */
}

def @func_6076() -> Tensor[(11, 3, 11), float32] {
  @func_4190() /* ty=Tensor[(11, 3, 11), float32] */
}

def @func_1968(%var_1967: Tensor[(15, 2, 11), float64]) -> (Tensor[(15, 2, 11), float64],) {
  %28 = fn (%var_1960: Tensor[(15, 2, 11), float64]) -> (Tensor[(15, 2, 11), float64],) {
    %26 = cast(%var_1960, dtype="float64") /* ty=Tensor[(15, 2, 11), float64] */;
    %27 = sinh(%26) /* ty=Tensor[(15, 2, 11), float64] */;
    (%27,)
  };
  %28(%var_1967) /* ty=(Tensor[(15, 2, 11), float64],) */
}

def @func_311(%var_309: float32, %var_310: Tensor[(11, 5, 3), float32]) -> (Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) {
  @func_307(%var_309, %var_310) /* ty=(Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) */
}

def @func_874(%var_872: float32, %var_873: Tensor[(165), float32]) -> (Tensor[(2, 7, 7), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32]) {
  @func_870(%var_872, %var_873) /* ty=(Tensor[(2, 7, 7), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32]) */
}

def @func_2235(%var_2222: Tensor[(3, 11, 11), float64], %var_2228: Tensor[(165, 1), float32], %var_2229: Tensor[(55, 6), float64]) -> (Tensor[(3, 11, 11), uint8], float32, Tensor[(165, 1), float32], Tensor[(55, 6), float64]) {
  %29 = @func_2091() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) */;
  %30 = %29.0;
  %31 = cast(%var_2222, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %35 = cast(%var_2228, dtype="float32") /* ty=Tensor[(165, 1), float32] */;
  %36 = cast(%var_2229, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
  %37 = reshape(%35, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %38 = reshape(%36, newshape=[5, 66]) /* ty=Tensor[(5, 66), float64] */;
  %39 = @func_2169(%37, %38) /* ty=(Tensor[(3, 11, 11), float32], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(15, 2, 11), float64], Tensor[(5, 66), float64]) */;
  %40 = left_shift(%33, %34) /* ty=Tensor[(3, 11, 11), uint8] */;
  %41 = %39.2;
  (%40, %41, %var_2228, %var_2229)
}

def @func_5424(%var_5423: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), int16],) {
  %49 = fn (%var_5417: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), int16],) {
    %42 = @func_2854() /* ty=(Tensor[(12, 16, 15), float32], Tensor[(3, 11, 11), float64]) */;
    %43 = %42.1;
    %44 = cast(%var_5417, dtype="int16") /* ty=Tensor[(3, 11, 11), int16] */;
    %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
    %46 = cast(%43, dtype="int16") /* ty=Tensor[(3, 11, 11), int16] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %48 = right_shift(%46, %47) /* ty=Tensor[(3, 11, 11), int16] */;
    (%48,)
  };
  %49(%var_5423) /* ty=(Tensor[(3, 11, 11), int16],) */
}

def @func_3232() -> Tensor[(3, 11, 11), float64] {
  %51 = fn () -> Tensor[(3, 11, 11), float64] {
    %50 = @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */;
    %50.0
  };
  %51() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_2416() -> Tensor[(3, 11, 11), float64] {
  @func_2414() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_4638() -> (Tensor[(3, 11, 11), float64],) {
  %52 = @func_3231() /* ty=Tensor[(3, 11, 11), float64] */;
  (%52,)
}

def @func_5334() -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float32], Tensor[(3, 11, 11), int8]) {
  %61 = fn () -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float32], Tensor[(3, 11, 11), int8]) {
    %53 = @func_4638() /* ty=(Tensor[(3, 11, 11), float64],) */;
    %54 = %53.0;
    %55 = cast(%54, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
    %56 = cast(%54, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
    %57 = @func_4937() /* ty=(Tensor[(3, 11, 11), int8],) */;
    %58 = sinh(%55) /* ty=Tensor[(3, 11, 11), float64] */;
    %59 = log(%56) /* ty=Tensor[(3, 11, 11), float32] */;
    %60 = %57.0;
    (%58, %59, %60)
  };
  %61() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float32], Tensor[(3, 11, 11), int8]) */
}

def @func_1492(%var_1402: Tensor[(16, 15, 2), float32], %var_1422: Tensor[(1755), float64], %var_1462: Tensor[(16, 15, 2), bool]) -> (Tensor[(252), uint64], float64, Tensor[(1755), float64], Tensor[(1, 6, 3), float64], Tensor[(11, 5, 3), bool], Tensor[(165), float32], Tensor[(13, 15, 9), bool], Tensor[(16, 15, 2), float64], Tensor[(16, 15, 2), float64]) {
  %62 = cast(5.95792f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %63 = cast(%var_1422, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %64 = reshape(%62, newshape=[]) /* ty=float64 */;
  %65 = reshape(%63, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float64] */;
  %66 = @func_1295(%64, %65) /* ty=(Tensor[(13, 15, 9), bool], Tensor[(1, 6, 3), float64], Tensor[(252), uint64], Tensor[(165), float32]) */;
  %67 = cast(5.95792f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %68 = reshape(%67, newshape=[]) /* ty=float64 */;
  %69 = @func_128(%68) /* ty=(Tensor[(1, 6, 3), float64],) */;
  %70 = cast(5.95792f64 /* ty=float64 */, dtype="float32") /* ty=float32 */;
  %71 = cast(meta[relay.Constant][2] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
  %72 = reshape(%70, newshape=[]) /* ty=float32 */;
  %73 = reshape(%71, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
  %74 = @func_307(%72, %73) /* ty=(Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) */;
  %75 = cast(5.95792f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %76 = cast(%var_1422, dtype="float64") /* ty=Tensor[(1755), float64] */;
  %77 = reshape(%75, newshape=[]) /* ty=float64 */;
  %78 = reshape(%76, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float64] */;
  %79 = @func_1295(%77, %78) /* ty=(Tensor[(13, 15, 9), bool], Tensor[(1, 6, 3), float64], Tensor[(252), uint64], Tensor[(165), float32]) */;
  %80 = cast(%var_1402, dtype="float32") /* ty=Tensor[(16, 15, 2), float32] */;
  %81 = cos(%80) /* ty=Tensor[(16, 15, 2), float32] */;
  %82 = cast(%81, dtype="float32") /* ty=Tensor[(16, 15, 2), float32] */;
  %83 = acosh(%82) /* ty=Tensor[(16, 15, 2), float32] */;
  %84 = cast(%81, dtype="int8") /* ty=Tensor[(16, 15, 2), int8] */;
  %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%83, dtype="int8") /* ty=Tensor[(16, 15, 2), int8] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %88 = left_shift(%86, %87) /* ty=Tensor[(16, 15, 2), int8] */;
  %89 = cast(%81, dtype="bool") /* ty=Tensor[(16, 15, 2), bool] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%88, dtype="bool") /* ty=Tensor[(16, 15, 2), bool] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %93 = greater_equal(%91, %92) /* ty=Tensor[(16, 15, 2), bool] */;
  %94 = cast(%var_1462, dtype="float64") /* ty=Tensor[(16, 15, 2), float64] */;
  %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%93, dtype="float64") /* ty=Tensor[(16, 15, 2), float64] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %98 = cast(%81, dtype="float64") /* ty=Tensor[(16, 15, 2), float64] */;
  %99 = %66.2;
  %100 = %69.0;
  %101 = %74.0;
  %102 = %79.0;
  %103 = divide(%96, %97) /* ty=Tensor[(16, 15, 2), float64] */;
  %104 = exp(%98) /* ty=Tensor[(16, 15, 2), float64] */;
  (%99, 5.95792f64 /* ty=float64 */, %var_1422, %100, %101, meta[relay.Constant][2] /* ty=Tensor[(165), float32] */, %102, %103, %104)
}

def @func_5216(%var_5181: Tensor[(8, 60), float32], %var_5182: Tensor[(15, 117), float64], %var_5191: Tensor[(15, 117), float64]) -> (Tensor[(3, 11, 11), float32], Tensor[(3, 11, 11), float64], Tensor[(12, 16, 15), float32], Tensor[(165), float32], Tensor[(8, 60), float32], Tensor[(15, 117), int64], Tensor[(3, 11, 11), uint8], Tensor[(1, 165), float64]) {
  %105 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
  %106 = cast(%105, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %107 = reshape(%106, newshape=[3, 11, 11]) /* ty=Tensor[(3, 11, 11), float64] */;
  %108 = @func_2931(%107) /* ty=(Tensor[(3, 11, 11), float32],) */;
  %109 = cast(%105, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %110 = acos(%109) /* ty=Tensor[(3, 11, 11), float32] */;
  %111 = cast(%110, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %112 = cast(%var_5181, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %113 = cast(%var_5182, dtype="float64") /* ty=Tensor[(15, 117), float64] */;
  %114 = cast(%var_5181, dtype="bool") /* ty=Tensor[(8, 60), bool] */;
  %115 = reshape(%112, newshape=[16, 15, 2]) /* ty=Tensor[(16, 15, 2), float32] */;
  %116 = reshape(%113, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
  %117 = reshape(%114, newshape=[16, 15, 2]) /* ty=Tensor[(16, 15, 2), bool] */;
  %118 = @func_1492(%115, %116, %117) /* ty=(Tensor[(252), uint64], float64, Tensor[(1755), float64], Tensor[(1, 6, 3), float64], Tensor[(11, 5, 3), bool], Tensor[(165), float32], Tensor[(13, 15, 9), bool], Tensor[(16, 15, 2), float64], Tensor[(16, 15, 2), float64]) */;
  %119 = cast(%var_5191, dtype="int64") /* ty=Tensor[(15, 117), int64] */;
  %120 = shape_of(%var_5182, dtype="int32") /* ty=Tensor[(2), int32] */;
  %121 = cast(%var_5182, dtype="int64") /* ty=Tensor[(15, 117), int64] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %123 = cast(%105, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %124 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%110, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %127 = @func_2758() /* ty=Tensor[(1, 165), float32] */;
  %128 = cast(%127, dtype="float64") /* ty=Tensor[(1, 165), float64] */;
  %129 = asin(%128) /* ty=Tensor[(1, 165), float64] */;
  %130 = cast(%129, dtype="float64") /* ty=Tensor[(1, 165), float64] */;
  %131 = %108.0;
  %132 = sqrt(%111) /* ty=Tensor[(3, 11, 11), float64] */;
  %133 = @func_2764() /* ty=Tensor[(12, 16, 15), float32] */;
  %134 = %118.5;
  %135 = left_shift(%121, %122) /* ty=Tensor[(15, 117), int64] */;
  %136 = multiply(%125, %126) /* ty=Tensor[(3, 11, 11), uint8] */;
  %137 = atanh(%130) /* ty=Tensor[(1, 165), float64] */;
  (%131, %132, %133, %134, %var_5181, %135, %136, %137)
}

def @func_2380(%var_2377: float32, %var_2378: Tensor[(165), float32]) -> (Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32]) {
  %138 = @func_1997() /* ty=Tensor[(3, 11, 11), float64] */;
  %139 = cast(%138, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %140 = cast(%var_2377, dtype="float32") /* ty=float32 */;
  %141 = cast(%var_2378, dtype="float32") /* ty=Tensor[(165), float32] */;
  %142 = reshape(%140, newshape=[]) /* ty=float32 */;
  %143 = reshape(%141, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %144 = @func_870(%142, %143) /* ty=(Tensor[(2, 7, 7), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32]) */;
  %145 = log10(%139) /* ty=Tensor[(3, 11, 11), float64] */;
  %146 = %144.3;
  (%145, %146, %var_2377, %var_2378)
}

def @func_3054(%var_3053: Tensor[(9, 16, 11), float64]) -> Tensor[(9, 16, 11), float64] {
  %153 = fn (%var_3044: Tensor[(9, 16, 11), float64]) -> Tensor[(9, 16, 11), float64] {
    %147 = cast(%var_3044, dtype="float64") /* ty=Tensor[(9, 16, 11), float64] */;
    %148 = log10(%147) /* ty=Tensor[(9, 16, 11), float64] */;
    %149 = cast(%var_3044, dtype="float64") /* ty=Tensor[(9, 16, 11), float64] */;
    %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
    %151 = cast(%148, dtype="float64") /* ty=Tensor[(9, 16, 11), float64] */;
    %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%151, %152) /* ty=Tensor[(9, 16, 11), float64] */
  };
  %153(%var_3053) /* ty=Tensor[(9, 16, 11), float64] */
}

def @func_6126() -> (Tensor[(3, 11, 11), uint8],) {
  @func_6124() /* ty=(Tensor[(3, 11, 11), uint8],) */
}

def @func_3926(%var_3923: Tensor[(12, 16, 15), float32], %var_3924: Tensor[(165), float32], %var_3925: Tensor[(330), float64]) -> (Tensor[(2, 14, 2), bool], float32, Tensor[(12, 16, 15), int8], Tensor[(5, 66), float64], Tensor[(165), float32], Tensor[(330), float64], Tensor[(12, 16, 15), float64], Tensor[(3, 11, 11), float64]) {
  %179 = fn (%var_3879: Tensor[(12, 16, 15), float32], %var_3896: Tensor[(165), float32], %var_3897: Tensor[(330), float64]) -> (Tensor[(2, 14, 2), bool], float32, Tensor[(12, 16, 15), int8], Tensor[(5, 66), float64], Tensor[(165), float32], Tensor[(330), float64], Tensor[(12, 16, 15), float64], Tensor[(3, 11, 11), float64]) {
    %154 = cast(-2.27391f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %155 = reshape(%154, newshape=[]) /* ty=float32 */;
    %156 = @func_3687(%155) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(2, 14, 2), bool], Tensor[(56), uint64], Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(330), float64], Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(3, 11, 11), bool], Tensor[(2, 9, 4), int8], Tensor[(6, 12), int8], Tensor[(5, 66), float32]) */;
    %157 = @func_3561() /* ty=(Tensor[(12, 16, 15), float32],) */;
    %158 = %157.0;
    %159 = cast(%var_3879, dtype="bool") /* ty=Tensor[(12, 16, 15), bool] */;
    %160 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
    %161 = cast(%158, dtype="bool") /* ty=Tensor[(12, 16, 15), bool] */;
    %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %163 = not_equal(%161, %162) /* ty=Tensor[(12, 16, 15), bool] */;
    %164 = cast(%158, dtype="int8") /* ty=Tensor[(12, 16, 15), int8] */;
    %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
    %166 = cast(%163, dtype="int8") /* ty=Tensor[(12, 16, 15), int8] */;
    %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %168 = cast(%var_3896, dtype="float32") /* ty=Tensor[(165), float32] */;
    %169 = cast(%var_3897, dtype="float64") /* ty=Tensor[(330), float64] */;
    %170 = reshape(%168, newshape=[165]) /* ty=Tensor[(165), float32] */;
    %171 = reshape(%169, newshape=[5, 66]) /* ty=Tensor[(5, 66), float64] */;
    %172 = @func_2169(%170, %171) /* ty=(Tensor[(3, 11, 11), float32], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(15, 2, 11), float64], Tensor[(5, 66), float64]) */;
    %173 = cast(%var_3879, dtype="float64") /* ty=Tensor[(12, 16, 15), float64] */;
    %174 = %156.3;
    %175 = bitwise_xor(%166, %167) /* ty=Tensor[(12, 16, 15), int8] */;
    %176 = %172.5;
    %177 = erf(%173) /* ty=Tensor[(12, 16, 15), float64] */;
    %178 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
    (%174, -2.27391f /* ty=float32 */, %175, %176, %var_3896, %var_3897, %177, %178)
  };
  %179(%var_3923, %var_3924, %var_3925) /* ty=(Tensor[(2, 14, 2), bool], float32, Tensor[(12, 16, 15), int8], Tensor[(5, 66), float64], Tensor[(165), float32], Tensor[(330), float64], Tensor[(12, 16, 15), float64], Tensor[(3, 11, 11), float64]) */
}

def @func_2758() -> Tensor[(1, 165), float32] {
  %180 = @func_2091() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) */;
  %180.1
}

def @func_2502(%var_2499: Tensor[(4, 4, 12), float64], %var_2500: Tensor[(480), float32], %var_2501: Tensor[(1755), float64]) -> (Tensor[(4, 4, 12), float64], Tensor[(252), uint64], Tensor[(480), float32], Tensor[(1755), float64]) {
  %191 = fn (%var_2490: Tensor[(4, 4, 12), float64], %var_2494: Tensor[(480), float32], %var_2495: Tensor[(1755), float64]) -> (Tensor[(4, 4, 12), float64], Tensor[(252), uint64], Tensor[(480), float32], Tensor[(1755), float64]) {
    %181 = cast(%var_2490, dtype="float64") /* ty=Tensor[(4, 4, 12), float64] */;
    %182 = cast(%var_2494, dtype="float32") /* ty=Tensor[(480), float32] */;
    %183 = cast(%var_2495, dtype="float64") /* ty=Tensor[(1755), float64] */;
    %184 = cast(%var_2494, dtype="bool") /* ty=Tensor[(480), bool] */;
    %185 = reshape(%182, newshape=[16, 15, 2]) /* ty=Tensor[(16, 15, 2), float32] */;
    %186 = reshape(%183, newshape=[1755]) /* ty=Tensor[(1755), float64] */;
    %187 = reshape(%184, newshape=[16, 15, 2]) /* ty=Tensor[(16, 15, 2), bool] */;
    %188 = @func_1492(%185, %186, %187) /* ty=(Tensor[(252), uint64], float64, Tensor[(1755), float64], Tensor[(1, 6, 3), float64], Tensor[(11, 5, 3), bool], Tensor[(165), float32], Tensor[(13, 15, 9), bool], Tensor[(16, 15, 2), float64], Tensor[(16, 15, 2), float64]) */;
    %189 = sigmoid(%181) /* ty=Tensor[(4, 4, 12), float64] */;
    %190 = %188.0;
    (%189, %190, %var_2494, %var_2495)
  };
  %191(%var_2499, %var_2500, %var_2501) /* ty=(Tensor[(4, 4, 12), float64], Tensor[(252), uint64], Tensor[(480), float32], Tensor[(1755), float64]) */
}

def @func_1606(%var_1605: Tensor[(1, 165), float32]) -> (Tensor[(7, 15, 8), int16], Tensor[(1, 165), float32], Tensor[(?, 6, 3), int64]) {
  %212 = fn (%var_1586: Tensor[(1, 165), float32]) -> (Tensor[(7, 15, 8), int16], Tensor[(1, 165), float32], Tensor[(?, 6, 3), int64]) {
    %192 = cast(meta[relay.Constant][3] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %193 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 15, 8), int16] */, dtype="int16") /* ty=Tensor[(7, 15, 8), int16] */;
    %194 = cast(meta[relay.Constant][3] /* ty=int16 */, dtype="float32") /* ty=float32 */;
    %195 = cast(%var_1586, dtype="float32") /* ty=Tensor[(1, 165), float32] */;
    %196 = reshape(%194, newshape=[]) /* ty=float32 */;
    %197 = reshape(%195, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
    %198 = @func_307(%196, %197) /* ty=(Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) */;
    %199 = %198.1;
    %200 = cast(meta[relay.Constant][3] /* ty=int16 */, dtype="float32") /* ty=float32 */;
    %201 = cast(%var_1586, dtype="float32") /* ty=Tensor[(1, 165), float32] */;
    %202 = reshape(%200, newshape=[]) /* ty=float32 */;
    %203 = reshape(%201, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
    %204 = @func_307(%202, %203) /* ty=(Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) */;
    %205 = %204.1;
    %206 = cast(%205, dtype="int64") /* ty=Tensor[(1, 6, 3), int64] */;
    %207 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
    %208 = cast(%199, dtype="int64") /* ty=Tensor[(1, 6, 3), int64] */;
    %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %210 = bitwise_and(%192, %193) /* ty=Tensor[(7, 15, 8), int16] */;
    %211 = maximum(%208, %209) /* ty=Tensor[(?, 6, 3), int64] */;
    (%210, %var_1586, %211)
  };
  %212(%var_1605) /* ty=(Tensor[(7, 15, 8), int16], Tensor[(1, 165), float32], Tensor[(?, 6, 3), int64]) */
}

def @func_3687(%var_3571: float32) -> (Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(2, 14, 2), bool], Tensor[(56), uint64], Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(330), float64], Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(3, 11, 11), bool], Tensor[(2, 9, 4), int8], Tensor[(6, 12), int8], Tensor[(5, 66), float32]) {
  %213 = cast(%var_3571, dtype="float32") /* ty=float32 */;
  %214 = reshape(%213, newshape=[]) /* ty=float32 */;
  %215 = @func_3154(%214) /* ty=(Tensor[(3, 11, 11), float32], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 165), float32]) */;
  %216 = cast(meta[relay.Constant][5] /* ty=Tensor[(56), uint64] */, dtype="uint64") /* ty=Tensor[(56), uint64] */;
  %217 = cast(meta[relay.Constant][5] /* ty=Tensor[(56), uint64] */, dtype="uint64") /* ty=Tensor[(56), uint64] */;
  %218 = cast(meta[relay.Constant][5] /* ty=Tensor[(56), uint64] */, dtype="uint64") /* ty=Tensor[(56), uint64] */;
  %219 = reshape(%216, newshape=[2, 14, 2]) /* ty=Tensor[(2, 14, 2), uint64] */;
  %220 = reshape(%217, newshape=[2, 14, 2]) /* ty=Tensor[(2, 14, 2), uint64] */;
  %221 = reshape(%218, newshape=[2, 14, 2]) /* ty=Tensor[(2, 14, 2), uint64] */;
  %222 = @func_1743(%219, %220, %221) /* ty=(Tensor[(2, 14, 2), bool], Tensor[(2, 14, 2), bool], Tensor[(13, 15, 9), bool], Tensor[(?, 1755), bool]) */;
  %223 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
  %224 = cast(%223, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %225 = @func_3231() /* ty=Tensor[(3, 11, 11), float64] */;
  %226 = cast(%225, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %227 = reshape(%226, newshape=[3, 11, 11]) /* ty=Tensor[(3, 11, 11), float64] */;
  %228 = @func_3535(%227) /* ty=(Tensor[(3, 11, 11), bool], Tensor[(3, 11, 11), bool]) */;
  %229 = cast(%var_3571, dtype="int8") /* ty=int8 */;
  %230 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 12), int8] */, dtype="int8") /* ty=Tensor[(6, 12), int8] */;
  %231 = reshape(%229, newshape=[]) /* ty=int8 */;
  %232 = reshape(%230, newshape=[2, 9, 4]) /* ty=Tensor[(2, 9, 4), int8] */;
  %233 = @func_2049(%231, %232) /* ty=(Tensor[(2, 9, 4), int8],) */;
  %234 = %215.1;
  %235 = cast(%234, dtype="float32") /* ty=Tensor[(165), float32] */;
  %236 = cast(meta[relay.Constant][6] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %237 = reshape(%235, newshape=[165]) /* ty=Tensor[(165), float32] */;
  %238 = reshape(%236, newshape=[5, 66]) /* ty=Tensor[(5, 66), float64] */;
  %239 = @func_2169(%237, %238) /* ty=(Tensor[(3, 11, 11), float32], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(15, 2, 11), float64], Tensor[(5, 66), float64]) */;
  %240 = %239.5;
  %241 = cast(%240, dtype="float32") /* ty=Tensor[(5, 66), float32] */;
  %242 = %222.0;
  %243 = @func_1997() /* ty=Tensor[(3, 11, 11), float64] */;
  %244 = erf(%224) /* ty=Tensor[(3, 11, 11), float64] */;
  %245 = @func_2393() /* ty=Tensor[(3, 11, 11), float64] */;
  %246 = @func_2758() /* ty=Tensor[(1, 165), float32] */;
  %247 = %228.1;
  %248 = %233.0;
  %249 = acosh(%241) /* ty=Tensor[(5, 66), float32] */;
  (%225, %234, %var_3571, %242, meta[relay.Constant][5] /* ty=Tensor[(56), uint64] */, %243, %244, meta[relay.Constant][6] /* ty=Tensor[(330), float64] */, %245, %246, %247, %248, meta[relay.Constant][7] /* ty=Tensor[(6, 12), int8] */, %249)
}

def @func_5038() -> (Tensor[(360), float64],) {
  @func_5036() /* ty=(Tensor[(360), float64],) */
}

def @func_2760() -> Tensor[(1, 165), float32] {
  @func_2758() /* ty=Tensor[(1, 165), float32] */
}

def @func_2668(%var_2662: Tensor[(165), float32]) -> (Tensor[(3, 11, 11), uint8], Tensor[(?, 6, 3), int64], Tensor[(165), float32]) {
  %250 = @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %251 = %250.0;
  %252 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 11, 11), float64] */, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%251, dtype="uint8") /* ty=Tensor[(3, 11, 11), uint8] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %256 = cast(%var_2662, dtype="float32") /* ty=Tensor[(165), float32] */;
  %257 = reshape(%256, newshape=[1, 165]) /* ty=Tensor[(1, 165), float32] */;
  %258 = @func_1604(%257) /* ty=(Tensor[(7, 15, 8), int16], Tensor[(1, 165), float32], Tensor[(?, 6, 3), int64]) */;
  %259 = subtract(%254, %255) /* ty=Tensor[(3, 11, 11), uint8] */;
  %260 = %258.2;
  (%259, %260, %var_2662)
}

def @func_5103() -> (Tensor[(12, 16, 15), float32], Tensor[(360), float64], Tensor[(11, 3, 11), int16], Tensor[(11, 3, 11), float32]) {
  %275 = fn () -> (Tensor[(12, 16, 15), float32], Tensor[(360), float64], Tensor[(11, 3, 11), int16], Tensor[(11, 3, 11), float32]) {
    %261 = @func_4368() /* ty=(Tensor[(3, 165), float32], Tensor[(360), float64], Tensor[(3, 11, 11), float64]) */;
    %262 = @func_4274() /* ty=Tensor[(11, 3, 11), float32] */;
    %263 = cast(%262, dtype="float32") /* ty=Tensor[(11, 3, 11), float32] */;
    %264 = log(%263) /* ty=Tensor[(11, 3, 11), float32] */;
    %265 = cast(%264, dtype="float64") /* ty=Tensor[(11, 3, 11), float64] */;
    %266 = erf(%265) /* ty=Tensor[(11, 3, 11), float64] */;
    %267 = cast(%264, dtype="int16") /* ty=Tensor[(11, 3, 11), int16] */;
    %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
    %269 = cast(%266, dtype="int16") /* ty=Tensor[(11, 3, 11), int16] */;
    %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %271 = @func_4392() /* ty=Tensor[(12, 16, 15), float32] */;
    %272 = %261.1;
    %273 = bitwise_and(%269, %270) /* ty=Tensor[(11, 3, 11), int16] */;
    %274 = @func_4274() /* ty=Tensor[(11, 3, 11), float32] */;
    (%271, %272, %273, %274)
  };
  %275() /* ty=(Tensor[(12, 16, 15), float32], Tensor[(360), float64], Tensor[(11, 3, 11), int16], Tensor[(11, 3, 11), float32]) */
}

def @func_4191() -> Tensor[(11, 3, 11), float32] {
  %277 = fn () -> Tensor[(11, 3, 11), float32] {
    %276 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 3, 11), float32] */, dtype="float32") /* ty=Tensor[(11, 3, 11), float32] */;
    atan(%276) /* ty=Tensor[(11, 3, 11), float32] */
  };
  %277() /* ty=Tensor[(11, 3, 11), float32] */
}

def @func_3690(%var_3688: float32) -> (Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(2, 14, 2), bool], Tensor[(56), uint64], Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(330), float64], Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(3, 11, 11), bool], Tensor[(2, 9, 4), int8], Tensor[(6, 12), int8], Tensor[(5, 66), float32]) {
  @func_3687(%var_3688) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(2, 14, 2), bool], Tensor[(56), uint64], Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(330), float64], Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(3, 11, 11), bool], Tensor[(2, 9, 4), int8], Tensor[(6, 12), int8], Tensor[(5, 66), float32]) */
}

def @func_1252(%var_1251: Tensor[(1, 165), float32]) -> (Tensor[(14, 10, 8), float32], Tensor[(1, 6, 3), float64], Tensor[(1, 165), float32], Tensor[(252), uint64], Tensor[(7, 3, 12), float32]) {
  %295 = fn (%var_1216: Tensor[(1, 165), float32]) -> (Tensor[(14, 10, 8), float32], Tensor[(1, 6, 3), float64], Tensor[(1, 165), float32], Tensor[(252), uint64], Tensor[(7, 3, 12), float32]) {
    %278 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 10, 8), float32] */, dtype="float32") /* ty=Tensor[(14, 10, 8), float32] */;
    %279 = cast(-3.25989f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %280 = cast(%var_1216, dtype="float32") /* ty=Tensor[(1, 165), float32] */;
    %281 = reshape(%279, newshape=[]) /* ty=float32 */;
    %282 = reshape(%280, newshape=[165]) /* ty=Tensor[(165), float32] */;
    %283 = @func_870(%281, %282) /* ty=(Tensor[(2, 7, 7), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32]) */;
    %284 = cast(meta[relay.Constant][11] /* ty=Tensor[(252), uint64] */, dtype="uint64") /* ty=Tensor[(252), uint64] */;
    %285 = reshape(%284, newshape=[7, 3, 12]) /* ty=Tensor[(7, 3, 12), uint64] */;
    %286 = @func_937(%285) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(7, 3, 12), float32]) */;
    %287 = %286.0;
    %288 = cast(%287, dtype="float32") /* ty=Tensor[(7, 3, 12), float32] */;
    %289 = sigmoid(%288) /* ty=Tensor[(7, 3, 12), float32] */;
    %290 = cast(%289, dtype="float32") /* ty=Tensor[(7, 3, 12), float32] */;
    %291 = cast(-3.25989f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %292 = acos(%278) /* ty=Tensor[(14, 10, 8), float32] */;
    %293 = %283.1;
    %294 = mod(%290, %291) /* ty=Tensor[(7, 3, 12), float32] */;
    (%292, %293, %var_1216, meta[relay.Constant][11] /* ty=Tensor[(252), uint64] */, %294)
  };
  %295(%var_1251) /* ty=(Tensor[(14, 10, 8), float32], Tensor[(1, 6, 3), float64], Tensor[(1, 165), float32], Tensor[(252), uint64], Tensor[(7, 3, 12), float32]) */
}

def @func_4233(%var_4221: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), bool], Tensor[(5, 5, 9), uint16], Tensor[(225), uint16]) {
  %296 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
  %297 = cast(%var_4221, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %298 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%296, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %301 = cast(meta[relay.Constant][12] /* ty=Tensor[(225), uint16] */, dtype="uint16") /* ty=Tensor[(225), uint16] */;
  %302 = cast(meta[relay.Constant][12] /* ty=Tensor[(225), uint16] */, dtype="uint16") /* ty=Tensor[(225), uint16] */;
  %303 = reshape(%301, newshape=[5, 5, 9]) /* ty=Tensor[(5, 5, 9), uint16] */;
  %304 = reshape(%302, newshape=[5, 5, 9]) /* ty=Tensor[(5, 5, 9), uint16] */;
  %305 = greater_equal(%299, %300) /* ty=Tensor[(3, 11, 11), bool] */;
  %306 = @func_4182(%303, %304) /* ty=Tensor[(5, 5, 9), uint16] */;
  (%305, %306, meta[relay.Constant][12] /* ty=Tensor[(225), uint16] */)
}

def @func_3766(%var_3721: Tensor[(33, 5), float32]) -> (Tensor[(33, 5), float64],) {
  %307 = @func_2091() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) */;
  %308 = %307.2;
  %309 = cast(%308, dtype="int32") /* ty=Tensor[(33, 5), int32] */;
  %310 = shape_of(%var_3721, dtype="int32") /* ty=Tensor[(2), int32] */;
  %311 = cast(%var_3721, dtype="int32") /* ty=Tensor[(33, 5), int32] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %313 = left_shift(%311, %312) /* ty=Tensor[(33, 5), int32] */;
  %314 = cast(%var_3721, dtype="uint64") /* ty=Tensor[(33, 5), uint64] */;
  %315 = shape_of(%308, dtype="int32") /* ty=Tensor[(2), int32] */;
  %316 = cast(%308, dtype="uint64") /* ty=Tensor[(33, 5), uint64] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %318 = logical_xor(%316, %317) /* ty=Tensor[(33, 5), uint64] */;
  %319 = cast(%318, dtype="uint32") /* ty=Tensor[(33, 5), uint32] */;
  %320 = shape_of(%313, dtype="int32") /* ty=Tensor[(2), int32] */;
  %321 = cast(%313, dtype="uint32") /* ty=Tensor[(33, 5), uint32] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %323 = bitwise_xor(%321, %322) /* ty=Tensor[(33, 5), uint32] */;
  %324 = cast(%323, dtype="float32") /* ty=Tensor[(33, 5), float32] */;
  %325 = sigmoid(%324) /* ty=Tensor[(33, 5), float32] */;
  %326 = cast(%325, dtype="float64") /* ty=Tensor[(33, 5), float64] */;
  %327 = atan(%326) /* ty=Tensor[(33, 5), float64] */;
  (%327,)
}

def @func_6051() -> Tensor[(3, 11, 11), float64] {
  %328 = fn () -> Tensor[(3, 11, 11), float64] {
    @func_3231() /* ty=Tensor[(3, 11, 11), float64] */
  };
  %328() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_4176() -> Tensor[(1, 165), float64] {
  %330 = fn () -> Tensor[(1, 165), float64] {
    %329 = @func_4118() /* ty=(Tensor[(1, 165), float64],) */;
    %329.0
  };
  %330() /* ty=Tensor[(1, 165), float64] */
}

def @func_4938() -> (Tensor[(3, 11, 11), int8],) {
  %333 = fn () -> (Tensor[(3, 11, 11), int8],) {
    %331 = @func_4881() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), int8]) */;
    %332 = %331.1;
    (%332,)
  };
  %333() /* ty=(Tensor[(3, 11, 11), int8],) */
}

def @func_4903() -> (Tensor[(360), float64],) {
  %336 = fn () -> (Tensor[(360), float64],) {
    %334 = @func_4368() /* ty=(Tensor[(3, 165), float32], Tensor[(360), float64], Tensor[(3, 11, 11), float64]) */;
    %335 = %334.1;
    (%335,)
  };
  %336() /* ty=(Tensor[(360), float64],) */
}

def @func_3501() -> Tensor[(3, 11, 11), float64] {
  @func_2393() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_5130() -> Tensor[(3, 11, 11), float64] {
  %337 = @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %337.0
}

def @func_5961() -> Tensor[(3, 11, 11), float64] {
  %338 = fn () -> Tensor[(3, 11, 11), float64] {
    @func_3231() /* ty=Tensor[(3, 11, 11), float64] */
  };
  %338() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_3836(%var_3835: Tensor[(15, 3, 8), float64]) -> (Tensor[(3, 11, 11), float64], Tensor[(15, 3, 8), float64]) {
  %344 = fn (%var_3821: Tensor[(15, 3, 8), float64]) -> (Tensor[(3, 11, 11), float64], Tensor[(15, 3, 8), float64]) {
    %339 = cast(%var_3821, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
    %340 = rsqrt(%339) /* ty=Tensor[(15, 3, 8), float64] */;
    %341 = cast(%340, dtype="float64") /* ty=Tensor[(15, 3, 8), float64] */;
    %342 = @func_3501() /* ty=Tensor[(3, 11, 11), float64] */;
    %343 = log(%341) /* ty=Tensor[(15, 3, 8), float64] */;
    (%342, %343)
  };
  %344(%var_3835) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(15, 3, 8), float64]) */
}

def @func_4544() -> Tensor[(3, 11, 11), int32] {
  %345 = @func_4530() /* ty=(Tensor[(3, 11, 11), int32],) */;
  %345.0
}

def @func_5756(%var_5755: Tensor[(7, 165), float64]) -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(7, 165), uint32], Tensor[(33, 5), float64]) {
  %358 = fn (%var_5740: Tensor[(7, 165), float64]) -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(7, 165), uint32], Tensor[(33, 5), float64]) {
    %346 = @func_5525() /* ty=(Tensor[(3, 11, 11), float64],) */;
    %347 = @func_4727() /* ty=(Tensor[(3, 11, 11), float64],) */;
    %348 = @func_4175() /* ty=Tensor[(1, 165), float64] */;
    %349 = cast(%348, dtype="uint32") /* ty=Tensor[(1, 165), uint32] */;
    %350 = cast(%var_5740, dtype="uint32") /* ty=Tensor[(7, 165), uint32] */;
    %351 = cast(%348, dtype="float32") /* ty=Tensor[(1, 165), float32] */;
    %352 = reshape(%351, newshape=[33, 5]) /* ty=Tensor[(33, 5), float32] */;
    %353 = @func_3766(%352) /* ty=(Tensor[(33, 5), float64],) */;
    %354 = %346.0;
    %355 = %347.0;
    %356 = left_shift(%349, %350) /* ty=Tensor[(7, 165), uint32] */;
    %357 = %353.0;
    (%354, %355, %356, %357)
  };
  %358(%var_5755) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(7, 165), uint32], Tensor[(33, 5), float64]) */
}

def @func_3562() -> (Tensor[(12, 16, 15), float32],) {
  %360 = fn () -> (Tensor[(12, 16, 15), float32],) {
    %359 = @func_2764() /* ty=Tensor[(12, 16, 15), float32] */;
    (%359,)
  };
  %360() /* ty=(Tensor[(12, 16, 15), float32],) */
}

def @func_2023() -> (Tensor[(3, 11, 11), float64],) {
  @func_2021() /* ty=(Tensor[(3, 11, 11), float64],) */
}

def @func_307(%var_260: float32, %var_261: Tensor[(11, 5, 3), float32]) -> (Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) {
  %361 = cast(%var_260, dtype="bool") /* ty=bool */;
  %362 = cast(%var_261, dtype="bool") /* ty=Tensor[(11, 5, 3), bool] */;
  %363 = cast(%var_260, dtype="float64") /* ty=float64 */;
  %364 = reshape(%363, newshape=[]) /* ty=float64 */;
  %365 = @func_128(%364) /* ty=(Tensor[(1, 6, 3), float64],) */;
  %366 = cast(%var_260, dtype="float64") /* ty=float64 */;
  %367 = reshape(%366, newshape=[]) /* ty=float64 */;
  %368 = @func_128(%367) /* ty=(Tensor[(1, 6, 3), float64],) */;
  %369 = cast(%var_260, dtype="float64") /* ty=float64 */;
  %370 = reshape(%369, newshape=[]) /* ty=float64 */;
  %371 = @func_128(%370) /* ty=(Tensor[(1, 6, 3), float64],) */;
  %372 = less(%361, %362) /* ty=Tensor[(11, 5, 3), bool] */;
  %373 = %365.0;
  %374 = %368.0;
  %375 = %371.0;
  (%372, %373, %374, %375)
}

def @func_2091() -> (Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) {
  %376 = @func_2021() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %377 = cast(meta[relay.Constant][13] /* ty=Tensor[(33, 5), float32] */, dtype="float32") /* ty=Tensor[(33, 5), float32] */;
  %378 = reshape(%377, newshape=[1, 165]) /* ty=Tensor[(1, 165), float32] */;
  %379 = @func_1604(%378) /* ty=(Tensor[(7, 15, 8), int16], Tensor[(1, 165), float32], Tensor[(?, 6, 3), int64]) */;
  %380 = %376.0;
  %381 = %379.1;
  (%380, %381, meta[relay.Constant][13] /* ty=Tensor[(33, 5), float32] */)
}

def @func_5848(%var_5829: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), bool], Tensor[(8, 3, 7), uint16], Tensor[(168), uint16]) {
  %382 = @func_4727() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %383 = %382.0;
  %384 = cast(%var_5829, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%383, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %388 = cast(meta[relay.Constant][14] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %389 = cast(meta[relay.Constant][14] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %390 = reshape(%388, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), uint16] */;
  %391 = reshape(%389, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), uint16] */;
  %392 = greater(%386, %387) /* ty=Tensor[(3, 11, 11), bool] */;
  %393 = @func_4736(%390, %391) /* ty=Tensor[(8, 3, 7), uint16] */;
  (%392, %393, meta[relay.Constant][14] /* ty=Tensor[(168), uint16] */)
}

def @func_4531() -> (Tensor[(3, 11, 11), int32],) {
  %395 = fn () -> (Tensor[(3, 11, 11), int32],) {
    %394 = @func_4034() /* ty=Tensor[(3, 11, 11), int32] */;
    (%394,)
  };
  %395() /* ty=(Tensor[(3, 11, 11), int32],) */
}

def @func_4415() -> (Tensor[(3, 11, 11), float64],) {
  @func_4413() /* ty=(Tensor[(3, 11, 11), float64],) */
}

def @func_4185(%var_4183: Tensor[(5, 5, 9), uint16], %var_4184: Tensor[(5, 5, 9), uint16]) -> Tensor[(5, 5, 9), uint16] {
  %400 = fn (%var_4177: Tensor[(5, 5, 9), uint16], %var_4178: Tensor[(5, 5, 9), uint16]) -> Tensor[(5, 5, 9), uint16] {
    %396 = cast(%var_4178, dtype="uint16") /* ty=Tensor[(5, 5, 9), uint16] */;
    %397 = shape_of(%var_4177, dtype="int32") /* ty=Tensor[(3), int32] */;
    %398 = cast(%var_4177, dtype="uint16") /* ty=Tensor[(5, 5, 9), uint16] */;
    %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    minimum(%398, %399) /* ty=Tensor[(5, 5, 9), uint16] */
  };
  %400(%var_4183, %var_4184) /* ty=Tensor[(5, 5, 9), uint16] */
}

def @func_5626() -> (Tensor[(1, 165), float64], Tensor[(3, 11, 11), int8]) {
  %404 = fn () -> (Tensor[(1, 165), float64], Tensor[(3, 11, 11), int8]) {
    %401 = @func_4937() /* ty=(Tensor[(3, 11, 11), int8],) */;
    %402 = @func_4175() /* ty=Tensor[(1, 165), float64] */;
    %403 = %401.0;
    (%402, %403)
  };
  %404() /* ty=(Tensor[(1, 165), float64], Tensor[(3, 11, 11), int8]) */
}

def @func_2766() -> Tensor[(12, 16, 15), float32] {
  @func_2764() /* ty=Tensor[(12, 16, 15), float32] */
}

def @func_4054(%var_4053: Tensor[(11, 5, 13), float64]) -> Tensor[(11, 5, 13), float64] {
  %409 = fn (%var_4048: Tensor[(11, 5, 13), float64]) -> Tensor[(11, 5, 13), float64] {
    %405 = cast(%var_4048, dtype="float64") /* ty=Tensor[(11, 5, 13), float64] */;
    %406 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(11, 5, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %407 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 5, 13), float64] */, dtype="float64") /* ty=Tensor[(11, 5, 13), float64] */;
    %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%407, %408) /* ty=Tensor[(11, 5, 13), float64] */
  };
  %409(%var_4053) /* ty=Tensor[(11, 5, 13), float64] */
}

def @func_2931(%var_2920: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), float32],) {
  %410 = @func_1997() /* ty=Tensor[(3, 11, 11), float64] */;
  %411 = cast(%var_2920, dtype="uint32") /* ty=Tensor[(3, 11, 11), uint32] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="uint32") /* ty=Tensor[(3, 11, 11), uint32] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %415 = bitwise_xor(%413, %414) /* ty=Tensor[(3, 11, 11), uint32] */;
  %416 = cast(%415, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %417 = acosh(%416) /* ty=Tensor[(3, 11, 11), float32] */;
  (%417,)
}

def @func_2856() -> (Tensor[(12, 16, 15), float32], Tensor[(3, 11, 11), float64]) {
  @func_2854() /* ty=(Tensor[(12, 16, 15), float32], Tensor[(3, 11, 11), float64]) */
}

def @func_4304() -> (Tensor[(360), float64],) {
  %420 = fn () -> (Tensor[(360), float64],) {
    %418 = @func_4082() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(360), float64], Tensor[(3, 11, 11), uint8]) */;
    %419 = %418.2;
    (%419,)
  };
  %420() /* ty=(Tensor[(360), float64],) */
}

def @func_5680() -> Tensor[(360), float64] {
  %421 = @func_5400() /* ty=(Tensor[(360), float64],) */;
  %421.0
}

def @func_4882() -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), int8]) {
  %437 = fn () -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), int8]) {
    %422 = @func_2854() /* ty=(Tensor[(12, 16, 15), float32], Tensor[(3, 11, 11), float64]) */;
    %423 = @func_2091() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) */;
    %424 = %423.0;
    %425 = @func_3231() /* ty=Tensor[(3, 11, 11), float64] */;
    %426 = cast(%425, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
    %427 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
    %428 = cast(%424, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
    %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %430 = divide(%428, %429) /* ty=Tensor[(3, 11, 11), float32] */;
    %431 = cast(%430, dtype="int8") /* ty=Tensor[(3, 11, 11), int8] */;
    %432 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
    %433 = cast(%424, dtype="int8") /* ty=Tensor[(3, 11, 11), int8] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %435 = %422.1;
    %436 = bitwise_or(%433, %434) /* ty=Tensor[(3, 11, 11), int8] */;
    (%435, %436)
  };
  %437() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), int8]) */
}

def @func_2735(%var_2734: float32) -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(3, 165), float32], Tensor[(1, 6, 3), float64]) {
  %454 = fn (%var_2707: float32) -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(3, 165), float32], Tensor[(1, 6, 3), float64]) {
    %438 = @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */;
    %439 = cast(%var_2707, dtype="float32") /* ty=float32 */;
    %440 = cast(meta[relay.Constant][16] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
    %441 = reshape(%439, newshape=[]) /* ty=float32 */;
    %442 = reshape(%440, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
    %443 = @func_307(%441, %442) /* ty=(Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) */;
    %444 = cast(meta[relay.Constant][16] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
    %445 = reshape(%444, newshape=[165]) /* ty=Tensor[(165), float32] */;
    %446 = @func_2467(%445) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 6, 3), float64], Tensor[(1755), float64], Tensor[(3, 11, 11), float32]) */;
    %447 = @func_2393() /* ty=Tensor[(3, 11, 11), float64] */;
    %448 = %438.0;
    %449 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
    %450 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
    %451 = %443.1;
    %452 = @func_2126() /* ty=Tensor[(3, 165), float32] */;
    %453 = %446.4;
    (%447, %448, %449, %450, %451, %var_2707, meta[relay.Constant][16] /* ty=Tensor[(165), float32] */, %452, %453)
  };
  %454(%var_2734) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(3, 165), float32], Tensor[(1, 6, 3), float64]) */
}

def @func_2764() -> Tensor[(12, 16, 15), float32] {
  %455 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 15), float32] */;
  acosh(%455) /* ty=Tensor[(12, 16, 15), float32] */
}

def @func_2384(%var_2382: float32, %var_2383: Tensor[(165), float32]) -> (Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32]) {
  @func_2380(%var_2382, %var_2383) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32]) */
}

def @func_4035() -> Tensor[(3, 11, 11), int32] {
  %461 = fn () -> Tensor[(3, 11, 11), int32] {
    %456 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
    %457 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 11, 11), float64] */, dtype="int32") /* ty=Tensor[(3, 11, 11), int32] */;
    %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
    %459 = cast(%456, dtype="int32") /* ty=Tensor[(3, 11, 11), int32] */;
    %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    logical_xor(%459, %460) /* ty=Tensor[(3, 11, 11), int32] */
  };
  %461() /* ty=Tensor[(3, 11, 11), int32] */
}

def @func_3472(%var_3469: Tensor[(10, 11, 12), float64], %var_3470: Tensor[(7, 6, 3), float64], %var_3471: Tensor[(10, 11, 12), float64]) -> (Tensor[(10, 11, 12), float64], Tensor[(165), float32], Tensor[(7, 6, 3), int8], Tensor[(3, 11, 11), float64], Tensor[(1, 6, 3), float64], float64, Tensor[(10, 11, 12), int64]) {
  %484 = fn (%var_3390: Tensor[(10, 11, 12), float64], %var_3431: Tensor[(7, 6, 3), float64], %var_3462: Tensor[(10, 11, 12), float64]) -> (Tensor[(10, 11, 12), float64], Tensor[(165), float32], Tensor[(7, 6, 3), int8], Tensor[(3, 11, 11), float64], Tensor[(1, 6, 3), float64], float64, Tensor[(10, 11, 12), int64]) {
    %462 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 11, 12), float64] */, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
    %463 = shape_of(%var_3390, dtype="int32") /* ty=Tensor[(3), int32] */;
    %464 = cast(%var_3390, dtype="float64") /* ty=Tensor[(10, 11, 12), float64] */;
    %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %466 = cast(meta[relay.Constant][20] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
    %467 = reshape(%466, newshape=[165]) /* ty=Tensor[(165), float32] */;
    %468 = @func_2467(%467) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 6, 3), float64], Tensor[(1755), float64], Tensor[(3, 11, 11), float32]) */;
    %469 = %468.4;
    %470 = cast(%469, dtype="int8") /* ty=Tensor[(1, 6, 3), int8] */;
    %471 = cast(%var_3431, dtype="int8") /* ty=Tensor[(7, 6, 3), int8] */;
    %472 = cast(8.22495f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %473 = reshape(%472, newshape=[]) /* ty=float64 */;
    %474 = @func_128(%473) /* ty=(Tensor[(1, 6, 3), float64],) */;
    %475 = cast(%var_3462, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
    %476 = shape_of(%var_3390, dtype="int32") /* ty=Tensor[(3), int32] */;
    %477 = cast(%var_3390, dtype="int64") /* ty=Tensor[(10, 11, 12), int64] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %479 = floor_divide(%464, %465) /* ty=Tensor[(10, 11, 12), float64] */;
    %480 = bitwise_xor(%470, %471) /* ty=Tensor[(7, 6, 3), int8] */;
    %481 = @func_1997() /* ty=Tensor[(3, 11, 11), float64] */;
    %482 = %474.0;
    %483 = bitwise_or(%477, %478) /* ty=Tensor[(10, 11, 12), int64] */;
    (%479, meta[relay.Constant][20] /* ty=Tensor[(165), float32] */, %480, %481, %482, 8.22495f64 /* ty=float64 */, %483)
  };
  %484(%var_3469, %var_3470, %var_3471) /* ty=(Tensor[(10, 11, 12), float64], Tensor[(165), float32], Tensor[(7, 6, 3), int8], Tensor[(3, 11, 11), float64], Tensor[(1, 6, 3), float64], float64, Tensor[(10, 11, 12), int64]) */
}

def @func_4236(%var_4234: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), bool], Tensor[(5, 5, 9), uint16], Tensor[(225), uint16]) {
  @func_4233(%var_4234) /* ty=(Tensor[(3, 11, 11), bool], Tensor[(5, 5, 9), uint16], Tensor[(225), uint16]) */
}

def @func_5132() -> Tensor[(3, 11, 11), float64] {
  @func_5130() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_5895() -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), int8], Tensor[(1, 165), float32], Tensor[(?, 165), int64]) {
  %485 = @func_5625() /* ty=(Tensor[(1, 165), float64], Tensor[(3, 11, 11), int8]) */;
  %486 = @func_4175() /* ty=Tensor[(1, 165), float64] */;
  %487 = cast(%486, dtype="float32") /* ty=Tensor[(1, 165), float32] */;
  %488 = cast(%486, dtype="float64") /* ty=Tensor[(1, 165), float64] */;
  %489 = acosh(%488) /* ty=Tensor[(1, 165), float64] */;
  %490 = cast(%486, dtype="int64") /* ty=Tensor[(1, 165), int64] */;
  %491 = shape_of(%489, dtype="int32") /* ty=Tensor[(2), int32] */;
  %492 = cast(%489, dtype="int64") /* ty=Tensor[(1, 165), int64] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %494 = @func_3501() /* ty=Tensor[(3, 11, 11), float64] */;
  %495 = %485.1;
  %496 = sqrt(%487) /* ty=Tensor[(1, 165), float32] */;
  %497 = subtract(%492, %493) /* ty=Tensor[(?, 165), int64] */;
  (%494, %495, %496, %497)
}

def @func_937(%var_925: Tensor[(7, 3, 12), uint64]) -> (Tensor[(7, 3, 12), bool], Tensor[(7, 3, 12), float32]) {
  %498 = cast(%var_925, dtype="bool") /* ty=Tensor[(7, 3, 12), bool] */;
  %499 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(7, 3, 12), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 3, 12), uint64] */, dtype="bool") /* ty=Tensor[(7, 3, 12), bool] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %502 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 3, 12), uint64] */, dtype="float32") /* ty=Tensor[(7, 3, 12), float32] */;
  %503 = less(%500, %501) /* ty=Tensor[(7, 3, 12), bool] */;
  %504 = acosh(%502) /* ty=Tensor[(7, 3, 12), float32] */;
  (%503, %504)
}

def @func_4728() -> (Tensor[(3, 11, 11), float64],) {
  %506 = fn () -> (Tensor[(3, 11, 11), float64],) {
    %505 = @func_3501() /* ty=Tensor[(3, 11, 11), float64] */;
    (%505,)
  };
  %506() /* ty=(Tensor[(3, 11, 11), float64],) */
}

def @func_5477() -> (Tensor[(3, 11, 11), float64], Tensor[(360), float64]) {
  %511 = fn () -> (Tensor[(3, 11, 11), float64], Tensor[(360), float64]) {
    %507 = @func_4638() /* ty=(Tensor[(3, 11, 11), float64],) */;
    %508 = @func_4303() /* ty=(Tensor[(360), float64],) */;
    %509 = %507.0;
    %510 = %508.0;
    (%509, %510)
  };
  %511() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(360), float64]) */
}

def @func_6090() -> (Tensor[(3, 11, 11), float64],) {
  @func_6088() /* ty=(Tensor[(3, 11, 11), float64],) */
}

def @func_2671(%var_2669: Tensor[(165), float32]) -> (Tensor[(3, 11, 11), uint8], Tensor[(?, 6, 3), int64], Tensor[(165), float32]) {
  @func_2668(%var_2669) /* ty=(Tensor[(3, 11, 11), uint8], Tensor[(?, 6, 3), int64], Tensor[(165), float32]) */
}

def @func_4393() -> Tensor[(12, 16, 15), float32] {
  %513 = fn () -> Tensor[(12, 16, 15), float32] {
    %512 = @func_3561() /* ty=(Tensor[(12, 16, 15), float32],) */;
    %512.0
  };
  %513() /* ty=Tensor[(12, 16, 15), float32] */
}

def @func_4640() -> (Tensor[(3, 11, 11), float64],) {
  @func_4638() /* ty=(Tensor[(3, 11, 11), float64],) */
}

def @func_4275() -> Tensor[(11, 3, 11), float32] {
  %514 = fn () -> Tensor[(11, 3, 11), float32] {
    @func_4190() /* ty=Tensor[(11, 3, 11), float32] */
  };
  %514() /* ty=Tensor[(11, 3, 11), float32] */
}

def @func_1743(%var_1680: Tensor[(2, 14, 2), uint64], %var_1681: Tensor[(2, 14, 2), uint64], %var_1699: Tensor[(2, 14, 2), uint64]) -> (Tensor[(2, 14, 2), bool], Tensor[(2, 14, 2), bool], Tensor[(13, 15, 9), bool], Tensor[(?, 1755), bool]) {
  %515 = cast(%var_1681, dtype="bool") /* ty=Tensor[(2, 14, 2), bool] */;
  %516 = shape_of(%var_1680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%var_1680, dtype="bool") /* ty=Tensor[(2, 14, 2), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %519 = cast(%var_1699, dtype="bool") /* ty=Tensor[(2, 14, 2), bool] */;
  %520 = shape_of(%var_1680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%var_1680, dtype="bool") /* ty=Tensor[(2, 14, 2), bool] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %523 = cast(0.952312f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %524 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 1755), float64] */, dtype="float64") /* ty=Tensor[(1, 1755), float64] */;
  %525 = reshape(%523, newshape=[]) /* ty=float64 */;
  %526 = reshape(%524, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float64] */;
  %527 = @func_1295(%525, %526) /* ty=(Tensor[(13, 15, 9), bool], Tensor[(1, 6, 3), float64], Tensor[(252), uint64], Tensor[(165), float32]) */;
  %528 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 1755), float64] */, dtype="bool") /* ty=Tensor[(1, 1755), bool] */;
  %529 = cast(0.952312f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %530 = greater(%528, %529) /* ty=Tensor[(1, 1755), bool] */;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(1, 1755), float64] */;
  %532 = sin(%531) /* ty=Tensor[(1, 1755), float64] */;
  %533 = cast(%532, dtype="bool") /* ty=Tensor[(1, 1755), bool] */;
  %534 = cast(0.952312f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %535 = not_equal(%533, %534) /* ty=Tensor[(1, 1755), bool] */;
  %536 = cast(%535, dtype="bool") /* ty=Tensor[(1, 1755), bool] */;
  %537 = shape_of(%532, dtype="int32") /* ty=Tensor[(2), int32] */;
  %538 = cast(%532, dtype="bool") /* ty=Tensor[(1, 1755), bool] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %540 = less_equal(%517, %518) /* ty=Tensor[(2, 14, 2), bool] */;
  %541 = less(%521, %522) /* ty=Tensor[(2, 14, 2), bool] */;
  %542 = %527.0;
  %543 = logical_and(%538, %539) /* ty=Tensor[(?, 1755), bool] */;
  (%540, %541, %542, %543)
}

def @func_5526() -> (Tensor[(3, 11, 11), float64],) {
  %546 = fn () -> (Tensor[(3, 11, 11), float64],) {
    %544 = @func_2021() /* ty=(Tensor[(3, 11, 11), float64],) */;
    %545 = %544.0;
    (%545,)
  };
  %546() /* ty=(Tensor[(3, 11, 11), float64],) */
}

def @func_2093() -> (Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) {
  @func_2091() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) */
}

def @func_2128() -> Tensor[(3, 165), float32] {
  @func_2126() /* ty=Tensor[(3, 165), float32] */
}

def @func_3538(%var_3536: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), bool], Tensor[(3, 11, 11), bool]) {
  @func_3535(%var_3536) /* ty=(Tensor[(3, 11, 11), bool], Tensor[(3, 11, 11), bool]) */
}

def @func_2834(%var_2782: Tensor[(3, 11, 11), float64], %var_2791: float32, %var_2792: Tensor[(165), float32]) -> (Tensor[(3, 11, 11), bool], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(3, 11, 11), float64]) {
  %547 = @func_2021() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %548 = %547.0;
  %549 = cast(%var_2782, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%548, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %553 = cast(%var_2791, dtype="float32") /* ty=float32 */;
  %554 = cast(%var_2792, dtype="float32") /* ty=Tensor[(165), float32] */;
  %555 = reshape(%553, newshape=[]) /* ty=float32 */;
  %556 = reshape(%554, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
  %557 = @func_307(%555, %556) /* ty=(Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) */;
  %558 = cast(%var_2782, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %559 = sigmoid(%558) /* ty=Tensor[(3, 11, 11), float64] */;
  %560 = cast(%559, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %561 = less(%551, %552) /* ty=Tensor[(3, 11, 11), bool] */;
  %562 = %557.2;
  %563 = cosh(%560) /* ty=Tensor[(3, 11, 11), float64] */;
  (%561, %562, %var_2791, %var_2792, %563)
}

def @func_1748(%var_1745: Tensor[(2, 14, 2), uint64], %var_1746: Tensor[(2, 14, 2), uint64], %var_1747: Tensor[(2, 14, 2), uint64]) -> (Tensor[(2, 14, 2), bool], Tensor[(2, 14, 2), bool], Tensor[(13, 15, 9), bool], Tensor[(?, 1755), bool]) {
  @func_1743(%var_1745, %var_1746, %var_1747) /* ty=(Tensor[(2, 14, 2), bool], Tensor[(2, 14, 2), bool], Tensor[(13, 15, 9), bool], Tensor[(?, 1755), bool]) */
}

def @func_4435() -> (Tensor[(7, 14, 16), float32], Tensor[(1, 165), float64]) {
  %567 = fn () -> (Tensor[(7, 14, 16), float32], Tensor[(1, 165), float64]) {
    %564 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 14, 16), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 16), float32] */;
    %565 = acosh(%564) /* ty=Tensor[(7, 14, 16), float32] */;
    %566 = @func_4175() /* ty=Tensor[(1, 165), float64] */;
    (%565, %566)
  };
  %567() /* ty=(Tensor[(7, 14, 16), float32], Tensor[(1, 165), float64]) */
}

def @func_6088() -> (Tensor[(3, 11, 11), float64],) {
  %568 = @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %569 = %568.0;
  (%569,)
}

def @func_5015() -> (Tensor[(360), float64],) {
  %572 = fn () -> (Tensor[(360), float64],) {
    %570 = @func_4902() /* ty=(Tensor[(360), float64],) */;
    %571 = %570.0;
    (%571,)
  };
  %572() /* ty=(Tensor[(360), float64],) */
}

def @func_130(%var_129: float64) -> (Tensor[(1, 6, 3), float64],) {
  %576 = fn (%var_122: float64) -> (Tensor[(1, 6, 3), float64],) {
    %573 = cast(%var_122, dtype="float64") /* ty=float64 */;
    %574 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 6, 3), float64] */, dtype="float64") /* ty=Tensor[(1, 6, 3), float64] */;
    %575 = floor_mod(%573, %574) /* ty=Tensor[(1, 6, 3), float64] */;
    (%575,)
  };
  %576(%var_129) /* ty=(Tensor[(1, 6, 3), float64],) */
}

def @func_5400() -> (Tensor[(360), float64],) {
  %577 = @func_4303() /* ty=(Tensor[(360), float64],) */;
  %578 = %577.0;
  (%578,)
}

def @func_2934(%var_2932: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), float32],) {
  @func_2931(%var_2932) /* ty=(Tensor[(3, 11, 11), float32],) */
}

def @func_4369() -> (Tensor[(3, 165), float32], Tensor[(360), float64], Tensor[(3, 11, 11), float64]) {
  %584 = fn () -> (Tensor[(3, 165), float32], Tensor[(360), float64], Tensor[(3, 11, 11), float64]) {
    %579 = @func_4303() /* ty=(Tensor[(360), float64],) */;
    %580 = @func_2854() /* ty=(Tensor[(12, 16, 15), float32], Tensor[(3, 11, 11), float64]) */;
    %581 = @func_2126() /* ty=Tensor[(3, 165), float32] */;
    %582 = %579.0;
    %583 = %580.1;
    (%581, %582, %583)
  };
  %584() /* ty=(Tensor[(3, 165), float32], Tensor[(360), float64], Tensor[(3, 11, 11), float64]) */
}

def @func_3503() -> Tensor[(3, 11, 11), float64] {
  @func_3501() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_5952(%var_5950: Tensor[(5, 4, 4), uint32], %var_5951: Tensor[(5, 4, 4), uint32]) -> (Tensor[(5, 4, 4), uint32], Tensor[(5, 4, 4), float64]) {
  %595 = fn (%var_5913: Tensor[(5, 4, 4), uint32], %var_5914: Tensor[(5, 4, 4), uint32]) -> (Tensor[(5, 4, 4), uint32], Tensor[(5, 4, 4), float64]) {
    %585 = cast(%var_5914, dtype="uint32") /* ty=Tensor[(5, 4, 4), uint32] */;
    %586 = shape_of(%var_5913, dtype="int32") /* ty=Tensor[(3), int32] */;
    %587 = cast(%var_5913, dtype="uint32") /* ty=Tensor[(5, 4, 4), uint32] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %589 = cast(%var_5913, dtype="float64") /* ty=Tensor[(5, 4, 4), float64] */;
    %590 = shape_of(%var_5914, dtype="int32") /* ty=Tensor[(3), int32] */;
    %591 = cast(%var_5914, dtype="float64") /* ty=Tensor[(5, 4, 4), float64] */;
    %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %593 = bitwise_or(%587, %588) /* ty=Tensor[(5, 4, 4), uint32] */;
    %594 = divide(%591, %592) /* ty=Tensor[(5, 4, 4), float64] */;
    (%593, %594)
  };
  %595(%var_5950, %var_5951) /* ty=(Tensor[(5, 4, 4), uint32], Tensor[(5, 4, 4), float64]) */
}

def @func_6124() -> (Tensor[(3, 11, 11), uint8],) {
  %596 = @func_4082() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(360), float64], Tensor[(3, 11, 11), uint8]) */;
  %597 = %596.3;
  (%597,)
}

def @func_940(%var_938: Tensor[(7, 3, 12), uint64]) -> (Tensor[(7, 3, 12), bool], Tensor[(7, 3, 12), float32]) {
  @func_937(%var_938) /* ty=(Tensor[(7, 3, 12), bool], Tensor[(7, 3, 12), float32]) */
}

def @func_2414() -> Tensor[(3, 11, 11), float64] {
  @func_1997() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_6018(%var_6017: Tensor[(165), float32]) -> (Tensor[(360), float64], Tensor[(3, 11, 11), float32], Tensor[(165), float32], Tensor[(12, 16, 15), float32]) {
  %604 = fn (%var_6001: Tensor[(165), float32]) -> (Tensor[(360), float64], Tensor[(3, 11, 11), float32], Tensor[(165), float32], Tensor[(12, 16, 15), float32]) {
    %598 = cast(%var_6001, dtype="float32") /* ty=Tensor[(165), float32] */;
    %599 = reshape(%598, newshape=[165]) /* ty=Tensor[(165), float32] */;
    %600 = @func_2467(%599) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 6, 3), float64], Tensor[(1755), float64], Tensor[(3, 11, 11), float32]) */;
    %601 = @func_5680() /* ty=Tensor[(360), float64] */;
    %602 = %600.6;
    %603 = @func_4616() /* ty=Tensor[(12, 16, 15), float32] */;
    (%601, %602, %var_6001, %603)
  };
  %604(%var_6017) /* ty=(Tensor[(360), float64], Tensor[(3, 11, 11), float32], Tensor[(165), float32], Tensor[(12, 16, 15), float32]) */
}

def @func_4736(%var_4731: Tensor[(8, 3, 7), uint16], %var_4732: Tensor[(8, 3, 7), uint16]) -> Tensor[(8, 3, 7), uint16] {
  %605 = cast(%var_4732, dtype="uint16") /* ty=Tensor[(8, 3, 7), uint16] */;
  %606 = shape_of(%var_4731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%var_4731, dtype="uint16") /* ty=Tensor[(8, 3, 7), uint16] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  maximum(%607, %608) /* ty=Tensor[(8, 3, 7), uint16] */
}

def @func_3769(%var_3767: Tensor[(33, 5), float32]) -> (Tensor[(33, 5), float64],) {
  @func_3766(%var_3767) /* ty=(Tensor[(33, 5), float64],) */
}

def @func_2469(%var_2468: Tensor[(165), float32]) -> (Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 6, 3), float64], Tensor[(1755), float64], Tensor[(3, 11, 11), float32]) {
  %627 = fn (%var_2440: Tensor[(165), float32]) -> (Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 6, 3), float64], Tensor[(1755), float64], Tensor[(3, 11, 11), float32]) {
    %609 = cast(4.21793f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %610 = cast(%var_2440, dtype="float32") /* ty=Tensor[(165), float32] */;
    %611 = reshape(%609, newshape=[]) /* ty=float32 */;
    %612 = reshape(%610, newshape=[165]) /* ty=Tensor[(165), float32] */;
    %613 = @func_870(%611, %612) /* ty=(Tensor[(2, 7, 7), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32]) */;
    %614 = cast(4.21793f /* ty=float32 */, dtype="float64") /* ty=float64 */;
    %615 = cast(meta[relay.Constant][25] /* ty=Tensor[(1755), float64] */, dtype="float64") /* ty=Tensor[(1755), float64] */;
    %616 = reshape(%614, newshape=[]) /* ty=float64 */;
    %617 = reshape(%615, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float64] */;
    %618 = @func_1295(%616, %617) /* ty=(Tensor[(13, 15, 9), bool], Tensor[(1, 6, 3), float64], Tensor[(252), uint64], Tensor[(165), float32]) */;
    %619 = @func_2393() /* ty=Tensor[(3, 11, 11), float64] */;
    %620 = cast(%619, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
    %621 = atanh(%620) /* ty=Tensor[(3, 11, 11), float64] */;
    %622 = cast(%621, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
    %623 = @func_2414() /* ty=Tensor[(3, 11, 11), float64] */;
    %624 = %613.3;
    %625 = %618.1;
    %626 = exp(%622) /* ty=Tensor[(3, 11, 11), float32] */;
    (%623, %624, 4.21793f /* ty=float32 */, %var_2440, %625, meta[relay.Constant][25] /* ty=Tensor[(1755), float64] */, %626)
  };
  %627(%var_2468) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 6, 3), float64], Tensor[(1755), float64], Tensor[(3, 11, 11), float32]) */
}

def @func_1998() -> Tensor[(3, 11, 11), float64] {
  %630 = fn () -> Tensor[(3, 11, 11), float64] {
    %628 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 11, 1), float64] */, dtype="float64") /* ty=Tensor[(3, 11, 1), float64] */;
    %629 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 11, 11), float64] */, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
    power(%628, %629) /* ty=Tensor[(3, 11, 11), float64] */
  };
  %630() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_2854() -> (Tensor[(12, 16, 15), float32], Tensor[(3, 11, 11), float64]) {
  %631 = @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */;
  %632 = %631.0;
  %633 = cast(%632, dtype="float64") /* ty=Tensor[(3, 11, 11), float64] */;
  %634 = @func_2764() /* ty=Tensor[(12, 16, 15), float32] */;
  %635 = asinh(%633) /* ty=Tensor[(3, 11, 11), float64] */;
  (%634, %635)
}

def @func_5488() -> Tensor[(3, 11, 11), float64] {
  %636 = fn () -> Tensor[(3, 11, 11), float64] {
    @func_2393() /* ty=Tensor[(3, 11, 11), float64] */
  };
  %636() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_5805(%var_5804: Tensor[(5, 6, 13), float32]) -> Tensor[(5, 6, 13), float32] {
  %641 = fn (%var_5797: Tensor[(5, 6, 13), float32]) -> Tensor[(5, 6, 13), float32] {
    %637 = cast(%var_5797, dtype="float32") /* ty=Tensor[(5, 6, 13), float32] */;
    %638 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(5, 6, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %639 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 6, 13), float32] */, dtype="float32") /* ty=Tensor[(5, 6, 13), float32] */;
    %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%639, %640) /* ty=Tensor[(5, 6, 13), float32] */
  };
  %641(%var_5804) /* ty=Tensor[(5, 6, 13), float32] */
}

def @func_3035() -> Tensor[(3, 11, 11), float64] {
  %643 = fn () -> Tensor[(3, 11, 11), float64] {
    %642 = @func_2021() /* ty=(Tensor[(3, 11, 11), float64],) */;
    %642.0
  };
  %643() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_4084() -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(360), float64], Tensor[(3, 11, 11), uint8]) {
  @func_4082() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), float64], Tensor[(360), float64], Tensor[(3, 11, 11), uint8]) */
}

def @func_3535(%var_3517: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), bool], Tensor[(3, 11, 11), bool]) {
  %644 = @func_2393() /* ty=Tensor[(3, 11, 11), float64] */;
  %645 = cast(%var_3517, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(%644, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %649 = cast(%644, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %650 = shape_of(%var_3517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%var_3517, dtype="bool") /* ty=Tensor[(3, 11, 11), bool] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %653 = logical_or(%647, %648) /* ty=Tensor[(3, 11, 11), bool] */;
  %654 = less_equal(%651, %652) /* ty=Tensor[(3, 11, 11), bool] */;
  (%653, %654)
}

def @func_870(%var_866: float32, %var_867: Tensor[(165), float32]) -> (Tensor[(2, 7, 7), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32]) {
  %655 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 7, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 7, 7), float64] */;
  %656 = asinh(%655) /* ty=Tensor[(2, 7, 7), float64] */;
  %657 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 7, 7), float64] */, dtype="bool") /* ty=Tensor[(2, 7, 7), bool] */;
  %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%656, dtype="bool") /* ty=Tensor[(2, 7, 7), bool] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %661 = greater_equal(%659, %660) /* ty=Tensor[(2, 7, 7), bool] */;
  %662 = cast(%661, dtype="float64") /* ty=Tensor[(2, 7, 7), float64] */;
  %663 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%656, dtype="float64") /* ty=Tensor[(2, 7, 7), float64] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %666 = cast(%var_866, dtype="float32") /* ty=float32 */;
  %667 = cast(%var_867, dtype="float32") /* ty=Tensor[(165), float32] */;
  %668 = reshape(%666, newshape=[]) /* ty=float32 */;
  %669 = reshape(%667, newshape=[11, 5, 3]) /* ty=Tensor[(11, 5, 3), float32] */;
  %670 = @func_307(%668, %669) /* ty=(Tensor[(11, 5, 3), bool], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64], Tensor[(1, 6, 3), float64]) */;
  %671 = floor_mod(%664, %665) /* ty=Tensor[(2, 7, 7), float64] */;
  %672 = %670.3;
  (%671, %672, %var_866, %var_867)
}

def @func_5036() -> (Tensor[(360), float64],) {
  %673 = @func_4902() /* ty=(Tensor[(360), float64],) */;
  %674 = %673.0;
  (%674,)
}

def @func_2172(%var_2170: Tensor[(165), float32], %var_2171: Tensor[(5, 66), float64]) -> (Tensor[(3, 11, 11), float32], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(15, 2, 11), float64], Tensor[(5, 66), float64]) {
  %689 = fn (%var_2149: Tensor[(165), float32], %var_2163: Tensor[(5, 66), float64]) -> (Tensor[(3, 11, 11), float32], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(15, 2, 11), float64], Tensor[(5, 66), float64]) {
    %675 = @func_2021() /* ty=(Tensor[(3, 11, 11), float64],) */;
    %676 = %675.0;
    %677 = cast(%676, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
    %678 = cast(4.3404f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %679 = cast(%var_2149, dtype="float32") /* ty=Tensor[(165), float32] */;
    %680 = reshape(%678, newshape=[]) /* ty=float32 */;
    %681 = reshape(%679, newshape=[165]) /* ty=Tensor[(165), float32] */;
    %682 = @func_870(%680, %681) /* ty=(Tensor[(2, 7, 7), float64], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32]) */;
    %683 = cast(%var_2163, dtype="float64") /* ty=Tensor[(5, 66), float64] */;
    %684 = reshape(%683, newshape=[15, 2, 11]) /* ty=Tensor[(15, 2, 11), float64] */;
    %685 = @func_1966(%684) /* ty=(Tensor[(15, 2, 11), float64],) */;
    %686 = atan(%677) /* ty=Tensor[(3, 11, 11), float32] */;
    %687 = %682.1;
    %688 = %685.0;
    (%686, %687, 4.3404f /* ty=float32 */, %var_2149, %688, %var_2163)
  };
  %689(%var_2170, %var_2171) /* ty=(Tensor[(3, 11, 11), float32], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(15, 2, 11), float64], Tensor[(5, 66), float64]) */
}

def @func_2021() -> (Tensor[(3, 11, 11), float64],) {
  %690 = @func_1997() /* ty=Tensor[(3, 11, 11), float64] */;
  (%690,)
}

def @func_5682() -> Tensor[(360), float64] {
  @func_5680() /* ty=Tensor[(360), float64] */
}

def @func_2839(%var_2836: Tensor[(3, 11, 11), float64], %var_2837: float32, %var_2838: Tensor[(165), float32]) -> (Tensor[(3, 11, 11), bool], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(3, 11, 11), float64]) {
  @func_2834(%var_2836, %var_2837, %var_2838) /* ty=(Tensor[(3, 11, 11), bool], Tensor[(1, 6, 3), float64], float32, Tensor[(165), float32], Tensor[(3, 11, 11), float64]) */
}

def @func_1298(%var_1296: float64, %var_1297: Tensor[(13, 15, 9), float64]) -> (Tensor[(13, 15, 9), bool], Tensor[(1, 6, 3), float64], Tensor[(252), uint64], Tensor[(165), float32]) {
  %702 = fn (%var_1257: float64, %var_1258: Tensor[(13, 15, 9), float64]) -> (Tensor[(13, 15, 9), bool], Tensor[(1, 6, 3), float64], Tensor[(252), uint64], Tensor[(165), float32]) {
    %691 = cast(%var_1257, dtype="bool") /* ty=bool */;
    %692 = cast(%var_1258, dtype="bool") /* ty=Tensor[(13, 15, 9), bool] */;
    %693 = cast(%var_1257, dtype="float64") /* ty=float64 */;
    %694 = reshape(%693, newshape=[]) /* ty=float64 */;
    %695 = @func_128(%694) /* ty=(Tensor[(1, 6, 3), float64],) */;
    %696 = cast(meta[relay.Constant][30] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
    %697 = reshape(%696, newshape=[1, 165]) /* ty=Tensor[(1, 165), float32] */;
    %698 = @func_1250(%697) /* ty=(Tensor[(14, 10, 8), float32], Tensor[(1, 6, 3), float64], Tensor[(1, 165), float32], Tensor[(252), uint64], Tensor[(7, 3, 12), float32]) */;
    %699 = greater_equal(%691, %692) /* ty=Tensor[(13, 15, 9), bool] */;
    %700 = %695.0;
    %701 = %698.3;
    (%699, %700, %701, meta[relay.Constant][30] /* ty=Tensor[(165), float32] */)
  };
  %702(%var_1296, %var_1297) /* ty=(Tensor[(13, 15, 9), bool], Tensor[(1, 6, 3), float64], Tensor[(252), uint64], Tensor[(165), float32]) */
}

def @func_2540(%var_2518: int8, %var_2519: Tensor[(36, 2), int8]) -> (Tensor[(3, 11, 11), float64], int8, Tensor[(36, 2), int8], Tensor[(2, 9, 4), float32]) {
  %703 = @func_2091() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) */;
  %704 = cast(%var_2518, dtype="int8") /* ty=int8 */;
  %705 = cast(%var_2519, dtype="int8") /* ty=Tensor[(36, 2), int8] */;
  %706 = reshape(%704, newshape=[]) /* ty=int8 */;
  %707 = reshape(%705, newshape=[2, 9, 4]) /* ty=Tensor[(2, 9, 4), int8] */;
  %708 = @func_2049(%706, %707) /* ty=(Tensor[(2, 9, 4), int8],) */;
  %709 = %708.0;
  %710 = cast(%709, dtype="float32") /* ty=Tensor[(2, 9, 4), float32] */;
  %711 = %703.0;
  %712 = log(%710) /* ty=Tensor[(2, 9, 4), float32] */;
  (%711, %var_2518, %var_2519, %712)
}

def @func_2126() -> Tensor[(3, 165), float32] {
  %713 = @func_2091() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(1, 165), float32], Tensor[(33, 5), float32]) */;
  %714 = %713.1;
  %715 = cast(%714, dtype="int64") /* ty=Tensor[(1, 165), int64] */;
  %716 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 165), float32] */, dtype="int64") /* ty=Tensor[(3, 165), int64] */;
  %717 = logical_xor(%715, %716) /* ty=Tensor[(3, 165), int64] */;
  %718 = cast(%717, dtype="float32") /* ty=Tensor[(3, 165), float32] */;
  log10(%718) /* ty=Tensor[(3, 165), float32] */
}

def @func_3864() -> (Tensor[(3, 165), float32],) {
  @func_3862() /* ty=(Tensor[(3, 165), float32],) */
}

def @func_2240(%var_2237: Tensor[(3, 11, 11), float64], %var_2238: Tensor[(165, 1), float32], %var_2239: Tensor[(55, 6), float64]) -> (Tensor[(3, 11, 11), uint8], float32, Tensor[(165, 1), float32], Tensor[(55, 6), float64]) {
  @func_2235(%var_2237, %var_2238, %var_2239) /* ty=(Tensor[(3, 11, 11), uint8], float32, Tensor[(165, 1), float32], Tensor[(55, 6), float64]) */
}

def @func_4546() -> Tensor[(3, 11, 11), int32] {
  @func_4544() /* ty=Tensor[(3, 11, 11), int32] */
}

def @func_2306() -> (Tensor[(3, 11, 11), float64],) {
  %719 = @func_1997() /* ty=Tensor[(3, 11, 11), float64] */;
  (%719,)
}

def @func_2308() -> (Tensor[(3, 11, 11), float64],) {
  @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */
}

def @func_4740(%var_4738: Tensor[(8, 3, 7), uint16], %var_4739: Tensor[(8, 3, 7), uint16]) -> Tensor[(8, 3, 7), uint16] {
  @func_4736(%var_4738, %var_4739) /* ty=Tensor[(8, 3, 7), uint16] */
}

def @func_5897() -> (Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), int8], Tensor[(1, 165), float32], Tensor[(?, 165), int64]) {
  @func_5895() /* ty=(Tensor[(3, 11, 11), float64], Tensor[(3, 11, 11), int8], Tensor[(1, 165), float32], Tensor[(?, 165), int64]) */
}

def @func_2052(%var_2050: int8, %var_2051: Tensor[(2, 9, 4), int8]) -> (Tensor[(2, 9, 4), int8],) {
  %723 = fn (%var_2039: int8, %var_2040: Tensor[(2, 9, 4), int8]) -> (Tensor[(2, 9, 4), int8],) {
    %720 = cast(%var_2039, dtype="int8") /* ty=int8 */;
    %721 = cast(%var_2040, dtype="int8") /* ty=Tensor[(2, 9, 4), int8] */;
    %722 = right_shift(%720, %721) /* ty=Tensor[(2, 9, 4), int8] */;
    (%722,)
  };
  %723(%var_2050, %var_2051) /* ty=(Tensor[(2, 9, 4), int8],) */
}

def @func_5851(%var_5849: Tensor[(3, 11, 11), float64]) -> (Tensor[(3, 11, 11), bool], Tensor[(8, 3, 7), uint16], Tensor[(168), uint16]) {
  @func_5848(%var_5849) /* ty=(Tensor[(3, 11, 11), bool], Tensor[(8, 3, 7), uint16], Tensor[(168), uint16]) */
}

def @func_4617() -> Tensor[(12, 16, 15), float32] {
  %731 = fn () -> Tensor[(12, 16, 15), float32] {
    %724 = @func_2764() /* ty=Tensor[(12, 16, 15), float32] */;
    %725 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 16, 15), float32] */, dtype="float64") /* ty=Tensor[(12, 16, 15), float64] */;
    %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
    %727 = cast(%724, dtype="float64") /* ty=Tensor[(12, 16, 15), float64] */;
    %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %729 = floor_divide(%727, %728) /* ty=Tensor[(12, 16, 15), float64] */;
    %730 = cast(%729, dtype="float32") /* ty=Tensor[(12, 16, 15), float32] */;
    log(%730) /* ty=Tensor[(12, 16, 15), float32] */
  };
  %731() /* ty=Tensor[(12, 16, 15), float32] */
}

def @func_5221(%var_5218: Tensor[(8, 60), float32], %var_5219: Tensor[(15, 117), float64], %var_5220: Tensor[(15, 117), float64]) -> (Tensor[(3, 11, 11), float32], Tensor[(3, 11, 11), float64], Tensor[(12, 16, 15), float32], Tensor[(165), float32], Tensor[(8, 60), float32], Tensor[(15, 117), int64], Tensor[(3, 11, 11), uint8], Tensor[(1, 165), float64]) {
  @func_5216(%var_5218, %var_5219, %var_5220) /* ty=(Tensor[(3, 11, 11), float32], Tensor[(3, 11, 11), float64], Tensor[(12, 16, 15), float32], Tensor[(165), float32], Tensor[(8, 60), float32], Tensor[(15, 117), int64], Tensor[(3, 11, 11), uint8], Tensor[(1, 165), float64]) */
}

def @func_2544(%var_2542: int8, %var_2543: Tensor[(36, 2), int8]) -> (Tensor[(3, 11, 11), float64], int8, Tensor[(36, 2), int8], Tensor[(2, 9, 4), float32]) {
  @func_2540(%var_2542, %var_2543) /* ty=(Tensor[(3, 11, 11), float64], int8, Tensor[(36, 2), int8], Tensor[(2, 9, 4), float32]) */
}

def @func_3156(%var_3155: float32) -> (Tensor[(3, 11, 11), float32], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 165), float32]) {
  %746 = fn (%var_3119: float32) -> (Tensor[(3, 11, 11), float32], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 165), float32]) {
    %732 = @func_2306() /* ty=(Tensor[(3, 11, 11), float64],) */;
    %733 = %732.0;
    %734 = cast(%733, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
    %735 = cast(%var_3119, dtype="float32") /* ty=float32 */;
    %736 = cast(meta[relay.Constant][33] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
    %737 = reshape(%735, newshape=[]) /* ty=float32 */;
    %738 = reshape(%736, newshape=[165]) /* ty=Tensor[(165), float32] */;
    %739 = @func_2380(%737, %738) /* ty=(Tensor[(3, 11, 11), float64], Tensor[(165), float32], float32, Tensor[(165), float32]) */;
    %740 = cast(meta[relay.Constant][33] /* ty=Tensor[(165), float32] */, dtype="float32") /* ty=Tensor[(165), float32] */;
    %741 = reshape(%740, newshape=[1, 165]) /* ty=Tensor[(1, 165), float32] */;
    %742 = @func_1604(%741) /* ty=(Tensor[(7, 15, 8), int16], Tensor[(1, 165), float32], Tensor[(?, 6, 3), int64]) */;
    %743 = log2(%734) /* ty=Tensor[(3, 11, 11), float32] */;
    %744 = %739.3;
    %745 = %742.1;
    (%743, %744, %var_3119, meta[relay.Constant][33] /* ty=Tensor[(165), float32] */, %745)
  };
  %746(%var_3155) /* ty=(Tensor[(3, 11, 11), float32], Tensor[(165), float32], float32, Tensor[(165), float32], Tensor[(1, 165), float32]) */
}

def @func_6078() -> Tensor[(11, 3, 11), float32] {
  @func_6076() /* ty=Tensor[(11, 3, 11), float32] */
}

def @func_2394() -> Tensor[(3, 11, 11), float64] {
  %747 = fn () -> Tensor[(3, 11, 11), float64] {
    @func_1997() /* ty=Tensor[(3, 11, 11), float64] */
  };
  %747() /* ty=Tensor[(3, 11, 11), float64] */
}

def @func_1497(%var_1494: Tensor[(16, 15, 2), float32], %var_1495: Tensor[(1755), float64], %var_1496: Tensor[(16, 15, 2), bool]) -> (Tensor[(252), uint64], float64, Tensor[(1755), float64], Tensor[(1, 6, 3), float64], Tensor[(11, 5, 3), bool], Tensor[(165), float32], Tensor[(13, 15, 9), bool], Tensor[(16, 15, 2), float64], Tensor[(16, 15, 2), float64]) {
  @func_1492(%var_1494, %var_1495, %var_1496) /* ty=(Tensor[(252), uint64], float64, Tensor[(1755), float64], Tensor[(1, 6, 3), float64], Tensor[(11, 5, 3), bool], Tensor[(165), float32], Tensor[(13, 15, 9), bool], Tensor[(16, 15, 2), float64], Tensor[(16, 15, 2), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen70/build/output.py:1909: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen70/build/output.py", line 1914, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(540) tvmgen_default_fused_asin_kernel0(float* __restrict__ T_asin, float* __restrict__ placeholder) {
  T_asin[(((int)threadIdx.x))] = asinf(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

