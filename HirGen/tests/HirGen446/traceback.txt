==========mod==========
#[version = "0.0.5"]
def @func_5222() -> (Tensor[(14, 3, 12), int16],) {
  %0 = @func_2767() /* ty=(Tensor[(14, 3, 12), int16],) */;
  %1 = %0.0;
  (%1,)
}

def @func_4268() -> Tensor[(14, 1, 12), float32] {
  %2 = @func_3094() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %2.0
}

def @func_181() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) {
  %3 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %4 = %3.0;
  %5 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %6 = cast(%5, dtype="uint16") /* ty=Tensor[(14, 1, 12), uint16] */;
  %7 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%4, dtype="uint16") /* ty=Tensor[(14, 1, 12), uint16] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %10 = logical_xor(%8, %9) /* ty=Tensor[(14, ?, 12), uint16] */;
  %11 = cast(%10, dtype="uint32") /* ty=Tensor[(14, ?, 12), uint32] */;
  %12 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%4, dtype="uint32") /* ty=Tensor[(14, 1, 12), uint32] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %15 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %16 = right_shift(%13, %14) /* ty=Tensor[(14, ?, 12), uint32] */;
  %17 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  (%15, %16, %17)
}

def @func_4369(%var_4349: Tensor[(14, 2, 12), float32]) -> (Tensor[(14, 2, 12), bool], Tensor[(14, ?, 12), bool], Tensor[(14, 2, 12), bool], Tensor[(14, ?, 12), float64]) {
  %18 = @func_1747() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %19 = %18.1;
  %20 = cast(%19, dtype="bool") /* ty=Tensor[(14, ?, 12), bool] */;
  %21 = cast(%var_4349, dtype="bool") /* ty=Tensor[(14, 2, 12), bool] */;
  %22 = @func_2674() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %23 = cast(%var_4349, dtype="bool") /* ty=Tensor[(14, 2, 12), bool] */;
  %24 = cast(%19, dtype="bool") /* ty=Tensor[(14, ?, 12), bool] */;
  %25 = cast(%19, dtype="float64") /* ty=Tensor[(14, ?, 12), float64] */;
  %26 = greater(%20, %21) /* ty=Tensor[(14, 2, 12), bool] */;
  %27 = %22.0;
  %28 = logical_or(%23, %24) /* ty=Tensor[(14, 2, 12), bool] */;
  %29 = log10(%25) /* ty=Tensor[(14, ?, 12), float64] */;
  (%26, %27, %28, %29)
}

def @func_1747() -> (Tensor[(14, 3, 12), int16], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) {
  %30 = @func_1107() /* ty=Tensor[(14, ?, 12), bool] */;
  %31 = cast(%30, dtype="int16") /* ty=Tensor[(14, ?, 12), int16] */;
  %32 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 3, 12), bool] */, dtype="int16") /* ty=Tensor[(14, 3, 12), int16] */;
  %33 = @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %34 = bitwise_and(%31, %32) /* ty=Tensor[(14, 3, 12), int16] */;
  %35 = @func_1186() /* ty=Tensor[(14, ?, 12), float32] */;
  %36 = %33.0;
  (%34, %35, %36)
}

def @func_6393() -> (Tensor[(14, ?, 12), float32],) {
  %37 = @func_5688() /* ty=(Tensor[(14, 3, 12), float32], Tensor[(14, ?, 12), float32]) */;
  %38 = %37.1;
  (%38,)
}

def @func_3213() -> (Tensor[(14, 1, 12), float32], Tensor[(14, 3, 12), int16]) {
  %39 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %40 = @func_1747() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %41 = %39.0;
  %42 = %40.0;
  (%41, %42)
}

def @func_3446() -> Tensor[(14, 1, 12), float32] {
  %43 = @func_892() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %43.0
}

def @func_1079() -> Tensor[(14, ?, 12), bool] {
  %44 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %45 = %44.0;
  %46 = @func_892() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %47 = %46.0;
  %48 = cast(%47, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
  %49 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%45, dtype="bool") /* ty=Tensor[(14, ?, 12), bool] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%50, %51) /* ty=Tensor[(14, ?, 12), bool] */
}

def @func_892() -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) {
  %52 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
  %53 = @func_735() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %54 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %55 = %52.2;
  %56 = %53.0;
  (%54, %55, %56)
}

def @func_4177() -> Tensor[(14, 1, 12), float32] {
  %57 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %57.1
}

def @func_59() -> (Tensor[(14, 1, 12), float32],) {
  %58 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 1, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
  %59 = acosh(%58) /* ty=Tensor[(14, 1, 12), float64] */;
  %60 = cast(%59, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
  %61 = asin(%60) /* ty=Tensor[(14, 1, 12), float32] */;
  (%61,)
}

def @func_2459() -> (Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32], Tensor[(1, 2520), float32]) {
  %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 2520), float32] */, dtype="float32") /* ty=Tensor[(1, 2520), float32] */;
  %63 = reshape(%62, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %64 = @func_1033(%63) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %65 = @func_1107() /* ty=Tensor[(14, ?, 12), bool] */;
  %66 = %64.1;
  (%65, %66, meta[relay.Constant][2] /* ty=Tensor[(1, 2520), float32] */)
}

def @func_2565() -> (Tensor[(14, ?, 12), float32],) {
  %67 = @func_1747() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %68 = %67.1;
  (%68,)
}

def @func_2983(%var_2958: Tensor[(13, 11, 2), int32]) -> (Tensor[(13, 11, 2), bool], Tensor[(13, 11, 2), float32]) {
  %69 = cast(%var_2958, dtype="bool") /* ty=Tensor[(13, 11, 2), bool] */;
  %70 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(13, 11, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 11, 2), int32] */, dtype="bool") /* ty=Tensor[(13, 11, 2), bool] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 11, 2), int32] */, dtype="float32") /* ty=Tensor[(13, 11, 2), float32] */;
  %74 = less_equal(%71, %72) /* ty=Tensor[(13, 11, 2), bool] */;
  %75 = asin(%73) /* ty=Tensor[(13, 11, 2), float32] */;
  (%74, %75)
}

def @func_3867() -> (Tensor[(14, 1, 12), float32],) {
  %76 = @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %77 = %76.0;
  (%77,)
}

def @func_3202() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float64], Tensor[(18, 140), float64]) {
  %78 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %79 = @func_1146() /* ty=(Tensor[(14, ?, 12), float64],) */;
  %80 = @func_2602() /* ty=(Tensor[(18, 140), float64],) */;
  %81 = %78.1;
  %82 = %79.0;
  %83 = %80.0;
  (%81, %82, %83)
}

def @func_4194() -> Tensor[(14, 1, 12), float32] {
  @func_99() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_6990() -> Tensor[(14, ?, 12), bool] {
  %84 = @func_1544() /* ty=Tensor[(14, 1, 12), float32] */;
  %85 = @func_3381() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %86 = %85.0;
  %87 = cast(%86, dtype="bool") /* ty=Tensor[(14, ?, 12), bool] */;
  %88 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%84, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%89, %90) /* ty=Tensor[(14, ?, 12), bool] */
}

def @func_3728() -> (Tensor[(14, ?, 12), bool], Tensor[(14, 10, 12), uint32]) {
  %91 = @func_2684() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %92 = @func_1079() /* ty=Tensor[(14, ?, 12), bool] */;
  %93 = cast(%92, dtype="uint32") /* ty=Tensor[(14, ?, 12), uint32] */;
  %94 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 10, 12), bool] */, dtype="uint32") /* ty=Tensor[(14, 10, 12), uint32] */;
  %95 = %91.0;
  %96 = add(%93, %94) /* ty=Tensor[(14, 10, 12), uint32] */;
  (%95, %96)
}

def @func_6041() -> Tensor[(14, 13, 12), int32] {
  @func_3818() /* ty=Tensor[(14, 13, 12), int32] */
}

def @func_2337() -> (Tensor[(18, 140), float64],) {
  %97 = @func_1634() /* ty=(Tensor[(18, 140), float64],) */;
  %98 = %97.0;
  (%98,)
}

def @func_862() -> (Tensor[(14, 1, 12), float32],) {
  %99 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %100 = %99.0;
  (%100,)
}

def @func_1146() -> (Tensor[(14, ?, 12), float64],) {
  %101 = @func_1107() /* ty=Tensor[(14, ?, 12), bool] */;
  %102 = cast(%101, dtype="float64") /* ty=Tensor[(14, ?, 12), float64] */;
  %103 = atanh(%102) /* ty=Tensor[(14, ?, 12), float64] */;
  (%103,)
}

def @func_5407() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) {
  %104 = @func_4604() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %105 = @func_3446() /* ty=Tensor[(14, 1, 12), float32] */;
  %106 = %104.0;
  (%105, %106)
}

def @func_3381() -> (Tensor[(14, ?, 12), bool],) {
  %107 = @func_2684() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %108 = %107.0;
  (%108,)
}

def @func_6260() -> Tensor[(18, 140), float32] {
  @func_1921() /* ty=Tensor[(18, 140), float32] */
}

def @func_4926(%var_4912: Tensor[(14, 3, 12), int16]) -> (Tensor[(14, 3, 12), uint64], Tensor[(14, ?, 12), bool]) {
  %109 = @func_2767() /* ty=(Tensor[(14, 3, 12), int16],) */;
  %110 = %109.0;
  %111 = cast(%var_4912, dtype="uint64") /* ty=Tensor[(14, 3, 12), uint64] */;
  %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%110, dtype="uint64") /* ty=Tensor[(14, 3, 12), uint64] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %115 = @func_1296() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %116 = add(%113, %114) /* ty=Tensor[(14, 3, 12), uint64] */;
  %117 = %115.0;
  (%116, %117)
}

def @func_5202(%var_5177: Tensor[(14, 2, 12), bool]) -> (Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 2, 12), int32]) {
  %118 = @func_2890() /* ty=(Tensor[(2520), float32],) */;
  %119 = @func_1590() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %120 = @func_4439() /* ty=(Tensor[(14, 2, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */;
  %121 = %120.0;
  %122 = @func_5096() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32]) */;
  %123 = %122.1;
  %124 = cast(%121, dtype="bool") /* ty=Tensor[(14, 2, 12), bool] */;
  %125 = cast(%123, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
  %126 = less_equal(%124, %125) /* ty=Tensor[(14, 2, 12), bool] */;
  %127 = cast(%var_5177, dtype="uint64") /* ty=Tensor[(14, 2, 12), uint64] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%126, dtype="uint64") /* ty=Tensor[(14, 2, 12), uint64] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %131 = add(%129, %130) /* ty=Tensor[(14, 2, 12), uint64] */;
  %132 = cast(%var_5177, dtype="int32") /* ty=Tensor[(14, 2, 12), int32] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%131, dtype="int32") /* ty=Tensor[(14, 2, 12), int32] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %136 = %118.0;
  %137 = %119.1;
  %138 = bitwise_or(%134, %135) /* ty=Tensor[(14, 2, 12), int32] */;
  (%136, %137, %138)
}

def @func_2394() -> (Tensor[(18, 140), uint8], Tensor[(18, 140), bool]) {
  %139 = @func_2337() /* ty=(Tensor[(18, 140), float64],) */;
  %140 = %139.0;
  %141 = cast(meta[relay.Constant][5] /* ty=Tensor[(18, 140), float64] */, dtype="int8") /* ty=Tensor[(18, 140), int8] */;
  %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(2), int32] */;
  %143 = cast(%140, dtype="int8") /* ty=Tensor[(18, 140), int8] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %145 = logical_xor(%143, %144) /* ty=Tensor[(18, 140), int8] */;
  %146 = cast(meta[relay.Constant][5] /* ty=Tensor[(18, 140), float64] */, dtype="uint8") /* ty=Tensor[(18, 140), uint8] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(2), int32] */;
  %148 = cast(%145, dtype="uint8") /* ty=Tensor[(18, 140), uint8] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %150 = cast(%140, dtype="bool") /* ty=Tensor[(18, 140), bool] */;
  %151 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(18, 140), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %152 = cast(meta[relay.Constant][5] /* ty=Tensor[(18, 140), float64] */, dtype="bool") /* ty=Tensor[(18, 140), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %154 = bitwise_and(%148, %149) /* ty=Tensor[(18, 140), uint8] */;
  %155 = less_equal(%152, %153) /* ty=Tensor[(18, 140), bool] */;
  (%154, %155)
}

def @func_2185() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) {
  %156 = @func_1296() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %157 = @func_1544() /* ty=Tensor[(14, 1, 12), float32] */;
  %158 = %156.0;
  (%157, %158)
}

def @func_1590() -> (Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) {
  %159 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %160 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
  %161 = %159.0;
  %162 = %160.2;
  (%161, %162)
}

def @func_4604() -> (Tensor[(14, ?, 12), bool],) {
  %163 = @func_2674() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %164 = %163.0;
  (%164,)
}

def @func_5321(%var_5287: Tensor[(2520), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(14, 6, 12), uint64], Tensor[(1008), float32], Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) {
  %165 = @func_3426() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %166 = %165.0;
  %167 = cast(%166, dtype="float32") /* ty=Tensor[(14, ?, 12), float32] */;
  %168 = cast(meta[relay.Constant][6] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %169 = reshape(%168, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
  %170 = @func_4711(%169) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 6, 12), uint64], Tensor[(1008), float32], Tensor[(14, ?, 12), float32]) */;
  %171 = cast(%var_5287, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %172 = reshape(%171, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %173 = @func_2056(%172) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32]) */;
  %174 = @func_4754() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool], Tensor[(2520), float32]) */;
  %175 = sinh(%167) /* ty=Tensor[(14, ?, 12), float32] */;
  %176 = %170.1;
  %177 = @func_1079() /* ty=Tensor[(14, ?, 12), bool] */;
  %178 = %173.3;
  %179 = @func_4737() /* ty=Tensor[(14, ?, 12), float32] */;
  %180 = %174.0;
  (%175, %176, meta[relay.Constant][6] /* ty=Tensor[(1008), float32] */, %177, %178, %var_5287, %179, %180)
}

def @func_2329() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float64], Tensor[(6, 420), float32], Tensor[(2520), float32], Tensor[(14, ?, 12), bool]) {
  %181 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
  %182 = %181.1;
  %183 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %184 = %183.0;
  %185 = cast(%184, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
  %186 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%182, dtype="float64") /* ty=Tensor[(14, ?, 12), float64] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %189 = cast(meta[relay.Constant][7] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %190 = cast(meta[relay.Constant][7] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %191 = reshape(%189, newshape=[6, 420]) /* ty=Tensor[(6, 420), float32] */;
  %192 = reshape(%190, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %193 = @func_533(%191, %192) /* ty=(Tensor[(6, 420), float32], Tensor[(2520), int8], Tensor[(14, ?, 12), bool]) */;
  %194 = cast(%182, dtype="bool") /* ty=Tensor[(14, ?, 12), bool] */;
  %195 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%184, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %198 = @func_1544() /* ty=Tensor[(14, 1, 12), float32] */;
  %199 = floor_divide(%187, %188) /* ty=Tensor[(14, ?, 12), float64] */;
  %200 = %193.0;
  %201 = logical_or(%196, %197) /* ty=Tensor[(14, ?, 12), bool] */;
  (%198, %199, %200, meta[relay.Constant][7] /* ty=Tensor[(2520), float32] */, %201)
}

def @func_5669() -> (Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32], Tensor[(18, 140), float64], Tensor[(14, 3, 12), int16]) {
  %202 = @func_3213() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 3, 12), int16]) */;
  %203 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
  %204 = @func_1634() /* ty=(Tensor[(18, 140), float64],) */;
  %205 = @func_5222() /* ty=(Tensor[(14, 3, 12), int16],) */;
  %206 = %202.1;
  %207 = %203.2;
  %208 = %204.0;
  %209 = %205.0;
  (%206, %207, %208, %209)
}

def @func_5796(%var_5772: Tensor[(2520), float32]) -> (Tensor[(14, 3, 12), int16], Tensor[(2520), float64]) {
  %210 = @func_5222() /* ty=(Tensor[(14, 3, 12), int16],) */;
  %211 = @func_2329() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float64], Tensor[(6, 420), float32], Tensor[(2520), float32], Tensor[(14, ?, 12), bool]) */;
  %212 = %211.3;
  %213 = cast(%var_5772, dtype="uint16") /* ty=Tensor[(2520), uint16] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(1), int32] */;
  %215 = cast(%212, dtype="uint16") /* ty=Tensor[(2520), uint16] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %217 = right_shift(%215, %216) /* ty=Tensor[(2520), uint16] */;
  %218 = cast(%212, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(1), int32] */;
  %220 = cast(%217, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?), float64] */;
  %222 = %210.0;
  %223 = divide(%220, %221) /* ty=Tensor[(2520), float64] */;
  (%222, %223)
}

def @func_6799() -> Tensor[(14, 1, 12), float32] {
  %224 = @func_4754() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool], Tensor[(2520), float32]) */;
  %224.0
}

def @func_3343() -> (Tensor[(14, 3, 12), int16], Tensor[(18, 140), float64]) {
  %225 = @func_3213() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 3, 12), int16]) */;
  %226 = @func_2337() /* ty=(Tensor[(18, 140), float64],) */;
  %227 = %225.1;
  %228 = %226.0;
  (%227, %228)
}

def @func_3914() -> (Tensor[(14, 1, 12), float32],) {
  %229 = @func_1672() /* ty=(Tensor[(18, 140), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(2520), int8]) */;
  %230 = %229.1;
  (%230,)
}

def @func_3835() -> (Tensor[(10, 16, 14), float64],) {
  %231 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 16, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 16, 14), float64] */;
  %232 = asin(%231) /* ty=Tensor[(10, 16, 14), float64] */;
  (%232,)
}

def @func_1544() -> Tensor[(14, 1, 12), float32] {
  @func_99() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_4151(%var_4126: Tensor[(2184), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(14, 13, 12), uint32], Tensor[(2184), float32], Tensor[(2520), float32]) {
  %233 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %234 = cast(%var_4126, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %235 = reshape(%234, newshape=[14, 13, 12]) /* ty=Tensor[(14, 13, 12), float32] */;
  %236 = @func_2890() /* ty=(Tensor[(2520), float32],) */;
  %237 = %233.0;
  %238 = @func_1865(%235) /* ty=Tensor[(14, 13, 12), uint32] */;
  %239 = %236.0;
  (%237, %238, %var_4126, %239)
}

def @func_3312(%var_3303: float64, %var_3304: Tensor[(2, 2, 4), float64]) -> (Tensor[(2, 2, 4), float64], Tensor[(14, 1, 12), float32]) {
  %240 = cast(%var_3303, dtype="float64") /* ty=float64 */;
  %241 = cast(%var_3304, dtype="float64") /* ty=Tensor[(2, 2, 4), float64] */;
  %242 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %243 = floor_mod(%240, %241) /* ty=Tensor[(2, 2, 4), float64] */;
  %244 = %242.2;
  (%243, %244)
}

def @func_6304(%var_6278: Tensor[(3, 12, 9), float64]) -> (Tensor[(3, 12, 9), float64], Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32]) {
  %245 = cast(%var_6278, dtype="float64") /* ty=Tensor[(3, 12, 9), float64] */;
  %246 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(3, 12, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(3, 12, 9), float64] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %249 = @func_5010() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %250 = @func_1590() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %251 = mod(%247, %248) /* ty=Tensor[(3, 12, 9), float64] */;
  %252 = %249.0;
  %253 = %250.1;
  (%251, %252, %253)
}

def @func_852() -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) {
  %254 = @func_735() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %255 = @func_735() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %256 = %254.0;
  %257 = %255.0;
  %258 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  (%256, %257, %258)
}

def @func_4187() -> (Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) {
  %259 = @func_1186() /* ty=Tensor[(14, ?, 12), float32] */;
  %260 = @func_1107() /* ty=Tensor[(14, ?, 12), bool] */;
  (%259, %260)
}

def @func_6909(%var_6889: float64, %var_6897: Tensor[(10, 6, 4), bool]) -> (Tensor[(10, 6, 4), bool], Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) {
  %261 = cast(%var_6889, dtype="bool") /* ty=bool */;
  %262 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 6, 4), float64] */, dtype="bool") /* ty=Tensor[(10, 6, 4), bool] */;
  %263 = greater(%261, %262) /* ty=Tensor[(10, 6, 4), bool] */;
  %264 = cast(%var_6897, dtype="bool") /* ty=Tensor[(10, 6, 4), bool] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%263, dtype="bool") /* ty=Tensor[(10, 6, 4), bool] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %268 = @func_2218() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %269 = @func_1296() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %270 = not_equal(%266, %267) /* ty=Tensor[(10, 6, 4), bool] */;
  %271 = %268.0;
  %272 = %269.0;
  (%270, %271, %272)
}

def @func_4754() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool], Tensor[(2520), float32]) {
  %273 = @func_3094() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %274 = cast(meta[relay.Constant][11] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %275 = cast(meta[relay.Constant][11] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %276 = reshape(%274, newshape=[6, 420]) /* ty=Tensor[(6, 420), float32] */;
  %277 = reshape(%275, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %278 = @func_533(%276, %277) /* ty=(Tensor[(6, 420), float32], Tensor[(2520), int8], Tensor[(14, ?, 12), bool]) */;
  %279 = %273.0;
  %280 = %278.2;
  (%279, %280, meta[relay.Constant][11] /* ty=Tensor[(2520), float32] */)
}

def @func_969(%var_966: Tensor[(154, 2), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(7, 11, 4), float32], Tensor[(154, 2), float32]) {
  %281 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %282 = cast(%var_966, dtype="float32") /* ty=Tensor[(154, 2), float32] */;
  %283 = cast(%var_966, dtype="float32") /* ty=Tensor[(154, 2), float32] */;
  %284 = reshape(%282, newshape=[7, 11, 4]) /* ty=Tensor[(7, 11, 4), float32] */;
  %285 = reshape(%283, newshape=[7, 11, 4]) /* ty=Tensor[(7, 11, 4), float32] */;
  %286 = %281.0;
  %287 = @func_671(%284, %285) /* ty=Tensor[(7, 11, 4), float32] */;
  (%286, %287, %var_966)
}

def @func_6954() -> (Tensor[(14, 13, 12), int32], Tensor[(14, ?, 12), bool]) {
  %288 = @func_3818() /* ty=Tensor[(14, 13, 12), int32] */;
  %289 = @func_1107() /* ty=Tensor[(14, ?, 12), bool] */;
  (%288, %289)
}

def @func_6442() -> Tensor[(14, 1, 12), float32] {
  %290 = @func_5096() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32]) */;
  %290.1
}

def @func_4239(%var_4231: Tensor[(7, 1, 5), float32]) -> Tensor[(7, 1, 5), float32] {
  %291 = cast(%var_4231, dtype="float32") /* ty=Tensor[(7, 1, 5), float32] */;
  asinh(%291) /* ty=Tensor[(7, 1, 5), float32] */
}

def @func_5110() -> Tensor[(14, 3, 12), int16] {
  %292 = @func_5096() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32]) */;
  %292.0
}

def @func_1865(%var_1852: Tensor[(14, 13, 12), float32]) -> Tensor[(14, 13, 12), uint32] {
  %293 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
  %294 = %293.0;
  %295 = cast(%294, dtype="uint32") /* ty=Tensor[(14, 1, 12), uint32] */;
  %296 = cast(%var_1852, dtype="uint32") /* ty=Tensor[(14, 13, 12), uint32] */;
  subtract(%295, %296) /* ty=Tensor[(14, 13, 12), uint32] */
}

def @func_2674() -> (Tensor[(14, ?, 12), bool],) {
  %297 = @func_1079() /* ty=Tensor[(14, ?, 12), bool] */;
  (%297,)
}

def @func_5497() -> (Tensor[(18, 140), float32], Tensor[(14, 1, 12), float32]) {
  %298 = @func_3857() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(18, 140), float32]) */;
  %299 = %298.1;
  %300 = @func_4447() /* ty=Tensor[(14, 1, 12), float32] */;
  (%299, %300)
}

def @func_6139(%var_6091: Tensor[(1, 5, 4), uint32], %var_6102: Tensor[(2184), float32], %var_6134: Tensor[(336), float32]) -> (Tensor[(4, 5, 4), uint32], Tensor[(14, 13, 12), int16], Tensor[(2184), float32], Tensor[(14, 1, 12), float32], Tensor[(4, 5, 4), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 2, 12), bool], Tensor[(336), float32]) {
  %301 = cast(%var_6091, dtype="uint32") /* ty=Tensor[(1, 5, 4), uint32] */;
  %302 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 5, 4), uint32] */, dtype="uint32") /* ty=Tensor[(4, 5, 4), uint32] */;
  %303 = cast(%var_6102, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %304 = reshape(%303, newshape=[14, 13, 12]) /* ty=Tensor[(14, 13, 12), float32] */;
  %305 = @func_6063(%304) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 13, 12), int16]) */;
  %306 = @func_4800() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(7, 11, 4), float32], Tensor[(308), float32], Tensor[(14, ?, 12), float32], Tensor[(18, 140), float64]) */;
  %307 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 5, 4), uint32] */, dtype="float64") /* ty=Tensor[(4, 5, 4), float64] */;
  %308 = @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %309 = cast(%var_6134, dtype="float32") /* ty=Tensor[(336), float32] */;
  %310 = reshape(%309, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float32] */;
  %311 = @func_4369(%310) /* ty=(Tensor[(14, 2, 12), bool], Tensor[(14, ?, 12), bool], Tensor[(14, 2, 12), bool], Tensor[(14, ?, 12), float64]) */;
  %312 = bitwise_or(%301, %302) /* ty=Tensor[(4, 5, 4), uint32] */;
  %313 = %305.1;
  %314 = %306.0;
  %315 = rsqrt(%307) /* ty=Tensor[(4, 5, 4), float64] */;
  %316 = %308.0;
  %317 = %311.2;
  (%312, %313, %var_6102, %314, %315, %316, %317, %var_6134)
}

def @func_1296() -> (Tensor[(14, ?, 12), bool],) {
  %318 = @func_1079() /* ty=Tensor[(14, ?, 12), bool] */;
  (%318,)
}

def @func_1672() -> (Tensor[(18, 140), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(2520), int8]) {
  %319 = @func_1634() /* ty=(Tensor[(18, 140), float64],) */;
  %320 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
  %321 = @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %322 = %319.0;
  %323 = cast(%322, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %324 = reshape(%323, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %325 = @func_1033(%324) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %326 = cast(%322, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %327 = %325.2;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %329 = reshape(%326, newshape=[6, 420]) /* ty=Tensor[(6, 420), float32] */;
  %330 = reshape(%328, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %331 = @func_533(%329, %330) /* ty=(Tensor[(6, 420), float32], Tensor[(2520), int8], Tensor[(14, ?, 12), bool]) */;
  %332 = %320.2;
  %333 = %321.0;
  %334 = %331.1;
  (%322, %332, %333, %327, %334)
}

def @func_3857() -> (Tensor[(14, ?, 12), float32], Tensor[(18, 140), float32]) {
  %335 = @func_2788() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */;
  %336 = %335.0;
  %337 = @func_1921() /* ty=Tensor[(18, 140), float32] */;
  (%336, %337)
}

def @func_2218() -> (Tensor[(14, ?, 12), float32],) {
  %338 = @func_1954() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %339 = %338.0;
  (%339,)
}

def @func_4664() -> Tensor[(14, 1, 12), float32] {
  %340 = @func_3540() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %340.0
}

def @func_4034(%var_4025: Tensor[(14, 12, 12), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(14, 12, 12), bool]) {
  %341 = @func_2788() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */;
  %342 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %343 = %342.1;
  %344 = cast(%343, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
  %345 = cast(%var_4025, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
  %346 = %341.0;
  %347 = not_equal(%344, %345) /* ty=Tensor[(14, 12, 12), bool] */;
  (%346, %347)
}

def @func_235(%var_218: Tensor[(14, 15, 12), float32], %var_228: Tensor[(14, 14, 12), float32]) -> (Tensor[(14, 15, 12), float64], Tensor[(14, 14, 12), float64], Tensor[(14, 1, 12), float32]) {
  %348 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %349 = %348.0;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
  %351 = cast(%var_218, dtype="float64") /* ty=Tensor[(14, 15, 12), float64] */;
  %352 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
  %353 = %352.0;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
  %355 = cast(%var_228, dtype="float64") /* ty=Tensor[(14, 14, 12), float64] */;
  %356 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
  %357 = floor_divide(%350, %351) /* ty=Tensor[(14, 15, 12), float64] */;
  %358 = power(%354, %355) /* ty=Tensor[(14, 14, 12), float64] */;
  %359 = %356.0;
  (%357, %358, %359)
}

def @func_3076() -> (Tensor[(2520), float32], Tensor[(14, ?, 12), float32]) {
  %360 = @func_2329() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float64], Tensor[(6, 420), float32], Tensor[(2520), float32], Tensor[(14, ?, 12), bool]) */;
  %361 = @func_1954() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %362 = %360.3;
  %363 = %361.0;
  (%362, %363)
}

def @func_5574() -> Tensor[(14, 3, 12), int16] {
  %364 = @func_3343() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(18, 140), float64]) */;
  %364.0
}

def @func_1033(%var_993: Tensor[(2520), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) {
  %365 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %366 = cast(%var_993, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %367 = reshape(%366, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %368 = @func_343(%367) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) */;
  %369 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %370 = %365.1;
  %371 = %368.0;
  %372 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %373 = %369.1;
  (%370, %371, %var_993, %372, %373)
}

def @func_5393(%var_5390: Tensor[(13, 9, 4), float64]) -> (Tensor[(13, 9, 4), float64],) {
  %374 = cast(%var_5390, dtype="float64") /* ty=Tensor[(13, 9, 4), float64] */;
  %375 = asinh(%374) /* ty=Tensor[(13, 9, 4), float64] */;
  (%375,)
}

def @func_5956(%var_5943: Tensor[(24, 48), bool], %var_5951: Tensor[(14, 3, 12), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(12, 12, 8), bool], Tensor[(24, 48), bool], Tensor[(14, 3, 12), uint16]) {
  %376 = @func_3426() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %377 = cast(%var_5943, dtype="bool") /* ty=Tensor[(24, 48), bool] */;
  %378 = cast(%var_5943, dtype="bool") /* ty=Tensor[(24, 48), bool] */;
  %379 = reshape(%377, newshape=[12, 12, 8]) /* ty=Tensor[(12, 12, 8), bool] */;
  %380 = reshape(%378, newshape=[12, 12, 8]) /* ty=Tensor[(12, 12, 8), bool] */;
  %381 = @func_2432(%379, %380) /* ty=(Tensor[(12, 12, 8), bool],) */;
  %382 = @func_2459() /* ty=(Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32], Tensor[(1, 2520), float32]) */;
  %383 = %382.1;
  %384 = cast(%383, dtype="uint16") /* ty=Tensor[(14, 1, 12), uint16] */;
  %385 = cast(%var_5951, dtype="uint16") /* ty=Tensor[(14, 3, 12), uint16] */;
  %386 = %376.0;
  %387 = %381.0;
  %388 = right_shift(%384, %385) /* ty=Tensor[(14, 3, 12), uint16] */;
  (%386, %387, %var_5943, %388)
}

def @func_1776(%var_1755: Tensor[(3, 10, 4), int8], %var_1756: Tensor[(3, 10, 4), int8]) -> (Tensor[(3, 10, 4), int8], Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32]) {
  %389 = cast(%var_1756, dtype="int8") /* ty=Tensor[(3, 10, 4), int8] */;
  %390 = shape_of(%var_1755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%var_1755, dtype="int8") /* ty=Tensor[(3, 10, 4), int8] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %393 = @func_1590() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %394 = bitwise_xor(%391, %392) /* ty=Tensor[(3, 10, 4), int8] */;
  %395 = @func_1079() /* ty=Tensor[(14, ?, 12), bool] */;
  %396 = %393.1;
  (%394, %395, %396)
}

def @func_735() -> (Tensor[(14, 1, 12), float32],) {
  %397 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %398 = %397.1;
  (%398,)
}

def @func_1107() -> Tensor[(14, ?, 12), bool] {
  @func_1079() /* ty=Tensor[(14, ?, 12), bool] */
}

def @func_4539(%var_4471: Tensor[(14, 6, 12), float32]) -> (Tensor[(14, 6, 12), uint64], Tensor[(14, 1, 12), float32], Tensor[(14, 6, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(14, 6, 12), int64]) {
  %399 = @func_2788() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */;
  %400 = %399.0;
  %401 = cast(%400, dtype="uint64") /* ty=Tensor[(14, ?, 12), uint64] */;
  %402 = cast(%var_4471, dtype="uint64") /* ty=Tensor[(14, 6, 12), uint64] */;
  %403 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %404 = cast(%var_4471, dtype="float32") /* ty=Tensor[(14, 6, 12), float32] */;
  %405 = @func_2218() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %406 = cast(%var_4471, dtype="int64") /* ty=Tensor[(14, 6, 12), int64] */;
  %407 = cast(%400, dtype="int64") /* ty=Tensor[(14, ?, 12), int64] */;
  %408 = bitwise_xor(%401, %402) /* ty=Tensor[(14, 6, 12), uint64] */;
  %409 = %403.0;
  %410 = acosh(%404) /* ty=Tensor[(14, 6, 12), float32] */;
  %411 = %405.0;
  %412 = maximum(%406, %407) /* ty=Tensor[(14, 6, 12), int64] */;
  (%408, %409, %410, %411, %412)
}

def @func_6644(%var_6561: Tensor[(14, 1, 12), float32]) -> (Tensor[(14, ?, 12), uint8], Tensor[(14, ?, 12), bool], Tensor[(81), float32], Tensor[(14, 13, 12), uint32], Tensor[(2184), float32], Tensor[(14, 13, 12), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 11, 12), uint64], Tensor[(924, 2), bool]) {
  %413 = @func_735() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %414 = %413.0;
  %415 = cast(%var_6561, dtype="uint8") /* ty=Tensor[(14, 1, 12), uint8] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="uint8") /* ty=Tensor[(14, 1, 12), uint8] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %419 = cast(meta[relay.Constant][13] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %420 = reshape(%419, newshape=[9, 9, 1]) /* ty=Tensor[(9, 9, 1), float32] */;
  %421 = @func_5750(%420) /* ty=(Tensor[(9, 9, 1), float32], Tensor[(14, ?, 12), bool]) */;
  %422 = cast(meta[relay.Constant][14] /* ty=Tensor[(2184), float32] */, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %423 = reshape(%422, newshape=[2184]) /* ty=Tensor[(2184), float32] */;
  %424 = @func_4151(%423) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 13, 12), uint32], Tensor[(2184), float32], Tensor[(2520), float32]) */;
  %425 = @func_2684() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %426 = %425.0;
  %427 = cast(%426, dtype="uint8") /* ty=Tensor[(14, ?, 12), uint8] */;
  %428 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%414, dtype="uint8") /* ty=Tensor[(14, 1, 12), uint8] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %431 = subtract(%429, %430) /* ty=Tensor[(14, ?, 12), uint8] */;
  %432 = cast(%431, dtype="float64") /* ty=Tensor[(14, ?, 12), float64] */;
  %433 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 13, 12), uint8] */, dtype="float64") /* ty=Tensor[(14, 13, 12), float64] */;
  %434 = cast(meta[relay.Constant][16] /* ty=Tensor[(924, 2), bool] */, dtype="bool") /* ty=Tensor[(924, 2), bool] */;
  %435 = reshape(%434, newshape=[14, 11, 12]) /* ty=Tensor[(14, 11, 12), bool] */;
  %436 = @func_2653(%435) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 11, 12), uint64], Tensor[(154, 2), float32], Tensor[(308), float32]) */;
  %437 = minimum(%417, %418) /* ty=Tensor[(14, ?, 12), uint8] */;
  %438 = %421.1;
  %439 = %424.1;
  %440 = floor_mod(%432, %433) /* ty=Tensor[(14, 13, 12), float64] */;
  %441 = @func_6442() /* ty=Tensor[(14, 1, 12), float32] */;
  %442 = %436.2;
  (%437, %438, meta[relay.Constant][13] /* ty=Tensor[(81), float32] */, %439, meta[relay.Constant][14] /* ty=Tensor[(2184), float32] */, %440, %441, %442, meta[relay.Constant][16] /* ty=Tensor[(924, 2), bool] */)
}

def @func_99() -> Tensor[(14, 1, 12), float32] {
  %443 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %444 = %443.0;
  %445 = cast(%444, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
  log(%445) /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_1264() -> (Tensor[(14, 1, 12), float32], Tensor[(14, 15, 12), float64], Tensor[(18, 140), float32]) {
  %446 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %447 = %446.1;
  %448 = cast(%447, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
  %449 = cast(meta[relay.Constant][17] /* ty=Tensor[(18, 140), float32] */, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %450 = reshape(%449, newshape=[6, 420]) /* ty=Tensor[(6, 420), float32] */;
  %451 = @func_325(%450) /* ty=(Tensor[(14, 15, 12), float64], Tensor[(6, 420), float32], Tensor[(4, 588), float32], Tensor[(14, 1, 12), float32]) */;
  %452 = cos(%448) /* ty=Tensor[(14, 1, 12), float32] */;
  %453 = %451.0;
  (%452, %453, meta[relay.Constant][17] /* ty=Tensor[(18, 140), float32] */)
}

def @func_4447() -> Tensor[(14, 1, 12), float32] {
  @func_3446() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_4737() -> Tensor[(14, ?, 12), float32] {
  %454 = @func_3857() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(18, 140), float32]) */;
  %454.0
}

def @func_533(%var_489: Tensor[(6, 420), float32], %var_497: Tensor[(2520), float32]) -> (Tensor[(6, 420), float32], Tensor[(2520), int8], Tensor[(14, ?, 12), bool]) {
  %455 = cast(%var_489, dtype="float32") /* ty=Tensor[(6, 420), float32] */;
  %456 = reshape(%455, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %457 = @func_343(%456) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) */;
  %458 = %457.2;
  %459 = cast(%var_497, dtype="int8") /* ty=Tensor[(2520), int8] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(1), int32] */;
  %461 = cast(%458, dtype="int8") /* ty=Tensor[(2520), int8] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?), int8] */;
  %463 = @func_265() /* ty=Tensor[(14, 1, 12), float32] */;
  %464 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %465 = %464.0;
  %466 = cast(%465, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
  %467 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%463, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %470 = left_shift(%461, %462) /* ty=Tensor[(2520), int8] */;
  %471 = equal(%468, %469) /* ty=Tensor[(14, ?, 12), bool] */;
  (%var_489, %470, %471)
}

def @func_3094() -> (Tensor[(14, 1, 12), float32],) {
  %472 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  (%472,)
}

def @func_5767() -> Tensor[(14, 1, 12), float32] {
  %473 = @func_2459() /* ty=(Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32], Tensor[(1, 2520), float32]) */;
  %473.1
}

def @func_1921() -> Tensor[(18, 140), float32] {
  %474 = @func_1264() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 15, 12), float64], Tensor[(18, 140), float32]) */;
  %475 = %474.2;
  %476 = cast(%475, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  asinh(%476) /* ty=Tensor[(18, 140), float32] */
}

def @func_2432(%var_2416: Tensor[(12, 12, 8), bool], %var_2417: Tensor[(12, 12, 8), bool]) -> (Tensor[(12, 12, 8), bool],) {
  %477 = cast(%var_2417, dtype="bool") /* ty=Tensor[(12, 12, 8), bool] */;
  %478 = shape_of(%var_2416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%var_2416, dtype="bool") /* ty=Tensor[(12, 12, 8), bool] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %481 = logical_or(%479, %480) /* ty=Tensor[(12, 12, 8), bool] */;
  (%481,)
}

def @func_3665(%var_3649: Tensor[(14, 16, 12), float32]) -> Tensor[(14, 16, 12), uint8] {
  %482 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %483 = cast(%482, dtype="uint8") /* ty=Tensor[(14, 1, 12), uint8] */;
  %484 = cast(%var_3649, dtype="uint8") /* ty=Tensor[(14, 16, 12), uint8] */;
  subtract(%483, %484) /* ty=Tensor[(14, 16, 12), uint8] */
}

def @func_4586() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) {
  %485 = @func_2459() /* ty=(Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32], Tensor[(1, 2520), float32]) */;
  %486 = %485.1;
  %487 = @func_1107() /* ty=Tensor[(14, ?, 12), bool] */;
  (%486, %487)
}

def @func_4800() -> (Tensor[(14, 1, 12), float32], Tensor[(7, 11, 4), float32], Tensor[(308), float32], Tensor[(14, ?, 12), float32], Tensor[(18, 140), float64]) {
  %488 = @func_735() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %489 = cast(meta[relay.Constant][18] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %490 = reshape(%489, newshape=[154, 2]) /* ty=Tensor[(154, 2), float32] */;
  %491 = @func_969(%490) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(7, 11, 4), float32], Tensor[(154, 2), float32]) */;
  %492 = @func_2337() /* ty=(Tensor[(18, 140), float64],) */;
  %493 = %488.0;
  %494 = %491.1;
  %495 = @func_1186() /* ty=Tensor[(14, ?, 12), float32] */;
  %496 = %492.0;
  (%493, %494, meta[relay.Constant][18] /* ty=Tensor[(308), float32] */, %495, %496)
}

def @func_1285() -> (Tensor[(14, 1, 12), float32],) {
  %497 = @func_265() /* ty=Tensor[(14, 1, 12), float32] */;
  (%497,)
}

def @func_5913() -> Tensor[(14, 3, 12), int16] {
  %498 = @func_5222() /* ty=(Tensor[(14, 3, 12), int16],) */;
  %498.0
}

def @func_1954() -> (Tensor[(14, ?, 12), float32],) {
  %499 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %500 = %499.0;
  (%500,)
}

def @func_343(%var_340: Tensor[(2520), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) {
  %501 = cast(%var_340, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %502 = reshape(%501, newshape=[6, 420]) /* ty=Tensor[(6, 420), float32] */;
  %503 = @func_325(%502) /* ty=(Tensor[(14, 15, 12), float64], Tensor[(6, 420), float32], Tensor[(4, 588), float32], Tensor[(14, 1, 12), float32]) */;
  %504 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %505 = %503.3;
  (%504, %505, %var_340)
}

def @func_1351(%var_1343: Tensor[(2520), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(6, 420), float32], Tensor[(2520), float32]) {
  %506 = cast(%var_1343, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %507 = reshape(%506, newshape=[6, 420]) /* ty=Tensor[(6, 420), float32] */;
  %508 = @func_325(%507) /* ty=(Tensor[(14, 15, 12), float64], Tensor[(6, 420), float32], Tensor[(4, 588), float32], Tensor[(14, 1, 12), float32]) */;
  %509 = @func_1186() /* ty=Tensor[(14, ?, 12), float32] */;
  %510 = %508.1;
  (%509, %510, %var_1343)
}

def @func_5449(%var_5439: Tensor[(8, 13, 7), float32], %var_5440: Tensor[(8, 13, 7), float32]) -> (Tensor[(8, 13, 7), float32], Tensor[(18, 140), float64]) {
  %511 = cast(%var_5440, dtype="float32") /* ty=Tensor[(8, 13, 7), float32] */;
  %512 = shape_of(%var_5439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%var_5439, dtype="float32") /* ty=Tensor[(8, 13, 7), float32] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %515 = @func_2337() /* ty=(Tensor[(18, 140), float64],) */;
  %516 = power(%513, %514) /* ty=Tensor[(8, 13, 7), float32] */;
  %517 = %515.0;
  (%516, %517)
}

def @func_4976(%var_4971: Tensor[(784), float64]) -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(784), float64]) {
  %518 = @func_1285() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %519 = %518.0;
  %520 = cast(%519, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
  %521 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 12, 12), float32] */, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
  %522 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 12, 12), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
  %523 = cast(%var_4971, dtype="float64") /* ty=Tensor[(784), float64] */;
  %524 = reshape(%523, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
  %525 = @func_2924(%524) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) */;
  %526 = floor_divide(%520, %521) /* ty=Tensor[(14, 12, 12), float64] */;
  %527 = log(%522) /* ty=Tensor[(14, 12, 12), float32] */;
  %528 = %525.1;
  (%526, %527, %528, %var_4971)
}

def @func_5333() -> Tensor[(14, ?, 12), bool] {
  %529 = @func_2674() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %529.0
}

def @func_6760() -> (Tensor[(18, 140), float32], Tensor[(14, 1, 12), float32], Tensor[(2184), float32], Tensor[(84, 26), float32], Tensor[(18, 140), int32]) {
  %530 = @func_1921() /* ty=Tensor[(18, 140), float32] */;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(18, 140), float64] */;
  %532 = log2(%531) /* ty=Tensor[(18, 140), float64] */;
  %533 = cast(%532, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %534 = shape_of(%530, dtype="int32") /* ty=Tensor[(2), int32] */;
  %535 = cast(%530, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %537 = cast(meta[relay.Constant][20] /* ty=Tensor[(84, 26), float32] */, dtype="float32") /* ty=Tensor[(84, 26), float32] */;
  %538 = reshape(%537, newshape=[2184]) /* ty=Tensor[(2184), float32] */;
  %539 = @func_4151(%538) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 13, 12), uint32], Tensor[(2184), float32], Tensor[(2520), float32]) */;
  %540 = cast(%532, dtype="bool") /* ty=Tensor[(18, 140), bool] */;
  %541 = shape_of(%530, dtype="int32") /* ty=Tensor[(2), int32] */;
  %542 = cast(%530, dtype="bool") /* ty=Tensor[(18, 140), bool] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %544 = less(%542, %543) /* ty=Tensor[(18, 140), bool] */;
  %545 = cast(%544, dtype="float64") /* ty=Tensor[(18, 140), float64] */;
  %546 = cos(%545) /* ty=Tensor[(18, 140), float64] */;
  %547 = cast(%546, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %548 = log10(%547) /* ty=Tensor[(18, 140), float32] */;
  %549 = cast(%544, dtype="uint64") /* ty=Tensor[(18, 140), uint64] */;
  %550 = shape_of(%532, dtype="int32") /* ty=Tensor[(2), int32] */;
  %551 = cast(%532, dtype="uint64") /* ty=Tensor[(18, 140), uint64] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %553 = bitwise_xor(%551, %552) /* ty=Tensor[(18, 140), uint64] */;
  %554 = cast(%553, dtype="int32") /* ty=Tensor[(18, 140), int32] */;
  %555 = shape_of(%548, dtype="int32") /* ty=Tensor[(2), int32] */;
  %556 = cast(%548, dtype="int32") /* ty=Tensor[(18, 140), int32] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %558 = floor_mod(%535, %536) /* ty=Tensor[(18, 140), float32] */;
  %559 = @func_265() /* ty=Tensor[(14, 1, 12), float32] */;
  %560 = %539.2;
  %561 = right_shift(%556, %557) /* ty=Tensor[(18, 140), int32] */;
  (%558, %559, %560, meta[relay.Constant][20] /* ty=Tensor[(84, 26), float32] */, %561)
}

def @func_265() -> Tensor[(14, 1, 12), float32] {
  %562 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %563 = cast(%562, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
  atan(%563) /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_4439() -> (Tensor[(14, 2, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) {
  %564 = @func_3213() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 3, 12), int16]) */;
  %565 = %564.0;
  %566 = cast(%565, dtype="uint32") /* ty=Tensor[(14, 1, 12), uint32] */;
  %567 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 2, 12), float32] */, dtype="uint32") /* ty=Tensor[(14, 2, 12), uint32] */;
  %568 = maximum(%566, %567) /* ty=Tensor[(14, 2, 12), uint32] */;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(14, 2, 12), float32] */;
  %570 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %571 = @func_3076() /* ty=(Tensor[(2520), float32], Tensor[(14, ?, 12), float32]) */;
  %572 = @func_1296() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %573 = cosh(%569) /* ty=Tensor[(14, 2, 12), float32] */;
  %574 = %570.2;
  %575 = %571.1;
  %576 = %572.0;
  (%573, %574, %575, %576)
}

def @func_2890() -> (Tensor[(2520), float32],) {
  %577 = @func_1672() /* ty=(Tensor[(18, 140), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(2520), int8]) */;
  %578 = %577.3;
  %579 = cast(%578, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %580 = log2(%579) /* ty=Tensor[(2520), float32] */;
  (%580,)
}

def @func_597() -> (Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) {
  %581 = @func_265() /* ty=Tensor[(14, 1, 12), float32] */;
  %582 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %583 = cast(%582, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
  %584 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%581, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %587 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %588 = add(%585, %586) /* ty=Tensor[(14, ?, 12), float32] */;
  %589 = %587.0;
  (%588, %589)
}

def @func_5688() -> (Tensor[(14, 3, 12), float32], Tensor[(14, ?, 12), float32]) {
  %590 = @func_2767() /* ty=(Tensor[(14, 3, 12), int16],) */;
  %591 = %590.0;
  %592 = cast(%591, dtype="float32") /* ty=Tensor[(14, 3, 12), float32] */;
  %593 = @func_2218() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %594 = log10(%592) /* ty=Tensor[(14, 3, 12), float32] */;
  %595 = %593.0;
  (%594, %595)
}

def @func_5010() -> (Tensor[(14, ?, 12), bool],) {
  %596 = @func_1079() /* ty=Tensor[(14, ?, 12), bool] */;
  (%596,)
}

def @func_3818() -> Tensor[(14, 13, 12), int32] {
  %597 = @func_3094() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %598 = %597.0;
  %599 = cast(%598, dtype="int32") /* ty=Tensor[(14, 1, 12), int32] */;
  %600 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 13, 12), float32] */, dtype="int32") /* ty=Tensor[(14, 13, 12), int32] */;
  logical_xor(%599, %600) /* ty=Tensor[(14, 13, 12), int32] */
}

def @func_2000() -> (Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(2520), float32]) {
  %601 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %602 = cast(meta[relay.Constant][23] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %603 = reshape(%602, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %604 = @func_954(%603) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) */;
  %605 = %601.0;
  %606 = %604.3;
  (%605, %606, meta[relay.Constant][23] /* ty=Tensor[(2520), float32] */)
}

def @func_5237() -> (Tensor[(14, 3, 12), int16],) {
  %607 = @func_5096() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32]) */;
  %608 = %607.0;
  (%608,)
}

def @func_2788() -> (Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) {
  %609 = @func_2674() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %610 = @func_1186() /* ty=Tensor[(14, ?, 12), float32] */;
  %611 = %609.0;
  (%610, %611)
}

def @func_5077() -> Tensor[(14, 3, 12), int16] {
  %612 = @func_3343() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(18, 140), float64]) */;
  %612.0
}

def @func_1186() -> Tensor[(14, ?, 12), float32] {
  %613 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %613.0
}

def @func_2602() -> (Tensor[(18, 140), float64],) {
  %614 = @func_2337() /* ty=(Tensor[(18, 140), float64],) */;
  %615 = %614.0;
  (%615,)
}

def @func_1634() -> (Tensor[(18, 140), float64],) {
  %616 = @func_1264() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 15, 12), float64], Tensor[(18, 140), float32]) */;
  %617 = %616.2;
  %618 = cast(%617, dtype="float64") /* ty=Tensor[(18, 140), float64] */;
  %619 = sigmoid(%618) /* ty=Tensor[(18, 140), float64] */;
  (%619,)
}

def @func_3540() -> (Tensor[(14, 1, 12), float32],) {
  %620 = @func_1672() /* ty=(Tensor[(18, 140), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(2520), int8]) */;
  %621 = %620.1;
  (%621,)
}

def @func_6332(%var_6318: Tensor[(13, 7, 5), int8]) -> Tensor[(13, 7, 5), int8] {
  %622 = cast(meta[relay.Constant][24] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %623 = cast(%var_6318, dtype="int8") /* ty=Tensor[(13, 7, 5), int8] */;
  maximum(%622, %623) /* ty=Tensor[(13, 7, 5), int8] */
}

def @func_3426() -> (Tensor[(14, ?, 12), float32],) {
  %624 = @func_1954() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %625 = %624.0;
  (%625,)
}

def @func_671(%var_665: Tensor[(7, 11, 4), float32], %var_666: Tensor[(7, 11, 4), float32]) -> Tensor[(7, 11, 4), float32] {
  %626 = cast(%var_666, dtype="float32") /* ty=Tensor[(7, 11, 4), float32] */;
  %627 = shape_of(%var_665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%var_665, dtype="float32") /* ty=Tensor[(7, 11, 4), float32] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%628, %629) /* ty=Tensor[(7, 11, 4), float32] */
}

def @main(%var_6993: Tensor[(6, 10, 11), uint32], %var_6994: Tensor[(6, 10, 11), uint32]) -> Tensor[(6, 10, 11), bool] {
  %630 = cast(%var_6994, dtype="bool") /* ty=Tensor[(6, 10, 11), bool] */;
  %631 = shape_of(%var_6993, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_6993, dtype="bool") /* ty=Tensor[(6, 10, 11), bool] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%632, %633) /* ty=Tensor[(6, 10, 11), bool] */
}

def @func_6240(%var_6230: Tensor[(4, 8, 8), bool], %var_6231: Tensor[(4, 8, 8), bool]) -> (Tensor[(4, 8, 8), bool], Tensor[(4, 8, 8), bool]) {
  %634 = cast(%var_6231, dtype="bool") /* ty=Tensor[(4, 8, 8), bool] */;
  %635 = shape_of(%var_6230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%var_6230, dtype="bool") /* ty=Tensor[(4, 8, 8), bool] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %638 = cast(%var_6230, dtype="bool") /* ty=Tensor[(4, 8, 8), bool] */;
  %639 = shape_of(%var_6231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%var_6231, dtype="bool") /* ty=Tensor[(4, 8, 8), bool] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %642 = logical_or(%636, %637) /* ty=Tensor[(4, 8, 8), bool] */;
  %643 = not_equal(%640, %641) /* ty=Tensor[(4, 8, 8), bool] */;
  (%642, %643)
}

def @func_5056(%var_5023: Tensor[(2016), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(2016), bool]) {
  %644 = @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %645 = cast(%var_5023, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %646 = reshape(%645, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
  %647 = @func_4034(%646) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 12, 12), bool]) */;
  %648 = cast(meta[relay.Constant][25] /* ty=Tensor[(2016), float32] */, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %649 = shape_of(%var_5023, dtype="int32") /* ty=Tensor[(1), int32] */;
  %650 = cast(%var_5023, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?), bool] */;
  %652 = %644.0;
  %653 = %647.0;
  %654 = less_equal(%650, %651) /* ty=Tensor[(2016), bool] */;
  (%652, %653, %654)
}

def @func_2056(%var_2042: Tensor[(2520), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32]) {
  %655 = cast(%var_2042, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %656 = reshape(%655, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %657 = @func_1033(%656) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %658 = cast(%var_2042, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %659 = reshape(%658, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %660 = @func_343(%659) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) */;
  %661 = @func_1544() /* ty=Tensor[(14, 1, 12), float32] */;
  %662 = %657.0;
  %663 = %660.1;
  (%661, %662, %var_2042, %663)
}

def @func_1206(%var_1193: Tensor[(16, 6, 7), float64]) -> (Tensor[(16, 6, 7), float64],) {
  %664 = cast(%var_1193, dtype="float64") /* ty=Tensor[(16, 6, 7), float64] */;
  %665 = asinh(%664) /* ty=Tensor[(16, 6, 7), float64] */;
  (%665,)
}

def @func_325(%var_313: Tensor[(6, 420), float32]) -> (Tensor[(14, 15, 12), float64], Tensor[(6, 420), float32], Tensor[(4, 588), float32], Tensor[(14, 1, 12), float32]) {
  %666 = cast(%var_313, dtype="float32") /* ty=Tensor[(6, 420), float32] */;
  %667 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 588), float32] */, dtype="float32") /* ty=Tensor[(4, 588), float32] */;
  %668 = reshape(%666, newshape=[14, 15, 12]) /* ty=Tensor[(14, 15, 12), float32] */;
  %669 = reshape(%667, newshape=[14, 14, 12]) /* ty=Tensor[(14, 14, 12), float32] */;
  %670 = @func_235(%668, %669) /* ty=(Tensor[(14, 15, 12), float64], Tensor[(14, 14, 12), float64], Tensor[(14, 1, 12), float32]) */;
  %671 = @func_265() /* ty=Tensor[(14, 1, 12), float32] */;
  %672 = cast(%671, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
  %673 = %670.0;
  %674 = sqrt(%672) /* ty=Tensor[(14, 1, 12), float32] */;
  (%673, %var_313, meta[relay.Constant][26] /* ty=Tensor[(4, 588), float32] */, %674)
}

def @func_4711(%var_4691: Tensor[(1008), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 6, 12), uint64], Tensor[(1008), float32], Tensor[(14, ?, 12), float32]) {
  %675 = cast(%var_4691, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %676 = reshape(%675, newshape=[14, 6, 12]) /* ty=Tensor[(14, 6, 12), float32] */;
  %677 = @func_4539(%676) /* ty=(Tensor[(14, 6, 12), uint64], Tensor[(14, 1, 12), float32], Tensor[(14, 6, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(14, 6, 12), int64]) */;
  %678 = @func_2218() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %679 = @func_4194() /* ty=Tensor[(14, 1, 12), float32] */;
  %680 = %677.0;
  %681 = %678.0;
  (%679, %680, %var_4691, %681)
}

def @func_954(%var_933: Tensor[(2520), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) {
  %682 = @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %683 = %682.0;
  %684 = cast(%683, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
  %685 = rsqrt(%684) /* ty=Tensor[(14, 1, 12), float64] */;
  %686 = cast(%685, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
  %687 = @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %688 = cast(%var_933, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %689 = reshape(%688, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %690 = @func_343(%689) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) */;
  %691 = exp(%686) /* ty=Tensor[(14, 1, 12), float32] */;
  %692 = %687.0;
  %693 = %690.0;
  (%691, %692, %693, %var_933)
}

def @func_3014(%var_3012: Tensor[(5, 132), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(11, 5, 12), float32], Tensor[(5, 132), float32]) {
  %694 = @func_735() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %695 = cast(%var_3012, dtype="float32") /* ty=Tensor[(5, 132), float32] */;
  %696 = cast(%var_3012, dtype="float32") /* ty=Tensor[(5, 132), float32] */;
  %697 = reshape(%695, newshape=[11, 5, 12]) /* ty=Tensor[(11, 5, 12), float32] */;
  %698 = reshape(%696, newshape=[11, 5, 12]) /* ty=Tensor[(11, 5, 12), float32] */;
  %699 = @func_2857(%697, %698) /* ty=(Tensor[(11, 5, 12), float32],) */;
  %700 = %694.0;
  %701 = %699.0;
  (%700, %701, %var_3012)
}

def @func_6521() -> (Tensor[(18, 140), float32], Tensor[(14, 3, 12), int32]) {
  %702 = @func_5497() /* ty=(Tensor[(18, 140), float32], Tensor[(14, 1, 12), float32]) */;
  %703 = %702.0;
  %704 = cast(%703, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %705 = rsqrt(%704) /* ty=Tensor[(18, 140), float32] */;
  %706 = cast(%705, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %707 = @func_2565() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %708 = %707.0;
  %709 = @func_5237() /* ty=(Tensor[(14, 3, 12), int16],) */;
  %710 = %709.0;
  %711 = cast(%708, dtype="int32") /* ty=Tensor[(14, ?, 12), int32] */;
  %712 = cast(%710, dtype="int32") /* ty=Tensor[(14, 3, 12), int32] */;
  %713 = tan(%706) /* ty=Tensor[(18, 140), float32] */;
  %714 = left_shift(%711, %712) /* ty=Tensor[(14, 3, 12), int32] */;
  (%713, %714)
}

def @func_2684() -> (Tensor[(14, ?, 12), bool],) {
  %715 = @func_1107() /* ty=Tensor[(14, ?, 12), bool] */;
  (%715,)
}

def @func_2767() -> (Tensor[(14, 3, 12), int16],) {
  %716 = @func_1747() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %717 = %716.0;
  (%717,)
}

def @func_2857(%var_2837: Tensor[(11, 5, 12), float32], %var_2838: Tensor[(11, 5, 12), float32]) -> (Tensor[(11, 5, 12), float32],) {
  %718 = cast(%var_2838, dtype="float32") /* ty=Tensor[(11, 5, 12), float32] */;
  %719 = shape_of(%var_2837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%var_2837, dtype="float32") /* ty=Tensor[(11, 5, 12), float32] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %722 = floor_divide(%720, %721) /* ty=Tensor[(11, 5, 12), float32] */;
  (%722,)
}

def @func_6457() -> (Tensor[(14, ?, 12), bool],) {
  %723 = @func_2329() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float64], Tensor[(6, 420), float32], Tensor[(2520), float32], Tensor[(14, ?, 12), bool]) */;
  %724 = %723.4;
  (%724,)
}

def @func_2924(%var_2904: Tensor[(7, 16, 7), float64]) -> (Tensor[(7, 16, 7), float64], Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) {
  %725 = cast(%var_2904, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %726 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %727 = @func_2788() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */;
  %728 = cosh(%725) /* ty=Tensor[(7, 16, 7), float64] */;
  %729 = %726.0;
  %730 = %727.1;
  (%728, %729, %730)
}

def @func_3113(%var_3109: Tensor[(2, 14, 14), float32]) -> (Tensor[(2, 14, 14), float32],) {
  %731 = cast(%var_3109, dtype="float32") /* ty=Tensor[(2, 14, 14), float32] */;
  %732 = acosh(%731) /* ty=Tensor[(2, 14, 14), float32] */;
  (%732,)
}

def @func_2653(%var_2639: Tensor[(14, 11, 12), bool]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 11, 12), uint64], Tensor[(154, 2), float32], Tensor[(308), float32]) {
  %733 = @func_1296() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %734 = %733.0;
  %735 = cast(%734, dtype="uint64") /* ty=Tensor[(14, ?, 12), uint64] */;
  %736 = cast(%var_2639, dtype="uint64") /* ty=Tensor[(14, 11, 12), uint64] */;
  %737 = cast(meta[relay.Constant][27] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %738 = reshape(%737, newshape=[154, 2]) /* ty=Tensor[(154, 2), float32] */;
  %739 = @func_969(%738) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(7, 11, 4), float32], Tensor[(154, 2), float32]) */;
  %740 = @func_1544() /* ty=Tensor[(14, 1, 12), float32] */;
  %741 = @func_265() /* ty=Tensor[(14, 1, 12), float32] */;
  %742 = maximum(%735, %736) /* ty=Tensor[(14, 11, 12), uint64] */;
  %743 = %739.2;
  (%740, %741, %742, %743, meta[relay.Constant][27] /* ty=Tensor[(308), float32] */)
}

def @func_5542() -> (Tensor[(14, ?, 12), int8], Tensor[(18, 140), float64]) {
  %744 = @func_2788() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */;
  %745 = %744.0;
  %746 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 1, 12), float32] */, dtype="int8") /* ty=Tensor[(14, 1, 12), int8] */;
  %747 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%745, dtype="int8") /* ty=Tensor[(14, ?, 12), int8] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %750 = @func_2602() /* ty=(Tensor[(18, 140), float64],) */;
  %751 = %750.0;
  %752 = cast(%751, dtype="float64") /* ty=Tensor[(18, 140), float64] */;
  %753 = multiply(%748, %749) /* ty=Tensor[(14, ?, 12), int8] */;
  %754 = erf(%752) /* ty=Tensor[(18, 140), float64] */;
  (%753, %754)
}

def @func_5096() -> (Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32]) {
  %755 = @func_2767() /* ty=(Tensor[(14, 3, 12), int16],) */;
  %756 = @func_3540() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %757 = %755.0;
  %758 = %756.0;
  (%757, %758)
}

def @func_6063(%var_6050: Tensor[(14, 13, 12), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 13, 12), int16]) {
  %759 = @func_1590() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %760 = %759.0;
  %761 = cast(%760, dtype="int16") /* ty=Tensor[(14, ?, 12), int16] */;
  %762 = cast(%var_6050, dtype="int16") /* ty=Tensor[(14, 13, 12), int16] */;
  %763 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %764 = bitwise_or(%761, %762) /* ty=Tensor[(14, 13, 12), int16] */;
  (%763, %764)
}

def @func_5855() -> (Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), int32]) {
  %765 = @func_2684() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %766 = %765.0;
  %767 = @func_3426() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %768 = %767.0;
  %769 = cast(%766, dtype="bool") /* ty=Tensor[(14, ?, 12), bool] */;
  %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%768, dtype="bool") /* ty=Tensor[(14, ?, 12), bool] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %773 = logical_and(%771, %772) /* ty=Tensor[(14, ?, 12), bool] */;
  %774 = cast(%773, dtype="float32") /* ty=Tensor[(14, ?, 12), float32] */;
  %775 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%766, dtype="float32") /* ty=Tensor[(14, ?, 12), float32] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %778 = @func_1285() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %779 = %778.0;
  %780 = cast(%779, dtype="int32") /* ty=Tensor[(14, 1, 12), int32] */;
  %781 = shape_of(%773, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(%773, dtype="int32") /* ty=Tensor[(14, ?, 12), int32] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %784 = power(%776, %777) /* ty=Tensor[(14, ?, 12), float32] */;
  %785 = bitwise_or(%782, %783) /* ty=Tensor[(14, ?, 12), int32] */;
  (%784, %785)
}

def @func_5979(%var_5963: Tensor[(15, 5, 3), int16]) -> Tensor[(15, 5, 3), bool] {
  %786 = cast(%var_5963, dtype="int16") /* ty=Tensor[(15, 5, 3), int16] */;
  %787 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(15, 5, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 5, 3), int16] */, dtype="int16") /* ty=Tensor[(15, 5, 3), int16] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %790 = minimum(%788, %789) /* ty=Tensor[(15, 5, 3), int16] */;
  %791 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 5, 3), int16] */, dtype="bool") /* ty=Tensor[(15, 5, 3), bool] */;
  %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(%790, dtype="bool") /* ty=Tensor[(15, 5, 3), bool] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%793, %794) /* ty=Tensor[(15, 5, 3), bool] */
}

def @func_5750(%var_5708: Tensor[(9, 9, 1), float32]) -> (Tensor[(9, 9, 1), float32], Tensor[(14, ?, 12), bool]) {
  %795 = cast(%var_5708, dtype="float32") /* ty=Tensor[(9, 9, 1), float32] */;
  %796 = @func_2674() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %797 = sinh(%795) /* ty=Tensor[(9, 9, 1), float32] */;
  %798 = %796.0;
  (%797, %798)
}

def @func_5808() -> (Tensor[(14, 1, 12), float32],) {
  %799 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
  %800 = %799.2;
  (%800,)
}

def @func_3783() -> (Tensor[(18, 140), float64], Tensor[(18, 140), float64], Tensor[(12, 6, 9), float64], Tensor[(2520), float32]) {
  %801 = @func_1634() /* ty=(Tensor[(18, 140), float64],) */;
  %802 = @func_2337() /* ty=(Tensor[(18, 140), float64],) */;
  %803 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 6, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 9), float32] */;
  %804 = acos(%803) /* ty=Tensor[(12, 6, 9), float32] */;
  %805 = cast(%804, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
  %806 = %801.0;
  %807 = cast(%806, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %808 = reshape(%807, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %809 = @func_1033(%808) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %810 = %802.0;
  %811 = asinh(%805) /* ty=Tensor[(12, 6, 9), float64] */;
  %812 = %809.2;
  (%806, %810, %811, %812)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4268() -> Tensor[(14, 1, 12), float32] {
  %0 = @func_3094() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %0.0
}

def @func_99() -> Tensor[(14, 1, 12), float32] {
  %1 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %2 = %1.0;
  %3 = cast(%2, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
  log(%3) /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_3382() -> (Tensor[(14, ?, 12), bool],) {
  %6 = fn () -> (Tensor[(14, ?, 12), bool],) {
    %4 = @func_2684() /* ty=(Tensor[(14, ?, 12), bool],) */;
    %5 = %4.0;
    (%5,)
  };
  %6() /* ty=(Tensor[(14, ?, 12), bool],) */
}

def @func_3315(%var_3313: float64, %var_3314: Tensor[(2, 2, 4), float64]) -> (Tensor[(2, 2, 4), float64], Tensor[(14, 1, 12), float32]) {
  %12 = fn (%var_3303: float64, %var_3304: Tensor[(2, 2, 4), float64]) -> (Tensor[(2, 2, 4), float64], Tensor[(14, 1, 12), float32]) {
    %7 = cast(%var_3303, dtype="float64") /* ty=float64 */;
    %8 = cast(%var_3304, dtype="float64") /* ty=Tensor[(2, 2, 4), float64] */;
    %9 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %10 = floor_mod(%7, %8) /* ty=Tensor[(2, 2, 4), float64] */;
    %11 = %9.2;
    (%10, %11)
  };
  %12(%var_3313, %var_3314) /* ty=(Tensor[(2, 2, 4), float64], Tensor[(14, 1, 12), float32]) */
}

def @func_969(%var_966: Tensor[(154, 2), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(7, 11, 4), float32], Tensor[(154, 2), float32]) {
  %13 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %14 = cast(%var_966, dtype="float32") /* ty=Tensor[(154, 2), float32] */;
  %15 = cast(%var_966, dtype="float32") /* ty=Tensor[(154, 2), float32] */;
  %16 = reshape(%14, newshape=[7, 11, 4]) /* ty=Tensor[(7, 11, 4), float32] */;
  %17 = reshape(%15, newshape=[7, 11, 4]) /* ty=Tensor[(7, 11, 4), float32] */;
  %18 = %13.0;
  %19 = @func_671(%16, %17) /* ty=Tensor[(7, 11, 4), float32] */;
  (%18, %19, %var_966)
}

def @func_3542() -> (Tensor[(14, 1, 12), float32],) {
  @func_3540() /* ty=(Tensor[(14, 1, 12), float32],) */
}

def @func_4737() -> Tensor[(14, ?, 12), float32] {
  %20 = @func_3857() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(18, 140), float32]) */;
  %20.0
}

def @func_671(%var_665: Tensor[(7, 11, 4), float32], %var_666: Tensor[(7, 11, 4), float32]) -> Tensor[(7, 11, 4), float32] {
  %21 = cast(%var_666, dtype="float32") /* ty=Tensor[(7, 11, 4), float32] */;
  %22 = shape_of(%var_665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%var_665, dtype="float32") /* ty=Tensor[(7, 11, 4), float32] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%23, %24) /* ty=Tensor[(7, 11, 4), float32] */
}

def @func_537(%var_535: Tensor[(6, 420), float32], %var_536: Tensor[(2520), float32]) -> (Tensor[(6, 420), float32], Tensor[(2520), int8], Tensor[(14, ?, 12), bool]) {
  @func_533(%var_535, %var_536) /* ty=(Tensor[(6, 420), float32], Tensor[(2520), int8], Tensor[(14, ?, 12), bool]) */
}

def @func_2892() -> (Tensor[(2520), float32],) {
  @func_2890() /* ty=(Tensor[(2520), float32],) */
}

def @func_5098() -> (Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32]) {
  @func_5096() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32]) */
}

def @func_2435(%var_2433: Tensor[(12, 12, 8), bool], %var_2434: Tensor[(12, 12, 8), bool]) -> (Tensor[(12, 12, 8), bool],) {
  %30 = fn (%var_2416: Tensor[(12, 12, 8), bool], %var_2417: Tensor[(12, 12, 8), bool]) -> (Tensor[(12, 12, 8), bool],) {
    %25 = cast(%var_2417, dtype="bool") /* ty=Tensor[(12, 12, 8), bool] */;
    %26 = shape_of(%var_2416, dtype="int32") /* ty=Tensor[(3), int32] */;
    %27 = cast(%var_2416, dtype="bool") /* ty=Tensor[(12, 12, 8), bool] */;
    %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %29 = logical_or(%27, %28) /* ty=Tensor[(12, 12, 8), bool] */;
    (%29,)
  };
  %30(%var_2433, %var_2434) /* ty=(Tensor[(12, 12, 8), bool],) */
}

def @func_6955() -> (Tensor[(14, 13, 12), int32], Tensor[(14, ?, 12), bool]) {
  %33 = fn () -> (Tensor[(14, 13, 12), int32], Tensor[(14, ?, 12), bool]) {
    %31 = @func_3818() /* ty=Tensor[(14, 13, 12), int32] */;
    %32 = @func_1107() /* ty=Tensor[(14, ?, 12), bool] */;
    (%31, %32)
  };
  %33() /* ty=(Tensor[(14, 13, 12), int32], Tensor[(14, ?, 12), bool]) */
}

def @func_5855() -> (Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), int32]) {
  %34 = @func_2684() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %35 = %34.0;
  %36 = @func_3426() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %37 = %36.0;
  %38 = cast(%35, dtype="bool") /* ty=Tensor[(14, ?, 12), bool] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%37, dtype="bool") /* ty=Tensor[(14, ?, 12), bool] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %42 = logical_and(%40, %41) /* ty=Tensor[(14, ?, 12), bool] */;
  %43 = cast(%42, dtype="float32") /* ty=Tensor[(14, ?, 12), float32] */;
  %44 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%35, dtype="float32") /* ty=Tensor[(14, ?, 12), float32] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %47 = @func_1285() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %48 = %47.0;
  %49 = cast(%48, dtype="int32") /* ty=Tensor[(14, 1, 12), int32] */;
  %50 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%42, dtype="int32") /* ty=Tensor[(14, ?, 12), int32] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %53 = power(%45, %46) /* ty=Tensor[(14, ?, 12), float32] */;
  %54 = bitwise_or(%51, %52) /* ty=Tensor[(14, ?, 12), int32] */;
  (%53, %54)
}

def @func_5956(%var_5943: Tensor[(24, 48), bool], %var_5951: Tensor[(14, 3, 12), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(12, 12, 8), bool], Tensor[(24, 48), bool], Tensor[(14, 3, 12), uint16]) {
  %55 = @func_3426() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %56 = cast(%var_5943, dtype="bool") /* ty=Tensor[(24, 48), bool] */;
  %57 = cast(%var_5943, dtype="bool") /* ty=Tensor[(24, 48), bool] */;
  %58 = reshape(%56, newshape=[12, 12, 8]) /* ty=Tensor[(12, 12, 8), bool] */;
  %59 = reshape(%57, newshape=[12, 12, 8]) /* ty=Tensor[(12, 12, 8), bool] */;
  %60 = @func_2432(%58, %59) /* ty=(Tensor[(12, 12, 8), bool],) */;
  %61 = @func_2459() /* ty=(Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32], Tensor[(1, 2520), float32]) */;
  %62 = %61.1;
  %63 = cast(%62, dtype="uint16") /* ty=Tensor[(14, 1, 12), uint16] */;
  %64 = cast(%var_5951, dtype="uint16") /* ty=Tensor[(14, 3, 12), uint16] */;
  %65 = %55.0;
  %66 = %60.0;
  %67 = right_shift(%63, %64) /* ty=Tensor[(14, 3, 12), uint16] */;
  (%65, %66, %var_5943, %67)
}

def @func_3668(%var_3666: Tensor[(14, 16, 12), float32]) -> Tensor[(14, 16, 12), uint8] {
  @func_3665(%var_3666) /* ty=Tensor[(14, 16, 12), uint8] */
}

def @func_5452(%var_5450: Tensor[(8, 13, 7), float32], %var_5451: Tensor[(8, 13, 7), float32]) -> (Tensor[(8, 13, 7), float32], Tensor[(18, 140), float64]) {
  %75 = fn (%var_5439: Tensor[(8, 13, 7), float32], %var_5440: Tensor[(8, 13, 7), float32]) -> (Tensor[(8, 13, 7), float32], Tensor[(18, 140), float64]) {
    %68 = cast(%var_5440, dtype="float32") /* ty=Tensor[(8, 13, 7), float32] */;
    %69 = shape_of(%var_5439, dtype="int32") /* ty=Tensor[(3), int32] */;
    %70 = cast(%var_5439, dtype="float32") /* ty=Tensor[(8, 13, 7), float32] */;
    %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %72 = @func_2337() /* ty=(Tensor[(18, 140), float64],) */;
    %73 = power(%70, %71) /* ty=Tensor[(8, 13, 7), float32] */;
    %74 = %72.0;
    (%73, %74)
  };
  %75(%var_5450, %var_5451) /* ty=(Tensor[(8, 13, 7), float32], Tensor[(18, 140), float64]) */
}

def @func_5204(%var_5203: Tensor[(14, 2, 12), bool]) -> (Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 2, 12), int32]) {
  %97 = fn (%var_5177: Tensor[(14, 2, 12), bool]) -> (Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 2, 12), int32]) {
    %76 = @func_2890() /* ty=(Tensor[(2520), float32],) */;
    %77 = @func_1590() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %78 = @func_4439() /* ty=(Tensor[(14, 2, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */;
    %79 = %78.0;
    %80 = @func_5096() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32]) */;
    %81 = %80.1;
    %82 = cast(%79, dtype="bool") /* ty=Tensor[(14, 2, 12), bool] */;
    %83 = cast(%81, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
    %84 = less_equal(%82, %83) /* ty=Tensor[(14, 2, 12), bool] */;
    %85 = cast(%var_5177, dtype="uint64") /* ty=Tensor[(14, 2, 12), uint64] */;
    %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
    %87 = cast(%84, dtype="uint64") /* ty=Tensor[(14, 2, 12), uint64] */;
    %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %89 = add(%87, %88) /* ty=Tensor[(14, 2, 12), uint64] */;
    %90 = cast(%var_5177, dtype="int32") /* ty=Tensor[(14, 2, 12), int32] */;
    %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
    %92 = cast(%89, dtype="int32") /* ty=Tensor[(14, 2, 12), int32] */;
    %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %94 = %76.0;
    %95 = %77.1;
    %96 = bitwise_or(%92, %93) /* ty=Tensor[(14, 2, 12), int32] */;
    (%94, %95, %96)
  };
  %97(%var_5203) /* ty=(Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 2, 12), int32]) */
}

def @func_597() -> (Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) {
  %98 = @func_265() /* ty=Tensor[(14, 1, 12), float32] */;
  %99 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %100 = cast(%99, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
  %101 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%98, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %104 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %105 = add(%102, %103) /* ty=Tensor[(14, ?, 12), float32] */;
  %106 = %104.0;
  (%105, %106)
}

def @func_5798(%var_5797: Tensor[(2520), float32]) -> (Tensor[(14, 3, 12), int16], Tensor[(2520), float64]) {
  %121 = fn (%var_5772: Tensor[(2520), float32]) -> (Tensor[(14, 3, 12), int16], Tensor[(2520), float64]) {
    %107 = @func_5222() /* ty=(Tensor[(14, 3, 12), int16],) */;
    %108 = @func_2329() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float64], Tensor[(6, 420), float32], Tensor[(2520), float32], Tensor[(14, ?, 12), bool]) */;
    %109 = %108.3;
    %110 = cast(%var_5772, dtype="uint16") /* ty=Tensor[(2520), uint16] */;
    %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(1), int32] */;
    %112 = cast(%109, dtype="uint16") /* ty=Tensor[(2520), uint16] */;
    %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %114 = right_shift(%112, %113) /* ty=Tensor[(2520), uint16] */;
    %115 = cast(%109, dtype="float64") /* ty=Tensor[(2520), float64] */;
    %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(1), int32] */;
    %117 = cast(%114, dtype="float64") /* ty=Tensor[(2520), float64] */;
    %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?), float64] */;
    %119 = %107.0;
    %120 = divide(%117, %118) /* ty=Tensor[(2520), float64] */;
    (%119, %120)
  };
  %121(%var_5797) /* ty=(Tensor[(14, 3, 12), int16], Tensor[(2520), float64]) */
}

def @func_6393() -> (Tensor[(14, ?, 12), float32],) {
  %122 = @func_5688() /* ty=(Tensor[(14, 3, 12), float32], Tensor[(14, ?, 12), float32]) */;
  %123 = %122.1;
  (%123,)
}

def @func_3214() -> (Tensor[(14, 1, 12), float32], Tensor[(14, 3, 12), int16]) {
  %128 = fn () -> (Tensor[(14, 1, 12), float32], Tensor[(14, 3, 12), int16]) {
    %124 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %125 = @func_1747() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %126 = %124.0;
    %127 = %125.0;
    (%126, %127)
  };
  %128() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 3, 12), int16]) */
}

def @func_4978(%var_4977: Tensor[(784), float64]) -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(784), float64]) {
  %140 = fn (%var_4971: Tensor[(784), float64]) -> (Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(784), float64]) {
    %129 = @func_1285() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %130 = %129.0;
    %131 = cast(%130, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
    %132 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 12, 12), float32] */, dtype="float64") /* ty=Tensor[(14, 12, 12), float64] */;
    %133 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 12, 12), float32] */, dtype="float32") /* ty=Tensor[(14, 12, 12), float32] */;
    %134 = cast(%var_4971, dtype="float64") /* ty=Tensor[(784), float64] */;
    %135 = reshape(%134, newshape=[7, 16, 7]) /* ty=Tensor[(7, 16, 7), float64] */;
    %136 = @func_2924(%135) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) */;
    %137 = floor_divide(%131, %132) /* ty=Tensor[(14, 12, 12), float64] */;
    %138 = log(%133) /* ty=Tensor[(14, 12, 12), float32] */;
    %139 = %136.1;
    (%137, %138, %139, %var_4971)
  };
  %140(%var_4977) /* ty=(Tensor[(14, 12, 12), float64], Tensor[(14, 12, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(784), float64]) */
}

def @func_6912(%var_6910: float64, %var_6911: Tensor[(10, 6, 4), bool]) -> (Tensor[(10, 6, 4), bool], Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) {
  %153 = fn (%var_6889: float64, %var_6897: Tensor[(10, 6, 4), bool]) -> (Tensor[(10, 6, 4), bool], Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) {
    %141 = cast(%var_6889, dtype="bool") /* ty=bool */;
    %142 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 6, 4), float64] */, dtype="bool") /* ty=Tensor[(10, 6, 4), bool] */;
    %143 = greater(%141, %142) /* ty=Tensor[(10, 6, 4), bool] */;
    %144 = cast(%var_6897, dtype="bool") /* ty=Tensor[(10, 6, 4), bool] */;
    %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
    %146 = cast(%143, dtype="bool") /* ty=Tensor[(10, 6, 4), bool] */;
    %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %148 = @func_2218() /* ty=(Tensor[(14, ?, 12), float32],) */;
    %149 = @func_1296() /* ty=(Tensor[(14, ?, 12), bool],) */;
    %150 = not_equal(%146, %147) /* ty=Tensor[(10, 6, 4), bool] */;
    %151 = %148.0;
    %152 = %149.0;
    (%150, %151, %152)
  };
  %153(%var_6910, %var_6911) /* ty=(Tensor[(10, 6, 4), bool], Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */
}

def @func_4756() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool], Tensor[(2520), float32]) {
  @func_4754() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool], Tensor[(2520), float32]) */
}

def @func_328(%var_326: Tensor[(6, 420), float32]) -> (Tensor[(14, 15, 12), float64], Tensor[(6, 420), float32], Tensor[(4, 588), float32], Tensor[(14, 1, 12), float32]) {
  @func_325(%var_326) /* ty=(Tensor[(14, 15, 12), float64], Tensor[(6, 420), float32], Tensor[(4, 588), float32], Tensor[(14, 1, 12), float32]) */
}

def @func_3783() -> (Tensor[(18, 140), float64], Tensor[(18, 140), float64], Tensor[(12, 6, 9), float64], Tensor[(2520), float32]) {
  %154 = @func_1634() /* ty=(Tensor[(18, 140), float64],) */;
  %155 = @func_2337() /* ty=(Tensor[(18, 140), float64],) */;
  %156 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 6, 9), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 9), float32] */;
  %157 = acos(%156) /* ty=Tensor[(12, 6, 9), float32] */;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(12, 6, 9), float64] */;
  %159 = %154.0;
  %160 = cast(%159, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %161 = reshape(%160, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %162 = @func_1033(%161) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %163 = %155.0;
  %164 = asinh(%158) /* ty=Tensor[(12, 6, 9), float64] */;
  %165 = %162.2;
  (%159, %163, %164, %165)
}

def @func_862() -> (Tensor[(14, 1, 12), float32],) {
  %166 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %167 = %166.0;
  (%167,)
}

def @func_3345() -> (Tensor[(14, 3, 12), int16], Tensor[(18, 140), float64]) {
  @func_3343() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(18, 140), float64]) */
}

def @func_4739() -> Tensor[(14, ?, 12), float32] {
  @func_4737() /* ty=Tensor[(14, ?, 12), float32] */
}

def @func_1264() -> (Tensor[(14, 1, 12), float32], Tensor[(14, 15, 12), float64], Tensor[(18, 140), float32]) {
  %168 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %169 = %168.1;
  %170 = cast(%169, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
  %171 = cast(meta[relay.Constant][3] /* ty=Tensor[(18, 140), float32] */, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %172 = reshape(%171, newshape=[6, 420]) /* ty=Tensor[(6, 420), float32] */;
  %173 = @func_325(%172) /* ty=(Tensor[(14, 15, 12), float64], Tensor[(6, 420), float32], Tensor[(4, 588), float32], Tensor[(14, 1, 12), float32]) */;
  %174 = cos(%170) /* ty=Tensor[(14, 1, 12), float32] */;
  %175 = %173.0;
  (%174, %175, meta[relay.Constant][3] /* ty=Tensor[(18, 140), float32] */)
}

def @func_4665() -> Tensor[(14, 1, 12), float32] {
  %177 = fn () -> Tensor[(14, 1, 12), float32] {
    %176 = @func_3540() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %176.0
  };
  %177() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_6799() -> Tensor[(14, 1, 12), float32] {
  %178 = @func_4754() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool], Tensor[(2520), float32]) */;
  %178.0
}

def @func_4034(%var_4025: Tensor[(14, 12, 12), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(14, 12, 12), bool]) {
  %179 = @func_2788() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */;
  %180 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %181 = %180.1;
  %182 = cast(%181, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
  %183 = cast(%var_4025, dtype="bool") /* ty=Tensor[(14, 12, 12), bool] */;
  %184 = %179.0;
  %185 = not_equal(%182, %183) /* ty=Tensor[(14, 12, 12), bool] */;
  (%184, %185)
}

def @func_5767() -> Tensor[(14, 1, 12), float32] {
  %186 = @func_2459() /* ty=(Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32], Tensor[(1, 2520), float32]) */;
  %186.1
}

def @func_3448() -> Tensor[(14, 1, 12), float32] {
  @func_3446() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_5809() -> (Tensor[(14, 1, 12), float32],) {
  %189 = fn () -> (Tensor[(14, 1, 12), float32],) {
    %187 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
    %188 = %187.2;
    (%188,)
  };
  %189() /* ty=(Tensor[(14, 1, 12), float32],) */
}

def @func_1285() -> (Tensor[(14, 1, 12), float32],) {
  %190 = @func_265() /* ty=Tensor[(14, 1, 12), float32] */;
  (%190,)
}

def @func_3017(%var_3015: Tensor[(5, 132), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(11, 5, 12), float32], Tensor[(5, 132), float32]) {
  @func_3014(%var_3015) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(11, 5, 12), float32], Tensor[(5, 132), float32]) */
}

def @func_2604() -> (Tensor[(18, 140), float64],) {
  @func_2602() /* ty=(Tensor[(18, 140), float64],) */
}

def @func_5077() -> Tensor[(14, 3, 12), int16] {
  %191 = @func_3343() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(18, 140), float64]) */;
  %191.0
}

def @func_5239() -> (Tensor[(14, 3, 12), int16],) {
  @func_5237() /* ty=(Tensor[(14, 3, 12), int16],) */
}

def @func_4754() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool], Tensor[(2520), float32]) {
  %192 = @func_3094() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %193 = cast(meta[relay.Constant][4] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %194 = cast(meta[relay.Constant][4] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %195 = reshape(%193, newshape=[6, 420]) /* ty=Tensor[(6, 420), float32] */;
  %196 = reshape(%194, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %197 = @func_533(%195, %196) /* ty=(Tensor[(6, 420), float32], Tensor[(2520), int8], Tensor[(14, ?, 12), bool]) */;
  %198 = %192.0;
  %199 = %197.2;
  (%198, %199, meta[relay.Constant][4] /* ty=Tensor[(2520), float32] */)
}

def @func_2219() -> (Tensor[(14, ?, 12), float32],) {
  %202 = fn () -> (Tensor[(14, ?, 12), float32],) {
    %200 = @func_1954() /* ty=(Tensor[(14, ?, 12), float32],) */;
    %201 = %200.0;
    (%201,)
  };
  %202() /* ty=(Tensor[(14, ?, 12), float32],) */
}

def @func_5769() -> Tensor[(14, 1, 12), float32] {
  @func_5767() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_2685() -> (Tensor[(14, ?, 12), bool],) {
  %204 = fn () -> (Tensor[(14, ?, 12), bool],) {
    %203 = @func_1107() /* ty=Tensor[(14, ?, 12), bool] */;
    (%203,)
  };
  %204() /* ty=(Tensor[(14, ?, 12), bool],) */
}

def @func_4270() -> Tensor[(14, 1, 12), float32] {
  @func_4268() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_3113(%var_3109: Tensor[(2, 14, 14), float32]) -> (Tensor[(2, 14, 14), float32],) {
  %205 = cast(%var_3109, dtype="float32") /* ty=Tensor[(2, 14, 14), float32] */;
  %206 = acosh(%205) /* ty=Tensor[(2, 14, 14), float32] */;
  (%206,)
}

def @func_3868() -> (Tensor[(14, 1, 12), float32],) {
  %209 = fn () -> (Tensor[(14, 1, 12), float32],) {
    %207 = @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %208 = %207.0;
    (%208,)
  };
  %209() /* ty=(Tensor[(14, 1, 12), float32],) */
}

def @func_5223() -> (Tensor[(14, 3, 12), int16],) {
  %212 = fn () -> (Tensor[(14, 3, 12), int16],) {
    %210 = @func_2767() /* ty=(Tensor[(14, 3, 12), int16],) */;
    %211 = %210.0;
    (%211,)
  };
  %212() /* ty=(Tensor[(14, 3, 12), int16],) */
}

def @func_2602() -> (Tensor[(18, 140), float64],) {
  %213 = @func_2337() /* ty=(Tensor[(18, 140), float64],) */;
  %214 = %213.0;
  (%214,)
}

def @func_5498() -> (Tensor[(18, 140), float32], Tensor[(14, 1, 12), float32]) {
  %218 = fn () -> (Tensor[(18, 140), float32], Tensor[(14, 1, 12), float32]) {
    %215 = @func_3857() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(18, 140), float32]) */;
    %216 = %215.1;
    %217 = @func_4447() /* ty=Tensor[(14, 1, 12), float32] */;
    (%216, %217)
  };
  %218() /* ty=(Tensor[(18, 140), float32], Tensor[(14, 1, 12), float32]) */
}

def @func_6990() -> Tensor[(14, ?, 12), bool] {
  %219 = @func_1544() /* ty=Tensor[(14, 1, 12), float32] */;
  %220 = @func_3381() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %221 = %220.0;
  %222 = cast(%221, dtype="bool") /* ty=Tensor[(14, ?, 12), bool] */;
  %223 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%219, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%224, %225) /* ty=Tensor[(14, ?, 12), bool] */
}

def @func_1955() -> (Tensor[(14, ?, 12), float32],) {
  %228 = fn () -> (Tensor[(14, ?, 12), float32],) {
    %226 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %227 = %226.0;
    (%227,)
  };
  %228() /* ty=(Tensor[(14, ?, 12), float32],) */
}

def @func_4188() -> (Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) {
  %231 = fn () -> (Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) {
    %229 = @func_1186() /* ty=Tensor[(14, ?, 12), float32] */;
    %230 = @func_1107() /* ty=Tensor[(14, ?, 12), bool] */;
    (%229, %230)
  };
  %231() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */
}

def @func_1298() -> (Tensor[(14, ?, 12), bool],) {
  @func_1296() /* ty=(Tensor[(14, ?, 12), bool],) */
}

def @func_6647(%var_6645: Tensor[(14, 1, 12), float32]) -> (Tensor[(14, ?, 12), uint8], Tensor[(14, ?, 12), bool], Tensor[(81), float32], Tensor[(14, 13, 12), uint32], Tensor[(2184), float32], Tensor[(14, 13, 12), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 11, 12), uint64], Tensor[(924, 2), bool]) {
  @func_6644(%var_6645) /* ty=(Tensor[(14, ?, 12), uint8], Tensor[(14, ?, 12), bool], Tensor[(81), float32], Tensor[(14, 13, 12), uint32], Tensor[(2184), float32], Tensor[(14, 13, 12), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 11, 12), uint64], Tensor[(924, 2), bool]) */
}

def @func_1923() -> Tensor[(18, 140), float32] {
  @func_1921() /* ty=Tensor[(18, 140), float32] */
}

def @func_2924(%var_2904: Tensor[(7, 16, 7), float64]) -> (Tensor[(7, 16, 7), float64], Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) {
  %232 = cast(%var_2904, dtype="float64") /* ty=Tensor[(7, 16, 7), float64] */;
  %233 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %234 = @func_2788() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */;
  %235 = cosh(%232) /* ty=Tensor[(7, 16, 7), float64] */;
  %236 = %233.0;
  %237 = %234.1;
  (%235, %236, %237)
}

def @func_2986(%var_2984: Tensor[(13, 11, 2), int32]) -> (Tensor[(13, 11, 2), bool], Tensor[(13, 11, 2), float32]) {
  @func_2983(%var_2984) /* ty=(Tensor[(13, 11, 2), bool], Tensor[(13, 11, 2), float32]) */
}

def @func_3116(%var_3114: Tensor[(2, 14, 14), float32]) -> (Tensor[(2, 14, 14), float32],) {
  @func_3113(%var_3114) /* ty=(Tensor[(2, 14, 14), float32],) */
}

def @func_1287() -> (Tensor[(14, 1, 12), float32],) {
  @func_1285() /* ty=(Tensor[(14, 1, 12), float32],) */
}

def @func_5408() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) {
  %241 = fn () -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) {
    %238 = @func_4604() /* ty=(Tensor[(14, ?, 12), bool],) */;
    %239 = @func_3446() /* ty=Tensor[(14, 1, 12), float32] */;
    %240 = %238.0;
    (%239, %240)
  };
  %241() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) */
}

def @func_6260() -> Tensor[(18, 140), float32] {
  @func_1921() /* ty=Tensor[(18, 140), float32] */
}

def @func_2001() -> (Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(2520), float32]) {
  %248 = fn () -> (Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(2520), float32]) {
    %242 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %243 = cast(meta[relay.Constant][5] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
    %244 = reshape(%243, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
    %245 = @func_954(%244) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) */;
    %246 = %242.0;
    %247 = %245.3;
    (%246, %247, meta[relay.Constant][5] /* ty=Tensor[(2520), float32] */)
  };
  %248() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(2520), float32]) */
}

def @func_5111() -> Tensor[(14, 3, 12), int16] {
  %250 = fn () -> Tensor[(14, 3, 12), int16] {
    %249 = @func_5096() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32]) */;
    %249.0
  };
  %250() /* ty=Tensor[(14, 3, 12), int16] */
}

def @func_4604() -> (Tensor[(14, ?, 12), bool],) {
  %251 = @func_2674() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %252 = %251.0;
  (%252,)
}

def @func_3014(%var_3012: Tensor[(5, 132), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(11, 5, 12), float32], Tensor[(5, 132), float32]) {
  %253 = @func_735() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %254 = cast(%var_3012, dtype="float32") /* ty=Tensor[(5, 132), float32] */;
  %255 = cast(%var_3012, dtype="float32") /* ty=Tensor[(5, 132), float32] */;
  %256 = reshape(%254, newshape=[11, 5, 12]) /* ty=Tensor[(11, 5, 12), float32] */;
  %257 = reshape(%255, newshape=[11, 5, 12]) /* ty=Tensor[(11, 5, 12), float32] */;
  %258 = @func_2857(%256, %257) /* ty=(Tensor[(11, 5, 12), float32],) */;
  %259 = %253.0;
  %260 = %258.0;
  (%259, %260, %var_3012)
}

def @func_1635() -> (Tensor[(18, 140), float64],) {
  %265 = fn () -> (Tensor[(18, 140), float64],) {
    %261 = @func_1264() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 15, 12), float64], Tensor[(18, 140), float32]) */;
    %262 = %261.2;
    %263 = cast(%262, dtype="float64") /* ty=Tensor[(18, 140), float64] */;
    %264 = sigmoid(%263) /* ty=Tensor[(18, 140), float64] */;
    (%264,)
  };
  %265() /* ty=(Tensor[(18, 140), float64],) */
}

def @func_956(%var_955: Tensor[(2520), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) {
  %278 = fn (%var_933: Tensor[(2520), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) {
    %266 = @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %267 = %266.0;
    %268 = cast(%267, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
    %269 = rsqrt(%268) /* ty=Tensor[(14, 1, 12), float64] */;
    %270 = cast(%269, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
    %271 = @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %272 = cast(%var_933, dtype="float32") /* ty=Tensor[(2520), float32] */;
    %273 = reshape(%272, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
    %274 = @func_343(%273) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) */;
    %275 = exp(%270) /* ty=Tensor[(14, 1, 12), float32] */;
    %276 = %271.0;
    %277 = %274.0;
    (%275, %276, %277, %var_933)
  };
  %278(%var_955) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) */
}

def @func_1107() -> Tensor[(14, ?, 12), bool] {
  @func_1079() /* ty=Tensor[(14, ?, 12), bool] */
}

def @func_265() -> Tensor[(14, 1, 12), float32] {
  %279 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %280 = cast(%279, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
  atan(%280) /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_5574() -> Tensor[(14, 3, 12), int16] {
  %281 = @func_3343() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(18, 140), float64]) */;
  %281.0
}

def @func_4440() -> (Tensor[(14, 2, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) {
  %295 = fn () -> (Tensor[(14, 2, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) {
    %282 = @func_3213() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 3, 12), int16]) */;
    %283 = %282.0;
    %284 = cast(%283, dtype="uint32") /* ty=Tensor[(14, 1, 12), uint32] */;
    %285 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 2, 12), float32] */, dtype="uint32") /* ty=Tensor[(14, 2, 12), uint32] */;
    %286 = maximum(%284, %285) /* ty=Tensor[(14, 2, 12), uint32] */;
    %287 = cast(%286, dtype="float32") /* ty=Tensor[(14, 2, 12), float32] */;
    %288 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %289 = @func_3076() /* ty=(Tensor[(2520), float32], Tensor[(14, ?, 12), float32]) */;
    %290 = @func_1296() /* ty=(Tensor[(14, ?, 12), bool],) */;
    %291 = cosh(%287) /* ty=Tensor[(14, 2, 12), float32] */;
    %292 = %288.2;
    %293 = %289.1;
    %294 = %290.0;
    (%291, %292, %293, %294)
  };
  %295() /* ty=(Tensor[(14, 2, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */
}

def @func_6332(%var_6318: Tensor[(13, 7, 5), int8]) -> Tensor[(13, 7, 5), int8] {
  %296 = cast(meta[relay.Constant][7] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %297 = cast(%var_6318, dtype="int8") /* ty=Tensor[(13, 7, 5), int8] */;
  maximum(%296, %297) /* ty=Tensor[(13, 7, 5), int8] */
}

def @func_4926(%var_4912: Tensor[(14, 3, 12), int16]) -> (Tensor[(14, 3, 12), uint64], Tensor[(14, ?, 12), bool]) {
  %298 = @func_2767() /* ty=(Tensor[(14, 3, 12), int16],) */;
  %299 = %298.0;
  %300 = cast(%var_4912, dtype="uint64") /* ty=Tensor[(14, 3, 12), uint64] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%299, dtype="uint64") /* ty=Tensor[(14, 3, 12), uint64] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %304 = @func_1296() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %305 = add(%302, %303) /* ty=Tensor[(14, 3, 12), uint64] */;
  %306 = %304.0;
  (%305, %306)
}

def @func_4153(%var_4152: Tensor[(2184), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(14, 13, 12), uint32], Tensor[(2184), float32], Tensor[(2520), float32]) {
  %314 = fn (%var_4126: Tensor[(2184), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(14, 13, 12), uint32], Tensor[(2184), float32], Tensor[(2520), float32]) {
    %307 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %308 = cast(%var_4126, dtype="float32") /* ty=Tensor[(2184), float32] */;
    %309 = reshape(%308, newshape=[14, 13, 12]) /* ty=Tensor[(14, 13, 12), float32] */;
    %310 = @func_2890() /* ty=(Tensor[(2520), float32],) */;
    %311 = %307.0;
    %312 = @func_1865(%309) /* ty=Tensor[(14, 13, 12), uint32] */;
    %313 = %310.0;
    (%311, %312, %var_4126, %313)
  };
  %314(%var_4152) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 13, 12), uint32], Tensor[(2184), float32], Tensor[(2520), float32]) */
}

def @func_3343() -> (Tensor[(14, 3, 12), int16], Tensor[(18, 140), float64]) {
  %315 = @func_3213() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 3, 12), int16]) */;
  %316 = @func_2337() /* ty=(Tensor[(18, 140), float64],) */;
  %317 = %315.1;
  %318 = %316.0;
  (%317, %318)
}

def @func_2860(%var_2858: Tensor[(11, 5, 12), float32], %var_2859: Tensor[(11, 5, 12), float32]) -> (Tensor[(11, 5, 12), float32],) {
  %324 = fn (%var_2837: Tensor[(11, 5, 12), float32], %var_2838: Tensor[(11, 5, 12), float32]) -> (Tensor[(11, 5, 12), float32],) {
    %319 = cast(%var_2838, dtype="float32") /* ty=Tensor[(11, 5, 12), float32] */;
    %320 = shape_of(%var_2837, dtype="int32") /* ty=Tensor[(3), int32] */;
    %321 = cast(%var_2837, dtype="float32") /* ty=Tensor[(11, 5, 12), float32] */;
    %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %323 = floor_divide(%321, %322) /* ty=Tensor[(11, 5, 12), float32] */;
    (%323,)
  };
  %324(%var_2858, %var_2859) /* ty=(Tensor[(11, 5, 12), float32],) */
}

def @func_1673() -> (Tensor[(18, 140), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(2520), int8]) {
  %341 = fn () -> (Tensor[(18, 140), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(2520), int8]) {
    %325 = @func_1634() /* ty=(Tensor[(18, 140), float64],) */;
    %326 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
    %327 = @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %328 = %325.0;
    %329 = cast(%328, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
    %330 = reshape(%329, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
    %331 = @func_1033(%330) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %332 = cast(%328, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
    %333 = %331.2;
    %334 = cast(%333, dtype="float32") /* ty=Tensor[(2520), float32] */;
    %335 = reshape(%332, newshape=[6, 420]) /* ty=Tensor[(6, 420), float32] */;
    %336 = reshape(%334, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
    %337 = @func_533(%335, %336) /* ty=(Tensor[(6, 420), float32], Tensor[(2520), int8], Tensor[(14, ?, 12), bool]) */;
    %338 = %326.2;
    %339 = %327.0;
    %340 = %337.1;
    (%328, %338, %339, %333, %340)
  };
  %341() /* ty=(Tensor[(18, 140), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(2520), int8]) */
}

def @func_3077() -> (Tensor[(2520), float32], Tensor[(14, ?, 12), float32]) {
  %346 = fn () -> (Tensor[(2520), float32], Tensor[(14, ?, 12), float32]) {
    %342 = @func_2329() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float64], Tensor[(6, 420), float32], Tensor[(2520), float32], Tensor[(14, ?, 12), bool]) */;
    %343 = @func_1954() /* ty=(Tensor[(14, ?, 12), float32],) */;
    %344 = %342.3;
    %345 = %343.0;
    (%344, %345)
  };
  %346() /* ty=(Tensor[(2520), float32], Tensor[(14, ?, 12), float32]) */
}

def @func_6762() -> (Tensor[(18, 140), float32], Tensor[(14, 1, 12), float32], Tensor[(2184), float32], Tensor[(84, 26), float32], Tensor[(18, 140), int32]) {
  @func_6760() /* ty=(Tensor[(18, 140), float32], Tensor[(14, 1, 12), float32], Tensor[(2184), float32], Tensor[(84, 26), float32], Tensor[(18, 140), int32]) */
}

def @func_2395() -> (Tensor[(18, 140), uint8], Tensor[(18, 140), bool]) {
  %364 = fn () -> (Tensor[(18, 140), uint8], Tensor[(18, 140), bool]) {
    %347 = @func_2337() /* ty=(Tensor[(18, 140), float64],) */;
    %348 = %347.0;
    %349 = cast(meta[relay.Constant][8] /* ty=Tensor[(18, 140), float64] */, dtype="int8") /* ty=Tensor[(18, 140), int8] */;
    %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(2), int32] */;
    %351 = cast(%348, dtype="int8") /* ty=Tensor[(18, 140), int8] */;
    %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %353 = logical_xor(%351, %352) /* ty=Tensor[(18, 140), int8] */;
    %354 = cast(meta[relay.Constant][8] /* ty=Tensor[(18, 140), float64] */, dtype="uint8") /* ty=Tensor[(18, 140), uint8] */;
    %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(2), int32] */;
    %356 = cast(%353, dtype="uint8") /* ty=Tensor[(18, 140), uint8] */;
    %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %358 = cast(%348, dtype="bool") /* ty=Tensor[(18, 140), bool] */;
    %359 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(18, 140), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %360 = cast(meta[relay.Constant][8] /* ty=Tensor[(18, 140), float64] */, dtype="bool") /* ty=Tensor[(18, 140), bool] */;
    %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %362 = bitwise_and(%356, %357) /* ty=Tensor[(18, 140), uint8] */;
    %363 = less_equal(%360, %361) /* ty=Tensor[(18, 140), bool] */;
    (%362, %363)
  };
  %364() /* ty=(Tensor[(18, 140), uint8], Tensor[(18, 140), bool]) */
}

def @func_1779(%var_1777: Tensor[(3, 10, 4), int8], %var_1778: Tensor[(3, 10, 4), int8]) -> (Tensor[(3, 10, 4), int8], Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32]) {
  %373 = fn (%var_1755: Tensor[(3, 10, 4), int8], %var_1756: Tensor[(3, 10, 4), int8]) -> (Tensor[(3, 10, 4), int8], Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32]) {
    %365 = cast(%var_1756, dtype="int8") /* ty=Tensor[(3, 10, 4), int8] */;
    %366 = shape_of(%var_1755, dtype="int32") /* ty=Tensor[(3), int32] */;
    %367 = cast(%var_1755, dtype="int8") /* ty=Tensor[(3, 10, 4), int8] */;
    %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %369 = @func_1590() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %370 = bitwise_xor(%367, %368) /* ty=Tensor[(3, 10, 4), int8] */;
    %371 = @func_1079() /* ty=Tensor[(14, ?, 12), bool] */;
    %372 = %369.1;
    (%370, %371, %372)
  };
  %373(%var_1777, %var_1778) /* ty=(Tensor[(3, 10, 4), int8], Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32]) */
}

def @func_5011() -> (Tensor[(14, ?, 12), bool],) {
  %375 = fn () -> (Tensor[(14, ?, 12), bool],) {
    %374 = @func_1079() /* ty=Tensor[(14, ?, 12), bool] */;
    (%374,)
  };
  %375() /* ty=(Tensor[(14, ?, 12), bool],) */
}

def @func_6335(%var_6333: Tensor[(13, 7, 5), int8]) -> Tensor[(13, 7, 5), int8] {
  @func_6332(%var_6333) /* ty=Tensor[(13, 7, 5), int8] */
}

def @func_6644(%var_6561: Tensor[(14, 1, 12), float32]) -> (Tensor[(14, ?, 12), uint8], Tensor[(14, ?, 12), bool], Tensor[(81), float32], Tensor[(14, 13, 12), uint32], Tensor[(2184), float32], Tensor[(14, 13, 12), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 11, 12), uint64], Tensor[(924, 2), bool]) {
  %376 = @func_735() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %377 = %376.0;
  %378 = cast(%var_6561, dtype="uint8") /* ty=Tensor[(14, 1, 12), uint8] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%377, dtype="uint8") /* ty=Tensor[(14, 1, 12), uint8] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %382 = cast(meta[relay.Constant][9] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %383 = reshape(%382, newshape=[9, 9, 1]) /* ty=Tensor[(9, 9, 1), float32] */;
  %384 = @func_5750(%383) /* ty=(Tensor[(9, 9, 1), float32], Tensor[(14, ?, 12), bool]) */;
  %385 = cast(meta[relay.Constant][10] /* ty=Tensor[(2184), float32] */, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %386 = reshape(%385, newshape=[2184]) /* ty=Tensor[(2184), float32] */;
  %387 = @func_4151(%386) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 13, 12), uint32], Tensor[(2184), float32], Tensor[(2520), float32]) */;
  %388 = @func_2684() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %389 = %388.0;
  %390 = cast(%389, dtype="uint8") /* ty=Tensor[(14, ?, 12), uint8] */;
  %391 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%377, dtype="uint8") /* ty=Tensor[(14, 1, 12), uint8] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %394 = subtract(%392, %393) /* ty=Tensor[(14, ?, 12), uint8] */;
  %395 = cast(%394, dtype="float64") /* ty=Tensor[(14, ?, 12), float64] */;
  %396 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 13, 12), uint8] */, dtype="float64") /* ty=Tensor[(14, 13, 12), float64] */;
  %397 = cast(meta[relay.Constant][12] /* ty=Tensor[(924, 2), bool] */, dtype="bool") /* ty=Tensor[(924, 2), bool] */;
  %398 = reshape(%397, newshape=[14, 11, 12]) /* ty=Tensor[(14, 11, 12), bool] */;
  %399 = @func_2653(%398) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 11, 12), uint64], Tensor[(154, 2), float32], Tensor[(308), float32]) */;
  %400 = minimum(%380, %381) /* ty=Tensor[(14, ?, 12), uint8] */;
  %401 = %384.1;
  %402 = %387.1;
  %403 = floor_mod(%395, %396) /* ty=Tensor[(14, 13, 12), float64] */;
  %404 = @func_6442() /* ty=Tensor[(14, 1, 12), float32] */;
  %405 = %399.2;
  (%400, %401, meta[relay.Constant][9] /* ty=Tensor[(81), float32] */, %402, meta[relay.Constant][10] /* ty=Tensor[(2184), float32] */, %403, %404, %405, meta[relay.Constant][12] /* ty=Tensor[(924, 2), bool] */)
}

def @func_6143(%var_6140: Tensor[(1, 5, 4), uint32], %var_6141: Tensor[(2184), float32], %var_6142: Tensor[(336), float32]) -> (Tensor[(4, 5, 4), uint32], Tensor[(14, 13, 12), int16], Tensor[(2184), float32], Tensor[(14, 1, 12), float32], Tensor[(4, 5, 4), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 2, 12), bool], Tensor[(336), float32]) {
  %423 = fn (%var_6091: Tensor[(1, 5, 4), uint32], %var_6102: Tensor[(2184), float32], %var_6134: Tensor[(336), float32]) -> (Tensor[(4, 5, 4), uint32], Tensor[(14, 13, 12), int16], Tensor[(2184), float32], Tensor[(14, 1, 12), float32], Tensor[(4, 5, 4), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 2, 12), bool], Tensor[(336), float32]) {
    %406 = cast(%var_6091, dtype="uint32") /* ty=Tensor[(1, 5, 4), uint32] */;
    %407 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 5, 4), uint32] */, dtype="uint32") /* ty=Tensor[(4, 5, 4), uint32] */;
    %408 = cast(%var_6102, dtype="float32") /* ty=Tensor[(2184), float32] */;
    %409 = reshape(%408, newshape=[14, 13, 12]) /* ty=Tensor[(14, 13, 12), float32] */;
    %410 = @func_6063(%409) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 13, 12), int16]) */;
    %411 = @func_4800() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(7, 11, 4), float32], Tensor[(308), float32], Tensor[(14, ?, 12), float32], Tensor[(18, 140), float64]) */;
    %412 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 5, 4), uint32] */, dtype="float64") /* ty=Tensor[(4, 5, 4), float64] */;
    %413 = @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %414 = cast(%var_6134, dtype="float32") /* ty=Tensor[(336), float32] */;
    %415 = reshape(%414, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float32] */;
    %416 = @func_4369(%415) /* ty=(Tensor[(14, 2, 12), bool], Tensor[(14, ?, 12), bool], Tensor[(14, 2, 12), bool], Tensor[(14, ?, 12), float64]) */;
    %417 = bitwise_or(%406, %407) /* ty=Tensor[(4, 5, 4), uint32] */;
    %418 = %410.1;
    %419 = %411.0;
    %420 = rsqrt(%412) /* ty=Tensor[(4, 5, 4), float64] */;
    %421 = %413.0;
    %422 = %416.2;
    (%417, %418, %var_6102, %419, %420, %421, %422, %var_6134)
  };
  %423(%var_6140, %var_6141, %var_6142) /* ty=(Tensor[(4, 5, 4), uint32], Tensor[(14, 13, 12), int16], Tensor[(2184), float32], Tensor[(14, 1, 12), float32], Tensor[(4, 5, 4), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 2, 12), bool], Tensor[(336), float32]) */
}

def @func_183() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) {
  @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */
}

def @func_4541(%var_4540: Tensor[(14, 6, 12), float32]) -> (Tensor[(14, 6, 12), uint64], Tensor[(14, 1, 12), float32], Tensor[(14, 6, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(14, 6, 12), int64]) {
  %438 = fn (%var_4471: Tensor[(14, 6, 12), float32]) -> (Tensor[(14, 6, 12), uint64], Tensor[(14, 1, 12), float32], Tensor[(14, 6, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(14, 6, 12), int64]) {
    %424 = @func_2788() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */;
    %425 = %424.0;
    %426 = cast(%425, dtype="uint64") /* ty=Tensor[(14, ?, 12), uint64] */;
    %427 = cast(%var_4471, dtype="uint64") /* ty=Tensor[(14, 6, 12), uint64] */;
    %428 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %429 = cast(%var_4471, dtype="float32") /* ty=Tensor[(14, 6, 12), float32] */;
    %430 = @func_2218() /* ty=(Tensor[(14, ?, 12), float32],) */;
    %431 = cast(%var_4471, dtype="int64") /* ty=Tensor[(14, 6, 12), int64] */;
    %432 = cast(%425, dtype="int64") /* ty=Tensor[(14, ?, 12), int64] */;
    %433 = bitwise_xor(%426, %427) /* ty=Tensor[(14, 6, 12), uint64] */;
    %434 = %428.0;
    %435 = acosh(%429) /* ty=Tensor[(14, 6, 12), float32] */;
    %436 = %430.0;
    %437 = maximum(%431, %432) /* ty=Tensor[(14, 6, 12), int64] */;
    (%433, %434, %435, %436, %437)
  };
  %438(%var_4540) /* ty=(Tensor[(14, 6, 12), uint64], Tensor[(14, 1, 12), float32], Tensor[(14, 6, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(14, 6, 12), int64]) */
}

def @func_864() -> (Tensor[(14, 1, 12), float32],) {
  @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */
}

def @func_1208(%var_1207: Tensor[(16, 6, 7), float64]) -> (Tensor[(16, 6, 7), float64],) {
  %441 = fn (%var_1193: Tensor[(16, 6, 7), float64]) -> (Tensor[(16, 6, 7), float64],) {
    %439 = cast(%var_1193, dtype="float64") /* ty=Tensor[(16, 6, 7), float64] */;
    %440 = asinh(%439) /* ty=Tensor[(16, 6, 7), float64] */;
    (%440,)
  };
  %441(%var_1207) /* ty=(Tensor[(16, 6, 7), float64],) */
}

def @func_4586() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) {
  %442 = @func_2459() /* ty=(Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32], Tensor[(1, 2520), float32]) */;
  %443 = %442.1;
  %444 = @func_1107() /* ty=Tensor[(14, ?, 12), bool] */;
  (%443, %444)
}

def @func_5543() -> (Tensor[(14, ?, 12), int8], Tensor[(18, 140), float64]) {
  %456 = fn () -> (Tensor[(14, ?, 12), int8], Tensor[(18, 140), float64]) {
    %445 = @func_2788() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */;
    %446 = %445.0;
    %447 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 1, 12), float32] */, dtype="int8") /* ty=Tensor[(14, 1, 12), int8] */;
    %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
    %449 = cast(%446, dtype="int8") /* ty=Tensor[(14, ?, 12), int8] */;
    %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %451 = @func_2602() /* ty=(Tensor[(18, 140), float64],) */;
    %452 = %451.0;
    %453 = cast(%452, dtype="float64") /* ty=Tensor[(18, 140), float64] */;
    %454 = multiply(%449, %450) /* ty=Tensor[(14, ?, 12), int8] */;
    %455 = erf(%453) /* ty=Tensor[(18, 140), float64] */;
    (%454, %455)
  };
  %456() /* ty=(Tensor[(14, ?, 12), int8], Tensor[(18, 140), float64]) */
}

def @main(%var_6993: Tensor[(6, 10, 11), uint32], %var_6994: Tensor[(6, 10, 11), uint32]) -> Tensor[(6, 10, 11), bool] {
  %457 = cast(%var_6994, dtype="bool") /* ty=Tensor[(6, 10, 11), bool] */;
  %458 = shape_of(%var_6993, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%var_6993, dtype="bool") /* ty=Tensor[(6, 10, 11), bool] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%459, %460) /* ty=Tensor[(6, 10, 11), bool] */
}

def @func_1081() -> Tensor[(14, ?, 12), bool] {
  @func_1079() /* ty=Tensor[(14, ?, 12), bool] */
}

def @func_2460() -> (Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32], Tensor[(1, 2520), float32]) {
  %466 = fn () -> (Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32], Tensor[(1, 2520), float32]) {
    %461 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 2520), float32] */, dtype="float32") /* ty=Tensor[(1, 2520), float32] */;
    %462 = reshape(%461, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
    %463 = @func_1033(%462) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %464 = @func_1107() /* ty=Tensor[(14, ?, 12), bool] */;
    %465 = %463.1;
    (%464, %465, meta[relay.Constant][15] /* ty=Tensor[(1, 2520), float32] */)
  };
  %466() /* ty=(Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32], Tensor[(1, 2520), float32]) */
}

def @func_3426() -> (Tensor[(14, ?, 12), float32],) {
  %467 = @func_1954() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %468 = %467.0;
  (%468,)
}

def @func_3729() -> (Tensor[(14, ?, 12), bool], Tensor[(14, 10, 12), uint32]) {
  %475 = fn () -> (Tensor[(14, ?, 12), bool], Tensor[(14, 10, 12), uint32]) {
    %469 = @func_2684() /* ty=(Tensor[(14, ?, 12), bool],) */;
    %470 = @func_1079() /* ty=Tensor[(14, ?, 12), bool] */;
    %471 = cast(%470, dtype="uint32") /* ty=Tensor[(14, ?, 12), uint32] */;
    %472 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 10, 12), bool] */, dtype="uint32") /* ty=Tensor[(14, 10, 12), uint32] */;
    %473 = %469.0;
    %474 = add(%471, %472) /* ty=Tensor[(14, 10, 12), uint32] */;
    (%473, %474)
  };
  %475() /* ty=(Tensor[(14, ?, 12), bool], Tensor[(14, 10, 12), uint32]) */
}

def @func_5671() -> (Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32], Tensor[(18, 140), float64], Tensor[(14, 3, 12), int16]) {
  @func_5669() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32], Tensor[(18, 140), float64], Tensor[(14, 3, 12), int16]) */
}

def @func_4448() -> Tensor[(14, 1, 12), float32] {
  %476 = fn () -> Tensor[(14, 1, 12), float32] {
    @func_3446() /* ty=Tensor[(14, 1, 12), float32] */
  };
  %476() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_6444() -> Tensor[(14, 1, 12), float32] {
  @func_6442() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_5960(%var_5958: Tensor[(24, 48), bool], %var_5959: Tensor[(14, 3, 12), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(12, 12, 8), bool], Tensor[(24, 48), bool], Tensor[(14, 3, 12), uint16]) {
  @func_5956(%var_5958, %var_5959) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(12, 12, 8), bool], Tensor[(24, 48), bool], Tensor[(14, 3, 12), uint16]) */
}

def @func_325(%var_313: Tensor[(6, 420), float32]) -> (Tensor[(14, 15, 12), float64], Tensor[(6, 420), float32], Tensor[(4, 588), float32], Tensor[(14, 1, 12), float32]) {
  %477 = cast(%var_313, dtype="float32") /* ty=Tensor[(6, 420), float32] */;
  %478 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 588), float32] */, dtype="float32") /* ty=Tensor[(4, 588), float32] */;
  %479 = reshape(%477, newshape=[14, 15, 12]) /* ty=Tensor[(14, 15, 12), float32] */;
  %480 = reshape(%478, newshape=[14, 14, 12]) /* ty=Tensor[(14, 14, 12), float32] */;
  %481 = @func_235(%479, %480) /* ty=(Tensor[(14, 15, 12), float64], Tensor[(14, 14, 12), float64], Tensor[(14, 1, 12), float32]) */;
  %482 = @func_265() /* ty=Tensor[(14, 1, 12), float32] */;
  %483 = cast(%482, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
  %484 = %481.0;
  %485 = sqrt(%483) /* ty=Tensor[(14, 1, 12), float32] */;
  (%484, %var_313, meta[relay.Constant][17] /* ty=Tensor[(4, 588), float32] */, %485)
}

def @func_4371(%var_4370: Tensor[(14, 2, 12), float32]) -> (Tensor[(14, 2, 12), bool], Tensor[(14, ?, 12), bool], Tensor[(14, 2, 12), bool], Tensor[(14, ?, 12), float64]) {
  %498 = fn (%var_4349: Tensor[(14, 2, 12), float32]) -> (Tensor[(14, 2, 12), bool], Tensor[(14, ?, 12), bool], Tensor[(14, 2, 12), bool], Tensor[(14, ?, 12), float64]) {
    %486 = @func_1747() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %487 = %486.1;
    %488 = cast(%487, dtype="bool") /* ty=Tensor[(14, ?, 12), bool] */;
    %489 = cast(%var_4349, dtype="bool") /* ty=Tensor[(14, 2, 12), bool] */;
    %490 = @func_2674() /* ty=(Tensor[(14, ?, 12), bool],) */;
    %491 = cast(%var_4349, dtype="bool") /* ty=Tensor[(14, 2, 12), bool] */;
    %492 = cast(%487, dtype="bool") /* ty=Tensor[(14, ?, 12), bool] */;
    %493 = cast(%487, dtype="float64") /* ty=Tensor[(14, ?, 12), float64] */;
    %494 = greater(%488, %489) /* ty=Tensor[(14, 2, 12), bool] */;
    %495 = %490.0;
    %496 = logical_or(%491, %492) /* ty=Tensor[(14, 2, 12), bool] */;
    %497 = log10(%493) /* ty=Tensor[(14, ?, 12), float64] */;
    (%494, %495, %496, %497)
  };
  %498(%var_4370) /* ty=(Tensor[(14, 2, 12), bool], Tensor[(14, ?, 12), bool], Tensor[(14, 2, 12), bool], Tensor[(14, ?, 12), float64]) */
}

def @func_5689() -> (Tensor[(14, 3, 12), float32], Tensor[(14, ?, 12), float32]) {
  %505 = fn () -> (Tensor[(14, 3, 12), float32], Tensor[(14, ?, 12), float32]) {
    %499 = @func_2767() /* ty=(Tensor[(14, 3, 12), int16],) */;
    %500 = %499.0;
    %501 = cast(%500, dtype="float32") /* ty=Tensor[(14, 3, 12), float32] */;
    %502 = @func_2218() /* ty=(Tensor[(14, ?, 12), float32],) */;
    %503 = log10(%501) /* ty=Tensor[(14, 3, 12), float32] */;
    %504 = %502.0;
    (%503, %504)
  };
  %505() /* ty=(Tensor[(14, 3, 12), float32], Tensor[(14, ?, 12), float32]) */
}

def @func_2656(%var_2654: Tensor[(14, 11, 12), bool]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 11, 12), uint64], Tensor[(154, 2), float32], Tensor[(308), float32]) {
  @func_2653(%var_2654) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 11, 12), uint64], Tensor[(154, 2), float32], Tensor[(308), float32]) */
}

def @func_60() -> (Tensor[(14, 1, 12), float32],) {
  %510 = fn () -> (Tensor[(14, 1, 12), float32],) {
    %506 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 1, 12), float64] */, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
    %507 = acosh(%506) /* ty=Tensor[(14, 1, 12), float64] */;
    %508 = cast(%507, dtype="float32") /* ty=Tensor[(14, 1, 12), float32] */;
    %509 = asin(%508) /* ty=Tensor[(14, 1, 12), float32] */;
    (%509,)
  };
  %510() /* ty=(Tensor[(14, 1, 12), float32],) */
}

def @func_5079() -> Tensor[(14, 3, 12), int16] {
  @func_5077() /* ty=Tensor[(14, 3, 12), int16] */
}

def @func_2927(%var_2925: Tensor[(7, 16, 7), float64]) -> (Tensor[(7, 16, 7), float64], Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) {
  @func_2924(%var_2925) /* ty=(Tensor[(7, 16, 7), float64], Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) */
}

def @func_3915() -> (Tensor[(14, 1, 12), float32],) {
  %513 = fn () -> (Tensor[(14, 1, 12), float32],) {
    %511 = @func_1672() /* ty=(Tensor[(18, 140), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(2520), int8]) */;
    %512 = %511.1;
    (%512,)
  };
  %513() /* ty=(Tensor[(14, 1, 12), float32],) */
}

def @func_5752(%var_5751: Tensor[(9, 9, 1), float32]) -> (Tensor[(9, 9, 1), float32], Tensor[(14, ?, 12), bool]) {
  %518 = fn (%var_5708: Tensor[(9, 9, 1), float32]) -> (Tensor[(9, 9, 1), float32], Tensor[(14, ?, 12), bool]) {
    %514 = cast(%var_5708, dtype="float32") /* ty=Tensor[(9, 9, 1), float32] */;
    %515 = @func_2674() /* ty=(Tensor[(14, ?, 12), bool],) */;
    %516 = sinh(%514) /* ty=Tensor[(9, 9, 1), float32] */;
    %517 = %515.0;
    (%516, %517)
  };
  %518(%var_5751) /* ty=(Tensor[(9, 9, 1), float32], Tensor[(14, ?, 12), bool]) */
}

def @func_4606() -> (Tensor[(14, ?, 12), bool],) {
  @func_4604() /* ty=(Tensor[(14, ?, 12), bool],) */
}

def @func_3094() -> (Tensor[(14, 1, 12), float32],) {
  %519 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  (%519,)
}

def @func_1266() -> (Tensor[(14, 1, 12), float32], Tensor[(14, 15, 12), float64], Tensor[(18, 140), float32]) {
  @func_1264() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 15, 12), float64], Tensor[(18, 140), float32]) */
}

def @func_3665(%var_3649: Tensor[(14, 16, 12), float32]) -> Tensor[(14, 16, 12), uint8] {
  %520 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %521 = cast(%520, dtype="uint8") /* ty=Tensor[(14, 1, 12), uint8] */;
  %522 = cast(%var_3649, dtype="uint8") /* ty=Tensor[(14, 16, 12), uint8] */;
  subtract(%521, %522) /* ty=Tensor[(14, 16, 12), uint8] */
}

def @func_6442() -> Tensor[(14, 1, 12), float32] {
  %523 = @func_5096() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32]) */;
  %523.1
}

def @func_6521() -> (Tensor[(18, 140), float32], Tensor[(14, 3, 12), int32]) {
  %524 = @func_5497() /* ty=(Tensor[(18, 140), float32], Tensor[(14, 1, 12), float32]) */;
  %525 = %524.0;
  %526 = cast(%525, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %527 = rsqrt(%526) /* ty=Tensor[(18, 140), float32] */;
  %528 = cast(%527, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %529 = @func_2565() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %530 = %529.0;
  %531 = @func_5237() /* ty=(Tensor[(14, 3, 12), int16],) */;
  %532 = %531.0;
  %533 = cast(%530, dtype="int32") /* ty=Tensor[(14, ?, 12), int32] */;
  %534 = cast(%532, dtype="int32") /* ty=Tensor[(14, 3, 12), int32] */;
  %535 = tan(%528) /* ty=Tensor[(18, 140), float32] */;
  %536 = left_shift(%533, %534) /* ty=Tensor[(14, 3, 12), int32] */;
  (%535, %536)
}

def @func_2983(%var_2958: Tensor[(13, 11, 2), int32]) -> (Tensor[(13, 11, 2), bool], Tensor[(13, 11, 2), float32]) {
  %537 = cast(%var_2958, dtype="bool") /* ty=Tensor[(13, 11, 2), bool] */;
  %538 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(13, 11, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 11, 2), int32] */, dtype="bool") /* ty=Tensor[(13, 11, 2), bool] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %541 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 11, 2), int32] */, dtype="float32") /* ty=Tensor[(13, 11, 2), float32] */;
  %542 = less_equal(%539, %540) /* ty=Tensor[(13, 11, 2), bool] */;
  %543 = asin(%541) /* ty=Tensor[(13, 11, 2), float32] */;
  (%542, %543)
}

def @func_2890() -> (Tensor[(2520), float32],) {
  %544 = @func_1672() /* ty=(Tensor[(18, 140), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(2520), int8]) */;
  %545 = %544.3;
  %546 = cast(%545, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %547 = log2(%546) /* ty=Tensor[(2520), float32] */;
  (%547,)
}

def @func_3446() -> Tensor[(14, 1, 12), float32] {
  %548 = @func_892() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %548.0
}

def @func_4037(%var_4035: Tensor[(14, 12, 12), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(14, 12, 12), bool]) {
  @func_4034(%var_4035) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 12, 12), bool]) */
}

def @func_1036(%var_1034: Tensor[(2520), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) {
  @func_1033(%var_1034) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */
}

def @func_2676() -> (Tensor[(14, ?, 12), bool],) {
  @func_2674() /* ty=(Tensor[(14, ?, 12), bool],) */
}

def @func_6458() -> (Tensor[(14, ?, 12), bool],) {
  %551 = fn () -> (Tensor[(14, ?, 12), bool],) {
    %549 = @func_2329() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float64], Tensor[(6, 420), float32], Tensor[(2520), float32], Tensor[(14, ?, 12), bool]) */;
    %550 = %549.4;
    (%550,)
  };
  %551() /* ty=(Tensor[(14, ?, 12), bool],) */
}

def @func_267() -> Tensor[(14, 1, 12), float32] {
  @func_265() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_5669() -> (Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32], Tensor[(18, 140), float64], Tensor[(14, 3, 12), int16]) {
  %552 = @func_3213() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 3, 12), int16]) */;
  %553 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
  %554 = @func_1634() /* ty=(Tensor[(18, 140), float64],) */;
  %555 = @func_5222() /* ty=(Tensor[(14, 3, 12), int16],) */;
  %556 = %552.1;
  %557 = %553.2;
  %558 = %554.0;
  %559 = %555.0;
  (%556, %557, %558, %559)
}

def @func_1353(%var_1352: Tensor[(2520), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(6, 420), float32], Tensor[(2520), float32]) {
  %565 = fn (%var_1343: Tensor[(2520), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(6, 420), float32], Tensor[(2520), float32]) {
    %560 = cast(%var_1343, dtype="float32") /* ty=Tensor[(2520), float32] */;
    %561 = reshape(%560, newshape=[6, 420]) /* ty=Tensor[(6, 420), float32] */;
    %562 = @func_325(%561) /* ty=(Tensor[(14, 15, 12), float64], Tensor[(6, 420), float32], Tensor[(4, 588), float32], Tensor[(14, 1, 12), float32]) */;
    %563 = @func_1186() /* ty=Tensor[(14, ?, 12), float32] */;
    %564 = %562.1;
    (%563, %564, %var_1343)
  };
  %565(%var_1352) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(6, 420), float32], Tensor[(2520), float32]) */
}

def @func_6065(%var_6064: Tensor[(14, 13, 12), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 13, 12), int16]) {
  %572 = fn (%var_6050: Tensor[(14, 13, 12), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 13, 12), int16]) {
    %566 = @func_1590() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %567 = %566.0;
    %568 = cast(%567, dtype="int16") /* ty=Tensor[(14, ?, 12), int16] */;
    %569 = cast(%var_6050, dtype="int16") /* ty=Tensor[(14, 13, 12), int16] */;
    %570 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
    %571 = bitwise_or(%568, %569) /* ty=Tensor[(14, 13, 12), int16] */;
    (%570, %571)
  };
  %572(%var_6064) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 13, 12), int16]) */
}

def @func_6760() -> (Tensor[(18, 140), float32], Tensor[(14, 1, 12), float32], Tensor[(2184), float32], Tensor[(84, 26), float32], Tensor[(18, 140), int32]) {
  %573 = @func_1921() /* ty=Tensor[(18, 140), float32] */;
  %574 = cast(%573, dtype="float64") /* ty=Tensor[(18, 140), float64] */;
  %575 = log2(%574) /* ty=Tensor[(18, 140), float64] */;
  %576 = cast(%575, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %577 = shape_of(%573, dtype="int32") /* ty=Tensor[(2), int32] */;
  %578 = cast(%573, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %580 = cast(meta[relay.Constant][20] /* ty=Tensor[(84, 26), float32] */, dtype="float32") /* ty=Tensor[(84, 26), float32] */;
  %581 = reshape(%580, newshape=[2184]) /* ty=Tensor[(2184), float32] */;
  %582 = @func_4151(%581) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 13, 12), uint32], Tensor[(2184), float32], Tensor[(2520), float32]) */;
  %583 = cast(%575, dtype="bool") /* ty=Tensor[(18, 140), bool] */;
  %584 = shape_of(%573, dtype="int32") /* ty=Tensor[(2), int32] */;
  %585 = cast(%573, dtype="bool") /* ty=Tensor[(18, 140), bool] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %587 = less(%585, %586) /* ty=Tensor[(18, 140), bool] */;
  %588 = cast(%587, dtype="float64") /* ty=Tensor[(18, 140), float64] */;
  %589 = cos(%588) /* ty=Tensor[(18, 140), float64] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  %591 = log10(%590) /* ty=Tensor[(18, 140), float32] */;
  %592 = cast(%587, dtype="uint64") /* ty=Tensor[(18, 140), uint64] */;
  %593 = shape_of(%575, dtype="int32") /* ty=Tensor[(2), int32] */;
  %594 = cast(%575, dtype="uint64") /* ty=Tensor[(18, 140), uint64] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %596 = bitwise_xor(%594, %595) /* ty=Tensor[(18, 140), uint64] */;
  %597 = cast(%596, dtype="int32") /* ty=Tensor[(18, 140), int32] */;
  %598 = shape_of(%591, dtype="int32") /* ty=Tensor[(2), int32] */;
  %599 = cast(%591, dtype="int32") /* ty=Tensor[(18, 140), int32] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %601 = floor_mod(%578, %579) /* ty=Tensor[(18, 140), float32] */;
  %602 = @func_265() /* ty=Tensor[(14, 1, 12), float32] */;
  %603 = %582.2;
  %604 = right_shift(%599, %600) /* ty=Tensor[(18, 140), int32] */;
  (%601, %602, %603, meta[relay.Constant][20] /* ty=Tensor[(84, 26), float32] */, %604)
}

def @func_346(%var_344: Tensor[(2520), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) {
  @func_343(%var_344) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) */
}

def @func_3203() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float64], Tensor[(18, 140), float64]) {
  %611 = fn () -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float64], Tensor[(18, 140), float64]) {
    %605 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %606 = @func_1146() /* ty=(Tensor[(14, ?, 12), float64],) */;
    %607 = @func_2602() /* ty=(Tensor[(18, 140), float64],) */;
    %608 = %605.1;
    %609 = %606.0;
    %610 = %607.0;
    (%608, %609, %610)
  };
  %611() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float64], Tensor[(18, 140), float64]) */
}

def @func_6041() -> Tensor[(14, 13, 12), int32] {
  @func_3818() /* ty=Tensor[(14, 13, 12), int32] */
}

def @func_4588() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) {
  @func_4586() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) */
}

def @func_4801() -> (Tensor[(14, 1, 12), float32], Tensor[(7, 11, 4), float32], Tensor[(308), float32], Tensor[(14, ?, 12), float32], Tensor[(18, 140), float64]) {
  %621 = fn () -> (Tensor[(14, 1, 12), float32], Tensor[(7, 11, 4), float32], Tensor[(308), float32], Tensor[(14, ?, 12), float32], Tensor[(18, 140), float64]) {
    %612 = @func_735() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %613 = cast(meta[relay.Constant][21] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
    %614 = reshape(%613, newshape=[154, 2]) /* ty=Tensor[(154, 2), float32] */;
    %615 = @func_969(%614) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(7, 11, 4), float32], Tensor[(154, 2), float32]) */;
    %616 = @func_2337() /* ty=(Tensor[(18, 140), float64],) */;
    %617 = %612.0;
    %618 = %615.1;
    %619 = @func_1186() /* ty=Tensor[(14, ?, 12), float32] */;
    %620 = %616.0;
    (%617, %618, meta[relay.Constant][21] /* ty=Tensor[(308), float32] */, %619, %620)
  };
  %621() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(7, 11, 4), float32], Tensor[(308), float32], Tensor[(14, ?, 12), float32], Tensor[(18, 140), float64]) */
}

def @func_6043() -> Tensor[(14, 13, 12), int32] {
  @func_6041() /* ty=Tensor[(14, 13, 12), int32] */
}

def @func_5914() -> Tensor[(14, 3, 12), int16] {
  %623 = fn () -> Tensor[(14, 3, 12), int16] {
    %622 = @func_5222() /* ty=(Tensor[(14, 3, 12), int16],) */;
    %622.0
  };
  %623() /* ty=Tensor[(14, 3, 12), int16] */
}

def @func_343(%var_340: Tensor[(2520), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) {
  %624 = cast(%var_340, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %625 = reshape(%624, newshape=[6, 420]) /* ty=Tensor[(6, 420), float32] */;
  %626 = @func_325(%625) /* ty=(Tensor[(14, 15, 12), float64], Tensor[(6, 420), float32], Tensor[(4, 588), float32], Tensor[(14, 1, 12), float32]) */;
  %627 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %628 = %626.3;
  (%627, %628, %var_340)
}

def @func_3819() -> Tensor[(14, 13, 12), int32] {
  %633 = fn () -> Tensor[(14, 13, 12), int32] {
    %629 = @func_3094() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %630 = %629.0;
    %631 = cast(%630, dtype="int32") /* ty=Tensor[(14, 1, 12), int32] */;
    %632 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 13, 12), float32] */, dtype="int32") /* ty=Tensor[(14, 13, 12), int32] */;
    logical_xor(%631, %632) /* ty=Tensor[(14, 13, 12), int32] */
  };
  %633() /* ty=Tensor[(14, 13, 12), int32] */
}

def @func_2058(%var_2057: Tensor[(2520), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32]) {
  %643 = fn (%var_2042: Tensor[(2520), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32]) {
    %634 = cast(%var_2042, dtype="float32") /* ty=Tensor[(2520), float32] */;
    %635 = reshape(%634, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
    %636 = @func_1033(%635) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %637 = cast(%var_2042, dtype="float32") /* ty=Tensor[(2520), float32] */;
    %638 = reshape(%637, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
    %639 = @func_343(%638) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) */;
    %640 = @func_1544() /* ty=Tensor[(14, 1, 12), float32] */;
    %641 = %636.0;
    %642 = %639.1;
    (%640, %641, %var_2042, %642)
  };
  %643(%var_2057) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32]) */
}

def @func_2565() -> (Tensor[(14, ?, 12), float32],) {
  %644 = @func_1747() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %645 = %644.1;
  (%645,)
}

def @func_675(%var_673: Tensor[(7, 11, 4), float32], %var_674: Tensor[(7, 11, 4), float32]) -> Tensor[(7, 11, 4), float32] {
  @func_671(%var_673, %var_674) /* ty=Tensor[(7, 11, 4), float32] */
}

def @func_4195() -> Tensor[(14, 1, 12), float32] {
  %646 = fn () -> Tensor[(14, 1, 12), float32] {
    @func_99() /* ty=Tensor[(14, 1, 12), float32] */
  };
  %646() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_6395() -> (Tensor[(14, ?, 12), float32],) {
  @func_6393() /* ty=(Tensor[(14, ?, 12), float32],) */
}

def @func_5237() -> (Tensor[(14, 3, 12), int16],) {
  %647 = @func_5096() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32]) */;
  %648 = %647.0;
  (%648,)
}

def @func_2768() -> (Tensor[(14, 3, 12), int16],) {
  %651 = fn () -> (Tensor[(14, 3, 12), int16],) {
    %649 = @func_1747() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %650 = %649.0;
    (%650,)
  };
  %651() /* ty=(Tensor[(14, 3, 12), int16],) */
}

def @func_4929(%var_4927: Tensor[(14, 3, 12), int16]) -> (Tensor[(14, 3, 12), uint64], Tensor[(14, ?, 12), bool]) {
  @func_4926(%var_4927) /* ty=(Tensor[(14, 3, 12), uint64], Tensor[(14, ?, 12), bool]) */
}

def @func_1033(%var_993: Tensor[(2520), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) {
  %652 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %653 = cast(%var_993, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %654 = reshape(%653, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %655 = @func_343(%654) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) */;
  %656 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %657 = %652.1;
  %658 = %655.0;
  %659 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %660 = %656.1;
  (%657, %658, %var_993, %659, %660)
}

def @func_5321(%var_5287: Tensor[(2520), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(14, 6, 12), uint64], Tensor[(1008), float32], Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) {
  %661 = @func_3426() /* ty=(Tensor[(14, ?, 12), float32],) */;
  %662 = %661.0;
  %663 = cast(%662, dtype="float32") /* ty=Tensor[(14, ?, 12), float32] */;
  %664 = cast(meta[relay.Constant][23] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %665 = reshape(%664, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
  %666 = @func_4711(%665) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 6, 12), uint64], Tensor[(1008), float32], Tensor[(14, ?, 12), float32]) */;
  %667 = cast(%var_5287, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %668 = reshape(%667, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %669 = @func_2056(%668) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, 1, 12), float32]) */;
  %670 = @func_4754() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool], Tensor[(2520), float32]) */;
  %671 = sinh(%663) /* ty=Tensor[(14, ?, 12), float32] */;
  %672 = %666.1;
  %673 = @func_1079() /* ty=Tensor[(14, ?, 12), bool] */;
  %674 = %669.3;
  %675 = @func_4737() /* ty=Tensor[(14, ?, 12), float32] */;
  %676 = %670.0;
  (%671, %672, meta[relay.Constant][23] /* ty=Tensor[(1008), float32] */, %673, %674, %var_5287, %675, %676)
}

def @func_1187() -> Tensor[(14, ?, 12), float32] {
  %678 = fn () -> Tensor[(14, ?, 12), float32] {
    %677 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %677.0
  };
  %678() /* ty=Tensor[(14, ?, 12), float32] */
}

def @func_3428() -> (Tensor[(14, ?, 12), float32],) {
  @func_3426() /* ty=(Tensor[(14, ?, 12), float32],) */
}

def @func_3096() -> (Tensor[(14, 1, 12), float32],) {
  @func_3094() /* ty=(Tensor[(14, 1, 12), float32],) */
}

def @func_2337() -> (Tensor[(18, 140), float64],) {
  %679 = @func_1634() /* ty=(Tensor[(18, 140), float64],) */;
  %680 = %679.0;
  (%680,)
}

def @func_6262() -> Tensor[(18, 140), float32] {
  @func_6260() /* ty=Tensor[(18, 140), float32] */
}

def @func_1867(%var_1866: Tensor[(14, 13, 12), float32]) -> Tensor[(14, 13, 12), uint32] {
  %685 = fn (%var_1852: Tensor[(14, 13, 12), float32]) -> Tensor[(14, 13, 12), uint32] {
    %681 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
    %682 = %681.0;
    %683 = cast(%682, dtype="uint32") /* ty=Tensor[(14, 1, 12), uint32] */;
    %684 = cast(%var_1852, dtype="uint32") /* ty=Tensor[(14, 13, 12), uint32] */;
    subtract(%683, %684) /* ty=Tensor[(14, 13, 12), uint32] */
  };
  %685(%var_1866) /* ty=Tensor[(14, 13, 12), uint32] */
}

def @func_2339() -> (Tensor[(18, 140), float64],) {
  @func_2337() /* ty=(Tensor[(18, 140), float64],) */
}

def @func_972(%var_970: Tensor[(154, 2), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(7, 11, 4), float32], Tensor[(154, 2), float32]) {
  @func_969(%var_970) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(7, 11, 4), float32], Tensor[(154, 2), float32]) */
}

def @func_6801() -> Tensor[(14, 1, 12), float32] {
  @func_6799() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_1147() -> (Tensor[(14, ?, 12), float64],) {
  %689 = fn () -> (Tensor[(14, ?, 12), float64],) {
    %686 = @func_1107() /* ty=Tensor[(14, ?, 12), bool] */;
    %687 = cast(%686, dtype="float64") /* ty=Tensor[(14, ?, 12), float64] */;
    %688 = atanh(%687) /* ty=Tensor[(14, ?, 12), float64] */;
    (%688,)
  };
  %689() /* ty=(Tensor[(14, ?, 12), float64],) */
}

def @func_853() -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) {
  %695 = fn () -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) {
    %690 = @func_735() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %691 = @func_735() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %692 = %690.0;
    %693 = %691.0;
    %694 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
    (%692, %693, %694)
  };
  %695() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */
}

def @func_736() -> (Tensor[(14, 1, 12), float32],) {
  %698 = fn () -> (Tensor[(14, 1, 12), float32],) {
    %696 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %697 = %696.1;
    (%697,)
  };
  %698() /* ty=(Tensor[(14, 1, 12), float32],) */
}

def @func_5576() -> Tensor[(14, 3, 12), int16] {
  @func_5574() /* ty=Tensor[(14, 3, 12), int16] */
}

def @func_4241(%var_4240: Tensor[(7, 1, 5), float32]) -> Tensor[(7, 1, 5), float32] {
  %700 = fn (%var_4231: Tensor[(7, 1, 5), float32]) -> Tensor[(7, 1, 5), float32] {
    %699 = cast(%var_4231, dtype="float32") /* ty=Tensor[(7, 1, 5), float32] */;
    asinh(%699) /* ty=Tensor[(7, 1, 5), float32] */
  };
  %700(%var_4240) /* ty=Tensor[(7, 1, 5), float32] */
}

def @func_2653(%var_2639: Tensor[(14, 11, 12), bool]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 11, 12), uint64], Tensor[(154, 2), float32], Tensor[(308), float32]) {
  %701 = @func_1296() /* ty=(Tensor[(14, ?, 12), bool],) */;
  %702 = %701.0;
  %703 = cast(%702, dtype="uint64") /* ty=Tensor[(14, ?, 12), uint64] */;
  %704 = cast(%var_2639, dtype="uint64") /* ty=Tensor[(14, 11, 12), uint64] */;
  %705 = cast(meta[relay.Constant][24] /* ty=Tensor[(308), float32] */, dtype="float32") /* ty=Tensor[(308), float32] */;
  %706 = reshape(%705, newshape=[154, 2]) /* ty=Tensor[(154, 2), float32] */;
  %707 = @func_969(%706) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(7, 11, 4), float32], Tensor[(154, 2), float32]) */;
  %708 = @func_1544() /* ty=Tensor[(14, 1, 12), float32] */;
  %709 = @func_265() /* ty=Tensor[(14, 1, 12), float32] */;
  %710 = maximum(%703, %704) /* ty=Tensor[(14, 11, 12), uint64] */;
  %711 = %707.2;
  (%708, %709, %710, %711, meta[relay.Constant][24] /* ty=Tensor[(308), float32] */)
}

def @func_1921() -> Tensor[(18, 140), float32] {
  %712 = @func_1264() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 15, 12), float64], Tensor[(18, 140), float32]) */;
  %713 = %712.2;
  %714 = cast(%713, dtype="float32") /* ty=Tensor[(18, 140), float32] */;
  asinh(%714) /* ty=Tensor[(18, 140), float32] */
}

def @func_533(%var_489: Tensor[(6, 420), float32], %var_497: Tensor[(2520), float32]) -> (Tensor[(6, 420), float32], Tensor[(2520), int8], Tensor[(14, ?, 12), bool]) {
  %715 = cast(%var_489, dtype="float32") /* ty=Tensor[(6, 420), float32] */;
  %716 = reshape(%715, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
  %717 = @func_343(%716) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32]) */;
  %718 = %717.2;
  %719 = cast(%var_497, dtype="int8") /* ty=Tensor[(2520), int8] */;
  %720 = shape_of(%718, dtype="int32") /* ty=Tensor[(1), int32] */;
  %721 = cast(%718, dtype="int8") /* ty=Tensor[(2520), int8] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?), int8] */;
  %723 = @func_265() /* ty=Tensor[(14, 1, 12), float32] */;
  %724 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %725 = %724.0;
  %726 = cast(%725, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
  %727 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%723, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %730 = left_shift(%721, %722) /* ty=Tensor[(2520), int8] */;
  %731 = equal(%728, %729) /* ty=Tensor[(14, ?, 12), bool] */;
  (%var_489, %730, %731)
}

def @func_1079() -> Tensor[(14, ?, 12), bool] {
  %732 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %733 = %732.0;
  %734 = @func_892() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
  %735 = %734.0;
  %736 = cast(%735, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
  %737 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%733, dtype="bool") /* ty=Tensor[(14, ?, 12), bool] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%738, %739) /* ty=Tensor[(14, ?, 12), bool] */
}

def @func_5857() -> (Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), int32]) {
  @func_5855() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), int32]) */
}

def @func_2186() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) {
  %743 = fn () -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) {
    %740 = @func_1296() /* ty=(Tensor[(14, ?, 12), bool],) */;
    %741 = @func_1544() /* ty=Tensor[(14, 1, 12), float32] */;
    %742 = %740.0;
    (%741, %742)
  };
  %743() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), bool]) */
}

def @func_5096() -> (Tensor[(14, 3, 12), int16], Tensor[(14, 1, 12), float32]) {
  %744 = @func_2767() /* ty=(Tensor[(14, 3, 12), int16],) */;
  %745 = @func_3540() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %746 = %744.0;
  %747 = %745.0;
  (%746, %747)
}

def @func_599() -> (Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) {
  @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */
}

def @func_101() -> Tensor[(14, 1, 12), float32] {
  @func_99() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_1546() -> Tensor[(14, 1, 12), float32] {
  @func_1544() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_4178() -> Tensor[(14, 1, 12), float32] {
  %749 = fn () -> Tensor[(14, 1, 12), float32] {
    %748 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %748.1
  };
  %749() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_181() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) {
  %750 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
  %751 = %750.0;
  %752 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %753 = cast(%752, dtype="uint16") /* ty=Tensor[(14, 1, 12), uint16] */;
  %754 = shape_of(%751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%751, dtype="uint16") /* ty=Tensor[(14, 1, 12), uint16] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %757 = logical_xor(%755, %756) /* ty=Tensor[(14, ?, 12), uint16] */;
  %758 = cast(%757, dtype="uint32") /* ty=Tensor[(14, ?, 12), uint32] */;
  %759 = shape_of(%751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%751, dtype="uint32") /* ty=Tensor[(14, 1, 12), uint32] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %762 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  %763 = right_shift(%760, %761) /* ty=Tensor[(14, ?, 12), uint32] */;
  %764 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
  (%762, %763, %764)
}

def @func_4713(%var_4712: Tensor[(1008), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 6, 12), uint64], Tensor[(1008), float32], Tensor[(14, ?, 12), float32]) {
  %772 = fn (%var_4691: Tensor[(1008), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, 6, 12), uint64], Tensor[(1008), float32], Tensor[(14, ?, 12), float32]) {
    %765 = cast(%var_4691, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %766 = reshape(%765, newshape=[14, 6, 12]) /* ty=Tensor[(14, 6, 12), float32] */;
    %767 = @func_4539(%766) /* ty=(Tensor[(14, 6, 12), uint64], Tensor[(14, 1, 12), float32], Tensor[(14, 6, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(14, 6, 12), int64]) */;
    %768 = @func_2218() /* ty=(Tensor[(14, ?, 12), float32],) */;
    %769 = @func_4194() /* ty=Tensor[(14, 1, 12), float32] */;
    %770 = %767.0;
    %771 = %768.0;
    (%769, %770, %var_4691, %771)
  };
  %772(%var_4712) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 6, 12), uint64], Tensor[(1008), float32], Tensor[(14, ?, 12), float32]) */
}

def @func_5058(%var_5057: Tensor[(2016), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(2016), bool]) {
  %784 = fn (%var_5023: Tensor[(2016), float32]) -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(2016), bool]) {
    %773 = @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %774 = cast(%var_5023, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %775 = reshape(%774, newshape=[14, 12, 12]) /* ty=Tensor[(14, 12, 12), float32] */;
    %776 = @func_4034(%775) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 12, 12), bool]) */;
    %777 = cast(meta[relay.Constant][25] /* ty=Tensor[(2016), float32] */, dtype="bool") /* ty=Tensor[(2016), bool] */;
    %778 = shape_of(%var_5023, dtype="int32") /* ty=Tensor[(1), int32] */;
    %779 = cast(%var_5023, dtype="bool") /* ty=Tensor[(2016), bool] */;
    %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?), bool] */;
    %781 = %773.0;
    %782 = %776.0;
    %783 = less_equal(%779, %780) /* ty=Tensor[(2016), bool] */;
    (%781, %782, %783)
  };
  %784(%var_5057) /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float32], Tensor[(2016), bool]) */
}

def @func_3858() -> (Tensor[(14, ?, 12), float32], Tensor[(18, 140), float32]) {
  %788 = fn () -> (Tensor[(14, ?, 12), float32], Tensor[(18, 140), float32]) {
    %785 = @func_2788() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */;
    %786 = %785.0;
    %787 = @func_1921() /* ty=Tensor[(18, 140), float32] */;
    (%786, %787)
  };
  %788() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(18, 140), float32]) */
}

def @func_1748() -> (Tensor[(14, 3, 12), int16], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) {
  %796 = fn () -> (Tensor[(14, 3, 12), int16], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) {
    %789 = @func_1107() /* ty=Tensor[(14, ?, 12), bool] */;
    %790 = cast(%789, dtype="int16") /* ty=Tensor[(14, ?, 12), int16] */;
    %791 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 3, 12), bool] */, dtype="int16") /* ty=Tensor[(14, 3, 12), int16] */;
    %792 = @func_862() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %793 = bitwise_and(%790, %791) /* ty=Tensor[(14, 3, 12), int16] */;
    %794 = @func_1186() /* ty=Tensor[(14, ?, 12), float32] */;
    %795 = %792.0;
    (%793, %794, %795)
  };
  %796() /* ty=(Tensor[(14, 3, 12), int16], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */
}

def @func_5395(%var_5394: Tensor[(13, 9, 4), float64]) -> (Tensor[(13, 9, 4), float64],) {
  %799 = fn (%var_5390: Tensor[(13, 9, 4), float64]) -> (Tensor[(13, 9, 4), float64],) {
    %797 = cast(%var_5390, dtype="float64") /* ty=Tensor[(13, 9, 4), float64] */;
    %798 = asinh(%797) /* ty=Tensor[(13, 9, 4), float64] */;
    (%798,)
  };
  %799(%var_5394) /* ty=(Tensor[(13, 9, 4), float64],) */
}

def @func_5334() -> Tensor[(14, ?, 12), bool] {
  %801 = fn () -> Tensor[(14, ?, 12), bool] {
    %800 = @func_2674() /* ty=(Tensor[(14, ?, 12), bool],) */;
    %800.0
  };
  %801() /* ty=Tensor[(14, ?, 12), bool] */
}

def @func_1591() -> (Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) {
  %806 = fn () -> (Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) {
    %802 = @func_597() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %803 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
    %804 = %802.0;
    %805 = %803.2;
    (%804, %805)
  };
  %806() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */
}

def @func_1544() -> Tensor[(14, 1, 12), float32] {
  @func_99() /* ty=Tensor[(14, 1, 12), float32] */
}

def @func_6992() -> Tensor[(14, ?, 12), bool] {
  @func_6990() /* ty=Tensor[(14, ?, 12), bool] */
}

def @func_2567() -> (Tensor[(14, ?, 12), float32],) {
  @func_2565() /* ty=(Tensor[(14, ?, 12), float32],) */
}

def @func_1296() -> (Tensor[(14, ?, 12), bool],) {
  %807 = @func_1079() /* ty=Tensor[(14, ?, 12), bool] */;
  (%807,)
}

def @func_6523() -> (Tensor[(18, 140), float32], Tensor[(14, 3, 12), int32]) {
  @func_6521() /* ty=(Tensor[(18, 140), float32], Tensor[(14, 3, 12), int32]) */
}

def @func_6306(%var_6305: Tensor[(3, 12, 9), float64]) -> (Tensor[(3, 12, 9), float64], Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32]) {
  %817 = fn (%var_6278: Tensor[(3, 12, 9), float64]) -> (Tensor[(3, 12, 9), float64], Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32]) {
    %808 = cast(%var_6278, dtype="float64") /* ty=Tensor[(3, 12, 9), float64] */;
    %809 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(3, 12, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %810 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(3, 12, 9), float64] */;
    %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %812 = @func_5010() /* ty=(Tensor[(14, ?, 12), bool],) */;
    %813 = @func_1590() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %814 = mod(%810, %811) /* ty=Tensor[(3, 12, 9), float64] */;
    %815 = %812.0;
    %816 = %813.1;
    (%814, %815, %816)
  };
  %817(%var_6305) /* ty=(Tensor[(3, 12, 9), float64], Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32]) */
}

def @func_238(%var_236: Tensor[(14, 15, 12), float32], %var_237: Tensor[(14, 14, 12), float32]) -> (Tensor[(14, 15, 12), float64], Tensor[(14, 14, 12), float64], Tensor[(14, 1, 12), float32]) {
  %830 = fn (%var_218: Tensor[(14, 15, 12), float32], %var_228: Tensor[(14, 14, 12), float32]) -> (Tensor[(14, 15, 12), float64], Tensor[(14, 14, 12), float64], Tensor[(14, 1, 12), float32]) {
    %818 = @func_59() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %819 = %818.0;
    %820 = cast(%819, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
    %821 = cast(%var_218, dtype="float64") /* ty=Tensor[(14, 15, 12), float64] */;
    %822 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
    %823 = %822.0;
    %824 = cast(%823, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
    %825 = cast(%var_228, dtype="float64") /* ty=Tensor[(14, 14, 12), float64] */;
    %826 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
    %827 = floor_divide(%820, %821) /* ty=Tensor[(14, 15, 12), float64] */;
    %828 = power(%824, %825) /* ty=Tensor[(14, 14, 12), float64] */;
    %829 = %826.0;
    (%827, %828, %829)
  };
  %830(%var_236, %var_237) /* ty=(Tensor[(14, 15, 12), float64], Tensor[(14, 14, 12), float64], Tensor[(14, 1, 12), float32]) */
}

def @func_5324(%var_5322: Tensor[(2520), float32]) -> (Tensor[(14, ?, 12), float32], Tensor[(14, 6, 12), uint64], Tensor[(1008), float32], Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) {
  @func_5321(%var_5322) /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, 6, 12), uint64], Tensor[(1008), float32], Tensor[(14, ?, 12), bool], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(14, ?, 12), float32], Tensor[(14, 1, 12), float32]) */
}

def @func_5981(%var_5980: Tensor[(15, 5, 3), int16]) -> Tensor[(15, 5, 3), bool] {
  %840 = fn (%var_5963: Tensor[(15, 5, 3), int16]) -> Tensor[(15, 5, 3), bool] {
    %831 = cast(%var_5963, dtype="int16") /* ty=Tensor[(15, 5, 3), int16] */;
    %832 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(15, 5, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %833 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 5, 3), int16] */, dtype="int16") /* ty=Tensor[(15, 5, 3), int16] */;
    %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %835 = minimum(%833, %834) /* ty=Tensor[(15, 5, 3), int16] */;
    %836 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 5, 3), int16] */, dtype="bool") /* ty=Tensor[(15, 5, 3), bool] */;
    %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
    %838 = cast(%835, dtype="bool") /* ty=Tensor[(15, 5, 3), bool] */;
    %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%838, %839) /* ty=Tensor[(15, 5, 3), bool] */
  };
  %840(%var_5980) /* ty=Tensor[(15, 5, 3), bool] */
}

def @func_6240(%var_6230: Tensor[(4, 8, 8), bool], %var_6231: Tensor[(4, 8, 8), bool]) -> (Tensor[(4, 8, 8), bool], Tensor[(4, 8, 8), bool]) {
  %841 = cast(%var_6231, dtype="bool") /* ty=Tensor[(4, 8, 8), bool] */;
  %842 = shape_of(%var_6230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(%var_6230, dtype="bool") /* ty=Tensor[(4, 8, 8), bool] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %845 = cast(%var_6230, dtype="bool") /* ty=Tensor[(4, 8, 8), bool] */;
  %846 = shape_of(%var_6231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %847 = cast(%var_6231, dtype="bool") /* ty=Tensor[(4, 8, 8), bool] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %849 = logical_or(%843, %844) /* ty=Tensor[(4, 8, 8), bool] */;
  %850 = not_equal(%847, %848) /* ty=Tensor[(4, 8, 8), bool] */;
  (%849, %850)
}

def @func_3540() -> (Tensor[(14, 1, 12), float32],) {
  %851 = @func_1672() /* ty=(Tensor[(18, 140), float64], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(2520), float32], Tensor[(2520), int8]) */;
  %852 = %851.1;
  (%852,)
}

def @func_1109() -> Tensor[(14, ?, 12), bool] {
  @func_1107() /* ty=Tensor[(14, ?, 12), bool] */
}

def @func_6244(%var_6242: Tensor[(4, 8, 8), bool], %var_6243: Tensor[(4, 8, 8), bool]) -> (Tensor[(4, 8, 8), bool], Tensor[(4, 8, 8), bool]) {
  @func_6240(%var_6242, %var_6243) /* ty=(Tensor[(4, 8, 8), bool], Tensor[(4, 8, 8), bool]) */
}

def @func_3785() -> (Tensor[(18, 140), float64], Tensor[(18, 140), float64], Tensor[(12, 6, 9), float64], Tensor[(2520), float32]) {
  @func_3783() /* ty=(Tensor[(18, 140), float64], Tensor[(18, 140), float64], Tensor[(12, 6, 9), float64], Tensor[(2520), float32]) */
}

def @func_2330() -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float64], Tensor[(6, 420), float32], Tensor[(2520), float32], Tensor[(14, ?, 12), bool]) {
  %874 = fn () -> (Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float64], Tensor[(6, 420), float32], Tensor[(2520), float32], Tensor[(14, ?, 12), bool]) {
    %853 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
    %854 = %853.1;
    %855 = @func_852() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */;
    %856 = %855.0;
    %857 = cast(%856, dtype="float64") /* ty=Tensor[(14, 1, 12), float64] */;
    %858 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
    %859 = cast(%854, dtype="float64") /* ty=Tensor[(14, ?, 12), float64] */;
    %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %861 = cast(meta[relay.Constant][30] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
    %862 = cast(meta[relay.Constant][30] /* ty=Tensor[(2520), float32] */, dtype="float32") /* ty=Tensor[(2520), float32] */;
    %863 = reshape(%861, newshape=[6, 420]) /* ty=Tensor[(6, 420), float32] */;
    %864 = reshape(%862, newshape=[2520]) /* ty=Tensor[(2520), float32] */;
    %865 = @func_533(%863, %864) /* ty=(Tensor[(6, 420), float32], Tensor[(2520), int8], Tensor[(14, ?, 12), bool]) */;
    %866 = cast(%854, dtype="bool") /* ty=Tensor[(14, ?, 12), bool] */;
    %867 = shape_of(%856, dtype="int32") /* ty=Tensor[(3), int32] */;
    %868 = cast(%856, dtype="bool") /* ty=Tensor[(14, 1, 12), bool] */;
    %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %870 = @func_1544() /* ty=Tensor[(14, 1, 12), float32] */;
    %871 = floor_divide(%859, %860) /* ty=Tensor[(14, ?, 12), float64] */;
    %872 = %865.0;
    %873 = logical_or(%868, %869) /* ty=Tensor[(14, ?, 12), bool] */;
    (%870, %871, %872, meta[relay.Constant][30] /* ty=Tensor[(2520), float32] */, %873)
  };
  %874() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), float64], Tensor[(6, 420), float32], Tensor[(2520), float32], Tensor[(14, ?, 12), bool]) */
}

def @func_3836() -> (Tensor[(10, 16, 14), float64],) {
  %877 = fn () -> (Tensor[(10, 16, 14), float64],) {
    %875 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 16, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 16, 14), float64] */;
    %876 = asin(%875) /* ty=Tensor[(10, 16, 14), float64] */;
    (%876,)
  };
  %877() /* ty=(Tensor[(10, 16, 14), float64],) */
}

def @func_893() -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) {
  %883 = fn () -> (Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) {
    %878 = @func_181() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, ?, 12), uint32], Tensor[(14, 1, 12), float32]) */;
    %879 = @func_735() /* ty=(Tensor[(14, 1, 12), float32],) */;
    %880 = @func_99() /* ty=Tensor[(14, 1, 12), float32] */;
    %881 = %878.2;
    %882 = %879.0;
    (%880, %881, %882)
  };
  %883() /* ty=(Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32], Tensor[(14, 1, 12), float32]) */
}

def @func_2789() -> (Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) {
  %887 = fn () -> (Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) {
    %884 = @func_2674() /* ty=(Tensor[(14, ?, 12), bool],) */;
    %885 = @func_1186() /* ty=Tensor[(14, ?, 12), float32] */;
    %886 = %884.0;
    (%885, %886)
  };
  %887() /* ty=(Tensor[(14, ?, 12), float32], Tensor[(14, ?, 12), bool]) */
}

def @func_2674() -> (Tensor[(14, ?, 12), bool],) {
  %888 = @func_1079() /* ty=Tensor[(14, ?, 12), bool] */;
  (%888,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen446/build/output.py:2783: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen446/build/output.py", line 2788, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(660) tvmgen_default_fused_cast_cast_reshape_not_equal_kernel0(signed char* __restrict__ T_not_equal, uint* __restrict__ placeholder, uint* __restrict__ placeholder1) {
  T_not_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) != ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

