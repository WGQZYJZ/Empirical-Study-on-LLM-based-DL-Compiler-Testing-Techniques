==========mod==========
#[version = "0.0.5"]
def @func_3206(%var_3176: Tensor[(13, 1), bool], %var_3177: Tensor[(13, 1), bool]) -> (Tensor[(13, ?), bool],) {
  %0 = cast(%var_3177, dtype="bool") /* ty=Tensor[(13, 1), bool] */;
  %1 = shape_of(%var_3176, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2 = cast(%var_3176, dtype="bool") /* ty=Tensor[(13, 1), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %4 = logical_or(%2, %3) /* ty=Tensor[(13, ?), bool] */;
  %5 = cast(%var_3177, dtype="bool") /* ty=Tensor[(13, 1), bool] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(2), int32] */;
  %7 = cast(%4, dtype="bool") /* ty=Tensor[(13, ?), bool] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %9 = less(%7, %8) /* ty=Tensor[(13, ?), bool] */;
  (%9,)
}

def @func_5696(%var_5681: Tensor[(12, 5, 2), float64]) -> (Tensor[(12, 5, 2), float64],) {
  %10 = cast(%var_5681, dtype="float64") /* ty=Tensor[(12, 5, 2), float64] */;
  %11 = cosh(%10) /* ty=Tensor[(12, 5, 2), float64] */;
  %12 = cast(%var_5681, dtype="float64") /* ty=Tensor[(12, 5, 2), float64] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="float64") /* ty=Tensor[(12, 5, 2), float64] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %16 = maximum(%14, %15) /* ty=Tensor[(12, 5, 2), float64] */;
  (%16,)
}

def @func_1962(%var_1951: Tensor[(4, 13, 14), float32]) -> (Tensor[(4, 13, 14), float32], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32]) {
  %17 = cast(%var_1951, dtype="float32") /* ty=Tensor[(4, 13, 14), float32] */;
  %18 = atanh(%17) /* ty=Tensor[(4, 13, 14), float32] */;
  %19 = cast(%18, dtype="float32") /* ty=Tensor[(4, 13, 14), float32] */;
  %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %21 = cast(meta[relay.Constant][0] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %22 = reshape(%20, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %23 = reshape(%21, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %24 = exp(%19) /* ty=Tensor[(4, 13, 14), float32] */;
  %25 = @func_1671(%22, %23) /* ty=Tensor[(3, 8, 15), uint32] */;
  (%24, %25, meta[relay.Constant][0] /* ty=Tensor[(360), uint32] */)
}

def @func_7541() -> Tensor[(14, 15, 10), float64] {
  %26 = @func_7473() /* ty=Tensor[(14, 15, 10), float32] */;
  %27 = cast(%26, dtype="float64") /* ty=Tensor[(14, 15, 10), float64] */;
  log(%27) /* ty=Tensor[(14, 15, 10), float64] */
}

def @func_2618(%var_2611: Tensor[(1, 1287), float32], %var_2612: Tensor[(480), float32], %var_2613: Tensor[(672), uint64], %var_2614: Tensor[(180), float32]) -> (Tensor[(8, 8, 2), float64], Tensor[(156, 1), float64], Tensor[(1, 1287), float32], Tensor[(480), float32], Tensor[(672), uint64], Tensor[(180), float32]) {
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(8, 8, 2), float64] */;
  %29 = cast(%var_2611, dtype="float32") /* ty=Tensor[(1, 1287), float32] */;
  %30 = cast(%var_2612, dtype="float32") /* ty=Tensor[(480), float32] */;
  %31 = cast(%var_2613, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %32 = cast(%var_2614, dtype="float32") /* ty=Tensor[(180), float32] */;
  %33 = reshape(%29, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %34 = reshape(%30, newshape=[120, 4]) /* ty=Tensor[(120, 4), float32] */;
  %35 = reshape(%31, newshape=[672]) /* ty=Tensor[(672), uint64] */;
  %36 = reshape(%32, newshape=[3, 60]) /* ty=Tensor[(3, 60), float32] */;
  %37 = @func_1592(%33, %34, %35, %36) /* ty=(Tensor[(9, 11, 13), float32], Tensor[(4, 8, 15), float32], Tensor[(156), float64], Tensor[(672), uint64], Tensor[(156, 1), float64], Tensor[(4, 8, 15), bool], Tensor[(2, 10, 9), float32], Tensor[(3, 60), float32]) */;
  %38 = asin(%28) /* ty=Tensor[(8, 8, 2), float64] */;
  %39 = %37.4;
  (%38, %39, %var_2611, %var_2612, %var_2613, %var_2614)
}

def @func_5812(%var_5796: Tensor[(3, 9, 12), uint32], %var_5797: Tensor[(3, 9, 12), uint32], %var_5804: Tensor[(3, 9, 12), uint32]) -> (Tensor[(3, 9, 12), bool], Tensor[(3, 9, 12), int8]) {
  %40 = cast(%var_5797, dtype="bool") /* ty=Tensor[(3, 9, 12), bool] */;
  %41 = shape_of(%var_5796, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%var_5796, dtype="bool") /* ty=Tensor[(3, 9, 12), bool] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %44 = cast(%var_5804, dtype="int8") /* ty=Tensor[(3, 9, 12), int8] */;
  %45 = shape_of(%var_5797, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_5797, dtype="int8") /* ty=Tensor[(3, 9, 12), int8] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %48 = equal(%42, %43) /* ty=Tensor[(3, 9, 12), bool] */;
  %49 = multiply(%46, %47) /* ty=Tensor[(3, 9, 12), int8] */;
  (%48, %49)
}

def @func_253(%var_240: Tensor[(6, 2, 13), float64]) -> Tensor[(6, 2, 13), float32] {
  %50 = cast(%var_240, dtype="float64") /* ty=Tensor[(6, 2, 13), float64] */;
  %51 = log(%50) /* ty=Tensor[(6, 2, 13), float64] */;
  %52 = cast(%var_240, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
  %53 = shape_of(%51, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%51, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %56 = power(%54, %55) /* ty=Tensor[(6, 2, 13), float32] */;
  %57 = cast(%56, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
  atan(%57) /* ty=Tensor[(6, 2, 13), float32] */
}

def @func_1779(%var_1708: int32, %var_1709: Tensor[(5, 2, 1), int32], %var_1729: Tensor[(480), float32], %var_1768: Tensor[(572), int8]) -> (Tensor[(5, 2, 1), int32], Tensor[(5, 2, 1), bool], Tensor[(2, 10, 9), float32], Tensor[(180), float32], Tensor[(480), float32], Tensor[(4, 8, 15), float64], Tensor[(11, 13, 4), bool], Tensor[(572), int8]) {
  %58 = cast(%var_1708, dtype="int32") /* ty=int32 */;
  %59 = cast(%var_1709, dtype="int32") /* ty=Tensor[(5, 2, 1), int32] */;
  %60 = cast(%var_1708, dtype="bool") /* ty=bool */;
  %61 = cast(%var_1709, dtype="bool") /* ty=Tensor[(5, 2, 1), bool] */;
  %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %63 = reshape(%62, newshape=[2, 10, 9]) /* ty=Tensor[(2, 10, 9), float32] */;
  %64 = cast(%var_1729, dtype="float32") /* ty=Tensor[(480), float32] */;
  %65 = cast(%var_1729, dtype="float32") /* ty=Tensor[(480), float32] */;
  %66 = reshape(%64, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
  %67 = reshape(%65, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
  %68 = @func_536(%66, %67) /* ty=(Tensor[(4, 8, 15), float64], Tensor[(4, 8, 15), float64]) */;
  %69 = %68.0;
  %70 = cast(%69, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
  %71 = cast(%var_1768, dtype="int8") /* ty=Tensor[(572), int8] */;
  %72 = cast(%var_1768, dtype="int8") /* ty=Tensor[(572), int8] */;
  %73 = reshape(%71, newshape=[11, 13, 4]) /* ty=Tensor[(11, 13, 4), int8] */;
  %74 = reshape(%72, newshape=[11, 13, 4]) /* ty=Tensor[(11, 13, 4), int8] */;
  %75 = @func_40(%73, %74) /* ty=(Tensor[(11, 13, 4), bool],) */;
  %76 = multiply(%58, %59) /* ty=Tensor[(5, 2, 1), int32] */;
  %77 = less(%60, %61) /* ty=Tensor[(5, 2, 1), bool] */;
  %78 = @func_1329(%63) /* ty=Tensor[(2, 10, 9), float32] */;
  %79 = acosh(%70) /* ty=Tensor[(4, 8, 15), float64] */;
  %80 = %75.0;
  (%76, %77, %78, meta[relay.Constant][2] /* ty=Tensor[(180), float32] */, %var_1729, %79, %80, %var_1768)
}

def @func_2942(%var_2926: Tensor[(6, 2, 11), float64], %var_2933: Tensor[(180, 1), float32]) -> (Tensor[(6, 2, 11), float64], Tensor[(2, 10, 9), float32], Tensor[(180, 1), float32]) {
  %81 = cast(%var_2926, dtype="float64") /* ty=Tensor[(6, 2, 11), float64] */;
  %82 = cast(%var_2933, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
  %83 = reshape(%82, newshape=[2, 10, 9]) /* ty=Tensor[(2, 10, 9), float32] */;
  %84 = atan(%81) /* ty=Tensor[(6, 2, 11), float64] */;
  %85 = @func_1329(%83) /* ty=Tensor[(2, 10, 9), float32] */;
  (%84, %85, %var_2933)
}

def @func_3027(%var_2988: Tensor[(11, 5, 9), uint8], %var_2989: Tensor[(11, 5, 9), uint8]) -> Tensor[(11, 5, 9), float32] {
  %86 = cast(%var_2989, dtype="uint8") /* ty=Tensor[(11, 5, 9), uint8] */;
  %87 = shape_of(%var_2988, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%var_2988, dtype="uint8") /* ty=Tensor[(11, 5, 9), uint8] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %90 = bitwise_xor(%88, %89) /* ty=Tensor[(11, 5, 9), uint8] */;
  %91 = cast(%var_2989, dtype="bool") /* ty=Tensor[(11, 5, 9), bool] */;
  %92 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%90, dtype="bool") /* ty=Tensor[(11, 5, 9), bool] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %95 = greater_equal(%93, %94) /* ty=Tensor[(11, 5, 9), bool] */;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(11, 5, 9), float32] */;
  log2(%96) /* ty=Tensor[(11, 5, 9), float32] */
}

def @func_6897(%var_6886: uint64) -> Tensor[(7, 3, 12), bool] {
  %97 = cast(%var_6886, dtype="bool") /* ty=bool */;
  %98 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 3, 12), uint64] */, dtype="bool") /* ty=Tensor[(7, 3, 12), bool] */;
  greater(%97, %98) /* ty=Tensor[(7, 3, 12), bool] */
}

def @func_2796(%var_2792: Tensor[(14, 15, 10), float32]) -> Tensor[(14, 15, 10), float32] {
  %99 = cast(%var_2792, dtype="float32") /* ty=Tensor[(14, 15, 10), float32] */;
  atanh(%99) /* ty=Tensor[(14, 15, 10), float32] */
}

def @func_1671(%var_1666: Tensor[(3, 8, 15), uint32], %var_1667: Tensor[(3, 8, 15), uint32]) -> Tensor[(3, 8, 15), uint32] {
  %100 = cast(%var_1667, dtype="uint32") /* ty=Tensor[(3, 8, 15), uint32] */;
  %101 = shape_of(%var_1666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%var_1666, dtype="uint32") /* ty=Tensor[(3, 8, 15), uint32] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%102, %103) /* ty=Tensor[(3, 8, 15), uint32] */
}

def @func_3810(%var_3797: Tensor[(6, 4, 2), uint32], %var_3798: Tensor[(6, 4, 2), uint32]) -> (Tensor[(6, 4, 2), uint32],) {
  %104 = cast(%var_3798, dtype="uint32") /* ty=Tensor[(6, 4, 2), uint32] */;
  %105 = shape_of(%var_3797, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%var_3797, dtype="uint32") /* ty=Tensor[(6, 4, 2), uint32] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %108 = maximum(%106, %107) /* ty=Tensor[(6, 4, 2), uint32] */;
  (%108,)
}

def @func_7441() -> (Tensor[(8, 5, 6), float32], Tensor[(14, 15, 10), float32], Tensor[(2100), float32]) {
  %109 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 5, 6), float32] */, dtype="float32") /* ty=Tensor[(8, 5, 6), float32] */;
  %110 = cast(meta[relay.Constant][5] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %111 = reshape(%110, newshape=[14, 15, 10]) /* ty=Tensor[(14, 15, 10), float32] */;
  %112 = sin(%109) /* ty=Tensor[(8, 5, 6), float32] */;
  %113 = @func_2796(%111) /* ty=Tensor[(14, 15, 10), float32] */;
  (%112, %113, meta[relay.Constant][5] /* ty=Tensor[(2100), float32] */)
}

def @func_6197(%var_6158: Tensor[(1, 7, 13), float32], %var_6170: Tensor[(4, 20), float64]) -> (Tensor[(16, 1, 5), float32], Tensor[(4, 20), float64], Tensor[(?, 7, 13), bool], Tensor[(1, 7, 13), float32]) {
  %114 = cast(%var_6170, dtype="float64") /* ty=Tensor[(4, 20), float64] */;
  %115 = reshape(%114, newshape=[16, 1, 5]) /* ty=Tensor[(16, 1, 5), float64] */;
  %116 = @func_5939(%115) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float32], Tensor[(16, ?, 5), bool]) */;
  %117 = cast(%var_6158, dtype="float32") /* ty=Tensor[(1, 7, 13), float32] */;
  %118 = sinh(%117) /* ty=Tensor[(1, 7, 13), float32] */;
  %119 = cast(%var_6158, dtype="int64") /* ty=Tensor[(1, 7, 13), int64] */;
  %120 = shape_of(%118, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%118, dtype="int64") /* ty=Tensor[(1, 7, 13), int64] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %123 = multiply(%121, %122) /* ty=Tensor[(?, 7, 13), int64] */;
  %124 = cast(%var_6158, dtype="bool") /* ty=Tensor[(1, 7, 13), bool] */;
  %125 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%123, dtype="bool") /* ty=Tensor[(?, 7, 13), bool] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %128 = cast(%118, dtype="float32") /* ty=Tensor[(1, 7, 13), float32] */;
  %129 = %116.1;
  %130 = not_equal(%126, %127) /* ty=Tensor[(?, 7, 13), bool] */;
  %131 = erf(%128) /* ty=Tensor[(1, 7, 13), float32] */;
  (%129, %var_6170, %130, %131)
}

def @func_5369(%var_5357: Tensor[(11, 2, 12), float32]) -> (Tensor[(11, 2, 12), float64],) {
  %132 = cast(%var_5357, dtype="float32") /* ty=Tensor[(11, 2, 12), float32] */;
  %133 = rsqrt(%132) /* ty=Tensor[(11, 2, 12), float32] */;
  %134 = cast(%var_5357, dtype="float64") /* ty=Tensor[(11, 2, 12), float64] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="float64") /* ty=Tensor[(11, 2, 12), float64] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %138 = subtract(%136, %137) /* ty=Tensor[(11, 2, 12), float64] */;
  (%138,)
}

def @func_6416(%var_6341: Tensor[(6, 12, 2), float64], %var_6351: Tensor[(1287), float32], %var_6361: Tensor[(360), uint32], %var_6381: Tensor[(40, 12), bool]) -> (Tensor[(6, 12, 2), float64], Tensor[(11, 5, 9), float32], Tensor[(495), uint8], Tensor[(1287), float32], Tensor[(2, 336), uint64], Tensor[(180), float32], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32], Tensor[(15, 15, 3), uint16], Tensor[(675), float64], Tensor[(40, 12), float32], Tensor[(3, 8, 15), uint32], Tensor[(180, 1), float32], Tensor[(132), float64], Tensor[(4, 8, 15), float32]) {
  %139 = cast(%var_6341, dtype="float64") /* ty=Tensor[(6, 12, 2), float64] */;
  %140 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(6, 12, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 12, 2), float64] */, dtype="float64") /* ty=Tensor[(6, 12, 2), float64] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %143 = cast(meta[relay.Constant][7] /* ty=Tensor[(495), uint8] */, dtype="uint8") /* ty=Tensor[(495), uint8] */;
  %144 = cast(meta[relay.Constant][7] /* ty=Tensor[(495), uint8] */, dtype="uint8") /* ty=Tensor[(495), uint8] */;
  %145 = reshape(%143, newshape=[11, 5, 9]) /* ty=Tensor[(11, 5, 9), uint8] */;
  %146 = reshape(%144, newshape=[11, 5, 9]) /* ty=Tensor[(11, 5, 9), uint8] */;
  %147 = cast(%var_6361, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %148 = cast(%var_6361, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %149 = reshape(%147, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %150 = reshape(%148, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(675), float64] */, dtype="float64") /* ty=Tensor[(675), float64] */;
  %152 = reshape(%151, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %153 = @func_5866(%152) /* ty=(Tensor[(15, 15, 3), uint16], Tensor[(15, 15, 3), bool]) */;
  %154 = cast(%var_6351, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %155 = cast(meta[relay.Constant][11] /* ty=Tensor[(40, 12), float32] */, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %156 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 336), uint64] */, dtype="uint64") /* ty=Tensor[(2, 336), uint64] */;
  %157 = cast(meta[relay.Constant][9] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %158 = reshape(%154, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %159 = reshape(%155, newshape=[120, 4]) /* ty=Tensor[(120, 4), float32] */;
  %160 = reshape(%156, newshape=[672]) /* ty=Tensor[(672), uint64] */;
  %161 = reshape(%157, newshape=[3, 60]) /* ty=Tensor[(3, 60), float32] */;
  %162 = @func_1592(%158, %159, %160, %161) /* ty=(Tensor[(9, 11, 13), float32], Tensor[(4, 8, 15), float32], Tensor[(156), float64], Tensor[(672), uint64], Tensor[(156, 1), float64], Tensor[(4, 8, 15), bool], Tensor[(2, 10, 9), float32], Tensor[(3, 60), float32]) */;
  %163 = %162.1;
  %164 = cast(%163, dtype="bool") /* ty=Tensor[(4, 8, 15), bool] */;
  %165 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(40, 12), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %166 = cast(meta[relay.Constant][11] /* ty=Tensor[(40, 12), float32] */, dtype="bool") /* ty=Tensor[(40, 12), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %168 = greater(%166, %167) /* ty=Tensor[(40, 12), bool] */;
  %169 = cast(%var_6381, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(2), int32] */;
  %171 = cast(%168, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %173 = @func_1671(%149, %150) /* ty=Tensor[(3, 8, 15), uint32] */;
  %174 = cast(%173, dtype="uint32") /* ty=Tensor[(3, 8, 15), uint32] */;
  %175 = cast(%var_6361, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %176 = reshape(%174, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %177 = reshape(%175, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %178 = cast(meta[relay.Constant][12] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %179 = cast(meta[relay.Constant][9] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %180 = reshape(%178, newshape=[6, 2, 11]) /* ty=Tensor[(6, 2, 11), float64] */;
  %181 = reshape(%179, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
  %182 = @func_2942(%180, %181) /* ty=(Tensor[(6, 2, 11), float64], Tensor[(2, 10, 9), float32], Tensor[(180, 1), float32]) */;
  %183 = cast(%163, dtype="float32") /* ty=Tensor[(4, 8, 15), float32] */;
  %184 = divide(%141, %142) /* ty=Tensor[(6, 12, 2), float64] */;
  %185 = @func_3027(%145, %146) /* ty=Tensor[(11, 5, 9), float32] */;
  %186 = %153.0;
  %187 = power(%171, %172) /* ty=Tensor[(40, 12), float32] */;
  %188 = @func_1671(%176, %177) /* ty=Tensor[(3, 8, 15), uint32] */;
  %189 = %182.2;
  %190 = cosh(%183) /* ty=Tensor[(4, 8, 15), float32] */;
  (%184, %185, meta[relay.Constant][7] /* ty=Tensor[(495), uint8] */, %var_6351, meta[relay.Constant][8] /* ty=Tensor[(2, 336), uint64] */, meta[relay.Constant][9] /* ty=Tensor[(180), float32] */, %173, %var_6361, %186, meta[relay.Constant][10] /* ty=Tensor[(675), float64] */, %187, %188, %189, meta[relay.Constant][12] /* ty=Tensor[(132), float64] */, %190)
}

def @func_2355(%var_2342: Tensor[(14, 8, 14), float64]) -> (Tensor[(14, 8, 14), float64],) {
  %191 = cast(%var_2342, dtype="float64") /* ty=Tensor[(14, 8, 14), float64] */;
  %192 = rsqrt(%191) /* ty=Tensor[(14, 8, 14), float64] */;
  (%192,)
}

def @func_4877(%var_4808: float32, %var_4809: Tensor[(1, 6, 2), float32], %var_4820: Tensor[(1287, 1), float32], %var_4822: Tensor[(672), uint64], %var_4823: Tensor[(180), float32]) -> (Tensor[(1, 6, 2), float32], Tensor[(2, 10, 9), float32], Tensor[(1287, 1), float32], Tensor[(120, 4), float32], Tensor[(672), uint64], Tensor[(180), float32], Tensor[(108), float64], Tensor[(648), float32], Tensor[(2100), float32], Tensor[(672), uint64], Tensor[(1, 6, 2), bool], Tensor[(1, 6, 2), float32]) {
  %193 = cast(%var_4808, dtype="float32") /* ty=float32 */;
  %194 = cast(%var_4809, dtype="float32") /* ty=Tensor[(1, 6, 2), float32] */;
  %195 = cast(%var_4820, dtype="float32") /* ty=Tensor[(1287, 1), float32] */;
  %196 = cast(meta[relay.Constant][13] /* ty=Tensor[(120, 4), float32] */, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %197 = cast(%var_4822, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %198 = cast(%var_4823, dtype="float32") /* ty=Tensor[(180), float32] */;
  %199 = reshape(%195, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %200 = reshape(%196, newshape=[120, 4]) /* ty=Tensor[(120, 4), float32] */;
  %201 = reshape(%197, newshape=[672]) /* ty=Tensor[(672), uint64] */;
  %202 = reshape(%198, newshape=[3, 60]) /* ty=Tensor[(3, 60), float32] */;
  %203 = @func_1592(%199, %200, %201, %202) /* ty=(Tensor[(9, 11, 13), float32], Tensor[(4, 8, 15), float32], Tensor[(156), float64], Tensor[(672), uint64], Tensor[(156, 1), float64], Tensor[(4, 8, 15), bool], Tensor[(2, 10, 9), float32], Tensor[(3, 60), float32]) */;
  %204 = cast(meta[relay.Constant][14] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %205 = cast(meta[relay.Constant][15] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %206 = reshape(%204, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), float32] */;
  %207 = reshape(%205, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %208 = @func_3526(%206, %207) /* ty=(Tensor[(9, 8, 9), bool], Tensor[(156), float64], Tensor[(30), uint64], Tensor[(9, 8, 9), float32], Tensor[(12, 3, 3), float64], Tensor[(108), float64], Tensor[(2100), float32]) */;
  %209 = cast(%var_4820, dtype="float32") /* ty=Tensor[(1287, 1), float32] */;
  %210 = cast(meta[relay.Constant][13] /* ty=Tensor[(120, 4), float32] */, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %211 = cast(%var_4822, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %212 = cast(%var_4823, dtype="float32") /* ty=Tensor[(180), float32] */;
  %213 = reshape(%209, newshape=[1, 1287]) /* ty=Tensor[(1, 1287), float32] */;
  %214 = reshape(%210, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %215 = reshape(%211, newshape=[672]) /* ty=Tensor[(672), uint64] */;
  %216 = reshape(%212, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %217 = @func_2618(%213, %214, %215, %216) /* ty=(Tensor[(8, 8, 2), float64], Tensor[(156, 1), float64], Tensor[(1, 1287), float32], Tensor[(480), float32], Tensor[(672), uint64], Tensor[(180), float32]) */;
  %218 = cast(%var_4809, dtype="bool") /* ty=Tensor[(1, 6, 2), bool] */;
  %219 = cast(%var_4808, dtype="bool") /* ty=bool */;
  %220 = cast(%var_4809, dtype="float32") /* ty=Tensor[(1, 6, 2), float32] */;
  %221 = divide(%193, %194) /* ty=Tensor[(1, 6, 2), float32] */;
  %222 = %203.6;
  %223 = %208.5;
  %224 = %217.4;
  %225 = logical_or(%218, %219) /* ty=Tensor[(1, 6, 2), bool] */;
  %226 = asinh(%220) /* ty=Tensor[(1, 6, 2), float32] */;
  (%221, %222, %var_4820, meta[relay.Constant][13] /* ty=Tensor[(120, 4), float32] */, %var_4822, %var_4823, %223, meta[relay.Constant][14] /* ty=Tensor[(648), float32] */, meta[relay.Constant][15] /* ty=Tensor[(2100), float32] */, %224, %225, %226)
}

def @func_3058(%var_3048: Tensor[(5, 6, 1), uint64]) -> (Tensor[(5, 6, 1), bool], Tensor[(156), float64], Tensor[(720), uint64]) {
  %227 = cast(meta[relay.Constant][16] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %228 = cast(%var_3048, dtype="bool") /* ty=Tensor[(5, 6, 1), bool] */;
  %229 = cast(meta[relay.Constant][17] /* ty=Tensor[(720), uint64] */, dtype="uint64") /* ty=Tensor[(720), uint64] */;
  %230 = reshape(%229, newshape=[15, 6, 8]) /* ty=Tensor[(15, 6, 8), uint64] */;
  %231 = @func_563(%230) /* ty=(Tensor[(15, 6, 8), uint64], Tensor[(6, 2, 13), float32], Tensor[(156), float64]) */;
  %232 = less_equal(%227, %228) /* ty=Tensor[(5, 6, 1), bool] */;
  %233 = %231.2;
  (%232, %233, meta[relay.Constant][17] /* ty=Tensor[(720), uint64] */)
}

def @func_1592(%var_1517: Tensor[(9, 11, 13), float32], %var_1541: Tensor[(120, 4), float32], %var_1557: Tensor[(672), uint64], %var_1589: Tensor[(3, 60), float32]) -> (Tensor[(9, 11, 13), float32], Tensor[(4, 8, 15), float32], Tensor[(156), float64], Tensor[(672), uint64], Tensor[(156, 1), float64], Tensor[(4, 8, 15), bool], Tensor[(2, 10, 9), float32], Tensor[(3, 60), float32]) {
  %234 = cast(%var_1517, dtype="float32") /* ty=Tensor[(9, 11, 13), float32] */;
  %235 = cast(%var_1541, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %236 = cast(%var_1541, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %237 = reshape(%235, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
  %238 = reshape(%236, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
  %239 = @func_536(%237, %238) /* ty=(Tensor[(4, 8, 15), float64], Tensor[(4, 8, 15), float64]) */;
  %240 = %239.1;
  %241 = cast(%var_1541, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %242 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%240, dtype="float32") /* ty=Tensor[(4, 8, 15), float32] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %245 = cast(%var_1557, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %246 = cast(%var_1557, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %247 = cast(%var_1557, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %248 = cast(meta[relay.Constant][18] /* ty=Tensor[(156, 1), float64] */, dtype="float64") /* ty=Tensor[(156, 1), float64] */;
  %249 = reshape(%245, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), uint64] */;
  %250 = reshape(%246, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), uint64] */;
  %251 = reshape(%247, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), uint64] */;
  %252 = reshape(%248, newshape=[156]) /* ty=Tensor[(156), float64] */;
  %253 = @func_1210(%249, %250, %251, %252) /* ty=(Tensor[(8, 6, 14), uint64], Tensor[(8, 6, 14), float32], Tensor[(8, 6, 14), int16], Tensor[(6, 2, 13), float32], Tensor[(156), float64], Tensor[(6, 2, 13), float32]) */;
  %254 = cast(%var_1541, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
  %255 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(%240, dtype="bool") /* ty=Tensor[(4, 8, 15), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %258 = cast(%var_1589, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
  %259 = reshape(%258, newshape=[2, 10, 9]) /* ty=Tensor[(2, 10, 9), float32] */;
  %260 = asin(%234) /* ty=Tensor[(9, 11, 13), float32] */;
  %261 = multiply(%243, %244) /* ty=Tensor[(4, 8, 15), float32] */;
  %262 = %253.4;
  %263 = less(%256, %257) /* ty=Tensor[(4, 8, 15), bool] */;
  %264 = @func_1329(%259) /* ty=Tensor[(2, 10, 9), float32] */;
  (%260, %261, %262, %var_1557, meta[relay.Constant][18] /* ty=Tensor[(156, 1), float64] */, %263, %264, %var_1589)
}

def @func_1329(%var_1325: Tensor[(2, 10, 9), float32]) -> Tensor[(2, 10, 9), float32] {
  %265 = cast(%var_1325, dtype="float32") /* ty=Tensor[(2, 10, 9), float32] */;
  log(%265) /* ty=Tensor[(2, 10, 9), float32] */
}

def @func_6629(%var_6622: Tensor[(10, 3, 6), uint16]) -> Tensor[(10, 3, 6), uint16] {
  %266 = cast(%var_6622, dtype="uint16") /* ty=Tensor[(10, 3, 6), uint16] */;
  %267 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(10, 3, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 3, 6), uint16] */, dtype="uint16") /* ty=Tensor[(10, 3, 6), uint16] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%268, %269) /* ty=Tensor[(10, 3, 6), uint16] */
}

def @func_40(%var_34: Tensor[(11, 13, 4), int8], %var_35: Tensor[(11, 13, 4), int8]) -> (Tensor[(11, 13, 4), bool],) {
  %270 = cast(%var_35, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
  %271 = shape_of(%var_34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%var_34, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %274 = equal(%272, %273) /* ty=Tensor[(11, 13, 4), bool] */;
  (%274,)
}

def @func_536(%var_508: Tensor[(4, 8, 15), float32], %var_514: Tensor[(4, 8, 15), float32]) -> (Tensor[(4, 8, 15), float64], Tensor[(4, 8, 15), float64]) {
  %275 = cast(%var_508, dtype="float32") /* ty=Tensor[(4, 8, 15), float32] */;
  %276 = log10(%275) /* ty=Tensor[(4, 8, 15), float32] */;
  %277 = cast(%var_514, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%276, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %281 = cast(%var_514, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
  %282 = floor_mod(%279, %280) /* ty=Tensor[(4, 8, 15), float64] */;
  %283 = sigmoid(%281) /* ty=Tensor[(4, 8, 15), float64] */;
  (%282, %283)
}

def @func_563(%var_547: Tensor[(15, 6, 8), uint64]) -> (Tensor[(15, 6, 8), uint64], Tensor[(6, 2, 13), float32], Tensor[(156), float64]) {
  %284 = cast(%var_547, dtype="uint64") /* ty=Tensor[(15, 6, 8), uint64] */;
  %285 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(15, 6, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 6, 8), uint64] */, dtype="uint64") /* ty=Tensor[(15, 6, 8), uint64] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %288 = cast(meta[relay.Constant][21] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %289 = reshape(%288, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float64] */;
  %290 = bitwise_and(%286, %287) /* ty=Tensor[(15, 6, 8), uint64] */;
  %291 = @func_253(%289) /* ty=Tensor[(6, 2, 13), float32] */;
  (%290, %291, meta[relay.Constant][21] /* ty=Tensor[(156), float64] */)
}

def @func_7473() -> Tensor[(14, 15, 10), float32] {
  %292 = @func_7441() /* ty=(Tensor[(8, 5, 6), float32], Tensor[(14, 15, 10), float32], Tensor[(2100), float32]) */;
  %292.1
}

def @func_5596(%var_5565: Tensor[(9, 6, 1), float64]) -> (Tensor[(9, 6, 1), float64], Tensor[(9, 6, ?), bool]) {
  %293 = cast(%var_5565, dtype="float64") /* ty=Tensor[(9, 6, 1), float64] */;
  %294 = cast(%var_5565, dtype="float32") /* ty=Tensor[(9, 6, 1), float32] */;
  %295 = cast(%var_5565, dtype="float32") /* ty=Tensor[(9, 6, 1), float32] */;
  %296 = reshape(%294, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), float32] */;
  %297 = reshape(%295, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), float32] */;
  %298 = @func_3388(%296, %297) /* ty=Tensor[(3, 2, 9), float32] */;
  %299 = cast(%298, dtype="bool") /* ty=Tensor[(3, 2, 9), bool] */;
  %300 = shape_of(%var_5565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%var_5565, dtype="bool") /* ty=Tensor[(9, 6, 1), bool] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %303 = exp(%293) /* ty=Tensor[(9, 6, 1), float64] */;
  %304 = logical_and(%301, %302) /* ty=Tensor[(9, 6, ?), bool] */;
  (%303, %304)
}

def @func_4368(%var_4332: Tensor[(88), float32], %var_4333: Tensor[(132), float64], %var_4334: Tensor[(180), float32], %var_4366: Tensor[(4, 392), float64]) -> (Tensor[(180), float32], Tensor[(88), float32], Tensor[(132), float64], Tensor[(180), float32], Tensor[(7, 16, 11), uint64], Tensor[(7, 16, 11), float32], Tensor[(14, 8, 14), float64], Tensor[(4, 392), float64]) {
  %305 = cast(%var_4332, dtype="float32") /* ty=Tensor[(88), float32] */;
  %306 = cast(%var_4333, dtype="float64") /* ty=Tensor[(132), float64] */;
  %307 = cast(%var_4334, dtype="float32") /* ty=Tensor[(180), float32] */;
  %308 = reshape(%305, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %309 = reshape(%306, newshape=[132]) /* ty=Tensor[(132), float64] */;
  %310 = reshape(%307, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %311 = @func_3913(%308, %309, %310) /* ty=(Tensor[(6, 2, 11), float64], Tensor[(132), float64], Tensor[(180), float32], Tensor[(11, 4, 2), float32]) */;
  %312 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(7, 16, 11), float32] */;
  %313 = log2(%312) /* ty=Tensor[(7, 16, 11), float32] */;
  %314 = cast(%313, dtype="float64") /* ty=Tensor[(7, 16, 11), float64] */;
  %315 = log(%314) /* ty=Tensor[(7, 16, 11), float64] */;
  %316 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 16, 11), float32] */, dtype="uint64") /* ty=Tensor[(7, 16, 11), uint64] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="uint64") /* ty=Tensor[(7, 16, 11), uint64] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %320 = cast(%315, dtype="float32") /* ty=Tensor[(7, 16, 11), float32] */;
  %321 = cast(%var_4366, dtype="float64") /* ty=Tensor[(4, 392), float64] */;
  %322 = reshape(%321, newshape=[14, 8, 14]) /* ty=Tensor[(14, 8, 14), float64] */;
  %323 = @func_2355(%322) /* ty=(Tensor[(14, 8, 14), float64],) */;
  %324 = %311.2;
  %325 = bitwise_xor(%318, %319) /* ty=Tensor[(7, 16, 11), uint64] */;
  %326 = sqrt(%320) /* ty=Tensor[(7, 16, 11), float32] */;
  %327 = %323.0;
  (%324, %var_4332, %var_4333, %var_4334, %325, %326, %327, %var_4366)
}

def @func_5939(%var_5917: Tensor[(16, 1, 5), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float32], Tensor[(16, ?, 5), bool]) {
  %328 = cast(%var_5917, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
  %329 = cast(%var_5917, dtype="float32") /* ty=Tensor[(16, 1, 5), float32] */;
  %330 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 1, 5), float64] */, dtype="bool") /* ty=Tensor[(16, 1, 5), bool] */;
  %331 = shape_of(%var_5917, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%var_5917, dtype="bool") /* ty=Tensor[(16, 1, 5), bool] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %334 = atan(%328) /* ty=Tensor[(16, 1, 5), float64] */;
  %335 = sigmoid(%329) /* ty=Tensor[(16, 1, 5), float32] */;
  %336 = less_equal(%332, %333) /* ty=Tensor[(16, ?, 5), bool] */;
  (%334, %335, %336)
}

def @func_7587() -> (Tensor[(14, 15, 10), float32],) {
  %337 = @func_7473() /* ty=Tensor[(14, 15, 10), float32] */;
  (%337,)
}

def @func_3526(%var_3463: Tensor[(9, 8, 9), float32], %var_3513: Tensor[(2100), float32]) -> (Tensor[(9, 8, 9), bool], Tensor[(156), float64], Tensor[(30), uint64], Tensor[(9, 8, 9), float32], Tensor[(12, 3, 3), float64], Tensor[(108), float64], Tensor[(2100), float32]) {
  %338 = cast(%var_3463, dtype="float32") /* ty=Tensor[(9, 8, 9), float32] */;
  %339 = cos(%338) /* ty=Tensor[(9, 8, 9), float32] */;
  %340 = cast(%var_3463, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
  %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%339, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %344 = less(%342, %343) /* ty=Tensor[(9, 8, 9), bool] */;
  %345 = cast(%344, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
  %346 = shape_of(%var_3463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%var_3463, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %349 = cast(meta[relay.Constant][24] /* ty=Tensor[(30), uint64] */, dtype="uint64") /* ty=Tensor[(30), uint64] */;
  %350 = reshape(%349, newshape=[5, 6, 1]) /* ty=Tensor[(5, 6, 1), uint64] */;
  %351 = @func_3058(%350) /* ty=(Tensor[(5, 6, 1), bool], Tensor[(156), float64], Tensor[(720), uint64]) */;
  %352 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 8, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 8, 9), float32] */;
  %353 = shape_of(%var_3463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%var_3463, dtype="float32") /* ty=Tensor[(9, 8, 9), float32] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %356 = cast(meta[relay.Constant][26] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %357 = cast(%var_3513, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %358 = reshape(%356, newshape=[12, 3, 3]) /* ty=Tensor[(12, 3, 3), float64] */;
  %359 = reshape(%357, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %360 = @func_3372(%358, %359) /* ty=(Tensor[(14, 15, 10), float32], Tensor[(2100), float32], Tensor[(12, 3, 3), float64], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32]) */;
  %361 = less_equal(%347, %348) /* ty=Tensor[(9, 8, 9), bool] */;
  %362 = %351.1;
  %363 = floor_divide(%354, %355) /* ty=Tensor[(9, 8, 9), float32] */;
  %364 = %360.2;
  (%361, %362, meta[relay.Constant][24] /* ty=Tensor[(30), uint64] */, %363, %364, meta[relay.Constant][26] /* ty=Tensor[(108), float64] */, %var_3513)
}

def @func_7275(%var_7262: Tensor[(14, 16, 10), float32], %var_7268: Tensor[(264), float32]) -> (Tensor[(14, 16, 10), float32], Tensor[(11, 2, 12), float64], Tensor[(264), float32]) {
  %365 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 16, 10), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 10), float32] */;
  %366 = shape_of(%var_7262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%var_7262, dtype="float32") /* ty=Tensor[(14, 16, 10), float32] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %369 = cast(%var_7268, dtype="float32") /* ty=Tensor[(264), float32] */;
  %370 = reshape(%369, newshape=[11, 2, 12]) /* ty=Tensor[(11, 2, 12), float32] */;
  %371 = @func_5369(%370) /* ty=(Tensor[(11, 2, 12), float64],) */;
  %372 = floor_mod(%367, %368) /* ty=Tensor[(14, 16, 10), float32] */;
  %373 = %371.0;
  (%372, %373, %var_7268)
}

def @func_4530(%var_4513: Tensor[(12, 3, 4), float32], %var_4514: Tensor[(12, 3, 4), float32]) -> (Tensor[(12, 3, 4), float32], Tensor[(6, 4, 2), uint32], Tensor[(12, 4), uint32], Tensor[(12, 3, 4), float32]) {
  %374 = cast(%var_4514, dtype="float32") /* ty=Tensor[(12, 3, 4), float32] */;
  %375 = shape_of(%var_4513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%var_4513, dtype="float32") /* ty=Tensor[(12, 3, 4), float32] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %378 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 4), uint32] */, dtype="uint32") /* ty=Tensor[(12, 4), uint32] */;
  %379 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 4), uint32] */, dtype="uint32") /* ty=Tensor[(12, 4), uint32] */;
  %380 = reshape(%378, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), uint32] */;
  %381 = reshape(%379, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), uint32] */;
  %382 = @func_3810(%380, %381) /* ty=(Tensor[(6, 4, 2), uint32],) */;
  %383 = cast(%var_4514, dtype="float32") /* ty=Tensor[(12, 3, 4), float32] */;
  %384 = floor_mod(%376, %377) /* ty=Tensor[(12, 3, 4), float32] */;
  %385 = %382.0;
  %386 = asin(%383) /* ty=Tensor[(12, 3, 4), float32] */;
  (%384, %385, meta[relay.Constant][28] /* ty=Tensor[(12, 4), uint32] */, %386)
}

def @func_3388(%var_3378: Tensor[(3, 2, 9), float32], %var_3379: Tensor[(3, 2, 9), float32]) -> Tensor[(3, 2, 9), float32] {
  %387 = cast(%var_3379, dtype="float32") /* ty=Tensor[(3, 2, 9), float32] */;
  %388 = shape_of(%var_3378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%var_3378, dtype="float32") /* ty=Tensor[(3, 2, 9), float32] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%389, %390) /* ty=Tensor[(3, 2, 9), float32] */
}

def @func_4051(%var_4027: int16, %var_4028: Tensor[(1, 5, 9), int16], %var_4037: Tensor[(495), uint8], %var_4046: Tensor[(156), float64]) -> (Tensor[(495), uint8], Tensor[(11, 5, 9), bool], Tensor[(6, 2, 13), float32], Tensor[(156), float64]) {
  %391 = cast(%var_4037, dtype="uint8") /* ty=Tensor[(495), uint8] */;
  %392 = cast(%var_4037, dtype="uint8") /* ty=Tensor[(495), uint8] */;
  %393 = reshape(%391, newshape=[11, 5, 9]) /* ty=Tensor[(11, 5, 9), uint8] */;
  %394 = reshape(%392, newshape=[11, 5, 9]) /* ty=Tensor[(11, 5, 9), uint8] */;
  %395 = @func_3027(%393, %394) /* ty=Tensor[(11, 5, 9), float32] */;
  %396 = cast(%var_4027, dtype="int16") /* ty=int16 */;
  %397 = cast(%var_4028, dtype="int16") /* ty=Tensor[(1, 5, 9), int16] */;
  %398 = subtract(%396, %397) /* ty=Tensor[(1, 5, 9), int16] */;
  %399 = cast(%395, dtype="bool") /* ty=Tensor[(11, 5, 9), bool] */;
  %400 = cast(%398, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
  %401 = cast(%var_4046, dtype="float64") /* ty=Tensor[(156), float64] */;
  %402 = reshape(%401, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float64] */;
  %403 = greater(%399, %400) /* ty=Tensor[(11, 5, 9), bool] */;
  %404 = @func_253(%402) /* ty=Tensor[(6, 2, 13), float32] */;
  (%var_4037, %403, %404, %var_4046)
}

def @func_7593() -> (Tensor[(8, 5, 6), float32],) {
  %405 = @func_7441() /* ty=(Tensor[(8, 5, 6), float32], Tensor[(14, 15, 10), float32], Tensor[(2100), float32]) */;
  %406 = %405.0;
  (%406,)
}

def @func_2657(%var_2628: Tensor[(1, 8, 6), float32], %var_2655: Tensor[(1, 180), int16]) -> (Tensor[(?, 8, 6), bool], Tensor[(1, 8, 6), float32], Tensor[(14, 52), float32], Tensor[(1, 180), int16]) {
  %407 = cast(%var_2628, dtype="float32") /* ty=Tensor[(1, 8, 6), float32] */;
  %408 = sinh(%407) /* ty=Tensor[(1, 8, 6), float32] */;
  %409 = cast(%var_2628, dtype="float64") /* ty=Tensor[(1, 8, 6), float64] */;
  %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%408, dtype="float64") /* ty=Tensor[(1, 8, 6), float64] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %413 = floor_divide(%411, %412) /* ty=Tensor[(?, 8, 6), float64] */;
  %414 = cast(%408, dtype="bool") /* ty=Tensor[(1, 8, 6), bool] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="bool") /* ty=Tensor[(?, 8, 6), bool] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %418 = cast(%var_2628, dtype="float32") /* ty=Tensor[(1, 8, 6), float32] */;
  %419 = cast(%var_2655, dtype="int16") /* ty=Tensor[(1, 180), int16] */;
  %420 = cast(%var_2655, dtype="int16") /* ty=Tensor[(1, 180), int16] */;
  %421 = reshape(%419, newshape=[10, 6, 3]) /* ty=Tensor[(10, 6, 3), int16] */;
  %422 = reshape(%420, newshape=[10, 6, 3]) /* ty=Tensor[(10, 6, 3), int16] */;
  %423 = @func_2332(%421, %422) /* ty=(Tensor[(10, 6, 3), int16], Tensor[(3, 8, 15), uint32], Tensor[(14, 52), float32]) */;
  %424 = logical_and(%416, %417) /* ty=Tensor[(?, 8, 6), bool] */;
  %425 = asin(%418) /* ty=Tensor[(1, 8, 6), float32] */;
  %426 = %423.2;
  (%424, %425, %426, %var_2655)
}

def @func_2332(%var_2288: Tensor[(10, 6, 3), int16], %var_2289: Tensor[(10, 6, 3), int16]) -> (Tensor[(10, 6, 3), int16], Tensor[(3, 8, 15), uint32], Tensor[(14, 52), float32]) {
  %427 = cast(%var_2289, dtype="int16") /* ty=Tensor[(10, 6, 3), int16] */;
  %428 = shape_of(%var_2288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%var_2288, dtype="int16") /* ty=Tensor[(10, 6, 3), int16] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %431 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 52), float32] */, dtype="float32") /* ty=Tensor[(14, 52), float32] */;
  %432 = reshape(%431, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
  %433 = @func_1962(%432) /* ty=(Tensor[(4, 13, 14), float32], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32]) */;
  %434 = left_shift(%429, %430) /* ty=Tensor[(10, 6, 3), int16] */;
  %435 = %433.1;
  (%434, %435, meta[relay.Constant][29] /* ty=Tensor[(14, 52), float32] */)
}

def @func_4096(%var_4084: Tensor[(16, 6, 12), float64]) -> Tensor[(16, 6, 12), float64] {
  %436 = cast(%var_4084, dtype="float64") /* ty=Tensor[(16, 6, 12), float64] */;
  tan(%436) /* ty=Tensor[(16, 6, 12), float64] */
}

def @func_4473(%var_4459: Tensor[(6, 4, 16), uint16], %var_4467: Tensor[(11, 117), float32], %var_4469: Tensor[(4, 168), uint64], %var_4470: Tensor[(180), float32]) -> (Tensor[(6, 4, 16), bool], Tensor[(3, 60), float32], Tensor[(11, 117), float32], Tensor[(480), float32], Tensor[(4, 168), uint64], Tensor[(180), float32]) {
  %437 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 4, 16), uint16] */, dtype="bool") /* ty=Tensor[(6, 4, 16), bool] */;
  %438 = shape_of(%var_4459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%var_4459, dtype="bool") /* ty=Tensor[(6, 4, 16), bool] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %441 = cast(%var_4467, dtype="float32") /* ty=Tensor[(11, 117), float32] */;
  %442 = cast(meta[relay.Constant][31] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %443 = cast(%var_4469, dtype="uint64") /* ty=Tensor[(4, 168), uint64] */;
  %444 = cast(%var_4470, dtype="float32") /* ty=Tensor[(180), float32] */;
  %445 = reshape(%441, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %446 = reshape(%442, newshape=[120, 4]) /* ty=Tensor[(120, 4), float32] */;
  %447 = reshape(%443, newshape=[672]) /* ty=Tensor[(672), uint64] */;
  %448 = reshape(%444, newshape=[3, 60]) /* ty=Tensor[(3, 60), float32] */;
  %449 = @func_1592(%445, %446, %447, %448) /* ty=(Tensor[(9, 11, 13), float32], Tensor[(4, 8, 15), float32], Tensor[(156), float64], Tensor[(672), uint64], Tensor[(156, 1), float64], Tensor[(4, 8, 15), bool], Tensor[(2, 10, 9), float32], Tensor[(3, 60), float32]) */;
  %450 = less(%439, %440) /* ty=Tensor[(6, 4, 16), bool] */;
  %451 = %449.7;
  (%450, %451, %var_4467, meta[relay.Constant][31] /* ty=Tensor[(480), float32] */, %var_4469, %var_4470)
}

def @func_6763(%var_6716: Tensor[(4, 11, 4), float64], %var_6717: Tensor[(4, 11, 4), float64], %var_6743: Tensor[(2100), float32], %var_6754: Tensor[(132), float64], %var_6755: Tensor[(180), float32]) -> (Tensor[(4, 11, 4), float64], Tensor[(4, 11, 4), bool], Tensor[(9, 8, 9), float32], Tensor[(648), float32], Tensor[(2100), float32], Tensor[(2, 10, 9), float32], Tensor[(132), float64], Tensor[(180), float32]) {
  %452 = cast(%var_6717, dtype="float64") /* ty=Tensor[(4, 11, 4), float64] */;
  %453 = shape_of(%var_6716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%var_6716, dtype="float64") /* ty=Tensor[(4, 11, 4), float64] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %456 = floor_mod(%454, %455) /* ty=Tensor[(4, 11, 4), float64] */;
  %457 = cast(%456, dtype="float64") /* ty=Tensor[(4, 11, 4), float64] */;
  %458 = cast(%var_6716, dtype="bool") /* ty=Tensor[(4, 11, 4), bool] */;
  %459 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%456, dtype="bool") /* ty=Tensor[(4, 11, 4), bool] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %462 = cast(meta[relay.Constant][32] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %463 = cast(%var_6743, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %464 = reshape(%462, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), float32] */;
  %465 = reshape(%463, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %466 = @func_3526(%464, %465) /* ty=(Tensor[(9, 8, 9), bool], Tensor[(156), float64], Tensor[(30), uint64], Tensor[(9, 8, 9), float32], Tensor[(12, 3, 3), float64], Tensor[(108), float64], Tensor[(2100), float32]) */;
  %467 = cast(%var_6754, dtype="float64") /* ty=Tensor[(132), float64] */;
  %468 = cast(%var_6755, dtype="float32") /* ty=Tensor[(180), float32] */;
  %469 = reshape(%467, newshape=[6, 2, 11]) /* ty=Tensor[(6, 2, 11), float64] */;
  %470 = reshape(%468, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
  %471 = @func_2942(%469, %470) /* ty=(Tensor[(6, 2, 11), float64], Tensor[(2, 10, 9), float32], Tensor[(180, 1), float32]) */;
  %472 = erf(%457) /* ty=Tensor[(4, 11, 4), float64] */;
  %473 = greater(%460, %461) /* ty=Tensor[(4, 11, 4), bool] */;
  %474 = %466.3;
  %475 = %471.1;
  (%472, %473, %474, meta[relay.Constant][32] /* ty=Tensor[(648), float32] */, %var_6743, %475, %var_6754, %var_6755)
}

def @main(%var_7656: Tensor[(176), float64], %var_7657: Tensor[(66, 2), float64], %var_7658: Tensor[(180), float32], %var_7666: Tensor[(66, 2), float64]) -> (Tensor[(14, 15, 10), float32], Tensor[(14, 15, 10), float32], Tensor[(648), float32], Tensor[(176), float64], Tensor[(180), float32], Tensor[(156), float64], Tensor[(30), uint64], Tensor[(66, 2), uint8], Tensor[(8, 5, 6), float32], Tensor[(66, 2), float32]) {
  %476 = @func_7441() /* ty=(Tensor[(8, 5, 6), float32], Tensor[(14, 15, 10), float32], Tensor[(2100), float32]) */;
  %477 = cast(%var_7656, dtype="float64") /* ty=Tensor[(176), float64] */;
  %478 = cast(%var_7656, dtype="float64") /* ty=Tensor[(176), float64] */;
  %479 = @func_7473() /* ty=Tensor[(14, 15, 10), float32] */;
  %480 = cast(%479, dtype="float32") /* ty=Tensor[(14, 15, 10), float32] */;
  %481 = cast(%var_7657, dtype="float64") /* ty=Tensor[(66, 2), float64] */;
  %482 = cast(%var_7658, dtype="float32") /* ty=Tensor[(180), float32] */;
  %483 = reshape(%477, newshape=[4, 11, 4]) /* ty=Tensor[(4, 11, 4), float64] */;
  %484 = reshape(%478, newshape=[4, 11, 4]) /* ty=Tensor[(4, 11, 4), float64] */;
  %485 = reshape(%480, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %486 = reshape(%481, newshape=[132]) /* ty=Tensor[(132), float64] */;
  %487 = reshape(%482, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %488 = @func_6763(%483, %484, %485, %486, %487) /* ty=(Tensor[(4, 11, 4), float64], Tensor[(4, 11, 4), bool], Tensor[(9, 8, 9), float32], Tensor[(648), float32], Tensor[(2100), float32], Tensor[(2, 10, 9), float32], Tensor[(132), float64], Tensor[(180), float32]) */;
  %489 = cast(meta[relay.Constant][33] /* ty=Tensor[(30), uint64] */, dtype="uint64") /* ty=Tensor[(30), uint64] */;
  %490 = reshape(%489, newshape=[5, 6, 1]) /* ty=Tensor[(5, 6, 1), uint64] */;
  %491 = @func_3058(%490) /* ty=(Tensor[(5, 6, 1), bool], Tensor[(156), float64], Tensor[(720), uint64]) */;
  %492 = cast(%var_7666, dtype="uint8") /* ty=Tensor[(66, 2), uint8] */;
  %493 = shape_of(%var_7657, dtype="int32") /* ty=Tensor[(2), int32] */;
  %494 = cast(%var_7657, dtype="uint8") /* ty=Tensor[(66, 2), uint8] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %496 = @func_7593() /* ty=(Tensor[(8, 5, 6), float32],) */;
  %497 = cast(%var_7657, dtype="float32") /* ty=Tensor[(66, 2), float32] */;
  %498 = shape_of(%var_7666, dtype="int32") /* ty=Tensor[(2), int32] */;
  %499 = cast(%var_7666, dtype="float32") /* ty=Tensor[(66, 2), float32] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %501 = %476.1;
  %502 = %488.3;
  %503 = %491.1;
  %504 = bitwise_or(%494, %495) /* ty=Tensor[(66, 2), uint8] */;
  %505 = %496.0;
  %506 = floor_mod(%499, %500) /* ty=Tensor[(66, 2), float32] */;
  (%501, %479, %502, %var_7656, %var_7658, %503, meta[relay.Constant][33] /* ty=Tensor[(30), uint64] */, %504, %505, %506)
}

def @func_5866(%var_5852: Tensor[(15, 15, 3), float64]) -> (Tensor[(15, 15, 3), uint16], Tensor[(15, 15, 3), bool]) {
  %507 = cast(%var_5852, dtype="float64") /* ty=Tensor[(15, 15, 3), float64] */;
  %508 = rsqrt(%507) /* ty=Tensor[(15, 15, 3), float64] */;
  %509 = cast(%var_5852, dtype="uint16") /* ty=Tensor[(15, 15, 3), uint16] */;
  %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%508, dtype="uint16") /* ty=Tensor[(15, 15, 3), uint16] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %513 = cast(%508, dtype="bool") /* ty=Tensor[(15, 15, 3), bool] */;
  %514 = shape_of(%var_5852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%var_5852, dtype="bool") /* ty=Tensor[(15, 15, 3), bool] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %517 = bitwise_xor(%511, %512) /* ty=Tensor[(15, 15, 3), uint16] */;
  %518 = greater_equal(%515, %516) /* ty=Tensor[(15, 15, 3), bool] */;
  (%517, %518)
}

def @func_1210(%var_1169: Tensor[(8, 6, 14), uint64], %var_1170: Tensor[(8, 6, 14), uint64], %var_1174: Tensor[(8, 6, 14), uint64], %var_1195: Tensor[(156), float64]) -> (Tensor[(8, 6, 14), uint64], Tensor[(8, 6, 14), float32], Tensor[(8, 6, 14), int16], Tensor[(6, 2, 13), float32], Tensor[(156), float64], Tensor[(6, 2, 13), float32]) {
  %519 = cast(%var_1170, dtype="uint64") /* ty=Tensor[(8, 6, 14), uint64] */;
  %520 = shape_of(%var_1169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%var_1169, dtype="uint64") /* ty=Tensor[(8, 6, 14), uint64] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %523 = cast(%var_1174, dtype="float32") /* ty=Tensor[(8, 6, 14), float32] */;
  %524 = atan(%523) /* ty=Tensor[(8, 6, 14), float32] */;
  %525 = cast(%524, dtype="float32") /* ty=Tensor[(8, 6, 14), float32] */;
  %526 = cast(%var_1174, dtype="float32") /* ty=Tensor[(8, 6, 14), float32] */;
  %527 = shape_of(%var_1169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%var_1169, dtype="float32") /* ty=Tensor[(8, 6, 14), float32] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %530 = divide(%528, %529) /* ty=Tensor[(8, 6, 14), float32] */;
  %531 = cast(%530, dtype="int16") /* ty=Tensor[(8, 6, 14), int16] */;
  %532 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%524, dtype="int16") /* ty=Tensor[(8, 6, 14), int16] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %535 = cast(%var_1195, dtype="float64") /* ty=Tensor[(156), float64] */;
  %536 = reshape(%535, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float64] */;
  %537 = cast(%var_1195, dtype="float64") /* ty=Tensor[(156), float64] */;
  %538 = reshape(%537, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float64] */;
  %539 = right_shift(%521, %522) /* ty=Tensor[(8, 6, 14), uint64] */;
  %540 = tan(%525) /* ty=Tensor[(8, 6, 14), float32] */;
  %541 = bitwise_and(%533, %534) /* ty=Tensor[(8, 6, 14), int16] */;
  %542 = @func_253(%536) /* ty=Tensor[(6, 2, 13), float32] */;
  %543 = @func_253(%538) /* ty=Tensor[(6, 2, 13), float32] */;
  (%539, %540, %541, %542, %var_1195, %543)
}

def @func_3913(%var_3896: Tensor[(11, 4, 2), float32], %var_3903: Tensor[(132), float64], %var_3904: Tensor[(180), float32]) -> (Tensor[(6, 2, 11), float64], Tensor[(132), float64], Tensor[(180), float32], Tensor[(11, 4, 2), float32]) {
  %544 = cast(%var_3903, dtype="float64") /* ty=Tensor[(132), float64] */;
  %545 = cast(%var_3904, dtype="float32") /* ty=Tensor[(180), float32] */;
  %546 = reshape(%544, newshape=[6, 2, 11]) /* ty=Tensor[(6, 2, 11), float64] */;
  %547 = reshape(%545, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
  %548 = @func_2942(%546, %547) /* ty=(Tensor[(6, 2, 11), float64], Tensor[(2, 10, 9), float32], Tensor[(180, 1), float32]) */;
  %549 = cast(%var_3896, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %550 = asin(%549) /* ty=Tensor[(11, 4, 2), float32] */;
  %551 = cast(%var_3896, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%550, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %555 = greater_equal(%553, %554) /* ty=Tensor[(11, 4, 2), bool] */;
  %556 = cast(%555, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %557 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%550, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %560 = %548.0;
  %561 = mod(%558, %559) /* ty=Tensor[(11, 4, 2), float32] */;
  (%560, %var_3903, %var_3904, %561)
}

def @func_4620(%var_4591: Tensor[(12, 8, 10), int16], %var_4596: Tensor[(12, 8, 10), int16]) -> (Tensor[(12, 8, 10), uint8], Tensor[(12, 8, 10), float64]) {
  %562 = cast(%var_4596, dtype="uint8") /* ty=Tensor[(12, 8, 10), uint8] */;
  %563 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(12, 8, 10), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 8, 10), int16] */, dtype="uint8") /* ty=Tensor[(12, 8, 10), uint8] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %566 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 8, 10), int16] */, dtype="bool") /* ty=Tensor[(12, 8, 10), bool] */;
  %567 = shape_of(%var_4591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%var_4591, dtype="bool") /* ty=Tensor[(12, 8, 10), bool] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %570 = equal(%568, %569) /* ty=Tensor[(12, 8, 10), bool] */;
  %571 = cast(%570, dtype="float32") /* ty=Tensor[(12, 8, 10), float32] */;
  %572 = cosh(%571) /* ty=Tensor[(12, 8, 10), float32] */;
  %573 = cast(%572, dtype="float64") /* ty=Tensor[(12, 8, 10), float64] */;
  %574 = subtract(%564, %565) /* ty=Tensor[(12, 8, 10), uint8] */;
  %575 = sigmoid(%573) /* ty=Tensor[(12, 8, 10), float64] */;
  (%574, %575)
}

def @func_2005(%var_1998: Tensor[(6, 14, 14), float32]) -> (Tensor[(6, 14, 14), float32],) {
  %576 = cast(%var_1998, dtype="float32") /* ty=Tensor[(6, 14, 14), float32] */;
  %577 = sin(%576) /* ty=Tensor[(6, 14, 14), float32] */;
  (%577,)
}

def @func_3677(%var_3668: Tensor[(13, 7, 13), int16], %var_3669: Tensor[(13, 7, 13), int16]) -> Tensor[(13, 7, 13), bool] {
  %578 = cast(%var_3669, dtype="bool") /* ty=Tensor[(13, 7, 13), bool] */;
  %579 = shape_of(%var_3668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%var_3668, dtype="bool") /* ty=Tensor[(13, 7, 13), bool] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%580, %581) /* ty=Tensor[(13, 7, 13), bool] */
}

def @func_3372(%var_3327: Tensor[(12, 3, 3), float64], %var_3334: Tensor[(2100), float32]) -> (Tensor[(14, 15, 10), float32], Tensor[(2100), float32], Tensor[(12, 3, 3), float64], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32]) {
  %582 = cast(%var_3334, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %583 = reshape(%582, newshape=[14, 15, 10]) /* ty=Tensor[(14, 15, 10), float32] */;
  %584 = cast(%var_3327, dtype="float64") /* ty=Tensor[(12, 3, 3), float64] */;
  %585 = asinh(%584) /* ty=Tensor[(12, 3, 3), float64] */;
  %586 = cast(%585, dtype="float64") /* ty=Tensor[(12, 3, 3), float64] */;
  %587 = cast(meta[relay.Constant][35] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %588 = cast(meta[relay.Constant][35] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %589 = reshape(%587, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %590 = reshape(%588, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %591 = @func_2796(%583) /* ty=Tensor[(14, 15, 10), float32] */;
  %592 = asin(%586) /* ty=Tensor[(12, 3, 3), float64] */;
  %593 = @func_1671(%589, %590) /* ty=Tensor[(3, 8, 15), uint32] */;
  (%591, %var_3334, %592, %593, meta[relay.Constant][35] /* ty=Tensor[(360), uint32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3060(%var_3059: Tensor[(5, 6, 1), uint64]) -> (Tensor[(5, 6, 1), bool], Tensor[(156), float64], Tensor[(720), uint64]) {
  %7 = fn (%var_3048: Tensor[(5, 6, 1), uint64]) -> (Tensor[(5, 6, 1), bool], Tensor[(156), float64], Tensor[(720), uint64]) {
    %0 = cast(meta[relay.Constant][0] /* ty=uint64 */, dtype="bool") /* ty=bool */;
    %1 = cast(%var_3048, dtype="bool") /* ty=Tensor[(5, 6, 1), bool] */;
    %2 = cast(meta[relay.Constant][1] /* ty=Tensor[(720), uint64] */, dtype="uint64") /* ty=Tensor[(720), uint64] */;
    %3 = reshape(%2, newshape=[15, 6, 8]) /* ty=Tensor[(15, 6, 8), uint64] */;
    %4 = @func_563(%3) /* ty=(Tensor[(15, 6, 8), uint64], Tensor[(6, 2, 13), float32], Tensor[(156), float64]) */;
    %5 = less_equal(%0, %1) /* ty=Tensor[(5, 6, 1), bool] */;
    %6 = %4.2;
    (%5, %6, meta[relay.Constant][1] /* ty=Tensor[(720), uint64] */)
  };
  %7(%var_3059) /* ty=(Tensor[(5, 6, 1), bool], Tensor[(156), float64], Tensor[(720), uint64]) */
}

def @func_3376(%var_3374: Tensor[(12, 3, 3), float64], %var_3375: Tensor[(2100), float32]) -> (Tensor[(14, 15, 10), float32], Tensor[(2100), float32], Tensor[(12, 3, 3), float64], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32]) {
  @func_3372(%var_3374, %var_3375) /* ty=(Tensor[(14, 15, 10), float32], Tensor[(2100), float32], Tensor[(12, 3, 3), float64], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32]) */
}

def @func_5816(%var_5813: Tensor[(3, 9, 12), uint32], %var_5814: Tensor[(3, 9, 12), uint32], %var_5815: Tensor[(3, 9, 12), uint32]) -> (Tensor[(3, 9, 12), bool], Tensor[(3, 9, 12), int8]) {
  %18 = fn (%var_5796: Tensor[(3, 9, 12), uint32], %var_5797: Tensor[(3, 9, 12), uint32], %var_5804: Tensor[(3, 9, 12), uint32]) -> (Tensor[(3, 9, 12), bool], Tensor[(3, 9, 12), int8]) {
    %8 = cast(%var_5797, dtype="bool") /* ty=Tensor[(3, 9, 12), bool] */;
    %9 = shape_of(%var_5796, dtype="int32") /* ty=Tensor[(3), int32] */;
    %10 = cast(%var_5796, dtype="bool") /* ty=Tensor[(3, 9, 12), bool] */;
    %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %12 = cast(%var_5804, dtype="int8") /* ty=Tensor[(3, 9, 12), int8] */;
    %13 = shape_of(%var_5797, dtype="int32") /* ty=Tensor[(3), int32] */;
    %14 = cast(%var_5797, dtype="int8") /* ty=Tensor[(3, 9, 12), int8] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %16 = equal(%10, %11) /* ty=Tensor[(3, 9, 12), bool] */;
    %17 = multiply(%14, %15) /* ty=Tensor[(3, 9, 12), int8] */;
    (%16, %17)
  };
  %18(%var_5813, %var_5814, %var_5815) /* ty=(Tensor[(3, 9, 12), bool], Tensor[(3, 9, 12), int8]) */
}

def @func_6763(%var_6716: Tensor[(4, 11, 4), float64], %var_6717: Tensor[(4, 11, 4), float64], %var_6743: Tensor[(2100), float32], %var_6754: Tensor[(132), float64], %var_6755: Tensor[(180), float32]) -> (Tensor[(4, 11, 4), float64], Tensor[(4, 11, 4), bool], Tensor[(9, 8, 9), float32], Tensor[(648), float32], Tensor[(2100), float32], Tensor[(2, 10, 9), float32], Tensor[(132), float64], Tensor[(180), float32]) {
  %19 = cast(%var_6717, dtype="float64") /* ty=Tensor[(4, 11, 4), float64] */;
  %20 = shape_of(%var_6716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%var_6716, dtype="float64") /* ty=Tensor[(4, 11, 4), float64] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %23 = floor_mod(%21, %22) /* ty=Tensor[(4, 11, 4), float64] */;
  %24 = cast(%23, dtype="float64") /* ty=Tensor[(4, 11, 4), float64] */;
  %25 = cast(%var_6716, dtype="bool") /* ty=Tensor[(4, 11, 4), bool] */;
  %26 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%23, dtype="bool") /* ty=Tensor[(4, 11, 4), bool] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %30 = cast(%var_6743, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %31 = reshape(%29, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), float32] */;
  %32 = reshape(%30, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %33 = @func_3526(%31, %32) /* ty=(Tensor[(9, 8, 9), bool], Tensor[(156), float64], Tensor[(30), uint64], Tensor[(9, 8, 9), float32], Tensor[(12, 3, 3), float64], Tensor[(108), float64], Tensor[(2100), float32]) */;
  %34 = cast(%var_6754, dtype="float64") /* ty=Tensor[(132), float64] */;
  %35 = cast(%var_6755, dtype="float32") /* ty=Tensor[(180), float32] */;
  %36 = reshape(%34, newshape=[6, 2, 11]) /* ty=Tensor[(6, 2, 11), float64] */;
  %37 = reshape(%35, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
  %38 = @func_2942(%36, %37) /* ty=(Tensor[(6, 2, 11), float64], Tensor[(2, 10, 9), float32], Tensor[(180, 1), float32]) */;
  %39 = erf(%24) /* ty=Tensor[(4, 11, 4), float64] */;
  %40 = greater(%27, %28) /* ty=Tensor[(4, 11, 4), bool] */;
  %41 = %33.3;
  %42 = %38.1;
  (%39, %40, %41, meta[relay.Constant][2] /* ty=Tensor[(648), float32] */, %var_6743, %42, %var_6754, %var_6755)
}

def @func_3372(%var_3327: Tensor[(12, 3, 3), float64], %var_3334: Tensor[(2100), float32]) -> (Tensor[(14, 15, 10), float32], Tensor[(2100), float32], Tensor[(12, 3, 3), float64], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32]) {
  %43 = cast(%var_3334, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %44 = reshape(%43, newshape=[14, 15, 10]) /* ty=Tensor[(14, 15, 10), float32] */;
  %45 = cast(%var_3327, dtype="float64") /* ty=Tensor[(12, 3, 3), float64] */;
  %46 = asinh(%45) /* ty=Tensor[(12, 3, 3), float64] */;
  %47 = cast(%46, dtype="float64") /* ty=Tensor[(12, 3, 3), float64] */;
  %48 = cast(meta[relay.Constant][3] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %50 = reshape(%48, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %51 = reshape(%49, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %52 = @func_2796(%44) /* ty=Tensor[(14, 15, 10), float32] */;
  %53 = asin(%47) /* ty=Tensor[(12, 3, 3), float64] */;
  %54 = @func_1671(%50, %51) /* ty=Tensor[(3, 8, 15), uint32] */;
  (%52, %var_3334, %53, %54, meta[relay.Constant][3] /* ty=Tensor[(360), uint32] */)
}

def @func_5699(%var_5697: Tensor[(12, 5, 2), float64]) -> (Tensor[(12, 5, 2), float64],) {
  @func_5696(%var_5697) /* ty=(Tensor[(12, 5, 2), float64],) */
}

def @func_5599(%var_5597: Tensor[(9, 6, 1), float64]) -> (Tensor[(9, 6, 1), float64], Tensor[(9, 6, ?), bool]) {
  @func_5596(%var_5597) /* ty=(Tensor[(9, 6, 1), float64], Tensor[(9, 6, ?), bool]) */
}

def @func_2942(%var_2926: Tensor[(6, 2, 11), float64], %var_2933: Tensor[(180, 1), float32]) -> (Tensor[(6, 2, 11), float64], Tensor[(2, 10, 9), float32], Tensor[(180, 1), float32]) {
  %55 = cast(%var_2926, dtype="float64") /* ty=Tensor[(6, 2, 11), float64] */;
  %56 = cast(%var_2933, dtype="float32") /* ty=Tensor[(180, 1), float32] */;
  %57 = reshape(%56, newshape=[2, 10, 9]) /* ty=Tensor[(2, 10, 9), float32] */;
  %58 = atan(%55) /* ty=Tensor[(6, 2, 11), float64] */;
  %59 = @func_1329(%57) /* ty=Tensor[(2, 10, 9), float32] */;
  (%58, %59, %var_2933)
}

def @func_2796(%var_2792: Tensor[(14, 15, 10), float32]) -> Tensor[(14, 15, 10), float32] {
  %60 = cast(%var_2792, dtype="float32") /* ty=Tensor[(14, 15, 10), float32] */;
  atanh(%60) /* ty=Tensor[(14, 15, 10), float32] */
}

def @func_3680(%var_3678: Tensor[(13, 7, 13), int16], %var_3679: Tensor[(13, 7, 13), int16]) -> Tensor[(13, 7, 13), bool] {
  %65 = fn (%var_3668: Tensor[(13, 7, 13), int16], %var_3669: Tensor[(13, 7, 13), int16]) -> Tensor[(13, 7, 13), bool] {
    %61 = cast(%var_3669, dtype="bool") /* ty=Tensor[(13, 7, 13), bool] */;
    %62 = shape_of(%var_3668, dtype="int32") /* ty=Tensor[(3), int32] */;
    %63 = cast(%var_3668, dtype="bool") /* ty=Tensor[(13, 7, 13), bool] */;
    %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%63, %64) /* ty=Tensor[(13, 7, 13), bool] */
  };
  %65(%var_3678, %var_3679) /* ty=Tensor[(13, 7, 13), bool] */
}

def @func_4057(%var_4053: int16, %var_4054: Tensor[(1, 5, 9), int16], %var_4055: Tensor[(495), uint8], %var_4056: Tensor[(156), float64]) -> (Tensor[(495), uint8], Tensor[(11, 5, 9), bool], Tensor[(6, 2, 13), float32], Tensor[(156), float64]) {
  @func_4051(%var_4053, %var_4054, %var_4055, %var_4056) /* ty=(Tensor[(495), uint8], Tensor[(11, 5, 9), bool], Tensor[(6, 2, 13), float32], Tensor[(156), float64]) */
}

def @func_5696(%var_5681: Tensor[(12, 5, 2), float64]) -> (Tensor[(12, 5, 2), float64],) {
  %66 = cast(%var_5681, dtype="float64") /* ty=Tensor[(12, 5, 2), float64] */;
  %67 = cosh(%66) /* ty=Tensor[(12, 5, 2), float64] */;
  %68 = cast(%var_5681, dtype="float64") /* ty=Tensor[(12, 5, 2), float64] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%67, dtype="float64") /* ty=Tensor[(12, 5, 2), float64] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %72 = maximum(%70, %71) /* ty=Tensor[(12, 5, 2), float64] */;
  (%72,)
}

def @func_2335(%var_2333: Tensor[(10, 6, 3), int16], %var_2334: Tensor[(10, 6, 3), int16]) -> (Tensor[(10, 6, 3), int16], Tensor[(3, 8, 15), uint32], Tensor[(14, 52), float32]) {
  %82 = fn (%var_2288: Tensor[(10, 6, 3), int16], %var_2289: Tensor[(10, 6, 3), int16]) -> (Tensor[(10, 6, 3), int16], Tensor[(3, 8, 15), uint32], Tensor[(14, 52), float32]) {
    %73 = cast(%var_2289, dtype="int16") /* ty=Tensor[(10, 6, 3), int16] */;
    %74 = shape_of(%var_2288, dtype="int32") /* ty=Tensor[(3), int32] */;
    %75 = cast(%var_2288, dtype="int16") /* ty=Tensor[(10, 6, 3), int16] */;
    %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %77 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 52), float32] */, dtype="float32") /* ty=Tensor[(14, 52), float32] */;
    %78 = reshape(%77, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
    %79 = @func_1962(%78) /* ty=(Tensor[(4, 13, 14), float32], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32]) */;
    %80 = left_shift(%75, %76) /* ty=Tensor[(10, 6, 3), int16] */;
    %81 = %79.1;
    (%80, %81, meta[relay.Constant][4] /* ty=Tensor[(14, 52), float32] */)
  };
  %82(%var_2333, %var_2334) /* ty=(Tensor[(10, 6, 3), int16], Tensor[(3, 8, 15), uint32], Tensor[(14, 52), float32]) */
}

def @func_4533(%var_4531: Tensor[(12, 3, 4), float32], %var_4532: Tensor[(12, 3, 4), float32]) -> (Tensor[(12, 3, 4), float32], Tensor[(6, 4, 2), uint32], Tensor[(12, 4), uint32], Tensor[(12, 3, 4), float32]) {
  %96 = fn (%var_4513: Tensor[(12, 3, 4), float32], %var_4514: Tensor[(12, 3, 4), float32]) -> (Tensor[(12, 3, 4), float32], Tensor[(6, 4, 2), uint32], Tensor[(12, 4), uint32], Tensor[(12, 3, 4), float32]) {
    %83 = cast(%var_4514, dtype="float32") /* ty=Tensor[(12, 3, 4), float32] */;
    %84 = shape_of(%var_4513, dtype="int32") /* ty=Tensor[(3), int32] */;
    %85 = cast(%var_4513, dtype="float32") /* ty=Tensor[(12, 3, 4), float32] */;
    %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %87 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 4), uint32] */, dtype="uint32") /* ty=Tensor[(12, 4), uint32] */;
    %88 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 4), uint32] */, dtype="uint32") /* ty=Tensor[(12, 4), uint32] */;
    %89 = reshape(%87, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), uint32] */;
    %90 = reshape(%88, newshape=[6, 4, 2]) /* ty=Tensor[(6, 4, 2), uint32] */;
    %91 = @func_3810(%89, %90) /* ty=(Tensor[(6, 4, 2), uint32],) */;
    %92 = cast(%var_4514, dtype="float32") /* ty=Tensor[(12, 3, 4), float32] */;
    %93 = floor_mod(%85, %86) /* ty=Tensor[(12, 3, 4), float32] */;
    %94 = %91.0;
    %95 = asin(%92) /* ty=Tensor[(12, 3, 4), float32] */;
    (%93, %94, meta[relay.Constant][5] /* ty=Tensor[(12, 4), uint32] */, %95)
  };
  %96(%var_4531, %var_4532) /* ty=(Tensor[(12, 3, 4), float32], Tensor[(6, 4, 2), uint32], Tensor[(12, 4), uint32], Tensor[(12, 3, 4), float32]) */
}

def @func_540(%var_538: Tensor[(4, 8, 15), float32], %var_539: Tensor[(4, 8, 15), float32]) -> (Tensor[(4, 8, 15), float64], Tensor[(4, 8, 15), float64]) {
  @func_536(%var_538, %var_539) /* ty=(Tensor[(4, 8, 15), float64], Tensor[(4, 8, 15), float64]) */
}

def @func_255(%var_254: Tensor[(6, 2, 13), float64]) -> Tensor[(6, 2, 13), float32] {
  %105 = fn (%var_240: Tensor[(6, 2, 13), float64]) -> Tensor[(6, 2, 13), float32] {
    %97 = cast(%var_240, dtype="float64") /* ty=Tensor[(6, 2, 13), float64] */;
    %98 = log(%97) /* ty=Tensor[(6, 2, 13), float64] */;
    %99 = cast(%var_240, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
    %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
    %101 = cast(%98, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
    %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %103 = power(%101, %102) /* ty=Tensor[(6, 2, 13), float32] */;
    %104 = cast(%103, dtype="float32") /* ty=Tensor[(6, 2, 13), float32] */;
    atan(%104) /* ty=Tensor[(6, 2, 13), float32] */
  };
  %105(%var_254) /* ty=Tensor[(6, 2, 13), float32] */
}

def @func_7442() -> (Tensor[(8, 5, 6), float32], Tensor[(14, 15, 10), float32], Tensor[(2100), float32]) {
  %111 = fn () -> (Tensor[(8, 5, 6), float32], Tensor[(14, 15, 10), float32], Tensor[(2100), float32]) {
    %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(8, 5, 6), float32] */, dtype="float32") /* ty=Tensor[(8, 5, 6), float32] */;
    %107 = cast(meta[relay.Constant][7] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %108 = reshape(%107, newshape=[14, 15, 10]) /* ty=Tensor[(14, 15, 10), float32] */;
    %109 = sin(%106) /* ty=Tensor[(8, 5, 6), float32] */;
    %110 = @func_2796(%108) /* ty=Tensor[(14, 15, 10), float32] */;
    (%109, %110, meta[relay.Constant][7] /* ty=Tensor[(2100), float32] */)
  };
  %111() /* ty=(Tensor[(8, 5, 6), float32], Tensor[(14, 15, 10), float32], Tensor[(2100), float32]) */
}

def @func_3391(%var_3389: Tensor[(3, 2, 9), float32], %var_3390: Tensor[(3, 2, 9), float32]) -> Tensor[(3, 2, 9), float32] {
  %116 = fn (%var_3378: Tensor[(3, 2, 9), float32], %var_3379: Tensor[(3, 2, 9), float32]) -> Tensor[(3, 2, 9), float32] {
    %112 = cast(%var_3379, dtype="float32") /* ty=Tensor[(3, 2, 9), float32] */;
    %113 = shape_of(%var_3378, dtype="int32") /* ty=Tensor[(3), int32] */;
    %114 = cast(%var_3378, dtype="float32") /* ty=Tensor[(3, 2, 9), float32] */;
    %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%114, %115) /* ty=Tensor[(3, 2, 9), float32] */
  };
  %116(%var_3389, %var_3390) /* ty=Tensor[(3, 2, 9), float32] */
}

def @func_5942(%var_5940: Tensor[(16, 1, 5), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float32], Tensor[(16, ?, 5), bool]) {
  @func_5939(%var_5940) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float32], Tensor[(16, ?, 5), bool]) */
}

def @func_4479(%var_4475: Tensor[(6, 4, 16), uint16], %var_4476: Tensor[(11, 117), float32], %var_4477: Tensor[(4, 168), uint64], %var_4478: Tensor[(180), float32]) -> (Tensor[(6, 4, 16), bool], Tensor[(3, 60), float32], Tensor[(11, 117), float32], Tensor[(480), float32], Tensor[(4, 168), uint64], Tensor[(180), float32]) {
  @func_4473(%var_4475, %var_4476, %var_4477, %var_4478) /* ty=(Tensor[(6, 4, 16), bool], Tensor[(3, 60), float32], Tensor[(11, 117), float32], Tensor[(480), float32], Tensor[(4, 168), uint64], Tensor[(180), float32]) */
}

def @func_5371(%var_5370: Tensor[(11, 2, 12), float32]) -> (Tensor[(11, 2, 12), float64],) {
  %124 = fn (%var_5357: Tensor[(11, 2, 12), float32]) -> (Tensor[(11, 2, 12), float64],) {
    %117 = cast(%var_5357, dtype="float32") /* ty=Tensor[(11, 2, 12), float32] */;
    %118 = rsqrt(%117) /* ty=Tensor[(11, 2, 12), float32] */;
    %119 = cast(%var_5357, dtype="float64") /* ty=Tensor[(11, 2, 12), float64] */;
    %120 = shape_of(%118, dtype="int32") /* ty=Tensor[(3), int32] */;
    %121 = cast(%118, dtype="float64") /* ty=Tensor[(11, 2, 12), float64] */;
    %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %123 = subtract(%121, %122) /* ty=Tensor[(11, 2, 12), float64] */;
    (%123,)
  };
  %124(%var_5370) /* ty=(Tensor[(11, 2, 12), float64],) */
}

def @func_1597(%var_1593: Tensor[(9, 11, 13), float32], %var_1594: Tensor[(120, 4), float32], %var_1595: Tensor[(672), uint64], %var_1596: Tensor[(3, 60), float32]) -> (Tensor[(9, 11, 13), float32], Tensor[(4, 8, 15), float32], Tensor[(156), float64], Tensor[(672), uint64], Tensor[(156, 1), float64], Tensor[(4, 8, 15), bool], Tensor[(2, 10, 9), float32], Tensor[(3, 60), float32]) {
  %156 = fn (%var_1517: Tensor[(9, 11, 13), float32], %var_1541: Tensor[(120, 4), float32], %var_1557: Tensor[(672), uint64], %var_1589: Tensor[(3, 60), float32]) -> (Tensor[(9, 11, 13), float32], Tensor[(4, 8, 15), float32], Tensor[(156), float64], Tensor[(672), uint64], Tensor[(156, 1), float64], Tensor[(4, 8, 15), bool], Tensor[(2, 10, 9), float32], Tensor[(3, 60), float32]) {
    %125 = cast(%var_1517, dtype="float32") /* ty=Tensor[(9, 11, 13), float32] */;
    %126 = cast(%var_1541, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
    %127 = cast(%var_1541, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
    %128 = reshape(%126, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
    %129 = reshape(%127, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
    %130 = @func_536(%128, %129) /* ty=(Tensor[(4, 8, 15), float64], Tensor[(4, 8, 15), float64]) */;
    %131 = %130.1;
    %132 = cast(%var_1541, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
    %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
    %134 = cast(%131, dtype="float32") /* ty=Tensor[(4, 8, 15), float32] */;
    %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %136 = cast(%var_1557, dtype="uint64") /* ty=Tensor[(672), uint64] */;
    %137 = cast(%var_1557, dtype="uint64") /* ty=Tensor[(672), uint64] */;
    %138 = cast(%var_1557, dtype="uint64") /* ty=Tensor[(672), uint64] */;
    %139 = cast(meta[relay.Constant][8] /* ty=Tensor[(156, 1), float64] */, dtype="float64") /* ty=Tensor[(156, 1), float64] */;
    %140 = reshape(%136, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), uint64] */;
    %141 = reshape(%137, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), uint64] */;
    %142 = reshape(%138, newshape=[8, 6, 14]) /* ty=Tensor[(8, 6, 14), uint64] */;
    %143 = reshape(%139, newshape=[156]) /* ty=Tensor[(156), float64] */;
    %144 = @func_1210(%140, %141, %142, %143) /* ty=(Tensor[(8, 6, 14), uint64], Tensor[(8, 6, 14), float32], Tensor[(8, 6, 14), int16], Tensor[(6, 2, 13), float32], Tensor[(156), float64], Tensor[(6, 2, 13), float32]) */;
    %145 = cast(%var_1541, dtype="bool") /* ty=Tensor[(120, 4), bool] */;
    %146 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
    %147 = cast(%131, dtype="bool") /* ty=Tensor[(4, 8, 15), bool] */;
    %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %149 = cast(%var_1589, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
    %150 = reshape(%149, newshape=[2, 10, 9]) /* ty=Tensor[(2, 10, 9), float32] */;
    %151 = asin(%125) /* ty=Tensor[(9, 11, 13), float32] */;
    %152 = multiply(%134, %135) /* ty=Tensor[(4, 8, 15), float32] */;
    %153 = %144.4;
    %154 = less(%147, %148) /* ty=Tensor[(4, 8, 15), bool] */;
    %155 = @func_1329(%150) /* ty=Tensor[(2, 10, 9), float32] */;
    (%151, %152, %153, %var_1557, meta[relay.Constant][8] /* ty=Tensor[(156, 1), float64] */, %154, %155, %var_1589)
  };
  %156(%var_1593, %var_1594, %var_1595, %var_1596) /* ty=(Tensor[(9, 11, 13), float32], Tensor[(4, 8, 15), float32], Tensor[(156), float64], Tensor[(672), uint64], Tensor[(156, 1), float64], Tensor[(4, 8, 15), bool], Tensor[(2, 10, 9), float32], Tensor[(3, 60), float32]) */
}

def @func_6200(%var_6198: Tensor[(1, 7, 13), float32], %var_6199: Tensor[(4, 20), float64]) -> (Tensor[(16, 1, 5), float32], Tensor[(4, 20), float64], Tensor[(?, 7, 13), bool], Tensor[(1, 7, 13), float32]) {
  %175 = fn (%var_6158: Tensor[(1, 7, 13), float32], %var_6170: Tensor[(4, 20), float64]) -> (Tensor[(16, 1, 5), float32], Tensor[(4, 20), float64], Tensor[(?, 7, 13), bool], Tensor[(1, 7, 13), float32]) {
    %157 = cast(%var_6170, dtype="float64") /* ty=Tensor[(4, 20), float64] */;
    %158 = reshape(%157, newshape=[16, 1, 5]) /* ty=Tensor[(16, 1, 5), float64] */;
    %159 = @func_5939(%158) /* ty=(Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float32], Tensor[(16, ?, 5), bool]) */;
    %160 = cast(%var_6158, dtype="float32") /* ty=Tensor[(1, 7, 13), float32] */;
    %161 = sinh(%160) /* ty=Tensor[(1, 7, 13), float32] */;
    %162 = cast(%var_6158, dtype="int64") /* ty=Tensor[(1, 7, 13), int64] */;
    %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(3), int32] */;
    %164 = cast(%161, dtype="int64") /* ty=Tensor[(1, 7, 13), int64] */;
    %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %166 = multiply(%164, %165) /* ty=Tensor[(?, 7, 13), int64] */;
    %167 = cast(%var_6158, dtype="bool") /* ty=Tensor[(1, 7, 13), bool] */;
    %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(3), int32] */;
    %169 = cast(%166, dtype="bool") /* ty=Tensor[(?, 7, 13), bool] */;
    %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %171 = cast(%161, dtype="float32") /* ty=Tensor[(1, 7, 13), float32] */;
    %172 = %159.1;
    %173 = not_equal(%169, %170) /* ty=Tensor[(?, 7, 13), bool] */;
    %174 = erf(%171) /* ty=Tensor[(1, 7, 13), float32] */;
    (%172, %var_6170, %173, %174)
  };
  %175(%var_6198, %var_6199) /* ty=(Tensor[(16, 1, 5), float32], Tensor[(4, 20), float64], Tensor[(?, 7, 13), bool], Tensor[(1, 7, 13), float32]) */
}

def @func_2623(%var_2619: Tensor[(1, 1287), float32], %var_2620: Tensor[(480), float32], %var_2621: Tensor[(672), uint64], %var_2622: Tensor[(180), float32]) -> (Tensor[(8, 8, 2), float64], Tensor[(156, 1), float64], Tensor[(1, 1287), float32], Tensor[(480), float32], Tensor[(672), uint64], Tensor[(180), float32]) {
  %188 = fn (%var_2611: Tensor[(1, 1287), float32], %var_2612: Tensor[(480), float32], %var_2613: Tensor[(672), uint64], %var_2614: Tensor[(180), float32]) -> (Tensor[(8, 8, 2), float64], Tensor[(156, 1), float64], Tensor[(1, 1287), float32], Tensor[(480), float32], Tensor[(672), uint64], Tensor[(180), float32]) {
    %176 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 8, 2), float64] */, dtype="float64") /* ty=Tensor[(8, 8, 2), float64] */;
    %177 = cast(%var_2611, dtype="float32") /* ty=Tensor[(1, 1287), float32] */;
    %178 = cast(%var_2612, dtype="float32") /* ty=Tensor[(480), float32] */;
    %179 = cast(%var_2613, dtype="uint64") /* ty=Tensor[(672), uint64] */;
    %180 = cast(%var_2614, dtype="float32") /* ty=Tensor[(180), float32] */;
    %181 = reshape(%177, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
    %182 = reshape(%178, newshape=[120, 4]) /* ty=Tensor[(120, 4), float32] */;
    %183 = reshape(%179, newshape=[672]) /* ty=Tensor[(672), uint64] */;
    %184 = reshape(%180, newshape=[3, 60]) /* ty=Tensor[(3, 60), float32] */;
    %185 = @func_1592(%181, %182, %183, %184) /* ty=(Tensor[(9, 11, 13), float32], Tensor[(4, 8, 15), float32], Tensor[(156), float64], Tensor[(672), uint64], Tensor[(156, 1), float64], Tensor[(4, 8, 15), bool], Tensor[(2, 10, 9), float32], Tensor[(3, 60), float32]) */;
    %186 = asin(%176) /* ty=Tensor[(8, 8, 2), float64] */;
    %187 = %185.4;
    (%186, %187, %var_2611, %var_2612, %var_2613, %var_2614)
  };
  %188(%var_2619, %var_2620, %var_2621, %var_2622) /* ty=(Tensor[(8, 8, 2), float64], Tensor[(156, 1), float64], Tensor[(1, 1287), float32], Tensor[(480), float32], Tensor[(672), uint64], Tensor[(180), float32]) */
}

def @func_6899(%var_6898: uint64) -> Tensor[(7, 3, 12), bool] {
  %191 = fn (%var_6886: uint64) -> Tensor[(7, 3, 12), bool] {
    %189 = cast(%var_6886, dtype="bool") /* ty=bool */;
    %190 = cast(meta[relay.Constant][10] /* ty=Tensor[(7, 3, 12), uint64] */, dtype="bool") /* ty=Tensor[(7, 3, 12), bool] */;
    greater(%189, %190) /* ty=Tensor[(7, 3, 12), bool] */
  };
  %191(%var_6898) /* ty=Tensor[(7, 3, 12), bool] */
}

def @func_3913(%var_3896: Tensor[(11, 4, 2), float32], %var_3903: Tensor[(132), float64], %var_3904: Tensor[(180), float32]) -> (Tensor[(6, 2, 11), float64], Tensor[(132), float64], Tensor[(180), float32], Tensor[(11, 4, 2), float32]) {
  %192 = cast(%var_3903, dtype="float64") /* ty=Tensor[(132), float64] */;
  %193 = cast(%var_3904, dtype="float32") /* ty=Tensor[(180), float32] */;
  %194 = reshape(%192, newshape=[6, 2, 11]) /* ty=Tensor[(6, 2, 11), float64] */;
  %195 = reshape(%193, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
  %196 = @func_2942(%194, %195) /* ty=(Tensor[(6, 2, 11), float64], Tensor[(2, 10, 9), float32], Tensor[(180, 1), float32]) */;
  %197 = cast(%var_3896, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %198 = asin(%197) /* ty=Tensor[(11, 4, 2), float32] */;
  %199 = cast(%var_3896, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%198, dtype="bool") /* ty=Tensor[(11, 4, 2), bool] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %203 = greater_equal(%201, %202) /* ty=Tensor[(11, 4, 2), bool] */;
  %204 = cast(%203, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %205 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%198, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %208 = %196.0;
  %209 = mod(%206, %207) /* ty=Tensor[(11, 4, 2), float32] */;
  (%208, %var_3903, %var_3904, %209)
}

def @func_6416(%var_6341: Tensor[(6, 12, 2), float64], %var_6351: Tensor[(1287), float32], %var_6361: Tensor[(360), uint32], %var_6381: Tensor[(40, 12), bool]) -> (Tensor[(6, 12, 2), float64], Tensor[(11, 5, 9), float32], Tensor[(495), uint8], Tensor[(1287), float32], Tensor[(2, 336), uint64], Tensor[(180), float32], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32], Tensor[(15, 15, 3), uint16], Tensor[(675), float64], Tensor[(40, 12), float32], Tensor[(3, 8, 15), uint32], Tensor[(180, 1), float32], Tensor[(132), float64], Tensor[(4, 8, 15), float32]) {
  %210 = cast(%var_6341, dtype="float64") /* ty=Tensor[(6, 12, 2), float64] */;
  %211 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(6, 12, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 12, 2), float64] */, dtype="float64") /* ty=Tensor[(6, 12, 2), float64] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %214 = cast(meta[relay.Constant][12] /* ty=Tensor[(495), uint8] */, dtype="uint8") /* ty=Tensor[(495), uint8] */;
  %215 = cast(meta[relay.Constant][12] /* ty=Tensor[(495), uint8] */, dtype="uint8") /* ty=Tensor[(495), uint8] */;
  %216 = reshape(%214, newshape=[11, 5, 9]) /* ty=Tensor[(11, 5, 9), uint8] */;
  %217 = reshape(%215, newshape=[11, 5, 9]) /* ty=Tensor[(11, 5, 9), uint8] */;
  %218 = cast(%var_6361, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %219 = cast(%var_6361, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %220 = reshape(%218, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %221 = reshape(%219, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %222 = cast(meta[relay.Constant][15] /* ty=Tensor[(675), float64] */, dtype="float64") /* ty=Tensor[(675), float64] */;
  %223 = reshape(%222, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %224 = @func_5866(%223) /* ty=(Tensor[(15, 15, 3), uint16], Tensor[(15, 15, 3), bool]) */;
  %225 = cast(%var_6351, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %226 = cast(meta[relay.Constant][16] /* ty=Tensor[(40, 12), float32] */, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %227 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 336), uint64] */, dtype="uint64") /* ty=Tensor[(2, 336), uint64] */;
  %228 = cast(meta[relay.Constant][14] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %229 = reshape(%225, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %230 = reshape(%226, newshape=[120, 4]) /* ty=Tensor[(120, 4), float32] */;
  %231 = reshape(%227, newshape=[672]) /* ty=Tensor[(672), uint64] */;
  %232 = reshape(%228, newshape=[3, 60]) /* ty=Tensor[(3, 60), float32] */;
  %233 = @func_1592(%229, %230, %231, %232) /* ty=(Tensor[(9, 11, 13), float32], Tensor[(4, 8, 15), float32], Tensor[(156), float64], Tensor[(672), uint64], Tensor[(156, 1), float64], Tensor[(4, 8, 15), bool], Tensor[(2, 10, 9), float32], Tensor[(3, 60), float32]) */;
  %234 = %233.1;
  %235 = cast(%234, dtype="bool") /* ty=Tensor[(4, 8, 15), bool] */;
  %236 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(40, 12), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %237 = cast(meta[relay.Constant][16] /* ty=Tensor[(40, 12), float32] */, dtype="bool") /* ty=Tensor[(40, 12), bool] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %239 = greater(%237, %238) /* ty=Tensor[(40, 12), bool] */;
  %240 = cast(%var_6381, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(2), int32] */;
  %242 = cast(%239, dtype="float32") /* ty=Tensor[(40, 12), float32] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %244 = @func_1671(%220, %221) /* ty=Tensor[(3, 8, 15), uint32] */;
  %245 = cast(%244, dtype="uint32") /* ty=Tensor[(3, 8, 15), uint32] */;
  %246 = cast(%var_6361, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %247 = reshape(%245, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %248 = reshape(%246, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %249 = cast(meta[relay.Constant][17] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %250 = cast(meta[relay.Constant][14] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %251 = reshape(%249, newshape=[6, 2, 11]) /* ty=Tensor[(6, 2, 11), float64] */;
  %252 = reshape(%250, newshape=[180, 1]) /* ty=Tensor[(180, 1), float32] */;
  %253 = @func_2942(%251, %252) /* ty=(Tensor[(6, 2, 11), float64], Tensor[(2, 10, 9), float32], Tensor[(180, 1), float32]) */;
  %254 = cast(%234, dtype="float32") /* ty=Tensor[(4, 8, 15), float32] */;
  %255 = divide(%212, %213) /* ty=Tensor[(6, 12, 2), float64] */;
  %256 = @func_3027(%216, %217) /* ty=Tensor[(11, 5, 9), float32] */;
  %257 = %224.0;
  %258 = power(%242, %243) /* ty=Tensor[(40, 12), float32] */;
  %259 = @func_1671(%247, %248) /* ty=Tensor[(3, 8, 15), uint32] */;
  %260 = %253.2;
  %261 = cosh(%254) /* ty=Tensor[(4, 8, 15), float32] */;
  (%255, %256, meta[relay.Constant][12] /* ty=Tensor[(495), uint8] */, %var_6351, meta[relay.Constant][13] /* ty=Tensor[(2, 336), uint64] */, meta[relay.Constant][14] /* ty=Tensor[(180), float32] */, %244, %var_6361, %257, meta[relay.Constant][15] /* ty=Tensor[(675), float64] */, %258, %259, %260, meta[relay.Constant][17] /* ty=Tensor[(132), float64] */, %261)
}

def @func_7594() -> (Tensor[(8, 5, 6), float32],) {
  %264 = fn () -> (Tensor[(8, 5, 6), float32],) {
    %262 = @func_7441() /* ty=(Tensor[(8, 5, 6), float32], Tensor[(14, 15, 10), float32], Tensor[(2100), float32]) */;
    %263 = %262.0;
    (%263,)
  };
  %264() /* ty=(Tensor[(8, 5, 6), float32],) */
}

def @func_5939(%var_5917: Tensor[(16, 1, 5), float64]) -> (Tensor[(16, 1, 5), float64], Tensor[(16, 1, 5), float32], Tensor[(16, ?, 5), bool]) {
  %265 = cast(%var_5917, dtype="float64") /* ty=Tensor[(16, 1, 5), float64] */;
  %266 = cast(%var_5917, dtype="float32") /* ty=Tensor[(16, 1, 5), float32] */;
  %267 = cast(meta[relay.Constant][18] /* ty=Tensor[(16, 1, 5), float64] */, dtype="bool") /* ty=Tensor[(16, 1, 5), bool] */;
  %268 = shape_of(%var_5917, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%var_5917, dtype="bool") /* ty=Tensor[(16, 1, 5), bool] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %271 = atan(%265) /* ty=Tensor[(16, 1, 5), float64] */;
  %272 = sigmoid(%266) /* ty=Tensor[(16, 1, 5), float32] */;
  %273 = less_equal(%269, %270) /* ty=Tensor[(16, ?, 5), bool] */;
  (%271, %272, %273)
}

def @func_1215(%var_1211: Tensor[(8, 6, 14), uint64], %var_1212: Tensor[(8, 6, 14), uint64], %var_1213: Tensor[(8, 6, 14), uint64], %var_1214: Tensor[(156), float64]) -> (Tensor[(8, 6, 14), uint64], Tensor[(8, 6, 14), float32], Tensor[(8, 6, 14), int16], Tensor[(6, 2, 13), float32], Tensor[(156), float64], Tensor[(6, 2, 13), float32]) {
  %299 = fn (%var_1169: Tensor[(8, 6, 14), uint64], %var_1170: Tensor[(8, 6, 14), uint64], %var_1174: Tensor[(8, 6, 14), uint64], %var_1195: Tensor[(156), float64]) -> (Tensor[(8, 6, 14), uint64], Tensor[(8, 6, 14), float32], Tensor[(8, 6, 14), int16], Tensor[(6, 2, 13), float32], Tensor[(156), float64], Tensor[(6, 2, 13), float32]) {
    %274 = cast(%var_1170, dtype="uint64") /* ty=Tensor[(8, 6, 14), uint64] */;
    %275 = shape_of(%var_1169, dtype="int32") /* ty=Tensor[(3), int32] */;
    %276 = cast(%var_1169, dtype="uint64") /* ty=Tensor[(8, 6, 14), uint64] */;
    %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %278 = cast(%var_1174, dtype="float32") /* ty=Tensor[(8, 6, 14), float32] */;
    %279 = atan(%278) /* ty=Tensor[(8, 6, 14), float32] */;
    %280 = cast(%279, dtype="float32") /* ty=Tensor[(8, 6, 14), float32] */;
    %281 = cast(%var_1174, dtype="float32") /* ty=Tensor[(8, 6, 14), float32] */;
    %282 = shape_of(%var_1169, dtype="int32") /* ty=Tensor[(3), int32] */;
    %283 = cast(%var_1169, dtype="float32") /* ty=Tensor[(8, 6, 14), float32] */;
    %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %285 = divide(%283, %284) /* ty=Tensor[(8, 6, 14), float32] */;
    %286 = cast(%285, dtype="int16") /* ty=Tensor[(8, 6, 14), int16] */;
    %287 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
    %288 = cast(%279, dtype="int16") /* ty=Tensor[(8, 6, 14), int16] */;
    %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %290 = cast(%var_1195, dtype="float64") /* ty=Tensor[(156), float64] */;
    %291 = reshape(%290, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float64] */;
    %292 = cast(%var_1195, dtype="float64") /* ty=Tensor[(156), float64] */;
    %293 = reshape(%292, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float64] */;
    %294 = right_shift(%276, %277) /* ty=Tensor[(8, 6, 14), uint64] */;
    %295 = tan(%280) /* ty=Tensor[(8, 6, 14), float32] */;
    %296 = bitwise_and(%288, %289) /* ty=Tensor[(8, 6, 14), int16] */;
    %297 = @func_253(%291) /* ty=Tensor[(6, 2, 13), float32] */;
    %298 = @func_253(%293) /* ty=Tensor[(6, 2, 13), float32] */;
    (%294, %295, %296, %297, %var_1195, %298)
  };
  %299(%var_1211, %var_1212, %var_1213, %var_1214) /* ty=(Tensor[(8, 6, 14), uint64], Tensor[(8, 6, 14), float32], Tensor[(8, 6, 14), int16], Tensor[(6, 2, 13), float32], Tensor[(156), float64], Tensor[(6, 2, 13), float32]) */
}

def @func_1331(%var_1330: Tensor[(2, 10, 9), float32]) -> Tensor[(2, 10, 9), float32] {
  %301 = fn (%var_1325: Tensor[(2, 10, 9), float32]) -> Tensor[(2, 10, 9), float32] {
    %300 = cast(%var_1325, dtype="float32") /* ty=Tensor[(2, 10, 9), float32] */;
    log(%300) /* ty=Tensor[(2, 10, 9), float32] */
  };
  %301(%var_1330) /* ty=Tensor[(2, 10, 9), float32] */
}

def @func_2946(%var_2944: Tensor[(6, 2, 11), float64], %var_2945: Tensor[(180, 1), float32]) -> (Tensor[(6, 2, 11), float64], Tensor[(2, 10, 9), float32], Tensor[(180, 1), float32]) {
  @func_2942(%var_2944, %var_2945) /* ty=(Tensor[(6, 2, 11), float64], Tensor[(2, 10, 9), float32], Tensor[(180, 1), float32]) */
}

def @func_3209(%var_3207: Tensor[(13, 1), bool], %var_3208: Tensor[(13, 1), bool]) -> (Tensor[(13, ?), bool],) {
  %312 = fn (%var_3176: Tensor[(13, 1), bool], %var_3177: Tensor[(13, 1), bool]) -> (Tensor[(13, ?), bool],) {
    %302 = cast(%var_3177, dtype="bool") /* ty=Tensor[(13, 1), bool] */;
    %303 = shape_of(%var_3176, dtype="int32") /* ty=Tensor[(2), int32] */;
    %304 = cast(%var_3176, dtype="bool") /* ty=Tensor[(13, 1), bool] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %306 = logical_or(%304, %305) /* ty=Tensor[(13, ?), bool] */;
    %307 = cast(%var_3177, dtype="bool") /* ty=Tensor[(13, 1), bool] */;
    %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(2), int32] */;
    %309 = cast(%306, dtype="bool") /* ty=Tensor[(13, ?), bool] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %311 = less(%309, %310) /* ty=Tensor[(13, ?), bool] */;
    (%311,)
  };
  %312(%var_3207, %var_3208) /* ty=(Tensor[(13, ?), bool],) */
}

def @func_1675(%var_1673: Tensor[(3, 8, 15), uint32], %var_1674: Tensor[(3, 8, 15), uint32]) -> Tensor[(3, 8, 15), uint32] {
  @func_1671(%var_1673, %var_1674) /* ty=Tensor[(3, 8, 15), uint32] */
}

def @func_2357(%var_2356: Tensor[(14, 8, 14), float64]) -> (Tensor[(14, 8, 14), float64],) {
  %315 = fn (%var_2342: Tensor[(14, 8, 14), float64]) -> (Tensor[(14, 8, 14), float64],) {
    %313 = cast(%var_2342, dtype="float64") /* ty=Tensor[(14, 8, 14), float64] */;
    %314 = rsqrt(%313) /* ty=Tensor[(14, 8, 14), float64] */;
    (%314,)
  };
  %315(%var_2356) /* ty=(Tensor[(14, 8, 14), float64],) */
}

def @func_4051(%var_4027: int16, %var_4028: Tensor[(1, 5, 9), int16], %var_4037: Tensor[(495), uint8], %var_4046: Tensor[(156), float64]) -> (Tensor[(495), uint8], Tensor[(11, 5, 9), bool], Tensor[(6, 2, 13), float32], Tensor[(156), float64]) {
  %316 = cast(%var_4037, dtype="uint8") /* ty=Tensor[(495), uint8] */;
  %317 = cast(%var_4037, dtype="uint8") /* ty=Tensor[(495), uint8] */;
  %318 = reshape(%316, newshape=[11, 5, 9]) /* ty=Tensor[(11, 5, 9), uint8] */;
  %319 = reshape(%317, newshape=[11, 5, 9]) /* ty=Tensor[(11, 5, 9), uint8] */;
  %320 = @func_3027(%318, %319) /* ty=Tensor[(11, 5, 9), float32] */;
  %321 = cast(%var_4027, dtype="int16") /* ty=int16 */;
  %322 = cast(%var_4028, dtype="int16") /* ty=Tensor[(1, 5, 9), int16] */;
  %323 = subtract(%321, %322) /* ty=Tensor[(1, 5, 9), int16] */;
  %324 = cast(%320, dtype="bool") /* ty=Tensor[(11, 5, 9), bool] */;
  %325 = cast(%323, dtype="bool") /* ty=Tensor[(1, 5, 9), bool] */;
  %326 = cast(%var_4046, dtype="float64") /* ty=Tensor[(156), float64] */;
  %327 = reshape(%326, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float64] */;
  %328 = greater(%324, %325) /* ty=Tensor[(11, 5, 9), bool] */;
  %329 = @func_253(%327) /* ty=Tensor[(6, 2, 13), float32] */;
  (%var_4037, %328, %329, %var_4046)
}

def @func_4877(%var_4808: float32, %var_4809: Tensor[(1, 6, 2), float32], %var_4820: Tensor[(1287, 1), float32], %var_4822: Tensor[(672), uint64], %var_4823: Tensor[(180), float32]) -> (Tensor[(1, 6, 2), float32], Tensor[(2, 10, 9), float32], Tensor[(1287, 1), float32], Tensor[(120, 4), float32], Tensor[(672), uint64], Tensor[(180), float32], Tensor[(108), float64], Tensor[(648), float32], Tensor[(2100), float32], Tensor[(672), uint64], Tensor[(1, 6, 2), bool], Tensor[(1, 6, 2), float32]) {
  %330 = cast(%var_4808, dtype="float32") /* ty=float32 */;
  %331 = cast(%var_4809, dtype="float32") /* ty=Tensor[(1, 6, 2), float32] */;
  %332 = cast(%var_4820, dtype="float32") /* ty=Tensor[(1287, 1), float32] */;
  %333 = cast(meta[relay.Constant][19] /* ty=Tensor[(120, 4), float32] */, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %334 = cast(%var_4822, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %335 = cast(%var_4823, dtype="float32") /* ty=Tensor[(180), float32] */;
  %336 = reshape(%332, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %337 = reshape(%333, newshape=[120, 4]) /* ty=Tensor[(120, 4), float32] */;
  %338 = reshape(%334, newshape=[672]) /* ty=Tensor[(672), uint64] */;
  %339 = reshape(%335, newshape=[3, 60]) /* ty=Tensor[(3, 60), float32] */;
  %340 = @func_1592(%336, %337, %338, %339) /* ty=(Tensor[(9, 11, 13), float32], Tensor[(4, 8, 15), float32], Tensor[(156), float64], Tensor[(672), uint64], Tensor[(156, 1), float64], Tensor[(4, 8, 15), bool], Tensor[(2, 10, 9), float32], Tensor[(3, 60), float32]) */;
  %341 = cast(meta[relay.Constant][20] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %342 = cast(meta[relay.Constant][21] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %343 = reshape(%341, newshape=[9, 8, 9]) /* ty=Tensor[(9, 8, 9), float32] */;
  %344 = reshape(%342, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %345 = @func_3526(%343, %344) /* ty=(Tensor[(9, 8, 9), bool], Tensor[(156), float64], Tensor[(30), uint64], Tensor[(9, 8, 9), float32], Tensor[(12, 3, 3), float64], Tensor[(108), float64], Tensor[(2100), float32]) */;
  %346 = cast(%var_4820, dtype="float32") /* ty=Tensor[(1287, 1), float32] */;
  %347 = cast(meta[relay.Constant][19] /* ty=Tensor[(120, 4), float32] */, dtype="float32") /* ty=Tensor[(120, 4), float32] */;
  %348 = cast(%var_4822, dtype="uint64") /* ty=Tensor[(672), uint64] */;
  %349 = cast(%var_4823, dtype="float32") /* ty=Tensor[(180), float32] */;
  %350 = reshape(%346, newshape=[1, 1287]) /* ty=Tensor[(1, 1287), float32] */;
  %351 = reshape(%347, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %352 = reshape(%348, newshape=[672]) /* ty=Tensor[(672), uint64] */;
  %353 = reshape(%349, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %354 = @func_2618(%350, %351, %352, %353) /* ty=(Tensor[(8, 8, 2), float64], Tensor[(156, 1), float64], Tensor[(1, 1287), float32], Tensor[(480), float32], Tensor[(672), uint64], Tensor[(180), float32]) */;
  %355 = cast(%var_4809, dtype="bool") /* ty=Tensor[(1, 6, 2), bool] */;
  %356 = cast(%var_4808, dtype="bool") /* ty=bool */;
  %357 = cast(%var_4809, dtype="float32") /* ty=Tensor[(1, 6, 2), float32] */;
  %358 = divide(%330, %331) /* ty=Tensor[(1, 6, 2), float32] */;
  %359 = %340.6;
  %360 = %345.5;
  %361 = %354.4;
  %362 = logical_or(%355, %356) /* ty=Tensor[(1, 6, 2), bool] */;
  %363 = asinh(%357) /* ty=Tensor[(1, 6, 2), float32] */;
  (%358, %359, %var_4820, meta[relay.Constant][19] /* ty=Tensor[(120, 4), float32] */, %var_4822, %var_4823, %360, meta[relay.Constant][20] /* ty=Tensor[(648), float32] */, meta[relay.Constant][21] /* ty=Tensor[(2100), float32] */, %361, %362, %363)
}

def @func_7588() -> (Tensor[(14, 15, 10), float32],) {
  %365 = fn () -> (Tensor[(14, 15, 10), float32],) {
    %364 = @func_7473() /* ty=Tensor[(14, 15, 10), float32] */;
    (%364,)
  };
  %365() /* ty=(Tensor[(14, 15, 10), float32],) */
}

def @func_5866(%var_5852: Tensor[(15, 15, 3), float64]) -> (Tensor[(15, 15, 3), uint16], Tensor[(15, 15, 3), bool]) {
  %366 = cast(%var_5852, dtype="float64") /* ty=Tensor[(15, 15, 3), float64] */;
  %367 = rsqrt(%366) /* ty=Tensor[(15, 15, 3), float64] */;
  %368 = cast(%var_5852, dtype="uint16") /* ty=Tensor[(15, 15, 3), uint16] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="uint16") /* ty=Tensor[(15, 15, 3), uint16] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %372 = cast(%367, dtype="bool") /* ty=Tensor[(15, 15, 3), bool] */;
  %373 = shape_of(%var_5852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%var_5852, dtype="bool") /* ty=Tensor[(15, 15, 3), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = bitwise_xor(%370, %371) /* ty=Tensor[(15, 15, 3), uint16] */;
  %377 = greater_equal(%374, %375) /* ty=Tensor[(15, 15, 3), bool] */;
  (%376, %377)
}

def @func_536(%var_508: Tensor[(4, 8, 15), float32], %var_514: Tensor[(4, 8, 15), float32]) -> (Tensor[(4, 8, 15), float64], Tensor[(4, 8, 15), float64]) {
  %378 = cast(%var_508, dtype="float32") /* ty=Tensor[(4, 8, 15), float32] */;
  %379 = log10(%378) /* ty=Tensor[(4, 8, 15), float32] */;
  %380 = cast(%var_514, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%379, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %384 = cast(%var_514, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
  %385 = floor_mod(%382, %383) /* ty=Tensor[(4, 8, 15), float64] */;
  %386 = sigmoid(%384) /* ty=Tensor[(4, 8, 15), float64] */;
  (%385, %386)
}

def @main(%var_7656: Tensor[(176), float64], %var_7657: Tensor[(66, 2), float64], %var_7658: Tensor[(180), float32], %var_7666: Tensor[(66, 2), float64]) -> (Tensor[(14, 15, 10), float32], Tensor[(14, 15, 10), float32], Tensor[(648), float32], Tensor[(176), float64], Tensor[(180), float32], Tensor[(156), float64], Tensor[(30), uint64], Tensor[(66, 2), uint8], Tensor[(8, 5, 6), float32], Tensor[(66, 2), float32]) {
  %387 = @func_7442() /* ty=(Tensor[(8, 5, 6), float32], Tensor[(14, 15, 10), float32], Tensor[(2100), float32]) */;
  %388 = cast(%var_7656, dtype="float64") /* ty=Tensor[(176), float64] */;
  %389 = cast(%var_7656, dtype="float64") /* ty=Tensor[(176), float64] */;
  %390 = @func_7473() /* ty=Tensor[(14, 15, 10), float32] */;
  %391 = cast(%390, dtype="float32") /* ty=Tensor[(14, 15, 10), float32] */;
  %392 = cast(%var_7657, dtype="float64") /* ty=Tensor[(66, 2), float64] */;
  %393 = cast(%var_7658, dtype="float32") /* ty=Tensor[(180), float32] */;
  %394 = reshape(%388, newshape=[4, 11, 4]) /* ty=Tensor[(4, 11, 4), float64] */;
  %395 = reshape(%389, newshape=[4, 11, 4]) /* ty=Tensor[(4, 11, 4), float64] */;
  %396 = reshape(%391, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %397 = reshape(%392, newshape=[132]) /* ty=Tensor[(132), float64] */;
  %398 = reshape(%393, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %399 = @func_6770(%394, %395, %396, %397, %398) /* ty=(Tensor[(4, 11, 4), float64], Tensor[(4, 11, 4), bool], Tensor[(9, 8, 9), float32], Tensor[(648), float32], Tensor[(2100), float32], Tensor[(2, 10, 9), float32], Tensor[(132), float64], Tensor[(180), float32]) */;
  %400 = cast(meta[relay.Constant][22] /* ty=Tensor[(30), uint64] */, dtype="uint64") /* ty=Tensor[(30), uint64] */;
  %401 = reshape(%400, newshape=[5, 6, 1]) /* ty=Tensor[(5, 6, 1), uint64] */;
  %402 = @func_3060(%401) /* ty=(Tensor[(5, 6, 1), bool], Tensor[(156), float64], Tensor[(720), uint64]) */;
  %403 = cast(%var_7666, dtype="uint8") /* ty=Tensor[(66, 2), uint8] */;
  %404 = shape_of(%var_7657, dtype="int32") /* ty=Tensor[(2), int32] */;
  %405 = cast(%var_7657, dtype="uint8") /* ty=Tensor[(66, 2), uint8] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %407 = @func_7594() /* ty=(Tensor[(8, 5, 6), float32],) */;
  %408 = cast(%var_7657, dtype="float32") /* ty=Tensor[(66, 2), float32] */;
  %409 = shape_of(%var_7666, dtype="int32") /* ty=Tensor[(2), int32] */;
  %410 = cast(%var_7666, dtype="float32") /* ty=Tensor[(66, 2), float32] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %412 = %387.1;
  %413 = @func_7473() /* ty=Tensor[(14, 15, 10), float32] */;
  %414 = %399.3;
  %415 = %402.1;
  %416 = bitwise_or(%405, %406) /* ty=Tensor[(66, 2), uint8] */;
  %417 = %407.0;
  %418 = floor_mod(%410, %411) /* ty=Tensor[(66, 2), float32] */;
  (%412, %413, %414, %var_7656, %var_7658, %415, meta[relay.Constant][22] /* ty=Tensor[(30), uint64] */, %416, %417, %418)
}

def @func_7542() -> Tensor[(14, 15, 10), float64] {
  %421 = fn () -> Tensor[(14, 15, 10), float64] {
    %419 = @func_7473() /* ty=Tensor[(14, 15, 10), float32] */;
    %420 = cast(%419, dtype="float64") /* ty=Tensor[(14, 15, 10), float64] */;
    log(%420) /* ty=Tensor[(14, 15, 10), float64] */
  };
  %421() /* ty=Tensor[(14, 15, 10), float64] */
}

def @func_565(%var_564: Tensor[(15, 6, 8), uint64]) -> (Tensor[(15, 6, 8), uint64], Tensor[(6, 2, 13), float32], Tensor[(156), float64]) {
  %430 = fn (%var_547: Tensor[(15, 6, 8), uint64]) -> (Tensor[(15, 6, 8), uint64], Tensor[(6, 2, 13), float32], Tensor[(156), float64]) {
    %422 = cast(%var_547, dtype="uint64") /* ty=Tensor[(15, 6, 8), uint64] */;
    %423 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(15, 6, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %424 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 6, 8), uint64] */, dtype="uint64") /* ty=Tensor[(15, 6, 8), uint64] */;
    %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %426 = cast(meta[relay.Constant][24] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
    %427 = reshape(%426, newshape=[6, 2, 13]) /* ty=Tensor[(6, 2, 13), float64] */;
    %428 = bitwise_and(%424, %425) /* ty=Tensor[(15, 6, 8), uint64] */;
    %429 = @func_253(%427) /* ty=Tensor[(6, 2, 13), float32] */;
    (%428, %429, meta[relay.Constant][24] /* ty=Tensor[(156), float64] */)
  };
  %430(%var_564) /* ty=(Tensor[(15, 6, 8), uint64], Tensor[(6, 2, 13), float32], Tensor[(156), float64]) */
}

def @func_2660(%var_2658: Tensor[(1, 8, 6), float32], %var_2659: Tensor[(1, 180), int16]) -> (Tensor[(?, 8, 6), bool], Tensor[(1, 8, 6), float32], Tensor[(14, 52), float32], Tensor[(1, 180), int16]) {
  %451 = fn (%var_2628: Tensor[(1, 8, 6), float32], %var_2655: Tensor[(1, 180), int16]) -> (Tensor[(?, 8, 6), bool], Tensor[(1, 8, 6), float32], Tensor[(14, 52), float32], Tensor[(1, 180), int16]) {
    %431 = cast(%var_2628, dtype="float32") /* ty=Tensor[(1, 8, 6), float32] */;
    %432 = sinh(%431) /* ty=Tensor[(1, 8, 6), float32] */;
    %433 = cast(%var_2628, dtype="float64") /* ty=Tensor[(1, 8, 6), float64] */;
    %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
    %435 = cast(%432, dtype="float64") /* ty=Tensor[(1, 8, 6), float64] */;
    %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %437 = floor_divide(%435, %436) /* ty=Tensor[(?, 8, 6), float64] */;
    %438 = cast(%432, dtype="bool") /* ty=Tensor[(1, 8, 6), bool] */;
    %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
    %440 = cast(%437, dtype="bool") /* ty=Tensor[(?, 8, 6), bool] */;
    %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %442 = cast(%var_2628, dtype="float32") /* ty=Tensor[(1, 8, 6), float32] */;
    %443 = cast(%var_2655, dtype="int16") /* ty=Tensor[(1, 180), int16] */;
    %444 = cast(%var_2655, dtype="int16") /* ty=Tensor[(1, 180), int16] */;
    %445 = reshape(%443, newshape=[10, 6, 3]) /* ty=Tensor[(10, 6, 3), int16] */;
    %446 = reshape(%444, newshape=[10, 6, 3]) /* ty=Tensor[(10, 6, 3), int16] */;
    %447 = @func_2332(%445, %446) /* ty=(Tensor[(10, 6, 3), int16], Tensor[(3, 8, 15), uint32], Tensor[(14, 52), float32]) */;
    %448 = logical_and(%440, %441) /* ty=Tensor[(?, 8, 6), bool] */;
    %449 = asin(%442) /* ty=Tensor[(1, 8, 6), float32] */;
    %450 = %447.2;
    (%448, %449, %450, %var_2655)
  };
  %451(%var_2658, %var_2659) /* ty=(Tensor[(?, 8, 6), bool], Tensor[(1, 8, 6), float32], Tensor[(14, 52), float32], Tensor[(1, 180), int16]) */
}

def @func_4623(%var_4621: Tensor[(12, 8, 10), int16], %var_4622: Tensor[(12, 8, 10), int16]) -> (Tensor[(12, 8, 10), uint8], Tensor[(12, 8, 10), float64]) {
  %466 = fn (%var_4591: Tensor[(12, 8, 10), int16], %var_4596: Tensor[(12, 8, 10), int16]) -> (Tensor[(12, 8, 10), uint8], Tensor[(12, 8, 10), float64]) {
    %452 = cast(%var_4596, dtype="uint8") /* ty=Tensor[(12, 8, 10), uint8] */;
    %453 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(12, 8, 10), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %454 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 8, 10), int16] */, dtype="uint8") /* ty=Tensor[(12, 8, 10), uint8] */;
    %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %456 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 8, 10), int16] */, dtype="bool") /* ty=Tensor[(12, 8, 10), bool] */;
    %457 = shape_of(%var_4591, dtype="int32") /* ty=Tensor[(3), int32] */;
    %458 = cast(%var_4591, dtype="bool") /* ty=Tensor[(12, 8, 10), bool] */;
    %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %460 = equal(%458, %459) /* ty=Tensor[(12, 8, 10), bool] */;
    %461 = cast(%460, dtype="float32") /* ty=Tensor[(12, 8, 10), float32] */;
    %462 = cosh(%461) /* ty=Tensor[(12, 8, 10), float32] */;
    %463 = cast(%462, dtype="float64") /* ty=Tensor[(12, 8, 10), float64] */;
    %464 = subtract(%454, %455) /* ty=Tensor[(12, 8, 10), uint8] */;
    %465 = sigmoid(%463) /* ty=Tensor[(12, 8, 10), float64] */;
    (%464, %465)
  };
  %466(%var_4621, %var_4622) /* ty=(Tensor[(12, 8, 10), uint8], Tensor[(12, 8, 10), float64]) */
}

def @func_4884(%var_4879: float32, %var_4880: Tensor[(1, 6, 2), float32], %var_4881: Tensor[(1287, 1), float32], %var_4882: Tensor[(672), uint64], %var_4883: Tensor[(180), float32]) -> (Tensor[(1, 6, 2), float32], Tensor[(2, 10, 9), float32], Tensor[(1287, 1), float32], Tensor[(120, 4), float32], Tensor[(672), uint64], Tensor[(180), float32], Tensor[(108), float64], Tensor[(648), float32], Tensor[(2100), float32], Tensor[(672), uint64], Tensor[(1, 6, 2), bool], Tensor[(1, 6, 2), float32]) {
  @func_4877(%var_4879, %var_4880, %var_4881, %var_4882, %var_4883) /* ty=(Tensor[(1, 6, 2), float32], Tensor[(2, 10, 9), float32], Tensor[(1287, 1), float32], Tensor[(120, 4), float32], Tensor[(672), uint64], Tensor[(180), float32], Tensor[(108), float64], Tensor[(648), float32], Tensor[(2100), float32], Tensor[(672), uint64], Tensor[(1, 6, 2), bool], Tensor[(1, 6, 2), float32]) */
}

def @func_7474() -> Tensor[(14, 15, 10), float32] {
  %468 = fn () -> Tensor[(14, 15, 10), float32] {
    %467 = @func_7441() /* ty=(Tensor[(8, 5, 6), float32], Tensor[(14, 15, 10), float32], Tensor[(2100), float32]) */;
    %467.1
  };
  %468() /* ty=Tensor[(14, 15, 10), float32] */
}

def @func_2007(%var_2006: Tensor[(6, 14, 14), float32]) -> (Tensor[(6, 14, 14), float32],) {
  %471 = fn (%var_1998: Tensor[(6, 14, 14), float32]) -> (Tensor[(6, 14, 14), float32],) {
    %469 = cast(%var_1998, dtype="float32") /* ty=Tensor[(6, 14, 14), float32] */;
    %470 = sin(%469) /* ty=Tensor[(6, 14, 14), float32] */;
    (%470,)
  };
  %471(%var_2006) /* ty=(Tensor[(6, 14, 14), float32],) */
}

def @func_7279(%var_7277: Tensor[(14, 16, 10), float32], %var_7278: Tensor[(264), float32]) -> (Tensor[(14, 16, 10), float32], Tensor[(11, 2, 12), float64], Tensor[(264), float32]) {
  @func_7275(%var_7277, %var_7278) /* ty=(Tensor[(14, 16, 10), float32], Tensor[(11, 2, 12), float64], Tensor[(264), float32]) */
}

def @func_5596(%var_5565: Tensor[(9, 6, 1), float64]) -> (Tensor[(9, 6, 1), float64], Tensor[(9, 6, ?), bool]) {
  %472 = cast(%var_5565, dtype="float64") /* ty=Tensor[(9, 6, 1), float64] */;
  %473 = cast(%var_5565, dtype="float32") /* ty=Tensor[(9, 6, 1), float32] */;
  %474 = cast(%var_5565, dtype="float32") /* ty=Tensor[(9, 6, 1), float32] */;
  %475 = reshape(%473, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), float32] */;
  %476 = reshape(%474, newshape=[3, 2, 9]) /* ty=Tensor[(3, 2, 9), float32] */;
  %477 = @func_3388(%475, %476) /* ty=Tensor[(3, 2, 9), float32] */;
  %478 = cast(%477, dtype="bool") /* ty=Tensor[(3, 2, 9), bool] */;
  %479 = shape_of(%var_5565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%var_5565, dtype="bool") /* ty=Tensor[(9, 6, 1), bool] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %482 = exp(%472) /* ty=Tensor[(9, 6, 1), float64] */;
  %483 = logical_and(%480, %481) /* ty=Tensor[(9, 6, ?), bool] */;
  (%482, %483)
}

def @func_4368(%var_4332: Tensor[(88), float32], %var_4333: Tensor[(132), float64], %var_4334: Tensor[(180), float32], %var_4366: Tensor[(4, 392), float64]) -> (Tensor[(180), float32], Tensor[(88), float32], Tensor[(132), float64], Tensor[(180), float32], Tensor[(7, 16, 11), uint64], Tensor[(7, 16, 11), float32], Tensor[(14, 8, 14), float64], Tensor[(4, 392), float64]) {
  %484 = cast(%var_4332, dtype="float32") /* ty=Tensor[(88), float32] */;
  %485 = cast(%var_4333, dtype="float64") /* ty=Tensor[(132), float64] */;
  %486 = cast(%var_4334, dtype="float32") /* ty=Tensor[(180), float32] */;
  %487 = reshape(%484, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %488 = reshape(%485, newshape=[132]) /* ty=Tensor[(132), float64] */;
  %489 = reshape(%486, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %490 = @func_3913(%487, %488, %489) /* ty=(Tensor[(6, 2, 11), float64], Tensor[(132), float64], Tensor[(180), float32], Tensor[(11, 4, 2), float32]) */;
  %491 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(7, 16, 11), float32] */;
  %492 = log2(%491) /* ty=Tensor[(7, 16, 11), float32] */;
  %493 = cast(%492, dtype="float64") /* ty=Tensor[(7, 16, 11), float64] */;
  %494 = log(%493) /* ty=Tensor[(7, 16, 11), float64] */;
  %495 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 16, 11), float32] */, dtype="uint64") /* ty=Tensor[(7, 16, 11), uint64] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="uint64") /* ty=Tensor[(7, 16, 11), uint64] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %499 = cast(%494, dtype="float32") /* ty=Tensor[(7, 16, 11), float32] */;
  %500 = cast(%var_4366, dtype="float64") /* ty=Tensor[(4, 392), float64] */;
  %501 = reshape(%500, newshape=[14, 8, 14]) /* ty=Tensor[(14, 8, 14), float64] */;
  %502 = @func_2355(%501) /* ty=(Tensor[(14, 8, 14), float64],) */;
  %503 = %490.2;
  %504 = bitwise_xor(%497, %498) /* ty=Tensor[(7, 16, 11), uint64] */;
  %505 = sqrt(%499) /* ty=Tensor[(7, 16, 11), float32] */;
  %506 = %502.0;
  (%503, %var_4332, %var_4333, %var_4334, %504, %505, %506, %var_4366)
}

def @func_6422(%var_6418: Tensor[(6, 12, 2), float64], %var_6419: Tensor[(1287), float32], %var_6420: Tensor[(360), uint32], %var_6421: Tensor[(40, 12), bool]) -> (Tensor[(6, 12, 2), float64], Tensor[(11, 5, 9), float32], Tensor[(495), uint8], Tensor[(1287), float32], Tensor[(2, 336), uint64], Tensor[(180), float32], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32], Tensor[(15, 15, 3), uint16], Tensor[(675), float64], Tensor[(40, 12), float32], Tensor[(3, 8, 15), uint32], Tensor[(180, 1), float32], Tensor[(132), float64], Tensor[(4, 8, 15), float32]) {
  @func_6416(%var_6418, %var_6419, %var_6420, %var_6421) /* ty=(Tensor[(6, 12, 2), float64], Tensor[(11, 5, 9), float32], Tensor[(495), uint8], Tensor[(1287), float32], Tensor[(2, 336), uint64], Tensor[(180), float32], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32], Tensor[(15, 15, 3), uint16], Tensor[(675), float64], Tensor[(40, 12), float32], Tensor[(3, 8, 15), uint32], Tensor[(180, 1), float32], Tensor[(132), float64], Tensor[(4, 8, 15), float32]) */
}

def @func_3810(%var_3797: Tensor[(6, 4, 2), uint32], %var_3798: Tensor[(6, 4, 2), uint32]) -> (Tensor[(6, 4, 2), uint32],) {
  %507 = cast(%var_3798, dtype="uint32") /* ty=Tensor[(6, 4, 2), uint32] */;
  %508 = shape_of(%var_3797, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%var_3797, dtype="uint32") /* ty=Tensor[(6, 4, 2), uint32] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %511 = maximum(%509, %510) /* ty=Tensor[(6, 4, 2), uint32] */;
  (%511,)
}

def @func_4374(%var_4370: Tensor[(88), float32], %var_4371: Tensor[(132), float64], %var_4372: Tensor[(180), float32], %var_4373: Tensor[(4, 392), float64]) -> (Tensor[(180), float32], Tensor[(88), float32], Tensor[(132), float64], Tensor[(180), float32], Tensor[(7, 16, 11), uint64], Tensor[(7, 16, 11), float32], Tensor[(14, 8, 14), float64], Tensor[(4, 392), float64]) {
  @func_4368(%var_4370, %var_4371, %var_4372, %var_4373) /* ty=(Tensor[(180), float32], Tensor[(88), float32], Tensor[(132), float64], Tensor[(180), float32], Tensor[(7, 16, 11), uint64], Tensor[(7, 16, 11), float32], Tensor[(14, 8, 14), float64], Tensor[(4, 392), float64]) */
}

def @func_6770(%var_6765: Tensor[(4, 11, 4), float64], %var_6766: Tensor[(4, 11, 4), float64], %var_6767: Tensor[(2100), float32], %var_6768: Tensor[(132), float64], %var_6769: Tensor[(180), float32]) -> (Tensor[(4, 11, 4), float64], Tensor[(4, 11, 4), bool], Tensor[(9, 8, 9), float32], Tensor[(648), float32], Tensor[(2100), float32], Tensor[(2, 10, 9), float32], Tensor[(132), float64], Tensor[(180), float32]) {
  @func_6763(%var_6765, %var_6766, %var_6767, %var_6768, %var_6769) /* ty=(Tensor[(4, 11, 4), float64], Tensor[(4, 11, 4), bool], Tensor[(9, 8, 9), float32], Tensor[(648), float32], Tensor[(2100), float32], Tensor[(2, 10, 9), float32], Tensor[(132), float64], Tensor[(180), float32]) */
}

def @func_43(%var_41: Tensor[(11, 13, 4), int8], %var_42: Tensor[(11, 13, 4), int8]) -> (Tensor[(11, 13, 4), bool],) {
  %517 = fn (%var_34: Tensor[(11, 13, 4), int8], %var_35: Tensor[(11, 13, 4), int8]) -> (Tensor[(11, 13, 4), bool],) {
    %512 = cast(%var_35, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
    %513 = shape_of(%var_34, dtype="int32") /* ty=Tensor[(3), int32] */;
    %514 = cast(%var_34, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
    %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %516 = equal(%514, %515) /* ty=Tensor[(11, 13, 4), bool] */;
    (%516,)
  };
  %517(%var_41, %var_42) /* ty=(Tensor[(11, 13, 4), bool],) */
}

def @func_3529(%var_3527: Tensor[(9, 8, 9), float32], %var_3528: Tensor[(2100), float32]) -> (Tensor[(9, 8, 9), bool], Tensor[(156), float64], Tensor[(30), uint64], Tensor[(9, 8, 9), float32], Tensor[(12, 3, 3), float64], Tensor[(108), float64], Tensor[(2100), float32]) {
  %545 = fn (%var_3463: Tensor[(9, 8, 9), float32], %var_3513: Tensor[(2100), float32]) -> (Tensor[(9, 8, 9), bool], Tensor[(156), float64], Tensor[(30), uint64], Tensor[(9, 8, 9), float32], Tensor[(12, 3, 3), float64], Tensor[(108), float64], Tensor[(2100), float32]) {
    %518 = cast(%var_3463, dtype="float32") /* ty=Tensor[(9, 8, 9), float32] */;
    %519 = cos(%518) /* ty=Tensor[(9, 8, 9), float32] */;
    %520 = cast(%var_3463, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
    %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
    %522 = cast(%519, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
    %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %524 = less(%522, %523) /* ty=Tensor[(9, 8, 9), bool] */;
    %525 = cast(%524, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
    %526 = shape_of(%var_3463, dtype="int32") /* ty=Tensor[(3), int32] */;
    %527 = cast(%var_3463, dtype="bool") /* ty=Tensor[(9, 8, 9), bool] */;
    %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %529 = cast(meta[relay.Constant][27] /* ty=Tensor[(30), uint64] */, dtype="uint64") /* ty=Tensor[(30), uint64] */;
    %530 = reshape(%529, newshape=[5, 6, 1]) /* ty=Tensor[(5, 6, 1), uint64] */;
    %531 = @func_3058(%530) /* ty=(Tensor[(5, 6, 1), bool], Tensor[(156), float64], Tensor[(720), uint64]) */;
    %532 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 8, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 8, 9), float32] */;
    %533 = shape_of(%var_3463, dtype="int32") /* ty=Tensor[(3), int32] */;
    %534 = cast(%var_3463, dtype="float32") /* ty=Tensor[(9, 8, 9), float32] */;
    %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %536 = cast(meta[relay.Constant][29] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
    %537 = cast(%var_3513, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %538 = reshape(%536, newshape=[12, 3, 3]) /* ty=Tensor[(12, 3, 3), float64] */;
    %539 = reshape(%537, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
    %540 = @func_3372(%538, %539) /* ty=(Tensor[(14, 15, 10), float32], Tensor[(2100), float32], Tensor[(12, 3, 3), float64], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32]) */;
    %541 = less_equal(%527, %528) /* ty=Tensor[(9, 8, 9), bool] */;
    %542 = %531.1;
    %543 = floor_divide(%534, %535) /* ty=Tensor[(9, 8, 9), float32] */;
    %544 = %540.2;
    (%541, %542, meta[relay.Constant][27] /* ty=Tensor[(30), uint64] */, %543, %544, meta[relay.Constant][29] /* ty=Tensor[(108), float64] */, %var_3513)
  };
  %545(%var_3527, %var_3528) /* ty=(Tensor[(9, 8, 9), bool], Tensor[(156), float64], Tensor[(30), uint64], Tensor[(9, 8, 9), float32], Tensor[(12, 3, 3), float64], Tensor[(108), float64], Tensor[(2100), float32]) */
}

def @func_1962(%var_1951: Tensor[(4, 13, 14), float32]) -> (Tensor[(4, 13, 14), float32], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32]) {
  %546 = cast(%var_1951, dtype="float32") /* ty=Tensor[(4, 13, 14), float32] */;
  %547 = atanh(%546) /* ty=Tensor[(4, 13, 14), float32] */;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(4, 13, 14), float32] */;
  %549 = cast(meta[relay.Constant][30] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %550 = cast(meta[relay.Constant][30] /* ty=Tensor[(360), uint32] */, dtype="uint32") /* ty=Tensor[(360), uint32] */;
  %551 = reshape(%549, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %552 = reshape(%550, newshape=[3, 8, 15]) /* ty=Tensor[(3, 8, 15), uint32] */;
  %553 = exp(%548) /* ty=Tensor[(4, 13, 14), float32] */;
  %554 = @func_1671(%551, %552) /* ty=Tensor[(3, 8, 15), uint32] */;
  (%553, %554, meta[relay.Constant][30] /* ty=Tensor[(360), uint32] */)
}

def @func_5869(%var_5867: Tensor[(15, 15, 3), float64]) -> (Tensor[(15, 15, 3), uint16], Tensor[(15, 15, 3), bool]) {
  @func_5866(%var_5867) /* ty=(Tensor[(15, 15, 3), uint16], Tensor[(15, 15, 3), bool]) */
}

def @func_6629(%var_6622: Tensor[(10, 3, 6), uint16]) -> Tensor[(10, 3, 6), uint16] {
  %555 = cast(%var_6622, dtype="uint16") /* ty=Tensor[(10, 3, 6), uint16] */;
  %556 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(10, 3, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 3, 6), uint16] */, dtype="uint16") /* ty=Tensor[(10, 3, 6), uint16] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%557, %558) /* ty=Tensor[(10, 3, 6), uint16] */
}

def @func_1965(%var_1963: Tensor[(4, 13, 14), float32]) -> (Tensor[(4, 13, 14), float32], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32]) {
  @func_1962(%var_1963) /* ty=(Tensor[(4, 13, 14), float32], Tensor[(3, 8, 15), uint32], Tensor[(360), uint32]) */
}

def @func_1671(%var_1666: Tensor[(3, 8, 15), uint32], %var_1667: Tensor[(3, 8, 15), uint32]) -> Tensor[(3, 8, 15), uint32] {
  %559 = cast(%var_1667, dtype="uint32") /* ty=Tensor[(3, 8, 15), uint32] */;
  %560 = shape_of(%var_1666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%var_1666, dtype="uint32") /* ty=Tensor[(3, 8, 15), uint32] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_or(%561, %562) /* ty=Tensor[(3, 8, 15), uint32] */
}

def @func_4098(%var_4097: Tensor[(16, 6, 12), float64]) -> Tensor[(16, 6, 12), float64] {
  %564 = fn (%var_4084: Tensor[(16, 6, 12), float64]) -> Tensor[(16, 6, 12), float64] {
    %563 = cast(%var_4084, dtype="float64") /* ty=Tensor[(16, 6, 12), float64] */;
    tan(%563) /* ty=Tensor[(16, 6, 12), float64] */
  };
  %564(%var_4097) /* ty=Tensor[(16, 6, 12), float64] */
}

def @func_3814(%var_3812: Tensor[(6, 4, 2), uint32], %var_3813: Tensor[(6, 4, 2), uint32]) -> (Tensor[(6, 4, 2), uint32],) {
  @func_3810(%var_3812, %var_3813) /* ty=(Tensor[(6, 4, 2), uint32],) */
}

def @func_2799(%var_2797: Tensor[(14, 15, 10), float32]) -> Tensor[(14, 15, 10), float32] {
  @func_2796(%var_2797) /* ty=Tensor[(14, 15, 10), float32] */
}

def @func_3030(%var_3028: Tensor[(11, 5, 9), uint8], %var_3029: Tensor[(11, 5, 9), uint8]) -> Tensor[(11, 5, 9), float32] {
  %576 = fn (%var_2988: Tensor[(11, 5, 9), uint8], %var_2989: Tensor[(11, 5, 9), uint8]) -> Tensor[(11, 5, 9), float32] {
    %565 = cast(%var_2989, dtype="uint8") /* ty=Tensor[(11, 5, 9), uint8] */;
    %566 = shape_of(%var_2988, dtype="int32") /* ty=Tensor[(3), int32] */;
    %567 = cast(%var_2988, dtype="uint8") /* ty=Tensor[(11, 5, 9), uint8] */;
    %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %569 = bitwise_xor(%567, %568) /* ty=Tensor[(11, 5, 9), uint8] */;
    %570 = cast(%var_2989, dtype="bool") /* ty=Tensor[(11, 5, 9), bool] */;
    %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
    %572 = cast(%569, dtype="bool") /* ty=Tensor[(11, 5, 9), bool] */;
    %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %574 = greater_equal(%572, %573) /* ty=Tensor[(11, 5, 9), bool] */;
    %575 = cast(%574, dtype="float32") /* ty=Tensor[(11, 5, 9), float32] */;
    log2(%575) /* ty=Tensor[(11, 5, 9), float32] */
  };
  %576(%var_3028, %var_3029) /* ty=Tensor[(11, 5, 9), float32] */
}

def @func_1784(%var_1780: int32, %var_1781: Tensor[(5, 2, 1), int32], %var_1782: Tensor[(480), float32], %var_1783: Tensor[(572), int8]) -> (Tensor[(5, 2, 1), int32], Tensor[(5, 2, 1), bool], Tensor[(2, 10, 9), float32], Tensor[(180), float32], Tensor[(480), float32], Tensor[(4, 8, 15), float64], Tensor[(11, 13, 4), bool], Tensor[(572), int8]) {
  %600 = fn (%var_1708: int32, %var_1709: Tensor[(5, 2, 1), int32], %var_1729: Tensor[(480), float32], %var_1768: Tensor[(572), int8]) -> (Tensor[(5, 2, 1), int32], Tensor[(5, 2, 1), bool], Tensor[(2, 10, 9), float32], Tensor[(180), float32], Tensor[(480), float32], Tensor[(4, 8, 15), float64], Tensor[(11, 13, 4), bool], Tensor[(572), int8]) {
    %577 = cast(%var_1708, dtype="int32") /* ty=int32 */;
    %578 = cast(%var_1709, dtype="int32") /* ty=Tensor[(5, 2, 1), int32] */;
    %579 = cast(%var_1708, dtype="bool") /* ty=bool */;
    %580 = cast(%var_1709, dtype="bool") /* ty=Tensor[(5, 2, 1), bool] */;
    %581 = cast(meta[relay.Constant][32] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
    %582 = reshape(%581, newshape=[2, 10, 9]) /* ty=Tensor[(2, 10, 9), float32] */;
    %583 = cast(%var_1729, dtype="float32") /* ty=Tensor[(480), float32] */;
    %584 = cast(%var_1729, dtype="float32") /* ty=Tensor[(480), float32] */;
    %585 = reshape(%583, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
    %586 = reshape(%584, newshape=[4, 8, 15]) /* ty=Tensor[(4, 8, 15), float32] */;
    %587 = @func_536(%585, %586) /* ty=(Tensor[(4, 8, 15), float64], Tensor[(4, 8, 15), float64]) */;
    %588 = %587.0;
    %589 = cast(%588, dtype="float64") /* ty=Tensor[(4, 8, 15), float64] */;
    %590 = cast(%var_1768, dtype="int8") /* ty=Tensor[(572), int8] */;
    %591 = cast(%var_1768, dtype="int8") /* ty=Tensor[(572), int8] */;
    %592 = reshape(%590, newshape=[11, 13, 4]) /* ty=Tensor[(11, 13, 4), int8] */;
    %593 = reshape(%591, newshape=[11, 13, 4]) /* ty=Tensor[(11, 13, 4), int8] */;
    %594 = @func_40(%592, %593) /* ty=(Tensor[(11, 13, 4), bool],) */;
    %595 = multiply(%577, %578) /* ty=Tensor[(5, 2, 1), int32] */;
    %596 = less(%579, %580) /* ty=Tensor[(5, 2, 1), bool] */;
    %597 = @func_1329(%582) /* ty=Tensor[(2, 10, 9), float32] */;
    %598 = acosh(%589) /* ty=Tensor[(4, 8, 15), float64] */;
    %599 = %594.0;
    (%595, %596, %597, meta[relay.Constant][32] /* ty=Tensor[(180), float32] */, %var_1729, %598, %599, %var_1768)
  };
  %600(%var_1780, %var_1781, %var_1782, %var_1783) /* ty=(Tensor[(5, 2, 1), int32], Tensor[(5, 2, 1), bool], Tensor[(2, 10, 9), float32], Tensor[(180), float32], Tensor[(480), float32], Tensor[(4, 8, 15), float64], Tensor[(11, 13, 4), bool], Tensor[(572), int8]) */
}

def @func_4473(%var_4459: Tensor[(6, 4, 16), uint16], %var_4467: Tensor[(11, 117), float32], %var_4469: Tensor[(4, 168), uint64], %var_4470: Tensor[(180), float32]) -> (Tensor[(6, 4, 16), bool], Tensor[(3, 60), float32], Tensor[(11, 117), float32], Tensor[(480), float32], Tensor[(4, 168), uint64], Tensor[(180), float32]) {
  %601 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 4, 16), uint16] */, dtype="bool") /* ty=Tensor[(6, 4, 16), bool] */;
  %602 = shape_of(%var_4459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_4459, dtype="bool") /* ty=Tensor[(6, 4, 16), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = cast(%var_4467, dtype="float32") /* ty=Tensor[(11, 117), float32] */;
  %606 = cast(meta[relay.Constant][34] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %607 = cast(%var_4469, dtype="uint64") /* ty=Tensor[(4, 168), uint64] */;
  %608 = cast(%var_4470, dtype="float32") /* ty=Tensor[(180), float32] */;
  %609 = reshape(%605, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %610 = reshape(%606, newshape=[120, 4]) /* ty=Tensor[(120, 4), float32] */;
  %611 = reshape(%607, newshape=[672]) /* ty=Tensor[(672), uint64] */;
  %612 = reshape(%608, newshape=[3, 60]) /* ty=Tensor[(3, 60), float32] */;
  %613 = @func_1592(%609, %610, %611, %612) /* ty=(Tensor[(9, 11, 13), float32], Tensor[(4, 8, 15), float32], Tensor[(156), float64], Tensor[(672), uint64], Tensor[(156, 1), float64], Tensor[(4, 8, 15), bool], Tensor[(2, 10, 9), float32], Tensor[(3, 60), float32]) */;
  %614 = less(%603, %604) /* ty=Tensor[(6, 4, 16), bool] */;
  %615 = %613.7;
  (%614, %615, %var_4467, meta[relay.Constant][34] /* ty=Tensor[(480), float32] */, %var_4469, %var_4470)
}

def @func_6632(%var_6630: Tensor[(10, 3, 6), uint16]) -> Tensor[(10, 3, 6), uint16] {
  @func_6629(%var_6630) /* ty=Tensor[(10, 3, 6), uint16] */
}

def @func_3918(%var_3915: Tensor[(11, 4, 2), float32], %var_3916: Tensor[(132), float64], %var_3917: Tensor[(180), float32]) -> (Tensor[(6, 2, 11), float64], Tensor[(132), float64], Tensor[(180), float32], Tensor[(11, 4, 2), float32]) {
  @func_3913(%var_3915, %var_3916, %var_3917) /* ty=(Tensor[(6, 2, 11), float64], Tensor[(132), float64], Tensor[(180), float32], Tensor[(11, 4, 2), float32]) */
}

def @func_7275(%var_7262: Tensor[(14, 16, 10), float32], %var_7268: Tensor[(264), float32]) -> (Tensor[(14, 16, 10), float32], Tensor[(11, 2, 12), float64], Tensor[(264), float32]) {
  %616 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 16, 10), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 10), float32] */;
  %617 = shape_of(%var_7262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%var_7262, dtype="float32") /* ty=Tensor[(14, 16, 10), float32] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %620 = cast(%var_7268, dtype="float32") /* ty=Tensor[(264), float32] */;
  %621 = reshape(%620, newshape=[11, 2, 12]) /* ty=Tensor[(11, 2, 12), float32] */;
  %622 = @func_5369(%621) /* ty=(Tensor[(11, 2, 12), float64],) */;
  %623 = floor_mod(%618, %619) /* ty=Tensor[(14, 16, 10), float32] */;
  %624 = %622.0;
  (%623, %624, %var_7268)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen276/build/output.py", line 1097, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:02:58] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

