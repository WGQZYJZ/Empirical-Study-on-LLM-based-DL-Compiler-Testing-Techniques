==========mod==========
#[version = "0.0.5"]
def @func_1003(%var_977: Tensor[(12, 9, 14), float32]) -> (Tensor[(3, 16, 7), float32], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(12, 9, 14), uint8]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %1 = cast(meta[relay.Constant][1] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %2 = cast(meta[relay.Constant][1] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %3 = reshape(%0, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %4 = reshape(%1, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %5 = reshape(%2, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %6 = @func_948(%3, %4, %5) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %7 = cast(%var_977, dtype="float32") /* ty=Tensor[(12, 9, 14), float32] */;
  %8 = asin(%7) /* ty=Tensor[(12, 9, 14), float32] */;
  %9 = cast(%var_977, dtype="uint8") /* ty=Tensor[(12, 9, 14), uint8] */;
  %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%8, dtype="uint8") /* ty=Tensor[(12, 9, 14), uint8] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %13 = %6.8;
  %14 = bitwise_xor(%11, %12) /* ty=Tensor[(12, 9, 14), uint8] */;
  (%13, meta[relay.Constant][0] /* ty=Tensor[(112), uint64] */, meta[relay.Constant][1] /* ty=Tensor[(336), float64] */, %14)
}

def @func_3128(%var_3109: Tensor[(1, 1, 13), bool]) -> (Tensor[(9, 12, 13), bool], Tensor[(5, 3, 16), int32], Tensor[(120, 2), int32]) {
  %15 = cast(%var_3109, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %16 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 12, 13), bool] */, dtype="bool") /* ty=Tensor[(9, 12, 13), bool] */;
  %17 = cast(meta[relay.Constant][3] /* ty=Tensor[(120, 2), int32] */, dtype="int32") /* ty=Tensor[(120, 2), int32] */;
  %18 = cast(meta[relay.Constant][3] /* ty=Tensor[(120, 2), int32] */, dtype="int32") /* ty=Tensor[(120, 2), int32] */;
  %19 = reshape(%17, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %20 = reshape(%18, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %21 = @func_783(%19, %20) /* ty=(Tensor[(5, 3, 16), int32],) */;
  %22 = logical_and(%15, %16) /* ty=Tensor[(9, 12, 13), bool] */;
  %23 = %21.0;
  (%22, %23, meta[relay.Constant][3] /* ty=Tensor[(120, 2), int32] */)
}

def @func_5732() -> Tensor[(11, 9, 2), float64] {
  %24 = @func_5648() /* ty=(Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) */;
  %24.1
}

def @func_5833(%var_5828: Tensor[(588), uint8], %var_5830: Tensor[(480), float32], %var_5831: Tensor[(2184), float64]) -> (Tensor[(11, 9, 2), float32], Tensor[(96), float32], uint8, Tensor[(588), uint8], Tensor[(16, 6), float32], Tensor[(480), float32], Tensor[(2184), float64]) {
  %25 = @func_5648() /* ty=(Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) */;
  %26 = %25.0;
  %27 = cast(%26, dtype="float64") /* ty=Tensor[(11, 9, 2), float64] */;
  %28 = acos(%27) /* ty=Tensor[(11, 9, 2), float64] */;
  %29 = cast(%28, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %30 = cast(meta[relay.Constant][4] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %31 = cast(%var_5828, dtype="uint8") /* ty=Tensor[(588), uint8] */;
  %32 = cast(meta[relay.Constant][5] /* ty=Tensor[(16, 6), float32] */, dtype="float32") /* ty=Tensor[(16, 6), float32] */;
  %33 = cast(%var_5830, dtype="float32") /* ty=Tensor[(480), float32] */;
  %34 = cast(%var_5831, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %35 = reshape(%30, newshape=[]) /* ty=uint8 */;
  %36 = reshape(%31, newshape=[7, 12, 7]) /* ty=Tensor[(7, 12, 7), uint8] */;
  %37 = reshape(%32, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float32] */;
  %38 = reshape(%33, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %39 = reshape(%34, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %40 = @func_5425(%35, %36, %37, %38, %39) /* ty=(Tensor[(7, 12, 7), uint8], Tensor[(96), float32], Tensor[(1512), float32], Tensor[(4, 6, 4), uint8], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64]) */;
  %41 = cos(%29) /* ty=Tensor[(11, 9, 2), float32] */;
  %42 = %40.1;
  (%41, %42, meta[relay.Constant][4] /* ty=uint8 */, %var_5828, meta[relay.Constant][5] /* ty=Tensor[(16, 6), float32] */, %var_5830, %var_5831)
}

def @main(%var_6958: Tensor[(480), float32], %var_6959: Tensor[(2184), float64], %var_6970: Tensor[(396), float64]) -> (Tensor[(11, 9, 2), float64], Tensor[(5, 2, 396), bool], Tensor[(96), float32], Tensor[(294, 2), uint8], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(396), float32]) {
  %43 = @func_6749() /* ty=(Tensor[(5, 2, 1), float32], Tensor[(12, 3, 11), int8], Tensor[(396), int8]) */;
  %44 = %43.2;
  %45 = cast(%44, dtype="float32") /* ty=Tensor[(396), float32] */;
  %46 = asinh(%45) /* ty=Tensor[(396), float32] */;
  %47 = @func_6497() /* ty=(Tensor[(5, 2, 1), float32], Tensor[(5, 2, 1), float64]) */;
  %48 = %47.0;
  %49 = cast(%46, dtype="bool") /* ty=Tensor[(396), bool] */;
  %50 = cast(%48, dtype="bool") /* ty=Tensor[(5, 2, 1), bool] */;
  %51 = cast(meta[relay.Constant][6] /* ty=Tensor[(294, 2), uint8] */, dtype="uint8") /* ty=Tensor[(294, 2), uint8] */;
  %52 = cast(%var_6958, dtype="float32") /* ty=Tensor[(480), float32] */;
  %53 = cast(%var_6959, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %54 = reshape(%51, newshape=[588]) /* ty=Tensor[(588), uint8] */;
  %55 = reshape(%52, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %56 = reshape(%53, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %57 = @func_5833(%54, %55, %56) /* ty=(Tensor[(11, 9, 2), float32], Tensor[(96), float32], uint8, Tensor[(588), uint8], Tensor[(16, 6), float32], Tensor[(480), float32], Tensor[(2184), float64]) */;
  %58 = cast(%46, dtype="float64") /* ty=Tensor[(396), float64] */;
  %59 = acos(%58) /* ty=Tensor[(396), float64] */;
  %60 = cast(%var_6970, dtype="bool") /* ty=Tensor[(396), bool] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(1), int32] */;
  %62 = cast(%59, dtype="bool") /* ty=Tensor[(396), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?), bool] */;
  %64 = logical_and(%62, %63) /* ty=Tensor[(396), bool] */;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(396), float32] */;
  %66 = @func_5732() /* ty=Tensor[(11, 9, 2), float64] */;
  %67 = equal(%49, %50) /* ty=Tensor[(5, 2, 396), bool] */;
  %68 = %57.1;
  %69 = log10(%65) /* ty=Tensor[(396), float32] */;
  (%66, %67, %68, meta[relay.Constant][6] /* ty=Tensor[(294, 2), uint8] */, %var_6958, %var_6959, %69)
}

def @func_2711(%var_2672: Tensor[(4, 4, 13), float64], %var_2673: Tensor[(4, 4, 13), float64], %var_2678: Tensor[(1, 140), int8], %var_2679: Tensor[(2184), float64], %var_2691: Tensor[(18, 4), float64], %var_2694: Tensor[(112), uint64], %var_2695: Tensor[(336, 1), float64]) -> (Tensor[(4, 4, 13), float64], Tensor[(10, 14, 1), float32], Tensor[(1, 140), int8], Tensor[(2184), float64], Tensor[(4, 4, 13), float32], Tensor[(4, 9, 2), float64], Tensor[(18, 4), float64], Tensor[(3, 16, 7), uint16], Tensor[(112), uint64], Tensor[(336, 1), float64], Tensor[(3, 16, 7), float32]) {
  %70 = cast(%var_2673, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
  %71 = shape_of(%var_2672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%var_2672, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %74 = cast(%var_2678, dtype="int8") /* ty=Tensor[(1, 140), int8] */;
  %75 = cast(%var_2678, dtype="int8") /* ty=Tensor[(1, 140), int8] */;
  %76 = cast(%var_2679, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %77 = reshape(%74, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), int8] */;
  %78 = reshape(%75, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), int8] */;
  %79 = reshape(%76, newshape=[84, 26]) /* ty=Tensor[(84, 26), float64] */;
  %80 = @func_2575(%77, %78, %79) /* ty=(Tensor[(10, 14, ?), bool], Tensor[(13, 14, 12), float32], Tensor[(15, 117), float32], Tensor[(84, 26), float64], Tensor[(10, 14, 1), float32], Tensor[(2184), float64], Tensor[(240, 2), float32]) */;
  %81 = cast(%var_2672, dtype="float32") /* ty=Tensor[(4, 4, 13), float32] */;
  %82 = cast(%var_2691, dtype="float64") /* ty=Tensor[(18, 4), float64] */;
  %83 = reshape(%82, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
  %84 = @func_2393(%83) /* ty=(Tensor[(4, 9, 2), float64],) */;
  %85 = cast(%var_2694, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %86 = cast(%var_2695, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %87 = cast(%var_2695, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %88 = reshape(%85, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %89 = reshape(%86, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %90 = reshape(%87, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %91 = @func_948(%88, %89, %90) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %92 = cast(%var_2694, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %93 = %91.4;
  %94 = cast(%93, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
  %95 = cast(%93, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
  %96 = reshape(%92, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %97 = reshape(%94, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %98 = reshape(%95, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %99 = @func_948(%96, %97, %98) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %100 = power(%72, %73) /* ty=Tensor[(4, 4, 13), float64] */;
  %101 = %80.4;
  %102 = asin(%81) /* ty=Tensor[(4, 4, 13), float32] */;
  %103 = %84.0;
  %104 = %99.0;
  (%100, %101, %var_2678, %var_2679, %102, %103, %var_2691, %93, %var_2694, %var_2695, %104)
}

def @func_104(%var_81: Tensor[(14, 5, 10), uint64], %var_82: Tensor[(14, 5, 10), uint64], %var_97: Tensor[(14, 5, 10), uint64]) -> (Tensor[(14, 5, 10), uint64], Tensor[(14, 5, 10), float32]) {
  %105 = cast(%var_82, dtype="uint64") /* ty=Tensor[(14, 5, 10), uint64] */;
  %106 = shape_of(%var_81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_81, dtype="uint64") /* ty=Tensor[(14, 5, 10), uint64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %109 = cast(%var_97, dtype="float32") /* ty=Tensor[(14, 5, 10), float32] */;
  %110 = shape_of(%var_81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%var_81, dtype="float32") /* ty=Tensor[(14, 5, 10), float32] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %113 = add(%107, %108) /* ty=Tensor[(14, 5, 10), uint64] */;
  %114 = power(%111, %112) /* ty=Tensor[(14, 5, 10), float32] */;
  (%113, %114)
}

def @func_4155(%var_4137: Tensor[(12, 3, 11), int8]) -> (Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), int16]) {
  %115 = cast(meta[relay.Constant][7] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %116 = cast(%var_4137, dtype="int8") /* ty=Tensor[(12, 3, 11), int8] */;
  %117 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 3, 11), int8] */, dtype="int16") /* ty=Tensor[(12, 3, 11), int16] */;
  %118 = shape_of(%var_4137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%var_4137, dtype="int16") /* ty=Tensor[(12, 3, 11), int16] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %121 = bitwise_xor(%115, %116) /* ty=Tensor[(12, 3, 11), int8] */;
  %122 = add(%119, %120) /* ty=Tensor[(12, 3, 11), int16] */;
  (%121, %122)
}

def @func_4680(%var_4632: Tensor[(16, 16, 8), float32], %var_4644: Tensor[(240), int32], %var_4649: Tensor[(72), float64], %var_4678: Tensor[(1, 336), float64]) -> (Tensor[(16, 16, 8), float32], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(4, 9, 2), float64], Tensor[(72), float32], Tensor[(240), int32], Tensor[(112, 1), uint64], Tensor[(1, 336), float64]) {
  %123 = cast(8.16266f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %124 = cast(%var_4632, dtype="float32") /* ty=Tensor[(16, 16, 8), float32] */;
  %125 = divide(%123, %124) /* ty=Tensor[(16, 16, 8), float32] */;
  %126 = cast(8.16266f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %127 = cast(%125, dtype="float32") /* ty=Tensor[(16, 16, 8), float32] */;
  %128 = cast(%var_4644, dtype="int32") /* ty=Tensor[(240), int32] */;
  %129 = cast(%var_4644, dtype="int32") /* ty=Tensor[(240), int32] */;
  %130 = reshape(%128, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %131 = reshape(%129, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %132 = @func_783(%130, %131) /* ty=(Tensor[(5, 3, 16), int32],) */;
  %133 = cast(%var_4649, dtype="float64") /* ty=Tensor[(72), float64] */;
  %134 = reshape(%133, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
  %135 = @func_2393(%134) /* ty=(Tensor[(4, 9, 2), float64],) */;
  %136 = cast(%var_4649, dtype="float32") /* ty=Tensor[(72), float32] */;
  %137 = cast(meta[relay.Constant][9] /* ty=Tensor[(112, 1), uint64] */, dtype="uint64") /* ty=Tensor[(112, 1), uint64] */;
  %138 = cast(%var_4678, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
  %139 = cast(%var_4678, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
  %140 = reshape(%137, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %141 = reshape(%138, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %142 = reshape(%139, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %143 = @func_948(%140, %141, %142) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %144 = floor_divide(%126, %127) /* ty=Tensor[(16, 16, 8), float32] */;
  %145 = %132.0;
  %146 = %135.0;
  %147 = sigmoid(%136) /* ty=Tensor[(72), float32] */;
  %148 = %143.7;
  (%144, %145, %var_4644, %146, %147, %148, meta[relay.Constant][9] /* ty=Tensor[(112, 1), uint64] */, %var_4678)
}

def @func_783(%var_778: Tensor[(5, 3, 16), int32], %var_779: Tensor[(5, 3, 16), int32]) -> (Tensor[(5, 3, 16), int32],) {
  %149 = cast(%var_779, dtype="int32") /* ty=Tensor[(5, 3, 16), int32] */;
  %150 = shape_of(%var_778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%var_778, dtype="int32") /* ty=Tensor[(5, 3, 16), int32] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %153 = right_shift(%151, %152) /* ty=Tensor[(5, 3, 16), int32] */;
  (%153,)
}

def @func_1243(%var_1191: Tensor[(13, 15, 9), float32], %var_1200: Tensor[(2184), float64], %var_1225: Tensor[(13, 15, 9), float32]) -> (Tensor[(13, 15, 9), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(13, 15, 9), uint16], Tensor[(13, 14, 12), float32]) {
  %154 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 15, 9), float32] */, dtype="float32") /* ty=Tensor[(13, 15, 9), float32] */;
  %155 = shape_of(%var_1191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%var_1191, dtype="float32") /* ty=Tensor[(13, 15, 9), float32] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %158 = cast(%var_1200, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %159 = reshape(%158, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
  %160 = @func_491(%159) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) */;
  %161 = cast(%var_1225, dtype="uint16") /* ty=Tensor[(13, 15, 9), uint16] */;
  %162 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(13, 15, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(meta[relay.Constant][10] /* ty=Tensor[(13, 15, 9), float32] */, dtype="uint16") /* ty=Tensor[(13, 15, 9), uint16] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %165 = %160.3;
  %166 = cast(%165, dtype="float64") /* ty=Tensor[(13, 14, 12), float64] */;
  %167 = reshape(%166, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
  %168 = @func_491(%167) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) */;
  %169 = add(%156, %157) /* ty=Tensor[(13, 15, 9), float32] */;
  %170 = minimum(%163, %164) /* ty=Tensor[(13, 15, 9), uint16] */;
  %171 = %168.3;
  (%169, %165, %var_1200, %170, %171)
}

def @func_5940(%var_5898: Tensor[(1755), float32], %var_5899: Tensor[(2184), float64], %var_5901: Tensor[(11, 9, 2), float64]) -> (Tensor[(1755), float32], Tensor[(2184), float64], Tensor[(11, 9, 2), float32], Tensor[(11, 9, 2), int64], Tensor[(11, 9, 2), float64], Tensor[(13, 14, 12), float32]) {
  %172 = @func_5732() /* ty=Tensor[(11, 9, 2), float64] */;
  %173 = cast(%var_5901, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %177 = cast(%var_5901, dtype="int64") /* ty=Tensor[(11, 9, 2), int64] */;
  %178 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%172, dtype="int64") /* ty=Tensor[(11, 9, 2), int64] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %181 = @func_5756() /* ty=(Tensor[(11, 9, 2), float64],) */;
  %182 = cast(%var_5898, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %183 = cast(%var_5899, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %184 = cast(%var_5898, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %185 = reshape(%182, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
  %186 = reshape(%183, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %187 = reshape(%184, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
  %188 = @func_1243(%185, %186, %187) /* ty=(Tensor[(13, 15, 9), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(13, 15, 9), uint16], Tensor[(13, 14, 12), float32]) */;
  %189 = %188.1;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(13, 14, 12), float32] */;
  %191 = cosh(%190) /* ty=Tensor[(13, 14, 12), float32] */;
  %192 = cast(%191, dtype="float32") /* ty=Tensor[(13, 14, 12), float32] */;
  %193 = divide(%175, %176) /* ty=Tensor[(11, 9, 2), float32] */;
  %194 = bitwise_or(%179, %180) /* ty=Tensor[(11, 9, 2), int64] */;
  %195 = %181.0;
  %196 = acosh(%192) /* ty=Tensor[(13, 14, 12), float32] */;
  (%var_5898, %var_5899, %193, %194, %195, %196)
}

def @func_6578() -> Tensor[(11, 9, 2), float64] {
  %197 = @func_5756() /* ty=(Tensor[(11, 9, 2), float64],) */;
  %197.0
}

def @func_6282() -> Tensor[(11, 9, 2), float64] {
  %198 = @func_5756() /* ty=(Tensor[(11, 9, 2), float64],) */;
  %198.0
}

def @func_5979(%var_5968: Tensor[(11, 9, 2), float64]) -> (Tensor[(11, 9, 2), int8], Tensor[(11, 9, 2), float64]) {
  %199 = @func_5648() /* ty=(Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) */;
  %200 = %199.1;
  %201 = cast(%var_5968, dtype="int8") /* ty=Tensor[(11, 9, 2), int8] */;
  %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%200, dtype="int8") /* ty=Tensor[(11, 9, 2), int8] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %205 = cast(%var_5968, dtype="float64") /* ty=Tensor[(11, 9, 2), float64] */;
  %206 = bitwise_and(%203, %204) /* ty=Tensor[(11, 9, 2), int8] */;
  %207 = sigmoid(%205) /* ty=Tensor[(11, 9, 2), float64] */;
  (%206, %207)
}

def @func_6717() -> (Tensor[(11, 9, 2), float64], Tensor[(13, 14, 12), float64], Tensor[(112), uint64], Tensor[(336), float64]) {
  %208 = cast(meta[relay.Constant][11] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %209 = cast(meta[relay.Constant][12] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %210 = cast(meta[relay.Constant][12] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %211 = reshape(%208, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %212 = reshape(%209, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %213 = reshape(%210, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %214 = @func_948(%211, %212, %213) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %215 = @func_6282() /* ty=Tensor[(11, 9, 2), float64] */;
  %216 = %214.5;
  (%215, %216, meta[relay.Constant][11] /* ty=Tensor[(112), uint64] */, meta[relay.Constant][12] /* ty=Tensor[(336), float64] */)
}

def @func_6863() -> (Tensor[(12, 3, 11), int8],) {
  %217 = @func_6749() /* ty=(Tensor[(5, 2, 1), float32], Tensor[(12, 3, 11), int8], Tensor[(396), int8]) */;
  %218 = %217.1;
  (%218,)
}

def @func_6917() -> (Tensor[(11, 9, 2), uint64],) {
  %219 = @func_6013() /* ty=Tensor[(11, 9, 2), uint64] */;
  (%219,)
}

def @func_2575(%var_2529: Tensor[(10, 14, 1), int8], %var_2530: Tensor[(10, 14, 1), int8], %var_2538: Tensor[(84, 26), float64]) -> (Tensor[(10, 14, ?), bool], Tensor[(13, 14, 12), float32], Tensor[(15, 117), float32], Tensor[(84, 26), float64], Tensor[(10, 14, 1), float32], Tensor[(2184), float64], Tensor[(240, 2), float32]) {
  %220 = cast(%var_2530, dtype="bool") /* ty=Tensor[(10, 14, 1), bool] */;
  %221 = shape_of(%var_2529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%var_2529, dtype="bool") /* ty=Tensor[(10, 14, 1), bool] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %224 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 117), float32] */, dtype="float32") /* ty=Tensor[(15, 117), float32] */;
  %225 = cast(%var_2538, dtype="float64") /* ty=Tensor[(84, 26), float64] */;
  %226 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 117), float32] */, dtype="float32") /* ty=Tensor[(15, 117), float32] */;
  %227 = reshape(%224, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
  %228 = reshape(%225, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %229 = reshape(%226, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
  %230 = @func_1243(%227, %228, %229) /* ty=(Tensor[(13, 15, 9), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(13, 15, 9), uint16], Tensor[(13, 14, 12), float32]) */;
  %231 = cast(%var_2529, dtype="float64") /* ty=Tensor[(10, 14, 1), float64] */;
  %232 = sqrt(%231) /* ty=Tensor[(10, 14, 1), float64] */;
  %233 = cast(%232, dtype="float32") /* ty=Tensor[(10, 14, 1), float32] */;
  %234 = cast(meta[relay.Constant][14] /* ty=Tensor[(240, 2), float32] */, dtype="float32") /* ty=Tensor[(240, 2), float32] */;
  %235 = cast(%var_2538, dtype="float64") /* ty=Tensor[(84, 26), float64] */;
  %236 = reshape(%234, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float32] */;
  %237 = reshape(%235, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %238 = @func_571(%236, %237) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) */;
  %239 = greater_equal(%222, %223) /* ty=Tensor[(10, 14, ?), bool] */;
  %240 = %230.4;
  %241 = cosh(%233) /* ty=Tensor[(10, 14, 1), float32] */;
  %242 = %238.2;
  (%239, %240, meta[relay.Constant][13] /* ty=Tensor[(15, 117), float32] */, %var_2538, %241, %242, meta[relay.Constant][14] /* ty=Tensor[(240, 2), float32] */)
}

def @func_6749() -> (Tensor[(5, 2, 1), float32], Tensor[(12, 3, 11), int8], Tensor[(396), int8]) {
  %243 = @func_6051() /* ty=(Tensor[(5, 2, 1), float32],) */;
  %244 = cast(meta[relay.Constant][15] /* ty=Tensor[(396), int8] */, dtype="int8") /* ty=Tensor[(396), int8] */;
  %245 = reshape(%244, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), int8] */;
  %246 = @func_4155(%245) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), int16]) */;
  %247 = %243.0;
  %248 = %246.0;
  (%247, %248, meta[relay.Constant][15] /* ty=Tensor[(396), int8] */)
}

def @func_6209(%var_6204: Tensor[(9, 5), float32]) -> (Tensor[(9, 5), float32],) {
  %249 = cast(%var_6204, dtype="float32") /* ty=Tensor[(9, 5), float32] */;
  %250 = sqrt(%249) /* ty=Tensor[(9, 5), float32] */;
  (%250,)
}

def @func_4350(%var_4347: Tensor[(112), uint64], %var_4348: Tensor[(24, 14), float64]) -> (Tensor[(3, 12, 5), float32], Tensor[(3, 16, 7), uint16], Tensor[(112), uint64], Tensor[(24, 14), float64]) {
  %251 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 12, 5), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 5), float32] */;
  %252 = exp(%251) /* ty=Tensor[(3, 12, 5), float32] */;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(3, 12, 5), float32] */;
  %254 = cast(%var_4347, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %255 = cast(%var_4348, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %256 = cast(%var_4348, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %257 = reshape(%254, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %258 = reshape(%255, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %259 = reshape(%256, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %260 = @func_948(%257, %258, %259) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %261 = asinh(%253) /* ty=Tensor[(3, 12, 5), float32] */;
  %262 = %260.4;
  (%261, %262, %var_4347, %var_4348)
}

def @func_5694(%var_5656: Tensor[(11, 9, 2), float64]) -> (Tensor[(11, 9, 2), int16], Tensor[(11, 9, 2), bool], Tensor[(13, 14, 12), float64], Tensor[(112), uint64], Tensor[(24, 14), float64]) {
  %263 = @func_5648() /* ty=(Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) */;
  %264 = %263.1;
  %265 = cast(%var_5656, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %269 = floor_mod(%267, %268) /* ty=Tensor[(11, 9, 2), float32] */;
  %270 = cast(%var_5656, dtype="int16") /* ty=Tensor[(11, 9, 2), int16] */;
  %271 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%269, dtype="int16") /* ty=Tensor[(11, 9, 2), int16] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %274 = cast(%264, dtype="bool") /* ty=Tensor[(11, 9, 2), bool] */;
  %275 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%269, dtype="bool") /* ty=Tensor[(11, 9, 2), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %278 = cast(meta[relay.Constant][17] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %279 = cast(meta[relay.Constant][18] /* ty=Tensor[(24, 14), float64] */, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %280 = cast(meta[relay.Constant][18] /* ty=Tensor[(24, 14), float64] */, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %281 = reshape(%278, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %282 = reshape(%279, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %283 = reshape(%280, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %284 = @func_948(%281, %282, %283) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %285 = subtract(%272, %273) /* ty=Tensor[(11, 9, 2), int16] */;
  %286 = greater(%276, %277) /* ty=Tensor[(11, 9, 2), bool] */;
  %287 = %284.5;
  (%285, %286, %287, meta[relay.Constant][17] /* ty=Tensor[(112), uint64] */, meta[relay.Constant][18] /* ty=Tensor[(24, 14), float64] */)
}

def @func_6263(%var_6230: Tensor[(11, 9, 2), float64]) -> (Tensor[(11, 9, 2), bool], Tensor[(11, 9, 2), float64]) {
  %288 = @func_5732() /* ty=Tensor[(11, 9, 2), float64] */;
  %289 = cast(%var_6230, dtype="bool") /* ty=Tensor[(11, 9, 2), bool] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="bool") /* ty=Tensor[(11, 9, 2), bool] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %293 = cast(%288, dtype="float64") /* ty=Tensor[(11, 9, 2), float64] */;
  %294 = logical_or(%291, %292) /* ty=Tensor[(11, 9, 2), bool] */;
  %295 = sin(%293) /* ty=Tensor[(11, 9, 2), float64] */;
  (%294, %295)
}

def @func_1423(%var_1352: Tensor[(14, 1, 1), int16], %var_1353: Tensor[(14, 7, 13), int16], %var_1366: Tensor[(2184), float64], %var_1392: Tensor[(1, 112), uint64], %var_1397: Tensor[(1512), float32]) -> (Tensor[(8, 4, 15), float32], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 112), uint64], Tensor[(336), float64], Tensor[(112), uint64], Tensor[(1512), float32], Tensor[(14, 7, 13), float32]) {
  %296 = cast(meta[relay.Constant][19] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %297 = cast(%var_1366, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %298 = reshape(%296, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float32] */;
  %299 = reshape(%297, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %300 = @func_571(%298, %299) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) */;
  %301 = cast(%var_1392, dtype="uint64") /* ty=Tensor[(1, 112), uint64] */;
  %302 = cast(meta[relay.Constant][20] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %303 = cast(meta[relay.Constant][20] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %304 = reshape(%301, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %305 = reshape(%302, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %306 = reshape(%303, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %307 = @func_948(%304, %305, %306) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %308 = cast(%var_1397, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %309 = reshape(%308, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
  %310 = @func_1003(%309) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(12, 9, 14), uint8]) */;
  %311 = cast(%var_1352, dtype="int16") /* ty=Tensor[(14, 1, 1), int16] */;
  %312 = cast(%var_1353, dtype="int16") /* ty=Tensor[(14, 7, 13), int16] */;
  %313 = minimum(%311, %312) /* ty=Tensor[(14, 7, 13), int16] */;
  %314 = cast(%313, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %315 = log(%314) /* ty=Tensor[(14, 7, 13), float32] */;
  %316 = cast(%313, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %320 = %300.0;
  %321 = %307.8;
  %322 = %310.1;
  %323 = mod(%318, %319) /* ty=Tensor[(14, 7, 13), float32] */;
  (%320, meta[relay.Constant][19] /* ty=Tensor[(480), float32] */, %var_1366, %321, %var_1392, meta[relay.Constant][20] /* ty=Tensor[(336), float64] */, %322, %var_1397, %323)
}

def @func_5224(%var_5180: Tensor[(12, 6, 13), int16], %var_5181: Tensor[(12, 6, 13), int16], %var_5199: Tensor[(1, 1755), float32], %var_5202: Tensor[(420), int32], %var_5205: Tensor[(3584), float32], %var_5206: Tensor[(96), float32]) -> (Tensor[(12, 6, 13), uint16], Tensor[(13, 15, 9), uint16], Tensor[(1300), int64], Tensor[(1, 1755), float32], Tensor[(2184), float64], Tensor[(112), uint64], Tensor[(420), int32], Tensor[(13), bool], Tensor[(256), float32], Tensor[(3584), float32], Tensor[(96), float32], Tensor[(1512), float32], Tensor[(14), int16]) {
  %324 = cast(%var_5181, dtype="bool") /* ty=Tensor[(12, 6, 13), bool] */;
  %325 = shape_of(%var_5180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%var_5180, dtype="bool") /* ty=Tensor[(12, 6, 13), bool] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %328 = less(%326, %327) /* ty=Tensor[(12, 6, 13), bool] */;
  %329 = cast(%var_5180, dtype="uint16") /* ty=Tensor[(12, 6, 13), uint16] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%328, dtype="uint16") /* ty=Tensor[(12, 6, 13), uint16] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %333 = cast(meta[relay.Constant][21] /* ty=Tensor[(1300), int64] */, dtype="int64") /* ty=Tensor[(1300), int64] */;
  %334 = cast(meta[relay.Constant][21] /* ty=Tensor[(1300), int64] */, dtype="int64") /* ty=Tensor[(1300), int64] */;
  %335 = cast(%var_5199, dtype="float32") /* ty=Tensor[(1, 1755), float32] */;
  %336 = cast(meta[relay.Constant][22] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %337 = cast(meta[relay.Constant][23] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %338 = cast(%var_5202, dtype="int32") /* ty=Tensor[(420), int32] */;
  %339 = cast(meta[relay.Constant][21] /* ty=Tensor[(1300), int64] */, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %340 = cast(meta[relay.Constant][24] /* ty=Tensor[(13), bool] */, dtype="bool") /* ty=Tensor[(13), bool] */;
  %341 = cast(meta[relay.Constant][25] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %342 = cast(%var_5205, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %343 = cast(%var_5206, dtype="float32") /* ty=Tensor[(96), float32] */;
  %344 = cast(meta[relay.Constant][26] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %345 = reshape(%333, newshape=[10, 10, 13]) /* ty=Tensor[(10, 10, 13), int64] */;
  %346 = reshape(%334, newshape=[10, 10, 13]) /* ty=Tensor[(10, 10, 13), int64] */;
  %347 = reshape(%335, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %348 = reshape(%336, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %349 = reshape(%337, newshape=[112]) /* ty=Tensor[(112), uint64] */;
  %350 = reshape(%338, newshape=[14, 15, 2]) /* ty=Tensor[(14, 15, 2), int32] */;
  %351 = reshape(%339, newshape=[10, 10, 13]) /* ty=Tensor[(10, 10, 13), float64] */;
  %352 = reshape(%340, newshape=[13]) /* ty=Tensor[(13), bool] */;
  %353 = reshape(%341, newshape=[256]) /* ty=Tensor[(256), float32] */;
  %354 = reshape(%342, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %355 = reshape(%343, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %356 = reshape(%344, newshape=[378, 4]) /* ty=Tensor[(378, 4), float32] */;
  %357 = @func_5043(%345, %346, %347, %348, %349, %350, %351, %352, %353, %354, %355, %356) /* ty=(Tensor[(2184), float64], Tensor[(1755), float32], Tensor[(2184), float64], Tensor[(24, 14), float64], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(14, 15, 2), float32], Tensor[(1274), int16], Tensor[(13, 15, 9), uint16], Tensor[(9, 12, 13), bool], Tensor[(13), bool], Tensor[(10, 10, 13), int32], Tensor[(5, 3, 16), int32], Tensor[(256), float32], Tensor[(3584), float32], Tensor[(700), uint64], Tensor[(96), float32], Tensor[(378, 4), float32], Tensor[(480), float32], Tensor[(14), int16]) */;
  %358 = cast(%var_5206, dtype="float32") /* ty=Tensor[(96), float32] */;
  %359 = cast(meta[relay.Constant][26] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %360 = reshape(%358, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float32] */;
  %361 = reshape(%359, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %362 = @func_1595(%360, %361) /* ty=(Tensor[(4, 6, 4), float32], Tensor[(1, 112), uint64], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1, 2184), float64], Tensor[(112), uint64], Tensor[(1512), float32]) */;
  %363 = add(%331, %332) /* ty=Tensor[(12, 6, 13), uint16] */;
  %364 = %357.8;
  %365 = %362.2;
  (%363, %364, meta[relay.Constant][21] /* ty=Tensor[(1300), int64] */, %var_5199, meta[relay.Constant][22] /* ty=Tensor[(2184), float64] */, meta[relay.Constant][23] /* ty=Tensor[(112), uint64] */, %var_5202, meta[relay.Constant][24] /* ty=Tensor[(13), bool] */, meta[relay.Constant][25] /* ty=Tensor[(256), float32] */, %var_5205, %var_5206, meta[relay.Constant][26] /* ty=Tensor[(1512), float32] */, %365)
}

def @func_5043(%var_4954: Tensor[(10, 10, 13), int64], %var_4955: Tensor[(10, 10, 13), int64], %var_4972: Tensor[(1755), float32], %var_4973: Tensor[(2184), float64], %var_4983: Tensor[(112), uint64], %var_4992: Tensor[(14, 15, 2), int32], %var_5013: Tensor[(10, 10, 13), float64], %var_5018: Tensor[(13), bool], %var_5031: Tensor[(256), float32], %var_5032: Tensor[(3584), float32], %var_5034: Tensor[(96), float32], %var_5035: Tensor[(378, 4), float32]) -> (Tensor[(2184), float64], Tensor[(1755), float32], Tensor[(2184), float64], Tensor[(24, 14), float64], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(14, 15, 2), float32], Tensor[(1274), int16], Tensor[(13, 15, 9), uint16], Tensor[(9, 12, 13), bool], Tensor[(13), bool], Tensor[(10, 10, 13), int32], Tensor[(5, 3, 16), int32], Tensor[(256), float32], Tensor[(3584), float32], Tensor[(700), uint64], Tensor[(96), float32], Tensor[(378, 4), float32], Tensor[(480), float32], Tensor[(14), int16]) {
  %366 = cast(%var_4972, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %367 = cast(%var_4973, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %368 = cast(%var_4972, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %369 = reshape(%366, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
  %370 = reshape(%367, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %371 = reshape(%368, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
  %372 = @func_1243(%369, %370, %371) /* ty=(Tensor[(13, 15, 9), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(13, 15, 9), uint16], Tensor[(13, 14, 12), float32]) */;
  %373 = cast(%var_4983, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %374 = cast(meta[relay.Constant][27] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %375 = reshape(%373, newshape=[112]) /* ty=Tensor[(112), uint64] */;
  %376 = reshape(%374, newshape=[24, 14]) /* ty=Tensor[(24, 14), float64] */;
  %377 = @func_4350(%375, %376) /* ty=(Tensor[(3, 12, 5), float32], Tensor[(3, 16, 7), uint16], Tensor[(112), uint64], Tensor[(24, 14), float64]) */;
  %378 = cast(%var_4983, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %379 = reshape(%378, newshape=[112]) /* ty=Tensor[(112), uint64] */;
  %380 = @func_4565(%379) /* ty=(Tensor[(14, 15, 2), int32], Tensor[(14, 15, 2), bool], Tensor[(14, 7, 13), float32], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1092, 2), float64], Tensor[(112), uint64], Tensor[(1512), float32]) */;
  %381 = %380.0;
  %382 = cast(%var_4992, dtype="float32") /* ty=Tensor[(14, 15, 2), float32] */;
  %383 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%381, dtype="float32") /* ty=Tensor[(14, 15, 2), float32] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %386 = cast(%var_4983, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %387 = reshape(%386, newshape=[112]) /* ty=Tensor[(112), uint64] */;
  %388 = @func_4565(%387) /* ty=(Tensor[(14, 15, 2), int32], Tensor[(14, 15, 2), bool], Tensor[(14, 7, 13), float32], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1092, 2), float64], Tensor[(112), uint64], Tensor[(1512), float32]) */;
  %389 = cast(%var_4972, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %390 = cast(%var_4973, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %391 = cast(%var_4972, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %392 = reshape(%389, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
  %393 = reshape(%390, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %394 = reshape(%391, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
  %395 = @func_1243(%392, %393, %394) /* ty=(Tensor[(13, 15, 9), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(13, 15, 9), uint16], Tensor[(13, 14, 12), float32]) */;
  %396 = cast(%var_5018, dtype="bool") /* ty=Tensor[(13), bool] */;
  %397 = reshape(%396, newshape=[1, 1, 13]) /* ty=Tensor[(1, 1, 13), bool] */;
  %398 = @func_3128(%397) /* ty=(Tensor[(9, 12, 13), bool], Tensor[(5, 3, 16), int32], Tensor[(120, 2), int32]) */;
  %399 = cast(%var_4955, dtype="int64") /* ty=Tensor[(10, 10, 13), int64] */;
  %400 = shape_of(%var_4954, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%var_4954, dtype="int64") /* ty=Tensor[(10, 10, 13), int64] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %403 = maximum(%401, %402) /* ty=Tensor[(10, 10, 13), int64] */;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(10, 10, 13), float64] */;
  %405 = sigmoid(%404) /* ty=Tensor[(10, 10, 13), float64] */;
  %406 = cast(%var_5013, dtype="bool") /* ty=Tensor[(10, 10, 13), bool] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="bool") /* ty=Tensor[(10, 10, 13), bool] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %410 = greater(%408, %409) /* ty=Tensor[(10, 10, 13), bool] */;
  %411 = cast(%410, dtype="int32") /* ty=Tensor[(10, 10, 13), int32] */;
  %412 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%405, dtype="int32") /* ty=Tensor[(10, 10, 13), int32] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %415 = cast(%var_5031, dtype="float32") /* ty=Tensor[(256), float32] */;
  %416 = cast(%var_5032, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %417 = cast(meta[relay.Constant][28] /* ty=Tensor[(700), uint64] */, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %418 = cast(%var_5034, dtype="float32") /* ty=Tensor[(96), float32] */;
  %419 = cast(%var_5035, dtype="float32") /* ty=Tensor[(378, 4), float32] */;
  %420 = cast(meta[relay.Constant][29] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %421 = cast(%var_4973, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %422 = cast(meta[relay.Constant][30] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
  %423 = %388.4;
  %424 = cast(%423, dtype="int16") /* ty=Tensor[(1274), int16] */;
  %425 = cast(%var_5032, dtype="float64") /* ty=Tensor[(3584), float64] */;
  %426 = reshape(%415, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), float32] */;
  %427 = reshape(%416, newshape=[16, 16, 14]) /* ty=Tensor[(16, 16, 14), float32] */;
  %428 = reshape(%417, newshape=[700]) /* ty=Tensor[(700), uint64] */;
  %429 = reshape(%418, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
  %430 = reshape(%419, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %431 = reshape(%420, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %432 = reshape(%421, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %433 = reshape(%422, newshape=[14, 1]) /* ty=Tensor[(14, 1), int16] */;
  %434 = reshape(%424, newshape=[1274]) /* ty=Tensor[(1274), int16] */;
  %435 = reshape(%425, newshape=[16, 16, 14]) /* ty=Tensor[(16, 16, 14), float64] */;
  %436 = @func_1845(%426, %427, %428, %429, %430, %431, %432, %433, %434, %435) /* ty=(Tensor[(14, 5, 10), uint64], Tensor[(700), uint64], Tensor[(16, 16, 14), bool], Tensor[(1, 112), uint64], Tensor[(8, 12), float32], Tensor[(1512), float32], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(14, 1), int16], Tensor[(1274), int16], Tensor[(16, 16, 14), float32], Tensor[(336), float64], Tensor[(16, 16, 14), float64], Tensor[(14, 5, 10), uint64], Tensor[(336), float64], Tensor[(5, 3, 16), int32]) */;
  %437 = %372.2;
  %438 = %377.3;
  %439 = floor_mod(%384, %385) /* ty=Tensor[(14, 15, 2), float32] */;
  %440 = %395.3;
  %441 = %398.0;
  %442 = minimum(%413, %414) /* ty=Tensor[(10, 10, 13), int32] */;
  %443 = %436.19;
  (%437, %var_4972, %var_4973, %438, %var_4983, meta[relay.Constant][27] /* ty=Tensor[(336), float64] */, %439, %423, %440, %441, %var_5018, %442, %443, %var_5031, %var_5032, meta[relay.Constant][28] /* ty=Tensor[(700), uint64] */, %var_5034, %var_5035, meta[relay.Constant][29] /* ty=Tensor[(480), float32] */, meta[relay.Constant][30] /* ty=Tensor[(14), int16] */)
}

def @func_948(%var_848: Tensor[(1, 16, 7), uint64], %var_902: Tensor[(3, 16, 7), float64], %var_935: Tensor[(3, 16, 7), float64]) -> (Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) {
  %444 = cast(%var_848, dtype="bool") /* ty=Tensor[(1, 16, 7), bool] */;
  %445 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 16, 7), uint64] */, dtype="bool") /* ty=Tensor[(3, 16, 7), bool] */;
  %446 = less_equal(%444, %445) /* ty=Tensor[(3, 16, 7), bool] */;
  %447 = cast(%446, dtype="float32") /* ty=Tensor[(3, 16, 7), float32] */;
  %448 = cast(%var_848, dtype="float32") /* ty=Tensor[(1, 16, 7), float32] */;
  %449 = divide(%447, %448) /* ty=Tensor[(3, 16, 7), float32] */;
  %450 = cast(%446, dtype="float32") /* ty=Tensor[(3, 16, 7), float32] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%449, dtype="float32") /* ty=Tensor[(3, 16, 7), float32] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %454 = cast(meta[relay.Constant][32] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %455 = cast(meta[relay.Constant][33] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %456 = reshape(%454, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float32] */;
  %457 = reshape(%455, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %458 = @func_571(%456, %457) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) */;
  %459 = cast(%446, dtype="float32") /* ty=Tensor[(3, 16, 7), float32] */;
  %460 = asinh(%459) /* ty=Tensor[(3, 16, 7), float32] */;
  %461 = cast(%var_848, dtype="uint64") /* ty=Tensor[(1, 16, 7), uint64] */;
  %462 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 16, 7), uint64] */, dtype="uint64") /* ty=Tensor[(3, 16, 7), uint64] */;
  %463 = maximum(%461, %462) /* ty=Tensor[(3, 16, 7), uint64] */;
  %464 = cast(%463, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
  %465 = erf(%464) /* ty=Tensor[(3, 16, 7), float64] */;
  %466 = cast(%var_902, dtype="bool") /* ty=Tensor[(3, 16, 7), bool] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%465, dtype="bool") /* ty=Tensor[(3, 16, 7), bool] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %470 = logical_and(%468, %469) /* ty=Tensor[(3, 16, 7), bool] */;
  %471 = cast(%470, dtype="uint16") /* ty=Tensor[(3, 16, 7), uint16] */;
  %472 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%460, dtype="uint16") /* ty=Tensor[(3, 16, 7), uint16] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %475 = %458.2;
  %476 = cast(%475, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %477 = reshape(%476, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
  %478 = @func_491(%477) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) */;
  %479 = cast(meta[relay.Constant][34] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %480 = cast(meta[relay.Constant][34] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %481 = reshape(%479, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %482 = reshape(%480, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %483 = @func_783(%481, %482) /* ty=(Tensor[(5, 3, 16), int32],) */;
  %484 = cast(%460, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
  %485 = sigmoid(%484) /* ty=Tensor[(3, 16, 7), float64] */;
  %486 = cast(%var_935, dtype="float32") /* ty=Tensor[(3, 16, 7), float32] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%485, dtype="float32") /* ty=Tensor[(3, 16, 7), float32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %490 = multiply(%452, %453) /* ty=Tensor[(3, 16, 7), float32] */;
  %491 = add(%473, %474) /* ty=Tensor[(3, 16, 7), uint16] */;
  %492 = %478.2;
  %493 = %483.0;
  %494 = floor_divide(%488, %489) /* ty=Tensor[(3, 16, 7), float32] */;
  (%490, %475, meta[relay.Constant][32] /* ty=Tensor[(480), float32] */, meta[relay.Constant][33] /* ty=Tensor[(2184), float64] */, %491, %492, %493, meta[relay.Constant][34] /* ty=Tensor[(240), int32] */, %494)
}

def @func_491(%var_471: Tensor[(13, 14, 12), float64]) -> (Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) {
  %495 = cast(%var_471, dtype="float64") /* ty=Tensor[(13, 14, 12), float64] */;
  %496 = asin(%495) /* ty=Tensor[(13, 14, 12), float64] */;
  %497 = cast(%var_471, dtype="bool") /* ty=Tensor[(13, 14, 12), bool] */;
  %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%496, dtype="bool") /* ty=Tensor[(13, 14, 12), bool] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %501 = cast(%496, dtype="float32") /* ty=Tensor[(13, 14, 12), float32] */;
  %502 = exp(%501) /* ty=Tensor[(13, 14, 12), float32] */;
  %503 = cast(%502, dtype="float64") /* ty=Tensor[(13, 14, 12), float64] */;
  %504 = cast(%502, dtype="float64") /* ty=Tensor[(13, 14, 12), float64] */;
  %505 = cast(%502, dtype="float32") /* ty=Tensor[(13, 14, 12), float32] */;
  %506 = logical_and(%499, %500) /* ty=Tensor[(13, 14, 12), bool] */;
  %507 = acos(%503) /* ty=Tensor[(13, 14, 12), float64] */;
  %508 = log2(%504) /* ty=Tensor[(13, 14, 12), float64] */;
  %509 = sqrt(%505) /* ty=Tensor[(13, 14, 12), float32] */;
  (%506, %507, %508, %509)
}

def @func_6130(%var_6063: Tensor[(11, 9, 2), uint64], %var_6109: Tensor[(140), int8], %var_6110: Tensor[(72), float64], %var_6111: Tensor[(112), uint64], %var_6112: Tensor[(336), float64]) -> (Tensor[(11, 9, 2), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(208), float64], Tensor[(140), int8], Tensor[(72), float64], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(3, 16, 7), float32], Tensor[(13, 14, 12), float64]) {
  %510 = @func_6013() /* ty=Tensor[(11, 9, 2), uint64] */;
  %511 = cast(%var_6063, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%510, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %515 = cast(meta[relay.Constant][35] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %516 = reshape(%515, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
  %517 = @func_491(%516) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) */;
  %518 = cast(meta[relay.Constant][36] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
  %519 = cast(meta[relay.Constant][36] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
  %520 = cast(%var_6109, dtype="int8") /* ty=Tensor[(140), int8] */;
  %521 = cast(meta[relay.Constant][35] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %522 = cast(%var_6110, dtype="float64") /* ty=Tensor[(72), float64] */;
  %523 = cast(%var_6111, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %524 = cast(%var_6112, dtype="float64") /* ty=Tensor[(336), float64] */;
  %525 = reshape(%518, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float64] */;
  %526 = reshape(%519, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float64] */;
  %527 = reshape(%520, newshape=[1, 140]) /* ty=Tensor[(1, 140), int8] */;
  %528 = reshape(%521, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %529 = reshape(%522, newshape=[18, 4]) /* ty=Tensor[(18, 4), float64] */;
  %530 = reshape(%523, newshape=[112]) /* ty=Tensor[(112), uint64] */;
  %531 = reshape(%524, newshape=[336, 1]) /* ty=Tensor[(336, 1), float64] */;
  %532 = @func_2711(%525, %526, %527, %528, %529, %530, %531) /* ty=(Tensor[(4, 4, 13), float64], Tensor[(10, 14, 1), float32], Tensor[(1, 140), int8], Tensor[(2184), float64], Tensor[(4, 4, 13), float32], Tensor[(4, 9, 2), float64], Tensor[(18, 4), float64], Tensor[(3, 16, 7), uint16], Tensor[(112), uint64], Tensor[(336, 1), float64], Tensor[(3, 16, 7), float32]) */;
  %533 = cast(meta[relay.Constant][36] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
  %534 = cast(meta[relay.Constant][36] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
  %535 = cast(%var_6109, dtype="int8") /* ty=Tensor[(140), int8] */;
  %536 = cast(meta[relay.Constant][35] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %537 = cast(%var_6110, dtype="float64") /* ty=Tensor[(72), float64] */;
  %538 = cast(%var_6111, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %539 = cast(%var_6112, dtype="float64") /* ty=Tensor[(336), float64] */;
  %540 = reshape(%533, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float64] */;
  %541 = reshape(%534, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float64] */;
  %542 = reshape(%535, newshape=[1, 140]) /* ty=Tensor[(1, 140), int8] */;
  %543 = reshape(%536, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %544 = reshape(%537, newshape=[18, 4]) /* ty=Tensor[(18, 4), float64] */;
  %545 = reshape(%538, newshape=[112]) /* ty=Tensor[(112), uint64] */;
  %546 = reshape(%539, newshape=[336, 1]) /* ty=Tensor[(336, 1), float64] */;
  %547 = @func_2711(%540, %541, %542, %543, %544, %545, %546) /* ty=(Tensor[(4, 4, 13), float64], Tensor[(10, 14, 1), float32], Tensor[(1, 140), int8], Tensor[(2184), float64], Tensor[(4, 4, 13), float32], Tensor[(4, 9, 2), float64], Tensor[(18, 4), float64], Tensor[(3, 16, 7), uint16], Tensor[(112), uint64], Tensor[(336, 1), float64], Tensor[(3, 16, 7), float32]) */;
  %548 = %517.3;
  %549 = cast(%548, dtype="float64") /* ty=Tensor[(13, 14, 12), float64] */;
  %550 = reshape(%549, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
  %551 = @func_491(%550) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) */;
  %552 = power(%513, %514) /* ty=Tensor[(11, 9, 2), float32] */;
  %553 = %532.7;
  %554 = %547.10;
  %555 = %551.2;
  (%552, %548, meta[relay.Constant][35] /* ty=Tensor[(2184), float64] */, %553, meta[relay.Constant][36] /* ty=Tensor[(208), float64] */, %var_6109, %var_6110, %var_6111, %var_6112, %554, %555)
}

def @func_571(%var_538: Tensor[(8, 4, 15), float32], %var_553: Tensor[(2184), float64]) -> (Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) {
  %556 = cast(%var_538, dtype="float32") /* ty=Tensor[(8, 4, 15), float32] */;
  %557 = acosh(%556) /* ty=Tensor[(8, 4, 15), float32] */;
  %558 = cast(%557, dtype="float32") /* ty=Tensor[(8, 4, 15), float32] */;
  %559 = shape_of(%var_538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%var_538, dtype="float32") /* ty=Tensor[(8, 4, 15), float32] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %562 = cast(%var_553, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %563 = reshape(%562, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
  %564 = @func_491(%563) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) */;
  %565 = maximum(%560, %561) /* ty=Tensor[(8, 4, 15), float32] */;
  %566 = %564.0;
  (%565, %566, %var_553)
}

def @func_6768() -> (Tensor[(11, 9, 2), float64],) {
  %567 = @func_5732() /* ty=Tensor[(11, 9, 2), float64] */;
  (%567,)
}

def @func_6497() -> (Tensor[(5, 2, 1), float32], Tensor[(5, 2, 1), float64]) {
  %568 = @func_6051() /* ty=(Tensor[(5, 2, 1), float32],) */;
  %569 = @func_5889() /* ty=Tensor[(5, 2, 1), float32] */;
  %570 = cast(%569, dtype="float32") /* ty=Tensor[(5, 2, 1), float32] */;
  %571 = atan(%570) /* ty=Tensor[(5, 2, 1), float32] */;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(5, 2, 1), float64] */;
  %573 = %568.0;
  %574 = acosh(%572) /* ty=Tensor[(5, 2, 1), float64] */;
  (%573, %574)
}

def @func_1595(%var_1578: Tensor[(4, 6, 4), float32], %var_1589: Tensor[(1512), float32]) -> (Tensor[(4, 6, 4), float32], Tensor[(1, 112), uint64], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1, 2184), float64], Tensor[(112), uint64], Tensor[(1512), float32]) {
  %575 = cast(%var_1578, dtype="float32") /* ty=Tensor[(4, 6, 4), float32] */;
  %576 = cast(meta[relay.Constant][37] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
  %577 = cast(meta[relay.Constant][38] /* ty=Tensor[(1274), int16] */, dtype="int16") /* ty=Tensor[(1274), int16] */;
  %578 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 2184), float64] */, dtype="float64") /* ty=Tensor[(1, 2184), float64] */;
  %579 = cast(meta[relay.Constant][40] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %580 = cast(%var_1589, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %581 = reshape(%576, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), int16] */;
  %582 = reshape(%577, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), int16] */;
  %583 = reshape(%578, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %584 = reshape(%579, newshape=[1, 112]) /* ty=Tensor[(1, 112), uint64] */;
  %585 = reshape(%580, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %586 = @func_1423(%581, %582, %583, %584, %585) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 112), uint64], Tensor[(336), float64], Tensor[(112), uint64], Tensor[(1512), float32], Tensor[(14, 7, 13), float32]) */;
  %587 = atanh(%575) /* ty=Tensor[(4, 6, 4), float32] */;
  %588 = %586.4;
  (%587, %588, meta[relay.Constant][37] /* ty=Tensor[(14), int16] */, meta[relay.Constant][38] /* ty=Tensor[(1274), int16] */, meta[relay.Constant][39] /* ty=Tensor[(1, 2184), float64] */, meta[relay.Constant][40] /* ty=Tensor[(112), uint64] */, %var_1589)
}

def @func_3910(%var_3894: Tensor[(10, 3, 2), float64], %var_3895: Tensor[(10, 3, 2), float64], %var_3902: Tensor[(240), int32], %var_3905: Tensor[(480), float32]) -> (Tensor[(10, 3, 2), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64]) {
  %589 = cast(%var_3895, dtype="float64") /* ty=Tensor[(10, 3, 2), float64] */;
  %590 = shape_of(%var_3894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%var_3894, dtype="float64") /* ty=Tensor[(10, 3, 2), float64] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %593 = cast(%var_3902, dtype="int32") /* ty=Tensor[(240), int32] */;
  %594 = cast(%var_3902, dtype="int32") /* ty=Tensor[(240), int32] */;
  %595 = reshape(%593, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %596 = reshape(%594, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %597 = @func_783(%595, %596) /* ty=(Tensor[(5, 3, 16), int32],) */;
  %598 = cast(%var_3905, dtype="float32") /* ty=Tensor[(480), float32] */;
  %599 = cast(meta[relay.Constant][41] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %600 = reshape(%598, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float32] */;
  %601 = reshape(%599, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %602 = @func_571(%600, %601) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) */;
  %603 = floor_divide(%591, %592) /* ty=Tensor[(10, 3, 2), float64] */;
  %604 = %597.0;
  %605 = %602.1;
  (%603, %604, %var_3902, %605, %var_3905, meta[relay.Constant][41] /* ty=Tensor[(2184), float64] */)
}

def @func_1845(%var_1712: Tensor[(16, 16, 1), float32], %var_1713: Tensor[(16, 16, 14), float32], %var_1742: Tensor[(700), uint64], %var_1762: Tensor[(8, 12), float32], %var_1763: Tensor[(1512), float32], %var_1781: Tensor[(480), float32], %var_1782: Tensor[(2184), float64], %var_1804: Tensor[(14, 1), int16], %var_1805: Tensor[(1274), int16], %var_1811: Tensor[(16, 16, 14), float64]) -> (Tensor[(14, 5, 10), uint64], Tensor[(700), uint64], Tensor[(16, 16, 14), bool], Tensor[(1, 112), uint64], Tensor[(8, 12), float32], Tensor[(1512), float32], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(14, 1), int16], Tensor[(1274), int16], Tensor[(16, 16, 14), float32], Tensor[(336), float64], Tensor[(16, 16, 14), float64], Tensor[(14, 5, 10), uint64], Tensor[(336), float64], Tensor[(5, 3, 16), int32]) {
  %606 = cast(%var_1742, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %607 = cast(%var_1742, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %608 = cast(%var_1742, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %609 = reshape(%606, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), uint64] */;
  %610 = reshape(%607, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), uint64] */;
  %611 = reshape(%608, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), uint64] */;
  %612 = @func_104(%609, %610, %611) /* ty=(Tensor[(14, 5, 10), uint64], Tensor[(14, 5, 10), float32]) */;
  %613 = cast(%var_1712, dtype="float64") /* ty=Tensor[(16, 16, 1), float64] */;
  %614 = exp(%613) /* ty=Tensor[(16, 16, 1), float64] */;
  %615 = cast(%var_1712, dtype="float32") /* ty=Tensor[(16, 16, 1), float32] */;
  %616 = cast(%var_1713, dtype="float32") /* ty=Tensor[(16, 16, 14), float32] */;
  %617 = multiply(%615, %616) /* ty=Tensor[(16, 16, 14), float32] */;
  %618 = cast(%614, dtype="uint16") /* ty=Tensor[(16, 16, 1), uint16] */;
  %619 = cast(%617, dtype="uint16") /* ty=Tensor[(16, 16, 14), uint16] */;
  %620 = add(%618, %619) /* ty=Tensor[(16, 16, 14), uint16] */;
  %621 = cast(%620, dtype="bool") /* ty=Tensor[(16, 16, 14), bool] */;
  %622 = cast(%614, dtype="bool") /* ty=Tensor[(16, 16, 1), bool] */;
  %623 = cast(%var_1762, dtype="float32") /* ty=Tensor[(8, 12), float32] */;
  %624 = cast(%var_1763, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %625 = reshape(%623, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float32] */;
  %626 = reshape(%624, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %627 = @func_1595(%625, %626) /* ty=(Tensor[(4, 6, 4), float32], Tensor[(1, 112), uint64], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1, 2184), float64], Tensor[(112), uint64], Tensor[(1512), float32]) */;
  %628 = cast(meta[relay.Constant][42] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %629 = cast(meta[relay.Constant][42] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %630 = reshape(%628, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %631 = reshape(%629, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %632 = @func_783(%630, %631) /* ty=(Tensor[(5, 3, 16), int32],) */;
  %633 = cast(%var_1781, dtype="float32") /* ty=Tensor[(480), float32] */;
  %634 = cast(%var_1782, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %635 = reshape(%633, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float32] */;
  %636 = reshape(%634, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %637 = @func_571(%635, %636) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) */;
  %638 = cast(%var_1804, dtype="int16") /* ty=Tensor[(14, 1), int16] */;
  %639 = cast(%var_1805, dtype="int16") /* ty=Tensor[(1274), int16] */;
  %640 = %637.1;
  %641 = cast(%640, dtype="float64") /* ty=Tensor[(13, 14, 12), float64] */;
  %642 = %627.1;
  %643 = cast(%642, dtype="uint64") /* ty=Tensor[(1, 112), uint64] */;
  %644 = cast(%var_1763, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %645 = reshape(%638, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), int16] */;
  %646 = reshape(%639, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), int16] */;
  %647 = reshape(%641, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %648 = reshape(%643, newshape=[1, 112]) /* ty=Tensor[(1, 112), uint64] */;
  %649 = reshape(%644, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %650 = @func_1423(%645, %646, %647, %648, %649) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 112), uint64], Tensor[(336), float64], Tensor[(112), uint64], Tensor[(1512), float32], Tensor[(14, 7, 13), float32]) */;
  %651 = cast(%620, dtype="float64") /* ty=Tensor[(16, 16, 14), float64] */;
  %652 = log(%651) /* ty=Tensor[(16, 16, 14), float64] */;
  %653 = cast(%var_1811, dtype="float32") /* ty=Tensor[(16, 16, 14), float32] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="float32") /* ty=Tensor[(16, 16, 14), float32] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %657 = cast(%var_1804, dtype="int16") /* ty=Tensor[(14, 1), int16] */;
  %658 = cast(%var_1805, dtype="int16") /* ty=Tensor[(1274), int16] */;
  %659 = cast(%var_1782, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %660 = cast(%642, dtype="uint64") /* ty=Tensor[(1, 112), uint64] */;
  %661 = cast(%var_1763, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %662 = reshape(%657, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), int16] */;
  %663 = reshape(%658, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), int16] */;
  %664 = reshape(%659, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %665 = reshape(%660, newshape=[1, 112]) /* ty=Tensor[(1, 112), uint64] */;
  %666 = reshape(%661, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %667 = @func_1423(%662, %663, %664, %665, %666) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 112), uint64], Tensor[(336), float64], Tensor[(112), uint64], Tensor[(1512), float32], Tensor[(14, 7, 13), float32]) */;
  %668 = cast(%652, dtype="float32") /* ty=Tensor[(16, 16, 14), float32] */;
  %669 = acosh(%668) /* ty=Tensor[(16, 16, 14), float32] */;
  %670 = cast(%669, dtype="float64") /* ty=Tensor[(16, 16, 14), float64] */;
  %671 = %612.0;
  %672 = cast(%671, dtype="uint64") /* ty=Tensor[(14, 5, 10), uint64] */;
  %673 = cast(%671, dtype="uint64") /* ty=Tensor[(14, 5, 10), uint64] */;
  %674 = cast(%var_1742, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %675 = reshape(%672, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), uint64] */;
  %676 = reshape(%673, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), uint64] */;
  %677 = reshape(%674, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), uint64] */;
  %678 = @func_104(%675, %676, %677) /* ty=(Tensor[(14, 5, 10), uint64], Tensor[(14, 5, 10), float32]) */;
  %679 = cast(%var_1763, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %680 = reshape(%679, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
  %681 = @func_1003(%680) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(12, 9, 14), uint8]) */;
  %682 = %632.0;
  %683 = cast(%682, dtype="int32") /* ty=Tensor[(5, 3, 16), int32] */;
  %684 = cast(meta[relay.Constant][42] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %685 = reshape(%683, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %686 = reshape(%684, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %687 = @func_783(%685, %686) /* ty=(Tensor[(5, 3, 16), int32],) */;
  %688 = logical_or(%621, %622) /* ty=Tensor[(16, 16, 14), bool] */;
  %689 = %650.1;
  %690 = floor_mod(%655, %656) /* ty=Tensor[(16, 16, 14), float32] */;
  %691 = %667.5;
  %692 = log10(%670) /* ty=Tensor[(16, 16, 14), float64] */;
  %693 = %678.0;
  %694 = %681.2;
  %695 = %687.0;
  (%671, %var_1742, %688, %642, %var_1762, %var_1763, %682, meta[relay.Constant][42] /* ty=Tensor[(240), int32] */, %640, %var_1781, %var_1782, %689, %var_1804, %var_1805, %690, %691, %692, %693, %694, %695)
}

def @func_2418(%var_2403: Tensor[(5, 10, 1), float32]) -> (Tensor[(5, 10, 1), float32],) {
  %696 = cast(%var_2403, dtype="float32") /* ty=Tensor[(5, 10, 1), float32] */;
  %697 = acosh(%696) /* ty=Tensor[(5, 10, 1), float32] */;
  (%697,)
}

def @func_2393(%var_2388: Tensor[(4, 9, 2), float64]) -> (Tensor[(4, 9, 2), float64],) {
  %698 = cast(%var_2388, dtype="float64") /* ty=Tensor[(4, 9, 2), float64] */;
  %699 = acos(%698) /* ty=Tensor[(4, 9, 2), float64] */;
  (%699,)
}

def @func_5648() -> (Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) {
  %700 = cast(meta[relay.Constant][44] /* ty=Tensor[(11, 9, 2), uint64] */, dtype="uint64") /* ty=Tensor[(11, 9, 2), uint64] */;
  %701 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(11, 9, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 9, 2), uint64] */, dtype="uint64") /* ty=Tensor[(11, 9, 2), uint64] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %704 = cast(meta[relay.Constant][43] /* ty=Tensor[(11, 9, 2), uint64] */, dtype="float64") /* ty=Tensor[(11, 9, 2), float64] */;
  %705 = rsqrt(%704) /* ty=Tensor[(11, 9, 2), float64] */;
  %706 = cast(%705, dtype="float64") /* ty=Tensor[(11, 9, 2), float64] */;
  %707 = maximum(%702, %703) /* ty=Tensor[(11, 9, 2), uint64] */;
  %708 = atan(%706) /* ty=Tensor[(11, 9, 2), float64] */;
  (%707, %708)
}

def @func_4565(%var_4551: Tensor[(112), uint64]) -> (Tensor[(14, 15, 2), int32], Tensor[(14, 15, 2), bool], Tensor[(14, 7, 13), float32], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1092, 2), float64], Tensor[(112), uint64], Tensor[(1512), float32]) {
  %709 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 15, 2), int32] */, dtype="int32") /* ty=Tensor[(14, 15, 2), int32] */;
  %710 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(14, 15, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(meta[relay.Constant][45] /* ty=Tensor[(14, 15, 2), int32] */, dtype="int32") /* ty=Tensor[(14, 15, 2), int32] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %713 = cast(meta[relay.Constant][45] /* ty=Tensor[(14, 15, 2), int32] */, dtype="bool") /* ty=Tensor[(14, 15, 2), bool] */;
  %714 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(14, 15, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 15, 2), int32] */, dtype="bool") /* ty=Tensor[(14, 15, 2), bool] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %717 = cast(meta[relay.Constant][47] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
  %718 = cast(meta[relay.Constant][48] /* ty=Tensor[(1274), int16] */, dtype="int16") /* ty=Tensor[(1274), int16] */;
  %719 = cast(meta[relay.Constant][49] /* ty=Tensor[(1092, 2), float64] */, dtype="float64") /* ty=Tensor[(1092, 2), float64] */;
  %720 = cast(%var_4551, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %721 = cast(meta[relay.Constant][50] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %722 = reshape(%717, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), int16] */;
  %723 = reshape(%718, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), int16] */;
  %724 = reshape(%719, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %725 = reshape(%720, newshape=[1, 112]) /* ty=Tensor[(1, 112), uint64] */;
  %726 = reshape(%721, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %727 = @func_1423(%722, %723, %724, %725, %726) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 112), uint64], Tensor[(336), float64], Tensor[(112), uint64], Tensor[(1512), float32], Tensor[(14, 7, 13), float32]) */;
  %728 = maximum(%711, %712) /* ty=Tensor[(14, 15, 2), int32] */;
  %729 = less_equal(%715, %716) /* ty=Tensor[(14, 15, 2), bool] */;
  %730 = %727.8;
  (%728, %729, %730, meta[relay.Constant][47] /* ty=Tensor[(14), int16] */, meta[relay.Constant][48] /* ty=Tensor[(1274), int16] */, meta[relay.Constant][49] /* ty=Tensor[(1092, 2), float64] */, %var_4551, meta[relay.Constant][50] /* ty=Tensor[(1512), float32] */)
}

def @func_6013() -> Tensor[(11, 9, 2), uint64] {
  %731 = @func_5648() /* ty=(Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) */;
  %731.0
}

def @func_5109(%var_5067: Tensor[(1, 15, 12), uint32]) -> (Tensor[(1, 15, 12), bool], Tensor[(10, 11, 14), bool], Tensor[(1540), int8]) {
  %732 = cast(meta[relay.Constant][51] /* ty=uint32 */, dtype="bool") /* ty=bool */;
  %733 = cast(%var_5067, dtype="bool") /* ty=Tensor[(1, 15, 12), bool] */;
  %734 = cast(meta[relay.Constant][52] /* ty=Tensor[(1540), int8] */, dtype="int8") /* ty=Tensor[(1540), int8] */;
  %735 = cast(meta[relay.Constant][52] /* ty=Tensor[(1540), int8] */, dtype="int8") /* ty=Tensor[(1540), int8] */;
  %736 = reshape(%734, newshape=[10, 11, 14]) /* ty=Tensor[(10, 11, 14), int8] */;
  %737 = reshape(%735, newshape=[10, 11, 14]) /* ty=Tensor[(10, 11, 14), int8] */;
  %738 = greater(%732, %733) /* ty=Tensor[(1, 15, 12), bool] */;
  %739 = @func_3808(%736, %737) /* ty=Tensor[(10, 11, 14), bool] */;
  (%738, %739, meta[relay.Constant][52] /* ty=Tensor[(1540), int8] */)
}

def @func_5889() -> Tensor[(5, 2, 1), float32] {
  %740 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(5, 2, 1), float32] */;
  acos(%740) /* ty=Tensor[(5, 2, 1), float32] */
}

def @func_6051() -> (Tensor[(5, 2, 1), float32],) {
  %741 = @func_5889() /* ty=Tensor[(5, 2, 1), float32] */;
  (%741,)
}

def @func_6198(%var_6187: Tensor[(12, 5, 15), float64], %var_6188: Tensor[(12, 5, 15), float64]) -> Tensor[(12, 5, 15), float64] {
  %742 = cast(%var_6188, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %743 = shape_of(%var_6187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%var_6187, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%744, %745) /* ty=Tensor[(12, 5, 15), float64] */
}

def @func_6178(%var_6169: Tensor[(15, 4), float64]) -> (Tensor[(11, 9, 2), float64], Tensor[(10, 3, 2), float64], Tensor[(15, 4), float64], Tensor[(240), int32], Tensor[(8, 60), float32]) {
  %746 = cast(%var_6169, dtype="float64") /* ty=Tensor[(15, 4), float64] */;
  %747 = cast(%var_6169, dtype="float64") /* ty=Tensor[(15, 4), float64] */;
  %748 = cast(meta[relay.Constant][54] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %749 = cast(meta[relay.Constant][55] /* ty=Tensor[(8, 60), float32] */, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
  %750 = reshape(%746, newshape=[10, 3, 2]) /* ty=Tensor[(10, 3, 2), float64] */;
  %751 = reshape(%747, newshape=[10, 3, 2]) /* ty=Tensor[(10, 3, 2), float64] */;
  %752 = reshape(%748, newshape=[240]) /* ty=Tensor[(240), int32] */;
  %753 = reshape(%749, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %754 = @func_3910(%750, %751, %752, %753) /* ty=(Tensor[(10, 3, 2), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64]) */;
  %755 = @func_5732() /* ty=Tensor[(11, 9, 2), float64] */;
  %756 = %754.0;
  (%755, %756, %var_6169, meta[relay.Constant][54] /* ty=Tensor[(240), int32] */, meta[relay.Constant][55] /* ty=Tensor[(8, 60), float32] */)
}

def @func_6358(%var_6354: Tensor[(1755), float32], %var_6355: Tensor[(1092, 2), float64], %var_6356: Tensor[(198), float64]) -> (Tensor[(5, 2, 1), float32], Tensor[(5, 2, 1), float32], Tensor[(4, 9, 2), float64], Tensor[(72), float64], Tensor[(5, 10, 1), float32], Tensor[(50, 1), float32], Tensor[(2184), float64], Tensor[(1755), float32], Tensor[(1092, 2), float64], Tensor[(198), float64]) {
  %757 = @func_6051() /* ty=(Tensor[(5, 2, 1), float32],) */;
  %758 = @func_6051() /* ty=(Tensor[(5, 2, 1), float32],) */;
  %759 = cast(meta[relay.Constant][56] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %760 = reshape(%759, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
  %761 = @func_2393(%760) /* ty=(Tensor[(4, 9, 2), float64],) */;
  %762 = cast(meta[relay.Constant][57] /* ty=Tensor[(50, 1), float32] */, dtype="float32") /* ty=Tensor[(50, 1), float32] */;
  %763 = reshape(%762, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), float32] */;
  %764 = @func_2418(%763) /* ty=(Tensor[(5, 10, 1), float32],) */;
  %765 = cast(%var_6354, dtype="float32") /* ty=Tensor[(1755), float32] */;
  %766 = cast(%var_6355, dtype="float64") /* ty=Tensor[(1092, 2), float64] */;
  %767 = cast(%var_6356, dtype="float64") /* ty=Tensor[(198), float64] */;
  %768 = reshape(%765, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %769 = reshape(%766, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %770 = reshape(%767, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
  %771 = @func_5940(%768, %769, %770) /* ty=(Tensor[(1755), float32], Tensor[(2184), float64], Tensor[(11, 9, 2), float32], Tensor[(11, 9, 2), int64], Tensor[(11, 9, 2), float64], Tensor[(13, 14, 12), float32]) */;
  %772 = %757.0;
  %773 = %758.0;
  %774 = %761.0;
  %775 = %764.0;
  %776 = %771.1;
  (%772, %773, %774, meta[relay.Constant][56] /* ty=Tensor[(72), float64] */, %775, meta[relay.Constant][57] /* ty=Tensor[(50, 1), float32] */, %776, %var_6354, %var_6355, %var_6356)
}

def @func_6647() -> (Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float64], Tensor[(30), float32]) {
  %777 = @func_5756() /* ty=(Tensor[(11, 9, 2), float64],) */;
  %778 = cast(meta[relay.Constant][58] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %779 = reshape(%778, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float32] */;
  %780 = @func_6429(%779) /* ty=(Tensor[(5, 2, 3), uint8], Tensor[(5, 2, 1), float32], Tensor[(11, 9, 2), float64]) */;
  %781 = %777.0;
  %782 = %780.2;
  (%781, %782, meta[relay.Constant][58] /* ty=Tensor[(30), float32] */)
}

def @func_5756() -> (Tensor[(11, 9, 2), float64],) {
  %783 = @func_5648() /* ty=(Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) */;
  %784 = %783.1;
  (%784,)
}

def @func_6429(%var_6395: Tensor[(5, 2, 3), float32]) -> (Tensor[(5, 2, 3), uint8], Tensor[(5, 2, 1), float32], Tensor[(11, 9, 2), float64]) {
  %785 = @func_6051() /* ty=(Tensor[(5, 2, 1), float32],) */;
  %786 = %785.0;
  %787 = cast(%786, dtype="uint8") /* ty=Tensor[(5, 2, 1), uint8] */;
  %788 = cast(%var_6395, dtype="uint8") /* ty=Tensor[(5, 2, 3), uint8] */;
  %789 = cast(%786, dtype="float32") /* ty=Tensor[(5, 2, 1), float32] */;
  %790 = @func_5756() /* ty=(Tensor[(11, 9, 2), float64],) */;
  %791 = right_shift(%787, %788) /* ty=Tensor[(5, 2, 3), uint8] */;
  %792 = erf(%789) /* ty=Tensor[(5, 2, 1), float32] */;
  %793 = %790.0;
  (%791, %792, %793)
}

def @func_5425(%var_5389: uint8, %var_5390: Tensor[(7, 12, 7), uint8], %var_5409: Tensor[(4, 6, 4), float32], %var_5415: Tensor[(480), float32], %var_5416: Tensor[(2184), float64]) -> (Tensor[(7, 12, 7), uint8], Tensor[(96), float32], Tensor[(1512), float32], Tensor[(4, 6, 4), uint8], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64]) {
  %794 = cast(%var_5389, dtype="uint8") /* ty=uint8 */;
  %795 = cast(%var_5390, dtype="uint8") /* ty=Tensor[(7, 12, 7), uint8] */;
  %796 = cast(meta[relay.Constant][59] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %797 = cast(meta[relay.Constant][60] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %798 = reshape(%796, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float32] */;
  %799 = reshape(%797, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %800 = @func_1595(%798, %799) /* ty=(Tensor[(4, 6, 4), float32], Tensor[(1, 112), uint64], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1, 2184), float64], Tensor[(112), uint64], Tensor[(1512), float32]) */;
  %801 = %800.0;
  %802 = cast(%var_5409, dtype="uint8") /* ty=Tensor[(4, 6, 4), uint8] */;
  %803 = shape_of(%801, dtype="int32") /* ty=Tensor[(3), int32] */;
  %804 = cast(%801, dtype="uint8") /* ty=Tensor[(4, 6, 4), uint8] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %806 = cast(%var_5415, dtype="float32") /* ty=Tensor[(480), float32] */;
  %807 = cast(%var_5416, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %808 = reshape(%806, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float32] */;
  %809 = reshape(%807, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %810 = @func_571(%808, %809) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) */;
  %811 = minimum(%794, %795) /* ty=Tensor[(7, 12, 7), uint8] */;
  %812 = logical_xor(%804, %805) /* ty=Tensor[(4, 6, 4), uint8] */;
  %813 = %810.1;
  (%811, meta[relay.Constant][59] /* ty=Tensor[(96), float32] */, meta[relay.Constant][60] /* ty=Tensor[(1512), float32] */, %812, %813, %var_5415, %var_5416)
}

def @func_3808(%var_3790: Tensor[(10, 11, 14), int8], %var_3791: Tensor[(10, 11, 14), int8]) -> Tensor[(10, 11, 14), bool] {
  %814 = cast(%var_3791, dtype="bool") /* ty=Tensor[(10, 11, 14), bool] */;
  %815 = shape_of(%var_3790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%var_3790, dtype="bool") /* ty=Tensor[(10, 11, 14), bool] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%816, %817) /* ty=Tensor[(10, 11, 14), bool] */
}

def @func_2797(%var_2728: Tensor[(15, 15, 5), float32], %var_2738: Tensor[(15, 15, 5), int32], %var_2743: Tensor[(256), float32], %var_2744: Tensor[(32, 112), float32], %var_2745: Tensor[(700), uint64], %var_2746: Tensor[(96), float32], %var_2748: Tensor[(480, 1), float32], %var_2749: Tensor[(2184), float64], %var_2751: Tensor[(1274), int16]) -> (Tensor[(15, 15, 5), uint64], Tensor[(480), float32], Tensor[(256), float32], Tensor[(700), uint64], Tensor[(96), float32], Tensor[(1512), float32], Tensor[(480, 1), float32], Tensor[(2184), float64], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(15, 15, 5), int64], Tensor[(32, 112), int64], Tensor[(2184), float64], Tensor[(112), uint64], Tensor[(336), float64]) {
  %818 = cast(%var_2728, dtype="float32") /* ty=Tensor[(15, 15, 5), float32] */;
  %819 = sinh(%818) /* ty=Tensor[(15, 15, 5), float32] */;
  %820 = cast(%var_2728, dtype="int32") /* ty=Tensor[(15, 15, 5), int32] */;
  %821 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%819, dtype="int32") /* ty=Tensor[(15, 15, 5), int32] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %824 = bitwise_or(%822, %823) /* ty=Tensor[(15, 15, 5), int32] */;
  %825 = cast(%var_2738, dtype="uint64") /* ty=Tensor[(15, 15, 5), uint64] */;
  %826 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(%824, dtype="uint64") /* ty=Tensor[(15, 15, 5), uint64] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %829 = cast(%var_2743, dtype="float32") /* ty=Tensor[(256), float32] */;
  %830 = cast(%var_2744, dtype="float32") /* ty=Tensor[(32, 112), float32] */;
  %831 = cast(%var_2745, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %832 = cast(%var_2746, dtype="float32") /* ty=Tensor[(96), float32] */;
  %833 = cast(meta[relay.Constant][61] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %834 = cast(%var_2748, dtype="float32") /* ty=Tensor[(480, 1), float32] */;
  %835 = cast(%var_2749, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %836 = cast(meta[relay.Constant][62] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
  %837 = cast(%var_2751, dtype="int16") /* ty=Tensor[(1274), int16] */;
  %838 = cast(%var_2744, dtype="float64") /* ty=Tensor[(32, 112), float64] */;
  %839 = reshape(%829, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), float32] */;
  %840 = reshape(%830, newshape=[16, 16, 14]) /* ty=Tensor[(16, 16, 14), float32] */;
  %841 = reshape(%831, newshape=[700]) /* ty=Tensor[(700), uint64] */;
  %842 = reshape(%832, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
  %843 = reshape(%833, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %844 = reshape(%834, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %845 = reshape(%835, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %846 = reshape(%836, newshape=[14, 1]) /* ty=Tensor[(14, 1), int16] */;
  %847 = reshape(%837, newshape=[1274]) /* ty=Tensor[(1274), int16] */;
  %848 = reshape(%838, newshape=[16, 16, 14]) /* ty=Tensor[(16, 16, 14), float64] */;
  %849 = @func_1845(%839, %840, %841, %842, %843, %844, %845, %846, %847, %848) /* ty=(Tensor[(14, 5, 10), uint64], Tensor[(700), uint64], Tensor[(16, 16, 14), bool], Tensor[(1, 112), uint64], Tensor[(8, 12), float32], Tensor[(1512), float32], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(14, 1), int16], Tensor[(1274), int16], Tensor[(16, 16, 14), float32], Tensor[(336), float64], Tensor[(16, 16, 14), float64], Tensor[(14, 5, 10), uint64], Tensor[(336), float64], Tensor[(5, 3, 16), int32]) */;
  %850 = cast(%824, dtype="int64") /* ty=Tensor[(15, 15, 5), int64] */;
  %851 = shape_of(%var_2728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %852 = cast(%var_2728, dtype="int64") /* ty=Tensor[(15, 15, 5), int64] */;
  %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %854 = cast(meta[relay.Constant][63] /* ty=Tensor[(32, 112), float32] */, dtype="int64") /* ty=Tensor[(32, 112), int64] */;
  %855 = shape_of(%var_2744, dtype="int32") /* ty=Tensor[(2), int32] */;
  %856 = cast(%var_2744, dtype="int64") /* ty=Tensor[(32, 112), int64] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %858 = cast(meta[relay.Constant][64] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %859 = cast(meta[relay.Constant][65] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %860 = cast(meta[relay.Constant][65] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %861 = reshape(%858, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %862 = reshape(%859, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %863 = reshape(%860, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %864 = @func_948(%861, %862, %863) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %865 = add(%827, %828) /* ty=Tensor[(15, 15, 5), uint64] */;
  %866 = %849.9;
  %867 = left_shift(%852, %853) /* ty=Tensor[(15, 15, 5), int64] */;
  %868 = right_shift(%856, %857) /* ty=Tensor[(32, 112), int64] */;
  %869 = %864.1;
  (%865, %866, %var_2743, %var_2745, %var_2746, meta[relay.Constant][61] /* ty=Tensor[(1512), float32] */, %var_2748, %var_2749, meta[relay.Constant][62] /* ty=Tensor[(14), int16] */, %var_2751, %867, %868, %869, meta[relay.Constant][64] /* ty=Tensor[(112), uint64] */, meta[relay.Constant][65] /* ty=Tensor[(336), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5432(%var_5427: uint8, %var_5428: Tensor[(7, 12, 7), uint8], %var_5429: Tensor[(4, 6, 4), float32], %var_5430: Tensor[(480), float32], %var_5431: Tensor[(2184), float64]) -> (Tensor[(7, 12, 7), uint8], Tensor[(96), float32], Tensor[(1512), float32], Tensor[(4, 6, 4), uint8], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64]) {
  @func_5425(%var_5427, %var_5428, %var_5429, %var_5430, %var_5431) /* ty=(Tensor[(7, 12, 7), uint8], Tensor[(96), float32], Tensor[(1512), float32], Tensor[(4, 6, 4), uint8], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64]) */
}

def @func_5837(%var_5834: Tensor[(588), uint8], %var_5835: Tensor[(480), float32], %var_5836: Tensor[(2184), float64]) -> (Tensor[(11, 9, 2), float32], Tensor[(96), float32], uint8, Tensor[(588), uint8], Tensor[(16, 6), float32], Tensor[(480), float32], Tensor[(2184), float64]) {
  %18 = fn (%var_5828: Tensor[(588), uint8], %var_5830: Tensor[(480), float32], %var_5831: Tensor[(2184), float64]) -> (Tensor[(11, 9, 2), float32], Tensor[(96), float32], uint8, Tensor[(588), uint8], Tensor[(16, 6), float32], Tensor[(480), float32], Tensor[(2184), float64]) {
    %0 = @func_5648() /* ty=(Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) */;
    %1 = %0.0;
    %2 = cast(%1, dtype="float64") /* ty=Tensor[(11, 9, 2), float64] */;
    %3 = acos(%2) /* ty=Tensor[(11, 9, 2), float64] */;
    %4 = cast(%3, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
    %5 = cast(meta[relay.Constant][0] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %6 = cast(%var_5828, dtype="uint8") /* ty=Tensor[(588), uint8] */;
    %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(16, 6), float32] */, dtype="float32") /* ty=Tensor[(16, 6), float32] */;
    %8 = cast(%var_5830, dtype="float32") /* ty=Tensor[(480), float32] */;
    %9 = cast(%var_5831, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %10 = reshape(%5, newshape=[]) /* ty=uint8 */;
    %11 = reshape(%6, newshape=[7, 12, 7]) /* ty=Tensor[(7, 12, 7), uint8] */;
    %12 = reshape(%7, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float32] */;
    %13 = reshape(%8, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %14 = reshape(%9, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
    %15 = @func_5425(%10, %11, %12, %13, %14) /* ty=(Tensor[(7, 12, 7), uint8], Tensor[(96), float32], Tensor[(1512), float32], Tensor[(4, 6, 4), uint8], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64]) */;
    %16 = cos(%4) /* ty=Tensor[(11, 9, 2), float32] */;
    %17 = %15.1;
    (%16, %17, meta[relay.Constant][0] /* ty=uint8 */, %var_5828, meta[relay.Constant][1] /* ty=Tensor[(16, 6), float32] */, %var_5830, %var_5831)
  };
  %18(%var_5834, %var_5835, %var_5836) /* ty=(Tensor[(11, 9, 2), float32], Tensor[(96), float32], uint8, Tensor[(588), uint8], Tensor[(16, 6), float32], Tensor[(480), float32], Tensor[(2184), float64]) */
}

def @func_6362(%var_6359: Tensor[(1755), float32], %var_6360: Tensor[(1092, 2), float64], %var_6361: Tensor[(198), float64]) -> (Tensor[(5, 2, 1), float32], Tensor[(5, 2, 1), float32], Tensor[(4, 9, 2), float64], Tensor[(72), float64], Tensor[(5, 10, 1), float32], Tensor[(50, 1), float32], Tensor[(2184), float64], Tensor[(1755), float32], Tensor[(1092, 2), float64], Tensor[(198), float64]) {
  %39 = fn (%var_6354: Tensor[(1755), float32], %var_6355: Tensor[(1092, 2), float64], %var_6356: Tensor[(198), float64]) -> (Tensor[(5, 2, 1), float32], Tensor[(5, 2, 1), float32], Tensor[(4, 9, 2), float64], Tensor[(72), float64], Tensor[(5, 10, 1), float32], Tensor[(50, 1), float32], Tensor[(2184), float64], Tensor[(1755), float32], Tensor[(1092, 2), float64], Tensor[(198), float64]) {
    %19 = @func_6051() /* ty=(Tensor[(5, 2, 1), float32],) */;
    %20 = @func_6051() /* ty=(Tensor[(5, 2, 1), float32],) */;
    %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %22 = reshape(%21, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
    %23 = @func_2393(%22) /* ty=(Tensor[(4, 9, 2), float64],) */;
    %24 = cast(meta[relay.Constant][3] /* ty=Tensor[(50, 1), float32] */, dtype="float32") /* ty=Tensor[(50, 1), float32] */;
    %25 = reshape(%24, newshape=[5, 10, 1]) /* ty=Tensor[(5, 10, 1), float32] */;
    %26 = @func_2418(%25) /* ty=(Tensor[(5, 10, 1), float32],) */;
    %27 = cast(%var_6354, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %28 = cast(%var_6355, dtype="float64") /* ty=Tensor[(1092, 2), float64] */;
    %29 = cast(%var_6356, dtype="float64") /* ty=Tensor[(198), float64] */;
    %30 = reshape(%27, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
    %31 = reshape(%28, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
    %32 = reshape(%29, newshape=[11, 9, 2]) /* ty=Tensor[(11, 9, 2), float64] */;
    %33 = @func_5940(%30, %31, %32) /* ty=(Tensor[(1755), float32], Tensor[(2184), float64], Tensor[(11, 9, 2), float32], Tensor[(11, 9, 2), int64], Tensor[(11, 9, 2), float64], Tensor[(13, 14, 12), float32]) */;
    %34 = %19.0;
    %35 = %20.0;
    %36 = %23.0;
    %37 = %26.0;
    %38 = %33.1;
    (%34, %35, %36, meta[relay.Constant][2] /* ty=Tensor[(72), float64] */, %37, meta[relay.Constant][3] /* ty=Tensor[(50, 1), float32] */, %38, %var_6354, %var_6355, %var_6356)
  };
  %39(%var_6359, %var_6360, %var_6361) /* ty=(Tensor[(5, 2, 1), float32], Tensor[(5, 2, 1), float32], Tensor[(4, 9, 2), float64], Tensor[(72), float64], Tensor[(5, 10, 1), float32], Tensor[(50, 1), float32], Tensor[(2184), float64], Tensor[(1755), float32], Tensor[(1092, 2), float64], Tensor[(198), float64]) */
}

def @func_6719() -> (Tensor[(11, 9, 2), float64], Tensor[(13, 14, 12), float64], Tensor[(112), uint64], Tensor[(336), float64]) {
  @func_6717() /* ty=(Tensor[(11, 9, 2), float64], Tensor[(13, 14, 12), float64], Tensor[(112), uint64], Tensor[(336), float64]) */
}

def @func_1598(%var_1596: Tensor[(4, 6, 4), float32], %var_1597: Tensor[(1512), float32]) -> (Tensor[(4, 6, 4), float32], Tensor[(1, 112), uint64], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1, 2184), float64], Tensor[(112), uint64], Tensor[(1512), float32]) {
  %54 = fn (%var_1578: Tensor[(4, 6, 4), float32], %var_1589: Tensor[(1512), float32]) -> (Tensor[(4, 6, 4), float32], Tensor[(1, 112), uint64], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1, 2184), float64], Tensor[(112), uint64], Tensor[(1512), float32]) {
    %40 = cast(%var_1578, dtype="float32") /* ty=Tensor[(4, 6, 4), float32] */;
    %41 = cast(meta[relay.Constant][4] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
    %42 = cast(meta[relay.Constant][5] /* ty=Tensor[(1274), int16] */, dtype="int16") /* ty=Tensor[(1274), int16] */;
    %43 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 2184), float64] */, dtype="float64") /* ty=Tensor[(1, 2184), float64] */;
    %44 = cast(meta[relay.Constant][7] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
    %45 = cast(%var_1589, dtype="float32") /* ty=Tensor[(1512), float32] */;
    %46 = reshape(%41, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), int16] */;
    %47 = reshape(%42, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), int16] */;
    %48 = reshape(%43, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
    %49 = reshape(%44, newshape=[1, 112]) /* ty=Tensor[(1, 112), uint64] */;
    %50 = reshape(%45, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
    %51 = @func_1423(%46, %47, %48, %49, %50) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 112), uint64], Tensor[(336), float64], Tensor[(112), uint64], Tensor[(1512), float32], Tensor[(14, 7, 13), float32]) */;
    %52 = atanh(%40) /* ty=Tensor[(4, 6, 4), float32] */;
    %53 = %51.4;
    (%52, %53, meta[relay.Constant][4] /* ty=Tensor[(14), int16] */, meta[relay.Constant][5] /* ty=Tensor[(1274), int16] */, meta[relay.Constant][6] /* ty=Tensor[(1, 2184), float64] */, meta[relay.Constant][7] /* ty=Tensor[(112), uint64] */, %var_1589)
  };
  %54(%var_1596, %var_1597) /* ty=(Tensor[(4, 6, 4), float32], Tensor[(1, 112), uint64], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1, 2184), float64], Tensor[(112), uint64], Tensor[(1512), float32]) */
}

def @func_6768() -> (Tensor[(11, 9, 2), float64],) {
  %55 = @func_5732() /* ty=Tensor[(11, 9, 2), float64] */;
  (%55,)
}

def @func_4158(%var_4156: Tensor[(12, 3, 11), int8]) -> (Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), int16]) {
  @func_4155(%var_4156) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), int16]) */
}

def @func_6749() -> (Tensor[(5, 2, 1), float32], Tensor[(12, 3, 11), int8], Tensor[(396), int8]) {
  %56 = @func_6051() /* ty=(Tensor[(5, 2, 1), float32],) */;
  %57 = cast(meta[relay.Constant][8] /* ty=Tensor[(396), int8] */, dtype="int8") /* ty=Tensor[(396), int8] */;
  %58 = reshape(%57, newshape=[12, 3, 11]) /* ty=Tensor[(12, 3, 11), int8] */;
  %59 = @func_4155(%58) /* ty=(Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), int16]) */;
  %60 = %56.0;
  %61 = %59.0;
  (%60, %61, meta[relay.Constant][8] /* ty=Tensor[(396), int8] */)
}

def @func_2575(%var_2529: Tensor[(10, 14, 1), int8], %var_2530: Tensor[(10, 14, 1), int8], %var_2538: Tensor[(84, 26), float64]) -> (Tensor[(10, 14, ?), bool], Tensor[(13, 14, 12), float32], Tensor[(15, 117), float32], Tensor[(84, 26), float64], Tensor[(10, 14, 1), float32], Tensor[(2184), float64], Tensor[(240, 2), float32]) {
  %62 = cast(%var_2530, dtype="bool") /* ty=Tensor[(10, 14, 1), bool] */;
  %63 = shape_of(%var_2529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%var_2529, dtype="bool") /* ty=Tensor[(10, 14, 1), bool] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %66 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 117), float32] */, dtype="float32") /* ty=Tensor[(15, 117), float32] */;
  %67 = cast(%var_2538, dtype="float64") /* ty=Tensor[(84, 26), float64] */;
  %68 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 117), float32] */, dtype="float32") /* ty=Tensor[(15, 117), float32] */;
  %69 = reshape(%66, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
  %70 = reshape(%67, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %71 = reshape(%68, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
  %72 = @func_1243(%69, %70, %71) /* ty=(Tensor[(13, 15, 9), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(13, 15, 9), uint16], Tensor[(13, 14, 12), float32]) */;
  %73 = cast(%var_2529, dtype="float64") /* ty=Tensor[(10, 14, 1), float64] */;
  %74 = sqrt(%73) /* ty=Tensor[(10, 14, 1), float64] */;
  %75 = cast(%74, dtype="float32") /* ty=Tensor[(10, 14, 1), float32] */;
  %76 = cast(meta[relay.Constant][10] /* ty=Tensor[(240, 2), float32] */, dtype="float32") /* ty=Tensor[(240, 2), float32] */;
  %77 = cast(%var_2538, dtype="float64") /* ty=Tensor[(84, 26), float64] */;
  %78 = reshape(%76, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float32] */;
  %79 = reshape(%77, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %80 = @func_571(%78, %79) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) */;
  %81 = greater_equal(%64, %65) /* ty=Tensor[(10, 14, ?), bool] */;
  %82 = %72.4;
  %83 = cosh(%75) /* ty=Tensor[(10, 14, 1), float32] */;
  %84 = %80.2;
  (%81, %82, meta[relay.Constant][9] /* ty=Tensor[(15, 117), float32] */, %var_2538, %83, %84, meta[relay.Constant][10] /* ty=Tensor[(240, 2), float32] */)
}

def @func_2720(%var_2713: Tensor[(4, 4, 13), float64], %var_2714: Tensor[(4, 4, 13), float64], %var_2715: Tensor[(1, 140), int8], %var_2716: Tensor[(2184), float64], %var_2717: Tensor[(18, 4), float64], %var_2718: Tensor[(112), uint64], %var_2719: Tensor[(336, 1), float64]) -> (Tensor[(4, 4, 13), float64], Tensor[(10, 14, 1), float32], Tensor[(1, 140), int8], Tensor[(2184), float64], Tensor[(4, 4, 13), float32], Tensor[(4, 9, 2), float64], Tensor[(18, 4), float64], Tensor[(3, 16, 7), uint16], Tensor[(112), uint64], Tensor[(336, 1), float64], Tensor[(3, 16, 7), float32]) {
  @func_2711(%var_2713, %var_2714, %var_2715, %var_2716, %var_2717, %var_2718, %var_2719) /* ty=(Tensor[(4, 4, 13), float64], Tensor[(10, 14, 1), float32], Tensor[(1, 140), int8], Tensor[(2184), float64], Tensor[(4, 4, 13), float32], Tensor[(4, 9, 2), float64], Tensor[(18, 4), float64], Tensor[(3, 16, 7), uint16], Tensor[(112), uint64], Tensor[(336, 1), float64], Tensor[(3, 16, 7), float32]) */
}

def @func_5890() -> Tensor[(5, 2, 1), float32] {
  %86 = fn () -> Tensor[(5, 2, 1), float32] {
    %85 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 2, 1), float32] */, dtype="float32") /* ty=Tensor[(5, 2, 1), float32] */;
    acos(%85) /* ty=Tensor[(5, 2, 1), float32] */
  };
  %86() /* ty=Tensor[(5, 2, 1), float32] */
}

def @func_6770() -> (Tensor[(11, 9, 2), float64],) {
  @func_6768() /* ty=(Tensor[(11, 9, 2), float64],) */
}

def @func_5224(%var_5180: Tensor[(12, 6, 13), int16], %var_5181: Tensor[(12, 6, 13), int16], %var_5199: Tensor[(1, 1755), float32], %var_5202: Tensor[(420), int32], %var_5205: Tensor[(3584), float32], %var_5206: Tensor[(96), float32]) -> (Tensor[(12, 6, 13), uint16], Tensor[(13, 15, 9), uint16], Tensor[(1300), int64], Tensor[(1, 1755), float32], Tensor[(2184), float64], Tensor[(112), uint64], Tensor[(420), int32], Tensor[(13), bool], Tensor[(256), float32], Tensor[(3584), float32], Tensor[(96), float32], Tensor[(1512), float32], Tensor[(14), int16]) {
  %87 = cast(%var_5181, dtype="bool") /* ty=Tensor[(12, 6, 13), bool] */;
  %88 = shape_of(%var_5180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%var_5180, dtype="bool") /* ty=Tensor[(12, 6, 13), bool] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %91 = less(%89, %90) /* ty=Tensor[(12, 6, 13), bool] */;
  %92 = cast(%var_5180, dtype="uint16") /* ty=Tensor[(12, 6, 13), uint16] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="uint16") /* ty=Tensor[(12, 6, 13), uint16] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %96 = cast(meta[relay.Constant][12] /* ty=Tensor[(1300), int64] */, dtype="int64") /* ty=Tensor[(1300), int64] */;
  %97 = cast(meta[relay.Constant][12] /* ty=Tensor[(1300), int64] */, dtype="int64") /* ty=Tensor[(1300), int64] */;
  %98 = cast(%var_5199, dtype="float32") /* ty=Tensor[(1, 1755), float32] */;
  %99 = cast(meta[relay.Constant][13] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %100 = cast(meta[relay.Constant][14] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %101 = cast(%var_5202, dtype="int32") /* ty=Tensor[(420), int32] */;
  %102 = cast(meta[relay.Constant][12] /* ty=Tensor[(1300), int64] */, dtype="float64") /* ty=Tensor[(1300), float64] */;
  %103 = cast(meta[relay.Constant][15] /* ty=Tensor[(13), bool] */, dtype="bool") /* ty=Tensor[(13), bool] */;
  %104 = cast(meta[relay.Constant][16] /* ty=Tensor[(256), float32] */, dtype="float32") /* ty=Tensor[(256), float32] */;
  %105 = cast(%var_5205, dtype="float32") /* ty=Tensor[(3584), float32] */;
  %106 = cast(%var_5206, dtype="float32") /* ty=Tensor[(96), float32] */;
  %107 = cast(meta[relay.Constant][17] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %108 = reshape(%96, newshape=[10, 10, 13]) /* ty=Tensor[(10, 10, 13), int64] */;
  %109 = reshape(%97, newshape=[10, 10, 13]) /* ty=Tensor[(10, 10, 13), int64] */;
  %110 = reshape(%98, newshape=[1755]) /* ty=Tensor[(1755), float32] */;
  %111 = reshape(%99, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %112 = reshape(%100, newshape=[112]) /* ty=Tensor[(112), uint64] */;
  %113 = reshape(%101, newshape=[14, 15, 2]) /* ty=Tensor[(14, 15, 2), int32] */;
  %114 = reshape(%102, newshape=[10, 10, 13]) /* ty=Tensor[(10, 10, 13), float64] */;
  %115 = reshape(%103, newshape=[13]) /* ty=Tensor[(13), bool] */;
  %116 = reshape(%104, newshape=[256]) /* ty=Tensor[(256), float32] */;
  %117 = reshape(%105, newshape=[3584]) /* ty=Tensor[(3584), float32] */;
  %118 = reshape(%106, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %119 = reshape(%107, newshape=[378, 4]) /* ty=Tensor[(378, 4), float32] */;
  %120 = @func_5043(%108, %109, %110, %111, %112, %113, %114, %115, %116, %117, %118, %119) /* ty=(Tensor[(2184), float64], Tensor[(1755), float32], Tensor[(2184), float64], Tensor[(24, 14), float64], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(14, 15, 2), float32], Tensor[(1274), int16], Tensor[(13, 15, 9), uint16], Tensor[(9, 12, 13), bool], Tensor[(13), bool], Tensor[(10, 10, 13), int32], Tensor[(5, 3, 16), int32], Tensor[(256), float32], Tensor[(3584), float32], Tensor[(700), uint64], Tensor[(96), float32], Tensor[(378, 4), float32], Tensor[(480), float32], Tensor[(14), int16]) */;
  %121 = cast(%var_5206, dtype="float32") /* ty=Tensor[(96), float32] */;
  %122 = cast(meta[relay.Constant][17] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %123 = reshape(%121, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float32] */;
  %124 = reshape(%122, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %125 = @func_1595(%123, %124) /* ty=(Tensor[(4, 6, 4), float32], Tensor[(1, 112), uint64], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1, 2184), float64], Tensor[(112), uint64], Tensor[(1512), float32]) */;
  %126 = add(%94, %95) /* ty=Tensor[(12, 6, 13), uint16] */;
  %127 = %120.8;
  %128 = %125.2;
  (%126, %127, meta[relay.Constant][12] /* ty=Tensor[(1300), int64] */, %var_5199, meta[relay.Constant][13] /* ty=Tensor[(2184), float64] */, meta[relay.Constant][14] /* ty=Tensor[(112), uint64] */, %var_5202, meta[relay.Constant][15] /* ty=Tensor[(13), bool] */, meta[relay.Constant][16] /* ty=Tensor[(256), float32] */, %var_5205, %var_5206, meta[relay.Constant][17] /* ty=Tensor[(1512), float32] */, %128)
}

def @func_4354(%var_4352: Tensor[(112), uint64], %var_4353: Tensor[(24, 14), float64]) -> (Tensor[(3, 12, 5), float32], Tensor[(3, 16, 7), uint16], Tensor[(112), uint64], Tensor[(24, 14), float64]) {
  @func_4350(%var_4352, %var_4353) /* ty=(Tensor[(3, 12, 5), float32], Tensor[(3, 16, 7), uint16], Tensor[(112), uint64], Tensor[(24, 14), float64]) */
}

def @func_491(%var_471: Tensor[(13, 14, 12), float64]) -> (Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) {
  %129 = cast(%var_471, dtype="float64") /* ty=Tensor[(13, 14, 12), float64] */;
  %130 = asin(%129) /* ty=Tensor[(13, 14, 12), float64] */;
  %131 = cast(%var_471, dtype="bool") /* ty=Tensor[(13, 14, 12), bool] */;
  %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%130, dtype="bool") /* ty=Tensor[(13, 14, 12), bool] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %135 = cast(%130, dtype="float32") /* ty=Tensor[(13, 14, 12), float32] */;
  %136 = exp(%135) /* ty=Tensor[(13, 14, 12), float32] */;
  %137 = cast(%136, dtype="float64") /* ty=Tensor[(13, 14, 12), float64] */;
  %138 = cast(%136, dtype="float64") /* ty=Tensor[(13, 14, 12), float64] */;
  %139 = cast(%136, dtype="float32") /* ty=Tensor[(13, 14, 12), float32] */;
  %140 = logical_and(%133, %134) /* ty=Tensor[(13, 14, 12), bool] */;
  %141 = acos(%137) /* ty=Tensor[(13, 14, 12), float64] */;
  %142 = log2(%138) /* ty=Tensor[(13, 14, 12), float64] */;
  %143 = sqrt(%139) /* ty=Tensor[(13, 14, 12), float32] */;
  (%140, %141, %142, %143)
}

def @func_5694(%var_5656: Tensor[(11, 9, 2), float64]) -> (Tensor[(11, 9, 2), int16], Tensor[(11, 9, 2), bool], Tensor[(13, 14, 12), float64], Tensor[(112), uint64], Tensor[(24, 14), float64]) {
  %144 = @func_5648() /* ty=(Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) */;
  %145 = %144.1;
  %146 = cast(%var_5656, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%145, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %150 = floor_mod(%148, %149) /* ty=Tensor[(11, 9, 2), float32] */;
  %151 = cast(%var_5656, dtype="int16") /* ty=Tensor[(11, 9, 2), int16] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%150, dtype="int16") /* ty=Tensor[(11, 9, 2), int16] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %155 = cast(%145, dtype="bool") /* ty=Tensor[(11, 9, 2), bool] */;
  %156 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%150, dtype="bool") /* ty=Tensor[(11, 9, 2), bool] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %159 = cast(meta[relay.Constant][18] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %160 = cast(meta[relay.Constant][19] /* ty=Tensor[(24, 14), float64] */, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %161 = cast(meta[relay.Constant][19] /* ty=Tensor[(24, 14), float64] */, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %162 = reshape(%159, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %163 = reshape(%160, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %164 = reshape(%161, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %165 = @func_948(%162, %163, %164) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %166 = subtract(%153, %154) /* ty=Tensor[(11, 9, 2), int16] */;
  %167 = greater(%157, %158) /* ty=Tensor[(11, 9, 2), bool] */;
  %168 = %165.5;
  (%166, %167, %168, meta[relay.Constant][18] /* ty=Tensor[(112), uint64] */, meta[relay.Constant][19] /* ty=Tensor[(24, 14), float64] */)
}

def @func_6717() -> (Tensor[(11, 9, 2), float64], Tensor[(13, 14, 12), float64], Tensor[(112), uint64], Tensor[(336), float64]) {
  %169 = cast(meta[relay.Constant][20] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %170 = cast(meta[relay.Constant][21] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %171 = cast(meta[relay.Constant][21] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %172 = reshape(%169, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %173 = reshape(%170, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %174 = reshape(%171, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %175 = @func_948(%172, %173, %174) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %176 = @func_6282() /* ty=Tensor[(11, 9, 2), float64] */;
  %177 = %175.5;
  (%176, %177, meta[relay.Constant][20] /* ty=Tensor[(112), uint64] */, meta[relay.Constant][21] /* ty=Tensor[(336), float64] */)
}

def @func_494(%var_492: Tensor[(13, 14, 12), float64]) -> (Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) {
  @func_491(%var_492) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) */
}

def @func_4155(%var_4137: Tensor[(12, 3, 11), int8]) -> (Tensor[(12, 3, 11), int8], Tensor[(12, 3, 11), int16]) {
  %178 = cast(meta[relay.Constant][22] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %179 = cast(%var_4137, dtype="int8") /* ty=Tensor[(12, 3, 11), int8] */;
  %180 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 3, 11), int8] */, dtype="int16") /* ty=Tensor[(12, 3, 11), int16] */;
  %181 = shape_of(%var_4137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(%var_4137, dtype="int16") /* ty=Tensor[(12, 3, 11), int16] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %184 = bitwise_xor(%178, %179) /* ty=Tensor[(12, 3, 11), int8] */;
  %185 = add(%182, %183) /* ty=Tensor[(12, 3, 11), int16] */;
  (%184, %185)
}

def @func_2421(%var_2419: Tensor[(5, 10, 1), float32]) -> (Tensor[(5, 10, 1), float32],) {
  @func_2418(%var_2419) /* ty=(Tensor[(5, 10, 1), float32],) */
}

def @func_6211(%var_6210: Tensor[(9, 5), float32]) -> (Tensor[(9, 5), float32],) {
  %188 = fn (%var_6204: Tensor[(9, 5), float32]) -> (Tensor[(9, 5), float32],) {
    %186 = cast(%var_6204, dtype="float32") /* ty=Tensor[(9, 5), float32] */;
    %187 = sqrt(%186) /* ty=Tensor[(9, 5), float32] */;
    (%187,)
  };
  %188(%var_6210) /* ty=(Tensor[(9, 5), float32],) */
}

def @func_3811(%var_3809: Tensor[(10, 11, 14), int8], %var_3810: Tensor[(10, 11, 14), int8]) -> Tensor[(10, 11, 14), bool] {
  %193 = fn (%var_3790: Tensor[(10, 11, 14), int8], %var_3791: Tensor[(10, 11, 14), int8]) -> Tensor[(10, 11, 14), bool] {
    %189 = cast(%var_3791, dtype="bool") /* ty=Tensor[(10, 11, 14), bool] */;
    %190 = shape_of(%var_3790, dtype="int32") /* ty=Tensor[(3), int32] */;
    %191 = cast(%var_3790, dtype="bool") /* ty=Tensor[(10, 11, 14), bool] */;
    %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%191, %192) /* ty=Tensor[(10, 11, 14), bool] */
  };
  %193(%var_3809, %var_3810) /* ty=Tensor[(10, 11, 14), bool] */
}

def @func_104(%var_81: Tensor[(14, 5, 10), uint64], %var_82: Tensor[(14, 5, 10), uint64], %var_97: Tensor[(14, 5, 10), uint64]) -> (Tensor[(14, 5, 10), uint64], Tensor[(14, 5, 10), float32]) {
  %194 = cast(%var_82, dtype="uint64") /* ty=Tensor[(14, 5, 10), uint64] */;
  %195 = shape_of(%var_81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%var_81, dtype="uint64") /* ty=Tensor[(14, 5, 10), uint64] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %198 = cast(%var_97, dtype="float32") /* ty=Tensor[(14, 5, 10), float32] */;
  %199 = shape_of(%var_81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%var_81, dtype="float32") /* ty=Tensor[(14, 5, 10), float32] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %202 = add(%196, %197) /* ty=Tensor[(14, 5, 10), uint64] */;
  %203 = power(%200, %201) /* ty=Tensor[(14, 5, 10), float32] */;
  (%202, %203)
}

def @func_1429(%var_1424: Tensor[(14, 1, 1), int16], %var_1425: Tensor[(14, 7, 13), int16], %var_1426: Tensor[(2184), float64], %var_1427: Tensor[(1, 112), uint64], %var_1428: Tensor[(1512), float32]) -> (Tensor[(8, 4, 15), float32], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 112), uint64], Tensor[(336), float64], Tensor[(112), uint64], Tensor[(1512), float32], Tensor[(14, 7, 13), float32]) {
  %232 = fn (%var_1352: Tensor[(14, 1, 1), int16], %var_1353: Tensor[(14, 7, 13), int16], %var_1366: Tensor[(2184), float64], %var_1392: Tensor[(1, 112), uint64], %var_1397: Tensor[(1512), float32]) -> (Tensor[(8, 4, 15), float32], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 112), uint64], Tensor[(336), float64], Tensor[(112), uint64], Tensor[(1512), float32], Tensor[(14, 7, 13), float32]) {
    %204 = cast(meta[relay.Constant][24] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %205 = cast(%var_1366, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %206 = reshape(%204, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float32] */;
    %207 = reshape(%205, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
    %208 = @func_571(%206, %207) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) */;
    %209 = cast(%var_1392, dtype="uint64") /* ty=Tensor[(1, 112), uint64] */;
    %210 = cast(meta[relay.Constant][25] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %211 = cast(meta[relay.Constant][25] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %212 = reshape(%209, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
    %213 = reshape(%210, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
    %214 = reshape(%211, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
    %215 = @func_948(%212, %213, %214) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
    %216 = cast(%var_1397, dtype="float32") /* ty=Tensor[(1512), float32] */;
    %217 = reshape(%216, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
    %218 = @func_1003(%217) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(12, 9, 14), uint8]) */;
    %219 = cast(%var_1352, dtype="int16") /* ty=Tensor[(14, 1, 1), int16] */;
    %220 = cast(%var_1353, dtype="int16") /* ty=Tensor[(14, 7, 13), int16] */;
    %221 = minimum(%219, %220) /* ty=Tensor[(14, 7, 13), int16] */;
    %222 = cast(%221, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
    %223 = log(%222) /* ty=Tensor[(14, 7, 13), float32] */;
    %224 = cast(%221, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
    %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
    %226 = cast(%223, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
    %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %228 = %208.0;
    %229 = %215.8;
    %230 = %218.1;
    %231 = mod(%226, %227) /* ty=Tensor[(14, 7, 13), float32] */;
    (%228, meta[relay.Constant][24] /* ty=Tensor[(480), float32] */, %var_1366, %229, %var_1392, meta[relay.Constant][25] /* ty=Tensor[(336), float64] */, %230, %var_1397, %231)
  };
  %232(%var_1424, %var_1425, %var_1426, %var_1427, %var_1428) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 112), uint64], Tensor[(336), float64], Tensor[(112), uint64], Tensor[(1512), float32], Tensor[(14, 7, 13), float32]) */
}

def @func_6579() -> Tensor[(11, 9, 2), float64] {
  %234 = fn () -> Tensor[(11, 9, 2), float64] {
    %233 = @func_5756() /* ty=(Tensor[(11, 9, 2), float64],) */;
    %233.0
  };
  %234() /* ty=Tensor[(11, 9, 2), float64] */
}

def @func_6647() -> (Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float64], Tensor[(30), float32]) {
  %235 = @func_5756() /* ty=(Tensor[(11, 9, 2), float64],) */;
  %236 = cast(meta[relay.Constant][26] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %237 = reshape(%236, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float32] */;
  %238 = @func_6429(%237) /* ty=(Tensor[(5, 2, 3), uint8], Tensor[(5, 2, 1), float32], Tensor[(11, 9, 2), float64]) */;
  %239 = %235.0;
  %240 = %238.2;
  (%239, %240, meta[relay.Constant][26] /* ty=Tensor[(30), float32] */)
}

def @func_4350(%var_4347: Tensor[(112), uint64], %var_4348: Tensor[(24, 14), float64]) -> (Tensor[(3, 12, 5), float32], Tensor[(3, 16, 7), uint16], Tensor[(112), uint64], Tensor[(24, 14), float64]) {
  %241 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 12, 5), float32] */, dtype="float32") /* ty=Tensor[(3, 12, 5), float32] */;
  %242 = exp(%241) /* ty=Tensor[(3, 12, 5), float32] */;
  %243 = cast(%242, dtype="float32") /* ty=Tensor[(3, 12, 5), float32] */;
  %244 = cast(%var_4347, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %245 = cast(%var_4348, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %246 = cast(%var_4348, dtype="float64") /* ty=Tensor[(24, 14), float64] */;
  %247 = reshape(%244, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %248 = reshape(%245, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %249 = reshape(%246, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %250 = @func_948(%247, %248, %249) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %251 = asinh(%243) /* ty=Tensor[(3, 12, 5), float32] */;
  %252 = %250.4;
  (%251, %252, %var_4347, %var_4348)
}

def @func_2797(%var_2728: Tensor[(15, 15, 5), float32], %var_2738: Tensor[(15, 15, 5), int32], %var_2743: Tensor[(256), float32], %var_2744: Tensor[(32, 112), float32], %var_2745: Tensor[(700), uint64], %var_2746: Tensor[(96), float32], %var_2748: Tensor[(480, 1), float32], %var_2749: Tensor[(2184), float64], %var_2751: Tensor[(1274), int16]) -> (Tensor[(15, 15, 5), uint64], Tensor[(480), float32], Tensor[(256), float32], Tensor[(700), uint64], Tensor[(96), float32], Tensor[(1512), float32], Tensor[(480, 1), float32], Tensor[(2184), float64], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(15, 15, 5), int64], Tensor[(32, 112), int64], Tensor[(2184), float64], Tensor[(112), uint64], Tensor[(336), float64]) {
  %253 = cast(%var_2728, dtype="float32") /* ty=Tensor[(15, 15, 5), float32] */;
  %254 = sinh(%253) /* ty=Tensor[(15, 15, 5), float32] */;
  %255 = cast(%var_2728, dtype="int32") /* ty=Tensor[(15, 15, 5), int32] */;
  %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%254, dtype="int32") /* ty=Tensor[(15, 15, 5), int32] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %259 = bitwise_or(%257, %258) /* ty=Tensor[(15, 15, 5), int32] */;
  %260 = cast(%var_2738, dtype="uint64") /* ty=Tensor[(15, 15, 5), uint64] */;
  %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%259, dtype="uint64") /* ty=Tensor[(15, 15, 5), uint64] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %264 = cast(%var_2743, dtype="float32") /* ty=Tensor[(256), float32] */;
  %265 = cast(%var_2744, dtype="float32") /* ty=Tensor[(32, 112), float32] */;
  %266 = cast(%var_2745, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %267 = cast(%var_2746, dtype="float32") /* ty=Tensor[(96), float32] */;
  %268 = cast(meta[relay.Constant][28] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %269 = cast(%var_2748, dtype="float32") /* ty=Tensor[(480, 1), float32] */;
  %270 = cast(%var_2749, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %271 = cast(meta[relay.Constant][29] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
  %272 = cast(%var_2751, dtype="int16") /* ty=Tensor[(1274), int16] */;
  %273 = cast(%var_2744, dtype="float64") /* ty=Tensor[(32, 112), float64] */;
  %274 = reshape(%264, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), float32] */;
  %275 = reshape(%265, newshape=[16, 16, 14]) /* ty=Tensor[(16, 16, 14), float32] */;
  %276 = reshape(%266, newshape=[700]) /* ty=Tensor[(700), uint64] */;
  %277 = reshape(%267, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
  %278 = reshape(%268, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %279 = reshape(%269, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %280 = reshape(%270, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %281 = reshape(%271, newshape=[14, 1]) /* ty=Tensor[(14, 1), int16] */;
  %282 = reshape(%272, newshape=[1274]) /* ty=Tensor[(1274), int16] */;
  %283 = reshape(%273, newshape=[16, 16, 14]) /* ty=Tensor[(16, 16, 14), float64] */;
  %284 = @func_1845(%274, %275, %276, %277, %278, %279, %280, %281, %282, %283) /* ty=(Tensor[(14, 5, 10), uint64], Tensor[(700), uint64], Tensor[(16, 16, 14), bool], Tensor[(1, 112), uint64], Tensor[(8, 12), float32], Tensor[(1512), float32], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(14, 1), int16], Tensor[(1274), int16], Tensor[(16, 16, 14), float32], Tensor[(336), float64], Tensor[(16, 16, 14), float64], Tensor[(14, 5, 10), uint64], Tensor[(336), float64], Tensor[(5, 3, 16), int32]) */;
  %285 = cast(%259, dtype="int64") /* ty=Tensor[(15, 15, 5), int64] */;
  %286 = shape_of(%var_2728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(%var_2728, dtype="int64") /* ty=Tensor[(15, 15, 5), int64] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %289 = cast(meta[relay.Constant][30] /* ty=Tensor[(32, 112), float32] */, dtype="int64") /* ty=Tensor[(32, 112), int64] */;
  %290 = shape_of(%var_2744, dtype="int32") /* ty=Tensor[(2), int32] */;
  %291 = cast(%var_2744, dtype="int64") /* ty=Tensor[(32, 112), int64] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %293 = cast(meta[relay.Constant][31] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %294 = cast(meta[relay.Constant][32] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %295 = cast(meta[relay.Constant][32] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %296 = reshape(%293, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %297 = reshape(%294, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %298 = reshape(%295, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %299 = @func_948(%296, %297, %298) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %300 = add(%262, %263) /* ty=Tensor[(15, 15, 5), uint64] */;
  %301 = %284.9;
  %302 = left_shift(%287, %288) /* ty=Tensor[(15, 15, 5), int64] */;
  %303 = right_shift(%291, %292) /* ty=Tensor[(32, 112), int64] */;
  %304 = %299.1;
  (%300, %301, %var_2743, %var_2745, %var_2746, meta[relay.Constant][28] /* ty=Tensor[(1512), float32] */, %var_2748, %var_2749, meta[relay.Constant][29] /* ty=Tensor[(14), int16] */, %var_2751, %302, %303, %304, meta[relay.Constant][31] /* ty=Tensor[(112), uint64] */, meta[relay.Constant][32] /* ty=Tensor[(336), float64] */)
}

def @func_5056(%var_5044: Tensor[(10, 10, 13), int64], %var_5045: Tensor[(10, 10, 13), int64], %var_5046: Tensor[(1755), float32], %var_5047: Tensor[(2184), float64], %var_5048: Tensor[(112), uint64], %var_5049: Tensor[(14, 15, 2), int32], %var_5050: Tensor[(10, 10, 13), float64], %var_5051: Tensor[(13), bool], %var_5052: Tensor[(256), float32], %var_5053: Tensor[(3584), float32], %var_5054: Tensor[(96), float32], %var_5055: Tensor[(378, 4), float32]) -> (Tensor[(2184), float64], Tensor[(1755), float32], Tensor[(2184), float64], Tensor[(24, 14), float64], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(14, 15, 2), float32], Tensor[(1274), int16], Tensor[(13, 15, 9), uint16], Tensor[(9, 12, 13), bool], Tensor[(13), bool], Tensor[(10, 10, 13), int32], Tensor[(5, 3, 16), int32], Tensor[(256), float32], Tensor[(3584), float32], Tensor[(700), uint64], Tensor[(96), float32], Tensor[(378, 4), float32], Tensor[(480), float32], Tensor[(14), int16]) {
  %383 = fn (%var_4954: Tensor[(10, 10, 13), int64], %var_4955: Tensor[(10, 10, 13), int64], %var_4972: Tensor[(1755), float32], %var_4973: Tensor[(2184), float64], %var_4983: Tensor[(112), uint64], %var_4992: Tensor[(14, 15, 2), int32], %var_5013: Tensor[(10, 10, 13), float64], %var_5018: Tensor[(13), bool], %var_5031: Tensor[(256), float32], %var_5032: Tensor[(3584), float32], %var_5034: Tensor[(96), float32], %var_5035: Tensor[(378, 4), float32]) -> (Tensor[(2184), float64], Tensor[(1755), float32], Tensor[(2184), float64], Tensor[(24, 14), float64], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(14, 15, 2), float32], Tensor[(1274), int16], Tensor[(13, 15, 9), uint16], Tensor[(9, 12, 13), bool], Tensor[(13), bool], Tensor[(10, 10, 13), int32], Tensor[(5, 3, 16), int32], Tensor[(256), float32], Tensor[(3584), float32], Tensor[(700), uint64], Tensor[(96), float32], Tensor[(378, 4), float32], Tensor[(480), float32], Tensor[(14), int16]) {
    %305 = cast(%var_4972, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %306 = cast(%var_4973, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %307 = cast(%var_4972, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %308 = reshape(%305, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
    %309 = reshape(%306, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
    %310 = reshape(%307, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
    %311 = @func_1243(%308, %309, %310) /* ty=(Tensor[(13, 15, 9), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(13, 15, 9), uint16], Tensor[(13, 14, 12), float32]) */;
    %312 = cast(%var_4983, dtype="uint64") /* ty=Tensor[(112), uint64] */;
    %313 = cast(meta[relay.Constant][33] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %314 = reshape(%312, newshape=[112]) /* ty=Tensor[(112), uint64] */;
    %315 = reshape(%313, newshape=[24, 14]) /* ty=Tensor[(24, 14), float64] */;
    %316 = @func_4350(%314, %315) /* ty=(Tensor[(3, 12, 5), float32], Tensor[(3, 16, 7), uint16], Tensor[(112), uint64], Tensor[(24, 14), float64]) */;
    %317 = cast(%var_4983, dtype="uint64") /* ty=Tensor[(112), uint64] */;
    %318 = reshape(%317, newshape=[112]) /* ty=Tensor[(112), uint64] */;
    %319 = @func_4565(%318) /* ty=(Tensor[(14, 15, 2), int32], Tensor[(14, 15, 2), bool], Tensor[(14, 7, 13), float32], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1092, 2), float64], Tensor[(112), uint64], Tensor[(1512), float32]) */;
    %320 = %319.0;
    %321 = cast(%var_4992, dtype="float32") /* ty=Tensor[(14, 15, 2), float32] */;
    %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(%320, dtype="float32") /* ty=Tensor[(14, 15, 2), float32] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %325 = cast(%var_4983, dtype="uint64") /* ty=Tensor[(112), uint64] */;
    %326 = reshape(%325, newshape=[112]) /* ty=Tensor[(112), uint64] */;
    %327 = @func_4565(%326) /* ty=(Tensor[(14, 15, 2), int32], Tensor[(14, 15, 2), bool], Tensor[(14, 7, 13), float32], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1092, 2), float64], Tensor[(112), uint64], Tensor[(1512), float32]) */;
    %328 = cast(%var_4972, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %329 = cast(%var_4973, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %330 = cast(%var_4972, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %331 = reshape(%328, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
    %332 = reshape(%329, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
    %333 = reshape(%330, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
    %334 = @func_1243(%331, %332, %333) /* ty=(Tensor[(13, 15, 9), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(13, 15, 9), uint16], Tensor[(13, 14, 12), float32]) */;
    %335 = cast(%var_5018, dtype="bool") /* ty=Tensor[(13), bool] */;
    %336 = reshape(%335, newshape=[1, 1, 13]) /* ty=Tensor[(1, 1, 13), bool] */;
    %337 = @func_3128(%336) /* ty=(Tensor[(9, 12, 13), bool], Tensor[(5, 3, 16), int32], Tensor[(120, 2), int32]) */;
    %338 = cast(%var_4955, dtype="int64") /* ty=Tensor[(10, 10, 13), int64] */;
    %339 = shape_of(%var_4954, dtype="int32") /* ty=Tensor[(3), int32] */;
    %340 = cast(%var_4954, dtype="int64") /* ty=Tensor[(10, 10, 13), int64] */;
    %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %342 = maximum(%340, %341) /* ty=Tensor[(10, 10, 13), int64] */;
    %343 = cast(%342, dtype="float64") /* ty=Tensor[(10, 10, 13), float64] */;
    %344 = sigmoid(%343) /* ty=Tensor[(10, 10, 13), float64] */;
    %345 = cast(%var_5013, dtype="bool") /* ty=Tensor[(10, 10, 13), bool] */;
    %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
    %347 = cast(%344, dtype="bool") /* ty=Tensor[(10, 10, 13), bool] */;
    %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %349 = greater(%347, %348) /* ty=Tensor[(10, 10, 13), bool] */;
    %350 = cast(%349, dtype="int32") /* ty=Tensor[(10, 10, 13), int32] */;
    %351 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
    %352 = cast(%344, dtype="int32") /* ty=Tensor[(10, 10, 13), int32] */;
    %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %354 = cast(%var_5031, dtype="float32") /* ty=Tensor[(256), float32] */;
    %355 = cast(%var_5032, dtype="float32") /* ty=Tensor[(3584), float32] */;
    %356 = cast(meta[relay.Constant][34] /* ty=Tensor[(700), uint64] */, dtype="uint64") /* ty=Tensor[(700), uint64] */;
    %357 = cast(%var_5034, dtype="float32") /* ty=Tensor[(96), float32] */;
    %358 = cast(%var_5035, dtype="float32") /* ty=Tensor[(378, 4), float32] */;
    %359 = cast(meta[relay.Constant][35] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %360 = cast(%var_4973, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %361 = cast(meta[relay.Constant][36] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
    %362 = %327.4;
    %363 = cast(%362, dtype="int16") /* ty=Tensor[(1274), int16] */;
    %364 = cast(%var_5032, dtype="float64") /* ty=Tensor[(3584), float64] */;
    %365 = reshape(%354, newshape=[16, 16, 1]) /* ty=Tensor[(16, 16, 1), float32] */;
    %366 = reshape(%355, newshape=[16, 16, 14]) /* ty=Tensor[(16, 16, 14), float32] */;
    %367 = reshape(%356, newshape=[700]) /* ty=Tensor[(700), uint64] */;
    %368 = reshape(%357, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
    %369 = reshape(%358, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
    %370 = reshape(%359, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %371 = reshape(%360, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
    %372 = reshape(%361, newshape=[14, 1]) /* ty=Tensor[(14, 1), int16] */;
    %373 = reshape(%363, newshape=[1274]) /* ty=Tensor[(1274), int16] */;
    %374 = reshape(%364, newshape=[16, 16, 14]) /* ty=Tensor[(16, 16, 14), float64] */;
    %375 = @func_1845(%365, %366, %367, %368, %369, %370, %371, %372, %373, %374) /* ty=(Tensor[(14, 5, 10), uint64], Tensor[(700), uint64], Tensor[(16, 16, 14), bool], Tensor[(1, 112), uint64], Tensor[(8, 12), float32], Tensor[(1512), float32], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(14, 1), int16], Tensor[(1274), int16], Tensor[(16, 16, 14), float32], Tensor[(336), float64], Tensor[(16, 16, 14), float64], Tensor[(14, 5, 10), uint64], Tensor[(336), float64], Tensor[(5, 3, 16), int32]) */;
    %376 = %311.2;
    %377 = %316.3;
    %378 = floor_mod(%323, %324) /* ty=Tensor[(14, 15, 2), float32] */;
    %379 = %334.3;
    %380 = %337.0;
    %381 = minimum(%352, %353) /* ty=Tensor[(10, 10, 13), int32] */;
    %382 = %375.19;
    (%376, %var_4972, %var_4973, %377, %var_4983, meta[relay.Constant][33] /* ty=Tensor[(336), float64] */, %378, %362, %379, %380, %var_5018, %381, %382, %var_5031, %var_5032, meta[relay.Constant][34] /* ty=Tensor[(700), uint64] */, %var_5034, %var_5035, meta[relay.Constant][35] /* ty=Tensor[(480), float32] */, meta[relay.Constant][36] /* ty=Tensor[(14), int16] */)
  };
  %383(%var_5044, %var_5045, %var_5046, %var_5047, %var_5048, %var_5049, %var_5050, %var_5051, %var_5052, %var_5053, %var_5054, %var_5055) /* ty=(Tensor[(2184), float64], Tensor[(1755), float32], Tensor[(2184), float64], Tensor[(24, 14), float64], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(14, 15, 2), float32], Tensor[(1274), int16], Tensor[(13, 15, 9), uint16], Tensor[(9, 12, 13), bool], Tensor[(13), bool], Tensor[(10, 10, 13), int32], Tensor[(5, 3, 16), int32], Tensor[(256), float32], Tensor[(3584), float32], Tensor[(700), uint64], Tensor[(96), float32], Tensor[(378, 4), float32], Tensor[(480), float32], Tensor[(14), int16]) */
}

def @func_6136(%var_6131: Tensor[(11, 9, 2), uint64], %var_6132: Tensor[(140), int8], %var_6133: Tensor[(72), float64], %var_6134: Tensor[(112), uint64], %var_6135: Tensor[(336), float64]) -> (Tensor[(11, 9, 2), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(208), float64], Tensor[(140), int8], Tensor[(72), float64], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(3, 16, 7), float32], Tensor[(13, 14, 12), float64]) {
  %430 = fn (%var_6063: Tensor[(11, 9, 2), uint64], %var_6109: Tensor[(140), int8], %var_6110: Tensor[(72), float64], %var_6111: Tensor[(112), uint64], %var_6112: Tensor[(336), float64]) -> (Tensor[(11, 9, 2), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(208), float64], Tensor[(140), int8], Tensor[(72), float64], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(3, 16, 7), float32], Tensor[(13, 14, 12), float64]) {
    %384 = @func_6013() /* ty=Tensor[(11, 9, 2), uint64] */;
    %385 = cast(%var_6063, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
    %386 = shape_of(%384, dtype="int32") /* ty=Tensor[(3), int32] */;
    %387 = cast(%384, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
    %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %389 = cast(meta[relay.Constant][37] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %390 = reshape(%389, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
    %391 = @func_491(%390) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) */;
    %392 = cast(meta[relay.Constant][38] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
    %393 = cast(meta[relay.Constant][38] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
    %394 = cast(%var_6109, dtype="int8") /* ty=Tensor[(140), int8] */;
    %395 = cast(meta[relay.Constant][37] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %396 = cast(%var_6110, dtype="float64") /* ty=Tensor[(72), float64] */;
    %397 = cast(%var_6111, dtype="uint64") /* ty=Tensor[(112), uint64] */;
    %398 = cast(%var_6112, dtype="float64") /* ty=Tensor[(336), float64] */;
    %399 = reshape(%392, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float64] */;
    %400 = reshape(%393, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float64] */;
    %401 = reshape(%394, newshape=[1, 140]) /* ty=Tensor[(1, 140), int8] */;
    %402 = reshape(%395, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
    %403 = reshape(%396, newshape=[18, 4]) /* ty=Tensor[(18, 4), float64] */;
    %404 = reshape(%397, newshape=[112]) /* ty=Tensor[(112), uint64] */;
    %405 = reshape(%398, newshape=[336, 1]) /* ty=Tensor[(336, 1), float64] */;
    %406 = @func_2711(%399, %400, %401, %402, %403, %404, %405) /* ty=(Tensor[(4, 4, 13), float64], Tensor[(10, 14, 1), float32], Tensor[(1, 140), int8], Tensor[(2184), float64], Tensor[(4, 4, 13), float32], Tensor[(4, 9, 2), float64], Tensor[(18, 4), float64], Tensor[(3, 16, 7), uint16], Tensor[(112), uint64], Tensor[(336, 1), float64], Tensor[(3, 16, 7), float32]) */;
    %407 = cast(meta[relay.Constant][38] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
    %408 = cast(meta[relay.Constant][38] /* ty=Tensor[(208), float64] */, dtype="float64") /* ty=Tensor[(208), float64] */;
    %409 = cast(%var_6109, dtype="int8") /* ty=Tensor[(140), int8] */;
    %410 = cast(meta[relay.Constant][37] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %411 = cast(%var_6110, dtype="float64") /* ty=Tensor[(72), float64] */;
    %412 = cast(%var_6111, dtype="uint64") /* ty=Tensor[(112), uint64] */;
    %413 = cast(%var_6112, dtype="float64") /* ty=Tensor[(336), float64] */;
    %414 = reshape(%407, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float64] */;
    %415 = reshape(%408, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float64] */;
    %416 = reshape(%409, newshape=[1, 140]) /* ty=Tensor[(1, 140), int8] */;
    %417 = reshape(%410, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
    %418 = reshape(%411, newshape=[18, 4]) /* ty=Tensor[(18, 4), float64] */;
    %419 = reshape(%412, newshape=[112]) /* ty=Tensor[(112), uint64] */;
    %420 = reshape(%413, newshape=[336, 1]) /* ty=Tensor[(336, 1), float64] */;
    %421 = @func_2711(%414, %415, %416, %417, %418, %419, %420) /* ty=(Tensor[(4, 4, 13), float64], Tensor[(10, 14, 1), float32], Tensor[(1, 140), int8], Tensor[(2184), float64], Tensor[(4, 4, 13), float32], Tensor[(4, 9, 2), float64], Tensor[(18, 4), float64], Tensor[(3, 16, 7), uint16], Tensor[(112), uint64], Tensor[(336, 1), float64], Tensor[(3, 16, 7), float32]) */;
    %422 = %391.3;
    %423 = cast(%422, dtype="float64") /* ty=Tensor[(13, 14, 12), float64] */;
    %424 = reshape(%423, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
    %425 = @func_491(%424) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) */;
    %426 = power(%387, %388) /* ty=Tensor[(11, 9, 2), float32] */;
    %427 = %406.7;
    %428 = %421.10;
    %429 = %425.2;
    (%426, %422, meta[relay.Constant][37] /* ty=Tensor[(2184), float64] */, %427, meta[relay.Constant][38] /* ty=Tensor[(208), float64] */, %var_6109, %var_6110, %var_6111, %var_6112, %428, %429)
  };
  %430(%var_6131, %var_6132, %var_6133, %var_6134, %var_6135) /* ty=(Tensor[(11, 9, 2), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(208), float64], Tensor[(140), int8], Tensor[(72), float64], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(3, 16, 7), float32], Tensor[(13, 14, 12), float64]) */
}

def @func_6198(%var_6187: Tensor[(12, 5, 15), float64], %var_6188: Tensor[(12, 5, 15), float64]) -> Tensor[(12, 5, 15), float64] {
  %431 = cast(%var_6188, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %432 = shape_of(%var_6187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%var_6187, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%433, %434) /* ty=Tensor[(12, 5, 15), float64] */
}

def @func_1857(%var_1847: Tensor[(16, 16, 1), float32], %var_1848: Tensor[(16, 16, 14), float32], %var_1849: Tensor[(700), uint64], %var_1850: Tensor[(8, 12), float32], %var_1851: Tensor[(1512), float32], %var_1852: Tensor[(480), float32], %var_1853: Tensor[(2184), float64], %var_1854: Tensor[(14, 1), int16], %var_1855: Tensor[(1274), int16], %var_1856: Tensor[(16, 16, 14), float64]) -> (Tensor[(14, 5, 10), uint64], Tensor[(700), uint64], Tensor[(16, 16, 14), bool], Tensor[(1, 112), uint64], Tensor[(8, 12), float32], Tensor[(1512), float32], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(14, 1), int16], Tensor[(1274), int16], Tensor[(16, 16, 14), float32], Tensor[(336), float64], Tensor[(16, 16, 14), float64], Tensor[(14, 5, 10), uint64], Tensor[(336), float64], Tensor[(5, 3, 16), int32]) {
  @func_1845(%var_1847, %var_1848, %var_1849, %var_1850, %var_1851, %var_1852, %var_1853, %var_1854, %var_1855, %var_1856) /* ty=(Tensor[(14, 5, 10), uint64], Tensor[(700), uint64], Tensor[(16, 16, 14), bool], Tensor[(1, 112), uint64], Tensor[(8, 12), float32], Tensor[(1512), float32], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(14, 1), int16], Tensor[(1274), int16], Tensor[(16, 16, 14), float32], Tensor[(336), float64], Tensor[(16, 16, 14), float64], Tensor[(14, 5, 10), uint64], Tensor[(336), float64], Tensor[(5, 3, 16), int32]) */
}

def @func_5979(%var_5968: Tensor[(11, 9, 2), float64]) -> (Tensor[(11, 9, 2), int8], Tensor[(11, 9, 2), float64]) {
  %435 = @func_5648() /* ty=(Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) */;
  %436 = %435.1;
  %437 = cast(%var_5968, dtype="int8") /* ty=Tensor[(11, 9, 2), int8] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%436, dtype="int8") /* ty=Tensor[(11, 9, 2), int8] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %441 = cast(%var_5968, dtype="float64") /* ty=Tensor[(11, 9, 2), float64] */;
  %442 = bitwise_and(%439, %440) /* ty=Tensor[(11, 9, 2), int8] */;
  %443 = sigmoid(%441) /* ty=Tensor[(11, 9, 2), float64] */;
  (%442, %443)
}

def @func_2395(%var_2394: Tensor[(4, 9, 2), float64]) -> (Tensor[(4, 9, 2), float64],) {
  %446 = fn (%var_2388: Tensor[(4, 9, 2), float64]) -> (Tensor[(4, 9, 2), float64],) {
    %444 = cast(%var_2388, dtype="float64") /* ty=Tensor[(4, 9, 2), float64] */;
    %445 = acos(%444) /* ty=Tensor[(4, 9, 2), float64] */;
    (%445,)
  };
  %446(%var_2394) /* ty=(Tensor[(4, 9, 2), float64],) */
}

def @func_786(%var_784: Tensor[(5, 3, 16), int32], %var_785: Tensor[(5, 3, 16), int32]) -> (Tensor[(5, 3, 16), int32],) {
  %452 = fn (%var_778: Tensor[(5, 3, 16), int32], %var_779: Tensor[(5, 3, 16), int32]) -> (Tensor[(5, 3, 16), int32],) {
    %447 = cast(%var_779, dtype="int32") /* ty=Tensor[(5, 3, 16), int32] */;
    %448 = shape_of(%var_778, dtype="int32") /* ty=Tensor[(3), int32] */;
    %449 = cast(%var_778, dtype="int32") /* ty=Tensor[(5, 3, 16), int32] */;
    %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %451 = right_shift(%449, %450) /* ty=Tensor[(5, 3, 16), int32] */;
    (%451,)
  };
  %452(%var_784, %var_785) /* ty=(Tensor[(5, 3, 16), int32],) */
}

def @func_3128(%var_3109: Tensor[(1, 1, 13), bool]) -> (Tensor[(9, 12, 13), bool], Tensor[(5, 3, 16), int32], Tensor[(120, 2), int32]) {
  %453 = cast(%var_3109, dtype="bool") /* ty=Tensor[(1, 1, 13), bool] */;
  %454 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 12, 13), bool] */, dtype="bool") /* ty=Tensor[(9, 12, 13), bool] */;
  %455 = cast(meta[relay.Constant][40] /* ty=Tensor[(120, 2), int32] */, dtype="int32") /* ty=Tensor[(120, 2), int32] */;
  %456 = cast(meta[relay.Constant][40] /* ty=Tensor[(120, 2), int32] */, dtype="int32") /* ty=Tensor[(120, 2), int32] */;
  %457 = reshape(%455, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %458 = reshape(%456, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %459 = @func_783(%457, %458) /* ty=(Tensor[(5, 3, 16), int32],) */;
  %460 = logical_and(%453, %454) /* ty=Tensor[(9, 12, 13), bool] */;
  %461 = %459.0;
  (%460, %461, meta[relay.Constant][40] /* ty=Tensor[(120, 2), int32] */)
}

def @func_5944(%var_5941: Tensor[(1755), float32], %var_5942: Tensor[(2184), float64], %var_5943: Tensor[(11, 9, 2), float64]) -> (Tensor[(1755), float32], Tensor[(2184), float64], Tensor[(11, 9, 2), float32], Tensor[(11, 9, 2), int64], Tensor[(11, 9, 2), float64], Tensor[(13, 14, 12), float32]) {
  %487 = fn (%var_5898: Tensor[(1755), float32], %var_5899: Tensor[(2184), float64], %var_5901: Tensor[(11, 9, 2), float64]) -> (Tensor[(1755), float32], Tensor[(2184), float64], Tensor[(11, 9, 2), float32], Tensor[(11, 9, 2), int64], Tensor[(11, 9, 2), float64], Tensor[(13, 14, 12), float32]) {
    %462 = @func_5732() /* ty=Tensor[(11, 9, 2), float64] */;
    %463 = cast(%var_5901, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
    %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
    %465 = cast(%462, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
    %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %467 = cast(%var_5901, dtype="int64") /* ty=Tensor[(11, 9, 2), int64] */;
    %468 = shape_of(%462, dtype="int32") /* ty=Tensor[(3), int32] */;
    %469 = cast(%462, dtype="int64") /* ty=Tensor[(11, 9, 2), int64] */;
    %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %471 = @func_5756() /* ty=(Tensor[(11, 9, 2), float64],) */;
    %472 = cast(%var_5898, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %473 = cast(%var_5899, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %474 = cast(%var_5898, dtype="float32") /* ty=Tensor[(1755), float32] */;
    %475 = reshape(%472, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
    %476 = reshape(%473, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
    %477 = reshape(%474, newshape=[13, 15, 9]) /* ty=Tensor[(13, 15, 9), float32] */;
    %478 = @func_1243(%475, %476, %477) /* ty=(Tensor[(13, 15, 9), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(13, 15, 9), uint16], Tensor[(13, 14, 12), float32]) */;
    %479 = %478.1;
    %480 = cast(%479, dtype="float32") /* ty=Tensor[(13, 14, 12), float32] */;
    %481 = cosh(%480) /* ty=Tensor[(13, 14, 12), float32] */;
    %482 = cast(%481, dtype="float32") /* ty=Tensor[(13, 14, 12), float32] */;
    %483 = divide(%465, %466) /* ty=Tensor[(11, 9, 2), float32] */;
    %484 = bitwise_or(%469, %470) /* ty=Tensor[(11, 9, 2), int64] */;
    %485 = %471.0;
    %486 = acosh(%482) /* ty=Tensor[(13, 14, 12), float32] */;
    (%var_5898, %var_5899, %483, %484, %485, %486)
  };
  %487(%var_5941, %var_5942, %var_5943) /* ty=(Tensor[(1755), float32], Tensor[(2184), float64], Tensor[(11, 9, 2), float32], Tensor[(11, 9, 2), int64], Tensor[(11, 9, 2), float64], Tensor[(13, 14, 12), float32]) */
}

def @func_5232(%var_5226: Tensor[(12, 6, 13), int16], %var_5227: Tensor[(12, 6, 13), int16], %var_5228: Tensor[(1, 1755), float32], %var_5229: Tensor[(420), int32], %var_5230: Tensor[(3584), float32], %var_5231: Tensor[(96), float32]) -> (Tensor[(12, 6, 13), uint16], Tensor[(13, 15, 9), uint16], Tensor[(1300), int64], Tensor[(1, 1755), float32], Tensor[(2184), float64], Tensor[(112), uint64], Tensor[(420), int32], Tensor[(13), bool], Tensor[(256), float32], Tensor[(3584), float32], Tensor[(96), float32], Tensor[(1512), float32], Tensor[(14), int16]) {
  @func_5224(%var_5226, %var_5227, %var_5228, %var_5229, %var_5230, %var_5231) /* ty=(Tensor[(12, 6, 13), uint16], Tensor[(13, 15, 9), uint16], Tensor[(1300), int64], Tensor[(1, 1755), float32], Tensor[(2184), float64], Tensor[(112), uint64], Tensor[(420), int32], Tensor[(13), bool], Tensor[(256), float32], Tensor[(3584), float32], Tensor[(96), float32], Tensor[(1512), float32], Tensor[(14), int16]) */
}

def @func_2808(%var_2799: Tensor[(15, 15, 5), float32], %var_2800: Tensor[(15, 15, 5), int32], %var_2801: Tensor[(256), float32], %var_2802: Tensor[(32, 112), float32], %var_2803: Tensor[(700), uint64], %var_2804: Tensor[(96), float32], %var_2805: Tensor[(480, 1), float32], %var_2806: Tensor[(2184), float64], %var_2807: Tensor[(1274), int16]) -> (Tensor[(15, 15, 5), uint64], Tensor[(480), float32], Tensor[(256), float32], Tensor[(700), uint64], Tensor[(96), float32], Tensor[(1512), float32], Tensor[(480, 1), float32], Tensor[(2184), float64], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(15, 15, 5), int64], Tensor[(32, 112), int64], Tensor[(2184), float64], Tensor[(112), uint64], Tensor[(336), float64]) {
  @func_2797(%var_2799, %var_2800, %var_2801, %var_2802, %var_2803, %var_2804, %var_2805, %var_2806, %var_2807) /* ty=(Tensor[(15, 15, 5), uint64], Tensor[(480), float32], Tensor[(256), float32], Tensor[(700), uint64], Tensor[(96), float32], Tensor[(1512), float32], Tensor[(480, 1), float32], Tensor[(2184), float64], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(15, 15, 5), int64], Tensor[(32, 112), int64], Tensor[(2184), float64], Tensor[(112), uint64], Tensor[(336), float64]) */
}

def @func_3915(%var_3911: Tensor[(10, 3, 2), float64], %var_3912: Tensor[(10, 3, 2), float64], %var_3913: Tensor[(240), int32], %var_3914: Tensor[(480), float32]) -> (Tensor[(10, 3, 2), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64]) {
  %505 = fn (%var_3894: Tensor[(10, 3, 2), float64], %var_3895: Tensor[(10, 3, 2), float64], %var_3902: Tensor[(240), int32], %var_3905: Tensor[(480), float32]) -> (Tensor[(10, 3, 2), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64]) {
    %488 = cast(%var_3895, dtype="float64") /* ty=Tensor[(10, 3, 2), float64] */;
    %489 = shape_of(%var_3894, dtype="int32") /* ty=Tensor[(3), int32] */;
    %490 = cast(%var_3894, dtype="float64") /* ty=Tensor[(10, 3, 2), float64] */;
    %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %492 = cast(%var_3902, dtype="int32") /* ty=Tensor[(240), int32] */;
    %493 = cast(%var_3902, dtype="int32") /* ty=Tensor[(240), int32] */;
    %494 = reshape(%492, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
    %495 = reshape(%493, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
    %496 = @func_783(%494, %495) /* ty=(Tensor[(5, 3, 16), int32],) */;
    %497 = cast(%var_3905, dtype="float32") /* ty=Tensor[(480), float32] */;
    %498 = cast(meta[relay.Constant][41] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %499 = reshape(%497, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float32] */;
    %500 = reshape(%498, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
    %501 = @func_571(%499, %500) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) */;
    %502 = floor_divide(%490, %491) /* ty=Tensor[(10, 3, 2), float64] */;
    %503 = %496.0;
    %504 = %501.1;
    (%502, %503, %var_3902, %504, %var_3905, meta[relay.Constant][41] /* ty=Tensor[(2184), float64] */)
  };
  %505(%var_3911, %var_3912, %var_3913, %var_3914) /* ty=(Tensor[(10, 3, 2), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64]) */
}

def @func_4685(%var_4681: Tensor[(16, 16, 8), float32], %var_4682: Tensor[(240), int32], %var_4683: Tensor[(72), float64], %var_4684: Tensor[(1, 336), float64]) -> (Tensor[(16, 16, 8), float32], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(4, 9, 2), float64], Tensor[(72), float32], Tensor[(240), int32], Tensor[(112, 1), uint64], Tensor[(1, 336), float64]) {
  %532 = fn (%var_4632: Tensor[(16, 16, 8), float32], %var_4644: Tensor[(240), int32], %var_4649: Tensor[(72), float64], %var_4678: Tensor[(1, 336), float64]) -> (Tensor[(16, 16, 8), float32], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(4, 9, 2), float64], Tensor[(72), float32], Tensor[(240), int32], Tensor[(112, 1), uint64], Tensor[(1, 336), float64]) {
    %506 = cast(8.16266f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %507 = cast(%var_4632, dtype="float32") /* ty=Tensor[(16, 16, 8), float32] */;
    %508 = divide(%506, %507) /* ty=Tensor[(16, 16, 8), float32] */;
    %509 = cast(8.16266f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %510 = cast(%508, dtype="float32") /* ty=Tensor[(16, 16, 8), float32] */;
    %511 = cast(%var_4644, dtype="int32") /* ty=Tensor[(240), int32] */;
    %512 = cast(%var_4644, dtype="int32") /* ty=Tensor[(240), int32] */;
    %513 = reshape(%511, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
    %514 = reshape(%512, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
    %515 = @func_783(%513, %514) /* ty=(Tensor[(5, 3, 16), int32],) */;
    %516 = cast(%var_4649, dtype="float64") /* ty=Tensor[(72), float64] */;
    %517 = reshape(%516, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
    %518 = @func_2393(%517) /* ty=(Tensor[(4, 9, 2), float64],) */;
    %519 = cast(%var_4649, dtype="float32") /* ty=Tensor[(72), float32] */;
    %520 = cast(meta[relay.Constant][42] /* ty=Tensor[(112, 1), uint64] */, dtype="uint64") /* ty=Tensor[(112, 1), uint64] */;
    %521 = cast(%var_4678, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
    %522 = cast(%var_4678, dtype="float64") /* ty=Tensor[(1, 336), float64] */;
    %523 = reshape(%520, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
    %524 = reshape(%521, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
    %525 = reshape(%522, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
    %526 = @func_948(%523, %524, %525) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
    %527 = floor_divide(%509, %510) /* ty=Tensor[(16, 16, 8), float32] */;
    %528 = %515.0;
    %529 = %518.0;
    %530 = sigmoid(%519) /* ty=Tensor[(72), float32] */;
    %531 = %526.7;
    (%527, %528, %var_4644, %529, %530, %531, meta[relay.Constant][42] /* ty=Tensor[(112, 1), uint64] */, %var_4678)
  };
  %532(%var_4681, %var_4682, %var_4683, %var_4684) /* ty=(Tensor[(16, 16, 8), float32], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(4, 9, 2), float64], Tensor[(72), float32], Tensor[(240), int32], Tensor[(112, 1), uint64], Tensor[(1, 336), float64]) */
}

def @func_952(%var_949: Tensor[(1, 16, 7), uint64], %var_950: Tensor[(3, 16, 7), float64], %var_951: Tensor[(3, 16, 7), float64]) -> (Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) {
  %584 = fn (%var_848: Tensor[(1, 16, 7), uint64], %var_902: Tensor[(3, 16, 7), float64], %var_935: Tensor[(3, 16, 7), float64]) -> (Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) {
    %533 = cast(%var_848, dtype="bool") /* ty=Tensor[(1, 16, 7), bool] */;
    %534 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 16, 7), uint64] */, dtype="bool") /* ty=Tensor[(3, 16, 7), bool] */;
    %535 = less_equal(%533, %534) /* ty=Tensor[(3, 16, 7), bool] */;
    %536 = cast(%535, dtype="float32") /* ty=Tensor[(3, 16, 7), float32] */;
    %537 = cast(%var_848, dtype="float32") /* ty=Tensor[(1, 16, 7), float32] */;
    %538 = divide(%536, %537) /* ty=Tensor[(3, 16, 7), float32] */;
    %539 = cast(%535, dtype="float32") /* ty=Tensor[(3, 16, 7), float32] */;
    %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
    %541 = cast(%538, dtype="float32") /* ty=Tensor[(3, 16, 7), float32] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %543 = cast(meta[relay.Constant][44] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
    %544 = cast(meta[relay.Constant][45] /* ty=Tensor[(2184), float64] */, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %545 = reshape(%543, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float32] */;
    %546 = reshape(%544, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
    %547 = @func_571(%545, %546) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) */;
    %548 = cast(%535, dtype="float32") /* ty=Tensor[(3, 16, 7), float32] */;
    %549 = asinh(%548) /* ty=Tensor[(3, 16, 7), float32] */;
    %550 = cast(%var_848, dtype="uint64") /* ty=Tensor[(1, 16, 7), uint64] */;
    %551 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 16, 7), uint64] */, dtype="uint64") /* ty=Tensor[(3, 16, 7), uint64] */;
    %552 = maximum(%550, %551) /* ty=Tensor[(3, 16, 7), uint64] */;
    %553 = cast(%552, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
    %554 = erf(%553) /* ty=Tensor[(3, 16, 7), float64] */;
    %555 = cast(%var_902, dtype="bool") /* ty=Tensor[(3, 16, 7), bool] */;
    %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
    %557 = cast(%554, dtype="bool") /* ty=Tensor[(3, 16, 7), bool] */;
    %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %559 = logical_and(%557, %558) /* ty=Tensor[(3, 16, 7), bool] */;
    %560 = cast(%559, dtype="uint16") /* ty=Tensor[(3, 16, 7), uint16] */;
    %561 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
    %562 = cast(%549, dtype="uint16") /* ty=Tensor[(3, 16, 7), uint16] */;
    %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %564 = %547.2;
    %565 = cast(%564, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %566 = reshape(%565, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
    %567 = @func_491(%566) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) */;
    %568 = cast(meta[relay.Constant][46] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
    %569 = cast(meta[relay.Constant][46] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
    %570 = reshape(%568, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
    %571 = reshape(%569, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
    %572 = @func_783(%570, %571) /* ty=(Tensor[(5, 3, 16), int32],) */;
    %573 = cast(%549, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
    %574 = sigmoid(%573) /* ty=Tensor[(3, 16, 7), float64] */;
    %575 = cast(%var_935, dtype="float32") /* ty=Tensor[(3, 16, 7), float32] */;
    %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
    %577 = cast(%574, dtype="float32") /* ty=Tensor[(3, 16, 7), float32] */;
    %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %579 = multiply(%541, %542) /* ty=Tensor[(3, 16, 7), float32] */;
    %580 = add(%562, %563) /* ty=Tensor[(3, 16, 7), uint16] */;
    %581 = %567.2;
    %582 = %572.0;
    %583 = floor_divide(%577, %578) /* ty=Tensor[(3, 16, 7), float32] */;
    (%579, %564, meta[relay.Constant][44] /* ty=Tensor[(480), float32] */, meta[relay.Constant][45] /* ty=Tensor[(2184), float64] */, %580, %581, %582, meta[relay.Constant][46] /* ty=Tensor[(240), int32] */, %583)
  };
  %584(%var_949, %var_950, %var_951) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */
}

def @func_6917() -> (Tensor[(11, 9, 2), uint64],) {
  %585 = @func_6013() /* ty=Tensor[(11, 9, 2), uint64] */;
  (%585,)
}

def @func_5756() -> (Tensor[(11, 9, 2), float64],) {
  %586 = @func_5648() /* ty=(Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) */;
  %587 = %586.1;
  (%587,)
}

def @func_6864() -> (Tensor[(12, 3, 11), int8],) {
  %590 = fn () -> (Tensor[(12, 3, 11), int8],) {
    %588 = @func_6749() /* ty=(Tensor[(5, 2, 1), float32], Tensor[(12, 3, 11), int8], Tensor[(396), int8]) */;
    %589 = %588.1;
    (%589,)
  };
  %590() /* ty=(Tensor[(12, 3, 11), int8],) */
}

def @func_2418(%var_2403: Tensor[(5, 10, 1), float32]) -> (Tensor[(5, 10, 1), float32],) {
  %591 = cast(%var_2403, dtype="float32") /* ty=Tensor[(5, 10, 1), float32] */;
  %592 = acosh(%591) /* ty=Tensor[(5, 10, 1), float32] */;
  (%592,)
}

def @func_5111(%var_5110: Tensor[(1, 15, 12), uint32]) -> (Tensor[(1, 15, 12), bool], Tensor[(10, 11, 14), bool], Tensor[(1540), int8]) {
  %601 = fn (%var_5067: Tensor[(1, 15, 12), uint32]) -> (Tensor[(1, 15, 12), bool], Tensor[(10, 11, 14), bool], Tensor[(1540), int8]) {
    %593 = cast(meta[relay.Constant][47] /* ty=uint32 */, dtype="bool") /* ty=bool */;
    %594 = cast(%var_5067, dtype="bool") /* ty=Tensor[(1, 15, 12), bool] */;
    %595 = cast(meta[relay.Constant][48] /* ty=Tensor[(1540), int8] */, dtype="int8") /* ty=Tensor[(1540), int8] */;
    %596 = cast(meta[relay.Constant][48] /* ty=Tensor[(1540), int8] */, dtype="int8") /* ty=Tensor[(1540), int8] */;
    %597 = reshape(%595, newshape=[10, 11, 14]) /* ty=Tensor[(10, 11, 14), int8] */;
    %598 = reshape(%596, newshape=[10, 11, 14]) /* ty=Tensor[(10, 11, 14), int8] */;
    %599 = greater(%593, %594) /* ty=Tensor[(1, 15, 12), bool] */;
    %600 = @func_3808(%597, %598) /* ty=Tensor[(10, 11, 14), bool] */;
    (%599, %600, meta[relay.Constant][48] /* ty=Tensor[(1540), int8] */)
  };
  %601(%var_5110) /* ty=(Tensor[(1, 15, 12), bool], Tensor[(10, 11, 14), bool], Tensor[(1540), int8]) */
}

def @func_6429(%var_6395: Tensor[(5, 2, 3), float32]) -> (Tensor[(5, 2, 3), uint8], Tensor[(5, 2, 1), float32], Tensor[(11, 9, 2), float64]) {
  %602 = @func_6051() /* ty=(Tensor[(5, 2, 1), float32],) */;
  %603 = %602.0;
  %604 = cast(%603, dtype="uint8") /* ty=Tensor[(5, 2, 1), uint8] */;
  %605 = cast(%var_6395, dtype="uint8") /* ty=Tensor[(5, 2, 3), uint8] */;
  %606 = cast(%603, dtype="float32") /* ty=Tensor[(5, 2, 1), float32] */;
  %607 = @func_5756() /* ty=(Tensor[(11, 9, 2), float64],) */;
  %608 = right_shift(%604, %605) /* ty=Tensor[(5, 2, 3), uint8] */;
  %609 = erf(%606) /* ty=Tensor[(5, 2, 1), float32] */;
  %610 = %607.0;
  (%608, %609, %610)
}

def @func_4568(%var_4566: Tensor[(112), uint64]) -> (Tensor[(14, 15, 2), int32], Tensor[(14, 15, 2), bool], Tensor[(14, 7, 13), float32], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1092, 2), float64], Tensor[(112), uint64], Tensor[(1512), float32]) {
  @func_4565(%var_4566) /* ty=(Tensor[(14, 15, 2), int32], Tensor[(14, 15, 2), bool], Tensor[(14, 7, 13), float32], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1092, 2), float64], Tensor[(112), uint64], Tensor[(1512), float32]) */
}

def @func_6919() -> (Tensor[(11, 9, 2), uint64],) {
  @func_6917() /* ty=(Tensor[(11, 9, 2), uint64],) */
}

def @main(%var_6958: Tensor[(480), float32], %var_6959: Tensor[(2184), float64], %var_6970: Tensor[(396), float64]) -> (Tensor[(11, 9, 2), float64], Tensor[(5, 2, 396), bool], Tensor[(96), float32], Tensor[(294, 2), uint8], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(396), float32]) {
  %611 = @func_6751() /* ty=(Tensor[(5, 2, 1), float32], Tensor[(12, 3, 11), int8], Tensor[(396), int8]) */;
  %612 = %611.2;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(396), float32] */;
  %614 = asinh(%613) /* ty=Tensor[(396), float32] */;
  %615 = @func_6499() /* ty=(Tensor[(5, 2, 1), float32], Tensor[(5, 2, 1), float64]) */;
  %616 = %615.0;
  %617 = cast(%614, dtype="bool") /* ty=Tensor[(396), bool] */;
  %618 = cast(%616, dtype="bool") /* ty=Tensor[(5, 2, 1), bool] */;
  %619 = cast(meta[relay.Constant][49] /* ty=Tensor[(294, 2), uint8] */, dtype="uint8") /* ty=Tensor[(294, 2), uint8] */;
  %620 = cast(%var_6958, dtype="float32") /* ty=Tensor[(480), float32] */;
  %621 = cast(%var_6959, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %622 = reshape(%619, newshape=[588]) /* ty=Tensor[(588), uint8] */;
  %623 = reshape(%620, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %624 = reshape(%621, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %625 = @func_5837(%622, %623, %624) /* ty=(Tensor[(11, 9, 2), float32], Tensor[(96), float32], uint8, Tensor[(588), uint8], Tensor[(16, 6), float32], Tensor[(480), float32], Tensor[(2184), float64]) */;
  %626 = cast(%614, dtype="float64") /* ty=Tensor[(396), float64] */;
  %627 = acos(%626) /* ty=Tensor[(396), float64] */;
  %628 = cast(%var_6970, dtype="bool") /* ty=Tensor[(396), bool] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(1), int32] */;
  %630 = cast(%627, dtype="bool") /* ty=Tensor[(396), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?), bool] */;
  %632 = logical_and(%630, %631) /* ty=Tensor[(396), bool] */;
  %633 = cast(%632, dtype="float32") /* ty=Tensor[(396), float32] */;
  %634 = @func_5732() /* ty=Tensor[(11, 9, 2), float64] */;
  %635 = equal(%617, %618) /* ty=Tensor[(5, 2, 396), bool] */;
  %636 = %625.1;
  %637 = log10(%633) /* ty=Tensor[(396), float32] */;
  (%634, %635, %636, meta[relay.Constant][49] /* ty=Tensor[(294, 2), uint8] */, %var_6958, %var_6959, %637)
}

def @func_6499() -> (Tensor[(5, 2, 1), float32], Tensor[(5, 2, 1), float64]) {
  @func_6497() /* ty=(Tensor[(5, 2, 1), float32], Tensor[(5, 2, 1), float64]) */
}

def @func_5425(%var_5389: uint8, %var_5390: Tensor[(7, 12, 7), uint8], %var_5409: Tensor[(4, 6, 4), float32], %var_5415: Tensor[(480), float32], %var_5416: Tensor[(2184), float64]) -> (Tensor[(7, 12, 7), uint8], Tensor[(96), float32], Tensor[(1512), float32], Tensor[(4, 6, 4), uint8], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64]) {
  %638 = cast(%var_5389, dtype="uint8") /* ty=uint8 */;
  %639 = cast(%var_5390, dtype="uint8") /* ty=Tensor[(7, 12, 7), uint8] */;
  %640 = cast(meta[relay.Constant][50] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %641 = cast(meta[relay.Constant][51] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %642 = reshape(%640, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float32] */;
  %643 = reshape(%641, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %644 = @func_1595(%642, %643) /* ty=(Tensor[(4, 6, 4), float32], Tensor[(1, 112), uint64], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1, 2184), float64], Tensor[(112), uint64], Tensor[(1512), float32]) */;
  %645 = %644.0;
  %646 = cast(%var_5409, dtype="uint8") /* ty=Tensor[(4, 6, 4), uint8] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%645, dtype="uint8") /* ty=Tensor[(4, 6, 4), uint8] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %650 = cast(%var_5415, dtype="float32") /* ty=Tensor[(480), float32] */;
  %651 = cast(%var_5416, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %652 = reshape(%650, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float32] */;
  %653 = reshape(%651, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %654 = @func_571(%652, %653) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) */;
  %655 = minimum(%638, %639) /* ty=Tensor[(7, 12, 7), uint8] */;
  %656 = logical_xor(%648, %649) /* ty=Tensor[(4, 6, 4), uint8] */;
  %657 = %654.1;
  (%655, meta[relay.Constant][50] /* ty=Tensor[(96), float32] */, meta[relay.Constant][51] /* ty=Tensor[(1512), float32] */, %656, %657, %var_5415, %var_5416)
}

def @func_2580(%var_2577: Tensor[(10, 14, 1), int8], %var_2578: Tensor[(10, 14, 1), int8], %var_2579: Tensor[(84, 26), float64]) -> (Tensor[(10, 14, ?), bool], Tensor[(13, 14, 12), float32], Tensor[(15, 117), float32], Tensor[(84, 26), float64], Tensor[(10, 14, 1), float32], Tensor[(2184), float64], Tensor[(240, 2), float32]) {
  @func_2575(%var_2577, %var_2578, %var_2579) /* ty=(Tensor[(10, 14, ?), bool], Tensor[(13, 14, 12), float32], Tensor[(15, 117), float32], Tensor[(84, 26), float64], Tensor[(10, 14, 1), float32], Tensor[(2184), float64], Tensor[(240, 2), float32]) */
}

def @func_5697(%var_5695: Tensor[(11, 9, 2), float64]) -> (Tensor[(11, 9, 2), int16], Tensor[(11, 9, 2), bool], Tensor[(13, 14, 12), float64], Tensor[(112), uint64], Tensor[(24, 14), float64]) {
  @func_5694(%var_5695) /* ty=(Tensor[(11, 9, 2), int16], Tensor[(11, 9, 2), bool], Tensor[(13, 14, 12), float64], Tensor[(112), uint64], Tensor[(24, 14), float64]) */
}

def @func_2711(%var_2672: Tensor[(4, 4, 13), float64], %var_2673: Tensor[(4, 4, 13), float64], %var_2678: Tensor[(1, 140), int8], %var_2679: Tensor[(2184), float64], %var_2691: Tensor[(18, 4), float64], %var_2694: Tensor[(112), uint64], %var_2695: Tensor[(336, 1), float64]) -> (Tensor[(4, 4, 13), float64], Tensor[(10, 14, 1), float32], Tensor[(1, 140), int8], Tensor[(2184), float64], Tensor[(4, 4, 13), float32], Tensor[(4, 9, 2), float64], Tensor[(18, 4), float64], Tensor[(3, 16, 7), uint16], Tensor[(112), uint64], Tensor[(336, 1), float64], Tensor[(3, 16, 7), float32]) {
  %658 = cast(%var_2673, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
  %659 = shape_of(%var_2672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%var_2672, dtype="float64") /* ty=Tensor[(4, 4, 13), float64] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %662 = cast(%var_2678, dtype="int8") /* ty=Tensor[(1, 140), int8] */;
  %663 = cast(%var_2678, dtype="int8") /* ty=Tensor[(1, 140), int8] */;
  %664 = cast(%var_2679, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %665 = reshape(%662, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), int8] */;
  %666 = reshape(%663, newshape=[10, 14, 1]) /* ty=Tensor[(10, 14, 1), int8] */;
  %667 = reshape(%664, newshape=[84, 26]) /* ty=Tensor[(84, 26), float64] */;
  %668 = @func_2575(%665, %666, %667) /* ty=(Tensor[(10, 14, ?), bool], Tensor[(13, 14, 12), float32], Tensor[(15, 117), float32], Tensor[(84, 26), float64], Tensor[(10, 14, 1), float32], Tensor[(2184), float64], Tensor[(240, 2), float32]) */;
  %669 = cast(%var_2672, dtype="float32") /* ty=Tensor[(4, 4, 13), float32] */;
  %670 = cast(%var_2691, dtype="float64") /* ty=Tensor[(18, 4), float64] */;
  %671 = reshape(%670, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float64] */;
  %672 = @func_2393(%671) /* ty=(Tensor[(4, 9, 2), float64],) */;
  %673 = cast(%var_2694, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %674 = cast(%var_2695, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %675 = cast(%var_2695, dtype="float64") /* ty=Tensor[(336, 1), float64] */;
  %676 = reshape(%673, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %677 = reshape(%674, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %678 = reshape(%675, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %679 = @func_948(%676, %677, %678) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %680 = cast(%var_2694, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %681 = %679.4;
  %682 = cast(%681, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
  %683 = cast(%681, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
  %684 = reshape(%680, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
  %685 = reshape(%682, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %686 = reshape(%683, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
  %687 = @func_948(%684, %685, %686) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
  %688 = power(%660, %661) /* ty=Tensor[(4, 4, 13), float64] */;
  %689 = %668.4;
  %690 = asin(%669) /* ty=Tensor[(4, 4, 13), float32] */;
  %691 = %672.0;
  %692 = %687.0;
  (%688, %689, %var_2678, %var_2679, %690, %691, %var_2691, %681, %var_2694, %var_2695, %692)
}

def @func_1005(%var_1004: Tensor[(12, 9, 14), float32]) -> (Tensor[(3, 16, 7), float32], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(12, 9, 14), uint8]) {
  %708 = fn (%var_977: Tensor[(12, 9, 14), float32]) -> (Tensor[(3, 16, 7), float32], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(12, 9, 14), uint8]) {
    %693 = cast(meta[relay.Constant][52] /* ty=Tensor[(112), uint64] */, dtype="uint64") /* ty=Tensor[(112), uint64] */;
    %694 = cast(meta[relay.Constant][53] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %695 = cast(meta[relay.Constant][53] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %696 = reshape(%693, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), uint64] */;
    %697 = reshape(%694, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
    %698 = reshape(%695, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), float64] */;
    %699 = @func_948(%696, %697, %698) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), uint16], Tensor[(13, 14, 12), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(3, 16, 7), float32]) */;
    %700 = cast(%var_977, dtype="float32") /* ty=Tensor[(12, 9, 14), float32] */;
    %701 = asin(%700) /* ty=Tensor[(12, 9, 14), float32] */;
    %702 = cast(%var_977, dtype="uint8") /* ty=Tensor[(12, 9, 14), uint8] */;
    %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
    %704 = cast(%701, dtype="uint8") /* ty=Tensor[(12, 9, 14), uint8] */;
    %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %706 = %699.8;
    %707 = bitwise_xor(%704, %705) /* ty=Tensor[(12, 9, 14), uint8] */;
    (%706, meta[relay.Constant][52] /* ty=Tensor[(112), uint64] */, meta[relay.Constant][53] /* ty=Tensor[(336), float64] */, %707)
  };
  %708(%var_1004) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(12, 9, 14), uint8]) */
}

def @func_574(%var_572: Tensor[(8, 4, 15), float32], %var_573: Tensor[(2184), float64]) -> (Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) {
  %720 = fn (%var_538: Tensor[(8, 4, 15), float32], %var_553: Tensor[(2184), float64]) -> (Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) {
    %709 = cast(%var_538, dtype="float32") /* ty=Tensor[(8, 4, 15), float32] */;
    %710 = acosh(%709) /* ty=Tensor[(8, 4, 15), float32] */;
    %711 = cast(%710, dtype="float32") /* ty=Tensor[(8, 4, 15), float32] */;
    %712 = shape_of(%var_538, dtype="int32") /* ty=Tensor[(3), int32] */;
    %713 = cast(%var_538, dtype="float32") /* ty=Tensor[(8, 4, 15), float32] */;
    %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %715 = cast(%var_553, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %716 = reshape(%715, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
    %717 = @func_491(%716) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) */;
    %718 = maximum(%713, %714) /* ty=Tensor[(8, 4, 15), float32] */;
    %719 = %717.0;
    (%718, %719, %var_553)
  };
  %720(%var_572, %var_573) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) */
}

def @func_1247(%var_1244: Tensor[(13, 15, 9), float32], %var_1245: Tensor[(2184), float64], %var_1246: Tensor[(13, 15, 9), float32]) -> (Tensor[(13, 15, 9), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(13, 15, 9), uint16], Tensor[(13, 14, 12), float32]) {
  %739 = fn (%var_1191: Tensor[(13, 15, 9), float32], %var_1200: Tensor[(2184), float64], %var_1225: Tensor[(13, 15, 9), float32]) -> (Tensor[(13, 15, 9), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(13, 15, 9), uint16], Tensor[(13, 14, 12), float32]) {
    %721 = cast(meta[relay.Constant][54] /* ty=Tensor[(13, 15, 9), float32] */, dtype="float32") /* ty=Tensor[(13, 15, 9), float32] */;
    %722 = shape_of(%var_1191, dtype="int32") /* ty=Tensor[(3), int32] */;
    %723 = cast(%var_1191, dtype="float32") /* ty=Tensor[(13, 15, 9), float32] */;
    %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %725 = cast(%var_1200, dtype="float64") /* ty=Tensor[(2184), float64] */;
    %726 = reshape(%725, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
    %727 = @func_491(%726) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) */;
    %728 = cast(%var_1225, dtype="uint16") /* ty=Tensor[(13, 15, 9), uint16] */;
    %729 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(13, 15, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %730 = cast(meta[relay.Constant][54] /* ty=Tensor[(13, 15, 9), float32] */, dtype="uint16") /* ty=Tensor[(13, 15, 9), uint16] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %732 = %727.3;
    %733 = cast(%732, dtype="float64") /* ty=Tensor[(13, 14, 12), float64] */;
    %734 = reshape(%733, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
    %735 = @func_491(%734) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float64], Tensor[(13, 14, 12), float32]) */;
    %736 = add(%723, %724) /* ty=Tensor[(13, 15, 9), float32] */;
    %737 = minimum(%730, %731) /* ty=Tensor[(13, 15, 9), uint16] */;
    %738 = %735.3;
    (%736, %732, %var_1200, %737, %738)
  };
  %739(%var_1244, %var_1245, %var_1246) /* ty=(Tensor[(13, 15, 9), float32], Tensor[(13, 14, 12), float32], Tensor[(2184), float64], Tensor[(13, 15, 9), uint16], Tensor[(13, 14, 12), float32]) */
}

def @func_5649() -> (Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) {
  %749 = fn () -> (Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) {
    %740 = cast(meta[relay.Constant][56] /* ty=Tensor[(11, 9, 2), uint64] */, dtype="uint64") /* ty=Tensor[(11, 9, 2), uint64] */;
    %741 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(11, 9, 2), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %742 = cast(meta[relay.Constant][55] /* ty=Tensor[(11, 9, 2), uint64] */, dtype="uint64") /* ty=Tensor[(11, 9, 2), uint64] */;
    %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %744 = cast(meta[relay.Constant][55] /* ty=Tensor[(11, 9, 2), uint64] */, dtype="float64") /* ty=Tensor[(11, 9, 2), float64] */;
    %745 = rsqrt(%744) /* ty=Tensor[(11, 9, 2), float64] */;
    %746 = cast(%745, dtype="float64") /* ty=Tensor[(11, 9, 2), float64] */;
    %747 = maximum(%742, %743) /* ty=Tensor[(11, 9, 2), uint64] */;
    %748 = atan(%746) /* ty=Tensor[(11, 9, 2), float64] */;
    (%747, %748)
  };
  %749() /* ty=(Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) */
}

def @func_6283() -> Tensor[(11, 9, 2), float64] {
  %751 = fn () -> Tensor[(11, 9, 2), float64] {
    %750 = @func_5756() /* ty=(Tensor[(11, 9, 2), float64],) */;
    %750.0
  };
  %751() /* ty=Tensor[(11, 9, 2), float64] */
}

def @func_6497() -> (Tensor[(5, 2, 1), float32], Tensor[(5, 2, 1), float64]) {
  %752 = @func_6051() /* ty=(Tensor[(5, 2, 1), float32],) */;
  %753 = @func_5889() /* ty=Tensor[(5, 2, 1), float32] */;
  %754 = cast(%753, dtype="float32") /* ty=Tensor[(5, 2, 1), float32] */;
  %755 = atan(%754) /* ty=Tensor[(5, 2, 1), float32] */;
  %756 = cast(%755, dtype="float64") /* ty=Tensor[(5, 2, 1), float64] */;
  %757 = %752.0;
  %758 = acosh(%756) /* ty=Tensor[(5, 2, 1), float64] */;
  (%757, %758)
}

def @func_6751() -> (Tensor[(5, 2, 1), float32], Tensor[(12, 3, 11), int8], Tensor[(396), int8]) {
  @func_6749() /* ty=(Tensor[(5, 2, 1), float32], Tensor[(12, 3, 11), int8], Tensor[(396), int8]) */
}

def @func_5733() -> Tensor[(11, 9, 2), float64] {
  %760 = fn () -> Tensor[(11, 9, 2), float64] {
    %759 = @func_5648() /* ty=(Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) */;
    %759.1
  };
  %760() /* ty=Tensor[(11, 9, 2), float64] */
}

def @func_109(%var_106: Tensor[(14, 5, 10), uint64], %var_107: Tensor[(14, 5, 10), uint64], %var_108: Tensor[(14, 5, 10), uint64]) -> (Tensor[(14, 5, 10), uint64], Tensor[(14, 5, 10), float32]) {
  @func_104(%var_106, %var_107, %var_108) /* ty=(Tensor[(14, 5, 10), uint64], Tensor[(14, 5, 10), float32]) */
}

def @func_6265(%var_6264: Tensor[(11, 9, 2), float64]) -> (Tensor[(11, 9, 2), bool], Tensor[(11, 9, 2), float64]) {
  %769 = fn (%var_6230: Tensor[(11, 9, 2), float64]) -> (Tensor[(11, 9, 2), bool], Tensor[(11, 9, 2), float64]) {
    %761 = @func_5732() /* ty=Tensor[(11, 9, 2), float64] */;
    %762 = cast(%var_6230, dtype="bool") /* ty=Tensor[(11, 9, 2), bool] */;
    %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
    %764 = cast(%761, dtype="bool") /* ty=Tensor[(11, 9, 2), bool] */;
    %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %766 = cast(%761, dtype="float64") /* ty=Tensor[(11, 9, 2), float64] */;
    %767 = logical_or(%764, %765) /* ty=Tensor[(11, 9, 2), bool] */;
    %768 = sin(%766) /* ty=Tensor[(11, 9, 2), float64] */;
    (%767, %768)
  };
  %769(%var_6264) /* ty=(Tensor[(11, 9, 2), bool], Tensor[(11, 9, 2), float64]) */
}

def @func_1845(%var_1712: Tensor[(16, 16, 1), float32], %var_1713: Tensor[(16, 16, 14), float32], %var_1742: Tensor[(700), uint64], %var_1762: Tensor[(8, 12), float32], %var_1763: Tensor[(1512), float32], %var_1781: Tensor[(480), float32], %var_1782: Tensor[(2184), float64], %var_1804: Tensor[(14, 1), int16], %var_1805: Tensor[(1274), int16], %var_1811: Tensor[(16, 16, 14), float64]) -> (Tensor[(14, 5, 10), uint64], Tensor[(700), uint64], Tensor[(16, 16, 14), bool], Tensor[(1, 112), uint64], Tensor[(8, 12), float32], Tensor[(1512), float32], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(480), float32], Tensor[(14, 1), int16], Tensor[(1274), int16], Tensor[(16, 16, 14), float32], Tensor[(336), float64], Tensor[(16, 16, 14), float64], Tensor[(14, 5, 10), uint64], Tensor[(336), float64], Tensor[(5, 3, 16), int32]) {
  %770 = cast(%var_1742, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %771 = cast(%var_1742, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %772 = cast(%var_1742, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %773 = reshape(%770, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), uint64] */;
  %774 = reshape(%771, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), uint64] */;
  %775 = reshape(%772, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), uint64] */;
  %776 = @func_104(%773, %774, %775) /* ty=(Tensor[(14, 5, 10), uint64], Tensor[(14, 5, 10), float32]) */;
  %777 = cast(%var_1712, dtype="float64") /* ty=Tensor[(16, 16, 1), float64] */;
  %778 = exp(%777) /* ty=Tensor[(16, 16, 1), float64] */;
  %779 = cast(%var_1712, dtype="float32") /* ty=Tensor[(16, 16, 1), float32] */;
  %780 = cast(%var_1713, dtype="float32") /* ty=Tensor[(16, 16, 14), float32] */;
  %781 = multiply(%779, %780) /* ty=Tensor[(16, 16, 14), float32] */;
  %782 = cast(%778, dtype="uint16") /* ty=Tensor[(16, 16, 1), uint16] */;
  %783 = cast(%781, dtype="uint16") /* ty=Tensor[(16, 16, 14), uint16] */;
  %784 = add(%782, %783) /* ty=Tensor[(16, 16, 14), uint16] */;
  %785 = cast(%784, dtype="bool") /* ty=Tensor[(16, 16, 14), bool] */;
  %786 = cast(%778, dtype="bool") /* ty=Tensor[(16, 16, 1), bool] */;
  %787 = cast(%var_1762, dtype="float32") /* ty=Tensor[(8, 12), float32] */;
  %788 = cast(%var_1763, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %789 = reshape(%787, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float32] */;
  %790 = reshape(%788, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %791 = @func_1595(%789, %790) /* ty=(Tensor[(4, 6, 4), float32], Tensor[(1, 112), uint64], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1, 2184), float64], Tensor[(112), uint64], Tensor[(1512), float32]) */;
  %792 = cast(meta[relay.Constant][57] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %793 = cast(meta[relay.Constant][57] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %794 = reshape(%792, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %795 = reshape(%793, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %796 = @func_783(%794, %795) /* ty=(Tensor[(5, 3, 16), int32],) */;
  %797 = cast(%var_1781, dtype="float32") /* ty=Tensor[(480), float32] */;
  %798 = cast(%var_1782, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %799 = reshape(%797, newshape=[8, 4, 15]) /* ty=Tensor[(8, 4, 15), float32] */;
  %800 = reshape(%798, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %801 = @func_571(%799, %800) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(13, 14, 12), bool], Tensor[(2184), float64]) */;
  %802 = cast(%var_1804, dtype="int16") /* ty=Tensor[(14, 1), int16] */;
  %803 = cast(%var_1805, dtype="int16") /* ty=Tensor[(1274), int16] */;
  %804 = %801.1;
  %805 = cast(%804, dtype="float64") /* ty=Tensor[(13, 14, 12), float64] */;
  %806 = %791.1;
  %807 = cast(%806, dtype="uint64") /* ty=Tensor[(1, 112), uint64] */;
  %808 = cast(%var_1763, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %809 = reshape(%802, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), int16] */;
  %810 = reshape(%803, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), int16] */;
  %811 = reshape(%805, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %812 = reshape(%807, newshape=[1, 112]) /* ty=Tensor[(1, 112), uint64] */;
  %813 = reshape(%808, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %814 = @func_1423(%809, %810, %811, %812, %813) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 112), uint64], Tensor[(336), float64], Tensor[(112), uint64], Tensor[(1512), float32], Tensor[(14, 7, 13), float32]) */;
  %815 = cast(%784, dtype="float64") /* ty=Tensor[(16, 16, 14), float64] */;
  %816 = log(%815) /* ty=Tensor[(16, 16, 14), float64] */;
  %817 = cast(%var_1811, dtype="float32") /* ty=Tensor[(16, 16, 14), float32] */;
  %818 = shape_of(%816, dtype="int32") /* ty=Tensor[(3), int32] */;
  %819 = cast(%816, dtype="float32") /* ty=Tensor[(16, 16, 14), float32] */;
  %820 = dyn.reshape(%817, %818, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %821 = cast(%var_1804, dtype="int16") /* ty=Tensor[(14, 1), int16] */;
  %822 = cast(%var_1805, dtype="int16") /* ty=Tensor[(1274), int16] */;
  %823 = cast(%var_1782, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %824 = cast(%806, dtype="uint64") /* ty=Tensor[(1, 112), uint64] */;
  %825 = cast(%var_1763, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %826 = reshape(%821, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), int16] */;
  %827 = reshape(%822, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), int16] */;
  %828 = reshape(%823, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %829 = reshape(%824, newshape=[1, 112]) /* ty=Tensor[(1, 112), uint64] */;
  %830 = reshape(%825, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %831 = @func_1423(%826, %827, %828, %829, %830) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 112), uint64], Tensor[(336), float64], Tensor[(112), uint64], Tensor[(1512), float32], Tensor[(14, 7, 13), float32]) */;
  %832 = cast(%816, dtype="float32") /* ty=Tensor[(16, 16, 14), float32] */;
  %833 = acosh(%832) /* ty=Tensor[(16, 16, 14), float32] */;
  %834 = cast(%833, dtype="float64") /* ty=Tensor[(16, 16, 14), float64] */;
  %835 = %776.0;
  %836 = cast(%835, dtype="uint64") /* ty=Tensor[(14, 5, 10), uint64] */;
  %837 = cast(%835, dtype="uint64") /* ty=Tensor[(14, 5, 10), uint64] */;
  %838 = cast(%var_1742, dtype="uint64") /* ty=Tensor[(700), uint64] */;
  %839 = reshape(%836, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), uint64] */;
  %840 = reshape(%837, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), uint64] */;
  %841 = reshape(%838, newshape=[14, 5, 10]) /* ty=Tensor[(14, 5, 10), uint64] */;
  %842 = @func_104(%839, %840, %841) /* ty=(Tensor[(14, 5, 10), uint64], Tensor[(14, 5, 10), float32]) */;
  %843 = cast(%var_1763, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %844 = reshape(%843, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
  %845 = @func_1003(%844) /* ty=(Tensor[(3, 16, 7), float32], Tensor[(112), uint64], Tensor[(336), float64], Tensor[(12, 9, 14), uint8]) */;
  %846 = %796.0;
  %847 = cast(%846, dtype="int32") /* ty=Tensor[(5, 3, 16), int32] */;
  %848 = cast(meta[relay.Constant][57] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
  %849 = reshape(%847, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %850 = reshape(%848, newshape=[5, 3, 16]) /* ty=Tensor[(5, 3, 16), int32] */;
  %851 = @func_783(%849, %850) /* ty=(Tensor[(5, 3, 16), int32],) */;
  %852 = logical_or(%785, %786) /* ty=Tensor[(16, 16, 14), bool] */;
  %853 = %814.1;
  %854 = floor_mod(%819, %820) /* ty=Tensor[(16, 16, 14), float32] */;
  %855 = %831.5;
  %856 = log10(%834) /* ty=Tensor[(16, 16, 14), float64] */;
  %857 = %842.0;
  %858 = %845.2;
  %859 = %851.0;
  (%835, %var_1742, %852, %806, %var_1762, %var_1763, %846, meta[relay.Constant][57] /* ty=Tensor[(240), int32] */, %804, %var_1781, %var_1782, %853, %var_1804, %var_1805, %854, %855, %856, %857, %858, %859)
}

def @func_3131(%var_3129: Tensor[(1, 1, 13), bool]) -> (Tensor[(9, 12, 13), bool], Tensor[(5, 3, 16), int32], Tensor[(120, 2), int32]) {
  @func_3128(%var_3129) /* ty=(Tensor[(9, 12, 13), bool], Tensor[(5, 3, 16), int32], Tensor[(120, 2), int32]) */
}

def @func_6014() -> Tensor[(11, 9, 2), uint64] {
  %861 = fn () -> Tensor[(11, 9, 2), uint64] {
    %860 = @func_5648() /* ty=(Tensor[(11, 9, 2), uint64], Tensor[(11, 9, 2), float64]) */;
    %860.0
  };
  %861() /* ty=Tensor[(11, 9, 2), uint64] */
}

def @func_4565(%var_4551: Tensor[(112), uint64]) -> (Tensor[(14, 15, 2), int32], Tensor[(14, 15, 2), bool], Tensor[(14, 7, 13), float32], Tensor[(14), int16], Tensor[(1274), int16], Tensor[(1092, 2), float64], Tensor[(112), uint64], Tensor[(1512), float32]) {
  %862 = cast(meta[relay.Constant][59] /* ty=Tensor[(14, 15, 2), int32] */, dtype="int32") /* ty=Tensor[(14, 15, 2), int32] */;
  %863 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(14, 15, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(meta[relay.Constant][58] /* ty=Tensor[(14, 15, 2), int32] */, dtype="int32") /* ty=Tensor[(14, 15, 2), int32] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %866 = cast(meta[relay.Constant][58] /* ty=Tensor[(14, 15, 2), int32] */, dtype="bool") /* ty=Tensor[(14, 15, 2), bool] */;
  %867 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(14, 15, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(meta[relay.Constant][59] /* ty=Tensor[(14, 15, 2), int32] */, dtype="bool") /* ty=Tensor[(14, 15, 2), bool] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %870 = cast(meta[relay.Constant][60] /* ty=Tensor[(14), int16] */, dtype="int16") /* ty=Tensor[(14), int16] */;
  %871 = cast(meta[relay.Constant][61] /* ty=Tensor[(1274), int16] */, dtype="int16") /* ty=Tensor[(1274), int16] */;
  %872 = cast(meta[relay.Constant][62] /* ty=Tensor[(1092, 2), float64] */, dtype="float64") /* ty=Tensor[(1092, 2), float64] */;
  %873 = cast(%var_4551, dtype="uint64") /* ty=Tensor[(112), uint64] */;
  %874 = cast(meta[relay.Constant][63] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %875 = reshape(%870, newshape=[14, 1, 1]) /* ty=Tensor[(14, 1, 1), int16] */;
  %876 = reshape(%871, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), int16] */;
  %877 = reshape(%872, newshape=[2184]) /* ty=Tensor[(2184), float64] */;
  %878 = reshape(%873, newshape=[1, 112]) /* ty=Tensor[(1, 112), uint64] */;
  %879 = reshape(%874, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %880 = @func_1423(%875, %876, %877, %878, %879) /* ty=(Tensor[(8, 4, 15), float32], Tensor[(480), float32], Tensor[(2184), float64], Tensor[(3, 16, 7), float32], Tensor[(1, 112), uint64], Tensor[(336), float64], Tensor[(112), uint64], Tensor[(1512), float32], Tensor[(14, 7, 13), float32]) */;
  %881 = maximum(%864, %865) /* ty=Tensor[(14, 15, 2), int32] */;
  %882 = less_equal(%868, %869) /* ty=Tensor[(14, 15, 2), bool] */;
  %883 = %880.8;
  (%881, %882, %883, meta[relay.Constant][60] /* ty=Tensor[(14), int16] */, meta[relay.Constant][61] /* ty=Tensor[(1274), int16] */, meta[relay.Constant][62] /* ty=Tensor[(1092, 2), float64] */, %var_4551, meta[relay.Constant][63] /* ty=Tensor[(1512), float32] */)
}

def @func_6649() -> (Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float64], Tensor[(30), float32]) {
  @func_6647() /* ty=(Tensor[(11, 9, 2), float64], Tensor[(11, 9, 2), float64], Tensor[(30), float32]) */
}

def @func_6432(%var_6430: Tensor[(5, 2, 3), float32]) -> (Tensor[(5, 2, 3), uint8], Tensor[(5, 2, 1), float32], Tensor[(11, 9, 2), float64]) {
  @func_6429(%var_6430) /* ty=(Tensor[(5, 2, 3), uint8], Tensor[(5, 2, 1), float32], Tensor[(11, 9, 2), float64]) */
}

def @func_5982(%var_5980: Tensor[(11, 9, 2), float64]) -> (Tensor[(11, 9, 2), int8], Tensor[(11, 9, 2), float64]) {
  @func_5979(%var_5980) /* ty=(Tensor[(11, 9, 2), int8], Tensor[(11, 9, 2), float64]) */
}

def @func_5758() -> (Tensor[(11, 9, 2), float64],) {
  @func_5756() /* ty=(Tensor[(11, 9, 2), float64],) */
}

def @func_6180(%var_6179: Tensor[(15, 4), float64]) -> (Tensor[(11, 9, 2), float64], Tensor[(10, 3, 2), float64], Tensor[(15, 4), float64], Tensor[(240), int32], Tensor[(8, 60), float32]) {
  %895 = fn (%var_6169: Tensor[(15, 4), float64]) -> (Tensor[(11, 9, 2), float64], Tensor[(10, 3, 2), float64], Tensor[(15, 4), float64], Tensor[(240), int32], Tensor[(8, 60), float32]) {
    %884 = cast(%var_6169, dtype="float64") /* ty=Tensor[(15, 4), float64] */;
    %885 = cast(%var_6169, dtype="float64") /* ty=Tensor[(15, 4), float64] */;
    %886 = cast(meta[relay.Constant][64] /* ty=Tensor[(240), int32] */, dtype="int32") /* ty=Tensor[(240), int32] */;
    %887 = cast(meta[relay.Constant][65] /* ty=Tensor[(8, 60), float32] */, dtype="float32") /* ty=Tensor[(8, 60), float32] */;
    %888 = reshape(%884, newshape=[10, 3, 2]) /* ty=Tensor[(10, 3, 2), float64] */;
    %889 = reshape(%885, newshape=[10, 3, 2]) /* ty=Tensor[(10, 3, 2), float64] */;
    %890 = reshape(%886, newshape=[240]) /* ty=Tensor[(240), int32] */;
    %891 = reshape(%887, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %892 = @func_3910(%888, %889, %890, %891) /* ty=(Tensor[(10, 3, 2), float64], Tensor[(5, 3, 16), int32], Tensor[(240), int32], Tensor[(13, 14, 12), bool], Tensor[(480), float32], Tensor[(2184), float64]) */;
    %893 = @func_5732() /* ty=Tensor[(11, 9, 2), float64] */;
    %894 = %892.0;
    (%893, %894, %var_6169, meta[relay.Constant][64] /* ty=Tensor[(240), int32] */, meta[relay.Constant][65] /* ty=Tensor[(8, 60), float32] */)
  };
  %895(%var_6179) /* ty=(Tensor[(11, 9, 2), float64], Tensor[(10, 3, 2), float64], Tensor[(15, 4), float64], Tensor[(240), int32], Tensor[(8, 60), float32]) */
}

def @func_6202(%var_6200: Tensor[(12, 5, 15), float64], %var_6201: Tensor[(12, 5, 15), float64]) -> Tensor[(12, 5, 15), float64] {
  @func_6198(%var_6200, %var_6201) /* ty=Tensor[(12, 5, 15), float64] */
}

def @func_6052() -> (Tensor[(5, 2, 1), float32],) {
  %897 = fn () -> (Tensor[(5, 2, 1), float32],) {
    %896 = @func_5889() /* ty=Tensor[(5, 2, 1), float32] */;
    (%896,)
  };
  %897() /* ty=(Tensor[(5, 2, 1), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen32/build/output.py", line 1376, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:45:19] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

