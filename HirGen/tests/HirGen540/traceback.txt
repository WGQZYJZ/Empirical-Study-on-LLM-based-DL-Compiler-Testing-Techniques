==========mod==========
#[version = "0.0.5"]
def @func_12751(%var_12741: Tensor[(10, 6, 14), float32], %var_12742: Tensor[(10, 6, 14), float32]) -> Tensor[(10, 6, 14), bool] {
  %0 = cast(%var_12742, dtype="bool") /* ty=Tensor[(10, 6, 14), bool] */;
  %1 = shape_of(%var_12741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_12741, dtype="bool") /* ty=Tensor[(10, 6, 14), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%2, %3) /* ty=Tensor[(10, 6, 14), bool] */
}

def @func_11605() -> (Tensor[(15, 2, 13), float64],) {
  %4 = @func_10292() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %5 = %4.0;
  (%5,)
}

def @func_10460(%var_10457: Tensor[(1500), float64], %var_10458: Tensor[(168), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(60), uint8], Tensor[(18), float32], Tensor[(15, 2, 13), float64], Tensor[(6, 4), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(1500), float64], Tensor[(168), float32]) {
  %6 = @func_8251() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %9 = reshape(%7, newshape=[60]) /* ty=Tensor[(60), uint8] */;
  %10 = reshape(%8, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %11 = @func_9810(%9, %10) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(13, 1, 5), float32], Tensor[(65), float32], Tensor[(18, ?), int16], Tensor[(18), float32]) */;
  %12 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 4), float64] */;
  %13 = cast(meta[relay.Constant][3] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
  %14 = reshape(%12, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %15 = reshape(%13, newshape=[6, 52]) /* ty=Tensor[(6, 52), int64] */;
  %16 = @func_8444(%14, %15) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(10, 15, 10), float32], Tensor[(1500), float64], Tensor[(6, 52), int64], Tensor[(15, 2, 13), float64]) */;
  %17 = cast(%var_10457, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %18 = cast(meta[relay.Constant][3] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
  %19 = cast(%var_10458, dtype="float32") /* ty=Tensor[(168), float32] */;
  %20 = reshape(%17, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %21 = reshape(%18, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %22 = reshape(%19, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %23 = @func_7630(%20, %21, %22) /* ty=(Tensor[(15, 2, 13), float32], Tensor[(3, 13, 8), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(4, 10, 4), bool], Tensor[(168), float32]) */;
  %24 = %6.0;
  %25 = %11.0;
  %26 = %16.5;
  %27 = %23.5;
  (%24, %25, meta[relay.Constant][0] /* ty=Tensor[(60), uint8] */, meta[relay.Constant][1] /* ty=Tensor[(18), float32] */, %26, meta[relay.Constant][2] /* ty=Tensor[(6, 4), float64] */, meta[relay.Constant][3] /* ty=Tensor[(312), int64] */, %27, %var_10457, %var_10458)
}

def @func_8289() -> (Tensor[(10, 6), bool], Tensor[(150), float64], uint32, Tensor[(66), uint32], Tensor[(312), int64]) {
  %28 = cast(meta[relay.Constant][4] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %29 = cast(meta[relay.Constant][5] /* ty=Tensor[(66), uint32] */, dtype="uint32") /* ty=Tensor[(66), uint32] */;
  %30 = cast(meta[relay.Constant][6] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
  %31 = reshape(%28, newshape=[]) /* ty=uint32 */;
  %32 = reshape(%29, newshape=[66]) /* ty=Tensor[(66), uint32] */;
  %33 = reshape(%30, newshape=[156, 2]) /* ty=Tensor[(156, 2), int64] */;
  %34 = @func_6176(%31, %32, %33) /* ty=(Tensor[(3, 2, 11), uint32], Tensor[(66), uint32], Tensor[(15, 2, 13), int64], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(156, 2), int64], Tensor[(10, 15, ?), float64]) */;
  %35 = @func_7007() /* ty=Tensor[(10, 6), bool] */;
  %36 = %34.4;
  (%35, %36, meta[relay.Constant][4] /* ty=uint32 */, meta[relay.Constant][5] /* ty=Tensor[(66), uint32] */, meta[relay.Constant][6] /* ty=Tensor[(312), int64] */)
}

def @func_5615() -> (Tensor[(15, 2, 13), float64],) {
  %37 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 2, 13), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %38 = sin(%37) /* ty=Tensor[(15, 2, 13), float64] */;
  (%38,)
}

def @func_5919(%var_5900: Tensor[(15, 4, 15), float32], %var_5901: Tensor[(15, 4, 15), float32], %var_5909: Tensor[(3360), float64]) -> (Tensor[(15, 4, 15), float32], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 16, 14), float64], Tensor[(3360), float64]) {
  %39 = cast(%var_5901, dtype="float32") /* ty=Tensor[(15, 4, 15), float32] */;
  %40 = shape_of(%var_5900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%var_5900, dtype="float32") /* ty=Tensor[(15, 4, 15), float32] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %43 = cast(meta[relay.Constant][8] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %44 = reshape(%43, newshape=[10, 6]) /* ty=Tensor[(10, 6), uint8] */;
  %45 = @func_5503(%44) /* ty=(Tensor[(10, 6), bool],) */;
  %46 = cast(%var_5909, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %47 = reshape(%46, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float64] */;
  %48 = multiply(%41, %42) /* ty=Tensor[(15, 4, 15), float32] */;
  %49 = %45.0;
  %50 = @func_3835(%47) /* ty=Tensor[(15, 16, 14), float64] */;
  (%48, %49, meta[relay.Constant][8] /* ty=Tensor[(60), uint8] */, %50, %var_5909)
}

def @func_13480() -> (Tensor[(15, 2, 13), float64],) {
  %51 = @func_7674() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %52 = %51.0;
  (%52,)
}

def @func_13523(%var_13520: Tensor[(168), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(312), int64], Tensor[(1500), float64], Tensor[(168), float32]) {
  %53 = @func_11656() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %54 = cast(meta[relay.Constant][9] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %55 = cast(%var_13520, dtype="float32") /* ty=Tensor[(168), float32] */;
  %56 = reshape(%54, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %57 = reshape(%55, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %58 = @func_10460(%56, %57) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(60), uint8], Tensor[(18), float32], Tensor[(15, 2, 13), float64], Tensor[(6, 4), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(1500), float64], Tensor[(168), float32]) */;
  %59 = %53.0;
  %60 = %58.6;
  (%59, %60, meta[relay.Constant][9] /* ty=Tensor[(1500), float64] */, %var_13520)
}

def @func_11524(%var_11469: Tensor[(15, 15, 6), float32], %var_11520: Tensor[(3360), float64]) -> (Tensor[(15, 15, 6), float32], Tensor[(312), int64], Tensor[(15, 15, 6), bool], Tensor[(15, 15, 6), float64], Tensor[(3360), float64], Tensor[(900), float32], Tensor[(3360), float64]) {
  %61 = cast(%var_11469, dtype="float32") /* ty=Tensor[(15, 15, 6), float32] */;
  %62 = @func_11266() /* ty=(Tensor[(312), int64],) */;
  %63 = cast(%var_11469, dtype="float64") /* ty=Tensor[(15, 15, 6), float64] */;
  %64 = atan(%63) /* ty=Tensor[(15, 15, 6), float64] */;
  %65 = cast(%var_11469, dtype="bool") /* ty=Tensor[(15, 15, 6), bool] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%64, dtype="bool") /* ty=Tensor[(15, 15, 6), bool] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %69 = cast(%var_11469, dtype="float64") /* ty=Tensor[(15, 15, 6), float64] */;
  %70 = cast(meta[relay.Constant][10] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %71 = cast(meta[relay.Constant][10] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %72 = cast(%var_11520, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %73 = reshape(%70, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
  %74 = reshape(%71, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
  %75 = reshape(%72, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %76 = @func_5919(%73, %74, %75) /* ty=(Tensor[(15, 4, 15), float32], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 16, 14), float64], Tensor[(3360), float64]) */;
  %77 = sigmoid(%61) /* ty=Tensor[(15, 15, 6), float32] */;
  %78 = %62.0;
  %79 = greater(%67, %68) /* ty=Tensor[(15, 15, 6), bool] */;
  %80 = asinh(%69) /* ty=Tensor[(15, 15, 6), float64] */;
  %81 = %76.4;
  (%77, %78, %79, %80, %81, meta[relay.Constant][10] /* ty=Tensor[(900), float32] */, %var_11520)
}

def @func_13619(%var_13608: Tensor[(1500), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(25, 6), float64], Tensor[(1500), float64], Tensor[(15, 2, 13), float64]) {
  %82 = cast(meta[relay.Constant][11] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %83 = cast(%var_13608, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %84 = reshape(%82, newshape=[150, 1]) /* ty=Tensor[(150, 1), float64] */;
  %85 = reshape(%83, newshape=[750, 2]) /* ty=Tensor[(750, 2), float64] */;
  %86 = @func_12371(%84, %85) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(150, 1), float64], Tensor[(750, 2), float64], Tensor[(10, 16, 5), float64], Tensor[(14, 14, 9), float64], Tensor[(1764), float64], Tensor[(15, 2, 13), float64], Tensor[(10, 15, 800), uint8]) */;
  %87 = @func_9236() /* ty=Tensor[(15, 2, 13), float64] */;
  %88 = %86.6;
  %89 = @func_7588() /* ty=Tensor[(15, 2, 13), float64] */;
  (%87, %88, meta[relay.Constant][11] /* ty=Tensor[(25, 6), float64] */, %var_13608, %89)
}

def @func_12873() -> (Tensor[(15, 2, 13), float64],) {
  %90 = @func_10381() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(24), float64], Tensor[(312), int64]) */;
  %91 = %90.0;
  (%91,)
}

def @func_13653(%var_13646: Tensor[(60, 2), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(8, 1, 15), float32], Tensor[(60, 2), float32], Tensor[(15, 2, 13), float64]) {
  %92 = cast(%var_13646, dtype="float32") /* ty=Tensor[(60, 2), float32] */;
  %93 = reshape(%92, newshape=[8, 1, 15]) /* ty=Tensor[(8, 1, 15), float32] */;
  %94 = @func_4718(%93) /* ty=(Tensor[(8, 1, 15), float32],) */;
  %95 = @func_10292() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %96 = @func_11156() /* ty=Tensor[(15, 2, 13), float64] */;
  %97 = %94.0;
  %98 = %95.0;
  (%96, %97, %var_13646, %98)
}

def @func_13782() -> Tensor[(15, 2, 13), uint64] {
  %99 = @func_8942() /* ty=(Tensor[(15, 2, 13), uint64],) */;
  %99.0
}

def @func_11037() -> Tensor[(15, 2, 13), float64] {
  @func_8197() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_11914(%var_11893: Tensor[(2, 8), float64], %var_11906: Tensor[(390), float64]) -> (Tensor[(10, 6), bool], Tensor[(8, 2, ?), float64], Tensor[(2, 8), float64], Tensor[(15, 11, 1), uint8], Tensor[(390), float64]) {
  %100 = cast(%var_11893, dtype="float64") /* ty=Tensor[(2, 8), float64] */;
  %101 = cast(%var_11893, dtype="float64") /* ty=Tensor[(2, 8), float64] */;
  %102 = reshape(%100, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), float64] */;
  %103 = reshape(%101, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), float64] */;
  %104 = cast(%var_11906, dtype="float64") /* ty=Tensor[(390), float64] */;
  %105 = reshape(%104, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
  %106 = @func_10874(%105) /* ty=(Tensor[(15, 2, 13), bool], Tensor[(15, 11, 1), uint8], Tensor[(165, 1), uint8]) */;
  %107 = @func_7007() /* ty=Tensor[(10, 6), bool] */;
  %108 = @func_10480(%102, %103) /* ty=Tensor[(8, 2, ?), float64] */;
  %109 = %106.1;
  (%107, %108, %var_11893, %109, %var_11906)
}

def @func_13465() -> Tensor[(10, 6), bool] {
  @func_13116() /* ty=Tensor[(10, 6), bool] */
}

def @func_5153(%var_5124: Tensor[(1, 2, 12), float64]) -> Tensor[(?, 2, 12), float32] {
  %110 = cast(%var_5124, dtype="float64") /* ty=Tensor[(1, 2, 12), float64] */;
  %111 = cosh(%110) /* ty=Tensor[(1, 2, 12), float64] */;
  %112 = cast(%var_5124, dtype="int32") /* ty=Tensor[(1, 2, 12), int32] */;
  %113 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%111, dtype="int32") /* ty=Tensor[(1, 2, 12), int32] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %116 = multiply(%114, %115) /* ty=Tensor[(?, 2, 12), int32] */;
  %117 = cast(%var_5124, dtype="float64") /* ty=Tensor[(1, 2, 12), float64] */;
  %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%116, dtype="float64") /* ty=Tensor[(?, 2, 12), float64] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %121 = mod(%119, %120) /* ty=Tensor[(?, 2, 12), float64] */;
  %122 = cast(%var_5124, dtype="float32") /* ty=Tensor[(1, 2, 12), float32] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="float32") /* ty=Tensor[(?, 2, 12), float32] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%124, %125) /* ty=Tensor[(?, 2, 12), float32] */
}

def @func_9999(%var_9926: Tensor[(4, 5, 7), uint8], %var_9935: Tensor[(168), float32], %var_9944: Tensor[(1764), float64], %var_9953: Tensor[(312), int64], %var_9963: Tensor[(1500), float64], %var_9996: uint32) -> (Tensor[(4, 5, 7), bool], Tensor[(1500), float64], Tensor[(168), float32], Tensor[(14, 14, 9), float64], Tensor[(1764), float64], Tensor[(312), bool], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), int32], Tensor[(15, 2, 13), float64], Tensor[(1, 312), int64], Tensor[(126), uint32], Tensor[(900), float32], uint32) {
  %126 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 5, 7), uint8] */, dtype="bool") /* ty=Tensor[(4, 5, 7), bool] */;
  %127 = shape_of(%var_9926, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%var_9926, dtype="bool") /* ty=Tensor[(4, 5, 7), bool] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %130 = cast(meta[relay.Constant][13] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %131 = cast(meta[relay.Constant][14] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
  %132 = cast(%var_9935, dtype="float32") /* ty=Tensor[(168), float32] */;
  %133 = reshape(%130, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %134 = reshape(%131, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %135 = reshape(%132, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %136 = @func_7630(%133, %134, %135) /* ty=(Tensor[(15, 2, 13), float32], Tensor[(3, 13, 8), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(4, 10, 4), bool], Tensor[(168), float32]) */;
  %137 = cast(%var_9944, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %138 = reshape(%137, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float64] */;
  %139 = @func_8605(%138) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %140 = cast(%var_9953, dtype="bool") /* ty=Tensor[(312), bool] */;
  %141 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(312), int64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %142 = cast(meta[relay.Constant][14] /* ty=Tensor[(312), int64] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?), bool] */;
  %144 = cast(meta[relay.Constant][15] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %145 = reshape(%144, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %146 = @func_5885(%145) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64]) */;
  %147 = cast(%var_9963, dtype="int32") /* ty=Tensor[(1500), int32] */;
  %148 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(1500), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %149 = cast(meta[relay.Constant][13] /* ty=Tensor[(1500), float64] */, dtype="int32") /* ty=Tensor[(1500), int32] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?), int32] */;
  %151 = cast(meta[relay.Constant][16] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %152 = reshape(%151, newshape=[63, 2]) /* ty=Tensor[(63, 2), uint32] */;
  %153 = @func_7328(%152) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(63, 2), uint32], Tensor[(1008), uint32], Tensor[(3, 2, 11), uint32], uint32, Tensor[(66), uint32], Tensor[(1, 312), int64]) */;
  %154 = cast(%var_9996, dtype="uint32") /* ty=uint32 */;
  %155 = less_equal(%142, %143) /* ty=Tensor[(312), bool] */;
  %156 = cast(%155, dtype="int64") /* ty=Tensor[(312), int64] */;
  %157 = reshape(%154, newshape=[]) /* ty=uint32 */;
  %158 = reshape(%156, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %159 = @func_8699(%157, %158) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 4, 15), float32], Tensor[(900), float32], Tensor[(3360), float64], Tensor[(9, 14, 3), float32], Tensor[(378), float32], Tensor[(150), float64], uint32, Tensor[(66), uint32], Tensor[(312), int64]) */;
  %160 = equal(%128, %129) /* ty=Tensor[(4, 5, 7), bool] */;
  %161 = %136.3;
  %162 = %139.1;
  %163 = %146.3;
  %164 = bitwise_and(%149, %150) /* ty=Tensor[(1500), int32] */;
  %165 = @func_9746() /* ty=Tensor[(15, 2, 13), float64] */;
  %166 = %153.7;
  %167 = %159.3;
  (%160, %161, %var_9935, %162, %var_9944, %155, %163, meta[relay.Constant][15] /* ty=Tensor[(150), float64] */, %164, %165, %166, meta[relay.Constant][16] /* ty=Tensor[(126), uint32] */, %167, %var_9996)
}

def @func_12089() -> (Tensor[(15, 2, 13), float64],) {
  %168 = @func_11438() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(60), uint8]) */;
  %169 = %168.1;
  %170 = cast(%169, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %171 = asin(%170) /* ty=Tensor[(15, 2, 13), float64] */;
  (%171,)
}

def @func_10381() -> (Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(24), float64], Tensor[(312), int64]) {
  %172 = @func_9422() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(4, 3, 14), int16], Tensor[(168), float64], Tensor[(126), uint32], Tensor[(1008), uint32], Tensor[(26, 2), float64], Tensor[(3, 6), float32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) */;
  %173 = cast(meta[relay.Constant][17] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %174 = cast(meta[relay.Constant][18] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
  %175 = reshape(%173, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %176 = reshape(%174, newshape=[6, 52]) /* ty=Tensor[(6, 52), int64] */;
  %177 = @func_8444(%175, %176) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(10, 15, 10), float32], Tensor[(1500), float64], Tensor[(6, 52), int64], Tensor[(15, 2, 13), float64]) */;
  %178 = %172.7;
  %179 = %177.1;
  (%178, %179, meta[relay.Constant][17] /* ty=Tensor[(24), float64] */, meta[relay.Constant][18] /* ty=Tensor[(312), int64] */)
}

def @func_1272(%var_1261: Tensor[(15, 11, 1), uint8]) -> Tensor[(15, 11, 1), uint8] {
  %180 = cast(meta[relay.Constant][19] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %181 = cast(%var_1261, dtype="uint8") /* ty=Tensor[(15, 11, 1), uint8] */;
  left_shift(%180, %181) /* ty=Tensor[(15, 11, 1), uint8] */
}

def @func_13251() -> Tensor[(15, 2, 13), float64] {
  %182 = @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %182.0
}

def @func_6207() -> Tensor[(15, 2, 13), float64] {
  @func_6121() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_12624(%var_12617: Tensor[(4, 10, 16), uint16], %var_12618: Tensor[(4, 10, 16), uint16]) -> (Tensor[(4, 10, 16), uint16],) {
  %183 = cast(%var_12618, dtype="uint16") /* ty=Tensor[(4, 10, 16), uint16] */;
  %184 = shape_of(%var_12617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%var_12617, dtype="uint16") /* ty=Tensor[(4, 10, 16), uint16] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %187 = add(%185, %186) /* ty=Tensor[(4, 10, 16), uint16] */;
  (%187,)
}

def @func_10222() -> (Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
  %188 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %189 = @func_8874() /* ty=Tensor[(10, 6), bool] */;
  %190 = %188.0;
  %191 = @func_7588() /* ty=Tensor[(15, 2, 13), float64] */;
  (%189, %190, %191)
}

def @func_10292() -> (Tensor[(15, 2, 13), float64],) {
  %192 = @func_9746() /* ty=Tensor[(15, 2, 13), float64] */;
  (%192,)
}

def @func_6284(%var_6281: Tensor[(126), uint32], %var_6282: Tensor[(1008), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) {
  %193 = @func_6207() /* ty=Tensor[(15, 2, 13), float64] */;
  %194 = cast(%193, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %195 = cast(%var_6281, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %196 = cast(%var_6282, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
  %197 = reshape(%195, newshape=[1, 9, 14]) /* ty=Tensor[(1, 9, 14), uint32] */;
  %198 = reshape(%196, newshape=[8, 9, 14]) /* ty=Tensor[(8, 9, 14), uint32] */;
  %199 = @func_4041(%197, %198) /* ty=(Tensor[(8, 9, 14), uint32], Tensor[(3, 13, 8), float32], Tensor[(312, 1), int64]) */;
  %200 = rsqrt(%194) /* ty=Tensor[(15, 2, 13), float64] */;
  %201 = %199.0;
  (%200, %201, %var_6281, %var_6282)
}

def @func_13029() -> Tensor[(15, 2, 13), float64] {
  @func_11156() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_9069(%var_9056: Tensor[(672), float32], %var_9067: Tensor[(24), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64], Tensor[(672), float32], Tensor[(15, 2, 13), float64], Tensor[(24), float64]) {
  %202 = @func_8850() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %203 = cast(%var_9056, dtype="float32") /* ty=Tensor[(672), float32] */;
  %204 = cast(%var_9056, dtype="float32") /* ty=Tensor[(672), float32] */;
  %205 = @func_7007() /* ty=Tensor[(10, 6), bool] */;
  %206 = cast(%205, dtype="uint8") /* ty=Tensor[(10, 6), uint8] */;
  %207 = reshape(%203, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float32] */;
  %208 = reshape(%204, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float32] */;
  %209 = reshape(%206, newshape=[60]) /* ty=Tensor[(60), uint8] */;
  %210 = @func_8045(%207, %208, %209) /* ty=(Tensor[(16, 14, 3), bool], Tensor[(15, 4), uint8], Tensor[(60), uint8], Tensor[(390), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) */;
  %211 = cast(%var_9067, dtype="float64") /* ty=Tensor[(24), float64] */;
  %212 = reshape(%211, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %213 = @func_8757(%212) /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(312), int64]) */;
  %214 = %202.0;
  %215 = %210.5;
  %216 = %213.1;
  (%214, %205, %215, %var_9056, %216, %var_9067)
}

def @func_8444(%var_8420: Tensor[(24), float64], %var_8429: Tensor[(6, 52), int64]) -> (Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(10, 15, 10), float32], Tensor[(1500), float64], Tensor[(6, 52), int64], Tensor[(15, 2, 13), float64]) {
  %217 = cast(%var_8420, dtype="float64") /* ty=Tensor[(24), float64] */;
  %218 = reshape(%217, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %219 = cast(meta[relay.Constant][20] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %220 = cast(%var_8429, dtype="int64") /* ty=Tensor[(6, 52), int64] */;
  %221 = reshape(%219, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %222 = reshape(%220, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %223 = @func_6622(%221, %222) /* ty=(Tensor[(60), uint8], Tensor[(10, 15, 10), float32], Tensor[(390), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64]) */;
  %224 = @func_6855() /* ty=Tensor[(15, 2, 13), float64] */;
  %225 = cast(%224, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %226 = @func_5153(%218) /* ty=Tensor[(?, 2, 12), float32] */;
  %227 = %223.1;
  %228 = exp(%225) /* ty=Tensor[(15, 2, 13), float64] */;
  (%226, %var_8420, %227, meta[relay.Constant][20] /* ty=Tensor[(1500), float64] */, %var_8429, %228)
}

def @func_6574(%var_6558: Tensor[(15, 4), uint8], %var_6569: Tensor[(15, 2, 13), float64]) -> (Tensor[(10, 6), bool], Tensor[(15, 4), uint8], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) {
  %229 = cast(%var_6558, dtype="uint8") /* ty=Tensor[(15, 4), uint8] */;
  %230 = reshape(%229, newshape=[10, 6]) /* ty=Tensor[(10, 6), uint8] */;
  %231 = @func_5503(%230) /* ty=(Tensor[(10, 6), bool],) */;
  %232 = %231.0;
  %233 = cast(%232, dtype="uint8") /* ty=Tensor[(10, 6), uint8] */;
  %234 = reshape(%233, newshape=[10, 6]) /* ty=Tensor[(10, 6), uint8] */;
  %235 = @func_5503(%234) /* ty=(Tensor[(10, 6), bool],) */;
  %236 = @func_6295() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %237 = %236.0;
  %238 = cast(%var_6569, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%237, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %242 = %235.0;
  %243 = mod(%240, %241) /* ty=Tensor[(15, 2, 13), float64] */;
  (%232, %var_6558, %242, %243)
}

def @func_8699(%var_8683: uint32, %var_8685: Tensor[(312), int64]) -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 4, 15), float32], Tensor[(900), float32], Tensor[(3360), float64], Tensor[(9, 14, 3), float32], Tensor[(378), float32], Tensor[(150), float64], uint32, Tensor[(66), uint32], Tensor[(312), int64]) {
  %244 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %245 = cast(meta[relay.Constant][21] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %246 = cast(meta[relay.Constant][21] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %247 = cast(meta[relay.Constant][22] /* ty=Tensor[(3360), float64] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %248 = reshape(%245, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
  %249 = reshape(%246, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
  %250 = reshape(%247, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %251 = @func_5919(%248, %249, %250) /* ty=(Tensor[(15, 4, 15), float32], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 16, 14), float64], Tensor[(3360), float64]) */;
  %252 = cast(meta[relay.Constant][23] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %253 = reshape(%252, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), float32] */;
  %254 = @func_6692(%253) /* ty=(Tensor[(9, 14, 3), float32],) */;
  %255 = cast(%var_8683, dtype="uint32") /* ty=uint32 */;
  %256 = cast(meta[relay.Constant][24] /* ty=Tensor[(66), uint32] */, dtype="uint32") /* ty=Tensor[(66), uint32] */;
  %257 = cast(%var_8685, dtype="int64") /* ty=Tensor[(312), int64] */;
  %258 = reshape(%255, newshape=[]) /* ty=uint32 */;
  %259 = reshape(%256, newshape=[66]) /* ty=Tensor[(66), uint32] */;
  %260 = reshape(%257, newshape=[156, 2]) /* ty=Tensor[(156, 2), int64] */;
  %261 = @func_6176(%258, %259, %260) /* ty=(Tensor[(3, 2, 11), uint32], Tensor[(66), uint32], Tensor[(15, 2, 13), int64], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(156, 2), int64], Tensor[(10, 15, ?), float64]) */;
  %262 = %244.0;
  %263 = @func_7440() /* ty=Tensor[(10, 6), bool] */;
  %264 = %251.0;
  %265 = %254.0;
  %266 = %261.4;
  (%262, %263, %264, meta[relay.Constant][21] /* ty=Tensor[(900), float32] */, meta[relay.Constant][22] /* ty=Tensor[(3360), float64] */, %265, meta[relay.Constant][23] /* ty=Tensor[(378), float32] */, %266, %var_8683, meta[relay.Constant][24] /* ty=Tensor[(66), uint32] */, %var_8685)
}

def @func_8605(%var_8600: Tensor[(14, 14, 9), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %267 = cast(%var_8600, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %268 = cast(%var_8600, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
  %269 = atan(%267) /* ty=Tensor[(14, 14, 9), float64] */;
  %270 = cosh(%268) /* ty=Tensor[(14, 14, 9), float64] */;
  (%269, %270)
}

def @func_5885(%var_5882: Tensor[(150), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64]) {
  %271 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %272 = cast(%var_5882, dtype="float64") /* ty=Tensor[(150), float64] */;
  %273 = cast(meta[relay.Constant][25] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %274 = reshape(%272, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), float64] */;
  %275 = reshape(%273, newshape=[10, 15, 10]) /* ty=Tensor[(10, 15, 10), float64] */;
  %276 = @func_2897(%274, %275) /* ty=(Tensor[(10, 15, ?), float64], Tensor[(10, 15, 10), float32]) */;
  %277 = %271.0;
  %278 = %276.1;
  (%277, %278, %var_5882, meta[relay.Constant][25] /* ty=Tensor[(1500), float64] */)
}

def @func_10754() -> Tensor[(15, 2, 13), float64] {
  @func_6963() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_6008(%var_5969: Tensor[(126, 1), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126, 1), uint32], Tensor[(1008), uint32], Tensor[(2, 9, 10), uint16], Tensor[(4, 10, 4), bool], Tensor[(3, 56), float32]) {
  %279 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %280 = cast(%var_5969, dtype="uint32") /* ty=Tensor[(126, 1), uint32] */;
  %281 = cast(meta[relay.Constant][26] /* ty=Tensor[(1008), uint32] */, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
  %282 = reshape(%280, newshape=[1, 9, 14]) /* ty=Tensor[(1, 9, 14), uint32] */;
  %283 = reshape(%281, newshape=[8, 9, 14]) /* ty=Tensor[(8, 9, 14), uint32] */;
  %284 = @func_4041(%282, %283) /* ty=(Tensor[(8, 9, 14), uint32], Tensor[(3, 13, 8), float32], Tensor[(312, 1), int64]) */;
  %285 = %279.0;
  %286 = cast(%285, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %287 = reshape(%286, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
  %288 = @func_5691(%287) /* ty=(Tensor[(2, 9, 10), uint16], Tensor[(90), uint16], Tensor[(180), uint16], Tensor[(15, 2, 13), bool]) */;
  %289 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 56), float32] */, dtype="float32") /* ty=Tensor[(3, 56), float32] */;
  %290 = reshape(%289, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %291 = @func_732(%290) /* ty=(Tensor[(4, 10, 4), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) */;
  %292 = %284.0;
  %293 = %288.0;
  %294 = %291.0;
  (%285, %292, %var_5969, meta[relay.Constant][26] /* ty=Tensor[(1008), uint32] */, %293, %294, meta[relay.Constant][27] /* ty=Tensor[(3, 56), float32] */)
}

def @func_13686(%var_13684: Tensor[(11, 15), uint8]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 11, 1), uint8], Tensor[(11, 15), uint8]) {
  %295 = cast(%var_13684, dtype="uint8") /* ty=Tensor[(11, 15), uint8] */;
  %296 = reshape(%295, newshape=[15, 11, 1]) /* ty=Tensor[(15, 11, 1), uint8] */;
  %297 = @func_11156() /* ty=Tensor[(15, 2, 13), float64] */;
  %298 = @func_1272(%296) /* ty=Tensor[(15, 11, 1), uint8] */;
  (%297, %298, %var_13684)
}

def @func_13827() -> (Tensor[(15, 2, 13), float64],) {
  %299 = @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %300 = %299.0;
  (%300,)
}

def @func_5784(%var_5771: Tensor[(65), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(13, 1, 5), float32], Tensor[(65), float32]) {
  %301 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %302 = cast(%var_5771, dtype="float32") /* ty=Tensor[(65), float32] */;
  %303 = reshape(%302, newshape=[13, 1, 5]) /* ty=Tensor[(13, 1, 5), float32] */;
  %304 = @func_4518(%303) /* ty=(Tensor[(13, 1, 5), float32],) */;
  %305 = %301.0;
  %306 = %304.0;
  (%305, %306, %var_5771)
}

def @func_6121() -> Tensor[(15, 2, 13), float64] {
  %307 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %307.0
}

def @func_6622(%var_6607: Tensor[(1500), float64], %var_6608: Tensor[(312), int64]) -> (Tensor[(60), uint8], Tensor[(10, 15, 10), float32], Tensor[(390), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64]) {
  %308 = @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */;
  %309 = cast(meta[relay.Constant][28] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %310 = cast(meta[relay.Constant][29] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %311 = cast(%var_6607, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %312 = cast(%var_6608, dtype="int64") /* ty=Tensor[(312), int64] */;
  %313 = reshape(%309, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
  %314 = reshape(%310, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %315 = reshape(%311, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %316 = reshape(%312, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %317 = @func_5745(%313, %314, %315, %316) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 16, 14), float64], Tensor[(2, 1680), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(3, 13, 8), float32]) */;
  %318 = %308.2;
  %319 = %317.3;
  (%318, %319, meta[relay.Constant][28] /* ty=Tensor[(390), float64] */, meta[relay.Constant][29] /* ty=Tensor[(150), float64] */, %var_6607, %var_6608)
}

def @func_7884(%var_7862: Tensor[(140, 24), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 4, 15), float32], Tensor[(900), float32], Tensor[(140, 24), float64], Tensor[(15, 2, 13), float64]) {
  %320 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %321 = cast(meta[relay.Constant][30] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %322 = cast(meta[relay.Constant][30] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %323 = cast(%var_7862, dtype="float64") /* ty=Tensor[(140, 24), float64] */;
  %324 = reshape(%321, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
  %325 = reshape(%322, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
  %326 = reshape(%323, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %327 = @func_5919(%324, %325, %326) /* ty=(Tensor[(15, 4, 15), float32], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 16, 14), float64], Tensor[(3360), float64]) */;
  %328 = %320.0;
  %329 = %327.0;
  %330 = @func_6207() /* ty=Tensor[(15, 2, 13), float64] */;
  (%328, %329, meta[relay.Constant][30] /* ty=Tensor[(900), float32] */, %var_7862, %330)
}

def @func_11749(%var_11700: Tensor[(3, 12, 9), float64]) -> (Tensor[(3, 12, 9), int16], Tensor[(3, 12, 9), bool]) {
  %331 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 12, 9), float64] */, dtype="int16") /* ty=Tensor[(3, 12, 9), int16] */;
  %332 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(3, 12, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 12, 9), float64] */, dtype="int16") /* ty=Tensor[(3, 12, 9), int16] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %335 = cast(%var_11700, dtype="float64") /* ty=Tensor[(3, 12, 9), float64] */;
  %336 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(3, 12, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(3, 12, 9), float64] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %339 = floor_divide(%337, %338) /* ty=Tensor[(3, 12, 9), float64] */;
  %340 = cast(%339, dtype="float32") /* ty=Tensor[(3, 12, 9), float32] */;
  %341 = acosh(%340) /* ty=Tensor[(3, 12, 9), float32] */;
  %342 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 12, 9), float32] */, dtype="bool") /* ty=Tensor[(3, 12, 9), bool] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="bool") /* ty=Tensor[(3, 12, 9), bool] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %346 = maximum(%333, %334) /* ty=Tensor[(3, 12, 9), int16] */;
  %347 = not_equal(%344, %345) /* ty=Tensor[(3, 12, 9), bool] */;
  (%346, %347)
}

def @func_13183() -> Tensor[(15, 2, 13), float64] {
  @func_11616() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_5503(%var_5498: Tensor[(10, 6), uint8]) -> (Tensor[(10, 6), bool],) {
  %348 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 6), uint8] */, dtype="bool") /* ty=Tensor[(10, 6), bool] */;
  %349 = shape_of(%var_5498, dtype="int32") /* ty=Tensor[(2), int32] */;
  %350 = cast(%var_5498, dtype="bool") /* ty=Tensor[(10, 6), bool] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %352 = not_equal(%350, %351) /* ty=Tensor[(10, 6), bool] */;
  (%352,)
}

def @func_8874() -> Tensor[(10, 6), bool] {
  %353 = @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */;
  %353.1
}

def @func_9810(%var_9789: Tensor[(60), uint8], %var_9807: Tensor[(18), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(13, 1, 5), float32], Tensor[(65), float32], Tensor[(18, ?), int16], Tensor[(18), float32]) {
  %354 = cast(%var_9789, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %355 = reshape(%354, newshape=[10, 6]) /* ty=Tensor[(10, 6), uint8] */;
  %356 = @func_5503(%355) /* ty=(Tensor[(10, 6), bool],) */;
  %357 = cast(meta[relay.Constant][35] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %358 = reshape(%357, newshape=[13, 1, 5]) /* ty=Tensor[(13, 1, 5), float32] */;
  %359 = @func_4518(%358) /* ty=(Tensor[(13, 1, 5), float32],) */;
  %360 = cast(%var_9807, dtype="float32") /* ty=Tensor[(18), float32] */;
  %361 = reshape(%360, newshape=[18, 1]) /* ty=Tensor[(18, 1), float32] */;
  %362 = @func_7225(%361) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(2, 2, 13), float64], Tensor[(180), uint16], Tensor[(18, 4), float32], Tensor[(60), uint8], Tensor[(18, ?), int16], Tensor[(18, 1), float32], Tensor[(18, 1), float32]) */;
  %363 = @func_8197() /* ty=Tensor[(15, 2, 13), float64] */;
  %364 = %356.0;
  %365 = %359.0;
  %366 = %362.5;
  (%363, %364, %var_9789, %365, meta[relay.Constant][35] /* ty=Tensor[(65), float32] */, %366, %var_9807)
}

def @func_7674() -> (Tensor[(15, 2, 13), float64],) {
  %367 = @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %368 = %367.0;
  (%368,)
}

def @func_2897(%var_2882: Tensor[(10, 15, 1), float64], %var_2893: Tensor[(10, 15, 10), float64]) -> (Tensor[(10, 15, ?), float64], Tensor[(10, 15, 10), float32]) {
  %369 = cast(%var_2882, dtype="float64") /* ty=Tensor[(10, 15, 1), float64] */;
  %370 = acos(%369) /* ty=Tensor[(10, 15, 1), float64] */;
  %371 = cast(%var_2882, dtype="float64") /* ty=Tensor[(10, 15, 1), float64] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="float64") /* ty=Tensor[(10, 15, 1), float64] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %375 = floor_divide(%373, %374) /* ty=Tensor[(10, 15, ?), float64] */;
  %376 = cast(%370, dtype="float64") /* ty=Tensor[(10, 15, 1), float64] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="float64") /* ty=Tensor[(10, 15, ?), float64] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %380 = cast(%var_2882, dtype="float32") /* ty=Tensor[(10, 15, 1), float32] */;
  %381 = cast(%var_2893, dtype="float32") /* ty=Tensor[(10, 15, 10), float32] */;
  %382 = floor_mod(%378, %379) /* ty=Tensor[(10, 15, ?), float64] */;
  %383 = floor_mod(%380, %381) /* ty=Tensor[(10, 15, 10), float32] */;
  (%382, %383)
}

def @func_9236() -> Tensor[(15, 2, 13), float64] {
  @func_7965() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_6295() -> (Tensor[(15, 2, 13), float64],) {
  %384 = @func_6207() /* ty=Tensor[(15, 2, 13), float64] */;
  (%384,)
}

def @func_7328(%var_7299: Tensor[(63, 2), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(63, 2), uint32], Tensor[(1008), uint32], Tensor[(3, 2, 11), uint32], uint32, Tensor[(66), uint32], Tensor[(1, 312), int64]) {
  %385 = @func_6967() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %386 = cast(%var_7299, dtype="uint32") /* ty=Tensor[(63, 2), uint32] */;
  %387 = cast(meta[relay.Constant][36] /* ty=Tensor[(1008), uint32] */, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
  %388 = reshape(%386, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %389 = reshape(%387, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
  %390 = @func_6903(%388, %389) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %391 = cast(meta[relay.Constant][37] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %392 = cast(meta[relay.Constant][38] /* ty=Tensor[(66), uint32] */, dtype="uint32") /* ty=Tensor[(66), uint32] */;
  %393 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 312), int64] */, dtype="int64") /* ty=Tensor[(1, 312), int64] */;
  %394 = reshape(%391, newshape=[]) /* ty=uint32 */;
  %395 = reshape(%392, newshape=[66]) /* ty=Tensor[(66), uint32] */;
  %396 = reshape(%393, newshape=[156, 2]) /* ty=Tensor[(156, 2), int64] */;
  %397 = @func_6176(%394, %395, %396) /* ty=(Tensor[(3, 2, 11), uint32], Tensor[(66), uint32], Tensor[(15, 2, 13), int64], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(156, 2), int64], Tensor[(10, 15, ?), float64]) */;
  %398 = %385.0;
  %399 = %390.2;
  %400 = %397.0;
  (%398, %399, %var_7299, meta[relay.Constant][36] /* ty=Tensor[(1008), uint32] */, %400, meta[relay.Constant][37] /* ty=uint32 */, meta[relay.Constant][38] /* ty=Tensor[(66), uint32] */, meta[relay.Constant][39] /* ty=Tensor[(1, 312), int64] */)
}

def @func_7225(%var_7202: Tensor[(18, 1), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(2, 2, 13), float64], Tensor[(180), uint16], Tensor[(18, 4), float32], Tensor[(60), uint8], Tensor[(18, ?), int16], Tensor[(18, 1), float32], Tensor[(18, 1), float32]) {
  %401 = @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %402 = cast(meta[relay.Constant][40] /* ty=Tensor[(18, 1), float32] */, dtype="float32") /* ty=Tensor[(18, 1), float32] */;
  %403 = reshape(%402, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float32] */;
  %404 = @func_4118(%403) /* ty=(Tensor[(2, 9, 1), float32], Tensor[(2, 2, 13), float64], Tensor[(26, 2), float64]) */;
  %405 = %401.0;
  %406 = cast(%405, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %407 = reshape(%406, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
  %408 = @func_5691(%407) /* ty=(Tensor[(2, 9, 10), uint16], Tensor[(90), uint16], Tensor[(180), uint16], Tensor[(15, 2, 13), bool]) */;
  %409 = cast(meta[relay.Constant][40] /* ty=Tensor[(18, 1), float32] */, dtype="float32") /* ty=Tensor[(18, 1), float32] */;
  %410 = sqrt(%409) /* ty=Tensor[(18, 1), float32] */;
  %411 = cast(%410, dtype="uint32") /* ty=Tensor[(18, 1), uint32] */;
  %412 = cast(meta[relay.Constant][41] /* ty=Tensor[(18, 4), float32] */, dtype="uint32") /* ty=Tensor[(18, 4), uint32] */;
  %413 = bitwise_and(%411, %412) /* ty=Tensor[(18, 4), uint32] */;
  %414 = cast(%413, dtype="float32") /* ty=Tensor[(18, 4), float32] */;
  %415 = cast(%410, dtype="float32") /* ty=Tensor[(18, 1), float32] */;
  %416 = @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */;
  %417 = cast(%var_7202, dtype="int16") /* ty=Tensor[(18, 1), int16] */;
  %418 = shape_of(%410, dtype="int32") /* ty=Tensor[(2), int32] */;
  %419 = cast(%410, dtype="int16") /* ty=Tensor[(18, 1), int16] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %421 = cast(%410, dtype="float64") /* ty=Tensor[(18, 1), float64] */;
  %422 = acosh(%421) /* ty=Tensor[(18, 1), float64] */;
  %423 = cast(%422, dtype="float64") /* ty=Tensor[(18, 1), float64] */;
  %424 = cosh(%423) /* ty=Tensor[(18, 1), float64] */;
  %425 = cast(%424, dtype="float32") /* ty=Tensor[(18, 1), float32] */;
  %426 = cast(%424, dtype="float32") /* ty=Tensor[(18, 1), float32] */;
  %427 = %404.1;
  %428 = %408.2;
  %429 = minimum(%414, %415) /* ty=Tensor[(18, 4), float32] */;
  %430 = %416.2;
  %431 = bitwise_xor(%419, %420) /* ty=Tensor[(18, ?), int16] */;
  %432 = sigmoid(%425) /* ty=Tensor[(18, 1), float32] */;
  %433 = asin(%426) /* ty=Tensor[(18, 1), float32] */;
  (%405, %427, %428, %429, %430, %431, %432, %433)
}

def @func_13219() -> (Tensor[(1008), uint32],) {
  %434 = @func_9422() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(4, 3, 14), int16], Tensor[(168), float64], Tensor[(126), uint32], Tensor[(1008), uint32], Tensor[(26, 2), float64], Tensor[(3, 6), float32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) */;
  %435 = %434.4;
  (%435,)
}

def @func_11156() -> Tensor[(15, 2, 13), float64] {
  %436 = @func_10412() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(140), int64]) */;
  %436.0
}

def @func_11266() -> (Tensor[(312), int64],) {
  %437 = @func_10381() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(24), float64], Tensor[(312), int64]) */;
  %438 = %437.3;
  (%438,)
}

def @func_271(%var_262: Tensor[(12, 7, 2), float32], %var_263: Tensor[(12, 7, 2), float32]) -> Tensor[(12, 7, 2), bool] {
  %439 = cast(%var_263, dtype="bool") /* ty=Tensor[(12, 7, 2), bool] */;
  %440 = shape_of(%var_262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_262, dtype="bool") /* ty=Tensor[(12, 7, 2), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%441, %442) /* ty=Tensor[(12, 7, 2), bool] */
}

def @func_4518(%var_4510: Tensor[(13, 1, 5), float32]) -> (Tensor[(13, 1, 5), float32],) {
  %443 = cast(%var_4510, dtype="float32") /* ty=Tensor[(13, 1, 5), float32] */;
  %444 = atanh(%443) /* ty=Tensor[(13, 1, 5), float32] */;
  (%444,)
}

def @func_12371(%var_12253: Tensor[(150, 1), float64], %var_12254: Tensor[(750, 2), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(150, 1), float64], Tensor[(750, 2), float64], Tensor[(10, 16, 5), float64], Tensor[(14, 14, 9), float64], Tensor[(1764), float64], Tensor[(15, 2, 13), float64], Tensor[(10, 15, 800), uint8]) {
  %445 = @func_9836() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) */;
  %446 = cast(meta[relay.Constant][42] /* ty=Tensor[(800), float64] */, dtype="float64") /* ty=Tensor[(800), float64] */;
  %447 = reshape(%446, newshape=[10, 16, 5]) /* ty=Tensor[(10, 16, 5), float64] */;
  %448 = @func_3212(%447) /* ty=(Tensor[(10, 16, 5), float64],) */;
  %449 = cast(meta[relay.Constant][43] /* ty=Tensor[(1764), float64] */, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %450 = reshape(%449, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float64] */;
  %451 = @func_8605(%450) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
  %452 = cast(meta[relay.Constant][42] /* ty=Tensor[(800), float64] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %453 = atan(%452) /* ty=Tensor[(800), float32] */;
  %454 = cast(%453, dtype="float64") /* ty=Tensor[(800), float64] */;
  %455 = atanh(%454) /* ty=Tensor[(800), float64] */;
  %456 = cast(%var_12253, dtype="float64") /* ty=Tensor[(150, 1), float64] */;
  %457 = cast(%var_12254, dtype="float64") /* ty=Tensor[(750, 2), float64] */;
  %458 = reshape(%456, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), float64] */;
  %459 = reshape(%457, newshape=[10, 15, 10]) /* ty=Tensor[(10, 15, 10), float64] */;
  %460 = @func_2897(%458, %459) /* ty=(Tensor[(10, 15, ?), float64], Tensor[(10, 15, 10), float32]) */;
  %461 = %460.0;
  %462 = cast(%453, dtype="bool") /* ty=Tensor[(800), bool] */;
  %463 = cast(%461, dtype="bool") /* ty=Tensor[(10, 15, ?), bool] */;
  %464 = equal(%462, %463) /* ty=Tensor[(10, 15, 800), bool] */;
  %465 = cast(%455, dtype="uint8") /* ty=Tensor[(800), uint8] */;
  %466 = cast(%464, dtype="uint8") /* ty=Tensor[(10, 15, 800), uint8] */;
  %467 = %445.0;
  %468 = %448.0;
  %469 = %451.1;
  %470 = @func_7965() /* ty=Tensor[(15, 2, 13), float64] */;
  %471 = right_shift(%465, %466) /* ty=Tensor[(10, 15, 800), uint8] */;
  (%467, %var_12253, %var_12254, %468, %469, meta[relay.Constant][43] /* ty=Tensor[(1764), float64] */, %470, %471)
}

def @func_8197() -> Tensor[(15, 2, 13), float64] {
  @func_6207() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_2064(%var_2026: Tensor[(4, 2, 16), uint32], %var_2027: Tensor[(4, 2, 16), uint32]) -> Tensor[(4, 2, 16), float64] {
  %472 = cast(%var_2027, dtype="bool") /* ty=Tensor[(4, 2, 16), bool] */;
  %473 = shape_of(%var_2026, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%var_2026, dtype="bool") /* ty=Tensor[(4, 2, 16), bool] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %476 = less(%474, %475) /* ty=Tensor[(4, 2, 16), bool] */;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(4, 2, 16), float64] */;
  sigmoid(%477) /* ty=Tensor[(4, 2, 16), float64] */
}

def @func_10957() -> (Tensor[(10, 6), bool],) {
  %478 = @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */;
  %479 = %478.1;
  (%479,)
}

def @func_11221() -> (Tensor[(10, 6), bool],) {
  %480 = @func_8834() /* ty=(Tensor[(10, 6), bool],) */;
  %481 = %480.0;
  (%481,)
}

def @func_12708(%var_12696: int64, %var_12697: Tensor[(13, 13, 12), int64]) -> (Tensor[(13, 13, 12), bool],) {
  %482 = cast(%var_12696, dtype="bool") /* ty=bool */;
  %483 = cast(%var_12697, dtype="bool") /* ty=Tensor[(13, 13, 12), bool] */;
  %484 = greater(%482, %483) /* ty=Tensor[(13, 13, 12), bool] */;
  (%484,)
}

def @func_9130() -> (Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(1008), uint32]) {
  %485 = @func_6967() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %486 = cast(meta[relay.Constant][44] /* ty=Tensor[(1008), uint32] */, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
  %487 = reshape(%486, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
  %488 = @func_6413(%487) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %489 = %485.0;
  %490 = %488.2;
  (%489, %490, meta[relay.Constant][44] /* ty=Tensor[(1008), uint32] */)
}

def @func_2726(%var_2711: Tensor[(12, 5, 15), float32]) -> Tensor[(12, 5, 15), float32] {
  %491 = cast(%var_2711, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
  log10(%491) /* ty=Tensor[(12, 5, 15), float32] */
}

def @func_6903(%var_6898: Tensor[(126), uint32], %var_6899: Tensor[(1008), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) {
  %492 = @func_6295() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %493 = cast(%var_6898, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %494 = cast(%var_6899, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
  %495 = reshape(%493, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %496 = reshape(%494, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
  %497 = @func_6284(%495, %496) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %498 = %492.0;
  %499 = %497.2;
  (%498, %499, %var_6898, %var_6899)
}

def @func_4689(%var_4670: uint32, %var_4671: Tensor[(3, 2, 11), uint32]) -> (Tensor[(3, 2, 11), uint32], Tensor[(2, 2, 13), float64], Tensor[(18), float32]) {
  %500 = cast(%var_4670, dtype="uint32") /* ty=uint32 */;
  %501 = cast(%var_4671, dtype="uint32") /* ty=Tensor[(3, 2, 11), uint32] */;
  %502 = cast(meta[relay.Constant][45] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %503 = reshape(%502, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float32] */;
  %504 = @func_4118(%503) /* ty=(Tensor[(2, 9, 1), float32], Tensor[(2, 2, 13), float64], Tensor[(26, 2), float64]) */;
  %505 = bitwise_xor(%500, %501) /* ty=Tensor[(3, 2, 11), uint32] */;
  %506 = %504.1;
  (%505, %506, meta[relay.Constant][45] /* ty=Tensor[(18), float32] */)
}

def @func_1649(%var_1627: Tensor[(6, 4, 13), float32], %var_1640: Tensor[(6, 4, 13), float32]) -> (Tensor[(6, 4, 13), float64], Tensor[(6, 4, 13), float64]) {
  %507 = cast(%var_1627, dtype="float32") /* ty=Tensor[(6, 4, 13), float32] */;
  %508 = log2(%507) /* ty=Tensor[(6, 4, 13), float32] */;
  %509 = cast(%var_1640, dtype="float64") /* ty=Tensor[(6, 4, 13), float64] */;
  %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%508, dtype="float64") /* ty=Tensor[(6, 4, 13), float64] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %513 = cast(%508, dtype="float64") /* ty=Tensor[(6, 4, 13), float64] */;
  %514 = power(%511, %512) /* ty=Tensor[(6, 4, 13), float64] */;
  %515 = exp(%513) /* ty=Tensor[(6, 4, 13), float64] */;
  (%514, %515)
}

def @func_9836() -> (Tensor[(15, 2, 13), float64], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) {
  %516 = @func_8251() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %517 = cast(meta[relay.Constant][46] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %518 = cast(meta[relay.Constant][46] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %519 = reshape(%517, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %520 = reshape(%518, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %521 = %516.0;
  %522 = @func_271(%519, %520) /* ty=Tensor[(12, 7, 2), bool] */;
  (%521, %522, meta[relay.Constant][46] /* ty=Tensor[(168), float32] */)
}

def @func_6692(%var_6676: Tensor[(9, 14, 3), float32]) -> (Tensor[(9, 14, 3), float32],) {
  %523 = cast(%var_6676, dtype="float32") /* ty=Tensor[(9, 14, 3), float32] */;
  %524 = log(%523) /* ty=Tensor[(9, 14, 3), float32] */;
  (%524,)
}

def @func_10047(%var_10036: Tensor[(11, 2, 12), int32], %var_10037: Tensor[(11, 2, 12), int32], %var_10041: Tensor[(11, 2, 12), int32]) -> (Tensor[(11, 2, 12), float64],) {
  %525 = cast(%var_10037, dtype="int32") /* ty=Tensor[(11, 2, 12), int32] */;
  %526 = shape_of(%var_10036, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%var_10036, dtype="int32") /* ty=Tensor[(11, 2, 12), int32] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %529 = maximum(%527, %528) /* ty=Tensor[(11, 2, 12), int32] */;
  %530 = cast(%var_10041, dtype="float64") /* ty=Tensor[(11, 2, 12), float64] */;
  %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%529, dtype="float64") /* ty=Tensor[(11, 2, 12), float64] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %534 = divide(%532, %533) /* ty=Tensor[(11, 2, 12), float64] */;
  (%534,)
}

def @func_10702() -> (Tensor[(15, 2, 13), float64],) {
  %535 = @func_6121() /* ty=Tensor[(15, 2, 13), float64] */;
  (%535,)
}

def @func_11413() -> (Tensor[(126), uint32],) {
  %536 = @func_9130() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %537 = %536.1;
  (%537,)
}

def @func_9715(%var_9705: Tensor[(128), uint32], %var_9709: Tensor[(900), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(4, 2, 16), float64], Tensor[(128), uint32], Tensor[(15, 16, 14), float64], Tensor[(900), float32], Tensor[(3360), float64]) {
  %538 = cast(%var_9705, dtype="uint32") /* ty=Tensor[(128), uint32] */;
  %539 = cast(%var_9705, dtype="uint32") /* ty=Tensor[(128), uint32] */;
  %540 = reshape(%538, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), uint32] */;
  %541 = reshape(%539, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), uint32] */;
  %542 = cast(%var_9709, dtype="float32") /* ty=Tensor[(900), float32] */;
  %543 = cast(%var_9709, dtype="float32") /* ty=Tensor[(900), float32] */;
  %544 = cast(meta[relay.Constant][47] /* ty=Tensor[(3360), float64] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %545 = reshape(%542, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
  %546 = reshape(%543, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
  %547 = reshape(%544, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %548 = @func_5919(%545, %546, %547) /* ty=(Tensor[(15, 4, 15), float32], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 16, 14), float64], Tensor[(3360), float64]) */;
  %549 = @func_7965() /* ty=Tensor[(15, 2, 13), float64] */;
  %550 = @func_2064(%540, %541) /* ty=Tensor[(4, 2, 16), float64] */;
  %551 = %548.3;
  (%549, %550, %var_9705, %551, %var_9709, meta[relay.Constant][47] /* ty=Tensor[(3360), float64] */)
}

def @func_7007() -> Tensor[(10, 6), bool] {
  %552 = @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */;
  %552.1
}

def @func_3212(%var_3203: Tensor[(10, 16, 5), float64]) -> (Tensor[(10, 16, 5), float64],) {
  %553 = cast(%var_3203, dtype="float64") /* ty=Tensor[(10, 16, 5), float64] */;
  %554 = tan(%553) /* ty=Tensor[(10, 16, 5), float64] */;
  (%554,)
}

def @func_11869() -> Tensor[(126), uint32] {
  %555 = @func_11413() /* ty=(Tensor[(126), uint32],) */;
  %555.0
}

def @func_13741() -> Tensor[(126), uint32] {
  @func_11869() /* ty=Tensor[(126), uint32] */
}

def @func_8251() -> (Tensor[(15, 2, 13), float64],) {
  %556 = @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %557 = %556.0;
  (%557,)
}

def @func_12828() -> Tensor[(15, 2, 13), float64] {
  %558 = @func_11616() /* ty=Tensor[(15, 2, 13), float64] */;
  %559 = cast(%558, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  tan(%559) /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_5745(%var_5697: Tensor[(15, 2, 13), float64], %var_5717: Tensor[(150), float64], %var_5718: Tensor[(1500), float64], %var_5722: Tensor[(312), int64]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 16, 14), float64], Tensor[(2, 1680), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(3, 13, 8), float32]) {
  %560 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %561 = %560.0;
  %562 = cast(%var_5697, dtype="int16") /* ty=Tensor[(15, 2, 13), int16] */;
  %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%561, dtype="int16") /* ty=Tensor[(15, 2, 13), int16] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %566 = multiply(%564, %565) /* ty=Tensor[(15, 2, 13), int16] */;
  %567 = cast(%566, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %568 = cast(meta[relay.Constant][48] /* ty=Tensor[(2, 1680), float64] */, dtype="float64") /* ty=Tensor[(2, 1680), float64] */;
  %569 = reshape(%568, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float64] */;
  %570 = cast(%var_5717, dtype="float64") /* ty=Tensor[(150), float64] */;
  %571 = cast(%var_5718, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %572 = reshape(%570, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), float64] */;
  %573 = reshape(%571, newshape=[10, 15, 10]) /* ty=Tensor[(10, 15, 10), float64] */;
  %574 = @func_2897(%572, %573) /* ty=(Tensor[(10, 15, ?), float64], Tensor[(10, 15, 10), float32]) */;
  %575 = cast(%var_5722, dtype="int64") /* ty=Tensor[(312), int64] */;
  %576 = cast(%var_5722, dtype="int64") /* ty=Tensor[(312), int64] */;
  %577 = reshape(%575, newshape=[3, 13, 8]) /* ty=Tensor[(3, 13, 8), int64] */;
  %578 = reshape(%576, newshape=[3, 13, 8]) /* ty=Tensor[(3, 13, 8), int64] */;
  %579 = @func_2606(%577, %578) /* ty=Tensor[(3, 13, 8), float32] */;
  %580 = cast(%579, dtype="float32") /* ty=Tensor[(3, 13, 8), float32] */;
  %581 = sigmoid(%567) /* ty=Tensor[(15, 2, 13), float64] */;
  %582 = @func_3835(%569) /* ty=Tensor[(15, 16, 14), float64] */;
  %583 = %574.1;
  %584 = log(%580) /* ty=Tensor[(3, 13, 8), float32] */;
  (%581, %582, meta[relay.Constant][48] /* ty=Tensor[(2, 1680), float64] */, %583, %var_5717, %var_5718, %var_5722, %584)
}

def @func_13342(%var_13338: Tensor[(252, 4), uint32]) -> (Tensor[(5, 14, 8), float32], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(252, 4), uint32]) {
  %585 = cast(meta[relay.Constant][49] /* ty=Tensor[(5, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(5, 14, 8), float32] */;
  %586 = cast(meta[relay.Constant][50] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %587 = cast(%var_13338, dtype="uint32") /* ty=Tensor[(252, 4), uint32] */;
  %588 = reshape(%586, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %589 = reshape(%587, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
  %590 = @func_6284(%588, %589) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %591 = log(%585) /* ty=Tensor[(5, 14, 8), float32] */;
  %592 = %590.2;
  (%591, %592, meta[relay.Constant][50] /* ty=Tensor[(126), uint32] */, %var_13338)
}

def @func_4118(%var_4102: Tensor[(2, 9, 1), float32]) -> (Tensor[(2, 9, 1), float32], Tensor[(2, 2, 13), float64], Tensor[(26, 2), float64]) {
  %593 = cast(%var_4102, dtype="float32") /* ty=Tensor[(2, 9, 1), float32] */;
  %594 = cast(meta[relay.Constant][51] /* ty=Tensor[(26, 2), float64] */, dtype="float64") /* ty=Tensor[(26, 2), float64] */;
  %595 = reshape(%594, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), float64] */;
  %596 = @func_3926(%595) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(12, 5, 15), float32], Tensor[(900), float32], Tensor[(3, 13, 8), float32], Tensor[(312), int64], Tensor[(12, 7, 2), bool], Tensor[(6, 28), float32]) */;
  %597 = acosh(%593) /* ty=Tensor[(2, 9, 1), float32] */;
  %598 = %596.0;
  (%597, %598, meta[relay.Constant][51] /* ty=Tensor[(26, 2), float64] */)
}

def @func_7440() -> Tensor[(10, 6), bool] {
  @func_7007() /* ty=Tensor[(10, 6), bool] */
}

def @func_884(%var_865: Tensor[(5, 14, 2), int64]) -> (Tensor[(5, 14, 2), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) {
  %599 = cast(%var_865, dtype="bool") /* ty=Tensor[(5, 14, 2), bool] */;
  %600 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(5, 14, 2), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 14, 2), int64] */, dtype="bool") /* ty=Tensor[(5, 14, 2), bool] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %603 = cast(meta[relay.Constant][53] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %604 = cast(meta[relay.Constant][53] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %605 = reshape(%603, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %606 = reshape(%604, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %607 = equal(%601, %602) /* ty=Tensor[(5, 14, 2), bool] */;
  %608 = @func_271(%605, %606) /* ty=Tensor[(12, 7, 2), bool] */;
  (%607, %608, meta[relay.Constant][53] /* ty=Tensor[(168), float32] */)
}

def @func_13591(%var_13579: uint32, %var_13581: Tensor[(312), int64]) -> (Tensor[(15, 2, 13), float64], Tensor[(126, ?), int8], Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(150), float64], uint32, Tensor[(11, 6), uint32], Tensor[(312), int64]) {
  %609 = @func_11438() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(60), uint8]) */;
  %610 = cast(meta[relay.Constant][54] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %611 = reshape(%610, newshape=[126, 1]) /* ty=Tensor[(126, 1), uint32] */;
  %612 = @func_6008(%611) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126, 1), uint32], Tensor[(1008), uint32], Tensor[(2, 9, 10), uint16], Tensor[(4, 10, 4), bool], Tensor[(3, 56), float32]) */;
  %613 = %612.2;
  %614 = cast(meta[relay.Constant][54] /* ty=Tensor[(126), uint32] */, dtype="int8") /* ty=Tensor[(126), int8] */;
  %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(2), int32] */;
  %616 = cast(%613, dtype="int8") /* ty=Tensor[(126, 1), int8] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %618 = @func_10412() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(140), int64]) */;
  %619 = cast(%var_13579, dtype="uint32") /* ty=uint32 */;
  %620 = cast(meta[relay.Constant][55] /* ty=Tensor[(11, 6), uint32] */, dtype="uint32") /* ty=Tensor[(11, 6), uint32] */;
  %621 = cast(%var_13581, dtype="int64") /* ty=Tensor[(312), int64] */;
  %622 = reshape(%619, newshape=[]) /* ty=uint32 */;
  %623 = reshape(%620, newshape=[66]) /* ty=Tensor[(66), uint32] */;
  %624 = reshape(%621, newshape=[156, 2]) /* ty=Tensor[(156, 2), int64] */;
  %625 = @func_6176(%622, %623, %624) /* ty=(Tensor[(3, 2, 11), uint32], Tensor[(66), uint32], Tensor[(15, 2, 13), int64], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(156, 2), int64], Tensor[(10, 15, ?), float64]) */;
  %626 = %609.0;
  %627 = bitwise_or(%616, %617) /* ty=Tensor[(126, ?), int8] */;
  %628 = @func_7553() /* ty=Tensor[(15, 2, 13), float64] */;
  %629 = %618.1;
  %630 = %625.4;
  (%626, %627, %628, %629, %630, %var_13579, meta[relay.Constant][55] /* ty=Tensor[(11, 6), uint32] */, %var_13581)
}

def @func_8333(%var_8312: Tensor[(10, 1, 12), float64]) -> (Tensor[(10, 1, 12), float64], Tensor[(15, 2, 13), float64], Tensor[(126), uint32]) {
  %631 = cast(%var_8312, dtype="float64") /* ty=Tensor[(10, 1, 12), float64] */;
  %632 = cast(meta[relay.Constant][56] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %633 = reshape(%632, newshape=[126, 1]) /* ty=Tensor[(126, 1), uint32] */;
  %634 = @func_6008(%633) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126, 1), uint32], Tensor[(1008), uint32], Tensor[(2, 9, 10), uint16], Tensor[(4, 10, 4), bool], Tensor[(3, 56), float32]) */;
  %635 = log(%631) /* ty=Tensor[(10, 1, 12), float64] */;
  %636 = %634.0;
  (%635, %636, meta[relay.Constant][56] /* ty=Tensor[(126), uint32] */)
}

def @func_8757(%var_8754: Tensor[(24), float64]) -> (Tensor[(15, 2, 13), uint64], Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(312), int64]) {
  %637 = @func_7445() /* ty=(Tensor[(15, 2, 13), uint64],) */;
  %638 = cast(%var_8754, dtype="float64") /* ty=Tensor[(24), float64] */;
  %639 = cast(meta[relay.Constant][57] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
  %640 = reshape(%638, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %641 = reshape(%639, newshape=[6, 52]) /* ty=Tensor[(6, 52), int64] */;
  %642 = @func_8444(%640, %641) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(10, 15, 10), float32], Tensor[(1500), float64], Tensor[(6, 52), int64], Tensor[(15, 2, 13), float64]) */;
  %643 = %637.0;
  %644 = %642.5;
  (%643, %644, %var_8754, meta[relay.Constant][57] /* ty=Tensor[(312), int64] */)
}

def @func_11656() -> (Tensor[(15, 2, 13), float64],) {
  %645 = @func_7965() /* ty=Tensor[(15, 2, 13), float64] */;
  (%645,)
}

def @func_732(%var_723: Tensor[(168), float32]) -> (Tensor[(4, 10, 4), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) {
  %646 = cast(meta[relay.Constant][58] /* ty=Tensor[(4, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(4, 10, 4), float32] */;
  %647 = rsqrt(%646) /* ty=Tensor[(4, 10, 4), float32] */;
  %648 = cast(meta[relay.Constant][58] /* ty=Tensor[(4, 10, 4), float32] */, dtype="bool") /* ty=Tensor[(4, 10, 4), bool] */;
  %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%647, dtype="bool") /* ty=Tensor[(4, 10, 4), bool] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %652 = cast(%var_723, dtype="float32") /* ty=Tensor[(168), float32] */;
  %653 = cast(%var_723, dtype="float32") /* ty=Tensor[(168), float32] */;
  %654 = reshape(%652, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %655 = reshape(%653, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %656 = greater_equal(%650, %651) /* ty=Tensor[(4, 10, 4), bool] */;
  %657 = @func_271(%654, %655) /* ty=Tensor[(12, 7, 2), bool] */;
  (%656, %657, %var_723)
}

def @func_11112() -> Tensor[(15, 2, 13), float64] {
  %658 = @func_10381() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(24), float64], Tensor[(312), int64]) */;
  %658.0
}

def @func_3835(%var_3824: Tensor[(15, 16, 14), float64]) -> Tensor[(15, 16, 14), float64] {
  %659 = cast(%var_3824, dtype="float64") /* ty=Tensor[(15, 16, 14), float64] */;
  rsqrt(%659) /* ty=Tensor[(15, 16, 14), float64] */
}

def @func_13116() -> Tensor[(10, 6), bool] {
  @func_7007() /* ty=Tensor[(10, 6), bool] */
}

def @func_8834() -> (Tensor[(10, 6), bool],) {
  %660 = @func_8289() /* ty=(Tensor[(10, 6), bool], Tensor[(150), float64], uint32, Tensor[(66), uint32], Tensor[(312), int64]) */;
  %661 = %660.0;
  (%661,)
}

def @func_8045(%var_8002: Tensor[(16, 14, 3), float32], %var_8003: Tensor[(16, 14, 3), float32], %var_8014: Tensor[(60), uint8]) -> (Tensor[(16, 14, 3), bool], Tensor[(15, 4), uint8], Tensor[(60), uint8], Tensor[(390), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) {
  %662 = cast(%var_8003, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %663 = shape_of(%var_8002, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%var_8002, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %666 = cast(%var_8014, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %667 = cast(meta[relay.Constant][59] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %668 = reshape(%666, newshape=[15, 4]) /* ty=Tensor[(15, 4), uint8] */;
  %669 = reshape(%667, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
  %670 = @func_6574(%668, %669) /* ty=(Tensor[(10, 6), bool], Tensor[(15, 4), uint8], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) */;
  %671 = less(%664, %665) /* ty=Tensor[(16, 14, 3), bool] */;
  %672 = %670.1;
  %673 = @func_7007() /* ty=Tensor[(10, 6), bool] */;
  %674 = @func_6121() /* ty=Tensor[(15, 2, 13), float64] */;
  (%671, %672, %var_8014, meta[relay.Constant][59] /* ty=Tensor[(390), float64] */, %673, %674)
}

def @func_11075() -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
  %675 = @func_10098() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %676 = @func_11037() /* ty=Tensor[(15, 2, 13), float64] */;
  %677 = %675.0;
  (%676, %677)
}

def @func_6176(%var_6137: uint32, %var_6138: Tensor[(66), uint32], %var_6157: Tensor[(156, 2), int64]) -> (Tensor[(3, 2, 11), uint32], Tensor[(66), uint32], Tensor[(15, 2, 13), int64], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(156, 2), int64], Tensor[(10, 15, ?), float64]) {
  %678 = cast(%var_6137, dtype="uint32") /* ty=uint32 */;
  %679 = cast(%var_6138, dtype="uint32") /* ty=Tensor[(66), uint32] */;
  %680 = reshape(%678, newshape=[]) /* ty=uint32 */;
  %681 = reshape(%679, newshape=[3, 2, 11]) /* ty=Tensor[(3, 2, 11), uint32] */;
  %682 = @func_4689(%680, %681) /* ty=(Tensor[(3, 2, 11), uint32], Tensor[(2, 2, 13), float64], Tensor[(18), float32]) */;
  %683 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %684 = %683.0;
  %685 = cast(%684, dtype="int64") /* ty=Tensor[(15, 2, 13), int64] */;
  %686 = cast(%var_6137, dtype="int64") /* ty=int64 */;
  %687 = cast(%684, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %688 = cast(meta[relay.Constant][60] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %689 = cast(meta[relay.Constant][61] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %690 = cast(%var_6157, dtype="int64") /* ty=Tensor[(156, 2), int64] */;
  %691 = reshape(%687, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
  %692 = reshape(%688, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %693 = reshape(%689, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %694 = reshape(%690, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %695 = @func_5745(%691, %692, %693, %694) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 16, 14), float64], Tensor[(2, 1680), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(3, 13, 8), float32]) */;
  %696 = cast(meta[relay.Constant][60] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %697 = %695.5;
  %698 = cast(%697, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %699 = reshape(%696, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), float64] */;
  %700 = reshape(%698, newshape=[10, 15, 10]) /* ty=Tensor[(10, 15, 10), float64] */;
  %701 = @func_2897(%699, %700) /* ty=(Tensor[(10, 15, ?), float64], Tensor[(10, 15, 10), float32]) */;
  %702 = %682.0;
  %703 = subtract(%685, %686) /* ty=Tensor[(15, 2, 13), int64] */;
  %704 = %701.0;
  (%702, %var_6138, %703, %697, meta[relay.Constant][60] /* ty=Tensor[(150), float64] */, meta[relay.Constant][61] /* ty=Tensor[(1500), float64] */, %var_6157, %704)
}

def @func_7553() -> Tensor[(15, 2, 13), float64] {
  %705 = @func_6967() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %705.0
}

def @func_9677() -> (Tensor[(15, 2, 13), uint64], Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) {
  %706 = @func_7445() /* ty=(Tensor[(15, 2, 13), uint64],) */;
  %707 = %706.0;
  %708 = @func_6121() /* ty=Tensor[(15, 2, 13), float64] */;
  %709 = @func_8874() /* ty=Tensor[(10, 6), bool] */;
  %710 = @func_6207() /* ty=Tensor[(15, 2, 13), float64] */;
  (%707, %708, %709, %710)
}

def @func_7630(%var_7612: Tensor[(1500), float64], %var_7613: Tensor[(312), int64], %var_7625: Tensor[(168), float32]) -> (Tensor[(15, 2, 13), float32], Tensor[(3, 13, 8), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(4, 10, 4), bool], Tensor[(168), float32]) {
  %711 = @func_6809() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(9, 14, 3), float32], Tensor[(378), float32], Tensor[(15, 2, 13), float64]) */;
  %712 = %711.5;
  %713 = cast(%712, dtype="float32") /* ty=Tensor[(15, 2, 13), float32] */;
  %714 = sqrt(%713) /* ty=Tensor[(15, 2, 13), float32] */;
  %715 = cast(%714, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %716 = cast(meta[relay.Constant][62] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %717 = cast(%var_7612, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %718 = cast(%var_7613, dtype="int64") /* ty=Tensor[(312), int64] */;
  %719 = reshape(%715, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
  %720 = reshape(%716, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %721 = reshape(%717, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %722 = reshape(%718, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %723 = @func_5745(%719, %720, %721, %722) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 16, 14), float64], Tensor[(2, 1680), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(3, 13, 8), float32]) */;
  %724 = @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */;
  %725 = cast(%var_7625, dtype="float32") /* ty=Tensor[(168), float32] */;
  %726 = reshape(%725, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %727 = @func_732(%726) /* ty=(Tensor[(4, 10, 4), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) */;
  %728 = %723.7;
  %729 = %724.3;
  %730 = %727.0;
  (%714, %728, meta[relay.Constant][62] /* ty=Tensor[(150), float64] */, %var_7612, %var_7613, %729, %730, %var_7625)
}

def @func_10496() -> Tensor[(15, 2, 13), float64] {
  @func_7553() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_8359(%var_8350: Tensor[(15, 2, 13), float64]) -> (Tensor[(15, 2, 13), bool],) {
  %731 = @func_6295() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %732 = %731.0;
  %733 = cast(%var_8350, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%732, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %737 = greater(%735, %736) /* ty=Tensor[(15, 2, 13), bool] */;
  (%737,)
}

def @func_6967() -> (Tensor[(15, 2, 13), float64],) {
  %738 = @func_6295() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %739 = %738.0;
  (%739,)
}

def @func_12928() -> (Tensor[(15, 2, 13), float64], Tensor[(9, 14, 3), float32], Tensor[(378), float32]) {
  %740 = @func_11605() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %741 = cast(meta[relay.Constant][63] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %742 = reshape(%741, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), float32] */;
  %743 = @func_6692(%742) /* ty=(Tensor[(9, 14, 3), float32],) */;
  %744 = %740.0;
  %745 = %743.0;
  (%744, %745, meta[relay.Constant][63] /* ty=Tensor[(378), float32] */)
}

def @func_12993() -> Tensor[(15, 2, 13), float64] {
  %746 = @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %746.0
}

def @func_13202() -> (Tensor[(126), uint32],) {
  %747 = @func_12540() /* ty=(Tensor[(126), uint32],) */;
  %748 = %747.0;
  (%748,)
}

def @func_12540() -> (Tensor[(126), uint32],) {
  %749 = @func_11989() /* ty=(Tensor[(126), uint32], Tensor[(168), float32], Tensor[(165), uint8], Tensor[(15, 2, 13), float64]) */;
  %750 = %749.0;
  (%750,)
}

def @func_12129() -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
  %751 = @func_11605() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %752 = @func_9236() /* ty=Tensor[(15, 2, 13), float64] */;
  %753 = %751.0;
  (%752, %753)
}

def @func_8942() -> (Tensor[(15, 2, 13), uint64],) {
  %754 = @func_7445() /* ty=(Tensor[(15, 2, 13), uint64],) */;
  %755 = %754.0;
  (%755,)
}

def @func_6413(%var_6408: Tensor[(1008), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) {
  %756 = cast(meta[relay.Constant][64] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %757 = cast(%var_6408, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
  %758 = reshape(%756, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %759 = reshape(%757, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
  %760 = @func_6284(%758, %759) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %761 = @func_6121() /* ty=Tensor[(15, 2, 13), float64] */;
  %762 = %760.1;
  (%761, %762, meta[relay.Constant][64] /* ty=Tensor[(126), uint32] */, %var_6408)
}

def @func_9556(%var_9553: Tensor[(90), uint16], %var_9554: Tensor[(180), uint16]) -> (Tensor[(15, 2, 13), float64], Tensor[(165), uint8], Tensor[(90), uint16], Tensor[(180), uint16]) {
  %763 = @func_7588() /* ty=Tensor[(15, 2, 13), float64] */;
  %764 = cast(%763, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %765 = cast(%var_9553, dtype="uint16") /* ty=Tensor[(90), uint16] */;
  %766 = cast(%var_9554, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %767 = reshape(%765, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), uint16] */;
  %768 = reshape(%766, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), uint16] */;
  %769 = @func_2320(%767, %768) /* ty=(Tensor[(2, 9, 10), uint16], Tensor[(12, 7, 2), bool], Tensor[(140), int64], Tensor[(15, 11, 1), uint8], Tensor[(165), uint8]) */;
  %770 = log2(%764) /* ty=Tensor[(15, 2, 13), float64] */;
  %771 = %769.4;
  (%770, %771, %var_9553, %var_9554)
}

def @func_13498() -> (Tensor[(10, 6), bool],) {
  %772 = @func_10957() /* ty=(Tensor[(10, 6), bool],) */;
  %773 = %772.0;
  (%773,)
}

def @func_10644(%var_10636: Tensor[(10, 7, 10), float64]) -> (Tensor[(10, 7, 10), float64],) {
  %774 = cast(%var_10636, dtype="float64") /* ty=Tensor[(10, 7, 10), float64] */;
  %775 = exp(%774) /* ty=Tensor[(10, 7, 10), float64] */;
  (%775,)
}

def @func_6512() -> (Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) {
  %776 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %777 = %776.0;
  %778 = cast(meta[relay.Constant][65] /* ty=Tensor[(15, 2, 13), float64] */, dtype="uint64") /* ty=Tensor[(15, 2, 13), uint64] */;
  %779 = shape_of(%777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%777, dtype="uint64") /* ty=Tensor[(15, 2, 13), uint64] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %782 = cast(meta[relay.Constant][66] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %783 = reshape(%782, newshape=[10, 6]) /* ty=Tensor[(10, 6), uint8] */;
  %784 = @func_5503(%783) /* ty=(Tensor[(10, 6), bool],) */;
  %785 = cast(%777, dtype="float32") /* ty=Tensor[(15, 2, 13), float32] */;
  %786 = left_shift(%780, %781) /* ty=Tensor[(15, 2, 13), uint64] */;
  %787 = %784.0;
  %788 = atanh(%785) /* ty=Tensor[(15, 2, 13), float32] */;
  (%786, %787, meta[relay.Constant][66] /* ty=Tensor[(60), uint8] */, %788)
}

def @func_11438() -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(60), uint8]) {
  %789 = @func_7674() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %790 = cast(meta[relay.Constant][67] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %791 = %789.0;
  %792 = cast(%791, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %793 = reshape(%790, newshape=[15, 4]) /* ty=Tensor[(15, 4), uint8] */;
  %794 = reshape(%792, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
  %795 = @func_6574(%793, %794) /* ty=(Tensor[(10, 6), bool], Tensor[(15, 4), uint8], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) */;
  %796 = %795.3;
  (%791, %796, meta[relay.Constant][67] /* ty=Tensor[(60), uint8] */)
}

def @func_13155() -> Tensor[(126), float64] {
  %797 = @func_9422() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(4, 3, 14), int16], Tensor[(168), float64], Tensor[(126), uint32], Tensor[(1008), uint32], Tensor[(26, 2), float64], Tensor[(3, 6), float32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) */;
  %798 = %797.3;
  %799 = cast(%798, dtype="float64") /* ty=Tensor[(126), float64] */;
  sinh(%799) /* ty=Tensor[(126), float64] */
}

def @func_11809() -> (Tensor[(15, 2, 13), float64],) {
  %800 = @func_10496() /* ty=Tensor[(15, 2, 13), float64] */;
  (%800,)
}

def @func_9746() -> Tensor[(15, 2, 13), float64] {
  @func_6207() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_4834(%var_4784: Tensor[(4, 3, 14), float64]) -> (Tensor[(4, 3, 14), int16],) {
  %801 = cast(%var_4784, dtype="float64") /* ty=Tensor[(4, 3, 14), float64] */;
  %802 = sqrt(%801) /* ty=Tensor[(4, 3, 14), float64] */;
  %803 = cast(%var_4784, dtype="float32") /* ty=Tensor[(4, 3, 14), float32] */;
  %804 = cast(%var_4784, dtype="float32") /* ty=Tensor[(4, 3, 14), float32] */;
  %805 = reshape(%803, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %806 = reshape(%804, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %807 = @func_271(%805, %806) /* ty=Tensor[(12, 7, 2), bool] */;
  %808 = cast(%807, dtype="int16") /* ty=Tensor[(12, 7, 2), int16] */;
  %809 = shape_of(%802, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%802, dtype="int16") /* ty=Tensor[(4, 3, 14), int16] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %812 = multiply(%810, %811) /* ty=Tensor[(4, 3, 14), int16] */;
  (%812,)
}

def @func_8994(%var_8988: Tensor[(165), uint8]) -> (Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(168), float32], Tensor[(15, 11, 1), uint8], Tensor[(165), uint8]) {
  %813 = @func_6295() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %814 = cast(meta[relay.Constant][68] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %815 = cast(meta[relay.Constant][69] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
  %816 = cast(meta[relay.Constant][70] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %817 = reshape(%814, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %818 = reshape(%815, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %819 = reshape(%816, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %820 = @func_7630(%817, %818, %819) /* ty=(Tensor[(15, 2, 13), float32], Tensor[(3, 13, 8), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(4, 10, 4), bool], Tensor[(168), float32]) */;
  %821 = cast(%var_8988, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %822 = reshape(%821, newshape=[15, 11, 1]) /* ty=Tensor[(15, 11, 1), uint8] */;
  %823 = %813.0;
  %824 = %820.7;
  %825 = @func_1272(%822) /* ty=Tensor[(15, 11, 1), uint8] */;
  (%823, %824, meta[relay.Constant][68] /* ty=Tensor[(1500), float64] */, meta[relay.Constant][69] /* ty=Tensor[(312), int64] */, meta[relay.Constant][70] /* ty=Tensor[(168), float32] */, %825, %var_8988)
}

def @func_12895(%var_12886: Tensor[(4, 14, 2), uint64]) -> Tensor[(4, 14, 2), bool] {
  %826 = cast(meta[relay.Constant][71] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %827 = cast(%var_12886, dtype="bool") /* ty=Tensor[(4, 14, 2), bool] */;
  greater(%826, %827) /* ty=Tensor[(4, 14, 2), bool] */
}

def @func_10412() -> (Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(140), int64]) {
  %828 = cast(meta[relay.Constant][72] /* ty=Tensor[(140), int64] */, dtype="int64") /* ty=Tensor[(140), int64] */;
  %829 = reshape(%828, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), int64] */;
  %830 = @func_884(%829) /* ty=(Tensor[(5, 14, 2), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) */;
  %831 = @func_8197() /* ty=Tensor[(15, 2, 13), float64] */;
  %832 = %830.2;
  (%831, %832, meta[relay.Constant][72] /* ty=Tensor[(140), int64] */)
}

def @func_7965() -> Tensor[(15, 2, 13), float64] {
  %833 = @func_7445() /* ty=(Tensor[(15, 2, 13), uint64],) */;
  %834 = %833.0;
  %835 = cast(%834, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  log10(%835) /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_10874(%var_10861: Tensor[(15, 2, 13), float64]) -> (Tensor[(15, 2, 13), bool], Tensor[(15, 11, 1), uint8], Tensor[(165, 1), uint8]) {
  %836 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %837 = %836.0;
  %838 = cast(%var_10861, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %839 = shape_of(%837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %840 = cast(%837, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %842 = cast(meta[relay.Constant][73] /* ty=Tensor[(165, 1), uint8] */, dtype="uint8") /* ty=Tensor[(165, 1), uint8] */;
  %843 = reshape(%842, newshape=[15, 11, 1]) /* ty=Tensor[(15, 11, 1), uint8] */;
  %844 = equal(%840, %841) /* ty=Tensor[(15, 2, 13), bool] */;
  %845 = @func_1272(%843) /* ty=Tensor[(15, 11, 1), uint8] */;
  (%844, %845, meta[relay.Constant][73] /* ty=Tensor[(165, 1), uint8] */)
}

def @func_2320(%var_2286: Tensor[(1, 9, 10), uint16], %var_2287: Tensor[(2, 9, 10), uint16]) -> (Tensor[(2, 9, 10), uint16], Tensor[(12, 7, 2), bool], Tensor[(140), int64], Tensor[(15, 11, 1), uint8], Tensor[(165), uint8]) {
  %846 = cast(%var_2286, dtype="uint16") /* ty=Tensor[(1, 9, 10), uint16] */;
  %847 = cast(%var_2287, dtype="uint16") /* ty=Tensor[(2, 9, 10), uint16] */;
  %848 = cast(meta[relay.Constant][74] /* ty=Tensor[(140), int64] */, dtype="int64") /* ty=Tensor[(140), int64] */;
  %849 = reshape(%848, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), int64] */;
  %850 = @func_884(%849) /* ty=(Tensor[(5, 14, 2), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) */;
  %851 = cast(meta[relay.Constant][75] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %852 = reshape(%851, newshape=[15, 11, 1]) /* ty=Tensor[(15, 11, 1), uint8] */;
  %853 = logical_xor(%846, %847) /* ty=Tensor[(2, 9, 10), uint16] */;
  %854 = %850.1;
  %855 = @func_1272(%852) /* ty=Tensor[(15, 11, 1), uint8] */;
  (%853, %854, meta[relay.Constant][74] /* ty=Tensor[(140), int64] */, %855, meta[relay.Constant][75] /* ty=Tensor[(165), uint8] */)
}

def @func_11208() -> (Tensor[(15, 2, 13), float64],) {
  %856 = @func_7588() /* ty=Tensor[(15, 2, 13), float64] */;
  (%856,)
}

def @func_4718(%var_4698: Tensor[(8, 1, 15), float32]) -> (Tensor[(8, 1, 15), float32],) {
  %857 = cast(%var_4698, dtype="float32") /* ty=Tensor[(8, 1, 15), float32] */;
  %858 = sqrt(%857) /* ty=Tensor[(8, 1, 15), float32] */;
  (%858,)
}

def @func_5691(%var_5686: Tensor[(15, 2, 13), float64]) -> (Tensor[(2, 9, 10), uint16], Tensor[(90), uint16], Tensor[(180), uint16], Tensor[(15, 2, 13), bool]) {
  %859 = cast(meta[relay.Constant][76] /* ty=Tensor[(90), uint16] */, dtype="uint16") /* ty=Tensor[(90), uint16] */;
  %860 = cast(meta[relay.Constant][77] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %861 = reshape(%859, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), uint16] */;
  %862 = reshape(%860, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), uint16] */;
  %863 = @func_2320(%861, %862) /* ty=(Tensor[(2, 9, 10), uint16], Tensor[(12, 7, 2), bool], Tensor[(140), int64], Tensor[(15, 11, 1), uint8], Tensor[(165), uint8]) */;
  %864 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %865 = %864.0;
  %866 = cast(%var_5686, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %867 = shape_of(%865, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%865, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %870 = %863.0;
  %871 = greater_equal(%868, %869) /* ty=Tensor[(15, 2, 13), bool] */;
  (%870, meta[relay.Constant][76] /* ty=Tensor[(90), uint16] */, meta[relay.Constant][77] /* ty=Tensor[(180), uint16] */, %871)
}

def @func_13010() -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
  %872 = @func_10702() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %873 = @func_6295() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %874 = %872.0;
  %875 = %873.0;
  (%874, %875)
}

def @func_12473() -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool]) {
  %876 = @func_9130() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %877 = %876.0;
  %878 = @func_7007() /* ty=Tensor[(10, 6), bool] */;
  (%877, %878)
}

def @func_6963() -> Tensor[(15, 2, 13), float64] {
  %879 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %879.0
}

def @func_10480(%var_10472: Tensor[(8, 2, 1), float64], %var_10473: Tensor[(8, 2, 1), float64]) -> Tensor[(8, 2, ?), float64] {
  %880 = cast(%var_10473, dtype="float64") /* ty=Tensor[(8, 2, 1), float64] */;
  %881 = shape_of(%var_10472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%var_10472, dtype="float64") /* ty=Tensor[(8, 2, 1), float64] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%882, %883) /* ty=Tensor[(8, 2, ?), float64] */
}

def @func_3926(%var_3886: Tensor[(2, 2, 13), float64]) -> (Tensor[(2, 2, 13), float64], Tensor[(12, 5, 15), float32], Tensor[(900), float32], Tensor[(3, 13, 8), float32], Tensor[(312), int64], Tensor[(12, 7, 2), bool], Tensor[(6, 28), float32]) {
  %884 = cast(%var_3886, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  %885 = cast(meta[relay.Constant][78] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %886 = reshape(%885, newshape=[12, 5, 15]) /* ty=Tensor[(12, 5, 15), float32] */;
  %887 = cast(meta[relay.Constant][79] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
  %888 = cast(meta[relay.Constant][79] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
  %889 = reshape(%887, newshape=[3, 13, 8]) /* ty=Tensor[(3, 13, 8), int64] */;
  %890 = reshape(%888, newshape=[3, 13, 8]) /* ty=Tensor[(3, 13, 8), int64] */;
  %891 = cast(meta[relay.Constant][80] /* ty=Tensor[(6, 28), float32] */, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %892 = cast(meta[relay.Constant][80] /* ty=Tensor[(6, 28), float32] */, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %893 = reshape(%891, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %894 = reshape(%892, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %895 = asinh(%884) /* ty=Tensor[(2, 2, 13), float64] */;
  %896 = @func_2726(%886) /* ty=Tensor[(12, 5, 15), float32] */;
  %897 = @func_2606(%889, %890) /* ty=Tensor[(3, 13, 8), float32] */;
  %898 = @func_271(%893, %894) /* ty=Tensor[(12, 7, 2), bool] */;
  (%895, %896, meta[relay.Constant][78] /* ty=Tensor[(900), float32] */, %897, meta[relay.Constant][79] /* ty=Tensor[(312), int64] */, %898, meta[relay.Constant][80] /* ty=Tensor[(6, 28), float32] */)
}

def @func_11616() -> Tensor[(15, 2, 13), float64] {
  @func_6855() /* ty=Tensor[(15, 2, 13), float64] */
}

def @main(%var_13914: Tensor[(150), float64], %var_13930: Tensor[(1500), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(1764), float64], Tensor[(150), float64], Tensor[(1500), float64]) {
  %899 = @func_9677() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) */;
  %900 = cast(%var_13914, dtype="float64") /* ty=Tensor[(150), float64] */;
  %901 = cast(meta[relay.Constant][81] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %902 = reshape(%900, newshape=[150, 1]) /* ty=Tensor[(150, 1), float64] */;
  %903 = reshape(%901, newshape=[750, 2]) /* ty=Tensor[(750, 2), float64] */;
  %904 = @func_12371(%902, %903) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(150, 1), float64], Tensor[(750, 2), float64], Tensor[(10, 16, 5), float64], Tensor[(14, 14, 9), float64], Tensor[(1764), float64], Tensor[(15, 2, 13), float64], Tensor[(10, 15, 800), uint8]) */;
  %905 = cast(%var_13930, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %906 = shape_of(meta[relay.Constant][81] /* ty=Tensor[(1500), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %907 = cast(meta[relay.Constant][81] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?), float64] */;
  %909 = %899.1;
  %910 = %904.5;
  %911 = floor_mod(%907, %908) /* ty=Tensor[(1500), float64] */;
  (%909, %910, %var_13914, %911)
}

def @func_12671() -> (Tensor[(15, 2, 13), float64], Tensor[(63, 2), uint16]) {
  %912 = @func_6967() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %913 = @func_11413() /* ty=(Tensor[(126), uint32],) */;
  %914 = %913.0;
  %915 = cast(%914, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %916 = reshape(%915, newshape=[63, 2]) /* ty=Tensor[(63, 2), uint32] */;
  %917 = @func_7328(%916) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(63, 2), uint32], Tensor[(1008), uint32], Tensor[(3, 2, 11), uint32], uint32, Tensor[(66), uint32], Tensor[(1, 312), int64]) */;
  %918 = %917.2;
  %919 = cast(%914, dtype="uint16") /* ty=Tensor[(126), uint16] */;
  %920 = shape_of(%918, dtype="int32") /* ty=Tensor[(2), int32] */;
  %921 = cast(%918, dtype="uint16") /* ty=Tensor[(63, 2), uint16] */;
  %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %923 = %912.0;
  %924 = left_shift(%921, %922) /* ty=Tensor[(63, 2), uint16] */;
  (%923, %924)
}

def @func_10909() -> Tensor[(15, 2, 13), float64] {
  %925 = @func_7674() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %925.0
}

def @func_9422() -> (Tensor[(15, 2, 13), float64], Tensor[(4, 3, 14), int16], Tensor[(168), float64], Tensor[(126), uint32], Tensor[(1008), uint32], Tensor[(26, 2), float64], Tensor[(3, 6), float32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
  %926 = @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %927 = cast(meta[relay.Constant][82] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %928 = reshape(%927, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float64] */;
  %929 = @func_4834(%928) /* ty=(Tensor[(4, 3, 14), int16],) */;
  %930 = cast(meta[relay.Constant][83] /* ty=Tensor[(1008), uint32] */, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
  %931 = reshape(%930, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
  %932 = @func_6413(%931) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %933 = cast(meta[relay.Constant][84] /* ty=Tensor[(3, 6), float32] */, dtype="float32") /* ty=Tensor[(3, 6), float32] */;
  %934 = reshape(%933, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float32] */;
  %935 = @func_4118(%934) /* ty=(Tensor[(2, 9, 1), float32], Tensor[(2, 2, 13), float64], Tensor[(26, 2), float64]) */;
  %936 = %926.0;
  %937 = %929.0;
  %938 = %932.2;
  %939 = %935.2;
  %940 = @func_6963() /* ty=Tensor[(15, 2, 13), float64] */;
  %941 = @func_6207() /* ty=Tensor[(15, 2, 13), float64] */;
  (%936, %937, meta[relay.Constant][82] /* ty=Tensor[(168), float64] */, %938, meta[relay.Constant][83] /* ty=Tensor[(1008), uint32] */, %939, meta[relay.Constant][84] /* ty=Tensor[(3, 6), float32] */, %940, %941)
}

def @func_10139(%var_10105: Tensor[(3, 8, 10), int8], %var_10106: Tensor[(3, 8, 10), int8], %var_10137: Tensor[(150), float64]) -> (Tensor[(3, 8, 10), int8], Tensor[(15, 2, 13), float64], Tensor[(3, 8, 10), float64], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(150), float64]) {
  %942 = cast(%var_10106, dtype="int8") /* ty=Tensor[(3, 8, 10), int8] */;
  %943 = shape_of(%var_10105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %944 = cast(%var_10105, dtype="int8") /* ty=Tensor[(3, 8, 10), int8] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %946 = cast(%var_10105, dtype="float64") /* ty=Tensor[(3, 8, 10), float64] */;
  %947 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %948 = cast(%var_10137, dtype="float64") /* ty=Tensor[(150), float64] */;
  %949 = reshape(%948, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %950 = @func_5885(%949) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64]) */;
  %951 = right_shift(%944, %945) /* ty=Tensor[(3, 8, 10), int8] */;
  %952 = @func_7553() /* ty=Tensor[(15, 2, 13), float64] */;
  %953 = sqrt(%946) /* ty=Tensor[(3, 8, 10), float64] */;
  %954 = %947.0;
  %955 = %950.0;
  (%951, %952, %953, %954, %955, %var_10137)
}

def @func_12796() -> Tensor[(10, 6), bool] {
  @func_7007() /* ty=Tensor[(10, 6), bool] */
}

def @func_4041(%var_4027: Tensor[(1, 9, 14), uint32], %var_4028: Tensor[(8, 9, 14), uint32]) -> (Tensor[(8, 9, 14), uint32], Tensor[(3, 13, 8), float32], Tensor[(312, 1), int64]) {
  %956 = cast(%var_4027, dtype="uint32") /* ty=Tensor[(1, 9, 14), uint32] */;
  %957 = cast(%var_4028, dtype="uint32") /* ty=Tensor[(8, 9, 14), uint32] */;
  %958 = cast(meta[relay.Constant][85] /* ty=Tensor[(312, 1), int64] */, dtype="int64") /* ty=Tensor[(312, 1), int64] */;
  %959 = cast(meta[relay.Constant][85] /* ty=Tensor[(312, 1), int64] */, dtype="int64") /* ty=Tensor[(312, 1), int64] */;
  %960 = reshape(%958, newshape=[3, 13, 8]) /* ty=Tensor[(3, 13, 8), int64] */;
  %961 = reshape(%959, newshape=[3, 13, 8]) /* ty=Tensor[(3, 13, 8), int64] */;
  %962 = maximum(%956, %957) /* ty=Tensor[(8, 9, 14), uint32] */;
  %963 = @func_2606(%960, %961) /* ty=Tensor[(3, 13, 8), float32] */;
  (%962, %963, meta[relay.Constant][85] /* ty=Tensor[(312, 1), int64] */)
}

def @func_9533(%var_9465: Tensor[(12, 1, 13), float32], %var_9466: Tensor[(12, 10, 13), float32], %var_9510: Tensor[(390), float64], %var_9513: Tensor[(312), int64]) -> (Tensor[(1500), float64], Tensor[(390), float64], Tensor[(1, 150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(60), uint8], Tensor[(12, 10, 13), int8]) {
  %964 = cast(%var_9510, dtype="float64") /* ty=Tensor[(390), float64] */;
  %965 = cast(meta[relay.Constant][86] /* ty=Tensor[(1, 150), float64] */, dtype="float64") /* ty=Tensor[(1, 150), float64] */;
  %966 = cast(meta[relay.Constant][87] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %967 = cast(%var_9513, dtype="int64") /* ty=Tensor[(312), int64] */;
  %968 = reshape(%964, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
  %969 = reshape(%965, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %970 = reshape(%966, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %971 = reshape(%967, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %972 = @func_5745(%968, %969, %970, %971) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 16, 14), float64], Tensor[(2, 1680), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(3, 13, 8), float32]) */;
  %973 = %972.5;
  %974 = cast(%973, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %975 = cast(%var_9513, dtype="int64") /* ty=Tensor[(312), int64] */;
  %976 = reshape(%974, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %977 = reshape(%975, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %978 = @func_6622(%976, %977) /* ty=(Tensor[(60), uint8], Tensor[(10, 15, 10), float32], Tensor[(390), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64]) */;
  %979 = cast(%var_9466, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %980 = asinh(%979) /* ty=Tensor[(12, 10, 13), float32] */;
  %981 = cast(%var_9465, dtype="bool") /* ty=Tensor[(12, 1, 13), bool] */;
  %982 = cast(%var_9466, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %983 = less_equal(%981, %982) /* ty=Tensor[(12, 10, 13), bool] */;
  %984 = cast(%983, dtype="int8") /* ty=Tensor[(12, 10, 13), int8] */;
  %985 = shape_of(%980, dtype="int32") /* ty=Tensor[(3), int32] */;
  %986 = cast(%980, dtype="int8") /* ty=Tensor[(12, 10, 13), int8] */;
  %987 = dyn.reshape(%984, %985, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %988 = %978.0;
  %989 = bitwise_and(%986, %987) /* ty=Tensor[(12, 10, 13), int8] */;
  (%973, %var_9510, meta[relay.Constant][86] /* ty=Tensor[(1, 150), float64] */, meta[relay.Constant][87] /* ty=Tensor[(1500), float64] */, %var_9513, %988, %989)
}

def @func_8850() -> (Tensor[(15, 2, 13), float64],) {
  %990 = @func_6967() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %991 = %990.0;
  (%991,)
}

def @func_8149(%var_8138: Tensor[(504, 2), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(2, 9, 1), float32], Tensor[(18), float32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float32], Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(504, 2), uint32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), bool]) {
  %992 = @func_7674() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %993 = cast(meta[relay.Constant][88] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %994 = reshape(%993, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float32] */;
  %995 = @func_4118(%994) /* ty=(Tensor[(2, 9, 1), float32], Tensor[(2, 2, 13), float64], Tensor[(26, 2), float64]) */;
  %996 = @func_7445() /* ty=(Tensor[(15, 2, 13), uint64],) */;
  %997 = %996.0;
  %998 = cast(%997, dtype="float32") /* ty=Tensor[(15, 2, 13), float32] */;
  %999 = cast(meta[relay.Constant][89] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %1000 = cast(%var_8138, dtype="uint32") /* ty=Tensor[(504, 2), uint32] */;
  %1001 = reshape(%999, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %1002 = reshape(%1000, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
  %1003 = @func_6284(%1001, %1002) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %1004 = @func_7553() /* ty=Tensor[(15, 2, 13), float64] */;
  %1005 = cast(%1004, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %1006 = shape_of(%997, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1007 = cast(%997, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %1008 = dyn.reshape(%1005, %1006, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1009 = @func_7553() /* ty=Tensor[(15, 2, 13), float64] */;
  %1010 = %992.0;
  %1011 = %995.0;
  %1012 = @func_6963() /* ty=Tensor[(15, 2, 13), float64] */;
  %1013 = asinh(%998) /* ty=Tensor[(15, 2, 13), float32] */;
  %1014 = %1003.0;
  %1015 = @func_7965() /* ty=Tensor[(15, 2, 13), float64] */;
  %1016 = less_equal(%1007, %1008) /* ty=Tensor[(15, 2, 13), bool] */;
  (%1009, %1010, %1011, meta[relay.Constant][88] /* ty=Tensor[(18), float32] */, %1012, %1013, %1014, meta[relay.Constant][89] /* ty=Tensor[(126), uint32] */, %var_8138, %1015, %1016)
}

def @func_10525() -> (Tensor[(24), float64],) {
  %1017 = @func_10381() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(24), float64], Tensor[(312), int64]) */;
  %1018 = %1017.1;
  (%1018,)
}

def @func_12778() -> (Tensor[(15, 2, 13), float64],) {
  %1019 = @func_11605() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %1020 = %1019.0;
  (%1020,)
}

def @func_2606(%var_2591: Tensor[(3, 13, 8), int64], %var_2592: Tensor[(3, 13, 8), int64]) -> Tensor[(3, 13, 8), float32] {
  %1021 = cast(%var_2592, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
  %1022 = shape_of(%var_2591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1023 = cast(%var_2591, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
  %1024 = dyn.reshape(%1021, %1022, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1025 = less(%1023, %1024) /* ty=Tensor[(3, 13, 8), bool] */;
  %1026 = cast(%1025, dtype="float32") /* ty=Tensor[(3, 13, 8), float32] */;
  erf(%1026) /* ty=Tensor[(3, 13, 8), float32] */
}

def @func_12231(%var_12210: Tensor[(1008), uint32]) -> (Tensor[(10, 6), bool], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(1008), uint32], Tensor[(126), uint32]) {
  %1027 = @func_10957() /* ty=(Tensor[(10, 6), bool],) */;
  %1028 = cast(meta[relay.Constant][90] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %1029 = cast(%var_12210, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
  %1030 = reshape(%1028, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %1031 = reshape(%1029, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
  %1032 = @func_6903(%1030, %1031) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %1033 = @func_11413() /* ty=(Tensor[(126), uint32],) */;
  %1034 = %1027.0;
  %1035 = %1032.2;
  %1036 = %1033.0;
  (%1034, %1035, meta[relay.Constant][90] /* ty=Tensor[(126), uint32] */, %var_12210, %1036)
}

def @func_6809() -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(9, 14, 3), float32], Tensor[(378), float32], Tensor[(15, 2, 13), float64]) {
  %1037 = cast(meta[relay.Constant][91] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %1038 = reshape(%1037, newshape=[10, 6]) /* ty=Tensor[(10, 6), uint8] */;
  %1039 = @func_5503(%1038) /* ty=(Tensor[(10, 6), bool],) */;
  %1040 = cast(meta[relay.Constant][92] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %1041 = reshape(%1040, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), float32] */;
  %1042 = @func_6692(%1041) /* ty=(Tensor[(9, 14, 3), float32],) */;
  %1043 = @func_6121() /* ty=Tensor[(15, 2, 13), float64] */;
  %1044 = %1039.0;
  %1045 = %1042.0;
  %1046 = @func_6121() /* ty=Tensor[(15, 2, 13), float64] */;
  (%1043, %1044, meta[relay.Constant][91] /* ty=Tensor[(60), uint8] */, %1045, meta[relay.Constant][92] /* ty=Tensor[(378), float32] */, %1046)
}

def @func_7037() -> (Tensor[(15, 2, 13), float64],) {
  %1047 = @func_6967() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %1048 = %1047.0;
  (%1048,)
}

def @func_13711() -> (Tensor[(15, 2, 13), float64],) {
  %1049 = @func_12671() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(63, 2), uint16]) */;
  %1050 = %1049.0;
  (%1050,)
}

def @func_11989() -> (Tensor[(126), uint32], Tensor[(168), float32], Tensor[(165), uint8], Tensor[(15, 2, 13), float64]) {
  %1051 = cast(meta[relay.Constant][93] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %1052 = reshape(%1051, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %1053 = @func_8994(%1052) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(168), float32], Tensor[(15, 11, 1), uint8], Tensor[(165), uint8]) */;
  %1054 = @func_10292() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %1055 = @func_11869() /* ty=Tensor[(126), uint32] */;
  %1056 = %1053.4;
  %1057 = %1054.0;
  (%1055, %1056, meta[relay.Constant][93] /* ty=Tensor[(165), uint8] */, %1057)
}

def @func_6855() -> Tensor[(15, 2, 13), float64] {
  %1058 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %1058.0
}

def @func_10098() -> (Tensor[(15, 2, 13), float64],) {
  %1059 = @func_8197() /* ty=Tensor[(15, 2, 13), float64] */;
  (%1059,)
}

def @func_7588() -> Tensor[(15, 2, 13), float64] {
  %1060 = @func_6295() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %1060.0
}

def @func_7445() -> (Tensor[(15, 2, 13), uint64],) {
  %1061 = @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */;
  %1062 = %1061.0;
  (%1062,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_10911() -> Tensor[(15, 2, 13), float64] {
  @func_10909() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_2728(%var_2727: Tensor[(12, 5, 15), float32]) -> Tensor[(12, 5, 15), float32] {
  %1 = fn (%var_2711: Tensor[(12, 5, 15), float32]) -> Tensor[(12, 5, 15), float32] {
    %0 = cast(%var_2711, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
    log10(%0) /* ty=Tensor[(12, 5, 15), float32] */
  };
  %1(%var_2727) /* ty=Tensor[(12, 5, 15), float32] */
}

def @func_12873() -> (Tensor[(15, 2, 13), float64],) {
  %2 = @func_10381() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(24), float64], Tensor[(312), int64]) */;
  %3 = %2.0;
  (%3,)
}

def @func_7441() -> Tensor[(10, 6), bool] {
  %4 = fn () -> Tensor[(10, 6), bool] {
    @func_7007() /* ty=Tensor[(10, 6), bool] */
  };
  %4() /* ty=Tensor[(10, 6), bool] */
}

def @func_6121() -> Tensor[(15, 2, 13), float64] {
  %5 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %5.0
}

def @func_5784(%var_5771: Tensor[(65), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(13, 1, 5), float32], Tensor[(65), float32]) {
  %6 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %7 = cast(%var_5771, dtype="float32") /* ty=Tensor[(65), float32] */;
  %8 = reshape(%7, newshape=[13, 1, 5]) /* ty=Tensor[(13, 1, 5), float32] */;
  %9 = @func_4518(%8) /* ty=(Tensor[(13, 1, 5), float32],) */;
  %10 = %6.0;
  %11 = %9.0;
  (%10, %11, %var_5771)
}

def @func_6810() -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(9, 14, 3), float32], Tensor[(378), float32], Tensor[(15, 2, 13), float64]) {
  %22 = fn () -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(9, 14, 3), float32], Tensor[(378), float32], Tensor[(15, 2, 13), float64]) {
    %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
    %13 = reshape(%12, newshape=[10, 6]) /* ty=Tensor[(10, 6), uint8] */;
    %14 = @func_5503(%13) /* ty=(Tensor[(10, 6), bool],) */;
    %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %16 = reshape(%15, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), float32] */;
    %17 = @func_6692(%16) /* ty=(Tensor[(9, 14, 3), float32],) */;
    %18 = @func_6121() /* ty=Tensor[(15, 2, 13), float64] */;
    %19 = %14.0;
    %20 = %17.0;
    %21 = @func_6121() /* ty=Tensor[(15, 2, 13), float64] */;
    (%18, %19, meta[relay.Constant][0] /* ty=Tensor[(60), uint8] */, %20, meta[relay.Constant][1] /* ty=Tensor[(378), float32] */, %21)
  };
  %22() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(9, 14, 3), float32], Tensor[(378), float32], Tensor[(15, 2, 13), float64]) */
}

def @func_4837(%var_4835: Tensor[(4, 3, 14), float64]) -> (Tensor[(4, 3, 14), int16],) {
  @func_4834(%var_4835) /* ty=(Tensor[(4, 3, 14), int16],) */
}

def @func_6514() -> (Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) {
  @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */
}

def @func_12994() -> Tensor[(15, 2, 13), float64] {
  %24 = fn () -> Tensor[(15, 2, 13), float64] {
    %23 = @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %23.0
  };
  %24() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_11811() -> (Tensor[(15, 2, 13), float64],) {
  @func_11809() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_9719(%var_9717: Tensor[(128), uint32], %var_9718: Tensor[(900), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(4, 2, 16), float64], Tensor[(128), uint32], Tensor[(15, 16, 14), float64], Tensor[(900), float32], Tensor[(3360), float64]) {
  @func_9715(%var_9717, %var_9718) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(4, 2, 16), float64], Tensor[(128), uint32], Tensor[(15, 16, 14), float64], Tensor[(900), float32], Tensor[(3360), float64]) */
}

def @func_13743() -> Tensor[(126), uint32] {
  @func_13741() /* ty=Tensor[(126), uint32] */
}

def @func_10412() -> (Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(140), int64]) {
  %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(140), int64] */, dtype="int64") /* ty=Tensor[(140), int64] */;
  %26 = reshape(%25, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), int64] */;
  %27 = @func_884(%26) /* ty=(Tensor[(5, 14, 2), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) */;
  %28 = @func_8197() /* ty=Tensor[(15, 2, 13), float64] */;
  %29 = %27.2;
  (%28, %29, meta[relay.Constant][2] /* ty=Tensor[(140), int64] */)
}

def @func_13157() -> Tensor[(126), float64] {
  @func_13155() /* ty=Tensor[(126), float64] */
}

def @func_10957() -> (Tensor[(10, 6), bool],) {
  %30 = @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */;
  %31 = %30.1;
  (%31,)
}

def @func_12374(%var_12372: Tensor[(150, 1), float64], %var_12373: Tensor[(750, 2), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(150, 1), float64], Tensor[(750, 2), float64], Tensor[(10, 16, 5), float64], Tensor[(14, 14, 9), float64], Tensor[(1764), float64], Tensor[(15, 2, 13), float64], Tensor[(10, 15, 800), uint8]) {
  %59 = fn (%var_12253: Tensor[(150, 1), float64], %var_12254: Tensor[(750, 2), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(150, 1), float64], Tensor[(750, 2), float64], Tensor[(10, 16, 5), float64], Tensor[(14, 14, 9), float64], Tensor[(1764), float64], Tensor[(15, 2, 13), float64], Tensor[(10, 15, 800), uint8]) {
    %32 = @func_9836() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) */;
    %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(800), float64] */, dtype="float64") /* ty=Tensor[(800), float64] */;
    %34 = reshape(%33, newshape=[10, 16, 5]) /* ty=Tensor[(10, 16, 5), float64] */;
    %35 = @func_3212(%34) /* ty=(Tensor[(10, 16, 5), float64],) */;
    %36 = cast(meta[relay.Constant][4] /* ty=Tensor[(1764), float64] */, dtype="float64") /* ty=Tensor[(1764), float64] */;
    %37 = reshape(%36, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float64] */;
    %38 = @func_8605(%37) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
    %39 = cast(meta[relay.Constant][3] /* ty=Tensor[(800), float64] */, dtype="float32") /* ty=Tensor[(800), float32] */;
    %40 = atan(%39) /* ty=Tensor[(800), float32] */;
    %41 = cast(%40, dtype="float64") /* ty=Tensor[(800), float64] */;
    %42 = atanh(%41) /* ty=Tensor[(800), float64] */;
    %43 = cast(%var_12253, dtype="float64") /* ty=Tensor[(150, 1), float64] */;
    %44 = cast(%var_12254, dtype="float64") /* ty=Tensor[(750, 2), float64] */;
    %45 = reshape(%43, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), float64] */;
    %46 = reshape(%44, newshape=[10, 15, 10]) /* ty=Tensor[(10, 15, 10), float64] */;
    %47 = @func_2897(%45, %46) /* ty=(Tensor[(10, 15, ?), float64], Tensor[(10, 15, 10), float32]) */;
    %48 = %47.0;
    %49 = cast(%40, dtype="bool") /* ty=Tensor[(800), bool] */;
    %50 = cast(%48, dtype="bool") /* ty=Tensor[(10, 15, ?), bool] */;
    %51 = equal(%49, %50) /* ty=Tensor[(10, 15, 800), bool] */;
    %52 = cast(%42, dtype="uint8") /* ty=Tensor[(800), uint8] */;
    %53 = cast(%51, dtype="uint8") /* ty=Tensor[(10, 15, 800), uint8] */;
    %54 = %32.0;
    %55 = %35.0;
    %56 = %38.1;
    %57 = @func_7965() /* ty=Tensor[(15, 2, 13), float64] */;
    %58 = right_shift(%52, %53) /* ty=Tensor[(10, 15, 800), uint8] */;
    (%54, %var_12253, %var_12254, %55, %56, meta[relay.Constant][4] /* ty=Tensor[(1764), float64] */, %57, %58)
  };
  %59(%var_12372, %var_12373) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(150, 1), float64], Tensor[(750, 2), float64], Tensor[(10, 16, 5), float64], Tensor[(14, 14, 9), float64], Tensor[(1764), float64], Tensor[(15, 2, 13), float64], Tensor[(10, 15, 800), uint8]) */
}

def @func_6903(%var_6898: Tensor[(126), uint32], %var_6899: Tensor[(1008), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) {
  %60 = @func_6295() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %61 = cast(%var_6898, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %62 = cast(%var_6899, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
  %63 = reshape(%61, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %64 = reshape(%62, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
  %65 = @func_6284(%63, %64) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %66 = %60.0;
  %67 = %65.2;
  (%66, %67, %var_6898, %var_6899)
}

def @func_7966() -> Tensor[(15, 2, 13), float64] {
  %71 = fn () -> Tensor[(15, 2, 13), float64] {
    %68 = @func_7445() /* ty=(Tensor[(15, 2, 13), uint64],) */;
    %69 = %68.0;
    %70 = cast(%69, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
    log10(%70) /* ty=Tensor[(15, 2, 13), float64] */
  };
  %71() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_9677() -> (Tensor[(15, 2, 13), uint64], Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) {
  %72 = @func_7445() /* ty=(Tensor[(15, 2, 13), uint64],) */;
  %73 = %72.0;
  %74 = @func_6121() /* ty=Tensor[(15, 2, 13), float64] */;
  %75 = @func_8874() /* ty=Tensor[(10, 6), bool] */;
  %76 = @func_6207() /* ty=Tensor[(15, 2, 13), float64] */;
  (%73, %74, %75, %76)
}

def @func_12628(%var_12626: Tensor[(4, 10, 16), uint16], %var_12627: Tensor[(4, 10, 16), uint16]) -> (Tensor[(4, 10, 16), uint16],) {
  @func_12624(%var_12626, %var_12627) /* ty=(Tensor[(4, 10, 16), uint16],) */
}

def @func_5923(%var_5920: Tensor[(15, 4, 15), float32], %var_5921: Tensor[(15, 4, 15), float32], %var_5922: Tensor[(3360), float64]) -> (Tensor[(15, 4, 15), float32], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 16, 14), float64], Tensor[(3360), float64]) {
  %89 = fn (%var_5900: Tensor[(15, 4, 15), float32], %var_5901: Tensor[(15, 4, 15), float32], %var_5909: Tensor[(3360), float64]) -> (Tensor[(15, 4, 15), float32], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 16, 14), float64], Tensor[(3360), float64]) {
    %77 = cast(%var_5901, dtype="float32") /* ty=Tensor[(15, 4, 15), float32] */;
    %78 = shape_of(%var_5900, dtype="int32") /* ty=Tensor[(3), int32] */;
    %79 = cast(%var_5900, dtype="float32") /* ty=Tensor[(15, 4, 15), float32] */;
    %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %81 = cast(meta[relay.Constant][5] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
    %82 = reshape(%81, newshape=[10, 6]) /* ty=Tensor[(10, 6), uint8] */;
    %83 = @func_5503(%82) /* ty=(Tensor[(10, 6), bool],) */;
    %84 = cast(%var_5909, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %85 = reshape(%84, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float64] */;
    %86 = multiply(%79, %80) /* ty=Tensor[(15, 4, 15), float32] */;
    %87 = %83.0;
    %88 = @func_3835(%85) /* ty=Tensor[(15, 16, 14), float64] */;
    (%86, %87, meta[relay.Constant][5] /* ty=Tensor[(60), uint8] */, %88, %var_5909)
  };
  %89(%var_5920, %var_5921, %var_5922) /* ty=(Tensor[(15, 4, 15), float32], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 16, 14), float64], Tensor[(3360), float64]) */
}

def @func_7037() -> (Tensor[(15, 2, 13), float64],) {
  %90 = @func_6967() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %91 = %90.0;
  (%91,)
}

def @func_6695(%var_6693: Tensor[(9, 14, 3), float32]) -> (Tensor[(9, 14, 3), float32],) {
  @func_6692(%var_6693) /* ty=(Tensor[(9, 14, 3), float32],) */
}

def @func_7039() -> (Tensor[(15, 2, 13), float64],) {
  @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_12671() -> (Tensor[(15, 2, 13), float64], Tensor[(63, 2), uint16]) {
  %92 = @func_6967() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %93 = @func_11413() /* ty=(Tensor[(126), uint32],) */;
  %94 = %93.0;
  %95 = cast(%94, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %96 = reshape(%95, newshape=[63, 2]) /* ty=Tensor[(63, 2), uint32] */;
  %97 = @func_7328(%96) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(63, 2), uint32], Tensor[(1008), uint32], Tensor[(3, 2, 11), uint32], uint32, Tensor[(66), uint32], Tensor[(1, 312), int64]) */;
  %98 = %97.2;
  %99 = cast(%94, dtype="uint16") /* ty=Tensor[(126), uint16] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(2), int32] */;
  %101 = cast(%98, dtype="uint16") /* ty=Tensor[(63, 2), uint16] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %103 = %92.0;
  %104 = left_shift(%101, %102) /* ty=Tensor[(63, 2), uint16] */;
  (%103, %104)
}

def @func_13219() -> (Tensor[(1008), uint32],) {
  %105 = @func_9422() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(4, 3, 14), int16], Tensor[(168), float64], Tensor[(126), uint32], Tensor[(1008), uint32], Tensor[(26, 2), float64], Tensor[(3, 6), float32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) */;
  %106 = %105.4;
  (%106,)
}

def @func_13689(%var_13687: Tensor[(11, 15), uint8]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 11, 1), uint8], Tensor[(11, 15), uint8]) {
  @func_13686(%var_13687) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 11, 1), uint8], Tensor[(11, 15), uint8]) */
}

def @func_8361(%var_8360: Tensor[(15, 2, 13), float64]) -> (Tensor[(15, 2, 13), bool],) {
  %114 = fn (%var_8350: Tensor[(15, 2, 13), float64]) -> (Tensor[(15, 2, 13), bool],) {
    %107 = @func_6295() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %108 = %107.0;
    %109 = cast(%var_8350, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
    %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(%108, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %113 = greater(%111, %112) /* ty=Tensor[(15, 2, 13), bool] */;
    (%113,)
  };
  %114(%var_8360) /* ty=(Tensor[(15, 2, 13), bool],) */
}

def @func_2606(%var_2591: Tensor[(3, 13, 8), int64], %var_2592: Tensor[(3, 13, 8), int64]) -> Tensor[(3, 13, 8), float32] {
  %115 = cast(%var_2592, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
  %116 = shape_of(%var_2591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%var_2591, dtype="bool") /* ty=Tensor[(3, 13, 8), bool] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %119 = less(%117, %118) /* ty=Tensor[(3, 13, 8), bool] */;
  %120 = cast(%119, dtype="float32") /* ty=Tensor[(3, 13, 8), float32] */;
  erf(%120) /* ty=Tensor[(3, 13, 8), float32] */
}

def @func_13345(%var_13343: Tensor[(252, 4), uint32]) -> (Tensor[(5, 14, 8), float32], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(252, 4), uint32]) {
  @func_13342(%var_13343) /* ty=(Tensor[(5, 14, 8), float32], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(252, 4), uint32]) */
}

def @func_12929() -> (Tensor[(15, 2, 13), float64], Tensor[(9, 14, 3), float32], Tensor[(378), float32]) {
  %127 = fn () -> (Tensor[(15, 2, 13), float64], Tensor[(9, 14, 3), float32], Tensor[(378), float32]) {
    %121 = @func_11605() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %122 = cast(meta[relay.Constant][6] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %123 = reshape(%122, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), float32] */;
    %124 = @func_6692(%123) /* ty=(Tensor[(9, 14, 3), float32],) */;
    %125 = %121.0;
    %126 = %124.0;
    (%125, %126, meta[relay.Constant][6] /* ty=Tensor[(378), float32] */)
  };
  %127() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(9, 14, 3), float32], Tensor[(378), float32]) */
}

def @func_10006(%var_10000: Tensor[(4, 5, 7), uint8], %var_10001: Tensor[(168), float32], %var_10002: Tensor[(1764), float64], %var_10003: Tensor[(312), int64], %var_10004: Tensor[(1500), float64], %var_10005: uint32) -> (Tensor[(4, 5, 7), bool], Tensor[(1500), float64], Tensor[(168), float32], Tensor[(14, 14, 9), float64], Tensor[(1764), float64], Tensor[(312), bool], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), int32], Tensor[(15, 2, 13), float64], Tensor[(1, 312), int64], Tensor[(126), uint32], Tensor[(900), float32], uint32) {
  %170 = fn (%var_9926: Tensor[(4, 5, 7), uint8], %var_9935: Tensor[(168), float32], %var_9944: Tensor[(1764), float64], %var_9953: Tensor[(312), int64], %var_9963: Tensor[(1500), float64], %var_9996: uint32) -> (Tensor[(4, 5, 7), bool], Tensor[(1500), float64], Tensor[(168), float32], Tensor[(14, 14, 9), float64], Tensor[(1764), float64], Tensor[(312), bool], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), int32], Tensor[(15, 2, 13), float64], Tensor[(1, 312), int64], Tensor[(126), uint32], Tensor[(900), float32], uint32) {
    %128 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 5, 7), uint8] */, dtype="bool") /* ty=Tensor[(4, 5, 7), bool] */;
    %129 = shape_of(%var_9926, dtype="int32") /* ty=Tensor[(3), int32] */;
    %130 = cast(%var_9926, dtype="bool") /* ty=Tensor[(4, 5, 7), bool] */;
    %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %132 = cast(meta[relay.Constant][8] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
    %133 = cast(meta[relay.Constant][9] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
    %134 = cast(%var_9935, dtype="float32") /* ty=Tensor[(168), float32] */;
    %135 = reshape(%132, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
    %136 = reshape(%133, newshape=[312]) /* ty=Tensor[(312), int64] */;
    %137 = reshape(%134, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %138 = @func_7630(%135, %136, %137) /* ty=(Tensor[(15, 2, 13), float32], Tensor[(3, 13, 8), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(4, 10, 4), bool], Tensor[(168), float32]) */;
    %139 = cast(%var_9944, dtype="float64") /* ty=Tensor[(1764), float64] */;
    %140 = reshape(%139, newshape=[14, 14, 9]) /* ty=Tensor[(14, 14, 9), float64] */;
    %141 = @func_8605(%140) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */;
    %142 = cast(%var_9953, dtype="bool") /* ty=Tensor[(312), bool] */;
    %143 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(312), int64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %144 = cast(meta[relay.Constant][9] /* ty=Tensor[(312), int64] */, dtype="bool") /* ty=Tensor[(312), bool] */;
    %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?), bool] */;
    %146 = cast(meta[relay.Constant][10] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %147 = reshape(%146, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %148 = @func_5885(%147) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64]) */;
    %149 = cast(%var_9963, dtype="int32") /* ty=Tensor[(1500), int32] */;
    %150 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(1500), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %151 = cast(meta[relay.Constant][8] /* ty=Tensor[(1500), float64] */, dtype="int32") /* ty=Tensor[(1500), int32] */;
    %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?), int32] */;
    %153 = cast(meta[relay.Constant][11] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %154 = reshape(%153, newshape=[63, 2]) /* ty=Tensor[(63, 2), uint32] */;
    %155 = @func_7328(%154) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(63, 2), uint32], Tensor[(1008), uint32], Tensor[(3, 2, 11), uint32], uint32, Tensor[(66), uint32], Tensor[(1, 312), int64]) */;
    %156 = cast(%var_9996, dtype="uint32") /* ty=uint32 */;
    %157 = less_equal(%144, %145) /* ty=Tensor[(312), bool] */;
    %158 = cast(%157, dtype="int64") /* ty=Tensor[(312), int64] */;
    %159 = reshape(%156, newshape=[]) /* ty=uint32 */;
    %160 = reshape(%158, newshape=[312]) /* ty=Tensor[(312), int64] */;
    %161 = @func_8699(%159, %160) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 4, 15), float32], Tensor[(900), float32], Tensor[(3360), float64], Tensor[(9, 14, 3), float32], Tensor[(378), float32], Tensor[(150), float64], uint32, Tensor[(66), uint32], Tensor[(312), int64]) */;
    %162 = equal(%130, %131) /* ty=Tensor[(4, 5, 7), bool] */;
    %163 = %138.3;
    %164 = %141.1;
    %165 = %148.3;
    %166 = bitwise_and(%151, %152) /* ty=Tensor[(1500), int32] */;
    %167 = @func_9746() /* ty=Tensor[(15, 2, 13), float64] */;
    %168 = %155.7;
    %169 = %161.3;
    (%162, %163, %var_9935, %164, %var_9944, %157, %165, meta[relay.Constant][10] /* ty=Tensor[(150), float64] */, %166, %167, %168, meta[relay.Constant][11] /* ty=Tensor[(126), uint32] */, %169, %var_9996)
  };
  %170(%var_10000, %var_10001, %var_10002, %var_10003, %var_10004, %var_10005) /* ty=(Tensor[(4, 5, 7), bool], Tensor[(1500), float64], Tensor[(168), float32], Tensor[(14, 14, 9), float64], Tensor[(1764), float64], Tensor[(312), bool], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), int32], Tensor[(15, 2, 13), float64], Tensor[(1, 312), int64], Tensor[(126), uint32], Tensor[(900), float32], uint32) */
}

def @func_9132() -> (Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(1008), uint32]) {
  @func_9130() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(1008), uint32]) */
}

def @func_2320(%var_2286: Tensor[(1, 9, 10), uint16], %var_2287: Tensor[(2, 9, 10), uint16]) -> (Tensor[(2, 9, 10), uint16], Tensor[(12, 7, 2), bool], Tensor[(140), int64], Tensor[(15, 11, 1), uint8], Tensor[(165), uint8]) {
  %171 = cast(%var_2286, dtype="uint16") /* ty=Tensor[(1, 9, 10), uint16] */;
  %172 = cast(%var_2287, dtype="uint16") /* ty=Tensor[(2, 9, 10), uint16] */;
  %173 = cast(meta[relay.Constant][12] /* ty=Tensor[(140), int64] */, dtype="int64") /* ty=Tensor[(140), int64] */;
  %174 = reshape(%173, newshape=[5, 14, 2]) /* ty=Tensor[(5, 14, 2), int64] */;
  %175 = @func_884(%174) /* ty=(Tensor[(5, 14, 2), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) */;
  %176 = cast(meta[relay.Constant][13] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %177 = reshape(%176, newshape=[15, 11, 1]) /* ty=Tensor[(15, 11, 1), uint8] */;
  %178 = logical_xor(%171, %172) /* ty=Tensor[(2, 9, 10), uint16] */;
  %179 = %175.1;
  %180 = @func_1272(%177) /* ty=Tensor[(15, 11, 1), uint8] */;
  (%178, %179, meta[relay.Constant][12] /* ty=Tensor[(140), int64] */, %180, meta[relay.Constant][13] /* ty=Tensor[(165), uint8] */)
}

def @func_7675() -> (Tensor[(15, 2, 13), float64],) {
  %183 = fn () -> (Tensor[(15, 2, 13), float64],) {
    %181 = @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %182 = %181.0;
    (%182,)
  };
  %183() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_10052(%var_10049: Tensor[(11, 2, 12), int32], %var_10050: Tensor[(11, 2, 12), int32], %var_10051: Tensor[(11, 2, 12), int32]) -> (Tensor[(11, 2, 12), float64],) {
  @func_10047(%var_10049, %var_10050, %var_10051) /* ty=(Tensor[(11, 2, 12), float64],) */
}

def @func_12129() -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
  %184 = @func_11605() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %185 = @func_9236() /* ty=Tensor[(15, 2, 13), float64] */;
  %186 = %184.0;
  (%185, %186)
}

def @func_10143(%var_10140: Tensor[(3, 8, 10), int8], %var_10141: Tensor[(3, 8, 10), int8], %var_10142: Tensor[(150), float64]) -> (Tensor[(3, 8, 10), int8], Tensor[(15, 2, 13), float64], Tensor[(3, 8, 10), float64], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(150), float64]) {
  %201 = fn (%var_10105: Tensor[(3, 8, 10), int8], %var_10106: Tensor[(3, 8, 10), int8], %var_10137: Tensor[(150), float64]) -> (Tensor[(3, 8, 10), int8], Tensor[(15, 2, 13), float64], Tensor[(3, 8, 10), float64], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(150), float64]) {
    %187 = cast(%var_10106, dtype="int8") /* ty=Tensor[(3, 8, 10), int8] */;
    %188 = shape_of(%var_10105, dtype="int32") /* ty=Tensor[(3), int32] */;
    %189 = cast(%var_10105, dtype="int8") /* ty=Tensor[(3, 8, 10), int8] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %191 = cast(%var_10105, dtype="float64") /* ty=Tensor[(3, 8, 10), float64] */;
    %192 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %193 = cast(%var_10137, dtype="float64") /* ty=Tensor[(150), float64] */;
    %194 = reshape(%193, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %195 = @func_5885(%194) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64]) */;
    %196 = right_shift(%189, %190) /* ty=Tensor[(3, 8, 10), int8] */;
    %197 = @func_7553() /* ty=Tensor[(15, 2, 13), float64] */;
    %198 = sqrt(%191) /* ty=Tensor[(3, 8, 10), float64] */;
    %199 = %192.0;
    %200 = %195.0;
    (%196, %197, %198, %199, %200, %var_10137)
  };
  %201(%var_10140, %var_10141, %var_10142) /* ty=(Tensor[(3, 8, 10), int8], Tensor[(15, 2, 13), float64], Tensor[(3, 8, 10), float64], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(150), float64]) */
}

def @func_11267() -> (Tensor[(312), int64],) {
  %204 = fn () -> (Tensor[(312), int64],) {
    %202 = @func_10381() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(24), float64], Tensor[(312), int64]) */;
    %203 = %202.3;
    (%203,)
  };
  %204() /* ty=(Tensor[(312), int64],) */
}

def @func_11605() -> (Tensor[(15, 2, 13), float64],) {
  %205 = @func_10292() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %206 = %205.0;
  (%206,)
}

def @func_6512() -> (Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) {
  %207 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %208 = %207.0;
  %209 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 2, 13), float64] */, dtype="uint64") /* ty=Tensor[(15, 2, 13), uint64] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%208, dtype="uint64") /* ty=Tensor[(15, 2, 13), uint64] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %213 = cast(meta[relay.Constant][15] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %214 = reshape(%213, newshape=[10, 6]) /* ty=Tensor[(10, 6), uint8] */;
  %215 = @func_5503(%214) /* ty=(Tensor[(10, 6), bool],) */;
  %216 = cast(%208, dtype="float32") /* ty=Tensor[(15, 2, 13), float32] */;
  %217 = left_shift(%211, %212) /* ty=Tensor[(15, 2, 13), uint64] */;
  %218 = %215.0;
  %219 = atanh(%216) /* ty=Tensor[(15, 2, 13), float32] */;
  (%217, %218, meta[relay.Constant][15] /* ty=Tensor[(60), uint8] */, %219)
}

def @func_11658() -> (Tensor[(15, 2, 13), float64],) {
  @func_11656() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_5750(%var_5746: Tensor[(15, 2, 13), float64], %var_5747: Tensor[(150), float64], %var_5748: Tensor[(1500), float64], %var_5749: Tensor[(312), int64]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 16, 14), float64], Tensor[(2, 1680), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(3, 13, 8), float32]) {
  %245 = fn (%var_5697: Tensor[(15, 2, 13), float64], %var_5717: Tensor[(150), float64], %var_5718: Tensor[(1500), float64], %var_5722: Tensor[(312), int64]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 16, 14), float64], Tensor[(2, 1680), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(3, 13, 8), float32]) {
    %220 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %221 = %220.0;
    %222 = cast(%var_5697, dtype="int16") /* ty=Tensor[(15, 2, 13), int16] */;
    %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
    %224 = cast(%221, dtype="int16") /* ty=Tensor[(15, 2, 13), int16] */;
    %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %226 = multiply(%224, %225) /* ty=Tensor[(15, 2, 13), int16] */;
    %227 = cast(%226, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
    %228 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 1680), float64] */, dtype="float64") /* ty=Tensor[(2, 1680), float64] */;
    %229 = reshape(%228, newshape=[15, 16, 14]) /* ty=Tensor[(15, 16, 14), float64] */;
    %230 = cast(%var_5717, dtype="float64") /* ty=Tensor[(150), float64] */;
    %231 = cast(%var_5718, dtype="float64") /* ty=Tensor[(1500), float64] */;
    %232 = reshape(%230, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), float64] */;
    %233 = reshape(%231, newshape=[10, 15, 10]) /* ty=Tensor[(10, 15, 10), float64] */;
    %234 = @func_2897(%232, %233) /* ty=(Tensor[(10, 15, ?), float64], Tensor[(10, 15, 10), float32]) */;
    %235 = cast(%var_5722, dtype="int64") /* ty=Tensor[(312), int64] */;
    %236 = cast(%var_5722, dtype="int64") /* ty=Tensor[(312), int64] */;
    %237 = reshape(%235, newshape=[3, 13, 8]) /* ty=Tensor[(3, 13, 8), int64] */;
    %238 = reshape(%236, newshape=[3, 13, 8]) /* ty=Tensor[(3, 13, 8), int64] */;
    %239 = @func_2606(%237, %238) /* ty=Tensor[(3, 13, 8), float32] */;
    %240 = cast(%239, dtype="float32") /* ty=Tensor[(3, 13, 8), float32] */;
    %241 = sigmoid(%227) /* ty=Tensor[(15, 2, 13), float64] */;
    %242 = @func_3835(%229) /* ty=Tensor[(15, 16, 14), float64] */;
    %243 = %234.1;
    %244 = log(%240) /* ty=Tensor[(3, 13, 8), float32] */;
    (%241, %242, meta[relay.Constant][16] /* ty=Tensor[(2, 1680), float64] */, %243, %var_5717, %var_5718, %var_5722, %244)
  };
  %245(%var_5746, %var_5747, %var_5748, %var_5749) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 16, 14), float64], Tensor[(2, 1680), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(3, 13, 8), float32]) */
}

def @func_8290() -> (Tensor[(10, 6), bool], Tensor[(150), float64], uint32, Tensor[(66), uint32], Tensor[(312), int64]) {
  %255 = fn () -> (Tensor[(10, 6), bool], Tensor[(150), float64], uint32, Tensor[(66), uint32], Tensor[(312), int64]) {
    %246 = cast(meta[relay.Constant][17] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %247 = cast(meta[relay.Constant][18] /* ty=Tensor[(66), uint32] */, dtype="uint32") /* ty=Tensor[(66), uint32] */;
    %248 = cast(meta[relay.Constant][19] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
    %249 = reshape(%246, newshape=[]) /* ty=uint32 */;
    %250 = reshape(%247, newshape=[66]) /* ty=Tensor[(66), uint32] */;
    %251 = reshape(%248, newshape=[156, 2]) /* ty=Tensor[(156, 2), int64] */;
    %252 = @func_6176(%249, %250, %251) /* ty=(Tensor[(3, 2, 11), uint32], Tensor[(66), uint32], Tensor[(15, 2, 13), int64], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(156, 2), int64], Tensor[(10, 15, ?), float64]) */;
    %253 = @func_7007() /* ty=Tensor[(10, 6), bool] */;
    %254 = %252.4;
    (%253, %254, meta[relay.Constant][17] /* ty=uint32 */, meta[relay.Constant][18] /* ty=Tensor[(66), uint32] */, meta[relay.Constant][19] /* ty=Tensor[(312), int64] */)
  };
  %255() /* ty=(Tensor[(10, 6), bool], Tensor[(150), float64], uint32, Tensor[(66), uint32], Tensor[(312), int64]) */
}

def @func_9748() -> Tensor[(15, 2, 13), float64] {
  @func_9746() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_11113() -> Tensor[(15, 2, 13), float64] {
  %257 = fn () -> Tensor[(15, 2, 13), float64] {
    %256 = @func_10381() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(24), float64], Tensor[(312), int64]) */;
    %256.0
  };
  %257() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_9836() -> (Tensor[(15, 2, 13), float64], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) {
  %258 = @func_8251() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %259 = cast(meta[relay.Constant][20] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %260 = cast(meta[relay.Constant][20] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %261 = reshape(%259, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %262 = reshape(%260, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %263 = %258.0;
  %264 = @func_271(%261, %262) /* ty=Tensor[(12, 7, 2), bool] */;
  (%263, %264, meta[relay.Constant][20] /* ty=Tensor[(168), float32] */)
}

def @func_12797() -> Tensor[(10, 6), bool] {
  %265 = fn () -> Tensor[(10, 6), bool] {
    @func_7007() /* ty=Tensor[(10, 6), bool] */
  };
  %265() /* ty=Tensor[(10, 6), bool] */
}

def @func_13203() -> (Tensor[(126), uint32],) {
  %268 = fn () -> (Tensor[(126), uint32],) {
    %266 = @func_12540() /* ty=(Tensor[(126), uint32],) */;
    %267 = %266.0;
    (%267,)
  };
  %268() /* ty=(Tensor[(126), uint32],) */
}

def @func_8333(%var_8312: Tensor[(10, 1, 12), float64]) -> (Tensor[(10, 1, 12), float64], Tensor[(15, 2, 13), float64], Tensor[(126), uint32]) {
  %269 = cast(%var_8312, dtype="float64") /* ty=Tensor[(10, 1, 12), float64] */;
  %270 = cast(meta[relay.Constant][21] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %271 = reshape(%270, newshape=[126, 1]) /* ty=Tensor[(126, 1), uint32] */;
  %272 = @func_6008(%271) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126, 1), uint32], Tensor[(1008), uint32], Tensor[(2, 9, 10), uint16], Tensor[(4, 10, 4), bool], Tensor[(3, 56), float32]) */;
  %273 = log(%269) /* ty=Tensor[(10, 1, 12), float64] */;
  %274 = %272.0;
  (%273, %274, meta[relay.Constant][21] /* ty=Tensor[(126), uint32] */)
}

def @func_8703(%var_8701: uint32, %var_8702: Tensor[(312), int64]) -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 4, 15), float32], Tensor[(900), float32], Tensor[(3360), float64], Tensor[(9, 14, 3), float32], Tensor[(378), float32], Tensor[(150), float64], uint32, Tensor[(66), uint32], Tensor[(312), int64]) {
  @func_8699(%var_8701, %var_8702) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 4, 15), float32], Tensor[(900), float32], Tensor[(3360), float64], Tensor[(9, 14, 3), float32], Tensor[(378), float32], Tensor[(150), float64], uint32, Tensor[(66), uint32], Tensor[(312), int64]) */
}

def @func_4689(%var_4670: uint32, %var_4671: Tensor[(3, 2, 11), uint32]) -> (Tensor[(3, 2, 11), uint32], Tensor[(2, 2, 13), float64], Tensor[(18), float32]) {
  %275 = cast(%var_4670, dtype="uint32") /* ty=uint32 */;
  %276 = cast(%var_4671, dtype="uint32") /* ty=Tensor[(3, 2, 11), uint32] */;
  %277 = cast(meta[relay.Constant][22] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %278 = reshape(%277, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float32] */;
  %279 = @func_4118(%278) /* ty=(Tensor[(2, 9, 1), float32], Tensor[(2, 2, 13), float64], Tensor[(26, 2), float64]) */;
  %280 = bitwise_xor(%275, %276) /* ty=Tensor[(3, 2, 11), uint32] */;
  %281 = %279.1;
  (%280, %281, meta[relay.Constant][22] /* ty=Tensor[(18), float32] */)
}

def @func_13031() -> Tensor[(15, 2, 13), float64] {
  @func_13029() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_4720(%var_4719: Tensor[(8, 1, 15), float32]) -> (Tensor[(8, 1, 15), float32],) {
  %284 = fn (%var_4698: Tensor[(8, 1, 15), float32]) -> (Tensor[(8, 1, 15), float32],) {
    %282 = cast(%var_4698, dtype="float32") /* ty=Tensor[(8, 1, 15), float32] */;
    %283 = sqrt(%282) /* ty=Tensor[(8, 1, 15), float32] */;
    (%283,)
  };
  %284(%var_4719) /* ty=(Tensor[(8, 1, 15), float32],) */
}

def @func_6296() -> (Tensor[(15, 2, 13), float64],) {
  %286 = fn () -> (Tensor[(15, 2, 13), float64],) {
    %285 = @func_6207() /* ty=Tensor[(15, 2, 13), float64] */;
    (%285,)
  };
  %286() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_10484(%var_10482: Tensor[(8, 2, 1), float64], %var_10483: Tensor[(8, 2, 1), float64]) -> Tensor[(8, 2, ?), float64] {
  @func_10480(%var_10482, %var_10483) /* ty=Tensor[(8, 2, ?), float64] */
}

def @func_8448(%var_8446: Tensor[(24), float64], %var_8447: Tensor[(6, 52), int64]) -> (Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(10, 15, 10), float32], Tensor[(1500), float64], Tensor[(6, 52), int64], Tensor[(15, 2, 13), float64]) {
  @func_8444(%var_8446, %var_8447) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(10, 15, 10), float32], Tensor[(1500), float64], Tensor[(6, 52), int64], Tensor[(15, 2, 13), float64]) */
}

def @func_8759(%var_8758: Tensor[(24), float64]) -> (Tensor[(15, 2, 13), uint64], Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(312), int64]) {
  %295 = fn (%var_8754: Tensor[(24), float64]) -> (Tensor[(15, 2, 13), uint64], Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(312), int64]) {
    %287 = @func_7445() /* ty=(Tensor[(15, 2, 13), uint64],) */;
    %288 = cast(%var_8754, dtype="float64") /* ty=Tensor[(24), float64] */;
    %289 = cast(meta[relay.Constant][23] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
    %290 = reshape(%288, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %291 = reshape(%289, newshape=[6, 52]) /* ty=Tensor[(6, 52), int64] */;
    %292 = @func_8444(%290, %291) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(10, 15, 10), float32], Tensor[(1500), float64], Tensor[(6, 52), int64], Tensor[(15, 2, 13), float64]) */;
    %293 = %287.0;
    %294 = %292.5;
    (%293, %294, %var_8754, meta[relay.Constant][23] /* ty=Tensor[(312), int64] */)
  };
  %295(%var_8758) /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(312), int64]) */
}

def @func_10909() -> Tensor[(15, 2, 13), float64] {
  %296 = @func_7674() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %296.0
}

def @func_7007() -> Tensor[(10, 6), bool] {
  %297 = @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */;
  %297.1
}

def @func_5787(%var_5785: Tensor[(65), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(13, 1, 5), float32], Tensor[(65), float32]) {
  @func_5784(%var_5785) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(13, 1, 5), float32], Tensor[(65), float32]) */
}

def @func_6907(%var_6905: Tensor[(126), uint32], %var_6906: Tensor[(1008), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) {
  @func_6903(%var_6905, %var_6906) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */
}

def @func_12475() -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool]) {
  @func_12473() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool]) */
}

def @func_1652(%var_1650: Tensor[(6, 4, 13), float32], %var_1651: Tensor[(6, 4, 13), float32]) -> (Tensor[(6, 4, 13), float64], Tensor[(6, 4, 13), float64]) {
  %307 = fn (%var_1627: Tensor[(6, 4, 13), float32], %var_1640: Tensor[(6, 4, 13), float32]) -> (Tensor[(6, 4, 13), float64], Tensor[(6, 4, 13), float64]) {
    %298 = cast(%var_1627, dtype="float32") /* ty=Tensor[(6, 4, 13), float32] */;
    %299 = log2(%298) /* ty=Tensor[(6, 4, 13), float32] */;
    %300 = cast(%var_1640, dtype="float64") /* ty=Tensor[(6, 4, 13), float64] */;
    %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
    %302 = cast(%299, dtype="float64") /* ty=Tensor[(6, 4, 13), float64] */;
    %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %304 = cast(%299, dtype="float64") /* ty=Tensor[(6, 4, 13), float64] */;
    %305 = power(%302, %303) /* ty=Tensor[(6, 4, 13), float64] */;
    %306 = exp(%304) /* ty=Tensor[(6, 4, 13), float64] */;
    (%305, %306)
  };
  %307(%var_1650, %var_1651) /* ty=(Tensor[(6, 4, 13), float64], Tensor[(6, 4, 13), float64]) */
}

def @func_8049(%var_8046: Tensor[(16, 14, 3), float32], %var_8047: Tensor[(16, 14, 3), float32], %var_8048: Tensor[(60), uint8]) -> (Tensor[(16, 14, 3), bool], Tensor[(15, 4), uint8], Tensor[(60), uint8], Tensor[(390), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) {
  %321 = fn (%var_8002: Tensor[(16, 14, 3), float32], %var_8003: Tensor[(16, 14, 3), float32], %var_8014: Tensor[(60), uint8]) -> (Tensor[(16, 14, 3), bool], Tensor[(15, 4), uint8], Tensor[(60), uint8], Tensor[(390), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) {
    %308 = cast(%var_8003, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
    %309 = shape_of(%var_8002, dtype="int32") /* ty=Tensor[(3), int32] */;
    %310 = cast(%var_8002, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
    %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %312 = cast(%var_8014, dtype="uint8") /* ty=Tensor[(60), uint8] */;
    %313 = cast(meta[relay.Constant][24] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
    %314 = reshape(%312, newshape=[15, 4]) /* ty=Tensor[(15, 4), uint8] */;
    %315 = reshape(%313, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
    %316 = @func_6574(%314, %315) /* ty=(Tensor[(10, 6), bool], Tensor[(15, 4), uint8], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) */;
    %317 = less(%310, %311) /* ty=Tensor[(16, 14, 3), bool] */;
    %318 = %316.1;
    %319 = @func_7007() /* ty=Tensor[(10, 6), bool] */;
    %320 = @func_6121() /* ty=Tensor[(15, 2, 13), float64] */;
    (%317, %318, %var_8014, meta[relay.Constant][24] /* ty=Tensor[(390), float64] */, %319, %320)
  };
  %321(%var_8046, %var_8047, %var_8048) /* ty=(Tensor[(16, 14, 3), bool], Tensor[(15, 4), uint8], Tensor[(60), uint8], Tensor[(390), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) */
}

def @func_10703() -> (Tensor[(15, 2, 13), float64],) {
  %323 = fn () -> (Tensor[(15, 2, 13), float64],) {
    %322 = @func_6121() /* ty=Tensor[(15, 2, 13), float64] */;
    (%322,)
  };
  %323() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_11223() -> (Tensor[(10, 6), bool],) {
  @func_11221() /* ty=(Tensor[(10, 6), bool],) */
}

def @func_11415() -> (Tensor[(126), uint32],) {
  @func_11413() /* ty=(Tensor[(126), uint32],) */
}

def @func_13619(%var_13608: Tensor[(1500), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(25, 6), float64], Tensor[(1500), float64], Tensor[(15, 2, 13), float64]) {
  %324 = cast(meta[relay.Constant][25] /* ty=Tensor[(25, 6), float64] */, dtype="float64") /* ty=Tensor[(25, 6), float64] */;
  %325 = cast(%var_13608, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %326 = reshape(%324, newshape=[150, 1]) /* ty=Tensor[(150, 1), float64] */;
  %327 = reshape(%325, newshape=[750, 2]) /* ty=Tensor[(750, 2), float64] */;
  %328 = @func_12371(%326, %327) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(150, 1), float64], Tensor[(750, 2), float64], Tensor[(10, 16, 5), float64], Tensor[(14, 14, 9), float64], Tensor[(1764), float64], Tensor[(15, 2, 13), float64], Tensor[(10, 15, 800), uint8]) */;
  %329 = @func_9236() /* ty=Tensor[(15, 2, 13), float64] */;
  %330 = %328.6;
  %331 = @func_7588() /* ty=Tensor[(15, 2, 13), float64] */;
  (%329, %330, meta[relay.Constant][25] /* ty=Tensor[(25, 6), float64] */, %var_13608, %331)
}

def @func_8835() -> (Tensor[(10, 6), bool],) {
  %334 = fn () -> (Tensor[(10, 6), bool],) {
    %332 = @func_8289() /* ty=(Tensor[(10, 6), bool], Tensor[(150), float64], uint32, Tensor[(66), uint32], Tensor[(312), int64]) */;
    %333 = %332.0;
    (%333,)
  };
  %334() /* ty=(Tensor[(10, 6), bool],) */
}

def @func_2064(%var_2026: Tensor[(4, 2, 16), uint32], %var_2027: Tensor[(4, 2, 16), uint32]) -> Tensor[(4, 2, 16), float64] {
  %335 = cast(%var_2027, dtype="bool") /* ty=Tensor[(4, 2, 16), bool] */;
  %336 = shape_of(%var_2026, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%var_2026, dtype="bool") /* ty=Tensor[(4, 2, 16), bool] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %339 = less(%337, %338) /* ty=Tensor[(4, 2, 16), bool] */;
  %340 = cast(%339, dtype="float64") /* ty=Tensor[(4, 2, 16), float64] */;
  sigmoid(%340) /* ty=Tensor[(4, 2, 16), float64] */
}

def @func_11076() -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
  %344 = fn () -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
    %341 = @func_10098() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %342 = @func_11037() /* ty=Tensor[(15, 2, 13), float64] */;
    %343 = %341.0;
    (%342, %343)
  };
  %344() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) */
}

def @func_11656() -> (Tensor[(15, 2, 13), float64],) {
  %345 = @func_7965() /* ty=Tensor[(15, 2, 13), float64] */;
  (%345,)
}

def @func_1275(%var_1273: Tensor[(15, 11, 1), uint8]) -> Tensor[(15, 11, 1), uint8] {
  @func_1272(%var_1273) /* ty=Tensor[(15, 11, 1), uint8] */
}

def @func_12829() -> Tensor[(15, 2, 13), float64] {
  %348 = fn () -> Tensor[(15, 2, 13), float64] {
    %346 = @func_11616() /* ty=Tensor[(15, 2, 13), float64] */;
    %347 = cast(%346, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
    tan(%347) /* ty=Tensor[(15, 2, 13), float64] */
  };
  %348() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_8875() -> Tensor[(10, 6), bool] {
  %350 = fn () -> Tensor[(10, 6), bool] {
    %349 = @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */;
    %349.1
  };
  %350() /* ty=Tensor[(10, 6), bool] */
}

def @func_8699(%var_8683: uint32, %var_8685: Tensor[(312), int64]) -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 4, 15), float32], Tensor[(900), float32], Tensor[(3360), float64], Tensor[(9, 14, 3), float32], Tensor[(378), float32], Tensor[(150), float64], uint32, Tensor[(66), uint32], Tensor[(312), int64]) {
  %351 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %352 = cast(meta[relay.Constant][26] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %353 = cast(meta[relay.Constant][26] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %354 = cast(meta[relay.Constant][27] /* ty=Tensor[(3360), float64] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %355 = reshape(%352, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
  %356 = reshape(%353, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
  %357 = reshape(%354, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %358 = @func_5919(%355, %356, %357) /* ty=(Tensor[(15, 4, 15), float32], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 16, 14), float64], Tensor[(3360), float64]) */;
  %359 = cast(meta[relay.Constant][28] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %360 = reshape(%359, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), float32] */;
  %361 = @func_6692(%360) /* ty=(Tensor[(9, 14, 3), float32],) */;
  %362 = cast(%var_8683, dtype="uint32") /* ty=uint32 */;
  %363 = cast(meta[relay.Constant][29] /* ty=Tensor[(66), uint32] */, dtype="uint32") /* ty=Tensor[(66), uint32] */;
  %364 = cast(%var_8685, dtype="int64") /* ty=Tensor[(312), int64] */;
  %365 = reshape(%362, newshape=[]) /* ty=uint32 */;
  %366 = reshape(%363, newshape=[66]) /* ty=Tensor[(66), uint32] */;
  %367 = reshape(%364, newshape=[156, 2]) /* ty=Tensor[(156, 2), int64] */;
  %368 = @func_6176(%365, %366, %367) /* ty=(Tensor[(3, 2, 11), uint32], Tensor[(66), uint32], Tensor[(15, 2, 13), int64], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(156, 2), int64], Tensor[(10, 15, ?), float64]) */;
  %369 = %351.0;
  %370 = @func_7440() /* ty=Tensor[(10, 6), bool] */;
  %371 = %358.0;
  %372 = %361.0;
  %373 = %368.4;
  (%369, %370, %371, meta[relay.Constant][26] /* ty=Tensor[(900), float32] */, meta[relay.Constant][27] /* ty=Tensor[(3360), float64] */, %372, meta[relay.Constant][28] /* ty=Tensor[(378), float32] */, %373, %var_8683, meta[relay.Constant][29] /* ty=Tensor[(66), uint32] */, %var_8685)
}

def @func_9237() -> Tensor[(15, 2, 13), float64] {
  %374 = fn () -> Tensor[(15, 2, 13), float64] {
    @func_7965() /* ty=Tensor[(15, 2, 13), float64] */
  };
  %374() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_10293() -> (Tensor[(15, 2, 13), float64],) {
  %376 = fn () -> (Tensor[(15, 2, 13), float64],) {
    %375 = @func_9746() /* ty=Tensor[(15, 2, 13), float64] */;
    (%375,)
  };
  %376() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_11809() -> (Tensor[(15, 2, 13), float64],) {
  %377 = @func_10496() /* ty=Tensor[(15, 2, 13), float64] */;
  (%377,)
}

def @func_9814(%var_9812: Tensor[(60), uint8], %var_9813: Tensor[(18), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(13, 1, 5), float32], Tensor[(65), float32], Tensor[(18, ?), int16], Tensor[(18), float32]) {
  @func_9810(%var_9812, %var_9813) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(13, 1, 5), float32], Tensor[(65), float32], Tensor[(18, ?), int16], Tensor[(18), float32]) */
}

def @func_11038() -> Tensor[(15, 2, 13), float64] {
  %378 = fn () -> Tensor[(15, 2, 13), float64] {
    @func_8197() /* ty=Tensor[(15, 2, 13), float64] */
  };
  %378() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_13118() -> Tensor[(10, 6), bool] {
  @func_13116() /* ty=Tensor[(10, 6), bool] */
}

def @func_7635(%var_7632: Tensor[(1500), float64], %var_7633: Tensor[(312), int64], %var_7634: Tensor[(168), float32]) -> (Tensor[(15, 2, 13), float32], Tensor[(3, 13, 8), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(4, 10, 4), bool], Tensor[(168), float32]) {
  @func_7630(%var_7632, %var_7633, %var_7634) /* ty=(Tensor[(15, 2, 13), float32], Tensor[(3, 13, 8), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(4, 10, 4), bool], Tensor[(168), float32]) */
}

def @func_3837(%var_3836: Tensor[(15, 16, 14), float64]) -> Tensor[(15, 16, 14), float64] {
  %380 = fn (%var_3824: Tensor[(15, 16, 14), float64]) -> Tensor[(15, 16, 14), float64] {
    %379 = cast(%var_3824, dtype="float64") /* ty=Tensor[(15, 16, 14), float64] */;
    rsqrt(%379) /* ty=Tensor[(15, 16, 14), float64] */
  };
  %380(%var_3836) /* ty=Tensor[(15, 16, 14), float64] */
}

def @func_12233(%var_12232: Tensor[(1008), uint32]) -> (Tensor[(10, 6), bool], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(1008), uint32], Tensor[(126), uint32]) {
  %391 = fn (%var_12210: Tensor[(1008), uint32]) -> (Tensor[(10, 6), bool], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(1008), uint32], Tensor[(126), uint32]) {
    %381 = @func_10957() /* ty=(Tensor[(10, 6), bool],) */;
    %382 = cast(meta[relay.Constant][30] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %383 = cast(%var_12210, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
    %384 = reshape(%382, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %385 = reshape(%383, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
    %386 = @func_6903(%384, %385) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
    %387 = @func_11413() /* ty=(Tensor[(126), uint32],) */;
    %388 = %381.0;
    %389 = %386.2;
    %390 = %387.0;
    (%388, %389, meta[relay.Constant][30] /* ty=Tensor[(126), uint32] */, %var_12210, %390)
  };
  %391(%var_12232) /* ty=(Tensor[(10, 6), bool], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(1008), uint32], Tensor[(126), uint32]) */
}

def @func_1272(%var_1261: Tensor[(15, 11, 1), uint8]) -> Tensor[(15, 11, 1), uint8] {
  %392 = cast(meta[relay.Constant][31] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %393 = cast(%var_1261, dtype="uint8") /* ty=Tensor[(15, 11, 1), uint8] */;
  left_shift(%392, %393) /* ty=Tensor[(15, 11, 1), uint8] */
}

def @func_9838() -> (Tensor[(15, 2, 13), float64], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) {
  @func_9836() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) */
}

def @func_13011() -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
  %398 = fn () -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
    %394 = @func_10702() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %395 = @func_6295() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %396 = %394.0;
    %397 = %395.0;
    (%396, %397)
  };
  %398() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) */
}

def @func_3929(%var_3927: Tensor[(2, 2, 13), float64]) -> (Tensor[(2, 2, 13), float64], Tensor[(12, 5, 15), float32], Tensor[(900), float32], Tensor[(3, 13, 8), float32], Tensor[(312), int64], Tensor[(12, 7, 2), bool], Tensor[(6, 28), float32]) {
  @func_3926(%var_3927) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(12, 5, 15), float32], Tensor[(900), float32], Tensor[(3, 13, 8), float32], Tensor[(312), int64], Tensor[(12, 7, 2), bool], Tensor[(6, 28), float32]) */
}

def @func_10754() -> Tensor[(15, 2, 13), float64] {
  @func_6963() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_8996(%var_8995: Tensor[(165), uint8]) -> (Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(168), float32], Tensor[(15, 11, 1), uint8], Tensor[(165), uint8]) {
  %412 = fn (%var_8988: Tensor[(165), uint8]) -> (Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(168), float32], Tensor[(15, 11, 1), uint8], Tensor[(165), uint8]) {
    %399 = @func_6295() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %400 = cast(meta[relay.Constant][32] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
    %401 = cast(meta[relay.Constant][33] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
    %402 = cast(meta[relay.Constant][34] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
    %403 = reshape(%400, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
    %404 = reshape(%401, newshape=[312]) /* ty=Tensor[(312), int64] */;
    %405 = reshape(%402, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %406 = @func_7630(%403, %404, %405) /* ty=(Tensor[(15, 2, 13), float32], Tensor[(3, 13, 8), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(4, 10, 4), bool], Tensor[(168), float32]) */;
    %407 = cast(%var_8988, dtype="uint8") /* ty=Tensor[(165), uint8] */;
    %408 = reshape(%407, newshape=[15, 11, 1]) /* ty=Tensor[(15, 11, 1), uint8] */;
    %409 = %399.0;
    %410 = %406.7;
    %411 = @func_1272(%408) /* ty=Tensor[(15, 11, 1), uint8] */;
    (%409, %410, meta[relay.Constant][32] /* ty=Tensor[(1500), float64] */, meta[relay.Constant][33] /* ty=Tensor[(312), int64] */, meta[relay.Constant][34] /* ty=Tensor[(168), float32] */, %411, %var_8988)
  };
  %412(%var_8995) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(168), float32], Tensor[(15, 11, 1), uint8], Tensor[(165), uint8]) */
}

def @func_6574(%var_6558: Tensor[(15, 4), uint8], %var_6569: Tensor[(15, 2, 13), float64]) -> (Tensor[(10, 6), bool], Tensor[(15, 4), uint8], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) {
  %413 = cast(%var_6558, dtype="uint8") /* ty=Tensor[(15, 4), uint8] */;
  %414 = reshape(%413, newshape=[10, 6]) /* ty=Tensor[(10, 6), uint8] */;
  %415 = @func_5503(%414) /* ty=(Tensor[(10, 6), bool],) */;
  %416 = %415.0;
  %417 = cast(%416, dtype="uint8") /* ty=Tensor[(10, 6), uint8] */;
  %418 = reshape(%417, newshape=[10, 6]) /* ty=Tensor[(10, 6), uint8] */;
  %419 = @func_5503(%418) /* ty=(Tensor[(10, 6), bool],) */;
  %420 = @func_6295() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %421 = %420.0;
  %422 = cast(%var_6569, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%421, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %426 = %419.0;
  %427 = mod(%424, %425) /* ty=Tensor[(15, 2, 13), float64] */;
  (%416, %var_6558, %426, %427)
}

def @func_10527() -> (Tensor[(24), float64],) {
  @func_10525() /* ty=(Tensor[(24), float64],) */
}

def @func_13827() -> (Tensor[(15, 2, 13), float64],) {
  %428 = @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %429 = %428.0;
  (%429,)
}

def @func_735(%var_733: Tensor[(168), float32]) -> (Tensor[(4, 10, 4), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) {
  @func_732(%var_733) /* ty=(Tensor[(4, 10, 4), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) */
}

def @func_9560(%var_9558: Tensor[(90), uint16], %var_9559: Tensor[(180), uint16]) -> (Tensor[(15, 2, 13), float64], Tensor[(165), uint8], Tensor[(90), uint16], Tensor[(180), uint16]) {
  @func_9556(%var_9558, %var_9559) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(165), uint8], Tensor[(90), uint16], Tensor[(180), uint16]) */
}

def @func_13713() -> (Tensor[(15, 2, 13), float64],) {
  @func_13711() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_8253() -> (Tensor[(15, 2, 13), float64],) {
  @func_8251() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_10874(%var_10861: Tensor[(15, 2, 13), float64]) -> (Tensor[(15, 2, 13), bool], Tensor[(15, 11, 1), uint8], Tensor[(165, 1), uint8]) {
  %430 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %431 = %430.0;
  %432 = cast(%var_10861, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%431, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %436 = cast(meta[relay.Constant][35] /* ty=Tensor[(165, 1), uint8] */, dtype="uint8") /* ty=Tensor[(165, 1), uint8] */;
  %437 = reshape(%436, newshape=[15, 11, 1]) /* ty=Tensor[(15, 11, 1), uint8] */;
  %438 = equal(%434, %435) /* ty=Tensor[(15, 2, 13), bool] */;
  %439 = @func_1272(%437) /* ty=Tensor[(15, 11, 1), uint8] */;
  (%438, %439, meta[relay.Constant][35] /* ty=Tensor[(165, 1), uint8] */)
}

def @func_12541() -> (Tensor[(126), uint32],) {
  %442 = fn () -> (Tensor[(126), uint32],) {
    %440 = @func_11989() /* ty=(Tensor[(126), uint32], Tensor[(168), float32], Tensor[(165), uint8], Tensor[(15, 2, 13), float64]) */;
    %441 = %440.0;
    (%441,)
  };
  %442() /* ty=(Tensor[(126), uint32],) */
}

def @func_10382() -> (Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(24), float64], Tensor[(312), int64]) {
  %451 = fn () -> (Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(24), float64], Tensor[(312), int64]) {
    %443 = @func_9422() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(4, 3, 14), int16], Tensor[(168), float64], Tensor[(126), uint32], Tensor[(1008), uint32], Tensor[(26, 2), float64], Tensor[(3, 6), float32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) */;
    %444 = cast(meta[relay.Constant][36] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %445 = cast(meta[relay.Constant][37] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
    %446 = reshape(%444, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %447 = reshape(%445, newshape=[6, 52]) /* ty=Tensor[(6, 52), int64] */;
    %448 = @func_8444(%446, %447) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(10, 15, 10), float32], Tensor[(1500), float64], Tensor[(6, 52), int64], Tensor[(15, 2, 13), float64]) */;
    %449 = %443.7;
    %450 = %448.1;
    (%449, %450, meta[relay.Constant][36] /* ty=Tensor[(24), float64] */, meta[relay.Constant][37] /* ty=Tensor[(312), int64] */)
  };
  %451() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(24), float64], Tensor[(312), int64]) */
}

def @func_6123() -> Tensor[(15, 2, 13), float64] {
  @func_6121() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_3212(%var_3203: Tensor[(10, 16, 5), float64]) -> (Tensor[(10, 16, 5), float64],) {
  %452 = cast(%var_3203, dtype="float64") /* ty=Tensor[(10, 16, 5), float64] */;
  %453 = tan(%452) /* ty=Tensor[(10, 16, 5), float64] */;
  (%453,)
}

def @func_7588() -> Tensor[(15, 2, 13), float64] {
  %454 = @func_6295() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %454.0
}

def @func_6578(%var_6576: Tensor[(15, 4), uint8], %var_6577: Tensor[(15, 2, 13), float64]) -> (Tensor[(10, 6), bool], Tensor[(15, 4), uint8], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) {
  @func_6574(%var_6576, %var_6577) /* ty=(Tensor[(10, 6), bool], Tensor[(15, 4), uint8], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) */
}

def @func_275(%var_273: Tensor[(12, 7, 2), float32], %var_274: Tensor[(12, 7, 2), float32]) -> Tensor[(12, 7, 2), bool] {
  @func_271(%var_273, %var_274) /* ty=Tensor[(12, 7, 2), bool] */
}

def @func_13466() -> Tensor[(10, 6), bool] {
  %455 = fn () -> Tensor[(10, 6), bool] {
    @func_13116() /* ty=Tensor[(10, 6), bool] */
  };
  %455() /* ty=Tensor[(10, 6), bool] */
}

def @func_11989() -> (Tensor[(126), uint32], Tensor[(168), float32], Tensor[(165), uint8], Tensor[(15, 2, 13), float64]) {
  %456 = cast(meta[relay.Constant][38] /* ty=Tensor[(165), uint8] */, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %457 = reshape(%456, newshape=[165]) /* ty=Tensor[(165), uint8] */;
  %458 = @func_8994(%457) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(168), float32], Tensor[(15, 11, 1), uint8], Tensor[(165), uint8]) */;
  %459 = @func_10292() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %460 = @func_11869() /* ty=Tensor[(126), uint32] */;
  %461 = %458.4;
  %462 = %459.0;
  (%460, %461, meta[relay.Constant][38] /* ty=Tensor[(165), uint8] */, %462)
}

def @func_11617() -> Tensor[(15, 2, 13), float64] {
  %463 = fn () -> Tensor[(15, 2, 13), float64] {
    @func_6855() /* ty=Tensor[(15, 2, 13), float64] */
  };
  %463() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_12875() -> (Tensor[(15, 2, 13), float64],) {
  @func_12873() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_13029() -> Tensor[(15, 2, 13), float64] {
  @func_11156() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_13622(%var_13620: Tensor[(1500), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(25, 6), float64], Tensor[(1500), float64], Tensor[(15, 2, 13), float64]) {
  @func_13619(%var_13620) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(25, 6), float64], Tensor[(1500), float64], Tensor[(15, 2, 13), float64]) */
}

def @func_6625(%var_6623: Tensor[(1500), float64], %var_6624: Tensor[(312), int64]) -> (Tensor[(60), uint8], Tensor[(10, 15, 10), float32], Tensor[(390), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64]) {
  %476 = fn (%var_6607: Tensor[(1500), float64], %var_6608: Tensor[(312), int64]) -> (Tensor[(60), uint8], Tensor[(10, 15, 10), float32], Tensor[(390), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64]) {
    %464 = @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */;
    %465 = cast(meta[relay.Constant][39] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
    %466 = cast(meta[relay.Constant][40] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
    %467 = cast(%var_6607, dtype="float64") /* ty=Tensor[(1500), float64] */;
    %468 = cast(%var_6608, dtype="int64") /* ty=Tensor[(312), int64] */;
    %469 = reshape(%465, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
    %470 = reshape(%466, newshape=[150]) /* ty=Tensor[(150), float64] */;
    %471 = reshape(%467, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
    %472 = reshape(%468, newshape=[312]) /* ty=Tensor[(312), int64] */;
    %473 = @func_5745(%469, %470, %471, %472) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 16, 14), float64], Tensor[(2, 1680), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(3, 13, 8), float32]) */;
    %474 = %464.2;
    %475 = %473.3;
    (%474, %475, meta[relay.Constant][39] /* ty=Tensor[(390), float64] */, meta[relay.Constant][40] /* ty=Tensor[(150), float64] */, %var_6607, %var_6608)
  };
  %476(%var_6623, %var_6624) /* ty=(Tensor[(60), uint8], Tensor[(10, 15, 10), float32], Tensor[(390), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64]) */
}

def @func_10756() -> Tensor[(15, 2, 13), float64] {
  @func_10754() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_9533(%var_9465: Tensor[(12, 1, 13), float32], %var_9466: Tensor[(12, 10, 13), float32], %var_9510: Tensor[(390), float64], %var_9513: Tensor[(312), int64]) -> (Tensor[(1500), float64], Tensor[(390), float64], Tensor[(1, 150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(60), uint8], Tensor[(12, 10, 13), int8]) {
  %477 = cast(%var_9510, dtype="float64") /* ty=Tensor[(390), float64] */;
  %478 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 150), float64] */, dtype="float64") /* ty=Tensor[(1, 150), float64] */;
  %479 = cast(meta[relay.Constant][42] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %480 = cast(%var_9513, dtype="int64") /* ty=Tensor[(312), int64] */;
  %481 = reshape(%477, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
  %482 = reshape(%478, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %483 = reshape(%479, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %484 = reshape(%480, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %485 = @func_5745(%481, %482, %483, %484) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 16, 14), float64], Tensor[(2, 1680), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(3, 13, 8), float32]) */;
  %486 = %485.5;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %488 = cast(%var_9513, dtype="int64") /* ty=Tensor[(312), int64] */;
  %489 = reshape(%487, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %490 = reshape(%488, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %491 = @func_6622(%489, %490) /* ty=(Tensor[(60), uint8], Tensor[(10, 15, 10), float32], Tensor[(390), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64]) */;
  %492 = cast(%var_9466, dtype="float32") /* ty=Tensor[(12, 10, 13), float32] */;
  %493 = asinh(%492) /* ty=Tensor[(12, 10, 13), float32] */;
  %494 = cast(%var_9465, dtype="bool") /* ty=Tensor[(12, 1, 13), bool] */;
  %495 = cast(%var_9466, dtype="bool") /* ty=Tensor[(12, 10, 13), bool] */;
  %496 = less_equal(%494, %495) /* ty=Tensor[(12, 10, 13), bool] */;
  %497 = cast(%496, dtype="int8") /* ty=Tensor[(12, 10, 13), int8] */;
  %498 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%493, dtype="int8") /* ty=Tensor[(12, 10, 13), int8] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %501 = %491.0;
  %502 = bitwise_and(%499, %500) /* ty=Tensor[(12, 10, 13), int8] */;
  (%486, %var_9510, meta[relay.Constant][41] /* ty=Tensor[(1, 150), float64] */, meta[relay.Constant][42] /* ty=Tensor[(1500), float64] */, %var_9513, %501, %502)
}

def @func_12473() -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool]) {
  %503 = @func_9130() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %504 = %503.0;
  %505 = @func_7007() /* ty=Tensor[(10, 6), bool] */;
  (%504, %505)
}

def @func_2324(%var_2322: Tensor[(1, 9, 10), uint16], %var_2323: Tensor[(2, 9, 10), uint16]) -> (Tensor[(2, 9, 10), uint16], Tensor[(12, 7, 2), bool], Tensor[(140), int64], Tensor[(15, 11, 1), uint8], Tensor[(165), uint8]) {
  @func_2320(%var_2322, %var_2323) /* ty=(Tensor[(2, 9, 10), uint16], Tensor[(12, 7, 2), bool], Tensor[(140), int64], Tensor[(15, 11, 1), uint8], Tensor[(165), uint8]) */
}

def @func_271(%var_262: Tensor[(12, 7, 2), float32], %var_263: Tensor[(12, 7, 2), float32]) -> Tensor[(12, 7, 2), bool] {
  %506 = cast(%var_263, dtype="bool") /* ty=Tensor[(12, 7, 2), bool] */;
  %507 = shape_of(%var_262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%var_262, dtype="bool") /* ty=Tensor[(12, 7, 2), bool] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%508, %509) /* ty=Tensor[(12, 7, 2), bool] */
}

def @func_6415(%var_6414: Tensor[(1008), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) {
  %517 = fn (%var_6408: Tensor[(1008), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) {
    %510 = cast(meta[relay.Constant][43] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %511 = cast(%var_6408, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
    %512 = reshape(%510, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %513 = reshape(%511, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
    %514 = @func_6284(%512, %513) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
    %515 = @func_6121() /* ty=Tensor[(15, 2, 13), float64] */;
    %516 = %514.1;
    (%515, %516, meta[relay.Constant][43] /* ty=Tensor[(126), uint32] */, %var_6408)
  };
  %517(%var_6414) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */
}

def @func_8151(%var_8150: Tensor[(504, 2), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(2, 9, 1), float32], Tensor[(18), float32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float32], Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(504, 2), uint32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), bool]) {
  %543 = fn (%var_8138: Tensor[(504, 2), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(2, 9, 1), float32], Tensor[(18), float32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float32], Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(504, 2), uint32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), bool]) {
    %518 = @func_7674() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %519 = cast(meta[relay.Constant][44] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
    %520 = reshape(%519, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float32] */;
    %521 = @func_4118(%520) /* ty=(Tensor[(2, 9, 1), float32], Tensor[(2, 2, 13), float64], Tensor[(26, 2), float64]) */;
    %522 = @func_7445() /* ty=(Tensor[(15, 2, 13), uint64],) */;
    %523 = %522.0;
    %524 = cast(%523, dtype="float32") /* ty=Tensor[(15, 2, 13), float32] */;
    %525 = cast(meta[relay.Constant][45] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %526 = cast(%var_8138, dtype="uint32") /* ty=Tensor[(504, 2), uint32] */;
    %527 = reshape(%525, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %528 = reshape(%526, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
    %529 = @func_6284(%527, %528) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
    %530 = @func_7553() /* ty=Tensor[(15, 2, 13), float64] */;
    %531 = cast(%530, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
    %532 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
    %533 = cast(%523, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
    %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %535 = @func_7553() /* ty=Tensor[(15, 2, 13), float64] */;
    %536 = %518.0;
    %537 = %521.0;
    %538 = @func_6963() /* ty=Tensor[(15, 2, 13), float64] */;
    %539 = asinh(%524) /* ty=Tensor[(15, 2, 13), float32] */;
    %540 = %529.0;
    %541 = @func_7965() /* ty=Tensor[(15, 2, 13), float64] */;
    %542 = less_equal(%533, %534) /* ty=Tensor[(15, 2, 13), bool] */;
    (%535, %536, %537, meta[relay.Constant][44] /* ty=Tensor[(18), float32] */, %538, %539, %540, meta[relay.Constant][45] /* ty=Tensor[(126), uint32] */, %var_8138, %541, %542)
  };
  %543(%var_8150) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(2, 9, 1), float32], Tensor[(18), float32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float32], Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(504, 2), uint32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), bool]) */
}

def @func_10480(%var_10472: Tensor[(8, 2, 1), float64], %var_10473: Tensor[(8, 2, 1), float64]) -> Tensor[(8, 2, ?), float64] {
  %544 = cast(%var_10473, dtype="float64") /* ty=Tensor[(8, 2, 1), float64] */;
  %545 = shape_of(%var_10472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%var_10472, dtype="float64") /* ty=Tensor[(8, 2, 1), float64] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%546, %547) /* ty=Tensor[(8, 2, ?), float64] */
}

def @func_13686(%var_13684: Tensor[(11, 15), uint8]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 11, 1), uint8], Tensor[(11, 15), uint8]) {
  %548 = cast(%var_13684, dtype="uint8") /* ty=Tensor[(11, 15), uint8] */;
  %549 = reshape(%548, newshape=[15, 11, 1]) /* ty=Tensor[(15, 11, 1), uint8] */;
  %550 = @func_11156() /* ty=Tensor[(15, 2, 13), float64] */;
  %551 = @func_1272(%549) /* ty=Tensor[(15, 11, 1), uint8] */;
  (%550, %551, %var_13684)
}

def @func_13116() -> Tensor[(10, 6), bool] {
  @func_7007() /* ty=Tensor[(10, 6), bool] */
}

def @func_11607() -> (Tensor[(15, 2, 13), float64],) {
  @func_11605() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_13829() -> (Tensor[(15, 2, 13), float64],) {
  @func_13827() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_9130() -> (Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(1008), uint32]) {
  %552 = @func_6967() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %553 = cast(meta[relay.Constant][46] /* ty=Tensor[(1008), uint32] */, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
  %554 = reshape(%553, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
  %555 = @func_6413(%554) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %556 = %552.0;
  %557 = %555.2;
  (%556, %557, meta[relay.Constant][46] /* ty=Tensor[(1008), uint32] */)
}

def @func_11749(%var_11700: Tensor[(3, 12, 9), float64]) -> (Tensor[(3, 12, 9), int16], Tensor[(3, 12, 9), bool]) {
  %558 = cast(meta[relay.Constant][48] /* ty=Tensor[(3, 12, 9), float64] */, dtype="int16") /* ty=Tensor[(3, 12, 9), int16] */;
  %559 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(3, 12, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 12, 9), float64] */, dtype="int16") /* ty=Tensor[(3, 12, 9), int16] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %562 = cast(%var_11700, dtype="float64") /* ty=Tensor[(3, 12, 9), float64] */;
  %563 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(3, 12, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(3, 12, 9), float64] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %566 = floor_divide(%564, %565) /* ty=Tensor[(3, 12, 9), float64] */;
  %567 = cast(%566, dtype="float32") /* ty=Tensor[(3, 12, 9), float32] */;
  %568 = acosh(%567) /* ty=Tensor[(3, 12, 9), float32] */;
  %569 = cast(meta[relay.Constant][49] /* ty=Tensor[(3, 12, 9), float32] */, dtype="bool") /* ty=Tensor[(3, 12, 9), bool] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="bool") /* ty=Tensor[(3, 12, 9), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = maximum(%560, %561) /* ty=Tensor[(3, 12, 9), int16] */;
  %574 = not_equal(%571, %572) /* ty=Tensor[(3, 12, 9), bool] */;
  (%573, %574)
}

def @func_10098() -> (Tensor[(15, 2, 13), float64],) {
  %575 = @func_8197() /* ty=Tensor[(15, 2, 13), float64] */;
  (%575,)
}

def @func_4041(%var_4027: Tensor[(1, 9, 14), uint32], %var_4028: Tensor[(8, 9, 14), uint32]) -> (Tensor[(8, 9, 14), uint32], Tensor[(3, 13, 8), float32], Tensor[(312, 1), int64]) {
  %576 = cast(%var_4027, dtype="uint32") /* ty=Tensor[(1, 9, 14), uint32] */;
  %577 = cast(%var_4028, dtype="uint32") /* ty=Tensor[(8, 9, 14), uint32] */;
  %578 = cast(meta[relay.Constant][50] /* ty=Tensor[(312, 1), int64] */, dtype="int64") /* ty=Tensor[(312, 1), int64] */;
  %579 = cast(meta[relay.Constant][50] /* ty=Tensor[(312, 1), int64] */, dtype="int64") /* ty=Tensor[(312, 1), int64] */;
  %580 = reshape(%578, newshape=[3, 13, 8]) /* ty=Tensor[(3, 13, 8), int64] */;
  %581 = reshape(%579, newshape=[3, 13, 8]) /* ty=Tensor[(3, 13, 8), int64] */;
  %582 = maximum(%576, %577) /* ty=Tensor[(8, 9, 14), uint32] */;
  %583 = @func_2606(%580, %581) /* ty=Tensor[(3, 13, 8), float32] */;
  (%582, %583, meta[relay.Constant][50] /* ty=Tensor[(312, 1), int64] */)
}

def @func_6010(%var_6009: Tensor[(126, 1), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126, 1), uint32], Tensor[(1008), uint32], Tensor[(2, 9, 10), uint16], Tensor[(4, 10, 4), bool], Tensor[(3, 56), float32]) {
  %600 = fn (%var_5969: Tensor[(126, 1), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126, 1), uint32], Tensor[(1008), uint32], Tensor[(2, 9, 10), uint16], Tensor[(4, 10, 4), bool], Tensor[(3, 56), float32]) {
    %584 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %585 = cast(%var_5969, dtype="uint32") /* ty=Tensor[(126, 1), uint32] */;
    %586 = cast(meta[relay.Constant][51] /* ty=Tensor[(1008), uint32] */, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
    %587 = reshape(%585, newshape=[1, 9, 14]) /* ty=Tensor[(1, 9, 14), uint32] */;
    %588 = reshape(%586, newshape=[8, 9, 14]) /* ty=Tensor[(8, 9, 14), uint32] */;
    %589 = @func_4041(%587, %588) /* ty=(Tensor[(8, 9, 14), uint32], Tensor[(3, 13, 8), float32], Tensor[(312, 1), int64]) */;
    %590 = %584.0;
    %591 = cast(%590, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
    %592 = reshape(%591, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
    %593 = @func_5691(%592) /* ty=(Tensor[(2, 9, 10), uint16], Tensor[(90), uint16], Tensor[(180), uint16], Tensor[(15, 2, 13), bool]) */;
    %594 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 56), float32] */, dtype="float32") /* ty=Tensor[(3, 56), float32] */;
    %595 = reshape(%594, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %596 = @func_732(%595) /* ty=(Tensor[(4, 10, 4), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) */;
    %597 = %589.0;
    %598 = %593.0;
    %599 = %596.0;
    (%590, %597, %var_5969, meta[relay.Constant][51] /* ty=Tensor[(1008), uint32] */, %598, %599, meta[relay.Constant][52] /* ty=Tensor[(3, 56), float32] */)
  };
  %600(%var_6009) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126, 1), uint32], Tensor[(1008), uint32], Tensor[(2, 9, 10), uint16], Tensor[(4, 10, 4), bool], Tensor[(3, 56), float32]) */
}

def @func_11991() -> (Tensor[(126), uint32], Tensor[(168), float32], Tensor[(165), uint8], Tensor[(15, 2, 13), float64]) {
  @func_11989() /* ty=(Tensor[(126), uint32], Tensor[(168), float32], Tensor[(165), uint8], Tensor[(15, 2, 13), float64]) */
}

def @func_12897(%var_12896: Tensor[(4, 14, 2), uint64]) -> Tensor[(4, 14, 2), bool] {
  %603 = fn (%var_12886: Tensor[(4, 14, 2), uint64]) -> Tensor[(4, 14, 2), bool] {
    %601 = cast(meta[relay.Constant][53] /* ty=uint64 */, dtype="bool") /* ty=bool */;
    %602 = cast(%var_12886, dtype="bool") /* ty=Tensor[(4, 14, 2), bool] */;
    greater(%601, %602) /* ty=Tensor[(4, 14, 2), bool] */
  };
  %603(%var_12896) /* ty=Tensor[(4, 14, 2), bool] */
}

def @func_11527(%var_11525: Tensor[(15, 15, 6), float32], %var_11526: Tensor[(3360), float64]) -> (Tensor[(15, 15, 6), float32], Tensor[(312), int64], Tensor[(15, 15, 6), bool], Tensor[(15, 15, 6), float64], Tensor[(3360), float64], Tensor[(900), float32], Tensor[(3360), float64]) {
  %625 = fn (%var_11469: Tensor[(15, 15, 6), float32], %var_11520: Tensor[(3360), float64]) -> (Tensor[(15, 15, 6), float32], Tensor[(312), int64], Tensor[(15, 15, 6), bool], Tensor[(15, 15, 6), float64], Tensor[(3360), float64], Tensor[(900), float32], Tensor[(3360), float64]) {
    %604 = cast(%var_11469, dtype="float32") /* ty=Tensor[(15, 15, 6), float32] */;
    %605 = @func_11266() /* ty=(Tensor[(312), int64],) */;
    %606 = cast(%var_11469, dtype="float64") /* ty=Tensor[(15, 15, 6), float64] */;
    %607 = atan(%606) /* ty=Tensor[(15, 15, 6), float64] */;
    %608 = cast(%var_11469, dtype="bool") /* ty=Tensor[(15, 15, 6), bool] */;
    %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(%607, dtype="bool") /* ty=Tensor[(15, 15, 6), bool] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %612 = cast(%var_11469, dtype="float64") /* ty=Tensor[(15, 15, 6), float64] */;
    %613 = cast(meta[relay.Constant][54] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %614 = cast(meta[relay.Constant][54] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %615 = cast(%var_11520, dtype="float64") /* ty=Tensor[(3360), float64] */;
    %616 = reshape(%613, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
    %617 = reshape(%614, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
    %618 = reshape(%615, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
    %619 = @func_5919(%616, %617, %618) /* ty=(Tensor[(15, 4, 15), float32], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 16, 14), float64], Tensor[(3360), float64]) */;
    %620 = sigmoid(%604) /* ty=Tensor[(15, 15, 6), float32] */;
    %621 = %605.0;
    %622 = greater(%610, %611) /* ty=Tensor[(15, 15, 6), bool] */;
    %623 = asinh(%612) /* ty=Tensor[(15, 15, 6), float64] */;
    %624 = %619.4;
    (%620, %621, %622, %623, %624, meta[relay.Constant][54] /* ty=Tensor[(900), float32] */, %var_11520)
  };
  %625(%var_11525, %var_11526) /* ty=(Tensor[(15, 15, 6), float32], Tensor[(312), int64], Tensor[(15, 15, 6), bool], Tensor[(15, 15, 6), float64], Tensor[(3360), float64], Tensor[(900), float32], Tensor[(3360), float64]) */
}

def @func_11413() -> (Tensor[(126), uint32],) {
  %626 = @func_9130() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %627 = %626.1;
  (%627,)
}

def @func_8336(%var_8334: Tensor[(10, 1, 12), float64]) -> (Tensor[(10, 1, 12), float64], Tensor[(15, 2, 13), float64], Tensor[(126), uint32]) {
  @func_8333(%var_8334) /* ty=(Tensor[(10, 1, 12), float64], Tensor[(15, 2, 13), float64], Tensor[(126), uint32]) */
}

def @func_13525(%var_13524: Tensor[(168), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(312), int64], Tensor[(1500), float64], Tensor[(168), float32]) {
  %636 = fn (%var_13520: Tensor[(168), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(312), int64], Tensor[(1500), float64], Tensor[(168), float32]) {
    %628 = @func_11656() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %629 = cast(meta[relay.Constant][55] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
    %630 = cast(%var_13520, dtype="float32") /* ty=Tensor[(168), float32] */;
    %631 = reshape(%629, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
    %632 = reshape(%630, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %633 = @func_10460(%631, %632) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(60), uint8], Tensor[(18), float32], Tensor[(15, 2, 13), float64], Tensor[(6, 4), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(1500), float64], Tensor[(168), float32]) */;
    %634 = %628.0;
    %635 = %633.6;
    (%634, %635, meta[relay.Constant][55] /* ty=Tensor[(1500), float64] */, %var_13520)
  };
  %636(%var_13524) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(312), int64], Tensor[(1500), float64], Tensor[(168), float32]) */
}

def @func_8943() -> (Tensor[(15, 2, 13), uint64],) {
  %639 = fn () -> (Tensor[(15, 2, 13), uint64],) {
    %637 = @func_7445() /* ty=(Tensor[(15, 2, 13), uint64],) */;
    %638 = %637.0;
    (%638,)
  };
  %639() /* ty=(Tensor[(15, 2, 13), uint64],) */
}

def @func_9810(%var_9789: Tensor[(60), uint8], %var_9807: Tensor[(18), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(13, 1, 5), float32], Tensor[(65), float32], Tensor[(18, ?), int16], Tensor[(18), float32]) {
  %640 = cast(%var_9789, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %641 = reshape(%640, newshape=[10, 6]) /* ty=Tensor[(10, 6), uint8] */;
  %642 = @func_5503(%641) /* ty=(Tensor[(10, 6), bool],) */;
  %643 = cast(meta[relay.Constant][56] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %644 = reshape(%643, newshape=[13, 1, 5]) /* ty=Tensor[(13, 1, 5), float32] */;
  %645 = @func_4518(%644) /* ty=(Tensor[(13, 1, 5), float32],) */;
  %646 = cast(%var_9807, dtype="float32") /* ty=Tensor[(18), float32] */;
  %647 = reshape(%646, newshape=[18, 1]) /* ty=Tensor[(18, 1), float32] */;
  %648 = @func_7225(%647) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(2, 2, 13), float64], Tensor[(180), uint16], Tensor[(18, 4), float32], Tensor[(60), uint8], Tensor[(18, ?), int16], Tensor[(18, 1), float32], Tensor[(18, 1), float32]) */;
  %649 = @func_8197() /* ty=Tensor[(15, 2, 13), float64] */;
  %650 = %642.0;
  %651 = %645.0;
  %652 = %648.5;
  (%649, %650, %var_9789, %651, meta[relay.Constant][56] /* ty=Tensor[(65), float32] */, %652, %var_9807)
}

def @func_5617() -> (Tensor[(15, 2, 13), float64],) {
  @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_13155() -> Tensor[(126), float64] {
  %653 = @func_9422() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(4, 3, 14), int16], Tensor[(168), float64], Tensor[(126), uint32], Tensor[(1008), uint32], Tensor[(26, 2), float64], Tensor[(3, 6), float32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) */;
  %654 = %653.3;
  %655 = cast(%654, dtype="float64") /* ty=Tensor[(126), float64] */;
  sinh(%655) /* ty=Tensor[(126), float64] */
}

def @func_10414() -> (Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(140), int64]) {
  @func_10412() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(140), int64]) */
}

def @func_2068(%var_2066: Tensor[(4, 2, 16), uint32], %var_2067: Tensor[(4, 2, 16), uint32]) -> Tensor[(4, 2, 16), float64] {
  @func_2064(%var_2066, %var_2067) /* ty=Tensor[(4, 2, 16), float64] */
}

def @func_8251() -> (Tensor[(15, 2, 13), float64],) {
  %656 = @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %657 = %656.0;
  (%657,)
}

def @func_5505(%var_5504: Tensor[(10, 6), uint8]) -> (Tensor[(10, 6), bool],) {
  %663 = fn (%var_5498: Tensor[(10, 6), uint8]) -> (Tensor[(10, 6), bool],) {
    %658 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 6), uint8] */, dtype="bool") /* ty=Tensor[(10, 6), bool] */;
    %659 = shape_of(%var_5498, dtype="int32") /* ty=Tensor[(2), int32] */;
    %660 = cast(%var_5498, dtype="bool") /* ty=Tensor[(10, 6), bool] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %662 = not_equal(%660, %661) /* ty=Tensor[(10, 6), bool] */;
    (%662,)
  };
  %663(%var_5504) /* ty=(Tensor[(10, 6), bool],) */
}

def @func_11871() -> Tensor[(126), uint32] {
  @func_11869() /* ty=Tensor[(126), uint32] */
}

def @func_11914(%var_11893: Tensor[(2, 8), float64], %var_11906: Tensor[(390), float64]) -> (Tensor[(10, 6), bool], Tensor[(8, 2, ?), float64], Tensor[(2, 8), float64], Tensor[(15, 11, 1), uint8], Tensor[(390), float64]) {
  %664 = cast(%var_11893, dtype="float64") /* ty=Tensor[(2, 8), float64] */;
  %665 = cast(%var_11893, dtype="float64") /* ty=Tensor[(2, 8), float64] */;
  %666 = reshape(%664, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), float64] */;
  %667 = reshape(%665, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), float64] */;
  %668 = cast(%var_11906, dtype="float64") /* ty=Tensor[(390), float64] */;
  %669 = reshape(%668, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
  %670 = @func_10874(%669) /* ty=(Tensor[(15, 2, 13), bool], Tensor[(15, 11, 1), uint8], Tensor[(165, 1), uint8]) */;
  %671 = @func_7007() /* ty=Tensor[(10, 6), bool] */;
  %672 = @func_10480(%666, %667) /* ty=Tensor[(8, 2, ?), float64] */;
  %673 = %670.1;
  (%671, %672, %var_11893, %673, %var_11906)
}

def @func_6855() -> Tensor[(15, 2, 13), float64] {
  %674 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %674.0
}

def @func_7225(%var_7202: Tensor[(18, 1), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(2, 2, 13), float64], Tensor[(180), uint16], Tensor[(18, 4), float32], Tensor[(60), uint8], Tensor[(18, ?), int16], Tensor[(18, 1), float32], Tensor[(18, 1), float32]) {
  %675 = @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %676 = cast(meta[relay.Constant][58] /* ty=Tensor[(18, 1), float32] */, dtype="float32") /* ty=Tensor[(18, 1), float32] */;
  %677 = reshape(%676, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float32] */;
  %678 = @func_4118(%677) /* ty=(Tensor[(2, 9, 1), float32], Tensor[(2, 2, 13), float64], Tensor[(26, 2), float64]) */;
  %679 = %675.0;
  %680 = cast(%679, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %681 = reshape(%680, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
  %682 = @func_5691(%681) /* ty=(Tensor[(2, 9, 10), uint16], Tensor[(90), uint16], Tensor[(180), uint16], Tensor[(15, 2, 13), bool]) */;
  %683 = cast(meta[relay.Constant][58] /* ty=Tensor[(18, 1), float32] */, dtype="float32") /* ty=Tensor[(18, 1), float32] */;
  %684 = sqrt(%683) /* ty=Tensor[(18, 1), float32] */;
  %685 = cast(%684, dtype="uint32") /* ty=Tensor[(18, 1), uint32] */;
  %686 = cast(meta[relay.Constant][59] /* ty=Tensor[(18, 4), float32] */, dtype="uint32") /* ty=Tensor[(18, 4), uint32] */;
  %687 = bitwise_and(%685, %686) /* ty=Tensor[(18, 4), uint32] */;
  %688 = cast(%687, dtype="float32") /* ty=Tensor[(18, 4), float32] */;
  %689 = cast(%684, dtype="float32") /* ty=Tensor[(18, 1), float32] */;
  %690 = @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */;
  %691 = cast(%var_7202, dtype="int16") /* ty=Tensor[(18, 1), int16] */;
  %692 = shape_of(%684, dtype="int32") /* ty=Tensor[(2), int32] */;
  %693 = cast(%684, dtype="int16") /* ty=Tensor[(18, 1), int16] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %695 = cast(%684, dtype="float64") /* ty=Tensor[(18, 1), float64] */;
  %696 = acosh(%695) /* ty=Tensor[(18, 1), float64] */;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(18, 1), float64] */;
  %698 = cosh(%697) /* ty=Tensor[(18, 1), float64] */;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(18, 1), float32] */;
  %700 = cast(%698, dtype="float32") /* ty=Tensor[(18, 1), float32] */;
  %701 = %678.1;
  %702 = %682.2;
  %703 = minimum(%688, %689) /* ty=Tensor[(18, 4), float32] */;
  %704 = %690.2;
  %705 = bitwise_xor(%693, %694) /* ty=Tensor[(18, ?), int16] */;
  %706 = sigmoid(%699) /* ty=Tensor[(18, 1), float32] */;
  %707 = asin(%700) /* ty=Tensor[(18, 1), float32] */;
  (%679, %701, %702, %703, %704, %705, %706, %707)
}

def @func_7331(%var_7329: Tensor[(63, 2), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(63, 2), uint32], Tensor[(1008), uint32], Tensor[(3, 2, 11), uint32], uint32, Tensor[(66), uint32], Tensor[(1, 312), int64]) {
  @func_7328(%var_7329) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(63, 2), uint32], Tensor[(1008), uint32], Tensor[(3, 2, 11), uint32], uint32, Tensor[(66), uint32], Tensor[(1, 312), int64]) */
}

def @func_9423() -> (Tensor[(15, 2, 13), float64], Tensor[(4, 3, 14), int16], Tensor[(168), float64], Tensor[(126), uint32], Tensor[(1008), uint32], Tensor[(26, 2), float64], Tensor[(3, 6), float32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
  %724 = fn () -> (Tensor[(15, 2, 13), float64], Tensor[(4, 3, 14), int16], Tensor[(168), float64], Tensor[(126), uint32], Tensor[(1008), uint32], Tensor[(26, 2), float64], Tensor[(3, 6), float32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
    %708 = @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %709 = cast(meta[relay.Constant][60] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %710 = reshape(%709, newshape=[4, 3, 14]) /* ty=Tensor[(4, 3, 14), float64] */;
    %711 = @func_4834(%710) /* ty=(Tensor[(4, 3, 14), int16],) */;
    %712 = cast(meta[relay.Constant][61] /* ty=Tensor[(1008), uint32] */, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
    %713 = reshape(%712, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
    %714 = @func_6413(%713) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
    %715 = cast(meta[relay.Constant][62] /* ty=Tensor[(3, 6), float32] */, dtype="float32") /* ty=Tensor[(3, 6), float32] */;
    %716 = reshape(%715, newshape=[2, 9, 1]) /* ty=Tensor[(2, 9, 1), float32] */;
    %717 = @func_4118(%716) /* ty=(Tensor[(2, 9, 1), float32], Tensor[(2, 2, 13), float64], Tensor[(26, 2), float64]) */;
    %718 = %708.0;
    %719 = %711.0;
    %720 = %714.2;
    %721 = %717.2;
    %722 = @func_6963() /* ty=Tensor[(15, 2, 13), float64] */;
    %723 = @func_6207() /* ty=Tensor[(15, 2, 13), float64] */;
    (%718, %719, meta[relay.Constant][60] /* ty=Tensor[(168), float64] */, %720, meta[relay.Constant][61] /* ty=Tensor[(1008), uint32] */, %721, meta[relay.Constant][62] /* ty=Tensor[(3, 6), float32] */, %722, %723)
  };
  %724() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(4, 3, 14), int16], Tensor[(168), float64], Tensor[(126), uint32], Tensor[(1008), uint32], Tensor[(26, 2), float64], Tensor[(3, 6), float32], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) */
}

def @func_12673() -> (Tensor[(15, 2, 13), float64], Tensor[(63, 2), uint16]) {
  @func_12671() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(63, 2), uint16]) */
}

def @func_7228(%var_7226: Tensor[(18, 1), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(2, 2, 13), float64], Tensor[(180), uint16], Tensor[(18, 4), float32], Tensor[(60), uint8], Tensor[(18, ?), int16], Tensor[(18, 1), float32], Tensor[(18, 1), float32]) {
  @func_7225(%var_7226) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(2, 2, 13), float64], Tensor[(180), uint16], Tensor[(18, 4), float32], Tensor[(60), uint8], Tensor[(18, ?), int16], Tensor[(18, 1), float32], Tensor[(18, 1), float32]) */
}

def @func_13655(%var_13654: Tensor[(60, 2), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(8, 1, 15), float32], Tensor[(60, 2), float32], Tensor[(15, 2, 13), float64]) {
  %732 = fn (%var_13646: Tensor[(60, 2), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(8, 1, 15), float32], Tensor[(60, 2), float32], Tensor[(15, 2, 13), float64]) {
    %725 = cast(%var_13646, dtype="float32") /* ty=Tensor[(60, 2), float32] */;
    %726 = reshape(%725, newshape=[8, 1, 15]) /* ty=Tensor[(8, 1, 15), float32] */;
    %727 = @func_4718(%726) /* ty=(Tensor[(8, 1, 15), float32],) */;
    %728 = @func_10292() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %729 = @func_11156() /* ty=Tensor[(15, 2, 13), float64] */;
    %730 = %727.0;
    %731 = %728.0;
    (%729, %730, %var_13646, %731)
  };
  %732(%var_13654) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 1, 15), float32], Tensor[(60, 2), float32], Tensor[(15, 2, 13), float64]) */
}

def @func_10498() -> Tensor[(15, 2, 13), float64] {
  @func_10496() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_8444(%var_8420: Tensor[(24), float64], %var_8429: Tensor[(6, 52), int64]) -> (Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(10, 15, 10), float32], Tensor[(1500), float64], Tensor[(6, 52), int64], Tensor[(15, 2, 13), float64]) {
  %733 = cast(%var_8420, dtype="float64") /* ty=Tensor[(24), float64] */;
  %734 = reshape(%733, newshape=[1, 2, 12]) /* ty=Tensor[(1, 2, 12), float64] */;
  %735 = cast(meta[relay.Constant][63] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %736 = cast(%var_8429, dtype="int64") /* ty=Tensor[(6, 52), int64] */;
  %737 = reshape(%735, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %738 = reshape(%736, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %739 = @func_6622(%737, %738) /* ty=(Tensor[(60), uint8], Tensor[(10, 15, 10), float32], Tensor[(390), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64]) */;
  %740 = @func_6855() /* ty=Tensor[(15, 2, 13), float64] */;
  %741 = cast(%740, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %742 = @func_5153(%734) /* ty=Tensor[(?, 2, 12), float32] */;
  %743 = %739.1;
  %744 = exp(%741) /* ty=Tensor[(15, 2, 13), float64] */;
  (%742, %var_8420, %743, meta[relay.Constant][63] /* ty=Tensor[(1500), float64] */, %var_8429, %744)
}

def @func_9556(%var_9553: Tensor[(90), uint16], %var_9554: Tensor[(180), uint16]) -> (Tensor[(15, 2, 13), float64], Tensor[(165), uint8], Tensor[(90), uint16], Tensor[(180), uint16]) {
  %745 = @func_7588() /* ty=Tensor[(15, 2, 13), float64] */;
  %746 = cast(%745, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %747 = cast(%var_9553, dtype="uint16") /* ty=Tensor[(90), uint16] */;
  %748 = cast(%var_9554, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %749 = reshape(%747, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), uint16] */;
  %750 = reshape(%748, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), uint16] */;
  %751 = @func_2320(%749, %750) /* ty=(Tensor[(2, 9, 10), uint16], Tensor[(12, 7, 2), bool], Tensor[(140), int64], Tensor[(15, 11, 1), uint8], Tensor[(165), uint8]) */;
  %752 = log2(%746) /* ty=Tensor[(15, 2, 13), float64] */;
  %753 = %751.4;
  (%752, %753, %var_9553, %var_9554)
}

def @func_8851() -> (Tensor[(15, 2, 13), float64],) {
  %756 = fn () -> (Tensor[(15, 2, 13), float64],) {
    %754 = @func_6967() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %755 = %754.0;
    (%755,)
  };
  %756() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_13183() -> Tensor[(15, 2, 13), float64] {
  @func_11616() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_13342(%var_13338: Tensor[(252, 4), uint32]) -> (Tensor[(5, 14, 8), float32], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(252, 4), uint32]) {
  %757 = cast(meta[relay.Constant][64] /* ty=Tensor[(5, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(5, 14, 8), float32] */;
  %758 = cast(meta[relay.Constant][65] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %759 = cast(%var_13338, dtype="uint32") /* ty=Tensor[(252, 4), uint32] */;
  %760 = reshape(%758, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %761 = reshape(%759, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
  %762 = @func_6284(%760, %761) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %763 = log(%757) /* ty=Tensor[(5, 14, 8), float32] */;
  %764 = %762.2;
  (%763, %764, meta[relay.Constant][65] /* ty=Tensor[(126), uint32] */, %var_13338)
}

def @func_4834(%var_4784: Tensor[(4, 3, 14), float64]) -> (Tensor[(4, 3, 14), int16],) {
  %765 = cast(%var_4784, dtype="float64") /* ty=Tensor[(4, 3, 14), float64] */;
  %766 = sqrt(%765) /* ty=Tensor[(4, 3, 14), float64] */;
  %767 = cast(%var_4784, dtype="float32") /* ty=Tensor[(4, 3, 14), float32] */;
  %768 = cast(%var_4784, dtype="float32") /* ty=Tensor[(4, 3, 14), float32] */;
  %769 = reshape(%767, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %770 = reshape(%768, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %771 = @func_271(%769, %770) /* ty=Tensor[(12, 7, 2), bool] */;
  %772 = cast(%771, dtype="int16") /* ty=Tensor[(12, 7, 2), int16] */;
  %773 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%766, dtype="int16") /* ty=Tensor[(4, 3, 14), int16] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %776 = multiply(%774, %775) /* ty=Tensor[(4, 3, 14), int16] */;
  (%776,)
}

def @func_13784() -> Tensor[(15, 2, 13), uint64] {
  @func_13782() /* ty=Tensor[(15, 2, 13), uint64] */
}

def @func_13741() -> Tensor[(126), uint32] {
  @func_11869() /* ty=Tensor[(126), uint32] */
}

def @func_12131() -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
  @func_12129() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) */
}

def @func_11157() -> Tensor[(15, 2, 13), float64] {
  %778 = fn () -> Tensor[(15, 2, 13), float64] {
    %777 = @func_10412() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(140), int64]) */;
    %777.0
  };
  %778() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_4518(%var_4510: Tensor[(13, 1, 5), float32]) -> (Tensor[(13, 1, 5), float32],) {
  %779 = cast(%var_4510, dtype="float32") /* ty=Tensor[(13, 1, 5), float32] */;
  %780 = atanh(%779) /* ty=Tensor[(13, 1, 5), float32] */;
  (%780,)
}

def @func_13221() -> (Tensor[(1008), uint32],) {
  @func_13219() /* ty=(Tensor[(1008), uint32],) */
}

def @func_6857() -> Tensor[(15, 2, 13), float64] {
  @func_6855() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_11752(%var_11750: Tensor[(3, 12, 9), float64]) -> (Tensor[(3, 12, 9), int16], Tensor[(3, 12, 9), bool]) {
  @func_11749(%var_11750) /* ty=(Tensor[(3, 12, 9), int16], Tensor[(3, 12, 9), bool]) */
}

def @main(%var_13914: Tensor[(150), float64], %var_13930: Tensor[(1500), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(1764), float64], Tensor[(150), float64], Tensor[(1500), float64]) {
  %781 = @func_9679() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) */;
  %782 = cast(%var_13914, dtype="float64") /* ty=Tensor[(150), float64] */;
  %783 = cast(meta[relay.Constant][66] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %784 = reshape(%782, newshape=[150, 1]) /* ty=Tensor[(150, 1), float64] */;
  %785 = reshape(%783, newshape=[750, 2]) /* ty=Tensor[(750, 2), float64] */;
  %786 = @func_12374(%784, %785) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(150, 1), float64], Tensor[(750, 2), float64], Tensor[(10, 16, 5), float64], Tensor[(14, 14, 9), float64], Tensor[(1764), float64], Tensor[(15, 2, 13), float64], Tensor[(10, 15, 800), uint8]) */;
  %787 = cast(%var_13930, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %788 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(1500), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %789 = cast(meta[relay.Constant][66] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?), float64] */;
  %791 = %781.1;
  %792 = %786.5;
  %793 = floor_mod(%789, %790) /* ty=Tensor[(1500), float64] */;
  (%791, %792, %var_13914, %793)
}

def @func_2900(%var_2898: Tensor[(10, 15, 1), float64], %var_2899: Tensor[(10, 15, 10), float64]) -> (Tensor[(10, 15, ?), float64], Tensor[(10, 15, 10), float32]) {
  %809 = fn (%var_2882: Tensor[(10, 15, 1), float64], %var_2893: Tensor[(10, 15, 10), float64]) -> (Tensor[(10, 15, ?), float64], Tensor[(10, 15, 10), float32]) {
    %794 = cast(%var_2882, dtype="float64") /* ty=Tensor[(10, 15, 1), float64] */;
    %795 = acos(%794) /* ty=Tensor[(10, 15, 1), float64] */;
    %796 = cast(%var_2882, dtype="float64") /* ty=Tensor[(10, 15, 1), float64] */;
    %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(3), int32] */;
    %798 = cast(%795, dtype="float64") /* ty=Tensor[(10, 15, 1), float64] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %800 = floor_divide(%798, %799) /* ty=Tensor[(10, 15, ?), float64] */;
    %801 = cast(%795, dtype="float64") /* ty=Tensor[(10, 15, 1), float64] */;
    %802 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
    %803 = cast(%800, dtype="float64") /* ty=Tensor[(10, 15, ?), float64] */;
    %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %805 = cast(%var_2882, dtype="float32") /* ty=Tensor[(10, 15, 1), float32] */;
    %806 = cast(%var_2893, dtype="float32") /* ty=Tensor[(10, 15, 10), float32] */;
    %807 = floor_mod(%803, %804) /* ty=Tensor[(10, 15, ?), float64] */;
    %808 = floor_mod(%805, %806) /* ty=Tensor[(10, 15, 10), float32] */;
    (%807, %808)
  };
  %809(%var_2898, %var_2899) /* ty=(Tensor[(10, 15, ?), float64], Tensor[(10, 15, 10), float32]) */
}

def @func_4045(%var_4043: Tensor[(1, 9, 14), uint32], %var_4044: Tensor[(8, 9, 14), uint32]) -> (Tensor[(8, 9, 14), uint32], Tensor[(3, 13, 8), float32], Tensor[(312, 1), int64]) {
  @func_4041(%var_4043, %var_4044) /* ty=(Tensor[(8, 9, 14), uint32], Tensor[(3, 13, 8), float32], Tensor[(312, 1), int64]) */
}

def @func_2610(%var_2608: Tensor[(3, 13, 8), int64], %var_2609: Tensor[(3, 13, 8), int64]) -> Tensor[(3, 13, 8), float32] {
  @func_2606(%var_2608, %var_2609) /* ty=Tensor[(3, 13, 8), float32] */
}

def @func_9679() -> (Tensor[(15, 2, 13), uint64], Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) {
  @func_9677() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) */
}

def @func_10100() -> (Tensor[(15, 2, 13), float64],) {
  @func_10098() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_9746() -> Tensor[(15, 2, 13), float64] {
  @func_6207() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_11221() -> (Tensor[(10, 6), bool],) {
  %810 = @func_8834() /* ty=(Tensor[(10, 6), bool],) */;
  %811 = %810.0;
  (%811,)
}

def @func_6964() -> Tensor[(15, 2, 13), float64] {
  %813 = fn () -> Tensor[(15, 2, 13), float64] {
    %812 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %812.0
  };
  %813() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_7009() -> Tensor[(10, 6), bool] {
  @func_7007() /* ty=Tensor[(10, 6), bool] */
}

def @func_7447() -> (Tensor[(15, 2, 13), uint64],) {
  @func_7445() /* ty=(Tensor[(15, 2, 13), uint64],) */
}

def @func_7886(%var_7885: Tensor[(140, 24), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 4, 15), float32], Tensor[(900), float32], Tensor[(140, 24), float64], Tensor[(15, 2, 13), float64]) {
  %825 = fn (%var_7862: Tensor[(140, 24), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 4, 15), float32], Tensor[(900), float32], Tensor[(140, 24), float64], Tensor[(15, 2, 13), float64]) {
    %814 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %815 = cast(meta[relay.Constant][67] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %816 = cast(meta[relay.Constant][67] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %817 = cast(%var_7862, dtype="float64") /* ty=Tensor[(140, 24), float64] */;
    %818 = reshape(%815, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
    %819 = reshape(%816, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
    %820 = reshape(%817, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
    %821 = @func_5919(%818, %819, %820) /* ty=(Tensor[(15, 4, 15), float32], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 16, 14), float64], Tensor[(3360), float64]) */;
    %822 = %814.0;
    %823 = %821.0;
    %824 = @func_6207() /* ty=Tensor[(15, 2, 13), float64] */;
    (%822, %823, meta[relay.Constant][67] /* ty=Tensor[(900), float32] */, %var_7862, %824)
  };
  %825(%var_7885) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 4, 15), float32], Tensor[(900), float32], Tensor[(140, 24), float64], Tensor[(15, 2, 13), float64]) */
}

def @func_12624(%var_12617: Tensor[(4, 10, 16), uint16], %var_12618: Tensor[(4, 10, 16), uint16]) -> (Tensor[(4, 10, 16), uint16],) {
  %826 = cast(%var_12618, dtype="uint16") /* ty=Tensor[(4, 10, 16), uint16] */;
  %827 = shape_of(%var_12617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %828 = cast(%var_12617, dtype="uint16") /* ty=Tensor[(4, 10, 16), uint16] */;
  %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %830 = add(%828, %829) /* ty=Tensor[(4, 10, 16), uint16] */;
  (%830,)
}

def @func_13185() -> Tensor[(15, 2, 13), float64] {
  @func_13183() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_4120(%var_4119: Tensor[(2, 9, 1), float32]) -> (Tensor[(2, 9, 1), float32], Tensor[(2, 2, 13), float64], Tensor[(26, 2), float64]) {
  %837 = fn (%var_4102: Tensor[(2, 9, 1), float32]) -> (Tensor[(2, 9, 1), float32], Tensor[(2, 2, 13), float64], Tensor[(26, 2), float64]) {
    %831 = cast(%var_4102, dtype="float32") /* ty=Tensor[(2, 9, 1), float32] */;
    %832 = cast(meta[relay.Constant][68] /* ty=Tensor[(26, 2), float64] */, dtype="float64") /* ty=Tensor[(26, 2), float64] */;
    %833 = reshape(%832, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), float64] */;
    %834 = @func_3926(%833) /* ty=(Tensor[(2, 2, 13), float64], Tensor[(12, 5, 15), float32], Tensor[(900), float32], Tensor[(3, 13, 8), float32], Tensor[(312), int64], Tensor[(12, 7, 2), bool], Tensor[(6, 28), float32]) */;
    %835 = acosh(%831) /* ty=Tensor[(2, 9, 1), float32] */;
    %836 = %834.0;
    (%835, %836, meta[relay.Constant][68] /* ty=Tensor[(26, 2), float64] */)
  };
  %837(%var_4119) /* ty=(Tensor[(2, 9, 1), float32], Tensor[(2, 2, 13), float64], Tensor[(26, 2), float64]) */
}

def @func_7554() -> Tensor[(15, 2, 13), float64] {
  %839 = fn () -> Tensor[(15, 2, 13), float64] {
    %838 = @func_6967() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %838.0
  };
  %839() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_13252() -> Tensor[(15, 2, 13), float64] {
  %841 = fn () -> Tensor[(15, 2, 13), float64] {
    %840 = @func_7037() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %840.0
  };
  %841() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_13594(%var_13592: uint32, %var_13593: Tensor[(312), int64]) -> (Tensor[(15, 2, 13), float64], Tensor[(126, ?), int8], Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(150), float64], uint32, Tensor[(11, 6), uint32], Tensor[(312), int64]) {
  %864 = fn (%var_13579: uint32, %var_13581: Tensor[(312), int64]) -> (Tensor[(15, 2, 13), float64], Tensor[(126, ?), int8], Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(150), float64], uint32, Tensor[(11, 6), uint32], Tensor[(312), int64]) {
    %842 = @func_11438() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(60), uint8]) */;
    %843 = cast(meta[relay.Constant][69] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %844 = reshape(%843, newshape=[126, 1]) /* ty=Tensor[(126, 1), uint32] */;
    %845 = @func_6008(%844) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126, 1), uint32], Tensor[(1008), uint32], Tensor[(2, 9, 10), uint16], Tensor[(4, 10, 4), bool], Tensor[(3, 56), float32]) */;
    %846 = %845.2;
    %847 = cast(meta[relay.Constant][69] /* ty=Tensor[(126), uint32] */, dtype="int8") /* ty=Tensor[(126), int8] */;
    %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(2), int32] */;
    %849 = cast(%846, dtype="int8") /* ty=Tensor[(126, 1), int8] */;
    %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %851 = @func_10412() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(140), int64]) */;
    %852 = cast(%var_13579, dtype="uint32") /* ty=uint32 */;
    %853 = cast(meta[relay.Constant][70] /* ty=Tensor[(11, 6), uint32] */, dtype="uint32") /* ty=Tensor[(11, 6), uint32] */;
    %854 = cast(%var_13581, dtype="int64") /* ty=Tensor[(312), int64] */;
    %855 = reshape(%852, newshape=[]) /* ty=uint32 */;
    %856 = reshape(%853, newshape=[66]) /* ty=Tensor[(66), uint32] */;
    %857 = reshape(%854, newshape=[156, 2]) /* ty=Tensor[(156, 2), int64] */;
    %858 = @func_6176(%855, %856, %857) /* ty=(Tensor[(3, 2, 11), uint32], Tensor[(66), uint32], Tensor[(15, 2, 13), int64], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(156, 2), int64], Tensor[(10, 15, ?), float64]) */;
    %859 = %842.0;
    %860 = bitwise_or(%849, %850) /* ty=Tensor[(126, ?), int8] */;
    %861 = @func_7553() /* ty=Tensor[(15, 2, 13), float64] */;
    %862 = %851.1;
    %863 = %858.4;
    (%859, %860, %861, %862, %863, %var_13579, meta[relay.Constant][70] /* ty=Tensor[(11, 6), uint32] */, %var_13581)
  };
  %864(%var_13592, %var_13593) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126, ?), int8], Tensor[(15, 2, 13), float64], Tensor[(168), float32], Tensor[(150), float64], uint32, Tensor[(11, 6), uint32], Tensor[(312), int64]) */
}

def @func_10525() -> (Tensor[(24), float64],) {
  %865 = @func_10381() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(24), float64], Tensor[(312), int64]) */;
  %866 = %865.1;
  (%866,)
}

def @func_13481() -> (Tensor[(15, 2, 13), float64],) {
  %869 = fn () -> (Tensor[(15, 2, 13), float64],) {
    %867 = @func_7674() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %868 = %867.0;
    (%868,)
  };
  %869() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_8198() -> Tensor[(15, 2, 13), float64] {
  %870 = fn () -> Tensor[(15, 2, 13), float64] {
    @func_6207() /* ty=Tensor[(15, 2, 13), float64] */
  };
  %870() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_6692(%var_6676: Tensor[(9, 14, 3), float32]) -> (Tensor[(9, 14, 3), float32],) {
  %871 = cast(%var_6676, dtype="float32") /* ty=Tensor[(9, 14, 3), float32] */;
  %872 = log(%871) /* ty=Tensor[(9, 14, 3), float32] */;
  (%872,)
}

def @func_10646(%var_10645: Tensor[(10, 7, 10), float64]) -> (Tensor[(10, 7, 10), float64],) {
  %875 = fn (%var_10636: Tensor[(10, 7, 10), float64]) -> (Tensor[(10, 7, 10), float64],) {
    %873 = cast(%var_10636, dtype="float64") /* ty=Tensor[(10, 7, 10), float64] */;
    %874 = exp(%873) /* ty=Tensor[(10, 7, 10), float64] */;
    (%874,)
  };
  %875(%var_10645) /* ty=(Tensor[(10, 7, 10), float64],) */
}

def @func_12091() -> (Tensor[(15, 2, 13), float64],) {
  @func_12089() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_8607(%var_8606: Tensor[(14, 14, 9), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
  %880 = fn (%var_8600: Tensor[(14, 14, 9), float64]) -> (Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) {
    %876 = cast(%var_8600, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
    %877 = cast(%var_8600, dtype="float64") /* ty=Tensor[(14, 14, 9), float64] */;
    %878 = atan(%876) /* ty=Tensor[(14, 14, 9), float64] */;
    %879 = cosh(%877) /* ty=Tensor[(14, 14, 9), float64] */;
    (%878, %879)
  };
  %880(%var_8606) /* ty=(Tensor[(14, 14, 9), float64], Tensor[(14, 14, 9), float64]) */
}

def @func_5887(%var_5886: Tensor[(150), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64]) {
  %889 = fn (%var_5882: Tensor[(150), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64]) {
    %881 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %882 = cast(%var_5882, dtype="float64") /* ty=Tensor[(150), float64] */;
    %883 = cast(meta[relay.Constant][71] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
    %884 = reshape(%882, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), float64] */;
    %885 = reshape(%883, newshape=[10, 15, 10]) /* ty=Tensor[(10, 15, 10), float64] */;
    %886 = @func_2897(%884, %885) /* ty=(Tensor[(10, 15, ?), float64], Tensor[(10, 15, 10), float32]) */;
    %887 = %881.0;
    %888 = %886.1;
    (%887, %888, %var_5882, meta[relay.Constant][71] /* ty=Tensor[(1500), float64] */)
  };
  %889(%var_5886) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64]) */
}

def @func_887(%var_885: Tensor[(5, 14, 2), int64]) -> (Tensor[(5, 14, 2), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) {
  @func_884(%var_885) /* ty=(Tensor[(5, 14, 2), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) */
}

def @func_13499() -> (Tensor[(10, 6), bool],) {
  %892 = fn () -> (Tensor[(10, 6), bool],) {
    %890 = @func_10957() /* ty=(Tensor[(10, 6), bool],) */;
    %891 = %890.0;
    (%891,)
  };
  %892() /* ty=(Tensor[(10, 6), bool],) */
}

def @func_7328(%var_7299: Tensor[(63, 2), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(63, 2), uint32], Tensor[(1008), uint32], Tensor[(3, 2, 11), uint32], uint32, Tensor[(66), uint32], Tensor[(1, 312), int64]) {
  %893 = @func_6967() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %894 = cast(%var_7299, dtype="uint32") /* ty=Tensor[(63, 2), uint32] */;
  %895 = cast(meta[relay.Constant][72] /* ty=Tensor[(1008), uint32] */, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
  %896 = reshape(%894, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %897 = reshape(%895, newshape=[1008]) /* ty=Tensor[(1008), uint32] */;
  %898 = @func_6903(%896, %897) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */;
  %899 = cast(meta[relay.Constant][73] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %900 = cast(meta[relay.Constant][74] /* ty=Tensor[(66), uint32] */, dtype="uint32") /* ty=Tensor[(66), uint32] */;
  %901 = cast(meta[relay.Constant][75] /* ty=Tensor[(1, 312), int64] */, dtype="int64") /* ty=Tensor[(1, 312), int64] */;
  %902 = reshape(%899, newshape=[]) /* ty=uint32 */;
  %903 = reshape(%900, newshape=[66]) /* ty=Tensor[(66), uint32] */;
  %904 = reshape(%901, newshape=[156, 2]) /* ty=Tensor[(156, 2), int64] */;
  %905 = @func_6176(%902, %903, %904) /* ty=(Tensor[(3, 2, 11), uint32], Tensor[(66), uint32], Tensor[(15, 2, 13), int64], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(156, 2), int64], Tensor[(10, 15, ?), float64]) */;
  %906 = %893.0;
  %907 = %898.2;
  %908 = %905.0;
  (%906, %907, %var_7299, meta[relay.Constant][72] /* ty=Tensor[(1008), uint32] */, %908, meta[relay.Constant][73] /* ty=uint32 */, meta[relay.Constant][74] /* ty=Tensor[(66), uint32] */, meta[relay.Constant][75] /* ty=Tensor[(1, 312), int64] */)
}

def @func_12751(%var_12741: Tensor[(10, 6, 14), float32], %var_12742: Tensor[(10, 6, 14), float32]) -> Tensor[(10, 6, 14), bool] {
  %909 = cast(%var_12742, dtype="bool") /* ty=Tensor[(10, 6, 14), bool] */;
  %910 = shape_of(%var_12741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %911 = cast(%var_12741, dtype="bool") /* ty=Tensor[(10, 6, 14), bool] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%911, %912) /* ty=Tensor[(10, 6, 14), bool] */
}

def @func_7630(%var_7612: Tensor[(1500), float64], %var_7613: Tensor[(312), int64], %var_7625: Tensor[(168), float32]) -> (Tensor[(15, 2, 13), float32], Tensor[(3, 13, 8), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(4, 10, 4), bool], Tensor[(168), float32]) {
  %913 = @func_6809() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(9, 14, 3), float32], Tensor[(378), float32], Tensor[(15, 2, 13), float64]) */;
  %914 = %913.5;
  %915 = cast(%914, dtype="float32") /* ty=Tensor[(15, 2, 13), float32] */;
  %916 = sqrt(%915) /* ty=Tensor[(15, 2, 13), float32] */;
  %917 = cast(%916, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %918 = cast(meta[relay.Constant][76] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %919 = cast(%var_7612, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %920 = cast(%var_7613, dtype="int64") /* ty=Tensor[(312), int64] */;
  %921 = reshape(%917, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
  %922 = reshape(%918, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %923 = reshape(%919, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %924 = reshape(%920, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %925 = @func_5745(%921, %922, %923, %924) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 16, 14), float64], Tensor[(2, 1680), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(3, 13, 8), float32]) */;
  %926 = @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */;
  %927 = cast(%var_7625, dtype="float32") /* ty=Tensor[(168), float32] */;
  %928 = reshape(%927, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %929 = @func_732(%928) /* ty=(Tensor[(4, 10, 4), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) */;
  %930 = %925.7;
  %931 = %926.3;
  %932 = %929.0;
  (%916, %930, meta[relay.Constant][76] /* ty=Tensor[(150), float64] */, %var_7612, %var_7613, %931, %932, %var_7625)
}

def @func_12711(%var_12709: int64, %var_12710: Tensor[(13, 13, 12), int64]) -> (Tensor[(13, 13, 12), bool],) {
  %936 = fn (%var_12696: int64, %var_12697: Tensor[(13, 13, 12), int64]) -> (Tensor[(13, 13, 12), bool],) {
    %933 = cast(%var_12696, dtype="bool") /* ty=bool */;
    %934 = cast(%var_12697, dtype="bool") /* ty=Tensor[(13, 13, 12), bool] */;
    %935 = greater(%933, %934) /* ty=Tensor[(13, 13, 12), bool] */;
    (%935,)
  };
  %936(%var_12709, %var_12710) /* ty=(Tensor[(13, 13, 12), bool],) */
}

def @func_10496() -> Tensor[(15, 2, 13), float64] {
  @func_7553() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_13711() -> (Tensor[(15, 2, 13), float64],) {
  %937 = @func_12671() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(63, 2), uint16]) */;
  %938 = %937.0;
  (%938,)
}

def @func_9715(%var_9705: Tensor[(128), uint32], %var_9709: Tensor[(900), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(4, 2, 16), float64], Tensor[(128), uint32], Tensor[(15, 16, 14), float64], Tensor[(900), float32], Tensor[(3360), float64]) {
  %939 = cast(%var_9705, dtype="uint32") /* ty=Tensor[(128), uint32] */;
  %940 = cast(%var_9705, dtype="uint32") /* ty=Tensor[(128), uint32] */;
  %941 = reshape(%939, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), uint32] */;
  %942 = reshape(%940, newshape=[4, 2, 16]) /* ty=Tensor[(4, 2, 16), uint32] */;
  %943 = cast(%var_9709, dtype="float32") /* ty=Tensor[(900), float32] */;
  %944 = cast(%var_9709, dtype="float32") /* ty=Tensor[(900), float32] */;
  %945 = cast(meta[relay.Constant][77] /* ty=Tensor[(3360), float64] */, dtype="float64") /* ty=Tensor[(3360), float64] */;
  %946 = reshape(%943, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
  %947 = reshape(%944, newshape=[15, 4, 15]) /* ty=Tensor[(15, 4, 15), float32] */;
  %948 = reshape(%945, newshape=[3360]) /* ty=Tensor[(3360), float64] */;
  %949 = @func_5919(%946, %947, %948) /* ty=(Tensor[(15, 4, 15), float32], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 16, 14), float64], Tensor[(3360), float64]) */;
  %950 = @func_7965() /* ty=Tensor[(15, 2, 13), float64] */;
  %951 = @func_2064(%941, %942) /* ty=Tensor[(4, 2, 16), float64] */;
  %952 = %949.3;
  (%950, %951, %var_9705, %952, %var_9709, meta[relay.Constant][77] /* ty=Tensor[(3360), float64] */)
}

def @func_12089() -> (Tensor[(15, 2, 13), float64],) {
  %953 = @func_11438() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(60), uint8]) */;
  %954 = %953.1;
  %955 = cast(%954, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %956 = asin(%955) /* ty=Tensor[(15, 2, 13), float64] */;
  (%956,)
}

def @func_4693(%var_4691: uint32, %var_4692: Tensor[(3, 2, 11), uint32]) -> (Tensor[(3, 2, 11), uint32], Tensor[(2, 2, 13), float64], Tensor[(18), float32]) {
  @func_4689(%var_4691, %var_4692) /* ty=(Tensor[(3, 2, 11), uint32], Tensor[(2, 2, 13), float64], Tensor[(18), float32]) */
}

def @func_3926(%var_3886: Tensor[(2, 2, 13), float64]) -> (Tensor[(2, 2, 13), float64], Tensor[(12, 5, 15), float32], Tensor[(900), float32], Tensor[(3, 13, 8), float32], Tensor[(312), int64], Tensor[(12, 7, 2), bool], Tensor[(6, 28), float32]) {
  %957 = cast(%var_3886, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  %958 = cast(meta[relay.Constant][78] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %959 = reshape(%958, newshape=[12, 5, 15]) /* ty=Tensor[(12, 5, 15), float32] */;
  %960 = cast(meta[relay.Constant][79] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
  %961 = cast(meta[relay.Constant][79] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
  %962 = reshape(%960, newshape=[3, 13, 8]) /* ty=Tensor[(3, 13, 8), int64] */;
  %963 = reshape(%961, newshape=[3, 13, 8]) /* ty=Tensor[(3, 13, 8), int64] */;
  %964 = cast(meta[relay.Constant][80] /* ty=Tensor[(6, 28), float32] */, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %965 = cast(meta[relay.Constant][80] /* ty=Tensor[(6, 28), float32] */, dtype="float32") /* ty=Tensor[(6, 28), float32] */;
  %966 = reshape(%964, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %967 = reshape(%965, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %968 = asinh(%957) /* ty=Tensor[(2, 2, 13), float64] */;
  %969 = @func_2726(%959) /* ty=Tensor[(12, 5, 15), float32] */;
  %970 = @func_2606(%962, %963) /* ty=Tensor[(3, 13, 8), float32] */;
  %971 = @func_271(%966, %967) /* ty=Tensor[(12, 7, 2), bool] */;
  (%968, %969, meta[relay.Constant][78] /* ty=Tensor[(900), float32] */, %970, meta[relay.Constant][79] /* ty=Tensor[(312), int64] */, %971, meta[relay.Constant][80] /* ty=Tensor[(6, 28), float32] */)
}

def @func_6181(%var_6178: uint32, %var_6179: Tensor[(66), uint32], %var_6180: Tensor[(156, 2), int64]) -> (Tensor[(3, 2, 11), uint32], Tensor[(66), uint32], Tensor[(15, 2, 13), int64], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(156, 2), int64], Tensor[(10, 15, ?), float64]) {
  @func_6176(%var_6178, %var_6179, %var_6180) /* ty=(Tensor[(3, 2, 11), uint32], Tensor[(66), uint32], Tensor[(15, 2, 13), int64], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(156, 2), int64], Tensor[(10, 15, ?), float64]) */
}

def @func_13782() -> Tensor[(15, 2, 13), uint64] {
  %972 = @func_8942() /* ty=(Tensor[(15, 2, 13), uint64],) */;
  %972.0
}

def @func_9539(%var_9535: Tensor[(12, 1, 13), float32], %var_9536: Tensor[(12, 10, 13), float32], %var_9537: Tensor[(390), float64], %var_9538: Tensor[(312), int64]) -> (Tensor[(1500), float64], Tensor[(390), float64], Tensor[(1, 150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(60), uint8], Tensor[(12, 10, 13), int8]) {
  @func_9533(%var_9535, %var_9536, %var_9537, %var_9538) /* ty=(Tensor[(1500), float64], Tensor[(390), float64], Tensor[(1, 150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(60), uint8], Tensor[(12, 10, 13), int8]) */
}

def @func_12779() -> (Tensor[(15, 2, 13), float64],) {
  %975 = fn () -> (Tensor[(15, 2, 13), float64],) {
    %973 = @func_11605() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %974 = %973.0;
    (%974,)
  };
  %975() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_5615() -> (Tensor[(15, 2, 13), float64],) {
  %976 = cast(meta[relay.Constant][81] /* ty=Tensor[(15, 2, 13), float64] */, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %977 = sin(%976) /* ty=Tensor[(15, 2, 13), float64] */;
  (%977,)
}

def @func_11918(%var_11916: Tensor[(2, 8), float64], %var_11917: Tensor[(390), float64]) -> (Tensor[(10, 6), bool], Tensor[(8, 2, ?), float64], Tensor[(2, 8), float64], Tensor[(15, 11, 1), uint8], Tensor[(390), float64]) {
  @func_11914(%var_11916, %var_11917) /* ty=(Tensor[(10, 6), bool], Tensor[(8, 2, ?), float64], Tensor[(2, 8), float64], Tensor[(15, 11, 1), uint8], Tensor[(390), float64]) */
}

def @func_9072(%var_9070: Tensor[(672), float32], %var_9071: Tensor[(24), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64], Tensor[(672), float32], Tensor[(15, 2, 13), float64], Tensor[(24), float64]) {
  %993 = fn (%var_9056: Tensor[(672), float32], %var_9067: Tensor[(24), float64]) -> (Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64], Tensor[(672), float32], Tensor[(15, 2, 13), float64], Tensor[(24), float64]) {
    %978 = @func_8850() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %979 = cast(%var_9056, dtype="float32") /* ty=Tensor[(672), float32] */;
    %980 = cast(%var_9056, dtype="float32") /* ty=Tensor[(672), float32] */;
    %981 = @func_7007() /* ty=Tensor[(10, 6), bool] */;
    %982 = cast(%981, dtype="uint8") /* ty=Tensor[(10, 6), uint8] */;
    %983 = reshape(%979, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float32] */;
    %984 = reshape(%980, newshape=[16, 14, 3]) /* ty=Tensor[(16, 14, 3), float32] */;
    %985 = reshape(%982, newshape=[60]) /* ty=Tensor[(60), uint8] */;
    %986 = @func_8045(%983, %984, %985) /* ty=(Tensor[(16, 14, 3), bool], Tensor[(15, 4), uint8], Tensor[(60), uint8], Tensor[(390), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) */;
    %987 = cast(%var_9067, dtype="float64") /* ty=Tensor[(24), float64] */;
    %988 = reshape(%987, newshape=[24]) /* ty=Tensor[(24), float64] */;
    %989 = @func_8757(%988) /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(15, 2, 13), float64], Tensor[(24), float64], Tensor[(312), int64]) */;
    %990 = %978.0;
    %991 = %986.5;
    %992 = %989.1;
    (%990, %981, %991, %var_9056, %992, %var_9067)
  };
  %993(%var_9070, %var_9071) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64], Tensor[(672), float32], Tensor[(15, 2, 13), float64], Tensor[(24), float64]) */
}

def @func_12755(%var_12753: Tensor[(10, 6, 14), float32], %var_12754: Tensor[(10, 6, 14), float32]) -> Tensor[(10, 6, 14), bool] {
  @func_12751(%var_12753, %var_12754) /* ty=Tensor[(10, 6, 14), bool] */
}

def @func_732(%var_723: Tensor[(168), float32]) -> (Tensor[(4, 10, 4), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) {
  %994 = cast(meta[relay.Constant][82] /* ty=Tensor[(4, 10, 4), float32] */, dtype="float32") /* ty=Tensor[(4, 10, 4), float32] */;
  %995 = rsqrt(%994) /* ty=Tensor[(4, 10, 4), float32] */;
  %996 = cast(meta[relay.Constant][82] /* ty=Tensor[(4, 10, 4), float32] */, dtype="bool") /* ty=Tensor[(4, 10, 4), bool] */;
  %997 = shape_of(%995, dtype="int32") /* ty=Tensor[(3), int32] */;
  %998 = cast(%995, dtype="bool") /* ty=Tensor[(4, 10, 4), bool] */;
  %999 = dyn.reshape(%996, %997, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1000 = cast(%var_723, dtype="float32") /* ty=Tensor[(168), float32] */;
  %1001 = cast(%var_723, dtype="float32") /* ty=Tensor[(168), float32] */;
  %1002 = reshape(%1000, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %1003 = reshape(%1001, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %1004 = greater_equal(%998, %999) /* ty=Tensor[(4, 10, 4), bool] */;
  %1005 = @func_271(%1002, %1003) /* ty=Tensor[(12, 7, 2), bool] */;
  (%1004, %1005, %var_723)
}

def @func_884(%var_865: Tensor[(5, 14, 2), int64]) -> (Tensor[(5, 14, 2), bool], Tensor[(12, 7, 2), bool], Tensor[(168), float32]) {
  %1006 = cast(%var_865, dtype="bool") /* ty=Tensor[(5, 14, 2), bool] */;
  %1007 = shape_of(meta[relay.Constant][83] /* ty=Tensor[(5, 14, 2), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1008 = cast(meta[relay.Constant][83] /* ty=Tensor[(5, 14, 2), int64] */, dtype="bool") /* ty=Tensor[(5, 14, 2), bool] */;
  %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1010 = cast(meta[relay.Constant][84] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %1011 = cast(meta[relay.Constant][84] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %1012 = reshape(%1010, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %1013 = reshape(%1011, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), float32] */;
  %1014 = equal(%1008, %1009) /* ty=Tensor[(5, 14, 2), bool] */;
  %1015 = @func_271(%1012, %1013) /* ty=Tensor[(12, 7, 2), bool] */;
  (%1014, %1015, meta[relay.Constant][84] /* ty=Tensor[(168), float32] */)
}

def @func_10464(%var_10462: Tensor[(1500), float64], %var_10463: Tensor[(168), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(60), uint8], Tensor[(18), float32], Tensor[(15, 2, 13), float64], Tensor[(6, 4), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(1500), float64], Tensor[(168), float32]) {
  @func_10460(%var_10462, %var_10463) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(60), uint8], Tensor[(18), float32], Tensor[(15, 2, 13), float64], Tensor[(6, 4), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(1500), float64], Tensor[(168), float32]) */
}

def @func_6287(%var_6285: Tensor[(126), uint32], %var_6286: Tensor[(1008), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) {
  %1025 = fn (%var_6281: Tensor[(126), uint32], %var_6282: Tensor[(1008), uint32]) -> (Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) {
    %1016 = @func_6207() /* ty=Tensor[(15, 2, 13), float64] */;
    %1017 = cast(%1016, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
    %1018 = cast(%var_6281, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %1019 = cast(%var_6282, dtype="uint32") /* ty=Tensor[(1008), uint32] */;
    %1020 = reshape(%1018, newshape=[1, 9, 14]) /* ty=Tensor[(1, 9, 14), uint32] */;
    %1021 = reshape(%1019, newshape=[8, 9, 14]) /* ty=Tensor[(8, 9, 14), uint32] */;
    %1022 = @func_4041(%1020, %1021) /* ty=(Tensor[(8, 9, 14), uint32], Tensor[(3, 13, 8), float32], Tensor[(312, 1), int64]) */;
    %1023 = rsqrt(%1017) /* ty=Tensor[(15, 2, 13), float64] */;
    %1024 = %1022.0;
    (%1023, %1024, %var_6281, %var_6282)
  };
  %1025(%var_6285, %var_6286) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(8, 9, 14), uint32], Tensor[(126), uint32], Tensor[(1008), uint32]) */
}

def @func_10877(%var_10875: Tensor[(15, 2, 13), float64]) -> (Tensor[(15, 2, 13), bool], Tensor[(15, 11, 1), uint8], Tensor[(165, 1), uint8]) {
  @func_10874(%var_10875) /* ty=(Tensor[(15, 2, 13), bool], Tensor[(15, 11, 1), uint8], Tensor[(165, 1), uint8]) */
}

def @func_11869() -> Tensor[(126), uint32] {
  %1026 = @func_11413() /* ty=(Tensor[(126), uint32],) */;
  %1026.0
}

def @func_11439() -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(60), uint8]) {
  %1035 = fn () -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(60), uint8]) {
    %1027 = @func_7674() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %1028 = cast(meta[relay.Constant][85] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
    %1029 = %1027.0;
    %1030 = cast(%1029, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
    %1031 = reshape(%1028, newshape=[15, 4]) /* ty=Tensor[(15, 4), uint8] */;
    %1032 = reshape(%1030, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
    %1033 = @func_6574(%1031, %1032) /* ty=(Tensor[(10, 6), bool], Tensor[(15, 4), uint8], Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64]) */;
    %1034 = %1033.3;
    (%1029, %1034, meta[relay.Constant][85] /* ty=Tensor[(60), uint8] */)
  };
  %1035() /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(60), uint8]) */
}

def @func_6176(%var_6137: uint32, %var_6138: Tensor[(66), uint32], %var_6157: Tensor[(156, 2), int64]) -> (Tensor[(3, 2, 11), uint32], Tensor[(66), uint32], Tensor[(15, 2, 13), int64], Tensor[(1500), float64], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(156, 2), int64], Tensor[(10, 15, ?), float64]) {
  %1036 = cast(%var_6137, dtype="uint32") /* ty=uint32 */;
  %1037 = cast(%var_6138, dtype="uint32") /* ty=Tensor[(66), uint32] */;
  %1038 = reshape(%1036, newshape=[]) /* ty=uint32 */;
  %1039 = reshape(%1037, newshape=[3, 2, 11]) /* ty=Tensor[(3, 2, 11), uint32] */;
  %1040 = @func_4689(%1038, %1039) /* ty=(Tensor[(3, 2, 11), uint32], Tensor[(2, 2, 13), float64], Tensor[(18), float32]) */;
  %1041 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %1042 = %1041.0;
  %1043 = cast(%1042, dtype="int64") /* ty=Tensor[(15, 2, 13), int64] */;
  %1044 = cast(%var_6137, dtype="int64") /* ty=int64 */;
  %1045 = cast(%1042, dtype="float64") /* ty=Tensor[(15, 2, 13), float64] */;
  %1046 = cast(meta[relay.Constant][86] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %1047 = cast(meta[relay.Constant][87] /* ty=Tensor[(1500), float64] */, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %1048 = cast(%var_6157, dtype="int64") /* ty=Tensor[(156, 2), int64] */;
  %1049 = reshape(%1045, newshape=[15, 2, 13]) /* ty=Tensor[(15, 2, 13), float64] */;
  %1050 = reshape(%1046, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %1051 = reshape(%1047, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %1052 = reshape(%1048, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %1053 = @func_5745(%1049, %1050, %1051, %1052) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(15, 16, 14), float64], Tensor[(2, 1680), float64], Tensor[(10, 15, 10), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(3, 13, 8), float32]) */;
  %1054 = cast(meta[relay.Constant][86] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %1055 = %1053.5;
  %1056 = cast(%1055, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %1057 = reshape(%1054, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), float64] */;
  %1058 = reshape(%1056, newshape=[10, 15, 10]) /* ty=Tensor[(10, 15, 10), float64] */;
  %1059 = @func_2897(%1057, %1058) /* ty=(Tensor[(10, 15, ?), float64], Tensor[(10, 15, 10), float32]) */;
  %1060 = %1040.0;
  %1061 = subtract(%1043, %1044) /* ty=Tensor[(15, 2, 13), int64] */;
  %1062 = %1059.0;
  (%1060, %var_6138, %1061, %1055, meta[relay.Constant][86] /* ty=Tensor[(150), float64] */, meta[relay.Constant][87] /* ty=Tensor[(1500), float64] */, %var_6157, %1062)
}

def @func_5155(%var_5154: Tensor[(1, 2, 12), float64]) -> Tensor[(?, 2, 12), float32] {
  %1079 = fn (%var_5124: Tensor[(1, 2, 12), float64]) -> Tensor[(?, 2, 12), float32] {
    %1063 = cast(%var_5124, dtype="float64") /* ty=Tensor[(1, 2, 12), float64] */;
    %1064 = cosh(%1063) /* ty=Tensor[(1, 2, 12), float64] */;
    %1065 = cast(%var_5124, dtype="int32") /* ty=Tensor[(1, 2, 12), int32] */;
    %1066 = shape_of(%1064, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1067 = cast(%1064, dtype="int32") /* ty=Tensor[(1, 2, 12), int32] */;
    %1068 = dyn.reshape(%1065, %1066, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1069 = multiply(%1067, %1068) /* ty=Tensor[(?, 2, 12), int32] */;
    %1070 = cast(%var_5124, dtype="float64") /* ty=Tensor[(1, 2, 12), float64] */;
    %1071 = shape_of(%1069, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1072 = cast(%1069, dtype="float64") /* ty=Tensor[(?, 2, 12), float64] */;
    %1073 = dyn.reshape(%1070, %1071, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1074 = mod(%1072, %1073) /* ty=Tensor[(?, 2, 12), float64] */;
    %1075 = cast(%var_5124, dtype="float32") /* ty=Tensor[(1, 2, 12), float32] */;
    %1076 = shape_of(%1074, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1077 = cast(%1074, dtype="float32") /* ty=Tensor[(?, 2, 12), float32] */;
    %1078 = dyn.reshape(%1075, %1076, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%1077, %1078) /* ty=Tensor[(?, 2, 12), float32] */
  };
  %1079(%var_5154) /* ty=Tensor[(?, 2, 12), float32] */
}

def @func_3215(%var_3213: Tensor[(10, 16, 5), float64]) -> (Tensor[(10, 16, 5), float64],) {
  @func_3212(%var_3213) /* ty=(Tensor[(10, 16, 5), float64],) */
}

def @func_10047(%var_10036: Tensor[(11, 2, 12), int32], %var_10037: Tensor[(11, 2, 12), int32], %var_10041: Tensor[(11, 2, 12), int32]) -> (Tensor[(11, 2, 12), float64],) {
  %1080 = cast(%var_10037, dtype="int32") /* ty=Tensor[(11, 2, 12), int32] */;
  %1081 = shape_of(%var_10036, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1082 = cast(%var_10036, dtype="int32") /* ty=Tensor[(11, 2, 12), int32] */;
  %1083 = dyn.reshape(%1080, %1081, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1084 = maximum(%1082, %1083) /* ty=Tensor[(11, 2, 12), int32] */;
  %1085 = cast(%var_10041, dtype="float64") /* ty=Tensor[(11, 2, 12), float64] */;
  %1086 = shape_of(%1084, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1087 = cast(%1084, dtype="float64") /* ty=Tensor[(11, 2, 12), float64] */;
  %1088 = dyn.reshape(%1085, %1086, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1089 = divide(%1087, %1088) /* ty=Tensor[(11, 2, 12), float64] */;
  (%1089,)
}

def @func_7445() -> (Tensor[(15, 2, 13), uint64],) {
  %1090 = @func_6512() /* ty=(Tensor[(15, 2, 13), uint64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(15, 2, 13), float32]) */;
  %1091 = %1090.0;
  (%1091,)
}

def @func_10223() -> (Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
  %1096 = fn () -> (Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) {
    %1092 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %1093 = @func_8874() /* ty=Tensor[(10, 6), bool] */;
    %1094 = %1092.0;
    %1095 = @func_7588() /* ty=Tensor[(15, 2, 13), float64] */;
    (%1093, %1094, %1095)
  };
  %1096() /* ty=(Tensor[(10, 6), bool], Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64]) */
}

def @func_10959() -> (Tensor[(10, 6), bool],) {
  @func_10957() /* ty=(Tensor[(10, 6), bool],) */
}

def @func_5693(%var_5692: Tensor[(15, 2, 13), float64]) -> (Tensor[(2, 9, 10), uint16], Tensor[(90), uint16], Tensor[(180), uint16], Tensor[(15, 2, 13), bool]) {
  %1110 = fn (%var_5686: Tensor[(15, 2, 13), float64]) -> (Tensor[(2, 9, 10), uint16], Tensor[(90), uint16], Tensor[(180), uint16], Tensor[(15, 2, 13), bool]) {
    %1097 = cast(meta[relay.Constant][88] /* ty=Tensor[(90), uint16] */, dtype="uint16") /* ty=Tensor[(90), uint16] */;
    %1098 = cast(meta[relay.Constant][89] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %1099 = reshape(%1097, newshape=[1, 9, 10]) /* ty=Tensor[(1, 9, 10), uint16] */;
    %1100 = reshape(%1098, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), uint16] */;
    %1101 = @func_2320(%1099, %1100) /* ty=(Tensor[(2, 9, 10), uint16], Tensor[(12, 7, 2), bool], Tensor[(140), int64], Tensor[(15, 11, 1), uint8], Tensor[(165), uint8]) */;
    %1102 = @func_5615() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %1103 = %1102.0;
    %1104 = cast(%var_5686, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
    %1105 = shape_of(%1103, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1106 = cast(%1103, dtype="bool") /* ty=Tensor[(15, 2, 13), bool] */;
    %1107 = dyn.reshape(%1104, %1105, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1108 = %1101.0;
    %1109 = greater_equal(%1106, %1107) /* ty=Tensor[(15, 2, 13), bool] */;
    (%1108, meta[relay.Constant][88] /* ty=Tensor[(90), uint16] */, meta[relay.Constant][89] /* ty=Tensor[(180), uint16] */, %1109)
  };
  %1110(%var_5692) /* ty=(Tensor[(2, 9, 10), uint16], Tensor[(90), uint16], Tensor[(180), uint16], Tensor[(15, 2, 13), bool]) */
}

def @func_6968() -> (Tensor[(15, 2, 13), float64],) {
  %1113 = fn () -> (Tensor[(15, 2, 13), float64],) {
    %1111 = @func_6295() /* ty=(Tensor[(15, 2, 13), float64],) */;
    %1112 = %1111.0;
    (%1112,)
  };
  %1113() /* ty=(Tensor[(15, 2, 13), float64],) */
}

def @func_4521(%var_4519: Tensor[(13, 1, 5), float32]) -> (Tensor[(13, 1, 5), float32],) {
  @func_4518(%var_4519) /* ty=(Tensor[(13, 1, 5), float32],) */
}

def @func_10460(%var_10457: Tensor[(1500), float64], %var_10458: Tensor[(168), float32]) -> (Tensor[(15, 2, 13), float64], Tensor[(15, 2, 13), float64], Tensor[(60), uint8], Tensor[(18), float32], Tensor[(15, 2, 13), float64], Tensor[(6, 4), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(1500), float64], Tensor[(168), float32]) {
  %1114 = @func_8251() /* ty=(Tensor[(15, 2, 13), float64],) */;
  %1115 = cast(meta[relay.Constant][90] /* ty=Tensor[(60), uint8] */, dtype="uint8") /* ty=Tensor[(60), uint8] */;
  %1116 = cast(meta[relay.Constant][91] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %1117 = reshape(%1115, newshape=[60]) /* ty=Tensor[(60), uint8] */;
  %1118 = reshape(%1116, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %1119 = @func_9810(%1117, %1118) /* ty=(Tensor[(15, 2, 13), float64], Tensor[(10, 6), bool], Tensor[(60), uint8], Tensor[(13, 1, 5), float32], Tensor[(65), float32], Tensor[(18, ?), int16], Tensor[(18), float32]) */;
  %1120 = cast(meta[relay.Constant][92] /* ty=Tensor[(6, 4), float64] */, dtype="float64") /* ty=Tensor[(6, 4), float64] */;
  %1121 = cast(meta[relay.Constant][93] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
  %1122 = reshape(%1120, newshape=[24]) /* ty=Tensor[(24), float64] */;
  %1123 = reshape(%1121, newshape=[6, 52]) /* ty=Tensor[(6, 52), int64] */;
  %1124 = @func_8444(%1122, %1123) /* ty=(Tensor[(?, 2, 12), float32], Tensor[(24), float64], Tensor[(10, 15, 10), float32], Tensor[(1500), float64], Tensor[(6, 52), int64], Tensor[(15, 2, 13), float64]) */;
  %1125 = cast(%var_10457, dtype="float64") /* ty=Tensor[(1500), float64] */;
  %1126 = cast(meta[relay.Constant][93] /* ty=Tensor[(312), int64] */, dtype="int64") /* ty=Tensor[(312), int64] */;
  %1127 = cast(%var_10458, dtype="float32") /* ty=Tensor[(168), float32] */;
  %1128 = reshape(%1125, newshape=[1500]) /* ty=Tensor[(1500), float64] */;
  %1129 = reshape(%1126, newshape=[312]) /* ty=Tensor[(312), int64] */;
  %1130 = reshape(%1127, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %1131 = @func_7630(%1128, %1129, %1130) /* ty=(Tensor[(15, 2, 13), float32], Tensor[(3, 13, 8), float32], Tensor[(150), float64], Tensor[(1500), float64], Tensor[(312), int64], Tensor[(15, 2, 13), float32], Tensor[(4, 10, 4), bool], Tensor[(168), float32]) */;
  %1132 = %1114.0;
  %1133 = %1119.0;
  %1134 = %1124.5;
  %1135 = %1131.5;
  (%1132, %1133, meta[relay.Constant][90] /* ty=Tensor[(60), uint8] */, meta[relay.Constant][91] /* ty=Tensor[(18), float32] */, %1134, meta[relay.Constant][92] /* ty=Tensor[(6, 4), float64] */, meta[relay.Constant][93] /* ty=Tensor[(312), int64] */, %1135, %var_10457, %var_10458)
}

def @func_6208() -> Tensor[(15, 2, 13), float64] {
  %1136 = fn () -> Tensor[(15, 2, 13), float64] {
    @func_6121() /* ty=Tensor[(15, 2, 13), float64] */
  };
  %1136() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_7590() -> Tensor[(15, 2, 13), float64] {
  @func_7588() /* ty=Tensor[(15, 2, 13), float64] */
}

def @func_11209() -> (Tensor[(15, 2, 13), float64],) {
  %1138 = fn () -> (Tensor[(15, 2, 13), float64],) {
    %1137 = @func_7588() /* ty=Tensor[(15, 2, 13), float64] */;
    (%1137,)
  };
  %1138() /* ty=(Tensor[(15, 2, 13), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen540/build/output.py", line 3227, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:29:58] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

