==========mod==========
#[version = "0.0.5"]
def @func_4262(%var_4213: Tensor[(12, 4, 3), float32]) -> (Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32]) {
  %0 = cast(%var_4213, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %1 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %2 = %1.0;
  %3 = cast(%var_4213, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%2, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %7 = maximum(%5, %6) /* ty=Tensor[(12, 4, 3), float32] */;
  %8 = cast(%7, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %9 = acos(%0) /* ty=Tensor[(12, 4, 3), float64] */;
  %10 = rsqrt(%8) /* ty=Tensor[(12, 4, 3), float32] */;
  (%9, %10)
}

def @func_198(%var_149: Tensor[(15, 6, 3), int16], %var_150: Tensor[(15, 6, 3), int16]) -> (Tensor[(15, 6, 3), int16], Tensor[(15, 6, 3), float32], Tensor[(15, 6, 3), float32]) {
  %11 = cast(%var_150, dtype="int16") /* ty=Tensor[(15, 6, 3), int16] */;
  %12 = shape_of(%var_149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%var_149, dtype="int16") /* ty=Tensor[(15, 6, 3), int16] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %15 = cast(%var_149, dtype="float32") /* ty=Tensor[(15, 6, 3), float32] */;
  %16 = shape_of(%var_150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%var_150, dtype="float32") /* ty=Tensor[(15, 6, 3), float32] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %19 = cast(%var_150, dtype="float32") /* ty=Tensor[(15, 6, 3), float32] */;
  %20 = logical_xor(%13, %14) /* ty=Tensor[(15, 6, 3), int16] */;
  %21 = floor_mod(%17, %18) /* ty=Tensor[(15, 6, 3), float32] */;
  %22 = sinh(%19) /* ty=Tensor[(15, 6, 3), float32] */;
  (%20, %21, %22)
}

def @func_4106(%var_4094: Tensor[(12, 4, 3), float32]) -> Tensor[(12, 4, 3), bool] {
  %23 = @func_3966() /* ty=Tensor[(12, 4, 3), float32] */;
  %24 = cast(%var_4094, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%26, %27) /* ty=Tensor[(12, 4, 3), bool] */
}

def @main() -> (Tensor[(12, 4, 3), int16],) {
  %28 = @func_6273() /* ty=Tensor[(12, 4, 3), float64] */;
  %29 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 4, 3), float64] */, dtype="int16") /* ty=Tensor[(12, 4, 3), int16] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%28, dtype="int16") /* ty=Tensor[(12, 4, 3), int16] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %33 = right_shift(%31, %32) /* ty=Tensor[(12, 4, 3), int16] */;
  (%33,)
}

def @func_6410() -> Tensor[(12, 4, 3), float32] {
  @func_5981() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_7172(%var_7159: Tensor[(9, 5, 4), float64]) -> (Tensor[(9, 5, 4), float32],) {
  %34 = cast(%var_7159, dtype="float64") /* ty=Tensor[(9, 5, 4), float64] */;
  %35 = erf(%34) /* ty=Tensor[(9, 5, 4), float64] */;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(9, 5, 4), float32] */;
  %37 = cosh(%36) /* ty=Tensor[(9, 5, 4), float32] */;
  (%37,)
}

def @func_2791(%var_2756: Tensor[(5, 15, 5), float64], %var_2766: Tensor[(5, 15, 5), float64]) -> (Tensor[(5, 15, 5), float64], Tensor[(5, 15, 5), int32]) {
  %38 = cast(%var_2756, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %39 = cast(%var_2766, dtype="int32") /* ty=Tensor[(5, 15, 5), int32] */;
  %40 = shape_of(%var_2756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%var_2756, dtype="int32") /* ty=Tensor[(5, 15, 5), int32] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %43 = acos(%38) /* ty=Tensor[(5, 15, 5), float64] */;
  %44 = logical_xor(%41, %42) /* ty=Tensor[(5, 15, 5), int32] */;
  (%43, %44)
}

def @func_5755(%var_5677: Tensor[(1, 2, 7), float32]) -> (Tensor[(2912), float32], float64, Tensor[(12, 4, 3), float32], Tensor[(1, 2, 7), float64], Tensor[(14, 16, 13), bool], Tensor[(336), float64], float64, Tensor[(1, 2, 7), float64], Tensor[(12, 4, 3), float32]) {
  %45 = cast(3.09835f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %46 = reshape(%45, newshape=[]) /* ty=float64 */;
  %47 = @func_4075(%46) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(14, 16, 13), bool], float64, Tensor[(1512), float32], Tensor[(126, 12), float32], Tensor[(10560), int8], Tensor[(2912), float32], Tensor[(16, 5, 12), int64], Tensor[(2, 480), int8], Tensor[(12, 4, 3), float32]) */;
  %48 = @func_5081() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(1056), uint8], Tensor[(90, 3), float64]) */;
  %49 = cast(%var_5677, dtype="float32") /* ty=Tensor[(1, 2, 7), float32] */;
  %50 = erf(%49) /* ty=Tensor[(1, 2, 7), float32] */;
  %51 = cast(%50, dtype="float64") /* ty=Tensor[(1, 2, 7), float64] */;
  %52 = cast(meta[relay.Constant][1] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %53 = cast(3.09835f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %54 = %47.6;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %56 = reshape(%52, newshape=[7, 12, 4]) /* ty=Tensor[(7, 12, 4), float64] */;
  %57 = reshape(%53, newshape=[]) /* ty=float64 */;
  %58 = reshape(%55, newshape=[104, 28]) /* ty=Tensor[(104, 28), float64] */;
  %59 = @func_3609(%56, %57, %58) /* ty=(Tensor[(7, 12, 4), float64], Tensor[(14, 16, 13), bool], float64, Tensor[(104, 28), float64]) */;
  %60 = %59.1;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(14, 16, 13), float64] */;
  %62 = reshape(%61, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %63 = @func_5529(%62) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(90, 3), bool], Tensor[(14, 16, 13), bool], float64, Tensor[(2912), float64]) */;
  %64 = cast(%50, dtype="float64") /* ty=Tensor[(1, 2, 7), float64] */;
  %65 = %48.0;
  %66 = sigmoid(%51) /* ty=Tensor[(1, 2, 7), float64] */;
  %67 = %63.3;
  %68 = log(%64) /* ty=Tensor[(1, 2, 7), float64] */;
  %69 = @func_5644() /* ty=Tensor[(12, 4, 3), float32] */;
  (%54, 3.09835f64 /* ty=float64 */, %65, %66, %60, meta[relay.Constant][1] /* ty=Tensor[(336), float64] */, %67, %68, %69)
}

def @func_6685(%var_6674: Tensor[(1200), int8]) -> (Tensor[(960), int8], Tensor[(12, 10, 10), int8], Tensor[(1200), int8]) {
  %70 = @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */;
  %71 = cast(%var_6674, dtype="int8") /* ty=Tensor[(1200), int8] */;
  %72 = reshape(%71, newshape=[12, 10, 10]) /* ty=Tensor[(12, 10, 10), int8] */;
  %73 = %70.1;
  %74 = @func_4196(%72) /* ty=Tensor[(12, 10, 10), int8] */;
  (%73, %74, %var_6674)
}

def @func_5483(%var_5451: Tensor[(336), float64]) -> (Tensor[(12, 4, 3), float32], float64, Tensor[(336), float64], float64, Tensor[(2912), float64]) {
  %75 = @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %76 = cast(%var_5451, dtype="float64") /* ty=Tensor[(336), float64] */;
  %77 = cast(0.653723f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %78 = cast(meta[relay.Constant][2] /* ty=Tensor[(2912), float64] */, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %79 = reshape(%76, newshape=[7, 12, 4]) /* ty=Tensor[(7, 12, 4), float64] */;
  %80 = reshape(%77, newshape=[]) /* ty=float64 */;
  %81 = reshape(%78, newshape=[104, 28]) /* ty=Tensor[(104, 28), float64] */;
  %82 = @func_3609(%79, %80, %81) /* ty=(Tensor[(7, 12, 4), float64], Tensor[(14, 16, 13), bool], float64, Tensor[(104, 28), float64]) */;
  %83 = %75.0;
  %84 = %82.2;
  (%83, %84, %var_5451, 0.653723f64 /* ty=float64 */, meta[relay.Constant][2] /* ty=Tensor[(2912), float64] */)
}

def @func_7004(%var_6995: Tensor[(2912), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(15, 6, 3), int16], float64, Tensor[(2912), float64]) {
  %85 = @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %86 = cast(8.35874f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %87 = cast(%var_6995, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %88 = reshape(%86, newshape=[]) /* ty=float64 */;
  %89 = reshape(%87, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
  %90 = @func_279(%88, %89) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
  %91 = %85.0;
  %92 = %90.1;
  (%91, %92, 8.35874f64 /* ty=float64 */, %var_6995)
}

def @func_6620() -> Tensor[(3, 6, 11), int16] {
  %93 = @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */;
  %93.3
}

def @func_6287() -> Tensor[(12, 4, 3), float32] {
  @func_6163() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_5803() -> (Tensor[(12, 4, 3), float32],) {
  %94 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %95 = %94.1;
  (%95,)
}

def @func_8163() -> (Tensor[(12, 4, 3), float32],) {
  %96 = @func_5550() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %97 = %96.0;
  (%97,)
}

def @func_6319() -> (Tensor[(12, 4, 3), float32],) {
  %98 = @func_5803() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %99 = %98.0;
  (%99,)
}

def @func_8071() -> Tensor[(12, 4, 3), float64] {
  @func_6273() /* ty=Tensor[(12, 4, 3), float64] */
}

def @func_2826(%var_2815: Tensor[(8, 12, 11), uint8], %var_2816: Tensor[(8, 12, 11), uint8]) -> Tensor[(8, 12, 11), uint8] {
  %100 = cast(%var_2816, dtype="uint8") /* ty=Tensor[(8, 12, 11), uint8] */;
  %101 = shape_of(%var_2815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%var_2815, dtype="uint8") /* ty=Tensor[(8, 12, 11), uint8] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%102, %103) /* ty=Tensor[(8, 12, 11), uint8] */
}

def @func_3895() -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) {
  %104 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 4, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %105 = tan(%104) /* ty=Tensor[(12, 4, 3), float32] */;
  %106 = cast(%105, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %107 = cast(%105, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %108 = asinh(%106) /* ty=Tensor[(12, 4, 3), float32] */;
  %109 = erf(%107) /* ty=Tensor[(12, 4, 3), float32] */;
  (%108, %109)
}

def @func_8330() -> (Tensor[(12, 4, 3), float32], Tensor[(3, 6, 11), int16]) {
  %110 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %111 = @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */;
  %112 = %110.0;
  %113 = %111.3;
  (%112, %113)
}

def @func_8059() -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) {
  %114 = @func_6905() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %115 = @func_6287() /* ty=Tensor[(12, 4, 3), float32] */;
  %116 = %114.0;
  (%115, %116)
}

def @func_8913(%var_8875: Tensor[(7, 11, 13), float64], %var_8890: Tensor[(10560), int8], %var_8901: Tensor[(1056), uint8]) -> (Tensor[(7, 11, 13), float64], Tensor[(12, 4, 3), float64], Tensor[(144), float32], Tensor[(3, 60), float32], Tensor[(10560), float32], Tensor[(12, 4, 3), float64], Tensor[(1056), uint8], Tensor[(336, 1), float32]) {
  %117 = cast(%var_8875, dtype="float64") /* ty=Tensor[(7, 11, 13), float64] */;
  %118 = @func_5401() /* ty=(Tensor[(12, 4, 3), float64],) */;
  %119 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 60), float32] */, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
  %120 = cast(meta[relay.Constant][5] /* ty=Tensor[(10560), int8] */, dtype="int8") /* ty=Tensor[(10560), int8] */;
  %121 = cast(meta[relay.Constant][5] /* ty=Tensor[(10560), int8] */, dtype="int8") /* ty=Tensor[(10560), int8] */;
  %122 = reshape(%119, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %123 = reshape(%120, newshape=[40, 264]) /* ty=Tensor[(40, 264), int8] */;
  %124 = reshape(%121, newshape=[4, 2640]) /* ty=Tensor[(4, 2640), int8] */;
  %125 = @func_8782(%122, %123, %124) /* ty=(Tensor[(960), int8], Tensor[(180), float32], Tensor[(144), float32], Tensor[(1512), float32], Tensor[(40, 264), int8], Tensor[(12, 4, 3), float32], Tensor[(4, 2640), int64]) */;
  %126 = cast(%var_8890, dtype="float32") /* ty=Tensor[(10560), float32] */;
  %127 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(10560), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %128 = cast(meta[relay.Constant][5] /* ty=Tensor[(10560), int8] */, dtype="float32") /* ty=Tensor[(10560), float32] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?), float32] */;
  %130 = cast(%var_8901, dtype="uint8") /* ty=Tensor[(1056), uint8] */;
  %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(336, 1), float32] */, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
  %132 = reshape(%130, newshape=[1, 1056]) /* ty=Tensor[(1, 1056), uint8] */;
  %133 = reshape(%131, newshape=[8, 3, 14]) /* ty=Tensor[(8, 3, 14), float32] */;
  %134 = @func_8670(%132, %133) /* ty=(Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 12, 11), uint8], Tensor[(1, 1056), uint8], Tensor[(8, 3, 14), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */;
  %135 = tan(%117) /* ty=Tensor[(7, 11, 13), float64] */;
  %136 = %118.0;
  %137 = %125.2;
  %138 = power(%128, %129) /* ty=Tensor[(10560), float32] */;
  %139 = %134.2;
  (%135, %136, %137, meta[relay.Constant][4] /* ty=Tensor[(3, 60), float32] */, %138, %139, %var_8901, meta[relay.Constant][6] /* ty=Tensor[(336, 1), float32] */)
}

def @func_5621(%var_5616: Tensor[(198), int16], %var_5617: Tensor[(960), int8]) -> (Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(198), int16], Tensor[(960), int8]) {
  %140 = @func_5401() /* ty=(Tensor[(12, 4, 3), float64],) */;
  %141 = cast(%var_5616, dtype="int16") /* ty=Tensor[(198), int16] */;
  %142 = cast(%var_5617, dtype="int8") /* ty=Tensor[(960), int8] */;
  %143 = reshape(%141, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int16] */;
  %144 = reshape(%142, newshape=[960]) /* ty=Tensor[(960), int8] */;
  %145 = @func_2960(%143, %144) /* ty=(Tensor[(3, 6, 11), int16], Tensor[(16, 5, 12), int64], int8, Tensor[(960), int8]) */;
  %146 = %140.0;
  %147 = @func_3982() /* ty=Tensor[(12, 4, 3), float32] */;
  %148 = %145.3;
  (%146, %147, %148, %var_5616, %var_5617)
}

def @func_8564() -> Tensor[(12, 4, 3), float32] {
  @func_7944() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_7261() -> (Tensor[(12, 4, 3), float32],) {
  %149 = @func_5550() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %150 = %149.0;
  (%150,)
}

def @func_5961(%var_5958: Tensor[(375), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(5, 15, 5), int32], Tensor[(375), float64]) {
  %151 = cast(%var_5958, dtype="float64") /* ty=Tensor[(375), float64] */;
  %152 = cast(%var_5958, dtype="float64") /* ty=Tensor[(375), float64] */;
  %153 = reshape(%151, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float64] */;
  %154 = reshape(%152, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float64] */;
  %155 = @func_2791(%153, %154) /* ty=(Tensor[(5, 15, 5), float64], Tensor[(5, 15, 5), int32]) */;
  %156 = @func_3966() /* ty=Tensor[(12, 4, 3), float32] */;
  %157 = %155.1;
  (%156, %157, %var_5958)
}

def @func_6379(%var_6351: Tensor[(8, 16, 8), float64]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 11, 11), float64], Tensor[(48), float64], Tensor[(968), bool]) {
  %158 = cast(%var_6351, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
  %159 = cast(meta[relay.Constant][7] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %160 = cast(meta[relay.Constant][8] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %161 = reshape(%159, newshape=[1, 12, 4]) /* ty=Tensor[(1, 12, 4), float64] */;
  %162 = reshape(%160, newshape=[22, 44]) /* ty=Tensor[(22, 44), float64] */;
  %163 = @func_4392(%161, %162) /* ty=(Tensor[(8, 11, 11), float64], Tensor[(22, 44), float64], Tensor[(1, 12, 4), float32]) */;
  %164 = cast(meta[relay.Constant][8] /* ty=Tensor[(968), float64] */, dtype="float32") /* ty=Tensor[(968), float32] */;
  %165 = log10(%164) /* ty=Tensor[(968), float32] */;
  %166 = cast(meta[relay.Constant][9] /* ty=Tensor[(968), float32] */, dtype="bool") /* ty=Tensor[(968), bool] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(1), int32] */;
  %168 = cast(%165, dtype="bool") /* ty=Tensor[(968), bool] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?), bool] */;
  %170 = asin(%158) /* ty=Tensor[(8, 16, 8), float64] */;
  %171 = %163.0;
  %172 = greater(%168, %169) /* ty=Tensor[(968), bool] */;
  (%170, %171, meta[relay.Constant][7] /* ty=Tensor[(48), float64] */, %172)
}

def @func_8513() -> (Tensor[(12, 4, 3), float32],) {
  %173 = @func_5254() /* ty=Tensor[(12, 4, 3), float32] */;
  (%173,)
}

def @func_7537() -> (Tensor[(960), int8],) {
  %174 = @func_6934() /* ty=(Tensor[(960), int8],) */;
  %175 = %174.0;
  (%175,)
}

def @func_7682() -> (Tensor[(12, 4, 3), float32],) {
  %176 = @func_5081() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(1056), uint8], Tensor[(90, 3), float64]) */;
  %177 = %176.0;
  (%177,)
}

def @func_8843(%var_8813: Tensor[(2, 8, 1), int16], %var_8814: Tensor[(2, 8, 10), int16]) -> Tensor[(2, 8, 10), int16] {
  %178 = cast(%var_8813, dtype="int16") /* ty=Tensor[(2, 8, 1), int16] */;
  %179 = cast(%var_8814, dtype="int16") /* ty=Tensor[(2, 8, 10), int16] */;
  bitwise_or(%178, %179) /* ty=Tensor[(2, 8, 10), int16] */
}

def @func_4075(%var_4032: float64) -> (Tensor[(12, 4, 3), float32], Tensor[(14, 16, 13), bool], float64, Tensor[(1512), float32], Tensor[(126, 12), float32], Tensor[(10560), int8], Tensor[(2912), float32], Tensor[(16, 5, 12), int64], Tensor[(2, 480), int8], Tensor[(12, 4, 3), float32]) {
  %180 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %181 = cast(%var_4032, dtype="float64") /* ty=float64 */;
  %182 = cast(meta[relay.Constant][10] /* ty=Tensor[(2912), float64] */, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %183 = reshape(%181, newshape=[]) /* ty=float64 */;
  %184 = reshape(%182, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
  %185 = @func_279(%183, %184) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
  %186 = cast(meta[relay.Constant][11] /* ty=Tensor[(126, 12), float32] */, dtype="float32") /* ty=Tensor[(126, 12), float32] */;
  %187 = %185.0;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(14, 16, 13), float64] */;
  %189 = cast(meta[relay.Constant][12] /* ty=Tensor[(10560), int8] */, dtype="int8") /* ty=Tensor[(10560), int8] */;
  %190 = reshape(%186, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %191 = reshape(%188, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %192 = reshape(%189, newshape=[10560]) /* ty=Tensor[(10560), int8] */;
  %193 = @func_4013(%190, %191, %192) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(15, 6, 3), float32], Tensor[(1512), float32], Tensor[(2912), float64], Tensor[(12, 4, 3), float32], Tensor[(10560), int8]) */;
  %194 = cast(meta[relay.Constant][10] /* ty=Tensor[(2912), float64] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
  %195 = cast(%var_4032, dtype="int8") /* ty=int8 */;
  %196 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 480), int8] */, dtype="int8") /* ty=Tensor[(2, 480), int8] */;
  %197 = reshape(%195, newshape=[]) /* ty=int8 */;
  %198 = reshape(%196, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), int8] */;
  %199 = @func_547(%197, %198) /* ty=(Tensor[(16, 5, 12), int64],) */;
  %200 = %180.0;
  %201 = %193.2;
  %202 = exp(%194) /* ty=Tensor[(2912), float32] */;
  %203 = %199.0;
  %204 = @func_3966() /* ty=Tensor[(12, 4, 3), float32] */;
  (%200, %187, %var_4032, %201, meta[relay.Constant][11] /* ty=Tensor[(126, 12), float32] */, meta[relay.Constant][12] /* ty=Tensor[(10560), int8] */, %202, %203, meta[relay.Constant][13] /* ty=Tensor[(2, 480), int8] */, %204)
}

def @func_5081() -> (Tensor[(12, 4, 3), float32], Tensor[(1056), uint8], Tensor[(90, 3), float64]) {
  %205 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %206 = cast(meta[relay.Constant][14] /* ty=Tensor[(90, 3), int16] */, dtype="int16") /* ty=Tensor[(90, 3), int16] */;
  %207 = reshape(%206, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %208 = @func_4920(%207) /* ty=(Tensor[(3, 6, 11), int16], Tensor[(11, 6, 5), float64], Tensor[(968), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(8, 12, 11), uint8], Tensor[(1056), uint8]) */;
  %209 = cast(meta[relay.Constant][14] /* ty=Tensor[(90, 3), int16] */, dtype="float64") /* ty=Tensor[(90, 3), float64] */;
  %210 = %205.0;
  %211 = %208.7;
  %212 = sin(%209) /* ty=Tensor[(90, 3), float64] */;
  (%210, %211, %212)
}

def @func_5886(%var_5880: Tensor[(2912), float64], %var_5881: Tensor[(1, 10560), int8]) -> (Tensor[(12, 4, 3), float32], Tensor[(14, 16, 13), bool], Tensor[(2912), float64], Tensor[(1, 10560), int8]) {
  %213 = cast(%var_5880, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %214 = cast(%var_5881, dtype="int8") /* ty=Tensor[(1, 10560), int8] */;
  %215 = reshape(%213, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %216 = reshape(%214, newshape=[11, 960]) /* ty=Tensor[(11, 960), int8] */;
  %217 = @func_1019(%215, %216) /* ty=(Tensor[(16, 5, 12), int64], int8, Tensor[(2912), float64], Tensor[(11, 960), float32], Tensor[(15, 6, 3), bool], Tensor[(2, 16, 3), uint8], Tensor[(15, 6, 3), float32], Tensor[(2, 16, 3), int64], Tensor[(15, 6, 3), float32], Tensor[(1, 270), float32], Tensor[(14, 16, 13), bool]) */;
  %218 = @func_3966() /* ty=Tensor[(12, 4, 3), float32] */;
  %219 = %217.10;
  (%218, %219, %var_5880, %var_5881)
}

def @func_6747(%var_6718: Tensor[(1024), float64], %var_6740: Tensor[(1024), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(968), bool], Tensor[(1024), int64], Tensor[(4, 12, 9), float32], Tensor[(432), uint8]) {
  %220 = @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %221 = cast(%var_6718, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %222 = reshape(%221, newshape=[8, 16, 8]) /* ty=Tensor[(8, 16, 8), float64] */;
  %223 = @func_6379(%222) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 11, 11), float64], Tensor[(48), float64], Tensor[(968), bool]) */;
  %224 = cast(%var_6740, dtype="int64") /* ty=Tensor[(1024), int64] */;
  %225 = shape_of(%var_6718, dtype="int32") /* ty=Tensor[(1), int32] */;
  %226 = cast(%var_6718, dtype="int64") /* ty=Tensor[(1024), int64] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?), int64] */;
  %228 = cast(meta[relay.Constant][15] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %229 = cast(meta[relay.Constant][15] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %230 = reshape(%228, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint8] */;
  %231 = reshape(%229, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint8] */;
  %232 = @func_2117(%230, %231) /* ty=(Tensor[(4, 12, 9), uint8], Tensor[(4, 12, 9), float32]) */;
  %233 = %220.0;
  %234 = %223.3;
  %235 = bitwise_and(%226, %227) /* ty=Tensor[(1024), int64] */;
  %236 = %232.1;
  (%233, %234, %235, %236, meta[relay.Constant][15] /* ty=Tensor[(432), uint8] */)
}

def @func_7441(%var_7409: Tensor[(13, 1, 1), uint8], %var_7410: Tensor[(13, 1, 5), uint8], %var_7423: Tensor[(13, 1, 5), float32]) -> Tensor[(13, ?, 5), int64] {
  %237 = cast(%var_7409, dtype="uint8") /* ty=Tensor[(13, 1, 1), uint8] */;
  %238 = cast(%var_7410, dtype="uint8") /* ty=Tensor[(13, 1, 5), uint8] */;
  %239 = right_shift(%237, %238) /* ty=Tensor[(13, 1, 5), uint8] */;
  %240 = cast(%239, dtype="float32") /* ty=Tensor[(13, 1, 5), float32] */;
  %241 = sin(%240) /* ty=Tensor[(13, 1, 5), float32] */;
  %242 = cast(%var_7423, dtype="int64") /* ty=Tensor[(13, 1, 5), int64] */;
  %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(%241, dtype="int64") /* ty=Tensor[(13, 1, 5), int64] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %246 = left_shift(%244, %245) /* ty=Tensor[(13, ?, 5), int64] */;
  %247 = cast(%241, dtype="int64") /* ty=Tensor[(13, 1, 5), int64] */;
  %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%246, dtype="int64") /* ty=Tensor[(13, ?, 5), int64] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%249, %250) /* ty=Tensor[(13, ?, 5), int64] */
}

def @func_8492() -> Tensor[(960), int8] {
  %251 = @func_6934() /* ty=(Tensor[(960), int8],) */;
  %251.0
}

def @func_1852(%var_1842: Tensor[(8, 11, 11), float64]) -> (Tensor[(8, 11, 11), float64],) {
  %252 = cast(%var_1842, dtype="float64") /* ty=Tensor[(8, 11, 11), float64] */;
  %253 = atan(%252) /* ty=Tensor[(8, 11, 11), float64] */;
  (%253,)
}

def @func_8195(%var_8186: Tensor[(7, 4, 16), float64]) -> Tensor[(7, 4, 16), float64] {
  %254 = cast(%var_8186, dtype="float64") /* ty=Tensor[(7, 4, 16), float64] */;
  tan(%254) /* ty=Tensor[(7, 4, 16), float64] */
}

def @func_8218(%var_8212: Tensor[(11, 4, 1), float32], %var_8213: Tensor[(11, 4, 4), float32]) -> Tensor[(11, 4, 4), bool] {
  %255 = cast(%var_8212, dtype="bool") /* ty=Tensor[(11, 4, 1), bool] */;
  %256 = cast(%var_8213, dtype="bool") /* ty=Tensor[(11, 4, 4), bool] */;
  greater(%255, %256) /* ty=Tensor[(11, 4, 4), bool] */
}

def @func_5234(%var_5204: Tensor[(12, 4, 3), float32]) -> (Tensor[(12, 4, 3), float64],) {
  %257 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %258 = %257.1;
  %259 = cast(%var_5204, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %263 = mod(%261, %262) /* ty=Tensor[(12, 4, 3), float64] */;
  (%263,)
}

def @func_1343(%var_1312: Tensor[(11, 6, 5), float64], %var_1322: int8, %var_1332: Tensor[(270, 1), int16]) -> (Tensor[(16, 5, 12), int64], Tensor[(960), int8], Tensor[(11, 6, 5), bool], Tensor[(15, 6, 3), float32], Tensor[(270, 1), int16], Tensor[(11, 6, 5), float64]) {
  %264 = cast(%var_1322, dtype="int8") /* ty=int8 */;
  %265 = cast(meta[relay.Constant][16] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %266 = reshape(%264, newshape=[]) /* ty=int8 */;
  %267 = reshape(%265, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), int8] */;
  %268 = @func_547(%266, %267) /* ty=(Tensor[(16, 5, 12), int64],) */;
  %269 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(11, 6, 5), float64] */;
  %270 = shape_of(%var_1312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%var_1312, dtype="float64") /* ty=Tensor[(11, 6, 5), float64] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %273 = power(%271, %272) /* ty=Tensor[(11, 6, 5), float64] */;
  %274 = cast(%273, dtype="bool") /* ty=Tensor[(11, 6, 5), bool] */;
  %275 = cast(%var_1322, dtype="bool") /* ty=bool */;
  %276 = cast(%var_1332, dtype="int16") /* ty=Tensor[(270, 1), int16] */;
  %277 = cast(%var_1332, dtype="int16") /* ty=Tensor[(270, 1), int16] */;
  %278 = reshape(%276, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
  %279 = reshape(%277, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
  %280 = @func_198(%278, %279) /* ty=(Tensor[(15, 6, 3), int16], Tensor[(15, 6, 3), float32], Tensor[(15, 6, 3), float32]) */;
  %281 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(11, 6, 5), float64] */;
  %282 = %268.0;
  %283 = logical_or(%274, %275) /* ty=Tensor[(11, 6, 5), bool] */;
  %284 = %280.2;
  %285 = rsqrt(%281) /* ty=Tensor[(11, 6, 5), float64] */;
  (%282, meta[relay.Constant][16] /* ty=Tensor[(960), int8] */, %283, %284, %var_1332, %285)
}

def @func_547(%var_538: int8, %var_539: Tensor[(16, 5, 12), int8]) -> (Tensor[(16, 5, 12), int64],) {
  %286 = cast(%var_538, dtype="bool") /* ty=bool */;
  %287 = cast(%var_539, dtype="bool") /* ty=Tensor[(16, 5, 12), bool] */;
  %288 = not_equal(%286, %287) /* ty=Tensor[(16, 5, 12), bool] */;
  %289 = cast(%288, dtype="int64") /* ty=Tensor[(16, 5, 12), int64] */;
  %290 = shape_of(%var_539, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%var_539, dtype="int64") /* ty=Tensor[(16, 5, 12), int64] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %293 = left_shift(%291, %292) /* ty=Tensor[(16, 5, 12), int64] */;
  (%293,)
}

def @func_6551(%var_6519: Tensor[(2912), float64], %var_6520: Tensor[(10560), int8]) -> (Tensor[(12, 4, 3), float32], Tensor[(10560), int8], Tensor[(2912), float64], Tensor[(10560), int8], Tensor[(1512), int64], Tensor[(1512), float64]) {
  %294 = cast(meta[relay.Constant][18] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %295 = cast(meta[relay.Constant][18] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %296 = cast(%var_6519, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %297 = cast(%var_6520, dtype="int8") /* ty=Tensor[(10560), int8] */;
  %298 = reshape(%294, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
  %299 = reshape(%295, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
  %300 = reshape(%296, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %301 = reshape(%297, newshape=[10560]) /* ty=Tensor[(10560), int8] */;
  %302 = @func_2370(%298, %299, %300, %301) /* ty=(Tensor[(12, 9, 14), float32], Tensor[(15, 6, 3), float32], Tensor[(2912), float64], Tensor[(10560), int8]) */;
  %303 = cast(meta[relay.Constant][19] /* ty=Tensor[(1512), float32] */, dtype="int64") /* ty=Tensor[(1512), int64] */;
  %304 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(1512), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %305 = cast(meta[relay.Constant][18] /* ty=Tensor[(1512), float32] */, dtype="int64") /* ty=Tensor[(1512), int64] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?), int64] */;
  %307 = cast(meta[relay.Constant][18] /* ty=Tensor[(1512), float32] */, dtype="float64") /* ty=Tensor[(1512), float64] */;
  %308 = @func_6163() /* ty=Tensor[(12, 4, 3), float32] */;
  %309 = %302.3;
  %310 = bitwise_and(%305, %306) /* ty=Tensor[(1512), int64] */;
  %311 = sin(%307) /* ty=Tensor[(1512), float64] */;
  (%308, %309, %var_6519, %var_6520, %310, %311)
}

def @func_279(%var_243: float64, %var_244: Tensor[(14, 16, 13), float64]) -> (Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) {
  %312 = cast(%var_243, dtype="bool") /* ty=bool */;
  %313 = cast(%var_244, dtype="bool") /* ty=Tensor[(14, 16, 13), bool] */;
  %314 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 270), int16] */, dtype="int16") /* ty=Tensor[(1, 270), int16] */;
  %315 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 270), int16] */, dtype="int16") /* ty=Tensor[(1, 270), int16] */;
  %316 = reshape(%314, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
  %317 = reshape(%315, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
  %318 = @func_198(%316, %317) /* ty=(Tensor[(15, 6, 3), int16], Tensor[(15, 6, 3), float32], Tensor[(15, 6, 3), float32]) */;
  %319 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 270), int16] */, dtype="uint8") /* ty=Tensor[(1, 270), uint8] */;
  %320 = cast(%var_243, dtype="uint8") /* ty=uint8 */;
  %321 = not_equal(%312, %313) /* ty=Tensor[(14, 16, 13), bool] */;
  %322 = %318.0;
  %323 = logical_xor(%319, %320) /* ty=Tensor[(1, 270), uint8] */;
  (%321, %322, %323)
}

def @func_7032() -> (Tensor[(12, 4, 3), float32],) {
  %324 = @func_6287() /* ty=Tensor[(12, 4, 3), float32] */;
  (%324,)
}

def @func_8103(%var_8075: Tensor[(9, 15, 2), float32]) -> (Tensor[(2, 480), int8], float64, Tensor[(12, 4, 3), float32], Tensor[(968), float64], Tensor[(375), float64], Tensor[(9, 15, 2), float32]) {
  %325 = cast(-3.98815f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %326 = reshape(%325, newshape=[]) /* ty=float64 */;
  %327 = @func_4075(%326) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(14, 16, 13), bool], float64, Tensor[(1512), float32], Tensor[(126, 12), float32], Tensor[(10560), int8], Tensor[(2912), float32], Tensor[(16, 5, 12), int64], Tensor[(2, 480), int8], Tensor[(12, 4, 3), float32]) */;
  %328 = cast(meta[relay.Constant][21] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %329 = cast(meta[relay.Constant][22] /* ty=Tensor[(375), float64] */, dtype="float64") /* ty=Tensor[(375), float64] */;
  %330 = reshape(%328, newshape=[968]) /* ty=Tensor[(968), float64] */;
  %331 = reshape(%329, newshape=[375]) /* ty=Tensor[(375), float64] */;
  %332 = @func_7836(%330, %331) /* ty=(Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64], Tensor[(375), float64], Tensor[(375), float64], Tensor[(3, 6, 11), int16]) */;
  %333 = cast(%var_8075, dtype="float32") /* ty=Tensor[(9, 15, 2), float32] */;
  %334 = asin(%333) /* ty=Tensor[(9, 15, 2), float32] */;
  %335 = cast(%334, dtype="float32") /* ty=Tensor[(9, 15, 2), float32] */;
  %336 = %327.8;
  %337 = %332.1;
  %338 = sigmoid(%335) /* ty=Tensor[(9, 15, 2), float32] */;
  (%336, -3.98815f64 /* ty=float64 */, %337, meta[relay.Constant][21] /* ty=Tensor[(968), float64] */, meta[relay.Constant][22] /* ty=Tensor[(375), float64] */, %338)
}

def @func_6486(%var_6449: Tensor[(1, 11, 2), int64]) -> (Tensor[(2, 11, 2), int64], Tensor[(1, 11, 2), float64]) {
  %339 = cast(%var_6449, dtype="int64") /* ty=Tensor[(1, 11, 2), int64] */;
  %340 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 11, 2), int64] */, dtype="int64") /* ty=Tensor[(2, 11, 2), int64] */;
  %341 = cast(%var_6449, dtype="float64") /* ty=Tensor[(1, 11, 2), float64] */;
  %342 = acosh(%341) /* ty=Tensor[(1, 11, 2), float64] */;
  %343 = cast(%342, dtype="float64") /* ty=Tensor[(1, 11, 2), float64] */;
  %344 = bitwise_and(%339, %340) /* ty=Tensor[(2, 11, 2), int64] */;
  %345 = sin(%343) /* ty=Tensor[(1, 11, 2), float64] */;
  (%344, %345)
}

def @func_4196(%var_4184: Tensor[(12, 10, 10), int8]) -> Tensor[(12, 10, 10), int8] {
  %346 = cast(meta[relay.Constant][24] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %347 = cast(%var_4184, dtype="int8") /* ty=Tensor[(12, 10, 10), int8] */;
  bitwise_or(%346, %347) /* ty=Tensor[(12, 10, 10), int8] */
}

def @func_7610() -> Tensor[(12, 4, 3), float32] {
  %348 = @func_7519() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %348.1
}

def @func_5320(%var_5281: Tensor[(10, 2, 9), float32], %var_5301: Tensor[(144), float32], %var_5312: Tensor[(1512), float32], %var_5314: Tensor[(4, 2640), int8]) -> (Tensor[(10, 2, 9), float32], Tensor[(12, 4, 3), bool], Tensor[(144), float32], Tensor[(10, 2, 9), float32], Tensor[(10560), int8], Tensor[(1512), float32], Tensor[(8, 364), float64], Tensor[(4, 2640), int8]) {
  %349 = cast(%var_5281, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
  %350 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(10, 2, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %353 = mod(%351, %352) /* ty=Tensor[(10, 2, 9), float32] */;
  %354 = cast(%353, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
  %355 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(10, 2, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %358 = cast(%var_5301, dtype="float32") /* ty=Tensor[(144), float32] */;
  %359 = reshape(%358, newshape=[12, 4, 3]) /* ty=Tensor[(12, 4, 3), float32] */;
  %360 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
  %361 = shape_of(%var_5281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%var_5281, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %364 = cast(%var_5312, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %365 = cast(%var_5312, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %366 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 364), float64] */, dtype="float64") /* ty=Tensor[(8, 364), float64] */;
  %367 = cast(%var_5314, dtype="int8") /* ty=Tensor[(4, 2640), int8] */;
  %368 = reshape(%364, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
  %369 = reshape(%365, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
  %370 = reshape(%366, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %371 = reshape(%367, newshape=[10560]) /* ty=Tensor[(10560), int8] */;
  %372 = @func_2370(%368, %369, %370, %371) /* ty=(Tensor[(12, 9, 14), float32], Tensor[(15, 6, 3), float32], Tensor[(2912), float64], Tensor[(10560), int8]) */;
  %373 = floor_divide(%356, %357) /* ty=Tensor[(10, 2, 9), float32] */;
  %374 = @func_4106(%359) /* ty=Tensor[(12, 4, 3), bool] */;
  %375 = add(%362, %363) /* ty=Tensor[(10, 2, 9), float32] */;
  %376 = %372.3;
  (%373, %374, %var_5301, %375, %376, %var_5312, meta[relay.Constant][26] /* ty=Tensor[(8, 364), float64] */, %var_5314)
}

def @func_8542() -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) {
  %377 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %378 = @func_5981() /* ty=Tensor[(12, 4, 3), float32] */;
  %379 = %377.0;
  (%378, %379)
}

def @func_5550() -> (Tensor[(12, 4, 3), float32],) {
  %380 = @func_4279() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %381 = %380.0;
  (%381,)
}

def @func_6273() -> Tensor[(12, 4, 3), float64] {
  %382 = @func_5401() /* ty=(Tensor[(12, 4, 3), float64],) */;
  %382.0
}

def @func_7474(%var_7465: Tensor[(11, 8, 13), uint8]) -> Tensor[(11, 8, 13), bool] {
  %383 = cast(meta[relay.Constant][27] /* ty=Tensor[(11, 8, 13), uint8] */, dtype="bool") /* ty=Tensor[(11, 8, 13), bool] */;
  %384 = shape_of(%var_7465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%var_7465, dtype="bool") /* ty=Tensor[(11, 8, 13), bool] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%385, %386) /* ty=Tensor[(11, 8, 13), bool] */
}

def @func_6875(%var_6869: Tensor[(330), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 11, 11), float64], Tensor[(330), float64], int8) {
  %387 = @func_4279() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %388 = %387.0;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %390 = reshape(%389, newshape=[12, 4, 3]) /* ty=Tensor[(12, 4, 3), float64] */;
  %391 = @func_4704(%390) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), int8], Tensor[(12, 4, 3), int64]) */;
  %392 = cast(%388, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %393 = cast(%var_6869, dtype="float64") /* ty=Tensor[(330), float64] */;
  %394 = cast(meta[relay.Constant][28] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %395 = reshape(%393, newshape=[55, 6]) /* ty=Tensor[(55, 6), float64] */;
  %396 = reshape(%394, newshape=[]) /* ty=int8 */;
  %397 = @func_4510(%395, %396) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(4, 12, 9), uint8], Tensor[(968), float64], Tensor[(55, 6), float64], int8, Tensor[(1, 270), int16], Tensor[(8, 11, 11), float64], Tensor[(48), float64]) */;
  %398 = %391.0;
  %399 = atan(%392) /* ty=Tensor[(12, 4, 3), float64] */;
  %400 = %397.6;
  (%398, %399, %400, %var_6869, meta[relay.Constant][28] /* ty=int8 */)
}

def @func_2960(%var_2947: Tensor[(3, 6, 11), int16], %var_2954: Tensor[(960), int8]) -> (Tensor[(3, 6, 11), int16], Tensor[(16, 5, 12), int64], int8, Tensor[(960), int8]) {
  %401 = cast(meta[relay.Constant][29] /* ty=Tensor[(3, 6, 11), int16] */, dtype="int16") /* ty=Tensor[(3, 6, 11), int16] */;
  %402 = shape_of(%var_2947, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%var_2947, dtype="int16") /* ty=Tensor[(3, 6, 11), int16] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %405 = cast(meta[relay.Constant][30] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %406 = cast(%var_2954, dtype="int8") /* ty=Tensor[(960), int8] */;
  %407 = reshape(%405, newshape=[]) /* ty=int8 */;
  %408 = reshape(%406, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), int8] */;
  %409 = @func_547(%407, %408) /* ty=(Tensor[(16, 5, 12), int64],) */;
  %410 = left_shift(%403, %404) /* ty=Tensor[(3, 6, 11), int16] */;
  %411 = %409.0;
  (%410, %411, meta[relay.Constant][30] /* ty=int8 */, %var_2954)
}

def @func_4510(%var_4483: Tensor[(55, 6), float64], %var_4484: int8) -> (Tensor[(12, 4, 3), float32], Tensor[(4, 12, 9), uint8], Tensor[(968), float64], Tensor[(55, 6), float64], int8, Tensor[(1, 270), int16], Tensor[(8, 11, 11), float64], Tensor[(48), float64]) {
  %412 = @func_4279() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %413 = cast(meta[relay.Constant][31] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %414 = cast(%var_4483, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
  %415 = cast(%var_4484, dtype="int8") /* ty=int8 */;
  %416 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 270), int16] */, dtype="int16") /* ty=Tensor[(1, 270), int16] */;
  %417 = reshape(%413, newshape=[968]) /* ty=Tensor[(968), float64] */;
  %418 = reshape(%414, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %419 = reshape(%415, newshape=[]) /* ty=int8 */;
  %420 = reshape(%416, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %421 = @func_2720(%417, %418, %419, %420) /* ty=(Tensor[(8, 11, 11), float64], Tensor[(5, 9, 7), float64], Tensor[(4, 12, 9), float32], Tensor[(432), uint8], Tensor[(5, 9, 7), float64], Tensor[(11, 6, 5), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(5, 9, 7), int8], Tensor[(4, 12, 9), uint8], Tensor[(968), float64]) */;
  %422 = cast(meta[relay.Constant][33] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %423 = cast(meta[relay.Constant][31] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %424 = reshape(%422, newshape=[1, 12, 4]) /* ty=Tensor[(1, 12, 4), float64] */;
  %425 = reshape(%423, newshape=[22, 44]) /* ty=Tensor[(22, 44), float64] */;
  %426 = @func_4392(%424, %425) /* ty=(Tensor[(8, 11, 11), float64], Tensor[(22, 44), float64], Tensor[(1, 12, 4), float32]) */;
  %427 = %412.0;
  %428 = %421.10;
  %429 = %426.0;
  (%427, %428, meta[relay.Constant][31] /* ty=Tensor[(968), float64] */, %var_4483, %var_4484, meta[relay.Constant][32] /* ty=Tensor[(1, 270), int16] */, %429, meta[relay.Constant][33] /* ty=Tensor[(48), float64] */)
}

def @func_5401() -> (Tensor[(12, 4, 3), float64],) {
  %430 = @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */;
  %431 = %430.4;
  (%431,)
}

def @func_7094(%var_7081: Tensor[(330), float64], %var_7082: int8, %var_7084: Tensor[(10560), int8]) -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32], Tensor[(2912), float64], Tensor[(2912), float64], Tensor[(10560), float32], Tensor[(12, 4, 3), float32], Tensor[(330), float64], int8, Tensor[(10560), float64]) {
  %432 = cast(meta[relay.Constant][34] /* ty=Tensor[(2912), float64] */, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %433 = cast(meta[relay.Constant][35] /* ty=Tensor[(10560), int8] */, dtype="int8") /* ty=Tensor[(10560), int8] */;
  %434 = reshape(%432, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %435 = reshape(%433, newshape=[10560]) /* ty=Tensor[(10560), int8] */;
  %436 = @func_6551(%434, %435) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(10560), int8], Tensor[(2912), float64], Tensor[(10560), int8], Tensor[(1512), int64], Tensor[(1512), float64]) */;
  %437 = cast(meta[relay.Constant][36] /* ty=Tensor[(10560), int8] */, dtype="float32") /* ty=Tensor[(10560), float32] */;
  %438 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(10560), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %439 = cast(meta[relay.Constant][35] /* ty=Tensor[(10560), int8] */, dtype="float32") /* ty=Tensor[(10560), float32] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?), float32] */;
  %441 = cast(%var_7081, dtype="float64") /* ty=Tensor[(330), float64] */;
  %442 = cast(%var_7082, dtype="int8") /* ty=int8 */;
  %443 = reshape(%441, newshape=[55, 6]) /* ty=Tensor[(55, 6), float64] */;
  %444 = reshape(%442, newshape=[]) /* ty=int8 */;
  %445 = @func_4510(%443, %444) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(4, 12, 9), uint8], Tensor[(968), float64], Tensor[(55, 6), float64], int8, Tensor[(1, 270), int16], Tensor[(8, 11, 11), float64], Tensor[(48), float64]) */;
  %446 = cast(%var_7084, dtype="float64") /* ty=Tensor[(10560), float64] */;
  %447 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(10560), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %448 = cast(meta[relay.Constant][36] /* ty=Tensor[(10560), int8] */, dtype="float64") /* ty=Tensor[(10560), float64] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?), float64] */;
  %450 = @func_6163() /* ty=Tensor[(12, 4, 3), float32] */;
  %451 = @func_5644() /* ty=Tensor[(12, 4, 3), float32] */;
  %452 = %436.2;
  %453 = floor_mod(%439, %440) /* ty=Tensor[(10560), float32] */;
  %454 = %445.0;
  %455 = mod(%448, %449) /* ty=Tensor[(10560), float64] */;
  (%450, %451, %452, meta[relay.Constant][34] /* ty=Tensor[(2912), float64] */, %453, %454, %var_7081, %var_7082, %455)
}

def @func_3609(%var_3586: Tensor[(7, 12, 4), float64], %var_3593: float64, %var_3594: Tensor[(104, 28), float64]) -> (Tensor[(7, 12, 4), float64], Tensor[(14, 16, 13), bool], float64, Tensor[(104, 28), float64]) {
  %456 = cast(%var_3586, dtype="float64") /* ty=Tensor[(7, 12, 4), float64] */;
  %457 = cast(%var_3593, dtype="float64") /* ty=float64 */;
  %458 = cast(%var_3594, dtype="float64") /* ty=Tensor[(104, 28), float64] */;
  %459 = reshape(%457, newshape=[]) /* ty=float64 */;
  %460 = reshape(%458, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
  %461 = @func_279(%459, %460) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
  %462 = sin(%456) /* ty=Tensor[(7, 12, 4), float64] */;
  %463 = %461.0;
  (%462, %463, %var_3593, %var_3594)
}

def @func_7723(%var_7721: Tensor[(2912, 1), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(2912), float64], Tensor[(2912, 1), float64]) {
  %464 = @func_6319() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %465 = cast(%var_7721, dtype="float64") /* ty=Tensor[(2912, 1), float64] */;
  %466 = reshape(%465, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %467 = @func_5529(%466) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(90, 3), bool], Tensor[(14, 16, 13), bool], float64, Tensor[(2912), float64]) */;
  %468 = %464.0;
  %469 = %467.4;
  (%468, %469, %var_7721)
}

def @func_4013(%var_3995: Tensor[(1512), float32], %var_3996: Tensor[(2912), float64], %var_4002: Tensor[(10560), int8]) -> (Tensor[(12, 4, 3), float32], Tensor[(15, 6, 3), float32], Tensor[(1512), float32], Tensor[(2912), float64], Tensor[(12, 4, 3), float32], Tensor[(10560), int8]) {
  %470 = cast(%var_3995, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %471 = cast(%var_3995, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %472 = cast(%var_3996, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %473 = cast(meta[relay.Constant][37] /* ty=Tensor[(10560), int8] */, dtype="int8") /* ty=Tensor[(10560), int8] */;
  %474 = reshape(%470, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
  %475 = reshape(%471, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
  %476 = reshape(%472, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %477 = reshape(%473, newshape=[10560]) /* ty=Tensor[(10560), int8] */;
  %478 = @func_2370(%474, %475, %476, %477) /* ty=(Tensor[(12, 9, 14), float32], Tensor[(15, 6, 3), float32], Tensor[(2912), float64], Tensor[(10560), int8]) */;
  %479 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %480 = cast(%var_4002, dtype="int8") /* ty=Tensor[(10560), int8] */;
  %481 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(10560), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %482 = cast(meta[relay.Constant][37] /* ty=Tensor[(10560), int8] */, dtype="int8") /* ty=Tensor[(10560), int8] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?), int8] */;
  %484 = @func_3966() /* ty=Tensor[(12, 4, 3), float32] */;
  %485 = %478.1;
  %486 = %479.0;
  %487 = minimum(%482, %483) /* ty=Tensor[(10560), int8] */;
  (%484, %485, %var_3995, %var_3996, %486, %487)
}

def @func_6049(%var_6022: Tensor[(968), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(8, 11, 11), float64], Tensor[(968), float64], Tensor[(270, 1), int16], Tensor[(330), float64], int8, Tensor[(3, 90), int16]) {
  %488 = @func_4279() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %489 = cast(%var_6022, dtype="float64") /* ty=Tensor[(968), float64] */;
  %490 = reshape(%489, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
  %491 = @func_1852(%490) /* ty=(Tensor[(8, 11, 11), float64],) */;
  %492 = cast(meta[relay.Constant][38] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %493 = cast(meta[relay.Constant][39] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %494 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 90), int16] */, dtype="int16") /* ty=Tensor[(3, 90), int16] */;
  %495 = reshape(%492, newshape=[55, 6]) /* ty=Tensor[(55, 6), float64] */;
  %496 = reshape(%493, newshape=[]) /* ty=int8 */;
  %497 = reshape(%494, newshape=[6, 45]) /* ty=Tensor[(6, 45), int16] */;
  %498 = @func_4866(%495, %496, %497) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(270, 1), int16], Tensor[(55, 6), float64], int8, Tensor[(6, 45), int16]) */;
  %499 = %488.0;
  %500 = %491.0;
  %501 = %498.1;
  (%499, %500, %var_6022, %501, meta[relay.Constant][38] /* ty=Tensor[(330), float64] */, meta[relay.Constant][39] /* ty=int8 */, meta[relay.Constant][40] /* ty=Tensor[(3, 90), int16] */)
}

def @func_7706(%var_7699: Tensor[(90, 3), float64]) -> (Tensor[(90, 3), int32],) {
  %502 = @func_5081() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(1056), uint8], Tensor[(90, 3), float64]) */;
  %503 = %502.2;
  %504 = cast(%var_7699, dtype="int32") /* ty=Tensor[(90, 3), int32] */;
  %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(2), int32] */;
  %506 = cast(%503, dtype="int32") /* ty=Tensor[(90, 3), int32] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %508 = logical_xor(%506, %507) /* ty=Tensor[(90, 3), int32] */;
  (%508,)
}

def @func_3966() -> Tensor[(12, 4, 3), float32] {
  %509 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %509.0
}

def @func_2117(%var_2093: Tensor[(4, 12, 9), uint8], %var_2094: Tensor[(4, 12, 9), uint8]) -> (Tensor[(4, 12, 9), uint8], Tensor[(4, 12, 9), float32]) {
  %510 = cast(%var_2094, dtype="uint8") /* ty=Tensor[(4, 12, 9), uint8] */;
  %511 = shape_of(%var_2093, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%var_2093, dtype="uint8") /* ty=Tensor[(4, 12, 9), uint8] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %514 = cast(%var_2093, dtype="float32") /* ty=Tensor[(4, 12, 9), float32] */;
  %515 = add(%512, %513) /* ty=Tensor[(4, 12, 9), uint8] */;
  %516 = sin(%514) /* ty=Tensor[(4, 12, 9), float32] */;
  (%515, %516)
}

def @func_7519() -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) {
  %517 = @func_3966() /* ty=Tensor[(12, 4, 3), float32] */;
  %518 = @func_6163() /* ty=Tensor[(12, 4, 3), float32] */;
  (%517, %518)
}

def @func_6638() -> (Tensor[(12, 4, 3), float64],) {
  %519 = @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */;
  %520 = %519.4;
  (%520,)
}

def @func_7944() -> Tensor[(12, 4, 3), float32] {
  %521 = @func_4562() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %521.0
}

def @func_8720() -> (Tensor[(12, 4, 3), float32],) {
  %522 = @func_5644() /* ty=Tensor[(12, 4, 3), float32] */;
  (%522,)
}

def @func_4279() -> (Tensor[(12, 4, 3), float32],) {
  %523 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %524 = %523.1;
  (%524,)
}

def @func_3943(%var_3907: Tensor[(330, 1), float64], %var_3921: Tensor[(1056), uint8]) -> (Tensor[(12, 4, 3), float32], Tensor[(5, 9, 7), int8], Tensor[(330, 1), float64], int8, Tensor[(270), int16], Tensor[(8, 12, 11), uint8], Tensor[(1056), uint8], Tensor[(?, 968), int8]) {
  %525 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %526 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 968), float64] */, dtype="float64") /* ty=Tensor[(1, 968), float64] */;
  %527 = cast(%var_3907, dtype="float64") /* ty=Tensor[(330, 1), float64] */;
  %528 = cast(meta[relay.Constant][42] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %529 = cast(meta[relay.Constant][43] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
  %530 = reshape(%526, newshape=[968]) /* ty=Tensor[(968), float64] */;
  %531 = reshape(%527, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %532 = reshape(%528, newshape=[]) /* ty=int8 */;
  %533 = reshape(%529, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %534 = @func_2720(%530, %531, %532, %533) /* ty=(Tensor[(8, 11, 11), float64], Tensor[(5, 9, 7), float64], Tensor[(4, 12, 9), float32], Tensor[(432), uint8], Tensor[(5, 9, 7), float64], Tensor[(11, 6, 5), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(5, 9, 7), int8], Tensor[(4, 12, 9), uint8], Tensor[(968), float64]) */;
  %535 = cast(%var_3921, dtype="uint8") /* ty=Tensor[(1056), uint8] */;
  %536 = cast(%var_3921, dtype="uint8") /* ty=Tensor[(1056), uint8] */;
  %537 = reshape(%535, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
  %538 = reshape(%536, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
  %539 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 968), float64] */, dtype="int8") /* ty=Tensor[(1, 968), int8] */;
  %540 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(1, 968), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %541 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 968), float64] */, dtype="int8") /* ty=Tensor[(1, 968), int8] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %543 = %525.0;
  %544 = %534.9;
  %545 = @func_2826(%537, %538) /* ty=Tensor[(8, 12, 11), uint8] */;
  %546 = subtract(%541, %542) /* ty=Tensor[(?, 968), int8] */;
  (%543, %544, %var_3907, meta[relay.Constant][42] /* ty=int8 */, meta[relay.Constant][43] /* ty=Tensor[(270), int16] */, %545, %var_3921, %546)
}

def @func_2720(%var_2661: Tensor[(968), float64], %var_2690: Tensor[(330), float64], %var_2691: int8, %var_2692: Tensor[(270), int16]) -> (Tensor[(8, 11, 11), float64], Tensor[(5, 9, 7), float64], Tensor[(4, 12, 9), float32], Tensor[(432), uint8], Tensor[(5, 9, 7), float64], Tensor[(11, 6, 5), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(5, 9, 7), int8], Tensor[(4, 12, 9), uint8], Tensor[(968), float64]) {
  %547 = cast(%var_2661, dtype="float64") /* ty=Tensor[(968), float64] */;
  %548 = reshape(%547, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
  %549 = @func_1852(%548) /* ty=(Tensor[(8, 11, 11), float64],) */;
  %550 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 9, 7), float32] */, dtype="float32") /* ty=Tensor[(5, 9, 7), float32] */;
  %551 = sin(%550) /* ty=Tensor[(5, 9, 7), float32] */;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(5, 9, 7), float64] */;
  %553 = cast(meta[relay.Constant][46] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %554 = cast(meta[relay.Constant][46] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %555 = reshape(%553, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint8] */;
  %556 = reshape(%554, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint8] */;
  %557 = @func_2117(%555, %556) /* ty=(Tensor[(4, 12, 9), uint8], Tensor[(4, 12, 9), float32]) */;
  %558 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 9, 7), float32] */, dtype="bool") /* ty=Tensor[(5, 9, 7), bool] */;
  %559 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%551, dtype="bool") /* ty=Tensor[(5, 9, 7), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %562 = logical_and(%560, %561) /* ty=Tensor[(5, 9, 7), bool] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(5, 9, 7), float64] */;
  %564 = cast(%var_2690, dtype="float64") /* ty=Tensor[(330), float64] */;
  %565 = cast(%var_2691, dtype="int8") /* ty=int8 */;
  %566 = cast(%var_2692, dtype="int16") /* ty=Tensor[(270), int16] */;
  %567 = reshape(%564, newshape=[11, 6, 5]) /* ty=Tensor[(11, 6, 5), float64] */;
  %568 = reshape(%565, newshape=[]) /* ty=int8 */;
  %569 = reshape(%566, newshape=[270, 1]) /* ty=Tensor[(270, 1), int16] */;
  %570 = @func_1343(%567, %568, %569) /* ty=(Tensor[(16, 5, 12), int64], Tensor[(960), int8], Tensor[(11, 6, 5), bool], Tensor[(15, 6, 3), float32], Tensor[(270, 1), int16], Tensor[(11, 6, 5), float64]) */;
  %571 = cast(%551, dtype="int8") /* ty=Tensor[(5, 9, 7), int8] */;
  %572 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%562, dtype="int8") /* ty=Tensor[(5, 9, 7), int8] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %575 = cast(meta[relay.Constant][46] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
  %576 = %557.1;
  %577 = cast(%576, dtype="uint8") /* ty=Tensor[(4, 12, 9), uint8] */;
  %578 = reshape(%575, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint8] */;
  %579 = reshape(%577, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint8] */;
  %580 = @func_2117(%578, %579) /* ty=(Tensor[(4, 12, 9), uint8], Tensor[(4, 12, 9), float32]) */;
  %581 = cast(%var_2661, dtype="float64") /* ty=Tensor[(968), float64] */;
  %582 = %549.0;
  %583 = acosh(%552) /* ty=Tensor[(5, 9, 7), float64] */;
  %584 = log2(%563) /* ty=Tensor[(5, 9, 7), float64] */;
  %585 = %570.5;
  %586 = multiply(%573, %574) /* ty=Tensor[(5, 9, 7), int8] */;
  %587 = %580.0;
  %588 = sinh(%581) /* ty=Tensor[(968), float64] */;
  (%582, %583, %576, meta[relay.Constant][46] /* ty=Tensor[(432), uint8] */, %584, %585, %var_2690, %var_2691, %var_2692, %586, %587, %588)
}

def @func_1019(%var_946: Tensor[(2912), float64], %var_952: Tensor[(11, 960), int8]) -> (Tensor[(16, 5, 12), int64], int8, Tensor[(2912), float64], Tensor[(11, 960), float32], Tensor[(15, 6, 3), bool], Tensor[(2, 16, 3), uint8], Tensor[(15, 6, 3), float32], Tensor[(2, 16, 3), int64], Tensor[(15, 6, 3), float32], Tensor[(1, 270), float32], Tensor[(14, 16, 13), bool]) {
  %589 = cast(meta[relay.Constant][47] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %590 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 960), int8] */, dtype="int8") /* ty=Tensor[(1, 960), int8] */;
  %591 = reshape(%589, newshape=[]) /* ty=int8 */;
  %592 = reshape(%590, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), int8] */;
  %593 = @func_547(%591, %592) /* ty=(Tensor[(16, 5, 12), int64],) */;
  %594 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 960), int8] */, dtype="float32") /* ty=Tensor[(1, 960), float32] */;
  %595 = cast(%var_952, dtype="float32") /* ty=Tensor[(11, 960), float32] */;
  %596 = cast(meta[relay.Constant][47] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %597 = cast(%var_946, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %598 = reshape(%596, newshape=[]) /* ty=float64 */;
  %599 = reshape(%597, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
  %600 = @func_279(%598, %599) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
  %601 = %600.1;
  %602 = cast(meta[relay.Constant][47] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %603 = cast(%var_946, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %604 = reshape(%602, newshape=[]) /* ty=float64 */;
  %605 = reshape(%603, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
  %606 = @func_279(%604, %605) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
  %607 = %606.2;
  %608 = cast(%607, dtype="bool") /* ty=Tensor[(1, 270), bool] */;
  %609 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%601, dtype="bool") /* ty=Tensor[(15, 6, 3), bool] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %612 = cast(meta[relay.Constant][49] /* ty=Tensor[(2, 16, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %613 = log2(%612) /* ty=Tensor[(2, 16, 3), float64] */;
  %614 = cast(meta[relay.Constant][49] /* ty=Tensor[(2, 16, 3), float64] */, dtype="uint8") /* ty=Tensor[(2, 16, 3), uint8] */;
  %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%613, dtype="uint8") /* ty=Tensor[(2, 16, 3), uint8] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %618 = cast(%601, dtype="int16") /* ty=Tensor[(15, 6, 3), int16] */;
  %619 = cast(%601, dtype="int16") /* ty=Tensor[(15, 6, 3), int16] */;
  %620 = reshape(%618, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
  %621 = reshape(%619, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
  %622 = @func_198(%620, %621) /* ty=(Tensor[(15, 6, 3), int16], Tensor[(15, 6, 3), float32], Tensor[(15, 6, 3), float32]) */;
  %623 = cast(%613, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %624 = sin(%623) /* ty=Tensor[(2, 16, 3), float64] */;
  %625 = cast(%613, dtype="int64") /* ty=Tensor[(2, 16, 3), int64] */;
  %626 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%624, dtype="int64") /* ty=Tensor[(2, 16, 3), int64] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %629 = logical_and(%610, %611) /* ty=Tensor[(15, 6, 3), bool] */;
  %630 = cast(%629, dtype="int16") /* ty=Tensor[(15, 6, 3), int16] */;
  %631 = cast(%629, dtype="int16") /* ty=Tensor[(15, 6, 3), int16] */;
  %632 = reshape(%630, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
  %633 = reshape(%631, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
  %634 = @func_198(%632, %633) /* ty=(Tensor[(15, 6, 3), int16], Tensor[(15, 6, 3), float32], Tensor[(15, 6, 3), float32]) */;
  %635 = cast(meta[relay.Constant][47] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %636 = cast(%var_946, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %637 = reshape(%635, newshape=[]) /* ty=float64 */;
  %638 = reshape(%636, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
  %639 = @func_279(%637, %638) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
  %640 = %639.2;
  %641 = cast(%640, dtype="float32") /* ty=Tensor[(1, 270), float32] */;
  %642 = cast(meta[relay.Constant][47] /* ty=int8 */, dtype="float64") /* ty=float64 */;
  %643 = cast(%var_946, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %644 = reshape(%642, newshape=[]) /* ty=float64 */;
  %645 = reshape(%643, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
  %646 = @func_279(%644, %645) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
  %647 = %593.0;
  %648 = power(%594, %595) /* ty=Tensor[(11, 960), float32] */;
  %649 = multiply(%616, %617) /* ty=Tensor[(2, 16, 3), uint8] */;
  %650 = %622.1;
  %651 = maximum(%627, %628) /* ty=Tensor[(2, 16, 3), int64] */;
  %652 = %634.1;
  %653 = cos(%641) /* ty=Tensor[(1, 270), float32] */;
  %654 = %646.0;
  (%647, meta[relay.Constant][47] /* ty=int8 */, %var_946, %648, %629, %649, %650, %651, %652, %653, %654)
}

def @func_4920(%var_4908: Tensor[(270), int16]) -> (Tensor[(3, 6, 11), int16], Tensor[(11, 6, 5), float64], Tensor[(968), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(8, 12, 11), uint8], Tensor[(1056), uint8]) {
  %655 = @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */;
  %656 = cast(meta[relay.Constant][50] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %657 = cast(meta[relay.Constant][51] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %658 = cast(meta[relay.Constant][52] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %659 = cast(%var_4908, dtype="int16") /* ty=Tensor[(270), int16] */;
  %660 = reshape(%656, newshape=[968]) /* ty=Tensor[(968), float64] */;
  %661 = reshape(%657, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %662 = reshape(%658, newshape=[]) /* ty=int8 */;
  %663 = reshape(%659, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %664 = @func_2720(%660, %661, %662, %663) /* ty=(Tensor[(8, 11, 11), float64], Tensor[(5, 9, 7), float64], Tensor[(4, 12, 9), float32], Tensor[(432), uint8], Tensor[(5, 9, 7), float64], Tensor[(11, 6, 5), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(5, 9, 7), int8], Tensor[(4, 12, 9), uint8], Tensor[(968), float64]) */;
  %665 = cast(meta[relay.Constant][53] /* ty=Tensor[(1056), uint8] */, dtype="uint8") /* ty=Tensor[(1056), uint8] */;
  %666 = cast(meta[relay.Constant][53] /* ty=Tensor[(1056), uint8] */, dtype="uint8") /* ty=Tensor[(1056), uint8] */;
  %667 = reshape(%665, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
  %668 = reshape(%666, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
  %669 = %655.3;
  %670 = %664.5;
  %671 = @func_2826(%667, %668) /* ty=Tensor[(8, 12, 11), uint8] */;
  (%669, %670, meta[relay.Constant][50] /* ty=Tensor[(968), float64] */, meta[relay.Constant][51] /* ty=Tensor[(330), float64] */, meta[relay.Constant][52] /* ty=int8 */, %var_4908, %671, meta[relay.Constant][53] /* ty=Tensor[(1056), uint8] */)
}

def @func_8941() -> Tensor[(12, 4, 3), float32] {
  %672 = @func_5091() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %672.0
}

def @func_8463(%var_8433: Tensor[(2912), float64]) -> (Tensor[(960), int8], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32], Tensor[(2912), bool]) {
  %673 = @func_6934() /* ty=(Tensor[(960), int8],) */;
  %674 = @func_6905() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %675 = cast(%var_8433, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %676 = reshape(%675, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %677 = @func_5529(%676) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(90, 3), bool], Tensor[(14, 16, 13), bool], float64, Tensor[(2912), float64]) */;
  %678 = cast(meta[relay.Constant][54] /* ty=Tensor[(2912), float64] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %679 = shape_of(%var_8433, dtype="int32") /* ty=Tensor[(1), int32] */;
  %680 = cast(%var_8433, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?), bool] */;
  %682 = %673.0;
  %683 = %674.0;
  %684 = %677.0;
  %685 = less_equal(%680, %681) /* ty=Tensor[(2912), bool] */;
  (%682, %683, %684, %685)
}

def @func_6934() -> (Tensor[(960), int8],) {
  %686 = @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */;
  %687 = %686.1;
  (%687,)
}

def @func_6237(%var_6229: Tensor[(2, 2, 4), uint16], %var_6230: Tensor[(2, 2, 4), uint16]) -> (Tensor[(2, 2, 4), uint16],) {
  %688 = cast(%var_6230, dtype="uint16") /* ty=Tensor[(2, 2, 4), uint16] */;
  %689 = shape_of(%var_6229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%var_6229, dtype="uint16") /* ty=Tensor[(2, 2, 4), uint16] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %692 = subtract(%690, %691) /* ty=Tensor[(2, 2, 4), uint16] */;
  (%692,)
}

def @func_4392(%var_4360: Tensor[(1, 12, 4), float64], %var_4366: Tensor[(22, 44), float64]) -> (Tensor[(8, 11, 11), float64], Tensor[(22, 44), float64], Tensor[(1, 12, 4), float32]) {
  %693 = cast(%var_4366, dtype="float64") /* ty=Tensor[(22, 44), float64] */;
  %694 = reshape(%693, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
  %695 = @func_1852(%694) /* ty=(Tensor[(8, 11, 11), float64],) */;
  %696 = cast(%var_4360, dtype="float64") /* ty=Tensor[(1, 12, 4), float64] */;
  %697 = cos(%696) /* ty=Tensor[(1, 12, 4), float64] */;
  %698 = cast(%697, dtype="float32") /* ty=Tensor[(1, 12, 4), float32] */;
  %699 = %695.0;
  %700 = log(%698) /* ty=Tensor[(1, 12, 4), float32] */;
  (%699, %var_4366, %700)
}

def @func_4704(%var_4688: Tensor[(12, 4, 3), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), int8], Tensor[(12, 4, 3), int64]) {
  %701 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %702 = @func_3966() /* ty=Tensor[(12, 4, 3), float32] */;
  %703 = cast(%702, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %704 = sinh(%703) /* ty=Tensor[(12, 4, 3), float64] */;
  %705 = cast(%704, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %706 = cast(%704, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %707 = sqrt(%706) /* ty=Tensor[(12, 4, 3), float64] */;
  %708 = cast(%var_4688, dtype="int8") /* ty=Tensor[(12, 4, 3), int8] */;
  %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%707, dtype="int8") /* ty=Tensor[(12, 4, 3), int8] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %712 = cast(%704, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %713 = reshape(%712, newshape=[12, 4, 3]) /* ty=Tensor[(12, 4, 3), float32] */;
  %714 = @func_4262(%713) /* ty=(Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32]) */;
  %715 = %714.0;
  %716 = cast(%704, dtype="int64") /* ty=Tensor[(12, 4, 3), int64] */;
  %717 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
  %718 = cast(%715, dtype="int64") /* ty=Tensor[(12, 4, 3), int64] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %720 = %701.1;
  %721 = log2(%705) /* ty=Tensor[(12, 4, 3), float64] */;
  %722 = minimum(%710, %711) /* ty=Tensor[(12, 4, 3), int8] */;
  %723 = bitwise_and(%718, %719) /* ty=Tensor[(12, 4, 3), int64] */;
  (%720, %721, %722, %723)
}

def @func_8599() -> Tensor[(12, 4, 3), float32] {
  @func_7944() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_5644() -> Tensor[(12, 4, 3), float32] {
  %724 = @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %724.0
}

def @func_2370(%var_2351: Tensor[(12, 9, 14), float32], %var_2352: Tensor[(12, 9, 14), float32], %var_2364: Tensor[(2912), float64], %var_2365: Tensor[(10560), int8]) -> (Tensor[(12, 9, 14), float32], Tensor[(15, 6, 3), float32], Tensor[(2912), float64], Tensor[(10560), int8]) {
  %725 = cast(%var_2352, dtype="float32") /* ty=Tensor[(12, 9, 14), float32] */;
  %726 = shape_of(%var_2351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%var_2351, dtype="float32") /* ty=Tensor[(12, 9, 14), float32] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %729 = cast(%var_2364, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %730 = cast(%var_2365, dtype="int8") /* ty=Tensor[(10560), int8] */;
  %731 = reshape(%729, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %732 = reshape(%730, newshape=[11, 960]) /* ty=Tensor[(11, 960), int8] */;
  %733 = @func_1019(%731, %732) /* ty=(Tensor[(16, 5, 12), int64], int8, Tensor[(2912), float64], Tensor[(11, 960), float32], Tensor[(15, 6, 3), bool], Tensor[(2, 16, 3), uint8], Tensor[(15, 6, 3), float32], Tensor[(2, 16, 3), int64], Tensor[(15, 6, 3), float32], Tensor[(1, 270), float32], Tensor[(14, 16, 13), bool]) */;
  %734 = divide(%727, %728) /* ty=Tensor[(12, 9, 14), float32] */;
  %735 = %733.6;
  (%734, %735, %var_2364, %var_2365)
}

def @func_5529(%var_5517: Tensor[(2912), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(90, 3), bool], Tensor[(14, 16, 13), bool], float64, Tensor[(2912), float64]) {
  %736 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %737 = @func_5081() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(1056), uint8], Tensor[(90, 3), float64]) */;
  %738 = %737.2;
  %739 = cast(meta[relay.Constant][55] /* ty=Tensor[(90, 3), float64] */, dtype="bool") /* ty=Tensor[(90, 3), bool] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(2), int32] */;
  %741 = cast(%738, dtype="bool") /* ty=Tensor[(90, 3), bool] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %743 = cast(6.84076f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %744 = cast(%var_5517, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %745 = reshape(%743, newshape=[]) /* ty=float64 */;
  %746 = reshape(%744, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
  %747 = @func_279(%745, %746) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
  %748 = %736.0;
  %749 = not_equal(%741, %742) /* ty=Tensor[(90, 3), bool] */;
  %750 = %747.0;
  (%748, %749, %750, 6.84076f64 /* ty=float64 */, %var_5517)
}

def @func_8670(%var_8653: Tensor[(1, 1056), uint8], %var_8658: Tensor[(8, 3, 14), float32]) -> (Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 12, 11), uint8], Tensor[(1, 1056), uint8], Tensor[(8, 3, 14), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) {
  %751 = @func_8163() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %752 = cast(%var_8653, dtype="uint8") /* ty=Tensor[(1, 1056), uint8] */;
  %753 = cast(%var_8653, dtype="uint8") /* ty=Tensor[(1, 1056), uint8] */;
  %754 = reshape(%752, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
  %755 = reshape(%753, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
  %756 = cast(meta[relay.Constant][56] /* ty=Tensor[(8, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(8, 3, 14), float32] */;
  %757 = sinh(%756) /* ty=Tensor[(8, 3, 14), float32] */;
  %758 = cast(%var_8658, dtype="float64") /* ty=Tensor[(8, 3, 14), float64] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%757, dtype="float64") /* ty=Tensor[(8, 3, 14), float64] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %762 = cast(meta[relay.Constant][57] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %763 = reshape(%762, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
  %764 = @func_1852(%763) /* ty=(Tensor[(8, 11, 11), float64],) */;
  %765 = @func_6620() /* ty=Tensor[(3, 6, 11), int16] */;
  %766 = %751.0;
  %767 = @func_6273() /* ty=Tensor[(12, 4, 3), float64] */;
  %768 = @func_2826(%754, %755) /* ty=Tensor[(8, 12, 11), uint8] */;
  %769 = mod(%760, %761) /* ty=Tensor[(8, 3, 14), float64] */;
  %770 = %764.0;
  (%765, %766, %767, %768, %var_8653, %769, %770, meta[relay.Constant][57] /* ty=Tensor[(968), float64] */)
}

def @func_5130(%var_5125: Tensor[(12, 4, 3), bool]) -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), bool]) {
  %771 = @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %772 = %771.0;
  %773 = cast(%772, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %774 = reshape(%773, newshape=[12, 4, 3]) /* ty=Tensor[(12, 4, 3), float32] */;
  %775 = @func_4106(%774) /* ty=Tensor[(12, 4, 3), bool] */;
  %776 = cast(%var_5125, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%775, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %780 = less_equal(%778, %779) /* ty=Tensor[(12, 4, 3), bool] */;
  (%772, %780)
}

def @func_6163() -> Tensor[(12, 4, 3), float32] {
  @func_5644() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_4896() -> (Tensor[(12, 4, 3), float32],) {
  %781 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %782 = %781.1;
  (%782,)
}

def @func_7342() -> Tensor[(12, 4, 3), float32] {
  %783 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %783.0
}

def @func_7860() -> (Tensor[(1056), uint8],) {
  %784 = @func_5081() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(1056), uint8], Tensor[(90, 3), float64]) */;
  %785 = %784.1;
  (%785,)
}

def @func_6905() -> (Tensor[(12, 4, 3), float32],) {
  %786 = @func_5803() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %787 = %786.0;
  (%787,)
}

def @func_5254() -> Tensor[(12, 4, 3), float32] {
  %788 = @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %788.0
}

def @func_7836(%var_7806: Tensor[(968), float64], %var_7821: Tensor[(375), float64]) -> (Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64], Tensor[(375), float64], Tensor[(375), float64], Tensor[(3, 6, 11), int16]) {
  %789 = @func_7519() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %790 = @func_4279() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %791 = %790.0;
  %792 = cast(%791, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %793 = cast(%var_7806, dtype="float64") /* ty=Tensor[(968), float64] */;
  %794 = reshape(%793, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
  %795 = @func_1852(%794) /* ty=(Tensor[(8, 11, 11), float64],) */;
  %796 = cast(%var_7821, dtype="float64") /* ty=Tensor[(375), float64] */;
  %797 = reshape(%796, newshape=[375]) /* ty=Tensor[(375), float64] */;
  %798 = @func_5961(%797) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(5, 15, 5), int32], Tensor[(375), float64]) */;
  %799 = @func_6273() /* ty=Tensor[(12, 4, 3), float64] */;
  %800 = %789.1;
  %801 = acosh(%792) /* ty=Tensor[(12, 4, 3), float64] */;
  %802 = %795.0;
  %803 = %798.2;
  %804 = @func_6620() /* ty=Tensor[(3, 6, 11), int16] */;
  (%799, %800, %801, %802, %var_7806, %803, %var_7821, %804)
}

def @func_5981() -> Tensor[(12, 4, 3), float32] {
  %805 = @func_4562() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %805.0
}

def @func_3982() -> Tensor[(12, 4, 3), float32] {
  @func_3966() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_5091() -> (Tensor[(12, 4, 3), float32],) {
  %806 = @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %807 = %806.0;
  (%807,)
}

def @func_9059(%var_9035: Tensor[(1056), uint8]) -> (Tensor[(12, 4, 3), float32], Tensor[(8, 12, 11), uint8], Tensor[(1056), float64], Tensor[(12, 4, 3), float32]) {
  %808 = @func_5091() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %809 = cast(%var_9035, dtype="uint8") /* ty=Tensor[(1056), uint8] */;
  %810 = cast(%var_9035, dtype="uint8") /* ty=Tensor[(1056), uint8] */;
  %811 = reshape(%809, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
  %812 = reshape(%810, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
  %813 = cast(%var_9035, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %814 = %808.0;
  %815 = @func_2826(%811, %812) /* ty=Tensor[(8, 12, 11), uint8] */;
  %816 = sqrt(%813) /* ty=Tensor[(1056), float64] */;
  %817 = @func_7944() /* ty=Tensor[(12, 4, 3), float32] */;
  (%814, %815, %816, %817)
}

def @func_8782(%var_8744: Tensor[(180), float32], %var_8747: Tensor[(40, 264), int8], %var_8773: Tensor[(4, 2640), int8]) -> (Tensor[(960), int8], Tensor[(180), float32], Tensor[(144), float32], Tensor[(1512), float32], Tensor[(40, 264), int8], Tensor[(12, 4, 3), float32], Tensor[(4, 2640), int64]) {
  %818 = @func_7537() /* ty=(Tensor[(960), int8],) */;
  %819 = @func_7261() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %820 = cast(%var_8744, dtype="float32") /* ty=Tensor[(180), float32] */;
  %821 = cast(meta[relay.Constant][58] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %822 = cast(meta[relay.Constant][59] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %823 = cast(%var_8747, dtype="int8") /* ty=Tensor[(40, 264), int8] */;
  %824 = reshape(%820, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float32] */;
  %825 = reshape(%821, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %826 = reshape(%822, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %827 = reshape(%823, newshape=[4, 2640]) /* ty=Tensor[(4, 2640), int8] */;
  %828 = @func_5320(%824, %825, %826, %827) /* ty=(Tensor[(10, 2, 9), float32], Tensor[(12, 4, 3), bool], Tensor[(144), float32], Tensor[(10, 2, 9), float32], Tensor[(10560), int8], Tensor[(1512), float32], Tensor[(8, 364), float64], Tensor[(4, 2640), int8]) */;
  %829 = %828.7;
  %830 = cast(%var_8773, dtype="float32") /* ty=Tensor[(4, 2640), float32] */;
  %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(2), int32] */;
  %832 = cast(%829, dtype="float32") /* ty=Tensor[(4, 2640), float32] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %834 = minimum(%832, %833) /* ty=Tensor[(4, 2640), float32] */;
  %835 = cast(%829, dtype="int64") /* ty=Tensor[(4, 2640), int64] */;
  %836 = shape_of(%834, dtype="int32") /* ty=Tensor[(2), int32] */;
  %837 = cast(%834, dtype="int64") /* ty=Tensor[(4, 2640), int64] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %839 = %818.0;
  %840 = %819.0;
  %841 = bitwise_xor(%837, %838) /* ty=Tensor[(4, 2640), int64] */;
  (%839, %var_8744, meta[relay.Constant][58] /* ty=Tensor[(144), float32] */, meta[relay.Constant][59] /* ty=Tensor[(1512), float32] */, %var_8747, %840, %841)
}

def @func_4828() -> (Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) {
  %842 = @func_4279() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %843 = cast(meta[relay.Constant][61] /* ty=Tensor[(198), int16] */, dtype="int16") /* ty=Tensor[(198), int16] */;
  %844 = cast(meta[relay.Constant][60] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %845 = reshape(%843, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int16] */;
  %846 = reshape(%844, newshape=[960]) /* ty=Tensor[(960), int8] */;
  %847 = @func_2960(%845, %846) /* ty=(Tensor[(3, 6, 11), int16], Tensor[(16, 5, 12), int64], int8, Tensor[(960), int8]) */;
  %848 = %847.0;
  %849 = cast(meta[relay.Constant][61] /* ty=Tensor[(198), int16] */, dtype="float32") /* ty=Tensor[(198), float32] */;
  %850 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %851 = cast(%848, dtype="float32") /* ty=Tensor[(3, 6, 11), float32] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %853 = cast(meta[relay.Constant][61] /* ty=Tensor[(198), int16] */, dtype="int16") /* ty=Tensor[(198), int16] */;
  %854 = cast(meta[relay.Constant][60] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %855 = reshape(%853, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int16] */;
  %856 = reshape(%854, newshape=[960]) /* ty=Tensor[(960), int8] */;
  %857 = @func_2960(%855, %856) /* ty=(Tensor[(3, 6, 11), int16], Tensor[(16, 5, 12), int64], int8, Tensor[(960), int8]) */;
  %858 = %842.0;
  %859 = cast(%858, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %860 = reshape(%859, newshape=[12, 4, 3]) /* ty=Tensor[(12, 4, 3), float32] */;
  %861 = @func_4262(%860) /* ty=(Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32]) */;
  %862 = divide(%851, %852) /* ty=Tensor[(3, 6, 11), float32] */;
  %863 = %857.0;
  %864 = %861.0;
  (%858, meta[relay.Constant][60] /* ty=Tensor[(960), int8] */, %862, %863, %864)
}

def @func_4866(%var_4860: Tensor[(55, 6), float64], %var_4861: int8, %var_4862: Tensor[(6, 45), int16]) -> (Tensor[(12, 4, 3), float32], Tensor[(270, 1), int16], Tensor[(55, 6), float64], int8, Tensor[(6, 45), int16]) {
  %865 = @func_4562() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %866 = cast(%var_4860, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
  %867 = cast(%var_4861, dtype="int8") /* ty=int8 */;
  %868 = cast(%var_4862, dtype="int16") /* ty=Tensor[(6, 45), int16] */;
  %869 = reshape(%866, newshape=[11, 6, 5]) /* ty=Tensor[(11, 6, 5), float64] */;
  %870 = reshape(%867, newshape=[]) /* ty=int8 */;
  %871 = reshape(%868, newshape=[270, 1]) /* ty=Tensor[(270, 1), int16] */;
  %872 = @func_1343(%869, %870, %871) /* ty=(Tensor[(16, 5, 12), int64], Tensor[(960), int8], Tensor[(11, 6, 5), bool], Tensor[(15, 6, 3), float32], Tensor[(270, 1), int16], Tensor[(11, 6, 5), float64]) */;
  %873 = %865.0;
  %874 = %872.4;
  (%873, %874, %var_4860, %var_4861, %var_4862)
}

def @func_4562() -> (Tensor[(12, 4, 3), float32],) {
  %875 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %876 = %875.0;
  (%876,)
}

def @func_8298(%var_8248: Tensor[(5, 6, 3), float32], %var_8255: Tensor[(5, 6, 3), float32], %var_8260: Tensor[(336), float64], %var_8261: float64, %var_8262: Tensor[(2912), float64]) -> (Tensor[(5, 6, 3), float32], Tensor[(14, 16, 13), bool], Tensor[(336), float64], float64, Tensor[(2912), float64], Tensor[(14, 16, 13), bool], Tensor[(12, 4, 3), float32], Tensor[(16, 5, 12), int64], Tensor[(2, 480), int8], Tensor[(5, 6, 3), float64]) {
  %877 = cast(%var_8255, dtype="float32") /* ty=Tensor[(5, 6, 3), float32] */;
  %878 = shape_of(%var_8248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(%var_8248, dtype="float32") /* ty=Tensor[(5, 6, 3), float32] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %881 = cast(%var_8260, dtype="float64") /* ty=Tensor[(336), float64] */;
  %882 = cast(%var_8261, dtype="float64") /* ty=float64 */;
  %883 = cast(%var_8262, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %884 = reshape(%881, newshape=[7, 12, 4]) /* ty=Tensor[(7, 12, 4), float64] */;
  %885 = reshape(%882, newshape=[]) /* ty=float64 */;
  %886 = reshape(%883, newshape=[104, 28]) /* ty=Tensor[(104, 28), float64] */;
  %887 = @func_3609(%884, %885, %886) /* ty=(Tensor[(7, 12, 4), float64], Tensor[(14, 16, 13), bool], float64, Tensor[(104, 28), float64]) */;
  %888 = cast(%var_8261, dtype="float64") /* ty=float64 */;
  %889 = reshape(%888, newshape=[]) /* ty=float64 */;
  %890 = @func_4075(%889) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(14, 16, 13), bool], float64, Tensor[(1512), float32], Tensor[(126, 12), float32], Tensor[(10560), int8], Tensor[(2912), float32], Tensor[(16, 5, 12), int64], Tensor[(2, 480), int8], Tensor[(12, 4, 3), float32]) */;
  %891 = @func_5550() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %892 = cast(%var_8261, dtype="int8") /* ty=int8 */;
  %893 = cast(meta[relay.Constant][62] /* ty=Tensor[(2, 480), int8] */, dtype="int8") /* ty=Tensor[(2, 480), int8] */;
  %894 = reshape(%892, newshape=[]) /* ty=int8 */;
  %895 = reshape(%893, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), int8] */;
  %896 = @func_547(%894, %895) /* ty=(Tensor[(16, 5, 12), int64],) */;
  %897 = cast(%var_8248, dtype="float32") /* ty=Tensor[(5, 6, 3), float32] */;
  %898 = sqrt(%897) /* ty=Tensor[(5, 6, 3), float32] */;
  %899 = cast(%898, dtype="float64") /* ty=Tensor[(5, 6, 3), float64] */;
  %900 = power(%879, %880) /* ty=Tensor[(5, 6, 3), float32] */;
  %901 = %887.1;
  %902 = %890.1;
  %903 = %891.0;
  %904 = %896.0;
  %905 = exp(%899) /* ty=Tensor[(5, 6, 3), float64] */;
  (%900, %901, %var_8260, %var_8261, %var_8262, %902, %903, %904, meta[relay.Constant][62] /* ty=Tensor[(2, 480), int8] */, %905)
}

def @func_8799() -> (Tensor[(12, 4, 3), float64],) {
  %906 = @func_8071() /* ty=Tensor[(12, 4, 3), float64] */;
  (%906,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4106(%var_4094: Tensor[(12, 4, 3), float32]) -> Tensor[(12, 4, 3), bool] {
  %0 = @func_3966() /* ty=Tensor[(12, 4, 3), float32] */;
  %1 = cast(%var_4094, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %2 = shape_of(%0, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%0, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%3, %4) /* ty=Tensor[(12, 4, 3), bool] */
}

def @func_4923(%var_4921: Tensor[(270), int16]) -> (Tensor[(3, 6, 11), int16], Tensor[(11, 6, 5), float64], Tensor[(968), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(8, 12, 11), uint8], Tensor[(1056), uint8]) {
  @func_4920(%var_4921) /* ty=(Tensor[(3, 6, 11), int16], Tensor[(11, 6, 5), float64], Tensor[(968), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(8, 12, 11), uint8], Tensor[(1056), uint8]) */
}

def @func_7004(%var_6995: Tensor[(2912), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(15, 6, 3), int16], float64, Tensor[(2912), float64]) {
  %5 = @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %6 = cast(8.35874f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %7 = cast(%var_6995, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %8 = reshape(%6, newshape=[]) /* ty=float64 */;
  %9 = reshape(%7, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
  %10 = @func_279(%8, %9) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
  %11 = %5.0;
  %12 = %10.1;
  (%11, %12, 8.35874f64 /* ty=float64 */, %var_6995)
}

def @func_7342() -> Tensor[(12, 4, 3), float32] {
  %13 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %13.0
}

def @func_7519() -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) {
  %14 = @func_3966() /* ty=Tensor[(12, 4, 3), float32] */;
  %15 = @func_6163() /* ty=Tensor[(12, 4, 3), float32] */;
  (%14, %15)
}

def @func_5757(%var_5756: Tensor[(1, 2, 7), float32]) -> (Tensor[(2912), float32], float64, Tensor[(12, 4, 3), float32], Tensor[(1, 2, 7), float64], Tensor[(14, 16, 13), bool], Tensor[(336), float64], float64, Tensor[(1, 2, 7), float64], Tensor[(12, 4, 3), float32]) {
  %41 = fn (%var_5677: Tensor[(1, 2, 7), float32]) -> (Tensor[(2912), float32], float64, Tensor[(12, 4, 3), float32], Tensor[(1, 2, 7), float64], Tensor[(14, 16, 13), bool], Tensor[(336), float64], float64, Tensor[(1, 2, 7), float64], Tensor[(12, 4, 3), float32]) {
    %16 = cast(3.09835f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %17 = reshape(%16, newshape=[]) /* ty=float64 */;
    %18 = @func_4075(%17) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(14, 16, 13), bool], float64, Tensor[(1512), float32], Tensor[(126, 12), float32], Tensor[(10560), int8], Tensor[(2912), float32], Tensor[(16, 5, 12), int64], Tensor[(2, 480), int8], Tensor[(12, 4, 3), float32]) */;
    %19 = @func_5081() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(1056), uint8], Tensor[(90, 3), float64]) */;
    %20 = cast(%var_5677, dtype="float32") /* ty=Tensor[(1, 2, 7), float32] */;
    %21 = erf(%20) /* ty=Tensor[(1, 2, 7), float32] */;
    %22 = cast(%21, dtype="float64") /* ty=Tensor[(1, 2, 7), float64] */;
    %23 = cast(meta[relay.Constant][0] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %24 = cast(3.09835f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %25 = %18.6;
    %26 = cast(%25, dtype="float64") /* ty=Tensor[(2912), float64] */;
    %27 = reshape(%23, newshape=[7, 12, 4]) /* ty=Tensor[(7, 12, 4), float64] */;
    %28 = reshape(%24, newshape=[]) /* ty=float64 */;
    %29 = reshape(%26, newshape=[104, 28]) /* ty=Tensor[(104, 28), float64] */;
    %30 = @func_3609(%27, %28, %29) /* ty=(Tensor[(7, 12, 4), float64], Tensor[(14, 16, 13), bool], float64, Tensor[(104, 28), float64]) */;
    %31 = %30.1;
    %32 = cast(%31, dtype="float64") /* ty=Tensor[(14, 16, 13), float64] */;
    %33 = reshape(%32, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
    %34 = @func_5529(%33) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(90, 3), bool], Tensor[(14, 16, 13), bool], float64, Tensor[(2912), float64]) */;
    %35 = cast(%21, dtype="float64") /* ty=Tensor[(1, 2, 7), float64] */;
    %36 = %19.0;
    %37 = sigmoid(%22) /* ty=Tensor[(1, 2, 7), float64] */;
    %38 = %34.3;
    %39 = log(%35) /* ty=Tensor[(1, 2, 7), float64] */;
    %40 = @func_5644() /* ty=Tensor[(12, 4, 3), float32] */;
    (%25, 3.09835f64 /* ty=float64 */, %36, %37, %31, meta[relay.Constant][0] /* ty=Tensor[(336), float64] */, %38, %39, %40)
  };
  %41(%var_5756) /* ty=(Tensor[(2912), float32], float64, Tensor[(12, 4, 3), float32], Tensor[(1, 2, 7), float64], Tensor[(14, 16, 13), bool], Tensor[(336), float64], float64, Tensor[(1, 2, 7), float64], Tensor[(12, 4, 3), float32]) */
}

def @func_6638() -> (Tensor[(12, 4, 3), float64],) {
  %42 = @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */;
  %43 = %42.4;
  (%43,)
}

def @func_6240(%var_6238: Tensor[(2, 2, 4), uint16], %var_6239: Tensor[(2, 2, 4), uint16]) -> (Tensor[(2, 2, 4), uint16],) {
  %49 = fn (%var_6229: Tensor[(2, 2, 4), uint16], %var_6230: Tensor[(2, 2, 4), uint16]) -> (Tensor[(2, 2, 4), uint16],) {
    %44 = cast(%var_6230, dtype="uint16") /* ty=Tensor[(2, 2, 4), uint16] */;
    %45 = shape_of(%var_6229, dtype="int32") /* ty=Tensor[(3), int32] */;
    %46 = cast(%var_6229, dtype="uint16") /* ty=Tensor[(2, 2, 4), uint16] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %48 = subtract(%46, %47) /* ty=Tensor[(2, 2, 4), uint16] */;
    (%48,)
  };
  %49(%var_6238, %var_6239) /* ty=(Tensor[(2, 2, 4), uint16],) */
}

def @func_3609(%var_3586: Tensor[(7, 12, 4), float64], %var_3593: float64, %var_3594: Tensor[(104, 28), float64]) -> (Tensor[(7, 12, 4), float64], Tensor[(14, 16, 13), bool], float64, Tensor[(104, 28), float64]) {
  %50 = cast(%var_3586, dtype="float64") /* ty=Tensor[(7, 12, 4), float64] */;
  %51 = cast(%var_3593, dtype="float64") /* ty=float64 */;
  %52 = cast(%var_3594, dtype="float64") /* ty=Tensor[(104, 28), float64] */;
  %53 = reshape(%51, newshape=[]) /* ty=float64 */;
  %54 = reshape(%52, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
  %55 = @func_279(%53, %54) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
  %56 = sin(%50) /* ty=Tensor[(7, 12, 4), float64] */;
  %57 = %55.0;
  (%56, %57, %var_3593, %var_3594)
}

def @func_8061() -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) {
  @func_8059() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */
}

def @func_8106(%var_8104: Tensor[(9, 15, 2), float32]) -> (Tensor[(2, 480), int8], float64, Tensor[(12, 4, 3), float32], Tensor[(968), float64], Tensor[(375), float64], Tensor[(9, 15, 2), float32]) {
  @func_8103(%var_8104) /* ty=(Tensor[(2, 480), int8], float64, Tensor[(12, 4, 3), float32], Tensor[(968), float64], Tensor[(375), float64], Tensor[(9, 15, 2), float32]) */
}

def @func_3967() -> Tensor[(12, 4, 3), float32] {
  %59 = fn () -> Tensor[(12, 4, 3), float32] {
    %58 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
    %58.0
  };
  %59() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_5401() -> (Tensor[(12, 4, 3), float64],) {
  %60 = @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */;
  %61 = %60.4;
  (%61,)
}

def @func_4871(%var_4868: Tensor[(55, 6), float64], %var_4869: int8, %var_4870: Tensor[(6, 45), int16]) -> (Tensor[(12, 4, 3), float32], Tensor[(270, 1), int16], Tensor[(55, 6), float64], int8, Tensor[(6, 45), int16]) {
  @func_4866(%var_4868, %var_4869, %var_4870) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(270, 1), int16], Tensor[(55, 6), float64], int8, Tensor[(6, 45), int16]) */
}

def @func_5133(%var_5131: Tensor[(12, 4, 3), bool]) -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), bool]) {
  @func_5130(%var_5131) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), bool]) */
}

def @func_4018(%var_4015: Tensor[(1512), float32], %var_4016: Tensor[(2912), float64], %var_4017: Tensor[(10560), int8]) -> (Tensor[(12, 4, 3), float32], Tensor[(15, 6, 3), float32], Tensor[(1512), float32], Tensor[(2912), float64], Tensor[(12, 4, 3), float32], Tensor[(10560), int8]) {
  @func_4013(%var_4015, %var_4016, %var_4017) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(15, 6, 3), float32], Tensor[(1512), float32], Tensor[(2912), float64], Tensor[(12, 4, 3), float32], Tensor[(10560), int8]) */
}

def @func_8072() -> Tensor[(12, 4, 3), float64] {
  %62 = fn () -> Tensor[(12, 4, 3), float64] {
    @func_6273() /* ty=Tensor[(12, 4, 3), float64] */
  };
  %62() /* ty=Tensor[(12, 4, 3), float64] */
}

def @func_3984() -> Tensor[(12, 4, 3), float32] {
  @func_3982() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_5403() -> (Tensor[(12, 4, 3), float64],) {
  @func_5401() /* ty=(Tensor[(12, 4, 3), float64],) */
}

def @func_6288() -> Tensor[(12, 4, 3), float32] {
  %63 = fn () -> Tensor[(12, 4, 3), float32] {
    @func_6163() /* ty=Tensor[(12, 4, 3), float32] */
  };
  %63() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_7723(%var_7721: Tensor[(2912, 1), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(2912), float64], Tensor[(2912, 1), float64]) {
  %64 = @func_6319() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %65 = cast(%var_7721, dtype="float64") /* ty=Tensor[(2912, 1), float64] */;
  %66 = reshape(%65, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %67 = @func_5529(%66) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(90, 3), bool], Tensor[(14, 16, 13), bool], float64, Tensor[(2912), float64]) */;
  %68 = %64.0;
  %69 = %67.4;
  (%68, %69, %var_7721)
}

def @func_8941() -> Tensor[(12, 4, 3), float32] {
  %70 = @func_5091() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %70.0
}

def @func_8720() -> (Tensor[(12, 4, 3), float32],) {
  %71 = @func_5644() /* ty=Tensor[(12, 4, 3), float32] */;
  (%71,)
}

def @func_5237(%var_5235: Tensor[(12, 4, 3), float32]) -> (Tensor[(12, 4, 3), float64],) {
  @func_5234(%var_5235) /* ty=(Tensor[(12, 4, 3), float64],) */
}

def @func_8164() -> (Tensor[(12, 4, 3), float32],) {
  %74 = fn () -> (Tensor[(12, 4, 3), float32],) {
    %72 = @func_5550() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %73 = %72.0;
    (%73,)
  };
  %74() /* ty=(Tensor[(12, 4, 3), float32],) */
}

def @func_5645() -> Tensor[(12, 4, 3), float32] {
  %76 = fn () -> Tensor[(12, 4, 3), float32] {
    %75 = @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %75.0
  };
  %76() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_8513() -> (Tensor[(12, 4, 3), float32],) {
  %77 = @func_5254() /* ty=Tensor[(12, 4, 3), float32] */;
  (%77,)
}

def @func_7007(%var_7005: Tensor[(2912), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(15, 6, 3), int16], float64, Tensor[(2912), float64]) {
  @func_7004(%var_7005) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(15, 6, 3), int16], float64, Tensor[(2912), float64]) */
}

def @func_198(%var_149: Tensor[(15, 6, 3), int16], %var_150: Tensor[(15, 6, 3), int16]) -> (Tensor[(15, 6, 3), int16], Tensor[(15, 6, 3), float32], Tensor[(15, 6, 3), float32]) {
  %78 = cast(%var_150, dtype="int16") /* ty=Tensor[(15, 6, 3), int16] */;
  %79 = shape_of(%var_149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%var_149, dtype="int16") /* ty=Tensor[(15, 6, 3), int16] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %82 = cast(%var_149, dtype="float32") /* ty=Tensor[(15, 6, 3), float32] */;
  %83 = shape_of(%var_150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%var_150, dtype="float32") /* ty=Tensor[(15, 6, 3), float32] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %86 = cast(%var_150, dtype="float32") /* ty=Tensor[(15, 6, 3), float32] */;
  %87 = logical_xor(%80, %81) /* ty=Tensor[(15, 6, 3), int16] */;
  %88 = floor_mod(%84, %85) /* ty=Tensor[(15, 6, 3), float32] */;
  %89 = sinh(%86) /* ty=Tensor[(15, 6, 3), float32] */;
  (%87, %88, %89)
}

def @func_6163() -> Tensor[(12, 4, 3), float32] {
  @func_5644() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_1022(%var_1020: Tensor[(2912), float64], %var_1021: Tensor[(11, 960), int8]) -> (Tensor[(16, 5, 12), int64], int8, Tensor[(2912), float64], Tensor[(11, 960), float32], Tensor[(15, 6, 3), bool], Tensor[(2, 16, 3), uint8], Tensor[(15, 6, 3), float32], Tensor[(2, 16, 3), int64], Tensor[(15, 6, 3), float32], Tensor[(1, 270), float32], Tensor[(14, 16, 13), bool]) {
  %156 = fn (%var_946: Tensor[(2912), float64], %var_952: Tensor[(11, 960), int8]) -> (Tensor[(16, 5, 12), int64], int8, Tensor[(2912), float64], Tensor[(11, 960), float32], Tensor[(15, 6, 3), bool], Tensor[(2, 16, 3), uint8], Tensor[(15, 6, 3), float32], Tensor[(2, 16, 3), int64], Tensor[(15, 6, 3), float32], Tensor[(1, 270), float32], Tensor[(14, 16, 13), bool]) {
    %90 = cast(meta[relay.Constant][1] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %91 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 960), int8] */, dtype="int8") /* ty=Tensor[(1, 960), int8] */;
    %92 = reshape(%90, newshape=[]) /* ty=int8 */;
    %93 = reshape(%91, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), int8] */;
    %94 = @func_547(%92, %93) /* ty=(Tensor[(16, 5, 12), int64],) */;
    %95 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 960), int8] */, dtype="float32") /* ty=Tensor[(1, 960), float32] */;
    %96 = cast(%var_952, dtype="float32") /* ty=Tensor[(11, 960), float32] */;
    %97 = cast(meta[relay.Constant][1] /* ty=int8 */, dtype="float64") /* ty=float64 */;
    %98 = cast(%var_946, dtype="float64") /* ty=Tensor[(2912), float64] */;
    %99 = reshape(%97, newshape=[]) /* ty=float64 */;
    %100 = reshape(%98, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
    %101 = @func_279(%99, %100) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
    %102 = %101.1;
    %103 = cast(meta[relay.Constant][1] /* ty=int8 */, dtype="float64") /* ty=float64 */;
    %104 = cast(%var_946, dtype="float64") /* ty=Tensor[(2912), float64] */;
    %105 = reshape(%103, newshape=[]) /* ty=float64 */;
    %106 = reshape(%104, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
    %107 = @func_279(%105, %106) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
    %108 = %107.2;
    %109 = cast(%108, dtype="bool") /* ty=Tensor[(1, 270), bool] */;
    %110 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(%102, dtype="bool") /* ty=Tensor[(15, 6, 3), bool] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %113 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 16, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
    %114 = log2(%113) /* ty=Tensor[(2, 16, 3), float64] */;
    %115 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 16, 3), float64] */, dtype="uint8") /* ty=Tensor[(2, 16, 3), uint8] */;
    %116 = shape_of(%114, dtype="int32") /* ty=Tensor[(3), int32] */;
    %117 = cast(%114, dtype="uint8") /* ty=Tensor[(2, 16, 3), uint8] */;
    %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %119 = cast(%102, dtype="int16") /* ty=Tensor[(15, 6, 3), int16] */;
    %120 = cast(%102, dtype="int16") /* ty=Tensor[(15, 6, 3), int16] */;
    %121 = reshape(%119, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
    %122 = reshape(%120, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
    %123 = @func_198(%121, %122) /* ty=(Tensor[(15, 6, 3), int16], Tensor[(15, 6, 3), float32], Tensor[(15, 6, 3), float32]) */;
    %124 = cast(%114, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
    %125 = sin(%124) /* ty=Tensor[(2, 16, 3), float64] */;
    %126 = cast(%114, dtype="int64") /* ty=Tensor[(2, 16, 3), int64] */;
    %127 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
    %128 = cast(%125, dtype="int64") /* ty=Tensor[(2, 16, 3), int64] */;
    %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %130 = logical_and(%111, %112) /* ty=Tensor[(15, 6, 3), bool] */;
    %131 = cast(%130, dtype="int16") /* ty=Tensor[(15, 6, 3), int16] */;
    %132 = cast(%130, dtype="int16") /* ty=Tensor[(15, 6, 3), int16] */;
    %133 = reshape(%131, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
    %134 = reshape(%132, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
    %135 = @func_198(%133, %134) /* ty=(Tensor[(15, 6, 3), int16], Tensor[(15, 6, 3), float32], Tensor[(15, 6, 3), float32]) */;
    %136 = cast(meta[relay.Constant][1] /* ty=int8 */, dtype="float64") /* ty=float64 */;
    %137 = cast(%var_946, dtype="float64") /* ty=Tensor[(2912), float64] */;
    %138 = reshape(%136, newshape=[]) /* ty=float64 */;
    %139 = reshape(%137, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
    %140 = @func_279(%138, %139) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
    %141 = %140.2;
    %142 = cast(%141, dtype="float32") /* ty=Tensor[(1, 270), float32] */;
    %143 = cast(meta[relay.Constant][1] /* ty=int8 */, dtype="float64") /* ty=float64 */;
    %144 = cast(%var_946, dtype="float64") /* ty=Tensor[(2912), float64] */;
    %145 = reshape(%143, newshape=[]) /* ty=float64 */;
    %146 = reshape(%144, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
    %147 = @func_279(%145, %146) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
    %148 = %94.0;
    %149 = power(%95, %96) /* ty=Tensor[(11, 960), float32] */;
    %150 = multiply(%117, %118) /* ty=Tensor[(2, 16, 3), uint8] */;
    %151 = %123.1;
    %152 = maximum(%128, %129) /* ty=Tensor[(2, 16, 3), int64] */;
    %153 = %135.1;
    %154 = cos(%142) /* ty=Tensor[(1, 270), float32] */;
    %155 = %147.0;
    (%148, meta[relay.Constant][1] /* ty=int8 */, %var_946, %149, %130, %150, %151, %152, %153, %154, %155)
  };
  %156(%var_1020, %var_1021) /* ty=(Tensor[(16, 5, 12), int64], int8, Tensor[(2912), float64], Tensor[(11, 960), float32], Tensor[(15, 6, 3), bool], Tensor[(2, 16, 3), uint8], Tensor[(15, 6, 3), float32], Tensor[(2, 16, 3), int64], Tensor[(15, 6, 3), float32], Tensor[(1, 270), float32], Tensor[(14, 16, 13), bool]) */
}

def @func_4564() -> (Tensor[(12, 4, 3), float32],) {
  @func_4562() /* ty=(Tensor[(12, 4, 3), float32],) */
}

def @func_3943(%var_3907: Tensor[(330, 1), float64], %var_3921: Tensor[(1056), uint8]) -> (Tensor[(12, 4, 3), float32], Tensor[(5, 9, 7), int8], Tensor[(330, 1), float64], int8, Tensor[(270), int16], Tensor[(8, 12, 11), uint8], Tensor[(1056), uint8], Tensor[(?, 968), int8]) {
  %157 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %158 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 968), float64] */, dtype="float64") /* ty=Tensor[(1, 968), float64] */;
  %159 = cast(%var_3907, dtype="float64") /* ty=Tensor[(330, 1), float64] */;
  %160 = cast(meta[relay.Constant][5] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %161 = cast(meta[relay.Constant][6] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
  %162 = reshape(%158, newshape=[968]) /* ty=Tensor[(968), float64] */;
  %163 = reshape(%159, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %164 = reshape(%160, newshape=[]) /* ty=int8 */;
  %165 = reshape(%161, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %166 = @func_2720(%162, %163, %164, %165) /* ty=(Tensor[(8, 11, 11), float64], Tensor[(5, 9, 7), float64], Tensor[(4, 12, 9), float32], Tensor[(432), uint8], Tensor[(5, 9, 7), float64], Tensor[(11, 6, 5), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(5, 9, 7), int8], Tensor[(4, 12, 9), uint8], Tensor[(968), float64]) */;
  %167 = cast(%var_3921, dtype="uint8") /* ty=Tensor[(1056), uint8] */;
  %168 = cast(%var_3921, dtype="uint8") /* ty=Tensor[(1056), uint8] */;
  %169 = reshape(%167, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
  %170 = reshape(%168, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
  %171 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 968), float64] */, dtype="int8") /* ty=Tensor[(1, 968), int8] */;
  %172 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(1, 968), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %173 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 968), float64] */, dtype="int8") /* ty=Tensor[(1, 968), int8] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %175 = %157.0;
  %176 = %166.9;
  %177 = @func_2826(%169, %170) /* ty=Tensor[(8, 12, 11), uint8] */;
  %178 = subtract(%173, %174) /* ty=Tensor[(?, 968), int8] */;
  (%175, %176, %var_3907, meta[relay.Constant][5] /* ty=int8 */, meta[relay.Constant][6] /* ty=Tensor[(270), int16] */, %177, %var_3921, %178)
}

def @func_5961(%var_5958: Tensor[(375), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(5, 15, 5), int32], Tensor[(375), float64]) {
  %179 = cast(%var_5958, dtype="float64") /* ty=Tensor[(375), float64] */;
  %180 = cast(%var_5958, dtype="float64") /* ty=Tensor[(375), float64] */;
  %181 = reshape(%179, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float64] */;
  %182 = reshape(%180, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float64] */;
  %183 = @func_2791(%181, %182) /* ty=(Tensor[(5, 15, 5), float64], Tensor[(5, 15, 5), int32]) */;
  %184 = @func_3966() /* ty=Tensor[(12, 4, 3), float32] */;
  %185 = %183.1;
  (%184, %185, %var_5958)
}

def @func_5621(%var_5616: Tensor[(198), int16], %var_5617: Tensor[(960), int8]) -> (Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(198), int16], Tensor[(960), int8]) {
  %186 = @func_5401() /* ty=(Tensor[(12, 4, 3), float64],) */;
  %187 = cast(%var_5616, dtype="int16") /* ty=Tensor[(198), int16] */;
  %188 = cast(%var_5617, dtype="int8") /* ty=Tensor[(960), int8] */;
  %189 = reshape(%187, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int16] */;
  %190 = reshape(%188, newshape=[960]) /* ty=Tensor[(960), int8] */;
  %191 = @func_2960(%189, %190) /* ty=(Tensor[(3, 6, 11), int16], Tensor[(16, 5, 12), int64], int8, Tensor[(960), int8]) */;
  %192 = %186.0;
  %193 = @func_3982() /* ty=Tensor[(12, 4, 3), float32] */;
  %194 = %191.3;
  (%192, %193, %194, %var_5616, %var_5617)
}

def @func_5625(%var_5623: Tensor[(198), int16], %var_5624: Tensor[(960), int8]) -> (Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(198), int16], Tensor[(960), int8]) {
  @func_5621(%var_5623, %var_5624) /* ty=(Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(198), int16], Tensor[(960), int8]) */
}

def @func_6321() -> (Tensor[(12, 4, 3), float32],) {
  @func_6319() /* ty=(Tensor[(12, 4, 3), float32],) */
}

def @func_4198(%var_4197: Tensor[(12, 10, 10), int8]) -> Tensor[(12, 10, 10), int8] {
  %197 = fn (%var_4184: Tensor[(12, 10, 10), int8]) -> Tensor[(12, 10, 10), int8] {
    %195 = cast(meta[relay.Constant][8] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %196 = cast(%var_4184, dtype="int8") /* ty=Tensor[(12, 10, 10), int8] */;
    bitwise_or(%195, %196) /* ty=Tensor[(12, 10, 10), int8] */
  };
  %197(%var_4197) /* ty=Tensor[(12, 10, 10), int8] */
}

def @func_6640() -> (Tensor[(12, 4, 3), float64],) {
  @func_6638() /* ty=(Tensor[(12, 4, 3), float64],) */
}

def @func_8221(%var_8219: Tensor[(11, 4, 1), float32], %var_8220: Tensor[(11, 4, 4), float32]) -> Tensor[(11, 4, 4), bool] {
  %200 = fn (%var_8212: Tensor[(11, 4, 1), float32], %var_8213: Tensor[(11, 4, 4), float32]) -> Tensor[(11, 4, 4), bool] {
    %198 = cast(%var_8212, dtype="bool") /* ty=Tensor[(11, 4, 1), bool] */;
    %199 = cast(%var_8213, dtype="bool") /* ty=Tensor[(11, 4, 4), bool] */;
    greater(%198, %199) /* ty=Tensor[(11, 4, 4), bool] */
  };
  %200(%var_8219, %var_8220) /* ty=Tensor[(11, 4, 4), bool] */
}

def @func_6936() -> (Tensor[(960), int8],) {
  @func_6934() /* ty=(Tensor[(960), int8],) */
}

def @func_4265(%var_4263: Tensor[(12, 4, 3), float32]) -> (Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32]) {
  @func_4262(%var_4263) /* ty=(Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32]) */
}

def @func_7539() -> (Tensor[(960), int8],) {
  @func_7537() /* ty=(Tensor[(960), int8],) */
}

def @func_4830() -> (Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) {
  @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */
}

def @func_8494() -> Tensor[(960), int8] {
  @func_8492() /* ty=Tensor[(960), int8] */
}

def @func_7537() -> (Tensor[(960), int8],) {
  %201 = @func_6934() /* ty=(Tensor[(960), int8],) */;
  %202 = %201.0;
  (%202,)
}

def @func_4109(%var_4107: Tensor[(12, 4, 3), float32]) -> Tensor[(12, 4, 3), bool] {
  @func_4106(%var_4107) /* ty=Tensor[(12, 4, 3), bool] */
}

def @func_5082() -> (Tensor[(12, 4, 3), float32], Tensor[(1056), uint8], Tensor[(90, 3), float64]) {
  %211 = fn () -> (Tensor[(12, 4, 3), float32], Tensor[(1056), uint8], Tensor[(90, 3), float64]) {
    %203 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
    %204 = cast(meta[relay.Constant][9] /* ty=Tensor[(90, 3), int16] */, dtype="int16") /* ty=Tensor[(90, 3), int16] */;
    %205 = reshape(%204, newshape=[270]) /* ty=Tensor[(270), int16] */;
    %206 = @func_4920(%205) /* ty=(Tensor[(3, 6, 11), int16], Tensor[(11, 6, 5), float64], Tensor[(968), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(8, 12, 11), uint8], Tensor[(1056), uint8]) */;
    %207 = cast(meta[relay.Constant][9] /* ty=Tensor[(90, 3), int16] */, dtype="float64") /* ty=Tensor[(90, 3), float64] */;
    %208 = %203.0;
    %209 = %206.7;
    %210 = sin(%207) /* ty=Tensor[(90, 3), float64] */;
    (%208, %209, %210)
  };
  %211() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(1056), uint8], Tensor[(90, 3), float64]) */
}

def @func_7099(%var_7096: Tensor[(330), float64], %var_7097: int8, %var_7098: Tensor[(10560), int8]) -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32], Tensor[(2912), float64], Tensor[(2912), float64], Tensor[(10560), float32], Tensor[(12, 4, 3), float32], Tensor[(330), float64], int8, Tensor[(10560), float64]) {
  @func_7094(%var_7096, %var_7097, %var_7098) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32], Tensor[(2912), float64], Tensor[(2912), float64], Tensor[(10560), float32], Tensor[(12, 4, 3), float32], Tensor[(330), float64], int8, Tensor[(10560), float64]) */
}

def @func_6554(%var_6552: Tensor[(2912), float64], %var_6553: Tensor[(10560), int8]) -> (Tensor[(12, 4, 3), float32], Tensor[(10560), int8], Tensor[(2912), float64], Tensor[(10560), int8], Tensor[(1512), int64], Tensor[(1512), float64]) {
  %230 = fn (%var_6519: Tensor[(2912), float64], %var_6520: Tensor[(10560), int8]) -> (Tensor[(12, 4, 3), float32], Tensor[(10560), int8], Tensor[(2912), float64], Tensor[(10560), int8], Tensor[(1512), int64], Tensor[(1512), float64]) {
    %212 = cast(meta[relay.Constant][10] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
    %213 = cast(meta[relay.Constant][10] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
    %214 = cast(%var_6519, dtype="float64") /* ty=Tensor[(2912), float64] */;
    %215 = cast(%var_6520, dtype="int8") /* ty=Tensor[(10560), int8] */;
    %216 = reshape(%212, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
    %217 = reshape(%213, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
    %218 = reshape(%214, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
    %219 = reshape(%215, newshape=[10560]) /* ty=Tensor[(10560), int8] */;
    %220 = @func_2370(%216, %217, %218, %219) /* ty=(Tensor[(12, 9, 14), float32], Tensor[(15, 6, 3), float32], Tensor[(2912), float64], Tensor[(10560), int8]) */;
    %221 = cast(meta[relay.Constant][11] /* ty=Tensor[(1512), float32] */, dtype="int64") /* ty=Tensor[(1512), int64] */;
    %222 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(1512), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %223 = cast(meta[relay.Constant][10] /* ty=Tensor[(1512), float32] */, dtype="int64") /* ty=Tensor[(1512), int64] */;
    %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?), int64] */;
    %225 = cast(meta[relay.Constant][10] /* ty=Tensor[(1512), float32] */, dtype="float64") /* ty=Tensor[(1512), float64] */;
    %226 = @func_6163() /* ty=Tensor[(12, 4, 3), float32] */;
    %227 = %220.3;
    %228 = bitwise_and(%223, %224) /* ty=Tensor[(1512), int64] */;
    %229 = sin(%225) /* ty=Tensor[(1512), float64] */;
    (%226, %227, %var_6519, %var_6520, %228, %229)
  };
  %230(%var_6552, %var_6553) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(10560), int8], Tensor[(2912), float64], Tensor[(10560), int8], Tensor[(1512), int64], Tensor[(1512), float64]) */
}

def @func_7263() -> (Tensor[(12, 4, 3), float32],) {
  @func_7261() /* ty=(Tensor[(12, 4, 3), float32],) */
}

def @func_202(%var_200: Tensor[(15, 6, 3), int16], %var_201: Tensor[(15, 6, 3), int16]) -> (Tensor[(15, 6, 3), int16], Tensor[(15, 6, 3), float32], Tensor[(15, 6, 3), float32]) {
  @func_198(%var_200, %var_201) /* ty=(Tensor[(15, 6, 3), int16], Tensor[(15, 6, 3), float32], Tensor[(15, 6, 3), float32]) */
}

def @func_2375(%var_2371: Tensor[(12, 9, 14), float32], %var_2372: Tensor[(12, 9, 14), float32], %var_2373: Tensor[(2912), float64], %var_2374: Tensor[(10560), int8]) -> (Tensor[(12, 9, 14), float32], Tensor[(15, 6, 3), float32], Tensor[(2912), float64], Tensor[(10560), int8]) {
  %242 = fn (%var_2351: Tensor[(12, 9, 14), float32], %var_2352: Tensor[(12, 9, 14), float32], %var_2364: Tensor[(2912), float64], %var_2365: Tensor[(10560), int8]) -> (Tensor[(12, 9, 14), float32], Tensor[(15, 6, 3), float32], Tensor[(2912), float64], Tensor[(10560), int8]) {
    %231 = cast(%var_2352, dtype="float32") /* ty=Tensor[(12, 9, 14), float32] */;
    %232 = shape_of(%var_2351, dtype="int32") /* ty=Tensor[(3), int32] */;
    %233 = cast(%var_2351, dtype="float32") /* ty=Tensor[(12, 9, 14), float32] */;
    %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %235 = cast(%var_2364, dtype="float64") /* ty=Tensor[(2912), float64] */;
    %236 = cast(%var_2365, dtype="int8") /* ty=Tensor[(10560), int8] */;
    %237 = reshape(%235, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
    %238 = reshape(%236, newshape=[11, 960]) /* ty=Tensor[(11, 960), int8] */;
    %239 = @func_1019(%237, %238) /* ty=(Tensor[(16, 5, 12), int64], int8, Tensor[(2912), float64], Tensor[(11, 960), float32], Tensor[(15, 6, 3), bool], Tensor[(2, 16, 3), uint8], Tensor[(15, 6, 3), float32], Tensor[(2, 16, 3), int64], Tensor[(15, 6, 3), float32], Tensor[(1, 270), float32], Tensor[(14, 16, 13), bool]) */;
    %240 = divide(%233, %234) /* ty=Tensor[(12, 9, 14), float32] */;
    %241 = %239.6;
    (%240, %241, %var_2364, %var_2365)
  };
  %242(%var_2371, %var_2372, %var_2373, %var_2374) /* ty=(Tensor[(12, 9, 14), float32], Tensor[(15, 6, 3), float32], Tensor[(2912), float64], Tensor[(10560), int8]) */
}

def @func_8332() -> (Tensor[(12, 4, 3), float32], Tensor[(3, 6, 11), int16]) {
  @func_8330() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(3, 6, 11), int16]) */
}

def @func_8601() -> Tensor[(12, 4, 3), float32] {
  @func_8599() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_2963(%var_2961: Tensor[(3, 6, 11), int16], %var_2962: Tensor[(960), int8]) -> (Tensor[(3, 6, 11), int16], Tensor[(16, 5, 12), int64], int8, Tensor[(960), int8]) {
  %254 = fn (%var_2947: Tensor[(3, 6, 11), int16], %var_2954: Tensor[(960), int8]) -> (Tensor[(3, 6, 11), int16], Tensor[(16, 5, 12), int64], int8, Tensor[(960), int8]) {
    %243 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 6, 11), int16] */, dtype="int16") /* ty=Tensor[(3, 6, 11), int16] */;
    %244 = shape_of(%var_2947, dtype="int32") /* ty=Tensor[(3), int32] */;
    %245 = cast(%var_2947, dtype="int16") /* ty=Tensor[(3, 6, 11), int16] */;
    %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %247 = cast(meta[relay.Constant][13] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %248 = cast(%var_2954, dtype="int8") /* ty=Tensor[(960), int8] */;
    %249 = reshape(%247, newshape=[]) /* ty=int8 */;
    %250 = reshape(%248, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), int8] */;
    %251 = @func_547(%249, %250) /* ty=(Tensor[(16, 5, 12), int64],) */;
    %252 = left_shift(%245, %246) /* ty=Tensor[(3, 6, 11), int16] */;
    %253 = %251.0;
    (%252, %253, meta[relay.Constant][13] /* ty=int8 */, %var_2954)
  };
  %254(%var_2961, %var_2962) /* ty=(Tensor[(3, 6, 11), int16], Tensor[(16, 5, 12), int64], int8, Tensor[(960), int8]) */
}

def @func_8463(%var_8433: Tensor[(2912), float64]) -> (Tensor[(960), int8], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32], Tensor[(2912), bool]) {
  %255 = @func_6934() /* ty=(Tensor[(960), int8],) */;
  %256 = @func_6905() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %257 = cast(%var_8433, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %258 = reshape(%257, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %259 = @func_5529(%258) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(90, 3), bool], Tensor[(14, 16, 13), bool], float64, Tensor[(2912), float64]) */;
  %260 = cast(meta[relay.Constant][14] /* ty=Tensor[(2912), float64] */, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %261 = shape_of(%var_8433, dtype="int32") /* ty=Tensor[(1), int32] */;
  %262 = cast(%var_8433, dtype="bool") /* ty=Tensor[(2912), bool] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?), bool] */;
  %264 = %255.0;
  %265 = %256.0;
  %266 = %259.0;
  %267 = less_equal(%262, %263) /* ty=Tensor[(2912), bool] */;
  (%264, %265, %266, %267)
}

def @func_8466(%var_8464: Tensor[(2912), float64]) -> (Tensor[(960), int8], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32], Tensor[(2912), bool]) {
  @func_8463(%var_8464) /* ty=(Tensor[(960), int8], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32], Tensor[(2912), bool]) */
}

def @func_5982() -> Tensor[(12, 4, 3), float32] {
  %269 = fn () -> Tensor[(12, 4, 3), float32] {
    %268 = @func_4562() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %268.0
  };
  %269() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_5092() -> (Tensor[(12, 4, 3), float32],) {
  %272 = fn () -> (Tensor[(12, 4, 3), float32],) {
    %270 = @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %271 = %270.0;
    (%271,)
  };
  %272() /* ty=(Tensor[(12, 4, 3), float32],) */
}

def @func_5804() -> (Tensor[(12, 4, 3), float32],) {
  %275 = fn () -> (Tensor[(12, 4, 3), float32],) {
    %273 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
    %274 = %273.1;
    (%274,)
  };
  %275() /* ty=(Tensor[(12, 4, 3), float32],) */
}

def @func_1348(%var_1345: Tensor[(11, 6, 5), float64], %var_1346: int8, %var_1347: Tensor[(270, 1), int16]) -> (Tensor[(16, 5, 12), int64], Tensor[(960), int8], Tensor[(11, 6, 5), bool], Tensor[(15, 6, 3), float32], Tensor[(270, 1), int16], Tensor[(11, 6, 5), float64]) {
  @func_1343(%var_1345, %var_1346, %var_1347) /* ty=(Tensor[(16, 5, 12), int64], Tensor[(960), int8], Tensor[(11, 6, 5), bool], Tensor[(15, 6, 3), float32], Tensor[(270, 1), int16], Tensor[(11, 6, 5), float64]) */
}

def @func_7726(%var_7724: Tensor[(2912, 1), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(2912), float64], Tensor[(2912, 1), float64]) {
  @func_7723(%var_7724) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(2912), float64], Tensor[(2912, 1), float64]) */
}

def @func_8304(%var_8299: Tensor[(5, 6, 3), float32], %var_8300: Tensor[(5, 6, 3), float32], %var_8301: Tensor[(336), float64], %var_8302: float64, %var_8303: Tensor[(2912), float64]) -> (Tensor[(5, 6, 3), float32], Tensor[(14, 16, 13), bool], Tensor[(336), float64], float64, Tensor[(2912), float64], Tensor[(14, 16, 13), bool], Tensor[(12, 4, 3), float32], Tensor[(16, 5, 12), int64], Tensor[(2, 480), int8], Tensor[(5, 6, 3), float64]) {
  %305 = fn (%var_8248: Tensor[(5, 6, 3), float32], %var_8255: Tensor[(5, 6, 3), float32], %var_8260: Tensor[(336), float64], %var_8261: float64, %var_8262: Tensor[(2912), float64]) -> (Tensor[(5, 6, 3), float32], Tensor[(14, 16, 13), bool], Tensor[(336), float64], float64, Tensor[(2912), float64], Tensor[(14, 16, 13), bool], Tensor[(12, 4, 3), float32], Tensor[(16, 5, 12), int64], Tensor[(2, 480), int8], Tensor[(5, 6, 3), float64]) {
    %276 = cast(%var_8255, dtype="float32") /* ty=Tensor[(5, 6, 3), float32] */;
    %277 = shape_of(%var_8248, dtype="int32") /* ty=Tensor[(3), int32] */;
    %278 = cast(%var_8248, dtype="float32") /* ty=Tensor[(5, 6, 3), float32] */;
    %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %280 = cast(%var_8260, dtype="float64") /* ty=Tensor[(336), float64] */;
    %281 = cast(%var_8261, dtype="float64") /* ty=float64 */;
    %282 = cast(%var_8262, dtype="float64") /* ty=Tensor[(2912), float64] */;
    %283 = reshape(%280, newshape=[7, 12, 4]) /* ty=Tensor[(7, 12, 4), float64] */;
    %284 = reshape(%281, newshape=[]) /* ty=float64 */;
    %285 = reshape(%282, newshape=[104, 28]) /* ty=Tensor[(104, 28), float64] */;
    %286 = @func_3609(%283, %284, %285) /* ty=(Tensor[(7, 12, 4), float64], Tensor[(14, 16, 13), bool], float64, Tensor[(104, 28), float64]) */;
    %287 = cast(%var_8261, dtype="float64") /* ty=float64 */;
    %288 = reshape(%287, newshape=[]) /* ty=float64 */;
    %289 = @func_4075(%288) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(14, 16, 13), bool], float64, Tensor[(1512), float32], Tensor[(126, 12), float32], Tensor[(10560), int8], Tensor[(2912), float32], Tensor[(16, 5, 12), int64], Tensor[(2, 480), int8], Tensor[(12, 4, 3), float32]) */;
    %290 = @func_5550() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %291 = cast(%var_8261, dtype="int8") /* ty=int8 */;
    %292 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 480), int8] */, dtype="int8") /* ty=Tensor[(2, 480), int8] */;
    %293 = reshape(%291, newshape=[]) /* ty=int8 */;
    %294 = reshape(%292, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), int8] */;
    %295 = @func_547(%293, %294) /* ty=(Tensor[(16, 5, 12), int64],) */;
    %296 = cast(%var_8248, dtype="float32") /* ty=Tensor[(5, 6, 3), float32] */;
    %297 = sqrt(%296) /* ty=Tensor[(5, 6, 3), float32] */;
    %298 = cast(%297, dtype="float64") /* ty=Tensor[(5, 6, 3), float64] */;
    %299 = power(%278, %279) /* ty=Tensor[(5, 6, 3), float32] */;
    %300 = %286.1;
    %301 = %289.1;
    %302 = %290.0;
    %303 = %295.0;
    %304 = exp(%298) /* ty=Tensor[(5, 6, 3), float64] */;
    (%299, %300, %var_8260, %var_8261, %var_8262, %301, %302, %303, meta[relay.Constant][15] /* ty=Tensor[(2, 480), int8] */, %304)
  };
  %305(%var_8299, %var_8300, %var_8301, %var_8302, %var_8303) /* ty=(Tensor[(5, 6, 3), float32], Tensor[(14, 16, 13), bool], Tensor[(336), float64], float64, Tensor[(2912), float64], Tensor[(14, 16, 13), bool], Tensor[(12, 4, 3), float32], Tensor[(16, 5, 12), int64], Tensor[(2, 480), int8], Tensor[(5, 6, 3), float64]) */
}

def @func_8599() -> Tensor[(12, 4, 3), float32] {
  @func_7944() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_8103(%var_8075: Tensor[(9, 15, 2), float32]) -> (Tensor[(2, 480), int8], float64, Tensor[(12, 4, 3), float32], Tensor[(968), float64], Tensor[(375), float64], Tensor[(9, 15, 2), float32]) {
  %306 = cast(-3.98815f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %307 = reshape(%306, newshape=[]) /* ty=float64 */;
  %308 = @func_4075(%307) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(14, 16, 13), bool], float64, Tensor[(1512), float32], Tensor[(126, 12), float32], Tensor[(10560), int8], Tensor[(2912), float32], Tensor[(16, 5, 12), int64], Tensor[(2, 480), int8], Tensor[(12, 4, 3), float32]) */;
  %309 = cast(meta[relay.Constant][16] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %310 = cast(meta[relay.Constant][17] /* ty=Tensor[(375), float64] */, dtype="float64") /* ty=Tensor[(375), float64] */;
  %311 = reshape(%309, newshape=[968]) /* ty=Tensor[(968), float64] */;
  %312 = reshape(%310, newshape=[375]) /* ty=Tensor[(375), float64] */;
  %313 = @func_7836(%311, %312) /* ty=(Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64], Tensor[(375), float64], Tensor[(375), float64], Tensor[(3, 6, 11), int16]) */;
  %314 = cast(%var_8075, dtype="float32") /* ty=Tensor[(9, 15, 2), float32] */;
  %315 = asin(%314) /* ty=Tensor[(9, 15, 2), float32] */;
  %316 = cast(%315, dtype="float32") /* ty=Tensor[(9, 15, 2), float32] */;
  %317 = %308.8;
  %318 = %313.1;
  %319 = sigmoid(%316) /* ty=Tensor[(9, 15, 2), float32] */;
  (%317, -3.98815f64 /* ty=float64 */, %318, meta[relay.Constant][16] /* ty=Tensor[(968), float64] */, meta[relay.Constant][17] /* ty=Tensor[(375), float64] */, %319)
}

def @func_7174(%var_7173: Tensor[(9, 5, 4), float64]) -> (Tensor[(9, 5, 4), float32],) {
  %324 = fn (%var_7159: Tensor[(9, 5, 4), float64]) -> (Tensor[(9, 5, 4), float32],) {
    %320 = cast(%var_7159, dtype="float64") /* ty=Tensor[(9, 5, 4), float64] */;
    %321 = erf(%320) /* ty=Tensor[(9, 5, 4), float64] */;
    %322 = cast(%321, dtype="float32") /* ty=Tensor[(9, 5, 4), float32] */;
    %323 = cosh(%322) /* ty=Tensor[(9, 5, 4), float32] */;
    (%323,)
  };
  %324(%var_7173) /* ty=(Tensor[(9, 5, 4), float32],) */
}

def @func_3947(%var_3945: Tensor[(330, 1), float64], %var_3946: Tensor[(1056), uint8]) -> (Tensor[(12, 4, 3), float32], Tensor[(5, 9, 7), int8], Tensor[(330, 1), float64], int8, Tensor[(270), int16], Tensor[(8, 12, 11), uint8], Tensor[(1056), uint8], Tensor[(?, 968), int8]) {
  @func_3943(%var_3945, %var_3946) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(5, 9, 7), int8], Tensor[(330, 1), float64], int8, Tensor[(270), int16], Tensor[(8, 12, 11), uint8], Tensor[(1056), uint8], Tensor[(?, 968), int8]) */
}

def @func_7612() -> Tensor[(12, 4, 3), float32] {
  @func_7610() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_7094(%var_7081: Tensor[(330), float64], %var_7082: int8, %var_7084: Tensor[(10560), int8]) -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32], Tensor[(2912), float64], Tensor[(2912), float64], Tensor[(10560), float32], Tensor[(12, 4, 3), float32], Tensor[(330), float64], int8, Tensor[(10560), float64]) {
  %325 = cast(meta[relay.Constant][18] /* ty=Tensor[(2912), float64] */, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %326 = cast(meta[relay.Constant][19] /* ty=Tensor[(10560), int8] */, dtype="int8") /* ty=Tensor[(10560), int8] */;
  %327 = reshape(%325, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %328 = reshape(%326, newshape=[10560]) /* ty=Tensor[(10560), int8] */;
  %329 = @func_6551(%327, %328) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(10560), int8], Tensor[(2912), float64], Tensor[(10560), int8], Tensor[(1512), int64], Tensor[(1512), float64]) */;
  %330 = cast(meta[relay.Constant][20] /* ty=Tensor[(10560), int8] */, dtype="float32") /* ty=Tensor[(10560), float32] */;
  %331 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(10560), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %332 = cast(meta[relay.Constant][19] /* ty=Tensor[(10560), int8] */, dtype="float32") /* ty=Tensor[(10560), float32] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?), float32] */;
  %334 = cast(%var_7081, dtype="float64") /* ty=Tensor[(330), float64] */;
  %335 = cast(%var_7082, dtype="int8") /* ty=int8 */;
  %336 = reshape(%334, newshape=[55, 6]) /* ty=Tensor[(55, 6), float64] */;
  %337 = reshape(%335, newshape=[]) /* ty=int8 */;
  %338 = @func_4510(%336, %337) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(4, 12, 9), uint8], Tensor[(968), float64], Tensor[(55, 6), float64], int8, Tensor[(1, 270), int16], Tensor[(8, 11, 11), float64], Tensor[(48), float64]) */;
  %339 = cast(%var_7084, dtype="float64") /* ty=Tensor[(10560), float64] */;
  %340 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(10560), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %341 = cast(meta[relay.Constant][20] /* ty=Tensor[(10560), int8] */, dtype="float64") /* ty=Tensor[(10560), float64] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?), float64] */;
  %343 = @func_6163() /* ty=Tensor[(12, 4, 3), float32] */;
  %344 = @func_5644() /* ty=Tensor[(12, 4, 3), float32] */;
  %345 = %329.2;
  %346 = floor_mod(%332, %333) /* ty=Tensor[(10560), float32] */;
  %347 = %338.0;
  %348 = mod(%341, %342) /* ty=Tensor[(10560), float64] */;
  (%343, %344, %345, meta[relay.Constant][18] /* ty=Tensor[(2912), float64] */, %346, %347, %var_7081, %var_7082, %348)
}

def @func_8787(%var_8784: Tensor[(180), float32], %var_8785: Tensor[(40, 264), int8], %var_8786: Tensor[(4, 2640), int8]) -> (Tensor[(960), int8], Tensor[(180), float32], Tensor[(144), float32], Tensor[(1512), float32], Tensor[(40, 264), int8], Tensor[(12, 4, 3), float32], Tensor[(4, 2640), int64]) {
  @func_8782(%var_8784, %var_8785, %var_8786) /* ty=(Tensor[(960), int8], Tensor[(180), float32], Tensor[(144), float32], Tensor[(1512), float32], Tensor[(40, 264), int8], Tensor[(12, 4, 3), float32], Tensor[(4, 2640), int64]) */
}

def @func_8917(%var_8914: Tensor[(7, 11, 13), float64], %var_8915: Tensor[(10560), int8], %var_8916: Tensor[(1056), uint8]) -> (Tensor[(7, 11, 13), float64], Tensor[(12, 4, 3), float64], Tensor[(144), float32], Tensor[(3, 60), float32], Tensor[(10560), float32], Tensor[(12, 4, 3), float64], Tensor[(1056), uint8], Tensor[(336, 1), float32]) {
  %372 = fn (%var_8875: Tensor[(7, 11, 13), float64], %var_8890: Tensor[(10560), int8], %var_8901: Tensor[(1056), uint8]) -> (Tensor[(7, 11, 13), float64], Tensor[(12, 4, 3), float64], Tensor[(144), float32], Tensor[(3, 60), float32], Tensor[(10560), float32], Tensor[(12, 4, 3), float64], Tensor[(1056), uint8], Tensor[(336, 1), float32]) {
    %349 = cast(%var_8875, dtype="float64") /* ty=Tensor[(7, 11, 13), float64] */;
    %350 = @func_5401() /* ty=(Tensor[(12, 4, 3), float64],) */;
    %351 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 60), float32] */, dtype="float32") /* ty=Tensor[(3, 60), float32] */;
    %352 = cast(meta[relay.Constant][22] /* ty=Tensor[(10560), int8] */, dtype="int8") /* ty=Tensor[(10560), int8] */;
    %353 = cast(meta[relay.Constant][22] /* ty=Tensor[(10560), int8] */, dtype="int8") /* ty=Tensor[(10560), int8] */;
    %354 = reshape(%351, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %355 = reshape(%352, newshape=[40, 264]) /* ty=Tensor[(40, 264), int8] */;
    %356 = reshape(%353, newshape=[4, 2640]) /* ty=Tensor[(4, 2640), int8] */;
    %357 = @func_8782(%354, %355, %356) /* ty=(Tensor[(960), int8], Tensor[(180), float32], Tensor[(144), float32], Tensor[(1512), float32], Tensor[(40, 264), int8], Tensor[(12, 4, 3), float32], Tensor[(4, 2640), int64]) */;
    %358 = cast(%var_8890, dtype="float32") /* ty=Tensor[(10560), float32] */;
    %359 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(10560), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %360 = cast(meta[relay.Constant][22] /* ty=Tensor[(10560), int8] */, dtype="float32") /* ty=Tensor[(10560), float32] */;
    %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?), float32] */;
    %362 = cast(%var_8901, dtype="uint8") /* ty=Tensor[(1056), uint8] */;
    %363 = cast(meta[relay.Constant][23] /* ty=Tensor[(336, 1), float32] */, dtype="float32") /* ty=Tensor[(336, 1), float32] */;
    %364 = reshape(%362, newshape=[1, 1056]) /* ty=Tensor[(1, 1056), uint8] */;
    %365 = reshape(%363, newshape=[8, 3, 14]) /* ty=Tensor[(8, 3, 14), float32] */;
    %366 = @func_8670(%364, %365) /* ty=(Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 12, 11), uint8], Tensor[(1, 1056), uint8], Tensor[(8, 3, 14), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */;
    %367 = tan(%349) /* ty=Tensor[(7, 11, 13), float64] */;
    %368 = %350.0;
    %369 = %357.2;
    %370 = power(%360, %361) /* ty=Tensor[(10560), float32] */;
    %371 = %366.2;
    (%367, %368, %369, meta[relay.Constant][21] /* ty=Tensor[(3, 60), float32] */, %370, %371, %var_8901, meta[relay.Constant][23] /* ty=Tensor[(336, 1), float32] */)
  };
  %372(%var_8914, %var_8915, %var_8916) /* ty=(Tensor[(7, 11, 13), float64], Tensor[(12, 4, 3), float64], Tensor[(144), float32], Tensor[(3, 60), float32], Tensor[(10560), float32], Tensor[(12, 4, 3), float64], Tensor[(1056), uint8], Tensor[(336, 1), float32]) */
}

def @func_5130(%var_5125: Tensor[(12, 4, 3), bool]) -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), bool]) {
  %373 = @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %374 = %373.0;
  %375 = cast(%374, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %376 = reshape(%375, newshape=[12, 4, 3]) /* ty=Tensor[(12, 4, 3), float32] */;
  %377 = @func_4106(%376) /* ty=Tensor[(12, 4, 3), bool] */;
  %378 = cast(%var_5125, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%377, dtype="bool") /* ty=Tensor[(12, 4, 3), bool] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %382 = less_equal(%380, %381) /* ty=Tensor[(12, 4, 3), bool] */;
  (%374, %382)
}

def @func_8782(%var_8744: Tensor[(180), float32], %var_8747: Tensor[(40, 264), int8], %var_8773: Tensor[(4, 2640), int8]) -> (Tensor[(960), int8], Tensor[(180), float32], Tensor[(144), float32], Tensor[(1512), float32], Tensor[(40, 264), int8], Tensor[(12, 4, 3), float32], Tensor[(4, 2640), int64]) {
  %383 = @func_7537() /* ty=(Tensor[(960), int8],) */;
  %384 = @func_7261() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %385 = cast(%var_8744, dtype="float32") /* ty=Tensor[(180), float32] */;
  %386 = cast(meta[relay.Constant][24] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %387 = cast(meta[relay.Constant][25] /* ty=Tensor[(1512), float32] */, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %388 = cast(%var_8747, dtype="int8") /* ty=Tensor[(40, 264), int8] */;
  %389 = reshape(%385, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float32] */;
  %390 = reshape(%386, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %391 = reshape(%387, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
  %392 = reshape(%388, newshape=[4, 2640]) /* ty=Tensor[(4, 2640), int8] */;
  %393 = @func_5320(%389, %390, %391, %392) /* ty=(Tensor[(10, 2, 9), float32], Tensor[(12, 4, 3), bool], Tensor[(144), float32], Tensor[(10, 2, 9), float32], Tensor[(10560), int8], Tensor[(1512), float32], Tensor[(8, 364), float64], Tensor[(4, 2640), int8]) */;
  %394 = %393.7;
  %395 = cast(%var_8773, dtype="float32") /* ty=Tensor[(4, 2640), float32] */;
  %396 = shape_of(%394, dtype="int32") /* ty=Tensor[(2), int32] */;
  %397 = cast(%394, dtype="float32") /* ty=Tensor[(4, 2640), float32] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %399 = minimum(%397, %398) /* ty=Tensor[(4, 2640), float32] */;
  %400 = cast(%394, dtype="int64") /* ty=Tensor[(4, 2640), int64] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(2), int32] */;
  %402 = cast(%399, dtype="int64") /* ty=Tensor[(4, 2640), int64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %404 = %383.0;
  %405 = %384.0;
  %406 = bitwise_xor(%402, %403) /* ty=Tensor[(4, 2640), int64] */;
  (%404, %var_8744, meta[relay.Constant][24] /* ty=Tensor[(144), float32] */, meta[relay.Constant][25] /* ty=Tensor[(1512), float32] */, %var_8747, %405, %406)
}

def @func_6165() -> Tensor[(12, 4, 3), float32] {
  @func_6163() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_4280() -> (Tensor[(12, 4, 3), float32],) {
  %409 = fn () -> (Tensor[(12, 4, 3), float32],) {
    %407 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
    %408 = %407.1;
    (%408,)
  };
  %409() /* ty=(Tensor[(12, 4, 3), float32],) */
}

def @func_7445(%var_7442: Tensor[(13, 1, 1), uint8], %var_7443: Tensor[(13, 1, 5), uint8], %var_7444: Tensor[(13, 1, 5), float32]) -> Tensor[(13, ?, 5), int64] {
  %424 = fn (%var_7409: Tensor[(13, 1, 1), uint8], %var_7410: Tensor[(13, 1, 5), uint8], %var_7423: Tensor[(13, 1, 5), float32]) -> Tensor[(13, ?, 5), int64] {
    %410 = cast(%var_7409, dtype="uint8") /* ty=Tensor[(13, 1, 1), uint8] */;
    %411 = cast(%var_7410, dtype="uint8") /* ty=Tensor[(13, 1, 5), uint8] */;
    %412 = right_shift(%410, %411) /* ty=Tensor[(13, 1, 5), uint8] */;
    %413 = cast(%412, dtype="float32") /* ty=Tensor[(13, 1, 5), float32] */;
    %414 = sin(%413) /* ty=Tensor[(13, 1, 5), float32] */;
    %415 = cast(%var_7423, dtype="int64") /* ty=Tensor[(13, 1, 5), int64] */;
    %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
    %417 = cast(%414, dtype="int64") /* ty=Tensor[(13, 1, 5), int64] */;
    %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %419 = left_shift(%417, %418) /* ty=Tensor[(13, ?, 5), int64] */;
    %420 = cast(%414, dtype="int64") /* ty=Tensor[(13, 1, 5), int64] */;
    %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
    %422 = cast(%419, dtype="int64") /* ty=Tensor[(13, ?, 5), int64] */;
    %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_xor(%422, %423) /* ty=Tensor[(13, ?, 5), int64] */
  };
  %424(%var_7442, %var_7443, %var_7444) /* ty=Tensor[(13, ?, 5), int64] */
}

def @func_5886(%var_5880: Tensor[(2912), float64], %var_5881: Tensor[(1, 10560), int8]) -> (Tensor[(12, 4, 3), float32], Tensor[(14, 16, 13), bool], Tensor[(2912), float64], Tensor[(1, 10560), int8]) {
  %425 = cast(%var_5880, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %426 = cast(%var_5881, dtype="int8") /* ty=Tensor[(1, 10560), int8] */;
  %427 = reshape(%425, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %428 = reshape(%426, newshape=[11, 960]) /* ty=Tensor[(11, 960), int8] */;
  %429 = @func_1019(%427, %428) /* ty=(Tensor[(16, 5, 12), int64], int8, Tensor[(2912), float64], Tensor[(11, 960), float32], Tensor[(15, 6, 3), bool], Tensor[(2, 16, 3), uint8], Tensor[(15, 6, 3), float32], Tensor[(2, 16, 3), int64], Tensor[(15, 6, 3), float32], Tensor[(1, 270), float32], Tensor[(14, 16, 13), bool]) */;
  %430 = @func_3966() /* ty=Tensor[(12, 4, 3), float32] */;
  %431 = %429.10;
  (%430, %431, %var_5880, %var_5881)
}

def @func_8492() -> Tensor[(960), int8] {
  %432 = @func_6934() /* ty=(Tensor[(960), int8],) */;
  %432.0
}

def @func_2120(%var_2118: Tensor[(4, 12, 9), uint8], %var_2119: Tensor[(4, 12, 9), uint8]) -> (Tensor[(4, 12, 9), uint8], Tensor[(4, 12, 9), float32]) {
  %440 = fn (%var_2093: Tensor[(4, 12, 9), uint8], %var_2094: Tensor[(4, 12, 9), uint8]) -> (Tensor[(4, 12, 9), uint8], Tensor[(4, 12, 9), float32]) {
    %433 = cast(%var_2094, dtype="uint8") /* ty=Tensor[(4, 12, 9), uint8] */;
    %434 = shape_of(%var_2093, dtype="int32") /* ty=Tensor[(3), int32] */;
    %435 = cast(%var_2093, dtype="uint8") /* ty=Tensor[(4, 12, 9), uint8] */;
    %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %437 = cast(%var_2093, dtype="float32") /* ty=Tensor[(4, 12, 9), float32] */;
    %438 = add(%435, %436) /* ty=Tensor[(4, 12, 9), uint8] */;
    %439 = sin(%437) /* ty=Tensor[(4, 12, 9), float32] */;
    (%438, %439)
  };
  %440(%var_2118, %var_2119) /* ty=(Tensor[(4, 12, 9), uint8], Tensor[(4, 12, 9), float32]) */
}

def @func_2791(%var_2756: Tensor[(5, 15, 5), float64], %var_2766: Tensor[(5, 15, 5), float64]) -> (Tensor[(5, 15, 5), float64], Tensor[(5, 15, 5), int32]) {
  %441 = cast(%var_2756, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %442 = cast(%var_2766, dtype="int32") /* ty=Tensor[(5, 15, 5), int32] */;
  %443 = shape_of(%var_2756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%var_2756, dtype="int32") /* ty=Tensor[(5, 15, 5), int32] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %446 = acos(%441) /* ty=Tensor[(5, 15, 5), float64] */;
  %447 = logical_xor(%444, %445) /* ty=Tensor[(5, 15, 5), int32] */;
  (%446, %447)
}

def @func_2725(%var_2721: Tensor[(968), float64], %var_2722: Tensor[(330), float64], %var_2723: int8, %var_2724: Tensor[(270), int16]) -> (Tensor[(8, 11, 11), float64], Tensor[(5, 9, 7), float64], Tensor[(4, 12, 9), float32], Tensor[(432), uint8], Tensor[(5, 9, 7), float64], Tensor[(11, 6, 5), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(5, 9, 7), int8], Tensor[(4, 12, 9), uint8], Tensor[(968), float64]) {
  %490 = fn (%var_2661: Tensor[(968), float64], %var_2690: Tensor[(330), float64], %var_2691: int8, %var_2692: Tensor[(270), int16]) -> (Tensor[(8, 11, 11), float64], Tensor[(5, 9, 7), float64], Tensor[(4, 12, 9), float32], Tensor[(432), uint8], Tensor[(5, 9, 7), float64], Tensor[(11, 6, 5), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(5, 9, 7), int8], Tensor[(4, 12, 9), uint8], Tensor[(968), float64]) {
    %448 = cast(%var_2661, dtype="float64") /* ty=Tensor[(968), float64] */;
    %449 = reshape(%448, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
    %450 = @func_1852(%449) /* ty=(Tensor[(8, 11, 11), float64],) */;
    %451 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 9, 7), float32] */, dtype="float32") /* ty=Tensor[(5, 9, 7), float32] */;
    %452 = sin(%451) /* ty=Tensor[(5, 9, 7), float32] */;
    %453 = cast(%452, dtype="float64") /* ty=Tensor[(5, 9, 7), float64] */;
    %454 = cast(meta[relay.Constant][27] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %455 = cast(meta[relay.Constant][27] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %456 = reshape(%454, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint8] */;
    %457 = reshape(%455, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint8] */;
    %458 = @func_2117(%456, %457) /* ty=(Tensor[(4, 12, 9), uint8], Tensor[(4, 12, 9), float32]) */;
    %459 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 9, 7), float32] */, dtype="bool") /* ty=Tensor[(5, 9, 7), bool] */;
    %460 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
    %461 = cast(%452, dtype="bool") /* ty=Tensor[(5, 9, 7), bool] */;
    %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %463 = logical_and(%461, %462) /* ty=Tensor[(5, 9, 7), bool] */;
    %464 = cast(%463, dtype="float64") /* ty=Tensor[(5, 9, 7), float64] */;
    %465 = cast(%var_2690, dtype="float64") /* ty=Tensor[(330), float64] */;
    %466 = cast(%var_2691, dtype="int8") /* ty=int8 */;
    %467 = cast(%var_2692, dtype="int16") /* ty=Tensor[(270), int16] */;
    %468 = reshape(%465, newshape=[11, 6, 5]) /* ty=Tensor[(11, 6, 5), float64] */;
    %469 = reshape(%466, newshape=[]) /* ty=int8 */;
    %470 = reshape(%467, newshape=[270, 1]) /* ty=Tensor[(270, 1), int16] */;
    %471 = @func_1343(%468, %469, %470) /* ty=(Tensor[(16, 5, 12), int64], Tensor[(960), int8], Tensor[(11, 6, 5), bool], Tensor[(15, 6, 3), float32], Tensor[(270, 1), int16], Tensor[(11, 6, 5), float64]) */;
    %472 = cast(%452, dtype="int8") /* ty=Tensor[(5, 9, 7), int8] */;
    %473 = shape_of(%463, dtype="int32") /* ty=Tensor[(3), int32] */;
    %474 = cast(%463, dtype="int8") /* ty=Tensor[(5, 9, 7), int8] */;
    %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %476 = cast(meta[relay.Constant][27] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %477 = %458.1;
    %478 = cast(%477, dtype="uint8") /* ty=Tensor[(4, 12, 9), uint8] */;
    %479 = reshape(%476, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint8] */;
    %480 = reshape(%478, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint8] */;
    %481 = @func_2117(%479, %480) /* ty=(Tensor[(4, 12, 9), uint8], Tensor[(4, 12, 9), float32]) */;
    %482 = cast(%var_2661, dtype="float64") /* ty=Tensor[(968), float64] */;
    %483 = %450.0;
    %484 = acosh(%453) /* ty=Tensor[(5, 9, 7), float64] */;
    %485 = log2(%464) /* ty=Tensor[(5, 9, 7), float64] */;
    %486 = %471.5;
    %487 = multiply(%474, %475) /* ty=Tensor[(5, 9, 7), int8] */;
    %488 = %481.0;
    %489 = sinh(%482) /* ty=Tensor[(968), float64] */;
    (%483, %484, %477, meta[relay.Constant][27] /* ty=Tensor[(432), uint8] */, %485, %486, %var_2690, %var_2691, %var_2692, %487, %488, %489)
  };
  %490(%var_2721, %var_2722, %var_2723, %var_2724) /* ty=(Tensor[(8, 11, 11), float64], Tensor[(5, 9, 7), float64], Tensor[(4, 12, 9), float32], Tensor[(432), uint8], Tensor[(5, 9, 7), float64], Tensor[(11, 6, 5), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(5, 9, 7), int8], Tensor[(4, 12, 9), uint8], Tensor[(968), float64]) */
}

def @func_7709(%var_7707: Tensor[(90, 3), float64]) -> (Tensor[(90, 3), int32],) {
  @func_7706(%var_7707) /* ty=(Tensor[(90, 3), int32],) */
}

def @func_7839(%var_7837: Tensor[(968), float64], %var_7838: Tensor[(375), float64]) -> (Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64], Tensor[(375), float64], Tensor[(375), float64], Tensor[(3, 6, 11), int16]) {
  %507 = fn (%var_7806: Tensor[(968), float64], %var_7821: Tensor[(375), float64]) -> (Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64], Tensor[(375), float64], Tensor[(375), float64], Tensor[(3, 6, 11), int16]) {
    %491 = @func_7519() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
    %492 = @func_4279() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %493 = %492.0;
    %494 = cast(%493, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
    %495 = cast(%var_7806, dtype="float64") /* ty=Tensor[(968), float64] */;
    %496 = reshape(%495, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
    %497 = @func_1852(%496) /* ty=(Tensor[(8, 11, 11), float64],) */;
    %498 = cast(%var_7821, dtype="float64") /* ty=Tensor[(375), float64] */;
    %499 = reshape(%498, newshape=[375]) /* ty=Tensor[(375), float64] */;
    %500 = @func_5961(%499) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(5, 15, 5), int32], Tensor[(375), float64]) */;
    %501 = @func_6273() /* ty=Tensor[(12, 4, 3), float64] */;
    %502 = %491.1;
    %503 = acosh(%494) /* ty=Tensor[(12, 4, 3), float64] */;
    %504 = %497.0;
    %505 = %500.2;
    %506 = @func_6620() /* ty=Tensor[(3, 6, 11), int16] */;
    (%501, %502, %503, %504, %var_7806, %505, %var_7821, %506)
  };
  %507(%var_7837, %var_7838) /* ty=(Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64], Tensor[(375), float64], Tensor[(375), float64], Tensor[(3, 6, 11), int16]) */
}

def @func_4392(%var_4360: Tensor[(1, 12, 4), float64], %var_4366: Tensor[(22, 44), float64]) -> (Tensor[(8, 11, 11), float64], Tensor[(22, 44), float64], Tensor[(1, 12, 4), float32]) {
  %508 = cast(%var_4366, dtype="float64") /* ty=Tensor[(22, 44), float64] */;
  %509 = reshape(%508, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
  %510 = @func_1852(%509) /* ty=(Tensor[(8, 11, 11), float64],) */;
  %511 = cast(%var_4360, dtype="float64") /* ty=Tensor[(1, 12, 4), float64] */;
  %512 = cos(%511) /* ty=Tensor[(1, 12, 4), float64] */;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(1, 12, 4), float32] */;
  %514 = %510.0;
  %515 = log(%513) /* ty=Tensor[(1, 12, 4), float32] */;
  (%514, %var_4366, %515)
}

def @func_7945() -> Tensor[(12, 4, 3), float32] {
  %517 = fn () -> Tensor[(12, 4, 3), float32] {
    %516 = @func_4562() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %516.0
  };
  %517() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_5532(%var_5530: Tensor[(2912), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(90, 3), bool], Tensor[(14, 16, 13), bool], float64, Tensor[(2912), float64]) {
  @func_5529(%var_5530) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(90, 3), bool], Tensor[(14, 16, 13), bool], float64, Tensor[(2912), float64]) */
}

def @func_6411() -> Tensor[(12, 4, 3), float32] {
  %518 = fn () -> Tensor[(12, 4, 3), float32] {
    @func_5981() /* ty=Tensor[(12, 4, 3), float32] */
  };
  %518() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_6620() -> Tensor[(3, 6, 11), int16] {
  %519 = @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */;
  %519.3
}

def @func_8543() -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) {
  %523 = fn () -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) {
    %520 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
    %521 = @func_5981() /* ty=Tensor[(12, 4, 3), float32] */;
    %522 = %520.0;
    (%521, %522)
  };
  %523() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */
}

def @func_9059(%var_9035: Tensor[(1056), uint8]) -> (Tensor[(12, 4, 3), float32], Tensor[(8, 12, 11), uint8], Tensor[(1056), float64], Tensor[(12, 4, 3), float32]) {
  %524 = @func_5091() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %525 = cast(%var_9035, dtype="uint8") /* ty=Tensor[(1056), uint8] */;
  %526 = cast(%var_9035, dtype="uint8") /* ty=Tensor[(1056), uint8] */;
  %527 = reshape(%525, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
  %528 = reshape(%526, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
  %529 = cast(%var_9035, dtype="float64") /* ty=Tensor[(1056), float64] */;
  %530 = %524.0;
  %531 = @func_2826(%527, %528) /* ty=Tensor[(8, 12, 11), uint8] */;
  %532 = sqrt(%529) /* ty=Tensor[(1056), float64] */;
  %533 = @func_7944() /* ty=Tensor[(12, 4, 3), float32] */;
  (%530, %531, %532, %533)
}

def @main() -> (Tensor[(12, 4, 3), int16],) {
  %534 = @func_6273() /* ty=Tensor[(12, 4, 3), float64] */;
  %535 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 4, 3), float64] */, dtype="int16") /* ty=Tensor[(12, 4, 3), int16] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%534, dtype="int16") /* ty=Tensor[(12, 4, 3), int16] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %539 = right_shift(%537, %538) /* ty=Tensor[(12, 4, 3), int16] */;
  (%539,)
}

def @func_5255() -> Tensor[(12, 4, 3), float32] {
  %541 = fn () -> Tensor[(12, 4, 3), float32] {
    %540 = @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %540.0
  };
  %541() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_8515() -> (Tensor[(12, 4, 3), float32],) {
  @func_8513() /* ty=(Tensor[(12, 4, 3), float32],) */
}

def @func_6319() -> (Tensor[(12, 4, 3), float32],) {
  %542 = @func_5803() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %543 = %542.0;
  (%543,)
}

def @func_8943() -> Tensor[(12, 4, 3), float32] {
  @func_8941() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_4920(%var_4908: Tensor[(270), int16]) -> (Tensor[(3, 6, 11), int16], Tensor[(11, 6, 5), float64], Tensor[(968), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(8, 12, 11), uint8], Tensor[(1056), uint8]) {
  %544 = @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */;
  %545 = cast(meta[relay.Constant][29] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %546 = cast(meta[relay.Constant][30] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %547 = cast(meta[relay.Constant][31] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %548 = cast(%var_4908, dtype="int16") /* ty=Tensor[(270), int16] */;
  %549 = reshape(%545, newshape=[968]) /* ty=Tensor[(968), float64] */;
  %550 = reshape(%546, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %551 = reshape(%547, newshape=[]) /* ty=int8 */;
  %552 = reshape(%548, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %553 = @func_2720(%549, %550, %551, %552) /* ty=(Tensor[(8, 11, 11), float64], Tensor[(5, 9, 7), float64], Tensor[(4, 12, 9), float32], Tensor[(432), uint8], Tensor[(5, 9, 7), float64], Tensor[(11, 6, 5), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(5, 9, 7), int8], Tensor[(4, 12, 9), uint8], Tensor[(968), float64]) */;
  %554 = cast(meta[relay.Constant][32] /* ty=Tensor[(1056), uint8] */, dtype="uint8") /* ty=Tensor[(1056), uint8] */;
  %555 = cast(meta[relay.Constant][32] /* ty=Tensor[(1056), uint8] */, dtype="uint8") /* ty=Tensor[(1056), uint8] */;
  %556 = reshape(%554, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
  %557 = reshape(%555, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
  %558 = %544.3;
  %559 = %553.5;
  %560 = @func_2826(%556, %557) /* ty=Tensor[(8, 12, 11), uint8] */;
  (%558, %559, meta[relay.Constant][29] /* ty=Tensor[(968), float64] */, meta[relay.Constant][30] /* ty=Tensor[(330), float64] */, meta[relay.Constant][31] /* ty=int8 */, %var_4908, %560, meta[relay.Constant][32] /* ty=Tensor[(1056), uint8] */)
}

def @func_7476(%var_7475: Tensor[(11, 8, 13), uint8]) -> Tensor[(11, 8, 13), bool] {
  %565 = fn (%var_7465: Tensor[(11, 8, 13), uint8]) -> Tensor[(11, 8, 13), bool] {
    %561 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 8, 13), uint8] */, dtype="bool") /* ty=Tensor[(11, 8, 13), bool] */;
    %562 = shape_of(%var_7465, dtype="int32") /* ty=Tensor[(3), int32] */;
    %563 = cast(%var_7465, dtype="bool") /* ty=Tensor[(11, 8, 13), bool] */;
    %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%563, %564) /* ty=Tensor[(11, 8, 13), bool] */
  };
  %565(%var_7475) /* ty=Tensor[(11, 8, 13), bool] */
}

def @func_4013(%var_3995: Tensor[(1512), float32], %var_3996: Tensor[(2912), float64], %var_4002: Tensor[(10560), int8]) -> (Tensor[(12, 4, 3), float32], Tensor[(15, 6, 3), float32], Tensor[(1512), float32], Tensor[(2912), float64], Tensor[(12, 4, 3), float32], Tensor[(10560), int8]) {
  %566 = cast(%var_3995, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %567 = cast(%var_3995, dtype="float32") /* ty=Tensor[(1512), float32] */;
  %568 = cast(%var_3996, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %569 = cast(meta[relay.Constant][34] /* ty=Tensor[(10560), int8] */, dtype="int8") /* ty=Tensor[(10560), int8] */;
  %570 = reshape(%566, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
  %571 = reshape(%567, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
  %572 = reshape(%568, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
  %573 = reshape(%569, newshape=[10560]) /* ty=Tensor[(10560), int8] */;
  %574 = @func_2370(%570, %571, %572, %573) /* ty=(Tensor[(12, 9, 14), float32], Tensor[(15, 6, 3), float32], Tensor[(2912), float64], Tensor[(10560), int8]) */;
  %575 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %576 = cast(%var_4002, dtype="int8") /* ty=Tensor[(10560), int8] */;
  %577 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(10560), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %578 = cast(meta[relay.Constant][34] /* ty=Tensor[(10560), int8] */, dtype="int8") /* ty=Tensor[(10560), int8] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?), int8] */;
  %580 = @func_3966() /* ty=Tensor[(12, 4, 3), float32] */;
  %581 = %574.1;
  %582 = %575.0;
  %583 = minimum(%578, %579) /* ty=Tensor[(10560), int8] */;
  (%580, %581, %var_3995, %var_3996, %582, %583)
}

def @func_4562() -> (Tensor[(12, 4, 3), float32],) {
  %584 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %585 = %584.0;
  (%585,)
}

def @func_4396(%var_4394: Tensor[(1, 12, 4), float64], %var_4395: Tensor[(22, 44), float64]) -> (Tensor[(8, 11, 11), float64], Tensor[(22, 44), float64], Tensor[(1, 12, 4), float32]) {
  @func_4392(%var_4394, %var_4395) /* ty=(Tensor[(8, 11, 11), float64], Tensor[(22, 44), float64], Tensor[(1, 12, 4), float32]) */
}

def @func_8566() -> Tensor[(12, 4, 3), float32] {
  @func_8564() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_7683() -> (Tensor[(12, 4, 3), float32],) {
  %588 = fn () -> (Tensor[(12, 4, 3), float32],) {
    %586 = @func_5081() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(1056), uint8], Tensor[(90, 3), float64]) */;
    %587 = %586.0;
    (%587,)
  };
  %588() /* ty=(Tensor[(12, 4, 3), float32],) */
}

def @func_8722() -> (Tensor[(12, 4, 3), float32],) {
  @func_8720() /* ty=(Tensor[(12, 4, 3), float32],) */
}

def @func_1343(%var_1312: Tensor[(11, 6, 5), float64], %var_1322: int8, %var_1332: Tensor[(270, 1), int16]) -> (Tensor[(16, 5, 12), int64], Tensor[(960), int8], Tensor[(11, 6, 5), bool], Tensor[(15, 6, 3), float32], Tensor[(270, 1), int16], Tensor[(11, 6, 5), float64]) {
  %589 = cast(%var_1322, dtype="int8") /* ty=int8 */;
  %590 = cast(meta[relay.Constant][35] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %591 = reshape(%589, newshape=[]) /* ty=int8 */;
  %592 = reshape(%590, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), int8] */;
  %593 = @func_547(%591, %592) /* ty=(Tensor[(16, 5, 12), int64],) */;
  %594 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(11, 6, 5), float64] */;
  %595 = shape_of(%var_1312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%var_1312, dtype="float64") /* ty=Tensor[(11, 6, 5), float64] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %598 = power(%596, %597) /* ty=Tensor[(11, 6, 5), float64] */;
  %599 = cast(%598, dtype="bool") /* ty=Tensor[(11, 6, 5), bool] */;
  %600 = cast(%var_1322, dtype="bool") /* ty=bool */;
  %601 = cast(%var_1332, dtype="int16") /* ty=Tensor[(270, 1), int16] */;
  %602 = cast(%var_1332, dtype="int16") /* ty=Tensor[(270, 1), int16] */;
  %603 = reshape(%601, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
  %604 = reshape(%602, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
  %605 = @func_198(%603, %604) /* ty=(Tensor[(15, 6, 3), int16], Tensor[(15, 6, 3), float32], Tensor[(15, 6, 3), float32]) */;
  %606 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 6, 5), float64] */, dtype="float64") /* ty=Tensor[(11, 6, 5), float64] */;
  %607 = %593.0;
  %608 = logical_or(%599, %600) /* ty=Tensor[(11, 6, 5), bool] */;
  %609 = %605.2;
  %610 = rsqrt(%606) /* ty=Tensor[(11, 6, 5), float64] */;
  (%607, meta[relay.Constant][35] /* ty=Tensor[(960), int8] */, %608, %609, %var_1332, %610)
}

def @func_4262(%var_4213: Tensor[(12, 4, 3), float32]) -> (Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32]) {
  %611 = cast(%var_4213, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %612 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %613 = %612.0;
  %614 = cast(%var_4213, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%613, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %618 = maximum(%616, %617) /* ty=Tensor[(12, 4, 3), float32] */;
  %619 = cast(%618, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %620 = acos(%611) /* ty=Tensor[(12, 4, 3), float64] */;
  %621 = rsqrt(%619) /* ty=Tensor[(12, 4, 3), float32] */;
  (%620, %621)
}

def @func_6877(%var_6876: Tensor[(330), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 11, 11), float64], Tensor[(330), float64], int8) {
  %636 = fn (%var_6869: Tensor[(330), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 11, 11), float64], Tensor[(330), float64], int8) {
    %622 = @func_4279() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %623 = %622.0;
    %624 = cast(%623, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
    %625 = reshape(%624, newshape=[12, 4, 3]) /* ty=Tensor[(12, 4, 3), float64] */;
    %626 = @func_4704(%625) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), int8], Tensor[(12, 4, 3), int64]) */;
    %627 = cast(%623, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
    %628 = cast(%var_6869, dtype="float64") /* ty=Tensor[(330), float64] */;
    %629 = cast(meta[relay.Constant][37] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %630 = reshape(%628, newshape=[55, 6]) /* ty=Tensor[(55, 6), float64] */;
    %631 = reshape(%629, newshape=[]) /* ty=int8 */;
    %632 = @func_4510(%630, %631) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(4, 12, 9), uint8], Tensor[(968), float64], Tensor[(55, 6), float64], int8, Tensor[(1, 270), int16], Tensor[(8, 11, 11), float64], Tensor[(48), float64]) */;
    %633 = %626.0;
    %634 = atan(%627) /* ty=Tensor[(12, 4, 3), float64] */;
    %635 = %632.6;
    (%633, %634, %635, %var_6869, meta[relay.Constant][37] /* ty=int8 */)
  };
  %636(%var_6876) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 11, 11), float64], Tensor[(330), float64], int8) */
}

def @func_4828() -> (Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) {
  %637 = @func_4279() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %638 = cast(meta[relay.Constant][39] /* ty=Tensor[(198), int16] */, dtype="int16") /* ty=Tensor[(198), int16] */;
  %639 = cast(meta[relay.Constant][38] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %640 = reshape(%638, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int16] */;
  %641 = reshape(%639, newshape=[960]) /* ty=Tensor[(960), int8] */;
  %642 = @func_2960(%640, %641) /* ty=(Tensor[(3, 6, 11), int16], Tensor[(16, 5, 12), int64], int8, Tensor[(960), int8]) */;
  %643 = %642.0;
  %644 = cast(meta[relay.Constant][39] /* ty=Tensor[(198), int16] */, dtype="float32") /* ty=Tensor[(198), float32] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="float32") /* ty=Tensor[(3, 6, 11), float32] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %648 = cast(meta[relay.Constant][39] /* ty=Tensor[(198), int16] */, dtype="int16") /* ty=Tensor[(198), int16] */;
  %649 = cast(meta[relay.Constant][38] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %650 = reshape(%648, newshape=[3, 6, 11]) /* ty=Tensor[(3, 6, 11), int16] */;
  %651 = reshape(%649, newshape=[960]) /* ty=Tensor[(960), int8] */;
  %652 = @func_2960(%650, %651) /* ty=(Tensor[(3, 6, 11), int16], Tensor[(16, 5, 12), int64], int8, Tensor[(960), int8]) */;
  %653 = %637.0;
  %654 = cast(%653, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %655 = reshape(%654, newshape=[12, 4, 3]) /* ty=Tensor[(12, 4, 3), float32] */;
  %656 = @func_4262(%655) /* ty=(Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32]) */;
  %657 = divide(%646, %647) /* ty=Tensor[(3, 6, 11), float32] */;
  %658 = %652.0;
  %659 = %656.0;
  (%653, meta[relay.Constant][38] /* ty=Tensor[(960), int8] */, %657, %658, %659)
}

def @func_8801() -> (Tensor[(12, 4, 3), float64],) {
  @func_8799() /* ty=(Tensor[(12, 4, 3), float64],) */
}

def @func_4707(%var_4705: Tensor[(12, 4, 3), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), int8], Tensor[(12, 4, 3), int64]) {
  @func_4704(%var_4705) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), int8], Tensor[(12, 4, 3), int64]) */
}

def @func_4896() -> (Tensor[(12, 4, 3), float32],) {
  %660 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %661 = %660.1;
  (%661,)
}

def @func_3614(%var_3611: Tensor[(7, 12, 4), float64], %var_3612: float64, %var_3613: Tensor[(104, 28), float64]) -> (Tensor[(7, 12, 4), float64], Tensor[(14, 16, 13), bool], float64, Tensor[(104, 28), float64]) {
  @func_3609(%var_3611, %var_3612, %var_3613) /* ty=(Tensor[(7, 12, 4), float64], Tensor[(14, 16, 13), bool], float64, Tensor[(104, 28), float64]) */
}

def @func_5964(%var_5962: Tensor[(375), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(5, 15, 5), int32], Tensor[(375), float64]) {
  @func_5961(%var_5962) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(5, 15, 5), int32], Tensor[(375), float64]) */
}

def @func_6274() -> Tensor[(12, 4, 3), float64] {
  %663 = fn () -> Tensor[(12, 4, 3), float64] {
    %662 = @func_5401() /* ty=(Tensor[(12, 4, 3), float64],) */;
    %662.0
  };
  %663() /* ty=Tensor[(12, 4, 3), float64] */
}

def @func_7860() -> (Tensor[(1056), uint8],) {
  %664 = @func_5081() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(1056), uint8], Tensor[(90, 3), float64]) */;
  %665 = %664.1;
  (%665,)
}

def @func_8059() -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) {
  %666 = @func_6905() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %667 = @func_6287() /* ty=Tensor[(12, 4, 3), float32] */;
  %668 = %666.0;
  (%667, %668)
}

def @func_5234(%var_5204: Tensor[(12, 4, 3), float32]) -> (Tensor[(12, 4, 3), float64],) {
  %669 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %670 = %669.1;
  %671 = cast(%var_5204, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%670, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %675 = mod(%673, %674) /* ty=Tensor[(12, 4, 3), float64] */;
  (%675,)
}

def @func_5485(%var_5484: Tensor[(336), float64]) -> (Tensor[(12, 4, 3), float32], float64, Tensor[(336), float64], float64, Tensor[(2912), float64]) {
  %686 = fn (%var_5451: Tensor[(336), float64]) -> (Tensor[(12, 4, 3), float32], float64, Tensor[(336), float64], float64, Tensor[(2912), float64]) {
    %676 = @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %677 = cast(%var_5451, dtype="float64") /* ty=Tensor[(336), float64] */;
    %678 = cast(0.653723f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %679 = cast(meta[relay.Constant][40] /* ty=Tensor[(2912), float64] */, dtype="float64") /* ty=Tensor[(2912), float64] */;
    %680 = reshape(%677, newshape=[7, 12, 4]) /* ty=Tensor[(7, 12, 4), float64] */;
    %681 = reshape(%678, newshape=[]) /* ty=float64 */;
    %682 = reshape(%679, newshape=[104, 28]) /* ty=Tensor[(104, 28), float64] */;
    %683 = @func_3609(%680, %681, %682) /* ty=(Tensor[(7, 12, 4), float64], Tensor[(14, 16, 13), bool], float64, Tensor[(104, 28), float64]) */;
    %684 = %676.0;
    %685 = %683.2;
    (%684, %685, %var_5451, 0.653723f64 /* ty=float64 */, meta[relay.Constant][40] /* ty=Tensor[(2912), float64] */)
  };
  %686(%var_5484) /* ty=(Tensor[(12, 4, 3), float32], float64, Tensor[(336), float64], float64, Tensor[(2912), float64]) */
}

def @func_4514(%var_4512: Tensor[(55, 6), float64], %var_4513: int8) -> (Tensor[(12, 4, 3), float32], Tensor[(4, 12, 9), uint8], Tensor[(968), float64], Tensor[(55, 6), float64], int8, Tensor[(1, 270), int16], Tensor[(8, 11, 11), float64], Tensor[(48), float64]) {
  @func_4510(%var_4512, %var_4513) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(4, 12, 9), uint8], Tensor[(968), float64], Tensor[(55, 6), float64], int8, Tensor[(1, 270), int16], Tensor[(8, 11, 11), float64], Tensor[(48), float64]) */
}

def @func_7610() -> Tensor[(12, 4, 3), float32] {
  %687 = @func_7519() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %687.1
}

def @func_4866(%var_4860: Tensor[(55, 6), float64], %var_4861: int8, %var_4862: Tensor[(6, 45), int16]) -> (Tensor[(12, 4, 3), float32], Tensor[(270, 1), int16], Tensor[(55, 6), float64], int8, Tensor[(6, 45), int16]) {
  %688 = @func_4562() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %689 = cast(%var_4860, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
  %690 = cast(%var_4861, dtype="int8") /* ty=int8 */;
  %691 = cast(%var_4862, dtype="int16") /* ty=Tensor[(6, 45), int16] */;
  %692 = reshape(%689, newshape=[11, 6, 5]) /* ty=Tensor[(11, 6, 5), float64] */;
  %693 = reshape(%690, newshape=[]) /* ty=int8 */;
  %694 = reshape(%691, newshape=[270, 1]) /* ty=Tensor[(270, 1), int16] */;
  %695 = @func_1343(%692, %693, %694) /* ty=(Tensor[(16, 5, 12), int64], Tensor[(960), int8], Tensor[(11, 6, 5), bool], Tensor[(15, 6, 3), float32], Tensor[(270, 1), int16], Tensor[(11, 6, 5), float64]) */;
  %696 = %688.0;
  %697 = %695.4;
  (%696, %697, %var_4860, %var_4861, %var_4862)
}

def @func_6381(%var_6380: Tensor[(8, 16, 8), float64]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 11, 11), float64], Tensor[(48), float64], Tensor[(968), bool]) {
  %713 = fn (%var_6351: Tensor[(8, 16, 8), float64]) -> (Tensor[(8, 16, 8), float64], Tensor[(8, 11, 11), float64], Tensor[(48), float64], Tensor[(968), bool]) {
    %698 = cast(%var_6351, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
    %699 = cast(meta[relay.Constant][41] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
    %700 = cast(meta[relay.Constant][42] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
    %701 = reshape(%699, newshape=[1, 12, 4]) /* ty=Tensor[(1, 12, 4), float64] */;
    %702 = reshape(%700, newshape=[22, 44]) /* ty=Tensor[(22, 44), float64] */;
    %703 = @func_4392(%701, %702) /* ty=(Tensor[(8, 11, 11), float64], Tensor[(22, 44), float64], Tensor[(1, 12, 4), float32]) */;
    %704 = cast(meta[relay.Constant][42] /* ty=Tensor[(968), float64] */, dtype="float32") /* ty=Tensor[(968), float32] */;
    %705 = log10(%704) /* ty=Tensor[(968), float32] */;
    %706 = cast(meta[relay.Constant][43] /* ty=Tensor[(968), float32] */, dtype="bool") /* ty=Tensor[(968), bool] */;
    %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(1), int32] */;
    %708 = cast(%705, dtype="bool") /* ty=Tensor[(968), bool] */;
    %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?), bool] */;
    %710 = asin(%698) /* ty=Tensor[(8, 16, 8), float64] */;
    %711 = %703.0;
    %712 = greater(%708, %709) /* ty=Tensor[(968), bool] */;
    (%710, %711, meta[relay.Constant][41] /* ty=Tensor[(48), float64] */, %712)
  };
  %713(%var_6380) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 11, 11), float64], Tensor[(48), float64], Tensor[(968), bool]) */
}

def @func_6622() -> Tensor[(3, 6, 11), int16] {
  @func_6620() /* ty=Tensor[(3, 6, 11), int16] */
}

def @func_6906() -> (Tensor[(12, 4, 3), float32],) {
  %716 = fn () -> (Tensor[(12, 4, 3), float32],) {
    %714 = @func_5803() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %715 = %714.0;
    (%715,)
  };
  %716() /* ty=(Tensor[(12, 4, 3), float32],) */
}

def @func_5890(%var_5888: Tensor[(2912), float64], %var_5889: Tensor[(1, 10560), int8]) -> (Tensor[(12, 4, 3), float32], Tensor[(14, 16, 13), bool], Tensor[(2912), float64], Tensor[(1, 10560), int8]) {
  @func_5886(%var_5888, %var_5889) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(14, 16, 13), bool], Tensor[(2912), float64], Tensor[(1, 10560), int8]) */
}

def @func_6688(%var_6686: Tensor[(1200), int8]) -> (Tensor[(960), int8], Tensor[(12, 10, 10), int8], Tensor[(1200), int8]) {
  @func_6685(%var_6686) /* ty=(Tensor[(960), int8], Tensor[(12, 10, 10), int8], Tensor[(1200), int8]) */
}

def @func_7344() -> Tensor[(12, 4, 3), float32] {
  @func_7342() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_6750(%var_6748: Tensor[(1024), float64], %var_6749: Tensor[(1024), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(968), bool], Tensor[(1024), int64], Tensor[(4, 12, 9), float32], Tensor[(432), uint8]) {
  %734 = fn (%var_6718: Tensor[(1024), float64], %var_6740: Tensor[(1024), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(968), bool], Tensor[(1024), int64], Tensor[(4, 12, 9), float32], Tensor[(432), uint8]) {
    %717 = @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %718 = cast(%var_6718, dtype="float64") /* ty=Tensor[(1024), float64] */;
    %719 = reshape(%718, newshape=[8, 16, 8]) /* ty=Tensor[(8, 16, 8), float64] */;
    %720 = @func_6379(%719) /* ty=(Tensor[(8, 16, 8), float64], Tensor[(8, 11, 11), float64], Tensor[(48), float64], Tensor[(968), bool]) */;
    %721 = cast(%var_6740, dtype="int64") /* ty=Tensor[(1024), int64] */;
    %722 = shape_of(%var_6718, dtype="int32") /* ty=Tensor[(1), int32] */;
    %723 = cast(%var_6718, dtype="int64") /* ty=Tensor[(1024), int64] */;
    %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?), int64] */;
    %725 = cast(meta[relay.Constant][44] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %726 = cast(meta[relay.Constant][44] /* ty=Tensor[(432), uint8] */, dtype="uint8") /* ty=Tensor[(432), uint8] */;
    %727 = reshape(%725, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint8] */;
    %728 = reshape(%726, newshape=[4, 12, 9]) /* ty=Tensor[(4, 12, 9), uint8] */;
    %729 = @func_2117(%727, %728) /* ty=(Tensor[(4, 12, 9), uint8], Tensor[(4, 12, 9), float32]) */;
    %730 = %717.0;
    %731 = %720.3;
    %732 = bitwise_and(%723, %724) /* ty=Tensor[(1024), int64] */;
    %733 = %729.1;
    (%730, %731, %732, %733, meta[relay.Constant][44] /* ty=Tensor[(432), uint8] */)
  };
  %734(%var_6748, %var_6749) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(968), bool], Tensor[(1024), int64], Tensor[(4, 12, 9), float32], Tensor[(432), uint8]) */
}

def @func_8673(%var_8671: Tensor[(1, 1056), uint8], %var_8672: Tensor[(8, 3, 14), float32]) -> (Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 12, 11), uint8], Tensor[(1, 1056), uint8], Tensor[(8, 3, 14), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) {
  %755 = fn (%var_8653: Tensor[(1, 1056), uint8], %var_8658: Tensor[(8, 3, 14), float32]) -> (Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 12, 11), uint8], Tensor[(1, 1056), uint8], Tensor[(8, 3, 14), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) {
    %735 = @func_8163() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %736 = cast(%var_8653, dtype="uint8") /* ty=Tensor[(1, 1056), uint8] */;
    %737 = cast(%var_8653, dtype="uint8") /* ty=Tensor[(1, 1056), uint8] */;
    %738 = reshape(%736, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
    %739 = reshape(%737, newshape=[8, 12, 11]) /* ty=Tensor[(8, 12, 11), uint8] */;
    %740 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(8, 3, 14), float32] */;
    %741 = sinh(%740) /* ty=Tensor[(8, 3, 14), float32] */;
    %742 = cast(%var_8658, dtype="float64") /* ty=Tensor[(8, 3, 14), float64] */;
    %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(3), int32] */;
    %744 = cast(%741, dtype="float64") /* ty=Tensor[(8, 3, 14), float64] */;
    %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %746 = cast(meta[relay.Constant][46] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
    %747 = reshape(%746, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
    %748 = @func_1852(%747) /* ty=(Tensor[(8, 11, 11), float64],) */;
    %749 = @func_6620() /* ty=Tensor[(3, 6, 11), int16] */;
    %750 = %735.0;
    %751 = @func_6273() /* ty=Tensor[(12, 4, 3), float64] */;
    %752 = @func_2826(%738, %739) /* ty=Tensor[(8, 12, 11), uint8] */;
    %753 = mod(%744, %745) /* ty=Tensor[(8, 3, 14), float64] */;
    %754 = %748.0;
    (%749, %750, %751, %752, %var_8653, %753, %754, meta[relay.Constant][46] /* ty=Tensor[(968), float64] */)
  };
  %755(%var_8671, %var_8672) /* ty=(Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(8, 12, 11), uint8], Tensor[(1, 1056), uint8], Tensor[(8, 3, 14), float64], Tensor[(8, 11, 11), float64], Tensor[(968), float64]) */
}

def @func_8799() -> (Tensor[(12, 4, 3), float64],) {
  %756 = @func_8071() /* ty=Tensor[(12, 4, 3), float64] */;
  (%756,)
}

def @func_6488(%var_6487: Tensor[(1, 11, 2), int64]) -> (Tensor[(2, 11, 2), int64], Tensor[(1, 11, 2), float64]) {
  %764 = fn (%var_6449: Tensor[(1, 11, 2), int64]) -> (Tensor[(2, 11, 2), int64], Tensor[(1, 11, 2), float64]) {
    %757 = cast(%var_6449, dtype="int64") /* ty=Tensor[(1, 11, 2), int64] */;
    %758 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 11, 2), int64] */, dtype="int64") /* ty=Tensor[(2, 11, 2), int64] */;
    %759 = cast(%var_6449, dtype="float64") /* ty=Tensor[(1, 11, 2), float64] */;
    %760 = acosh(%759) /* ty=Tensor[(1, 11, 2), float64] */;
    %761 = cast(%760, dtype="float64") /* ty=Tensor[(1, 11, 2), float64] */;
    %762 = bitwise_and(%757, %758) /* ty=Tensor[(2, 11, 2), int64] */;
    %763 = sin(%761) /* ty=Tensor[(1, 11, 2), float64] */;
    (%762, %763)
  };
  %764(%var_6487) /* ty=(Tensor[(2, 11, 2), int64], Tensor[(1, 11, 2), float64]) */
}

def @func_9062(%var_9060: Tensor[(1056), uint8]) -> (Tensor[(12, 4, 3), float32], Tensor[(8, 12, 11), uint8], Tensor[(1056), float64], Tensor[(12, 4, 3), float32]) {
  @func_9059(%var_9060) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(8, 12, 11), uint8], Tensor[(1056), float64], Tensor[(12, 4, 3), float32]) */
}

def @func_3982() -> Tensor[(12, 4, 3), float32] {
  @func_3966() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_4510(%var_4483: Tensor[(55, 6), float64], %var_4484: int8) -> (Tensor[(12, 4, 3), float32], Tensor[(4, 12, 9), uint8], Tensor[(968), float64], Tensor[(55, 6), float64], int8, Tensor[(1, 270), int16], Tensor[(8, 11, 11), float64], Tensor[(48), float64]) {
  %765 = @func_4279() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %766 = cast(meta[relay.Constant][48] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %767 = cast(%var_4483, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
  %768 = cast(%var_4484, dtype="int8") /* ty=int8 */;
  %769 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 270), int16] */, dtype="int16") /* ty=Tensor[(1, 270), int16] */;
  %770 = reshape(%766, newshape=[968]) /* ty=Tensor[(968), float64] */;
  %771 = reshape(%767, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %772 = reshape(%768, newshape=[]) /* ty=int8 */;
  %773 = reshape(%769, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %774 = @func_2720(%770, %771, %772, %773) /* ty=(Tensor[(8, 11, 11), float64], Tensor[(5, 9, 7), float64], Tensor[(4, 12, 9), float32], Tensor[(432), uint8], Tensor[(5, 9, 7), float64], Tensor[(11, 6, 5), float64], Tensor[(330), float64], int8, Tensor[(270), int16], Tensor[(5, 9, 7), int8], Tensor[(4, 12, 9), uint8], Tensor[(968), float64]) */;
  %775 = cast(meta[relay.Constant][50] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %776 = cast(meta[relay.Constant][48] /* ty=Tensor[(968), float64] */, dtype="float64") /* ty=Tensor[(968), float64] */;
  %777 = reshape(%775, newshape=[1, 12, 4]) /* ty=Tensor[(1, 12, 4), float64] */;
  %778 = reshape(%776, newshape=[22, 44]) /* ty=Tensor[(22, 44), float64] */;
  %779 = @func_4392(%777, %778) /* ty=(Tensor[(8, 11, 11), float64], Tensor[(22, 44), float64], Tensor[(1, 12, 4), float32]) */;
  %780 = %765.0;
  %781 = %774.10;
  %782 = %779.0;
  (%780, %781, meta[relay.Constant][48] /* ty=Tensor[(968), float64] */, %var_4483, %var_4484, meta[relay.Constant][49] /* ty=Tensor[(1, 270), int16] */, %782, meta[relay.Constant][50] /* ty=Tensor[(48), float64] */)
}

def @func_6934() -> (Tensor[(960), int8],) {
  %783 = @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */;
  %784 = %783.1;
  (%784,)
}

def @func_4898() -> (Tensor[(12, 4, 3), float32],) {
  @func_4896() /* ty=(Tensor[(12, 4, 3), float32],) */
}

def @func_3897() -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) {
  @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */
}

def @func_2830(%var_2828: Tensor[(8, 12, 11), uint8], %var_2829: Tensor[(8, 12, 11), uint8]) -> Tensor[(8, 12, 11), uint8] {
  @func_2826(%var_2828, %var_2829) /* ty=Tensor[(8, 12, 11), uint8] */
}

def @func_2795(%var_2793: Tensor[(5, 15, 5), float64], %var_2794: Tensor[(5, 15, 5), float64]) -> (Tensor[(5, 15, 5), float64], Tensor[(5, 15, 5), int32]) {
  @func_2791(%var_2793, %var_2794) /* ty=(Tensor[(5, 15, 5), float64], Tensor[(5, 15, 5), int32]) */
}

def @func_8330() -> (Tensor[(12, 4, 3), float32], Tensor[(3, 6, 11), int16]) {
  %785 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %786 = @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */;
  %787 = %785.0;
  %788 = %786.3;
  (%787, %788)
}

def @func_2826(%var_2815: Tensor[(8, 12, 11), uint8], %var_2816: Tensor[(8, 12, 11), uint8]) -> Tensor[(8, 12, 11), uint8] {
  %789 = cast(%var_2816, dtype="uint8") /* ty=Tensor[(8, 12, 11), uint8] */;
  %790 = shape_of(%var_2815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(%var_2815, dtype="uint8") /* ty=Tensor[(8, 12, 11), uint8] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%791, %792) /* ty=Tensor[(8, 12, 11), uint8] */
}

def @func_1854(%var_1853: Tensor[(8, 11, 11), float64]) -> (Tensor[(8, 11, 11), float64],) {
  %795 = fn (%var_1842: Tensor[(8, 11, 11), float64]) -> (Tensor[(8, 11, 11), float64],) {
    %793 = cast(%var_1842, dtype="float64") /* ty=Tensor[(8, 11, 11), float64] */;
    %794 = atan(%793) /* ty=Tensor[(8, 11, 11), float64] */;
    (%794,)
  };
  %795(%var_1853) /* ty=(Tensor[(8, 11, 11), float64],) */
}

def @func_550(%var_548: int8, %var_549: Tensor[(16, 5, 12), int8]) -> (Tensor[(16, 5, 12), int64],) {
  %804 = fn (%var_538: int8, %var_539: Tensor[(16, 5, 12), int8]) -> (Tensor[(16, 5, 12), int64],) {
    %796 = cast(%var_538, dtype="bool") /* ty=bool */;
    %797 = cast(%var_539, dtype="bool") /* ty=Tensor[(16, 5, 12), bool] */;
    %798 = not_equal(%796, %797) /* ty=Tensor[(16, 5, 12), bool] */;
    %799 = cast(%798, dtype="int64") /* ty=Tensor[(16, 5, 12), int64] */;
    %800 = shape_of(%var_539, dtype="int32") /* ty=Tensor[(3), int32] */;
    %801 = cast(%var_539, dtype="int64") /* ty=Tensor[(16, 5, 12), int64] */;
    %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %803 = left_shift(%801, %802) /* ty=Tensor[(16, 5, 12), int64] */;
    (%803,)
  };
  %804(%var_548, %var_549) /* ty=(Tensor[(16, 5, 12), int64],) */
}

def @func_5325(%var_5321: Tensor[(10, 2, 9), float32], %var_5322: Tensor[(144), float32], %var_5323: Tensor[(1512), float32], %var_5324: Tensor[(4, 2640), int8]) -> (Tensor[(10, 2, 9), float32], Tensor[(12, 4, 3), bool], Tensor[(144), float32], Tensor[(10, 2, 9), float32], Tensor[(10560), int8], Tensor[(1512), float32], Tensor[(8, 364), float64], Tensor[(4, 2640), int8]) {
  %833 = fn (%var_5281: Tensor[(10, 2, 9), float32], %var_5301: Tensor[(144), float32], %var_5312: Tensor[(1512), float32], %var_5314: Tensor[(4, 2640), int8]) -> (Tensor[(10, 2, 9), float32], Tensor[(12, 4, 3), bool], Tensor[(144), float32], Tensor[(10, 2, 9), float32], Tensor[(10560), int8], Tensor[(1512), float32], Tensor[(8, 364), float64], Tensor[(4, 2640), int8]) {
    %805 = cast(%var_5281, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
    %806 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(10, 2, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %807 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
    %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %809 = mod(%807, %808) /* ty=Tensor[(10, 2, 9), float32] */;
    %810 = cast(%809, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
    %811 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(10, 2, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %812 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
    %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %814 = cast(%var_5301, dtype="float32") /* ty=Tensor[(144), float32] */;
    %815 = reshape(%814, newshape=[12, 4, 3]) /* ty=Tensor[(12, 4, 3), float32] */;
    %816 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
    %817 = shape_of(%var_5281, dtype="int32") /* ty=Tensor[(3), int32] */;
    %818 = cast(%var_5281, dtype="float32") /* ty=Tensor[(10, 2, 9), float32] */;
    %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %820 = cast(%var_5312, dtype="float32") /* ty=Tensor[(1512), float32] */;
    %821 = cast(%var_5312, dtype="float32") /* ty=Tensor[(1512), float32] */;
    %822 = cast(meta[relay.Constant][52] /* ty=Tensor[(8, 364), float64] */, dtype="float64") /* ty=Tensor[(8, 364), float64] */;
    %823 = cast(%var_5314, dtype="int8") /* ty=Tensor[(4, 2640), int8] */;
    %824 = reshape(%820, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
    %825 = reshape(%821, newshape=[12, 9, 14]) /* ty=Tensor[(12, 9, 14), float32] */;
    %826 = reshape(%822, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
    %827 = reshape(%823, newshape=[10560]) /* ty=Tensor[(10560), int8] */;
    %828 = @func_2370(%824, %825, %826, %827) /* ty=(Tensor[(12, 9, 14), float32], Tensor[(15, 6, 3), float32], Tensor[(2912), float64], Tensor[(10560), int8]) */;
    %829 = floor_divide(%812, %813) /* ty=Tensor[(10, 2, 9), float32] */;
    %830 = @func_4106(%815) /* ty=Tensor[(12, 4, 3), bool] */;
    %831 = add(%818, %819) /* ty=Tensor[(10, 2, 9), float32] */;
    %832 = %828.3;
    (%829, %830, %var_5301, %831, %832, %var_5312, meta[relay.Constant][52] /* ty=Tensor[(8, 364), float64] */, %var_5314)
  };
  %833(%var_5321, %var_5322, %var_5323, %var_5324) /* ty=(Tensor[(10, 2, 9), float32], Tensor[(12, 4, 3), bool], Tensor[(144), float32], Tensor[(10, 2, 9), float32], Tensor[(10560), int8], Tensor[(1512), float32], Tensor[(8, 364), float64], Tensor[(4, 2640), int8]) */
}

def @func_8197(%var_8196: Tensor[(7, 4, 16), float64]) -> Tensor[(7, 4, 16), float64] {
  %835 = fn (%var_8186: Tensor[(7, 4, 16), float64]) -> Tensor[(7, 4, 16), float64] {
    %834 = cast(%var_8186, dtype="float64") /* ty=Tensor[(7, 4, 16), float64] */;
    tan(%834) /* ty=Tensor[(7, 4, 16), float64] */
  };
  %835(%var_8196) /* ty=Tensor[(7, 4, 16), float64] */
}

def @func_6051(%var_6050: Tensor[(968), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(8, 11, 11), float64], Tensor[(968), float64], Tensor[(270, 1), int16], Tensor[(330), float64], int8, Tensor[(3, 90), int16]) {
  %850 = fn (%var_6022: Tensor[(968), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(8, 11, 11), float64], Tensor[(968), float64], Tensor[(270, 1), int16], Tensor[(330), float64], int8, Tensor[(3, 90), int16]) {
    %836 = @func_4279() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %837 = cast(%var_6022, dtype="float64") /* ty=Tensor[(968), float64] */;
    %838 = reshape(%837, newshape=[8, 11, 11]) /* ty=Tensor[(8, 11, 11), float64] */;
    %839 = @func_1852(%838) /* ty=(Tensor[(8, 11, 11), float64],) */;
    %840 = cast(meta[relay.Constant][53] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
    %841 = cast(meta[relay.Constant][54] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %842 = cast(meta[relay.Constant][55] /* ty=Tensor[(3, 90), int16] */, dtype="int16") /* ty=Tensor[(3, 90), int16] */;
    %843 = reshape(%840, newshape=[55, 6]) /* ty=Tensor[(55, 6), float64] */;
    %844 = reshape(%841, newshape=[]) /* ty=int8 */;
    %845 = reshape(%842, newshape=[6, 45]) /* ty=Tensor[(6, 45), int16] */;
    %846 = @func_4866(%843, %844, %845) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(270, 1), int16], Tensor[(55, 6), float64], int8, Tensor[(6, 45), int16]) */;
    %847 = %836.0;
    %848 = %839.0;
    %849 = %846.1;
    (%847, %848, %var_6022, %849, meta[relay.Constant][53] /* ty=Tensor[(330), float64] */, meta[relay.Constant][54] /* ty=int8 */, meta[relay.Constant][55] /* ty=Tensor[(3, 90), int16] */)
  };
  %850(%var_6050) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(8, 11, 11), float64], Tensor[(968), float64], Tensor[(270, 1), int16], Tensor[(330), float64], int8, Tensor[(3, 90), int16]) */
}

def @func_7521() -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) {
  @func_7519() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */
}

def @func_6685(%var_6674: Tensor[(1200), int8]) -> (Tensor[(960), int8], Tensor[(12, 10, 10), int8], Tensor[(1200), int8]) {
  %851 = @func_4828() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(960), int8], Tensor[(3, 6, 11), float32], Tensor[(3, 6, 11), int16], Tensor[(12, 4, 3), float64]) */;
  %852 = cast(%var_6674, dtype="int8") /* ty=Tensor[(1200), int8] */;
  %853 = reshape(%852, newshape=[12, 10, 10]) /* ty=Tensor[(12, 10, 10), int8] */;
  %854 = %851.1;
  %855 = @func_4196(%853) /* ty=Tensor[(12, 10, 10), int8] */;
  (%854, %855, %var_6674)
}

def @func_7862() -> (Tensor[(1056), uint8],) {
  @func_7860() /* ty=(Tensor[(1056), uint8],) */
}

def @func_4704(%var_4688: Tensor[(12, 4, 3), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), int8], Tensor[(12, 4, 3), int64]) {
  %856 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %857 = @func_3966() /* ty=Tensor[(12, 4, 3), float32] */;
  %858 = cast(%857, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %859 = sinh(%858) /* ty=Tensor[(12, 4, 3), float64] */;
  %860 = cast(%859, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %861 = cast(%859, dtype="float64") /* ty=Tensor[(12, 4, 3), float64] */;
  %862 = sqrt(%861) /* ty=Tensor[(12, 4, 3), float64] */;
  %863 = cast(%var_4688, dtype="int8") /* ty=Tensor[(12, 4, 3), int8] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="int8") /* ty=Tensor[(12, 4, 3), int8] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %867 = cast(%859, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %868 = reshape(%867, newshape=[12, 4, 3]) /* ty=Tensor[(12, 4, 3), float32] */;
  %869 = @func_4262(%868) /* ty=(Tensor[(12, 4, 3), float64], Tensor[(12, 4, 3), float32]) */;
  %870 = %869.0;
  %871 = cast(%859, dtype="int64") /* ty=Tensor[(12, 4, 3), int64] */;
  %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(%870, dtype="int64") /* ty=Tensor[(12, 4, 3), int64] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %875 = %856.1;
  %876 = log2(%860) /* ty=Tensor[(12, 4, 3), float64] */;
  %877 = minimum(%865, %866) /* ty=Tensor[(12, 4, 3), int8] */;
  %878 = bitwise_and(%873, %874) /* ty=Tensor[(12, 4, 3), int64] */;
  (%875, %876, %877, %878)
}

def @func_3895() -> (Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) {
  %879 = cast(meta[relay.Constant][56] /* ty=Tensor[(12, 4, 3), float32] */, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %880 = tan(%879) /* ty=Tensor[(12, 4, 3), float32] */;
  %881 = cast(%880, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %882 = cast(%880, dtype="float32") /* ty=Tensor[(12, 4, 3), float32] */;
  %883 = asinh(%881) /* ty=Tensor[(12, 4, 3), float32] */;
  %884 = erf(%882) /* ty=Tensor[(12, 4, 3), float32] */;
  (%883, %884)
}

def @func_5551() -> (Tensor[(12, 4, 3), float32],) {
  %887 = fn () -> (Tensor[(12, 4, 3), float32],) {
    %885 = @func_4279() /* ty=(Tensor[(12, 4, 3), float32],) */;
    %886 = %885.0;
    (%886,)
  };
  %887() /* ty=(Tensor[(12, 4, 3), float32],) */
}

def @func_7261() -> (Tensor[(12, 4, 3), float32],) {
  %888 = @func_5550() /* ty=(Tensor[(12, 4, 3), float32],) */;
  %889 = %888.0;
  (%889,)
}

def @func_8564() -> Tensor[(12, 4, 3), float32] {
  @func_7944() /* ty=Tensor[(12, 4, 3), float32] */
}

def @func_5529(%var_5517: Tensor[(2912), float64]) -> (Tensor[(12, 4, 3), float32], Tensor[(90, 3), bool], Tensor[(14, 16, 13), bool], float64, Tensor[(2912), float64]) {
  %890 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
  %891 = @func_5081() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(1056), uint8], Tensor[(90, 3), float64]) */;
  %892 = %891.2;
  %893 = cast(meta[relay.Constant][57] /* ty=Tensor[(90, 3), float64] */, dtype="bool") /* ty=Tensor[(90, 3), bool] */;
  %894 = shape_of(%892, dtype="int32") /* ty=Tensor[(2), int32] */;
  %895 = cast(%892, dtype="bool") /* ty=Tensor[(90, 3), bool] */;
  %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %897 = cast(6.84076f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %898 = cast(%var_5517, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %899 = reshape(%897, newshape=[]) /* ty=float64 */;
  %900 = reshape(%898, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
  %901 = @func_279(%899, %900) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
  %902 = %890.0;
  %903 = not_equal(%895, %896) /* ty=Tensor[(90, 3), bool] */;
  %904 = %901.0;
  (%902, %903, %904, 6.84076f64 /* ty=float64 */, %var_5517)
}

def @func_8846(%var_8844: Tensor[(2, 8, 1), int16], %var_8845: Tensor[(2, 8, 10), int16]) -> Tensor[(2, 8, 10), int16] {
  %907 = fn (%var_8813: Tensor[(2, 8, 1), int16], %var_8814: Tensor[(2, 8, 10), int16]) -> Tensor[(2, 8, 10), int16] {
    %905 = cast(%var_8813, dtype="int16") /* ty=Tensor[(2, 8, 1), int16] */;
    %906 = cast(%var_8814, dtype="int16") /* ty=Tensor[(2, 8, 10), int16] */;
    bitwise_or(%905, %906) /* ty=Tensor[(2, 8, 10), int16] */
  };
  %907(%var_8844, %var_8845) /* ty=Tensor[(2, 8, 10), int16] */
}

def @func_7706(%var_7699: Tensor[(90, 3), float64]) -> (Tensor[(90, 3), int32],) {
  %908 = @func_5081() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(1056), uint8], Tensor[(90, 3), float64]) */;
  %909 = %908.2;
  %910 = cast(%var_7699, dtype="int32") /* ty=Tensor[(90, 3), int32] */;
  %911 = shape_of(%909, dtype="int32") /* ty=Tensor[(2), int32] */;
  %912 = cast(%909, dtype="int32") /* ty=Tensor[(90, 3), int32] */;
  %913 = dyn.reshape(%910, %911, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %914 = logical_xor(%912, %913) /* ty=Tensor[(90, 3), int32] */;
  (%914,)
}

def @func_7033() -> (Tensor[(12, 4, 3), float32],) {
  %916 = fn () -> (Tensor[(12, 4, 3), float32],) {
    %915 = @func_6287() /* ty=Tensor[(12, 4, 3), float32] */;
    (%915,)
  };
  %916() /* ty=(Tensor[(12, 4, 3), float32],) */
}

def @func_4077(%var_4076: float64) -> (Tensor[(12, 4, 3), float32], Tensor[(14, 16, 13), bool], float64, Tensor[(1512), float32], Tensor[(126, 12), float32], Tensor[(10560), int8], Tensor[(2912), float32], Tensor[(16, 5, 12), int64], Tensor[(2, 480), int8], Tensor[(12, 4, 3), float32]) {
  %942 = fn (%var_4032: float64) -> (Tensor[(12, 4, 3), float32], Tensor[(14, 16, 13), bool], float64, Tensor[(1512), float32], Tensor[(126, 12), float32], Tensor[(10560), int8], Tensor[(2912), float32], Tensor[(16, 5, 12), int64], Tensor[(2, 480), int8], Tensor[(12, 4, 3), float32]) {
    %917 = @func_3895() /* ty=(Tensor[(12, 4, 3), float32], Tensor[(12, 4, 3), float32]) */;
    %918 = cast(%var_4032, dtype="float64") /* ty=float64 */;
    %919 = cast(meta[relay.Constant][58] /* ty=Tensor[(2912), float64] */, dtype="float64") /* ty=Tensor[(2912), float64] */;
    %920 = reshape(%918, newshape=[]) /* ty=float64 */;
    %921 = reshape(%919, newshape=[14, 16, 13]) /* ty=Tensor[(14, 16, 13), float64] */;
    %922 = @func_279(%920, %921) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */;
    %923 = cast(meta[relay.Constant][59] /* ty=Tensor[(126, 12), float32] */, dtype="float32") /* ty=Tensor[(126, 12), float32] */;
    %924 = %922.0;
    %925 = cast(%924, dtype="float64") /* ty=Tensor[(14, 16, 13), float64] */;
    %926 = cast(meta[relay.Constant][60] /* ty=Tensor[(10560), int8] */, dtype="int8") /* ty=Tensor[(10560), int8] */;
    %927 = reshape(%923, newshape=[1512]) /* ty=Tensor[(1512), float32] */;
    %928 = reshape(%925, newshape=[2912]) /* ty=Tensor[(2912), float64] */;
    %929 = reshape(%926, newshape=[10560]) /* ty=Tensor[(10560), int8] */;
    %930 = @func_4013(%927, %928, %929) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(15, 6, 3), float32], Tensor[(1512), float32], Tensor[(2912), float64], Tensor[(12, 4, 3), float32], Tensor[(10560), int8]) */;
    %931 = cast(meta[relay.Constant][58] /* ty=Tensor[(2912), float64] */, dtype="float32") /* ty=Tensor[(2912), float32] */;
    %932 = cast(%var_4032, dtype="int8") /* ty=int8 */;
    %933 = cast(meta[relay.Constant][61] /* ty=Tensor[(2, 480), int8] */, dtype="int8") /* ty=Tensor[(2, 480), int8] */;
    %934 = reshape(%932, newshape=[]) /* ty=int8 */;
    %935 = reshape(%933, newshape=[16, 5, 12]) /* ty=Tensor[(16, 5, 12), int8] */;
    %936 = @func_547(%934, %935) /* ty=(Tensor[(16, 5, 12), int64],) */;
    %937 = %917.0;
    %938 = %930.2;
    %939 = exp(%931) /* ty=Tensor[(2912), float32] */;
    %940 = %936.0;
    %941 = @func_3966() /* ty=Tensor[(12, 4, 3), float32] */;
    (%937, %924, %var_4032, %938, meta[relay.Constant][59] /* ty=Tensor[(126, 12), float32] */, meta[relay.Constant][60] /* ty=Tensor[(10560), int8] */, %939, %940, meta[relay.Constant][61] /* ty=Tensor[(2, 480), int8] */, %941)
  };
  %942(%var_4076) /* ty=(Tensor[(12, 4, 3), float32], Tensor[(14, 16, 13), bool], float64, Tensor[(1512), float32], Tensor[(126, 12), float32], Tensor[(10560), int8], Tensor[(2912), float32], Tensor[(16, 5, 12), int64], Tensor[(2, 480), int8], Tensor[(12, 4, 3), float32]) */
}

def @func_282(%var_280: float64, %var_281: Tensor[(14, 16, 13), float64]) -> (Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) {
  %955 = fn (%var_243: float64, %var_244: Tensor[(14, 16, 13), float64]) -> (Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) {
    %943 = cast(%var_243, dtype="bool") /* ty=bool */;
    %944 = cast(%var_244, dtype="bool") /* ty=Tensor[(14, 16, 13), bool] */;
    %945 = cast(meta[relay.Constant][62] /* ty=Tensor[(1, 270), int16] */, dtype="int16") /* ty=Tensor[(1, 270), int16] */;
    %946 = cast(meta[relay.Constant][62] /* ty=Tensor[(1, 270), int16] */, dtype="int16") /* ty=Tensor[(1, 270), int16] */;
    %947 = reshape(%945, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
    %948 = reshape(%946, newshape=[15, 6, 3]) /* ty=Tensor[(15, 6, 3), int16] */;
    %949 = @func_198(%947, %948) /* ty=(Tensor[(15, 6, 3), int16], Tensor[(15, 6, 3), float32], Tensor[(15, 6, 3), float32]) */;
    %950 = cast(meta[relay.Constant][62] /* ty=Tensor[(1, 270), int16] */, dtype="uint8") /* ty=Tensor[(1, 270), uint8] */;
    %951 = cast(%var_243, dtype="uint8") /* ty=uint8 */;
    %952 = not_equal(%943, %944) /* ty=Tensor[(14, 16, 13), bool] */;
    %953 = %949.0;
    %954 = logical_xor(%950, %951) /* ty=Tensor[(1, 270), uint8] */;
    (%952, %953, %954)
  };
  %955(%var_280, %var_281) /* ty=(Tensor[(14, 16, 13), bool], Tensor[(15, 6, 3), int16], Tensor[(1, 270), uint8]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen466/build/output.py", line 2258, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:20:42] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

