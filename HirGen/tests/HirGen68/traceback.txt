==========mod==========
#[version = "0.0.5"]
def @func_5282() -> (Tensor[(9, 15, 4), float64],) {
  %0 = @func_2294() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %1 = %0.0;
  (%1,)
}

def @func_4717(%var_4691: float32, %var_4692: Tensor[(350), float32], %var_4703: Tensor[(390), uint64]) -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], float32, float32, Tensor[(350), float32], Tensor[(10, 2, 15), float32], Tensor[(20), float32], Tensor[(390), uint64], Tensor[(180), float64], Tensor[(9, 15, 4), float64]) {
  %2 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %3 = cast(%var_4691, dtype="float32") /* ty=float32 */;
  %4 = cast(%var_4692, dtype="float32") /* ty=Tensor[(350), float32] */;
  %5 = reshape(%3, newshape=[]) /* ty=float32 */;
  %6 = reshape(%4, newshape=[1, 350]) /* ty=Tensor[(1, 350), float32] */;
  %7 = @func_2354(%5, %6) /* ty=(Tensor[(11, 14, 10), float64], Tensor[(11, 14, 10), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(1, 350), float32]) */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
  %9 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  %10 = cast(%9, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %11 = cast(%var_4703, dtype="uint64") /* ty=Tensor[(390), uint64] */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %13 = reshape(%8, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
  %14 = reshape(%10, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
  %15 = reshape(%11, newshape=[65, 6]) /* ty=Tensor[(65, 6), uint64] */;
  %16 = reshape(%12, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %17 = @func_1802(%13, %14, %15, %16) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(9, 15, 4), int8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(65, 6), uint64], Tensor[(9, 15, 4), float64], Tensor[(10, 2, 9), bool]) */;
  %18 = @func_2601() /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %19 = %2.2;
  %20 = %7.3;
  %21 = %17.0;
  %22 = %18.1;
  (%9, %19, %20, %var_4691, %var_4692, %21, meta[relay.Constant][0] /* ty=Tensor[(20), float32] */, %var_4703, meta[relay.Constant][1] /* ty=Tensor[(180), float64] */, %22)
}

def @func_4944(%var_4938: Tensor[(8, 11), float32]) -> (Tensor[(8, 11), float32],) {
  %23 = cast(%var_4938, dtype="float32") /* ty=Tensor[(8, 11), float32] */;
  %24 = sqrt(%23) /* ty=Tensor[(8, 11), float32] */;
  (%24,)
}

def @func_5397() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), bool]) {
  %25 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  %26 = cast(%25, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %27 = reshape(%26, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
  %28 = @func_3883(%27) /* ty=Tensor[(9, 15, 4), bool] */;
  (%25, %28)
}

def @func_239(%var_229: Tensor[(13, 3, 10), uint64]) -> (Tensor[(13, 3, 10), uint64],) {
  %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 3, 10), uint64] */, dtype="uint64") /* ty=Tensor[(13, 3, 10), uint64] */;
  %30 = shape_of(%var_229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%var_229, dtype="uint64") /* ty=Tensor[(13, 3, 10), uint64] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %33 = logical_xor(%31, %32) /* ty=Tensor[(13, 3, 10), uint64] */;
  (%33,)
}

def @func_2934() -> (Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(195, 2), uint64], Tensor[(9, 15, 4), float64]) {
  %34 = @func_2129() /* ty=(Tensor[(630), uint8],) */;
  %35 = @func_2776() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %36 = @func_2509() /* ty=(Tensor[(9, 15, 4), uint64],) */;
  %37 = %36.0;
  %38 = cast(%37, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %39 = @func_1490() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %40 = cast(meta[relay.Constant][3] /* ty=Tensor[(195, 2), uint64] */, dtype="uint64") /* ty=Tensor[(195, 2), uint64] */;
  %41 = reshape(%40, newshape=[390]) /* ty=Tensor[(390), uint64] */;
  %42 = @func_708(%41) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */;
  %43 = %34.0;
  %44 = %35.0;
  %45 = acosh(%38) /* ty=Tensor[(9, 15, 4), float64] */;
  %46 = %39.0;
  %47 = %42.3;
  %48 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  (%43, %44, %45, %46, %47, meta[relay.Constant][3] /* ty=Tensor[(195, 2), uint64] */, %48)
}

def @func_793() -> (Tensor[(9, 15, 4), float64],) {
  %49 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  %50 = cast(%49, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %51 = erf(%50) /* ty=Tensor[(9, 15, 4), float64] */;
  (%51,)
}

def @func_1166() -> (Tensor[(9, 15, 4), float64],) {
  %52 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %53 = %52.1;
  (%53,)
}

def @func_1114(%var_1087: Tensor[(1, 5, 12), int16], %var_1088: Tensor[(10, 5, 12), int16]) -> (Tensor[(10, 5, 12), int16], Tensor[(9, 15, 4), float64], Tensor[(350), bool], Tensor[(350), float32], Tensor[(9, 15, 4), float64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) {
  %54 = cast(%var_1087, dtype="int16") /* ty=Tensor[(1, 5, 12), int16] */;
  %55 = cast(%var_1088, dtype="int16") /* ty=Tensor[(10, 5, 12), int16] */;
  %56 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %57 = cast(meta[relay.Constant][4] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %58 = reshape(%57, newshape=[350]) /* ty=Tensor[(350), float32] */;
  %59 = @func_750(%58) /* ty=(Tensor[(9, 15, 4), float64], float32, Tensor[(350), bool]) */;
  %60 = cast(meta[relay.Constant][5] /* ty=Tensor[(390), uint64] */, dtype="uint64") /* ty=Tensor[(390), uint64] */;
  %61 = reshape(%60, newshape=[390]) /* ty=Tensor[(390), uint64] */;
  %62 = @func_708(%61) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */;
  %63 = @func_793() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %64 = multiply(%54, %55) /* ty=Tensor[(10, 5, 12), int16] */;
  %65 = %56.1;
  %66 = %59.2;
  %67 = %62.3;
  %68 = %63.0;
  (%64, %65, %66, meta[relay.Constant][4] /* ty=Tensor[(350), float32] */, %67, meta[relay.Constant][5] /* ty=Tensor[(390), uint64] */, %68)
}

def @func_5249() -> (Tensor[(9, 15, 4), float32],) {
  %69 = @func_3920() /* ty=(Tensor[(9, 15, 4), float32],) */;
  %70 = %69.0;
  (%70,)
}

def @func_496() -> (Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) {
  %71 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %72 = %71.1;
  %73 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 15, 4), float64] */, dtype="uint64") /* ty=Tensor[(9, 15, 4), uint64] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%72, dtype="uint64") /* ty=Tensor[(9, 15, 4), uint64] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %77 = bitwise_xor(%75, %76) /* ty=Tensor[(9, 15, 4), uint64] */;
  %78 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  (%77, %78)
}

def @func_2354(%var_2347: float32, %var_2348: Tensor[(1, 350), float32]) -> (Tensor[(11, 14, 10), float64], Tensor[(11, 14, 10), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(1, 350), float32]) {
  %79 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 14, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 14, 10), float64] */;
  %80 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 14, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 14, 10), float64] */;
  %81 = cast(%var_2347, dtype="float32") /* ty=float32 */;
  %82 = cast(%var_2348, dtype="float32") /* ty=Tensor[(1, 350), float32] */;
  %83 = reshape(%81, newshape=[]) /* ty=float32 */;
  %84 = reshape(%82, newshape=[7, 10, 5]) /* ty=Tensor[(7, 10, 5), float32] */;
  %85 = atan(%79) /* ty=Tensor[(11, 14, 10), float64] */;
  %86 = log10(%80) /* ty=Tensor[(11, 14, 10), float64] */;
  %87 = @func_49(%83, %84) /* ty=Tensor[(7, 10, 5), float32] */;
  (%85, %86, %87, %var_2347, %var_2348)
}

def @func_4958(%var_4952: Tensor[(7, 3, 2), float64]) -> (Tensor[(7, 3, 2), float64],) {
  %88 = cast(%var_4952, dtype="float64") /* ty=Tensor[(7, 3, 2), float64] */;
  %89 = erf(%88) /* ty=Tensor[(7, 3, 2), float64] */;
  (%89,)
}

def @func_3566() -> (Tensor[(9, 15, 4), float64],) {
  %90 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %91 = %90.0;
  (%91,)
}

def @func_2240() -> Tensor[(9, 15, 4), float64] {
  @func_328() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_6461() -> Tensor[(9, 15, 4), float64] {
  @func_5231() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_2776() -> (Tensor[(9, 15, 4), float64],) {
  %92 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  (%92,)
}

def @func_384() -> Tensor[(9, 15, 4), float64] {
  %93 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %93.0
}

def @func_1298() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %94 = @func_1166() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %95 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %96 = %94.0;
  %97 = %95.1;
  (%96, %97)
}

def @func_3036() -> Tensor[(3, 7, 13), float32] {
  %98 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 7, 13), float32] */;
  log2(%98) /* ty=Tensor[(3, 7, 13), float32] */
}

def @func_2719(%var_2683: Tensor[(4, 8, 14), float64]) -> (Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(4, 8, 14), float32], Tensor[(4, 8, 14), float32]) {
  %99 = @func_2129() /* ty=(Tensor[(630), uint8],) */;
  %100 = @func_1147() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %101 = cast(%var_2683, dtype="float64") /* ty=Tensor[(4, 8, 14), float64] */;
  %102 = atan(%101) /* ty=Tensor[(4, 8, 14), float64] */;
  %103 = cast(%var_2683, dtype="uint8") /* ty=Tensor[(4, 8, 14), uint8] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%102, dtype="uint8") /* ty=Tensor[(4, 8, 14), uint8] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %107 = subtract(%105, %106) /* ty=Tensor[(4, 8, 14), uint8] */;
  %108 = cast(%107, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
  %109 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%102, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %112 = cast(%102, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
  %113 = shape_of(%var_2683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%var_2683, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %116 = %99.0;
  %117 = %100.2;
  %118 = power(%110, %111) /* ty=Tensor[(4, 8, 14), float32] */;
  %119 = mod(%114, %115) /* ty=Tensor[(4, 8, 14), float32] */;
  (%116, %117, %118, %119)
}

def @func_1828() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(390), uint64]) {
  %120 = cast(meta[relay.Constant][9] /* ty=Tensor[(390), uint64] */, dtype="uint64") /* ty=Tensor[(390), uint64] */;
  %121 = reshape(%120, newshape=[390]) /* ty=Tensor[(390), uint64] */;
  %122 = @func_708(%121) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */;
  %123 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  %124 = %122.0;
  (%123, %124, meta[relay.Constant][9] /* ty=Tensor[(390), uint64] */)
}

def @func_1490() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %125 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %127 = exp(%126) /* ty=Tensor[(9, 15, 4), float32] */;
  %128 = cast(%127, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %129 = log(%128) /* ty=Tensor[(9, 15, 4), float64] */;
  %130 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  (%129, %130)
}

def @func_3561() -> (Tensor[(9, 15, 4), float64], Tensor[(10, 2, 15), float32], Tensor[(195, 2), uint64]) {
  %131 = @func_661() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %132 = cast(meta[relay.Constant][10] /* ty=Tensor[(195, 2), uint64] */, dtype="uint64") /* ty=Tensor[(195, 2), uint64] */;
  %133 = %131.0;
  %134 = cast(%133, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %135 = reshape(%132, newshape=[390, 1]) /* ty=Tensor[(390, 1), uint64] */;
  %136 = reshape(%134, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
  %137 = @func_3364(%135, %136) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(1, 20), float32], Tensor[(390, 180), float32], Tensor[(9, 15, 4), uint64], Tensor[(7, 10, 5), float32], float32, Tensor[(350, 1), float32], Tensor[(9, 15, 4), float32]) */;
  %138 = %137.0;
  (%133, %138, meta[relay.Constant][10] /* ty=Tensor[(195, 2), uint64] */)
}

def @func_5920(%var_5916: Tensor[(4, 15, 4), float64]) -> (Tensor[(4, 15, 4), float64],) {
  %139 = cast(%var_5916, dtype="float64") /* ty=Tensor[(4, 15, 4), float64] */;
  %140 = atan(%139) /* ty=Tensor[(4, 15, 4), float64] */;
  (%140,)
}

def @func_4651(%var_4639: Tensor[(14, 5, 4), float32]) -> (Tensor[(14, 5, 4), float32],) {
  %141 = cast(%var_4639, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
  %142 = acosh(%141) /* ty=Tensor[(14, 5, 4), float32] */;
  (%142,)
}

def @func_1644(%var_1637: Tensor[(9, 2, 16), uint32]) -> Tensor[(9, 2, 16), bool] {
  %143 = cast(%var_1637, dtype="bool") /* ty=Tensor[(9, 2, 16), bool] */;
  %144 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(9, 2, 16), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 2, 16), uint32] */, dtype="bool") /* ty=Tensor[(9, 2, 16), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%145, %146) /* ty=Tensor[(9, 2, 16), bool] */
}

def @func_708(%var_689: Tensor[(390), uint64]) -> (Tensor[(9, 15, 4), float64], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) {
  %147 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %148 = %147.0;
  %149 = cast(%148, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %150 = acos(%149) /* ty=Tensor[(9, 15, 4), float32] */;
  %151 = cast(%148, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%150, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %155 = cast(%var_689, dtype="uint64") /* ty=Tensor[(390), uint64] */;
  %156 = reshape(%155, newshape=[13, 3, 10]) /* ty=Tensor[(13, 3, 10), uint64] */;
  %157 = @func_239(%156) /* ty=(Tensor[(13, 3, 10), uint64],) */;
  %158 = floor_mod(%153, %154) /* ty=Tensor[(9, 15, 4), float64] */;
  %159 = %157.0;
  %160 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  (%158, %159, %var_689, %160)
}

def @func_449() -> Tensor[(9, 15, 4), float64] {
  @func_384() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_2076() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %161 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %162 = @func_661() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %163 = %161.0;
  %164 = %162.1;
  (%163, %164)
}

def @func_2601() -> (Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %165 = @func_1931() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(15, 6, 7), uint8], Tensor[(630), uint8]) */;
  %166 = @func_2294() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %167 = @func_2565() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %168 = %165.3;
  %169 = %166.1;
  %170 = %167.0;
  (%168, %169, %170)
}

def @func_4788() -> (Tensor[(9, 15, 4), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float32]) {
  %171 = @func_4058() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %172 = cast(meta[relay.Constant][12] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %173 = reshape(%172, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float32] */;
  %174 = @func_3154(%173) /* ty=(Tensor[(14, 2, 12), float64],) */;
  %175 = %171.0;
  %176 = %174.0;
  (%175, %176, meta[relay.Constant][12] /* ty=Tensor[(336), float32] */)
}

def @func_2294() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %177 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %178 = %177.1;
  %179 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  (%178, %179)
}

def @func_4469(%var_4309: Tensor[(10, 14, 7), int32], %var_4310: Tensor[(10, 14, 7), int32], %var_4430: Tensor[(10, 14, 7), float64], %var_4456: Tensor[(10, 14, 7), float64]) -> (Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64], Tensor[(16, 14, 4), bool], Tensor[(896), float64], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), int64], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), float32], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), float32], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), uint8]) {
  %180 = @func_496() /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
  %181 = @func_1197() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %182 = cast(meta[relay.Constant][13] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %183 = cast(meta[relay.Constant][13] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %184 = reshape(%182, newshape=[16, 14, 4]) /* ty=Tensor[(16, 14, 4), float64] */;
  %185 = reshape(%183, newshape=[16, 14, 4]) /* ty=Tensor[(16, 14, 4), float64] */;
  %186 = @func_994(%184, %185) /* ty=(Tensor[(16, 14, 4), bool], Tensor[(9, 15, 4), float64]) */;
  %187 = cast(meta[relay.Constant][13] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %188 = @func_2294() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %189 = cast(%var_4309, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
  %190 = shape_of(%var_4310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%var_4310, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %193 = maximum(%191, %192) /* ty=Tensor[(10, 14, 7), float64] */;
  %194 = cast(%193, dtype="int64") /* ty=Tensor[(10, 14, 7), int64] */;
  %195 = shape_of(%var_4309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%var_4309, dtype="int64") /* ty=Tensor[(10, 14, 7), int64] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %198 = @func_4058() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %199 = cast(%193, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
  %200 = sqrt(%199) /* ty=Tensor[(10, 14, 7), float64] */;
  %201 = cast(%var_4310, dtype="bool") /* ty=Tensor[(10, 14, 7), bool] */;
  %202 = shape_of(%var_4309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%var_4309, dtype="bool") /* ty=Tensor[(10, 14, 7), bool] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %205 = less_equal(%203, %204) /* ty=Tensor[(10, 14, 7), bool] */;
  %206 = cast(%205, dtype="uint32") /* ty=Tensor[(10, 14, 7), uint32] */;
  %207 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%200, dtype="uint32") /* ty=Tensor[(10, 14, 7), uint32] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %210 = right_shift(%208, %209) /* ty=Tensor[(10, 14, 7), uint32] */;
  %211 = cast(%210, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
  %212 = @func_4282() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %213 = cast(%var_4430, dtype="bool") /* ty=Tensor[(10, 14, 7), bool] */;
  %214 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%200, dtype="bool") /* ty=Tensor[(10, 14, 7), bool] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %217 = logical_and(%215, %216) /* ty=Tensor[(10, 14, 7), bool] */;
  %218 = cast(%193, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %222 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %223 = cast(%200, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
  %224 = cosh(%223) /* ty=Tensor[(10, 14, 7), float64] */;
  %225 = cast(%var_4456, dtype="uint8") /* ty=Tensor[(10, 14, 7), uint8] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%224, dtype="uint8") /* ty=Tensor[(10, 14, 7), uint8] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %229 = %180.0;
  %230 = %181.1;
  %231 = %186.0;
  %232 = sqrt(%187) /* ty=Tensor[(896), float64] */;
  %233 = %188.0;
  %234 = minimum(%196, %197) /* ty=Tensor[(10, 14, 7), int64] */;
  %235 = %198.0;
  %236 = log2(%211) /* ty=Tensor[(10, 14, 7), float32] */;
  %237 = %212.1;
  %238 = floor_divide(%220, %221) /* ty=Tensor[(10, 14, 7), float32] */;
  %239 = %222.1;
  %240 = add(%227, %228) /* ty=Tensor[(10, 14, 7), uint8] */;
  (%229, %230, %231, %232, %233, %234, %235, %236, %237, %238, %239, %240)
}

def @func_3699(%var_3688: Tensor[(4, 4, 13), float32], %var_3697: Tensor[(224, 2), float64]) -> (Tensor[(4, 4, 13), float32], Tensor[(4, 8, 14), float32], Tensor[(224, 2), float64]) {
  %241 = cast(%var_3688, dtype="float32") /* ty=Tensor[(4, 4, 13), float32] */;
  %242 = cast(%var_3697, dtype="float64") /* ty=Tensor[(224, 2), float64] */;
  %243 = reshape(%242, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), float64] */;
  %244 = @func_2719(%243) /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(4, 8, 14), float32], Tensor[(4, 8, 14), float32]) */;
  %245 = exp(%241) /* ty=Tensor[(4, 4, 13), float32] */;
  %246 = %244.3;
  (%245, %246, %var_3697)
}

def @func_4282() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %247 = @func_1166() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %248 = @func_3183() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %249 = %247.0;
  %250 = %248.0;
  (%249, %250)
}

def @func_4009(%var_3989: Tensor[(3, 7, 13), float32]) -> (Tensor[(9, 15, 4), float64], Tensor[(3, 7, 13), float32]) {
  %251 = @func_2776() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %252 = @func_3036() /* ty=Tensor[(3, 7, 13), float32] */;
  %253 = cast(%var_3989, dtype="float32") /* ty=Tensor[(3, 7, 13), float32] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="float32") /* ty=Tensor[(3, 7, 13), float32] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %257 = %251.0;
  %258 = multiply(%255, %256) /* ty=Tensor[(3, 7, 13), float32] */;
  (%257, %258)
}

def @func_1433() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %259 = @func_1166() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %260 = %259.0;
  %261 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  (%260, %261)
}

def @func_4058() -> (Tensor[(9, 15, 4), float64],) {
  %262 = @func_2565() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %263 = %262.0;
  (%263,)
}

def @func_5050() -> (Tensor[(9, 15, 4), float64],) {
  %264 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %265 = %264.0;
  (%265,)
}

def @func_6327() -> (Tensor[(9, 15, 4), bool], Tensor[(9, 15, 4), float64]) {
  %266 = @func_5397() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), bool]) */;
  %267 = @func_2601() /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %268 = %266.1;
  %269 = %267.1;
  (%268, %269)
}

def @func_3516() -> (Tensor[(9, 15, 4), float64],) {
  %270 = @func_1166() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %271 = %270.0;
  (%271,)
}

def @func_5879(%var_5868: float32) -> (Tensor[(9, 15, 4), float32], Tensor[(9, 15, 4), float64], Tensor[(11, 14, 10), float64], float32, Tensor[(350), float32]) {
  %272 = @func_5085() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %273 = %272.0;
  %274 = @func_4282() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %275 = %274.1;
  %276 = cast(%275, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %277 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%273, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %280 = @func_1433() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %281 = cast(%var_5868, dtype="float32") /* ty=float32 */;
  %282 = cast(meta[relay.Constant][14] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %283 = reshape(%281, newshape=[]) /* ty=float32 */;
  %284 = reshape(%282, newshape=[1, 350]) /* ty=Tensor[(1, 350), float32] */;
  %285 = @func_2354(%283, %284) /* ty=(Tensor[(11, 14, 10), float64], Tensor[(11, 14, 10), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(1, 350), float32]) */;
  %286 = divide(%278, %279) /* ty=Tensor[(9, 15, 4), float32] */;
  %287 = %280.1;
  %288 = %285.1;
  (%286, %287, %288, %var_5868, meta[relay.Constant][14] /* ty=Tensor[(350), float32] */)
}

def @func_6440() -> (Tensor[(9, 15, 4), float64],) {
  %289 = @func_3561() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(10, 2, 15), float32], Tensor[(195, 2), uint64]) */;
  %290 = %289.0;
  (%290,)
}

def @func_598(%var_583: float32, %var_584: Tensor[(350), float32], %var_586: Tensor[(350), float32]) -> (Tensor[(9, 15, 4), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(350), float32]) {
  %291 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %292 = cast(%var_583, dtype="float32") /* ty=float32 */;
  %293 = cast(%var_584, dtype="float32") /* ty=Tensor[(350), float32] */;
  %294 = reshape(%292, newshape=[]) /* ty=float32 */;
  %295 = reshape(%293, newshape=[7, 10, 5]) /* ty=Tensor[(7, 10, 5), float32] */;
  %296 = cast(%var_586, dtype="int32") /* ty=Tensor[(350), int32] */;
  %297 = shape_of(%var_584, dtype="int32") /* ty=Tensor[(1), int32] */;
  %298 = cast(%var_584, dtype="int32") /* ty=Tensor[(350), int32] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?), int32] */;
  %300 = left_shift(%298, %299) /* ty=Tensor[(350), int32] */;
  %301 = cast(%300, dtype="float32") /* ty=Tensor[(350), float32] */;
  %302 = %291.0;
  %303 = @func_49(%294, %295) /* ty=Tensor[(7, 10, 5), float32] */;
  %304 = sinh(%301) /* ty=Tensor[(350), float32] */;
  (%302, %303, %var_583, %304)
}

def @func_4246(%var_4220: Tensor[(390), uint64]) -> (Tensor[(12, 9, 4), float32], Tensor[(9, 15, 4), float32], Tensor[(390), uint64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %305 = @func_1578() /* ty=Tensor[(12, 9, 4), float64] */;
  %306 = cast(%305, dtype="float32") /* ty=Tensor[(12, 9, 4), float32] */;
  %307 = cast(%var_4220, dtype="uint64") /* ty=Tensor[(390), uint64] */;
  %308 = reshape(%307, newshape=[390]) /* ty=Tensor[(390), uint64] */;
  %309 = @func_1064(%308) /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float32], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64]) */;
  %310 = @func_1166() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %311 = erf(%306) /* ty=Tensor[(12, 9, 4), float32] */;
  %312 = %309.1;
  %313 = %310.0;
  %314 = @func_449() /* ty=Tensor[(9, 15, 4), float64] */;
  (%311, %312, %var_4220, %313, %314)
}

def @func_1802(%var_1694: Tensor[(10, 2, 1), float32], %var_1723: Tensor[(9, 15, 4), float64], %var_1776: Tensor[(65, 6), uint64], %var_1792: Tensor[(10, 2, 9), float64]) -> (Tensor[(10, 2, 15), float32], Tensor[(9, 15, 4), int8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(65, 6), uint64], Tensor[(9, 15, 4), float64], Tensor[(10, 2, 9), bool]) {
  %315 = cast(%var_1694, dtype="float32") /* ty=Tensor[(10, 2, 1), float32] */;
  %316 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 2, 15), float32] */;
  %317 = @func_1298() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %318 = %317.1;
  %319 = cast(%var_1723, dtype="int8") /* ty=Tensor[(9, 15, 4), int8] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="int8") /* ty=Tensor[(9, 15, 4), int8] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %323 = cast(%318, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %324 = reshape(%323, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
  %325 = @func_1532(%324) /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
  %326 = cast(%var_1776, dtype="uint64") /* ty=Tensor[(65, 6), uint64] */;
  %327 = reshape(%326, newshape=[390]) /* ty=Tensor[(390), uint64] */;
  %328 = @func_708(%327) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */;
  %329 = @func_1072() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %330 = cast(%var_1694, dtype="float64") /* ty=Tensor[(10, 2, 1), float64] */;
  %331 = tan(%330) /* ty=Tensor[(10, 2, 1), float64] */;
  %332 = cast(%331, dtype="float64") /* ty=Tensor[(10, 2, 1), float64] */;
  %333 = asinh(%332) /* ty=Tensor[(10, 2, 1), float64] */;
  %334 = cast(%333, dtype="bool") /* ty=Tensor[(10, 2, 1), bool] */;
  %335 = cast(%var_1792, dtype="bool") /* ty=Tensor[(10, 2, 9), bool] */;
  %336 = floor_mod(%315, %316) /* ty=Tensor[(10, 2, 15), float32] */;
  %337 = bitwise_and(%321, %322) /* ty=Tensor[(9, 15, 4), int8] */;
  %338 = %325.1;
  %339 = %328.0;
  %340 = %329.0;
  %341 = less_equal(%334, %335) /* ty=Tensor[(10, 2, 9), bool] */;
  (%336, %337, %338, %339, %var_1776, %340, %341)
}

def @func_531() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %342 = @func_427() /* ty=Tensor[(9, 15, 4), float64] */;
  %343 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  (%342, %343)
}

def @func_1984(%var_1964: Tensor[(350), float32], %var_1968: Tensor[(350), float32]) -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(350), bool], Tensor[(350), bool], Tensor[(16, 3), float64], Tensor[(48), float64]) {
  %344 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  %345 = cast(%344, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %346 = reshape(%345, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
  %347 = @func_1532(%346) /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
  %348 = cast(%var_1964, dtype="float32") /* ty=Tensor[(350), float32] */;
  %349 = reshape(%348, newshape=[350]) /* ty=Tensor[(350), float32] */;
  %350 = @func_750(%349) /* ty=(Tensor[(9, 15, 4), float64], float32, Tensor[(350), bool]) */;
  %351 = cast(%var_1968, dtype="bool") /* ty=Tensor[(350), bool] */;
  %352 = shape_of(%var_1964, dtype="int32") /* ty=Tensor[(1), int32] */;
  %353 = cast(%var_1964, dtype="bool") /* ty=Tensor[(350), bool] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?), bool] */;
  %355 = cast(meta[relay.Constant][16] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %356 = reshape(%355, newshape=[16, 3]) /* ty=Tensor[(16, 3), float64] */;
  %357 = %347.1;
  %358 = %350.2;
  %359 = not_equal(%353, %354) /* ty=Tensor[(350), bool] */;
  %360 = @func_849(%356) /* ty=Tensor[(16, 3), float64] */;
  (%344, %357, %358, %359, %360, meta[relay.Constant][16] /* ty=Tensor[(48), float64] */)
}

def @func_2865() -> (Tensor[(9, 15, 4), uint16], Tensor[(9, 15, 4), float64]) {
  %361 = @func_427() /* ty=Tensor[(9, 15, 4), float64] */;
  %362 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 15, 4), float64] */, dtype="uint16") /* ty=Tensor[(9, 15, 4), uint16] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%361, dtype="uint16") /* ty=Tensor[(9, 15, 4), uint16] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %366 = cast(%361, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %367 = sin(%366) /* ty=Tensor[(9, 15, 4), float64] */;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %369 = minimum(%364, %365) /* ty=Tensor[(9, 15, 4), uint16] */;
  %370 = cos(%368) /* ty=Tensor[(9, 15, 4), float64] */;
  (%369, %370)
}

def @func_1403(%var_1384: Tensor[(9, 15, 4), uint64], %var_1391: Tensor[(48), float64]) -> (Tensor[(9, 15, 4), uint8], Tensor[(9, 15, 4), int64], Tensor[(9, 15, 4), int32], Tensor[(16, 3), float64], Tensor[(48), float64], Tensor[(9, 15, 4), float64]) {
  %371 = @func_496() /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
  %372 = %371.0;
  %373 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 15, 4), uint64] */, dtype="uint8") /* ty=Tensor[(9, 15, 4), uint8] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%372, dtype="uint8") /* ty=Tensor[(9, 15, 4), uint8] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %377 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  %378 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 15, 4), uint64] */, dtype="int64") /* ty=Tensor[(9, 15, 4), int64] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%377, dtype="int64") /* ty=Tensor[(9, 15, 4), int64] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %382 = cast(%var_1384, dtype="int32") /* ty=Tensor[(9, 15, 4), int32] */;
  %383 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%372, dtype="int32") /* ty=Tensor[(9, 15, 4), int32] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %386 = cast(%var_1391, dtype="float64") /* ty=Tensor[(48), float64] */;
  %387 = reshape(%386, newshape=[16, 3]) /* ty=Tensor[(16, 3), float64] */;
  %388 = maximum(%375, %376) /* ty=Tensor[(9, 15, 4), uint8] */;
  %389 = right_shift(%380, %381) /* ty=Tensor[(9, 15, 4), int64] */;
  %390 = subtract(%384, %385) /* ty=Tensor[(9, 15, 4), int32] */;
  %391 = @func_849(%387) /* ty=Tensor[(16, 3), float64] */;
  %392 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  (%388, %389, %390, %391, %var_1391, %392)
}

def @func_1064(%var_1051: Tensor[(390), uint64]) -> (Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float32], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64]) {
  %393 = @func_496() /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
  %394 = @func_717() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %395 = %394.0;
  %396 = cast(%395, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %397 = cast(%var_1051, dtype="uint64") /* ty=Tensor[(390), uint64] */;
  %398 = reshape(%397, newshape=[390]) /* ty=Tensor[(390), uint64] */;
  %399 = @func_708(%398) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */;
  %400 = %393.0;
  %401 = sqrt(%396) /* ty=Tensor[(9, 15, 4), float32] */;
  %402 = %399.1;
  (%400, %401, %402, %var_1051)
}

def @func_1861(%var_1839: Tensor[(9, 15, 4), float64]) -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %403 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %404 = %403.0;
  %405 = cast(%var_1839, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%404, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %409 = not_equal(%407, %408) /* ty=Tensor[(9, 15, 4), bool] */;
  %410 = cast(%var_1839, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %411 = shape_of(%409, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(%409, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %414 = @func_717() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %415 = power(%412, %413) /* ty=Tensor[(9, 15, 4), float64] */;
  %416 = %414.0;
  (%415, %416)
}

def @func_3183() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %417 = @func_2865() /* ty=(Tensor[(9, 15, 4), uint16], Tensor[(9, 15, 4), float64]) */;
  %418 = %417.1;
  %419 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  (%418, %419)
}

def @func_1599(%var_1593: Tensor[(15, 6, 7), uint8], %var_1594: Tensor[(15, 6, 7), uint8]) -> (Tensor[(15, 6, 7), uint8],) {
  %420 = cast(%var_1594, dtype="uint8") /* ty=Tensor[(15, 6, 7), uint8] */;
  %421 = shape_of(%var_1593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%var_1593, dtype="uint8") /* ty=Tensor[(15, 6, 7), uint8] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %424 = bitwise_xor(%422, %423) /* ty=Tensor[(15, 6, 7), uint8] */;
  (%424,)
}

def @func_1532(%var_1524: Tensor[(9, 15, 4), float64]) -> (Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) {
  %425 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  %426 = cast(%var_1524, dtype="uint64") /* ty=Tensor[(9, 15, 4), uint64] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%425, dtype="uint64") /* ty=Tensor[(9, 15, 4), uint64] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %430 = multiply(%428, %429) /* ty=Tensor[(9, 15, 4), uint64] */;
  %431 = @func_449() /* ty=Tensor[(9, 15, 4), float64] */;
  (%430, %431)
}

def @func_1875() -> (Tensor[(9, 15, 4), float64],) {
  %432 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  (%432,)
}

def @func_2405() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %433 = @func_2076() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %434 = @func_427() /* ty=Tensor[(9, 15, 4), float64] */;
  %435 = %433.1;
  (%434, %435)
}

def @func_1931() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(15, 6, 7), uint8], Tensor[(630), uint8]) {
  %436 = @func_717() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %437 = @func_1490() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %438 = cast(meta[relay.Constant][19] /* ty=Tensor[(630), uint8] */, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %439 = cast(meta[relay.Constant][19] /* ty=Tensor[(630), uint8] */, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %440 = reshape(%438, newshape=[15, 6, 7]) /* ty=Tensor[(15, 6, 7), uint8] */;
  %441 = reshape(%439, newshape=[15, 6, 7]) /* ty=Tensor[(15, 6, 7), uint8] */;
  %442 = @func_1599(%440, %441) /* ty=(Tensor[(15, 6, 7), uint8],) */;
  %443 = %436.0;
  %444 = %437.1;
  %445 = %442.0;
  (%443, %444, %445, meta[relay.Constant][19] /* ty=Tensor[(630), uint8] */)
}

def @func_427() -> Tensor[(9, 15, 4), float64] {
  %446 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %446.2
}

def @func_3920() -> (Tensor[(9, 15, 4), float32],) {
  %447 = @func_1875() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %448 = %447.0;
  %449 = cast(%448, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %450 = atan(%449) /* ty=Tensor[(9, 15, 4), float32] */;
  (%450,)
}

def @func_717() -> (Tensor[(9, 15, 4), float64],) {
  %451 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %452 = %451.1;
  (%452,)
}

def @func_3154(%var_3130: Tensor[(14, 2, 12), float32]) -> (Tensor[(14, 2, 12), float64],) {
  %453 = cast(%var_3130, dtype="float32") /* ty=Tensor[(14, 2, 12), float32] */;
  %454 = cos(%453) /* ty=Tensor[(14, 2, 12), float32] */;
  %455 = cast(%454, dtype="float64") /* ty=Tensor[(14, 2, 12), float64] */;
  %456 = rsqrt(%455) /* ty=Tensor[(14, 2, 12), float64] */;
  (%456,)
}

def @func_357() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %457 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  %458 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  %459 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  (%457, %458, %459)
}

def @func_994(%var_918: Tensor[(16, 14, 4), float64], %var_919: Tensor[(16, 14, 4), float64]) -> (Tensor[(16, 14, 4), bool], Tensor[(9, 15, 4), float64]) {
  %460 = cast(%var_919, dtype="float64") /* ty=Tensor[(16, 14, 4), float64] */;
  %461 = shape_of(%var_918, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_918, dtype="float64") /* ty=Tensor[(16, 14, 4), float64] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %464 = divide(%462, %463) /* ty=Tensor[(16, 14, 4), float64] */;
  %465 = cast(%var_919, dtype="bool") /* ty=Tensor[(16, 14, 4), bool] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%464, dtype="bool") /* ty=Tensor[(16, 14, 4), bool] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %469 = not_equal(%467, %468) /* ty=Tensor[(16, 14, 4), bool] */;
  %470 = @func_427() /* ty=Tensor[(9, 15, 4), float64] */;
  (%469, %470)
}

def @func_5231() -> Tensor[(9, 15, 4), float64] {
  %471 = @func_3516() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %471.0
}

def @func_5992() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %472 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %473 = @func_3376() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %474 = @func_2565() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %475 = %472.0;
  %476 = %473.0;
  %477 = %474.0;
  (%475, %476, %477)
}

def @func_3000() -> (Tensor[(9, 15, 4), float64],) {
  %478 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %479 = %478.2;
  (%479,)
}

def @func_2509() -> (Tensor[(9, 15, 4), uint64],) {
  %480 = @func_496() /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
  %481 = %480.0;
  (%481,)
}

def @func_3364(%var_3309: Tensor[(390, 1), uint64], %var_3320: Tensor[(9, 15, 4), float64]) -> (Tensor[(10, 2, 15), float32], Tensor[(1, 20), float32], Tensor[(390, 180), float32], Tensor[(9, 15, 4), uint64], Tensor[(7, 10, 5), float32], float32, Tensor[(350, 1), float32], Tensor[(9, 15, 4), float32]) {
  %482 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 20), float32] */, dtype="float32") /* ty=Tensor[(1, 20), float32] */;
  %483 = @func_2601() /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %484 = %483.1;
  %485 = cast(%484, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %486 = cast(%var_3309, dtype="uint64") /* ty=Tensor[(390, 1), uint64] */;
  %487 = cast(meta[relay.Constant][21] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %488 = reshape(%482, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
  %489 = reshape(%485, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
  %490 = reshape(%486, newshape=[65, 6]) /* ty=Tensor[(65, 6), uint64] */;
  %491 = reshape(%487, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %492 = @func_1802(%488, %489, %490, %491) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(9, 15, 4), int8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(65, 6), uint64], Tensor[(9, 15, 4), float64], Tensor[(10, 2, 9), bool]) */;
  %493 = cast(meta[relay.Constant][21] /* ty=Tensor[(180), float64] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %494 = cast(%var_3309, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
  %495 = @func_2509() /* ty=(Tensor[(9, 15, 4), uint64],) */;
  %496 = cast(6.3889f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %497 = cast(meta[relay.Constant][22] /* ty=Tensor[(350, 1), float32] */, dtype="float32") /* ty=Tensor[(350, 1), float32] */;
  %498 = reshape(%496, newshape=[]) /* ty=float32 */;
  %499 = reshape(%497, newshape=[7, 10, 5]) /* ty=Tensor[(7, 10, 5), float32] */;
  %500 = cast(%var_3320, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %501 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%484, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %504 = mod(%502, %503) /* ty=Tensor[(9, 15, 4), float32] */;
  %505 = cast(%504, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %506 = log2(%505) /* ty=Tensor[(9, 15, 4), float32] */;
  %507 = cast(%506, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %508 = %492.0;
  %509 = mod(%493, %494) /* ty=Tensor[(390, 180), float32] */;
  %510 = %495.0;
  %511 = @func_49(%498, %499) /* ty=Tensor[(7, 10, 5), float32] */;
  %512 = rsqrt(%507) /* ty=Tensor[(9, 15, 4), float32] */;
  (%508, meta[relay.Constant][20] /* ty=Tensor[(1, 20), float32] */, %509, %510, %511, 6.3889f /* ty=float32 */, meta[relay.Constant][22] /* ty=Tensor[(350, 1), float32] */, %512)
}

def @func_5765() -> (Tensor[(9, 15, 4), float64],) {
  %513 = @func_2405() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %514 = %513.1;
  (%514,)
}

def @func_3070(%var_3057: Tensor[(9, 15, 4), float64]) -> (Tensor[(9, 15, 4), bool], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float32]) {
  %515 = @func_449() /* ty=Tensor[(9, 15, 4), float64] */;
  %516 = cast(%var_3057, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%515, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %520 = @func_1166() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %521 = cast(%var_3057, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %522 = greater_equal(%518, %519) /* ty=Tensor[(9, 15, 4), bool] */;
  %523 = %520.0;
  %524 = asin(%521) /* ty=Tensor[(9, 15, 4), float32] */;
  (%522, %523, %524)
}

def @func_5742(%var_5666: Tensor[(12, 6, 1), float64]) -> (Tensor[(12, 6, ?), uint8], Tensor[(12, 9, 4), float64], Tensor[(12, 6, 1), float32], Tensor[(12, 6, ?), bool]) {
  %525 = cast(%var_5666, dtype="float64") /* ty=Tensor[(12, 6, 1), float64] */;
  %526 = acos(%525) /* ty=Tensor[(12, 6, 1), float64] */;
  %527 = cast(%var_5666, dtype="uint8") /* ty=Tensor[(12, 6, 1), uint8] */;
  %528 = shape_of(%526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(%526, dtype="uint8") /* ty=Tensor[(12, 6, 1), uint8] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %531 = cast(%var_5666, dtype="float64") /* ty=Tensor[(12, 6, 1), float64] */;
  %532 = asin(%531) /* ty=Tensor[(12, 6, 1), float64] */;
  %533 = cast(%532, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
  %534 = cast(%var_5666, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
  %535 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%532, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %538 = floor_mod(%536, %537) /* ty=Tensor[(12, 6, ?), float32] */;
  %539 = cast(%var_5666, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
  %540 = atanh(%539) /* ty=Tensor[(12, 6, 1), float32] */;
  %541 = cast(%540, dtype="int16") /* ty=Tensor[(12, 6, 1), int16] */;
  %542 = shape_of(%var_5666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %543 = cast(%var_5666, dtype="int16") /* ty=Tensor[(12, 6, 1), int16] */;
  %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %545 = minimum(%543, %544) /* ty=Tensor[(12, 6, ?), int16] */;
  %546 = cast(%545, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
  %547 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%538, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %550 = bitwise_xor(%529, %530) /* ty=Tensor[(12, 6, ?), uint8] */;
  %551 = @func_1578() /* ty=Tensor[(12, 9, 4), float64] */;
  %552 = rsqrt(%533) /* ty=Tensor[(12, 6, 1), float32] */;
  %553 = logical_or(%548, %549) /* ty=Tensor[(12, 6, ?), bool] */;
  (%550, %551, %552, %553)
}

def @func_3376() -> (Tensor[(9, 15, 4), float64],) {
  %554 = @func_1147() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %555 = %554.2;
  (%555,)
}

def @func_750(%var_735: Tensor[(350), float32]) -> (Tensor[(9, 15, 4), float64], float32, Tensor[(350), bool]) {
  %556 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %557 = cast(3.31404f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %558 = cast(%var_735, dtype="float32") /* ty=Tensor[(350), float32] */;
  %559 = cast(%var_735, dtype="float32") /* ty=Tensor[(350), float32] */;
  %560 = reshape(%557, newshape=[]) /* ty=float32 */;
  %561 = reshape(%558, newshape=[350]) /* ty=Tensor[(350), float32] */;
  %562 = reshape(%559, newshape=[350]) /* ty=Tensor[(350), float32] */;
  %563 = @func_598(%560, %561, %562) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(350), float32]) */;
  %564 = cast(3.31404f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %565 = cast(%var_735, dtype="bool") /* ty=Tensor[(350), bool] */;
  %566 = %556.0;
  %567 = %563.2;
  %568 = greater_equal(%564, %565) /* ty=Tensor[(350), bool] */;
  (%566, %567, %568)
}

def @func_4154(%var_4126: Tensor[(600), int16], %var_4141: Tensor[(350), float64]) -> (Tensor[(9, 15, 4), float64], Tensor[(4, 4, 13), float32], Tensor[(208), float32], Tensor[(8, 56), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(60), int16], Tensor[(600), int16], Tensor[(9, 15, 4), float64], Tensor[(350), uint32], Tensor[(350), float32]) {
  %569 = @func_2294() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %570 = cast(meta[relay.Constant][23] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %571 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 56), float64] */, dtype="float64") /* ty=Tensor[(8, 56), float64] */;
  %572 = reshape(%570, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float32] */;
  %573 = reshape(%571, newshape=[224, 2]) /* ty=Tensor[(224, 2), float64] */;
  %574 = @func_3699(%572, %573) /* ty=(Tensor[(4, 4, 13), float32], Tensor[(4, 8, 14), float32], Tensor[(224, 2), float64]) */;
  %575 = @func_2565() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %576 = @func_2601() /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %577 = %576.1;
  %578 = cast(%577, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %579 = reshape(%578, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
  %580 = @func_1861(%579) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %581 = @func_3376() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %582 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %583 = cast(meta[relay.Constant][25] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %584 = cast(%var_4126, dtype="int16") /* ty=Tensor[(600), int16] */;
  %585 = reshape(%583, newshape=[1, 5, 12]) /* ty=Tensor[(1, 5, 12), int16] */;
  %586 = reshape(%584, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), int16] */;
  %587 = @func_1114(%585, %586) /* ty=(Tensor[(10, 5, 12), int16], Tensor[(9, 15, 4), float64], Tensor[(350), bool], Tensor[(350), float32], Tensor[(9, 15, 4), float64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */;
  %588 = %587.2;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(350), float64] */;
  %590 = log(%589) /* ty=Tensor[(350), float64] */;
  %591 = cast(%var_4141, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(1), int32] */;
  %593 = cast(%590, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %595 = cast(%590, dtype="float32") /* ty=Tensor[(350), float32] */;
  %596 = %569.1;
  %597 = %574.0;
  %598 = %575.0;
  %599 = %580.0;
  %600 = %581.0;
  %601 = %582.0;
  %602 = minimum(%593, %594) /* ty=Tensor[(350), uint32] */;
  %603 = sigmoid(%595) /* ty=Tensor[(350), float32] */;
  (%596, %597, meta[relay.Constant][23] /* ty=Tensor[(208), float32] */, meta[relay.Constant][24] /* ty=Tensor[(8, 56), float64] */, %598, %577, %599, %600, meta[relay.Constant][25] /* ty=Tensor[(60), int16] */, %var_4126, %601, %602, %603)
}

def @func_3931() -> (Tensor[(630), uint8], Tensor[(9, 2, 16), bool], Tensor[(1, 288), uint32]) {
  %604 = @func_2601() /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %605 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 288), uint32] */, dtype="uint32") /* ty=Tensor[(1, 288), uint32] */;
  %606 = reshape(%605, newshape=[9, 2, 16]) /* ty=Tensor[(9, 2, 16), uint32] */;
  %607 = %604.0;
  %608 = @func_1644(%606) /* ty=Tensor[(9, 2, 16), bool] */;
  (%607, %608, meta[relay.Constant][26] /* ty=Tensor[(1, 288), uint32] */)
}

def @func_328() -> Tensor[(9, 15, 4), float64] {
  %609 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  sigmoid(%609) /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_5197() -> Tensor[(9, 15, 4), float64] {
  %610 = @func_5050() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %610.0
}

def @func_3216() -> (Tensor[(9, 15, 4), float64],) {
  %611 = @func_496() /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
  %612 = %611.1;
  (%612,)
}

def @func_4872() -> (Tensor[(9, 15, 4), float32], Tensor[(9, 15, 4), float32]) {
  %613 = @func_3920() /* ty=(Tensor[(9, 15, 4), float32],) */;
  %614 = @func_3920() /* ty=(Tensor[(9, 15, 4), float32],) */;
  %615 = %613.0;
  %616 = %614.0;
  (%615, %616)
}

def @func_5000() -> (Tensor[(9, 15, 4), float32], Tensor[(8, 11), float32], Tensor[(88), float32]) {
  %617 = @func_4872() /* ty=(Tensor[(9, 15, 4), float32], Tensor[(9, 15, 4), float32]) */;
  %618 = cast(meta[relay.Constant][28] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %619 = reshape(%618, newshape=[8, 11]) /* ty=Tensor[(8, 11), float32] */;
  %620 = @func_4944(%619) /* ty=(Tensor[(8, 11), float32],) */;
  %621 = %617.1;
  %622 = %620.0;
  (%621, %622, meta[relay.Constant][28] /* ty=Tensor[(88), float32] */)
}

def @func_1072() -> (Tensor[(9, 15, 4), float64],) {
  %623 = @func_449() /* ty=Tensor[(9, 15, 4), float64] */;
  (%623,)
}

def @func_6475() -> Tensor[(9, 15, 4), float64] {
  @func_6461() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_6274(%var_6252: Tensor[(390), uint16], %var_6254: Tensor[(600), int16]) -> (Tensor[(9, 15, 4), float64], Tensor[(12, 50), int16], Tensor[(390), uint16], Tensor[(60), int16], Tensor[(600), int16], Tensor[(20), float32], Tensor[(9, 15, 4), float64]) {
  %624 = @func_1298() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %625 = cast(%var_6252, dtype="uint16") /* ty=Tensor[(390), uint16] */;
  %626 = cast(meta[relay.Constant][29] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %627 = cast(%var_6254, dtype="int16") /* ty=Tensor[(600), int16] */;
  %628 = cast(meta[relay.Constant][30] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
  %629 = reshape(%625, newshape=[10, 13, 3]) /* ty=Tensor[(10, 13, 3), uint16] */;
  %630 = reshape(%626, newshape=[60]) /* ty=Tensor[(60), int16] */;
  %631 = reshape(%627, newshape=[12, 50]) /* ty=Tensor[(12, 50), int16] */;
  %632 = reshape(%628, newshape=[20]) /* ty=Tensor[(20), float32] */;
  %633 = @func_3269(%629, %630, %631, %632) /* ty=(Tensor[(10, 13, 3), uint16], Tensor[(10, 13, 3), float64], Tensor[(9, 15, 4), float64], Tensor[(60), int16], Tensor[(12, 50), int16], Tensor[(10, 2, 9), bool], Tensor[(20), float32], Tensor[(180), float64]) */;
  %634 = %624.1;
  %635 = %633.4;
  %636 = @func_5341() /* ty=Tensor[(9, 15, 4), float64] */;
  (%634, %635, %var_6252, meta[relay.Constant][29] /* ty=Tensor[(60), int16] */, %var_6254, meta[relay.Constant][30] /* ty=Tensor[(20), float32] */, %636)
}

def @func_5085() -> (Tensor[(9, 15, 4), float64],) {
  %637 = @func_661() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %638 = %637.0;
  (%638,)
}

def @func_5341() -> Tensor[(9, 15, 4), float64] {
  %639 = @func_3000() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %639.0
}

def @func_2471() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float32], Tensor[(9, 15, 4), float64]) {
  %640 = @func_1197() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %641 = @func_1828() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(390), uint64]) */;
  %642 = %641.0;
  %643 = cast(%642, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %644 = %640.1;
  %645 = tan(%643) /* ty=Tensor[(9, 15, 4), float32] */;
  %646 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  (%644, %645, %646)
}

def @func_3121() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) {
  %647 = @func_1433() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %648 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  %649 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 15, 4), float64] */, dtype="uint64") /* ty=Tensor[(9, 15, 4), uint64] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="uint64") /* ty=Tensor[(9, 15, 4), uint64] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %653 = @func_793() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %654 = %647.0;
  %655 = logical_xor(%651, %652) /* ty=Tensor[(9, 15, 4), uint64] */;
  %656 = %653.0;
  (%654, %655, %656)
}

def @func_3883(%var_3877: Tensor[(9, 15, 4), float64]) -> Tensor[(9, 15, 4), bool] {
  %657 = @func_3183() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %658 = %657.0;
  %659 = cast(%var_3877, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%658, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%661, %662) /* ty=Tensor[(9, 15, 4), bool] */
}

def @func_2129() -> (Tensor[(630), uint8],) {
  %663 = @func_1931() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(15, 6, 7), uint8], Tensor[(630), uint8]) */;
  %664 = %663.3;
  (%664,)
}

def @func_4049() -> Tensor[(9, 15, 4), float64] {
  @func_328() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_3963(%var_3942: Tensor[(6, 4, 15), float32]) -> Tensor[(6, 4, 15), float32] {
  %665 = cast(%var_3942, dtype="float32") /* ty=Tensor[(6, 4, 15), float32] */;
  erf(%665) /* ty=Tensor[(6, 4, 15), float32] */
}

def @func_2771() -> Tensor[(9, 15, 4), uint64] {
  %666 = @func_2509() /* ty=(Tensor[(9, 15, 4), uint64],) */;
  %666.0
}

def @func_1147() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %667 = @func_793() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %668 = @func_793() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %669 = %668.0;
  %670 = cast(%669, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %671 = %667.0;
  %672 = sinh(%670) /* ty=Tensor[(9, 15, 4), float64] */;
  %673 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  (%671, %672, %673)
}

def @func_2565() -> (Tensor[(9, 15, 4), float64],) {
  %674 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  (%674,)
}

def @func_849(%var_835: Tensor[(16, 3), float64]) -> Tensor[(16, 3), float64] {
  %675 = cast(%var_835, dtype="float64") /* ty=Tensor[(16, 3), float64] */;
  sigmoid(%675) /* ty=Tensor[(16, 3), float64] */
}

def @func_2020() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %676 = @func_1875() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %677 = %676.0;
  %678 = cast(%677, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %679 = reshape(%678, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
  %680 = @func_1532(%679) /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
  %681 = %680.1;
  (%677, %681)
}

def @func_1197() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %682 = @func_717() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %683 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  %684 = %682.0;
  (%683, %684)
}

def @func_3504() -> Tensor[(9, 15, 4), bool] {
  @func_2822() /* ty=Tensor[(9, 15, 4), bool] */
}

def @func_3794(%var_3769: Tensor[(9, 15, 4), float64]) -> Tensor[(9, 15, 4), bool] {
  %685 = @func_1298() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %686 = %685.1;
  %687 = cast(%var_3769, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%686, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%689, %690) /* ty=Tensor[(9, 15, 4), bool] */
}

def @func_2822() -> Tensor[(9, 15, 4), bool] {
  %691 = @func_2776() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %692 = %691.0;
  %693 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  %694 = cast(%693, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %695 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%692, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%696, %697) /* ty=Tensor[(9, 15, 4), bool] */
}

def @func_1578() -> Tensor[(12, 9, 4), float64] {
  %698 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 9, 4), float32] */, dtype="float32") /* ty=Tensor[(12, 9, 4), float32] */;
  %699 = sigmoid(%698) /* ty=Tensor[(12, 9, 4), float32] */;
  %700 = cast(%699, dtype="float64") /* ty=Tensor[(12, 9, 4), float64] */;
  sinh(%700) /* ty=Tensor[(12, 9, 4), float64] */
}

def @main(%var_6624: Tensor[(15, 2, 16), int32], %var_6654: Tensor[(9, 15, 4), float64]) -> (Tensor[(15, 2, 16), int32], Tensor[(630), uint8], Tensor[(9, 15, 4), bool]) {
  %701 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %702 = cast(%var_6624, dtype="int32") /* ty=Tensor[(15, 2, 16), int32] */;
  %703 = @func_2129() /* ty=(Tensor[(630), uint8],) */;
  %704 = @func_1166() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %705 = %704.0;
  %706 = cast(%var_6654, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%705, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %710 = add(%701, %702) /* ty=Tensor[(15, 2, 16), int32] */;
  %711 = %703.0;
  %712 = logical_and(%708, %709) /* ty=Tensor[(9, 15, 4), bool] */;
  (%710, %711, %712)
}

def @func_5428(%var_5416: Tensor[(8, 56), float64], %var_5421: Tensor[(8, 56), float64]) -> (Tensor[(6, 4, 12), float32], Tensor[(4, 4, 13), float32], Tensor[(208), float32], Tensor[(9, 15, 4), float64], Tensor[(8, 56), uint8]) {
  %713 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 4, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 4, 12), float32] */;
  %714 = cast(meta[relay.Constant][34] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %715 = cast(%var_5416, dtype="float64") /* ty=Tensor[(8, 56), float64] */;
  %716 = reshape(%714, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float32] */;
  %717 = reshape(%715, newshape=[224, 2]) /* ty=Tensor[(224, 2), float64] */;
  %718 = @func_3699(%716, %717) /* ty=(Tensor[(4, 4, 13), float32], Tensor[(4, 8, 14), float32], Tensor[(224, 2), float64]) */;
  %719 = @func_2294() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %720 = cast(%var_5421, dtype="uint8") /* ty=Tensor[(8, 56), uint8] */;
  %721 = shape_of(%var_5416, dtype="int32") /* ty=Tensor[(2), int32] */;
  %722 = cast(%var_5416, dtype="uint8") /* ty=Tensor[(8, 56), uint8] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %724 = log2(%713) /* ty=Tensor[(6, 4, 12), float32] */;
  %725 = %718.0;
  %726 = %719.0;
  %727 = add(%722, %723) /* ty=Tensor[(8, 56), uint8] */;
  (%724, %725, meta[relay.Constant][34] /* ty=Tensor[(208), float32] */, %726, %727)
}

def @func_6077() -> Tensor[(630), float64] {
  %728 = @func_2129() /* ty=(Tensor[(630), uint8],) */;
  %729 = %728.0;
  %730 = cast(%729, dtype="float64") /* ty=Tensor[(630), float64] */;
  rsqrt(%730) /* ty=Tensor[(630), float64] */
}

def @func_6429(%var_6409: float32) -> (Tensor[(12, 9, 4), float64], float32, Tensor[(350), float32], Tensor[(7, 10, 5), float32]) {
  %731 = cast(%var_6409, dtype="float32") /* ty=float32 */;
  %732 = cast(meta[relay.Constant][35] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %733 = cast(meta[relay.Constant][35] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %734 = reshape(%731, newshape=[]) /* ty=float32 */;
  %735 = reshape(%732, newshape=[350]) /* ty=Tensor[(350), float32] */;
  %736 = reshape(%733, newshape=[350]) /* ty=Tensor[(350), float32] */;
  %737 = @func_598(%734, %735, %736) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(350), float32]) */;
  %738 = %737.1;
  %739 = cast(%738, dtype="float32") /* ty=Tensor[(7, 10, 5), float32] */;
  %740 = @func_1578() /* ty=Tensor[(12, 9, 4), float64] */;
  %741 = tan(%739) /* ty=Tensor[(7, 10, 5), float32] */;
  (%740, %var_6409, meta[relay.Constant][35] /* ty=Tensor[(350), float32] */, %741)
}

def @func_661() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %742 = @func_449() /* ty=Tensor[(9, 15, 4), float64] */;
  %743 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  (%742, %743)
}

def @func_6543() -> Tensor[(13, 4, 5), float64] {
  %744 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 4, 5), float64] */, dtype="float64") /* ty=Tensor[(13, 4, 5), float64] */;
  asin(%744) /* ty=Tensor[(13, 4, 5), float64] */
}

def @func_3269(%var_3226: Tensor[(10, 13, 3), uint16], %var_3244: Tensor[(60), int16], %var_3245: Tensor[(12, 50), int16], %var_3260: Tensor[(20), float32]) -> (Tensor[(10, 13, 3), uint16], Tensor[(10, 13, 3), float64], Tensor[(9, 15, 4), float64], Tensor[(60), int16], Tensor[(12, 50), int16], Tensor[(10, 2, 9), bool], Tensor[(20), float32], Tensor[(180), float64]) {
  %745 = cast(%var_3226, dtype="uint16") /* ty=Tensor[(10, 13, 3), uint16] */;
  %746 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(10, 13, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 13, 3), uint16] */, dtype="uint16") /* ty=Tensor[(10, 13, 3), uint16] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %749 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 13, 3), uint16] */, dtype="float64") /* ty=Tensor[(10, 13, 3), float64] */;
  %750 = exp(%749) /* ty=Tensor[(10, 13, 3), float64] */;
  %751 = cast(%750, dtype="float64") /* ty=Tensor[(10, 13, 3), float64] */;
  %752 = cast(%var_3244, dtype="int16") /* ty=Tensor[(60), int16] */;
  %753 = cast(%var_3245, dtype="int16") /* ty=Tensor[(12, 50), int16] */;
  %754 = reshape(%752, newshape=[1, 5, 12]) /* ty=Tensor[(1, 5, 12), int16] */;
  %755 = reshape(%753, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), int16] */;
  %756 = @func_1114(%754, %755) /* ty=(Tensor[(10, 5, 12), int16], Tensor[(9, 15, 4), float64], Tensor[(350), bool], Tensor[(350), float32], Tensor[(9, 15, 4), float64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */;
  %757 = cast(%var_3260, dtype="float32") /* ty=Tensor[(20), float32] */;
  %758 = %756.4;
  %759 = cast(%758, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %760 = acos(%751) /* ty=Tensor[(10, 13, 3), float64] */;
  %761 = cast(%760, dtype="uint64") /* ty=Tensor[(10, 13, 3), uint64] */;
  %762 = cast(meta[relay.Constant][38] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %763 = reshape(%757, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
  %764 = reshape(%759, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
  %765 = reshape(%761, newshape=[65, 6]) /* ty=Tensor[(65, 6), uint64] */;
  %766 = reshape(%762, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %767 = @func_1802(%763, %764, %765, %766) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(9, 15, 4), int8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(65, 6), uint64], Tensor[(9, 15, 4), float64], Tensor[(10, 2, 9), bool]) */;
  %768 = bitwise_xor(%747, %748) /* ty=Tensor[(10, 13, 3), uint16] */;
  %769 = %767.6;
  (%768, %760, %758, %var_3244, %var_3245, %769, %var_3260, meta[relay.Constant][38] /* ty=Tensor[(180), float64] */)
}

def @func_49(%var_35: float32, %var_36: Tensor[(7, 10, 5), float32]) -> Tensor[(7, 10, 5), float32] {
  %770 = cast(%var_35, dtype="float32") /* ty=float32 */;
  %771 = cast(%var_36, dtype="float32") /* ty=Tensor[(7, 10, 5), float32] */;
  mod(%770, %771) /* ty=Tensor[(7, 10, 5), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3505() -> Tensor[(9, 15, 4), bool] {
  %0 = fn () -> Tensor[(9, 15, 4), bool] {
    @func_2822() /* ty=Tensor[(9, 15, 4), bool] */
  };
  %0() /* ty=Tensor[(9, 15, 4), bool] */
}

def @func_4060() -> (Tensor[(9, 15, 4), float64],) {
  @func_4058() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_2778() -> (Tensor[(9, 15, 4), float64],) {
  @func_2776() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_3275(%var_3271: Tensor[(10, 13, 3), uint16], %var_3272: Tensor[(60), int16], %var_3273: Tensor[(12, 50), int16], %var_3274: Tensor[(20), float32]) -> (Tensor[(10, 13, 3), uint16], Tensor[(10, 13, 3), float64], Tensor[(9, 15, 4), float64], Tensor[(60), int16], Tensor[(12, 50), int16], Tensor[(10, 2, 9), bool], Tensor[(20), float32], Tensor[(180), float64]) {
  @func_3269(%var_3271, %var_3272, %var_3273, %var_3274) /* ty=(Tensor[(10, 13, 3), uint16], Tensor[(10, 13, 3), float64], Tensor[(9, 15, 4), float64], Tensor[(60), int16], Tensor[(12, 50), int16], Tensor[(10, 2, 9), bool], Tensor[(20), float32], Tensor[(180), float64]) */
}

def @func_1987(%var_1985: Tensor[(350), float32], %var_1986: Tensor[(350), float32]) -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(350), bool], Tensor[(350), bool], Tensor[(16, 3), float64], Tensor[(48), float64]) {
  %18 = fn (%var_1964: Tensor[(350), float32], %var_1968: Tensor[(350), float32]) -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(350), bool], Tensor[(350), bool], Tensor[(16, 3), float64], Tensor[(48), float64]) {
    %1 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
    %2 = cast(%1, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
    %3 = reshape(%2, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
    %4 = @func_1532(%3) /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
    %5 = cast(%var_1964, dtype="float32") /* ty=Tensor[(350), float32] */;
    %6 = reshape(%5, newshape=[350]) /* ty=Tensor[(350), float32] */;
    %7 = @func_750(%6) /* ty=(Tensor[(9, 15, 4), float64], float32, Tensor[(350), bool]) */;
    %8 = cast(%var_1968, dtype="bool") /* ty=Tensor[(350), bool] */;
    %9 = shape_of(%var_1964, dtype="int32") /* ty=Tensor[(1), int32] */;
    %10 = cast(%var_1964, dtype="bool") /* ty=Tensor[(350), bool] */;
    %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?), bool] */;
    %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
    %13 = reshape(%12, newshape=[16, 3]) /* ty=Tensor[(16, 3), float64] */;
    %14 = %4.1;
    %15 = %7.2;
    %16 = not_equal(%10, %11) /* ty=Tensor[(350), bool] */;
    %17 = @func_849(%13) /* ty=Tensor[(16, 3), float64] */;
    (%1, %14, %15, %16, %17, meta[relay.Constant][0] /* ty=Tensor[(48), float64] */)
  };
  %18(%var_1985, %var_1986) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(350), bool], Tensor[(350), bool], Tensor[(16, 3), float64], Tensor[(48), float64]) */
}

def @func_2131() -> (Tensor[(630), uint8],) {
  @func_2129() /* ty=(Tensor[(630), uint8],) */
}

def @func_2241() -> Tensor[(9, 15, 4), float64] {
  %19 = fn () -> Tensor[(9, 15, 4), float64] {
    @func_328() /* ty=Tensor[(9, 15, 4), float64] */
  };
  %19() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_4249(%var_4247: Tensor[(390), uint64]) -> (Tensor[(12, 9, 4), float32], Tensor[(9, 15, 4), float32], Tensor[(390), uint64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  @func_4246(%var_4247) /* ty=(Tensor[(12, 9, 4), float32], Tensor[(9, 15, 4), float32], Tensor[(390), uint64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_3364(%var_3309: Tensor[(390, 1), uint64], %var_3320: Tensor[(9, 15, 4), float64]) -> (Tensor[(10, 2, 15), float32], Tensor[(1, 20), float32], Tensor[(390, 180), float32], Tensor[(9, 15, 4), uint64], Tensor[(7, 10, 5), float32], float32, Tensor[(350, 1), float32], Tensor[(9, 15, 4), float32]) {
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 20), float32] */, dtype="float32") /* ty=Tensor[(1, 20), float32] */;
  %21 = @func_2601() /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %22 = %21.1;
  %23 = cast(%22, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %24 = cast(%var_3309, dtype="uint64") /* ty=Tensor[(390, 1), uint64] */;
  %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %26 = reshape(%20, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
  %27 = reshape(%23, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
  %28 = reshape(%24, newshape=[65, 6]) /* ty=Tensor[(65, 6), uint64] */;
  %29 = reshape(%25, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %30 = @func_1802(%26, %27, %28, %29) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(9, 15, 4), int8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(65, 6), uint64], Tensor[(9, 15, 4), float64], Tensor[(10, 2, 9), bool]) */;
  %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(180), float64] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %32 = cast(%var_3309, dtype="float32") /* ty=Tensor[(390, 1), float32] */;
  %33 = @func_2509() /* ty=(Tensor[(9, 15, 4), uint64],) */;
  %34 = cast(6.3889f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(350, 1), float32] */, dtype="float32") /* ty=Tensor[(350, 1), float32] */;
  %36 = reshape(%34, newshape=[]) /* ty=float32 */;
  %37 = reshape(%35, newshape=[7, 10, 5]) /* ty=Tensor[(7, 10, 5), float32] */;
  %38 = cast(%var_3320, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %39 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%22, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %42 = mod(%40, %41) /* ty=Tensor[(9, 15, 4), float32] */;
  %43 = cast(%42, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %44 = log2(%43) /* ty=Tensor[(9, 15, 4), float32] */;
  %45 = cast(%44, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %46 = %30.0;
  %47 = mod(%31, %32) /* ty=Tensor[(390, 180), float32] */;
  %48 = %33.0;
  %49 = @func_49(%36, %37) /* ty=Tensor[(7, 10, 5), float32] */;
  %50 = rsqrt(%45) /* ty=Tensor[(9, 15, 4), float32] */;
  (%46, meta[relay.Constant][1] /* ty=Tensor[(1, 20), float32] */, %47, %48, %49, 6.3889f /* ty=float32 */, meta[relay.Constant][3] /* ty=Tensor[(350, 1), float32] */, %50)
}

def @func_429() -> Tensor[(9, 15, 4), float64] {
  @func_427() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_5050() -> (Tensor[(9, 15, 4), float64],) {
  %51 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %52 = %51.0;
  (%52,)
}

def @func_2022() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  @func_2020() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_5199() -> Tensor[(9, 15, 4), float64] {
  @func_5197() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_2567() -> (Tensor[(9, 15, 4), float64],) {
  @func_2565() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_1199() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  @func_1197() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_5993() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %59 = fn () -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
    %53 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %54 = @func_3376() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %55 = @func_2565() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %56 = %53.0;
    %57 = %54.0;
    %58 = %55.0;
    (%56, %57, %58)
  };
  %59() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_2936() -> (Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(195, 2), uint64], Tensor[(9, 15, 4), float64]) {
  @func_2934() /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(195, 2), uint64], Tensor[(9, 15, 4), float64]) */
}

def @func_1434() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %63 = fn () -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
    %60 = @func_1166() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %61 = %60.0;
    %62 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
    (%61, %62)
  };
  %63() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_5001() -> (Tensor[(9, 15, 4), float32], Tensor[(8, 11), float32], Tensor[(88), float32]) {
  %70 = fn () -> (Tensor[(9, 15, 4), float32], Tensor[(8, 11), float32], Tensor[(88), float32]) {
    %64 = @func_4872() /* ty=(Tensor[(9, 15, 4), float32], Tensor[(9, 15, 4), float32]) */;
    %65 = cast(meta[relay.Constant][4] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
    %66 = reshape(%65, newshape=[8, 11]) /* ty=Tensor[(8, 11), float32] */;
    %67 = @func_4944(%66) /* ty=(Tensor[(8, 11), float32],) */;
    %68 = %64.1;
    %69 = %67.0;
    (%68, %69, meta[relay.Constant][4] /* ty=Tensor[(88), float32] */)
  };
  %70() /* ty=(Tensor[(9, 15, 4), float32], Tensor[(8, 11), float32], Tensor[(88), float32]) */
}

def @func_330() -> Tensor[(9, 15, 4), float64] {
  @func_328() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_3376() -> (Tensor[(9, 15, 4), float64],) {
  %71 = @func_1147() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %72 = %71.2;
  (%72,)
}

def @func_5232() -> Tensor[(9, 15, 4), float64] {
  %74 = fn () -> Tensor[(9, 15, 4), float64] {
    %73 = @func_3516() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %73.0
  };
  %74() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_1807(%var_1803: Tensor[(10, 2, 1), float32], %var_1804: Tensor[(9, 15, 4), float64], %var_1805: Tensor[(65, 6), uint64], %var_1806: Tensor[(10, 2, 9), float64]) -> (Tensor[(10, 2, 15), float32], Tensor[(9, 15, 4), int8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(65, 6), uint64], Tensor[(9, 15, 4), float64], Tensor[(10, 2, 9), bool]) {
  %102 = fn (%var_1694: Tensor[(10, 2, 1), float32], %var_1723: Tensor[(9, 15, 4), float64], %var_1776: Tensor[(65, 6), uint64], %var_1792: Tensor[(10, 2, 9), float64]) -> (Tensor[(10, 2, 15), float32], Tensor[(9, 15, 4), int8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(65, 6), uint64], Tensor[(9, 15, 4), float64], Tensor[(10, 2, 9), bool]) {
    %75 = cast(%var_1694, dtype="float32") /* ty=Tensor[(10, 2, 1), float32] */;
    %76 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 2, 15), float32] */;
    %77 = @func_1298() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %78 = %77.1;
    %79 = cast(%var_1723, dtype="int8") /* ty=Tensor[(9, 15, 4), int8] */;
    %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
    %81 = cast(%78, dtype="int8") /* ty=Tensor[(9, 15, 4), int8] */;
    %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %83 = cast(%78, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
    %84 = reshape(%83, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
    %85 = @func_1532(%84) /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
    %86 = cast(%var_1776, dtype="uint64") /* ty=Tensor[(65, 6), uint64] */;
    %87 = reshape(%86, newshape=[390]) /* ty=Tensor[(390), uint64] */;
    %88 = @func_708(%87) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */;
    %89 = @func_1072() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %90 = cast(%var_1694, dtype="float64") /* ty=Tensor[(10, 2, 1), float64] */;
    %91 = tan(%90) /* ty=Tensor[(10, 2, 1), float64] */;
    %92 = cast(%91, dtype="float64") /* ty=Tensor[(10, 2, 1), float64] */;
    %93 = asinh(%92) /* ty=Tensor[(10, 2, 1), float64] */;
    %94 = cast(%93, dtype="bool") /* ty=Tensor[(10, 2, 1), bool] */;
    %95 = cast(%var_1792, dtype="bool") /* ty=Tensor[(10, 2, 9), bool] */;
    %96 = floor_mod(%75, %76) /* ty=Tensor[(10, 2, 15), float32] */;
    %97 = bitwise_and(%81, %82) /* ty=Tensor[(9, 15, 4), int8] */;
    %98 = %85.1;
    %99 = %88.0;
    %100 = %89.0;
    %101 = less_equal(%94, %95) /* ty=Tensor[(10, 2, 9), bool] */;
    (%96, %97, %98, %99, %var_1776, %100, %101)
  };
  %102(%var_1803, %var_1804, %var_1805, %var_1806) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(9, 15, 4), int8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(65, 6), uint64], Tensor[(9, 15, 4), float64], Tensor[(10, 2, 9), bool]) */
}

def @func_849(%var_835: Tensor[(16, 3), float64]) -> Tensor[(16, 3), float64] {
  %103 = cast(%var_835, dtype="float64") /* ty=Tensor[(16, 3), float64] */;
  sigmoid(%103) /* ty=Tensor[(16, 3), float64] */
}

def @func_1300() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  @func_1298() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_1403(%var_1384: Tensor[(9, 15, 4), uint64], %var_1391: Tensor[(48), float64]) -> (Tensor[(9, 15, 4), uint8], Tensor[(9, 15, 4), int64], Tensor[(9, 15, 4), int32], Tensor[(16, 3), float64], Tensor[(48), float64], Tensor[(9, 15, 4), float64]) {
  %104 = @func_496() /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
  %105 = %104.0;
  %106 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 15, 4), uint64] */, dtype="uint8") /* ty=Tensor[(9, 15, 4), uint8] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%105, dtype="uint8") /* ty=Tensor[(9, 15, 4), uint8] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %110 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  %111 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 15, 4), uint64] */, dtype="int64") /* ty=Tensor[(9, 15, 4), int64] */;
  %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%110, dtype="int64") /* ty=Tensor[(9, 15, 4), int64] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %115 = cast(%var_1384, dtype="int32") /* ty=Tensor[(9, 15, 4), int32] */;
  %116 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%105, dtype="int32") /* ty=Tensor[(9, 15, 4), int32] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %119 = cast(%var_1391, dtype="float64") /* ty=Tensor[(48), float64] */;
  %120 = reshape(%119, newshape=[16, 3]) /* ty=Tensor[(16, 3), float64] */;
  %121 = maximum(%108, %109) /* ty=Tensor[(9, 15, 4), uint8] */;
  %122 = right_shift(%113, %114) /* ty=Tensor[(9, 15, 4), int64] */;
  %123 = subtract(%117, %118) /* ty=Tensor[(9, 15, 4), int32] */;
  %124 = @func_849(%120) /* ty=Tensor[(16, 3), float64] */;
  %125 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  (%121, %122, %123, %124, %var_1391, %125)
}

def @func_2565() -> (Tensor[(9, 15, 4), float64],) {
  %126 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  (%126,)
}

def @func_3185() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  @func_3183() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_2823() -> Tensor[(9, 15, 4), bool] {
  %134 = fn () -> Tensor[(9, 15, 4), bool] {
    %127 = @func_2776() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %128 = %127.0;
    %129 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
    %130 = cast(%129, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
    %131 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %132 = cast(%128, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
    %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%132, %133) /* ty=Tensor[(9, 15, 4), bool] */
  };
  %134() /* ty=Tensor[(9, 15, 4), bool] */
}

def @func_531() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %135 = @func_427() /* ty=Tensor[(9, 15, 4), float64] */;
  %136 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  (%135, %136)
}

def @func_2602() -> (Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %143 = fn () -> (Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
    %137 = @func_1931() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(15, 6, 7), uint8], Tensor[(630), uint8]) */;
    %138 = @func_2294() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %139 = @func_2565() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %140 = %137.3;
    %141 = %138.1;
    %142 = %139.0;
    (%140, %141, %142)
  };
  %143() /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_427() -> Tensor[(9, 15, 4), float64] {
  %144 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %144.2
}

def @func_6077() -> Tensor[(630), float64] {
  %145 = @func_2129() /* ty=(Tensor[(630), uint8],) */;
  %146 = %145.0;
  %147 = cast(%146, dtype="float64") /* ty=Tensor[(630), float64] */;
  rsqrt(%147) /* ty=Tensor[(630), float64] */
}

def @func_496() -> (Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) {
  %148 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %149 = %148.1;
  %150 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 15, 4), float64] */, dtype="uint64") /* ty=Tensor[(9, 15, 4), uint64] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="uint64") /* ty=Tensor[(9, 15, 4), uint64] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %154 = bitwise_xor(%152, %153) /* ty=Tensor[(9, 15, 4), uint64] */;
  %155 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  (%154, %155)
}

def @func_3965(%var_3964: Tensor[(6, 4, 15), float32]) -> Tensor[(6, 4, 15), float32] {
  %157 = fn (%var_3942: Tensor[(6, 4, 15), float32]) -> Tensor[(6, 4, 15), float32] {
    %156 = cast(%var_3942, dtype="float32") /* ty=Tensor[(6, 4, 15), float32] */;
    erf(%156) /* ty=Tensor[(6, 4, 15), float32] */
  };
  %157(%var_3964) /* ty=Tensor[(6, 4, 15), float32] */
}

def @func_4872() -> (Tensor[(9, 15, 4), float32], Tensor[(9, 15, 4), float32]) {
  %158 = @func_3920() /* ty=(Tensor[(9, 15, 4), float32],) */;
  %159 = @func_3920() /* ty=(Tensor[(9, 15, 4), float32],) */;
  %160 = %158.0;
  %161 = %159.0;
  (%160, %161)
}

def @func_1644(%var_1637: Tensor[(9, 2, 16), uint32]) -> Tensor[(9, 2, 16), bool] {
  %162 = cast(%var_1637, dtype="bool") /* ty=Tensor[(9, 2, 16), bool] */;
  %163 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(9, 2, 16), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %164 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 2, 16), uint32] */, dtype="bool") /* ty=Tensor[(9, 2, 16), bool] */;
  %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%164, %165) /* ty=Tensor[(9, 2, 16), bool] */
}

def @func_6079() -> Tensor[(630), float64] {
  @func_6077() /* ty=Tensor[(630), float64] */
}

def @func_5249() -> (Tensor[(9, 15, 4), float32],) {
  %166 = @func_3920() /* ty=(Tensor[(9, 15, 4), float32],) */;
  %167 = %166.0;
  (%167,)
}

def @func_3217() -> (Tensor[(9, 15, 4), float64],) {
  %170 = fn () -> (Tensor[(9, 15, 4), float64],) {
    %168 = @func_496() /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
    %169 = %168.1;
    (%169,)
  };
  %170() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_6274(%var_6252: Tensor[(390), uint16], %var_6254: Tensor[(600), int16]) -> (Tensor[(9, 15, 4), float64], Tensor[(12, 50), int16], Tensor[(390), uint16], Tensor[(60), int16], Tensor[(600), int16], Tensor[(20), float32], Tensor[(9, 15, 4), float64]) {
  %171 = @func_1298() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %172 = cast(%var_6252, dtype="uint16") /* ty=Tensor[(390), uint16] */;
  %173 = cast(meta[relay.Constant][9] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %174 = cast(%var_6254, dtype="int16") /* ty=Tensor[(600), int16] */;
  %175 = cast(meta[relay.Constant][10] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
  %176 = reshape(%172, newshape=[10, 13, 3]) /* ty=Tensor[(10, 13, 3), uint16] */;
  %177 = reshape(%173, newshape=[60]) /* ty=Tensor[(60), int16] */;
  %178 = reshape(%174, newshape=[12, 50]) /* ty=Tensor[(12, 50), int16] */;
  %179 = reshape(%175, newshape=[20]) /* ty=Tensor[(20), float32] */;
  %180 = @func_3269(%176, %177, %178, %179) /* ty=(Tensor[(10, 13, 3), uint16], Tensor[(10, 13, 3), float64], Tensor[(9, 15, 4), float64], Tensor[(60), int16], Tensor[(12, 50), int16], Tensor[(10, 2, 9), bool], Tensor[(20), float32], Tensor[(180), float64]) */;
  %181 = %171.1;
  %182 = %180.4;
  %183 = @func_5341() /* ty=Tensor[(9, 15, 4), float64] */;
  (%181, %182, %var_6252, meta[relay.Constant][9] /* ty=Tensor[(60), int16] */, %var_6254, meta[relay.Constant][10] /* ty=Tensor[(20), float32] */, %183)
}

def @func_2472() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float32], Tensor[(9, 15, 4), float64]) {
  %191 = fn () -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float32], Tensor[(9, 15, 4), float64]) {
    %184 = @func_1197() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %185 = @func_1828() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(390), uint64]) */;
    %186 = %185.0;
    %187 = cast(%186, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
    %188 = %184.1;
    %189 = tan(%187) /* ty=Tensor[(9, 15, 4), float32] */;
    %190 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
    (%188, %189, %190)
  };
  %191() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float32], Tensor[(9, 15, 4), float64]) */
}

def @func_2406() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %195 = fn () -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
    %192 = @func_2076() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %193 = @func_427() /* ty=Tensor[(9, 15, 4), float64] */;
    %194 = %192.1;
    (%193, %194)
  };
  %195() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_997(%var_995: Tensor[(16, 14, 4), float64], %var_996: Tensor[(16, 14, 4), float64]) -> (Tensor[(16, 14, 4), bool], Tensor[(9, 15, 4), float64]) {
  %207 = fn (%var_918: Tensor[(16, 14, 4), float64], %var_919: Tensor[(16, 14, 4), float64]) -> (Tensor[(16, 14, 4), bool], Tensor[(9, 15, 4), float64]) {
    %196 = cast(%var_919, dtype="float64") /* ty=Tensor[(16, 14, 4), float64] */;
    %197 = shape_of(%var_918, dtype="int32") /* ty=Tensor[(3), int32] */;
    %198 = cast(%var_918, dtype="float64") /* ty=Tensor[(16, 14, 4), float64] */;
    %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %200 = divide(%198, %199) /* ty=Tensor[(16, 14, 4), float64] */;
    %201 = cast(%var_919, dtype="bool") /* ty=Tensor[(16, 14, 4), bool] */;
    %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
    %203 = cast(%200, dtype="bool") /* ty=Tensor[(16, 14, 4), bool] */;
    %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %205 = not_equal(%203, %204) /* ty=Tensor[(16, 14, 4), bool] */;
    %206 = @func_427() /* ty=Tensor[(9, 15, 4), float64] */;
    (%205, %206)
  };
  %207(%var_995, %var_996) /* ty=(Tensor[(16, 14, 4), bool], Tensor[(9, 15, 4), float64]) */
}

def @func_5922(%var_5921: Tensor[(4, 15, 4), float64]) -> (Tensor[(4, 15, 4), float64],) {
  %210 = fn (%var_5916: Tensor[(4, 15, 4), float64]) -> (Tensor[(4, 15, 4), float64],) {
    %208 = cast(%var_5916, dtype="float64") /* ty=Tensor[(4, 15, 4), float64] */;
    %209 = atan(%208) /* ty=Tensor[(4, 15, 4), float64] */;
    (%209,)
  };
  %210(%var_5921) /* ty=(Tensor[(4, 15, 4), float64],) */
}

def @func_3000() -> (Tensor[(9, 15, 4), float64],) {
  %211 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %212 = %211.2;
  (%212,)
}

def @func_2077() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %217 = fn () -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
    %213 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %214 = @func_661() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %215 = %213.0;
    %216 = %214.1;
    (%215, %216)
  };
  %217() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_2509() -> (Tensor[(9, 15, 4), uint64],) {
  %218 = @func_496() /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
  %219 = %218.0;
  (%219,)
}

def @func_4158(%var_4156: Tensor[(600), int16], %var_4157: Tensor[(350), float64]) -> (Tensor[(9, 15, 4), float64], Tensor[(4, 4, 13), float32], Tensor[(208), float32], Tensor[(8, 56), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(60), int16], Tensor[(600), int16], Tensor[(9, 15, 4), float64], Tensor[(350), uint32], Tensor[(350), float32]) {
  @func_4154(%var_4156, %var_4157) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(4, 4, 13), float32], Tensor[(208), float32], Tensor[(8, 56), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(60), int16], Tensor[(600), int16], Tensor[(9, 15, 4), float64], Tensor[(350), uint32], Tensor[(350), float32]) */
}

def @func_2295() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %223 = fn () -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
    %220 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %221 = %220.1;
    %222 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
    (%221, %222)
  };
  %223() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_4283() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %228 = fn () -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
    %224 = @func_1166() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %225 = @func_3183() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %226 = %224.0;
    %227 = %225.0;
    (%226, %227)
  };
  %228() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_3562() -> (Tensor[(9, 15, 4), float64], Tensor[(10, 2, 15), float32], Tensor[(195, 2), uint64]) {
  %237 = fn () -> (Tensor[(9, 15, 4), float64], Tensor[(10, 2, 15), float32], Tensor[(195, 2), uint64]) {
    %229 = @func_661() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %230 = cast(meta[relay.Constant][11] /* ty=Tensor[(195, 2), uint64] */, dtype="uint64") /* ty=Tensor[(195, 2), uint64] */;
    %231 = %229.0;
    %232 = cast(%231, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
    %233 = reshape(%230, newshape=[390, 1]) /* ty=Tensor[(390, 1), uint64] */;
    %234 = reshape(%232, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
    %235 = @func_3364(%233, %234) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(1, 20), float32], Tensor[(390, 180), float32], Tensor[(9, 15, 4), uint64], Tensor[(7, 10, 5), float32], float32, Tensor[(350, 1), float32], Tensor[(9, 15, 4), float32]) */;
    %236 = %235.0;
    (%231, %236, meta[relay.Constant][11] /* ty=Tensor[(195, 2), uint64] */)
  };
  %237() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(10, 2, 15), float32], Tensor[(195, 2), uint64]) */
}

def @func_1167() -> (Tensor[(9, 15, 4), float64],) {
  %240 = fn () -> (Tensor[(9, 15, 4), float64],) {
    %238 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %239 = %238.1;
    (%239,)
  };
  %240() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_4958(%var_4952: Tensor[(7, 3, 2), float64]) -> (Tensor[(7, 3, 2), float64],) {
  %241 = cast(%var_4952, dtype="float64") /* ty=Tensor[(7, 3, 2), float64] */;
  %242 = erf(%241) /* ty=Tensor[(7, 3, 2), float64] */;
  (%242,)
}

def @func_5282() -> (Tensor[(9, 15, 4), float64],) {
  %243 = @func_2294() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %244 = %243.0;
  (%244,)
}

def @func_6278(%var_6276: Tensor[(390), uint16], %var_6277: Tensor[(600), int16]) -> (Tensor[(9, 15, 4), float64], Tensor[(12, 50), int16], Tensor[(390), uint16], Tensor[(60), int16], Tensor[(600), int16], Tensor[(20), float32], Tensor[(9, 15, 4), float64]) {
  @func_6274(%var_6276, %var_6277) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(12, 50), int16], Tensor[(390), uint16], Tensor[(60), int16], Tensor[(600), int16], Tensor[(20), float32], Tensor[(9, 15, 4), float64]) */
}

def @func_4051() -> Tensor[(9, 15, 4), float64] {
  @func_4049() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_1933() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(15, 6, 7), uint8], Tensor[(630), uint8]) {
  @func_1931() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(15, 6, 7), uint8], Tensor[(630), uint8]) */
}

def @func_4944(%var_4938: Tensor[(8, 11), float32]) -> (Tensor[(8, 11), float32],) {
  %245 = cast(%var_4938, dtype="float32") /* ty=Tensor[(8, 11), float32] */;
  %246 = sqrt(%245) /* ty=Tensor[(8, 11), float32] */;
  (%246,)
}

def @func_5765() -> (Tensor[(9, 15, 4), float64],) {
  %247 = @func_2405() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %248 = %247.1;
  (%248,)
}

def @func_1532(%var_1524: Tensor[(9, 15, 4), float64]) -> (Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) {
  %249 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  %250 = cast(%var_1524, dtype="uint64") /* ty=Tensor[(9, 15, 4), uint64] */;
  %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%249, dtype="uint64") /* ty=Tensor[(9, 15, 4), uint64] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %254 = multiply(%252, %253) /* ty=Tensor[(9, 15, 4), uint64] */;
  %255 = @func_449() /* ty=Tensor[(9, 15, 4), float64] */;
  (%254, %255)
}

def @func_1535(%var_1533: Tensor[(9, 15, 4), float64]) -> (Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) {
  @func_1532(%var_1533) /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */
}

def @func_5428(%var_5416: Tensor[(8, 56), float64], %var_5421: Tensor[(8, 56), float64]) -> (Tensor[(6, 4, 12), float32], Tensor[(4, 4, 13), float32], Tensor[(208), float32], Tensor[(9, 15, 4), float64], Tensor[(8, 56), uint8]) {
  %256 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 4, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 4, 12), float32] */;
  %257 = cast(meta[relay.Constant][13] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %258 = cast(%var_5416, dtype="float64") /* ty=Tensor[(8, 56), float64] */;
  %259 = reshape(%257, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float32] */;
  %260 = reshape(%258, newshape=[224, 2]) /* ty=Tensor[(224, 2), float64] */;
  %261 = @func_3699(%259, %260) /* ty=(Tensor[(4, 4, 13), float32], Tensor[(4, 8, 14), float32], Tensor[(224, 2), float64]) */;
  %262 = @func_2294() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %263 = cast(%var_5421, dtype="uint8") /* ty=Tensor[(8, 56), uint8] */;
  %264 = shape_of(%var_5416, dtype="int32") /* ty=Tensor[(2), int32] */;
  %265 = cast(%var_5416, dtype="uint8") /* ty=Tensor[(8, 56), uint8] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %267 = log2(%256) /* ty=Tensor[(6, 4, 12), float32] */;
  %268 = %261.0;
  %269 = %262.0;
  %270 = add(%265, %266) /* ty=Tensor[(8, 56), uint8] */;
  (%267, %268, meta[relay.Constant][13] /* ty=Tensor[(208), float32] */, %269, %270)
}

def @func_6463() -> Tensor[(9, 15, 4), float64] {
  @func_6461() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_1114(%var_1087: Tensor[(1, 5, 12), int16], %var_1088: Tensor[(10, 5, 12), int16]) -> (Tensor[(10, 5, 12), int16], Tensor[(9, 15, 4), float64], Tensor[(350), bool], Tensor[(350), float32], Tensor[(9, 15, 4), float64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) {
  %271 = cast(%var_1087, dtype="int16") /* ty=Tensor[(1, 5, 12), int16] */;
  %272 = cast(%var_1088, dtype="int16") /* ty=Tensor[(10, 5, 12), int16] */;
  %273 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %274 = cast(meta[relay.Constant][14] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %275 = reshape(%274, newshape=[350]) /* ty=Tensor[(350), float32] */;
  %276 = @func_750(%275) /* ty=(Tensor[(9, 15, 4), float64], float32, Tensor[(350), bool]) */;
  %277 = cast(meta[relay.Constant][15] /* ty=Tensor[(390), uint64] */, dtype="uint64") /* ty=Tensor[(390), uint64] */;
  %278 = reshape(%277, newshape=[390]) /* ty=Tensor[(390), uint64] */;
  %279 = @func_708(%278) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */;
  %280 = @func_793() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %281 = multiply(%271, %272) /* ty=Tensor[(10, 5, 12), int16] */;
  %282 = %273.1;
  %283 = %276.2;
  %284 = %279.3;
  %285 = %280.0;
  (%281, %282, %283, meta[relay.Constant][14] /* ty=Tensor[(350), float32] */, %284, meta[relay.Constant][15] /* ty=Tensor[(390), uint64] */, %285)
}

def @func_1863(%var_1862: Tensor[(9, 15, 4), float64]) -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %300 = fn (%var_1839: Tensor[(9, 15, 4), float64]) -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
    %286 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %287 = %286.0;
    %288 = cast(%var_1839, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
    %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
    %290 = cast(%287, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
    %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %292 = not_equal(%290, %291) /* ty=Tensor[(9, 15, 4), bool] */;
    %293 = cast(%var_1839, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
    %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
    %295 = cast(%292, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
    %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %297 = @func_717() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %298 = power(%295, %296) /* ty=Tensor[(9, 15, 4), float64] */;
    %299 = %297.0;
    (%298, %299)
  };
  %300(%var_1862) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_6431(%var_6430: float32) -> (Tensor[(12, 9, 4), float64], float32, Tensor[(350), float32], Tensor[(7, 10, 5), float32]) {
  %312 = fn (%var_6409: float32) -> (Tensor[(12, 9, 4), float64], float32, Tensor[(350), float32], Tensor[(7, 10, 5), float32]) {
    %301 = cast(%var_6409, dtype="float32") /* ty=float32 */;
    %302 = cast(meta[relay.Constant][16] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
    %303 = cast(meta[relay.Constant][16] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
    %304 = reshape(%301, newshape=[]) /* ty=float32 */;
    %305 = reshape(%302, newshape=[350]) /* ty=Tensor[(350), float32] */;
    %306 = reshape(%303, newshape=[350]) /* ty=Tensor[(350), float32] */;
    %307 = @func_598(%304, %305, %306) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(350), float32]) */;
    %308 = %307.1;
    %309 = cast(%308, dtype="float32") /* ty=Tensor[(7, 10, 5), float32] */;
    %310 = @func_1578() /* ty=Tensor[(12, 9, 4), float64] */;
    %311 = tan(%309) /* ty=Tensor[(7, 10, 5), float32] */;
    (%310, %var_6409, meta[relay.Constant][16] /* ty=Tensor[(350), float32] */, %311)
  };
  %312(%var_6430) /* ty=(Tensor[(12, 9, 4), float64], float32, Tensor[(350), float32], Tensor[(7, 10, 5), float32]) */
}

def @func_498() -> (Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) {
  @func_496() /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */
}

def @func_2511() -> (Tensor[(9, 15, 4), uint64],) {
  @func_2509() /* ty=(Tensor[(9, 15, 4), uint64],) */
}

def @func_3933() -> (Tensor[(630), uint8], Tensor[(9, 2, 16), bool], Tensor[(1, 288), uint32]) {
  @func_3931() /* ty=(Tensor[(630), uint8], Tensor[(9, 2, 16), bool], Tensor[(1, 288), uint32]) */
}

def @func_4874() -> (Tensor[(9, 15, 4), float32], Tensor[(9, 15, 4), float32]) {
  @func_4872() /* ty=(Tensor[(9, 15, 4), float32], Tensor[(9, 15, 4), float32]) */
}

def @func_4474(%var_4470: Tensor[(10, 14, 7), int32], %var_4471: Tensor[(10, 14, 7), int32], %var_4472: Tensor[(10, 14, 7), float64], %var_4473: Tensor[(10, 14, 7), float64]) -> (Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64], Tensor[(16, 14, 4), bool], Tensor[(896), float64], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), int64], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), float32], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), float32], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), uint8]) {
  %374 = fn (%var_4309: Tensor[(10, 14, 7), int32], %var_4310: Tensor[(10, 14, 7), int32], %var_4430: Tensor[(10, 14, 7), float64], %var_4456: Tensor[(10, 14, 7), float64]) -> (Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64], Tensor[(16, 14, 4), bool], Tensor[(896), float64], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), int64], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), float32], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), float32], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), uint8]) {
    %313 = @func_496() /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
    %314 = @func_1197() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %315 = cast(meta[relay.Constant][17] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %316 = cast(meta[relay.Constant][17] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %317 = reshape(%315, newshape=[16, 14, 4]) /* ty=Tensor[(16, 14, 4), float64] */;
    %318 = reshape(%316, newshape=[16, 14, 4]) /* ty=Tensor[(16, 14, 4), float64] */;
    %319 = @func_994(%317, %318) /* ty=(Tensor[(16, 14, 4), bool], Tensor[(9, 15, 4), float64]) */;
    %320 = cast(meta[relay.Constant][17] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %321 = @func_2294() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %322 = cast(%var_4309, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
    %323 = shape_of(%var_4310, dtype="int32") /* ty=Tensor[(3), int32] */;
    %324 = cast(%var_4310, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
    %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %326 = maximum(%324, %325) /* ty=Tensor[(10, 14, 7), float64] */;
    %327 = cast(%326, dtype="int64") /* ty=Tensor[(10, 14, 7), int64] */;
    %328 = shape_of(%var_4309, dtype="int32") /* ty=Tensor[(3), int32] */;
    %329 = cast(%var_4309, dtype="int64") /* ty=Tensor[(10, 14, 7), int64] */;
    %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %331 = @func_4058() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %332 = cast(%326, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
    %333 = sqrt(%332) /* ty=Tensor[(10, 14, 7), float64] */;
    %334 = cast(%var_4310, dtype="bool") /* ty=Tensor[(10, 14, 7), bool] */;
    %335 = shape_of(%var_4309, dtype="int32") /* ty=Tensor[(3), int32] */;
    %336 = cast(%var_4309, dtype="bool") /* ty=Tensor[(10, 14, 7), bool] */;
    %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %338 = less_equal(%336, %337) /* ty=Tensor[(10, 14, 7), bool] */;
    %339 = cast(%338, dtype="uint32") /* ty=Tensor[(10, 14, 7), uint32] */;
    %340 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
    %341 = cast(%333, dtype="uint32") /* ty=Tensor[(10, 14, 7), uint32] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %343 = right_shift(%341, %342) /* ty=Tensor[(10, 14, 7), uint32] */;
    %344 = cast(%343, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
    %345 = @func_4282() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %346 = cast(%var_4430, dtype="bool") /* ty=Tensor[(10, 14, 7), bool] */;
    %347 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
    %348 = cast(%333, dtype="bool") /* ty=Tensor[(10, 14, 7), bool] */;
    %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %350 = logical_and(%348, %349) /* ty=Tensor[(10, 14, 7), bool] */;
    %351 = cast(%326, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
    %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
    %353 = cast(%350, dtype="float32") /* ty=Tensor[(10, 14, 7), float32] */;
    %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %355 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %356 = cast(%333, dtype="float64") /* ty=Tensor[(10, 14, 7), float64] */;
    %357 = cosh(%356) /* ty=Tensor[(10, 14, 7), float64] */;
    %358 = cast(%var_4456, dtype="uint8") /* ty=Tensor[(10, 14, 7), uint8] */;
    %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(3), int32] */;
    %360 = cast(%357, dtype="uint8") /* ty=Tensor[(10, 14, 7), uint8] */;
    %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %362 = %313.0;
    %363 = %314.1;
    %364 = %319.0;
    %365 = sqrt(%320) /* ty=Tensor[(896), float64] */;
    %366 = %321.0;
    %367 = minimum(%329, %330) /* ty=Tensor[(10, 14, 7), int64] */;
    %368 = %331.0;
    %369 = log2(%344) /* ty=Tensor[(10, 14, 7), float32] */;
    %370 = %345.1;
    %371 = floor_divide(%353, %354) /* ty=Tensor[(10, 14, 7), float32] */;
    %372 = %355.1;
    %373 = add(%360, %361) /* ty=Tensor[(10, 14, 7), uint8] */;
    (%362, %363, %364, %365, %366, %367, %368, %369, %370, %371, %372, %373)
  };
  %374(%var_4470, %var_4471, %var_4472, %var_4473) /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64], Tensor[(16, 14, 4), bool], Tensor[(896), float64], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), int64], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), float32], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), float32], Tensor[(9, 15, 4), float64], Tensor[(10, 14, 7), uint8]) */
}

def @func_2771() -> Tensor[(9, 15, 4), uint64] {
  %375 = @func_2509() /* ty=(Tensor[(9, 15, 4), uint64],) */;
  %375.0
}

def @func_602(%var_599: float32, %var_600: Tensor[(350), float32], %var_601: Tensor[(350), float32]) -> (Tensor[(9, 15, 4), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(350), float32]) {
  %390 = fn (%var_583: float32, %var_584: Tensor[(350), float32], %var_586: Tensor[(350), float32]) -> (Tensor[(9, 15, 4), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(350), float32]) {
    %376 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %377 = cast(%var_583, dtype="float32") /* ty=float32 */;
    %378 = cast(%var_584, dtype="float32") /* ty=Tensor[(350), float32] */;
    %379 = reshape(%377, newshape=[]) /* ty=float32 */;
    %380 = reshape(%378, newshape=[7, 10, 5]) /* ty=Tensor[(7, 10, 5), float32] */;
    %381 = cast(%var_586, dtype="int32") /* ty=Tensor[(350), int32] */;
    %382 = shape_of(%var_584, dtype="int32") /* ty=Tensor[(1), int32] */;
    %383 = cast(%var_584, dtype="int32") /* ty=Tensor[(350), int32] */;
    %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?), int32] */;
    %385 = left_shift(%383, %384) /* ty=Tensor[(350), int32] */;
    %386 = cast(%385, dtype="float32") /* ty=Tensor[(350), float32] */;
    %387 = %376.0;
    %388 = @func_49(%379, %380) /* ty=Tensor[(7, 10, 5), float32] */;
    %389 = sinh(%386) /* ty=Tensor[(350), float32] */;
    (%387, %388, %var_583, %389)
  };
  %390(%var_599, %var_600, %var_601) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(350), float32]) */
}

def @func_386() -> Tensor[(9, 15, 4), float64] {
  @func_384() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_3568() -> (Tensor[(9, 15, 4), float64],) {
  @func_3566() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_3183() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %391 = @func_2865() /* ty=(Tensor[(9, 15, 4), uint16], Tensor[(9, 15, 4), float64]) */;
  %392 = %391.1;
  %393 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  (%392, %393)
}

def @func_718() -> (Tensor[(9, 15, 4), float64],) {
  %396 = fn () -> (Tensor[(9, 15, 4), float64],) {
    %394 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %395 = %394.1;
    (%395,)
  };
  %396() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_1197() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %397 = @func_717() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %398 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  %399 = %397.0;
  (%398, %399)
}

def @func_2357(%var_2355: float32, %var_2356: Tensor[(1, 350), float32]) -> (Tensor[(11, 14, 10), float64], Tensor[(11, 14, 10), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(1, 350), float32]) {
  %409 = fn (%var_2347: float32, %var_2348: Tensor[(1, 350), float32]) -> (Tensor[(11, 14, 10), float64], Tensor[(11, 14, 10), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(1, 350), float32]) {
    %400 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 14, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 14, 10), float64] */;
    %401 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 14, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 14, 10), float64] */;
    %402 = cast(%var_2347, dtype="float32") /* ty=float32 */;
    %403 = cast(%var_2348, dtype="float32") /* ty=Tensor[(1, 350), float32] */;
    %404 = reshape(%402, newshape=[]) /* ty=float32 */;
    %405 = reshape(%403, newshape=[7, 10, 5]) /* ty=Tensor[(7, 10, 5), float32] */;
    %406 = atan(%400) /* ty=Tensor[(11, 14, 10), float64] */;
    %407 = log10(%401) /* ty=Tensor[(11, 14, 10), float64] */;
    %408 = @func_49(%404, %405) /* ty=Tensor[(7, 10, 5), float32] */;
    (%406, %407, %408, %var_2347, %var_2348)
  };
  %409(%var_2355, %var_2356) /* ty=(Tensor[(11, 14, 10), float64], Tensor[(11, 14, 10), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(1, 350), float32]) */
}

def @func_4058() -> (Tensor[(9, 15, 4), float64],) {
  %410 = @func_2565() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %411 = %410.0;
  (%411,)
}

def @func_1580() -> Tensor[(12, 9, 4), float64] {
  @func_1578() /* ty=Tensor[(12, 9, 4), float64] */
}

def @func_3123() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) {
  @func_3121() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */
}

def @func_3378() -> (Tensor[(9, 15, 4), float64],) {
  @func_3376() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_358() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %415 = fn () -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
    %412 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
    %413 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
    %414 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
    (%412, %413, %414)
  };
  %415() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_384() -> Tensor[(9, 15, 4), float64] {
  %416 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %416.0
}

def @func_533() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_6441() -> (Tensor[(9, 15, 4), float64],) {
  %419 = fn () -> (Tensor[(9, 15, 4), float64],) {
    %417 = @func_3561() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(10, 2, 15), float32], Tensor[(195, 2), uint64]) */;
    %418 = %417.0;
    (%418,)
  };
  %419() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_49(%var_35: float32, %var_36: Tensor[(7, 10, 5), float32]) -> Tensor[(7, 10, 5), float32] {
  %420 = cast(%var_35, dtype="float32") /* ty=float32 */;
  %421 = cast(%var_36, dtype="float32") /* ty=Tensor[(7, 10, 5), float32] */;
  mod(%420, %421) /* ty=Tensor[(7, 10, 5), float32] */
}

def @func_5399() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), bool]) {
  @func_5397() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), bool]) */
}

def @func_3885(%var_3884: Tensor[(9, 15, 4), float64]) -> Tensor[(9, 15, 4), bool] {
  %428 = fn (%var_3877: Tensor[(9, 15, 4), float64]) -> Tensor[(9, 15, 4), bool] {
    %422 = @func_3183() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %423 = %422.0;
    %424 = cast(%var_3877, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
    %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
    %426 = cast(%423, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
    %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%426, %427) /* ty=Tensor[(9, 15, 4), bool] */
  };
  %428(%var_3884) /* ty=Tensor[(9, 15, 4), bool] */
}

def @func_793() -> (Tensor[(9, 15, 4), float64],) {
  %429 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  %430 = cast(%429, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %431 = erf(%430) /* ty=Tensor[(9, 15, 4), float64] */;
  (%431,)
}

def @func_1298() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %432 = @func_1166() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %433 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %434 = %432.0;
  %435 = %433.1;
  (%434, %435)
}

def @func_4721(%var_4718: float32, %var_4719: Tensor[(350), float32], %var_4720: Tensor[(390), uint64]) -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], float32, float32, Tensor[(350), float32], Tensor[(10, 2, 15), float32], Tensor[(20), float32], Tensor[(390), uint64], Tensor[(180), float64], Tensor[(9, 15, 4), float64]) {
  %457 = fn (%var_4691: float32, %var_4692: Tensor[(350), float32], %var_4703: Tensor[(390), uint64]) -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], float32, float32, Tensor[(350), float32], Tensor[(10, 2, 15), float32], Tensor[(20), float32], Tensor[(390), uint64], Tensor[(180), float64], Tensor[(9, 15, 4), float64]) {
    %436 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %437 = cast(%var_4691, dtype="float32") /* ty=float32 */;
    %438 = cast(%var_4692, dtype="float32") /* ty=Tensor[(350), float32] */;
    %439 = reshape(%437, newshape=[]) /* ty=float32 */;
    %440 = reshape(%438, newshape=[1, 350]) /* ty=Tensor[(1, 350), float32] */;
    %441 = @func_2354(%439, %440) /* ty=(Tensor[(11, 14, 10), float64], Tensor[(11, 14, 10), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(1, 350), float32]) */;
    %442 = cast(meta[relay.Constant][19] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
    %443 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
    %444 = cast(%443, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
    %445 = cast(%var_4703, dtype="uint64") /* ty=Tensor[(390), uint64] */;
    %446 = cast(meta[relay.Constant][20] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %447 = reshape(%442, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
    %448 = reshape(%444, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
    %449 = reshape(%445, newshape=[65, 6]) /* ty=Tensor[(65, 6), uint64] */;
    %450 = reshape(%446, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
    %451 = @func_1802(%447, %448, %449, %450) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(9, 15, 4), int8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(65, 6), uint64], Tensor[(9, 15, 4), float64], Tensor[(10, 2, 9), bool]) */;
    %452 = @func_2601() /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %453 = %436.2;
    %454 = %441.3;
    %455 = %451.0;
    %456 = %452.1;
    (%443, %453, %454, %var_4691, %var_4692, %455, meta[relay.Constant][19] /* ty=Tensor[(20), float32] */, %var_4703, meta[relay.Constant][20] /* ty=Tensor[(180), float64] */, %456)
  };
  %457(%var_4718, %var_4719, %var_4720) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], float32, float32, Tensor[(350), float32], Tensor[(10, 2, 15), float32], Tensor[(20), float32], Tensor[(390), uint64], Tensor[(180), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_5341() -> Tensor[(9, 15, 4), float64] {
  %458 = @func_3000() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %458.0
}

def @func_3072(%var_3071: Tensor[(9, 15, 4), float64]) -> (Tensor[(9, 15, 4), bool], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float32]) {
  %469 = fn (%var_3057: Tensor[(9, 15, 4), float64]) -> (Tensor[(9, 15, 4), bool], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float32]) {
    %459 = @func_449() /* ty=Tensor[(9, 15, 4), float64] */;
    %460 = cast(%var_3057, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
    %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
    %462 = cast(%459, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
    %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %464 = @func_1166() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %465 = cast(%var_3057, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
    %466 = greater_equal(%462, %463) /* ty=Tensor[(9, 15, 4), bool] */;
    %467 = %464.0;
    %468 = asin(%465) /* ty=Tensor[(9, 15, 4), float32] */;
    (%466, %467, %468)
  };
  %469(%var_3071) /* ty=(Tensor[(9, 15, 4), bool], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float32]) */
}

def @func_3516() -> (Tensor[(9, 15, 4), float64],) {
  %470 = @func_1166() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %471 = %470.0;
  (%471,)
}

def @func_3121() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) {
  %472 = @func_1433() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %473 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  %474 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 15, 4), float64] */, dtype="uint64") /* ty=Tensor[(9, 15, 4), uint64] */;
  %475 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%473, dtype="uint64") /* ty=Tensor[(9, 15, 4), uint64] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %478 = @func_793() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %479 = %472.0;
  %480 = logical_xor(%476, %477) /* ty=Tensor[(9, 15, 4), uint64] */;
  %481 = %478.0;
  (%479, %480, %481)
}

def @func_1407(%var_1405: Tensor[(9, 15, 4), uint64], %var_1406: Tensor[(48), float64]) -> (Tensor[(9, 15, 4), uint8], Tensor[(9, 15, 4), int64], Tensor[(9, 15, 4), int32], Tensor[(16, 3), float64], Tensor[(48), float64], Tensor[(9, 15, 4), float64]) {
  @func_1403(%var_1405, %var_1406) /* ty=(Tensor[(9, 15, 4), uint8], Tensor[(9, 15, 4), int64], Tensor[(9, 15, 4), int32], Tensor[(16, 3), float64], Tensor[(48), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_3368(%var_3366: Tensor[(390, 1), uint64], %var_3367: Tensor[(9, 15, 4), float64]) -> (Tensor[(10, 2, 15), float32], Tensor[(1, 20), float32], Tensor[(390, 180), float32], Tensor[(9, 15, 4), uint64], Tensor[(7, 10, 5), float32], float32, Tensor[(350, 1), float32], Tensor[(9, 15, 4), float32]) {
  @func_3364(%var_3366, %var_3367) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(1, 20), float32], Tensor[(390, 180), float32], Tensor[(9, 15, 4), uint64], Tensor[(7, 10, 5), float32], float32, Tensor[(350, 1), float32], Tensor[(9, 15, 4), float32]) */
}

def @func_2020() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %482 = @func_1875() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %483 = %482.0;
  %484 = cast(%483, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %485 = reshape(%484, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
  %486 = @func_1532(%485) /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
  %487 = %486.1;
  (%483, %487)
}

def @func_239(%var_229: Tensor[(13, 3, 10), uint64]) -> (Tensor[(13, 3, 10), uint64],) {
  %488 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 3, 10), uint64] */, dtype="uint64") /* ty=Tensor[(13, 3, 10), uint64] */;
  %489 = shape_of(%var_229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%var_229, dtype="uint64") /* ty=Tensor[(13, 3, 10), uint64] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %492 = logical_xor(%490, %491) /* ty=Tensor[(13, 3, 10), uint64] */;
  (%492,)
}

def @func_1149() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  @func_1147() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_451() -> Tensor[(9, 15, 4), float64] {
  @func_449() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_2722(%var_2720: Tensor[(4, 8, 14), float64]) -> (Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(4, 8, 14), float32], Tensor[(4, 8, 14), float32]) {
  @func_2719(%var_2720) /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(4, 8, 14), float32], Tensor[(4, 8, 14), float32]) */
}

def @func_449() -> Tensor[(9, 15, 4), float64] {
  @func_384() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_3037() -> Tensor[(3, 7, 13), float32] {
  %494 = fn () -> Tensor[(3, 7, 13), float32] {
    %493 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 7, 13), float32] */;
    log2(%493) /* ty=Tensor[(3, 7, 13), float32] */
  };
  %494() /* ty=Tensor[(3, 7, 13), float32] */
}

def @func_4790() -> (Tensor[(9, 15, 4), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float32]) {
  @func_4788() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float32]) */
}

def @func_711(%var_709: Tensor[(390), uint64]) -> (Tensor[(9, 15, 4), float64], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) {
  @func_708(%var_709) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */
}

def @func_3518() -> (Tensor[(9, 15, 4), float64],) {
  @func_3516() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_3796(%var_3795: Tensor[(9, 15, 4), float64]) -> Tensor[(9, 15, 4), bool] {
  %501 = fn (%var_3769: Tensor[(9, 15, 4), float64]) -> Tensor[(9, 15, 4), bool] {
    %495 = @func_1298() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %496 = %495.1;
    %497 = cast(%var_3769, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
    %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
    %499 = cast(%496, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
    %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%499, %500) /* ty=Tensor[(9, 15, 4), bool] */
  };
  %501(%var_3795) /* ty=Tensor[(9, 15, 4), bool] */
}

def @func_1829() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(390), uint64]) {
  %507 = fn () -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(390), uint64]) {
    %502 = cast(meta[relay.Constant][24] /* ty=Tensor[(390), uint64] */, dtype="uint64") /* ty=Tensor[(390), uint64] */;
    %503 = reshape(%502, newshape=[390]) /* ty=Tensor[(390), uint64] */;
    %504 = @func_708(%503) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */;
    %505 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
    %506 = %504.0;
    (%505, %506, meta[relay.Constant][24] /* ty=Tensor[(390), uint64] */)
  };
  %507() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(390), uint64]) */
}

def @func_3156(%var_3155: Tensor[(14, 2, 12), float32]) -> (Tensor[(14, 2, 12), float64],) {
  %512 = fn (%var_3130: Tensor[(14, 2, 12), float32]) -> (Tensor[(14, 2, 12), float64],) {
    %508 = cast(%var_3130, dtype="float32") /* ty=Tensor[(14, 2, 12), float32] */;
    %509 = cos(%508) /* ty=Tensor[(14, 2, 12), float32] */;
    %510 = cast(%509, dtype="float64") /* ty=Tensor[(14, 2, 12), float64] */;
    %511 = rsqrt(%510) /* ty=Tensor[(14, 2, 12), float64] */;
    (%511,)
  };
  %512(%var_3155) /* ty=(Tensor[(14, 2, 12), float64],) */
}

def @func_4961(%var_4959: Tensor[(7, 3, 2), float64]) -> (Tensor[(7, 3, 2), float64],) {
  @func_4958(%var_4959) /* ty=(Tensor[(7, 3, 2), float64],) */
}

def @func_5251() -> (Tensor[(9, 15, 4), float32],) {
  @func_5249() /* ty=(Tensor[(9, 15, 4), float32],) */
}

def @func_5767() -> (Tensor[(9, 15, 4), float64],) {
  @func_5765() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_6461() -> Tensor[(9, 15, 4), float64] {
  @func_5231() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_1876() -> (Tensor[(9, 15, 4), float64],) {
  %514 = fn () -> (Tensor[(9, 15, 4), float64],) {
    %513 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
    (%513,)
  };
  %514() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_6476() -> Tensor[(9, 15, 4), float64] {
  %515 = fn () -> Tensor[(9, 15, 4), float64] {
    @func_6461() /* ty=Tensor[(9, 15, 4), float64] */
  };
  %515() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_5343() -> Tensor[(9, 15, 4), float64] {
  @func_5341() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_2776() -> (Tensor[(9, 15, 4), float64],) {
  %516 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  (%516,)
}

def @func_5052() -> (Tensor[(9, 15, 4), float64],) {
  @func_5050() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_53(%var_51: float32, %var_52: Tensor[(7, 10, 5), float32]) -> Tensor[(7, 10, 5), float32] {
  @func_49(%var_51, %var_52) /* ty=Tensor[(7, 10, 5), float32] */
}

def @func_5197() -> Tensor[(9, 15, 4), float64] {
  %517 = @func_5050() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %517.0
}

def @func_1602(%var_1600: Tensor[(15, 6, 7), uint8], %var_1601: Tensor[(15, 6, 7), uint8]) -> (Tensor[(15, 6, 7), uint8],) {
  %523 = fn (%var_1593: Tensor[(15, 6, 7), uint8], %var_1594: Tensor[(15, 6, 7), uint8]) -> (Tensor[(15, 6, 7), uint8],) {
    %518 = cast(%var_1594, dtype="uint8") /* ty=Tensor[(15, 6, 7), uint8] */;
    %519 = shape_of(%var_1593, dtype="int32") /* ty=Tensor[(3), int32] */;
    %520 = cast(%var_1593, dtype="uint8") /* ty=Tensor[(15, 6, 7), uint8] */;
    %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %522 = bitwise_xor(%520, %521) /* ty=Tensor[(15, 6, 7), uint8] */;
    (%522,)
  };
  %523(%var_1600, %var_1601) /* ty=(Tensor[(15, 6, 7), uint8],) */
}

def @func_4049() -> Tensor[(9, 15, 4), float64] {
  @func_328() /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_5087() -> (Tensor[(9, 15, 4), float64],) {
  @func_5085() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_2773() -> Tensor[(9, 15, 4), uint64] {
  @func_2771() /* ty=Tensor[(9, 15, 4), uint64] */
}

def @func_3269(%var_3226: Tensor[(10, 13, 3), uint16], %var_3244: Tensor[(60), int16], %var_3245: Tensor[(12, 50), int16], %var_3260: Tensor[(20), float32]) -> (Tensor[(10, 13, 3), uint16], Tensor[(10, 13, 3), float64], Tensor[(9, 15, 4), float64], Tensor[(60), int16], Tensor[(12, 50), int16], Tensor[(10, 2, 9), bool], Tensor[(20), float32], Tensor[(180), float64]) {
  %524 = cast(%var_3226, dtype="uint16") /* ty=Tensor[(10, 13, 3), uint16] */;
  %525 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(10, 13, 3), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 13, 3), uint16] */, dtype="uint16") /* ty=Tensor[(10, 13, 3), uint16] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %528 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 13, 3), uint16] */, dtype="float64") /* ty=Tensor[(10, 13, 3), float64] */;
  %529 = exp(%528) /* ty=Tensor[(10, 13, 3), float64] */;
  %530 = cast(%529, dtype="float64") /* ty=Tensor[(10, 13, 3), float64] */;
  %531 = cast(%var_3244, dtype="int16") /* ty=Tensor[(60), int16] */;
  %532 = cast(%var_3245, dtype="int16") /* ty=Tensor[(12, 50), int16] */;
  %533 = reshape(%531, newshape=[1, 5, 12]) /* ty=Tensor[(1, 5, 12), int16] */;
  %534 = reshape(%532, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), int16] */;
  %535 = @func_1114(%533, %534) /* ty=(Tensor[(10, 5, 12), int16], Tensor[(9, 15, 4), float64], Tensor[(350), bool], Tensor[(350), float32], Tensor[(9, 15, 4), float64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */;
  %536 = cast(%var_3260, dtype="float32") /* ty=Tensor[(20), float32] */;
  %537 = %535.4;
  %538 = cast(%537, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %539 = acos(%530) /* ty=Tensor[(10, 13, 3), float64] */;
  %540 = cast(%539, dtype="uint64") /* ty=Tensor[(10, 13, 3), uint64] */;
  %541 = cast(meta[relay.Constant][26] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %542 = reshape(%536, newshape=[10, 2, 1]) /* ty=Tensor[(10, 2, 1), float32] */;
  %543 = reshape(%538, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
  %544 = reshape(%540, newshape=[65, 6]) /* ty=Tensor[(65, 6), uint64] */;
  %545 = reshape(%541, newshape=[10, 2, 9]) /* ty=Tensor[(10, 2, 9), float64] */;
  %546 = @func_1802(%542, %543, %544, %545) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(9, 15, 4), int8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(65, 6), uint64], Tensor[(9, 15, 4), float64], Tensor[(10, 2, 9), bool]) */;
  %547 = bitwise_xor(%526, %527) /* ty=Tensor[(10, 13, 3), uint16] */;
  %548 = %546.6;
  (%547, %539, %537, %var_3244, %var_3245, %548, %var_3260, meta[relay.Constant][26] /* ty=Tensor[(180), float64] */)
}

def @func_663() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  @func_661() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_6328() -> (Tensor[(9, 15, 4), bool], Tensor[(9, 15, 4), float64]) {
  %553 = fn () -> (Tensor[(9, 15, 4), bool], Tensor[(9, 15, 4), float64]) {
    %549 = @func_5397() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), bool]) */;
    %550 = @func_2601() /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %551 = %549.1;
    %552 = %550.1;
    (%551, %552)
  };
  %553() /* ty=(Tensor[(9, 15, 4), bool], Tensor[(9, 15, 4), float64]) */
}

def @func_1066(%var_1065: Tensor[(390), uint64]) -> (Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float32], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64]) {
  %564 = fn (%var_1051: Tensor[(390), uint64]) -> (Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float32], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64]) {
    %554 = @func_496() /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float64]) */;
    %555 = @func_717() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %556 = %555.0;
    %557 = cast(%556, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
    %558 = cast(%var_1051, dtype="uint64") /* ty=Tensor[(390), uint64] */;
    %559 = reshape(%558, newshape=[390]) /* ty=Tensor[(390), uint64] */;
    %560 = @func_708(%559) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */;
    %561 = %554.0;
    %562 = sqrt(%557) /* ty=Tensor[(9, 15, 4), float32] */;
    %563 = %560.1;
    (%561, %562, %563, %var_1051)
  };
  %564(%var_1065) /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float32], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64]) */
}

def @func_708(%var_689: Tensor[(390), uint64]) -> (Tensor[(9, 15, 4), float64], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) {
  %565 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %566 = %565.0;
  %567 = cast(%566, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
  %568 = acos(%567) /* ty=Tensor[(9, 15, 4), float32] */;
  %569 = cast(%566, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %573 = cast(%var_689, dtype="uint64") /* ty=Tensor[(390), uint64] */;
  %574 = reshape(%573, newshape=[13, 3, 10]) /* ty=Tensor[(13, 3, 10), uint64] */;
  %575 = @func_239(%574) /* ty=(Tensor[(13, 3, 10), uint64],) */;
  %576 = floor_mod(%571, %572) /* ty=Tensor[(9, 15, 4), float64] */;
  %577 = %575.0;
  %578 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  (%576, %577, %var_689, %578)
}

def @func_752(%var_751: Tensor[(350), float32]) -> (Tensor[(9, 15, 4), float64], float32, Tensor[(350), bool]) {
  %592 = fn (%var_735: Tensor[(350), float32]) -> (Tensor[(9, 15, 4), float64], float32, Tensor[(350), bool]) {
    %579 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %580 = cast(3.31404f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %581 = cast(%var_735, dtype="float32") /* ty=Tensor[(350), float32] */;
    %582 = cast(%var_735, dtype="float32") /* ty=Tensor[(350), float32] */;
    %583 = reshape(%580, newshape=[]) /* ty=float32 */;
    %584 = reshape(%581, newshape=[350]) /* ty=Tensor[(350), float32] */;
    %585 = reshape(%582, newshape=[350]) /* ty=Tensor[(350), float32] */;
    %586 = @func_598(%583, %584, %585) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(350), float32]) */;
    %587 = cast(3.31404f /* ty=float32 */, dtype="bool") /* ty=bool */;
    %588 = cast(%var_735, dtype="bool") /* ty=Tensor[(350), bool] */;
    %589 = %579.0;
    %590 = %586.2;
    %591 = greater_equal(%587, %588) /* ty=Tensor[(350), bool] */;
    (%589, %590, %591)
  };
  %592(%var_751) /* ty=(Tensor[(9, 15, 4), float64], float32, Tensor[(350), bool]) */
}

def @func_4246(%var_4220: Tensor[(390), uint64]) -> (Tensor[(12, 9, 4), float32], Tensor[(9, 15, 4), float32], Tensor[(390), uint64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %593 = @func_1578() /* ty=Tensor[(12, 9, 4), float64] */;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(12, 9, 4), float32] */;
  %595 = cast(%var_4220, dtype="uint64") /* ty=Tensor[(390), uint64] */;
  %596 = reshape(%595, newshape=[390]) /* ty=Tensor[(390), uint64] */;
  %597 = @func_1064(%596) /* ty=(Tensor[(9, 15, 4), uint64], Tensor[(9, 15, 4), float32], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64]) */;
  %598 = @func_1166() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %599 = erf(%594) /* ty=Tensor[(12, 9, 4), float32] */;
  %600 = %597.1;
  %601 = %598.0;
  %602 = @func_449() /* ty=Tensor[(9, 15, 4), float64] */;
  (%599, %600, %var_4220, %601, %602)
}

def @func_795() -> (Tensor[(9, 15, 4), float64],) {
  @func_793() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_5881(%var_5880: float32) -> (Tensor[(9, 15, 4), float32], Tensor[(9, 15, 4), float64], Tensor[(11, 14, 10), float64], float32, Tensor[(350), float32]) {
  %620 = fn (%var_5868: float32) -> (Tensor[(9, 15, 4), float32], Tensor[(9, 15, 4), float64], Tensor[(11, 14, 10), float64], float32, Tensor[(350), float32]) {
    %603 = @func_5085() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %604 = %603.0;
    %605 = @func_4282() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %606 = %605.1;
    %607 = cast(%606, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
    %608 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
    %609 = cast(%604, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
    %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %611 = @func_1433() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
    %612 = cast(%var_5868, dtype="float32") /* ty=float32 */;
    %613 = cast(meta[relay.Constant][27] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
    %614 = reshape(%612, newshape=[]) /* ty=float32 */;
    %615 = reshape(%613, newshape=[1, 350]) /* ty=Tensor[(1, 350), float32] */;
    %616 = @func_2354(%614, %615) /* ty=(Tensor[(11, 14, 10), float64], Tensor[(11, 14, 10), float64], Tensor[(7, 10, 5), float32], float32, Tensor[(1, 350), float32]) */;
    %617 = divide(%609, %610) /* ty=Tensor[(9, 15, 4), float32] */;
    %618 = %611.1;
    %619 = %616.1;
    (%617, %618, %619, %var_5868, meta[relay.Constant][27] /* ty=Tensor[(350), float32] */)
  };
  %620(%var_5880) /* ty=(Tensor[(9, 15, 4), float32], Tensor[(9, 15, 4), float64], Tensor[(11, 14, 10), float64], float32, Tensor[(350), float32]) */
}

def @func_4947(%var_4945: Tensor[(8, 11), float32]) -> (Tensor[(8, 11), float32],) {
  @func_4944(%var_4945) /* ty=(Tensor[(8, 11), float32],) */
}

def @func_5085() -> (Tensor[(9, 15, 4), float64],) {
  %621 = @func_661() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %622 = %621.0;
  (%622,)
}

def @func_3702(%var_3700: Tensor[(4, 4, 13), float32], %var_3701: Tensor[(224, 2), float64]) -> (Tensor[(4, 4, 13), float32], Tensor[(4, 8, 14), float32], Tensor[(224, 2), float64]) {
  %629 = fn (%var_3688: Tensor[(4, 4, 13), float32], %var_3697: Tensor[(224, 2), float64]) -> (Tensor[(4, 4, 13), float32], Tensor[(4, 8, 14), float32], Tensor[(224, 2), float64]) {
    %623 = cast(%var_3688, dtype="float32") /* ty=Tensor[(4, 4, 13), float32] */;
    %624 = cast(%var_3697, dtype="float64") /* ty=Tensor[(224, 2), float64] */;
    %625 = reshape(%624, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), float64] */;
    %626 = @func_2719(%625) /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(4, 8, 14), float32], Tensor[(4, 8, 14), float32]) */;
    %627 = exp(%623) /* ty=Tensor[(4, 4, 13), float32] */;
    %628 = %626.3;
    (%627, %628, %var_3697)
  };
  %629(%var_3700, %var_3701) /* ty=(Tensor[(4, 4, 13), float32], Tensor[(4, 8, 14), float32], Tensor[(224, 2), float64]) */
}

def @func_5284() -> (Tensor[(9, 15, 4), float64],) {
  @func_5282() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_6544() -> Tensor[(13, 4, 5), float64] {
  %631 = fn () -> Tensor[(13, 4, 5), float64] {
    %630 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 4, 5), float64] */, dtype="float64") /* ty=Tensor[(13, 4, 5), float64] */;
    asin(%630) /* ty=Tensor[(13, 4, 5), float64] */
  };
  %631() /* ty=Tensor[(13, 4, 5), float64] */
}

def @func_1491() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %638 = fn () -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
    %632 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
    %633 = cast(%632, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
    %634 = exp(%633) /* ty=Tensor[(9, 15, 4), float32] */;
    %635 = cast(%634, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
    %636 = log(%635) /* ty=Tensor[(9, 15, 4), float64] */;
    %637 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
    (%636, %637)
  };
  %638() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */
}

def @func_1578() -> Tensor[(12, 9, 4), float64] {
  %639 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 9, 4), float32] */, dtype="float32") /* ty=Tensor[(12, 9, 4), float32] */;
  %640 = sigmoid(%639) /* ty=Tensor[(12, 9, 4), float32] */;
  %641 = cast(%640, dtype="float64") /* ty=Tensor[(12, 9, 4), float64] */;
  sinh(%641) /* ty=Tensor[(12, 9, 4), float64] */
}

def @func_1073() -> (Tensor[(9, 15, 4), float64],) {
  %643 = fn () -> (Tensor[(9, 15, 4), float64],) {
    %642 = @func_449() /* ty=Tensor[(9, 15, 4), float64] */;
    (%642,)
  };
  %643() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_4788() -> (Tensor[(9, 15, 4), float64], Tensor[(14, 2, 12), float64], Tensor[(336), float32]) {
  %644 = @func_4058() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %645 = cast(meta[relay.Constant][30] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %646 = reshape(%645, newshape=[14, 2, 12]) /* ty=Tensor[(14, 2, 12), float32] */;
  %647 = @func_3154(%646) /* ty=(Tensor[(14, 2, 12), float64],) */;
  %648 = %644.0;
  %649 = %647.0;
  (%648, %649, meta[relay.Constant][30] /* ty=Tensor[(336), float32] */)
}

def @func_1147() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %650 = @func_793() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %651 = @func_793() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %652 = %651.0;
  %653 = cast(%652, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %654 = %650.0;
  %655 = sinh(%653) /* ty=Tensor[(9, 15, 4), float64] */;
  %656 = @func_384() /* ty=Tensor[(9, 15, 4), float64] */;
  (%654, %655, %656)
}

def @main(%var_6624: Tensor[(15, 2, 16), int32], %var_6654: Tensor[(9, 15, 4), float64]) -> (Tensor[(15, 2, 16), int32], Tensor[(630), uint8], Tensor[(9, 15, 4), bool]) {
  %657 = cast(5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %658 = cast(%var_6624, dtype="int32") /* ty=Tensor[(15, 2, 16), int32] */;
  %659 = @func_2131() /* ty=(Tensor[(630), uint8],) */;
  %660 = @func_1167() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %661 = %660.0;
  %662 = cast(%var_6654, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%661, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %666 = add(%657, %658) /* ty=Tensor[(15, 2, 16), int32] */;
  %667 = %659.0;
  %668 = logical_and(%664, %665) /* ty=Tensor[(9, 15, 4), bool] */;
  (%666, %667, %668)
}

def @func_3002() -> (Tensor[(9, 15, 4), float64],) {
  @func_3000() /* ty=(Tensor[(9, 15, 4), float64],) */
}

def @func_1118(%var_1116: Tensor[(1, 5, 12), int16], %var_1117: Tensor[(10, 5, 12), int16]) -> (Tensor[(10, 5, 12), int16], Tensor[(9, 15, 4), float64], Tensor[(350), bool], Tensor[(350), float32], Tensor[(9, 15, 4), float64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) {
  @func_1114(%var_1116, %var_1117) /* ty=(Tensor[(10, 5, 12), int16], Tensor[(9, 15, 4), float64], Tensor[(350), bool], Tensor[(350), float32], Tensor[(9, 15, 4), float64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */
}

def @func_4011(%var_4010: Tensor[(3, 7, 13), float32]) -> (Tensor[(9, 15, 4), float64], Tensor[(3, 7, 13), float32]) {
  %677 = fn (%var_3989: Tensor[(3, 7, 13), float32]) -> (Tensor[(9, 15, 4), float64], Tensor[(3, 7, 13), float32]) {
    %669 = @func_2776() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %670 = @func_3036() /* ty=Tensor[(3, 7, 13), float32] */;
    %671 = cast(%var_3989, dtype="float32") /* ty=Tensor[(3, 7, 13), float32] */;
    %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
    %673 = cast(%670, dtype="float32") /* ty=Tensor[(3, 7, 13), float32] */;
    %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %675 = %669.0;
    %676 = multiply(%673, %674) /* ty=Tensor[(3, 7, 13), float32] */;
    (%675, %676)
  };
  %677(%var_4010) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(3, 7, 13), float32]) */
}

def @func_328() -> Tensor[(9, 15, 4), float64] {
  %678 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  sigmoid(%678) /* ty=Tensor[(9, 15, 4), float64] */
}

def @func_2866() -> (Tensor[(9, 15, 4), uint16], Tensor[(9, 15, 4), float64]) {
  %689 = fn () -> (Tensor[(9, 15, 4), uint16], Tensor[(9, 15, 4), float64]) {
    %679 = @func_427() /* ty=Tensor[(9, 15, 4), float64] */;
    %680 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 15, 4), float64] */, dtype="uint16") /* ty=Tensor[(9, 15, 4), uint16] */;
    %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
    %682 = cast(%679, dtype="uint16") /* ty=Tensor[(9, 15, 4), uint16] */;
    %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %684 = cast(%679, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
    %685 = sin(%684) /* ty=Tensor[(9, 15, 4), float64] */;
    %686 = cast(%685, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
    %687 = minimum(%682, %683) /* ty=Tensor[(9, 15, 4), uint16] */;
    %688 = cos(%686) /* ty=Tensor[(9, 15, 4), float64] */;
    (%687, %688)
  };
  %689() /* ty=(Tensor[(9, 15, 4), uint16], Tensor[(9, 15, 4), float64]) */
}

def @func_3931() -> (Tensor[(630), uint8], Tensor[(9, 2, 16), bool], Tensor[(1, 288), uint32]) {
  %690 = @func_2601() /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %691 = cast(meta[relay.Constant][33] /* ty=Tensor[(1, 288), uint32] */, dtype="uint32") /* ty=Tensor[(1, 288), uint32] */;
  %692 = reshape(%691, newshape=[9, 2, 16]) /* ty=Tensor[(9, 2, 16), uint32] */;
  %693 = %690.0;
  %694 = @func_1644(%692) /* ty=Tensor[(9, 2, 16), bool] */;
  (%693, %694, meta[relay.Constant][33] /* ty=Tensor[(1, 288), uint32] */)
}

def @func_3566() -> (Tensor[(9, 15, 4), float64],) {
  %695 = @func_357() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %696 = %695.0;
  (%696,)
}

def @func_4651(%var_4639: Tensor[(14, 5, 4), float32]) -> (Tensor[(14, 5, 4), float32],) {
  %697 = cast(%var_4639, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
  %698 = acosh(%697) /* ty=Tensor[(14, 5, 4), float32] */;
  (%698,)
}

def @func_3921() -> (Tensor[(9, 15, 4), float32],) {
  %703 = fn () -> (Tensor[(9, 15, 4), float32],) {
    %699 = @func_1875() /* ty=(Tensor[(9, 15, 4), float64],) */;
    %700 = %699.0;
    %701 = cast(%700, dtype="float32") /* ty=Tensor[(9, 15, 4), float32] */;
    %702 = atan(%701) /* ty=Tensor[(9, 15, 4), float32] */;
    (%702,)
  };
  %703() /* ty=(Tensor[(9, 15, 4), float32],) */
}

def @func_242(%var_240: Tensor[(13, 3, 10), uint64]) -> (Tensor[(13, 3, 10), uint64],) {
  @func_239(%var_240) /* ty=(Tensor[(13, 3, 10), uint64],) */
}

def @func_1931() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(15, 6, 7), uint8], Tensor[(630), uint8]) {
  %704 = @func_717() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %705 = @func_1490() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %706 = cast(meta[relay.Constant][34] /* ty=Tensor[(630), uint8] */, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %707 = cast(meta[relay.Constant][34] /* ty=Tensor[(630), uint8] */, dtype="uint8") /* ty=Tensor[(630), uint8] */;
  %708 = reshape(%706, newshape=[15, 6, 7]) /* ty=Tensor[(15, 6, 7), uint8] */;
  %709 = reshape(%707, newshape=[15, 6, 7]) /* ty=Tensor[(15, 6, 7), uint8] */;
  %710 = @func_1599(%708, %709) /* ty=(Tensor[(15, 6, 7), uint8],) */;
  %711 = %704.0;
  %712 = %705.1;
  %713 = %710.0;
  (%711, %712, %713, meta[relay.Constant][34] /* ty=Tensor[(630), uint8] */)
}

def @func_2129() -> (Tensor[(630), uint8],) {
  %714 = @func_1931() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(15, 6, 7), uint8], Tensor[(630), uint8]) */;
  %715 = %714.3;
  (%715,)
}

def @func_661() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) {
  %716 = @func_449() /* ty=Tensor[(9, 15, 4), float64] */;
  %717 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  (%716, %717)
}

def @func_852(%var_850: Tensor[(16, 3), float64]) -> Tensor[(16, 3), float64] {
  @func_849(%var_850) /* ty=Tensor[(16, 3), float64] */
}

def @func_2719(%var_2683: Tensor[(4, 8, 14), float64]) -> (Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(4, 8, 14), float32], Tensor[(4, 8, 14), float32]) {
  %718 = @func_2129() /* ty=(Tensor[(630), uint8],) */;
  %719 = @func_1147() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %720 = cast(%var_2683, dtype="float64") /* ty=Tensor[(4, 8, 14), float64] */;
  %721 = atan(%720) /* ty=Tensor[(4, 8, 14), float64] */;
  %722 = cast(%var_2683, dtype="uint8") /* ty=Tensor[(4, 8, 14), uint8] */;
  %723 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(%721, dtype="uint8") /* ty=Tensor[(4, 8, 14), uint8] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %726 = subtract(%724, %725) /* ty=Tensor[(4, 8, 14), uint8] */;
  %727 = cast(%726, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
  %728 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%721, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %731 = cast(%721, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
  %732 = shape_of(%var_2683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%var_2683, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %735 = %718.0;
  %736 = %719.2;
  %737 = power(%729, %730) /* ty=Tensor[(4, 8, 14), float32] */;
  %738 = mod(%733, %734) /* ty=Tensor[(4, 8, 14), float32] */;
  (%735, %736, %737, %738)
}

def @func_5432(%var_5430: Tensor[(8, 56), float64], %var_5431: Tensor[(8, 56), float64]) -> (Tensor[(6, 4, 12), float32], Tensor[(4, 4, 13), float32], Tensor[(208), float32], Tensor[(9, 15, 4), float64], Tensor[(8, 56), uint8]) {
  @func_5428(%var_5430, %var_5431) /* ty=(Tensor[(6, 4, 12), float32], Tensor[(4, 4, 13), float32], Tensor[(208), float32], Tensor[(9, 15, 4), float64], Tensor[(8, 56), uint8]) */
}

def @func_4154(%var_4126: Tensor[(600), int16], %var_4141: Tensor[(350), float64]) -> (Tensor[(9, 15, 4), float64], Tensor[(4, 4, 13), float32], Tensor[(208), float32], Tensor[(8, 56), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(60), int16], Tensor[(600), int16], Tensor[(9, 15, 4), float64], Tensor[(350), uint32], Tensor[(350), float32]) {
  %739 = @func_2294() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %740 = cast(meta[relay.Constant][35] /* ty=Tensor[(208), float32] */, dtype="float32") /* ty=Tensor[(208), float32] */;
  %741 = cast(meta[relay.Constant][36] /* ty=Tensor[(8, 56), float64] */, dtype="float64") /* ty=Tensor[(8, 56), float64] */;
  %742 = reshape(%740, newshape=[4, 4, 13]) /* ty=Tensor[(4, 4, 13), float32] */;
  %743 = reshape(%741, newshape=[224, 2]) /* ty=Tensor[(224, 2), float64] */;
  %744 = @func_3699(%742, %743) /* ty=(Tensor[(4, 4, 13), float32], Tensor[(4, 8, 14), float32], Tensor[(224, 2), float64]) */;
  %745 = @func_2565() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %746 = @func_2601() /* ty=(Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %747 = %746.1;
  %748 = cast(%747, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %749 = reshape(%748, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
  %750 = @func_1861(%749) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %751 = @func_3376() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %752 = @func_531() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %753 = cast(meta[relay.Constant][37] /* ty=Tensor[(60), int16] */, dtype="int16") /* ty=Tensor[(60), int16] */;
  %754 = cast(%var_4126, dtype="int16") /* ty=Tensor[(600), int16] */;
  %755 = reshape(%753, newshape=[1, 5, 12]) /* ty=Tensor[(1, 5, 12), int16] */;
  %756 = reshape(%754, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), int16] */;
  %757 = @func_1114(%755, %756) /* ty=(Tensor[(10, 5, 12), int16], Tensor[(9, 15, 4), float64], Tensor[(350), bool], Tensor[(350), float32], Tensor[(9, 15, 4), float64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */;
  %758 = %757.2;
  %759 = cast(%758, dtype="float64") /* ty=Tensor[(350), float64] */;
  %760 = log(%759) /* ty=Tensor[(350), float64] */;
  %761 = cast(%var_4141, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %762 = shape_of(%760, dtype="int32") /* ty=Tensor[(1), int32] */;
  %763 = cast(%760, dtype="uint32") /* ty=Tensor[(350), uint32] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %765 = cast(%760, dtype="float32") /* ty=Tensor[(350), float32] */;
  %766 = %739.1;
  %767 = %744.0;
  %768 = %745.0;
  %769 = %750.0;
  %770 = %751.0;
  %771 = %752.0;
  %772 = minimum(%763, %764) /* ty=Tensor[(350), uint32] */;
  %773 = sigmoid(%765) /* ty=Tensor[(350), float32] */;
  (%766, %767, meta[relay.Constant][35] /* ty=Tensor[(208), float32] */, meta[relay.Constant][36] /* ty=Tensor[(8, 56), float64] */, %768, %747, %769, %770, meta[relay.Constant][37] /* ty=Tensor[(60), int16] */, %var_4126, %771, %772, %773)
}

def @func_5744(%var_5743: Tensor[(12, 6, 1), float64]) -> (Tensor[(12, 6, ?), uint8], Tensor[(12, 9, 4), float64], Tensor[(12, 6, 1), float32], Tensor[(12, 6, ?), bool]) {
  %803 = fn (%var_5666: Tensor[(12, 6, 1), float64]) -> (Tensor[(12, 6, ?), uint8], Tensor[(12, 9, 4), float64], Tensor[(12, 6, 1), float32], Tensor[(12, 6, ?), bool]) {
    %774 = cast(%var_5666, dtype="float64") /* ty=Tensor[(12, 6, 1), float64] */;
    %775 = acos(%774) /* ty=Tensor[(12, 6, 1), float64] */;
    %776 = cast(%var_5666, dtype="uint8") /* ty=Tensor[(12, 6, 1), uint8] */;
    %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
    %778 = cast(%775, dtype="uint8") /* ty=Tensor[(12, 6, 1), uint8] */;
    %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %780 = cast(%var_5666, dtype="float64") /* ty=Tensor[(12, 6, 1), float64] */;
    %781 = asin(%780) /* ty=Tensor[(12, 6, 1), float64] */;
    %782 = cast(%781, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
    %783 = cast(%var_5666, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
    %784 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
    %785 = cast(%781, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
    %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %787 = floor_mod(%785, %786) /* ty=Tensor[(12, 6, ?), float32] */;
    %788 = cast(%var_5666, dtype="float32") /* ty=Tensor[(12, 6, 1), float32] */;
    %789 = atanh(%788) /* ty=Tensor[(12, 6, 1), float32] */;
    %790 = cast(%789, dtype="int16") /* ty=Tensor[(12, 6, 1), int16] */;
    %791 = shape_of(%var_5666, dtype="int32") /* ty=Tensor[(3), int32] */;
    %792 = cast(%var_5666, dtype="int16") /* ty=Tensor[(12, 6, 1), int16] */;
    %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %794 = minimum(%792, %793) /* ty=Tensor[(12, 6, ?), int16] */;
    %795 = cast(%794, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
    %796 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
    %797 = cast(%787, dtype="bool") /* ty=Tensor[(12, 6, ?), bool] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %799 = bitwise_xor(%778, %779) /* ty=Tensor[(12, 6, ?), uint8] */;
    %800 = @func_1578() /* ty=Tensor[(12, 9, 4), float64] */;
    %801 = rsqrt(%782) /* ty=Tensor[(12, 6, 1), float32] */;
    %802 = logical_or(%797, %798) /* ty=Tensor[(12, 6, ?), bool] */;
    (%799, %800, %801, %802)
  };
  %803(%var_5743) /* ty=(Tensor[(12, 6, ?), uint8], Tensor[(12, 9, 4), float64], Tensor[(12, 6, 1), float32], Tensor[(12, 6, ?), bool]) */
}

def @func_1647(%var_1645: Tensor[(9, 2, 16), uint32]) -> Tensor[(9, 2, 16), bool] {
  @func_1644(%var_1645) /* ty=Tensor[(9, 2, 16), bool] */
}

def @func_5397() -> (Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), bool]) {
  %804 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  %805 = cast(%804, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %806 = reshape(%805, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), float64] */;
  %807 = @func_3883(%806) /* ty=Tensor[(9, 15, 4), bool] */;
  (%804, %807)
}

def @func_2934() -> (Tensor[(630), uint8], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64], Tensor[(195, 2), uint64], Tensor[(9, 15, 4), float64]) {
  %808 = @func_2129() /* ty=(Tensor[(630), uint8],) */;
  %809 = @func_2776() /* ty=(Tensor[(9, 15, 4), float64],) */;
  %810 = @func_2509() /* ty=(Tensor[(9, 15, 4), uint64],) */;
  %811 = %810.0;
  %812 = cast(%811, dtype="float64") /* ty=Tensor[(9, 15, 4), float64] */;
  %813 = @func_1490() /* ty=(Tensor[(9, 15, 4), float64], Tensor[(9, 15, 4), float64]) */;
  %814 = cast(meta[relay.Constant][38] /* ty=Tensor[(195, 2), uint64] */, dtype="uint64") /* ty=Tensor[(195, 2), uint64] */;
  %815 = reshape(%814, newshape=[390]) /* ty=Tensor[(390), uint64] */;
  %816 = @func_708(%815) /* ty=(Tensor[(9, 15, 4), float64], Tensor[(13, 3, 10), uint64], Tensor[(390), uint64], Tensor[(9, 15, 4), float64]) */;
  %817 = %808.0;
  %818 = %809.0;
  %819 = acosh(%812) /* ty=Tensor[(9, 15, 4), float64] */;
  %820 = %813.0;
  %821 = %816.3;
  %822 = @func_328() /* ty=Tensor[(9, 15, 4), float64] */;
  (%817, %818, %819, %820, %821, meta[relay.Constant][38] /* ty=Tensor[(195, 2), uint64] */, %822)
}

def @func_4654(%var_4652: Tensor[(14, 5, 4), float32]) -> (Tensor[(14, 5, 4), float32],) {
  @func_4651(%var_4652) /* ty=(Tensor[(14, 5, 4), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.
The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.
The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
