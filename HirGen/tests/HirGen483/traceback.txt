==========mod==========
#[version = "0.0.5"]
def @func_5995(%var_5956: Tensor[(126), float32]) -> (Tensor[(11, 12, 16), float64], Tensor[(2464), float64], Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(11, 12, 16), float32]) {
  %0 = @func_4101() /* ty=(Tensor[(2464), float64],) */;
  %1 = cast(%var_5956, dtype="float32") /* ty=Tensor[(126), float32] */;
  %2 = reshape(%1, newshape=[63, 2]) /* ty=Tensor[(63, 2), float32] */;
  %3 = @func_3063(%2) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(300), float64], Tensor[(6, 7, 3), float32], Tensor[(63, 2), float32], Tensor[(14), uint16], Tensor[(42, 4), uint16], Tensor[(36), float32], Tensor[(3, 12), float32], Tensor[(11, 12, 16), float64]) */;
  %4 = @func_3786() /* ty=(Tensor[(11, 12, 16), float64],) */;
  %5 = %4.0;
  %6 = cast(%5, dtype="float32") /* ty=Tensor[(11, 12, 16), float32] */;
  %7 = @func_1534() /* ty=Tensor[(11, 12, 16), float64] */;
  %8 = %0.0;
  %9 = %3.3;
  %10 = cos(%6) /* ty=Tensor[(11, 12, 16), float32] */;
  (%7, %8, %9, %var_5956, %10)
}

def @func_1139(%var_1106: Tensor[(1, 7, 2), uint16], %var_1107: Tensor[(12, 7, 2), uint16], %var_1122: Tensor[(150, 2), float64], %var_1131: Tensor[(210), float32], %var_1132: Tensor[(36), float32]) -> (Tensor[(12, 7, 2), uint16], Tensor[(11, 14, 16), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(150, 2), float64], Tensor[(5, 6, 10), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32], Tensor[(36), float32]) {
  %11 = cast(%var_1106, dtype="uint16") /* ty=Tensor[(1, 7, 2), uint16] */;
  %12 = cast(%var_1107, dtype="uint16") /* ty=Tensor[(12, 7, 2), uint16] */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %14 = reshape(%13, newshape=[11, 14, 16]) /* ty=Tensor[(11, 14, 16), float64] */;
  %15 = @func_964(%14) /* ty=(Tensor[(11, 14, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(36), float32], Tensor[(21, 6), float32], float32) */;
  %16 = cast(%var_1122, dtype="float64") /* ty=Tensor[(150, 2), float64] */;
  %17 = reshape(%16, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float64] */;
  %18 = @func_1097(%17) /* ty=Tensor[(5, 6, 10), float64] */;
  %19 = cast(%18, dtype="float64") /* ty=Tensor[(5, 6, 10), float64] */;
  %20 = reshape(%19, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float64] */;
  %21 = cast(%var_1131, dtype="float32") /* ty=Tensor[(210), float32] */;
  %22 = cast(%var_1132, dtype="float32") /* ty=Tensor[(36), float32] */;
  %23 = reshape(%21, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float32] */;
  %24 = reshape(%22, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %25 = @func_521(%23, %24) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %26 = logical_xor(%11, %12) /* ty=Tensor[(12, 7, 2), uint16] */;
  %27 = %15.0;
  %28 = @func_1097(%20) /* ty=Tensor[(5, 6, 10), float64] */;
  %29 = %25.9;
  (%26, %27, meta[relay.Constant][0] /* ty=Tensor[(2464), float64] */, %18, %var_1122, %28, %29, %var_1131, %var_1132)
}

def @func_8794(%var_8787: Tensor[(126), float32], %var_8790: Tensor[(300), float64]) -> (Tensor[(2464), float64], Tensor[(300), float64], Tensor[(126), float32], Tensor[(14), uint16], Tensor[(6, 28), uint16], Tensor[(300), float64], Tensor[(3, 12), float32]) {
  %30 = @func_5513() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %31 = cast(%var_8787, dtype="float32") /* ty=Tensor[(126), float32] */;
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(14), uint16] */, dtype="uint16") /* ty=Tensor[(14), uint16] */;
  %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 28), uint16] */, dtype="uint16") /* ty=Tensor[(6, 28), uint16] */;
  %34 = cast(%var_8790, dtype="float64") /* ty=Tensor[(300), float64] */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %36 = reshape(%31, newshape=[1, 126]) /* ty=Tensor[(1, 126), float32] */;
  %37 = reshape(%32, newshape=[14]) /* ty=Tensor[(14), uint16] */;
  %38 = reshape(%33, newshape=[168]) /* ty=Tensor[(168), uint16] */;
  %39 = reshape(%34, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %40 = reshape(%35, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %41 = @func_2237(%36, %37, %38, %39, %40) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(1, 126), float32], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(210), float32], Tensor[(36), float32], Tensor[(?, 9, 3), uint64], Tensor[(8, 9, 3), float32]) */;
  %42 = %30.0;
  %43 = %41.5;
  (%42, %43, %var_8787, meta[relay.Constant][1] /* ty=Tensor[(14), uint16] */, meta[relay.Constant][2] /* ty=Tensor[(6, 28), uint16] */, %var_8790, meta[relay.Constant][3] /* ty=Tensor[(3, 12), float32] */)
}

def @func_9396() -> (Tensor[(2464), float64],) {
  %44 = @func_4205() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %45 = %44.1;
  (%45,)
}

def @func_9069() -> (Tensor[(8, 10, 13), float64], float32) {
  %46 = @func_7297() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(8, 10, 13), float64]) */;
  %47 = @func_8332() /* ty=(float32, float32) */;
  %48 = %46.1;
  %49 = %47.1;
  (%48, %49)
}

def @func_7483(%var_7466: Tensor[(16, 11, 7), float64]) -> (Tensor[(16, 11, 7), float64], Tensor[(16, 11, 7), float64]) {
  %50 = cast(%var_7466, dtype="float64") /* ty=Tensor[(16, 11, 7), float64] */;
  %51 = cast(%var_7466, dtype="float64") /* ty=Tensor[(16, 11, 7), float64] */;
  %52 = acosh(%50) /* ty=Tensor[(16, 11, 7), float64] */;
  %53 = log2(%51) /* ty=Tensor[(16, 11, 7), float64] */;
  (%52, %53)
}

def @func_8212() -> (Tensor[(300), float64], Tensor[(5, 42), float32], Tensor[(210, 1), float32]) {
  %54 = cast(meta[relay.Constant][4] /* ty=Tensor[(210, 1), float32] */, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
  %55 = reshape(%54, newshape=[5, 42]) /* ty=Tensor[(5, 42), float32] */;
  %56 = @func_2037(%55) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(5, 42), float32], Tensor[(3, 12), float32], Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %57 = @func_5645() /* ty=Tensor[(300), float64] */;
  %58 = %56.1;
  (%57, %58, meta[relay.Constant][4] /* ty=Tensor[(210, 1), float32] */)
}

def @func_7623() -> (Tensor[(2464), float64],) {
  %59 = @func_6227() /* ty=Tensor[(2464), float64] */;
  (%59,)
}

def @func_10386() -> (float32,) {
  %60 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
  %61 = %60.1;
  (%61,)
}

def @func_11551() -> Tensor[(210), float32] {
  %62 = @func_1959() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(11, 12, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(9, 4), float32]) */;
  %62.3
}

def @func_1097(%var_1087: Tensor[(5, 6, 10), float64]) -> Tensor[(5, 6, 10), float64] {
  %63 = cast(%var_1087, dtype="float64") /* ty=Tensor[(5, 6, 10), float64] */;
  atanh(%63) /* ty=Tensor[(5, 6, 10), float64] */
}

def @func_8431() -> Tensor[(2464), float64] {
  %64 = @func_6014() /* ty=(Tensor[(2464), float64],) */;
  %64.0
}

def @func_6898() -> (Tensor[(2464), bool], float32) {
  %65 = @func_4626() /* ty=Tensor[(2464), bool] */;
  %66 = @func_2280() /* ty=float32 */;
  (%65, %66)
}

def @func_7450() -> Tensor[(5, 6, 10), float64] {
  %67 = @func_7344() /* ty=(Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(1408), float32], Tensor[(5, 6, 10), float64]) */;
  %67.3
}

def @func_2237(%var_2190: Tensor[(1, 126), float32], %var_2199: Tensor[(14), uint16], %var_2200: Tensor[(168), uint16], %var_2201: Tensor[(300), float64], %var_2203: Tensor[(36), float32]) -> (Tensor[(6, 7, 3), float32], Tensor[(1, 126), float32], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(210), float32], Tensor[(36), float32], Tensor[(?, 9, 3), uint64], Tensor[(8, 9, 3), float32]) {
  %68 = cast(%var_2190, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %69 = reshape(%68, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), float32] */;
  %70 = cast(%var_2199, dtype="uint16") /* ty=Tensor[(14), uint16] */;
  %71 = cast(%var_2200, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %72 = cast(%var_2201, dtype="float64") /* ty=Tensor[(300), float64] */;
  %73 = cast(meta[relay.Constant][5] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %74 = cast(%var_2203, dtype="float32") /* ty=Tensor[(36), float32] */;
  %75 = reshape(%70, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), uint16] */;
  %76 = reshape(%71, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), uint16] */;
  %77 = reshape(%72, newshape=[150, 2]) /* ty=Tensor[(150, 2), float64] */;
  %78 = reshape(%73, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %79 = reshape(%74, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %80 = @func_1139(%75, %76, %77, %78, %79) /* ty=(Tensor[(12, 7, 2), uint16], Tensor[(11, 14, 16), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(150, 2), float64], Tensor[(5, 6, 10), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32], Tensor[(36), float32]) */;
  %81 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 9, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 3), float32] */;
  %82 = sin(%81) /* ty=Tensor[(1, 9, 3), float32] */;
  %83 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 9, 3), float32] */, dtype="uint64") /* ty=Tensor[(1, 9, 3), uint64] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="uint64") /* ty=Tensor[(1, 9, 3), uint64] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %87 = cast(%82, dtype="float32") /* ty=Tensor[(1, 9, 3), float32] */;
  %88 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 9, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 9, 3), float32] */;
  %89 = @func_144(%69) /* ty=Tensor[(6, 7, 3), float32] */;
  %90 = %80.2;
  %91 = logical_xor(%85, %86) /* ty=Tensor[(?, 9, 3), uint64] */;
  %92 = divide(%87, %88) /* ty=Tensor[(8, 9, 3), float32] */;
  (%89, %var_2190, %90, %var_2199, %var_2200, %var_2201, meta[relay.Constant][5] /* ty=Tensor[(210), float32] */, %var_2203, %91, %92)
}

def @func_6139() -> (Tensor[(2464), float64],) {
  %93 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
  %94 = %93.0;
  (%94,)
}

def @func_7699() -> (float32,) {
  %95 = @func_5422() /* ty=(float32,) */;
  %96 = %95.0;
  (%96,)
}

def @func_2831() -> (Tensor[(2464), float64],) {
  %97 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
  %98 = %97.0;
  (%98,)
}

def @func_2892() -> Tensor[(2464), float64] {
  %99 = @func_2831() /* ty=(Tensor[(2464), float64],) */;
  %99.0
}

def @func_7344() -> (Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(1408), float32], Tensor[(5, 6, 10), float64]) {
  %100 = @func_4518() /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16]) */;
  %101 = cast(meta[relay.Constant][8] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %102 = reshape(%101, newshape=[1408]) /* ty=Tensor[(1408), float32] */;
  %103 = @func_4074(%102) /* ty=(Tensor[(11, 13, 4), float64], Tensor[(11, 13, 4), uint32], Tensor[(2464), float64], Tensor[(8, 11, 16), float64], Tensor[(1408), float32], Tensor[(2464), float64], Tensor[(2, 12, 7), bool], Tensor[(168), bool]) */;
  %104 = %100.1;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(5, 6, 10), float64] */;
  %106 = reshape(%105, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %107 = @func_1855(%106) /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) */;
  %108 = %103.5;
  %109 = %107.1;
  (%104, %108, meta[relay.Constant][8] /* ty=Tensor[(1408), float32] */, %109)
}

def @func_6663(%var_6605: Tensor[(300), float64]) -> (Tensor[(2464), float64], Tensor[(3, 12), float32], Tensor[(36), float32], Tensor[(126), float32], Tensor[(14, 1), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(2464), float64], Tensor[(2464), float64]) {
  %110 = @func_5513() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %111 = @func_3876() /* ty=(Tensor[(2464), float64], Tensor[(3, 12), float32]) */;
  %112 = cast(meta[relay.Constant][9] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %113 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 1), uint16] */, dtype="uint16") /* ty=Tensor[(14, 1), uint16] */;
  %114 = cast(meta[relay.Constant][11] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %115 = cast(%var_6605, dtype="float64") /* ty=Tensor[(300), float64] */;
  %116 = %111.1;
  %117 = cast(%116, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %118 = reshape(%112, newshape=[1, 126]) /* ty=Tensor[(1, 126), float32] */;
  %119 = reshape(%113, newshape=[14]) /* ty=Tensor[(14), uint16] */;
  %120 = reshape(%114, newshape=[168]) /* ty=Tensor[(168), uint16] */;
  %121 = reshape(%115, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %122 = reshape(%117, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %123 = @func_2237(%118, %119, %120, %121, %122) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(1, 126), float32], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(210), float32], Tensor[(36), float32], Tensor[(?, 9, 3), uint64], Tensor[(8, 9, 3), float32]) */;
  %124 = %110.0;
  %125 = %123.7;
  %126 = @func_4546() /* ty=Tensor[(2464), float64] */;
  %127 = @func_5834() /* ty=Tensor[(2464), float64] */;
  (%124, %116, %125, meta[relay.Constant][9] /* ty=Tensor[(126), float32] */, meta[relay.Constant][10] /* ty=Tensor[(14, 1), uint16] */, meta[relay.Constant][11] /* ty=Tensor[(168), uint16] */, %var_6605, %126, %127)
}

def @func_7659() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  %128 = @func_2709() /* ty=(Tensor[(2464), float64], float32) */;
  %129 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
  %130 = %128.0;
  %131 = %129.0;
  (%130, %131)
}

def @func_10787(%var_10764: Tensor[(8, 10, 13), float64]) -> (Tensor[(2464), float64], Tensor[(4800), float64], Tensor[(8, 10, 13), bool]) {
  %132 = @func_5131() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %133 = cast(meta[relay.Constant][12] /* ty=Tensor[(4800), float64] */, dtype="float64") /* ty=Tensor[(4800), float64] */;
  %134 = reshape(%133, newshape=[300, 16]) /* ty=Tensor[(300, 16), float64] */;
  %135 = @func_4149(%134) /* ty=(Tensor[(300, 16), int8], Tensor[(8, 10, 13), float64]) */;
  %136 = %135.1;
  %137 = cast(%var_10764, dtype="bool") /* ty=Tensor[(8, 10, 13), bool] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="bool") /* ty=Tensor[(8, 10, 13), bool] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %141 = %132.0;
  %142 = less_equal(%139, %140) /* ty=Tensor[(8, 10, 13), bool] */;
  (%141, meta[relay.Constant][12] /* ty=Tensor[(4800), float64] */, %142)
}

def @func_3728() -> Tensor[(2464), float64] {
  %143 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
  %144 = %143.1;
  %145 = @func_2892() /* ty=Tensor[(2464), float64] */;
  %146 = cast(%144, dtype="float64") /* ty=float64 */;
  %147 = cast(%145, dtype="float64") /* ty=Tensor[(2464), float64] */;
  mod(%146, %147) /* ty=Tensor[(2464), float64] */
}

def @func_7442() -> (float32,) {
  %148 = @func_5422() /* ty=(float32,) */;
  %149 = %148.0;
  (%149,)
}

def @func_10279(%var_10251: Tensor[(50, 6), float64]) -> (Tensor[(2464), float64], Tensor[(50, 6), float64], Tensor[(300), float64], Tensor[(2464), float64]) {
  %150 = @func_6014() /* ty=(Tensor[(2464), float64],) */;
  %151 = cast(%var_10251, dtype="float64") /* ty=Tensor[(50, 6), float64] */;
  %152 = reshape(%151, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %153 = @func_4301(%152) /* ty=Tensor[(300), int16] */;
  %154 = cast(meta[relay.Constant][13] /* ty=Tensor[(300), int16] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(1), int32] */;
  %156 = cast(%153, dtype="float64") /* ty=Tensor[(300), float64] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?), float64] */;
  %158 = @func_9895() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %159 = %150.0;
  %160 = mod(%156, %157) /* ty=Tensor[(300), float64] */;
  %161 = %158.0;
  (%159, %var_10251, %160, %161)
}

def @func_6750() -> Tensor[(11, 12, 16), float64] {
  @func_6692() /* ty=Tensor[(11, 12, 16), float64] */
}

def @func_1473() -> (Tensor[(2464), float64],) {
  %162 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
  %163 = %162.0;
  (%163,)
}

def @func_9308() -> (Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), float64], Tensor[(5, 6, 10), float64], Tensor[(11, 12, 16), float64]) {
  %164 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 16, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
  %165 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(2, 16, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 16, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %168 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 16, 8), float32] */, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
  %169 = @func_1959() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(11, 12, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(9, 4), float32]) */;
  %170 = power(%166, %167) /* ty=Tensor[(2, 16, 8), float32] */;
  %171 = acos(%168) /* ty=Tensor[(2, 16, 8), float64] */;
  %172 = @func_7450() /* ty=Tensor[(5, 6, 10), float64] */;
  %173 = %169.1;
  (%170, %171, %172, %173)
}

def @func_9847() -> Tensor[(2464), float64] {
  %174 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
  %174.0
}

def @func_1324(%var_1301: Tensor[(126), float32], %var_1309: Tensor[(2464), float64]) -> (Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(2464), float32]) {
  %175 = cast(%var_1301, dtype="float32") /* ty=Tensor[(126), float32] */;
  %176 = reshape(%175, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), float32] */;
  %177 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
  %178 = %177.2;
  %179 = cast(%var_1309, dtype="int64") /* ty=Tensor[(2464), int64] */;
  %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(1), int32] */;
  %181 = cast(%178, dtype="int64") /* ty=Tensor[(2464), int64] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?), int64] */;
  %183 = cast(%178, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %184 = @func_144(%176) /* ty=Tensor[(6, 7, 3), float32] */;
  %185 = left_shift(%181, %182) /* ty=Tensor[(2464), int64] */;
  %186 = rsqrt(%183) /* ty=Tensor[(2464), float32] */;
  (%184, %var_1301, %185, %186)
}

def @func_8182(%var_8166: Tensor[(2, 2, 13), int8], %var_8167: Tensor[(2, 2, 13), int8]) -> Tensor[(2, 2, 13), int8] {
  %187 = cast(%var_8167, dtype="int8") /* ty=Tensor[(2, 2, 13), int8] */;
  %188 = shape_of(%var_8166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%var_8166, dtype="int8") /* ty=Tensor[(2, 2, 13), int8] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  maximum(%189, %190) /* ty=Tensor[(2, 2, 13), int8] */
}

def @func_8098() -> (float32,) {
  %191 = @func_6864() /* ty=(float32,) */;
  %192 = %191.0;
  (%192,)
}

def @func_7131() -> (Tensor[(2464), float32], Tensor[(2464), float64]) {
  %193 = @func_4546() /* ty=Tensor[(2464), float64] */;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %195 = @func_4205() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %196 = erf(%194) /* ty=Tensor[(2464), float32] */;
  %197 = %195.1;
  (%196, %197)
}

def @func_3786() -> (Tensor[(11, 12, 16), float64],) {
  %198 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
  %199 = %198.0;
  %200 = cast(%199, dtype="float64") /* ty=Tensor[(11, 12, 16), float64] */;
  %201 = sqrt(%200) /* ty=Tensor[(11, 12, 16), float64] */;
  (%201,)
}

def @func_3423(%var_3370: Tensor[(8, 11, 16), float32]) -> (Tensor[(8, 11, 16), float64],) {
  %202 = cast(%var_3370, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
  %203 = log10(%202) /* ty=Tensor[(8, 11, 16), float32] */;
  %204 = cast(%203, dtype="float64") /* ty=Tensor[(8, 11, 16), float64] */;
  %205 = sigmoid(%204) /* ty=Tensor[(8, 11, 16), float64] */;
  (%205,)
}

def @func_9770(%var_9764: Tensor[(1408), float32]) -> (Tensor[(2464), float32], Tensor[(8, 11, 16), float64], Tensor[(1408), float32]) {
  %206 = @func_6139() /* ty=(Tensor[(2464), float64],) */;
  %207 = %206.0;
  %208 = @func_7442() /* ty=(float32,) */;
  %209 = %208.0;
  %210 = cast(%207, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %211 = cast(%209, dtype="float32") /* ty=float32 */;
  %212 = cast(%var_9764, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %213 = reshape(%212, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
  %214 = @func_3423(%213) /* ty=(Tensor[(8, 11, 16), float64],) */;
  %215 = divide(%210, %211) /* ty=Tensor[(2464), float32] */;
  %216 = %214.0;
  (%215, %216, %var_9764)
}

def @func_6580() -> float32 {
  %217 = @func_2816() /* ty=(float32, Tensor[(11, 12, 16), float64]) */;
  %217.0
}

def @func_10732() -> (Tensor[(5, 6, 10), float64], Tensor[(2464), float64]) {
  %218 = @func_7233() /* ty=(Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(2464), bool]) */;
  %219 = @func_2174() /* ty=(Tensor[(2464), float64],) */;
  %220 = %218.0;
  %221 = %219.0;
  (%220, %221)
}

def @func_3629(%var_3587: Tensor[(9, 14, 7), uint32], %var_3595: Tensor[(126), float32]) -> (Tensor[(9, 14, 7), uint32], Tensor[(2464), float32], Tensor[(126), float32], Tensor[(2464), float64]) {
  %222 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 1, 7), uint32] */, dtype="uint32") /* ty=Tensor[(9, 1, 7), uint32] */;
  %223 = cast(%var_3587, dtype="uint32") /* ty=Tensor[(9, 14, 7), uint32] */;
  %224 = cast(%var_3595, dtype="float32") /* ty=Tensor[(126), float32] */;
  %225 = cast(meta[relay.Constant][17] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %226 = reshape(%224, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %227 = reshape(%225, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %228 = @func_1324(%226, %227) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(2464), float32]) */;
  %229 = left_shift(%222, %223) /* ty=Tensor[(9, 14, 7), uint32] */;
  %230 = %228.3;
  (%229, %230, %var_3595, meta[relay.Constant][17] /* ty=Tensor[(2464), float64] */)
}

def @func_4149(%var_4133: Tensor[(300, 16), float64]) -> (Tensor[(300, 16), int8], Tensor[(8, 10, 13), float64]) {
  %231 = @func_3331() /* ty=Tensor[(300, 1), float64] */;
  %232 = cast(%231, dtype="int8") /* ty=Tensor[(300, 1), int8] */;
  %233 = cast(%var_4133, dtype="int8") /* ty=Tensor[(300, 16), int8] */;
  %234 = @func_3320() /* ty=(float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32]) */;
  %235 = right_shift(%232, %233) /* ty=Tensor[(300, 16), int8] */;
  %236 = %234.2;
  (%235, %236)
}

def @func_7076(%var_7072: Tensor[(36), float32]) -> (Tensor[(2464), float64], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(5, 6, 10), float64], Tensor[(150, 2), float64], Tensor[(14), uint16], Tensor[(210), float32], Tensor[(36), float32]) {
  %237 = @func_2831() /* ty=(Tensor[(2464), float64],) */;
  %238 = cast(meta[relay.Constant][18] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %239 = reshape(%238, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %240 = @func_6663(%239) /* ty=(Tensor[(2464), float64], Tensor[(3, 12), float32], Tensor[(36), float32], Tensor[(126), float32], Tensor[(14, 1), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %241 = cast(meta[relay.Constant][19] /* ty=Tensor[(14), uint16] */, dtype="uint16") /* ty=Tensor[(14), uint16] */;
  %242 = %240.5;
  %243 = cast(%242, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %244 = cast(meta[relay.Constant][18] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %245 = cast(meta[relay.Constant][20] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %246 = cast(%var_7072, dtype="float32") /* ty=Tensor[(36), float32] */;
  %247 = reshape(%241, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), uint16] */;
  %248 = reshape(%243, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), uint16] */;
  %249 = reshape(%244, newshape=[150, 2]) /* ty=Tensor[(150, 2), float64] */;
  %250 = reshape(%245, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %251 = reshape(%246, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %252 = @func_1139(%247, %248, %249, %250, %251) /* ty=(Tensor[(12, 7, 2), uint16], Tensor[(11, 14, 16), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(150, 2), float64], Tensor[(5, 6, 10), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32], Tensor[(36), float32]) */;
  %253 = %237.0;
  %254 = @func_6812() /* ty=Tensor[(5, 6, 10), float64] */;
  %255 = %252.4;
  (%253, %242, meta[relay.Constant][18] /* ty=Tensor[(300), float64] */, %254, %255, meta[relay.Constant][19] /* ty=Tensor[(14), uint16] */, meta[relay.Constant][20] /* ty=Tensor[(210), float32] */, %var_7072)
}

def @func_6261(%var_6248: Tensor[(126), float32]) -> (Tensor[(2464), float64], Tensor[(3, 12), float32], Tensor[(882), uint32], Tensor[(126), float32], Tensor[(2112), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32]) {
  %256 = @func_2831() /* ty=(Tensor[(2464), float64],) */;
  %257 = @func_2003() /* ty=(Tensor[(3, 12), float32],) */;
  %258 = cast(%var_6248, dtype="float32") /* ty=Tensor[(126), float32] */;
  %259 = cast(meta[relay.Constant][21] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %260 = reshape(%258, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %261 = reshape(%259, newshape=[44, 48]) /* ty=Tensor[(44, 48), float64] */;
  %262 = @func_5815(%260, %261) /* ty=(Tensor[(2464), float64], Tensor[(432), float32], Tensor[(8, 6, 9), float64], Tensor[(126), float32], Tensor[(126), float32], Tensor[(44, 48), float64], Tensor[(2464), float32], Tensor[(882), uint32], Tensor[(126), float32]) */;
  %263 = cast(meta[relay.Constant][22] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %264 = %257.0;
  %265 = cast(%264, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %266 = reshape(%263, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float32] */;
  %267 = reshape(%265, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %268 = @func_521(%266, %267) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %269 = %256.0;
  %270 = %262.7;
  %271 = %268.4;
  (%269, %264, %270, %var_6248, meta[relay.Constant][21] /* ty=Tensor[(2112), float64] */, %271, meta[relay.Constant][22] /* ty=Tensor[(210), float32] */)
}

def @func_9598() -> (Tensor[(2464), float64],) {
  %272 = @func_8312() /* ty=(Tensor[(2464), float64],) */;
  %273 = %272.0;
  %274 = cast(%273, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %275 = exp(%274) /* ty=Tensor[(2464), float64] */;
  (%275,)
}

def @func_6812() -> Tensor[(5, 6, 10), float64] {
  %276 = @func_2513() /* ty=(Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %276.1
}

def @func_2174() -> (Tensor[(2464), float64],) {
  %277 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
  %278 = %277.0;
  (%278,)
}

def @func_3149() -> (Tensor[(300, 1), float64],) {
  %279 = @func_2080() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %280 = %279.2;
  (%280,)
}

def @func_5568() -> (Tensor[(2464), float64],) {
  %281 = @func_2709() /* ty=(Tensor[(2464), float64], float32) */;
  %282 = %281.0;
  (%282,)
}

def @func_11302() -> (Tensor[(2464), float64],) {
  %283 = @func_5153() /* ty=(Tensor[(2464), float64],) */;
  %284 = %283.0;
  (%284,)
}

def @func_11453() -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(300), float64]) {
  %285 = @func_7893() /* ty=(Tensor[(2464), float64], Tensor[(300, 1), float64]) */;
  %286 = @func_8212() /* ty=(Tensor[(300), float64], Tensor[(5, 42), float32], Tensor[(210, 1), float32]) */;
  %287 = %285.0;
  %288 = @func_10119() /* ty=Tensor[(2464), float64] */;
  %289 = %286.0;
  (%287, %288, %289)
}

def @func_1629(%var_1595: Tensor[(126), float32], %var_1614: Tensor[(11, 12, 16), float64]) -> (Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(11, 12, 16), bool]) {
  %290 = cast(%var_1595, dtype="float32") /* ty=Tensor[(126), float32] */;
  %291 = reshape(%290, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), float32] */;
  %292 = @func_1534() /* ty=Tensor[(11, 12, 16), float64] */;
  %293 = cast(%var_1614, dtype="bool") /* ty=Tensor[(11, 12, 16), bool] */;
  %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%292, dtype="bool") /* ty=Tensor[(11, 12, 16), bool] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %297 = @func_144(%291) /* ty=Tensor[(6, 7, 3), float32] */;
  %298 = less_equal(%295, %296) /* ty=Tensor[(11, 12, 16), bool] */;
  (%297, %var_1595, %298)
}

def @func_4358(%var_4344: Tensor[(2464), float64]) -> (Tensor[(2464), int16], Tensor[(2464), uint64]) {
  %299 = @func_3650() /* ty=Tensor[(2464), float64] */;
  %300 = cast(%var_4344, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(1), int32] */;
  %302 = cast(%299, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?), int16] */;
  %304 = cast(%var_4344, dtype="uint64") /* ty=Tensor[(2464), uint64] */;
  %305 = shape_of(%299, dtype="int32") /* ty=Tensor[(1), int32] */;
  %306 = cast(%299, dtype="uint64") /* ty=Tensor[(2464), uint64] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %308 = right_shift(%302, %303) /* ty=Tensor[(2464), int16] */;
  %309 = bitwise_and(%306, %307) /* ty=Tensor[(2464), uint64] */;
  (%308, %309)
}

def @func_10190() -> Tensor[(2464), bool] {
  %310 = @func_6898() /* ty=(Tensor[(2464), bool], float32) */;
  %310.0
}

def @func_7967() -> Tensor[(3, 12), float32] {
  %311 = @func_2003() /* ty=(Tensor[(3, 12), float32],) */;
  %311.0
}

def @func_10613() -> (Tensor[(2464), float64], Tensor[(5, 6, 10), float64]) {
  %312 = @func_2709() /* ty=(Tensor[(2464), float64], float32) */;
  %313 = @func_2513() /* ty=(Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %314 = %312.0;
  %315 = %313.1;
  (%314, %315)
}

def @func_8312() -> (Tensor[(2464), float64],) {
  %316 = @func_3650() /* ty=Tensor[(2464), float64] */;
  (%316,)
}

def @func_11363() -> (Tensor[(300), float64], Tensor[(2464), float64]) {
  %317 = @func_8063() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300), float64], Tensor[(11, 12, 16), float64]) */;
  %318 = @func_9432() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) */;
  %319 = %317.3;
  %320 = %318.1;
  (%319, %320)
}

def @func_4974() -> Tensor[(2464), float64] {
  %321 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
  %321.2
}

def @func_11698(%var_11693: Tensor[(300, 13), float64]) -> (Tensor[(300, 1), float64], Tensor[(300, 13), uint16]) {
  %322 = @func_3331() /* ty=Tensor[(300, 1), float64] */;
  %323 = cast(%322, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %324 = cast(%322, dtype="uint16") /* ty=Tensor[(300, 1), uint16] */;
  %325 = cast(%var_11693, dtype="uint16") /* ty=Tensor[(300, 13), uint16] */;
  %326 = sin(%323) /* ty=Tensor[(300, 1), float64] */;
  %327 = bitwise_and(%324, %325) /* ty=Tensor[(300, 13), uint16] */;
  (%326, %327)
}

def @func_2080() -> (Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) {
  %328 = cast(meta[relay.Constant][23] /* ty=Tensor[(300, 1), float64] */, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %329 = reshape(%328, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %330 = @func_1855(%329) /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) */;
  %331 = cast(meta[relay.Constant][23] /* ty=Tensor[(300, 1), float64] */, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %332 = reshape(%331, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %333 = @func_1855(%332) /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) */;
  %334 = @func_1534() /* ty=Tensor[(11, 12, 16), float64] */;
  %335 = %330.2;
  %336 = %333.1;
  (%334, %335, meta[relay.Constant][23] /* ty=Tensor[(300, 1), float64] */, %336)
}

def @func_2308() -> (Tensor[(2464), float64],) {
  %337 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
  %338 = %337.0;
  (%338,)
}

def @func_9052() -> (Tensor[(42, 4), bool], Tensor[(11, 12, 16), float64], Tensor[(300, ?), bool]) {
  %339 = @func_3207() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16], float32, Tensor[(210), float32], Tensor[(36), float32], Tensor[(11, 12, 16), float64], Tensor[(42, 4), bool]) */;
  %340 = @func_4631() /* ty=Tensor[(300, 1), float64] */;
  %341 = cast(%340, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %342 = log(%341) /* ty=Tensor[(300, 1), float32] */;
  %343 = cast(%340, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(2), int32] */;
  %345 = cast(%342, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %347 = %339.7;
  %348 = @func_6750() /* ty=Tensor[(11, 12, 16), float64] */;
  %349 = not_equal(%345, %346) /* ty=Tensor[(300, ?), bool] */;
  (%347, %348, %349)
}

def @func_2983(%var_2972: Tensor[(5, 6, 10), float64]) -> Tensor[(5, 6, 10), bool] {
  %350 = @func_2513() /* ty=(Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %351 = %350.1;
  %352 = cast(%var_2972, dtype="bool") /* ty=Tensor[(5, 6, 10), bool] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="bool") /* ty=Tensor[(5, 6, 10), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%354, %355) /* ty=Tensor[(5, 6, 10), bool] */
}

def @func_6014() -> (Tensor[(2464), float64],) {
  %356 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
  %357 = %356.0;
  (%357,)
}

def @func_6736() -> Tensor[(300), float64] {
  @func_5645() /* ty=Tensor[(300), float64] */
}

def @func_5604() -> (Tensor[(2464), float64], Tensor[(8, 6, 9), float32], Tensor[(432), float32]) {
  %358 = @func_4725() /* ty=(Tensor[(2464), float64],) */;
  %359 = cast(meta[relay.Constant][24] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %360 = reshape(%359, newshape=[8, 6, 9]) /* ty=Tensor[(8, 6, 9), float32] */;
  %361 = %358.0;
  %362 = @func_4999(%360) /* ty=Tensor[(8, 6, 9), float32] */;
  (%361, %362, meta[relay.Constant][24] /* ty=Tensor[(432), float32] */)
}

def @func_5153() -> (Tensor[(2464), float64],) {
  %363 = @func_4205() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %364 = %363.1;
  (%364,)
}

def @func_7509() -> (Tensor[(2464), float64], Tensor[(300, 1), float64]) {
  %365 = @func_2709() /* ty=(Tensor[(2464), float64], float32) */;
  %366 = @func_3149() /* ty=(Tensor[(300, 1), float64],) */;
  %367 = %365.0;
  %368 = %366.0;
  (%367, %368)
}

def @func_5051() -> Tensor[(2464), float64] {
  @func_4546() /* ty=Tensor[(2464), float64] */
}

def @func_521(%var_453: Tensor[(1, 15, 14), float32], %var_495: Tensor[(36), float32]) -> (Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) {
  %369 = cast(meta[relay.Constant][25] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %370 = cast(meta[relay.Constant][25] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %371 = reshape(%369, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %372 = reshape(%370, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %373 = @func_61(%371, %372) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %374 = cast(meta[relay.Constant][25] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %375 = %373.1;
  %376 = cast(%375, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
  %377 = reshape(%374, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %378 = reshape(%376, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %379 = @func_61(%377, %378) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %380 = cast(meta[relay.Constant][25] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %381 = %379.1;
  %382 = cast(%381, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
  %383 = reshape(%380, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %384 = reshape(%382, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %385 = @func_61(%383, %384) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %386 = cast(%var_453, dtype="float32") /* ty=Tensor[(1, 15, 14), float32] */;
  %387 = atan(%386) /* ty=Tensor[(1, 15, 14), float32] */;
  %388 = cast(%387, dtype="float32") /* ty=Tensor[(1, 15, 14), float32] */;
  %389 = cosh(%388) /* ty=Tensor[(1, 15, 14), float32] */;
  %390 = cast(%var_453, dtype="bool") /* ty=Tensor[(1, 15, 14), bool] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%389, dtype="bool") /* ty=Tensor[(1, 15, 14), bool] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %394 = not_equal(%392, %393) /* ty=Tensor[(?, 15, 14), bool] */;
  %395 = cast(%394, dtype="bool") /* ty=Tensor[(?, 15, 14), bool] */;
  %396 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(%389, dtype="bool") /* ty=Tensor[(1, 15, 14), bool] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %399 = cast(4.46237f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %400 = cast(%var_495, dtype="float32") /* ty=Tensor[(36), float32] */;
  %401 = reshape(%399, newshape=[]) /* ty=float32 */;
  %402 = reshape(%400, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %403 = @func_257(%401, %402) /* ty=(Tensor[(1, 6, 6), bool], Tensor[(6, 7, 3), float32], Tensor[(21, 6), float32]) */;
  %404 = cast(%375, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
  %405 = cast(%375, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
  %406 = reshape(%404, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %407 = reshape(%405, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %408 = @func_61(%406, %407) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %409 = cast(%381, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
  %410 = %385.1;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
  %412 = reshape(%409, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %413 = reshape(%411, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %414 = @func_61(%412, %413) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %415 = logical_or(%397, %398) /* ty=Tensor[(?, 15, 14), bool] */;
  %416 = %403.2;
  %417 = %408.0;
  %418 = %414.1;
  (%375, meta[relay.Constant][25] /* ty=Tensor[(1040), float32] */, %381, %410, %415, %416, 4.46237f /* ty=float32 */, %var_495, %417, %418)
}

def @func_144(%var_139: Tensor[(6, 7, 3), float32]) -> Tensor[(6, 7, 3), float32] {
  %419 = cast(%var_139, dtype="float32") /* ty=Tensor[(6, 7, 3), float32] */;
  log(%419) /* ty=Tensor[(6, 7, 3), float32] */
}

def @func_6227() -> Tensor[(2464), float64] {
  %420 = @func_5568() /* ty=(Tensor[(2464), float64],) */;
  %420.0
}

def @func_7297() -> (Tensor[(11, 12, 16), float64], Tensor[(8, 10, 13), float64]) {
  %421 = @func_3320() /* ty=(float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32]) */;
  %422 = @func_5856() /* ty=Tensor[(11, 12, 16), float64] */;
  %423 = %421.2;
  (%422, %423)
}

def @func_7993() -> (Tensor[(2464), uint64],) {
  %424 = @func_3728() /* ty=Tensor[(2464), float64] */;
  %425 = cast(meta[relay.Constant][26] /* ty=Tensor[(2464), float64] */, dtype="uint64") /* ty=Tensor[(2464), uint64] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(1), int32] */;
  %427 = cast(%424, dtype="uint64") /* ty=Tensor[(2464), uint64] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %429 = logical_xor(%427, %428) /* ty=Tensor[(2464), uint64] */;
  (%429,)
}

def @func_2564() -> (float32, Tensor[(2464), float64]) {
  %430 = @func_2385() /* ty=(Tensor[(2464), float64],) */;
  %431 = @func_2280() /* ty=float32 */;
  %432 = %430.0;
  (%431, %432)
}

def @func_6697() -> Tensor[(4800), float64] {
  %433 = @func_4386() /* ty=(float32, Tensor[(300, 16), int8], Tensor[(4800), float64]) */;
  %433.2
}

def @func_1371() -> (Tensor[(2464), float64],) {
  %434 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
  %435 = %434.2;
  (%435,)
}

def @func_5815(%var_5796: Tensor[(126), float32], %var_5797: Tensor[(44, 48), float64]) -> (Tensor[(2464), float64], Tensor[(432), float32], Tensor[(8, 6, 9), float64], Tensor[(126), float32], Tensor[(126), float32], Tensor[(44, 48), float64], Tensor[(2464), float32], Tensor[(882), uint32], Tensor[(126), float32]) {
  %436 = @func_2831() /* ty=(Tensor[(2464), float64],) */;
  %437 = cast(meta[relay.Constant][27] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %438 = reshape(%437, newshape=[8, 6, 9]) /* ty=Tensor[(8, 6, 9), float32] */;
  %439 = @func_4999(%438) /* ty=Tensor[(8, 6, 9), float32] */;
  %440 = cast(%439, dtype="float32") /* ty=Tensor[(8, 6, 9), float32] */;
  %441 = log(%440) /* ty=Tensor[(8, 6, 9), float32] */;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(8, 6, 9), float64] */;
  %443 = cast(%var_5796, dtype="float32") /* ty=Tensor[(126), float32] */;
  %444 = cast(%var_5797, dtype="float64") /* ty=Tensor[(44, 48), float64] */;
  %445 = reshape(%443, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %446 = reshape(%444, newshape=[11, 12, 16]) /* ty=Tensor[(11, 12, 16), float64] */;
  %447 = @func_1629(%445, %446) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(11, 12, 16), bool]) */;
  %448 = cast(meta[relay.Constant][28] /* ty=Tensor[(882), uint32] */, dtype="uint32") /* ty=Tensor[(882), uint32] */;
  %449 = cast(%var_5796, dtype="float32") /* ty=Tensor[(126), float32] */;
  %450 = reshape(%448, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), uint32] */;
  %451 = reshape(%449, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %452 = @func_3629(%450, %451) /* ty=(Tensor[(9, 14, 7), uint32], Tensor[(2464), float32], Tensor[(126), float32], Tensor[(2464), float64]) */;
  %453 = %447.1;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(126), float32] */;
  %455 = %452.1;
  %456 = cast(%455, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %457 = reshape(%454, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %458 = reshape(%456, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %459 = @func_1324(%457, %458) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(2464), float32]) */;
  %460 = %436.0;
  %461 = atanh(%442) /* ty=Tensor[(8, 6, 9), float64] */;
  %462 = %459.1;
  (%460, meta[relay.Constant][27] /* ty=Tensor[(432), float32] */, %461, %453, %var_5796, %var_5797, %455, meta[relay.Constant][28] /* ty=Tensor[(882), uint32] */, %462)
}

def @func_4556(%var_4554: Tensor[(210), float32]) -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) {
  %463 = @func_2831() /* ty=(Tensor[(2464), float64],) */;
  %464 = cast(%var_4554, dtype="float32") /* ty=Tensor[(210), float32] */;
  %465 = reshape(%464, newshape=[5, 42]) /* ty=Tensor[(5, 42), float32] */;
  %466 = @func_2037(%465) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(5, 42), float32], Tensor[(3, 12), float32], Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %467 = %463.0;
  %468 = %466.4;
  (%467, %468, %var_4554)
}

def @func_4205() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  %469 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
  %470 = @func_4101() /* ty=(Tensor[(2464), float64],) */;
  %471 = %469.0;
  %472 = %470.0;
  (%471, %472)
}

def @func_5626(%var_5613: Tensor[(13, 15, 14), float32], %var_5614: Tensor[(13, 15, 14), float32]) -> (Tensor[(13, 15, 14), float32],) {
  %473 = cast(%var_5614, dtype="float32") /* ty=Tensor[(13, 15, 14), float32] */;
  %474 = shape_of(%var_5613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %475 = cast(%var_5613, dtype="float32") /* ty=Tensor[(13, 15, 14), float32] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %477 = divide(%475, %476) /* ty=Tensor[(13, 15, 14), float32] */;
  (%477,)
}

def @func_8873() -> Tensor[(300, 1), float64] {
  %478 = @func_3149() /* ty=(Tensor[(300, 1), float64],) */;
  %478.0
}

def @func_8562(%var_8519: Tensor[(432), float32]) -> (float32, Tensor[(432), float32], Tensor[(8, 6, 9), float32], Tensor[(2464), float64]) {
  %479 = @func_6864() /* ty=(float32,) */;
  %480 = cast(%var_8519, dtype="float32") /* ty=Tensor[(432), float32] */;
  %481 = reshape(%480, newshape=[8, 6, 9]) /* ty=Tensor[(8, 6, 9), float32] */;
  %482 = @func_4999(%481) /* ty=Tensor[(8, 6, 9), float32] */;
  %483 = cast(%482, dtype="float32") /* ty=Tensor[(8, 6, 9), float32] */;
  %484 = @func_5131() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %485 = %479.0;
  %486 = atan(%483) /* ty=Tensor[(8, 6, 9), float32] */;
  %487 = %484.1;
  (%485, %var_8519, %486, %487)
}

def @func_4546() -> Tensor[(2464), float64] {
  %488 = @func_2308() /* ty=(Tensor[(2464), float64],) */;
  %488.0
}

def @func_8900() -> (float32, float32) {
  %489 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
  %490 = @func_8098() /* ty=(float32,) */;
  %491 = %489.0;
  %492 = %490.0;
  (%491, %492)
}

def @func_1534() -> Tensor[(11, 12, 16), float64] {
  %493 = @func_1184() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */;
  %493.0
}

def @func_11219() -> (Tensor[(2464), float64],) {
  %494 = @func_3728() /* ty=Tensor[(2464), float64] */;
  (%494,)
}

def @func_11517(%var_11480: Tensor[(1, 6, 10), float32]) -> (Tensor[(1, 6, 10), float32], Tensor[(2464), float64]) {
  %495 = cast(%var_11480, dtype="float32") /* ty=Tensor[(1, 6, 10), float32] */;
  %496 = @func_9598() /* ty=(Tensor[(2464), float64],) */;
  %497 = cos(%495) /* ty=Tensor[(1, 6, 10), float32] */;
  %498 = %496.0;
  (%497, %498)
}

def @func_11162(%var_11152: Tensor[(882), uint32]) -> (Tensor[(2464), float64], Tensor[(2464), float32], Tensor[(882), uint32], Tensor[(126), float32]) {
  %499 = @func_9895() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %500 = cast(%var_11152, dtype="uint32") /* ty=Tensor[(882), uint32] */;
  %501 = cast(meta[relay.Constant][29] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %502 = reshape(%500, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), uint32] */;
  %503 = reshape(%501, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %504 = @func_3629(%502, %503) /* ty=(Tensor[(9, 14, 7), uint32], Tensor[(2464), float32], Tensor[(126), float32], Tensor[(2464), float64]) */;
  %505 = %499.1;
  %506 = %504.1;
  (%505, %506, %var_11152, meta[relay.Constant][29] /* ty=Tensor[(126), float32] */)
}

def @func_3574(%var_3552: Tensor[(9, 4), float32]) -> (float32, Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), bool], Tensor[(6, 7, 3), float32], Tensor[(9, 4), float32], Tensor[(2464), float32]) {
  %507 = @func_3320() /* ty=(float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32]) */;
  %508 = @func_2662() /* ty=(Tensor[(2464), float64],) */;
  %509 = @func_2513() /* ty=(Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %510 = %509.1;
  %511 = @func_2280() /* ty=float32 */;
  %512 = cast(%510, dtype="bool") /* ty=Tensor[(5, 6, 10), bool] */;
  %513 = cast(%511, dtype="bool") /* ty=bool */;
  %514 = cast(%511, dtype="float32") /* ty=float32 */;
  %515 = cast(%var_3552, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
  %516 = reshape(%514, newshape=[]) /* ty=float32 */;
  %517 = reshape(%515, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %518 = @func_257(%516, %517) /* ty=(Tensor[(1, 6, 6), bool], Tensor[(6, 7, 3), float32], Tensor[(21, 6), float32]) */;
  %519 = %518.1;
  %520 = cast(%519, dtype="float32") /* ty=Tensor[(6, 7, 3), float32] */;
  %521 = %508.0;
  %522 = cast(%521, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %523 = reshape(%520, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %524 = reshape(%522, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %525 = @func_1324(%523, %524) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(2464), float32]) */;
  %526 = @func_2280() /* ty=float32 */;
  %527 = %507.1;
  %528 = less(%512, %513) /* ty=Tensor[(5, 6, 10), bool] */;
  %529 = %525.3;
  (%526, %527, %521, %528, %519, %var_3552, %529)
}

def @func_3876() -> (Tensor[(2464), float64], Tensor[(3, 12), float32]) {
  %530 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
  %531 = @func_1184() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */;
  %532 = %530.1;
  %533 = %531.3;
  (%532, %533)
}

def @func_2816() -> (float32, Tensor[(11, 12, 16), float64]) {
  %534 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
  %535 = %534.0;
  %536 = @func_1534() /* ty=Tensor[(11, 12, 16), float64] */;
  (%535, %536)
}

def @func_1406() -> (Tensor[(2464), float64],) {
  %537 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
  %538 = %537.0;
  %539 = cast(%538, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %540 = sin(%539) /* ty=Tensor[(2464), float64] */;
  (%540,)
}

def @func_6692() -> Tensor[(11, 12, 16), float64] {
  @func_5856() /* ty=Tensor[(11, 12, 16), float64] */
}

def @func_9238() -> (Tensor[(2464), float64], Tensor[(2464), uint64], Tensor[(2464), float64]) {
  %541 = @func_7993() /* ty=(Tensor[(2464), uint64],) */;
  %542 = @func_2662() /* ty=(Tensor[(2464), float64],) */;
  %543 = @func_5051() /* ty=Tensor[(2464), float64] */;
  %544 = %541.0;
  %545 = %542.0;
  (%543, %544, %545)
}

def @func_4101() -> (Tensor[(2464), float64],) {
  %546 = @func_2892() /* ty=Tensor[(2464), float64] */;
  (%546,)
}

def @func_9432() -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) {
  %547 = @func_4943() /* ty=(Tensor[(2464), float64],) */;
  %548 = cast(meta[relay.Constant][30] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %549 = reshape(%548, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %550 = @func_4556(%549) /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) */;
  %551 = %547.0;
  %552 = %550.0;
  (%551, %552, meta[relay.Constant][30] /* ty=Tensor[(210), float32] */)
}

def @func_4943() -> (Tensor[(2464), float64],) {
  %553 = @func_4725() /* ty=(Tensor[(2464), float64],) */;
  %554 = %553.0;
  (%554,)
}

def @func_3955() -> (Tensor[(2464), bool],) {
  %555 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
  %556 = %555.1;
  %557 = cast(meta[relay.Constant][31] /* ty=Tensor[(2464), float64] */, dtype="bool") /* ty=Tensor[(2464), bool] */;
  %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(1), int32] */;
  %559 = cast(%556, dtype="bool") /* ty=Tensor[(2464), bool] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?), bool] */;
  %561 = logical_and(%559, %560) /* ty=Tensor[(2464), bool] */;
  (%561,)
}

def @func_8332() -> (float32, float32) {
  %562 = @func_5422() /* ty=(float32,) */;
  %563 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
  %564 = %562.0;
  %565 = %563.1;
  (%564, %565)
}

def @func_257(%var_231: float32, %var_232: Tensor[(1, 6, 6), float32]) -> (Tensor[(1, 6, 6), bool], Tensor[(6, 7, 3), float32], Tensor[(21, 6), float32]) {
  %566 = cast(%var_231, dtype="float32") /* ty=float32 */;
  %567 = cast(%var_232, dtype="float32") /* ty=Tensor[(1, 6, 6), float32] */;
  %568 = power(%566, %567) /* ty=Tensor[(1, 6, 6), float32] */;
  %569 = cast(%var_231, dtype="bool") /* ty=bool */;
  %570 = cast(%568, dtype="bool") /* ty=Tensor[(1, 6, 6), bool] */;
  %571 = cast(meta[relay.Constant][32] /* ty=Tensor[(21, 6), float32] */, dtype="float32") /* ty=Tensor[(21, 6), float32] */;
  %572 = reshape(%571, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), float32] */;
  %573 = logical_and(%569, %570) /* ty=Tensor[(1, 6, 6), bool] */;
  %574 = @func_144(%572) /* ty=Tensor[(6, 7, 3), float32] */;
  (%573, %574, meta[relay.Constant][32] /* ty=Tensor[(21, 6), float32] */)
}

def @func_2513() -> (Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) {
  %575 = @func_2080() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %576 = %575.2;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %578 = reshape(%577, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %579 = @func_1855(%578) /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) */;
  %580 = %579.1;
  (%576, %580)
}

def @func_4725() -> (Tensor[(2464), float64],) {
  %581 = @func_4101() /* ty=(Tensor[(2464), float64],) */;
  %582 = %581.0;
  (%582,)
}

def @func_6798() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  %583 = @func_2662() /* ty=(Tensor[(2464), float64],) */;
  %584 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
  %585 = %583.0;
  %586 = %584.0;
  (%585, %586)
}

def @func_9895() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  %587 = @func_5153() /* ty=(Tensor[(2464), float64],) */;
  %588 = @func_3876() /* ty=(Tensor[(2464), float64], Tensor[(3, 12), float32]) */;
  %589 = %587.0;
  %590 = %588.0;
  (%589, %590)
}

def @main(%var_11823: Tensor[(300, 1), float64]) -> (Tensor[(11, 12, 16), float64], Tensor[(300, ?), bool]) {
  %591 = @func_3149() /* ty=(Tensor[(300, 1), float64],) */;
  %592 = %591.0;
  %593 = cast(%var_11823, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %594 = shape_of(%592, dtype="int32") /* ty=Tensor[(2), int32] */;
  %595 = cast(%592, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %597 = @func_5856() /* ty=Tensor[(11, 12, 16), float64] */;
  %598 = logical_and(%595, %596) /* ty=Tensor[(300, ?), bool] */;
  (%597, %598)
}

def @func_7766(%var_7763: Tensor[(1155), uint16]) -> (Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(2464), bool], Tensor[(1155), uint16], Tensor[(126), float32], Tensor[(1155), uint16]) {
  %599 = @func_5344() /* ty=(Tensor[(2464), float64],) */;
  %600 = %599.0;
  %601 = cast(%600, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %602 = reshape(%601, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %603 = @func_3863(%602) /* ty=(Tensor[(2464), bool], Tensor[(5, 6, 10), float64]) */;
  %604 = cast(meta[relay.Constant][33] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %605 = cast(%var_7763, dtype="uint16") /* ty=Tensor[(1155), uint16] */;
  %606 = reshape(%604, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %607 = reshape(%605, newshape=[1155]) /* ty=Tensor[(1155), uint16] */;
  %608 = @func_6960(%606, %607) /* ty=(Tensor[(2464), float64], Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), float64], Tensor[(7, 15, 11), uint16], Tensor[(1155), uint16]) */;
  %609 = @func_6546() /* ty=Tensor[(11, 12, 16), float64] */;
  %610 = %603.0;
  %611 = %608.5;
  (%600, %609, %610, %611, meta[relay.Constant][33] /* ty=Tensor[(126), float32] */, %var_7763)
}

def @func_5131() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  %612 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
  %613 = @func_4943() /* ty=(Tensor[(2464), float64],) */;
  %614 = %612.0;
  %615 = %613.0;
  (%614, %615)
}

def @func_9144(%var_9135: Tensor[(448), float32], %var_9138: Tensor[(210), float32]) -> (Tensor[(300, 1), float64], Tensor[(2464), float64], Tensor[(126), float32], Tensor[(882), uint32], Tensor[(126), float32], Tensor[(7, 4, 16), float32], Tensor[(448), float32], Tensor[(300), float64], Tensor[(210), float32]) {
  %616 = @func_4725() /* ty=(Tensor[(2464), float64],) */;
  %617 = cast(meta[relay.Constant][34] /* ty=Tensor[(882), uint32] */, dtype="uint32") /* ty=Tensor[(882), uint32] */;
  %618 = cast(meta[relay.Constant][35] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %619 = reshape(%617, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), uint32] */;
  %620 = reshape(%618, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %621 = @func_3629(%619, %620) /* ty=(Tensor[(9, 14, 7), uint32], Tensor[(2464), float32], Tensor[(126), float32], Tensor[(2464), float64]) */;
  %622 = cast(%var_9135, dtype="float32") /* ty=Tensor[(448), float32] */;
  %623 = reshape(%622, newshape=[7, 4, 16]) /* ty=Tensor[(7, 4, 16), float32] */;
  %624 = cast(%var_9138, dtype="float32") /* ty=Tensor[(210), float32] */;
  %625 = cast(meta[relay.Constant][35] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %626 = reshape(%624, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %627 = reshape(%625, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %628 = @func_6440(%626, %627) /* ty=(Tensor[(2464), float64], Tensor[(1232, 2), float32], Tensor[(210), float32], Tensor[(300, ?), int16], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(300), float64]) */;
  %629 = @func_8873() /* ty=Tensor[(300, 1), float64] */;
  %630 = %616.0;
  %631 = %621.2;
  %632 = @func_5439(%623) /* ty=Tensor[(7, 4, 16), float32] */;
  %633 = %628.8;
  (%629, %630, %631, meta[relay.Constant][34] /* ty=Tensor[(882), uint32] */, meta[relay.Constant][35] /* ty=Tensor[(126), float32] */, %632, %var_9135, %633, %var_9138)
}

def @func_2280() -> float32 {
  %634 = @func_1184() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */;
  %634.2
}

def @func_6546() -> Tensor[(11, 12, 16), float64] {
  %635 = @func_2816() /* ty=(float32, Tensor[(11, 12, 16), float64]) */;
  %635.1
}

def @func_1271() -> (Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) {
  %636 = @func_1184() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */;
  %637 = cast(meta[relay.Constant][36] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %638 = reshape(%637, newshape=[11, 14, 16]) /* ty=Tensor[(11, 14, 16), float64] */;
  %639 = @func_964(%638) /* ty=(Tensor[(11, 14, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(36), float32], Tensor[(21, 6), float32], float32) */;
  %640 = %636.0;
  %641 = %639.5;
  (%640, %641, meta[relay.Constant][36] /* ty=Tensor[(2464), float64] */)
}

def @func_10335() -> (Tensor[(2464), float64],) {
  %642 = @func_5513() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %643 = %642.0;
  (%643,)
}

def @func_8860() -> Tensor[(11, 12, 16), float64] {
  @func_1534() /* ty=Tensor[(11, 12, 16), float64] */
}

def @func_10685() -> (Tensor[(16, 12, 7), float32], Tensor[(2464), float64], Tensor[(300, 1), float64]) {
  %644 = cast(meta[relay.Constant][37] /* ty=Tensor[(16, 12, 7), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
  %645 = @func_8915() /* ty=(Tensor[(300, 1), float64],) */;
  %646 = asinh(%644) /* ty=Tensor[(16, 12, 7), float32] */;
  %647 = @func_4974() /* ty=Tensor[(2464), float64] */;
  %648 = %645.0;
  (%646, %647, %648)
}

def @func_4600() -> (Tensor[(2464), float64],) {
  %649 = @func_2892() /* ty=Tensor[(2464), float64] */;
  (%649,)
}

def @func_8636() -> Tensor[(3, 12), float32] {
  @func_7967() /* ty=Tensor[(3, 12), float32] */
}

def @func_4386() -> (float32, Tensor[(300, 16), int8], Tensor[(4800), float64]) {
  %650 = cast(meta[relay.Constant][38] /* ty=Tensor[(4800), float64] */, dtype="float64") /* ty=Tensor[(4800), float64] */;
  %651 = reshape(%650, newshape=[300, 16]) /* ty=Tensor[(300, 16), float64] */;
  %652 = @func_4149(%651) /* ty=(Tensor[(300, 16), int8], Tensor[(8, 10, 13), float64]) */;
  %653 = @func_2280() /* ty=float32 */;
  %654 = %652.0;
  (%653, %654, meta[relay.Constant][38] /* ty=Tensor[(4800), float64] */)
}

def @func_964(%var_918: Tensor[(11, 14, 16), float64]) -> (Tensor[(11, 14, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(36), float32], Tensor[(21, 6), float32], float32) {
  %655 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 14, 16), float64] */, dtype="float64") /* ty=Tensor[(11, 14, 16), float64] */;
  %656 = shape_of(%var_918, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%var_918, dtype="float64") /* ty=Tensor[(11, 14, 16), float64] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %659 = cast(meta[relay.Constant][40] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %660 = cast(meta[relay.Constant][41] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %661 = reshape(%659, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float32] */;
  %662 = reshape(%660, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %663 = @func_521(%661, %662) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %664 = cast(-8.91673f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %665 = cast(meta[relay.Constant][41] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %666 = reshape(%664, newshape=[]) /* ty=float32 */;
  %667 = reshape(%665, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %668 = @func_257(%666, %667) /* ty=(Tensor[(1, 6, 6), bool], Tensor[(6, 7, 3), float32], Tensor[(21, 6), float32]) */;
  %669 = multiply(%657, %658) /* ty=Tensor[(11, 14, 16), float64] */;
  %670 = %663.4;
  %671 = %668.2;
  (%669, %670, meta[relay.Constant][40] /* ty=Tensor[(210), float32] */, meta[relay.Constant][41] /* ty=Tensor[(36), float32] */, %671, -8.91673f /* ty=float32 */)
}

def @func_1959() -> (Tensor[(11, 12, 16), float64], Tensor[(11, 12, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(9, 4), float32]) {
  %672 = @func_1184() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */;
  %673 = cast(meta[relay.Constant][42] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %674 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
  %675 = reshape(%673, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float32] */;
  %676 = reshape(%674, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %677 = @func_521(%675, %676) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %678 = %672.0;
  %679 = @func_1534() /* ty=Tensor[(11, 12, 16), float64] */;
  %680 = %677.4;
  (%678, %679, %680, meta[relay.Constant][42] /* ty=Tensor[(210), float32] */, meta[relay.Constant][43] /* ty=Tensor[(9, 4), float32] */)
}

def @func_4879(%var_4866: Tensor[(4, 260), float32]) -> (float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(4, 260), float32]) {
  %681 = @func_2709() /* ty=(Tensor[(2464), float64], float32) */;
  %682 = @func_2662() /* ty=(Tensor[(2464), float64],) */;
  %683 = cast(%var_4866, dtype="float32") /* ty=Tensor[(4, 260), float32] */;
  %684 = cast(%var_4866, dtype="float32") /* ty=Tensor[(4, 260), float32] */;
  %685 = reshape(%683, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %686 = reshape(%684, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %687 = @func_61(%685, %686) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %688 = %681.1;
  %689 = %682.0;
  %690 = %687.1;
  (%688, %689, %690, %var_4866)
}

def @func_7024() -> (Tensor[(300), float64], Tensor[(2464), bool], Tensor[(2464), float64]) {
  %691 = @func_3955() /* ty=(Tensor[(2464), bool],) */;
  %692 = @func_2385() /* ty=(Tensor[(2464), float64],) */;
  %693 = @func_6736() /* ty=Tensor[(300), float64] */;
  %694 = %691.0;
  %695 = %692.0;
  (%693, %694, %695)
}

def @func_4695(%var_4681: Tensor[(8, 10, 13), float64]) -> (Tensor[(300, 1), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), uint16]) {
  %696 = cast(meta[relay.Constant][44] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %697 = cast(meta[relay.Constant][44] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %698 = reshape(%696, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %699 = reshape(%697, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %700 = @func_61(%698, %699) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %701 = %700.1;
  %702 = cast(%var_4681, dtype="uint16") /* ty=Tensor[(8, 10, 13), uint16] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%701, dtype="uint16") /* ty=Tensor[(8, 10, 13), uint16] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %706 = @func_4631() /* ty=Tensor[(300, 1), float64] */;
  %707 = logical_xor(%704, %705) /* ty=Tensor[(8, 10, 13), uint16] */;
  (%706, meta[relay.Constant][44] /* ty=Tensor[(1040), float32] */, %707)
}

def @func_8915() -> (Tensor[(300, 1), float64],) {
  %708 = @func_7509() /* ty=(Tensor[(2464), float64], Tensor[(300, 1), float64]) */;
  %709 = %708.1;
  (%709,)
}

def @func_7233() -> (Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(2464), bool]) {
  %710 = @func_4518() /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16]) */;
  %711 = @func_4101() /* ty=(Tensor[(2464), float64],) */;
  %712 = %711.0;
  %713 = cast(%712, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %714 = reshape(%713, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %715 = @func_3863(%714) /* ty=(Tensor[(2464), bool], Tensor[(5, 6, 10), float64]) */;
  %716 = %710.1;
  %717 = %715.0;
  (%716, %712, %717)
}

def @func_6960(%var_6936: Tensor[(126), float32], %var_6951: Tensor[(1155), uint16]) -> (Tensor[(2464), float64], Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), float64], Tensor[(7, 15, 11), uint16], Tensor[(1155), uint16]) {
  %718 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
  %719 = cast(%var_6936, dtype="float32") /* ty=Tensor[(126), float32] */;
  %720 = reshape(%719, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), float32] */;
  %721 = @func_5513() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %722 = cast(%var_6951, dtype="uint16") /* ty=Tensor[(1155), uint16] */;
  %723 = reshape(%722, newshape=[7, 15, 11]) /* ty=Tensor[(7, 15, 11), uint16] */;
  %724 = @func_3359(%723) /* ty=(Tensor[(7, 15, 11), uint16],) */;
  %725 = %718.1;
  %726 = @func_144(%720) /* ty=Tensor[(6, 7, 3), float32] */;
  %727 = %721.1;
  %728 = %724.0;
  (%725, %726, %var_6936, %727, %728, %var_6951)
}

def @func_4301(%var_4288: Tensor[(300), float64]) -> Tensor[(300), int16] {
  %729 = @func_2080() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %730 = %729.1;
  %731 = cast(%var_4288, dtype="int16") /* ty=Tensor[(300), int16] */;
  %732 = shape_of(%730, dtype="int32") /* ty=Tensor[(1), int32] */;
  %733 = cast(%730, dtype="int16") /* ty=Tensor[(300), int16] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?), int16] */;
  left_shift(%733, %734) /* ty=Tensor[(300), int16] */
}

def @func_7589(%var_7533: Tensor[(11, 12, 16), float64]) -> (Tensor[(11, 12, 16), bool], Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), float64]) {
  %735 = @func_6750() /* ty=Tensor[(11, 12, 16), float64] */;
  %736 = cast(%var_7533, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
  %737 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%735, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %740 = bitwise_and(%738, %739) /* ty=Tensor[(11, 12, 16), int16] */;
  %741 = cast(%740, dtype="bool") /* ty=Tensor[(11, 12, 16), bool] */;
  %742 = shape_of(%var_7533, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%var_7533, dtype="bool") /* ty=Tensor[(11, 12, 16), bool] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %745 = @func_5153() /* ty=(Tensor[(2464), float64],) */;
  %746 = @func_7004() /* ty=(Tensor[(5, 6, 10), float64],) */;
  %747 = greater(%743, %744) /* ty=Tensor[(11, 12, 16), bool] */;
  %748 = @func_3650() /* ty=Tensor[(2464), float64] */;
  %749 = %745.0;
  %750 = %746.0;
  (%747, %748, %749, %750)
}

def @func_8838() -> (float32, Tensor[(9, 4), float32]) {
  %751 = @func_8332() /* ty=(float32, float32) */;
  %752 = @func_1959() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(11, 12, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(9, 4), float32]) */;
  %753 = %751.0;
  %754 = %752.4;
  (%753, %754)
}

def @func_11046(%var_10980: Tensor[(5, 5, 9), float64], %var_11015: Tensor[(126), float32]) -> (Tensor[(5, 5, 9), float64], Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(16, 12, 7), float32], Tensor[(2464), float64], Tensor[(210), float32]) {
  %755 = cast(%var_10980, dtype="float64") /* ty=Tensor[(5, 5, 9), float64] */;
  %756 = cast(meta[relay.Constant][45] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %757 = reshape(%756, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %758 = @func_3863(%757) /* ty=(Tensor[(2464), bool], Tensor[(5, 6, 10), float64]) */;
  %759 = cast(%var_11015, dtype="float32") /* ty=Tensor[(126), float32] */;
  %760 = reshape(%759, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), float32] */;
  %761 = @func_10685() /* ty=(Tensor[(16, 12, 7), float32], Tensor[(2464), float64], Tensor[(300, 1), float64]) */;
  %762 = cast(meta[relay.Constant][46] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %763 = reshape(%762, newshape=[5, 42]) /* ty=Tensor[(5, 42), float32] */;
  %764 = @func_2037(%763) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(5, 42), float32], Tensor[(3, 12), float32], Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %765 = sin(%755) /* ty=Tensor[(5, 5, 9), float64] */;
  %766 = %758.0;
  %767 = @func_144(%760) /* ty=Tensor[(6, 7, 3), float32] */;
  %768 = %761.0;
  %769 = %764.4;
  (%765, %766, meta[relay.Constant][45] /* ty=Tensor[(2464), float64] */, %767, %var_11015, %768, %769, meta[relay.Constant][46] /* ty=Tensor[(210), float32] */)
}

def @func_6201(%var_6195: Tensor[(5, 12, 1), float32]) -> (Tensor[(5, 12, ?), float32],) {
  %770 = cast(meta[relay.Constant][47] /* ty=Tensor[(5, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 1), float32] */;
  %771 = shape_of(%var_6195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%var_6195, dtype="float32") /* ty=Tensor[(5, 12, 1), float32] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %774 = power(%772, %773) /* ty=Tensor[(5, 12, ?), float32] */;
  (%774,)
}

def @func_9080(%var_9077: Tensor[(11, 6, 10), float32]) -> Tensor[(11, 6, 10), float32] {
  %775 = cast(%var_9077, dtype="float32") /* ty=Tensor[(11, 6, 10), float32] */;
  exp(%775) /* ty=Tensor[(11, 6, 10), float32] */
}

def @func_9413(%var_9408: Tensor[(300), float64]) -> (Tensor[(300), bool],) {
  %776 = @func_8063() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300), float64], Tensor[(11, 12, 16), float64]) */;
  %777 = %776.3;
  %778 = cast(%var_9408, dtype="bool") /* ty=Tensor[(300), bool] */;
  %779 = shape_of(%777, dtype="int32") /* ty=Tensor[(1), int32] */;
  %780 = cast(%777, dtype="bool") /* ty=Tensor[(300), bool] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?), bool] */;
  %782 = greater(%780, %781) /* ty=Tensor[(300), bool] */;
  (%782,)
}

def @func_10082() -> (Tensor[(2464), float64],) {
  %783 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
  %784 = %783.0;
  (%784,)
}

def @func_2385() -> (Tensor[(2464), float64],) {
  %785 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
  %786 = %785.0;
  (%786,)
}

def @func_2662() -> (Tensor[(2464), float64],) {
  %787 = @func_2174() /* ty=(Tensor[(2464), float64],) */;
  %788 = %787.0;
  (%788,)
}

def @func_10119() -> Tensor[(2464), float64] {
  %789 = @func_4518() /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16]) */;
  %789.2
}

def @func_61(%var_44: Tensor[(8, 10, 13), float32], %var_45: Tensor[(8, 10, 13), float32]) -> (Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) {
  %790 = cast(%var_45, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
  %791 = shape_of(%var_44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%var_44, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %794 = cast(%var_45, dtype="float64") /* ty=Tensor[(8, 10, 13), float64] */;
  %795 = mod(%792, %793) /* ty=Tensor[(8, 10, 13), float32] */;
  %796 = acosh(%794) /* ty=Tensor[(8, 10, 13), float64] */;
  (%795, %796)
}

def @func_9352() -> Tensor[(2464), float64] {
  %797 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
  %797.0
}

def @func_3863(%var_3842: Tensor[(2464), float64]) -> (Tensor[(2464), bool], Tensor[(5, 6, 10), float64]) {
  %798 = @func_3320() /* ty=(float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32]) */;
  %799 = %798.1;
  %800 = cast(%var_3842, dtype="bool") /* ty=Tensor[(2464), bool] */;
  %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(1), int32] */;
  %802 = cast(%799, dtype="bool") /* ty=Tensor[(2464), bool] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?), bool] */;
  %804 = @func_2080() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %805 = greater_equal(%802, %803) /* ty=Tensor[(2464), bool] */;
  %806 = %804.3;
  (%805, %806)
}

def @func_9201() -> Tensor[(2464), float64] {
  %807 = @func_4600() /* ty=(Tensor[(2464), float64],) */;
  %807.0
}

def @func_5834() -> Tensor[(2464), float64] {
  %808 = @func_4600() /* ty=(Tensor[(2464), float64],) */;
  %808.0
}

def @func_4518() -> (Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16]) {
  %809 = @func_3320() /* ty=(float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32]) */;
  %810 = %809.1;
  %811 = cast(%810, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %812 = reshape(%811, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %813 = @func_3863(%812) /* ty=(Tensor[(2464), bool], Tensor[(5, 6, 10), float64]) */;
  %814 = @func_2308() /* ty=(Tensor[(2464), float64],) */;
  %815 = @func_3207() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16], float32, Tensor[(210), float32], Tensor[(36), float32], Tensor[(11, 12, 16), float64], Tensor[(42, 4), bool]) */;
  %816 = %813.1;
  %817 = %814.0;
  %818 = %815.2;
  (%810, %816, %817, %818)
}

def @func_5856() -> Tensor[(11, 12, 16), float64] {
  @func_1534() /* ty=Tensor[(11, 12, 16), float64] */
}

def @func_11742() -> (Tensor[(11, 12, 16), float64], Tensor[(882), uint32], Tensor[(448, 1), float32], Tensor[(5, 42), float32], Tensor[(2464), float64]) {
  %819 = cast(meta[relay.Constant][48] /* ty=Tensor[(448, 1), float32] */, dtype="float32") /* ty=Tensor[(448, 1), float32] */;
  %820 = cast(meta[relay.Constant][49] /* ty=Tensor[(5, 42), float32] */, dtype="float32") /* ty=Tensor[(5, 42), float32] */;
  %821 = reshape(%819, newshape=[448]) /* ty=Tensor[(448), float32] */;
  %822 = reshape(%820, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %823 = @func_9144(%821, %822) /* ty=(Tensor[(300, 1), float64], Tensor[(2464), float64], Tensor[(126), float32], Tensor[(882), uint32], Tensor[(126), float32], Tensor[(7, 4, 16), float32], Tensor[(448), float32], Tensor[(300), float64], Tensor[(210), float32]) */;
  %824 = @func_4725() /* ty=(Tensor[(2464), float64],) */;
  %825 = @func_6750() /* ty=Tensor[(11, 12, 16), float64] */;
  %826 = %823.3;
  %827 = %824.0;
  (%825, %826, meta[relay.Constant][48] /* ty=Tensor[(448, 1), float32] */, meta[relay.Constant][49] /* ty=Tensor[(5, 42), float32] */, %827)
}

def @func_3207() -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16], float32, Tensor[(210), float32], Tensor[(36), float32], Tensor[(11, 12, 16), float64], Tensor[(42, 4), bool]) {
  %828 = @func_2385() /* ty=(Tensor[(2464), float64],) */;
  %829 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
  %830 = @func_2280() /* ty=float32 */;
  %831 = cast(%830, dtype="uint16") /* ty=uint16 */;
  %832 = cast(meta[relay.Constant][50] /* ty=Tensor[(7, 3, 6), float32] */, dtype="uint16") /* ty=Tensor[(7, 3, 6), uint16] */;
  %833 = cast(meta[relay.Constant][51] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %834 = cast(meta[relay.Constant][52] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %835 = reshape(%833, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float32] */;
  %836 = reshape(%834, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %837 = @func_521(%835, %836) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %838 = %829.0;
  %839 = cast(%838, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %840 = cast(%838, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %841 = cast(meta[relay.Constant][53] /* ty=Tensor[(42, 4), bool] */, dtype="bool") /* ty=Tensor[(42, 4), bool] */;
  %842 = reshape(%839, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %843 = reshape(%840, newshape=[2464]) /* ty=Tensor[(2464), float32] */;
  %844 = reshape(%841, newshape=[168]) /* ty=Tensor[(168), bool] */;
  %845 = @func_2354(%842, %843, %844) /* ty=(Tensor[(2464), bool], Tensor[(11, 12, 16), float64], Tensor[(2464), int32], Tensor[(2, 12, 7), bool], Tensor[(168), bool]) */;
  %846 = %828.0;
  %847 = bitwise_or(%831, %832) /* ty=Tensor[(7, 3, 6), uint16] */;
  %848 = %837.6;
  %849 = %845.1;
  (%846, %838, %847, %848, meta[relay.Constant][51] /* ty=Tensor[(210), float32] */, meta[relay.Constant][52] /* ty=Tensor[(36), float32] */, %849, meta[relay.Constant][53] /* ty=Tensor[(42, 4), bool] */)
}

def @func_3063(%var_3029: Tensor[(63, 2), float32]) -> (Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(300), float64], Tensor[(6, 7, 3), float32], Tensor[(63, 2), float32], Tensor[(14), uint16], Tensor[(42, 4), uint16], Tensor[(36), float32], Tensor[(3, 12), float32], Tensor[(11, 12, 16), float64]) {
  %850 = cast(meta[relay.Constant][54] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %851 = cast(meta[relay.Constant][54] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %852 = reshape(%850, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %853 = reshape(%851, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %854 = @func_61(%852, %853) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %855 = @func_2080() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %856 = %855.1;
  %857 = cast(%856, dtype="float64") /* ty=Tensor[(300), float64] */;
  %858 = cast(%var_3029, dtype="float32") /* ty=Tensor[(63, 2), float32] */;
  %859 = cast(meta[relay.Constant][55] /* ty=Tensor[(14), uint16] */, dtype="uint16") /* ty=Tensor[(14), uint16] */;
  %860 = cast(meta[relay.Constant][56] /* ty=Tensor[(42, 4), uint16] */, dtype="uint16") /* ty=Tensor[(42, 4), uint16] */;
  %861 = cast(%856, dtype="float64") /* ty=Tensor[(300), float64] */;
  %862 = cast(meta[relay.Constant][57] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %863 = reshape(%858, newshape=[1, 126]) /* ty=Tensor[(1, 126), float32] */;
  %864 = reshape(%859, newshape=[14]) /* ty=Tensor[(14), uint16] */;
  %865 = reshape(%860, newshape=[168]) /* ty=Tensor[(168), uint16] */;
  %866 = reshape(%861, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %867 = reshape(%862, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %868 = @func_2237(%863, %864, %865, %866, %867) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(1, 126), float32], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(210), float32], Tensor[(36), float32], Tensor[(?, 9, 3), uint64], Tensor[(8, 9, 3), float32]) */;
  %869 = @func_1184() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */;
  %870 = @func_2080() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %871 = %854.1;
  %872 = acosh(%857) /* ty=Tensor[(300), float64] */;
  %873 = %868.0;
  %874 = %869.3;
  %875 = %870.0;
  (%871, meta[relay.Constant][54] /* ty=Tensor[(1040), float32] */, %872, %873, %var_3029, meta[relay.Constant][55] /* ty=Tensor[(14), uint16] */, meta[relay.Constant][56] /* ty=Tensor[(42, 4), uint16] */, meta[relay.Constant][57] /* ty=Tensor[(36), float32] */, %874, %875)
}

def @func_3650() -> Tensor[(2464), float64] {
  %876 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
  %876.0
}

def @func_5455(%var_5449: Tensor[(10, 15, 15), float64], %var_5450: Tensor[(10, 15, 15), float64]) -> Tensor[(10, 15, 15), float64] {
  %877 = cast(%var_5450, dtype="float64") /* ty=Tensor[(10, 15, 15), float64] */;
  %878 = shape_of(%var_5449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(%var_5449, dtype="float64") /* ty=Tensor[(10, 15, 15), float64] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%879, %880) /* ty=Tensor[(10, 15, 15), float64] */
}

def @func_8063() -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300), float64], Tensor[(11, 12, 16), float64]) {
  %881 = @func_6014() /* ty=(Tensor[(2464), float64],) */;
  %882 = cast(meta[relay.Constant][58] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %883 = reshape(%882, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %884 = @func_1855(%883) /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) */;
  %885 = @func_4120() /* ty=Tensor[(2464), float64] */;
  %886 = %881.0;
  %887 = @func_6692() /* ty=Tensor[(11, 12, 16), float64] */;
  %888 = %884.2;
  %889 = @func_6546() /* ty=Tensor[(11, 12, 16), float64] */;
  (%885, %886, %887, %888, meta[relay.Constant][58] /* ty=Tensor[(300), float64] */, %889)
}

def @func_2620(%var_2615: Tensor[(11, 12, 16), float64]) -> (Tensor[(5, 6, 10), float64], Tensor[(5, 60), float64], Tensor[(11, 12, 16), int16]) {
  %890 = cast(meta[relay.Constant][59] /* ty=Tensor[(5, 60), float64] */, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
  %891 = reshape(%890, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %892 = @func_1855(%891) /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) */;
  %893 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
  %894 = %893.0;
  %895 = cast(%var_2615, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
  %896 = shape_of(%894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %897 = cast(%894, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
  %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %899 = %892.1;
  %900 = subtract(%897, %898) /* ty=Tensor[(11, 12, 16), int16] */;
  (%899, meta[relay.Constant][59] /* ty=Tensor[(5, 60), float64] */, %900)
}

def @func_7893() -> (Tensor[(2464), float64], Tensor[(300, 1), float64]) {
  %901 = @func_6014() /* ty=(Tensor[(2464), float64],) */;
  %902 = %901.0;
  %903 = @func_3331() /* ty=Tensor[(300, 1), float64] */;
  (%902, %903)
}

def @func_4999(%var_4987: Tensor[(8, 6, 9), float32]) -> Tensor[(8, 6, 9), float32] {
  %904 = cast(%var_4987, dtype="float32") /* ty=Tensor[(8, 6, 9), float32] */;
  %905 = sin(%904) /* ty=Tensor[(8, 6, 9), float32] */;
  %906 = cast(%905, dtype="float32") /* ty=Tensor[(8, 6, 9), float32] */;
  %907 = shape_of(%var_4987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %908 = cast(%var_4987, dtype="float32") /* ty=Tensor[(8, 6, 9), float32] */;
  %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%908, %909) /* ty=Tensor[(8, 6, 9), float32] */
}

def @func_11555() -> (Tensor[(5, 6, 10), float64],) {
  %910 = @func_4518() /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16]) */;
  %911 = %910.1;
  (%911,)
}

def @func_11616() -> (Tensor[(11, 12, 16), float64], float32, Tensor[(5, 6, 10), float64]) {
  %912 = @func_3786() /* ty=(Tensor[(11, 12, 16), float64],) */;
  %913 = @func_7442() /* ty=(float32,) */;
  %914 = %912.0;
  %915 = %913.0;
  %916 = @func_7450() /* ty=Tensor[(5, 6, 10), float64] */;
  (%914, %915, %916)
}

def @func_5513() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  %917 = @func_5344() /* ty=(Tensor[(2464), float64],) */;
  %918 = @func_4943() /* ty=(Tensor[(2464), float64],) */;
  %919 = %917.0;
  %920 = %918.0;
  (%919, %920)
}

def @func_5645() -> Tensor[(300), float64] {
  %921 = @func_2080() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %921.1
}

def @func_6864() -> (float32,) {
  %922 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
  %923 = %922.0;
  (%923,)
}

def @func_1047(%var_1037: Tensor[(2, 12, 7), bool]) -> Tensor[(2, 12, 7), bool] {
  %924 = cast(meta[relay.Constant][60] /* ty=Tensor[(2, 12, 7), bool] */, dtype="bool") /* ty=Tensor[(2, 12, 7), bool] */;
  %925 = shape_of(%var_1037, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(%var_1037, dtype="bool") /* ty=Tensor[(2, 12, 7), bool] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%926, %927) /* ty=Tensor[(2, 12, 7), bool] */
}

def @func_1755(%var_1728: Tensor[(1, 126), float32], %var_1751: Tensor[(2112, 1), float64]) -> (Tensor[(2464), float64], Tensor[(126), float32], Tensor[(1, 126), float32], Tensor[(2, 12, 7), bool], Tensor[(1, 168), bool], Tensor[(11, 12, 16), bool], Tensor[(2112, 1), float64]) {
  %928 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
  %929 = cast(%var_1728, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %930 = %928.0;
  %931 = cast(%930, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %932 = reshape(%929, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %933 = reshape(%931, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %934 = @func_1324(%932, %933) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(2464), float32]) */;
  %935 = cast(meta[relay.Constant][61] /* ty=Tensor[(1, 168), bool] */, dtype="bool") /* ty=Tensor[(1, 168), bool] */;
  %936 = reshape(%935, newshape=[2, 12, 7]) /* ty=Tensor[(2, 12, 7), bool] */;
  %937 = %934.1;
  %938 = cast(%937, dtype="float32") /* ty=Tensor[(126), float32] */;
  %939 = cast(%var_1751, dtype="float64") /* ty=Tensor[(2112, 1), float64] */;
  %940 = reshape(%938, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %941 = reshape(%939, newshape=[11, 12, 16]) /* ty=Tensor[(11, 12, 16), float64] */;
  %942 = @func_1629(%940, %941) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(11, 12, 16), bool]) */;
  %943 = @func_1047(%936) /* ty=Tensor[(2, 12, 7), bool] */;
  %944 = %942.2;
  (%930, %937, %var_1728, %943, meta[relay.Constant][61] /* ty=Tensor[(1, 168), bool] */, %944, %var_1751)
}

def @func_8387() -> (float32,) {
  %945 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
  %946 = %945.0;
  (%946,)
}

def @func_11790() -> (float32, Tensor[(2464), float64]) {
  %947 = @func_9069() /* ty=(Tensor[(8, 10, 13), float64], float32) */;
  %948 = @func_2174() /* ty=(Tensor[(2464), float64],) */;
  %949 = %947.1;
  %950 = %948.0;
  (%949, %950)
}

def @func_3331() -> Tensor[(300, 1), float64] {
  %951 = @func_3149() /* ty=(Tensor[(300, 1), float64],) */;
  %951.0
}

def @func_3320() -> (float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32]) {
  %952 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
  %953 = cast(meta[relay.Constant][62] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %954 = reshape(%953, newshape=[5, 42]) /* ty=Tensor[(5, 42), float32] */;
  %955 = @func_2037(%954) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(5, 42), float32], Tensor[(3, 12), float32], Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %956 = @func_2280() /* ty=float32 */;
  %957 = %952.0;
  %958 = %955.0;
  (%956, %957, %958, meta[relay.Constant][62] /* ty=Tensor[(210), float32] */)
}

def @func_3359(%var_3353: Tensor[(7, 15, 11), uint16]) -> (Tensor[(7, 15, 11), uint16],) {
  %959 = cast(meta[relay.Constant][63] /* ty=Tensor[(7, 15, 11), uint16] */, dtype="uint16") /* ty=Tensor[(7, 15, 11), uint16] */;
  %960 = shape_of(%var_3353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %961 = cast(%var_3353, dtype="uint16") /* ty=Tensor[(7, 15, 11), uint16] */;
  %962 = dyn.reshape(%959, %960, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %963 = multiply(%961, %962) /* ty=Tensor[(7, 15, 11), uint16] */;
  (%963,)
}

def @func_7004() -> (Tensor[(5, 6, 10), float64],) {
  %964 = @func_2513() /* ty=(Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %965 = %964.1;
  %966 = cast(%965, dtype="float64") /* ty=Tensor[(5, 6, 10), float64] */;
  %967 = log10(%966) /* ty=Tensor[(5, 6, 10), float64] */;
  (%967,)
}

def @func_2037(%var_2012: Tensor[(5, 42), float32]) -> (Tensor[(8, 10, 13), float64], Tensor[(5, 42), float32], Tensor[(3, 12), float32], Tensor[(2464), float64], Tensor[(2464), float64]) {
  %968 = cast(%var_2012, dtype="float32") /* ty=Tensor[(5, 42), float32] */;
  %969 = cast(meta[relay.Constant][64] /* ty=Tensor[(3, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %970 = reshape(%968, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float32] */;
  %971 = reshape(%969, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %972 = @func_521(%970, %971) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %973 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
  %974 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
  %975 = %974.0;
  %976 = cast(%975, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %977 = %972.0;
  %978 = %973.0;
  %979 = sigmoid(%976) /* ty=Tensor[(2464), float64] */;
  (%977, %var_2012, meta[relay.Constant][64] /* ty=Tensor[(3, 12), float32] */, %978, %979)
}

def @func_2709() -> (Tensor[(2464), float64], float32) {
  %980 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
  %981 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
  %982 = %980.0;
  %983 = %981.0;
  (%982, %983)
}

def @func_1855(%var_1843: Tensor[(300), float64]) -> (Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) {
  %984 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
  %985 = cast(%var_1843, dtype="float64") /* ty=Tensor[(300), float64] */;
  %986 = reshape(%985, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float64] */;
  %987 = %984.0;
  %988 = @func_1097(%986) /* ty=Tensor[(5, 6, 10), float64] */;
  (%987, %988, %var_1843)
}

def @func_5344() -> (Tensor[(2464), float64],) {
  %989 = @func_4943() /* ty=(Tensor[(2464), float64],) */;
  %990 = %989.0;
  (%990,)
}

def @func_9949() -> (Tensor[(2464), float64], Tensor[(300, 16), int8], Tensor[(300, 1), float64]) {
  %991 = @func_4600() /* ty=(Tensor[(2464), float64],) */;
  %992 = @func_4386() /* ty=(float32, Tensor[(300, 16), int8], Tensor[(4800), float64]) */;
  %993 = @func_8915() /* ty=(Tensor[(300, 1), float64],) */;
  %994 = %991.0;
  %995 = %992.1;
  %996 = %993.0;
  (%994, %995, %996)
}

def @func_11088() -> Tensor[(2464), float32] {
  %997 = @func_2385() /* ty=(Tensor[(2464), float64],) */;
  %998 = %997.0;
  %999 = cast(%998, dtype="float32") /* ty=Tensor[(2464), float32] */;
  asin(%999) /* ty=Tensor[(2464), float32] */
}

def @func_8239() -> (Tensor[(5, 6, 10), float64], Tensor[(2464), float64]) {
  %1000 = @func_8063() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300), float64], Tensor[(11, 12, 16), float64]) */;
  %1001 = @func_7450() /* ty=Tensor[(5, 6, 10), float64] */;
  %1002 = %1000.0;
  (%1001, %1002)
}

def @func_6440(%var_6357: Tensor[(210), float32], %var_6404: Tensor[(126), float32]) -> (Tensor[(2464), float64], Tensor[(1232, 2), float32], Tensor[(210), float32], Tensor[(300, ?), int16], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(300), float64]) {
  %1003 = cast(meta[relay.Constant][65] /* ty=Tensor[(1232, 2), float32] */, dtype="float32") /* ty=Tensor[(1232, 2), float32] */;
  %1004 = cast(%var_6357, dtype="float32") /* ty=Tensor[(210), float32] */;
  %1005 = reshape(%1003, newshape=[2464]) /* ty=Tensor[(2464), float32] */;
  %1006 = reshape(%1004, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %1007 = @func_6108(%1005, %1006) /* ty=(Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(210), float32]) */;
  %1008 = @func_4631() /* ty=Tensor[(300, 1), float64] */;
  %1009 = cast(%1008, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %1010 = atan(%1009) /* ty=Tensor[(300, 1), float32] */;
  %1011 = cast(%1008, dtype="int16") /* ty=Tensor[(300, 1), int16] */;
  %1012 = shape_of(%1010, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1013 = cast(%1010, dtype="int16") /* ty=Tensor[(300, 1), int16] */;
  %1014 = dyn.reshape(%1011, %1012, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %1015 = @func_2385() /* ty=(Tensor[(2464), float64],) */;
  %1016 = cast(%var_6404, dtype="float32") /* ty=Tensor[(126), float32] */;
  %1017 = reshape(%1016, newshape=[63, 2]) /* ty=Tensor[(63, 2), float32] */;
  %1018 = @func_3063(%1017) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(300), float64], Tensor[(6, 7, 3), float32], Tensor[(63, 2), float32], Tensor[(14), uint16], Tensor[(42, 4), uint16], Tensor[(36), float32], Tensor[(3, 12), float32], Tensor[(11, 12, 16), float64]) */;
  %1019 = cast(%var_6404, dtype="float32") /* ty=Tensor[(126), float32] */;
  %1020 = %1007.1;
  %1021 = cast(%1020, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %1022 = reshape(%1019, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %1023 = reshape(%1021, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %1024 = @func_1324(%1022, %1023) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(2464), float32]) */;
  %1025 = left_shift(%1013, %1014) /* ty=Tensor[(300, ?), int16] */;
  %1026 = %1015.0;
  %1027 = %1018.5;
  %1028 = %1024.2;
  %1029 = @func_5645() /* ty=Tensor[(300), float64] */;
  (%1020, meta[relay.Constant][65] /* ty=Tensor[(1232, 2), float32] */, %var_6357, %1025, %1026, %1027, %var_6404, %1028, %1029)
}

def @func_10162() -> Tensor[(2464), float64] {
  @func_9847() /* ty=Tensor[(2464), float64] */
}

def @func_10858() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  %1030 = @func_7659() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %1031 = @func_5153() /* ty=(Tensor[(2464), float64],) */;
  %1032 = %1030.1;
  %1033 = %1031.0;
  (%1032, %1033)
}

def @func_5193(%var_5174: int8, %var_5175: Tensor[(16, 11, 1), int8]) -> Tensor[(16, 11, 1), int8] {
  %1034 = cast(%var_5174, dtype="int8") /* ty=int8 */;
  %1035 = cast(%var_5175, dtype="int8") /* ty=Tensor[(16, 11, 1), int8] */;
  add(%1034, %1035) /* ty=Tensor[(16, 11, 1), int8] */
}

def @func_9702(%var_9687: Tensor[(13, 5, 13), uint64], %var_9697: Tensor[(13, 5, 13), uint64]) -> (Tensor[(13, 5, 13), uint64], Tensor[(2464), float64], Tensor[(13, 5, 13), bool]) {
  %1036 = cast(%var_9687, dtype="uint64") /* ty=Tensor[(13, 5, 13), uint64] */;
  %1037 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(13, 5, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1038 = cast(meta[relay.Constant][66] /* ty=Tensor[(13, 5, 13), uint64] */, dtype="uint64") /* ty=Tensor[(13, 5, 13), uint64] */;
  %1039 = dyn.reshape(%1036, %1037, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1040 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
  %1041 = cast(%var_9697, dtype="bool") /* ty=Tensor[(13, 5, 13), bool] */;
  %1042 = shape_of(%var_9687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1043 = cast(%var_9687, dtype="bool") /* ty=Tensor[(13, 5, 13), bool] */;
  %1044 = dyn.reshape(%1041, %1042, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1045 = left_shift(%1038, %1039) /* ty=Tensor[(13, 5, 13), uint64] */;
  %1046 = %1040.0;
  %1047 = logical_or(%1043, %1044) /* ty=Tensor[(13, 5, 13), bool] */;
  (%1045, %1046, %1047)
}

def @func_10520(%var_10486: Tensor[(4800), float64]) -> (Tensor[(300), float64], Tensor[(4800), int32], Tensor[(2464), float64]) {
  %1048 = @func_8063() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300), float64], Tensor[(11, 12, 16), float64]) */;
  %1049 = @func_6697() /* ty=Tensor[(4800), float64] */;
  %1050 = cast(%var_10486, dtype="int32") /* ty=Tensor[(4800), int32] */;
  %1051 = shape_of(%1049, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1052 = cast(%1049, dtype="int32") /* ty=Tensor[(4800), int32] */;
  %1053 = dyn.reshape(%1050, %1051, newshape=[]) /* ty=Tensor[(?), int32] */;
  %1054 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
  %1055 = %1048.3;
  %1056 = maximum(%1052, %1053) /* ty=Tensor[(4800), int32] */;
  %1057 = %1054.0;
  (%1055, %1056, %1057)
}

def @func_2354(%var_2327: Tensor[(2464), float64], %var_2342: Tensor[(2464), float32], %var_2351: Tensor[(168), bool]) -> (Tensor[(2464), bool], Tensor[(11, 12, 16), float64], Tensor[(2464), int32], Tensor[(2, 12, 7), bool], Tensor[(168), bool]) {
  %1058 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
  %1059 = %1058.0;
  %1060 = cast(%var_2327, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %1061 = shape_of(%1059, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1062 = cast(%1059, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %1063 = dyn.reshape(%1060, %1061, newshape=[]) /* ty=Tensor[(?), float32] */;
  %1064 = maximum(%1062, %1063) /* ty=Tensor[(2464), float32] */;
  %1065 = cast(%var_2327, dtype="bool") /* ty=Tensor[(2464), bool] */;
  %1066 = shape_of(%1064, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1067 = cast(%1064, dtype="bool") /* ty=Tensor[(2464), bool] */;
  %1068 = dyn.reshape(%1065, %1066, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1069 = cast(%var_2342, dtype="int32") /* ty=Tensor[(2464), int32] */;
  %1070 = shape_of(%1064, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1071 = cast(%1064, dtype="int32") /* ty=Tensor[(2464), int32] */;
  %1072 = dyn.reshape(%1069, %1070, newshape=[]) /* ty=Tensor[(?), int32] */;
  %1073 = cast(%var_2351, dtype="bool") /* ty=Tensor[(168), bool] */;
  %1074 = reshape(%1073, newshape=[2, 12, 7]) /* ty=Tensor[(2, 12, 7), bool] */;
  %1075 = not_equal(%1067, %1068) /* ty=Tensor[(2464), bool] */;
  %1076 = @func_1534() /* ty=Tensor[(11, 12, 16), float64] */;
  %1077 = bitwise_or(%1071, %1072) /* ty=Tensor[(2464), int32] */;
  %1078 = @func_1047(%1074) /* ty=Tensor[(2, 12, 7), bool] */;
  (%1075, %1076, %1077, %1078, %var_2351)
}

def @func_4631() -> Tensor[(300, 1), float64] {
  %1079 = @func_2513() /* ty=(Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %1079.0
}

def @func_2003() -> (Tensor[(3, 12), float32],) {
  %1080 = @func_1184() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */;
  %1081 = %1080.3;
  (%1081,)
}

def @func_4120() -> Tensor[(2464), float64] {
  %1082 = @func_2662() /* ty=(Tensor[(2464), float64],) */;
  %1082.0
}

def @func_5439(%var_5433: Tensor[(7, 4, 16), float32]) -> Tensor[(7, 4, 16), float32] {
  %1083 = cast(%var_5433, dtype="float32") /* ty=Tensor[(7, 4, 16), float32] */;
  sinh(%1083) /* ty=Tensor[(7, 4, 16), float32] */
}

def @func_6108(%var_6061: Tensor[(2464), float32], %var_6086: Tensor[(210), float32]) -> (Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(210), float32]) {
  %1084 = @func_6014() /* ty=(Tensor[(2464), float64],) */;
  %1085 = %1084.0;
  %1086 = cast(meta[relay.Constant][67] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %1087 = shape_of(%1085, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1088 = cast(%1085, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %1089 = dyn.reshape(%1086, %1087, newshape=[]) /* ty=Tensor[(?), float64] */;
  %1090 = multiply(%1088, %1089) /* ty=Tensor[(2464), float64] */;
  %1091 = cast(%1090, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %1092 = acosh(%1091) /* ty=Tensor[(2464), float32] */;
  %1093 = cast(%var_6061, dtype="bool") /* ty=Tensor[(2464), bool] */;
  %1094 = shape_of(%1092, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1095 = cast(%1092, dtype="bool") /* ty=Tensor[(2464), bool] */;
  %1096 = dyn.reshape(%1093, %1094, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1097 = cast(%var_6086, dtype="float32") /* ty=Tensor[(210), float32] */;
  %1098 = reshape(%1097, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %1099 = @func_4556(%1098) /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) */;
  %1100 = less(%1095, %1096) /* ty=Tensor[(2464), bool] */;
  %1101 = %1099.1;
  (%1100, %1101, %var_6086)
}

def @func_4626() -> Tensor[(2464), bool] {
  %1102 = @func_3955() /* ty=(Tensor[(2464), bool],) */;
  %1102.0
}

def @func_5302(%var_5279: Tensor[(10, 11, 5), float64], %var_5283: Tensor[(1040), float64]) -> (Tensor[(10, 11, 5), float64], Tensor[(300, 1), float64], Tensor[(1040), float64], Tensor[(300, 16), int8]) {
  %1103 = cast(%var_5279, dtype="float64") /* ty=Tensor[(10, 11, 5), float64] */;
  %1104 = cast(%var_5283, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %1105 = reshape(%1104, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float64] */;
  %1106 = @func_4695(%1105) /* ty=(Tensor[(300, 1), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), uint16]) */;
  %1107 = @func_4386() /* ty=(float32, Tensor[(300, 16), int8], Tensor[(4800), float64]) */;
  %1108 = asinh(%1103) /* ty=Tensor[(10, 11, 5), float64] */;
  %1109 = %1106.0;
  %1110 = %1107.1;
  (%1108, %1109, %var_5283, %1110)
}

def @func_4074(%var_4052: Tensor[(1408), float32]) -> (Tensor[(11, 13, 4), float64], Tensor[(11, 13, 4), uint32], Tensor[(2464), float64], Tensor[(8, 11, 16), float64], Tensor[(1408), float32], Tensor[(2464), float64], Tensor[(2, 12, 7), bool], Tensor[(168), bool]) {
  %1111 = cast(meta[relay.Constant][68] /* ty=uint64 */, dtype="bool") /* ty=bool */;
  %1112 = cast(meta[relay.Constant][69] /* ty=Tensor[(11, 13, 4), uint64] */, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
  %1113 = greater(%1111, %1112) /* ty=Tensor[(11, 13, 4), bool] */;
  %1114 = cast(%1113, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
  %1115 = cosh(%1114) /* ty=Tensor[(11, 13, 4), float64] */;
  %1116 = cast(%1115, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
  %1117 = cast(meta[relay.Constant][70] /* ty=Tensor[(11, 13, 4), float64] */, dtype="uint32") /* ty=Tensor[(11, 13, 4), uint32] */;
  %1118 = shape_of(%1115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1119 = cast(%1115, dtype="uint32") /* ty=Tensor[(11, 13, 4), uint32] */;
  %1120 = dyn.reshape(%1117, %1118, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1121 = @func_2662() /* ty=(Tensor[(2464), float64],) */;
  %1122 = cast(%var_4052, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %1123 = reshape(%1122, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
  %1124 = @func_3423(%1123) /* ty=(Tensor[(8, 11, 16), float64],) */;
  %1125 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
  %1126 = cast(meta[relay.Constant][71] /* ty=Tensor[(168), bool] */, dtype="bool") /* ty=Tensor[(168), bool] */;
  %1127 = reshape(%1126, newshape=[2, 12, 7]) /* ty=Tensor[(2, 12, 7), bool] */;
  %1128 = asinh(%1116) /* ty=Tensor[(11, 13, 4), float64] */;
  %1129 = bitwise_xor(%1119, %1120) /* ty=Tensor[(11, 13, 4), uint32] */;
  %1130 = %1121.0;
  %1131 = %1124.0;
  %1132 = %1125.0;
  %1133 = @func_1047(%1127) /* ty=Tensor[(2, 12, 7), bool] */;
  (%1128, %1129, %1130, %1131, %var_4052, %1132, %1133, meta[relay.Constant][71] /* ty=Tensor[(168), bool] */)
}

def @func_8149(%var_8106: Tensor[(13, 11, 2), int32], %var_8107: Tensor[(13, 11, 2), int32]) -> (Tensor[(2464), float64], Tensor[(210), float32], Tensor[(13, 11, 2), float64]) {
  %1134 = cast(meta[relay.Constant][72] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %1135 = reshape(%1134, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %1136 = @func_4556(%1135) /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) */;
  %1137 = cast(%var_8107, dtype="int32") /* ty=Tensor[(13, 11, 2), int32] */;
  %1138 = shape_of(%var_8106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1139 = cast(%var_8106, dtype="int32") /* ty=Tensor[(13, 11, 2), int32] */;
  %1140 = dyn.reshape(%1137, %1138, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1141 = bitwise_and(%1139, %1140) /* ty=Tensor[(13, 11, 2), int32] */;
  %1142 = cast(%1141, dtype="float32") /* ty=Tensor[(13, 11, 2), float32] */;
  %1143 = acos(%1142) /* ty=Tensor[(13, 11, 2), float32] */;
  %1144 = cast(%1141, dtype="bool") /* ty=Tensor[(13, 11, 2), bool] */;
  %1145 = shape_of(%1143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1146 = cast(%1143, dtype="bool") /* ty=Tensor[(13, 11, 2), bool] */;
  %1147 = dyn.reshape(%1144, %1145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1148 = greater(%1146, %1147) /* ty=Tensor[(13, 11, 2), bool] */;
  %1149 = cast(%1148, dtype="float64") /* ty=Tensor[(13, 11, 2), float64] */;
  %1150 = %1136.1;
  %1151 = cos(%1149) /* ty=Tensor[(13, 11, 2), float64] */;
  (%1150, meta[relay.Constant][72] /* ty=Tensor[(210), float32] */, %1151)
}

def @func_5422() -> (float32,) {
  %1152 = @func_2709() /* ty=(Tensor[(2464), float64], float32) */;
  %1153 = %1152.1;
  (%1153,)
}

def @func_1184() -> (Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) {
  %1154 = cast(meta[relay.Constant][73] /* ty=Tensor[(11, 12, 16), float32] */, dtype="float32") /* ty=Tensor[(11, 12, 16), float32] */;
  %1155 = asin(%1154) /* ty=Tensor[(11, 12, 16), float32] */;
  %1156 = cast(%1155, dtype="float64") /* ty=Tensor[(11, 12, 16), float64] */;
  %1157 = cast(-1.1386f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1158 = cast(meta[relay.Constant][74] /* ty=Tensor[(3, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %1159 = reshape(%1157, newshape=[]) /* ty=float32 */;
  %1160 = reshape(%1158, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %1161 = @func_257(%1159, %1160) /* ty=(Tensor[(1, 6, 6), bool], Tensor[(6, 7, 3), float32], Tensor[(21, 6), float32]) */;
  %1162 = log(%1156) /* ty=Tensor[(11, 12, 16), float64] */;
  %1163 = %1161.1;
  (%1162, %1163, -1.1386f /* ty=float32 */, meta[relay.Constant][74] /* ty=Tensor[(3, 12), float32] */)
}

def @func_11345() -> float32 {
  %1164 = @func_8387() /* ty=(float32,) */;
  %1164.0
}

def @func_8744(%var_8722: Tensor[(2464), float64]) -> (Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) {
  %1165 = @func_7131() /* ty=(Tensor[(2464), float32], Tensor[(2464), float64]) */;
  %1166 = %1165.1;
  %1167 = cast(%var_8722, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %1168 = shape_of(%1166, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1169 = cast(%1166, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %1170 = dyn.reshape(%1167, %1168, newshape=[]) /* ty=Tensor[(?), float32] */;
  %1171 = subtract(%1169, %1170) /* ty=Tensor[(2464), float32] */;
  %1172 = cast(%1171, dtype="bool") /* ty=Tensor[(2464), bool] */;
  %1173 = shape_of(%var_8722, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1174 = cast(%var_8722, dtype="bool") /* ty=Tensor[(2464), bool] */;
  %1175 = dyn.reshape(%1172, %1173, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1176 = cast(%var_8722, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %1177 = cast(%1171, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %1178 = cast(meta[relay.Constant][75] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %1179 = reshape(%1177, newshape=[2464]) /* ty=Tensor[(2464), float32] */;
  %1180 = reshape(%1178, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %1181 = @func_6108(%1179, %1180) /* ty=(Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(210), float32]) */;
  %1182 = equal(%1174, %1175) /* ty=Tensor[(2464), bool] */;
  %1183 = atanh(%1176) /* ty=Tensor[(2464), float64] */;
  %1184 = %1181.1;
  (%1182, %1183, %1184, meta[relay.Constant][75] /* ty=Tensor[(210), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_11519(%var_11518: Tensor[(1, 6, 10), float32]) -> (Tensor[(1, 6, 10), float32], Tensor[(2464), float64]) {
  %4 = fn (%var_11480: Tensor[(1, 6, 10), float32]) -> (Tensor[(1, 6, 10), float32], Tensor[(2464), float64]) {
    %0 = cast(%var_11480, dtype="float32") /* ty=Tensor[(1, 6, 10), float32] */;
    %1 = @func_9598() /* ty=(Tensor[(2464), float64],) */;
    %2 = cos(%0) /* ty=Tensor[(1, 6, 10), float32] */;
    %3 = %1.0;
    (%2, %3)
  };
  %4(%var_11518) /* ty=(Tensor[(1, 6, 10), float32], Tensor[(2464), float64]) */
}

def @func_6698() -> Tensor[(4800), float64] {
  %6 = fn () -> Tensor[(4800), float64] {
    %5 = @func_4386() /* ty=(float32, Tensor[(300, 16), int8], Tensor[(4800), float64]) */;
    %5.2
  };
  %6() /* ty=Tensor[(4800), float64] */
}

def @func_7700() -> (float32,) {
  %9 = fn () -> (float32,) {
    %7 = @func_5422() /* ty=(float32,) */;
    %8 = %7.0;
    (%8,)
  };
  %9() /* ty=(float32,) */
}

def @func_2664() -> (Tensor[(2464), float64],) {
  @func_2662() /* ty=(Tensor[(2464), float64],) */
}

def @func_4882(%var_4880: Tensor[(4, 260), float32]) -> (float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(4, 260), float32]) {
  @func_4879(%var_4880) /* ty=(float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(4, 260), float32]) */
}

def @func_5455(%var_5449: Tensor[(10, 15, 15), float64], %var_5450: Tensor[(10, 15, 15), float64]) -> Tensor[(10, 15, 15), float64] {
  %10 = cast(%var_5450, dtype="float64") /* ty=Tensor[(10, 15, 15), float64] */;
  %11 = shape_of(%var_5449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%var_5449, dtype="float64") /* ty=Tensor[(10, 15, 15), float64] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%12, %13) /* ty=Tensor[(10, 15, 15), float64] */
}

def @func_5630(%var_5628: Tensor[(13, 15, 14), float32], %var_5629: Tensor[(13, 15, 14), float32]) -> (Tensor[(13, 15, 14), float32],) {
  @func_5626(%var_5628, %var_5629) /* ty=(Tensor[(13, 15, 14), float32],) */
}

def @func_7132() -> (Tensor[(2464), float32], Tensor[(2464), float64]) {
  %19 = fn () -> (Tensor[(2464), float32], Tensor[(2464), float64]) {
    %14 = @func_4546() /* ty=Tensor[(2464), float64] */;
    %15 = cast(%14, dtype="float32") /* ty=Tensor[(2464), float32] */;
    %16 = @func_4205() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
    %17 = erf(%15) /* ty=Tensor[(2464), float32] */;
    %18 = %16.1;
    (%17, %18)
  };
  %19() /* ty=(Tensor[(2464), float32], Tensor[(2464), float64]) */
}

def @func_8915() -> (Tensor[(300, 1), float64],) {
  %20 = @func_7509() /* ty=(Tensor[(2464), float64], Tensor[(300, 1), float64]) */;
  %21 = %20.1;
  (%21,)
}

def @func_5052() -> Tensor[(2464), float64] {
  %22 = fn () -> Tensor[(2464), float64] {
    @func_4546() /* ty=Tensor[(2464), float64] */
  };
  %22() /* ty=Tensor[(2464), float64] */
}

def @func_4386() -> (float32, Tensor[(300, 16), int8], Tensor[(4800), float64]) {
  %23 = cast(meta[relay.Constant][0] /* ty=Tensor[(4800), float64] */, dtype="float64") /* ty=Tensor[(4800), float64] */;
  %24 = reshape(%23, newshape=[300, 16]) /* ty=Tensor[(300, 16), float64] */;
  %25 = @func_4149(%24) /* ty=(Tensor[(300, 16), int8], Tensor[(8, 10, 13), float64]) */;
  %26 = @func_2280() /* ty=float32 */;
  %27 = %25.0;
  (%26, %27, meta[relay.Constant][0] /* ty=Tensor[(4800), float64] */)
}

def @func_4975() -> Tensor[(2464), float64] {
  %29 = fn () -> Tensor[(2464), float64] {
    %28 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
    %28.2
  };
  %29() /* ty=Tensor[(2464), float64] */
}

def @func_4546() -> Tensor[(2464), float64] {
  %30 = @func_2308() /* ty=(Tensor[(2464), float64],) */;
  %30.0
}

def @func_8917() -> (Tensor[(300, 1), float64],) {
  @func_8915() /* ty=(Tensor[(300, 1), float64],) */
}

def @func_4626() -> Tensor[(2464), bool] {
  %31 = @func_3955() /* ty=(Tensor[(2464), bool],) */;
  %31.0
}

def @func_3149() -> (Tensor[(300, 1), float64],) {
  %32 = @func_2080() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %33 = %32.2;
  (%33,)
}

def @func_5132() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  %38 = fn () -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
    %34 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
    %35 = @func_4943() /* ty=(Tensor[(2464), float64],) */;
    %36 = %34.0;
    %37 = %35.0;
    (%36, %37)
  };
  %38() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */
}

def @func_5570() -> (Tensor[(2464), float64],) {
  @func_5568() /* ty=(Tensor[(2464), float64],) */
}

def @func_10082() -> (Tensor[(2464), float64],) {
  %39 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
  %40 = %39.0;
  (%40,)
}

def @func_7233() -> (Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(2464), bool]) {
  %41 = @func_4518() /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16]) */;
  %42 = @func_4101() /* ty=(Tensor[(2464), float64],) */;
  %43 = %42.0;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %45 = reshape(%44, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %46 = @func_3863(%45) /* ty=(Tensor[(2464), bool], Tensor[(5, 6, 10), float64]) */;
  %47 = %41.1;
  %48 = %46.0;
  (%47, %43, %48)
}

def @func_8838() -> (float32, Tensor[(9, 4), float32]) {
  %49 = @func_8332() /* ty=(float32, float32) */;
  %50 = @func_1959() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(11, 12, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(9, 4), float32]) */;
  %51 = %49.0;
  %52 = %50.4;
  (%51, %52)
}

def @func_5302(%var_5279: Tensor[(10, 11, 5), float64], %var_5283: Tensor[(1040), float64]) -> (Tensor[(10, 11, 5), float64], Tensor[(300, 1), float64], Tensor[(1040), float64], Tensor[(300, 16), int8]) {
  %53 = cast(%var_5279, dtype="float64") /* ty=Tensor[(10, 11, 5), float64] */;
  %54 = cast(%var_5283, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %55 = reshape(%54, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float64] */;
  %56 = @func_4695(%55) /* ty=(Tensor[(300, 1), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), uint16]) */;
  %57 = @func_4386() /* ty=(float32, Tensor[(300, 16), int8], Tensor[(4800), float64]) */;
  %58 = asinh(%53) /* ty=Tensor[(10, 11, 5), float64] */;
  %59 = %56.0;
  %60 = %57.1;
  (%58, %59, %var_5283, %60)
}

def @func_8100() -> (float32,) {
  @func_8098() /* ty=(float32,) */
}

def @func_4151(%var_4150: Tensor[(300, 16), float64]) -> (Tensor[(300, 16), int8], Tensor[(8, 10, 13), float64]) {
  %67 = fn (%var_4133: Tensor[(300, 16), float64]) -> (Tensor[(300, 16), int8], Tensor[(8, 10, 13), float64]) {
    %61 = @func_3331() /* ty=Tensor[(300, 1), float64] */;
    %62 = cast(%61, dtype="int8") /* ty=Tensor[(300, 1), int8] */;
    %63 = cast(%var_4133, dtype="int8") /* ty=Tensor[(300, 16), int8] */;
    %64 = @func_3320() /* ty=(float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32]) */;
    %65 = right_shift(%62, %63) /* ty=Tensor[(300, 16), int8] */;
    %66 = %64.2;
    (%65, %66)
  };
  %67(%var_4150) /* ty=(Tensor[(300, 16), int8], Tensor[(8, 10, 13), float64]) */
}

def @func_3576(%var_3575: Tensor[(9, 4), float32]) -> (float32, Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), bool], Tensor[(6, 7, 3), float32], Tensor[(9, 4), float32], Tensor[(2464), float32]) {
  %91 = fn (%var_3552: Tensor[(9, 4), float32]) -> (float32, Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), bool], Tensor[(6, 7, 3), float32], Tensor[(9, 4), float32], Tensor[(2464), float32]) {
    %68 = @func_3320() /* ty=(float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32]) */;
    %69 = @func_2662() /* ty=(Tensor[(2464), float64],) */;
    %70 = @func_2513() /* ty=(Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
    %71 = %70.1;
    %72 = @func_2280() /* ty=float32 */;
    %73 = cast(%71, dtype="bool") /* ty=Tensor[(5, 6, 10), bool] */;
    %74 = cast(%72, dtype="bool") /* ty=bool */;
    %75 = cast(%72, dtype="float32") /* ty=float32 */;
    %76 = cast(%var_3552, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
    %77 = reshape(%75, newshape=[]) /* ty=float32 */;
    %78 = reshape(%76, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
    %79 = @func_257(%77, %78) /* ty=(Tensor[(1, 6, 6), bool], Tensor[(6, 7, 3), float32], Tensor[(21, 6), float32]) */;
    %80 = %79.1;
    %81 = cast(%80, dtype="float32") /* ty=Tensor[(6, 7, 3), float32] */;
    %82 = %69.0;
    %83 = cast(%82, dtype="float64") /* ty=Tensor[(2464), float64] */;
    %84 = reshape(%81, newshape=[126]) /* ty=Tensor[(126), float32] */;
    %85 = reshape(%83, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
    %86 = @func_1324(%84, %85) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(2464), float32]) */;
    %87 = @func_2280() /* ty=float32 */;
    %88 = %68.1;
    %89 = less(%73, %74) /* ty=Tensor[(5, 6, 10), bool] */;
    %90 = %86.3;
    (%87, %88, %82, %89, %80, %var_3552, %90)
  };
  %91(%var_3575) /* ty=(float32, Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), bool], Tensor[(6, 7, 3), float32], Tensor[(9, 4), float32], Tensor[(2464), float32]) */
}

def @func_1407() -> (Tensor[(2464), float64],) {
  %96 = fn () -> (Tensor[(2464), float64],) {
    %92 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
    %93 = %92.0;
    %94 = cast(%93, dtype="float64") /* ty=Tensor[(2464), float64] */;
    %95 = sin(%94) /* ty=Tensor[(2464), float64] */;
    (%95,)
  };
  %96() /* ty=(Tensor[(2464), float64],) */
}

def @func_11790() -> (float32, Tensor[(2464), float64]) {
  %97 = @func_9069() /* ty=(Tensor[(8, 10, 13), float64], float32) */;
  %98 = @func_2174() /* ty=(Tensor[(2464), float64],) */;
  %99 = %97.1;
  %100 = %98.0;
  (%99, %100)
}

def @func_2081() -> (Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) {
  %110 = fn () -> (Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) {
    %101 = cast(meta[relay.Constant][1] /* ty=Tensor[(300, 1), float64] */, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
    %102 = reshape(%101, newshape=[300]) /* ty=Tensor[(300), float64] */;
    %103 = @func_1855(%102) /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) */;
    %104 = cast(meta[relay.Constant][1] /* ty=Tensor[(300, 1), float64] */, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
    %105 = reshape(%104, newshape=[300]) /* ty=Tensor[(300), float64] */;
    %106 = @func_1855(%105) /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) */;
    %107 = @func_1534() /* ty=Tensor[(11, 12, 16), float64] */;
    %108 = %103.2;
    %109 = %106.1;
    (%107, %108, meta[relay.Constant][1] /* ty=Tensor[(300, 1), float64] */, %109)
  };
  %110() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */
}

def @func_2244(%var_2239: Tensor[(1, 126), float32], %var_2240: Tensor[(14), uint16], %var_2241: Tensor[(168), uint16], %var_2242: Tensor[(300), float64], %var_2243: Tensor[(36), float32]) -> (Tensor[(6, 7, 3), float32], Tensor[(1, 126), float32], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(210), float32], Tensor[(36), float32], Tensor[(?, 9, 3), uint64], Tensor[(8, 9, 3), float32]) {
  @func_2237(%var_2239, %var_2240, %var_2241, %var_2242, %var_2243) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(1, 126), float32], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(210), float32], Tensor[(36), float32], Tensor[(?, 9, 3), uint64], Tensor[(8, 9, 3), float32]) */
}

def @func_5344() -> (Tensor[(2464), float64],) {
  %111 = @func_4943() /* ty=(Tensor[(2464), float64],) */;
  %112 = %111.0;
  (%112,)
}

def @func_2005() -> (Tensor[(3, 12), float32],) {
  @func_2003() /* ty=(Tensor[(3, 12), float32],) */
}

def @func_4628() -> Tensor[(2464), bool] {
  @func_4626() /* ty=Tensor[(2464), bool] */
}

def @func_6900() -> (Tensor[(2464), bool], float32) {
  @func_6898() /* ty=(Tensor[(2464), bool], float32) */
}

def @func_10734() -> (Tensor[(5, 6, 10), float64], Tensor[(2464), float64]) {
  @func_10732() /* ty=(Tensor[(5, 6, 10), float64], Tensor[(2464), float64]) */
}

def @func_8152(%var_8150: Tensor[(13, 11, 2), int32], %var_8151: Tensor[(13, 11, 2), int32]) -> (Tensor[(2464), float64], Tensor[(210), float32], Tensor[(13, 11, 2), float64]) {
  %131 = fn (%var_8106: Tensor[(13, 11, 2), int32], %var_8107: Tensor[(13, 11, 2), int32]) -> (Tensor[(2464), float64], Tensor[(210), float32], Tensor[(13, 11, 2), float64]) {
    %113 = cast(meta[relay.Constant][2] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %114 = reshape(%113, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %115 = @func_4556(%114) /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) */;
    %116 = cast(%var_8107, dtype="int32") /* ty=Tensor[(13, 11, 2), int32] */;
    %117 = shape_of(%var_8106, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(%var_8106, dtype="int32") /* ty=Tensor[(13, 11, 2), int32] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %120 = bitwise_and(%118, %119) /* ty=Tensor[(13, 11, 2), int32] */;
    %121 = cast(%120, dtype="float32") /* ty=Tensor[(13, 11, 2), float32] */;
    %122 = acos(%121) /* ty=Tensor[(13, 11, 2), float32] */;
    %123 = cast(%120, dtype="bool") /* ty=Tensor[(13, 11, 2), bool] */;
    %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
    %125 = cast(%122, dtype="bool") /* ty=Tensor[(13, 11, 2), bool] */;
    %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %127 = greater(%125, %126) /* ty=Tensor[(13, 11, 2), bool] */;
    %128 = cast(%127, dtype="float64") /* ty=Tensor[(13, 11, 2), float64] */;
    %129 = %115.1;
    %130 = cos(%128) /* ty=Tensor[(13, 11, 2), float64] */;
    (%129, meta[relay.Constant][2] /* ty=Tensor[(210), float32] */, %130)
  };
  %131(%var_8150, %var_8151) /* ty=(Tensor[(2464), float64], Tensor[(210), float32], Tensor[(13, 11, 2), float64]) */
}

def @func_8798(%var_8796: Tensor[(126), float32], %var_8797: Tensor[(300), float64]) -> (Tensor[(2464), float64], Tensor[(300), float64], Tensor[(126), float32], Tensor[(14), uint16], Tensor[(6, 28), uint16], Tensor[(300), float64], Tensor[(3, 12), float32]) {
  @func_8794(%var_8796, %var_8797) /* ty=(Tensor[(2464), float64], Tensor[(300), float64], Tensor[(126), float32], Tensor[(14), uint16], Tensor[(6, 28), uint16], Tensor[(300), float64], Tensor[(3, 12), float32]) */
}

def @func_7079(%var_7077: Tensor[(36), float32]) -> (Tensor[(2464), float64], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(5, 6, 10), float64], Tensor[(150, 2), float64], Tensor[(14), uint16], Tensor[(210), float32], Tensor[(36), float32]) {
  @func_7076(%var_7077) /* ty=(Tensor[(2464), float64], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(5, 6, 10), float64], Tensor[(150, 2), float64], Tensor[(14), uint16], Tensor[(210), float32], Tensor[(36), float32]) */
}

def @func_11552() -> Tensor[(210), float32] {
  %133 = fn () -> Tensor[(210), float32] {
    %132 = @func_1959() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(11, 12, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(9, 4), float32]) */;
    %132.3
  };
  %133() /* ty=Tensor[(210), float32] */
}

def @func_8213() -> (Tensor[(300), float64], Tensor[(5, 42), float32], Tensor[(210, 1), float32]) {
  %139 = fn () -> (Tensor[(300), float64], Tensor[(5, 42), float32], Tensor[(210, 1), float32]) {
    %134 = cast(meta[relay.Constant][3] /* ty=Tensor[(210, 1), float32] */, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
    %135 = reshape(%134, newshape=[5, 42]) /* ty=Tensor[(5, 42), float32] */;
    %136 = @func_2037(%135) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(5, 42), float32], Tensor[(3, 12), float32], Tensor[(2464), float64], Tensor[(2464), float64]) */;
    %137 = @func_5645() /* ty=Tensor[(300), float64] */;
    %138 = %136.1;
    (%137, %138, meta[relay.Constant][3] /* ty=Tensor[(210, 1), float32] */)
  };
  %139() /* ty=(Tensor[(300), float64], Tensor[(5, 42), float32], Tensor[(210, 1), float32]) */
}

def @func_9434() -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) {
  @func_9432() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) */
}

def @func_5439(%var_5433: Tensor[(7, 4, 16), float32]) -> Tensor[(7, 4, 16), float32] {
  %140 = cast(%var_5433, dtype="float32") /* ty=Tensor[(7, 4, 16), float32] */;
  sinh(%140) /* ty=Tensor[(7, 4, 16), float32] */
}

def @func_10789(%var_10788: Tensor[(8, 10, 13), float64]) -> (Tensor[(2464), float64], Tensor[(4800), float64], Tensor[(8, 10, 13), bool]) {
  %152 = fn (%var_10764: Tensor[(8, 10, 13), float64]) -> (Tensor[(2464), float64], Tensor[(4800), float64], Tensor[(8, 10, 13), bool]) {
    %141 = @func_5131() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
    %142 = cast(meta[relay.Constant][4] /* ty=Tensor[(4800), float64] */, dtype="float64") /* ty=Tensor[(4800), float64] */;
    %143 = reshape(%142, newshape=[300, 16]) /* ty=Tensor[(300, 16), float64] */;
    %144 = @func_4149(%143) /* ty=(Tensor[(300, 16), int8], Tensor[(8, 10, 13), float64]) */;
    %145 = %144.1;
    %146 = cast(%var_10764, dtype="bool") /* ty=Tensor[(8, 10, 13), bool] */;
    %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
    %148 = cast(%145, dtype="bool") /* ty=Tensor[(8, 10, 13), bool] */;
    %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %150 = %141.0;
    %151 = less_equal(%148, %149) /* ty=Tensor[(8, 10, 13), bool] */;
    (%150, meta[relay.Constant][4] /* ty=Tensor[(4800), float64] */, %151)
  };
  %152(%var_10788) /* ty=(Tensor[(2464), float64], Tensor[(4800), float64], Tensor[(8, 10, 13), bool]) */
}

def @func_7660() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  %157 = fn () -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
    %153 = @func_2709() /* ty=(Tensor[(2464), float64], float32) */;
    %154 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
    %155 = %153.0;
    %156 = %154.0;
    (%155, %156)
  };
  %157() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */
}

def @func_9432() -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) {
  %158 = @func_4943() /* ty=(Tensor[(2464), float64],) */;
  %159 = cast(meta[relay.Constant][5] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %160 = reshape(%159, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %161 = @func_4556(%160) /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) */;
  %162 = %158.0;
  %163 = %161.0;
  (%162, %163, meta[relay.Constant][5] /* ty=Tensor[(210), float32] */)
}

def @func_9895() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  %164 = @func_5153() /* ty=(Tensor[(2464), float64],) */;
  %165 = @func_3876() /* ty=(Tensor[(2464), float64], Tensor[(3, 12), float32]) */;
  %166 = %164.0;
  %167 = %165.0;
  (%166, %167)
}

def @func_1050(%var_1048: Tensor[(2, 12, 7), bool]) -> Tensor[(2, 12, 7), bool] {
  @func_1047(%var_1048) /* ty=Tensor[(2, 12, 7), bool] */
}

def @func_9148(%var_9146: Tensor[(448), float32], %var_9147: Tensor[(210), float32]) -> (Tensor[(300, 1), float64], Tensor[(2464), float64], Tensor[(126), float32], Tensor[(882), uint32], Tensor[(126), float32], Tensor[(7, 4, 16), float32], Tensor[(448), float32], Tensor[(300), float64], Tensor[(210), float32]) {
  @func_9144(%var_9146, %var_9147) /* ty=(Tensor[(300, 1), float64], Tensor[(2464), float64], Tensor[(126), float32], Tensor[(882), uint32], Tensor[(126), float32], Tensor[(7, 4, 16), float32], Tensor[(448), float32], Tensor[(300), float64], Tensor[(210), float32]) */
}

def @func_2709() -> (Tensor[(2464), float64], float32) {
  %168 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
  %169 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
  %170 = %168.0;
  %171 = %169.0;
  (%170, %171)
}

def @func_261(%var_259: float32, %var_260: Tensor[(1, 6, 6), float32]) -> (Tensor[(1, 6, 6), bool], Tensor[(6, 7, 3), float32], Tensor[(21, 6), float32]) {
  @func_257(%var_259, %var_260) /* ty=(Tensor[(1, 6, 6), bool], Tensor[(6, 7, 3), float32], Tensor[(21, 6), float32]) */
}

def @func_6582() -> float32 {
  @func_6580() /* ty=float32 */
}

def @func_1047(%var_1037: Tensor[(2, 12, 7), bool]) -> Tensor[(2, 12, 7), bool] {
  %172 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 12, 7), bool] */, dtype="bool") /* ty=Tensor[(2, 12, 7), bool] */;
  %173 = shape_of(%var_1037, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%var_1037, dtype="bool") /* ty=Tensor[(2, 12, 7), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%174, %175) /* ty=Tensor[(2, 12, 7), bool] */
}

def @func_1324(%var_1301: Tensor[(126), float32], %var_1309: Tensor[(2464), float64]) -> (Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(2464), float32]) {
  %176 = cast(%var_1301, dtype="float32") /* ty=Tensor[(126), float32] */;
  %177 = reshape(%176, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), float32] */;
  %178 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
  %179 = %178.2;
  %180 = cast(%var_1309, dtype="int64") /* ty=Tensor[(2464), int64] */;
  %181 = shape_of(%179, dtype="int32") /* ty=Tensor[(1), int32] */;
  %182 = cast(%179, dtype="int64") /* ty=Tensor[(2464), int64] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?), int64] */;
  %184 = cast(%179, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %185 = @func_144(%177) /* ty=Tensor[(6, 7, 3), float32] */;
  %186 = left_shift(%182, %183) /* ty=Tensor[(2464), int64] */;
  %187 = rsqrt(%184) /* ty=Tensor[(2464), float32] */;
  (%185, %var_1301, %186, %187)
}

def @func_4601() -> (Tensor[(2464), float64],) {
  %189 = fn () -> (Tensor[(2464), float64],) {
    %188 = @func_2892() /* ty=Tensor[(2464), float64] */;
    (%188,)
  };
  %189() /* ty=(Tensor[(2464), float64],) */
}

def @func_9083(%var_9081: Tensor[(11, 6, 10), float32]) -> Tensor[(11, 6, 10), float32] {
  @func_9080(%var_9081) /* ty=Tensor[(11, 6, 10), float32] */
}

def @func_9951() -> (Tensor[(2464), float64], Tensor[(300, 16), int8], Tensor[(300, 1), float64]) {
  @func_9949() /* ty=(Tensor[(2464), float64], Tensor[(300, 16), int8], Tensor[(300, 1), float64]) */
}

def @func_4999(%var_4987: Tensor[(8, 6, 9), float32]) -> Tensor[(8, 6, 9), float32] {
  %190 = cast(%var_4987, dtype="float32") /* ty=Tensor[(8, 6, 9), float32] */;
  %191 = sin(%190) /* ty=Tensor[(8, 6, 9), float32] */;
  %192 = cast(%191, dtype="float32") /* ty=Tensor[(8, 6, 9), float32] */;
  %193 = shape_of(%var_4987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%var_4987, dtype="float32") /* ty=Tensor[(8, 6, 9), float32] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%194, %195) /* ty=Tensor[(8, 6, 9), float32] */
}

def @func_10522(%var_10521: Tensor[(4800), float64]) -> (Tensor[(300), float64], Tensor[(4800), int32], Tensor[(2464), float64]) {
  %206 = fn (%var_10486: Tensor[(4800), float64]) -> (Tensor[(300), float64], Tensor[(4800), int32], Tensor[(2464), float64]) {
    %196 = @func_8063() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300), float64], Tensor[(11, 12, 16), float64]) */;
    %197 = @func_6697() /* ty=Tensor[(4800), float64] */;
    %198 = cast(%var_10486, dtype="int32") /* ty=Tensor[(4800), int32] */;
    %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(1), int32] */;
    %200 = cast(%197, dtype="int32") /* ty=Tensor[(4800), int32] */;
    %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?), int32] */;
    %202 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
    %203 = %196.3;
    %204 = maximum(%200, %201) /* ty=Tensor[(4800), int32] */;
    %205 = %202.0;
    (%203, %204, %205)
  };
  %206(%var_10521) /* ty=(Tensor[(300), float64], Tensor[(4800), int32], Tensor[(2464), float64]) */
}

def @func_5002(%var_5000: Tensor[(8, 6, 9), float32]) -> Tensor[(8, 6, 9), float32] {
  @func_4999(%var_5000) /* ty=Tensor[(8, 6, 9), float32] */
}

def @func_1328(%var_1326: Tensor[(126), float32], %var_1327: Tensor[(2464), float64]) -> (Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(2464), float32]) {
  @func_1324(%var_1326, %var_1327) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(2464), float32]) */
}

def @func_7589(%var_7533: Tensor[(11, 12, 16), float64]) -> (Tensor[(11, 12, 16), bool], Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), float64]) {
  %207 = @func_6750() /* ty=Tensor[(11, 12, 16), float64] */;
  %208 = cast(%var_7533, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %212 = bitwise_and(%210, %211) /* ty=Tensor[(11, 12, 16), int16] */;
  %213 = cast(%212, dtype="bool") /* ty=Tensor[(11, 12, 16), bool] */;
  %214 = shape_of(%var_7533, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%var_7533, dtype="bool") /* ty=Tensor[(11, 12, 16), bool] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %217 = @func_5153() /* ty=(Tensor[(2464), float64],) */;
  %218 = @func_7004() /* ty=(Tensor[(5, 6, 10), float64],) */;
  %219 = greater(%215, %216) /* ty=Tensor[(11, 12, 16), bool] */;
  %220 = @func_3650() /* ty=Tensor[(2464), float64] */;
  %221 = %217.0;
  %222 = %218.0;
  (%219, %220, %221, %222)
}

def @func_4388() -> (float32, Tensor[(300, 16), int8], Tensor[(4800), float64]) {
  @func_4386() /* ty=(float32, Tensor[(300, 16), int8], Tensor[(4800), float64]) */
}

def @func_4631() -> Tensor[(300, 1), float64] {
  %223 = @func_2513() /* ty=(Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %223.0
}

def @func_11090() -> Tensor[(2464), float32] {
  @func_11088() /* ty=Tensor[(2464), float32] */
}

def @func_3629(%var_3587: Tensor[(9, 14, 7), uint32], %var_3595: Tensor[(126), float32]) -> (Tensor[(9, 14, 7), uint32], Tensor[(2464), float32], Tensor[(126), float32], Tensor[(2464), float64]) {
  %224 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 1, 7), uint32] */, dtype="uint32") /* ty=Tensor[(9, 1, 7), uint32] */;
  %225 = cast(%var_3587, dtype="uint32") /* ty=Tensor[(9, 14, 7), uint32] */;
  %226 = cast(%var_3595, dtype="float32") /* ty=Tensor[(126), float32] */;
  %227 = cast(meta[relay.Constant][8] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %228 = reshape(%226, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %229 = reshape(%227, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %230 = @func_1324(%228, %229) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(2464), float32]) */;
  %231 = left_shift(%224, %225) /* ty=Tensor[(9, 14, 7), uint32] */;
  %232 = %230.3;
  (%231, %232, %var_3595, meta[relay.Constant][8] /* ty=Tensor[(2464), float64] */)
}

def @func_6864() -> (float32,) {
  %233 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
  %234 = %233.0;
  (%234,)
}

def @func_2309() -> (Tensor[(2464), float64],) {
  %237 = fn () -> (Tensor[(2464), float64],) {
    %235 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
    %236 = %235.0;
    (%236,)
  };
  %237() /* ty=(Tensor[(2464), float64],) */
}

def @func_3787() -> (Tensor[(11, 12, 16), float64],) {
  %242 = fn () -> (Tensor[(11, 12, 16), float64],) {
    %238 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
    %239 = %238.0;
    %240 = cast(%239, dtype="float64") /* ty=Tensor[(11, 12, 16), float64] */;
    %241 = sqrt(%240) /* ty=Tensor[(11, 12, 16), float64] */;
    (%241,)
  };
  %242() /* ty=(Tensor[(11, 12, 16), float64],) */
}

def @func_7995() -> (Tensor[(2464), uint64],) {
  @func_7993() /* ty=(Tensor[(2464), uint64],) */
}

def @func_8901() -> (float32, float32) {
  %247 = fn () -> (float32, float32) {
    %243 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
    %244 = @func_8098() /* ty=(float32,) */;
    %245 = %243.0;
    %246 = %244.0;
    (%245, %246)
  };
  %247() /* ty=(float32, float32) */
}

def @func_10279(%var_10251: Tensor[(50, 6), float64]) -> (Tensor[(2464), float64], Tensor[(50, 6), float64], Tensor[(300), float64], Tensor[(2464), float64]) {
  %248 = @func_6014() /* ty=(Tensor[(2464), float64],) */;
  %249 = cast(%var_10251, dtype="float64") /* ty=Tensor[(50, 6), float64] */;
  %250 = reshape(%249, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %251 = @func_4301(%250) /* ty=Tensor[(300), int16] */;
  %252 = cast(meta[relay.Constant][9] /* ty=Tensor[(300), int16] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(1), int32] */;
  %254 = cast(%251, dtype="float64") /* ty=Tensor[(300), float64] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?), float64] */;
  %256 = @func_9895() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %257 = %248.0;
  %258 = mod(%254, %255) /* ty=Tensor[(300), float64] */;
  %259 = %256.0;
  (%257, %var_10251, %258, %259)
}

def @func_6444(%var_6442: Tensor[(210), float32], %var_6443: Tensor[(126), float32]) -> (Tensor[(2464), float64], Tensor[(1232, 2), float32], Tensor[(210), float32], Tensor[(300, ?), int16], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(300), float64]) {
  @func_6440(%var_6442, %var_6443) /* ty=(Tensor[(2464), float64], Tensor[(1232, 2), float32], Tensor[(210), float32], Tensor[(300, ?), int16], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(300), float64]) */
}

def @func_6666(%var_6664: Tensor[(300), float64]) -> (Tensor[(2464), float64], Tensor[(3, 12), float32], Tensor[(36), float32], Tensor[(126), float32], Tensor[(14, 1), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(2464), float64], Tensor[(2464), float64]) {
  @func_6663(%var_6664) /* ty=(Tensor[(2464), float64], Tensor[(3, 12), float32], Tensor[(36), float32], Tensor[(126), float32], Tensor[(14, 1), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(2464), float64], Tensor[(2464), float64]) */
}

def @func_10337() -> (Tensor[(2464), float64],) {
  @func_10335() /* ty=(Tensor[(2464), float64],) */
}

def @func_10860() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  @func_10858() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */
}

def @func_9069() -> (Tensor[(8, 10, 13), float64], float32) {
  %260 = @func_7297() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(8, 10, 13), float64]) */;
  %261 = @func_8332() /* ty=(float32, float32) */;
  %262 = %260.1;
  %263 = %261.1;
  (%262, %263)
}

def @func_7235() -> (Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(2464), bool]) {
  @func_7233() /* ty=(Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(2464), bool]) */
}

def @func_8860() -> Tensor[(11, 12, 16), float64] {
  @func_1534() /* ty=Tensor[(11, 12, 16), float64] */
}

def @func_3865(%var_3864: Tensor[(2464), float64]) -> (Tensor[(2464), bool], Tensor[(5, 6, 10), float64]) {
  %273 = fn (%var_3842: Tensor[(2464), float64]) -> (Tensor[(2464), bool], Tensor[(5, 6, 10), float64]) {
    %264 = @func_3320() /* ty=(float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32]) */;
    %265 = %264.1;
    %266 = cast(%var_3842, dtype="bool") /* ty=Tensor[(2464), bool] */;
    %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(1), int32] */;
    %268 = cast(%265, dtype="bool") /* ty=Tensor[(2464), bool] */;
    %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?), bool] */;
    %270 = @func_2080() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
    %271 = greater_equal(%268, %269) /* ty=Tensor[(2464), bool] */;
    %272 = %270.3;
    (%271, %272)
  };
  %273(%var_3864) /* ty=(Tensor[(2464), bool], Tensor[(5, 6, 10), float64]) */
}

def @func_6866() -> (float32,) {
  @func_6864() /* ty=(float32,) */
}

def @func_4518() -> (Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16]) {
  %274 = @func_3320() /* ty=(float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32]) */;
  %275 = %274.1;
  %276 = cast(%275, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %277 = reshape(%276, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %278 = @func_3863(%277) /* ty=(Tensor[(2464), bool], Tensor[(5, 6, 10), float64]) */;
  %279 = @func_2308() /* ty=(Tensor[(2464), float64],) */;
  %280 = @func_3207() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16], float32, Tensor[(210), float32], Tensor[(36), float32], Tensor[(11, 12, 16), float64], Tensor[(42, 4), bool]) */;
  %281 = %278.1;
  %282 = %279.0;
  %283 = %280.2;
  (%275, %281, %282, %283)
}

def @func_11088() -> Tensor[(2464), float32] {
  %284 = @func_2385() /* ty=(Tensor[(2464), float64],) */;
  %285 = %284.0;
  %286 = cast(%285, dtype="float32") /* ty=Tensor[(2464), float32] */;
  asin(%286) /* ty=Tensor[(2464), float32] */
}

def @func_1755(%var_1728: Tensor[(1, 126), float32], %var_1751: Tensor[(2112, 1), float64]) -> (Tensor[(2464), float64], Tensor[(126), float32], Tensor[(1, 126), float32], Tensor[(2, 12, 7), bool], Tensor[(1, 168), bool], Tensor[(11, 12, 16), bool], Tensor[(2112, 1), float64]) {
  %287 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
  %288 = cast(%var_1728, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %289 = %287.0;
  %290 = cast(%289, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %291 = reshape(%288, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %292 = reshape(%290, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %293 = @func_1324(%291, %292) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(2464), float32]) */;
  %294 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 168), bool] */, dtype="bool") /* ty=Tensor[(1, 168), bool] */;
  %295 = reshape(%294, newshape=[2, 12, 7]) /* ty=Tensor[(2, 12, 7), bool] */;
  %296 = %293.1;
  %297 = cast(%296, dtype="float32") /* ty=Tensor[(126), float32] */;
  %298 = cast(%var_1751, dtype="float64") /* ty=Tensor[(2112, 1), float64] */;
  %299 = reshape(%297, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %300 = reshape(%298, newshape=[11, 12, 16]) /* ty=Tensor[(11, 12, 16), float64] */;
  %301 = @func_1629(%299, %300) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(11, 12, 16), bool]) */;
  %302 = @func_1047(%295) /* ty=Tensor[(2, 12, 7), bool] */;
  %303 = %301.2;
  (%289, %296, %var_1728, %302, meta[relay.Constant][10] /* ty=Tensor[(1, 168), bool] */, %303, %var_1751)
}

def @func_5646() -> Tensor[(300), float64] {
  %305 = fn () -> Tensor[(300), float64] {
    %304 = @func_2080() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
    %304.1
  };
  %305() /* ty=Tensor[(300), float64] */
}

def @func_6799() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  %310 = fn () -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
    %306 = @func_2662() /* ty=(Tensor[(2464), float64],) */;
    %307 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
    %308 = %306.0;
    %309 = %307.0;
    (%308, %309)
  };
  %310() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */
}

def @func_10162() -> Tensor[(2464), float64] {
  @func_9847() /* ty=Tensor[(2464), float64] */
}

def @func_10615() -> (Tensor[(2464), float64], Tensor[(5, 6, 10), float64]) {
  @func_10613() /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64]) */
}

def @func_6263(%var_6262: Tensor[(126), float32]) -> (Tensor[(2464), float64], Tensor[(3, 12), float32], Tensor[(882), uint32], Tensor[(126), float32], Tensor[(2112), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32]) {
  %327 = fn (%var_6248: Tensor[(126), float32]) -> (Tensor[(2464), float64], Tensor[(3, 12), float32], Tensor[(882), uint32], Tensor[(126), float32], Tensor[(2112), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32]) {
    %311 = @func_2831() /* ty=(Tensor[(2464), float64],) */;
    %312 = @func_2003() /* ty=(Tensor[(3, 12), float32],) */;
    %313 = cast(%var_6248, dtype="float32") /* ty=Tensor[(126), float32] */;
    %314 = cast(meta[relay.Constant][11] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
    %315 = reshape(%313, newshape=[126]) /* ty=Tensor[(126), float32] */;
    %316 = reshape(%314, newshape=[44, 48]) /* ty=Tensor[(44, 48), float64] */;
    %317 = @func_5815(%315, %316) /* ty=(Tensor[(2464), float64], Tensor[(432), float32], Tensor[(8, 6, 9), float64], Tensor[(126), float32], Tensor[(126), float32], Tensor[(44, 48), float64], Tensor[(2464), float32], Tensor[(882), uint32], Tensor[(126), float32]) */;
    %318 = cast(meta[relay.Constant][12] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %319 = %312.0;
    %320 = cast(%319, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
    %321 = reshape(%318, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float32] */;
    %322 = reshape(%320, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %323 = @func_521(%321, %322) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
    %324 = %311.0;
    %325 = %317.7;
    %326 = %323.4;
    (%324, %319, %325, %var_6248, meta[relay.Constant][11] /* ty=Tensor[(2112), float64] */, %326, meta[relay.Constant][12] /* ty=Tensor[(210), float32] */)
  };
  %327(%var_6262) /* ty=(Tensor[(2464), float64], Tensor[(3, 12), float32], Tensor[(882), uint32], Tensor[(126), float32], Tensor[(2112), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32]) */
}

def @func_7299() -> (Tensor[(11, 12, 16), float64], Tensor[(8, 10, 13), float64]) {
  @func_7297() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(8, 10, 13), float64]) */
}

def @func_3209() -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16], float32, Tensor[(210), float32], Tensor[(36), float32], Tensor[(11, 12, 16), float64], Tensor[(42, 4), bool]) {
  @func_3207() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16], float32, Tensor[(210), float32], Tensor[(36), float32], Tensor[(11, 12, 16), float64], Tensor[(42, 4), bool]) */
}

def @func_966(%var_965: Tensor[(11, 14, 16), float64]) -> (Tensor[(11, 14, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(36), float32], Tensor[(21, 6), float32], float32) {
  %345 = fn (%var_918: Tensor[(11, 14, 16), float64]) -> (Tensor[(11, 14, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(36), float32], Tensor[(21, 6), float32], float32) {
    %328 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 14, 16), float64] */, dtype="float64") /* ty=Tensor[(11, 14, 16), float64] */;
    %329 = shape_of(%var_918, dtype="int32") /* ty=Tensor[(3), int32] */;
    %330 = cast(%var_918, dtype="float64") /* ty=Tensor[(11, 14, 16), float64] */;
    %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %332 = cast(meta[relay.Constant][14] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %333 = cast(meta[relay.Constant][15] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %334 = reshape(%332, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float32] */;
    %335 = reshape(%333, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %336 = @func_521(%334, %335) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
    %337 = cast(-8.91673f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %338 = cast(meta[relay.Constant][15] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %339 = reshape(%337, newshape=[]) /* ty=float32 */;
    %340 = reshape(%338, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
    %341 = @func_257(%339, %340) /* ty=(Tensor[(1, 6, 6), bool], Tensor[(6, 7, 3), float32], Tensor[(21, 6), float32]) */;
    %342 = multiply(%330, %331) /* ty=Tensor[(11, 14, 16), float64] */;
    %343 = %336.4;
    %344 = %341.2;
    (%342, %343, meta[relay.Constant][14] /* ty=Tensor[(210), float32] */, meta[relay.Constant][15] /* ty=Tensor[(36), float32] */, %344, -8.91673f /* ty=float32 */)
  };
  %345(%var_965) /* ty=(Tensor[(11, 14, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(36), float32], Tensor[(21, 6), float32], float32) */
}

def @func_4121() -> Tensor[(2464), float64] {
  %347 = fn () -> Tensor[(2464), float64] {
    %346 = @func_2662() /* ty=(Tensor[(2464), float64],) */;
    %346.0
  };
  %347() /* ty=Tensor[(2464), float64] */
}

def @func_4207() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  @func_4205() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */
}

def @func_9144(%var_9135: Tensor[(448), float32], %var_9138: Tensor[(210), float32]) -> (Tensor[(300, 1), float64], Tensor[(2464), float64], Tensor[(126), float32], Tensor[(882), uint32], Tensor[(126), float32], Tensor[(7, 4, 16), float32], Tensor[(448), float32], Tensor[(300), float64], Tensor[(210), float32]) {
  %348 = @func_4725() /* ty=(Tensor[(2464), float64],) */;
  %349 = cast(meta[relay.Constant][16] /* ty=Tensor[(882), uint32] */, dtype="uint32") /* ty=Tensor[(882), uint32] */;
  %350 = cast(meta[relay.Constant][17] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %351 = reshape(%349, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), uint32] */;
  %352 = reshape(%350, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %353 = @func_3629(%351, %352) /* ty=(Tensor[(9, 14, 7), uint32], Tensor[(2464), float32], Tensor[(126), float32], Tensor[(2464), float64]) */;
  %354 = cast(%var_9135, dtype="float32") /* ty=Tensor[(448), float32] */;
  %355 = reshape(%354, newshape=[7, 4, 16]) /* ty=Tensor[(7, 4, 16), float32] */;
  %356 = cast(%var_9138, dtype="float32") /* ty=Tensor[(210), float32] */;
  %357 = cast(meta[relay.Constant][17] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %358 = reshape(%356, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %359 = reshape(%357, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %360 = @func_6440(%358, %359) /* ty=(Tensor[(2464), float64], Tensor[(1232, 2), float32], Tensor[(210), float32], Tensor[(300, ?), int16], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(300), float64]) */;
  %361 = @func_8873() /* ty=Tensor[(300, 1), float64] */;
  %362 = %348.0;
  %363 = %353.2;
  %364 = @func_5439(%355) /* ty=Tensor[(7, 4, 16), float32] */;
  %365 = %360.8;
  (%361, %362, %363, meta[relay.Constant][16] /* ty=Tensor[(882), uint32] */, meta[relay.Constant][17] /* ty=Tensor[(126), float32] */, %364, %var_9135, %365, %var_9138)
}

def @func_8840() -> (float32, Tensor[(9, 4), float32]) {
  @func_8838() /* ty=(float32, Tensor[(9, 4), float32]) */
}

def @func_3151() -> (Tensor[(300, 1), float64],) {
  @func_3149() /* ty=(Tensor[(300, 1), float64],) */
}

def @func_5514() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  %370 = fn () -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
    %366 = @func_5344() /* ty=(Tensor[(2464), float64],) */;
    %367 = @func_4943() /* ty=(Tensor[(2464), float64],) */;
    %368 = %366.0;
    %369 = %367.0;
    (%368, %369)
  };
  %370() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */
}

def @func_8433() -> Tensor[(2464), float64] {
  @func_8431() /* ty=Tensor[(2464), float64] */
}

def @func_3878() -> (Tensor[(2464), float64], Tensor[(3, 12), float32]) {
  @func_3876() /* ty=(Tensor[(2464), float64], Tensor[(3, 12), float32]) */
}

def @func_2662() -> (Tensor[(2464), float64],) {
  %371 = @func_2174() /* ty=(Tensor[(2464), float64],) */;
  %372 = %371.0;
  (%372,)
}

def @func_3207() -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16], float32, Tensor[(210), float32], Tensor[(36), float32], Tensor[(11, 12, 16), float64], Tensor[(42, 4), bool]) {
  %373 = @func_2385() /* ty=(Tensor[(2464), float64],) */;
  %374 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
  %375 = @func_2280() /* ty=float32 */;
  %376 = cast(%375, dtype="uint16") /* ty=uint16 */;
  %377 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 3, 6), float32] */, dtype="uint16") /* ty=Tensor[(7, 3, 6), uint16] */;
  %378 = cast(meta[relay.Constant][19] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %379 = cast(meta[relay.Constant][20] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %380 = reshape(%378, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float32] */;
  %381 = reshape(%379, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %382 = @func_521(%380, %381) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %383 = %374.0;
  %384 = cast(%383, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %385 = cast(%383, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %386 = cast(meta[relay.Constant][21] /* ty=Tensor[(42, 4), bool] */, dtype="bool") /* ty=Tensor[(42, 4), bool] */;
  %387 = reshape(%384, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %388 = reshape(%385, newshape=[2464]) /* ty=Tensor[(2464), float32] */;
  %389 = reshape(%386, newshape=[168]) /* ty=Tensor[(168), bool] */;
  %390 = @func_2354(%387, %388, %389) /* ty=(Tensor[(2464), bool], Tensor[(11, 12, 16), float64], Tensor[(2464), int32], Tensor[(2, 12, 7), bool], Tensor[(168), bool]) */;
  %391 = %373.0;
  %392 = bitwise_or(%376, %377) /* ty=Tensor[(7, 3, 6), uint16] */;
  %393 = %382.6;
  %394 = %390.1;
  (%391, %383, %392, %393, meta[relay.Constant][19] /* ty=Tensor[(210), float32] */, meta[relay.Constant][20] /* ty=Tensor[(36), float32] */, %394, meta[relay.Constant][21] /* ty=Tensor[(42, 4), bool] */)
}

def @func_3651() -> Tensor[(2464), float64] {
  %396 = fn () -> Tensor[(2464), float64] {
    %395 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
    %395.0
  };
  %396() /* ty=Tensor[(2464), float64] */
}

def @func_1473() -> (Tensor[(2464), float64],) {
  %397 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
  %398 = %397.0;
  (%398,)
}

def @func_11557() -> (Tensor[(5, 6, 10), float64],) {
  @func_11555() /* ty=(Tensor[(5, 6, 10), float64],) */
}

def @func_6580() -> float32 {
  %399 = @func_2816() /* ty=(float32, Tensor[(11, 12, 16), float64]) */;
  %399.0
}

def @func_4303(%var_4302: Tensor[(300), float64]) -> Tensor[(300), int16] {
  %406 = fn (%var_4288: Tensor[(300), float64]) -> Tensor[(300), int16] {
    %400 = @func_2080() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
    %401 = %400.1;
    %402 = cast(%var_4288, dtype="int16") /* ty=Tensor[(300), int16] */;
    %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(1), int32] */;
    %404 = cast(%401, dtype="int16") /* ty=Tensor[(300), int16] */;
    %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?), int16] */;
    left_shift(%404, %405) /* ty=Tensor[(300), int16] */
  };
  %406(%var_4302) /* ty=Tensor[(300), int16] */
}

def @func_11046(%var_10980: Tensor[(5, 5, 9), float64], %var_11015: Tensor[(126), float32]) -> (Tensor[(5, 5, 9), float64], Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(16, 12, 7), float32], Tensor[(2464), float64], Tensor[(210), float32]) {
  %407 = cast(%var_10980, dtype="float64") /* ty=Tensor[(5, 5, 9), float64] */;
  %408 = cast(meta[relay.Constant][22] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %409 = reshape(%408, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %410 = @func_3863(%409) /* ty=(Tensor[(2464), bool], Tensor[(5, 6, 10), float64]) */;
  %411 = cast(%var_11015, dtype="float32") /* ty=Tensor[(126), float32] */;
  %412 = reshape(%411, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), float32] */;
  %413 = @func_10685() /* ty=(Tensor[(16, 12, 7), float32], Tensor[(2464), float64], Tensor[(300, 1), float64]) */;
  %414 = cast(meta[relay.Constant][23] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %415 = reshape(%414, newshape=[5, 42]) /* ty=Tensor[(5, 42), float32] */;
  %416 = @func_2037(%415) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(5, 42), float32], Tensor[(3, 12), float32], Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %417 = sin(%407) /* ty=Tensor[(5, 5, 9), float64] */;
  %418 = %410.0;
  %419 = @func_144(%412) /* ty=Tensor[(6, 7, 3), float32] */;
  %420 = %413.0;
  %421 = %416.4;
  (%417, %418, meta[relay.Constant][22] /* ty=Tensor[(2464), float64] */, %419, %var_11015, %420, %421, meta[relay.Constant][23] /* ty=Tensor[(210), float32] */)
}

def @func_5568() -> (Tensor[(2464), float64],) {
  %422 = @func_2709() /* ty=(Tensor[(2464), float64], float32) */;
  %423 = %422.0;
  (%423,)
}

def @func_11454() -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(300), float64]) {
  %429 = fn () -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(300), float64]) {
    %424 = @func_7893() /* ty=(Tensor[(2464), float64], Tensor[(300, 1), float64]) */;
    %425 = @func_8212() /* ty=(Tensor[(300), float64], Tensor[(5, 42), float32], Tensor[(210, 1), float32]) */;
    %426 = %424.0;
    %427 = @func_10119() /* ty=Tensor[(2464), float64] */;
    %428 = %425.0;
    (%426, %427, %428)
  };
  %429() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(300), float64]) */
}

def @func_2237(%var_2190: Tensor[(1, 126), float32], %var_2199: Tensor[(14), uint16], %var_2200: Tensor[(168), uint16], %var_2201: Tensor[(300), float64], %var_2203: Tensor[(36), float32]) -> (Tensor[(6, 7, 3), float32], Tensor[(1, 126), float32], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(210), float32], Tensor[(36), float32], Tensor[(?, 9, 3), uint64], Tensor[(8, 9, 3), float32]) {
  %430 = cast(%var_2190, dtype="float32") /* ty=Tensor[(1, 126), float32] */;
  %431 = reshape(%430, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), float32] */;
  %432 = cast(%var_2199, dtype="uint16") /* ty=Tensor[(14), uint16] */;
  %433 = cast(%var_2200, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %434 = cast(%var_2201, dtype="float64") /* ty=Tensor[(300), float64] */;
  %435 = cast(meta[relay.Constant][24] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %436 = cast(%var_2203, dtype="float32") /* ty=Tensor[(36), float32] */;
  %437 = reshape(%432, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), uint16] */;
  %438 = reshape(%433, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), uint16] */;
  %439 = reshape(%434, newshape=[150, 2]) /* ty=Tensor[(150, 2), float64] */;
  %440 = reshape(%435, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %441 = reshape(%436, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %442 = @func_1139(%437, %438, %439, %440, %441) /* ty=(Tensor[(12, 7, 2), uint16], Tensor[(11, 14, 16), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(150, 2), float64], Tensor[(5, 6, 10), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32], Tensor[(36), float32]) */;
  %443 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 9, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 3), float32] */;
  %444 = sin(%443) /* ty=Tensor[(1, 9, 3), float32] */;
  %445 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 9, 3), float32] */, dtype="uint64") /* ty=Tensor[(1, 9, 3), uint64] */;
  %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%444, dtype="uint64") /* ty=Tensor[(1, 9, 3), uint64] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %449 = cast(%444, dtype="float32") /* ty=Tensor[(1, 9, 3), float32] */;
  %450 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 9, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 9, 3), float32] */;
  %451 = @func_144(%431) /* ty=Tensor[(6, 7, 3), float32] */;
  %452 = %442.2;
  %453 = logical_xor(%447, %448) /* ty=Tensor[(?, 9, 3), uint64] */;
  %454 = divide(%449, %450) /* ty=Tensor[(8, 9, 3), float32] */;
  (%451, %var_2190, %452, %var_2199, %var_2200, %var_2201, meta[relay.Constant][24] /* ty=Tensor[(210), float32] */, %var_2203, %453, %454)
}

def @func_7076(%var_7072: Tensor[(36), float32]) -> (Tensor[(2464), float64], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(5, 6, 10), float64], Tensor[(150, 2), float64], Tensor[(14), uint16], Tensor[(210), float32], Tensor[(36), float32]) {
  %455 = @func_2831() /* ty=(Tensor[(2464), float64],) */;
  %456 = cast(meta[relay.Constant][27] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %457 = reshape(%456, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %458 = @func_6663(%457) /* ty=(Tensor[(2464), float64], Tensor[(3, 12), float32], Tensor[(36), float32], Tensor[(126), float32], Tensor[(14, 1), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %459 = cast(meta[relay.Constant][28] /* ty=Tensor[(14), uint16] */, dtype="uint16") /* ty=Tensor[(14), uint16] */;
  %460 = %458.5;
  %461 = cast(%460, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %462 = cast(meta[relay.Constant][27] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %463 = cast(meta[relay.Constant][29] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %464 = cast(%var_7072, dtype="float32") /* ty=Tensor[(36), float32] */;
  %465 = reshape(%459, newshape=[1, 7, 2]) /* ty=Tensor[(1, 7, 2), uint16] */;
  %466 = reshape(%461, newshape=[12, 7, 2]) /* ty=Tensor[(12, 7, 2), uint16] */;
  %467 = reshape(%462, newshape=[150, 2]) /* ty=Tensor[(150, 2), float64] */;
  %468 = reshape(%463, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %469 = reshape(%464, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %470 = @func_1139(%465, %466, %467, %468, %469) /* ty=(Tensor[(12, 7, 2), uint16], Tensor[(11, 14, 16), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(150, 2), float64], Tensor[(5, 6, 10), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32], Tensor[(36), float32]) */;
  %471 = %455.0;
  %472 = @func_6812() /* ty=Tensor[(5, 6, 10), float64] */;
  %473 = %470.4;
  (%471, %460, meta[relay.Constant][27] /* ty=Tensor[(300), float64] */, %472, %473, meta[relay.Constant][28] /* ty=Tensor[(14), uint16] */, meta[relay.Constant][29] /* ty=Tensor[(210), float32] */, %var_7072)
}

def @func_10686() -> (Tensor[(16, 12, 7), float32], Tensor[(2464), float64], Tensor[(300, 1), float64]) {
  %479 = fn () -> (Tensor[(16, 12, 7), float32], Tensor[(2464), float64], Tensor[(300, 1), float64]) {
    %474 = cast(meta[relay.Constant][30] /* ty=Tensor[(16, 12, 7), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 7), float32] */;
    %475 = @func_8915() /* ty=(Tensor[(300, 1), float64],) */;
    %476 = asinh(%474) /* ty=Tensor[(16, 12, 7), float32] */;
    %477 = @func_4974() /* ty=Tensor[(2464), float64] */;
    %478 = %475.0;
    (%476, %477, %478)
  };
  %479() /* ty=(Tensor[(16, 12, 7), float32], Tensor[(2464), float64], Tensor[(300, 1), float64]) */
}

def @func_1475() -> (Tensor[(2464), float64],) {
  @func_1473() /* ty=(Tensor[(2464), float64],) */
}

def @func_10613() -> (Tensor[(2464), float64], Tensor[(5, 6, 10), float64]) {
  %480 = @func_2709() /* ty=(Tensor[(2464), float64], float32) */;
  %481 = @func_2513() /* ty=(Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %482 = %480.0;
  %483 = %481.1;
  (%482, %483)
}

def @func_61(%var_44: Tensor[(8, 10, 13), float32], %var_45: Tensor[(8, 10, 13), float32]) -> (Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) {
  %484 = cast(%var_45, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
  %485 = shape_of(%var_44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%var_44, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %488 = cast(%var_45, dtype="float64") /* ty=Tensor[(8, 10, 13), float64] */;
  %489 = mod(%486, %487) /* ty=Tensor[(8, 10, 13), float32] */;
  %490 = acosh(%488) /* ty=Tensor[(8, 10, 13), float64] */;
  (%489, %490)
}

def @func_5459(%var_5457: Tensor[(10, 15, 15), float64], %var_5458: Tensor[(10, 15, 15), float64]) -> Tensor[(10, 15, 15), float64] {
  @func_5455(%var_5457, %var_5458) /* ty=Tensor[(10, 15, 15), float64] */
}

def @func_2003() -> (Tensor[(3, 12), float32],) {
  %491 = @func_1184() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */;
  %492 = %491.3;
  (%492,)
}

def @func_5306(%var_5304: Tensor[(10, 11, 5), float64], %var_5305: Tensor[(1040), float64]) -> (Tensor[(10, 11, 5), float64], Tensor[(300, 1), float64], Tensor[(1040), float64], Tensor[(300, 16), int8]) {
  @func_5302(%var_5304, %var_5305) /* ty=(Tensor[(10, 11, 5), float64], Tensor[(300, 1), float64], Tensor[(1040), float64], Tensor[(300, 16), int8]) */
}

def @func_3425(%var_3424: Tensor[(8, 11, 16), float32]) -> (Tensor[(8, 11, 16), float64],) {
  %497 = fn (%var_3370: Tensor[(8, 11, 16), float32]) -> (Tensor[(8, 11, 16), float64],) {
    %493 = cast(%var_3370, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
    %494 = log10(%493) /* ty=Tensor[(8, 11, 16), float32] */;
    %495 = cast(%494, dtype="float64") /* ty=Tensor[(8, 11, 16), float64] */;
    %496 = sigmoid(%495) /* ty=Tensor[(8, 11, 16), float64] */;
    (%496,)
  };
  %497(%var_3424) /* ty=(Tensor[(8, 11, 16), float64],) */
}

def @func_8333() -> (float32, float32) {
  %502 = fn () -> (float32, float32) {
    %498 = @func_5422() /* ty=(float32,) */;
    %499 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
    %500 = %498.0;
    %501 = %499.1;
    (%500, %501)
  };
  %502() /* ty=(float32, float32) */
}

def @func_6813() -> Tensor[(5, 6, 10), float64] {
  %504 = fn () -> Tensor[(5, 6, 10), float64] {
    %503 = @func_2513() /* ty=(Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
    %503.1
  };
  %504() /* ty=Tensor[(5, 6, 10), float64] */
}

def @func_7511() -> (Tensor[(2464), float64], Tensor[(300, 1), float64]) {
  @func_7509() /* ty=(Tensor[(2464), float64], Tensor[(300, 1), float64]) */
}

def @main(%var_11823: Tensor[(300, 1), float64]) -> (Tensor[(11, 12, 16), float64], Tensor[(300, ?), bool]) {
  %505 = @func_3151() /* ty=(Tensor[(300, 1), float64],) */;
  %506 = %505.0;
  %507 = cast(%var_11823, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(2), int32] */;
  %509 = cast(%506, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %511 = @func_5856() /* ty=Tensor[(11, 12, 16), float64] */;
  %512 = logical_and(%509, %510) /* ty=Tensor[(300, ?), bool] */;
  (%511, %512)
}

def @func_1099(%var_1098: Tensor[(5, 6, 10), float64]) -> Tensor[(5, 6, 10), float64] {
  %514 = fn (%var_1087: Tensor[(5, 6, 10), float64]) -> Tensor[(5, 6, 10), float64] {
    %513 = cast(%var_1087, dtype="float64") /* ty=Tensor[(5, 6, 10), float64] */;
    atanh(%513) /* ty=Tensor[(5, 6, 10), float64] */
  };
  %514(%var_1098) /* ty=Tensor[(5, 6, 10), float64] */
}

def @func_5422() -> (float32,) {
  %515 = @func_2709() /* ty=(Tensor[(2464), float64], float32) */;
  %516 = %515.1;
  (%516,)
}

def @func_1759(%var_1757: Tensor[(1, 126), float32], %var_1758: Tensor[(2112, 1), float64]) -> (Tensor[(2464), float64], Tensor[(126), float32], Tensor[(1, 126), float32], Tensor[(2, 12, 7), bool], Tensor[(1, 168), bool], Tensor[(11, 12, 16), bool], Tensor[(2112, 1), float64]) {
  @func_1755(%var_1757, %var_1758) /* ty=(Tensor[(2464), float64], Tensor[(126), float32], Tensor[(1, 126), float32], Tensor[(2, 12, 7), bool], Tensor[(1, 168), bool], Tensor[(11, 12, 16), bool], Tensor[(2112, 1), float64]) */
}

def @func_8063() -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300), float64], Tensor[(11, 12, 16), float64]) {
  %517 = @func_6014() /* ty=(Tensor[(2464), float64],) */;
  %518 = cast(meta[relay.Constant][31] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %519 = reshape(%518, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %520 = @func_1855(%519) /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) */;
  %521 = @func_4120() /* ty=Tensor[(2464), float64] */;
  %522 = %517.0;
  %523 = @func_6692() /* ty=Tensor[(11, 12, 16), float64] */;
  %524 = %520.2;
  %525 = @func_6546() /* ty=Tensor[(11, 12, 16), float64] */;
  (%521, %522, %523, %524, meta[relay.Constant][31] /* ty=Tensor[(300), float64] */, %525)
}

def @func_144(%var_139: Tensor[(6, 7, 3), float32]) -> Tensor[(6, 7, 3), float32] {
  %526 = cast(%var_139, dtype="float32") /* ty=Tensor[(6, 7, 3), float32] */;
  log(%526) /* ty=Tensor[(6, 7, 3), float32] */
}

def @func_1536() -> Tensor[(11, 12, 16), float64] {
  @func_1534() /* ty=Tensor[(11, 12, 16), float64] */
}

def @func_6203(%var_6202: Tensor[(5, 12, 1), float32]) -> (Tensor[(5, 12, ?), float32],) {
  %532 = fn (%var_6195: Tensor[(5, 12, 1), float32]) -> (Tensor[(5, 12, ?), float32],) {
    %527 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 1), float32] */;
    %528 = shape_of(%var_6195, dtype="int32") /* ty=Tensor[(3), int32] */;
    %529 = cast(%var_6195, dtype="float32") /* ty=Tensor[(5, 12, 1), float32] */;
    %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %531 = power(%529, %530) /* ty=Tensor[(5, 12, ?), float32] */;
    (%531,)
  };
  %532(%var_6202) /* ty=(Tensor[(5, 12, ?), float32],) */
}

def @func_1858(%var_1856: Tensor[(300), float64]) -> (Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) {
  @func_1855(%var_1856) /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) */
}

def @func_7624() -> (Tensor[(2464), float64],) {
  %534 = fn () -> (Tensor[(2464), float64],) {
    %533 = @func_6227() /* ty=Tensor[(2464), float64] */;
    (%533,)
  };
  %534() /* ty=(Tensor[(2464), float64],) */
}

def @func_1632(%var_1630: Tensor[(126), float32], %var_1631: Tensor[(11, 12, 16), float64]) -> (Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(11, 12, 16), bool]) {
  %544 = fn (%var_1595: Tensor[(126), float32], %var_1614: Tensor[(11, 12, 16), float64]) -> (Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(11, 12, 16), bool]) {
    %535 = cast(%var_1595, dtype="float32") /* ty=Tensor[(126), float32] */;
    %536 = reshape(%535, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), float32] */;
    %537 = @func_1534() /* ty=Tensor[(11, 12, 16), float64] */;
    %538 = cast(%var_1614, dtype="bool") /* ty=Tensor[(11, 12, 16), bool] */;
    %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(%537, dtype="bool") /* ty=Tensor[(11, 12, 16), bool] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %542 = @func_144(%536) /* ty=Tensor[(6, 7, 3), float32] */;
    %543 = less_equal(%540, %541) /* ty=Tensor[(11, 12, 16), bool] */;
    (%542, %var_1595, %543)
  };
  %544(%var_1630, %var_1631) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(11, 12, 16), bool]) */
}

def @func_7509() -> (Tensor[(2464), float64], Tensor[(300, 1), float64]) {
  %545 = @func_2709() /* ty=(Tensor[(2464), float64], float32) */;
  %546 = @func_3149() /* ty=(Tensor[(300, 1), float64],) */;
  %547 = %545.0;
  %548 = %546.0;
  (%547, %548)
}

def @func_8185(%var_8183: Tensor[(2, 2, 13), int8], %var_8184: Tensor[(2, 2, 13), int8]) -> Tensor[(2, 2, 13), int8] {
  %553 = fn (%var_8166: Tensor[(2, 2, 13), int8], %var_8167: Tensor[(2, 2, 13), int8]) -> Tensor[(2, 2, 13), int8] {
    %549 = cast(%var_8167, dtype="int8") /* ty=Tensor[(2, 2, 13), int8] */;
    %550 = shape_of(%var_8166, dtype="int32") /* ty=Tensor[(3), int32] */;
    %551 = cast(%var_8166, dtype="int8") /* ty=Tensor[(2, 2, 13), int8] */;
    %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    maximum(%551, %552) /* ty=Tensor[(2, 2, 13), int8] */
  };
  %553(%var_8183, %var_8184) /* ty=Tensor[(2, 2, 13), int8] */
}

def @func_10858() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  %554 = @func_7659() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %555 = @func_5153() /* ty=(Tensor[(2464), float64],) */;
  %556 = %554.1;
  %557 = %555.0;
  (%556, %557)
}

def @func_2358(%var_2355: Tensor[(2464), float64], %var_2356: Tensor[(2464), float32], %var_2357: Tensor[(168), bool]) -> (Tensor[(2464), bool], Tensor[(11, 12, 16), float64], Tensor[(2464), int32], Tensor[(2, 12, 7), bool], Tensor[(168), bool]) {
  %579 = fn (%var_2327: Tensor[(2464), float64], %var_2342: Tensor[(2464), float32], %var_2351: Tensor[(168), bool]) -> (Tensor[(2464), bool], Tensor[(11, 12, 16), float64], Tensor[(2464), int32], Tensor[(2, 12, 7), bool], Tensor[(168), bool]) {
    %558 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
    %559 = %558.0;
    %560 = cast(%var_2327, dtype="float32") /* ty=Tensor[(2464), float32] */;
    %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(1), int32] */;
    %562 = cast(%559, dtype="float32") /* ty=Tensor[(2464), float32] */;
    %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?), float32] */;
    %564 = maximum(%562, %563) /* ty=Tensor[(2464), float32] */;
    %565 = cast(%var_2327, dtype="bool") /* ty=Tensor[(2464), bool] */;
    %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(1), int32] */;
    %567 = cast(%564, dtype="bool") /* ty=Tensor[(2464), bool] */;
    %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?), bool] */;
    %569 = cast(%var_2342, dtype="int32") /* ty=Tensor[(2464), int32] */;
    %570 = shape_of(%564, dtype="int32") /* ty=Tensor[(1), int32] */;
    %571 = cast(%564, dtype="int32") /* ty=Tensor[(2464), int32] */;
    %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?), int32] */;
    %573 = cast(%var_2351, dtype="bool") /* ty=Tensor[(168), bool] */;
    %574 = reshape(%573, newshape=[2, 12, 7]) /* ty=Tensor[(2, 12, 7), bool] */;
    %575 = not_equal(%567, %568) /* ty=Tensor[(2464), bool] */;
    %576 = @func_1534() /* ty=Tensor[(11, 12, 16), float64] */;
    %577 = bitwise_or(%571, %572) /* ty=Tensor[(2464), int32] */;
    %578 = @func_1047(%574) /* ty=Tensor[(2, 12, 7), bool] */;
    (%575, %576, %577, %578, %var_2351)
  };
  %579(%var_2355, %var_2356, %var_2357) /* ty=(Tensor[(2464), bool], Tensor[(11, 12, 16), float64], Tensor[(2464), int32], Tensor[(2, 12, 7), bool], Tensor[(168), bool]) */
}

def @func_8388() -> (float32,) {
  %582 = fn () -> (float32,) {
    %580 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
    %581 = %580.0;
    (%581,)
  };
  %582() /* ty=(float32,) */
}

def @func_2832() -> (Tensor[(2464), float64],) {
  %585 = fn () -> (Tensor[(2464), float64],) {
    %583 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
    %584 = %583.0;
    (%584,)
  };
  %585() /* ty=(Tensor[(2464), float64],) */
}

def @func_5605() -> (Tensor[(2464), float64], Tensor[(8, 6, 9), float32], Tensor[(432), float32]) {
  %591 = fn () -> (Tensor[(2464), float64], Tensor[(8, 6, 9), float32], Tensor[(432), float32]) {
    %586 = @func_4725() /* ty=(Tensor[(2464), float64],) */;
    %587 = cast(meta[relay.Constant][33] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %588 = reshape(%587, newshape=[8, 6, 9]) /* ty=Tensor[(8, 6, 9), float32] */;
    %589 = %586.0;
    %590 = @func_4999(%588) /* ty=Tensor[(8, 6, 9), float32] */;
    (%589, %590, meta[relay.Constant][33] /* ty=Tensor[(432), float32] */)
  };
  %591() /* ty=(Tensor[(2464), float64], Tensor[(8, 6, 9), float32], Tensor[(432), float32]) */
}

def @func_3332() -> Tensor[(300, 1), float64] {
  %593 = fn () -> Tensor[(300, 1), float64] {
    %592 = @func_3149() /* ty=(Tensor[(300, 1), float64],) */;
    %592.0
  };
  %593() /* ty=Tensor[(300, 1), float64] */
}

def @func_5857() -> Tensor[(11, 12, 16), float64] {
  %594 = fn () -> Tensor[(11, 12, 16), float64] {
    @func_1534() /* ty=Tensor[(11, 12, 16), float64] */
  };
  %594() /* ty=Tensor[(11, 12, 16), float64] */
}

def @func_3729() -> Tensor[(2464), float64] {
  %600 = fn () -> Tensor[(2464), float64] {
    %595 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
    %596 = %595.1;
    %597 = @func_2892() /* ty=Tensor[(2464), float64] */;
    %598 = cast(%596, dtype="float64") /* ty=float64 */;
    %599 = cast(%597, dtype="float64") /* ty=Tensor[(2464), float64] */;
    mod(%598, %599) /* ty=Tensor[(2464), float64] */
  };
  %600() /* ty=Tensor[(2464), float64] */
}

def @func_9052() -> (Tensor[(42, 4), bool], Tensor[(11, 12, 16), float64], Tensor[(300, ?), bool]) {
  %601 = @func_3207() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16], float32, Tensor[(210), float32], Tensor[(36), float32], Tensor[(11, 12, 16), float64], Tensor[(42, 4), bool]) */;
  %602 = @func_4631() /* ty=Tensor[(300, 1), float64] */;
  %603 = cast(%602, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %604 = log(%603) /* ty=Tensor[(300, 1), float32] */;
  %605 = cast(%602, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(2), int32] */;
  %607 = cast(%604, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %609 = %601.7;
  %610 = @func_6750() /* ty=Tensor[(11, 12, 16), float64] */;
  %611 = not_equal(%607, %608) /* ty=Tensor[(300, ?), bool] */;
  (%609, %610, %611)
}

def @func_2515() -> (Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) {
  @func_2513() /* ty=(Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */
}

def @func_8565(%var_8563: Tensor[(432), float32]) -> (float32, Tensor[(432), float32], Tensor[(8, 6, 9), float32], Tensor[(2464), float64]) {
  @func_8562(%var_8563) /* ty=(float32, Tensor[(432), float32], Tensor[(8, 6, 9), float32], Tensor[(2464), float64]) */
}

def @func_6112(%var_6110: Tensor[(2464), float32], %var_6111: Tensor[(210), float32]) -> (Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(210), float32]) {
  @func_6108(%var_6110, %var_6111) /* ty=(Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(210), float32]) */
}

def @func_5442(%var_5440: Tensor[(7, 4, 16), float32]) -> Tensor[(7, 4, 16), float32] {
  @func_5439(%var_5440) /* ty=Tensor[(7, 4, 16), float32] */
}

def @func_8065() -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300), float64], Tensor[(11, 12, 16), float64]) {
  @func_8063() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300), float64], Tensor[(11, 12, 16), float64]) */
}

def @func_5626(%var_5613: Tensor[(13, 15, 14), float32], %var_5614: Tensor[(13, 15, 14), float32]) -> (Tensor[(13, 15, 14), float32],) {
  %612 = cast(%var_5614, dtype="float32") /* ty=Tensor[(13, 15, 14), float32] */;
  %613 = shape_of(%var_5613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%var_5613, dtype="float32") /* ty=Tensor[(13, 15, 14), float32] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %616 = divide(%614, %615) /* ty=Tensor[(13, 15, 14), float32] */;
  (%616,)
}

def @func_9416(%var_9414: Tensor[(300), float64]) -> (Tensor[(300), bool],) {
  @func_9413(%var_9414) /* ty=(Tensor[(300), bool],) */
}

def @func_7346() -> (Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(1408), float32], Tensor[(5, 6, 10), float64]) {
  @func_7344() /* ty=(Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(1408), float32], Tensor[(5, 6, 10), float64]) */
}

def @func_9398() -> (Tensor[(2464), float64],) {
  @func_9396() /* ty=(Tensor[(2464), float64],) */
}

def @func_8098() -> (float32,) {
  %617 = @func_6864() /* ty=(float32,) */;
  %618 = %617.0;
  (%618,)
}

def @func_8241() -> (Tensor[(5, 6, 10), float64], Tensor[(2464), float64]) {
  @func_8239() /* ty=(Tensor[(5, 6, 10), float64], Tensor[(2464), float64]) */
}

def @func_5819(%var_5817: Tensor[(126), float32], %var_5818: Tensor[(44, 48), float64]) -> (Tensor[(2464), float64], Tensor[(432), float32], Tensor[(8, 6, 9), float64], Tensor[(126), float32], Tensor[(126), float32], Tensor[(44, 48), float64], Tensor[(2464), float32], Tensor[(882), uint32], Tensor[(126), float32]) {
  @func_5815(%var_5817, %var_5818) /* ty=(Tensor[(2464), float64], Tensor[(432), float32], Tensor[(8, 6, 9), float64], Tensor[(126), float32], Tensor[(126), float32], Tensor[(44, 48), float64], Tensor[(2464), float32], Tensor[(882), uint32], Tensor[(126), float32]) */
}

def @func_65(%var_63: Tensor[(8, 10, 13), float32], %var_64: Tensor[(8, 10, 13), float32]) -> (Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) {
  @func_61(%var_63, %var_64) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */
}

def @func_5815(%var_5796: Tensor[(126), float32], %var_5797: Tensor[(44, 48), float64]) -> (Tensor[(2464), float64], Tensor[(432), float32], Tensor[(8, 6, 9), float64], Tensor[(126), float32], Tensor[(126), float32], Tensor[(44, 48), float64], Tensor[(2464), float32], Tensor[(882), uint32], Tensor[(126), float32]) {
  %619 = @func_2831() /* ty=(Tensor[(2464), float64],) */;
  %620 = cast(meta[relay.Constant][34] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %621 = reshape(%620, newshape=[8, 6, 9]) /* ty=Tensor[(8, 6, 9), float32] */;
  %622 = @func_4999(%621) /* ty=Tensor[(8, 6, 9), float32] */;
  %623 = cast(%622, dtype="float32") /* ty=Tensor[(8, 6, 9), float32] */;
  %624 = log(%623) /* ty=Tensor[(8, 6, 9), float32] */;
  %625 = cast(%624, dtype="float64") /* ty=Tensor[(8, 6, 9), float64] */;
  %626 = cast(%var_5796, dtype="float32") /* ty=Tensor[(126), float32] */;
  %627 = cast(%var_5797, dtype="float64") /* ty=Tensor[(44, 48), float64] */;
  %628 = reshape(%626, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %629 = reshape(%627, newshape=[11, 12, 16]) /* ty=Tensor[(11, 12, 16), float64] */;
  %630 = @func_1629(%628, %629) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(11, 12, 16), bool]) */;
  %631 = cast(meta[relay.Constant][35] /* ty=Tensor[(882), uint32] */, dtype="uint32") /* ty=Tensor[(882), uint32] */;
  %632 = cast(%var_5796, dtype="float32") /* ty=Tensor[(126), float32] */;
  %633 = reshape(%631, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), uint32] */;
  %634 = reshape(%632, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %635 = @func_3629(%633, %634) /* ty=(Tensor[(9, 14, 7), uint32], Tensor[(2464), float32], Tensor[(126), float32], Tensor[(2464), float64]) */;
  %636 = %630.1;
  %637 = cast(%636, dtype="float32") /* ty=Tensor[(126), float32] */;
  %638 = %635.1;
  %639 = cast(%638, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %640 = reshape(%637, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %641 = reshape(%639, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %642 = @func_1324(%640, %641) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(2464), float32]) */;
  %643 = %619.0;
  %644 = atanh(%625) /* ty=Tensor[(8, 6, 9), float64] */;
  %645 = %642.1;
  (%643, meta[relay.Constant][34] /* ty=Tensor[(432), float32] */, %644, %636, %var_5796, %var_5797, %638, meta[relay.Constant][35] /* ty=Tensor[(882), uint32] */, %645)
}

def @func_11162(%var_11152: Tensor[(882), uint32]) -> (Tensor[(2464), float64], Tensor[(2464), float32], Tensor[(882), uint32], Tensor[(126), float32]) {
  %646 = @func_9895() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %647 = cast(%var_11152, dtype="uint32") /* ty=Tensor[(882), uint32] */;
  %648 = cast(meta[relay.Constant][36] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %649 = reshape(%647, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), uint32] */;
  %650 = reshape(%648, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %651 = @func_3629(%649, %650) /* ty=(Tensor[(9, 14, 7), uint32], Tensor[(2464), float32], Tensor[(126), float32], Tensor[(2464), float64]) */;
  %652 = %646.1;
  %653 = %651.1;
  (%652, %653, %var_11152, meta[relay.Constant][36] /* ty=Tensor[(126), float32] */)
}

def @func_3322() -> (float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32]) {
  @func_3320() /* ty=(float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32]) */
}

def @func_8313() -> (Tensor[(2464), float64],) {
  %655 = fn () -> (Tensor[(2464), float64],) {
    %654 = @func_3650() /* ty=Tensor[(2464), float64] */;
    (%654,)
  };
  %655() /* ty=(Tensor[(2464), float64],) */
}

def @func_9203() -> Tensor[(2464), float64] {
  @func_9201() /* ty=Tensor[(2464), float64] */
}

def @func_4358(%var_4344: Tensor[(2464), float64]) -> (Tensor[(2464), int16], Tensor[(2464), uint64]) {
  %656 = @func_3650() /* ty=Tensor[(2464), float64] */;
  %657 = cast(%var_4344, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(1), int32] */;
  %659 = cast(%656, dtype="int16") /* ty=Tensor[(2464), int16] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?), int16] */;
  %661 = cast(%var_4344, dtype="uint64") /* ty=Tensor[(2464), uint64] */;
  %662 = shape_of(%656, dtype="int32") /* ty=Tensor[(1), int32] */;
  %663 = cast(%656, dtype="uint64") /* ty=Tensor[(2464), uint64] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %665 = right_shift(%659, %660) /* ty=Tensor[(2464), int16] */;
  %666 = bitwise_and(%663, %664) /* ty=Tensor[(2464), uint64] */;
  (%665, %666)
}

def @func_9054() -> (Tensor[(42, 4), bool], Tensor[(11, 12, 16), float64], Tensor[(300, ?), bool]) {
  @func_9052() /* ty=(Tensor[(42, 4), bool], Tensor[(11, 12, 16), float64], Tensor[(300, ?), bool]) */
}

def @func_2039(%var_2038: Tensor[(5, 42), float32]) -> (Tensor[(8, 10, 13), float64], Tensor[(5, 42), float32], Tensor[(3, 12), float32], Tensor[(2464), float64], Tensor[(2464), float64]) {
  %679 = fn (%var_2012: Tensor[(5, 42), float32]) -> (Tensor[(8, 10, 13), float64], Tensor[(5, 42), float32], Tensor[(3, 12), float32], Tensor[(2464), float64], Tensor[(2464), float64]) {
    %667 = cast(%var_2012, dtype="float32") /* ty=Tensor[(5, 42), float32] */;
    %668 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
    %669 = reshape(%667, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float32] */;
    %670 = reshape(%668, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %671 = @func_521(%669, %670) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
    %672 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
    %673 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
    %674 = %673.0;
    %675 = cast(%674, dtype="float64") /* ty=Tensor[(2464), float64] */;
    %676 = %671.0;
    %677 = %672.0;
    %678 = sigmoid(%675) /* ty=Tensor[(2464), float64] */;
    (%676, %var_2012, meta[relay.Constant][37] /* ty=Tensor[(3, 12), float32] */, %677, %678)
  };
  %679(%var_2038) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(5, 42), float32], Tensor[(3, 12), float32], Tensor[(2464), float64], Tensor[(2464), float64]) */
}

def @func_10191() -> Tensor[(2464), bool] {
  %681 = fn () -> Tensor[(2464), bool] {
    %680 = @func_6898() /* ty=(Tensor[(2464), bool], float32) */;
    %680.0
  };
  %681() /* ty=Tensor[(2464), bool] */
}

def @func_8746(%var_8745: Tensor[(2464), float64]) -> (Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) {
  %702 = fn (%var_8722: Tensor[(2464), float64]) -> (Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) {
    %682 = @func_7131() /* ty=(Tensor[(2464), float32], Tensor[(2464), float64]) */;
    %683 = %682.1;
    %684 = cast(%var_8722, dtype="float32") /* ty=Tensor[(2464), float32] */;
    %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(1), int32] */;
    %686 = cast(%683, dtype="float32") /* ty=Tensor[(2464), float32] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?), float32] */;
    %688 = subtract(%686, %687) /* ty=Tensor[(2464), float32] */;
    %689 = cast(%688, dtype="bool") /* ty=Tensor[(2464), bool] */;
    %690 = shape_of(%var_8722, dtype="int32") /* ty=Tensor[(1), int32] */;
    %691 = cast(%var_8722, dtype="bool") /* ty=Tensor[(2464), bool] */;
    %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?), bool] */;
    %693 = cast(%var_8722, dtype="float64") /* ty=Tensor[(2464), float64] */;
    %694 = cast(%688, dtype="float32") /* ty=Tensor[(2464), float32] */;
    %695 = cast(meta[relay.Constant][38] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %696 = reshape(%694, newshape=[2464]) /* ty=Tensor[(2464), float32] */;
    %697 = reshape(%695, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %698 = @func_6108(%696, %697) /* ty=(Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(210), float32]) */;
    %699 = equal(%691, %692) /* ty=Tensor[(2464), bool] */;
    %700 = atanh(%693) /* ty=Tensor[(2464), float64] */;
    %701 = %698.1;
    (%699, %700, %701, meta[relay.Constant][38] /* ty=Tensor[(210), float32] */)
  };
  %702(%var_8745) /* ty=(Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) */
}

def @func_11792() -> (float32, Tensor[(2464), float64]) {
  @func_11790() /* ty=(float32, Tensor[(2464), float64]) */
}

def @func_6898() -> (Tensor[(2464), bool], float32) {
  %703 = @func_4626() /* ty=Tensor[(2464), bool] */;
  %704 = @func_2280() /* ty=float32 */;
  (%703, %704)
}

def @func_7893() -> (Tensor[(2464), float64], Tensor[(300, 1), float64]) {
  %705 = @func_6014() /* ty=(Tensor[(2464), float64],) */;
  %706 = %705.0;
  %707 = @func_3331() /* ty=Tensor[(300, 1), float64] */;
  (%706, %707)
}

def @func_2817() -> (float32, Tensor[(11, 12, 16), float64]) {
  %711 = fn () -> (float32, Tensor[(11, 12, 16), float64]) {
    %708 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
    %709 = %708.0;
    %710 = @func_1534() /* ty=Tensor[(11, 12, 16), float64] */;
    (%709, %710)
  };
  %711() /* ty=(float32, Tensor[(11, 12, 16), float64]) */
}

def @func_5835() -> Tensor[(2464), float64] {
  %713 = fn () -> Tensor[(2464), float64] {
    %712 = @func_4600() /* ty=(Tensor[(2464), float64],) */;
    %712.0
  };
  %713() /* ty=Tensor[(2464), float64] */
}

def @func_3065(%var_3064: Tensor[(63, 2), float32]) -> (Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(300), float64], Tensor[(6, 7, 3), float32], Tensor[(63, 2), float32], Tensor[(14), uint16], Tensor[(42, 4), uint16], Tensor[(36), float32], Tensor[(3, 12), float32], Tensor[(11, 12, 16), float64]) {
  %740 = fn (%var_3029: Tensor[(63, 2), float32]) -> (Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(300), float64], Tensor[(6, 7, 3), float32], Tensor[(63, 2), float32], Tensor[(14), uint16], Tensor[(42, 4), uint16], Tensor[(36), float32], Tensor[(3, 12), float32], Tensor[(11, 12, 16), float64]) {
    %714 = cast(meta[relay.Constant][39] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %715 = cast(meta[relay.Constant][39] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %716 = reshape(%714, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
    %717 = reshape(%715, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
    %718 = @func_61(%716, %717) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
    %719 = @func_2080() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
    %720 = %719.1;
    %721 = cast(%720, dtype="float64") /* ty=Tensor[(300), float64] */;
    %722 = cast(%var_3029, dtype="float32") /* ty=Tensor[(63, 2), float32] */;
    %723 = cast(meta[relay.Constant][40] /* ty=Tensor[(14), uint16] */, dtype="uint16") /* ty=Tensor[(14), uint16] */;
    %724 = cast(meta[relay.Constant][41] /* ty=Tensor[(42, 4), uint16] */, dtype="uint16") /* ty=Tensor[(42, 4), uint16] */;
    %725 = cast(%720, dtype="float64") /* ty=Tensor[(300), float64] */;
    %726 = cast(meta[relay.Constant][42] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %727 = reshape(%722, newshape=[1, 126]) /* ty=Tensor[(1, 126), float32] */;
    %728 = reshape(%723, newshape=[14]) /* ty=Tensor[(14), uint16] */;
    %729 = reshape(%724, newshape=[168]) /* ty=Tensor[(168), uint16] */;
    %730 = reshape(%725, newshape=[300]) /* ty=Tensor[(300), float64] */;
    %731 = reshape(%726, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %732 = @func_2237(%727, %728, %729, %730, %731) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(1, 126), float32], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(210), float32], Tensor[(36), float32], Tensor[(?, 9, 3), uint64], Tensor[(8, 9, 3), float32]) */;
    %733 = @func_1184() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */;
    %734 = @func_2080() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
    %735 = %718.1;
    %736 = acosh(%721) /* ty=Tensor[(300), float64] */;
    %737 = %732.0;
    %738 = %733.3;
    %739 = %734.0;
    (%735, meta[relay.Constant][39] /* ty=Tensor[(1040), float32] */, %736, %737, %var_3029, meta[relay.Constant][40] /* ty=Tensor[(14), uint16] */, meta[relay.Constant][41] /* ty=Tensor[(42, 4), uint16] */, meta[relay.Constant][42] /* ty=Tensor[(36), float32] */, %738, %739)
  };
  %740(%var_3064) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(300), float64], Tensor[(6, 7, 3), float32], Tensor[(63, 2), float32], Tensor[(14), uint16], Tensor[(42, 4), uint16], Tensor[(36), float32], Tensor[(3, 12), float32], Tensor[(11, 12, 16), float64]) */
}

def @func_8862() -> Tensor[(11, 12, 16), float64] {
  @func_8860() /* ty=Tensor[(11, 12, 16), float64] */
}

def @func_6229() -> Tensor[(2464), float64] {
  @func_6227() /* ty=Tensor[(2464), float64] */
}

def @func_7483(%var_7466: Tensor[(16, 11, 7), float64]) -> (Tensor[(16, 11, 7), float64], Tensor[(16, 11, 7), float64]) {
  %741 = cast(%var_7466, dtype="float64") /* ty=Tensor[(16, 11, 7), float64] */;
  %742 = cast(%var_7466, dtype="float64") /* ty=Tensor[(16, 11, 7), float64] */;
  %743 = acosh(%741) /* ty=Tensor[(16, 11, 7), float64] */;
  %744 = log2(%742) /* ty=Tensor[(16, 11, 7), float64] */;
  (%743, %744)
}

def @func_257(%var_231: float32, %var_232: Tensor[(1, 6, 6), float32]) -> (Tensor[(1, 6, 6), bool], Tensor[(6, 7, 3), float32], Tensor[(21, 6), float32]) {
  %745 = cast(%var_231, dtype="float32") /* ty=float32 */;
  %746 = cast(%var_232, dtype="float32") /* ty=Tensor[(1, 6, 6), float32] */;
  %747 = power(%745, %746) /* ty=Tensor[(1, 6, 6), float32] */;
  %748 = cast(%var_231, dtype="bool") /* ty=bool */;
  %749 = cast(%747, dtype="bool") /* ty=Tensor[(1, 6, 6), bool] */;
  %750 = cast(meta[relay.Constant][43] /* ty=Tensor[(21, 6), float32] */, dtype="float32") /* ty=Tensor[(21, 6), float32] */;
  %751 = reshape(%750, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), float32] */;
  %752 = logical_and(%748, %749) /* ty=Tensor[(1, 6, 6), bool] */;
  %753 = @func_144(%751) /* ty=Tensor[(6, 7, 3), float32] */;
  (%752, %753, meta[relay.Constant][43] /* ty=Tensor[(21, 6), float32] */)
}

def @func_7005() -> (Tensor[(5, 6, 10), float64],) {
  %758 = fn () -> (Tensor[(5, 6, 10), float64],) {
    %754 = @func_2513() /* ty=(Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
    %755 = %754.1;
    %756 = cast(%755, dtype="float64") /* ty=Tensor[(5, 6, 10), float64] */;
    %757 = log10(%756) /* ty=Tensor[(5, 6, 10), float64] */;
    (%757,)
  };
  %758() /* ty=(Tensor[(5, 6, 10), float64],) */
}

def @func_9396() -> (Tensor[(2464), float64],) {
  %759 = @func_4205() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %760 = %759.1;
  (%760,)
}

def @func_1960() -> (Tensor[(11, 12, 16), float64], Tensor[(11, 12, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(9, 4), float32]) {
  %770 = fn () -> (Tensor[(11, 12, 16), float64], Tensor[(11, 12, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(9, 4), float32]) {
    %761 = @func_1184() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */;
    %762 = cast(meta[relay.Constant][44] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
    %763 = cast(meta[relay.Constant][45] /* ty=Tensor[(9, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
    %764 = reshape(%762, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float32] */;
    %765 = reshape(%763, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %766 = @func_521(%764, %765) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
    %767 = %761.0;
    %768 = @func_1534() /* ty=Tensor[(11, 12, 16), float64] */;
    %769 = %766.4;
    (%767, %768, %769, meta[relay.Constant][44] /* ty=Tensor[(210), float32] */, meta[relay.Constant][45] /* ty=Tensor[(9, 4), float32] */)
  };
  %770() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(11, 12, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(9, 4), float32]) */
}

def @func_9599() -> (Tensor[(2464), float64],) {
  %775 = fn () -> (Tensor[(2464), float64],) {
    %771 = @func_8312() /* ty=(Tensor[(2464), float64],) */;
    %772 = %771.0;
    %773 = cast(%772, dtype="float64") /* ty=Tensor[(2464), float64] */;
    %774 = exp(%773) /* ty=Tensor[(2464), float64] */;
    (%774,)
  };
  %775() /* ty=(Tensor[(2464), float64],) */
}

def @func_3956() -> (Tensor[(2464), bool],) {
  %783 = fn () -> (Tensor[(2464), bool],) {
    %776 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
    %777 = %776.1;
    %778 = cast(meta[relay.Constant][46] /* ty=Tensor[(2464), float64] */, dtype="bool") /* ty=Tensor[(2464), bool] */;
    %779 = shape_of(%777, dtype="int32") /* ty=Tensor[(1), int32] */;
    %780 = cast(%777, dtype="bool") /* ty=Tensor[(2464), bool] */;
    %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?), bool] */;
    %782 = logical_and(%780, %781) /* ty=Tensor[(2464), bool] */;
    (%782,)
  };
  %783() /* ty=(Tensor[(2464), bool],) */
}

def @func_7993() -> (Tensor[(2464), uint64],) {
  %784 = @func_3728() /* ty=Tensor[(2464), float64] */;
  %785 = cast(meta[relay.Constant][47] /* ty=Tensor[(2464), float64] */, dtype="uint64") /* ty=Tensor[(2464), uint64] */;
  %786 = shape_of(%784, dtype="int32") /* ty=Tensor[(1), int32] */;
  %787 = cast(%784, dtype="uint64") /* ty=Tensor[(2464), uint64] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %789 = logical_xor(%787, %788) /* ty=Tensor[(2464), uint64] */;
  (%789,)
}

def @func_1272() -> (Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) {
  %796 = fn () -> (Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) {
    %790 = @func_1184() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */;
    %791 = cast(meta[relay.Constant][48] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
    %792 = reshape(%791, newshape=[11, 14, 16]) /* ty=Tensor[(11, 14, 16), float64] */;
    %793 = @func_964(%792) /* ty=(Tensor[(11, 14, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(36), float32], Tensor[(21, 6), float32], float32) */;
    %794 = %790.0;
    %795 = %793.5;
    (%794, %795, meta[relay.Constant][48] /* ty=Tensor[(2464), float64] */)
  };
  %796() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */
}

def @func_11700(%var_11699: Tensor[(300, 13), float64]) -> (Tensor[(300, 1), float64], Tensor[(300, 13), uint16]) {
  %803 = fn (%var_11693: Tensor[(300, 13), float64]) -> (Tensor[(300, 1), float64], Tensor[(300, 13), uint16]) {
    %797 = @func_3331() /* ty=Tensor[(300, 1), float64] */;
    %798 = cast(%797, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
    %799 = cast(%797, dtype="uint16") /* ty=Tensor[(300, 1), uint16] */;
    %800 = cast(%var_11693, dtype="uint16") /* ty=Tensor[(300, 13), uint16] */;
    %801 = sin(%798) /* ty=Tensor[(300, 1), float64] */;
    %802 = bitwise_and(%799, %800) /* ty=Tensor[(300, 13), uint16] */;
    (%801, %802)
  };
  %803(%var_11699) /* ty=(Tensor[(300, 1), float64], Tensor[(300, 13), uint16]) */
}

def @func_10121() -> Tensor[(2464), float64] {
  @func_10119() /* ty=Tensor[(2464), float64] */
}

def @func_3320() -> (float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32]) {
  %804 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
  %805 = cast(meta[relay.Constant][49] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %806 = reshape(%805, newshape=[5, 42]) /* ty=Tensor[(5, 42), float32] */;
  %807 = @func_2037(%806) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(5, 42), float32], Tensor[(3, 12), float32], Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %808 = @func_2280() /* ty=float32 */;
  %809 = %804.0;
  %810 = %807.0;
  (%808, %809, %810, meta[relay.Constant][49] /* ty=Tensor[(210), float32] */)
}

def @func_10119() -> Tensor[(2464), float64] {
  %811 = @func_4518() /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16]) */;
  %811.2
}

def @func_4361(%var_4359: Tensor[(2464), float64]) -> (Tensor[(2464), int16], Tensor[(2464), uint64]) {
  @func_4358(%var_4359) /* ty=(Tensor[(2464), int16], Tensor[(2464), uint64]) */
}

def @func_7968() -> Tensor[(3, 12), float32] {
  %813 = fn () -> Tensor[(3, 12), float32] {
    %812 = @func_2003() /* ty=(Tensor[(3, 12), float32],) */;
    %812.0
  };
  %813() /* ty=Tensor[(3, 12), float32] */
}

def @func_4879(%var_4866: Tensor[(4, 260), float32]) -> (float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(4, 260), float32]) {
  %814 = @func_2709() /* ty=(Tensor[(2464), float64], float32) */;
  %815 = @func_2662() /* ty=(Tensor[(2464), float64],) */;
  %816 = cast(%var_4866, dtype="float32") /* ty=Tensor[(4, 260), float32] */;
  %817 = cast(%var_4866, dtype="float32") /* ty=Tensor[(4, 260), float32] */;
  %818 = reshape(%816, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %819 = reshape(%817, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
  %820 = @func_61(%818, %819) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
  %821 = %814.1;
  %822 = %815.0;
  %823 = %820.1;
  (%821, %822, %823, %var_4866)
}

def @func_7442() -> (float32,) {
  %824 = @func_5422() /* ty=(float32,) */;
  %825 = %824.0;
  (%825,)
}

def @func_5997(%var_5996: Tensor[(126), float32]) -> (Tensor[(11, 12, 16), float64], Tensor[(2464), float64], Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(11, 12, 16), float32]) {
  %837 = fn (%var_5956: Tensor[(126), float32]) -> (Tensor[(11, 12, 16), float64], Tensor[(2464), float64], Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(11, 12, 16), float32]) {
    %826 = @func_4101() /* ty=(Tensor[(2464), float64],) */;
    %827 = cast(%var_5956, dtype="float32") /* ty=Tensor[(126), float32] */;
    %828 = reshape(%827, newshape=[63, 2]) /* ty=Tensor[(63, 2), float32] */;
    %829 = @func_3063(%828) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(300), float64], Tensor[(6, 7, 3), float32], Tensor[(63, 2), float32], Tensor[(14), uint16], Tensor[(42, 4), uint16], Tensor[(36), float32], Tensor[(3, 12), float32], Tensor[(11, 12, 16), float64]) */;
    %830 = @func_3786() /* ty=(Tensor[(11, 12, 16), float64],) */;
    %831 = %830.0;
    %832 = cast(%831, dtype="float32") /* ty=Tensor[(11, 12, 16), float32] */;
    %833 = @func_1534() /* ty=Tensor[(11, 12, 16), float64] */;
    %834 = %826.0;
    %835 = %829.3;
    %836 = cos(%832) /* ty=Tensor[(11, 12, 16), float32] */;
    (%833, %834, %835, %var_5956, %836)
  };
  %837(%var_5996) /* ty=(Tensor[(11, 12, 16), float64], Tensor[(2464), float64], Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(11, 12, 16), float32]) */
}

def @func_4548() -> Tensor[(2464), float64] {
  @func_4546() /* ty=Tensor[(2464), float64] */
}

def @func_9705(%var_9703: Tensor[(13, 5, 13), uint64], %var_9704: Tensor[(13, 5, 13), uint64]) -> (Tensor[(13, 5, 13), uint64], Tensor[(2464), float64], Tensor[(13, 5, 13), bool]) {
  %850 = fn (%var_9687: Tensor[(13, 5, 13), uint64], %var_9697: Tensor[(13, 5, 13), uint64]) -> (Tensor[(13, 5, 13), uint64], Tensor[(2464), float64], Tensor[(13, 5, 13), bool]) {
    %838 = cast(%var_9687, dtype="uint64") /* ty=Tensor[(13, 5, 13), uint64] */;
    %839 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(13, 5, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %840 = cast(meta[relay.Constant][50] /* ty=Tensor[(13, 5, 13), uint64] */, dtype="uint64") /* ty=Tensor[(13, 5, 13), uint64] */;
    %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %842 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
    %843 = cast(%var_9697, dtype="bool") /* ty=Tensor[(13, 5, 13), bool] */;
    %844 = shape_of(%var_9687, dtype="int32") /* ty=Tensor[(3), int32] */;
    %845 = cast(%var_9687, dtype="bool") /* ty=Tensor[(13, 5, 13), bool] */;
    %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %847 = left_shift(%840, %841) /* ty=Tensor[(13, 5, 13), uint64] */;
    %848 = %842.0;
    %849 = logical_or(%845, %846) /* ty=Tensor[(13, 5, 13), bool] */;
    (%847, %848, %849)
  };
  %850(%var_9703, %var_9704) /* ty=(Tensor[(13, 5, 13), uint64], Tensor[(2464), float64], Tensor[(13, 5, 13), bool]) */
}

def @func_11743() -> (Tensor[(11, 12, 16), float64], Tensor[(882), uint32], Tensor[(448, 1), float32], Tensor[(5, 42), float32], Tensor[(2464), float64]) {
  %860 = fn () -> (Tensor[(11, 12, 16), float64], Tensor[(882), uint32], Tensor[(448, 1), float32], Tensor[(5, 42), float32], Tensor[(2464), float64]) {
    %851 = cast(meta[relay.Constant][51] /* ty=Tensor[(448, 1), float32] */, dtype="float32") /* ty=Tensor[(448, 1), float32] */;
    %852 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 42), float32] */, dtype="float32") /* ty=Tensor[(5, 42), float32] */;
    %853 = reshape(%851, newshape=[448]) /* ty=Tensor[(448), float32] */;
    %854 = reshape(%852, newshape=[210]) /* ty=Tensor[(210), float32] */;
    %855 = @func_9144(%853, %854) /* ty=(Tensor[(300, 1), float64], Tensor[(2464), float64], Tensor[(126), float32], Tensor[(882), uint32], Tensor[(126), float32], Tensor[(7, 4, 16), float32], Tensor[(448), float32], Tensor[(300), float64], Tensor[(210), float32]) */;
    %856 = @func_4725() /* ty=(Tensor[(2464), float64],) */;
    %857 = @func_6750() /* ty=Tensor[(11, 12, 16), float64] */;
    %858 = %855.3;
    %859 = %856.0;
    (%857, %858, meta[relay.Constant][51] /* ty=Tensor[(448, 1), float32] */, meta[relay.Constant][52] /* ty=Tensor[(5, 42), float32] */, %859)
  };
  %860() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(882), uint32], Tensor[(448, 1), float32], Tensor[(5, 42), float32], Tensor[(2464), float64]) */
}

def @func_2513() -> (Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) {
  %861 = @func_2080() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
  %862 = %861.2;
  %863 = cast(%862, dtype="float64") /* ty=Tensor[(300, 1), float64] */;
  %864 = reshape(%863, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %865 = @func_1855(%864) /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) */;
  %866 = %865.1;
  (%862, %866)
}

def @func_4102() -> (Tensor[(2464), float64],) {
  %868 = fn () -> (Tensor[(2464), float64],) {
    %867 = @func_2892() /* ty=Tensor[(2464), float64] */;
    (%867,)
  };
  %868() /* ty=(Tensor[(2464), float64],) */
}

def @func_8873() -> Tensor[(300, 1), float64] {
  %869 = @func_3149() /* ty=(Tensor[(300, 1), float64],) */;
  %869.0
}

def @func_11050(%var_11048: Tensor[(5, 5, 9), float64], %var_11049: Tensor[(126), float32]) -> (Tensor[(5, 5, 9), float64], Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(16, 12, 7), float32], Tensor[(2464), float64], Tensor[(210), float32]) {
  @func_11046(%var_11048, %var_11049) /* ty=(Tensor[(5, 5, 9), float64], Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(16, 12, 7), float32], Tensor[(2464), float64], Tensor[(210), float32]) */
}

def @func_4205() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  %870 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
  %871 = @func_4101() /* ty=(Tensor[(2464), float64],) */;
  %872 = %870.0;
  %873 = %871.0;
  (%872, %873)
}

def @func_1534() -> Tensor[(11, 12, 16), float64] {
  %874 = @func_1184() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */;
  %874.0
}

def @func_6227() -> Tensor[(2464), float64] {
  %875 = @func_5568() /* ty=(Tensor[(2464), float64],) */;
  %875.0
}

def @func_9949() -> (Tensor[(2464), float64], Tensor[(300, 16), int8], Tensor[(300, 1), float64]) {
  %876 = @func_4600() /* ty=(Tensor[(2464), float64],) */;
  %877 = @func_4386() /* ty=(float32, Tensor[(300, 16), int8], Tensor[(4800), float64]) */;
  %878 = @func_8915() /* ty=(Tensor[(300, 1), float64],) */;
  %879 = %876.0;
  %880 = %877.1;
  %881 = %878.0;
  (%879, %880, %881)
}

def @func_5346() -> (Tensor[(2464), float64],) {
  @func_5344() /* ty=(Tensor[(2464), float64],) */
}

def @func_10335() -> (Tensor[(2464), float64],) {
  %882 = @func_5513() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %883 = %882.0;
  (%883,)
}

def @func_4727() -> (Tensor[(2464), float64],) {
  @func_4725() /* ty=(Tensor[(2464), float64],) */
}

def @func_10388() -> (float32,) {
  @func_10386() /* ty=(float32,) */
}

def @func_2564() -> (float32, Tensor[(2464), float64]) {
  %884 = @func_2385() /* ty=(Tensor[(2464), float64],) */;
  %885 = @func_2280() /* ty=float32 */;
  %886 = %884.0;
  (%885, %886)
}

def @func_6751() -> Tensor[(11, 12, 16), float64] {
  %887 = fn () -> Tensor[(11, 12, 16), float64] {
    @func_6692() /* ty=Tensor[(11, 12, 16), float64] */
  };
  %887() /* ty=Tensor[(11, 12, 16), float64] */
}

def @func_10732() -> (Tensor[(5, 6, 10), float64], Tensor[(2464), float64]) {
  %888 = @func_7233() /* ty=(Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(2464), bool]) */;
  %889 = @func_2174() /* ty=(Tensor[(2464), float64],) */;
  %890 = %888.0;
  %891 = %889.0;
  (%890, %891)
}

def @func_11165(%var_11163: Tensor[(882), uint32]) -> (Tensor[(2464), float64], Tensor[(2464), float32], Tensor[(882), uint32], Tensor[(126), float32]) {
  @func_11162(%var_11163) /* ty=(Tensor[(2464), float64], Tensor[(2464), float32], Tensor[(882), uint32], Tensor[(126), float32]) */
}

def @func_4725() -> (Tensor[(2464), float64],) {
  %892 = @func_4101() /* ty=(Tensor[(2464), float64],) */;
  %893 = %892.0;
  (%893,)
}

def @func_9080(%var_9077: Tensor[(11, 6, 10), float32]) -> Tensor[(11, 6, 10), float32] {
  %894 = cast(%var_9077, dtype="float32") /* ty=Tensor[(11, 6, 10), float32] */;
  exp(%894) /* ty=Tensor[(11, 6, 10), float32] */
}

def @func_1145(%var_1140: Tensor[(1, 7, 2), uint16], %var_1141: Tensor[(12, 7, 2), uint16], %var_1142: Tensor[(150, 2), float64], %var_1143: Tensor[(210), float32], %var_1144: Tensor[(36), float32]) -> (Tensor[(12, 7, 2), uint16], Tensor[(11, 14, 16), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(150, 2), float64], Tensor[(5, 6, 10), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32], Tensor[(36), float32]) {
  %914 = fn (%var_1106: Tensor[(1, 7, 2), uint16], %var_1107: Tensor[(12, 7, 2), uint16], %var_1122: Tensor[(150, 2), float64], %var_1131: Tensor[(210), float32], %var_1132: Tensor[(36), float32]) -> (Tensor[(12, 7, 2), uint16], Tensor[(11, 14, 16), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(150, 2), float64], Tensor[(5, 6, 10), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32], Tensor[(36), float32]) {
    %895 = cast(%var_1106, dtype="uint16") /* ty=Tensor[(1, 7, 2), uint16] */;
    %896 = cast(%var_1107, dtype="uint16") /* ty=Tensor[(12, 7, 2), uint16] */;
    %897 = cast(meta[relay.Constant][53] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
    %898 = reshape(%897, newshape=[11, 14, 16]) /* ty=Tensor[(11, 14, 16), float64] */;
    %899 = @func_964(%898) /* ty=(Tensor[(11, 14, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(36), float32], Tensor[(21, 6), float32], float32) */;
    %900 = cast(%var_1122, dtype="float64") /* ty=Tensor[(150, 2), float64] */;
    %901 = reshape(%900, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float64] */;
    %902 = @func_1097(%901) /* ty=Tensor[(5, 6, 10), float64] */;
    %903 = cast(%902, dtype="float64") /* ty=Tensor[(5, 6, 10), float64] */;
    %904 = reshape(%903, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float64] */;
    %905 = cast(%var_1131, dtype="float32") /* ty=Tensor[(210), float32] */;
    %906 = cast(%var_1132, dtype="float32") /* ty=Tensor[(36), float32] */;
    %907 = reshape(%905, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float32] */;
    %908 = reshape(%906, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %909 = @func_521(%907, %908) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
    %910 = logical_xor(%895, %896) /* ty=Tensor[(12, 7, 2), uint16] */;
    %911 = %899.0;
    %912 = @func_1097(%904) /* ty=Tensor[(5, 6, 10), float64] */;
    %913 = %909.9;
    (%910, %911, meta[relay.Constant][53] /* ty=Tensor[(2464), float64] */, %902, %var_1122, %912, %913, %var_1131, %var_1132)
  };
  %914(%var_1140, %var_1141, %var_1142, %var_1143, %var_1144) /* ty=(Tensor[(12, 7, 2), uint16], Tensor[(11, 14, 16), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(150, 2), float64], Tensor[(5, 6, 10), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32], Tensor[(36), float32]) */
}

def @func_1855(%var_1843: Tensor[(300), float64]) -> (Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) {
  %915 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
  %916 = cast(%var_1843, dtype="float64") /* ty=Tensor[(300), float64] */;
  %917 = reshape(%916, newshape=[5, 6, 10]) /* ty=Tensor[(5, 6, 10), float64] */;
  %918 = %915.0;
  %919 = @func_1097(%917) /* ty=Tensor[(5, 6, 10), float64] */;
  (%918, %919, %var_1843)
}

def @func_1372() -> (Tensor[(2464), float64],) {
  %922 = fn () -> (Tensor[(2464), float64],) {
    %920 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
    %921 = %920.2;
    (%921,)
  };
  %922() /* ty=(Tensor[(2464), float64],) */
}

def @func_9201() -> Tensor[(2464), float64] {
  %923 = @func_4600() /* ty=(Tensor[(2464), float64],) */;
  %923.0
}

def @func_11617() -> (Tensor[(11, 12, 16), float64], float32, Tensor[(5, 6, 10), float64]) {
  %929 = fn () -> (Tensor[(11, 12, 16), float64], float32, Tensor[(5, 6, 10), float64]) {
    %924 = @func_3786() /* ty=(Tensor[(11, 12, 16), float64],) */;
    %925 = @func_7442() /* ty=(float32,) */;
    %926 = %924.0;
    %927 = %925.0;
    %928 = @func_7450() /* ty=Tensor[(5, 6, 10), float64] */;
    (%926, %927, %928)
  };
  %929() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(5, 6, 10), float64]) */
}

def @func_9309() -> (Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), float64], Tensor[(5, 6, 10), float64], Tensor[(11, 12, 16), float64]) {
  %940 = fn () -> (Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), float64], Tensor[(5, 6, 10), float64], Tensor[(11, 12, 16), float64]) {
    %930 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 16, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
    %931 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(2, 16, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %932 = cast(meta[relay.Constant][54] /* ty=Tensor[(2, 16, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
    %933 = dyn.reshape(%930, %931, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %934 = cast(meta[relay.Constant][54] /* ty=Tensor[(2, 16, 8), float32] */, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
    %935 = @func_1959() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(11, 12, 16), float64], Tensor[(?, 15, 14), bool], Tensor[(210), float32], Tensor[(9, 4), float32]) */;
    %936 = power(%932, %933) /* ty=Tensor[(2, 16, 8), float32] */;
    %937 = acos(%934) /* ty=Tensor[(2, 16, 8), float64] */;
    %938 = @func_7450() /* ty=Tensor[(5, 6, 10), float64] */;
    %939 = %935.1;
    (%936, %937, %938, %939)
  };
  %940() /* ty=(Tensor[(2, 16, 8), float32], Tensor[(2, 16, 8), float64], Tensor[(5, 6, 10), float64], Tensor[(11, 12, 16), float64]) */
}

def @func_9240() -> (Tensor[(2464), float64], Tensor[(2464), uint64], Tensor[(2464), float64]) {
  @func_9238() /* ty=(Tensor[(2464), float64], Tensor[(2464), uint64], Tensor[(2464), float64]) */
}

def @func_11304() -> (Tensor[(2464), float64],) {
  @func_11302() /* ty=(Tensor[(2464), float64],) */
}

def @func_11220() -> (Tensor[(2464), float64],) {
  %942 = fn () -> (Tensor[(2464), float64],) {
    %941 = @func_3728() /* ty=Tensor[(2464), float64] */;
    (%941,)
  };
  %942() /* ty=(Tensor[(2464), float64],) */
}

def @func_2280() -> float32 {
  %943 = @func_1184() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */;
  %943.2
}

def @func_4944() -> (Tensor[(2464), float64],) {
  %946 = fn () -> (Tensor[(2464), float64],) {
    %944 = @func_4725() /* ty=(Tensor[(2464), float64],) */;
    %945 = %944.0;
    (%945,)
  };
  %946() /* ty=(Tensor[(2464), float64],) */
}

def @func_8875() -> Tensor[(300, 1), float64] {
  @func_8873() /* ty=Tensor[(300, 1), float64] */
}

def @func_2282() -> float32 {
  @func_2280() /* ty=float32 */
}

def @func_4697(%var_4696: Tensor[(8, 10, 13), float64]) -> (Tensor[(300, 1), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), uint16]) {
  %959 = fn (%var_4681: Tensor[(8, 10, 13), float64]) -> (Tensor[(300, 1), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), uint16]) {
    %947 = cast(meta[relay.Constant][56] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %948 = cast(meta[relay.Constant][56] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %949 = reshape(%947, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
    %950 = reshape(%948, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
    %951 = @func_61(%949, %950) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
    %952 = %951.1;
    %953 = cast(%var_4681, dtype="uint16") /* ty=Tensor[(8, 10, 13), uint16] */;
    %954 = shape_of(%952, dtype="int32") /* ty=Tensor[(3), int32] */;
    %955 = cast(%952, dtype="uint16") /* ty=Tensor[(8, 10, 13), uint16] */;
    %956 = dyn.reshape(%953, %954, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %957 = @func_4631() /* ty=Tensor[(300, 1), float64] */;
    %958 = logical_xor(%955, %956) /* ty=Tensor[(8, 10, 13), uint16] */;
    (%957, meta[relay.Constant][56] /* ty=Tensor[(1040), float32] */, %958)
  };
  %959(%var_4696) /* ty=(Tensor[(300, 1), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), uint16]) */
}

def @func_11302() -> (Tensor[(2464), float64],) {
  %960 = @func_5153() /* ty=(Tensor[(2464), float64],) */;
  %961 = %960.0;
  (%961,)
}

def @func_8239() -> (Tensor[(5, 6, 10), float64], Tensor[(2464), float64]) {
  %962 = @func_8063() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300), float64], Tensor[(11, 12, 16), float64]) */;
  %963 = @func_7450() /* ty=Tensor[(5, 6, 10), float64] */;
  %964 = %962.0;
  (%963, %964)
}

def @func_9071() -> (Tensor[(8, 10, 13), float64], float32) {
  @func_9069() /* ty=(Tensor[(8, 10, 13), float64], float32) */
}

def @func_2175() -> (Tensor[(2464), float64],) {
  %967 = fn () -> (Tensor[(2464), float64],) {
    %965 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
    %966 = %965.0;
    (%966,)
  };
  %967() /* ty=(Tensor[(2464), float64],) */
}

def @func_5424() -> (float32,) {
  @func_5422() /* ty=(float32,) */
}

def @func_6108(%var_6061: Tensor[(2464), float32], %var_6086: Tensor[(210), float32]) -> (Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(210), float32]) {
  %968 = @func_6014() /* ty=(Tensor[(2464), float64],) */;
  %969 = %968.0;
  %970 = cast(meta[relay.Constant][57] /* ty=Tensor[(2464), float64] */, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %971 = shape_of(%969, dtype="int32") /* ty=Tensor[(1), int32] */;
  %972 = cast(%969, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %973 = dyn.reshape(%970, %971, newshape=[]) /* ty=Tensor[(?), float64] */;
  %974 = multiply(%972, %973) /* ty=Tensor[(2464), float64] */;
  %975 = cast(%974, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %976 = acosh(%975) /* ty=Tensor[(2464), float32] */;
  %977 = cast(%var_6061, dtype="bool") /* ty=Tensor[(2464), bool] */;
  %978 = shape_of(%976, dtype="int32") /* ty=Tensor[(1), int32] */;
  %979 = cast(%976, dtype="bool") /* ty=Tensor[(2464), bool] */;
  %980 = dyn.reshape(%977, %978, newshape=[]) /* ty=Tensor[(?), bool] */;
  %981 = cast(%var_6086, dtype="float32") /* ty=Tensor[(210), float32] */;
  %982 = reshape(%981, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %983 = @func_4556(%982) /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) */;
  %984 = less(%979, %980) /* ty=Tensor[(2464), bool] */;
  %985 = %983.1;
  (%984, %985, %var_6086)
}

def @func_7451() -> Tensor[(5, 6, 10), float64] {
  %987 = fn () -> Tensor[(5, 6, 10), float64] {
    %986 = @func_7344() /* ty=(Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(1408), float32], Tensor[(5, 6, 10), float64]) */;
    %986.3
  };
  %987() /* ty=Tensor[(5, 6, 10), float64] */
}

def @func_1185() -> (Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) {
  %998 = fn () -> (Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) {
    %988 = cast(meta[relay.Constant][58] /* ty=Tensor[(11, 12, 16), float32] */, dtype="float32") /* ty=Tensor[(11, 12, 16), float32] */;
    %989 = asin(%988) /* ty=Tensor[(11, 12, 16), float32] */;
    %990 = cast(%989, dtype="float64") /* ty=Tensor[(11, 12, 16), float64] */;
    %991 = cast(-1.1386f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %992 = cast(meta[relay.Constant][59] /* ty=Tensor[(3, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
    %993 = reshape(%991, newshape=[]) /* ty=float32 */;
    %994 = reshape(%992, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
    %995 = @func_257(%993, %994) /* ty=(Tensor[(1, 6, 6), bool], Tensor[(6, 7, 3), float32], Tensor[(21, 6), float32]) */;
    %996 = log(%990) /* ty=Tensor[(11, 12, 16), float64] */;
    %997 = %995.1;
    (%996, %997, -1.1386f /* ty=float32 */, meta[relay.Constant][59] /* ty=Tensor[(3, 12), float32] */)
  };
  %998() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */
}

def @func_6737() -> Tensor[(300), float64] {
  %999 = fn () -> Tensor[(300), float64] {
    @func_5645() /* ty=Tensor[(300), float64] */
  };
  %999() /* ty=Tensor[(300), float64] */
}

def @func_11555() -> (Tensor[(5, 6, 10), float64],) {
  %1000 = @func_4518() /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16]) */;
  %1001 = %1000.1;
  (%1001,)
}

def @func_8562(%var_8519: Tensor[(432), float32]) -> (float32, Tensor[(432), float32], Tensor[(8, 6, 9), float32], Tensor[(2464), float64]) {
  %1002 = @func_6864() /* ty=(float32,) */;
  %1003 = cast(%var_8519, dtype="float32") /* ty=Tensor[(432), float32] */;
  %1004 = reshape(%1003, newshape=[8, 6, 9]) /* ty=Tensor[(8, 6, 9), float32] */;
  %1005 = @func_4999(%1004) /* ty=Tensor[(8, 6, 9), float32] */;
  %1006 = cast(%1005, dtype="float32") /* ty=Tensor[(8, 6, 9), float32] */;
  %1007 = @func_5131() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %1008 = %1002.0;
  %1009 = atan(%1006) /* ty=Tensor[(8, 6, 9), float32] */;
  %1010 = %1007.1;
  (%1008, %var_8519, %1009, %1010)
}

def @func_9897() -> (Tensor[(2464), float64], Tensor[(2464), float64]) {
  @func_9895() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */
}

def @func_4559(%var_4557: Tensor[(210), float32]) -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) {
  @func_4556(%var_4557) /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) */
}

def @func_6663(%var_6605: Tensor[(300), float64]) -> (Tensor[(2464), float64], Tensor[(3, 12), float32], Tensor[(36), float32], Tensor[(126), float32], Tensor[(14, 1), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(2464), float64], Tensor[(2464), float64]) {
  %1011 = @func_5513() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %1012 = @func_3876() /* ty=(Tensor[(2464), float64], Tensor[(3, 12), float32]) */;
  %1013 = cast(meta[relay.Constant][60] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
  %1014 = cast(meta[relay.Constant][61] /* ty=Tensor[(14, 1), uint16] */, dtype="uint16") /* ty=Tensor[(14, 1), uint16] */;
  %1015 = cast(meta[relay.Constant][62] /* ty=Tensor[(168), uint16] */, dtype="uint16") /* ty=Tensor[(168), uint16] */;
  %1016 = cast(%var_6605, dtype="float64") /* ty=Tensor[(300), float64] */;
  %1017 = %1012.1;
  %1018 = cast(%1017, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %1019 = reshape(%1013, newshape=[1, 126]) /* ty=Tensor[(1, 126), float32] */;
  %1020 = reshape(%1014, newshape=[14]) /* ty=Tensor[(14), uint16] */;
  %1021 = reshape(%1015, newshape=[168]) /* ty=Tensor[(168), uint16] */;
  %1022 = reshape(%1016, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %1023 = reshape(%1018, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %1024 = @func_2237(%1019, %1020, %1021, %1022, %1023) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(1, 126), float32], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(210), float32], Tensor[(36), float32], Tensor[(?, 9, 3), uint64], Tensor[(8, 9, 3), float32]) */;
  %1025 = %1011.0;
  %1026 = %1024.7;
  %1027 = @func_4546() /* ty=Tensor[(2464), float64] */;
  %1028 = @func_5834() /* ty=Tensor[(2464), float64] */;
  (%1025, %1017, %1026, meta[relay.Constant][60] /* ty=Tensor[(126), float32] */, meta[relay.Constant][61] /* ty=Tensor[(14, 1), uint16] */, meta[relay.Constant][62] /* ty=Tensor[(168), uint16] */, %var_6605, %1027, %1028)
}

def @func_2711() -> (Tensor[(2464), float64], float32) {
  @func_2709() /* ty=(Tensor[(2464), float64], float32) */
}

def @func_9413(%var_9408: Tensor[(300), float64]) -> (Tensor[(300), bool],) {
  %1029 = @func_8063() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300), float64], Tensor[(11, 12, 16), float64]) */;
  %1030 = %1029.3;
  %1031 = cast(%var_9408, dtype="bool") /* ty=Tensor[(300), bool] */;
  %1032 = shape_of(%1030, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1033 = cast(%1030, dtype="bool") /* ty=Tensor[(300), bool] */;
  %1034 = dyn.reshape(%1031, %1032, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1035 = greater(%1033, %1034) /* ty=Tensor[(300), bool] */;
  (%1035,)
}

def @func_2622(%var_2621: Tensor[(11, 12, 16), float64]) -> (Tensor[(5, 6, 10), float64], Tensor[(5, 60), float64], Tensor[(11, 12, 16), int16]) {
  %1047 = fn (%var_2615: Tensor[(11, 12, 16), float64]) -> (Tensor[(5, 6, 10), float64], Tensor[(5, 60), float64], Tensor[(11, 12, 16), int16]) {
    %1036 = cast(meta[relay.Constant][63] /* ty=Tensor[(5, 60), float64] */, dtype="float64") /* ty=Tensor[(5, 60), float64] */;
    %1037 = reshape(%1036, newshape=[300]) /* ty=Tensor[(300), float64] */;
    %1038 = @func_1855(%1037) /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) */;
    %1039 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
    %1040 = %1039.0;
    %1041 = cast(%var_2615, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
    %1042 = shape_of(%1040, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1043 = cast(%1040, dtype="int16") /* ty=Tensor[(11, 12, 16), int16] */;
    %1044 = dyn.reshape(%1041, %1042, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %1045 = %1038.1;
    %1046 = subtract(%1043, %1044) /* ty=Tensor[(11, 12, 16), int16] */;
    (%1045, meta[relay.Constant][63] /* ty=Tensor[(5, 60), float64] */, %1046)
  };
  %1047(%var_2621) /* ty=(Tensor[(5, 6, 10), float64], Tensor[(5, 60), float64], Tensor[(11, 12, 16), int16]) */
}

def @func_7895() -> (Tensor[(2464), float64], Tensor[(300, 1), float64]) {
  @func_7893() /* ty=(Tensor[(2464), float64], Tensor[(300, 1), float64]) */
}

def @func_2893() -> Tensor[(2464), float64] {
  %1049 = fn () -> Tensor[(2464), float64] {
    %1048 = @func_2831() /* ty=(Tensor[(2464), float64],) */;
    %1048.0
  };
  %1049() /* ty=Tensor[(2464), float64] */
}

def @func_4076(%var_4075: Tensor[(1408), float32]) -> (Tensor[(11, 13, 4), float64], Tensor[(11, 13, 4), uint32], Tensor[(2464), float64], Tensor[(8, 11, 16), float64], Tensor[(1408), float32], Tensor[(2464), float64], Tensor[(2, 12, 7), bool], Tensor[(168), bool]) {
  %1073 = fn (%var_4052: Tensor[(1408), float32]) -> (Tensor[(11, 13, 4), float64], Tensor[(11, 13, 4), uint32], Tensor[(2464), float64], Tensor[(8, 11, 16), float64], Tensor[(1408), float32], Tensor[(2464), float64], Tensor[(2, 12, 7), bool], Tensor[(168), bool]) {
    %1050 = cast(meta[relay.Constant][64] /* ty=uint64 */, dtype="bool") /* ty=bool */;
    %1051 = cast(meta[relay.Constant][65] /* ty=Tensor[(11, 13, 4), uint64] */, dtype="bool") /* ty=Tensor[(11, 13, 4), bool] */;
    %1052 = greater(%1050, %1051) /* ty=Tensor[(11, 13, 4), bool] */;
    %1053 = cast(%1052, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
    %1054 = cosh(%1053) /* ty=Tensor[(11, 13, 4), float64] */;
    %1055 = cast(%1054, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
    %1056 = cast(meta[relay.Constant][66] /* ty=Tensor[(11, 13, 4), float64] */, dtype="uint32") /* ty=Tensor[(11, 13, 4), uint32] */;
    %1057 = shape_of(%1054, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1058 = cast(%1054, dtype="uint32") /* ty=Tensor[(11, 13, 4), uint32] */;
    %1059 = dyn.reshape(%1056, %1057, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1060 = @func_2662() /* ty=(Tensor[(2464), float64],) */;
    %1061 = cast(%var_4052, dtype="float32") /* ty=Tensor[(1408), float32] */;
    %1062 = reshape(%1061, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
    %1063 = @func_3423(%1062) /* ty=(Tensor[(8, 11, 16), float64],) */;
    %1064 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
    %1065 = cast(meta[relay.Constant][67] /* ty=Tensor[(168), bool] */, dtype="bool") /* ty=Tensor[(168), bool] */;
    %1066 = reshape(%1065, newshape=[2, 12, 7]) /* ty=Tensor[(2, 12, 7), bool] */;
    %1067 = asinh(%1055) /* ty=Tensor[(11, 13, 4), float64] */;
    %1068 = bitwise_xor(%1058, %1059) /* ty=Tensor[(11, 13, 4), uint32] */;
    %1069 = %1060.0;
    %1070 = %1063.0;
    %1071 = %1064.0;
    %1072 = @func_1047(%1066) /* ty=Tensor[(2, 12, 7), bool] */;
    (%1067, %1068, %1069, %1070, %var_4052, %1071, %1072, meta[relay.Constant][67] /* ty=Tensor[(168), bool] */)
  };
  %1073(%var_4075) /* ty=(Tensor[(11, 13, 4), float64], Tensor[(11, 13, 4), uint32], Tensor[(2464), float64], Tensor[(8, 11, 16), float64], Tensor[(1408), float32], Tensor[(2464), float64], Tensor[(2, 12, 7), bool], Tensor[(168), bool]) */
}

def @func_11346() -> float32 {
  %1075 = fn () -> float32 {
    %1074 = @func_8387() /* ty=(float32,) */;
    %1074.0
  };
  %1075() /* ty=float32 */
}

def @func_4520() -> (Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16]) {
  @func_4518() /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16]) */
}

def @func_5154() -> (Tensor[(2464), float64],) {
  %1078 = fn () -> (Tensor[(2464), float64],) {
    %1076 = @func_4205() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
    %1077 = %1076.1;
    (%1077,)
  };
  %1078() /* ty=(Tensor[(2464), float64],) */
}

def @func_5196(%var_5194: int8, %var_5195: Tensor[(16, 11, 1), int8]) -> Tensor[(16, 11, 1), int8] {
  %1081 = fn (%var_5174: int8, %var_5175: Tensor[(16, 11, 1), int8]) -> Tensor[(16, 11, 1), int8] {
    %1079 = cast(%var_5174, dtype="int8") /* ty=int8 */;
    %1080 = cast(%var_5175, dtype="int8") /* ty=Tensor[(16, 11, 1), int8] */;
    add(%1079, %1080) /* ty=Tensor[(16, 11, 1), int8] */
  };
  %1081(%var_5194, %var_5195) /* ty=Tensor[(16, 11, 1), int8] */
}

def @func_6140() -> (Tensor[(2464), float64],) {
  %1084 = fn () -> (Tensor[(2464), float64],) {
    %1082 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
    %1083 = %1082.0;
    (%1083,)
  };
  %1084() /* ty=(Tensor[(2464), float64],) */
}

def @func_9848() -> Tensor[(2464), float64] {
  %1086 = fn () -> Tensor[(2464), float64] {
    %1085 = @func_1371() /* ty=(Tensor[(2464), float64],) */;
    %1085.0
  };
  %1086() /* ty=Tensor[(2464), float64] */
}

def @func_147(%var_145: Tensor[(6, 7, 3), float32]) -> Tensor[(6, 7, 3), float32] {
  @func_144(%var_145) /* ty=Tensor[(6, 7, 3), float32] */
}

def @func_9353() -> Tensor[(2464), float64] {
  %1088 = fn () -> Tensor[(2464), float64] {
    %1087 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
    %1087.0
  };
  %1088() /* ty=Tensor[(2464), float64] */
}

def @func_6692() -> Tensor[(11, 12, 16), float64] {
  @func_5856() /* ty=Tensor[(11, 12, 16), float64] */
}

def @func_9770(%var_9764: Tensor[(1408), float32]) -> (Tensor[(2464), float32], Tensor[(8, 11, 16), float64], Tensor[(1408), float32]) {
  %1089 = @func_6139() /* ty=(Tensor[(2464), float64],) */;
  %1090 = %1089.0;
  %1091 = @func_7442() /* ty=(float32,) */;
  %1092 = %1091.0;
  %1093 = cast(%1090, dtype="float32") /* ty=Tensor[(2464), float32] */;
  %1094 = cast(%1092, dtype="float32") /* ty=float32 */;
  %1095 = cast(%var_9764, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %1096 = reshape(%1095, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
  %1097 = @func_3423(%1096) /* ty=(Tensor[(8, 11, 16), float64],) */;
  %1098 = divide(%1093, %1094) /* ty=Tensor[(2464), float32] */;
  %1099 = %1097.0;
  (%1098, %1099, %var_9764)
}

def @func_6694() -> Tensor[(11, 12, 16), float64] {
  @func_6692() /* ty=Tensor[(11, 12, 16), float64] */
}

def @func_8637() -> Tensor[(3, 12), float32] {
  %1100 = fn () -> Tensor[(3, 12), float32] {
    @func_7967() /* ty=Tensor[(3, 12), float32] */
  };
  %1100() /* ty=Tensor[(3, 12), float32] */
}

def @func_4633() -> Tensor[(300, 1), float64] {
  @func_4631() /* ty=Tensor[(300, 1), float64] */
}

def @func_7444() -> (float32,) {
  @func_7442() /* ty=(float32,) */
}

def @func_9238() -> (Tensor[(2464), float64], Tensor[(2464), uint64], Tensor[(2464), float64]) {
  %1101 = @func_7993() /* ty=(Tensor[(2464), uint64],) */;
  %1102 = @func_2662() /* ty=(Tensor[(2464), float64],) */;
  %1103 = @func_5051() /* ty=Tensor[(2464), float64] */;
  %1104 = %1101.0;
  %1105 = %1102.0;
  (%1103, %1104, %1105)
}

def @func_6440(%var_6357: Tensor[(210), float32], %var_6404: Tensor[(126), float32]) -> (Tensor[(2464), float64], Tensor[(1232, 2), float32], Tensor[(210), float32], Tensor[(300, ?), int16], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(300), float64]) {
  %1106 = cast(meta[relay.Constant][68] /* ty=Tensor[(1232, 2), float32] */, dtype="float32") /* ty=Tensor[(1232, 2), float32] */;
  %1107 = cast(%var_6357, dtype="float32") /* ty=Tensor[(210), float32] */;
  %1108 = reshape(%1106, newshape=[2464]) /* ty=Tensor[(2464), float32] */;
  %1109 = reshape(%1107, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %1110 = @func_6108(%1108, %1109) /* ty=(Tensor[(2464), bool], Tensor[(2464), float64], Tensor[(210), float32]) */;
  %1111 = @func_4631() /* ty=Tensor[(300, 1), float64] */;
  %1112 = cast(%1111, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %1113 = atan(%1112) /* ty=Tensor[(300, 1), float32] */;
  %1114 = cast(%1111, dtype="int16") /* ty=Tensor[(300, 1), int16] */;
  %1115 = shape_of(%1113, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1116 = cast(%1113, dtype="int16") /* ty=Tensor[(300, 1), int16] */;
  %1117 = dyn.reshape(%1114, %1115, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %1118 = @func_2385() /* ty=(Tensor[(2464), float64],) */;
  %1119 = cast(%var_6404, dtype="float32") /* ty=Tensor[(126), float32] */;
  %1120 = reshape(%1119, newshape=[63, 2]) /* ty=Tensor[(63, 2), float32] */;
  %1121 = @func_3063(%1120) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(300), float64], Tensor[(6, 7, 3), float32], Tensor[(63, 2), float32], Tensor[(14), uint16], Tensor[(42, 4), uint16], Tensor[(36), float32], Tensor[(3, 12), float32], Tensor[(11, 12, 16), float64]) */;
  %1122 = cast(%var_6404, dtype="float32") /* ty=Tensor[(126), float32] */;
  %1123 = %1110.1;
  %1124 = cast(%1123, dtype="float64") /* ty=Tensor[(2464), float64] */;
  %1125 = reshape(%1122, newshape=[126]) /* ty=Tensor[(126), float32] */;
  %1126 = reshape(%1124, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
  %1127 = @func_1324(%1125, %1126) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), int64], Tensor[(2464), float32]) */;
  %1128 = left_shift(%1116, %1117) /* ty=Tensor[(300, ?), int16] */;
  %1129 = %1118.0;
  %1130 = %1121.5;
  %1131 = %1127.2;
  %1132 = @func_5645() /* ty=Tensor[(300), float64] */;
  (%1123, meta[relay.Constant][68] /* ty=Tensor[(1232, 2), float32] */, %var_6357, %1128, %1129, %1130, %var_6404, %1131, %1132)
}

def @func_6547() -> Tensor[(11, 12, 16), float64] {
  %1134 = fn () -> Tensor[(11, 12, 16), float64] {
    %1133 = @func_2816() /* ty=(float32, Tensor[(11, 12, 16), float64]) */;
    %1133.1
  };
  %1134() /* ty=Tensor[(11, 12, 16), float64] */
}

def @func_4556(%var_4554: Tensor[(210), float32]) -> (Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) {
  %1135 = @func_2831() /* ty=(Tensor[(2464), float64],) */;
  %1136 = cast(%var_4554, dtype="float32") /* ty=Tensor[(210), float32] */;
  %1137 = reshape(%1136, newshape=[5, 42]) /* ty=Tensor[(5, 42), float32] */;
  %1138 = @func_2037(%1137) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(5, 42), float32], Tensor[(3, 12), float32], Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %1139 = %1135.0;
  %1140 = %1138.4;
  (%1139, %1140, %var_4554)
}

def @func_7297() -> (Tensor[(11, 12, 16), float64], Tensor[(8, 10, 13), float64]) {
  %1141 = @func_3320() /* ty=(float32, Tensor[(2464), float64], Tensor[(8, 10, 13), float64], Tensor[(210), float32]) */;
  %1142 = @func_5856() /* ty=Tensor[(11, 12, 16), float64] */;
  %1143 = %1141.2;
  (%1142, %1143)
}

def @func_10164() -> Tensor[(2464), float64] {
  @func_10162() /* ty=Tensor[(2464), float64] */
}

def @func_3876() -> (Tensor[(2464), float64], Tensor[(3, 12), float32]) {
  %1144 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
  %1145 = @func_1184() /* ty=(Tensor[(11, 12, 16), float64], Tensor[(6, 7, 3), float32], float32, Tensor[(3, 12), float32]) */;
  %1146 = %1144.1;
  %1147 = %1145.3;
  (%1146, %1147)
}

def @func_10282(%var_10280: Tensor[(50, 6), float64]) -> (Tensor[(2464), float64], Tensor[(50, 6), float64], Tensor[(300), float64], Tensor[(2464), float64]) {
  @func_10279(%var_10280) /* ty=(Tensor[(2464), float64], Tensor[(50, 6), float64], Tensor[(300), float64], Tensor[(2464), float64]) */
}

def @func_8794(%var_8787: Tensor[(126), float32], %var_8790: Tensor[(300), float64]) -> (Tensor[(2464), float64], Tensor[(300), float64], Tensor[(126), float32], Tensor[(14), uint16], Tensor[(6, 28), uint16], Tensor[(300), float64], Tensor[(3, 12), float32]) {
  %1148 = @func_5513() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
  %1149 = cast(%var_8787, dtype="float32") /* ty=Tensor[(126), float32] */;
  %1150 = cast(meta[relay.Constant][69] /* ty=Tensor[(14), uint16] */, dtype="uint16") /* ty=Tensor[(14), uint16] */;
  %1151 = cast(meta[relay.Constant][70] /* ty=Tensor[(6, 28), uint16] */, dtype="uint16") /* ty=Tensor[(6, 28), uint16] */;
  %1152 = cast(%var_8790, dtype="float64") /* ty=Tensor[(300), float64] */;
  %1153 = cast(meta[relay.Constant][71] /* ty=Tensor[(3, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %1154 = reshape(%1149, newshape=[1, 126]) /* ty=Tensor[(1, 126), float32] */;
  %1155 = reshape(%1150, newshape=[14]) /* ty=Tensor[(14), uint16] */;
  %1156 = reshape(%1151, newshape=[168]) /* ty=Tensor[(168), uint16] */;
  %1157 = reshape(%1152, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %1158 = reshape(%1153, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %1159 = @func_2237(%1154, %1155, %1156, %1157, %1158) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(1, 126), float32], Tensor[(2464), float64], Tensor[(14), uint16], Tensor[(168), uint16], Tensor[(300), float64], Tensor[(210), float32], Tensor[(36), float32], Tensor[(?, 9, 3), uint64], Tensor[(8, 9, 3), float32]) */;
  %1160 = %1148.0;
  %1161 = %1159.5;
  (%1160, %1161, %var_8787, meta[relay.Constant][69] /* ty=Tensor[(14), uint16] */, meta[relay.Constant][70] /* ty=Tensor[(6, 28), uint16] */, %var_8790, meta[relay.Constant][71] /* ty=Tensor[(3, 12), float32] */)
}

def @func_2985(%var_2984: Tensor[(5, 6, 10), float64]) -> Tensor[(5, 6, 10), bool] {
  %1168 = fn (%var_2972: Tensor[(5, 6, 10), float64]) -> Tensor[(5, 6, 10), bool] {
    %1162 = @func_2513() /* ty=(Tensor[(300, 1), float64], Tensor[(5, 6, 10), float64]) */;
    %1163 = %1162.1;
    %1164 = cast(%var_2972, dtype="bool") /* ty=Tensor[(5, 6, 10), bool] */;
    %1165 = shape_of(%1163, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1166 = cast(%1163, dtype="bool") /* ty=Tensor[(5, 6, 10), bool] */;
    %1167 = dyn.reshape(%1164, %1165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%1166, %1167) /* ty=Tensor[(5, 6, 10), bool] */
  };
  %1168(%var_2984) /* ty=Tensor[(5, 6, 10), bool] */
}

def @func_7025() -> (Tensor[(300), float64], Tensor[(2464), bool], Tensor[(2464), float64]) {
  %1174 = fn () -> (Tensor[(300), float64], Tensor[(2464), bool], Tensor[(2464), float64]) {
    %1169 = @func_3955() /* ty=(Tensor[(2464), bool],) */;
    %1170 = @func_2385() /* ty=(Tensor[(2464), float64],) */;
    %1171 = @func_6736() /* ty=Tensor[(300), float64] */;
    %1172 = %1169.0;
    %1173 = %1170.0;
    (%1171, %1172, %1173)
  };
  %1174() /* ty=(Tensor[(300), float64], Tensor[(2464), bool], Tensor[(2464), float64]) */
}

def @func_10386() -> (float32,) {
  %1175 = @func_1271() /* ty=(Tensor[(11, 12, 16), float64], float32, Tensor[(2464), float64]) */;
  %1176 = %1175.1;
  (%1176,)
}

def @func_7344() -> (Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(1408), float32], Tensor[(5, 6, 10), float64]) {
  %1177 = @func_4518() /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(2464), float64], Tensor[(7, 3, 6), uint16]) */;
  %1178 = cast(meta[relay.Constant][72] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %1179 = reshape(%1178, newshape=[1408]) /* ty=Tensor[(1408), float32] */;
  %1180 = @func_4074(%1179) /* ty=(Tensor[(11, 13, 4), float64], Tensor[(11, 13, 4), uint32], Tensor[(2464), float64], Tensor[(8, 11, 16), float64], Tensor[(1408), float32], Tensor[(2464), float64], Tensor[(2, 12, 7), bool], Tensor[(168), bool]) */;
  %1181 = %1177.1;
  %1182 = cast(%1181, dtype="float64") /* ty=Tensor[(5, 6, 10), float64] */;
  %1183 = reshape(%1182, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %1184 = @func_1855(%1183) /* ty=(Tensor[(2464), float64], Tensor[(5, 6, 10), float64], Tensor[(300), float64]) */;
  %1185 = %1180.5;
  %1186 = %1184.1;
  (%1181, %1185, meta[relay.Constant][72] /* ty=Tensor[(1408), float32] */, %1186)
}

def @func_3361(%var_3360: Tensor[(7, 15, 11), uint16]) -> (Tensor[(7, 15, 11), uint16],) {
  %1192 = fn (%var_3353: Tensor[(7, 15, 11), uint16]) -> (Tensor[(7, 15, 11), uint16],) {
    %1187 = cast(meta[relay.Constant][73] /* ty=Tensor[(7, 15, 11), uint16] */, dtype="uint16") /* ty=Tensor[(7, 15, 11), uint16] */;
    %1188 = shape_of(%var_3353, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1189 = cast(%var_3353, dtype="uint16") /* ty=Tensor[(7, 15, 11), uint16] */;
    %1190 = dyn.reshape(%1187, %1188, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1191 = multiply(%1189, %1190) /* ty=Tensor[(7, 15, 11), uint16] */;
    (%1191,)
  };
  %1192(%var_3360) /* ty=(Tensor[(7, 15, 11), uint16],) */
}

def @func_7486(%var_7484: Tensor[(16, 11, 7), float64]) -> (Tensor[(16, 11, 7), float64], Tensor[(16, 11, 7), float64]) {
  @func_7483(%var_7484) /* ty=(Tensor[(16, 11, 7), float64], Tensor[(16, 11, 7), float64]) */
}

def @func_7768(%var_7767: Tensor[(1155), uint16]) -> (Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(2464), bool], Tensor[(1155), uint16], Tensor[(126), float32], Tensor[(1155), uint16]) {
  %1206 = fn (%var_7763: Tensor[(1155), uint16]) -> (Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(2464), bool], Tensor[(1155), uint16], Tensor[(126), float32], Tensor[(1155), uint16]) {
    %1193 = @func_5344() /* ty=(Tensor[(2464), float64],) */;
    %1194 = %1193.0;
    %1195 = cast(%1194, dtype="float64") /* ty=Tensor[(2464), float64] */;
    %1196 = reshape(%1195, newshape=[2464]) /* ty=Tensor[(2464), float64] */;
    %1197 = @func_3863(%1196) /* ty=(Tensor[(2464), bool], Tensor[(5, 6, 10), float64]) */;
    %1198 = cast(meta[relay.Constant][74] /* ty=Tensor[(126), float32] */, dtype="float32") /* ty=Tensor[(126), float32] */;
    %1199 = cast(%var_7763, dtype="uint16") /* ty=Tensor[(1155), uint16] */;
    %1200 = reshape(%1198, newshape=[126]) /* ty=Tensor[(126), float32] */;
    %1201 = reshape(%1199, newshape=[1155]) /* ty=Tensor[(1155), uint16] */;
    %1202 = @func_6960(%1200, %1201) /* ty=(Tensor[(2464), float64], Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), float64], Tensor[(7, 15, 11), uint16], Tensor[(1155), uint16]) */;
    %1203 = @func_6546() /* ty=Tensor[(11, 12, 16), float64] */;
    %1204 = %1197.0;
    %1205 = %1202.5;
    (%1194, %1203, %1204, %1205, meta[relay.Constant][74] /* ty=Tensor[(126), float32] */, %var_7763)
  };
  %1206(%var_7767) /* ty=(Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(2464), bool], Tensor[(1155), uint16], Tensor[(126), float32], Tensor[(1155), uint16]) */
}

def @func_2566() -> (float32, Tensor[(2464), float64]) {
  @func_2564() /* ty=(float32, Tensor[(2464), float64]) */
}

def @func_7592(%var_7590: Tensor[(11, 12, 16), float64]) -> (Tensor[(11, 12, 16), bool], Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), float64]) {
  @func_7589(%var_7590) /* ty=(Tensor[(11, 12, 16), bool], Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(5, 6, 10), float64]) */
}

def @func_10084() -> (Tensor[(2464), float64],) {
  @func_10082() /* ty=(Tensor[(2464), float64],) */
}

def @func_11364() -> (Tensor[(300), float64], Tensor[(2464), float64]) {
  %1211 = fn () -> (Tensor[(300), float64], Tensor[(2464), float64]) {
    %1207 = @func_8063() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(11, 12, 16), float64], Tensor[(300), float64], Tensor[(300), float64], Tensor[(11, 12, 16), float64]) */;
    %1208 = @func_9432() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64], Tensor[(210), float32]) */;
    %1209 = %1207.3;
    %1210 = %1208.1;
    (%1209, %1210)
  };
  %1211() /* ty=(Tensor[(300), float64], Tensor[(2464), float64]) */
}

def @func_2386() -> (Tensor[(2464), float64],) {
  %1214 = fn () -> (Tensor[(2464), float64],) {
    %1212 = @func_1406() /* ty=(Tensor[(2464), float64],) */;
    %1213 = %1212.0;
    (%1213,)
  };
  %1214() /* ty=(Tensor[(2464), float64],) */
}

def @func_6963(%var_6961: Tensor[(126), float32], %var_6962: Tensor[(1155), uint16]) -> (Tensor[(2464), float64], Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), float64], Tensor[(7, 15, 11), uint16], Tensor[(1155), uint16]) {
  %1226 = fn (%var_6936: Tensor[(126), float32], %var_6951: Tensor[(1155), uint16]) -> (Tensor[(2464), float64], Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), float64], Tensor[(7, 15, 11), uint16], Tensor[(1155), uint16]) {
    %1215 = @func_2564() /* ty=(float32, Tensor[(2464), float64]) */;
    %1216 = cast(%var_6936, dtype="float32") /* ty=Tensor[(126), float32] */;
    %1217 = reshape(%1216, newshape=[6, 7, 3]) /* ty=Tensor[(6, 7, 3), float32] */;
    %1218 = @func_5513() /* ty=(Tensor[(2464), float64], Tensor[(2464), float64]) */;
    %1219 = cast(%var_6951, dtype="uint16") /* ty=Tensor[(1155), uint16] */;
    %1220 = reshape(%1219, newshape=[7, 15, 11]) /* ty=Tensor[(7, 15, 11), uint16] */;
    %1221 = @func_3359(%1220) /* ty=(Tensor[(7, 15, 11), uint16],) */;
    %1222 = %1215.1;
    %1223 = @func_144(%1217) /* ty=Tensor[(6, 7, 3), float32] */;
    %1224 = %1218.1;
    %1225 = %1221.0;
    (%1222, %1223, %var_6936, %1224, %1225, %var_6951)
  };
  %1226(%var_6961, %var_6962) /* ty=(Tensor[(2464), float64], Tensor[(6, 7, 3), float32], Tensor[(126), float32], Tensor[(2464), float64], Tensor[(7, 15, 11), uint16], Tensor[(1155), uint16]) */
}

def @func_9773(%var_9771: Tensor[(1408), float32]) -> (Tensor[(2464), float32], Tensor[(8, 11, 16), float64], Tensor[(1408), float32]) {
  @func_9770(%var_9771) /* ty=(Tensor[(2464), float32], Tensor[(8, 11, 16), float64], Tensor[(1408), float32]) */
}

def @func_6015() -> (Tensor[(2464), float64],) {
  %1229 = fn () -> (Tensor[(2464), float64],) {
    %1227 = @func_1473() /* ty=(Tensor[(2464), float64],) */;
    %1228 = %1227.0;
    (%1228,)
  };
  %1229() /* ty=(Tensor[(2464), float64],) */
}

def @func_524(%var_522: Tensor[(1, 15, 14), float32], %var_523: Tensor[(36), float32]) -> (Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) {
  %1280 = fn (%var_453: Tensor[(1, 15, 14), float32], %var_495: Tensor[(36), float32]) -> (Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) {
    %1230 = cast(meta[relay.Constant][75] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %1231 = cast(meta[relay.Constant][75] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %1232 = reshape(%1230, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
    %1233 = reshape(%1231, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
    %1234 = @func_61(%1232, %1233) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
    %1235 = cast(meta[relay.Constant][75] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %1236 = %1234.1;
    %1237 = cast(%1236, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
    %1238 = reshape(%1235, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
    %1239 = reshape(%1237, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
    %1240 = @func_61(%1238, %1239) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
    %1241 = cast(meta[relay.Constant][75] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %1242 = %1240.1;
    %1243 = cast(%1242, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
    %1244 = reshape(%1241, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
    %1245 = reshape(%1243, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
    %1246 = @func_61(%1244, %1245) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
    %1247 = cast(%var_453, dtype="float32") /* ty=Tensor[(1, 15, 14), float32] */;
    %1248 = atan(%1247) /* ty=Tensor[(1, 15, 14), float32] */;
    %1249 = cast(%1248, dtype="float32") /* ty=Tensor[(1, 15, 14), float32] */;
    %1250 = cosh(%1249) /* ty=Tensor[(1, 15, 14), float32] */;
    %1251 = cast(%var_453, dtype="bool") /* ty=Tensor[(1, 15, 14), bool] */;
    %1252 = shape_of(%1250, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1253 = cast(%1250, dtype="bool") /* ty=Tensor[(1, 15, 14), bool] */;
    %1254 = dyn.reshape(%1251, %1252, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1255 = not_equal(%1253, %1254) /* ty=Tensor[(?, 15, 14), bool] */;
    %1256 = cast(%1255, dtype="bool") /* ty=Tensor[(?, 15, 14), bool] */;
    %1257 = shape_of(%1250, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1258 = cast(%1250, dtype="bool") /* ty=Tensor[(1, 15, 14), bool] */;
    %1259 = dyn.reshape(%1256, %1257, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1260 = cast(4.46237f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %1261 = cast(%var_495, dtype="float32") /* ty=Tensor[(36), float32] */;
    %1262 = reshape(%1260, newshape=[]) /* ty=float32 */;
    %1263 = reshape(%1261, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
    %1264 = @func_257(%1262, %1263) /* ty=(Tensor[(1, 6, 6), bool], Tensor[(6, 7, 3), float32], Tensor[(21, 6), float32]) */;
    %1265 = cast(%1236, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
    %1266 = cast(%1236, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
    %1267 = reshape(%1265, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
    %1268 = reshape(%1266, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
    %1269 = @func_61(%1267, %1268) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
    %1270 = cast(%1242, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
    %1271 = %1246.1;
    %1272 = cast(%1271, dtype="float32") /* ty=Tensor[(8, 10, 13), float32] */;
    %1273 = reshape(%1270, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
    %1274 = reshape(%1272, newshape=[8, 10, 13]) /* ty=Tensor[(8, 10, 13), float32] */;
    %1275 = @func_61(%1273, %1274) /* ty=(Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */;
    %1276 = logical_or(%1258, %1259) /* ty=Tensor[(?, 15, 14), bool] */;
    %1277 = %1264.2;
    %1278 = %1269.0;
    %1279 = %1275.1;
    (%1236, meta[relay.Constant][75] /* ty=Tensor[(1040), float32] */, %1242, %1271, %1276, %1277, 4.46237f /* ty=float32 */, %var_495, %1278, %1279)
  };
  %1280(%var_522, %var_523) /* ty=(Tensor[(8, 10, 13), float64], Tensor[(1040), float32], Tensor[(8, 10, 13), float64], Tensor[(8, 10, 13), float64], Tensor[(?, 15, 14), bool], Tensor[(21, 6), float32], float32, Tensor[(36), float32], Tensor[(8, 10, 13), float32], Tensor[(8, 10, 13), float64]) */
}

def @func_8431() -> Tensor[(2464), float64] {
  %1281 = @func_6014() /* ty=(Tensor[(2464), float64],) */;
  %1281.0
}

def @func_3633(%var_3631: Tensor[(9, 14, 7), uint32], %var_3632: Tensor[(126), float32]) -> (Tensor[(9, 14, 7), uint32], Tensor[(2464), float32], Tensor[(126), float32], Tensor[(2464), float64]) {
  @func_3629(%var_3631, %var_3632) /* ty=(Tensor[(9, 14, 7), uint32], Tensor[(2464), float32], Tensor[(126), float32], Tensor[(2464), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen483/build/output.py", line 3912, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:22:36] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

