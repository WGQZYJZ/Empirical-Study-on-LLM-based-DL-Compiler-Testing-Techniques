==========mod==========
#[version = "0.0.5"]
def @func_3930(%var_3927: Tensor[(2, 1, 2), float32]) -> (Tensor[(2, 1, 2), float32],) {
  %0 = cast(%var_3927, dtype="float32") /* ty=Tensor[(2, 1, 2), float32] */;
  %1 = sin(%0) /* ty=Tensor[(2, 1, 2), float32] */;
  (%1,)
}

def @func_3315(%var_3310: int16, %var_3311: Tensor[(5, 7, 5), int16]) -> (Tensor[(5, 7, 5), int16],) {
  %2 = cast(%var_3310, dtype="int16") /* ty=int16 */;
  %3 = cast(%var_3311, dtype="int16") /* ty=Tensor[(5, 7, 5), int16] */;
  %4 = minimum(%2, %3) /* ty=Tensor[(5, 7, 5), int16] */;
  (%4,)
}

def @func_3568() -> (Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) {
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %6 = reshape(%5, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), float64] */;
  %7 = @func_1154(%6) /* ty=(Tensor[(12, 4, 15), float64], Tensor[(10, ?, ?), int64]) */;
  %8 = @func_2386() /* ty=Tensor[(10, ?, ?), int64] */;
  %9 = %7.1;
  (%8, %9, meta[relay.Constant][0] /* ty=Tensor[(720), float64] */)
}

def @func_1503(%var_1495: int16, %var_1496: Tensor[(6, 1, 14), int16]) -> (Tensor[(6, 1, 14), int16], Tensor[(6, 1, 14), int64]) {
  %10 = cast(%var_1495, dtype="int16") /* ty=int16 */;
  %11 = cast(%var_1496, dtype="int16") /* ty=Tensor[(6, 1, 14), int16] */;
  %12 = cast(%var_1495, dtype="int64") /* ty=int64 */;
  %13 = cast(%var_1496, dtype="int64") /* ty=Tensor[(6, 1, 14), int64] */;
  %14 = bitwise_and(%10, %11) /* ty=Tensor[(6, 1, 14), int16] */;
  %15 = maximum(%12, %13) /* ty=Tensor[(6, 1, 14), int64] */;
  (%14, %15)
}

def @func_1929() -> (Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) {
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %17 = reshape(%16, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), float64] */;
  %18 = @func_1154(%17) /* ty=(Tensor[(12, 4, 15), float64], Tensor[(10, ?, ?), int64]) */;
  %19 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
  %20 = %18.0;
  (%19, %20, meta[relay.Constant][1] /* ty=Tensor[(720), float64] */)
}

def @func_4380() -> (Tensor[(7, 3, 1), float64], Tensor[(720), float64]) {
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(7, 3, 1), float64] */;
  %22 = @func_3568() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) */;
  %23 = cos(%21) /* ty=Tensor[(7, 3, 1), float64] */;
  %24 = %22.2;
  (%23, %24)
}

def @func_4519(%var_4517: Tensor[(160), float64]) -> (Tensor[(7, 3, 1), float32], Tensor[(720), float64], Tensor[(160), float64]) {
  %25 = @func_4412() /* ty=Tensor[(7, 3, 1), float64] */;
  %26 = cast(%25, dtype="float32") /* ty=Tensor[(7, 3, 1), float32] */;
  %27 = cast(%var_4517, dtype="float64") /* ty=Tensor[(160), float64] */;
  %28 = reshape(%27, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %29 = @func_4119(%28) /* ty=(Tensor[(720), float64], Tensor[(2, 8, 10), float64], Tensor[(160), float64], Tensor[(2, 1, 2), float32], Tensor[(4), float32], Tensor[(2, 1, 2), float32]) */;
  %30 = exp(%26) /* ty=Tensor[(7, 3, 1), float32] */;
  %31 = %29.0;
  (%30, %31, %var_4517)
}

def @func_4597() -> Tensor[(10, ?, ?), int64] {
  %32 = @func_3568() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) */;
  %32.0
}

def @func_2245(%var_2231: Tensor[(80), float32]) -> (Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(80), float32], Tensor[(10, 1, 1), uint32], uint32) {
  %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(240), uint8] */, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %34 = cast(meta[relay.Constant][3] /* ty=Tensor[(240), uint8] */, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(240), uint8] */, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %36 = reshape(%33, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), uint8] */;
  %37 = reshape(%34, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), uint8] */;
  %38 = reshape(%35, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), uint8] */;
  %39 = @func_1228(%36, %37, %38) /* ty=(Tensor[(8, 2, 15), uint8], Tensor[(8, 2, 15), uint32], Tensor[(14, 10, 8), float32], Tensor[(10, 11, 3), int16]) */;
  %40 = @func_1397() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %41 = @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */;
  %42 = %41.2;
  %43 = @func_1884() /* ty=(uint32, Tensor[(10, ?, ?), int64]) */;
  %44 = %43.1;
  %45 = cast(%42, dtype="uint16") /* ty=Tensor[(720), uint16] */;
  %46 = cast(%44, dtype="uint16") /* ty=Tensor[(10, ?, ?), uint16] */;
  %47 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %48 = cast(%var_2231, dtype="float32") /* ty=Tensor[(80), float32] */;
  %49 = reshape(%48, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float32] */;
  %50 = @func_925(%49) /* ty=(Tensor[(10, 1, 1), uint32], uint32, Tensor[(10, ?, ?), int64], uint32, Tensor[(10, 8, 1), uint16]) */;
  %51 = cast(meta[relay.Constant][4] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %52 = %50.2;
  %53 = cast(%52, dtype="uint32") /* ty=Tensor[(10, ?, ?), uint32] */;
  %54 = reshape(%51, newshape=[]) /* ty=uint32 */;
  %55 = reshape(%53, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), uint32] */;
  %56 = %39.0;
  %57 = %40.0;
  %58 = maximum(%45, %46) /* ty=Tensor[(10, ?, 720), uint16] */;
  %59 = %47.0;
  %60 = @func_82(%54, %55) /* ty=Tensor[(10, 1, 1), uint32] */;
  (%56, meta[relay.Constant][3] /* ty=Tensor[(240), uint8] */, %57, %58, %59, %52, %var_2231, %60, meta[relay.Constant][4] /* ty=uint32 */)
}

def @func_6531() -> (Tensor[(14, 10, 8), bool], Tensor[(14, 10, 8), uint64]) {
  %61 = @func_6360() /* ty=(Tensor[(14, 10, 8), float64],) */;
  %62 = %61.0;
  %63 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 10, 8), float64] */, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %67 = less(%65, %66) /* ty=Tensor[(14, 10, 8), bool] */;
  %68 = @func_4159() /* ty=Tensor[(14, 10, 8), uint64] */;
  (%67, %68)
}

def @func_5620(%var_5611: uint32) -> (Tensor[(720), float64], Tensor[(720), float64], Tensor[(10, 1, 1), float32], uint32) {
  %69 = cast(%var_5611, dtype="uint32") /* ty=uint32 */;
  %70 = reshape(%69, newshape=[]) /* ty=uint32 */;
  %71 = @func_2949(%70) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, 1, 1), float32], Tensor[(10, 1, 1), uint32], uint32) */;
  %72 = @func_3037() /* ty=Tensor[(720), float64] */;
  %73 = @func_4854() /* ty=Tensor[(720), float64] */;
  %74 = %71.1;
  (%72, %73, %74, %var_5611)
}

def @func_1114(%var_1058: Tensor[(1430, 1), uint32], %var_1075: Tensor[(10, 11, 13), uint64]) -> (Tensor[(14, 10, 8), float64], Tensor[(1430, 1), uint32], Tensor[(10, 11, 13), uint64], Tensor[(10, 11, 13), float32], Tensor[(22), bool], Tensor[(22, 1), bool], Tensor[(10, ?, ?), int64], Tensor[(13, 3, 13), float32], Tensor[(507, 1), float32]) {
  %75 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %76 = %75.0;
  %77 = cast(%76, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
  %78 = cast(%var_1058, dtype="uint32") /* ty=Tensor[(1430, 1), uint32] */;
  %79 = reshape(%78, newshape=[10, 11, 13]) /* ty=Tensor[(10, 11, 13), uint32] */;
  %80 = @func_790(%79) /* ty=(Tensor[(10, 11, 13), uint64],) */;
  %81 = %80.0;
  %82 = cast(%81, dtype="uint32") /* ty=Tensor[(10, 11, 13), uint32] */;
  %83 = reshape(%82, newshape=[10, 11, 13]) /* ty=Tensor[(10, 11, 13), uint32] */;
  %84 = @func_790(%83) /* ty=(Tensor[(10, 11, 13), uint64],) */;
  %85 = cast(%var_1075, dtype="float32") /* ty=Tensor[(10, 11, 13), float32] */;
  %86 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%81, dtype="float32") /* ty=Tensor[(10, 11, 13), float32] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %89 = cast(meta[relay.Constant][6] /* ty=Tensor[(22, 1), bool] */, dtype="bool") /* ty=Tensor[(22, 1), bool] */;
  %90 = reshape(%89, newshape=[22]) /* ty=Tensor[(22), bool] */;
  %91 = @func_818(%90) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(2, 11, ?), bool], Tensor[(22), bool]) */;
  %92 = cast(meta[relay.Constant][7] /* ty=Tensor[(507, 1), float32] */, dtype="float32") /* ty=Tensor[(507, 1), float32] */;
  %93 = reshape(%92, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), float32] */;
  %94 = asinh(%77) /* ty=Tensor[(14, 10, 8), float64] */;
  %95 = %84.0;
  %96 = floor_mod(%87, %88) /* ty=Tensor[(10, 11, 13), float32] */;
  %97 = %91.2;
  %98 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
  %99 = @func_181(%93) /* ty=Tensor[(13, 3, 13), float32] */;
  (%94, %var_1058, %95, %96, %97, meta[relay.Constant][6] /* ty=Tensor[(22, 1), bool] */, %98, %99, meta[relay.Constant][7] /* ty=Tensor[(507, 1), float32] */)
}

def @func_5947(%var_5871: Tensor[(7, 1, 6), int32], %var_5945: Tensor[(5, 2), uint32]) -> (Tensor[(7, 1, 6), int32], Tensor[(7, 1, 6), float64], Tensor[(15, 1, 7), bool], Tensor[(84), bool], Tensor[(4, 40), float64], Tensor[(160), float64], Tensor[(7, ?, 6), int8], Tensor[(10, 1, 1), uint32], Tensor[(5, 2), uint32]) {
  %100 = cast(3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %101 = cast(%var_5871, dtype="int32") /* ty=Tensor[(7, 1, 6), int32] */;
  %102 = cast(%var_5871, dtype="float64") /* ty=Tensor[(7, 1, 6), float64] */;
  %103 = cast(3 /* ty=int32 */, dtype="float64") /* ty=float64 */;
  %104 = cast(meta[relay.Constant][8] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %105 = cast(meta[relay.Constant][8] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %106 = cast(meta[relay.Constant][8] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %107 = reshape(%104, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), bool] */;
  %108 = reshape(%105, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), bool] */;
  %109 = reshape(%106, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), bool] */;
  %110 = @func_4745(%107, %108, %109) /* ty=(Tensor[(3, 14, 2), uint16], Tensor[(15, 1, 7), bool]) */;
  %111 = cast(meta[relay.Constant][9] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
  %112 = reshape(%111, newshape=[4, 40]) /* ty=Tensor[(4, 40), float64] */;
  %113 = @func_3738(%112) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(4, 40), float64], Tensor[(14, 10, 8), bool], Tensor[(10, ?, ?), float64]) */;
  %114 = cast(%var_5871, dtype="float32") /* ty=Tensor[(7, 1, 6), float32] */;
  %115 = sqrt(%114) /* ty=Tensor[(7, 1, 6), float32] */;
  %116 = cast(%var_5871, dtype="int8") /* ty=Tensor[(7, 1, 6), int8] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="int8") /* ty=Tensor[(7, 1, 6), int8] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %120 = cast(3 /* ty=int32 */, dtype="uint32") /* ty=uint32 */;
  %121 = cast(%var_5945, dtype="uint32") /* ty=Tensor[(5, 2), uint32] */;
  %122 = reshape(%120, newshape=[]) /* ty=uint32 */;
  %123 = reshape(%121, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), uint32] */;
  %124 = left_shift(%100, %101) /* ty=Tensor[(7, 1, 6), int32] */;
  %125 = mod(%102, %103) /* ty=Tensor[(7, 1, 6), float64] */;
  %126 = %110.1;
  %127 = %113.1;
  %128 = bitwise_and(%118, %119) /* ty=Tensor[(7, ?, 6), int8] */;
  %129 = @func_82(%122, %123) /* ty=Tensor[(10, 1, 1), uint32] */;
  (%124, %125, %126, meta[relay.Constant][8] /* ty=Tensor[(84), bool] */, %127, meta[relay.Constant][9] /* ty=Tensor[(160), float64] */, %128, %129, %var_5945)
}

def @func_4348() -> (Tensor[(10, ?, ?), int64],) {
  %130 = @func_2965() /* ty=(Tensor[(10, ?, ?), int64],) */;
  %131 = %130.0;
  (%131,)
}

def @func_2361(%var_2340: Tensor[(15, 1, 7), uint32]) -> Tensor[(15, 1, 7), bool] {
  %132 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %133 = %132.0;
  %134 = cast(%133, dtype="bool") /* ty=bool */;
  %135 = cast(%var_2340, dtype="bool") /* ty=Tensor[(15, 1, 7), bool] */;
  equal(%134, %135) /* ty=Tensor[(15, 1, 7), bool] */
}

def @func_3620() -> Tensor[(14, 10, 8), uint64] {
  %136 = @func_1397() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %136.0
}

def @func_3548(%var_3539: Tensor[(15, 11, 13), float32]) -> (Tensor[(15, 11, 13), float32], Tensor[(14, 10, 8), uint64]) {
  %137 = cast(%var_3539, dtype="float32") /* ty=Tensor[(15, 11, 13), float32] */;
  %138 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %139 = sigmoid(%137) /* ty=Tensor[(15, 11, 13), float32] */;
  %140 = %138.0;
  (%139, %140)
}

def @func_963() -> (Tensor[(14, 10, 8), uint64],) {
  %141 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %142 = %141.0;
  (%142,)
}

def @func_277() -> (uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) {
  %143 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 10, 8), float32] */, dtype="float32") /* ty=Tensor[(14, 10, 8), float32] */;
  %144 = tan(%143) /* ty=Tensor[(14, 10, 8), float32] */;
  %145 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 10, 8), float32] */, dtype="uint64") /* ty=Tensor[(14, 10, 8), uint64] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="uint64") /* ty=Tensor[(14, 10, 8), uint64] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %149 = cast(meta[relay.Constant][10] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %150 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 2), uint32] */, dtype="uint32") /* ty=Tensor[(5, 2), uint32] */;
  %151 = reshape(%149, newshape=[]) /* ty=uint32 */;
  %152 = reshape(%150, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), uint32] */;
  %153 = @func_82(%151, %152) /* ty=Tensor[(10, 1, 1), uint32] */;
  %154 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 2), uint32] */, dtype="int64") /* ty=Tensor[(5, 2), int64] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%153, dtype="int64") /* ty=Tensor[(10, 1, 1), int64] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %158 = bitwise_xor(%147, %148) /* ty=Tensor[(14, 10, 8), uint64] */;
  %159 = subtract(%156, %157) /* ty=Tensor[(10, ?, ?), int64] */;
  (meta[relay.Constant][10] /* ty=uint32 */, %158, %159)
}

def @func_4933(%var_4925: Tensor[(6, 3, 9), float64], %var_4929: Tensor[(6, 3, 9), float64]) -> (Tensor[(6, 3, 9), float64], Tensor[(6, 3, 9), bool]) {
  %160 = cast(%var_4925, dtype="float64") /* ty=Tensor[(6, 3, 9), float64] */;
  %161 = cast(%var_4929, dtype="bool") /* ty=Tensor[(6, 3, 9), bool] */;
  %162 = shape_of(%var_4925, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%var_4925, dtype="bool") /* ty=Tensor[(6, 3, 9), bool] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %165 = sqrt(%160) /* ty=Tensor[(6, 3, 9), float64] */;
  %166 = logical_and(%163, %164) /* ty=Tensor[(6, 3, 9), bool] */;
  (%165, %166)
}

def @func_468(%var_431: Tensor[(10, 13, 3), int64], %var_445: Tensor[(10, 13, 3), bool]) -> (Tensor[(1, 10), uint32], Tensor[(10, 13, 3), bool]) {
  %167 = @func_375() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(1, 10), uint32]) */;
  %168 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %169 = %168.2;
  %170 = cast(%169, dtype="bool") /* ty=Tensor[(10, ?, ?), bool] */;
  %171 = cast(%var_431, dtype="bool") /* ty=Tensor[(10, 13, 3), bool] */;
  %172 = less_equal(%170, %171) /* ty=Tensor[(10, 13, 3), bool] */;
  %173 = cast(%var_445, dtype="bool") /* ty=Tensor[(10, 13, 3), bool] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="bool") /* ty=Tensor[(10, 13, 3), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %177 = %167.2;
  %178 = greater_equal(%175, %176) /* ty=Tensor[(10, 13, 3), bool] */;
  (%177, %178)
}

def @func_2487() -> Tensor[(10, 1, 1), uint32] {
  %179 = @func_1550() /* ty=(Tensor[(10, 1, 1), uint32],) */;
  %179.0
}

def @func_2949(%var_2947: uint32) -> (Tensor[(10, ?, ?), int64], Tensor[(10, 1, 1), float32], Tensor[(10, 1, 1), uint32], uint32) {
  %180 = @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */;
  %181 = @func_1712() /* ty=Tensor[(10, 1, 1), uint32] */;
  %182 = cast(%181, dtype="float32") /* ty=Tensor[(10, 1, 1), float32] */;
  %183 = cast(%var_2947, dtype="uint32") /* ty=uint32 */;
  %184 = cast(%181, dtype="uint32") /* ty=Tensor[(10, 1, 1), uint32] */;
  %185 = reshape(%183, newshape=[]) /* ty=uint32 */;
  %186 = reshape(%184, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), uint32] */;
  %187 = %180.0;
  %188 = tan(%182) /* ty=Tensor[(10, 1, 1), float32] */;
  %189 = @func_82(%185, %186) /* ty=Tensor[(10, 1, 1), uint32] */;
  (%187, %188, %189, %var_2947)
}

def @func_2130() -> (Tensor[(10, ?, ?), int64],) {
  %190 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %191 = %190.1;
  (%191,)
}

def @func_818(%var_806: Tensor[(22), bool]) -> (Tensor[(10, ?, ?), int64], Tensor[(2, 11, ?), bool], Tensor[(22), bool]) {
  %192 = cast(%var_806, dtype="bool") /* ty=Tensor[(22), bool] */;
  %193 = cast(%var_806, dtype="bool") /* ty=Tensor[(22), bool] */;
  %194 = reshape(%192, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), bool] */;
  %195 = reshape(%193, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), bool] */;
  %196 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
  %197 = @func_581(%194, %195) /* ty=Tensor[(2, 11, ?), bool] */;
  (%196, %197, %var_806)
}

def @func_2892(%var_2873: Tensor[(77, 10), uint64]) -> (Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), bool], Tensor[(14, 10, 8), uint64], Tensor[(77, 10), uint64], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), float32]) {
  %198 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 40), float32] */, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
  %199 = reshape(%198, newshape=[80]) /* ty=Tensor[(80), float32] */;
  %200 = @func_2245(%199) /* ty=(Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(80), float32], Tensor[(10, 1, 1), uint32], uint32) */;
  %201 = @func_1884() /* ty=(uint32, Tensor[(10, ?, ?), int64]) */;
  %202 = %201.1;
  %203 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 40), float32] */, dtype="int8") /* ty=Tensor[(2, 40), int8] */;
  %204 = cast(%202, dtype="int8") /* ty=Tensor[(10, ?, ?), int8] */;
  %205 = right_shift(%203, %204) /* ty=Tensor[(10, 2, 40), int8] */;
  %206 = cast(%202, dtype="bool") /* ty=Tensor[(10, ?, ?), bool] */;
  %207 = cast(%205, dtype="bool") /* ty=Tensor[(10, 2, 40), bool] */;
  %208 = cast(%var_2873, dtype="uint64") /* ty=Tensor[(77, 10), uint64] */;
  %209 = cast(%var_2873, dtype="uint64") /* ty=Tensor[(77, 10), uint64] */;
  %210 = reshape(%208, newshape=[14, 11, 5]) /* ty=Tensor[(14, 11, 5), uint64] */;
  %211 = reshape(%209, newshape=[14, 11, 5]) /* ty=Tensor[(14, 11, 5), uint64] */;
  %212 = @func_747(%210, %211) /* ty=(Tensor[(14, 11, 5), uint64], Tensor[(13, 3, 13), float32], Tensor[(13, 39), float32], Tensor[(14, 10, 8), uint64]) */;
  %213 = @func_2400() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %214 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 40), float32] */, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
  %215 = reshape(%214, newshape=[80]) /* ty=Tensor[(80), float32] */;
  %216 = @func_2245(%215) /* ty=(Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(80), float32], Tensor[(10, 1, 1), uint32], uint32) */;
  %217 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 40), float32] */, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
  %218 = cast(%205, dtype="float32") /* ty=Tensor[(10, 2, 40), float32] */;
  %219 = %200.3;
  %220 = greater_equal(%206, %207) /* ty=Tensor[(10, 2, 40), bool] */;
  %221 = %212.3;
  %222 = %213.0;
  %223 = %216.3;
  %224 = floor_mod(%217, %218) /* ty=Tensor[(10, 2, 40), float32] */;
  (%219, %220, %221, %var_2873, %222, %223, %224)
}

def @func_5153() -> (Tensor[(10, ?, ?), int64],) {
  %225 = @func_4610() /* ty=Tensor[(10, ?, ?), int64] */;
  (%225,)
}

def @func_3761() -> (Tensor[(10, ?, ?), float64],) {
  %226 = @func_2668() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(80, 1), float32], Tensor[(10, ?, ?), int64]) */;
  %227 = %226.3;
  %228 = cast(%227, dtype="float64") /* ty=Tensor[(10, ?, ?), float64] */;
  %229 = cos(%228) /* ty=Tensor[(10, ?, ?), float64] */;
  (%229,)
}

def @func_3606(%var_3598: Tensor[(770), uint64]) -> (Tensor[(12, 4, 15), float64], Tensor[(10, 1, 1), uint32], Tensor[(10, ?, ?), int64], Tensor[(770), uint64]) {
  %230 = @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */;
  %231 = cast(%var_3598, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %232 = reshape(%231, newshape=[770]) /* ty=Tensor[(770), uint64] */;
  %233 = @func_3498(%232) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, 1, 1), uint32], Tensor[(10, 2, 40), bool], Tensor[(770), uint64]) */;
  %234 = %230.1;
  %235 = @func_514() /* ty=Tensor[(10, 1, 1), uint32] */;
  %236 = %233.0;
  (%234, %235, %236, %var_3598)
}

def @func_82(%var_76: uint32, %var_77: Tensor[(10, 1, 1), uint32]) -> Tensor[(10, 1, 1), uint32] {
  %237 = cast(%var_76, dtype="uint32") /* ty=uint32 */;
  %238 = cast(%var_77, dtype="uint32") /* ty=Tensor[(10, 1, 1), uint32] */;
  right_shift(%237, %238) /* ty=Tensor[(10, 1, 1), uint32] */
}

def @func_4825(%var_4800: Tensor[(960), uint32], %var_4805: Tensor[(80), float32]) -> (Tensor[(14, 10, 8), uint64], Tensor[(6, 16, 10), bool], Tensor[(960), uint32], uint32, Tensor[(80), float32], Tensor[(1, 390), int64], Tensor[(14, 10, 8), uint64]) {
  %239 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %240 = cast(%var_4800, dtype="uint32") /* ty=Tensor[(960), uint32] */;
  %241 = cast(%var_4800, dtype="uint32") /* ty=Tensor[(960), uint32] */;
  %242 = reshape(%240, newshape=[6, 16, 10]) /* ty=Tensor[(6, 16, 10), uint32] */;
  %243 = reshape(%241, newshape=[6, 16, 10]) /* ty=Tensor[(6, 16, 10), uint32] */;
  %244 = cast(%var_4805, dtype="float32") /* ty=Tensor[(80), float32] */;
  %245 = reshape(%244, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float32] */;
  %246 = @func_925(%245) /* ty=(Tensor[(10, 1, 1), uint32], uint32, Tensor[(10, ?, ?), int64], uint32, Tensor[(10, 8, 1), uint16]) */;
  %247 = @func_3578() /* ty=(Tensor[(105), uint32], Tensor[(1, 10), uint32], Tensor[(1, 390), int64]) */;
  %248 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %249 = %239.0;
  %250 = @func_3349(%242, %243) /* ty=Tensor[(6, 16, 10), bool] */;
  %251 = %246.1;
  %252 = %247.2;
  %253 = %248.0;
  (%249, %250, %var_4800, %251, %var_4805, %252, %253)
}

def @func_4243() -> Tensor[(10, 1, 1), uint32] {
  @func_1712() /* ty=Tensor[(10, 1, 1), uint32] */
}

def @func_4119(%var_4100: Tensor[(160), float64]) -> (Tensor[(720), float64], Tensor[(2, 8, 10), float64], Tensor[(160), float64], Tensor[(2, 1, 2), float32], Tensor[(4), float32], Tensor[(2, 1, 2), float32]) {
  %254 = @func_3568() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) */;
  %255 = cast(%var_4100, dtype="float64") /* ty=Tensor[(160), float64] */;
  %256 = reshape(%255, newshape=[2, 8, 10]) /* ty=Tensor[(2, 8, 10), float64] */;
  %257 = @func_3697(%256) /* ty=(Tensor[(2, 8, 10), float64], uint32, Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), bool]) */;
  %258 = cast(meta[relay.Constant][14] /* ty=Tensor[(4), float32] */, dtype="float32") /* ty=Tensor[(4), float32] */;
  %259 = reshape(%258, newshape=[2, 1, 2]) /* ty=Tensor[(2, 1, 2), float32] */;
  %260 = @func_3930(%259) /* ty=(Tensor[(2, 1, 2), float32],) */;
  %261 = cast(meta[relay.Constant][14] /* ty=Tensor[(4), float32] */, dtype="float32") /* ty=Tensor[(4), float32] */;
  %262 = reshape(%261, newshape=[2, 1, 2]) /* ty=Tensor[(2, 1, 2), float32] */;
  %263 = @func_3930(%262) /* ty=(Tensor[(2, 1, 2), float32],) */;
  %264 = %254.2;
  %265 = %257.0;
  %266 = %260.0;
  %267 = %263.0;
  (%264, %265, %var_4100, %266, meta[relay.Constant][14] /* ty=Tensor[(4), float32] */, %267)
}

def @func_5291(%var_5251: Tensor[(10, 11, 6), uint32]) -> (Tensor[(10, 11, 6), bool], Tensor[(10, ?, ?), int64], Tensor[(14, 10, 8), bool], Tensor[(10, 11, 6), float64]) {
  %268 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 11, 6), uint32] */, dtype="bool") /* ty=Tensor[(10, 11, 6), bool] */;
  %269 = shape_of(%var_5251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%var_5251, dtype="bool") /* ty=Tensor[(10, 11, 6), bool] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %272 = @func_2400() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %273 = %272.0;
  %274 = cast(meta[relay.Constant][16] /* ty=Tensor[(14, 10, 8), uint64] */, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %278 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 11, 6), uint32] */, dtype="float64") /* ty=Tensor[(10, 11, 6), float64] */;
  %279 = greater_equal(%270, %271) /* ty=Tensor[(10, 11, 6), bool] */;
  %280 = @func_1036() /* ty=Tensor[(10, ?, ?), int64] */;
  %281 = greater(%276, %277) /* ty=Tensor[(14, 10, 8), bool] */;
  %282 = sin(%278) /* ty=Tensor[(10, 11, 6), float64] */;
  (%279, %280, %281, %282)
}

def @func_4986() -> Tensor[(10, ?, ?), int64] {
  @func_313() /* ty=Tensor[(10, ?, ?), int64] */
}

def @func_4745(%var_4712: Tensor[(3, 14, 2), bool], %var_4713: Tensor[(3, 14, 2), bool], %var_4734: Tensor[(3, 14, 2), bool]) -> (Tensor[(3, 14, 2), uint16], Tensor[(15, 1, 7), bool]) {
  %283 = cast(%var_4713, dtype="bool") /* ty=Tensor[(3, 14, 2), bool] */;
  %284 = shape_of(%var_4712, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%var_4712, dtype="bool") /* ty=Tensor[(3, 14, 2), bool] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %287 = logical_and(%285, %286) /* ty=Tensor[(3, 14, 2), bool] */;
  %288 = cast(%var_4734, dtype="uint16") /* ty=Tensor[(3, 14, 2), uint16] */;
  %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%287, dtype="uint16") /* ty=Tensor[(3, 14, 2), uint16] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %292 = @func_3418() /* ty=(Tensor[(720), float32], Tensor[(15, 1, 7), bool], Tensor[(105), uint32], Tensor[(2, 6, 11), float32], Tensor[(66, 2), float32], Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64]) */;
  %293 = add(%290, %291) /* ty=Tensor[(3, 14, 2), uint16] */;
  %294 = %292.1;
  (%293, %294)
}

def @func_4854() -> Tensor[(720), float64] {
  @func_3037() /* ty=Tensor[(720), float64] */
}

def @func_1884() -> (uint32, Tensor[(10, ?, ?), int64]) {
  %295 = @func_375() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(1, 10), uint32]) */;
  %296 = %295.0;
  %297 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
  (%296, %297)
}

def @func_3738(%var_3707: Tensor[(4, 40), float64]) -> (Tensor[(10, ?, ?), int64], Tensor[(4, 40), float64], Tensor[(14, 10, 8), bool], Tensor[(10, ?, ?), float64]) {
  %298 = cast(%var_3707, dtype="float64") /* ty=Tensor[(4, 40), float64] */;
  %299 = reshape(%298, newshape=[2, 8, 10]) /* ty=Tensor[(2, 8, 10), float64] */;
  %300 = @func_3697(%299) /* ty=(Tensor[(2, 8, 10), float64], uint32, Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), bool]) */;
  %301 = @func_3620() /* ty=Tensor[(14, 10, 8), uint64] */;
  %302 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 10, 8), uint64] */, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
  %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%301, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %306 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
  %307 = cast(%306, dtype="float64") /* ty=Tensor[(10, ?, ?), float64] */;
  %308 = %300.2;
  %309 = less_equal(%304, %305) /* ty=Tensor[(14, 10, 8), bool] */;
  %310 = log10(%307) /* ty=Tensor[(10, ?, ?), float64] */;
  (%308, %var_3707, %309, %310)
}

def @func_1712() -> Tensor[(10, 1, 1), uint32] {
  %311 = @func_1550() /* ty=(Tensor[(10, 1, 1), uint32],) */;
  %311.0
}

def @func_4610() -> Tensor[(10, ?, ?), int64] {
  %312 = @func_3568() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) */;
  %312.0
}

def @func_2719(%var_2711: Tensor[(10, 15, 13), uint32]) -> Tensor[(10, 15, 13), float64] {
  %313 = @func_2487() /* ty=Tensor[(10, 1, 1), uint32] */;
  %314 = cast(%313, dtype="float64") /* ty=Tensor[(10, 1, 1), float64] */;
  %315 = cast(%var_2711, dtype="float64") /* ty=Tensor[(10, 15, 13), float64] */;
  power(%314, %315) /* ty=Tensor[(10, 15, 13), float64] */
}

def @func_3205(%var_3177: Tensor[(10, 8, 9), uint32], %var_3191: Tensor[(13, 39), float32]) -> (Tensor[(10, 8, 9), uint32], Tensor[(13, 3, 13), uint32], Tensor[(13, 39), float32], Tensor[(10, 8, 9), float64]) {
  %316 = @func_2487() /* ty=Tensor[(10, 1, 1), uint32] */;
  %317 = cast(%316, dtype="bool") /* ty=Tensor[(10, 1, 1), bool] */;
  %318 = cast(%var_3177, dtype="bool") /* ty=Tensor[(10, 8, 9), bool] */;
  %319 = greater_equal(%317, %318) /* ty=Tensor[(10, 8, 9), bool] */;
  %320 = cast(%319, dtype="uint32") /* ty=Tensor[(10, 8, 9), uint32] */;
  %321 = cast(%316, dtype="uint32") /* ty=Tensor[(10, 1, 1), uint32] */;
  %322 = cast(%var_3191, dtype="float32") /* ty=Tensor[(13, 39), float32] */;
  %323 = reshape(%322, newshape=[507]) /* ty=Tensor[(507), float32] */;
  %324 = @func_1699(%323) /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(13, 3, 13), uint32]) */;
  %325 = cast(%var_3177, dtype="float64") /* ty=Tensor[(10, 8, 9), float64] */;
  %326 = add(%320, %321) /* ty=Tensor[(10, 8, 9), uint32] */;
  %327 = %324.4;
  %328 = asinh(%325) /* ty=Tensor[(10, 8, 9), float64] */;
  (%326, %327, %var_3191, %328)
}

def @func_5031() -> (Tensor[(10, ?, ?), int64],) {
  %329 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
  (%329,)
}

def @func_2400() -> (Tensor[(14, 10, 8), uint64],) {
  %330 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %331 = %330.0;
  (%331,)
}

def @func_6129(%var_6093: Tensor[(80), float32], %var_6100: Tensor[(160), float64], %var_6114: Tensor[(208), float32], %var_6115: Tensor[(3328), float32]) -> (Tensor[(720), float64], uint32, Tensor[(960), uint32], Tensor[(80), float32], Tensor[(14, 9, 6), bool], Tensor[(160), float64], Tensor[(15, 1, 7), bool], Tensor[(105), uint32], Tensor[(16, 13, 16), bool], Tensor[(208), float32], Tensor[(3328), float32], Tensor[(720), float64]) {
  %332 = cast(meta[relay.Constant][18] /* ty=Tensor[(960), uint32] */, dtype="uint32") /* ty=Tensor[(960), uint32] */;
  %333 = cast(%var_6093, dtype="float32") /* ty=Tensor[(80), float32] */;
  %334 = reshape(%332, newshape=[960]) /* ty=Tensor[(960), uint32] */;
  %335 = reshape(%333, newshape=[80]) /* ty=Tensor[(80), float32] */;
  %336 = @func_4825(%334, %335) /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(6, 16, 10), bool], Tensor[(960), uint32], uint32, Tensor[(80), float32], Tensor[(1, 390), int64], Tensor[(14, 10, 8), uint64]) */;
  %337 = cast(%var_6100, dtype="float64") /* ty=Tensor[(160), float64] */;
  %338 = reshape(%337, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %339 = @func_3829(%338) /* ty=(Tensor[(14, 9, 6), bool], Tensor[(2, 8, 10), float64], Tensor[(160), float64]) */;
  %340 = cast(meta[relay.Constant][19] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %341 = reshape(%340, newshape=[15, 1, 7]) /* ty=Tensor[(15, 1, 7), uint32] */;
  %342 = cast(%var_6114, dtype="float32") /* ty=Tensor[(208), float32] */;
  %343 = cast(%var_6115, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %344 = reshape(%342, newshape=[16, 13, 1]) /* ty=Tensor[(16, 13, 1), float32] */;
  %345 = reshape(%343, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), float32] */;
  %346 = @func_4676(%344, %345) /* ty=(Tensor[(16, 13, 16), bool],) */;
  %347 = @func_4380() /* ty=(Tensor[(7, 3, 1), float64], Tensor[(720), float64]) */;
  %348 = @func_4902() /* ty=Tensor[(720), float64] */;
  %349 = %336.3;
  %350 = %339.0;
  %351 = @func_2361(%341) /* ty=Tensor[(15, 1, 7), bool] */;
  %352 = %346.0;
  %353 = %347.1;
  (%348, %349, meta[relay.Constant][18] /* ty=Tensor[(960), uint32] */, %var_6093, %350, %var_6100, %351, meta[relay.Constant][19] /* ty=Tensor[(105), uint32] */, %352, %var_6114, %var_6115, %353)
}

def @func_4902() -> Tensor[(720), float64] {
  @func_4854() /* ty=Tensor[(720), float64] */
}

def @func_6343() -> (Tensor[(10, 3, 1), uint16],) {
  %354 = @func_2487() /* ty=Tensor[(10, 1, 1), uint32] */;
  %355 = cast(%354, dtype="uint16") /* ty=Tensor[(10, 1, 1), uint16] */;
  %356 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 3, 1), uint32] */, dtype="uint16") /* ty=Tensor[(10, 3, 1), uint16] */;
  %357 = minimum(%355, %356) /* ty=Tensor[(10, 3, 1), uint16] */;
  (%357,)
}

def @func_4021() -> (Tensor[(14, 10, 8), uint64], Tensor[(6, 1, 14), int64], Tensor[(84), int16], Tensor[(10, ?, ?), uint32], Tensor[(8, 13, 3), uint8], Tensor[(8, 13, 3), float64]) {
  %358 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %359 = cast(meta[relay.Constant][21] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %360 = cast(meta[relay.Constant][22] /* ty=Tensor[(84), int16] */, dtype="int16") /* ty=Tensor[(84), int16] */;
  %361 = reshape(%359, newshape=[]) /* ty=int16 */;
  %362 = reshape(%360, newshape=[6, 1, 14]) /* ty=Tensor[(6, 1, 14), int16] */;
  %363 = @func_1503(%361, %362) /* ty=(Tensor[(6, 1, 14), int16], Tensor[(6, 1, 14), int64]) */;
  %364 = @func_2965() /* ty=(Tensor[(10, ?, ?), int64],) */;
  %365 = %364.0;
  %366 = cast(%365, dtype="uint32") /* ty=Tensor[(10, ?, ?), uint32] */;
  %367 = cast(meta[relay.Constant][21] /* ty=int16 */, dtype="uint32") /* ty=uint32 */;
  %368 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 13, 3), bool] */, dtype="uint8") /* ty=Tensor[(8, 13, 3), uint8] */;
  %369 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(8, 13, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 13, 3), bool] */, dtype="uint8") /* ty=Tensor[(8, 13, 3), uint8] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %372 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 13, 3), bool] */, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %373 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(8, 13, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 13, 3), bool] */, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = logical_and(%374, %375) /* ty=Tensor[(8, 13, 3), bool] */;
  %377 = cast(%376, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
  %378 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(8, 13, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 13, 3), bool] */, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %381 = divide(%379, %380) /* ty=Tensor[(8, 13, 3), float32] */;
  %382 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 13, 3), bool] */, dtype="float64") /* ty=Tensor[(8, 13, 3), float64] */;
  %383 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%381, dtype="float64") /* ty=Tensor[(8, 13, 3), float64] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %386 = %358.1;
  %387 = %363.1;
  %388 = minimum(%366, %367) /* ty=Tensor[(10, ?, ?), uint32] */;
  %389 = logical_xor(%370, %371) /* ty=Tensor[(8, 13, 3), uint8] */;
  %390 = floor_divide(%384, %385) /* ty=Tensor[(8, 13, 3), float64] */;
  (%386, %387, meta[relay.Constant][22] /* ty=Tensor[(84), int16] */, %388, %389, %390)
}

def @func_2965() -> (Tensor[(10, ?, ?), int64],) {
  %391 = @func_2130() /* ty=(Tensor[(10, ?, ?), int64],) */;
  %392 = %391.0;
  (%392,)
}

def @func_1036() -> Tensor[(10, ?, ?), int64] {
  %393 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %393.1
}

def @func_747(%var_717: Tensor[(14, 11, 5), uint64], %var_718: Tensor[(14, 11, 5), uint64]) -> (Tensor[(14, 11, 5), uint64], Tensor[(13, 3, 13), float32], Tensor[(13, 39), float32], Tensor[(14, 10, 8), uint64]) {
  %394 = cast(%var_718, dtype="uint64") /* ty=Tensor[(14, 11, 5), uint64] */;
  %395 = shape_of(%var_717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%var_717, dtype="uint64") /* ty=Tensor[(14, 11, 5), uint64] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %398 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 39), float32] */, dtype="float32") /* ty=Tensor[(13, 39), float32] */;
  %399 = reshape(%398, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), float32] */;
  %400 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %401 = maximum(%396, %397) /* ty=Tensor[(14, 11, 5), uint64] */;
  %402 = @func_181(%399) /* ty=Tensor[(13, 3, 13), float32] */;
  %403 = %400.1;
  (%401, %402, meta[relay.Constant][26] /* ty=Tensor[(13, 39), float32] */, %403)
}

def @func_3349(%var_3335: Tensor[(6, 16, 10), uint32], %var_3336: Tensor[(6, 16, 10), uint32]) -> Tensor[(6, 16, 10), bool] {
  %404 = cast(%var_3336, dtype="bool") /* ty=Tensor[(6, 16, 10), bool] */;
  %405 = shape_of(%var_3335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%var_3335, dtype="bool") /* ty=Tensor[(6, 16, 10), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%406, %407) /* ty=Tensor[(6, 16, 10), bool] */
}

def @func_5585(%var_5563: Tensor[(14, 2, 5), float32]) -> (Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(660, 1), uint32], Tensor[(14, 2, 5), uint16]) {
  %408 = @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */;
  %409 = cast(meta[relay.Constant][27] /* ty=Tensor[(660, 1), uint32] */, dtype="uint32") /* ty=Tensor[(660, 1), uint32] */;
  %410 = reshape(%409, newshape=[10, 11, 6]) /* ty=Tensor[(10, 11, 6), uint32] */;
  %411 = @func_5291(%410) /* ty=(Tensor[(10, 11, 6), bool], Tensor[(10, ?, ?), int64], Tensor[(14, 10, 8), bool], Tensor[(10, 11, 6), float64]) */;
  %412 = cast(%var_5563, dtype="float32") /* ty=Tensor[(14, 2, 5), float32] */;
  %413 = acos(%412) /* ty=Tensor[(14, 2, 5), float32] */;
  %414 = cast(%var_5563, dtype="uint16") /* ty=Tensor[(14, 2, 5), uint16] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="uint16") /* ty=Tensor[(14, 2, 5), uint16] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %418 = %408.0;
  %419 = %411.1;
  %420 = subtract(%416, %417) /* ty=Tensor[(14, 2, 5), uint16] */;
  (%418, %419, meta[relay.Constant][27] /* ty=Tensor[(660, 1), uint32] */, %420)
}

def @func_1364(%var_1309: Tensor[(14, 10, 8), uint64]) -> (Tensor[(10, ?, ?), int64], Tensor[(14, 10, 8), float64], Tensor[(14, 10, 8), uint8]) {
  %421 = cast(%var_1309, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
  %422 = cast(%var_1309, dtype="float32") /* ty=Tensor[(14, 10, 8), float32] */;
  %423 = sigmoid(%422) /* ty=Tensor[(14, 10, 8), float32] */;
  %424 = cast(%423, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
  %425 = log10(%424) /* ty=Tensor[(14, 10, 8), float64] */;
  %426 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %427 = %426.0;
  %428 = cast(%var_1309, dtype="int16") /* ty=Tensor[(14, 10, 8), int16] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="int16") /* ty=Tensor[(14, 10, 8), int16] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %432 = add(%430, %431) /* ty=Tensor[(14, 10, 8), int16] */;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
  %434 = sinh(%433) /* ty=Tensor[(14, 10, 8), float64] */;
  %435 = cast(%434, dtype="uint8") /* ty=Tensor[(14, 10, 8), uint8] */;
  %436 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%425, dtype="uint8") /* ty=Tensor[(14, 10, 8), uint8] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %439 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
  %440 = cos(%421) /* ty=Tensor[(14, 10, 8), float64] */;
  %441 = multiply(%437, %438) /* ty=Tensor[(14, 10, 8), uint8] */;
  (%439, %440, %441)
}

def @func_6301(%var_6276: Tensor[(10, 4, 3), uint32]) -> (Tensor[(10, 4, 3), int8], uint32, Tensor[(10, 4, 3), float32]) {
  %442 = @func_2668() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(80, 1), float32], Tensor[(10, ?, ?), int64]) */;
  %443 = %442.1;
  %444 = cast(%443, dtype="int8") /* ty=Tensor[(10, 1, 1), int8] */;
  %445 = cast(%var_6276, dtype="int8") /* ty=Tensor[(10, 4, 3), int8] */;
  %446 = @func_2066() /* ty=(uint32, Tensor[(14, 10, 8), uint64]) */;
  %447 = cast(%var_6276, dtype="float64") /* ty=Tensor[(10, 4, 3), float64] */;
  %448 = atan(%447) /* ty=Tensor[(10, 4, 3), float64] */;
  %449 = cast(%448, dtype="float32") /* ty=Tensor[(10, 4, 3), float32] */;
  %450 = multiply(%444, %445) /* ty=Tensor[(10, 4, 3), int8] */;
  %451 = %446.0;
  %452 = sin(%449) /* ty=Tensor[(10, 4, 3), float32] */;
  (%450, %451, %452)
}

def @func_313() -> Tensor[(10, ?, ?), int64] {
  %453 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %453.2
}

def @func_1228(%var_1187: Tensor[(8, 2, 15), uint8], %var_1188: Tensor[(8, 2, 15), uint8], %var_1194: Tensor[(8, 2, 15), uint8]) -> (Tensor[(8, 2, 15), uint8], Tensor[(8, 2, 15), uint32], Tensor[(14, 10, 8), float32], Tensor[(10, 11, 3), int16]) {
  %454 = cast(%var_1188, dtype="uint8") /* ty=Tensor[(8, 2, 15), uint8] */;
  %455 = shape_of(%var_1187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %456 = cast(%var_1187, dtype="uint8") /* ty=Tensor[(8, 2, 15), uint8] */;
  %457 = dyn.reshape(%454, %455, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %458 = cast(%var_1194, dtype="uint32") /* ty=Tensor[(8, 2, 15), uint32] */;
  %459 = shape_of(%var_1187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%var_1187, dtype="uint32") /* ty=Tensor[(8, 2, 15), uint32] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %462 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %463 = %462.1;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(14, 10, 8), float32] */;
  %465 = @func_514() /* ty=Tensor[(10, 1, 1), uint32] */;
  %466 = cast(%465, dtype="int16") /* ty=Tensor[(10, 1, 1), int16] */;
  %467 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 11, 3), uint32] */, dtype="int16") /* ty=Tensor[(10, 11, 3), int16] */;
  %468 = left_shift(%456, %457) /* ty=Tensor[(8, 2, 15), uint8] */;
  %469 = right_shift(%460, %461) /* ty=Tensor[(8, 2, 15), uint32] */;
  %470 = acosh(%464) /* ty=Tensor[(14, 10, 8), float32] */;
  %471 = logical_xor(%466, %467) /* ty=Tensor[(10, 11, 3), int16] */;
  (%468, %469, %470, %471)
}

def @func_2516() -> Tensor[(10, ?, ?), int64] {
  %472 = @func_1884() /* ty=(uint32, Tensor[(10, ?, ?), int64]) */;
  %472.1
}

def @func_3291(%var_3235: Tensor[(15, 7, 7), int16], %var_3236: Tensor[(15, 7, 7), int16]) -> (Tensor[(14, 10, 8), uint64], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(10, 15, 13), float64], Tensor[(1, 1950), uint32], Tensor[(240), uint8], Tensor[(507), float32], Tensor[(77, 10), uint64], Tensor[(770), uint64], Tensor[(15, 7, 7), uint8]) {
  %473 = @func_1397() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %474 = @func_2400() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %475 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 1950), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1950), uint32] */;
  %476 = reshape(%475, newshape=[10, 15, 13]) /* ty=Tensor[(10, 15, 13), uint32] */;
  %477 = cast(meta[relay.Constant][30] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
  %478 = reshape(%477, newshape=[507]) /* ty=Tensor[(507), float32] */;
  %479 = @func_1699(%478) /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(13, 3, 13), uint32]) */;
  %480 = cast(meta[relay.Constant][31] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %481 = reshape(%480, newshape=[77, 10]) /* ty=Tensor[(77, 10), uint64] */;
  %482 = @func_2892(%481) /* ty=(Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), bool], Tensor[(14, 10, 8), uint64], Tensor[(77, 10), uint64], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), float32]) */;
  %483 = cast(%var_3236, dtype="int16") /* ty=Tensor[(15, 7, 7), int16] */;
  %484 = shape_of(%var_3235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%var_3235, dtype="int16") /* ty=Tensor[(15, 7, 7), int16] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %487 = bitwise_and(%485, %486) /* ty=Tensor[(15, 7, 7), int16] */;
  %488 = cast(%var_3235, dtype="uint8") /* ty=Tensor[(15, 7, 7), uint8] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%487, dtype="uint8") /* ty=Tensor[(15, 7, 7), uint8] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %492 = %473.0;
  %493 = %474.0;
  %494 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
  %495 = @func_2719(%476) /* ty=Tensor[(10, 15, 13), float64] */;
  %496 = %479.2;
  %497 = %482.3;
  %498 = multiply(%490, %491) /* ty=Tensor[(15, 7, 7), uint8] */;
  (%492, %493, %494, %495, meta[relay.Constant][29] /* ty=Tensor[(1, 1950), uint32] */, %496, meta[relay.Constant][30] /* ty=Tensor[(507), float32] */, %497, meta[relay.Constant][31] /* ty=Tensor[(770), uint64] */, %498)
}

def @func_4412() -> Tensor[(7, 3, 1), float64] {
  %499 = @func_4380() /* ty=(Tensor[(7, 3, 1), float64], Tensor[(720), float64]) */;
  %499.0
}

def @func_2420() -> (Tensor[(720), float64],) {
  %500 = @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */;
  %501 = %500.2;
  (%501,)
}

def @func_2386() -> Tensor[(10, ?, ?), int64] {
  %502 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %502.1
}

def @func_181(%var_176: Tensor[(13, 3, 13), float32]) -> Tensor[(13, 3, 13), float32] {
  %503 = cast(%var_176, dtype="float32") /* ty=Tensor[(13, 3, 13), float32] */;
  sigmoid(%503) /* ty=Tensor[(13, 3, 13), float32] */
}

def @func_581(%var_565: Tensor[(2, 11, 1), bool], %var_566: Tensor[(2, 11, 1), bool]) -> Tensor[(2, 11, ?), bool] {
  %504 = cast(%var_566, dtype="bool") /* ty=Tensor[(2, 11, 1), bool] */;
  %505 = shape_of(%var_565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%var_565, dtype="bool") /* ty=Tensor[(2, 11, 1), bool] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%506, %507) /* ty=Tensor[(2, 11, ?), bool] */
}

def @main(%var_6748: Tensor[(8, 5, 7), float64]) -> (Tensor[(8, 5, 7), float64], Tensor[(80, 1), float64]) {
  %508 = cast(%var_6748, dtype="float64") /* ty=Tensor[(8, 5, 7), float64] */;
  %509 = @func_4767() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(80, 1), float64]) */;
  %510 = %509.1;
  %511 = cast(%510, dtype="float64") /* ty=Tensor[(80, 1), float64] */;
  %512 = acos(%508) /* ty=Tensor[(8, 5, 7), float64] */;
  %513 = sigmoid(%511) /* ty=Tensor[(80, 1), float64] */;
  (%512, %513)
}

def @func_5096() -> (Tensor[(14, 10, 8), uint64],) {
  %514 = @func_1397() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %515 = %514.0;
  (%515,)
}

def @func_360() -> (Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) {
  %516 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %517 = %516.1;
  %518 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
  (%517, %518)
}

def @func_4159() -> Tensor[(14, 10, 8), uint64] {
  %519 = @func_2400() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %519.0
}

def @func_2838(%var_2827: Tensor[(2, 6, 11), float32]) -> Tensor[(2, 6, 11), float32] {
  %520 = cast(%var_2827, dtype="float32") /* ty=Tensor[(2, 6, 11), float32] */;
  sigmoid(%520) /* ty=Tensor[(2, 6, 11), float32] */
}

def @func_5993() -> (Tensor[(720), float64],) {
  %521 = @func_2420() /* ty=(Tensor[(720), float64],) */;
  %522 = %521.0;
  (%522,)
}

def @func_375() -> (uint32, Tensor[(10, 1, 1), uint32], Tensor[(1, 10), uint32]) {
  %523 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %524 = %523.0;
  %525 = cast(%524, dtype="uint32") /* ty=uint32 */;
  %526 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 10), uint32] */, dtype="uint32") /* ty=Tensor[(1, 10), uint32] */;
  %527 = reshape(%525, newshape=[]) /* ty=uint32 */;
  %528 = reshape(%526, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), uint32] */;
  %529 = @func_82(%527, %528) /* ty=Tensor[(10, 1, 1), uint32] */;
  (%524, %529, meta[relay.Constant][32] /* ty=Tensor[(1, 10), uint32] */)
}

def @func_3141(%var_3132: Tensor[(21, 4), int16], %var_3137: Tensor[(720), float64]) -> (Tensor[(14, 10, 8), uint64], Tensor[(6, 1, 14), int64], Tensor[(21, 4), int16], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) {
  %530 = @func_2066() /* ty=(uint32, Tensor[(14, 10, 8), uint64]) */;
  %531 = cast(%var_3132, dtype="int16") /* ty=Tensor[(21, 4), int16] */;
  %532 = reshape(%531, newshape=[84]) /* ty=Tensor[(84), int16] */;
  %533 = @func_1858(%532) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(6, 1, 14), int64], int16, Tensor[(84), int16], Tensor[(10, 1, 1), uint32]) */;
  %534 = cast(%var_3137, dtype="float64") /* ty=Tensor[(720), float64] */;
  %535 = reshape(%534, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), float64] */;
  %536 = @func_1154(%535) /* ty=(Tensor[(12, 4, 15), float64], Tensor[(10, ?, ?), int64]) */;
  %537 = %530.1;
  %538 = %533.1;
  %539 = %536.1;
  (%537, %538, %var_3132, %539, %var_3137)
}

def @func_1397() -> (Tensor[(14, 10, 8), uint64],) {
  %540 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %541 = %540.0;
  (%541,)
}

def @func_514() -> Tensor[(10, 1, 1), uint32] {
  %542 = @func_375() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(1, 10), uint32]) */;
  %542.1
}

def @func_2066() -> (uint32, Tensor[(14, 10, 8), uint64]) {
  %543 = @func_1884() /* ty=(uint32, Tensor[(10, ?, ?), int64]) */;
  %544 = @func_1397() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %545 = %543.0;
  %546 = %544.0;
  (%545, %546)
}

def @func_4767() -> (Tensor[(10, ?, ?), int64], Tensor[(80, 1), float64]) {
  %547 = @func_2668() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(80, 1), float32], Tensor[(10, ?, ?), int64]) */;
  %548 = %547.2;
  %549 = cast(%548, dtype="float64") /* ty=Tensor[(80, 1), float64] */;
  %550 = @func_2386() /* ty=Tensor[(10, ?, ?), int64] */;
  %551 = acosh(%549) /* ty=Tensor[(80, 1), float64] */;
  (%550, %551)
}

def @func_2823(%var_2793: Tensor[(84), int16]) -> (Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), bool], Tensor[(10, ?, ?), float64], Tensor[(6, 1, 14), int16], Tensor[(84), int16], Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(22), bool], Tensor[(10, ?, ?), bool]) {
  %552 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %553 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %554 = %553.2;
  %555 = cast(%554, dtype="float64") /* ty=Tensor[(10, ?, ?), float64] */;
  %556 = log(%555) /* ty=Tensor[(10, ?, ?), float64] */;
  %557 = @func_2066() /* ty=(uint32, Tensor[(14, 10, 8), uint64]) */;
  %558 = %557.0;
  %559 = cast(%556, dtype="bool") /* ty=Tensor[(10, ?, ?), bool] */;
  %560 = cast(%558, dtype="bool") /* ty=bool */;
  %561 = cast(%556, dtype="float64") /* ty=Tensor[(10, ?, ?), float64] */;
  %562 = cast(%558, dtype="int16") /* ty=int16 */;
  %563 = cast(%var_2793, dtype="int16") /* ty=Tensor[(84), int16] */;
  %564 = reshape(%562, newshape=[]) /* ty=int16 */;
  %565 = reshape(%563, newshape=[6, 1, 14]) /* ty=Tensor[(6, 1, 14), int16] */;
  %566 = @func_1503(%564, %565) /* ty=(Tensor[(6, 1, 14), int16], Tensor[(6, 1, 14), int64]) */;
  %567 = cast(meta[relay.Constant][33] /* ty=Tensor[(22), bool] */, dtype="bool") /* ty=Tensor[(22), bool] */;
  %568 = reshape(%567, newshape=[22]) /* ty=Tensor[(22), bool] */;
  %569 = @func_818(%568) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(2, 11, ?), bool], Tensor[(22), bool]) */;
  %570 = cast(%554, dtype="uint32") /* ty=Tensor[(10, ?, ?), uint32] */;
  %571 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%556, dtype="uint32") /* ty=Tensor[(10, ?, ?), uint32] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %574 = bitwise_or(%572, %573) /* ty=Tensor[(10, ?, ?), uint32] */;
  %575 = cast(%574, dtype="bool") /* ty=Tensor[(10, ?, ?), bool] */;
  %576 = cast(%558, dtype="bool") /* ty=bool */;
  %577 = %552.0;
  %578 = equal(%559, %560) /* ty=Tensor[(10, ?, ?), bool] */;
  %579 = exp(%561) /* ty=Tensor[(10, ?, ?), float64] */;
  %580 = %566.0;
  %581 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
  %582 = %569.0;
  %583 = greater_equal(%575, %576) /* ty=Tensor[(10, ?, ?), bool] */;
  (%577, %578, %579, %580, %var_2793, %581, %582, meta[relay.Constant][33] /* ty=Tensor[(22), bool] */, %583)
}

def @func_3697(%var_3637: Tensor[(2, 8, 10), float64]) -> (Tensor[(2, 8, 10), float64], uint32, Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), bool]) {
  %584 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 8, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 8, 10), float64] */;
  %585 = shape_of(%var_3637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%var_3637, dtype="float64") /* ty=Tensor[(2, 8, 10), float64] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %588 = @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */;
  %589 = cast(meta[relay.Constant][35] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %590 = reshape(%589, newshape=[]) /* ty=uint32 */;
  %591 = @func_2949(%590) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, 1, 1), float32], Tensor[(10, 1, 1), uint32], uint32) */;
  %592 = %591.2;
  %593 = cast(%592, dtype="float64") /* ty=Tensor[(10, 1, 1), float64] */;
  %594 = sin(%593) /* ty=Tensor[(10, 1, 1), float64] */;
  %595 = cast(%592, dtype="bool") /* ty=Tensor[(10, 1, 1), bool] */;
  %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%594, dtype="bool") /* ty=Tensor[(10, 1, 1), bool] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %599 = maximum(%586, %587) /* ty=Tensor[(2, 8, 10), float64] */;
  %600 = %588.0;
  %601 = less_equal(%597, %598) /* ty=Tensor[(10, ?, ?), bool] */;
  (%599, meta[relay.Constant][35] /* ty=uint32 */, %600, %601)
}

def @func_3037() -> Tensor[(720), float64] {
  %602 = @func_2420() /* ty=(Tensor[(720), float64],) */;
  %602.0
}

def @func_1550() -> (Tensor[(10, 1, 1), uint32],) {
  %603 = @func_514() /* ty=Tensor[(10, 1, 1), uint32] */;
  (%603,)
}

def @func_1699(%var_1675: Tensor[(507), float32]) -> (Tensor[(14, 10, 8), uint64], Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(13, 3, 13), uint32]) {
  %604 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %605 = cast(meta[relay.Constant][36] /* ty=Tensor[(240), uint8] */, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %606 = cast(meta[relay.Constant][36] /* ty=Tensor[(240), uint8] */, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %607 = cast(meta[relay.Constant][36] /* ty=Tensor[(240), uint8] */, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %608 = reshape(%605, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), uint8] */;
  %609 = reshape(%606, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), uint8] */;
  %610 = reshape(%607, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), uint8] */;
  %611 = @func_1228(%608, %609, %610) /* ty=(Tensor[(8, 2, 15), uint8], Tensor[(8, 2, 15), uint32], Tensor[(14, 10, 8), float32], Tensor[(10, 11, 3), int16]) */;
  %612 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %613 = cast(%var_1675, dtype="float32") /* ty=Tensor[(507), float32] */;
  %614 = reshape(%613, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), float32] */;
  %615 = @func_181(%614) /* ty=Tensor[(13, 3, 13), float32] */;
  %616 = cast(%615, dtype="float32") /* ty=Tensor[(13, 3, 13), float32] */;
  %617 = atanh(%616) /* ty=Tensor[(13, 3, 13), float32] */;
  %618 = cast(%var_1675, dtype="uint32") /* ty=Tensor[(507), uint32] */;
  %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %620 = cast(%617, dtype="uint32") /* ty=Tensor[(13, 3, 13), uint32] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %622 = %604.0;
  %623 = %611.0;
  %624 = %612.0;
  %625 = subtract(%620, %621) /* ty=Tensor[(13, 3, 13), uint32] */;
  (%622, %623, meta[relay.Constant][36] /* ty=Tensor[(240), uint8] */, %624, %625)
}

def @func_5427(%var_5410: Tensor[(160), float64]) -> (Tensor[(10, 1, 1), float32], Tensor[(10, 14, 10), uint8], Tensor[(14, 10, 8), uint64], Tensor[(10, 1, 1), uint32], Tensor[(14, 10, 8), uint64], Tensor[(14, 10, 8), uint64], Tensor[(160), float64], Tensor[(160), float64], uint32) {
  %626 = @func_4243() /* ty=Tensor[(10, 1, 1), uint32] */;
  %627 = cast(%626, dtype="float32") /* ty=Tensor[(10, 1, 1), float32] */;
  %628 = cast(%626, dtype="uint8") /* ty=Tensor[(10, 1, 1), uint8] */;
  %629 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 14, 10), uint32] */, dtype="uint8") /* ty=Tensor[(10, 14, 10), uint8] */;
  %630 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %631 = @func_2668() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(80, 1), float32], Tensor[(10, ?, ?), int64]) */;
  %632 = @func_2400() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %633 = @func_1397() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %634 = cast(%var_5410, dtype="float64") /* ty=Tensor[(160), float64] */;
  %635 = reshape(%634, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %636 = @func_4519(%635) /* ty=(Tensor[(7, 3, 1), float32], Tensor[(720), float64], Tensor[(160), float64]) */;
  %637 = @func_2668() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(80, 1), float32], Tensor[(10, ?, ?), int64]) */;
  %638 = sqrt(%627) /* ty=Tensor[(10, 1, 1), float32] */;
  %639 = maximum(%628, %629) /* ty=Tensor[(10, 14, 10), uint8] */;
  %640 = %630.0;
  %641 = %631.1;
  %642 = %632.0;
  %643 = %633.0;
  %644 = %636.2;
  %645 = %637.0;
  (%638, %639, %640, %641, %642, %643, %644, %var_5410, %645)
}

def @func_3418() -> (Tensor[(720), float32], Tensor[(15, 1, 7), bool], Tensor[(105), uint32], Tensor[(2, 6, 11), float32], Tensor[(66, 2), float32], Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64]) {
  %646 = @func_3037() /* ty=Tensor[(720), float64] */;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(720), float32] */;
  %648 = cast(meta[relay.Constant][38] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %649 = reshape(%648, newshape=[15, 1, 7]) /* ty=Tensor[(15, 1, 7), uint32] */;
  %650 = cast(meta[relay.Constant][39] /* ty=Tensor[(66, 2), float32] */, dtype="float32") /* ty=Tensor[(66, 2), float32] */;
  %651 = reshape(%650, newshape=[2, 6, 11]) /* ty=Tensor[(2, 6, 11), float32] */;
  %652 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %653 = sin(%647) /* ty=Tensor[(720), float32] */;
  %654 = @func_2361(%649) /* ty=Tensor[(15, 1, 7), bool] */;
  %655 = @func_2838(%651) /* ty=Tensor[(2, 6, 11), float32] */;
  %656 = %652.1;
  %657 = @func_1036() /* ty=Tensor[(10, ?, ?), int64] */;
  (%653, %654, meta[relay.Constant][38] /* ty=Tensor[(105), uint32] */, %655, meta[relay.Constant][39] /* ty=Tensor[(66, 2), float32] */, %656, %657)
}

def @func_3578() -> (Tensor[(105), uint32], Tensor[(1, 10), uint32], Tensor[(1, 390), int64]) {
  %658 = @func_3418() /* ty=(Tensor[(720), float32], Tensor[(15, 1, 7), bool], Tensor[(105), uint32], Tensor[(2, 6, 11), float32], Tensor[(66, 2), float32], Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64]) */;
  %659 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 390), int64] */, dtype="int64") /* ty=Tensor[(1, 390), int64] */;
  %660 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 390), int64] */, dtype="bool") /* ty=Tensor[(1, 390), bool] */;
  %661 = reshape(%659, newshape=[10, 13, 3]) /* ty=Tensor[(10, 13, 3), int64] */;
  %662 = reshape(%660, newshape=[10, 13, 3]) /* ty=Tensor[(10, 13, 3), bool] */;
  %663 = @func_468(%661, %662) /* ty=(Tensor[(1, 10), uint32], Tensor[(10, 13, 3), bool]) */;
  %664 = %658.2;
  %665 = %663.0;
  (%664, %665, meta[relay.Constant][40] /* ty=Tensor[(1, 390), int64] */)
}

def @func_6360() -> (Tensor[(14, 10, 8), float64],) {
  %666 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %667 = %666.0;
  %668 = cast(%667, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
  %669 = erf(%668) /* ty=Tensor[(14, 10, 8), float64] */;
  (%669,)
}

def @func_5718() -> (Tensor[(10, ?, ?), uint16],) {
  %670 = @func_1884() /* ty=(uint32, Tensor[(10, ?, ?), int64]) */;
  %671 = %670.0;
  %672 = @func_1036() /* ty=Tensor[(10, ?, ?), int64] */;
  %673 = cast(%671, dtype="uint16") /* ty=uint16 */;
  %674 = cast(%672, dtype="uint16") /* ty=Tensor[(10, ?, ?), uint16] */;
  %675 = bitwise_xor(%673, %674) /* ty=Tensor[(10, ?, ?), uint16] */;
  (%675,)
}

def @func_1542(%var_1538: Tensor[(770), uint64]) -> (Tensor[(10, ?, ?), int64], Tensor[(13, 39), float32], Tensor[(770), uint64]) {
  %676 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %677 = cast(%var_1538, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %678 = cast(%var_1538, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %679 = reshape(%677, newshape=[14, 11, 5]) /* ty=Tensor[(14, 11, 5), uint64] */;
  %680 = reshape(%678, newshape=[14, 11, 5]) /* ty=Tensor[(14, 11, 5), uint64] */;
  %681 = @func_747(%679, %680) /* ty=(Tensor[(14, 11, 5), uint64], Tensor[(13, 3, 13), float32], Tensor[(13, 39), float32], Tensor[(14, 10, 8), uint64]) */;
  %682 = %676.1;
  %683 = %681.2;
  (%682, %683, %var_1538)
}

def @func_4188(%var_4183: Tensor[(2, 80), float64]) -> (Tensor[(14, 10, 8), uint64], Tensor[(105), uint32], Tensor[(105), uint32], Tensor[(10, ?, ?), bool], Tensor[(2, 80), float64]) {
  %684 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %685 = @func_3578() /* ty=(Tensor[(105), uint32], Tensor[(1, 10), uint32], Tensor[(1, 390), int64]) */;
  %686 = @func_3578() /* ty=(Tensor[(105), uint32], Tensor[(1, 10), uint32], Tensor[(1, 390), int64]) */;
  %687 = cast(%var_4183, dtype="float64") /* ty=Tensor[(2, 80), float64] */;
  %688 = reshape(%687, newshape=[2, 8, 10]) /* ty=Tensor[(2, 8, 10), float64] */;
  %689 = @func_3697(%688) /* ty=(Tensor[(2, 8, 10), float64], uint32, Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), bool]) */;
  %690 = %684.0;
  %691 = %685.0;
  %692 = %686.0;
  %693 = %689.3;
  (%690, %691, %692, %693, %var_4183)
}

def @func_3498(%var_3495: Tensor[(770), uint64]) -> (Tensor[(10, ?, ?), int64], Tensor[(10, 1, 1), uint32], Tensor[(10, 2, 40), bool], Tensor[(770), uint64]) {
  %694 = cast(%var_3495, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %695 = reshape(%694, newshape=[77, 10]) /* ty=Tensor[(77, 10), uint64] */;
  %696 = @func_2892(%695) /* ty=(Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), bool], Tensor[(14, 10, 8), uint64], Tensor[(77, 10), uint64], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), float32]) */;
  %697 = @func_2516() /* ty=Tensor[(10, ?, ?), int64] */;
  %698 = @func_2928() /* ty=Tensor[(10, 1, 1), uint32] */;
  %699 = %696.1;
  (%697, %698, %699, %var_3495)
}

def @func_6251() -> Tensor[(720), float64] {
  @func_4854() /* ty=Tensor[(720), float64] */
}

def @func_4676(%var_4661: Tensor[(16, 13, 1), float32], %var_4662: Tensor[(16, 13, 16), float32]) -> (Tensor[(16, 13, 16), bool],) {
  %700 = cast(%var_4661, dtype="bool") /* ty=Tensor[(16, 13, 1), bool] */;
  %701 = cast(%var_4662, dtype="bool") /* ty=Tensor[(16, 13, 16), bool] */;
  %702 = greater(%700, %701) /* ty=Tensor[(16, 13, 16), bool] */;
  (%702,)
}

def @func_2668() -> (uint32, Tensor[(10, 1, 1), uint32], Tensor[(80, 1), float32], Tensor[(10, ?, ?), int64]) {
  %703 = @func_375() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(1, 10), uint32]) */;
  %704 = cast(meta[relay.Constant][41] /* ty=Tensor[(80, 1), float32] */, dtype="float32") /* ty=Tensor[(80, 1), float32] */;
  %705 = reshape(%704, newshape=[80]) /* ty=Tensor[(80), float32] */;
  %706 = @func_2245(%705) /* ty=(Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(80), float32], Tensor[(10, 1, 1), uint32], uint32) */;
  %707 = %703.0;
  %708 = %706.7;
  %709 = @func_2516() /* ty=Tensor[(10, ?, ?), int64] */;
  (%707, %708, meta[relay.Constant][41] /* ty=Tensor[(80, 1), float32] */, %709)
}

def @func_2588(%var_2570: Tensor[(1430), uint32]) -> (Tensor[(10, ?, ?), int64], Tensor[(10, 11, 13), uint64], Tensor[(1430), uint32]) {
  %710 = cast(%var_2570, dtype="uint32") /* ty=Tensor[(1430), uint32] */;
  %711 = reshape(%710, newshape=[10, 11, 13]) /* ty=Tensor[(10, 11, 13), uint32] */;
  %712 = @func_790(%711) /* ty=(Tensor[(10, 11, 13), uint64],) */;
  %713 = @func_2516() /* ty=Tensor[(10, ?, ?), int64] */;
  %714 = %712.0;
  (%713, %714, %var_2570)
}

def @func_5553() -> (Tensor[(1, 10), uint32], Tensor[(14, 10, 8), uint64]) {
  %715 = @func_375() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(1, 10), uint32]) */;
  %716 = @func_1397() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %717 = %715.2;
  %718 = %716.0;
  (%717, %718)
}

def @func_5854(%var_5846: Tensor[(10, 12, 16), float64]) -> (Tensor[(10, 12, 16), bool], Tensor[(720), float64]) {
  %719 = @func_3761() /* ty=(Tensor[(10, ?, ?), float64],) */;
  %720 = %719.0;
  %721 = cast(%720, dtype="bool") /* ty=Tensor[(10, ?, ?), bool] */;
  %722 = cast(%var_5846, dtype="bool") /* ty=Tensor[(10, 12, 16), bool] */;
  %723 = @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */;
  %724 = logical_or(%721, %722) /* ty=Tensor[(10, 12, 16), bool] */;
  %725 = %723.2;
  (%724, %725)
}

def @func_6427(%var_6385: Tensor[(7, 3, 10), float64]) -> (Tensor[(1, 10), uint32], Tensor[(7, 3, 10), float64]) {
  %726 = @func_5553() /* ty=(Tensor[(1, 10), uint32], Tensor[(14, 10, 8), uint64]) */;
  %727 = @func_4412() /* ty=Tensor[(7, 3, 1), float64] */;
  %728 = cast(%727, dtype="bool") /* ty=Tensor[(7, 3, 1), bool] */;
  %729 = cast(%var_6385, dtype="bool") /* ty=Tensor[(7, 3, 10), bool] */;
  %730 = logical_and(%728, %729) /* ty=Tensor[(7, 3, 10), bool] */;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(7, 3, 10), float64] */;
  %732 = shape_of(%var_6385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%var_6385, dtype="float64") /* ty=Tensor[(7, 3, 10), float64] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %735 = %726.0;
  %736 = maximum(%733, %734) /* ty=Tensor[(7, 3, 10), float64] */;
  (%735, %736)
}

def @func_6648(%var_6595: Tensor[(2, 360), float64]) -> (Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(2, 360), float64]) {
  %737 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %738 = @func_4348() /* ty=(Tensor[(10, ?, ?), int64],) */;
  %739 = cast(%var_6595, dtype="float64") /* ty=Tensor[(2, 360), float64] */;
  %740 = reshape(%739, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), float64] */;
  %741 = @func_1154(%740) /* ty=(Tensor[(12, 4, 15), float64], Tensor[(10, ?, ?), int64]) */;
  %742 = %741.0;
  %743 = cast(%742, dtype="float32") /* ty=Tensor[(12, 4, 15), float32] */;
  %744 = shape_of(%var_6595, dtype="int32") /* ty=Tensor[(2), int32] */;
  %745 = cast(%var_6595, dtype="float32") /* ty=Tensor[(2, 360), float32] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %747 = mod(%745, %746) /* ty=Tensor[(2, 360), float32] */;
  %748 = cast(%747, dtype="float64") /* ty=Tensor[(2, 360), float64] */;
  %749 = cosh(%748) /* ty=Tensor[(2, 360), float64] */;
  %750 = cast(%749, dtype="float64") /* ty=Tensor[(2, 360), float64] */;
  %751 = %737.0;
  %752 = %738.0;
  %753 = atan(%750) /* ty=Tensor[(2, 360), float64] */;
  (%751, %752, %753)
}

def @func_790(%var_779: Tensor[(10, 11, 13), uint32]) -> (Tensor[(10, 11, 13), uint64],) {
  %754 = @func_514() /* ty=Tensor[(10, 1, 1), uint32] */;
  %755 = cast(%754, dtype="uint64") /* ty=Tensor[(10, 1, 1), uint64] */;
  %756 = cast(%var_779, dtype="uint64") /* ty=Tensor[(10, 11, 13), uint64] */;
  %757 = bitwise_and(%755, %756) /* ty=Tensor[(10, 11, 13), uint64] */;
  (%757,)
}

def @func_6058() -> (Tensor[(14, 10, 8), uint64], Tensor[(14, 10, 8), uint64], Tensor[(720), float64]) {
  %758 = @func_4159() /* ty=Tensor[(14, 10, 8), uint64] */;
  %759 = @func_4159() /* ty=Tensor[(14, 10, 8), uint64] */;
  %760 = @func_4902() /* ty=Tensor[(720), float64] */;
  (%758, %759, %760)
}

def @func_6473() -> (Tensor[(7, 3, 1), float64], Tensor[(720), float64]) {
  %761 = @func_4380() /* ty=(Tensor[(7, 3, 1), float64], Tensor[(720), float64]) */;
  %762 = %761.0;
  %763 = cast(%762, dtype="float64") /* ty=Tensor[(7, 3, 1), float64] */;
  %764 = @func_6058() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(14, 10, 8), uint64], Tensor[(720), float64]) */;
  %765 = log2(%763) /* ty=Tensor[(7, 3, 1), float64] */;
  %766 = %764.2;
  (%765, %766)
}

def @func_1154(%var_1141: Tensor[(12, 4, 15), float64]) -> (Tensor[(12, 4, 15), float64], Tensor[(10, ?, ?), int64]) {
  %767 = cast(meta[relay.Constant][42] /* ty=Tensor[(12, 4, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 4, 15), float64] */;
  %768 = shape_of(%var_1141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%var_1141, dtype="float64") /* ty=Tensor[(12, 4, 15), float64] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %771 = floor_divide(%769, %770) /* ty=Tensor[(12, 4, 15), float64] */;
  %772 = @func_1036() /* ty=Tensor[(10, ?, ?), int64] */;
  (%771, %772)
}

def @func_925(%var_920: Tensor[(10, 8, 1), float32]) -> (Tensor[(10, 1, 1), uint32], uint32, Tensor[(10, ?, ?), int64], uint32, Tensor[(10, 8, 1), uint16]) {
  %773 = cast(meta[relay.Constant][43] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %774 = @func_514() /* ty=Tensor[(10, 1, 1), uint32] */;
  %775 = cast(%774, dtype="float32") /* ty=Tensor[(10, 1, 1), float32] */;
  %776 = rsqrt(%775) /* ty=Tensor[(10, 1, 1), float32] */;
  %777 = cast(%776, dtype="uint32") /* ty=Tensor[(10, 1, 1), uint32] */;
  %778 = reshape(%773, newshape=[]) /* ty=uint32 */;
  %779 = reshape(%777, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), uint32] */;
  %780 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %781 = cast(%776, dtype="uint16") /* ty=Tensor[(10, 1, 1), uint16] */;
  %782 = cast(%var_920, dtype="uint16") /* ty=Tensor[(10, 8, 1), uint16] */;
  %783 = @func_82(%778, %779) /* ty=Tensor[(10, 1, 1), uint32] */;
  %784 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
  %785 = %780.0;
  %786 = bitwise_or(%781, %782) /* ty=Tensor[(10, 8, 1), uint16] */;
  (%783, meta[relay.Constant][43] /* ty=uint32 */, %784, %785, %786)
}

def @func_2928() -> Tensor[(10, 1, 1), uint32] {
  @func_514() /* ty=Tensor[(10, 1, 1), uint32] */
}

def @func_1858(%var_1839: Tensor[(84), int16]) -> (Tensor[(10, ?, ?), int64], Tensor[(6, 1, 14), int64], int16, Tensor[(84), int16], Tensor[(10, 1, 1), uint32]) {
  %787 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %788 = cast(meta[relay.Constant][44] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %789 = cast(%var_1839, dtype="int16") /* ty=Tensor[(84), int16] */;
  %790 = reshape(%788, newshape=[]) /* ty=int16 */;
  %791 = reshape(%789, newshape=[6, 1, 14]) /* ty=Tensor[(6, 1, 14), int16] */;
  %792 = @func_1503(%790, %791) /* ty=(Tensor[(6, 1, 14), int16], Tensor[(6, 1, 14), int64]) */;
  %793 = %787.2;
  %794 = %792.1;
  %795 = @func_514() /* ty=Tensor[(10, 1, 1), uint32] */;
  (%793, %794, meta[relay.Constant][44] /* ty=int16 */, %var_1839, %795)
}

def @func_3829(%var_3827: Tensor[(160), float64]) -> (Tensor[(14, 9, 6), bool], Tensor[(2, 8, 10), float64], Tensor[(160), float64]) {
  %796 = @func_2066() /* ty=(uint32, Tensor[(14, 10, 8), uint64]) */;
  %797 = %796.0;
  %798 = cast(%797, dtype="bool") /* ty=bool */;
  %799 = cast(meta[relay.Constant][45] /* ty=Tensor[(14, 9, 6), uint32] */, dtype="bool") /* ty=Tensor[(14, 9, 6), bool] */;
  %800 = cast(%var_3827, dtype="float64") /* ty=Tensor[(160), float64] */;
  %801 = reshape(%800, newshape=[2, 8, 10]) /* ty=Tensor[(2, 8, 10), float64] */;
  %802 = @func_3697(%801) /* ty=(Tensor[(2, 8, 10), float64], uint32, Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), bool]) */;
  %803 = less(%798, %799) /* ty=Tensor[(14, 9, 6), bool] */;
  %804 = %802.0;
  (%803, %804, %var_3827)
}

def @func_1801(%var_1753: Tensor[(6, 7, 3), float32]) -> (Tensor[(6, 7, 3), float32], Tensor[(10, 1, 1), uint32]) {
  %805 = cast(%var_1753, dtype="float32") /* ty=Tensor[(6, 7, 3), float32] */;
  %806 = atan(%805) /* ty=Tensor[(6, 7, 3), float32] */;
  %807 = @func_514() /* ty=Tensor[(10, 1, 1), uint32] */;
  (%806, %807)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3606(%var_3598: Tensor[(770), uint64]) -> (Tensor[(12, 4, 15), float64], Tensor[(10, 1, 1), uint32], Tensor[(10, ?, ?), int64], Tensor[(770), uint64]) {
  %0 = @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */;
  %1 = cast(%var_3598, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %2 = reshape(%1, newshape=[770]) /* ty=Tensor[(770), uint64] */;
  %3 = @func_3498(%2) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, 1, 1), uint32], Tensor[(10, 2, 40), bool], Tensor[(770), uint64]) */;
  %4 = %0.1;
  %5 = @func_514() /* ty=Tensor[(10, 1, 1), uint32] */;
  %6 = %3.0;
  (%4, %5, %6, %var_3598)
}

def @func_4022() -> (Tensor[(14, 10, 8), uint64], Tensor[(6, 1, 14), int64], Tensor[(84), int16], Tensor[(10, ?, ?), uint32], Tensor[(8, 13, 3), uint8], Tensor[(8, 13, 3), float64]) {
  %40 = fn () -> (Tensor[(14, 10, 8), uint64], Tensor[(6, 1, 14), int64], Tensor[(84), int16], Tensor[(10, ?, ?), uint32], Tensor[(8, 13, 3), uint8], Tensor[(8, 13, 3), float64]) {
    %7 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %8 = cast(meta[relay.Constant][0] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(84), int16] */, dtype="int16") /* ty=Tensor[(84), int16] */;
    %10 = reshape(%8, newshape=[]) /* ty=int16 */;
    %11 = reshape(%9, newshape=[6, 1, 14]) /* ty=Tensor[(6, 1, 14), int16] */;
    %12 = @func_1503(%10, %11) /* ty=(Tensor[(6, 1, 14), int16], Tensor[(6, 1, 14), int64]) */;
    %13 = @func_2965() /* ty=(Tensor[(10, ?, ?), int64],) */;
    %14 = %13.0;
    %15 = cast(%14, dtype="uint32") /* ty=Tensor[(10, ?, ?), uint32] */;
    %16 = cast(meta[relay.Constant][0] /* ty=int16 */, dtype="uint32") /* ty=uint32 */;
    %17 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 13, 3), bool] */, dtype="uint8") /* ty=Tensor[(8, 13, 3), uint8] */;
    %18 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(8, 13, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 13, 3), bool] */, dtype="uint8") /* ty=Tensor[(8, 13, 3), uint8] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %21 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 13, 3), bool] */, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
    %22 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(8, 13, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 13, 3), bool] */, dtype="bool") /* ty=Tensor[(8, 13, 3), bool] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %25 = logical_and(%23, %24) /* ty=Tensor[(8, 13, 3), bool] */;
    %26 = cast(%25, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
    %27 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(8, 13, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 13, 3), bool] */, dtype="float32") /* ty=Tensor[(8, 13, 3), float32] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %30 = divide(%28, %29) /* ty=Tensor[(8, 13, 3), float32] */;
    %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 13, 3), bool] */, dtype="float64") /* ty=Tensor[(8, 13, 3), float64] */;
    %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
    %33 = cast(%30, dtype="float64") /* ty=Tensor[(8, 13, 3), float64] */;
    %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %35 = %7.1;
    %36 = %12.1;
    %37 = minimum(%15, %16) /* ty=Tensor[(10, ?, ?), uint32] */;
    %38 = logical_xor(%19, %20) /* ty=Tensor[(8, 13, 3), uint8] */;
    %39 = floor_divide(%33, %34) /* ty=Tensor[(8, 13, 3), float64] */;
    (%35, %36, meta[relay.Constant][1] /* ty=Tensor[(84), int16] */, %37, %38, %39)
  };
  %40() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(6, 1, 14), int64], Tensor[(84), int16], Tensor[(10, ?, ?), uint32], Tensor[(8, 13, 3), uint8], Tensor[(8, 13, 3), float64]) */
}

def @func_4936(%var_4934: Tensor[(6, 3, 9), float64], %var_4935: Tensor[(6, 3, 9), float64]) -> (Tensor[(6, 3, 9), float64], Tensor[(6, 3, 9), bool]) {
  %48 = fn (%var_4925: Tensor[(6, 3, 9), float64], %var_4929: Tensor[(6, 3, 9), float64]) -> (Tensor[(6, 3, 9), float64], Tensor[(6, 3, 9), bool]) {
    %41 = cast(%var_4925, dtype="float64") /* ty=Tensor[(6, 3, 9), float64] */;
    %42 = cast(%var_4929, dtype="bool") /* ty=Tensor[(6, 3, 9), bool] */;
    %43 = shape_of(%var_4925, dtype="int32") /* ty=Tensor[(3), int32] */;
    %44 = cast(%var_4925, dtype="bool") /* ty=Tensor[(6, 3, 9), bool] */;
    %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %46 = sqrt(%41) /* ty=Tensor[(6, 3, 9), float64] */;
    %47 = logical_and(%44, %45) /* ty=Tensor[(6, 3, 9), bool] */;
    (%46, %47)
  };
  %48(%var_4934, %var_4935) /* ty=(Tensor[(6, 3, 9), float64], Tensor[(6, 3, 9), bool]) */
}

def @func_315() -> Tensor[(10, ?, ?), int64] {
  @func_313() /* ty=Tensor[(10, ?, ?), int64] */
}

def @func_5430(%var_5428: Tensor[(160), float64]) -> (Tensor[(10, 1, 1), float32], Tensor[(10, 14, 10), uint8], Tensor[(14, 10, 8), uint64], Tensor[(10, 1, 1), uint32], Tensor[(14, 10, 8), uint64], Tensor[(14, 10, 8), uint64], Tensor[(160), float64], Tensor[(160), float64], uint32) {
  @func_5427(%var_5428) /* ty=(Tensor[(10, 1, 1), float32], Tensor[(10, 14, 10), uint8], Tensor[(14, 10, 8), uint64], Tensor[(10, 1, 1), uint32], Tensor[(14, 10, 8), uint64], Tensor[(14, 10, 8), uint64], Tensor[(160), float64], Tensor[(160), float64], uint32) */
}

def @func_3349(%var_3335: Tensor[(6, 16, 10), uint32], %var_3336: Tensor[(6, 16, 10), uint32]) -> Tensor[(6, 16, 10), bool] {
  %49 = cast(%var_3336, dtype="bool") /* ty=Tensor[(6, 16, 10), bool] */;
  %50 = shape_of(%var_3335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%var_3335, dtype="bool") /* ty=Tensor[(6, 16, 10), bool] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%51, %52) /* ty=Tensor[(6, 16, 10), bool] */
}

def @func_82(%var_76: uint32, %var_77: Tensor[(10, 1, 1), uint32]) -> Tensor[(10, 1, 1), uint32] {
  %53 = cast(%var_76, dtype="uint32") /* ty=uint32 */;
  %54 = cast(%var_77, dtype="uint32") /* ty=Tensor[(10, 1, 1), uint32] */;
  right_shift(%53, %54) /* ty=Tensor[(10, 1, 1), uint32] */
}

def @func_2066() -> (uint32, Tensor[(14, 10, 8), uint64]) {
  %55 = @func_1884() /* ty=(uint32, Tensor[(10, ?, ?), int64]) */;
  %56 = @func_1397() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %57 = %55.0;
  %58 = %56.0;
  (%57, %58)
}

def @func_6360() -> (Tensor[(14, 10, 8), float64],) {
  %59 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %60 = %59.0;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
  %62 = erf(%61) /* ty=Tensor[(14, 10, 8), float64] */;
  (%62,)
}

def @func_5950(%var_5948: Tensor[(7, 1, 6), int32], %var_5949: Tensor[(5, 2), uint32]) -> (Tensor[(7, 1, 6), int32], Tensor[(7, 1, 6), float64], Tensor[(15, 1, 7), bool], Tensor[(84), bool], Tensor[(4, 40), float64], Tensor[(160), float64], Tensor[(7, ?, 6), int8], Tensor[(10, 1, 1), uint32], Tensor[(5, 2), uint32]) {
  %93 = fn (%var_5871: Tensor[(7, 1, 6), int32], %var_5945: Tensor[(5, 2), uint32]) -> (Tensor[(7, 1, 6), int32], Tensor[(7, 1, 6), float64], Tensor[(15, 1, 7), bool], Tensor[(84), bool], Tensor[(4, 40), float64], Tensor[(160), float64], Tensor[(7, ?, 6), int8], Tensor[(10, 1, 1), uint32], Tensor[(5, 2), uint32]) {
    %63 = cast(3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %64 = cast(%var_5871, dtype="int32") /* ty=Tensor[(7, 1, 6), int32] */;
    %65 = cast(%var_5871, dtype="float64") /* ty=Tensor[(7, 1, 6), float64] */;
    %66 = cast(3 /* ty=int32 */, dtype="float64") /* ty=float64 */;
    %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
    %68 = cast(meta[relay.Constant][5] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
    %69 = cast(meta[relay.Constant][5] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
    %70 = reshape(%67, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), bool] */;
    %71 = reshape(%68, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), bool] */;
    %72 = reshape(%69, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), bool] */;
    %73 = @func_4745(%70, %71, %72) /* ty=(Tensor[(3, 14, 2), uint16], Tensor[(15, 1, 7), bool]) */;
    %74 = cast(meta[relay.Constant][6] /* ty=Tensor[(160), float64] */, dtype="float64") /* ty=Tensor[(160), float64] */;
    %75 = reshape(%74, newshape=[4, 40]) /* ty=Tensor[(4, 40), float64] */;
    %76 = @func_3738(%75) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(4, 40), float64], Tensor[(14, 10, 8), bool], Tensor[(10, ?, ?), float64]) */;
    %77 = cast(%var_5871, dtype="float32") /* ty=Tensor[(7, 1, 6), float32] */;
    %78 = sqrt(%77) /* ty=Tensor[(7, 1, 6), float32] */;
    %79 = cast(%var_5871, dtype="int8") /* ty=Tensor[(7, 1, 6), int8] */;
    %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
    %81 = cast(%78, dtype="int8") /* ty=Tensor[(7, 1, 6), int8] */;
    %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %83 = cast(3 /* ty=int32 */, dtype="uint32") /* ty=uint32 */;
    %84 = cast(%var_5945, dtype="uint32") /* ty=Tensor[(5, 2), uint32] */;
    %85 = reshape(%83, newshape=[]) /* ty=uint32 */;
    %86 = reshape(%84, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), uint32] */;
    %87 = left_shift(%63, %64) /* ty=Tensor[(7, 1, 6), int32] */;
    %88 = mod(%65, %66) /* ty=Tensor[(7, 1, 6), float64] */;
    %89 = %73.1;
    %90 = %76.1;
    %91 = bitwise_and(%81, %82) /* ty=Tensor[(7, ?, 6), int8] */;
    %92 = @func_82(%85, %86) /* ty=Tensor[(10, 1, 1), uint32] */;
    (%87, %88, %89, meta[relay.Constant][5] /* ty=Tensor[(84), bool] */, %90, meta[relay.Constant][6] /* ty=Tensor[(160), float64] */, %91, %92, %var_5945)
  };
  %93(%var_5948, %var_5949) /* ty=(Tensor[(7, 1, 6), int32], Tensor[(7, 1, 6), float64], Tensor[(15, 1, 7), bool], Tensor[(84), bool], Tensor[(4, 40), float64], Tensor[(160), float64], Tensor[(7, ?, 6), int8], Tensor[(10, 1, 1), uint32], Tensor[(5, 2), uint32]) */
}

def @func_2402() -> (Tensor[(14, 10, 8), uint64],) {
  @func_2400() /* ty=(Tensor[(14, 10, 8), uint64],) */
}

def @func_4768() -> (Tensor[(10, ?, ?), int64], Tensor[(80, 1), float64]) {
  %99 = fn () -> (Tensor[(10, ?, ?), int64], Tensor[(80, 1), float64]) {
    %94 = @func_2668() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(80, 1), float32], Tensor[(10, ?, ?), int64]) */;
    %95 = %94.2;
    %96 = cast(%95, dtype="float64") /* ty=Tensor[(80, 1), float64] */;
    %97 = @func_2386() /* ty=Tensor[(10, ?, ?), int64] */;
    %98 = acosh(%96) /* ty=Tensor[(80, 1), float64] */;
    (%97, %98)
  };
  %99() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(80, 1), float64]) */
}

def @func_6532() -> (Tensor[(14, 10, 8), bool], Tensor[(14, 10, 8), uint64]) {
  %108 = fn () -> (Tensor[(14, 10, 8), bool], Tensor[(14, 10, 8), uint64]) {
    %100 = @func_6360() /* ty=(Tensor[(14, 10, 8), float64],) */;
    %101 = %100.0;
    %102 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 10, 8), float64] */, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
    %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
    %104 = cast(%101, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
    %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %106 = less(%104, %105) /* ty=Tensor[(14, 10, 8), bool] */;
    %107 = @func_4159() /* ty=Tensor[(14, 10, 8), uint64] */;
    (%106, %107)
  };
  %108() /* ty=(Tensor[(14, 10, 8), bool], Tensor[(14, 10, 8), uint64]) */
}

def @func_2247(%var_2246: Tensor[(80), float32]) -> (Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(80), float32], Tensor[(10, 1, 1), uint32], uint32) {
  %137 = fn (%var_2231: Tensor[(80), float32]) -> (Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(80), float32], Tensor[(10, 1, 1), uint32], uint32) {
    %109 = cast(meta[relay.Constant][8] /* ty=Tensor[(240), uint8] */, dtype="uint8") /* ty=Tensor[(240), uint8] */;
    %110 = cast(meta[relay.Constant][8] /* ty=Tensor[(240), uint8] */, dtype="uint8") /* ty=Tensor[(240), uint8] */;
    %111 = cast(meta[relay.Constant][8] /* ty=Tensor[(240), uint8] */, dtype="uint8") /* ty=Tensor[(240), uint8] */;
    %112 = reshape(%109, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), uint8] */;
    %113 = reshape(%110, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), uint8] */;
    %114 = reshape(%111, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), uint8] */;
    %115 = @func_1228(%112, %113, %114) /* ty=(Tensor[(8, 2, 15), uint8], Tensor[(8, 2, 15), uint32], Tensor[(14, 10, 8), float32], Tensor[(10, 11, 3), int16]) */;
    %116 = @func_1397() /* ty=(Tensor[(14, 10, 8), uint64],) */;
    %117 = @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */;
    %118 = %117.2;
    %119 = @func_1884() /* ty=(uint32, Tensor[(10, ?, ?), int64]) */;
    %120 = %119.1;
    %121 = cast(%118, dtype="uint16") /* ty=Tensor[(720), uint16] */;
    %122 = cast(%120, dtype="uint16") /* ty=Tensor[(10, ?, ?), uint16] */;
    %123 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %124 = cast(%var_2231, dtype="float32") /* ty=Tensor[(80), float32] */;
    %125 = reshape(%124, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float32] */;
    %126 = @func_925(%125) /* ty=(Tensor[(10, 1, 1), uint32], uint32, Tensor[(10, ?, ?), int64], uint32, Tensor[(10, 8, 1), uint16]) */;
    %127 = cast(meta[relay.Constant][9] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %128 = %126.2;
    %129 = cast(%128, dtype="uint32") /* ty=Tensor[(10, ?, ?), uint32] */;
    %130 = reshape(%127, newshape=[]) /* ty=uint32 */;
    %131 = reshape(%129, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), uint32] */;
    %132 = %115.0;
    %133 = %116.0;
    %134 = maximum(%121, %122) /* ty=Tensor[(10, ?, 720), uint16] */;
    %135 = %123.0;
    %136 = @func_82(%130, %131) /* ty=Tensor[(10, 1, 1), uint32] */;
    (%132, meta[relay.Constant][8] /* ty=Tensor[(240), uint8] */, %133, %134, %135, %128, %var_2231, %136, meta[relay.Constant][9] /* ty=uint32 */)
  };
  %137(%var_2246) /* ty=(Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(80), float32], Tensor[(10, 1, 1), uint32], uint32) */
}

def @func_183(%var_182: Tensor[(13, 3, 13), float32]) -> Tensor[(13, 3, 13), float32] {
  %139 = fn (%var_176: Tensor[(13, 3, 13), float32]) -> Tensor[(13, 3, 13), float32] {
    %138 = cast(%var_176, dtype="float32") /* ty=Tensor[(13, 3, 13), float32] */;
    sigmoid(%138) /* ty=Tensor[(13, 3, 13), float32] */
  };
  %139(%var_182) /* ty=Tensor[(13, 3, 13), float32] */
}

def @func_1885() -> (uint32, Tensor[(10, ?, ?), int64]) {
  %143 = fn () -> (uint32, Tensor[(10, ?, ?), int64]) {
    %140 = @func_375() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(1, 10), uint32]) */;
    %141 = %140.0;
    %142 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
    (%141, %142)
  };
  %143() /* ty=(uint32, Tensor[(10, ?, ?), int64]) */
}

def @func_4188(%var_4183: Tensor[(2, 80), float64]) -> (Tensor[(14, 10, 8), uint64], Tensor[(105), uint32], Tensor[(105), uint32], Tensor[(10, ?, ?), bool], Tensor[(2, 80), float64]) {
  %144 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %145 = @func_3578() /* ty=(Tensor[(105), uint32], Tensor[(1, 10), uint32], Tensor[(1, 390), int64]) */;
  %146 = @func_3578() /* ty=(Tensor[(105), uint32], Tensor[(1, 10), uint32], Tensor[(1, 390), int64]) */;
  %147 = cast(%var_4183, dtype="float64") /* ty=Tensor[(2, 80), float64] */;
  %148 = reshape(%147, newshape=[2, 8, 10]) /* ty=Tensor[(2, 8, 10), float64] */;
  %149 = @func_3697(%148) /* ty=(Tensor[(2, 8, 10), float64], uint32, Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), bool]) */;
  %150 = %144.0;
  %151 = %145.0;
  %152 = %146.0;
  %153 = %149.3;
  (%150, %151, %152, %153, %var_4183)
}

def @func_4904() -> Tensor[(720), float64] {
  @func_4902() /* ty=Tensor[(720), float64] */
}

def @func_1929() -> (Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) {
  %154 = cast(meta[relay.Constant][10] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %155 = reshape(%154, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), float64] */;
  %156 = @func_1154(%155) /* ty=(Tensor[(12, 4, 15), float64], Tensor[(10, ?, ?), int64]) */;
  %157 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
  %158 = %156.0;
  (%157, %158, meta[relay.Constant][10] /* ty=Tensor[(720), float64] */)
}

def @func_86(%var_84: uint32, %var_85: Tensor[(10, 1, 1), uint32]) -> Tensor[(10, 1, 1), uint32] {
  @func_82(%var_84, %var_85) /* ty=Tensor[(10, 1, 1), uint32] */
}

def @func_5623(%var_5621: uint32) -> (Tensor[(720), float64], Tensor[(720), float64], Tensor[(10, 1, 1), float32], uint32) {
  @func_5620(%var_5621) /* ty=(Tensor[(720), float64], Tensor[(720), float64], Tensor[(10, 1, 1), float32], uint32) */
}

def @func_515() -> Tensor[(10, 1, 1), uint32] {
  %160 = fn () -> Tensor[(10, 1, 1), uint32] {
    %159 = @func_375() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(1, 10), uint32]) */;
    %159.1
  };
  %160() /* ty=Tensor[(10, 1, 1), uint32] */
}

def @func_4856() -> Tensor[(720), float64] {
  @func_4854() /* ty=Tensor[(720), float64] */
}

def @func_3699(%var_3698: Tensor[(2, 8, 10), float64]) -> (Tensor[(2, 8, 10), float64], uint32, Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), bool]) {
  %179 = fn (%var_3637: Tensor[(2, 8, 10), float64]) -> (Tensor[(2, 8, 10), float64], uint32, Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), bool]) {
    %161 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 8, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 8, 10), float64] */;
    %162 = shape_of(%var_3637, dtype="int32") /* ty=Tensor[(3), int32] */;
    %163 = cast(%var_3637, dtype="float64") /* ty=Tensor[(2, 8, 10), float64] */;
    %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %165 = @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */;
    %166 = cast(meta[relay.Constant][12] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %167 = reshape(%166, newshape=[]) /* ty=uint32 */;
    %168 = @func_2949(%167) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, 1, 1), float32], Tensor[(10, 1, 1), uint32], uint32) */;
    %169 = %168.2;
    %170 = cast(%169, dtype="float64") /* ty=Tensor[(10, 1, 1), float64] */;
    %171 = sin(%170) /* ty=Tensor[(10, 1, 1), float64] */;
    %172 = cast(%169, dtype="bool") /* ty=Tensor[(10, 1, 1), bool] */;
    %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
    %174 = cast(%171, dtype="bool") /* ty=Tensor[(10, 1, 1), bool] */;
    %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %176 = maximum(%163, %164) /* ty=Tensor[(2, 8, 10), float64] */;
    %177 = %165.0;
    %178 = less_equal(%174, %175) /* ty=Tensor[(10, ?, ?), bool] */;
    (%176, meta[relay.Constant][12] /* ty=uint32 */, %177, %178)
  };
  %179(%var_3698) /* ty=(Tensor[(2, 8, 10), float64], uint32, Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), bool]) */
}

def @func_6344() -> (Tensor[(10, 3, 1), uint16],) {
  %184 = fn () -> (Tensor[(10, 3, 1), uint16],) {
    %180 = @func_2487() /* ty=Tensor[(10, 1, 1), uint32] */;
    %181 = cast(%180, dtype="uint16") /* ty=Tensor[(10, 1, 1), uint16] */;
    %182 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 3, 1), uint32] */, dtype="uint16") /* ty=Tensor[(10, 3, 1), uint16] */;
    %183 = minimum(%181, %182) /* ty=Tensor[(10, 3, 1), uint16] */;
    (%183,)
  };
  %184() /* ty=(Tensor[(10, 3, 1), uint16],) */
}

def @func_3579() -> (Tensor[(105), uint32], Tensor[(1, 10), uint32], Tensor[(1, 390), int64]) {
  %193 = fn () -> (Tensor[(105), uint32], Tensor[(1, 10), uint32], Tensor[(1, 390), int64]) {
    %185 = @func_3418() /* ty=(Tensor[(720), float32], Tensor[(15, 1, 7), bool], Tensor[(105), uint32], Tensor[(2, 6, 11), float32], Tensor[(66, 2), float32], Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64]) */;
    %186 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 390), int64] */, dtype="int64") /* ty=Tensor[(1, 390), int64] */;
    %187 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 390), int64] */, dtype="bool") /* ty=Tensor[(1, 390), bool] */;
    %188 = reshape(%186, newshape=[10, 13, 3]) /* ty=Tensor[(10, 13, 3), int64] */;
    %189 = reshape(%187, newshape=[10, 13, 3]) /* ty=Tensor[(10, 13, 3), bool] */;
    %190 = @func_468(%188, %189) /* ty=(Tensor[(1, 10), uint32], Tensor[(10, 13, 3), bool]) */;
    %191 = %185.2;
    %192 = %190.0;
    (%191, %192, meta[relay.Constant][14] /* ty=Tensor[(1, 390), int64] */)
  };
  %193() /* ty=(Tensor[(105), uint32], Tensor[(1, 10), uint32], Tensor[(1, 390), int64]) */
}

def @func_2400() -> (Tensor[(14, 10, 8), uint64],) {
  %194 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %195 = %194.0;
  (%195,)
}

def @func_6059() -> (Tensor[(14, 10, 8), uint64], Tensor[(14, 10, 8), uint64], Tensor[(720), float64]) {
  %199 = fn () -> (Tensor[(14, 10, 8), uint64], Tensor[(14, 10, 8), uint64], Tensor[(720), float64]) {
    %196 = @func_4159() /* ty=Tensor[(14, 10, 8), uint64] */;
    %197 = @func_4159() /* ty=Tensor[(14, 10, 8), uint64] */;
    %198 = @func_4902() /* ty=Tensor[(720), float64] */;
    (%196, %197, %198)
  };
  %199() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(14, 10, 8), uint64], Tensor[(720), float64]) */
}

def @func_2591(%var_2589: Tensor[(1430), uint32]) -> (Tensor[(10, ?, ?), int64], Tensor[(10, 11, 13), uint64], Tensor[(1430), uint32]) {
  @func_2588(%var_2589) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, 11, 13), uint64], Tensor[(1430), uint32]) */
}

def @func_6135(%var_6131: Tensor[(80), float32], %var_6132: Tensor[(160), float64], %var_6133: Tensor[(208), float32], %var_6134: Tensor[(3328), float32]) -> (Tensor[(720), float64], uint32, Tensor[(960), uint32], Tensor[(80), float32], Tensor[(14, 9, 6), bool], Tensor[(160), float64], Tensor[(15, 1, 7), bool], Tensor[(105), uint32], Tensor[(16, 13, 16), bool], Tensor[(208), float32], Tensor[(3328), float32], Tensor[(720), float64]) {
  @func_6129(%var_6131, %var_6132, %var_6133, %var_6134) /* ty=(Tensor[(720), float64], uint32, Tensor[(960), uint32], Tensor[(80), float32], Tensor[(14, 9, 6), bool], Tensor[(160), float64], Tensor[(15, 1, 7), bool], Tensor[(105), uint32], Tensor[(16, 13, 16), bool], Tensor[(208), float32], Tensor[(3328), float32], Tensor[(720), float64]) */
}

def @func_6427(%var_6385: Tensor[(7, 3, 10), float64]) -> (Tensor[(1, 10), uint32], Tensor[(7, 3, 10), float64]) {
  %200 = @func_5553() /* ty=(Tensor[(1, 10), uint32], Tensor[(14, 10, 8), uint64]) */;
  %201 = @func_4412() /* ty=Tensor[(7, 3, 1), float64] */;
  %202 = cast(%201, dtype="bool") /* ty=Tensor[(7, 3, 1), bool] */;
  %203 = cast(%var_6385, dtype="bool") /* ty=Tensor[(7, 3, 10), bool] */;
  %204 = logical_and(%202, %203) /* ty=Tensor[(7, 3, 10), bool] */;
  %205 = cast(%204, dtype="float64") /* ty=Tensor[(7, 3, 10), float64] */;
  %206 = shape_of(%var_6385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%var_6385, dtype="float64") /* ty=Tensor[(7, 3, 10), float64] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %209 = %200.0;
  %210 = maximum(%207, %208) /* ty=Tensor[(7, 3, 10), float64] */;
  (%209, %210)
}

def @func_4414() -> Tensor[(7, 3, 1), float64] {
  @func_4412() /* ty=Tensor[(7, 3, 1), float64] */
}

def @func_5995() -> (Tensor[(720), float64],) {
  @func_5993() /* ty=(Tensor[(720), float64],) */
}

def @func_2588(%var_2570: Tensor[(1430), uint32]) -> (Tensor[(10, ?, ?), int64], Tensor[(10, 11, 13), uint64], Tensor[(1430), uint32]) {
  %211 = cast(%var_2570, dtype="uint32") /* ty=Tensor[(1430), uint32] */;
  %212 = reshape(%211, newshape=[10, 11, 13]) /* ty=Tensor[(10, 11, 13), uint32] */;
  %213 = @func_790(%212) /* ty=(Tensor[(10, 11, 13), uint64],) */;
  %214 = @func_2516() /* ty=Tensor[(10, ?, ?), int64] */;
  %215 = %213.0;
  (%214, %215, %var_2570)
}

def @func_3609(%var_3607: Tensor[(770), uint64]) -> (Tensor[(12, 4, 15), float64], Tensor[(10, 1, 1), uint32], Tensor[(10, ?, ?), int64], Tensor[(770), uint64]) {
  @func_3606(%var_3607) /* ty=(Tensor[(12, 4, 15), float64], Tensor[(10, 1, 1), uint32], Tensor[(10, ?, ?), int64], Tensor[(770), uint64]) */
}

def @func_4611() -> Tensor[(10, ?, ?), int64] {
  %217 = fn () -> Tensor[(10, ?, ?), int64] {
    %216 = @func_3568() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) */;
    %216.0
  };
  %217() /* ty=Tensor[(10, ?, ?), int64] */
}

def @func_2952(%var_2950: uint32) -> (Tensor[(10, ?, ?), int64], Tensor[(10, 1, 1), float32], Tensor[(10, 1, 1), uint32], uint32) {
  @func_2949(%var_2950) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, 1, 1), float32], Tensor[(10, 1, 1), uint32], uint32) */
}

def @func_6430(%var_6428: Tensor[(7, 3, 10), float64]) -> (Tensor[(1, 10), uint32], Tensor[(7, 3, 10), float64]) {
  @func_6427(%var_6428) /* ty=(Tensor[(1, 10), uint32], Tensor[(7, 3, 10), float64]) */
}

def @func_3933(%var_3931: Tensor[(2, 1, 2), float32]) -> (Tensor[(2, 1, 2), float32],) {
  @func_3930(%var_3931) /* ty=(Tensor[(2, 1, 2), float32],) */
}

def @func_1544(%var_1543: Tensor[(770), uint64]) -> (Tensor[(10, ?, ?), int64], Tensor[(13, 39), float32], Tensor[(770), uint64]) {
  %226 = fn (%var_1538: Tensor[(770), uint64]) -> (Tensor[(10, ?, ?), int64], Tensor[(13, 39), float32], Tensor[(770), uint64]) {
    %218 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %219 = cast(%var_1538, dtype="uint64") /* ty=Tensor[(770), uint64] */;
    %220 = cast(%var_1538, dtype="uint64") /* ty=Tensor[(770), uint64] */;
    %221 = reshape(%219, newshape=[14, 11, 5]) /* ty=Tensor[(14, 11, 5), uint64] */;
    %222 = reshape(%220, newshape=[14, 11, 5]) /* ty=Tensor[(14, 11, 5), uint64] */;
    %223 = @func_747(%221, %222) /* ty=(Tensor[(14, 11, 5), uint64], Tensor[(13, 3, 13), float32], Tensor[(13, 39), float32], Tensor[(14, 10, 8), uint64]) */;
    %224 = %218.1;
    %225 = %223.2;
    (%224, %225, %var_1538)
  };
  %226(%var_1543) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(13, 39), float32], Tensor[(770), uint64]) */
}

def @func_4243() -> Tensor[(10, 1, 1), uint32] {
  @func_1712() /* ty=Tensor[(10, 1, 1), uint32] */
}

def @func_471(%var_469: Tensor[(10, 13, 3), int64], %var_470: Tensor[(10, 13, 3), bool]) -> (Tensor[(1, 10), uint32], Tensor[(10, 13, 3), bool]) {
  %239 = fn (%var_431: Tensor[(10, 13, 3), int64], %var_445: Tensor[(10, 13, 3), bool]) -> (Tensor[(1, 10), uint32], Tensor[(10, 13, 3), bool]) {
    %227 = @func_375() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(1, 10), uint32]) */;
    %228 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %229 = %228.2;
    %230 = cast(%229, dtype="bool") /* ty=Tensor[(10, ?, ?), bool] */;
    %231 = cast(%var_431, dtype="bool") /* ty=Tensor[(10, 13, 3), bool] */;
    %232 = less_equal(%230, %231) /* ty=Tensor[(10, 13, 3), bool] */;
    %233 = cast(%var_445, dtype="bool") /* ty=Tensor[(10, 13, 3), bool] */;
    %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
    %235 = cast(%232, dtype="bool") /* ty=Tensor[(10, 13, 3), bool] */;
    %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %237 = %227.2;
    %238 = greater_equal(%235, %236) /* ty=Tensor[(10, 13, 3), bool] */;
    (%237, %238)
  };
  %239(%var_469, %var_470) /* ty=(Tensor[(1, 10), uint32], Tensor[(10, 13, 3), bool]) */
}

def @func_5719() -> (Tensor[(10, ?, ?), uint16],) {
  %246 = fn () -> (Tensor[(10, ?, ?), uint16],) {
    %240 = @func_1884() /* ty=(uint32, Tensor[(10, ?, ?), int64]) */;
    %241 = %240.0;
    %242 = @func_1036() /* ty=Tensor[(10, ?, ?), int64] */;
    %243 = cast(%241, dtype="uint16") /* ty=uint16 */;
    %244 = cast(%242, dtype="uint16") /* ty=Tensor[(10, ?, ?), uint16] */;
    %245 = bitwise_xor(%243, %244) /* ty=Tensor[(10, ?, ?), uint16] */;
    (%245,)
  };
  %246() /* ty=(Tensor[(10, ?, ?), uint16],) */
}

def @func_6648(%var_6595: Tensor[(2, 360), float64]) -> (Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(2, 360), float64]) {
  %247 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %248 = @func_4348() /* ty=(Tensor[(10, ?, ?), int64],) */;
  %249 = cast(%var_6595, dtype="float64") /* ty=Tensor[(2, 360), float64] */;
  %250 = reshape(%249, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), float64] */;
  %251 = @func_1154(%250) /* ty=(Tensor[(12, 4, 15), float64], Tensor[(10, ?, ?), int64]) */;
  %252 = %251.0;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(12, 4, 15), float32] */;
  %254 = shape_of(%var_6595, dtype="int32") /* ty=Tensor[(2), int32] */;
  %255 = cast(%var_6595, dtype="float32") /* ty=Tensor[(2, 360), float32] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %257 = mod(%255, %256) /* ty=Tensor[(2, 360), float32] */;
  %258 = cast(%257, dtype="float64") /* ty=Tensor[(2, 360), float64] */;
  %259 = cosh(%258) /* ty=Tensor[(2, 360), float64] */;
  %260 = cast(%259, dtype="float64") /* ty=Tensor[(2, 360), float64] */;
  %261 = %247.0;
  %262 = %248.0;
  %263 = atan(%260) /* ty=Tensor[(2, 360), float64] */;
  (%261, %262, %263)
}

def @func_1232(%var_1229: Tensor[(8, 2, 15), uint8], %var_1230: Tensor[(8, 2, 15), uint8], %var_1231: Tensor[(8, 2, 15), uint8]) -> (Tensor[(8, 2, 15), uint8], Tensor[(8, 2, 15), uint32], Tensor[(14, 10, 8), float32], Tensor[(10, 11, 3), int16]) {
  %282 = fn (%var_1187: Tensor[(8, 2, 15), uint8], %var_1188: Tensor[(8, 2, 15), uint8], %var_1194: Tensor[(8, 2, 15), uint8]) -> (Tensor[(8, 2, 15), uint8], Tensor[(8, 2, 15), uint32], Tensor[(14, 10, 8), float32], Tensor[(10, 11, 3), int16]) {
    %264 = cast(%var_1188, dtype="uint8") /* ty=Tensor[(8, 2, 15), uint8] */;
    %265 = shape_of(%var_1187, dtype="int32") /* ty=Tensor[(3), int32] */;
    %266 = cast(%var_1187, dtype="uint8") /* ty=Tensor[(8, 2, 15), uint8] */;
    %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %268 = cast(%var_1194, dtype="uint32") /* ty=Tensor[(8, 2, 15), uint32] */;
    %269 = shape_of(%var_1187, dtype="int32") /* ty=Tensor[(3), int32] */;
    %270 = cast(%var_1187, dtype="uint32") /* ty=Tensor[(8, 2, 15), uint32] */;
    %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %272 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %273 = %272.1;
    %274 = cast(%273, dtype="float32") /* ty=Tensor[(14, 10, 8), float32] */;
    %275 = @func_514() /* ty=Tensor[(10, 1, 1), uint32] */;
    %276 = cast(%275, dtype="int16") /* ty=Tensor[(10, 1, 1), int16] */;
    %277 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 11, 3), uint32] */, dtype="int16") /* ty=Tensor[(10, 11, 3), int16] */;
    %278 = left_shift(%266, %267) /* ty=Tensor[(8, 2, 15), uint8] */;
    %279 = right_shift(%270, %271) /* ty=Tensor[(8, 2, 15), uint32] */;
    %280 = acosh(%274) /* ty=Tensor[(14, 10, 8), float32] */;
    %281 = logical_xor(%276, %277) /* ty=Tensor[(10, 11, 3), int16] */;
    (%278, %279, %280, %281)
  };
  %282(%var_1229, %var_1230, %var_1231) /* ty=(Tensor[(8, 2, 15), uint8], Tensor[(8, 2, 15), uint32], Tensor[(14, 10, 8), float32], Tensor[(10, 11, 3), int16]) */
}

def @func_4380() -> (Tensor[(7, 3, 1), float64], Tensor[(720), float64]) {
  %283 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(7, 3, 1), float64] */;
  %284 = @func_3568() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) */;
  %285 = cos(%283) /* ty=Tensor[(7, 3, 1), float64] */;
  %286 = %284.2;
  (%285, %286)
}

def @func_1506(%var_1504: int16, %var_1505: Tensor[(6, 1, 14), int16]) -> (Tensor[(6, 1, 14), int16], Tensor[(6, 1, 14), int64]) {
  %293 = fn (%var_1495: int16, %var_1496: Tensor[(6, 1, 14), int16]) -> (Tensor[(6, 1, 14), int16], Tensor[(6, 1, 14), int64]) {
    %287 = cast(%var_1495, dtype="int16") /* ty=int16 */;
    %288 = cast(%var_1496, dtype="int16") /* ty=Tensor[(6, 1, 14), int16] */;
    %289 = cast(%var_1495, dtype="int64") /* ty=int64 */;
    %290 = cast(%var_1496, dtype="int64") /* ty=Tensor[(6, 1, 14), int64] */;
    %291 = bitwise_and(%287, %288) /* ty=Tensor[(6, 1, 14), int16] */;
    %292 = maximum(%289, %290) /* ty=Tensor[(6, 1, 14), int64] */;
    (%291, %292)
  };
  %293(%var_1504, %var_1505) /* ty=(Tensor[(6, 1, 14), int16], Tensor[(6, 1, 14), int64]) */
}

def @func_5857(%var_5855: Tensor[(10, 12, 16), float64]) -> (Tensor[(10, 12, 16), bool], Tensor[(720), float64]) {
  @func_5854(%var_5855) /* ty=(Tensor[(10, 12, 16), bool], Tensor[(720), float64]) */
}

def @func_6303(%var_6302: Tensor[(10, 4, 3), uint32]) -> (Tensor[(10, 4, 3), int8], uint32, Tensor[(10, 4, 3), float32]) {
  %305 = fn (%var_6276: Tensor[(10, 4, 3), uint32]) -> (Tensor[(10, 4, 3), int8], uint32, Tensor[(10, 4, 3), float32]) {
    %294 = @func_2668() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(80, 1), float32], Tensor[(10, ?, ?), int64]) */;
    %295 = %294.1;
    %296 = cast(%295, dtype="int8") /* ty=Tensor[(10, 1, 1), int8] */;
    %297 = cast(%var_6276, dtype="int8") /* ty=Tensor[(10, 4, 3), int8] */;
    %298 = @func_2066() /* ty=(uint32, Tensor[(14, 10, 8), uint64]) */;
    %299 = cast(%var_6276, dtype="float64") /* ty=Tensor[(10, 4, 3), float64] */;
    %300 = atan(%299) /* ty=Tensor[(10, 4, 3), float64] */;
    %301 = cast(%300, dtype="float32") /* ty=Tensor[(10, 4, 3), float32] */;
    %302 = multiply(%296, %297) /* ty=Tensor[(10, 4, 3), int8] */;
    %303 = %298.0;
    %304 = sin(%301) /* ty=Tensor[(10, 4, 3), float32] */;
    (%302, %303, %304)
  };
  %305(%var_6302) /* ty=(Tensor[(10, 4, 3), int8], uint32, Tensor[(10, 4, 3), float32]) */
}

def @func_6252() -> Tensor[(720), float64] {
  %306 = fn () -> Tensor[(720), float64] {
    @func_4854() /* ty=Tensor[(720), float64] */
  };
  %306() /* ty=Tensor[(720), float64] */
}

def @func_792(%var_791: Tensor[(10, 11, 13), uint32]) -> (Tensor[(10, 11, 13), uint64],) {
  %311 = fn (%var_779: Tensor[(10, 11, 13), uint32]) -> (Tensor[(10, 11, 13), uint64],) {
    %307 = @func_514() /* ty=Tensor[(10, 1, 1), uint32] */;
    %308 = cast(%307, dtype="uint64") /* ty=Tensor[(10, 1, 1), uint64] */;
    %309 = cast(%var_779, dtype="uint64") /* ty=Tensor[(10, 11, 13), uint64] */;
    %310 = bitwise_and(%308, %309) /* ty=Tensor[(10, 11, 13), uint64] */;
    (%310,)
  };
  %311(%var_791) /* ty=(Tensor[(10, 11, 13), uint64],) */
}

def @func_5032() -> (Tensor[(10, ?, ?), int64],) {
  %313 = fn () -> (Tensor[(10, ?, ?), int64],) {
    %312 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
    (%312,)
  };
  %313() /* ty=(Tensor[(10, ?, ?), int64],) */
}

def @func_2965() -> (Tensor[(10, ?, ?), int64],) {
  %314 = @func_2130() /* ty=(Tensor[(10, ?, ?), int64],) */;
  %315 = %314.0;
  (%315,)
}

def @func_3762() -> (Tensor[(10, ?, ?), float64],) {
  %320 = fn () -> (Tensor[(10, ?, ?), float64],) {
    %316 = @func_2668() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(80, 1), float32], Tensor[(10, ?, ?), int64]) */;
    %317 = %316.3;
    %318 = cast(%317, dtype="float64") /* ty=Tensor[(10, ?, ?), float64] */;
    %319 = cos(%318) /* ty=Tensor[(10, ?, ?), float64] */;
    (%319,)
  };
  %320() /* ty=(Tensor[(10, ?, ?), float64],) */
}

def @func_2420() -> (Tensor[(720), float64],) {
  %321 = @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */;
  %322 = %321.2;
  (%322,)
}

def @func_3037() -> Tensor[(720), float64] {
  %323 = @func_2420() /* ty=(Tensor[(720), float64],) */;
  %323.0
}

def @func_3039() -> Tensor[(720), float64] {
  @func_3037() /* ty=Tensor[(720), float64] */
}

def @func_1713() -> Tensor[(10, 1, 1), uint32] {
  %325 = fn () -> Tensor[(10, 1, 1), uint32] {
    %324 = @func_1550() /* ty=(Tensor[(10, 1, 1), uint32],) */;
    %324.0
  };
  %325() /* ty=Tensor[(10, 1, 1), uint32] */
}

def @func_2132() -> (Tensor[(10, ?, ?), int64],) {
  @func_2130() /* ty=(Tensor[(10, ?, ?), int64],) */
}

def @func_2669() -> (uint32, Tensor[(10, 1, 1), uint32], Tensor[(80, 1), float32], Tensor[(10, ?, ?), int64]) {
  %333 = fn () -> (uint32, Tensor[(10, 1, 1), uint32], Tensor[(80, 1), float32], Tensor[(10, ?, ?), int64]) {
    %326 = @func_375() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(1, 10), uint32]) */;
    %327 = cast(meta[relay.Constant][17] /* ty=Tensor[(80, 1), float32] */, dtype="float32") /* ty=Tensor[(80, 1), float32] */;
    %328 = reshape(%327, newshape=[80]) /* ty=Tensor[(80), float32] */;
    %329 = @func_2245(%328) /* ty=(Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(80), float32], Tensor[(10, 1, 1), uint32], uint32) */;
    %330 = %326.0;
    %331 = %329.7;
    %332 = @func_2516() /* ty=Tensor[(10, ?, ?), int64] */;
    (%330, %331, meta[relay.Constant][17] /* ty=Tensor[(80, 1), float32] */, %332)
  };
  %333() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(80, 1), float32], Tensor[(10, ?, ?), int64]) */
}

def @func_313() -> Tensor[(10, ?, ?), int64] {
  %334 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %334.2
}

def @func_4519(%var_4517: Tensor[(160), float64]) -> (Tensor[(7, 3, 1), float32], Tensor[(720), float64], Tensor[(160), float64]) {
  %335 = @func_4412() /* ty=Tensor[(7, 3, 1), float64] */;
  %336 = cast(%335, dtype="float32") /* ty=Tensor[(7, 3, 1), float32] */;
  %337 = cast(%var_4517, dtype="float64") /* ty=Tensor[(160), float64] */;
  %338 = reshape(%337, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %339 = @func_4119(%338) /* ty=(Tensor[(720), float64], Tensor[(2, 8, 10), float64], Tensor[(160), float64], Tensor[(2, 1, 2), float32], Tensor[(4), float32], Tensor[(2, 1, 2), float32]) */;
  %340 = exp(%336) /* ty=Tensor[(7, 3, 1), float32] */;
  %341 = %339.0;
  (%340, %341, %var_4517)
}

def @func_5588(%var_5586: Tensor[(14, 2, 5), float32]) -> (Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(660, 1), uint32], Tensor[(14, 2, 5), uint16]) {
  @func_5585(%var_5586) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(660, 1), uint32], Tensor[(14, 2, 5), uint16]) */
}

def @func_3621() -> Tensor[(14, 10, 8), uint64] {
  %343 = fn () -> Tensor[(14, 10, 8), uint64] {
    %342 = @func_1397() /* ty=(Tensor[(14, 10, 8), uint64],) */;
    %342.0
  };
  %343() /* ty=Tensor[(14, 10, 8), uint64] */
}

def @func_5993() -> (Tensor[(720), float64],) {
  %344 = @func_2420() /* ty=(Tensor[(720), float64],) */;
  %345 = %344.0;
  (%345,)
}

def @func_3208(%var_3206: Tensor[(10, 8, 9), uint32], %var_3207: Tensor[(13, 39), float32]) -> (Tensor[(10, 8, 9), uint32], Tensor[(13, 3, 13), uint32], Tensor[(13, 39), float32], Tensor[(10, 8, 9), float64]) {
  %359 = fn (%var_3177: Tensor[(10, 8, 9), uint32], %var_3191: Tensor[(13, 39), float32]) -> (Tensor[(10, 8, 9), uint32], Tensor[(13, 3, 13), uint32], Tensor[(13, 39), float32], Tensor[(10, 8, 9), float64]) {
    %346 = @func_2487() /* ty=Tensor[(10, 1, 1), uint32] */;
    %347 = cast(%346, dtype="bool") /* ty=Tensor[(10, 1, 1), bool] */;
    %348 = cast(%var_3177, dtype="bool") /* ty=Tensor[(10, 8, 9), bool] */;
    %349 = greater_equal(%347, %348) /* ty=Tensor[(10, 8, 9), bool] */;
    %350 = cast(%349, dtype="uint32") /* ty=Tensor[(10, 8, 9), uint32] */;
    %351 = cast(%346, dtype="uint32") /* ty=Tensor[(10, 1, 1), uint32] */;
    %352 = cast(%var_3191, dtype="float32") /* ty=Tensor[(13, 39), float32] */;
    %353 = reshape(%352, newshape=[507]) /* ty=Tensor[(507), float32] */;
    %354 = @func_1699(%353) /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(13, 3, 13), uint32]) */;
    %355 = cast(%var_3177, dtype="float64") /* ty=Tensor[(10, 8, 9), float64] */;
    %356 = add(%350, %351) /* ty=Tensor[(10, 8, 9), uint32] */;
    %357 = %354.4;
    %358 = asinh(%355) /* ty=Tensor[(10, 8, 9), float64] */;
    (%356, %357, %var_3191, %358)
  };
  %359(%var_3206, %var_3207) /* ty=(Tensor[(10, 8, 9), uint32], Tensor[(13, 3, 13), uint32], Tensor[(13, 39), float32], Tensor[(10, 8, 9), float64]) */
}

def @func_3419() -> (Tensor[(720), float32], Tensor[(15, 1, 7), bool], Tensor[(105), uint32], Tensor[(2, 6, 11), float32], Tensor[(66, 2), float32], Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64]) {
  %372 = fn () -> (Tensor[(720), float32], Tensor[(15, 1, 7), bool], Tensor[(105), uint32], Tensor[(2, 6, 11), float32], Tensor[(66, 2), float32], Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64]) {
    %360 = @func_3037() /* ty=Tensor[(720), float64] */;
    %361 = cast(%360, dtype="float32") /* ty=Tensor[(720), float32] */;
    %362 = cast(meta[relay.Constant][18] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
    %363 = reshape(%362, newshape=[15, 1, 7]) /* ty=Tensor[(15, 1, 7), uint32] */;
    %364 = cast(meta[relay.Constant][19] /* ty=Tensor[(66, 2), float32] */, dtype="float32") /* ty=Tensor[(66, 2), float32] */;
    %365 = reshape(%364, newshape=[2, 6, 11]) /* ty=Tensor[(2, 6, 11), float32] */;
    %366 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %367 = sin(%361) /* ty=Tensor[(720), float32] */;
    %368 = @func_2361(%363) /* ty=Tensor[(15, 1, 7), bool] */;
    %369 = @func_2838(%365) /* ty=Tensor[(2, 6, 11), float32] */;
    %370 = %366.1;
    %371 = @func_1036() /* ty=Tensor[(10, ?, ?), int64] */;
    (%367, %368, meta[relay.Constant][18] /* ty=Tensor[(105), uint32] */, %369, meta[relay.Constant][19] /* ty=Tensor[(66, 2), float32] */, %370, %371)
  };
  %372() /* ty=(Tensor[(720), float32], Tensor[(15, 1, 7), bool], Tensor[(105), uint32], Tensor[(2, 6, 11), float32], Tensor[(66, 2), float32], Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64]) */
}

def @func_6362() -> (Tensor[(14, 10, 8), float64],) {
  @func_6360() /* ty=(Tensor[(14, 10, 8), float64],) */
}

def @func_1860(%var_1859: Tensor[(84), int16]) -> (Tensor[(10, ?, ?), int64], Tensor[(6, 1, 14), int64], int16, Tensor[(84), int16], Tensor[(10, 1, 1), uint32]) {
  %382 = fn (%var_1839: Tensor[(84), int16]) -> (Tensor[(10, ?, ?), int64], Tensor[(6, 1, 14), int64], int16, Tensor[(84), int16], Tensor[(10, 1, 1), uint32]) {
    %373 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %374 = cast(meta[relay.Constant][20] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %375 = cast(%var_1839, dtype="int16") /* ty=Tensor[(84), int16] */;
    %376 = reshape(%374, newshape=[]) /* ty=int16 */;
    %377 = reshape(%375, newshape=[6, 1, 14]) /* ty=Tensor[(6, 1, 14), int16] */;
    %378 = @func_1503(%376, %377) /* ty=(Tensor[(6, 1, 14), int16], Tensor[(6, 1, 14), int64]) */;
    %379 = %373.2;
    %380 = %378.1;
    %381 = @func_514() /* ty=Tensor[(10, 1, 1), uint32] */;
    (%379, %380, meta[relay.Constant][20] /* ty=int16 */, %var_1839, %381)
  };
  %382(%var_1859) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(6, 1, 14), int64], int16, Tensor[(84), int16], Tensor[(10, 1, 1), uint32]) */
}

def @func_2516() -> Tensor[(10, ?, ?), int64] {
  %383 = @func_1884() /* ty=(uint32, Tensor[(10, ?, ?), int64]) */;
  %383.1
}

def @func_927(%var_926: Tensor[(10, 8, 1), float32]) -> (Tensor[(10, 1, 1), uint32], uint32, Tensor[(10, ?, ?), int64], uint32, Tensor[(10, 8, 1), uint16]) {
  %398 = fn (%var_920: Tensor[(10, 8, 1), float32]) -> (Tensor[(10, 1, 1), uint32], uint32, Tensor[(10, ?, ?), int64], uint32, Tensor[(10, 8, 1), uint16]) {
    %384 = cast(meta[relay.Constant][21] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %385 = @func_514() /* ty=Tensor[(10, 1, 1), uint32] */;
    %386 = cast(%385, dtype="float32") /* ty=Tensor[(10, 1, 1), float32] */;
    %387 = rsqrt(%386) /* ty=Tensor[(10, 1, 1), float32] */;
    %388 = cast(%387, dtype="uint32") /* ty=Tensor[(10, 1, 1), uint32] */;
    %389 = reshape(%384, newshape=[]) /* ty=uint32 */;
    %390 = reshape(%388, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), uint32] */;
    %391 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %392 = cast(%387, dtype="uint16") /* ty=Tensor[(10, 1, 1), uint16] */;
    %393 = cast(%var_920, dtype="uint16") /* ty=Tensor[(10, 8, 1), uint16] */;
    %394 = @func_82(%389, %390) /* ty=Tensor[(10, 1, 1), uint32] */;
    %395 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
    %396 = %391.0;
    %397 = bitwise_or(%392, %393) /* ty=Tensor[(10, 8, 1), uint16] */;
    (%394, meta[relay.Constant][21] /* ty=uint32 */, %395, %396, %397)
  };
  %398(%var_926) /* ty=(Tensor[(10, 1, 1), uint32], uint32, Tensor[(10, ?, ?), int64], uint32, Tensor[(10, 8, 1), uint16]) */
}

def @func_4160() -> Tensor[(14, 10, 8), uint64] {
  %400 = fn () -> Tensor[(14, 10, 8), uint64] {
    %399 = @func_2400() /* ty=(Tensor[(14, 10, 8), uint64],) */;
    %399.0
  };
  %400() /* ty=Tensor[(14, 10, 8), uint64] */
}

def @func_5293(%var_5292: Tensor[(10, 11, 6), uint32]) -> (Tensor[(10, 11, 6), bool], Tensor[(10, ?, ?), int64], Tensor[(14, 10, 8), bool], Tensor[(10, 11, 6), float64]) {
  %416 = fn (%var_5251: Tensor[(10, 11, 6), uint32]) -> (Tensor[(10, 11, 6), bool], Tensor[(10, ?, ?), int64], Tensor[(14, 10, 8), bool], Tensor[(10, 11, 6), float64]) {
    %401 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 11, 6), uint32] */, dtype="bool") /* ty=Tensor[(10, 11, 6), bool] */;
    %402 = shape_of(%var_5251, dtype="int32") /* ty=Tensor[(3), int32] */;
    %403 = cast(%var_5251, dtype="bool") /* ty=Tensor[(10, 11, 6), bool] */;
    %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %405 = @func_2400() /* ty=(Tensor[(14, 10, 8), uint64],) */;
    %406 = %405.0;
    %407 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 10, 8), uint64] */, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
    %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
    %409 = cast(%406, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
    %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %411 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 11, 6), uint32] */, dtype="float64") /* ty=Tensor[(10, 11, 6), float64] */;
    %412 = greater_equal(%403, %404) /* ty=Tensor[(10, 11, 6), bool] */;
    %413 = @func_1036() /* ty=Tensor[(10, ?, ?), int64] */;
    %414 = greater(%409, %410) /* ty=Tensor[(14, 10, 8), bool] */;
    %415 = sin(%411) /* ty=Tensor[(10, 11, 6), float64] */;
    (%412, %413, %414, %415)
  };
  %416(%var_5292) /* ty=(Tensor[(10, 11, 6), bool], Tensor[(10, ?, ?), int64], Tensor[(14, 10, 8), bool], Tensor[(10, 11, 6), float64]) */
}

def @func_585(%var_583: Tensor[(2, 11, 1), bool], %var_584: Tensor[(2, 11, 1), bool]) -> Tensor[(2, 11, ?), bool] {
  @func_581(%var_583, %var_584) /* ty=Tensor[(2, 11, ?), bool] */
}

def @func_3318(%var_3316: int16, %var_3317: Tensor[(5, 7, 5), int16]) -> (Tensor[(5, 7, 5), int16],) {
  %420 = fn (%var_3310: int16, %var_3311: Tensor[(5, 7, 5), int16]) -> (Tensor[(5, 7, 5), int16],) {
    %417 = cast(%var_3310, dtype="int16") /* ty=int16 */;
    %418 = cast(%var_3311, dtype="int16") /* ty=Tensor[(5, 7, 5), int16] */;
    %419 = minimum(%417, %418) /* ty=Tensor[(5, 7, 5), int16] */;
    (%419,)
  };
  %420(%var_3316, %var_3317) /* ty=(Tensor[(5, 7, 5), int16],) */
}

def @func_2130() -> (Tensor[(10, ?, ?), int64],) {
  %421 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %422 = %421.1;
  (%422,)
}

def @func_5554() -> (Tensor[(1, 10), uint32], Tensor[(14, 10, 8), uint64]) {
  %427 = fn () -> (Tensor[(1, 10), uint32], Tensor[(14, 10, 8), uint64]) {
    %423 = @func_375() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(1, 10), uint32]) */;
    %424 = @func_1397() /* ty=(Tensor[(14, 10, 8), uint64],) */;
    %425 = %423.2;
    %426 = %424.0;
    (%425, %426)
  };
  %427() /* ty=(Tensor[(1, 10), uint32], Tensor[(14, 10, 8), uint64]) */
}

def @func_1702(%var_1700: Tensor[(507), float32]) -> (Tensor[(14, 10, 8), uint64], Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(13, 3, 13), uint32]) {
  @func_1699(%var_1700) /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(13, 3, 13), uint32]) */
}

def @func_4676(%var_4661: Tensor[(16, 13, 1), float32], %var_4662: Tensor[(16, 13, 16), float32]) -> (Tensor[(16, 13, 16), bool],) {
  %428 = cast(%var_4661, dtype="bool") /* ty=Tensor[(16, 13, 1), bool] */;
  %429 = cast(%var_4662, dtype="bool") /* ty=Tensor[(16, 13, 16), bool] */;
  %430 = greater(%428, %429) /* ty=Tensor[(16, 13, 16), bool] */;
  (%430,)
}

def @func_4245() -> Tensor[(10, 1, 1), uint32] {
  @func_4243() /* ty=Tensor[(10, 1, 1), uint32] */
}

def @func_6129(%var_6093: Tensor[(80), float32], %var_6100: Tensor[(160), float64], %var_6114: Tensor[(208), float32], %var_6115: Tensor[(3328), float32]) -> (Tensor[(720), float64], uint32, Tensor[(960), uint32], Tensor[(80), float32], Tensor[(14, 9, 6), bool], Tensor[(160), float64], Tensor[(15, 1, 7), bool], Tensor[(105), uint32], Tensor[(16, 13, 16), bool], Tensor[(208), float32], Tensor[(3328), float32], Tensor[(720), float64]) {
  %431 = cast(meta[relay.Constant][24] /* ty=Tensor[(960), uint32] */, dtype="uint32") /* ty=Tensor[(960), uint32] */;
  %432 = cast(%var_6093, dtype="float32") /* ty=Tensor[(80), float32] */;
  %433 = reshape(%431, newshape=[960]) /* ty=Tensor[(960), uint32] */;
  %434 = reshape(%432, newshape=[80]) /* ty=Tensor[(80), float32] */;
  %435 = @func_4825(%433, %434) /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(6, 16, 10), bool], Tensor[(960), uint32], uint32, Tensor[(80), float32], Tensor[(1, 390), int64], Tensor[(14, 10, 8), uint64]) */;
  %436 = cast(%var_6100, dtype="float64") /* ty=Tensor[(160), float64] */;
  %437 = reshape(%436, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %438 = @func_3829(%437) /* ty=(Tensor[(14, 9, 6), bool], Tensor[(2, 8, 10), float64], Tensor[(160), float64]) */;
  %439 = cast(meta[relay.Constant][25] /* ty=Tensor[(105), uint32] */, dtype="uint32") /* ty=Tensor[(105), uint32] */;
  %440 = reshape(%439, newshape=[15, 1, 7]) /* ty=Tensor[(15, 1, 7), uint32] */;
  %441 = cast(%var_6114, dtype="float32") /* ty=Tensor[(208), float32] */;
  %442 = cast(%var_6115, dtype="float32") /* ty=Tensor[(3328), float32] */;
  %443 = reshape(%441, newshape=[16, 13, 1]) /* ty=Tensor[(16, 13, 1), float32] */;
  %444 = reshape(%442, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), float32] */;
  %445 = @func_4676(%443, %444) /* ty=(Tensor[(16, 13, 16), bool],) */;
  %446 = @func_4380() /* ty=(Tensor[(7, 3, 1), float64], Tensor[(720), float64]) */;
  %447 = @func_4902() /* ty=Tensor[(720), float64] */;
  %448 = %435.3;
  %449 = %438.0;
  %450 = @func_2361(%440) /* ty=Tensor[(15, 1, 7), bool] */;
  %451 = %445.0;
  %452 = %446.1;
  (%447, %448, meta[relay.Constant][24] /* ty=Tensor[(960), uint32] */, %var_6093, %449, %var_6100, %450, meta[relay.Constant][25] /* ty=Tensor[(105), uint32] */, %451, %var_6114, %var_6115, %452)
}

def @func_2388() -> Tensor[(10, ?, ?), int64] {
  @func_2386() /* ty=Tensor[(10, ?, ?), int64] */
}

def @func_4412() -> Tensor[(7, 3, 1), float64] {
  %453 = @func_4380() /* ty=(Tensor[(7, 3, 1), float64], Tensor[(720), float64]) */;
  %453.0
}

def @func_6651(%var_6649: Tensor[(2, 360), float64]) -> (Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(2, 360), float64]) {
  @func_6648(%var_6649) /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(2, 360), float64]) */
}

def @func_3740(%var_3739: Tensor[(4, 40), float64]) -> (Tensor[(10, ?, ?), int64], Tensor[(4, 40), float64], Tensor[(14, 10, 8), bool], Tensor[(10, ?, ?), float64]) {
  %467 = fn (%var_3707: Tensor[(4, 40), float64]) -> (Tensor[(10, ?, ?), int64], Tensor[(4, 40), float64], Tensor[(14, 10, 8), bool], Tensor[(10, ?, ?), float64]) {
    %454 = cast(%var_3707, dtype="float64") /* ty=Tensor[(4, 40), float64] */;
    %455 = reshape(%454, newshape=[2, 8, 10]) /* ty=Tensor[(2, 8, 10), float64] */;
    %456 = @func_3697(%455) /* ty=(Tensor[(2, 8, 10), float64], uint32, Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), bool]) */;
    %457 = @func_3620() /* ty=Tensor[(14, 10, 8), uint64] */;
    %458 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 10, 8), uint64] */, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
    %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
    %460 = cast(%457, dtype="bool") /* ty=Tensor[(14, 10, 8), bool] */;
    %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %462 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
    %463 = cast(%462, dtype="float64") /* ty=Tensor[(10, ?, ?), float64] */;
    %464 = %456.2;
    %465 = less_equal(%460, %461) /* ty=Tensor[(14, 10, 8), bool] */;
    %466 = log10(%463) /* ty=Tensor[(10, ?, ?), float64] */;
    (%464, %var_3707, %465, %466)
  };
  %467(%var_3739) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(4, 40), float64], Tensor[(14, 10, 8), bool], Tensor[(10, ?, ?), float64]) */
}

def @func_278() -> (uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) {
  %485 = fn () -> (uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) {
    %468 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 10, 8), float32] */, dtype="float32") /* ty=Tensor[(14, 10, 8), float32] */;
    %469 = tan(%468) /* ty=Tensor[(14, 10, 8), float32] */;
    %470 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 10, 8), float32] */, dtype="uint64") /* ty=Tensor[(14, 10, 8), uint64] */;
    %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
    %472 = cast(%469, dtype="uint64") /* ty=Tensor[(14, 10, 8), uint64] */;
    %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %474 = cast(meta[relay.Constant][27] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %475 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 2), uint32] */, dtype="uint32") /* ty=Tensor[(5, 2), uint32] */;
    %476 = reshape(%474, newshape=[]) /* ty=uint32 */;
    %477 = reshape(%475, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), uint32] */;
    %478 = @func_82(%476, %477) /* ty=Tensor[(10, 1, 1), uint32] */;
    %479 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 2), uint32] */, dtype="int64") /* ty=Tensor[(5, 2), int64] */;
    %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
    %481 = cast(%478, dtype="int64") /* ty=Tensor[(10, 1, 1), int64] */;
    %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %483 = bitwise_xor(%472, %473) /* ty=Tensor[(14, 10, 8), uint64] */;
    %484 = subtract(%481, %482) /* ty=Tensor[(10, ?, ?), int64] */;
    (meta[relay.Constant][27] /* ty=uint32 */, %483, %484)
  };
  %485() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */
}

def @func_4121(%var_4120: Tensor[(160), float64]) -> (Tensor[(720), float64], Tensor[(2, 8, 10), float64], Tensor[(160), float64], Tensor[(2, 1, 2), float32], Tensor[(4), float32], Tensor[(2, 1, 2), float32]) {
  %500 = fn (%var_4100: Tensor[(160), float64]) -> (Tensor[(720), float64], Tensor[(2, 8, 10), float64], Tensor[(160), float64], Tensor[(2, 1, 2), float32], Tensor[(4), float32], Tensor[(2, 1, 2), float32]) {
    %486 = @func_3568() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) */;
    %487 = cast(%var_4100, dtype="float64") /* ty=Tensor[(160), float64] */;
    %488 = reshape(%487, newshape=[2, 8, 10]) /* ty=Tensor[(2, 8, 10), float64] */;
    %489 = @func_3697(%488) /* ty=(Tensor[(2, 8, 10), float64], uint32, Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), bool]) */;
    %490 = cast(meta[relay.Constant][30] /* ty=Tensor[(4), float32] */, dtype="float32") /* ty=Tensor[(4), float32] */;
    %491 = reshape(%490, newshape=[2, 1, 2]) /* ty=Tensor[(2, 1, 2), float32] */;
    %492 = @func_3930(%491) /* ty=(Tensor[(2, 1, 2), float32],) */;
    %493 = cast(meta[relay.Constant][30] /* ty=Tensor[(4), float32] */, dtype="float32") /* ty=Tensor[(4), float32] */;
    %494 = reshape(%493, newshape=[2, 1, 2]) /* ty=Tensor[(2, 1, 2), float32] */;
    %495 = @func_3930(%494) /* ty=(Tensor[(2, 1, 2), float32],) */;
    %496 = %486.2;
    %497 = %489.0;
    %498 = %492.0;
    %499 = %495.0;
    (%496, %497, %var_4100, %498, meta[relay.Constant][30] /* ty=Tensor[(4), float32] */, %499)
  };
  %500(%var_4120) /* ty=(Tensor[(720), float64], Tensor[(2, 8, 10), float64], Tensor[(160), float64], Tensor[(2, 1, 2), float32], Tensor[(4), float32], Tensor[(2, 1, 2), float32]) */
}

def @func_1117(%var_1115: Tensor[(1430, 1), uint32], %var_1116: Tensor[(10, 11, 13), uint64]) -> (Tensor[(14, 10, 8), float64], Tensor[(1430, 1), uint32], Tensor[(10, 11, 13), uint64], Tensor[(10, 11, 13), float32], Tensor[(22), bool], Tensor[(22, 1), bool], Tensor[(10, ?, ?), int64], Tensor[(13, 3, 13), float32], Tensor[(507, 1), float32]) {
  %526 = fn (%var_1058: Tensor[(1430, 1), uint32], %var_1075: Tensor[(10, 11, 13), uint64]) -> (Tensor[(14, 10, 8), float64], Tensor[(1430, 1), uint32], Tensor[(10, 11, 13), uint64], Tensor[(10, 11, 13), float32], Tensor[(22), bool], Tensor[(22, 1), bool], Tensor[(10, ?, ?), int64], Tensor[(13, 3, 13), float32], Tensor[(507, 1), float32]) {
    %501 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
    %502 = %501.0;
    %503 = cast(%502, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
    %504 = cast(%var_1058, dtype="uint32") /* ty=Tensor[(1430, 1), uint32] */;
    %505 = reshape(%504, newshape=[10, 11, 13]) /* ty=Tensor[(10, 11, 13), uint32] */;
    %506 = @func_790(%505) /* ty=(Tensor[(10, 11, 13), uint64],) */;
    %507 = %506.0;
    %508 = cast(%507, dtype="uint32") /* ty=Tensor[(10, 11, 13), uint32] */;
    %509 = reshape(%508, newshape=[10, 11, 13]) /* ty=Tensor[(10, 11, 13), uint32] */;
    %510 = @func_790(%509) /* ty=(Tensor[(10, 11, 13), uint64],) */;
    %511 = cast(%var_1075, dtype="float32") /* ty=Tensor[(10, 11, 13), float32] */;
    %512 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
    %513 = cast(%507, dtype="float32") /* ty=Tensor[(10, 11, 13), float32] */;
    %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %515 = cast(meta[relay.Constant][31] /* ty=Tensor[(22, 1), bool] */, dtype="bool") /* ty=Tensor[(22, 1), bool] */;
    %516 = reshape(%515, newshape=[22]) /* ty=Tensor[(22), bool] */;
    %517 = @func_818(%516) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(2, 11, ?), bool], Tensor[(22), bool]) */;
    %518 = cast(meta[relay.Constant][32] /* ty=Tensor[(507, 1), float32] */, dtype="float32") /* ty=Tensor[(507, 1), float32] */;
    %519 = reshape(%518, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), float32] */;
    %520 = asinh(%503) /* ty=Tensor[(14, 10, 8), float64] */;
    %521 = %510.0;
    %522 = floor_mod(%513, %514) /* ty=Tensor[(10, 11, 13), float32] */;
    %523 = %517.2;
    %524 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
    %525 = @func_181(%519) /* ty=Tensor[(13, 3, 13), float32] */;
    (%520, %var_1058, %521, %522, %523, meta[relay.Constant][31] /* ty=Tensor[(22, 1), bool] */, %524, %525, meta[relay.Constant][32] /* ty=Tensor[(507, 1), float32] */)
  };
  %526(%var_1115, %var_1116) /* ty=(Tensor[(14, 10, 8), float64], Tensor[(1430, 1), uint32], Tensor[(10, 11, 13), uint64], Tensor[(10, 11, 13), float32], Tensor[(22), bool], Tensor[(22, 1), bool], Tensor[(10, ?, ?), int64], Tensor[(13, 3, 13), float32], Tensor[(507, 1), float32]) */
}

def @func_4987() -> Tensor[(10, ?, ?), int64] {
  %527 = fn () -> Tensor[(10, ?, ?), int64] {
    @func_313() /* ty=Tensor[(10, ?, ?), int64] */
  };
  %527() /* ty=Tensor[(10, ?, ?), int64] */
}

def @func_2518() -> Tensor[(10, ?, ?), int64] {
  @func_2516() /* ty=Tensor[(10, ?, ?), int64] */
}

def @main(%var_6748: Tensor[(8, 5, 7), float64]) -> (Tensor[(8, 5, 7), float64], Tensor[(80, 1), float64]) {
  %528 = cast(%var_6748, dtype="float64") /* ty=Tensor[(8, 5, 7), float64] */;
  %529 = @func_4768() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(80, 1), float64]) */;
  %530 = %529.1;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(80, 1), float64] */;
  %532 = acos(%528) /* ty=Tensor[(8, 5, 7), float64] */;
  %533 = sigmoid(%531) /* ty=Tensor[(80, 1), float64] */;
  (%532, %533)
}

def @func_2929() -> Tensor[(10, 1, 1), uint32] {
  %534 = fn () -> Tensor[(10, 1, 1), uint32] {
    @func_514() /* ty=Tensor[(10, 1, 1), uint32] */
  };
  %534() /* ty=Tensor[(10, 1, 1), uint32] */
}

def @func_5154() -> (Tensor[(10, ?, ?), int64],) {
  %536 = fn () -> (Tensor[(10, ?, ?), int64],) {
    %535 = @func_4610() /* ty=Tensor[(10, ?, ?), int64] */;
    (%535,)
  };
  %536() /* ty=(Tensor[(10, ?, ?), int64],) */
}

def @func_581(%var_565: Tensor[(2, 11, 1), bool], %var_566: Tensor[(2, 11, 1), bool]) -> Tensor[(2, 11, ?), bool] {
  %537 = cast(%var_566, dtype="bool") /* ty=Tensor[(2, 11, 1), bool] */;
  %538 = shape_of(%var_565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(%var_565, dtype="bool") /* ty=Tensor[(2, 11, 1), bool] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%539, %540) /* ty=Tensor[(2, 11, ?), bool] */
}

def @func_750(%var_748: Tensor[(14, 11, 5), uint64], %var_749: Tensor[(14, 11, 5), uint64]) -> (Tensor[(14, 11, 5), uint64], Tensor[(13, 3, 13), float32], Tensor[(13, 39), float32], Tensor[(14, 10, 8), uint64]) {
  %551 = fn (%var_717: Tensor[(14, 11, 5), uint64], %var_718: Tensor[(14, 11, 5), uint64]) -> (Tensor[(14, 11, 5), uint64], Tensor[(13, 3, 13), float32], Tensor[(13, 39), float32], Tensor[(14, 10, 8), uint64]) {
    %541 = cast(%var_718, dtype="uint64") /* ty=Tensor[(14, 11, 5), uint64] */;
    %542 = shape_of(%var_717, dtype="int32") /* ty=Tensor[(3), int32] */;
    %543 = cast(%var_717, dtype="uint64") /* ty=Tensor[(14, 11, 5), uint64] */;
    %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %545 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 39), float32] */, dtype="float32") /* ty=Tensor[(13, 39), float32] */;
    %546 = reshape(%545, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), float32] */;
    %547 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %548 = maximum(%543, %544) /* ty=Tensor[(14, 11, 5), uint64] */;
    %549 = @func_181(%546) /* ty=Tensor[(13, 3, 13), float32] */;
    %550 = %547.1;
    (%548, %549, meta[relay.Constant][33] /* ty=Tensor[(13, 39), float32] */, %550)
  };
  %551(%var_748, %var_749) /* ty=(Tensor[(14, 11, 5), uint64], Tensor[(13, 3, 13), float32], Tensor[(13, 39), float32], Tensor[(14, 10, 8), uint64]) */
}

def @func_2386() -> Tensor[(10, ?, ?), int64] {
  %552 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %552.1
}

def @func_1364(%var_1309: Tensor[(14, 10, 8), uint64]) -> (Tensor[(10, ?, ?), int64], Tensor[(14, 10, 8), float64], Tensor[(14, 10, 8), uint8]) {
  %553 = cast(%var_1309, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
  %554 = cast(%var_1309, dtype="float32") /* ty=Tensor[(14, 10, 8), float32] */;
  %555 = sigmoid(%554) /* ty=Tensor[(14, 10, 8), float32] */;
  %556 = cast(%555, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
  %557 = log10(%556) /* ty=Tensor[(14, 10, 8), float64] */;
  %558 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %559 = %558.0;
  %560 = cast(%var_1309, dtype="int16") /* ty=Tensor[(14, 10, 8), int16] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%559, dtype="int16") /* ty=Tensor[(14, 10, 8), int16] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %564 = add(%562, %563) /* ty=Tensor[(14, 10, 8), int16] */;
  %565 = cast(%564, dtype="float64") /* ty=Tensor[(14, 10, 8), float64] */;
  %566 = sinh(%565) /* ty=Tensor[(14, 10, 8), float64] */;
  %567 = cast(%566, dtype="uint8") /* ty=Tensor[(14, 10, 8), uint8] */;
  %568 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(%557, dtype="uint8") /* ty=Tensor[(14, 10, 8), uint8] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %571 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
  %572 = cos(%553) /* ty=Tensor[(14, 10, 8), float64] */;
  %573 = multiply(%569, %570) /* ty=Tensor[(14, 10, 8), uint8] */;
  (%571, %572, %573)
}

def @func_2422() -> (Tensor[(720), float64],) {
  @func_2420() /* ty=(Tensor[(720), float64],) */
}

def @func_2719(%var_2711: Tensor[(10, 15, 13), uint32]) -> Tensor[(10, 15, 13), float64] {
  %574 = @func_2487() /* ty=Tensor[(10, 1, 1), uint32] */;
  %575 = cast(%574, dtype="float64") /* ty=Tensor[(10, 1, 1), float64] */;
  %576 = cast(%var_2711, dtype="float64") /* ty=Tensor[(10, 15, 13), float64] */;
  power(%575, %576) /* ty=Tensor[(10, 15, 13), float64] */
}

def @func_1699(%var_1675: Tensor[(507), float32]) -> (Tensor[(14, 10, 8), uint64], Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(13, 3, 13), uint32]) {
  %577 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %578 = cast(meta[relay.Constant][34] /* ty=Tensor[(240), uint8] */, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %579 = cast(meta[relay.Constant][34] /* ty=Tensor[(240), uint8] */, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %580 = cast(meta[relay.Constant][34] /* ty=Tensor[(240), uint8] */, dtype="uint8") /* ty=Tensor[(240), uint8] */;
  %581 = reshape(%578, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), uint8] */;
  %582 = reshape(%579, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), uint8] */;
  %583 = reshape(%580, newshape=[8, 2, 15]) /* ty=Tensor[(8, 2, 15), uint8] */;
  %584 = @func_1228(%581, %582, %583) /* ty=(Tensor[(8, 2, 15), uint8], Tensor[(8, 2, 15), uint32], Tensor[(14, 10, 8), float32], Tensor[(10, 11, 3), int16]) */;
  %585 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
  %586 = cast(%var_1675, dtype="float32") /* ty=Tensor[(507), float32] */;
  %587 = reshape(%586, newshape=[13, 3, 13]) /* ty=Tensor[(13, 3, 13), float32] */;
  %588 = @func_181(%587) /* ty=Tensor[(13, 3, 13), float32] */;
  %589 = cast(%588, dtype="float32") /* ty=Tensor[(13, 3, 13), float32] */;
  %590 = atanh(%589) /* ty=Tensor[(13, 3, 13), float32] */;
  %591 = cast(%var_1675, dtype="uint32") /* ty=Tensor[(507), uint32] */;
  %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%590, dtype="uint32") /* ty=Tensor[(13, 3, 13), uint32] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %595 = %577.0;
  %596 = %584.0;
  %597 = %585.0;
  %598 = subtract(%593, %594) /* ty=Tensor[(13, 3, 13), uint32] */;
  (%595, %596, meta[relay.Constant][34] /* ty=Tensor[(240), uint8] */, %597, %598)
}

def @func_3930(%var_3927: Tensor[(2, 1, 2), float32]) -> (Tensor[(2, 1, 2), float32],) {
  %599 = cast(%var_3927, dtype="float32") /* ty=Tensor[(2, 1, 2), float32] */;
  %600 = sin(%599) /* ty=Tensor[(2, 1, 2), float32] */;
  (%600,)
}

def @func_4382() -> (Tensor[(7, 3, 1), float64], Tensor[(720), float64]) {
  @func_4380() /* ty=(Tensor[(7, 3, 1), float64], Tensor[(720), float64]) */
}

def @func_3501(%var_3499: Tensor[(770), uint64]) -> (Tensor[(10, ?, ?), int64], Tensor[(10, 1, 1), uint32], Tensor[(10, 2, 40), bool], Tensor[(770), uint64]) {
  @func_3498(%var_3499) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, 1, 1), uint32], Tensor[(10, 2, 40), bool], Tensor[(770), uint64]) */
}

def @func_2967() -> (Tensor[(10, ?, ?), int64],) {
  @func_2965() /* ty=(Tensor[(10, ?, ?), int64],) */
}

def @func_5585(%var_5563: Tensor[(14, 2, 5), float32]) -> (Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(660, 1), uint32], Tensor[(14, 2, 5), uint16]) {
  %601 = @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */;
  %602 = cast(meta[relay.Constant][35] /* ty=Tensor[(660, 1), uint32] */, dtype="uint32") /* ty=Tensor[(660, 1), uint32] */;
  %603 = reshape(%602, newshape=[10, 11, 6]) /* ty=Tensor[(10, 11, 6), uint32] */;
  %604 = @func_5291(%603) /* ty=(Tensor[(10, 11, 6), bool], Tensor[(10, ?, ?), int64], Tensor[(14, 10, 8), bool], Tensor[(10, 11, 6), float64]) */;
  %605 = cast(%var_5563, dtype="float32") /* ty=Tensor[(14, 2, 5), float32] */;
  %606 = acos(%605) /* ty=Tensor[(14, 2, 5), float32] */;
  %607 = cast(%var_5563, dtype="uint16") /* ty=Tensor[(14, 2, 5), uint16] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="uint16") /* ty=Tensor[(14, 2, 5), uint16] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %611 = %601.0;
  %612 = %604.1;
  %613 = subtract(%609, %610) /* ty=Tensor[(14, 2, 5), uint16] */;
  (%611, %612, meta[relay.Constant][35] /* ty=Tensor[(660, 1), uint32] */, %613)
}

def @func_2068() -> (uint32, Tensor[(14, 10, 8), uint64]) {
  @func_2066() /* ty=(uint32, Tensor[(14, 10, 8), uint64]) */
}

def @func_3831(%var_3830: Tensor[(160), float64]) -> (Tensor[(14, 9, 6), bool], Tensor[(2, 8, 10), float64], Tensor[(160), float64]) {
  %623 = fn (%var_3827: Tensor[(160), float64]) -> (Tensor[(14, 9, 6), bool], Tensor[(2, 8, 10), float64], Tensor[(160), float64]) {
    %614 = @func_2066() /* ty=(uint32, Tensor[(14, 10, 8), uint64]) */;
    %615 = %614.0;
    %616 = cast(%615, dtype="bool") /* ty=bool */;
    %617 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 9, 6), uint32] */, dtype="bool") /* ty=Tensor[(14, 9, 6), bool] */;
    %618 = cast(%var_3827, dtype="float64") /* ty=Tensor[(160), float64] */;
    %619 = reshape(%618, newshape=[2, 8, 10]) /* ty=Tensor[(2, 8, 10), float64] */;
    %620 = @func_3697(%619) /* ty=(Tensor[(2, 8, 10), float64], uint32, Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), bool]) */;
    %621 = less(%616, %617) /* ty=Tensor[(14, 9, 6), bool] */;
    %622 = %620.0;
    (%621, %622, %var_3827)
  };
  %623(%var_3830) /* ty=(Tensor[(14, 9, 6), bool], Tensor[(2, 8, 10), float64], Tensor[(160), float64]) */
}

def @func_5097() -> (Tensor[(14, 10, 8), uint64],) {
  %626 = fn () -> (Tensor[(14, 10, 8), uint64],) {
    %624 = @func_1397() /* ty=(Tensor[(14, 10, 8), uint64],) */;
    %625 = %624.0;
    (%625,)
  };
  %626() /* ty=(Tensor[(14, 10, 8), uint64],) */
}

def @func_1803(%var_1802: Tensor[(6, 7, 3), float32]) -> (Tensor[(6, 7, 3), float32], Tensor[(10, 1, 1), uint32]) {
  %630 = fn (%var_1753: Tensor[(6, 7, 3), float32]) -> (Tensor[(6, 7, 3), float32], Tensor[(10, 1, 1), uint32]) {
    %627 = cast(%var_1753, dtype="float32") /* ty=Tensor[(6, 7, 3), float32] */;
    %628 = atan(%627) /* ty=Tensor[(6, 7, 3), float32] */;
    %629 = @func_514() /* ty=Tensor[(10, 1, 1), uint32] */;
    (%628, %629)
  };
  %630(%var_1802) /* ty=(Tensor[(6, 7, 3), float32], Tensor[(10, 1, 1), uint32]) */
}

def @func_4598() -> Tensor[(10, ?, ?), int64] {
  %632 = fn () -> Tensor[(10, ?, ?), int64] {
    %631 = @func_3568() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) */;
    %631.0
  };
  %632() /* ty=Tensor[(10, ?, ?), int64] */
}

def @func_3548(%var_3539: Tensor[(15, 11, 13), float32]) -> (Tensor[(15, 11, 13), float32], Tensor[(14, 10, 8), uint64]) {
  %633 = cast(%var_3539, dtype="float32") /* ty=Tensor[(15, 11, 13), float32] */;
  %634 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %635 = sigmoid(%633) /* ty=Tensor[(15, 11, 13), float32] */;
  %636 = %634.0;
  (%635, %636)
}

def @func_4749(%var_4746: Tensor[(3, 14, 2), bool], %var_4747: Tensor[(3, 14, 2), bool], %var_4748: Tensor[(3, 14, 2), bool]) -> (Tensor[(3, 14, 2), uint16], Tensor[(15, 1, 7), bool]) {
  %649 = fn (%var_4712: Tensor[(3, 14, 2), bool], %var_4713: Tensor[(3, 14, 2), bool], %var_4734: Tensor[(3, 14, 2), bool]) -> (Tensor[(3, 14, 2), uint16], Tensor[(15, 1, 7), bool]) {
    %637 = cast(%var_4713, dtype="bool") /* ty=Tensor[(3, 14, 2), bool] */;
    %638 = shape_of(%var_4712, dtype="int32") /* ty=Tensor[(3), int32] */;
    %639 = cast(%var_4712, dtype="bool") /* ty=Tensor[(3, 14, 2), bool] */;
    %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %641 = logical_and(%639, %640) /* ty=Tensor[(3, 14, 2), bool] */;
    %642 = cast(%var_4734, dtype="uint16") /* ty=Tensor[(3, 14, 2), uint16] */;
    %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %644 = cast(%641, dtype="uint16") /* ty=Tensor[(3, 14, 2), uint16] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %646 = @func_3418() /* ty=(Tensor[(720), float32], Tensor[(15, 1, 7), bool], Tensor[(105), uint32], Tensor[(2, 6, 11), float32], Tensor[(66, 2), float32], Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64]) */;
    %647 = add(%644, %645) /* ty=Tensor[(3, 14, 2), uint16] */;
    %648 = %646.1;
    (%647, %648)
  };
  %649(%var_4746, %var_4747, %var_4748) /* ty=(Tensor[(3, 14, 2), uint16], Tensor[(15, 1, 7), bool]) */
}

def @func_361() -> (Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) {
  %653 = fn () -> (Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) {
    %650 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %651 = %650.1;
    %652 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
    (%651, %652)
  };
  %653() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */
}

def @func_3568() -> (Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) {
  %654 = cast(meta[relay.Constant][37] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %655 = reshape(%654, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), float64] */;
  %656 = @func_1154(%655) /* ty=(Tensor[(12, 4, 15), float64], Tensor[(10, ?, ?), int64]) */;
  %657 = @func_2386() /* ty=Tensor[(10, ?, ?), int64] */;
  %658 = %656.1;
  (%657, %658, meta[relay.Constant][37] /* ty=Tensor[(720), float64] */)
}

def @func_4902() -> Tensor[(720), float64] {
  @func_4854() /* ty=Tensor[(720), float64] */
}

def @func_2489() -> Tensor[(10, 1, 1), uint32] {
  @func_2487() /* ty=Tensor[(10, 1, 1), uint32] */
}

def @func_4854() -> Tensor[(720), float64] {
  @func_3037() /* ty=Tensor[(720), float64] */
}

def @func_2949(%var_2947: uint32) -> (Tensor[(10, ?, ?), int64], Tensor[(10, 1, 1), float32], Tensor[(10, 1, 1), uint32], uint32) {
  %659 = @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */;
  %660 = @func_1712() /* ty=Tensor[(10, 1, 1), uint32] */;
  %661 = cast(%660, dtype="float32") /* ty=Tensor[(10, 1, 1), float32] */;
  %662 = cast(%var_2947, dtype="uint32") /* ty=uint32 */;
  %663 = cast(%660, dtype="uint32") /* ty=Tensor[(10, 1, 1), uint32] */;
  %664 = reshape(%662, newshape=[]) /* ty=uint32 */;
  %665 = reshape(%663, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), uint32] */;
  %666 = %659.0;
  %667 = tan(%661) /* ty=Tensor[(10, 1, 1), float32] */;
  %668 = @func_82(%664, %665) /* ty=Tensor[(10, 1, 1), uint32] */;
  (%666, %667, %668, %var_2947)
}

def @func_2894(%var_2893: Tensor[(77, 10), uint64]) -> (Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), bool], Tensor[(14, 10, 8), uint64], Tensor[(77, 10), uint64], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), float32]) {
  %696 = fn (%var_2873: Tensor[(77, 10), uint64]) -> (Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), bool], Tensor[(14, 10, 8), uint64], Tensor[(77, 10), uint64], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), float32]) {
    %669 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 40), float32] */, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
    %670 = reshape(%669, newshape=[80]) /* ty=Tensor[(80), float32] */;
    %671 = @func_2245(%670) /* ty=(Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(80), float32], Tensor[(10, 1, 1), uint32], uint32) */;
    %672 = @func_1884() /* ty=(uint32, Tensor[(10, ?, ?), int64]) */;
    %673 = %672.1;
    %674 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 40), float32] */, dtype="int8") /* ty=Tensor[(2, 40), int8] */;
    %675 = cast(%673, dtype="int8") /* ty=Tensor[(10, ?, ?), int8] */;
    %676 = right_shift(%674, %675) /* ty=Tensor[(10, 2, 40), int8] */;
    %677 = cast(%673, dtype="bool") /* ty=Tensor[(10, ?, ?), bool] */;
    %678 = cast(%676, dtype="bool") /* ty=Tensor[(10, 2, 40), bool] */;
    %679 = cast(%var_2873, dtype="uint64") /* ty=Tensor[(77, 10), uint64] */;
    %680 = cast(%var_2873, dtype="uint64") /* ty=Tensor[(77, 10), uint64] */;
    %681 = reshape(%679, newshape=[14, 11, 5]) /* ty=Tensor[(14, 11, 5), uint64] */;
    %682 = reshape(%680, newshape=[14, 11, 5]) /* ty=Tensor[(14, 11, 5), uint64] */;
    %683 = @func_747(%681, %682) /* ty=(Tensor[(14, 11, 5), uint64], Tensor[(13, 3, 13), float32], Tensor[(13, 39), float32], Tensor[(14, 10, 8), uint64]) */;
    %684 = @func_2400() /* ty=(Tensor[(14, 10, 8), uint64],) */;
    %685 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 40), float32] */, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
    %686 = reshape(%685, newshape=[80]) /* ty=Tensor[(80), float32] */;
    %687 = @func_2245(%686) /* ty=(Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(80), float32], Tensor[(10, 1, 1), uint32], uint32) */;
    %688 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 40), float32] */, dtype="float32") /* ty=Tensor[(2, 40), float32] */;
    %689 = cast(%676, dtype="float32") /* ty=Tensor[(10, 2, 40), float32] */;
    %690 = %671.3;
    %691 = greater_equal(%677, %678) /* ty=Tensor[(10, 2, 40), bool] */;
    %692 = %683.3;
    %693 = %684.0;
    %694 = %687.3;
    %695 = floor_mod(%688, %689) /* ty=Tensor[(10, 2, 40), float32] */;
    (%690, %691, %692, %var_2873, %693, %694, %695)
  };
  %696(%var_2893) /* ty=(Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), bool], Tensor[(14, 10, 8), uint64], Tensor[(77, 10), uint64], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), float32]) */
}

def @func_2722(%var_2720: Tensor[(10, 15, 13), uint32]) -> Tensor[(10, 15, 13), float64] {
  @func_2719(%var_2720) /* ty=Tensor[(10, 15, 13), float64] */
}

def @func_3144(%var_3142: Tensor[(21, 4), int16], %var_3143: Tensor[(720), float64]) -> (Tensor[(14, 10, 8), uint64], Tensor[(6, 1, 14), int64], Tensor[(21, 4), int16], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) {
  %707 = fn (%var_3132: Tensor[(21, 4), int16], %var_3137: Tensor[(720), float64]) -> (Tensor[(14, 10, 8), uint64], Tensor[(6, 1, 14), int64], Tensor[(21, 4), int16], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) {
    %697 = @func_2066() /* ty=(uint32, Tensor[(14, 10, 8), uint64]) */;
    %698 = cast(%var_3132, dtype="int16") /* ty=Tensor[(21, 4), int16] */;
    %699 = reshape(%698, newshape=[84]) /* ty=Tensor[(84), int16] */;
    %700 = @func_1858(%699) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(6, 1, 14), int64], int16, Tensor[(84), int16], Tensor[(10, 1, 1), uint32]) */;
    %701 = cast(%var_3137, dtype="float64") /* ty=Tensor[(720), float64] */;
    %702 = reshape(%701, newshape=[12, 4, 15]) /* ty=Tensor[(12, 4, 15), float64] */;
    %703 = @func_1154(%702) /* ty=(Tensor[(12, 4, 15), float64], Tensor[(10, ?, ?), int64]) */;
    %704 = %697.1;
    %705 = %700.1;
    %706 = %703.1;
    (%704, %705, %var_3132, %706, %var_3137)
  };
  %707(%var_3142, %var_3143) /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(6, 1, 14), int64], Tensor[(21, 4), int16], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) */
}

def @func_5427(%var_5410: Tensor[(160), float64]) -> (Tensor[(10, 1, 1), float32], Tensor[(10, 14, 10), uint8], Tensor[(14, 10, 8), uint64], Tensor[(10, 1, 1), uint32], Tensor[(14, 10, 8), uint64], Tensor[(14, 10, 8), uint64], Tensor[(160), float64], Tensor[(160), float64], uint32) {
  %708 = @func_4243() /* ty=Tensor[(10, 1, 1), uint32] */;
  %709 = cast(%708, dtype="float32") /* ty=Tensor[(10, 1, 1), float32] */;
  %710 = cast(%708, dtype="uint8") /* ty=Tensor[(10, 1, 1), uint8] */;
  %711 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 14, 10), uint32] */, dtype="uint8") /* ty=Tensor[(10, 14, 10), uint8] */;
  %712 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %713 = @func_2668() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(80, 1), float32], Tensor[(10, ?, ?), int64]) */;
  %714 = @func_2400() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %715 = @func_1397() /* ty=(Tensor[(14, 10, 8), uint64],) */;
  %716 = cast(%var_5410, dtype="float64") /* ty=Tensor[(160), float64] */;
  %717 = reshape(%716, newshape=[160]) /* ty=Tensor[(160), float64] */;
  %718 = @func_4519(%717) /* ty=(Tensor[(7, 3, 1), float32], Tensor[(720), float64], Tensor[(160), float64]) */;
  %719 = @func_2668() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(80, 1), float32], Tensor[(10, ?, ?), int64]) */;
  %720 = sqrt(%709) /* ty=Tensor[(10, 1, 1), float32] */;
  %721 = maximum(%710, %711) /* ty=Tensor[(10, 14, 10), uint8] */;
  %722 = %712.0;
  %723 = %713.1;
  %724 = %714.0;
  %725 = %715.0;
  %726 = %718.2;
  %727 = %719.0;
  (%720, %721, %722, %723, %724, %725, %726, %var_5410, %727)
}

def @func_1551() -> (Tensor[(10, 1, 1), uint32],) {
  %729 = fn () -> (Tensor[(10, 1, 1), uint32],) {
    %728 = @func_514() /* ty=Tensor[(10, 1, 1), uint32] */;
    (%728,)
  };
  %729() /* ty=(Tensor[(10, 1, 1), uint32],) */
}

def @func_1931() -> (Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) {
  @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */
}

def @func_4828(%var_4826: Tensor[(960), uint32], %var_4827: Tensor[(80), float32]) -> (Tensor[(14, 10, 8), uint64], Tensor[(6, 16, 10), bool], Tensor[(960), uint32], uint32, Tensor[(80), float32], Tensor[(1, 390), int64], Tensor[(14, 10, 8), uint64]) {
  %745 = fn (%var_4800: Tensor[(960), uint32], %var_4805: Tensor[(80), float32]) -> (Tensor[(14, 10, 8), uint64], Tensor[(6, 16, 10), bool], Tensor[(960), uint32], uint32, Tensor[(80), float32], Tensor[(1, 390), int64], Tensor[(14, 10, 8), uint64]) {
    %730 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
    %731 = cast(%var_4800, dtype="uint32") /* ty=Tensor[(960), uint32] */;
    %732 = cast(%var_4800, dtype="uint32") /* ty=Tensor[(960), uint32] */;
    %733 = reshape(%731, newshape=[6, 16, 10]) /* ty=Tensor[(6, 16, 10), uint32] */;
    %734 = reshape(%732, newshape=[6, 16, 10]) /* ty=Tensor[(6, 16, 10), uint32] */;
    %735 = cast(%var_4805, dtype="float32") /* ty=Tensor[(80), float32] */;
    %736 = reshape(%735, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float32] */;
    %737 = @func_925(%736) /* ty=(Tensor[(10, 1, 1), uint32], uint32, Tensor[(10, ?, ?), int64], uint32, Tensor[(10, 8, 1), uint16]) */;
    %738 = @func_3578() /* ty=(Tensor[(105), uint32], Tensor[(1, 10), uint32], Tensor[(1, 390), int64]) */;
    %739 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %740 = %730.0;
    %741 = @func_3349(%733, %734) /* ty=Tensor[(6, 16, 10), bool] */;
    %742 = %737.1;
    %743 = %738.2;
    %744 = %739.0;
    (%740, %741, %var_4800, %742, %var_4805, %743, %744)
  };
  %745(%var_4826, %var_4827) /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(6, 16, 10), bool], Tensor[(960), uint32], uint32, Tensor[(80), float32], Tensor[(1, 390), int64], Tensor[(14, 10, 8), uint64]) */
}

def @func_2825(%var_2824: Tensor[(84), int16]) -> (Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), bool], Tensor[(10, ?, ?), float64], Tensor[(6, 1, 14), int16], Tensor[(84), int16], Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(22), bool], Tensor[(10, ?, ?), bool]) {
  %778 = fn (%var_2793: Tensor[(84), int16]) -> (Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), bool], Tensor[(10, ?, ?), float64], Tensor[(6, 1, 14), int16], Tensor[(84), int16], Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(22), bool], Tensor[(10, ?, ?), bool]) {
    %746 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %747 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %748 = %747.2;
    %749 = cast(%748, dtype="float64") /* ty=Tensor[(10, ?, ?), float64] */;
    %750 = log(%749) /* ty=Tensor[(10, ?, ?), float64] */;
    %751 = @func_2066() /* ty=(uint32, Tensor[(14, 10, 8), uint64]) */;
    %752 = %751.0;
    %753 = cast(%750, dtype="bool") /* ty=Tensor[(10, ?, ?), bool] */;
    %754 = cast(%752, dtype="bool") /* ty=bool */;
    %755 = cast(%750, dtype="float64") /* ty=Tensor[(10, ?, ?), float64] */;
    %756 = cast(%752, dtype="int16") /* ty=int16 */;
    %757 = cast(%var_2793, dtype="int16") /* ty=Tensor[(84), int16] */;
    %758 = reshape(%756, newshape=[]) /* ty=int16 */;
    %759 = reshape(%757, newshape=[6, 1, 14]) /* ty=Tensor[(6, 1, 14), int16] */;
    %760 = @func_1503(%758, %759) /* ty=(Tensor[(6, 1, 14), int16], Tensor[(6, 1, 14), int64]) */;
    %761 = cast(meta[relay.Constant][40] /* ty=Tensor[(22), bool] */, dtype="bool") /* ty=Tensor[(22), bool] */;
    %762 = reshape(%761, newshape=[22]) /* ty=Tensor[(22), bool] */;
    %763 = @func_818(%762) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(2, 11, ?), bool], Tensor[(22), bool]) */;
    %764 = cast(%748, dtype="uint32") /* ty=Tensor[(10, ?, ?), uint32] */;
    %765 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
    %766 = cast(%750, dtype="uint32") /* ty=Tensor[(10, ?, ?), uint32] */;
    %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %768 = bitwise_or(%766, %767) /* ty=Tensor[(10, ?, ?), uint32] */;
    %769 = cast(%768, dtype="bool") /* ty=Tensor[(10, ?, ?), bool] */;
    %770 = cast(%752, dtype="bool") /* ty=bool */;
    %771 = %746.0;
    %772 = equal(%753, %754) /* ty=Tensor[(10, ?, ?), bool] */;
    %773 = exp(%755) /* ty=Tensor[(10, ?, ?), float64] */;
    %774 = %760.0;
    %775 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
    %776 = %763.0;
    %777 = greater_equal(%769, %770) /* ty=Tensor[(10, ?, ?), bool] */;
    (%771, %772, %773, %774, %var_2793, %775, %776, meta[relay.Constant][40] /* ty=Tensor[(22), bool] */, %777)
  };
  %778(%var_2824) /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), bool], Tensor[(10, ?, ?), float64], Tensor[(6, 1, 14), int16], Tensor[(84), int16], Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(22), bool], Tensor[(10, ?, ?), bool]) */
}

def @func_1367(%var_1365: Tensor[(14, 10, 8), uint64]) -> (Tensor[(10, ?, ?), int64], Tensor[(14, 10, 8), float64], Tensor[(14, 10, 8), uint8]) {
  @func_1364(%var_1365) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(14, 10, 8), float64], Tensor[(14, 10, 8), uint8]) */
}

def @func_2363(%var_2362: Tensor[(15, 1, 7), uint32]) -> Tensor[(15, 1, 7), bool] {
  %783 = fn (%var_2340: Tensor[(15, 1, 7), uint32]) -> Tensor[(15, 1, 7), bool] {
    %779 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %780 = %779.0;
    %781 = cast(%780, dtype="bool") /* ty=bool */;
    %782 = cast(%var_2340, dtype="bool") /* ty=Tensor[(15, 1, 7), bool] */;
    equal(%781, %782) /* ty=Tensor[(15, 1, 7), bool] */
  };
  %783(%var_2362) /* ty=Tensor[(15, 1, 7), bool] */
}

def @func_820(%var_819: Tensor[(22), bool]) -> (Tensor[(10, ?, ?), int64], Tensor[(2, 11, ?), bool], Tensor[(22), bool]) {
  %790 = fn (%var_806: Tensor[(22), bool]) -> (Tensor[(10, ?, ?), int64], Tensor[(2, 11, ?), bool], Tensor[(22), bool]) {
    %784 = cast(%var_806, dtype="bool") /* ty=Tensor[(22), bool] */;
    %785 = cast(%var_806, dtype="bool") /* ty=Tensor[(22), bool] */;
    %786 = reshape(%784, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), bool] */;
    %787 = reshape(%785, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), bool] */;
    %788 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
    %789 = @func_581(%786, %787) /* ty=Tensor[(2, 11, ?), bool] */;
    (%788, %789, %var_806)
  };
  %790(%var_819) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(2, 11, ?), bool], Tensor[(22), bool]) */
}

def @func_1398() -> (Tensor[(14, 10, 8), uint64],) {
  %793 = fn () -> (Tensor[(14, 10, 8), uint64],) {
    %791 = @func_963() /* ty=(Tensor[(14, 10, 8), uint64],) */;
    %792 = %791.0;
    (%792,)
  };
  %793() /* ty=(Tensor[(14, 10, 8), uint64],) */
}

def @func_5854(%var_5846: Tensor[(10, 12, 16), float64]) -> (Tensor[(10, 12, 16), bool], Tensor[(720), float64]) {
  %794 = @func_3761() /* ty=(Tensor[(10, ?, ?), float64],) */;
  %795 = %794.0;
  %796 = cast(%795, dtype="bool") /* ty=Tensor[(10, ?, ?), bool] */;
  %797 = cast(%var_5846, dtype="bool") /* ty=Tensor[(10, 12, 16), bool] */;
  %798 = @func_1929() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(12, 4, 15), float64], Tensor[(720), float64]) */;
  %799 = logical_or(%796, %797) /* ty=Tensor[(10, 12, 16), bool] */;
  %800 = %798.2;
  (%799, %800)
}

def @func_3570() -> (Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) {
  @func_3568() /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, ?, ?), int64], Tensor[(720), float64]) */
}

def @func_5620(%var_5611: uint32) -> (Tensor[(720), float64], Tensor[(720), float64], Tensor[(10, 1, 1), float32], uint32) {
  %801 = cast(%var_5611, dtype="uint32") /* ty=uint32 */;
  %802 = reshape(%801, newshape=[]) /* ty=uint32 */;
  %803 = @func_2949(%802) /* ty=(Tensor[(10, ?, ?), int64], Tensor[(10, 1, 1), float32], Tensor[(10, 1, 1), uint32], uint32) */;
  %804 = @func_3037() /* ty=Tensor[(720), float64] */;
  %805 = @func_4854() /* ty=Tensor[(720), float64] */;
  %806 = %803.1;
  (%804, %805, %806, %var_5611)
}

def @func_4191(%var_4189: Tensor[(2, 80), float64]) -> (Tensor[(14, 10, 8), uint64], Tensor[(105), uint32], Tensor[(105), uint32], Tensor[(10, ?, ?), bool], Tensor[(2, 80), float64]) {
  @func_4188(%var_4189) /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(105), uint32], Tensor[(105), uint32], Tensor[(10, ?, ?), bool], Tensor[(2, 80), float64]) */
}

def @func_2838(%var_2827: Tensor[(2, 6, 11), float32]) -> Tensor[(2, 6, 11), float32] {
  %807 = cast(%var_2827, dtype="float32") /* ty=Tensor[(2, 6, 11), float32] */;
  sigmoid(%807) /* ty=Tensor[(2, 6, 11), float32] */
}

def @func_4349() -> (Tensor[(10, ?, ?), int64],) {
  %810 = fn () -> (Tensor[(10, ?, ?), int64],) {
    %808 = @func_2965() /* ty=(Tensor[(10, ?, ?), int64],) */;
    %809 = %808.0;
    (%809,)
  };
  %810() /* ty=(Tensor[(10, ?, ?), int64],) */
}

def @func_3294(%var_3292: Tensor[(15, 7, 7), int16], %var_3293: Tensor[(15, 7, 7), int16]) -> (Tensor[(14, 10, 8), uint64], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(10, 15, 13), float64], Tensor[(1, 1950), uint32], Tensor[(240), uint8], Tensor[(507), float32], Tensor[(77, 10), uint64], Tensor[(770), uint64], Tensor[(15, 7, 7), uint8]) {
  %837 = fn (%var_3235: Tensor[(15, 7, 7), int16], %var_3236: Tensor[(15, 7, 7), int16]) -> (Tensor[(14, 10, 8), uint64], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(10, 15, 13), float64], Tensor[(1, 1950), uint32], Tensor[(240), uint8], Tensor[(507), float32], Tensor[(77, 10), uint64], Tensor[(770), uint64], Tensor[(15, 7, 7), uint8]) {
    %811 = @func_1397() /* ty=(Tensor[(14, 10, 8), uint64],) */;
    %812 = @func_2400() /* ty=(Tensor[(14, 10, 8), uint64],) */;
    %813 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 1950), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1950), uint32] */;
    %814 = reshape(%813, newshape=[10, 15, 13]) /* ty=Tensor[(10, 15, 13), uint32] */;
    %815 = cast(meta[relay.Constant][42] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
    %816 = reshape(%815, newshape=[507]) /* ty=Tensor[(507), float32] */;
    %817 = @func_1699(%816) /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(8, 2, 15), uint8], Tensor[(240), uint8], Tensor[(14, 10, 8), uint64], Tensor[(13, 3, 13), uint32]) */;
    %818 = cast(meta[relay.Constant][43] /* ty=Tensor[(770), uint64] */, dtype="uint64") /* ty=Tensor[(770), uint64] */;
    %819 = reshape(%818, newshape=[77, 10]) /* ty=Tensor[(77, 10), uint64] */;
    %820 = @func_2892(%819) /* ty=(Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), bool], Tensor[(14, 10, 8), uint64], Tensor[(77, 10), uint64], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), float32]) */;
    %821 = cast(%var_3236, dtype="int16") /* ty=Tensor[(15, 7, 7), int16] */;
    %822 = shape_of(%var_3235, dtype="int32") /* ty=Tensor[(3), int32] */;
    %823 = cast(%var_3235, dtype="int16") /* ty=Tensor[(15, 7, 7), int16] */;
    %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %825 = bitwise_and(%823, %824) /* ty=Tensor[(15, 7, 7), int16] */;
    %826 = cast(%var_3235, dtype="uint8") /* ty=Tensor[(15, 7, 7), uint8] */;
    %827 = shape_of(%825, dtype="int32") /* ty=Tensor[(3), int32] */;
    %828 = cast(%825, dtype="uint8") /* ty=Tensor[(15, 7, 7), uint8] */;
    %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %830 = %811.0;
    %831 = %812.0;
    %832 = @func_313() /* ty=Tensor[(10, ?, ?), int64] */;
    %833 = @func_2719(%814) /* ty=Tensor[(10, 15, 13), float64] */;
    %834 = %817.2;
    %835 = %820.3;
    %836 = multiply(%828, %829) /* ty=Tensor[(15, 7, 7), uint8] */;
    (%830, %831, %832, %833, meta[relay.Constant][41] /* ty=Tensor[(1, 1950), uint32] */, %834, meta[relay.Constant][42] /* ty=Tensor[(507), float32] */, %835, meta[relay.Constant][43] /* ty=Tensor[(770), uint64] */, %836)
  };
  %837(%var_3292, %var_3293) /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64], Tensor[(10, 15, 13), float64], Tensor[(1, 1950), uint32], Tensor[(240), uint8], Tensor[(507), float32], Tensor[(77, 10), uint64], Tensor[(770), uint64], Tensor[(15, 7, 7), uint8]) */
}

def @func_964() -> (Tensor[(14, 10, 8), uint64],) {
  %840 = fn () -> (Tensor[(14, 10, 8), uint64],) {
    %838 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %839 = %838.0;
    (%839,)
  };
  %840() /* ty=(Tensor[(14, 10, 8), uint64],) */
}

def @func_3551(%var_3549: Tensor[(15, 11, 13), float32]) -> (Tensor[(15, 11, 13), float32], Tensor[(14, 10, 8), uint64]) {
  @func_3548(%var_3549) /* ty=(Tensor[(15, 11, 13), float32], Tensor[(14, 10, 8), uint64]) */
}

def @func_4680(%var_4678: Tensor[(16, 13, 1), float32], %var_4679: Tensor[(16, 13, 16), float32]) -> (Tensor[(16, 13, 16), bool],) {
  @func_4676(%var_4678, %var_4679) /* ty=(Tensor[(16, 13, 16), bool],) */
}

def @func_2487() -> Tensor[(10, 1, 1), uint32] {
  %841 = @func_1550() /* ty=(Tensor[(10, 1, 1), uint32],) */;
  %841.0
}

def @func_4522(%var_4520: Tensor[(160), float64]) -> (Tensor[(7, 3, 1), float32], Tensor[(720), float64], Tensor[(160), float64]) {
  @func_4519(%var_4520) /* ty=(Tensor[(7, 3, 1), float32], Tensor[(720), float64], Tensor[(160), float64]) */
}

def @func_1037() -> Tensor[(10, ?, ?), int64] {
  %843 = fn () -> Tensor[(10, ?, ?), int64] {
    %842 = @func_360() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %842.1
  };
  %843() /* ty=Tensor[(10, ?, ?), int64] */
}

def @func_3353(%var_3351: Tensor[(6, 16, 10), uint32], %var_3352: Tensor[(6, 16, 10), uint32]) -> Tensor[(6, 16, 10), bool] {
  @func_3349(%var_3351, %var_3352) /* ty=Tensor[(6, 16, 10), bool] */
}

def @func_1156(%var_1155: Tensor[(12, 4, 15), float64]) -> (Tensor[(12, 4, 15), float64], Tensor[(10, ?, ?), int64]) {
  %850 = fn (%var_1141: Tensor[(12, 4, 15), float64]) -> (Tensor[(12, 4, 15), float64], Tensor[(10, ?, ?), int64]) {
    %844 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 4, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 4, 15), float64] */;
    %845 = shape_of(%var_1141, dtype="int32") /* ty=Tensor[(3), int32] */;
    %846 = cast(%var_1141, dtype="float64") /* ty=Tensor[(12, 4, 15), float64] */;
    %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %848 = floor_divide(%846, %847) /* ty=Tensor[(12, 4, 15), float64] */;
    %849 = @func_1036() /* ty=Tensor[(10, ?, ?), int64] */;
    (%848, %849)
  };
  %850(%var_1155) /* ty=(Tensor[(12, 4, 15), float64], Tensor[(10, ?, ?), int64]) */
}

def @func_3498(%var_3495: Tensor[(770), uint64]) -> (Tensor[(10, ?, ?), int64], Tensor[(10, 1, 1), uint32], Tensor[(10, 2, 40), bool], Tensor[(770), uint64]) {
  %851 = cast(%var_3495, dtype="uint64") /* ty=Tensor[(770), uint64] */;
  %852 = reshape(%851, newshape=[77, 10]) /* ty=Tensor[(77, 10), uint64] */;
  %853 = @func_2892(%852) /* ty=(Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), bool], Tensor[(14, 10, 8), uint64], Tensor[(77, 10), uint64], Tensor[(14, 10, 8), uint64], Tensor[(10, ?, 720), uint16], Tensor[(10, 2, 40), float32]) */;
  %854 = @func_2516() /* ty=Tensor[(10, ?, ?), int64] */;
  %855 = @func_2928() /* ty=Tensor[(10, 1, 1), uint32] */;
  %856 = %853.1;
  (%854, %855, %856, %var_3495)
}

def @func_376() -> (uint32, Tensor[(10, 1, 1), uint32], Tensor[(1, 10), uint32]) {
  %864 = fn () -> (uint32, Tensor[(10, 1, 1), uint32], Tensor[(1, 10), uint32]) {
    %857 = @func_277() /* ty=(uint32, Tensor[(14, 10, 8), uint64], Tensor[(10, ?, ?), int64]) */;
    %858 = %857.0;
    %859 = cast(%858, dtype="uint32") /* ty=uint32 */;
    %860 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 10), uint32] */, dtype="uint32") /* ty=Tensor[(1, 10), uint32] */;
    %861 = reshape(%859, newshape=[]) /* ty=uint32 */;
    %862 = reshape(%860, newshape=[10, 1, 1]) /* ty=Tensor[(10, 1, 1), uint32] */;
    %863 = @func_82(%861, %862) /* ty=Tensor[(10, 1, 1), uint32] */;
    (%858, %863, meta[relay.Constant][45] /* ty=Tensor[(1, 10), uint32] */)
  };
  %864() /* ty=(uint32, Tensor[(10, 1, 1), uint32], Tensor[(1, 10), uint32]) */
}

def @func_2841(%var_2839: Tensor[(2, 6, 11), float32]) -> Tensor[(2, 6, 11), float32] {
  @func_2838(%var_2839) /* ty=Tensor[(2, 6, 11), float32] */
}

def @func_6474() -> (Tensor[(7, 3, 1), float64], Tensor[(720), float64]) {
  %871 = fn () -> (Tensor[(7, 3, 1), float64], Tensor[(720), float64]) {
    %865 = @func_4380() /* ty=(Tensor[(7, 3, 1), float64], Tensor[(720), float64]) */;
    %866 = %865.0;
    %867 = cast(%866, dtype="float64") /* ty=Tensor[(7, 3, 1), float64] */;
    %868 = @func_6058() /* ty=(Tensor[(14, 10, 8), uint64], Tensor[(14, 10, 8), uint64], Tensor[(720), float64]) */;
    %869 = log2(%867) /* ty=Tensor[(7, 3, 1), float64] */;
    %870 = %868.2;
    (%869, %870)
  };
  %871() /* ty=(Tensor[(7, 3, 1), float64], Tensor[(720), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen493/build/output.py", line 2319, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:23:37] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

