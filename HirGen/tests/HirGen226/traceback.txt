==========mod==========
#[version = "0.0.5"]
def @func_145(%var_137: Tensor[(13, 16, 4), float64]) -> (Tensor[(13, 16, 4), float64],) {
  %0 = cast(%var_137, dtype="float64") /* ty=Tensor[(13, 16, 4), float64] */;
  %1 = log2(%0) /* ty=Tensor[(13, 16, 4), float64] */;
  (%1,)
}

def @func_3365() -> (Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) {
  %2 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(108), int8] */, dtype="int8") /* ty=Tensor[(108), int8] */;
  %4 = reshape(%3, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), int8] */;
  %5 = @func_529(%4) /* ty=(Tensor[(9, 4, 3), int8], Tensor[(13, 16, 4), float64], Tensor[(4, 208), float64], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32]) */;
  %6 = %2.0;
  %7 = %5.4;
  (%6, %7, meta[relay.Constant][0] /* ty=Tensor[(108), int8] */)
}

def @func_1027(%var_1017: Tensor[(13, 3, 10), float32], %var_1025: Tensor[(15, 9), float32]) -> (Tensor[(13, 3, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(15, 9), float32]) {
  %8 = cast(%var_1017, dtype="float32") /* ty=Tensor[(13, 3, 10), float32] */;
  %9 = cast(-3.23173f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %10 = cast(%var_1025, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
  %11 = reshape(%9, newshape=[]) /* ty=float32 */;
  %12 = reshape(%10, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %13 = acos(%8) /* ty=Tensor[(13, 3, 10), float32] */;
  %14 = @func_578(%11, %12) /* ty=Tensor[(15, 9), float32] */;
  (%13, %14, -3.23173f /* ty=float32 */, %var_1025)
}

def @func_6931(%var_6902: Tensor[(72), float32], %var_6903: Tensor[(275), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(5, 12, 12), bool], Tensor[(72), float32], Tensor[(275), float32], Tensor[(150), float32], Tensor[(75), float32], Tensor[(6, 12, 10), float32]) {
  %15 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %16 = cast(%var_6902, dtype="float32") /* ty=Tensor[(72), float32] */;
  %17 = %15.0;
  %18 = cast(%17, dtype="int64") /* ty=Tensor[(6, 12, 10), int64] */;
  %19 = cast(%var_6903, dtype="float32") /* ty=Tensor[(275), float32] */;
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %22 = reshape(%16, newshape=[4, 6, 3]) /* ty=Tensor[(4, 6, 3), float32] */;
  %23 = reshape(%18, newshape=[720]) /* ty=Tensor[(720), int64] */;
  %24 = reshape(%19, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %25 = reshape(%20, newshape=[5, 30]) /* ty=Tensor[(5, 30), float32] */;
  %26 = reshape(%21, newshape=[75]) /* ty=Tensor[(75), float32] */;
  %27 = @func_6075(%22, %23, %24, %25, %26) /* ty=(Tensor[(4, 6, 3), float32], Tensor[(5, 12, 12), bool], Tensor[(720), int64], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(10, 5, 3), uint8], Tensor[(5, 30), float32], Tensor[(5, 3, 5), float64], Tensor[(75), float32]) */;
  %28 = @func_3947() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %29 = %27.1;
  %30 = %28.0;
  (%17, %29, %var_6902, %var_6903, meta[relay.Constant][1] /* ty=Tensor[(150), float32] */, meta[relay.Constant][2] /* ty=Tensor[(75), float32] */, %30)
}

def @func_6075(%var_6035: Tensor[(4, 6, 3), float32], %var_6040: Tensor[(720), int64], %var_6044: Tensor[(275), float32], %var_6058: Tensor[(5, 30), float32], %var_6066: Tensor[(75), float32]) -> (Tensor[(4, 6, 3), float32], Tensor[(5, 12, 12), bool], Tensor[(720), int64], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(10, 5, 3), uint8], Tensor[(5, 30), float32], Tensor[(5, 3, 5), float64], Tensor[(75), float32]) {
  %31 = cast(%var_6035, dtype="float32") /* ty=Tensor[(4, 6, 3), float32] */;
  %32 = cast(%var_6040, dtype="int64") /* ty=Tensor[(720), int64] */;
  %33 = reshape(%32, newshape=[5, 12, 12]) /* ty=Tensor[(5, 12, 12), int64] */;
  %34 = @func_1776(%33) /* ty=(Tensor[(5, 12, 12), bool], Tensor[(5, 12, 12), float64]) */;
  %35 = cast(%var_6044, dtype="float32") /* ty=Tensor[(275), float32] */;
  %36 = reshape(%35, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %37 = @func_3264(%36) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */;
  %38 = cast(%var_6058, dtype="float32") /* ty=Tensor[(5, 30), float32] */;
  %39 = reshape(%38, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), float32] */;
  %40 = @func_5699(%39) /* ty=(Tensor[(10, 5, 3), uint8], Tensor[(10, ?, 3), int32], Tensor[(10, 1, 3), float32], Tensor[(10, 5, 3), int16]) */;
  %41 = cast(%var_6066, dtype="float32") /* ty=Tensor[(75), float32] */;
  %42 = cast(%var_6066, dtype="float32") /* ty=Tensor[(75), float32] */;
  %43 = reshape(%41, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %44 = reshape(%42, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %45 = @func_742(%43, %44) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 3, 5), float64]) */;
  %46 = sqrt(%31) /* ty=Tensor[(4, 6, 3), float32] */;
  %47 = %34.0;
  %48 = %37.1;
  %49 = %40.0;
  %50 = %45.1;
  (%46, %47, %var_6040, %48, %var_6044, %49, %var_6058, %50, %var_6066)
}

def @func_5170(%var_5161: Tensor[(10, 13, 14), uint16], %var_5162: Tensor[(10, 13, 14), uint16]) -> (Tensor[(10, 13, 14), bool], Tensor[(240, 1), float32]) {
  %51 = cast(%var_5162, dtype="bool") /* ty=Tensor[(10, 13, 14), bool] */;
  %52 = shape_of(%var_5161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%var_5161, dtype="bool") /* ty=Tensor[(10, 13, 14), bool] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %55 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
  %56 = greater(%53, %54) /* ty=Tensor[(10, 13, 14), bool] */;
  %57 = %55.1;
  (%56, %57)
}

def @func_1072(%var_1040: Tensor[(2, 3, 2), int8], %var_1050: Tensor[(2, 3, 2), int8], %var_1066: Tensor[(2, 3, 2), int8]) -> (Tensor[(2, 3, 2), uint16], Tensor[(2, 3, 2), bool]) {
  %58 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 3, 2), int8] */, dtype="int8") /* ty=Tensor[(2, 3, 2), int8] */;
  %59 = shape_of(%var_1040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_1040, dtype="int8") /* ty=Tensor[(2, 3, 2), int8] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %62 = bitwise_and(%60, %61) /* ty=Tensor[(2, 3, 2), int8] */;
  %63 = cast(%var_1050, dtype="uint16") /* ty=Tensor[(2, 3, 2), uint16] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="uint16") /* ty=Tensor[(2, 3, 2), uint16] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %67 = cast(%var_1066, dtype="bool") /* ty=Tensor[(2, 3, 2), bool] */;
  %68 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(2, 3, 2), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 3, 2), int8] */, dtype="bool") /* ty=Tensor[(2, 3, 2), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %71 = multiply(%65, %66) /* ty=Tensor[(2, 3, 2), uint16] */;
  %72 = equal(%69, %70) /* ty=Tensor[(2, 3, 2), bool] */;
  (%71, %72)
}

def @func_4560() -> (Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) {
  %73 = @func_4513() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(275), float32] */, dtype="float32") /* ty=Tensor[(275), float32] */;
  %75 = reshape(%74, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float32] */;
  %76 = @func_2629(%75) /* ty=(Tensor[(11, 5, 5), float32],) */;
  %77 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %78 = @func_4024() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32], Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32]) */;
  %79 = %73.0;
  %80 = %76.0;
  %81 = %77.0;
  %82 = %78.2;
  (%79, %80, meta[relay.Constant][4] /* ty=Tensor[(275), float32] */, %81, %82)
}

def @func_7661() -> Tensor[(420), float64] {
  %83 = @func_5158() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64]) */;
  %83.3
}

def @func_4449() -> Tensor[(6, 12, 10), float32] {
  @func_4145() /* ty=Tensor[(6, 12, 10), float32] */
}

def @func_4707(%var_4673: Tensor[(135), float32], %var_4689: Tensor[(12), uint32]) -> (Tensor[(6, 12, 10), float32], Tensor[(13, 3, 10), float32], Tensor[(390), float32], Tensor[(135), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32], Tensor[(2, 2, 3), uint32], Tensor[(5, 3, 5), float64], Tensor[(15, 5), float32]) {
  %84 = @func_4513() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %85 = cast(meta[relay.Constant][5] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %86 = cast(%var_4673, dtype="float32") /* ty=Tensor[(135), float32] */;
  %87 = reshape(%85, newshape=[13, 3, 10]) /* ty=Tensor[(13, 3, 10), float32] */;
  %88 = reshape(%86, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %89 = @func_1027(%87, %88) /* ty=(Tensor[(13, 3, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(15, 9), float32]) */;
  %90 = cast(meta[relay.Constant][6] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %91 = cast(%var_4689, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %92 = reshape(%90, newshape=[]) /* ty=uint32 */;
  %93 = reshape(%91, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), uint32] */;
  %94 = @func_2667(%92, %93) /* ty=(Tensor[(2, 2, 3), uint32],) */;
  %95 = cast(meta[relay.Constant][6] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %96 = %94.0;
  %97 = cast(%96, dtype="uint32") /* ty=Tensor[(2, 2, 3), uint32] */;
  %98 = reshape(%95, newshape=[]) /* ty=uint32 */;
  %99 = reshape(%97, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), uint32] */;
  %100 = @func_2667(%98, %99) /* ty=(Tensor[(2, 2, 3), uint32],) */;
  %101 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 5), float32] */, dtype="float32") /* ty=Tensor[(15, 5), float32] */;
  %102 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 5), float32] */, dtype="float32") /* ty=Tensor[(15, 5), float32] */;
  %103 = reshape(%101, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %104 = reshape(%102, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %105 = @func_742(%103, %104) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 3, 5), float64]) */;
  %106 = %84.0;
  %107 = %89.0;
  %108 = %100.0;
  %109 = %105.1;
  (%106, %107, meta[relay.Constant][5] /* ty=Tensor[(390), float32] */, %var_4673, %96, meta[relay.Constant][6] /* ty=uint32 */, %var_4689, %108, %109, meta[relay.Constant][7] /* ty=Tensor[(15, 5), float32] */)
}

def @func_3581(%var_3576: Tensor[(135), float32]) -> (Tensor[(15, 9), float32], Tensor[(390), float32], Tensor[(15, 13, 16), int32], Tensor[(135), float64]) {
  %110 = cast(meta[relay.Constant][8] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %111 = cast(meta[relay.Constant][9] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %112 = reshape(%110, newshape=[13, 3, 10]) /* ty=Tensor[(13, 3, 10), float32] */;
  %113 = reshape(%111, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %114 = @func_1027(%112, %113) /* ty=(Tensor[(13, 3, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(15, 9), float32]) */;
  %115 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 13, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 13, 16), float64] */;
  %116 = sqrt(%115) /* ty=Tensor[(15, 13, 16), float64] */;
  %117 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 13, 16), float64] */, dtype="int32") /* ty=Tensor[(15, 13, 16), int32] */;
  %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%116, dtype="int32") /* ty=Tensor[(15, 13, 16), int32] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %121 = cast(%var_3576, dtype="float64") /* ty=Tensor[(135), float64] */;
  %122 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(135), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %123 = cast(meta[relay.Constant][9] /* ty=Tensor[(135), float32] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?), float64] */;
  %125 = %114.1;
  %126 = right_shift(%119, %120) /* ty=Tensor[(15, 13, 16), int32] */;
  %127 = mod(%123, %124) /* ty=Tensor[(135), float64] */;
  (%125, meta[relay.Constant][8] /* ty=Tensor[(390), float32] */, %126, %127)
}

def @func_4968() -> Tensor[(6, 12, 10), float64] {
  %128 = @func_4513() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %129 = %128.0;
  %130 = cast(%129, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  sqrt(%130) /* ty=Tensor[(6, 12, 10), float64] */
}

def @func_6503(%var_6480: Tensor[(180), float32]) -> (Tensor[(2, 6, 15), float32], Tensor[(180), float32], Tensor[(6, 12, 10), float64]) {
  %131 = cast(%var_6480, dtype="float32") /* ty=Tensor[(180), float32] */;
  %132 = cast(%var_6480, dtype="float32") /* ty=Tensor[(180), float32] */;
  %133 = reshape(%131, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), float32] */;
  %134 = reshape(%132, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), float32] */;
  %135 = @func_3115(%133, %134) /* ty=(Tensor[(2, 6, 15), float32], Tensor[(2, 6, 15), float64]) */;
  %136 = @func_5455() /* ty=Tensor[(6, 12, 10), float32] */;
  %137 = cast(%136, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  %138 = %135.0;
  %139 = rsqrt(%137) /* ty=Tensor[(6, 12, 10), float64] */;
  (%138, %var_6480, %139)
}

def @func_3264(%var_3254: Tensor[(275), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) {
  %140 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %141 = %140.0;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(6, 12, 10), float32] */;
  %143 = cast(%var_3254, dtype="float32") /* ty=Tensor[(275), float32] */;
  %144 = reshape(%143, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float32] */;
  %145 = @func_2629(%144) /* ty=(Tensor[(11, 5, 5), float32],) */;
  %146 = acosh(%142) /* ty=Tensor[(6, 12, 10), float32] */;
  %147 = %145.0;
  (%146, %147, %var_3254)
}

def @func_4623(%var_4569: Tensor[(8, 11, 9), uint8]) -> (Tensor[(8, 11, 9), bool], Tensor[(6, 12, 10), float32]) {
  %148 = cast(%var_4569, dtype="bool") /* ty=Tensor[(8, 11, 9), bool] */;
  %149 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(8, 11, 9), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 11, 9), uint8] */, dtype="bool") /* ty=Tensor[(8, 11, 9), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = @func_4513() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %153 = less(%150, %151) /* ty=Tensor[(8, 11, 9), bool] */;
  %154 = %152.0;
  (%153, %154)
}

def @func_5205() -> (Tensor[(420), float64], Tensor[(11, 5, 5), float32], Tensor[(1, 275), float32]) {
  %155 = @func_5158() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64]) */;
  %156 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 275), float32] */, dtype="float32") /* ty=Tensor[(1, 275), float32] */;
  %157 = reshape(%156, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float32] */;
  %158 = @func_2629(%157) /* ty=(Tensor[(11, 5, 5), float32],) */;
  %159 = %155.3;
  %160 = %158.0;
  (%159, %160, meta[relay.Constant][12] /* ty=Tensor[(1, 275), float32] */)
}

def @func_1185(%var_1178: Tensor[(15, 10, 12), float64]) -> (Tensor[(15, 10, 12), float64], Tensor[(2, 3, 2), bool], Tensor[(12), int8]) {
  %161 = cast(%var_1178, dtype="float64") /* ty=Tensor[(15, 10, 12), float64] */;
  %162 = cast(meta[relay.Constant][13] /* ty=Tensor[(12), int8] */, dtype="int8") /* ty=Tensor[(12), int8] */;
  %163 = cast(meta[relay.Constant][13] /* ty=Tensor[(12), int8] */, dtype="int8") /* ty=Tensor[(12), int8] */;
  %164 = cast(meta[relay.Constant][13] /* ty=Tensor[(12), int8] */, dtype="int8") /* ty=Tensor[(12), int8] */;
  %165 = reshape(%162, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
  %166 = reshape(%163, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
  %167 = reshape(%164, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
  %168 = @func_1072(%165, %166, %167) /* ty=(Tensor[(2, 3, 2), uint16], Tensor[(2, 3, 2), bool]) */;
  %169 = log(%161) /* ty=Tensor[(15, 10, 12), float64] */;
  %170 = %168.1;
  (%169, %170, meta[relay.Constant][13] /* ty=Tensor[(12), int8] */)
}

def @func_4431() -> Tensor[(6, 12, 10), float32] {
  @func_3431() /* ty=Tensor[(6, 12, 10), float32] */
}

def @func_1316(%var_1280: Tensor[(10, 4, 2), uint64], %var_1281: Tensor[(10, 4, 2), uint64], %var_1310: Tensor[(10, 4, 2), uint64]) -> (Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) {
  %171 = cast(%var_1281, dtype="bool") /* ty=Tensor[(10, 4, 2), bool] */;
  %172 = shape_of(%var_1280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%var_1280, dtype="bool") /* ty=Tensor[(10, 4, 2), bool] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %175 = cast(%var_1310, dtype="int8") /* ty=Tensor[(10, 4, 2), int8] */;
  %176 = shape_of(%var_1280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%var_1280, dtype="int8") /* ty=Tensor[(10, 4, 2), int8] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %179 = less(%173, %174) /* ty=Tensor[(10, 4, 2), bool] */;
  %180 = maximum(%177, %178) /* ty=Tensor[(10, 4, 2), int8] */;
  (%179, %180)
}

def @func_625(%var_592: Tensor[(3, 3, 5), float32], %var_609: int8) -> (Tensor[(3, 3, 5), float64], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64]) {
  %181 = cast(%var_592, dtype="float32") /* ty=Tensor[(3, 3, 5), float32] */;
  %182 = log2(%181) /* ty=Tensor[(3, 3, 5), float32] */;
  %183 = cast(%182, dtype="float64") /* ty=Tensor[(3, 3, 5), float64] */;
  %184 = cast(%var_609, dtype="int8") /* ty=int8 */;
  %185 = cast(meta[relay.Constant][14] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %186 = reshape(%184, newshape=[]) /* ty=int8 */;
  %187 = reshape(%185, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float64] */;
  %188 = @func_122(%186, %187) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */;
  %189 = log(%183) /* ty=Tensor[(3, 3, 5), float64] */;
  %190 = %188.6;
  (%189, %190, %var_609, meta[relay.Constant][14] /* ty=Tensor[(420), float64] */)
}

def @func_5158() -> (Tensor[(6, 12, 10), float32], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64]) {
  %191 = @func_4560() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) */;
  %192 = cast(meta[relay.Constant][15] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %193 = cast(meta[relay.Constant][16] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %194 = reshape(%192, newshape=[]) /* ty=int8 */;
  %195 = reshape(%193, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float64] */;
  %196 = @func_122(%194, %195) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */;
  %197 = %191.3;
  %198 = %196.6;
  (%197, %198, meta[relay.Constant][15] /* ty=int8 */, meta[relay.Constant][16] /* ty=Tensor[(420), float64] */)
}

def @func_2109(%var_2101: Tensor[(3, 7, 14), float32], %var_2102: Tensor[(3, 7, 14), float32]) -> Tensor[(3, 7, 14), float32] {
  %199 = cast(%var_2102, dtype="float32") /* ty=Tensor[(3, 7, 14), float32] */;
  %200 = shape_of(%var_2101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%var_2101, dtype="float32") /* ty=Tensor[(3, 7, 14), float32] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%201, %202) /* ty=Tensor[(3, 7, 14), float32] */
}

def @func_4145() -> Tensor[(6, 12, 10), float32] {
  %203 = @func_3947() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %203.0
}

def @func_6410(%var_6393: int8) -> (Tensor[(6, 12, 10), float64], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64], Tensor[(6, 12, 10), float32]) {
  %204 = @func_6302() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %205 = %204.0;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  %207 = cast(%var_6393, dtype="int8") /* ty=int8 */;
  %208 = cast(meta[relay.Constant][17] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %209 = reshape(%207, newshape=[]) /* ty=int8 */;
  %210 = reshape(%208, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float64] */;
  %211 = @func_122(%209, %210) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */;
  %212 = @func_6302() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %213 = log(%206) /* ty=Tensor[(6, 12, 10), float64] */;
  %214 = %211.6;
  %215 = %212.0;
  (%213, %214, %var_6393, meta[relay.Constant][17] /* ty=Tensor[(420), float64] */, %215)
}

def @func_6648() -> (Tensor[(6, 12, 10), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float64]) {
  %216 = @func_5365() /* ty=(Tensor[(275), float32], Tensor[(6, 12, 10), float32]) */;
  %217 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %218 = %217.0;
  %219 = cast(%218, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  %220 = @func_4431() /* ty=Tensor[(6, 12, 10), float32] */;
  %221 = %216.0;
  %222 = sinh(%219) /* ty=Tensor[(6, 12, 10), float64] */;
  (%220, %221, %222)
}

def @func_7596() -> Tensor[(6, 12, 10), float32] {
  %223 = @func_3947() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %223.0
}

def @func_7518() -> (Tensor[(6, 12, 10), float32], Tensor[(275), uint16], Tensor[(275), float32]) {
  %224 = cast(meta[relay.Constant][18] /* ty=Tensor[(275), float32] */, dtype="float32") /* ty=Tensor[(275), float32] */;
  %225 = reshape(%224, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %226 = @func_5089(%225) /* ty=(Tensor[(275), float32], Tensor[(275), uint16]) */;
  %227 = @func_3963() /* ty=Tensor[(6, 12, 10), float32] */;
  %228 = %226.1;
  (%227, %228, meta[relay.Constant][18] /* ty=Tensor[(275), float32] */)
}

def @func_3201() -> Tensor[(6, 12, 10), float32] {
  %229 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %229.0
}

def @func_3755(%var_3713: float32, %var_3714: Tensor[(2, 216), float32], %var_3715: Tensor[(1, 420), float64], %var_3740: Tensor[(6, 12, 10), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(5, 16, 3), float32], float32, Tensor[(2, 216), float32], Tensor[(1, 420), float64], Tensor[(6, 12, 10), int32]) {
  %230 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %231 = cast(%var_3713, dtype="float32") /* ty=float32 */;
  %232 = cast(%var_3714, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
  %233 = cast(%var_3715, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %234 = reshape(%231, newshape=[]) /* ty=float32 */;
  %235 = reshape(%232, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), float32] */;
  %236 = reshape(%233, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %237 = @func_474(%234, %235, %236) /* ty=(Tensor[(9, 12, 4), float32], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32], Tensor[(5, 16, 3), float32], Tensor[(420), float64]) */;
  %238 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %239 = %238.0;
  %240 = cast(%var_3740, dtype="int32") /* ty=Tensor[(6, 12, 10), int32] */;
  %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%239, dtype="int32") /* ty=Tensor[(6, 12, 10), int32] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %244 = %230.0;
  %245 = %237.3;
  %246 = subtract(%242, %243) /* ty=Tensor[(6, 12, 10), int32] */;
  (%244, %245, %var_3713, %var_3714, %var_3715, %246)
}

def @func_6821() -> Tensor[(6, 12, 10), float32] {
  %247 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %247.0
}

def @func_6302() -> (Tensor[(6, 12, 10), float32],) {
  %248 = @func_5008() /* ty=(Tensor[(5, 12, 12), bool], Tensor[(6, 12, 10), float64], Tensor[(6, 12, 10), float32]) */;
  %249 = %248.2;
  (%249,)
}

def @func_3455() -> (Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32]) {
  %250 = @func_3201() /* ty=Tensor[(6, 12, 10), float32] */;
  %251 = @func_3431() /* ty=Tensor[(6, 12, 10), float32] */;
  (%250, %251)
}

def @func_5286(%var_5278: float32, %var_5279: Tensor[(6, 5, 7), float32]) -> (Tensor[(6, 5, 7), float32],) {
  %252 = cast(%var_5278, dtype="float32") /* ty=float32 */;
  %253 = cast(%var_5279, dtype="float32") /* ty=Tensor[(6, 5, 7), float32] */;
  %254 = power(%252, %253) /* ty=Tensor[(6, 5, 7), float32] */;
  (%254,)
}

def @func_3688(%var_3679: Tensor[(330), float32], %var_3683: uint32, %var_3684: Tensor[(12), uint32]) -> (Tensor[(6, 12, 10), int32], Tensor[(6, 5, 11), bool], Tensor[(330), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32]) {
  %255 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %256 = %255.0;
  %257 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 12, 10), float32] */, dtype="int32") /* ty=Tensor[(6, 12, 10), int32] */;
  %258 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%256, dtype="int32") /* ty=Tensor[(6, 12, 10), int32] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %261 = cast(%var_3679, dtype="float32") /* ty=Tensor[(330), float32] */;
  %262 = cast(%var_3679, dtype="float32") /* ty=Tensor[(330), float32] */;
  %263 = cast(%var_3679, dtype="float32") /* ty=Tensor[(330), float32] */;
  %264 = reshape(%261, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float32] */;
  %265 = reshape(%262, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float32] */;
  %266 = reshape(%263, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float32] */;
  %267 = @func_3530(%264, %265, %266) /* ty=(Tensor[(6, 5, 11), float32], Tensor[(6, 5, 11), bool]) */;
  %268 = cast(%var_3683, dtype="uint32") /* ty=uint32 */;
  %269 = cast(%var_3684, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %270 = reshape(%268, newshape=[]) /* ty=uint32 */;
  %271 = reshape(%269, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), uint32] */;
  %272 = @func_2667(%270, %271) /* ty=(Tensor[(2, 2, 3), uint32],) */;
  %273 = bitwise_and(%259, %260) /* ty=Tensor[(6, 12, 10), int32] */;
  %274 = %267.1;
  %275 = %272.0;
  (%273, %274, %var_3679, %275, %var_3683, %var_3684)
}

def @func_3051(%var_3004: Tensor[(14, 3, 2), uint32], %var_3005: Tensor[(14, 3, 2), uint32]) -> (Tensor[(14, 3, 2), float32], Tensor[(14, 3, 2), float32], Tensor[(2, 6, 9), float32], Tensor[(18, 6), float32]) {
  %276 = cast(%var_3005, dtype="float32") /* ty=Tensor[(14, 3, 2), float32] */;
  %277 = cast(%var_3005, dtype="uint32") /* ty=Tensor[(14, 3, 2), uint32] */;
  %278 = shape_of(%var_3004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%var_3004, dtype="uint32") /* ty=Tensor[(14, 3, 2), uint32] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %281 = right_shift(%279, %280) /* ty=Tensor[(14, 3, 2), uint32] */;
  %282 = cast(%281, dtype="float32") /* ty=Tensor[(14, 3, 2), float32] */;
  %283 = cast(meta[relay.Constant][20] /* ty=Tensor[(18, 6), float32] */, dtype="float32") /* ty=Tensor[(18, 6), float32] */;
  %284 = reshape(%283, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
  %285 = @func_1256(%284) /* ty=(Tensor[(2, 6, 9), float32],) */;
  %286 = cosh(%276) /* ty=Tensor[(14, 3, 2), float32] */;
  %287 = sin(%282) /* ty=Tensor[(14, 3, 2), float32] */;
  %288 = %285.0;
  (%286, %287, %288, meta[relay.Constant][20] /* ty=Tensor[(18, 6), float32] */)
}

def @func_474(%var_446: float32, %var_447: Tensor[(9, 12, 4), float32], %var_458: Tensor[(420), float64]) -> (Tensor[(9, 12, 4), float32], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32], Tensor[(5, 16, 3), float32], Tensor[(420), float64]) {
  %289 = cast(%var_446, dtype="float32") /* ty=float32 */;
  %290 = cast(%var_447, dtype="float32") /* ty=Tensor[(9, 12, 4), float32] */;
  %291 = cast(meta[relay.Constant][21] /* ty=Tensor[(240, 1), float32] */, dtype="float32") /* ty=Tensor[(240, 1), float32] */;
  %292 = reshape(%291, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
  %293 = @func_26(%292) /* ty=(Tensor[(5, 16, 3), float32],) */;
  %294 = cast(%var_446, dtype="int8") /* ty=int8 */;
  %295 = cast(%var_458, dtype="float64") /* ty=Tensor[(420), float64] */;
  %296 = reshape(%294, newshape=[]) /* ty=int8 */;
  %297 = reshape(%295, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float64] */;
  %298 = @func_122(%296, %297) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */;
  %299 = floor_mod(%289, %290) /* ty=Tensor[(9, 12, 4), float32] */;
  %300 = %293.0;
  %301 = %298.5;
  (%299, %300, meta[relay.Constant][21] /* ty=Tensor[(240, 1), float32] */, %301, %var_458)
}

def @func_3218() -> (Tensor[(6, 12, 10), float32],) {
  %302 = @func_3201() /* ty=Tensor[(6, 12, 10), float32] */;
  (%302,)
}

def @func_8092(%var_8084: Tensor[(14, 5, 6), float32], %var_8085: Tensor[(14, 5, 6), float32]) -> (Tensor[(14, 5, 6), bool], Tensor[(6, 12, 10), float32]) {
  %303 = cast(%var_8085, dtype="bool") /* ty=Tensor[(14, 5, 6), bool] */;
  %304 = shape_of(%var_8084, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%var_8084, dtype="bool") /* ty=Tensor[(14, 5, 6), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %307 = @func_6302() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %308 = greater(%305, %306) /* ty=Tensor[(14, 5, 6), bool] */;
  %309 = %307.0;
  (%308, %309)
}

def @func_5455() -> Tensor[(6, 12, 10), float32] {
  %310 = @func_3947() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %310.0
}

def @func_5585(%var_5501: Tensor[(6, 12, 10), float64], %var_5512: Tensor[(420, 1), float64], %var_5517: Tensor[(80, 1), uint64], %var_5560: Tensor[(14, 130), uint16], %var_5578: Tensor[(12), int8]) -> (Tensor[(36), float32], Tensor[(429), int32], Tensor[(36), float32], Tensor[(420, 1), float64], Tensor[(10, 4, 2), int8], Tensor[(80, 1), uint64], Tensor[(6, 12, 10), float64], Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(14, 130), uint16], Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32], float32, Tensor[(12), int8]) {
  %311 = cast(meta[relay.Constant][22] /* ty=Tensor[(429), int32] */, dtype="int32") /* ty=Tensor[(429), int32] */;
  %312 = cast(meta[relay.Constant][23] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %313 = cast(%var_5512, dtype="float64") /* ty=Tensor[(420, 1), float64] */;
  %314 = reshape(%311, newshape=[13, 11, 3]) /* ty=Tensor[(13, 11, 3), int32] */;
  %315 = reshape(%312, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %316 = reshape(%313, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %317 = @func_866(%314, %315, %316) /* ty=(Tensor[(13, 11, 3), bool], Tensor[(420), float64], Tensor[(36), float32], Tensor[(420), float64]) */;
  %318 = cast(%var_5517, dtype="uint64") /* ty=Tensor[(80, 1), uint64] */;
  %319 = cast(%var_5517, dtype="uint64") /* ty=Tensor[(80, 1), uint64] */;
  %320 = cast(%var_5517, dtype="uint64") /* ty=Tensor[(80, 1), uint64] */;
  %321 = reshape(%318, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %322 = reshape(%319, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %323 = reshape(%320, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %324 = @func_1316(%321, %322, %323) /* ty=(Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) */;
  %325 = @func_5008() /* ty=(Tensor[(5, 12, 12), bool], Tensor[(6, 12, 10), float64], Tensor[(6, 12, 10), float32]) */;
  %326 = @func_4560() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) */;
  %327 = cast(%var_5560, dtype="uint16") /* ty=Tensor[(14, 130), uint16] */;
  %328 = cast(%var_5560, dtype="uint16") /* ty=Tensor[(14, 130), uint16] */;
  %329 = reshape(%327, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint16] */;
  %330 = reshape(%328, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint16] */;
  %331 = @func_5170(%329, %330) /* ty=(Tensor[(10, 13, 14), bool], Tensor[(240, 1), float32]) */;
  %332 = @func_4294() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %333 = %332.0;
  %334 = cast(%333, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  %335 = sin(%334) /* ty=Tensor[(6, 12, 10), float64] */;
  %336 = cast(%var_5501, dtype="bool") /* ty=Tensor[(6, 12, 10), bool] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%335, dtype="bool") /* ty=Tensor[(6, 12, 10), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %340 = less(%338, %339) /* ty=Tensor[(6, 12, 10), bool] */;
  %341 = cast(%340, dtype="float32") /* ty=Tensor[(6, 12, 10), float32] */;
  %342 = @func_5008() /* ty=(Tensor[(5, 12, 12), bool], Tensor[(6, 12, 10), float64], Tensor[(6, 12, 10), float32]) */;
  %343 = cast(%var_5578, dtype="int8") /* ty=Tensor[(12), int8] */;
  %344 = reshape(%343, newshape=[12]) /* ty=Tensor[(12), int8] */;
  %345 = @func_3336(%344) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(420), float64], float32, Tensor[(432), float32], Tensor[(420), float64], Tensor[(2, 3, 2), bool], Tensor[(12), int8], Tensor[(5, 12, 12), bool]) */;
  %346 = %317.2;
  %347 = %324.1;
  %348 = %325.1;
  %349 = %326.3;
  %350 = %331.1;
  %351 = exp(%341) /* ty=Tensor[(6, 12, 10), float32] */;
  %352 = %342.2;
  %353 = %345.2;
  (%346, meta[relay.Constant][22] /* ty=Tensor[(429), int32] */, meta[relay.Constant][23] /* ty=Tensor[(36), float32] */, %var_5512, %347, %var_5517, %348, %349, %350, %var_5560, %351, %352, %353, %var_5578)
}

def @func_4943() -> (Tensor[(6, 12, 10), float64], Tensor[(135), float64], Tensor[(135), float32]) {
  %354 = @func_4486() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %355 = %354.0;
  %356 = cast(%355, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  %357 = cast(meta[relay.Constant][24] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %358 = reshape(%357, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %359 = @func_3581(%358) /* ty=(Tensor[(15, 9), float32], Tensor[(390), float32], Tensor[(15, 13, 16), int32], Tensor[(135), float64]) */;
  %360 = atan(%356) /* ty=Tensor[(6, 12, 10), float64] */;
  %361 = %359.3;
  (%360, %361, meta[relay.Constant][24] /* ty=Tensor[(135), float32] */)
}

def @func_7752(%var_7702: Tensor[(6, 12, 10), float32], %var_7708: float32, %var_7726: Tensor[(72), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(135), float32], Tensor[(3, 7, 14), float32], Tensor[(294), float32], Tensor[(6, 12, 10), float32], Tensor[(72), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32]) {
  %362 = @func_5058() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %363 = %362.0;
  %364 = cast(%var_7702, dtype="float32") /* ty=Tensor[(6, 12, 10), float32] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%363, dtype="float32") /* ty=Tensor[(6, 12, 10), float32] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %368 = cast(%var_7708, dtype="float32") /* ty=float32 */;
  %369 = cast(meta[relay.Constant][25] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %370 = reshape(%368, newshape=[]) /* ty=float32 */;
  %371 = reshape(%369, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %372 = cast(meta[relay.Constant][26] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %373 = cast(meta[relay.Constant][26] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %374 = reshape(%372, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
  %375 = reshape(%373, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
  %376 = cast(%var_7726, dtype="float32") /* ty=Tensor[(72), float32] */;
  %377 = cast(meta[relay.Constant][27] /* ty=Tensor[(275), float32] */, dtype="float32") /* ty=Tensor[(275), float32] */;
  %378 = reshape(%376, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %379 = reshape(%377, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %380 = @func_6931(%378, %379) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(5, 12, 12), bool], Tensor[(72), float32], Tensor[(275), float32], Tensor[(150), float32], Tensor[(75), float32], Tensor[(6, 12, 10), float32]) */;
  %381 = @func_4486() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %382 = divide(%366, %367) /* ty=Tensor[(6, 12, 10), float32] */;
  %383 = @func_578(%370, %371) /* ty=Tensor[(15, 9), float32] */;
  %384 = @func_2109(%374, %375) /* ty=Tensor[(3, 7, 14), float32] */;
  %385 = %380.0;
  %386 = %381.0;
  (%382, %383, %var_7708, meta[relay.Constant][25] /* ty=Tensor[(135), float32] */, %384, meta[relay.Constant][26] /* ty=Tensor[(294), float32] */, %385, %var_7726, meta[relay.Constant][27] /* ty=Tensor[(275), float32] */, %386)
}

def @func_3947() -> (Tensor[(6, 12, 10), float32],) {
  %387 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
  %388 = %387.0;
  (%388,)
}

def @func_6881() -> Tensor[(6, 12, 10), float64] {
  %389 = @func_4943() /* ty=(Tensor[(6, 12, 10), float64], Tensor[(135), float64], Tensor[(135), float32]) */;
  %389.0
}

def @func_5741(%var_5717: Tensor[(108), int8], %var_5734: Tensor[(36), float32], %var_5736: Tensor[(420), float64]) -> (Tensor[(6, 12, 10), float32], Tensor[(13, 16, 4), float64], Tensor[(108), int8], Tensor[(135), float32], Tensor[(36), float32], int8, Tensor[(420), float64]) {
  %390 = @func_4024() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32], Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32]) */;
  %391 = cast(%var_5717, dtype="int8") /* ty=Tensor[(108), int8] */;
  %392 = reshape(%391, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), int8] */;
  %393 = @func_529(%392) /* ty=(Tensor[(9, 4, 3), int8], Tensor[(13, 16, 4), float64], Tensor[(4, 208), float64], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32]) */;
  %394 = cast(%var_5734, dtype="float32") /* ty=Tensor[(36), float32] */;
  %395 = cast(%var_5734, dtype="float32") /* ty=Tensor[(36), float32] */;
  %396 = cast(%var_5734, dtype="float32") /* ty=Tensor[(36), float32] */;
  %397 = cast(meta[relay.Constant][28] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %398 = cast(%var_5736, dtype="float64") /* ty=Tensor[(420), float64] */;
  %399 = reshape(%394, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), float32] */;
  %400 = reshape(%395, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), float32] */;
  %401 = reshape(%396, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), float32] */;
  %402 = reshape(%397, newshape=[]) /* ty=int8 */;
  %403 = reshape(%398, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %404 = @func_816(%399, %400, %401, %402, %403) /* ty=(Tensor[(4, 3, 3), float32], Tensor[(4, 3, 3), bool], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64], Tensor[(4, 3, 3), float64], Tensor[(15, 9), float32], Tensor[(135), float32]) */;
  %405 = %390.4;
  %406 = %393.1;
  %407 = %404.7;
  (%405, %406, %var_5717, %407, %var_5734, meta[relay.Constant][28] /* ty=int8 */, %var_5736)
}

def @func_5008() -> (Tensor[(5, 12, 12), bool], Tensor[(6, 12, 10), float64], Tensor[(6, 12, 10), float32]) {
  %408 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %409 = %408.0;
  %410 = cast(%409, dtype="int64") /* ty=Tensor[(6, 12, 10), int64] */;
  %411 = reshape(%410, newshape=[5, 12, 12]) /* ty=Tensor[(5, 12, 12), int64] */;
  %412 = @func_1776(%411) /* ty=(Tensor[(5, 12, 12), bool], Tensor[(5, 12, 12), float64]) */;
  %413 = cast(%409, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  %414 = @func_4260() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %415 = %412.0;
  %416 = log10(%413) /* ty=Tensor[(6, 12, 10), float64] */;
  %417 = %414.0;
  (%415, %416, %417)
}

def @func_3906(%var_3875: Tensor[(6, 12, 10), float32]) -> (Tensor[(6, 12, 10), bool], Tensor[(6, 5, 11), bool], Tensor[(330), float32], Tensor[(6, 12, 10), float32], Tensor[(5, 12, 12), bool]) {
  %418 = @func_3455() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32]) */;
  %419 = %418.0;
  %420 = cast(%var_3875, dtype="uint16") /* ty=Tensor[(6, 12, 10), uint16] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="uint16") /* ty=Tensor[(6, 12, 10), uint16] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %424 = add(%422, %423) /* ty=Tensor[(6, 12, 10), uint16] */;
  %425 = cast(%424, dtype="bool") /* ty=Tensor[(6, 12, 10), bool] */;
  %426 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%419, dtype="bool") /* ty=Tensor[(6, 12, 10), bool] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %429 = cast(meta[relay.Constant][29] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %430 = cast(meta[relay.Constant][29] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %431 = cast(meta[relay.Constant][29] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %432 = reshape(%429, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float32] */;
  %433 = reshape(%430, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float32] */;
  %434 = reshape(%431, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float32] */;
  %435 = @func_3530(%432, %433, %434) /* ty=(Tensor[(6, 5, 11), float32], Tensor[(6, 5, 11), bool]) */;
  %436 = @func_3455() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32]) */;
  %437 = cast(%419, dtype="int64") /* ty=Tensor[(6, 12, 10), int64] */;
  %438 = reshape(%437, newshape=[5, 12, 12]) /* ty=Tensor[(5, 12, 12), int64] */;
  %439 = @func_1776(%438) /* ty=(Tensor[(5, 12, 12), bool], Tensor[(5, 12, 12), float64]) */;
  %440 = less_equal(%427, %428) /* ty=Tensor[(6, 12, 10), bool] */;
  %441 = %435.1;
  %442 = %436.1;
  %443 = %439.0;
  (%440, %441, meta[relay.Constant][29] /* ty=Tensor[(330), float32] */, %442, %443)
}

def @func_4486() -> (Tensor[(6, 12, 10), float32],) {
  %444 = @func_4260() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %445 = %444.0;
  (%445,)
}

def @func_122(%var_46: int8, %var_107: Tensor[(6, 7, 10), float64]) -> (Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) {
  %446 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 7, 10), int8] */, dtype="float64") /* ty=Tensor[(6, 7, 10), float64] */;
  %447 = acosh(%446) /* ty=Tensor[(6, 7, 10), float64] */;
  %448 = cast(%447, dtype="float32") /* ty=Tensor[(6, 7, 10), float32] */;
  %449 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %450 = reshape(%449, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
  %451 = @func_26(%450) /* ty=(Tensor[(5, 16, 3), float32],) */;
  %452 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %453 = reshape(%452, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
  %454 = @func_26(%453) /* ty=(Tensor[(5, 16, 3), float32],) */;
  %455 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %456 = reshape(%455, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
  %457 = @func_26(%456) /* ty=(Tensor[(5, 16, 3), float32],) */;
  %458 = %454.0;
  %459 = cast(%458, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
  %460 = reshape(%459, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
  %461 = @func_26(%460) /* ty=(Tensor[(5, 16, 3), float32],) */;
  %462 = cast(%var_46, dtype="bool") /* ty=bool */;
  %463 = cast(meta[relay.Constant][30] /* ty=Tensor[(6, 7, 10), int8] */, dtype="bool") /* ty=Tensor[(6, 7, 10), bool] */;
  %464 = greater_equal(%462, %463) /* ty=Tensor[(6, 7, 10), bool] */;
  %465 = cast(%464, dtype="uint32") /* ty=Tensor[(6, 7, 10), uint32] */;
  %466 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%447, dtype="uint32") /* ty=Tensor[(6, 7, 10), uint32] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %469 = cast(%458, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
  %470 = reshape(%469, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
  %471 = @func_26(%470) /* ty=(Tensor[(5, 16, 3), float32],) */;
  %472 = cast(%var_107, dtype="uint8") /* ty=Tensor[(6, 7, 10), uint8] */;
  %473 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %474 = cast(%447, dtype="uint8") /* ty=Tensor[(6, 7, 10), uint8] */;
  %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %476 = exp(%448) /* ty=Tensor[(6, 7, 10), float32] */;
  %477 = %451.0;
  %478 = %457.0;
  %479 = %461.0;
  %480 = bitwise_or(%467, %468) /* ty=Tensor[(6, 7, 10), uint32] */;
  %481 = %471.0;
  %482 = bitwise_xor(%474, %475) /* ty=Tensor[(6, 7, 10), uint8] */;
  (%476, %477, meta[relay.Constant][31] /* ty=Tensor[(240), float32] */, %458, %478, %479, %480, %481, %482)
}

def @func_7431() -> Tensor[(240, 1), float32] {
  %483 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
  %483.1
}

def @func_5089(%var_5074: Tensor[(275), float32]) -> (Tensor[(275), float32], Tensor[(275), uint16]) {
  %484 = @func_4560() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) */;
  %485 = %484.2;
  %486 = cast(%var_5074, dtype="float32") /* ty=Tensor[(275), float32] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(1), int32] */;
  %488 = cast(%485, dtype="float32") /* ty=Tensor[(275), float32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?), float32] */;
  %490 = cast(%485, dtype="uint16") /* ty=Tensor[(275), uint16] */;
  %491 = shape_of(%var_5074, dtype="int32") /* ty=Tensor[(1), int32] */;
  %492 = cast(%var_5074, dtype="uint16") /* ty=Tensor[(275), uint16] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %494 = floor_divide(%488, %489) /* ty=Tensor[(275), float32] */;
  %495 = bitwise_and(%492, %493) /* ty=Tensor[(275), uint16] */;
  (%494, %495)
}

def @func_8039() -> (Tensor[(6, 12, 10), float32], Tensor[(420), float64], float32) {
  %496 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %497 = cast(-9.11652f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %498 = reshape(%497, newshape=[]) /* ty=float32 */;
  %499 = @func_5790(%498) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(1, 420), float64], float32, Tensor[(432), float32], Tensor[(420), float64]) */;
  %500 = %496.0;
  %501 = %499.4;
  (%500, %501, -9.11652f /* ty=float32 */)
}

def @func_1776(%var_1740: Tensor[(5, 12, 12), int64]) -> (Tensor[(5, 12, 12), bool], Tensor[(5, 12, 12), float64]) {
  %502 = cast(%var_1740, dtype="bool") /* ty=Tensor[(5, 12, 12), bool] */;
  %503 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(5, 12, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 12, 12), int64] */, dtype="bool") /* ty=Tensor[(5, 12, 12), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %506 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 12, 12), int64] */, dtype="bool") /* ty=Tensor[(5, 12, 12), bool] */;
  %507 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(5, 12, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 12, 12), int64] */, dtype="bool") /* ty=Tensor[(5, 12, 12), bool] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %510 = greater(%508, %509) /* ty=Tensor[(5, 12, 12), bool] */;
  %511 = cast(%510, dtype="float32") /* ty=Tensor[(5, 12, 12), float32] */;
  %512 = asin(%511) /* ty=Tensor[(5, 12, 12), float32] */;
  %513 = cast(%512, dtype="float64") /* ty=Tensor[(5, 12, 12), float64] */;
  %514 = greater_equal(%504, %505) /* ty=Tensor[(5, 12, 12), bool] */;
  %515 = log(%513) /* ty=Tensor[(5, 12, 12), float64] */;
  (%514, %515)
}

def @func_6750(%var_6738: Tensor[(180), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(2, 3, 2), bool], Tensor[(1800), float64], Tensor[(180), float32], Tensor[(6, 12, 10), float32], Tensor[(2, 6, 15), float32]) {
  %516 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
  %517 = cast(meta[relay.Constant][34] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %518 = reshape(%517, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float64] */;
  %519 = @func_1185(%518) /* ty=(Tensor[(15, 10, 12), float64], Tensor[(2, 3, 2), bool], Tensor[(12), int8]) */;
  %520 = cast(%var_6738, dtype="float32") /* ty=Tensor[(180), float32] */;
  %521 = reshape(%520, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %522 = @func_6503(%521) /* ty=(Tensor[(2, 6, 15), float32], Tensor[(180), float32], Tensor[(6, 12, 10), float64]) */;
  %523 = %522.0;
  %524 = cast(%523, dtype="float32") /* ty=Tensor[(2, 6, 15), float32] */;
  %525 = %516.0;
  %526 = %519.1;
  %527 = @func_4431() /* ty=Tensor[(6, 12, 10), float32] */;
  %528 = cos(%524) /* ty=Tensor[(2, 6, 15), float32] */;
  (%525, %526, meta[relay.Constant][34] /* ty=Tensor[(1800), float64] */, %var_6738, %527, %528)
}

def @func_7047() -> Tensor[(6, 12, 10), float32] {
  %529 = @func_6345() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %529.0
}

def @func_5365() -> (Tensor[(275), float32], Tensor[(6, 12, 10), float32]) {
  %530 = @func_4560() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) */;
  %531 = @func_3947() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %532 = %530.2;
  %533 = %531.0;
  (%532, %533)
}

def @func_5128() -> (Tensor[(6, 12, 10), float32],) {
  %534 = @func_5058() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %535 = %534.0;
  (%535,)
}

def @func_5058() -> (Tensor[(6, 12, 10), float32],) {
  %536 = @func_4431() /* ty=Tensor[(6, 12, 10), float32] */;
  (%536,)
}

def @func_6189(%var_6125: Tensor[(6, 12, 10), float32], %var_6131: Tensor[(1800), float64]) -> (Tensor[(6, 12, 10), uint16], Tensor[(2, 3, 2), bool], Tensor[(1800), float64], Tensor[(6, 12, 10), float64], Tensor[(10, 4, 2), int8], Tensor[(80), uint64]) {
  %537 = @func_4449() /* ty=Tensor[(6, 12, 10), float32] */;
  %538 = cast(%var_6125, dtype="uint16") /* ty=Tensor[(6, 12, 10), uint16] */;
  %539 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%537, dtype="uint16") /* ty=Tensor[(6, 12, 10), uint16] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %542 = cast(%var_6131, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %543 = reshape(%542, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float64] */;
  %544 = @func_1185(%543) /* ty=(Tensor[(15, 10, 12), float64], Tensor[(2, 3, 2), bool], Tensor[(12), int8]) */;
  %545 = cast(%537, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  %546 = shape_of(%var_6125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%var_6125, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %549 = cast(meta[relay.Constant][35] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %550 = cast(meta[relay.Constant][35] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %551 = cast(meta[relay.Constant][35] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %552 = reshape(%549, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %553 = reshape(%550, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %554 = reshape(%551, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %555 = @func_1316(%552, %553, %554) /* ty=(Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) */;
  %556 = left_shift(%540, %541) /* ty=Tensor[(6, 12, 10), uint16] */;
  %557 = %544.1;
  %558 = mod(%547, %548) /* ty=Tensor[(6, 12, 10), float64] */;
  %559 = %555.1;
  (%556, %557, %var_6131, %558, %559, meta[relay.Constant][35] /* ty=Tensor[(80), uint64] */)
}

def @func_3530(%var_3507: Tensor[(6, 5, 11), float32], %var_3514: Tensor[(6, 5, 11), float32], %var_3521: Tensor[(6, 5, 11), float32]) -> (Tensor[(6, 5, 11), float32], Tensor[(6, 5, 11), bool]) {
  %560 = cast(meta[relay.Constant][36] /* ty=Tensor[(6, 5, 11), float32] */, dtype="float32") /* ty=Tensor[(6, 5, 11), float32] */;
  %561 = shape_of(%var_3507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%var_3507, dtype="float32") /* ty=Tensor[(6, 5, 11), float32] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %564 = floor_mod(%562, %563) /* ty=Tensor[(6, 5, 11), float32] */;
  %565 = cast(%var_3514, dtype="float32") /* ty=Tensor[(6, 5, 11), float32] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="float32") /* ty=Tensor[(6, 5, 11), float32] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %569 = cast(%var_3521, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %570 = shape_of(%var_3507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%var_3507, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = mod(%567, %568) /* ty=Tensor[(6, 5, 11), float32] */;
  %574 = not_equal(%571, %572) /* ty=Tensor[(6, 5, 11), bool] */;
  (%573, %574)
}

def @func_4086(%var_4073: Tensor[(6, 12, 10), float32], %var_4081: int8) -> (Tensor[(240, 1), float32], Tensor[(6, 12, 10), bool], Tensor[(420), float64], Tensor[(45), float32], int8) {
  %575 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
  %576 = @func_3963() /* ty=Tensor[(6, 12, 10), float32] */;
  %577 = cast(%var_4073, dtype="bool") /* ty=Tensor[(6, 12, 10), bool] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%576, dtype="bool") /* ty=Tensor[(6, 12, 10), bool] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %581 = cast(meta[relay.Constant][37] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
  %582 = cast(%var_4081, dtype="int8") /* ty=int8 */;
  %583 = reshape(%581, newshape=[3, 3, 5]) /* ty=Tensor[(3, 3, 5), float32] */;
  %584 = reshape(%582, newshape=[]) /* ty=int8 */;
  %585 = @func_625(%583, %584) /* ty=(Tensor[(3, 3, 5), float64], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64]) */;
  %586 = %575.1;
  %587 = greater(%579, %580) /* ty=Tensor[(6, 12, 10), bool] */;
  %588 = %585.3;
  (%586, %587, %588, meta[relay.Constant][37] /* ty=Tensor[(45), float32] */, %var_4081)
}

def @func_578(%var_567: float32, %var_568: Tensor[(15, 9), float32]) -> Tensor[(15, 9), float32] {
  %589 = cast(%var_567, dtype="float32") /* ty=float32 */;
  %590 = cast(%var_568, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
  divide(%589, %590) /* ty=Tensor[(15, 9), float32] */
}

def @func_4294() -> (Tensor[(6, 12, 10), float32],) {
  %591 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %592 = %591.0;
  (%592,)
}

def @func_4878(%var_4851: Tensor[(294, 1), float32]) -> (Tensor[(275), float32], Tensor[(6, 12, 10), float32], Tensor[(14, 14, 5), bool], Tensor[(14, 5), int16], Tensor[(6, 12, 10), float32], Tensor[(3, 7, 14), float32], Tensor[(294, 1), float32], Tensor[(275), float32]) {
  %593 = @func_4560() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) */;
  %594 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %595 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 5), int16] */, dtype="int16") /* ty=Tensor[(14, 5), int16] */;
  %596 = reshape(%595, newshape=[1, 14, 5]) /* ty=Tensor[(1, 14, 5), int16] */;
  %597 = @func_2395(%596) /* ty=(Tensor[(14, 14, 5), bool],) */;
  %598 = @func_4560() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) */;
  %599 = cast(%var_4851, dtype="float32") /* ty=Tensor[(294, 1), float32] */;
  %600 = cast(%var_4851, dtype="float32") /* ty=Tensor[(294, 1), float32] */;
  %601 = reshape(%599, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
  %602 = reshape(%600, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
  %603 = %593.2;
  %604 = cast(%603, dtype="float32") /* ty=Tensor[(275), float32] */;
  %605 = reshape(%604, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %606 = @func_3264(%605) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */;
  %607 = %594.0;
  %608 = %597.0;
  %609 = %598.0;
  %610 = @func_2109(%601, %602) /* ty=Tensor[(3, 7, 14), float32] */;
  %611 = %606.2;
  (%603, %607, %608, meta[relay.Constant][38] /* ty=Tensor[(14, 5), int16] */, %609, %610, %var_4851, %611)
}

def @func_5241(%var_5231: int8) -> (Tensor[(6, 12, 10), float32], Tensor[(420), float64], int8) {
  %612 = @func_4513() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %613 = %612.0;
  %614 = cast(%613, dtype="float32") /* ty=Tensor[(6, 12, 10), float32] */;
  %615 = cast(%var_5231, dtype="int8") /* ty=int8 */;
  %616 = reshape(%614, newshape=[6, 12, 10]) /* ty=Tensor[(6, 12, 10), float32] */;
  %617 = reshape(%615, newshape=[]) /* ty=int8 */;
  %618 = @func_4086(%616, %617) /* ty=(Tensor[(240, 1), float32], Tensor[(6, 12, 10), bool], Tensor[(420), float64], Tensor[(45), float32], int8) */;
  %619 = %618.2;
  (%613, %619, %var_5231)
}

def @func_26(%var_8: Tensor[(5, 16, 3), float32]) -> (Tensor[(5, 16, 3), float32],) {
  %620 = cast(%var_8, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
  %621 = tan(%620) /* ty=Tensor[(5, 16, 3), float32] */;
  (%621,)
}

def @func_7379() -> (Tensor[(6, 12, 10), float32],) {
  %622 = @func_4294() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %623 = %622.0;
  (%623,)
}

def @func_5699(%var_5633: Tensor[(10, 5, 3), float32]) -> (Tensor[(10, 5, 3), uint8], Tensor[(10, ?, 3), int32], Tensor[(10, 1, 3), float32], Tensor[(10, 5, 3), int16]) {
  %624 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 1, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
  %625 = acosh(%624) /* ty=Tensor[(10, 1, 3), float32] */;
  %626 = cast(%625, dtype="uint8") /* ty=Tensor[(10, 1, 3), uint8] */;
  %627 = cast(%var_5633, dtype="uint8") /* ty=Tensor[(10, 5, 3), uint8] */;
  %628 = cast(%625, dtype="int32") /* ty=Tensor[(10, 1, 3), int32] */;
  %629 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(10, 1, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 1, 3), float32] */, dtype="int32") /* ty=Tensor[(10, 1, 3), int32] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %632 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 1, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
  %633 = cast(%var_5633, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %634 = cast(%625, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
  %635 = floor_mod(%633, %634) /* ty=Tensor[(10, 5, 3), float32] */;
  %636 = cast(%635, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
  %637 = atan(%636) /* ty=Tensor[(10, 5, 3), float32] */;
  %638 = cast(%637, dtype="int16") /* ty=Tensor[(10, 5, 3), int16] */;
  %639 = cast(%625, dtype="int16") /* ty=Tensor[(10, 1, 3), int16] */;
  %640 = bitwise_and(%626, %627) /* ty=Tensor[(10, 5, 3), uint8] */;
  %641 = bitwise_xor(%630, %631) /* ty=Tensor[(10, ?, 3), int32] */;
  %642 = cosh(%632) /* ty=Tensor[(10, 1, 3), float32] */;
  %643 = minimum(%638, %639) /* ty=Tensor[(10, 5, 3), int16] */;
  (%640, %641, %642, %643)
}

def @func_5894() -> Tensor[(108), int8] {
  %644 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
  %644.2
}

def @func_7447() -> Tensor[(240, 1), float32] {
  %645 = @func_4024() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32], Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32]) */;
  %645.5
}

def @func_3149() -> (Tensor[(6, 12, 10), float32],) {
  %646 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 1), float32] */;
  %647 = cast(meta[relay.Constant][41] /* ty=Tensor[(6, 12, 10), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 10), float32] */;
  %648 = floor_mod(%646, %647) /* ty=Tensor[(6, 12, 10), float32] */;
  (%648,)
}

def @main(%var_8122: Tensor[(3, 9, 11), int64]) -> (Tensor[(6, 12, 10), float64], Tensor[(3, 9, 11), float32]) {
  %649 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 9, 11), int64] */, dtype="int64") /* ty=Tensor[(3, 9, 11), int64] */;
  %650 = shape_of(%var_8122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%var_8122, dtype="int64") /* ty=Tensor[(3, 9, 11), int64] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %653 = logical_xor(%651, %652) /* ty=Tensor[(3, 9, 11), int64] */;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(3, 9, 11), float64] */;
  %655 = atan(%654) /* ty=Tensor[(3, 9, 11), float64] */;
  %656 = cast(%655, dtype="float32") /* ty=Tensor[(3, 9, 11), float32] */;
  %657 = @func_6881() /* ty=Tensor[(6, 12, 10), float64] */;
  %658 = cosh(%656) /* ty=Tensor[(3, 9, 11), float32] */;
  (%657, %658)
}

def @func_7299() -> (Tensor[(6, 12, 10), float32],) {
  %659 = @func_3963() /* ty=Tensor[(6, 12, 10), float32] */;
  (%659,)
}

def @func_4179(%var_4158: Tensor[(80), uint64]) -> (Tensor[(10, 4, 2), bool], Tensor[(80), uint64], Tensor[(6, 12, 10), float64]) {
  %660 = cast(%var_4158, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %661 = cast(%var_4158, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %662 = cast(%var_4158, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %663 = reshape(%660, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %664 = reshape(%661, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %665 = reshape(%662, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %666 = @func_1316(%663, %664, %665) /* ty=(Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) */;
  %667 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %668 = %667.0;
  %669 = cast(%668, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  %670 = %666.0;
  %671 = cos(%669) /* ty=Tensor[(6, 12, 10), float64] */;
  (%670, %var_4158, %671)
}

def @func_4523(%var_4517: float64, %var_4518: Tensor[(6, 14, 6), float64]) -> Tensor[(6, 14, 6), float64] {
  %672 = cast(%var_4517, dtype="float64") /* ty=float64 */;
  %673 = cast(%var_4518, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  floor_divide(%672, %673) /* ty=Tensor[(6, 14, 6), float64] */
}

def @func_7262() -> (Tensor[(6, 12, 10), float32], Tensor[(180), float32], Tensor[(6, 30), float32]) {
  %674 = cast(meta[relay.Constant][43] /* ty=Tensor[(6, 30), float32] */, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %675 = reshape(%674, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %676 = @func_6750(%675) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(2, 3, 2), bool], Tensor[(1800), float64], Tensor[(180), float32], Tensor[(6, 12, 10), float32], Tensor[(2, 6, 15), float32]) */;
  %677 = @func_4449() /* ty=Tensor[(6, 12, 10), float32] */;
  %678 = %676.3;
  (%677, %678, meta[relay.Constant][43] /* ty=Tensor[(6, 30), float32] */)
}

def @func_6434() -> (Tensor[(6, 12, 10), float32],) {
  %679 = @func_3201() /* ty=Tensor[(6, 12, 10), float32] */;
  (%679,)
}

def @func_7137(%var_7113: Tensor[(275), float32], %var_7125: Tensor[(429), int32], %var_7127: Tensor[(420), float64]) -> (Tensor[(275), uint8], Tensor[(13, 11, 3), bool], Tensor[(429), int32], Tensor[(1, 36), float32], Tensor[(420), float64]) {
  %680 = @func_6648() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float64]) */;
  %681 = %680.1;
  %682 = cast(%681, dtype="float32") /* ty=Tensor[(275), float32] */;
  %683 = atan(%682) /* ty=Tensor[(275), float32] */;
  %684 = cast(%var_7113, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(1), int32] */;
  %686 = cast(%683, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %688 = cast(%var_7125, dtype="int32") /* ty=Tensor[(429), int32] */;
  %689 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 36), float32] */, dtype="float32") /* ty=Tensor[(1, 36), float32] */;
  %690 = cast(%var_7127, dtype="float64") /* ty=Tensor[(420), float64] */;
  %691 = reshape(%688, newshape=[13, 11, 3]) /* ty=Tensor[(13, 11, 3), int32] */;
  %692 = reshape(%689, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %693 = reshape(%690, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %694 = @func_866(%691, %692, %693) /* ty=(Tensor[(13, 11, 3), bool], Tensor[(420), float64], Tensor[(36), float32], Tensor[(420), float64]) */;
  %695 = logical_xor(%686, %687) /* ty=Tensor[(275), uint8] */;
  %696 = %694.0;
  (%695, %696, %var_7125, meta[relay.Constant][44] /* ty=Tensor[(1, 36), float32] */, %var_7127)
}

def @func_4260() -> (Tensor[(6, 12, 10), float32],) {
  %697 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %698 = %697.0;
  (%698,)
}

def @func_7984() -> (Tensor[(108), int8],) {
  %699 = @func_5894() /* ty=Tensor[(108), int8] */;
  (%699,)
}

def @func_4513() -> (Tensor[(6, 12, 10), float32],) {
  %700 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %701 = %700.0;
  (%701,)
}

def @func_3963() -> Tensor[(6, 12, 10), float32] {
  %702 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
  %702.0
}

def @func_5985(%var_5968: Tensor[(8, 16, 11), float64], %var_5980: Tensor[(8, 16, 11), bool]) -> Tensor[(8, 16, 11), float64] {
  %703 = cast(%var_5968, dtype="float64") /* ty=Tensor[(8, 16, 11), float64] */;
  %704 = cos(%703) /* ty=Tensor[(8, 16, 11), float64] */;
  %705 = cast(%704, dtype="bool") /* ty=Tensor[(8, 16, 11), bool] */;
  %706 = shape_of(%var_5968, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%var_5968, dtype="bool") /* ty=Tensor[(8, 16, 11), bool] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %709 = not_equal(%707, %708) /* ty=Tensor[(8, 16, 11), bool] */;
  %710 = cast(%var_5980, dtype="float64") /* ty=Tensor[(8, 16, 11), float64] */;
  %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%709, dtype="float64") /* ty=Tensor[(8, 16, 11), float64] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%712, %713) /* ty=Tensor[(8, 16, 11), float64] */
}

def @func_3836(%var_3821: int8) -> (Tensor[(6, 12, 10), float32], Tensor[(6, 7, 10), float32], int8, Tensor[(1, 420), float64]) {
  %714 = cast(%var_3821, dtype="int8") /* ty=int8 */;
  %715 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 420), float64] */, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %716 = reshape(%714, newshape=[]) /* ty=int8 */;
  %717 = reshape(%715, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float64] */;
  %718 = @func_122(%716, %717) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */;
  %719 = @func_3431() /* ty=Tensor[(6, 12, 10), float32] */;
  %720 = %718.0;
  (%719, %720, %var_3821, meta[relay.Constant][45] /* ty=Tensor[(1, 420), float64] */)
}

def @func_816(%var_777: Tensor[(4, 3, 3), float32], %var_778: Tensor[(4, 3, 3), float32], %var_783: Tensor[(4, 3, 3), float32], %var_798: int8, %var_799: Tensor[(420), float64]) -> (Tensor[(4, 3, 3), float32], Tensor[(4, 3, 3), bool], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64], Tensor[(4, 3, 3), float64], Tensor[(15, 9), float32], Tensor[(135), float32]) {
  %721 = cast(%var_778, dtype="float32") /* ty=Tensor[(4, 3, 3), float32] */;
  %722 = shape_of(%var_777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%var_777, dtype="float32") /* ty=Tensor[(4, 3, 3), float32] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %725 = cast(%var_783, dtype="bool") /* ty=Tensor[(4, 3, 3), bool] */;
  %726 = shape_of(%var_778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%var_778, dtype="bool") /* ty=Tensor[(4, 3, 3), bool] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %729 = cast(%var_798, dtype="int8") /* ty=int8 */;
  %730 = cast(%var_799, dtype="float64") /* ty=Tensor[(420), float64] */;
  %731 = reshape(%729, newshape=[]) /* ty=int8 */;
  %732 = reshape(%730, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float64] */;
  %733 = @func_122(%731, %732) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */;
  %734 = cast(%var_778, dtype="float64") /* ty=Tensor[(4, 3, 3), float64] */;
  %735 = cast(%var_798, dtype="float32") /* ty=float32 */;
  %736 = cast(meta[relay.Constant][46] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %737 = reshape(%735, newshape=[]) /* ty=float32 */;
  %738 = reshape(%736, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %739 = multiply(%723, %724) /* ty=Tensor[(4, 3, 3), float32] */;
  %740 = greater_equal(%727, %728) /* ty=Tensor[(4, 3, 3), bool] */;
  %741 = %733.6;
  %742 = erf(%734) /* ty=Tensor[(4, 3, 3), float64] */;
  %743 = @func_578(%737, %738) /* ty=Tensor[(15, 9), float32] */;
  (%739, %740, %741, %var_798, %var_799, %742, %743, meta[relay.Constant][46] /* ty=Tensor[(135), float32] */)
}

def @func_7785(%var_7769: Tensor[(15, 4, 12), float64]) -> (Tensor[(15, 4, 12), float64],) {
  %744 = cast(%var_7769, dtype="float64") /* ty=Tensor[(15, 4, 12), float64] */;
  %745 = atanh(%744) /* ty=Tensor[(15, 4, 12), float64] */;
  (%745,)
}

def @func_8116() -> (Tensor[(420), float64],) {
  %746 = @func_7661() /* ty=Tensor[(420), float64] */;
  (%746,)
}

def @func_2667(%var_2647: uint32, %var_2648: Tensor[(2, 2, 3), uint32]) -> (Tensor[(2, 2, 3), uint32],) {
  %747 = cast(%var_2647, dtype="uint32") /* ty=uint32 */;
  %748 = cast(%var_2648, dtype="uint32") /* ty=Tensor[(2, 2, 3), uint32] */;
  %749 = bitwise_or(%747, %748) /* ty=Tensor[(2, 2, 3), uint32] */;
  (%749,)
}

def @func_742(%var_729: Tensor[(5, 3, 5), float32], %var_730: Tensor[(5, 3, 5), float32]) -> (Tensor[(5, 3, 5), float32], Tensor[(5, 3, 5), float64]) {
  %750 = cast(%var_730, dtype="float32") /* ty=Tensor[(5, 3, 5), float32] */;
  %751 = shape_of(%var_729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%var_729, dtype="float32") /* ty=Tensor[(5, 3, 5), float32] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %754 = cast(%var_730, dtype="float64") /* ty=Tensor[(5, 3, 5), float64] */;
  %755 = mod(%752, %753) /* ty=Tensor[(5, 3, 5), float32] */;
  %756 = atanh(%754) /* ty=Tensor[(5, 3, 5), float64] */;
  (%755, %756)
}

def @func_5790(%var_5786: float32) -> (Tensor[(6, 12, 10), float32], Tensor[(1, 420), float64], float32, Tensor[(432), float32], Tensor[(420), float64]) {
  %757 = @func_5365() /* ty=(Tensor[(275), float32], Tensor[(6, 12, 10), float32]) */;
  %758 = cast(%var_5786, dtype="float32") /* ty=float32 */;
  %759 = cast(meta[relay.Constant][47] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %760 = cast(meta[relay.Constant][48] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %761 = %757.1;
  %762 = cast(%761, dtype="float32") /* ty=Tensor[(6, 12, 10), float32] */;
  %763 = reshape(%758, newshape=[]) /* ty=float32 */;
  %764 = reshape(%759, newshape=[2, 216]) /* ty=Tensor[(2, 216), float32] */;
  %765 = reshape(%760, newshape=[1, 420]) /* ty=Tensor[(1, 420), float64] */;
  %766 = reshape(%762, newshape=[6, 12, 10]) /* ty=Tensor[(6, 12, 10), float32] */;
  %767 = @func_3755(%763, %764, %765, %766) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(5, 16, 3), float32], float32, Tensor[(2, 216), float32], Tensor[(1, 420), float64], Tensor[(6, 12, 10), int32]) */;
  %768 = %767.4;
  (%761, %768, %var_5786, meta[relay.Constant][47] /* ty=Tensor[(432), float32] */, meta[relay.Constant][48] /* ty=Tensor[(420), float64] */)
}

def @func_866(%var_848: Tensor[(13, 11, 3), int32], %var_859: Tensor[(36), float32], %var_860: Tensor[(420), float64]) -> (Tensor[(13, 11, 3), bool], Tensor[(420), float64], Tensor[(36), float32], Tensor[(420), float64]) {
  %769 = cast(-3 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %770 = cast(%var_848, dtype="bool") /* ty=Tensor[(13, 11, 3), bool] */;
  %771 = cast(%var_859, dtype="float32") /* ty=Tensor[(36), float32] */;
  %772 = cast(%var_859, dtype="float32") /* ty=Tensor[(36), float32] */;
  %773 = cast(%var_859, dtype="float32") /* ty=Tensor[(36), float32] */;
  %774 = cast(-3 /* ty=int32 */, dtype="int8") /* ty=int8 */;
  %775 = cast(%var_860, dtype="float64") /* ty=Tensor[(420), float64] */;
  %776 = reshape(%771, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), float32] */;
  %777 = reshape(%772, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), float32] */;
  %778 = reshape(%773, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), float32] */;
  %779 = reshape(%774, newshape=[]) /* ty=int8 */;
  %780 = reshape(%775, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %781 = @func_816(%776, %777, %778, %779, %780) /* ty=(Tensor[(4, 3, 3), float32], Tensor[(4, 3, 3), bool], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64], Tensor[(4, 3, 3), float64], Tensor[(15, 9), float32], Tensor[(135), float32]) */;
  %782 = greater(%769, %770) /* ty=Tensor[(13, 11, 3), bool] */;
  %783 = %781.4;
  (%782, %783, %var_859, %var_860)
}

def @func_7849(%var_7815: Tensor[(75), float32], %var_7830: Tensor[(39, 11), int32]) -> (Tensor[(6, 12, 10), float32], Tensor[(5, 3, 5), float64], Tensor[(75), float32], Tensor[(36), float32], Tensor[(39, 11), int32], Tensor[(36), float32], Tensor[(210, 2), float64]) {
  %784 = cast(%var_7815, dtype="float32") /* ty=Tensor[(75), float32] */;
  %785 = cast(%var_7815, dtype="float32") /* ty=Tensor[(75), float32] */;
  %786 = reshape(%784, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %787 = reshape(%785, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %788 = @func_742(%786, %787) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 3, 5), float64]) */;
  %789 = cast(%var_7830, dtype="int32") /* ty=Tensor[(39, 11), int32] */;
  %790 = cast(meta[relay.Constant][49] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %791 = cast(meta[relay.Constant][50] /* ty=Tensor[(210, 2), float64] */, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
  %792 = reshape(%789, newshape=[13, 11, 3]) /* ty=Tensor[(13, 11, 3), int32] */;
  %793 = reshape(%790, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %794 = reshape(%791, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %795 = @func_866(%792, %793, %794) /* ty=(Tensor[(13, 11, 3), bool], Tensor[(420), float64], Tensor[(36), float32], Tensor[(420), float64]) */;
  %796 = cast(meta[relay.Constant][50] /* ty=Tensor[(210, 2), float64] */, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
  %797 = @func_3963() /* ty=Tensor[(6, 12, 10), float32] */;
  %798 = %788.1;
  %799 = %795.2;
  %800 = sin(%796) /* ty=Tensor[(210, 2), float64] */;
  (%797, %798, %var_7815, %799, %var_7830, meta[relay.Constant][49] /* ty=Tensor[(36), float32] */, %800)
}

def @func_7350() -> (Tensor[(6, 12, 10), float32],) {
  %801 = @func_4260() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %802 = %801.0;
  (%802,)
}

def @func_3115(%var_3104: Tensor[(2, 6, 15), float32], %var_3105: Tensor[(2, 6, 15), float32]) -> (Tensor[(2, 6, 15), float32], Tensor[(2, 6, 15), float64]) {
  %803 = cast(%var_3105, dtype="float32") /* ty=Tensor[(2, 6, 15), float32] */;
  %804 = shape_of(%var_3104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%var_3104, dtype="float32") /* ty=Tensor[(2, 6, 15), float32] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %807 = cast(%var_3105, dtype="float64") /* ty=Tensor[(2, 6, 15), float64] */;
  %808 = power(%805, %806) /* ty=Tensor[(2, 6, 15), float32] */;
  %809 = log2(%807) /* ty=Tensor[(2, 6, 15), float64] */;
  (%808, %809)
}

def @func_6765(%var_6759: Tensor[(12, 14, 11), float64], %var_6763: int8) -> (Tensor[(12, 14, 11), float64], Tensor[(6, 12, 10), float32], int8) {
  %810 = cast(%var_6759, dtype="float64") /* ty=Tensor[(12, 14, 11), float64] */;
  %811 = cast(%var_6763, dtype="int8") /* ty=int8 */;
  %812 = reshape(%811, newshape=[]) /* ty=int8 */;
  %813 = @func_3836(%812) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(6, 7, 10), float32], int8, Tensor[(1, 420), float64]) */;
  %814 = log2(%810) /* ty=Tensor[(12, 14, 11), float64] */;
  %815 = %813.0;
  (%814, %815, %var_6763)
}

def @func_2629(%var_2594: Tensor[(11, 5, 5), float32]) -> (Tensor[(11, 5, 5), float32],) {
  %816 = cast(%var_2594, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %817 = log10(%816) /* ty=Tensor[(11, 5, 5), float32] */;
  (%817,)
}

def @func_6345() -> (Tensor[(6, 12, 10), float32],) {
  %818 = @func_5128() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %819 = %818.0;
  (%819,)
}

def @func_2395(%var_2387: Tensor[(1, 14, 5), int16]) -> (Tensor[(14, 14, 5), bool],) {
  %820 = cast(%var_2387, dtype="bool") /* ty=Tensor[(1, 14, 5), bool] */;
  %821 = cast(meta[relay.Constant][51] /* ty=Tensor[(14, 14, 5), int16] */, dtype="bool") /* ty=Tensor[(14, 14, 5), bool] */;
  %822 = greater(%820, %821) /* ty=Tensor[(14, 14, 5), bool] */;
  (%822,)
}

def @func_4024() -> (Tensor[(6, 12, 10), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32], Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32]) {
  %823 = cast(meta[relay.Constant][52] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %824 = cast(meta[relay.Constant][53] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %825 = reshape(%823, newshape=[]) /* ty=uint32 */;
  %826 = reshape(%824, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), uint32] */;
  %827 = @func_2667(%825, %826) /* ty=(Tensor[(2, 2, 3), uint32],) */;
  %828 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %829 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
  %830 = @func_3431() /* ty=Tensor[(6, 12, 10), float32] */;
  %831 = %827.0;
  %832 = %828.0;
  %833 = %829.1;
  (%830, %831, meta[relay.Constant][52] /* ty=uint32 */, meta[relay.Constant][53] /* ty=Tensor[(12), uint32] */, %832, %833)
}

def @func_5433() -> Tensor[(6, 12, 10), float32] {
  %834 = @func_5058() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %834.0
}

def @func_6846(%var_6829: Tensor[(8, 11, 3), int64], %var_6835: Tensor[(330), float32], %var_6836: uint32, %var_6837: Tensor[(12), uint32]) -> (Tensor[(8, 11, 3), int64], Tensor[(12), uint32], Tensor[(330), float32], uint32, Tensor[(12), uint32]) {
  %835 = cast(%var_6829, dtype="int64") /* ty=Tensor[(8, 11, 3), int64] */;
  %836 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(8, 11, 3), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(meta[relay.Constant][54] /* ty=Tensor[(8, 11, 3), int64] */, dtype="int64") /* ty=Tensor[(8, 11, 3), int64] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %839 = cast(%var_6835, dtype="float32") /* ty=Tensor[(330), float32] */;
  %840 = cast(%var_6836, dtype="uint32") /* ty=uint32 */;
  %841 = cast(%var_6837, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %842 = reshape(%839, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %843 = reshape(%840, newshape=[]) /* ty=uint32 */;
  %844 = reshape(%841, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %845 = @func_3688(%842, %843, %844) /* ty=(Tensor[(6, 12, 10), int32], Tensor[(6, 5, 11), bool], Tensor[(330), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32]) */;
  %846 = maximum(%837, %838) /* ty=Tensor[(8, 11, 3), int64] */;
  %847 = %845.5;
  (%846, %847, %var_6835, %var_6836, %var_6837)
}

def @func_529(%var_506: Tensor[(9, 4, 3), int8]) -> (Tensor[(9, 4, 3), int8], Tensor[(13, 16, 4), float64], Tensor[(4, 208), float64], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32]) {
  %848 = cast(meta[relay.Constant][55] /* ty=Tensor[(9, 4, 3), int8] */, dtype="int8") /* ty=Tensor[(9, 4, 3), int8] */;
  %849 = shape_of(%var_506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%var_506, dtype="int8") /* ty=Tensor[(9, 4, 3), int8] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %852 = cast(meta[relay.Constant][56] /* ty=Tensor[(4, 208), float64] */, dtype="float64") /* ty=Tensor[(4, 208), float64] */;
  %853 = reshape(%852, newshape=[13, 16, 4]) /* ty=Tensor[(13, 16, 4), float64] */;
  %854 = @func_145(%853) /* ty=(Tensor[(13, 16, 4), float64],) */;
  %855 = cast(meta[relay.Constant][57] /* ty=Tensor[(240, 1), float32] */, dtype="float32") /* ty=Tensor[(240, 1), float32] */;
  %856 = reshape(%855, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
  %857 = @func_26(%856) /* ty=(Tensor[(5, 16, 3), float32],) */;
  %858 = right_shift(%850, %851) /* ty=Tensor[(9, 4, 3), int8] */;
  %859 = %854.0;
  %860 = %857.0;
  (%858, %859, meta[relay.Constant][56] /* ty=Tensor[(4, 208), float64] */, %860, meta[relay.Constant][57] /* ty=Tensor[(240, 1), float32] */)
}

def @func_4372(%var_4332: Tensor[(75), float32], %var_4344: float32, %var_4356: Tensor[(429), int32], %var_4357: Tensor[(36), float32], %var_4358: Tensor[(420), float64]) -> (Tensor[(6, 12, 10), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(2, 6, 15), float64], Tensor[(180), float32], Tensor[(15, 9), float32], float32, Tensor[(135), float32], Tensor[(36), float32], Tensor[(429), int32], Tensor[(36), float32], Tensor[(420), float64]) {
  %861 = cast(%var_4332, dtype="float32") /* ty=Tensor[(75), float32] */;
  %862 = cast(%var_4332, dtype="float32") /* ty=Tensor[(75), float32] */;
  %863 = reshape(%861, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %864 = reshape(%862, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %865 = @func_742(%863, %864) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 3, 5), float64]) */;
  %866 = cast(meta[relay.Constant][58] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %867 = cast(meta[relay.Constant][58] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %868 = reshape(%866, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), float32] */;
  %869 = reshape(%867, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), float32] */;
  %870 = @func_3115(%868, %869) /* ty=(Tensor[(2, 6, 15), float32], Tensor[(2, 6, 15), float64]) */;
  %871 = cast(%var_4344, dtype="float32") /* ty=float32 */;
  %872 = cast(meta[relay.Constant][59] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %873 = reshape(%871, newshape=[]) /* ty=float32 */;
  %874 = reshape(%872, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %875 = cast(%var_4356, dtype="int32") /* ty=Tensor[(429), int32] */;
  %876 = cast(%var_4357, dtype="float32") /* ty=Tensor[(36), float32] */;
  %877 = cast(%var_4358, dtype="float64") /* ty=Tensor[(420), float64] */;
  %878 = reshape(%875, newshape=[13, 11, 3]) /* ty=Tensor[(13, 11, 3), int32] */;
  %879 = reshape(%876, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %880 = reshape(%877, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %881 = @func_866(%878, %879, %880) /* ty=(Tensor[(13, 11, 3), bool], Tensor[(420), float64], Tensor[(36), float32], Tensor[(420), float64]) */;
  %882 = @func_3963() /* ty=Tensor[(6, 12, 10), float32] */;
  %883 = %865.0;
  %884 = %870.1;
  %885 = @func_578(%873, %874) /* ty=Tensor[(15, 9), float32] */;
  %886 = %881.2;
  (%882, %883, %var_4332, %884, meta[relay.Constant][58] /* ty=Tensor[(180), float32] */, %885, %var_4344, meta[relay.Constant][59] /* ty=Tensor[(135), float32] */, %886, %var_4356, %var_4357, %var_4358)
}

def @func_2922(%var_2911: Tensor[(80), uint64], %var_2919: Tensor[(18, 6), float32]) -> (Tensor[(2, 3, 16), uint8], Tensor[(10, 4, 2), int8], Tensor[(80), uint64], Tensor[(2, 6, 9), float32], Tensor[(18, 6), float32]) {
  %887 = cast(meta[relay.Constant][61] /* ty=Tensor[(2, 3, 16), uint8] */, dtype="uint8") /* ty=Tensor[(2, 3, 16), uint8] */;
  %888 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(2, 3, 16), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(meta[relay.Constant][60] /* ty=Tensor[(2, 3, 16), uint8] */, dtype="uint8") /* ty=Tensor[(2, 3, 16), uint8] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %891 = cast(%var_2911, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %892 = cast(%var_2911, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %893 = cast(%var_2911, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %894 = reshape(%891, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %895 = reshape(%892, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %896 = reshape(%893, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %897 = @func_1316(%894, %895, %896) /* ty=(Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) */;
  %898 = cast(%var_2919, dtype="float32") /* ty=Tensor[(18, 6), float32] */;
  %899 = reshape(%898, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
  %900 = @func_1256(%899) /* ty=(Tensor[(2, 6, 9), float32],) */;
  %901 = bitwise_xor(%889, %890) /* ty=Tensor[(2, 3, 16), uint8] */;
  %902 = %897.1;
  %903 = %900.0;
  (%901, %902, %var_2911, %903, %var_2919)
}

def @func_3336(%var_3322: Tensor[(12), int8]) -> (Tensor[(6, 12, 10), float32], Tensor[(420), float64], float32, Tensor[(432), float32], Tensor[(420), float64], Tensor[(2, 3, 2), bool], Tensor[(12), int8], Tensor[(5, 12, 12), bool]) {
  %904 = cast(-9.06348f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %905 = cast(meta[relay.Constant][62] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %906 = cast(meta[relay.Constant][63] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %907 = reshape(%904, newshape=[]) /* ty=float32 */;
  %908 = reshape(%905, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), float32] */;
  %909 = reshape(%906, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %910 = @func_474(%907, %908, %909) /* ty=(Tensor[(9, 12, 4), float32], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32], Tensor[(5, 16, 3), float32], Tensor[(420), float64]) */;
  %911 = cast(%var_3322, dtype="int8") /* ty=Tensor[(12), int8] */;
  %912 = cast(%var_3322, dtype="int8") /* ty=Tensor[(12), int8] */;
  %913 = cast(%var_3322, dtype="int8") /* ty=Tensor[(12), int8] */;
  %914 = reshape(%911, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
  %915 = reshape(%912, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
  %916 = reshape(%913, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
  %917 = @func_1072(%914, %915, %916) /* ty=(Tensor[(2, 3, 2), uint16], Tensor[(2, 3, 2), bool]) */;
  %918 = @func_3201() /* ty=Tensor[(6, 12, 10), float32] */;
  %919 = cast(%918, dtype="int64") /* ty=Tensor[(6, 12, 10), int64] */;
  %920 = reshape(%919, newshape=[5, 12, 12]) /* ty=Tensor[(5, 12, 12), int64] */;
  %921 = @func_1776(%920) /* ty=(Tensor[(5, 12, 12), bool], Tensor[(5, 12, 12), float64]) */;
  %922 = %910.4;
  %923 = %917.1;
  %924 = %921.0;
  (%918, %922, -9.06348f /* ty=float32 */, meta[relay.Constant][62] /* ty=Tensor[(432), float32] */, meta[relay.Constant][63] /* ty=Tensor[(420), float64] */, %923, %var_3322, %924)
}

def @func_1256(%var_1246: Tensor[(2, 6, 9), float32]) -> (Tensor[(2, 6, 9), float32],) {
  %925 = cast(%var_1246, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %926 = acosh(%925) /* ty=Tensor[(2, 6, 9), float32] */;
  (%926,)
}

def @func_7005(%var_6995: int8, %var_6996: Tensor[(420), float64]) -> (Tensor[(108), int8], int8, Tensor[(420), float64], Tensor[(5, 16, 3), float64]) {
  %927 = cast(%var_6995, dtype="int8") /* ty=int8 */;
  %928 = cast(%var_6996, dtype="float64") /* ty=Tensor[(420), float64] */;
  %929 = reshape(%927, newshape=[]) /* ty=int8 */;
  %930 = reshape(%928, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float64] */;
  %931 = @func_122(%929, %930) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */;
  %932 = %931.4;
  %933 = cast(%932, dtype="float64") /* ty=Tensor[(5, 16, 3), float64] */;
  %934 = @func_5894() /* ty=Tensor[(108), int8] */;
  %935 = cosh(%933) /* ty=Tensor[(5, 16, 3), float64] */;
  (%934, %var_6995, %var_6996, %935)
}

def @func_3431() -> Tensor[(6, 12, 10), float32] {
  %936 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %936.0
}

def @func_1898(%var_1826: Tensor[(11, 12, 11), int32], %var_1827: Tensor[(11, 12, 11), int32], %var_1856: Tensor[(5, 78), float32], %var_1857: Tensor[(135), float32]) -> (Tensor[(11, 12, 11), int32], Tensor[(10, 4, 2), bool], Tensor[(1, 80), uint64], Tensor[(5, 12, 12), float64], Tensor[(720), int64], Tensor[(10, 4, 2), bool], Tensor[(135), float32], Tensor[(5, 3, 5), float32], Tensor[(15, 9), float32], Tensor[(75), int64], Tensor[(5, 78), int16], Tensor[(11, 12, 11), float32], Tensor[(2, 3, 2), uint16], Tensor[(12, 1), int8]) {
  %937 = cast(%var_1827, dtype="int32") /* ty=Tensor[(11, 12, 11), int32] */;
  %938 = shape_of(%var_1826, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(%var_1826, dtype="int32") /* ty=Tensor[(11, 12, 11), int32] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %941 = cast(meta[relay.Constant][64] /* ty=Tensor[(1, 80), uint64] */, dtype="uint64") /* ty=Tensor[(1, 80), uint64] */;
  %942 = cast(meta[relay.Constant][64] /* ty=Tensor[(1, 80), uint64] */, dtype="uint64") /* ty=Tensor[(1, 80), uint64] */;
  %943 = cast(meta[relay.Constant][64] /* ty=Tensor[(1, 80), uint64] */, dtype="uint64") /* ty=Tensor[(1, 80), uint64] */;
  %944 = reshape(%941, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %945 = reshape(%942, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %946 = reshape(%943, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %947 = @func_1316(%944, %945, %946) /* ty=(Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) */;
  %948 = cast(meta[relay.Constant][65] /* ty=Tensor[(720), int64] */, dtype="int64") /* ty=Tensor[(720), int64] */;
  %949 = reshape(%948, newshape=[5, 12, 12]) /* ty=Tensor[(5, 12, 12), int64] */;
  %950 = @func_1776(%949) /* ty=(Tensor[(5, 12, 12), bool], Tensor[(5, 12, 12), float64]) */;
  %951 = %947.0;
  %952 = cast(%951, dtype="uint64") /* ty=Tensor[(10, 4, 2), uint64] */;
  %953 = cast(meta[relay.Constant][64] /* ty=Tensor[(1, 80), uint64] */, dtype="uint64") /* ty=Tensor[(1, 80), uint64] */;
  %954 = cast(%951, dtype="uint64") /* ty=Tensor[(10, 4, 2), uint64] */;
  %955 = reshape(%952, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %956 = reshape(%953, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %957 = reshape(%954, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %958 = @func_1316(%955, %956, %957) /* ty=(Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) */;
  %959 = cast(meta[relay.Constant][66] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %960 = cast(meta[relay.Constant][66] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %961 = reshape(%959, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %962 = reshape(%960, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %963 = @func_742(%961, %962) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 3, 5), float64]) */;
  %964 = cast(%var_1856, dtype="float32") /* ty=Tensor[(5, 78), float32] */;
  %965 = cast(%var_1857, dtype="float32") /* ty=Tensor[(135), float32] */;
  %966 = reshape(%964, newshape=[13, 3, 10]) /* ty=Tensor[(13, 3, 10), float32] */;
  %967 = reshape(%965, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %968 = @func_1027(%966, %967) /* ty=(Tensor[(13, 3, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(15, 9), float32]) */;
  %969 = cast(meta[relay.Constant][67] /* ty=Tensor[(75), float32] */, dtype="int64") /* ty=Tensor[(75), int64] */;
  %970 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(75), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %971 = cast(meta[relay.Constant][66] /* ty=Tensor[(75), float32] */, dtype="int64") /* ty=Tensor[(75), int64] */;
  %972 = dyn.reshape(%969, %970, newshape=[]) /* ty=Tensor[(?), int64] */;
  %973 = cast(%var_1856, dtype="float32") /* ty=Tensor[(5, 78), float32] */;
  %974 = cast(%var_1857, dtype="float32") /* ty=Tensor[(135), float32] */;
  %975 = reshape(%973, newshape=[13, 3, 10]) /* ty=Tensor[(13, 3, 10), float32] */;
  %976 = reshape(%974, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %977 = @func_1027(%975, %976) /* ty=(Tensor[(13, 3, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(15, 9), float32]) */;
  %978 = %977.2;
  %979 = cast(%var_1856, dtype="int16") /* ty=Tensor[(5, 78), int16] */;
  %980 = cast(%978, dtype="int16") /* ty=int16 */;
  %981 = cast(%var_1827, dtype="float32") /* ty=Tensor[(11, 12, 11), float32] */;
  %982 = cast(meta[relay.Constant][68] /* ty=Tensor[(12, 1), int8] */, dtype="int8") /* ty=Tensor[(12, 1), int8] */;
  %983 = cast(meta[relay.Constant][68] /* ty=Tensor[(12, 1), int8] */, dtype="int8") /* ty=Tensor[(12, 1), int8] */;
  %984 = cast(meta[relay.Constant][68] /* ty=Tensor[(12, 1), int8] */, dtype="int8") /* ty=Tensor[(12, 1), int8] */;
  %985 = reshape(%982, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
  %986 = reshape(%983, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
  %987 = reshape(%984, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
  %988 = @func_1072(%985, %986, %987) /* ty=(Tensor[(2, 3, 2), uint16], Tensor[(2, 3, 2), bool]) */;
  %989 = minimum(%939, %940) /* ty=Tensor[(11, 12, 11), int32] */;
  %990 = %950.1;
  %991 = %958.0;
  %992 = %963.0;
  %993 = %968.1;
  %994 = multiply(%971, %972) /* ty=Tensor[(75), int64] */;
  %995 = add(%979, %980) /* ty=Tensor[(5, 78), int16] */;
  %996 = erf(%981) /* ty=Tensor[(11, 12, 11), float32] */;
  %997 = %988.0;
  (%989, %951, meta[relay.Constant][64] /* ty=Tensor[(1, 80), uint64] */, %990, meta[relay.Constant][65] /* ty=Tensor[(720), int64] */, %991, %var_1857, %992, %993, %994, %995, %996, %997, meta[relay.Constant][68] /* ty=Tensor[(12, 1), int8] */)
}

def @func_7564(%var_7532: Tensor[(3, 5, 13), uint8], %var_7533: Tensor[(3, 5, 13), uint8], %var_7554: Tensor[(330), float32]) -> (Tensor[(3, 5, 13), uint8], Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32], Tensor[(294), float32], Tensor[(6, 5, 11), bool], Tensor[(330), float32], uint32, Tensor[(12), uint32], Tensor[(6, 30), float32]) {
  %998 = cast(%var_7533, dtype="uint8") /* ty=Tensor[(3, 5, 13), uint8] */;
  %999 = shape_of(%var_7532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1000 = cast(%var_7532, dtype="uint8") /* ty=Tensor[(3, 5, 13), uint8] */;
  %1001 = dyn.reshape(%998, %999, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1002 = @func_6302() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %1003 = cast(meta[relay.Constant][69] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %1004 = reshape(%1003, newshape=[294, 1]) /* ty=Tensor[(294, 1), float32] */;
  %1005 = @func_4878(%1004) /* ty=(Tensor[(275), float32], Tensor[(6, 12, 10), float32], Tensor[(14, 14, 5), bool], Tensor[(14, 5), int16], Tensor[(6, 12, 10), float32], Tensor[(3, 7, 14), float32], Tensor[(294, 1), float32], Tensor[(275), float32]) */;
  %1006 = cast(%var_7554, dtype="float32") /* ty=Tensor[(330), float32] */;
  %1007 = cast(meta[relay.Constant][70] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1008 = cast(meta[relay.Constant][71] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %1009 = reshape(%1006, newshape=[330]) /* ty=Tensor[(330), float32] */;
  %1010 = reshape(%1007, newshape=[]) /* ty=uint32 */;
  %1011 = reshape(%1008, newshape=[12]) /* ty=Tensor[(12), uint32] */;
  %1012 = @func_3688(%1009, %1010, %1011) /* ty=(Tensor[(6, 12, 10), int32], Tensor[(6, 5, 11), bool], Tensor[(330), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32]) */;
  %1013 = @func_7262() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(180), float32], Tensor[(6, 30), float32]) */;
  %1014 = left_shift(%1000, %1001) /* ty=Tensor[(3, 5, 13), uint8] */;
  %1015 = @func_3963() /* ty=Tensor[(6, 12, 10), float32] */;
  %1016 = %1002.0;
  %1017 = %1005.4;
  %1018 = %1012.1;
  %1019 = %1013.2;
  (%1014, %1015, %1016, %1017, meta[relay.Constant][69] /* ty=Tensor[(294), float32] */, %1018, %var_7554, meta[relay.Constant][70] /* ty=uint32 */, meta[relay.Constant][71] /* ty=Tensor[(12), uint32] */, %1019)
}

def @func_7919(%var_7892: Tensor[(275), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(13, 11, 3), bool], Tensor[(275), float32], Tensor[(39, 11), int32], Tensor[(420), float64]) {
  %1020 = cast(%var_7892, dtype="float32") /* ty=Tensor[(275), float32] */;
  %1021 = cast(meta[relay.Constant][72] /* ty=Tensor[(39, 11), int32] */, dtype="int32") /* ty=Tensor[(39, 11), int32] */;
  %1022 = cast(meta[relay.Constant][73] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %1023 = reshape(%1020, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %1024 = reshape(%1021, newshape=[429]) /* ty=Tensor[(429), int32] */;
  %1025 = reshape(%1022, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %1026 = @func_7137(%1023, %1024, %1025) /* ty=(Tensor[(275), uint8], Tensor[(13, 11, 3), bool], Tensor[(429), int32], Tensor[(1, 36), float32], Tensor[(420), float64]) */;
  %1027 = @func_5433() /* ty=Tensor[(6, 12, 10), float32] */;
  %1028 = %1026.1;
  (%1027, %1028, %var_7892, meta[relay.Constant][72] /* ty=Tensor[(39, 11), int32] */, meta[relay.Constant][73] /* ty=Tensor[(420), float64] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4968() -> Tensor[(6, 12, 10), float64] {
  %0 = @func_4513() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  sqrt(%2) /* ty=Tensor[(6, 12, 10), float64] */
}

def @func_529(%var_506: Tensor[(9, 4, 3), int8]) -> (Tensor[(9, 4, 3), int8], Tensor[(13, 16, 4), float64], Tensor[(4, 208), float64], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32]) {
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 4, 3), int8] */, dtype="int8") /* ty=Tensor[(9, 4, 3), int8] */;
  %4 = shape_of(%var_506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%var_506, dtype="int8") /* ty=Tensor[(9, 4, 3), int8] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 208), float64] */, dtype="float64") /* ty=Tensor[(4, 208), float64] */;
  %8 = reshape(%7, newshape=[13, 16, 4]) /* ty=Tensor[(13, 16, 4), float64] */;
  %9 = @func_145(%8) /* ty=(Tensor[(13, 16, 4), float64],) */;
  %10 = cast(meta[relay.Constant][2] /* ty=Tensor[(240, 1), float32] */, dtype="float32") /* ty=Tensor[(240, 1), float32] */;
  %11 = reshape(%10, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
  %12 = @func_26(%11) /* ty=(Tensor[(5, 16, 3), float32],) */;
  %13 = right_shift(%5, %6) /* ty=Tensor[(9, 4, 3), int8] */;
  %14 = %9.0;
  %15 = %12.0;
  (%13, %14, meta[relay.Constant][1] /* ty=Tensor[(4, 208), float64] */, %15, meta[relay.Constant][2] /* ty=Tensor[(240, 1), float32] */)
}

def @func_4707(%var_4673: Tensor[(135), float32], %var_4689: Tensor[(12), uint32]) -> (Tensor[(6, 12, 10), float32], Tensor[(13, 3, 10), float32], Tensor[(390), float32], Tensor[(135), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32], Tensor[(2, 2, 3), uint32], Tensor[(5, 3, 5), float64], Tensor[(15, 5), float32]) {
  %16 = @func_4513() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %17 = cast(meta[relay.Constant][3] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %18 = cast(%var_4673, dtype="float32") /* ty=Tensor[(135), float32] */;
  %19 = reshape(%17, newshape=[13, 3, 10]) /* ty=Tensor[(13, 3, 10), float32] */;
  %20 = reshape(%18, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %21 = @func_1027(%19, %20) /* ty=(Tensor[(13, 3, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(15, 9), float32]) */;
  %22 = cast(meta[relay.Constant][4] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %23 = cast(%var_4689, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %24 = reshape(%22, newshape=[]) /* ty=uint32 */;
  %25 = reshape(%23, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), uint32] */;
  %26 = @func_2667(%24, %25) /* ty=(Tensor[(2, 2, 3), uint32],) */;
  %27 = cast(meta[relay.Constant][4] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %28 = %26.0;
  %29 = cast(%28, dtype="uint32") /* ty=Tensor[(2, 2, 3), uint32] */;
  %30 = reshape(%27, newshape=[]) /* ty=uint32 */;
  %31 = reshape(%29, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), uint32] */;
  %32 = @func_2667(%30, %31) /* ty=(Tensor[(2, 2, 3), uint32],) */;
  %33 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 5), float32] */, dtype="float32") /* ty=Tensor[(15, 5), float32] */;
  %34 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 5), float32] */, dtype="float32") /* ty=Tensor[(15, 5), float32] */;
  %35 = reshape(%33, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %36 = reshape(%34, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %37 = @func_742(%35, %36) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 3, 5), float64]) */;
  %38 = %16.0;
  %39 = %21.0;
  %40 = %32.0;
  %41 = %37.1;
  (%38, %39, meta[relay.Constant][3] /* ty=Tensor[(390), float32] */, %var_4673, %28, meta[relay.Constant][4] /* ty=uint32 */, %var_4689, %40, %41, meta[relay.Constant][5] /* ty=Tensor[(15, 5), float32] */)
}

def @func_5367() -> (Tensor[(275), float32], Tensor[(6, 12, 10), float32]) {
  @func_5365() /* ty=(Tensor[(275), float32], Tensor[(6, 12, 10), float32]) */
}

def @func_6822() -> Tensor[(6, 12, 10), float32] {
  %43 = fn () -> Tensor[(6, 12, 10), float32] {
    %42 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %42.0
  };
  %43() /* ty=Tensor[(6, 12, 10), float32] */
}

def @func_7785(%var_7769: Tensor[(15, 4, 12), float64]) -> (Tensor[(15, 4, 12), float64],) {
  %44 = cast(%var_7769, dtype="float64") /* ty=Tensor[(15, 4, 12), float64] */;
  %45 = atanh(%44) /* ty=Tensor[(15, 4, 12), float64] */;
  (%45,)
}

def @func_5456() -> Tensor[(6, 12, 10), float32] {
  %47 = fn () -> Tensor[(6, 12, 10), float32] {
    %46 = @func_3947() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %46.0
  };
  %47() /* ty=Tensor[(6, 12, 10), float32] */
}

def @func_7849(%var_7815: Tensor[(75), float32], %var_7830: Tensor[(39, 11), int32]) -> (Tensor[(6, 12, 10), float32], Tensor[(5, 3, 5), float64], Tensor[(75), float32], Tensor[(36), float32], Tensor[(39, 11), int32], Tensor[(36), float32], Tensor[(210, 2), float64]) {
  %48 = cast(%var_7815, dtype="float32") /* ty=Tensor[(75), float32] */;
  %49 = cast(%var_7815, dtype="float32") /* ty=Tensor[(75), float32] */;
  %50 = reshape(%48, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %51 = reshape(%49, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %52 = @func_742(%50, %51) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 3, 5), float64]) */;
  %53 = cast(%var_7830, dtype="int32") /* ty=Tensor[(39, 11), int32] */;
  %54 = cast(meta[relay.Constant][6] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %55 = cast(meta[relay.Constant][7] /* ty=Tensor[(210, 2), float64] */, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
  %56 = reshape(%53, newshape=[13, 11, 3]) /* ty=Tensor[(13, 11, 3), int32] */;
  %57 = reshape(%54, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %58 = reshape(%55, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %59 = @func_866(%56, %57, %58) /* ty=(Tensor[(13, 11, 3), bool], Tensor[(420), float64], Tensor[(36), float32], Tensor[(420), float64]) */;
  %60 = cast(meta[relay.Constant][7] /* ty=Tensor[(210, 2), float64] */, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
  %61 = @func_3963() /* ty=Tensor[(6, 12, 10), float32] */;
  %62 = %52.1;
  %63 = %59.2;
  %64 = sin(%60) /* ty=Tensor[(210, 2), float64] */;
  (%61, %62, %var_7815, %63, %var_7830, meta[relay.Constant][6] /* ty=Tensor[(36), float32] */, %64)
}

def @func_5746(%var_5743: Tensor[(108), int8], %var_5744: Tensor[(36), float32], %var_5745: Tensor[(420), float64]) -> (Tensor[(6, 12, 10), float32], Tensor[(13, 16, 4), float64], Tensor[(108), int8], Tensor[(135), float32], Tensor[(36), float32], int8, Tensor[(420), float64]) {
  @func_5741(%var_5743, %var_5744, %var_5745) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(13, 16, 4), float64], Tensor[(108), int8], Tensor[(135), float32], Tensor[(36), float32], int8, Tensor[(420), float64]) */
}

def @func_628(%var_626: Tensor[(3, 3, 5), float32], %var_627: int8) -> (Tensor[(3, 3, 5), float64], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64]) {
  %75 = fn (%var_592: Tensor[(3, 3, 5), float32], %var_609: int8) -> (Tensor[(3, 3, 5), float64], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64]) {
    %65 = cast(%var_592, dtype="float32") /* ty=Tensor[(3, 3, 5), float32] */;
    %66 = log2(%65) /* ty=Tensor[(3, 3, 5), float32] */;
    %67 = cast(%66, dtype="float64") /* ty=Tensor[(3, 3, 5), float64] */;
    %68 = cast(%var_609, dtype="int8") /* ty=int8 */;
    %69 = cast(meta[relay.Constant][8] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %70 = reshape(%68, newshape=[]) /* ty=int8 */;
    %71 = reshape(%69, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float64] */;
    %72 = @func_122(%70, %71) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */;
    %73 = log(%67) /* ty=Tensor[(3, 3, 5), float64] */;
    %74 = %72.6;
    (%73, %74, %var_609, meta[relay.Constant][8] /* ty=Tensor[(420), float64] */)
  };
  %75(%var_626, %var_627) /* ty=(Tensor[(3, 3, 5), float64], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64]) */
}

def @func_479(%var_476: float32, %var_477: Tensor[(9, 12, 4), float32], %var_478: Tensor[(420), float64]) -> (Tensor[(9, 12, 4), float32], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32], Tensor[(5, 16, 3), float32], Tensor[(420), float64]) {
  @func_474(%var_476, %var_477, %var_478) /* ty=(Tensor[(9, 12, 4), float32], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32], Tensor[(5, 16, 3), float32], Tensor[(420), float64]) */
}

def @func_3947() -> (Tensor[(6, 12, 10), float32],) {
  %76 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
  %77 = %76.0;
  (%77,)
}

def @func_3949() -> (Tensor[(6, 12, 10), float32],) {
  @func_3947() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_4296() -> (Tensor[(6, 12, 10), float32],) {
  @func_4294() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_1898(%var_1826: Tensor[(11, 12, 11), int32], %var_1827: Tensor[(11, 12, 11), int32], %var_1856: Tensor[(5, 78), float32], %var_1857: Tensor[(135), float32]) -> (Tensor[(11, 12, 11), int32], Tensor[(10, 4, 2), bool], Tensor[(1, 80), uint64], Tensor[(5, 12, 12), float64], Tensor[(720), int64], Tensor[(10, 4, 2), bool], Tensor[(135), float32], Tensor[(5, 3, 5), float32], Tensor[(15, 9), float32], Tensor[(75), int64], Tensor[(5, 78), int16], Tensor[(11, 12, 11), float32], Tensor[(2, 3, 2), uint16], Tensor[(12, 1), int8]) {
  %78 = cast(%var_1827, dtype="int32") /* ty=Tensor[(11, 12, 11), int32] */;
  %79 = shape_of(%var_1826, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%var_1826, dtype="int32") /* ty=Tensor[(11, 12, 11), int32] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %82 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 80), uint64] */, dtype="uint64") /* ty=Tensor[(1, 80), uint64] */;
  %83 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 80), uint64] */, dtype="uint64") /* ty=Tensor[(1, 80), uint64] */;
  %84 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 80), uint64] */, dtype="uint64") /* ty=Tensor[(1, 80), uint64] */;
  %85 = reshape(%82, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %86 = reshape(%83, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %87 = reshape(%84, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %88 = @func_1316(%85, %86, %87) /* ty=(Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) */;
  %89 = cast(meta[relay.Constant][10] /* ty=Tensor[(720), int64] */, dtype="int64") /* ty=Tensor[(720), int64] */;
  %90 = reshape(%89, newshape=[5, 12, 12]) /* ty=Tensor[(5, 12, 12), int64] */;
  %91 = @func_1776(%90) /* ty=(Tensor[(5, 12, 12), bool], Tensor[(5, 12, 12), float64]) */;
  %92 = %88.0;
  %93 = cast(%92, dtype="uint64") /* ty=Tensor[(10, 4, 2), uint64] */;
  %94 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 80), uint64] */, dtype="uint64") /* ty=Tensor[(1, 80), uint64] */;
  %95 = cast(%92, dtype="uint64") /* ty=Tensor[(10, 4, 2), uint64] */;
  %96 = reshape(%93, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %97 = reshape(%94, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %98 = reshape(%95, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %99 = @func_1316(%96, %97, %98) /* ty=(Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) */;
  %100 = cast(meta[relay.Constant][11] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %101 = cast(meta[relay.Constant][11] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %102 = reshape(%100, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %103 = reshape(%101, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %104 = @func_742(%102, %103) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 3, 5), float64]) */;
  %105 = cast(%var_1856, dtype="float32") /* ty=Tensor[(5, 78), float32] */;
  %106 = cast(%var_1857, dtype="float32") /* ty=Tensor[(135), float32] */;
  %107 = reshape(%105, newshape=[13, 3, 10]) /* ty=Tensor[(13, 3, 10), float32] */;
  %108 = reshape(%106, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %109 = @func_1027(%107, %108) /* ty=(Tensor[(13, 3, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(15, 9), float32]) */;
  %110 = cast(meta[relay.Constant][12] /* ty=Tensor[(75), float32] */, dtype="int64") /* ty=Tensor[(75), int64] */;
  %111 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(75), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %112 = cast(meta[relay.Constant][11] /* ty=Tensor[(75), float32] */, dtype="int64") /* ty=Tensor[(75), int64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?), int64] */;
  %114 = cast(%var_1856, dtype="float32") /* ty=Tensor[(5, 78), float32] */;
  %115 = cast(%var_1857, dtype="float32") /* ty=Tensor[(135), float32] */;
  %116 = reshape(%114, newshape=[13, 3, 10]) /* ty=Tensor[(13, 3, 10), float32] */;
  %117 = reshape(%115, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %118 = @func_1027(%116, %117) /* ty=(Tensor[(13, 3, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(15, 9), float32]) */;
  %119 = %118.2;
  %120 = cast(%var_1856, dtype="int16") /* ty=Tensor[(5, 78), int16] */;
  %121 = cast(%119, dtype="int16") /* ty=int16 */;
  %122 = cast(%var_1827, dtype="float32") /* ty=Tensor[(11, 12, 11), float32] */;
  %123 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 1), int8] */, dtype="int8") /* ty=Tensor[(12, 1), int8] */;
  %124 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 1), int8] */, dtype="int8") /* ty=Tensor[(12, 1), int8] */;
  %125 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 1), int8] */, dtype="int8") /* ty=Tensor[(12, 1), int8] */;
  %126 = reshape(%123, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
  %127 = reshape(%124, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
  %128 = reshape(%125, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
  %129 = @func_1072(%126, %127, %128) /* ty=(Tensor[(2, 3, 2), uint16], Tensor[(2, 3, 2), bool]) */;
  %130 = minimum(%80, %81) /* ty=Tensor[(11, 12, 11), int32] */;
  %131 = %91.1;
  %132 = %99.0;
  %133 = %104.0;
  %134 = %109.1;
  %135 = multiply(%112, %113) /* ty=Tensor[(75), int64] */;
  %136 = add(%120, %121) /* ty=Tensor[(5, 78), int16] */;
  %137 = erf(%122) /* ty=Tensor[(11, 12, 11), float32] */;
  %138 = %129.0;
  (%130, %92, meta[relay.Constant][9] /* ty=Tensor[(1, 80), uint64] */, %131, meta[relay.Constant][10] /* ty=Tensor[(720), int64] */, %132, %var_1857, %133, %134, %135, %136, %137, %138, meta[relay.Constant][13] /* ty=Tensor[(12, 1), int8] */)
}

def @main(%var_8122: Tensor[(3, 9, 11), int64]) -> (Tensor[(6, 12, 10), float64], Tensor[(3, 9, 11), float32]) {
  %139 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 9, 11), int64] */, dtype="int64") /* ty=Tensor[(3, 9, 11), int64] */;
  %140 = shape_of(%var_8122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%var_8122, dtype="int64") /* ty=Tensor[(3, 9, 11), int64] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %143 = logical_xor(%141, %142) /* ty=Tensor[(3, 9, 11), int64] */;
  %144 = cast(%143, dtype="float64") /* ty=Tensor[(3, 9, 11), float64] */;
  %145 = atan(%144) /* ty=Tensor[(3, 9, 11), float64] */;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(3, 9, 11), float32] */;
  %147 = @func_6881() /* ty=Tensor[(6, 12, 10), float64] */;
  %148 = cosh(%146) /* ty=Tensor[(3, 9, 11), float32] */;
  (%147, %148)
}

def @func_474(%var_446: float32, %var_447: Tensor[(9, 12, 4), float32], %var_458: Tensor[(420), float64]) -> (Tensor[(9, 12, 4), float32], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32], Tensor[(5, 16, 3), float32], Tensor[(420), float64]) {
  %149 = cast(%var_446, dtype="float32") /* ty=float32 */;
  %150 = cast(%var_447, dtype="float32") /* ty=Tensor[(9, 12, 4), float32] */;
  %151 = cast(meta[relay.Constant][15] /* ty=Tensor[(240, 1), float32] */, dtype="float32") /* ty=Tensor[(240, 1), float32] */;
  %152 = reshape(%151, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
  %153 = @func_26(%152) /* ty=(Tensor[(5, 16, 3), float32],) */;
  %154 = cast(%var_446, dtype="int8") /* ty=int8 */;
  %155 = cast(%var_458, dtype="float64") /* ty=Tensor[(420), float64] */;
  %156 = reshape(%154, newshape=[]) /* ty=int8 */;
  %157 = reshape(%155, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float64] */;
  %158 = @func_122(%156, %157) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */;
  %159 = floor_mod(%149, %150) /* ty=Tensor[(9, 12, 4), float32] */;
  %160 = %153.0;
  %161 = %158.5;
  (%159, %160, meta[relay.Constant][15] /* ty=Tensor[(240, 1), float32] */, %161, %var_458)
}

def @func_8095(%var_8093: Tensor[(14, 5, 6), float32], %var_8094: Tensor[(14, 5, 6), float32]) -> (Tensor[(14, 5, 6), bool], Tensor[(6, 12, 10), float32]) {
  %169 = fn (%var_8084: Tensor[(14, 5, 6), float32], %var_8085: Tensor[(14, 5, 6), float32]) -> (Tensor[(14, 5, 6), bool], Tensor[(6, 12, 10), float32]) {
    %162 = cast(%var_8085, dtype="bool") /* ty=Tensor[(14, 5, 6), bool] */;
    %163 = shape_of(%var_8084, dtype="int32") /* ty=Tensor[(3), int32] */;
    %164 = cast(%var_8084, dtype="bool") /* ty=Tensor[(14, 5, 6), bool] */;
    %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %166 = @func_6302() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %167 = greater(%164, %165) /* ty=Tensor[(14, 5, 6), bool] */;
    %168 = %166.0;
    (%167, %168)
  };
  %169(%var_8093, %var_8094) /* ty=(Tensor[(14, 5, 6), bool], Tensor[(6, 12, 10), float32]) */
}

def @func_7756(%var_7753: Tensor[(6, 12, 10), float32], %var_7754: float32, %var_7755: Tensor[(72), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(135), float32], Tensor[(3, 7, 14), float32], Tensor[(294), float32], Tensor[(6, 12, 10), float32], Tensor[(72), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32]) {
  %195 = fn (%var_7702: Tensor[(6, 12, 10), float32], %var_7708: float32, %var_7726: Tensor[(72), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(135), float32], Tensor[(3, 7, 14), float32], Tensor[(294), float32], Tensor[(6, 12, 10), float32], Tensor[(72), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32]) {
    %170 = @func_5058() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %171 = %170.0;
    %172 = cast(%var_7702, dtype="float32") /* ty=Tensor[(6, 12, 10), float32] */;
    %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
    %174 = cast(%171, dtype="float32") /* ty=Tensor[(6, 12, 10), float32] */;
    %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %176 = cast(%var_7708, dtype="float32") /* ty=float32 */;
    %177 = cast(meta[relay.Constant][16] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %178 = reshape(%176, newshape=[]) /* ty=float32 */;
    %179 = reshape(%177, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
    %180 = cast(meta[relay.Constant][17] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
    %181 = cast(meta[relay.Constant][17] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
    %182 = reshape(%180, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
    %183 = reshape(%181, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
    %184 = cast(%var_7726, dtype="float32") /* ty=Tensor[(72), float32] */;
    %185 = cast(meta[relay.Constant][18] /* ty=Tensor[(275), float32] */, dtype="float32") /* ty=Tensor[(275), float32] */;
    %186 = reshape(%184, newshape=[72]) /* ty=Tensor[(72), float32] */;
    %187 = reshape(%185, newshape=[275]) /* ty=Tensor[(275), float32] */;
    %188 = @func_6931(%186, %187) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(5, 12, 12), bool], Tensor[(72), float32], Tensor[(275), float32], Tensor[(150), float32], Tensor[(75), float32], Tensor[(6, 12, 10), float32]) */;
    %189 = @func_4486() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %190 = divide(%174, %175) /* ty=Tensor[(6, 12, 10), float32] */;
    %191 = @func_578(%178, %179) /* ty=Tensor[(15, 9), float32] */;
    %192 = @func_2109(%182, %183) /* ty=Tensor[(3, 7, 14), float32] */;
    %193 = %188.0;
    %194 = %189.0;
    (%190, %191, %var_7708, meta[relay.Constant][16] /* ty=Tensor[(135), float32] */, %192, meta[relay.Constant][17] /* ty=Tensor[(294), float32] */, %193, %var_7726, meta[relay.Constant][18] /* ty=Tensor[(275), float32] */, %194)
  };
  %195(%var_7753, %var_7754, %var_7755) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(135), float32], Tensor[(3, 7, 14), float32], Tensor[(294), float32], Tensor[(6, 12, 10), float32], Tensor[(72), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32]) */
}

def @func_3054(%var_3052: Tensor[(14, 3, 2), uint32], %var_3053: Tensor[(14, 3, 2), uint32]) -> (Tensor[(14, 3, 2), float32], Tensor[(14, 3, 2), float32], Tensor[(2, 6, 9), float32], Tensor[(18, 6), float32]) {
  %209 = fn (%var_3004: Tensor[(14, 3, 2), uint32], %var_3005: Tensor[(14, 3, 2), uint32]) -> (Tensor[(14, 3, 2), float32], Tensor[(14, 3, 2), float32], Tensor[(2, 6, 9), float32], Tensor[(18, 6), float32]) {
    %196 = cast(%var_3005, dtype="float32") /* ty=Tensor[(14, 3, 2), float32] */;
    %197 = cast(%var_3005, dtype="uint32") /* ty=Tensor[(14, 3, 2), uint32] */;
    %198 = shape_of(%var_3004, dtype="int32") /* ty=Tensor[(3), int32] */;
    %199 = cast(%var_3004, dtype="uint32") /* ty=Tensor[(14, 3, 2), uint32] */;
    %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %201 = right_shift(%199, %200) /* ty=Tensor[(14, 3, 2), uint32] */;
    %202 = cast(%201, dtype="float32") /* ty=Tensor[(14, 3, 2), float32] */;
    %203 = cast(meta[relay.Constant][19] /* ty=Tensor[(18, 6), float32] */, dtype="float32") /* ty=Tensor[(18, 6), float32] */;
    %204 = reshape(%203, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
    %205 = @func_1256(%204) /* ty=(Tensor[(2, 6, 9), float32],) */;
    %206 = cosh(%196) /* ty=Tensor[(14, 3, 2), float32] */;
    %207 = sin(%202) /* ty=Tensor[(14, 3, 2), float32] */;
    %208 = %205.0;
    (%206, %207, %208, meta[relay.Constant][19] /* ty=Tensor[(18, 6), float32] */)
  };
  %209(%var_3052, %var_3053) /* ty=(Tensor[(14, 3, 2), float32], Tensor[(14, 3, 2), float32], Tensor[(2, 6, 9), float32], Tensor[(18, 6), float32]) */
}

def @func_2112(%var_2110: Tensor[(3, 7, 14), float32], %var_2111: Tensor[(3, 7, 14), float32]) -> Tensor[(3, 7, 14), float32] {
  %214 = fn (%var_2101: Tensor[(3, 7, 14), float32], %var_2102: Tensor[(3, 7, 14), float32]) -> Tensor[(3, 7, 14), float32] {
    %210 = cast(%var_2102, dtype="float32") /* ty=Tensor[(3, 7, 14), float32] */;
    %211 = shape_of(%var_2101, dtype="int32") /* ty=Tensor[(3), int32] */;
    %212 = cast(%var_2101, dtype="float32") /* ty=Tensor[(3, 7, 14), float32] */;
    %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%212, %213) /* ty=Tensor[(3, 7, 14), float32] */
  };
  %214(%var_2110, %var_2111) /* ty=Tensor[(3, 7, 14), float32] */
}

def @func_6648() -> (Tensor[(6, 12, 10), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float64]) {
  %215 = @func_5365() /* ty=(Tensor[(275), float32], Tensor[(6, 12, 10), float32]) */;
  %216 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %217 = %216.0;
  %218 = cast(%217, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  %219 = @func_4431() /* ty=Tensor[(6, 12, 10), float32] */;
  %220 = %215.0;
  %221 = sinh(%218) /* ty=Tensor[(6, 12, 10), float64] */;
  (%219, %220, %221)
}

def @func_6435() -> (Tensor[(6, 12, 10), float32],) {
  %223 = fn () -> (Tensor[(6, 12, 10), float32],) {
    %222 = @func_3201() /* ty=Tensor[(6, 12, 10), float32] */;
    (%222,)
  };
  %223() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_2670(%var_2668: uint32, %var_2669: Tensor[(2, 2, 3), uint32]) -> (Tensor[(2, 2, 3), uint32],) {
  %227 = fn (%var_2647: uint32, %var_2648: Tensor[(2, 2, 3), uint32]) -> (Tensor[(2, 2, 3), uint32],) {
    %224 = cast(%var_2647, dtype="uint32") /* ty=uint32 */;
    %225 = cast(%var_2648, dtype="uint32") /* ty=Tensor[(2, 2, 3), uint32] */;
    %226 = bitwise_or(%224, %225) /* ty=Tensor[(2, 2, 3), uint32] */;
    (%226,)
  };
  %227(%var_2668, %var_2669) /* ty=(Tensor[(2, 2, 3), uint32],) */
}

def @func_6505(%var_6504: Tensor[(180), float32]) -> (Tensor[(2, 6, 15), float32], Tensor[(180), float32], Tensor[(6, 12, 10), float64]) {
  %237 = fn (%var_6480: Tensor[(180), float32]) -> (Tensor[(2, 6, 15), float32], Tensor[(180), float32], Tensor[(6, 12, 10), float64]) {
    %228 = cast(%var_6480, dtype="float32") /* ty=Tensor[(180), float32] */;
    %229 = cast(%var_6480, dtype="float32") /* ty=Tensor[(180), float32] */;
    %230 = reshape(%228, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), float32] */;
    %231 = reshape(%229, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), float32] */;
    %232 = @func_3115(%230, %231) /* ty=(Tensor[(2, 6, 15), float32], Tensor[(2, 6, 15), float64]) */;
    %233 = @func_5455() /* ty=Tensor[(6, 12, 10), float32] */;
    %234 = cast(%233, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
    %235 = %232.0;
    %236 = rsqrt(%234) /* ty=Tensor[(6, 12, 10), float64] */;
    (%235, %var_6480, %236)
  };
  %237(%var_6504) /* ty=(Tensor[(2, 6, 15), float32], Tensor[(180), float32], Tensor[(6, 12, 10), float64]) */
}

def @func_7596() -> Tensor[(6, 12, 10), float32] {
  %238 = @func_3947() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %238.0
}

def @func_7137(%var_7113: Tensor[(275), float32], %var_7125: Tensor[(429), int32], %var_7127: Tensor[(420), float64]) -> (Tensor[(275), uint8], Tensor[(13, 11, 3), bool], Tensor[(429), int32], Tensor[(1, 36), float32], Tensor[(420), float64]) {
  %239 = @func_6648() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float64]) */;
  %240 = %239.1;
  %241 = cast(%240, dtype="float32") /* ty=Tensor[(275), float32] */;
  %242 = atan(%241) /* ty=Tensor[(275), float32] */;
  %243 = cast(%var_7113, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(1), int32] */;
  %245 = cast(%242, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %247 = cast(%var_7125, dtype="int32") /* ty=Tensor[(429), int32] */;
  %248 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 36), float32] */, dtype="float32") /* ty=Tensor[(1, 36), float32] */;
  %249 = cast(%var_7127, dtype="float64") /* ty=Tensor[(420), float64] */;
  %250 = reshape(%247, newshape=[13, 11, 3]) /* ty=Tensor[(13, 11, 3), int32] */;
  %251 = reshape(%248, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %252 = reshape(%249, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %253 = @func_866(%250, %251, %252) /* ty=(Tensor[(13, 11, 3), bool], Tensor[(420), float64], Tensor[(36), float32], Tensor[(420), float64]) */;
  %254 = logical_xor(%245, %246) /* ty=Tensor[(275), uint8] */;
  %255 = %253.0;
  (%254, %255, %var_7125, meta[relay.Constant][20] /* ty=Tensor[(1, 36), float32] */, %var_7127)
}

def @func_147(%var_146: Tensor[(13, 16, 4), float64]) -> (Tensor[(13, 16, 4), float64],) {
  %258 = fn (%var_137: Tensor[(13, 16, 4), float64]) -> (Tensor[(13, 16, 4), float64],) {
    %256 = cast(%var_137, dtype="float64") /* ty=Tensor[(13, 16, 4), float64] */;
    %257 = log2(%256) /* ty=Tensor[(13, 16, 4), float64] */;
    (%257,)
  };
  %258(%var_146) /* ty=(Tensor[(13, 16, 4), float64],) */
}

def @func_7351() -> (Tensor[(6, 12, 10), float32],) {
  %261 = fn () -> (Tensor[(6, 12, 10), float32],) {
    %259 = @func_4260() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %260 = %259.0;
    (%260,)
  };
  %261() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_7381() -> (Tensor[(6, 12, 10), float32],) {
  @func_7379() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_4260() -> (Tensor[(6, 12, 10), float32],) {
  %262 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %263 = %262.0;
  (%263,)
}

def @func_3119(%var_3117: Tensor[(2, 6, 15), float32], %var_3118: Tensor[(2, 6, 15), float32]) -> (Tensor[(2, 6, 15), float32], Tensor[(2, 6, 15), float64]) {
  @func_3115(%var_3117, %var_3118) /* ty=(Tensor[(2, 6, 15), float32], Tensor[(2, 6, 15), float64]) */
}

def @func_4527(%var_4525: float64, %var_4526: Tensor[(6, 14, 6), float64]) -> Tensor[(6, 14, 6), float64] {
  @func_4523(%var_4525, %var_4526) /* ty=Tensor[(6, 14, 6), float64] */
}

def @func_4625(%var_4624: Tensor[(8, 11, 9), uint8]) -> (Tensor[(8, 11, 9), bool], Tensor[(6, 12, 10), float32]) {
  %271 = fn (%var_4569: Tensor[(8, 11, 9), uint8]) -> (Tensor[(8, 11, 9), bool], Tensor[(6, 12, 10), float32]) {
    %264 = cast(%var_4569, dtype="bool") /* ty=Tensor[(8, 11, 9), bool] */;
    %265 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(8, 11, 9), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %266 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 11, 9), uint8] */, dtype="bool") /* ty=Tensor[(8, 11, 9), bool] */;
    %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %268 = @func_4513() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %269 = less(%266, %267) /* ty=Tensor[(8, 11, 9), bool] */;
    %270 = %268.0;
    (%269, %270)
  };
  %271(%var_4624) /* ty=(Tensor[(8, 11, 9), bool], Tensor[(6, 12, 10), float32]) */
}

def @func_4488() -> (Tensor[(6, 12, 10), float32],) {
  @func_4486() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_4711(%var_4709: Tensor[(135), float32], %var_4710: Tensor[(12), uint32]) -> (Tensor[(6, 12, 10), float32], Tensor[(13, 3, 10), float32], Tensor[(390), float32], Tensor[(135), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32], Tensor[(2, 2, 3), uint32], Tensor[(5, 3, 5), float64], Tensor[(15, 5), float32]) {
  @func_4707(%var_4709, %var_4710) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(13, 3, 10), float32], Tensor[(390), float32], Tensor[(135), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32], Tensor[(2, 2, 3), uint32], Tensor[(5, 3, 5), float64], Tensor[(15, 5), float32]) */
}

def @func_5158() -> (Tensor[(6, 12, 10), float32], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64]) {
  %272 = @func_4560() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) */;
  %273 = cast(meta[relay.Constant][22] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %274 = cast(meta[relay.Constant][23] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %275 = reshape(%273, newshape=[]) /* ty=int8 */;
  %276 = reshape(%274, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float64] */;
  %277 = @func_122(%275, %276) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */;
  %278 = %272.3;
  %279 = %277.6;
  (%278, %279, meta[relay.Constant][22] /* ty=int8 */, meta[relay.Constant][23] /* ty=Tensor[(420), float64] */)
}

def @func_1320(%var_1317: Tensor[(10, 4, 2), uint64], %var_1318: Tensor[(10, 4, 2), uint64], %var_1319: Tensor[(10, 4, 2), uint64]) -> (Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) {
  %290 = fn (%var_1280: Tensor[(10, 4, 2), uint64], %var_1281: Tensor[(10, 4, 2), uint64], %var_1310: Tensor[(10, 4, 2), uint64]) -> (Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) {
    %280 = cast(%var_1281, dtype="bool") /* ty=Tensor[(10, 4, 2), bool] */;
    %281 = shape_of(%var_1280, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(%var_1280, dtype="bool") /* ty=Tensor[(10, 4, 2), bool] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %284 = cast(%var_1310, dtype="int8") /* ty=Tensor[(10, 4, 2), int8] */;
    %285 = shape_of(%var_1280, dtype="int32") /* ty=Tensor[(3), int32] */;
    %286 = cast(%var_1280, dtype="int8") /* ty=Tensor[(10, 4, 2), int8] */;
    %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %288 = less(%282, %283) /* ty=Tensor[(10, 4, 2), bool] */;
    %289 = maximum(%286, %287) /* ty=Tensor[(10, 4, 2), int8] */;
    (%288, %289)
  };
  %290(%var_1317, %var_1318, %var_1319) /* ty=(Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) */
}

def @func_5290(%var_5288: float32, %var_5289: Tensor[(6, 5, 7), float32]) -> (Tensor[(6, 5, 7), float32],) {
  @func_5286(%var_5288, %var_5289) /* ty=(Tensor[(6, 5, 7), float32],) */
}

def @func_4146() -> Tensor[(6, 12, 10), float32] {
  %292 = fn () -> Tensor[(6, 12, 10), float32] {
    %291 = @func_3947() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %291.0
  };
  %292() /* ty=Tensor[(6, 12, 10), float32] */
}

def @func_4945() -> (Tensor[(6, 12, 10), float64], Tensor[(135), float64], Tensor[(135), float32]) {
  @func_4943() /* ty=(Tensor[(6, 12, 10), float64], Tensor[(135), float64], Tensor[(135), float32]) */
}

def @func_6650() -> (Tensor[(6, 12, 10), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float64]) {
  @func_6648() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float64]) */
}

def @func_6075(%var_6035: Tensor[(4, 6, 3), float32], %var_6040: Tensor[(720), int64], %var_6044: Tensor[(275), float32], %var_6058: Tensor[(5, 30), float32], %var_6066: Tensor[(75), float32]) -> (Tensor[(4, 6, 3), float32], Tensor[(5, 12, 12), bool], Tensor[(720), int64], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(10, 5, 3), uint8], Tensor[(5, 30), float32], Tensor[(5, 3, 5), float64], Tensor[(75), float32]) {
  %293 = cast(%var_6035, dtype="float32") /* ty=Tensor[(4, 6, 3), float32] */;
  %294 = cast(%var_6040, dtype="int64") /* ty=Tensor[(720), int64] */;
  %295 = reshape(%294, newshape=[5, 12, 12]) /* ty=Tensor[(5, 12, 12), int64] */;
  %296 = @func_1776(%295) /* ty=(Tensor[(5, 12, 12), bool], Tensor[(5, 12, 12), float64]) */;
  %297 = cast(%var_6044, dtype="float32") /* ty=Tensor[(275), float32] */;
  %298 = reshape(%297, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %299 = @func_3264(%298) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */;
  %300 = cast(%var_6058, dtype="float32") /* ty=Tensor[(5, 30), float32] */;
  %301 = reshape(%300, newshape=[10, 5, 3]) /* ty=Tensor[(10, 5, 3), float32] */;
  %302 = @func_5699(%301) /* ty=(Tensor[(10, 5, 3), uint8], Tensor[(10, ?, 3), int32], Tensor[(10, 1, 3), float32], Tensor[(10, 5, 3), int16]) */;
  %303 = cast(%var_6066, dtype="float32") /* ty=Tensor[(75), float32] */;
  %304 = cast(%var_6066, dtype="float32") /* ty=Tensor[(75), float32] */;
  %305 = reshape(%303, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %306 = reshape(%304, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %307 = @func_742(%305, %306) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 3, 5), float64]) */;
  %308 = sqrt(%293) /* ty=Tensor[(4, 6, 3), float32] */;
  %309 = %296.0;
  %310 = %299.1;
  %311 = %302.0;
  %312 = %307.1;
  (%308, %309, %var_6040, %310, %var_6044, %311, %var_6058, %312, %var_6066)
}

def @func_6082(%var_6077: Tensor[(4, 6, 3), float32], %var_6078: Tensor[(720), int64], %var_6079: Tensor[(275), float32], %var_6080: Tensor[(5, 30), float32], %var_6081: Tensor[(75), float32]) -> (Tensor[(4, 6, 3), float32], Tensor[(5, 12, 12), bool], Tensor[(720), int64], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(10, 5, 3), uint8], Tensor[(5, 30), float32], Tensor[(5, 3, 5), float64], Tensor[(75), float32]) {
  @func_6075(%var_6077, %var_6078, %var_6079, %var_6080, %var_6081) /* ty=(Tensor[(4, 6, 3), float32], Tensor[(5, 12, 12), bool], Tensor[(720), int64], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(10, 5, 3), uint8], Tensor[(5, 30), float32], Tensor[(5, 3, 5), float64], Tensor[(75), float32]) */
}

def @func_5989(%var_5987: Tensor[(8, 16, 11), float64], %var_5988: Tensor[(8, 16, 11), bool]) -> Tensor[(8, 16, 11), float64] {
  @func_5985(%var_5987, %var_5988) /* ty=Tensor[(8, 16, 11), float64] */
}

def @func_5243(%var_5242: int8) -> (Tensor[(6, 12, 10), float32], Tensor[(420), float64], int8) {
  %321 = fn (%var_5231: int8) -> (Tensor[(6, 12, 10), float32], Tensor[(420), float64], int8) {
    %313 = @func_4513() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %314 = %313.0;
    %315 = cast(%314, dtype="float32") /* ty=Tensor[(6, 12, 10), float32] */;
    %316 = cast(%var_5231, dtype="int8") /* ty=int8 */;
    %317 = reshape(%315, newshape=[6, 12, 10]) /* ty=Tensor[(6, 12, 10), float32] */;
    %318 = reshape(%316, newshape=[]) /* ty=int8 */;
    %319 = @func_4086(%317, %318) /* ty=(Tensor[(240, 1), float32], Tensor[(6, 12, 10), bool], Tensor[(420), float64], Tensor[(45), float32], int8) */;
    %320 = %319.2;
    (%314, %320, %var_5231)
  };
  %321(%var_5242) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(420), float64], int8) */
}

def @func_5160() -> (Tensor[(6, 12, 10), float32], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64]) {
  @func_5158() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64]) */
}

def @func_3150() -> (Tensor[(6, 12, 10), float32],) {
  %325 = fn () -> (Tensor[(6, 12, 10), float32],) {
    %322 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 1), float32] */;
    %323 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 12, 10), float32] */, dtype="float32") /* ty=Tensor[(6, 12, 10), float32] */;
    %324 = floor_mod(%322, %323) /* ty=Tensor[(6, 12, 10), float32] */;
    (%324,)
  };
  %325() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_7379() -> (Tensor[(6, 12, 10), float32],) {
  %326 = @func_4294() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %327 = %326.0;
  (%327,)
}

def @func_6752(%var_6751: Tensor[(180), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(2, 3, 2), bool], Tensor[(1800), float64], Tensor[(180), float32], Tensor[(6, 12, 10), float32], Tensor[(2, 6, 15), float32]) {
  %341 = fn (%var_6738: Tensor[(180), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(2, 3, 2), bool], Tensor[(1800), float64], Tensor[(180), float32], Tensor[(6, 12, 10), float32], Tensor[(2, 6, 15), float32]) {
    %328 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
    %329 = cast(meta[relay.Constant][26] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %330 = reshape(%329, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float64] */;
    %331 = @func_1185(%330) /* ty=(Tensor[(15, 10, 12), float64], Tensor[(2, 3, 2), bool], Tensor[(12), int8]) */;
    %332 = cast(%var_6738, dtype="float32") /* ty=Tensor[(180), float32] */;
    %333 = reshape(%332, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %334 = @func_6503(%333) /* ty=(Tensor[(2, 6, 15), float32], Tensor[(180), float32], Tensor[(6, 12, 10), float64]) */;
    %335 = %334.0;
    %336 = cast(%335, dtype="float32") /* ty=Tensor[(2, 6, 15), float32] */;
    %337 = %328.0;
    %338 = %331.1;
    %339 = @func_4431() /* ty=Tensor[(6, 12, 10), float32] */;
    %340 = cos(%336) /* ty=Tensor[(2, 6, 15), float32] */;
    (%337, %338, meta[relay.Constant][26] /* ty=Tensor[(1800), float64] */, %var_6738, %339, %340)
  };
  %341(%var_6751) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(2, 3, 2), bool], Tensor[(1800), float64], Tensor[(180), float32], Tensor[(6, 12, 10), float32], Tensor[(2, 6, 15), float32]) */
}

def @func_4943() -> (Tensor[(6, 12, 10), float64], Tensor[(135), float64], Tensor[(135), float32]) {
  %342 = @func_4486() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %343 = %342.0;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  %345 = cast(meta[relay.Constant][27] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %346 = reshape(%345, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %347 = @func_3581(%346) /* ty=(Tensor[(15, 9), float32], Tensor[(390), float32], Tensor[(15, 13, 16), int32], Tensor[(135), float64]) */;
  %348 = atan(%344) /* ty=Tensor[(6, 12, 10), float64] */;
  %349 = %347.3;
  (%348, %349, meta[relay.Constant][27] /* ty=Tensor[(135), float32] */)
}

def @func_1187(%var_1186: Tensor[(15, 10, 12), float64]) -> (Tensor[(15, 10, 12), float64], Tensor[(2, 3, 2), bool], Tensor[(12), int8]) {
  %360 = fn (%var_1178: Tensor[(15, 10, 12), float64]) -> (Tensor[(15, 10, 12), float64], Tensor[(2, 3, 2), bool], Tensor[(12), int8]) {
    %350 = cast(%var_1178, dtype="float64") /* ty=Tensor[(15, 10, 12), float64] */;
    %351 = cast(meta[relay.Constant][28] /* ty=Tensor[(12), int8] */, dtype="int8") /* ty=Tensor[(12), int8] */;
    %352 = cast(meta[relay.Constant][28] /* ty=Tensor[(12), int8] */, dtype="int8") /* ty=Tensor[(12), int8] */;
    %353 = cast(meta[relay.Constant][28] /* ty=Tensor[(12), int8] */, dtype="int8") /* ty=Tensor[(12), int8] */;
    %354 = reshape(%351, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
    %355 = reshape(%352, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
    %356 = reshape(%353, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
    %357 = @func_1072(%354, %355, %356) /* ty=(Tensor[(2, 3, 2), uint16], Tensor[(2, 3, 2), bool]) */;
    %358 = log(%350) /* ty=Tensor[(15, 10, 12), float64] */;
    %359 = %357.1;
    (%358, %359, meta[relay.Constant][28] /* ty=Tensor[(12), int8] */)
  };
  %360(%var_1186) /* ty=(Tensor[(15, 10, 12), float64], Tensor[(2, 3, 2), bool], Tensor[(12), int8]) */
}

def @func_3456() -> (Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32]) {
  %363 = fn () -> (Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32]) {
    %361 = @func_3201() /* ty=Tensor[(6, 12, 10), float32] */;
    %362 = @func_3431() /* ty=Tensor[(6, 12, 10), float32] */;
    (%361, %362)
  };
  %363() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32]) */
}

def @func_3906(%var_3875: Tensor[(6, 12, 10), float32]) -> (Tensor[(6, 12, 10), bool], Tensor[(6, 5, 11), bool], Tensor[(330), float32], Tensor[(6, 12, 10), float32], Tensor[(5, 12, 12), bool]) {
  %364 = @func_3455() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32]) */;
  %365 = %364.0;
  %366 = cast(%var_3875, dtype="uint16") /* ty=Tensor[(6, 12, 10), uint16] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%365, dtype="uint16") /* ty=Tensor[(6, 12, 10), uint16] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %370 = add(%368, %369) /* ty=Tensor[(6, 12, 10), uint16] */;
  %371 = cast(%370, dtype="bool") /* ty=Tensor[(6, 12, 10), bool] */;
  %372 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%365, dtype="bool") /* ty=Tensor[(6, 12, 10), bool] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %375 = cast(meta[relay.Constant][29] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %376 = cast(meta[relay.Constant][29] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %377 = cast(meta[relay.Constant][29] /* ty=Tensor[(330), float32] */, dtype="float32") /* ty=Tensor[(330), float32] */;
  %378 = reshape(%375, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float32] */;
  %379 = reshape(%376, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float32] */;
  %380 = reshape(%377, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float32] */;
  %381 = @func_3530(%378, %379, %380) /* ty=(Tensor[(6, 5, 11), float32], Tensor[(6, 5, 11), bool]) */;
  %382 = @func_3455() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32]) */;
  %383 = cast(%365, dtype="int64") /* ty=Tensor[(6, 12, 10), int64] */;
  %384 = reshape(%383, newshape=[5, 12, 12]) /* ty=Tensor[(5, 12, 12), int64] */;
  %385 = @func_1776(%384) /* ty=(Tensor[(5, 12, 12), bool], Tensor[(5, 12, 12), float64]) */;
  %386 = less_equal(%373, %374) /* ty=Tensor[(6, 12, 10), bool] */;
  %387 = %381.1;
  %388 = %382.1;
  %389 = %385.0;
  (%386, %387, meta[relay.Constant][29] /* ty=Tensor[(330), float32] */, %388, %389)
}

def @func_5701(%var_5700: Tensor[(10, 5, 3), float32]) -> (Tensor[(10, 5, 3), uint8], Tensor[(10, ?, 3), int32], Tensor[(10, 1, 3), float32], Tensor[(10, 5, 3), int16]) {
  %410 = fn (%var_5633: Tensor[(10, 5, 3), float32]) -> (Tensor[(10, 5, 3), uint8], Tensor[(10, ?, 3), int32], Tensor[(10, 1, 3), float32], Tensor[(10, 5, 3), int16]) {
    %390 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 1, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
    %391 = acosh(%390) /* ty=Tensor[(10, 1, 3), float32] */;
    %392 = cast(%391, dtype="uint8") /* ty=Tensor[(10, 1, 3), uint8] */;
    %393 = cast(%var_5633, dtype="uint8") /* ty=Tensor[(10, 5, 3), uint8] */;
    %394 = cast(%391, dtype="int32") /* ty=Tensor[(10, 1, 3), int32] */;
    %395 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(10, 1, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %396 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 1, 3), float32] */, dtype="int32") /* ty=Tensor[(10, 1, 3), int32] */;
    %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %398 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 1, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
    %399 = cast(%var_5633, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
    %400 = cast(%391, dtype="float32") /* ty=Tensor[(10, 1, 3), float32] */;
    %401 = floor_mod(%399, %400) /* ty=Tensor[(10, 5, 3), float32] */;
    %402 = cast(%401, dtype="float32") /* ty=Tensor[(10, 5, 3), float32] */;
    %403 = atan(%402) /* ty=Tensor[(10, 5, 3), float32] */;
    %404 = cast(%403, dtype="int16") /* ty=Tensor[(10, 5, 3), int16] */;
    %405 = cast(%391, dtype="int16") /* ty=Tensor[(10, 1, 3), int16] */;
    %406 = bitwise_and(%392, %393) /* ty=Tensor[(10, 5, 3), uint8] */;
    %407 = bitwise_xor(%396, %397) /* ty=Tensor[(10, ?, 3), int32] */;
    %408 = cosh(%398) /* ty=Tensor[(10, 1, 3), float32] */;
    %409 = minimum(%404, %405) /* ty=Tensor[(10, 5, 3), int16] */;
    (%406, %407, %408, %409)
  };
  %410(%var_5700) /* ty=(Tensor[(10, 5, 3), uint8], Tensor[(10, ?, 3), int32], Tensor[(10, 1, 3), float32], Tensor[(10, 5, 3), int16]) */
}

def @func_5206() -> (Tensor[(420), float64], Tensor[(11, 5, 5), float32], Tensor[(1, 275), float32]) {
  %417 = fn () -> (Tensor[(420), float64], Tensor[(11, 5, 5), float32], Tensor[(1, 275), float32]) {
    %411 = @func_5158() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64]) */;
    %412 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 275), float32] */, dtype="float32") /* ty=Tensor[(1, 275), float32] */;
    %413 = reshape(%412, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float32] */;
    %414 = @func_2629(%413) /* ty=(Tensor[(11, 5, 5), float32],) */;
    %415 = %411.3;
    %416 = %414.0;
    (%415, %416, meta[relay.Constant][31] /* ty=Tensor[(1, 275), float32] */)
  };
  %417() /* ty=(Tensor[(420), float64], Tensor[(11, 5, 5), float32], Tensor[(1, 275), float32]) */
}

def @func_1077(%var_1074: Tensor[(2, 3, 2), int8], %var_1075: Tensor[(2, 3, 2), int8], %var_1076: Tensor[(2, 3, 2), int8]) -> (Tensor[(2, 3, 2), uint16], Tensor[(2, 3, 2), bool]) {
  @func_1072(%var_1074, %var_1075, %var_1076) /* ty=(Tensor[(2, 3, 2), uint16], Tensor[(2, 3, 2), bool]) */
}

def @func_1031(%var_1029: Tensor[(13, 3, 10), float32], %var_1030: Tensor[(15, 9), float32]) -> (Tensor[(13, 3, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(15, 9), float32]) {
  @func_1027(%var_1029, %var_1030) /* ty=(Tensor[(13, 3, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(15, 9), float32]) */
}

def @func_3431() -> Tensor[(6, 12, 10), float32] {
  %418 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %418.0
}

def @func_6412(%var_6411: int8) -> (Tensor[(6, 12, 10), float64], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64], Tensor[(6, 12, 10), float32]) {
  %431 = fn (%var_6393: int8) -> (Tensor[(6, 12, 10), float64], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64], Tensor[(6, 12, 10), float32]) {
    %419 = @func_6302() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %420 = %419.0;
    %421 = cast(%420, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
    %422 = cast(%var_6393, dtype="int8") /* ty=int8 */;
    %423 = cast(meta[relay.Constant][32] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %424 = reshape(%422, newshape=[]) /* ty=int8 */;
    %425 = reshape(%423, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float64] */;
    %426 = @func_122(%424, %425) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */;
    %427 = @func_6302() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %428 = log(%421) /* ty=Tensor[(6, 12, 10), float64] */;
    %429 = %426.6;
    %430 = %427.0;
    (%428, %429, %var_6393, meta[relay.Constant][32] /* ty=Tensor[(420), float64] */, %430)
  };
  %431(%var_6411) /* ty=(Tensor[(6, 12, 10), float64], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64], Tensor[(6, 12, 10), float32]) */
}

def @func_6882() -> Tensor[(6, 12, 10), float64] {
  %433 = fn () -> Tensor[(6, 12, 10), float64] {
    %432 = @func_4943() /* ty=(Tensor[(6, 12, 10), float64], Tensor[(135), float64], Tensor[(135), float32]) */;
    %432.0
  };
  %433() /* ty=Tensor[(6, 12, 10), float64] */
}

def @func_3219() -> (Tensor[(6, 12, 10), float32],) {
  %435 = fn () -> (Tensor[(6, 12, 10), float32],) {
    %434 = @func_3201() /* ty=Tensor[(6, 12, 10), float32] */;
    (%434,)
  };
  %435() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_3909(%var_3907: Tensor[(6, 12, 10), float32]) -> (Tensor[(6, 12, 10), bool], Tensor[(6, 5, 11), bool], Tensor[(330), float32], Tensor[(6, 12, 10), float32], Tensor[(5, 12, 12), bool]) {
  @func_3906(%var_3907) /* ty=(Tensor[(6, 12, 10), bool], Tensor[(6, 5, 11), bool], Tensor[(330), float32], Tensor[(6, 12, 10), float32], Tensor[(5, 12, 12), bool]) */
}

def @func_5365() -> (Tensor[(275), float32], Tensor[(6, 12, 10), float32]) {
  %436 = @func_4560() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) */;
  %437 = @func_3947() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %438 = %436.2;
  %439 = %437.0;
  (%438, %439)
}

def @func_3760(%var_3756: float32, %var_3757: Tensor[(2, 216), float32], %var_3758: Tensor[(1, 420), float64], %var_3759: Tensor[(6, 12, 10), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(5, 16, 3), float32], float32, Tensor[(2, 216), float32], Tensor[(1, 420), float64], Tensor[(6, 12, 10), int32]) {
  %457 = fn (%var_3713: float32, %var_3714: Tensor[(2, 216), float32], %var_3715: Tensor[(1, 420), float64], %var_3740: Tensor[(6, 12, 10), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(5, 16, 3), float32], float32, Tensor[(2, 216), float32], Tensor[(1, 420), float64], Tensor[(6, 12, 10), int32]) {
    %440 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %441 = cast(%var_3713, dtype="float32") /* ty=float32 */;
    %442 = cast(%var_3714, dtype="float32") /* ty=Tensor[(2, 216), float32] */;
    %443 = cast(%var_3715, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
    %444 = reshape(%441, newshape=[]) /* ty=float32 */;
    %445 = reshape(%442, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), float32] */;
    %446 = reshape(%443, newshape=[420]) /* ty=Tensor[(420), float64] */;
    %447 = @func_474(%444, %445, %446) /* ty=(Tensor[(9, 12, 4), float32], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32], Tensor[(5, 16, 3), float32], Tensor[(420), float64]) */;
    %448 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %449 = %448.0;
    %450 = cast(%var_3740, dtype="int32") /* ty=Tensor[(6, 12, 10), int32] */;
    %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
    %452 = cast(%449, dtype="int32") /* ty=Tensor[(6, 12, 10), int32] */;
    %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %454 = %440.0;
    %455 = %447.3;
    %456 = subtract(%452, %453) /* ty=Tensor[(6, 12, 10), int32] */;
    (%454, %455, %var_3713, %var_3714, %var_3715, %456)
  };
  %457(%var_3756, %var_3757, %var_3758, %var_3759) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(5, 16, 3), float32], float32, Tensor[(2, 216), float32], Tensor[(1, 420), float64], Tensor[(6, 12, 10), int32]) */
}

def @func_3692(%var_3689: Tensor[(330), float32], %var_3690: uint32, %var_3691: Tensor[(12), uint32]) -> (Tensor[(6, 12, 10), int32], Tensor[(6, 5, 11), bool], Tensor[(330), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32]) {
  %479 = fn (%var_3679: Tensor[(330), float32], %var_3683: uint32, %var_3684: Tensor[(12), uint32]) -> (Tensor[(6, 12, 10), int32], Tensor[(6, 5, 11), bool], Tensor[(330), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32]) {
    %458 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %459 = %458.0;
    %460 = cast(meta[relay.Constant][33] /* ty=Tensor[(6, 12, 10), float32] */, dtype="int32") /* ty=Tensor[(6, 12, 10), int32] */;
    %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
    %462 = cast(%459, dtype="int32") /* ty=Tensor[(6, 12, 10), int32] */;
    %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %464 = cast(%var_3679, dtype="float32") /* ty=Tensor[(330), float32] */;
    %465 = cast(%var_3679, dtype="float32") /* ty=Tensor[(330), float32] */;
    %466 = cast(%var_3679, dtype="float32") /* ty=Tensor[(330), float32] */;
    %467 = reshape(%464, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float32] */;
    %468 = reshape(%465, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float32] */;
    %469 = reshape(%466, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float32] */;
    %470 = @func_3530(%467, %468, %469) /* ty=(Tensor[(6, 5, 11), float32], Tensor[(6, 5, 11), bool]) */;
    %471 = cast(%var_3683, dtype="uint32") /* ty=uint32 */;
    %472 = cast(%var_3684, dtype="uint32") /* ty=Tensor[(12), uint32] */;
    %473 = reshape(%471, newshape=[]) /* ty=uint32 */;
    %474 = reshape(%472, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), uint32] */;
    %475 = @func_2667(%473, %474) /* ty=(Tensor[(2, 2, 3), uint32],) */;
    %476 = bitwise_and(%462, %463) /* ty=Tensor[(6, 12, 10), int32] */;
    %477 = %470.1;
    %478 = %475.0;
    (%476, %477, %var_3679, %478, %var_3683, %var_3684)
  };
  %479(%var_3689, %var_3690, %var_3691) /* ty=(Tensor[(6, 12, 10), int32], Tensor[(6, 5, 11), bool], Tensor[(330), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32]) */
}

def @func_7300() -> (Tensor[(6, 12, 10), float32],) {
  %481 = fn () -> (Tensor[(6, 12, 10), float32],) {
    %480 = @func_3963() /* ty=Tensor[(6, 12, 10), float32] */;
    (%480,)
  };
  %481() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_7263() -> (Tensor[(6, 12, 10), float32], Tensor[(180), float32], Tensor[(6, 30), float32]) {
  %487 = fn () -> (Tensor[(6, 12, 10), float32], Tensor[(180), float32], Tensor[(6, 30), float32]) {
    %482 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 30), float32] */, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
    %483 = reshape(%482, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %484 = @func_6750(%483) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(2, 3, 2), bool], Tensor[(1800), float64], Tensor[(180), float32], Tensor[(6, 12, 10), float32], Tensor[(2, 6, 15), float32]) */;
    %485 = @func_4449() /* ty=Tensor[(6, 12, 10), float32] */;
    %486 = %484.3;
    (%485, %486, meta[relay.Constant][34] /* ty=Tensor[(6, 30), float32] */)
  };
  %487() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(180), float32], Tensor[(6, 30), float32]) */
}

def @func_4514() -> (Tensor[(6, 12, 10), float32],) {
  %490 = fn () -> (Tensor[(6, 12, 10), float32],) {
    %488 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %489 = %488.0;
    (%489,)
  };
  %490() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_7663() -> Tensor[(420), float64] {
  @func_7661() /* ty=Tensor[(420), float64] */
}

def @func_3202() -> Tensor[(6, 12, 10), float32] {
  %492 = fn () -> Tensor[(6, 12, 10), float32] {
    %491 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %491.0
  };
  %492() /* ty=Tensor[(6, 12, 10), float32] */
}

def @func_4379(%var_4374: Tensor[(75), float32], %var_4375: float32, %var_4376: Tensor[(429), int32], %var_4377: Tensor[(36), float32], %var_4378: Tensor[(420), float64]) -> (Tensor[(6, 12, 10), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(2, 6, 15), float64], Tensor[(180), float32], Tensor[(15, 9), float32], float32, Tensor[(135), float32], Tensor[(36), float32], Tensor[(429), int32], Tensor[(36), float32], Tensor[(420), float64]) {
  @func_4372(%var_4374, %var_4375, %var_4376, %var_4377, %var_4378) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(2, 6, 15), float64], Tensor[(180), float32], Tensor[(15, 9), float32], float32, Tensor[(135), float32], Tensor[(36), float32], Tensor[(429), int32], Tensor[(36), float32], Tensor[(420), float64]) */
}

def @func_1904(%var_1900: Tensor[(11, 12, 11), int32], %var_1901: Tensor[(11, 12, 11), int32], %var_1902: Tensor[(5, 78), float32], %var_1903: Tensor[(135), float32]) -> (Tensor[(11, 12, 11), int32], Tensor[(10, 4, 2), bool], Tensor[(1, 80), uint64], Tensor[(5, 12, 12), float64], Tensor[(720), int64], Tensor[(10, 4, 2), bool], Tensor[(135), float32], Tensor[(5, 3, 5), float32], Tensor[(15, 9), float32], Tensor[(75), int64], Tensor[(5, 78), int16], Tensor[(11, 12, 11), float32], Tensor[(2, 3, 2), uint16], Tensor[(12, 1), int8]) {
  @func_1898(%var_1900, %var_1901, %var_1902, %var_1903) /* ty=(Tensor[(11, 12, 11), int32], Tensor[(10, 4, 2), bool], Tensor[(1, 80), uint64], Tensor[(5, 12, 12), float64], Tensor[(720), int64], Tensor[(10, 4, 2), bool], Tensor[(135), float32], Tensor[(5, 3, 5), float32], Tensor[(15, 9), float32], Tensor[(75), int64], Tensor[(5, 78), int16], Tensor[(11, 12, 11), float32], Tensor[(2, 3, 2), uint16], Tensor[(12, 1), int8]) */
}

def @func_2398(%var_2396: Tensor[(1, 14, 5), int16]) -> (Tensor[(14, 14, 5), bool],) {
  @func_2395(%var_2396) /* ty=(Tensor[(14, 14, 5), bool],) */
}

def @func_870(%var_867: Tensor[(13, 11, 3), int32], %var_868: Tensor[(36), float32], %var_869: Tensor[(420), float64]) -> (Tensor[(13, 11, 3), bool], Tensor[(420), float64], Tensor[(36), float32], Tensor[(420), float64]) {
  %508 = fn (%var_848: Tensor[(13, 11, 3), int32], %var_859: Tensor[(36), float32], %var_860: Tensor[(420), float64]) -> (Tensor[(13, 11, 3), bool], Tensor[(420), float64], Tensor[(36), float32], Tensor[(420), float64]) {
    %493 = cast(-3 /* ty=int32 */, dtype="bool") /* ty=bool */;
    %494 = cast(%var_848, dtype="bool") /* ty=Tensor[(13, 11, 3), bool] */;
    %495 = cast(%var_859, dtype="float32") /* ty=Tensor[(36), float32] */;
    %496 = cast(%var_859, dtype="float32") /* ty=Tensor[(36), float32] */;
    %497 = cast(%var_859, dtype="float32") /* ty=Tensor[(36), float32] */;
    %498 = cast(-3 /* ty=int32 */, dtype="int8") /* ty=int8 */;
    %499 = cast(%var_860, dtype="float64") /* ty=Tensor[(420), float64] */;
    %500 = reshape(%495, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), float32] */;
    %501 = reshape(%496, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), float32] */;
    %502 = reshape(%497, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), float32] */;
    %503 = reshape(%498, newshape=[]) /* ty=int8 */;
    %504 = reshape(%499, newshape=[420]) /* ty=Tensor[(420), float64] */;
    %505 = @func_816(%500, %501, %502, %503, %504) /* ty=(Tensor[(4, 3, 3), float32], Tensor[(4, 3, 3), bool], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64], Tensor[(4, 3, 3), float64], Tensor[(15, 9), float32], Tensor[(135), float32]) */;
    %506 = greater(%493, %494) /* ty=Tensor[(13, 11, 3), bool] */;
    %507 = %505.4;
    (%506, %507, %var_859, %var_860)
  };
  %508(%var_867, %var_868, %var_869) /* ty=(Tensor[(13, 11, 3), bool], Tensor[(420), float64], Tensor[(36), float32], Tensor[(420), float64]) */
}

def @func_3838(%var_3837: int8) -> (Tensor[(6, 12, 10), float32], Tensor[(6, 7, 10), float32], int8, Tensor[(1, 420), float64]) {
  %516 = fn (%var_3821: int8) -> (Tensor[(6, 12, 10), float32], Tensor[(6, 7, 10), float32], int8, Tensor[(1, 420), float64]) {
    %509 = cast(%var_3821, dtype="int8") /* ty=int8 */;
    %510 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 420), float64] */, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
    %511 = reshape(%509, newshape=[]) /* ty=int8 */;
    %512 = reshape(%510, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float64] */;
    %513 = @func_122(%511, %512) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */;
    %514 = @func_3431() /* ty=Tensor[(6, 12, 10), float32] */;
    %515 = %513.0;
    (%514, %515, %var_3821, meta[relay.Constant][35] /* ty=Tensor[(1, 420), float64] */)
  };
  %516(%var_3837) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(6, 7, 10), float32], int8, Tensor[(1, 420), float64]) */
}

def @func_3964() -> Tensor[(6, 12, 10), float32] {
  %518 = fn () -> Tensor[(6, 12, 10), float32] {
    %517 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
    %517.0
  };
  %518() /* ty=Tensor[(6, 12, 10), float32] */
}

def @func_823(%var_818: Tensor[(4, 3, 3), float32], %var_819: Tensor[(4, 3, 3), float32], %var_820: Tensor[(4, 3, 3), float32], %var_821: int8, %var_822: Tensor[(420), float64]) -> (Tensor[(4, 3, 3), float32], Tensor[(4, 3, 3), bool], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64], Tensor[(4, 3, 3), float64], Tensor[(15, 9), float32], Tensor[(135), float32]) {
  @func_816(%var_818, %var_819, %var_820, %var_821, %var_822) /* ty=(Tensor[(4, 3, 3), float32], Tensor[(4, 3, 3), bool], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64], Tensor[(4, 3, 3), float64], Tensor[(15, 9), float32], Tensor[(135), float32]) */
}

def @func_2925(%var_2923: Tensor[(80), uint64], %var_2924: Tensor[(18, 6), float32]) -> (Tensor[(2, 3, 16), uint8], Tensor[(10, 4, 2), int8], Tensor[(80), uint64], Tensor[(2, 6, 9), float32], Tensor[(18, 6), float32]) {
  %536 = fn (%var_2911: Tensor[(80), uint64], %var_2919: Tensor[(18, 6), float32]) -> (Tensor[(2, 3, 16), uint8], Tensor[(10, 4, 2), int8], Tensor[(80), uint64], Tensor[(2, 6, 9), float32], Tensor[(18, 6), float32]) {
    %519 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 3, 16), uint8] */, dtype="uint8") /* ty=Tensor[(2, 3, 16), uint8] */;
    %520 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(2, 3, 16), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %521 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 3, 16), uint8] */, dtype="uint8") /* ty=Tensor[(2, 3, 16), uint8] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %523 = cast(%var_2911, dtype="uint64") /* ty=Tensor[(80), uint64] */;
    %524 = cast(%var_2911, dtype="uint64") /* ty=Tensor[(80), uint64] */;
    %525 = cast(%var_2911, dtype="uint64") /* ty=Tensor[(80), uint64] */;
    %526 = reshape(%523, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
    %527 = reshape(%524, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
    %528 = reshape(%525, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
    %529 = @func_1316(%526, %527, %528) /* ty=(Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) */;
    %530 = cast(%var_2919, dtype="float32") /* ty=Tensor[(18, 6), float32] */;
    %531 = reshape(%530, newshape=[2, 6, 9]) /* ty=Tensor[(2, 6, 9), float32] */;
    %532 = @func_1256(%531) /* ty=(Tensor[(2, 6, 9), float32],) */;
    %533 = bitwise_xor(%521, %522) /* ty=Tensor[(2, 3, 16), uint8] */;
    %534 = %529.1;
    %535 = %532.0;
    (%533, %534, %var_2911, %535, %var_2919)
  };
  %536(%var_2923, %var_2924) /* ty=(Tensor[(2, 3, 16), uint8], Tensor[(10, 4, 2), int8], Tensor[(80), uint64], Tensor[(2, 6, 9), float32], Tensor[(18, 6), float32]) */
}

def @func_7661() -> Tensor[(420), float64] {
  %537 = @func_5158() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64]) */;
  %537.3
}

def @func_3366() -> (Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) {
  %544 = fn () -> (Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) {
    %538 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %539 = cast(meta[relay.Constant][38] /* ty=Tensor[(108), int8] */, dtype="int8") /* ty=Tensor[(108), int8] */;
    %540 = reshape(%539, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), int8] */;
    %541 = @func_529(%540) /* ty=(Tensor[(9, 4, 3), int8], Tensor[(13, 16, 4), float64], Tensor[(4, 208), float64], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32]) */;
    %542 = %538.0;
    %543 = %541.4;
    (%542, %543, meta[relay.Constant][38] /* ty=Tensor[(108), int8] */)
  };
  %544() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */
}

def @func_3266(%var_3265: Tensor[(275), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) {
  %553 = fn (%var_3254: Tensor[(275), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) {
    %545 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %546 = %545.0;
    %547 = cast(%546, dtype="float32") /* ty=Tensor[(6, 12, 10), float32] */;
    %548 = cast(%var_3254, dtype="float32") /* ty=Tensor[(275), float32] */;
    %549 = reshape(%548, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float32] */;
    %550 = @func_2629(%549) /* ty=(Tensor[(11, 5, 5), float32],) */;
    %551 = acosh(%547) /* ty=Tensor[(6, 12, 10), float32] */;
    %552 = %550.0;
    (%551, %552, %var_3254)
  };
  %553(%var_3265) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */
}

def @func_5128() -> (Tensor[(6, 12, 10), float32],) {
  %554 = @func_5058() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %555 = %554.0;
  (%555,)
}

def @func_5009() -> (Tensor[(5, 12, 12), bool], Tensor[(6, 12, 10), float64], Tensor[(6, 12, 10), float32]) {
  %566 = fn () -> (Tensor[(5, 12, 12), bool], Tensor[(6, 12, 10), float64], Tensor[(6, 12, 10), float32]) {
    %556 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %557 = %556.0;
    %558 = cast(%557, dtype="int64") /* ty=Tensor[(6, 12, 10), int64] */;
    %559 = reshape(%558, newshape=[5, 12, 12]) /* ty=Tensor[(5, 12, 12), int64] */;
    %560 = @func_1776(%559) /* ty=(Tensor[(5, 12, 12), bool], Tensor[(5, 12, 12), float64]) */;
    %561 = cast(%557, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
    %562 = @func_4260() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %563 = %560.0;
    %564 = log10(%561) /* ty=Tensor[(6, 12, 10), float64] */;
    %565 = %562.0;
    (%563, %564, %565)
  };
  %566() /* ty=(Tensor[(5, 12, 12), bool], Tensor[(6, 12, 10), float64], Tensor[(6, 12, 10), float32]) */
}

def @func_3115(%var_3104: Tensor[(2, 6, 15), float32], %var_3105: Tensor[(2, 6, 15), float32]) -> (Tensor[(2, 6, 15), float32], Tensor[(2, 6, 15), float64]) {
  %567 = cast(%var_3105, dtype="float32") /* ty=Tensor[(2, 6, 15), float32] */;
  %568 = shape_of(%var_3104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(%var_3104, dtype="float32") /* ty=Tensor[(2, 6, 15), float32] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %571 = cast(%var_3105, dtype="float64") /* ty=Tensor[(2, 6, 15), float64] */;
  %572 = power(%569, %570) /* ty=Tensor[(2, 6, 15), float32] */;
  %573 = log2(%571) /* ty=Tensor[(2, 6, 15), float64] */;
  (%572, %573)
}

def @func_7448() -> Tensor[(240, 1), float32] {
  %575 = fn () -> Tensor[(240, 1), float32] {
    %574 = @func_4024() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32], Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32]) */;
    %574.5
  };
  %575() /* ty=Tensor[(240, 1), float32] */
}

def @func_5741(%var_5717: Tensor[(108), int8], %var_5734: Tensor[(36), float32], %var_5736: Tensor[(420), float64]) -> (Tensor[(6, 12, 10), float32], Tensor[(13, 16, 4), float64], Tensor[(108), int8], Tensor[(135), float32], Tensor[(36), float32], int8, Tensor[(420), float64]) {
  %576 = @func_4024() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32], Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32]) */;
  %577 = cast(%var_5717, dtype="int8") /* ty=Tensor[(108), int8] */;
  %578 = reshape(%577, newshape=[9, 4, 3]) /* ty=Tensor[(9, 4, 3), int8] */;
  %579 = @func_529(%578) /* ty=(Tensor[(9, 4, 3), int8], Tensor[(13, 16, 4), float64], Tensor[(4, 208), float64], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32]) */;
  %580 = cast(%var_5734, dtype="float32") /* ty=Tensor[(36), float32] */;
  %581 = cast(%var_5734, dtype="float32") /* ty=Tensor[(36), float32] */;
  %582 = cast(%var_5734, dtype="float32") /* ty=Tensor[(36), float32] */;
  %583 = cast(meta[relay.Constant][39] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %584 = cast(%var_5736, dtype="float64") /* ty=Tensor[(420), float64] */;
  %585 = reshape(%580, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), float32] */;
  %586 = reshape(%581, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), float32] */;
  %587 = reshape(%582, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), float32] */;
  %588 = reshape(%583, newshape=[]) /* ty=int8 */;
  %589 = reshape(%584, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %590 = @func_816(%585, %586, %587, %588, %589) /* ty=(Tensor[(4, 3, 3), float32], Tensor[(4, 3, 3), bool], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64], Tensor[(4, 3, 3), float64], Tensor[(15, 9), float32], Tensor[(135), float32]) */;
  %591 = %576.4;
  %592 = %579.1;
  %593 = %590.7;
  (%591, %592, %var_5717, %593, %var_5734, meta[relay.Constant][39] /* ty=int8 */, %var_5736)
}

def @func_7921(%var_7920: Tensor[(275), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(13, 11, 3), bool], Tensor[(275), float32], Tensor[(39, 11), int32], Tensor[(420), float64]) {
  %603 = fn (%var_7892: Tensor[(275), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(13, 11, 3), bool], Tensor[(275), float32], Tensor[(39, 11), int32], Tensor[(420), float64]) {
    %594 = cast(%var_7892, dtype="float32") /* ty=Tensor[(275), float32] */;
    %595 = cast(meta[relay.Constant][40] /* ty=Tensor[(39, 11), int32] */, dtype="int32") /* ty=Tensor[(39, 11), int32] */;
    %596 = cast(meta[relay.Constant][41] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %597 = reshape(%594, newshape=[275]) /* ty=Tensor[(275), float32] */;
    %598 = reshape(%595, newshape=[429]) /* ty=Tensor[(429), int32] */;
    %599 = reshape(%596, newshape=[420]) /* ty=Tensor[(420), float64] */;
    %600 = @func_7137(%597, %598, %599) /* ty=(Tensor[(275), uint8], Tensor[(13, 11, 3), bool], Tensor[(429), int32], Tensor[(1, 36), float32], Tensor[(420), float64]) */;
    %601 = @func_5433() /* ty=Tensor[(6, 12, 10), float32] */;
    %602 = %600.1;
    (%601, %602, %var_7892, meta[relay.Constant][40] /* ty=Tensor[(39, 11), int32] */, meta[relay.Constant][41] /* ty=Tensor[(420), float64] */)
  };
  %603(%var_7920) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(13, 11, 3), bool], Tensor[(275), float32], Tensor[(39, 11), int32], Tensor[(420), float64]) */
}

def @func_7598() -> Tensor[(6, 12, 10), float32] {
  @func_7596() /* ty=Tensor[(6, 12, 10), float32] */
}

def @func_2395(%var_2387: Tensor[(1, 14, 5), int16]) -> (Tensor[(14, 14, 5), bool],) {
  %604 = cast(%var_2387, dtype="bool") /* ty=Tensor[(1, 14, 5), bool] */;
  %605 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 14, 5), int16] */, dtype="bool") /* ty=Tensor[(14, 14, 5), bool] */;
  %606 = greater(%604, %605) /* ty=Tensor[(14, 14, 5), bool] */;
  (%606,)
}

def @func_2629(%var_2594: Tensor[(11, 5, 5), float32]) -> (Tensor[(11, 5, 5), float32],) {
  %607 = cast(%var_2594, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  %608 = log10(%607) /* ty=Tensor[(11, 5, 5), float32] */;
  (%608,)
}

def @func_5985(%var_5968: Tensor[(8, 16, 11), float64], %var_5980: Tensor[(8, 16, 11), bool]) -> Tensor[(8, 16, 11), float64] {
  %609 = cast(%var_5968, dtype="float64") /* ty=Tensor[(8, 16, 11), float64] */;
  %610 = cos(%609) /* ty=Tensor[(8, 16, 11), float64] */;
  %611 = cast(%610, dtype="bool") /* ty=Tensor[(8, 16, 11), bool] */;
  %612 = shape_of(%var_5968, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%var_5968, dtype="bool") /* ty=Tensor[(8, 16, 11), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = not_equal(%613, %614) /* ty=Tensor[(8, 16, 11), bool] */;
  %616 = cast(%var_5980, dtype="float64") /* ty=Tensor[(8, 16, 11), float64] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%615, dtype="float64") /* ty=Tensor[(8, 16, 11), float64] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%618, %619) /* ty=Tensor[(8, 16, 11), float64] */
}

def @func_7008(%var_7006: int8, %var_7007: Tensor[(420), float64]) -> (Tensor[(108), int8], int8, Tensor[(420), float64], Tensor[(5, 16, 3), float64]) {
  %629 = fn (%var_6995: int8, %var_6996: Tensor[(420), float64]) -> (Tensor[(108), int8], int8, Tensor[(420), float64], Tensor[(5, 16, 3), float64]) {
    %620 = cast(%var_6995, dtype="int8") /* ty=int8 */;
    %621 = cast(%var_6996, dtype="float64") /* ty=Tensor[(420), float64] */;
    %622 = reshape(%620, newshape=[]) /* ty=int8 */;
    %623 = reshape(%621, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float64] */;
    %624 = @func_122(%622, %623) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */;
    %625 = %624.4;
    %626 = cast(%625, dtype="float64") /* ty=Tensor[(5, 16, 3), float64] */;
    %627 = @func_5894() /* ty=Tensor[(108), int8] */;
    %628 = cosh(%626) /* ty=Tensor[(5, 16, 3), float64] */;
    (%627, %var_6995, %var_6996, %628)
  };
  %629(%var_7006, %var_7007) /* ty=(Tensor[(108), int8], int8, Tensor[(420), float64], Tensor[(5, 16, 3), float64]) */
}

def @func_7853(%var_7851: Tensor[(75), float32], %var_7852: Tensor[(39, 11), int32]) -> (Tensor[(6, 12, 10), float32], Tensor[(5, 3, 5), float64], Tensor[(75), float32], Tensor[(36), float32], Tensor[(39, 11), int32], Tensor[(36), float32], Tensor[(210, 2), float64]) {
  @func_7849(%var_7851, %var_7852) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(5, 3, 5), float64], Tensor[(75), float32], Tensor[(36), float32], Tensor[(39, 11), int32], Tensor[(36), float32], Tensor[(210, 2), float64]) */
}

def @func_4880(%var_4879: Tensor[(294, 1), float32]) -> (Tensor[(275), float32], Tensor[(6, 12, 10), float32], Tensor[(14, 14, 5), bool], Tensor[(14, 5), int16], Tensor[(6, 12, 10), float32], Tensor[(3, 7, 14), float32], Tensor[(294, 1), float32], Tensor[(275), float32]) {
  %649 = fn (%var_4851: Tensor[(294, 1), float32]) -> (Tensor[(275), float32], Tensor[(6, 12, 10), float32], Tensor[(14, 14, 5), bool], Tensor[(14, 5), int16], Tensor[(6, 12, 10), float32], Tensor[(3, 7, 14), float32], Tensor[(294, 1), float32], Tensor[(275), float32]) {
    %630 = @func_4560() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) */;
    %631 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %632 = cast(meta[relay.Constant][43] /* ty=Tensor[(14, 5), int16] */, dtype="int16") /* ty=Tensor[(14, 5), int16] */;
    %633 = reshape(%632, newshape=[1, 14, 5]) /* ty=Tensor[(1, 14, 5), int16] */;
    %634 = @func_2395(%633) /* ty=(Tensor[(14, 14, 5), bool],) */;
    %635 = @func_4560() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) */;
    %636 = cast(%var_4851, dtype="float32") /* ty=Tensor[(294, 1), float32] */;
    %637 = cast(%var_4851, dtype="float32") /* ty=Tensor[(294, 1), float32] */;
    %638 = reshape(%636, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
    %639 = reshape(%637, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float32] */;
    %640 = %630.2;
    %641 = cast(%640, dtype="float32") /* ty=Tensor[(275), float32] */;
    %642 = reshape(%641, newshape=[275]) /* ty=Tensor[(275), float32] */;
    %643 = @func_3264(%642) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */;
    %644 = %631.0;
    %645 = %634.0;
    %646 = %635.0;
    %647 = @func_2109(%638, %639) /* ty=Tensor[(3, 7, 14), float32] */;
    %648 = %643.2;
    (%640, %644, %645, meta[relay.Constant][43] /* ty=Tensor[(14, 5), int16] */, %646, %647, %var_4851, %648)
  };
  %649(%var_4879) /* ty=(Tensor[(275), float32], Tensor[(6, 12, 10), float32], Tensor[(14, 14, 5), bool], Tensor[(14, 5), int16], Tensor[(6, 12, 10), float32], Tensor[(3, 7, 14), float32], Tensor[(294, 1), float32], Tensor[(275), float32]) */
}

def @func_1256(%var_1246: Tensor[(2, 6, 9), float32]) -> (Tensor[(2, 6, 9), float32],) {
  %650 = cast(%var_1246, dtype="float32") /* ty=Tensor[(2, 6, 9), float32] */;
  %651 = acosh(%650) /* ty=Tensor[(2, 6, 9), float32] */;
  (%651,)
}

def @func_6769(%var_6767: Tensor[(12, 14, 11), float64], %var_6768: int8) -> (Tensor[(12, 14, 11), float64], Tensor[(6, 12, 10), float32], int8) {
  @func_6765(%var_6767, %var_6768) /* ty=(Tensor[(12, 14, 11), float64], Tensor[(6, 12, 10), float32], int8) */
}

def @func_4970() -> Tensor[(6, 12, 10), float64] {
  @func_4968() /* ty=Tensor[(6, 12, 10), float64] */
}

def @func_1259(%var_1257: Tensor[(2, 6, 9), float32]) -> (Tensor[(2, 6, 9), float32],) {
  @func_1256(%var_1257) /* ty=(Tensor[(2, 6, 9), float32],) */
}

def @func_5592(%var_5587: Tensor[(6, 12, 10), float64], %var_5588: Tensor[(420, 1), float64], %var_5589: Tensor[(80, 1), uint64], %var_5590: Tensor[(14, 130), uint16], %var_5591: Tensor[(12), int8]) -> (Tensor[(36), float32], Tensor[(429), int32], Tensor[(36), float32], Tensor[(420, 1), float64], Tensor[(10, 4, 2), int8], Tensor[(80, 1), uint64], Tensor[(6, 12, 10), float64], Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(14, 130), uint16], Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32], float32, Tensor[(12), int8]) {
  @func_5585(%var_5587, %var_5588, %var_5589, %var_5590, %var_5591) /* ty=(Tensor[(36), float32], Tensor[(429), int32], Tensor[(36), float32], Tensor[(420, 1), float64], Tensor[(10, 4, 2), int8], Tensor[(80, 1), uint64], Tensor[(6, 12, 10), float64], Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(14, 130), uint16], Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32], float32, Tensor[(12), int8]) */
}

def @func_5434() -> Tensor[(6, 12, 10), float32] {
  %653 = fn () -> Tensor[(6, 12, 10), float32] {
    %652 = @func_5058() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %652.0
  };
  %653() /* ty=Tensor[(6, 12, 10), float32] */
}

def @func_5286(%var_5278: float32, %var_5279: Tensor[(6, 5, 7), float32]) -> (Tensor[(6, 5, 7), float32],) {
  %654 = cast(%var_5278, dtype="float32") /* ty=float32 */;
  %655 = cast(%var_5279, dtype="float32") /* ty=Tensor[(6, 5, 7), float32] */;
  %656 = power(%654, %655) /* ty=Tensor[(6, 5, 7), float32] */;
  (%656,)
}

def @func_4433() -> Tensor[(6, 12, 10), float32] {
  @func_4431() /* ty=Tensor[(6, 12, 10), float32] */
}

def @func_5895() -> Tensor[(108), int8] {
  %658 = fn () -> Tensor[(108), int8] {
    %657 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
    %657.2
  };
  %658() /* ty=Tensor[(108), int8] */
}

def @func_7788(%var_7786: Tensor[(15, 4, 12), float64]) -> (Tensor[(15, 4, 12), float64],) {
  @func_7785(%var_7786) /* ty=(Tensor[(15, 4, 12), float64],) */
}

def @func_7985() -> (Tensor[(108), int8],) {
  %660 = fn () -> (Tensor[(108), int8],) {
    %659 = @func_5894() /* ty=Tensor[(108), int8] */;
    (%659,)
  };
  %660() /* ty=(Tensor[(108), int8],) */
}

def @func_28(%var_27: Tensor[(5, 16, 3), float32]) -> (Tensor[(5, 16, 3), float32],) {
  %663 = fn (%var_8: Tensor[(5, 16, 3), float32]) -> (Tensor[(5, 16, 3), float32],) {
    %661 = cast(%var_8, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
    %662 = tan(%661) /* ty=Tensor[(5, 16, 3), float32] */;
    (%662,)
  };
  %663(%var_27) /* ty=(Tensor[(5, 16, 3), float32],) */
}

def @func_5790(%var_5786: float32) -> (Tensor[(6, 12, 10), float32], Tensor[(1, 420), float64], float32, Tensor[(432), float32], Tensor[(420), float64]) {
  %664 = @func_5365() /* ty=(Tensor[(275), float32], Tensor[(6, 12, 10), float32]) */;
  %665 = cast(%var_5786, dtype="float32") /* ty=float32 */;
  %666 = cast(meta[relay.Constant][44] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %667 = cast(meta[relay.Constant][45] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %668 = %664.1;
  %669 = cast(%668, dtype="float32") /* ty=Tensor[(6, 12, 10), float32] */;
  %670 = reshape(%665, newshape=[]) /* ty=float32 */;
  %671 = reshape(%666, newshape=[2, 216]) /* ty=Tensor[(2, 216), float32] */;
  %672 = reshape(%667, newshape=[1, 420]) /* ty=Tensor[(1, 420), float64] */;
  %673 = reshape(%669, newshape=[6, 12, 10]) /* ty=Tensor[(6, 12, 10), float32] */;
  %674 = @func_3755(%670, %671, %672, %673) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(5, 16, 3), float32], float32, Tensor[(2, 216), float32], Tensor[(1, 420), float64], Tensor[(6, 12, 10), int32]) */;
  %675 = %674.4;
  (%668, %675, %var_5786, meta[relay.Constant][44] /* ty=Tensor[(432), float32] */, meta[relay.Constant][45] /* ty=Tensor[(420), float64] */)
}

def @func_125(%var_123: int8, %var_124: Tensor[(6, 7, 10), float64]) -> (Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) {
  %713 = fn (%var_46: int8, %var_107: Tensor[(6, 7, 10), float64]) -> (Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) {
    %676 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 7, 10), int8] */, dtype="float64") /* ty=Tensor[(6, 7, 10), float64] */;
    %677 = acosh(%676) /* ty=Tensor[(6, 7, 10), float64] */;
    %678 = cast(%677, dtype="float32") /* ty=Tensor[(6, 7, 10), float32] */;
    %679 = cast(meta[relay.Constant][47] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %680 = reshape(%679, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
    %681 = @func_26(%680) /* ty=(Tensor[(5, 16, 3), float32],) */;
    %682 = cast(meta[relay.Constant][47] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %683 = reshape(%682, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
    %684 = @func_26(%683) /* ty=(Tensor[(5, 16, 3), float32],) */;
    %685 = cast(meta[relay.Constant][47] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
    %686 = reshape(%685, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
    %687 = @func_26(%686) /* ty=(Tensor[(5, 16, 3), float32],) */;
    %688 = %684.0;
    %689 = cast(%688, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
    %690 = reshape(%689, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
    %691 = @func_26(%690) /* ty=(Tensor[(5, 16, 3), float32],) */;
    %692 = cast(%var_46, dtype="bool") /* ty=bool */;
    %693 = cast(meta[relay.Constant][46] /* ty=Tensor[(6, 7, 10), int8] */, dtype="bool") /* ty=Tensor[(6, 7, 10), bool] */;
    %694 = greater_equal(%692, %693) /* ty=Tensor[(6, 7, 10), bool] */;
    %695 = cast(%694, dtype="uint32") /* ty=Tensor[(6, 7, 10), uint32] */;
    %696 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
    %697 = cast(%677, dtype="uint32") /* ty=Tensor[(6, 7, 10), uint32] */;
    %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %699 = cast(%688, dtype="float32") /* ty=Tensor[(5, 16, 3), float32] */;
    %700 = reshape(%699, newshape=[5, 16, 3]) /* ty=Tensor[(5, 16, 3), float32] */;
    %701 = @func_26(%700) /* ty=(Tensor[(5, 16, 3), float32],) */;
    %702 = cast(%var_107, dtype="uint8") /* ty=Tensor[(6, 7, 10), uint8] */;
    %703 = shape_of(%677, dtype="int32") /* ty=Tensor[(3), int32] */;
    %704 = cast(%677, dtype="uint8") /* ty=Tensor[(6, 7, 10), uint8] */;
    %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %706 = exp(%678) /* ty=Tensor[(6, 7, 10), float32] */;
    %707 = %681.0;
    %708 = %687.0;
    %709 = %691.0;
    %710 = bitwise_or(%697, %698) /* ty=Tensor[(6, 7, 10), uint32] */;
    %711 = %701.0;
    %712 = bitwise_xor(%704, %705) /* ty=Tensor[(6, 7, 10), uint8] */;
    (%706, %707, meta[relay.Constant][47] /* ty=Tensor[(240), float32] */, %688, %708, %709, %710, %711, %712)
  };
  %713(%var_123, %var_124) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */
}

def @func_1779(%var_1777: Tensor[(5, 12, 12), int64]) -> (Tensor[(5, 12, 12), bool], Tensor[(5, 12, 12), float64]) {
  @func_1776(%var_1777) /* ty=(Tensor[(5, 12, 12), bool], Tensor[(5, 12, 12), float64]) */
}

def @func_5059() -> (Tensor[(6, 12, 10), float32],) {
  %715 = fn () -> (Tensor[(6, 12, 10), float32],) {
    %714 = @func_4431() /* ty=Tensor[(6, 12, 10), float32] */;
    (%714,)
  };
  %715() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_6346() -> (Tensor[(6, 12, 10), float32],) {
  %718 = fn () -> (Tensor[(6, 12, 10), float32],) {
    %716 = @func_5128() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %717 = %716.0;
    (%717,)
  };
  %718() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_7568(%var_7565: Tensor[(3, 5, 13), uint8], %var_7566: Tensor[(3, 5, 13), uint8], %var_7567: Tensor[(330), float32]) -> (Tensor[(3, 5, 13), uint8], Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32], Tensor[(294), float32], Tensor[(6, 5, 11), bool], Tensor[(330), float32], uint32, Tensor[(12), uint32], Tensor[(6, 30), float32]) {
  %741 = fn (%var_7532: Tensor[(3, 5, 13), uint8], %var_7533: Tensor[(3, 5, 13), uint8], %var_7554: Tensor[(330), float32]) -> (Tensor[(3, 5, 13), uint8], Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32], Tensor[(294), float32], Tensor[(6, 5, 11), bool], Tensor[(330), float32], uint32, Tensor[(12), uint32], Tensor[(6, 30), float32]) {
    %719 = cast(%var_7533, dtype="uint8") /* ty=Tensor[(3, 5, 13), uint8] */;
    %720 = shape_of(%var_7532, dtype="int32") /* ty=Tensor[(3), int32] */;
    %721 = cast(%var_7532, dtype="uint8") /* ty=Tensor[(3, 5, 13), uint8] */;
    %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %723 = @func_6302() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %724 = cast(meta[relay.Constant][48] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
    %725 = reshape(%724, newshape=[294, 1]) /* ty=Tensor[(294, 1), float32] */;
    %726 = @func_4878(%725) /* ty=(Tensor[(275), float32], Tensor[(6, 12, 10), float32], Tensor[(14, 14, 5), bool], Tensor[(14, 5), int16], Tensor[(6, 12, 10), float32], Tensor[(3, 7, 14), float32], Tensor[(294, 1), float32], Tensor[(275), float32]) */;
    %727 = cast(%var_7554, dtype="float32") /* ty=Tensor[(330), float32] */;
    %728 = cast(meta[relay.Constant][49] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %729 = cast(meta[relay.Constant][50] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
    %730 = reshape(%727, newshape=[330]) /* ty=Tensor[(330), float32] */;
    %731 = reshape(%728, newshape=[]) /* ty=uint32 */;
    %732 = reshape(%729, newshape=[12]) /* ty=Tensor[(12), uint32] */;
    %733 = @func_3688(%730, %731, %732) /* ty=(Tensor[(6, 12, 10), int32], Tensor[(6, 5, 11), bool], Tensor[(330), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32]) */;
    %734 = @func_7262() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(180), float32], Tensor[(6, 30), float32]) */;
    %735 = left_shift(%721, %722) /* ty=Tensor[(3, 5, 13), uint8] */;
    %736 = @func_3963() /* ty=Tensor[(6, 12, 10), float32] */;
    %737 = %723.0;
    %738 = %726.4;
    %739 = %733.1;
    %740 = %734.2;
    (%735, %736, %737, %738, meta[relay.Constant][48] /* ty=Tensor[(294), float32] */, %739, %var_7554, meta[relay.Constant][49] /* ty=uint32 */, meta[relay.Constant][50] /* ty=Tensor[(12), uint32] */, %740)
  };
  %741(%var_7565, %var_7566, %var_7567) /* ty=(Tensor[(3, 5, 13), uint8], Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32], Tensor[(294), float32], Tensor[(6, 5, 11), bool], Tensor[(330), float32], uint32, Tensor[(12), uint32], Tensor[(6, 30), float32]) */
}

def @func_3535(%var_3532: Tensor[(6, 5, 11), float32], %var_3533: Tensor[(6, 5, 11), float32], %var_3534: Tensor[(6, 5, 11), float32]) -> (Tensor[(6, 5, 11), float32], Tensor[(6, 5, 11), bool]) {
  @func_3530(%var_3532, %var_3533, %var_3534) /* ty=(Tensor[(6, 5, 11), float32], Tensor[(6, 5, 11), bool]) */
}

def @func_4561() -> (Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) {
  %752 = fn () -> (Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) {
    %742 = @func_4513() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %743 = cast(meta[relay.Constant][51] /* ty=Tensor[(275), float32] */, dtype="float32") /* ty=Tensor[(275), float32] */;
    %744 = reshape(%743, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float32] */;
    %745 = @func_2629(%744) /* ty=(Tensor[(11, 5, 5), float32],) */;
    %746 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %747 = @func_4024() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32], Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32]) */;
    %748 = %742.0;
    %749 = %745.0;
    %750 = %746.0;
    %751 = %747.2;
    (%748, %749, meta[relay.Constant][51] /* ty=Tensor[(275), float32] */, %750, %751)
  };
  %752() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) */
}

def @func_8039() -> (Tensor[(6, 12, 10), float32], Tensor[(420), float64], float32) {
  %753 = @func_3149() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %754 = cast(-9.11652f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %755 = reshape(%754, newshape=[]) /* ty=float32 */;
  %756 = @func_5790(%755) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(1, 420), float64], float32, Tensor[(432), float32], Tensor[(420), float64]) */;
  %757 = %753.0;
  %758 = %756.4;
  (%757, %758, -9.11652f /* ty=float32 */)
}

def @func_581(%var_579: float32, %var_580: Tensor[(15, 9), float32]) -> Tensor[(15, 9), float32] {
  %761 = fn (%var_567: float32, %var_568: Tensor[(15, 9), float32]) -> Tensor[(15, 9), float32] {
    %759 = cast(%var_567, dtype="float32") /* ty=float32 */;
    %760 = cast(%var_568, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
    divide(%759, %760) /* ty=Tensor[(15, 9), float32] */
  };
  %761(%var_579, %var_580) /* ty=Tensor[(15, 9), float32] */
}

def @func_6851(%var_6847: Tensor[(8, 11, 3), int64], %var_6848: Tensor[(330), float32], %var_6849: uint32, %var_6850: Tensor[(12), uint32]) -> (Tensor[(8, 11, 3), int64], Tensor[(12), uint32], Tensor[(330), float32], uint32, Tensor[(12), uint32]) {
  %775 = fn (%var_6829: Tensor[(8, 11, 3), int64], %var_6835: Tensor[(330), float32], %var_6836: uint32, %var_6837: Tensor[(12), uint32]) -> (Tensor[(8, 11, 3), int64], Tensor[(12), uint32], Tensor[(330), float32], uint32, Tensor[(12), uint32]) {
    %762 = cast(%var_6829, dtype="int64") /* ty=Tensor[(8, 11, 3), int64] */;
    %763 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(8, 11, 3), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %764 = cast(meta[relay.Constant][52] /* ty=Tensor[(8, 11, 3), int64] */, dtype="int64") /* ty=Tensor[(8, 11, 3), int64] */;
    %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %766 = cast(%var_6835, dtype="float32") /* ty=Tensor[(330), float32] */;
    %767 = cast(%var_6836, dtype="uint32") /* ty=uint32 */;
    %768 = cast(%var_6837, dtype="uint32") /* ty=Tensor[(12), uint32] */;
    %769 = reshape(%766, newshape=[330]) /* ty=Tensor[(330), float32] */;
    %770 = reshape(%767, newshape=[]) /* ty=uint32 */;
    %771 = reshape(%768, newshape=[12]) /* ty=Tensor[(12), uint32] */;
    %772 = @func_3688(%769, %770, %771) /* ty=(Tensor[(6, 12, 10), int32], Tensor[(6, 5, 11), bool], Tensor[(330), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32]) */;
    %773 = maximum(%764, %765) /* ty=Tensor[(8, 11, 3), int64] */;
    %774 = %772.5;
    (%773, %774, %var_6835, %var_6836, %var_6837)
  };
  %775(%var_6847, %var_6848, %var_6849, %var_6850) /* ty=(Tensor[(8, 11, 3), int64], Tensor[(12), uint32], Tensor[(330), float32], uint32, Tensor[(12), uint32]) */
}

def @func_532(%var_530: Tensor[(9, 4, 3), int8]) -> (Tensor[(9, 4, 3), int8], Tensor[(13, 16, 4), float64], Tensor[(4, 208), float64], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32]) {
  @func_529(%var_530) /* ty=(Tensor[(9, 4, 3), int8], Tensor[(13, 16, 4), float64], Tensor[(4, 208), float64], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32]) */
}

def @func_5793(%var_5791: float32) -> (Tensor[(6, 12, 10), float32], Tensor[(1, 420), float64], float32, Tensor[(432), float32], Tensor[(420), float64]) {
  @func_5790(%var_5791) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(1, 420), float64], float32, Tensor[(432), float32], Tensor[(420), float64]) */
}

def @func_745(%var_743: Tensor[(5, 3, 5), float32], %var_744: Tensor[(5, 3, 5), float32]) -> (Tensor[(5, 3, 5), float32], Tensor[(5, 3, 5), float64]) {
  %783 = fn (%var_729: Tensor[(5, 3, 5), float32], %var_730: Tensor[(5, 3, 5), float32]) -> (Tensor[(5, 3, 5), float32], Tensor[(5, 3, 5), float64]) {
    %776 = cast(%var_730, dtype="float32") /* ty=Tensor[(5, 3, 5), float32] */;
    %777 = shape_of(%var_729, dtype="int32") /* ty=Tensor[(3), int32] */;
    %778 = cast(%var_729, dtype="float32") /* ty=Tensor[(5, 3, 5), float32] */;
    %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %780 = cast(%var_730, dtype="float64") /* ty=Tensor[(5, 3, 5), float64] */;
    %781 = mod(%778, %779) /* ty=Tensor[(5, 3, 5), float32] */;
    %782 = atanh(%780) /* ty=Tensor[(5, 3, 5), float64] */;
    (%781, %782)
  };
  %783(%var_743, %var_744) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 3, 5), float64]) */
}

def @func_816(%var_777: Tensor[(4, 3, 3), float32], %var_778: Tensor[(4, 3, 3), float32], %var_783: Tensor[(4, 3, 3), float32], %var_798: int8, %var_799: Tensor[(420), float64]) -> (Tensor[(4, 3, 3), float32], Tensor[(4, 3, 3), bool], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64], Tensor[(4, 3, 3), float64], Tensor[(15, 9), float32], Tensor[(135), float32]) {
  %784 = cast(%var_778, dtype="float32") /* ty=Tensor[(4, 3, 3), float32] */;
  %785 = shape_of(%var_777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%var_777, dtype="float32") /* ty=Tensor[(4, 3, 3), float32] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %788 = cast(%var_783, dtype="bool") /* ty=Tensor[(4, 3, 3), bool] */;
  %789 = shape_of(%var_778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%var_778, dtype="bool") /* ty=Tensor[(4, 3, 3), bool] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %792 = cast(%var_798, dtype="int8") /* ty=int8 */;
  %793 = cast(%var_799, dtype="float64") /* ty=Tensor[(420), float64] */;
  %794 = reshape(%792, newshape=[]) /* ty=int8 */;
  %795 = reshape(%793, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), float64] */;
  %796 = @func_122(%794, %795) /* ty=(Tensor[(6, 7, 10), float32], Tensor[(5, 16, 3), float32], Tensor[(240), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint32], Tensor[(5, 16, 3), float32], Tensor[(6, 7, 10), uint8]) */;
  %797 = cast(%var_778, dtype="float64") /* ty=Tensor[(4, 3, 3), float64] */;
  %798 = cast(%var_798, dtype="float32") /* ty=float32 */;
  %799 = cast(meta[relay.Constant][53] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %800 = reshape(%798, newshape=[]) /* ty=float32 */;
  %801 = reshape(%799, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %802 = multiply(%786, %787) /* ty=Tensor[(4, 3, 3), float32] */;
  %803 = greater_equal(%790, %791) /* ty=Tensor[(4, 3, 3), bool] */;
  %804 = %796.6;
  %805 = erf(%797) /* ty=Tensor[(4, 3, 3), float64] */;
  %806 = @func_578(%800, %801) /* ty=Tensor[(15, 9), float32] */;
  (%802, %803, %804, %var_798, %var_799, %805, %806, meta[relay.Constant][53] /* ty=Tensor[(135), float32] */)
}

def @func_4372(%var_4332: Tensor[(75), float32], %var_4344: float32, %var_4356: Tensor[(429), int32], %var_4357: Tensor[(36), float32], %var_4358: Tensor[(420), float64]) -> (Tensor[(6, 12, 10), float32], Tensor[(5, 3, 5), float32], Tensor[(75), float32], Tensor[(2, 6, 15), float64], Tensor[(180), float32], Tensor[(15, 9), float32], float32, Tensor[(135), float32], Tensor[(36), float32], Tensor[(429), int32], Tensor[(36), float32], Tensor[(420), float64]) {
  %807 = cast(%var_4332, dtype="float32") /* ty=Tensor[(75), float32] */;
  %808 = cast(%var_4332, dtype="float32") /* ty=Tensor[(75), float32] */;
  %809 = reshape(%807, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %810 = reshape(%808, newshape=[5, 3, 5]) /* ty=Tensor[(5, 3, 5), float32] */;
  %811 = @func_742(%809, %810) /* ty=(Tensor[(5, 3, 5), float32], Tensor[(5, 3, 5), float64]) */;
  %812 = cast(meta[relay.Constant][54] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %813 = cast(meta[relay.Constant][54] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %814 = reshape(%812, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), float32] */;
  %815 = reshape(%813, newshape=[2, 6, 15]) /* ty=Tensor[(2, 6, 15), float32] */;
  %816 = @func_3115(%814, %815) /* ty=(Tensor[(2, 6, 15), float32], Tensor[(2, 6, 15), float64]) */;
  %817 = cast(%var_4344, dtype="float32") /* ty=float32 */;
  %818 = cast(meta[relay.Constant][55] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %819 = reshape(%817, newshape=[]) /* ty=float32 */;
  %820 = reshape(%818, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %821 = cast(%var_4356, dtype="int32") /* ty=Tensor[(429), int32] */;
  %822 = cast(%var_4357, dtype="float32") /* ty=Tensor[(36), float32] */;
  %823 = cast(%var_4358, dtype="float64") /* ty=Tensor[(420), float64] */;
  %824 = reshape(%821, newshape=[13, 11, 3]) /* ty=Tensor[(13, 11, 3), int32] */;
  %825 = reshape(%822, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %826 = reshape(%823, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %827 = @func_866(%824, %825, %826) /* ty=(Tensor[(13, 11, 3), bool], Tensor[(420), float64], Tensor[(36), float32], Tensor[(420), float64]) */;
  %828 = @func_3963() /* ty=Tensor[(6, 12, 10), float32] */;
  %829 = %811.0;
  %830 = %816.1;
  %831 = @func_578(%819, %820) /* ty=Tensor[(15, 9), float32] */;
  %832 = %827.2;
  (%828, %829, %var_4332, %830, meta[relay.Constant][54] /* ty=Tensor[(180), float32] */, %831, %var_4344, meta[relay.Constant][55] /* ty=Tensor[(135), float32] */, %832, %var_4356, %var_4357, %var_4358)
}

def @func_2632(%var_2630: Tensor[(11, 5, 5), float32]) -> (Tensor[(11, 5, 5), float32],) {
  @func_2629(%var_2630) /* ty=(Tensor[(11, 5, 5), float32],) */
}

def @func_5585(%var_5501: Tensor[(6, 12, 10), float64], %var_5512: Tensor[(420, 1), float64], %var_5517: Tensor[(80, 1), uint64], %var_5560: Tensor[(14, 130), uint16], %var_5578: Tensor[(12), int8]) -> (Tensor[(36), float32], Tensor[(429), int32], Tensor[(36), float32], Tensor[(420, 1), float64], Tensor[(10, 4, 2), int8], Tensor[(80, 1), uint64], Tensor[(6, 12, 10), float64], Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(14, 130), uint16], Tensor[(6, 12, 10), float32], Tensor[(6, 12, 10), float32], float32, Tensor[(12), int8]) {
  %833 = cast(meta[relay.Constant][56] /* ty=Tensor[(429), int32] */, dtype="int32") /* ty=Tensor[(429), int32] */;
  %834 = cast(meta[relay.Constant][57] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %835 = cast(%var_5512, dtype="float64") /* ty=Tensor[(420, 1), float64] */;
  %836 = reshape(%833, newshape=[13, 11, 3]) /* ty=Tensor[(13, 11, 3), int32] */;
  %837 = reshape(%834, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %838 = reshape(%835, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %839 = @func_866(%836, %837, %838) /* ty=(Tensor[(13, 11, 3), bool], Tensor[(420), float64], Tensor[(36), float32], Tensor[(420), float64]) */;
  %840 = cast(%var_5517, dtype="uint64") /* ty=Tensor[(80, 1), uint64] */;
  %841 = cast(%var_5517, dtype="uint64") /* ty=Tensor[(80, 1), uint64] */;
  %842 = cast(%var_5517, dtype="uint64") /* ty=Tensor[(80, 1), uint64] */;
  %843 = reshape(%840, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %844 = reshape(%841, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %845 = reshape(%842, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %846 = @func_1316(%843, %844, %845) /* ty=(Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) */;
  %847 = @func_5008() /* ty=(Tensor[(5, 12, 12), bool], Tensor[(6, 12, 10), float64], Tensor[(6, 12, 10), float32]) */;
  %848 = @func_4560() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) */;
  %849 = cast(%var_5560, dtype="uint16") /* ty=Tensor[(14, 130), uint16] */;
  %850 = cast(%var_5560, dtype="uint16") /* ty=Tensor[(14, 130), uint16] */;
  %851 = reshape(%849, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint16] */;
  %852 = reshape(%850, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint16] */;
  %853 = @func_5170(%851, %852) /* ty=(Tensor[(10, 13, 14), bool], Tensor[(240, 1), float32]) */;
  %854 = @func_4294() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %855 = %854.0;
  %856 = cast(%855, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  %857 = sin(%856) /* ty=Tensor[(6, 12, 10), float64] */;
  %858 = cast(%var_5501, dtype="bool") /* ty=Tensor[(6, 12, 10), bool] */;
  %859 = shape_of(%857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %860 = cast(%857, dtype="bool") /* ty=Tensor[(6, 12, 10), bool] */;
  %861 = dyn.reshape(%858, %859, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %862 = less(%860, %861) /* ty=Tensor[(6, 12, 10), bool] */;
  %863 = cast(%862, dtype="float32") /* ty=Tensor[(6, 12, 10), float32] */;
  %864 = @func_5008() /* ty=(Tensor[(5, 12, 12), bool], Tensor[(6, 12, 10), float64], Tensor[(6, 12, 10), float32]) */;
  %865 = cast(%var_5578, dtype="int8") /* ty=Tensor[(12), int8] */;
  %866 = reshape(%865, newshape=[12]) /* ty=Tensor[(12), int8] */;
  %867 = @func_3336(%866) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(420), float64], float32, Tensor[(432), float32], Tensor[(420), float64], Tensor[(2, 3, 2), bool], Tensor[(12), int8], Tensor[(5, 12, 12), bool]) */;
  %868 = %839.2;
  %869 = %846.1;
  %870 = %847.1;
  %871 = %848.3;
  %872 = %853.1;
  %873 = exp(%863) /* ty=Tensor[(6, 12, 10), float32] */;
  %874 = %864.2;
  %875 = %867.2;
  (%868, meta[relay.Constant][56] /* ty=Tensor[(429), int32] */, meta[relay.Constant][57] /* ty=Tensor[(36), float32] */, %var_5512, %869, %var_5517, %870, %871, %872, %var_5560, %873, %874, %875, %var_5578)
}

def @func_1072(%var_1040: Tensor[(2, 3, 2), int8], %var_1050: Tensor[(2, 3, 2), int8], %var_1066: Tensor[(2, 3, 2), int8]) -> (Tensor[(2, 3, 2), uint16], Tensor[(2, 3, 2), bool]) {
  %876 = cast(meta[relay.Constant][58] /* ty=Tensor[(2, 3, 2), int8] */, dtype="int8") /* ty=Tensor[(2, 3, 2), int8] */;
  %877 = shape_of(%var_1040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(%var_1040, dtype="int8") /* ty=Tensor[(2, 3, 2), int8] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %880 = bitwise_and(%878, %879) /* ty=Tensor[(2, 3, 2), int8] */;
  %881 = cast(%var_1050, dtype="uint16") /* ty=Tensor[(2, 3, 2), uint16] */;
  %882 = shape_of(%880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(%880, dtype="uint16") /* ty=Tensor[(2, 3, 2), uint16] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %885 = cast(%var_1066, dtype="bool") /* ty=Tensor[(2, 3, 2), bool] */;
  %886 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(2, 3, 2), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %887 = cast(meta[relay.Constant][58] /* ty=Tensor[(2, 3, 2), int8] */, dtype="bool") /* ty=Tensor[(2, 3, 2), bool] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %889 = multiply(%883, %884) /* ty=Tensor[(2, 3, 2), uint16] */;
  %890 = equal(%887, %888) /* ty=Tensor[(2, 3, 2), bool] */;
  (%889, %890)
}

def @func_4089(%var_4087: Tensor[(6, 12, 10), float32], %var_4088: int8) -> (Tensor[(240, 1), float32], Tensor[(6, 12, 10), bool], Tensor[(420), float64], Tensor[(45), float32], int8) {
  %905 = fn (%var_4073: Tensor[(6, 12, 10), float32], %var_4081: int8) -> (Tensor[(240, 1), float32], Tensor[(6, 12, 10), bool], Tensor[(420), float64], Tensor[(45), float32], int8) {
    %891 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
    %892 = @func_3963() /* ty=Tensor[(6, 12, 10), float32] */;
    %893 = cast(%var_4073, dtype="bool") /* ty=Tensor[(6, 12, 10), bool] */;
    %894 = shape_of(%892, dtype="int32") /* ty=Tensor[(3), int32] */;
    %895 = cast(%892, dtype="bool") /* ty=Tensor[(6, 12, 10), bool] */;
    %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %897 = cast(meta[relay.Constant][59] /* ty=Tensor[(45), float32] */, dtype="float32") /* ty=Tensor[(45), float32] */;
    %898 = cast(%var_4081, dtype="int8") /* ty=int8 */;
    %899 = reshape(%897, newshape=[3, 3, 5]) /* ty=Tensor[(3, 3, 5), float32] */;
    %900 = reshape(%898, newshape=[]) /* ty=int8 */;
    %901 = @func_625(%899, %900) /* ty=(Tensor[(3, 3, 5), float64], Tensor[(6, 7, 10), uint32], int8, Tensor[(420), float64]) */;
    %902 = %891.1;
    %903 = greater(%895, %896) /* ty=Tensor[(6, 12, 10), bool] */;
    %904 = %901.3;
    (%902, %903, %904, meta[relay.Constant][59] /* ty=Tensor[(45), float32] */, %var_4081)
  };
  %905(%var_4087, %var_4088) /* ty=(Tensor[(240, 1), float32], Tensor[(6, 12, 10), bool], Tensor[(420), float64], Tensor[(45), float32], int8) */
}

def @func_5173(%var_5171: Tensor[(10, 13, 14), uint16], %var_5172: Tensor[(10, 13, 14), uint16]) -> (Tensor[(10, 13, 14), bool], Tensor[(240, 1), float32]) {
  %913 = fn (%var_5161: Tensor[(10, 13, 14), uint16], %var_5162: Tensor[(10, 13, 14), uint16]) -> (Tensor[(10, 13, 14), bool], Tensor[(240, 1), float32]) {
    %906 = cast(%var_5162, dtype="bool") /* ty=Tensor[(10, 13, 14), bool] */;
    %907 = shape_of(%var_5161, dtype="int32") /* ty=Tensor[(3), int32] */;
    %908 = cast(%var_5161, dtype="bool") /* ty=Tensor[(10, 13, 14), bool] */;
    %909 = dyn.reshape(%906, %907, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %910 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
    %911 = greater(%908, %909) /* ty=Tensor[(10, 13, 14), bool] */;
    %912 = %910.1;
    (%911, %912)
  };
  %913(%var_5171, %var_5172) /* ty=(Tensor[(10, 13, 14), bool], Tensor[(240, 1), float32]) */
}

def @func_6303() -> (Tensor[(6, 12, 10), float32],) {
  %916 = fn () -> (Tensor[(6, 12, 10), float32],) {
    %914 = @func_5008() /* ty=(Tensor[(5, 12, 12), bool], Tensor[(6, 12, 10), float64], Tensor[(6, 12, 10), float32]) */;
    %915 = %914.2;
    (%915,)
  };
  %916() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_4486() -> (Tensor[(6, 12, 10), float32],) {
  %917 = @func_4260() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %918 = %917.0;
  (%918,)
}

def @func_1027(%var_1017: Tensor[(13, 3, 10), float32], %var_1025: Tensor[(15, 9), float32]) -> (Tensor[(13, 3, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(15, 9), float32]) {
  %919 = cast(%var_1017, dtype="float32") /* ty=Tensor[(13, 3, 10), float32] */;
  %920 = cast(-3.23173f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %921 = cast(%var_1025, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
  %922 = reshape(%920, newshape=[]) /* ty=float32 */;
  %923 = reshape(%921, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %924 = acos(%919) /* ty=Tensor[(13, 3, 10), float32] */;
  %925 = @func_578(%922, %923) /* ty=Tensor[(15, 9), float32] */;
  (%924, %925, -3.23173f /* ty=float32 */, %var_1025)
}

def @func_6931(%var_6902: Tensor[(72), float32], %var_6903: Tensor[(275), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(5, 12, 12), bool], Tensor[(72), float32], Tensor[(275), float32], Tensor[(150), float32], Tensor[(75), float32], Tensor[(6, 12, 10), float32]) {
  %926 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %927 = cast(%var_6902, dtype="float32") /* ty=Tensor[(72), float32] */;
  %928 = %926.0;
  %929 = cast(%928, dtype="int64") /* ty=Tensor[(6, 12, 10), int64] */;
  %930 = cast(%var_6903, dtype="float32") /* ty=Tensor[(275), float32] */;
  %931 = cast(meta[relay.Constant][60] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %932 = cast(meta[relay.Constant][61] /* ty=Tensor[(75), float32] */, dtype="float32") /* ty=Tensor[(75), float32] */;
  %933 = reshape(%927, newshape=[4, 6, 3]) /* ty=Tensor[(4, 6, 3), float32] */;
  %934 = reshape(%929, newshape=[720]) /* ty=Tensor[(720), int64] */;
  %935 = reshape(%930, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %936 = reshape(%931, newshape=[5, 30]) /* ty=Tensor[(5, 30), float32] */;
  %937 = reshape(%932, newshape=[75]) /* ty=Tensor[(75), float32] */;
  %938 = @func_6075(%933, %934, %935, %936, %937) /* ty=(Tensor[(4, 6, 3), float32], Tensor[(5, 12, 12), bool], Tensor[(720), int64], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(10, 5, 3), uint8], Tensor[(5, 30), float32], Tensor[(5, 3, 5), float64], Tensor[(75), float32]) */;
  %939 = @func_3947() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %940 = %938.1;
  %941 = %939.0;
  (%928, %940, %var_6902, %var_6903, meta[relay.Constant][60] /* ty=Tensor[(150), float32] */, meta[relay.Constant][61] /* ty=Tensor[(75), float32] */, %941)
}

def @func_3338(%var_3337: Tensor[(12), int8]) -> (Tensor[(6, 12, 10), float32], Tensor[(420), float64], float32, Tensor[(432), float32], Tensor[(420), float64], Tensor[(2, 3, 2), bool], Tensor[(12), int8], Tensor[(5, 12, 12), bool]) {
  %963 = fn (%var_3322: Tensor[(12), int8]) -> (Tensor[(6, 12, 10), float32], Tensor[(420), float64], float32, Tensor[(432), float32], Tensor[(420), float64], Tensor[(2, 3, 2), bool], Tensor[(12), int8], Tensor[(5, 12, 12), bool]) {
    %942 = cast(-9.06348f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %943 = cast(meta[relay.Constant][62] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %944 = cast(meta[relay.Constant][63] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %945 = reshape(%942, newshape=[]) /* ty=float32 */;
    %946 = reshape(%943, newshape=[9, 12, 4]) /* ty=Tensor[(9, 12, 4), float32] */;
    %947 = reshape(%944, newshape=[420]) /* ty=Tensor[(420), float64] */;
    %948 = @func_474(%945, %946, %947) /* ty=(Tensor[(9, 12, 4), float32], Tensor[(5, 16, 3), float32], Tensor[(240, 1), float32], Tensor[(5, 16, 3), float32], Tensor[(420), float64]) */;
    %949 = cast(%var_3322, dtype="int8") /* ty=Tensor[(12), int8] */;
    %950 = cast(%var_3322, dtype="int8") /* ty=Tensor[(12), int8] */;
    %951 = cast(%var_3322, dtype="int8") /* ty=Tensor[(12), int8] */;
    %952 = reshape(%949, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
    %953 = reshape(%950, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
    %954 = reshape(%951, newshape=[2, 3, 2]) /* ty=Tensor[(2, 3, 2), int8] */;
    %955 = @func_1072(%952, %953, %954) /* ty=(Tensor[(2, 3, 2), uint16], Tensor[(2, 3, 2), bool]) */;
    %956 = @func_3201() /* ty=Tensor[(6, 12, 10), float32] */;
    %957 = cast(%956, dtype="int64") /* ty=Tensor[(6, 12, 10), int64] */;
    %958 = reshape(%957, newshape=[5, 12, 12]) /* ty=Tensor[(5, 12, 12), int64] */;
    %959 = @func_1776(%958) /* ty=(Tensor[(5, 12, 12), bool], Tensor[(5, 12, 12), float64]) */;
    %960 = %948.4;
    %961 = %955.1;
    %962 = %959.0;
    (%956, %960, -9.06348f /* ty=float32 */, meta[relay.Constant][62] /* ty=Tensor[(432), float32] */, meta[relay.Constant][63] /* ty=Tensor[(420), float64] */, %961, %var_3322, %962)
  };
  %963(%var_3337) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(420), float64], float32, Tensor[(432), float32], Tensor[(420), float64], Tensor[(2, 3, 2), bool], Tensor[(12), int8], Tensor[(5, 12, 12), bool]) */
}

def @func_7142(%var_7139: Tensor[(275), float32], %var_7140: Tensor[(429), int32], %var_7141: Tensor[(420), float64]) -> (Tensor[(275), uint8], Tensor[(13, 11, 3), bool], Tensor[(429), int32], Tensor[(1, 36), float32], Tensor[(420), float64]) {
  @func_7137(%var_7139, %var_7140, %var_7141) /* ty=(Tensor[(275), uint8], Tensor[(13, 11, 3), bool], Tensor[(429), int32], Tensor[(1, 36), float32], Tensor[(420), float64]) */
}

def @func_7048() -> Tensor[(6, 12, 10), float32] {
  %965 = fn () -> Tensor[(6, 12, 10), float32] {
    %964 = @func_6345() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %964.0
  };
  %965() /* ty=Tensor[(6, 12, 10), float32] */
}

def @func_4294() -> (Tensor[(6, 12, 10), float32],) {
  %966 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %967 = %966.0;
  (%967,)
}

def @func_6189(%var_6125: Tensor[(6, 12, 10), float32], %var_6131: Tensor[(1800), float64]) -> (Tensor[(6, 12, 10), uint16], Tensor[(2, 3, 2), bool], Tensor[(1800), float64], Tensor[(6, 12, 10), float64], Tensor[(10, 4, 2), int8], Tensor[(80), uint64]) {
  %968 = @func_4449() /* ty=Tensor[(6, 12, 10), float32] */;
  %969 = cast(%var_6125, dtype="uint16") /* ty=Tensor[(6, 12, 10), uint16] */;
  %970 = shape_of(%968, dtype="int32") /* ty=Tensor[(3), int32] */;
  %971 = cast(%968, dtype="uint16") /* ty=Tensor[(6, 12, 10), uint16] */;
  %972 = dyn.reshape(%969, %970, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %973 = cast(%var_6131, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %974 = reshape(%973, newshape=[15, 10, 12]) /* ty=Tensor[(15, 10, 12), float64] */;
  %975 = @func_1185(%974) /* ty=(Tensor[(15, 10, 12), float64], Tensor[(2, 3, 2), bool], Tensor[(12), int8]) */;
  %976 = cast(%968, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  %977 = shape_of(%var_6125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %978 = cast(%var_6125, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
  %979 = dyn.reshape(%976, %977, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %980 = cast(meta[relay.Constant][64] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %981 = cast(meta[relay.Constant][64] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %982 = cast(meta[relay.Constant][64] /* ty=Tensor[(80), uint64] */, dtype="uint64") /* ty=Tensor[(80), uint64] */;
  %983 = reshape(%980, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %984 = reshape(%981, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %985 = reshape(%982, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
  %986 = @func_1316(%983, %984, %985) /* ty=(Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) */;
  %987 = left_shift(%971, %972) /* ty=Tensor[(6, 12, 10), uint16] */;
  %988 = %975.1;
  %989 = mod(%978, %979) /* ty=Tensor[(6, 12, 10), float64] */;
  %990 = %986.1;
  (%987, %988, %var_6131, %989, %990, meta[relay.Constant][64] /* ty=Tensor[(80), uint64] */)
}

def @func_7432() -> Tensor[(240, 1), float32] {
  %992 = fn () -> Tensor[(240, 1), float32] {
    %991 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
    %991.1
  };
  %992() /* ty=Tensor[(240, 1), float32] */
}

def @func_4262() -> (Tensor[(6, 12, 10), float32],) {
  @func_4260() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_3433() -> Tensor[(6, 12, 10), float32] {
  @func_3431() /* ty=Tensor[(6, 12, 10), float32] */
}

def @func_3583(%var_3582: Tensor[(135), float32]) -> (Tensor[(15, 9), float32], Tensor[(390), float32], Tensor[(15, 13, 16), int32], Tensor[(135), float64]) {
  %1011 = fn (%var_3576: Tensor[(135), float32]) -> (Tensor[(15, 9), float32], Tensor[(390), float32], Tensor[(15, 13, 16), int32], Tensor[(135), float64]) {
    %993 = cast(meta[relay.Constant][65] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
    %994 = cast(meta[relay.Constant][66] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %995 = reshape(%993, newshape=[13, 3, 10]) /* ty=Tensor[(13, 3, 10), float32] */;
    %996 = reshape(%994, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
    %997 = @func_1027(%995, %996) /* ty=(Tensor[(13, 3, 10), float32], Tensor[(15, 9), float32], float32, Tensor[(15, 9), float32]) */;
    %998 = cast(meta[relay.Constant][67] /* ty=Tensor[(15, 13, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 13, 16), float64] */;
    %999 = sqrt(%998) /* ty=Tensor[(15, 13, 16), float64] */;
    %1000 = cast(meta[relay.Constant][67] /* ty=Tensor[(15, 13, 16), float64] */, dtype="int32") /* ty=Tensor[(15, 13, 16), int32] */;
    %1001 = shape_of(%999, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1002 = cast(%999, dtype="int32") /* ty=Tensor[(15, 13, 16), int32] */;
    %1003 = dyn.reshape(%1000, %1001, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1004 = cast(%var_3576, dtype="float64") /* ty=Tensor[(135), float64] */;
    %1005 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(135), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1006 = cast(meta[relay.Constant][66] /* ty=Tensor[(135), float32] */, dtype="float64") /* ty=Tensor[(135), float64] */;
    %1007 = dyn.reshape(%1004, %1005, newshape=[]) /* ty=Tensor[(?), float64] */;
    %1008 = %997.1;
    %1009 = right_shift(%1002, %1003) /* ty=Tensor[(15, 13, 16), int32] */;
    %1010 = mod(%1006, %1007) /* ty=Tensor[(135), float64] */;
    (%1008, meta[relay.Constant][65] /* ty=Tensor[(390), float32] */, %1009, %1010)
  };
  %1011(%var_3582) /* ty=(Tensor[(15, 9), float32], Tensor[(390), float32], Tensor[(15, 13, 16), int32], Tensor[(135), float64]) */
}

def @func_6935(%var_6933: Tensor[(72), float32], %var_6934: Tensor[(275), float32]) -> (Tensor[(6, 12, 10), float32], Tensor[(5, 12, 12), bool], Tensor[(72), float32], Tensor[(275), float32], Tensor[(150), float32], Tensor[(75), float32], Tensor[(6, 12, 10), float32]) {
  @func_6931(%var_6933, %var_6934) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(5, 12, 12), bool], Tensor[(72), float32], Tensor[(275), float32], Tensor[(150), float32], Tensor[(75), float32], Tensor[(6, 12, 10), float32]) */
}

def @func_8118() -> (Tensor[(420), float64],) {
  @func_8116() /* ty=(Tensor[(420), float64],) */
}

def @func_4026() -> (Tensor[(6, 12, 10), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32], Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32]) {
  @func_4024() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32], Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32]) */
}

def @func_6765(%var_6759: Tensor[(12, 14, 11), float64], %var_6763: int8) -> (Tensor[(12, 14, 11), float64], Tensor[(6, 12, 10), float32], int8) {
  %1012 = cast(%var_6759, dtype="float64") /* ty=Tensor[(12, 14, 11), float64] */;
  %1013 = cast(%var_6763, dtype="int8") /* ty=int8 */;
  %1014 = reshape(%1013, newshape=[]) /* ty=int8 */;
  %1015 = @func_3836(%1014) /* ty=(Tensor[(6, 12, 10), float32], Tensor[(6, 7, 10), float32], int8, Tensor[(1, 420), float64]) */;
  %1016 = log2(%1012) /* ty=Tensor[(12, 14, 11), float64] */;
  %1017 = %1015.0;
  (%1016, %1017, %var_6763)
}

def @func_6193(%var_6191: Tensor[(6, 12, 10), float32], %var_6192: Tensor[(1800), float64]) -> (Tensor[(6, 12, 10), uint16], Tensor[(2, 3, 2), bool], Tensor[(1800), float64], Tensor[(6, 12, 10), float64], Tensor[(10, 4, 2), int8], Tensor[(80), uint64]) {
  @func_6189(%var_6191, %var_6192) /* ty=(Tensor[(6, 12, 10), uint16], Tensor[(2, 3, 2), bool], Tensor[(1800), float64], Tensor[(6, 12, 10), float64], Tensor[(10, 4, 2), int8], Tensor[(80), uint64]) */
}

def @func_8116() -> (Tensor[(420), float64],) {
  %1018 = @func_7661() /* ty=Tensor[(420), float64] */;
  (%1018,)
}

def @func_7519() -> (Tensor[(6, 12, 10), float32], Tensor[(275), uint16], Tensor[(275), float32]) {
  %1024 = fn () -> (Tensor[(6, 12, 10), float32], Tensor[(275), uint16], Tensor[(275), float32]) {
    %1019 = cast(meta[relay.Constant][68] /* ty=Tensor[(275), float32] */, dtype="float32") /* ty=Tensor[(275), float32] */;
    %1020 = reshape(%1019, newshape=[275]) /* ty=Tensor[(275), float32] */;
    %1021 = @func_5089(%1020) /* ty=(Tensor[(275), float32], Tensor[(275), uint16]) */;
    %1022 = @func_3963() /* ty=Tensor[(6, 12, 10), float32] */;
    %1023 = %1021.1;
    (%1022, %1023, meta[relay.Constant][68] /* ty=Tensor[(275), float32] */)
  };
  %1024() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(275), uint16], Tensor[(275), float32]) */
}

def @func_4450() -> Tensor[(6, 12, 10), float32] {
  %1025 = fn () -> Tensor[(6, 12, 10), float32] {
    @func_4145() /* ty=Tensor[(6, 12, 10), float32] */
  };
  %1025() /* ty=Tensor[(6, 12, 10), float32] */
}

def @func_3530(%var_3507: Tensor[(6, 5, 11), float32], %var_3514: Tensor[(6, 5, 11), float32], %var_3521: Tensor[(6, 5, 11), float32]) -> (Tensor[(6, 5, 11), float32], Tensor[(6, 5, 11), bool]) {
  %1026 = cast(meta[relay.Constant][69] /* ty=Tensor[(6, 5, 11), float32] */, dtype="float32") /* ty=Tensor[(6, 5, 11), float32] */;
  %1027 = shape_of(%var_3507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1028 = cast(%var_3507, dtype="float32") /* ty=Tensor[(6, 5, 11), float32] */;
  %1029 = dyn.reshape(%1026, %1027, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1030 = floor_mod(%1028, %1029) /* ty=Tensor[(6, 5, 11), float32] */;
  %1031 = cast(%var_3514, dtype="float32") /* ty=Tensor[(6, 5, 11), float32] */;
  %1032 = shape_of(%1030, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1033 = cast(%1030, dtype="float32") /* ty=Tensor[(6, 5, 11), float32] */;
  %1034 = dyn.reshape(%1031, %1032, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1035 = cast(%var_3521, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %1036 = shape_of(%var_3507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1037 = cast(%var_3507, dtype="bool") /* ty=Tensor[(6, 5, 11), bool] */;
  %1038 = dyn.reshape(%1035, %1036, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1039 = mod(%1033, %1034) /* ty=Tensor[(6, 5, 11), float32] */;
  %1040 = not_equal(%1037, %1038) /* ty=Tensor[(6, 5, 11), bool] */;
  (%1039, %1040)
}

def @func_5089(%var_5074: Tensor[(275), float32]) -> (Tensor[(275), float32], Tensor[(275), uint16]) {
  %1041 = @func_4560() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(6, 12, 10), float32], uint32) */;
  %1042 = %1041.2;
  %1043 = cast(%var_5074, dtype="float32") /* ty=Tensor[(275), float32] */;
  %1044 = shape_of(%1042, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1045 = cast(%1042, dtype="float32") /* ty=Tensor[(275), float32] */;
  %1046 = dyn.reshape(%1043, %1044, newshape=[]) /* ty=Tensor[(?), float32] */;
  %1047 = cast(%1042, dtype="uint16") /* ty=Tensor[(275), uint16] */;
  %1048 = shape_of(%var_5074, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1049 = cast(%var_5074, dtype="uint16") /* ty=Tensor[(275), uint16] */;
  %1050 = dyn.reshape(%1047, %1048, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %1051 = floor_divide(%1045, %1046) /* ty=Tensor[(275), float32] */;
  %1052 = bitwise_and(%1049, %1050) /* ty=Tensor[(275), uint16] */;
  (%1051, %1052)
}

def @func_1776(%var_1740: Tensor[(5, 12, 12), int64]) -> (Tensor[(5, 12, 12), bool], Tensor[(5, 12, 12), float64]) {
  %1053 = cast(%var_1740, dtype="bool") /* ty=Tensor[(5, 12, 12), bool] */;
  %1054 = shape_of(meta[relay.Constant][70] /* ty=Tensor[(5, 12, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1055 = cast(meta[relay.Constant][70] /* ty=Tensor[(5, 12, 12), int64] */, dtype="bool") /* ty=Tensor[(5, 12, 12), bool] */;
  %1056 = dyn.reshape(%1053, %1054, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1057 = cast(meta[relay.Constant][71] /* ty=Tensor[(5, 12, 12), int64] */, dtype="bool") /* ty=Tensor[(5, 12, 12), bool] */;
  %1058 = shape_of(meta[relay.Constant][70] /* ty=Tensor[(5, 12, 12), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1059 = cast(meta[relay.Constant][70] /* ty=Tensor[(5, 12, 12), int64] */, dtype="bool") /* ty=Tensor[(5, 12, 12), bool] */;
  %1060 = dyn.reshape(%1057, %1058, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1061 = greater(%1059, %1060) /* ty=Tensor[(5, 12, 12), bool] */;
  %1062 = cast(%1061, dtype="float32") /* ty=Tensor[(5, 12, 12), float32] */;
  %1063 = asin(%1062) /* ty=Tensor[(5, 12, 12), float32] */;
  %1064 = cast(%1063, dtype="float64") /* ty=Tensor[(5, 12, 12), float64] */;
  %1065 = greater_equal(%1055, %1056) /* ty=Tensor[(5, 12, 12), bool] */;
  %1066 = log(%1064) /* ty=Tensor[(5, 12, 12), float64] */;
  (%1065, %1066)
}

def @func_4431() -> Tensor[(6, 12, 10), float32] {
  @func_3431() /* ty=Tensor[(6, 12, 10), float32] */
}

def @func_5092(%var_5090: Tensor[(275), float32]) -> (Tensor[(275), float32], Tensor[(275), uint16]) {
  @func_5089(%var_5090) /* ty=(Tensor[(275), float32], Tensor[(275), uint16]) */
}

def @func_5130() -> (Tensor[(6, 12, 10), float32],) {
  @func_5128() /* ty=(Tensor[(6, 12, 10), float32],) */
}

def @func_4024() -> (Tensor[(6, 12, 10), float32], Tensor[(2, 2, 3), uint32], uint32, Tensor[(12), uint32], Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32]) {
  %1067 = cast(meta[relay.Constant][72] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1068 = cast(meta[relay.Constant][73] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %1069 = reshape(%1067, newshape=[]) /* ty=uint32 */;
  %1070 = reshape(%1068, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), uint32] */;
  %1071 = @func_2667(%1069, %1070) /* ty=(Tensor[(2, 2, 3), uint32],) */;
  %1072 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
  %1073 = @func_3365() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(240, 1), float32], Tensor[(108), int8]) */;
  %1074 = @func_3431() /* ty=Tensor[(6, 12, 10), float32] */;
  %1075 = %1071.0;
  %1076 = %1072.0;
  %1077 = %1073.1;
  (%1074, %1075, meta[relay.Constant][72] /* ty=uint32 */, meta[relay.Constant][73] /* ty=Tensor[(12), uint32] */, %1076, %1077)
}

def @func_8041() -> (Tensor[(6, 12, 10), float32], Tensor[(420), float64], float32) {
  @func_8039() /* ty=(Tensor[(6, 12, 10), float32], Tensor[(420), float64], float32) */
}

def @func_4523(%var_4517: float64, %var_4518: Tensor[(6, 14, 6), float64]) -> Tensor[(6, 14, 6), float64] {
  %1078 = cast(%var_4517, dtype="float64") /* ty=float64 */;
  %1079 = cast(%var_4518, dtype="float64") /* ty=Tensor[(6, 14, 6), float64] */;
  floor_divide(%1078, %1079) /* ty=Tensor[(6, 14, 6), float64] */
}

def @func_4181(%var_4180: Tensor[(80), uint64]) -> (Tensor[(10, 4, 2), bool], Tensor[(80), uint64], Tensor[(6, 12, 10), float64]) {
  %1092 = fn (%var_4158: Tensor[(80), uint64]) -> (Tensor[(10, 4, 2), bool], Tensor[(80), uint64], Tensor[(6, 12, 10), float64]) {
    %1080 = cast(%var_4158, dtype="uint64") /* ty=Tensor[(80), uint64] */;
    %1081 = cast(%var_4158, dtype="uint64") /* ty=Tensor[(80), uint64] */;
    %1082 = cast(%var_4158, dtype="uint64") /* ty=Tensor[(80), uint64] */;
    %1083 = reshape(%1080, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
    %1084 = reshape(%1081, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
    %1085 = reshape(%1082, newshape=[10, 4, 2]) /* ty=Tensor[(10, 4, 2), uint64] */;
    %1086 = @func_1316(%1083, %1084, %1085) /* ty=(Tensor[(10, 4, 2), bool], Tensor[(10, 4, 2), int8]) */;
    %1087 = @func_3218() /* ty=(Tensor[(6, 12, 10), float32],) */;
    %1088 = %1087.0;
    %1089 = cast(%1088, dtype="float64") /* ty=Tensor[(6, 12, 10), float64] */;
    %1090 = %1086.0;
    %1091 = cos(%1089) /* ty=Tensor[(6, 12, 10), float64] */;
    (%1090, %var_4158, %1091)
  };
  %1092(%var_4180) /* ty=(Tensor[(10, 4, 2), bool], Tensor[(80), uint64], Tensor[(6, 12, 10), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen226/build/output.py", line 2436, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:58:58] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

