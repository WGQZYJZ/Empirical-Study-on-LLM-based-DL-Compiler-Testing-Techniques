==========mod==========
#[version = "0.0.5"]
def @func_5184(%var_5166: Tensor[(7, 4, 16), int8]) -> (Tensor[(7, 4, 16), float64], Tensor[(7, 4, 16), float32]) {
  %0 = cast(%var_5166, dtype="float64") /* ty=Tensor[(7, 4, 16), float64] */;
  %1 = cast(%var_5166, dtype="int8") /* ty=Tensor[(7, 4, 16), int8] */;
  %2 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(7, 4, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 4, 16), int8] */, dtype="int8") /* ty=Tensor[(7, 4, 16), int8] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %5 = bitwise_and(%3, %4) /* ty=Tensor[(7, 4, 16), int8] */;
  %6 = cast(%5, dtype="float32") /* ty=Tensor[(7, 4, 16), float32] */;
  %7 = atan(%0) /* ty=Tensor[(7, 4, 16), float64] */;
  %8 = asinh(%6) /* ty=Tensor[(7, 4, 16), float32] */;
  (%7, %8)
}

def @func_918() -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
  %9 = @func_404() /* ty=Tensor[(12, 16, 2), float64] */;
  %10 = @func_426() /* ty=Tensor[(12, 16, 2), bool] */;
  (%9, %10)
}

def @func_3110() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) {
  %11 = @func_2587() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
  %12 = @func_3055() /* ty=(Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64]) */;
  %13 = %11.0;
  %14 = %12.0;
  (%13, %14)
}

def @func_1357() -> (Tensor[(12, 16, 2), bool],) {
  %15 = @func_543() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %16 = %15.0;
  (%16,)
}

def @func_5836() -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
  %17 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %18 = @func_2211() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64]) */;
  %19 = %17.0;
  %20 = %18.0;
  (%19, %20)
}

def @main(%var_6998: Tensor[(8, 96), uint8]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 4, 16), uint8], Tensor[(8, 96), uint8]) {
  %21 = @func_2414() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 96), uint8] */, dtype="uint8") /* ty=Tensor[(8, 96), uint8] */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 96), uint8] */, dtype="uint8") /* ty=Tensor[(8, 96), uint8] */;
  %24 = reshape(%22, newshape=[12, 4, 16]) /* ty=Tensor[(12, 4, 16), uint8] */;
  %25 = reshape(%23, newshape=[12, 4, 16]) /* ty=Tensor[(12, 4, 16), uint8] */;
  %26 = @func_6922(%24, %25) /* ty=(Tensor[(12, 4, 16), uint8], Tensor[(8, 15, 11), float64]) */;
  %27 = cast(%var_6998, dtype="uint8") /* ty=Tensor[(8, 96), uint8] */;
  %28 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(8, 96), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %29 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 96), uint8] */, dtype="uint8") /* ty=Tensor[(8, 96), uint8] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %31 = %21.0;
  %32 = %26.0;
  %33 = bitwise_and(%29, %30) /* ty=Tensor[(8, 96), uint8] */;
  (%31, %32, %33)
}

def @func_4201() -> Tensor[(12, 16, 2), bool] {
  %34 = @func_2499() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %34.0
}

def @func_2414() -> (Tensor[(12, 16, 2), bool],) {
  %35 = @func_834() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %36 = %35.0;
  (%36,)
}

def @func_4072() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(8, 14, 10), float64], Tensor[(1120), float64], Tensor[(12, 16, 2), bool], Tensor[(2, 440), int32]) {
  %37 = @func_3055() /* ty=(Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64]) */;
  %38 = cast(meta[relay.Constant][2] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %39 = reshape(%38, newshape=[8, 14, 10]) /* ty=Tensor[(8, 14, 10), float64] */;
  %40 = @func_2386(%39) /* ty=(Tensor[(8, 14, 10), float32], Tensor[(8, 14, 10), float64]) */;
  %41 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 440), int32] */, dtype="int32") /* ty=Tensor[(2, 440), int32] */;
  %42 = reshape(%41, newshape=[16, 5, 11]) /* ty=Tensor[(16, 5, 11), int32] */;
  %43 = @func_1439(%42) /* ty=(Tensor[(16, 5, 11), bool], Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), float64]) */;
  %44 = @func_433() /* ty=Tensor[(12, 16, 2), bool] */;
  %45 = %37.1;
  %46 = %40.1;
  %47 = %43.1;
  (%44, %45, %46, meta[relay.Constant][2] /* ty=Tensor[(1120), float64] */, %47, meta[relay.Constant][3] /* ty=Tensor[(2, 440), int32] */)
}

def @func_6507() -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), uint8]) {
  %48 = @func_3687() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %49 = %48.0;
  %50 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 16, 2), bool] */, dtype="float64") /* ty=Tensor[(12, 16, 2), float64] */;
  %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%49, dtype="float64") /* ty=Tensor[(12, 16, 2), float64] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %54 = @func_543() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %55 = @func_2414() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 16, 2), bool] */, dtype="uint8") /* ty=Tensor[(12, 16, 2), uint8] */;
  %57 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%49, dtype="uint8") /* ty=Tensor[(12, 16, 2), uint8] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %60 = power(%52, %53) /* ty=Tensor[(12, 16, 2), float64] */;
  %61 = %54.0;
  %62 = %55.0;
  %63 = bitwise_or(%58, %59) /* ty=Tensor[(12, 16, 2), uint8] */;
  (%60, %61, %62, %63)
}

def @func_1499(%var_1486: Tensor[(864, 13), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 8, 9), float32], Tensor[(16, 5, 11), float64], Tensor[(4, 220), int32], Tensor[(864, 13), int16], Tensor[(12, 16, 2), bool]) {
  %64 = @func_834() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(864, 1), float32] */, dtype="float32") /* ty=Tensor[(864, 1), float32] */;
  %66 = reshape(%65, newshape=[12, 8, 9]) /* ty=Tensor[(12, 8, 9), float32] */;
  %67 = @func_261(%66) /* ty=(Tensor[(12, 8, 9), float32],) */;
  %68 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 220), int32] */, dtype="int32") /* ty=Tensor[(4, 220), int32] */;
  %69 = reshape(%68, newshape=[16, 5, 11]) /* ty=Tensor[(16, 5, 11), int32] */;
  %70 = @func_1439(%69) /* ty=(Tensor[(16, 5, 11), bool], Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), float64]) */;
  %71 = cast(meta[relay.Constant][5] /* ty=Tensor[(864, 1), float32] */, dtype="int16") /* ty=Tensor[(864, 1), int16] */;
  %72 = cast(%var_1486, dtype="int16") /* ty=Tensor[(864, 13), int16] */;
  %73 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %74 = %64.0;
  %75 = %67.0;
  %76 = %70.2;
  %77 = subtract(%71, %72) /* ty=Tensor[(864, 13), int16] */;
  %78 = %73.2;
  (%74, %75, %76, meta[relay.Constant][6] /* ty=Tensor[(4, 220), int32] */, %77, %78)
}

def @func_1678() -> Tensor[(12, 16, 2), float64] {
  %79 = @func_1084() /* ty=(Tensor[(12, 16, 2), float64],) */;
  %80 = %79.0;
  %81 = cast(%80, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  %82 = acos(%81) /* ty=Tensor[(12, 16, 2), float32] */;
  %83 = cast(%82, dtype="float64") /* ty=Tensor[(12, 16, 2), float64] */;
  log10(%83) /* ty=Tensor[(12, 16, 2), float64] */
}

def @func_2743(%var_2722: Tensor[(12, 15, 2), float32]) -> (Tensor[(12, 15, 2), float32], Tensor[(12, 15, 2), bool], Tensor[(2, 7, 15), float32], Tensor[(35, 6), uint32]) {
  %84 = cast(%var_2722, dtype="float32") /* ty=Tensor[(12, 15, 2), float32] */;
  %85 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(12, 15, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 15, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 2), float32] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %88 = cast(%var_2722, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
  %89 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(12, 15, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 15, 2), float32] */, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %92 = cast(meta[relay.Constant][8] /* ty=Tensor[(35, 6), uint32] */, dtype="uint32") /* ty=Tensor[(35, 6), uint32] */;
  %93 = reshape(%92, newshape=[2, 7, 15]) /* ty=Tensor[(2, 7, 15), uint32] */;
  %94 = @func_819(%93) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(2, 7, 15), float32]) */;
  %95 = mod(%86, %87) /* ty=Tensor[(12, 15, 2), float32] */;
  %96 = equal(%90, %91) /* ty=Tensor[(12, 15, 2), bool] */;
  %97 = %94.5;
  (%95, %96, %97, meta[relay.Constant][8] /* ty=Tensor[(35, 6), uint32] */)
}

def @func_5863() -> Tensor[(12, 16, 2), bool] {
  %98 = @func_2499() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %98.0
}

def @func_2250(%var_2234: Tensor[(240), int8]) -> (Tensor[(12, 16, 2), bool], Tensor[(5, 4, 12), int8], Tensor[(240), int8]) {
  %99 = cast(%var_2234, dtype="int8") /* ty=Tensor[(240), int8] */;
  %100 = reshape(%99, newshape=[5, 4, 12]) /* ty=Tensor[(5, 4, 12), int8] */;
  %101 = @func_1758(%100) /* ty=(Tensor[(5, 4, 12), int8],) */;
  %102 = @func_367() /* ty=Tensor[(12, 16, 2), bool] */;
  %103 = %101.0;
  (%102, %103, %var_2234)
}

def @func_523() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) {
  %104 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %105 = %104.0;
  %106 = cast(%105, dtype="float64") /* ty=Tensor[(12, 16, 2), float64] */;
  %107 = sigmoid(%106) /* ty=Tensor[(12, 16, 2), float64] */;
  %108 = cast(%107, dtype="int8") /* ty=Tensor[(12, 16, 2), int8] */;
  %109 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%105, dtype="int8") /* ty=Tensor[(12, 16, 2), int8] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %112 = minimum(%110, %111) /* ty=Tensor[(12, 16, 2), int8] */;
  %113 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %114 = %113.2;
  %115 = cast(%114, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  %116 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%112, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %119 = @func_304() /* ty=Tensor[(12, 16, 2), bool] */;
  %120 = floor_mod(%117, %118) /* ty=Tensor[(12, 16, 2), float32] */;
  (%119, %120)
}

def @func_3177(%var_3153: Tensor[(9, 3, 10), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), uint16]) {
  %121 = @func_1942() /* ty=Tensor[(9, 3, 10), float32] */;
  %122 = cast(%var_3153, dtype="uint16") /* ty=Tensor[(9, 3, 10), uint16] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="uint16") /* ty=Tensor[(9, 3, 10), uint16] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %126 = @func_367() /* ty=Tensor[(12, 16, 2), bool] */;
  %127 = logical_xor(%124, %125) /* ty=Tensor[(9, 3, 10), uint16] */;
  (%126, %127)
}

def @func_2853() -> (Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(5, 14, 6), float64], Tensor[(420), float64], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
  %128 = @func_1862() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), float32]) */;
  %129 = @func_523() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %130 = cast(meta[relay.Constant][9] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %131 = reshape(%130, newshape=[5, 14, 6]) /* ty=Tensor[(5, 14, 6), float64] */;
  %132 = @func_1008(%131) /* ty=(Tensor[(5, 14, 6), float64],) */;
  %133 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %134 = %133.1;
  %135 = cast(%134, dtype="float64") /* ty=Tensor[(12, 16, 2), float64] */;
  %136 = sqrt(%135) /* ty=Tensor[(12, 16, 2), float64] */;
  %137 = cast(%136, dtype="int32") /* ty=Tensor[(12, 16, 2), int32] */;
  %138 = reshape(%137, newshape=[12, 16, 2]) /* ty=Tensor[(12, 16, 2), int32] */;
  %139 = @func_1133(%138) /* ty=(Tensor[(12, 16, 2), bool],) */;
  %140 = %128.1;
  %141 = %129.0;
  %142 = %132.0;
  %143 = %139.0;
  (%140, %141, %142, meta[relay.Constant][9] /* ty=Tensor[(420), float64] */, %136, %143)
}

def @func_543() -> (Tensor[(12, 16, 2), bool],) {
  %144 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %145 = %144.1;
  (%145,)
}

def @func_642() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) {
  %146 = @func_523() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %147 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %148 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %149 = @func_433() /* ty=Tensor[(12, 16, 2), bool] */;
  %150 = cast(%149, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  %151 = tan(%150) /* ty=Tensor[(12, 16, 2), float32] */;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  %153 = cast(%149, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %154 = reshape(%153, newshape=[12, 16, 2]) /* ty=Tensor[(12, 16, 2), bool] */;
  %155 = @func_565(%154) /* ty=(Tensor[(12, 16, 2), int32],) */;
  %156 = @func_304() /* ty=Tensor[(12, 16, 2), bool] */;
  %157 = %146.1;
  %158 = %147.0;
  %159 = %148.0;
  %160 = cosh(%152) /* ty=Tensor[(12, 16, 2), float32] */;
  %161 = @func_426() /* ty=Tensor[(12, 16, 2), bool] */;
  %162 = %155.0;
  (%156, %157, %158, %159, %160, %161, %162)
}

def @func_426() -> Tensor[(12, 16, 2), bool] {
  %163 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %163.0
}

def @func_1842() -> Tensor[(8, 15, 11), float64] {
  %164 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 15, 11), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  sqrt(%164) /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_1318(%var_1302: Tensor[(6, 11, 14), float32], %var_1307: Tensor[(6, 11, 14), float32]) -> Tensor[(6, 11, 14), float64] {
  %165 = cast(%var_1302, dtype="float32") /* ty=Tensor[(6, 11, 14), float32] */;
  %166 = log2(%165) /* ty=Tensor[(6, 11, 14), float32] */;
  %167 = cast(%var_1307, dtype="float64") /* ty=Tensor[(6, 11, 14), float64] */;
  %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%166, dtype="float64") /* ty=Tensor[(6, 11, 14), float64] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%169, %170) /* ty=Tensor[(6, 11, 14), float64] */
}

def @func_4704(%var_4693: Tensor[(4, 160), int16]) -> (Tensor[(12, 16, 2), bool], Tensor[(4, 160), uint32], Tensor[(7, 9, 14), bool], Tensor[(98, 9), uint16]) {
  %171 = @func_2499() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %172 = @func_2036() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(?, 160), int16]) */;
  %173 = %172.1;
  %174 = cast(%173, dtype="uint32") /* ty=Tensor[(?, 160), uint32] */;
  %175 = cast(%var_4693, dtype="uint32") /* ty=Tensor[(4, 160), uint32] */;
  %176 = cast(meta[relay.Constant][11] /* ty=Tensor[(98, 9), uint16] */, dtype="uint16") /* ty=Tensor[(98, 9), uint16] */;
  %177 = reshape(%176, newshape=[7, 9, 14]) /* ty=Tensor[(7, 9, 14), uint16] */;
  %178 = @func_2324(%177) /* ty=(Tensor[(7, 9, 14), bool],) */;
  %179 = %171.0;
  %180 = left_shift(%174, %175) /* ty=Tensor[(4, 160), uint32] */;
  %181 = %178.0;
  (%179, %180, %181, meta[relay.Constant][11] /* ty=Tensor[(98, 9), uint16] */)
}

def @func_2064() -> (Tensor[(8, 15, 11), float64],) {
  %182 = @func_1842() /* ty=Tensor[(8, 15, 11), float64] */;
  (%182,)
}

def @func_2499() -> (Tensor[(12, 16, 2), bool],) {
  %183 = @func_1357() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %184 = %183.0;
  (%184,)
}

def @func_3792(%var_3771: Tensor[(420), float64], %var_3781: float64) -> (Tensor[(12, 16, 2), bool], Tensor[(35, 6), uint32], Tensor[(360), float32], Tensor[(5, 14, 6), float64], Tensor[(420), float64], Tensor[(12, 16, 2), bool], float64, Tensor[(160), float32], Tensor[(8, 15, 11), float32]) {
  %185 = @func_918() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
  %186 = cast(meta[relay.Constant][12] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %187 = reshape(%186, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), float32] */;
  %188 = @func_2743(%187) /* ty=(Tensor[(12, 15, 2), float32], Tensor[(12, 15, 2), bool], Tensor[(2, 7, 15), float32], Tensor[(35, 6), uint32]) */;
  %189 = cast(%var_3771, dtype="float64") /* ty=Tensor[(420), float64] */;
  %190 = reshape(%189, newshape=[5, 14, 6]) /* ty=Tensor[(5, 14, 6), float64] */;
  %191 = @func_1008(%190) /* ty=(Tensor[(5, 14, 6), float64],) */;
  %192 = cast(%var_3781, dtype="float64") /* ty=float64 */;
  %193 = %191.0;
  %194 = cast(%193, dtype="float64") /* ty=Tensor[(5, 14, 6), float64] */;
  %195 = @func_2064() /* ty=(Tensor[(8, 15, 11), float64],) */;
  %196 = %195.0;
  %197 = cast(%196, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %198 = cast(meta[relay.Constant][13] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
  %199 = reshape(%192, newshape=[]) /* ty=float64 */;
  %200 = reshape(%194, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %201 = reshape(%197, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
  %202 = reshape(%198, newshape=[80, 2]) /* ty=Tensor[(80, 2), float32] */;
  %203 = @func_3574(%199, %200, %201, %202) /* ty=(Tensor[(11, 3, 11), float64], Tensor[(5, 14, 6), float64], Tensor[(420), float64], Tensor[(12, 16, 2), bool], Tensor[(240), int8], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(1320), float64], Tensor[(80, 2), uint32]) */;
  %204 = cast(%196, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
  %205 = acosh(%204) /* ty=Tensor[(8, 15, 11), float32] */;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
  %207 = %185.1;
  %208 = %188.3;
  %209 = %203.5;
  %210 = cosh(%206) /* ty=Tensor[(8, 15, 11), float32] */;
  (%207, %208, meta[relay.Constant][12] /* ty=Tensor[(360), float32] */, %193, %var_3771, %209, %var_3781, meta[relay.Constant][13] /* ty=Tensor[(160), float32] */, %210)
}

def @func_3931(%var_3924: Tensor[(5, 14, 3), int16], %var_3925: Tensor[(5, 14, 3), int16]) -> (Tensor[(5, 14, 3), int16],) {
  %211 = cast(%var_3925, dtype="int16") /* ty=Tensor[(5, 14, 3), int16] */;
  %212 = shape_of(%var_3924, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%var_3924, dtype="int16") /* ty=Tensor[(5, 14, 3), int16] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %215 = left_shift(%213, %214) /* ty=Tensor[(5, 14, 3), int16] */;
  (%215,)
}

def @func_2980() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) {
  %216 = @func_2211() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64]) */;
  %217 = %216.0;
  %218 = cast(%217, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %219 = reshape(%218, newshape=[12, 16, 2]) /* ty=Tensor[(12, 16, 2), bool] */;
  %220 = @func_565(%219) /* ty=(Tensor[(12, 16, 2), int32],) */;
  %221 = %220.0;
  (%217, %221)
}

def @func_819(%var_746: Tensor[(2, 7, 15), uint32]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(2, 7, 15), float32]) {
  %222 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %223 = @func_543() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %224 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %225 = @func_523() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %226 = cast(%var_746, dtype="uint32") /* ty=Tensor[(2, 7, 15), uint32] */;
  %227 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(2, 7, 15), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 7, 15), uint32] */, dtype="uint32") /* ty=Tensor[(2, 7, 15), uint32] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %230 = multiply(%228, %229) /* ty=Tensor[(2, 7, 15), uint32] */;
  %231 = cast(%230, dtype="float64") /* ty=Tensor[(2, 7, 15), float64] */;
  %232 = tan(%231) /* ty=Tensor[(2, 7, 15), float64] */;
  %233 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 7, 15), uint32] */, dtype="float32") /* ty=Tensor[(2, 7, 15), float32] */;
  %234 = acosh(%233) /* ty=Tensor[(2, 7, 15), float32] */;
  %235 = cast(%234, dtype="bool") /* ty=Tensor[(2, 7, 15), bool] */;
  %236 = shape_of(%var_746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %237 = cast(%var_746, dtype="bool") /* ty=Tensor[(2, 7, 15), bool] */;
  %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %239 = greater_equal(%237, %238) /* ty=Tensor[(2, 7, 15), bool] */;
  %240 = cast(%239, dtype="float32") /* ty=Tensor[(2, 7, 15), float32] */;
  %241 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%232, dtype="float32") /* ty=Tensor[(2, 7, 15), float32] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %244 = %222.0;
  %245 = %223.0;
  %246 = @func_433() /* ty=Tensor[(12, 16, 2), bool] */;
  %247 = %224.1;
  %248 = %225.1;
  %249 = divide(%242, %243) /* ty=Tensor[(2, 7, 15), float32] */;
  (%244, %245, %246, %247, %248, %249)
}

def @func_3055() -> (Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64]) {
  %250 = @func_2801() /* ty=(Tensor[(12, 16, 2), float32],) */;
  %251 = %250.0;
  %252 = @func_2636() /* ty=Tensor[(12, 16, 2), float64] */;
  (%251, %252)
}

def @func_367() -> Tensor[(12, 16, 2), bool] {
  %253 = @func_225() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %253.1
}

def @func_5757(%var_5723: Tensor[(8, 15, 11), float64]) -> (Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), float32], Tensor[(8, 15, 11), uint32], Tensor[(4, 220), int32], Tensor[(11232), float32]) {
  %254 = @func_2609() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %255 = @func_4775() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) */;
  %256 = @func_4093() /* ty=Tensor[(8, 15, 11), float64] */;
  %257 = cast(%var_5723, dtype="uint32") /* ty=Tensor[(8, 15, 11), uint32] */;
  %258 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%256, dtype="uint32") /* ty=Tensor[(8, 15, 11), uint32] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %261 = cast(meta[relay.Constant][15] /* ty=Tensor[(11232), float32] */, dtype="float32") /* ty=Tensor[(11232), float32] */;
  %262 = reshape(%261, newshape=[864, 13]) /* ty=Tensor[(864, 13), float32] */;
  %263 = @func_1499(%262) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 8, 9), float32], Tensor[(16, 5, 11), float64], Tensor[(4, 220), int32], Tensor[(864, 13), int16], Tensor[(12, 16, 2), bool]) */;
  %264 = %254.0;
  %265 = %255.0;
  %266 = bitwise_and(%259, %260) /* ty=Tensor[(8, 15, 11), uint32] */;
  %267 = %263.3;
  (%264, %265, %266, %267, meta[relay.Constant][15] /* ty=Tensor[(11232), float32] */)
}

def @func_1972() -> Tensor[(12, 16, 2), float64] {
  %268 = @func_918() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
  %268.0
}

def @func_5924(%var_5913: Tensor[(9, 3, 10), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), int8]) {
  %269 = @func_2609() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %270 = @func_713() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %271 = @func_1592() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %272 = @func_4775() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) */;
  %273 = %272.0;
  %274 = cast(%var_5913, dtype="int8") /* ty=Tensor[(9, 3, 10), int8] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="int8") /* ty=Tensor[(9, 3, 10), int8] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %278 = %269.0;
  %279 = %270.0;
  %280 = %271.0;
  %281 = @func_4201() /* ty=Tensor[(12, 16, 2), bool] */;
  %282 = maximum(%276, %277) /* ty=Tensor[(9, 3, 10), int8] */;
  (%278, %279, %280, %281, %282)
}

def @func_1862() -> (Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), float32]) {
  %283 = @func_1075() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) */;
  %284 = @func_523() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %285 = %283.0;
  %286 = %284.1;
  (%285, %286)
}

def @func_1084() -> (Tensor[(12, 16, 2), float64],) {
  %287 = @func_404() /* ty=Tensor[(12, 16, 2), float64] */;
  (%287,)
}

def @func_5092() -> (Tensor[(12, 16, 2), bool],) {
  %288 = @func_1938() /* ty=Tensor[(12, 16, 2), bool] */;
  (%288,)
}

def @func_1518() -> (Tensor[(12, 16, 2), bool],) {
  %289 = @func_713() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %290 = %289.1;
  (%290,)
}

def @func_2717(%var_2682: Tensor[(12, 16, 2), bool]) -> (Tensor[(12, 16, 2), uint16], Tensor[(12, 16, 2), bool]) {
  %291 = @func_982() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %292 = %291.2;
  %293 = cast(%var_2682, dtype="uint16") /* ty=Tensor[(12, 16, 2), uint16] */;
  %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%292, dtype="uint16") /* ty=Tensor[(12, 16, 2), uint16] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %297 = logical_xor(%295, %296) /* ty=Tensor[(12, 16, 2), uint16] */;
  %298 = cast(%297, dtype="int32") /* ty=Tensor[(12, 16, 2), int32] */;
  %299 = reshape(%298, newshape=[12, 16, 2]) /* ty=Tensor[(12, 16, 2), int32] */;
  %300 = @func_1133(%299) /* ty=(Tensor[(12, 16, 2), bool],) */;
  %301 = %300.0;
  (%297, %301)
}

def @func_1008(%var_1002: Tensor[(5, 14, 6), float64]) -> (Tensor[(5, 14, 6), float64],) {
  %302 = cast(%var_1002, dtype="float64") /* ty=Tensor[(5, 14, 6), float64] */;
  %303 = log2(%302) /* ty=Tensor[(5, 14, 6), float64] */;
  (%303,)
}

def @func_5453() -> (Tensor[(2, 7, 8), bool],) {
  %304 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 7, 8), float64] */, dtype="bool") /* ty=Tensor[(2, 7, 8), bool] */;
  %305 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(2, 7, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 7, 8), float64] */, dtype="bool") /* ty=Tensor[(2, 7, 8), bool] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %308 = less(%306, %307) /* ty=Tensor[(2, 7, 8), bool] */;
  (%308,)
}

def @func_3853(%var_3824: Tensor[(72, 156), float32]) -> (Tensor[(12, 16, 2), float32], Tensor[(5, 4, 12), int8], Tensor[(240), int8], Tensor[(12, 16, 2), bool], Tensor[(72, 156), float32], Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), float32]) {
  %309 = @func_2137() /* ty=(Tensor[(12, 16, 2), float32],) */;
  %310 = cast(meta[relay.Constant][18] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %311 = reshape(%310, newshape=[240]) /* ty=Tensor[(240), int8] */;
  %312 = @func_2250(%311) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(5, 4, 12), int8], Tensor[(240), int8]) */;
  %313 = cast(%var_3824, dtype="float32") /* ty=Tensor[(72, 156), float32] */;
  %314 = reshape(%313, newshape=[864, 13]) /* ty=Tensor[(864, 13), float32] */;
  %315 = @func_1499(%314) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 8, 9), float32], Tensor[(16, 5, 11), float64], Tensor[(4, 220), int32], Tensor[(864, 13), int16], Tensor[(12, 16, 2), bool]) */;
  %316 = @func_2298() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %317 = @func_1075() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) */;
  %318 = %317.0;
  %319 = cast(%318, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
  %320 = %309.0;
  %321 = %312.1;
  %322 = %315.5;
  %323 = %316.0;
  %324 = atanh(%319) /* ty=Tensor[(9, 3, 10), float32] */;
  (%320, %321, meta[relay.Constant][18] /* ty=Tensor[(240), int8] */, %322, %var_3824, %323, %324)
}

def @func_2036() -> (Tensor[(12, 16, 2), bool], Tensor[(?, 160), int16]) {
  %325 = @func_1357() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %326 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 160), uint16] */, dtype="float32") /* ty=Tensor[(1, 160), float32] */;
  %327 = atan(%326) /* ty=Tensor[(1, 160), float32] */;
  %328 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 160), uint16] */, dtype="uint16") /* ty=Tensor[(1, 160), uint16] */;
  %329 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 160), uint16] */, dtype="uint16") /* ty=Tensor[(1, 160), uint16] */;
  %330 = reshape(%328, newshape=[2, 16, 5]) /* ty=Tensor[(2, 16, 5), uint16] */;
  %331 = reshape(%329, newshape=[2, 16, 5]) /* ty=Tensor[(2, 16, 5), uint16] */;
  %332 = @func_1959(%330, %331) /* ty=(Tensor[(2, 16, 5), uint16],) */;
  %333 = %332.0;
  %334 = cast(%333, dtype="int16") /* ty=Tensor[(2, 16, 5), int16] */;
  %335 = shape_of(%327, dtype="int32") /* ty=Tensor[(2), int32] */;
  %336 = cast(%327, dtype="int16") /* ty=Tensor[(1, 160), int16] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %338 = %325.0;
  %339 = left_shift(%336, %337) /* ty=Tensor[(?, 160), int16] */;
  (%338, %339)
}

def @func_565(%var_560: Tensor[(12, 16, 2), bool]) -> (Tensor[(12, 16, 2), int32],) {
  %340 = @func_225() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %341 = %340.0;
  %342 = cast(%var_560, dtype="int32") /* ty=Tensor[(12, 16, 2), int32] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="int32") /* ty=Tensor[(12, 16, 2), int32] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %346 = right_shift(%344, %345) /* ty=Tensor[(12, 16, 2), int32] */;
  (%346,)
}

def @func_4425(%var_4396: Tensor[(4, 4), float32]) -> (Tensor[(4, 4), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %347 = cast(%var_4396, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %348 = @func_2499() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %349 = cos(%347) /* ty=Tensor[(4, 4), float32] */;
  %350 = @func_3906() /* ty=Tensor[(12, 16, 2), bool] */;
  %351 = %348.0;
  (%349, %350, %351)
}

def @func_1385() -> (Tensor[(12, 16, 2), bool],) {
  %352 = @func_543() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %353 = %352.0;
  (%353,)
}

def @func_4290() -> (Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64]) {
  %354 = @func_1592() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %355 = @func_4072() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(8, 14, 10), float64], Tensor[(1120), float64], Tensor[(12, 16, 2), bool], Tensor[(2, 440), int32]) */;
  %356 = %354.1;
  %357 = %355.1;
  (%356, %357)
}

def @func_2609() -> (Tensor[(12, 16, 2), bool],) {
  %358 = @func_543() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %359 = %358.0;
  (%359,)
}

def @func_4740() -> (Tensor[(12, 16, 2), bool],) {
  %360 = @func_2609() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %361 = %360.0;
  (%361,)
}

def @func_6107(%var_6085: Tensor[(4, 12, 6), uint16]) -> (Tensor[(4, 12, 6), uint16], Tensor[(4, 12, 6), uint16], Tensor[(9, 4, 12), float32], Tensor[(432), float32]) {
  %362 = cast(%var_6085, dtype="uint16") /* ty=Tensor[(4, 12, 6), uint16] */;
  %363 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(4, 12, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 12, 6), uint16] */, dtype="uint16") /* ty=Tensor[(4, 12, 6), uint16] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %366 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 12, 6), uint16] */, dtype="uint16") /* ty=Tensor[(4, 12, 6), uint16] */;
  %367 = shape_of(%var_6085, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%var_6085, dtype="uint16") /* ty=Tensor[(4, 12, 6), uint16] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %370 = cast(meta[relay.Constant][22] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %371 = reshape(%370, newshape=[9, 4, 12]) /* ty=Tensor[(9, 4, 12), float32] */;
  %372 = bitwise_and(%364, %365) /* ty=Tensor[(4, 12, 6), uint16] */;
  %373 = add(%368, %369) /* ty=Tensor[(4, 12, 6), uint16] */;
  %374 = @func_4581(%371) /* ty=Tensor[(9, 4, 12), float32] */;
  (%372, %373, %374, meta[relay.Constant][22] /* ty=Tensor[(432), float32] */)
}

def @func_6861() -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) {
  %375 = @func_5836() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
  %376 = @func_2980() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */;
  %377 = %375.0;
  %378 = @func_304() /* ty=Tensor[(12, 16, 2), bool] */;
  %379 = %376.1;
  (%377, %378, %379)
}

def @func_6408() -> Tensor[(12, 16, 2), float64] {
  %380 = @func_5836() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
  %380.0
}

def @func_1185() -> Tensor[(12, 16, 2), bool] {
  @func_433() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_6591() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32], Tensor[(12, 16, 2), float32]) {
  %381 = @func_5092() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %382 = @func_2980() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */;
  %383 = @func_3110() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %384 = %381.0;
  %385 = %382.1;
  %386 = %383.1;
  (%384, %385, %386)
}

def @func_713() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %387 = @func_523() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %388 = %387.0;
  %389 = @func_426() /* ty=Tensor[(12, 16, 2), bool] */;
  (%388, %389)
}

def @func_6922(%var_6892: Tensor[(12, 4, 16), uint8], %var_6893: Tensor[(12, 4, 16), uint8]) -> (Tensor[(12, 4, 16), uint8], Tensor[(8, 15, 11), float64]) {
  %390 = cast(%var_6893, dtype="uint8") /* ty=Tensor[(12, 4, 16), uint8] */;
  %391 = shape_of(%var_6892, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%var_6892, dtype="uint8") /* ty=Tensor[(12, 4, 16), uint8] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %394 = subtract(%392, %393) /* ty=Tensor[(12, 4, 16), uint8] */;
  %395 = @func_4093() /* ty=Tensor[(8, 15, 11), float64] */;
  (%394, %395)
}

def @func_982() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %396 = @func_225() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %397 = @func_367() /* ty=Tensor[(12, 16, 2), bool] */;
  %398 = %396.0;
  %399 = @func_304() /* ty=Tensor[(12, 16, 2), bool] */;
  (%397, %398, %399)
}

def @func_2097() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %400 = @func_1938() /* ty=Tensor[(12, 16, 2), bool] */;
  %401 = @func_433() /* ty=Tensor[(12, 16, 2), bool] */;
  (%400, %401)
}

def @func_5004() -> (Tensor[(12, 16, 2), bool],) {
  %402 = @func_2499() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %403 = %402.0;
  (%403,)
}

def @func_5118(%var_5095: Tensor[(16, 2, 8), float32], %var_5107: Tensor[(16, 2, 8), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(16, 2, 8), int32]) {
  %404 = cast(%var_5095, dtype="float32") /* ty=Tensor[(16, 2, 8), float32] */;
  %405 = sqrt(%404) /* ty=Tensor[(16, 2, 8), float32] */;
  %406 = cast(%var_5107, dtype="int32") /* ty=Tensor[(16, 2, 8), int32] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="int32") /* ty=Tensor[(16, 2, 8), int32] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %410 = @func_433() /* ty=Tensor[(12, 16, 2), bool] */;
  %411 = multiply(%408, %409) /* ty=Tensor[(16, 2, 8), int32] */;
  (%410, %411)
}

def @func_5554() -> Tensor[(12, 16, 2), bool] {
  @func_4201() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_1758(%var_1738: Tensor[(5, 4, 12), int8]) -> (Tensor[(5, 4, 12), int8],) {
  %412 = cast(%var_1738, dtype="int8") /* ty=Tensor[(5, 4, 12), int8] */;
  %413 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(5, 4, 12), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 4, 12), int8] */, dtype="int8") /* ty=Tensor[(5, 4, 12), int8] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %416 = left_shift(%414, %415) /* ty=Tensor[(5, 4, 12), int8] */;
  (%416,)
}

def @func_6635() -> (Tensor[(12, 16, 2), bool],) {
  %417 = @func_543() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %418 = %417.0;
  (%418,)
}

def @func_6696() -> Tensor[(12, 16, 2), bool] {
  %419 = @func_2587() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
  %419.3
}

def @func_1942() -> Tensor[(9, 3, 10), float32] {
  %420 = @func_1862() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), float32]) */;
  %420.0
}

def @func_3687() -> (Tensor[(12, 16, 2), bool],) {
  %421 = @func_225() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %422 = %421.0;
  (%422,)
}

def @func_454() -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %423 = @func_404() /* ty=Tensor[(12, 16, 2), float64] */;
  %424 = cast(%423, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %425 = reshape(%424, newshape=[12, 16, 2]) /* ty=Tensor[(12, 16, 2), bool] */;
  %426 = @func_184(%425) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int16], Tensor[(12, 16, 2), bool]) */;
  %427 = @func_433() /* ty=Tensor[(12, 16, 2), bool] */;
  %428 = %426.0;
  (%423, %427, %428)
}

def @func_225() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %429 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %430 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %431 = %429.0;
  %432 = %430.0;
  (%431, %432)
}

def @func_261(%var_253: Tensor[(12, 8, 9), float32]) -> (Tensor[(12, 8, 9), float32],) {
  %433 = cast(%var_253, dtype="float32") /* ty=Tensor[(12, 8, 9), float32] */;
  %434 = asin(%433) /* ty=Tensor[(12, 8, 9), float32] */;
  (%434,)
}

def @func_6793() -> Tensor[(8, 15, 11), float64] {
  @func_1842() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_5038(%var_5033: Tensor[(2, 12, 16), float32]) -> (Tensor[(2, 12, 16), float32], Tensor[(12, 16, 2), float32]) {
  %435 = cast(%var_5033, dtype="float32") /* ty=Tensor[(2, 12, 16), float32] */;
  %436 = @func_3110() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %437 = erf(%435) /* ty=Tensor[(2, 12, 16), float32] */;
  %438 = %436.1;
  (%437, %438)
}

def @func_304() -> Tensor[(12, 16, 2), bool] {
  %439 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %439.0
}

def @func_2801() -> (Tensor[(12, 16, 2), float32],) {
  %440 = @func_523() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %441 = %440.1;
  (%441,)
}

def @func_4626() -> Tensor[(12, 16, 2), bool] {
  %442 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %442.2
}

def @func_4000(%var_3986: Tensor[(8, 7, 4), float32]) -> (Tensor[(8, 7, 4), float32],) {
  %443 = cast(%var_3986, dtype="float32") /* ty=Tensor[(8, 7, 4), float32] */;
  %444 = tan(%443) /* ty=Tensor[(8, 7, 4), float32] */;
  (%444,)
}

def @func_404() -> Tensor[(12, 16, 2), float64] {
  %445 = @func_367() /* ty=Tensor[(12, 16, 2), bool] */;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(12, 16, 2), float64] */;
  log2(%446) /* ty=Tensor[(12, 16, 2), float64] */
}

def @func_6355() -> (Tensor[(12, 16, 2), bool],) {
  %447 = @func_5070() /* ty=Tensor[(12, 16, 2), bool] */;
  (%447,)
}

def @func_5379() -> (Tensor[(12, 16, 2), bool],) {
  %448 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %449 = %448.1;
  (%449,)
}

def @func_5070() -> Tensor[(12, 16, 2), bool] {
  @func_367() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_6676() -> (Tensor[(12, 16, 2), float32],) {
  %450 = @func_1592() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %451 = %450.1;
  (%451,)
}

def @func_2137() -> (Tensor[(12, 16, 2), float32],) {
  %452 = @func_1185() /* ty=Tensor[(12, 16, 2), bool] */;
  %453 = cast(%452, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  %454 = log(%453) /* ty=Tensor[(12, 16, 2), float32] */;
  (%454,)
}

def @func_6263(%var_6239: Tensor[(3, 8, 9), float32]) -> (Tensor[(3, 8, 9), float32],) {
  %455 = cast(%var_6239, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %456 = asin(%455) /* ty=Tensor[(3, 8, 9), float32] */;
  (%456,)
}

def @func_1959(%var_1947: Tensor[(2, 16, 5), uint16], %var_1948: Tensor[(2, 16, 5), uint16]) -> (Tensor[(2, 16, 5), uint16],) {
  %457 = cast(%var_1948, dtype="uint16") /* ty=Tensor[(2, 16, 5), uint16] */;
  %458 = shape_of(%var_1947, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%var_1947, dtype="uint16") /* ty=Tensor[(2, 16, 5), uint16] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %461 = bitwise_and(%459, %460) /* ty=Tensor[(2, 16, 5), uint16] */;
  (%461,)
}

def @func_4657(%var_4645: Tensor[(1, 5, 3), int16]) -> (Tensor[(9, 5, 3), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %462 = cast(%var_4645, dtype="bool") /* ty=Tensor[(1, 5, 3), bool] */;
  %463 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 5, 3), int16] */, dtype="bool") /* ty=Tensor[(9, 5, 3), bool] */;
  %464 = @func_1637() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %465 = %464.2;
  %466 = cast(%465, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %467 = reshape(%466, newshape=[12, 16, 2]) /* ty=Tensor[(12, 16, 2), bool] */;
  %468 = @func_184(%467) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int16], Tensor[(12, 16, 2), bool]) */;
  %469 = greater(%462, %463) /* ty=Tensor[(9, 5, 3), bool] */;
  %470 = %468.0;
  (%469, %465, %470)
}

def @func_6217() -> (Tensor[(16, 160), int64], Tensor[(12, 16, 2), bool], Tensor[(16, 160), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %471 = @func_2036() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(?, 160), int16]) */;
  %472 = %471.1;
  %473 = cast(%472, dtype="int64") /* ty=Tensor[(?, 160), int64] */;
  %474 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 160), int16] */, dtype="int64") /* ty=Tensor[(16, 160), int64] */;
  %475 = @func_3086() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32], Tensor[(12, 16, 2), bool]) */;
  %476 = cast(%472, dtype="uint64") /* ty=Tensor[(?, 160), uint64] */;
  %477 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 160), int16] */, dtype="uint64") /* ty=Tensor[(16, 160), uint64] */;
  %478 = add(%476, %477) /* ty=Tensor[(16, 160), uint64] */;
  %479 = cast(%478, dtype="float32") /* ty=Tensor[(16, 160), float32] */;
  %480 = sigmoid(%479) /* ty=Tensor[(16, 160), float32] */;
  %481 = cast(%480, dtype="float64") /* ty=Tensor[(16, 160), float64] */;
  %482 = @func_3687() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %483 = @func_1518() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %484 = multiply(%473, %474) /* ty=Tensor[(16, 160), int64] */;
  %485 = %475.0;
  %486 = tan(%481) /* ty=Tensor[(16, 160), float64] */;
  %487 = %482.0;
  %488 = %483.0;
  (%484, %485, %486, %487, %488)
}

def @func_2298() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %489 = @func_1592() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %490 = %489.0;
  %491 = @func_426() /* ty=Tensor[(12, 16, 2), bool] */;
  %492 = @func_304() /* ty=Tensor[(12, 16, 2), bool] */;
  (%490, %491, %492)
}

def @func_6518() -> Tensor[(12, 16, 2), bool] {
  %493 = @func_1385() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %493.0
}

def @func_3086() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32], Tensor[(12, 16, 2), bool]) {
  %494 = @func_2298() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %495 = @func_2980() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */;
  %496 = @func_1357() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %497 = %494.0;
  %498 = %495.1;
  %499 = %496.0;
  (%497, %498, %499)
}

def @func_3311() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
  %500 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %501 = @func_1592() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %502 = @func_225() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %503 = %500.2;
  %504 = %501.1;
  %505 = @func_2636() /* ty=Tensor[(12, 16, 2), float64] */;
  %506 = %502.0;
  (%503, %504, %505, %506)
}

def @func_2324(%var_2315: Tensor[(7, 9, 14), uint16]) -> (Tensor[(7, 9, 14), bool],) {
  %507 = cast(%var_2315, dtype="bool") /* ty=Tensor[(7, 9, 14), bool] */;
  %508 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(7, 9, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 9, 14), uint16] */, dtype="bool") /* ty=Tensor[(7, 9, 14), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %511 = equal(%509, %510) /* ty=Tensor[(7, 9, 14), bool] */;
  (%511,)
}

def @func_4915(%var_4863: Tensor[(864), float32], %var_4874: Tensor[(12, 8, 9), float32], %var_4898: Tensor[(2, 7, 15), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(864), float32], Tensor[(12, 8, 9), float64], Tensor[(12, 8, 9), float64], Tensor[(360), float32], Tensor[(2, 7, 15), bool], Tensor[(12, 8, 9), float32]) {
  %512 = @func_3242() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %513 = cast(%var_4863, dtype="float32") /* ty=Tensor[(864), float32] */;
  %514 = reshape(%513, newshape=[12, 8, 9]) /* ty=Tensor[(12, 8, 9), float32] */;
  %515 = @func_261(%514) /* ty=(Tensor[(12, 8, 9), float32],) */;
  %516 = %515.0;
  %517 = cast(%var_4874, dtype="float32") /* ty=Tensor[(12, 8, 9), float32] */;
  %518 = shape_of(%516, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%516, dtype="float32") /* ty=Tensor[(12, 8, 9), float32] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %521 = power(%519, %520) /* ty=Tensor[(12, 8, 9), float32] */;
  %522 = cast(%516, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
  %523 = shape_of(%521, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%521, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %526 = cast(%516, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
  %527 = cast(meta[relay.Constant][27] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %528 = reshape(%527, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), float32] */;
  %529 = @func_2743(%528) /* ty=(Tensor[(12, 15, 2), float32], Tensor[(12, 15, 2), bool], Tensor[(2, 7, 15), float32], Tensor[(35, 6), uint32]) */;
  %530 = %529.2;
  %531 = cast(%var_4898, dtype="bool") /* ty=Tensor[(2, 7, 15), bool] */;
  %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%530, dtype="bool") /* ty=Tensor[(2, 7, 15), bool] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %535 = cast(%516, dtype="float32") /* ty=Tensor[(12, 8, 9), float32] */;
  %536 = %512.0;
  %537 = divide(%524, %525) /* ty=Tensor[(12, 8, 9), float64] */;
  %538 = acosh(%526) /* ty=Tensor[(12, 8, 9), float64] */;
  %539 = equal(%533, %534) /* ty=Tensor[(2, 7, 15), bool] */;
  %540 = sqrt(%535) /* ty=Tensor[(12, 8, 9), float32] */;
  (%536, %var_4863, %537, %538, meta[relay.Constant][27] /* ty=Tensor[(360), float32] */, %539, %540)
}

def @func_1592() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) {
  %541 = @func_642() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */;
  %542 = @func_304() /* ty=Tensor[(12, 16, 2), bool] */;
  %543 = @func_713() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %544 = %543.1;
  %545 = cast(%544, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %546 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%542, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %549 = equal(%547, %548) /* ty=Tensor[(12, 16, 2), bool] */;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  %551 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%542, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %554 = %541.5;
  %555 = mod(%552, %553) /* ty=Tensor[(12, 16, 2), float32] */;
  (%554, %555)
}

def @func_2211() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64]) {
  %556 = @func_225() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %557 = @func_367() /* ty=Tensor[(12, 16, 2), bool] */;
  %558 = %556.1;
  %559 = @func_1972() /* ty=Tensor[(12, 16, 2), float64] */;
  (%557, %558, %559)
}

def @func_1439(%var_1414: Tensor[(16, 5, 11), int32]) -> (Tensor[(16, 5, 11), bool], Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), float64]) {
  %560 = cast(%var_1414, dtype="bool") /* ty=Tensor[(16, 5, 11), bool] */;
  %561 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(16, 5, 11), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 5, 11), int32] */, dtype="bool") /* ty=Tensor[(16, 5, 11), bool] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %564 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 5, 11), int32] */, dtype="float64") /* ty=Tensor[(16, 5, 11), float64] */;
  %565 = shape_of(%var_1414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%var_1414, dtype="float64") /* ty=Tensor[(16, 5, 11), float64] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %568 = greater(%562, %563) /* ty=Tensor[(16, 5, 11), bool] */;
  %569 = @func_1185() /* ty=Tensor[(12, 16, 2), bool] */;
  %570 = mod(%566, %567) /* ty=Tensor[(16, 5, 11), float64] */;
  (%568, %569, %570)
}

def @func_4794() -> Tensor[(12, 16, 2), float64] {
  %571 = @func_918() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
  %571.0
}

def @func_4093() -> Tensor[(8, 15, 11), float64] {
  @func_1842() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_1938() -> Tensor[(12, 16, 2), bool] {
  %572 = @func_834() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %572.0
}

def @func_3671(%var_3628: Tensor[(11232), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(11232), int64]) {
  %573 = cast(%var_3628, dtype="float32") /* ty=Tensor[(11232), float32] */;
  %574 = reshape(%573, newshape=[864, 13]) /* ty=Tensor[(864, 13), float32] */;
  %575 = @func_1499(%574) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 8, 9), float32], Tensor[(16, 5, 11), float64], Tensor[(4, 220), int32], Tensor[(864, 13), int16], Tensor[(12, 16, 2), bool]) */;
  %576 = cast(%var_3628, dtype="float64") /* ty=Tensor[(11232), float64] */;
  %577 = atanh(%576) /* ty=Tensor[(11232), float64] */;
  %578 = cast(%577, dtype="float64") /* ty=Tensor[(11232), float64] */;
  %579 = sqrt(%578) /* ty=Tensor[(11232), float64] */;
  %580 = cast(%577, dtype="bool") /* ty=Tensor[(11232), bool] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(1), int32] */;
  %582 = cast(%579, dtype="bool") /* ty=Tensor[(11232), bool] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?), bool] */;
  %584 = less_equal(%582, %583) /* ty=Tensor[(11232), bool] */;
  %585 = cast(%584, dtype="int64") /* ty=Tensor[(11232), int64] */;
  %586 = shape_of(%579, dtype="int32") /* ty=Tensor[(1), int32] */;
  %587 = cast(%579, dtype="int64") /* ty=Tensor[(11232), int64] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?), int64] */;
  %589 = @func_426() /* ty=Tensor[(12, 16, 2), bool] */;
  %590 = %575.5;
  %591 = minimum(%587, %588) /* ty=Tensor[(11232), int64] */;
  (%589, %590, %591)
}

def @func_4775() -> (Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) {
  %592 = @func_642() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */;
  %593 = @func_1942() /* ty=Tensor[(9, 3, 10), float32] */;
  %594 = %592.3;
  (%593, %594)
}

def @func_433() -> Tensor[(12, 16, 2), bool] {
  @func_426() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_4581(%var_4576: Tensor[(9, 4, 12), float32]) -> Tensor[(9, 4, 12), float32] {
  %595 = cast(%var_4576, dtype="float32") /* ty=Tensor[(9, 4, 12), float32] */;
  %596 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(9, 4, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 4, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 4, 12), float32] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%597, %598) /* ty=Tensor[(9, 4, 12), float32] */
}

def @func_3451() -> (Tensor[(9, 3, 10), float32],) {
  %599 = @func_1075() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) */;
  %600 = %599.0;
  (%600,)
}

def @func_5580() -> Tensor[(12, 16, 2), bool] {
  %601 = @func_2499() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %601.0
}

def @func_3906() -> Tensor[(12, 16, 2), bool] {
  %602 = @func_642() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */;
  %602.0
}

def @func_3574(%var_3472: float64, %var_3524: Tensor[(420), float64], %var_3537: Tensor[(1320), float64], %var_3553: Tensor[(80, 2), float32]) -> (Tensor[(11, 3, 11), float64], Tensor[(5, 14, 6), float64], Tensor[(420), float64], Tensor[(12, 16, 2), bool], Tensor[(240), int8], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(1320), float64], Tensor[(80, 2), uint32]) {
  %603 = cast(%var_3472, dtype="float64") /* ty=float64 */;
  %604 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 3, 11), float64] */, dtype="float64") /* ty=Tensor[(11, 3, 11), float64] */;
  %605 = cast(%var_3524, dtype="float64") /* ty=Tensor[(420), float64] */;
  %606 = reshape(%605, newshape=[5, 14, 6]) /* ty=Tensor[(5, 14, 6), float64] */;
  %607 = @func_1008(%606) /* ty=(Tensor[(5, 14, 6), float64],) */;
  %608 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %609 = reshape(%608, newshape=[240]) /* ty=Tensor[(240), int8] */;
  %610 = @func_2250(%609) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(5, 4, 12), int8], Tensor[(240), int8]) */;
  %611 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %612 = cast(%var_3537, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %613 = reshape(%612, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), float64] */;
  %614 = @func_3423(%613) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(8, 15, 11), uint64], Tensor[(12, 16, 2), float32]) */;
  %615 = cast(meta[relay.Constant][32] /* ty=Tensor[(80, 2), uint16] */, dtype="float64") /* ty=Tensor[(80, 2), float64] */;
  %616 = atan(%615) /* ty=Tensor[(80, 2), float64] */;
  %617 = cast(meta[relay.Constant][32] /* ty=Tensor[(80, 2), uint16] */, dtype="uint16") /* ty=Tensor[(80, 2), uint16] */;
  %618 = cast(meta[relay.Constant][32] /* ty=Tensor[(80, 2), uint16] */, dtype="uint16") /* ty=Tensor[(80, 2), uint16] */;
  %619 = reshape(%617, newshape=[2, 16, 5]) /* ty=Tensor[(2, 16, 5), uint16] */;
  %620 = reshape(%618, newshape=[2, 16, 5]) /* ty=Tensor[(2, 16, 5), uint16] */;
  %621 = @func_1959(%619, %620) /* ty=(Tensor[(2, 16, 5), uint16],) */;
  %622 = %621.0;
  %623 = cast(%622, dtype="float32") /* ty=Tensor[(2, 16, 5), float32] */;
  %624 = shape_of(%616, dtype="int32") /* ty=Tensor[(2), int32] */;
  %625 = cast(%616, dtype="float32") /* ty=Tensor[(80, 2), float32] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %627 = floor_mod(%625, %626) /* ty=Tensor[(80, 2), float32] */;
  %628 = cast(%var_3553, dtype="float32") /* ty=Tensor[(80, 2), float32] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(2), int32] */;
  %630 = cast(%627, dtype="float32") /* ty=Tensor[(80, 2), float32] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %632 = power(%630, %631) /* ty=Tensor[(80, 2), float32] */;
  %633 = cast(%632, dtype="uint32") /* ty=Tensor[(80, 2), uint32] */;
  %634 = cast(%var_3472, dtype="uint32") /* ty=uint32 */;
  %635 = floor_divide(%603, %604) /* ty=Tensor[(11, 3, 11), float64] */;
  %636 = %607.0;
  %637 = %610.0;
  %638 = %611.0;
  %639 = %614.0;
  %640 = bitwise_xor(%633, %634) /* ty=Tensor[(80, 2), uint32] */;
  (%635, %636, %var_3524, %637, meta[relay.Constant][31] /* ty=Tensor[(240), int8] */, %638, %639, %var_3537, %640)
}

def @func_4393() -> (Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), bool], Tensor[(4, 220), int32], Tensor[(16, 9, 9), uint32], Tensor[(16, 9, 9), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %641 = @func_1518() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %642 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 220), int32] */, dtype="int32") /* ty=Tensor[(4, 220), int32] */;
  %643 = reshape(%642, newshape=[16, 5, 11]) /* ty=Tensor[(16, 5, 11), int32] */;
  %644 = @func_1439(%643) /* ty=(Tensor[(16, 5, 11), bool], Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), float64]) */;
  %645 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 9, 9), float64] */, dtype="float64") /* ty=Tensor[(16, 9, 9), float64] */;
  %646 = sinh(%645) /* ty=Tensor[(16, 9, 9), float64] */;
  %647 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 9, 9), float64] */, dtype="float32") /* ty=Tensor[(16, 9, 9), float32] */;
  %648 = acos(%647) /* ty=Tensor[(16, 9, 9), float32] */;
  %649 = cast(%648, dtype="uint32") /* ty=Tensor[(16, 9, 9), uint32] */;
  %650 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%646, dtype="uint32") /* ty=Tensor[(16, 9, 9), uint32] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %653 = cast(%648, dtype="float64") /* ty=Tensor[(16, 9, 9), float64] */;
  %654 = @func_2298() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %655 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %656 = %641.0;
  %657 = %644.0;
  %658 = right_shift(%651, %652) /* ty=Tensor[(16, 9, 9), uint32] */;
  %659 = rsqrt(%653) /* ty=Tensor[(16, 9, 9), float64] */;
  %660 = %654.1;
  %661 = %655.0;
  (%656, %657, meta[relay.Constant][33] /* ty=Tensor[(4, 220), int32] */, %658, %659, %660, %661)
}

def @func_5791() -> (Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), float64]) {
  %662 = @func_543() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %663 = @func_1862() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), float32]) */;
  %664 = %663.0;
  %665 = cast(%664, dtype="float64") /* ty=Tensor[(9, 3, 10), float64] */;
  %666 = %662.0;
  %667 = cos(%665) /* ty=Tensor[(9, 3, 10), float64] */;
  (%666, %667)
}

def @func_6077(%var_6068: Tensor[(14, 13, 15), int16], %var_6069: Tensor[(14, 13, 15), int16]) -> (Tensor[(14, 13, 15), bool], Tensor[(12, 16, 2), bool]) {
  %668 = cast(%var_6069, dtype="bool") /* ty=Tensor[(14, 13, 15), bool] */;
  %669 = shape_of(%var_6068, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%var_6068, dtype="bool") /* ty=Tensor[(14, 13, 15), bool] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %672 = @func_982() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %673 = greater_equal(%670, %671) /* ty=Tensor[(14, 13, 15), bool] */;
  %674 = %672.0;
  (%673, %674)
}

def @func_1133(%var_1115: Tensor[(12, 16, 2), int32]) -> (Tensor[(12, 16, 2), bool],) {
  %675 = @func_642() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */;
  %676 = %675.6;
  %677 = cast(%var_1115, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%676, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %681 = not_equal(%679, %680) /* ty=Tensor[(12, 16, 2), bool] */;
  (%681,)
}

def @func_6118() -> (Tensor[(12, 16, 2), float32],) {
  %682 = @func_2137() /* ty=(Tensor[(12, 16, 2), float32],) */;
  %683 = %682.0;
  (%683,)
}

def @func_3242() -> (Tensor[(12, 16, 2), bool],) {
  %684 = @func_2211() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64]) */;
  %685 = %684.0;
  (%685,)
}

def @func_5624() -> (Tensor[(12, 16, 2), float32], Tensor[(16, 5, 11), bool], Tensor[(880), int32]) {
  %686 = @func_2801() /* ty=(Tensor[(12, 16, 2), float32],) */;
  %687 = cast(meta[relay.Constant][35] /* ty=Tensor[(880), int32] */, dtype="int32") /* ty=Tensor[(880), int32] */;
  %688 = reshape(%687, newshape=[16, 5, 11]) /* ty=Tensor[(16, 5, 11), int32] */;
  %689 = @func_1439(%688) /* ty=(Tensor[(16, 5, 11), bool], Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), float64]) */;
  %690 = %686.0;
  %691 = %689.0;
  (%690, %691, meta[relay.Constant][35] /* ty=Tensor[(880), int32] */)
}

def @func_6525() -> Tensor[(12, 16, 2), bool] {
  %692 = @func_3311() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
  %692.3
}

def @func_2562(%var_2556: Tensor[(16, 16, 5), bool], %var_2557: Tensor[(16, 16, 5), bool]) -> (Tensor[(16, 16, 5), bool],) {
  %693 = cast(%var_2557, dtype="bool") /* ty=Tensor[(16, 16, 5), bool] */;
  %694 = shape_of(%var_2556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%var_2556, dtype="bool") /* ty=Tensor[(16, 16, 5), bool] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %697 = logical_or(%695, %696) /* ty=Tensor[(16, 16, 5), bool] */;
  (%697,)
}

def @func_4131(%var_4118: Tensor[(11232), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(11232), float32], Tensor[(12, 16, 2), float32]) {
  %698 = @func_1518() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %699 = cast(%var_4118, dtype="float32") /* ty=Tensor[(11232), float32] */;
  %700 = reshape(%699, newshape=[11232]) /* ty=Tensor[(11232), float32] */;
  %701 = @func_3671(%700) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(11232), int64]) */;
  %702 = %701.0;
  %703 = @func_2414() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %704 = %703.0;
  %705 = cast(%704, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  %706 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%702, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %709 = %698.0;
  %710 = divide(%707, %708) /* ty=Tensor[(12, 16, 2), float32] */;
  (%709, %var_4118, %710)
}

def @func_2386(%var_2366: Tensor[(8, 14, 10), float64]) -> (Tensor[(8, 14, 10), float32], Tensor[(8, 14, 10), float64]) {
  %711 = cast(%var_2366, dtype="float64") /* ty=Tensor[(8, 14, 10), float64] */;
  %712 = log10(%711) /* ty=Tensor[(8, 14, 10), float64] */;
  %713 = cast(%var_2366, dtype="float32") /* ty=Tensor[(8, 14, 10), float32] */;
  %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%712, dtype="float32") /* ty=Tensor[(8, 14, 10), float32] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %717 = cast(%var_2366, dtype="float64") /* ty=Tensor[(8, 14, 10), float64] */;
  %718 = floor_mod(%715, %716) /* ty=Tensor[(8, 14, 10), float32] */;
  %719 = cos(%717) /* ty=Tensor[(8, 14, 10), float64] */;
  (%718, %719)
}

def @func_4484() -> Tensor[(12, 16, 2), bool] {
  @func_367() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_834() -> (Tensor[(12, 16, 2), bool],) {
  %720 = @func_225() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %721 = %720.0;
  (%721,)
}

def @func_1075() -> (Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) {
  %722 = cast(meta[relay.Constant][36] /* ty=Tensor[(9, 3, 10), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
  %723 = log2(%722) /* ty=Tensor[(9, 3, 10), float32] */;
  %724 = @func_426() /* ty=Tensor[(12, 16, 2), bool] */;
  (%723, %724)
}

def @func_2636() -> Tensor[(12, 16, 2), float64] {
  @func_1678() /* ty=Tensor[(12, 16, 2), float64] */
}

def @func_3423(%var_3403: Tensor[(8, 15, 11), float64]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(8, 15, 11), uint64], Tensor[(12, 16, 2), float32]) {
  %725 = @func_1518() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %726 = @func_918() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
  %727 = @func_1842() /* ty=Tensor[(8, 15, 11), float64] */;
  %728 = cast(%var_3403, dtype="uint64") /* ty=Tensor[(8, 15, 11), uint64] */;
  %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%727, dtype="uint64") /* ty=Tensor[(8, 15, 11), uint64] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %732 = @func_2801() /* ty=(Tensor[(12, 16, 2), float32],) */;
  %733 = %725.0;
  %734 = %726.0;
  %735 = subtract(%730, %731) /* ty=Tensor[(8, 15, 11), uint64] */;
  %736 = %732.0;
  (%733, %734, %735, %736)
}

def @func_153() -> (Tensor[(12, 16, 2), bool],) {
  %737 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  %738 = atan(%737) /* ty=Tensor[(12, 16, 2), float32] */;
  %739 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 16, 2), float32] */, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%738, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %743 = less_equal(%741, %742) /* ty=Tensor[(12, 16, 2), bool] */;
  (%743,)
}

def @func_1637() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %744 = @func_1357() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %745 = @func_523() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %746 = %744.0;
  %747 = @func_367() /* ty=Tensor[(12, 16, 2), bool] */;
  %748 = %745.0;
  (%746, %747, %748)
}

def @func_1299() -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), int32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(210), uint32], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
  %749 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %750 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %751 = %749.0;
  %752 = cast(%751, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %753 = reshape(%752, newshape=[12, 16, 2]) /* ty=Tensor[(12, 16, 2), bool] */;
  %754 = @func_565(%753) /* ty=(Tensor[(12, 16, 2), int32],) */;
  %755 = cast(meta[relay.Constant][38] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %756 = reshape(%755, newshape=[2, 7, 15]) /* ty=Tensor[(2, 7, 15), uint32] */;
  %757 = @func_819(%756) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(2, 7, 15), float32]) */;
  %758 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %759 = %758.0;
  %760 = cast(%759, dtype="float64") /* ty=Tensor[(12, 16, 2), float64] */;
  %761 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %762 = %750.0;
  %763 = %754.0;
  %764 = @func_367() /* ty=Tensor[(12, 16, 2), bool] */;
  %765 = %757.0;
  %766 = exp(%760) /* ty=Tensor[(12, 16, 2), float64] */;
  %767 = %761.0;
  (%751, %762, %763, %764, %765, meta[relay.Constant][38] /* ty=Tensor[(210), uint32] */, %766, %767)
}

def @func_2587() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
  %768 = @func_1518() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %769 = @func_1084() /* ty=(Tensor[(12, 16, 2), float64],) */;
  %770 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %771 = @func_426() /* ty=Tensor[(12, 16, 2), bool] */;
  %772 = %768.0;
  %773 = %769.0;
  %774 = %770.1;
  (%771, %772, %773, %774)
}

def @func_6755() -> Tensor[(12, 16, 2), float32] {
  %775 = @func_3110() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %775.1
}

def @func_184(%var_165: Tensor[(12, 16, 2), bool]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int16], Tensor[(12, 16, 2), bool]) {
  %776 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %777 = %776.0;
  %778 = cast(%var_165, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %779 = shape_of(%777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%777, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %782 = cast(%var_165, dtype="int16") /* ty=Tensor[(12, 16, 2), int16] */;
  %783 = shape_of(%777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%777, dtype="int16") /* ty=Tensor[(12, 16, 2), int16] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %786 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %787 = less(%780, %781) /* ty=Tensor[(12, 16, 2), bool] */;
  %788 = left_shift(%784, %785) /* ty=Tensor[(12, 16, 2), int16] */;
  %789 = %786.0;
  (%787, %788, %789)
}

def @func_5294(%var_5244: Tensor[(210), uint32]) -> (Tensor[(12, 16, 2), bool], Tensor[(210), uint32], Tensor[(12, 16, 2), bool], Tensor[(16), float32], Tensor[(2, 16, 8), float64], Tensor[(2, 16, 8), float64]) {
  %790 = cast(%var_5244, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %791 = reshape(%790, newshape=[2, 7, 15]) /* ty=Tensor[(2, 7, 15), uint32] */;
  %792 = @func_819(%791) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(2, 7, 15), float32]) */;
  %793 = cast(meta[relay.Constant][39] /* ty=Tensor[(16), float32] */, dtype="float32") /* ty=Tensor[(16), float32] */;
  %794 = reshape(%793, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
  %795 = @func_4425(%794) /* ty=(Tensor[(4, 4), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %796 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 16, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
  %797 = sinh(%796) /* ty=Tensor[(2, 16, 8), float32] */;
  %798 = cast(%797, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
  %799 = cast(%797, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
  %800 = %792.3;
  %801 = %795.1;
  %802 = rsqrt(%798) /* ty=Tensor[(2, 16, 8), float64] */;
  %803 = erf(%799) /* ty=Tensor[(2, 16, 8), float64] */;
  (%800, %var_5244, %801, meta[relay.Constant][39] /* ty=Tensor[(16), float32] */, %802, %803)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4395() -> (Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), bool], Tensor[(4, 220), int32], Tensor[(16, 9, 9), uint32], Tensor[(16, 9, 9), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  @func_4393() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), bool], Tensor[(4, 220), int32], Tensor[(16, 9, 9), uint32], Tensor[(16, 9, 9), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */
}

def @func_4074() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(8, 14, 10), float64], Tensor[(1120), float64], Tensor[(12, 16, 2), bool], Tensor[(2, 440), int32]) {
  @func_4072() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(8, 14, 10), float64], Tensor[(1120), float64], Tensor[(12, 16, 2), bool], Tensor[(2, 440), int32]) */
}

def @func_1359() -> (Tensor[(12, 16, 2), bool],) {
  @func_1357() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_1639() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  @func_1637() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */
}

def @func_3453() -> (Tensor[(9, 3, 10), float32],) {
  @func_3451() /* ty=(Tensor[(9, 3, 10), float32],) */
}

def @func_1076() -> (Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) {
  %3 = fn () -> (Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 3, 10), float32] */, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
    %1 = log2(%0) /* ty=Tensor[(9, 3, 10), float32] */;
    %2 = @func_426() /* ty=Tensor[(12, 16, 2), bool] */;
    (%1, %2)
  };
  %3() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) */
}

def @func_5580() -> Tensor[(12, 16, 2), bool] {
  %4 = @func_2499() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %4.0
}

def @func_6862() -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) {
  %10 = fn () -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) {
    %5 = @func_5836() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
    %6 = @func_2980() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */;
    %7 = %5.0;
    %8 = @func_304() /* ty=Tensor[(12, 16, 2), bool] */;
    %9 = %6.1;
    (%7, %8, %9)
  };
  %10() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */
}

def @func_5792() -> (Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), float64]) {
  %17 = fn () -> (Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), float64]) {
    %11 = @func_543() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %12 = @func_1862() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), float32]) */;
    %13 = %12.0;
    %14 = cast(%13, dtype="float64") /* ty=Tensor[(9, 3, 10), float64] */;
    %15 = %11.0;
    %16 = cos(%14) /* ty=Tensor[(9, 3, 10), float64] */;
    (%15, %16)
  };
  %17() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), float64]) */
}

def @func_1593() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) {
  %33 = fn () -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) {
    %18 = @func_642() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */;
    %19 = @func_304() /* ty=Tensor[(12, 16, 2), bool] */;
    %20 = @func_713() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %21 = %20.1;
    %22 = cast(%21, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
    %23 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
    %24 = cast(%19, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
    %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %26 = equal(%24, %25) /* ty=Tensor[(12, 16, 2), bool] */;
    %27 = cast(%26, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
    %28 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
    %29 = cast(%19, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
    %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %31 = %18.5;
    %32 = mod(%29, %30) /* ty=Tensor[(12, 16, 2), float32] */;
    (%31, %32)
  };
  %33() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */
}

def @func_1086() -> (Tensor[(12, 16, 2), float64],) {
  @func_1084() /* ty=(Tensor[(12, 16, 2), float64],) */
}

def @func_2037() -> (Tensor[(12, 16, 2), bool], Tensor[(?, 160), int16]) {
  %49 = fn () -> (Tensor[(12, 16, 2), bool], Tensor[(?, 160), int16]) {
    %34 = @func_1357() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 160), uint16] */, dtype="float32") /* ty=Tensor[(1, 160), float32] */;
    %36 = atan(%35) /* ty=Tensor[(1, 160), float32] */;
    %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 160), uint16] */, dtype="uint16") /* ty=Tensor[(1, 160), uint16] */;
    %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 160), uint16] */, dtype="uint16") /* ty=Tensor[(1, 160), uint16] */;
    %39 = reshape(%37, newshape=[2, 16, 5]) /* ty=Tensor[(2, 16, 5), uint16] */;
    %40 = reshape(%38, newshape=[2, 16, 5]) /* ty=Tensor[(2, 16, 5), uint16] */;
    %41 = @func_1959(%39, %40) /* ty=(Tensor[(2, 16, 5), uint16],) */;
    %42 = %41.0;
    %43 = cast(%42, dtype="int16") /* ty=Tensor[(2, 16, 5), int16] */;
    %44 = shape_of(%36, dtype="int32") /* ty=Tensor[(2), int32] */;
    %45 = cast(%36, dtype="int16") /* ty=Tensor[(1, 160), int16] */;
    %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %47 = %34.0;
    %48 = left_shift(%45, %46) /* ty=Tensor[(?, 160), int16] */;
    (%47, %48)
  };
  %49() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(?, 160), int16]) */
}

def @func_919() -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
  %52 = fn () -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
    %50 = @func_404() /* ty=Tensor[(12, 16, 2), float64] */;
    %51 = @func_426() /* ty=Tensor[(12, 16, 2), bool] */;
    (%50, %51)
  };
  %52() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */
}

def @func_5006() -> (Tensor[(12, 16, 2), bool],) {
  @func_5004() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_821(%var_820: Tensor[(2, 7, 15), uint32]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(2, 7, 15), float32]) {
  %81 = fn (%var_746: Tensor[(2, 7, 15), uint32]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(2, 7, 15), float32]) {
    %53 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %54 = @func_543() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %55 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %56 = @func_523() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
    %57 = cast(%var_746, dtype="uint32") /* ty=Tensor[(2, 7, 15), uint32] */;
    %58 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(2, 7, 15), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 7, 15), uint32] */, dtype="uint32") /* ty=Tensor[(2, 7, 15), uint32] */;
    %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %61 = multiply(%59, %60) /* ty=Tensor[(2, 7, 15), uint32] */;
    %62 = cast(%61, dtype="float64") /* ty=Tensor[(2, 7, 15), float64] */;
    %63 = tan(%62) /* ty=Tensor[(2, 7, 15), float64] */;
    %64 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 7, 15), uint32] */, dtype="float32") /* ty=Tensor[(2, 7, 15), float32] */;
    %65 = acosh(%64) /* ty=Tensor[(2, 7, 15), float32] */;
    %66 = cast(%65, dtype="bool") /* ty=Tensor[(2, 7, 15), bool] */;
    %67 = shape_of(%var_746, dtype="int32") /* ty=Tensor[(3), int32] */;
    %68 = cast(%var_746, dtype="bool") /* ty=Tensor[(2, 7, 15), bool] */;
    %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %70 = greater_equal(%68, %69) /* ty=Tensor[(2, 7, 15), bool] */;
    %71 = cast(%70, dtype="float32") /* ty=Tensor[(2, 7, 15), float32] */;
    %72 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%63, dtype="float32") /* ty=Tensor[(2, 7, 15), float32] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %75 = %53.0;
    %76 = %54.0;
    %77 = @func_433() /* ty=Tensor[(12, 16, 2), bool] */;
    %78 = %55.1;
    %79 = %56.1;
    %80 = divide(%73, %74) /* ty=Tensor[(2, 7, 15), float32] */;
    (%75, %76, %77, %78, %79, %80)
  };
  %81(%var_820) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(2, 7, 15), float32]) */
}

def @func_4428(%var_4426: Tensor[(4, 4), float32]) -> (Tensor[(4, 4), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  @func_4425(%var_4426) /* ty=(Tensor[(4, 4), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */
}

def @func_4131(%var_4118: Tensor[(11232), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(11232), float32], Tensor[(12, 16, 2), float32]) {
  %82 = @func_1518() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %83 = cast(%var_4118, dtype="float32") /* ty=Tensor[(11232), float32] */;
  %84 = reshape(%83, newshape=[11232]) /* ty=Tensor[(11232), float32] */;
  %85 = @func_3671(%84) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(11232), int64]) */;
  %86 = %85.0;
  %87 = @func_2414() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %88 = %87.0;
  %89 = cast(%88, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  %90 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%86, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %93 = %82.0;
  %94 = divide(%91, %92) /* ty=Tensor[(12, 16, 2), float32] */;
  (%93, %var_4118, %94)
}

def @func_2982() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) {
  @func_2980() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */
}

def @func_4583(%var_4582: Tensor[(9, 4, 12), float32]) -> Tensor[(9, 4, 12), float32] {
  %99 = fn (%var_4576: Tensor[(9, 4, 12), float32]) -> Tensor[(9, 4, 12), float32] {
    %95 = cast(%var_4576, dtype="float32") /* ty=Tensor[(9, 4, 12), float32] */;
    %96 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(9, 4, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %97 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 4, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 4, 12), float32] */;
    %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%97, %98) /* ty=Tensor[(9, 4, 12), float32] */
  };
  %99(%var_4582) /* ty=Tensor[(9, 4, 12), float32] */
}

def @func_5092() -> (Tensor[(12, 16, 2), bool],) {
  %100 = @func_1938() /* ty=Tensor[(12, 16, 2), bool] */;
  (%100,)
}

def @func_3243() -> (Tensor[(12, 16, 2), bool],) {
  %103 = fn () -> (Tensor[(12, 16, 2), bool],) {
    %101 = @func_2211() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64]) */;
    %102 = %101.0;
    (%102,)
  };
  %103() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_6678() -> (Tensor[(12, 16, 2), float32],) {
  @func_6676() /* ty=(Tensor[(12, 16, 2), float32],) */
}

def @func_1939() -> Tensor[(12, 16, 2), bool] {
  %105 = fn () -> Tensor[(12, 16, 2), bool] {
    %104 = @func_834() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %104.0
  };
  %105() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_1133(%var_1115: Tensor[(12, 16, 2), int32]) -> (Tensor[(12, 16, 2), bool],) {
  %106 = @func_642() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */;
  %107 = %106.6;
  %108 = cast(%var_1115, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %112 = not_equal(%110, %111) /* ty=Tensor[(12, 16, 2), bool] */;
  (%112,)
}

def @func_4920(%var_4917: Tensor[(864), float32], %var_4918: Tensor[(12, 8, 9), float32], %var_4919: Tensor[(2, 7, 15), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(864), float32], Tensor[(12, 8, 9), float64], Tensor[(12, 8, 9), float64], Tensor[(360), float32], Tensor[(2, 7, 15), bool], Tensor[(12, 8, 9), float32]) {
  @func_4915(%var_4917, %var_4918, %var_4919) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(864), float32], Tensor[(12, 8, 9), float64], Tensor[(12, 8, 9), float64], Tensor[(360), float32], Tensor[(2, 7, 15), bool], Tensor[(12, 8, 9), float32]) */
}

def @func_5294(%var_5244: Tensor[(210), uint32]) -> (Tensor[(12, 16, 2), bool], Tensor[(210), uint32], Tensor[(12, 16, 2), bool], Tensor[(16), float32], Tensor[(2, 16, 8), float64], Tensor[(2, 16, 8), float64]) {
  %113 = cast(%var_5244, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %114 = reshape(%113, newshape=[2, 7, 15]) /* ty=Tensor[(2, 7, 15), uint32] */;
  %115 = @func_819(%114) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(2, 7, 15), float32]) */;
  %116 = cast(meta[relay.Constant][4] /* ty=Tensor[(16), float32] */, dtype="float32") /* ty=Tensor[(16), float32] */;
  %117 = reshape(%116, newshape=[4, 4]) /* ty=Tensor[(4, 4), float32] */;
  %118 = @func_4425(%117) /* ty=(Tensor[(4, 4), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %119 = cast(meta[relay.Constant][5] /* ty=Tensor[(2, 16, 8), float32] */, dtype="float32") /* ty=Tensor[(2, 16, 8), float32] */;
  %120 = sinh(%119) /* ty=Tensor[(2, 16, 8), float32] */;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
  %122 = cast(%120, dtype="float64") /* ty=Tensor[(2, 16, 8), float64] */;
  %123 = %115.3;
  %124 = %118.1;
  %125 = rsqrt(%121) /* ty=Tensor[(2, 16, 8), float64] */;
  %126 = erf(%122) /* ty=Tensor[(2, 16, 8), float64] */;
  (%123, %var_5244, %124, meta[relay.Constant][4] /* ty=Tensor[(16), float32] */, %125, %126)
}

def @func_154() -> (Tensor[(12, 16, 2), bool],) {
  %134 = fn () -> (Tensor[(12, 16, 2), bool],) {
    %127 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
    %128 = atan(%127) /* ty=Tensor[(12, 16, 2), float32] */;
    %129 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 16, 2), float32] */, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
    %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %131 = cast(%128, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %133 = less_equal(%131, %132) /* ty=Tensor[(12, 16, 2), bool] */;
    (%133,)
  };
  %134() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_1518() -> (Tensor[(12, 16, 2), bool],) {
  %135 = @func_713() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %136 = %135.1;
  (%136,)
}

def @func_544() -> (Tensor[(12, 16, 2), bool],) {
  %139 = fn () -> (Tensor[(12, 16, 2), bool],) {
    %137 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %138 = %137.1;
    (%138,)
  };
  %139() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_836() -> (Tensor[(12, 16, 2), bool],) {
  @func_834() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_2637() -> Tensor[(12, 16, 2), float64] {
  %140 = fn () -> Tensor[(12, 16, 2), float64] {
    @func_1678() /* ty=Tensor[(12, 16, 2), float64] */
  };
  %140() /* ty=Tensor[(12, 16, 2), float64] */
}

def @func_2609() -> (Tensor[(12, 16, 2), bool],) {
  %141 = @func_543() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %142 = %141.0;
  (%142,)
}

def @func_4740() -> (Tensor[(12, 16, 2), bool],) {
  %143 = @func_2609() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %144 = %143.0;
  (%144,)
}

def @func_3313() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
  @func_3311() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */
}

def @func_5582() -> Tensor[(12, 16, 2), bool] {
  @func_5580() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_5184(%var_5166: Tensor[(7, 4, 16), int8]) -> (Tensor[(7, 4, 16), float64], Tensor[(7, 4, 16), float32]) {
  %145 = cast(%var_5166, dtype="float64") /* ty=Tensor[(7, 4, 16), float64] */;
  %146 = cast(%var_5166, dtype="int8") /* ty=Tensor[(7, 4, 16), int8] */;
  %147 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(7, 4, 16), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 4, 16), int8] */, dtype="int8") /* ty=Tensor[(7, 4, 16), int8] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %150 = bitwise_and(%148, %149) /* ty=Tensor[(7, 4, 16), int8] */;
  %151 = cast(%150, dtype="float32") /* ty=Tensor[(7, 4, 16), float32] */;
  %152 = atan(%145) /* ty=Tensor[(7, 4, 16), float64] */;
  %153 = asinh(%151) /* ty=Tensor[(7, 4, 16), float32] */;
  (%152, %153)
}

def @func_5038(%var_5033: Tensor[(2, 12, 16), float32]) -> (Tensor[(2, 12, 16), float32], Tensor[(12, 16, 2), float32]) {
  %154 = cast(%var_5033, dtype="float32") /* ty=Tensor[(2, 12, 16), float32] */;
  %155 = @func_3110() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %156 = erf(%154) /* ty=Tensor[(2, 12, 16), float32] */;
  %157 = %155.1;
  (%156, %157)
}

def @func_2066() -> (Tensor[(8, 15, 11), float64],) {
  @func_2064() /* ty=(Tensor[(8, 15, 11), float64],) */
}

def @func_6696() -> Tensor[(12, 16, 2), bool] {
  %158 = @func_2587() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
  %158.3
}

def @func_3311() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
  %159 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %160 = @func_1592() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %161 = @func_225() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %162 = %159.2;
  %163 = %160.1;
  %164 = @func_2636() /* ty=Tensor[(12, 16, 2), float64] */;
  %165 = %161.0;
  (%162, %163, %164, %165)
}

def @func_405() -> Tensor[(12, 16, 2), float64] {
  %168 = fn () -> Tensor[(12, 16, 2), float64] {
    %166 = @func_367() /* ty=Tensor[(12, 16, 2), bool] */;
    %167 = cast(%166, dtype="float64") /* ty=Tensor[(12, 16, 2), float64] */;
    log2(%167) /* ty=Tensor[(12, 16, 2), float64] */
  };
  %168() /* ty=Tensor[(12, 16, 2), float64] */
}

def @func_3907() -> Tensor[(12, 16, 2), bool] {
  %170 = fn () -> Tensor[(12, 16, 2), bool] {
    %169 = @func_642() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */;
    %169.0
  };
  %170() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_3110() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) {
  %171 = @func_2587() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
  %172 = @func_3055() /* ty=(Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64]) */;
  %173 = %171.0;
  %174 = %172.0;
  (%173, %174)
}

def @func_434() -> Tensor[(12, 16, 2), bool] {
  %175 = fn () -> Tensor[(12, 16, 2), bool] {
    @func_426() /* ty=Tensor[(12, 16, 2), bool] */
  };
  %175() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_5865() -> Tensor[(12, 16, 2), bool] {
  @func_5863() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_6217() -> (Tensor[(16, 160), int64], Tensor[(12, 16, 2), bool], Tensor[(16, 160), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %176 = @func_2036() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(?, 160), int16]) */;
  %177 = %176.1;
  %178 = cast(%177, dtype="int64") /* ty=Tensor[(?, 160), int64] */;
  %179 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 160), int16] */, dtype="int64") /* ty=Tensor[(16, 160), int64] */;
  %180 = @func_3086() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32], Tensor[(12, 16, 2), bool]) */;
  %181 = cast(%177, dtype="uint64") /* ty=Tensor[(?, 160), uint64] */;
  %182 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 160), int16] */, dtype="uint64") /* ty=Tensor[(16, 160), uint64] */;
  %183 = add(%181, %182) /* ty=Tensor[(16, 160), uint64] */;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(16, 160), float32] */;
  %185 = sigmoid(%184) /* ty=Tensor[(16, 160), float32] */;
  %186 = cast(%185, dtype="float64") /* ty=Tensor[(16, 160), float64] */;
  %187 = @func_3687() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %188 = @func_1518() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %189 = multiply(%178, %179) /* ty=Tensor[(16, 160), int64] */;
  %190 = %180.0;
  %191 = tan(%186) /* ty=Tensor[(16, 160), float64] */;
  %192 = %187.0;
  %193 = %188.0;
  (%189, %190, %191, %192, %193)
}

def @func_2611() -> (Tensor[(12, 16, 2), bool],) {
  @func_2609() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_6509() -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), uint8]) {
  @func_6507() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), uint8]) */
}

def @func_524() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) {
  %211 = fn () -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) {
    %194 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %195 = %194.0;
    %196 = cast(%195, dtype="float64") /* ty=Tensor[(12, 16, 2), float64] */;
    %197 = sigmoid(%196) /* ty=Tensor[(12, 16, 2), float64] */;
    %198 = cast(%197, dtype="int8") /* ty=Tensor[(12, 16, 2), int8] */;
    %199 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
    %200 = cast(%195, dtype="int8") /* ty=Tensor[(12, 16, 2), int8] */;
    %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %202 = minimum(%200, %201) /* ty=Tensor[(12, 16, 2), int8] */;
    %203 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %204 = %203.2;
    %205 = cast(%204, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
    %206 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
    %207 = cast(%202, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %209 = @func_304() /* ty=Tensor[(12, 16, 2), bool] */;
    %210 = floor_mod(%207, %208) /* ty=Tensor[(12, 16, 2), float32] */;
    (%209, %210)
  };
  %211() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */
}

def @func_4627() -> Tensor[(12, 16, 2), bool] {
  %213 = fn () -> Tensor[(12, 16, 2), bool] {
    %212 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %212.2
  };
  %213() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_6755() -> Tensor[(12, 16, 2), float32] {
  %214 = @func_3110() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %214.1
}

def @func_6266(%var_6264: Tensor[(3, 8, 9), float32]) -> (Tensor[(3, 8, 9), float32],) {
  @func_6263(%var_6264) /* ty=(Tensor[(3, 8, 9), float32],) */
}

def @func_6519() -> Tensor[(12, 16, 2), bool] {
  %216 = fn () -> Tensor[(12, 16, 2), bool] {
    %215 = @func_1385() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %215.0
  };
  %216() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_3580(%var_3576: float64, %var_3577: Tensor[(420), float64], %var_3578: Tensor[(1320), float64], %var_3579: Tensor[(80, 2), float32]) -> (Tensor[(11, 3, 11), float64], Tensor[(5, 14, 6), float64], Tensor[(420), float64], Tensor[(12, 16, 2), bool], Tensor[(240), int8], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(1320), float64], Tensor[(80, 2), uint32]) {
  @func_3574(%var_3576, %var_3577, %var_3578, %var_3579) /* ty=(Tensor[(11, 3, 11), float64], Tensor[(5, 14, 6), float64], Tensor[(420), float64], Tensor[(12, 16, 2), bool], Tensor[(240), int8], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(1320), float64], Tensor[(80, 2), uint32]) */
}

def @func_5380() -> (Tensor[(12, 16, 2), bool],) {
  %219 = fn () -> (Tensor[(12, 16, 2), bool],) {
    %217 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %218 = %217.1;
    (%218,)
  };
  %219() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_2324(%var_2315: Tensor[(7, 9, 14), uint16]) -> (Tensor[(7, 9, 14), bool],) {
  %220 = cast(%var_2315, dtype="bool") /* ty=Tensor[(7, 9, 14), bool] */;
  %221 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(7, 9, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 9, 14), uint16] */, dtype="bool") /* ty=Tensor[(7, 9, 14), bool] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %224 = equal(%222, %223) /* ty=Tensor[(7, 9, 14), bool] */;
  (%224,)
}

def @func_5555() -> Tensor[(12, 16, 2), bool] {
  %225 = fn () -> Tensor[(12, 16, 2), bool] {
    @func_4201() /* ty=Tensor[(12, 16, 2), bool] */
  };
  %225() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_1386() -> (Tensor[(12, 16, 2), bool],) {
  %228 = fn () -> (Tensor[(12, 16, 2), bool],) {
    %226 = @func_543() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %227 = %226.0;
    (%227,)
  };
  %228() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_1301() -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), int32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(210), uint32], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
  @func_1299() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), int32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(210), uint32], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */
}

def @func_2098() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %231 = fn () -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
    %229 = @func_1938() /* ty=Tensor[(12, 16, 2), bool] */;
    %230 = @func_433() /* ty=Tensor[(12, 16, 2), bool] */;
    (%229, %230)
  };
  %231() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */
}

def @func_5004() -> (Tensor[(12, 16, 2), bool],) {
  %232 = @func_2499() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %233 = %232.0;
  (%233,)
}

def @func_226() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %238 = fn () -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
    %234 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %235 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %236 = %234.0;
    %237 = %235.0;
    (%236, %237)
  };
  %238() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */
}

def @func_643() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) {
  %256 = fn () -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) {
    %239 = @func_523() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
    %240 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %241 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %242 = @func_433() /* ty=Tensor[(12, 16, 2), bool] */;
    %243 = cast(%242, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
    %244 = tan(%243) /* ty=Tensor[(12, 16, 2), float32] */;
    %245 = cast(%244, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
    %246 = cast(%242, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
    %247 = reshape(%246, newshape=[12, 16, 2]) /* ty=Tensor[(12, 16, 2), bool] */;
    %248 = @func_565(%247) /* ty=(Tensor[(12, 16, 2), int32],) */;
    %249 = @func_304() /* ty=Tensor[(12, 16, 2), bool] */;
    %250 = %239.1;
    %251 = %240.0;
    %252 = %241.0;
    %253 = cosh(%245) /* ty=Tensor[(12, 16, 2), float32] */;
    %254 = @func_426() /* ty=Tensor[(12, 16, 2), bool] */;
    %255 = %248.0;
    (%249, %250, %251, %252, %253, %254, %255)
  };
  %256() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */
}

def @func_5122(%var_5120: Tensor[(16, 2, 8), float32], %var_5121: Tensor[(16, 2, 8), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(16, 2, 8), int32]) {
  @func_5118(%var_5120, %var_5121) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(16, 2, 8), int32]) */
}

def @func_1010(%var_1009: Tensor[(5, 14, 6), float64]) -> (Tensor[(5, 14, 6), float64],) {
  %259 = fn (%var_1002: Tensor[(5, 14, 6), float64]) -> (Tensor[(5, 14, 6), float64],) {
    %257 = cast(%var_1002, dtype="float64") /* ty=Tensor[(5, 14, 6), float64] */;
    %258 = log2(%257) /* ty=Tensor[(5, 14, 6), float64] */;
    (%258,)
  };
  %259(%var_1009) /* ty=(Tensor[(5, 14, 6), float64],) */
}

def @func_306() -> Tensor[(12, 16, 2), bool] {
  @func_304() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_6795() -> Tensor[(8, 15, 11), float64] {
  @func_6793() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_4095() -> Tensor[(8, 15, 11), float64] {
  @func_4093() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_4203() -> Tensor[(12, 16, 2), bool] {
  @func_4201() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_2854() -> (Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(5, 14, 6), float64], Tensor[(420), float64], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
  %276 = fn () -> (Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(5, 14, 6), float64], Tensor[(420), float64], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
    %260 = @func_1862() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), float32]) */;
    %261 = @func_523() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
    %262 = cast(meta[relay.Constant][10] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %263 = reshape(%262, newshape=[5, 14, 6]) /* ty=Tensor[(5, 14, 6), float64] */;
    %264 = @func_1008(%263) /* ty=(Tensor[(5, 14, 6), float64],) */;
    %265 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %266 = %265.1;
    %267 = cast(%266, dtype="float64") /* ty=Tensor[(12, 16, 2), float64] */;
    %268 = sqrt(%267) /* ty=Tensor[(12, 16, 2), float64] */;
    %269 = cast(%268, dtype="int32") /* ty=Tensor[(12, 16, 2), int32] */;
    %270 = reshape(%269, newshape=[12, 16, 2]) /* ty=Tensor[(12, 16, 2), int32] */;
    %271 = @func_1133(%270) /* ty=(Tensor[(12, 16, 2), bool],) */;
    %272 = %260.1;
    %273 = %261.0;
    %274 = %264.0;
    %275 = %271.0;
    (%272, %273, %274, meta[relay.Constant][10] /* ty=Tensor[(420), float64] */, %268, %275)
  };
  %276() /* ty=(Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(5, 14, 6), float64], Tensor[(420), float64], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */
}

def @func_455() -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %283 = fn () -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
    %277 = @func_404() /* ty=Tensor[(12, 16, 2), float64] */;
    %278 = cast(%277, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
    %279 = reshape(%278, newshape=[12, 16, 2]) /* ty=Tensor[(12, 16, 2), bool] */;
    %280 = @func_184(%279) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int16], Tensor[(12, 16, 2), bool]) */;
    %281 = @func_433() /* ty=Tensor[(12, 16, 2), bool] */;
    %282 = %280.0;
    (%277, %281, %282)
  };
  %283() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */
}

def @func_1499(%var_1486: Tensor[(864, 13), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 8, 9), float32], Tensor[(16, 5, 11), float64], Tensor[(4, 220), int32], Tensor[(864, 13), int16], Tensor[(12, 16, 2), bool]) {
  %284 = @func_834() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %285 = cast(meta[relay.Constant][11] /* ty=Tensor[(864, 1), float32] */, dtype="float32") /* ty=Tensor[(864, 1), float32] */;
  %286 = reshape(%285, newshape=[12, 8, 9]) /* ty=Tensor[(12, 8, 9), float32] */;
  %287 = @func_261(%286) /* ty=(Tensor[(12, 8, 9), float32],) */;
  %288 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 220), int32] */, dtype="int32") /* ty=Tensor[(4, 220), int32] */;
  %289 = reshape(%288, newshape=[16, 5, 11]) /* ty=Tensor[(16, 5, 11), int32] */;
  %290 = @func_1439(%289) /* ty=(Tensor[(16, 5, 11), bool], Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), float64]) */;
  %291 = cast(meta[relay.Constant][11] /* ty=Tensor[(864, 1), float32] */, dtype="int16") /* ty=Tensor[(864, 1), int16] */;
  %292 = cast(%var_1486, dtype="int16") /* ty=Tensor[(864, 13), int16] */;
  %293 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %294 = %284.0;
  %295 = %287.0;
  %296 = %290.2;
  %297 = subtract(%291, %292) /* ty=Tensor[(864, 13), int16] */;
  %298 = %293.2;
  (%294, %295, %296, meta[relay.Constant][12] /* ty=Tensor[(4, 220), int32] */, %297, %298)
}

def @func_984() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  @func_982() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */
}

def @func_4795() -> Tensor[(12, 16, 2), float64] {
  %300 = fn () -> Tensor[(12, 16, 2), float64] {
    %299 = @func_918() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
    %299.0
  };
  %300() /* ty=Tensor[(12, 16, 2), float64] */
}

def @func_3674(%var_3672: Tensor[(11232), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(11232), int64]) {
  @func_3671(%var_3672) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(11232), int64]) */
}

def @func_426() -> Tensor[(12, 16, 2), bool] {
  %301 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %301.0
}

def @func_2388(%var_2387: Tensor[(8, 14, 10), float64]) -> (Tensor[(8, 14, 10), float32], Tensor[(8, 14, 10), float64]) {
  %311 = fn (%var_2366: Tensor[(8, 14, 10), float64]) -> (Tensor[(8, 14, 10), float32], Tensor[(8, 14, 10), float64]) {
    %302 = cast(%var_2366, dtype="float64") /* ty=Tensor[(8, 14, 10), float64] */;
    %303 = log10(%302) /* ty=Tensor[(8, 14, 10), float64] */;
    %304 = cast(%var_2366, dtype="float32") /* ty=Tensor[(8, 14, 10), float32] */;
    %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
    %306 = cast(%303, dtype="float32") /* ty=Tensor[(8, 14, 10), float32] */;
    %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %308 = cast(%var_2366, dtype="float64") /* ty=Tensor[(8, 14, 10), float64] */;
    %309 = floor_mod(%306, %307) /* ty=Tensor[(8, 14, 10), float32] */;
    %310 = cos(%308) /* ty=Tensor[(8, 14, 10), float64] */;
    (%309, %310)
  };
  %311(%var_2387) /* ty=(Tensor[(8, 14, 10), float32], Tensor[(8, 14, 10), float64]) */
}

def @func_1442(%var_1440: Tensor[(16, 5, 11), int32]) -> (Tensor[(16, 5, 11), bool], Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), float64]) {
  @func_1439(%var_1440) /* ty=(Tensor[(16, 5, 11), bool], Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), float64]) */
}

def @func_2064() -> (Tensor[(8, 15, 11), float64],) {
  %312 = @func_1842() /* ty=Tensor[(8, 15, 11), float64] */;
  (%312,)
}

def @func_1322(%var_1320: Tensor[(6, 11, 14), float32], %var_1321: Tensor[(6, 11, 14), float32]) -> Tensor[(6, 11, 14), float64] {
  @func_1318(%var_1320, %var_1321) /* ty=Tensor[(6, 11, 14), float64] */
}

def @func_2137() -> (Tensor[(12, 16, 2), float32],) {
  %313 = @func_1185() /* ty=Tensor[(12, 16, 2), bool] */;
  %314 = cast(%313, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
  %315 = log(%314) /* ty=Tensor[(12, 16, 2), float32] */;
  (%315,)
}

def @func_3795(%var_3793: Tensor[(420), float64], %var_3794: float64) -> (Tensor[(12, 16, 2), bool], Tensor[(35, 6), uint32], Tensor[(360), float32], Tensor[(5, 14, 6), float64], Tensor[(420), float64], Tensor[(12, 16, 2), bool], float64, Tensor[(160), float32], Tensor[(8, 15, 11), float32]) {
  %342 = fn (%var_3771: Tensor[(420), float64], %var_3781: float64) -> (Tensor[(12, 16, 2), bool], Tensor[(35, 6), uint32], Tensor[(360), float32], Tensor[(5, 14, 6), float64], Tensor[(420), float64], Tensor[(12, 16, 2), bool], float64, Tensor[(160), float32], Tensor[(8, 15, 11), float32]) {
    %316 = @func_918() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
    %317 = cast(meta[relay.Constant][13] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
    %318 = reshape(%317, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), float32] */;
    %319 = @func_2743(%318) /* ty=(Tensor[(12, 15, 2), float32], Tensor[(12, 15, 2), bool], Tensor[(2, 7, 15), float32], Tensor[(35, 6), uint32]) */;
    %320 = cast(%var_3771, dtype="float64") /* ty=Tensor[(420), float64] */;
    %321 = reshape(%320, newshape=[5, 14, 6]) /* ty=Tensor[(5, 14, 6), float64] */;
    %322 = @func_1008(%321) /* ty=(Tensor[(5, 14, 6), float64],) */;
    %323 = cast(%var_3781, dtype="float64") /* ty=float64 */;
    %324 = %322.0;
    %325 = cast(%324, dtype="float64") /* ty=Tensor[(5, 14, 6), float64] */;
    %326 = @func_2064() /* ty=(Tensor[(8, 15, 11), float64],) */;
    %327 = %326.0;
    %328 = cast(%327, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
    %329 = cast(meta[relay.Constant][14] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
    %330 = reshape(%323, newshape=[]) /* ty=float64 */;
    %331 = reshape(%325, newshape=[420]) /* ty=Tensor[(420), float64] */;
    %332 = reshape(%328, newshape=[1320]) /* ty=Tensor[(1320), float64] */;
    %333 = reshape(%329, newshape=[80, 2]) /* ty=Tensor[(80, 2), float32] */;
    %334 = @func_3574(%330, %331, %332, %333) /* ty=(Tensor[(11, 3, 11), float64], Tensor[(5, 14, 6), float64], Tensor[(420), float64], Tensor[(12, 16, 2), bool], Tensor[(240), int8], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(1320), float64], Tensor[(80, 2), uint32]) */;
    %335 = cast(%327, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
    %336 = acosh(%335) /* ty=Tensor[(8, 15, 11), float32] */;
    %337 = cast(%336, dtype="float32") /* ty=Tensor[(8, 15, 11), float32] */;
    %338 = %316.1;
    %339 = %319.3;
    %340 = %334.5;
    %341 = cosh(%337) /* ty=Tensor[(8, 15, 11), float32] */;
    (%338, %339, meta[relay.Constant][13] /* ty=Tensor[(360), float32] */, %324, %var_3771, %340, %var_3781, meta[relay.Constant][14] /* ty=Tensor[(160), float32] */, %341)
  };
  %342(%var_3793, %var_3794) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(35, 6), uint32], Tensor[(360), float32], Tensor[(5, 14, 6), float64], Tensor[(420), float64], Tensor[(12, 16, 2), bool], float64, Tensor[(160), float32], Tensor[(8, 15, 11), float32]) */
}

def @func_1502(%var_1500: Tensor[(864, 13), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 8, 9), float32], Tensor[(16, 5, 11), float64], Tensor[(4, 220), int32], Tensor[(864, 13), int16], Tensor[(12, 16, 2), bool]) {
  @func_1499(%var_1500) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 8, 9), float32], Tensor[(16, 5, 11), float64], Tensor[(4, 220), int32], Tensor[(864, 13), int16], Tensor[(12, 16, 2), bool]) */
}

def @func_2565(%var_2563: Tensor[(16, 16, 5), bool], %var_2564: Tensor[(16, 16, 5), bool]) -> (Tensor[(16, 16, 5), bool],) {
  %348 = fn (%var_2556: Tensor[(16, 16, 5), bool], %var_2557: Tensor[(16, 16, 5), bool]) -> (Tensor[(16, 16, 5), bool],) {
    %343 = cast(%var_2557, dtype="bool") /* ty=Tensor[(16, 16, 5), bool] */;
    %344 = shape_of(%var_2556, dtype="int32") /* ty=Tensor[(3), int32] */;
    %345 = cast(%var_2556, dtype="bool") /* ty=Tensor[(16, 16, 5), bool] */;
    %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %347 = logical_or(%345, %346) /* ty=Tensor[(16, 16, 5), bool] */;
    (%347,)
  };
  %348(%var_2563, %var_2564) /* ty=(Tensor[(16, 16, 5), bool],) */
}

def @func_5757(%var_5723: Tensor[(8, 15, 11), float64]) -> (Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), float32], Tensor[(8, 15, 11), uint32], Tensor[(4, 220), int32], Tensor[(11232), float32]) {
  %349 = @func_2609() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %350 = @func_4775() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) */;
  %351 = @func_4093() /* ty=Tensor[(8, 15, 11), float64] */;
  %352 = cast(%var_5723, dtype="uint32") /* ty=Tensor[(8, 15, 11), uint32] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="uint32") /* ty=Tensor[(8, 15, 11), uint32] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %356 = cast(meta[relay.Constant][15] /* ty=Tensor[(11232), float32] */, dtype="float32") /* ty=Tensor[(11232), float32] */;
  %357 = reshape(%356, newshape=[864, 13]) /* ty=Tensor[(864, 13), float32] */;
  %358 = @func_1499(%357) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 8, 9), float32], Tensor[(16, 5, 11), float64], Tensor[(4, 220), int32], Tensor[(864, 13), int16], Tensor[(12, 16, 2), bool]) */;
  %359 = %349.0;
  %360 = %350.0;
  %361 = bitwise_and(%354, %355) /* ty=Tensor[(8, 15, 11), uint32] */;
  %362 = %358.3;
  (%359, %360, %361, %362, meta[relay.Constant][15] /* ty=Tensor[(11232), float32] */)
}

def @func_4093() -> Tensor[(8, 15, 11), float64] {
  @func_1842() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_1679() -> Tensor[(12, 16, 2), float64] {
  %368 = fn () -> Tensor[(12, 16, 2), float64] {
    %363 = @func_1084() /* ty=(Tensor[(12, 16, 2), float64],) */;
    %364 = %363.0;
    %365 = cast(%364, dtype="float32") /* ty=Tensor[(12, 16, 2), float32] */;
    %366 = acos(%365) /* ty=Tensor[(12, 16, 2), float32] */;
    %367 = cast(%366, dtype="float64") /* ty=Tensor[(12, 16, 2), float64] */;
    log10(%367) /* ty=Tensor[(12, 16, 2), float64] */
  };
  %368() /* ty=Tensor[(12, 16, 2), float64] */
}

def @func_2416() -> (Tensor[(12, 16, 2), bool],) {
  @func_2414() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_6120() -> (Tensor[(12, 16, 2), float32],) {
  @func_6118() /* ty=(Tensor[(12, 16, 2), float32],) */
}

def @func_2743(%var_2722: Tensor[(12, 15, 2), float32]) -> (Tensor[(12, 15, 2), float32], Tensor[(12, 15, 2), bool], Tensor[(2, 7, 15), float32], Tensor[(35, 6), uint32]) {
  %369 = cast(%var_2722, dtype="float32") /* ty=Tensor[(12, 15, 2), float32] */;
  %370 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(12, 15, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 15, 2), float32] */, dtype="float32") /* ty=Tensor[(12, 15, 2), float32] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %373 = cast(%var_2722, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
  %374 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(12, 15, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 15, 2), float32] */, dtype="bool") /* ty=Tensor[(12, 15, 2), bool] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %377 = cast(meta[relay.Constant][17] /* ty=Tensor[(35, 6), uint32] */, dtype="uint32") /* ty=Tensor[(35, 6), uint32] */;
  %378 = reshape(%377, newshape=[2, 7, 15]) /* ty=Tensor[(2, 7, 15), uint32] */;
  %379 = @func_819(%378) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(2, 7, 15), float32]) */;
  %380 = mod(%371, %372) /* ty=Tensor[(12, 15, 2), float32] */;
  %381 = equal(%375, %376) /* ty=Tensor[(12, 15, 2), bool] */;
  %382 = %379.5;
  (%380, %381, %382, meta[relay.Constant][17] /* ty=Tensor[(35, 6), uint32] */)
}

def @func_5072() -> Tensor[(12, 16, 2), bool] {
  @func_5070() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_4134(%var_4132: Tensor[(11232), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(11232), float32], Tensor[(12, 16, 2), float32]) {
  @func_4131(%var_4132) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(11232), float32], Tensor[(12, 16, 2), float32]) */
}

def @func_3574(%var_3472: float64, %var_3524: Tensor[(420), float64], %var_3537: Tensor[(1320), float64], %var_3553: Tensor[(80, 2), float32]) -> (Tensor[(11, 3, 11), float64], Tensor[(5, 14, 6), float64], Tensor[(420), float64], Tensor[(12, 16, 2), bool], Tensor[(240), int8], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(1320), float64], Tensor[(80, 2), uint32]) {
  %383 = cast(%var_3472, dtype="float64") /* ty=float64 */;
  %384 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 3, 11), float64] */, dtype="float64") /* ty=Tensor[(11, 3, 11), float64] */;
  %385 = cast(%var_3524, dtype="float64") /* ty=Tensor[(420), float64] */;
  %386 = reshape(%385, newshape=[5, 14, 6]) /* ty=Tensor[(5, 14, 6), float64] */;
  %387 = @func_1008(%386) /* ty=(Tensor[(5, 14, 6), float64],) */;
  %388 = cast(meta[relay.Constant][19] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %389 = reshape(%388, newshape=[240]) /* ty=Tensor[(240), int8] */;
  %390 = @func_2250(%389) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(5, 4, 12), int8], Tensor[(240), int8]) */;
  %391 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %392 = cast(%var_3537, dtype="float64") /* ty=Tensor[(1320), float64] */;
  %393 = reshape(%392, newshape=[8, 15, 11]) /* ty=Tensor[(8, 15, 11), float64] */;
  %394 = @func_3423(%393) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(8, 15, 11), uint64], Tensor[(12, 16, 2), float32]) */;
  %395 = cast(meta[relay.Constant][20] /* ty=Tensor[(80, 2), uint16] */, dtype="float64") /* ty=Tensor[(80, 2), float64] */;
  %396 = atan(%395) /* ty=Tensor[(80, 2), float64] */;
  %397 = cast(meta[relay.Constant][20] /* ty=Tensor[(80, 2), uint16] */, dtype="uint16") /* ty=Tensor[(80, 2), uint16] */;
  %398 = cast(meta[relay.Constant][20] /* ty=Tensor[(80, 2), uint16] */, dtype="uint16") /* ty=Tensor[(80, 2), uint16] */;
  %399 = reshape(%397, newshape=[2, 16, 5]) /* ty=Tensor[(2, 16, 5), uint16] */;
  %400 = reshape(%398, newshape=[2, 16, 5]) /* ty=Tensor[(2, 16, 5), uint16] */;
  %401 = @func_1959(%399, %400) /* ty=(Tensor[(2, 16, 5), uint16],) */;
  %402 = %401.0;
  %403 = cast(%402, dtype="float32") /* ty=Tensor[(2, 16, 5), float32] */;
  %404 = shape_of(%396, dtype="int32") /* ty=Tensor[(2), int32] */;
  %405 = cast(%396, dtype="float32") /* ty=Tensor[(80, 2), float32] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %407 = floor_mod(%405, %406) /* ty=Tensor[(80, 2), float32] */;
  %408 = cast(%var_3553, dtype="float32") /* ty=Tensor[(80, 2), float32] */;
  %409 = shape_of(%407, dtype="int32") /* ty=Tensor[(2), int32] */;
  %410 = cast(%407, dtype="float32") /* ty=Tensor[(80, 2), float32] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %412 = power(%410, %411) /* ty=Tensor[(80, 2), float32] */;
  %413 = cast(%412, dtype="uint32") /* ty=Tensor[(80, 2), uint32] */;
  %414 = cast(%var_3472, dtype="uint32") /* ty=uint32 */;
  %415 = floor_divide(%383, %384) /* ty=Tensor[(11, 3, 11), float64] */;
  %416 = %387.0;
  %417 = %390.0;
  %418 = %391.0;
  %419 = %394.0;
  %420 = bitwise_xor(%413, %414) /* ty=Tensor[(80, 2), uint32] */;
  (%415, %416, %var_3524, %417, meta[relay.Constant][19] /* ty=Tensor[(240), int8] */, %418, %419, %var_3537, %420)
}

def @func_2139() -> (Tensor[(12, 16, 2), float32],) {
  @func_2137() /* ty=(Tensor[(12, 16, 2), float32],) */
}

def @func_184(%var_165: Tensor[(12, 16, 2), bool]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int16], Tensor[(12, 16, 2), bool]) {
  %421 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %422 = %421.0;
  %423 = cast(%var_165, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%422, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %427 = cast(%var_165, dtype="int16") /* ty=Tensor[(12, 16, 2), int16] */;
  %428 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%422, dtype="int16") /* ty=Tensor[(12, 16, 2), int16] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %431 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %432 = less(%425, %426) /* ty=Tensor[(12, 16, 2), bool] */;
  %433 = left_shift(%429, %430) /* ty=Tensor[(12, 16, 2), int16] */;
  %434 = %431.0;
  (%432, %433, %434)
}

def @func_1299() -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), int32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(210), uint32], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
  %435 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %436 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %437 = %435.0;
  %438 = cast(%437, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %439 = reshape(%438, newshape=[12, 16, 2]) /* ty=Tensor[(12, 16, 2), bool] */;
  %440 = @func_565(%439) /* ty=(Tensor[(12, 16, 2), int32],) */;
  %441 = cast(meta[relay.Constant][21] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %442 = reshape(%441, newshape=[2, 7, 15]) /* ty=Tensor[(2, 7, 15), uint32] */;
  %443 = @func_819(%442) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(2, 7, 15), float32]) */;
  %444 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %445 = %444.0;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(12, 16, 2), float64] */;
  %447 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %448 = %436.0;
  %449 = %440.0;
  %450 = @func_367() /* ty=Tensor[(12, 16, 2), bool] */;
  %451 = %443.0;
  %452 = exp(%446) /* ty=Tensor[(12, 16, 2), float64] */;
  %453 = %447.0;
  (%437, %448, %449, %450, %451, meta[relay.Constant][21] /* ty=Tensor[(210), uint32] */, %452, %453)
}

def @func_4201() -> Tensor[(12, 16, 2), bool] {
  %454 = @func_2499() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %454.0
}

def @func_4292() -> (Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64]) {
  @func_4290() /* ty=(Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64]) */
}

def @func_5041(%var_5039: Tensor[(2, 12, 16), float32]) -> (Tensor[(2, 12, 16), float32], Tensor[(12, 16, 2), float32]) {
  @func_5038(%var_5039) /* ty=(Tensor[(2, 12, 16), float32], Tensor[(12, 16, 2), float32]) */
}

def @func_5760(%var_5758: Tensor[(8, 15, 11), float64]) -> (Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), float32], Tensor[(8, 15, 11), uint32], Tensor[(4, 220), int32], Tensor[(11232), float32]) {
  @func_5757(%var_5758) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), float32], Tensor[(8, 15, 11), uint32], Tensor[(4, 220), int32], Tensor[(11232), float32]) */
}

def @func_5924(%var_5913: Tensor[(9, 3, 10), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), int8]) {
  %455 = @func_2609() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %456 = @func_713() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %457 = @func_1592() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %458 = @func_4775() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) */;
  %459 = %458.0;
  %460 = cast(%var_5913, dtype="int8") /* ty=Tensor[(9, 3, 10), int8] */;
  %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%459, dtype="int8") /* ty=Tensor[(9, 3, 10), int8] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %464 = %455.0;
  %465 = %456.0;
  %466 = %457.0;
  %467 = @func_4201() /* ty=Tensor[(12, 16, 2), bool] */;
  %468 = maximum(%462, %463) /* ty=Tensor[(9, 3, 10), int8] */;
  (%464, %465, %466, %467, %468)
}

def @func_6409() -> Tensor[(12, 16, 2), float64] {
  %470 = fn () -> Tensor[(12, 16, 2), float64] {
    %469 = @func_5836() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
    %469.0
  };
  %470() /* ty=Tensor[(12, 16, 2), float64] */
}

def @func_6926(%var_6924: Tensor[(12, 4, 16), uint8], %var_6925: Tensor[(12, 4, 16), uint8]) -> (Tensor[(12, 4, 16), uint8], Tensor[(8, 15, 11), float64]) {
  @func_6922(%var_6924, %var_6925) /* ty=(Tensor[(12, 4, 16), uint8], Tensor[(8, 15, 11), float64]) */
}

def @func_714() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %474 = fn () -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
    %471 = @func_523() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
    %472 = %471.0;
    %473 = @func_426() /* ty=Tensor[(12, 16, 2), bool] */;
    (%472, %473)
  };
  %474() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */
}

def @func_1962(%var_1960: Tensor[(2, 16, 5), uint16], %var_1961: Tensor[(2, 16, 5), uint16]) -> (Tensor[(2, 16, 5), uint16],) {
  %480 = fn (%var_1947: Tensor[(2, 16, 5), uint16], %var_1948: Tensor[(2, 16, 5), uint16]) -> (Tensor[(2, 16, 5), uint16],) {
    %475 = cast(%var_1948, dtype="uint16") /* ty=Tensor[(2, 16, 5), uint16] */;
    %476 = shape_of(%var_1947, dtype="int32") /* ty=Tensor[(3), int32] */;
    %477 = cast(%var_1947, dtype="uint16") /* ty=Tensor[(2, 16, 5), uint16] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %479 = bitwise_and(%477, %478) /* ty=Tensor[(2, 16, 5), uint16] */;
    (%479,)
  };
  %480(%var_1960, %var_1961) /* ty=(Tensor[(2, 16, 5), uint16],) */
}

def @func_3931(%var_3924: Tensor[(5, 14, 3), int16], %var_3925: Tensor[(5, 14, 3), int16]) -> (Tensor[(5, 14, 3), int16],) {
  %481 = cast(%var_3925, dtype="int16") /* ty=Tensor[(5, 14, 3), int16] */;
  %482 = shape_of(%var_3924, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%var_3924, dtype="int16") /* ty=Tensor[(5, 14, 3), int16] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %485 = left_shift(%483, %484) /* ty=Tensor[(5, 14, 3), int16] */;
  (%485,)
}

def @func_4776() -> (Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) {
  %489 = fn () -> (Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) {
    %486 = @func_642() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */;
    %487 = @func_1942() /* ty=Tensor[(9, 3, 10), float32] */;
    %488 = %486.3;
    (%487, %488)
  };
  %489() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) */
}

def @func_5624() -> (Tensor[(12, 16, 2), float32], Tensor[(16, 5, 11), bool], Tensor[(880), int32]) {
  %490 = @func_2801() /* ty=(Tensor[(12, 16, 2), float32],) */;
  %491 = cast(meta[relay.Constant][22] /* ty=Tensor[(880), int32] */, dtype="int32") /* ty=Tensor[(880), int32] */;
  %492 = reshape(%491, newshape=[16, 5, 11]) /* ty=Tensor[(16, 5, 11), int32] */;
  %493 = @func_1439(%492) /* ty=(Tensor[(16, 5, 11), bool], Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), float64]) */;
  %494 = %490.0;
  %495 = %493.0;
  (%494, %495, meta[relay.Constant][22] /* ty=Tensor[(880), int32] */)
}

def @func_6757() -> Tensor[(12, 16, 2), float32] {
  @func_6755() /* ty=Tensor[(12, 16, 2), float32] */
}

def @func_5187(%var_5185: Tensor[(7, 4, 16), int8]) -> (Tensor[(7, 4, 16), float64], Tensor[(7, 4, 16), float32]) {
  @func_5184(%var_5185) /* ty=(Tensor[(7, 4, 16), float64], Tensor[(7, 4, 16), float32]) */
}

def @func_187(%var_185: Tensor[(12, 16, 2), bool]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int16], Tensor[(12, 16, 2), bool]) {
  @func_184(%var_185) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int16], Tensor[(12, 16, 2), bool]) */
}

def @func_1357() -> (Tensor[(12, 16, 2), bool],) {
  %496 = @func_543() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %497 = %496.0;
  (%497,)
}

def @func_6698() -> Tensor[(12, 16, 2), bool] {
  @func_6696() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_3056() -> (Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64]) {
  %501 = fn () -> (Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64]) {
    %498 = @func_2801() /* ty=(Tensor[(12, 16, 2), float32],) */;
    %499 = %498.0;
    %500 = @func_2636() /* ty=Tensor[(12, 16, 2), float64] */;
    (%499, %500)
  };
  %501() /* ty=(Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64]) */
}

def @func_6922(%var_6892: Tensor[(12, 4, 16), uint8], %var_6893: Tensor[(12, 4, 16), uint8]) -> (Tensor[(12, 4, 16), uint8], Tensor[(8, 15, 11), float64]) {
  %502 = cast(%var_6893, dtype="uint8") /* ty=Tensor[(12, 4, 16), uint8] */;
  %503 = shape_of(%var_6892, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%var_6892, dtype="uint8") /* ty=Tensor[(12, 4, 16), uint8] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %506 = subtract(%504, %505) /* ty=Tensor[(12, 4, 16), uint8] */;
  %507 = @func_4093() /* ty=Tensor[(8, 15, 11), float64] */;
  (%506, %507)
}

def @func_1761(%var_1759: Tensor[(5, 4, 12), int8]) -> (Tensor[(5, 4, 12), int8],) {
  @func_1758(%var_1759) /* ty=(Tensor[(5, 4, 12), int8],) */
}

def @func_1758(%var_1738: Tensor[(5, 4, 12), int8]) -> (Tensor[(5, 4, 12), int8],) {
  %508 = cast(%var_1738, dtype="int8") /* ty=Tensor[(5, 4, 12), int8] */;
  %509 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(5, 4, 12), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 4, 12), int8] */, dtype="int8") /* ty=Tensor[(5, 4, 12), int8] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %512 = left_shift(%510, %511) /* ty=Tensor[(5, 4, 12), int8] */;
  (%512,)
}

def @func_4915(%var_4863: Tensor[(864), float32], %var_4874: Tensor[(12, 8, 9), float32], %var_4898: Tensor[(2, 7, 15), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(864), float32], Tensor[(12, 8, 9), float64], Tensor[(12, 8, 9), float64], Tensor[(360), float32], Tensor[(2, 7, 15), bool], Tensor[(12, 8, 9), float32]) {
  %513 = @func_3242() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %514 = cast(%var_4863, dtype="float32") /* ty=Tensor[(864), float32] */;
  %515 = reshape(%514, newshape=[12, 8, 9]) /* ty=Tensor[(12, 8, 9), float32] */;
  %516 = @func_261(%515) /* ty=(Tensor[(12, 8, 9), float32],) */;
  %517 = %516.0;
  %518 = cast(%var_4874, dtype="float32") /* ty=Tensor[(12, 8, 9), float32] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%517, dtype="float32") /* ty=Tensor[(12, 8, 9), float32] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %522 = power(%520, %521) /* ty=Tensor[(12, 8, 9), float32] */;
  %523 = cast(%517, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
  %524 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%522, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %527 = cast(%517, dtype="float64") /* ty=Tensor[(12, 8, 9), float64] */;
  %528 = cast(meta[relay.Constant][24] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %529 = reshape(%528, newshape=[12, 15, 2]) /* ty=Tensor[(12, 15, 2), float32] */;
  %530 = @func_2743(%529) /* ty=(Tensor[(12, 15, 2), float32], Tensor[(12, 15, 2), bool], Tensor[(2, 7, 15), float32], Tensor[(35, 6), uint32]) */;
  %531 = %530.2;
  %532 = cast(%var_4898, dtype="bool") /* ty=Tensor[(2, 7, 15), bool] */;
  %533 = shape_of(%531, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%531, dtype="bool") /* ty=Tensor[(2, 7, 15), bool] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %536 = cast(%517, dtype="float32") /* ty=Tensor[(12, 8, 9), float32] */;
  %537 = %513.0;
  %538 = divide(%525, %526) /* ty=Tensor[(12, 8, 9), float64] */;
  %539 = acosh(%527) /* ty=Tensor[(12, 8, 9), float64] */;
  %540 = equal(%534, %535) /* ty=Tensor[(2, 7, 15), bool] */;
  %541 = sqrt(%536) /* ty=Tensor[(12, 8, 9), float32] */;
  (%537, %var_4863, %538, %539, meta[relay.Constant][24] /* ty=Tensor[(360), float32] */, %540, %541)
}

def @func_6263(%var_6239: Tensor[(3, 8, 9), float32]) -> (Tensor[(3, 8, 9), float32],) {
  %542 = cast(%var_6239, dtype="float32") /* ty=Tensor[(3, 8, 9), float32] */;
  %543 = asin(%542) /* ty=Tensor[(3, 8, 9), float32] */;
  (%543,)
}

def @func_2327(%var_2325: Tensor[(7, 9, 14), uint16]) -> (Tensor[(7, 9, 14), bool],) {
  @func_2324(%var_2325) /* ty=(Tensor[(7, 9, 14), bool],) */
}

def @func_263(%var_262: Tensor[(12, 8, 9), float32]) -> (Tensor[(12, 8, 9), float32],) {
  %546 = fn (%var_253: Tensor[(12, 8, 9), float32]) -> (Tensor[(12, 8, 9), float32],) {
    %544 = cast(%var_253, dtype="float32") /* ty=Tensor[(12, 8, 9), float32] */;
    %545 = asin(%544) /* ty=Tensor[(12, 8, 9), float32] */;
    (%545,)
  };
  %546(%var_262) /* ty=(Tensor[(12, 8, 9), float32],) */
}

def @func_2298() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %547 = @func_1592() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %548 = %547.0;
  %549 = @func_426() /* ty=Tensor[(12, 16, 2), bool] */;
  %550 = @func_304() /* ty=Tensor[(12, 16, 2), bool] */;
  (%548, %549, %550)
}

def @func_1843() -> Tensor[(8, 15, 11), float64] {
  %552 = fn () -> Tensor[(8, 15, 11), float64] {
    %551 = cast(meta[relay.Constant][25] /* ty=Tensor[(8, 15, 11), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
    sqrt(%551) /* ty=Tensor[(8, 15, 11), float64] */
  };
  %552() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_3855(%var_3854: Tensor[(72, 156), float32]) -> (Tensor[(12, 16, 2), float32], Tensor[(5, 4, 12), int8], Tensor[(240), int8], Tensor[(12, 16, 2), bool], Tensor[(72, 156), float32], Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), float32]) {
  %569 = fn (%var_3824: Tensor[(72, 156), float32]) -> (Tensor[(12, 16, 2), float32], Tensor[(5, 4, 12), int8], Tensor[(240), int8], Tensor[(12, 16, 2), bool], Tensor[(72, 156), float32], Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), float32]) {
    %553 = @func_2137() /* ty=(Tensor[(12, 16, 2), float32],) */;
    %554 = cast(meta[relay.Constant][26] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
    %555 = reshape(%554, newshape=[240]) /* ty=Tensor[(240), int8] */;
    %556 = @func_2250(%555) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(5, 4, 12), int8], Tensor[(240), int8]) */;
    %557 = cast(%var_3824, dtype="float32") /* ty=Tensor[(72, 156), float32] */;
    %558 = reshape(%557, newshape=[864, 13]) /* ty=Tensor[(864, 13), float32] */;
    %559 = @func_1499(%558) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 8, 9), float32], Tensor[(16, 5, 11), float64], Tensor[(4, 220), int32], Tensor[(864, 13), int16], Tensor[(12, 16, 2), bool]) */;
    %560 = @func_2298() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %561 = @func_1075() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) */;
    %562 = %561.0;
    %563 = cast(%562, dtype="float32") /* ty=Tensor[(9, 3, 10), float32] */;
    %564 = %553.0;
    %565 = %556.1;
    %566 = %559.5;
    %567 = %560.0;
    %568 = atanh(%563) /* ty=Tensor[(9, 3, 10), float32] */;
    (%564, %565, meta[relay.Constant][26] /* ty=Tensor[(240), int8] */, %566, %var_3824, %567, %568)
  };
  %569(%var_3854) /* ty=(Tensor[(12, 16, 2), float32], Tensor[(5, 4, 12), int8], Tensor[(240), int8], Tensor[(12, 16, 2), bool], Tensor[(72, 156), float32], Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), float32]) */
}

def @func_6080(%var_6078: Tensor[(14, 13, 15), int16], %var_6079: Tensor[(14, 13, 15), int16]) -> (Tensor[(14, 13, 15), bool], Tensor[(12, 16, 2), bool]) {
  %577 = fn (%var_6068: Tensor[(14, 13, 15), int16], %var_6069: Tensor[(14, 13, 15), int16]) -> (Tensor[(14, 13, 15), bool], Tensor[(12, 16, 2), bool]) {
    %570 = cast(%var_6069, dtype="bool") /* ty=Tensor[(14, 13, 15), bool] */;
    %571 = shape_of(%var_6068, dtype="int32") /* ty=Tensor[(3), int32] */;
    %572 = cast(%var_6068, dtype="bool") /* ty=Tensor[(14, 13, 15), bool] */;
    %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %574 = @func_982() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %575 = greater_equal(%572, %573) /* ty=Tensor[(14, 13, 15), bool] */;
    %576 = %574.0;
    (%575, %576)
  };
  %577(%var_6078, %var_6079) /* ty=(Tensor[(14, 13, 15), bool], Tensor[(12, 16, 2), bool]) */
}

def @func_1185() -> Tensor[(12, 16, 2), bool] {
  @func_433() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_3425(%var_3424: Tensor[(8, 15, 11), float64]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(8, 15, 11), uint64], Tensor[(12, 16, 2), float32]) {
  %590 = fn (%var_3403: Tensor[(8, 15, 11), float64]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(8, 15, 11), uint64], Tensor[(12, 16, 2), float32]) {
    %578 = @func_1518() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %579 = @func_918() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
    %580 = @func_1842() /* ty=Tensor[(8, 15, 11), float64] */;
    %581 = cast(%var_3403, dtype="uint64") /* ty=Tensor[(8, 15, 11), uint64] */;
    %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
    %583 = cast(%580, dtype="uint64") /* ty=Tensor[(8, 15, 11), uint64] */;
    %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %585 = @func_2801() /* ty=(Tensor[(12, 16, 2), float32],) */;
    %586 = %578.0;
    %587 = %579.0;
    %588 = subtract(%583, %584) /* ty=Tensor[(8, 15, 11), uint64] */;
    %589 = %585.0;
    (%586, %587, %588, %589)
  };
  %590(%var_3424) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(8, 15, 11), uint64], Tensor[(12, 16, 2), float32]) */
}

def @func_304() -> Tensor[(12, 16, 2), bool] {
  %591 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %591.0
}

def @func_2501() -> (Tensor[(12, 16, 2), bool],) {
  @func_2499() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_2414() -> (Tensor[(12, 16, 2), bool],) {
  %592 = @func_834() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %593 = %592.0;
  (%593,)
}

def @func_982() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %594 = @func_225() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %595 = @func_367() /* ty=Tensor[(12, 16, 2), bool] */;
  %596 = %594.0;
  %597 = @func_304() /* ty=Tensor[(12, 16, 2), bool] */;
  (%595, %596, %597)
}

def @func_3671(%var_3628: Tensor[(11232), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(11232), int64]) {
  %598 = cast(%var_3628, dtype="float32") /* ty=Tensor[(11232), float32] */;
  %599 = reshape(%598, newshape=[864, 13]) /* ty=Tensor[(864, 13), float32] */;
  %600 = @func_1499(%599) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 8, 9), float32], Tensor[(16, 5, 11), float64], Tensor[(4, 220), int32], Tensor[(864, 13), int16], Tensor[(12, 16, 2), bool]) */;
  %601 = cast(%var_3628, dtype="float64") /* ty=Tensor[(11232), float64] */;
  %602 = atanh(%601) /* ty=Tensor[(11232), float64] */;
  %603 = cast(%602, dtype="float64") /* ty=Tensor[(11232), float64] */;
  %604 = sqrt(%603) /* ty=Tensor[(11232), float64] */;
  %605 = cast(%602, dtype="bool") /* ty=Tensor[(11232), bool] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(1), int32] */;
  %607 = cast(%604, dtype="bool") /* ty=Tensor[(11232), bool] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?), bool] */;
  %609 = less_equal(%607, %608) /* ty=Tensor[(11232), bool] */;
  %610 = cast(%609, dtype="int64") /* ty=Tensor[(11232), int64] */;
  %611 = shape_of(%604, dtype="int32") /* ty=Tensor[(1), int32] */;
  %612 = cast(%604, dtype="int64") /* ty=Tensor[(11232), int64] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?), int64] */;
  %614 = @func_426() /* ty=Tensor[(12, 16, 2), bool] */;
  %615 = %600.5;
  %616 = minimum(%612, %613) /* ty=Tensor[(11232), int64] */;
  (%614, %615, %616)
}

def @func_6635() -> (Tensor[(12, 16, 2), bool],) {
  %617 = @func_543() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %618 = %617.0;
  (%618,)
}

def @func_5070() -> Tensor[(12, 16, 2), bool] {
  @func_367() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_5863() -> Tensor[(12, 16, 2), bool] {
  %619 = @func_2499() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %619.0
}

def @func_6110(%var_6108: Tensor[(4, 12, 6), uint16]) -> (Tensor[(4, 12, 6), uint16], Tensor[(4, 12, 6), uint16], Tensor[(9, 4, 12), float32], Tensor[(432), float32]) {
  @func_6107(%var_6108) /* ty=(Tensor[(4, 12, 6), uint16], Tensor[(4, 12, 6), uint16], Tensor[(9, 4, 12), float32], Tensor[(432), float32]) */
}

def @func_6525() -> Tensor[(12, 16, 2), bool] {
  %620 = @func_3311() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
  %620.3
}

def @func_4000(%var_3986: Tensor[(8, 7, 4), float32]) -> (Tensor[(8, 7, 4), float32],) {
  %621 = cast(%var_3986, dtype="float32") /* ty=Tensor[(8, 7, 4), float32] */;
  %622 = tan(%621) /* ty=Tensor[(8, 7, 4), float32] */;
  (%622,)
}

def @func_6592() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32], Tensor[(12, 16, 2), float32]) {
  %629 = fn () -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32], Tensor[(12, 16, 2), float32]) {
    %623 = @func_5092() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %624 = @func_2980() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */;
    %625 = @func_3110() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
    %626 = %623.0;
    %627 = %624.1;
    %628 = %625.1;
    (%626, %627, %628)
  };
  %629() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32], Tensor[(12, 16, 2), float32]) */
}

def @func_2588() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
  %637 = fn () -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
    %630 = @func_1518() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %631 = @func_1084() /* ty=(Tensor[(12, 16, 2), float64],) */;
    %632 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %633 = @func_426() /* ty=Tensor[(12, 16, 2), bool] */;
    %634 = %630.0;
    %635 = %631.0;
    %636 = %632.1;
    (%633, %634, %635, %636)
  };
  %637() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */
}

def @func_6107(%var_6085: Tensor[(4, 12, 6), uint16]) -> (Tensor[(4, 12, 6), uint16], Tensor[(4, 12, 6), uint16], Tensor[(9, 4, 12), float32], Tensor[(432), float32]) {
  %638 = cast(%var_6085, dtype="uint16") /* ty=Tensor[(4, 12, 6), uint16] */;
  %639 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(4, 12, 6), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 12, 6), uint16] */, dtype="uint16") /* ty=Tensor[(4, 12, 6), uint16] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %642 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 12, 6), uint16] */, dtype="uint16") /* ty=Tensor[(4, 12, 6), uint16] */;
  %643 = shape_of(%var_6085, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%var_6085, dtype="uint16") /* ty=Tensor[(4, 12, 6), uint16] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %646 = cast(meta[relay.Constant][29] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %647 = reshape(%646, newshape=[9, 4, 12]) /* ty=Tensor[(9, 4, 12), float32] */;
  %648 = bitwise_and(%640, %641) /* ty=Tensor[(4, 12, 6), uint16] */;
  %649 = add(%644, %645) /* ty=Tensor[(4, 12, 6), uint16] */;
  %650 = @func_4581(%647) /* ty=Tensor[(9, 4, 12), float32] */;
  (%648, %649, %650, meta[relay.Constant][29] /* ty=Tensor[(432), float32] */)
}

def @func_5297(%var_5295: Tensor[(210), uint32]) -> (Tensor[(12, 16, 2), bool], Tensor[(210), uint32], Tensor[(12, 16, 2), bool], Tensor[(16), float32], Tensor[(2, 16, 8), float64], Tensor[(2, 16, 8), float64]) {
  @func_5294(%var_5295) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(210), uint32], Tensor[(12, 16, 2), bool], Tensor[(16), float32], Tensor[(2, 16, 8), float64], Tensor[(2, 16, 8), float64]) */
}

def @func_1520() -> (Tensor[(12, 16, 2), bool],) {
  @func_1518() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_368() -> Tensor[(12, 16, 2), bool] {
  %652 = fn () -> Tensor[(12, 16, 2), bool] {
    %651 = @func_225() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %651.1
  };
  %652() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_4707(%var_4705: Tensor[(4, 160), int16]) -> (Tensor[(12, 16, 2), bool], Tensor[(4, 160), uint32], Tensor[(7, 9, 14), bool], Tensor[(98, 9), uint16]) {
  @func_4704(%var_4705) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(4, 160), uint32], Tensor[(7, 9, 14), bool], Tensor[(98, 9), uint16]) */
}

def @func_2719(%var_2718: Tensor[(12, 16, 2), bool]) -> (Tensor[(12, 16, 2), uint16], Tensor[(12, 16, 2), bool]) {
  %664 = fn (%var_2682: Tensor[(12, 16, 2), bool]) -> (Tensor[(12, 16, 2), uint16], Tensor[(12, 16, 2), bool]) {
    %653 = @func_982() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %654 = %653.2;
    %655 = cast(%var_2682, dtype="uint16") /* ty=Tensor[(12, 16, 2), uint16] */;
    %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
    %657 = cast(%654, dtype="uint16") /* ty=Tensor[(12, 16, 2), uint16] */;
    %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %659 = logical_xor(%657, %658) /* ty=Tensor[(12, 16, 2), uint16] */;
    %660 = cast(%659, dtype="int32") /* ty=Tensor[(12, 16, 2), int32] */;
    %661 = reshape(%660, newshape=[12, 16, 2]) /* ty=Tensor[(12, 16, 2), int32] */;
    %662 = @func_1133(%661) /* ty=(Tensor[(12, 16, 2), bool],) */;
    %663 = %662.0;
    (%659, %663)
  };
  %664(%var_2718) /* ty=(Tensor[(12, 16, 2), uint16], Tensor[(12, 16, 2), bool]) */
}

def @func_3112() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) {
  @func_3110() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */
}

def @func_3179(%var_3178: Tensor[(9, 3, 10), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), uint16]) {
  %672 = fn (%var_3153: Tensor[(9, 3, 10), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), uint16]) {
    %665 = @func_1942() /* ty=Tensor[(9, 3, 10), float32] */;
    %666 = cast(%var_3153, dtype="uint16") /* ty=Tensor[(9, 3, 10), uint16] */;
    %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
    %668 = cast(%665, dtype="uint16") /* ty=Tensor[(9, 3, 10), uint16] */;
    %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %670 = @func_367() /* ty=Tensor[(12, 16, 2), bool] */;
    %671 = logical_xor(%668, %669) /* ty=Tensor[(9, 3, 10), uint16] */;
    (%670, %671)
  };
  %672(%var_3178) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), uint16]) */
}

def @func_6793() -> Tensor[(8, 15, 11), float64] {
  @func_1842() /* ty=Tensor[(8, 15, 11), float64] */
}

def @func_1863() -> (Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), float32]) {
  %677 = fn () -> (Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), float32]) {
    %673 = @func_1075() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) */;
    %674 = @func_523() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
    %675 = %673.0;
    %676 = %674.1;
    (%675, %676)
  };
  %677() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), float32]) */
}

def @func_2746(%var_2744: Tensor[(12, 15, 2), float32]) -> (Tensor[(12, 15, 2), float32], Tensor[(12, 15, 2), bool], Tensor[(2, 7, 15), float32], Tensor[(35, 6), uint32]) {
  @func_2743(%var_2744) /* ty=(Tensor[(12, 15, 2), float32], Tensor[(12, 15, 2), bool], Tensor[(2, 7, 15), float32], Tensor[(35, 6), uint32]) */
}

def @func_5454() -> (Tensor[(2, 7, 8), bool],) {
  %683 = fn () -> (Tensor[(2, 7, 8), bool],) {
    %678 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 7, 8), float64] */, dtype="bool") /* ty=Tensor[(2, 7, 8), bool] */;
    %679 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(2, 7, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %680 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 7, 8), float64] */, dtype="bool") /* ty=Tensor[(2, 7, 8), bool] */;
    %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %682 = less(%680, %681) /* ty=Tensor[(2, 7, 8), bool] */;
    (%682,)
  };
  %683() /* ty=(Tensor[(2, 7, 8), bool],) */
}

def @func_4659(%var_4658: Tensor[(1, 5, 3), int16]) -> (Tensor[(9, 5, 3), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %693 = fn (%var_4645: Tensor[(1, 5, 3), int16]) -> (Tensor[(9, 5, 3), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
    %684 = cast(%var_4645, dtype="bool") /* ty=Tensor[(1, 5, 3), bool] */;
    %685 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 5, 3), int16] */, dtype="bool") /* ty=Tensor[(9, 5, 3), bool] */;
    %686 = @func_1637() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %687 = %686.2;
    %688 = cast(%687, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
    %689 = reshape(%688, newshape=[12, 16, 2]) /* ty=Tensor[(12, 16, 2), bool] */;
    %690 = @func_184(%689) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int16], Tensor[(12, 16, 2), bool]) */;
    %691 = greater(%684, %685) /* ty=Tensor[(9, 5, 3), bool] */;
    %692 = %690.0;
    (%691, %687, %692)
  };
  %693(%var_4658) /* ty=(Tensor[(9, 5, 3), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */
}

def @func_2980() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) {
  %694 = @func_2211() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64]) */;
  %695 = %694.0;
  %696 = cast(%695, dtype="bool") /* ty=Tensor[(12, 16, 2), bool] */;
  %697 = reshape(%696, newshape=[12, 16, 2]) /* ty=Tensor[(12, 16, 2), bool] */;
  %698 = @func_565(%697) /* ty=(Tensor[(12, 16, 2), int32],) */;
  %699 = %698.0;
  (%695, %699)
}

def @func_1944() -> Tensor[(9, 3, 10), float32] {
  @func_1942() /* ty=Tensor[(9, 3, 10), float32] */
}

def @func_3087() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32], Tensor[(12, 16, 2), bool]) {
  %706 = fn () -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32], Tensor[(12, 16, 2), bool]) {
    %700 = @func_2298() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %701 = @func_2980() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32]) */;
    %702 = @func_1357() /* ty=(Tensor[(12, 16, 2), bool],) */;
    %703 = %700.0;
    %704 = %701.1;
    %705 = %702.0;
    (%703, %704, %705)
  };
  %706() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), int32], Tensor[(12, 16, 2), bool]) */
}

def @func_5094() -> (Tensor[(12, 16, 2), bool],) {
  @func_5092() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_1972() -> Tensor[(12, 16, 2), float64] {
  %707 = @func_918() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */;
  %707.0
}

def @func_1084() -> (Tensor[(12, 16, 2), float64],) {
  %708 = @func_404() /* ty=Tensor[(12, 16, 2), float64] */;
  (%708,)
}

def @func_6507() -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), uint8]) {
  %709 = @func_3687() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %710 = %709.0;
  %711 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 16, 2), bool] */, dtype="float64") /* ty=Tensor[(12, 16, 2), float64] */;
  %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%710, dtype="float64") /* ty=Tensor[(12, 16, 2), float64] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %715 = @func_543() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %716 = @func_2414() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %717 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 16, 2), bool] */, dtype="uint8") /* ty=Tensor[(12, 16, 2), uint8] */;
  %718 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%710, dtype="uint8") /* ty=Tensor[(12, 16, 2), uint8] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %721 = power(%713, %714) /* ty=Tensor[(12, 16, 2), float64] */;
  %722 = %715.0;
  %723 = %716.0;
  %724 = bitwise_or(%719, %720) /* ty=Tensor[(12, 16, 2), uint8] */;
  (%721, %722, %723, %724)
}

def @func_6637() -> (Tensor[(12, 16, 2), bool],) {
  @func_6635() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_1318(%var_1302: Tensor[(6, 11, 14), float32], %var_1307: Tensor[(6, 11, 14), float32]) -> Tensor[(6, 11, 14), float64] {
  %725 = cast(%var_1302, dtype="float32") /* ty=Tensor[(6, 11, 14), float32] */;
  %726 = log2(%725) /* ty=Tensor[(6, 11, 14), float32] */;
  %727 = cast(%var_1307, dtype="float64") /* ty=Tensor[(6, 11, 14), float64] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%726, dtype="float64") /* ty=Tensor[(6, 11, 14), float64] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%729, %730) /* ty=Tensor[(6, 11, 14), float64] */
}

def @func_2802() -> (Tensor[(12, 16, 2), float32],) {
  %733 = fn () -> (Tensor[(12, 16, 2), float32],) {
    %731 = @func_523() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
    %732 = %731.1;
    (%732,)
  };
  %733() /* ty=(Tensor[(12, 16, 2), float32],) */
}

def @func_2300() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  @func_2298() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */
}

def @func_6219() -> (Tensor[(16, 160), int64], Tensor[(12, 16, 2), bool], Tensor[(16, 160), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  @func_6217() /* ty=(Tensor[(16, 160), int64], Tensor[(12, 16, 2), bool], Tensor[(16, 160), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */
}

def @func_6356() -> (Tensor[(12, 16, 2), bool],) {
  %735 = fn () -> (Tensor[(12, 16, 2), bool],) {
    %734 = @func_5070() /* ty=Tensor[(12, 16, 2), bool] */;
    (%734,)
  };
  %735() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_6676() -> (Tensor[(12, 16, 2), float32],) {
  %736 = @func_1592() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %737 = %736.1;
  (%737,)
}

def @func_1136(%var_1134: Tensor[(12, 16, 2), int32]) -> (Tensor[(12, 16, 2), bool],) {
  @func_1133(%var_1134) /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_2213() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64]) {
  @func_2211() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64]) */
}

def @func_3935(%var_3933: Tensor[(5, 14, 3), int16], %var_3934: Tensor[(5, 14, 3), int16]) -> (Tensor[(5, 14, 3), int16],) {
  @func_3931(%var_3933, %var_3934) /* ty=(Tensor[(5, 14, 3), int16],) */
}

def @main(%var_6998: Tensor[(8, 96), uint8]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 4, 16), uint8], Tensor[(8, 96), uint8]) {
  %738 = @func_2416() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %739 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 96), uint8] */, dtype="uint8") /* ty=Tensor[(8, 96), uint8] */;
  %740 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 96), uint8] */, dtype="uint8") /* ty=Tensor[(8, 96), uint8] */;
  %741 = reshape(%739, newshape=[12, 4, 16]) /* ty=Tensor[(12, 4, 16), uint8] */;
  %742 = reshape(%740, newshape=[12, 4, 16]) /* ty=Tensor[(12, 4, 16), uint8] */;
  %743 = @func_6926(%741, %742) /* ty=(Tensor[(12, 4, 16), uint8], Tensor[(8, 15, 11), float64]) */;
  %744 = cast(%var_6998, dtype="uint8") /* ty=Tensor[(8, 96), uint8] */;
  %745 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(8, 96), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %746 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 96), uint8] */, dtype="uint8") /* ty=Tensor[(8, 96), uint8] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %748 = %738.0;
  %749 = %743.0;
  %750 = bitwise_and(%746, %747) /* ty=Tensor[(8, 96), uint8] */;
  (%748, %749, %750)
}

def @func_4393() -> (Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), bool], Tensor[(4, 220), int32], Tensor[(16, 9, 9), uint32], Tensor[(16, 9, 9), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %751 = @func_1518() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %752 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 220), int32] */, dtype="int32") /* ty=Tensor[(4, 220), int32] */;
  %753 = reshape(%752, newshape=[16, 5, 11]) /* ty=Tensor[(16, 5, 11), int32] */;
  %754 = @func_1439(%753) /* ty=(Tensor[(16, 5, 11), bool], Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), float64]) */;
  %755 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 9, 9), float64] */, dtype="float64") /* ty=Tensor[(16, 9, 9), float64] */;
  %756 = sinh(%755) /* ty=Tensor[(16, 9, 9), float64] */;
  %757 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 9, 9), float64] */, dtype="float32") /* ty=Tensor[(16, 9, 9), float32] */;
  %758 = acos(%757) /* ty=Tensor[(16, 9, 9), float32] */;
  %759 = cast(%758, dtype="uint32") /* ty=Tensor[(16, 9, 9), uint32] */;
  %760 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%756, dtype="uint32") /* ty=Tensor[(16, 9, 9), uint32] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %763 = cast(%758, dtype="float64") /* ty=Tensor[(16, 9, 9), float64] */;
  %764 = @func_2298() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %765 = @func_153() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %766 = %751.0;
  %767 = %754.0;
  %768 = right_shift(%761, %762) /* ty=Tensor[(16, 9, 9), uint32] */;
  %769 = rsqrt(%763) /* ty=Tensor[(16, 9, 9), float64] */;
  %770 = %764.1;
  %771 = %765.0;
  (%766, %767, meta[relay.Constant][35] /* ty=Tensor[(4, 220), int32] */, %768, %769, %770, %771)
}

def @func_2250(%var_2234: Tensor[(240), int8]) -> (Tensor[(12, 16, 2), bool], Tensor[(5, 4, 12), int8], Tensor[(240), int8]) {
  %772 = cast(%var_2234, dtype="int8") /* ty=Tensor[(240), int8] */;
  %773 = reshape(%772, newshape=[5, 4, 12]) /* ty=Tensor[(5, 4, 12), int8] */;
  %774 = @func_1758(%773) /* ty=(Tensor[(5, 4, 12), int8],) */;
  %775 = @func_367() /* ty=Tensor[(12, 16, 2), bool] */;
  %776 = %774.0;
  (%775, %776, %var_2234)
}

def @func_1637() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %777 = @func_1357() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %778 = @func_523() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %779 = %777.0;
  %780 = @func_367() /* ty=Tensor[(12, 16, 2), bool] */;
  %781 = %778.0;
  (%779, %780, %781)
}

def @func_428() -> Tensor[(12, 16, 2), bool] {
  @func_426() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_2253(%var_2251: Tensor[(240), int8]) -> (Tensor[(12, 16, 2), bool], Tensor[(5, 4, 12), int8], Tensor[(240), int8]) {
  @func_2250(%var_2251) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(5, 4, 12), int8], Tensor[(240), int8]) */
}

def @func_5118(%var_5095: Tensor[(16, 2, 8), float32], %var_5107: Tensor[(16, 2, 8), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(16, 2, 8), int32]) {
  %782 = cast(%var_5095, dtype="float32") /* ty=Tensor[(16, 2, 8), float32] */;
  %783 = sqrt(%782) /* ty=Tensor[(16, 2, 8), float32] */;
  %784 = cast(%var_5107, dtype="int32") /* ty=Tensor[(16, 2, 8), int32] */;
  %785 = shape_of(%783, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%783, dtype="int32") /* ty=Tensor[(16, 2, 8), int32] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %788 = @func_433() /* ty=Tensor[(12, 16, 2), bool] */;
  %789 = multiply(%786, %787) /* ty=Tensor[(16, 2, 8), int32] */;
  (%788, %789)
}

def @func_4003(%var_4001: Tensor[(8, 7, 4), float32]) -> (Tensor[(8, 7, 4), float32],) {
  @func_4000(%var_4001) /* ty=(Tensor[(8, 7, 4), float32],) */
}

def @func_834() -> (Tensor[(12, 16, 2), bool],) {
  %790 = @func_225() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %791 = %790.0;
  (%791,)
}

def @func_4425(%var_4396: Tensor[(4, 4), float32]) -> (Tensor[(4, 4), float32], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) {
  %792 = cast(%var_4396, dtype="float32") /* ty=Tensor[(4, 4), float32] */;
  %793 = @func_2499() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %794 = cos(%792) /* ty=Tensor[(4, 4), float32] */;
  %795 = @func_3906() /* ty=Tensor[(12, 16, 2), bool] */;
  %796 = %793.0;
  (%794, %795, %796)
}

def @func_4742() -> (Tensor[(12, 16, 2), bool],) {
  @func_4740() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_5837() -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
  %801 = fn () -> (Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) {
    %797 = @func_454() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
    %798 = @func_2211() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64]) */;
    %799 = %797.0;
    %800 = %798.0;
    (%799, %800)
  };
  %801() /* ty=(Tensor[(12, 16, 2), float64], Tensor[(12, 16, 2), bool]) */
}

def @func_5927(%var_5925: Tensor[(9, 3, 10), float32]) -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), int8]) {
  @func_5924(%var_5925) /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(9, 3, 10), int8]) */
}

def @func_2499() -> (Tensor[(12, 16, 2), bool],) {
  %802 = @func_1357() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %803 = %802.0;
  (%803,)
}

def @func_4485() -> Tensor[(12, 16, 2), bool] {
  %804 = fn () -> Tensor[(12, 16, 2), bool] {
    @func_367() /* ty=Tensor[(12, 16, 2), bool] */
  };
  %804() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_1942() -> Tensor[(9, 3, 10), float32] {
  %805 = @func_1862() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), float32]) */;
  %805.0
}

def @func_4290() -> (Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64]) {
  %806 = @func_1592() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float32]) */;
  %807 = @func_4072() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(8, 14, 10), float64], Tensor[(1120), float64], Tensor[(12, 16, 2), bool], Tensor[(2, 440), int32]) */;
  %808 = %806.1;
  %809 = %807.1;
  (%808, %809)
}

def @func_6527() -> Tensor[(12, 16, 2), bool] {
  @func_6525() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_1439(%var_1414: Tensor[(16, 5, 11), int32]) -> (Tensor[(16, 5, 11), bool], Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), float64]) {
  %810 = cast(%var_1414, dtype="bool") /* ty=Tensor[(16, 5, 11), bool] */;
  %811 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(16, 5, 11), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(meta[relay.Constant][37] /* ty=Tensor[(16, 5, 11), int32] */, dtype="bool") /* ty=Tensor[(16, 5, 11), bool] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %814 = cast(meta[relay.Constant][37] /* ty=Tensor[(16, 5, 11), int32] */, dtype="float64") /* ty=Tensor[(16, 5, 11), float64] */;
  %815 = shape_of(%var_1414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%var_1414, dtype="float64") /* ty=Tensor[(16, 5, 11), float64] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %818 = greater(%812, %813) /* ty=Tensor[(16, 5, 11), bool] */;
  %819 = @func_1185() /* ty=Tensor[(12, 16, 2), bool] */;
  %820 = mod(%816, %817) /* ty=Tensor[(16, 5, 11), float64] */;
  (%818, %819, %820)
}

def @func_4704(%var_4693: Tensor[(4, 160), int16]) -> (Tensor[(12, 16, 2), bool], Tensor[(4, 160), uint32], Tensor[(7, 9, 14), bool], Tensor[(98, 9), uint16]) {
  %821 = @func_2499() /* ty=(Tensor[(12, 16, 2), bool],) */;
  %822 = @func_2036() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(?, 160), int16]) */;
  %823 = %822.1;
  %824 = cast(%823, dtype="uint32") /* ty=Tensor[(?, 160), uint32] */;
  %825 = cast(%var_4693, dtype="uint32") /* ty=Tensor[(4, 160), uint32] */;
  %826 = cast(meta[relay.Constant][38] /* ty=Tensor[(98, 9), uint16] */, dtype="uint16") /* ty=Tensor[(98, 9), uint16] */;
  %827 = reshape(%826, newshape=[7, 9, 14]) /* ty=Tensor[(7, 9, 14), uint16] */;
  %828 = @func_2324(%827) /* ty=(Tensor[(7, 9, 14), bool],) */;
  %829 = %821.0;
  %830 = left_shift(%824, %825) /* ty=Tensor[(4, 160), uint32] */;
  %831 = %828.0;
  (%829, %830, %831, meta[relay.Constant][38] /* ty=Tensor[(98, 9), uint16] */)
}

def @func_4072() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64], Tensor[(8, 14, 10), float64], Tensor[(1120), float64], Tensor[(12, 16, 2), bool], Tensor[(2, 440), int32]) {
  %832 = @func_3055() /* ty=(Tensor[(12, 16, 2), float32], Tensor[(12, 16, 2), float64]) */;
  %833 = cast(meta[relay.Constant][39] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %834 = reshape(%833, newshape=[8, 14, 10]) /* ty=Tensor[(8, 14, 10), float64] */;
  %835 = @func_2386(%834) /* ty=(Tensor[(8, 14, 10), float32], Tensor[(8, 14, 10), float64]) */;
  %836 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 440), int32] */, dtype="int32") /* ty=Tensor[(2, 440), int32] */;
  %837 = reshape(%836, newshape=[16, 5, 11]) /* ty=Tensor[(16, 5, 11), int32] */;
  %838 = @func_1439(%837) /* ty=(Tensor[(16, 5, 11), bool], Tensor[(12, 16, 2), bool], Tensor[(16, 5, 11), float64]) */;
  %839 = @func_433() /* ty=Tensor[(12, 16, 2), bool] */;
  %840 = %832.1;
  %841 = %835.1;
  %842 = %838.1;
  (%839, %840, %841, meta[relay.Constant][39] /* ty=Tensor[(1120), float64] */, %842, meta[relay.Constant][40] /* ty=Tensor[(2, 440), int32] */)
}

def @func_5626() -> (Tensor[(12, 16, 2), float32], Tensor[(16, 5, 11), bool], Tensor[(880), int32]) {
  @func_5624() /* ty=(Tensor[(12, 16, 2), float32], Tensor[(16, 5, 11), bool], Tensor[(880), int32]) */
}

def @func_6118() -> (Tensor[(12, 16, 2), float32],) {
  %843 = @func_2137() /* ty=(Tensor[(12, 16, 2), float32],) */;
  %844 = %843.0;
  (%844,)
}

def @func_565(%var_560: Tensor[(12, 16, 2), bool]) -> (Tensor[(12, 16, 2), int32],) {
  %845 = @func_225() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %846 = %845.0;
  %847 = cast(%var_560, dtype="int32") /* ty=Tensor[(12, 16, 2), int32] */;
  %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%846, dtype="int32") /* ty=Tensor[(12, 16, 2), int32] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %851 = right_shift(%849, %850) /* ty=Tensor[(12, 16, 2), int32] */;
  (%851,)
}

def @func_568(%var_566: Tensor[(12, 16, 2), bool]) -> (Tensor[(12, 16, 2), int32],) {
  @func_565(%var_566) /* ty=(Tensor[(12, 16, 2), int32],) */
}

def @func_2211() -> (Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), float64]) {
  %852 = @func_225() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %853 = @func_367() /* ty=Tensor[(12, 16, 2), bool] */;
  %854 = %852.1;
  %855 = @func_1972() /* ty=Tensor[(12, 16, 2), float64] */;
  (%853, %854, %855)
}

def @func_1187() -> Tensor[(12, 16, 2), bool] {
  @func_1185() /* ty=Tensor[(12, 16, 2), bool] */
}

def @func_3689() -> (Tensor[(12, 16, 2), bool],) {
  @func_3687() /* ty=(Tensor[(12, 16, 2), bool],) */
}

def @func_3687() -> (Tensor[(12, 16, 2), bool],) {
  %856 = @func_225() /* ty=(Tensor[(12, 16, 2), bool], Tensor[(12, 16, 2), bool]) */;
  %857 = %856.0;
  (%857,)
}

def @func_1974() -> Tensor[(12, 16, 2), float64] {
  @func_1972() /* ty=Tensor[(12, 16, 2), float64] */
}

def @func_3451() -> (Tensor[(9, 3, 10), float32],) {
  %858 = @func_1075() /* ty=(Tensor[(9, 3, 10), float32], Tensor[(12, 16, 2), bool]) */;
  %859 = %858.0;
  (%859,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen145/build/output.py", line 2651, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:52:59] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

