==========mod==========
#[version = "0.0.5"]
def @func_12909() -> Tensor[(13, 14, 14), uint32] {
  %0 = @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %0.1
}

def @func_12115() -> Tensor[(13, 14, ?), float32] {
  @func_1918() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_12477() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %1 = @func_2151() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %2 = @func_8805() /* ty=Tensor[(13, 14, ?), float32] */;
  %3 = %1.0;
  (%2, %3)
}

def @func_8120() -> (Tensor[(13, 14, 14), float64],) {
  %4 = @func_5716() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %5 = %4.1;
  (%5,)
}

def @func_7492(%var_7475: Tensor[(13, 14, 10), float32]) -> (Tensor[(13, 14, 10), int16], Tensor[(13, 14, 10), bool]) {
  %6 = @func_5389() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %7 = %6.1;
  %8 = cast(%7, dtype="int16") /* ty=Tensor[(13, 14, ?), int16] */;
  %9 = cast(%var_7475, dtype="int16") /* ty=Tensor[(13, 14, 10), int16] */;
  %10 = cast(%7, dtype="bool") /* ty=Tensor[(13, 14, ?), bool] */;
  %11 = cast(%var_7475, dtype="bool") /* ty=Tensor[(13, 14, 10), bool] */;
  %12 = bitwise_xor(%8, %9) /* ty=Tensor[(13, 14, 10), int16] */;
  %13 = logical_and(%10, %11) /* ty=Tensor[(13, 14, 10), bool] */;
  (%12, %13)
}

def @func_482(%var_454: Tensor[(6, 10, 4), uint16], %var_455: Tensor[(6, 10, 4), uint16]) -> (Tensor[(6, 10, 4), uint16], Tensor[(6, 10, 4), float32]) {
  %14 = cast(%var_455, dtype="uint16") /* ty=Tensor[(6, 10, 4), uint16] */;
  %15 = shape_of(%var_454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%var_454, dtype="uint16") /* ty=Tensor[(6, 10, 4), uint16] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %18 = cast(%var_455, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %19 = right_shift(%16, %17) /* ty=Tensor[(6, 10, 4), uint16] */;
  %20 = log2(%18) /* ty=Tensor[(6, 10, 4), float32] */;
  (%19, %20)
}

def @func_8805() -> Tensor[(13, 14, ?), float32] {
  %21 = @func_6791() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %21.0
}

def @func_7989(%var_7923: Tensor[(3, 12, 8), float64], %var_7985: Tensor[(3, 12, 8), float32]) -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(3, 12, 8), float32], Tensor[(9, 14, 9), float64], Tensor[(1134), float64], Tensor[(3, 12, 8), int64]) {
  %22 = @func_6363() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(3, 6), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */;
  %23 = cast(%var_7923, dtype="float64") /* ty=Tensor[(3, 12, 8), float64] */;
  %24 = sin(%23) /* ty=Tensor[(3, 12, 8), float64] */;
  %25 = cast(%var_7923, dtype="float32") /* ty=Tensor[(3, 12, 8), float32] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%24, dtype="float32") /* ty=Tensor[(3, 12, 8), float32] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %29 = cast(meta[relay.Constant][0] /* ty=Tensor[(1134), float64] */, dtype="float64") /* ty=Tensor[(1134), float64] */;
  %30 = reshape(%29, newshape=[9, 14, 9]) /* ty=Tensor[(9, 14, 9), float64] */;
  %31 = cast(%24, dtype="float32") /* ty=Tensor[(3, 12, 8), float32] */;
  %32 = log10(%31) /* ty=Tensor[(3, 12, 8), float32] */;
  %33 = cast(%var_7985, dtype="int64") /* ty=Tensor[(3, 12, 8), int64] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%32, dtype="int64") /* ty=Tensor[(3, 12, 8), int64] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %37 = @func_6132() /* ty=Tensor[(13, 14, ?), float32] */;
  %38 = %22.5;
  %39 = divide(%27, %28) /* ty=Tensor[(3, 12, 8), float32] */;
  %40 = @func_6271(%30) /* ty=Tensor[(9, 14, 9), float64] */;
  %41 = add(%35, %36) /* ty=Tensor[(3, 12, 8), int64] */;
  (%37, %38, %39, %40, meta[relay.Constant][0] /* ty=Tensor[(1134), float64] */, %41)
}

def @func_3341() -> Tensor[(13, 14, ?), float32] {
  %42 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %42.0
}

def @func_4587() -> Tensor[(13, 14, 14), float64] {
  %43 = @func_2773() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %43.0
}

def @func_9240(%var_9219: Tensor[(450), float32], %var_9220: Tensor[(70), float32]) -> (Tensor[(13, 14, ?), float32], Tensor[(6, 10, 4), uint16], Tensor[(450), float32], Tensor[(70), float32], Tensor[(13, 14, ?), float32]) {
  %44 = @func_3692() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) */;
  %45 = cast(%var_9219, dtype="float32") /* ty=Tensor[(450), float32] */;
  %46 = cast(%var_9220, dtype="float32") /* ty=Tensor[(70), float32] */;
  %47 = reshape(%45, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), float32] */;
  %48 = reshape(%46, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %49 = @func_1562(%47, %48) /* ty=(Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float32], Tensor[(6, 10, 4), uint16], Tensor[(240), uint16], Tensor[(?, 14, 5), bool]) */;
  %50 = %44.1;
  %51 = %49.2;
  %52 = @func_1932() /* ty=Tensor[(13, 14, ?), float32] */;
  (%50, %51, %var_9219, %var_9220, %52)
}

def @func_9828() -> (Tensor[(13, 14, 70), bool],) {
  %53 = @func_7411() /* ty=Tensor[(13, 14, 70), uint16] */;
  %54 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 14, 70), uint16] */, dtype="bool") /* ty=Tensor[(13, 14, 70), bool] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="bool") /* ty=Tensor[(13, 14, 70), bool] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %58 = equal(%56, %57) /* ty=Tensor[(13, 14, 70), bool] */;
  (%58,)
}

def @func_3092() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %59 = @func_2206() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %60 = %59.1;
  %61 = @func_2874() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%60, %61)
}

def @func_9888() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
  %62 = @func_3954() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %63 = @func_5854() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */;
  %64 = %62.0;
  %65 = %63.1;
  (%64, %65)
}

def @func_346(%var_313: uint16, %var_314: Tensor[(16, 14, 14), uint16]) -> Tensor[(16, 14, 14), uint16] {
  %66 = cast(%var_313, dtype="uint16") /* ty=uint16 */;
  %67 = cast(%var_314, dtype="uint16") /* ty=Tensor[(16, 14, 14), uint16] */;
  right_shift(%66, %67) /* ty=Tensor[(16, 14, 14), uint16] */
}

def @func_9387(%var_9363: Tensor[(13, 14, 8), bool]) -> (Tensor[(3, ?, 5), bool], Tensor[(13, 14, 8), float64], Tensor[(13, 14, ?), float32]) {
  %68 = @func_8462() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(3, ?, 5), bool], Tensor[(3, 1, 5), float64], Tensor[(13, 14, 14), uint32]) */;
  %69 = @func_2833() /* ty=(Tensor[(13, 14, ?), bool],) */;
  %70 = %69.0;
  %71 = cast(%70, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
  %72 = cast(%var_9363, dtype="float64") /* ty=Tensor[(13, 14, 8), float64] */;
  %73 = @func_3092() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %74 = %68.1;
  %75 = mod(%71, %72) /* ty=Tensor[(13, 14, 8), float64] */;
  %76 = %73.0;
  (%74, %75, %76)
}

def @func_5030() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %77 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %78 = @func_3692() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) */;
  %79 = @func_3092() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %80 = %77.0;
  %81 = %78.8;
  %82 = %79.1;
  (%80, %81, %82)
}

def @func_10638() -> Tensor[(13, 14, ?), float32] {
  %83 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %83.0
}

def @func_10189() -> Tensor[(13, 14, 14), float64] {
  %84 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %84.0
}

def @func_2367(%var_2354: Tensor[(1, 450), float32], %var_2355: Tensor[(14, 5), float32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(?, 14, 5), bool], Tensor[(1, 450), float32], Tensor[(14, 5), float32], Tensor[(13, 14, ?), float32]) {
  %85 = cast(%var_2354, dtype="float32") /* ty=Tensor[(1, 450), float32] */;
  %86 = cast(%var_2355, dtype="float32") /* ty=Tensor[(14, 5), float32] */;
  %87 = reshape(%85, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), float32] */;
  %88 = reshape(%86, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %89 = @func_1562(%87, %88) /* ty=(Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float32], Tensor[(6, 10, 4), uint16], Tensor[(240), uint16], Tensor[(?, 14, 5), bool]) */;
  %90 = @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */;
  %91 = @func_1932() /* ty=Tensor[(13, 14, ?), float32] */;
  %92 = %89.4;
  %93 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  (%90, %91, %92, %var_2354, %var_2355, %93)
}

def @func_6263() -> (Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float64]) {
  %94 = @func_5276() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %95 = %94.0;
  %96 = cast(%95, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
  %97 = @func_4177() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %98 = %97.1;
  %99 = cast(%98, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
  %100 = tan(%96) /* ty=Tensor[(13, 14, ?), float64] */;
  %101 = acosh(%99) /* ty=Tensor[(13, 14, ?), float64] */;
  (%100, %101)
}

def @func_6363() -> (Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(3, 6), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
  %102 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 6), float64] */;
  %103 = reshape(%102, newshape=[6, 1, 3]) /* ty=Tensor[(6, 1, 3), float64] */;
  %104 = @func_1958(%103) /* ty=(Tensor[(6, 1, 3), float64],) */;
  %105 = @func_2206() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %106 = %105.0;
  %107 = cast(%106, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
  %108 = @func_5342() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %109 = @func_5573() /* ty=Tensor[(13, 14, 14), uint32] */;
  %110 = %104.0;
  %111 = log10(%107) /* ty=Tensor[(13, 14, ?), float64] */;
  %112 = @func_2974() /* ty=Tensor[(13, 14, ?), float32] */;
  %113 = %108.1;
  (%109, %110, meta[relay.Constant][2] /* ty=Tensor[(3, 6), float64] */, %111, %112, %113)
}

def @func_11818() -> (Tensor[(13, 14, 14), float64],) {
  %114 = @func_5030() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %115 = %114.0;
  (%115,)
}

def @func_8130() -> (Tensor[(13, 14, 14), float64],) {
  %116 = @func_7555() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64]) */;
  %117 = %116.0;
  (%117,)
}

def @func_11896() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
  %118 = @func_7073() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %119 = %118.0;
  %120 = cast(%119, dtype="uint32") /* ty=Tensor[(13, 14, 14), uint32] */;
  %121 = reshape(%120, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint32] */;
  %122 = @func_3402(%121) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(6, 1, 3), float64], Tensor[(18), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %123 = %122.4;
  (%119, %123)
}

def @func_3314(%var_3299: Tensor[(13, 14, 14), uint32]) -> Tensor[(13, 14, 14), uint16] {
  %124 = @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */;
  %125 = cast(%var_3299, dtype="uint16") /* ty=Tensor[(13, 14, 14), uint16] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%124, dtype="uint16") /* ty=Tensor[(13, 14, 14), uint16] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%127, %128) /* ty=Tensor[(13, 14, 14), uint16] */
}

def @func_4601() -> (Tensor[(13, 14, 14), uint32],) {
  %129 = @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%129,)
}

def @func_11801(%var_11799: Tensor[(1092), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 6), uint32], Tensor[(1092), float32]) {
  %130 = cast(%var_11799, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %131 = reshape(%130, newshape=[13, 14, 6]) /* ty=Tensor[(13, 14, 6), float32] */;
  %132 = @func_6551(%131) /* ty=(Tensor[(13, 14, 6), int64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 6), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 6), float64]) */;
  %133 = @func_3502() /* ty=Tensor[(13, 14, 14), float64] */;
  %134 = %132.2;
  (%133, %134, %var_11799)
}

def @func_2262() -> Tensor[(13, 14, 14), float64] {
  %135 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %136 = %135.0;
  %137 = cast(%136, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  atanh(%137) /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_12838() -> (Tensor[(13, 14, ?), float32],) {
  %138 = @func_7182() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */;
  %139 = %138.1;
  (%139,)
}

def @func_12742(%var_12737: Tensor[(6, 36), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(6, 4, 9), float64], Tensor[(6, 36), float32]) {
  %140 = @func_6771() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 70), int64]) */;
  %141 = cast(%var_12737, dtype="float32") /* ty=Tensor[(6, 36), float32] */;
  %142 = cast(%var_12737, dtype="float32") /* ty=Tensor[(6, 36), float32] */;
  %143 = reshape(%141, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), float32] */;
  %144 = reshape(%142, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), float32] */;
  %145 = @func_7023(%143, %144) /* ty=(Tensor[(6, 4, 9), int16], Tensor[(6, 4, 9), float64], Tensor[(13, 14, 14), float64]) */;
  %146 = %140.0;
  %147 = %145.1;
  (%146, %147, %var_12737)
}

def @func_4782() -> (Tensor[(13, 14, ?), float32],) {
  %148 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
  (%148,)
}

def @func_11983() -> (Tensor[(13, 14, 70), bool],) {
  %149 = @func_9828() /* ty=(Tensor[(13, 14, 70), bool],) */;
  %150 = %149.0;
  (%150,)
}

def @func_7519() -> Tensor[(3, 8, 15), float32] {
  %151 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 8, 15), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 15), float32] */;
  cos(%151) /* ty=Tensor[(3, 8, 15), float32] */
}

def @func_6876() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(6, 1, 3), float64], Tensor[(18, 1), float64]) {
  %152 = @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */;
  %153 = %152.1;
  %154 = cast(%153, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %155 = reshape(%154, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), bool] */;
  %156 = @func_5194(%155) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %157 = @func_3042() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %158 = cast(meta[relay.Constant][4] /* ty=Tensor[(18, 1), float64] */, dtype="float64") /* ty=Tensor[(18, 1), float64] */;
  %159 = reshape(%158, newshape=[6, 1, 3]) /* ty=Tensor[(6, 1, 3), float64] */;
  %160 = @func_1958(%159) /* ty=(Tensor[(6, 1, 3), float64],) */;
  %161 = @func_3712() /* ty=Tensor[(13, 14, 14), uint32] */;
  %162 = %156.1;
  %163 = %157.0;
  %164 = @func_5550() /* ty=Tensor[(13, 14, 14), float64] */;
  %165 = %160.0;
  (%153, %161, %162, %163, %164, %165, meta[relay.Constant][4] /* ty=Tensor[(18, 1), float64] */)
}

def @func_11184() -> Tensor[(13, 14, ?), float32] {
  %166 = @func_10249() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %166.0
}

def @func_2969() -> Tensor[(13, 14, 14), bool] {
  %167 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %168 = %167.0;
  %169 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 14, 14), float64] */, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %170 = shape_of(%168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%168, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%171, %172) /* ty=Tensor[(13, 14, 14), bool] */
}

def @func_5276() -> (Tensor[(13, 14, ?), float32],) {
  %173 = @func_4699() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, ?), float32]) */;
  %174 = %173.2;
  (%174,)
}

def @func_1932() -> Tensor[(13, 14, ?), float32] {
  @func_1918() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_3402(%var_3377: Tensor[(13, 14, 14), uint32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(6, 1, 3), float64], Tensor[(18), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %175 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %176 = @func_2151() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %177 = %176.0;
  %178 = cast(%var_3377, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%177, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %182 = cast(meta[relay.Constant][6] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %183 = reshape(%182, newshape=[6, 1, 3]) /* ty=Tensor[(6, 1, 3), float64] */;
  %184 = @func_1958(%183) /* ty=(Tensor[(6, 1, 3), float64],) */;
  %185 = @func_3092() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %186 = @func_2151() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %187 = %175.0;
  %188 = subtract(%180, %181) /* ty=Tensor[(13, 14, 14), float32] */;
  %189 = %184.0;
  %190 = %185.1;
  %191 = %186.0;
  %192 = @func_3341() /* ty=Tensor[(13, 14, ?), float32] */;
  (%187, %188, %189, meta[relay.Constant][6] /* ty=Tensor[(18), float64] */, %190, %191, %192)
}

def @func_5242() -> Tensor[(13, 14, 14), bool] {
  @func_2969() /* ty=Tensor[(13, 14, 14), bool] */
}

def @func_5854() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
  %193 = @func_3954() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %194 = @func_5342() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %195 = %193.0;
  %196 = %194.0;
  (%195, %196)
}

def @func_11121() -> Tensor[(13, 14, ?), float32] {
  %197 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %197.0
}

def @func_10444() -> (Tensor[(13, 14, 14), uint32],) {
  %198 = @func_3282() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%198,)
}

def @func_2655() -> Tensor[(13, 14, 14), uint32] {
  %199 = @func_2206() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %199.2
}

def @func_9617() -> Tensor[(70), float32] {
  @func_8845() /* ty=Tensor[(70), float32] */
}

def @func_7890(%var_7885: Tensor[(4, 7, 4), float32]) -> (Tensor[(4, 7, 4), float32],) {
  %200 = cast(%var_7885, dtype="float32") /* ty=Tensor[(4, 7, 4), float32] */;
  %201 = sqrt(%200) /* ty=Tensor[(4, 7, 4), float32] */;
  (%201,)
}

def @func_9290() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
  %202 = @func_7559() /* ty=Tensor[(13, 14, ?), float32] */;
  %203 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
  (%202, %203)
}

def @func_9085() -> Tensor[(13, 14, 14), float64] {
  %204 = @func_8532() /* ty=(Tensor[(13, 14, 70), float64], Tensor[(13, 14, 14), float64]) */;
  %204.1
}

def @func_12105() -> (Tensor[(13, 14, ?), float64], Tensor[(13, 14, 14), uint16]) {
  %205 = @func_6263() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float64]) */;
  %206 = @func_4699() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, ?), float32]) */;
  %207 = %205.1;
  %208 = %206.1;
  (%207, %208)
}

def @func_3226() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
  %209 = @func_2151() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %210 = @func_2773() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %211 = %209.0;
  %212 = %210.0;
  (%211, %212)
}

def @func_12825(%var_12771: Tensor[(240), uint16], %var_12776: Tensor[(7, 10), float32]) -> (Tensor[(13, 14, 14), uint16], Tensor[(240), uint16], Tensor[(13, 14, 14), uint32], Tensor[(7, 10), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 6), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 9), int8], Tensor[(1638), float32]) {
  %213 = cast(%var_12771, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %214 = reshape(%213, newshape=[240]) /* ty=Tensor[(240), uint16] */;
  %215 = @func_5899(%214) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(6, 10, 4), float32], Tensor[(240), uint16], Tensor[(?, 14, 5), bool], Tensor[(13, 14, 14), uint16]) */;
  %216 = cast(%var_12776, dtype="float32") /* ty=Tensor[(7, 10), float32] */;
  %217 = reshape(%216, newshape=[70, 1]) /* ty=Tensor[(70, 1), float32] */;
  %218 = @func_6683(%217) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(1, 14, 5), float32], Tensor[(70, 1), float32]) */;
  %219 = @func_7220() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %220 = @func_6263() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float64]) */;
  %221 = %220.1;
  %222 = cast(%221, dtype="uint32") /* ty=Tensor[(13, 14, ?), uint32] */;
  %223 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 14, 6), float64] */, dtype="uint32") /* ty=Tensor[(13, 14, 6), uint32] */;
  %224 = right_shift(%222, %223) /* ty=Tensor[(13, 14, 6), uint32] */;
  %225 = cast(%224, dtype="float64") /* ty=Tensor[(13, 14, 6), float64] */;
  %226 = cast(%221, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
  %227 = cast(meta[relay.Constant][8] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %228 = reshape(%227, newshape=[13, 14, 9]) /* ty=Tensor[(13, 14, 9), float32] */;
  %229 = %215.4;
  %230 = %218.0;
  %231 = %219.0;
  %232 = power(%225, %226) /* ty=Tensor[(13, 14, 6), float64] */;
  %233 = @func_11157() /* ty=Tensor[(13, 14, ?), float32] */;
  %234 = @func_4882(%228) /* ty=Tensor[(13, 14, 9), int8] */;
  (%229, %var_12771, %230, %var_12776, %231, %232, %233, %234, meta[relay.Constant][8] /* ty=Tensor[(1638), float32] */)
}

def @func_2833() -> (Tensor[(13, 14, ?), bool],) {
  %235 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %236 = %235.0;
  %237 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %238 = %237.0;
  %239 = cast(%238, dtype="bool") /* ty=Tensor[(13, 14, ?), bool] */;
  %240 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(%236, dtype="bool") /* ty=Tensor[(13, 14, ?), bool] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %243 = logical_or(%241, %242) /* ty=Tensor[(13, 14, ?), bool] */;
  (%243,)
}

def @func_10074(%var_10026: Tensor[(7, 12, 5), bool], %var_10027: Tensor[(7, 12, 5), bool]) -> (Tensor[(7, 12, 5), bool],) {
  %244 = cast(%var_10027, dtype="bool") /* ty=Tensor[(7, 12, 5), bool] */;
  %245 = shape_of(%var_10026, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%var_10026, dtype="bool") /* ty=Tensor[(7, 12, 5), bool] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %248 = logical_or(%246, %247) /* ty=Tensor[(7, 12, 5), bool] */;
  (%248,)
}

def @func_5419() -> Tensor[(13, 14, ?), float32] {
  @func_5217() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_10545() -> Tensor[(13, 14, 14), uint32] {
  @func_9658() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_2000() -> (Tensor[(13, 14, 14), uint32],) {
  %249 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  %250 = cast(%249, dtype="uint32") /* ty=Tensor[(13, 14, ?), uint32] */;
  %251 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 14, 14), float32] */, dtype="uint32") /* ty=Tensor[(13, 14, 14), uint32] */;
  %252 = right_shift(%250, %251) /* ty=Tensor[(13, 14, 14), uint32] */;
  (%252,)
}

def @func_9543() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %253 = @func_2124() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %254 = @func_7163() /* ty=Tensor[(13, 14, ?), float32] */;
  %255 = %253.0;
  (%254, %255)
}

def @func_5389() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %256 = @func_2990() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %257 = @func_2603() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %258 = %256.0;
  %259 = %257.1;
  (%258, %259)
}

def @func_6791() -> (Tensor[(13, 14, ?), float32],) {
  %260 = @func_5389() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %261 = %260.1;
  (%261,)
}

def @func_4361(%var_4320: Tensor[(7, 9, 4), float32], %var_4327: Tensor[(18), float64]) -> (Tensor[(6, 1, 3), float64], Tensor[(18), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(7, 9, 4), float64], Tensor[(13, 14, 14), uint32]) {
  %262 = cast(%var_4327, dtype="float64") /* ty=Tensor[(18), float64] */;
  %263 = reshape(%262, newshape=[6, 1, 3]) /* ty=Tensor[(6, 1, 3), float64] */;
  %264 = @func_1958(%263) /* ty=(Tensor[(6, 1, 3), float64],) */;
  %265 = @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %266 = cast(%var_4320, dtype="float32") /* ty=Tensor[(7, 9, 4), float32] */;
  %267 = acos(%266) /* ty=Tensor[(7, 9, 4), float32] */;
  %268 = cast(%267, dtype="float32") /* ty=Tensor[(7, 9, 4), float32] */;
  %269 = sigmoid(%268) /* ty=Tensor[(7, 9, 4), float32] */;
  %270 = cast(%269, dtype="float64") /* ty=Tensor[(7, 9, 4), float64] */;
  %271 = @func_2990() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %272 = %264.0;
  %273 = @func_1932() /* ty=Tensor[(13, 14, ?), float32] */;
  %274 = %265.1;
  %275 = asinh(%270) /* ty=Tensor[(7, 9, 4), float64] */;
  %276 = %271.0;
  (%272, %var_4327, %273, %274, %275, %276)
}

def @func_2030() -> Tensor[(13, 14, 14), uint32] {
  %277 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %277.0
}

def @func_4315() -> (Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(13, 14, ?), float32]) {
  %278 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %279 = %278.0;
  %280 = cast(%279, dtype="uint32") /* ty=Tensor[(13, 14, 14), uint32] */;
  %281 = reshape(%280, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint32] */;
  %282 = @func_3402(%281) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(6, 1, 3), float64], Tensor[(18), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %283 = @func_2603() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %284 = %282.2;
  %285 = %283.1;
  (%279, %284, %285)
}

def @func_9658() -> Tensor[(13, 14, 14), uint32] {
  %286 = @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %286.0
}

def @func_3178() -> (Tensor[(13, 14, ?), int32], Tensor[(13, 14, 14), uint32], Tensor[(70), float32], Tensor[(13, 14, 70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) {
  %287 = @func_1932() /* ty=Tensor[(13, 14, ?), float32] */;
  %288 = @func_2603() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %289 = %288.1;
  %290 = cast(%289, dtype="int32") /* ty=Tensor[(13, 14, ?), int32] */;
  %291 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%287, dtype="int32") /* ty=Tensor[(13, 14, ?), int32] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %294 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %295 = cast(meta[relay.Constant][10] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %296 = reshape(%295, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %297 = @func_2810(%296) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) */;
  %298 = %297.2;
  %299 = cast(%287, dtype="float32") /* ty=Tensor[(13, 14, ?), float32] */;
  %300 = cast(%298, dtype="float32") /* ty=Tensor[(70), float32] */;
  %301 = @func_2773() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %302 = add(%292, %293) /* ty=Tensor[(13, 14, ?), int32] */;
  %303 = %294.0;
  %304 = floor_divide(%299, %300) /* ty=Tensor[(13, 14, 70), float32] */;
  %305 = %301.0;
  %306 = @func_1932() /* ty=Tensor[(13, 14, ?), float32] */;
  (%302, %303, meta[relay.Constant][10] /* ty=Tensor[(70), float32] */, %304, %305, %306)
}

def @func_7220() -> (Tensor[(13, 14, 14), uint32],) {
  %307 = @func_3092() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %308 = %307.1;
  (%308,)
}

def @func_10415() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %309 = @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */;
  %310 = @func_3341() /* ty=Tensor[(13, 14, ?), float32] */;
  %311 = %309.0;
  (%310, %311)
}

def @func_6771() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 70), int64]) {
  %312 = @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */;
  %313 = @func_2833() /* ty=(Tensor[(13, 14, ?), bool],) */;
  %314 = %313.0;
  %315 = @func_3178() /* ty=(Tensor[(13, 14, ?), int32], Tensor[(13, 14, 14), uint32], Tensor[(70), float32], Tensor[(13, 14, 70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) */;
  %316 = %315.2;
  %317 = cast(%314, dtype="int64") /* ty=Tensor[(13, 14, ?), int64] */;
  %318 = cast(%316, dtype="int64") /* ty=Tensor[(70), int64] */;
  %319 = %312.1;
  %320 = minimum(%317, %318) /* ty=Tensor[(13, 14, 70), int64] */;
  (%319, %320)
}

def @func_11351() -> (Tensor[(13, 14, 14), uint32], Tensor[(2, 8, 7), float32], Tensor[(13, 14, ?), float32], Tensor[(2, 56), float64]) {
  %321 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 56), float32] */, dtype="float32") /* ty=Tensor[(2, 56), float32] */;
  %322 = reshape(%321, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float32] */;
  %323 = @func_9004(%322) /* ty=(Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32]) */;
  %324 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 56), float32] */, dtype="float64") /* ty=Tensor[(2, 56), float64] */;
  %325 = @func_11211() /* ty=Tensor[(13, 14, 14), uint32] */;
  %326 = %323.0;
  %327 = @func_11157() /* ty=Tensor[(13, 14, ?), float32] */;
  %328 = acosh(%324) /* ty=Tensor[(2, 56), float64] */;
  (%325, %326, %327, %328)
}

def @func_2990() -> (Tensor[(13, 14, 14), uint32],) {
  %329 = @func_2151() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %330 = %329.0;
  (%330,)
}

def @func_11602() -> (Tensor[(13, 14, ?), float32],) {
  %331 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  (%331,)
}

def @func_1562(%var_1523: Tensor[(10, 5, 9), float32], %var_1543: Tensor[(70), float32]) -> (Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float32], Tensor[(6, 10, 4), uint16], Tensor[(240), uint16], Tensor[(?, 14, 5), bool]) {
  %332 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 9), float32] */;
  %333 = shape_of(%var_1523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%var_1523, dtype="float32") /* ty=Tensor[(10, 5, 9), float32] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %336 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 9), float32] */;
  %337 = cast(meta[relay.Constant][13] /* ty=Tensor[(240), uint16] */, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %338 = cast(meta[relay.Constant][13] /* ty=Tensor[(240), uint16] */, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %339 = reshape(%337, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), uint16] */;
  %340 = reshape(%338, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), uint16] */;
  %341 = @func_482(%339, %340) /* ty=(Tensor[(6, 10, 4), uint16], Tensor[(6, 10, 4), float32]) */;
  %342 = cast(%var_1543, dtype="float32") /* ty=Tensor[(70), float32] */;
  %343 = reshape(%342, newshape=[1, 14, 5]) /* ty=Tensor[(1, 14, 5), float32] */;
  %344 = @func_1411(%343) /* ty=(Tensor[(1, 14, 5), float32],) */;
  %345 = %344.0;
  %346 = cast(%var_1543, dtype="bool") /* ty=Tensor[(70), bool] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%345, dtype="bool") /* ty=Tensor[(1, 14, 5), bool] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %350 = floor_divide(%334, %335) /* ty=Tensor[(10, 5, 9), float32] */;
  %351 = acos(%336) /* ty=Tensor[(10, 5, 9), float32] */;
  %352 = %341.0;
  %353 = logical_or(%348, %349) /* ty=Tensor[(?, 14, 5), bool] */;
  (%350, %351, %352, meta[relay.Constant][13] /* ty=Tensor[(240), uint16] */, %353)
}

def @func_11641() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
  %354 = @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %355 = @func_10863() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %356 = %354.1;
  %357 = %355.0;
  (%356, %357)
}

def @func_5342() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %358 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %359 = @func_3050() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %360 = @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %361 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  %362 = %358.0;
  %363 = %359.0;
  %364 = %360.0;
  (%361, %362, %363, %364)
}

def @func_11711(%var_11704: Tensor[(16, 2, 16), float32]) -> Tensor[(16, 2, 16), float32] {
  %365 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(1, 1, 16), float32] */;
  %366 = cast(%var_11704, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
  divide(%365, %366) /* ty=Tensor[(16, 2, 16), float32] */
}

def @func_1040(%var_1029: Tensor[(14, 6, 15), float32]) -> Tensor[(14, 6, 15), float32] {
  %367 = cast(%var_1029, dtype="float32") /* ty=Tensor[(14, 6, 15), float32] */;
  tan(%367) /* ty=Tensor[(14, 6, 15), float32] */
}

def @func_1411(%var_1407: Tensor[(1, 14, 5), float32]) -> (Tensor[(1, 14, 5), float32],) {
  %368 = cast(%var_1407, dtype="float32") /* ty=Tensor[(1, 14, 5), float32] */;
  %369 = sin(%368) /* ty=Tensor[(1, 14, 5), float32] */;
  (%369,)
}

def @func_12676() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) {
  %370 = @func_7555() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64]) */;
  %371 = @func_10415() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %372 = %370.0;
  %373 = %371.0;
  (%372, %373)
}

def @func_6085(%var_6073: Tensor[(36, 6), uint32]) -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool], Tensor[(18), uint32], Tensor[(13, 14, ?), float32], Tensor[(36, 6), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
  %374 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %375 = cast(meta[relay.Constant][15] /* ty=Tensor[(18), uint32] */, dtype="uint32") /* ty=Tensor[(18), uint32] */;
  %376 = cast(%var_6073, dtype="uint32") /* ty=Tensor[(36, 6), uint32] */;
  %377 = reshape(%375, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), uint32] */;
  %378 = reshape(%376, newshape=[12, 6, 3]) /* ty=Tensor[(12, 6, 3), uint32] */;
  %379 = @func_4540(%377, %378) /* ty=(Tensor[(12, 6, 3), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool]) */;
  %380 = @func_3692() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) */;
  %381 = cast(%var_6073, dtype="float32") /* ty=Tensor[(36, 6), float32] */;
  %382 = @func_4601() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %383 = %374.0;
  %384 = %379.2;
  %385 = %380.0;
  %386 = atanh(%381) /* ty=Tensor[(36, 6), float32] */;
  %387 = %382.0;
  %388 = @func_2874() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%383, %384, meta[relay.Constant][15] /* ty=Tensor[(18), uint32] */, %385, %386, %387, %388)
}

def @func_5550() -> Tensor[(13, 14, 14), float64] {
  %389 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %389.0
}

def @func_5573() -> Tensor[(13, 14, 14), uint32] {
  %390 = @func_3042() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %390.2
}

def @func_2124() -> (Tensor[(13, 14, 14), uint32],) {
  %391 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %392 = %391.0;
  (%392,)
}

def @func_8034(%var_8011: Tensor[(3, 16, 3), bool]) -> (Tensor[(3, 16, 3), bool], Tensor[(13, 14, ?), float32]) {
  %393 = cast(%var_8011, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
  %394 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(3, 16, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 16, 3), bool] */, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %397 = @func_2603() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %398 = logical_and(%395, %396) /* ty=Tensor[(3, 16, 3), bool] */;
  %399 = %397.1;
  (%398, %399)
}

def @func_2773() -> (Tensor[(13, 14, 14), float64],) {
  %400 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %401 = %400.0;
  %402 = cast(%401, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %403 = asin(%402) /* ty=Tensor[(13, 14, 14), float64] */;
  (%403,)
}

def @func_8831() -> (Tensor[(36, 6), uint32],) {
  %404 = @func_6622() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(36, 6), uint32]) */;
  %405 = %404.2;
  (%405,)
}

def @func_9140(%var_9120: Tensor[(13, 14, 10), float32]) -> (Tensor[(13, 14, 10), bool], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) {
  %406 = @func_5217() /* ty=Tensor[(13, 14, ?), float32] */;
  %407 = cast(%406, dtype="bool") /* ty=Tensor[(13, 14, ?), bool] */;
  %408 = cast(%var_9120, dtype="bool") /* ty=Tensor[(13, 14, 10), bool] */;
  %409 = @func_2773() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %410 = @func_4315() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(13, 14, ?), float32]) */;
  %411 = logical_or(%407, %408) /* ty=Tensor[(13, 14, 10), bool] */;
  %412 = %409.0;
  %413 = %410.2;
  (%411, %412, %413)
}

def @func_7023(%var_6937: Tensor[(6, 4, 9), float32], %var_6963: Tensor[(6, 4, 9), float32]) -> (Tensor[(6, 4, 9), int16], Tensor[(6, 4, 9), float64], Tensor[(13, 14, 14), float64]) {
  %414 = cast(%var_6937, dtype="float32") /* ty=Tensor[(6, 4, 9), float32] */;
  %415 = tan(%414) /* ty=Tensor[(6, 4, 9), float32] */;
  %416 = cast(%415, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
  %417 = shape_of(%var_6937, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%var_6937, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = logical_or(%418, %419) /* ty=Tensor[(6, 4, 9), bool] */;
  %421 = cast(%var_6963, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
  %422 = shape_of(%var_6937, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%var_6937, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %425 = less_equal(%423, %424) /* ty=Tensor[(6, 4, 9), bool] */;
  %426 = cast(%425, dtype="int16") /* ty=Tensor[(6, 4, 9), int16] */;
  %427 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%420, dtype="int16") /* ty=Tensor[(6, 4, 9), int16] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %430 = cast(%425, dtype="float64") /* ty=Tensor[(6, 4, 9), float64] */;
  %431 = @func_3692() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) */;
  %432 = right_shift(%428, %429) /* ty=Tensor[(6, 4, 9), int16] */;
  %433 = cos(%430) /* ty=Tensor[(6, 4, 9), float64] */;
  %434 = %431.6;
  (%432, %433, %434)
}

def @func_5591() -> (Tensor[(13, 14, 14), float64],) {
  %435 = @func_4587() /* ty=Tensor[(13, 14, 14), float64] */;
  (%435,)
}

def @func_7182() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
  %436 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  %437 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
  (%436, %437)
}

def @func_12396() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
  %438 = @func_8353() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), float64]) */;
  %439 = %438.1;
  %440 = @func_12373() /* ty=Tensor[(13, 14, 14), float64] */;
  (%439, %440)
}

def @func_7747() -> Tensor[(13, 14, ?), float64] {
  %441 = @func_6263() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float64]) */;
  %441.0
}

def @func_4474(%var_4462: Tensor[(13, 14, 1), float32]) -> Tensor[(13, 14, ?), float32] {
  %442 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %443 = %442.0;
  %444 = cast(%var_4462, dtype="float32") /* ty=Tensor[(13, 14, 1), float32] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="float32") /* ty=Tensor[(13, 14, ?), float32] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%446, %447) /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_8656(%var_8610: Tensor[(13, 14, 10), float32]) -> (Tensor[(13, 14, 14), bool], Tensor[(1, 182), float32], Tensor[(13, 14, 10), int32], Tensor[(70, ?), uint8], Tensor[(13, 14, ?), float32]) {
  %448 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 182), float32] */, dtype="float32") /* ty=Tensor[(1, 182), float32] */;
  %449 = reshape(%448, newshape=[13, 14, 1]) /* ty=Tensor[(13, 14, 1), float32] */;
  %450 = @func_4474(%449) /* ty=Tensor[(13, 14, ?), float32] */;
  %451 = cast(%450, dtype="int32") /* ty=Tensor[(13, 14, ?), int32] */;
  %452 = cast(%var_8610, dtype="int32") /* ty=Tensor[(13, 14, 10), int32] */;
  %453 = cast(meta[relay.Constant][18] /* ty=Tensor[(70, 1), float32] */, dtype="float32") /* ty=Tensor[(70, 1), float32] */;
  %454 = reshape(%453, newshape=[70, 1]) /* ty=Tensor[(70, 1), float32] */;
  %455 = @func_6683(%454) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(1, 14, 5), float32], Tensor[(70, 1), float32]) */;
  %456 = %455.2;
  %457 = cast(%456, dtype="uint8") /* ty=Tensor[(70, 1), uint8] */;
  %458 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(70, 1), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %459 = cast(meta[relay.Constant][18] /* ty=Tensor[(70, 1), float32] */, dtype="uint8") /* ty=Tensor[(70, 1), uint8] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %461 = @func_4782() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %462 = @func_5242() /* ty=Tensor[(13, 14, 14), bool] */;
  %463 = right_shift(%451, %452) /* ty=Tensor[(13, 14, 10), int32] */;
  %464 = minimum(%459, %460) /* ty=Tensor[(70, ?), uint8] */;
  %465 = %461.0;
  (%462, meta[relay.Constant][17] /* ty=Tensor[(1, 182), float32] */, %463, %464, %465)
}

def @func_1958(%var_1955: Tensor[(6, 1, 3), float64]) -> (Tensor[(6, 1, 3), float64],) {
  %466 = cast(%var_1955, dtype="float64") /* ty=Tensor[(6, 1, 3), float64] */;
  %467 = acos(%466) /* ty=Tensor[(6, 1, 3), float64] */;
  (%467,)
}

def @func_5489(%var_5467: Tensor[(216), uint32]) -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), float64], Tensor[(12, 6, 3), uint32], Tensor[(18), uint32], Tensor[(216), uint32], Tensor[(13, 14, ?), float32]) {
  %468 = @func_5030() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %469 = cast(meta[relay.Constant][19] /* ty=Tensor[(18), uint32] */, dtype="uint32") /* ty=Tensor[(18), uint32] */;
  %470 = cast(%var_5467, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %471 = reshape(%469, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), uint32] */;
  %472 = reshape(%470, newshape=[12, 6, 3]) /* ty=Tensor[(12, 6, 3), uint32] */;
  %473 = @func_4540(%471, %472) /* ty=(Tensor[(12, 6, 3), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool]) */;
  %474 = @func_3050() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %475 = @func_3958() /* ty=Tensor[(13, 14, 14), float64] */;
  %476 = @func_2974() /* ty=Tensor[(13, 14, ?), float32] */;
  %477 = %468.0;
  %478 = %473.0;
  %479 = %474.0;
  (%475, %476, %477, %478, meta[relay.Constant][19] /* ty=Tensor[(18), uint32] */, %var_5467, %479)
}

def @func_5370(%var_5344: Tensor[(13, 15, 8), float32]) -> (Tensor[(13, 15, 8), float32], Tensor[(13, 14, 14), float64]) {
  %480 = cast(%var_5344, dtype="float32") /* ty=Tensor[(13, 15, 8), float32] */;
  %481 = sinh(%480) /* ty=Tensor[(13, 15, 8), float32] */;
  %482 = @func_2262() /* ty=Tensor[(13, 14, 14), float64] */;
  (%481, %482)
}

def @func_5128() -> Tensor[(13, 14, 14), uint32] {
  %483 = @func_5030() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %483.2
}

def @func_12373() -> Tensor[(13, 14, 14), float64] {
  @func_2262() /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_9004(%var_8966: Tensor[(2, 8, 7), float32]) -> (Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32]) {
  %484 = cast(%var_8966, dtype="float32") /* ty=Tensor[(2, 8, 7), float32] */;
  %485 = cast(%var_8966, dtype="float32") /* ty=Tensor[(2, 8, 7), float32] */;
  %486 = atan(%484) /* ty=Tensor[(2, 8, 7), float32] */;
  %487 = log10(%485) /* ty=Tensor[(2, 8, 7), float32] */;
  (%486, %487)
}

def @func_8353() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), float64]) {
  %488 = @func_4674() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %489 = @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */;
  %490 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %491 = @func_7781() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32]) */;
  %492 = %488.2;
  %493 = %489.0;
  %494 = %490.0;
  %495 = %491.0;
  (%492, %493, %494, %495)
}

def @func_12440() -> (Tensor[(13, 14, 14), float64], Tensor[(70), float32], Tensor[(70), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %496 = @func_10907() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %497 = cast(meta[relay.Constant][20] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %498 = reshape(%497, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %499 = @func_7274(%498) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(70), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) */;
  %500 = @func_10863() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %501 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %502 = %496.0;
  %503 = %499.2;
  %504 = %500.0;
  %505 = %501.0;
  (%502, %503, meta[relay.Constant][20] /* ty=Tensor[(70), float32] */, %504, %505)
}

def @func_7411() -> Tensor[(13, 14, 70), uint16] {
  %506 = @func_3178() /* ty=(Tensor[(13, 14, ?), int32], Tensor[(13, 14, 14), uint32], Tensor[(70), float32], Tensor[(13, 14, 70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) */;
  %507 = %506.3;
  %508 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 14, 70), float32] */, dtype="uint16") /* ty=Tensor[(13, 14, 70), uint16] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="uint16") /* ty=Tensor[(13, 14, 70), uint16] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  subtract(%510, %511) /* ty=Tensor[(13, 14, 70), uint16] */
}

def @func_4699() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, ?), float32]) {
  %512 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %513 = %512.0;
  %514 = cast(%513, dtype="uint32") /* ty=Tensor[(13, 14, 14), uint32] */;
  %515 = reshape(%514, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint32] */;
  %516 = @func_3954() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %517 = @func_3314(%515) /* ty=Tensor[(13, 14, 14), uint16] */;
  %518 = %516.0;
  (%513, %517, %518)
}

def @func_3712() -> Tensor[(13, 14, 14), uint32] {
  @func_3282() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_2151() -> (Tensor[(13, 14, 14), uint32],) {
  %519 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %520 = %519.0;
  (%520,)
}

def @func_12580(%var_12552: Tensor[(18, 1), uint32], %var_12553: Tensor[(6, 36), uint32]) -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 70), bool], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, ?), float32], Tensor[(18, 1), uint32], Tensor[(6, 36), uint32]) {
  %521 = @func_9828() /* ty=(Tensor[(13, 14, 70), bool],) */;
  %522 = @func_4699() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, ?), float32]) */;
  %523 = @func_12105() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(13, 14, 14), uint16]) */;
  %524 = cast(%var_12552, dtype="uint32") /* ty=Tensor[(18, 1), uint32] */;
  %525 = cast(%var_12553, dtype="uint32") /* ty=Tensor[(6, 36), uint32] */;
  %526 = reshape(%524, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), uint32] */;
  %527 = reshape(%525, newshape=[12, 6, 3]) /* ty=Tensor[(12, 6, 3), uint32] */;
  %528 = @func_4540(%526, %527) /* ty=(Tensor[(12, 6, 3), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool]) */;
  %529 = @func_2974() /* ty=Tensor[(13, 14, ?), float32] */;
  %530 = %521.0;
  %531 = %522.1;
  %532 = %523.1;
  %533 = %528.1;
  (%529, %530, %531, %532, %533, %var_12552, %var_12553)
}

def @func_5748() -> Tensor[(13, 14, 14), uint32] {
  @func_3712() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_8904() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64]) {
  %534 = @func_6263() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float64]) */;
  %535 = @func_8303() /* ty=Tensor[(13, 14, 14), float64] */;
  %536 = %534.1;
  (%535, %536)
}

def @func_10863() -> (Tensor[(13, 14, 14), uint32],) {
  %537 = @func_5389() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %538 = %537.0;
  (%538,)
}

def @func_9949() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float64]) {
  %539 = @func_5276() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %540 = @func_2833() /* ty=(Tensor[(13, 14, ?), bool],) */;
  %541 = %540.0;
  %542 = cast(%541, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
  %543 = %539.0;
  %544 = sin(%542) /* ty=Tensor[(13, 14, ?), float64] */;
  (%543, %544)
}

def @func_6683(%var_6675: Tensor[(70, 1), float32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(1, 14, 5), float32], Tensor[(70, 1), float32]) {
  %545 = @func_5113() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %546 = cast(%var_6675, dtype="float32") /* ty=Tensor[(70, 1), float32] */;
  %547 = reshape(%546, newshape=[1, 14, 5]) /* ty=Tensor[(1, 14, 5), float32] */;
  %548 = @func_1411(%547) /* ty=(Tensor[(1, 14, 5), float32],) */;
  %549 = %545.0;
  %550 = %548.0;
  (%549, %550, %var_6675)
}

def @func_5614(%var_5607: Tensor[(6, 2, 3), float64]) -> Tensor[(6, 2, 3), uint8] {
  %551 = @func_4315() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(13, 14, ?), float32]) */;
  %552 = %551.1;
  %553 = cast(%552, dtype="uint8") /* ty=Tensor[(6, 1, 3), uint8] */;
  %554 = cast(%var_5607, dtype="uint8") /* ty=Tensor[(6, 2, 3), uint8] */;
  bitwise_or(%553, %554) /* ty=Tensor[(6, 2, 3), uint8] */
}

def @func_5194(%var_5148: Tensor[(13, 14, 14), bool]) -> (Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
  %555 = @func_4085() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), uint32]) */;
  %556 = %555.0;
  %557 = cast(%var_5148, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%556, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %561 = less_equal(%559, %560) /* ty=Tensor[(13, 14, 14), bool] */;
  %562 = @func_5128() /* ty=Tensor[(13, 14, 14), uint32] */;
  %563 = @func_5128() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%561, %562, %563)
}

def @func_5660() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(6, 2, 3), uint8], Tensor[(36), float64]) {
  %564 = @func_5389() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %565 = cast(meta[relay.Constant][22] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %566 = reshape(%565, newshape=[6, 2, 3]) /* ty=Tensor[(6, 2, 3), float64] */;
  %567 = @func_5217() /* ty=Tensor[(13, 14, ?), float32] */;
  %568 = %564.1;
  %569 = @func_5419() /* ty=Tensor[(13, 14, ?), float32] */;
  %570 = @func_5614(%566) /* ty=Tensor[(6, 2, 3), uint8] */;
  (%567, %568, %569, %570, meta[relay.Constant][22] /* ty=Tensor[(36), float64] */)
}

def @func_9467(%var_9463: Tensor[(13, 14, 12), float32]) -> (Tensor[(13, 14, 12), int16], Tensor[(13, 14, 12), bool]) {
  %571 = @func_2206() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %572 = %571.1;
  %573 = cast(%572, dtype="int16") /* ty=Tensor[(13, 14, ?), int16] */;
  %574 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 14, 12), float32] */, dtype="int16") /* ty=Tensor[(13, 14, 12), int16] */;
  %575 = cast(%var_9463, dtype="bool") /* ty=Tensor[(13, 14, 12), bool] */;
  %576 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(13, 14, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 14, 12), float32] */, dtype="bool") /* ty=Tensor[(13, 14, 12), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %579 = right_shift(%573, %574) /* ty=Tensor[(13, 14, 12), int16] */;
  %580 = equal(%577, %578) /* ty=Tensor[(13, 14, 12), bool] */;
  (%579, %580)
}

def @func_5832() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %581 = @func_3178() /* ty=(Tensor[(13, 14, ?), int32], Tensor[(13, 14, 14), uint32], Tensor[(70), float32], Tensor[(13, 14, 70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) */;
  %582 = @func_5342() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %583 = %582.2;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(13, 14, ?), float32] */;
  %585 = @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */;
  %586 = %581.4;
  %587 = acos(%584) /* ty=Tensor[(13, 14, ?), float32] */;
  %588 = %585.0;
  (%586, %587, %588)
}

def @func_11759() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
  %589 = @func_9949() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float64]) */;
  %590 = @func_8303() /* ty=Tensor[(13, 14, 14), float64] */;
  %591 = @func_11113() /* ty=Tensor[(13, 14, ?), float32] */;
  %592 = %589.0;
  %593 = @func_8805() /* ty=Tensor[(13, 14, ?), float32] */;
  (%590, %591, %592, %593)
}

def @func_13027() -> (Tensor[(13, 14, 14), uint32],) {
  %594 = @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %595 = %594.1;
  (%595,)
}

def @func_7073() -> (Tensor[(13, 14, 14), uint32],) {
  %596 = @func_3092() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %597 = %596.1;
  (%597,)
}

def @func_8462() -> (Tensor[(13, 14, ?), float64], Tensor[(3, ?, 5), bool], Tensor[(3, 1, 5), float64], Tensor[(13, 14, 14), uint32]) {
  %598 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 1, 5), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 5), float32] */;
  %599 = asin(%598) /* ty=Tensor[(3, 1, 5), float32] */;
  %600 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 1, 5), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 5), float32] */;
  %601 = sigmoid(%600) /* ty=Tensor[(3, 1, 5), float32] */;
  %602 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 1, 5), float32] */, dtype="float64") /* ty=Tensor[(3, 1, 5), float64] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%601, dtype="float64") /* ty=Tensor[(3, 1, 5), float64] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %606 = minimum(%604, %605) /* ty=Tensor[(3, ?, 5), float64] */;
  %607 = cast(%606, dtype="bool") /* ty=Tensor[(3, ?, 5), bool] */;
  %608 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%599, dtype="bool") /* ty=Tensor[(3, 1, 5), bool] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %611 = cast(%601, dtype="float64") /* ty=Tensor[(3, 1, 5), float64] */;
  %612 = @func_5113() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %613 = @func_7747() /* ty=Tensor[(13, 14, ?), float64] */;
  %614 = not_equal(%609, %610) /* ty=Tensor[(3, ?, 5), bool] */;
  %615 = atanh(%611) /* ty=Tensor[(3, 1, 5), float64] */;
  %616 = %612.0;
  (%613, %614, %615, %616)
}

def @func_11662() -> Tensor[(13, 14, 14), uint32] {
  %617 = @func_10216() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %617.0
}

def @func_4838(%var_4821: Tensor[(70), float32]) -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool], Tensor[(1, 450), float32], Tensor[(450), float32], Tensor[(70), float32]) {
  %618 = @func_2833() /* ty=(Tensor[(13, 14, ?), bool],) */;
  %619 = cast(meta[relay.Constant][25] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %620 = cast(%var_4821, dtype="float32") /* ty=Tensor[(70), float32] */;
  %621 = reshape(%619, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
  %622 = reshape(%620, newshape=[14, 5]) /* ty=Tensor[(14, 5), float32] */;
  %623 = @func_2367(%621, %622) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(?, 14, 5), bool], Tensor[(1, 450), float32], Tensor[(14, 5), float32], Tensor[(13, 14, ?), float32]) */;
  %624 = @func_3341() /* ty=Tensor[(13, 14, ?), float32] */;
  %625 = %618.0;
  %626 = %623.3;
  (%624, %625, %626, meta[relay.Constant][25] /* ty=Tensor[(450), float32] */, %var_4821)
}

def @func_6108() -> Tensor[(13, 14, ?), float32] {
  @func_5419() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_6551(%var_6516: Tensor[(13, 14, 6), float32]) -> (Tensor[(13, 14, 6), int64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 6), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 6), float64]) {
  %627 = @func_4932() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32]) */;
  %628 = %627.0;
  %629 = cast(%628, dtype="int64") /* ty=Tensor[(13, 14, ?), int64] */;
  %630 = cast(%var_6516, dtype="int64") /* ty=Tensor[(13, 14, 6), int64] */;
  %631 = cast(%628, dtype="uint32") /* ty=Tensor[(13, 14, ?), uint32] */;
  %632 = cast(%var_6516, dtype="uint32") /* ty=Tensor[(13, 14, 6), uint32] */;
  %633 = cast(%var_6516, dtype="float64") /* ty=Tensor[(13, 14, 6), float64] */;
  %634 = bitwise_or(%629, %630) /* ty=Tensor[(13, 14, 6), int64] */;
  %635 = @func_5573() /* ty=Tensor[(13, 14, 14), uint32] */;
  %636 = multiply(%631, %632) /* ty=Tensor[(13, 14, 6), uint32] */;
  %637 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
  %638 = cosh(%633) /* ty=Tensor[(13, 14, 6), float64] */;
  (%634, %635, %636, %637, %638)
}

def @func_1918() -> Tensor[(13, 14, ?), float32] {
  %639 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 14, 1), float32] */;
  %640 = log2(%639) /* ty=Tensor[(13, 14, 1), float32] */;
  %641 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 14, 1), float32] */;
  %642 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%640, dtype="float32") /* ty=Tensor[(13, 14, 1), float32] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%643, %644) /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_10018(%var_10008: Tensor[(2, 3, 7), float32]) -> (Tensor[(2, 3, 7), float32], Tensor[(13, 14, 14), float64]) {
  %645 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 3, 7), float32] */, dtype="float32") /* ty=Tensor[(2, 3, 7), float32] */;
  %646 = shape_of(%var_10008, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(%var_10008, dtype="float32") /* ty=Tensor[(2, 3, 7), float32] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %649 = @func_8120() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %650 = power(%647, %648) /* ty=Tensor[(2, 3, 7), float32] */;
  %651 = %649.0;
  (%650, %651)
}

def @func_8845() -> Tensor[(70), float32] {
  %652 = @func_3692() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) */;
  %652.5
}

def @func_4882(%var_4875: Tensor[(13, 14, 9), float32]) -> Tensor[(13, 14, 9), int8] {
  %653 = @func_3092() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %654 = %653.0;
  %655 = cast(%654, dtype="int8") /* ty=Tensor[(13, 14, ?), int8] */;
  %656 = cast(%var_4875, dtype="int8") /* ty=Tensor[(13, 14, 9), int8] */;
  bitwise_or(%655, %656) /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_6622() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(36, 6), uint32]) {
  %657 = @func_5716() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %658 = cast(meta[relay.Constant][28] /* ty=Tensor[(36, 6), uint32] */, dtype="uint32") /* ty=Tensor[(36, 6), uint32] */;
  %659 = reshape(%658, newshape=[36, 6]) /* ty=Tensor[(36, 6), uint32] */;
  %660 = @func_6085(%659) /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool], Tensor[(18), uint32], Tensor[(13, 14, ?), float32], Tensor[(36, 6), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %661 = %657.1;
  %662 = %660.0;
  (%661, %662, meta[relay.Constant][28] /* ty=Tensor[(36, 6), uint32] */)
}

def @func_3502() -> Tensor[(13, 14, 14), float64] {
  @func_2262() /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_7332(%var_7326: Tensor[(13, 14, 13), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 13), bool]) {
  %663 = @func_5591() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %664 = @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %665 = @func_4177() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %666 = %665.1;
  %667 = cast(%666, dtype="bool") /* ty=Tensor[(13, 14, ?), bool] */;
  %668 = cast(%var_7326, dtype="bool") /* ty=Tensor[(13, 14, 13), bool] */;
  %669 = %663.0;
  %670 = %664.1;
  %671 = less(%667, %668) /* ty=Tensor[(13, 14, 13), bool] */;
  (%669, %670, %671)
}

def @func_8572(%var_8544: Tensor[(13, 14, 13), int32]) -> (Tensor[(13, 14, 13), int16], Tensor[(13, 14, 14), uint32]) {
  %672 = @func_3178() /* ty=(Tensor[(13, 14, ?), int32], Tensor[(13, 14, 14), uint32], Tensor[(70), float32], Tensor[(13, 14, 70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) */;
  %673 = %672.0;
  %674 = cast(%673, dtype="int16") /* ty=Tensor[(13, 14, ?), int16] */;
  %675 = cast(%var_8544, dtype="int16") /* ty=Tensor[(13, 14, 13), int16] */;
  %676 = @func_4085() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), uint32]) */;
  %677 = subtract(%674, %675) /* ty=Tensor[(13, 14, 13), int16] */;
  %678 = %676.1;
  (%677, %678)
}

def @func_3456() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
  %679 = @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */;
  %680 = @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%679, %680)
}

def @func_6898() -> (Tensor[(13, 14, ?), float32],) {
  %681 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
  (%681,)
}

def @func_6271(%var_6265: Tensor[(9, 14, 9), float64]) -> Tensor[(9, 14, 9), float64] {
  %682 = cast(%var_6265, dtype="float64") /* ty=Tensor[(9, 14, 9), float64] */;
  asinh(%682) /* ty=Tensor[(9, 14, 9), float64] */
}

def @func_7555() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64]) {
  %683 = @func_6363() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(3, 6), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */;
  %684 = @func_3958() /* ty=Tensor[(13, 14, 14), float64] */;
  %685 = %683.3;
  (%684, %685)
}

def @func_12637() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %686 = @func_11896() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %687 = @func_7559() /* ty=Tensor[(13, 14, ?), float32] */;
  %688 = %686.1;
  (%687, %688)
}

def @func_5217() -> Tensor[(13, 14, ?), float32] {
  %689 = @func_3954() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %689.0
}

def @func_2874() -> Tensor[(13, 14, 14), uint32] {
  @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_3692() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) {
  %690 = @func_3050() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %691 = @func_2206() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %692 = %691.0;
  %693 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  %694 = cast(%693, dtype="float32") /* ty=Tensor[(13, 14, ?), float32] */;
  %695 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%692, dtype="float32") /* ty=Tensor[(13, 14, ?), float32] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %698 = @func_2874() /* ty=Tensor[(13, 14, 14), uint32] */;
  %699 = cast(%698, dtype="uint32") /* ty=Tensor[(13, 14, 14), uint32] */;
  %700 = reshape(%699, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint32] */;
  %701 = @func_3402(%700) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(6, 1, 3), float64], Tensor[(18), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %702 = cast(meta[relay.Constant][29] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %703 = reshape(%702, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %704 = @func_2810(%703) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) */;
  %705 = cast(meta[relay.Constant][29] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %706 = reshape(%705, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %707 = @func_2810(%706) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) */;
  %708 = cast(%692, dtype="float32") /* ty=Tensor[(13, 14, ?), float32] */;
  %709 = rsqrt(%708) /* ty=Tensor[(13, 14, ?), float32] */;
  %710 = cast(%709, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
  %711 = %690.0;
  %712 = floor_mod(%696, %697) /* ty=Tensor[(13, 14, ?), float32] */;
  %713 = %701.1;
  %714 = %704.1;
  %715 = %707.3;
  %716 = asinh(%710) /* ty=Tensor[(13, 14, ?), float64] */;
  %717 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  (%711, %712, %698, %713, %714, meta[relay.Constant][29] /* ty=Tensor[(70), float32] */, %715, %716, %717)
}

def @func_9502() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float64]) {
  %718 = @func_7182() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */;
  %719 = @func_6263() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float64]) */;
  %720 = %718.0;
  %721 = %719.1;
  (%720, %721)
}

def @func_5899(%var_5885: Tensor[(240), uint16]) -> (Tensor[(13, 14, 14), float64], Tensor[(6, 10, 4), float32], Tensor[(240), uint16], Tensor[(?, 14, 5), bool], Tensor[(13, 14, 14), uint16]) {
  %722 = @func_5591() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %723 = cast(%var_5885, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %724 = cast(%var_5885, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %725 = reshape(%723, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), uint16] */;
  %726 = reshape(%724, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), uint16] */;
  %727 = @func_482(%725, %726) /* ty=(Tensor[(6, 10, 4), uint16], Tensor[(6, 10, 4), float32]) */;
  %728 = cast(meta[relay.Constant][30] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %729 = reshape(%728, newshape=[1, 14, 5]) /* ty=Tensor[(1, 14, 5), float32] */;
  %730 = @func_1411(%729) /* ty=(Tensor[(1, 14, 5), float32],) */;
  %731 = %730.0;
  %732 = cast(meta[relay.Constant][30] /* ty=Tensor[(70), float32] */, dtype="bool") /* ty=Tensor[(70), bool] */;
  %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%731, dtype="bool") /* ty=Tensor[(1, 14, 5), bool] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %736 = %722.0;
  %737 = cast(%736, dtype="uint32") /* ty=Tensor[(13, 14, 14), uint32] */;
  %738 = reshape(%737, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint32] */;
  %739 = %727.1;
  %740 = logical_and(%734, %735) /* ty=Tensor[(?, 14, 5), bool] */;
  %741 = @func_3314(%738) /* ty=Tensor[(13, 14, 14), uint16] */;
  (%736, %739, %var_5885, %740, %741)
}

def @func_11958(%var_11922: Tensor[(13, 14, 1), float32]) -> (Tensor[(13, 14, ?), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %742 = @func_10618() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(?, 14, 5), bool], Tensor[(240), uint16], Tensor[(70), float32], Tensor[(13, 14, ?), float32]) */;
  %743 = %742.0;
  %744 = cast(%var_11922, dtype="uint32") /* ty=Tensor[(13, 14, 1), uint32] */;
  %745 = shape_of(%743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%743, dtype="uint32") /* ty=Tensor[(13, 14, ?), uint32] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %748 = @func_9050() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %749 = @func_5113() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %750 = @func_5276() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %751 = logical_xor(%746, %747) /* ty=Tensor[(13, 14, ?), uint32] */;
  %752 = %748.0;
  %753 = %749.0;
  %754 = %750.0;
  (%751, %752, %753, %754)
}

def @func_7643() -> (Tensor[(13, 14, 70), float64],) {
  %755 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
  %756 = @func_6771() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 70), int64]) */;
  %757 = %756.1;
  %758 = cast(%755, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
  %759 = cast(%757, dtype="float64") /* ty=Tensor[(13, 14, 70), float64] */;
  %760 = mod(%758, %759) /* ty=Tensor[(13, 14, 70), float64] */;
  (%760,)
}

def @func_4085() -> (Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), uint32]) {
  %761 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %762 = %761.0;
  %763 = cast(%762, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %764 = acos(%763) /* ty=Tensor[(13, 14, 14), float64] */;
  %765 = cast(%762, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %766 = shape_of(%764, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%764, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %769 = greater(%767, %768) /* ty=Tensor[(13, 14, 14), bool] */;
  %770 = @func_3282() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%769, %770)
}

def @func_8281(%var_8233: Tensor[(13, 14, 6), float32]) -> (Tensor[(13, 14, 6), uint16], Tensor[(13, 14, ?), float32], Tensor[(144), bool], Tensor[(?, 14, 5), bool], Tensor[(1, 450), float32], Tensor[(14, 5), float32]) {
  %771 = @func_1932() /* ty=Tensor[(13, 14, ?), float32] */;
  %772 = cast(%771, dtype="uint16") /* ty=Tensor[(13, 14, ?), uint16] */;
  %773 = cast(%var_8233, dtype="uint16") /* ty=Tensor[(13, 14, 6), uint16] */;
  %774 = cast(meta[relay.Constant][31] /* ty=Tensor[(144), bool] */, dtype="bool") /* ty=Tensor[(144), bool] */;
  %775 = reshape(%774, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), bool] */;
  %776 = @func_8034(%775) /* ty=(Tensor[(3, 16, 3), bool], Tensor[(13, 14, ?), float32]) */;
  %777 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 450), float32] */, dtype="float32") /* ty=Tensor[(1, 450), float32] */;
  %778 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 5), float32] */, dtype="float32") /* ty=Tensor[(14, 5), float32] */;
  %779 = reshape(%777, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), float32] */;
  %780 = reshape(%778, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %781 = @func_1562(%779, %780) /* ty=(Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float32], Tensor[(6, 10, 4), uint16], Tensor[(240), uint16], Tensor[(?, 14, 5), bool]) */;
  %782 = bitwise_xor(%772, %773) /* ty=Tensor[(13, 14, 6), uint16] */;
  %783 = %776.1;
  %784 = %781.4;
  (%782, %783, meta[relay.Constant][31] /* ty=Tensor[(144), bool] */, %784, meta[relay.Constant][32] /* ty=Tensor[(1, 450), float32] */, meta[relay.Constant][33] /* ty=Tensor[(14, 5), float32] */)
}

def @func_10249() -> (Tensor[(13, 14, ?), float32],) {
  %785 = @func_6791() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %786 = %785.0;
  (%786,)
}

def @func_8779() -> (Tensor[(13, 14, ?), float32],) {
  %787 = @func_3341() /* ty=Tensor[(13, 14, ?), float32] */;
  (%787,)
}

def @func_7781() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32]) {
  %788 = @func_3958() /* ty=Tensor[(13, 14, 14), float64] */;
  %789 = @func_3502() /* ty=Tensor[(13, 14, 14), float64] */;
  %790 = @func_5128() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%788, %789, %790)
}

def @func_10907() -> (Tensor[(13, 14, 14), float64],) {
  %791 = @func_6622() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(36, 6), uint32]) */;
  %792 = %791.0;
  (%792,)
}

def @func_4932() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32]) {
  %793 = @func_4315() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(13, 14, ?), float32]) */;
  %794 = cast(meta[relay.Constant][34] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %795 = reshape(%794, newshape=[1, 14, 5]) /* ty=Tensor[(1, 14, 5), float32] */;
  %796 = @func_1411(%795) /* ty=(Tensor[(1, 14, 5), float32],) */;
  %797 = @func_3341() /* ty=Tensor[(13, 14, ?), float32] */;
  %798 = @func_2874() /* ty=Tensor[(13, 14, 14), uint32] */;
  %799 = %793.1;
  %800 = %796.0;
  (%797, %798, %799, %800, meta[relay.Constant][34] /* ty=Tensor[(70), float32] */)
}

def @func_5113() -> (Tensor[(13, 14, 14), uint32],) {
  %801 = @func_2874() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%801,)
}

def @func_3042() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %802 = @func_2990() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %803 = @func_2990() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %804 = %802.0;
  %805 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  %806 = %803.0;
  (%804, %805, %806)
}

def @func_11003(%var_11001: Tensor[(42), float32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(42), float32]) {
  %807 = cast(%var_11001, dtype="float32") /* ty=Tensor[(42), float32] */;
  %808 = reshape(%807, newshape=[2, 3, 7]) /* ty=Tensor[(2, 3, 7), float32] */;
  %809 = @func_10018(%808) /* ty=(Tensor[(2, 3, 7), float32], Tensor[(13, 14, 14), float64]) */;
  %810 = @func_3282() /* ty=Tensor[(13, 14, 14), uint32] */;
  %811 = %809.1;
  (%810, %811, %var_11001)
}

def @func_3282() -> Tensor[(13, 14, 14), uint32] {
  %812 = @func_2603() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %812.0
}

def @func_11649() -> (Tensor[(13, 14, 14), float64],) {
  %813 = @func_10678() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %814 = %813.0;
  (%814,)
}

def @func_2232() -> (Tensor[(13, 14, ?), float32],) {
  %815 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
  (%815,)
}

def @func_12274() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
  %816 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %817 = @func_9290() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */;
  %818 = @func_4674() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %819 = @func_10444() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %820 = @func_10907() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %821 = %816.0;
  %822 = %817.1;
  %823 = %818.1;
  %824 = %819.0;
  %825 = %820.0;
  (%821, %822, %823, %824, %825)
}

def @func_7274(%var_7261: Tensor[(70), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(70), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) {
  %826 = @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */;
  %827 = cast(%var_7261, dtype="float32") /* ty=Tensor[(70), float32] */;
  %828 = reshape(%827, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %829 = @func_2810(%828) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) */;
  %830 = @func_6876() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(6, 1, 3), float64], Tensor[(18, 1), float64]) */;
  %831 = %830.1;
  %832 = cast(%831, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %833 = %826.1;
  %834 = %829.2;
  %835 = sinh(%832) /* ty=Tensor[(13, 14, 14), float64] */;
  (%833, %834, %var_7261, %835)
}

def @func_11426() -> (Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), float64]) {
  %836 = @func_10907() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %837 = @func_2969() /* ty=Tensor[(13, 14, 14), bool] */;
  %838 = %836.0;
  (%837, %838)
}

def @func_6132() -> Tensor[(13, 14, ?), float32] {
  %839 = @func_5716() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %839.3
}

def @func_10216() -> (Tensor[(13, 14, 14), uint32],) {
  %840 = @func_4601() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %841 = %840.0;
  (%841,)
}

def @func_3050() -> (Tensor[(13, 14, ?), float32],) {
  %842 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  (%842,)
}

def @func_9050() -> (Tensor[(13, 14, 14), uint32],) {
  %843 = @func_3712() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%843,)
}

def @func_8532() -> (Tensor[(13, 14, 70), float64], Tensor[(13, 14, 14), float64]) {
  %844 = @func_6771() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 70), int64]) */;
  %845 = %844.1;
  %846 = cast(%845, dtype="float64") /* ty=Tensor[(13, 14, 70), float64] */;
  %847 = atanh(%846) /* ty=Tensor[(13, 14, 70), float64] */;
  %848 = @func_4587() /* ty=Tensor[(13, 14, 14), float64] */;
  (%847, %848)
}

def @func_4540(%var_4515: Tensor[(1, 6, 3), uint32], %var_4516: Tensor[(12, 6, 3), uint32]) -> (Tensor[(12, 6, 3), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool]) {
  %849 = cast(%var_4515, dtype="uint32") /* ty=Tensor[(1, 6, 3), uint32] */;
  %850 = cast(%var_4516, dtype="uint32") /* ty=Tensor[(12, 6, 3), uint32] */;
  %851 = @func_3050() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %852 = @func_2833() /* ty=(Tensor[(13, 14, ?), bool],) */;
  %853 = subtract(%849, %850) /* ty=Tensor[(12, 6, 3), uint32] */;
  %854 = %851.0;
  %855 = %852.0;
  (%853, %854, %855)
}

def @func_7559() -> Tensor[(13, 14, ?), float32] {
  %856 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %856.0
}

def @func_10514(%var_10497: Tensor[(216), uint32]) -> (Tensor[(13, 14, ?), bool], Tensor[(3, 6), uint32], Tensor[(216), uint32], Tensor[(13, 14, 2), uint8]) {
  %857 = cast(meta[relay.Constant][35] /* ty=Tensor[(3, 6), uint32] */, dtype="uint32") /* ty=Tensor[(3, 6), uint32] */;
  %858 = cast(%var_10497, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %859 = reshape(%857, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), uint32] */;
  %860 = reshape(%858, newshape=[12, 6, 3]) /* ty=Tensor[(12, 6, 3), uint32] */;
  %861 = @func_4540(%859, %860) /* ty=(Tensor[(12, 6, 3), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool]) */;
  %862 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 14, 2), float32] */, dtype="float32") /* ty=Tensor[(13, 14, 2), float32] */;
  %863 = asinh(%862) /* ty=Tensor[(13, 14, 2), float32] */;
  %864 = @func_4782() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %865 = %864.0;
  %866 = cast(%865, dtype="uint32") /* ty=Tensor[(13, 14, ?), uint32] */;
  %867 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 14, 2), float32] */, dtype="uint32") /* ty=Tensor[(13, 14, 2), uint32] */;
  %868 = bitwise_xor(%866, %867) /* ty=Tensor[(13, 14, 2), uint32] */;
  %869 = cast(%868, dtype="uint8") /* ty=Tensor[(13, 14, 2), uint8] */;
  %870 = shape_of(%863, dtype="int32") /* ty=Tensor[(3), int32] */;
  %871 = cast(%863, dtype="uint8") /* ty=Tensor[(13, 14, 2), uint8] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %873 = %861.2;
  %874 = multiply(%871, %872) /* ty=Tensor[(13, 14, 2), uint8] */;
  (%873, meta[relay.Constant][35] /* ty=Tensor[(3, 6), uint32] */, %var_10497, %874)
}

def @func_3954() -> (Tensor[(13, 14, ?), float32],) {
  %875 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
  (%875,)
}

def @func_12069() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
  %876 = @func_9050() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %877 = @func_10678() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %878 = %876.0;
  %879 = %877.0;
  (%878, %879)
}

def @func_11807() -> Tensor[(13, 14, ?), float32] {
  %880 = @func_11759() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */;
  %880.2
}

def @func_11157() -> Tensor[(13, 14, ?), float32] {
  @func_5217() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_7114(%var_7101: bool, %var_7102: Tensor[(8, 3, 1), bool]) -> Tensor[(8, 3, 1), bool] {
  %881 = cast(%var_7101, dtype="bool") /* ty=bool */;
  %882 = cast(%var_7102, dtype="bool") /* ty=Tensor[(8, 3, 1), bool] */;
  logical_or(%881, %882) /* ty=Tensor[(8, 3, 1), bool] */
}

def @func_8303() -> Tensor[(13, 14, 14), float64] {
  %883 = @func_5591() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %883.0
}

def @func_8072(%var_8070: Tensor[(112), float32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(4, 7, 4), float32], Tensor[(112), float32]) {
  %884 = @func_6876() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(6, 1, 3), float64], Tensor[(18, 1), float64]) */;
  %885 = cast(%var_8070, dtype="float32") /* ty=Tensor[(112), float32] */;
  %886 = reshape(%885, newshape=[4, 7, 4]) /* ty=Tensor[(4, 7, 4), float32] */;
  %887 = @func_7890(%886) /* ty=(Tensor[(4, 7, 4), float32],) */;
  %888 = %884.2;
  %889 = %887.0;
  (%888, %889, %var_8070)
}

def @func_12163() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), float64]) {
  %890 = @func_10309() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %891 = %890.0;
  %892 = @func_3958() /* ty=Tensor[(13, 14, 14), float64] */;
  (%891, %892)
}

def @func_10309() -> (Tensor[(13, 14, ?), float32],) {
  %893 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %894 = %893.0;
  (%894,)
}

def @func_4177() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %895 = @func_3042() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %896 = @func_3282() /* ty=Tensor[(13, 14, 14), uint32] */;
  %897 = %895.1;
  (%896, %897)
}

def @func_2810(%var_2803: Tensor[(70), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) {
  %898 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %899 = %898.0;
  %900 = cast(%899, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %901 = cast(%var_2803, dtype="float32") /* ty=Tensor[(70), float32] */;
  %902 = reshape(%901, newshape=[1, 14, 5]) /* ty=Tensor[(1, 14, 5), float32] */;
  %903 = @func_1411(%902) /* ty=(Tensor[(1, 14, 5), float32],) */;
  %904 = sin(%900) /* ty=Tensor[(13, 14, 14), float64] */;
  %905 = %903.0;
  %906 = @func_2262() /* ty=Tensor[(13, 14, 14), float64] */;
  (%904, %905, %var_2803, %906)
}

def @func_2513() -> (Tensor[(13, 14, 14), float64],) {
  %907 = @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */;
  %908 = cast(%907, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %909 = log10(%908) /* ty=Tensor[(13, 14, 14), float64] */;
  %910 = cast(%909, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %911 = asinh(%910) /* ty=Tensor[(13, 14, 14), float64] */;
  (%911,)
}

def @func_13080() -> (Tensor[(13, 14, 14), uint32],) {
  %912 = @func_2874() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%912,)
}

def @func_11113() -> Tensor[(13, 14, ?), float32] {
  @func_2974() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_5716() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %913 = @func_3042() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %914 = @func_3712() /* ty=Tensor[(13, 14, 14), uint32] */;
  %915 = @func_3958() /* ty=Tensor[(13, 14, 14), float64] */;
  %916 = @func_5573() /* ty=Tensor[(13, 14, 14), uint32] */;
  %917 = %913.1;
  (%914, %915, %916, %917)
}

def @func_5963() -> (Tensor[(13, 14, 14), uint32],) {
  %918 = @func_5573() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%918,)
}

def @func_2974() -> Tensor[(13, 14, ?), float32] {
  @func_1918() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_9277() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
  %919 = @func_5748() /* ty=Tensor[(13, 14, 14), uint32] */;
  %920 = @func_4587() /* ty=Tensor[(13, 14, 14), float64] */;
  (%919, %920)
}

def @main() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(36, 6), uint16]) {
  %921 = @func_12477() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %922 = @func_12838() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %923 = @func_8831() /* ty=(Tensor[(36, 6), uint32],) */;
  %924 = %923.0;
  %925 = cast(%924, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
  %926 = cosh(%925) /* ty=Tensor[(36, 6), float64] */;
  %927 = cast(%924, dtype="uint16") /* ty=Tensor[(36, 6), uint16] */;
  %928 = shape_of(%926, dtype="int32") /* ty=Tensor[(2), int32] */;
  %929 = cast(%926, dtype="uint16") /* ty=Tensor[(36, 6), uint16] */;
  %930 = dyn.reshape(%927, %928, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %931 = %921.0;
  %932 = %922.0;
  %933 = bitwise_xor(%929, %930) /* ty=Tensor[(36, 6), uint16] */;
  (%931, %932, %933)
}

def @func_2603() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %934 = @func_2124() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %935 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %936 = %935.0;
  %937 = cast(%936, dtype="float32") /* ty=Tensor[(13, 14, ?), float32] */;
  %938 = %934.0;
  %939 = asin(%937) /* ty=Tensor[(13, 14, ?), float32] */;
  (%938, %939)
}

def @func_7731() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %940 = @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */;
  %941 = @func_4601() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %942 = @func_3954() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %943 = %940.0;
  %944 = %941.0;
  %945 = @func_2874() /* ty=Tensor[(13, 14, 14), uint32] */;
  %946 = %942.0;
  (%943, %944, %945, %946)
}

def @func_12996(%var_12991: Tensor[(7, 7, 3), int8], %var_12992: Tensor[(7, 7, 3), int8]) -> (Tensor[(7, 7, 3), int8],) {
  %947 = cast(%var_12992, dtype="int8") /* ty=Tensor[(7, 7, 3), int8] */;
  %948 = shape_of(%var_12991, dtype="int32") /* ty=Tensor[(3), int32] */;
  %949 = cast(%var_12991, dtype="int8") /* ty=Tensor[(7, 7, 3), int8] */;
  %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %951 = logical_xor(%949, %950) /* ty=Tensor[(7, 7, 3), int8] */;
  (%951,)
}

def @func_3958() -> Tensor[(13, 14, 14), float64] {
  %952 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %952.0
}

def @func_4674() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %953 = @func_3178() /* ty=(Tensor[(13, 14, ?), int32], Tensor[(13, 14, 14), uint32], Tensor[(70), float32], Tensor[(13, 14, 70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) */;
  %954 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
  %955 = %953.1;
  %956 = @func_2974() /* ty=Tensor[(13, 14, ?), float32] */;
  (%954, %955, %956)
}

def @func_2206() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %957 = @func_2124() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %958 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  %959 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  %960 = %957.0;
  (%958, %959, %960)
}

def @func_2103() -> Tensor[(13, 14, ?), float32] {
  @func_1918() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_11211() -> Tensor[(13, 14, 14), uint32] {
  %961 = @func_2124() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %961.0
}

def @func_7859() -> (Tensor[(8, 12, 7), float64],) {
  %962 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 12, 7), float64] */, dtype="float64") /* ty=Tensor[(8, 12, 7), float64] */;
  %963 = acosh(%962) /* ty=Tensor[(8, 12, 7), float64] */;
  (%963,)
}

def @func_10618() -> (Tensor[(13, 14, ?), float32], Tensor[(?, 14, 5), bool], Tensor[(240), uint16], Tensor[(70), float32], Tensor[(13, 14, ?), float32]) {
  %964 = @func_4674() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %965 = cast(meta[relay.Constant][38] /* ty=Tensor[(240), uint16] */, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %966 = reshape(%965, newshape=[240]) /* ty=Tensor[(240), uint16] */;
  %967 = @func_5899(%966) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(6, 10, 4), float32], Tensor[(240), uint16], Tensor[(?, 14, 5), bool], Tensor[(13, 14, 14), uint16]) */;
  %968 = @func_5030() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %969 = %964.2;
  %970 = %967.3;
  %971 = @func_8845() /* ty=Tensor[(70), float32] */;
  %972 = %968.1;
  (%969, %970, meta[relay.Constant][38] /* ty=Tensor[(240), uint16] */, %971, %972)
}

def @func_10678() -> (Tensor[(13, 14, 14), float64],) {
  %973 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %974 = %973.0;
  (%974,)
}

def @func_7163() -> Tensor[(13, 14, ?), float32] {
  %975 = @func_3692() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) */;
  %975.8
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1566(%var_1564: Tensor[(10, 5, 9), float32], %var_1565: Tensor[(70), float32]) -> (Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float32], Tensor[(6, 10, 4), uint16], Tensor[(240), uint16], Tensor[(?, 14, 5), bool]) {
  @func_1562(%var_1564, %var_1565) /* ty=(Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float32], Tensor[(6, 10, 4), uint16], Tensor[(240), uint16], Tensor[(?, 14, 5), bool]) */
}

def @func_7074() -> (Tensor[(13, 14, 14), uint32],) {
  %2 = fn () -> (Tensor[(13, 14, 14), uint32],) {
    %0 = @func_3092() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
    %1 = %0.1;
    (%1,)
  };
  %2() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_2264() -> Tensor[(13, 14, 14), float64] {
  @func_2262() /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_7893(%var_7891: Tensor[(4, 7, 4), float32]) -> (Tensor[(4, 7, 4), float32],) {
  @func_7890(%var_7891) /* ty=(Tensor[(4, 7, 4), float32],) */
}

def @func_11641() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
  %3 = @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %4 = @func_10863() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %5 = %3.1;
  %6 = %4.0;
  (%5, %6)
}

def @func_11985() -> (Tensor[(13, 14, 70), bool],) {
  @func_11983() /* ty=(Tensor[(13, 14, 70), bool],) */
}

def @func_8120() -> (Tensor[(13, 14, 14), float64],) {
  %7 = @func_5716() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %8 = %7.1;
  (%8,)
}

def @func_11711(%var_11704: Tensor[(16, 2, 16), float32]) -> Tensor[(16, 2, 16), float32] {
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(1, 1, 16), float32] */;
  %10 = cast(%var_11704, dtype="float32") /* ty=Tensor[(16, 2, 16), float32] */;
  divide(%9, %10) /* ty=Tensor[(16, 2, 16), float32] */
}

def @func_6553(%var_6552: Tensor[(13, 14, 6), float32]) -> (Tensor[(13, 14, 6), int64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 6), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 6), float64]) {
  %23 = fn (%var_6516: Tensor[(13, 14, 6), float32]) -> (Tensor[(13, 14, 6), int64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 6), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 6), float64]) {
    %11 = @func_4932() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32]) */;
    %12 = %11.0;
    %13 = cast(%12, dtype="int64") /* ty=Tensor[(13, 14, ?), int64] */;
    %14 = cast(%var_6516, dtype="int64") /* ty=Tensor[(13, 14, 6), int64] */;
    %15 = cast(%12, dtype="uint32") /* ty=Tensor[(13, 14, ?), uint32] */;
    %16 = cast(%var_6516, dtype="uint32") /* ty=Tensor[(13, 14, 6), uint32] */;
    %17 = cast(%var_6516, dtype="float64") /* ty=Tensor[(13, 14, 6), float64] */;
    %18 = bitwise_or(%13, %14) /* ty=Tensor[(13, 14, 6), int64] */;
    %19 = @func_5573() /* ty=Tensor[(13, 14, 14), uint32] */;
    %20 = multiply(%15, %16) /* ty=Tensor[(13, 14, 6), uint32] */;
    %21 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
    %22 = cosh(%17) /* ty=Tensor[(13, 14, 6), float64] */;
    (%18, %19, %20, %21, %22)
  };
  %23(%var_6552) /* ty=(Tensor[(13, 14, 6), int64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 6), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 6), float64]) */
}

def @func_12829(%var_12827: Tensor[(240), uint16], %var_12828: Tensor[(7, 10), float32]) -> (Tensor[(13, 14, 14), uint16], Tensor[(240), uint16], Tensor[(13, 14, 14), uint32], Tensor[(7, 10), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 6), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 9), int8], Tensor[(1638), float32]) {
  @func_12825(%var_12827, %var_12828) /* ty=(Tensor[(13, 14, 14), uint16], Tensor[(240), uint16], Tensor[(13, 14, 14), uint32], Tensor[(7, 10), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 6), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 9), int8], Tensor[(1638), float32]) */
}

def @func_7733() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  @func_7731() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */
}

def @func_6132() -> Tensor[(13, 14, ?), float32] {
  %24 = @func_5716() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %24.3
}

def @func_2233() -> (Tensor[(13, 14, ?), float32],) {
  %26 = fn () -> (Tensor[(13, 14, ?), float32],) {
    %25 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
    (%25,)
  };
  %26() /* ty=(Tensor[(13, 14, ?), float32],) */
}

def @func_7748() -> Tensor[(13, 14, ?), float64] {
  %28 = fn () -> Tensor[(13, 14, ?), float64] {
    %27 = @func_6263() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float64]) */;
    %27.0
  };
  %28() /* ty=Tensor[(13, 14, ?), float64] */
}

def @func_6623() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(36, 6), uint32]) {
  %35 = fn () -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(36, 6), uint32]) {
    %29 = @func_5716() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
    %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(36, 6), uint32] */, dtype="uint32") /* ty=Tensor[(36, 6), uint32] */;
    %31 = reshape(%30, newshape=[36, 6]) /* ty=Tensor[(36, 6), uint32] */;
    %32 = @func_6085(%31) /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool], Tensor[(18), uint32], Tensor[(13, 14, ?), float32], Tensor[(36, 6), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
    %33 = %29.1;
    %34 = %32.0;
    (%33, %34, meta[relay.Constant][1] /* ty=Tensor[(36, 6), uint32] */)
  };
  %35() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(36, 6), uint32]) */
}

def @func_8779() -> (Tensor[(13, 14, ?), float32],) {
  %36 = @func_3341() /* ty=Tensor[(13, 14, ?), float32] */;
  (%36,)
}

def @func_3456() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
  %37 = @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */;
  %38 = @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%37, %38)
}

def @func_4178() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %42 = fn () -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
    %39 = @func_3042() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
    %40 = @func_3282() /* ty=Tensor[(13, 14, 14), uint32] */;
    %41 = %39.1;
    (%40, %41)
  };
  %42() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */
}

def @func_5718() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  @func_5716() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */
}

def @func_7182() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
  %43 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  %44 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
  (%43, %44)
}

def @func_7731() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %45 = @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */;
  %46 = @func_4601() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %47 = @func_3954() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %48 = %45.0;
  %49 = %46.0;
  %50 = @func_2874() /* ty=Tensor[(13, 14, 14), uint32] */;
  %51 = %47.0;
  (%48, %49, %50, %51)
}

def @func_5660() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(6, 2, 3), uint8], Tensor[(36), float64]) {
  %52 = @func_5389() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %54 = reshape(%53, newshape=[6, 2, 3]) /* ty=Tensor[(6, 2, 3), float64] */;
  %55 = @func_5217() /* ty=Tensor[(13, 14, ?), float32] */;
  %56 = %52.1;
  %57 = @func_5419() /* ty=Tensor[(13, 14, ?), float32] */;
  %58 = @func_5614(%54) /* ty=Tensor[(6, 2, 3), uint8] */;
  (%55, %56, %57, %58, meta[relay.Constant][2] /* ty=Tensor[(36), float64] */)
}

def @func_349(%var_347: uint16, %var_348: Tensor[(16, 14, 14), uint16]) -> Tensor[(16, 14, 14), uint16] {
  %61 = fn (%var_313: uint16, %var_314: Tensor[(16, 14, 14), uint16]) -> Tensor[(16, 14, 14), uint16] {
    %59 = cast(%var_313, dtype="uint16") /* ty=uint16 */;
    %60 = cast(%var_314, dtype="uint16") /* ty=Tensor[(16, 14, 14), uint16] */;
    right_shift(%59, %60) /* ty=Tensor[(16, 14, 14), uint16] */
  };
  %61(%var_347, %var_348) /* ty=Tensor[(16, 14, 14), uint16] */
}

def @func_11159() -> Tensor[(13, 14, ?), float32] {
  @func_11157() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_8034(%var_8011: Tensor[(3, 16, 3), bool]) -> (Tensor[(3, 16, 3), bool], Tensor[(13, 14, ?), float32]) {
  %62 = cast(%var_8011, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
  %63 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(3, 16, 3), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 16, 3), bool] */, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %66 = @func_2603() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %67 = logical_and(%64, %65) /* ty=Tensor[(3, 16, 3), bool] */;
  %68 = %66.1;
  (%67, %68)
}

def @func_9278() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
  %71 = fn () -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
    %69 = @func_5748() /* ty=Tensor[(13, 14, 14), uint32] */;
    %70 = @func_4587() /* ty=Tensor[(13, 14, 14), float64] */;
    (%69, %70)
  };
  %71() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */
}

def @func_6271(%var_6265: Tensor[(9, 14, 9), float64]) -> Tensor[(9, 14, 9), float64] {
  %72 = cast(%var_6265, dtype="float64") /* ty=Tensor[(9, 14, 9), float64] */;
  asinh(%72) /* ty=Tensor[(9, 14, 9), float64] */
}

def @func_5855() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
  %77 = fn () -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
    %73 = @func_3954() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %74 = @func_5342() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
    %75 = %73.0;
    %76 = %74.0;
    (%75, %76)
  };
  %77() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */
}

def @func_5491(%var_5490: Tensor[(216), uint32]) -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), float64], Tensor[(12, 6, 3), uint32], Tensor[(18), uint32], Tensor[(216), uint32], Tensor[(13, 14, ?), float32]) {
  %90 = fn (%var_5467: Tensor[(216), uint32]) -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), float64], Tensor[(12, 6, 3), uint32], Tensor[(18), uint32], Tensor[(216), uint32], Tensor[(13, 14, ?), float32]) {
    %78 = @func_5030() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
    %79 = cast(meta[relay.Constant][4] /* ty=Tensor[(18), uint32] */, dtype="uint32") /* ty=Tensor[(18), uint32] */;
    %80 = cast(%var_5467, dtype="uint32") /* ty=Tensor[(216), uint32] */;
    %81 = reshape(%79, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), uint32] */;
    %82 = reshape(%80, newshape=[12, 6, 3]) /* ty=Tensor[(12, 6, 3), uint32] */;
    %83 = @func_4540(%81, %82) /* ty=(Tensor[(12, 6, 3), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool]) */;
    %84 = @func_3050() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %85 = @func_3958() /* ty=Tensor[(13, 14, 14), float64] */;
    %86 = @func_2974() /* ty=Tensor[(13, 14, ?), float32] */;
    %87 = %78.0;
    %88 = %83.0;
    %89 = %84.0;
    (%85, %86, %87, %88, meta[relay.Constant][4] /* ty=Tensor[(18), uint32] */, %var_5467, %89)
  };
  %90(%var_5490) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), float64], Tensor[(12, 6, 3), uint32], Tensor[(18), uint32], Tensor[(216), uint32], Tensor[(13, 14, ?), float32]) */
}

def @func_4315() -> (Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(13, 14, ?), float32]) {
  %91 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %92 = %91.0;
  %93 = cast(%92, dtype="uint32") /* ty=Tensor[(13, 14, 14), uint32] */;
  %94 = reshape(%93, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint32] */;
  %95 = @func_3402(%94) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(6, 1, 3), float64], Tensor[(18), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %96 = @func_2603() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %97 = %95.2;
  %98 = %96.1;
  (%92, %97, %98)
}

def @func_4602() -> (Tensor[(13, 14, 14), uint32],) {
  %100 = fn () -> (Tensor[(13, 14, 14), uint32],) {
    %99 = @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */;
    (%99,)
  };
  %100() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_4934() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32]) {
  @func_4932() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32]) */
}

def @func_8846() -> Tensor[(70), float32] {
  %102 = fn () -> Tensor[(70), float32] {
    %101 = @func_3692() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) */;
    %101.5
  };
  %102() /* ty=Tensor[(70), float32] */
}

def @func_9619() -> Tensor[(70), float32] {
  @func_9617() /* ty=Tensor[(70), float32] */
}

def @func_8532() -> (Tensor[(13, 14, 70), float64], Tensor[(13, 14, 14), float64]) {
  %103 = @func_6771() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 70), int64]) */;
  %104 = %103.1;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(13, 14, 70), float64] */;
  %106 = atanh(%105) /* ty=Tensor[(13, 14, 70), float64] */;
  %107 = @func_4587() /* ty=Tensor[(13, 14, 14), float64] */;
  (%106, %107)
}

def @func_10216() -> (Tensor[(13, 14, 14), uint32],) {
  %108 = @func_4601() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %109 = %108.0;
  (%109,)
}

def @func_8831() -> (Tensor[(36, 6), uint32],) {
  %110 = @func_6622() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(36, 6), uint32]) */;
  %111 = %110.2;
  (%111,)
}

def @func_4782() -> (Tensor[(13, 14, ?), float32],) {
  %112 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
  (%112,)
}

def @func_5420() -> Tensor[(13, 14, ?), float32] {
  %113 = fn () -> Tensor[(13, 14, ?), float32] {
    @func_5217() /* ty=Tensor[(13, 14, ?), float32] */
  };
  %113() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_1562(%var_1523: Tensor[(10, 5, 9), float32], %var_1543: Tensor[(70), float32]) -> (Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float32], Tensor[(6, 10, 4), uint16], Tensor[(240), uint16], Tensor[(?, 14, 5), bool]) {
  %114 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 9), float32] */;
  %115 = shape_of(%var_1523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%var_1523, dtype="float32") /* ty=Tensor[(10, 5, 9), float32] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %118 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(10, 5, 9), float32] */;
  %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(240), uint16] */, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(240), uint16] */, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %121 = reshape(%119, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), uint16] */;
  %122 = reshape(%120, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), uint16] */;
  %123 = @func_482(%121, %122) /* ty=(Tensor[(6, 10, 4), uint16], Tensor[(6, 10, 4), float32]) */;
  %124 = cast(%var_1543, dtype="float32") /* ty=Tensor[(70), float32] */;
  %125 = reshape(%124, newshape=[1, 14, 5]) /* ty=Tensor[(1, 14, 5), float32] */;
  %126 = @func_1411(%125) /* ty=(Tensor[(1, 14, 5), float32],) */;
  %127 = %126.0;
  %128 = cast(%var_1543, dtype="bool") /* ty=Tensor[(70), bool] */;
  %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%127, dtype="bool") /* ty=Tensor[(1, 14, 5), bool] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %132 = floor_divide(%116, %117) /* ty=Tensor[(10, 5, 9), float32] */;
  %133 = acos(%118) /* ty=Tensor[(10, 5, 9), float32] */;
  %134 = %123.0;
  %135 = logical_or(%130, %131) /* ty=Tensor[(?, 14, 5), bool] */;
  (%132, %133, %134, meta[relay.Constant][6] /* ty=Tensor[(240), uint16] */, %135)
}

def @func_8074(%var_8073: Tensor[(112), float32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(4, 7, 4), float32], Tensor[(112), float32]) {
  %142 = fn (%var_8070: Tensor[(112), float32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(4, 7, 4), float32], Tensor[(112), float32]) {
    %136 = @func_6876() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(6, 1, 3), float64], Tensor[(18, 1), float64]) */;
    %137 = cast(%var_8070, dtype="float32") /* ty=Tensor[(112), float32] */;
    %138 = reshape(%137, newshape=[4, 7, 4]) /* ty=Tensor[(4, 7, 4), float32] */;
    %139 = @func_7890(%138) /* ty=(Tensor[(4, 7, 4), float32],) */;
    %140 = %136.2;
    %141 = %139.0;
    (%140, %141, %var_8070)
  };
  %142(%var_8073) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(4, 7, 4), float32], Tensor[(112), float32]) */
}

def @func_12996(%var_12991: Tensor[(7, 7, 3), int8], %var_12992: Tensor[(7, 7, 3), int8]) -> (Tensor[(7, 7, 3), int8],) {
  %143 = cast(%var_12992, dtype="int8") /* ty=Tensor[(7, 7, 3), int8] */;
  %144 = shape_of(%var_12991, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%var_12991, dtype="int8") /* ty=Tensor[(7, 7, 3), int8] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %147 = logical_xor(%145, %146) /* ty=Tensor[(7, 7, 3), int8] */;
  (%147,)
}

def @func_11958(%var_11922: Tensor[(13, 14, 1), float32]) -> (Tensor[(13, 14, ?), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %148 = @func_10618() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(?, 14, 5), bool], Tensor[(240), uint16], Tensor[(70), float32], Tensor[(13, 14, ?), float32]) */;
  %149 = %148.0;
  %150 = cast(%var_11922, dtype="uint32") /* ty=Tensor[(13, 14, 1), uint32] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%149, dtype="uint32") /* ty=Tensor[(13, 14, ?), uint32] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %154 = @func_9050() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %155 = @func_5113() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %156 = @func_5276() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %157 = logical_xor(%152, %153) /* ty=Tensor[(13, 14, ?), uint32] */;
  %158 = %154.0;
  %159 = %155.0;
  %160 = %156.0;
  (%157, %158, %159, %160)
}

def @func_12398() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
  @func_12396() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */
}

def @func_2604() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %167 = fn () -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
    %161 = @func_2124() /* ty=(Tensor[(13, 14, 14), uint32],) */;
    %162 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %163 = %162.0;
    %164 = cast(%163, dtype="float32") /* ty=Tensor[(13, 14, ?), float32] */;
    %165 = %161.0;
    %166 = asin(%164) /* ty=Tensor[(13, 14, ?), float32] */;
    (%165, %166)
  };
  %167() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */
}

def @func_12373() -> Tensor[(13, 14, 14), float64] {
  @func_2262() /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_9244(%var_9242: Tensor[(450), float32], %var_9243: Tensor[(70), float32]) -> (Tensor[(13, 14, ?), float32], Tensor[(6, 10, 4), uint16], Tensor[(450), float32], Tensor[(70), float32], Tensor[(13, 14, ?), float32]) {
  @func_9240(%var_9242, %var_9243) /* ty=(Tensor[(13, 14, ?), float32], Tensor[(6, 10, 4), uint16], Tensor[(450), float32], Tensor[(70), float32], Tensor[(13, 14, ?), float32]) */
}

def @func_2970() -> Tensor[(13, 14, 14), bool] {
  %174 = fn () -> Tensor[(13, 14, 14), bool] {
    %168 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %169 = %168.0;
    %170 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 14, 14), float64] */, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
    %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
    %172 = cast(%169, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
    %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%172, %173) /* ty=Tensor[(13, 14, 14), bool] */
  };
  %174() /* ty=Tensor[(13, 14, 14), bool] */
}

def @func_12117() -> Tensor[(13, 14, ?), float32] {
  @func_12115() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_5030() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %175 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %176 = @func_3692() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) */;
  %177 = @func_3092() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %178 = %175.0;
  %179 = %176.8;
  %180 = %177.1;
  (%178, %179, %180)
}

def @func_6364() -> (Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(3, 6), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
  %193 = fn () -> (Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(3, 6), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
    %181 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 6), float64] */;
    %182 = reshape(%181, newshape=[6, 1, 3]) /* ty=Tensor[(6, 1, 3), float64] */;
    %183 = @func_1958(%182) /* ty=(Tensor[(6, 1, 3), float64],) */;
    %184 = @func_2206() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
    %185 = %184.0;
    %186 = cast(%185, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
    %187 = @func_5342() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
    %188 = @func_5573() /* ty=Tensor[(13, 14, 14), uint32] */;
    %189 = %183.0;
    %190 = log10(%186) /* ty=Tensor[(13, 14, ?), float64] */;
    %191 = @func_2974() /* ty=Tensor[(13, 14, ?), float32] */;
    %192 = %187.1;
    (%188, %189, meta[relay.Constant][8] /* ty=Tensor[(3, 6), float64] */, %190, %191, %192)
  };
  %193() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(3, 6), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */
}

def @func_2976() -> Tensor[(13, 14, ?), float32] {
  @func_2974() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_11114() -> Tensor[(13, 14, ?), float32] {
  %194 = fn () -> Tensor[(13, 14, ?), float32] {
    @func_2974() /* ty=Tensor[(13, 14, ?), float32] */
  };
  %194() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_3283() -> Tensor[(13, 14, 14), uint32] {
  %196 = fn () -> Tensor[(13, 14, 14), uint32] {
    %195 = @func_2603() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
    %195.0
  };
  %196() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_11186() -> Tensor[(13, 14, ?), float32] {
  @func_11184() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_4841(%var_4839: Tensor[(70), float32]) -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool], Tensor[(1, 450), float32], Tensor[(450), float32], Tensor[(70), float32]) {
  @func_4838(%var_4839) /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool], Tensor[(1, 450), float32], Tensor[(450), float32], Tensor[(70), float32]) */
}

def @func_12070() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
  %201 = fn () -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
    %197 = @func_9050() /* ty=(Tensor[(13, 14, 14), uint32],) */;
    %198 = @func_10678() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %199 = %197.0;
    %200 = %198.0;
    (%199, %200)
  };
  %201() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */
}

def @func_3502() -> Tensor[(13, 14, 14), float64] {
  @func_2262() /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_11650() -> (Tensor[(13, 14, 14), float64],) {
  %204 = fn () -> (Tensor[(13, 14, 14), float64],) {
    %202 = @func_10678() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %203 = %202.0;
    (%203,)
  };
  %204() /* ty=(Tensor[(13, 14, 14), float64],) */
}

def @func_10619() -> (Tensor[(13, 14, ?), float32], Tensor[(?, 14, 5), bool], Tensor[(240), uint16], Tensor[(70), float32], Tensor[(13, 14, ?), float32]) {
  %214 = fn () -> (Tensor[(13, 14, ?), float32], Tensor[(?, 14, 5), bool], Tensor[(240), uint16], Tensor[(70), float32], Tensor[(13, 14, ?), float32]) {
    %205 = @func_4674() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
    %206 = cast(meta[relay.Constant][9] /* ty=Tensor[(240), uint16] */, dtype="uint16") /* ty=Tensor[(240), uint16] */;
    %207 = reshape(%206, newshape=[240]) /* ty=Tensor[(240), uint16] */;
    %208 = @func_5899(%207) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(6, 10, 4), float32], Tensor[(240), uint16], Tensor[(?, 14, 5), bool], Tensor[(13, 14, 14), uint16]) */;
    %209 = @func_5030() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
    %210 = %205.2;
    %211 = %208.3;
    %212 = @func_8845() /* ty=Tensor[(70), float32] */;
    %213 = %209.1;
    (%210, %211, meta[relay.Constant][9] /* ty=Tensor[(240), uint16] */, %212, %213)
  };
  %214() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(?, 14, 5), bool], Tensor[(240), uint16], Tensor[(70), float32], Tensor[(13, 14, ?), float32]) */
}

def @func_6134() -> Tensor[(13, 14, ?), float32] {
  @func_6132() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_4544(%var_4542: Tensor[(1, 6, 3), uint32], %var_4543: Tensor[(12, 6, 3), uint32]) -> (Tensor[(12, 6, 3), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool]) {
  @func_4540(%var_4542, %var_4543) /* ty=(Tensor[(12, 6, 3), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool]) */
}

def @func_10251() -> (Tensor[(13, 14, ?), float32],) {
  @func_10249() /* ty=(Tensor[(13, 14, ?), float32],) */
}

def @func_11818() -> (Tensor[(13, 14, 14), float64],) {
  %215 = @func_5030() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %216 = %215.0;
  (%216,)
}

def @func_10190() -> Tensor[(13, 14, 14), float64] {
  %218 = fn () -> Tensor[(13, 14, 14), float64] {
    %217 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %217.0
  };
  %218() /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_4675() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %223 = fn () -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
    %219 = @func_3178() /* ty=(Tensor[(13, 14, ?), int32], Tensor[(13, 14, 14), uint32], Tensor[(70), float32], Tensor[(13, 14, 70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) */;
    %220 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
    %221 = %219.1;
    %222 = @func_2974() /* ty=Tensor[(13, 14, ?), float32] */;
    (%220, %221, %222)
  };
  %223() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */
}

def @func_6877() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(6, 1, 3), float64], Tensor[(18, 1), float64]) {
  %238 = fn () -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(6, 1, 3), float64], Tensor[(18, 1), float64]) {
    %224 = @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */;
    %225 = %224.1;
    %226 = cast(%225, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
    %227 = reshape(%226, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), bool] */;
    %228 = @func_5194(%227) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
    %229 = @func_3042() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
    %230 = cast(meta[relay.Constant][10] /* ty=Tensor[(18, 1), float64] */, dtype="float64") /* ty=Tensor[(18, 1), float64] */;
    %231 = reshape(%230, newshape=[6, 1, 3]) /* ty=Tensor[(6, 1, 3), float64] */;
    %232 = @func_1958(%231) /* ty=(Tensor[(6, 1, 3), float64],) */;
    %233 = @func_3712() /* ty=Tensor[(13, 14, 14), uint32] */;
    %234 = %228.1;
    %235 = %229.0;
    %236 = @func_5550() /* ty=Tensor[(13, 14, 14), float64] */;
    %237 = %232.0;
    (%225, %233, %234, %235, %236, %237, meta[relay.Constant][10] /* ty=Tensor[(18, 1), float64] */)
  };
  %238() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(6, 1, 3), float64], Tensor[(18, 1), float64]) */
}

def @func_9086() -> Tensor[(13, 14, 14), float64] {
  %240 = fn () -> Tensor[(13, 14, 14), float64] {
    %239 = @func_8532() /* ty=(Tensor[(13, 14, 70), float64], Tensor[(13, 14, 14), float64]) */;
    %239.1
  };
  %240() /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_3044() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  @func_3042() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */
}

def @func_7560() -> Tensor[(13, 14, ?), float32] {
  %242 = fn () -> Tensor[(13, 14, ?), float32] {
    %241 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %241.0
  };
  %242() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_5749() -> Tensor[(13, 14, 14), uint32] {
  %243 = fn () -> Tensor[(13, 14, 14), uint32] {
    @func_3712() /* ty=Tensor[(13, 14, 14), uint32] */
  };
  %243() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_2875() -> Tensor[(13, 14, 14), uint32] {
  %244 = fn () -> Tensor[(13, 14, 14), uint32] {
    @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */
  };
  %244() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_7519() -> Tensor[(3, 8, 15), float32] {
  %245 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 8, 15), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 15), float32] */;
  cos(%245) /* ty=Tensor[(3, 8, 15), float32] */
}

def @func_12744(%var_12743: Tensor[(6, 36), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(6, 4, 9), float64], Tensor[(6, 36), float32]) {
  %254 = fn (%var_12737: Tensor[(6, 36), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(6, 4, 9), float64], Tensor[(6, 36), float32]) {
    %246 = @func_6771() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 70), int64]) */;
    %247 = cast(%var_12737, dtype="float32") /* ty=Tensor[(6, 36), float32] */;
    %248 = cast(%var_12737, dtype="float32") /* ty=Tensor[(6, 36), float32] */;
    %249 = reshape(%247, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), float32] */;
    %250 = reshape(%248, newshape=[6, 4, 9]) /* ty=Tensor[(6, 4, 9), float32] */;
    %251 = @func_7023(%249, %250) /* ty=(Tensor[(6, 4, 9), int16], Tensor[(6, 4, 9), float64], Tensor[(13, 14, 14), float64]) */;
    %252 = %246.0;
    %253 = %251.1;
    (%252, %253, %var_12737)
  };
  %254(%var_12743) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(6, 4, 9), float64], Tensor[(6, 36), float32]) */
}

def @func_8806() -> Tensor[(13, 14, ?), float32] {
  %256 = fn () -> Tensor[(13, 14, ?), float32] {
    %255 = @func_6791() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %255.0
  };
  %256() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_2032() -> Tensor[(13, 14, 14), uint32] {
  @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_5551() -> Tensor[(13, 14, 14), float64] {
  %258 = fn () -> Tensor[(13, 14, 14), float64] {
    %257 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %257.0
  };
  %258() /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_11122() -> Tensor[(13, 14, ?), float32] {
  %260 = fn () -> Tensor[(13, 14, ?), float32] {
    %259 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %259.0
  };
  %260() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_1414(%var_1412: Tensor[(1, 14, 5), float32]) -> (Tensor[(1, 14, 5), float32],) {
  @func_1411(%var_1412) /* ty=(Tensor[(1, 14, 5), float32],) */
}

def @main() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(36, 6), uint16]) {
  %261 = @func_12478() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %262 = @func_12840() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %263 = @func_8833() /* ty=(Tensor[(36, 6), uint32],) */;
  %264 = %263.0;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(36, 6), float64] */;
  %266 = cosh(%265) /* ty=Tensor[(36, 6), float64] */;
  %267 = cast(%264, dtype="uint16") /* ty=Tensor[(36, 6), uint16] */;
  %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(2), int32] */;
  %269 = cast(%266, dtype="uint16") /* ty=Tensor[(36, 6), uint16] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %271 = %261.0;
  %272 = %262.0;
  %273 = bitwise_xor(%269, %270) /* ty=Tensor[(36, 6), uint16] */;
  (%271, %272, %273)
}

def @func_5128() -> Tensor[(13, 14, 14), uint32] {
  %274 = @func_5030() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %274.2
}

def @func_4365(%var_4363: Tensor[(7, 9, 4), float32], %var_4364: Tensor[(18), float64]) -> (Tensor[(6, 1, 3), float64], Tensor[(18), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(7, 9, 4), float64], Tensor[(13, 14, 14), uint32]) {
  @func_4361(%var_4363, %var_4364) /* ty=(Tensor[(6, 1, 3), float64], Tensor[(18), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(7, 9, 4), float64], Tensor[(13, 14, 14), uint32]) */
}

def @func_10863() -> (Tensor[(13, 14, 14), uint32],) {
  %275 = @func_5389() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %276 = %275.0;
  (%276,)
}

def @func_6772() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 70), int64]) {
  %286 = fn () -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 70), int64]) {
    %277 = @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */;
    %278 = @func_2833() /* ty=(Tensor[(13, 14, ?), bool],) */;
    %279 = %278.0;
    %280 = @func_3178() /* ty=(Tensor[(13, 14, ?), int32], Tensor[(13, 14, 14), uint32], Tensor[(70), float32], Tensor[(13, 14, 70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) */;
    %281 = %280.2;
    %282 = cast(%279, dtype="int64") /* ty=Tensor[(13, 14, ?), int64] */;
    %283 = cast(%281, dtype="int64") /* ty=Tensor[(70), int64] */;
    %284 = %277.1;
    %285 = minimum(%282, %283) /* ty=Tensor[(13, 14, 70), int64] */;
    (%284, %285)
  };
  %286() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 70), int64]) */
}

def @func_2206() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %287 = @func_2124() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %288 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  %289 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  %290 = %287.0;
  (%288, %289, %290)
}

def @func_10018(%var_10008: Tensor[(2, 3, 7), float32]) -> (Tensor[(2, 3, 7), float32], Tensor[(13, 14, 14), float64]) {
  %291 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 3, 7), float32] */, dtype="float32") /* ty=Tensor[(2, 3, 7), float32] */;
  %292 = shape_of(%var_10008, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%var_10008, dtype="float32") /* ty=Tensor[(2, 3, 7), float32] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %295 = @func_8120() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %296 = power(%293, %294) /* ty=Tensor[(2, 3, 7), float32] */;
  %297 = %295.0;
  (%296, %297)
}

def @func_7861() -> (Tensor[(8, 12, 7), float64],) {
  @func_7859() /* ty=(Tensor[(8, 12, 7), float64],) */
}

def @func_11428() -> (Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), float64]) {
  @func_11426() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), float64]) */
}

def @func_2812(%var_2811: Tensor[(70), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) {
  %307 = fn (%var_2803: Tensor[(70), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) {
    %298 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
    %299 = %298.0;
    %300 = cast(%299, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
    %301 = cast(%var_2803, dtype="float32") /* ty=Tensor[(70), float32] */;
    %302 = reshape(%301, newshape=[1, 14, 5]) /* ty=Tensor[(1, 14, 5), float32] */;
    %303 = @func_1411(%302) /* ty=(Tensor[(1, 14, 5), float32],) */;
    %304 = sin(%300) /* ty=Tensor[(13, 14, 14), float64] */;
    %305 = %303.0;
    %306 = @func_2262() /* ty=Tensor[(13, 14, 14), float64] */;
    (%304, %305, %var_2803, %306)
  };
  %307(%var_2811) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) */
}

def @func_4589() -> Tensor[(13, 14, 14), float64] {
  @func_4587() /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_3959() -> Tensor[(13, 14, 14), float64] {
  %309 = fn () -> Tensor[(13, 14, 14), float64] {
    %308 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %308.0
  };
  %309() /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_6264() -> (Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float64]) {
  %318 = fn () -> (Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float64]) {
    %310 = @func_5276() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %311 = %310.0;
    %312 = cast(%311, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
    %313 = @func_4177() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
    %314 = %313.1;
    %315 = cast(%314, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
    %316 = tan(%312) /* ty=Tensor[(13, 14, ?), float64] */;
    %317 = acosh(%315) /* ty=Tensor[(13, 14, ?), float64] */;
    (%316, %317)
  };
  %318() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float64]) */
}

def @func_9387(%var_9363: Tensor[(13, 14, 8), bool]) -> (Tensor[(3, ?, 5), bool], Tensor[(13, 14, 8), float64], Tensor[(13, 14, ?), float32]) {
  %319 = @func_8462() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(3, ?, 5), bool], Tensor[(3, 1, 5), float64], Tensor[(13, 14, 14), uint32]) */;
  %320 = @func_2833() /* ty=(Tensor[(13, 14, ?), bool],) */;
  %321 = %320.0;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
  %323 = cast(%var_9363, dtype="float64") /* ty=Tensor[(13, 14, 8), float64] */;
  %324 = @func_3092() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %325 = %319.1;
  %326 = mod(%322, %323) /* ty=Tensor[(13, 14, 8), float64] */;
  %327 = %324.0;
  (%325, %326, %327)
}

def @func_7334(%var_7333: Tensor[(13, 14, 13), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 13), bool]) {
  %337 = fn (%var_7326: Tensor[(13, 14, 13), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 13), bool]) {
    %328 = @func_5591() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %329 = @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
    %330 = @func_4177() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
    %331 = %330.1;
    %332 = cast(%331, dtype="bool") /* ty=Tensor[(13, 14, ?), bool] */;
    %333 = cast(%var_7326, dtype="bool") /* ty=Tensor[(13, 14, 13), bool] */;
    %334 = %328.0;
    %335 = %329.1;
    %336 = less(%332, %333) /* ty=Tensor[(13, 14, 13), bool] */;
    (%334, %335, %336)
  };
  %337(%var_7333) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 13), bool]) */
}

def @func_7644() -> (Tensor[(13, 14, 70), float64],) {
  %344 = fn () -> (Tensor[(13, 14, 70), float64],) {
    %338 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
    %339 = @func_6771() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 70), int64]) */;
    %340 = %339.1;
    %341 = cast(%338, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
    %342 = cast(%340, dtype="float64") /* ty=Tensor[(13, 14, 70), float64] */;
    %343 = mod(%341, %342) /* ty=Tensor[(13, 14, 70), float64] */;
    (%343,)
  };
  %344() /* ty=(Tensor[(13, 14, 70), float64],) */
}

def @func_11662() -> Tensor[(13, 14, 14), uint32] {
  %345 = @func_10216() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %345.0
}

def @func_12584(%var_12582: Tensor[(18, 1), uint32], %var_12583: Tensor[(6, 36), uint32]) -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 70), bool], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, ?), float32], Tensor[(18, 1), uint32], Tensor[(6, 36), uint32]) {
  @func_12580(%var_12582, %var_12583) /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 70), bool], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, ?), float32], Tensor[(18, 1), uint32], Tensor[(6, 36), uint32]) */
}

def @func_3402(%var_3377: Tensor[(13, 14, 14), uint32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(6, 1, 3), float64], Tensor[(18), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %346 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %347 = @func_2151() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %348 = %347.0;
  %349 = cast(%var_3377, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%348, dtype="float32") /* ty=Tensor[(13, 14, 14), float32] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %353 = cast(meta[relay.Constant][13] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %354 = reshape(%353, newshape=[6, 1, 3]) /* ty=Tensor[(6, 1, 3), float64] */;
  %355 = @func_1958(%354) /* ty=(Tensor[(6, 1, 3), float64],) */;
  %356 = @func_3092() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %357 = @func_2151() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %358 = %346.0;
  %359 = subtract(%351, %352) /* ty=Tensor[(13, 14, 14), float32] */;
  %360 = %355.0;
  %361 = %356.1;
  %362 = %357.0;
  %363 = @func_3341() /* ty=Tensor[(13, 14, ?), float32] */;
  (%358, %359, %360, meta[relay.Constant][13] /* ty=Tensor[(18), float64] */, %361, %362, %363)
}

def @func_1042(%var_1041: Tensor[(14, 6, 15), float32]) -> Tensor[(14, 6, 15), float32] {
  %365 = fn (%var_1029: Tensor[(14, 6, 15), float32]) -> Tensor[(14, 6, 15), float32] {
    %364 = cast(%var_1029, dtype="float32") /* ty=Tensor[(14, 6, 15), float32] */;
    tan(%364) /* ty=Tensor[(14, 6, 15), float32] */
  };
  %365(%var_1041) /* ty=Tensor[(14, 6, 15), float32] */
}

def @func_10516(%var_10515: Tensor[(216), uint32]) -> (Tensor[(13, 14, ?), bool], Tensor[(3, 6), uint32], Tensor[(216), uint32], Tensor[(13, 14, 2), uint8]) {
  %384 = fn (%var_10497: Tensor[(216), uint32]) -> (Tensor[(13, 14, ?), bool], Tensor[(3, 6), uint32], Tensor[(216), uint32], Tensor[(13, 14, 2), uint8]) {
    %366 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 6), uint32] */, dtype="uint32") /* ty=Tensor[(3, 6), uint32] */;
    %367 = cast(%var_10497, dtype="uint32") /* ty=Tensor[(216), uint32] */;
    %368 = reshape(%366, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), uint32] */;
    %369 = reshape(%367, newshape=[12, 6, 3]) /* ty=Tensor[(12, 6, 3), uint32] */;
    %370 = @func_4540(%368, %369) /* ty=(Tensor[(12, 6, 3), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool]) */;
    %371 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 14, 2), float32] */, dtype="float32") /* ty=Tensor[(13, 14, 2), float32] */;
    %372 = asinh(%371) /* ty=Tensor[(13, 14, 2), float32] */;
    %373 = @func_4782() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %374 = %373.0;
    %375 = cast(%374, dtype="uint32") /* ty=Tensor[(13, 14, ?), uint32] */;
    %376 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 14, 2), float32] */, dtype="uint32") /* ty=Tensor[(13, 14, 2), uint32] */;
    %377 = bitwise_xor(%375, %376) /* ty=Tensor[(13, 14, 2), uint32] */;
    %378 = cast(%377, dtype="uint8") /* ty=Tensor[(13, 14, 2), uint8] */;
    %379 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
    %380 = cast(%372, dtype="uint8") /* ty=Tensor[(13, 14, 2), uint8] */;
    %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %382 = %370.2;
    %383 = multiply(%380, %381) /* ty=Tensor[(13, 14, 2), uint8] */;
    (%382, meta[relay.Constant][14] /* ty=Tensor[(3, 6), uint32] */, %var_10497, %383)
  };
  %384(%var_10515) /* ty=(Tensor[(13, 14, ?), bool], Tensor[(3, 6), uint32], Tensor[(216), uint32], Tensor[(13, 14, 2), uint8]) */
}

def @func_11714(%var_11712: Tensor[(16, 2, 16), float32]) -> Tensor[(16, 2, 16), float32] {
  @func_11711(%var_11712) /* ty=Tensor[(16, 2, 16), float32] */
}

def @func_12478() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %388 = fn () -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
    %385 = @func_2151() /* ty=(Tensor[(13, 14, 14), uint32],) */;
    %386 = @func_8805() /* ty=Tensor[(13, 14, ?), float32] */;
    %387 = %385.0;
    (%386, %387)
  };
  %388() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */
}

def @func_9889() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
  %393 = fn () -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
    %389 = @func_3954() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %390 = @func_5854() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */;
    %391 = %389.0;
    %392 = %390.1;
    (%391, %392)
  };
  %393() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */
}

def @func_12909() -> Tensor[(13, 14, 14), uint32] {
  %394 = @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %394.1
}

def @func_5130() -> Tensor[(13, 14, 14), uint32] {
  @func_5128() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_7989(%var_7923: Tensor[(3, 12, 8), float64], %var_7985: Tensor[(3, 12, 8), float32]) -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(3, 12, 8), float32], Tensor[(9, 14, 9), float64], Tensor[(1134), float64], Tensor[(3, 12, 8), int64]) {
  %395 = @func_6363() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(3, 6), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */;
  %396 = cast(%var_7923, dtype="float64") /* ty=Tensor[(3, 12, 8), float64] */;
  %397 = sin(%396) /* ty=Tensor[(3, 12, 8), float64] */;
  %398 = cast(%var_7923, dtype="float32") /* ty=Tensor[(3, 12, 8), float32] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%397, dtype="float32") /* ty=Tensor[(3, 12, 8), float32] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %402 = cast(meta[relay.Constant][16] /* ty=Tensor[(1134), float64] */, dtype="float64") /* ty=Tensor[(1134), float64] */;
  %403 = reshape(%402, newshape=[9, 14, 9]) /* ty=Tensor[(9, 14, 9), float64] */;
  %404 = cast(%397, dtype="float32") /* ty=Tensor[(3, 12, 8), float32] */;
  %405 = log10(%404) /* ty=Tensor[(3, 12, 8), float32] */;
  %406 = cast(%var_7985, dtype="int64") /* ty=Tensor[(3, 12, 8), int64] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="int64") /* ty=Tensor[(3, 12, 8), int64] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %410 = @func_6132() /* ty=Tensor[(13, 14, ?), float32] */;
  %411 = %395.5;
  %412 = divide(%400, %401) /* ty=Tensor[(3, 12, 8), float32] */;
  %413 = @func_6271(%403) /* ty=Tensor[(9, 14, 9), float64] */;
  %414 = add(%408, %409) /* ty=Tensor[(3, 12, 8), int64] */;
  (%410, %411, %412, %413, meta[relay.Constant][16] /* ty=Tensor[(1134), float64] */, %414)
}

def @func_12911() -> Tensor[(13, 14, 14), uint32] {
  @func_12909() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_11664() -> Tensor[(13, 14, 14), uint32] {
  @func_11662() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_2262() -> Tensor[(13, 14, 14), float64] {
  %415 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %416 = %415.0;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  atanh(%417) /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_2103() -> Tensor[(13, 14, ?), float32] {
  @func_1918() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_5032() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  @func_5030() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */
}

def @func_3228() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
  @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */
}

def @func_5391() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  @func_5389() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */
}

def @func_9544() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %421 = fn () -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
    %418 = @func_2124() /* ty=(Tensor[(13, 14, 14), uint32],) */;
    %419 = @func_7163() /* ty=Tensor[(13, 14, ?), float32] */;
    %420 = %418.0;
    (%419, %420)
  };
  %421() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */
}

def @func_10908() -> (Tensor[(13, 14, 14), float64],) {
  %424 = fn () -> (Tensor[(13, 14, 14), float64],) {
    %422 = @func_6622() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(36, 6), uint32]) */;
    %423 = %422.0;
    (%423,)
  };
  %424() /* ty=(Tensor[(13, 14, 14), float64],) */
}

def @func_8354() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), float64]) {
  %433 = fn () -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), float64]) {
    %425 = @func_4674() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
    %426 = @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */;
    %427 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %428 = @func_7781() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32]) */;
    %429 = %425.2;
    %430 = %426.0;
    %431 = %427.0;
    %432 = %428.0;
    (%429, %430, %431, %432)
  };
  %433() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), float64]) */
}

def @func_6792() -> (Tensor[(13, 14, ?), float32],) {
  %436 = fn () -> (Tensor[(13, 14, ?), float32],) {
    %434 = @func_5389() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
    %435 = %434.1;
    (%435,)
  };
  %436() /* ty=(Tensor[(13, 14, ?), float32],) */
}

def @func_2153() -> (Tensor[(13, 14, 14), uint32],) {
  @func_2151() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_5370(%var_5344: Tensor[(13, 15, 8), float32]) -> (Tensor[(13, 15, 8), float32], Tensor[(13, 14, 14), float64]) {
  %437 = cast(%var_5344, dtype="float32") /* ty=Tensor[(13, 15, 8), float32] */;
  %438 = sinh(%437) /* ty=Tensor[(13, 15, 8), float32] */;
  %439 = @func_2262() /* ty=Tensor[(13, 14, 14), float64] */;
  (%438, %439)
}

def @func_2834() -> (Tensor[(13, 14, ?), bool],) {
  %449 = fn () -> (Tensor[(13, 14, ?), bool],) {
    %440 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %441 = %440.0;
    %442 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %443 = %442.0;
    %444 = cast(%443, dtype="bool") /* ty=Tensor[(13, 14, ?), bool] */;
    %445 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
    %446 = cast(%441, dtype="bool") /* ty=Tensor[(13, 14, ?), bool] */;
    %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %448 = logical_or(%446, %447) /* ty=Tensor[(13, 14, ?), bool] */;
    (%448,)
  };
  %449() /* ty=(Tensor[(13, 14, ?), bool],) */
}

def @func_10021(%var_10019: Tensor[(2, 3, 7), float32]) -> (Tensor[(2, 3, 7), float32], Tensor[(13, 14, 14), float64]) {
  @func_10018(%var_10019) /* ty=(Tensor[(2, 3, 7), float32], Tensor[(13, 14, 14), float64]) */
}

def @func_5197(%var_5195: Tensor[(13, 14, 14), bool]) -> (Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
  @func_5194(%var_5195) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */
}

def @func_11643() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
  @func_11641() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */
}

def @func_7274(%var_7261: Tensor[(70), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(70), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) {
  %450 = @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */;
  %451 = cast(%var_7261, dtype="float32") /* ty=Tensor[(70), float32] */;
  %452 = reshape(%451, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %453 = @func_2810(%452) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) */;
  %454 = @func_6876() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(6, 1, 3), float64], Tensor[(18, 1), float64]) */;
  %455 = %454.1;
  %456 = cast(%455, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
  %457 = %450.1;
  %458 = %453.2;
  %459 = sinh(%456) /* ty=Tensor[(13, 14, 14), float64] */;
  (%457, %458, %var_7261, %459)
}

def @func_11157() -> Tensor[(13, 14, ?), float32] {
  @func_5217() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_4699() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, ?), float32]) {
  %460 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %461 = %460.0;
  %462 = cast(%461, dtype="uint32") /* ty=Tensor[(13, 14, 14), uint32] */;
  %463 = reshape(%462, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint32] */;
  %464 = @func_3954() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %465 = @func_3314(%463) /* ty=Tensor[(13, 14, 14), uint16] */;
  %466 = %464.0;
  (%461, %465, %466)
}

def @func_4361(%var_4320: Tensor[(7, 9, 4), float32], %var_4327: Tensor[(18), float64]) -> (Tensor[(6, 1, 3), float64], Tensor[(18), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(7, 9, 4), float64], Tensor[(13, 14, 14), uint32]) {
  %467 = cast(%var_4327, dtype="float64") /* ty=Tensor[(18), float64] */;
  %468 = reshape(%467, newshape=[6, 1, 3]) /* ty=Tensor[(6, 1, 3), float64] */;
  %469 = @func_1958(%468) /* ty=(Tensor[(6, 1, 3), float64],) */;
  %470 = @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %471 = cast(%var_4320, dtype="float32") /* ty=Tensor[(7, 9, 4), float32] */;
  %472 = acos(%471) /* ty=Tensor[(7, 9, 4), float32] */;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(7, 9, 4), float32] */;
  %474 = sigmoid(%473) /* ty=Tensor[(7, 9, 4), float32] */;
  %475 = cast(%474, dtype="float64") /* ty=Tensor[(7, 9, 4), float64] */;
  %476 = @func_2990() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %477 = %469.0;
  %478 = @func_1932() /* ty=Tensor[(13, 14, ?), float32] */;
  %479 = %470.1;
  %480 = asinh(%475) /* ty=Tensor[(7, 9, 4), float64] */;
  %481 = %476.0;
  (%477, %var_4327, %478, %479, %480, %481)
}

def @func_5389() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %482 = @func_2990() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %483 = @func_2603() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %484 = %482.0;
  %485 = %483.1;
  (%484, %485)
}

def @func_8572(%var_8544: Tensor[(13, 14, 13), int32]) -> (Tensor[(13, 14, 13), int16], Tensor[(13, 14, 14), uint32]) {
  %486 = @func_3178() /* ty=(Tensor[(13, 14, ?), int32], Tensor[(13, 14, 14), uint32], Tensor[(70), float32], Tensor[(13, 14, 70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) */;
  %487 = %486.0;
  %488 = cast(%487, dtype="int16") /* ty=Tensor[(13, 14, ?), int16] */;
  %489 = cast(%var_8544, dtype="int16") /* ty=Tensor[(13, 14, 13), int16] */;
  %490 = @func_4085() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), uint32]) */;
  %491 = subtract(%488, %489) /* ty=Tensor[(13, 14, 13), int16] */;
  %492 = %490.1;
  (%491, %492)
}

def @func_2655() -> Tensor[(13, 14, 14), uint32] {
  %493 = @func_2206() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %493.2
}

def @func_10417() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  @func_10415() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */
}

def @func_11603() -> (Tensor[(13, 14, ?), float32],) {
  %495 = fn () -> (Tensor[(13, 14, ?), float32],) {
    %494 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
    (%494,)
  };
  %495() /* ty=(Tensor[(13, 14, ?), float32],) */
}

def @func_10249() -> (Tensor[(13, 14, ?), float32],) {
  %496 = @func_6791() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %497 = %496.0;
  (%497,)
}

def @func_6899() -> (Tensor[(13, 14, ?), float32],) {
  %499 = fn () -> (Tensor[(13, 14, ?), float32],) {
    %498 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
    (%498,)
  };
  %499() /* ty=(Tensor[(13, 14, ?), float32],) */
}

def @func_7026(%var_7024: Tensor[(6, 4, 9), float32], %var_7025: Tensor[(6, 4, 9), float32]) -> (Tensor[(6, 4, 9), int16], Tensor[(6, 4, 9), float64], Tensor[(13, 14, 14), float64]) {
  %521 = fn (%var_6937: Tensor[(6, 4, 9), float32], %var_6963: Tensor[(6, 4, 9), float32]) -> (Tensor[(6, 4, 9), int16], Tensor[(6, 4, 9), float64], Tensor[(13, 14, 14), float64]) {
    %500 = cast(%var_6937, dtype="float32") /* ty=Tensor[(6, 4, 9), float32] */;
    %501 = tan(%500) /* ty=Tensor[(6, 4, 9), float32] */;
    %502 = cast(%501, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
    %503 = shape_of(%var_6937, dtype="int32") /* ty=Tensor[(3), int32] */;
    %504 = cast(%var_6937, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
    %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %506 = logical_or(%504, %505) /* ty=Tensor[(6, 4, 9), bool] */;
    %507 = cast(%var_6963, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
    %508 = shape_of(%var_6937, dtype="int32") /* ty=Tensor[(3), int32] */;
    %509 = cast(%var_6937, dtype="bool") /* ty=Tensor[(6, 4, 9), bool] */;
    %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %511 = less_equal(%509, %510) /* ty=Tensor[(6, 4, 9), bool] */;
    %512 = cast(%511, dtype="int16") /* ty=Tensor[(6, 4, 9), int16] */;
    %513 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
    %514 = cast(%506, dtype="int16") /* ty=Tensor[(6, 4, 9), int16] */;
    %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %516 = cast(%511, dtype="float64") /* ty=Tensor[(6, 4, 9), float64] */;
    %517 = @func_3692() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) */;
    %518 = right_shift(%514, %515) /* ty=Tensor[(6, 4, 9), int16] */;
    %519 = cos(%516) /* ty=Tensor[(6, 4, 9), float64] */;
    %520 = %517.6;
    (%518, %519, %520)
  };
  %521(%var_7024, %var_7025) /* ty=(Tensor[(6, 4, 9), int16], Tensor[(6, 4, 9), float64], Tensor[(13, 14, 14), float64]) */
}

def @func_13029() -> (Tensor[(13, 14, 14), uint32],) {
  @func_13027() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_12678() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) {
  @func_12676() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) */
}

def @func_3042() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %522 = @func_2990() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %523 = @func_2990() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %524 = %522.0;
  %525 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  %526 = %523.0;
  (%524, %525, %526)
}

def @func_12275() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
  %537 = fn () -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
    %527 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %528 = @func_9290() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */;
    %529 = @func_4674() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
    %530 = @func_10444() /* ty=(Tensor[(13, 14, 14), uint32],) */;
    %531 = @func_10907() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %532 = %527.0;
    %533 = %528.1;
    %534 = %529.1;
    %535 = %530.0;
    %536 = %531.0;
    (%532, %533, %534, %535, %536)
  };
  %537() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */
}

def @func_12840() -> (Tensor[(13, 14, ?), float32],) {
  @func_12838() /* ty=(Tensor[(13, 14, ?), float32],) */
}

def @func_4587() -> Tensor[(13, 14, 14), float64] {
  %538 = @func_2773() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %538.0
}

def @func_12164() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), float64]) {
  %542 = fn () -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), float64]) {
    %539 = @func_10309() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %540 = %539.0;
    %541 = @func_3958() /* ty=Tensor[(13, 14, 14), float64] */;
    (%540, %541)
  };
  %542() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), float64]) */
}

def @func_5217() -> Tensor[(13, 14, ?), float32] {
  %543 = @func_3954() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %543.0
}

def @func_3694() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) {
  @func_3692() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) */
}

def @func_4885(%var_4883: Tensor[(13, 14, 9), float32]) -> Tensor[(13, 14, 9), int8] {
  @func_4882(%var_4883) /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_9051() -> (Tensor[(13, 14, 14), uint32],) {
  %545 = fn () -> (Tensor[(13, 14, 14), uint32],) {
    %544 = @func_3712() /* ty=Tensor[(13, 14, 14), uint32] */;
    (%544,)
  };
  %545() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_486(%var_484: Tensor[(6, 10, 4), uint16], %var_485: Tensor[(6, 10, 4), uint16]) -> (Tensor[(6, 10, 4), uint16], Tensor[(6, 10, 4), float32]) {
  @func_482(%var_484, %var_485) /* ty=(Tensor[(6, 10, 4), uint16], Tensor[(6, 10, 4), float32]) */
}

def @func_11961(%var_11959: Tensor[(13, 14, 1), float32]) -> (Tensor[(13, 14, ?), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  @func_11958(%var_11959) /* ty=(Tensor[(13, 14, ?), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */
}

def @func_12375() -> Tensor[(13, 14, 14), float64] {
  @func_12373() /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_12440() -> (Tensor[(13, 14, 14), float64], Tensor[(70), float32], Tensor[(70), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %546 = @func_10907() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %547 = cast(meta[relay.Constant][17] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %548 = reshape(%547, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %549 = @func_7274(%548) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(70), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) */;
  %550 = @func_10863() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %551 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %552 = %546.0;
  %553 = %549.2;
  %554 = %550.0;
  %555 = %551.0;
  (%552, %553, meta[relay.Constant][17] /* ty=Tensor[(70), float32] */, %554, %555)
}

def @func_2030() -> Tensor[(13, 14, 14), uint32] {
  %556 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %556.0
}

def @func_7494(%var_7493: Tensor[(13, 14, 10), float32]) -> (Tensor[(13, 14, 10), int16], Tensor[(13, 14, 10), bool]) {
  %565 = fn (%var_7475: Tensor[(13, 14, 10), float32]) -> (Tensor[(13, 14, 10), int16], Tensor[(13, 14, 10), bool]) {
    %557 = @func_5389() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
    %558 = %557.1;
    %559 = cast(%558, dtype="int16") /* ty=Tensor[(13, 14, ?), int16] */;
    %560 = cast(%var_7475, dtype="int16") /* ty=Tensor[(13, 14, 10), int16] */;
    %561 = cast(%558, dtype="bool") /* ty=Tensor[(13, 14, ?), bool] */;
    %562 = cast(%var_7475, dtype="bool") /* ty=Tensor[(13, 14, 10), bool] */;
    %563 = bitwise_xor(%559, %560) /* ty=Tensor[(13, 14, 10), int16] */;
    %564 = logical_and(%561, %562) /* ty=Tensor[(13, 14, 10), bool] */;
    (%563, %564)
  };
  %565(%var_7493) /* ty=(Tensor[(13, 14, 10), int16], Tensor[(13, 14, 10), bool]) */
}

def @func_8463() -> (Tensor[(13, 14, ?), float64], Tensor[(3, ?, 5), bool], Tensor[(3, 1, 5), float64], Tensor[(13, 14, 14), uint32]) {
  %585 = fn () -> (Tensor[(13, 14, ?), float64], Tensor[(3, ?, 5), bool], Tensor[(3, 1, 5), float64], Tensor[(13, 14, 14), uint32]) {
    %566 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 1, 5), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 5), float32] */;
    %567 = asin(%566) /* ty=Tensor[(3, 1, 5), float32] */;
    %568 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 1, 5), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 5), float32] */;
    %569 = sigmoid(%568) /* ty=Tensor[(3, 1, 5), float32] */;
    %570 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 1, 5), float32] */, dtype="float64") /* ty=Tensor[(3, 1, 5), float64] */;
    %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
    %572 = cast(%569, dtype="float64") /* ty=Tensor[(3, 1, 5), float64] */;
    %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %574 = minimum(%572, %573) /* ty=Tensor[(3, ?, 5), float64] */;
    %575 = cast(%574, dtype="bool") /* ty=Tensor[(3, ?, 5), bool] */;
    %576 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
    %577 = cast(%567, dtype="bool") /* ty=Tensor[(3, 1, 5), bool] */;
    %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %579 = cast(%569, dtype="float64") /* ty=Tensor[(3, 1, 5), float64] */;
    %580 = @func_5113() /* ty=(Tensor[(13, 14, 14), uint32],) */;
    %581 = @func_7747() /* ty=Tensor[(13, 14, ?), float64] */;
    %582 = not_equal(%577, %578) /* ty=Tensor[(3, ?, 5), bool] */;
    %583 = atanh(%579) /* ty=Tensor[(3, 1, 5), float64] */;
    %584 = %580.0;
    (%581, %582, %583, %584)
  };
  %585() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(3, ?, 5), bool], Tensor[(3, 1, 5), float64], Tensor[(13, 14, 14), uint32]) */
}

def @func_7221() -> (Tensor[(13, 14, 14), uint32],) {
  %588 = fn () -> (Tensor[(13, 14, 14), uint32],) {
    %586 = @func_3092() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
    %587 = %586.1;
    (%587,)
  };
  %588() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_10309() -> (Tensor[(13, 14, ?), float32],) {
  %589 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %590 = %589.0;
  (%590,)
}

def @func_2991() -> (Tensor[(13, 14, 14), uint32],) {
  %593 = fn () -> (Tensor[(13, 14, 14), uint32],) {
    %591 = @func_2151() /* ty=(Tensor[(13, 14, 14), uint32],) */;
    %592 = %591.0;
    (%592,)
  };
  %593() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_10546() -> Tensor[(13, 14, 14), uint32] {
  %594 = fn () -> Tensor[(13, 14, 14), uint32] {
    @func_9658() /* ty=Tensor[(13, 14, 14), uint32] */
  };
  %594() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_10311() -> (Tensor[(13, 14, ?), float32],) {
  @func_10309() /* ty=(Tensor[(13, 14, ?), float32],) */
}

def @func_11003(%var_11001: Tensor[(42), float32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(42), float32]) {
  %595 = cast(%var_11001, dtype="float32") /* ty=Tensor[(42), float32] */;
  %596 = reshape(%595, newshape=[2, 3, 7]) /* ty=Tensor[(2, 3, 7), float32] */;
  %597 = @func_10018(%596) /* ty=(Tensor[(2, 3, 7), float32], Tensor[(13, 14, 14), float64]) */;
  %598 = @func_3282() /* ty=Tensor[(13, 14, 14), uint32] */;
  %599 = %597.1;
  (%598, %599, %var_11001)
}

def @func_11184() -> Tensor[(13, 14, ?), float32] {
  %600 = @func_10249() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %600.0
}

def @func_3692() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) {
  %601 = @func_3050() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %602 = @func_2206() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %603 = %602.0;
  %604 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(13, 14, ?), float32] */;
  %606 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%603, dtype="float32") /* ty=Tensor[(13, 14, ?), float32] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %609 = @func_2874() /* ty=Tensor[(13, 14, 14), uint32] */;
  %610 = cast(%609, dtype="uint32") /* ty=Tensor[(13, 14, 14), uint32] */;
  %611 = reshape(%610, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint32] */;
  %612 = @func_3402(%611) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(6, 1, 3), float64], Tensor[(18), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
  %613 = cast(meta[relay.Constant][19] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %614 = reshape(%613, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %615 = @func_2810(%614) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) */;
  %616 = cast(meta[relay.Constant][19] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %617 = reshape(%616, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %618 = @func_2810(%617) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) */;
  %619 = cast(%603, dtype="float32") /* ty=Tensor[(13, 14, ?), float32] */;
  %620 = rsqrt(%619) /* ty=Tensor[(13, 14, ?), float32] */;
  %621 = cast(%620, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
  %622 = %601.0;
  %623 = floor_mod(%607, %608) /* ty=Tensor[(13, 14, ?), float32] */;
  %624 = %612.1;
  %625 = %615.1;
  %626 = %618.3;
  %627 = asinh(%621) /* ty=Tensor[(13, 14, ?), float64] */;
  %628 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  (%622, %623, %609, %624, %625, meta[relay.Constant][19] /* ty=Tensor[(70), float32] */, %626, %627, %628)
}

def @func_8833() -> (Tensor[(36, 6), uint32],) {
  @func_8831() /* ty=(Tensor[(36, 6), uint32],) */
}

def @func_10679() -> (Tensor[(13, 14, 14), float64],) {
  %631 = fn () -> (Tensor[(13, 14, 14), float64],) {
    %629 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %630 = %629.0;
    (%630,)
  };
  %631() /* ty=(Tensor[(13, 14, 14), float64],) */
}

def @func_7117(%var_7115: bool, %var_7116: Tensor[(8, 3, 1), bool]) -> Tensor[(8, 3, 1), bool] {
  %634 = fn (%var_7101: bool, %var_7102: Tensor[(8, 3, 1), bool]) -> Tensor[(8, 3, 1), bool] {
    %632 = cast(%var_7101, dtype="bool") /* ty=bool */;
    %633 = cast(%var_7102, dtype="bool") /* ty=Tensor[(8, 3, 1), bool] */;
    logical_or(%632, %633) /* ty=Tensor[(8, 3, 1), bool] */
  };
  %634(%var_7115, %var_7116) /* ty=Tensor[(8, 3, 1), bool] */
}

def @func_2367(%var_2354: Tensor[(1, 450), float32], %var_2355: Tensor[(14, 5), float32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(?, 14, 5), bool], Tensor[(1, 450), float32], Tensor[(14, 5), float32], Tensor[(13, 14, ?), float32]) {
  %635 = cast(%var_2354, dtype="float32") /* ty=Tensor[(1, 450), float32] */;
  %636 = cast(%var_2355, dtype="float32") /* ty=Tensor[(14, 5), float32] */;
  %637 = reshape(%635, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), float32] */;
  %638 = reshape(%636, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %639 = @func_1562(%637, %638) /* ty=(Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float32], Tensor[(6, 10, 4), uint16], Tensor[(240), uint16], Tensor[(?, 14, 5), bool]) */;
  %640 = @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */;
  %641 = @func_1932() /* ty=Tensor[(13, 14, ?), float32] */;
  %642 = %639.4;
  %643 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  (%640, %641, %642, %var_2354, %var_2355, %643)
}

def @func_8575(%var_8573: Tensor[(13, 14, 13), int32]) -> (Tensor[(13, 14, 13), int16], Tensor[(13, 14, 14), uint32]) {
  @func_8572(%var_8573) /* ty=(Tensor[(13, 14, 13), int16], Tensor[(13, 14, 14), uint32]) */
}

def @func_5114() -> (Tensor[(13, 14, 14), uint32],) {
  %645 = fn () -> (Tensor[(13, 14, 14), uint32],) {
    %644 = @func_2874() /* ty=Tensor[(13, 14, 14), uint32] */;
    (%644,)
  };
  %645() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_5616(%var_5615: Tensor[(6, 2, 3), float64]) -> Tensor[(6, 2, 3), uint8] {
  %650 = fn (%var_5607: Tensor[(6, 2, 3), float64]) -> Tensor[(6, 2, 3), uint8] {
    %646 = @func_4315() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(13, 14, ?), float32]) */;
    %647 = %646.1;
    %648 = cast(%647, dtype="uint8") /* ty=Tensor[(6, 1, 3), uint8] */;
    %649 = cast(%var_5607, dtype="uint8") /* ty=Tensor[(6, 2, 3), uint8] */;
    bitwise_or(%648, %649) /* ty=Tensor[(6, 2, 3), uint8] */
  };
  %650(%var_5615) /* ty=Tensor[(6, 2, 3), uint8] */
}

def @func_10415() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %651 = @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */;
  %652 = @func_3341() /* ty=Tensor[(13, 14, ?), float32] */;
  %653 = %651.0;
  (%652, %653)
}

def @func_5242() -> Tensor[(13, 14, 14), bool] {
  @func_2969() /* ty=Tensor[(13, 14, 14), bool] */
}

def @func_9617() -> Tensor[(70), float32] {
  @func_8845() /* ty=Tensor[(70), float32] */
}

def @func_4317() -> (Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(13, 14, ?), float32]) {
  @func_4315() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(13, 14, ?), float32]) */
}

def @func_3050() -> (Tensor[(13, 14, ?), float32],) {
  %654 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
  (%654,)
}

def @func_5592() -> (Tensor[(13, 14, 14), float64],) {
  %656 = fn () -> (Tensor[(13, 14, 14), float64],) {
    %655 = @func_4587() /* ty=Tensor[(13, 14, 14), float64] */;
    (%655,)
  };
  %656() /* ty=(Tensor[(13, 14, 14), float64],) */
}

def @func_7412() -> Tensor[(13, 14, 70), uint16] {
  %663 = fn () -> Tensor[(13, 14, 70), uint16] {
    %657 = @func_3178() /* ty=(Tensor[(13, 14, ?), int32], Tensor[(13, 14, 14), uint32], Tensor[(70), float32], Tensor[(13, 14, 70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) */;
    %658 = %657.3;
    %659 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 14, 70), float32] */, dtype="uint16") /* ty=Tensor[(13, 14, 70), uint16] */;
    %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
    %661 = cast(%658, dtype="uint16") /* ty=Tensor[(13, 14, 70), uint16] */;
    %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    subtract(%661, %662) /* ty=Tensor[(13, 14, 70), uint16] */
  };
  %663() /* ty=Tensor[(13, 14, 70), uint16] */
}

def @func_5343() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %671 = fn () -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
    %664 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %665 = @func_3050() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %666 = @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
    %667 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
    %668 = %664.0;
    %669 = %665.0;
    %670 = %666.0;
    (%667, %668, %669, %670)
  };
  %671() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */
}

def @func_3504() -> Tensor[(13, 14, 14), float64] {
  @func_3502() /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_5194(%var_5148: Tensor[(13, 14, 14), bool]) -> (Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
  %672 = @func_4085() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), uint32]) */;
  %673 = %672.0;
  %674 = cast(%var_5148, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %675 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%673, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %678 = less_equal(%676, %677) /* ty=Tensor[(13, 14, 14), bool] */;
  %679 = @func_5128() /* ty=Tensor[(13, 14, 14), uint32] */;
  %680 = @func_5128() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%678, %679, %680)
}

def @func_5373(%var_5371: Tensor[(13, 15, 8), float32]) -> (Tensor[(13, 15, 8), float32], Tensor[(13, 14, 14), float64]) {
  @func_5370(%var_5371) /* ty=(Tensor[(13, 15, 8), float32], Tensor[(13, 14, 14), float64]) */
}

def @func_5901(%var_5900: Tensor[(240), uint16]) -> (Tensor[(13, 14, 14), float64], Tensor[(6, 10, 4), float32], Tensor[(240), uint16], Tensor[(?, 14, 5), bool], Tensor[(13, 14, 14), uint16]) {
  %701 = fn (%var_5885: Tensor[(240), uint16]) -> (Tensor[(13, 14, 14), float64], Tensor[(6, 10, 4), float32], Tensor[(240), uint16], Tensor[(?, 14, 5), bool], Tensor[(13, 14, 14), uint16]) {
    %681 = @func_5591() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %682 = cast(%var_5885, dtype="uint16") /* ty=Tensor[(240), uint16] */;
    %683 = cast(%var_5885, dtype="uint16") /* ty=Tensor[(240), uint16] */;
    %684 = reshape(%682, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), uint16] */;
    %685 = reshape(%683, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), uint16] */;
    %686 = @func_482(%684, %685) /* ty=(Tensor[(6, 10, 4), uint16], Tensor[(6, 10, 4), float32]) */;
    %687 = cast(meta[relay.Constant][21] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
    %688 = reshape(%687, newshape=[1, 14, 5]) /* ty=Tensor[(1, 14, 5), float32] */;
    %689 = @func_1411(%688) /* ty=(Tensor[(1, 14, 5), float32],) */;
    %690 = %689.0;
    %691 = cast(meta[relay.Constant][21] /* ty=Tensor[(70), float32] */, dtype="bool") /* ty=Tensor[(70), bool] */;
    %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
    %693 = cast(%690, dtype="bool") /* ty=Tensor[(1, 14, 5), bool] */;
    %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %695 = %681.0;
    %696 = cast(%695, dtype="uint32") /* ty=Tensor[(13, 14, 14), uint32] */;
    %697 = reshape(%696, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint32] */;
    %698 = %686.1;
    %699 = logical_and(%693, %694) /* ty=Tensor[(?, 14, 5), bool] */;
    %700 = @func_3314(%697) /* ty=Tensor[(13, 14, 14), uint16] */;
    (%695, %698, %var_5885, %699, %700)
  };
  %701(%var_5900) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(6, 10, 4), float32], Tensor[(240), uint16], Tensor[(?, 14, 5), bool], Tensor[(13, 14, 14), uint16]) */
}

def @func_6685(%var_6684: Tensor[(70, 1), float32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(1, 14, 5), float32], Tensor[(70, 1), float32]) {
  %708 = fn (%var_6675: Tensor[(70, 1), float32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(1, 14, 5), float32], Tensor[(70, 1), float32]) {
    %702 = @func_5113() /* ty=(Tensor[(13, 14, 14), uint32],) */;
    %703 = cast(%var_6675, dtype="float32") /* ty=Tensor[(70, 1), float32] */;
    %704 = reshape(%703, newshape=[1, 14, 5]) /* ty=Tensor[(1, 14, 5), float32] */;
    %705 = @func_1411(%704) /* ty=(Tensor[(1, 14, 5), float32],) */;
    %706 = %702.0;
    %707 = %705.0;
    (%706, %707, %var_6675)
  };
  %708(%var_6684) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(1, 14, 5), float32], Tensor[(70, 1), float32]) */
}

def @func_9006(%var_9005: Tensor[(2, 8, 7), float32]) -> (Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32]) {
  %713 = fn (%var_8966: Tensor[(2, 8, 7), float32]) -> (Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32]) {
    %709 = cast(%var_8966, dtype="float32") /* ty=Tensor[(2, 8, 7), float32] */;
    %710 = cast(%var_8966, dtype="float32") /* ty=Tensor[(2, 8, 7), float32] */;
    %711 = atan(%709) /* ty=Tensor[(2, 8, 7), float32] */;
    %712 = log10(%710) /* ty=Tensor[(2, 8, 7), float32] */;
    (%711, %712)
  };
  %713(%var_9005) /* ty=(Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32]) */
}

def @func_9290() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
  %714 = @func_7559() /* ty=Tensor[(13, 14, ?), float32] */;
  %715 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
  (%714, %715)
}

def @func_2514() -> (Tensor[(13, 14, 14), float64],) {
  %721 = fn () -> (Tensor[(13, 14, 14), float64],) {
    %716 = @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */;
    %717 = cast(%716, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
    %718 = log10(%717) /* ty=Tensor[(13, 14, 14), float64] */;
    %719 = cast(%718, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
    %720 = asinh(%719) /* ty=Tensor[(13, 14, 14), float64] */;
    (%720,)
  };
  %721() /* ty=(Tensor[(13, 14, 14), float64],) */
}

def @func_10077(%var_10075: Tensor[(7, 12, 5), bool], %var_10076: Tensor[(7, 12, 5), bool]) -> (Tensor[(7, 12, 5), bool],) {
  %727 = fn (%var_10026: Tensor[(7, 12, 5), bool], %var_10027: Tensor[(7, 12, 5), bool]) -> (Tensor[(7, 12, 5), bool],) {
    %722 = cast(%var_10027, dtype="bool") /* ty=Tensor[(7, 12, 5), bool] */;
    %723 = shape_of(%var_10026, dtype="int32") /* ty=Tensor[(3), int32] */;
    %724 = cast(%var_10026, dtype="bool") /* ty=Tensor[(7, 12, 5), bool] */;
    %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %726 = logical_or(%724, %725) /* ty=Tensor[(7, 12, 5), bool] */;
    (%726,)
  };
  %727(%var_10075, %var_10076) /* ty=(Tensor[(7, 12, 5), bool],) */
}

def @func_13081() -> (Tensor[(13, 14, 14), uint32],) {
  %729 = fn () -> (Tensor[(13, 14, 14), uint32],) {
    %728 = @func_2874() /* ty=Tensor[(13, 14, 14), uint32] */;
    (%728,)
  };
  %729() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_9240(%var_9219: Tensor[(450), float32], %var_9220: Tensor[(70), float32]) -> (Tensor[(13, 14, ?), float32], Tensor[(6, 10, 4), uint16], Tensor[(450), float32], Tensor[(70), float32], Tensor[(13, 14, ?), float32]) {
  %730 = @func_3692() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) */;
  %731 = cast(%var_9219, dtype="float32") /* ty=Tensor[(450), float32] */;
  %732 = cast(%var_9220, dtype="float32") /* ty=Tensor[(70), float32] */;
  %733 = reshape(%731, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), float32] */;
  %734 = reshape(%732, newshape=[70]) /* ty=Tensor[(70), float32] */;
  %735 = @func_1562(%733, %734) /* ty=(Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float32], Tensor[(6, 10, 4), uint16], Tensor[(240), uint16], Tensor[(?, 14, 5), bool]) */;
  %736 = %730.1;
  %737 = %735.2;
  %738 = @func_1932() /* ty=Tensor[(13, 14, ?), float32] */;
  (%736, %737, %var_9219, %var_9220, %738)
}

def @func_6087(%var_6086: Tensor[(36, 6), uint32]) -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool], Tensor[(18), uint32], Tensor[(13, 14, ?), float32], Tensor[(36, 6), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
  %754 = fn (%var_6073: Tensor[(36, 6), uint32]) -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool], Tensor[(18), uint32], Tensor[(13, 14, ?), float32], Tensor[(36, 6), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
    %739 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %740 = cast(meta[relay.Constant][22] /* ty=Tensor[(18), uint32] */, dtype="uint32") /* ty=Tensor[(18), uint32] */;
    %741 = cast(%var_6073, dtype="uint32") /* ty=Tensor[(36, 6), uint32] */;
    %742 = reshape(%740, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), uint32] */;
    %743 = reshape(%741, newshape=[12, 6, 3]) /* ty=Tensor[(12, 6, 3), uint32] */;
    %744 = @func_4540(%742, %743) /* ty=(Tensor[(12, 6, 3), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool]) */;
    %745 = @func_3692() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) */;
    %746 = cast(%var_6073, dtype="float32") /* ty=Tensor[(36, 6), float32] */;
    %747 = @func_4601() /* ty=(Tensor[(13, 14, 14), uint32],) */;
    %748 = %739.0;
    %749 = %744.2;
    %750 = %745.0;
    %751 = atanh(%746) /* ty=Tensor[(36, 6), float32] */;
    %752 = %747.0;
    %753 = @func_2874() /* ty=Tensor[(13, 14, 14), uint32] */;
    (%748, %749, meta[relay.Constant][22] /* ty=Tensor[(18), uint32] */, %750, %751, %752, %753)
  };
  %754(%var_6086) /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool], Tensor[(18), uint32], Tensor[(13, 14, ?), float32], Tensor[(36, 6), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */
}

def @func_6109() -> Tensor[(13, 14, ?), float32] {
  %755 = fn () -> Tensor[(13, 14, ?), float32] {
    @func_5419() /* ty=Tensor[(13, 14, ?), float32] */
  };
  %755() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_11352() -> (Tensor[(13, 14, 14), uint32], Tensor[(2, 8, 7), float32], Tensor[(13, 14, ?), float32], Tensor[(2, 56), float64]) {
  %764 = fn () -> (Tensor[(13, 14, 14), uint32], Tensor[(2, 8, 7), float32], Tensor[(13, 14, ?), float32], Tensor[(2, 56), float64]) {
    %756 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 56), float32] */, dtype="float32") /* ty=Tensor[(2, 56), float32] */;
    %757 = reshape(%756, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float32] */;
    %758 = @func_9004(%757) /* ty=(Tensor[(2, 8, 7), float32], Tensor[(2, 8, 7), float32]) */;
    %759 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 56), float32] */, dtype="float64") /* ty=Tensor[(2, 56), float64] */;
    %760 = @func_11211() /* ty=Tensor[(13, 14, 14), uint32] */;
    %761 = %758.0;
    %762 = @func_11157() /* ty=Tensor[(13, 14, ?), float32] */;
    %763 = acosh(%759) /* ty=Tensor[(2, 56), float64] */;
    (%760, %761, %762, %763)
  };
  %764() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(2, 8, 7), float32], Tensor[(13, 14, ?), float32], Tensor[(2, 56), float64]) */
}

def @func_12106() -> (Tensor[(13, 14, ?), float64], Tensor[(13, 14, 14), uint16]) {
  %769 = fn () -> (Tensor[(13, 14, ?), float64], Tensor[(13, 14, 14), uint16]) {
    %765 = @func_6263() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float64]) */;
    %766 = @func_4699() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, ?), float32]) */;
    %767 = %765.1;
    %768 = %766.1;
    (%767, %768)
  };
  %769() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(13, 14, 14), uint16]) */
}

def @func_12825(%var_12771: Tensor[(240), uint16], %var_12776: Tensor[(7, 10), float32]) -> (Tensor[(13, 14, 14), uint16], Tensor[(240), uint16], Tensor[(13, 14, 14), uint32], Tensor[(7, 10), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 6), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 9), int8], Tensor[(1638), float32]) {
  %770 = cast(%var_12771, dtype="uint16") /* ty=Tensor[(240), uint16] */;
  %771 = reshape(%770, newshape=[240]) /* ty=Tensor[(240), uint16] */;
  %772 = @func_5899(%771) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(6, 10, 4), float32], Tensor[(240), uint16], Tensor[(?, 14, 5), bool], Tensor[(13, 14, 14), uint16]) */;
  %773 = cast(%var_12776, dtype="float32") /* ty=Tensor[(7, 10), float32] */;
  %774 = reshape(%773, newshape=[70, 1]) /* ty=Tensor[(70, 1), float32] */;
  %775 = @func_6683(%774) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(1, 14, 5), float32], Tensor[(70, 1), float32]) */;
  %776 = @func_7220() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %777 = @func_6263() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float64]) */;
  %778 = %777.1;
  %779 = cast(%778, dtype="uint32") /* ty=Tensor[(13, 14, ?), uint32] */;
  %780 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 14, 6), float64] */, dtype="uint32") /* ty=Tensor[(13, 14, 6), uint32] */;
  %781 = right_shift(%779, %780) /* ty=Tensor[(13, 14, 6), uint32] */;
  %782 = cast(%781, dtype="float64") /* ty=Tensor[(13, 14, 6), float64] */;
  %783 = cast(%778, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
  %784 = cast(meta[relay.Constant][25] /* ty=Tensor[(1638), float32] */, dtype="float32") /* ty=Tensor[(1638), float32] */;
  %785 = reshape(%784, newshape=[13, 14, 9]) /* ty=Tensor[(13, 14, 9), float32] */;
  %786 = %772.4;
  %787 = %775.0;
  %788 = %776.0;
  %789 = power(%782, %783) /* ty=Tensor[(13, 14, 6), float64] */;
  %790 = @func_11157() /* ty=Tensor[(13, 14, ?), float32] */;
  %791 = @func_4882(%785) /* ty=Tensor[(13, 14, 9), int8] */;
  (%786, %var_12771, %787, %var_12776, %788, %789, %790, %791, meta[relay.Constant][25] /* ty=Tensor[(1638), float32] */)
}

def @func_4086() -> (Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), uint32]) {
  %802 = fn () -> (Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), uint32]) {
    %792 = @func_2513() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %793 = %792.0;
    %794 = cast(%793, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
    %795 = acos(%794) /* ty=Tensor[(13, 14, 14), float64] */;
    %796 = cast(%793, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
    %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(3), int32] */;
    %798 = cast(%795, dtype="bool") /* ty=Tensor[(13, 14, 14), bool] */;
    %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %800 = greater(%798, %799) /* ty=Tensor[(13, 14, 14), bool] */;
    %801 = @func_3282() /* ty=Tensor[(13, 14, 14), uint32] */;
    (%800, %801)
  };
  %802() /* ty=(Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), uint32]) */
}

def @func_7184() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
  @func_7182() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */
}

def @func_11983() -> (Tensor[(13, 14, 70), bool],) {
  %803 = @func_9828() /* ty=(Tensor[(13, 14, 70), bool],) */;
  %804 = %803.0;
  (%804,)
}

def @func_11803(%var_11802: Tensor[(1092), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 6), uint32], Tensor[(1092), float32]) {
  %810 = fn (%var_11799: Tensor[(1092), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 6), uint32], Tensor[(1092), float32]) {
    %805 = cast(%var_11799, dtype="float32") /* ty=Tensor[(1092), float32] */;
    %806 = reshape(%805, newshape=[13, 14, 6]) /* ty=Tensor[(13, 14, 6), float32] */;
    %807 = @func_6551(%806) /* ty=(Tensor[(13, 14, 6), int64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 6), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 6), float64]) */;
    %808 = @func_3502() /* ty=Tensor[(13, 14, 14), float64] */;
    %809 = %807.2;
    (%808, %809, %var_11799)
  };
  %810(%var_11802) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 6), uint32], Tensor[(1092), float32]) */
}

def @func_3316(%var_3315: Tensor[(13, 14, 14), uint32]) -> Tensor[(13, 14, 14), uint16] {
  %816 = fn (%var_3299: Tensor[(13, 14, 14), uint32]) -> Tensor[(13, 14, 14), uint16] {
    %811 = @func_2030() /* ty=Tensor[(13, 14, 14), uint32] */;
    %812 = cast(%var_3299, dtype="uint16") /* ty=Tensor[(13, 14, 14), uint16] */;
    %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(3), int32] */;
    %814 = cast(%811, dtype="uint16") /* ty=Tensor[(13, 14, 14), uint16] */;
    %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_xor(%814, %815) /* ty=Tensor[(13, 14, 14), uint16] */
  };
  %816(%var_3315) /* ty=Tensor[(13, 14, 14), uint16] */
}

def @func_8132() -> (Tensor[(13, 14, 14), float64],) {
  @func_8130() /* ty=(Tensor[(13, 14, 14), float64],) */
}

def @func_8781() -> (Tensor[(13, 14, ?), float32],) {
  @func_8779() /* ty=(Tensor[(13, 14, ?), float32],) */
}

def @func_5244() -> Tensor[(13, 14, 14), bool] {
  @func_5242() /* ty=Tensor[(13, 14, 14), bool] */
}

def @func_13027() -> (Tensor[(13, 14, 14), uint32],) {
  %817 = @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %818 = %817.1;
  (%818,)
}

def @func_4476(%var_4475: Tensor[(13, 14, 1), float32]) -> Tensor[(13, 14, ?), float32] {
  %825 = fn (%var_4462: Tensor[(13, 14, 1), float32]) -> Tensor[(13, 14, ?), float32] {
    %819 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %820 = %819.0;
    %821 = cast(%var_4462, dtype="float32") /* ty=Tensor[(13, 14, 1), float32] */;
    %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
    %823 = cast(%820, dtype="float32") /* ty=Tensor[(13, 14, ?), float32] */;
    %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%823, %824) /* ty=Tensor[(13, 14, ?), float32] */
  };
  %825(%var_4475) /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_8658(%var_8657: Tensor[(13, 14, 10), float32]) -> (Tensor[(13, 14, 14), bool], Tensor[(1, 182), float32], Tensor[(13, 14, 10), int32], Tensor[(70, ?), uint8], Tensor[(13, 14, ?), float32]) {
  %844 = fn (%var_8610: Tensor[(13, 14, 10), float32]) -> (Tensor[(13, 14, 14), bool], Tensor[(1, 182), float32], Tensor[(13, 14, 10), int32], Tensor[(70, ?), uint8], Tensor[(13, 14, ?), float32]) {
    %826 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 182), float32] */, dtype="float32") /* ty=Tensor[(1, 182), float32] */;
    %827 = reshape(%826, newshape=[13, 14, 1]) /* ty=Tensor[(13, 14, 1), float32] */;
    %828 = @func_4474(%827) /* ty=Tensor[(13, 14, ?), float32] */;
    %829 = cast(%828, dtype="int32") /* ty=Tensor[(13, 14, ?), int32] */;
    %830 = cast(%var_8610, dtype="int32") /* ty=Tensor[(13, 14, 10), int32] */;
    %831 = cast(meta[relay.Constant][27] /* ty=Tensor[(70, 1), float32] */, dtype="float32") /* ty=Tensor[(70, 1), float32] */;
    %832 = reshape(%831, newshape=[70, 1]) /* ty=Tensor[(70, 1), float32] */;
    %833 = @func_6683(%832) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(1, 14, 5), float32], Tensor[(70, 1), float32]) */;
    %834 = %833.2;
    %835 = cast(%834, dtype="uint8") /* ty=Tensor[(70, 1), uint8] */;
    %836 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(70, 1), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %837 = cast(meta[relay.Constant][27] /* ty=Tensor[(70, 1), float32] */, dtype="uint8") /* ty=Tensor[(70, 1), uint8] */;
    %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %839 = @func_4782() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %840 = @func_5242() /* ty=Tensor[(13, 14, 14), bool] */;
    %841 = right_shift(%829, %830) /* ty=Tensor[(13, 14, 10), int32] */;
    %842 = minimum(%837, %838) /* ty=Tensor[(70, ?), uint8] */;
    %843 = %839.0;
    (%840, meta[relay.Constant][26] /* ty=Tensor[(1, 182), float32] */, %841, %842, %843)
  };
  %844(%var_8657) /* ty=(Tensor[(13, 14, 14), bool], Tensor[(1, 182), float32], Tensor[(13, 14, 10), int32], Tensor[(70, ?), uint8], Tensor[(13, 14, ?), float32]) */
}

def @func_12838() -> (Tensor[(13, 14, ?), float32],) {
  %845 = @func_7182() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */;
  %846 = %845.1;
  (%846,)
}

def @func_8905() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64]) {
  %850 = fn () -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64]) {
    %847 = @func_6263() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float64]) */;
    %848 = @func_8303() /* ty=Tensor[(13, 14, 14), float64] */;
    %849 = %847.1;
    (%848, %849)
  };
  %850() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64]) */
}

def @func_5277() -> (Tensor[(13, 14, ?), float32],) {
  %853 = fn () -> (Tensor[(13, 14, ?), float32],) {
    %851 = @func_4699() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, ?), float32]) */;
    %852 = %851.2;
    (%852,)
  };
  %853() /* ty=(Tensor[(13, 14, ?), float32],) */
}

def @func_4540(%var_4515: Tensor[(1, 6, 3), uint32], %var_4516: Tensor[(12, 6, 3), uint32]) -> (Tensor[(12, 6, 3), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool]) {
  %854 = cast(%var_4515, dtype="uint32") /* ty=Tensor[(1, 6, 3), uint32] */;
  %855 = cast(%var_4516, dtype="uint32") /* ty=Tensor[(12, 6, 3), uint32] */;
  %856 = @func_3050() /* ty=(Tensor[(13, 14, ?), float32],) */;
  %857 = @func_2833() /* ty=(Tensor[(13, 14, ?), bool],) */;
  %858 = subtract(%854, %855) /* ty=Tensor[(12, 6, 3), uint32] */;
  %859 = %856.0;
  %860 = %857.0;
  (%858, %859, %860)
}

def @func_8122() -> (Tensor[(13, 14, 14), float64],) {
  @func_8120() /* ty=(Tensor[(13, 14, 14), float64],) */
}

def @func_11760() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
  %866 = fn () -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
    %861 = @func_9949() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float64]) */;
    %862 = @func_8303() /* ty=Tensor[(13, 14, 14), float64] */;
    %863 = @func_11113() /* ty=Tensor[(13, 14, ?), float32] */;
    %864 = %861.0;
    %865 = @func_8805() /* ty=Tensor[(13, 14, ?), float32] */;
    (%862, %863, %864, %865)
  };
  %866() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */
}

def @func_5219() -> Tensor[(13, 14, ?), float32] {
  @func_5217() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_4838(%var_4821: Tensor[(70), float32]) -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool], Tensor[(1, 450), float32], Tensor[(450), float32], Tensor[(70), float32]) {
  %867 = @func_2833() /* ty=(Tensor[(13, 14, ?), bool],) */;
  %868 = cast(meta[relay.Constant][28] /* ty=Tensor[(450), float32] */, dtype="float32") /* ty=Tensor[(450), float32] */;
  %869 = cast(%var_4821, dtype="float32") /* ty=Tensor[(70), float32] */;
  %870 = reshape(%868, newshape=[1, 450]) /* ty=Tensor[(1, 450), float32] */;
  %871 = reshape(%869, newshape=[14, 5]) /* ty=Tensor[(14, 5), float32] */;
  %872 = @func_2367(%870, %871) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(?, 14, 5), bool], Tensor[(1, 450), float32], Tensor[(14, 5), float32], Tensor[(13, 14, ?), float32]) */;
  %873 = @func_3341() /* ty=Tensor[(13, 14, ?), float32] */;
  %874 = %867.0;
  %875 = %872.3;
  (%873, %874, %875, meta[relay.Constant][28] /* ty=Tensor[(450), float32] */, %var_4821)
}

def @func_9292() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) {
  @func_9290() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */
}

def @func_12580(%var_12552: Tensor[(18, 1), uint32], %var_12553: Tensor[(6, 36), uint32]) -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 70), bool], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, ?), float32], Tensor[(18, 1), uint32], Tensor[(6, 36), uint32]) {
  %876 = @func_9828() /* ty=(Tensor[(13, 14, 70), bool],) */;
  %877 = @func_4699() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, ?), float32]) */;
  %878 = @func_12105() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(13, 14, 14), uint16]) */;
  %879 = cast(%var_12552, dtype="uint32") /* ty=Tensor[(18, 1), uint32] */;
  %880 = cast(%var_12553, dtype="uint32") /* ty=Tensor[(6, 36), uint32] */;
  %881 = reshape(%879, newshape=[1, 6, 3]) /* ty=Tensor[(1, 6, 3), uint32] */;
  %882 = reshape(%880, newshape=[12, 6, 3]) /* ty=Tensor[(12, 6, 3), uint32] */;
  %883 = @func_4540(%881, %882) /* ty=(Tensor[(12, 6, 3), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), bool]) */;
  %884 = @func_2974() /* ty=Tensor[(13, 14, ?), float32] */;
  %885 = %876.0;
  %886 = %877.1;
  %887 = %878.1;
  %888 = %883.1;
  (%884, %885, %886, %887, %888, %var_12552, %var_12553)
}

def @func_11897() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
  %895 = fn () -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
    %889 = @func_7073() /* ty=(Tensor[(13, 14, 14), uint32],) */;
    %890 = %889.0;
    %891 = cast(%890, dtype="uint32") /* ty=Tensor[(13, 14, 14), uint32] */;
    %892 = reshape(%891, newshape=[13, 14, 14]) /* ty=Tensor[(13, 14, 14), uint32] */;
    %893 = @func_3402(%892) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(6, 1, 3), float64], Tensor[(18), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
    %894 = %893.4;
    (%890, %894)
  };
  %895() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */
}

def @func_11820() -> (Tensor[(13, 14, 14), float64],) {
  @func_11818() /* ty=(Tensor[(13, 14, 14), float64],) */
}

def @func_2774() -> (Tensor[(13, 14, 14), float64],) {
  %900 = fn () -> (Tensor[(13, 14, 14), float64],) {
    %896 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
    %897 = %896.0;
    %898 = cast(%897, dtype="float64") /* ty=Tensor[(13, 14, 14), float64] */;
    %899 = asin(%898) /* ty=Tensor[(13, 14, 14), float64] */;
    (%899,)
  };
  %900() /* ty=(Tensor[(13, 14, 14), float64],) */
}

def @func_1934() -> Tensor[(13, 14, ?), float32] {
  @func_1932() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_3405(%var_3403: Tensor[(13, 14, 14), uint32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(6, 1, 3), float64], Tensor[(18), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  @func_3402(%var_3403) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(6, 1, 3), float64], Tensor[(18), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */
}

def @func_1919() -> Tensor[(13, 14, ?), float32] {
  %907 = fn () -> Tensor[(13, 14, ?), float32] {
    %901 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 14, 1), float32] */;
    %902 = log2(%901) /* ty=Tensor[(13, 14, 1), float32] */;
    %903 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 14, 1), float32] */;
    %904 = shape_of(%902, dtype="int32") /* ty=Tensor[(3), int32] */;
    %905 = cast(%902, dtype="float32") /* ty=Tensor[(13, 14, 1), float32] */;
    %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%905, %906) /* ty=Tensor[(13, 14, ?), float32] */
  };
  %907() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_10639() -> Tensor[(13, 14, ?), float32] {
  %909 = fn () -> Tensor[(13, 14, ?), float32] {
    %908 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %908.0
  };
  %909() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_12115() -> Tensor[(13, 14, ?), float32] {
  @func_1918() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_12637() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %910 = @func_11896() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
  %911 = @func_7559() /* ty=Tensor[(13, 14, ?), float32] */;
  %912 = %910.1;
  (%911, %912)
}

def @func_2105() -> Tensor[(13, 14, ?), float32] {
  @func_2103() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_11006(%var_11004: Tensor[(42), float32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(42), float32]) {
  @func_11003(%var_11004) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(42), float32]) */
}

def @func_5573() -> Tensor[(13, 14, 14), uint32] {
  %913 = @func_3042() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %913.2
}

def @func_8534() -> (Tensor[(13, 14, 70), float64], Tensor[(13, 14, 14), float64]) {
  @func_8532() /* ty=(Tensor[(13, 14, 70), float64], Tensor[(13, 14, 14), float64]) */
}

def @func_5662() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(6, 2, 3), uint8], Tensor[(36), float64]) {
  @func_5660() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(6, 2, 3), uint8], Tensor[(36), float64]) */
}

def @func_9142(%var_9141: Tensor[(13, 14, 10), float32]) -> (Tensor[(13, 14, 10), bool], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) {
  %922 = fn (%var_9120: Tensor[(13, 14, 10), float32]) -> (Tensor[(13, 14, 10), bool], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) {
    %914 = @func_5217() /* ty=Tensor[(13, 14, ?), float32] */;
    %915 = cast(%914, dtype="bool") /* ty=Tensor[(13, 14, ?), bool] */;
    %916 = cast(%var_9120, dtype="bool") /* ty=Tensor[(13, 14, 10), bool] */;
    %917 = @func_2773() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %918 = @func_4315() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(13, 14, ?), float32]) */;
    %919 = logical_or(%915, %916) /* ty=Tensor[(13, 14, 10), bool] */;
    %920 = %917.0;
    %921 = %918.2;
    (%919, %920, %921)
  };
  %922(%var_9141) /* ty=(Tensor[(13, 14, 10), bool], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) */
}

def @func_7993(%var_7991: Tensor[(3, 12, 8), float64], %var_7992: Tensor[(3, 12, 8), float32]) -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(3, 12, 8), float32], Tensor[(9, 14, 9), float64], Tensor[(1134), float64], Tensor[(3, 12, 8), int64]) {
  @func_7989(%var_7991, %var_7992) /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(3, 12, 8), float32], Tensor[(9, 14, 9), float64], Tensor[(1134), float64], Tensor[(3, 12, 8), int64]) */
}

def @func_11808() -> Tensor[(13, 14, ?), float32] {
  %924 = fn () -> Tensor[(13, 14, ?), float32] {
    %923 = @func_11759() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */;
    %923.2
  };
  %924() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_5716() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  %925 = @func_3042() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %926 = @func_3712() /* ty=Tensor[(13, 14, 14), uint32] */;
  %927 = @func_3958() /* ty=Tensor[(13, 14, 14), float64] */;
  %928 = @func_5573() /* ty=Tensor[(13, 14, 14), uint32] */;
  %929 = %925.1;
  (%926, %927, %928, %929)
}

def @func_12442() -> (Tensor[(13, 14, 14), float64], Tensor[(70), float32], Tensor[(70), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) {
  @func_12440() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(70), float32], Tensor[(70), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */
}

def @func_3093() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %933 = fn () -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
    %930 = @func_2206() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
    %931 = %930.1;
    %932 = @func_2874() /* ty=Tensor[(13, 14, 14), uint32] */;
    (%931, %932)
  };
  %933() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */
}

def @func_3713() -> Tensor[(13, 14, 14), uint32] {
  %934 = fn () -> Tensor[(13, 14, 14), uint32] {
    @func_3282() /* ty=Tensor[(13, 14, 14), uint32] */
  };
  %934() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_5964() -> (Tensor[(13, 14, 14), uint32],) {
  %936 = fn () -> (Tensor[(13, 14, 14), uint32],) {
    %935 = @func_5573() /* ty=Tensor[(13, 14, 14), uint32] */;
    (%935,)
  };
  %936() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_7556() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64]) {
  %940 = fn () -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64]) {
    %937 = @func_6363() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(3, 6), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */;
    %938 = @func_3958() /* ty=Tensor[(13, 14, 14), float64] */;
    %939 = %937.3;
    (%938, %939)
  };
  %940() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64]) */
}

def @func_1932() -> Tensor[(13, 14, ?), float32] {
  @func_1918() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_9469(%var_9468: Tensor[(13, 14, 12), float32]) -> (Tensor[(13, 14, 12), int16], Tensor[(13, 14, 12), bool]) {
  %951 = fn (%var_9463: Tensor[(13, 14, 12), float32]) -> (Tensor[(13, 14, 12), int16], Tensor[(13, 14, 12), bool]) {
    %941 = @func_2206() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
    %942 = %941.1;
    %943 = cast(%942, dtype="int16") /* ty=Tensor[(13, 14, ?), int16] */;
    %944 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 14, 12), float32] */, dtype="int16") /* ty=Tensor[(13, 14, 12), int16] */;
    %945 = cast(%var_9463, dtype="bool") /* ty=Tensor[(13, 14, 12), bool] */;
    %946 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(13, 14, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %947 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 14, 12), float32] */, dtype="bool") /* ty=Tensor[(13, 14, 12), bool] */;
    %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %949 = right_shift(%943, %944) /* ty=Tensor[(13, 14, 12), int16] */;
    %950 = equal(%947, %948) /* ty=Tensor[(13, 14, 12), bool] */;
    (%949, %950)
  };
  %951(%var_9468) /* ty=(Tensor[(13, 14, 12), int16], Tensor[(13, 14, 12), bool]) */
}

def @func_2126() -> (Tensor[(13, 14, 14), uint32],) {
  @func_2124() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_9829() -> (Tensor[(13, 14, 70), bool],) {
  %958 = fn () -> (Tensor[(13, 14, 70), bool],) {
    %952 = @func_7411() /* ty=Tensor[(13, 14, 70), uint16] */;
    %953 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 14, 70), uint16] */, dtype="bool") /* ty=Tensor[(13, 14, 70), bool] */;
    %954 = shape_of(%952, dtype="int32") /* ty=Tensor[(3), int32] */;
    %955 = cast(%952, dtype="bool") /* ty=Tensor[(13, 14, 70), bool] */;
    %956 = dyn.reshape(%953, %954, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %957 = equal(%955, %956) /* ty=Tensor[(13, 14, 70), bool] */;
    (%957,)
  };
  %958() /* ty=(Tensor[(13, 14, 70), bool],) */
}

def @func_7859() -> (Tensor[(8, 12, 7), float64],) {
  %959 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 12, 7), float64] */, dtype="float64") /* ty=Tensor[(8, 12, 7), float64] */;
  %960 = acosh(%959) /* ty=Tensor[(8, 12, 7), float64] */;
  (%960,)
}

def @func_8037(%var_8035: Tensor[(3, 16, 3), bool]) -> (Tensor[(3, 16, 3), bool], Tensor[(13, 14, ?), float32]) {
  @func_8034(%var_8035) /* ty=(Tensor[(3, 16, 3), bool], Tensor[(13, 14, ?), float32]) */
}

def @func_3179() -> (Tensor[(13, 14, ?), int32], Tensor[(13, 14, 14), uint32], Tensor[(70), float32], Tensor[(13, 14, 70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) {
  %981 = fn () -> (Tensor[(13, 14, ?), int32], Tensor[(13, 14, 14), uint32], Tensor[(70), float32], Tensor[(13, 14, 70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) {
    %961 = @func_1932() /* ty=Tensor[(13, 14, ?), float32] */;
    %962 = @func_2603() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32]) */;
    %963 = %962.1;
    %964 = cast(%963, dtype="int32") /* ty=Tensor[(13, 14, ?), int32] */;
    %965 = shape_of(%961, dtype="int32") /* ty=Tensor[(3), int32] */;
    %966 = cast(%961, dtype="int32") /* ty=Tensor[(13, 14, ?), int32] */;
    %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %968 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
    %969 = cast(meta[relay.Constant][33] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
    %970 = reshape(%969, newshape=[70]) /* ty=Tensor[(70), float32] */;
    %971 = @func_2810(%970) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) */;
    %972 = %971.2;
    %973 = cast(%961, dtype="float32") /* ty=Tensor[(13, 14, ?), float32] */;
    %974 = cast(%972, dtype="float32") /* ty=Tensor[(70), float32] */;
    %975 = @func_2773() /* ty=(Tensor[(13, 14, 14), float64],) */;
    %976 = add(%966, %967) /* ty=Tensor[(13, 14, ?), int32] */;
    %977 = %968.0;
    %978 = floor_divide(%973, %974) /* ty=Tensor[(13, 14, 70), float32] */;
    %979 = %975.0;
    %980 = @func_1932() /* ty=Tensor[(13, 14, ?), float32] */;
    (%976, %977, meta[relay.Constant][33] /* ty=Tensor[(70), float32] */, %978, %979, %980)
  };
  %981() /* ty=(Tensor[(13, 14, ?), int32], Tensor[(13, 14, 14), uint32], Tensor[(70), float32], Tensor[(13, 14, 70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) */
}

def @func_4932() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(1, 14, 5), float32], Tensor[(70), float32]) {
  %982 = @func_4315() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(6, 1, 3), float64], Tensor[(13, 14, ?), float32]) */;
  %983 = cast(meta[relay.Constant][34] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %984 = reshape(%983, newshape=[1, 14, 5]) /* ty=Tensor[(1, 14, 5), float32] */;
  %985 = @func_1411(%984) /* ty=(Tensor[(1, 14, 5), float32],) */;
  %986 = @func_3341() /* ty=Tensor[(13, 14, ?), float32] */;
  %987 = @func_2874() /* ty=Tensor[(13, 14, 14), uint32] */;
  %988 = %982.1;
  %989 = %985.0;
  (%986, %987, %988, %989, meta[relay.Constant][34] /* ty=Tensor[(70), float32] */)
}

def @func_3458() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) {
  @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */
}

def @func_11213() -> Tensor[(13, 14, 14), uint32] {
  @func_11211() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_1411(%var_1407: Tensor[(1, 14, 5), float32]) -> (Tensor[(1, 14, 5), float32],) {
  %990 = cast(%var_1407, dtype="float32") /* ty=Tensor[(1, 14, 5), float32] */;
  %991 = sin(%990) /* ty=Tensor[(1, 14, 5), float32] */;
  (%991,)
}

def @func_7890(%var_7885: Tensor[(4, 7, 4), float32]) -> (Tensor[(4, 7, 4), float32],) {
  %992 = cast(%var_7885, dtype="float32") /* ty=Tensor[(4, 7, 4), float32] */;
  %993 = sqrt(%992) /* ty=Tensor[(4, 7, 4), float32] */;
  (%993,)
}

def @func_12676() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) {
  %994 = @func_7555() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64]) */;
  %995 = @func_10415() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %996 = %994.0;
  %997 = %995.0;
  (%996, %997)
}

def @func_5575() -> Tensor[(13, 14, 14), uint32] {
  @func_5573() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_8130() -> (Tensor[(13, 14, 14), float64],) {
  %998 = @func_7555() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64]) */;
  %999 = %998.0;
  (%999,)
}

def @func_7163() -> Tensor[(13, 14, ?), float32] {
  %1000 = @func_3692() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float32], Tensor[(1, 14, 5), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float32]) */;
  %1000.8
}

def @func_10865() -> (Tensor[(13, 14, 14), uint32],) {
  @func_10863() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_3342() -> Tensor[(13, 14, ?), float32] {
  %1002 = fn () -> Tensor[(13, 14, ?), float32] {
    %1001 = @func_2232() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %1001.0
  };
  %1002() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_12639() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  @func_12637() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */
}

def @func_2124() -> (Tensor[(13, 14, 14), uint32],) {
  %1003 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %1004 = %1003.0;
  (%1004,)
}

def @func_482(%var_454: Tensor[(6, 10, 4), uint16], %var_455: Tensor[(6, 10, 4), uint16]) -> (Tensor[(6, 10, 4), uint16], Tensor[(6, 10, 4), float32]) {
  %1005 = cast(%var_455, dtype="uint16") /* ty=Tensor[(6, 10, 4), uint16] */;
  %1006 = shape_of(%var_454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1007 = cast(%var_454, dtype="uint16") /* ty=Tensor[(6, 10, 4), uint16] */;
  %1008 = dyn.reshape(%1005, %1006, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1009 = cast(%var_455, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %1010 = right_shift(%1007, %1008) /* ty=Tensor[(6, 10, 4), uint16] */;
  %1011 = log2(%1009) /* ty=Tensor[(6, 10, 4), float32] */;
  (%1010, %1011)
}

def @func_7521() -> Tensor[(3, 8, 15), float32] {
  @func_7519() /* ty=Tensor[(3, 8, 15), float32] */
}

def @func_6274(%var_6272: Tensor[(9, 14, 9), float64]) -> Tensor[(9, 14, 9), float64] {
  @func_6271(%var_6272) /* ty=Tensor[(9, 14, 9), float64] */
}

def @func_11211() -> Tensor[(13, 14, 14), uint32] {
  %1012 = @func_2124() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %1012.0
}

def @func_10446() -> (Tensor[(13, 14, 14), uint32],) {
  @func_10444() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_9503() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float64]) {
  %1017 = fn () -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float64]) {
    %1013 = @func_7182() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32]) */;
    %1014 = @func_6263() /* ty=(Tensor[(13, 14, ?), float64], Tensor[(13, 14, ?), float64]) */;
    %1015 = %1013.0;
    %1016 = %1014.1;
    (%1015, %1016)
  };
  %1017() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float64]) */
}

def @func_13000(%var_12998: Tensor[(7, 7, 3), int8], %var_12999: Tensor[(7, 7, 3), int8]) -> (Tensor[(7, 7, 3), int8],) {
  @func_12996(%var_12998, %var_12999) /* ty=(Tensor[(7, 7, 3), int8],) */
}

def @func_9659() -> Tensor[(13, 14, 14), uint32] {
  %1019 = fn () -> Tensor[(13, 14, 14), uint32] {
    %1018 = @func_3456() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), uint32]) */;
    %1018.0
  };
  %1019() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_5833() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  %1028 = fn () -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
    %1020 = @func_3178() /* ty=(Tensor[(13, 14, ?), int32], Tensor[(13, 14, 14), uint32], Tensor[(70), float32], Tensor[(13, 14, 70), float32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32]) */;
    %1021 = @func_5342() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
    %1022 = %1021.2;
    %1023 = cast(%1022, dtype="float32") /* ty=Tensor[(13, 14, ?), float32] */;
    %1024 = @func_3226() /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) */;
    %1025 = %1020.4;
    %1026 = acos(%1023) /* ty=Tensor[(13, 14, ?), float32] */;
    %1027 = %1024.0;
    (%1025, %1026, %1027)
  };
  %1028() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */
}

def @func_8303() -> Tensor[(13, 14, 14), float64] {
  %1029 = @func_5591() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %1029.0
}

def @func_7277(%var_7275: Tensor[(70), float32]) -> (Tensor[(13, 14, 14), float64], Tensor[(70), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) {
  @func_7274(%var_7275) /* ty=(Tensor[(13, 14, 14), float64], Tensor[(70), float32], Tensor[(70), float32], Tensor[(13, 14, 14), float64]) */
}

def @func_3052() -> (Tensor[(13, 14, ?), float32],) {
  @func_3050() /* ty=(Tensor[(13, 14, ?), float32],) */
}

def @func_2151() -> (Tensor[(13, 14, 14), uint32],) {
  %1030 = @func_2000() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %1031 = %1030.0;
  (%1031,)
}

def @func_8283(%var_8282: Tensor[(13, 14, 6), float32]) -> (Tensor[(13, 14, 6), uint16], Tensor[(13, 14, ?), float32], Tensor[(144), bool], Tensor[(?, 14, 5), bool], Tensor[(1, 450), float32], Tensor[(14, 5), float32]) {
  %1046 = fn (%var_8233: Tensor[(13, 14, 6), float32]) -> (Tensor[(13, 14, 6), uint16], Tensor[(13, 14, ?), float32], Tensor[(144), bool], Tensor[(?, 14, 5), bool], Tensor[(1, 450), float32], Tensor[(14, 5), float32]) {
    %1032 = @func_1932() /* ty=Tensor[(13, 14, ?), float32] */;
    %1033 = cast(%1032, dtype="uint16") /* ty=Tensor[(13, 14, ?), uint16] */;
    %1034 = cast(%var_8233, dtype="uint16") /* ty=Tensor[(13, 14, 6), uint16] */;
    %1035 = cast(meta[relay.Constant][35] /* ty=Tensor[(144), bool] */, dtype="bool") /* ty=Tensor[(144), bool] */;
    %1036 = reshape(%1035, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), bool] */;
    %1037 = @func_8034(%1036) /* ty=(Tensor[(3, 16, 3), bool], Tensor[(13, 14, ?), float32]) */;
    %1038 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 450), float32] */, dtype="float32") /* ty=Tensor[(1, 450), float32] */;
    %1039 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 5), float32] */, dtype="float32") /* ty=Tensor[(14, 5), float32] */;
    %1040 = reshape(%1038, newshape=[10, 5, 9]) /* ty=Tensor[(10, 5, 9), float32] */;
    %1041 = reshape(%1039, newshape=[70]) /* ty=Tensor[(70), float32] */;
    %1042 = @func_1562(%1040, %1041) /* ty=(Tensor[(10, 5, 9), float32], Tensor[(10, 5, 9), float32], Tensor[(6, 10, 4), uint16], Tensor[(240), uint16], Tensor[(?, 14, 5), bool]) */;
    %1043 = bitwise_xor(%1033, %1034) /* ty=Tensor[(13, 14, 6), uint16] */;
    %1044 = %1037.1;
    %1045 = %1042.4;
    (%1043, %1044, meta[relay.Constant][35] /* ty=Tensor[(144), bool] */, %1045, meta[relay.Constant][36] /* ty=Tensor[(1, 450), float32] */, meta[relay.Constant][37] /* ty=Tensor[(14, 5), float32] */)
  };
  %1046(%var_8282) /* ty=(Tensor[(13, 14, 6), uint16], Tensor[(13, 14, ?), float32], Tensor[(144), bool], Tensor[(?, 14, 5), bool], Tensor[(1, 450), float32], Tensor[(14, 5), float32]) */
}

def @func_3226() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
  %1047 = @func_2151() /* ty=(Tensor[(13, 14, 14), uint32],) */;
  %1048 = @func_2773() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %1049 = %1047.0;
  %1050 = %1048.0;
  (%1049, %1050)
}

def @func_2208() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) {
  @func_2206() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */
}

def @func_2657() -> Tensor[(13, 14, 14), uint32] {
  @func_2655() /* ty=Tensor[(13, 14, 14), uint32] */
}

def @func_9950() -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float64]) {
  %1057 = fn () -> (Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float64]) {
    %1051 = @func_5276() /* ty=(Tensor[(13, 14, ?), float32],) */;
    %1052 = @func_2833() /* ty=(Tensor[(13, 14, ?), bool],) */;
    %1053 = %1052.0;
    %1054 = cast(%1053, dtype="float64") /* ty=Tensor[(13, 14, ?), float64] */;
    %1055 = %1051.0;
    %1056 = sin(%1054) /* ty=Tensor[(13, 14, ?), float64] */;
    (%1055, %1056)
  };
  %1057() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, ?), float64]) */
}

def @func_10218() -> (Tensor[(13, 14, 14), uint32],) {
  @func_10216() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_4784() -> (Tensor[(13, 14, ?), float32],) {
  @func_4782() /* ty=(Tensor[(13, 14, ?), float32],) */
}

def @func_1961(%var_1959: Tensor[(6, 1, 3), float64]) -> (Tensor[(6, 1, 3), float64],) {
  @func_1958(%var_1959) /* ty=(Tensor[(6, 1, 3), float64],) */
}

def @func_9390(%var_9388: Tensor[(13, 14, 8), bool]) -> (Tensor[(3, ?, 5), bool], Tensor[(13, 14, 8), float64], Tensor[(13, 14, ?), float32]) {
  @func_9387(%var_9388) /* ty=(Tensor[(3, ?, 5), bool], Tensor[(13, 14, 8), float64], Tensor[(13, 14, ?), float32]) */
}

def @func_7782() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32]) {
  %1061 = fn () -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32]) {
    %1058 = @func_3958() /* ty=Tensor[(13, 14, 14), float64] */;
    %1059 = @func_3502() /* ty=Tensor[(13, 14, 14), float64] */;
    %1060 = @func_5128() /* ty=Tensor[(13, 14, 14), uint32] */;
    (%1058, %1059, %1060)
  };
  %1061() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint32]) */
}

def @func_11426() -> (Tensor[(13, 14, 14), bool], Tensor[(13, 14, 14), float64]) {
  %1062 = @func_10907() /* ty=(Tensor[(13, 14, 14), float64],) */;
  %1063 = @func_2969() /* ty=Tensor[(13, 14, 14), bool] */;
  %1064 = %1062.0;
  (%1063, %1064)
}

def @func_4882(%var_4875: Tensor[(13, 14, 9), float32]) -> Tensor[(13, 14, 9), int8] {
  %1065 = @func_3092() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32]) */;
  %1066 = %1065.0;
  %1067 = cast(%1066, dtype="int8") /* ty=Tensor[(13, 14, ?), int8] */;
  %1068 = cast(%var_4875, dtype="int8") /* ty=Tensor[(13, 14, 9), int8] */;
  bitwise_or(%1067, %1068) /* ty=Tensor[(13, 14, 9), int8] */
}

def @func_2974() -> Tensor[(13, 14, ?), float32] {
  @func_1918() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_1958(%var_1955: Tensor[(6, 1, 3), float64]) -> (Tensor[(6, 1, 3), float64],) {
  %1069 = cast(%var_1955, dtype="float64") /* ty=Tensor[(6, 1, 3), float64] */;
  %1070 = acos(%1069) /* ty=Tensor[(6, 1, 3), float64] */;
  (%1070,)
}

def @func_8305() -> Tensor[(13, 14, 14), float64] {
  @func_8303() /* ty=Tensor[(13, 14, 14), float64] */
}

def @func_4701() -> (Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, ?), float32]) {
  @func_4699() /* ty=(Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), uint16], Tensor[(13, 14, ?), float32]) */
}

def @func_2001() -> (Tensor[(13, 14, 14), uint32],) {
  %1075 = fn () -> (Tensor[(13, 14, 14), uint32],) {
    %1071 = @func_1918() /* ty=Tensor[(13, 14, ?), float32] */;
    %1072 = cast(%1071, dtype="uint32") /* ty=Tensor[(13, 14, ?), uint32] */;
    %1073 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 14, 14), float32] */, dtype="uint32") /* ty=Tensor[(13, 14, 14), uint32] */;
    %1074 = right_shift(%1072, %1073) /* ty=Tensor[(13, 14, 14), uint32] */;
    (%1074,)
  };
  %1075() /* ty=(Tensor[(13, 14, 14), uint32],) */
}

def @func_12396() -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64]) {
  %1076 = @func_8353() /* ty=(Tensor[(13, 14, ?), float32], Tensor[(13, 14, 14), uint32], Tensor[(13, 14, 14), float64], Tensor[(13, 14, 14), float64]) */;
  %1077 = %1076.1;
  %1078 = @func_12373() /* ty=Tensor[(13, 14, 14), float64] */;
  (%1077, %1078)
}

def @func_7165() -> Tensor[(13, 14, ?), float32] {
  @func_7163() /* ty=Tensor[(13, 14, ?), float32] */
}

def @func_10444() -> (Tensor[(13, 14, 14), uint32],) {
  %1079 = @func_3282() /* ty=Tensor[(13, 14, 14), uint32] */;
  (%1079,)
}

def @func_2371(%var_2369: Tensor[(1, 450), float32], %var_2370: Tensor[(14, 5), float32]) -> (Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(?, 14, 5), bool], Tensor[(1, 450), float32], Tensor[(14, 5), float32], Tensor[(13, 14, ?), float32]) {
  @func_2367(%var_2369, %var_2370) /* ty=(Tensor[(13, 14, 14), uint32], Tensor[(13, 14, ?), float32], Tensor[(?, 14, 5), bool], Tensor[(1, 450), float32], Tensor[(14, 5), float32], Tensor[(13, 14, ?), float32]) */
}

def @func_3955() -> (Tensor[(13, 14, ?), float32],) {
  %1081 = fn () -> (Tensor[(13, 14, ?), float32],) {
    %1080 = @func_2103() /* ty=Tensor[(13, 14, ?), float32] */;
    (%1080,)
  };
  %1081() /* ty=(Tensor[(13, 14, ?), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen702/build/output.py", line 3937, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:55:18] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

