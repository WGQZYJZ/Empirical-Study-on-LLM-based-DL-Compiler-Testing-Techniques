==========mod==========
#[version = "0.0.5"]
def @func_3322(%var_3294: Tensor[(1, 15, 6), uint16], %var_3313: Tensor[(27, 2), float32]) -> (Tensor[(5, 16, ?), uint32], Tensor[(5, 2, 14), int64], Tensor[(140), int64], Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64], Tensor[(27, 2), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(140), int64] */, dtype="int64") /* ty=Tensor[(140), int64] */;
  %1 = reshape(%0, newshape=[5, 2, 14]) /* ty=Tensor[(5, 2, 14), int64] */;
  %2 = @func_3165(%1) /* ty=(Tensor[(5, 2, 14), int64],) */;
  %3 = @func_2350() /* ty=(Tensor[(42), uint32], Tensor[(?, 15, 6), uint16]) */;
  %4 = %3.1;
  %5 = cast(%var_3294, dtype="int64") /* ty=Tensor[(1, 15, 6), int64] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="int64") /* ty=Tensor[(?, 15, 6), int64] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %9 = cast(%var_3313, dtype="float32") /* ty=Tensor[(27, 2), float32] */;
  %10 = reshape(%9, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %11 = @func_2576(%10) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(1, 15, 6), float64], Tensor[(1, 9, 6), float32], Tensor[(54), float32], Tensor[(?, 15, 6), float64], Tensor[(8, 15, 6), float64], uint32) */;
  %12 = @func_2465() /* ty=Tensor[(5, 16, ?), uint32] */;
  %13 = %2.0;
  %14 = minimum(%7, %8) /* ty=Tensor[(?, 15, 6), int64] */;
  %15 = %11.1;
  (%12, %13, meta[relay.Constant][0] /* ty=Tensor[(140), int64] */, %14, %15, %var_3313)
}

def @func_5498() -> (Tensor[(?, 15, 6), int64], Tensor[(54), float32], Tensor[(480), float64], Tensor[(54), float32]) {
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %18 = reshape(%16, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %19 = reshape(%17, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %20 = @func_3065(%18, %19) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64], int32, Tensor[(60), int32], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(?, 15, 6), float64], int32, Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756, 1), float32], Tensor[(54), float32], Tensor[(6, 9, 8), uint8], Tensor[(4, 108), uint8], Tensor[(4, 10, 12), float64], Tensor[(1, 15, 6), float64]) */;
  %21 = @func_4535() /* ty=Tensor[(?, 15, 6), int64] */;
  %22 = %20.12;
  (%21, %22, meta[relay.Constant][1] /* ty=Tensor[(480), float64] */, meta[relay.Constant][2] /* ty=Tensor[(54), float32] */)
}

def @func_2025(%var_2022: uint32) -> (Tensor[(1, 15, 6), float64], Tensor[(1280), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(8, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) {
  %23 = cast(meta[relay.Constant][3] /* ty=Tensor[(1280), uint8] */, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
  %24 = reshape(%23, newshape=[1280]) /* ty=Tensor[(1280), uint8] */;
  %25 = @func_1769(%24) /* ty=(Tensor[(7, 15, 6), int16], Tensor[(1, 9, 6), float32], Tensor[(2, 128), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32], Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64]) */;
  %26 = cast(meta[relay.Constant][4] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %27 = reshape(%26, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float64] */;
  %28 = @func_221(%27) /* ty=(Tensor[(4, 10, 12), float64],) */;
  %29 = @func_1828() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64]) */;
  %30 = %29.0;
  %31 = cast(%30, dtype="float64") /* ty=Tensor[(?, 15, 6), float64] */;
  %32 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 15, 6), int64] */, dtype="float64") /* ty=Tensor[(8, 15, 6), float64] */;
  %33 = cast(%var_2022, dtype="uint32") /* ty=uint32 */;
  %34 = cast(meta[relay.Constant][6] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %35 = reshape(%33, newshape=[]) /* ty=uint32 */;
  %36 = reshape(%34, newshape=[7, 6, 1]) /* ty=Tensor[(7, 6, 1), uint32] */;
  %37 = @func_971(%35, %36) /* ty=(Tensor[(7, 6, 1), float32],) */;
  %38 = %25.7;
  %39 = %28.0;
  %40 = power(%31, %32) /* ty=Tensor[(8, 15, 6), float64] */;
  %41 = %37.0;
  (%38, meta[relay.Constant][3] /* ty=Tensor[(1280), uint8] */, %39, meta[relay.Constant][4] /* ty=Tensor[(480), float64] */, %40, %41, %var_2022, meta[relay.Constant][6] /* ty=Tensor[(42), uint32] */)
}

def @func_6077(%var_6044: Tensor[(3, 15, 6), float64], %var_6064: Tensor[(480), float64]) -> (Tensor[(3, 15, 6), bool], Tensor[(240, 2), float64], Tensor[(480), float64], Tensor[(1280), uint8]) {
  %42 = @func_4471() /* ty=(Tensor[(3, 15, 6), float64],) */;
  %43 = %42.0;
  %44 = cast(%var_6044, dtype="bool") /* ty=Tensor[(3, 15, 6), bool] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%43, dtype="bool") /* ty=Tensor[(3, 15, 6), bool] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %48 = cast(%var_6064, dtype="float64") /* ty=Tensor[(480), float64] */;
  %49 = reshape(%48, newshape=[240, 2]) /* ty=Tensor[(240, 2), float64] */;
  %50 = @func_1854(%49) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(4, 10, 12), float64], Tensor[(240, 2), float64]) */;
  %51 = @func_4328() /* ty=(Tensor[(1, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(1280), uint8], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
  %52 = not_equal(%46, %47) /* ty=Tensor[(3, 15, 6), bool] */;
  %53 = %50.2;
  %54 = %51.2;
  (%52, %53, %var_6064, %54)
}

def @func_1212() -> Tensor[(1, 15, 6), float64] {
  %55 = cast(-4.3289f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %56 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 15, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  floor_divide(%55, %56) /* ty=Tensor[(1, 15, 6), float64] */
}

def @func_4570() -> Tensor[(?, 15, 6), int64] {
  %57 = @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %57.0
}

def @func_7178() -> (Tensor[(?, 15, 6), float64], Tensor[(675, 2), int8], uint32) {
  %58 = @func_3932() /* ty=(Tensor[(?, 15, 6), float64],) */;
  %59 = cast(meta[relay.Constant][8] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %60 = reshape(%59, newshape=[]) /* ty=uint32 */;
  %61 = @func_4759(%60) /* ty=(Tensor[(4, 13, 12), float64], Tensor[(?, 15, 6), float64], Tensor[(675, 2), int8]) */;
  %62 = %58.0;
  %63 = %61.2;
  (%62, %63, meta[relay.Constant][8] /* ty=uint32 */)
}

def @func_4768(%var_4764: Tensor[(2, 1, 13), float32]) -> Tensor[(2, 1, 13), float32] {
  %64 = cast(-6.60761f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %65 = cast(%var_4764, dtype="float32") /* ty=Tensor[(2, 1, 13), float32] */;
  power(%64, %65) /* ty=Tensor[(2, 1, 13), float32] */
}

def @func_4932() -> (Tensor[(27, 2), float32],) {
  %66 = @func_3915() /* ty=(Tensor[(3, 15, 6), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */;
  %67 = %66.1;
  (%67,)
}

def @func_2137(%var_2128: Tensor[(11, 1, 14), float64]) -> (Tensor[(11, 1, 14), float64], uint32, uint32) {
  %68 = cast(%var_2128, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %69 = cast(meta[relay.Constant][9] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %70 = reshape(%69, newshape=[]) /* ty=uint32 */;
  %71 = @func_2025(%70) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(1280), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(8, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
  %72 = log10(%68) /* ty=Tensor[(11, 1, 14), float64] */;
  %73 = %71.6;
  (%72, %73, meta[relay.Constant][9] /* ty=uint32 */)
}

def @func_6846() -> (Tensor[(?, 15, 6), float64],) {
  %74 = @func_3932() /* ty=(Tensor[(?, 15, 6), float64],) */;
  %75 = %74.0;
  (%75,)
}

def @func_3127(%var_3094: Tensor[(48), float64]) -> (Tensor[(?, 15, 6), float64], Tensor[(48), float64], Tensor[(?, 15, 6), int16]) {
  %76 = cast(%var_3094, dtype="float64") /* ty=Tensor[(48), float64] */;
  %77 = reshape(%76, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), float64] */;
  %78 = @func_2995(%77) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(3, 4, 4), bool]) */;
  %79 = %78.0;
  %80 = @func_2350() /* ty=(Tensor[(42), uint32], Tensor[(?, 15, 6), uint16]) */;
  %81 = %80.1;
  %82 = cast(%81, dtype="int16") /* ty=Tensor[(?, 15, 6), int16] */;
  %83 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%79, dtype="int16") /* ty=Tensor[(?, 15, 6), int16] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %86 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
  %87 = left_shift(%84, %85) /* ty=Tensor[(?, 15, 6), int16] */;
  (%86, %var_3094, %87)
}

def @func_1697() -> (Tensor[(?, 15, 6), int64],) {
  %88 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %89 = %88.0;
  (%89,)
}

def @func_7244() -> Tensor[(4, 13, 12), float64] {
  %90 = @func_4344() /* ty=(Tensor[(4, 13, 12), float64],) */;
  %90.0
}

def @func_2878(%var_2875: int32, %var_2876: Tensor[(60), int32]) -> (Tensor[(1, 15, 6), float64], Tensor[(3, 4, 5), int32], int32, Tensor[(60), int32]) {
  %91 = @func_2635() /* ty=Tensor[(1, 15, 6), float64] */;
  %92 = cast(%91, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %93 = cast(%var_2875, dtype="int32") /* ty=int32 */;
  %94 = cast(%var_2876, dtype="int32") /* ty=Tensor[(60), int32] */;
  %95 = reshape(%93, newshape=[]) /* ty=int32 */;
  %96 = reshape(%94, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), int32] */;
  %97 = asin(%92) /* ty=Tensor[(1, 15, 6), float64] */;
  %98 = @func_2214(%95, %96) /* ty=Tensor[(3, 4, 5), int32] */;
  (%97, %98, %var_2875, %var_2876)
}

def @func_1889() -> (Tensor[(1, 15, 6), float64],) {
  %99 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  (%99,)
}

def @func_3738(%var_3736: Tensor[(16, 80), uint8]) -> (Tensor[(?, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(256), uint8], Tensor[(16, 80), uint8]) {
  %100 = cast(meta[relay.Constant][10] /* ty=Tensor[(256), uint8] */, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %101 = cast(%var_3736, dtype="uint8") /* ty=Tensor[(16, 80), uint8] */;
  %102 = cast(%var_3736, dtype="float64") /* ty=Tensor[(16, 80), float64] */;
  %103 = cast(%var_3736, dtype="float64") /* ty=Tensor[(16, 80), float64] */;
  %104 = cast(%var_3736, dtype="bool") /* ty=Tensor[(16, 80), bool] */;
  %105 = reshape(%100, newshape=[16, 1, 16]) /* ty=Tensor[(16, 1, 16), uint8] */;
  %106 = reshape(%101, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), uint8] */;
  %107 = reshape(%102, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), float64] */;
  %108 = reshape(%103, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), float64] */;
  %109 = reshape(%104, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), bool] */;
  %110 = @func_490(%105, %106, %107, %108, %109) /* ty=(Tensor[(16, 5, 16), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(4, 10, 12), float64], Tensor[(16, 5, 16), int16], Tensor[(16, 5, 16), uint16], Tensor[(4, 10, 12), float64], Tensor[(4, 10, 12), float64]) */;
  %111 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
  %112 = %110.7;
  (%111, %112, meta[relay.Constant][10] /* ty=Tensor[(256), uint8] */, %var_3736)
}

def @func_6024() -> (Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) {
  %113 = @func_3405() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(5, 16, ?), float64], Tensor[(?, 15, 6), int64]) */;
  %114 = cast(meta[relay.Constant][11] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %115 = cast(meta[relay.Constant][12] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %116 = reshape(%114, newshape=[]) /* ty=uint32 */;
  %117 = reshape(%115, newshape=[7, 6, 1]) /* ty=Tensor[(7, 6, 1), uint32] */;
  %118 = @func_971(%116, %117) /* ty=(Tensor[(7, 6, 1), float32],) */;
  %119 = @func_4570() /* ty=Tensor[(?, 15, 6), int64] */;
  %120 = @func_4810() /* ty=Tensor[(?, 15, 6), int64] */;
  %121 = %113.0;
  %122 = %118.0;
  (%119, %120, %121, %122, meta[relay.Constant][11] /* ty=uint32 */, meta[relay.Constant][12] /* ty=Tensor[(42), uint32] */)
}

def @func_3352() -> (Tensor[(?, 15, 6), int64],) {
  %123 = @func_1697() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %124 = %123.0;
  (%124,)
}

def @func_6993() -> (Tensor[(4, 10, 12), float64], Tensor[(?, 15, 6), uint8]) {
  %125 = @func_4328() /* ty=(Tensor[(1, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(1280), uint8], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
  %126 = %125.1;
  %127 = cast(%126, dtype="float64") /* ty=Tensor[(4, 10, 12), float64] */;
  %128 = @func_6661() /* ty=(Tensor[(?, 15, 6), uint8],) */;
  %129 = exp(%127) /* ty=Tensor[(4, 10, 12), float64] */;
  %130 = %128.0;
  (%129, %130)
}

def @func_3405() -> (Tensor[(?, 15, 6), int64], Tensor[(5, 16, ?), float64], Tensor[(?, 15, 6), int64]) {
  %131 = @func_1697() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %132 = @func_2465() /* ty=Tensor[(5, 16, ?), uint32] */;
  %133 = cast(%132, dtype="float64") /* ty=Tensor[(5, 16, ?), float64] */;
  %134 = @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %135 = %131.0;
  %136 = sigmoid(%133) /* ty=Tensor[(5, 16, ?), float64] */;
  %137 = %134.0;
  (%135, %136, %137)
}

def @func_7033() -> (Tensor[(1, 15, 6), float64], Tensor[(1, 15, 6), float64]) {
  %138 = @func_1889() /* ty=(Tensor[(1, 15, 6), float64],) */;
  %139 = @func_2704() /* ty=(Tensor[(?, 15, 6), int16], Tensor[(1, 15, 6), float64], Tensor[(?, 15, 6), bool]) */;
  %140 = %138.0;
  %141 = %139.1;
  (%140, %141)
}

def @func_4502() -> (Tensor[(1, 15, 6), float32],) {
  %142 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  %143 = cast(%142, dtype="float32") /* ty=Tensor[(1, 15, 6), float32] */;
  %144 = exp(%143) /* ty=Tensor[(1, 15, 6), float32] */;
  (%144,)
}

def @func_4307(%var_4243: uint32, %var_4250: Tensor[(15, 15, 6), int64]) -> (Tensor[(?, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32], Tensor[(15, 15, 6), int64], Tensor[(?, 15, 6), float64], Tensor[(11, 8, 2), bool], Tensor[(176), bool], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) {
  %145 = @func_3405() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(5, 16, ?), float64], Tensor[(?, 15, 6), int64]) */;
  %146 = %145.0;
  %147 = cast(%146, dtype="float64") /* ty=Tensor[(?, 15, 6), float64] */;
  %148 = cast(%var_4243, dtype="uint32") /* ty=uint32 */;
  %149 = cast(meta[relay.Constant][13] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %150 = reshape(%148, newshape=[]) /* ty=uint32 */;
  %151 = reshape(%149, newshape=[7, 6, 1]) /* ty=Tensor[(7, 6, 1), uint32] */;
  %152 = @func_971(%150, %151) /* ty=(Tensor[(7, 6, 1), float32],) */;
  %153 = cast(%146, dtype="int64") /* ty=Tensor[(?, 15, 6), int64] */;
  %154 = cast(%var_4250, dtype="int64") /* ty=Tensor[(15, 15, 6), int64] */;
  %155 = cast(meta[relay.Constant][14] /* ty=Tensor[(176), bool] */, dtype="bool") /* ty=Tensor[(176), bool] */;
  %156 = reshape(%155, newshape=[11, 8, 2]) /* ty=Tensor[(11, 8, 2), bool] */;
  %157 = @func_1022(%156) /* ty=(Tensor[(11, 8, 2), bool],) */;
  %158 = cast(meta[relay.Constant][15] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %159 = reshape(%158, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), float64] */;
  %160 = @func_2137(%159) /* ty=(Tensor[(11, 1, 14), float64], uint32, uint32) */;
  %161 = sin(%147) /* ty=Tensor[(?, 15, 6), float64] */;
  %162 = %152.0;
  %163 = right_shift(%153, %154) /* ty=Tensor[(15, 15, 6), int64] */;
  %164 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
  %165 = %157.0;
  %166 = %160.0;
  (%161, %162, %var_4243, meta[relay.Constant][13] /* ty=Tensor[(42), uint32] */, %163, %164, %165, meta[relay.Constant][14] /* ty=Tensor[(176), bool] */, %166, meta[relay.Constant][15] /* ty=Tensor[(154), float64] */)
}

def @func_7914() -> Tensor[(?, 15, 6), int64] {
  %167 = @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %167.0
}

def @func_3561() -> (Tensor[(1, 15, 6), float64], Tensor[(4, 13, 12), float64]) {
  %168 = @func_1889() /* ty=(Tensor[(1, 15, 6), float64],) */;
  %169 = %168.0;
  %170 = @func_3440() /* ty=Tensor[(4, 13, 12), float64] */;
  (%169, %170)
}

def @func_5101(%var_5079: Tensor[(1280), uint8], %var_5093: Tensor[(10, 15, 6), int64]) -> (Tensor[(1280), bool], Tensor[(10, 15, 6), float32]) {
  %171 = @func_4328() /* ty=(Tensor[(1, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(1280), uint8], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
  %172 = %171.2;
  %173 = cast(%var_5079, dtype="bool") /* ty=Tensor[(1280), bool] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(1), int32] */;
  %175 = cast(%172, dtype="bool") /* ty=Tensor[(1280), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?), bool] */;
  %177 = @func_1697() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %178 = %177.0;
  %179 = cast(%178, dtype="float32") /* ty=Tensor[(?, 15, 6), float32] */;
  %180 = cast(%var_5093, dtype="float32") /* ty=Tensor[(10, 15, 6), float32] */;
  %181 = less(%175, %176) /* ty=Tensor[(1280), bool] */;
  %182 = divide(%179, %180) /* ty=Tensor[(10, 15, 6), float32] */;
  (%181, %182)
}

def @func_4557(%var_4545: Tensor[(7, 15, 6), int64]) -> (Tensor[(7, 15, 6), bool],) {
  %183 = @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %184 = %183.0;
  %185 = cast(%184, dtype="bool") /* ty=Tensor[(?, 15, 6), bool] */;
  %186 = cast(%var_4545, dtype="bool") /* ty=Tensor[(7, 15, 6), bool] */;
  %187 = not_equal(%185, %186) /* ty=Tensor[(7, 15, 6), bool] */;
  (%187,)
}

def @func_7792(%var_7782: Tensor[(15, 3, 4), uint8]) -> (Tensor[(15, 3, 4), uint8],) {
  %188 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 3, 4), uint8] */, dtype="uint8") /* ty=Tensor[(15, 3, 4), uint8] */;
  %189 = shape_of(%var_7782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%var_7782, dtype="uint8") /* ty=Tensor[(15, 3, 4), uint8] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %192 = subtract(%190, %191) /* ty=Tensor[(15, 3, 4), uint8] */;
  (%192,)
}

def @func_5280() -> (Tensor[(4, 13, 12), float64], Tensor[(7, 15, 6), bool], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) {
  %193 = @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %194 = %193.0;
  %195 = cast(%194, dtype="bool") /* ty=Tensor[(?, 15, 6), bool] */;
  %196 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 15, 6), int64] */, dtype="bool") /* ty=Tensor[(7, 15, 6), bool] */;
  %197 = cast(meta[relay.Constant][18] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %198 = reshape(%197, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), float64] */;
  %199 = @func_2137(%198) /* ty=(Tensor[(11, 1, 14), float64], uint32, uint32) */;
  %200 = @func_3982() /* ty=Tensor[(4, 13, 12), float64] */;
  %201 = logical_and(%195, %196) /* ty=Tensor[(7, 15, 6), bool] */;
  %202 = %199.0;
  (%200, %201, %202, meta[relay.Constant][18] /* ty=Tensor[(154), float64] */)
}

def @func_3606(%var_3571: int8, %var_3572: Tensor[(1, 15, 4), int8], %var_3592: Tensor[(154), float64]) -> (Tensor[(1, 15, 4), int8], uint32, Tensor[(154), float64]) {
  %203 = cast(%var_3571, dtype="int8") /* ty=int8 */;
  %204 = cast(%var_3572, dtype="int8") /* ty=Tensor[(1, 15, 4), int8] */;
  %205 = cast(%var_3592, dtype="float64") /* ty=Tensor[(154), float64] */;
  %206 = reshape(%205, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), float64] */;
  %207 = @func_2137(%206) /* ty=(Tensor[(11, 1, 14), float64], uint32, uint32) */;
  %208 = subtract(%203, %204) /* ty=Tensor[(1, 15, 4), int8] */;
  %209 = %207.1;
  (%208, %209, %var_3592)
}

def @func_4395(%var_4367: Tensor[(27, 2), float32]) -> (Tensor[(27, 2), bool], Tensor[(1, 15, 6), float64]) {
  %210 = @func_3915() /* ty=(Tensor[(3, 15, 6), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */;
  %211 = %210.1;
  %212 = cast(%var_4367, dtype="bool") /* ty=Tensor[(27, 2), bool] */;
  %213 = shape_of(%211, dtype="int32") /* ty=Tensor[(2), int32] */;
  %214 = cast(%211, dtype="bool") /* ty=Tensor[(27, 2), bool] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %216 = greater_equal(%214, %215) /* ty=Tensor[(27, 2), bool] */;
  %217 = cast(%211, dtype="bool") /* ty=Tensor[(27, 2), bool] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(2), int32] */;
  %219 = cast(%216, dtype="bool") /* ty=Tensor[(27, 2), bool] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %221 = greater(%219, %220) /* ty=Tensor[(27, 2), bool] */;
  %222 = cast(%221, dtype="bool") /* ty=Tensor[(27, 2), bool] */;
  %223 = shape_of(%216, dtype="int32") /* ty=Tensor[(2), int32] */;
  %224 = cast(%216, dtype="bool") /* ty=Tensor[(27, 2), bool] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %226 = @func_1889() /* ty=(Tensor[(1, 15, 6), float64],) */;
  %227 = logical_and(%224, %225) /* ty=Tensor[(27, 2), bool] */;
  %228 = %226.0;
  (%227, %228)
}

def @func_3956(%var_3949: Tensor[(1280), uint8]) -> (Tensor[(4, 13, 12), float64], Tensor[(4, 13, 12), float64], Tensor[(1, 15, 6), float64], Tensor[(1280), uint8]) {
  %229 = @func_2594() /* ty=(Tensor[(4, 13, 12), float64],) */;
  %230 = cast(%var_3949, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
  %231 = reshape(%230, newshape=[1280]) /* ty=Tensor[(1280), uint8] */;
  %232 = @func_1769(%231) /* ty=(Tensor[(7, 15, 6), int16], Tensor[(1, 9, 6), float32], Tensor[(2, 128), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32], Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64]) */;
  %233 = %229.0;
  %234 = @func_3440() /* ty=Tensor[(4, 13, 12), float64] */;
  %235 = %232.7;
  (%233, %234, %235, %var_3949)
}

def @func_7421() -> (Tensor[(1, 15, 6), float64], Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64], Tensor[(60), int32], Tensor[(3, 4, 5), bool]) {
  %236 = @func_4142() /* ty=(Tensor[(?, 15, 6), uint8],) */;
  %237 = @func_4855() /* ty=(Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64]) */;
  %238 = cast(10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %239 = cast(meta[relay.Constant][19] /* ty=Tensor[(60), int32] */, dtype="int32") /* ty=Tensor[(60), int32] */;
  %240 = reshape(%238, newshape=[]) /* ty=int32 */;
  %241 = reshape(%239, newshape=[60]) /* ty=Tensor[(60), int32] */;
  %242 = @func_2878(%240, %241) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(3, 4, 5), int32], int32, Tensor[(60), int32]) */;
  %243 = %242.1;
  %244 = cast(%243, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
  %245 = cast(10 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %246 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  %247 = %236.0;
  %248 = %237.1;
  %249 = logical_and(%244, %245) /* ty=Tensor[(3, 4, 5), bool] */;
  (%246, %247, %248, meta[relay.Constant][19] /* ty=Tensor[(60), int32] */, %249)
}

def @func_6293(%var_6240: Tensor[(256), uint8], %var_6267: Tensor[(756), float32]) -> (Tensor[(10, 10, 6), float32], Tensor[(256), uint8], Tensor[(?, 15, 6), int64], Tensor[(3, 15, 6), bool], Tensor[(756), float32], Tensor[(7, 6, 1), float32], Tensor[(1, 15, 6), float32], Tensor[(12, 9, 7), int32]) {
  %250 = cast(%var_6240, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %251 = reshape(%250, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %252 = @func_1275(%251) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(16, 5, 16), int16], Tensor[(256), uint8], Tensor[(1280), uint8]) */;
  %253 = %252.0;
  %254 = cast(%253, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  %255 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 15, 6), float64] */, dtype="bool") /* ty=Tensor[(3, 15, 6), bool] */;
  %256 = @func_6024() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
  %257 = @func_4502() /* ty=(Tensor[(1, 15, 6), float32],) */;
  %258 = cast(%var_6267, dtype="float32") /* ty=Tensor[(756), float32] */;
  %259 = reshape(%258, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), float32] */;
  %260 = @func_662(%259) /* ty=(Tensor[(12, 9, 7), float32],) */;
  %261 = %260.0;
  %262 = cast(%261, dtype="float32") /* ty=Tensor[(12, 9, 7), float32] */;
  %263 = reshape(%262, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), float32] */;
  %264 = @func_662(%263) /* ty=(Tensor[(12, 9, 7), float32],) */;
  %265 = %264.0;
  %266 = cast(%265, dtype="int32") /* ty=Tensor[(12, 9, 7), int32] */;
  %267 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%261, dtype="int32") /* ty=Tensor[(12, 9, 7), int32] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %270 = @func_5521() /* ty=Tensor[(10, 10, 6), float32] */;
  %271 = @func_4570() /* ty=Tensor[(?, 15, 6), int64] */;
  %272 = logical_or(%254, %255) /* ty=Tensor[(3, 15, 6), bool] */;
  %273 = %256.3;
  %274 = %257.0;
  %275 = logical_xor(%268, %269) /* ty=Tensor[(12, 9, 7), int32] */;
  (%270, %var_6240, %271, %272, %var_6267, %273, %274, %275)
}

def @func_5521() -> Tensor[(10, 10, 6), float32] {
  %276 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 10, 6), float32] */, dtype="float32") /* ty=Tensor[(10, 10, 6), float32] */;
  tan(%276) /* ty=Tensor[(10, 10, 6), float32] */
}

def @func_5420(%var_5353: Tensor[(756), float32], %var_5354: Tensor[(1, 54), float32], %var_5365: uint32) -> (Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(1872), float64], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(1, 54), float32], Tensor[(256), float64], Tensor[(176), bool], uint32, Tensor[(1350), int64], Tensor[(1, 15, 6), float64], Tensor[(1, 15, 6), float64]) {
  %277 = cast(meta[relay.Constant][22] /* ty=Tensor[(1872), float64] */, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %278 = cast(meta[relay.Constant][23] /* ty=Tensor[(1280), uint8] */, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
  %279 = cast(%var_5353, dtype="float32") /* ty=Tensor[(756), float32] */;
  %280 = cast(%var_5354, dtype="float32") /* ty=Tensor[(1, 54), float32] */;
  %281 = reshape(%277, newshape=[1872]) /* ty=Tensor[(1872), float64] */;
  %282 = reshape(%278, newshape=[1280]) /* ty=Tensor[(1280), uint8] */;
  %283 = reshape(%279, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %284 = reshape(%280, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %285 = @func_2783(%281, %282, %283, %284) /* ty=(Tensor[(14, 15, 6), float32], Tensor[(14, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(1872), float64], Tensor[(14, 15, 6), int32], Tensor[(756), float32], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32]) */;
  %286 = %285.6;
  %287 = cast(%286, dtype="float64") /* ty=Tensor[(256), float64] */;
  %288 = cast(%var_5365, dtype="uint32") /* ty=uint32 */;
  %289 = cast(meta[relay.Constant][24] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %290 = reshape(%288, newshape=[]) /* ty=uint32 */;
  %291 = reshape(%289, newshape=[15, 15, 6]) /* ty=Tensor[(15, 15, 6), int64] */;
  %292 = @func_4307(%290, %291) /* ty=(Tensor[(?, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32], Tensor[(15, 15, 6), int64], Tensor[(?, 15, 6), float64], Tensor[(11, 8, 2), bool], Tensor[(176), bool], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) */;
  %293 = @func_4535() /* ty=Tensor[(?, 15, 6), int64] */;
  %294 = @func_4535() /* ty=Tensor[(?, 15, 6), int64] */;
  %295 = log(%287) /* ty=Tensor[(256), float64] */;
  %296 = %292.7;
  %297 = @func_4870() /* ty=Tensor[(1, 15, 6), float64] */;
  %298 = @func_2635() /* ty=Tensor[(1, 15, 6), float64] */;
  (%293, %294, meta[relay.Constant][22] /* ty=Tensor[(1872), float64] */, meta[relay.Constant][23] /* ty=Tensor[(1280), uint8] */, %var_5353, %var_5354, %295, %296, %var_5365, meta[relay.Constant][24] /* ty=Tensor[(1350), int64] */, %297, %298)
}

def @func_3915() -> (Tensor[(3, 15, 6), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) {
  %299 = @func_2510() /* ty=Tensor[(?, 15, 6), int64] */;
  %300 = cast(%299, dtype="float64") /* ty=Tensor[(?, 15, 6), float64] */;
  %301 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 15, 6), int64] */, dtype="float64") /* ty=Tensor[(3, 15, 6), float64] */;
  %302 = cast(%299, dtype="uint16") /* ty=Tensor[(?, 15, 6), uint16] */;
  %303 = cast(meta[relay.Constant][26] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %304 = reshape(%302, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), uint16] */;
  %305 = reshape(%303, newshape=[27, 2]) /* ty=Tensor[(27, 2), float32] */;
  %306 = @func_3322(%304, %305) /* ty=(Tensor[(5, 16, ?), uint32], Tensor[(5, 2, 14), int64], Tensor[(140), int64], Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64], Tensor[(27, 2), float32]) */;
  %307 = mod(%300, %301) /* ty=Tensor[(3, 15, 6), float64] */;
  %308 = %306.5;
  (%307, %308, meta[relay.Constant][26] /* ty=Tensor[(54), float32] */)
}

def @func_3932() -> (Tensor[(?, 15, 6), float64],) {
  %309 = @func_2292() /* ty=Tensor[(1, 15, 6), float64] */;
  %310 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 15, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%309, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %314 = floor_mod(%312, %313) /* ty=Tensor[(?, 15, 6), float64] */;
  (%314,)
}

def @func_2635() -> Tensor[(1, 15, 6), float64] {
  @func_2292() /* ty=Tensor[(1, 15, 6), float64] */
}

def @func_7548(%var_7538: Tensor[(5, 4, 5), float32]) -> (Tensor[(5, 4, 5), float32],) {
  %315 = cast(%var_7538, dtype="float32") /* ty=Tensor[(5, 4, 5), float32] */;
  %316 = log(%315) /* ty=Tensor[(5, 4, 5), float32] */;
  (%316,)
}

def @func_2350() -> (Tensor[(42), uint32], Tensor[(?, 15, 6), uint16]) {
  %317 = @func_2292() /* ty=Tensor[(1, 15, 6), float64] */;
  %318 = cast(meta[relay.Constant][28] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %319 = reshape(%318, newshape=[42]) /* ty=Tensor[(42), uint32] */;
  %320 = @func_1433(%319) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
  %321 = %320.2;
  %322 = cast(%317, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  %323 = cast(%321, dtype="bool") /* ty=bool */;
  %324 = not_equal(%322, %323) /* ty=Tensor[(1, 15, 6), bool] */;
  %325 = @func_1697() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %326 = %325.0;
  %327 = cast(%326, dtype="uint16") /* ty=Tensor[(?, 15, 6), uint16] */;
  %328 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%324, dtype="uint16") /* ty=Tensor[(1, 15, 6), uint16] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %331 = multiply(%329, %330) /* ty=Tensor[(?, 15, 6), uint16] */;
  (meta[relay.Constant][28] /* ty=Tensor[(42), uint32] */, %331)
}

def @func_4855() -> (Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64]) {
  %332 = @func_4142() /* ty=(Tensor[(?, 15, 6), uint8],) */;
  %333 = @func_4344() /* ty=(Tensor[(4, 13, 12), float64],) */;
  %334 = %332.0;
  %335 = %333.0;
  (%334, %335)
}

def @func_7047() -> (Tensor[(?, 15, 6), uint8],) {
  %336 = @func_4855() /* ty=(Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64]) */;
  %337 = %336.0;
  (%337,)
}

def @func_3210(%var_3196: Tensor[(14, 15, 6), bool]) -> (Tensor[(14, 15, 6), bool], Tensor[(14, 15, 6), int16]) {
  %338 = @func_2704() /* ty=(Tensor[(?, 15, 6), int16], Tensor[(1, 15, 6), float64], Tensor[(?, 15, 6), bool]) */;
  %339 = %338.2;
  %340 = cast(%339, dtype="bool") /* ty=Tensor[(?, 15, 6), bool] */;
  %341 = cast(%var_3196, dtype="bool") /* ty=Tensor[(14, 15, 6), bool] */;
  %342 = cast(%var_3196, dtype="int16") /* ty=Tensor[(14, 15, 6), int16] */;
  %343 = cast(%339, dtype="int16") /* ty=Tensor[(?, 15, 6), int16] */;
  %344 = not_equal(%340, %341) /* ty=Tensor[(14, 15, 6), bool] */;
  %345 = logical_xor(%342, %343) /* ty=Tensor[(14, 15, 6), int16] */;
  (%344, %345)
}

def @func_3982() -> Tensor[(4, 13, 12), float64] {
  @func_3440() /* ty=Tensor[(4, 13, 12), float64] */
}

def @func_2058(%var_2043: Tensor[(11, 2, 16), uint8], %var_2044: Tensor[(11, 2, 16), uint8]) -> Tensor[(11, 2, 16), uint8] {
  %346 = cast(%var_2044, dtype="uint8") /* ty=Tensor[(11, 2, 16), uint8] */;
  %347 = shape_of(%var_2043, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%var_2043, dtype="uint8") /* ty=Tensor[(11, 2, 16), uint8] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  add(%348, %349) /* ty=Tensor[(11, 2, 16), uint8] */
}

def @func_221(%var_205: Tensor[(4, 10, 12), float64]) -> (Tensor[(4, 10, 12), float64],) {
  %350 = cast(%var_205, dtype="float64") /* ty=Tensor[(4, 10, 12), float64] */;
  %351 = log10(%350) /* ty=Tensor[(4, 10, 12), float64] */;
  (%351,)
}

def @func_4344() -> (Tensor[(4, 13, 12), float64],) {
  %352 = @func_3440() /* ty=Tensor[(4, 13, 12), float64] */;
  (%352,)
}

def @func_1433(%var_1431: Tensor[(42), uint32]) -> (Tensor[(1, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) {
  %353 = cast(meta[relay.Constant][29] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %354 = cast(%var_1431, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %355 = reshape(%353, newshape=[]) /* ty=uint32 */;
  %356 = reshape(%354, newshape=[7, 6, 1]) /* ty=Tensor[(7, 6, 1), uint32] */;
  %357 = @func_971(%355, %356) /* ty=(Tensor[(7, 6, 1), float32],) */;
  %358 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  %359 = %357.0;
  (%358, %359, meta[relay.Constant][29] /* ty=uint32 */, %var_1431)
}

def @func_4142() -> (Tensor[(?, 15, 6), uint8],) {
  %360 = @func_2510() /* ty=Tensor[(?, 15, 6), int64] */;
  %361 = @func_2635() /* ty=Tensor[(1, 15, 6), float64] */;
  %362 = cast(%361, dtype="uint8") /* ty=Tensor[(1, 15, 6), uint8] */;
  %363 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%360, dtype="uint8") /* ty=Tensor[(?, 15, 6), uint8] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %366 = bitwise_and(%364, %365) /* ty=Tensor[(?, 15, 6), uint8] */;
  (%366,)
}

def @func_7130() -> Tensor[(?, 15, 6), int64] {
  %367 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %367.0
}

def @func_6452() -> (Tensor[(720), float64],) {
  %368 = @func_4459() /* ty=(Tensor[(?, 15, 6), float64], Tensor[(720), float64], Tensor[(1, 15, 6), float32]) */;
  %369 = %368.1;
  (%369,)
}

def @func_5053() -> (Tensor[(1, 15, 6), float64],) {
  %370 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  (%370,)
}

def @func_662(%var_650: Tensor[(12, 9, 7), float32]) -> (Tensor[(12, 9, 7), float32],) {
  %371 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 9, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 9, 7), float32] */;
  %372 = shape_of(%var_650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%var_650, dtype="float32") /* ty=Tensor[(12, 9, 7), float32] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %375 = floor_divide(%373, %374) /* ty=Tensor[(12, 9, 7), float32] */;
  (%375,)
}

def @func_7353() -> (Tensor[(4, 13, 12), float64], Tensor[(?, 15, 6), float64]) {
  %376 = @func_5280() /* ty=(Tensor[(4, 13, 12), float64], Tensor[(7, 15, 6), bool], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) */;
  %377 = @func_6846() /* ty=(Tensor[(?, 15, 6), float64],) */;
  %378 = %376.0;
  %379 = %377.0;
  (%378, %379)
}

def @func_6902(%var_6891: Tensor[(14, 8, 12), float64], %var_6892: Tensor[(14, 8, 12), float64]) -> Tensor[(14, 8, 12), float64] {
  %380 = cast(%var_6892, dtype="float64") /* ty=Tensor[(14, 8, 12), float64] */;
  %381 = shape_of(%var_6891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%var_6891, dtype="float64") /* ty=Tensor[(14, 8, 12), float64] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%382, %383) /* ty=Tensor[(14, 8, 12), float64] */
}

def @func_6498(%var_6493: Tensor[(54), float32]) -> (Tensor[(1, 15, 6), float64], Tensor[(?, 9, 6), bool], Tensor[(54), float32]) {
  %384 = cast(%var_6493, dtype="float32") /* ty=Tensor[(54), float32] */;
  %385 = reshape(%384, newshape=[54, 1]) /* ty=Tensor[(54, 1), float32] */;
  %386 = @func_4024(%385) /* ty=(Tensor[(?, 15, 6), uint16], Tensor[(?, 9, 6), bool]) */;
  %387 = @func_2377() /* ty=Tensor[(1, 15, 6), float64] */;
  %388 = %386.1;
  (%387, %388, %var_6493)
}

def @func_2377() -> Tensor[(1, 15, 6), float64] {
  @func_2292() /* ty=Tensor[(1, 15, 6), float64] */
}

def @func_2292() -> Tensor[(1, 15, 6), float64] {
  @func_1212() /* ty=Tensor[(1, 15, 6), float64] */
}

def @func_1639() -> (Tensor[(?, 15, 6), int64],) {
  %389 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  %390 = cast(%389, dtype="float32") /* ty=Tensor[(1, 15, 6), float32] */;
  %391 = cosh(%390) /* ty=Tensor[(1, 15, 6), float32] */;
  %392 = cast(%391, dtype="int64") /* ty=Tensor[(1, 15, 6), int64] */;
  %393 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%389, dtype="int64") /* ty=Tensor[(1, 15, 6), int64] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %396 = right_shift(%394, %395) /* ty=Tensor[(?, 15, 6), int64] */;
  (%396,)
}

def @func_2995(%var_2962: Tensor[(3, 4, 4), float64]) -> (Tensor[(?, 15, 6), int64], Tensor[(3, 4, 4), bool]) {
  %397 = cast(%var_2962, dtype="float64") /* ty=Tensor[(3, 4, 4), float64] */;
  %398 = cos(%397) /* ty=Tensor[(3, 4, 4), float64] */;
  %399 = cast(%var_2962, dtype="bool") /* ty=Tensor[(3, 4, 4), bool] */;
  %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%398, dtype="bool") /* ty=Tensor[(3, 4, 4), bool] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %403 = @func_2510() /* ty=Tensor[(?, 15, 6), int64] */;
  %404 = greater(%401, %402) /* ty=Tensor[(3, 4, 4), bool] */;
  (%403, %404)
}

def @func_6726() -> (Tensor[(4, 13, 12), float64], Tensor[(3, 4, 5), int32], int32, Tensor[(60), int32]) {
  %405 = @func_2594() /* ty=(Tensor[(4, 13, 12), float64],) */;
  %406 = cast(-5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %407 = cast(meta[relay.Constant][31] /* ty=Tensor[(60), int32] */, dtype="int32") /* ty=Tensor[(60), int32] */;
  %408 = reshape(%406, newshape=[]) /* ty=int32 */;
  %409 = reshape(%407, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), int32] */;
  %410 = %405.0;
  %411 = @func_2214(%408, %409) /* ty=Tensor[(3, 4, 5), int32] */;
  (%410, %411, -5 /* ty=int32 */, meta[relay.Constant][31] /* ty=Tensor[(60), int32] */)
}

def @func_6822(%var_6808: Tensor[(54), float32]) -> (Tensor[(3, 15, 6), float64], Tensor[(624), bool], Tensor[(27, 2), bool], Tensor[(54), float32], Tensor[(27, 2), bool], Tensor[(3, 15, 6), float64]) {
  %412 = @func_4471() /* ty=(Tensor[(3, 15, 6), float64],) */;
  %413 = cast(meta[relay.Constant][32] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %414 = reshape(%413, newshape=[4, 13, 12]) /* ty=Tensor[(4, 13, 12), float64] */;
  %415 = @func_5948(%414) /* ty=Tensor[(4, 13, 12), bool] */;
  %416 = cast(%415, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
  %417 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(624), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %418 = cast(meta[relay.Constant][32] /* ty=Tensor[(624), float64] */, dtype="bool") /* ty=Tensor[(624), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?), bool] */;
  %420 = cast(%var_6808, dtype="float32") /* ty=Tensor[(54), float32] */;
  %421 = reshape(%420, newshape=[27, 2]) /* ty=Tensor[(27, 2), float32] */;
  %422 = @func_4395(%421) /* ty=(Tensor[(27, 2), bool], Tensor[(1, 15, 6), float64]) */;
  %423 = %422.0;
  %424 = cast(%423, dtype="float32") /* ty=Tensor[(27, 2), float32] */;
  %425 = reshape(%424, newshape=[27, 2]) /* ty=Tensor[(27, 2), float32] */;
  %426 = @func_4395(%425) /* ty=(Tensor[(27, 2), bool], Tensor[(1, 15, 6), float64]) */;
  %427 = @func_5153() /* ty=(Tensor[(3, 15, 6), float64],) */;
  %428 = %412.0;
  %429 = logical_or(%418, %419) /* ty=Tensor[(624), bool] */;
  %430 = %426.0;
  %431 = %427.0;
  (%428, %429, %423, %var_6808, %430, %431)
}

def @func_4992(%var_4977: Tensor[(26), float32]) -> (Tensor[(1, 15, 6), float32], Tensor[(2, 1, 13), float32], Tensor[(26), uint64], Tensor[(26), int8]) {
  %432 = @func_4502() /* ty=(Tensor[(1, 15, 6), float32],) */;
  %433 = cast(meta[relay.Constant][33] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %434 = reshape(%433, newshape=[2, 1, 13]) /* ty=Tensor[(2, 1, 13), float32] */;
  %435 = cast(%var_4977, dtype="uint64") /* ty=Tensor[(26), uint64] */;
  %436 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(26), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %437 = cast(meta[relay.Constant][33] /* ty=Tensor[(26), float32] */, dtype="uint64") /* ty=Tensor[(26), uint64] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %439 = cast(meta[relay.Constant][34] /* ty=Tensor[(26), float32] */, dtype="int8") /* ty=Tensor[(26), int8] */;
  %440 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(26), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %441 = cast(meta[relay.Constant][33] /* ty=Tensor[(26), float32] */, dtype="int8") /* ty=Tensor[(26), int8] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?), int8] */;
  %443 = %432.0;
  %444 = @func_4768(%434) /* ty=Tensor[(2, 1, 13), float32] */;
  %445 = maximum(%437, %438) /* ty=Tensor[(26), uint64] */;
  %446 = bitwise_or(%441, %442) /* ty=Tensor[(26), int8] */;
  (%443, %444, %445, %446)
}

def @func_6582() -> Tensor[(?, 15, 6), int64] {
  %447 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %447.0
}

def @func_2271(%var_2252: Tensor[(8, 15, 6), float64]) -> (Tensor[(8, 15, 6), uint64], Tensor[(?, 15, 6), float64]) {
  %448 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  %449 = cast(%448, dtype="uint64") /* ty=Tensor[(1, 15, 6), uint64] */;
  %450 = cast(%var_2252, dtype="uint64") /* ty=Tensor[(8, 15, 6), uint64] */;
  %451 = @func_1828() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64]) */;
  %452 = minimum(%449, %450) /* ty=Tensor[(8, 15, 6), uint64] */;
  %453 = %451.1;
  (%452, %453)
}

def @func_6915() -> (Tensor[(?, 15, 6), int64],) {
  %454 = @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %455 = %454.0;
  (%455,)
}

def @func_6923() -> (Tensor[(1, 15, 6), float64],) {
  %456 = @func_2377() /* ty=Tensor[(1, 15, 6), float64] */;
  (%456,)
}

def @func_4184(%var_4166: Tensor[(12, 15, 6), int64]) -> (Tensor[(12, 15, 6), uint16], Tensor[(9, 13, 16), float64], Tensor[(936, 2), float64]) {
  %457 = @func_2510() /* ty=Tensor[(?, 15, 6), int64] */;
  %458 = cast(%457, dtype="uint16") /* ty=Tensor[(?, 15, 6), uint16] */;
  %459 = cast(%var_4166, dtype="uint16") /* ty=Tensor[(12, 15, 6), uint16] */;
  %460 = cast(meta[relay.Constant][35] /* ty=Tensor[(936, 2), float64] */, dtype="float64") /* ty=Tensor[(936, 2), float64] */;
  %461 = cast(meta[relay.Constant][35] /* ty=Tensor[(936, 2), float64] */, dtype="float64") /* ty=Tensor[(936, 2), float64] */;
  %462 = reshape(%460, newshape=[9, 13, 16]) /* ty=Tensor[(9, 13, 16), float64] */;
  %463 = reshape(%461, newshape=[9, 13, 16]) /* ty=Tensor[(9, 13, 16), float64] */;
  %464 = @func_2119(%462, %463) /* ty=(Tensor[(9, 13, 16), float64], Tensor[(?, 15, 6), int64]) */;
  %465 = right_shift(%458, %459) /* ty=Tensor[(12, 15, 6), uint16] */;
  %466 = %464.0;
  (%465, %466, meta[relay.Constant][35] /* ty=Tensor[(936, 2), float64] */)
}

def @func_2419(%var_2412: Tensor[(6, 9, 8), uint8]) -> Tensor[(6, 9, 8), uint8] {
  %467 = cast(meta[relay.Constant][36] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %468 = cast(%var_2412, dtype="uint8") /* ty=Tensor[(6, 9, 8), uint8] */;
  bitwise_xor(%467, %468) /* ty=Tensor[(6, 9, 8), uint8] */
}

def @func_5845(%var_5816: Tensor[(2, 936), float64], %var_5839: Tensor[(54), float32]) -> (Tensor[(?, 15, 6), float64], Tensor[(256), uint8], Tensor[(2, 936), float64], Tensor[(16, 80), uint8], Tensor[(756), float32], Tensor[(54), int16]) {
  %469 = cast(%var_5816, dtype="float64") /* ty=Tensor[(2, 936), float64] */;
  %470 = cast(meta[relay.Constant][37] /* ty=Tensor[(16, 80), uint8] */, dtype="uint8") /* ty=Tensor[(16, 80), uint8] */;
  %471 = cast(meta[relay.Constant][38] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %472 = cast(meta[relay.Constant][39] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %473 = reshape(%469, newshape=[1872]) /* ty=Tensor[(1872), float64] */;
  %474 = reshape(%470, newshape=[1280]) /* ty=Tensor[(1280), uint8] */;
  %475 = reshape(%471, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %476 = reshape(%472, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %477 = @func_2783(%473, %474, %475, %476) /* ty=(Tensor[(14, 15, 6), float32], Tensor[(14, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(1872), float64], Tensor[(14, 15, 6), int32], Tensor[(756), float32], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32]) */;
  %478 = cast(%var_5839, dtype="int16") /* ty=Tensor[(54), int16] */;
  %479 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(54), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %480 = cast(meta[relay.Constant][39] /* ty=Tensor[(54), float32] */, dtype="int16") /* ty=Tensor[(54), int16] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?), int16] */;
  %482 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
  %483 = %477.6;
  %484 = minimum(%480, %481) /* ty=Tensor[(54), int16] */;
  (%482, %483, %var_5816, meta[relay.Constant][37] /* ty=Tensor[(16, 80), uint8] */, meta[relay.Constant][38] /* ty=Tensor[(756), float32] */, %484)
}

def @func_2174() -> Tensor[(?, 15, 6), float64] {
  %485 = @func_1828() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64]) */;
  %485.1
}

def @func_7697(%var_7682: Tensor[(256), uint8]) -> (Tensor[(5, 16, ?), uint32], Tensor[(1, 15, 6), float32], Tensor[(256), uint8], Tensor[(756), float32]) {
  %486 = cast(%var_7682, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %487 = cast(meta[relay.Constant][40] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %488 = reshape(%486, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %489 = reshape(%487, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %490 = @func_6293(%488, %489) /* ty=(Tensor[(10, 10, 6), float32], Tensor[(256), uint8], Tensor[(?, 15, 6), int64], Tensor[(3, 15, 6), bool], Tensor[(756), float32], Tensor[(7, 6, 1), float32], Tensor[(1, 15, 6), float32], Tensor[(12, 9, 7), int32]) */;
  %491 = @func_2465() /* ty=Tensor[(5, 16, ?), uint32] */;
  %492 = %490.6;
  (%491, %492, %var_7682, meta[relay.Constant][40] /* ty=Tensor[(756), float32] */)
}

def @func_971(%var_960: uint32, %var_961: Tensor[(7, 6, 1), uint32]) -> (Tensor[(7, 6, 1), float32],) {
  %493 = cast(%var_960, dtype="bool") /* ty=bool */;
  %494 = cast(%var_961, dtype="bool") /* ty=Tensor[(7, 6, 1), bool] */;
  %495 = greater_equal(%493, %494) /* ty=Tensor[(7, 6, 1), bool] */;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(7, 6, 1), float32] */;
  %497 = atanh(%496) /* ty=Tensor[(7, 6, 1), float32] */;
  (%497,)
}

def @func_4024(%var_4006: Tensor[(54, 1), float32]) -> (Tensor[(?, 15, 6), uint16], Tensor[(?, 9, 6), bool]) {
  %498 = @func_2350() /* ty=(Tensor[(42), uint32], Tensor[(?, 15, 6), uint16]) */;
  %499 = cast(%var_4006, dtype="float32") /* ty=Tensor[(54, 1), float32] */;
  %500 = reshape(%499, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), float32] */;
  %501 = @func_1042(%500) /* ty=Tensor[(1, 9, 6), float32] */;
  %502 = cast(%var_4006, dtype="bool") /* ty=Tensor[(54, 1), bool] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%501, dtype="bool") /* ty=Tensor[(1, 9, 6), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %506 = %498.1;
  %507 = greater(%504, %505) /* ty=Tensor[(?, 9, 6), bool] */;
  (%506, %507)
}

def @func_6975() -> (uint32,) {
  %508 = @func_6367() /* ty=(uint32,) */;
  %509 = %508.0;
  (%509,)
}

def @func_4459() -> (Tensor[(?, 15, 6), float64], Tensor[(720), float64], Tensor[(1, 15, 6), float32]) {
  %510 = cast(meta[relay.Constant][41] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %511 = reshape(%510, newshape=[8, 15, 6]) /* ty=Tensor[(8, 15, 6), float64] */;
  %512 = @func_2271(%511) /* ty=(Tensor[(8, 15, 6), uint64], Tensor[(?, 15, 6), float64]) */;
  %513 = @func_2377() /* ty=Tensor[(1, 15, 6), float64] */;
  %514 = cast(%513, dtype="float32") /* ty=Tensor[(1, 15, 6), float32] */;
  %515 = tan(%514) /* ty=Tensor[(1, 15, 6), float32] */;
  %516 = cast(%515, dtype="float32") /* ty=Tensor[(1, 15, 6), float32] */;
  %517 = %512.1;
  %518 = erf(%516) /* ty=Tensor[(1, 15, 6), float32] */;
  (%517, meta[relay.Constant][41] /* ty=Tensor[(720), float64] */, %518)
}

def @func_4870() -> Tensor[(1, 15, 6), float64] {
  @func_1212() /* ty=Tensor[(1, 15, 6), float64] */
}

def @func_1828() -> (Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64]) {
  %519 = @func_1697() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %520 = @func_1697() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %521 = %520.0;
  %522 = cast(%521, dtype="float32") /* ty=Tensor[(?, 15, 6), float32] */;
  %523 = asinh(%522) /* ty=Tensor[(?, 15, 6), float32] */;
  %524 = cast(%523, dtype="float64") /* ty=Tensor[(?, 15, 6), float64] */;
  %525 = %519.0;
  %526 = acos(%524) /* ty=Tensor[(?, 15, 6), float64] */;
  (%525, %526)
}

def @func_2214(%var_2196: int32, %var_2197: Tensor[(3, 4, 5), int32]) -> Tensor[(3, 4, 5), int32] {
  %527 = cast(%var_2196, dtype="int32") /* ty=int32 */;
  %528 = cast(%var_2197, dtype="int32") /* ty=Tensor[(3, 4, 5), int32] */;
  left_shift(%527, %528) /* ty=Tensor[(3, 4, 5), int32] */
}

def @func_5153() -> (Tensor[(3, 15, 6), float64],) {
  %529 = @func_3915() /* ty=(Tensor[(3, 15, 6), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */;
  %530 = %529.0;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(3, 15, 6), float64] */;
  %532 = rsqrt(%531) /* ty=Tensor[(3, 15, 6), float64] */;
  (%532,)
}

def @func_2783(%var_2757: Tensor[(1872), float64], %var_2777: Tensor[(1280), uint8], %var_2778: Tensor[(756), float32], %var_2779: Tensor[(54), float32]) -> (Tensor[(14, 15, 6), float32], Tensor[(14, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(1872), float64], Tensor[(14, 15, 6), int32], Tensor[(756), float32], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32]) {
  %533 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  %534 = cast(%533, dtype="float32") /* ty=Tensor[(1, 15, 6), float32] */;
  %535 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 15, 6), float64] */, dtype="float32") /* ty=Tensor[(14, 15, 6), float32] */;
  %536 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
  %537 = cast(%533, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  %538 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 15, 6), float64] */, dtype="bool") /* ty=Tensor[(14, 15, 6), bool] */;
  %539 = logical_or(%537, %538) /* ty=Tensor[(14, 15, 6), bool] */;
  %540 = cast(%536, dtype="int64") /* ty=Tensor[(?, 15, 6), int64] */;
  %541 = cast(%539, dtype="int64") /* ty=Tensor[(14, 15, 6), int64] */;
  %542 = cast(%var_2757, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %543 = cast(%var_2757, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %544 = reshape(%542, newshape=[9, 13, 16]) /* ty=Tensor[(9, 13, 16), float64] */;
  %545 = reshape(%543, newshape=[9, 13, 16]) /* ty=Tensor[(9, 13, 16), float64] */;
  %546 = @func_2119(%544, %545) /* ty=(Tensor[(9, 13, 16), float64], Tensor[(?, 15, 6), int64]) */;
  %547 = cast(%539, dtype="float64") /* ty=Tensor[(14, 15, 6), float64] */;
  %548 = log10(%547) /* ty=Tensor[(14, 15, 6), float64] */;
  %549 = @func_2704() /* ty=(Tensor[(?, 15, 6), int16], Tensor[(1, 15, 6), float64], Tensor[(?, 15, 6), bool]) */;
  %550 = %549.1;
  %551 = cast(%548, dtype="int32") /* ty=Tensor[(14, 15, 6), int32] */;
  %552 = cast(%550, dtype="int32") /* ty=Tensor[(1, 15, 6), int32] */;
  %553 = cast(meta[relay.Constant][43] /* ty=Tensor[(256), uint8] */, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %554 = cast(%var_2777, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
  %555 = cast(%var_2778, dtype="float32") /* ty=Tensor[(756), float32] */;
  %556 = cast(%var_2779, dtype="float32") /* ty=Tensor[(54), float32] */;
  %557 = reshape(%553, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %558 = reshape(%554, newshape=[640, 2]) /* ty=Tensor[(640, 2), uint8] */;
  %559 = reshape(%555, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %560 = reshape(%556, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %561 = @func_1394(%557, %558, %559, %560) /* ty=(Tensor[(4, 10, 12), float64], Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(?, 15, 6), bool], Tensor[(4, 10, 12), float64], Tensor[(640, 2), uint8], Tensor[(12, 9, 7), float32], Tensor[(756), float32], Tensor[(1, 9, 6), float32], Tensor[(54), float32]) */;
  %562 = multiply(%534, %535) /* ty=Tensor[(14, 15, 6), float32] */;
  %563 = add(%540, %541) /* ty=Tensor[(14, 15, 6), int64] */;
  %564 = %546.1;
  %565 = bitwise_or(%551, %552) /* ty=Tensor[(14, 15, 6), int32] */;
  %566 = %561.7;
  (%562, %563, %564, %var_2757, %565, %566, meta[relay.Constant][43] /* ty=Tensor[(256), uint8] */, %var_2777, %var_2778, %var_2779)
}

def @func_7778() -> (Tensor[(?, 15, 6), float64], Tensor[(480), float64]) {
  %567 = @func_3932() /* ty=(Tensor[(?, 15, 6), float64],) */;
  %568 = @func_5498() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(54), float32], Tensor[(480), float64], Tensor[(54), float32]) */;
  %569 = %567.0;
  %570 = %568.2;
  (%569, %570)
}

def @func_3440() -> Tensor[(4, 13, 12), float64] {
  %571 = @func_2594() /* ty=(Tensor[(4, 13, 12), float64],) */;
  %571.0
}

def @func_4328() -> (Tensor[(1, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(1280), uint8], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) {
  %572 = cast(meta[relay.Constant][44] /* ty=Tensor[(1280), uint8] */, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
  %573 = reshape(%572, newshape=[16, 80]) /* ty=Tensor[(16, 80), uint8] */;
  %574 = @func_3738(%573) /* ty=(Tensor[(?, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(256), uint8], Tensor[(16, 80), uint8]) */;
  %575 = cast(meta[relay.Constant][45] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %576 = cast(meta[relay.Constant][46] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %577 = reshape(%575, newshape=[]) /* ty=uint32 */;
  %578 = reshape(%576, newshape=[7, 6, 1]) /* ty=Tensor[(7, 6, 1), uint32] */;
  %579 = @func_971(%577, %578) /* ty=(Tensor[(7, 6, 1), float32],) */;
  %580 = @func_2292() /* ty=Tensor[(1, 15, 6), float64] */;
  %581 = %574.1;
  %582 = %579.0;
  (%580, %581, meta[relay.Constant][44] /* ty=Tensor[(1280), uint8] */, %582, meta[relay.Constant][45] /* ty=uint32 */, meta[relay.Constant][46] /* ty=Tensor[(42), uint32] */)
}

def @func_7799() -> Tensor[(4, 13, 12), float64] {
  %583 = @func_7353() /* ty=(Tensor[(4, 13, 12), float64], Tensor[(?, 15, 6), float64]) */;
  %583.0
}

def @func_3065(%var_3024: Tensor[(480), float64], %var_3044: Tensor[(54), float32]) -> (Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64], int32, Tensor[(60), int32], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(?, 15, 6), float64], int32, Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756, 1), float32], Tensor[(54), float32], Tensor[(6, 9, 8), uint8], Tensor[(4, 108), uint8], Tensor[(4, 10, 12), float64], Tensor[(1, 15, 6), float64]) {
  %584 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %585 = cast(meta[relay.Constant][47] /* ty=Tensor[(60), int32] */, dtype="int32") /* ty=Tensor[(60), int32] */;
  %586 = reshape(%584, newshape=[]) /* ty=int32 */;
  %587 = reshape(%585, newshape=[60]) /* ty=Tensor[(60), int32] */;
  %588 = @func_2878(%586, %587) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(3, 4, 5), int32], int32, Tensor[(60), int32]) */;
  %589 = cast(%var_3024, dtype="float64") /* ty=Tensor[(480), float64] */;
  %590 = reshape(%589, newshape=[240, 2]) /* ty=Tensor[(240, 2), float64] */;
  %591 = @func_1854(%590) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(4, 10, 12), float64], Tensor[(240, 2), float64]) */;
  %592 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %593 = cast(meta[relay.Constant][47] /* ty=Tensor[(60), int32] */, dtype="int32") /* ty=Tensor[(60), int32] */;
  %594 = reshape(%592, newshape=[]) /* ty=int32 */;
  %595 = reshape(%593, newshape=[60]) /* ty=Tensor[(60), int32] */;
  %596 = @func_2878(%594, %595) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(3, 4, 5), int32], int32, Tensor[(60), int32]) */;
  %597 = cast(meta[relay.Constant][48] /* ty=Tensor[(256), uint8] */, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %598 = cast(meta[relay.Constant][49] /* ty=Tensor[(1280), uint8] */, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
  %599 = cast(meta[relay.Constant][50] /* ty=Tensor[(756, 1), float32] */, dtype="float32") /* ty=Tensor[(756, 1), float32] */;
  %600 = cast(%var_3044, dtype="float32") /* ty=Tensor[(54), float32] */;
  %601 = reshape(%597, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %602 = reshape(%598, newshape=[640, 2]) /* ty=Tensor[(640, 2), uint8] */;
  %603 = reshape(%599, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %604 = reshape(%600, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %605 = @func_1394(%601, %602, %603, %604) /* ty=(Tensor[(4, 10, 12), float64], Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(?, 15, 6), bool], Tensor[(4, 10, 12), float64], Tensor[(640, 2), uint8], Tensor[(12, 9, 7), float32], Tensor[(756), float32], Tensor[(1, 9, 6), float32], Tensor[(54), float32]) */;
  %606 = cast(meta[relay.Constant][51] /* ty=Tensor[(4, 108), uint8] */, dtype="uint8") /* ty=Tensor[(4, 108), uint8] */;
  %607 = reshape(%606, newshape=[6, 9, 8]) /* ty=Tensor[(6, 9, 8), uint8] */;
  %608 = %605.1;
  %609 = cast(%608, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %610 = reshape(%609, newshape=[240, 2]) /* ty=Tensor[(240, 2), float64] */;
  %611 = @func_1854(%610) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(4, 10, 12), float64], Tensor[(240, 2), float64]) */;
  %612 = @func_2510() /* ty=Tensor[(?, 15, 6), int64] */;
  %613 = %588.0;
  %614 = %591.1;
  %615 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
  %616 = %596.2;
  %617 = @func_2419(%607) /* ty=Tensor[(6, 9, 8), uint8] */;
  %618 = %611.1;
  %619 = @func_2377() /* ty=Tensor[(1, 15, 6), float64] */;
  (%612, %613, -1 /* ty=int32 */, meta[relay.Constant][47] /* ty=Tensor[(60), int32] */, %614, %var_3024, %615, %616, %608, meta[relay.Constant][48] /* ty=Tensor[(256), uint8] */, meta[relay.Constant][49] /* ty=Tensor[(1280), uint8] */, meta[relay.Constant][50] /* ty=Tensor[(756, 1), float32] */, %var_3044, %617, meta[relay.Constant][51] /* ty=Tensor[(4, 108), uint8] */, %618, %619)
}

def @func_1022(%var_1017: Tensor[(11, 8, 2), bool]) -> (Tensor[(11, 8, 2), bool],) {
  %620 = cast(meta[relay.Constant][52] /* ty=Tensor[(11, 8, 2), bool] */, dtype="bool") /* ty=Tensor[(11, 8, 2), bool] */;
  %621 = shape_of(%var_1017, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%var_1017, dtype="bool") /* ty=Tensor[(11, 8, 2), bool] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %624 = logical_and(%622, %623) /* ty=Tensor[(11, 8, 2), bool] */;
  (%624,)
}

def @func_4535() -> Tensor[(?, 15, 6), int64] {
  @func_2510() /* ty=Tensor[(?, 15, 6), int64] */
}

def @func_4471() -> (Tensor[(3, 15, 6), float64],) {
  %625 = @func_3915() /* ty=(Tensor[(3, 15, 6), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */;
  %626 = %625.0;
  (%626,)
}

def @func_5779() -> (Tensor[(5, 16, ?), uint32], Tensor[(4, 13, 12), float64]) {
  %627 = @func_2940() /* ty=(Tensor[(4, 13, 12), float64],) */;
  %628 = @func_2465() /* ty=Tensor[(5, 16, ?), uint32] */;
  %629 = %627.0;
  (%628, %629)
}

def @func_2465() -> Tensor[(5, 16, ?), uint32] {
  %630 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 16, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %631 = atanh(%630) /* ty=Tensor[(5, 16, 1), float64] */;
  %632 = cast(%631, dtype="float32") /* ty=Tensor[(5, 16, 1), float32] */;
  %633 = acos(%632) /* ty=Tensor[(5, 16, 1), float32] */;
  %634 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 16, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %635 = cosh(%634) /* ty=Tensor[(5, 16, 1), float64] */;
  %636 = cast(%635, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %637 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%633, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %640 = floor_divide(%638, %639) /* ty=Tensor[(5, 16, ?), float64] */;
  %641 = cast(%635, dtype="uint32") /* ty=Tensor[(5, 16, 1), uint32] */;
  %642 = shape_of(%640, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%640, dtype="uint32") /* ty=Tensor[(5, 16, ?), uint32] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%643, %644) /* ty=Tensor[(5, 16, ?), uint32] */
}

def @func_1275(%var_1260: Tensor[(256), uint8]) -> (Tensor[(1, 15, 6), float64], Tensor[(16, 5, 16), int16], Tensor[(256), uint8], Tensor[(1280), uint8]) {
  %645 = cast(%var_1260, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %646 = cast(meta[relay.Constant][54] /* ty=Tensor[(1280), uint8] */, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
  %647 = cast(meta[relay.Constant][54] /* ty=Tensor[(1280), uint8] */, dtype="float64") /* ty=Tensor[(1280), float64] */;
  %648 = cast(meta[relay.Constant][54] /* ty=Tensor[(1280), uint8] */, dtype="float64") /* ty=Tensor[(1280), float64] */;
  %649 = cast(meta[relay.Constant][54] /* ty=Tensor[(1280), uint8] */, dtype="bool") /* ty=Tensor[(1280), bool] */;
  %650 = reshape(%645, newshape=[16, 1, 16]) /* ty=Tensor[(16, 1, 16), uint8] */;
  %651 = reshape(%646, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), uint8] */;
  %652 = reshape(%647, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), float64] */;
  %653 = reshape(%648, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), float64] */;
  %654 = reshape(%649, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), bool] */;
  %655 = @func_490(%650, %651, %652, %653, %654) /* ty=(Tensor[(16, 5, 16), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(4, 10, 12), float64], Tensor[(16, 5, 16), int16], Tensor[(16, 5, 16), uint16], Tensor[(4, 10, 12), float64], Tensor[(4, 10, 12), float64]) */;
  %656 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  %657 = %655.4;
  (%656, %657, %var_1260, meta[relay.Constant][54] /* ty=Tensor[(1280), uint8] */)
}

def @func_3506(%var_3472: Tensor[(1872), float64], %var_3474: Tensor[(756), float32], %var_3475: Tensor[(54), float32]) -> (Tensor[(4, 13, 12), float64], Tensor[(256), uint8], Tensor[(1872), float64], Tensor[(2, 640), uint8], Tensor[(756), float32], Tensor[(54), float32], Tensor[(?, 15, 6), int64]) {
  %658 = cast(%var_3472, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %659 = cast(meta[relay.Constant][55] /* ty=Tensor[(2, 640), uint8] */, dtype="uint8") /* ty=Tensor[(2, 640), uint8] */;
  %660 = cast(%var_3474, dtype="float32") /* ty=Tensor[(756), float32] */;
  %661 = cast(%var_3475, dtype="float32") /* ty=Tensor[(54), float32] */;
  %662 = reshape(%658, newshape=[1872]) /* ty=Tensor[(1872), float64] */;
  %663 = reshape(%659, newshape=[1280]) /* ty=Tensor[(1280), uint8] */;
  %664 = reshape(%660, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %665 = reshape(%661, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %666 = @func_2783(%662, %663, %664, %665) /* ty=(Tensor[(14, 15, 6), float32], Tensor[(14, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(1872), float64], Tensor[(14, 15, 6), int32], Tensor[(756), float32], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32]) */;
  %667 = @func_1828() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64]) */;
  %668 = @func_3440() /* ty=Tensor[(4, 13, 12), float64] */;
  %669 = %666.6;
  %670 = %667.0;
  (%668, %669, %var_3472, meta[relay.Constant][55] /* ty=Tensor[(2, 640), uint8] */, %var_3474, %var_3475, %670)
}

def @func_7064() -> Tensor[(?, 15, 6), int64] {
  %671 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %671.0
}

def @func_2704() -> (Tensor[(?, 15, 6), int16], Tensor[(1, 15, 6), float64], Tensor[(?, 15, 6), bool]) {
  %672 = @func_2292() /* ty=Tensor[(1, 15, 6), float64] */;
  %673 = cast(%672, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %674 = sinh(%673) /* ty=Tensor[(1, 15, 6), float64] */;
  %675 = cast(%674, dtype="int16") /* ty=Tensor[(1, 15, 6), int16] */;
  %676 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%672, dtype="int16") /* ty=Tensor[(1, 15, 6), int16] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %679 = cast(%672, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %680 = cast(%672, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  %681 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(%674, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %684 = bitwise_xor(%677, %678) /* ty=Tensor[(?, 15, 6), int16] */;
  %685 = sqrt(%679) /* ty=Tensor[(1, 15, 6), float64] */;
  %686 = less(%682, %683) /* ty=Tensor[(?, 15, 6), bool] */;
  (%684, %685, %686)
}

def @func_5729(%var_5688: Tensor[(3), float32]) -> (Tensor[(?, 15, 6), uint8], Tensor[(?, 3), bool], Tensor[(3), float32], Tensor[(?, 3), bool]) {
  %687 = @func_4855() /* ty=(Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64]) */;
  %688 = cast(%var_5688, dtype="float32") /* ty=Tensor[(3), float32] */;
  %689 = cast(%var_5688, dtype="float32") /* ty=Tensor[(3), float32] */;
  %690 = reshape(%688, newshape=[1, 3]) /* ty=Tensor[(1, 3), float32] */;
  %691 = reshape(%689, newshape=[1, 3]) /* ty=Tensor[(1, 3), float32] */;
  %692 = @func_4616(%690, %691) /* ty=(Tensor[(?, 3), bool],) */;
  %693 = %692.0;
  %694 = cast(%693, dtype="float32") /* ty=Tensor[(?, 3), float32] */;
  %695 = cast(%var_5688, dtype="float32") /* ty=Tensor[(3), float32] */;
  %696 = reshape(%694, newshape=[1, 3]) /* ty=Tensor[(1, 3), float32] */;
  %697 = reshape(%695, newshape=[1, 3]) /* ty=Tensor[(1, 3), float32] */;
  %698 = @func_4616(%696, %697) /* ty=(Tensor[(?, 3), bool],) */;
  %699 = %687.0;
  %700 = %698.0;
  (%699, %693, %var_5688, %700)
}

def @func_6196(%var_6168: Tensor[(14, 2, 16), float32]) -> (Tensor[(14, 2, 16), float32],) {
  %701 = cast(%var_6168, dtype="float32") /* ty=Tensor[(14, 2, 16), float32] */;
  %702 = log(%701) /* ty=Tensor[(14, 2, 16), float32] */;
  (%702,)
}

def @func_1394(%var_1339: Tensor[(256), uint8], %var_1381: Tensor[(640, 2), uint8], %var_1384: Tensor[(756), float32], %var_1392: Tensor[(54), float32]) -> (Tensor[(4, 10, 12), float64], Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(?, 15, 6), bool], Tensor[(4, 10, 12), float64], Tensor[(640, 2), uint8], Tensor[(12, 9, 7), float32], Tensor[(756), float32], Tensor[(1, 9, 6), float32], Tensor[(54), float32]) {
  %703 = cast(meta[relay.Constant][56] /* ty=Tensor[(8, 60), float64] */, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %704 = reshape(%703, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float64] */;
  %705 = @func_221(%704) /* ty=(Tensor[(4, 10, 12), float64],) */;
  %706 = cast(%var_1339, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %707 = reshape(%706, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %708 = @func_1275(%707) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(16, 5, 16), int16], Tensor[(256), uint8], Tensor[(1280), uint8]) */;
  %709 = %708.0;
  %710 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  %711 = cast(%710, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  %712 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%709, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %715 = cast(%var_1339, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %716 = cast(%var_1381, dtype="uint8") /* ty=Tensor[(640, 2), uint8] */;
  %717 = cast(%var_1381, dtype="float64") /* ty=Tensor[(640, 2), float64] */;
  %718 = cast(%var_1381, dtype="float64") /* ty=Tensor[(640, 2), float64] */;
  %719 = cast(%var_1381, dtype="bool") /* ty=Tensor[(640, 2), bool] */;
  %720 = reshape(%715, newshape=[16, 1, 16]) /* ty=Tensor[(16, 1, 16), uint8] */;
  %721 = reshape(%716, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), uint8] */;
  %722 = reshape(%717, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), float64] */;
  %723 = reshape(%718, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), float64] */;
  %724 = reshape(%719, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), bool] */;
  %725 = @func_490(%720, %721, %722, %723, %724) /* ty=(Tensor[(16, 5, 16), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(4, 10, 12), float64], Tensor[(16, 5, 16), int16], Tensor[(16, 5, 16), uint16], Tensor[(4, 10, 12), float64], Tensor[(4, 10, 12), float64]) */;
  %726 = cast(%var_1384, dtype="float32") /* ty=Tensor[(756), float32] */;
  %727 = reshape(%726, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), float32] */;
  %728 = @func_662(%727) /* ty=(Tensor[(12, 9, 7), float32],) */;
  %729 = cast(%var_1392, dtype="float32") /* ty=Tensor[(54), float32] */;
  %730 = reshape(%729, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), float32] */;
  %731 = %705.0;
  %732 = greater_equal(%713, %714) /* ty=Tensor[(?, 15, 6), bool] */;
  %733 = %725.6;
  %734 = %728.0;
  %735 = @func_1042(%730) /* ty=Tensor[(1, 9, 6), float32] */;
  (%731, meta[relay.Constant][56] /* ty=Tensor[(8, 60), float64] */, %var_1339, %732, %733, %var_1381, %734, %var_1384, %735, %var_1392)
}

def @func_6766() -> (Tensor[(27, 2), float32],) {
  %736 = @func_4932() /* ty=(Tensor[(27, 2), float32],) */;
  %737 = %736.0;
  (%737,)
}

def @func_2510() -> Tensor[(?, 15, 6), int64] {
  %738 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %738.0
}

def @func_5948(%var_5935: Tensor[(4, 13, 12), float64]) -> Tensor[(4, 13, 12), bool] {
  %739 = @func_4855() /* ty=(Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64]) */;
  %740 = %739.1;
  %741 = cast(%var_5935, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
  %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%740, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%743, %744) /* ty=Tensor[(4, 13, 12), bool] */
}

def @func_7602(%var_7567: Tensor[(2, 13, 3), float64], %var_7568: Tensor[(2, 13, 3), float64]) -> (Tensor[(2, 13, 3), uint32], Tensor[(?, 15, 6), float64]) {
  %745 = cast(%var_7568, dtype="float32") /* ty=Tensor[(2, 13, 3), float32] */;
  %746 = acos(%745) /* ty=Tensor[(2, 13, 3), float32] */;
  %747 = cast(%var_7568, dtype="bool") /* ty=Tensor[(2, 13, 3), bool] */;
  %748 = shape_of(%var_7567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%var_7567, dtype="bool") /* ty=Tensor[(2, 13, 3), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %751 = less_equal(%749, %750) /* ty=Tensor[(2, 13, 3), bool] */;
  %752 = cast(%751, dtype="uint32") /* ty=Tensor[(2, 13, 3), uint32] */;
  %753 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%746, dtype="uint32") /* ty=Tensor[(2, 13, 3), uint32] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %756 = bitwise_or(%754, %755) /* ty=Tensor[(2, 13, 3), uint32] */;
  %757 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
  (%756, %757)
}

def @func_6367() -> (uint32,) {
  %758 = @func_6024() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
  %759 = %758.4;
  (%759,)
}

def @func_4058(%var_4040: Tensor[(256), uint8]) -> (Tensor[(4, 13, 12), float64], Tensor[(1, 15, 6), float64], Tensor[(256), uint8], Tensor[(1, 9, 6), float32], Tensor[(27, 2), float32]) {
  %760 = cast(%var_4040, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %761 = reshape(%760, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %762 = @func_1275(%761) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(16, 5, 16), int16], Tensor[(256), uint8], Tensor[(1280), uint8]) */;
  %763 = cast(meta[relay.Constant][57] /* ty=Tensor[(27, 2), float32] */, dtype="float32") /* ty=Tensor[(27, 2), float32] */;
  %764 = reshape(%763, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), float32] */;
  %765 = @func_3982() /* ty=Tensor[(4, 13, 12), float64] */;
  %766 = %762.0;
  %767 = @func_1042(%764) /* ty=Tensor[(1, 9, 6), float32] */;
  (%765, %766, %var_4040, %767, meta[relay.Constant][57] /* ty=Tensor[(27, 2), float32] */)
}

def @func_2940() -> (Tensor[(4, 13, 12), float64],) {
  %768 = @func_2594() /* ty=(Tensor[(4, 13, 12), float64],) */;
  %769 = %768.0;
  (%769,)
}

def @func_4616(%var_4597: Tensor[(1, 3), float32], %var_4598: Tensor[(1, 3), float32]) -> (Tensor[(?, 3), bool],) {
  %770 = cast(%var_4598, dtype="bool") /* ty=Tensor[(1, 3), bool] */;
  %771 = shape_of(%var_4597, dtype="int32") /* ty=Tensor[(2), int32] */;
  %772 = cast(%var_4597, dtype="bool") /* ty=Tensor[(1, 3), bool] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %774 = not_equal(%772, %773) /* ty=Tensor[(?, 3), bool] */;
  (%774,)
}

def @func_490(%var_418: Tensor[(16, 1, 16), uint8], %var_419: Tensor[(16, 5, 16), uint8], %var_435: Tensor[(16, 5, 16), float64], %var_457: Tensor[(16, 5, 16), float64], %var_470: Tensor[(16, 5, 16), bool]) -> (Tensor[(16, 5, 16), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(4, 10, 12), float64], Tensor[(16, 5, 16), int16], Tensor[(16, 5, 16), uint16], Tensor[(4, 10, 12), float64], Tensor[(4, 10, 12), float64]) {
  %775 = cast(%var_418, dtype="uint8") /* ty=Tensor[(16, 1, 16), uint8] */;
  %776 = cast(%var_419, dtype="uint8") /* ty=Tensor[(16, 5, 16), uint8] */;
  %777 = cast(meta[relay.Constant][58] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %778 = reshape(%777, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float64] */;
  %779 = @func_221(%778) /* ty=(Tensor[(4, 10, 12), float64],) */;
  %780 = %779.0;
  %781 = cast(%780, dtype="float64") /* ty=Tensor[(4, 10, 12), float64] */;
  %782 = reshape(%781, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float64] */;
  %783 = @func_221(%782) /* ty=(Tensor[(4, 10, 12), float64],) */;
  %784 = cast(%var_419, dtype="float64") /* ty=Tensor[(16, 5, 16), float64] */;
  %785 = acosh(%784) /* ty=Tensor[(16, 5, 16), float64] */;
  %786 = cast(%var_435, dtype="float64") /* ty=Tensor[(16, 5, 16), float64] */;
  %787 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%785, dtype="float64") /* ty=Tensor[(16, 5, 16), float64] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %790 = power(%788, %789) /* ty=Tensor[(16, 5, 16), float64] */;
  %791 = cast(%var_457, dtype="bool") /* ty=Tensor[(16, 5, 16), bool] */;
  %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(%790, dtype="bool") /* ty=Tensor[(16, 5, 16), bool] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %795 = greater_equal(%793, %794) /* ty=Tensor[(16, 5, 16), bool] */;
  %796 = cast(%790, dtype="int16") /* ty=Tensor[(16, 5, 16), int16] */;
  %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(3), int32] */;
  %798 = cast(%795, dtype="int16") /* ty=Tensor[(16, 5, 16), int16] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %800 = cast(%var_470, dtype="uint16") /* ty=Tensor[(16, 5, 16), uint16] */;
  %801 = shape_of(%795, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(%795, dtype="uint16") /* ty=Tensor[(16, 5, 16), uint16] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %804 = cast(meta[relay.Constant][58] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %805 = reshape(%804, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float64] */;
  %806 = @func_221(%805) /* ty=(Tensor[(4, 10, 12), float64],) */;
  %807 = cast(meta[relay.Constant][58] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %808 = reshape(%807, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float64] */;
  %809 = @func_221(%808) /* ty=(Tensor[(4, 10, 12), float64],) */;
  %810 = logical_xor(%775, %776) /* ty=Tensor[(16, 5, 16), uint8] */;
  %811 = %783.0;
  %812 = add(%798, %799) /* ty=Tensor[(16, 5, 16), int16] */;
  %813 = maximum(%802, %803) /* ty=Tensor[(16, 5, 16), uint16] */;
  %814 = %806.0;
  %815 = %809.0;
  (%810, %780, meta[relay.Constant][58] /* ty=Tensor[(480), float64] */, %811, %812, %813, %814, %815)
}

def @func_4759(%var_4737: uint32) -> (Tensor[(4, 13, 12), float64], Tensor[(?, 15, 6), float64], Tensor[(675, 2), int8]) {
  %816 = @func_2594() /* ty=(Tensor[(4, 13, 12), float64],) */;
  %817 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
  %818 = cast(%817, dtype="float64") /* ty=Tensor[(?, 15, 6), float64] */;
  %819 = cast(%var_4737, dtype="uint32") /* ty=uint32 */;
  %820 = cast(meta[relay.Constant][59] /* ty=Tensor[(675, 2), int64] */, dtype="int64") /* ty=Tensor[(675, 2), int64] */;
  %821 = reshape(%819, newshape=[]) /* ty=uint32 */;
  %822 = reshape(%820, newshape=[15, 15, 6]) /* ty=Tensor[(15, 15, 6), int64] */;
  %823 = @func_4307(%821, %822) /* ty=(Tensor[(?, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32], Tensor[(15, 15, 6), int64], Tensor[(?, 15, 6), float64], Tensor[(11, 8, 2), bool], Tensor[(176), bool], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) */;
  %824 = %823.2;
  %825 = cast(meta[relay.Constant][59] /* ty=Tensor[(675, 2), int64] */, dtype="float64") /* ty=Tensor[(675, 2), float64] */;
  %826 = cast(%var_4737, dtype="float64") /* ty=float64 */;
  %827 = power(%825, %826) /* ty=Tensor[(675, 2), float64] */;
  %828 = cast(%824, dtype="int8") /* ty=int8 */;
  %829 = cast(%827, dtype="int8") /* ty=Tensor[(675, 2), int8] */;
  %830 = %816.0;
  %831 = log10(%818) /* ty=Tensor[(?, 15, 6), float64] */;
  %832 = left_shift(%828, %829) /* ty=Tensor[(675, 2), int8] */;
  (%830, %831, %832)
}

def @func_3879(%var_3871: Tensor[(4, 180), float64]) -> (Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64], Tensor[(4, 180), float64], Tensor[(?, 15, 6), int64]) {
  %833 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %834 = cast(%var_3871, dtype="float64") /* ty=Tensor[(4, 180), float64] */;
  %835 = reshape(%834, newshape=[8, 15, 6]) /* ty=Tensor[(8, 15, 6), float64] */;
  %836 = @func_2271(%835) /* ty=(Tensor[(8, 15, 6), uint64], Tensor[(?, 15, 6), float64]) */;
  %837 = @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %838 = %833.0;
  %839 = %836.1;
  %840 = %837.0;
  (%838, %839, %var_3871, %840)
}

def @func_1042(%var_1033: Tensor[(1, 9, 6), float32]) -> Tensor[(1, 9, 6), float32] {
  %841 = cast(%var_1033, dtype="float32") /* ty=Tensor[(1, 9, 6), float32] */;
  asinh(%841) /* ty=Tensor[(1, 9, 6), float32] */
}

def @main(%var_7955: Tensor[(630, 2), bool]) -> (Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float32], Tensor[(256), uint8], Tensor[(?, 15, 6), int64], Tensor[(42), uint32], Tensor[(630, 2), float32]) {
  %842 = cast(meta[relay.Constant][60] /* ty=Tensor[(256), uint8] */, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %843 = reshape(%842, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %844 = @func_7697(%843) /* ty=(Tensor[(5, 16, ?), uint32], Tensor[(1, 15, 6), float32], Tensor[(256), uint8], Tensor[(756), float32]) */;
  %845 = cast(meta[relay.Constant][61] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %846 = cast(%var_7955, dtype="bool") /* ty=Tensor[(630, 2), bool] */;
  %847 = reshape(%845, newshape=[42]) /* ty=Tensor[(42), uint32] */;
  %848 = reshape(%846, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
  %849 = @func_3768(%847, %848) /* ty=(Tensor[(5, 16, ?), uint32], uint32, Tensor[(42), uint32], Tensor[(14, 15, 6), int16], Tensor[(1260), bool], Tensor[(?, 15, 6), int64]) */;
  %850 = cast(%var_7955, dtype="float32") /* ty=Tensor[(630, 2), float32] */;
  %851 = @func_4570() /* ty=Tensor[(?, 15, 6), int64] */;
  %852 = %844.1;
  %853 = %849.5;
  %854 = rsqrt(%850) /* ty=Tensor[(630, 2), float32] */;
  (%851, %852, meta[relay.Constant][60] /* ty=Tensor[(256), uint8] */, %853, meta[relay.Constant][61] /* ty=Tensor[(42), uint32] */, %854)
}

def @func_5860() -> Tensor[(27, 2), float32] {
  %855 = @func_3915() /* ty=(Tensor[(3, 15, 6), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */;
  %855.1
}

def @func_1854(%var_1849: Tensor[(240, 2), float64]) -> (Tensor[(?, 15, 6), int64], Tensor[(4, 10, 12), float64], Tensor[(240, 2), float64]) {
  %856 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %857 = cast(%var_1849, dtype="float64") /* ty=Tensor[(240, 2), float64] */;
  %858 = reshape(%857, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float64] */;
  %859 = @func_221(%858) /* ty=(Tensor[(4, 10, 12), float64],) */;
  %860 = %856.0;
  %861 = %859.0;
  (%860, %861, %var_1849)
}

def @func_7085() -> Tensor[(27, 2), float32] {
  %862 = @func_4932() /* ty=(Tensor[(27, 2), float32],) */;
  %862.0
}

def @func_5580() -> (Tensor[(42), uint32],) {
  %863 = @func_2350() /* ty=(Tensor[(42), uint32], Tensor[(?, 15, 6), uint16]) */;
  %864 = %863.0;
  (%864,)
}

def @func_6661() -> (Tensor[(?, 15, 6), uint8],) {
  %865 = @func_4855() /* ty=(Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64]) */;
  %866 = %865.0;
  (%866,)
}

def @func_2576(%var_2559: Tensor[(54), float32]) -> (Tensor[(1, 15, 6), float64], Tensor[(1, 15, 6), float64], Tensor[(1, 9, 6), float32], Tensor[(54), float32], Tensor[(?, 15, 6), float64], Tensor[(8, 15, 6), float64], uint32) {
  %867 = @func_1889() /* ty=(Tensor[(1, 15, 6), float64],) */;
  %868 = cast(%var_2559, dtype="float32") /* ty=Tensor[(54), float32] */;
  %869 = reshape(%868, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), float32] */;
  %870 = cast(meta[relay.Constant][62] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %871 = reshape(%870, newshape=[]) /* ty=uint32 */;
  %872 = @func_2025(%871) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(1280), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(8, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
  %873 = %867.0;
  %874 = @func_2377() /* ty=Tensor[(1, 15, 6), float64] */;
  %875 = @func_1042(%869) /* ty=Tensor[(1, 9, 6), float32] */;
  %876 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
  %877 = %872.4;
  (%873, %874, %875, %var_2559, %876, %877, meta[relay.Constant][62] /* ty=uint32 */)
}

def @func_5608(%var_5583: Tensor[(9, 10, 11), uint64]) -> (Tensor[(9, 10, 11), uint64], Tensor[(1, 15, 6), float32], Tensor[(?, 15, 6), int64], Tensor[(720), float64]) {
  %878 = cast(meta[relay.Constant][63] /* ty=Tensor[(9, 10, 11), uint64] */, dtype="uint64") /* ty=Tensor[(9, 10, 11), uint64] */;
  %879 = shape_of(%var_5583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %880 = cast(%var_5583, dtype="uint64") /* ty=Tensor[(9, 10, 11), uint64] */;
  %881 = dyn.reshape(%878, %879, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %882 = @func_4502() /* ty=(Tensor[(1, 15, 6), float32],) */;
  %883 = cast(meta[relay.Constant][64] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %884 = reshape(%883, newshape=[4, 180]) /* ty=Tensor[(4, 180), float64] */;
  %885 = @func_3879(%884) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64], Tensor[(4, 180), float64], Tensor[(?, 15, 6), int64]) */;
  %886 = add(%880, %881) /* ty=Tensor[(9, 10, 11), uint64] */;
  %887 = %882.0;
  %888 = %885.0;
  (%886, %887, %888, meta[relay.Constant][64] /* ty=Tensor[(720), float64] */)
}

def @func_4810() -> Tensor[(?, 15, 6), int64] {
  %889 = @func_1697() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %889.0
}

def @func_2119(%var_2109: Tensor[(9, 13, 16), float64], %var_2110: Tensor[(9, 13, 16), float64]) -> (Tensor[(9, 13, 16), float64], Tensor[(?, 15, 6), int64]) {
  %890 = cast(%var_2110, dtype="float64") /* ty=Tensor[(9, 13, 16), float64] */;
  %891 = shape_of(%var_2109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %892 = cast(%var_2109, dtype="float64") /* ty=Tensor[(9, 13, 16), float64] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %894 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %895 = minimum(%892, %893) /* ty=Tensor[(9, 13, 16), float64] */;
  %896 = %894.0;
  (%895, %896)
}

def @func_3165(%var_3157: Tensor[(5, 2, 14), int64]) -> (Tensor[(5, 2, 14), int64],) {
  %897 = cast(meta[relay.Constant][65] /* ty=Tensor[(5, 2, 14), int64] */, dtype="int64") /* ty=Tensor[(5, 2, 14), int64] */;
  %898 = shape_of(%var_3157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %899 = cast(%var_3157, dtype="int64") /* ty=Tensor[(5, 2, 14), int64] */;
  %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %901 = logical_xor(%899, %900) /* ty=Tensor[(5, 2, 14), int64] */;
  (%901,)
}

def @func_2594() -> (Tensor[(4, 13, 12), float64],) {
  %902 = cast(meta[relay.Constant][66] /* ty=Tensor[(4, 13, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 13, 12), float64] */;
  %903 = acosh(%902) /* ty=Tensor[(4, 13, 12), float64] */;
  (%903,)
}

def @func_3768(%var_3755: Tensor[(42), uint32], %var_3758: Tensor[(1260), bool]) -> (Tensor[(5, 16, ?), uint32], uint32, Tensor[(42), uint32], Tensor[(14, 15, 6), int16], Tensor[(1260), bool], Tensor[(?, 15, 6), int64]) {
  %904 = cast(%var_3755, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %905 = reshape(%904, newshape=[42]) /* ty=Tensor[(42), uint32] */;
  %906 = @func_1433(%905) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
  %907 = cast(%var_3758, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %908 = reshape(%907, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), bool] */;
  %909 = @func_3210(%908) /* ty=(Tensor[(14, 15, 6), bool], Tensor[(14, 15, 6), int16]) */;
  %910 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %911 = @func_2465() /* ty=Tensor[(5, 16, ?), uint32] */;
  %912 = %906.2;
  %913 = %909.1;
  %914 = %910.0;
  (%911, %912, %var_3755, %913, %var_3758, %914)
}

def @func_1769(%var_1750: Tensor[(1280), uint8]) -> (Tensor[(7, 15, 6), int16], Tensor[(1, 9, 6), float32], Tensor[(2, 128), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32], Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64]) {
  %915 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %916 = %915.0;
  %917 = cast(%916, dtype="int64") /* ty=Tensor[(?, 15, 6), int64] */;
  %918 = cast(meta[relay.Constant][67] /* ty=Tensor[(7, 15, 6), int64] */, dtype="int64") /* ty=Tensor[(7, 15, 6), int64] */;
  %919 = maximum(%917, %918) /* ty=Tensor[(7, 15, 6), int64] */;
  %920 = cast(%919, dtype="int16") /* ty=Tensor[(7, 15, 6), int16] */;
  %921 = cast(%916, dtype="int16") /* ty=Tensor[(?, 15, 6), int16] */;
  %922 = cast(meta[relay.Constant][68] /* ty=Tensor[(2, 128), uint8] */, dtype="uint8") /* ty=Tensor[(2, 128), uint8] */;
  %923 = cast(%var_1750, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
  %924 = cast(meta[relay.Constant][69] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %925 = cast(meta[relay.Constant][70] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %926 = reshape(%922, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %927 = reshape(%923, newshape=[640, 2]) /* ty=Tensor[(640, 2), uint8] */;
  %928 = reshape(%924, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %929 = reshape(%925, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %930 = @func_1394(%926, %927, %928, %929) /* ty=(Tensor[(4, 10, 12), float64], Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(?, 15, 6), bool], Tensor[(4, 10, 12), float64], Tensor[(640, 2), uint8], Tensor[(12, 9, 7), float32], Tensor[(756), float32], Tensor[(1, 9, 6), float32], Tensor[(54), float32]) */;
  %931 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %932 = cast(meta[relay.Constant][68] /* ty=Tensor[(2, 128), uint8] */, dtype="uint8") /* ty=Tensor[(2, 128), uint8] */;
  %933 = reshape(%932, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %934 = @func_1275(%933) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(16, 5, 16), int16], Tensor[(256), uint8], Tensor[(1280), uint8]) */;
  %935 = logical_xor(%920, %921) /* ty=Tensor[(7, 15, 6), int16] */;
  %936 = %930.8;
  %937 = %931.0;
  %938 = %934.0;
  (%935, %936, meta[relay.Constant][68] /* ty=Tensor[(2, 128), uint8] */, %var_1750, meta[relay.Constant][69] /* ty=Tensor[(756), float32] */, meta[relay.Constant][70] /* ty=Tensor[(54), float32] */, %937, %938)
}

def @func_1604(%var_1598: Tensor[(14, 15, 6), float64]) -> Tensor[(14, 15, 6), int32] {
  %939 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  %940 = cast(%939, dtype="int32") /* ty=Tensor[(1, 15, 6), int32] */;
  %941 = cast(%var_1598, dtype="int32") /* ty=Tensor[(14, 15, 6), int32] */;
  maximum(%940, %941) /* ty=Tensor[(14, 15, 6), int32] */
}

def @func_4903(%var_4893: Tensor[(4, 15, 6), int64]) -> (Tensor[(4, 15, 6), uint32],) {
  %942 = @func_4535() /* ty=Tensor[(?, 15, 6), int64] */;
  %943 = cast(%942, dtype="uint32") /* ty=Tensor[(?, 15, 6), uint32] */;
  %944 = cast(%var_4893, dtype="uint32") /* ty=Tensor[(4, 15, 6), uint32] */;
  %945 = right_shift(%943, %944) /* ty=Tensor[(4, 15, 6), uint32] */;
  (%945,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5948(%var_5935: Tensor[(4, 13, 12), float64]) -> Tensor[(4, 13, 12), bool] {
  %0 = @func_4855() /* ty=(Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64]) */;
  %1 = %0.1;
  %2 = cast(%var_5935, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%4, %5) /* ty=Tensor[(4, 13, 12), bool] */
}

def @func_1212() -> Tensor[(1, 15, 6), float64] {
  %6 = cast(-4.3289f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 15, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  floor_divide(%6, %7) /* ty=Tensor[(1, 15, 6), float64] */
}

def @func_1607(%var_1605: Tensor[(14, 15, 6), float64]) -> Tensor[(14, 15, 6), int32] {
  @func_1604(%var_1605) /* ty=Tensor[(14, 15, 6), int32] */
}

def @func_5611(%var_5609: Tensor[(9, 10, 11), uint64]) -> (Tensor[(9, 10, 11), uint64], Tensor[(1, 15, 6), float32], Tensor[(?, 15, 6), int64], Tensor[(720), float64]) {
  @func_5608(%var_5609) /* ty=(Tensor[(9, 10, 11), uint64], Tensor[(1, 15, 6), float32], Tensor[(?, 15, 6), int64], Tensor[(720), float64]) */
}

def @func_3916() -> (Tensor[(3, 15, 6), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) {
  %18 = fn () -> (Tensor[(3, 15, 6), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) {
    %8 = @func_2510() /* ty=Tensor[(?, 15, 6), int64] */;
    %9 = cast(%8, dtype="float64") /* ty=Tensor[(?, 15, 6), float64] */;
    %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 15, 6), int64] */, dtype="float64") /* ty=Tensor[(3, 15, 6), float64] */;
    %11 = cast(%8, dtype="uint16") /* ty=Tensor[(?, 15, 6), uint16] */;
    %12 = cast(meta[relay.Constant][2] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
    %13 = reshape(%11, newshape=[1, 15, 6]) /* ty=Tensor[(1, 15, 6), uint16] */;
    %14 = reshape(%12, newshape=[27, 2]) /* ty=Tensor[(27, 2), float32] */;
    %15 = @func_3322(%13, %14) /* ty=(Tensor[(5, 16, ?), uint32], Tensor[(5, 2, 14), int64], Tensor[(140), int64], Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64], Tensor[(27, 2), float32]) */;
    %16 = mod(%9, %10) /* ty=Tensor[(3, 15, 6), float64] */;
    %17 = %15.5;
    (%16, %17, meta[relay.Constant][2] /* ty=Tensor[(54), float32] */)
  };
  %18() /* ty=(Tensor[(3, 15, 6), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */
}

def @func_3606(%var_3571: int8, %var_3572: Tensor[(1, 15, 4), int8], %var_3592: Tensor[(154), float64]) -> (Tensor[(1, 15, 4), int8], uint32, Tensor[(154), float64]) {
  %19 = cast(%var_3571, dtype="int8") /* ty=int8 */;
  %20 = cast(%var_3572, dtype="int8") /* ty=Tensor[(1, 15, 4), int8] */;
  %21 = cast(%var_3592, dtype="float64") /* ty=Tensor[(154), float64] */;
  %22 = reshape(%21, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), float64] */;
  %23 = @func_2137(%22) /* ty=(Tensor[(11, 1, 14), float64], uint32, uint32) */;
  %24 = subtract(%19, %20) /* ty=Tensor[(1, 15, 4), int8] */;
  %25 = %23.1;
  (%24, %25, %var_3592)
}

def @func_7700(%var_7698: Tensor[(256), uint8]) -> (Tensor[(5, 16, ?), uint32], Tensor[(1, 15, 6), float32], Tensor[(256), uint8], Tensor[(756), float32]) {
  @func_7697(%var_7698) /* ty=(Tensor[(5, 16, ?), uint32], Tensor[(1, 15, 6), float32], Tensor[(256), uint8], Tensor[(756), float32]) */
}

def @func_497(%var_492: Tensor[(16, 1, 16), uint8], %var_493: Tensor[(16, 5, 16), uint8], %var_494: Tensor[(16, 5, 16), float64], %var_495: Tensor[(16, 5, 16), float64], %var_496: Tensor[(16, 5, 16), bool]) -> (Tensor[(16, 5, 16), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(4, 10, 12), float64], Tensor[(16, 5, 16), int16], Tensor[(16, 5, 16), uint16], Tensor[(4, 10, 12), float64], Tensor[(4, 10, 12), float64]) {
  @func_490(%var_492, %var_493, %var_494, %var_495, %var_496) /* ty=(Tensor[(16, 5, 16), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(4, 10, 12), float64], Tensor[(16, 5, 16), int16], Tensor[(16, 5, 16), uint16], Tensor[(4, 10, 12), float64], Tensor[(4, 10, 12), float64]) */
}

def @func_2596() -> (Tensor[(4, 13, 12), float64],) {
  @func_2594() /* ty=(Tensor[(4, 13, 12), float64],) */
}

def @func_1639() -> (Tensor[(?, 15, 6), int64],) {
  %26 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  %27 = cast(%26, dtype="float32") /* ty=Tensor[(1, 15, 6), float32] */;
  %28 = cosh(%27) /* ty=Tensor[(1, 15, 6), float32] */;
  %29 = cast(%28, dtype="int64") /* ty=Tensor[(1, 15, 6), int64] */;
  %30 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%26, dtype="int64") /* ty=Tensor[(1, 15, 6), int64] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %33 = right_shift(%31, %32) /* ty=Tensor[(?, 15, 6), int64] */;
  (%33,)
}

def @func_6994() -> (Tensor[(4, 10, 12), float64], Tensor[(?, 15, 6), uint8]) {
  %40 = fn () -> (Tensor[(4, 10, 12), float64], Tensor[(?, 15, 6), uint8]) {
    %34 = @func_4328() /* ty=(Tensor[(1, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(1280), uint8], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
    %35 = %34.1;
    %36 = cast(%35, dtype="float64") /* ty=Tensor[(4, 10, 12), float64] */;
    %37 = @func_6661() /* ty=(Tensor[(?, 15, 6), uint8],) */;
    %38 = exp(%36) /* ty=Tensor[(4, 10, 12), float64] */;
    %39 = %37.0;
    (%38, %39)
  };
  %40() /* ty=(Tensor[(4, 10, 12), float64], Tensor[(?, 15, 6), uint8]) */
}

def @func_2941() -> (Tensor[(4, 13, 12), float64],) {
  %43 = fn () -> (Tensor[(4, 13, 12), float64],) {
    %41 = @func_2594() /* ty=(Tensor[(4, 13, 12), float64],) */;
    %42 = %41.0;
    (%42,)
  };
  %43() /* ty=(Tensor[(4, 13, 12), float64],) */
}

def @func_7064() -> Tensor[(?, 15, 6), int64] {
  %44 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %44.0
}

def @func_6924() -> (Tensor[(1, 15, 6), float64],) {
  %46 = fn () -> (Tensor[(1, 15, 6), float64],) {
    %45 = @func_2377() /* ty=Tensor[(1, 15, 6), float64] */;
    (%45,)
  };
  %46() /* ty=(Tensor[(1, 15, 6), float64],) */
}

def @func_4472() -> (Tensor[(3, 15, 6), float64],) {
  %49 = fn () -> (Tensor[(3, 15, 6), float64],) {
    %47 = @func_3915() /* ty=(Tensor[(3, 15, 6), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */;
    %48 = %47.0;
    (%48,)
  };
  %49() /* ty=(Tensor[(3, 15, 6), float64],) */
}

def @func_2294() -> Tensor[(1, 15, 6), float64] {
  @func_2292() /* ty=Tensor[(1, 15, 6), float64] */
}

def @func_3932() -> (Tensor[(?, 15, 6), float64],) {
  %50 = @func_2292() /* ty=Tensor[(1, 15, 6), float64] */;
  %51 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 15, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%50, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %55 = floor_mod(%53, %54) /* ty=Tensor[(?, 15, 6), float64] */;
  (%55,)
}

def @func_4143() -> (Tensor[(?, 15, 6), uint8],) {
  %63 = fn () -> (Tensor[(?, 15, 6), uint8],) {
    %56 = @func_2510() /* ty=Tensor[(?, 15, 6), int64] */;
    %57 = @func_2635() /* ty=Tensor[(1, 15, 6), float64] */;
    %58 = cast(%57, dtype="uint8") /* ty=Tensor[(1, 15, 6), uint8] */;
    %59 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
    %60 = cast(%56, dtype="uint8") /* ty=Tensor[(?, 15, 6), uint8] */;
    %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %62 = bitwise_and(%60, %61) /* ty=Tensor[(?, 15, 6), uint8] */;
    (%62,)
  };
  %63() /* ty=(Tensor[(?, 15, 6), uint8],) */
}

def @func_3983() -> Tensor[(4, 13, 12), float64] {
  %64 = fn () -> Tensor[(4, 13, 12), float64] {
    @func_3440() /* ty=Tensor[(4, 13, 12), float64] */
  };
  %64() /* ty=Tensor[(4, 13, 12), float64] */
}

def @func_1830() -> (Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64]) {
  @func_1828() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64]) */
}

def @func_2062(%var_2060: Tensor[(11, 2, 16), uint8], %var_2061: Tensor[(11, 2, 16), uint8]) -> Tensor[(11, 2, 16), uint8] {
  @func_2058(%var_2060, %var_2061) /* ty=Tensor[(11, 2, 16), uint8] */
}

def @func_6024() -> (Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) {
  %65 = @func_3405() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(5, 16, ?), float64], Tensor[(?, 15, 6), int64]) */;
  %66 = cast(meta[relay.Constant][4] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %68 = reshape(%66, newshape=[]) /* ty=uint32 */;
  %69 = reshape(%67, newshape=[7, 6, 1]) /* ty=Tensor[(7, 6, 1), uint32] */;
  %70 = @func_971(%68, %69) /* ty=(Tensor[(7, 6, 1), float32],) */;
  %71 = @func_4570() /* ty=Tensor[(?, 15, 6), int64] */;
  %72 = @func_4810() /* ty=Tensor[(?, 15, 6), int64] */;
  %73 = %65.0;
  %74 = %70.0;
  (%71, %72, %73, %74, meta[relay.Constant][4] /* ty=uint32 */, meta[relay.Constant][5] /* ty=Tensor[(42), uint32] */)
}

def @func_5848(%var_5846: Tensor[(2, 936), float64], %var_5847: Tensor[(54), float32]) -> (Tensor[(?, 15, 6), float64], Tensor[(256), uint8], Tensor[(2, 936), float64], Tensor[(16, 80), uint8], Tensor[(756), float32], Tensor[(54), int16]) {
  %91 = fn (%var_5816: Tensor[(2, 936), float64], %var_5839: Tensor[(54), float32]) -> (Tensor[(?, 15, 6), float64], Tensor[(256), uint8], Tensor[(2, 936), float64], Tensor[(16, 80), uint8], Tensor[(756), float32], Tensor[(54), int16]) {
    %75 = cast(%var_5816, dtype="float64") /* ty=Tensor[(2, 936), float64] */;
    %76 = cast(meta[relay.Constant][6] /* ty=Tensor[(16, 80), uint8] */, dtype="uint8") /* ty=Tensor[(16, 80), uint8] */;
    %77 = cast(meta[relay.Constant][7] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %78 = cast(meta[relay.Constant][8] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
    %79 = reshape(%75, newshape=[1872]) /* ty=Tensor[(1872), float64] */;
    %80 = reshape(%76, newshape=[1280]) /* ty=Tensor[(1280), uint8] */;
    %81 = reshape(%77, newshape=[756]) /* ty=Tensor[(756), float32] */;
    %82 = reshape(%78, newshape=[54]) /* ty=Tensor[(54), float32] */;
    %83 = @func_2783(%79, %80, %81, %82) /* ty=(Tensor[(14, 15, 6), float32], Tensor[(14, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(1872), float64], Tensor[(14, 15, 6), int32], Tensor[(756), float32], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32]) */;
    %84 = cast(%var_5839, dtype="int16") /* ty=Tensor[(54), int16] */;
    %85 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(54), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %86 = cast(meta[relay.Constant][8] /* ty=Tensor[(54), float32] */, dtype="int16") /* ty=Tensor[(54), int16] */;
    %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?), int16] */;
    %88 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
    %89 = %83.6;
    %90 = minimum(%86, %87) /* ty=Tensor[(54), int16] */;
    (%88, %89, %var_5816, meta[relay.Constant][6] /* ty=Tensor[(16, 80), uint8] */, meta[relay.Constant][7] /* ty=Tensor[(756), float32] */, %90)
  };
  %91(%var_5846, %var_5847) /* ty=(Tensor[(?, 15, 6), float64], Tensor[(256), uint8], Tensor[(2, 936), float64], Tensor[(16, 80), uint8], Tensor[(756), float32], Tensor[(54), int16]) */
}

def @func_7245() -> Tensor[(4, 13, 12), float64] {
  %93 = fn () -> Tensor[(4, 13, 12), float64] {
    %92 = @func_4344() /* ty=(Tensor[(4, 13, 12), float64],) */;
    %92.0
  };
  %93() /* ty=Tensor[(4, 13, 12), float64] */
}

def @func_7422() -> (Tensor[(1, 15, 6), float64], Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64], Tensor[(60), int32], Tensor[(3, 4, 5), bool]) {
  %108 = fn () -> (Tensor[(1, 15, 6), float64], Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64], Tensor[(60), int32], Tensor[(3, 4, 5), bool]) {
    %94 = @func_4142() /* ty=(Tensor[(?, 15, 6), uint8],) */;
    %95 = @func_4855() /* ty=(Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64]) */;
    %96 = cast(10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %97 = cast(meta[relay.Constant][9] /* ty=Tensor[(60), int32] */, dtype="int32") /* ty=Tensor[(60), int32] */;
    %98 = reshape(%96, newshape=[]) /* ty=int32 */;
    %99 = reshape(%97, newshape=[60]) /* ty=Tensor[(60), int32] */;
    %100 = @func_2878(%98, %99) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(3, 4, 5), int32], int32, Tensor[(60), int32]) */;
    %101 = %100.1;
    %102 = cast(%101, dtype="bool") /* ty=Tensor[(3, 4, 5), bool] */;
    %103 = cast(10 /* ty=int32 */, dtype="bool") /* ty=bool */;
    %104 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
    %105 = %94.0;
    %106 = %95.1;
    %107 = logical_and(%102, %103) /* ty=Tensor[(3, 4, 5), bool] */;
    (%104, %105, %106, meta[relay.Constant][9] /* ty=Tensor[(60), int32] */, %107)
  };
  %108() /* ty=(Tensor[(1, 15, 6), float64], Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64], Tensor[(60), int32], Tensor[(3, 4, 5), bool]) */
}

def @func_1771(%var_1770: Tensor[(1280), uint8]) -> (Tensor[(7, 15, 6), int16], Tensor[(1, 9, 6), float32], Tensor[(2, 128), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32], Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64]) {
  %133 = fn (%var_1750: Tensor[(1280), uint8]) -> (Tensor[(7, 15, 6), int16], Tensor[(1, 9, 6), float32], Tensor[(2, 128), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32], Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64]) {
    %109 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
    %110 = %109.0;
    %111 = cast(%110, dtype="int64") /* ty=Tensor[(?, 15, 6), int64] */;
    %112 = cast(meta[relay.Constant][10] /* ty=Tensor[(7, 15, 6), int64] */, dtype="int64") /* ty=Tensor[(7, 15, 6), int64] */;
    %113 = maximum(%111, %112) /* ty=Tensor[(7, 15, 6), int64] */;
    %114 = cast(%113, dtype="int16") /* ty=Tensor[(7, 15, 6), int16] */;
    %115 = cast(%110, dtype="int16") /* ty=Tensor[(?, 15, 6), int16] */;
    %116 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 128), uint8] */, dtype="uint8") /* ty=Tensor[(2, 128), uint8] */;
    %117 = cast(%var_1750, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
    %118 = cast(meta[relay.Constant][12] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %119 = cast(meta[relay.Constant][13] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
    %120 = reshape(%116, newshape=[256]) /* ty=Tensor[(256), uint8] */;
    %121 = reshape(%117, newshape=[640, 2]) /* ty=Tensor[(640, 2), uint8] */;
    %122 = reshape(%118, newshape=[756]) /* ty=Tensor[(756), float32] */;
    %123 = reshape(%119, newshape=[54]) /* ty=Tensor[(54), float32] */;
    %124 = @func_1394(%120, %121, %122, %123) /* ty=(Tensor[(4, 10, 12), float64], Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(?, 15, 6), bool], Tensor[(4, 10, 12), float64], Tensor[(640, 2), uint8], Tensor[(12, 9, 7), float32], Tensor[(756), float32], Tensor[(1, 9, 6), float32], Tensor[(54), float32]) */;
    %125 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
    %126 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 128), uint8] */, dtype="uint8") /* ty=Tensor[(2, 128), uint8] */;
    %127 = reshape(%126, newshape=[256]) /* ty=Tensor[(256), uint8] */;
    %128 = @func_1275(%127) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(16, 5, 16), int16], Tensor[(256), uint8], Tensor[(1280), uint8]) */;
    %129 = logical_xor(%114, %115) /* ty=Tensor[(7, 15, 6), int16] */;
    %130 = %124.8;
    %131 = %125.0;
    %132 = %128.0;
    (%129, %130, meta[relay.Constant][11] /* ty=Tensor[(2, 128), uint8] */, %var_1750, meta[relay.Constant][12] /* ty=Tensor[(756), float32] */, meta[relay.Constant][13] /* ty=Tensor[(54), float32] */, %131, %132)
  };
  %133(%var_1770) /* ty=(Tensor[(7, 15, 6), int16], Tensor[(1, 9, 6), float32], Tensor[(2, 128), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32], Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64]) */
}

def @func_2140(%var_2138: Tensor[(11, 1, 14), float64]) -> (Tensor[(11, 1, 14), float64], uint32, uint32) {
  @func_2137(%var_2138) /* ty=(Tensor[(11, 1, 14), float64], uint32, uint32) */
}

def @func_4994(%var_4993: Tensor[(26), float32]) -> (Tensor[(1, 15, 6), float32], Tensor[(2, 1, 13), float32], Tensor[(26), uint64], Tensor[(26), int8]) {
  %149 = fn (%var_4977: Tensor[(26), float32]) -> (Tensor[(1, 15, 6), float32], Tensor[(2, 1, 13), float32], Tensor[(26), uint64], Tensor[(26), int8]) {
    %134 = @func_4502() /* ty=(Tensor[(1, 15, 6), float32],) */;
    %135 = cast(meta[relay.Constant][14] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
    %136 = reshape(%135, newshape=[2, 1, 13]) /* ty=Tensor[(2, 1, 13), float32] */;
    %137 = cast(%var_4977, dtype="uint64") /* ty=Tensor[(26), uint64] */;
    %138 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(26), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %139 = cast(meta[relay.Constant][14] /* ty=Tensor[(26), float32] */, dtype="uint64") /* ty=Tensor[(26), uint64] */;
    %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %141 = cast(meta[relay.Constant][15] /* ty=Tensor[(26), float32] */, dtype="int8") /* ty=Tensor[(26), int8] */;
    %142 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(26), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %143 = cast(meta[relay.Constant][14] /* ty=Tensor[(26), float32] */, dtype="int8") /* ty=Tensor[(26), int8] */;
    %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?), int8] */;
    %145 = %134.0;
    %146 = @func_4768(%136) /* ty=Tensor[(2, 1, 13), float32] */;
    %147 = maximum(%139, %140) /* ty=Tensor[(26), uint64] */;
    %148 = bitwise_or(%143, %144) /* ty=Tensor[(26), int8] */;
    (%145, %146, %147, %148)
  };
  %149(%var_4993) /* ty=(Tensor[(1, 15, 6), float32], Tensor[(2, 1, 13), float32], Tensor[(26), uint64], Tensor[(26), int8]) */
}

def @func_2422(%var_2420: Tensor[(6, 9, 8), uint8]) -> Tensor[(6, 9, 8), uint8] {
  @func_2419(%var_2420) /* ty=Tensor[(6, 9, 8), uint8] */
}

def @func_1214() -> Tensor[(1, 15, 6), float64] {
  @func_1212() /* ty=Tensor[(1, 15, 6), float64] */
}

def @func_1024(%var_1023: Tensor[(11, 8, 2), bool]) -> (Tensor[(11, 8, 2), bool],) {
  %155 = fn (%var_1017: Tensor[(11, 8, 2), bool]) -> (Tensor[(11, 8, 2), bool],) {
    %150 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 8, 2), bool] */, dtype="bool") /* ty=Tensor[(11, 8, 2), bool] */;
    %151 = shape_of(%var_1017, dtype="int32") /* ty=Tensor[(3), int32] */;
    %152 = cast(%var_1017, dtype="bool") /* ty=Tensor[(11, 8, 2), bool] */;
    %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %154 = logical_and(%152, %153) /* ty=Tensor[(11, 8, 2), bool] */;
    (%154,)
  };
  %155(%var_1023) /* ty=(Tensor[(11, 8, 2), bool],) */
}

def @func_3442() -> Tensor[(4, 13, 12), float64] {
  @func_3440() /* ty=Tensor[(4, 13, 12), float64] */
}

def @func_1828() -> (Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64]) {
  %156 = @func_1697() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %157 = @func_1697() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %158 = %157.0;
  %159 = cast(%158, dtype="float32") /* ty=Tensor[(?, 15, 6), float32] */;
  %160 = asinh(%159) /* ty=Tensor[(?, 15, 6), float32] */;
  %161 = cast(%160, dtype="float64") /* ty=Tensor[(?, 15, 6), float64] */;
  %162 = %156.0;
  %163 = acos(%161) /* ty=Tensor[(?, 15, 6), float64] */;
  (%162, %163)
}

def @func_665(%var_663: Tensor[(12, 9, 7), float32]) -> (Tensor[(12, 9, 7), float32],) {
  @func_662(%var_663) /* ty=(Tensor[(12, 9, 7), float32],) */
}

def @func_2350() -> (Tensor[(42), uint32], Tensor[(?, 15, 6), uint16]) {
  %164 = @func_2292() /* ty=Tensor[(1, 15, 6), float64] */;
  %165 = cast(meta[relay.Constant][17] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %166 = reshape(%165, newshape=[42]) /* ty=Tensor[(42), uint32] */;
  %167 = @func_1433(%166) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
  %168 = %167.2;
  %169 = cast(%164, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  %170 = cast(%168, dtype="bool") /* ty=bool */;
  %171 = not_equal(%169, %170) /* ty=Tensor[(1, 15, 6), bool] */;
  %172 = @func_1697() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %173 = %172.0;
  %174 = cast(%173, dtype="uint16") /* ty=Tensor[(?, 15, 6), uint16] */;
  %175 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%171, dtype="uint16") /* ty=Tensor[(1, 15, 6), uint16] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %178 = multiply(%176, %177) /* ty=Tensor[(?, 15, 6), uint16] */;
  (meta[relay.Constant][17] /* ty=Tensor[(42), uint32] */, %178)
}

def @func_2467() -> Tensor[(5, 16, ?), uint32] {
  @func_2465() /* ty=Tensor[(5, 16, ?), uint32] */
}

def @func_3562() -> (Tensor[(1, 15, 6), float64], Tensor[(4, 13, 12), float64]) {
  %182 = fn () -> (Tensor[(1, 15, 6), float64], Tensor[(4, 13, 12), float64]) {
    %179 = @func_1889() /* ty=(Tensor[(1, 15, 6), float64],) */;
    %180 = %179.0;
    %181 = @func_3440() /* ty=Tensor[(4, 13, 12), float64] */;
    (%180, %181)
  };
  %182() /* ty=(Tensor[(1, 15, 6), float64], Tensor[(4, 13, 12), float64]) */
}

def @func_3406() -> (Tensor[(?, 15, 6), int64], Tensor[(5, 16, ?), float64], Tensor[(?, 15, 6), int64]) {
  %190 = fn () -> (Tensor[(?, 15, 6), int64], Tensor[(5, 16, ?), float64], Tensor[(?, 15, 6), int64]) {
    %183 = @func_1697() /* ty=(Tensor[(?, 15, 6), int64],) */;
    %184 = @func_2465() /* ty=Tensor[(5, 16, ?), uint32] */;
    %185 = cast(%184, dtype="float64") /* ty=Tensor[(5, 16, ?), float64] */;
    %186 = @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */;
    %187 = %183.0;
    %188 = sigmoid(%185) /* ty=Tensor[(5, 16, ?), float64] */;
    %189 = %186.0;
    (%187, %188, %189)
  };
  %190() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(5, 16, ?), float64], Tensor[(?, 15, 6), int64]) */
}

def @func_6727() -> (Tensor[(4, 13, 12), float64], Tensor[(3, 4, 5), int32], int32, Tensor[(60), int32]) {
  %198 = fn () -> (Tensor[(4, 13, 12), float64], Tensor[(3, 4, 5), int32], int32, Tensor[(60), int32]) {
    %191 = @func_2594() /* ty=(Tensor[(4, 13, 12), float64],) */;
    %192 = cast(-5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %193 = cast(meta[relay.Constant][18] /* ty=Tensor[(60), int32] */, dtype="int32") /* ty=Tensor[(60), int32] */;
    %194 = reshape(%192, newshape=[]) /* ty=int32 */;
    %195 = reshape(%193, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), int32] */;
    %196 = %191.0;
    %197 = @func_2214(%194, %195) /* ty=Tensor[(3, 4, 5), int32] */;
    (%196, %197, -5 /* ty=int32 */, meta[relay.Constant][18] /* ty=Tensor[(60), int32] */)
  };
  %198() /* ty=(Tensor[(4, 13, 12), float64], Tensor[(3, 4, 5), int32], int32, Tensor[(60), int32]) */
}

def @func_7551(%var_7549: Tensor[(5, 4, 5), float32]) -> (Tensor[(5, 4, 5), float32],) {
  @func_7548(%var_7549) /* ty=(Tensor[(5, 4, 5), float32],) */
}

def @func_3352() -> (Tensor[(?, 15, 6), int64],) {
  %199 = @func_1697() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %200 = %199.0;
  (%200,)
}

def @func_7131() -> Tensor[(?, 15, 6), int64] {
  %202 = fn () -> Tensor[(?, 15, 6), int64] {
    %201 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
    %201.0
  };
  %202() /* ty=Tensor[(?, 15, 6), int64] */
}

def @func_7354() -> (Tensor[(4, 13, 12), float64], Tensor[(?, 15, 6), float64]) {
  %207 = fn () -> (Tensor[(4, 13, 12), float64], Tensor[(?, 15, 6), float64]) {
    %203 = @func_5280() /* ty=(Tensor[(4, 13, 12), float64], Tensor[(7, 15, 6), bool], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) */;
    %204 = @func_6846() /* ty=(Tensor[(?, 15, 6), float64],) */;
    %205 = %203.0;
    %206 = %204.0;
    (%205, %206)
  };
  %207() /* ty=(Tensor[(4, 13, 12), float64], Tensor[(?, 15, 6), float64]) */
}

def @func_2995(%var_2962: Tensor[(3, 4, 4), float64]) -> (Tensor[(?, 15, 6), int64], Tensor[(3, 4, 4), bool]) {
  %208 = cast(%var_2962, dtype="float64") /* ty=Tensor[(3, 4, 4), float64] */;
  %209 = cos(%208) /* ty=Tensor[(3, 4, 4), float64] */;
  %210 = cast(%var_2962, dtype="bool") /* ty=Tensor[(3, 4, 4), bool] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="bool") /* ty=Tensor[(3, 4, 4), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %214 = @func_2510() /* ty=Tensor[(?, 15, 6), int64] */;
  %215 = greater(%212, %213) /* ty=Tensor[(3, 4, 4), bool] */;
  (%214, %215)
}

def @func_6915() -> (Tensor[(?, 15, 6), int64],) {
  %216 = @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %217 = %216.0;
  (%217,)
}

def @func_7795(%var_7793: Tensor[(15, 3, 4), uint8]) -> (Tensor[(15, 3, 4), uint8],) {
  @func_7792(%var_7793) /* ty=(Tensor[(15, 3, 4), uint8],) */
}

def @func_5104(%var_5102: Tensor[(1280), uint8], %var_5103: Tensor[(10, 15, 6), int64]) -> (Tensor[(1280), bool], Tensor[(10, 15, 6), float32]) {
  %230 = fn (%var_5079: Tensor[(1280), uint8], %var_5093: Tensor[(10, 15, 6), int64]) -> (Tensor[(1280), bool], Tensor[(10, 15, 6), float32]) {
    %218 = @func_4328() /* ty=(Tensor[(1, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(1280), uint8], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
    %219 = %218.2;
    %220 = cast(%var_5079, dtype="bool") /* ty=Tensor[(1280), bool] */;
    %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(1), int32] */;
    %222 = cast(%219, dtype="bool") /* ty=Tensor[(1280), bool] */;
    %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?), bool] */;
    %224 = @func_1697() /* ty=(Tensor[(?, 15, 6), int64],) */;
    %225 = %224.0;
    %226 = cast(%225, dtype="float32") /* ty=Tensor[(?, 15, 6), float32] */;
    %227 = cast(%var_5093, dtype="float32") /* ty=Tensor[(10, 15, 6), float32] */;
    %228 = less(%222, %223) /* ty=Tensor[(1280), bool] */;
    %229 = divide(%226, %227) /* ty=Tensor[(10, 15, 6), float32] */;
    (%228, %229)
  };
  %230(%var_5102, %var_5103) /* ty=(Tensor[(1280), bool], Tensor[(10, 15, 6), float32]) */
}

def @func_5498() -> (Tensor[(?, 15, 6), int64], Tensor[(54), float32], Tensor[(480), float64], Tensor[(54), float32]) {
  %231 = cast(meta[relay.Constant][19] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %232 = cast(meta[relay.Constant][20] /* ty=Tensor[(54), float32] */, dtype="float32") /* ty=Tensor[(54), float32] */;
  %233 = reshape(%231, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %234 = reshape(%232, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %235 = @func_3065(%233, %234) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64], int32, Tensor[(60), int32], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(?, 15, 6), float64], int32, Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756, 1), float32], Tensor[(54), float32], Tensor[(6, 9, 8), uint8], Tensor[(4, 108), uint8], Tensor[(4, 10, 12), float64], Tensor[(1, 15, 6), float64]) */;
  %236 = @func_4535() /* ty=Tensor[(?, 15, 6), int64] */;
  %237 = %235.12;
  (%236, %237, meta[relay.Constant][19] /* ty=Tensor[(480), float64] */, meta[relay.Constant][20] /* ty=Tensor[(54), float32] */)
}

def @func_7066() -> Tensor[(?, 15, 6), int64] {
  @func_7064() /* ty=Tensor[(?, 15, 6), int64] */
}

def @func_2273(%var_2272: Tensor[(8, 15, 6), float64]) -> (Tensor[(8, 15, 6), uint64], Tensor[(?, 15, 6), float64]) {
  %244 = fn (%var_2252: Tensor[(8, 15, 6), float64]) -> (Tensor[(8, 15, 6), uint64], Tensor[(?, 15, 6), float64]) {
    %238 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
    %239 = cast(%238, dtype="uint64") /* ty=Tensor[(1, 15, 6), uint64] */;
    %240 = cast(%var_2252, dtype="uint64") /* ty=Tensor[(8, 15, 6), uint64] */;
    %241 = @func_1828() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64]) */;
    %242 = minimum(%239, %240) /* ty=Tensor[(8, 15, 6), uint64] */;
    %243 = %241.1;
    (%242, %243)
  };
  %244(%var_2272) /* ty=(Tensor[(8, 15, 6), uint64], Tensor[(?, 15, 6), float64]) */
}

def @func_2635() -> Tensor[(1, 15, 6), float64] {
  @func_2292() /* ty=Tensor[(1, 15, 6), float64] */
}

def @func_6584() -> Tensor[(?, 15, 6), int64] {
  @func_6582() /* ty=Tensor[(?, 15, 6), int64] */
}

def @func_1854(%var_1849: Tensor[(240, 2), float64]) -> (Tensor[(?, 15, 6), int64], Tensor[(4, 10, 12), float64], Tensor[(240, 2), float64]) {
  %245 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %246 = cast(%var_1849, dtype="float64") /* ty=Tensor[(240, 2), float64] */;
  %247 = reshape(%246, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float64] */;
  %248 = @func_221(%247) /* ty=(Tensor[(4, 10, 12), float64],) */;
  %249 = %245.0;
  %250 = %248.0;
  (%249, %250, %var_1849)
}

def @func_6824(%var_6823: Tensor[(54), float32]) -> (Tensor[(3, 15, 6), float64], Tensor[(624), bool], Tensor[(27, 2), bool], Tensor[(54), float32], Tensor[(27, 2), bool], Tensor[(3, 15, 6), float64]) {
  %271 = fn (%var_6808: Tensor[(54), float32]) -> (Tensor[(3, 15, 6), float64], Tensor[(624), bool], Tensor[(27, 2), bool], Tensor[(54), float32], Tensor[(27, 2), bool], Tensor[(3, 15, 6), float64]) {
    %251 = @func_4471() /* ty=(Tensor[(3, 15, 6), float64],) */;
    %252 = cast(meta[relay.Constant][21] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
    %253 = reshape(%252, newshape=[4, 13, 12]) /* ty=Tensor[(4, 13, 12), float64] */;
    %254 = @func_5948(%253) /* ty=Tensor[(4, 13, 12), bool] */;
    %255 = cast(%254, dtype="bool") /* ty=Tensor[(4, 13, 12), bool] */;
    %256 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(624), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %257 = cast(meta[relay.Constant][21] /* ty=Tensor[(624), float64] */, dtype="bool") /* ty=Tensor[(624), bool] */;
    %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?), bool] */;
    %259 = cast(%var_6808, dtype="float32") /* ty=Tensor[(54), float32] */;
    %260 = reshape(%259, newshape=[27, 2]) /* ty=Tensor[(27, 2), float32] */;
    %261 = @func_4395(%260) /* ty=(Tensor[(27, 2), bool], Tensor[(1, 15, 6), float64]) */;
    %262 = %261.0;
    %263 = cast(%262, dtype="float32") /* ty=Tensor[(27, 2), float32] */;
    %264 = reshape(%263, newshape=[27, 2]) /* ty=Tensor[(27, 2), float32] */;
    %265 = @func_4395(%264) /* ty=(Tensor[(27, 2), bool], Tensor[(1, 15, 6), float64]) */;
    %266 = @func_5153() /* ty=(Tensor[(3, 15, 6), float64],) */;
    %267 = %251.0;
    %268 = logical_or(%257, %258) /* ty=Tensor[(624), bool] */;
    %269 = %265.0;
    %270 = %266.0;
    (%267, %268, %262, %var_6808, %269, %270)
  };
  %271(%var_6823) /* ty=(Tensor[(3, 15, 6), float64], Tensor[(624), bool], Tensor[(27, 2), bool], Tensor[(54), float32], Tensor[(27, 2), bool], Tensor[(3, 15, 6), float64]) */
}

def @func_6917() -> (Tensor[(?, 15, 6), int64],) {
  @func_6915() /* ty=(Tensor[(?, 15, 6), int64],) */
}

def @func_3325(%var_3323: Tensor[(1, 15, 6), uint16], %var_3324: Tensor[(27, 2), float32]) -> (Tensor[(5, 16, ?), uint32], Tensor[(5, 2, 14), int64], Tensor[(140), int64], Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64], Tensor[(27, 2), float32]) {
  %288 = fn (%var_3294: Tensor[(1, 15, 6), uint16], %var_3313: Tensor[(27, 2), float32]) -> (Tensor[(5, 16, ?), uint32], Tensor[(5, 2, 14), int64], Tensor[(140), int64], Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64], Tensor[(27, 2), float32]) {
    %272 = cast(meta[relay.Constant][22] /* ty=Tensor[(140), int64] */, dtype="int64") /* ty=Tensor[(140), int64] */;
    %273 = reshape(%272, newshape=[5, 2, 14]) /* ty=Tensor[(5, 2, 14), int64] */;
    %274 = @func_3165(%273) /* ty=(Tensor[(5, 2, 14), int64],) */;
    %275 = @func_2350() /* ty=(Tensor[(42), uint32], Tensor[(?, 15, 6), uint16]) */;
    %276 = %275.1;
    %277 = cast(%var_3294, dtype="int64") /* ty=Tensor[(1, 15, 6), int64] */;
    %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
    %279 = cast(%276, dtype="int64") /* ty=Tensor[(?, 15, 6), int64] */;
    %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %281 = cast(%var_3313, dtype="float32") /* ty=Tensor[(27, 2), float32] */;
    %282 = reshape(%281, newshape=[54]) /* ty=Tensor[(54), float32] */;
    %283 = @func_2576(%282) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(1, 15, 6), float64], Tensor[(1, 9, 6), float32], Tensor[(54), float32], Tensor[(?, 15, 6), float64], Tensor[(8, 15, 6), float64], uint32) */;
    %284 = @func_2465() /* ty=Tensor[(5, 16, ?), uint32] */;
    %285 = %274.0;
    %286 = minimum(%279, %280) /* ty=Tensor[(?, 15, 6), int64] */;
    %287 = %283.1;
    (%284, %285, meta[relay.Constant][22] /* ty=Tensor[(140), int64] */, %286, %287, %var_3313)
  };
  %288(%var_3323, %var_3324) /* ty=(Tensor[(5, 16, ?), uint32], Tensor[(5, 2, 14), int64], Tensor[(140), int64], Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64], Tensor[(27, 2), float32]) */
}

def @func_6501(%var_6499: Tensor[(54), float32]) -> (Tensor[(1, 15, 6), float64], Tensor[(?, 9, 6), bool], Tensor[(54), float32]) {
  @func_6498(%var_6499) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(?, 9, 6), bool], Tensor[(54), float32]) */
}

def @func_6902(%var_6891: Tensor[(14, 8, 12), float64], %var_6892: Tensor[(14, 8, 12), float64]) -> Tensor[(14, 8, 12), float64] {
  %289 = cast(%var_6892, dtype="float64") /* ty=Tensor[(14, 8, 12), float64] */;
  %290 = shape_of(%var_6891, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%var_6891, dtype="float64") /* ty=Tensor[(14, 8, 12), float64] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%291, %292) /* ty=Tensor[(14, 8, 12), float64] */
}

def @func_1433(%var_1431: Tensor[(42), uint32]) -> (Tensor[(1, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) {
  %293 = cast(meta[relay.Constant][23] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %294 = cast(%var_1431, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %295 = reshape(%293, newshape=[]) /* ty=uint32 */;
  %296 = reshape(%294, newshape=[7, 6, 1]) /* ty=Tensor[(7, 6, 1), uint32] */;
  %297 = @func_971(%295, %296) /* ty=(Tensor[(7, 6, 1), float32],) */;
  %298 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  %299 = %297.0;
  (%298, %299, meta[relay.Constant][23] /* ty=uint32 */, %var_1431)
}

def @func_3738(%var_3736: Tensor[(16, 80), uint8]) -> (Tensor[(?, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(256), uint8], Tensor[(16, 80), uint8]) {
  %300 = cast(meta[relay.Constant][24] /* ty=Tensor[(256), uint8] */, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %301 = cast(%var_3736, dtype="uint8") /* ty=Tensor[(16, 80), uint8] */;
  %302 = cast(%var_3736, dtype="float64") /* ty=Tensor[(16, 80), float64] */;
  %303 = cast(%var_3736, dtype="float64") /* ty=Tensor[(16, 80), float64] */;
  %304 = cast(%var_3736, dtype="bool") /* ty=Tensor[(16, 80), bool] */;
  %305 = reshape(%300, newshape=[16, 1, 16]) /* ty=Tensor[(16, 1, 16), uint8] */;
  %306 = reshape(%301, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), uint8] */;
  %307 = reshape(%302, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), float64] */;
  %308 = reshape(%303, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), float64] */;
  %309 = reshape(%304, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), bool] */;
  %310 = @func_490(%305, %306, %307, %308, %309) /* ty=(Tensor[(16, 5, 16), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(4, 10, 12), float64], Tensor[(16, 5, 16), int16], Tensor[(16, 5, 16), uint16], Tensor[(4, 10, 12), float64], Tensor[(4, 10, 12), float64]) */;
  %311 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
  %312 = %310.7;
  (%311, %312, meta[relay.Constant][24] /* ty=Tensor[(256), uint8] */, %var_3736)
}

def @func_2379() -> Tensor[(1, 15, 6), float64] {
  @func_2377() /* ty=Tensor[(1, 15, 6), float64] */
}

def @func_2058(%var_2043: Tensor[(11, 2, 16), uint8], %var_2044: Tensor[(11, 2, 16), uint8]) -> Tensor[(11, 2, 16), uint8] {
  %313 = cast(%var_2044, dtype="uint8") /* ty=Tensor[(11, 2, 16), uint8] */;
  %314 = shape_of(%var_2043, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%var_2043, dtype="uint8") /* ty=Tensor[(11, 2, 16), uint8] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  add(%315, %316) /* ty=Tensor[(11, 2, 16), uint8] */
}

def @func_6198(%var_6197: Tensor[(14, 2, 16), float32]) -> (Tensor[(14, 2, 16), float32],) {
  %319 = fn (%var_6168: Tensor[(14, 2, 16), float32]) -> (Tensor[(14, 2, 16), float32],) {
    %317 = cast(%var_6168, dtype="float32") /* ty=Tensor[(14, 2, 16), float32] */;
    %318 = log(%317) /* ty=Tensor[(14, 2, 16), float32] */;
    (%318,)
  };
  %319(%var_6197) /* ty=(Tensor[(14, 2, 16), float32],) */
}

def @func_4061(%var_4059: Tensor[(256), uint8]) -> (Tensor[(4, 13, 12), float64], Tensor[(1, 15, 6), float64], Tensor[(256), uint8], Tensor[(1, 9, 6), float32], Tensor[(27, 2), float32]) {
  @func_4058(%var_4059) /* ty=(Tensor[(4, 13, 12), float64], Tensor[(1, 15, 6), float64], Tensor[(256), uint8], Tensor[(1, 9, 6), float32], Tensor[(27, 2), float32]) */
}

def @func_3165(%var_3157: Tensor[(5, 2, 14), int64]) -> (Tensor[(5, 2, 14), int64],) {
  %320 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 2, 14), int64] */, dtype="int64") /* ty=Tensor[(5, 2, 14), int64] */;
  %321 = shape_of(%var_3157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%var_3157, dtype="int64") /* ty=Tensor[(5, 2, 14), int64] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %324 = logical_xor(%322, %323) /* ty=Tensor[(5, 2, 14), int64] */;
  (%324,)
}

def @func_4344() -> (Tensor[(4, 13, 12), float64],) {
  %325 = @func_3440() /* ty=Tensor[(4, 13, 12), float64] */;
  (%325,)
}

def @func_3881(%var_3880: Tensor[(4, 180), float64]) -> (Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64], Tensor[(4, 180), float64], Tensor[(?, 15, 6), int64]) {
  %334 = fn (%var_3871: Tensor[(4, 180), float64]) -> (Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64], Tensor[(4, 180), float64], Tensor[(?, 15, 6), int64]) {
    %326 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
    %327 = cast(%var_3871, dtype="float64") /* ty=Tensor[(4, 180), float64] */;
    %328 = reshape(%327, newshape=[8, 15, 6]) /* ty=Tensor[(8, 15, 6), float64] */;
    %329 = @func_2271(%328) /* ty=(Tensor[(8, 15, 6), uint64], Tensor[(?, 15, 6), float64]) */;
    %330 = @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */;
    %331 = %326.0;
    %332 = %329.1;
    %333 = %330.0;
    (%331, %332, %var_3871, %333)
  };
  %334(%var_3880) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64], Tensor[(4, 180), float64], Tensor[(?, 15, 6), int64]) */
}

def @func_4503() -> (Tensor[(1, 15, 6), float32],) {
  %338 = fn () -> (Tensor[(1, 15, 6), float32],) {
    %335 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
    %336 = cast(%335, dtype="float32") /* ty=Tensor[(1, 15, 6), float32] */;
    %337 = exp(%336) /* ty=Tensor[(1, 15, 6), float32] */;
    (%337,)
  };
  %338() /* ty=(Tensor[(1, 15, 6), float32],) */
}

def @func_4619(%var_4617: Tensor[(1, 3), float32], %var_4618: Tensor[(1, 3), float32]) -> (Tensor[(?, 3), bool],) {
  %344 = fn (%var_4597: Tensor[(1, 3), float32], %var_4598: Tensor[(1, 3), float32]) -> (Tensor[(?, 3), bool],) {
    %339 = cast(%var_4598, dtype="bool") /* ty=Tensor[(1, 3), bool] */;
    %340 = shape_of(%var_4597, dtype="int32") /* ty=Tensor[(2), int32] */;
    %341 = cast(%var_4597, dtype="bool") /* ty=Tensor[(1, 3), bool] */;
    %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %343 = not_equal(%341, %342) /* ty=Tensor[(?, 3), bool] */;
    (%343,)
  };
  %344(%var_4617, %var_4618) /* ty=(Tensor[(?, 3), bool],) */
}

def @func_3934() -> (Tensor[(?, 15, 6), float64],) {
  @func_3932() /* ty=(Tensor[(?, 15, 6), float64],) */
}

def @func_4770(%var_4769: Tensor[(2, 1, 13), float32]) -> Tensor[(2, 1, 13), float32] {
  %347 = fn (%var_4764: Tensor[(2, 1, 13), float32]) -> Tensor[(2, 1, 13), float32] {
    %345 = cast(-6.60761f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %346 = cast(%var_4764, dtype="float32") /* ty=Tensor[(2, 1, 13), float32] */;
    power(%345, %346) /* ty=Tensor[(2, 1, 13), float32] */
  };
  %347(%var_4769) /* ty=Tensor[(2, 1, 13), float32] */
}

def @func_7602(%var_7567: Tensor[(2, 13, 3), float64], %var_7568: Tensor[(2, 13, 3), float64]) -> (Tensor[(2, 13, 3), uint32], Tensor[(?, 15, 6), float64]) {
  %348 = cast(%var_7568, dtype="float32") /* ty=Tensor[(2, 13, 3), float32] */;
  %349 = acos(%348) /* ty=Tensor[(2, 13, 3), float32] */;
  %350 = cast(%var_7568, dtype="bool") /* ty=Tensor[(2, 13, 3), bool] */;
  %351 = shape_of(%var_7567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%var_7567, dtype="bool") /* ty=Tensor[(2, 13, 3), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %354 = less_equal(%352, %353) /* ty=Tensor[(2, 13, 3), bool] */;
  %355 = cast(%354, dtype="uint32") /* ty=Tensor[(2, 13, 3), uint32] */;
  %356 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%349, dtype="uint32") /* ty=Tensor[(2, 13, 3), uint32] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %359 = bitwise_or(%357, %358) /* ty=Tensor[(2, 13, 3), uint32] */;
  %360 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
  (%359, %360)
}

def @func_3065(%var_3024: Tensor[(480), float64], %var_3044: Tensor[(54), float32]) -> (Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64], int32, Tensor[(60), int32], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(?, 15, 6), float64], int32, Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756, 1), float32], Tensor[(54), float32], Tensor[(6, 9, 8), uint8], Tensor[(4, 108), uint8], Tensor[(4, 10, 12), float64], Tensor[(1, 15, 6), float64]) {
  %361 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %362 = cast(meta[relay.Constant][26] /* ty=Tensor[(60), int32] */, dtype="int32") /* ty=Tensor[(60), int32] */;
  %363 = reshape(%361, newshape=[]) /* ty=int32 */;
  %364 = reshape(%362, newshape=[60]) /* ty=Tensor[(60), int32] */;
  %365 = @func_2878(%363, %364) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(3, 4, 5), int32], int32, Tensor[(60), int32]) */;
  %366 = cast(%var_3024, dtype="float64") /* ty=Tensor[(480), float64] */;
  %367 = reshape(%366, newshape=[240, 2]) /* ty=Tensor[(240, 2), float64] */;
  %368 = @func_1854(%367) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(4, 10, 12), float64], Tensor[(240, 2), float64]) */;
  %369 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %370 = cast(meta[relay.Constant][26] /* ty=Tensor[(60), int32] */, dtype="int32") /* ty=Tensor[(60), int32] */;
  %371 = reshape(%369, newshape=[]) /* ty=int32 */;
  %372 = reshape(%370, newshape=[60]) /* ty=Tensor[(60), int32] */;
  %373 = @func_2878(%371, %372) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(3, 4, 5), int32], int32, Tensor[(60), int32]) */;
  %374 = cast(meta[relay.Constant][27] /* ty=Tensor[(256), uint8] */, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %375 = cast(meta[relay.Constant][28] /* ty=Tensor[(1280), uint8] */, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
  %376 = cast(meta[relay.Constant][29] /* ty=Tensor[(756, 1), float32] */, dtype="float32") /* ty=Tensor[(756, 1), float32] */;
  %377 = cast(%var_3044, dtype="float32") /* ty=Tensor[(54), float32] */;
  %378 = reshape(%374, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %379 = reshape(%375, newshape=[640, 2]) /* ty=Tensor[(640, 2), uint8] */;
  %380 = reshape(%376, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %381 = reshape(%377, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %382 = @func_1394(%378, %379, %380, %381) /* ty=(Tensor[(4, 10, 12), float64], Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(?, 15, 6), bool], Tensor[(4, 10, 12), float64], Tensor[(640, 2), uint8], Tensor[(12, 9, 7), float32], Tensor[(756), float32], Tensor[(1, 9, 6), float32], Tensor[(54), float32]) */;
  %383 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 108), uint8] */, dtype="uint8") /* ty=Tensor[(4, 108), uint8] */;
  %384 = reshape(%383, newshape=[6, 9, 8]) /* ty=Tensor[(6, 9, 8), uint8] */;
  %385 = %382.1;
  %386 = cast(%385, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
  %387 = reshape(%386, newshape=[240, 2]) /* ty=Tensor[(240, 2), float64] */;
  %388 = @func_1854(%387) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(4, 10, 12), float64], Tensor[(240, 2), float64]) */;
  %389 = @func_2510() /* ty=Tensor[(?, 15, 6), int64] */;
  %390 = %365.0;
  %391 = %368.1;
  %392 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
  %393 = %373.2;
  %394 = @func_2419(%384) /* ty=Tensor[(6, 9, 8), uint8] */;
  %395 = %388.1;
  %396 = @func_2377() /* ty=Tensor[(1, 15, 6), float64] */;
  (%389, %390, -1 /* ty=int32 */, meta[relay.Constant][26] /* ty=Tensor[(60), int32] */, %391, %var_3024, %392, %393, %385, meta[relay.Constant][27] /* ty=Tensor[(256), uint8] */, meta[relay.Constant][28] /* ty=Tensor[(1280), uint8] */, meta[relay.Constant][29] /* ty=Tensor[(756, 1), float32] */, %var_3044, %394, meta[relay.Constant][30] /* ty=Tensor[(4, 108), uint8] */, %395, %396)
}

def @func_4933() -> (Tensor[(27, 2), float32],) {
  %399 = fn () -> (Tensor[(27, 2), float32],) {
    %397 = @func_3915() /* ty=(Tensor[(3, 15, 6), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */;
    %398 = %397.1;
    (%398,)
  };
  %399() /* ty=(Tensor[(27, 2), float32],) */
}

def @func_4557(%var_4545: Tensor[(7, 15, 6), int64]) -> (Tensor[(7, 15, 6), bool],) {
  %400 = @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %401 = %400.0;
  %402 = cast(%401, dtype="bool") /* ty=Tensor[(?, 15, 6), bool] */;
  %403 = cast(%var_4545, dtype="bool") /* ty=Tensor[(7, 15, 6), bool] */;
  %404 = not_equal(%402, %403) /* ty=Tensor[(7, 15, 6), bool] */;
  (%404,)
}

def @func_2292() -> Tensor[(1, 15, 6), float64] {
  @func_1212() /* ty=Tensor[(1, 15, 6), float64] */
}

def @func_4560(%var_4558: Tensor[(7, 15, 6), int64]) -> (Tensor[(7, 15, 6), bool],) {
  @func_4557(%var_4558) /* ty=(Tensor[(7, 15, 6), bool],) */
}

def @func_4761(%var_4760: uint32) -> (Tensor[(4, 13, 12), float64], Tensor[(?, 15, 6), float64], Tensor[(675, 2), int8]) {
  %422 = fn (%var_4737: uint32) -> (Tensor[(4, 13, 12), float64], Tensor[(?, 15, 6), float64], Tensor[(675, 2), int8]) {
    %405 = @func_2594() /* ty=(Tensor[(4, 13, 12), float64],) */;
    %406 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
    %407 = cast(%406, dtype="float64") /* ty=Tensor[(?, 15, 6), float64] */;
    %408 = cast(%var_4737, dtype="uint32") /* ty=uint32 */;
    %409 = cast(meta[relay.Constant][31] /* ty=Tensor[(675, 2), int64] */, dtype="int64") /* ty=Tensor[(675, 2), int64] */;
    %410 = reshape(%408, newshape=[]) /* ty=uint32 */;
    %411 = reshape(%409, newshape=[15, 15, 6]) /* ty=Tensor[(15, 15, 6), int64] */;
    %412 = @func_4307(%410, %411) /* ty=(Tensor[(?, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32], Tensor[(15, 15, 6), int64], Tensor[(?, 15, 6), float64], Tensor[(11, 8, 2), bool], Tensor[(176), bool], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) */;
    %413 = %412.2;
    %414 = cast(meta[relay.Constant][31] /* ty=Tensor[(675, 2), int64] */, dtype="float64") /* ty=Tensor[(675, 2), float64] */;
    %415 = cast(%var_4737, dtype="float64") /* ty=float64 */;
    %416 = power(%414, %415) /* ty=Tensor[(675, 2), float64] */;
    %417 = cast(%413, dtype="int8") /* ty=int8 */;
    %418 = cast(%416, dtype="int8") /* ty=Tensor[(675, 2), int8] */;
    %419 = %405.0;
    %420 = log10(%407) /* ty=Tensor[(?, 15, 6), float64] */;
    %421 = left_shift(%417, %418) /* ty=Tensor[(675, 2), int8] */;
    (%419, %420, %421)
  };
  %422(%var_4760) /* ty=(Tensor[(4, 13, 12), float64], Tensor[(?, 15, 6), float64], Tensor[(675, 2), int8]) */
}

def @func_5055() -> (Tensor[(1, 15, 6), float64],) {
  @func_5053() /* ty=(Tensor[(1, 15, 6), float64],) */
}

def @func_5732(%var_5730: Tensor[(3), float32]) -> (Tensor[(?, 15, 6), uint8], Tensor[(?, 3), bool], Tensor[(3), float32], Tensor[(?, 3), bool]) {
  @func_5729(%var_5730) /* ty=(Tensor[(?, 15, 6), uint8], Tensor[(?, 3), bool], Tensor[(3), float32], Tensor[(?, 3), bool]) */
}

def @func_6368() -> (uint32,) {
  %425 = fn () -> (uint32,) {
    %423 = @func_6024() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
    %424 = %423.4;
    (%424,)
  };
  %425() /* ty=(uint32,) */
}

def @func_2419(%var_2412: Tensor[(6, 9, 8), uint8]) -> Tensor[(6, 9, 8), uint8] {
  %426 = cast(meta[relay.Constant][32] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %427 = cast(%var_2412, dtype="uint8") /* ty=Tensor[(6, 9, 8), uint8] */;
  bitwise_xor(%426, %427) /* ty=Tensor[(6, 9, 8), uint8] */
}

def @func_1275(%var_1260: Tensor[(256), uint8]) -> (Tensor[(1, 15, 6), float64], Tensor[(16, 5, 16), int16], Tensor[(256), uint8], Tensor[(1280), uint8]) {
  %428 = cast(%var_1260, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %429 = cast(meta[relay.Constant][33] /* ty=Tensor[(1280), uint8] */, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
  %430 = cast(meta[relay.Constant][33] /* ty=Tensor[(1280), uint8] */, dtype="float64") /* ty=Tensor[(1280), float64] */;
  %431 = cast(meta[relay.Constant][33] /* ty=Tensor[(1280), uint8] */, dtype="float64") /* ty=Tensor[(1280), float64] */;
  %432 = cast(meta[relay.Constant][33] /* ty=Tensor[(1280), uint8] */, dtype="bool") /* ty=Tensor[(1280), bool] */;
  %433 = reshape(%428, newshape=[16, 1, 16]) /* ty=Tensor[(16, 1, 16), uint8] */;
  %434 = reshape(%429, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), uint8] */;
  %435 = reshape(%430, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), float64] */;
  %436 = reshape(%431, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), float64] */;
  %437 = reshape(%432, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), bool] */;
  %438 = @func_490(%433, %434, %435, %436, %437) /* ty=(Tensor[(16, 5, 16), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(4, 10, 12), float64], Tensor[(16, 5, 16), int16], Tensor[(16, 5, 16), uint16], Tensor[(4, 10, 12), float64], Tensor[(4, 10, 12), float64]) */;
  %439 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  %440 = %438.4;
  (%439, %440, %var_1260, meta[relay.Constant][33] /* ty=Tensor[(1280), uint8] */)
}

def @func_6977() -> (uint32,) {
  @func_6975() /* ty=(uint32,) */
}

def @func_5580() -> (Tensor[(42), uint32],) {
  %441 = @func_2350() /* ty=(Tensor[(42), uint32], Tensor[(?, 15, 6), uint16]) */;
  %442 = %441.0;
  (%442,)
}

def @func_6847() -> (Tensor[(?, 15, 6), float64],) {
  %445 = fn () -> (Tensor[(?, 15, 6), float64],) {
    %443 = @func_3932() /* ty=(Tensor[(?, 15, 6), float64],) */;
    %444 = %443.0;
    (%444,)
  };
  %445() /* ty=(Tensor[(?, 15, 6), float64],) */
}

def @func_2878(%var_2875: int32, %var_2876: Tensor[(60), int32]) -> (Tensor[(1, 15, 6), float64], Tensor[(3, 4, 5), int32], int32, Tensor[(60), int32]) {
  %446 = @func_2635() /* ty=Tensor[(1, 15, 6), float64] */;
  %447 = cast(%446, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %448 = cast(%var_2875, dtype="int32") /* ty=int32 */;
  %449 = cast(%var_2876, dtype="int32") /* ty=Tensor[(60), int32] */;
  %450 = reshape(%448, newshape=[]) /* ty=int32 */;
  %451 = reshape(%449, newshape=[3, 4, 5]) /* ty=Tensor[(3, 4, 5), int32] */;
  %452 = asin(%447) /* ty=Tensor[(1, 15, 6), float64] */;
  %453 = @func_2214(%450, %451) /* ty=Tensor[(3, 4, 5), int32] */;
  (%452, %453, %var_2875, %var_2876)
}

def @func_974(%var_972: uint32, %var_973: Tensor[(7, 6, 1), uint32]) -> (Tensor[(7, 6, 1), float32],) {
  %459 = fn (%var_960: uint32, %var_961: Tensor[(7, 6, 1), uint32]) -> (Tensor[(7, 6, 1), float32],) {
    %454 = cast(%var_960, dtype="bool") /* ty=bool */;
    %455 = cast(%var_961, dtype="bool") /* ty=Tensor[(7, 6, 1), bool] */;
    %456 = greater_equal(%454, %455) /* ty=Tensor[(7, 6, 1), bool] */;
    %457 = cast(%456, dtype="float32") /* ty=Tensor[(7, 6, 1), float32] */;
    %458 = atanh(%457) /* ty=Tensor[(7, 6, 1), float32] */;
    (%458,)
  };
  %459(%var_972, %var_973) /* ty=(Tensor[(7, 6, 1), float32],) */
}

def @func_3212(%var_3211: Tensor[(14, 15, 6), bool]) -> (Tensor[(14, 15, 6), bool], Tensor[(14, 15, 6), int16]) {
  %468 = fn (%var_3196: Tensor[(14, 15, 6), bool]) -> (Tensor[(14, 15, 6), bool], Tensor[(14, 15, 6), int16]) {
    %460 = @func_2704() /* ty=(Tensor[(?, 15, 6), int16], Tensor[(1, 15, 6), float64], Tensor[(?, 15, 6), bool]) */;
    %461 = %460.2;
    %462 = cast(%461, dtype="bool") /* ty=Tensor[(?, 15, 6), bool] */;
    %463 = cast(%var_3196, dtype="bool") /* ty=Tensor[(14, 15, 6), bool] */;
    %464 = cast(%var_3196, dtype="int16") /* ty=Tensor[(14, 15, 6), int16] */;
    %465 = cast(%461, dtype="int16") /* ty=Tensor[(?, 15, 6), int16] */;
    %466 = not_equal(%462, %463) /* ty=Tensor[(14, 15, 6), bool] */;
    %467 = logical_xor(%464, %465) /* ty=Tensor[(14, 15, 6), int16] */;
    (%466, %467)
  };
  %468(%var_3211) /* ty=(Tensor[(14, 15, 6), bool], Tensor[(14, 15, 6), int16]) */
}

def @func_2025(%var_2022: uint32) -> (Tensor[(1, 15, 6), float64], Tensor[(1280), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(8, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) {
  %469 = cast(meta[relay.Constant][34] /* ty=Tensor[(1280), uint8] */, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
  %470 = reshape(%469, newshape=[1280]) /* ty=Tensor[(1280), uint8] */;
  %471 = @func_1769(%470) /* ty=(Tensor[(7, 15, 6), int16], Tensor[(1, 9, 6), float32], Tensor[(2, 128), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32], Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64]) */;
  %472 = cast(meta[relay.Constant][35] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %473 = reshape(%472, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float64] */;
  %474 = @func_221(%473) /* ty=(Tensor[(4, 10, 12), float64],) */;
  %475 = @func_1828() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64]) */;
  %476 = %475.0;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(?, 15, 6), float64] */;
  %478 = cast(meta[relay.Constant][36] /* ty=Tensor[(8, 15, 6), int64] */, dtype="float64") /* ty=Tensor[(8, 15, 6), float64] */;
  %479 = cast(%var_2022, dtype="uint32") /* ty=uint32 */;
  %480 = cast(meta[relay.Constant][37] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %481 = reshape(%479, newshape=[]) /* ty=uint32 */;
  %482 = reshape(%480, newshape=[7, 6, 1]) /* ty=Tensor[(7, 6, 1), uint32] */;
  %483 = @func_971(%481, %482) /* ty=(Tensor[(7, 6, 1), float32],) */;
  %484 = %471.7;
  %485 = %474.0;
  %486 = power(%477, %478) /* ty=Tensor[(8, 15, 6), float64] */;
  %487 = %483.0;
  (%484, meta[relay.Constant][34] /* ty=Tensor[(1280), uint8] */, %485, meta[relay.Constant][35] /* ty=Tensor[(480), float64] */, %486, %487, %var_2022, meta[relay.Constant][37] /* ty=Tensor[(42), uint32] */)
}

def @func_5425(%var_5422: Tensor[(756), float32], %var_5423: Tensor[(1, 54), float32], %var_5424: uint32) -> (Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(1872), float64], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(1, 54), float32], Tensor[(256), float64], Tensor[(176), bool], uint32, Tensor[(1350), int64], Tensor[(1, 15, 6), float64], Tensor[(1, 15, 6), float64]) {
  @func_5420(%var_5422, %var_5423, %var_5424) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(1872), float64], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(1, 54), float32], Tensor[(256), float64], Tensor[(176), bool], uint32, Tensor[(1350), int64], Tensor[(1, 15, 6), float64], Tensor[(1, 15, 6), float64]) */
}

def @func_2214(%var_2196: int32, %var_2197: Tensor[(3, 4, 5), int32]) -> Tensor[(3, 4, 5), int32] {
  %488 = cast(%var_2196, dtype="int32") /* ty=int32 */;
  %489 = cast(%var_2197, dtype="int32") /* ty=Tensor[(3, 4, 5), int32] */;
  left_shift(%488, %489) /* ty=Tensor[(3, 4, 5), int32] */
}

def @func_4187(%var_4185: Tensor[(12, 15, 6), int64]) -> (Tensor[(12, 15, 6), uint16], Tensor[(9, 13, 16), float64], Tensor[(936, 2), float64]) {
  @func_4184(%var_4185) /* ty=(Tensor[(12, 15, 6), uint16], Tensor[(9, 13, 16), float64], Tensor[(936, 2), float64]) */
}

def @func_7916() -> Tensor[(?, 15, 6), int64] {
  @func_7914() /* ty=Tensor[(?, 15, 6), int64] */
}

def @func_5582() -> (Tensor[(42), uint32],) {
  @func_5580() /* ty=(Tensor[(42), uint32],) */
}

def @func_1399(%var_1395: Tensor[(256), uint8], %var_1396: Tensor[(640, 2), uint8], %var_1397: Tensor[(756), float32], %var_1398: Tensor[(54), float32]) -> (Tensor[(4, 10, 12), float64], Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(?, 15, 6), bool], Tensor[(4, 10, 12), float64], Tensor[(640, 2), uint8], Tensor[(12, 9, 7), float32], Tensor[(756), float32], Tensor[(1, 9, 6), float32], Tensor[(54), float32]) {
  %523 = fn (%var_1339: Tensor[(256), uint8], %var_1381: Tensor[(640, 2), uint8], %var_1384: Tensor[(756), float32], %var_1392: Tensor[(54), float32]) -> (Tensor[(4, 10, 12), float64], Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(?, 15, 6), bool], Tensor[(4, 10, 12), float64], Tensor[(640, 2), uint8], Tensor[(12, 9, 7), float32], Tensor[(756), float32], Tensor[(1, 9, 6), float32], Tensor[(54), float32]) {
    %490 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 60), float64] */, dtype="float64") /* ty=Tensor[(8, 60), float64] */;
    %491 = reshape(%490, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float64] */;
    %492 = @func_221(%491) /* ty=(Tensor[(4, 10, 12), float64],) */;
    %493 = cast(%var_1339, dtype="uint8") /* ty=Tensor[(256), uint8] */;
    %494 = reshape(%493, newshape=[256]) /* ty=Tensor[(256), uint8] */;
    %495 = @func_1275(%494) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(16, 5, 16), int16], Tensor[(256), uint8], Tensor[(1280), uint8]) */;
    %496 = %495.0;
    %497 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
    %498 = cast(%497, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
    %499 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
    %500 = cast(%496, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
    %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %502 = cast(%var_1339, dtype="uint8") /* ty=Tensor[(256), uint8] */;
    %503 = cast(%var_1381, dtype="uint8") /* ty=Tensor[(640, 2), uint8] */;
    %504 = cast(%var_1381, dtype="float64") /* ty=Tensor[(640, 2), float64] */;
    %505 = cast(%var_1381, dtype="float64") /* ty=Tensor[(640, 2), float64] */;
    %506 = cast(%var_1381, dtype="bool") /* ty=Tensor[(640, 2), bool] */;
    %507 = reshape(%502, newshape=[16, 1, 16]) /* ty=Tensor[(16, 1, 16), uint8] */;
    %508 = reshape(%503, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), uint8] */;
    %509 = reshape(%504, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), float64] */;
    %510 = reshape(%505, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), float64] */;
    %511 = reshape(%506, newshape=[16, 5, 16]) /* ty=Tensor[(16, 5, 16), bool] */;
    %512 = @func_490(%507, %508, %509, %510, %511) /* ty=(Tensor[(16, 5, 16), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(4, 10, 12), float64], Tensor[(16, 5, 16), int16], Tensor[(16, 5, 16), uint16], Tensor[(4, 10, 12), float64], Tensor[(4, 10, 12), float64]) */;
    %513 = cast(%var_1384, dtype="float32") /* ty=Tensor[(756), float32] */;
    %514 = reshape(%513, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), float32] */;
    %515 = @func_662(%514) /* ty=(Tensor[(12, 9, 7), float32],) */;
    %516 = cast(%var_1392, dtype="float32") /* ty=Tensor[(54), float32] */;
    %517 = reshape(%516, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), float32] */;
    %518 = %492.0;
    %519 = greater_equal(%500, %501) /* ty=Tensor[(?, 15, 6), bool] */;
    %520 = %512.6;
    %521 = %515.0;
    %522 = @func_1042(%517) /* ty=Tensor[(1, 9, 6), float32] */;
    (%518, meta[relay.Constant][38] /* ty=Tensor[(8, 60), float64] */, %var_1339, %519, %520, %var_1381, %521, %var_1384, %522, %var_1392)
  };
  %523(%var_1395, %var_1396, %var_1397, %var_1398) /* ty=(Tensor[(4, 10, 12), float64], Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(?, 15, 6), bool], Tensor[(4, 10, 12), float64], Tensor[(640, 2), uint8], Tensor[(12, 9, 7), float32], Tensor[(756), float32], Tensor[(1, 9, 6), float32], Tensor[(54), float32]) */
}

def @func_2998(%var_2996: Tensor[(3, 4, 4), float64]) -> (Tensor[(?, 15, 6), int64], Tensor[(3, 4, 4), bool]) {
  @func_2995(%var_2996) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(3, 4, 4), bool]) */
}

def @main(%var_7955: Tensor[(630, 2), bool]) -> (Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float32], Tensor[(256), uint8], Tensor[(?, 15, 6), int64], Tensor[(42), uint32], Tensor[(630, 2), float32]) {
  %524 = cast(meta[relay.Constant][39] /* ty=Tensor[(256), uint8] */, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %525 = reshape(%524, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %526 = @func_7700(%525) /* ty=(Tensor[(5, 16, ?), uint32], Tensor[(1, 15, 6), float32], Tensor[(256), uint8], Tensor[(756), float32]) */;
  %527 = cast(meta[relay.Constant][40] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %528 = cast(%var_7955, dtype="bool") /* ty=Tensor[(630, 2), bool] */;
  %529 = reshape(%527, newshape=[42]) /* ty=Tensor[(42), uint32] */;
  %530 = reshape(%528, newshape=[1260]) /* ty=Tensor[(1260), bool] */;
  %531 = @func_3771(%529, %530) /* ty=(Tensor[(5, 16, ?), uint32], uint32, Tensor[(42), uint32], Tensor[(14, 15, 6), int16], Tensor[(1260), bool], Tensor[(?, 15, 6), int64]) */;
  %532 = cast(%var_7955, dtype="float32") /* ty=Tensor[(630, 2), float32] */;
  %533 = @func_4570() /* ty=Tensor[(?, 15, 6), int64] */;
  %534 = %526.1;
  %535 = %531.5;
  %536 = rsqrt(%532) /* ty=Tensor[(630, 2), float32] */;
  (%533, %534, meta[relay.Constant][39] /* ty=Tensor[(256), uint8] */, %535, meta[relay.Constant][40] /* ty=Tensor[(42), uint32] */, %536)
}

def @func_7792(%var_7782: Tensor[(15, 3, 4), uint8]) -> (Tensor[(15, 3, 4), uint8],) {
  %537 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 3, 4), uint8] */, dtype="uint8") /* ty=Tensor[(15, 3, 4), uint8] */;
  %538 = shape_of(%var_7782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(%var_7782, dtype="uint8") /* ty=Tensor[(15, 3, 4), uint8] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %541 = subtract(%539, %540) /* ty=Tensor[(15, 3, 4), uint8] */;
  (%541,)
}

def @func_7087() -> Tensor[(27, 2), float32] {
  @func_7085() /* ty=Tensor[(27, 2), float32] */
}

def @func_6297(%var_6295: Tensor[(256), uint8], %var_6296: Tensor[(756), float32]) -> (Tensor[(10, 10, 6), float32], Tensor[(256), uint8], Tensor[(?, 15, 6), int64], Tensor[(3, 15, 6), bool], Tensor[(756), float32], Tensor[(7, 6, 1), float32], Tensor[(1, 15, 6), float32], Tensor[(12, 9, 7), int32]) {
  @func_6293(%var_6295, %var_6296) /* ty=(Tensor[(10, 10, 6), float32], Tensor[(256), uint8], Tensor[(?, 15, 6), int64], Tensor[(3, 15, 6), bool], Tensor[(756), float32], Tensor[(7, 6, 1), float32], Tensor[(1, 15, 6), float32], Tensor[(12, 9, 7), int32]) */
}

def @func_2704() -> (Tensor[(?, 15, 6), int16], Tensor[(1, 15, 6), float64], Tensor[(?, 15, 6), bool]) {
  %542 = @func_2292() /* ty=Tensor[(1, 15, 6), float64] */;
  %543 = cast(%542, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %544 = sinh(%543) /* ty=Tensor[(1, 15, 6), float64] */;
  %545 = cast(%544, dtype="int16") /* ty=Tensor[(1, 15, 6), int16] */;
  %546 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%542, dtype="int16") /* ty=Tensor[(1, 15, 6), int16] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %549 = cast(%542, dtype="float64") /* ty=Tensor[(1, 15, 6), float64] */;
  %550 = cast(%542, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  %551 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%544, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %554 = bitwise_xor(%547, %548) /* ty=Tensor[(?, 15, 6), int16] */;
  %555 = sqrt(%549) /* ty=Tensor[(1, 15, 6), float64] */;
  %556 = less(%552, %553) /* ty=Tensor[(?, 15, 6), bool] */;
  (%554, %555, %556)
}

def @func_7048() -> (Tensor[(?, 15, 6), uint8],) {
  %559 = fn () -> (Tensor[(?, 15, 6), uint8],) {
    %557 = @func_4855() /* ty=(Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64]) */;
    %558 = %557.0;
    (%558,)
  };
  %559() /* ty=(Tensor[(?, 15, 6), uint8],) */
}

def @func_3611(%var_3608: int8, %var_3609: Tensor[(1, 15, 4), int8], %var_3610: Tensor[(154), float64]) -> (Tensor[(1, 15, 4), int8], uint32, Tensor[(154), float64]) {
  @func_3606(%var_3608, %var_3609, %var_3610) /* ty=(Tensor[(1, 15, 4), int8], uint32, Tensor[(154), float64]) */
}

def @func_4871() -> Tensor[(1, 15, 6), float64] {
  %560 = fn () -> Tensor[(1, 15, 6), float64] {
    @func_1212() /* ty=Tensor[(1, 15, 6), float64] */
  };
  %560() /* ty=Tensor[(1, 15, 6), float64] */
}

def @func_223(%var_222: Tensor[(4, 10, 12), float64]) -> (Tensor[(4, 10, 12), float64],) {
  %563 = fn (%var_205: Tensor[(4, 10, 12), float64]) -> (Tensor[(4, 10, 12), float64],) {
    %561 = cast(%var_205, dtype="float64") /* ty=Tensor[(4, 10, 12), float64] */;
    %562 = log10(%561) /* ty=Tensor[(4, 10, 12), float64] */;
    (%562,)
  };
  %563(%var_222) /* ty=(Tensor[(4, 10, 12), float64],) */
}

def @func_3354() -> (Tensor[(?, 15, 6), int64],) {
  @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */
}

def @func_1436(%var_1434: Tensor[(42), uint32]) -> (Tensor[(1, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) {
  @func_1433(%var_1434) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */
}

def @func_6906(%var_6904: Tensor[(14, 8, 12), float64], %var_6905: Tensor[(14, 8, 12), float64]) -> Tensor[(14, 8, 12), float64] {
  @func_6902(%var_6904, %var_6905) /* ty=Tensor[(14, 8, 12), float64] */
}

def @func_7801() -> Tensor[(4, 13, 12), float64] {
  @func_7799() /* ty=Tensor[(4, 13, 12), float64] */
}

def @func_4024(%var_4006: Tensor[(54, 1), float32]) -> (Tensor[(?, 15, 6), uint16], Tensor[(?, 9, 6), bool]) {
  %564 = @func_2350() /* ty=(Tensor[(42), uint32], Tensor[(?, 15, 6), uint16]) */;
  %565 = cast(%var_4006, dtype="float32") /* ty=Tensor[(54, 1), float32] */;
  %566 = reshape(%565, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), float32] */;
  %567 = @func_1042(%566) /* ty=Tensor[(1, 9, 6), float32] */;
  %568 = cast(%var_4006, dtype="bool") /* ty=Tensor[(54, 1), bool] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%567, dtype="bool") /* ty=Tensor[(1, 9, 6), bool] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %572 = %564.1;
  %573 = greater(%570, %571) /* ty=Tensor[(?, 9, 6), bool] */;
  (%572, %573)
}

def @func_7697(%var_7682: Tensor[(256), uint8]) -> (Tensor[(5, 16, ?), uint32], Tensor[(1, 15, 6), float32], Tensor[(256), uint8], Tensor[(756), float32]) {
  %574 = cast(%var_7682, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %575 = cast(meta[relay.Constant][42] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %576 = reshape(%574, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %577 = reshape(%575, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %578 = @func_6293(%576, %577) /* ty=(Tensor[(10, 10, 6), float32], Tensor[(256), uint8], Tensor[(?, 15, 6), int64], Tensor[(3, 15, 6), bool], Tensor[(756), float32], Tensor[(7, 6, 1), float32], Tensor[(1, 15, 6), float32], Tensor[(12, 9, 7), int32]) */;
  %579 = @func_2465() /* ty=Tensor[(5, 16, ?), uint32] */;
  %580 = %578.6;
  (%579, %580, %var_7682, meta[relay.Constant][42] /* ty=Tensor[(756), float32] */)
}

def @func_5862() -> Tensor[(27, 2), float32] {
  @func_5860() /* ty=Tensor[(27, 2), float32] */
}

def @func_4058(%var_4040: Tensor[(256), uint8]) -> (Tensor[(4, 13, 12), float64], Tensor[(1, 15, 6), float64], Tensor[(256), uint8], Tensor[(1, 9, 6), float32], Tensor[(27, 2), float32]) {
  %581 = cast(%var_4040, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %582 = reshape(%581, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %583 = @func_1275(%582) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(16, 5, 16), int16], Tensor[(256), uint8], Tensor[(1280), uint8]) */;
  %584 = cast(meta[relay.Constant][43] /* ty=Tensor[(27, 2), float32] */, dtype="float32") /* ty=Tensor[(27, 2), float32] */;
  %585 = reshape(%584, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), float32] */;
  %586 = @func_3982() /* ty=Tensor[(4, 13, 12), float64] */;
  %587 = %583.0;
  %588 = @func_1042(%585) /* ty=Tensor[(1, 9, 6), float32] */;
  (%586, %587, %var_4040, %588, meta[relay.Constant][43] /* ty=Tensor[(27, 2), float32] */)
}

def @func_2377() -> Tensor[(1, 15, 6), float64] {
  @func_2292() /* ty=Tensor[(1, 15, 6), float64] */
}

def @func_5951(%var_5949: Tensor[(4, 13, 12), float64]) -> Tensor[(4, 13, 12), bool] {
  @func_5948(%var_5949) /* ty=Tensor[(4, 13, 12), bool] */
}

def @func_4905(%var_4904: Tensor[(4, 15, 6), int64]) -> (Tensor[(4, 15, 6), uint32],) {
  %593 = fn (%var_4893: Tensor[(4, 15, 6), int64]) -> (Tensor[(4, 15, 6), uint32],) {
    %589 = @func_4535() /* ty=Tensor[(?, 15, 6), int64] */;
    %590 = cast(%589, dtype="uint32") /* ty=Tensor[(?, 15, 6), uint32] */;
    %591 = cast(%var_4893, dtype="uint32") /* ty=Tensor[(4, 15, 6), uint32] */;
    %592 = right_shift(%590, %591) /* ty=Tensor[(4, 15, 6), uint32] */;
    (%592,)
  };
  %593(%var_4904) /* ty=(Tensor[(4, 15, 6), uint32],) */
}

def @func_1604(%var_1598: Tensor[(14, 15, 6), float64]) -> Tensor[(14, 15, 6), int32] {
  %594 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  %595 = cast(%594, dtype="int32") /* ty=Tensor[(1, 15, 6), int32] */;
  %596 = cast(%var_1598, dtype="int32") /* ty=Tensor[(14, 15, 6), int32] */;
  maximum(%595, %596) /* ty=Tensor[(14, 15, 6), int32] */
}

def @func_2028(%var_2026: uint32) -> (Tensor[(1, 15, 6), float64], Tensor[(1280), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(8, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) {
  @func_2025(%var_2026) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(1280), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(8, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */
}

def @func_2882(%var_2880: int32, %var_2881: Tensor[(60), int32]) -> (Tensor[(1, 15, 6), float64], Tensor[(3, 4, 5), int32], int32, Tensor[(60), int32]) {
  @func_2878(%var_2880, %var_2881) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(3, 4, 5), int32], int32, Tensor[(60), int32]) */
}

def @func_6498(%var_6493: Tensor[(54), float32]) -> (Tensor[(1, 15, 6), float64], Tensor[(?, 9, 6), bool], Tensor[(54), float32]) {
  %597 = cast(%var_6493, dtype="float32") /* ty=Tensor[(54), float32] */;
  %598 = reshape(%597, newshape=[54, 1]) /* ty=Tensor[(54, 1), float32] */;
  %599 = @func_4024(%598) /* ty=(Tensor[(?, 15, 6), uint16], Tensor[(?, 9, 6), bool]) */;
  %600 = @func_2377() /* ty=Tensor[(1, 15, 6), float64] */;
  %601 = %599.1;
  (%600, %601, %var_6493)
}

def @func_5780() -> (Tensor[(5, 16, ?), uint32], Tensor[(4, 13, 12), float64]) {
  %605 = fn () -> (Tensor[(5, 16, ?), uint32], Tensor[(4, 13, 12), float64]) {
    %602 = @func_2940() /* ty=(Tensor[(4, 13, 12), float64],) */;
    %603 = @func_2465() /* ty=Tensor[(5, 16, ?), uint32] */;
    %604 = %602.0;
    (%603, %604)
  };
  %605() /* ty=(Tensor[(5, 16, ?), uint32], Tensor[(4, 13, 12), float64]) */
}

def @func_1278(%var_1276: Tensor[(256), uint8]) -> (Tensor[(1, 15, 6), float64], Tensor[(16, 5, 16), int16], Tensor[(256), uint8], Tensor[(1280), uint8]) {
  @func_1275(%var_1276) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(16, 5, 16), int16], Tensor[(256), uint8], Tensor[(1280), uint8]) */
}

def @func_2137(%var_2128: Tensor[(11, 1, 14), float64]) -> (Tensor[(11, 1, 14), float64], uint32, uint32) {
  %606 = cast(%var_2128, dtype="float64") /* ty=Tensor[(11, 1, 14), float64] */;
  %607 = cast(meta[relay.Constant][44] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %608 = reshape(%607, newshape=[]) /* ty=uint32 */;
  %609 = @func_2025(%608) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(1280), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(8, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
  %610 = log10(%606) /* ty=Tensor[(11, 1, 14), float64] */;
  %611 = %609.6;
  (%610, %611, meta[relay.Constant][44] /* ty=uint32 */)
}

def @func_2511() -> Tensor[(?, 15, 6), int64] {
  %613 = fn () -> Tensor[(?, 15, 6), int64] {
    %612 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
    %612.0
  };
  %613() /* ty=Tensor[(?, 15, 6), int64] */
}

def @func_2788(%var_2784: Tensor[(1872), float64], %var_2785: Tensor[(1280), uint8], %var_2786: Tensor[(756), float32], %var_2787: Tensor[(54), float32]) -> (Tensor[(14, 15, 6), float32], Tensor[(14, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(1872), float64], Tensor[(14, 15, 6), int32], Tensor[(756), float32], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32]) {
  %648 = fn (%var_2757: Tensor[(1872), float64], %var_2777: Tensor[(1280), uint8], %var_2778: Tensor[(756), float32], %var_2779: Tensor[(54), float32]) -> (Tensor[(14, 15, 6), float32], Tensor[(14, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(1872), float64], Tensor[(14, 15, 6), int32], Tensor[(756), float32], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32]) {
    %614 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
    %615 = cast(%614, dtype="float32") /* ty=Tensor[(1, 15, 6), float32] */;
    %616 = cast(meta[relay.Constant][45] /* ty=Tensor[(14, 15, 6), float64] */, dtype="float32") /* ty=Tensor[(14, 15, 6), float32] */;
    %617 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
    %618 = cast(%614, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
    %619 = cast(meta[relay.Constant][45] /* ty=Tensor[(14, 15, 6), float64] */, dtype="bool") /* ty=Tensor[(14, 15, 6), bool] */;
    %620 = logical_or(%618, %619) /* ty=Tensor[(14, 15, 6), bool] */;
    %621 = cast(%617, dtype="int64") /* ty=Tensor[(?, 15, 6), int64] */;
    %622 = cast(%620, dtype="int64") /* ty=Tensor[(14, 15, 6), int64] */;
    %623 = cast(%var_2757, dtype="float64") /* ty=Tensor[(1872), float64] */;
    %624 = cast(%var_2757, dtype="float64") /* ty=Tensor[(1872), float64] */;
    %625 = reshape(%623, newshape=[9, 13, 16]) /* ty=Tensor[(9, 13, 16), float64] */;
    %626 = reshape(%624, newshape=[9, 13, 16]) /* ty=Tensor[(9, 13, 16), float64] */;
    %627 = @func_2119(%625, %626) /* ty=(Tensor[(9, 13, 16), float64], Tensor[(?, 15, 6), int64]) */;
    %628 = cast(%620, dtype="float64") /* ty=Tensor[(14, 15, 6), float64] */;
    %629 = log10(%628) /* ty=Tensor[(14, 15, 6), float64] */;
    %630 = @func_2704() /* ty=(Tensor[(?, 15, 6), int16], Tensor[(1, 15, 6), float64], Tensor[(?, 15, 6), bool]) */;
    %631 = %630.1;
    %632 = cast(%629, dtype="int32") /* ty=Tensor[(14, 15, 6), int32] */;
    %633 = cast(%631, dtype="int32") /* ty=Tensor[(1, 15, 6), int32] */;
    %634 = cast(meta[relay.Constant][46] /* ty=Tensor[(256), uint8] */, dtype="uint8") /* ty=Tensor[(256), uint8] */;
    %635 = cast(%var_2777, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
    %636 = cast(%var_2778, dtype="float32") /* ty=Tensor[(756), float32] */;
    %637 = cast(%var_2779, dtype="float32") /* ty=Tensor[(54), float32] */;
    %638 = reshape(%634, newshape=[256]) /* ty=Tensor[(256), uint8] */;
    %639 = reshape(%635, newshape=[640, 2]) /* ty=Tensor[(640, 2), uint8] */;
    %640 = reshape(%636, newshape=[756]) /* ty=Tensor[(756), float32] */;
    %641 = reshape(%637, newshape=[54]) /* ty=Tensor[(54), float32] */;
    %642 = @func_1394(%638, %639, %640, %641) /* ty=(Tensor[(4, 10, 12), float64], Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(?, 15, 6), bool], Tensor[(4, 10, 12), float64], Tensor[(640, 2), uint8], Tensor[(12, 9, 7), float32], Tensor[(756), float32], Tensor[(1, 9, 6), float32], Tensor[(54), float32]) */;
    %643 = multiply(%615, %616) /* ty=Tensor[(14, 15, 6), float32] */;
    %644 = add(%621, %622) /* ty=Tensor[(14, 15, 6), int64] */;
    %645 = %627.1;
    %646 = bitwise_or(%632, %633) /* ty=Tensor[(14, 15, 6), int32] */;
    %647 = %642.7;
    (%643, %644, %645, %var_2757, %646, %647, meta[relay.Constant][46] /* ty=Tensor[(256), uint8] */, %var_2777, %var_2778, %var_2779)
  };
  %648(%var_2784, %var_2785, %var_2786, %var_2787) /* ty=(Tensor[(14, 15, 6), float32], Tensor[(14, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(1872), float64], Tensor[(14, 15, 6), int32], Tensor[(756), float32], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32]) */
}

def @func_3129(%var_3128: Tensor[(48), float64]) -> (Tensor[(?, 15, 6), float64], Tensor[(48), float64], Tensor[(?, 15, 6), int16]) {
  %661 = fn (%var_3094: Tensor[(48), float64]) -> (Tensor[(?, 15, 6), float64], Tensor[(48), float64], Tensor[(?, 15, 6), int16]) {
    %649 = cast(%var_3094, dtype="float64") /* ty=Tensor[(48), float64] */;
    %650 = reshape(%649, newshape=[3, 4, 4]) /* ty=Tensor[(3, 4, 4), float64] */;
    %651 = @func_2995(%650) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(3, 4, 4), bool]) */;
    %652 = %651.0;
    %653 = @func_2350() /* ty=(Tensor[(42), uint32], Tensor[(?, 15, 6), uint16]) */;
    %654 = %653.1;
    %655 = cast(%654, dtype="int16") /* ty=Tensor[(?, 15, 6), int16] */;
    %656 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
    %657 = cast(%652, dtype="int16") /* ty=Tensor[(?, 15, 6), int16] */;
    %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %659 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
    %660 = left_shift(%657, %658) /* ty=Tensor[(?, 15, 6), int16] */;
    (%659, %var_3094, %660)
  };
  %661(%var_3128) /* ty=(Tensor[(?, 15, 6), float64], Tensor[(48), float64], Tensor[(?, 15, 6), int16]) */
}

def @func_7548(%var_7538: Tensor[(5, 4, 5), float32]) -> (Tensor[(5, 4, 5), float32],) {
  %662 = cast(%var_7538, dtype="float32") /* ty=Tensor[(5, 4, 5), float32] */;
  %663 = log(%662) /* ty=Tensor[(5, 4, 5), float32] */;
  (%663,)
}

def @func_5420(%var_5353: Tensor[(756), float32], %var_5354: Tensor[(1, 54), float32], %var_5365: uint32) -> (Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(1872), float64], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(1, 54), float32], Tensor[(256), float64], Tensor[(176), bool], uint32, Tensor[(1350), int64], Tensor[(1, 15, 6), float64], Tensor[(1, 15, 6), float64]) {
  %664 = cast(meta[relay.Constant][47] /* ty=Tensor[(1872), float64] */, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %665 = cast(meta[relay.Constant][48] /* ty=Tensor[(1280), uint8] */, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
  %666 = cast(%var_5353, dtype="float32") /* ty=Tensor[(756), float32] */;
  %667 = cast(%var_5354, dtype="float32") /* ty=Tensor[(1, 54), float32] */;
  %668 = reshape(%664, newshape=[1872]) /* ty=Tensor[(1872), float64] */;
  %669 = reshape(%665, newshape=[1280]) /* ty=Tensor[(1280), uint8] */;
  %670 = reshape(%666, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %671 = reshape(%667, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %672 = @func_2783(%668, %669, %670, %671) /* ty=(Tensor[(14, 15, 6), float32], Tensor[(14, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(1872), float64], Tensor[(14, 15, 6), int32], Tensor[(756), float32], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32]) */;
  %673 = %672.6;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(256), float64] */;
  %675 = cast(%var_5365, dtype="uint32") /* ty=uint32 */;
  %676 = cast(meta[relay.Constant][49] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %677 = reshape(%675, newshape=[]) /* ty=uint32 */;
  %678 = reshape(%676, newshape=[15, 15, 6]) /* ty=Tensor[(15, 15, 6), int64] */;
  %679 = @func_4307(%677, %678) /* ty=(Tensor[(?, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32], Tensor[(15, 15, 6), int64], Tensor[(?, 15, 6), float64], Tensor[(11, 8, 2), bool], Tensor[(176), bool], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) */;
  %680 = @func_4535() /* ty=Tensor[(?, 15, 6), int64] */;
  %681 = @func_4535() /* ty=Tensor[(?, 15, 6), int64] */;
  %682 = log(%674) /* ty=Tensor[(256), float64] */;
  %683 = %679.7;
  %684 = @func_4870() /* ty=Tensor[(1, 15, 6), float64] */;
  %685 = @func_2635() /* ty=Tensor[(1, 15, 6), float64] */;
  (%680, %681, meta[relay.Constant][47] /* ty=Tensor[(1872), float64] */, meta[relay.Constant][48] /* ty=Tensor[(1280), uint8] */, %var_5353, %var_5354, %682, %683, %var_5365, meta[relay.Constant][49] /* ty=Tensor[(1350), int64] */, %684, %685)
}

def @func_5500() -> (Tensor[(?, 15, 6), int64], Tensor[(54), float32], Tensor[(480), float64], Tensor[(54), float32]) {
  @func_5498() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(54), float32], Tensor[(480), float64], Tensor[(54), float32]) */
}

def @func_4027(%var_4025: Tensor[(54, 1), float32]) -> (Tensor[(?, 15, 6), uint16], Tensor[(?, 9, 6), bool]) {
  @func_4024(%var_4025) /* ty=(Tensor[(?, 15, 6), uint16], Tensor[(?, 9, 6), bool]) */
}

def @func_5729(%var_5688: Tensor[(3), float32]) -> (Tensor[(?, 15, 6), uint8], Tensor[(?, 3), bool], Tensor[(3), float32], Tensor[(?, 3), bool]) {
  %686 = @func_4855() /* ty=(Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64]) */;
  %687 = cast(%var_5688, dtype="float32") /* ty=Tensor[(3), float32] */;
  %688 = cast(%var_5688, dtype="float32") /* ty=Tensor[(3), float32] */;
  %689 = reshape(%687, newshape=[1, 3]) /* ty=Tensor[(1, 3), float32] */;
  %690 = reshape(%688, newshape=[1, 3]) /* ty=Tensor[(1, 3), float32] */;
  %691 = @func_4616(%689, %690) /* ty=(Tensor[(?, 3), bool],) */;
  %692 = %691.0;
  %693 = cast(%692, dtype="float32") /* ty=Tensor[(?, 3), float32] */;
  %694 = cast(%var_5688, dtype="float32") /* ty=Tensor[(3), float32] */;
  %695 = reshape(%693, newshape=[1, 3]) /* ty=Tensor[(1, 3), float32] */;
  %696 = reshape(%694, newshape=[1, 3]) /* ty=Tensor[(1, 3), float32] */;
  %697 = @func_4616(%695, %696) /* ty=(Tensor[(?, 3), bool],) */;
  %698 = %686.0;
  %699 = %697.0;
  (%698, %692, %var_5688, %699)
}

def @func_7914() -> Tensor[(?, 15, 6), int64] {
  %700 = @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %700.0
}

def @func_2119(%var_2109: Tensor[(9, 13, 16), float64], %var_2110: Tensor[(9, 13, 16), float64]) -> (Tensor[(9, 13, 16), float64], Tensor[(?, 15, 6), int64]) {
  %701 = cast(%var_2110, dtype="float64") /* ty=Tensor[(9, 13, 16), float64] */;
  %702 = shape_of(%var_2109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%var_2109, dtype="float64") /* ty=Tensor[(9, 13, 16), float64] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %705 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %706 = minimum(%703, %704) /* ty=Tensor[(9, 13, 16), float64] */;
  %707 = %705.0;
  (%706, %707)
}

def @func_1044(%var_1043: Tensor[(1, 9, 6), float32]) -> Tensor[(1, 9, 6), float32] {
  %709 = fn (%var_1033: Tensor[(1, 9, 6), float32]) -> Tensor[(1, 9, 6), float32] {
    %708 = cast(%var_1033, dtype="float32") /* ty=Tensor[(1, 9, 6), float32] */;
    asinh(%708) /* ty=Tensor[(1, 9, 6), float32] */
  };
  %709(%var_1043) /* ty=Tensor[(1, 9, 6), float32] */
}

def @func_1641() -> (Tensor[(?, 15, 6), int64],) {
  @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */
}

def @func_3958(%var_3957: Tensor[(1280), uint8]) -> (Tensor[(4, 13, 12), float64], Tensor[(4, 13, 12), float64], Tensor[(1, 15, 6), float64], Tensor[(1280), uint8]) {
  %717 = fn (%var_3949: Tensor[(1280), uint8]) -> (Tensor[(4, 13, 12), float64], Tensor[(4, 13, 12), float64], Tensor[(1, 15, 6), float64], Tensor[(1280), uint8]) {
    %710 = @func_2594() /* ty=(Tensor[(4, 13, 12), float64],) */;
    %711 = cast(%var_3949, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
    %712 = reshape(%711, newshape=[1280]) /* ty=Tensor[(1280), uint8] */;
    %713 = @func_1769(%712) /* ty=(Tensor[(7, 15, 6), int16], Tensor[(1, 9, 6), float32], Tensor[(2, 128), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32], Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64]) */;
    %714 = %710.0;
    %715 = @func_3440() /* ty=Tensor[(4, 13, 12), float64] */;
    %716 = %713.7;
    (%714, %715, %716, %var_3949)
  };
  %717(%var_3957) /* ty=(Tensor[(4, 13, 12), float64], Tensor[(4, 13, 12), float64], Tensor[(1, 15, 6), float64], Tensor[(1280), uint8]) */
}

def @func_6026() -> (Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) {
  @func_6024() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */
}

def @func_7179() -> (Tensor[(?, 15, 6), float64], Tensor[(675, 2), int8], uint32) {
  %724 = fn () -> (Tensor[(?, 15, 6), float64], Tensor[(675, 2), int8], uint32) {
    %718 = @func_3932() /* ty=(Tensor[(?, 15, 6), float64],) */;
    %719 = cast(meta[relay.Constant][50] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %720 = reshape(%719, newshape=[]) /* ty=uint32 */;
    %721 = @func_4759(%720) /* ty=(Tensor[(4, 13, 12), float64], Tensor[(?, 15, 6), float64], Tensor[(675, 2), int8]) */;
    %722 = %718.0;
    %723 = %721.2;
    (%722, %723, meta[relay.Constant][50] /* ty=uint32 */)
  };
  %724() /* ty=(Tensor[(?, 15, 6), float64], Tensor[(675, 2), int8], uint32) */
}

def @func_1698() -> (Tensor[(?, 15, 6), int64],) {
  %727 = fn () -> (Tensor[(?, 15, 6), int64],) {
    %725 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
    %726 = %725.0;
    (%726,)
  };
  %727() /* ty=(Tensor[(?, 15, 6), int64],) */
}

def @func_6293(%var_6240: Tensor[(256), uint8], %var_6267: Tensor[(756), float32]) -> (Tensor[(10, 10, 6), float32], Tensor[(256), uint8], Tensor[(?, 15, 6), int64], Tensor[(3, 15, 6), bool], Tensor[(756), float32], Tensor[(7, 6, 1), float32], Tensor[(1, 15, 6), float32], Tensor[(12, 9, 7), int32]) {
  %728 = cast(%var_6240, dtype="uint8") /* ty=Tensor[(256), uint8] */;
  %729 = reshape(%728, newshape=[256]) /* ty=Tensor[(256), uint8] */;
  %730 = @func_1275(%729) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(16, 5, 16), int16], Tensor[(256), uint8], Tensor[(1280), uint8]) */;
  %731 = %730.0;
  %732 = cast(%731, dtype="bool") /* ty=Tensor[(1, 15, 6), bool] */;
  %733 = cast(meta[relay.Constant][51] /* ty=Tensor[(3, 15, 6), float64] */, dtype="bool") /* ty=Tensor[(3, 15, 6), bool] */;
  %734 = @func_6024() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
  %735 = @func_4502() /* ty=(Tensor[(1, 15, 6), float32],) */;
  %736 = cast(%var_6267, dtype="float32") /* ty=Tensor[(756), float32] */;
  %737 = reshape(%736, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), float32] */;
  %738 = @func_662(%737) /* ty=(Tensor[(12, 9, 7), float32],) */;
  %739 = %738.0;
  %740 = cast(%739, dtype="float32") /* ty=Tensor[(12, 9, 7), float32] */;
  %741 = reshape(%740, newshape=[12, 9, 7]) /* ty=Tensor[(12, 9, 7), float32] */;
  %742 = @func_662(%741) /* ty=(Tensor[(12, 9, 7), float32],) */;
  %743 = %742.0;
  %744 = cast(%743, dtype="int32") /* ty=Tensor[(12, 9, 7), int32] */;
  %745 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %746 = cast(%739, dtype="int32") /* ty=Tensor[(12, 9, 7), int32] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %748 = @func_5521() /* ty=Tensor[(10, 10, 6), float32] */;
  %749 = @func_4570() /* ty=Tensor[(?, 15, 6), int64] */;
  %750 = logical_or(%732, %733) /* ty=Tensor[(3, 15, 6), bool] */;
  %751 = %734.3;
  %752 = %735.0;
  %753 = logical_xor(%746, %747) /* ty=Tensor[(12, 9, 7), int32] */;
  (%748, %var_6240, %749, %750, %var_6267, %751, %752, %753)
}

def @func_1857(%var_1855: Tensor[(240, 2), float64]) -> (Tensor[(?, 15, 6), int64], Tensor[(4, 10, 12), float64], Tensor[(240, 2), float64]) {
  @func_1854(%var_1855) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(4, 10, 12), float64], Tensor[(240, 2), float64]) */
}

def @func_3440() -> Tensor[(4, 13, 12), float64] {
  %754 = @func_2594() /* ty=(Tensor[(4, 13, 12), float64],) */;
  %754.0
}

def @func_2123(%var_2121: Tensor[(9, 13, 16), float64], %var_2122: Tensor[(9, 13, 16), float64]) -> (Tensor[(9, 13, 16), float64], Tensor[(?, 15, 6), int64]) {
  @func_2119(%var_2121, %var_2122) /* ty=(Tensor[(9, 13, 16), float64], Tensor[(?, 15, 6), int64]) */
}

def @func_6452() -> (Tensor[(720), float64],) {
  %755 = @func_4459() /* ty=(Tensor[(?, 15, 6), float64], Tensor[(720), float64], Tensor[(1, 15, 6), float32]) */;
  %756 = %755.1;
  (%756,)
}

def @func_1890() -> (Tensor[(1, 15, 6), float64],) {
  %758 = fn () -> (Tensor[(1, 15, 6), float64],) {
    %757 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
    (%757,)
  };
  %758() /* ty=(Tensor[(1, 15, 6), float64],) */
}

def @func_2352() -> (Tensor[(42), uint32], Tensor[(?, 15, 6), uint16]) {
  @func_2350() /* ty=(Tensor[(42), uint32], Tensor[(?, 15, 6), uint16]) */
}

def @func_4856() -> (Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64]) {
  %763 = fn () -> (Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64]) {
    %759 = @func_4142() /* ty=(Tensor[(?, 15, 6), uint8],) */;
    %760 = @func_4344() /* ty=(Tensor[(4, 13, 12), float64],) */;
    %761 = %759.0;
    %762 = %760.0;
    (%761, %762)
  };
  %763() /* ty=(Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64]) */
}

def @func_4310(%var_4308: uint32, %var_4309: Tensor[(15, 15, 6), int64]) -> (Tensor[(?, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32], Tensor[(15, 15, 6), int64], Tensor[(?, 15, 6), float64], Tensor[(11, 8, 2), bool], Tensor[(176), bool], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) {
  %786 = fn (%var_4243: uint32, %var_4250: Tensor[(15, 15, 6), int64]) -> (Tensor[(?, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32], Tensor[(15, 15, 6), int64], Tensor[(?, 15, 6), float64], Tensor[(11, 8, 2), bool], Tensor[(176), bool], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) {
    %764 = @func_3405() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(5, 16, ?), float64], Tensor[(?, 15, 6), int64]) */;
    %765 = %764.0;
    %766 = cast(%765, dtype="float64") /* ty=Tensor[(?, 15, 6), float64] */;
    %767 = cast(%var_4243, dtype="uint32") /* ty=uint32 */;
    %768 = cast(meta[relay.Constant][52] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
    %769 = reshape(%767, newshape=[]) /* ty=uint32 */;
    %770 = reshape(%768, newshape=[7, 6, 1]) /* ty=Tensor[(7, 6, 1), uint32] */;
    %771 = @func_971(%769, %770) /* ty=(Tensor[(7, 6, 1), float32],) */;
    %772 = cast(%765, dtype="int64") /* ty=Tensor[(?, 15, 6), int64] */;
    %773 = cast(%var_4250, dtype="int64") /* ty=Tensor[(15, 15, 6), int64] */;
    %774 = cast(meta[relay.Constant][53] /* ty=Tensor[(176), bool] */, dtype="bool") /* ty=Tensor[(176), bool] */;
    %775 = reshape(%774, newshape=[11, 8, 2]) /* ty=Tensor[(11, 8, 2), bool] */;
    %776 = @func_1022(%775) /* ty=(Tensor[(11, 8, 2), bool],) */;
    %777 = cast(meta[relay.Constant][54] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
    %778 = reshape(%777, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), float64] */;
    %779 = @func_2137(%778) /* ty=(Tensor[(11, 1, 14), float64], uint32, uint32) */;
    %780 = sin(%766) /* ty=Tensor[(?, 15, 6), float64] */;
    %781 = %771.0;
    %782 = right_shift(%772, %773) /* ty=Tensor[(15, 15, 6), int64] */;
    %783 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
    %784 = %776.0;
    %785 = %779.0;
    (%780, %781, %var_4243, meta[relay.Constant][52] /* ty=Tensor[(42), uint32] */, %782, %783, %784, meta[relay.Constant][53] /* ty=Tensor[(176), bool] */, %785, meta[relay.Constant][54] /* ty=Tensor[(154), float64] */)
  };
  %786(%var_4308, %var_4309) /* ty=(Tensor[(?, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32], Tensor[(15, 15, 6), int64], Tensor[(?, 15, 6), float64], Tensor[(11, 8, 2), bool], Tensor[(176), bool], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) */
}

def @func_4397(%var_4396: Tensor[(27, 2), float32]) -> (Tensor[(27, 2), bool], Tensor[(1, 15, 6), float64]) {
  %806 = fn (%var_4367: Tensor[(27, 2), float32]) -> (Tensor[(27, 2), bool], Tensor[(1, 15, 6), float64]) {
    %787 = @func_3915() /* ty=(Tensor[(3, 15, 6), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */;
    %788 = %787.1;
    %789 = cast(%var_4367, dtype="bool") /* ty=Tensor[(27, 2), bool] */;
    %790 = shape_of(%788, dtype="int32") /* ty=Tensor[(2), int32] */;
    %791 = cast(%788, dtype="bool") /* ty=Tensor[(27, 2), bool] */;
    %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %793 = greater_equal(%791, %792) /* ty=Tensor[(27, 2), bool] */;
    %794 = cast(%788, dtype="bool") /* ty=Tensor[(27, 2), bool] */;
    %795 = shape_of(%793, dtype="int32") /* ty=Tensor[(2), int32] */;
    %796 = cast(%793, dtype="bool") /* ty=Tensor[(27, 2), bool] */;
    %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %798 = greater(%796, %797) /* ty=Tensor[(27, 2), bool] */;
    %799 = cast(%798, dtype="bool") /* ty=Tensor[(27, 2), bool] */;
    %800 = shape_of(%793, dtype="int32") /* ty=Tensor[(2), int32] */;
    %801 = cast(%793, dtype="bool") /* ty=Tensor[(27, 2), bool] */;
    %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %803 = @func_1889() /* ty=(Tensor[(1, 15, 6), float64],) */;
    %804 = logical_and(%801, %802) /* ty=Tensor[(27, 2), bool] */;
    %805 = %803.0;
    (%804, %805)
  };
  %806(%var_4396) /* ty=(Tensor[(27, 2), bool], Tensor[(1, 15, 6), float64]) */
}

def @func_4536() -> Tensor[(?, 15, 6), int64] {
  %807 = fn () -> Tensor[(?, 15, 6), int64] {
    @func_2510() /* ty=Tensor[(?, 15, 6), int64] */
  };
  %807() /* ty=Tensor[(?, 15, 6), int64] */
}

def @func_5053() -> (Tensor[(1, 15, 6), float64],) {
  %808 = @func_1212() /* ty=Tensor[(1, 15, 6), float64] */;
  (%808,)
}

def @func_7779() -> (Tensor[(?, 15, 6), float64], Tensor[(480), float64]) {
  %813 = fn () -> (Tensor[(?, 15, 6), float64], Tensor[(480), float64]) {
    %809 = @func_3932() /* ty=(Tensor[(?, 15, 6), float64],) */;
    %810 = @func_5498() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(54), float32], Tensor[(480), float64], Tensor[(54), float32]) */;
    %811 = %809.0;
    %812 = %810.2;
    (%811, %812)
  };
  %813() /* ty=(Tensor[(?, 15, 6), float64], Tensor[(480), float64]) */
}

def @func_4328() -> (Tensor[(1, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(1280), uint8], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) {
  %814 = cast(meta[relay.Constant][55] /* ty=Tensor[(1280), uint8] */, dtype="uint8") /* ty=Tensor[(1280), uint8] */;
  %815 = reshape(%814, newshape=[16, 80]) /* ty=Tensor[(16, 80), uint8] */;
  %816 = @func_3738(%815) /* ty=(Tensor[(?, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(256), uint8], Tensor[(16, 80), uint8]) */;
  %817 = cast(meta[relay.Constant][56] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %818 = cast(meta[relay.Constant][57] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %819 = reshape(%817, newshape=[]) /* ty=uint32 */;
  %820 = reshape(%818, newshape=[7, 6, 1]) /* ty=Tensor[(7, 6, 1), uint32] */;
  %821 = @func_971(%819, %820) /* ty=(Tensor[(7, 6, 1), float32],) */;
  %822 = @func_2292() /* ty=Tensor[(1, 15, 6), float64] */;
  %823 = %816.1;
  %824 = %821.0;
  (%822, %823, meta[relay.Constant][55] /* ty=Tensor[(1280), uint8] */, %824, meta[relay.Constant][56] /* ty=uint32 */, meta[relay.Constant][57] /* ty=Tensor[(42), uint32] */)
}

def @func_5608(%var_5583: Tensor[(9, 10, 11), uint64]) -> (Tensor[(9, 10, 11), uint64], Tensor[(1, 15, 6), float32], Tensor[(?, 15, 6), int64], Tensor[(720), float64]) {
  %825 = cast(meta[relay.Constant][58] /* ty=Tensor[(9, 10, 11), uint64] */, dtype="uint64") /* ty=Tensor[(9, 10, 11), uint64] */;
  %826 = shape_of(%var_5583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(%var_5583, dtype="uint64") /* ty=Tensor[(9, 10, 11), uint64] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %829 = @func_4502() /* ty=(Tensor[(1, 15, 6), float32],) */;
  %830 = cast(meta[relay.Constant][59] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %831 = reshape(%830, newshape=[4, 180]) /* ty=Tensor[(4, 180), float64] */;
  %832 = @func_3879(%831) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64], Tensor[(4, 180), float64], Tensor[(?, 15, 6), int64]) */;
  %833 = add(%827, %828) /* ty=Tensor[(9, 10, 11), uint64] */;
  %834 = %829.0;
  %835 = %832.0;
  (%833, %834, %835, meta[relay.Constant][59] /* ty=Tensor[(720), float64] */)
}

def @func_2218(%var_2216: int32, %var_2217: Tensor[(3, 4, 5), int32]) -> Tensor[(3, 4, 5), int32] {
  @func_2214(%var_2216, %var_2217) /* ty=Tensor[(3, 4, 5), int32] */
}

def @func_4346() -> (Tensor[(4, 13, 12), float64],) {
  @func_4344() /* ty=(Tensor[(4, 13, 12), float64],) */
}

def @func_6662() -> (Tensor[(?, 15, 6), uint8],) {
  %838 = fn () -> (Tensor[(?, 15, 6), uint8],) {
    %836 = @func_4855() /* ty=(Tensor[(?, 15, 6), uint8], Tensor[(4, 13, 12), float64]) */;
    %837 = %836.0;
    (%837,)
  };
  %838() /* ty=(Tensor[(?, 15, 6), uint8],) */
}

def @func_3168(%var_3166: Tensor[(5, 2, 14), int64]) -> (Tensor[(5, 2, 14), int64],) {
  @func_3165(%var_3166) /* ty=(Tensor[(5, 2, 14), int64],) */
}

def @func_2578(%var_2577: Tensor[(54), float32]) -> (Tensor[(1, 15, 6), float64], Tensor[(1, 15, 6), float64], Tensor[(1, 9, 6), float32], Tensor[(54), float32], Tensor[(?, 15, 6), float64], Tensor[(8, 15, 6), float64], uint32) {
  %850 = fn (%var_2559: Tensor[(54), float32]) -> (Tensor[(1, 15, 6), float64], Tensor[(1, 15, 6), float64], Tensor[(1, 9, 6), float32], Tensor[(54), float32], Tensor[(?, 15, 6), float64], Tensor[(8, 15, 6), float64], uint32) {
    %839 = @func_1889() /* ty=(Tensor[(1, 15, 6), float64],) */;
    %840 = cast(%var_2559, dtype="float32") /* ty=Tensor[(54), float32] */;
    %841 = reshape(%840, newshape=[1, 9, 6]) /* ty=Tensor[(1, 9, 6), float32] */;
    %842 = cast(meta[relay.Constant][60] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %843 = reshape(%842, newshape=[]) /* ty=uint32 */;
    %844 = @func_2025(%843) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(1280), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(8, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
    %845 = %839.0;
    %846 = @func_2377() /* ty=Tensor[(1, 15, 6), float64] */;
    %847 = @func_1042(%841) /* ty=Tensor[(1, 9, 6), float32] */;
    %848 = @func_2174() /* ty=Tensor[(?, 15, 6), float64] */;
    %849 = %844.4;
    (%845, %846, %847, %var_2559, %848, %849, meta[relay.Constant][60] /* ty=uint32 */)
  };
  %850(%var_2577) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(1, 15, 6), float64], Tensor[(1, 9, 6), float32], Tensor[(54), float32], Tensor[(?, 15, 6), float64], Tensor[(8, 15, 6), float64], uint32) */
}

def @func_6582() -> Tensor[(?, 15, 6), int64] {
  %851 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %851.0
}

def @func_490(%var_418: Tensor[(16, 1, 16), uint8], %var_419: Tensor[(16, 5, 16), uint8], %var_435: Tensor[(16, 5, 16), float64], %var_457: Tensor[(16, 5, 16), float64], %var_470: Tensor[(16, 5, 16), bool]) -> (Tensor[(16, 5, 16), uint8], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(4, 10, 12), float64], Tensor[(16, 5, 16), int16], Tensor[(16, 5, 16), uint16], Tensor[(4, 10, 12), float64], Tensor[(4, 10, 12), float64]) {
  %852 = cast(%var_418, dtype="uint8") /* ty=Tensor[(16, 1, 16), uint8] */;
  %853 = cast(%var_419, dtype="uint8") /* ty=Tensor[(16, 5, 16), uint8] */;
  %854 = cast(meta[relay.Constant][61] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %855 = reshape(%854, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float64] */;
  %856 = @func_221(%855) /* ty=(Tensor[(4, 10, 12), float64],) */;
  %857 = %856.0;
  %858 = cast(%857, dtype="float64") /* ty=Tensor[(4, 10, 12), float64] */;
  %859 = reshape(%858, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float64] */;
  %860 = @func_221(%859) /* ty=(Tensor[(4, 10, 12), float64],) */;
  %861 = cast(%var_419, dtype="float64") /* ty=Tensor[(16, 5, 16), float64] */;
  %862 = acosh(%861) /* ty=Tensor[(16, 5, 16), float64] */;
  %863 = cast(%var_435, dtype="float64") /* ty=Tensor[(16, 5, 16), float64] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="float64") /* ty=Tensor[(16, 5, 16), float64] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %867 = power(%865, %866) /* ty=Tensor[(16, 5, 16), float64] */;
  %868 = cast(%var_457, dtype="bool") /* ty=Tensor[(16, 5, 16), bool] */;
  %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %870 = cast(%867, dtype="bool") /* ty=Tensor[(16, 5, 16), bool] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %872 = greater_equal(%870, %871) /* ty=Tensor[(16, 5, 16), bool] */;
  %873 = cast(%867, dtype="int16") /* ty=Tensor[(16, 5, 16), int16] */;
  %874 = shape_of(%872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %875 = cast(%872, dtype="int16") /* ty=Tensor[(16, 5, 16), int16] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %877 = cast(%var_470, dtype="uint16") /* ty=Tensor[(16, 5, 16), uint16] */;
  %878 = shape_of(%872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(%872, dtype="uint16") /* ty=Tensor[(16, 5, 16), uint16] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %881 = cast(meta[relay.Constant][61] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %882 = reshape(%881, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float64] */;
  %883 = @func_221(%882) /* ty=(Tensor[(4, 10, 12), float64],) */;
  %884 = cast(meta[relay.Constant][61] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %885 = reshape(%884, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), float64] */;
  %886 = @func_221(%885) /* ty=(Tensor[(4, 10, 12), float64],) */;
  %887 = logical_xor(%852, %853) /* ty=Tensor[(16, 5, 16), uint8] */;
  %888 = %860.0;
  %889 = add(%875, %876) /* ty=Tensor[(16, 5, 16), int16] */;
  %890 = maximum(%879, %880) /* ty=Tensor[(16, 5, 16), uint16] */;
  %891 = %883.0;
  %892 = %886.0;
  (%887, %857, meta[relay.Constant][61] /* ty=Tensor[(480), float64] */, %888, %889, %890, %891, %892)
}

def @func_7034() -> (Tensor[(1, 15, 6), float64], Tensor[(1, 15, 6), float64]) {
  %897 = fn () -> (Tensor[(1, 15, 6), float64], Tensor[(1, 15, 6), float64]) {
    %893 = @func_1889() /* ty=(Tensor[(1, 15, 6), float64],) */;
    %894 = @func_2704() /* ty=(Tensor[(?, 15, 6), int16], Tensor[(1, 15, 6), float64], Tensor[(?, 15, 6), bool]) */;
    %895 = %893.0;
    %896 = %894.1;
    (%895, %896)
  };
  %897() /* ty=(Tensor[(1, 15, 6), float64], Tensor[(1, 15, 6), float64]) */
}

def @func_6975() -> (uint32,) {
  %898 = @func_6367() /* ty=(uint32,) */;
  %899 = %898.0;
  (%899,)
}

def @func_2637() -> Tensor[(1, 15, 6), float64] {
  @func_2635() /* ty=Tensor[(1, 15, 6), float64] */
}

def @func_5280() -> (Tensor[(4, 13, 12), float64], Tensor[(7, 15, 6), bool], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) {
  %900 = @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */;
  %901 = %900.0;
  %902 = cast(%901, dtype="bool") /* ty=Tensor[(?, 15, 6), bool] */;
  %903 = cast(meta[relay.Constant][62] /* ty=Tensor[(7, 15, 6), int64] */, dtype="bool") /* ty=Tensor[(7, 15, 6), bool] */;
  %904 = cast(meta[relay.Constant][63] /* ty=Tensor[(154), float64] */, dtype="float64") /* ty=Tensor[(154), float64] */;
  %905 = reshape(%904, newshape=[11, 1, 14]) /* ty=Tensor[(11, 1, 14), float64] */;
  %906 = @func_2137(%905) /* ty=(Tensor[(11, 1, 14), float64], uint32, uint32) */;
  %907 = @func_3982() /* ty=Tensor[(4, 13, 12), float64] */;
  %908 = logical_and(%902, %903) /* ty=Tensor[(7, 15, 6), bool] */;
  %909 = %906.0;
  (%907, %908, %909, meta[relay.Constant][63] /* ty=Tensor[(154), float64] */)
}

def @func_4330() -> (Tensor[(1, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(1280), uint8], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) {
  @func_4328() /* ty=(Tensor[(1, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(1280), uint8], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */
}

def @func_3741(%var_3739: Tensor[(16, 80), uint8]) -> (Tensor[(?, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(256), uint8], Tensor[(16, 80), uint8]) {
  @func_3738(%var_3739) /* ty=(Tensor[(?, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(256), uint8], Tensor[(16, 80), uint8]) */
}

def @func_2594() -> (Tensor[(4, 13, 12), float64],) {
  %910 = cast(meta[relay.Constant][64] /* ty=Tensor[(4, 13, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 13, 12), float64] */;
  %911 = acosh(%910) /* ty=Tensor[(4, 13, 12), float64] */;
  (%911,)
}

def @func_2706() -> (Tensor[(?, 15, 6), int16], Tensor[(1, 15, 6), float64], Tensor[(?, 15, 6), bool]) {
  @func_2704() /* ty=(Tensor[(?, 15, 6), int16], Tensor[(1, 15, 6), float64], Tensor[(?, 15, 6), bool]) */
}

def @func_6454() -> (Tensor[(720), float64],) {
  @func_6452() /* ty=(Tensor[(720), float64],) */
}

def @func_4811() -> Tensor[(?, 15, 6), int64] {
  %913 = fn () -> Tensor[(?, 15, 6), int64] {
    %912 = @func_1697() /* ty=(Tensor[(?, 15, 6), int64],) */;
    %912.0
  };
  %913() /* ty=Tensor[(?, 15, 6), int64] */
}

def @func_3069(%var_3067: Tensor[(480), float64], %var_3068: Tensor[(54), float32]) -> (Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64], int32, Tensor[(60), int32], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(?, 15, 6), float64], int32, Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756, 1), float32], Tensor[(54), float32], Tensor[(6, 9, 8), uint8], Tensor[(4, 108), uint8], Tensor[(4, 10, 12), float64], Tensor[(1, 15, 6), float64]) {
  @func_3065(%var_3067, %var_3068) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(1, 15, 6), float64], int32, Tensor[(60), int32], Tensor[(4, 10, 12), float64], Tensor[(480), float64], Tensor[(?, 15, 6), float64], int32, Tensor[(8, 60), float64], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756, 1), float32], Tensor[(54), float32], Tensor[(6, 9, 8), uint8], Tensor[(4, 108), uint8], Tensor[(4, 10, 12), float64], Tensor[(1, 15, 6), float64]) */
}

def @func_5522() -> Tensor[(10, 10, 6), float32] {
  %915 = fn () -> Tensor[(10, 10, 6), float32] {
    %914 = cast(meta[relay.Constant][65] /* ty=Tensor[(10, 10, 6), float32] */, dtype="float32") /* ty=Tensor[(10, 10, 6), float32] */;
    tan(%914) /* ty=Tensor[(10, 10, 6), float32] */
  };
  %915() /* ty=Tensor[(10, 10, 6), float32] */
}

def @func_3511(%var_3508: Tensor[(1872), float64], %var_3509: Tensor[(756), float32], %var_3510: Tensor[(54), float32]) -> (Tensor[(4, 13, 12), float64], Tensor[(256), uint8], Tensor[(1872), float64], Tensor[(2, 640), uint8], Tensor[(756), float32], Tensor[(54), float32], Tensor[(?, 15, 6), int64]) {
  @func_3506(%var_3508, %var_3509, %var_3510) /* ty=(Tensor[(4, 13, 12), float64], Tensor[(256), uint8], Tensor[(1872), float64], Tensor[(2, 640), uint8], Tensor[(756), float32], Tensor[(54), float32], Tensor[(?, 15, 6), int64]) */
}

def @func_4571() -> Tensor[(?, 15, 6), int64] {
  %917 = fn () -> Tensor[(?, 15, 6), int64] {
    %916 = @func_3352() /* ty=(Tensor[(?, 15, 6), int64],) */;
    %916.0
  };
  %917() /* ty=Tensor[(?, 15, 6), int64] */
}

def @func_3506(%var_3472: Tensor[(1872), float64], %var_3474: Tensor[(756), float32], %var_3475: Tensor[(54), float32]) -> (Tensor[(4, 13, 12), float64], Tensor[(256), uint8], Tensor[(1872), float64], Tensor[(2, 640), uint8], Tensor[(756), float32], Tensor[(54), float32], Tensor[(?, 15, 6), int64]) {
  %918 = cast(%var_3472, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %919 = cast(meta[relay.Constant][66] /* ty=Tensor[(2, 640), uint8] */, dtype="uint8") /* ty=Tensor[(2, 640), uint8] */;
  %920 = cast(%var_3474, dtype="float32") /* ty=Tensor[(756), float32] */;
  %921 = cast(%var_3475, dtype="float32") /* ty=Tensor[(54), float32] */;
  %922 = reshape(%918, newshape=[1872]) /* ty=Tensor[(1872), float64] */;
  %923 = reshape(%919, newshape=[1280]) /* ty=Tensor[(1280), uint8] */;
  %924 = reshape(%920, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %925 = reshape(%921, newshape=[54]) /* ty=Tensor[(54), float32] */;
  %926 = @func_2783(%922, %923, %924, %925) /* ty=(Tensor[(14, 15, 6), float32], Tensor[(14, 15, 6), int64], Tensor[(?, 15, 6), int64], Tensor[(1872), float64], Tensor[(14, 15, 6), int32], Tensor[(756), float32], Tensor[(256), uint8], Tensor[(1280), uint8], Tensor[(756), float32], Tensor[(54), float32]) */;
  %927 = @func_1828() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64]) */;
  %928 = @func_3440() /* ty=Tensor[(4, 13, 12), float64] */;
  %929 = %926.6;
  %930 = %927.0;
  (%928, %929, %var_3472, meta[relay.Constant][66] /* ty=Tensor[(2, 640), uint8] */, %var_3474, %var_3475, %930)
}

def @func_6768() -> (Tensor[(27, 2), float32],) {
  @func_6766() /* ty=(Tensor[(27, 2), float32],) */
}

def @func_7606(%var_7604: Tensor[(2, 13, 3), float64], %var_7605: Tensor[(2, 13, 3), float64]) -> (Tensor[(2, 13, 3), uint32], Tensor[(?, 15, 6), float64]) {
  @func_7602(%var_7604, %var_7605) /* ty=(Tensor[(2, 13, 3), uint32], Tensor[(?, 15, 6), float64]) */
}

def @func_6766() -> (Tensor[(27, 2), float32],) {
  %931 = @func_4932() /* ty=(Tensor[(27, 2), float32],) */;
  %932 = %931.0;
  (%932,)
}

def @func_5860() -> Tensor[(27, 2), float32] {
  %933 = @func_3915() /* ty=(Tensor[(3, 15, 6), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */;
  %933.1
}

def @func_662(%var_650: Tensor[(12, 9, 7), float32]) -> (Tensor[(12, 9, 7), float32],) {
  %934 = cast(meta[relay.Constant][67] /* ty=Tensor[(12, 9, 7), float32] */, dtype="float32") /* ty=Tensor[(12, 9, 7), float32] */;
  %935 = shape_of(%var_650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %936 = cast(%var_650, dtype="float32") /* ty=Tensor[(12, 9, 7), float32] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %938 = floor_divide(%936, %937) /* ty=Tensor[(12, 9, 7), float32] */;
  (%938,)
}

def @func_6080(%var_6078: Tensor[(3, 15, 6), float64], %var_6079: Tensor[(480), float64]) -> (Tensor[(3, 15, 6), bool], Tensor[(240, 2), float64], Tensor[(480), float64], Tensor[(1280), uint8]) {
  %952 = fn (%var_6044: Tensor[(3, 15, 6), float64], %var_6064: Tensor[(480), float64]) -> (Tensor[(3, 15, 6), bool], Tensor[(240, 2), float64], Tensor[(480), float64], Tensor[(1280), uint8]) {
    %939 = @func_4471() /* ty=(Tensor[(3, 15, 6), float64],) */;
    %940 = %939.0;
    %941 = cast(%var_6044, dtype="bool") /* ty=Tensor[(3, 15, 6), bool] */;
    %942 = shape_of(%940, dtype="int32") /* ty=Tensor[(3), int32] */;
    %943 = cast(%940, dtype="bool") /* ty=Tensor[(3, 15, 6), bool] */;
    %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %945 = cast(%var_6064, dtype="float64") /* ty=Tensor[(480), float64] */;
    %946 = reshape(%945, newshape=[240, 2]) /* ty=Tensor[(240, 2), float64] */;
    %947 = @func_1854(%946) /* ty=(Tensor[(?, 15, 6), int64], Tensor[(4, 10, 12), float64], Tensor[(240, 2), float64]) */;
    %948 = @func_4328() /* ty=(Tensor[(1, 15, 6), float64], Tensor[(4, 10, 12), float64], Tensor[(1280), uint8], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
    %949 = not_equal(%943, %944) /* ty=Tensor[(3, 15, 6), bool] */;
    %950 = %947.2;
    %951 = %948.2;
    (%949, %950, %var_6064, %951)
  };
  %952(%var_6078, %var_6079) /* ty=(Tensor[(3, 15, 6), bool], Tensor[(240, 2), float64], Tensor[(480), float64], Tensor[(1280), uint8]) */
}

def @func_4460() -> (Tensor[(?, 15, 6), float64], Tensor[(720), float64], Tensor[(1, 15, 6), float32]) {
  %962 = fn () -> (Tensor[(?, 15, 6), float64], Tensor[(720), float64], Tensor[(1, 15, 6), float32]) {
    %953 = cast(meta[relay.Constant][68] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
    %954 = reshape(%953, newshape=[8, 15, 6]) /* ty=Tensor[(8, 15, 6), float64] */;
    %955 = @func_2271(%954) /* ty=(Tensor[(8, 15, 6), uint64], Tensor[(?, 15, 6), float64]) */;
    %956 = @func_2377() /* ty=Tensor[(1, 15, 6), float64] */;
    %957 = cast(%956, dtype="float32") /* ty=Tensor[(1, 15, 6), float32] */;
    %958 = tan(%957) /* ty=Tensor[(1, 15, 6), float32] */;
    %959 = cast(%958, dtype="float32") /* ty=Tensor[(1, 15, 6), float32] */;
    %960 = %955.1;
    %961 = erf(%959) /* ty=Tensor[(1, 15, 6), float32] */;
    (%960, meta[relay.Constant][68] /* ty=Tensor[(720), float64] */, %961)
  };
  %962() /* ty=(Tensor[(?, 15, 6), float64], Tensor[(720), float64], Tensor[(1, 15, 6), float32]) */
}

def @func_2175() -> Tensor[(?, 15, 6), float64] {
  %964 = fn () -> Tensor[(?, 15, 6), float64] {
    %963 = @func_1828() /* ty=(Tensor[(?, 15, 6), int64], Tensor[(?, 15, 6), float64]) */;
    %963.1
  };
  %964() /* ty=Tensor[(?, 15, 6), float64] */
}

def @func_4184(%var_4166: Tensor[(12, 15, 6), int64]) -> (Tensor[(12, 15, 6), uint16], Tensor[(9, 13, 16), float64], Tensor[(936, 2), float64]) {
  %965 = @func_2510() /* ty=Tensor[(?, 15, 6), int64] */;
  %966 = cast(%965, dtype="uint16") /* ty=Tensor[(?, 15, 6), uint16] */;
  %967 = cast(%var_4166, dtype="uint16") /* ty=Tensor[(12, 15, 6), uint16] */;
  %968 = cast(meta[relay.Constant][69] /* ty=Tensor[(936, 2), float64] */, dtype="float64") /* ty=Tensor[(936, 2), float64] */;
  %969 = cast(meta[relay.Constant][69] /* ty=Tensor[(936, 2), float64] */, dtype="float64") /* ty=Tensor[(936, 2), float64] */;
  %970 = reshape(%968, newshape=[9, 13, 16]) /* ty=Tensor[(9, 13, 16), float64] */;
  %971 = reshape(%969, newshape=[9, 13, 16]) /* ty=Tensor[(9, 13, 16), float64] */;
  %972 = @func_2119(%970, %971) /* ty=(Tensor[(9, 13, 16), float64], Tensor[(?, 15, 6), int64]) */;
  %973 = right_shift(%966, %967) /* ty=Tensor[(12, 15, 6), uint16] */;
  %974 = %972.0;
  (%973, %974, meta[relay.Constant][69] /* ty=Tensor[(936, 2), float64] */)
}

def @func_7799() -> Tensor[(4, 13, 12), float64] {
  %975 = @func_7353() /* ty=(Tensor[(4, 13, 12), float64], Tensor[(?, 15, 6), float64]) */;
  %975.0
}

def @func_3771(%var_3769: Tensor[(42), uint32], %var_3770: Tensor[(1260), bool]) -> (Tensor[(5, 16, ?), uint32], uint32, Tensor[(42), uint32], Tensor[(14, 15, 6), int16], Tensor[(1260), bool], Tensor[(?, 15, 6), int64]) {
  %987 = fn (%var_3755: Tensor[(42), uint32], %var_3758: Tensor[(1260), bool]) -> (Tensor[(5, 16, ?), uint32], uint32, Tensor[(42), uint32], Tensor[(14, 15, 6), int16], Tensor[(1260), bool], Tensor[(?, 15, 6), int64]) {
    %976 = cast(%var_3755, dtype="uint32") /* ty=Tensor[(42), uint32] */;
    %977 = reshape(%976, newshape=[42]) /* ty=Tensor[(42), uint32] */;
    %978 = @func_1433(%977) /* ty=(Tensor[(1, 15, 6), float64], Tensor[(7, 6, 1), float32], uint32, Tensor[(42), uint32]) */;
    %979 = cast(%var_3758, dtype="bool") /* ty=Tensor[(1260), bool] */;
    %980 = reshape(%979, newshape=[14, 15, 6]) /* ty=Tensor[(14, 15, 6), bool] */;
    %981 = @func_3210(%980) /* ty=(Tensor[(14, 15, 6), bool], Tensor[(14, 15, 6), int16]) */;
    %982 = @func_1639() /* ty=(Tensor[(?, 15, 6), int64],) */;
    %983 = @func_2465() /* ty=Tensor[(5, 16, ?), uint32] */;
    %984 = %978.2;
    %985 = %981.1;
    %986 = %982.0;
    (%983, %984, %var_3755, %985, %var_3758, %986)
  };
  %987(%var_3769, %var_3770) /* ty=(Tensor[(5, 16, ?), uint32], uint32, Tensor[(42), uint32], Tensor[(14, 15, 6), int16], Tensor[(1260), bool], Tensor[(?, 15, 6), int64]) */
}

def @func_2465() -> Tensor[(5, 16, ?), uint32] {
  %988 = cast(meta[relay.Constant][70] /* ty=Tensor[(5, 16, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %989 = atanh(%988) /* ty=Tensor[(5, 16, 1), float64] */;
  %990 = cast(%989, dtype="float32") /* ty=Tensor[(5, 16, 1), float32] */;
  %991 = acos(%990) /* ty=Tensor[(5, 16, 1), float32] */;
  %992 = cast(meta[relay.Constant][70] /* ty=Tensor[(5, 16, 1), float64] */, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %993 = cosh(%992) /* ty=Tensor[(5, 16, 1), float64] */;
  %994 = cast(%993, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %995 = shape_of(%991, dtype="int32") /* ty=Tensor[(3), int32] */;
  %996 = cast(%991, dtype="float64") /* ty=Tensor[(5, 16, 1), float64] */;
  %997 = dyn.reshape(%994, %995, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %998 = floor_divide(%996, %997) /* ty=Tensor[(5, 16, ?), float64] */;
  %999 = cast(%993, dtype="uint32") /* ty=Tensor[(5, 16, 1), uint32] */;
  %1000 = shape_of(%998, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1001 = cast(%998, dtype="uint32") /* ty=Tensor[(5, 16, ?), uint32] */;
  %1002 = dyn.reshape(%999, %1000, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%1001, %1002) /* ty=Tensor[(5, 16, ?), uint32] */
}

def @func_5282() -> (Tensor[(4, 13, 12), float64], Tensor[(7, 15, 6), bool], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) {
  @func_5280() /* ty=(Tensor[(4, 13, 12), float64], Tensor[(7, 15, 6), bool], Tensor[(11, 1, 14), float64], Tensor[(154), float64]) */
}

def @func_5154() -> (Tensor[(3, 15, 6), float64],) {
  %1007 = fn () -> (Tensor[(3, 15, 6), float64],) {
    %1003 = @func_3915() /* ty=(Tensor[(3, 15, 6), float64], Tensor[(27, 2), float32], Tensor[(54), float32]) */;
    %1004 = %1003.0;
    %1005 = cast(%1004, dtype="float64") /* ty=Tensor[(3, 15, 6), float64] */;
    %1006 = rsqrt(%1005) /* ty=Tensor[(3, 15, 6), float64] */;
    (%1006,)
  };
  %1007() /* ty=(Tensor[(3, 15, 6), float64],) */
}

def @func_7085() -> Tensor[(27, 2), float32] {
  %1008 = @func_4932() /* ty=(Tensor[(27, 2), float32],) */;
  %1008.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen213/build/output.py", line 2740, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:57:56] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

