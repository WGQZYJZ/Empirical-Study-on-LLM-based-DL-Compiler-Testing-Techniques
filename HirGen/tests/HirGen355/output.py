import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_39 = relay.var("var_39", dtype = "float64", shape = (14, 16, 7))#candidate|39|(14, 16, 7)|var|float64
uop_40 = relay.log10(var_39.astype('float64')) # shape=(14, 16, 7)
bop_45 = relay.logical_or(var_39.astype('bool'), relay.reshape(uop_40.astype('bool'), relay.shape_of(var_39))) # shape=(14, 16, 7)
output = relay.Tuple([bop_45,])
output2 = relay.Tuple([bop_45,])
func_64 = relay.Function([var_39,], output)
mod['func_64'] = func_64
mod = relay.transform.InferType()(mod)
mutated_mod['func_64'] = func_64
mutated_mod = relay.transform.InferType()(mutated_mod)
var_65 = relay.var("var_65", dtype = "float64", shape = (14, 16, 7))#candidate|65|(14, 16, 7)|var|float64
func_64_call = mutated_mod.get_global_var('func_64')
call_66 = func_64_call(var_65)
output = call_66
func_67 = relay.Function([var_65], output)
mutated_mod['func_67'] = func_67
mutated_mod = relay.transform.InferType()(mutated_mod)
var_118 = relay.var("var_118", dtype = "uint8", shape = (7, 6, 11))#candidate|118|(7, 6, 11)|var|uint8
var_119 = relay.var("var_119", dtype = "uint8", shape = (7, 6, 11))#candidate|119|(7, 6, 11)|var|uint8
bop_120 = relay.greater(var_118.astype('bool'), relay.reshape(var_119.astype('bool'), relay.shape_of(var_118))) # shape=(7, 6, 11)
func_64_call = mod.get_global_var('func_64')
func_67_call = mutated_mod.get_global_var('func_67')
const_124 = relay.const([-9.986018,0.587057,-1.037621,-1.506269,-3.982447,-4.721859,-3.826196,-5.165350,-0.433479,4.597451,-0.965072,-6.496909,2.519652,2.056665,-8.316285,-7.509254,0.012242,-4.262686,0.753907,-5.385241,-4.675092,-8.706650,-7.562300,4.145132,-1.188432,-1.630183,-4.650004,-9.296177,-8.726862,9.655386,-7.676517,5.701276,7.205048,3.997987,-6.419097,-7.865708,5.858347,2.731340,9.486314,-5.894396,2.271611,-1.445322,2.105534,8.563779,7.440992,-5.446531,3.239276,9.321332,7.655388,4.582976,-1.658588,-5.386540,6.095873,9.628958,9.491831,-4.655667,-3.688945,-8.095469,4.284003,8.013919,-0.781255,-9.446755,6.497641,-8.979620,4.921430,-7.216907,6.252037,1.851616,-5.935927,-9.837918,-7.602033,6.455627,8.631421,-5.956641,1.196597,9.764404,0.335648,8.487136,0.476921,-4.091433,-6.397692,-4.733365,0.882067,-6.780543,-0.046531,3.801121,4.028274,-1.476409,9.258421,-3.893084,-4.037747,-5.291250,8.410447,2.962328,-9.297705,3.789171,-7.995592,-6.615762,9.020841,-2.838838,8.313575,-6.943308,-3.298174,-1.325369,4.786581,-0.668778,-2.734521,-0.848771,9.400749,1.151367,0.655520,-0.857678,-3.745912,5.483660,6.411497,-1.817464,-8.316504,4.821350,9.070305,-3.301046,-2.516097,-5.349107,2.751042,3.052832,-6.309507,-9.603583,3.460738,-1.000373,-7.130400,-9.926858,0.328240,-6.791562,9.463401,-2.766171,7.585758,-4.268349,6.192897,0.147891,8.150409,1.930123,9.180305,3.736182,-3.984160,-2.883746,9.741334,-3.884462,2.498832,-0.191696,8.032155,6.243582,0.253946,-5.813758,8.777819,-0.009488,-3.778528,-0.943204,4.906226,0.862509,0.100230,-9.270531,-9.910184,9.245368,-3.160213,-6.182431,-4.990662,-1.657125,5.358129,3.415479,-6.663176,3.388497,3.277177,-7.666601,6.729979,1.839764,-6.168075,-3.430277,-4.827280,-7.510840,7.099595,-9.462945,6.825587,-3.942867,-7.112982,6.288752,6.165858,5.183754,-3.331163,6.766893,0.351399,4.660976,6.133093,-7.416659,0.905275,-8.617075,-8.425917,2.431391,8.895008,-3.745984,8.400296,2.351483,0.186322,7.087305,-9.374165,3.441790,7.847185,8.074382,-3.053478,1.989853,5.319791,3.141003,-5.157394,5.600229,-2.959964,8.415584,2.281949,-8.898667,-9.180979,-3.828884,-0.941760,-3.789101,-0.162250,-3.290143,-6.468935,4.631599,6.227926,8.009126,3.570607,-3.348573,-8.492707,0.872542,-7.340029,-4.901802,2.297684,8.393737,9.983395,-4.037885,-5.887271,-7.447964,-1.822677,-7.614894,-1.315576,8.931866,-3.932558,7.185350,-2.348817,-6.105061,-2.557072,1.067109,2.679109,-6.532772,-3.780732,5.386329,5.460558,9.621060,0.470774,-0.236245,8.154187,3.408083,4.880948,6.892615,6.453340,-0.449580,-0.077960,2.438432,-9.426361,-6.077882,-1.197800,2.178753,-1.344065,5.005402,-4.316741,5.095427,-7.265489,1.605709,-0.248721,9.142415,-7.610955,6.288552,2.454207,0.336459,-5.440509,-3.629831,3.065197,4.784502,1.410739,8.946726,-0.984971,2.901713,3.774417,-3.159110,7.128805,3.641666,2.257632,7.828931,0.698533,-4.808722,-5.626986,0.598163,3.342119,6.683135,8.284629,-4.970997,-1.193129,-2.524522,4.416180,7.663451,-0.303981,-0.035458,8.065108,-1.661800,-7.091970,2.863477,-9.506174,-1.595596,9.208890,-3.272547,-6.612417,-5.381921,-6.067859,-0.386945,7.362332,0.151730,-7.105359,7.382941,1.803217,6.945115,-6.282728,-0.938411,3.776929,-1.157837,3.820474,1.339289,-7.399779,-4.274631,5.584381,-6.018551,-6.961548,-5.118655,7.229081,-4.638072,-5.381457,5.104490,-9.296352,3.563902,-6.436823,-1.464400,-8.188659,-8.594219,0.520343,8.758193,2.642481,5.650421,7.311572,3.227165,8.865039,1.636204,6.839719,1.342661,5.708892,7.428414,-4.061056,8.355751,5.154323,2.739378,-5.023690,1.857353,-4.127454,6.273107,4.405351,9.559472,-5.530873,-0.265346,1.475575,-5.945757,-1.436091,-5.452007,5.421756,2.096117,2.041087,-7.926393,0.272543,-3.518637,-7.435581,-7.252205,-0.247585,1.175465,-5.116945,-7.401874,9.118630,-2.614958,-9.693039,-9.502819,-8.670864,-2.860547,2.527885,0.536323,6.469304,-3.597481,0.931366,2.819851,-6.880338,4.527488,-0.678834,-2.495530,-2.936061,2.833005,-6.532045,-9.902510,5.807716,-6.570176,9.646901,7.788273,9.183795,3.791988,-5.658972,-5.995147,5.910923,-9.150805,5.560015,7.116243,1.251268,-0.352490,-5.900392,1.901399,-4.748764,-1.566869,3.964422,-2.639380,-0.141724,-3.054122,-6.280098,2.860374,-8.247479,2.015253,7.314261,2.627566,4.352999,-1.640893,-0.672443,7.051560,4.240859,4.044530,0.734652,-6.917560,9.452674,1.881057,4.274329,1.847530,-6.894794,-9.401268,6.525249,-3.374365,1.243108,-4.883668,-3.026125,-2.756648,-9.391767,8.316358,7.911251,4.196066,-9.897974,-2.972583,6.755588,5.250262,-8.464831,5.456222,1.737670,-0.936071,-2.051001,-2.740136,-0.845859,0.725584,-9.462523,0.186341,-2.980539,-5.437617,9.220849,-0.843962,-1.096780,-6.971693,9.993551,-8.308090,1.616735,-5.312801,-3.077845,7.860676,1.444759,5.090209,1.590539,-6.668704,2.840116,-5.682393,2.912398,1.483338,-2.504379,8.711255,-3.528915,-0.804137,-8.113653,5.629238,2.985348,-0.782853,5.706412,0.231862,-1.830223,-2.106707,-5.086009,-6.646830,-8.093173,-3.660729,1.330488,-5.521944,7.718863,0.279799,8.022404,-1.335725,6.830296,-1.989894,-2.507458,5.854193,4.293180,-6.143252,-2.937878,4.025857,8.303202,1.068197,2.984202,-1.097890,-9.767233,9.767449,-7.907642,5.167533,-3.175688,3.474773,0.039419,0.858703,-1.253108,-7.794566,-8.328765,2.072278,2.653600,-9.561178,5.576825,-9.469338,-5.059191,5.728124,5.661271,7.979951,-3.253342,1.662703,7.791370,-8.502985,-2.178645,1.574817,4.419600,-6.453792,5.138913,0.168459,1.469772,7.132881,8.220976,0.110531,6.185595,-5.526028,8.608066,5.509371,-5.890932,-5.615631,-7.101937,8.124380,6.772813,2.928516,-9.640498,0.729555,-5.337200,-0.946804,3.928866,-9.454018,-8.736472,2.686946,-2.813881,-9.145565,-6.663568,-0.938134,-9.551724,-3.339574,3.477549,2.792925,1.795504,-9.921638,9.373222,4.010586,-6.425630,8.816477,7.458637,-3.716527,8.613789,-7.480232,6.459014,-0.700269,3.405702,1.275190,-8.304928,-5.286616,0.140459,8.375213,2.425235,-1.130426,6.821745,-4.262950,-3.731568,-8.525625,-2.188351,0.891760,2.243064,7.969384,0.245100,-4.581696,0.334853,4.059136,3.432917,2.132100,1.395173,-2.644187,9.564665,6.355793,2.339164,5.901235,4.772872,7.909224,2.230800,9.787747,-8.622620,-3.790965,-5.784928,-1.300918,7.591124,2.410654,8.956847,8.680706,-7.294194,-9.785780,-3.621669,0.527069,1.276486,6.270937,-7.740868,0.660580,-2.496257,-3.597342,3.212051,-7.359699,2.936975,9.894723,0.217026,5.039736,-3.331282,0.217807,-3.660594,-2.930637,5.685617,-3.937154,-5.343795,-7.448406,9.569771,6.198451,-9.472494,9.635412,4.774569,-1.395097,6.977190,6.990106,-4.782582,2.875627,6.923581,-7.013447,0.692995,-1.859372,-4.606242,-2.436327,-0.208176,-7.870904,1.297969,-7.269120,-9.898069,0.491852,-6.370646,1.959806,0.162827,2.325686,-6.775956,6.705647,-9.535192,2.390050,9.843244,5.559296,-7.315468,-6.950209,5.055374,-0.820520,0.950059,-4.481616,-9.294023,-9.741333,-5.816545,8.092880,2.786231,-3.016818,-8.156073,-6.157614,1.457786,5.448891,2.399813,2.803476,-6.728026,1.198396,1.890952,-5.452727,8.821491,9.212057,-2.173884,6.480233,4.797075,-3.363863,0.074767,0.766268,-1.448393,-1.750592,-4.119402,-2.397194,-2.745148,7.556488,4.886213,7.379275,-5.689059,-9.860714,0.025897,3.118012,1.468406,3.254955,-5.014731,7.257009,4.779783,3.068019,3.747044,6.805989,5.289458,7.768733,-3.469266,9.965348,2.212678,7.730528,7.534938,-6.456484,-8.387953,-0.797019,-3.826575,0.628981,6.280157,-4.056657,2.428078,-5.474889,-4.347955,7.443506,4.566455,6.609563,5.744759,1.572369,3.060494,6.127066,8.947672,4.803214,-5.708231,-9.784150,4.149923,-1.438298,-0.487888,8.945672,7.252658,3.167307,0.326853,0.565112,1.911326,-3.017424,-5.072838,8.897640,7.996750,-1.772947,0.833496,6.097266,5.577391,4.788364,2.442030,-9.765510,-3.874694,7.880184,-3.113595,-0.645212,0.721821,8.275963,-6.758258,-8.465542,3.745848,6.886484,7.531817,2.891697,4.625256,-6.499096,2.286086,3.346053,-4.441363,4.008456,0.577114,-2.383749,-2.974132,9.983816,-1.470093,-4.730843,-8.011539,6.087168,6.121627,-1.802129,6.153600,7.035280,5.690204,-2.900319,2.802223,-1.859092,4.893861,5.295371,-0.550669,3.449262,-8.010944,-1.507467,9.606144,-5.477920,-1.411998,0.947630,9.072081,-7.808580,4.171785,-1.578185,9.128046,-5.086330,-0.773266,-3.493375,-8.287251,2.016115,-5.868089,9.162744,3.410556,-5.143764,-8.699422,-4.921229,-9.221437,-2.947632,5.598524,-5.632633,0.712325,-6.191674,-4.280536,9.464515,-0.465571,-7.967065,-1.156774,-6.788563,4.176868,-4.868034,2.362118,-7.348046,9.261664,0.798438,9.702338,7.206507,-5.007971,-3.878712,0.102657,7.251425,6.502271,-6.680084,7.456699,8.924483,8.822039,-1.375761,-0.275808,-8.665825,8.868488,9.968153,1.725393,-9.808044,-7.270419,-0.201016,-9.906045,8.583396,4.106118,1.519774,-2.601671,-0.826363,-8.896134,-4.126819,9.320983,1.186360,0.901137,0.909744,8.518700,-0.076045,1.250310,4.223942,0.575931,3.629571,-7.129288,9.505116,5.211096,-6.980238,4.006285,8.284194,7.474195,4.036870,5.999964,2.743239,-3.864016,-0.582085,8.893839,6.512870,-8.329526,7.371186,-3.839792,2.872294,-7.196251,4.093311,1.065426,-8.505663,9.248762,3.600237,6.648825,-2.039670,-0.962578,3.268306,-4.789870,-9.079486,3.249529,-4.223596,5.476843,0.368933,9.006519,0.953102,1.527120,-6.861788,2.079688,1.290489,-8.750739,1.378767,-7.712189,-1.824648,8.664623,3.805015,6.825107,-5.203306,-5.302548,-2.287148,7.891639,-6.659637,-5.938617,2.813970,-1.120229,-3.529322,-1.221579,2.889391,-1.119961,-3.292216,5.931398,-2.737839,1.574417,7.185625,-2.791936,4.440036,1.021586,6.086577,-5.308407,7.758592,3.456727,-8.502589,5.162951,5.295682,2.474816,-6.010240,7.645892,1.904651,7.425863,-9.045122,4.444659,7.797806,1.302937,-7.473191,-9.018186,-1.718597,4.260941,6.892878,7.041768,-9.829808,-2.086993,6.968611,1.507814,-0.138720,6.043276,-7.537283,0.579109,8.587570,-2.544599,-8.396869,1.398505,1.546495,7.867103,-4.736194,0.336270,-5.189533,9.587750,8.152010,-7.146777,9.940531,9.799397,-2.396566,-8.631561,7.479847,6.249084,2.845184,8.551940,5.842211,3.564307,5.644462,-1.557970,5.905516,7.684638,-4.862770,-9.581922,0.373980,-4.876320,-2.069145,8.728214,1.896183,-5.622762,1.868167,0.478688,-1.690112,-7.094003,4.557409,9.256604,-2.584392,-3.033193,1.414170,0.051108,-3.399306,-3.939752,-0.205349,-7.271457,1.420269,-2.374137,-0.630739,7.494161,-5.877269,-8.396564,0.308284,-3.413029,-6.191579,-7.335560,-0.981464,-4.428961,2.870604,7.851913,-0.209982,-5.502021,-2.012749,7.056898,-7.964808,-9.177832,-5.536186,4.991810,-5.792151,-9.785704,-7.581931,-7.006222,-9.370920,4.052798,-2.238931,9.513694,-8.491640,-4.542851,-5.899823,-0.663799,-2.161553,6.290474,8.989651,-3.291274,4.434801,2.574545,-8.837546,-9.692689,-3.705427,-9.726479,-5.995132,-2.129261,1.148242,-1.317739,-6.399498,9.644330,5.673860,8.500415,6.138384,-9.244741,-3.225430,-9.951766,-3.950657,8.829831,-6.608933,4.107171,2.022253,8.269915,-2.200885,-9.442458,-4.594276,9.128509,5.381500,8.873279,8.264741,4.492944,8.407063,-9.709035,-5.140597,-7.294003,0.021781,3.226858,2.899156,-2.369254,-2.577845,-3.025555,-9.003285,-9.393050,7.591333,-8.021061,-5.446364,-5.466505,4.681474,6.526875,6.951069,-4.313518,2.997592,2.640116,-1.272234,-0.653874,8.256231,-9.209196,-1.336684,0.138132,-3.123135,-1.563570,3.575630,-2.794452,2.354786,-1.116773,5.210966,-0.256687,-7.379713,-1.949586,7.657340,-8.580230,2.098540,-1.535494,9.934758,1.297035,4.681069,-8.710435,3.835040,7.870051,-3.841677,8.490707,-5.185764,-1.458339,5.825177,0.362886,2.583725,6.696169,-1.043194,7.598223,4.317081,2.170031,-4.682432,9.224792,-8.483905,7.819101,-7.301310,5.679215,-3.410476,-9.997409,-9.484243,-7.275880,8.220688,-4.745492,8.627705,5.697771,5.878096,4.996396,6.303460,6.702243,0.288485,-4.236241,1.885501,-4.256057,-3.964336,1.640206,-0.860742,-0.786647,-8.098918,-6.904561,-6.932034,-8.291523,-1.216764,-9.808038,6.634129,-3.671664,-6.134466,-4.840830,-4.811736,8.631981,0.140865,6.443310,-2.801681,5.192136,-9.924496,-0.541604,-9.904638,-8.023965,-5.073651,-8.425269,-5.805704,-3.100469,8.906090,-1.168482,4.371491,-0.980311,6.695156,-2.451447,-8.810956,-7.681003,6.856074,5.561427,7.755738,5.431391,-7.314139,4.608709,-5.087977,9.577435,6.199848,2.711943,2.173601,6.390168,9.013867,-4.193223,-4.834095,-0.198577,3.250431,0.307241,-9.448218,-6.308214,-8.586566,0.968548,0.794677,-2.034506,1.605424,6.069874,-6.252260,8.747517,7.792741,8.059478,-7.629126,7.823730,5.484935,-1.122446,4.057566,3.540543,2.126176,-9.298280,7.631680,2.006231,-9.470853,-8.878237,8.495800,-5.651042,8.224271,-1.788754,-8.120928,-2.791618,-6.501857,7.113395,8.348811,0.315581,7.865695,-8.610613,1.887022,6.665649,-4.449562,-4.008812,9.789438,-3.094404,-5.887122,-1.840568,1.403358,-5.261681,-5.344050,0.364898,-6.077156,-3.540555,8.986808,1.663834,-3.679145,-4.739699,-9.107096,-7.155341,-6.510314,-9.815216,-6.823726,8.966379,4.810710,6.634803,5.841880,-0.105271,-9.002100,3.258149,4.894776,-8.527189,-4.462036,-5.409878,4.991194,-2.813927,-6.652523,-7.924643,-1.500282,-4.318018,4.764353,9.974944,-9.453431,8.342042,-1.017079,-4.678340,3.739079,3.580487,-2.200712,-2.181233,-4.237253,2.734900,9.030556,7.271390,0.428556,-0.186794,-4.476396,8.651248,1.521445,4.087355,8.526652,0.807334,-1.648244,-8.539683,-6.536071,-9.351365,-0.952277,7.311770,3.853630,5.560394,-8.487241,9.992816,4.393701,-5.448549,9.151824,-7.483573,2.019423,9.358671,-0.456902,-8.355188,-0.298104,9.357918,-2.135373,1.315877,-1.528339,-3.570242,-6.920413,0.809330,-8.198951,-8.076485,2.087399,0.469425,-9.186529,-7.395350,-9.737027,1.681565,8.424216,2.150249,-5.249867,0.988521,4.717320,9.478270,6.888919,3.981420,-5.916865,-9.478877,-4.683078,7.715638,-5.022298,3.890403,-3.847221,-3.087612,-5.471200,-1.885874,-3.002858,4.510850,6.631342,4.904417,0.291561,7.952792,-4.406011,8.378642,3.531330,4.248246,-9.531250,-9.155627,1.129495,-6.770866,7.744057,-3.814245,-6.178953,6.974974,1.643111,-4.769956,-0.572940,-8.345533,9.628549,6.579095,-0.990794,9.168545,-2.509010,-2.835539,-3.846649,3.203638,5.103780,6.558983,8.540516,4.954869,8.877227,7.716023,3.793289,-0.122827,1.162092,5.514429,-5.598204,-9.081395,0.669391,-6.321193,7.515811,5.148947,-4.377479,-9.590896,1.102254,-8.631727,3.334952,-7.047734,3.654654,-5.936990,8.566413,8.540200,-6.337197,-3.378430,-5.968684,6.282509,-3.419217,-3.533169,6.013058,-5.057176,-7.785549,6.571467,-5.353770,4.625250,-0.735187,-8.898000,8.754553,8.395295,6.012886,7.054002,-6.534897,5.873284,7.227859,3.929372,-8.943849,-3.335282,-1.155298,-1.925202,1.259704,6.219415,5.213533,6.847561,8.610604,-4.743700,-3.947704,-6.245815,-8.849997,8.372626,6.788139,-3.649777,-2.100872,-2.373025,-7.597855,1.534851,-5.231076,3.751285,-7.272302,5.515867,6.858765,-1.743913,3.083906,1.873340,-4.525229,-7.829980,4.939755,2.699745,1.517707,6.607955,4.962754,6.271674,7.612406,3.696388,-2.406978,4.150971,0.992232,8.382366,-7.380047,-3.163505,-3.234861,-4.121286,-5.274185,0.513438,7.930119,9.620242,-9.392791,2.878885,-9.641342,2.930085,7.861302,-6.438377,7.901107,6.209275,-2.776299,-9.811624,-5.149851,0.476943,6.219920,-6.077417,6.208088,2.859655,1.761288,7.709652,5.153673,-8.415308,7.227867,3.947548,-0.117440,-3.095770,4.503719,8.141489,6.914210,-3.699046,-4.217716], dtype = "float64")#candidate|124|(1568,)|const|float64
call_123 = relay.TupleGetItem(func_64_call(relay.reshape(const_124.astype('float64'), [14, 16, 7])), 0)
call_125 = relay.TupleGetItem(func_67_call(relay.reshape(const_124.astype('float64'), [14, 16, 7])), 0)
func_64_call = mod.get_global_var('func_64')
func_67_call = mutated_mod.get_global_var('func_67')
call_129 = relay.TupleGetItem(func_64_call(relay.reshape(call_123.astype('float64'), [14, 16, 7])), 0)
call_130 = relay.TupleGetItem(func_67_call(relay.reshape(call_123.astype('float64'), [14, 16, 7])), 0)
func_64_call = mod.get_global_var('func_64')
func_67_call = mutated_mod.get_global_var('func_67')
call_140 = relay.TupleGetItem(func_64_call(relay.reshape(const_124.astype('float64'), [14, 16, 7])), 0)
call_141 = relay.TupleGetItem(func_67_call(relay.reshape(const_124.astype('float64'), [14, 16, 7])), 0)
func_64_call = mod.get_global_var('func_64')
func_67_call = mutated_mod.get_global_var('func_67')
call_142 = relay.TupleGetItem(func_64_call(relay.reshape(call_129.astype('float64'), [14, 16, 7])), 0)
call_143 = relay.TupleGetItem(func_67_call(relay.reshape(call_129.astype('float64'), [14, 16, 7])), 0)
const_160 = relay.const([[[False,True,True,False,False,False,True],[True,False,True,False,True,False,True],[False,True,True,True,True,True,False],[False,True,True,False,False,True,False],[False,True,False,False,True,True,False],[True,False,True,False,False,False,False],[True,True,True,False,False,False,True],[True,True,True,False,False,True,False],[True,False,False,True,True,False,True],[False,False,True,True,False,False,True],[False,False,True,True,True,False,True],[True,True,False,True,False,False,True],[True,True,True,False,True,True,True],[False,True,False,True,True,True,False],[True,True,False,True,True,True,True],[True,False,False,False,True,True,True]],[[True,True,False,False,False,True,False],[True,False,True,True,False,True,False],[True,False,True,True,True,True,False],[True,False,True,False,False,False,False],[True,True,False,True,False,False,True],[False,False,False,True,False,True,False],[False,True,True,False,True,False,True],[True,True,True,False,True,True,False],[False,True,False,True,False,False,False],[False,True,False,False,True,False,True],[True,True,True,False,False,False,False],[False,False,True,True,True,False,True],[True,True,True,True,False,True,False],[False,False,True,False,True,True,False],[False,True,True,True,False,True,True],[True,True,True,True,False,False,False]],[[True,True,True,False,False,False,True],[True,True,False,True,True,True,False],[False,False,False,False,True,False,False],[True,True,True,False,False,True,True],[False,True,True,False,False,False,False],[True,False,False,False,False,False,True],[True,True,True,False,True,False,False],[False,False,False,True,True,False,False],[True,True,True,False,False,True,False],[True,True,False,False,False,False,False],[False,False,True,True,True,True,True],[False,True,False,False,True,False,False],[False,False,False,True,True,True,True],[False,False,True,True,False,False,True],[False,False,True,False,True,False,True],[False,True,True,True,False,True,True]],[[True,True,True,True,False,True,True],[True,True,False,True,True,False,False],[True,False,True,True,False,False,True],[True,True,True,False,False,False,True],[True,True,False,False,False,False,False],[False,True,True,False,False,True,True],[False,True,False,True,True,True,True],[False,False,False,True,True,True,True],[True,True,False,False,False,True,True],[True,True,True,True,False,False,True],[True,True,True,True,True,True,False],[False,False,True,False,False,False,False],[True,True,True,True,True,False,True],[True,True,False,False,False,True,False],[False,True,True,True,True,False,False],[False,True,True,False,False,False,True]],[[False,False,True,False,False,False,True],[True,False,False,False,True,True,True],[True,False,True,False,False,False,True],[True,True,False,True,False,True,True],[False,True,False,True,False,True,True],[False,False,False,True,False,False,True],[False,True,False,True,False,True,True],[False,False,True,True,True,True,False],[True,False,True,False,True,False,True],[True,True,False,True,True,False,False],[False,False,False,False,False,False,True],[False,False,True,False,False,False,True],[True,True,True,False,True,False,False],[False,False,True,False,False,True,True],[True,True,False,True,False,False,True],[False,False,True,False,False,False,False]],[[False,False,True,True,True,False,False],[False,False,False,False,True,False,False],[True,True,False,False,True,False,False],[True,False,True,True,False,False,True],[True,False,True,True,False,False,True],[True,False,True,True,False,True,False],[True,True,False,False,True,False,True],[False,False,True,True,False,False,False],[True,True,True,False,True,False,True],[False,False,False,True,False,True,True],[False,True,True,False,False,True,False],[True,False,True,True,False,False,False],[True,True,False,False,False,True,False],[True,True,True,True,True,False,True],[True,True,False,False,False,True,False],[True,False,False,False,False,False,False]],[[True,False,False,False,True,True,False],[True,False,False,True,False,True,False],[True,True,True,True,True,True,True],[True,False,True,False,True,True,True],[True,True,True,False,False,True,False],[True,False,False,True,True,False,False],[True,False,False,False,True,False,True],[False,True,False,False,False,True,False],[True,True,True,False,False,False,True],[False,False,True,False,False,False,True],[True,False,True,False,False,True,True],[False,True,False,False,True,True,False],[True,False,True,False,True,False,False],[False,True,True,False,True,True,False],[True,True,True,True,True,False,True],[False,False,False,False,True,True,False]],[[False,False,True,True,False,False,True],[False,False,False,False,True,True,False],[False,False,True,False,True,False,True],[True,True,False,True,True,True,True],[False,False,True,True,False,False,False],[False,False,False,False,True,False,False],[False,True,True,True,False,False,True],[True,False,False,False,True,False,True],[False,True,False,True,True,False,False],[True,False,False,False,True,False,False],[False,False,True,False,False,False,True],[False,False,False,True,False,False,False],[False,True,True,False,False,False,True],[False,False,True,True,False,False,True],[True,False,False,True,True,True,False],[True,True,True,True,True,False,False]],[[True,False,False,True,True,False,False],[False,False,True,False,False,True,True],[False,True,True,False,True,True,True],[False,False,True,True,True,True,False],[False,True,True,True,True,True,True],[True,True,True,True,True,False,True],[True,True,False,False,False,True,False],[False,False,True,False,False,True,False],[True,False,False,True,True,True,True],[False,True,False,True,False,True,False],[False,True,True,True,True,False,True],[True,True,True,True,False,True,False],[False,False,False,False,False,False,True],[True,False,False,True,True,False,True],[True,True,True,True,True,True,True],[False,True,False,True,False,False,True]],[[False,True,True,True,True,True,True],[True,True,False,False,True,True,True],[False,True,False,False,True,False,True],[False,True,False,False,False,True,True],[False,True,False,True,False,True,False],[True,False,True,False,False,True,False],[True,False,True,False,False,False,False],[True,False,True,True,True,False,True],[True,True,False,True,False,True,False],[False,False,False,True,True,True,True],[True,True,True,False,True,False,False],[True,False,False,False,False,False,True],[True,False,False,False,True,True,False],[True,False,False,True,False,True,False],[True,False,True,False,True,False,True],[True,False,True,False,True,False,True]],[[True,False,False,True,False,True,True],[True,False,True,False,False,False,True],[False,True,True,False,True,False,False],[True,False,True,False,False,True,False],[True,True,True,True,True,False,False],[True,True,True,False,True,True,False],[True,True,True,True,False,False,True],[True,False,False,False,False,True,False],[False,False,True,False,True,False,True],[False,False,True,True,True,False,True],[False,True,True,True,False,False,True],[False,False,False,False,False,False,False],[False,False,True,True,False,False,True],[False,False,False,False,True,True,False],[False,True,True,True,True,True,False],[True,True,True,False,False,False,False]],[[False,False,False,True,False,True,False],[True,True,True,True,False,True,True],[True,False,True,True,True,True,False],[False,False,True,False,True,False,False],[True,False,False,False,True,False,True],[True,False,True,False,True,False,True],[True,True,True,False,True,False,False],[False,True,False,True,True,True,True],[True,False,True,False,False,True,False],[True,True,True,True,True,False,True],[True,False,True,False,True,False,True],[False,False,True,True,False,True,False],[True,True,True,False,True,False,True],[True,True,True,True,False,True,False],[False,True,True,True,False,False,True],[True,False,False,False,True,True,True]],[[True,True,True,False,False,False,True],[True,False,False,False,True,True,True],[True,False,True,True,False,True,False],[False,True,False,True,False,False,True],[True,False,False,False,True,True,False],[True,True,True,False,True,True,False],[False,True,False,False,True,True,True],[True,False,False,True,False,False,True],[False,False,False,True,False,True,True],[True,False,True,False,False,True,False],[True,False,True,False,True,True,False],[True,False,True,False,True,True,False],[True,True,True,True,False,True,False],[False,False,True,False,True,False,False],[True,True,True,False,False,False,False],[True,True,False,False,True,False,True]],[[False,True,True,True,True,False,False],[True,True,False,True,False,True,True],[True,False,False,False,True,True,False],[True,True,True,True,False,True,True],[True,True,False,False,True,True,True],[False,True,False,True,True,False,False],[True,False,False,False,False,False,False],[True,True,False,True,False,True,False],[False,True,True,True,False,False,True],[True,True,True,True,True,True,False],[False,True,True,True,True,True,True],[True,True,True,True,False,True,False],[False,True,False,False,False,True,True],[False,True,True,False,True,False,True],[False,True,False,False,False,True,True],[False,False,False,True,True,True,False]]], dtype = "bool")#candidate|160|(14, 16, 7)|const|bool
bop_161 = relay.minimum(call_129.astype('float32'), relay.reshape(const_160.astype('float32'), relay.shape_of(call_129))) # shape=(14, 16, 7)
bop_164 = relay.minimum(call_130.astype('float32'), relay.reshape(const_160.astype('float32'), relay.shape_of(call_130))) # shape=(14, 16, 7)
output = relay.Tuple([bop_120,call_123,const_124,call_140,call_142,bop_161,])
output2 = relay.Tuple([bop_120,call_125,const_124,call_141,call_143,bop_164,])
func_165 = relay.Function([var_118,var_119,], output)
mod['func_165'] = func_165
mod = relay.transform.InferType()(mod)
mutated_mod['func_165'] = func_165
mutated_mod = relay.transform.InferType()(mutated_mod)
func_165_call = mutated_mod.get_global_var('func_165')
var_167 = relay.var("var_167", dtype = "uint8", shape = (7, 6, 11))#candidate|167|(7, 6, 11)|var|uint8
var_168 = relay.var("var_168", dtype = "uint8", shape = (7, 6, 11))#candidate|168|(7, 6, 11)|var|uint8
call_166 = func_165_call(var_167,var_168,)
output = call_166
func_169 = relay.Function([var_167,var_168,], output)
mutated_mod['func_169'] = func_169
mutated_mod = relay.transform.InferType()(mutated_mod)
const_224 = relay.const([[[5]],[[1]],[[2]],[[1]],[[1]],[[-4]],[[5]],[[3]],[[10]],[[-3]],[[7]],[[2]],[[-8]]], dtype = "uint64")#candidate|224|(13, 1, 1)|const|uint64
var_225 = relay.var("var_225", dtype = "uint64", shape = (13, 15, 1))#candidate|225|(13, 15, 1)|var|uint64
bop_226 = relay.bitwise_or(const_224.astype('uint64'), var_225.astype('uint64')) # shape=(13, 15, 1)
func_165_call = mod.get_global_var('func_165')
func_169_call = mutated_mod.get_global_var('func_169')
const_236 = relay.const([[9,4],[-4,2],[-8,9],[-3,-10],[-5,-3],[2,-5],[2,9],[1,6],[7,-7],[4,-8],[-2,-10],[-3,7],[5,-4],[3,5],[5,-7],[-9,8],[3,-6],[-5,-1],[1,-1],[2,-2],[-2,-3],[8,-8],[-1,-3],[10,-6],[-7,9],[-9,10],[-2,6],[-10,10],[-7,-7],[-10,-1],[-2,3],[6,-4],[-4,-6],[5,-6],[-6,2],[1,8],[-4,6],[-9,-7],[9,-2],[1,-7],[-3,9],[8,7],[-8,-10],[1,-8],[2,-9],[10,2],[5,-4],[4,-3],[-6,-4],[-10,8],[2,-8],[5,-5],[9,-8],[9,-8],[-7,-3],[6,7],[10,8],[-2,9],[-6,6],[2,-10],[3,-10],[9,-7],[10,5],[-7,2],[4,1],[-8,-2],[7,8],[9,-10],[6,-5],[8,9],[-5,8],[9,-1],[-9,10],[3,4],[2,-9],[7,-3],[1,-8],[-3,9],[-3,10],[-6,-6],[-5,4],[2,10],[-9,-3],[2,1],[-6,-4],[-6,-9],[-1,-3],[-1,-4],[9,8],[8,-5],[1,-5],[-6,6],[-5,-2],[-5,-2],[-1,-3],[-5,-3],[-7,-6],[-9,1],[-9,-2],[-5,8],[1,1],[-3,2],[9,8],[-4,-10],[2,-5],[-7,10],[3,4],[2,-7],[3,9],[-10,-4],[8,-5],[-3,-3],[-1,5],[-5,7],[-8,-7],[2,-5],[2,3],[-9,-3],[8,-1],[-2,-5],[5,2],[-6,-9],[9,-9],[9,-6],[-2,-5],[7,-7],[-5,-6],[-5,10],[3,-1],[3,7],[5,1],[-10,7],[5,2],[-9,6],[9,2],[5,5],[6,-10],[5,10],[-1,-6],[-7,2],[4,-5],[3,8],[5,8],[-6,9],[1,2],[7,6],[1,9],[-4,2],[-7,10],[8,3],[-1,-3],[-6,-8],[4,-2],[2,-8],[-1,-2],[10,-2],[1,-6],[-3,-10],[2,1],[10,4],[9,-4],[6,-5],[9,-2],[3,5],[-8,-1],[-1,-3],[-8,2],[4,-3],[-4,8],[-1,8],[10,10],[-4,7],[7,10],[1,-3],[-10,9],[3,-10],[9,6],[1,-9],[-4,4],[5,7],[-1,9],[2,1],[9,7],[1,6],[3,9],[7,-5],[-8,-8],[-2,2],[4,5],[7,8],[-7,-5],[-10,6],[4,9],[3,4],[-5,-4],[-7,-10],[10,-7],[-3,-3],[9,7],[-9,-5],[10,6],[-8,-7],[-3,1],[7,-1],[7,6],[-4,-10],[-4,-4],[-4,10],[5,-1],[8,-7],[1,3],[9,7],[-3,-8],[1,-1],[9,-2],[6,-8],[7,5],[9,8],[-2,-8],[-4,-9],[-9,3],[-8,-6],[10,9],[9,-7],[9,6],[4,6],[3,-6],[-8,-4],[-5,6],[3,-10],[2,-9]], dtype = "uint8")#candidate|236|(231, 2)|const|uint8
call_235 = relay.TupleGetItem(func_165_call(relay.reshape(const_236.astype('uint8'), [7, 6, 11]), relay.reshape(const_236.astype('uint8'), [7, 6, 11]), ), 2)
call_237 = relay.TupleGetItem(func_169_call(relay.reshape(const_236.astype('uint8'), [7, 6, 11]), relay.reshape(const_236.astype('uint8'), [7, 6, 11]), ), 2)
output = relay.Tuple([bop_226,call_235,const_236,])
output2 = relay.Tuple([bop_226,call_237,const_236,])
func_241 = relay.Function([var_225,], output)
mod['func_241'] = func_241
mod = relay.transform.InferType()(mod)
mutated_mod['func_241'] = func_241
mutated_mod = relay.transform.InferType()(mutated_mod)
var_242 = relay.var("var_242", dtype = "uint64", shape = (13, 15, 1))#candidate|242|(13, 15, 1)|var|uint64
func_241_call = mutated_mod.get_global_var('func_241')
call_243 = func_241_call(var_242)
output = call_243
func_244 = relay.Function([var_242], output)
mutated_mod['func_244'] = func_244
mutated_mod = relay.transform.InferType()(mutated_mod)
const_565 = relay.const([[[5],[2],[-4],[-6],[3],[7],[9],[10],[7],[6],[6],[5]],[[-5],[2],[10],[-7],[-9],[1],[-5],[6],[4],[-5],[-3],[4]],[[7],[-9],[3],[-8],[3],[-4],[-3],[-7],[9],[8],[4],[-4]],[[-7],[1],[4],[-3],[-7],[-1],[-6],[-9],[-10],[3],[-3],[8]],[[8],[-7],[-1],[-3],[10],[2],[1],[-4],[-6],[9],[5],[-3]],[[10],[-10],[6],[-6],[-5],[-7],[4],[7],[-3],[-9],[-2],[3]],[[7],[2],[-9],[-6],[-2],[-1],[-4],[3],[7],[-6],[-1],[8]],[[-9],[10],[-9],[1],[-4],[-7],[9],[1],[10],[2],[-6],[3]],[[-4],[-6],[-9],[-10],[-1],[-2],[-1],[6],[8],[-10],[9],[-10]],[[1],[2],[6],[3],[-6],[6],[-5],[-6],[7],[9],[-2],[5]]], dtype = "int32")#candidate|565|(10, 12, 1)|const|int32
var_566 = relay.var("var_566", dtype = "int32", shape = (10, 12, 16))#candidate|566|(10, 12, 16)|var|int32
bop_567 = relay.subtract(const_565.astype('int32'), var_566.astype('int32')) # shape=(10, 12, 16)
func_241_call = mod.get_global_var('func_241')
func_244_call = mutated_mod.get_global_var('func_244')
const_576 = relay.const([7,1,6,-2,-7,-8,-8,-5,7,-7,-9,-7,7,8,-8,-7,-2,-9,-10,-7,-3,-4,-10,-5,-10,7,9,8,5,3,-5,-8,-9,-5,-7,8,7,-5,2,5,4,9,-8,-9,-3,6,-5,4,3,-2,4,-4,-1,-10,-9,-5,1,-8,3,1,2,-1,-2,-10,6,7,2,-3,-8,-8,-9,2,8,-8,7,-4,-5,-5,-2,3,-5,-8,-2,3,-3,9,-3,4,10,10,-9,6,3,-2,4,-3,-6,9,-3,7,1,-1,-8,-8,5,6,6,8,3,2,-5,-8,9,8,8,-9,-3,5,-5,10,3,-4,7,-6,-1,-8,7,-7,3,-10,1,10,-2,-7,-10,-5,-4,3,2,-4,10,-9,-9,-5,2,-3,-5,-8,10,3,2,-6,-8,8,8,3,3,7,10,4,5,6,-2,8,10,3,-3,6,8,3,5,6,-10,4,2,4,5,9,4,1,-3,6,3,-9,-10,-9,-8,5,-5,-8,6,6,1,1,5], dtype = "uint64")#candidate|576|(195,)|const|uint64
call_575 = relay.TupleGetItem(func_241_call(relay.reshape(const_576.astype('uint64'), [13, 15, 1])), 0)
call_577 = relay.TupleGetItem(func_244_call(relay.reshape(const_576.astype('uint64'), [13, 15, 1])), 0)
bop_582 = relay.greater_equal(bop_567.astype('bool'), relay.reshape(var_566.astype('bool'), relay.shape_of(bop_567))) # shape=(10, 12, 16)
func_165_call = mod.get_global_var('func_165')
func_169_call = mutated_mod.get_global_var('func_169')
var_587 = relay.var("var_587", dtype = "uint8", shape = (462,))#candidate|587|(462,)|var|uint8
call_586 = relay.TupleGetItem(func_165_call(relay.reshape(var_587.astype('uint8'), [7, 6, 11]), relay.reshape(var_587.astype('uint8'), [7, 6, 11]), ), 5)
call_588 = relay.TupleGetItem(func_169_call(relay.reshape(var_587.astype('uint8'), [7, 6, 11]), relay.reshape(var_587.astype('uint8'), [7, 6, 11]), ), 5)
uop_611 = relay.sqrt(var_566.astype('float64')) # shape=(10, 12, 16)
output = relay.Tuple([call_575,const_576,bop_582,call_586,var_587,uop_611,])
output2 = relay.Tuple([call_577,const_576,bop_582,call_588,var_587,uop_611,])
func_618 = relay.Function([var_566,var_587,], output)
mod['func_618'] = func_618
mod = relay.transform.InferType()(mod)
var_619 = relay.var("var_619", dtype = "int32", shape = (10, 12, 16))#candidate|619|(10, 12, 16)|var|int32
var_620 = relay.var("var_620", dtype = "uint8", shape = (462,))#candidate|620|(462,)|var|uint8
output = func_618(var_619,var_620,)
func_621 = relay.Function([var_619,var_620,], output)
mutated_mod['func_621'] = func_621
mutated_mod = relay.transform.InferType()(mutated_mod)
var_955 = relay.var("var_955", dtype = "int16", shape = (2, 10, 11))#candidate|955|(2, 10, 11)|var|int16
var_956 = relay.var("var_956", dtype = "int16", shape = (2, 10, 11))#candidate|956|(2, 10, 11)|var|int16
bop_957 = relay.subtract(var_955.astype('int16'), relay.reshape(var_956.astype('int16'), relay.shape_of(var_955))) # shape=(2, 10, 11)
func_64_call = mod.get_global_var('func_64')
func_67_call = mutated_mod.get_global_var('func_67')
const_962 = relay.const([-6.629626,9.811036,0.208160,-6.585740,-0.185444,0.719629,-3.008814,-1.576253,9.184969,4.231801,-2.856887,-8.757825,4.738005,-9.068061,-6.117297,-4.777614,0.531611,2.989567,-1.948443,6.367150,-2.238471,-4.992315,9.122977,-9.275207,1.343243,4.284846,8.391413,8.345848,-1.378641,7.026513,-9.218560,9.436954,-6.037953,-9.376310,8.877473,7.058248,-8.807334,-7.550516,-7.807033,2.669514,-9.120502,-2.529222,-1.693128,-2.274779,6.070556,-2.985142,9.583342,7.625129,-4.783667,4.610596,8.456629,3.647925,-5.043518,-8.910346,-0.861658,0.482984,-8.299400,6.659616,7.005046,2.728586,2.048861,-6.579551,0.311153,-5.484162,-9.723226,5.474090,0.150349,8.289848,-1.950679,-6.651751,7.281377,1.779238,1.662603,9.612029,-1.359773,3.506347,-0.249379,2.054527,9.818941,1.357650,1.142039,-6.094445,-3.612042,-8.539822,6.500095,6.164648,-7.588146,-9.438964,6.348177,0.388064,-9.752587,-4.859638,-1.908463,-5.228354,4.130172,7.947050,6.735740,1.138854,-0.949987,-8.947318,4.136937,-9.168759,6.638529,0.092979,-0.536154,-0.487333,-9.219183,7.005381,-9.110891,-9.508118,-8.609984,-9.236970,6.394388,9.989868,-5.705616,2.033042,1.747542,9.547246,-5.250136,-1.266794,8.200366,4.284830,3.487927,7.413449,0.251186,9.173956,4.752186,0.639314,-1.607155,-5.430941,-2.789662,-4.801683,-7.358147,-9.716411,-0.283146,3.002393,-5.758046,6.483279,-1.124480,1.414867,1.331907,7.196846,9.087795,5.027189,1.471067,-3.938993,-6.187116,3.751738,-6.679671,2.791485,-4.802258,3.106382,-7.353486,-5.757753,5.556106,-7.110798,0.469571,1.986816,-8.593604,-3.815067,0.329474,3.113553,2.401172,-3.056822,1.446112,-5.833570,-9.904730,-1.412157,3.557990,2.471617,-1.365132,9.777744,8.390768,-4.577759,9.387373,2.044768,5.109589,-3.851321,-8.382037,2.309276,5.281898,1.388250,5.778795,-0.576987,6.299951,3.402801,4.746703,2.235334,2.238073,-5.857231,-4.203638,4.213455,-7.827754,-3.404926,-3.325242,-9.720024,8.700671,-6.208556,7.427621,7.859066,-7.565423,6.759082,1.459002,8.203958,-7.400833,-0.709195,3.255490,2.681446,5.215471,-1.942635,1.782892,8.647321,9.725157,8.631683,-4.611110,7.007735,0.557336,-5.138393,2.851763,3.168748,7.665588,-5.738804,-9.515755,1.059696,0.695971,2.813654,-4.998676,2.057012,-1.188063,6.177910,-1.661030,-8.290496,3.025800,-7.329112,-5.462221,-3.842024,4.290559,-6.428516,-7.578700,-9.005710,-4.468068,-3.032280,-9.878656,-7.682043,-4.070865,-3.658336,-4.078424,-5.250645,5.673071,-4.203802,8.984356,-1.731305,7.283997,-3.756691,-8.690583,6.160538,-7.495280,3.943250,0.988471,-8.713658,2.633668,-4.416853,6.841347,8.122974,-1.486578,-1.803027,9.166268,-1.479096,1.114958,-2.652384,4.558175,-5.473773,-8.926659,1.171823,6.971344,5.747448,-7.502760,-4.017964,9.532780,-6.117380,4.824471,6.395968,6.706319,5.084038,-5.115698,-7.157336,4.780864,8.599910,5.617138,-8.706800,-2.991529,5.707603,1.686468,-1.375331,-9.473327,-6.342661,8.889222,-4.710570,-4.187309,-5.941115,7.624186,-5.878468,9.318416,-0.063731,-7.621877,-9.327377,6.327686,2.930607,1.597943,8.335778,6.776832,-6.610634,2.404728,2.267816,-7.458963,-7.814134,0.093314,9.368016,-4.373361,8.277313,-5.565031,-1.981216,6.018773,-0.254850,7.199442,-5.869115,-3.765155,-0.406565,0.211332,4.480041,7.747843,-7.019834,-4.111375,2.931857,9.332072,-7.073455,-7.297295,1.431616,-8.725988,6.626729,3.049619,-5.649300,-0.024981,2.061389,2.076579,5.089747,-8.617446,7.307949,9.521382,-0.352472,7.502199,-7.170444,8.163913,3.633063,-5.113077,1.311068,8.064364,3.713228,-8.087722,4.414515,2.719182,-5.087338,-6.591655,-3.705196,6.041025,0.126168,0.341363,-7.972226,3.646980,4.894672,-2.344867,-2.966397,-3.516891,6.788319,-0.901004,-6.078375,-8.813312,-6.768617,-5.973295,-0.898799,0.141277,-5.260240,-1.404429,6.275385,5.572686,6.828600,6.309203,0.120908,1.431245,3.722563,9.103949,3.842887,-9.942252,9.248897,-9.475202,-7.202380,0.814265,5.237928,-6.964589,7.463490,5.065457,8.114677,-4.763971,-5.210849,-0.537935,-2.243225,-0.673102,5.200395,0.895805,6.969503,-9.419041,7.242816,8.449305,1.479536,2.647361,8.416461,3.338688,1.294770,8.502635,3.996556,0.431062,8.891364,3.935018,0.541425,1.785455,5.576015,-2.398607,7.875739,4.640411,6.981297,-4.508496,2.397776,-7.554913,6.180564,-1.878929,8.484221,-3.899726,9.619235,7.081937,-3.876782,-2.630860,-8.820289,-9.725052,-9.471249,2.496304,-7.463387,-2.769566,0.493523,9.164375,-1.420370,-8.470045,7.491276,-1.596678,-4.785750,4.459381,1.916846,-9.314638,2.109213,8.450032,-0.374548,0.232178,-9.327633,-9.600881,-8.280918,0.113027,-3.919921,-5.169875,-2.363522,-7.681674,-9.844785,-5.964565,3.323577,-1.328458,6.827558,-3.380595,-7.379823,5.763964,7.243985,-5.548952,3.761835,-1.202663,9.780277,4.539746,-7.672160,2.564693,-4.495544,-6.010449,-4.324217,-1.056596,-4.733055,-9.064311,-9.548559,-4.602387,5.255733,-2.209773,-9.764190,-6.626639,0.425005,9.116047,-5.912335,3.364527,-0.606376,-6.235479,-3.649940,4.893225,-3.498481,3.194969,5.114349,-8.100499,-2.833292,2.886258,-4.746010,1.851542,1.042569,1.646794,3.329275,-7.448343,-4.435610,-7.380241,4.771406,6.700660,1.335577,7.049057,-5.541611,-5.435494,-8.902958,9.385257,7.642519,-7.917703,-8.220691,-4.760202,-7.239954,2.813852,-8.897056,2.216718,1.521245,5.018832,5.969209,1.079062,-5.201513,6.582680,0.754494,6.070025,3.231637,-3.809333,7.105364,5.771040,9.111179,-9.473071,-5.194950,-1.244288,2.965633,1.995022,-5.399072,-2.707430,-7.565520,6.701502,5.830325,-5.522273,-0.935983,-3.849427,-9.850165,-5.031531,-5.771850,3.303873,-2.441032,3.132946,1.947455,2.230896,6.875578,-4.532781,3.578953,-1.609365,7.063776,3.436430,7.363862,8.528892,2.943207,7.557149,5.863443,-5.597779,-1.921530,5.313856,-4.386701,5.442328,-5.739214,7.271997,8.965738,-2.261280,1.945179,2.586187,4.794246,-9.637315,-8.423002,5.319359,-0.013990,9.908667,2.626674,-8.277280,2.441946,2.138676,6.377127,1.944070,-6.640023,1.268490,3.465781,-8.313335,-7.910926,4.250842,9.129349,-1.851438,8.115588,-3.932078,-2.410671,-9.572124,9.105109,6.459985,8.997522,5.285274,4.986499,9.560745,2.284530,2.576699,-8.985418,-3.515279,8.580824,0.207432,6.727797,9.696187,-5.666789,5.626559,-2.701619,-9.546920,-4.933869,1.951558,6.554804,-0.325239,1.824624,-9.317786,6.502705,3.780730,3.236124,6.196564,-9.505509,-9.537700,-8.410027,-5.415540,-5.844373,-2.535700,8.221707,-2.988022,-6.202397,1.134778,6.695522,8.184051,8.793886,5.117009,5.828557,7.550856,-7.923167,-4.908394,9.499158,3.689330,-5.537042,-5.355542,9.060838,-9.495378,-7.933609,6.348008,8.127965,-0.608561,6.798487,7.406692,-6.999606,9.614026,-3.885258,3.777901,-3.505459,8.116176,1.659988,-2.903011,7.484521,-4.708753,6.261232,6.148040,9.900769,3.395966,9.486604,2.133960,0.499580,-5.695105,5.470782,7.417640,-6.046480,-0.462335,6.893862,6.983770,5.776494,-0.638098,4.696533,1.381511,2.280158,-9.289331,7.226497,-5.638434,-2.152298,-9.815858,-8.465337,2.886468,-2.647011,-6.297891,9.798054,-2.847468,-2.997177,3.672652,-8.191864,-2.287021,1.168457,8.934726,-1.039981,4.209167,-8.072398,-7.430314,4.766373,-2.405224,3.239343,5.502022,-2.989264,9.232068,-2.643709,-3.412666,0.864433,-4.215978,5.016900,2.862165,1.780142,-2.800810,-3.197825,9.539788,0.280171,-6.526106,-2.505056,3.283091,3.387927,3.693718,6.481866,7.797977,-7.007439,0.295880,0.164680,-3.623087,0.169169,-1.548256,9.986400,7.883707,6.912922,-0.011834,-7.492767,-4.439793,-1.828122,2.681905,-0.063770,8.400670,6.934069,-2.785884,2.383517,1.065849,-0.594016,6.807651,6.116318,-2.251450,-9.706961,8.688477,-1.501070,-1.209327,2.468454,-4.377906,-9.848747,7.947909,-3.278334,-9.154659,-1.542866,-0.444562,-6.866083,-9.908257,-8.373859,-0.631126,0.515934,7.070538,-6.738565,6.301646,-4.420232,5.868417,6.262272,-7.363394,-1.162816,7.907150,-5.799524,4.491107,5.501509,1.184256,-3.299261,-9.689713,1.588784,9.090071,-6.913885,1.174203,-1.983888,4.893235,0.900176,7.068461,3.058870,-1.960036,-1.776334,-8.524119,-6.413075,-0.578186,2.443558,-7.438286,-8.435147,-5.743380,-0.112419,5.077425,-5.194836,-3.632156,-0.028592,-4.893363,8.250078,-0.207466,-8.646335,3.090836,-0.613643,-1.241652,0.386818,-1.874081,-4.371030,-9.100298,-8.277127,-5.945863,-0.429346,6.058611,-9.122783,-4.598364,-7.704555,-6.005931,3.610862,7.563984,5.184394,-1.550650,2.478548,-4.152459,6.355544,-0.928455,0.331425,6.788899,-3.069048,-0.886754,-4.926427,-2.510719,8.460234,4.059965,-8.140005,-6.115746,-1.032572,-9.166959,6.100196,-5.649572,3.443213,6.437908,1.553448,9.039451,7.858340,-6.568311,-9.796971,-8.047598,7.993737,8.579587,9.608800,7.203807,-1.319180,0.681104,6.063956,-2.391327,-1.611070,2.248136,-7.994165,4.532781,-7.449381,3.781719,-6.694857,4.922086,-1.247219,-7.767094,-7.602101,3.243336,9.412537,8.624139,-4.682298,-0.983174,7.372576,-2.980488,-5.916283,2.146696,-7.591677,5.999374,-8.646258,-8.204225,6.700126,-4.706748,3.767521,-8.208670,-0.151362,4.327400,-1.108272,-8.591843,6.586888,2.638504,-1.661265,-0.484532,-0.400832,-8.530675,-0.286885,0.793253,1.286646,-4.990321,6.172013,9.730960,-9.764653,6.354318,-5.774714,-6.716725,-1.981633,0.490336,-1.936877,7.620034,-9.890959,9.698912,8.240352,-5.920554,0.495481,1.910062,-5.303376,-0.246570,8.512750,6.265593,5.342809,5.857904,3.242842,6.575979,-4.020856,-2.456181,-3.842599,-2.637683,-1.792995,-8.909962,4.916737,4.780197,-3.699927,-3.205064,6.075330,-4.148226,8.594259,-7.005240,-2.159371,-2.651947,1.670787,6.064248,-2.362699,5.774652,7.317527,-9.776104,4.345666,-8.364334,-7.785872,7.159242,-7.362651,-5.940079,5.751391,-4.378558,-0.260817,-2.144649,-1.495716,8.269294,5.906105,3.670171,-3.270139,7.845600,7.968375,-7.927338,-3.511260,9.087862,3.014136,-1.162857,4.743395,-5.878044,5.955107,4.169229,5.895010,6.271459,3.772240,8.574801,-4.932669,3.048708,-1.266963,8.637324,9.768930,9.551779,1.082604,8.709289,-5.952109,-0.976383,-0.154724,8.283648,3.397363,1.243298,-7.899343,-8.434294,7.030445,-3.259578,6.858252,0.766960,8.006324,4.114929,-1.667692,3.962540,6.449601,1.523102,9.863110,4.837943,2.102111,8.313010,7.837695,-4.898420,7.949345,-9.517465,4.247450,3.641306,-7.740053,4.396361,9.134490,6.244457,-8.110576,-4.212147,-4.506775,-1.856896,-7.640487,5.653147,-0.394742,5.800322,-3.720282,-5.469787,5.857355,-8.210366,4.158405,-2.724250,-5.704291,0.199530,-4.998903,-2.286560,9.468709,-2.309388,-4.463432,7.503255,-5.485597,-1.695389,-1.793337,-2.674989,-8.372326,2.083728,-5.392601,-4.491872,6.048042,7.306271,-3.037894,-0.049517,6.004362,7.519048,-0.386202,-2.238330,8.141947,-0.832219,2.798749,5.748426,5.555097,5.778713,3.254113,7.906853,7.549113,-8.982314,-4.337651,0.819273,-8.103529,-3.410830,0.150567,6.971159,6.922521,-5.444488,-3.518315,2.576516,-8.249772,8.695240,-6.172148,4.946259,2.332865,8.479748,-1.448030,5.876959,-1.454999,-6.275031,-0.153026,-3.305579,6.381006,9.471841,2.387842,1.620200,1.205328,9.913736,8.855587,-0.558014,-8.264866,8.767923,-8.243380,1.386051,-6.686440,2.626718,1.197128,-6.729069,-0.526773,-3.326460,-8.290953,-3.754806,-1.648358,-1.573531,-5.889458,4.921227,-2.638098,3.355730,6.648037,1.777212,-2.809178,2.804445,3.014719,-6.027259,6.731173,9.702989,4.042745,5.993471,4.869707,8.518212,-1.119847,-4.140430,5.773852,-3.418084,6.396687,-5.168321,-8.714881,8.003934,-9.805714,0.369447,6.069630,9.799952,-4.463461,-1.790932,-6.079609,1.334717,-4.406574,-4.726639,-2.580660,1.541262,-7.986627,2.700822,4.294822,-7.122827,2.269575,5.381434,-3.162558,8.873149,2.599649,-8.683561,3.363874,9.867173,-5.140800,-9.733375,-7.665419,-8.169568,0.749272,9.152031,-8.355368,-5.632373,9.782623,-3.593594,5.688780,1.713949,-9.103237,-0.628380,4.496599,8.968585,8.221062,-9.570996,5.840010,6.606576,2.028202,8.705189,-3.146055,4.440427,8.890796,-3.167530,3.205002,-0.860842,8.321752,4.720880,-8.496379,-0.253957,-2.209368,3.724259,8.812874,9.530233,8.946040,1.145786,-0.282234,4.617238,-1.670652,-9.109485,8.079347,1.438172,-5.174544,-2.618971,-0.681308,-7.716163,2.420162,-7.695356,-0.287406,4.811977,9.317698,-8.489972,2.532703,2.425731,0.921856,1.726301,-0.260834,3.598743,-2.958021,5.480738,4.562628,3.147823,2.181897,4.806854,6.769496,7.116293,9.494665,0.293144,-3.202465,0.317668,-1.425042,-0.222348,7.673309,5.141126,1.740329,-1.521227,0.534325,-0.304842,-4.616582,-3.981191,-7.270965,-6.656179,7.309193,2.083763,-4.137928,8.534674,2.889502,-8.774794,-2.426000,-8.324138,-0.889635,-8.742862,4.013220,3.504703,-7.817226,2.130441,0.873804,7.923096,0.350321,-9.858108,0.304618,5.777049,-8.399789,0.124146,2.417756,-9.336226,8.377641,3.450061,4.028827,-9.718527,5.273581,0.018891,9.717212,2.553239,6.464181,-4.522253,-1.071369,1.808315,0.658230,8.707997,8.918310,1.666263,-3.235857,8.052355,3.064206,1.235862,3.960430,6.612508,0.202845,-5.468698,3.229225,7.943369,-1.204132,-9.034594,-1.033530,-0.121587,3.751032,-1.960549,1.061185,-9.306095,9.032390,0.287300,-7.384127,0.600104,7.424214,-5.825716,-8.945229,-4.469552,-6.551681,4.843800,-2.967344,-5.750291,5.289309,9.544843,-1.821325,5.055706,-5.769829,5.169895,6.236324,-2.043773,-9.965099,9.012497,8.039523,2.967674,-5.771793,-8.313858,-3.450041,5.976011,1.340555,-9.942258,-5.020682,5.423802,-4.877510,3.390746,3.367055,7.971879,-2.350259,-9.788167,-0.160591,3.033563,-8.833335,-8.833639,3.536613,-7.868093,-3.153129,-6.147185,-3.270250,4.887773,-6.121348,2.384953,8.847558,7.592952,4.299748,2.378349,8.306481,6.697397,-2.496349,7.391737,5.837769,-9.529113,-7.985431,-7.693274,-9.099999,-1.989313,-5.104219,-1.396144,-1.672300,6.155300,2.941364,1.029304,2.647134,5.149972,-4.419424,0.560037,-1.613078,-3.159899,3.331798,-8.386946,-1.965748,-8.553352,-6.173007,-6.810625,6.975382,-4.210391,-7.464686,7.612470,-8.862837,2.699550,5.188850,-5.451135,-5.875505,4.232887,6.153732,5.309493,-6.836379,-2.265928,-0.880252,6.762753,-9.945927,6.895189,0.029869,6.680703,9.223825,6.740322,7.087111,-3.118273,-9.775252,1.547292,2.892854,3.646305,6.112227,-0.151990,0.997888,7.366980,-6.463314,-1.938764,7.756218,8.166973,0.694848,-4.362411,8.673229,-4.298484,-7.505680,1.667491,9.128254,5.618455,4.281049,-4.755656,7.162015,-6.966252,-1.400688,6.479626,-1.510563,-0.121263,6.023263,6.252035,-4.946201,-0.419576,0.175127,-9.856118,1.840266,2.230344,-4.907823,2.520707,0.071724,9.885132,-2.101249,-4.524406,7.923106,-5.637898,4.936751,1.516698,-0.831787,-0.858437,-5.886143,-4.189064,-0.629485,-0.237704,0.355860,-5.868002,4.652679,6.196509,-9.036682,4.991746,-1.715325,6.280272,1.172565,2.354264,-5.421100,1.047731,2.858120,-1.232395,-9.099748,-3.909981,-4.721301,-9.055706,-8.196076,-6.675784,7.139174,-4.175130,7.039284,3.478708,6.948210,-4.496066,-2.535829,-5.322383,3.364359,8.951924,4.249759,-3.612281,-8.858455,6.864934,-9.472079,-4.787515,1.153661,7.435251,-2.283245,7.332736,-5.571198,9.900817,-1.497351,-8.579485,6.966167,6.976189,3.714603,-5.219039,-5.095607,-8.384882,1.462452,6.738605,0.161921,-1.971929,6.571470,8.627706,1.056053,2.327458,-8.564355,-2.309082,0.517067,-8.264290,4.690107,2.679999,0.153446,-6.021683,-8.224129,7.989350,-8.686820,8.884199,-0.109850,7.665859,1.723861,4.228719,-1.225651,4.887935,7.312021,-8.334734,1.692542,-0.229112,3.305856,4.550787,-5.693577,-5.541311,-3.585570,2.341337,-7.822385], dtype = "float64")#candidate|962|(1568,)|const|float64
call_961 = relay.TupleGetItem(func_64_call(relay.reshape(const_962.astype('float64'), [14, 16, 7])), 0)
call_963 = relay.TupleGetItem(func_67_call(relay.reshape(const_962.astype('float64'), [14, 16, 7])), 0)
func_165_call = mod.get_global_var('func_165')
func_169_call = mutated_mod.get_global_var('func_169')
var_978 = relay.var("var_978", dtype = "uint8", shape = (462,))#candidate|978|(462,)|var|uint8
call_977 = relay.TupleGetItem(func_165_call(relay.reshape(var_978.astype('uint8'), [7, 6, 11]), relay.reshape(var_978.astype('uint8'), [7, 6, 11]), ), 0)
call_979 = relay.TupleGetItem(func_169_call(relay.reshape(var_978.astype('uint8'), [7, 6, 11]), relay.reshape(var_978.astype('uint8'), [7, 6, 11]), ), 0)
func_165_call = mod.get_global_var('func_165')
func_169_call = mutated_mod.get_global_var('func_169')
call_986 = relay.TupleGetItem(func_165_call(relay.reshape(call_977.astype('uint8'), [7, 6, 11]), relay.reshape(call_977.astype('uint8'), [7, 6, 11]), ), 2)
call_987 = relay.TupleGetItem(func_169_call(relay.reshape(call_977.astype('uint8'), [7, 6, 11]), relay.reshape(call_977.astype('uint8'), [7, 6, 11]), ), 2)
bop_1000 = relay.less_equal(call_986.astype('bool'), relay.reshape(const_962.astype('bool'), relay.shape_of(call_986))) # shape=(1568,)
bop_1003 = relay.less_equal(call_987.astype('bool'), relay.reshape(const_962.astype('bool'), relay.shape_of(call_987))) # shape=(1568,)
func_64_call = mod.get_global_var('func_64')
func_67_call = mutated_mod.get_global_var('func_67')
call_1005 = relay.TupleGetItem(func_64_call(relay.reshape(call_986.astype('float64'), [14, 16, 7])), 0)
call_1006 = relay.TupleGetItem(func_67_call(relay.reshape(call_986.astype('float64'), [14, 16, 7])), 0)
output = relay.Tuple([bop_957,call_961,call_977,var_978,bop_1000,call_1005,])
output2 = relay.Tuple([bop_957,call_963,call_979,var_978,bop_1003,call_1006,])
func_1010 = relay.Function([var_955,var_956,var_978,], output)
mod['func_1010'] = func_1010
mod = relay.transform.InferType()(mod)
mutated_mod['func_1010'] = func_1010
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1010_call = mutated_mod.get_global_var('func_1010')
var_1012 = relay.var("var_1012", dtype = "int16", shape = (2, 10, 11))#candidate|1012|(2, 10, 11)|var|int16
var_1013 = relay.var("var_1013", dtype = "int16", shape = (2, 10, 11))#candidate|1013|(2, 10, 11)|var|int16
var_1014 = relay.var("var_1014", dtype = "uint8", shape = (462,))#candidate|1014|(462,)|var|uint8
call_1011 = func_1010_call(var_1012,var_1013,var_1014,)
output = call_1011
func_1015 = relay.Function([var_1012,var_1013,var_1014,], output)
mutated_mod['func_1015'] = func_1015
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1077 = relay.var("var_1077", dtype = "bool", shape = (8, 11, 7))#candidate|1077|(8, 11, 7)|var|bool
var_1078 = relay.var("var_1078", dtype = "bool", shape = (8, 11, 7))#candidate|1078|(8, 11, 7)|var|bool
bop_1079 = relay.logical_and(var_1077.astype('bool'), relay.reshape(var_1078.astype('bool'), relay.shape_of(var_1077))) # shape=(8, 11, 7)
output = bop_1079
output2 = bop_1079
func_1082 = relay.Function([var_1077,var_1078,], output)
mod['func_1082'] = func_1082
mod = relay.transform.InferType()(mod)
var_1083 = relay.var("var_1083", dtype = "bool", shape = (8, 11, 7))#candidate|1083|(8, 11, 7)|var|bool
var_1084 = relay.var("var_1084", dtype = "bool", shape = (8, 11, 7))#candidate|1084|(8, 11, 7)|var|bool
output = func_1082(var_1083,var_1084,)
func_1085 = relay.Function([var_1083,var_1084,], output)
mutated_mod['func_1085'] = func_1085
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1098 = relay.var("var_1098", dtype = "float64", shape = (8, 8, 6))#candidate|1098|(8, 8, 6)|var|float64
uop_1099 = relay.sinh(var_1098.astype('float64')) # shape=(8, 8, 6)
func_1082_call = mod.get_global_var('func_1082')
func_1085_call = mutated_mod.get_global_var('func_1085')
var_1102 = relay.var("var_1102", dtype = "bool", shape = (616,))#candidate|1102|(616,)|var|bool
call_1101 = func_1082_call(relay.reshape(var_1102.astype('bool'), [8, 11, 7]), relay.reshape(var_1102.astype('bool'), [8, 11, 7]), )
call_1103 = func_1082_call(relay.reshape(var_1102.astype('bool'), [8, 11, 7]), relay.reshape(var_1102.astype('bool'), [8, 11, 7]), )
func_618_call = mod.get_global_var('func_618')
func_621_call = mutated_mod.get_global_var('func_621')
var_1112 = relay.var("var_1112", dtype = "int32", shape = (1920,))#candidate|1112|(1920,)|var|int32
const_1113 = relay.const([[9,1],[-1,-4],[-3,1],[9,10],[5,-3],[1,-10],[4,-5],[-1,2],[-1,2],[7,6],[-6,8],[4,1],[-5,-8],[10,9],[4,-6],[7,7],[-1,9],[-4,10],[4,5],[-5,-9],[-1,-7],[7,-4],[-9,3],[10,-5],[8,9],[-1,-10],[-6,-4],[3,1],[10,-4],[-5,-7],[-3,-2],[2,-4],[-3,10],[1,-2],[-7,9],[-8,6],[10,7],[10,-2],[4,-6],[5,-5],[-2,-4],[-7,1],[3,-7],[-10,-10],[-3,-8],[9,-8],[5,-9],[3,-9],[-1,7],[1,5],[7,4],[-5,2],[1,2],[9,5],[5,6],[-10,-2],[-10,-10],[-8,5],[-8,-5],[-3,-10],[-6,-6],[-2,2],[-5,-5],[3,-7],[-8,-6],[-3,-4],[-1,-2],[7,-1],[-4,-9],[-10,-6],[-9,-1],[10,-7],[-4,-7],[-5,-7],[-1,1],[3,-10],[-10,5],[-9,-6],[-4,1],[2,4],[-3,2],[5,6],[-10,-3],[-10,-10],[-3,-2],[-6,9],[3,3],[9,3],[2,2],[7,-3],[-5,-10],[3,-9],[4,9],[10,-9],[-9,10],[4,2],[9,5],[-3,2],[7,5],[1,6],[-5,-5],[-2,-8],[9,-1],[-1,10],[6,-3],[4,-9],[9,-10],[-7,-8],[-1,7],[-9,4],[-5,2],[-7,-4],[-6,4],[-4,10],[6,-6],[6,5],[-8,1],[-9,7],[10,-10],[10,10],[10,-5],[-6,2],[4,-4],[1,-10],[-6,-6],[7,-9],[-3,-4],[2,2],[-9,-10],[3,-6],[9,9],[-1,-9],[-1,-4],[-10,-7],[-1,-7],[-6,-6],[-5,1],[-8,5],[9,7],[5,9],[-1,-6],[5,4],[-4,-2],[2,-7],[-6,-5],[5,4],[-5,8],[-7,8],[9,10],[5,3],[-7,-10],[-2,-7],[5,-5],[-3,-8],[7,10],[2,-3],[2,-6],[-9,6],[3,6],[5,4],[-7,-4],[-7,9],[-8,-10],[-7,-1],[8,5],[8,5],[9,7],[-7,8],[1,4],[-4,-1],[-2,-3],[8,7],[3,5],[-5,-1],[4,-10],[8,-4],[-2,6],[-1,-8],[-10,3],[7,3],[-4,-1],[9,-1],[9,-5],[-1,-5],[-7,-9],[-8,3],[-10,-7],[6,6],[10,-7],[9,-3],[1,-7],[-9,7],[5,-4],[5,-2],[-4,3],[-3,-10],[-8,4],[-6,8],[-7,4],[-9,-1],[7,9],[5,-6],[-2,-10],[7,10],[8,-3],[-4,-4],[7,-8],[6,-3],[7,4],[3,2],[6,2],[4,9],[7,6],[4,-2],[-5,9],[10,-6],[-2,-2],[10,-4],[-7,-2],[-10,3],[-2,1],[-7,8],[3,-7],[7,-3],[-4,8],[8,2],[8,-6],[-2,8],[-6,-1],[1,-8],[7,1]], dtype = "uint8")#candidate|1113|(231, 2)|const|uint8
call_1111 = relay.TupleGetItem(func_618_call(relay.reshape(var_1112.astype('int32'), [10, 12, 16]), relay.reshape(const_1113.astype('uint8'), [462,]), ), 1)
call_1114 = relay.TupleGetItem(func_621_call(relay.reshape(var_1112.astype('int32'), [10, 12, 16]), relay.reshape(const_1113.astype('uint8'), [462,]), ), 1)
output = relay.Tuple([uop_1099,call_1101,var_1102,call_1111,var_1112,const_1113,])
output2 = relay.Tuple([uop_1099,call_1103,var_1102,call_1114,var_1112,const_1113,])
func_1115 = relay.Function([var_1098,var_1102,var_1112,], output)
mod['func_1115'] = func_1115
mod = relay.transform.InferType()(mod)
var_1116 = relay.var("var_1116", dtype = "float64", shape = (8, 8, 6))#candidate|1116|(8, 8, 6)|var|float64
var_1117 = relay.var("var_1117", dtype = "bool", shape = (616,))#candidate|1117|(616,)|var|bool
var_1118 = relay.var("var_1118", dtype = "int32", shape = (1920,))#candidate|1118|(1920,)|var|int32
output = func_1115(var_1116,var_1117,var_1118,)
func_1119 = relay.Function([var_1116,var_1117,var_1118,], output)
mutated_mod['func_1119'] = func_1119
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1226 = relay.var("var_1226", dtype = "int16", shape = (10, 1, 3))#candidate|1226|(10, 1, 3)|var|int16
var_1227 = relay.var("var_1227", dtype = "int16", shape = (10, 12, 3))#candidate|1227|(10, 12, 3)|var|int16
bop_1228 = relay.not_equal(var_1226.astype('bool'), var_1227.astype('bool')) # shape=(10, 12, 3)
func_1082_call = mod.get_global_var('func_1082')
func_1085_call = mutated_mod.get_global_var('func_1085')
var_1235 = relay.var("var_1235", dtype = "bool", shape = (616,))#candidate|1235|(616,)|var|bool
call_1234 = func_1082_call(relay.reshape(var_1235.astype('bool'), [8, 11, 7]), relay.reshape(var_1235.astype('bool'), [8, 11, 7]), )
call_1236 = func_1082_call(relay.reshape(var_1235.astype('bool'), [8, 11, 7]), relay.reshape(var_1235.astype('bool'), [8, 11, 7]), )
func_1010_call = mod.get_global_var('func_1010')
func_1015_call = mutated_mod.get_global_var('func_1015')
var_1269 = relay.var("var_1269", dtype = "int16", shape = (220,))#candidate|1269|(220,)|var|int16
var_1270 = relay.var("var_1270", dtype = "uint8", shape = (7, 66))#candidate|1270|(7, 66)|var|uint8
call_1268 = relay.TupleGetItem(func_1010_call(relay.reshape(var_1269.astype('int16'), [2, 10, 11]), relay.reshape(var_1269.astype('int16'), [2, 10, 11]), relay.reshape(var_1270.astype('uint8'), [462,]), ), 5)
call_1271 = relay.TupleGetItem(func_1015_call(relay.reshape(var_1269.astype('int16'), [2, 10, 11]), relay.reshape(var_1269.astype('int16'), [2, 10, 11]), relay.reshape(var_1270.astype('uint8'), [462,]), ), 5)
uop_1281 = relay.log2(var_1269.astype('float64')) # shape=(220,)
func_165_call = mod.get_global_var('func_165')
func_169_call = mutated_mod.get_global_var('func_169')
call_1288 = relay.TupleGetItem(func_165_call(relay.reshape(var_1270.astype('uint8'), [7, 6, 11]), relay.reshape(var_1270.astype('uint8'), [7, 6, 11]), ), 3)
call_1289 = relay.TupleGetItem(func_169_call(relay.reshape(var_1270.astype('uint8'), [7, 6, 11]), relay.reshape(var_1270.astype('uint8'), [7, 6, 11]), ), 3)
func_64_call = mod.get_global_var('func_64')
func_67_call = mutated_mod.get_global_var('func_67')
call_1291 = relay.TupleGetItem(func_64_call(relay.reshape(call_1268.astype('float64'), [14, 16, 7])), 0)
call_1292 = relay.TupleGetItem(func_67_call(relay.reshape(call_1268.astype('float64'), [14, 16, 7])), 0)
output = relay.Tuple([bop_1228,call_1234,var_1235,call_1268,var_1270,uop_1281,call_1288,call_1291,])
output2 = relay.Tuple([bop_1228,call_1236,var_1235,call_1271,var_1270,uop_1281,call_1289,call_1292,])
func_1293 = relay.Function([var_1226,var_1227,var_1235,var_1269,var_1270,], output)
mod['func_1293'] = func_1293
mod = relay.transform.InferType()(mod)
mutated_mod['func_1293'] = func_1293
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1293_call = mutated_mod.get_global_var('func_1293')
var_1295 = relay.var("var_1295", dtype = "int16", shape = (10, 1, 3))#candidate|1295|(10, 1, 3)|var|int16
var_1296 = relay.var("var_1296", dtype = "int16", shape = (10, 12, 3))#candidate|1296|(10, 12, 3)|var|int16
var_1297 = relay.var("var_1297", dtype = "bool", shape = (616,))#candidate|1297|(616,)|var|bool
var_1298 = relay.var("var_1298", dtype = "int16", shape = (220,))#candidate|1298|(220,)|var|int16
var_1299 = relay.var("var_1299", dtype = "uint8", shape = (7, 66))#candidate|1299|(7, 66)|var|uint8
call_1294 = func_1293_call(var_1295,var_1296,var_1297,var_1298,var_1299,)
output = call_1294
func_1300 = relay.Function([var_1295,var_1296,var_1297,var_1298,var_1299,], output)
mutated_mod['func_1300'] = func_1300
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1374 = relay.var("var_1374", dtype = "int16", shape = (10, 16, 14))#candidate|1374|(10, 16, 14)|var|int16
var_1375 = relay.var("var_1375", dtype = "int16", shape = (10, 16, 14))#candidate|1375|(10, 16, 14)|var|int16
bop_1376 = relay.greater_equal(var_1374.astype('bool'), relay.reshape(var_1375.astype('bool'), relay.shape_of(var_1374))) # shape=(10, 16, 14)
output = bop_1376
output2 = bop_1376
func_1381 = relay.Function([var_1374,var_1375,], output)
mod['func_1381'] = func_1381
mod = relay.transform.InferType()(mod)
mutated_mod['func_1381'] = func_1381
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1381_call = mutated_mod.get_global_var('func_1381')
var_1383 = relay.var("var_1383", dtype = "int16", shape = (10, 16, 14))#candidate|1383|(10, 16, 14)|var|int16
var_1384 = relay.var("var_1384", dtype = "int16", shape = (10, 16, 14))#candidate|1384|(10, 16, 14)|var|int16
call_1382 = func_1381_call(var_1383,var_1384,)
output = call_1382
func_1385 = relay.Function([var_1383,var_1384,], output)
mutated_mod['func_1385'] = func_1385
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1592 = relay.var("var_1592", dtype = "float32", shape = (16, 16, 4))#candidate|1592|(16, 16, 4)|var|float32
uop_1593 = relay.cosh(var_1592.astype('float32')) # shape=(16, 16, 4)
bop_1595 = relay.greater(uop_1593.astype('bool'), relay.reshape(var_1592.astype('bool'), relay.shape_of(uop_1593))) # shape=(16, 16, 4)
uop_1605 = relay.cos(bop_1595.astype('float64')) # shape=(16, 16, 4)
bop_1608 = relay.multiply(uop_1605.astype('uint8'), relay.reshape(bop_1595.astype('uint8'), relay.shape_of(uop_1605))) # shape=(16, 16, 4)
bop_1617 = relay.maximum(bop_1595.astype('float32'), relay.reshape(uop_1605.astype('float32'), relay.shape_of(bop_1595))) # shape=(16, 16, 4)
output = relay.Tuple([bop_1608,bop_1617,])
output2 = relay.Tuple([bop_1608,bop_1617,])
func_1621 = relay.Function([var_1592,], output)
mod['func_1621'] = func_1621
mod = relay.transform.InferType()(mod)
mutated_mod['func_1621'] = func_1621
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1622 = relay.var("var_1622", dtype = "float32", shape = (16, 16, 4))#candidate|1622|(16, 16, 4)|var|float32
func_1621_call = mutated_mod.get_global_var('func_1621')
call_1623 = func_1621_call(var_1622)
output = call_1623
func_1624 = relay.Function([var_1622], output)
mutated_mod['func_1624'] = func_1624
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2299 = relay.var("var_2299", dtype = "float64", shape = (10, 13, 5))#candidate|2299|(10, 13, 5)|var|float64
var_2300 = relay.var("var_2300", dtype = "float64", shape = (10, 13, 5))#candidate|2300|(10, 13, 5)|var|float64
bop_2301 = relay.floor_divide(var_2299.astype('float64'), relay.reshape(var_2300.astype('float64'), relay.shape_of(var_2299))) # shape=(10, 13, 5)
func_618_call = mod.get_global_var('func_618')
func_621_call = mutated_mod.get_global_var('func_621')
var_2308 = relay.var("var_2308", dtype = "int32", shape = (1920,))#candidate|2308|(1920,)|var|int32
var_2309 = relay.var("var_2309", dtype = "uint8", shape = (462,))#candidate|2309|(462,)|var|uint8
call_2307 = relay.TupleGetItem(func_618_call(relay.reshape(var_2308.astype('int32'), [10, 12, 16]), relay.reshape(var_2309.astype('uint8'), [462,]), ), 3)
call_2310 = relay.TupleGetItem(func_621_call(relay.reshape(var_2308.astype('int32'), [10, 12, 16]), relay.reshape(var_2309.astype('uint8'), [462,]), ), 3)
output = relay.Tuple([bop_2301,call_2307,var_2308,var_2309,])
output2 = relay.Tuple([bop_2301,call_2310,var_2308,var_2309,])
func_2334 = relay.Function([var_2299,var_2300,var_2308,var_2309,], output)
mod['func_2334'] = func_2334
mod = relay.transform.InferType()(mod)
mutated_mod['func_2334'] = func_2334
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2334_call = mutated_mod.get_global_var('func_2334')
var_2336 = relay.var("var_2336", dtype = "float64", shape = (10, 13, 5))#candidate|2336|(10, 13, 5)|var|float64
var_2337 = relay.var("var_2337", dtype = "float64", shape = (10, 13, 5))#candidate|2337|(10, 13, 5)|var|float64
var_2338 = relay.var("var_2338", dtype = "int32", shape = (1920,))#candidate|2338|(1920,)|var|int32
var_2339 = relay.var("var_2339", dtype = "uint8", shape = (462,))#candidate|2339|(462,)|var|uint8
call_2335 = func_2334_call(var_2336,var_2337,var_2338,var_2339,)
output = call_2335
func_2340 = relay.Function([var_2336,var_2337,var_2338,var_2339,], output)
mutated_mod['func_2340'] = func_2340
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2428 = relay.var("var_2428", dtype = "bool", shape = (12, 14, 15))#candidate|2428|(12, 14, 15)|var|bool
var_2429 = relay.var("var_2429", dtype = "bool", shape = (12, 14, 15))#candidate|2429|(12, 14, 15)|var|bool
bop_2430 = relay.logical_or(var_2428.astype('bool'), relay.reshape(var_2429.astype('bool'), relay.shape_of(var_2428))) # shape=(12, 14, 15)
uop_2444 = relay.exp(var_2429.astype('float32')) # shape=(12, 14, 15)
func_1115_call = mod.get_global_var('func_1115')
func_1119_call = mutated_mod.get_global_var('func_1119')
var_2448 = relay.var("var_2448", dtype = "float64", shape = (384,))#candidate|2448|(384,)|var|float64
var_2449 = relay.var("var_2449", dtype = "bool", shape = (616,))#candidate|2449|(616,)|var|bool
const_2450 = relay.const([-6,9,-5,-2,3,-6,-2,-4,10,1,-4,5,-2,1,5,-3,10,-9,-1,9,-8,-6,2,9,1,7,4,3,4,-6,-3,-10,-3,8,-1,-7,-4,9,4,-7,8,10,9,-2,9,-2,6,-7,-10,-4,-4,1,-3,-3,8,2,7,2,7,-8,1,-1,3,-8,3,-5,-1,4,-9,-3,-8,-5,-8,10,10,-2,-2,-7,-10,-8,-7,7,-1,3,7,-7,10,-1,-10,4,3,-2,-8,9,-6,-9,10,-2,-9,1,1,-5,3,-9,-9,4,8,6,-8,4,-10,8,2,-2,-3,9,2,-4,9,9,-8,-1,-10,-4,10,2,-4,-3,-10,-7,10,8,-1,-9,8,10,1,-4,-6,9,8,-7,6,7,7,-1,-2,-10,-1,-3,9,9,-5,-2,1,9,5,-2,-8,-6,-4,3,-6,-1,4,-8,-9,2,9,-5,5,2,9,-2,-4,3,5,-8,-9,-10,2,5,-4,-5,10,5,-3,-7,10,1,-10,-4,10,-8,10,1,7,-3,-2,-5,-8,2,-7,4,-10,3,-1,5,-8,10,2,-10,-7,9,1,6,4,1,-6,-1,1,-6,-3,-6,5,-9,-7,-5,3,-8,8,4,-1,-3,9,5,10,-4,4,5,6,-8,6,1,-7,-4,2,-7,4,-4,-8,6,-10,-2,-10,6,3,-9,7,-8,9,-1,1,-8,2,1,10,-9,-6,5,-9,2,-4,3,-2,-10,-5,6,3,-5,5,-4,-1,-5,3,3,-8,-6,-7,-6,9,4,8,-4,-3,3,-2,2,1,2,-7,8,1,10,2,-9,-1,-9,-2,-8,-9,-2,2,-6,-3,-7,-3,-6,10,4,-1,6,-5,-10,7,1,-3,-9,-1,7,3,-2,10,3,-3,3,2,-7,4,6,-7,7,2,-4,3,6,-5,4,-8,5,-4,7,-8,4,4,-3,-7,-3,-6,-1,-10,7,-5,1,8,5,8,9,-8,8,-1,5,9,6,-6,-6,-3,-2,-4,2,-10,-3,10,-4,4,-2,-3,4,4,-9,8,7,-8,2,1,-3,2,9,9,2,-7,10,-1,2,-4,-6,-8,-6,1,10,1,-2,9,-4,-9,2,1,6,6,-5,-10,-3,-5,7,-6,-7,10,9,-3,8,7,5,-1,10,-10,-6,-8,-9,1,-9,4,-3,5,4,2,9,-1,9,-7,7,-4,8,-5,6,-4,2,-1,2,6,-6,-7,10,-9,-10,-8,6,2,-5,-10,5,-6,-1,2,2,9,-6,3,4,7,-2,1,-8,-9,-1,3,-4,3,-5,9,10,-7,2,-4,-4,10,-9,-2,-3,-9,-2,2,-1,-1,7,4,-6,6,1,-6,-3,10,7,-9,5,-7,-2,2,4,-10,1,-8,6,-7,-8,-3,9,-2,-7,9,3,-8,-4,10,4,-9,-7,4,-3,-2,5,-1,-1,3,8,-10,7,-5,2,9,7,-3,-4,-8,9,9,5,10,-7,-6,4,-5,5,2,-7,-3,6,1,-4,-9,8,9,-10,-1,-4,1,2,1,-7,-7,3,-1,8,10,-10,7,9,-1,-4,5,9,8,-1,1,3,4,-9,-6,8,1,7,6,-3,-6,-9,-7,-4,-2,-5,4,-2,-3,-3,10,-4,-9,-10,-8,2,-1,2,1,-4,-2,-7,-6,-5,10,7,9,-4,4,-3,-6,-4,-8,-5,-6,-4,-8,5,10,3,9,-1,-5,7,8,10,9,-2,-4,-7,-4,9,2,5,5,3,2,-2,-6,4,3,9,-2,8,-8,6,-6,5,8,-1,2,7,-7,-10,-2,-8,-2,4,9,-10,6,8,-9,-3,5,-2,-7,10,9,-8,6,-5,-4,10,2,-8,-6,-4,1,3,-9,-2,3,-2,-2,7,-6,-6,-3,2,8,8,8,10,7,-3,6,5,-9,-6,-9,1,-5,-6,5,6,7,9,5,-5,1,-1,5,-8,4,5,9,9,-5,4,4,-3,-5,-6,-2,-3,1,9,1,-10,5,8,-3,10,3,-8,-6,-8,5,-3,7,7,-1,1,8,-7,-7,7,-2,-8,2,2,8,9,3,8,10,-7,-6,3,10,-6,-4,8,1,3,-3,1,4,-3,-4,9,10,6,-4,9,10,-4,-10,10,-10,5,5,-5,6,6,-10,-5,-10,-6,2,2,-1,-4,-3,-10,-7,-8,-1,-1,-2,-6,-5,5,-1,-4,6,-5,-4,-8,5,-10,5,5,1,-10,7,7,6,-7,-3,-2,-7,-6,5,-8,1,3,7,9,-7,1,6,6,-10,-1,-6,-1,-9,5,-10,6,-2,7,-10,5,7,1,-6,7,2,10,-10,-8,-10,7,-6,1,-4,7,-7,1,-2,9,-9,-5,-4,-6,8,5,9,-7,-5,-4,9,2,6,9,-6,-6,-3,-4,6,3,-6,-1,2,-9,-6,-7,6,10,5,-10,6,-5,-6,9,-1,-7,3,-9,8,4,-2,-9,-2,-10,8,9,-7,6,3,9,-8,-8,-6,7,-8,-8,-6,1,-9,7,3,3,8,5,-5,-5,1,-5,4,-1,-5,-3,9,10,-6,-5,-1,-9,8,-4,8,-7,5,-6,-3,1,9,10,-7,5,-7,2,-1,-1,-7,-3,4,-4,1,10,-8,-4,5,4,-6,7,3,5,2,-4,-1,-2,6,-6,5,-1,-6,-9,-2,-5,5,-4,-1,2,-5,2,3,2,1,4,-3,10,-1,2,-3,-4,1,9,-8,-5,7,-10,-1,-10,10,8,-1,5,-7,-7,-6,-3,10,-8,2,5,1,2,8,4,-7,3,3,2,-5,-2,-4,5,-8,-4,6,-2,5,-9,-7,4,7,4,3,10,8,8,-1,-6,8,9,-1,3,6,-2,-6,7,-2,-5,-6,5,-1,6,10,10,3,-3,10,-2,-9,9,1,-1,8,9,3,10,9,-5,-7,8,-4,-4,-1,3,3,7,2,6,-6,-4,9,4,-9,8,5,7,10,-6,-10,-1,4,6,6,4,4,-10,3,2,4,-7,7,8,5,-8,-4,-9,-7,-4,4,-6,7,3,1,-1,3,-3,4,-8,5,6,-7,8,8,8,2,-2,1,1,9,6,-2,2,8,4,8,-5,-3,-8,6,4,-9,9,10,-1,-3,-10,-5,10,-4,9,4,-6,6,9,1,10,-10,1,10,-8,10,8,2,-1,4,-10,-5,-7,-2,2,2,5,-4,1,-2,-5,-10,-10,-2,-9,-2,-5,5,7,-10,3,3,-3,8,-1,4,-3,-10,7,3,-6,-4,1,3,-9,8,-3,1,10,-2,10,-6,2,-5,5,4,-4,-10,-2,-4,6,-4,-5,-4,4,3,-2,6,-4,-3,-10,10,-9,-2,5,-3,-10,-9,2,9,9,-8,2,5,5,-6,-6,1,-9,8,9,-5,6,3,7,-4,3,-7,5,2,1,5,4,-5,-8,-9,4,-5,9,-8,9,3,5,-8,4,-10,-8,4,-2,-7,2,9,-1,6,-4,6,-8,7,1,-4,7,-9,3,-9,4,7,-3,2,3,-3,6,-2,10,-10,9,5,-9,3,10,9,9,10,4,-7,3,8,1,6,1,4,1,6,-6,4,-10,-1,-10,-4,-6,5,-10,1,-3,5,-2,-6,8,4,10,3,-2,-2,7,9,4,5,5,7,2,3,-9,-6,8,3,10,9,-10,4,-4,3,5,4,-5,-9,3,8,9,-8,-7,-7,7,-1,-7,-6,-10,-1,-8,-6,-7,7,-4,-1,2,10,-10,-8,-2,-4,4,2,-9,-8,1,10,-8,6,-4,7,-6,-5,5,-5,-2,10,1,9,-6,-8,2,4,5,-6,-9,-4,1,3,-3,-4,9,1,5,-9,9,-9,5,5,-5,8,-1,9,4,-7,-2,3,5,1,-6,-1,10,-7,5,-5,-10,-4,-7,-4,-7,-7,-4,-10,4,8,-4,6,1,10,-7,6,-10,-10,-3,8,-7,-7,-5,9,10,1,8,-9,1,5,-6,7,9,-5,-4,-10,-9,-2,-6,4,-10,-10,-2,-5,10,-3,9,6,-7,-10,-5,-2,9,-9,-6,-1,-7,3,9,4,-10,-10,5,8,-7,3,-1,8,-6,5,9,-8,-6,-10,1,-8,1,1,-2,-9,9,2,-4,10,-7,-4,2,7,-5,4,-10,-8,-8,6,9,-10,-7,8,5,3,-2,10,-1,1,1,5,-8,2,-3,10,6,-10,-4,-6,8,-1,-8,-6,6,-6,-3,-10,-3,10,1,-8,10,1,10,-3,5,-9,-4,2,2,-9,-9,7,1,8,5,-10,7,9,7,4,-5,-4,7,9,6,-4,8,6,9,3,1,-1,5,6,9,3,-2,-2,-7,-8,-10,-7,-4,-8,-9,8,-4,-8,8,-10,-3,-10,-2,-4,5,3,2,4,4,-10,-10,-3,-7,3,5,2,-6,3,-9,8,-6,-9,-10,-6,-2,-7,5,9,3,9,5,5,8,-9,4,-8,8,-9,-8,-5,3,7,2,-2,-7,-2,-4,2,-5,-6,-10,-9,4,7,5,4,-3,-6,6,1,-2,-6,10,-8,-10,-5,-3,-7,2,-8,-5,5,-5,5,2,7,-9,-2,-10,5,9,10,-4,-8,2,-5,2,7,4,1,7,2,10,4,-6,-1,9,-6,10,-1,-10,1,8,-1,1,-10,9,-2,-6,8,7,5,-1,-1,5,-3,-8,-8,4,1,-1,-4,5,-1,4,2,-9,7,10,-2,10,1,-2,8,-8,1,-2,-2,-5,-5,-2,-2,6,2,-9,-10,-10,1,-9,7,-8,9,-7,6,-3,1,-9,-8,-4,10,7,-4,-2,8,-4,9,5,-1,-10,-4,-9,10,-10,5,-1,9,7,-4,10,10,-8,5,10,6,4,-5,-5,-3,3,10,4,-3,-5,-2,8,-9,5,-10,2,5,3,1,4,2,-3,-3,-4,-10,1,5,7,8,10,7,3,9,1,-4,5,2,10,7,-2,-4,10,-4,5,-9,9,8,9,8,9,-4,-1,4,-4,7,9,-8,-1,6,-6,3,-4,-7,-8,4,8,2,6,1,7,5,9,5,-8,8,-9,-9,-9,5,-1,5,-6,-1,4,-4,9,-9,3,-8,6,-4,6], dtype = "int32")#candidate|2450|(1920,)|const|int32
call_2447 = relay.TupleGetItem(func_1115_call(relay.reshape(var_2448.astype('float64'), [8, 8, 6]), relay.reshape(var_2449.astype('bool'), [616,]), relay.reshape(const_2450.astype('int32'), [1920,]), ), 4)
call_2451 = relay.TupleGetItem(func_1119_call(relay.reshape(var_2448.astype('float64'), [8, 8, 6]), relay.reshape(var_2449.astype('bool'), [616,]), relay.reshape(const_2450.astype('int32'), [1920,]), ), 4)
output = relay.Tuple([bop_2430,uop_2444,call_2447,var_2448,var_2449,const_2450,])
output2 = relay.Tuple([bop_2430,uop_2444,call_2451,var_2448,var_2449,const_2450,])
func_2473 = relay.Function([var_2428,var_2429,var_2448,var_2449,], output)
mod['func_2473'] = func_2473
mod = relay.transform.InferType()(mod)
mutated_mod['func_2473'] = func_2473
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2473_call = mutated_mod.get_global_var('func_2473')
var_2475 = relay.var("var_2475", dtype = "bool", shape = (12, 14, 15))#candidate|2475|(12, 14, 15)|var|bool
var_2476 = relay.var("var_2476", dtype = "bool", shape = (12, 14, 15))#candidate|2476|(12, 14, 15)|var|bool
var_2477 = relay.var("var_2477", dtype = "float64", shape = (384,))#candidate|2477|(384,)|var|float64
var_2478 = relay.var("var_2478", dtype = "bool", shape = (616,))#candidate|2478|(616,)|var|bool
call_2474 = func_2473_call(var_2475,var_2476,var_2477,var_2478,)
output = call_2474
func_2479 = relay.Function([var_2475,var_2476,var_2477,var_2478,], output)
mutated_mod['func_2479'] = func_2479
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2591 = relay.var("var_2591", dtype = "int16", shape = (6, 15, 8))#candidate|2591|(6, 15, 8)|var|int16
var_2592 = relay.var("var_2592", dtype = "int16", shape = (6, 15, 8))#candidate|2592|(6, 15, 8)|var|int16
bop_2593 = relay.less_equal(var_2591.astype('bool'), relay.reshape(var_2592.astype('bool'), relay.shape_of(var_2591))) # shape=(6, 15, 8)
func_2473_call = mod.get_global_var('func_2473')
func_2479_call = mutated_mod.get_global_var('func_2479')
const_2597 = relay.const([True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,False,False,True,False,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,True,True,True,True,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,True,False,True,True,False,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,True,True,True,False,True,True,False,True,False,False,True,False,False,False,False,True,True,False,True,True,True,True,True,False,True,False,False,False,True,True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,True,False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,False,True,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,False,True,True,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,False,True,False,False,False,False,False,True,False,True,False,True,True,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,False,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,False,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,True,False,True,False,True,False,False,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,False,False,False,True,True,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,True,False,True,False,True,False,True,True,True,True,True,True,True,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,True,False,True,True,False,True,True,False,False,False,False,True,False,False,False,False,True,True,False,False,False,True,True,False,False,False,True,False,False,False,True,False,False,False,True,False,True,True,True,False,True,True,True,False,True,True,False,False,False,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,True,False,True,True,True,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,True,True,False,True,True,False,True,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,False,False,False,False,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,True,False,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,True,True,True,False,False,False,False,False,False,True,True,False,False,False,True,False,True,False,True,True,False,False,True,False,False,True,True,False,True,True,True,False,False,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,True,True,False,True,False,True,True,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,True,False,True,False,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,False,True,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,False,True,False,False,False,False,True,True,False,True,True,True,False,False,False,True,False,True,False,False,False,True,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,False,False,True,True,True,False,True,True,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,True,False,False,False,False,False,False,True,True,True,False,False,True,True,True,True,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,False,True,True,True,False,True,True,False,False,True,False,True,True,False,True,False,True,False,True,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,False,False,True,False,False,False,True,False,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,False,True,False,True,True,False,True,True,True,True,True,True,True,True,False,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,False,False,True,False,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,True,True,True,False,False,False,True,True,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,False,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,False,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,True,False,False,True,False,True,True,True,False,False,False,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,True,False,True,False,False,False,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,True,True,False,True,False,False,True,False,True,True,False,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,False,True,False,False,True,True,True,False,False,False,False,False,False,True,True,True,False,True,True,False,True,False,False,True,True,True,True,True,True,True,False,True,True,False,True,False,True,False,False,True,False,False,True,True,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,True,False,False,False,False,False,True,True,False,True,False,False,True,False,False,True,True,True,True,False,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,True,False,False,True,True,False,False,True,False,True,False,False,True,False,False,False,True,True,False,True,False,False,False,True,True,True,True,True,False,True,False,True,False,False,True,True,True,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,False,False,True,True,True,True,True,True,True,False,True,True,False,True,False,False,False,True,True,True,True,True,False,False,False,False,True,False,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,False,True,True,True,True,True,False,False,False,True,False,False,True,False,False,True,False,False,True,True,False,False,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,True,False,True,False,False,False,True,True,True,True,True,True,False,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,False,False,False,False,False,True,False,False,True,True,False,False,True,True,False,True,False,True,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,True,True,False,False,False,False,False,True,False,True,True,False,True,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,True,False,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,True,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,False,False,True,True,True,False,False,True,True,False,False,True,True,True,True,True,False,False,False,True,False,True,True,False,False,False,True,True,True,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,True,False,False,True,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,True,False,True,False,False,False,False,False,False,False,True,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,False,False,True,False,True,False,False,True,False,False,True,True,True,False,False,False,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,True,False,True,False,True,True,False,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,True,False,False,False,False,False,True,True,True,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,True,True,True,True,False,False,False,True,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,False,False,False,False,True,False,True,False,True,False,True,True,False,False,True,False,True,False,True,False,True,False,True,False,False,False,True,True,True,True,True,True,True,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,True,True,True,False,True,True,True,False,False,False,True,True,False,True,False,False,True,False,True,False,False,True,False,False,True,False,False,True,False,True,True,False,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,False,False,False,False,True,False,False,True,False,False,True,False,False,True,False,True,False,False,False,False,False,False,False,False,True,True,False,False,True,False,False,True,False,False,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,False,True,True,True,True,False,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,False,True,True,False], dtype = "bool")#candidate|2597|(2520,)|const|bool
const_2598 = relay.const([3.274667,9.850489,-0.384967,5.672637,-1.989522,3.061003,-1.957029,7.139623,2.962692,-1.803979,-4.630623,-2.592365,-7.476431,8.598575,-9.867958,6.208225,-4.892714,5.255450,9.514148,-9.566362,2.931563,9.602979,6.176810,-0.186102,1.939022,-9.345661,6.633488,9.646565,-7.560496,0.639472,-5.657133,-9.497345,0.422642,1.818184,-6.497767,9.790205,-1.571615,-1.975547,9.721917,-0.905069,3.376155,0.783496,6.058868,-5.037991,1.126498,3.441189,-7.920719,-8.625741,0.181376,7.015826,-3.384757,1.704704,4.140383,-3.070832,0.912630,-7.244248,-9.094123,9.374580,-4.592454,0.089104,-1.684992,5.143450,-7.454915,-3.922327,-8.495097,7.374882,-4.173768,1.351528,-1.582389,1.301508,-7.097974,3.962239,9.972931,6.341147,-6.516399,1.767978,1.867390,-0.517991,6.926442,9.282337,-7.188256,-3.047018,8.215866,-0.267210,2.101319,3.494139,2.409709,-3.662167,-7.309524,1.709031,-5.572335,4.784102,8.261478,3.510959,-9.075219,-5.902784,-0.224713,-3.305023,-7.583555,6.657981,-8.969920,-7.245637,8.207825,-3.743133,-5.243656,7.100041,-2.149288,-4.301913,-4.985541,-4.718232,-1.308271,0.510857,4.926085,-1.249187,-0.130364,-1.751212,4.842075,5.236040,1.707507,-6.480292,4.637543,8.984217,-0.679265,1.619855,5.829095,1.496775,2.076261,-4.954053,-2.635895,-7.274643,0.670932,2.805326,6.723651,9.425455,-2.677935,-0.806557,9.291140,-2.437050,3.599129,-5.900177,6.551870,-3.635819,-2.687612,-1.135027,-8.528754,-0.145513,9.100939,-5.692119,-9.914559,5.579393,1.826951,-4.909711,2.239149,-4.440043,-2.968708,-9.966789,-9.658795,-0.171138,4.602930,-2.874828,-0.875551,2.587479,-8.170637,-3.605216,-0.471393,-0.757548,-5.242014,-3.866845,3.628111,-8.178385,-2.032647,6.884205,-1.019282,3.404831,-4.436840,2.787935,-1.009585,-5.332208,-5.076191,9.089747,8.595774,-3.142701,-6.627136,5.830497,3.297969,-6.035246,-5.284946,-1.714112,7.198670,0.064270,2.435115,-7.609770,1.494656,4.507695,-4.759158,-3.967121,-3.131598,2.011129,-2.178795,-3.731335,-8.434287,9.370319,-3.646294,3.053352,2.632421,-7.142643,5.018822,4.094199,8.284083,-9.743003,7.191183,2.933861,4.016057,2.814668,-5.489528,9.836208,-1.222459,0.682004,6.143953,-2.358207,7.939459,5.697026,-9.874813,-7.688739,3.111427,9.078238,0.663026,-2.033962,2.943903,-2.794035,4.212286,-8.002743,-8.710941,5.544058,0.962213,4.798441,-6.916839,8.670153,6.430295,-1.577653,1.029716,5.583716,4.806654,4.996991,1.507943,-3.404227,-5.262753,-5.001560,-8.717595,-9.394058,-3.260949,4.071321,-0.466730,0.487062,-2.040710,3.764349,6.693925,-4.698119,-6.372757,1.207886,-0.066212,6.503118,-6.135250,4.733078,2.863675,-2.626306,0.966437,-1.711482,1.827225,3.528213,3.828692,6.431584,-1.557844,4.342707,4.056606,-8.109279,-4.932076,-4.210777,-2.497021,-5.762876,9.774420,2.601685,-0.380889,1.661758,9.642946,3.963874,0.075021,1.813435,-9.806823,-6.236236,2.065042,0.989964,-5.450988,-5.353535,-6.185179,-2.554898,-4.727257,-5.186618,7.332769,-5.923753,8.051718,-6.606118,-8.102893,-1.200329,-3.809750,-4.942078,0.955903,-3.975146,-3.931164,-2.028219,3.728278,-7.195556,-3.967793,-6.070216,-7.053442,-3.483582,-5.542097,-0.520237,-0.871095,1.890297,-5.853969,-0.474658,-4.477206,9.780392,-8.662977,5.251098,7.974560,6.266093,-4.815049,6.687621,-6.632786,-6.689095,-4.186762,7.253764,9.597069,-7.939094,-0.322549,-0.148436,2.509800,8.377290,5.444198,2.312857,6.360171,8.009966,-9.881634,-3.221054,-7.529583,1.878533,-2.023153,-6.077634,1.973507,4.511978,9.864181,-8.177322,7.729020,-2.776909,-9.391366,5.575113,-5.279421,-1.014434,-3.310670,8.184464,3.437577,0.807933,3.792628,-6.292399,-4.158290,1.060227,8.051016,-1.661263,0.346731,3.589842,-8.100942,6.689696,6.229887,4.001760,9.721274,6.765242,4.233980,-7.514086,-1.214926,-7.349149,-3.483812,-7.506093], dtype = "float64")#candidate|2598|(384,)|const|float64
const_2599 = relay.const([[False,False,False,True],[True,True,True,True],[True,False,True,True],[False,False,False,True],[False,False,True,False],[False,True,True,True],[False,False,False,False],[False,False,True,False],[False,True,True,True],[False,True,False,False],[True,True,True,False],[False,True,True,False],[False,False,False,False],[False,True,False,False],[True,False,False,False],[False,True,False,False],[True,False,True,True],[True,False,True,False],[True,True,False,True],[False,True,True,False],[False,False,True,False],[True,True,False,True],[True,True,True,False],[False,True,False,True],[True,False,True,False],[False,False,True,True],[True,True,True,False],[True,False,False,True],[False,True,True,False],[False,True,True,False],[False,False,False,True],[True,False,False,True],[False,True,True,False],[False,False,False,True],[False,True,True,True],[True,False,False,False],[True,True,False,False],[False,True,False,True],[True,False,False,False],[False,False,True,True],[False,True,True,False],[True,True,True,True],[False,True,False,False],[True,False,False,False],[True,False,False,False],[True,False,True,False],[False,True,False,True],[True,False,False,True],[True,True,True,False],[True,True,False,True],[False,False,True,True],[True,True,True,False],[True,False,False,False],[False,True,False,True],[False,True,False,False],[True,False,True,False],[True,True,False,False],[False,False,False,False],[True,True,True,False],[True,False,False,False],[False,True,True,True],[False,True,False,True],[False,False,True,True],[False,False,True,True],[True,False,False,True],[False,False,True,True],[True,False,True,False],[True,False,True,True],[True,False,False,True],[True,False,False,False],[False,True,True,False],[False,True,False,True],[True,False,True,True],[False,False,True,True],[True,False,False,False],[False,True,True,True],[True,False,True,False],[False,True,False,True],[True,False,True,True],[True,True,False,False],[True,True,True,True],[False,False,True,True],[True,True,True,True],[False,False,True,True],[False,False,True,True],[True,False,False,False],[False,True,True,True],[True,False,True,False],[True,False,False,True],[True,True,False,False],[False,True,True,False],[False,False,True,False],[False,False,True,False],[False,True,False,False],[True,False,True,False],[False,False,False,True],[True,False,True,False],[True,True,False,True],[True,True,True,True],[False,False,True,False],[True,True,False,True],[False,True,False,True],[True,True,True,True],[False,False,False,True],[False,True,True,False],[True,True,True,False],[False,True,True,False],[True,False,True,False],[True,True,False,False],[False,False,True,True],[True,True,False,True],[True,True,False,True],[False,True,True,True],[False,True,True,True],[False,False,True,True],[True,False,False,False],[False,False,False,False],[False,False,False,True],[True,False,True,False],[True,True,True,False],[True,True,True,True],[False,True,False,False],[True,False,True,False],[False,True,True,False],[True,True,True,True],[True,True,True,False],[True,False,False,True],[True,False,True,False],[True,False,False,True],[True,False,True,True],[False,False,True,True],[False,False,True,True],[False,False,True,True],[True,False,False,True],[False,False,False,True],[False,True,False,True],[True,False,False,True],[False,True,False,True],[False,True,False,False],[False,True,True,False],[False,False,True,True],[False,True,False,False],[False,False,False,False],[True,False,False,True],[False,False,False,False],[False,False,True,False],[True,True,False,True],[True,True,True,True],[False,True,False,False],[False,True,True,False],[True,True,True,True],[True,True,False,True],[True,False,True,True],[False,True,True,True]], dtype = "bool")#candidate|2599|(154, 4)|const|bool
call_2596 = relay.TupleGetItem(func_2473_call(relay.reshape(const_2597.astype('bool'), [12, 14, 15]), relay.reshape(const_2597.astype('bool'), [12, 14, 15]), relay.reshape(const_2598.astype('float64'), [384,]), relay.reshape(const_2599.astype('bool'), [616,]), ), 1)
call_2600 = relay.TupleGetItem(func_2479_call(relay.reshape(const_2597.astype('bool'), [12, 14, 15]), relay.reshape(const_2597.astype('bool'), [12, 14, 15]), relay.reshape(const_2598.astype('float64'), [384,]), relay.reshape(const_2599.astype('bool'), [616,]), ), 1)
bop_2603 = relay.right_shift(var_2591.astype('uint32'), relay.reshape(var_2592.astype('uint32'), relay.shape_of(var_2591))) # shape=(6, 15, 8)
func_1115_call = mod.get_global_var('func_1115')
func_1119_call = mutated_mod.get_global_var('func_1119')
var_2608 = relay.var("var_2608", dtype = "int32", shape = (1, 1920))#candidate|2608|(1, 1920)|var|int32
call_2607 = relay.TupleGetItem(func_1115_call(relay.reshape(const_2598.astype('float64'), [8, 8, 6]), relay.reshape(const_2599.astype('bool'), [616,]), relay.reshape(var_2608.astype('int32'), [1920,]), ), 5)
call_2609 = relay.TupleGetItem(func_1119_call(relay.reshape(const_2598.astype('float64'), [8, 8, 6]), relay.reshape(const_2599.astype('bool'), [616,]), relay.reshape(var_2608.astype('int32'), [1920,]), ), 5)
output = relay.Tuple([bop_2593,call_2596,const_2597,const_2598,const_2599,bop_2603,call_2607,var_2608,])
output2 = relay.Tuple([bop_2593,call_2600,const_2597,const_2598,const_2599,bop_2603,call_2609,var_2608,])
func_2612 = relay.Function([var_2591,var_2592,var_2608,], output)
mod['func_2612'] = func_2612
mod = relay.transform.InferType()(mod)
var_2613 = relay.var("var_2613", dtype = "int16", shape = (6, 15, 8))#candidate|2613|(6, 15, 8)|var|int16
var_2614 = relay.var("var_2614", dtype = "int16", shape = (6, 15, 8))#candidate|2614|(6, 15, 8)|var|int16
var_2615 = relay.var("var_2615", dtype = "int32", shape = (1, 1920))#candidate|2615|(1, 1920)|var|int32
output = func_2612(var_2613,var_2614,var_2615,)
func_2616 = relay.Function([var_2613,var_2614,var_2615,], output)
mutated_mod['func_2616'] = func_2616
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2657 = relay.var("var_2657", dtype = "int32", shape = (5, 15, 16))#candidate|2657|(5, 15, 16)|var|int32
var_2658 = relay.var("var_2658", dtype = "int32", shape = (5, 15, 16))#candidate|2658|(5, 15, 16)|var|int32
bop_2659 = relay.less(var_2657.astype('bool'), relay.reshape(var_2658.astype('bool'), relay.shape_of(var_2657))) # shape=(5, 15, 16)
output = bop_2659
output2 = bop_2659
func_2666 = relay.Function([var_2657,var_2658,], output)
mod['func_2666'] = func_2666
mod = relay.transform.InferType()(mod)
var_2667 = relay.var("var_2667", dtype = "int32", shape = (5, 15, 16))#candidate|2667|(5, 15, 16)|var|int32
var_2668 = relay.var("var_2668", dtype = "int32", shape = (5, 15, 16))#candidate|2668|(5, 15, 16)|var|int32
output = func_2666(var_2667,var_2668,)
func_2669 = relay.Function([var_2667,var_2668,], output)
mutated_mod['func_2669'] = func_2669
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3092 = relay.var("var_3092", dtype = "float32", shape = (11, 3, 14))#candidate|3092|(11, 3, 14)|var|float32
uop_3093 = relay.log10(var_3092.astype('float32')) # shape=(11, 3, 14)
output = uop_3093
output2 = uop_3093
func_3095 = relay.Function([var_3092,], output)
mod['func_3095'] = func_3095
mod = relay.transform.InferType()(mod)
mutated_mod['func_3095'] = func_3095
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3096 = relay.var("var_3096", dtype = "float32", shape = (11, 3, 14))#candidate|3096|(11, 3, 14)|var|float32
func_3095_call = mutated_mod.get_global_var('func_3095')
call_3097 = func_3095_call(var_3096)
output = call_3097
func_3098 = relay.Function([var_3096], output)
mutated_mod['func_3098'] = func_3098
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3365 = relay.const([[[5.465646,-8.039624,-3.896856,-6.522176,3.732907,9.055440,4.693566,6.753499,7.834470,3.169012,-5.984575,2.155447],[9.932102,-4.882810,-7.173023,9.583560,-7.165368,2.629191,-1.393280,5.585846,1.654735,-1.952960,9.510100,0.345197],[-7.538596,-1.092333,-7.009121,6.181223,-6.752605,6.855311,-8.514097,-6.517894,-2.672717,3.190134,4.261509,1.463857],[-8.956730,2.997575,4.148280,-6.352461,3.785189,-5.936622,-2.023792,1.878440,9.890297,-8.122597,-2.785423,8.689710],[-7.187974,5.813589,6.299783,-7.860558,-9.411927,2.564808,-9.751341,6.526158,-1.836024,4.915114,-5.720401,8.792861]],[[-4.173026,5.517421,-4.645890,0.395529,0.950994,-4.778676,3.737353,-9.902309,-8.457384,-1.602248,0.506787,8.551898],[0.780843,8.229110,7.083085,-9.141140,-9.174380,-8.232902,-0.888166,7.941323,-1.472664,-4.356164,-7.819289,2.978813],[1.083280,-2.212555,-9.384806,-8.692102,-7.736449,5.719258,8.444664,6.351225,0.337194,-8.896682,-1.155282,2.795205],[-4.230147,-7.787853,0.875034,8.269737,5.936922,6.045852,9.283894,-4.892521,7.274723,-9.111258,8.881662,-5.569653],[7.186823,-0.840688,-4.335069,8.931004,2.234750,-2.877140,8.025697,6.851683,5.354193,-8.515265,5.046422,-3.677762]],[[-6.728346,8.510620,6.076658,-3.303055,-9.006263,-6.089416,3.543596,8.803553,0.662267,8.092945,-9.566873,-1.385769],[1.404517,-0.913508,4.467446,-2.241674,7.610266,6.742180,8.483758,-4.790859,-8.237927,6.028631,-8.850895,-8.512434],[-6.838857,-1.471825,2.281031,-4.064747,-2.624457,2.166611,4.593756,8.775150,3.155527,8.168750,0.540571,-7.779395],[-5.138964,2.632454,0.780242,5.366205,1.866969,-0.683120,-1.664258,7.893722,9.215479,-3.049758,-0.246856,-9.845535],[-1.655483,9.951589,8.937667,5.915284,8.115267,-0.507201,-1.825143,-4.149488,8.709480,-8.352282,2.955524,-6.670156]],[[-1.287288,4.184395,9.008844,-8.789433,-4.138517,5.535206,-6.128764,9.531356,5.020192,-2.191937,2.655959,8.303246],[1.992448,-6.715481,5.417702,5.750187,8.376374,8.653598,-3.151203,-1.725519,5.381910,-6.644393,-5.398173,8.027230],[6.515490,-1.172941,-4.717746,-7.194388,6.974037,-4.900970,2.940442,7.473941,-8.640016,0.670309,-8.976003,6.852302],[5.031394,3.362182,-4.509531,9.668941,-6.323486,-5.443748,9.172189,-9.848931,-1.876646,-8.636813,6.706896,-4.217167],[-8.234587,-2.674023,-9.954421,-8.716467,-3.231237,1.880816,-2.758545,-1.652972,-6.656234,6.684518,7.582102,8.112969]],[[-6.589703,-0.820945,0.672485,2.566146,-2.073850,-8.306270,-6.082858,4.326491,4.034994,3.778318,0.953844,-4.072928],[-7.511816,-5.369381,-9.419088,5.920403,4.903775,-6.073698,6.473763,-5.293250,3.828419,-2.883281,9.129583,-2.648609],[-8.859182,-4.325536,-7.365119,-1.432842,-5.653927,-1.797143,-3.965223,7.718781,7.138523,-6.828750,7.034580,6.870088],[9.036049,-7.187813,5.787675,3.035558,-8.256141,8.203951,5.871842,-0.949419,-4.650152,-7.987809,-9.929630,-1.161911],[1.917511,-3.085510,7.147091,1.014120,9.729738,7.466057,7.723781,2.984345,-5.216606,-2.131598,-6.814615,7.625150]],[[3.942165,1.007415,9.643908,-6.438933,-9.506267,-2.230302,-1.879791,-9.825943,3.797225,-1.581412,6.883272,1.684439],[-3.248279,2.066815,-4.326843,-7.190773,-3.515026,7.549198,8.304845,-8.754412,7.486981,-9.999358,-2.370219,4.180538],[-3.865983,-1.352195,1.733248,-7.127885,1.997812,-9.662238,-9.148621,-1.459192,-4.979257,6.091069,4.078584,7.407023],[-0.918740,-0.568366,8.702602,-4.955776,5.314979,9.441805,-1.366034,-0.645291,1.404246,0.645820,0.674239,-7.544686],[-8.233587,-5.926970,3.434343,-5.030428,9.840560,-1.073060,-0.383178,-1.235130,-4.991537,4.272757,5.604949,-0.395702]]], dtype = "float32")#candidate|3365|(6, 5, 12)|const|float32
var_3366 = relay.var("var_3366", dtype = "float32", shape = (6, 5, 12))#candidate|3366|(6, 5, 12)|var|float32
bop_3367 = relay.divide(const_3365.astype('float32'), relay.reshape(var_3366.astype('float32'), relay.shape_of(const_3365))) # shape=(6, 5, 12)
bop_3389 = relay.maximum(bop_3367.astype('float64'), relay.reshape(const_3365.astype('float64'), relay.shape_of(bop_3367))) # shape=(6, 5, 12)
func_165_call = mod.get_global_var('func_165')
func_169_call = mutated_mod.get_global_var('func_169')
const_3394 = relay.const([-8,8,2,-4,3,5,-8,1,4,6,3,-5,2,3,2,4,5,-7,-3,3,9,-9,-9,-8,10,-1,3,-1,-7,-9,-8,-1,8,-9,1,8,-10,-10,-9,-9,2,4,-7,-10,-1,3,5,-2,4,-3,-5,-6,10,-3,-4,-8,6,2,6,8,-1,9,-7,-9,4,7,-5,-6,8,-1,-4,9,-10,-1,-2,-6,-2,-1,5,9,3,1,-8,2,6,10,-2,-10,-1,9,-2,8,-9,2,-10,5,6,3,5,-1,9,-3,-2,3,5,-7,-8,-10,8,1,4,3,-6,-5,-10,-3,10,9,-10,3,6,-2,-7,-1,8,-2,2,4,2,10,-8,2,-9,-7,-3,6,-2,-6,-5,-3,3,-5,1,-2,1,-4,4,-6,-6,4,5,3,-8,-6,9,6,-5,6,2,-8,9,3,-9,-10,4,-6,-4,6,-7,-7,-2,-8,-3,2,4,8,3,9,-10,6,-3,-3,-9,-10,-1,-5,-9,-1,-9,10,4,-7,1,8,-4,-7,7,3,7,4,-2,3,4,-8,7,-4,-7,-8,6,-4,-10,-7,-9,3,-6,5,10,1,-4,-6,-6,1,-1,4,7,-10,-6,-6,-9,-4,9,-3,9,-2,-1,-3,-9,10,7,9,-1,3,-8,-6,-9,10,-10,-7,-6,-2,-7,4,3,-8,-10,-4,-8,10,-7,2,5,-4,-6,-5,-1,-1,-4,-4,1,-5,1,-1,6,4,6,-1,-8,7,7,-8,9,-5,-6,-9,-1,7,-6,10,10,7,-1,-10,-3,-5,-8,-9,2,-1,-4,-5,-5,-6,1,-4,3,-8,8,-3,4,3,3,-9,5,3,-10,-4,-3,7,10,6,3,-6,-1,-3,-1,8,-6,8,7,-1,-2,-2,-7,8,10,-1,-9,3,-9,6,3,-1,1,10,-1,-6,8,-7,-9,-4,-10,-4,-3,-8,3,10,9,5,-1,7,8,6,-1,2,-9,-1,-3,-7,-1,-9,-10,-10,-2,-9,10,6,1,-5,-6,-4,-5,-5,9,-7,8,5,-6,-7,2,1,3,-1,1,9,-4,2,8,-10,-9,9,4,5,9,-8,9,-4,-7,7,10,5,8,3,-7,5,1,-5,-8,-5,-4,9,-2,-6,-7,-7,8,2,3,2,-10,8,-2,6,-5,6,-4,5,-9,5,3,-4,-5,-6,2,10,6,-3,3,8,-2,9,1,-2,-4,-6,-10,-7,5,-5,3,8,3,8], dtype = "uint8")#candidate|3394|(462,)|const|uint8
call_3393 = relay.TupleGetItem(func_165_call(relay.reshape(const_3394.astype('uint8'), [7, 6, 11]), relay.reshape(const_3394.astype('uint8'), [7, 6, 11]), ), 4)
call_3395 = relay.TupleGetItem(func_169_call(relay.reshape(const_3394.astype('uint8'), [7, 6, 11]), relay.reshape(const_3394.astype('uint8'), [7, 6, 11]), ), 4)
output = relay.Tuple([bop_3389,call_3393,const_3394,])
output2 = relay.Tuple([bop_3389,call_3395,const_3394,])
func_3404 = relay.Function([var_3366,], output)
mod['func_3404'] = func_3404
mod = relay.transform.InferType()(mod)
mutated_mod['func_3404'] = func_3404
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3405 = relay.var("var_3405", dtype = "float32", shape = (6, 5, 12))#candidate|3405|(6, 5, 12)|var|float32
func_3404_call = mutated_mod.get_global_var('func_3404')
call_3406 = func_3404_call(var_3405)
output = call_3406
func_3407 = relay.Function([var_3405], output)
mutated_mod['func_3407'] = func_3407
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4299 = relay.var("var_4299", dtype = "float32", shape = (9, 4, 7))#candidate|4299|(9, 4, 7)|var|float32
uop_4300 = relay.exp(var_4299.astype('float32')) # shape=(9, 4, 7)
uop_4314 = relay.sigmoid(uop_4300.astype('float32')) # shape=(9, 4, 7)
output = uop_4314
output2 = uop_4314
func_4331 = relay.Function([var_4299,], output)
mod['func_4331'] = func_4331
mod = relay.transform.InferType()(mod)
var_4332 = relay.var("var_4332", dtype = "float32", shape = (9, 4, 7))#candidate|4332|(9, 4, 7)|var|float32
output = func_4331(var_4332)
func_4333 = relay.Function([var_4332], output)
mutated_mod['func_4333'] = func_4333
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4371 = relay.var("var_4371", dtype = "float32", shape = (2, 1, 3))#candidate|4371|(2, 1, 3)|var|float32
uop_4372 = relay.erf(var_4371.astype('float32')) # shape=(2, 1, 3)
func_2473_call = mod.get_global_var('func_2473')
func_2479_call = mutated_mod.get_global_var('func_2479')
var_4378 = relay.var("var_4378", dtype = "bool", shape = (630, 4))#candidate|4378|(630, 4)|var|bool
const_4379 = relay.const([-7.448157,-5.172318,-0.032920,2.658842,-1.581447,-2.704638,0.589140,1.437108,-9.162850,6.525006,2.717146,-7.506251,3.675023,0.390155,6.253172,-5.439498,-6.947934,-6.540238,9.721010,-3.218775,-6.269098,-2.943687,7.384875,-5.308109,-0.165173,-6.118576,7.465830,2.418595,1.625088,-6.631954,-7.847743,-2.312412,4.177949,5.220271,-2.101996,-6.045732,-7.966085,-7.915360,-4.635649,-8.897823,-4.770087,-0.601094,8.423495,8.777758,-4.216575,2.893782,-7.467042,-7.867668,-8.905186,-2.392660,1.359480,-7.892810,8.624989,7.047246,5.147534,-8.040942,7.188039,5.008006,-6.297711,3.799758,-8.804120,-1.650679,7.349963,6.292359,-9.572931,-9.457514,-3.100655,-5.126649,-9.550142,-6.676114,2.397052,7.512468,1.796882,5.004439,9.624409,5.110120,-1.071276,5.495875,-5.523954,2.470561,-7.801229,-4.459773,-8.854965,1.656209,4.671728,-9.895370,-9.366586,6.031403,3.060750,-6.808659,8.983581,-3.048615,2.109692,6.914238,-4.971072,-0.892207,4.849615,-1.051472,7.016024,-9.797840,7.949165,7.229781,-7.999714,8.914329,-2.715774,5.257905,0.856090,1.566983,5.636468,-1.755356,8.873645,-1.158137,-8.746207,6.983299,-8.908726,-9.171896,-3.712441,-5.068432,-6.806814,-7.209085,2.509830,-7.001850,-8.742629,8.314975,8.256466,8.832849,-6.983040,7.829306,-9.071243,4.121581,-6.614679,-2.657728,4.432067,1.180994,5.955312,-7.300132,0.620335,7.238150,-8.131855,8.962067,5.847078,9.468056,8.522055,-7.349411,1.467575,-6.361660,9.776120,-0.338903,5.437413,-7.399482,-8.712456,0.714155,3.380258,5.439043,8.820445,0.828166,5.879089,4.233059,3.280199,3.313063,5.283532,-1.711500,-6.549148,4.680270,7.557653,-9.781182,5.432545,7.786913,4.064037,-2.208586,-0.513345,8.092392,-3.892798,-4.054709,-8.684940,-1.391264,2.622387,-8.845853,-6.806086,-7.970835,9.966383,6.672137,-8.918022,7.762841,9.954559,9.040496,-8.773558,7.058068,2.425344,-1.173794,5.853967,9.720631,-6.177171,7.468824,5.529298,-3.452172,-3.436172,8.354651,-3.981497,-6.965973,5.213282,4.494192,-4.298257,-6.654775,-0.230512,1.294697,-9.054660,3.912255,-1.516676,8.900224,-4.577486,-8.983141,0.535970,3.905391,8.088962,9.840351,5.283286,-4.836152,0.042833,6.295081,7.461269,-2.946961,0.709483,-1.189096,-7.549232,-4.157203,6.630115,0.605057,-2.970696,6.374015,8.263203,-9.609904,9.920133,-5.474763,-7.963329,4.554368,6.031081,5.624424,2.575689,-4.629411,0.534498,-6.300797,-8.784169,4.613952,-2.539794,-4.209116,7.849634,1.200456,1.217495,8.951246,7.616437,8.964616,-5.321197,-8.331606,6.659504,6.565220,2.722260,9.895285,-8.573978,-7.951266,7.054618,-5.294236,-3.301469,-9.539705,0.901714,6.893364,-4.090669,7.934796,2.703231,-8.544044,2.038637,2.999284,0.724417,-3.339039,9.377483,-7.050645,3.049903,8.083086,-4.846802,4.993907,9.446538,8.678635,3.681196,7.795795,-2.979443,7.281958,0.815320,-5.645401,-8.336088,-0.831239,7.178170,-9.475197,3.210495,-3.693366,7.146503,-5.326740,-8.581042,-5.709119,-8.483228,-3.745811,0.491231,-3.358878,-1.801611,8.861452,6.256996,-0.707291,4.343671,3.092094,-4.742479,-9.272510,6.919027,2.237946,-0.096121,-3.825048,9.702761,2.608724,-1.790805,3.087135,-4.601687,6.616411,5.876948,7.174904,1.911262,8.096487,-7.660342,3.611575,-4.450349,-4.571442,3.555931,-9.337492,7.165329,9.339272,5.940064,4.173970,-5.996793,-0.555637,-8.175483,-7.379888,-8.851997,-3.875272,6.963084,8.006095,-2.594872,0.536494,-5.070373,-4.376494,9.554213,4.957055,-1.877793,3.574563,-0.466404,-0.473975,6.760830,-6.346742,5.693529,-0.999562,-6.276198,-5.417967,3.989652,-5.717073,7.609997,-3.152691,7.022724,-1.067831,-2.479965,-1.488325,9.501146,8.706168,2.844531,-7.058675,-3.796573,9.478096,-5.670099,6.423530,2.424831,8.204787,-6.764681,-4.023568,-0.496858,-2.714803,-8.633379,3.910391,7.510373,-2.633181], dtype = "float64")#candidate|4379|(384,)|const|float64
var_4380 = relay.var("var_4380", dtype = "bool", shape = (616,))#candidate|4380|(616,)|var|bool
call_4377 = relay.TupleGetItem(func_2473_call(relay.reshape(var_4378.astype('bool'), [12, 14, 15]), relay.reshape(var_4378.astype('bool'), [12, 14, 15]), relay.reshape(const_4379.astype('float64'), [384,]), relay.reshape(var_4380.astype('bool'), [616,]), ), 0)
call_4381 = relay.TupleGetItem(func_2479_call(relay.reshape(var_4378.astype('bool'), [12, 14, 15]), relay.reshape(var_4378.astype('bool'), [12, 14, 15]), relay.reshape(const_4379.astype('float64'), [384,]), relay.reshape(var_4380.astype('bool'), [616,]), ), 0)
func_241_call = mod.get_global_var('func_241')
func_244_call = mutated_mod.get_global_var('func_244')
const_4384 = relay.const([[-4,-6,-8,8,4,-10,10,3,5,-8,-8,-10,-1,8,-2],[2,-1,-4,-1,-3,-8,1,2,-3,-2,9,-1,-4,4,10],[-2,2,3,6,-10,8,3,-5,3,-9,8,4,9,-2,10],[8,6,-9,6,2,-4,2,-10,-10,7,-8,1,4,10,2],[-10,3,-8,5,-8,10,7,-7,10,-10,9,2,7,-10,4],[10,2,-9,6,4,1,5,-7,5,-2,-4,10,-2,4,8],[4,3,1,-6,-6,-10,6,4,-8,1,-3,-2,3,-2,6],[6,-7,-5,2,5,6,4,-1,-3,7,-10,1,3,-5,-10],[8,10,6,6,-9,-8,8,-6,10,1,-5,10,-2,9,-10],[6,-6,5,-4,-2,2,7,-1,3,4,3,-5,-5,-5,-2],[-3,5,7,-3,-1,-5,4,4,-6,-1,1,10,-4,-10,-1],[-6,-5,6,-10,-4,-4,5,10,7,8,-8,9,-4,-5,4],[9,2,10,7,-7,-3,1,-10,7,8,-5,-4,-4,-9,-3]], dtype = "uint64")#candidate|4384|(13, 15)|const|uint64
call_4383 = relay.TupleGetItem(func_241_call(relay.reshape(const_4384.astype('uint64'), [13, 15, 1])), 1)
call_4385 = relay.TupleGetItem(func_244_call(relay.reshape(const_4384.astype('uint64'), [13, 15, 1])), 1)
output = relay.Tuple([uop_4372,call_4377,var_4378,const_4379,var_4380,call_4383,const_4384,])
output2 = relay.Tuple([uop_4372,call_4381,var_4378,const_4379,var_4380,call_4385,const_4384,])
func_4387 = relay.Function([var_4371,var_4378,var_4380,], output)
mod['func_4387'] = func_4387
mod = relay.transform.InferType()(mod)
mutated_mod['func_4387'] = func_4387
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4387_call = mutated_mod.get_global_var('func_4387')
var_4389 = relay.var("var_4389", dtype = "float32", shape = (2, 1, 3))#candidate|4389|(2, 1, 3)|var|float32
var_4390 = relay.var("var_4390", dtype = "bool", shape = (630, 4))#candidate|4390|(630, 4)|var|bool
var_4391 = relay.var("var_4391", dtype = "bool", shape = (616,))#candidate|4391|(616,)|var|bool
call_4388 = func_4387_call(var_4389,var_4390,var_4391,)
output = call_4388
func_4392 = relay.Function([var_4389,var_4390,var_4391,], output)
mutated_mod['func_4392'] = func_4392
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4545 = relay.var("var_4545", dtype = "float64", shape = (9, 13, 8))#candidate|4545|(9, 13, 8)|var|float64
uop_4546 = relay.atan(var_4545.astype('float64')) # shape=(9, 13, 8)
bop_4554 = relay.subtract(uop_4546.astype('int32'), relay.reshape(var_4545.astype('int32'), relay.shape_of(uop_4546))) # shape=(9, 13, 8)
output = relay.Tuple([bop_4554,])
output2 = relay.Tuple([bop_4554,])
func_4559 = relay.Function([var_4545,], output)
mod['func_4559'] = func_4559
mod = relay.transform.InferType()(mod)
var_4560 = relay.var("var_4560", dtype = "float64", shape = (9, 13, 8))#candidate|4560|(9, 13, 8)|var|float64
output = func_4559(var_4560)
func_4561 = relay.Function([var_4560], output)
mutated_mod['func_4561'] = func_4561
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4615 = relay.var("var_4615", dtype = "uint16", shape = (13, 10, 16))#candidate|4615|(13, 10, 16)|var|uint16
var_4616 = relay.var("var_4616", dtype = "uint16", shape = (13, 10, 16))#candidate|4616|(13, 10, 16)|var|uint16
bop_4617 = relay.not_equal(var_4615.astype('bool'), relay.reshape(var_4616.astype('bool'), relay.shape_of(var_4615))) # shape=(13, 10, 16)
output = bop_4617
output2 = bop_4617
func_4620 = relay.Function([var_4615,var_4616,], output)
mod['func_4620'] = func_4620
mod = relay.transform.InferType()(mod)
var_4621 = relay.var("var_4621", dtype = "uint16", shape = (13, 10, 16))#candidate|4621|(13, 10, 16)|var|uint16
var_4622 = relay.var("var_4622", dtype = "uint16", shape = (13, 10, 16))#candidate|4622|(13, 10, 16)|var|uint16
output = func_4620(var_4621,var_4622,)
func_4623 = relay.Function([var_4621,var_4622,], output)
mutated_mod['func_4623'] = func_4623
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5242 = relay.const(3, dtype = "int64")#candidate|5242|()|const|int64
var_5243 = relay.var("var_5243", dtype = "int64", shape = (4, 10, 2))#candidate|5243|(4, 10, 2)|var|int64
bop_5244 = relay.multiply(const_5242.astype('int64'), var_5243.astype('int64')) # shape=(4, 10, 2)
output = relay.Tuple([bop_5244,])
output2 = relay.Tuple([bop_5244,])
func_5247 = relay.Function([var_5243,], output)
mod['func_5247'] = func_5247
mod = relay.transform.InferType()(mod)
mutated_mod['func_5247'] = func_5247
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5248 = relay.var("var_5248", dtype = "int64", shape = (4, 10, 2))#candidate|5248|(4, 10, 2)|var|int64
func_5247_call = mutated_mod.get_global_var('func_5247')
call_5249 = func_5247_call(var_5248)
output = call_5249
func_5250 = relay.Function([var_5248], output)
mutated_mod['func_5250'] = func_5250
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5435 = relay.const([[[-9,-1,2,-8,-9,7,-1,7,8,-3,-3,10,5],[4,8,-6,-2,-2,8,-9,-6,-7,9,-8,-10,-7],[5,-7,-3,-8,10,-10,3,-7,1,-10,-4,-5,10],[8,-6,5,4,-6,4,-8,8,-7,9,1,-1,8],[-7,8,6,-1,3,-8,9,6,5,-6,-3,3,-8],[-5,-7,-6,-5,4,-10,-6,1,2,7,3,-3,7],[3,-9,6,2,6,-8,10,-4,6,-3,-5,9,2],[-6,-1,10,-6,-7,-10,6,8,-7,-7,-1,3,10],[-9,-10,10,-6,10,9,3,-8,6,3,9,2,-2],[-9,-7,1,-9,-6,8,2,-6,-5,8,5,9,-5],[7,6,-10,-2,-5,2,-5,-3,-8,2,7,-4,3],[8,-7,-2,-2,-2,5,-9,9,2,-10,9,-1,6]],[[10,-2,1,-7,-3,-3,-9,-7,-10,-5,-10,5,2],[-1,-6,-1,-7,3,1,6,-1,8,3,6,-4,2],[-8,5,2,-2,-1,7,6,-7,2,-2,4,4,-7],[-1,-3,-2,-2,2,-3,4,-7,-3,3,-3,-7,7],[-7,7,5,-3,-4,1,2,-2,10,-8,-9,2,-4],[4,-10,-1,3,-8,-9,-7,8,9,-3,-4,6,-2],[6,6,8,1,10,4,-1,2,-5,-1,10,4,10],[8,1,-3,-3,7,9,-9,10,-4,10,-1,8,-10],[1,-4,2,-10,-2,-2,-2,-4,6,1,1,-9,1],[5,-9,10,9,-2,3,-5,-7,-10,3,9,9,7],[5,-10,5,8,2,-5,-9,3,-1,9,-3,-4,-4],[8,-2,5,3,6,3,-2,-9,6,-6,-3,7,-2]],[[2,-7,-2,10,-3,3,-2,-6,10,-10,4,10,4],[6,7,2,-5,-4,5,1,10,-6,3,-7,-9,-6],[2,-5,-9,-10,9,4,10,-3,5,-2,9,7,-9],[5,-1,3,6,2,8,-2,3,-1,7,9,-9,6],[1,8,-10,-10,-5,-8,2,6,3,7,7,8,-3],[5,8,-9,-9,-10,1,1,6,7,-9,-8,-3,8],[-4,-6,-5,-10,-4,-3,6,-1,-7,3,2,-1,-2],[-3,5,-7,-10,-7,-5,10,-8,4,10,10,-8,9],[2,-2,9,1,7,-5,4,5,-1,-1,-10,2,10],[7,5,-9,6,-1,-5,10,-4,-2,-9,6,-2,10],[1,1,-3,9,-4,5,10,-8,-10,-10,5,1,-8],[7,-5,1,-6,7,-3,-7,7,-1,-8,1,-7,-10]],[[-2,10,9,10,-4,-10,-7,2,-5,9,1,-8,-8],[4,-9,-10,9,-1,-9,2,3,-4,1,10,-2,-8],[8,-1,5,2,2,-3,5,-9,6,-6,5,9,5],[-2,8,-2,-3,5,-8,2,-10,-3,10,9,-5,-2],[4,-4,1,-8,5,-9,2,-6,10,2,-2,7,9],[7,3,-4,-3,8,4,6,5,-8,7,7,2,9],[4,-8,-4,-7,-4,-5,-9,2,-8,-3,-2,-10,-6],[8,4,-6,7,-1,8,-9,-7,9,7,9,10,8],[4,-4,-3,-10,2,-7,-9,2,-4,-10,-3,-7,10],[6,10,3,2,-4,-2,3,-10,4,7,-5,-7,4],[-3,10,8,5,-10,2,10,6,-8,-5,-9,8,-5],[9,-9,1,5,-7,-7,-3,-5,-10,8,-4,-5,7]],[[-7,10,-9,3,-1,9,-6,-10,-9,2,5,6,8],[-2,-8,-8,5,7,8,-1,4,6,-4,-3,-7,-6],[6,8,1,-8,-10,-4,-6,-6,-10,-5,6,-4,-8],[-3,1,1,-1,-3,10,1,-10,4,3,4,8,-8],[3,-3,9,9,-5,-9,-9,9,6,9,3,3,3],[3,-7,6,-3,2,-6,3,-9,-10,-5,-10,-8,-6],[-4,1,6,-1,-5,4,5,-1,5,4,6,-4,2],[-3,-5,-3,10,6,-8,-1,-3,2,-1,1,-8,-1],[9,-7,-1,1,-9,-7,-10,5,10,-10,10,-3,4],[-6,6,-7,3,6,-4,2,-3,2,-1,-9,2,-6],[-9,3,10,6,-7,1,-4,-5,-3,-4,7,-8,-5],[-1,-8,1,-5,-1,-4,-3,9,-2,-10,-3,-8,-9]]], dtype = "int32")#candidate|5435|(5, 12, 13)|const|int32
var_5436 = relay.var("var_5436", dtype = "int32", shape = (5, 12, 13))#candidate|5436|(5, 12, 13)|var|int32
bop_5437 = relay.right_shift(const_5435.astype('int32'), relay.reshape(var_5436.astype('int32'), relay.shape_of(const_5435))) # shape=(5, 12, 13)
bop_5451 = relay.less(var_5436.astype('bool'), relay.reshape(const_5435.astype('bool'), relay.shape_of(var_5436))) # shape=(5, 12, 13)
func_1115_call = mod.get_global_var('func_1115')
func_1119_call = mutated_mod.get_global_var('func_1119')
const_5466 = relay.const([[8.641864,-6.375835,6.647550,0.311502,4.041372,6.493580,-6.523467,-2.702224],[-5.330756,3.907598,1.061378,-6.851652,3.435108,-4.870670,0.940046,-7.807707],[-0.200387,-9.421498,5.838530,-3.214053,-6.872110,-5.298606,-7.445316,8.438807],[5.101267,-2.848424,4.294442,-8.120442,-5.001490,4.204071,2.083062,9.656262],[-3.645503,-1.898649,4.995354,8.257617,-5.099984,-3.291525,-3.379383,4.219410],[-8.990871,9.198110,-0.273812,9.980227,-6.406986,-3.587214,-7.449853,-6.055071],[6.580571,-5.682988,8.869333,0.209982,8.720321,-4.324458,9.589501,-9.240468],[0.422896,-9.028645,9.849110,3.483192,-0.475980,2.442087,4.565169,1.461755],[-0.255108,8.078009,0.865880,0.599805,-2.639608,0.077917,3.793611,9.103103],[2.685263,-6.667131,4.916578,-8.968084,-9.517182,-4.142311,2.568994,-6.130322],[-3.477775,4.160800,-2.621285,-5.580392,-5.567761,0.116641,0.370066,5.297385],[-6.820967,3.275996,6.676249,6.721050,-8.592257,1.876040,8.400892,9.603817],[1.832064,-8.876814,-3.398706,-0.852352,-0.138140,-1.074119,-5.398124,-1.305729],[-2.685389,2.771216,5.687042,0.086478,-2.820845,-1.021029,-9.024054,8.700770],[-1.717314,-1.701246,4.340319,-7.396072,-9.613889,7.027568,-7.483156,8.169552],[-7.859887,-2.001605,7.745629,9.789700,-7.920240,1.783974,9.115687,-6.763875],[-2.435928,-0.369399,3.212021,9.091605,-5.253455,-6.458778,-1.175156,6.178854],[-4.006390,4.887474,3.360591,-8.077487,-1.604585,-8.882610,-7.171309,3.474612],[2.145885,-2.842842,-7.401374,-8.142523,2.313405,5.706641,-4.813921,-6.195759],[-1.622581,-0.184451,-5.338781,4.344844,9.720078,-6.321030,-4.248081,-0.682838],[-5.028958,-8.448109,9.675763,2.689083,-7.178958,-6.793564,0.078486,6.442561],[-4.484749,5.812093,-6.388067,8.346521,-0.209077,-9.356669,-3.065275,0.423596],[8.862689,5.266814,-2.608232,9.322224,-6.919489,-9.290936,-0.266247,0.081405],[1.781797,7.426629,-8.824201,1.763474,9.077365,6.415474,0.842849,-6.500569],[3.988083,2.774315,-2.238285,-3.114242,-0.524573,-4.208350,-5.876905,-2.706342],[-9.890751,-5.128195,-7.307485,7.227711,2.934719,9.219871,0.124329,3.394754],[-3.860506,4.288875,-4.422470,4.247417,-0.978454,2.519884,4.062920,-6.007749],[-7.645891,-1.124796,1.487465,-3.562118,4.593553,1.113430,3.117783,3.405736],[5.579876,-4.347717,-0.611253,-1.736149,8.779775,3.424334,8.615020,-2.657587],[-9.110942,9.207216,-9.531994,-6.697828,0.087186,0.391462,5.774195,-6.662568],[8.831944,-7.461101,-9.958208,-8.448629,-8.831787,1.635901,6.918939,6.371658],[-1.722682,0.205610,-4.877899,-0.457772,4.894535,-2.680050,-2.460904,1.935642],[5.104209,2.150848,2.430975,2.647031,-2.424144,7.811298,-6.338586,5.621258],[4.949648,-9.322385,0.559085,-4.479029,-3.373375,0.242101,1.866079,-0.068936],[-7.656767,6.602366,2.869601,2.077713,6.546384,6.079982,-7.243623,-7.908513],[-8.593960,6.773202,-3.554572,-5.308597,4.696829,3.327881,9.837682,9.983990],[-6.757887,0.486775,-3.816821,0.921367,9.223678,9.222001,4.722040,-7.620059],[-8.661939,8.267134,4.744436,2.370029,9.225376,5.417145,-6.635878,-9.930024],[1.391481,-5.592139,4.936540,9.821985,6.992630,-2.396878,3.494446,-7.233287],[-5.633656,-9.496352,4.275777,-8.331425,-0.504475,2.014179,8.856192,2.258125],[9.755757,-5.879605,6.775428,-2.888222,-8.258999,-3.013747,3.778280,-3.291114],[-9.492813,6.557497,-4.553118,1.616102,3.842733,-5.175227,-4.526811,-8.676611],[0.815459,-1.774539,-7.874826,5.512944,1.045166,-9.155532,-4.630590,2.408027],[5.041664,1.211038,-5.061800,2.086489,9.539723,-3.067005,7.146394,-6.018668],[1.156927,-8.318140,6.162162,0.648642,3.554288,0.246474,-5.741372,-0.467403],[2.391442,9.841779,-3.449985,0.239580,-2.716961,-1.969723,-0.438112,7.954809],[1.125092,-1.414460,3.995331,-6.130653,3.336402,2.127551,-3.125127,-4.261589],[5.331269,4.032079,-2.641755,3.926751,2.427024,-4.992197,-6.645689,6.676654]], dtype = "float64")#candidate|5466|(48, 8)|const|float64
const_5467 = relay.const([False,False,True,True,False,True,False,True,False,True,False,True,True,True,False,False,False,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,False,True,False,True,True,True,True,True,True,False,True,False,True,True,False,False,True,True,True,False,True,True,False,True,False,True,False,True,True,True,False,True,False,False,True,True,False,False,False,True,True,False,True,False,True,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,True,True,False,True,False,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,True,True,True,True,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,False,False,False,False,False,True,True,False,False,False,True,False,True,True,True,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,True,False,True,True,False,False,False,False,False,False,False,False,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,True,True,False,False,False,True,False,True,True,False,False,True,False,False,True,False,True,True,True,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,True,False,False,True,False,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,False,False,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,True,True,True,True,False,True,True,True,True,True,True,True,False,True,True,False,True,True,False,False,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,False,True,False,True,True,False,True,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,True,False,True,True,True,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,True,False,False,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,False,True,False,False,True,False,False,True,True,True,False,True,True,True,True,False,True,True,True,True,False,False,True,True,True,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,True,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,False,True,True,True,True,True,True,False,True,False,False,False,True,False,False,False,True,True,False,True,False,True,False,True,False,False,True,False,False,False,False,False,False], dtype = "bool")#candidate|5467|(616,)|const|bool
var_5468 = relay.var("var_5468", dtype = "int32", shape = (1920,))#candidate|5468|(1920,)|var|int32
call_5465 = relay.TupleGetItem(func_1115_call(relay.reshape(const_5466.astype('float64'), [8, 8, 6]), relay.reshape(const_5467.astype('bool'), [616,]), relay.reshape(var_5468.astype('int32'), [1920,]), ), 0)
call_5469 = relay.TupleGetItem(func_1119_call(relay.reshape(const_5466.astype('float64'), [8, 8, 6]), relay.reshape(const_5467.astype('bool'), [616,]), relay.reshape(var_5468.astype('int32'), [1920,]), ), 0)
func_2473_call = mod.get_global_var('func_2473')
func_2479_call = mutated_mod.get_global_var('func_2479')
const_5489 = relay.const([False,False,True,True,True,False,True,False,False,False,True,True,False,True,True,True,False,True,False,False,True,False,True,False,False,False,True,False,False,True,True,False,True,False,True,True,False,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,True,True,True,True,True,True,False,False,False,False,False,True,True,True,False,False,True,False,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,False,True,True,False,True,False,False,True,False,True,False,True,True,False,True,False,False,False,True,False,True,True,True,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,True,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,True,True,True,False,False,True,False,True,False,False,True,True,False,True,True,False,True,False,False,True,True,False,False,True,False,False,True,False,False,False,True,True,True,False,False,False,True,False,True,False,True,False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,False,False,True,True,False,True,True,False,True,False,True,True,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,True,True,True,True,False,False,True,True,False,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,False,False,False,False,True,True,True,False,False,True,False,True,False,True,False,False,True,True,False,False,False,True,False,True,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,True,False,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,True,False,True,True,False,True,False,True,False,False,True,False,True,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,True,True,False,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,True,True,True,True,True,True,True,True,False,False,True,False,True,False,True,True,True,True,False,True,True,True,False,True,False,True,True,False,False,False,True,False,False,False,True,True,True,False,True,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True,False,False,False,False,True,True,False,True,True,False,False,True,False,True,True,True,True,False,True,True,True,True,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,False,True,False,True,True,True,True,False,False,False,True,False,True,False,True,False,False,False,False,False,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,True,False,True,True,True,True,True,True,False,True,True,False,True,True,False,False,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,False,False,True,True,False,False,False,False,True,True,False,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,False,False,False,False,True,False,True,True,True,True,True,False,False,True,False,False,False,False,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,False,True,False,False,True,False,False,True,True,True,False,True,True,False,False,True,True,True,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,True,True,True,True,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,False,True,False,False,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,False,True,False,True,False,False,False,True,True,False,True,False,False,True,False,True,True,False,True,False,True,False,False,False,True,False,True,True,True,False,True,True,True,False,True,True,False,True,True,False,False,False,False,False,True,False,True,True,False,False,True,True,True,True,False,False,False,True,True,True,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,True,True,False,False,True,True,False,True,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,False,False,True,False,True,True,False,False,False,True,True,True,False,False,False,False,False,False,True,True,False,False,False,False,True,False,False,True,True,True,True,True,True,False,False,True,True,False,True,False,False,False,True,False,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,True,False,True,True,False,True,True,False,True,True,True,False,False,True,False,True,True,False,False,False,True,False,True,False,True,False,False,False,False,True,True,True,True,False,False,True,False,False,False,True,True,True,True,False,False,False,True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,False,True,False,True,False,True,True,True,True,False,False,True,True,False,False,False,False,True,False,True,True,False,False,False,False,False,True,False,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,True,True,False,True,True,True,False,False,True,False,False,True,False,False,False,False,True,False,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,True,True,False,True,True,True,False,True,True,True,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,True,True,False,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,True,False,True,True,True,True,True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,False,True,False,True,False,False,True,True,False,True,True,True,True,False,True,False,True,False,False,False,False,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,True,False,True,True,True,False,False,True,True,False,True,False,False,False,False,False,True,True,False,True,False,True,True,False,False,False,False,False,True,False,False,True,False,True,False,False,False,True,True,True,True,False,True,True,False,True,True,False,False,False,True,True,True,False,True,True,False,False,True,False,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,False,False,False,False,False,False,False,True,True,False,True,False,True,True,True,True,True,False,False,True,False,True,False,True,False,True,False,True,True,True,False,False,True,False,False,True,False,False,True,True,True,False,True,False,True,False,True,False,False,True,True,False,False,True,True,False,True,False,False,False,True,False,False,False,False,True,True,False,True,False,True,False,False,False,False,True,False,True,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,True,True,False,True,True,True,False,True,True,False,False,True,False,True,False,False,False,True,True,True,False,True,False,True,True,False,True,False,True,False,True,True,True,True,False,False,False,True,False,False,True,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,True,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,True,False,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,False,True,False,True,True,True,False,True,False,False,True,False,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,False,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,False,True,False,True,True,True,True,False,True,True,True,True,False,True,True,True,True,True,False,False,True,True,True,True,True,True,True,True,False,False,True,True,True,False,False,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,True,True,True,True,True,True,False,False,True,False,True,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,False,True,False,False,True,True,False,True,True,True,True,True,False,False,True,False,False,True,True,False,True,True,False,False,True,False,True,True,True,False,True,True,True,False,True,False,True,False,True,True,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,True,False,True,False,False,True,False,True,False,False,True,False,True,True,False,False,False,False,True,False,True,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,False,True,True,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,False,True,True,False,True,False,False,False,True,False,False,False,False,False,True,False,False,True,False,False,True,False,True,True,False,True,False,True,True,False,True,False,True,False,False,False,False,True,False,True,True,False,True,True,False,True,False,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,True,True,False,True,True,True,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,True,False,False,True,True,False,False,True,True,False,False,True,False,False,False,True,False,True,False,False,True,False,True,True,False,True,True,False,True,False,True,True,False,True,False,True,False,True,False,True,True,False,False,True,False,False,False,False,True,False,True,True,False,False,False,True,True,True,True,True,True,False,False,True,False,False,False,False,True,True,True,False,True,True,True,False,True,True,False,True,True,True,False,False,True,False,True,True,True,False,False,False,True,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,True,False,True,True,False,True,True,True,True,False,False,False,False,False,False,True,False,True,False,True,True,True,True,True,True,True,True,False,True,True,True,True,False,False,False,False,False,True,True,True,True,False,False,True,False,False,True,True,False,True,False,True,True,True,False,False,False,False,True,False,True,False,True,True,False,True,True,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False], dtype = "bool")#candidate|5489|(2520,)|const|bool
call_5488 = relay.TupleGetItem(func_2473_call(relay.reshape(const_5489.astype('bool'), [12, 14, 15]), relay.reshape(const_5489.astype('bool'), [12, 14, 15]), relay.reshape(const_5466.astype('float64'), [384,]), relay.reshape(const_5467.astype('bool'), [616,]), ), 0)
call_5490 = relay.TupleGetItem(func_2479_call(relay.reshape(const_5489.astype('bool'), [12, 14, 15]), relay.reshape(const_5489.astype('bool'), [12, 14, 15]), relay.reshape(const_5466.astype('float64'), [384,]), relay.reshape(const_5467.astype('bool'), [616,]), ), 0)
func_3404_call = mod.get_global_var('func_3404')
func_3407_call = mutated_mod.get_global_var('func_3407')
const_5492 = relay.const([[-9.579720],[-9.458035],[3.043851],[9.969954],[1.722011],[0.562241],[3.249502],[-4.871364],[9.580283],[-0.606249],[6.261387],[7.289767],[-6.835100],[8.646761],[-0.464988],[-9.749988],[4.507451],[-7.399271],[1.621626],[-5.047777],[-8.213036],[6.207458],[2.615177],[-3.596039],[0.584886],[6.119207],[-9.025788],[6.388721],[4.850936],[1.722037],[-9.497608],[-0.975820],[-9.744253],[-6.945846],[-8.265731],[2.663745],[6.956247],[-1.632446],[-6.600692],[2.888012],[5.457184],[4.775148],[-4.610714],[5.395082],[6.153337],[7.000784],[-2.758789],[3.353574],[-6.773349],[-6.201019],[-0.385388],[9.142947],[-1.108457],[1.750686],[-2.932202],[-6.006722],[3.849597],[1.003860],[-4.066450],[-3.666036],[-3.117978],[-7.767588],[0.854103],[3.837461],[4.544892],[1.243448],[9.613879],[3.135876],[-1.225147],[8.703966],[-7.064096],[2.117256],[4.081743],[9.503463],[4.272895],[6.081417],[2.172449],[-2.275958],[5.936364],[-2.196494],[8.032391],[9.841105],[5.832448],[-4.971630],[9.216941],[-6.351407],[3.598657],[8.715200],[5.328408],[5.387016],[-0.141355],[-9.163978],[-9.379058],[1.361758],[-2.004228],[-9.480735],[7.066010],[3.869899],[5.602905],[-5.166548],[7.248761],[-2.263224],[-8.132097],[0.692481],[-7.343092],[-5.756902],[9.851220],[-2.270609],[9.574677],[3.788497],[1.960574],[3.720030],[8.091030],[5.486486],[-8.527762],[2.671268],[8.593146],[6.520348],[-3.941882],[9.487523],[0.701617],[2.890219],[-9.569934],[-5.914012],[4.841146],[3.804113],[8.516759],[1.924498],[7.064719],[4.249827],[8.393693],[2.676660],[-9.371224],[-4.596592],[9.356673],[3.024046],[-5.710076],[7.115249],[-6.595091],[-5.670133],[-8.327144],[9.148583],[7.057626],[-5.741750],[7.097640],[-7.817831],[2.695110],[0.987769],[-1.830750],[-7.647891],[0.200309],[-4.586924],[-8.550866],[-1.908586],[3.164558],[3.209173],[7.957524],[-2.592344],[2.182573],[4.802609],[-7.178838],[4.187259],[-7.748807],[-3.590957],[7.063735],[-6.874999],[-0.731797],[-2.223202],[4.300942],[-5.407966],[3.639541],[-6.744150],[-5.510489],[9.634411],[0.528468],[-6.554721],[6.544814],[2.350954],[3.612316],[-0.151125],[-2.490837],[5.434509],[-0.457334],[-2.980883],[5.652566],[-1.059401],[-6.941145],[0.296067],[2.592933],[-8.340703],[5.658396],[0.511741],[8.051945],[-5.437147],[-1.124695],[2.412427],[-5.415506],[2.861561],[-0.022083],[-9.501892],[-7.731803],[-4.128429],[5.777699],[1.044880],[6.734495],[9.878685],[8.437166],[8.364758],[-0.694375],[5.814259],[-9.437033],[1.761729],[4.145587],[1.377834],[-4.620429],[5.534047],[2.788503],[8.753766],[7.845580],[6.380024],[5.506692],[-4.489431],[8.377011],[3.900585],[2.793939],[-4.837987],[0.359479],[-5.370118],[2.849607],[-9.955255],[2.053363],[-3.778723],[3.817724],[6.531483],[7.451783],[2.953181],[-5.074943],[4.679957],[7.417560],[2.216060],[0.993838],[6.351365],[7.125252],[2.157868],[3.353521],[5.633394],[-9.909973],[6.253887],[2.253134],[-8.298828],[-5.144464],[0.252197],[6.497558],[-7.336587],[4.289493],[-8.401071],[-8.760677],[7.995682],[7.944543],[-3.015382],[-9.504899],[-4.148615],[2.507538],[9.239998],[-1.622955],[0.273116],[3.089975],[3.469743],[0.234889],[-2.885739],[1.390746],[4.382142],[-8.879627],[-3.591260],[-2.373969],[-5.277687],[-4.383004],[7.302942],[8.767937],[-8.355613],[-4.277316],[-7.713483],[6.247687],[4.619880],[2.574798],[2.788668],[-1.442657],[-0.144832],[-2.108040],[-7.446322],[2.569859],[5.604864],[0.374147],[-3.142572],[3.637719],[7.268218],[-8.222338],[-6.895265],[6.170705],[9.919712],[8.356101],[-9.434766],[0.017156],[-8.356237],[8.769315],[-0.830086],[3.102495],[-2.026701],[-4.131518],[7.003367],[5.867826],[-2.724749],[-8.931657],[9.231346],[-3.517927],[8.919457],[-3.378325],[7.431084],[-2.338081],[4.261245],[-4.667799],[2.370523],[1.326662],[3.953842],[-7.759583],[-8.316219],[2.509147],[5.979383],[8.161708],[9.063560],[4.488580],[3.801001],[-9.086639],[-7.141834],[-8.150836],[-8.727597],[1.351230],[-7.661333],[6.874208],[6.726529],[4.136480],[-6.186625],[-6.591287],[-4.042429],[-7.013782],[1.522014],[-6.020549],[9.464563],[5.584017],[-5.199103],[0.431115],[-8.497422],[-1.858692],[-3.997570],[-6.238002],[9.788268],[2.622863],[-0.332373],[2.837164],[1.978921]], dtype = "float32")#candidate|5492|(360, 1)|const|float32
call_5491 = relay.TupleGetItem(func_3404_call(relay.reshape(const_5492.astype('float32'), [6, 5, 12])), 0)
call_5493 = relay.TupleGetItem(func_3407_call(relay.reshape(const_5492.astype('float32'), [6, 5, 12])), 0)
bop_5498 = relay.not_equal(var_5436.astype('bool'), relay.reshape(bop_5451.astype('bool'), relay.shape_of(var_5436))) # shape=(5, 12, 13)
output = relay.Tuple([bop_5437,call_5465,const_5466,const_5467,var_5468,call_5488,const_5489,call_5491,const_5492,bop_5498,])
output2 = relay.Tuple([bop_5437,call_5469,const_5466,const_5467,var_5468,call_5490,const_5489,call_5493,const_5492,bop_5498,])
func_5503 = relay.Function([var_5436,var_5468,], output)
mod['func_5503'] = func_5503
mod = relay.transform.InferType()(mod)
var_5504 = relay.var("var_5504", dtype = "int32", shape = (5, 12, 13))#candidate|5504|(5, 12, 13)|var|int32
var_5505 = relay.var("var_5505", dtype = "int32", shape = (1920,))#candidate|5505|(1920,)|var|int32
output = func_5503(var_5504,var_5505,)
func_5506 = relay.Function([var_5504,var_5505,], output)
mutated_mod['func_5506'] = func_5506
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5749 = relay.var("var_5749", dtype = "bool", shape = (15, 1, 5))#candidate|5749|(15, 1, 5)|var|bool
var_5750 = relay.var("var_5750", dtype = "bool", shape = (15, 9, 5))#candidate|5750|(15, 9, 5)|var|bool
bop_5751 = relay.logical_and(var_5749.astype('bool'), var_5750.astype('bool')) # shape=(15, 9, 5)
func_4620_call = mod.get_global_var('func_4620')
func_4623_call = mutated_mod.get_global_var('func_4623')
const_5759 = relay.const([10,10,3,2,2,7,-5,8,-6,-8,7,-3,-5,-2,-6,4,4,-7,-1,10,-1,7,-4,5,3,4,-7,9,-6,1,-9,-7,8,9,3,3,6,1,4,3,-9,-7,4,10,-8,-9,5,1,-1,5,10,9,9,-8,-6,-10,6,1,7,9,10,4,7,9,6,2,-3,9,-9,-4,-6,9,-4,-3,2,6,-3,9,6,5,-3,5,6,-5,1,-1,4,2,-10,6,-8,-6,-3,-8,-5,8,-10,2,-6,-10,-6,5,-2,-7,1,-6,8,-9,-9,9,-10,9,-1,-5,-8,6,-7,-4,-10,-1,6,2,-1,4,-10,3,-1,9,3,-1,-2,-5,-9,-7,-1,4,10,-1,8,3,10,7,8,3,3,-2,-10,3,-7,-2,3,-6,-1,3,4,-7,-2,4,-4,1,1,-2,2,4,-8,-2,10,3,6,-3,4,3,-8,-7,-5,10,4,9,-7,-7,-9,7,8,-3,10,3,7,1,2,-6,6,3,9,-8,-6,3,-6,5,2,6,-5,5,4,5,-4,3,8,2,7,-6,-8,8,-9,8,2,-3,-5,-7,4,5,7,-10,3,2,3,-2,-7,5,-3,9,-6,-2,-1,-2,-3,3,-4,-4,-4,-8,6,-7,2,9,4,-1,-2,-1,-2,-10,-9,-6,7,-3,-8,-9,3,-7,8,10,-6,2,4,1,-8,4,3,4,9,10,-8,-10,-6,6,3,-6,7,-8,-3,8,1,3,-1,5,-4,-7,-5,3,-6,-5,-5,1,-1,2,8,-7,1,3,7,-3,-3,1,-1,-9,-5,7,5,9,-7,-10,-10,-1,9,6,2,-6,2,-2,4,-2,-4,-9,7,5,-9,-8,-5,4,3,-1,9,-9,-5,-6,10,9,6,-5,4,-8,6,-3,-3,5,7,2,-3,9,-1,8,2,7,5,-3,-1,-3,-7,8,-3,7,-10,6,-7,3,9,-9,-1,10,-10,5,6,-10,4,4,-2,-7,-7,6,-7,3,-2,-8,-3,-9,5,-4,-1,3,-2,-5,7,7,-7,9,-3,2,9,8,-2,4,-10,8,3,-9,10,1,5,1,-2,8,7,3,-1,7,-8,9,-9,9,10,-1,1,-6,-2,10,9,1,5,-1,5,-10,-9,10,5,4,-9,-6,6,9,-10,2,-5,5,-7,8,6,-4,6,5,-5,-7,-1,-5,4,5,-2,-3,-1,9,-7,-1,-7,-8,-1,6,-9,10,-7,-8,-8,-5,1,-7,10,-2,7,10,8,-8,-2,-5,-9,-2,10,7,3,8,4,10,-5,1,-6,7,10,3,2,-4,10,7,-5,8,8,6,5,-4,-6,4,7,-6,-9,-10,4,1,-9,6,3,-4,1,-3,-3,9,-3,3,-4,-6,7,-5,-1,7,-5,5,-6,-8,-8,3,9,5,5,-9,-7,6,-4,-7,7,6,6,3,10,-8,4,2,-5,3,-4,-1,-9,5,9,-10,-5,-10,6,2,5,-4,3,-2,2,-10,-8,-7,9,-4,-5,7,-9,-2,10,-2,-6,-6,4,-9,3,-5,2,10,8,-2,-8,-5,-5,1,1,-2,2,5,-8,-4,-4,2,5,-9,-5,5,7,-10,7,8,7,-6,-2,6,-5,-10,1,7,3,-8,7,4,3,8,7,9,-8,4,-6,-9,-3,4,-1,2,8,-6,3,-1,-6,-6,5,-1,-10,2,-7,9,-9,4,3,-6,5,-6,-2,5,-5,2,-8,-2,10,-4,-6,7,-3,7,-6,-7,-5,-9,1,6,7,-6,3,-3,4,7,2,7,-4,3,5,3,4,-6,6,-1,-2,-9,-6,5,2,2,-8,1,-1,-4,-4,-6,-8,3,6,8,10,-2,-10,8,3,-7,-7,2,1,-4,-2,-3,-7,-4,-10,-1,-8,7,-4,-1,3,7,-4,-7,5,-2,-6,-7,1,5,2,2,-1,-1,3,1,9,7,-8,-10,8,2,-7,6,-10,9,-7,3,7,-2,-7,-8,4,10,2,5,-2,-3,-5,4,9,7,-4,3,-6,4,1,-10,9,-5,9,-10,-10,-7,3,-10,7,-8,2,2,8,3,-10,-4,-2,10,10,2,7,5,-3,4,-6,10,-6,8,-10,3,4,7,-6,-7,8,-8,-1,7,-10,5,-3,-2,9,3,10,7,5,10,-4,-10,8,-7,9,-4,-5,4,4,-9,7,10,9,-1,-5,8,2,2,-3,1,-5,2,-2,9,4,8,-9,-9,10,-7,-3,-2,10,-6,-5,7,-2,9,7,1,-6,-3,9,-5,1,4,6,10,-2,-9,3,-6,-6,10,-2,5,2,-3,9,2,2,6,3,-4,-4,1,-2,6,-3,3,9,-5,5,4,8,6,3,7,-9,1,7,-3,-1,7,5,-3,-8,-7,-4,9,-8,-3,-6,-7,3,-8,-1,9,2,-10,-6,3,-9,8,-1,7,-9,-2,-3,10,8,6,1,-3,-9,-1,-6,-10,-3,10,5,-7,10,-9,-10,-6,-9,8,-8,-4,-6,4,9,6,-4,8,-4,4,-4,-6,4,-3,-6,4,3,-1,-4,10,-10,-5,-1,-4,8,10,4,6,-9,2,9,-9,5,3,6,-1,10,-3,-9,-9,-6,8,-4,-8,3,-8,8,-7,7,2,-5,-10,-1,7,1,-6,6,6,8,3,-6,6,-8,6,-4,9,-3,6,3,3,-1,10,3,-7,10,4,3,-9,-2,-8,-5,-8,9,2,7,-5,-4,-8,-1,-10,7,6,-4,2,-1,-4,1,-7,-6,-2,4,-3,-4,-5,-6,-7,-9,-2,9,-10,-8,9,6,10,4,-5,3,7,9,-4,5,5,-4,6,2,-6,-10,-8,2,8,-1,-4,-1,4,3,4,-7,1,-7,-7,-4,-9,-9,-1,-6,8,-2,-4,5,4,3,-5,10,-2,-4,-5,-3,3,1,6,4,7,-8,10,8,-1,-3,-1,-4,-9,-5,7,9,1,-7,-9,1,-7,-6,4,9,5,2,5,1,2,-8,-4,-2,-9,4,-10,-2,5,1,2,-3,-4,-2,-10,-2,-9,-3,7,9,-8,4,9,-4,3,-4,-7,-1,3,-9,6,-5,-2,-7,-8,7,-1,-2,6,-3,-1,-4,-5,7,-8,-8,10,9,-2,2,-5,3,-1,-4,-1,6,5,10,6,-7,6,7,7,-7,-4,-10,-10,-5,-10,-8,10,-4,-3,-7,2,3,7,5,8,6,2,1,9,-3,-8,9,-2,-3,5,-5,-1,-8,-10,6,-4,-10,-8,-6,-10,3,7,-4,-5,5,-6,-1,-9,-7,2,7,-4,10,-9,-9,7,-6,6,-5,-6,2,-3,9,2,10,-9,-9,5,7,8,-4,-9,-1,-10,-7,9,10,-4,3,-7,1,-2,-1,10,1,-5,4,5,1,4,-2,9,4,-1,1,-1,-3,3,-10,-1,2,5,-10,-3,-6,8,9,-9,1,1,-9,-4,-7,-8,9,-7,-5,-9,5,-5,1,8,-1,7,1,3,2,4,-2,8,4,-4,-10,-4,-7,5,-2,-9,1,4,4,4,5,-7,2,10,-3,-5,-7,7,9,3,-6,-4,-8,1,-6,-10,-4,-9,4,-2,-4,-9,5,-7,9,-6,4,-2,-8,6,7,-6,5,-7,3,-6,-6,9,1,6,8,3,-1,2,-9,5,4,-8,7,10,7,-8,-8,-6,5,-7,3,-2,-8,-4,-5,-4,2,-10,1,8,5,-3,-5,2,-3,10,10,10,10,-6,5,-6,3,-4,5,4,-10,-2,10,-4,2,8,-7,1,-2,-2,6,4,3,6,3,-9,1,-7,-7,3,-6,3,-9,1,-9,10,3,7,-5,-6,-4,-1,-8,7,1,5,3,1,2,5,6,-9,3,-5,-10,5,7,3,4,3,2,-3,7,6,5,-1,9,10,-9,-8,-5,4,-1,-9,7,-2,-9,-1,-8,-6,-8,-4,10,-9,-8,-7,-2,-8,8,-9,9,-3,6,-7,-2,-5,-1,-9,4,9,5,-8,-6,9,4,-10,-9,5,8,-10,-6,-3,6,9,10,-4,5,3,8,7,1,-7,2,-8,4,3,2,9,9,-10,6,-3,7,2,9,-9,7,-1,-10,1,4,5,1,-6,2,9,-1,10,-8,3,-2,-8,-2,9,-7,-7,-6,10,8,8,-1,1,7,10,-2,5,-7,6,-3,3,-7,2,7,-1,-8,-7,5,-3,-7,-10,-5,-6,9,4,-7,1,-9,9,4,1,10,3,5,-8,6,-5,6,-7,-3,6,-10,-6,-1,-5,9,-1,5,4,9,-6,1,-7,-3,9,-5,-8,5,6,-10,-3,8,-8,7,4,-4,-10,-2,-10,-3,-10,8,-5,-1,9,1,-2,5,1,2,9,-6,10,7,-2,1,-1,10,-9,7,4,-9,7,8,7,3,-5,4,8,5,4,-4,4,10,-6,-1,-7,9,-4,1,-7,7,7,9,-5,-5,-2,-3,-2,-2,-4,-9,3,4,-4,-1,1,-5,1,4,-10,-4,-8,1,-2,6,-5,-6,2,-6,-4,5,6,6,6,3,8,10,-6,6,3,-3,-7,-7,-8,-5,-9,-10,2,2,5,-4,3,-9,-5,7,6,-6,-9,-2,-7,1,-9,3,-8,-9,-10,-6,-5,2,-7,-7,8,-8,10,6,-8,3,10,1,1,-9,-3,4,9,9,6,10,3,3,-7,9,7,-5,10,-3,7,1,-6,-1,2,2,10,-4,-2,-6,-5,6,-9,-7,8,1,3,-7,-9,-5,-8,1,-2,1,-1,3,-2,-7,4,1,7,7,-3,8,-3,-5,3,9,10,-7,4,8,-1,-6,-1,6,6,8,10,-1,3,3,3,-9,-9,5,-8,-9,8,-3,2,-8,5,-10,-4,-7,9,10,2,-5,6,6,3,-5,3,-9,-9,7,-5,-10,-8,-5,-7,-10,-6,9,5,8,-3,8,-8,4,5,3,8,8,-2,-4,-10,7,-9,8,4,-3,-6,6,9,-5,-1,6,-4,5,1,-5,4,-7,-10,9,10,4,5,3,-10,-2,-7,-8,7,6,-3,-9,3,-9,10,9,-10,-9,3,-10,-10,-3,3,7,3,5,4,-2,-9,-2,-9,-2,-5,7,-1,-2,1,8,-5,1,-8,-5,-2,1,-9,2,-5,-8,-5,8,-4,-9,-4,-7,1,8,-6,-4,-1,2,8,-8,10,1,3,-3,2,9,10,6,6,3,-10,-2,1,-10,10,2,-6,-7,-6,3,4,-5,-8,8,-8,7,9,8,-3,-1,-8,5,5,10,-4,-9,-7,-3,-7,10,-1,1,4,9,10,2,-2,2,1,-1,7,3,4,10,8,-7,6,-8,9,-10,9,9,-1,1,2,-6,1,6,7,9,7,4,-5,-4,2,-5,5,2,-4,-7,4,9,5,3,1,-7,9,2,4,10,9,6,-1,2,-3,4,-4,-3,10,1,9,2,1,-3,9,2,-1,1,-1,9,-2,1,8,5,1,1,-7,-9,-6,-3,8,-10,6,-2,4,10,6,2,-5,-6,-6,-6,10], dtype = "uint16")#candidate|5759|(2080,)|const|uint16
call_5758 = func_4620_call(relay.reshape(const_5759.astype('uint16'), [13, 10, 16]), relay.reshape(const_5759.astype('uint16'), [13, 10, 16]), )
call_5760 = func_4620_call(relay.reshape(const_5759.astype('uint16'), [13, 10, 16]), relay.reshape(const_5759.astype('uint16'), [13, 10, 16]), )
output = relay.Tuple([bop_5751,call_5758,const_5759,])
output2 = relay.Tuple([bop_5751,call_5760,const_5759,])
func_5762 = relay.Function([var_5749,var_5750,], output)
mod['func_5762'] = func_5762
mod = relay.transform.InferType()(mod)
var_5763 = relay.var("var_5763", dtype = "bool", shape = (15, 1, 5))#candidate|5763|(15, 1, 5)|var|bool
var_5764 = relay.var("var_5764", dtype = "bool", shape = (15, 9, 5))#candidate|5764|(15, 9, 5)|var|bool
output = func_5762(var_5763,var_5764,)
func_5765 = relay.Function([var_5763,var_5764,], output)
mutated_mod['func_5765'] = func_5765
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5922 = relay.var("var_5922", dtype = "uint8", shape = (14, 2, 16))#candidate|5922|(14, 2, 16)|var|uint8
const_5923 = relay.const([[[-4,-4,-1,6,-10,5,-2,-2,5,-7,7,9,-2,9,-3,-1],[-1,9,-1,-9,-3,-10,-7,10,-2,-10,-8,-7,3,8,4,-4]],[[6,6,10,10,-10,-8,3,-8,-7,-8,-7,-7,2,8,-7,-10],[8,2,-9,-1,3,5,1,2,6,-5,4,5,9,3,-6,1]],[[-7,1,-7,7,4,-7,9,-3,9,8,-9,-3,-4,6,-9,5],[-10,-4,-9,-7,4,9,3,-8,9,-8,-7,-1,-7,-3,2,2]],[[4,-8,-8,-9,-1,6,10,8,10,-2,-7,9,7,-10,-2,2],[-10,-1,5,1,-8,-10,2,10,4,-10,4,-6,-1,-2,3,-1]],[[4,1,3,7,-10,-10,5,-6,-3,-1,-6,-7,-7,2,-3,-3],[4,-8,6,8,2,-10,-9,7,5,-10,7,1,-8,-4,-5,-10]],[[8,6,3,2,4,-4,10,-7,-9,7,-4,-2,1,-5,-2,5],[-3,6,7,-1,9,5,9,2,9,-6,8,-7,-3,-5,-5,6]],[[3,4,-9,-10,4,-8,7,1,-1,-1,4,-10,-10,3,-5,-7],[-3,6,-8,2,2,-5,10,-5,2,2,5,4,-4,5,5,8]],[[3,-2,10,2,-4,1,2,6,3,1,-1,5,9,-7,-4,-4],[8,-7,-10,10,-10,9,-8,-8,-5,9,2,-3,6,9,4,-6]],[[-9,-1,-5,-2,-4,9,-8,-1,5,-10,5,-10,-3,2,2,10],[-4,10,-3,-6,-5,-7,9,-9,9,1,-5,9,-2,5,-1,-3]],[[3,-6,-8,-3,7,-8,-9,1,8,-6,-7,-9,5,2,9,3],[-1,-10,3,-3,-3,-7,8,4,3,9,2,8,-1,5,8,-2]],[[9,7,5,-4,-3,-3,-2,8,-5,-5,2,8,6,3,-3,2],[-7,6,10,-10,-3,-3,10,-8,8,-3,1,-6,-5,10,6,-2]],[[2,6,-9,5,1,-5,-1,5,-10,-10,10,-5,-4,2,6,4],[-1,-10,-9,2,-4,1,2,5,-4,1,10,8,-1,-6,4,7]],[[-2,-8,3,-3,7,-4,-9,8,-3,-7,7,7,-8,6,-2,-1],[-1,7,9,5,-1,-2,8,-4,-1,2,-10,7,-9,-2,-8,-7]],[[-2,-5,2,6,8,6,9,5,-2,-7,3,10,7,-4,7,-3],[6,1,-9,1,-6,-1,6,-5,2,-1,-8,-8,-5,1,6,2]]], dtype = "uint8")#candidate|5923|(14, 2, 16)|const|uint8
bop_5924 = relay.bitwise_and(var_5922.astype('uint8'), relay.reshape(const_5923.astype('uint8'), relay.shape_of(var_5922))) # shape=(14, 2, 16)
func_1293_call = mod.get_global_var('func_1293')
func_1300_call = mutated_mod.get_global_var('func_1300')
const_5928 = relay.const([-10,7,1,7,4,-10,4,-7,4,-9,-1,-10,4,-5,9,-3,-10,8,6,7,-5,-6,-6,3,3,6,-6,9,10,-5], dtype = "int16")#candidate|5928|(30,)|const|int16
var_5929 = relay.var("var_5929", dtype = "int16", shape = (360,))#candidate|5929|(360,)|var|int16
var_5930 = relay.var("var_5930", dtype = "bool", shape = (616,))#candidate|5930|(616,)|var|bool
var_5931 = relay.var("var_5931", dtype = "int16", shape = (220,))#candidate|5931|(220,)|var|int16
const_5932 = relay.const([-1,5,-7,5,4,-3,2,4,-6,10,-7,-7,-10,-8,10,6,10,-7,4,8,2,6,-3,-1,-3,8,-5,8,-9,6,8,1,3,2,-10,5,4,-5,2,-7,-7,5,-2,-9,-1,-10,-7,4,-9,-9,-7,-10,-8,9,10,-4,-2,1,4,-5,-7,4,8,-5,-4,-5,-1,-3,1,-8,9,2,-3,-5,4,-3,-5,-4,5,-7,6,-2,-10,-7,-9,3,-8,-9,-9,7,-2,-6,-7,7,2,1,-9,-6,-9,1,-7,-6,-1,-6,-9,8,3,-6,4,2,-1,-7,-9,-9,-5,8,5,9,-9,8,7,-9,8,3,-1,2,-10,-10,2,-9,10,-3,1,10,-6,-8,-4,3,2,-6,3,-5,-6,3,-6,7,8,-10,-1,-1,-1,-7,-5,7,-10,-2,-2,5,-4,8,-1,-6,6,-9,10,-3,8,6,-2,-3,-9,-5,-2,10,9,5,-6,2,-1,-8,-1,-2,1,-4,-4,-7,-2,3,-3,9,5,-3,-7,3,-5,8,2,-7,-9,-5,-8,5,5,3,5,1,7,10,-10,-3,4,3,1,-6,-2,5,-5,1,8,-7,7,-2,-1,-8,5,-6,-3,2,10,6,1,4,-2,6,-1,5,-9,4,-9,-3,-4,-1,9,-2,-3,2,2,10,5,5,6,-5,5,9,2,10,10,-2,7,7,-4,4,7,9,-7,-7,4,-2,-1,-5,-10,8,6,-10,-6,3,-7,6,-10,-5,1,1,-4,-4,-3,-8,4,4,8,3,10,3,-4,1,-6,-2,-8,2,-6,-1,-5,-2,6,9,8,7,-9,-5,-1,-8,3,-6,2,7,2,7,-8,8,-4,8,-10,-4,-9,-3,-7,9,-10,-3,1,-10,-9,-2,-7,2,7,7,-7,8,10,-6,4,-9,10,-7,-3,6,6,-2,10,8,4,-7,-8,8,-8,-7,2,5,7,5,-10,5,-2,-1,-8,2,-6,-2,-3,2,-7,-4,-2,-10,-2,8,-9,8,-9,4,9,9,4,-10,4,-8,9,-9,-10,10,6,-4,3,6,4,-7,-3,-10,10,4,2,-4,-6,3,-1,-10,3,4,7,-7,-8,-3,3,-10,5,-6,7,-7,-4,-9,-3,4,2,-3,-5,-9,7,6,7,-4,9,9,-1,-9,9,9,-6,2,-10,8,-5,10,10,1,-1,2,-4,-6,-9,9,-4,2,1,9,-6,7,-3,-3,-5,10,9,8], dtype = "uint8")#candidate|5932|(462,)|const|uint8
call_5927 = relay.TupleGetItem(func_1293_call(relay.reshape(const_5928.astype('int16'), [10, 1, 3]), relay.reshape(var_5929.astype('int16'), [10, 12, 3]), relay.reshape(var_5930.astype('bool'), [616,]), relay.reshape(var_5931.astype('int16'), [220,]), relay.reshape(const_5932.astype('uint8'), [7, 66]), ), 3)
call_5933 = relay.TupleGetItem(func_1300_call(relay.reshape(const_5928.astype('int16'), [10, 1, 3]), relay.reshape(var_5929.astype('int16'), [10, 12, 3]), relay.reshape(var_5930.astype('bool'), [616,]), relay.reshape(var_5931.astype('int16'), [220,]), relay.reshape(const_5932.astype('uint8'), [7, 66]), ), 3)
output = relay.Tuple([bop_5924,call_5927,const_5928,var_5929,var_5930,var_5931,const_5932,])
output2 = relay.Tuple([bop_5924,call_5933,const_5928,var_5929,var_5930,var_5931,const_5932,])
func_5937 = relay.Function([var_5922,var_5929,var_5930,var_5931,], output)
mod['func_5937'] = func_5937
mod = relay.transform.InferType()(mod)
var_5938 = relay.var("var_5938", dtype = "uint8", shape = (14, 2, 16))#candidate|5938|(14, 2, 16)|var|uint8
var_5939 = relay.var("var_5939", dtype = "int16", shape = (360,))#candidate|5939|(360,)|var|int16
var_5940 = relay.var("var_5940", dtype = "bool", shape = (616,))#candidate|5940|(616,)|var|bool
var_5941 = relay.var("var_5941", dtype = "int16", shape = (220,))#candidate|5941|(220,)|var|int16
output = func_5937(var_5938,var_5939,var_5940,var_5941,)
func_5942 = relay.Function([var_5938,var_5939,var_5940,var_5941,], output)
mutated_mod['func_5942'] = func_5942
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5960 = relay.var("var_5960", dtype = "int64", shape = (15, 12, 12))#candidate|5960|(15, 12, 12)|var|int64
var_5961 = relay.var("var_5961", dtype = "int64", shape = (15, 12, 12))#candidate|5961|(15, 12, 12)|var|int64
bop_5962 = relay.left_shift(var_5960.astype('int64'), relay.reshape(var_5961.astype('int64'), relay.shape_of(var_5960))) # shape=(15, 12, 12)
uop_5971 = relay.atanh(bop_5962.astype('float32')) # shape=(15, 12, 12)
output = uop_5971
output2 = uop_5971
func_5973 = relay.Function([var_5960,var_5961,], output)
mod['func_5973'] = func_5973
mod = relay.transform.InferType()(mod)
mutated_mod['func_5973'] = func_5973
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5973_call = mutated_mod.get_global_var('func_5973')
var_5975 = relay.var("var_5975", dtype = "int64", shape = (15, 12, 12))#candidate|5975|(15, 12, 12)|var|int64
var_5976 = relay.var("var_5976", dtype = "int64", shape = (15, 12, 12))#candidate|5976|(15, 12, 12)|var|int64
call_5974 = func_5973_call(var_5975,var_5976,)
output = call_5974
func_5977 = relay.Function([var_5975,var_5976,], output)
mutated_mod['func_5977'] = func_5977
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6038 = relay.const([[[8.560519,6.458731,-3.582090,4.547915,-3.287907,-2.656124,7.500769,0.425926],[-3.484338,-8.347672,-2.950488,9.577855,7.922547,-1.934280,9.897660,1.281540],[-1.345386,3.725299,-7.558337,0.795572,8.663839,-7.117826,-7.269338,-1.703600],[-6.968495,-3.886627,7.899140,-0.451861,-9.552532,-2.389376,-1.744036,-9.453324],[-2.100299,2.231142,-1.728469,0.682476,6.229436,3.961222,9.875364,-2.554393],[-7.981328,-9.547530,9.819470,-3.247829,0.545585,3.276057,-8.668739,9.112604],[-5.275950,0.382795,0.373978,-6.485176,-9.506049,-2.865252,5.771727,2.673493],[5.808586,7.562025,9.446397,-8.802423,-7.823026,-2.120481,4.605924,-8.160361],[4.746191,-6.572807,-6.813675,9.769783,-2.781193,4.273210,-9.040222,9.173616],[-6.761327,-0.893174,-1.414245,1.908560,2.480650,-2.191245,5.654196,-4.858240],[-7.561475,5.037758,0.541780,-2.153539,-9.016866,-6.925508,-6.451853,-9.152282],[-8.363894,-9.106309,8.224194,-0.768289,-1.589796,8.501700,8.603466,-1.385368],[-2.096262,-6.160236,-4.524589,-8.534652,-8.564046,2.585975,-3.913987,-3.312498],[0.601586,-7.065105,-3.735863,9.541535,8.383872,-1.381498,-1.534207,-6.299241],[-2.372318,-0.227980,9.387892,0.735123,1.318449,5.472811,-7.243486,9.925652]],[[-5.181651,-3.708666,-1.671463,1.825869,-1.763053,-0.148200,-1.244022,2.282476],[0.612000,0.419060,-9.484091,0.256567,-8.916057,-2.491193,-6.084900,-2.567013],[7.870665,4.219794,-1.292241,6.749227,-4.072491,4.905764,-5.723061,3.576966],[-6.485044,4.011330,6.081137,2.028423,7.834267,-2.012266,4.760883,-5.602057],[2.459105,-5.206192,9.030764,-0.421278,6.613831,-5.766411,-7.055708,6.388895],[9.596562,-9.046904,2.379204,-2.291439,5.399740,-3.357100,8.528571,5.878700],[-1.603054,-5.170547,6.808181,2.686637,-7.372861,-7.484824,8.768707,3.483496],[-8.741963,1.701389,3.468444,-2.122267,-2.870950,9.230920,-3.375261,-7.765500],[-0.717577,-4.042189,7.495076,-4.123532,0.913142,2.988991,9.022337,1.008648],[-2.551267,3.686469,-5.466536,-4.500481,1.463245,-4.202230,-6.939519,-6.696649],[3.678593,-0.162629,4.840870,-1.786550,3.284634,2.509894,8.980848,9.742906],[-5.299397,9.145717,-5.633527,2.076788,-5.614814,4.257275,5.823496,4.023875],[-7.991564,3.881905,2.530310,7.420610,9.714890,9.293525,0.932804,-7.806056],[5.400857,7.328146,2.558685,0.357591,-5.404602,-1.103953,0.623351,2.515440],[3.046050,6.456043,-4.007431,-5.869097,3.511477,-7.292093,-2.009032,-3.729730]],[[8.615491,0.188964,6.675864,-7.074445,-8.047053,0.409908,-2.667809,1.999261],[8.260713,-7.527167,7.895630,-0.588917,-3.492877,-0.321038,0.723742,3.641322],[-1.675726,-2.885615,9.374129,8.291734,2.091080,2.773307,7.310809,-1.787743],[6.450032,0.240563,0.323376,-0.504994,-5.090196,-1.763342,6.216196,-9.845985],[-3.562661,1.539775,4.523277,3.133949,6.468921,3.156329,-3.093656,-1.967565],[-6.630895,-3.155832,1.195111,-2.507456,0.519510,0.039207,-3.918106,-1.077723],[-2.318660,-9.066044,7.371917,2.489337,3.203882,0.618269,-3.400172,4.982709],[2.461482,-6.832983,-6.769368,5.736374,4.227097,0.280298,-3.336535,-4.181522],[6.427793,4.329656,3.272941,-7.703973,1.046201,-1.838818,9.406316,-1.121441],[4.234532,0.779790,7.010540,-4.496744,2.090612,-5.147048,5.284732,8.272724],[-3.172934,9.298907,4.843648,-4.955115,-3.227777,-7.811639,-3.810649,-1.255275],[6.854995,-6.540989,-1.543231,8.304652,-9.040890,-0.731835,-9.412027,-6.496663],[-3.227501,-4.060197,8.139363,-3.092487,0.271258,7.612226,8.084801,-3.066146],[4.968331,-6.245833,9.760609,-0.235545,8.194459,9.693245,-1.032874,-3.384166],[-7.409538,-3.754195,2.946611,2.264250,3.369205,8.756234,-1.849920,0.356163]],[[-0.412882,-5.283656,6.032761,9.710199,7.928833,-5.893650,-1.222377,-1.209918],[-0.598251,0.469196,7.691602,-4.370451,9.173443,8.320582,4.917007,-3.334246],[-1.627043,7.038314,1.414345,6.226391,-1.319519,-3.593643,-2.723557,4.917969],[1.804219,7.108278,0.086386,3.552654,3.275487,-3.116839,6.668531,-5.697746],[9.156105,6.895293,-4.308971,1.321750,-3.428742,4.569916,-2.751400,7.754371],[8.508632,-7.550787,0.846007,-2.187053,9.307402,7.438459,5.547287,-3.339741],[-8.874781,8.011363,-0.906642,5.664517,-1.484940,-7.670877,5.317005,-8.077747],[-6.105538,4.046342,-4.756096,-1.846527,-8.430621,-8.325789,0.687393,7.815704],[-7.901607,-5.519682,5.034501,5.954799,-3.611651,4.693135,-7.951802,8.005233],[-3.036736,-0.824888,-4.931692,-9.857570,-5.613073,-8.371803,-7.681243,7.135693],[-4.924045,7.978742,8.924235,6.154946,-1.403456,0.353029,-4.583083,7.116507],[4.372455,2.505327,-0.350104,2.133372,-1.060723,-8.270288,1.369496,5.342931],[0.184120,8.297357,8.967889,5.457329,2.997256,-0.886278,1.970955,9.464268],[8.865748,-3.658708,-2.856184,9.473906,2.619322,1.409720,0.364337,-0.037930],[-4.062942,-1.034926,-5.904213,8.168298,-1.729372,1.647721,-5.636323,0.724082]],[[5.216977,3.372935,6.718674,-5.301373,7.798433,5.493486,-4.126285,1.473320],[6.664415,-7.442188,8.534193,-0.436887,-1.398973,7.269813,-0.852670,-4.488475],[-5.309709,0.679709,-0.863347,-1.785106,-3.495705,7.632943,4.076870,0.312614],[-8.767994,-7.705172,7.788932,1.183171,-6.525812,-7.437733,9.938215,-2.587115],[0.633762,6.730519,5.399639,7.772841,0.497040,-1.776676,3.975754,-0.582427],[-5.373210,-1.092150,7.963420,0.323252,-6.022522,-0.906399,-0.055948,-9.024745],[-7.376002,-1.887782,0.186700,5.100793,-6.657643,-3.639499,1.134095,8.281567],[0.759638,-3.340560,4.465844,4.849785,2.808150,-9.293149,-4.251887,6.417701],[-9.545375,8.535711,6.502339,9.311810,-5.792745,-0.873422,-9.682497,4.359420],[4.818889,-8.531356,1.769397,-8.528080,0.113086,0.947626,2.708010,-9.152998],[-8.000181,-4.915683,1.079193,0.063361,3.314050,6.095035,2.622196,1.992553],[-3.209401,6.728234,0.788771,3.546961,-7.368813,0.768586,5.523264,-9.602518],[9.094280,-5.595125,-5.609360,-4.898664,1.937540,7.986018,2.990372,2.505165],[-3.274842,4.780790,-6.371694,-0.681157,8.266607,6.060332,9.838811,-3.235062],[-7.291330,1.559202,-1.042777,-5.850465,-8.786146,-2.734358,-5.968655,2.115537]],[[8.476272,3.995076,8.222969,-9.904725,0.960417,-8.786176,5.791456,6.974537],[8.614950,-5.867334,-3.567585,3.721937,-3.158321,-4.923873,9.485946,7.882311],[2.669335,-2.930208,-5.996470,9.642241,-2.413712,5.855032,1.289503,5.143475],[2.864394,-1.741975,-6.636176,-9.352714,-8.987423,-0.904318,4.564645,-2.803473],[-3.879095,5.987413,2.549559,-4.331346,-4.075921,-4.102131,-7.500807,-2.691184],[5.611541,9.420278,-0.493156,7.764724,2.405512,-7.806656,8.995346,3.045157],[-7.938938,2.258464,6.579582,0.409204,6.747716,1.522633,-7.378143,2.463358],[8.661590,5.972736,1.400940,-5.026170,-2.417811,6.775359,0.153154,6.545005],[0.788803,5.429130,-3.211643,8.262730,-9.030887,7.706988,-1.956998,7.997180],[-9.315241,-9.369986,2.133330,-3.147524,0.353309,7.323641,-6.532812,-0.611132],[9.110676,-1.391121,9.406027,4.465609,6.471010,-5.820956,-2.870813,8.509376],[-4.155920,-4.667064,-0.596345,-5.536233,-5.132340,-1.664092,-3.799948,-8.523185],[-6.007946,-8.248053,-5.905996,-5.700367,-4.277541,-8.104426,-7.038743,4.748195],[5.564224,-7.914639,-7.224905,2.251249,-5.939692,2.845375,3.294301,3.217493],[0.199417,8.031385,5.797015,9.378065,-7.592162,-6.018952,3.690619,5.082207]],[[2.218146,-6.634829,-8.074467,-3.361242,2.672826,-6.089960,-6.391668,-9.391088],[2.039946,8.227178,1.478547,-9.898244,-7.297164,-6.731506,1.915545,-0.939524],[3.001628,-3.664473,6.070957,9.307934,9.863245,4.889052,6.722545,3.988938],[6.535457,8.132266,2.309930,-4.994448,6.023165,0.438450,-6.434008,0.468920],[-5.958930,-0.800566,4.617102,-7.240578,8.368519,-4.519324,4.221673,5.028219],[-2.261037,-8.805608,-3.782348,-6.395465,0.546533,-9.655169,2.204699,-5.470163],[-5.733836,7.068086,-1.211158,-6.355368,0.217511,-5.659297,-7.192632,2.933400],[-9.601558,-4.301030,-7.751004,-0.543775,-3.676122,-5.803412,2.827302,5.302522],[4.905855,9.162036,-9.958409,0.585889,-8.736233,-5.287937,3.303669,6.809042],[2.968189,-8.783734,-4.698902,-1.824772,-1.328841,0.906876,9.391877,8.406829],[7.594440,-6.431801,-4.326218,-5.239962,7.192629,4.037574,-7.279433,-9.882668],[-7.419966,-3.712532,-1.163788,4.251583,4.300935,-3.556678,3.782078,2.850525],[-4.695154,-0.048553,5.760657,9.223822,0.603207,3.548548,0.295602,-0.728605],[-4.650987,8.370209,9.179748,2.317904,5.410668,7.130319,6.140618,8.459389],[-7.627523,-1.392841,-1.997509,-5.548470,-3.506125,-0.162386,1.565657,0.272456]],[[4.618227,-3.681582,2.631532,4.175950,7.157119,9.353133,4.803599,-2.309365],[-5.428152,9.830472,-6.996710,9.049166,6.545871,1.058538,-0.947692,-8.524590],[8.814854,-7.285919,1.806465,5.435915,-3.303035,8.946828,2.706856,4.509375],[4.809175,6.546299,-9.995655,-0.306722,-6.233840,-2.819752,2.902032,-1.737117],[-0.253109,5.657342,-4.662653,-9.282915,-8.645576,-8.628430,-0.797420,0.382702],[-3.818575,5.463127,3.565053,-5.003138,1.961874,-5.651231,3.210469,8.181033],[8.618855,6.892710,9.683326,-1.067912,-8.267481,-7.795279,-8.786997,-2.966352],[-1.478393,1.757945,0.565453,9.497165,8.512084,0.494764,-7.095645,-6.908918],[-3.635455,6.244473,5.819091,3.716812,-5.071586,-0.796400,7.913225,8.285046],[0.876881,-1.519309,-2.120446,9.347248,0.436344,-3.575053,-6.104833,-1.126804],[2.685821,-1.538917,5.797083,-3.493646,9.990985,1.564105,2.208836,-7.860165],[1.455970,7.067374,-9.008862,6.521776,-4.453866,9.369577,-2.251772,6.132684],[9.256193,2.662252,5.071816,-0.765984,-0.558459,1.211466,-0.962622,-0.476402],[-4.100899,8.614123,9.599725,5.849493,7.398983,-6.877100,-8.232894,3.007075],[4.679970,-4.057282,-6.430320,-9.972371,-6.062578,-8.186120,4.614251,7.736671]],[[-8.037643,4.670294,3.590312,4.265151,4.188054,5.186562,9.922997,-7.447099],[1.289110,2.870725,3.499040,-2.945817,-1.758969,1.198028,-1.898296,6.562907],[3.280700,-9.755680,5.710992,7.443052,9.341381,-1.331133,0.843837,1.434596],[-0.918210,-9.790735,-3.610770,1.857994,2.766220,5.465989,9.560240,4.086925],[2.019113,-5.231747,0.677027,3.523248,-5.207814,-8.034301,-3.086878,-4.416145],[-7.724530,0.456836,2.444146,1.751097,1.368864,-6.121824,-1.754835,4.420241],[3.191030,-8.222447,-5.887087,7.994908,-2.750036,-9.654859,-9.159402,8.581087],[-6.718492,2.796764,6.028989,-8.366033,3.163947,-6.341726,-8.873822,3.368351],[8.650128,3.411292,-7.573681,-7.184538,-0.019181,6.814750,1.496796,1.982333],[4.360085,9.768892,-9.694778,1.543241,1.168986,3.211982,-2.713083,7.692434],[-6.732654,8.884881,-6.788542,3.322470,-6.963019,3.317490,3.942989,6.477688],[9.651612,-9.900456,7.585238,-9.354782,8.435348,-1.557333,-8.076471,0.543717],[-0.357299,9.148498,-2.712223,4.293691,-2.460072,-6.561274,-8.043311,-8.002638],[-0.310811,3.264454,6.067637,-2.623096,8.101133,-2.731620,8.714411,-5.087560],[-4.928031,-5.659355,0.048616,1.664186,-6.115436,7.268443,-8.648096,-2.109988]],[[-2.225415,-4.217982,4.832001,-9.407451,6.991879,1.659308,-7.301887,4.090764],[5.753210,4.059830,3.917770,-3.850949,-0.021721,-5.782182,-0.237774,-0.732642],[-2.868882,-2.418046,3.756212,-7.483612,9.722022,5.439436,-0.429761,-5.169847],[-8.797917,-5.741018,-8.083375,2.416065,-3.073248,1.544767,2.171476,-0.667745],[-1.241331,2.583869,9.162299,2.021357,8.303322,0.948727,4.249978,-5.475672],[3.317813,1.527495,3.149956,0.213508,1.793791,-5.326323,-1.563098,-3.490733],[6.714275,-0.787274,-4.643810,1.535278,0.299172,3.423015,-2.101490,-6.573233],[-0.414252,-4.555955,0.993956,4.785673,-9.733664,0.908316,-9.077082,-3.808164],[0.327824,3.464954,-9.638134,-6.821933,4.998047,-3.681587,4.706661,8.824306],[-7.426818,5.454992,0.544580,-5.389400,0.813432,-5.563815,-8.539415,1.514068],[-9.318133,4.720703,-0.276436,-1.311964,0.726234,2.972428,9.784426,-1.325540],[-5.081269,0.088928,-5.387068,-6.739415,3.492442,-3.350375,8.132675,-2.034238],[-3.665420,-8.712899,2.208136,-1.141352,1.145308,5.616713,-7.236911,-6.841836],[5.211283,4.194356,-8.776459,4.258799,-6.087407,4.702878,-6.818452,7.357999],[4.436175,7.675396,-5.472354,1.896697,9.955680,8.871270,-8.324669,1.384930]],[[0.150413,3.098959,-8.723188,-5.110927,-1.181201,-3.143689,1.299478,5.730158],[5.918509,3.937951,-7.321365,2.694639,9.001715,-2.020350,-3.860129,5.168788],[-3.470438,3.874287,-7.958396,4.494358,2.352915,3.467786,-4.840726,3.157486],[6.961198,7.646327,1.945717,9.790703,9.429335,-5.815586,8.286629,-0.168715],[7.528092,-4.819930,9.158297,-2.243297,0.963753,1.474436,8.220249,5.781309],[0.389323,-7.065029,1.215493,2.190536,8.516939,2.161699,0.978359,-8.969663],[8.363534,-4.075137,6.335514,-7.299278,-0.302842,-6.027525,-9.593008,-8.660760],[-7.202815,1.255988,3.778332,5.971398,-2.088312,4.961996,-3.426767,-8.873587],[4.244466,-4.698144,-3.968073,6.091557,-1.649672,-7.037912,-9.282194,-5.858301],[0.483898,-2.539215,-5.669256,-6.476520,-8.948736,-6.322483,3.431856,6.563024],[-3.884757,0.300834,-0.814544,6.998241,-8.984459,4.143192,3.185320,-0.650351],[6.769268,0.558089,-8.234591,3.985313,3.634648,2.563548,-1.540016,7.719059],[-6.992947,8.428471,-7.060835,4.275462,-4.013550,7.005486,-6.494948,5.133397],[-2.655498,6.816599,-3.258811,-0.683028,-5.632449,-7.762562,-2.026485,8.954122],[4.923636,0.990500,-3.384394,-0.155185,2.487802,-3.853997,7.631334,-6.198101]]], dtype = "float64")#candidate|6038|(11, 15, 8)|const|float64
uop_6039 = relay.log(const_6038.astype('float64')) # shape=(11, 15, 8)
output = relay.Tuple([uop_6039,])
output2 = relay.Tuple([uop_6039,])
func_6041 = relay.Function([], output)
mod['func_6041'] = func_6041
mod = relay.transform.InferType()(mod)
output = func_6041()
func_6042 = relay.Function([], output)
mutated_mod['func_6042'] = func_6042
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6041_call = mod.get_global_var('func_6041')
func_6042_call = mutated_mod.get_global_var('func_6042')
call_6070 = relay.TupleGetItem(func_6041_call(), 0)
call_6071 = relay.TupleGetItem(func_6042_call(), 0)
var_6083 = relay.var("var_6083", dtype = "float64", shape = (11, 15, 8))#candidate|6083|(11, 15, 8)|var|float64
bop_6084 = relay.right_shift(call_6070.astype('int32'), relay.reshape(var_6083.astype('int32'), relay.shape_of(call_6070))) # shape=(11, 15, 8)
bop_6087 = relay.right_shift(call_6071.astype('int32'), relay.reshape(var_6083.astype('int32'), relay.shape_of(call_6071))) # shape=(11, 15, 8)
func_4559_call = mod.get_global_var('func_4559')
func_4561_call = mutated_mod.get_global_var('func_4561')
var_6113 = relay.var("var_6113", dtype = "float64", shape = (936,))#candidate|6113|(936,)|var|float64
call_6112 = relay.TupleGetItem(func_4559_call(relay.reshape(var_6113.astype('float64'), [9, 13, 8])), 0)
call_6114 = relay.TupleGetItem(func_4561_call(relay.reshape(var_6113.astype('float64'), [9, 13, 8])), 0)
uop_6128 = relay.log10(call_6070.astype('float64')) # shape=(11, 15, 8)
uop_6130 = relay.log10(call_6071.astype('float64')) # shape=(11, 15, 8)
output = relay.Tuple([bop_6084,call_6112,var_6113,uop_6128,])
output2 = relay.Tuple([bop_6087,call_6114,var_6113,uop_6130,])
func_6131 = relay.Function([var_6083,var_6113,], output)
mod['func_6131'] = func_6131
mod = relay.transform.InferType()(mod)
mutated_mod['func_6131'] = func_6131
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6131_call = mutated_mod.get_global_var('func_6131')
var_6133 = relay.var("var_6133", dtype = "float64", shape = (11, 15, 8))#candidate|6133|(11, 15, 8)|var|float64
var_6134 = relay.var("var_6134", dtype = "float64", shape = (936,))#candidate|6134|(936,)|var|float64
call_6132 = func_6131_call(var_6133,var_6134,)
output = call_6132
func_6135 = relay.Function([var_6133,var_6134,], output)
mutated_mod['func_6135'] = func_6135
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6041_call = mod.get_global_var('func_6041')
func_6042_call = mutated_mod.get_global_var('func_6042')
call_6183 = relay.TupleGetItem(func_6041_call(), 0)
call_6184 = relay.TupleGetItem(func_6042_call(), 0)
output = call_6183
output2 = call_6184
func_6185 = relay.Function([], output)
mod['func_6185'] = func_6185
mod = relay.transform.InferType()(mod)
output = func_6185()
func_6186 = relay.Function([], output)
mutated_mod['func_6186'] = func_6186
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6185_call = mod.get_global_var('func_6185')
func_6186_call = mutated_mod.get_global_var('func_6186')
call_6192 = func_6185_call()
call_6193 = func_6185_call()
func_6041_call = mod.get_global_var('func_6041')
func_6042_call = mutated_mod.get_global_var('func_6042')
call_6203 = relay.TupleGetItem(func_6041_call(), 0)
call_6204 = relay.TupleGetItem(func_6042_call(), 0)
var_6215 = relay.var("var_6215", dtype = "float64", shape = (11, 15, 8))#candidate|6215|(11, 15, 8)|var|float64
bop_6216 = relay.logical_xor(call_6203.astype('int16'), relay.reshape(var_6215.astype('int16'), relay.shape_of(call_6203))) # shape=(11, 15, 8)
bop_6219 = relay.logical_xor(call_6204.astype('int16'), relay.reshape(var_6215.astype('int16'), relay.shape_of(call_6204))) # shape=(11, 15, 8)
output = relay.Tuple([call_6192,bop_6216,])
output2 = relay.Tuple([call_6193,bop_6219,])
func_6226 = relay.Function([var_6215,], output)
mod['func_6226'] = func_6226
mod = relay.transform.InferType()(mod)
var_6227 = relay.var("var_6227", dtype = "float64", shape = (11, 15, 8))#candidate|6227|(11, 15, 8)|var|float64
output = func_6226(var_6227)
func_6228 = relay.Function([var_6227], output)
mutated_mod['func_6228'] = func_6228
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6185_call = mod.get_global_var('func_6185')
func_6186_call = mutated_mod.get_global_var('func_6186')
call_6278 = func_6185_call()
call_6279 = func_6185_call()
func_4620_call = mod.get_global_var('func_4620')
func_4623_call = mutated_mod.get_global_var('func_4623')
const_6285 = relay.const([1,-4,6,6,-2,-9,7,-4,-4,9,-1,9,-6,1,1,10,3,-3,-4,8,-1,2,8,-4,-9,8,-6,10,-3,3,2,6,-9,-4,-9,-7,-1,2,-7,4,7,-9,-8,-6,9,4,1,7,-2,3,5,-4,10,-6,10,4,3,-10,-2,1,-6,-3,7,-6,-8,8,10,-10,8,7,7,5,7,-10,-4,10,-5,6,10,-9,-1,-4,1,-1,-1,6,2,-9,-9,-9,3,2,2,-2,-9,3,-9,3,2,-10,-2,4,-10,-4,5,3,-3,-5,-4,-9,7,-5,10,8,-1,6,5,-9,4,-7,9,4,6,8,6,4,-1,10,8,3,8,-5,1,9,7,2,-7,-9,8,4,-7,7,-1,7,-7,-1,2,-10,-7,-8,-7,2,9,-7,-1,2,1,-5,-6,-4,-5,-10,10,-1,8,-5,4,-7,1,1,-6,1,10,-2,10,-1,-2,5,-10,-8,10,1,1,6,-3,5,7,7,-3,6,-6,2,10,9,-8,6,2,-9,-7,-6,-9,10,-10,5,-9,-9,-10,2,-2,7,7,5,5,4,-8,-4,3,5,4,-7,3,-7,-8,-2,-7,-10,6,-6,1,5,-10,10,-5,-5,7,2,-9,-4,8,-9,6,-1,-7,5,9,-1,9,2,-6,-4,10,-2,5,-6,-1,9,-4,-10,-1,3,5,9,-3,7,-8,10,-7,7,-8,8,-7,7,-9,-4,-1,8,-9,9,8,1,7,5,6,9,-4,3,3,-3,-6,3,-4,-3,-10,8,10,-3,1,-4,-10,10,9,-3,1,5,5,-7,8,5,-4,-5,10,-1,8,9,8,1,-3,10,-2,-1,2,7,8,10,-3,-6,7,-6,-5,-2,-4,-10,7,1,4,6,2,10,3,3,6,-1,-9,7,-3,6,-10,-6,-6,-6,-1,-10,6,-6,-1,9,8,-2,8,-10,-8,10,-3,-5,-5,3,5,-10,3,-2,-5,-4,10,2,5,10,-10,-1,9,6,-9,10,10,5,-8,-10,9,-5,-9,-6,1,-6,-8,-6,3,9,-10,-7,10,6,10,-10,1,7,-4,-4,9,-6,9,4,-3,-5,3,-3,-6,3,-6,-5,10,-9,-5,9,-5,10,8,-7,8,-6,-7,-8,-2,9,5,7,5,2,-8,-3,8,8,-9,9,-10,10,7,-8,-10,7,10,3,-7,-5,-7,-8,4,-1,1,-2,-6,-8,-2,-2,-5,8,-10,-3,7,3,-8,7,9,5,-1,-2,-1,9,-9,6,9,-9,6,-9,-2,4,-5,2,-2,-5,5,-9,-8,-10,1,-10,1,-1,-3,-7,-3,7,-6,2,-7,1,6,10,8,2,-7,2,-4,-4,-3,4,-6,4,9,9,4,-7,8,6,-9,-9,-1,-6,-4,-1,-3,-1,-5,8,2,7,-5,-8,-4,-3,3,1,1,-10,-8,-1,8,-10,8,5,5,-10,10,5,4,-9,10,-2,9,-7,5,-10,10,5,7,-10,4,5,7,10,-10,8,-2,10,-2,-2,4,1,-3,-2,6,3,1,6,9,-7,8,8,6,1,6,-7,5,-4,2,-9,7,10,1,6,-3,-9,-6,1,7,-2,-5,-3,6,-9,3,-1,-1,8,9,3,7,-5,1,7,-7,-10,7,-3,9,5,9,2,-7,1,4,-9,6,-4,-9,-4,9,9,5,2,3,6,3,3,10,-7,-7,-7,-10,1,-3,4,-7,9,4,-8,9,10,-1,6,-6,-8,-1,8,-6,-1,-4,-1,9,-4,3,1,-5,-8,3,-8,8,3,-10,1,2,5,6,-8,9,-7,6,-4,6,-7,-5,9,2,-1,3,-10,-3,-2,2,3,3,-4,7,-10,-10,-3,6,6,-3,2,-10,-2,7,3,5,-1,-5,7,-2,6,-8,5,-10,3,2,1,8,-7,9,-6,-6,-3,3,5,-1,-7,10,2,-7,-3,-2,10,-8,-7,-7,-1,4,-5,6,-2,3,-5,-3,4,5,8,-4,9,5,8,1,-4,5,-1,3,7,5,10,-10,8,4,3,4,1,-8,-1,10,3,5,6,9,4,5,2,10,3,7,3,5,-3,3,-1,7,8,-10,-2,10,-1,-1,2,-4,-9,-10,4,-6,-8,9,4,5,-10,10,4,-9,7,-9,-5,-6,5,9,-1,8,-6,9,5,-5,1,-10,-5,9,10,3,-2,-10,-4,8,-5,-5,5,2,9,8,3,4,-6,-4,-2,4,5,-1,-4,-2,-7,-10,10,4,-9,1,2,-4,10,-7,-2,-6,-6,5,8,-8,6,-9,8,-8,-8,1,-4,-10,-10,5,-7,-8,-10,2,-2,-2,6,5,-9,-1,1,8,-6,10,-3,-7,-7,-3,9,4,-4,10,-10,-4,-7,5,-8,3,-1,-7,9,-7,10,-1,5,-10,4,9,-2,-2,-9,-9,1,-10,-5,7,2,10,3,-10,-9,-7,8,-6,10,-1,6,-5,-2,-9,3,-10,-1,-6,-4,-5,5,-3,-8,5,-6,9,6,8,9,4,-3,-7,-7,-1,9,1,7,-1,4,5,2,-1,-7,6,-4,10,-5,4,-1,-10,-10,-8,-6,4,-3,-9,2,-3,6,-9,-10,-10,7,6,10,10,-10,8,7,7,10,7,5,-3,9,-3,-10,-3,-10,4,-6,1,5,1,1,4,-3,5,2,1,1,-2,9,-9,6,-9,10,-10,7,-6,9,-2,-4,-2,-7,2,7,9,1,4,-1,-4,3,5,5,-2,5,1,-1,8,4,-5,3,-8,2,-4,7,6,-3,-1,6,7,7,1,-8,3,-8,-4,2,7,-4,-1,-10,2,-9,2,-8,7,4,1,-6,6,3,-6,2,1,4,-10,10,-8,4,-4,-10,8,-8,7,-5,1,5,-7,9,-4,9,-9,-5,-7,8,3,-2,-1,-2,-8,1,9,5,4,3,8,3,2,-4,-7,10,-8,3,-5,-10,-5,2,-9,-9,2,-1,5,-10,2,-6,6,-10,-10,-8,9,-10,8,-10,1,-8,-3,-7,-4,5,-1,-4,-7,-5,-7,-4,8,-1,-7,1,-10,5,9,2,-7,9,8,-6,6,-3,-4,-9,2,9,3,-1,1,6,8,-5,-5,-4,6,7,1,4,9,-10,-5,2,8,-1,-9,-1,7,1,-8,6,-5,5,4,-3,-5,4,9,8,-7,-8,-7,1,-3,-5,-7,5,5,8,-1,2,4,-6,10,-2,-4,-3,-9,5,9,3,3,6,7,-7,4,4,3,-3,-5,-10,-7,-8,-9,8,-2,-2,8,3,1,-6,9,-5,2,-5,-2,4,10,-4,4,5,-3,-3,6,-10,7,-3,8,9,3,6,9,-5,-1,-5,2,-3,10,10,1,2,6,4,-3,-1,-5,4,-7,2,-9,-3,1,-10,3,7,-7,-1,6,4,-8,-8,4,-8,10,-8,-9,3,-8,-10,-2,6,8,2,-5,-5,-5,-6,4,9,4,-6,10,-2,4,-1,9,-6,5,4,8,2,2,-10,4,4,-9,-2,2,1,-5,2,10,-4,-10,6,8,9,8,8,-3,1,-3,-2,8,-10,-6,9,-2,2,1,-10,-9,-9,-10,-10,-9,4,-5,-6,-8,6,-9,-1,-7,-5,-2,-7,5,8,3,10,-1,4,1,-9,-6,-4,-9,10,-9,-6,9,3,-9,9,1,4,4,-7,9,7,-10,-2,7,5,-6,-6,-4,9,2,-7,-9,-4,-10,9,7,-5,-8,-6,-1,-8,3,4,-5,-3,2,9,-1,-4,1,10,-1,5,-4,-2,-1,3,-8,-3,9,9,6,-3,-8,9,10,9,6,1,-6,-4,5,3,4,8,2,5,5,4,-2,-7,2,-6,-2,8,-1,-5,2,2,3,-9,7,-2,9,8,-1,-8,2,3,2,-2,-8,1,-4,-7,-3,2,10,4,2,-5,-6,-7,-8,4,2,4,2,1,10,-5,-4,-3,-2,8,-9,-6,7,-5,4,6,5,7,7,5,3,10,-6,-4,2,-2,-6,-7,-10,7,-4,-9,2,6,3,7,-1,5,-10,8,2,2,-8,8,-3,-1,7,4,7,7,3,-6,-10,6,2,3,-3,10,4,-9,-5,2,2,1,9,-9,-3,9,-8,5,-8,-1,-3,-2,3,4,4,1,-3,5,-10,6,-1,-7,9,-6,10,10,2,-10,3,-2,9,3,6,6,2,9,7,2,-10,5,-8,5,6,5,-9,-6,-2,10,7,-4,-8,-4,-1,-2,-7,-2,9,6,-3,5,-10,10,-10,-10,8,7,8,-2,-10,-1,1,-3,-3,6,-2,9,1,-3,-2,9,-8,-10,10,7,-6,8,-6,-8,1,-6,-4,-4,6,6,-2,-10,3,-9,1,4,4,7,-4,8,10,8,-1,-8,2,5,-3,6,-2,-9,-1,-10,-7,-7,-3,-8,-1,6,-9,-10,-2,-4,-7,-1,7,2,4,-5,1,4,8,-7,-6,-4,-9,7,7,-6,-4,-3,-6,-1,1,1,-7,-5,7,-8,7,10,-4,9,10,8,-10,-5,8,-5,1,10,-3,6,9,2,4,3,-9,-1,-6,3,10,2,-5,6,5,5,-2,-7,-3,-6,1,6,10,8,-6,1,8,-5,-2,-8,-8,-6,-4,-9,2,-5,-5,-2,10,-4,-1,-2,10,-2,8,-9,3,-7,8,3,3,2,10,-6,4,-5,-5,-3,-6,-5,-3,3,10,4,-5,-8,6,6,-4,4,-2,-2,-8,2,-8,-10,-3,-10,10,3,-10,4,10,1,4,-3,-6,3,-10,10,2,-2,1,-10,-5,-8,1,-2,-4,7,10,-6,5,-2,4,4,10,-1,-7,5,3,8,5,-6,-4,-9,-3,1,-6,-4,5,-6,-3,9,9,1,-7,-5,8,3,4,-6,-9,-6,2,-3,7,5,10,1,7,-1,-2,7,10,2,2,-3,-7,-3,-1,9,10,10,-7,9,-3,-6,-9,-5,-3,-2,-6,-5,8,-3,6,6,3,6,-7,2,3,4,-3,10,-7,10,-9,-6,4,-5,1,-6,7,4,5,3,6,-2,10,6,6,9,-2,2,6,6,-9,10,6,-2,-2,3,-4,-8,8,-2,-1,-10,7,8,-1,9,-1,-8,4,10,-4,-5,-7,-3,-6,-7,-7,1,9,7,6,-10,8,-3,-5,-10,3,7,6,-5,6,-1,-9,7,2,7,-2,6,-4,-2,-2,-8,-8,7,7,-8,3,6,-4,7,-6,7,-1,10,1,-4,4,10,-9,8,10,-8,7,-3,6,-10,-6,10,9,-3,-2,5,-9,10,5,-3,-3,-6,-5,-3,2,-3,10,6,-5,-2,-5,5,-4,-3,4,-4,7,9,-10,2,8,10,1,9,-4,3,10,5,-4,4,4,-6,9,-2,-10,3,-2,-9,-1,-6,-1,-6,8,6,-2,1,10,7,-3,-2,-5,-4,-8,-7,3,-3,6,-9,5,-6,8,2,-7,1,10,-4,8,2,-2,4,6,-4,-1,7,-8,2,2,-6,-5,-8,10,-1,-3,4,-4,3], dtype = "uint16")#candidate|6285|(2080,)|const|uint16
call_6284 = func_4620_call(relay.reshape(const_6285.astype('uint16'), [13, 10, 16]), relay.reshape(const_6285.astype('uint16'), [13, 10, 16]), )
call_6286 = func_4620_call(relay.reshape(const_6285.astype('uint16'), [13, 10, 16]), relay.reshape(const_6285.astype('uint16'), [13, 10, 16]), )
output = relay.Tuple([call_6278,call_6284,const_6285,])
output2 = relay.Tuple([call_6279,call_6286,const_6285,])
func_6287 = relay.Function([], output)
mod['func_6287'] = func_6287
mod = relay.transform.InferType()(mod)
output = func_6287()
func_6288 = relay.Function([], output)
mutated_mod['func_6288'] = func_6288
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6185_call = mod.get_global_var('func_6185')
func_6186_call = mutated_mod.get_global_var('func_6186')
call_6291 = func_6185_call()
call_6292 = func_6185_call()
output = call_6291
output2 = call_6292
func_6297 = relay.Function([], output)
mod['func_6297'] = func_6297
mod = relay.transform.InferType()(mod)
output = func_6297()
func_6298 = relay.Function([], output)
mutated_mod['func_6298'] = func_6298
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6185_call = mod.get_global_var('func_6185')
func_6186_call = mutated_mod.get_global_var('func_6186')
call_6320 = func_6185_call()
call_6321 = func_6185_call()
output = relay.Tuple([call_6320,])
output2 = relay.Tuple([call_6321,])
func_6329 = relay.Function([], output)
mod['func_6329'] = func_6329
mod = relay.transform.InferType()(mod)
mutated_mod['func_6329'] = func_6329
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6329_call = mutated_mod.get_global_var('func_6329')
call_6330 = func_6329_call()
output = call_6330
func_6331 = relay.Function([], output)
mutated_mod['func_6331'] = func_6331
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6355 = relay.var("var_6355", dtype = "uint16", shape = (4, 11, 1))#candidate|6355|(4, 11, 1)|var|uint16
var_6356 = relay.var("var_6356", dtype = "uint16", shape = (4, 11, 3))#candidate|6356|(4, 11, 3)|var|uint16
bop_6357 = relay.multiply(var_6355.astype('uint16'), var_6356.astype('uint16')) # shape=(4, 11, 3)
func_64_call = mod.get_global_var('func_64')
func_67_call = mutated_mod.get_global_var('func_67')
var_6367 = relay.var("var_6367", dtype = "float64", shape = (1568,))#candidate|6367|(1568,)|var|float64
call_6366 = relay.TupleGetItem(func_64_call(relay.reshape(var_6367.astype('float64'), [14, 16, 7])), 0)
call_6368 = relay.TupleGetItem(func_67_call(relay.reshape(var_6367.astype('float64'), [14, 16, 7])), 0)
output = relay.Tuple([bop_6357,call_6366,var_6367,])
output2 = relay.Tuple([bop_6357,call_6368,var_6367,])
func_6369 = relay.Function([var_6355,var_6356,var_6367,], output)
mod['func_6369'] = func_6369
mod = relay.transform.InferType()(mod)
var_6370 = relay.var("var_6370", dtype = "uint16", shape = (4, 11, 1))#candidate|6370|(4, 11, 1)|var|uint16
var_6371 = relay.var("var_6371", dtype = "uint16", shape = (4, 11, 3))#candidate|6371|(4, 11, 3)|var|uint16
var_6372 = relay.var("var_6372", dtype = "float64", shape = (1568,))#candidate|6372|(1568,)|var|float64
output = func_6369(var_6370,var_6371,var_6372,)
func_6373 = relay.Function([var_6370,var_6371,var_6372,], output)
mutated_mod['func_6373'] = func_6373
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6041_call = mod.get_global_var('func_6041')
func_6042_call = mutated_mod.get_global_var('func_6042')
call_6406 = relay.TupleGetItem(func_6041_call(), 0)
call_6407 = relay.TupleGetItem(func_6042_call(), 0)
var_6414 = relay.var("var_6414", dtype = "float64", shape = (11, 15, 8))#candidate|6414|(11, 15, 8)|var|float64
bop_6415 = relay.greater(call_6406.astype('bool'), relay.reshape(var_6414.astype('bool'), relay.shape_of(call_6406))) # shape=(11, 15, 8)
bop_6418 = relay.greater(call_6407.astype('bool'), relay.reshape(var_6414.astype('bool'), relay.shape_of(call_6407))) # shape=(11, 15, 8)
output = relay.Tuple([bop_6415,])
output2 = relay.Tuple([bop_6418,])
func_6429 = relay.Function([var_6414,], output)
mod['func_6429'] = func_6429
mod = relay.transform.InferType()(mod)
mutated_mod['func_6429'] = func_6429
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6430 = relay.var("var_6430", dtype = "float64", shape = (11, 15, 8))#candidate|6430|(11, 15, 8)|var|float64
func_6429_call = mutated_mod.get_global_var('func_6429')
call_6431 = func_6429_call(var_6430)
output = call_6431
func_6432 = relay.Function([var_6430], output)
mutated_mod['func_6432'] = func_6432
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6329_call = mod.get_global_var('func_6329')
func_6331_call = mutated_mod.get_global_var('func_6331')
call_6446 = relay.TupleGetItem(func_6329_call(), 0)
call_6447 = relay.TupleGetItem(func_6331_call(), 0)
var_6450 = relay.var("var_6450", dtype = "float64", shape = (11, 15, 8))#candidate|6450|(11, 15, 8)|var|float64
bop_6451 = relay.less_equal(call_6446.astype('bool'), relay.reshape(var_6450.astype('bool'), relay.shape_of(call_6446))) # shape=(11, 15, 8)
bop_6454 = relay.less_equal(call_6447.astype('bool'), relay.reshape(var_6450.astype('bool'), relay.shape_of(call_6447))) # shape=(11, 15, 8)
func_4559_call = mod.get_global_var('func_4559')
func_4561_call = mutated_mod.get_global_var('func_4561')
var_6468 = relay.var("var_6468", dtype = "float64", shape = (936,))#candidate|6468|(936,)|var|float64
call_6467 = relay.TupleGetItem(func_4559_call(relay.reshape(var_6468.astype('float64'), [9, 13, 8])), 0)
call_6469 = relay.TupleGetItem(func_4561_call(relay.reshape(var_6468.astype('float64'), [9, 13, 8])), 0)
output = relay.Tuple([bop_6451,call_6467,var_6468,])
output2 = relay.Tuple([bop_6454,call_6469,var_6468,])
func_6475 = relay.Function([var_6450,var_6468,], output)
mod['func_6475'] = func_6475
mod = relay.transform.InferType()(mod)
mutated_mod['func_6475'] = func_6475
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6475_call = mutated_mod.get_global_var('func_6475')
var_6477 = relay.var("var_6477", dtype = "float64", shape = (11, 15, 8))#candidate|6477|(11, 15, 8)|var|float64
var_6478 = relay.var("var_6478", dtype = "float64", shape = (936,))#candidate|6478|(936,)|var|float64
call_6476 = func_6475_call(var_6477,var_6478,)
output = call_6476
func_6479 = relay.Function([var_6477,var_6478,], output)
mutated_mod['func_6479'] = func_6479
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6536 = relay.const([[[True,True,True,False,True],[True,True,False,True,False],[True,True,True,True,True],[False,True,False,False,True],[False,False,False,True,False],[True,False,False,False,False]],[[False,True,True,True,False],[True,False,True,True,True],[True,False,False,True,True],[False,True,False,False,True],[True,False,True,False,False],[True,True,False,True,True]],[[True,True,False,False,False],[False,True,False,False,False],[False,True,True,False,False],[False,False,False,True,True],[True,False,True,True,False],[True,False,True,False,False]],[[False,True,True,True,True],[False,True,True,False,True],[True,False,True,False,True],[True,True,True,True,False],[False,True,False,False,False],[True,True,False,False,True]],[[False,True,False,False,False],[False,False,True,True,False],[True,False,True,False,True],[False,True,False,True,True],[False,False,False,False,False],[False,True,True,False,False]]], dtype = "bool")#candidate|6536|(5, 6, 5)|const|bool
var_6537 = relay.var("var_6537", dtype = "bool", shape = (5, 6, 5))#candidate|6537|(5, 6, 5)|var|bool
bop_6538 = relay.logical_and(const_6536.astype('bool'), relay.reshape(var_6537.astype('bool'), relay.shape_of(const_6536))) # shape=(5, 6, 5)
uop_6554 = relay.log2(const_6536.astype('float64')) # shape=(5, 6, 5)
bop_6560 = relay.subtract(uop_6554.astype('uint8'), relay.reshape(const_6536.astype('uint8'), relay.shape_of(uop_6554))) # shape=(5, 6, 5)
output = relay.Tuple([bop_6538,bop_6560,])
output2 = relay.Tuple([bop_6538,bop_6560,])
func_6563 = relay.Function([var_6537,], output)
mod['func_6563'] = func_6563
mod = relay.transform.InferType()(mod)
var_6564 = relay.var("var_6564", dtype = "bool", shape = (5, 6, 5))#candidate|6564|(5, 6, 5)|var|bool
output = func_6563(var_6564)
func_6565 = relay.Function([var_6564], output)
mutated_mod['func_6565'] = func_6565
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6297_call = mod.get_global_var('func_6297')
func_6298_call = mutated_mod.get_global_var('func_6298')
call_6627 = func_6297_call()
call_6628 = func_6297_call()
var_6643 = relay.var("var_6643", dtype = "float64", shape = (11, 15, 8))#candidate|6643|(11, 15, 8)|var|float64
bop_6644 = relay.minimum(call_6627.astype('float32'), relay.reshape(var_6643.astype('float32'), relay.shape_of(call_6627))) # shape=(11, 15, 8)
bop_6647 = relay.minimum(call_6628.astype('float32'), relay.reshape(var_6643.astype('float32'), relay.shape_of(call_6628))) # shape=(11, 15, 8)
output = relay.Tuple([bop_6644,])
output2 = relay.Tuple([bop_6647,])
func_6652 = relay.Function([var_6643,], output)
mod['func_6652'] = func_6652
mod = relay.transform.InferType()(mod)
var_6653 = relay.var("var_6653", dtype = "float64", shape = (11, 15, 8))#candidate|6653|(11, 15, 8)|var|float64
output = func_6652(var_6653)
func_6654 = relay.Function([var_6653], output)
mutated_mod['func_6654'] = func_6654
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6673 = relay.const([[[10,5,-9,1,2,-9,7,1,8],[-5,5,7,-7,7,9,-9,7,10],[-4,8,-1,10,-4,-7,3,7,3],[4,-6,-9,4,-1,9,-5,-4,-10],[1,-4,-10,-7,10,-3,-9,2,-7],[-10,8,-1,7,-1,-10,-8,2,-6],[-1,-7,7,6,6,-5,9,-5,-9],[6,-2,-6,8,5,-6,-2,6,-9],[-9,2,3,10,3,10,4,9,-3],[-10,9,-2,-8,1,6,-8,-5,10],[-6,-9,-8,2,-5,7,5,10,5]],[[-10,-8,9,-1,7,-7,-3,1,-3],[-2,-2,5,-6,9,6,-10,10,-5],[2,-8,-3,7,-8,-7,9,6,-8],[-1,3,4,7,-4,-4,8,7,4],[-10,6,-1,-9,-6,-2,-9,-1,-4],[-10,1,-7,-4,-2,10,-3,-8,8],[-3,10,3,-4,-6,5,-1,10,-8],[10,4,5,7,2,-6,-7,-9,-8],[10,7,8,7,-6,5,5,-7,7],[-1,-9,-2,-5,-2,9,-9,4,6],[-7,-3,-9,8,-6,-1,9,7,-8]],[[3,-1,8,-6,10,2,-4,-8,-1],[-7,-1,7,4,-5,-4,-4,-6,1],[-7,-10,9,-3,-8,-9,-8,-9,-7],[-2,-2,4,9,4,-4,-9,4,-8],[-1,3,1,-8,8,9,-6,8,9],[-6,1,4,-5,-6,2,1,6,3],[-7,8,2,3,-10,6,3,8,1],[1,4,-6,-3,2,-10,9,-7,5],[6,-7,-8,-8,4,7,7,-1,7],[-9,-4,-2,-7,-4,-7,4,-6,4],[4,7,7,3,-1,-8,4,1,-10]],[[4,3,2,6,5,-8,8,-10,-10],[-10,-4,-9,-1,10,3,-4,-7,-5],[-7,8,-5,-1,-8,1,-10,3,3],[-4,9,8,-6,-8,-9,6,4,-8],[-8,-5,9,-6,-8,-1,-5,5,3],[-5,-6,-3,-6,1,-1,-2,-5,9],[4,3,6,-10,10,-6,-1,-1,-4],[1,5,1,-8,-7,9,-9,1,2],[5,-10,-9,8,-7,-6,5,-10,-7],[8,-1,2,-1,2,2,-1,8,-4],[8,-7,-2,4,10,8,5,5,-1]],[[8,8,7,-4,9,-2,8,-4,4],[10,3,-4,-7,9,4,9,-5,2],[6,-10,7,-7,-1,10,5,3,-9],[-1,5,8,-1,3,-3,7,10,-6],[9,-2,4,-4,-3,9,4,-8,-1],[8,3,-9,6,-8,5,-3,-7,3],[-8,-2,-3,-3,-2,-6,5,-8,-5],[5,-5,10,-8,4,-10,9,-5,-7],[2,7,-10,9,-7,6,-4,-7,-5],[-8,-2,8,-9,-9,8,5,7,3],[7,5,-9,-7,-3,1,-3,-2,-1]]], dtype = "uint64")#candidate|6673|(5, 11, 9)|const|uint64
var_6674 = relay.var("var_6674", dtype = "uint64", shape = (5, 11, 9))#candidate|6674|(5, 11, 9)|var|uint64
bop_6675 = relay.minimum(const_6673.astype('uint64'), relay.reshape(var_6674.astype('uint64'), relay.shape_of(const_6673))) # shape=(5, 11, 9)
func_2334_call = mod.get_global_var('func_2334')
func_2340_call = mutated_mod.get_global_var('func_2340')
var_6689 = relay.var("var_6689", dtype = "float64", shape = (1, 650))#candidate|6689|(1, 650)|var|float64
const_6690 = relay.const([[7,-4,-4,9,-3,-9,7,1,8,-1,-2,-8,9,-5,-1,9,-2,1,9,7,10,-2,-8,6,-4,-10,1,5,10,-6,-8,1,7,7,1,-7,1,-1,-2,-4,-1,-1,2,4,-9,-5,5,-8,-7,10,10,-2,-5,-10,9,3,8,-4,-1,2,-1,6,2,-10,-10,10,6,-1,-4,-9,-4,-3,-8,3,-7,1,4,4,3,7,-2,3,9,-2,2,-8,-6,9,9,-5,-8,6,4,-10,-2,10,5,6,7,1,-1,-6,-9,1,6,6,-10,8,2,3,-6,-2,8,9,5,-5,-8,-1,5,-6,-8,4,5,-6,-9,-3,-1,8,-10,-5,6,1,-10,-10,6,5,-8,-6,3,10,-10,-9,-7,-2,-5,-1,-6,4,5,-10,-9,7,-4,-2,4,10,-6,-6,-7,7,-3,2,1,7,1,-10,-2,10,9,-2,-4,8,-1,-1,1,10,-8,-5,-10,8,-10,4,5,-8,5,-9,4,9,10,-4,9,6,6,-8,-6,10,3,7,-7,2,7,-1,9,-6,9,1,-4,7,2,6,2,-5,-9,4,-9,8,-8,-7,-8,-7,3,-6,6,-6,-9,-6,8,7,-6,-5,-5,-3,1,-1,2,-7,5,3,9,10],[2,10,-9,-1,-5,-2,-7,-7,-2,7,-6,3,2,-5,-5,-10,2,1,6,-8,6,5,-2,4,-1,-2,-7,-2,-10,1,-3,6,-10,9,-1,-9,7,-2,6,-5,-9,6,1,-7,5,10,-9,-3,5,5,9,5,-9,4,-5,4,5,9,8,-9,-4,-10,7,-9,5,10,-9,-1,2,-6,6,10,-10,9,5,-2,1,1,5,-10,-6,-6,5,-7,-5,-5,-3,-4,4,-2,5,9,5,-4,9,-3,-6,4,-8,-10,4,-4,2,9,-3,-4,-4,-4,2,9,2,10,3,-9,5,-2,7,-3,5,-5,-4,7,-4,6,9,-1,9,6,7,1,-9,10,-2,-6,-6,7,2,7,5,5,-1,2,10,-2,-7,9,-9,-1,2,9,-8,8,-8,-7,-10,-6,1,-5,-10,-5,3,3,3,-2,-3,10,7,3,-5,-10,-3,10,-8,4,-1,7,5,5,-5,-10,9,-2,-10,-2,5,1,-2,-3,-5,8,-6,-1,4,8,2,10,7,-8,8,3,-5,3,-7,-8,5,-10,1,-1,-7,8,6,3,-1,2,2,-5,2,-6,6,3,10,-2,5,9,4,-3,7,-4,6,8,-1,-7,-10,-2,-7,-6,8,-1,3,7],[7,-6,4,3,-7,-8,-5,-1,-9,1,-8,4,-7,9,5,5,-3,-6,-4,7,-3,10,-1,5,4,6,7,7,5,3,-1,-1,1,1,10,7,-4,-3,9,-7,-6,-4,4,-6,-7,-10,7,-5,3,-6,-6,6,1,7,9,-3,-8,5,-10,5,-10,-8,-6,-5,-8,2,3,4,-9,-2,-6,3,-3,7,1,-1,-7,-6,-3,-4,2,-5,-3,-7,-1,-1,3,2,-4,9,3,4,10,-4,1,-4,-3,-7,9,1,4,-10,7,5,2,-5,-6,6,-9,1,-8,4,-5,8,-9,-5,-2,-2,-6,10,-10,5,-4,-6,-9,6,1,9,-2,-1,7,-4,10,9,2,5,6,10,9,4,2,-7,9,2,-4,-4,8,1,-3,-5,2,9,-8,-8,6,6,4,-4,9,6,-8,4,10,5,8,8,-9,-7,-9,-5,7,-4,5,5,3,-5,4,6,-7,-7,10,4,-4,6,4,-8,-3,3,2,9,-1,-6,-6,-9,3,7,-1,1,-1,-1,-8,-9,5,8,2,-1,-4,8,-9,-4,-2,6,-3,3,5,1,6,6,-4,7,4,10,6,9,-6,-10,5,6,-4,-1,4,2,-4,9,3,-5,-5,6,-3,-9],[-7,9,-6,9,3,-8,-4,5,9,7,4,-10,6,-2,-8,-10,-1,-6,-4,-6,-6,2,-5,7,4,5,-7,7,-8,4,2,-4,3,-10,6,3,-10,-2,-3,8,-5,5,7,-5,3,-4,3,5,-9,-2,3,-7,-2,10,7,5,3,4,-4,-7,-8,1,9,7,3,3,5,-2,6,-4,-10,-7,-1,-2,-9,3,10,-9,1,6,-5,1,8,9,-5,-9,2,-7,6,-7,8,4,-3,6,-1,8,-3,8,-2,5,1,-2,7,-7,1,-10,5,9,-7,2,9,-5,-8,-4,-1,-8,3,9,-3,5,-2,5,8,-3,-10,4,4,-4,2,3,-6,-10,-4,3,5,1,2,3,9,7,-3,-1,-10,-7,4,8,2,-1,6,4,-1,-9,1,4,-9,1,4,7,8,6,8,2,-1,6,6,-9,5,9,-9,5,-4,10,-2,-1,2,2,3,-10,6,2,-8,-6,-8,-8,-8,4,3,1,10,-6,1,-4,2,9,-2,10,1,-4,3,-5,-6,4,-3,-5,-8,7,8,4,-7,-8,3,10,3,4,-5,6,7,3,6,-3,8,2,3,-8,10,-1,3,8,5,-2,10,-4,-2,7,4,10,1,-9,-9,-7],[2,-3,-1,-1,-4,7,-4,3,7,-2,9,6,-6,-8,-4,8,-5,1,4,2,-6,6,-1,6,8,-10,1,-8,-3,-6,1,2,-4,2,6,10,3,2,4,2,7,6,10,-7,-10,1,-8,9,-8,4,5,6,9,-3,-9,4,9,-3,5,3,6,7,6,6,7,8,3,1,3,4,1,7,7,10,-4,7,8,4,2,-8,1,2,-1,7,-8,-7,10,-8,7,-8,2,1,-3,-4,4,-3,-9,10,-7,7,7,-4,-1,3,-2,-9,10,2,4,6,7,4,2,7,8,-5,-9,1,3,6,-6,-8,4,8,6,-5,-3,1,2,7,4,-6,-2,3,-2,9,-3,-4,8,4,-6,-9,9,-4,-9,-10,4,-6,-4,2,-7,1,9,-8,7,-1,2,-2,9,1,-9,-1,-6,1,-5,5,5,3,-1,-1,4,1,-3,6,-1,1,7,-4,8,-4,-10,6,-4,9,1,-2,-3,2,6,-1,-4,-8,6,-7,-9,9,9,5,6,9,-4,-2,-3,-7,4,-5,-10,-1,-7,1,1,-5,7,6,-2,1,-7,6,-7,9,1,-2,-1,7,1,-1,-2,-5,-6,10,-5,5,4,-1,6,-4,8,-8,-9,6],[-7,-4,-5,7,1,1,-8,9,-10,7,-4,3,-7,10,9,7,5,4,2,3,-1,-9,-1,-3,1,-8,-2,-7,-3,-4,5,10,-3,-1,-8,-8,7,7,6,-10,1,1,9,2,-5,6,-10,-9,1,-9,4,-7,5,-10,6,-9,6,-10,-6,-8,-1,-10,-9,3,10,-10,-9,5,10,6,-5,-3,-3,-7,7,9,-8,-8,-9,-8,5,3,-2,8,6,-8,-7,2,-7,-8,-4,4,-7,10,5,2,5,-4,6,1,-3,10,3,1,-3,-2,-7,9,-1,9,7,6,9,-1,9,4,2,-4,-8,-2,-6,-7,3,9,5,9,-1,3,2,-4,3,-7,-4,9,5,-4,-6,-4,-7,4,-10,1,6,1,8,-3,5,-8,-10,-2,8,6,7,4,4,3,1,-7,-9,-8,-4,-10,10,8,4,-5,-8,-8,-2,10,-2,-1,-8,-1,7,-6,10,-9,-5,-10,-1,-3,7,-5,-6,6,9,-3,8,-5,-1,5,8,-4,5,2,-1,6,-6,9,-5,10,-4,10,-6,8,-8,1,-9,1,-8,-9,-5,7,5,3,-10,-5,-7,8,-1,-1,9,7,8,1,8,-5,6,-8,9,-4,-6,5,3,-5,8,-5,9,-5],[9,-2,-10,4,10,-1,-1,8,-4,-1,6,3,-3,1,10,10,5,-6,1,-3,10,-10,8,10,-2,-9,6,-2,-8,-4,10,8,6,-2,-2,7,-10,-4,-6,-8,-3,7,-9,-2,-4,7,-10,1,9,-2,10,-4,8,-9,-10,5,6,-7,-2,5,-7,2,-9,5,8,-8,9,-1,10,1,6,5,7,8,3,5,-8,-7,-10,3,-10,-8,-3,-5,-6,-2,10,6,-1,7,10,4,-9,-2,-3,-6,-8,-3,-1,3,-5,-4,4,4,-6,9,-5,3,4,-10,2,2,-10,10,-3,1,-8,3,-6,-7,-10,-8,9,-6,9,-10,5,1,-6,7,4,7,4,5,-7,-4,-1,1,-6,-3,-6,-7,4,6,-9,-1,-2,6,-10,-8,5,5,6,6,-4,6,1,-1,-1,6,10,4,10,8,3,9,9,4,10,7,8,-4,-9,3,-1,-2,10,3,-10,-10,-10,-2,10,4,5,-6,5,9,6,-3,-3,-10,-3,-3,-5,-5,-9,-1,3,3,-7,3,10,5,6,-6,5,1,8,-2,-6,-5,-5,8,-6,-10,-9,-4,-2,6,8,-6,8,4,1,7,4,2,2,9,-10,-10,9,7,-4,-1,7,-7,7,8],[-7,5,1,-1,7,1,-9,6,7,-1,-8,-5,-10,-7,6,-4,2,-4,-7,6,-5,3,9,1,-3,-9,5,-8,-6,3,-2,-5,-6,-7,-4,-9,3,-2,-1,10,-3,7,-3,-2,-9,1,2,8,-4,1,2,-6,3,-9,9,8,-8,-10,9,-10,-7,-2,8,6,-4,2,8,1,8,-6,7,10,7,8,4,-4,2,9,-5,4,4,5,7,-3,-4,-3,3,10,-5,-5,8,-1,5,-2,7,-10,-3,-2,3,-5,-4,-9,2,-6,10,8,-1,8,-1,8,6,6,7,10,-3,6,-3,-6,-4,4,6,-2,10,-4,-10,-8,4,-6,2,-8,10,6,-9,-10,7,-9,-7,9,-10,-8,-7,5,-10,2,-6,9,-6,-3,9,10,-9,-8,-7,-4,2,-7,10,-2,-4,2,-9,-8,-10,-10,4,5,-6,-10,2,9,-7,2,-10,-8,1,4,5,-4,5,-3,1,-4,3,-1,-9,-6,9,-4,4,-1,3,4,-9,2,2,3,-3,2,1,10,6,-8,4,1,-5,-3,-10,-6,-5,3,4,-1,-4,-3,-6,7,-9,-6,7,2,-4,10,-2,-4,-5,-4,-4,-7,10,3,3,10,5,6,7,-5,3,-4,-2,-3]], dtype = "int32")#candidate|6690|(8, 240)|const|int32
const_6691 = relay.const([7,6,8,-4,-4,1,10,3,-9,3,9,9,-2,4,-9,5,-2,2,7,-3,4,8,-9,1,9,-1,-2,6,1,-1,2,-10,9,6,-9,-10,2,-8,-6,10,3,-6,2,-10,3,-5,9,9,7,-7,-4,-9,4,-1,6,-8,5,-5,7,9,-9,4,10,-10,-9,-3,-4,1,-2,10,6,-9,3,7,9,1,10,8,9,7,4,10,2,6,6,2,-4,-2,-4,9,4,-3,-3,4,-8,-9,1,-10,5,-9,-4,4,3,-6,-4,10,5,2,-6,-10,-9,7,-2,-5,7,-7,-6,-8,6,5,9,8,1,-1,-8,1,4,7,9,1,7,-6,1,-1,-9,9,-6,-3,-8,-3,-9,-4,-6,-9,3,10,9,3,1,-7,2,10,4,4,10,-10,6,2,-3,7,-10,-5,5,9,4,8,-3,-6,4,8,-1,-4,2,-9,8,10,4,-7,5,-5,-1,7,-3,-10,4,10,-6,-10,-2,-3,6,-6,-3,7,8,-9,7,2,8,7,-10,5,1,4,6,-2,3,1,3,-3,2,-2,5,-8,-6,5,2,-1,7,6,3,6,-10,-1,6,5,-6,-8,-3,-6,-3,-4,-2,10,2,-3,-6,2,-3,-10,-7,-9,-4,-5,-3,-3,-1,1,-3,3,7,-10,-2,-10,5,5,6,6,9,4,-10,10,7,-5,2,-6,1,-5,-8,9,6,-7,8,-2,-3,-10,-7,-4,-2,3,-8,-7,4,-3,9,-6,-6,9,6,-10,2,-2,10,1,7,-8,-4,-4,-6,-3,-9,-4,-3,10,8,6,9,9,6,-1,-6,7,-3,2,-10,-6,3,-7,-5,-6,4,-1,4,2,1,-2,-10,9,-2,5,-6,-4,-3,9,-5,-10,-9,-1,2,2,7,-10,-2,2,-2,7,-8,-10,9,8,4,-2,9,-7,-9,4,-2,-2,-5,-8,1,-6,-4,1,-6,7,7,5,5,8,-3,-9,-9,9,5,-3,-3,-5,-7,-2,5,5,1,1,3,9,4,-1,8,8,-7,8,-10,-7,-1,-2,-10,-2,6,-6,-5,-7,2,-1,-7,-4,10,4,-6,8,2,6,4,3,-1,1,4,4,-5,8,6,8,-3,5,-5,-9,-1,-9,10,7,10,7,5,2,6,3,10,-5,6,-4,-5,10,-5,2,-2,9,8,-8,5,6,7,-1,-3,-2,10,-9,-7,10,-9,-9,5,3], dtype = "uint8")#candidate|6691|(462,)|const|uint8
call_6688 = relay.TupleGetItem(func_2334_call(relay.reshape(var_6689.astype('float64'), [10, 13, 5]), relay.reshape(var_6689.astype('float64'), [10, 13, 5]), relay.reshape(const_6690.astype('int32'), [1920,]), relay.reshape(const_6691.astype('uint8'), [462,]), ), 3)
call_6692 = relay.TupleGetItem(func_2340_call(relay.reshape(var_6689.astype('float64'), [10, 13, 5]), relay.reshape(var_6689.astype('float64'), [10, 13, 5]), relay.reshape(const_6690.astype('int32'), [1920,]), relay.reshape(const_6691.astype('uint8'), [462,]), ), 3)
var_6697 = relay.var("var_6697", dtype = "int32", shape = (8, 240))#candidate|6697|(8, 240)|var|int32
bop_6698 = relay.multiply(const_6690.astype('float32'), relay.reshape(var_6697.astype('float32'), relay.shape_of(const_6690))) # shape=(8, 240)
output = relay.Tuple([bop_6675,call_6688,var_6689,const_6691,bop_6698,])
output2 = relay.Tuple([bop_6675,call_6692,var_6689,const_6691,bop_6698,])
func_6702 = relay.Function([var_6674,var_6689,var_6697,], output)
mod['func_6702'] = func_6702
mod = relay.transform.InferType()(mod)
var_6703 = relay.var("var_6703", dtype = "uint64", shape = (5, 11, 9))#candidate|6703|(5, 11, 9)|var|uint64
var_6704 = relay.var("var_6704", dtype = "float64", shape = (1, 650))#candidate|6704|(1, 650)|var|float64
var_6705 = relay.var("var_6705", dtype = "int32", shape = (8, 240))#candidate|6705|(8, 240)|var|int32
output = func_6702(var_6703,var_6704,var_6705,)
func_6706 = relay.Function([var_6703,var_6704,var_6705,], output)
mutated_mod['func_6706'] = func_6706
mutated_mod = relay.transform.InferType()(mutated_mod)
const_6724 = relay.const([[[-9,-8,10,8,-3,6,-1],[-8,-1,-5,-5,-8,-8,7],[10,-9,-7,-8,1,8,6]],[[-9,-6,9,9,-2,1,-1],[-6,-6,-2,-7,-2,-7,5],[-8,-9,10,-5,3,-3,8]],[[4,2,-8,8,3,-1,2],[-1,-5,-8,7,2,-6,-6],[9,-2,-3,-6,-5,1,8]],[[5,1,-7,-7,5,-10,6],[1,5,-7,-6,3,1,6],[8,-5,-4,-10,-5,3,-1]],[[-8,-10,-10,-10,2,-7,-9],[3,-10,9,-3,-4,-5,8],[-10,2,-5,-6,7,-1,-3]],[[6,-7,-9,-9,4,1,-4],[6,4,-10,-1,-1,1,-4],[-9,-3,1,3,10,-8,3]],[[-2,-6,1,-6,10,-8,-6],[-1,5,7,4,-9,8,8],[-6,5,-9,8,-5,-1,-6]],[[6,-1,-2,6,4,7,-6],[5,-1,6,-10,-7,5,5],[-4,6,-2,-6,3,4,-9]],[[-3,8,-2,10,2,-5,8],[-10,-7,-5,6,-1,-2,4],[4,-8,10,-4,2,-10,-3]]], dtype = "int64")#candidate|6724|(9, 3, 7)|const|int64
const_6725 = relay.const([[[-3,-5,-2,3,7,-10,4],[-2,-8,9,-7,-8,-7,-10],[6,-7,1,-8,-2,-1,-2]],[[8,6,6,-8,-7,-9,-6],[7,-7,1,4,7,-9,2],[10,10,1,-1,-9,3,-5]],[[-10,-9,8,1,-2,-3,6],[10,1,-5,9,8,-4,10],[-2,10,-6,10,4,5,-6]],[[-5,-10,4,6,-6,-5,4],[3,7,-8,7,5,-10,-9],[-5,5,9,6,1,-1,6]],[[1,-7,5,-10,-10,-1,-4],[-4,-7,-8,-10,8,-10,-9],[-5,-1,6,-3,-2,5,1]],[[9,-6,8,3,-6,5,-2],[-4,-10,-5,-7,6,3,4],[10,-4,1,-3,5,-9,10]],[[4,10,2,-9,10,-9,6],[4,9,-5,4,-3,9,4],[7,-1,-5,-3,1,-5,5]],[[-7,5,-1,7,5,4,-10],[-6,-10,-8,7,1,4,9],[-3,3,-7,3,-3,6,6]],[[8,4,10,-8,-4,-4,5],[7,9,-10,1,-3,7,-9],[-3,-6,10,-6,5,-1,-3]]], dtype = "int64")#candidate|6725|(9, 3, 7)|const|int64
bop_6726 = relay.logical_xor(const_6724.astype('int64'), relay.reshape(const_6725.astype('int64'), relay.shape_of(const_6724))) # shape=(9, 3, 7)
func_165_call = mod.get_global_var('func_165')
func_169_call = mutated_mod.get_global_var('func_169')
const_6732 = relay.const([[-2,2,7,-7,3,-6,-2,3,6,-4,10,6,8,-2,-3,-8,9,8,3,8,5,-4,-6,-10,3,-7,3,-3,-9,8,1,8,-7,6,2,-7,-10,3,-7,10,6,-3,1,10,10,3,-5,3,-7,-1,5,-7,8,-2,-10,7,10,-5,-7,-2,-4,-8,7,-8,-2,-3],[-8,1,10,-2,-8,10,-10,-10,1,-6,6,-1,-5,7,-9,-6,3,-2,-3,-5,5,8,10,6,9,-6,6,-9,-6,10,-9,4,-4,-4,3,7,-7,-7,2,-8,-3,-7,2,2,2,-5,8,2,-6,-10,-8,-8,3,-9,7,7,4,1,-10,3,-6,-5,-8,8,-3,-2],[5,-3,-5,5,-2,6,-6,1,3,-2,-2,1,3,-3,-8,-5,-7,3,-3,-6,1,-2,-2,-7,-4,-1,-5,6,4,2,6,-8,8,-5,-2,-9,-6,1,1,-10,-6,-3,5,-7,-1,-2,-8,10,-2,10,-7,-8,-7,10,7,-5,2,4,-9,6,-9,9,-9,-7,5,6],[6,4,2,-3,5,-2,8,-4,-6,-1,9,6,8,-10,3,-4,9,-4,3,2,7,-4,-1,-4,-9,3,4,7,-3,4,4,-4,-9,5,-6,-1,-2,-8,3,9,-6,1,10,-3,-4,8,8,-2,10,8,-4,-7,-3,-9,-6,10,9,-3,7,3,-4,1,4,-8,9,-8],[-4,-1,-9,-5,7,6,-7,8,-6,5,-3,-3,-10,-1,6,3,-6,9,3,10,-9,9,-5,10,-7,3,-1,-10,7,9,-3,-5,7,6,-8,-1,3,3,-4,-1,-7,-4,1,1,-5,3,-5,9,-2,1,9,9,1,-2,-2,-7,-7,9,-2,8,-3,5,9,9,7,3],[1,10,3,-6,-4,6,-3,-9,-7,2,8,-7,3,10,5,8,7,-7,-9,-7,-7,2,10,-5,-10,7,6,5,-2,-9,-10,3,4,-8,-5,4,8,10,-9,4,-3,7,7,-9,7,-5,7,-4,10,-6,7,-6,7,-4,2,6,-1,7,5,8,-7,8,-3,-7,-6,-9],[-2,-7,-1,-7,-9,2,-8,-9,-6,6,9,5,8,-8,-4,7,-2,-9,5,7,3,-3,8,-5,-8,6,-4,-1,5,-7,6,9,8,10,5,9,-7,-8,-6,-9,-3,2,-8,-2,-4,-3,4,-6,-9,-8,-6,-2,-1,9,-3,-2,5,-6,8,-7,-10,3,-2,8,9,-6]], dtype = "uint8")#candidate|6732|(7, 66)|const|uint8
call_6731 = relay.TupleGetItem(func_165_call(relay.reshape(const_6732.astype('uint8'), [7, 6, 11]), relay.reshape(const_6732.astype('uint8'), [7, 6, 11]), ), 0)
call_6733 = relay.TupleGetItem(func_169_call(relay.reshape(const_6732.astype('uint8'), [7, 6, 11]), relay.reshape(const_6732.astype('uint8'), [7, 6, 11]), ), 0)
uop_6740 = relay.acosh(bop_6726.astype('float64')) # shape=(9, 3, 7)
bop_6744 = relay.not_equal(uop_6740.astype('bool'), relay.reshape(const_6724.astype('bool'), relay.shape_of(uop_6740))) # shape=(9, 3, 7)
uop_6756 = relay.sigmoid(const_6732.astype('float32')) # shape=(7, 66)
func_5762_call = mod.get_global_var('func_5762')
func_5765_call = mutated_mod.get_global_var('func_5765')
const_6760 = relay.const([True,False,False,False,True,True,False,True,True,True,False,False,False,False,True,True,False,False,False,False,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,True,True,True,False,False,True,False,False,True,False,True,False,True,True,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,False,True,True,True], dtype = "bool")#candidate|6760|(75,)|const|bool
const_6761 = relay.const([[True,False,False],[False,True,False],[False,True,True],[True,False,True],[True,False,True],[True,True,True],[True,False,True],[False,True,False],[False,False,False],[True,False,True],[True,True,True],[False,False,False],[False,False,True],[True,True,False],[False,False,False],[False,True,True],[True,False,True],[False,False,False],[True,False,True],[True,False,True],[False,True,True],[True,True,True],[False,True,True],[True,False,False],[True,True,False],[True,True,True],[True,False,False],[False,False,False],[True,True,True],[False,False,True],[True,False,False],[False,False,False],[True,False,True],[False,True,False],[False,True,True],[False,False,False],[False,True,False],[False,False,False],[False,True,False],[True,True,False],[False,False,True],[True,True,True],[True,False,True],[False,True,False],[False,True,True],[True,False,False],[True,False,True],[True,False,True],[False,False,False],[False,False,True],[False,False,False],[True,True,True],[False,False,True],[True,True,False],[False,True,False],[True,True,False],[True,False,False],[True,False,False],[False,False,False],[True,False,False],[False,False,True],[False,False,False],[True,False,True],[True,False,False],[True,False,True],[True,True,False],[True,True,True],[True,False,True],[True,False,True],[False,True,True],[False,False,True],[True,False,True],[False,False,False],[True,True,False],[True,False,False],[False,False,True],[True,True,False],[False,True,False],[True,False,True],[False,False,False],[True,True,False],[False,False,True],[False,False,True],[False,True,False],[False,False,False],[False,True,False],[True,False,False],[False,False,True],[False,True,True],[True,True,False],[False,False,True],[False,False,True],[True,False,False],[False,False,True],[False,False,False],[True,False,True],[True,False,True],[True,False,True],[False,False,False],[False,False,True],[False,False,True],[True,False,True],[False,False,False],[False,False,False],[False,True,True],[False,False,True],[True,True,True],[False,True,True],[True,True,False],[True,True,False],[False,True,False],[True,False,False],[False,True,False],[False,True,True],[True,True,False],[False,True,False],[True,False,True],[True,False,False],[False,True,False],[False,False,True],[False,False,True],[False,True,True],[True,False,False],[True,False,False],[False,True,True],[False,True,True],[False,True,True],[False,False,False],[False,False,True],[False,True,False],[False,True,False],[True,False,False],[False,True,False],[True,False,False],[True,True,False],[False,True,True],[True,False,False],[True,False,False],[True,False,True],[False,True,False],[False,True,True],[True,False,True],[True,False,False],[True,True,True],[True,False,False],[True,True,True],[True,False,True],[True,True,True],[False,False,False],[True,True,True],[True,True,False],[False,False,False],[False,True,False],[False,False,False],[True,False,False],[True,True,True],[True,False,False],[False,False,True],[False,False,False],[False,True,True],[True,False,False],[True,False,True],[True,False,False],[True,True,True],[True,False,True],[False,False,False],[True,True,True],[True,True,True],[True,True,True],[True,True,False],[False,False,False],[False,True,False],[True,False,True],[False,False,False],[True,True,False],[False,True,False],[False,True,True],[True,False,True],[False,True,False],[True,False,False],[True,False,False],[True,True,False],[False,False,False],[True,False,False],[True,True,False],[True,True,True],[False,False,False],[True,True,True],[False,False,False],[True,True,True],[True,True,True],[True,False,False],[True,False,True],[False,True,True],[False,False,True],[False,False,False],[False,False,False],[False,True,False],[True,False,False],[False,True,True],[True,False,False],[False,True,True],[True,True,True],[False,True,True],[True,True,True],[False,False,True],[True,False,True],[True,False,True],[True,False,True],[True,False,False],[True,True,False],[True,True,True],[False,False,False],[False,False,True],[True,False,True],[False,False,True],[False,True,True],[True,True,True],[False,False,True],[True,False,True],[True,True,False],[True,False,False],[True,True,False],[True,True,True],[True,False,True]], dtype = "bool")#candidate|6761|(225, 3)|const|bool
call_6759 = relay.TupleGetItem(func_5762_call(relay.reshape(const_6760.astype('bool'), [15, 1, 5]), relay.reshape(const_6761.astype('bool'), [15, 9, 5]), ), 2)
call_6762 = relay.TupleGetItem(func_5765_call(relay.reshape(const_6760.astype('bool'), [15, 1, 5]), relay.reshape(const_6761.astype('bool'), [15, 9, 5]), ), 2)
func_1621_call = mod.get_global_var('func_1621')
func_1624_call = mutated_mod.get_global_var('func_1624')
var_6781 = relay.var("var_6781", dtype = "float32", shape = (64, 16))#candidate|6781|(64, 16)|var|float32
call_6780 = relay.TupleGetItem(func_1621_call(relay.reshape(var_6781.astype('float32'), [16, 16, 4])), 1)
call_6782 = relay.TupleGetItem(func_1624_call(relay.reshape(var_6781.astype('float32'), [16, 16, 4])), 1)
func_5247_call = mod.get_global_var('func_5247')
func_5250_call = mutated_mod.get_global_var('func_5250')
var_6784 = relay.var("var_6784", dtype = "int64", shape = (80,))#candidate|6784|(80,)|var|int64
call_6783 = relay.TupleGetItem(func_5247_call(relay.reshape(var_6784.astype('int64'), [4, 10, 2])), 0)
call_6785 = relay.TupleGetItem(func_5250_call(relay.reshape(var_6784.astype('int64'), [4, 10, 2])), 0)
func_6369_call = mod.get_global_var('func_6369')
func_6373_call = mutated_mod.get_global_var('func_6373')
var_6788 = relay.var("var_6788", dtype = "uint16", shape = (44,))#candidate|6788|(44,)|var|uint16
const_6789 = relay.const([-5,1,-10,-6,7,-9,-10,-9,4,-3,-9,3,3,1,-7,7,7,-1,-4,-1,8,3,3,-10,7,-9,2,-2,1,-6,-2,-2,10,7,-2,-4,10,-10,-9,-1,4,5,-3,-10,-10,5,-9,10,2,-5,6,5,-7,9,7,-2,-2,-6,-4,1,3,4,5,-3,-1,-1,8,-1,3,10,-9,-1,-9,-6,-3,5,-3,2,-4,4,3,-10,-1,3,2,8,-6,-4,5,-8,-7,8,5,-7,-3,2,-6,7,3,3,-5,-9,-9,-8,3,5,-10,-1,1,3,8,-1,6,-4,-10,-6,-8,-6,8,-3,1,-2,-1,7,10,7,3,-4,6,2,5,-10], dtype = "uint16")#candidate|6789|(132,)|const|uint16
const_6790 = relay.const([8.890048,-5.391261,7.510277,-4.033894,1.756848,8.231540,-5.063645,-5.172706,-1.708249,-2.723937,6.084876,-2.739504,-9.671720,-2.105761,5.065381,-8.837281,-1.566404,0.519806,6.630989,-2.587310,2.918384,-3.775927,-8.808073,-7.046027,-5.415428,-8.453422,-7.213974,3.701669,3.122873,-7.348752,-5.638662,-1.174305,7.547854,-3.477758,8.784937,1.876602,8.576371,-7.584101,-3.891087,-4.113162,-8.380168,-7.625468,-2.369917,9.249112,7.609973,-6.571249,2.107068,8.814226,-7.531830,7.252026,-0.940728,-7.496692,-1.695594,1.077086,3.834212,6.755941,0.736272,9.042140,5.791578,6.912234,-9.262868,-0.903204,-7.803349,1.512000,-9.460342,-4.115094,7.719794,-0.546981,-1.595404,1.110778,5.868991,6.519320,-0.584138,-2.982106,8.384383,2.904510,4.286441,4.329319,1.851225,8.360349,4.530035,-7.487949,-2.539927,-9.935638,-7.648082,1.773735,-9.094249,-9.283533,2.415594,7.459039,8.244986,-0.138649,-8.538521,-1.420742,-0.373259,6.123434,-1.301146,2.745766,-6.561016,9.355271,5.072600,8.587373,6.180978,-7.682439,-6.272844,0.224773,-8.370763,2.933697,-7.204670,-4.410920,3.180884,-8.592185,7.010640,-6.532295,-2.290907,9.955926,-7.966135,0.806373,-0.334608,-0.477422,2.813620,-1.851914,-7.244015,0.374748,-1.534524,9.512816,4.505575,5.242058,5.754728,9.083220,8.327717,2.590205,2.455765,6.432044,2.149143,-6.594430,7.795158,-1.183840,-6.176608,-8.338983,-9.931252,-4.003225,-1.484545,-0.529084,-6.399365,8.237995,-6.430348,5.412745,2.898988,-8.674498,2.007704,-8.753118,7.037626,-2.612680,-4.901332,-5.452489,-8.517239,-2.328004,-1.286716,6.264604,-0.857369,-4.830619,3.756172,-8.643883,-8.146286,9.428927,-8.933118,3.310811,4.322606,6.211102,-5.045415,-1.833417,3.992624,0.552406,4.050283,-8.163090,9.259530,6.373608,-7.637389,-2.042470,-2.374228,-9.047501,9.953501,-9.997977,5.422336,-9.536532,-4.497149,4.730105,0.005944,2.184930,3.425620,9.684012,9.716532,2.294934,-0.072069,-9.944430,-0.954086,5.649572,-4.571219,-9.379246,-4.309465,-9.015551,2.264290,-1.339634,-0.910732,5.085974,1.722357,3.524365,3.963763,-8.597702,-7.606574,-6.729964,-6.619636,-0.988976,-6.357636,-8.585405,6.396302,2.081585,-9.372900,2.180740,2.127106,-1.617084,1.075939,8.523875,0.109416,8.834332,9.625022,-1.017111,2.401030,-0.509720,5.231851,-5.310869,6.408409,4.309688,8.016126,9.752627,3.814263,0.485180,4.405030,-8.219411,5.409264,-4.921270,4.899541,-4.261538,3.840046,-9.718035,0.740193,6.756789,-3.399637,2.187235,2.249371,9.945806,-8.780586,-4.800750,9.216157,-1.526054,-9.921710,9.087282,4.710707,-5.828379,7.324256,9.712542,-7.020286,8.323192,6.945824,-8.468667,3.817866,-3.830297,2.828595,8.868995,9.871269,3.695611,-3.307625,2.408664,-1.810764,-4.583279,1.680311,-6.434235,-6.309757,-8.753236,-4.148716,6.647895,-8.180767,-1.906712,-0.733327,4.793906,4.116398,7.115713,6.228655,-4.752194,-4.580034,5.362730,-6.143674,7.772806,-4.507725,4.847523,0.249085,-1.362227,-2.280922,4.266675,4.094823,-3.181540,3.590196,-3.578761,-6.859059,-4.468349,-9.268952,-6.341513,5.319914,8.193612,-8.399156,4.679142,4.479004,6.428009,-3.687558,-0.579484,6.747393,-9.926392,-4.894919,-7.546235,0.842241,-1.922807,-8.600139,0.295976,-9.467328,9.915921,7.380400,-0.744420,4.426193,-1.796619,-2.440281,4.994065,7.200375,-2.388073,-5.272030,-2.308578,5.715217,4.701287,-2.961223,-5.756532,-7.383443,8.992775,-3.056095,-0.219790,2.398748,7.894168,-1.053962,-4.379448,-9.183098,9.266908,7.669335,8.851120,-3.254461,-3.216599,7.202619,-7.312713,9.190581,9.157199,1.122791,4.901396,-1.919034,3.648877,3.113280,-9.043419,-8.264996,-7.954512,1.563497,0.951520,5.790723,-3.284961,-0.796956,-2.625932,-0.121766,9.164184,3.577086,6.143741,0.010291,-6.488425,-8.622098,-9.635512,9.840807,-6.538946,-2.848853,-4.848880,9.280541,-7.718675,4.851483,5.206222,-8.951039,-2.469859,4.610059,0.562795,-3.258175,1.537136,-1.595667,0.179538,7.500666,2.648922,2.895359,3.109331,-9.207925,-1.684451,-6.822573,-5.491497,-8.226966,-3.118859,-5.024788,-4.964121,-1.254114,5.622524,-0.727970,-5.448067,-5.313123,6.283214,4.721865,-3.789764,2.963698,-9.325688,6.959879,-4.368540,1.715711,3.446875,3.338055,-4.893758,-9.384882,-8.756813,-2.211502,-4.602568,-5.277362,2.656243,-2.227277,-8.085031,-6.226653,1.789676,6.835161,-8.153653,-4.003382,-0.764644,8.945058,9.278613,-3.705813,-4.793707,-0.231694,7.470644,5.673609,5.534886,-1.150877,7.434516,-7.999799,-4.939790,-2.465257,-8.494228,4.439254,-8.141921,7.645676,-3.924405,-5.007264,-9.730237,8.011947,1.880379,-0.971350,-1.966594,-3.547246,-0.331994,-0.674179,-0.269114,6.671418,7.543011,5.350936,1.181288,-7.749159,-4.748648,9.282521,0.713324,-2.997773,8.594135,7.655039,-8.058493,6.090131,-7.245528,8.079877,-3.572333,9.790804,6.881434,-5.375972,1.542353,-9.045030,8.114421,1.766653,-3.548119,4.911675,-7.892860,5.543324,6.887602,0.661372,-4.834056,-0.911064,1.974590,4.314008,8.344302,-9.470794,-5.320211,-7.892083,-9.048524,-9.372775,-5.002682,-3.914427,7.761792,5.427780,-3.828322,-5.223675,3.269541,7.850068,9.040683,-0.792653,-3.297511,0.271846,3.644584,-3.550851,4.694481,5.596995,7.315210,9.280581,4.571501,0.033973,4.010166,6.816243,-6.255244,-7.903865,2.976178,-1.531212,0.354949,-9.316753,-9.455191,-3.207254,1.057828,3.730004,9.265478,1.442360,0.804874,-2.163065,7.682688,4.798143,-1.438423,8.515224,-3.802559,-4.300836,3.426147,7.515846,1.441363,-1.762330,0.243696,0.181732,-1.224074,2.244249,8.921931,-9.715566,6.713576,9.889919,9.271784,9.445889,-5.806433,0.960178,-6.201573,8.484064,-1.401431,0.618263,7.214676,-4.943695,8.321130,3.298510,8.786803,0.790810,-4.608724,1.567775,7.730781,5.502644,-7.874061,-5.920305,1.429161,-2.818766,2.507113,5.295529,6.489052,-7.609496,-9.723459,6.659845,8.390082,-5.644273,1.027993,-9.504812,1.286780,0.674813,-9.515567,-2.909558,4.888361,-6.234139,-8.862079,-7.433684,4.419806,6.598418,-5.055496,-7.565107,6.396684,9.909666,-5.182207,-8.135868,-7.863690,2.342567,6.862983,-4.401582,-4.765322,7.953268,6.474645,-3.038698,-6.470344,-1.087575,2.602360,-9.539375,9.475709,6.801356,5.735977,5.770192,7.005695,9.734576,1.538810,-8.595670,-9.724966,-1.607467,8.903130,-1.046680,-1.086079,-4.261443,3.709031,4.068502,0.144234,-9.161353,-8.072143,-4.579863,-3.476061,-2.853840,1.616068,-1.577587,-2.332299,2.023403,2.877367,9.812448,-5.171883,8.854406,-8.767702,8.792552,-2.313445,7.584912,1.873465,-5.150472,9.522001,5.189350,8.036302,-0.855012,2.645884,4.126527,2.352725,-6.161107,0.086324,-1.937964,-8.243442,1.365193,3.344789,9.091108,-9.628470,6.445196,-9.535014,-3.260337,-3.964782,4.005409,8.078485,-3.739199,5.388294,-4.385690,6.179627,8.924146,-7.383343,-7.143009,4.728350,3.776347,5.939541,6.454302,2.345451,-2.039406,-0.457181,6.233451,-9.823319,-7.098628,4.946247,-1.386010,8.316837,-7.697443,-2.333003,-0.802684,5.898155,0.981065,-6.952469,-5.484909,3.169478,2.549370,3.684889,4.992683,-4.759050,4.822478,-5.664998,-9.500860,1.728041,-5.723017,0.916968,9.606228,-4.074239,-6.101114,5.549559,-4.088269,3.096771,-4.821280,0.320483,-5.334682,-7.201334,6.993738,-9.445827,-4.592233,-9.370959,6.495368,8.066346,-5.205856,-7.830492,-1.260258,-8.090125,-4.694085,-5.807212,-8.936459,-3.049914,-5.642469,-5.712320,5.654173,5.294052,5.415675,-1.174306,-6.851584,3.921479,9.129199,4.866392,-6.473330,1.276196,8.947661,5.800536,9.717417,-8.362475,-1.144807,7.779556,8.802652,-7.353650,-2.977098,-9.889979,-9.191229,-2.699791,6.079143,-1.594546,5.138265,-9.951380,8.305200,-7.399549,1.029335,-6.695677,3.031866,2.024665,3.224499,2.695433,7.396186,-6.483948,-0.418591,6.296953,-2.766893,3.140486,2.586791,-6.671912,3.887903,6.375838,7.841797,4.070334,3.361931,-1.529404,-2.660629,5.436619,2.702843,0.622768,-6.549881,9.876713,-5.518591,-0.506560,-9.190828,0.036094,4.592585,-4.887861,-9.267291,9.980318,-4.227227,-1.268352,-5.082523,-1.157936,0.506857,8.733147,7.972412,-0.710484,4.129739,9.689370,0.076335,7.818905,-8.042935,-7.115072,4.969164,-2.741364,6.151366,-1.405721,-1.542574,0.723670,0.906336,0.080656,8.698826,-1.319742,-8.593006,-9.124432,-1.227400,-7.764778,8.390906,-0.867944,3.584339,-8.095121,7.036934,-1.452481,-1.620223,-7.378723,-2.731365,-3.287130,6.063401,-3.122858,-2.157482,-0.631712,-3.336898,2.369936,0.041737,6.916016,4.503818,3.344775,-6.604166,-7.024889,6.631926,-8.636451,6.550540,0.130731,-6.978842,-3.871369,-3.203260,9.238641,-0.070250,-5.558276,-6.607904,-7.215191,9.589571,9.138542,6.740672,-5.564889,-6.939461,-8.518219,6.346326,-9.091532,8.549523,0.291481,5.474598,-8.098918,9.105025,4.248681,-4.794362,7.869964,0.089952,-0.140917,7.239173,9.952773,5.593805,6.207523,4.099338,-3.067776,-8.068781,-5.714091,1.705038,3.879595,6.897425,-1.614610,-2.374504,-0.165012,-3.670644,-4.144055,4.150738,7.547820,1.805134,-6.761694,4.890606,0.130033,-7.646987,5.403550,2.875445,-8.792626,-8.957748,-9.634790,1.515921,-8.564326,3.293914,5.192499,0.280432,-5.562566,1.145215,3.466142,4.209410,-5.420295,5.327001,1.443511,6.760154,7.656726,3.131555,-7.310277,-4.190709,-2.818081,-9.885258,4.290336,0.044511,-4.112325,-2.900483,5.331148,0.928725,6.657709,4.603523,8.000548,-5.599125,-8.735159,-4.620663,-3.105685,-0.810505,7.819824,-7.884859,-1.412386,-2.291220,-9.184994,-7.520872,-5.987613,-2.454419,-8.343054,5.289634,-5.831809,7.128860,5.533299,0.686605,-2.907518,-1.597445,-7.249907,-8.117311,-4.422548,-3.531086,3.558930,-9.516722,-2.364136,8.071716,5.859345,-9.931584,7.612873,-2.967337,5.534245,-6.295400,0.498794,0.002448,-0.863960,-0.001136,-8.748646,4.322089,-1.247308,-3.791517,-3.932845,5.557062,-9.822359,9.475809,0.465316,-4.761402,-4.073562,6.848933,0.413552,5.081578,-8.359655,4.166819,-3.687386,4.929889,-2.424384,2.572111,8.641265,-1.988698,-3.351646,5.133138,-8.617281,3.651684,3.087334,-4.391211,9.284531,-5.752672,-5.373810,6.330688,-6.204586,2.656313,-3.166389,-9.092898,9.327805,0.460764,-4.971250,-0.951106,-4.139594,5.508461,-1.210408,-6.459707,-0.579389,6.246836,-0.752705,5.038760,8.437742,-2.082777,-5.778616,-8.699841,6.080422,7.198655,-6.345799,-7.858111,2.438336,-1.099506,-3.972064,-3.252690,4.566578,5.647072,-1.499550,2.062315,6.543284,2.986228,-7.317197,1.283397,1.544424,6.952080,-0.860887,-1.226019,-0.273329,2.694514,6.658903,1.398141,-5.012192,2.242315,0.575075,-6.573250,-8.519142,-4.571387,9.397096,-8.294665,0.052918,9.022018,-1.663902,5.146198,-5.622529,6.320468,-2.266411,7.690692,7.091518,8.504604,8.662697,5.656506,9.353765,-2.259793,7.759531,2.832210,-5.719509,7.628943,-3.871239,9.453012,2.921874,5.184855,1.261958,-5.859245,7.260617,-9.712513,-3.902365,-6.164889,6.033682,-9.300274,2.400025,4.391710,-2.701546,-2.032284,-5.465871,-8.363983,-8.435520,0.779635,-9.811095,-1.729584,-0.009064,-7.067993,-3.794361,-2.915059,0.057051,0.876397,8.223546,-2.301963,1.860767,-8.760572,5.430072,0.244415,-9.759818,0.934929,1.799457,-1.879793,-8.409402,-2.971211,0.314925,6.536392,7.495424,-7.858656,2.486560,4.503515,3.467716,-4.332323,-0.785942,7.789280,6.879060,5.002967,-1.690042,-2.810157,-6.890769,-7.481555,4.768546,-9.819190,-9.921495,7.235841,2.651048,-9.377504,5.834750,0.764865,-2.051318,-6.560958,-4.303345,-7.869002,-6.141630,1.533177,7.538859,-5.622244,8.545867,-0.847476,0.952954,-1.181958,-9.283247,-6.703664,9.803110,1.140356,-0.952191,3.454188,8.434454,7.919932,-1.012203,-4.930364,-7.696292,3.410093,9.009549,3.942057,7.476556,3.906849,-0.944090,2.865943,-8.649888,-0.065973,7.393755,6.926133,0.473945,-0.237154,8.412484,-6.338850,1.818897,-2.202001,9.644422,-1.894382,4.103906,-0.396698,8.478566,0.296421,-4.176012,-4.659539,-9.602108,-1.337811,-0.875091,3.067483,1.956106,-9.574065,0.551432,2.619335,-6.465318,-3.774685,2.404018,-6.453237,-8.240133,-8.211250,9.048877,-0.282359,-9.934285,3.529737,6.187630,5.055669,-0.332709,-5.018043,-3.403531,-4.939078,1.101376,-2.575090,6.015344,3.000283,-7.627195,-5.923525,-7.838400,9.622953,1.626119,8.219125,-4.204518,2.510429,-1.810070,-2.469379,8.176476,-2.189629,5.561536,-4.038531,1.665246,0.343413,4.365873,2.257796,-4.254191,9.133704,6.458832,6.767450,6.195907,7.647703,-3.211242,-8.793714,-1.837473,-7.259848,4.328983,8.035687,-1.696113,-4.035459,-5.676740,7.526943,3.614814,0.776657,6.667271,-8.942100,1.997351,7.011181,8.795615,-6.512456,-7.802399,-5.948987,7.642362,-1.480549,-2.502688,2.922905,-7.461253,3.030842,9.206696,-7.615446,5.707094,6.881677,-8.683130,-6.445384,-3.772381,-8.139843,5.627781,-4.300718,-1.605667,-9.877441,-0.973945,0.474338,-1.413481,-1.698960,9.087905,3.126778,9.835434,-1.655505,6.532517,7.739543,6.569932,-7.718206,-6.555150,1.156317,8.380045,0.652656,7.545326,-1.235861,-3.984567,-1.009537,6.956071,-2.160109,-2.701982,7.336640,-5.984376,-2.840894,-9.006637,-2.077058,1.186196,4.931656,-1.470108,-7.044376,3.119526,4.708928,7.121057,-5.428876,3.773642,0.942579,7.935823,2.330298,-2.739105,8.161932,-1.468498,2.609762,8.024387,-3.691531,-7.370064,2.051364,4.216598,9.377314,-8.263890,-5.792232,-2.852211,-0.524078,-7.519068,6.348042,1.464818,4.723905,1.743113,9.901330,0.974827,-2.046846,5.027929,5.154625,-2.576083,9.255161,-0.354480,7.061772,-3.805135,-9.464009,6.327541,1.909085,-7.918902,7.316646,0.127457,-6.358613,-2.151109,-3.885012,7.589783,2.921210,-0.175331,-0.305847,-5.901139,-1.485602,3.582771,9.311488,-0.650637,8.337466,3.189406,-6.791614,-7.693240,3.908449,4.197712,-8.547993,8.126766,9.212337,-4.588790,2.907460,5.225675,4.902749,-2.516660,2.793931,2.531583,-6.849461,6.975320,-1.618290,5.752060,3.551087,7.791769,8.668988,3.251734,0.742010,7.835193,-7.536248,-6.164624,5.101695,-6.495537,8.937166,-5.267195,-0.942606,8.033759,2.173558,-4.942047,5.058117,-1.069487,-7.283042,6.919131,6.493099,-4.457140,2.693381,-9.075908,-0.238683,-7.855726,-2.895735,5.536070,-7.672323,0.155012,5.406904,-2.086779,-6.922282,-4.856450,-9.011063,-7.136402,-3.929308,7.259509,0.894973,-6.261328,-9.596131,6.609443,2.590461,5.929598,4.701123,0.677032,-6.235740,-3.001312,-5.365608,-6.332683,-0.127183,2.617236,8.443941,2.553133,-3.968236,-8.530420,-5.025786,4.205761,-5.686598,8.908893,-9.506369,4.255164,4.526606,8.316276,-8.136067,-7.818902,-0.947029,6.498164,8.688252,-0.351300,-9.973696,-2.012453,-6.860366,4.581759,2.912406,7.725469,2.220451,-0.352170,-8.074833,9.776432,0.054630,9.786654,5.708663,-5.145509,7.264737,-6.536791,9.138228,-8.870267,-0.976818,2.974680,9.736556,1.426085,5.130855,4.786137,5.774436,-3.384924,-1.471448,-6.126468,-2.593083,-4.183095,5.156236,6.281181,-8.394394,2.232880,3.471458,-9.469468,0.552624,-1.767110,1.936027,-8.253063,-4.221479,-8.200945,-3.097784,-8.929800,2.132570,6.895285,7.928207,5.813614,-8.332042,-9.303532,2.420735,-6.400380,7.997959,1.200566,-6.749739,9.473569,-7.830016,-2.596867,6.939077,9.725039,6.300205,3.382214,-6.457190,-7.875404,0.317355,-3.485998,0.539648,7.543802,1.965209,-4.490630,-1.917446,-9.000570,8.776178,-2.546667,7.373785,7.418497,-2.947288,1.476216,4.523337,3.736737,1.901794,-3.633723,3.375477,6.287317,-2.132651,-2.373025,6.683504,-2.027253,8.014496,2.420005,-7.424070,-9.109525,-3.834625,2.506472,0.673526,-6.599392,4.738066,-4.701587,8.501994,6.150840,7.908899,-5.229756,6.985380,9.247215,0.626951,7.450634,7.673563,-5.956698,-7.184369,6.593945], dtype = "float64")#candidate|6790|(1568,)|const|float64
call_6787 = relay.TupleGetItem(func_6369_call(relay.reshape(var_6788.astype('uint16'), [4, 11, 1]), relay.reshape(const_6789.astype('uint16'), [4, 11, 3]), relay.reshape(const_6790.astype('float64'), [1568,]), ), 0)
call_6791 = relay.TupleGetItem(func_6373_call(relay.reshape(var_6788.astype('uint16'), [4, 11, 1]), relay.reshape(const_6789.astype('uint16'), [4, 11, 3]), relay.reshape(const_6790.astype('float64'), [1568,]), ), 0)
func_6287_call = mod.get_global_var('func_6287')
func_6288_call = mutated_mod.get_global_var('func_6288')
call_6793 = relay.TupleGetItem(func_6287_call(), 1)
call_6794 = relay.TupleGetItem(func_6288_call(), 1)
output = relay.Tuple([call_6731,bop_6744,uop_6756,call_6759,const_6760,const_6761,call_6780,var_6781,call_6783,var_6784,call_6787,var_6788,const_6789,const_6790,call_6793,])
output2 = relay.Tuple([call_6733,bop_6744,uop_6756,call_6762,const_6760,const_6761,call_6782,var_6781,call_6785,var_6784,call_6791,var_6788,const_6789,const_6790,call_6794,])
func_6813 = relay.Function([var_6781,var_6784,var_6788,], output)
mod['func_6813'] = func_6813
mod = relay.transform.InferType()(mod)
mutated_mod['func_6813'] = func_6813
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6813_call = mutated_mod.get_global_var('func_6813')
var_6815 = relay.var("var_6815", dtype = "float32", shape = (64, 16))#candidate|6815|(64, 16)|var|float32
var_6816 = relay.var("var_6816", dtype = "int64", shape = (80,))#candidate|6816|(80,)|var|int64
var_6817 = relay.var("var_6817", dtype = "uint16", shape = (44,))#candidate|6817|(44,)|var|uint16
call_6814 = func_6813_call(var_6815,var_6816,var_6817,)
output = call_6814
func_6818 = relay.Function([var_6815,var_6816,var_6817,], output)
mutated_mod['func_6818'] = func_6818
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6329_call = mod.get_global_var('func_6329')
func_6331_call = mutated_mod.get_global_var('func_6331')
call_6886 = relay.TupleGetItem(func_6329_call(), 0)
call_6887 = relay.TupleGetItem(func_6331_call(), 0)
const_6888 = relay.const([[[-1.930477,-1.968925,7.281976,5.197591,-1.048436,-6.958060,1.616817,7.912206],[3.208104,-9.412526,-8.646677,-9.789462,7.441317,-0.717805,-8.395766,-8.266491],[-3.400404,7.829395,6.861907,-9.810222,4.195053,9.406377,2.995693,8.395533],[3.218834,-5.497191,4.671002,3.271347,-9.749915,0.414290,7.396981,-2.023878],[-1.458070,-3.084659,-1.675102,1.064123,5.102925,1.962689,0.872437,5.070050],[-8.373012,-9.959841,-6.259467,-5.199679,2.049109,6.790312,4.115861,1.616325],[9.591534,5.739136,-1.706896,-7.347810,4.783817,-7.257568,-0.485850,6.676500],[-6.870819,-7.846118,0.366813,7.018623,-1.375611,-1.780128,-7.400539,-6.109936],[9.301814,-7.629495,-9.597437,4.891672,-8.466199,8.467872,4.878367,5.721631],[-8.784159,4.439952,-2.659985,0.461273,1.013805,-4.168444,4.812675,-5.379925],[1.749926,-5.240924,3.282453,1.560838,-4.518885,-5.879028,-8.942688,1.690077],[5.720289,-1.223580,4.218474,-0.500759,7.486972,0.018338,3.254500,0.066615],[-1.170790,0.332327,1.876440,6.164540,7.682031,-5.698191,1.190868,-0.479929],[-2.316591,-5.110273,-0.375535,-9.757651,6.733238,-7.433476,2.114450,0.491994],[-7.854820,0.313125,-7.849824,3.334112,-8.435915,2.414809,6.261577,-7.710483]],[[-1.925872,2.290515,-6.860195,2.968005,3.908280,-2.131413,3.292506,-9.407916],[-6.985229,-3.463854,-8.485154,-3.989639,3.327684,-4.942932,-2.747215,-9.413551],[6.121436,0.794331,2.193983,-2.405383,5.162409,-9.190589,-8.289394,-6.426832],[-6.510732,0.405385,-3.754572,-0.651222,3.906477,-1.770439,0.140498,1.560457],[-8.967468,-3.118406,4.934304,5.138500,-6.940422,5.111976,-3.338976,8.934363],[-6.023267,-3.384639,2.928522,-0.095266,5.301298,-9.073008,7.506478,-2.682180],[-2.091049,-8.429047,1.366932,-5.210473,2.285566,-9.622048,8.380233,-1.819913],[9.740067,-2.530112,4.579578,1.592816,6.971432,-8.858680,0.249128,4.975868],[7.585619,6.078469,6.705610,-0.262845,-4.830829,-7.517527,7.378982,9.079077],[2.223688,9.556945,9.103150,-2.823360,-5.574014,5.230327,3.477750,3.318375],[-1.547775,7.735964,0.187806,-3.423115,-1.355745,9.920880,-8.400321,-9.324270],[8.506929,-7.974298,8.819028,7.582457,2.959123,9.991479,6.717702,-2.639477],[-7.834193,9.431824,2.191811,0.433855,0.078960,0.661237,0.520011,4.997772],[4.918643,8.401605,-6.751371,-1.140379,-0.296361,-5.277448,2.060674,3.500937],[-3.264441,4.381364,5.092411,-8.291571,6.256571,-9.818893,6.218506,1.670702]],[[5.947180,3.806850,-7.753328,-9.655279,-6.204926,-3.929734,5.824995,4.590200],[3.788811,2.060309,6.800371,4.514877,-2.210937,2.842121,8.292733,-2.106737],[-6.200245,8.058774,-0.042848,6.538390,-0.308749,-3.442009,0.361337,-8.100149],[-3.977779,1.248058,0.594172,-4.316485,-3.676186,4.107624,1.683744,6.010833],[-7.800315,-6.387598,-6.285978,2.682311,5.530920,-6.656367,2.704802,5.761070],[-2.320148,6.111011,3.507444,0.929815,4.570043,-1.532571,4.588546,-7.937265],[-7.902966,-0.954305,-7.933489,9.113896,9.696689,1.980523,-4.251590,-2.723053],[9.215623,-3.160603,1.217976,6.180319,7.312303,5.792796,0.913550,-4.214837],[-8.090030,-2.405342,-3.384940,7.294366,4.760660,-8.822212,3.073126,-8.330234],[-7.902020,-4.276364,9.528877,-3.645367,3.376803,0.418407,-8.516004,-8.862897],[-9.962750,7.003534,-8.645151,-8.716954,8.153413,-7.064701,2.534056,-9.053179],[4.607232,1.873204,-5.096043,5.346438,-0.264202,-5.724239,-8.068465,6.632015],[9.013513,1.367859,8.687009,2.595461,-1.098065,-0.021591,-0.194440,7.054268],[9.258983,-6.916299,7.561135,0.915696,-5.217417,-7.361665,-0.004520,2.400675],[-2.342333,2.257571,-2.371104,0.337165,-3.959262,-2.396527,-6.407985,0.900574]],[[3.115766,6.162592,0.537427,-8.504208,-6.171012,8.384185,-0.115879,-3.210339],[4.239433,1.707287,-8.007313,5.472964,-2.340342,4.700643,9.633496,-6.647001],[3.788648,6.300532,-1.299903,-4.124454,-7.887958,9.716380,7.087448,-5.341707],[6.371495,-3.099942,-3.792385,0.711079,-2.324053,8.323715,4.644533,-4.638469],[3.346732,0.080579,1.694858,-1.266189,1.459081,-7.189713,7.449812,-7.711348],[-7.202971,-8.001038,-5.707528,3.323022,-2.963163,-6.829749,-6.288853,-0.745907],[2.435523,9.772752,-1.279376,-4.096276,2.402121,-1.638982,7.836163,-3.399930],[6.985699,-7.504842,-5.120497,-3.804716,-8.668049,-5.482270,9.181583,-5.574384],[-3.989558,5.303181,7.009701,0.193336,4.369191,5.504144,-9.487212,-3.979483],[-2.751844,1.312644,8.273457,-4.200345,-3.075254,-1.616376,0.685914,-2.930448],[3.181654,-7.546789,-3.824891,4.583644,0.027331,-4.498018,-3.712157,-2.792622],[-4.703476,9.862531,3.947688,5.572995,-3.711797,-1.110027,9.578892,-1.106503],[-9.153020,1.275782,-2.863172,-7.875200,-1.760507,9.952184,-9.187662,8.039485],[7.939816,-4.571845,-5.452162,-5.741636,8.629951,1.922537,-4.845529,7.422676],[-7.668246,0.873708,-7.215223,2.403754,-5.107992,6.042519,-6.072854,0.300294]],[[-3.647903,-1.423735,-5.422867,6.829630,5.321458,-2.673774,-2.827298,8.528614],[-1.277842,0.897980,-3.213070,8.960364,7.503377,0.402043,-9.552105,9.655831],[-6.760671,9.368039,1.161510,4.200758,1.295298,-3.835015,1.645505,2.941940],[-1.907653,-2.999866,1.398702,4.238981,2.649933,-4.600750,-2.162736,-2.930898],[1.320164,6.982705,-7.604559,-8.633169,-9.141420,-6.354406,-1.203135,0.869541],[-0.474121,1.748721,-0.795232,1.338420,-2.856515,7.711656,3.693508,6.756021],[8.424356,2.828118,0.563452,-4.979930,-8.572064,-3.539337,-2.867277,2.217246],[8.427252,-5.752824,-8.853141,8.243537,2.487578,9.187806,-1.995176,7.060060],[1.816110,-5.901452,-8.812772,-1.006370,7.155820,5.265911,-2.079447,-2.878617],[-5.323279,6.088863,-8.356137,7.233828,9.831788,9.130249,6.507977,-3.863880],[4.554863,-1.712856,2.047248,3.582670,0.529756,-0.451983,8.928384,3.229192],[9.618530,-9.874082,-8.131903,5.165715,-2.568371,7.002697,2.634807,-8.337279],[-4.834258,6.987456,9.692685,-4.719714,2.882154,4.393857,-9.156221,-6.351869],[3.587252,4.710925,-9.611997,-1.821904,8.691043,8.135111,9.038380,-5.888637],[-7.427801,3.599035,-6.931623,-7.670377,-5.986228,-3.690714,-1.100229,-8.969655]],[[-5.620630,5.927701,-6.462383,8.973661,-8.085729,-4.891359,3.240966,8.142192],[-8.492770,2.171839,9.850141,9.070491,2.316178,-6.876668,-7.685092,-3.507380],[-7.201043,-5.690157,6.745599,5.233394,-3.598426,2.192838,-6.961756,4.808633],[8.942520,4.765582,-1.413868,-9.104238,-9.426087,7.314480,1.446792,7.160542],[-2.079142,-2.737463,-6.321364,1.498086,4.826335,-4.737292,1.771255,9.044211],[-6.229924,6.500058,5.981066,9.993107,-7.268634,-4.863769,-4.696609,-6.725242],[7.521092,-1.718219,-2.297848,-1.308916,-5.050214,4.766856,-1.632429,-9.629064],[2.435560,7.553382,1.020590,-7.114249,-1.066507,3.398829,0.261727,3.801314],[-2.710353,-8.477691,5.418655,-2.255766,7.969319,8.505126,-4.526588,-7.691947],[-2.480370,-2.778759,-5.383092,3.619291,-8.169641,7.135101,-7.589128,-7.611652],[-9.990531,2.557301,-3.975295,7.544545,5.653295,0.324411,-4.967822,3.609853],[-5.941538,-0.848199,7.001443,7.494307,-5.218241,6.738411,8.039221,3.383869],[-2.350744,5.008359,0.098581,-0.238727,2.555382,-3.485384,5.504416,-2.590856],[-7.317974,0.167965,7.026476,4.583412,6.448061,-8.577279,-8.590648,0.277250],[5.290703,4.840871,4.345732,0.124428,-2.908731,9.191127,-7.063734,4.628369]],[[-3.909881,-4.699027,2.177673,-4.000502,-0.556217,2.493409,-2.145950,6.026250],[0.778445,-1.039033,-5.005087,9.651753,-3.113302,-9.272419,7.399692,9.196390],[-2.404803,1.279112,2.002843,6.629010,-5.383731,-8.976480,9.207638,-7.818124],[7.780372,2.503710,6.639182,-2.324182,8.089584,-8.551882,-6.333946,5.561929],[5.399093,-5.111361,-7.966867,-0.969270,-3.750758,4.507898,-7.220417,-8.148439],[1.579451,1.410264,-6.516406,-4.408840,-5.672959,-9.434467,-0.971377,-9.623257],[-6.578833,-2.220240,-7.964994,-8.081200,0.984733,-0.020215,4.441951,1.683994],[-5.020107,1.340994,-9.819071,3.962110,-6.927357,8.425135,6.599819,-2.414675],[-3.101603,-0.592842,0.890140,9.611936,-1.922836,-0.777952,-3.266134,-3.157033],[-2.061033,-9.380563,7.160923,-3.728408,0.317910,-3.165645,4.884888,9.900441],[7.128049,-3.058272,-6.324757,-9.156307,2.817189,-2.469997,-7.219024,-6.612021],[6.863134,-4.681459,-9.867748,-1.176238,-0.514032,-1.504017,-5.424589,-6.205031],[4.887668,-7.036467,-0.399248,6.652681,-5.811030,-6.771744,-4.291827,3.078420],[4.152243,9.080983,-9.227156,1.166729,-1.011179,-8.236389,9.735010,4.390363],[1.712009,-4.905625,-8.016563,9.451788,-1.362272,7.475984,9.157375,-2.962148]],[[-4.315088,-8.495096,7.868660,-7.150786,-0.038416,-0.564095,9.459126,-4.999233],[-4.014291,-0.357394,-7.995242,9.174412,6.354787,-4.424877,0.080656,1.330381],[-3.337682,9.720128,-7.632542,0.637048,-9.639843,-5.212772,4.424480,3.832358],[-1.645642,-7.193189,3.349351,4.805076,8.048417,5.280576,-9.084752,-5.631107],[1.177302,-8.760972,0.648433,-5.073380,-0.742301,6.989587,1.143400,5.347964],[9.537749,1.371773,6.017093,6.413554,-8.026492,6.435739,-7.362650,2.909236],[0.641020,6.856952,3.231265,9.742046,-9.220146,-7.748421,2.920335,2.164964],[5.348053,2.412192,9.344427,0.561139,-2.736490,-6.862929,1.331334,-7.259921],[-2.976587,9.697778,4.729197,9.011052,-4.476193,0.897351,2.686777,-2.046686],[1.992441,5.225353,-4.800565,-4.064805,7.250357,3.904118,-7.455298,-0.628218],[0.837631,4.755661,-5.993861,6.329802,-9.061223,-0.819261,3.648542,-9.957843],[-1.000367,-1.451729,6.128374,7.353984,7.441326,4.048289,-5.463741,-5.478443],[7.826531,-6.555952,-3.989498,-2.741811,8.353051,-2.678245,2.702825,6.934440],[-8.840819,0.904690,5.425102,0.700996,6.227733,-0.908535,-0.822727,-7.593443],[-2.865954,1.700782,-8.959976,2.811270,-4.942367,-7.480284,4.923329,2.089372]],[[6.375591,0.843419,-4.857519,-2.391568,0.882565,6.009152,9.290372,9.046151],[7.004808,3.600203,0.396130,2.570198,-0.575132,5.531023,7.133405,-7.691546],[8.747300,9.773798,-7.815690,-3.763546,8.108116,9.516876,6.601926,-9.365457],[5.848125,-9.006949,9.763877,-4.621894,8.359358,6.469709,-7.429420,-5.074248],[5.816362,0.202254,1.553489,0.072934,-7.065991,8.270121,3.051126,-8.066915],[7.350672,1.330292,-5.600766,5.653954,-7.980185,-7.556844,-0.990745,-4.954174],[0.054129,2.268679,8.669819,1.548499,4.349205,9.158836,-2.533621,0.222534],[-1.797988,-3.495252,-2.596784,6.658631,-0.897398,7.278829,-5.900203,-5.920565],[-6.278185,-1.698076,-7.965050,9.522482,-7.073884,1.742639,-8.441798,6.235612],[6.872396,7.126606,6.823968,-7.788592,-8.530247,-3.518486,-2.464264,-1.176278],[-1.939224,-8.455725,-2.057203,-2.043048,5.589513,-3.065131,-4.706395,-6.018405],[6.729218,7.763585,-1.890761,0.389500,6.992009,5.857186,-3.290501,-3.594009],[-9.613430,-6.905609,-9.354964,-7.191890,-9.539745,5.958167,-1.490408,-1.394306],[3.453122,-7.902524,-4.496811,5.772672,7.988648,3.544673,-6.827195,-6.354994],[-1.647465,-7.016640,2.777006,-0.943252,2.357173,-7.614853,-9.991266,1.760378]],[[-7.929841,7.368598,6.411948,-7.700555,-7.276314,3.436684,-4.961220,3.109850],[-2.114248,8.029023,-3.193381,1.320030,-3.422064,6.624524,-1.878900,-5.613767],[-0.189466,9.618711,-0.219775,-8.260279,7.585073,-8.897480,4.816212,2.986787],[6.090794,2.993497,-6.802271,3.705708,-1.289436,8.927776,3.178564,6.546934],[-6.996364,-9.768051,4.301669,6.925622,-4.816715,-8.150108,1.501527,8.504334],[-6.305328,1.872611,1.997628,1.104047,2.655184,-8.437568,3.826007,4.784865],[8.539108,-8.647893,-7.506881,0.427830,9.018928,9.176780,1.133620,1.256460],[1.419029,1.405652,7.000691,3.367852,9.746149,-6.838447,6.433009,-8.240610],[7.749746,3.323380,-9.911242,-9.483074,-6.476350,8.088748,-1.840619,-5.999797],[2.630862,-6.060511,-1.204619,4.099654,5.340333,-7.985212,7.592536,4.493331],[-4.680611,0.368467,-6.189739,-9.368384,6.664415,-5.015373,7.552798,9.115320],[-3.380866,1.351888,5.960384,9.951441,-0.570573,-8.657524,-1.922244,-5.408606],[-6.625130,-3.977008,1.557827,-5.697010,-0.856500,-6.117387,8.210803,-6.743317],[3.429899,-7.846656,-7.318033,-5.117600,-8.106268,6.246222,-3.417113,3.949782],[5.045562,4.825209,-7.891931,6.551289,6.830404,-4.023102,9.421438,-1.981533]],[[3.377971,-5.859673,-3.019159,-7.506751,7.547401,-6.063678,-2.078652,-5.853106],[5.482976,-8.195272,2.712243,-2.010286,-7.373532,1.880432,7.715009,-0.725327],[7.878892,-8.999039,2.102648,-1.766851,-3.548175,9.579722,-2.417252,-8.339670],[2.765003,9.919530,-0.671415,8.931811,0.765426,9.653629,2.873191,0.412438],[-6.079970,-3.759847,-6.739159,-6.918263,1.131023,4.423745,7.184265,6.554953],[1.640271,-2.535330,-5.153966,-7.185343,-8.374221,-6.389069,1.985290,-4.868742],[-7.905246,-3.438982,6.875759,7.635975,-2.138383,-7.410326,3.186094,-5.270611],[4.773902,-2.769514,6.181780,8.091367,-6.709023,1.377489,6.964870,7.648467],[-5.568844,-8.583105,-2.022470,9.343327,7.857518,1.866450,0.006888,0.700640],[-3.286729,1.750347,-8.227102,1.635891,-0.449113,-2.134405,7.901371,5.346930],[7.412540,0.805721,-2.925733,-8.244399,1.930646,-3.032388,-7.945931,4.828656],[8.894302,-1.495801,8.451373,2.915787,-3.262689,9.451709,2.871497,7.841629],[-7.247549,4.877683,8.982606,-9.940675,6.892041,-0.923748,-7.626936,-8.306205],[-9.624018,5.333014,-2.909074,6.361687,1.513952,-7.250677,-1.856254,7.531417],[4.642656,2.263907,6.340812,6.280211,-2.592745,-1.972858,6.704003,-1.309672]]], dtype = "float64")#candidate|6888|(11, 15, 8)|const|float64
bop_6889 = relay.logical_or(call_6886.astype('bool'), relay.reshape(const_6888.astype('bool'), relay.shape_of(call_6886))) # shape=(11, 15, 8)
bop_6892 = relay.logical_or(call_6887.astype('bool'), relay.reshape(const_6888.astype('bool'), relay.shape_of(call_6887))) # shape=(11, 15, 8)
func_1293_call = mod.get_global_var('func_1293')
func_1300_call = mutated_mod.get_global_var('func_1300')
var_6903 = relay.var("var_6903", dtype = "int16", shape = (30,))#candidate|6903|(30,)|var|int16
const_6904 = relay.const([4,-4,9,-8,-9,1,4,-8,4,-6,2,5,10,7,9,-5,-6,-3,-4,-1,9,-1,-9,1,-10,-2,-7,-2,8,8,-7,-4,3,-7,-8,10,-2,2,1,-5,-2,-1,3,3,-5,1,-3,5,4,-3,-2,-10,3,6,-5,4,9,6,1,3,2,5,3,-3,4,9,-8,-10,3,6,-10,-7,6,-1,5,-10,-2,-4,7,-1,-5,6,-3,6,-6,-6,-3,-3,6,-3,-10,10,1,8,-1,-10,-1,-4,5,-10,4,-7,-9,-3,6,8,2,9,-1,-3,6,-1,-10,-3,4,-5,-9,5,-3,-5,-6,-7,8,-2,-3,-3,8,7,-8,-2,4,-3,10,-3,6,-3,8,3,-6,-8,1,7,5,7,4,10,-7,-3,10,-1,1,-1,4,8,10,-8,-7,-10,6,-8,5,8,-8,8,-4,-6,-4,7,-10,7,-1,1,-9,10,8,-6,3,-6,7,-1,-4,-8,-4,6,10,-4,-2,10,-7,7,-8,10,-10,-6,-2,-8,6,5,-10,3,-8,-2,-3,-10,-5,-6,3,-6,-4,-8,9,-3,1,-4,10,-3,-4,9,-9,8,9,7,-3,4,5,-4,-9,9,8,3,1,-8,-10,2,7,5,7,-7,7,8,3,-8,2,2,-1,5,10,-6,-10,4,-2,3,-1,10,2,-1,9,-9,7,10,-8,-1,-10,-1,-7,10,-3,9,-5,-3,-4,-4,-4,-5,-4,-10,-9,1,7,-2,6,-6,-4,3,3,-6,2,3,3,-6,2,-1,8,2,5,-2,5,2,-4,-7,-2,-5,5,10,-5,-6,6,-1,1,-10,9,-1,-1,-2,-7,1,5,6,3,7,6,-6,-1,5,-2,2,6,-4,4,1,8,-5,-7,1,10,-7,-1,9,1,8,8,5,-1,2,-6,1,4,-6,-8,2,-7,2,-3,4,4,7,1,-7,-10,10], dtype = "int16")#candidate|6904|(360,)|const|int16
const_6905 = relay.const([False,True,True,False,False,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,True,True,False,False,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,False,True,False,False,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,True,False,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,False,True,True,True,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,True,True,False,True,False,True,True,True,True,True,False,False,True,True,True,True,True,False,True,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,True,True,False,False,False,True,False,False,False,True,True,False,True,True,True,False,True,False,False,False,False,True,False,True,False,False,False,False,False,False,True,True,True,True,True,True,True,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,False,True,False,False,True,False,False,True,True,True,True,False,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,True,True,True,True,False,True,False,True,False,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,False,True,True,False,True,False,False,False,False,True,True,True,False,True,True,True,True,True,False,False,True,True,True,True,True,True,False,False,True,True,False,True,False,False,True,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,False,False,False,True,False,False,False,True,True,False,False,False,True,True,True,True,True,True,False,False,True,True,False,False,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,False,True,True,True,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,False,False,False,True,True,False,False,False,True,False,True,False,False,False,True,True,False,True,True,True,False,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,True,True,True,False,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,False,True,False,False,True,False,False,True,True,True,True,True,True,False,False,True,False,True,False,True,True,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False,True,True,False,False,False,False,True,False,False,True,True,True,True,False,True,True,True,False,False,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,False,False,True,True,True,True,False,False,False,False,True,False,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False], dtype = "bool")#candidate|6905|(616,)|const|bool
const_6906 = relay.const([-4,-10,-3,-10,-10,1,7,-10,-10,6,4,1,-2,-5,-8,6,-1,7,-7,3,6,-5,-5,-1,-7,-9,6,9,2,-3,-8,4,-7,-5,10,4,-4,-10,-5,-4,-10,7,4,2,-10,6,-5,-1,-1,-1,-6,10,5,7,-3,-6,3,-8,9,-4,-6,9,1,6,-6,-7,-1,2,-9,9,9,2,9,10,-2,9,5,9,-7,1,1,4,7,9,-5,7,-4,-10,10,2,-4,-10,-8,8,4,-7,-9,7,6,-3,4,9,-8,-4,-8,-10,7,3,9,-9,3,5,8,2,-8,7,5,-4,4,3,4,4,5,7,1,4,3,-7,-3,-4,-4,-5,-8,1,-4,-2,2,-2,-3,1,-6,-7,-6,7,-1,-10,-6,3,-1,6,1,-6,3,-9,6,10,5,-10,-2,-10,-1,-8,-3,-1,-7,2,4,-2,7,-7,1,6,5,-9,-2,-1,-9,-10,-2,-9,-7,-1,-10,-1,-6,9,-6,-5,10,9,3,6,9,-4,-8,-3,3,-7,-7,-7,5,-10,4,1,9,7,9,2,3,2,9,6,7,5,10,-5,-2,3,10,10], dtype = "int16")#candidate|6906|(220,)|const|int16
const_6907 = relay.const([[-5,-4,7,5,1,4,-8,-9,-5,-6,-5,4,-3,10,-4,4,5,4,-9,1,1,-4,-2,9,5,8,-10,-10,3,5,-2,7,-6,9,-9,3,-6,8,10,-7,7,-5,-10,-9,8,-2,-2,-6,-9,-2,-5,-10,-4,9,10,-10,-3,-3,1,8,4,10,7,4,2,6,-3,-8,-5,-2,5,1,7,1,-3,-7,-6,-3,-6,-1,-3,6,1,4,3,2,-7,5,4,2,-4,-4,-10,5,4,-2,3,4,4,-2,3,6,-5,-4,9,-6,-6,5,-7,-10,8,-9,-2,5,-10,-2,8,-5,-10,-4,4,6,-10,6,3,10,7,-10,-2,-4,1,9,5,4,10,6,6,6,3,3,7,7,3,-3,-4,9,-5,7,-10,-5,9,-8,5,10,5,6,-9,6,-2,-8,7,4,-6,2,-1,8,-10,4,-10,5,-10,-7,-6,2,1,-6,7,-10,10,9,-9,-1,5,6,10,3,4,10,1,10,1,-2,-8,3,6,-9,-1,6,4,3,3,3,-6,-7,-6,-10,-3,-7,-7,-8,4,-10,8,3,7,-7,4,8,-4,6,4,-8,10,-7,-8,2,4,7,7,5,5,-4,3,-8,9,-6,-10,9,4,7,-2,-3,10,-10,9,-10,-7,-3,6,-7,5,-7,2,5,1,7,10,2,10,-8,7,-3,-10,-7,10,-1,-1,-10,-4,8,-8,9,-5,-9,-2,3,-2,-4,-7,-9,6,1,-8,-10,-7,-8,-1,2,-9,-10,7,10,2,-2,-8,-5,2,-2,9,5,-10,1,-1,9,6,-2,-5,-4,8,-5,10,-1,-5,5,6,-10,-2,-10,-5,-4,10,-6,8,-1,8,3,5,-10,-6,4,4,8,4,10,9,-2,10,4,-10,6,-3,7,2,8,-4,-2,6,-6,-10,-10,2,7,-2,10,8,-1,5,-8,-7,7,-1,-2,8,7,-8,-6,9,-10,4,2,-8,-4,-2,1,1,3,-8,-8,4,-4,-2,-3,-4,3,-5,-2,1,7,10,-3,8,4,-10,2,-10,8,-9,-5,2,-2,7,1,2,9,7,-5,-7,-3,-3,-3,-5,5,10,6,-7,10,-6,2,-10,-2,-5,4,-5,-9,3,-1,10,2,-5,-3,-9,-8,3,-3,-3,2,1,9,4,-6,9,7,5,-1,-10,-3,-5,-5,1,5,-4,-3,4,3,-10,-7,8,10,5,-4,-4,-7]], dtype = "uint8")#candidate|6907|(1, 462)|const|uint8
call_6902 = relay.TupleGetItem(func_1293_call(relay.reshape(var_6903.astype('int16'), [10, 1, 3]), relay.reshape(const_6904.astype('int16'), [10, 12, 3]), relay.reshape(const_6905.astype('bool'), [616,]), relay.reshape(const_6906.astype('int16'), [220,]), relay.reshape(const_6907.astype('uint8'), [7, 66]), ), 6)
call_6908 = relay.TupleGetItem(func_1300_call(relay.reshape(var_6903.astype('int16'), [10, 1, 3]), relay.reshape(const_6904.astype('int16'), [10, 12, 3]), relay.reshape(const_6905.astype('bool'), [616,]), relay.reshape(const_6906.astype('int16'), [220,]), relay.reshape(const_6907.astype('uint8'), [7, 66]), ), 6)
output = relay.Tuple([bop_6889,call_6902,var_6903,const_6904,const_6905,const_6906,const_6907,])
output2 = relay.Tuple([bop_6892,call_6908,var_6903,const_6904,const_6905,const_6906,const_6907,])
func_6918 = relay.Function([var_6903,], output)
mod['func_6918'] = func_6918
mod = relay.transform.InferType()(mod)
mutated_mod['func_6918'] = func_6918
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6919 = relay.var("var_6919", dtype = "int16", shape = (30,))#candidate|6919|(30,)|var|int16
func_6918_call = mutated_mod.get_global_var('func_6918')
call_6920 = func_6918_call(var_6919)
output = call_6920
func_6921 = relay.Function([var_6919], output)
mutated_mod['func_6921'] = func_6921
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6329_call = mod.get_global_var('func_6329')
func_6331_call = mutated_mod.get_global_var('func_6331')
call_6926 = relay.TupleGetItem(func_6329_call(), 0)
call_6927 = relay.TupleGetItem(func_6331_call(), 0)
func_6918_call = mod.get_global_var('func_6918')
func_6921_call = mutated_mod.get_global_var('func_6921')
const_6936 = relay.const([7,5,-4,2,-4,-4,-4,5,3,-8,-2,-9,7,-5,-7,-8,-8,6,6,1,-6,8,-5,10,8,10,7,10,5,5], dtype = "int16")#candidate|6936|(30,)|const|int16
call_6935 = relay.TupleGetItem(func_6918_call(relay.reshape(const_6936.astype('int16'), [30,])), 3)
call_6937 = relay.TupleGetItem(func_6921_call(relay.reshape(const_6936.astype('int16'), [30,])), 3)
var_6945 = relay.var("var_6945", dtype = "float64", shape = (11, 15, 8))#candidate|6945|(11, 15, 8)|var|float64
bop_6946 = relay.bitwise_or(call_6926.astype('uint32'), relay.reshape(var_6945.astype('uint32'), relay.shape_of(call_6926))) # shape=(11, 15, 8)
bop_6949 = relay.bitwise_or(call_6927.astype('uint32'), relay.reshape(var_6945.astype('uint32'), relay.shape_of(call_6927))) # shape=(11, 15, 8)
func_1621_call = mod.get_global_var('func_1621')
func_1624_call = mutated_mod.get_global_var('func_1624')
var_6956 = relay.var("var_6956", dtype = "float32", shape = (1024,))#candidate|6956|(1024,)|var|float32
call_6955 = relay.TupleGetItem(func_1621_call(relay.reshape(var_6956.astype('float32'), [16, 16, 4])), 0)
call_6957 = relay.TupleGetItem(func_1624_call(relay.reshape(var_6956.astype('float32'), [16, 16, 4])), 0)
func_5503_call = mod.get_global_var('func_5503')
func_5506_call = mutated_mod.get_global_var('func_5506')
var_6965 = relay.var("var_6965", dtype = "int32", shape = (780,))#candidate|6965|(780,)|var|int32
var_6966 = relay.var("var_6966", dtype = "int32", shape = (1920,))#candidate|6966|(1920,)|var|int32
call_6964 = relay.TupleGetItem(func_5503_call(relay.reshape(var_6965.astype('int32'), [5, 12, 13]), relay.reshape(var_6966.astype('int32'), [1920,]), ), 0)
call_6967 = relay.TupleGetItem(func_5506_call(relay.reshape(var_6965.astype('int32'), [5, 12, 13]), relay.reshape(var_6966.astype('int32'), [1920,]), ), 0)
func_2334_call = mod.get_global_var('func_2334')
func_2340_call = mutated_mod.get_global_var('func_2340')
const_6970 = relay.const([9.667542,8.007168,4.177675,3.225661,5.591935,0.205607,-6.577590,-3.594312,-9.296017,-9.538717,-2.098877,8.749881,9.405269,-8.951553,-1.757078,-6.435425,8.889399,3.037486,6.644361,2.593431,-7.518766,-6.523159,-9.424196,-3.891560,1.910718,-6.926307,0.839477,9.014011,-0.006963,-0.710727,2.259728,-4.559703,-9.658387,-9.726773,5.440818,6.207250,-9.317704,-8.909720,-6.335508,3.607588,-5.067049,1.329486,1.902977,-7.791591,-8.096869,-0.243528,-7.175526,-3.977247,-9.514641,-2.170766,9.184849,0.609603,7.541016,-1.921621,3.519854,3.680192,4.905676,8.977030,-5.230792,-7.274860,-6.519830,-6.937502,-4.081008,-4.096688,5.047980,-0.255088,-1.775737,-1.801874,0.605520,1.176407,-6.444067,-6.296390,6.590318,4.919926,-2.719588,7.612720,-6.682653,9.271594,-5.275529,-0.895250,-3.359771,-7.208192,-0.324964,-8.550596,6.561180,-5.975276,-8.524994,-0.365198,5.717970,6.036341,3.383732,-5.804037,3.105675,-2.735413,4.428199,7.658723,6.460420,-3.352186,6.300566,-0.138011,-9.030293,-5.691650,1.340127,1.925234,-0.600461,-8.270055,3.364732,-0.992655,-0.138229,-3.375183,7.723283,8.060934,-6.595440,-0.283621,-2.238664,-8.836804,-2.899928,-4.720716,2.306381,-5.433230,-7.648148,-0.299605,4.683168,-1.152552,0.618909,-8.480343,4.541332,-6.094817,0.554072,0.076688,3.890442,9.725124,-3.671245,5.502026,9.706155,-5.864280,5.242606,2.028311,1.112721,-4.829797,-5.320313,9.183178,6.599906,8.919255,-5.372241,-2.460485,8.400101,5.158791,9.789432,9.429340,-1.892061,3.016665,-0.840230,2.720293,-3.326918,4.149845,-0.368372,-3.152231,-8.585679,-3.142508,-1.016729,-2.442033,-1.260253,-8.743136,-6.779547,-8.946203,4.115672,-3.234739,-8.800885,4.737060,-8.257658,-5.015750,5.230919,-6.098579,-3.088107,-5.109557,9.419502,-9.484865,7.023498,-0.462686,4.235618,-0.767428,-8.369541,-7.004965,-5.915921,9.472029,-9.689770,6.577342,8.549896,4.853888,6.496642,-4.145432,-9.400590,-5.995458,4.277935,-2.266238,-6.516609,5.508651,6.891601,5.027839,5.645842,-4.703392,-8.012173,9.124827,2.425877,-7.140615,7.354072,-4.222117,1.198314,9.888374,8.087337,4.656786,-8.542293,-7.076747,2.757348,-5.451949,-1.134097,-6.031955,-2.598589,-5.635376,6.279114,-0.159969,-5.515445,-2.478668,-6.187330,-4.857604,4.337691,5.364490,4.898876,-6.218659,8.130327,6.467467,6.101585,7.438919,-4.134813,-2.885794,-6.817485,-7.045586,8.028885,-5.349384,-4.942928,5.295021,7.235719,3.676897,-2.385707,2.217558,-6.275561,2.794609,-3.132395,-7.162542,7.771943,-2.977194,6.380357,-2.519360,-5.910702,-4.623198,2.088286,-7.503002,-8.740981,5.134209,9.648115,1.761489,-5.784907,-0.891395,0.696777,7.338449,1.684077,-1.082030,-9.821018,6.264321,4.272347,0.782625,6.214344,9.623131,1.945992,-2.281074,3.730964,2.630317,-5.902288,2.884359,-0.709320,-3.644437,-9.845562,-7.848260,3.080330,6.203015,-1.891313,-9.746750,7.304386,2.475197,-9.493202,5.323711,5.184310,6.964590,-4.901231,3.454120,1.595329,-3.504499,-8.077558,-8.236626,-9.211694,4.914277,-7.606932,-2.253602,8.056817,6.561409,6.974606,-9.286342,7.625207,0.233130,-4.551530,-4.762505,-4.161140,8.523771,5.229638,3.960024,-0.229877,-4.740119,-8.185347,-3.699907,7.230255,9.716614,-3.582425,7.716904,-9.453565,-7.321503,-4.755016,-8.873143,4.668229,0.912348,-8.815214,5.795555,1.607606,0.280023,-7.089873,-3.209344,8.056934,5.741951,6.716678,8.423315,4.565810,-1.289889,-0.669806,-6.545023,-8.390873,7.189319,-5.503498,7.890713,-9.044670,6.394356,-6.477353,-0.933468,-4.635801,-5.659881,6.361025,1.303273,4.050441,-9.303892,-5.961996,8.843026,-5.853771,4.030865,0.864521,2.495025,-9.398143,2.708713,-5.833281,-2.581360,5.806892,-9.713069,4.613257,9.012682,5.439431,-4.611801,-8.840989,-1.582959,-0.835002,-1.813716,5.792456,-5.002057,-5.483889,-3.262174,3.596025,4.215166,0.944162,1.285149,5.111328,4.076867,-7.817399,4.435622,-4.911820,-6.860911,4.459923,-1.707860,-0.095125,-7.372540,-1.468103,3.448033,-0.747841,-8.142529,-2.871849,-1.003788,-7.780448,-3.041713,1.897920,-3.921326,5.841872,4.756712,4.782432,9.328506,-1.253287,-7.677055,2.103359,-1.245347,6.665824,2.591446,7.829198,5.300381,-2.957694,-2.625312,8.324897,5.989392,9.979060,-7.460463,-7.349004,-0.001793,3.961540,-9.730838,-2.483118,-8.577147,8.704822,1.393625,8.049019,6.194094,-7.943981,-4.932791,-1.701118,2.779571,-4.464133,-4.441084,4.098263,8.369032,0.539815,1.853672,-7.685750,8.785970,-9.510115,-0.303555,-2.040340,3.133947,-5.535500,-7.331125,8.291787,-3.372325,3.712955,-1.605365,-1.231948,-2.984922,8.381533,9.162065,4.324420,-3.335217,-4.709905,-5.073766,-3.396395,4.786266,2.486023,6.827051,2.166745,-5.004888,-6.708913,-9.952625,-5.529759,-5.993796,-4.465301,0.495898,0.378235,0.127645,0.173498,-0.520643,7.206184,-9.328062,9.300907,4.337560,2.464028,-6.433066,3.206893,-4.447806,7.938081,1.746024,0.580889,6.366473,-1.867310,-0.795230,-4.542505,5.009766,-8.789588,-6.067668,7.025940,7.936253,9.417827,-8.172050,-8.294643,-4.814829,-5.283270,1.837446,5.963715,-1.026580,-1.013134,6.126013,7.736451,-3.029976,-6.638563,4.924374,0.471781,-9.925619,-7.763898,3.099403,-6.330188,-2.876380,4.332689,-8.120346,7.513419,0.997358,6.118601,-4.748451,7.231504,-8.140640,-0.115402,-0.721005,-1.151605,-0.228778,6.397913,8.832598,-4.344714,-5.054868,-1.175620,-1.026863,9.542706,6.649407,-9.480390,6.073945,-2.825863,1.241275,-0.444940,-1.671069,-7.856634,7.549018,-6.387739,4.934063,5.589132,2.997005,-3.308095,2.494009,2.464495,-1.875401,-1.460804,6.737522,-5.263166,4.143657,-6.410574,4.424280,9.116062,8.591468,-5.189417,-9.961011,-1.577248,0.656629,3.115543,7.408305,4.344979,-4.772103,4.741474,-1.814612,-9.785390,-6.382319,-3.264712,9.969004,8.645370,7.624958,-8.182291,8.384003,2.063361,0.650039,9.939204,5.631177,4.402624,-9.213727,-9.713496,-0.546643,4.983712,1.654885,-3.965490,3.996617,4.394357,6.420610,-1.423835,2.342082,2.604349,-4.754167,6.094514,8.459687,3.582980,3.780015,3.414843,-4.072437,2.480903,-4.264387,-5.012584,3.044859,-8.755777,1.588268,5.973828,1.614195,-6.487082,3.708632,3.674929,-7.774291,-5.650078,-7.708368,8.269617,-2.162422,0.816010,-8.753280,-2.080026,8.197615,2.035521,4.358809,9.205659,2.684791,-1.526657,6.649822,-3.794980,-4.896852,-9.151543,-9.629456,9.486056,-0.590923,7.506320,0.363710,-8.705401,-8.370349,3.619349,-2.444510,-6.948491,-4.633104,-7.125890,1.831187,0.011145,1.398085], dtype = "float64")#candidate|6970|(650,)|const|float64
const_6971 = relay.const([[4,5],[5,-8],[-10,9],[-2,-9],[9,-7],[-6,-7],[3,4],[1,3],[5,-1],[-8,3],[3,4],[-10,-10],[-4,-3],[10,-3],[-1,-8],[5,2],[-9,-4],[-1,-7],[-8,2],[3,8],[-1,-8],[-10,3],[-8,-8],[10,4],[-2,-8],[-5,1],[-7,-3],[5,8],[2,-4],[-8,6],[5,10],[-3,-9],[-5,1],[-4,-7],[-3,1],[-4,1],[-6,-10],[1,-10],[-9,6],[-9,6],[3,-5],[-10,-8],[-3,-1],[8,2],[-7,10],[-8,6],[3,1],[6,5],[5,-6],[2,-9],[5,-1],[2,-8],[-6,8],[-9,5],[-10,-5],[4,-6],[1,5],[8,-8],[2,7],[-3,-4],[3,6],[10,-5],[6,7],[-1,-8],[-6,6],[4,8],[-3,1],[-2,-6],[-7,-9],[4,7],[4,-9],[-6,-7],[-1,-8],[-7,3],[3,-8],[9,10],[-6,4],[10,9],[5,1],[6,-4],[1,2],[-10,7],[-8,-6],[9,-4],[-4,-5],[10,-10],[-2,6],[9,5],[-4,5],[3,-7],[7,10],[9,10],[-2,10],[9,-1],[-1,10],[-9,-9],[5,6],[7,9],[-7,9],[2,-1],[-4,-8],[-1,5],[6,-1],[2,9],[-3,3],[8,-4],[-10,-3],[4,-9],[-7,3],[-6,9],[4,10],[-1,3],[-3,5],[-10,-10],[-4,5],[9,10],[10,3],[2,1],[-3,3],[-9,-7],[7,-6],[3,-9],[9,8],[-9,3],[2,7],[-5,1],[9,-1],[2,-1],[-1,6],[-2,-4],[-3,8],[-1,-1],[-4,-6],[-9,8],[-2,-8],[-8,5],[-7,7],[10,-8],[-4,-4],[7,7],[-6,-4],[-1,-6],[-3,1],[-5,-3],[9,-10],[1,-9],[6,7],[1,-9],[-8,-3],[-7,-4],[-3,-6],[-1,-9],[-10,9],[-8,-6],[4,-2],[-9,9],[5,-6],[10,5],[-5,2],[-1,-6],[9,-2],[-4,3],[-2,-2],[-5,-8],[-4,5],[6,-7],[-2,-9],[-9,3],[10,7],[4,3],[-7,8],[-5,-4],[-3,-3],[10,2],[-1,4],[3,10],[-3,-9],[-8,-2],[5,-7],[-6,-9],[10,10],[2,-2],[10,-4],[5,8],[10,-2],[10,-3],[4,5],[-3,-1],[-6,4],[10,10],[-4,-4],[-8,-7],[-10,9],[5,-4],[4,-10],[-4,1],[-1,-8],[3,-10],[-2,-7],[9,-9],[7,8],[1,-2],[1,-3],[3,5],[-1,5],[-10,-4],[-1,5],[7,8],[1,7],[-10,-7],[10,-8],[-6,-7],[7,-4],[6,1],[8,-9],[9,10],[-3,-4],[-5,4],[4,10],[-4,-8],[8,-9],[-7,4],[-6,2],[-10,9],[-1,-6],[7,4],[1,-1],[1,-7],[-9,-5],[-7,-4],[2,10]], dtype = "uint8")#candidate|6971|(231, 2)|const|uint8
call_6969 = relay.TupleGetItem(func_2334_call(relay.reshape(const_6970.astype('float64'), [10, 13, 5]), relay.reshape(const_6970.astype('float64'), [10, 13, 5]), relay.reshape(var_6966.astype('int32'), [1920,]), relay.reshape(const_6971.astype('uint8'), [462,]), ), 3)
call_6972 = relay.TupleGetItem(func_2340_call(relay.reshape(const_6970.astype('float64'), [10, 13, 5]), relay.reshape(const_6970.astype('float64'), [10, 13, 5]), relay.reshape(var_6966.astype('int32'), [1920,]), relay.reshape(const_6971.astype('uint8'), [462,]), ), 3)
var_6988 = relay.var("var_6988", dtype = "int32", shape = (1920,))#candidate|6988|(1920,)|var|int32
bop_6989 = relay.right_shift(var_6966.astype('uint32'), relay.reshape(var_6988.astype('uint32'), relay.shape_of(var_6966))) # shape=(1920,)
output = relay.Tuple([call_6935,const_6936,bop_6946,call_6955,var_6956,call_6964,var_6965,call_6969,const_6970,const_6971,bop_6989,])
output2 = relay.Tuple([call_6937,const_6936,bop_6949,call_6957,var_6956,call_6967,var_6965,call_6972,const_6970,const_6971,bop_6989,])
func_6995 = relay.Function([var_6945,var_6956,var_6965,var_6966,var_6988,], output)
mod['func_6995'] = func_6995
mod = relay.transform.InferType()(mod)
var_6996 = relay.var("var_6996", dtype = "float64", shape = (11, 15, 8))#candidate|6996|(11, 15, 8)|var|float64
var_6997 = relay.var("var_6997", dtype = "float32", shape = (1024,))#candidate|6997|(1024,)|var|float32
var_6998 = relay.var("var_6998", dtype = "int32", shape = (780,))#candidate|6998|(780,)|var|int32
var_6999 = relay.var("var_6999", dtype = "int32", shape = (1920,))#candidate|6999|(1920,)|var|int32
var_7000 = relay.var("var_7000", dtype = "int32", shape = (1920,))#candidate|7000|(1920,)|var|int32
output = func_6995(var_6996,var_6997,var_6998,var_6999,var_7000,)
func_7001 = relay.Function([var_6996,var_6997,var_6998,var_6999,var_7000,], output)
mutated_mod['func_7001'] = func_7001
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6185_call = mod.get_global_var('func_6185')
func_6186_call = mutated_mod.get_global_var('func_6186')
call_7009 = func_6185_call()
call_7010 = func_6185_call()
output = relay.Tuple([call_7009,])
output2 = relay.Tuple([call_7010,])
func_7019 = relay.Function([], output)
mod['func_7019'] = func_7019
mod = relay.transform.InferType()(mod)
mutated_mod['func_7019'] = func_7019
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7019_call = mutated_mod.get_global_var('func_7019')
call_7020 = func_7019_call()
output = call_7020
func_7021 = relay.Function([], output)
mutated_mod['func_7021'] = func_7021
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6185_call = mod.get_global_var('func_6185')
func_6186_call = mutated_mod.get_global_var('func_6186')
call_7062 = func_6185_call()
call_7063 = func_6185_call()
output = relay.Tuple([call_7062,])
output2 = relay.Tuple([call_7063,])
func_7068 = relay.Function([], output)
mod['func_7068'] = func_7068
mod = relay.transform.InferType()(mod)
mutated_mod['func_7068'] = func_7068
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7068_call = mutated_mod.get_global_var('func_7068')
call_7069 = func_7068_call()
output = call_7069
func_7070 = relay.Function([], output)
mutated_mod['func_7070'] = func_7070
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7068_call = mod.get_global_var('func_7068')
func_7070_call = mutated_mod.get_global_var('func_7070')
call_7071 = relay.TupleGetItem(func_7068_call(), 0)
call_7072 = relay.TupleGetItem(func_7070_call(), 0)
func_6131_call = mod.get_global_var('func_6131')
func_6135_call = mutated_mod.get_global_var('func_6135')
var_7084 = relay.var("var_7084", dtype = "float64", shape = (936,))#candidate|7084|(936,)|var|float64
call_7083 = relay.TupleGetItem(func_6131_call(relay.reshape(call_7071.astype('float64'), [11, 15, 8]), relay.reshape(var_7084.astype('float64'), [936,]), ), 0)
call_7085 = relay.TupleGetItem(func_6135_call(relay.reshape(call_7071.astype('float64'), [11, 15, 8]), relay.reshape(var_7084.astype('float64'), [936,]), ), 0)
output = relay.Tuple([call_7071,call_7083,var_7084,])
output2 = relay.Tuple([call_7072,call_7085,var_7084,])
func_7093 = relay.Function([var_7084,], output)
mod['func_7093'] = func_7093
mod = relay.transform.InferType()(mod)
mutated_mod['func_7093'] = func_7093
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7094 = relay.var("var_7094", dtype = "float64", shape = (936,))#candidate|7094|(936,)|var|float64
func_7093_call = mutated_mod.get_global_var('func_7093')
call_7095 = func_7093_call(var_7094)
output = call_7095
func_7096 = relay.Function([var_7094], output)
mutated_mod['func_7096'] = func_7096
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7019_call = mod.get_global_var('func_7019')
func_7021_call = mutated_mod.get_global_var('func_7021')
call_7104 = relay.TupleGetItem(func_7019_call(), 0)
call_7105 = relay.TupleGetItem(func_7021_call(), 0)
func_2666_call = mod.get_global_var('func_2666')
func_2669_call = mutated_mod.get_global_var('func_2669')
var_7111 = relay.var("var_7111", dtype = "int32", shape = (1200, 1))#candidate|7111|(1200, 1)|var|int32
call_7110 = func_2666_call(relay.reshape(var_7111.astype('int32'), [5, 15, 16]), relay.reshape(var_7111.astype('int32'), [5, 15, 16]), )
call_7112 = func_2666_call(relay.reshape(var_7111.astype('int32'), [5, 15, 16]), relay.reshape(var_7111.astype('int32'), [5, 15, 16]), )
const_7114 = relay.const([[[True,True,True,False,True,False,True,True,False,False,False,True,False,True,False,True],[True,True,True,False,True,False,True,True,True,True,True,False,False,True,False,True],[False,False,True,True,False,False,False,False,True,False,True,True,False,True,True,True],[True,False,True,False,False,True,False,False,False,True,False,False,False,True,True,False],[True,False,True,True,True,False,True,False,False,False,True,False,True,False,True,False],[False,True,True,True,False,True,True,False,False,True,False,True,False,True,True,True],[True,True,False,False,True,True,False,True,True,False,False,True,False,True,True,True],[False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True],[True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,False],[True,True,False,False,False,True,False,True,True,True,False,True,False,False,False,True],[True,True,False,False,True,False,False,True,False,True,False,True,True,True,True,False],[True,False,True,True,True,True,False,False,True,False,True,True,True,True,False,False],[True,False,False,False,False,False,False,False,True,False,False,True,True,True,True,False],[True,False,False,False,False,False,True,True,True,False,False,False,False,False,False,True],[True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,True]],[[False,True,True,False,False,False,True,True,True,True,True,True,True,True,False,False],[False,True,False,False,True,False,True,False,False,True,True,True,False,True,False,False],[False,False,False,False,False,True,True,True,False,False,False,False,False,False,False,False],[False,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False],[False,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True],[True,False,False,True,True,False,False,False,True,False,True,True,False,False,True,True],[False,False,False,False,True,False,False,False,True,False,True,True,False,False,False,True],[False,True,True,False,True,True,False,False,True,True,True,True,True,False,False,False],[True,False,False,False,True,False,False,False,False,True,True,False,True,False,False,False],[True,True,False,False,False,False,False,True,True,True,False,False,True,True,False,False],[True,False,False,False,False,False,True,False,True,False,True,True,False,True,True,True],[False,True,True,False,True,True,True,False,False,True,False,False,False,True,False,False],[True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,False],[False,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False],[True,False,False,False,True,False,True,True,False,True,False,False,False,False,True,False]],[[True,True,True,False,True,False,False,False,False,True,True,False,True,True,False,False],[True,False,True,False,True,False,False,True,False,False,True,False,False,False,True,True],[False,False,False,True,True,False,True,True,True,False,True,True,True,False,True,False],[False,False,True,True,True,True,False,True,True,False,True,True,False,False,False,False],[True,False,True,False,False,False,True,False,True,False,True,False,False,False,True,True],[True,False,False,False,True,True,True,False,True,False,True,True,True,True,False,False],[False,True,False,False,False,True,False,True,True,True,True,False,False,False,True,True],[False,True,True,True,False,False,True,True,False,False,True,True,False,True,True,False],[False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,False],[False,False,True,True,False,True,False,True,True,True,False,True,False,False,True,True],[True,False,True,False,True,True,False,True,False,False,False,True,True,True,True,True],[False,True,False,False,False,True,True,True,False,False,True,True,False,False,False,True],[False,True,True,True,False,True,True,False,True,True,False,False,False,True,False,False],[False,False,True,False,True,False,False,False,False,True,True,False,True,True,False,False],[False,True,True,True,True,False,True,False,True,True,True,False,True,True,False,True]],[[True,True,False,True,False,False,True,False,True,False,True,False,True,True,False,True],[False,False,False,True,False,False,False,False,True,True,False,False,False,False,False,True],[False,False,False,False,False,True,False,True,True,True,True,False,False,False,False,True],[False,False,False,False,False,False,False,False,True,False,False,True,True,False,True,True],[False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,True],[True,True,True,False,True,False,False,True,False,False,False,True,True,True,False,True],[True,True,False,False,True,True,False,False,False,True,True,True,False,False,False,False],[True,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False],[False,True,False,True,False,True,True,True,False,False,False,True,False,True,True,True],[True,True,False,True,True,True,True,True,True,True,True,True,False,False,True,False],[True,False,True,True,True,False,False,True,False,True,False,True,False,True,False,True],[False,False,False,True,False,True,True,True,True,False,False,True,False,False,True,True],[False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,True],[False,True,False,False,False,True,False,True,True,False,False,True,False,True,False,False],[True,True,True,True,False,False,False,False,True,True,False,True,True,True,False,False]],[[False,True,False,False,False,False,False,False,True,False,True,True,False,False,False,True],[True,True,True,True,True,True,True,False,False,True,False,False,False,False,False,False],[True,False,False,False,True,False,False,False,True,True,True,True,True,True,False,False],[True,True,True,False,False,False,True,True,True,True,True,True,True,True,True,True],[True,False,True,False,False,True,False,True,False,False,False,False,True,True,False,False],[False,False,True,True,False,False,False,False,True,True,True,False,False,True,True,True],[True,False,False,True,True,False,True,False,False,True,False,False,False,False,False,True],[False,True,False,True,True,False,True,False,True,False,True,True,True,False,False,False],[True,False,False,False,True,True,False,True,False,False,True,True,True,False,False,True],[True,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False],[True,False,False,False,True,True,True,True,True,True,False,False,True,False,False,False],[False,False,True,False,False,True,True,False,True,True,True,False,False,True,False,True],[True,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True],[False,False,False,False,True,True,False,True,True,False,True,True,True,False,False,True],[True,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True]]], dtype = "bool")#candidate|7114|(5, 15, 16)|const|bool
bop_7115 = relay.equal(call_7110.astype('bool'), relay.reshape(const_7114.astype('bool'), relay.shape_of(call_7110))) # shape=(5, 15, 16)
bop_7118 = relay.equal(call_7112.astype('bool'), relay.reshape(const_7114.astype('bool'), relay.shape_of(call_7112))) # shape=(5, 15, 16)
output = relay.Tuple([call_7104,var_7111,bop_7115,])
output2 = relay.Tuple([call_7105,var_7111,bop_7118,])
func_7122 = relay.Function([var_7111,], output)
mod['func_7122'] = func_7122
mod = relay.transform.InferType()(mod)
var_7123 = relay.var("var_7123", dtype = "int32", shape = (1200, 1))#candidate|7123|(1200, 1)|var|int32
output = func_7122(var_7123)
func_7124 = relay.Function([var_7123], output)
mutated_mod['func_7124'] = func_7124
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7068_call = mod.get_global_var('func_7068')
func_7070_call = mutated_mod.get_global_var('func_7070')
call_7185 = relay.TupleGetItem(func_7068_call(), 0)
call_7186 = relay.TupleGetItem(func_7070_call(), 0)
output = relay.Tuple([call_7185,])
output2 = relay.Tuple([call_7186,])
func_7193 = relay.Function([], output)
mod['func_7193'] = func_7193
mod = relay.transform.InferType()(mod)
mutated_mod['func_7193'] = func_7193
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7193_call = mutated_mod.get_global_var('func_7193')
call_7194 = func_7193_call()
output = call_7194
func_7195 = relay.Function([], output)
mutated_mod['func_7195'] = func_7195
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7068_call = mod.get_global_var('func_7068')
func_7070_call = mutated_mod.get_global_var('func_7070')
call_7225 = relay.TupleGetItem(func_7068_call(), 0)
call_7226 = relay.TupleGetItem(func_7070_call(), 0)
output = call_7225
output2 = call_7226
func_7228 = relay.Function([], output)
mod['func_7228'] = func_7228
mod = relay.transform.InferType()(mod)
mutated_mod['func_7228'] = func_7228
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7228_call = mutated_mod.get_global_var('func_7228')
call_7229 = func_7228_call()
output = call_7229
func_7230 = relay.Function([], output)
mutated_mod['func_7230'] = func_7230
mutated_mod = relay.transform.InferType()(mutated_mod)
const_7299 = relay.const([[[-2.103021,-4.483272,4.875906,-2.051562,3.261608,-7.105643,-0.464713,0.956493,0.589151,2.754616],[-1.734410,3.511673,-9.251704,-9.793111,-9.555299,-4.854455,-1.047293,-2.170192,-9.737284,-8.153426],[-5.146173,-4.454257,-5.312829,-7.305726,5.041950,-6.606541,6.097110,-5.596843,-6.532564,-4.874341],[-8.365884,6.257199,1.213386,-3.704851,-8.483815,-7.825212,-2.519738,9.662314,-5.235689,-6.495276],[1.648608,8.635217,-1.066684,2.805263,-0.375020,9.142365,-3.794366,-6.930852,4.294702,7.962606],[1.414180,-0.529594,-2.683141,3.544529,0.477177,-0.215551,-3.727541,3.454194,9.197398,-3.681242],[4.021135,0.418067,-9.241449,4.013530,-6.851897,-2.757662,-7.986549,5.467190,-7.376250,0.982353]],[[-8.365968,0.302244,-5.060103,-2.126452,4.171707,9.374142,-3.037945,-7.061328,-7.783828,-1.149195],[3.459933,0.177074,-1.255412,-7.639260,1.608959,-4.443040,-4.918037,-8.806721,0.114826,-4.704561],[2.227326,5.617189,-6.586862,8.262265,8.863395,-0.417481,-0.566189,1.109739,-8.917815,0.586057],[4.299018,-1.769669,3.830809,-0.227085,8.698295,8.196752,4.100579,-1.579092,9.522399,-6.719327],[-2.344098,0.001527,-0.541315,2.953362,-4.743071,-8.207034,-1.987767,8.403717,-8.168681,-4.411913],[4.920696,-0.448322,-9.618844,-2.058625,-2.520531,8.585349,7.784281,9.118477,6.094518,9.011205],[-5.798779,9.969303,-0.288011,-6.633954,2.025563,-1.570552,8.581380,3.409792,2.968321,3.237782]],[[-3.431381,-1.371236,5.516282,-5.192368,-7.342349,-2.085541,9.741381,-9.143977,8.306434,-9.785190],[8.252436,8.034806,-9.245792,1.559489,-2.062783,1.216876,6.528755,3.264783,-6.882080,3.732292],[4.539911,0.657703,8.376369,-4.299729,-5.572626,8.592065,9.026248,-7.846724,5.452179,7.450537],[-7.877115,5.628516,0.034740,-4.155537,-8.819650,-0.182951,-7.582038,-7.674817,8.174167,-5.403349],[-9.413616,-0.168120,-1.408049,4.559130,-9.390639,9.018204,8.365828,-4.750420,6.535494,-8.645213],[-9.570113,3.989184,-3.938496,-0.269026,-6.556330,-7.277504,5.876051,-9.685301,4.868401,4.445499],[8.742466,8.774548,4.237877,6.413636,-6.073684,-6.265705,-7.252230,8.390839,-0.844694,6.543821]],[[-7.685367,0.212162,-4.121802,9.959108,4.337304,5.342331,-3.253865,2.603025,-6.538745,-8.232204],[7.781760,2.869048,3.509754,-7.700433,-8.144754,-5.355586,8.516047,-6.737753,-9.484823,-5.358958],[7.798940,-3.641819,-1.651186,7.702755,-9.669121,4.929714,1.587091,1.886633,-8.352829,-2.117226],[5.273198,5.973300,-1.641458,-1.097652,-8.870284,-6.678264,-2.972332,3.242969,-0.374608,7.635312],[-3.617472,-7.039663,2.092128,-3.991862,-9.566742,3.792135,-2.029872,-4.889894,-3.724030,2.423421],[1.266910,-2.861289,-6.620411,-4.992189,9.652546,3.728377,9.592423,8.044455,7.413706,-8.552050],[-1.704367,-7.642553,-9.831065,0.932955,7.633939,1.099314,-3.150030,3.748146,4.901585,1.185148]],[[3.565772,9.240808,6.360526,-5.289706,-1.618744,-9.900307,-7.401068,8.267836,2.401039,2.656155],[5.803201,-8.009598,1.500451,-7.069247,9.168041,9.927213,-6.449981,7.945818,4.078252,2.117879],[-2.170269,-9.015896,-2.961446,-6.505582,-4.463168,-6.254639,-0.445641,3.957276,-2.284887,5.301849],[4.528768,3.759995,1.656169,5.263000,-6.999051,-3.248247,-4.084631,6.100819,1.756509,5.793456],[2.857673,7.645268,-9.732325,5.137999,5.225209,-6.722094,5.464002,-7.771070,7.239414,2.659493],[-6.013910,-5.796116,-0.496951,3.771262,7.016825,0.114996,2.667369,8.434469,9.413428,-7.475320],[5.621783,-6.638921,-7.581340,5.127661,-6.719471,1.746234,-3.086882,-4.744224,1.671120,-6.645177]],[[-5.847734,-7.106363,3.861683,3.279867,-1.818236,1.982796,-6.123884,7.968243,-9.355514,-8.454737],[7.672624,-4.767703,-1.350261,4.601663,-7.678719,-5.052411,8.002424,-4.040109,-8.523818,-2.228284],[-4.403750,-3.579418,5.162643,5.307618,-6.435179,-1.398054,-0.282536,-3.050653,5.015118,-6.932719],[2.594151,-2.922113,7.916861,5.654701,-9.770625,3.245158,1.856592,-6.195066,3.141165,2.104149],[8.077191,9.835777,-1.517089,-1.427255,0.279475,4.114319,-4.833647,-9.395302,1.287163,4.821474],[8.258017,-0.315882,2.732195,5.709638,-2.619704,-4.459834,-8.789221,5.521504,4.617609,6.671343],[1.376614,-1.847613,-4.981566,3.916019,-2.691071,-5.225886,8.148814,9.294555,5.919313,5.842959]]], dtype = "float64")#candidate|7299|(6, 7, 10)|const|float64
uop_7300 = relay.log(const_7299.astype('float64')) # shape=(6, 7, 10)
output = uop_7300
output2 = uop_7300
func_7309 = relay.Function([], output)
mod['func_7309'] = func_7309
mod = relay.transform.InferType()(mod)
mutated_mod['func_7309'] = func_7309
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7309_call = mutated_mod.get_global_var('func_7309')
call_7310 = func_7309_call()
output = call_7310
func_7311 = relay.Function([], output)
mutated_mod['func_7311'] = func_7311
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6185_call = mod.get_global_var('func_6185')
func_6186_call = mutated_mod.get_global_var('func_6186')
call_7331 = func_6185_call()
call_7332 = func_6185_call()
output = call_7331
output2 = call_7332
func_7340 = relay.Function([], output)
mod['func_7340'] = func_7340
mod = relay.transform.InferType()(mod)
output = func_7340()
func_7341 = relay.Function([], output)
mutated_mod['func_7341'] = func_7341
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7309_call = mod.get_global_var('func_7309')
func_7311_call = mutated_mod.get_global_var('func_7311')
call_7342 = func_7309_call()
call_7343 = func_7309_call()
uop_7369 = relay.log2(call_7342.astype('float32')) # shape=(6, 7, 10)
uop_7371 = relay.log2(call_7343.astype('float32')) # shape=(6, 7, 10)
output = uop_7369
output2 = uop_7371
func_7384 = relay.Function([], output)
mod['func_7384'] = func_7384
mod = relay.transform.InferType()(mod)
mutated_mod['func_7384'] = func_7384
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7384_call = mutated_mod.get_global_var('func_7384')
call_7385 = func_7384_call()
output = call_7385
func_7386 = relay.Function([], output)
mutated_mod['func_7386'] = func_7386
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7019_call = mod.get_global_var('func_7019')
func_7021_call = mutated_mod.get_global_var('func_7021')
call_7387 = relay.TupleGetItem(func_7019_call(), 0)
call_7388 = relay.TupleGetItem(func_7021_call(), 0)
func_4559_call = mod.get_global_var('func_4559')
func_4561_call = mutated_mod.get_global_var('func_4561')
var_7392 = relay.var("var_7392", dtype = "float64", shape = (936,))#candidate|7392|(936,)|var|float64
call_7391 = relay.TupleGetItem(func_4559_call(relay.reshape(var_7392.astype('float64'), [9, 13, 8])), 0)
call_7393 = relay.TupleGetItem(func_4561_call(relay.reshape(var_7392.astype('float64'), [9, 13, 8])), 0)
output = relay.Tuple([call_7387,call_7391,var_7392,])
output2 = relay.Tuple([call_7388,call_7393,var_7392,])
func_7405 = relay.Function([var_7392,], output)
mod['func_7405'] = func_7405
mod = relay.transform.InferType()(mod)
var_7406 = relay.var("var_7406", dtype = "float64", shape = (936,))#candidate|7406|(936,)|var|float64
output = func_7405(var_7406)
func_7407 = relay.Function([var_7406], output)
mutated_mod['func_7407'] = func_7407
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6329_call = mod.get_global_var('func_6329')
func_6331_call = mutated_mod.get_global_var('func_6331')
call_7443 = relay.TupleGetItem(func_6329_call(), 0)
call_7444 = relay.TupleGetItem(func_6331_call(), 0)
func_6702_call = mod.get_global_var('func_6702')
func_6706_call = mutated_mod.get_global_var('func_6706')
const_7455 = relay.const([10,-6,-4,-10,3,-9,10,4,-3,3,-5,-2,-8,5,10,-4,2,9,-4,2,10,-8,1,10,-4,-7,-7,-1,10,7,-10,10,-1,-7,7,2,-3,8,2,-7,-2,-7,-5,-6,-6,5,-3,7,-4,-3,-8,-10,5,6,-7,-6,-9,-8,3,9,8,-7,-9,-7,1,-5,4,9,-5,-7,-7,-3,-7,-3,4,2,-8,-3,3,9,1,-4,-1,-4,-7,-1,5,-3,5,-5,-7,-3,5,-1,9,6,-8,-6,-3,-7,3,-7,4,-3,5,1,4,-9,1,1,4,1,8,-10,8,-1,5,-9,7,7,-9,-6,-4,4,-6,7,-10,1,6,9,7,4,6,-3,7,-7,-10,-9,-7,-10,-6,5,5,-6,-7,4,-4,8,-4,-5,10,-7,-2,-5,-9,-3,9,-3,-6,-5,3,-9,-8,7,9,-4,3,-1,8,-5,8,2,-8,4,-3,8,-10,2,-3,1,2,-1,5,-9,8,9,-2,7,-5,5,-10,5,10,-8,-8,-7,4,-7,-9,-3,-10,5,3,-3,3,-8,3,-4,1,-7,3,-3,-3,-8,-5,-1,5,-9,10,-9,-2,-5,-10,-9,1,2,-2,-10,5,7,-1,5,6,6,-5,-6,-2,3,2,-3,-10,8,1,-4,8,-6,-2,6,-6,2,9,-10,3,-5,7,-9,-4,-6,-4,1,4,2,-8,-3,-3,8,5,5,3,-4,-7,-7,9,-5,-4,7,-4,5,9,8,3,4,-6,-7,-8,-9,-3,5,10,4,-6,5,10,-2,5,1,-6,7,5,-2,4,-7,10,8,-1,5,3,-9,-9,4,-3,-2,-1,2,3,-8,-5,-4,6,-6,-4,6,2,-4,8,-5,-4,-3,-5,10,9,7,-10,9,-2,-3,-6,8,6,-9,10,7,-10,-9,-5,5,7,-8,-2,3,1,-4,6,-7,4,9,7,-9,8,3,9,7,-1,-4,-1,-9,-4,-3,5,-5,3,2,-1,8,1,3,3,-7,-5,7,8,2,9,4,-3,-2,4,10,-6,-7,2,-8,-9,1,-4,2,6,-5,9,-10,8,-1,-7,10,-9,-2,-6,-10,-5,-1,-9,2,6,10,-7,-8,-2,9,-9,-3,-5,-3,-7,-6,-2,-5,9,-6,-5,10,7,-8,6,10,-6,6,-10,-2,2,1,-4,-4,-4,-8,7,2,4,6,-9,7,-9,-9,-10,6,-1,-5,-3,-10,1,7,-3,-3,3,9,8,-9,9,-8,3,2,-2,10,7,-4,5,-6,2,-7,1,-7,4,-7,-6,-1,-8,-2,9,8,2,-2,-3,7,-10,-2,-2], dtype = "uint64")#candidate|7455|(495,)|const|uint64
const_7456 = relay.const([4.872353,1.716612,-2.641384,-4.897957,2.594538,-9.733464,1.984744,-1.580106,4.011498,-7.845129,4.917253,9.072670,-7.040278,-3.543094,-3.923137,2.699502,9.502193,6.327763,6.702509,3.596378,-7.226609,5.126268,2.643704,5.909824,-6.536061,3.497803,-6.847285,-5.474890,-2.631912,-6.703327,-5.640001,-9.853546,7.326694,-9.624970,8.011891,0.054409,8.538882,7.224554,-3.119283,-7.529514,-3.716461,1.366969,-7.862444,-9.970190,-6.136452,4.768456,-8.113120,-2.583260,-5.349358,-8.002143,6.914184,6.677335,4.132740,6.382310,-2.121066,-9.213703,7.366589,1.918602,4.046349,1.842358,2.125881,3.126198,-3.718099,4.625192,-6.576315,8.924122,3.806826,-7.417754,1.048240,-9.910185,8.310998,8.727000,-5.682620,0.044750,-3.441120,-2.479827,4.694692,1.054313,1.377361,-1.850138,5.368891,5.981846,7.259376,0.625309,-5.000546,-3.086896,-7.491277,-6.289811,-6.422695,2.935124,-8.169795,-1.075659,1.830075,-0.958486,-2.614349,-3.430229,-5.326680,-8.551966,2.430859,-2.254567,-1.851169,-1.081862,-4.595622,9.408152,-8.438218,2.970407,-4.765834,-9.152119,-2.357994,8.813757,-7.771205,-6.765196,0.829779,-2.787672,-8.175696,-3.739132,9.345404,4.310929,-6.519905,-8.869407,6.627701,8.214579,-0.769963,8.754316,-1.178678,0.786573,-0.933460,1.432807,9.317229,3.662314,3.041113,-6.388544,-7.620114,-7.343713,-0.572826,2.249427,2.636980,-8.229769,-0.121812,-5.220786,-8.729210,9.962724,0.318463,-7.057358,-7.376752,-1.566404,-9.576672,-6.901028,-9.311757,7.230911,-8.400951,1.155012,5.103324,7.446054,7.974034,7.213552,5.527193,3.594884,0.641177,4.481962,3.937146,0.622994,-6.248628,-7.456331,7.412066,-3.422825,-0.271557,2.545881,2.146541,9.207717,-1.537582,-1.729367,-0.550490,-9.759860,2.710639,7.402669,0.963721,-9.514394,7.969437,-7.634464,-2.448848,-1.952348,-7.389707,0.779663,-1.897888,4.499041,2.764376,-6.292111,5.856326,6.351543,8.211760,3.420853,-0.987613,-1.348529,-6.181837,-0.993550,2.879203,1.088566,-5.567979,1.623127,1.103174,4.797613,-8.198089,-6.929556,-8.390773,4.545593,1.621570,-2.160707,-3.651435,3.545708,6.854576,-8.503616,-2.917485,7.594981,-8.403552,9.864856,6.924604,-8.709896,-2.284472,9.426407,-5.832555,-5.477457,7.824297,7.331145,-5.884884,-1.959980,-7.300806,-7.438971,-1.650581,7.205011,5.220436,-3.453314,7.696629,-2.859934,-5.689417,-3.112641,-7.148723,-1.983383,2.427564,-8.687034,-6.706937,-4.193886,1.243589,0.676055,-1.446700,-1.792584,0.708592,-3.487957,7.755138,-3.128202,-9.982362,-0.526264,-1.764730,-2.733239,0.357458,7.646530,2.351574,-6.924023,-1.610288,-6.394274,5.254820,-9.146697,9.846444,1.587168,-2.493749,-7.164209,8.616724,5.287990,3.506584,6.726530,-4.432884,-1.316764,-8.595506,-9.169437,-9.591130,2.423745,0.884551,-6.875431,-9.811443,8.859981,-2.799632,7.869283,0.483452,8.886503,-1.526262,2.398158,9.318778,-4.888459,-2.711167,-6.752986,8.280585,-2.049907,-5.532869,-0.243371,9.086493,3.448995,4.106189,9.947405,2.023011,-9.260937,8.705232,8.620513,8.241532,2.299547,-5.760118,7.480239,4.612766,8.212119,-9.662133,7.801083,6.051064,1.665687,6.662099,6.318046,6.630247,7.079658,0.154024,3.317944,-3.305116,1.797898,4.821262,4.671799,-4.348898,-0.675350,-1.222761,-1.614239,-2.422555,-5.959626,-4.292357,-6.763356,3.007916,7.465957,-7.479711,-2.688464,6.775982,-0.082406,-1.791721,8.085603,-3.311226,7.574997,3.349667,-4.336066,-6.782225,-6.861988,9.930534,-5.860070,-5.902282,8.504156,9.603858,0.718481,1.896973,5.262218,6.746317,4.393991,-2.122507,-0.802811,-0.474636,5.286330,-7.845654,-6.359982,-7.867607,-8.502038,-9.260411,-7.504402,6.424140,-1.436568,1.853429,-2.453478,-7.184705,-4.711158,6.602237,3.119043,3.687612,-2.418744,-1.347808,0.938349,7.382969,6.065171,-5.636083,0.040847,9.024640,-2.306053,8.323240,-0.056877,-9.952377,-6.438322,0.250299,-8.046855,-6.516684,-1.132487,9.050872,-5.734075,-3.459888,-2.099257,3.027271,-9.656604,3.836440,5.055352,-2.186035,-6.881595,-4.223929,-2.563072,-1.826649,-0.093884,0.408810,9.770899,9.123471,1.317532,2.662669,-7.625483,-3.644115,-1.138585,7.992618,-1.724262,3.877331,3.180199,-3.954773,1.967917,-2.682961,7.990989,6.393219,-6.443843,-7.012868,-4.327040,5.332328,-6.824359,1.744404,0.275886,-5.976841,-2.982830,-2.751839,3.258011,1.803486,-0.706765,4.350223,0.584020,-4.466793,9.608134,-2.331291,0.726938,-0.806778,8.439284,-2.159335,-7.102389,-9.447914,-9.986255,-1.541086,0.638246,-1.704199,6.547504,-9.168782,-3.399335,-1.277816,0.990186,8.572110,-4.873886,9.173681,-3.376279,-8.697555,-1.798891,8.339446,-5.213407,9.534379,-0.342148,4.014981,1.547152,-0.312086,-7.280248,1.025397,5.099794,-9.011600,-1.971328,3.017983,0.911736,7.033306,8.904301,-9.766888,8.704237,8.107311,-5.421504,1.556745,-2.771302,5.263073,8.115554,6.712796,-4.774750,-3.252558,3.486911,1.507238,-8.614641,-9.030277,6.530470,7.966377,-6.821831,-7.305377,6.374351,-3.341373,-5.960820,-0.058333,-1.457238,-7.153312,-1.104395,0.812415,4.179926,-6.045475,-0.862665,3.549189,-4.093734,-1.844749,1.021715,3.026194,-2.592364,6.698406,8.149607,-2.782526,7.548906,-0.402164,-9.077853,3.159855,-5.408949,5.541098,-0.209714,5.648994,8.543559,-6.546048,-3.012773,1.390811,5.931313,9.690718,-4.500355,1.003157,7.114269,3.729144,5.829808,8.932108,4.042828,-6.049148,6.379394,-5.441617,2.373058,7.727041,-9.978989,0.881751,4.523396,-8.426598,-0.676569,3.556531,-6.926005,0.841953,3.775646,0.149296,9.641191,5.420664,7.310118,6.685881,-0.676360,0.125260,8.699742,-3.063643,4.967959,9.933154,-3.820598,3.756663,3.557150,2.174571,8.026105,8.686908,-0.364720,3.969001,-6.642620,1.660553,-2.336216,4.513183,6.079171,-7.429855,9.138254,-0.382572,0.866209,-0.849719,3.701293,8.873770,-9.632941,7.371386,9.453420,6.891005,-0.497990,-4.662405,5.737326,-8.440876,-9.624742,2.910783,-2.859687,4.664683,-3.339897,8.922389,2.640080,-7.099493,2.673733,3.140338,3.837294,9.784052,6.302452,-1.650440,4.449117,9.759327,3.479848,3.893603,-3.886889,7.176783,-2.014915,-9.116861,-7.728580,-0.246008,4.101859,-7.401666,-4.512243,-0.569275,-8.358236,-5.625635,8.493891,1.508722,-2.865322,1.217542,6.268687,2.336061,4.948471,-8.623443,2.069496,7.015695,-5.891331,3.632247,1.708744,-9.340540,-4.210763,-1.436535,-5.316249,-4.806014,-1.762699,6.580126,0.413377,-7.739506,0.201942,-2.110645,9.382023,1.791064,9.323328,-7.767793,-8.496586,-8.854390,8.319396], dtype = "float64")#candidate|7456|(650,)|const|float64
var_7457 = relay.var("var_7457", dtype = "int32", shape = (8, 240))#candidate|7457|(8, 240)|var|int32
call_7454 = relay.TupleGetItem(func_6702_call(relay.reshape(const_7455.astype('uint64'), [5, 11, 9]), relay.reshape(const_7456.astype('float64'), [1, 650]), relay.reshape(var_7457.astype('int32'), [8, 240]), ), 0)
call_7458 = relay.TupleGetItem(func_6706_call(relay.reshape(const_7455.astype('uint64'), [5, 11, 9]), relay.reshape(const_7456.astype('float64'), [1, 650]), relay.reshape(var_7457.astype('int32'), [8, 240]), ), 0)
func_1381_call = mod.get_global_var('func_1381')
func_1385_call = mutated_mod.get_global_var('func_1385')
var_7462 = relay.var("var_7462", dtype = "int16", shape = (2240,))#candidate|7462|(2240,)|var|int16
call_7461 = func_1381_call(relay.reshape(var_7462.astype('int16'), [10, 16, 14]), relay.reshape(var_7462.astype('int16'), [10, 16, 14]), )
call_7463 = func_1381_call(relay.reshape(var_7462.astype('int16'), [10, 16, 14]), relay.reshape(var_7462.astype('int16'), [10, 16, 14]), )
uop_7480 = relay.log2(call_7461.astype('float64')) # shape=(10, 16, 14)
uop_7482 = relay.log2(call_7463.astype('float64')) # shape=(10, 16, 14)
func_6041_call = mod.get_global_var('func_6041')
func_6042_call = mutated_mod.get_global_var('func_6042')
call_7501 = relay.TupleGetItem(func_6041_call(), 0)
call_7502 = relay.TupleGetItem(func_6042_call(), 0)
func_4620_call = mod.get_global_var('func_4620')
func_4623_call = mutated_mod.get_global_var('func_4623')
var_7508 = relay.var("var_7508", dtype = "uint16", shape = (2080,))#candidate|7508|(2080,)|var|uint16
call_7507 = func_4620_call(relay.reshape(var_7508.astype('uint16'), [13, 10, 16]), relay.reshape(var_7508.astype('uint16'), [13, 10, 16]), )
call_7509 = func_4620_call(relay.reshape(var_7508.astype('uint16'), [13, 10, 16]), relay.reshape(var_7508.astype('uint16'), [13, 10, 16]), )
output = relay.Tuple([call_7443,call_7454,const_7455,const_7456,var_7457,var_7462,uop_7480,call_7501,call_7507,var_7508,])
output2 = relay.Tuple([call_7444,call_7458,const_7455,const_7456,var_7457,var_7462,uop_7482,call_7502,call_7509,var_7508,])
func_7513 = relay.Function([var_7457,var_7462,var_7508,], output)
mod['func_7513'] = func_7513
mod = relay.transform.InferType()(mod)
var_7514 = relay.var("var_7514", dtype = "int32", shape = (8, 240))#candidate|7514|(8, 240)|var|int32
var_7515 = relay.var("var_7515", dtype = "int16", shape = (2240,))#candidate|7515|(2240,)|var|int16
var_7516 = relay.var("var_7516", dtype = "uint16", shape = (2080,))#candidate|7516|(2080,)|var|uint16
output = func_7513(var_7514,var_7515,var_7516,)
func_7517 = relay.Function([var_7514,var_7515,var_7516,], output)
mutated_mod['func_7517'] = func_7517
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7309_call = mod.get_global_var('func_7309')
func_7311_call = mutated_mod.get_global_var('func_7311')
call_7594 = func_7309_call()
call_7595 = func_7309_call()
func_5937_call = mod.get_global_var('func_5937')
func_5942_call = mutated_mod.get_global_var('func_5942')
const_7616 = relay.const([[-7,9,-3,-3,-6,9,8,7,5,3,-10,5,-2,-7,-6,-5,4,-3,3,-5,-5,-8,-8,-6,8,-6,-10,6,-7,-7,10,6,-8,-10,6,-1,-4,3,5,2,-9,-10,9,-1,1,-9,-1,-2,5,1,9,-4,10,4,-7,9],[-7,4,-6,-4,4,5,-10,6,3,9,-9,7,-10,-5,7,4,-2,2,5,5,9,5,-9,7,8,5,10,-7,1,9,7,-4,4,-8,-9,-8,-3,2,-4,5,4,7,2,-4,7,2,9,-4,-1,-9,5,3,-10,1,3,-6],[-8,2,-9,2,2,-2,4,-3,8,7,1,1,-4,-7,-10,7,8,-5,-8,6,5,-2,-4,3,-8,7,-10,-1,3,-5,-3,-1,2,9,-5,1,-1,-8,-7,-10,9,4,-6,-8,-5,1,5,-8,-8,-8,-1,2,3,10,-10,5],[-8,3,-6,-4,-3,-10,7,-7,6,-9,-4,9,-2,7,7,-1,3,-10,4,1,-9,6,-10,10,-8,-2,-1,-10,-8,-2,3,2,9,6,-6,-1,-1,-10,9,6,10,-10,9,-1,-10,-3,-8,8,1,-1,2,-1,-8,-3,-10,4],[7,10,-5,4,-5,6,-6,-3,10,-1,5,-5,-2,7,9,5,-5,-3,-7,6,4,7,10,-6,-3,3,10,10,8,7,1,5,-6,-8,5,-4,10,10,1,-8,-4,4,-1,-7,4,-8,5,-2,-2,-3,8,8,9,8,4,8],[-9,4,-7,-8,-5,7,-10,1,1,8,1,7,-4,2,3,9,-2,-1,-4,-1,7,-8,-7,10,-1,9,-6,2,3,9,-5,9,1,-8,3,1,7,9,-6,-6,-9,1,-3,-5,-8,-4,3,2,-5,9,2,-10,-9,5,-7,-4],[-5,-2,-9,-7,-1,2,6,10,-6,9,-6,7,7,-3,-4,-3,-4,-9,1,-2,7,-8,9,4,4,-1,2,10,-1,-6,-1,-4,-5,10,9,10,-7,8,-8,-1,-8,7,-2,9,-9,10,5,7,-7,6,10,-3,-8,-2,3,-1],[8,1,2,-5,7,10,-1,10,3,-5,3,9,9,8,-7,-3,6,6,5,8,9,2,3,8,-1,7,1,7,-9,1,3,-2,-7,-6,10,-4,10,-8,9,8,-7,6,-3,7,8,-10,10,-10,8,1,8,8,-1,-2,2,-2]], dtype = "uint8")#candidate|7616|(8, 56)|const|uint8
const_7617 = relay.const([6,-1,-1,-1,-9,-1,-9,-3,-1,-6,-10,5,9,9,8,-1,5,-7,2,7,10,8,-9,10,3,-8,6,2,3,-9,7,-5,-4,9,10,-7,4,-10,6,10,9,-2,-3,10,-6,-7,1,-7,4,-10,10,7,-3,-6,10,-10,-5,-3,7,-6,-4,-9,-5,-9,2,7,9,7,-4,2,-8,2,7,4,1,-8,-3,10,-3,8,10,-7,-9,2,-5,7,9,9,-7,9,-10,-4,5,-10,-1,-2,-4,-10,3,-8,6,-4,-7,2,-3,-3,-9,-8,9,1,-6,2,3,-5,-6,5,-8,-9,-1,10,-2,-8,10,-7,6,2,2,4,-8,10,-3,9,3,8,-1,-9,-1,-5,-5,-1,-10,-2,7,-8,6,10,-2,-1,-9,8,-5,-2,-5,9,-7,10,-1,2,8,-4,5,-4,-3,3,-3,-9,-9,7,7,-2,4,4,4,-5,5,9,-3,8,-9,9,3,10,-10,5,-1,-4,1,-2,5,9,9,9,-2,-2,-7,3,-1,-3,10,-2,5,7,5,10,9,7,7,1,-2,-2,-4,-10,-8,9,1,10,-7,-1,-8,-10,10,6,3,9,-10,8,-6,2,1,1,-3,9,9,2,-3,-6,-2,-2,-10,2,-4,8,9,3,1,6,-6,-4,5,2,-10,2,-1,-7,-7,-2,1,2,-10,-4,10,5,-4,-1,-6,-6,-1,8,-5,4,-8,-5,-6,1,-4,7,6,10,-10,9,-3,-2,-7,6,-7,-4,-7,-4,-7,-1,3,-3,-9,-8,-3,4,-6,-10,-9,3,-9,9,-9,10,-9,7,6,-10,2,-3,7,-2,-6,-5,1,10,-8,-5,-3,1,4,5,-7,-7,5,7,-9,-6,-1,1,3,-1,2,6,-1,-9,-6,-6,-1,5,3,9,-10,9,8,-5,-1,1,-4,-9,5,-1,4,5,10,-9,-9,9,5,-3], dtype = "int16")#candidate|7617|(360,)|const|int16
const_7618 = relay.const([False,True,True,True,True,True,False,True,False,True,True,True,False,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,False,True,True,False,False,False,True,False,True,True,True,True,False,False,False,True,True,True,False,False,False,False,False,True,False,False,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,True,False,False,True,True,False,True,True,True,True,False,True,True,False,False,False,True,True,False,False,True,False,False,True,False,False,False,True,False,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,False,False,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,True,True,False,True,True,False,True,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,True,True,True,False,True,False,False,False,False,True,False,True,True,True,True,True,False,False,False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,True,False,False,False,False,False,False,True,False,False,False,False,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,False,True,True,False,False,True,False,False,True,True,True,True,True,True,True,True,True,False,True,False,False,True,True,True,False,False,False,True,False,False,True,True,True,False,True,True,True,False,False,True,True,True,False,False,False,True,True,False,True,False,False,True,False,True,True,False,True,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,False,False,True,False,True,True,False,True,True,False,False,True,False,True,False,True,True,False,True,True,True,False,False,True,True,True,True,True,False,True,True,False,False,False,True,True,True,True,False,True,False,True,False,False,False,False,True,True,False,True,False,False,True,True,True,False,False,False,False,True,False,True,True,False,True,False,True,True,False,False,False,False,True,False,False,True,True,True,True,True,False,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,True,False,False,True,False,False,False,False,False,True,True,True,False,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,False,False,True,False,False,False,True,False,True,False,True,False,False,False,False,False,True,True,True,False,True,True,True,True,True,False,False,False,True,False,True,True,False,False,False,True,False,True,True,False,True,False,False,True,True,False,True,False,True,True,True,False,False,False,True,True,True,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,False,False,True,False,False,False,True,True,False,False,False,False,True,True,False,False,False,True], dtype = "bool")#candidate|7618|(616,)|const|bool
const_7619 = relay.const([[-9],[10],[6],[3],[-10],[-1],[-9],[10],[9],[7],[-3],[-10],[-8],[4],[8],[8],[10],[7],[8],[1],[-6],[-2],[5],[6],[4],[-3],[4],[6],[8],[-9],[-10],[4],[-9],[-8],[-10],[4],[9],[10],[9],[-9],[-1],[-10],[6],[6],[-9],[-8],[6],[-9],[-2],[1],[-5],[-7],[-4],[-10],[3],[6],[2],[9],[-3],[1],[2],[9],[3],[2],[-6],[-9],[-9],[-7],[3],[5],[-9],[-2],[-8],[-10],[-7],[-3],[2],[8],[1],[-1],[4],[-9],[-6],[5],[-6],[-9],[-3],[7],[-3],[-2],[-9],[1],[6],[-7],[1],[5],[-7],[8],[1],[-7],[4],[-3],[7],[10],[-10],[-2],[7],[10],[-5],[2],[6],[9],[2],[-9],[1],[-1],[1],[3],[5],[-10],[4],[-3],[5],[6],[-2],[-6],[-6],[2],[-2],[-10],[-8],[-9],[-4],[-7],[-4],[5],[8],[2],[-3],[5],[-9],[-4],[6],[2],[8],[3],[4],[4],[-4],[6],[-7],[9],[10],[1],[10],[-9],[-7],[-3],[-10],[2],[-8],[3],[-9],[-9],[-8],[-3],[7],[-2],[-3],[-10],[-7],[9],[5],[-6],[8],[4],[-3],[7],[6],[6],[-4],[-10],[-1],[10],[3],[7],[3],[5],[-8],[5],[-9],[2],[-8],[5],[-7],[-9],[-10],[-4],[1],[-6],[-3],[6],[9],[-4],[-2],[-10],[9],[-4],[-1],[2],[-10],[10],[2],[-4],[5],[-1],[3],[6],[1],[-6]], dtype = "int16")#candidate|7619|(220, 1)|const|int16
call_7615 = relay.TupleGetItem(func_5937_call(relay.reshape(const_7616.astype('uint8'), [14, 2, 16]), relay.reshape(const_7617.astype('int16'), [360,]), relay.reshape(const_7618.astype('bool'), [616,]), relay.reshape(const_7619.astype('int16'), [220,]), ), 3)
call_7620 = relay.TupleGetItem(func_5942_call(relay.reshape(const_7616.astype('uint8'), [14, 2, 16]), relay.reshape(const_7617.astype('int16'), [360,]), relay.reshape(const_7618.astype('bool'), [616,]), relay.reshape(const_7619.astype('int16'), [220,]), ), 3)
output = relay.Tuple([call_7594,call_7615,const_7616,const_7617,const_7618,const_7619,])
output2 = relay.Tuple([call_7595,call_7620,const_7616,const_7617,const_7618,const_7619,])
func_7622 = relay.Function([], output)
mod['func_7622'] = func_7622
mod = relay.transform.InferType()(mod)
output = func_7622()
func_7623 = relay.Function([], output)
mutated_mod['func_7623'] = func_7623
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7684 = relay.var("var_7684", dtype = "float32", shape = (12, 11, 5))#candidate|7684|(12, 11, 5)|var|float32
var_7685 = relay.var("var_7685", dtype = "float32", shape = (12, 11, 5))#candidate|7685|(12, 11, 5)|var|float32
bop_7686 = relay.mod(var_7684.astype('float32'), relay.reshape(var_7685.astype('float32'), relay.shape_of(var_7684))) # shape=(12, 11, 5)
func_7340_call = mod.get_global_var('func_7340')
func_7341_call = mutated_mod.get_global_var('func_7341')
call_7689 = func_7340_call()
call_7690 = func_7340_call()
output = relay.Tuple([bop_7686,call_7689,])
output2 = relay.Tuple([bop_7686,call_7690,])
func_7697 = relay.Function([var_7684,var_7685,], output)
mod['func_7697'] = func_7697
mod = relay.transform.InferType()(mod)
var_7698 = relay.var("var_7698", dtype = "float32", shape = (12, 11, 5))#candidate|7698|(12, 11, 5)|var|float32
var_7699 = relay.var("var_7699", dtype = "float32", shape = (12, 11, 5))#candidate|7699|(12, 11, 5)|var|float32
output = func_7697(var_7698,var_7699,)
func_7700 = relay.Function([var_7698,var_7699,], output)
mutated_mod['func_7700'] = func_7700
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7309_call = mod.get_global_var('func_7309')
func_7311_call = mutated_mod.get_global_var('func_7311')
call_7728 = func_7309_call()
call_7729 = func_7309_call()
var_7736 = relay.var("var_7736", dtype = "float64", shape = (6, 7, 10))#candidate|7736|(6, 7, 10)|var|float64
bop_7737 = relay.left_shift(call_7728.astype('uint64'), relay.reshape(var_7736.astype('uint64'), relay.shape_of(call_7728))) # shape=(6, 7, 10)
bop_7740 = relay.left_shift(call_7729.astype('uint64'), relay.reshape(var_7736.astype('uint64'), relay.shape_of(call_7729))) # shape=(6, 7, 10)
func_5937_call = mod.get_global_var('func_5937')
func_5942_call = mutated_mod.get_global_var('func_5942')
const_7745 = relay.const([6,-10,2,-3,2,6,3,2,8,1,6,8,-2,3,1,-8,7,5,-1,-6,2,-6,-9,-2,-8,1,-9,-5,4,-5,-1,1,-10,-9,-3,-6,8,10,8,6,-3,1,8,6,-1,6,-3,-2,-1,4,6,9,-1,3,10,-7,-6,4,-2,5,-1,-7,-8,-5,-10,5,8,1,-4,9,2,7,-4,-4,-3,-10,-10,7,8,8,-3,-5,8,2,-8,4,-9,-2,3,-7,-4,9,6,3,1,1,6,-7,-1,4,2,-3,-2,3,-10,-10,-9,-2,6,-8,-9,-3,4,9,8,7,5,10,3,-1,-4,-9,1,-8,7,5,5,-10,7,4,-5,7,1,5,3,-8,6,-9,-9,5,-3,5,-8,6,-6,-3,3,9,9,7,2,8,3,7,6,-1,2,-8,-10,-6,-7,7,8,2,-2,9,6,-3,5,-4,-2,10,10,-4,2,-9,10,-9,-4,8,-1,1,4,-6,-4,2,5,9,9,10,-7,10,-6,8,9,-7,4,-10,2,9,-8,1,2,3,-5,-3,-3,-10,2,-1,5,-5,-6,7,-1,-3,9,4,-3,-3,9,3,-10,1,10,-7,1,-3,-7,6,-7,8,-2,7,9,-4,-9,8,-9,-5,2,5,4,-10,-6,-8,5,1,6,1,-2,-4,3,10,3,-2,-7,-8,-4,-1,-5,5,5,-7,6,8,4,-8,-6,-8,6,-5,6,-6,-4,-1,8,-8,4,7,3,7,-9,-4,-5,-5,-2,-4,4,7,8,6,5,-2,9,-8,-7,10,2,-5,6,-6,8,5,3,-9,-1,9,-9,7,-2,-2,2,9,6,10,1,10,-9,3,-8,-3,9,9,2,-8,10,5,2,5,5,-1,3,-8,-6,-4,-5,-7,8,-2,9,7,10,1,-6,-9,6,-1,-1,3,2,-2,-2,-3,5,3,7,-5,-3,-8,-5,-2,-7,9,-2,5,-10,2,6,-4,-1,6,6,5,-8,-8,10,-3,3,-4,6,8,6,8,5,4,-9,-4,-2,4,-1,-4,-4,-5,10,-3,-9,-2,1,7,-2,-4,3,-7,8,-4,6,8,-6,-9,2,-5,-3,6,-7,-1,-7,-1,4,5,9,-9,-9,7,9,2,-5,2,3,1,-2,10,-9,10,-9,3,6,5,8,1,-7,9,-9,10,-1,-2,7,-2], dtype = "uint8")#candidate|7745|(448,)|const|uint8
const_7746 = relay.const([10,-7,-1,7,-8,-9,2,-1,10,4,-2,2,7,5,6,1,7,-10,-3,-6,4,2,-1,-9,-5,-2,-5,10,-6,1,-3,9,-2,-10,-8,6,2,-7,10,-6,8,-1,-2,5,8,-9,10,-2,-7,-7,-1,-6,-2,-5,-1,-9,-9,-4,-3,-9,4,-5,6,-7,2,-9,-9,-5,1,5,-5,1,-7,4,-3,-5,1,-3,7,-3,6,-3,8,-7,-2,-1,9,10,6,-5,7,7,-8,-6,-2,6,-10,2,9,-6,-2,-5,-8,6,-8,-6,1,-2,6,5,-6,6,10,-3,7,-7,4,-1,-8,8,-8,-9,-8,9,9,-1,-5,-1,5,3,3,5,3,-2,5,-6,-6,3,8,-9,-5,1,9,6,-6,-8,-10,-6,8,-5,10,5,8,2,-9,-10,3,-4,-5,-6,9,10,4,-2,8,5,-9,-5,-8,1,-10,-2,4,5,6,10,3,3,-10,10,-4,-5,7,2,-7,-5,-5,9,-2,-1,-4,-4,-5,-6,3,10,-3,2,4,-7,6,9,-6,-3,3,-9,-6,-5,1,5,-7,3,9,10,-9,6,7,-9,4,-3,7,-3,6,-4,-9,-1,4,-4,1,-8,-1,8,-10,4,10,-10,-1,1,-2,2,-6,6,9,4,-6,-2,9,-8,8,6,9,-6,10,8,4,3,-5,1,1,-5,10,-7,-9,1,-6,7,2,6,3,-3,-5,9,5,3,-5,-4,-8,-7,5,4,4,7,-9,7,-6,-10,-7,1,7,8,4,1,3,9,-6,9,6,-8,-8,8,-5,7,5,4,1,6,-3,7,4,6,-1,-2,3,-4,4,7,8,1,-9,7,-8,7,-9,9,-2,-5,-2,-4,6,-5,9,2,-5,3,10,6,-5,9,-9,9,-5,-8,3,3,-9,-2,2,8,-6,1,-4,-2,-2,-3,1,-4,-8,3,-4,1], dtype = "int16")#candidate|7746|(360,)|const|int16
const_7747 = relay.const([True,True,True,False,True,False,True,False,True,False,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,False,False,False,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,True,True,False,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,False,False,False,True,False,False,True,True,False,False,False,True,False,False,False,True,True,True,False,False,True,True,False,True,False,True,True,True,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,False,True,True,False,False,False,True,False,True,True,True,False,False,False,False,True,False,False,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,False,True,False,True,False,True,True,True,True,False,True,True,False,False,True,True,True,False,False,True,False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,True,True,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,True,False,False,True,False,False,True,False,False,True,True,False,True,False,True,False,True,True,False,True,False,True,False,True,True,False,False,True,False,False,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,False,True,False,True,True,False,False,True,False,True,True,False,True,True,False,True,True,True,False,True,False,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,True,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,True,False,False,True,True,True,False,True,False,True,False,True,False,True,True,True,True,True,False,True,True,True,True,True,False,True,True,False,False,True,True,True,False,True,True,True,False,True,False,True,False,False,False,True,True,True,False,False,False,False,True,True,True,False,True,False,False,False,False,False,False,True,True,False,False,False,True,True,False,True,False,False,False,False,True,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,False,True,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,True,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,False,True,False,True,False,True,False,False,False,True,False,True,False,True,False,False,True,False,True,False,False,True,False,False,True,True,False,True,True,False,False,True,True,False,True,True,True,True,True,False,True,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,False,False,True,True,True,False,False,True,False,True,False,True,True,True,False,False,False,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,True,False,True,True,False,False,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,False,False,True], dtype = "bool")#candidate|7747|(616,)|const|bool
const_7748 = relay.const([[9,-4,-3,-6,-7,-5,-1,-10,4,-2,-8,5,3,-6,3,8,1,10,-4,-4,3,8,4,2,1,-2,-5,9,-8,10,-2,-1,10,-4,-10,-7,-10,6,6,1,9,6,-10,-5],[9,-10,-4,5,4,2,10,6,6,-3,9,-8,9,4,1,8,5,-1,10,-4,-7,-8,-8,8,-8,6,7,8,2,-3,-3,10,-8,-8,-1,3,-1,-5,-9,4,-4,-7,-8,6],[10,10,-2,-3,5,1,6,-2,-8,7,-9,-7,3,3,10,1,1,-3,-6,-5,10,7,-1,4,-7,7,3,-1,7,-10,-5,8,4,9,10,1,10,-5,-6,-10,-9,10,-10,-10],[5,3,1,-8,-5,-5,10,2,-3,-3,-5,1,-2,5,2,-9,3,8,5,9,2,-2,9,6,-2,-10,-4,10,3,-7,1,3,8,-10,-7,3,-2,-4,1,-4,9,-10,4,-8],[-5,4,-9,-10,8,9,8,5,-9,2,8,-2,9,-9,-2,-1,-10,-3,-10,7,4,5,8,-1,-10,-6,8,-5,-2,9,1,-2,-3,-1,1,-2,4,4,-9,10,7,-6,-5,-1]], dtype = "int16")#candidate|7748|(5, 44)|const|int16
call_7744 = relay.TupleGetItem(func_5937_call(relay.reshape(const_7745.astype('uint8'), [14, 2, 16]), relay.reshape(const_7746.astype('int16'), [360,]), relay.reshape(const_7747.astype('bool'), [616,]), relay.reshape(const_7748.astype('int16'), [220,]), ), 1)
call_7749 = relay.TupleGetItem(func_5942_call(relay.reshape(const_7745.astype('uint8'), [14, 2, 16]), relay.reshape(const_7746.astype('int16'), [360,]), relay.reshape(const_7747.astype('bool'), [616,]), relay.reshape(const_7748.astype('int16'), [220,]), ), 1)
output = relay.Tuple([bop_7737,call_7744,const_7745,const_7746,const_7747,const_7748,])
output2 = relay.Tuple([bop_7740,call_7749,const_7745,const_7746,const_7747,const_7748,])
func_7755 = relay.Function([var_7736,], output)
mod['func_7755'] = func_7755
mod = relay.transform.InferType()(mod)
mutated_mod['func_7755'] = func_7755
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7756 = relay.var("var_7756", dtype = "float64", shape = (6, 7, 10))#candidate|7756|(6, 7, 10)|var|float64
func_7755_call = mutated_mod.get_global_var('func_7755')
call_7757 = func_7755_call(var_7756)
output = call_7757
func_7758 = relay.Function([var_7756], output)
mutated_mod['func_7758'] = func_7758
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7783 = relay.var("var_7783", dtype = "int32", shape = (12, 5, 5))#candidate|7783|(12, 5, 5)|var|int32
var_7784 = relay.var("var_7784", dtype = "int32", shape = (12, 5, 5))#candidate|7784|(12, 5, 5)|var|int32
bop_7785 = relay.subtract(var_7783.astype('int32'), relay.reshape(var_7784.astype('int32'), relay.shape_of(var_7783))) # shape=(12, 5, 5)
func_4331_call = mod.get_global_var('func_4331')
func_4333_call = mutated_mod.get_global_var('func_4333')
const_7789 = relay.const([-4.944492,3.151938,-0.589727,8.666040,-4.725914,-0.395477,5.871277,7.849801,-4.603310,6.179633,5.321424,-5.438683,3.911942,-8.116821,5.811086,-8.872278,-9.032855,-1.651324,1.667801,3.205330,-1.108916,3.511487,0.527082,-0.697749,-1.253526,-1.215025,-9.750504,4.784623,-5.105806,-9.641210,3.680452,-0.087788,7.679010,8.680707,-5.371444,-9.479505,-1.960150,2.581760,-9.288816,7.835981,7.568979,-6.792708,-1.398487,1.353676,2.913571,7.724234,-7.909024,-9.149938,-4.896179,6.936856,3.575110,9.200722,6.029169,3.255967,2.638170,-8.527664,2.367205,-9.216638,-7.222606,-5.715251,7.209556,3.116345,2.164702,5.322327,3.299782,7.711806,-8.523273,-3.147389,4.298287,1.592957,4.663524,5.681457,-6.146927,-1.150958,-1.545569,8.106788,-0.806791,2.951626,-4.076195,-8.363180,6.169390,-8.020326,-4.493469,6.957683,9.867519,-1.849934,3.416077,0.182510,2.531331,-1.032447,-9.201258,-2.465612,-7.008955,7.138489,-7.764648,-6.160876,1.112991,-2.081130,-1.439862,0.777476,-0.475223,-4.384144,7.687952,-9.460042,3.753394,-8.011663,-8.456281,3.509319,1.776002,1.297010,-1.342637,1.158023,3.821826,3.866529,-9.282785,2.964704,7.609375,-5.639186,5.579099,7.182875,7.123494,-2.933413,-7.858536,4.311087,-1.259295,-3.361938,-9.051373,-7.623352,6.303758,2.464926,-7.534885,-7.730935,-5.429068,9.890401,2.005650,2.687946,-6.426412,-7.596296,0.667463,-8.193450,7.768388,-6.495163,4.325073,5.368205,-3.570596,-7.132447,7.184159,-3.842782,6.216918,2.666026,0.945240,9.130738,-3.501338,-0.948235,3.775707,-7.368465,1.492029,8.669691,9.044182,7.105217,3.148904,0.826625,5.864709,7.455099,9.598118,8.364552,7.864319,-9.574884,5.247923,9.487876,-1.189766,2.324422,-4.052181,-1.555372,4.100261,1.871627,0.974922,5.342282,3.000437,8.454768,7.169619,3.868753,3.301437,-6.587915,-0.267554,-0.783712,4.992942,8.213073,-0.148375,-0.872024,8.017059,-8.280229,-5.771325,4.700781,-7.315013,-9.474508,-1.473918,-7.920398,3.910966,-6.689361,-7.782091,-4.777459,-3.945720,6.563339,5.617315,-9.476381,-5.282922,8.131592,-0.350251,-9.114675,9.704009,-3.142746,-1.426030,-7.859225,4.252638,7.886515,2.291187,-2.221033,0.036006,-8.275303,9.303052,-7.436845,8.987137,-0.318206,-1.577708,7.392849,1.969463,4.073496,-4.278843,1.616028,-6.245754,-0.580855,4.913217,8.058331,-8.096053,9.619003,-9.538162,0.564715,-8.301588,0.800329,-1.121779,-9.099539,-4.900776,2.834766,2.711174,2.392404,-7.148732,6.753829,-2.444535,-9.438113,-1.290243,-7.786491], dtype = "float32")#candidate|7789|(252,)|const|float32
call_7788 = func_4331_call(relay.reshape(const_7789.astype('float32'), [9, 4, 7]))
call_7790 = func_4331_call(relay.reshape(const_7789.astype('float32'), [9, 4, 7]))
func_5503_call = mod.get_global_var('func_5503')
func_5506_call = mutated_mod.get_global_var('func_5506')
const_7806 = relay.const([7,-2,1,-4,2,9,10,6,10,-3,-10,8,-10,2,-2,-3,-7,9,-2,6,8,-10,9,-10,-9,10,5,7,10,3,2,-2,10,9,-4,-10,10,-1,-5,-2,1,-4,-9,-10,-4,-2,10,5,7,5,-9,-4,-4,10,5,6,3,10,2,-10,6,3,7,-7,-4,-8,7,9,-8,-3,-10,-6,-10,4,10,-10,-9,-2,3,-3,-2,-9,2,10,-9,-2,3,-4,8,-5,-6,-7,-10,-1,8,1,4,9,-9,7,-2,-9,-9,-8,-2,5,9,-3,1,-3,8,9,5,-10,-6,2,-6,-3,-5,1,-5,5,8,-3,4,10,-2,-5,-6,1,2,10,-6,4,-5,9,3,3,4,2,4,1,10,6,9,-8,3,-8,10,-10,-6,2,-5,-1,-3,-8,-5,-4,6,-1,-9,5,-4,1,-6,-8,2,-2,-8,-7,-7,7,-7,-9,3,8,-8,4,-8,7,-9,-6,6,9,4,5,4,-5,7,2,3,-1,-2,2,-3,-6,3,-3,-2,5,10,-7,-3,3,-6,9,-6,-10,-7,-10,1,-5,10,3,2,-7,-9,-7,7,-10,9,-4,-10,-5,7,9,3,-2,4,4,5,-8,-6,-5,-9,9,4,4,8,-3,5,4,-6,3,-2,-5,6,1,2,-6,3,-8,-9,-1,2,-3,-7,-6,-3,-4,4,4,-5,-4,3,8,5,2,-8,2,-8,6,-4,-10,-1,-4,6,-9,-4,-7,-4,4,-1,-3,9,9,-10,5,-9,-3,-1,-9,6,7,-10,-9,-9,4,-9,-1,4,-8,-6,8,-9,-8,-7,-7,-5,-5,9,1,-8,10,-4,6,2,2,-8,-3,-3,-7,-10,-5,9,9,-5,7,-5,-1,-9,-5,-2,7,7,-6,3,-1,10,-7,8,-8,-8,6,-4,-2,-3,-4,-6,-4,-2,-3,6,9,2,4,4,4,-8,3,9,-7,-4,7,3,-3,4,2,-2,3,-9,-5,-10,2,1,-2,-3,-3,9,9,3,-8,7,-4,-5,4,-7,-4,10,-7,-3,1,9,7,4,-1,-5,2,1,3,-7,9,-10,1,10,2,6,-3,5,-2,-3,4,3,4,-3,9,7,-2,-10,-6,-10,4,-10,-2,7,4,8,-2,7,5,2,-10,2,6,6,2,10,3,-5,9,-8,3,-2,-4,-10,8,3,-3,-1,-6,-10,-4,-6,-4,-1,-2,5,-4,-2,-7,7,6,-5,-6,-7,5,1,-10,6,8,9,6,-7,3,9,2,9,-8,7,1,6,-1,-5,4,9,9,-3,-1,5,2,6,-2,1,9,3,2,-8,-4,8,-6,-1,-2,-2,-7,-7,-3,-2,-9,-4,-3,-8,4,-9,-1,-10,3,-4,6,-8,-4,-1,-1,1,-9,8,-4,6,6,-8,-4,4,10,2,3,-10,-8,-4,-5,9,-2,6,5,3,7,8,10,9,-7,5,-3,-7,-5,8,-5,-3,-5,-10,1,2,5,-1,2,-4,-1,1,1,4,6,-5,10,8,7,6,3,5,-7,-2,4,-8,-4,-10,-6,10,-6,-2,3,2,8,-5,5,9,-6,-3,-9,-7,1,-8,4,6,5,8,8,7,7,8,-3,8,-2,-10,-1,3,-6,6,3,10,1,-5,8,-6,-3,1,-1,-5,-9,3,-4,1,-1,8,10,-1,5,-10,7,2,-10,8,-1,6,10,7,8,-1,-4,5,8,4,10,-8,10,9,-2,-3,9,-10,-9,-10,6,7,10,-7,8,4,7,-6,-2,9,9,-5,-9,5,4,4,9,-4,-3,-9,-2,8,-3,-6,-7,-8,-7,7,8,4,9,5,-9,-7,2,3,9,3,6,-8,6,-3,7,-9,-2,-10,-2,9,6,6,-3,1,-10,5,-6,3,9,5,6,2,10,8,-8,5,-6,1,-10,3,-7,-8,-3,6,-8,7,-8,1,2,-10,-8,-4,4,8,-6,-3,-1,-7,-5,8,6,5,-6,-10,6,1,-2,2,8,9,-1,10,-7,-8,-2,6,-4,9,-9,-10,-8,-3,-6,8,5,10,4,-9,9,-5,-4,6,-4,-7,6], dtype = "int32")#candidate|7806|(780,)|const|int32
var_7807 = relay.var("var_7807", dtype = "int32", shape = (1920,))#candidate|7807|(1920,)|var|int32
call_7805 = relay.TupleGetItem(func_5503_call(relay.reshape(const_7806.astype('int32'), [5, 12, 13]), relay.reshape(var_7807.astype('int32'), [1920,]), ), 8)
call_7808 = relay.TupleGetItem(func_5506_call(relay.reshape(const_7806.astype('int32'), [5, 12, 13]), relay.reshape(var_7807.astype('int32'), [1920,]), ), 8)
output = relay.Tuple([bop_7785,call_7788,const_7789,call_7805,const_7806,var_7807,])
output2 = relay.Tuple([bop_7785,call_7790,const_7789,call_7808,const_7806,var_7807,])
func_7811 = relay.Function([var_7783,var_7784,var_7807,], output)
mod['func_7811'] = func_7811
mod = relay.transform.InferType()(mod)
mutated_mod['func_7811'] = func_7811
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7811_call = mutated_mod.get_global_var('func_7811')
var_7813 = relay.var("var_7813", dtype = "int32", shape = (12, 5, 5))#candidate|7813|(12, 5, 5)|var|int32
var_7814 = relay.var("var_7814", dtype = "int32", shape = (12, 5, 5))#candidate|7814|(12, 5, 5)|var|int32
var_7815 = relay.var("var_7815", dtype = "int32", shape = (1920,))#candidate|7815|(1920,)|var|int32
call_7812 = func_7811_call(var_7813,var_7814,var_7815,)
output = call_7812
func_7816 = relay.Function([var_7813,var_7814,var_7815,], output)
mutated_mod['func_7816'] = func_7816
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6329_call = mod.get_global_var('func_6329')
func_6331_call = mutated_mod.get_global_var('func_6331')
call_7851 = relay.TupleGetItem(func_6329_call(), 0)
call_7852 = relay.TupleGetItem(func_6331_call(), 0)
uop_7858 = relay.cos(call_7851.astype('float64')) # shape=(11, 15, 8)
uop_7860 = relay.cos(call_7852.astype('float64')) # shape=(11, 15, 8)
uop_7862 = relay.sigmoid(call_7851.astype('float64')) # shape=(11, 15, 8)
uop_7864 = relay.sigmoid(call_7852.astype('float64')) # shape=(11, 15, 8)
output = relay.Tuple([uop_7858,uop_7862,])
output2 = relay.Tuple([uop_7860,uop_7864,])
func_7874 = relay.Function([], output)
mod['func_7874'] = func_7874
mod = relay.transform.InferType()(mod)
output = func_7874()
func_7875 = relay.Function([], output)
mutated_mod['func_7875'] = func_7875
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6329_call = mod.get_global_var('func_6329')
func_6331_call = mutated_mod.get_global_var('func_6331')
call_7883 = relay.TupleGetItem(func_6329_call(), 0)
call_7884 = relay.TupleGetItem(func_6331_call(), 0)
output = relay.Tuple([call_7883,])
output2 = relay.Tuple([call_7884,])
func_7885 = relay.Function([], output)
mod['func_7885'] = func_7885
mod = relay.transform.InferType()(mod)
output = func_7885()
func_7886 = relay.Function([], output)
mutated_mod['func_7886'] = func_7886
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7622_call = mod.get_global_var('func_7622')
func_7623_call = mutated_mod.get_global_var('func_7623')
call_7900 = relay.TupleGetItem(func_7622_call(), 1)
call_7901 = relay.TupleGetItem(func_7623_call(), 1)
output = relay.Tuple([call_7900,])
output2 = relay.Tuple([call_7901,])
func_7906 = relay.Function([], output)
mod['func_7906'] = func_7906
mod = relay.transform.InferType()(mod)
output = func_7906()
func_7907 = relay.Function([], output)
mutated_mod['func_7907'] = func_7907
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6185_call = mod.get_global_var('func_6185')
func_6186_call = mutated_mod.get_global_var('func_6186')
call_7966 = func_6185_call()
call_7967 = func_6185_call()
output = relay.Tuple([call_7966,])
output2 = relay.Tuple([call_7967,])
func_8000 = relay.Function([], output)
mod['func_8000'] = func_8000
mod = relay.transform.InferType()(mod)
mutated_mod['func_8000'] = func_8000
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8000_call = mutated_mod.get_global_var('func_8000')
call_8001 = func_8000_call()
output = call_8001
func_8002 = relay.Function([], output)
mutated_mod['func_8002'] = func_8002
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7019_call = mod.get_global_var('func_7019')
func_7021_call = mutated_mod.get_global_var('func_7021')
call_8081 = relay.TupleGetItem(func_7019_call(), 0)
call_8082 = relay.TupleGetItem(func_7021_call(), 0)
output = call_8081
output2 = call_8082
func_8087 = relay.Function([], output)
mod['func_8087'] = func_8087
mod = relay.transform.InferType()(mod)
mutated_mod['func_8087'] = func_8087
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8087_call = mutated_mod.get_global_var('func_8087')
call_8088 = func_8087_call()
output = call_8088
func_8089 = relay.Function([], output)
mutated_mod['func_8089'] = func_8089
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8000_call = mod.get_global_var('func_8000')
func_8002_call = mutated_mod.get_global_var('func_8002')
call_8111 = relay.TupleGetItem(func_8000_call(), 0)
call_8112 = relay.TupleGetItem(func_8002_call(), 0)
func_64_call = mod.get_global_var('func_64')
func_67_call = mutated_mod.get_global_var('func_67')
const_8124 = relay.const([[-5.276636,4.099092,-2.472996,9.670747,-7.251966,-8.032976,-6.343824,-3.715906,4.447077,0.558123,-2.294616,-1.880372,-8.957692,2.667961,-7.195971,-8.784781,9.980376,-2.067443,9.380334,3.114395,3.133292,-2.335316,3.907623,-8.218713,9.766776,8.333734,-7.919790,8.724733,7.633458,-2.867551,6.213340,-4.806161,-0.499030,-0.519052,-9.680110,9.548654,3.150432,9.136901,4.769822,-5.949378,-7.869680,-1.171029,1.523800,9.440263,-9.637681,-5.485403,-0.469098,0.514456,2.293883,7.436879,0.874744,4.988934,-4.137377,-3.198962,-5.396702,-3.937437,-8.992282,-4.063377,-2.471249,-0.496132,5.676483,-9.190892,-5.286127,-6.296874,9.405228,2.264351,9.441626,-2.796622,-6.328881,1.455821,5.268393,2.647873,-9.547162,1.488283,6.424296,2.977541,-6.181506,-4.462382,0.316644,-7.984221,-9.055605,-6.462278,-8.608342,3.433643,8.198417,7.850317,-7.898998,-3.839000,-6.449875,9.088366,1.300412,-1.373297,-8.411794,-9.142189,-5.562103,6.891154,8.777168,-9.996331,-6.789847,-4.692995,-8.594981,-7.347175,-1.213459,3.263942,-0.532456,-7.704415,0.941986,8.257220,6.372364,-0.902846,-2.295938,6.291832,8.187858,8.878045,0.243627,0.415844,4.520383,3.333374,-3.445745,7.549640,1.739408,-9.077748,-2.239736,1.397439,-6.681681,3.135451,4.368789,-2.069756,-3.990578,-4.274406,7.024744,7.136364,4.071918,-8.939876,3.506605,-7.763374,8.672875,-7.450561,-5.345794,8.309097,9.337579,9.675629,7.228969,5.920046,0.399883,-5.445182,6.545304,7.650006,-6.158559,-2.533029,2.433191,-8.213012,5.231042,2.006147,-3.786034,-1.799554,3.602347,-2.098454,6.937409,8.474665,2.045058,4.547109,4.714157,8.555057,-6.445073,-5.754660,-7.154067,-4.237064,2.331403,2.980493,7.044204,8.274592,0.101776,2.788644,8.577140,1.830913,-6.298440,0.370066,-0.485558,7.674392,-3.237549,-2.044144,1.125187,-6.186205,-8.556626,-9.665294,-8.407129,9.178922,-1.490896,-1.642852,3.646696,-5.841772,4.819604,1.988716,8.381366,-5.489567,-7.432374,-0.797420,-2.075777,-9.177497,4.529760,-0.539127,-9.362283,7.855404,-7.907262,-7.708466,-4.085234,-9.670164,-2.080482,1.326819,-6.061726,1.610417,-1.635622,-7.791949,3.867239,-9.123319,-6.958958,-1.395227,-0.433098,2.752035,3.325586,-4.524792,-2.312464,3.067497,-9.911539,-2.252130,7.007596,-6.005440,-4.544515,-2.753882,4.945021,-2.435994,4.749726,8.627280,-6.853535,-7.151681,-3.710976,5.872715,4.705804,-1.358224,2.690302,8.415863,-8.612573,1.066649,-2.390833,-4.084221,-1.226862,9.039835,5.354118,8.003813,1.232964,-4.918123,-1.796548,3.409573,-1.969649,8.661995,-5.537623,-3.337990,-7.355053,3.963669,5.240926,3.849796,-1.959123,0.278106,4.182146,-2.003199,5.261714,-2.027020,-1.891113,8.964981,6.679819,6.261594,9.972621,0.417585,3.392224,6.147660,-1.292226,-7.228684,4.504054,5.879384,-1.519605,-9.655813,-4.467975,8.892693,-9.702421,0.015548,9.358008,7.088365,9.235286,9.931960,-4.863384,7.168687,3.818594,5.720850,-7.482771,5.485734,-1.351376,-7.107557,-8.707404,-6.140039,-1.711821,1.243940,-4.617210,2.292365,7.075056,-2.740762,8.854999,-9.345910,1.566805,6.822628,-0.275529,-6.084461,-1.321706,6.833208,-1.598554,4.802417,-0.450012,-9.421240,-0.194668,-3.983715,-8.575404,2.329259,-6.996703,-6.055900,6.267551,2.226682,-3.223957,7.103667,-3.640766,-8.799116,-8.222598,-2.041031,-4.865532,4.492106,-6.371890,-1.693652,-3.910983,-8.849608,8.319647,-2.622336,-8.385318,8.117852,0.185886,-8.458481,9.093213,-5.759161,-6.687245,-6.628285,4.271674,0.412121,5.173980,1.908685,6.324160,7.248485,-9.104063,-7.551771,2.388163,-3.326354,-5.596821,0.947188,6.705993,2.463532,-3.606077,-8.783446,4.689164,9.550237,3.909677,-7.569681,-4.600481,8.273744,0.757014,2.310634,7.377941,1.570746,-8.319720,-3.443095,-8.142986,-5.802859,3.690700,-3.524666,-7.353303,-3.228841,-4.040600,0.430000,-4.323946,-0.415170,-2.463768,-6.997886,4.286327,5.067286,-1.496748,4.509270,8.363609,4.585973,-8.740001,3.692927,7.453516,-4.465558,-2.642190,-1.718694,-2.774038,-5.003051,6.505735,2.862938,-2.988415,-8.957271,-0.007096,3.177510,2.934169,-5.674351,-4.086728,4.759084,2.643360,-0.461607,6.143235,-2.936341,3.316383,-6.094896,-8.042324,6.560005,-8.958412,6.026897,8.076223,-0.569003,-7.896719,-1.407119,-3.290714,-8.523257,9.200237,0.413739,-2.830486,-2.253336,-7.242717,-2.435863,-7.415896,6.045774,2.289261,5.185094,6.911227,-7.208329,1.056879,-5.269484,-5.916071,0.686856,0.077414,-5.848021,9.329547,9.219880,8.621984,-5.273402,2.226297,-6.596982,-8.231342,6.657583,8.583671,8.932292,-8.852835,-9.387159,6.877369,-7.670043,-0.751326,-4.236611,-3.676144,1.577396,6.938624,8.832985,4.894560,0.032859,-4.342864,7.182181,-2.955760,-0.204903,-4.091586,1.501427,-4.189033,8.828628,-7.703846,-9.118618,3.580457,-2.387204,1.061615,-5.235727,8.957798,0.487870,-0.285534,9.488468,4.298246,-4.840121,-0.465715,4.607929,2.528110,6.526074,-0.903060,-9.067749,7.917589,-2.541469,7.541345,8.989387,4.253341,-1.848026,2.997446,-1.931161,4.332250,2.346819,8.905620,-7.597382,6.092633,-4.738558,-2.078430,5.789342,-2.702022,-7.675034,-4.683178,-3.331709,-9.774749,-1.962840,6.958801,8.252245,8.377996,-0.380461,1.938736,6.027799,4.491136,8.564442,5.901781,7.047028,-1.033775,9.610479,-8.793734,-9.187048,-4.838060,-5.580106,-7.821093,-7.892885,-2.336179,-2.079606,2.619422,-9.748713,6.430286,-3.785032,2.105890,-7.963996,-7.178816,-0.061290,-4.764342,5.669440,8.468162,-1.500323,6.668792,7.228830,9.059908,-9.677951,-7.849799,1.830115,-8.078335,-3.734661,-7.941160,0.580717,-9.059910,2.339611,9.744670,6.611314,-0.690736,-1.006825,-4.363967,-4.615452,1.949745,-4.167918,7.031999,8.437375,-2.699458,4.530908,1.126854,1.124459,9.518785,-0.267328,8.197475,4.333448,6.718606,-5.175361,-0.643083,5.033734,9.172196,8.405599,-4.567844,-2.344990,-2.011395,6.525975,-9.797233,5.811459,9.029138,-0.142712,1.507380,-7.082010,6.385829,-3.875407,4.570689,5.919797,8.622946,-4.981269,-9.646581,-3.058458,-4.425613,-0.282951,-1.215034,-6.808087,6.734827,5.750285,6.107557,0.437652,-1.349171,-9.094091,0.657002,-9.711471,-0.785999,-7.304455,8.578905,8.957294,-5.208952,-8.917206,4.670167,-0.110986,-4.274740,9.332678,-0.381438,-8.590967,-2.995802,-8.888850,4.128593,-8.701761,6.137512,-8.186476,-5.961937,1.062868,3.388895,9.468462,-5.699929,1.553474,1.295114,-0.841039,7.101246,-5.872202,2.665912,7.139988,0.803649,-3.839340,0.957958,9.993761,-5.556024,-5.695568,9.075145,-5.746431,-6.831686,-4.656523,-3.125522,0.290982,6.928737,8.212081,-3.786468,2.760414,1.537996,8.956621,-8.320269,-7.704305,8.246349,-4.195763,-3.309054,-4.027074,-4.426714,6.755539,-1.535596,-9.102416,-5.833392,-2.894299,5.939724,8.995641,-2.164222,2.799689,3.256145,4.615088,-8.703840,7.753840,0.686197,3.554629,-1.474673,-7.144376,0.770650,5.832708,7.749352,4.517745,8.180264,8.281496,6.666862,0.956510,-4.474871,1.968401,-8.802036,5.461435,-7.875201,-9.642586,1.194274,1.659189,6.148096,8.420122,0.212947,4.115535,8.430705,-8.656418,8.960028,8.514417,-0.585280,7.233844,-4.878635,-4.376076,0.364307,4.677076,-4.324128,-3.603437,0.884099,-5.243373,-3.846732,-5.456930,-7.133632,-2.025665,-8.464330,9.737895,-4.653846,2.268428,2.054197,6.502402,-9.881679,-2.485899,-7.463055,2.895832,-4.948034,-8.948438,6.972479,-5.707401,9.063875,-0.935911,-2.920560,-5.922047,-3.454867,4.101906,-5.475523,-0.693245,-0.886109,2.798049,7.471100,-0.651960,-4.476526,-7.213437,4.763488,8.295238,3.345936,-3.671880,5.663442,-2.868145,9.847637,8.249876,7.322480,-4.848462,-2.378095,-1.338375,-7.387533,6.495048,2.561940,9.411840,-6.722375,4.959971,-6.396446,-6.043369,-8.688083,9.408839,-3.349242,2.091031,-1.020006,3.720837,7.772712,0.759227,5.535056,-7.291715,-3.738617,5.324611,-4.498273,8.950884,6.097777,-4.255224,-9.797552,8.821958,4.178500,-9.735235,-1.639447,-7.721011,2.317127,-9.950679,9.420476,7.849899,-0.907548,-6.467391,7.395766,9.800338,6.620045,2.986734,1.365131,4.424655,0.232303,-9.507731,1.412686,-9.536923,-2.945252,1.942651,8.474008,-2.700940,-5.887842,1.695424,-6.388998,-8.784224,-6.953440,4.622283,-9.703552,-9.029005,5.467903,3.134993,-2.493342,9.964164,-8.708926,-3.152207,-2.701519,5.123685,5.750138,-3.544569,4.183207,-5.258187,-3.370474,1.087568,-9.958650,3.491314,9.297880,-5.419195,-6.342611,-4.501037,5.238192,-0.044588,1.652742,-3.421124,-4.829831,-7.703991,9.411364,-3.099155,0.911733,-8.988713,4.800906,4.553488,-2.657663,-2.177501,0.185814,-0.404773,6.206570,-8.120496,-1.899989,-2.344021,-6.987138,4.110001,9.524972,2.863504,2.560728,-7.167642,9.237742,4.361117,2.377406,-9.277888,5.177055,1.622952,-5.097371,4.820598,-5.144143,1.482711,6.964985,-4.040640,-0.341082,6.002457,0.700826,4.418546,3.881972,7.541485,-8.538531,8.933378,-0.393982,3.477652,3.031631,4.798564,-0.142563,-0.863383,4.924161,-9.452200,-9.408990,-1.984685,2.281994,0.838916,-5.639953,9.852673,-4.098827,-1.590054,-0.518772,4.337227,3.200877,7.718248,-3.495278,6.733796,7.573037,3.969780,7.509851,2.508231,7.303863,1.606969,1.841888,3.855320,6.741264,-3.281938,2.816606,2.813020,9.606730,-3.971348,-7.202854,2.873639,4.547847,-6.833933,-3.612036,7.326464,-9.359810,-4.188094,7.401267,4.887190,8.914653,-7.444490,-6.860129,5.204474,0.678482,5.471602,3.729500,7.271037,7.652771,6.422718,6.798577,-9.853922,7.545405,-1.704187,-8.980136,-6.017788,5.237883,-7.576160,-6.135001,1.472896,6.471547,-9.876792,-4.887343,8.247611,6.577746,6.600740,5.696534,-0.493000,-2.412521,1.424396,-3.421076,2.782085,0.587545,7.715935,3.687760,1.296956,7.401659,-7.676280,9.406936,-9.217291,-9.475655,7.646157,6.798547,9.675647,-1.189903,-4.257936,-7.609015,1.018448,5.311884,7.361860,9.726290,0.177104,-3.109318,-9.835214,8.502388,-1.028424,0.918515,2.367686,8.506373,-4.553792,4.661646,5.630552,-6.969538,9.557881,7.243211,6.813608,4.799495,-3.092654,-8.633239,7.513171,5.194736,1.142383,-3.397613,3.570908,7.019317,9.005086,-5.904053,-0.256611,6.366643,-9.948815,1.259986,-3.330475,-5.634483,-6.455888,8.034008,-6.190852,-8.533404,3.704493,-5.008730,-3.375359,7.107545,-3.270166,-6.442955,-6.696424,6.152119,5.773385,-3.681652,0.760407,-2.956123,5.034849,-5.772955,-9.436258,-6.271836,3.360316,-6.936369,-5.646819,8.857441,4.807768,-3.082963,-7.889940,-7.303038,-7.238810,0.085297,5.363080,4.252506,4.371743,-5.313336,-1.683242,-6.020530,8.711037,-0.796665,-0.799650,-0.440918,3.088449,4.942507,-9.608484,2.607485,4.106864,8.144734,-8.168161,8.612356,-1.705766,7.780840,-9.904850,-6.840685,-4.733217,-4.634266,-4.714371,-5.635547,9.374119,3.606657,2.457089,-9.110248,1.696847,2.924678,-0.300640,-8.057792,-5.805702,-1.480547,9.312505,-6.425176,2.176897,-1.044253,-9.594984,4.394667,-0.467749,6.851572,-3.699123,-8.594661,4.353510,4.014691,6.792082,-3.208766,-7.581817,-0.913931,7.378485,5.151238,3.459344,3.772460,3.594447,7.016876,6.527481,1.999782,-9.674578,-8.348362,-3.415372,-8.106058,0.331600,8.898048,2.544031,7.653926,7.554661,9.342797,-9.505066,-9.286395,4.583864,3.790982,-6.300919,-5.998491,1.570219,0.067594,1.934757,5.732647,-7.267102,-3.410989,-1.268462,3.980254,-5.427892,9.470832,9.792415,-0.632282,7.127247,8.412488,1.639766,5.313113,-2.891763,-4.329960,-2.493020,-4.161899,-6.841764,-7.313823,-3.298227,-3.384983,-7.021916,8.964230,2.912237,-0.571630,-4.509425,6.291102,-5.026901,-4.761420,4.200249,-2.260176,-7.130613,-1.071312,9.714750,5.691977,-2.333725,-2.819936,4.667272,-6.018154,-6.556743,-3.480647,0.109952,-2.045289,-8.194128,-9.692053,8.371469,4.953704,-8.406298,-7.950870,-5.644544,9.724403,-8.165073,2.685364,-9.025738,-0.649657,-3.236992,0.737485,-7.341519,6.334256,-5.302239,-7.077339,-7.296349,1.482021,-9.026683,-0.049840,0.128637,3.180807,-1.672666,-1.243608,8.877936,2.418198,4.009046,3.848406,-6.372051,-3.065934,-4.472351,-4.076705,-8.244632,8.961818,8.435340,9.932364,-1.944711,-3.750718,1.773487,9.326671,-1.756318,-0.561052,0.232154,9.829746,9.709620,-3.280753,0.395998,-3.358266,-2.753175,-1.376485,-1.067904,-9.862342,-9.925790,9.589350,3.732904,-4.135243,8.549927,3.330242,-3.262093,-2.195772,-6.976022,-8.050601,7.208917,7.819030,-8.576137,8.283686,1.707659,0.757745,4.157023,8.467785,7.367835,-1.740057,0.913835,1.944113,-3.856315,6.432007,-4.480318,-6.991054,-7.209976,6.433722,6.587015,6.136668,1.135736,5.164025,4.490490,0.683294,-3.899024,7.480832,-1.531395,-3.214810,-4.416774,8.097478,6.763943,-4.981923,-9.596676,-2.229413,5.732967,-8.117367,1.347760,0.087890,3.268042,2.105355,-2.912520,4.835924,-3.739756,8.789019,7.867027,4.499185,5.478092,-2.733185,-8.416540,1.096278,5.485140,-0.893002,2.909690,3.313688,-0.079145,3.026988,-8.768941,2.761585,-2.572344,5.866854,-5.116836,-8.360080,3.190076,4.390937,6.446235,3.465668,-3.738810,0.626083,7.747282,-5.927506,-5.879621,-1.040772,-5.095219,4.816585,-5.767341,-6.169133,5.503203,-8.673849,-2.727686,-9.453817,4.401050,-0.066902,7.826646,1.080122,-6.341718,6.519487,1.969911,7.990737,5.635047,-3.357737,-4.502139,-4.442989,7.242681,-4.442235,-8.402013,-1.731986,-3.072377,-2.481502,-8.131700,-8.653174,3.845156,7.684930,3.289586,1.284416,5.937801,-4.858689,-8.936719,-8.684353,-8.631963,4.584488,3.951359,-3.898119,-7.493692,-2.118133,-1.476123,-6.115459,-5.202761,9.133564,-2.278927,-4.304711,-1.313113,2.808916,-3.351013,6.729711,-4.115906,0.939310,-3.760664,1.277507,-6.661764,1.529031,-2.628420,2.281252,-9.308329,-5.219104,0.745728,-2.310004,-9.415973,-1.305286,5.520225,6.805823,8.817158,-1.415944,-7.211841,-0.984415,7.589849,6.731769,8.028979,-1.201888,9.593771,4.680609,9.615543,2.117535,5.583942,-5.347738,4.290706,0.084099,8.820831,-8.996773,0.175350,-9.426981,-4.066083,0.470627,-2.180502,8.720947,-1.569330,-2.765008,5.997379,9.296118,-4.184073,3.560160,6.214770,-5.651287,-4.368502,-3.412558,4.648713,-2.391661,0.752419,-7.785213,0.394931,8.182570,-2.586723,-2.667007,4.504279,-5.227512,8.203121,8.213415,-9.838199,3.256837,-5.281004,1.202537,0.112414,-2.016368,0.113086,-7.310471,-0.376055,-1.447544,-3.809798,-0.358645,8.132528,1.566245,9.271332,9.929675,-7.174147,-7.677211,7.043885,-3.704321,-5.256363,6.764354,5.819491,-4.061308,8.228618,-5.149905,8.591618,-9.668795,-5.670204,-9.525693,-7.381646,3.292402,-2.173114,-4.045887,6.498930,-8.325217,5.405011,2.897777,-5.449003,-8.903844,2.168089,3.238451,-5.224320,2.672241,9.581980,-3.023698,0.627325,-7.789660,6.529732,7.035480,5.689436,-9.986171,7.794004,-9.009998,-0.704241,-3.438431,9.859515,-4.568296,4.499042,-8.161434,9.343538,-7.066555,6.596793,5.104715,3.158463,6.970482,-4.043499,7.889395,-3.396988,9.799550,9.735234,-4.763640,3.837967,-5.556378,-9.582854,4.059994,8.404505,-1.183867,-5.963244,9.755199,6.350473,8.459980,8.392108,8.426690,-0.075180,-3.653843,-5.640757,-3.082407,4.754467,-0.133183,-9.660301,-6.228767,-9.907454,-4.448595,-3.014886,-7.600240,-3.807445,4.939896,3.392278,6.493145,-8.823040,3.576195,-7.270703,-1.171481,-1.239700,2.634491,0.514622,-1.563451,6.726516,-6.221484,-1.790693,5.498038,-3.623844,-6.430411,4.441653,1.558833,7.762600,2.327837,5.914434,-4.105950,-8.993907,-1.647941,6.037508,9.922506,4.920562,-7.749220,5.679715,-1.782257,-8.879397,7.733544,6.706971,7.193518,9.997838,-7.698018,4.144927,-4.288165,1.781566,8.310688,9.339442,5.214567,-3.113669,-4.400936,8.612122,-6.367207,-3.317206,3.384688,-1.230924,-8.202005,2.938319]], dtype = "float64")#candidate|8124|(1, 1568)|const|float64
call_8123 = relay.TupleGetItem(func_64_call(relay.reshape(const_8124.astype('float64'), [14, 16, 7])), 0)
call_8125 = relay.TupleGetItem(func_67_call(relay.reshape(const_8124.astype('float64'), [14, 16, 7])), 0)
bop_8152 = relay.multiply(const_8124.astype('uint8'), relay.reshape(call_8123.astype('uint8'), relay.shape_of(const_8124))) # shape=(1, 1568)
bop_8155 = relay.multiply(const_8124.astype('uint8'), relay.reshape(call_8125.astype('uint8'), relay.shape_of(const_8124))) # shape=(1, 1568)
func_7193_call = mod.get_global_var('func_7193')
func_7195_call = mutated_mod.get_global_var('func_7195')
call_8157 = relay.TupleGetItem(func_7193_call(), 0)
call_8158 = relay.TupleGetItem(func_7195_call(), 0)
output = relay.Tuple([call_8111,bop_8152,call_8157,])
output2 = relay.Tuple([call_8112,bop_8155,call_8158,])
func_8165 = relay.Function([], output)
mod['func_8165'] = func_8165
mod = relay.transform.InferType()(mod)
mutated_mod['func_8165'] = func_8165
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8165_call = mutated_mod.get_global_var('func_8165')
call_8166 = func_8165_call()
output = call_8166
func_8167 = relay.Function([], output)
mutated_mod['func_8167'] = func_8167
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8235 = relay.var("var_8235", dtype = "uint16", shape = ())#candidate|8235|()|var|uint16
const_8236 = relay.const([[[-4,-5,-4,5,-6,-5,-8,3,2,-6,-3,-9],[2,-8,2,8,-7,-1,3,-9,8,3,-4,4],[2,-4,6,-6,7,-3,-1,2,-6,-9,8,10],[-1,6,7,-1,9,4,1,8,-3,4,3,-2],[-3,-8,10,-9,-10,6,4,-8,3,10,3,3],[-8,10,4,-8,4,8,-3,4,-3,-3,-10,-9],[5,8,-5,6,7,-3,-7,-10,7,4,6,-3],[10,7,9,2,5,-3,-2,-4,-2,-2,9,9],[-1,-6,-3,-9,7,5,-1,-9,7,-9,-9,-8],[1,2,-5,8,6,-6,-6,-5,8,-6,-7,7],[5,2,8,-6,3,1,-9,-3,-6,5,1,-3],[-10,-10,-6,-10,3,-6,4,-2,-10,-3,3,-3],[5,8,-9,-9,-4,3,-7,2,5,-1,-9,-5],[5,7,8,-6,9,-10,-7,-9,-7,-10,7,4]],[[-9,2,7,9,7,-1,-6,-7,1,7,-6,10],[9,6,3,8,5,9,7,-4,-4,1,-2,-8],[6,2,10,-5,-3,6,1,5,4,-7,-4,9],[-8,7,-1,-2,10,10,7,10,-4,-3,10,10],[3,-7,8,4,-8,-3,-8,5,10,-8,9,-6],[-4,-8,8,8,-5,10,-3,-9,-9,-8,-9,5],[-6,-8,-10,-8,3,9,-7,-5,-2,-6,-1,-3],[-9,-5,4,10,4,-5,-2,9,10,-7,4,9],[-6,10,10,-8,-6,9,-5,-8,-7,-3,7,-6],[-9,3,-6,-1,9,-2,7,-10,-4,-1,-8,-8],[-3,7,5,8,-8,-7,-5,-9,-10,-5,-2,9],[6,5,-2,-10,-5,6,2,-4,-5,5,1,-6],[6,9,-6,1,8,-5,-10,5,4,5,-5,6],[-10,-10,4,2,-7,7,-9,5,-6,-10,-7,-4]],[[-8,9,-6,1,-6,8,7,10,-1,7,-7,9],[-5,2,6,7,2,5,-8,7,9,4,5,2],[-4,8,-3,7,-8,2,-2,5,-4,6,-9,8],[6,6,9,-9,-6,4,-4,9,-7,-3,1,-7],[-10,-1,-3,9,-4,-3,2,5,9,-9,-10,4],[-9,-8,-6,-7,7,-7,8,2,-2,2,8,-4],[-7,-9,-1,-4,-1,1,9,-4,-6,7,-9,-4],[5,-5,-5,8,-1,-9,-2,-3,7,-10,1,-1],[7,3,-6,-8,-4,3,-3,-1,10,7,5,4],[-5,8,-8,-5,6,2,-6,2,3,-1,-6,1],[4,-7,9,1,-6,1,8,9,-5,-6,9,-3],[5,9,6,-9,-9,1,10,1,1,-9,10,-2],[7,8,-8,-8,-4,-8,8,-3,6,4,-6,-3],[9,-5,-8,-3,-5,-10,-1,9,9,8,-5,-4]],[[-6,6,-5,8,-10,2,8,-2,-8,7,5,7],[-3,9,7,-6,2,-3,-2,-1,-4,10,-2,-6],[-7,2,-8,3,-3,9,6,10,-9,6,-6,2],[4,1,-4,-6,9,-2,6,-10,8,6,-3,3],[-1,-3,-8,6,-9,-5,1,6,1,9,-3,-4],[-6,-6,-9,3,8,9,-3,7,2,-6,5,-5],[10,-2,2,-2,10,-9,7,-1,10,-2,-4,4],[2,1,2,4,1,-2,5,3,-4,-4,-6,7],[-4,-10,7,-6,-6,6,4,-9,-7,-8,-9,-6],[5,3,5,-9,8,-9,3,-5,4,-6,-3,-3],[-10,-5,-4,-3,2,-2,5,-8,-1,1,2,-5],[-9,-7,10,5,1,-10,-2,5,8,-1,-7,7],[3,3,5,-6,-1,-7,10,-8,3,-7,-10,6],[-10,-10,-3,-6,-8,-6,7,5,2,8,5,5]],[[3,-2,-6,10,3,-2,10,5,-7,8,2,3],[-9,-5,6,-4,-4,3,-3,6,6,6,-6,-1],[-3,-10,-6,6,5,-10,3,-1,8,-9,-10,1],[-4,9,8,-6,2,-6,10,-2,3,-5,5,5],[1,-6,-8,-6,-4,4,-8,-2,6,-7,-10,-1],[-2,-1,-4,2,-10,-8,-7,-1,-1,2,-5,8],[-4,8,-5,-9,7,3,4,-7,-6,-3,9,-4],[10,8,4,-7,-2,-2,-5,-1,1,-2,-9,-1],[5,-8,9,7,-9,5,2,10,8,-10,-5,3],[-4,10,7,-8,5,-9,7,-4,-2,10,2,9],[-3,2,9,-3,2,6,-5,2,-2,6,8,8],[10,5,9,1,2,-10,-9,-3,6,-10,8,3],[-4,1,-9,-5,8,-3,5,-9,-9,9,-3,1],[-4,2,-5,-1,-2,-3,3,1,8,-8,-2,-2]],[[-7,-9,3,-10,2,-8,5,-6,-4,-9,6,8],[-8,7,-3,-8,-7,-1,-8,-7,10,-7,-7,-3],[9,9,6,9,6,-3,-4,1,10,4,-2,-2],[6,-9,-10,5,-6,7,4,5,4,10,9,-1],[-3,10,-6,10,-2,7,1,3,6,9,-10,9],[2,-3,-3,3,9,-3,-8,9,2,-1,-7,10],[8,5,-6,1,-6,-3,7,6,1,-3,4,8],[7,9,-6,9,-8,2,-1,-4,-5,7,-2,10],[-4,-2,-6,-4,-2,8,2,3,-4,-6,6,-5],[4,5,-6,-9,9,-1,-2,9,-6,1,6,7],[-7,-8,-2,5,4,-2,-8,-3,2,1,6,7],[9,-1,-2,-5,-1,3,6,9,-2,10,-2,5],[4,-10,-10,-4,5,-1,4,-5,1,-8,7,-6],[-8,7,9,6,1,-6,2,-9,-7,-3,8,-6]],[[7,-5,1,3,8,-1,-5,-10,4,-7,-10,-5],[-7,-8,8,4,-9,-2,-8,2,-7,3,-10,8],[1,-2,2,-7,-6,3,-10,1,-6,2,8,-2],[-6,4,-9,2,10,2,1,-2,-6,-3,2,8],[5,-3,-3,-7,-9,-7,-5,-8,-2,6,10,2],[-3,-2,7,4,-9,6,-2,-1,5,-9,6,3],[8,1,7,5,8,-8,9,-10,1,-10,-10,3],[-10,4,-10,4,-8,7,10,-9,1,-5,1,1],[-3,2,4,7,-8,10,1,5,2,-7,5,-3],[5,-9,5,-6,-10,2,-6,8,1,1,3,-1],[9,9,6,-10,-2,-7,8,-5,-4,4,7,1],[9,10,-7,7,9,-9,8,7,-10,-6,8,9],[-10,1,5,5,-5,8,-4,-9,10,1,9,9],[4,10,-9,-3,1,6,5,2,6,3,4,4]],[[-10,-4,-5,-8,8,-9,6,8,8,-7,-7,5],[8,1,10,8,2,-8,-4,-4,-6,-1,-6,2],[-5,9,8,3,-1,-8,2,10,-7,-1,-9,-7],[-9,-7,-9,9,10,6,-1,3,-5,-3,-8,-3],[5,10,-10,-9,7,-1,7,-10,9,6,-9,2],[-2,3,7,-9,-1,-6,-5,-9,3,9,-2,-8],[9,1,-2,1,7,8,-1,8,-5,4,-1,4],[-3,-3,-4,-7,4,-2,-4,-2,7,7,-6,-2],[1,-3,-9,8,10,10,-4,-8,7,-5,-2,-2],[-7,-1,-5,-4,-10,-1,-1,-2,2,-6,9,5],[5,10,6,-10,-2,6,3,6,-4,-4,-7,8],[8,-6,-10,-6,-10,6,-8,-9,-5,-10,4,4],[4,-4,4,-2,8,3,8,4,-6,4,-5,8],[9,-2,5,-2,4,2,10,2,4,5,-5,-2]],[[9,8,-10,-8,4,3,-4,8,10,5,8,7],[1,7,-3,8,4,8,10,-4,-5,-4,1,8],[6,3,-1,7,4,-9,-1,-1,-2,-3,-6,-9],[-2,-2,8,4,3,7,10,7,6,-1,2,-3],[10,9,1,-6,4,7,8,-4,-3,-3,3,-4],[-6,5,6,4,-4,-5,4,9,9,-8,1,8],[-4,-4,-2,5,5,8,8,1,-7,-6,-8,-9],[-4,6,10,9,6,1,4,-6,8,2,7,7],[-8,7,1,-4,2,2,3,-7,7,-7,-6,9],[8,-9,5,-9,2,-2,9,-7,6,-6,-1,8],[-3,-8,-9,-10,-10,-9,6,9,-1,10,-7,-4],[6,-1,-3,4,5,4,9,-8,4,4,-5,-9],[-6,-8,-5,5,2,-10,-7,10,6,-6,9,-4],[3,-6,-2,5,-1,-10,-5,10,5,2,-6,-5]],[[-8,9,-7,4,-4,-8,-3,-6,-8,-3,-3,10],[-4,-1,-7,-7,7,4,-1,-6,7,3,9,-6],[-6,-9,5,9,2,-2,-6,3,6,-9,-6,-2],[-9,4,-4,4,-3,-1,4,10,9,6,2,9],[7,-5,-5,7,-3,3,-5,-7,1,7,-7,-3],[10,2,-9,7,8,-8,-10,6,-7,-9,7,-1],[4,-4,-4,5,-6,-5,7,10,6,10,-4,9],[7,-4,-4,3,-10,8,3,9,2,4,-7,-7],[-4,-1,5,-10,8,7,8,1,-6,-3,4,-2],[-7,6,-3,-9,9,-7,-7,-7,2,8,-5,-5],[10,3,1,2,2,-2,-2,3,-8,-6,-7,2],[8,-7,-1,-3,4,8,-1,-1,-10,-7,-1,-6],[1,6,6,7,-9,6,-9,-2,-6,6,3,-8],[2,5,-8,-4,2,4,7,-1,-6,-6,-9,7]]], dtype = "uint16")#candidate|8236|(10, 14, 12)|const|uint16
bop_8237 = relay.not_equal(var_8235.astype('bool'), const_8236.astype('bool')) # shape=(10, 14, 12)
const_8244 = relay.const([[[True,False,True,True,False,True,True,False,True,True,True,True],[True,True,True,False,True,False,True,True,True,True,False,True],[True,True,True,False,True,False,False,False,False,False,True,False],[True,True,False,True,False,False,False,True,True,True,False,False],[True,True,True,True,False,True,False,True,False,True,True,True],[True,False,True,False,False,True,False,True,False,True,False,False],[True,False,False,False,True,False,False,True,True,False,False,False],[True,False,True,False,True,True,True,False,True,True,False,True],[False,True,False,False,False,True,False,True,True,False,True,True],[False,True,False,False,True,False,False,True,False,True,True,True],[False,False,True,True,True,False,False,True,True,True,True,True],[False,False,False,True,False,True,False,True,False,False,True,False],[False,True,True,False,False,False,True,True,False,True,False,False],[True,True,True,False,False,True,True,False,True,True,True,True]],[[False,False,False,False,False,True,False,True,False,True,True,True],[True,True,False,False,False,False,False,True,True,True,True,True],[False,False,True,True,True,True,True,True,True,True,True,True],[True,False,False,True,True,False,False,True,True,False,True,True],[True,True,False,False,False,True,False,True,True,True,False,False],[False,True,True,True,True,False,True,False,False,True,True,False],[True,False,True,False,False,False,True,True,True,True,False,True],[False,False,False,True,True,True,True,False,False,False,True,True],[True,False,True,True,False,True,True,True,True,False,False,True],[False,True,True,True,True,True,True,True,True,True,True,False],[False,False,False,True,True,False,False,False,False,False,True,False],[True,True,False,False,True,False,True,False,True,False,True,False],[True,False,False,False,False,True,True,False,True,True,True,False],[True,False,False,False,False,False,False,True,True,False,True,False]],[[False,False,False,False,True,False,False,False,False,False,True,False],[True,False,True,True,True,False,True,True,False,False,True,False],[False,True,True,True,False,False,True,False,True,False,False,False],[False,True,False,False,True,True,True,True,True,False,False,True],[False,True,False,True,True,True,True,True,False,True,False,False],[True,False,True,False,False,True,False,False,False,True,False,False],[False,True,True,False,True,True,True,False,False,True,True,False],[False,False,True,False,True,False,True,True,False,False,True,False],[True,False,False,False,True,False,False,True,False,True,True,True],[False,False,True,False,True,False,False,True,True,False,False,False],[False,True,True,False,True,True,False,False,True,False,False,False],[False,False,True,False,True,True,False,True,True,True,False,True],[False,False,False,True,False,False,True,False,True,True,False,False],[False,False,True,True,False,True,True,True,False,False,True,True]],[[True,True,True,True,True,True,False,True,True,False,False,False],[True,True,False,False,False,True,True,False,True,False,True,False],[True,False,True,True,True,False,True,False,False,False,True,True],[True,True,False,False,False,False,False,True,True,True,True,False],[False,False,False,True,False,False,True,False,False,False,True,True],[True,False,False,True,False,True,False,True,True,False,False,True],[False,False,False,True,True,True,True,True,False,False,True,False],[False,False,False,False,True,False,False,False,False,False,True,True],[True,True,False,False,True,False,True,True,True,True,False,False],[True,False,False,True,False,True,True,False,True,False,False,False],[False,False,False,False,False,True,True,False,False,False,False,True],[False,False,False,True,True,True,False,False,True,False,True,True],[True,True,True,False,True,True,True,True,False,True,True,False],[True,True,False,True,True,True,True,True,True,True,True,False]],[[False,True,True,True,True,False,False,False,True,True,False,False],[True,True,True,True,True,True,True,False,False,False,True,True],[True,False,False,False,False,True,False,False,False,True,False,True],[False,False,True,True,False,False,False,True,True,True,False,False],[False,True,False,False,True,False,True,False,False,False,False,False],[True,True,True,False,False,True,True,False,True,True,False,True],[True,False,False,False,True,False,True,False,False,True,False,True],[True,False,False,False,False,False,False,True,True,True,True,False],[False,True,False,False,False,False,True,True,False,False,True,False],[False,False,False,False,False,False,False,True,False,False,True,False],[False,False,False,False,True,True,False,False,False,False,False,False],[True,True,True,True,True,True,True,False,True,True,False,True],[False,False,True,False,False,False,True,True,False,True,True,False],[False,True,False,True,True,False,True,False,True,True,False,True]],[[False,True,True,True,True,True,True,True,False,False,True,False],[False,False,True,True,True,False,True,False,True,True,True,True],[True,False,True,False,True,True,True,True,True,False,True,False],[False,False,True,False,False,False,False,False,True,False,True,False],[False,False,False,False,True,True,True,False,False,False,True,True],[False,False,True,True,True,False,True,True,False,False,True,False],[False,True,False,True,True,False,False,False,False,False,False,False],[False,True,False,False,True,True,True,True,False,False,False,True],[False,True,False,False,True,True,False,False,False,True,True,False],[True,True,False,True,False,False,True,False,True,False,False,False],[True,True,False,True,False,False,False,False,False,False,True,True],[True,True,True,False,False,True,False,True,False,False,True,False],[False,False,False,True,False,False,True,False,False,True,True,False],[False,False,False,False,False,True,True,False,True,True,False,True]],[[False,False,True,False,False,False,True,False,False,True,True,True],[False,False,True,False,False,False,False,False,False,False,False,True],[False,True,True,True,False,True,False,False,True,True,True,True],[True,False,True,False,True,False,True,True,False,False,True,False],[False,True,False,True,False,False,False,False,False,True,True,False],[False,True,True,True,True,False,False,False,False,True,False,True],[True,True,True,True,True,False,False,False,False,False,True,False],[True,True,False,True,False,True,True,False,False,False,True,True],[False,True,False,False,False,False,False,True,False,True,False,True],[True,False,True,True,True,False,True,False,True,True,True,True],[False,False,True,True,True,False,False,True,True,False,False,True],[True,False,False,True,True,True,False,False,True,False,False,False],[False,True,False,False,True,True,True,True,False,True,False,True],[True,True,False,True,True,False,False,False,False,True,True,True]],[[False,False,False,True,False,False,False,False,True,False,False,False],[False,False,False,False,True,False,True,False,True,True,True,True],[False,False,True,False,True,True,False,True,True,False,False,True],[False,False,True,True,True,False,False,True,False,False,True,True],[False,False,True,False,True,True,True,True,True,False,False,False],[True,False,True,False,False,True,True,False,False,True,True,True],[True,True,False,True,True,True,False,False,True,True,False,False],[False,True,False,True,True,False,True,True,False,False,True,False],[False,True,False,False,False,True,True,True,True,True,False,False],[False,False,False,True,True,False,True,False,True,True,True,True],[True,True,False,True,True,True,True,True,False,True,True,False],[True,False,True,False,True,True,False,True,True,True,False,True],[True,False,True,True,True,False,False,True,True,False,False,True],[True,False,False,False,True,False,False,False,False,False,False,False]],[[True,True,True,True,False,False,False,True,False,True,False,True],[True,False,False,True,False,True,False,False,True,False,False,False],[False,False,True,True,False,True,True,False,False,False,True,False],[False,True,False,False,False,False,False,True,True,False,False,True],[True,False,True,False,True,True,True,True,False,False,False,False],[True,True,False,False,False,True,False,False,False,False,True,False],[True,True,False,False,True,False,True,True,True,True,True,False],[False,False,True,False,False,False,True,False,True,True,False,True],[True,False,False,True,True,True,False,False,False,False,False,True],[False,True,False,True,False,False,True,True,False,True,True,True],[True,False,True,False,False,True,False,True,True,False,False,False],[True,False,False,True,False,False,False,True,False,True,False,False],[True,False,True,True,True,True,False,False,True,True,False,True],[False,False,False,False,False,True,False,True,True,True,False,False]],[[True,True,True,True,False,True,False,True,True,True,False,False],[False,True,False,False,False,True,True,True,True,False,True,False],[True,True,True,False,False,False,False,False,True,True,True,True],[True,True,False,False,True,False,True,True,True,True,True,False],[False,True,True,False,True,False,False,False,True,True,False,False],[True,True,False,False,False,True,True,True,True,True,False,False],[False,True,True,True,False,True,True,True,False,False,True,True],[False,True,True,False,False,True,False,False,False,False,False,True],[True,False,False,False,True,False,False,True,True,False,True,False],[True,False,True,True,True,False,False,True,True,True,True,True],[False,True,True,True,True,False,False,True,False,False,True,True],[True,False,True,False,False,False,False,True,False,True,False,True],[True,False,True,False,True,False,False,True,False,True,False,True],[True,False,False,True,True,False,True,False,False,False,False,False]]], dtype = "bool")#candidate|8244|(10, 14, 12)|const|bool
bop_8245 = relay.divide(bop_8237.astype('float64'), relay.reshape(const_8244.astype('float64'), relay.shape_of(bop_8237))) # shape=(10, 14, 12)
output = bop_8245
output2 = bop_8245
func_8250 = relay.Function([var_8235,], output)
mod['func_8250'] = func_8250
mod = relay.transform.InferType()(mod)
var_8251 = relay.var("var_8251", dtype = "uint16", shape = ())#candidate|8251|()|var|uint16
output = func_8250(var_8251)
func_8252 = relay.Function([var_8251], output)
mutated_mod['func_8252'] = func_8252
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6041_call = mod.get_global_var('func_6041')
func_6042_call = mutated_mod.get_global_var('func_6042')
call_8294 = relay.TupleGetItem(func_6041_call(), 0)
call_8295 = relay.TupleGetItem(func_6042_call(), 0)
func_6918_call = mod.get_global_var('func_6918')
func_6921_call = mutated_mod.get_global_var('func_6921')
const_8297 = relay.const([-7,-6,-9,2,-1,10,-7,-9,-10,-3,-7,-2,-10,-4,3,5,-2,4,-5,1,7,1,-4,2,-9,2,9,5,-4,-2], dtype = "int16")#candidate|8297|(30,)|const|int16
call_8296 = relay.TupleGetItem(func_6918_call(relay.reshape(const_8297.astype('int16'), [30,])), 5)
call_8298 = relay.TupleGetItem(func_6921_call(relay.reshape(const_8297.astype('int16'), [30,])), 5)
func_7384_call = mod.get_global_var('func_7384')
func_7386_call = mutated_mod.get_global_var('func_7386')
call_8315 = func_7384_call()
call_8316 = func_7384_call()
output = relay.Tuple([call_8294,call_8296,const_8297,call_8315,])
output2 = relay.Tuple([call_8295,call_8298,const_8297,call_8316,])
func_8336 = relay.Function([], output)
mod['func_8336'] = func_8336
mod = relay.transform.InferType()(mod)
output = func_8336()
func_8337 = relay.Function([], output)
mutated_mod['func_8337'] = func_8337
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8336_call = mod.get_global_var('func_8336')
func_8337_call = mutated_mod.get_global_var('func_8337')
call_8352 = relay.TupleGetItem(func_8336_call(), 0)
call_8353 = relay.TupleGetItem(func_8337_call(), 0)
output = relay.Tuple([call_8352,])
output2 = relay.Tuple([call_8353,])
func_8356 = relay.Function([], output)
mod['func_8356'] = func_8356
mod = relay.transform.InferType()(mod)
output = func_8356()
func_8357 = relay.Function([], output)
mutated_mod['func_8357'] = func_8357
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6297_call = mod.get_global_var('func_6297')
func_6298_call = mutated_mod.get_global_var('func_6298')
call_8399 = func_6297_call()
call_8400 = func_6297_call()
uop_8425 = relay.exp(call_8399.astype('float64')) # shape=(11, 15, 8)
uop_8427 = relay.exp(call_8400.astype('float64')) # shape=(11, 15, 8)
output = uop_8425
output2 = uop_8427
func_8428 = relay.Function([], output)
mod['func_8428'] = func_8428
mod = relay.transform.InferType()(mod)
mutated_mod['func_8428'] = func_8428
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8428_call = mutated_mod.get_global_var('func_8428')
call_8429 = func_8428_call()
output = call_8429
func_8430 = relay.Function([], output)
mutated_mod['func_8430'] = func_8430
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7309_call = mod.get_global_var('func_7309')
func_7311_call = mutated_mod.get_global_var('func_7311')
call_8434 = func_7309_call()
call_8435 = func_7309_call()
var_8440 = relay.var("var_8440", dtype = "float64", shape = (6, 7, 10))#candidate|8440|(6, 7, 10)|var|float64
bop_8441 = relay.add(call_8434.astype('uint64'), relay.reshape(var_8440.astype('uint64'), relay.shape_of(call_8434))) # shape=(6, 7, 10)
bop_8444 = relay.add(call_8435.astype('uint64'), relay.reshape(var_8440.astype('uint64'), relay.shape_of(call_8435))) # shape=(6, 7, 10)
func_6475_call = mod.get_global_var('func_6475')
func_6479_call = mutated_mod.get_global_var('func_6479')
var_8446 = relay.var("var_8446", dtype = "float64", shape = (2, 660))#candidate|8446|(2, 660)|var|float64
const_8447 = relay.const([[-6.315973,-1.991470,-9.268631,-5.322707,-1.954951,5.864747,-5.726333,4.414101,1.412198,-7.690172,4.711497,-9.665069,-8.632680,9.746899,-9.539853,-2.845845,-7.672950,-5.526621,6.030384,-3.339538,1.913217,-5.777694,3.090710,-9.733096,-2.122375,2.828645,8.817746,-8.636690,8.858578,-7.155459,1.481559,-8.805382,1.778884,-3.683774,4.768676,-3.064041,-0.712485,5.639354,8.939553,9.028787,-1.512180,1.466381,-8.784873,8.616459,-9.224222,-8.639019,-3.990489,0.539368,6.910108,-5.942015,-2.127186,-6.691533,3.442459,8.483209,5.636642,1.836090,6.542400,4.698108,-5.549691,4.480298,-7.437596,-2.746293,-5.001280,6.732274,8.852934,-5.047810,-1.949468,9.935925,-1.623044,-1.514508,7.001949,9.203357,8.352076,-4.058355,7.920566,-0.636244,8.489352,0.179140],[-5.915702,-5.802800,-1.981525,-2.189486,1.937761,7.020894,-3.298601,7.243245,8.708079,-6.160616,1.405836,-4.483110,-0.384604,-6.581992,9.269422,0.265216,-4.096169,3.721249,-2.681044,-7.102451,3.376360,-9.627707,2.937220,1.814274,-4.195623,9.020781,8.814497,1.316994,-9.575906,7.071650,4.554426,-6.342542,-2.740441,-3.858851,4.111177,-4.876424,-6.938108,-1.637452,-3.272877,-8.001148,1.304949,-1.240284,1.768652,-6.950653,-5.786830,6.764627,-9.274720,7.276182,-8.839616,7.203839,-7.017570,-4.118963,-4.849018,8.735859,6.599304,-8.603010,3.244060,7.793711,-8.900327,7.233854,3.895140,-6.624770,-0.037501,3.366749,7.130306,-1.847818,-1.059217,1.753676,6.897498,-1.683383,-4.957761,0.679824,9.040519,6.820403,-9.302574,-1.726721,8.705723,7.157337],[3.171664,-5.250961,7.702915,-0.793185,-4.390145,9.273607,-6.670358,-2.002267,-7.985924,7.705284,-3.256357,4.517460,4.339639,-7.711845,-5.227639,-6.241812,-0.880588,-5.712366,8.215211,-1.814906,-3.588468,2.220707,9.591605,-8.021908,6.858174,4.113645,-4.372663,-9.064304,8.787548,-2.588013,-1.811300,6.736402,-4.364314,-2.978813,-0.007583,3.721107,-3.078275,-0.884235,-8.790747,3.852160,-8.441846,4.570046,4.426938,-2.121389,-4.325365,-5.096353,3.485765,-6.003843,-9.427699,5.143364,3.665115,7.258413,3.870244,4.247895,-9.520260,8.248657,8.419249,2.530107,-7.293551,5.830415,9.778762,7.581257,9.374697,-9.658268,-3.449732,3.628677,-1.508263,-7.415645,-4.118593,5.790803,-1.053516,2.075712,5.684490,3.151667,-9.480605,-6.649735,-9.242266,-5.567718],[6.653760,5.826313,-7.518156,5.906055,-6.472504,-5.727762,6.207017,1.421876,-2.528846,-3.068754,-4.286083,6.925065,-7.429288,-4.124809,0.387406,2.324323,8.181783,-1.508268,7.495463,-5.578964,5.693208,-0.915784,-7.560625,5.230944,-1.525419,-9.685472,7.053735,2.010393,9.174722,-4.693044,-5.840052,-7.409056,2.687242,4.105600,-2.317395,-8.568825,-4.290096,4.373650,-5.843632,0.691218,-6.674940,3.378307,4.626834,9.348962,-1.620180,0.351750,0.919499,-4.458763,-7.743695,3.731760,3.469052,6.114241,-3.770025,-7.478961,4.840186,0.891555,6.244098,8.495888,4.425000,-8.284678,-6.091399,-7.494430,6.696735,-9.391509,-2.760274,-1.380842,7.272071,5.685555,-5.350283,2.129076,0.870162,4.014787,3.989188,9.866371,-6.775437,5.249267,4.401244,-1.714805],[-4.423033,3.117315,6.075553,8.883765,4.899094,-8.308317,-6.731549,2.475527,8.292273,0.795540,1.209598,9.390518,-9.671630,-8.038212,6.600901,-7.565492,-2.306992,-2.274924,4.017009,-4.311454,8.657669,6.679823,-2.577215,6.060093,4.476410,9.775206,-7.599781,-5.164022,1.610822,-8.456458,-6.020440,-9.075193,-7.964283,-3.523813,-9.289177,-6.808219,9.750100,-7.792083,-2.249527,7.887408,-7.492641,-3.477691,-3.683816,0.414650,-4.273712,-4.866228,-2.146714,6.227623,3.928899,-8.776045,-7.725462,1.567351,-2.423032,-6.065707,-1.267082,7.547559,-3.999888,2.859314,-2.198594,-7.431780,-1.297929,6.237155,3.678427,-1.850530,-1.059629,2.205722,1.533708,0.330065,-0.239860,9.364720,8.567326,1.062925,-9.167810,-5.484063,8.739552,1.754032,6.376357,-6.183745],[4.419130,-5.736754,1.095465,3.161345,-4.336752,4.843103,-2.283526,5.301439,0.910532,8.742112,2.640650,-9.601809,-5.146579,1.560372,8.112578,-7.518351,-6.881271,-1.768277,-8.565722,-3.090975,-0.702764,6.372255,-8.853065,9.287541,7.493031,-2.723264,-3.380792,9.308969,-9.164350,0.696623,-3.727707,5.447363,-8.490190,6.938446,6.196397,1.442553,5.615174,-7.102239,-3.363162,8.377145,-0.120278,-4.955341,-2.968097,7.976655,-9.372024,-7.345744,-1.379144,8.067051,-1.728776,-2.522995,3.286127,8.294888,-8.103270,-1.266749,8.598021,4.679103,2.536168,5.274691,1.416902,3.190745,6.355059,7.856841,2.541578,-5.925711,9.514742,9.987983,-2.423365,1.139454,-1.857179,8.769460,9.896194,0.049655,9.448003,-8.832343,2.857986,-0.779234,-1.828914,-6.152042],[3.921133,0.541848,2.914490,8.073721,7.649885,5.383968,-4.585398,-3.405490,8.720723,6.702619,-9.110319,3.573767,3.144654,-0.624460,5.818900,3.179959,6.617498,5.839091,1.232507,-5.418553,0.924208,-4.829625,6.947676,1.955411,-9.449657,4.183089,6.093063,-9.642012,-3.685817,-4.648553,6.443927,-0.716887,-6.457264,-3.293356,-9.914618,-1.545609,-3.151996,-5.594821,3.484584,-6.257308,-0.031683,-9.849913,-1.616021,-2.517158,8.193681,1.270406,-2.619269,8.519907,0.713301,-0.457811,5.485297,-5.882526,3.054491,2.061263,-7.690677,-2.346017,8.073522,-2.044765,2.369709,-2.762927,4.962040,1.572082,-4.374554,-1.755367,-3.840082,9.941789,-8.377213,6.731045,-0.438001,-3.063752,-1.263845,6.447153,-0.213435,-6.077638,-2.680722,-5.190202,-5.830271,3.588250],[9.522158,-4.862247,-7.985178,3.961515,2.375592,-8.354908,7.793798,6.127853,8.850755,3.873721,-2.137583,4.937093,-4.757799,1.168152,-1.945536,9.324285,-3.821111,0.797946,-2.153562,4.263986,-2.662636,7.198908,0.456675,8.632750,-1.294535,-4.792470,-2.141826,8.907254,8.214989,4.535619,-5.748303,5.750040,2.983924,4.524902,3.110378,3.824412,7.170212,2.709666,1.318207,2.004595,4.602084,8.569632,-5.293387,3.735742,7.131026,2.963308,1.717912,-7.098212,9.617072,-1.982918,4.420151,-2.356888,9.718192,3.047465,7.184156,-2.176194,-8.838295,-0.337827,-4.379351,-6.674854,0.285044,9.343285,2.399351,8.984172,-8.366524,6.075802,3.458479,-3.503445,-1.373659,-1.147545,-5.301567,-4.940417,-0.075804,3.183532,-3.348359,-4.253044,0.877212,7.356711],[2.856917,-4.028536,-9.764180,4.677193,8.536783,-1.052338,0.028916,0.354659,3.593277,-7.004058,4.046201,1.953543,-7.885427,7.935673,4.910497,-7.595665,4.182864,-8.382672,-0.240385,4.345553,4.669074,0.990210,-5.958079,5.697257,0.702057,9.845924,7.337377,-5.929561,-1.840929,-6.640435,-9.942992,0.141325,1.614297,-5.115260,9.287156,0.364020,3.282392,-5.448182,-0.126484,-6.442554,4.486475,-8.301474,-7.488928,-7.053072,-7.525223,-1.188835,0.220951,-1.102540,-5.470780,7.629199,-7.971549,-1.462005,8.229890,-5.354146,-4.197366,2.846783,-4.096295,8.423873,8.131312,-8.302167,-5.699106,-8.818169,-2.383914,-7.393095,5.418281,-6.753538,-3.821119,-6.500791,7.670771,9.849121,7.247182,-1.517800,-3.423458,-4.937762,1.609416,6.020128,0.816530,-4.358096],[-7.680201,-7.168890,-1.978364,-0.334514,-2.482373,-6.288954,8.374419,8.101400,7.649850,-6.013050,8.424698,2.693585,3.997889,-6.836851,-7.121946,-2.611793,7.990562,2.107569,-0.790051,0.655259,-5.587099,-4.688449,1.844786,-9.856511,5.504719,5.283832,1.633181,-0.681620,9.563012,8.930188,1.570828,1.247074,7.766033,-9.589451,-7.797742,-1.562315,6.354161,-4.912516,-9.901764,0.596008,2.321179,8.299653,2.721583,-0.414564,-6.507471,1.444306,0.328167,2.038055,4.786228,-2.471114,2.381959,-1.035851,-2.878427,5.080403,1.831536,-4.863048,5.317069,2.624377,7.870730,-6.102498,8.472358,2.953816,-5.681939,4.964066,-9.010829,4.647593,-2.356102,1.275762,-7.195253,-4.868842,1.933780,-2.235886,-6.879692,-0.726190,4.266053,2.276320,-3.170077,-1.483819],[3.979897,-9.742367,8.868206,9.260419,2.064886,-7.300814,-8.461354,6.791614,-6.040686,-4.026504,5.776071,-2.584952,9.917400,2.087011,9.510915,-5.349051,-0.652103,-6.650627,-5.996274,8.247730,-8.590652,7.920104,-8.042494,9.780867,8.994569,5.214397,-1.063712,7.416001,-9.083914,7.074417,-1.957715,-7.212416,-0.186558,7.626069,8.299744,-1.599489,-3.560573,-2.863324,-1.706520,4.963679,6.225367,-2.000264,4.091008,-2.730547,-2.259217,8.122435,8.377716,5.927220,-5.615161,4.951117,-2.717565,-6.732269,0.203118,3.293140,-1.275806,1.273117,-4.539929,8.445593,-9.773603,1.438837,5.795234,0.569563,-6.576839,-1.912228,8.536797,-0.941633,2.286195,5.916398,6.307121,-9.956724,7.369433,-7.896472,2.394670,5.760251,3.031296,-8.958908,6.694922,5.721991],[3.449823,1.830241,2.577953,-5.041208,-0.869311,-8.517857,-8.676415,9.196823,-2.570668,8.261469,2.935825,8.815430,5.067650,4.768967,-1.331506,5.603370,-7.538973,-8.486503,-6.324458,-3.184459,-2.075216,6.605803,8.824386,3.065946,-4.510698,8.563599,2.718343,-7.027833,-1.047040,-3.525408,-7.304443,-9.713074,-0.529910,0.230089,0.177438,4.950870,-7.561632,8.385068,5.808894,6.934320,3.529821,8.731293,-4.958645,-9.107378,1.236048,3.376634,-2.136075,-2.435844,-5.185062,4.391951,6.735960,-9.391263,6.788039,1.625320,-6.238568,-1.500423,9.010883,-8.907484,6.501835,-7.059091,2.985687,8.418661,-1.694839,-1.309706,3.352404,-1.256244,-1.667281,-7.881910,-8.460137,-3.744789,-3.906414,1.178820,-9.585875,5.958784,-8.905558,-5.550679,1.173921,7.824420]], dtype = "float64")#candidate|8447|(12, 78)|const|float64
call_8445 = relay.TupleGetItem(func_6475_call(relay.reshape(var_8446.astype('float64'), [11, 15, 8]), relay.reshape(const_8447.astype('float64'), [936,]), ), 1)
call_8448 = relay.TupleGetItem(func_6479_call(relay.reshape(var_8446.astype('float64'), [11, 15, 8]), relay.reshape(const_8447.astype('float64'), [936,]), ), 1)
func_618_call = mod.get_global_var('func_618')
func_621_call = mutated_mod.get_global_var('func_621')
const_8455 = relay.const([-9,-5,-4,-10,-1,-6,7,-9,4,4,-2,-3,-1,-7,10,5,-3,-2,7,5,-9,10,-3,-10,8,8,-2,-5,2,7,-5,9,-3,7,5,9,-3,1,7,-2,-7,6,-5,-10,4,7,10,-9,9,4,-8,-9,3,8,1,-4,4,6,1,-4,-3,-6,9,7,-9,-1,7,9,-9,-7,-1,-9,-1,4,-10,8,-1,8,8,-7,10,6,-9,-5,-4,-9,5,9,4,9,2,-7,10,5,3,-4,2,-10,5,-9,8,-3,7,-1,5,-5,5,-2,-9,2,-8,7,-8,-1,10,1,2,-3,6,-2,-1,-8,10,3,6,5,4,4,-7,-3,4,7,10,5,-3,6,5,-4,3,-6,3,-1,-3,6,-9,-7,5,-9,5,10,2,-3,10,-1,5,10,-1,2,7,6,-7,8,-8,-6,4,10,-1,-2,10,-2,5,10,4,-1,-10,-6,9,-10,3,-7,-3,1,-10,7,-8,-5,-2,8,7,-8,6,7,-7,10,4,-7,4,4,-2,-4,-9,-3,3,10,3,-10,-3,-2,-3,-2,-2,7,6,-10,10,9,2,-2,-5,9,-10,7,-4,-4,3,-6,-3,-3,-2,-7,6,4,2,-6,-10,-7,4,4,4,6,3,4,-5,-7,7,-3,-2,4,-5,-10,-5,-5,-10,-6,-4,2,4,-3,3,8,-6,5,-10,-1,-1,-9,-8,7,1,2,8,3,2,-3,-8,4,-1,-1,2,-5,-4,1,-7,2,4,5,2,3,6,8,6,9,3,-8,1,-9,-8,-7,-9,-4,4,4,-7,-9,-1,-8,-9,4,-6,-8,-8,4,-7,10,1,-10,3,-1,1,5,7,8,-10,-1,-7,-3,-7,-10,9,2,-5,-5,4,-1,7,8,-7,1,1,4,-2,4,6,-4,5,5,6,-8,-5,7,5,6,-4,-9,-9,-4,2,10,1,2,-10,5,6,-8,4,-3,-3,-1,5,1,-3,-9,-10,-4,3,-6,-3,-10,-4,-10,-8,-7,3,7,8,-6,-2,7,-3,2,8,-10,-8,-2,1,-3,6,-9,8,8,3,-8,-6,6,9,-5,5,-10,8,-7,5,-9,2,1,-3,9,-3,-10,3,8,1,10,1,-10,1,9,1,-8,-7,6,-6,-5,-1,9,8,-7,3,8,7,-4,-7,-6,-4,-3,1,-10,-4,7,-9,-1,-4,-7,-8,-2,2,3,2,10,-2,-4,4,-4,-8,-6,-9,-3,7,-1,-4,10,-10,7,-2,5,-10,9,-2,2,5,-4,-7,7,-8,9,-1,8,-1,3,-2,7,7,5,8,7,7,8,-10,-6,-5,-10,3,10,-3,-7,-1,-6,-10,-6,-10,4,8,-9,-8,7,-1,2,5,10,-6,2,1,6,10,-10,8,-6,-5,-5,2,-8,8,-7,-3,4,5,-9,-5,8,8,4,1,2,-6,10,-8,-9,8,3,6,-5,3,-5,-8,4,2,-3,9,-10,-2,-1,1,-1,9,-2,-3,-5,-10,5,-5,5,-6,-10,-4,9,5,10,-3,4,-7,6,5,6,-2,-3,-9,-4,-7,-1,-9,8,-10,7,-1,5,9,-6,3,-8,-3,1,1,9,2,-10,-8,-2,-7,4,-9,-6,10,-3,-5,7,-1,-10,-4,10,-8,-6,9,7,-6,-5,-1,5,4,6,8,7,-2,4,5,3,-6,-2,-6,2,1,10,2,-5,3,6,-3,-3,-2,-2,-2,-2,3,-3,2,-10,7,-5,5,-5,-9,2,-4,10,1,-2,-6,-1,-8,-7,-4,-3,9,9,-8,-4,3,-3,-10,-4,-5,-6,-3,-2,-5,-9,-8,-9,-10,2,-1,7,4,-5,-2,-9,-5,10,6,-9,10,10,-10,-6,-9,10,-7,-6,-10,-7,-9,-9,-3,-4,-10,-8,1,-8,-8,5,3,9,-4,-10,7,-7,6,-1,-7,-6,8,-9,3,-9,-4,-10,10,8,4,10,-7,-8,-5,10,3,-2,1,9,-1,-4,-5,-3,-4,10,-8,1,-9,8,7,-9,5,3,-3,9,3,10,-10,4,3,-3,-6,8,-3,-1,-6,3,10,-9,-10,-8,4,4,10,-7,2,3,4,5,-8,8,-7,-7,-8,-1,-7,-5,6,4,-7,-8,-2,-9,2,6,2,-6,-6,7,9,6,8,6,3,9,-2,-1,8,1,-5,2,2,8,10,1,7,7,1,9,-5,1,7,-2,-1,-5,-1,-6,4,10,-1,-7,-10,-4,-10,-2,3,-2,5,-5,6,-7,-8,9,-6,8,-10,8,1,-9,-4,8,4,8,-4,8,-3,-7,7,-3,-3,-4,7,-10,-1,3,-10,3,-1,-5,-1,4,-9,5,5,1,-10,-10,7,7,-1,-3,9,6,6,4,-4,1,7,1,5,-1,-7,10,-1,1,-7,-4,10,-8,-3,4,-1,3,5,2,-4,-3,-4,-6,-9,-8,3,5,-5,-10,5,6,-2,-6,10,7,2,6,2,-10,1,9,3,-7,-5,7,-4,-8,9,-3,1,-5,-9,-9,-5,2,-1,9,-5,2,-5,1,-1,6,-2,-1,1,6,-8,-9,-5,10,3,8,8,-9,-1,2,9,4,-7,4,4,7,6,7,-8,5,-8,9,-5,9,-9,9,-7,9,1,-1,3,7,4,1,10,-3,-9,2,-1,3,10,-9,-7,2,-2,-1,2,6,-9,-10,-3,7,7,9,10,9,-1,8,5,-6,-6,-3,4,-6,6,-3,-1,2,-10,8,-10,2,5,1,-4,8,1,-10,-3,-7,-2,-8,1,-3,-9,-2,9,-2,6,6,-8,1,8,-6,6,9,-4,-5,7,5,-10,-6,-1,-5,2,10,-8,1,10,8,-1,-8,-2,-1,2,4,4,-10,8,3,-7,-10,-4,2,8,-2,4,5,2,6,3,7,-10,2,4,-8,10,5,-10,-8,6,-9,-9,-8,-2,6,-4,3,-1,4,2,-6,9,-4,10,-7,-3,7,-3,-4,1,2,-4,1,-10,1,-6,-2,-8,-4,-2,5,9,7,10,9,-5,7,6,7,3,-7,2,-6,10,1,2,5,-9,-5,6,-8,-5,-10,-5,6,-4,-8,4,9,3,4,-5,9,3,-10,-8,-10,5,1,-9,-9,9,9,1,-7,-7,2,-10,-5,4,2,8,-2,-1,5,1,-3,1,-6,-2,-9,-4,3,3,-6,5,-1,-9,-6,-10,-10,-6,1,-5,-2,-8,7,3,5,-10,-6,-1,10,2,10,-8,10,5,3,-8,8,5,9,5,-7,7,2,10,7,9,-1,10,-10,5,-5,-8,3,8,5,-8,-10,6,2,-5,8,-8,2,-2,-3,8,4,-2,-1,-8,4,1,-10,10,-2,1,-1,-1,-9,5,-2,1,-9,2,3,-8,-4,3,-3,6,-7,5,7,1,9,-9,7,8,5,5,7,-5,2,5,-10,-1,7,7,4,-2,-3,5,-5,5,-10,-7,6,8,-1,-1,3,10,-2,3,-4,-8,-8,-7,5,-2,-4,1,-1,6,-1,5,-3,-3,-3,-8,3,-3,8,-3,-4,7,6,-8,7,10,-2,-4,-9,7,-5,-8,10,9,-3,-10,-9,-7,-5,3,6,1,-6,3,4,-5,7,-7,-7,5,-3,9,2,-9,8,8,-3,3,8,7,8,-2,7,1,8,-4,-1,-4,-8,1,-5,1,9,-9,2,10,-8,-4,-2,9,-1,10,5,-6,-7,8,-5,1,-4,5,-8,5,-5,-3,4,-6,4,-8,2,-3,-10,-4,-1,-2,-7,9,10,-1,5,-4,5,-5,-8,9,6,10,2,-4,8,8,-3,-1,2,-9,-6,-5,3,-2,-4,2,1,-7,-7,-8,9,10,-4,4,-3,-5,6,-1,-2,1,-4,-6,-6,-9,-8,-5,6,6,6,-8,-2,1,-2,6,-5,-2,1,-3,-2,7,-3,6,10,7,-3,9,7,3,10,7,-8,4,6,-6,2,-10,-6,2,10,3,6,7,10,7,3,7,3,-1,-3,-9,10,9,6,3,-5,-9,8,6,-8,-10,-7,2,-10,-8,2,7,-7,-8,-10,-10,7,5,5,-3,-4,-4,2,10,-1,-7,6,-4,2,9,-3,6,8,5,-5,-8,3,-2,10,-7,2,3,-7,2,-9,1,10,3,-1,1,1,4,3,-7,10,3,9,10,3,7,-3,-7,8,-10,10,-6,3,3,8,7,7,7,-8,-1,-7,4,-9,-2,10,-7,-5,1,2,2,-5,5,-2,9,-9,10,1,7,-6,-6,-3,9,5,-4,4,-7,8,5,4,10,4,-1,-6,4,7,10,-2,-8,9,-6,-1,-3,6,-8,2,6,-10,9,-5,-9,3,-4,6,-4,5,7,-4,4,-10,10,2,6,-3,9,-7,10,-6,7,-8,7,2,9,6,-5,8,8,1,4,-10,4,9,-9,10,-9,8,10,-1,7,-2,6,10,-10,8,9,-6,5,-6,-10,-2,-3,-6,2,3,7,-4,5,-6,8,-10,-2,-9,4,3,10,-5,-6,9,8,-7,-9,-7,8,-3,7,-3,-2,8,-8,9,6,2,-5,-8,-4,6,-10,8,-6,4,4,4,2,9,-5,-7,-4,-3,-1,-10,9,-6,10,-7,-5,-2,2,5,2,-3,6,-7,8,-7,-2,4,4,-10,-6,-3,-10,1,4,6,-4,10,9,-8,9,8,4,-5,-3,-7,2,1,-6,3,-2,4,6,-4,5,-3,-1,8,-2,6,-5,-6,4,8,2,1,-10,8,1,2,7,-2,6,-4,2,6,4,6,-9,-7,8,7,-3,6,8,-3,3,3,-5,8,6,7,-5,-7,9,-7,4,-7,-8,4,-2,1,2,5,-1,-7,6,-9,6,5,-2,2,-6,-4,1,10,-4,-9,7,4,-6,6,-4,4,1,-5,4,8,6,4,-9,-1,9,1,-3,-5,7,-2,6,-1,5,-9,-1,9,-8,-7,9,-2,-7,6,10,-10,3,-8,-7,-6,-2,9,2,5,3,7,-9,2,-3,-7,-10,-8,8,-3,-4,7,-6,3,4,-7,7,9,-4,1,9,-8,4,5,-1,-9,9,-1,2,-4,2,-5,7,5,7,9,-4,7,5,2,-10,3], dtype = "int32")#candidate|8455|(1920,)|const|int32
var_8456 = relay.var("var_8456", dtype = "uint8", shape = (462,))#candidate|8456|(462,)|var|uint8
call_8454 = relay.TupleGetItem(func_618_call(relay.reshape(const_8455.astype('int32'), [10, 12, 16]), relay.reshape(var_8456.astype('uint8'), [462,]), ), 2)
call_8457 = relay.TupleGetItem(func_621_call(relay.reshape(const_8455.astype('int32'), [10, 12, 16]), relay.reshape(var_8456.astype('uint8'), [462,]), ), 2)
output = relay.Tuple([bop_8441,call_8445,var_8446,const_8447,call_8454,const_8455,var_8456,])
output2 = relay.Tuple([bop_8444,call_8448,var_8446,const_8447,call_8457,const_8455,var_8456,])
func_8458 = relay.Function([var_8440,var_8446,var_8456,], output)
mod['func_8458'] = func_8458
mod = relay.transform.InferType()(mod)
var_8459 = relay.var("var_8459", dtype = "float64", shape = (6, 7, 10))#candidate|8459|(6, 7, 10)|var|float64
var_8460 = relay.var("var_8460", dtype = "float64", shape = (2, 660))#candidate|8460|(2, 660)|var|float64
var_8461 = relay.var("var_8461", dtype = "uint8", shape = (462,))#candidate|8461|(462,)|var|uint8
output = func_8458(var_8459,var_8460,var_8461,)
func_8462 = relay.Function([var_8459,var_8460,var_8461,], output)
mutated_mod['func_8462'] = func_8462
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8428_call = mod.get_global_var('func_8428')
func_8430_call = mutated_mod.get_global_var('func_8430')
call_8487 = func_8428_call()
call_8488 = func_8428_call()
func_2612_call = mod.get_global_var('func_2612')
func_2616_call = mutated_mod.get_global_var('func_2616')
var_8492 = relay.var("var_8492", dtype = "int16", shape = (720,))#candidate|8492|(720,)|var|int16
var_8493 = relay.var("var_8493", dtype = "int32", shape = (1920,))#candidate|8493|(1920,)|var|int32
call_8491 = relay.TupleGetItem(func_2612_call(relay.reshape(var_8492.astype('int16'), [6, 15, 8]), relay.reshape(var_8492.astype('int16'), [6, 15, 8]), relay.reshape(var_8493.astype('int32'), [1, 1920]), ), 2)
call_8494 = relay.TupleGetItem(func_2616_call(relay.reshape(var_8492.astype('int16'), [6, 15, 8]), relay.reshape(var_8492.astype('int16'), [6, 15, 8]), relay.reshape(var_8493.astype('int32'), [1, 1920]), ), 2)
var_8505 = relay.var("var_8505", dtype = "float64", shape = (11, 15, 8))#candidate|8505|(11, 15, 8)|var|float64
bop_8506 = relay.divide(call_8487.astype('float32'), relay.reshape(var_8505.astype('float32'), relay.shape_of(call_8487))) # shape=(11, 15, 8)
bop_8509 = relay.divide(call_8488.astype('float32'), relay.reshape(var_8505.astype('float32'), relay.shape_of(call_8488))) # shape=(11, 15, 8)
output = relay.Tuple([call_8491,var_8492,var_8493,bop_8506,])
output2 = relay.Tuple([call_8494,var_8492,var_8493,bop_8509,])
func_8525 = relay.Function([var_8492,var_8493,var_8505,], output)
mod['func_8525'] = func_8525
mod = relay.transform.InferType()(mod)
mutated_mod['func_8525'] = func_8525
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8525_call = mutated_mod.get_global_var('func_8525')
var_8527 = relay.var("var_8527", dtype = "int16", shape = (720,))#candidate|8527|(720,)|var|int16
var_8528 = relay.var("var_8528", dtype = "int32", shape = (1920,))#candidate|8528|(1920,)|var|int32
var_8529 = relay.var("var_8529", dtype = "float64", shape = (11, 15, 8))#candidate|8529|(11, 15, 8)|var|float64
call_8526 = func_8525_call(var_8527,var_8528,var_8529,)
output = call_8526
func_8530 = relay.Function([var_8527,var_8528,var_8529,], output)
mutated_mod['func_8530'] = func_8530
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7193_call = mod.get_global_var('func_7193')
func_7195_call = mutated_mod.get_global_var('func_7195')
call_8603 = relay.TupleGetItem(func_7193_call(), 0)
call_8604 = relay.TupleGetItem(func_7195_call(), 0)
output = relay.Tuple([call_8603,])
output2 = relay.Tuple([call_8604,])
func_8619 = relay.Function([], output)
mod['func_8619'] = func_8619
mod = relay.transform.InferType()(mod)
output = func_8619()
func_8620 = relay.Function([], output)
mutated_mod['func_8620'] = func_8620
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8632 = relay.var("var_8632", dtype = "float32", shape = (7, 1, 11))#candidate|8632|(7, 1, 11)|var|float32
uop_8633 = relay.rsqrt(var_8632.astype('float32')) # shape=(7, 1, 11)
uop_8644 = relay.sinh(uop_8633.astype('float32')) # shape=(7, 1, 11)
bop_8658 = relay.logical_or(uop_8644.astype('bool'), relay.reshape(var_8632.astype('bool'), relay.shape_of(uop_8644))) # shape=(7, 1, 11)
var_8671 = relay.var("var_8671", dtype = "float32", shape = (7, 1, 11))#candidate|8671|(7, 1, 11)|var|float32
bop_8672 = relay.greater_equal(uop_8633.astype('bool'), relay.reshape(var_8671.astype('bool'), relay.shape_of(uop_8633))) # shape=(7, 1, 11)
uop_8682 = relay.atanh(bop_8658.astype('float32')) # shape=(7, 1, 11)
func_8250_call = mod.get_global_var('func_8250')
func_8252_call = mutated_mod.get_global_var('func_8252')
var_8695 = relay.var("var_8695", dtype = "uint16", shape = ())#candidate|8695|()|var|uint16
call_8694 = func_8250_call(relay.reshape(var_8695.astype('uint16'), []))
call_8696 = func_8250_call(relay.reshape(var_8695.astype('uint16'), []))
func_6329_call = mod.get_global_var('func_6329')
func_6331_call = mutated_mod.get_global_var('func_6331')
call_8697 = relay.TupleGetItem(func_6329_call(), 0)
call_8698 = relay.TupleGetItem(func_6331_call(), 0)
func_1082_call = mod.get_global_var('func_1082')
func_1085_call = mutated_mod.get_global_var('func_1085')
var_8705 = relay.var("var_8705", dtype = "bool", shape = (616,))#candidate|8705|(616,)|var|bool
call_8704 = func_1082_call(relay.reshape(var_8705.astype('bool'), [8, 11, 7]), relay.reshape(var_8705.astype('bool'), [8, 11, 7]), )
call_8706 = func_1082_call(relay.reshape(var_8705.astype('bool'), [8, 11, 7]), relay.reshape(var_8705.astype('bool'), [8, 11, 7]), )
bop_8721 = relay.multiply(uop_8682.astype('int32'), relay.reshape(uop_8633.astype('int32'), relay.shape_of(uop_8682))) # shape=(7, 1, 11)
func_4331_call = mod.get_global_var('func_4331')
func_4333_call = mutated_mod.get_global_var('func_4333')
const_8725 = relay.const([7.585870,-6.913027,4.780880,3.678057,-9.992844,-1.929356,-3.643186,2.269542,-9.927099,9.129477,-2.601871,5.956211,-3.305576,5.520251,-0.499468,-4.584855,-4.115835,2.454485,-3.767249,9.886831,-4.285781,9.240576,2.194942,-2.509136,1.162228,9.213224,0.107330,0.530881,2.907877,-2.482708,-9.212187,9.584605,4.778998,4.268257,0.965941,-1.911755,-4.445584,2.677265,-1.541379,8.104604,1.496744,7.006565,5.602404,-4.170798,0.129323,-4.295447,-2.063390,-3.593057,5.445524,3.691241,-0.172375,-3.063776,1.046247,3.099727,4.831855,5.302727,1.187431,-4.523422,-4.519622,8.271594,3.117024,5.714268,2.032516,6.895991,9.706283,5.982117,0.580077,-7.098068,6.131355,-4.581918,-5.851381,7.707427,5.542340,-2.077153,3.585226,1.147307,-5.302398,-8.181420,9.583280,-5.383506,-1.080252,-9.424932,4.549769,-1.988011,-5.169386,-3.141276,7.981812,-0.459055,1.709049,-2.464159,-6.192839,5.941368,-5.488003,-4.684382,6.284357,4.066329,2.017431,7.897412,-8.853367,9.717176,4.510700,-6.991446,-8.857207,9.642328,6.638768,-2.208216,8.798899,-3.615915,7.790882,4.111113,0.783345,-7.293969,7.180182,-4.840357,9.640241,-2.638170,2.461806,3.714041,-3.903497,2.245788,-1.634171,1.526840,7.101846,-2.618272,2.417732,0.264660,-2.893327,7.957802,-1.100088,4.635983,7.238092,-7.410388,-4.628897,-1.008254,-7.472747,7.837934,2.803635,-0.632583,-5.024714,8.902861,6.974897,9.744126,-6.425566,9.312433,-2.197005,7.985968,-2.402386,-3.697699,6.055962,5.783305,-7.879815,5.226631,-9.135598,-3.315535,-8.231648,-2.135122,-7.922109,0.837153,-7.839492,5.805969,9.535160,-4.531128,-7.711728,2.868822,-7.096072,6.565664,4.534761,-9.635058,4.611666,-1.624208,8.756494,5.765795,-4.657786,-9.892192,2.751231,8.732869,-6.314214,-4.525777,-9.191010,2.257712,9.361458,3.362273,2.829631,-7.932711,-3.721614,-6.284300,0.928425,-4.360988,-9.393365,-3.597685,-2.442769,-5.218602,5.329395,-4.656556,-6.929251,-6.393896,-9.187370,-3.429090,-2.728865,-1.802655,-6.617863,-2.989984,-4.082542,0.238526,7.915447,-8.510619,-8.796111,9.528305,-8.518968,3.896724,9.999024,-4.460905,-8.611255,5.081718,6.332882,0.192814,-3.374714,6.026415,-6.003217,6.142117,-8.168319,-3.839253,-0.608006,-4.822263,1.840075,-4.244017,-2.401637,-2.678052,7.687681,6.108724,-5.013473,-0.425680,-7.087664,9.226786,2.092327,-0.316917,0.890139,-8.987007,-2.247257,-9.063661,-1.313454,-3.860315,2.571784,4.064467,-2.981578,4.136690,-7.152828,3.936417,8.993844,2.108797,1.287247,-5.916305], dtype = "float32")#candidate|8725|(252,)|const|float32
call_8724 = func_4331_call(relay.reshape(const_8725.astype('float32'), [9, 4, 7]))
call_8726 = func_4331_call(relay.reshape(const_8725.astype('float32'), [9, 4, 7]))
func_5503_call = mod.get_global_var('func_5503')
func_5506_call = mutated_mod.get_global_var('func_5506')
const_8737 = relay.const([5,-9,-8,-9,9,10,3,-4,-3,-2,-8,4,1,1,6,1,1,-6,-5,8,10,9,-5,-8,9,-1,-3,8,-2,-9,-3,2,10,-7,-2,10,-10,-5,-1,3,5,6,-8,-3,-1,1,-5,-2,-8,4,1,-3,-3,7,-5,4,4,-9,-4,3,9,3,-4,2,3,5,8,-8,6,4,8,1,-10,4,-7,3,-2,9,-1,-9,7,-2,-2,7,-4,9,-1,-5,5,6,8,-5,6,-8,6,-3,1,-9,6,3,7,3,4,-10,7,10,-5,-8,2,-10,-3,-3,-10,9,8,-7,6,6,6,-1,-4,-10,8,2,4,-8,6,-3,-6,4,8,3,-9,-4,-5,-10,5,-7,-10,1,-10,-10,2,5,-10,2,-8,2,1,6,10,-4,8,6,-8,-9,-7,5,6,5,-8,-6,1,-6,1,-10,-8,3,-6,3,7,-2,-4,-2,-8,-6,6,-5,-9,9,2,10,4,7,4,3,3,6,6,-6,8,3,6,-1,8,5,-1,-4,-8,-4,1,4,7,-9,-1,-9,9,-1,1,-1,1,-1,-1,-9,5,1,-3,10,-8,-6,6,-6,-9,-1,8,-9,8,-3,-4,7,-6,-5,-5,2,4,2,3,-4,-6,5,6,5,4,4,2,5,-2,-8,5,-2,-8,-6,2,-7,4,-4,-4,6,-9,-5,-2,1,-3,2,-9,-7,-9,-1,-3,-1,8,7,6,-1,-4,8,-1,1,-7,3,7,4,3,9,4,10,5,6,-1,-8,5,2,-6,1,-7,-1,2,-2,-3,-8,-1,8,6,-1,1,1,-7,4,-7,7,7,10,-5,4,-3,4,-3,-2,-6,-5,2,5,-2,-5,3,-2,-1,-2,7,4,-2,-6,1,-3,2,-6,-7,-6,-1,7,2,-6,4,-9,8,10,4,-3,5,1,-8,-2,7,2,-8,6,8,4,2,4,-9,-9,2,7,10,3,-5,2,2,2,5,-1,-1,-7,-10,-4,7,3,5,-5,8,-4,-4,4,2,-7,5,-10,-4,-1,9,-5,-9,4,-8,1,-10,8,-5,1,10,4,9,-6,-2,7,-2,-6,1,-5,10,5,-4,5,5,7,-5,5,-7,-6,5,10,6,-8,-5,-7,10,-6,-5,4,-8,-7,1,6,-2,7,-6,7,-1,2,-8,5,-1,2,2,7,-6,3,-6,-5,3,-10,-9,2,1,-9,3,1,-5,-1,1,-6,-10,-6,10,-9,-5,4,5,3,-2,-7,6,-8,-2,-7,6,-10,6,5,7,-1,-2,-6,10,2,-4,6,6,-1,4,-1,-5,7,7,7,5,-8,-2,-1,-8,2,-2,3,4,-8,4,-7,2,-10,5,5,-7,6,-9,-10,1,-10,2,-3,-7,-3,2,-2,3,3,1,-7,-3,8,9,1,-3,3,4,2,-8,-2,6,-7,6,-8,-10,-7,-5,6,-6,5,8,7,-5,3,5,-6,-9,-1,-2,4,-3,4,-10,3,9,-5,8,-1,2,-6,1,-9,6,-7,-10,-2,-6,10,-9,1,-3,-5,8,-1,9,-7,-1,3,8,-8,3,-9,6,-6,-2,-3,3,5,-3,4,-6,-2,-7,4,5,2,-2,10,10,-5,10,9,-3,5,-9,-7,9,-1,6,-4,9,-10,6,-1,3,1,3,9,4,-3,4,-7,-1,1,-8,-8,-10,-10,-8,5,8,-7,7,8,-1,-4,2,7,-2,1,-5,6,7,2,-8,9,4,-6,3,2,-4,-10,-8,10,-7,-1,-9,-8,5,-4,-8,9,-10,-2,-9,-8,1,-9,-6,8,-1,-8,7,7,-5,-3,3,-6,6,-7,-4,-10,-4,3,-10,-5,-1,-1,6,-8,-8,-7,-4,-5,3,-7,-8,2,-8,4,-8,-10,10,5,1,1,6,-2,1,1,1,2,7,-3,-1,-2,6,7,-3,-3,8,4,4,-6,-5,-10,7,8,-8,-6,8,7,1,-9,10,1,-10,4,2,10,7,6,1,-7,-4,7,2,-5,2,1,8,10,8,-3,-3,10,2,-3,1,-2,-4,7,7,-1,8,8,4,5,1,-2,10,4], dtype = "int32")#candidate|8737|(780,)|const|int32
const_8738 = relay.const([4,9,5,9,9,5,-2,4,10,-10,-9,4,5,3,-5,9,4,-7,1,-2,1,-2,2,-5,-5,-1,5,-6,-1,-2,-3,8,-10,6,-1,4,8,7,4,-4,6,-1,-3,3,-8,-10,9,8,-3,1,-5,-7,10,4,-5,-3,6,-4,-3,-10,-6,-1,8,-4,-4,-4,1,3,-5,-7,5,-3,-8,-1,6,1,2,8,-1,-1,-9,-3,6,2,-1,4,-3,-1,4,1,3,-3,-3,-7,5,-7,-2,-5,-6,-10,7,7,10,10,-9,-5,2,9,1,10,-5,10,-9,8,1,-4,-3,-8,-10,7,9,2,-2,-9,-1,10,-5,-5,-3,-4,10,-3,-1,-6,-3,-10,4,6,-5,10,-3,1,-1,4,9,8,-6,-2,6,-7,8,-3,-1,10,-3,1,-3,4,1,9,6,7,10,10,-7,7,8,10,9,5,-4,-6,1,2,7,-9,-9,-8,8,-7,9,-2,5,4,4,4,8,-7,-9,10,-10,-1,-7,-10,-7,2,2,-2,-6,9,-6,7,4,-2,5,-10,-2,4,10,-6,10,4,2,8,-2,7,1,-3,-10,-7,8,-9,-8,10,4,8,6,3,8,5,10,2,-7,-6,2,3,-3,-10,3,1,-8,1,-1,-1,8,10,9,9,7,-5,1,6,-10,4,-6,1,4,-9,8,3,-7,4,-3,4,-8,-6,6,-2,-10,-10,-1,-2,6,-7,1,-10,1,4,9,-5,-6,-6,4,-1,-4,1,-3,-8,4,3,5,4,9,3,8,5,-10,-8,-10,-9,9,10,2,-1,3,-2,7,-8,5,-4,-9,7,-1,4,-2,-4,2,5,1,-10,9,-5,-9,-5,-4,7,10,-3,-9,-2,7,-3,1,-4,-3,-9,8,1,8,-10,-8,6,-1,1,-3,2,-9,10,3,2,-8,-8,-4,-2,8,-5,-10,-6,-9,8,10,-3,-5,10,-6,-3,3,1,-4,-2,-8,1,-7,7,-6,9,7,6,6,1,8,8,-9,1,-5,-8,-9,9,7,-1,4,-6,3,-4,-8,2,-1,7,1,-3,-10,-7,9,-4,-3,7,6,-8,-7,-9,7,9,2,-6,-6,7,-2,-5,-2,7,-6,3,-10,-3,3,-10,-3,-8,8,10,-5,-2,-3,7,-7,-3,1,-5,8,7,-9,-4,9,9,-8,-1,-8,-1,9,-8,-4,-1,10,-7,-3,-2,3,-7,9,-10,-7,-1,4,-7,2,3,-8,-3,10,7,-4,8,-6,-2,2,-4,-4,3,-7,-3,8,4,-8,-4,-7,-2,1,-8,4,4,3,5,4,-5,10,1,4,2,2,-10,9,10,3,-7,-10,-3,2,10,5,7,3,-3,-3,9,-1,4,3,9,2,3,8,4,-5,6,-10,-5,-10,8,-3,9,-5,5,-7,-6,-2,-10,6,-2,10,2,2,-3,-8,-6,-9,7,9,4,8,-4,10,3,-8,6,5,-8,-5,-9,-3,4,-1,-7,-6,-6,-2,7,4,7,-6,-10,1,6,-8,-1,-2,-6,-9,-5,8,9,4,2,-5,10,4,-2,5,-4,-5,-7,-1,1,-7,-5,8,5,-2,-9,-5,-10,-6,-5,2,-7,2,3,-8,5,1,-10,-4,2,-9,-2,-8,5,-5,-9,8,4,-2,5,-1,5,10,2,8,9,3,-4,-4,-6,-9,-7,-3,-9,10,-2,4,-5,-3,-8,9,8,9,-4,3,3,7,9,3,-2,1,5,3,10,5,7,-3,7,-9,4,-10,-3,9,6,9,-6,-4,-4,1,3,9,-1,6,-4,-8,6,7,7,-1,-9,-3,-9,-6,-5,8,-2,-7,9,10,8,-4,-7,6,-1,9,7,7,-10,-2,9,-3,7,3,-5,1,-4,-10,10,-7,2,10,-7,-7,7,3,9,8,-10,-2,-5,-10,10,10,-7,10,2,-1,5,9,9,-10,8,4,9,4,-9,-5,-6,10,1,-5,9,3,5,-6,3,-3,-3,10,-3,8,-1,-2,7,2,-3,10,-2,6,4,-10,-9,8,9,6,4,-5,-6,-2,10,-8,9,-5,-2,8,4,-2,10,6,10,3,-5,-9,-5,1,-2,-8,-8,4,5,-5,10,3,1,-1,-1,-7,3,9,-4,3,1,9,-8,1,-4,2,8,-4,-5,2,-9,4,2,10,-6,-3,6,-8,6,-8,8,2,7,4,1,10,2,4,9,-1,-6,-2,8,-7,-9,-3,-4,2,-1,3,-2,-3,-7,10,8,-1,-6,9,10,6,-10,8,-6,-5,-7,-10,-3,3,8,8,-5,-2,-9,-6,-6,2,-3,-10,-1,5,-5,-6,8,10,5,1,6,-2,2,-6,10,4,6,-4,3,4,-6,8,-2,-7,-6,-6,2,7,-7,4,-9,-3,-4,-4,6,-5,-8,6,1,6,4,10,-1,-9,10,-6,-4,5,-5,7,7,-6,4,7,-7,-7,-5,6,3,-6,1,-3,-10,2,-9,9,-10,-3,8,4,-2,-6,-5,5,-10,-5,5,-3,-8,2,-4,5,7,10,9,3,-2,-10,-3,-9,8,-1,1,9,1,-9,6,8,-4,-1,4,-6,-4,5,1,-10,9,-3,-7,10,-6,2,-4,7,1,-3,-3,1,-5,-7,-2,7,-10,2,5,-3,10,4,6,-2,-9,-1,-5,-2,-9,-9,5,2,8,-1,5,-5,1,-1,-9,5,-9,2,9,6,-10,8,-5,-9,4,8,-5,-4,-10,-7,-7,9,-9,2,5,-5,-7,10,-5,6,10,9,-7,-6,-10,-10,-3,7,-9,1,8,-9,-1,8,-10,5,8,-7,-9,-2,6,-5,10,-3,10,-5,10,-5,6,6,8,6,-5,9,-8,2,4,4,-1,6,-1,-4,-6,-3,-4,8,2,6,-9,-5,7,-2,7,6,3,3,-3,-6,-6,3,1,10,5,3,10,-4,5,9,-2,-2,-6,-10,2,10,-6,-7,-2,10,-4,5,3,2,-7,-2,5,5,-8,10,10,7,-1,-1,-3,4,6,-3,1,6,8,7,3,5,-7,-3,-3,5,7,8,-8,9,-4,-2,-2,10,-6,1,1,1,1,6,-4,-9,-8,-3,1,-10,-8,9,1,-8,-8,-8,-7,8,-5,-1,7,2,-6,2,10,-4,6,-6,5,-8,7,2,5,1,4,10,1,-7,-8,-8,-2,-5,-6,-7,-9,5,-1,9,9,-7,-1,4,-9,-10,-1,5,1,-2,-3,9,6,-7,3,4,-5,4,-9,9,-9,-7,9,4,2,-8,-6,8,-3,10,2,-5,-8,2,-7,-5,9,-9,-4,10,-10,2,7,2,6,5,8,4,1,3,-8,-6,-10,7,9,-9,-6,-7,-2,3,2,5,-10,-6,-6,8,-5,1,1,-9,-5,-9,1,4,-8,-9,-6,8,5,6,-3,5,1,5,-6,-2,5,4,1,7,-6,8,3,10,2,-9,-2,-2,10,5,-4,-7,-10,4,10,9,-10,-9,-4,2,9,-8,-4,6,-2,10,-9,4,9,-1,3,-6,-8,7,6,-6,9,-5,-8,6,3,-5,-4,-4,-9,3,-6,5,4,5,-1,6,-7,-2,-6,-5,8,-1,-9,5,-1,-9,7,-10,6,-4,6,-7,-3,-8,-1,7,-2,-2,-5,-10,7,-1,3,-7,7,-8,-1,6,5,-2,8,8,10,-3,-8,1,-2,10,-6,-6,6,7,-10,3,8,4,7,-10,-1,-3,-5,4,9,-5,-1,-1,7,-6,3,-4,5,1,-9,8,-1,1,-7,3,9,4,-1,6,-5,4,-10,-10,-6,6,9,7,6,8,-1,1,1,1,-2,-7,-9,-2,-9,5,-3,-1,6,-4,4,-8,-3,8,-6,-3,5,-3,2,7,-10,-7,3,7,3,-4,1,3,-10,-7,9,-3,1,9,3,-5,8,8,-9,3,-6,1,8,1,-7,2,-8,10,-3,5,7,-1,-3,8,-5,5,9,-9,2,-3,-8,-4,-2,-10,-7,10,-6,-1,-3,-2,-2,-2,-3,-8,-10,-3,-7,-9,-3,-3,3,-2,-6,7,-4,2,3,6,4,10,-6,4,-10,-4,1,1,1,-2,-10,10,7,-9,3,-8,-1,3,-1,-5,-2,-4,-4,-7,-2,-6,8,-4,6,-5,9,8,-2,-9,9,-4,3,-6,-4,-6,1,-9,-5,-4,-6,-2,2,7,10,-5,-2,-10,6,3,-8,-4,-10,8,6,6,10,-9,5,-4,-5,-4,7,-3,-7,-3,-5,3,-2,1,-2,-1,5,5,-9,-7,-10,-9,-4,-2,-9,7,3,-1,1,-4,1,7,7,-7,3,-9,6,1,-2,-2,-7,-9,7,5,2,-2,5,8,-3,10,-9,-10,9,-5,-4,4,-6,-4,-2,2,10,-6,5,-9,-9,6,-8,-4,-8,7,-8,7,-3,6,2,7,3,-7,9,9,-4,7,1,-8,2,5,6,3,-3,-5,6,6,-7,-8,-10,-4,3,-8,-3,-5,2,7,2,-9,7,-9,-6,-2,10,7,8,6,-3,6,-1,-2,-1,-2,9,9,5,-8,-4,6,-4,-6,6,-6,6,-6,-4,-9,9,9,5,3,7,3,-4,7,-1,2,5,-6,-9,6,-3,8,8,-10,-7,-5,4,4,-8,-10,4,-8,-10,-7,-9,4,-10,5,-2,-3,10,3,-7,-4,8,5,7,-10,-10,-10,10,4,-8,7,6,9,7,9,-9,-10,10,10,1,-4,6,1,-8,7,-5,-6,-6,6,8,-9,2,-5,-7,8,6,-10,-8,8,7,1,-2,5,-5,3,-8,-2,4,-1,-6,-10,2,3,-10,-5,-8,10,-5,-10,-6,6,7,-2,-9,3,-1,6,-2,3,-1,10,-7,3,-5,-4,8,-7,-10,-8,-4,-4,4,10,8,2,2,-1,4,10,-9,-4,-6,1,-10,7,-10,8,-9,-3,-2,8,-9,-4,5,4,-10,-2,-7,-6,-2,10,-4,-9,9,-1,9,8,2,-10,-5,2,3,6,7,-7,-5,-4,-7,1,6,-8,3,2,-7,-4,-5,2,10,-7,9,5,-5,4,-3,10,9,4,-6,-9,7,5,-10,1,4,7,2,-1,3,8,10,-5,8,3,8,-6,5,-8,-10], dtype = "int32")#candidate|8738|(1920,)|const|int32
call_8736 = relay.TupleGetItem(func_5503_call(relay.reshape(const_8737.astype('int32'), [5, 12, 13]), relay.reshape(const_8738.astype('int32'), [1920,]), ), 7)
call_8739 = relay.TupleGetItem(func_5506_call(relay.reshape(const_8737.astype('int32'), [5, 12, 13]), relay.reshape(const_8738.astype('int32'), [1920,]), ), 7)
output = relay.Tuple([bop_8672,call_8694,var_8695,call_8697,call_8704,var_8705,bop_8721,call_8724,const_8725,call_8736,const_8737,const_8738,])
output2 = relay.Tuple([bop_8672,call_8696,var_8695,call_8698,call_8706,var_8705,bop_8721,call_8726,const_8725,call_8739,const_8737,const_8738,])
func_8746 = relay.Function([var_8632,var_8671,var_8695,var_8705,], output)
mod['func_8746'] = func_8746
mod = relay.transform.InferType()(mod)
var_8747 = relay.var("var_8747", dtype = "float32", shape = (7, 1, 11))#candidate|8747|(7, 1, 11)|var|float32
var_8748 = relay.var("var_8748", dtype = "float32", shape = (7, 1, 11))#candidate|8748|(7, 1, 11)|var|float32
var_8749 = relay.var("var_8749", dtype = "uint16", shape = ())#candidate|8749|()|var|uint16
var_8750 = relay.var("var_8750", dtype = "bool", shape = (616,))#candidate|8750|(616,)|var|bool
output = func_8746(var_8747,var_8748,var_8749,var_8750,)
func_8751 = relay.Function([var_8747,var_8748,var_8749,var_8750,], output)
mutated_mod['func_8751'] = func_8751
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8619_call = mod.get_global_var('func_8619')
func_8620_call = mutated_mod.get_global_var('func_8620')
call_8753 = relay.TupleGetItem(func_8619_call(), 0)
call_8754 = relay.TupleGetItem(func_8620_call(), 0)
output = call_8753
output2 = call_8754
func_8757 = relay.Function([], output)
mod['func_8757'] = func_8757
mod = relay.transform.InferType()(mod)
output = func_8757()
func_8758 = relay.Function([], output)
mutated_mod['func_8758'] = func_8758
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7068_call = mod.get_global_var('func_7068')
func_7070_call = mutated_mod.get_global_var('func_7070')
call_8769 = relay.TupleGetItem(func_7068_call(), 0)
call_8770 = relay.TupleGetItem(func_7070_call(), 0)
output = relay.Tuple([call_8769,])
output2 = relay.Tuple([call_8770,])
func_8779 = relay.Function([], output)
mod['func_8779'] = func_8779
mod = relay.transform.InferType()(mod)
output = func_8779()
func_8780 = relay.Function([], output)
mutated_mod['func_8780'] = func_8780
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8165_call = mod.get_global_var('func_8165')
func_8167_call = mutated_mod.get_global_var('func_8167')
call_8834 = relay.TupleGetItem(func_8165_call(), 1)
call_8835 = relay.TupleGetItem(func_8167_call(), 1)
func_4620_call = mod.get_global_var('func_4620')
func_4623_call = mutated_mod.get_global_var('func_4623')
var_8843 = relay.var("var_8843", dtype = "uint16", shape = (104, 20))#candidate|8843|(104, 20)|var|uint16
call_8842 = func_4620_call(relay.reshape(var_8843.astype('uint16'), [13, 10, 16]), relay.reshape(var_8843.astype('uint16'), [13, 10, 16]), )
call_8844 = func_4620_call(relay.reshape(var_8843.astype('uint16'), [13, 10, 16]), relay.reshape(var_8843.astype('uint16'), [13, 10, 16]), )
output = relay.Tuple([call_8834,call_8842,var_8843,])
output2 = relay.Tuple([call_8835,call_8844,var_8843,])
func_8847 = relay.Function([var_8843,], output)
mod['func_8847'] = func_8847
mod = relay.transform.InferType()(mod)
mutated_mod['func_8847'] = func_8847
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8848 = relay.var("var_8848", dtype = "uint16", shape = (104, 20))#candidate|8848|(104, 20)|var|uint16
func_8847_call = mutated_mod.get_global_var('func_8847')
call_8849 = func_8847_call(var_8848)
output = call_8849
func_8850 = relay.Function([var_8848], output)
mutated_mod['func_8850'] = func_8850
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7019_call = mod.get_global_var('func_7019')
func_7021_call = mutated_mod.get_global_var('func_7021')
call_8874 = relay.TupleGetItem(func_7019_call(), 0)
call_8875 = relay.TupleGetItem(func_7021_call(), 0)
output = relay.Tuple([call_8874,])
output2 = relay.Tuple([call_8875,])
func_8898 = relay.Function([], output)
mod['func_8898'] = func_8898
mod = relay.transform.InferType()(mod)
output = func_8898()
func_8899 = relay.Function([], output)
mutated_mod['func_8899'] = func_8899
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8779_call = mod.get_global_var('func_8779')
func_8780_call = mutated_mod.get_global_var('func_8780')
call_8972 = relay.TupleGetItem(func_8779_call(), 0)
call_8973 = relay.TupleGetItem(func_8780_call(), 0)
var_8988 = relay.var("var_8988", dtype = "float64", shape = (11, 15, 8))#candidate|8988|(11, 15, 8)|var|float64
bop_8989 = relay.maximum(call_8972.astype('uint64'), relay.reshape(var_8988.astype('uint64'), relay.shape_of(call_8972))) # shape=(11, 15, 8)
bop_8992 = relay.maximum(call_8973.astype('uint64'), relay.reshape(var_8988.astype('uint64'), relay.shape_of(call_8973))) # shape=(11, 15, 8)
func_7228_call = mod.get_global_var('func_7228')
func_7230_call = mutated_mod.get_global_var('func_7230')
call_8995 = func_7228_call()
call_8996 = func_7228_call()
output = relay.Tuple([bop_8989,call_8995,])
output2 = relay.Tuple([bop_8992,call_8996,])
func_8997 = relay.Function([var_8988,], output)
mod['func_8997'] = func_8997
mod = relay.transform.InferType()(mod)
mutated_mod['func_8997'] = func_8997
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8998 = relay.var("var_8998", dtype = "float64", shape = (11, 15, 8))#candidate|8998|(11, 15, 8)|var|float64
func_8997_call = mutated_mod.get_global_var('func_8997')
call_8999 = func_8997_call(var_8998)
output = call_8999
func_9000 = relay.Function([var_8998], output)
mutated_mod['func_9000'] = func_9000
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8356_call = mod.get_global_var('func_8356')
func_8357_call = mutated_mod.get_global_var('func_8357')
call_9014 = relay.TupleGetItem(func_8356_call(), 0)
call_9015 = relay.TupleGetItem(func_8357_call(), 0)
output = call_9014
output2 = call_9015
func_9020 = relay.Function([], output)
mod['func_9020'] = func_9020
mod = relay.transform.InferType()(mod)
mutated_mod['func_9020'] = func_9020
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9020_call = mutated_mod.get_global_var('func_9020')
call_9021 = func_9020_call()
output = call_9021
func_9022 = relay.Function([], output)
mutated_mod['func_9022'] = func_9022
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7340_call = mod.get_global_var('func_7340')
func_7341_call = mutated_mod.get_global_var('func_7341')
call_9112 = func_7340_call()
call_9113 = func_7340_call()
output = relay.Tuple([call_9112,])
output2 = relay.Tuple([call_9113,])
func_9140 = relay.Function([], output)
mod['func_9140'] = func_9140
mod = relay.transform.InferType()(mod)
output = func_9140()
func_9141 = relay.Function([], output)
mutated_mod['func_9141'] = func_9141
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8757_call = mod.get_global_var('func_8757')
func_8758_call = mutated_mod.get_global_var('func_8758')
call_9381 = func_8757_call()
call_9382 = func_8757_call()
func_8356_call = mod.get_global_var('func_8356')
func_8357_call = mutated_mod.get_global_var('func_8357')
call_9391 = relay.TupleGetItem(func_8356_call(), 0)
call_9392 = relay.TupleGetItem(func_8357_call(), 0)
output = relay.Tuple([call_9381,call_9391,])
output2 = relay.Tuple([call_9382,call_9392,])
func_9393 = relay.Function([], output)
mod['func_9393'] = func_9393
mod = relay.transform.InferType()(mod)
mutated_mod['func_9393'] = func_9393
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9393_call = mutated_mod.get_global_var('func_9393')
call_9394 = func_9393_call()
output = call_9394
func_9395 = relay.Function([], output)
mutated_mod['func_9395'] = func_9395
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7622_call = mod.get_global_var('func_7622')
func_7623_call = mutated_mod.get_global_var('func_7623')
call_9477 = relay.TupleGetItem(func_7622_call(), 3)
call_9478 = relay.TupleGetItem(func_7623_call(), 3)
output = call_9477
output2 = call_9478
func_9495 = relay.Function([], output)
mod['func_9495'] = func_9495
mod = relay.transform.InferType()(mod)
mutated_mod['func_9495'] = func_9495
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9495_call = mutated_mod.get_global_var('func_9495')
call_9496 = func_9495_call()
output = call_9496
func_9497 = relay.Function([], output)
mutated_mod['func_9497'] = func_9497
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9503 = relay.var("var_9503", dtype = "uint32", shape = ())#candidate|9503|()|var|uint32
var_9504 = relay.var("var_9504", dtype = "uint32", shape = (14, 10, 2))#candidate|9504|(14, 10, 2)|var|uint32
bop_9505 = relay.add(var_9503.astype('uint32'), var_9504.astype('uint32')) # shape=(14, 10, 2)
func_6702_call = mod.get_global_var('func_6702')
func_6706_call = mutated_mod.get_global_var('func_6706')
const_9535 = relay.const([9,-10,-3,-1,3,8,4,-1,-7,9,5,-10,-8,6,-7,-6,10,-7,10,-5,3,-10,9,5,-4,-3,-8,10,10,-8,4,5,1,-6,3,-5,5,1,-1,-9,1,-5,-7,-7,-8,5,-10,-7,6,3,5,6,-7,5,5,2,5,7,10,-10,8,2,8,10,-5,5,-2,1,10,-5,7,3,7,-4,5,-7,1,-2,1,5,4,5,3,-5,-9,9,2,-7,-3,5,-7,10,4,-9,3,-2,-5,5,2,-10,2,8,-5,-2,8,-8,-2,4,-2,2,8,2,-2,3,9,-6,5,7,-10,8,-6,4,-7,-3,-3,2,-8,7,3,3,-3,3,2,-10,8,-2,-6,-2,7,2,10,-3,10,8,10,-5,2,-5,-9,9,-4,-2,9,5,-9,6,-1,-8,9,-4,9,3,1,-6,-2,-8,7,-9,3,-2,1,2,7,10,-5,-6,-6,-4,7,-7,-8,-9,6,1,2,-4,1,4,3,7,-10,10,2,-5,7,-1,-7,-10,-6,4,6,2,3,7,-10,4,7,-6,-2,-9,-2,-2,9,-4,4,-7,-4,-8,-3,-3,-1,-4,2,7,-10,-3,-7,3,-8,4,-3,-10,8,-5,5,7,-6,-4,1,-4,-10,-3,-3,-4,3,1,-9,-4,1,9,9,1,4,-8,7,-6,-9,3,-7,-3,6,-8,-8,-1,4,-4,5,2,1,4,2,-4,-1,4,-7,-8,-2,-6,-1,-9,7,9,1,1,9,-3,-5,3,5,4,4,-4,10,-9,9,5,-3,9,-6,-9,8,-6,-8,-1,-8,-6,-8,-1,2,-9,-5,-8,1,-4,8,1,-3,8,-8,6,-3,8,-5,-10,-8,8,7,4,5,-4,1,-8,-4,8,7,-8,6,-4,7,-8,6,8,3,-1,10,-3,3,-7,-10,-9,-9,-9,-6,-6,8,-8,9,6,-10,2,4,-2,7,-4,-2,-5,-3,-6,9,2,5,10,7,-7,6,-8,-3,7,-10,8,-5,5,-9,-7,-2,-4,10,-10,-3,-6,6,-9,-6,2,7,-10,-3,8,-7,-10,5,-5,-9,4,3,1,5,2,-6,9,-2,-6,5,9,-1,10,-3,9,-1,-4,-4,-6,4,-10,10,-4,10,9,5,7,5,10,-2,9,-3,-8,9,5,1,6,7,-4,-1,2,1,10,7,-5,10,-2,9,9,5,-3,-1,8,10,-5,-6,-7,-8,-4,-8,4,1,10,-6,-7,-4,7,-9,3,6,-2,-7,-9,5,-2,10,-10,1,-2,2,-8,-2,-2,-10,2,-5,8,3,-8,3,-3,5], dtype = "uint64")#candidate|9535|(495,)|const|uint64
var_9536 = relay.var("var_9536", dtype = "float64", shape = (5, 130))#candidate|9536|(5, 130)|var|float64
const_9537 = relay.const([9,-2,-10,-9,-7,5,-8,-3,5,-2,-5,-8,-7,-3,-3,4,-10,-8,-5,3,1,5,7,2,1,6,5,5,1,2,10,-5,-4,-1,9,10,1,9,7,-1,-5,4,-5,1,-7,-7,1,-7,6,-6,3,-6,3,-6,9,9,-6,-6,-4,-4,-2,-7,-6,9,-4,6,-1,4,8,-4,-7,2,8,4,-5,-4,-1,9,7,9,3,9,-8,7,2,4,6,3,-6,-7,-5,-9,2,-6,-5,10,-2,1,-3,7,-2,5,9,-6,-4,7,4,8,5,4,-10,-10,-5,-2,1,-2,-2,-3,-4,7,1,-7,-1,2,-10,-8,5,3,-8,6,4,-2,-4,7,-5,-8,-10,3,2,7,-6,-2,-2,-8,-10,10,2,-8,1,6,2,2,1,-3,-3,-4,-7,7,-3,-10,1,7,-3,10,2,10,2,-6,-5,5,-9,-6,-5,-6,10,-3,7,4,5,-4,4,1,-5,-8,-5,-10,-1,-3,-9,-7,6,-2,8,-4,2,1,1,-1,-10,9,-1,2,-3,-8,-5,-5,-3,-5,-3,-5,7,10,-2,4,-9,9,-2,-9,7,9,-2,-4,-1,5,6,-2,8,10,-2,-3,-9,-2,3,-6,-9,-2,-9,-6,-5,-8,-5,-1,4,-4,-8,-9,7,-6,3,1,-8,4,1,-2,5,7,-2,-2,2,3,2,6,1,10,-5,7,7,-1,-3,5,2,-5,-4,9,4,-7,3,-6,7,-10,8,-8,-1,3,1,-10,-2,9,6,2,-1,-6,4,1,-7,-6,10,-8,-2,-5,-1,-7,-3,-8,8,9,-3,-4,-5,8,7,7,-5,-10,-7,1,-1,-10,-7,-1,2,-4,5,10,6,3,2,-3,-4,4,-10,-9,5,5,-2,9,-6,-9,-3,-2,8,2,-5,7,-10,1,7,-2,3,-6,-4,7,8,-3,-6,7,10,4,-6,3,3,9,7,-2,-7,-3,3,-2,-7,-9,-10,5,-10,3,9,4,-3,-1,4,-1,4,-3,8,-8,-2,6,-7,-2,-1,3,-5,1,1,10,-7,-10,7,-10,1,-9,-6,5,-7,10,-3,9,1,-6,2,-10,9,2,5,2,-7,-9,8,-6,-10,-5,9,-1,-4,3,-2,-4,4,6,7,5,9,-7,-5,-1,9,-8,-10,7,5,-9,-6,8,1,9,-2,-2,-8,9,1,-10,8,7,6,-1,7,-8,2,-10,9,-1,-6,5,1,7,4,2,-5,9,6,-2,7,-3,7,-4,-5,-9,-7,4,10,9,7,5,2,-3,3,9,-7,-1,-8,-3,9,5,-8,-3,10,-2,5,9,1,-6,-9,-4,-1,-5,9,3,9,3,7,-8,8,-4,-7,-10,6,5,-5,6,-6,-5,6,-3,6,-6,2,9,-4,-2,-7,1,2,-9,-7,-3,5,-7,7,-7,6,5,-7,-9,-9,-2,-7,10,-3,6,-3,4,-8,8,-3,-8,10,8,-10,-8,7,-3,-5,4,1,7,-1,-3,-3,6,-8,4,8,5,8,6,3,10,2,5,5,9,-2,7,-5,-9,9,-3,5,6,-1,-9,-10,2,4,-7,-7,7,9,5,8,7,9,-6,-7,-10,-3,-3,-9,-6,10,3,10,-9,5,2,-1,-3,-10,7,-9,8,-7,6,-7,8,-8,7,3,6,1,1,1,-2,-1,10,7,2,2,7,-2,7,10,-7,-1,8,3,3,1,4,-6,2,6,-7,-3,6,-1,-5,-8,-1,5,10,-9,9,10,-4,2,10,-1,6,1,-1,-6,5,-9,10,8,-2,-3,-6,6,1,-5,6,10,-2,-4,5,-9,4,9,-2,6,-3,-6,-3,-1,2,5,-4,10,6,-8,5,-5,7,-5,-10,-4,-1,4,-5,-8,2,7,-8,1,2,-9,1,8,-8,9,-5,1,-7,9,1,-9,3,-9,2,7,1,10,9,-10,-10,-5,3,-2,2,-2,-1,5,8,4,-4,-3,8,7,-3,6,-5,10,-6,8,-6,-10,1,10,7,-9,-9,-6,-8,-6,-9,4,-1,9,9,-5,8,-1,-1,8,6,-1,-2,4,1,2,-2,1,3,3,9,-4,-5,6,5,-6,-1,-8,5,4,-3,5,3,9,5,-5,-1,-1,-3,2,1,10,4,-7,-1,-4,-9,10,-4,7,2,-4,-2,-7,2,-4,-7,4,-4,2,-4,-2,5,7,2,9,-8,6,9,-9,-5,3,9,5,10,3,-6,-9,10,10,-9,-5,-3,-1,6,-5,-2,3,8,9,7,-6,-8,4,10,-9,3,10,-6,-8,10,3,4,5,6,-3,-7,-8,3,-2,-7,4,4,-8,4,3,1,-5,-4,8,6,4,10,6,-7,-6,9,6,5,-6,-10,-2,6,8,8,9,7,5,7,-1,-2,-9,-1,6,9,-7,-2,-9,-6,8,5,8,-1,9,6,4,-9,1,-8,-5,3,-5,1,-5,3,1,-3,9,-1,3,8,-7,10,6,9,2,-3,8,3,1,7,3,8,-3,2,-6,3,9,3,9,7,3,10,-6,-3,10,-8,1,7,-4,-1,-1,-4,-8,-4,-9,10,-4,1,7,6,7,2,-7,5,-8,-4,3,-7,-6,-7,5,7,2,-9,6,-6,-9,-3,7,-10,6,-4,-1,-9,-4,-10,-6,8,6,6,-3,5,1,8,9,1,-9,4,5,-5,-2,8,3,-5,-3,1,3,8,5,10,-4,-9,5,3,9,-1,-4,-8,-4,5,5,-5,-1,4,9,-10,-8,-3,2,-5,3,-1,-2,5,-3,-5,-6,1,-3,3,-1,-2,2,2,-3,-3,10,5,-3,1,-1,-6,-7,4,10,-2,10,9,-1,-6,-7,-1,2,-2,6,-3,-8,-2,4,6,5,6,-10,-7,-6,-5,1,2,2,10,-5,-3,-10,9,2,9,-3,-3,9,-4,-3,2,5,-9,7,-4,-4,7,-3,9,4,-3,2,10,5,10,4,-4,-3,-7,4,-5,8,2,10,7,9,1,-3,5,-6,8,5,3,4,-10,-1,9,-9,-1,4,5,5,5,8,7,-4,-7,6,-9,-8,-1,6,-8,-2,-5,4,-2,-7,-10,6,2,2,-1,7,-1,2,6,3,-4,1,-3,-1,-8,1,-5,5,1,5,8,-3,-9,-2,-3,-6,-1,-8,6,1,-8,-1,-3,10,-6,3,9,2,1,2,8,-10,-7,-5,-8,6,-1,8,-3,-8,-3,2,9,9,-7,-3,-1,8,-3,-10,1,8,-2,8,5,2,-6,-2,-8,4,-4,-4,4,-4,5,10,1,-2,4,-8,-5,-7,-5,-6,1,-10,-9,-1,-8,-1,-8,-1,-9,-2,2,-2,-10,-5,-1,10,1,9,6,-4,-5,-9,6,-4,2,9,-7,10,3,4,10,-6,-6,2,4,-8,9,-4,7,1,5,5,3,1,5,-10,9,-6,2,9,-2,-7,-2,7,2,-1,9,10,1,10,7,1,-7,-3,4,6,-8,-8,-7,-10,-4,5,6,5,-7,5,6,-3,4,-3,7,4,-4,6,7,10,8,3,1,3,-5,-3,6,-6,-10,-7,-10,-2,1,-8,3,-10,-1,5,2,-9,6,-10,8,3,6,-6,-10,5,-8,2,10,2,-4,5,-7,-5,-8,5,4,5,7,8,-2,1,-5,1,4,9,2,-5,10,-2,-6,6,5,2,5,-9,5,8,2,7,5,-5,-2,8,2,-10,-8,-10,8,-5,2,-1,-6,10,8,-4,-5,-2,9,9,-1,-10,5,-2,-2,7,4,4,7,-10,9,-10,4,1,3,5,-9,4,6,1,4,-3,-8,-10,1,1,-3,6,4,-1,7,2,-2,4,-2,-8,-4,7,-10,-10,7,10,-4,-9,4,-7,5,-1,-6,7,-9,-6,-5,-9,-2,-5,10,-10,2,3,9,-8,-1,-3,3,5,-4,7,4,6,2,-6,5,-7,5,-4,1,-9,1,9,4,6,-5,-9,8,6,7,2,-7,-10,10,5,5,6,-7,-8,9,1,6,6,7,3,3,7,-8,-2,-2,2,4,3,-4,-4,-6,8,7,5,-7,10,-6,2,6,4,3,-7,-5,8,-3,4,-7,9,-8,8,5,-7,-6,6,-3,4,-8,2,-3,-5,-5,4,-3,8,1,1,5,-6,-7,5,-3,-5,-9,-6,-9,7,-10,-6,7,-8,-9,4,-7,4,-3,1,7,-8,-4,7,5,-7,-8,-2,8,-3,9,2,-10,-9,7,-10,7,-1,4,6,5,-4,8,-7,-6,-5,10,2,-6,-4,2,-9,5,1,1,7,-1,-8,9,-5,-8,1,-10,1,-3,-10,8,-5,1,-2,-5,8,-4,-5,2,7,10,1,2,-5,6,1,5,8,-5,-8,-9,-6,-3,-5,1,-6,-3,-1,10,9,3,1,-9,-6,9,-5,-2,-3,-2,-9,-2,3,5,-10,10,-10,-1,-3,-8,-7,4,-7,-2,9,-9,-6,7,-6,-1,-5,6,-6,-6,7,9,-3,5,9,-10,-1,9,8,7,6,10,3,-9,-3,9,9,4,-8,1,8,6,-10,9,2,-4,5,2,-8,-6,-5,2,2,-7,-5,-10,2,2,-2,10,8,2,7,-1,6,7,2,-5,-5,7,-5,-3,-2,8,8,9,1,-9,-7,3,-8,3,10,-4,-4,-5,7,-5,4,4,1,-10,-5,1,9,-3,6,7,-8,9,4,-9,1,-10,7,-1,-7,1,1,-4,-5,9,5,-5,1,-4,-9,5,-9,7,9,2,-8,-8,4,1,-10,-1,8,-7,4,-1,-4,-3,3,9,-9,-10,6,7,-1,-1,9,-4,-2,6,-4,-8,-5,-3,2,-10,5,-9,-7,10,5,7,-5,-2,5,2,-7,8,-3,8,-5,8,8,10,4,-1,3,-4,10,5,8,-3,-10,-6,-5,8,-3,-9,-4,4,9,6,5,2,9,-1,7,-1,6,-9,2,-1,4,5,9,5,-7,3,10,-7,3,6,-1,-6,-4,10,-4,10,2,-7,5,2,10,3,-9,1,-10,3,-5,8,7,5,10,-1,-9,3,8,-7,1,2,-2,-5,1,-4,8,-6,-2,6,4,-6], dtype = "int32")#candidate|9537|(1920,)|const|int32
call_9534 = relay.TupleGetItem(func_6702_call(relay.reshape(const_9535.astype('uint64'), [5, 11, 9]), relay.reshape(var_9536.astype('float64'), [1, 650]), relay.reshape(const_9537.astype('int32'), [8, 240]), ), 1)
call_9538 = relay.TupleGetItem(func_6706_call(relay.reshape(const_9535.astype('uint64'), [5, 11, 9]), relay.reshape(var_9536.astype('float64'), [1, 650]), relay.reshape(const_9537.astype('int32'), [8, 240]), ), 1)
output = relay.Tuple([bop_9505,call_9534,const_9535,var_9536,const_9537,])
output2 = relay.Tuple([bop_9505,call_9538,const_9535,var_9536,const_9537,])
func_9559 = relay.Function([var_9503,var_9504,var_9536,], output)
mod['func_9559'] = func_9559
mod = relay.transform.InferType()(mod)
var_9560 = relay.var("var_9560", dtype = "uint32", shape = ())#candidate|9560|()|var|uint32
var_9561 = relay.var("var_9561", dtype = "uint32", shape = (14, 10, 2))#candidate|9561|(14, 10, 2)|var|uint32
var_9562 = relay.var("var_9562", dtype = "float64", shape = (5, 130))#candidate|9562|(5, 130)|var|float64
output = func_9559(var_9560,var_9561,var_9562,)
func_9563 = relay.Function([var_9560,var_9561,var_9562,], output)
mutated_mod['func_9563'] = func_9563
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7622_call = mod.get_global_var('func_7622')
func_7623_call = mutated_mod.get_global_var('func_7623')
call_9576 = relay.TupleGetItem(func_7622_call(), 5)
call_9577 = relay.TupleGetItem(func_7623_call(), 5)
var_9588 = relay.var("var_9588", dtype = "int16", shape = (220, 12))#candidate|9588|(220, 12)|var|int16
bop_9589 = relay.minimum(call_9576.astype('int16'), var_9588.astype('int16')) # shape=(220, 12)
bop_9592 = relay.minimum(call_9577.astype('int16'), var_9588.astype('int16')) # shape=(220, 12)
func_6702_call = mod.get_global_var('func_6702')
func_6706_call = mutated_mod.get_global_var('func_6706')
const_9597 = relay.const([2,-8,2,-10,-4,1,8,10,-4,-9,-9,9,6,-9,-9,-10,2,-10,1,-7,-4,4,4,4,-5,2,10,6,-5,2,1,7,-1,10,-6,6,7,2,6,-3,2,4,7,10,5,6,-6,-9,-1,-1,-6,-6,9,-8,7,7,-7,3,-1,7,-7,-1,-7,1,7,-4,-9,10,2,4,-9,1,1,3,-9,7,-5,-2,-9,10,-7,1,-9,-3,-10,2,-7,7,-9,8,-1,3,-5,8,-7,10,-7,9,3,-8,-10,-2,5,5,-2,-1,9,-10,-8,6,9,1,-10,-3,-6,-6,1,-5,9,-10,2,3,7,4,2,-3,10,8,-8,-3,-1,-3,8,1,-6,10,4,7,-7,-7,5,-1,-7,4,-1,10,-7,6,-10,5,-10,2,-8,-7,4,-3,7,-3,-4,-10,6,-7,-2,8,-2,8,8,7,-10,1,10,2,-10,2,2,9,1,-10,-8,6,3,-1,-5,9,7,-1,7,-6,8,1,9,9,5,-4,-10,-5,6,6,-6,-9,6,-10,3,10,-4,-1,-2,-5,-2,3,1,4,4,1,6,5,-1,-7,-2,4,-9,-9,7,-9,4,10,-8,5,6,-3,7,6,-4,-2,7,2,-3,6,-6,-1,-5,-6,-7,8,-8,-6,1,-4,-3,1,2,-8,8,-5,7,5,-8,8,3,-9,-6,-7,-6,-2,-7,1,-8,-2,-2,-1,6,-2,8,-8,-5,1,3,-8,6,8,-3,-3,-9,-7,4,10,5,-4,4,-3,10,-2,-1,2,10,-3,10,-6,-10,7,-5,6,1,-5,2,5,4,-5,-10,2,-6,5,-10,-4,-7,6,2,-4,-2,7,6,7,9,-5,-10,1,4,1,-8,-4,-10,9,-2,4,-9,-9,-2,7,10,-2,-2,6,8,2,6,3,6,-7,-4,-4,1,9,2,7,-1,2,-4,1,-10,10,-9,-2,-4,5,8,-10,-7,-2,-9,2,-10,3,-5,-7,-7,8,9,-3,9,-10,1,5,1,6,-8,9,-3,3,-9,2,7,-4,-10,-1,6,5,3,3,9,3,-6,-7,-9,6,1,5,-7,-6,7,7,9,9,4,-4,-1,-10,1,5,-8,-9,-8,8,-3,-2,2,-4,-1,-10,4,10,3,4,9,-6,-4,-7,7,-8,2,3,-1,-2,9,-9,-6,-2,-9,4,8,7,3,4,3,-4,-4,-8,5,7,-2,1,-5,8,9,-4,-4,-1,-6,8,-7,-4,-9,-5,-2,10,-9,3,-2,-8,5,-10,-4,5,-5,1,5,-2,10,1,-10,-6,-10,10,2,-2,1], dtype = "uint64")#candidate|9597|(495,)|const|uint64
const_9598 = relay.const([-7.195744,6.309655,7.170791,7.887047,-6.908871,8.924961,0.329291,2.059232,6.983647,4.706359,-3.200381,-9.773829,0.229318,-4.972457,5.636097,-2.808562,4.327103,-7.282672,6.240596,-6.507292,8.122419,-0.872074,-4.417555,-8.865954,0.016463,-4.342617,5.106686,5.822842,-1.055845,9.227595,4.663711,-1.199667,5.583172,1.660909,-6.232697,5.297983,4.186029,-1.334818,9.243417,-4.177790,-6.190766,-4.397413,3.716549,-2.837388,3.738253,9.888405,4.450466,1.699499,-5.067456,2.571412,7.139867,1.806585,2.616631,-4.535441,-1.075715,5.253525,2.314563,5.398935,1.344266,8.698930,3.681784,9.893876,-5.945852,-3.811139,0.033625,9.598512,-8.939065,-9.642123,-4.032821,-3.112990,7.898093,-3.943665,8.939579,3.221297,2.301836,6.656192,-0.361113,-0.029834,8.265553,4.320778,-3.725849,5.361122,0.198163,-0.512464,5.382082,5.905671,-8.390838,8.493620,2.358712,5.012423,3.767773,5.313088,5.815455,-6.030797,-5.944269,-7.617349,-2.984011,6.838680,0.722615,-8.572056,-8.565000,9.476219,1.146388,-4.836535,0.383950,8.933818,-8.569927,-6.292167,-3.229881,4.479864,1.802351,-8.084353,3.584377,1.921010,8.952681,9.223090,7.946023,6.331792,-4.834776,9.105543,5.796361,-9.083670,-4.281375,2.222544,-8.276433,5.116335,-0.284636,8.718782,-9.279819,-6.574324,-8.486052,6.181061,-8.545765,-9.513729,5.239644,8.766843,2.255356,-8.948753,-5.658073,-6.097204,-1.350457,-6.879067,6.276111,0.588761,7.236691,-0.540041,5.035500,2.289124,-4.929382,-2.230604,-1.018806,-8.521345,-0.845211,2.691429,-9.018423,3.569462,2.649451,-1.019641,4.125631,-6.212422,0.759321,9.512802,6.723217,9.252542,-8.416011,6.685322,8.595153,-4.946017,-7.213151,-6.646413,-7.516144,-9.153115,-7.790759,-8.911280,-4.913666,-1.637577,9.766544,-3.854149,-0.351742,-7.496260,-5.239515,8.010156,2.562585,6.110915,4.610771,0.978596,9.541577,-7.722839,-2.374538,7.986447,8.891472,-6.087660,3.845444,7.420415,-1.115643,8.468588,7.328219,-1.139188,-4.780322,8.552924,-9.756978,8.858917,-0.236942,0.124033,3.946095,2.597957,-5.779687,6.703592,-6.634767,0.957731,2.723358,9.404950,-6.703696,3.962288,5.124944,-0.672693,9.486530,4.433927,4.698129,-8.452543,-4.315764,-2.739636,-4.963501,-3.905697,-2.866795,4.326793,-6.975054,2.220320,0.950297,-9.784346,9.926563,-5.258768,-7.703309,-9.299273,-2.498092,-9.802838,-4.630101,0.774325,5.370465,4.806385,9.823260,8.541581,-9.117051,-4.291604,7.388925,-2.162474,-0.797948,-5.500034,9.664108,-6.111702,6.565344,-1.874441,2.699662,-6.371606,6.351905,2.811301,7.144285,2.085578,2.191576,6.924546,-5.103145,3.911970,-4.330655,3.470978,-4.144385,4.188766,6.698360,7.878343,2.889035,5.347787,6.391225,8.708874,1.635211,-9.584198,2.358360,1.372970,-3.363281,-1.142848,-0.249554,-0.206282,4.376293,5.674700,5.552365,-8.907165,-3.461889,2.481189,-0.784963,-0.842182,1.151362,-1.581030,-0.685470,-2.983731,-3.370654,6.851949,9.921400,5.848203,4.526840,1.655410,3.707614,6.424320,0.921149,2.265842,-2.019592,0.424579,7.500198,-6.272181,3.493575,-9.682874,8.940568,0.413282,5.009293,0.531572,7.677897,6.734813,-5.992168,-1.268234,5.396449,1.058040,-3.009397,-4.453357,-7.455404,4.964334,0.012298,3.589767,-2.208021,2.659115,6.897095,-9.682844,7.884052,0.149629,3.902005,3.281908,-0.136891,-5.521999,9.744483,-9.240852,5.990702,-0.044488,5.584147,8.709772,-0.252282,8.831212,6.525724,-1.877820,1.644075,1.401811,7.620431,3.242158,9.940583,-1.596874,-8.661771,6.439723,4.551240,7.165870,3.481388,-0.414025,1.088694,-2.525663,7.753463,-2.572329,-3.171610,1.839258,-8.637070,3.907652,-4.471530,5.133211,-2.061787,-8.133961,-0.093552,-3.052511,-4.154171,2.466936,-5.516930,8.752158,-9.679312,-1.004511,5.922988,-8.825728,0.190885,0.605097,-0.839028,-4.984046,8.127095,-9.621449,-7.186440,-2.665269,2.403406,9.000222,1.024524,5.577999,-2.518235,-5.011563,-2.383060,6.085908,0.135599,5.417645,7.444004,-2.259046,8.479515,-8.563041,-1.210080,-8.117330,-4.816731,8.541472,-9.742752,4.673015,3.606735,-8.187027,5.253452,6.370732,0.745578,-7.781273,-9.518572,2.487306,6.824840,-9.472299,-3.900916,4.997041,-3.224794,-4.693755,7.489240,0.713540,-9.222414,-1.495729,3.336762,-5.571079,7.560328,-2.082488,4.075672,8.317921,2.770130,-0.709507,-9.618546,1.979557,2.476520,-7.109183,3.318973,8.055357,6.619521,0.452350,0.144335,6.767234,-8.494470,-2.330171,-3.017277,-4.628879,7.208738,0.091690,-7.430173,-6.151072,9.309590,5.389035,-4.070909,-2.669299,-0.380664,6.402751,9.867586,-0.508009,-2.807111,8.587366,-6.235056,-9.570473,8.034634,-8.045041,-2.516064,0.929949,7.175590,5.283009,6.236762,1.413144,1.354180,6.762393,-5.104436,5.292593,-4.097813,7.368238,-1.117725,0.947981,9.038826,-3.951987,-9.987922,6.270401,-5.843642,-7.048482,-1.173533,7.896826,-6.687509,-9.689038,3.447924,1.231877,2.005142,-6.079480,-5.182242,7.163399,9.748467,-0.874234,0.848442,9.699495,-4.703977,4.626021,-8.030703,-4.590771,4.491535,2.551513,-7.154026,-4.819951,2.640564,-0.921282,-7.988643,7.941464,3.030675,-9.770312,-2.967028,-3.160645,7.489234,6.884954,-7.563938,-9.837574,1.072197,-6.275340,-9.368171,5.682120,-7.522950,1.125183,9.903104,-2.358707,-3.798930,4.718965,6.990301,2.390178,2.080617,-9.750248,1.804264,4.788606,-2.972992,-3.645971,-9.263915,-4.493536,1.086895,-3.977774,-7.869665,8.687587,8.062723,6.290163,-0.746763,7.550215,-6.124061,-6.673229,-2.671128,-8.652197,0.531087,5.039613,-2.167534,-0.424126,7.260073,-6.092378,-1.720891,9.260018,-1.585899,-7.353478,7.938415,-7.014743,8.426248,0.693901,-2.566393,-2.274822,0.840464,6.795873,9.911521,1.560870,-5.040317,-8.173481,-0.421146,-3.817532,4.646508,0.012927,-1.699257,-9.814253,-1.891696,5.611315,5.663713,3.653677,9.638830,-5.802301,-6.469464,-7.896655,7.535520,3.830085,-4.183316,-7.690275,-5.790790,-1.610718,8.068225,-8.298078,0.047715,-0.205564,0.552083,9.157988,-8.602522,5.899797,4.774101,-9.663569,2.932991,-1.917917,1.608635,1.709096,5.957409,8.872943,-8.561764,-4.679446,7.458539,-5.154417,-3.679740,-1.875049,7.243130,-1.099233,2.430719,9.161376,-4.597049,-8.564589,-3.247049,-0.812084,0.547483,-0.962835,9.698712,0.405558,7.100807,-1.305183,8.016806,-8.410505,-1.965628,-9.441861,1.866454,-3.732358,8.767533,-0.663024,-0.439272,1.584899,-7.797183,2.353350,7.230444,-0.608227,-4.082930,-5.144900,3.420754,-1.126999,1.698053,0.269571,-8.766226,4.195887], dtype = "float64")#candidate|9598|(650,)|const|float64
var_9599 = relay.var("var_9599", dtype = "int32", shape = (1920,))#candidate|9599|(1920,)|var|int32
call_9596 = relay.TupleGetItem(func_6702_call(relay.reshape(const_9597.astype('uint64'), [5, 11, 9]), relay.reshape(const_9598.astype('float64'), [1, 650]), relay.reshape(var_9599.astype('int32'), [8, 240]), ), 0)
call_9600 = relay.TupleGetItem(func_6706_call(relay.reshape(const_9597.astype('uint64'), [5, 11, 9]), relay.reshape(const_9598.astype('float64'), [1, 650]), relay.reshape(var_9599.astype('int32'), [8, 240]), ), 0)
func_8847_call = mod.get_global_var('func_8847')
func_8850_call = mutated_mod.get_global_var('func_8850')
var_9605 = relay.var("var_9605", dtype = "uint16", shape = (8, 260))#candidate|9605|(8, 260)|var|uint16
call_9604 = relay.TupleGetItem(func_8847_call(relay.reshape(var_9605.astype('uint16'), [104, 20])), 1)
call_9606 = relay.TupleGetItem(func_8850_call(relay.reshape(var_9605.astype('uint16'), [104, 20])), 1)
uop_9607 = relay.log(call_9604.astype('float32')) # shape=(13, 10, 16)
uop_9609 = relay.log(call_9606.astype('float32')) # shape=(13, 10, 16)
output = relay.Tuple([bop_9589,call_9596,const_9597,const_9598,var_9599,var_9605,uop_9607,])
output2 = relay.Tuple([bop_9592,call_9600,const_9597,const_9598,var_9599,var_9605,uop_9609,])
func_9612 = relay.Function([var_9588,var_9599,var_9605,], output)
mod['func_9612'] = func_9612
mod = relay.transform.InferType()(mod)
mutated_mod['func_9612'] = func_9612
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9612_call = mutated_mod.get_global_var('func_9612')
var_9614 = relay.var("var_9614", dtype = "int16", shape = (220, 12))#candidate|9614|(220, 12)|var|int16
var_9615 = relay.var("var_9615", dtype = "int32", shape = (1920,))#candidate|9615|(1920,)|var|int32
var_9616 = relay.var("var_9616", dtype = "uint16", shape = (8, 260))#candidate|9616|(8, 260)|var|uint16
call_9613 = func_9612_call(var_9614,var_9615,var_9616,)
output = call_9613
func_9617 = relay.Function([var_9614,var_9615,var_9616,], output)
mutated_mod['func_9617'] = func_9617
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9624 = relay.var("var_9624", dtype = "float32", shape = (12, 7, 1))#candidate|9624|(12, 7, 1)|var|float32
const_9625 = relay.const([[[-7.161244,6.719255,9.773456,2.783678],[4.124142,-7.743814,0.479308,-1.886998],[-8.416775,-2.749407,-9.467783,1.149073],[8.311835,-4.818925,-3.544281,4.034988],[-3.587655,-3.259789,9.220880,-4.398108],[-9.257442,4.253787,-4.689560,-7.656082],[-0.229894,3.242377,-9.639134,1.982506]],[[1.721585,2.430668,5.941676,-5.280357],[0.009853,5.309356,-4.456385,9.269700],[2.526779,-3.692166,-8.973972,-3.996452],[-2.880060,-9.637301,8.767113,-4.232725],[3.888184,-1.387399,-0.726394,-7.589942],[2.986379,-5.795386,-2.006666,1.938597],[4.194338,5.078150,-0.964583,-4.767134]],[[-2.982686,7.220128,-9.381194,-5.770899],[8.732473,9.278310,7.388516,7.647183],[8.635903,1.363875,2.179859,3.496330],[-6.674616,-5.471724,6.150735,4.096946],[7.003150,1.958788,-8.462815,-6.994179],[-4.903615,1.519830,9.982207,3.588220],[4.228088,-1.594327,6.035267,7.985923]],[[3.690549,-6.932573,-1.512402,-0.192987],[-4.817556,-6.442054,4.966555,-5.065232],[-7.593943,7.837100,-4.231543,-5.038780],[9.349799,-2.743825,4.426505,1.082998],[6.898957,2.335167,2.032762,-2.522575],[0.221524,8.610871,5.806076,-6.188666],[0.529901,3.984575,-6.446901,5.808640]],[[5.894011,-2.743757,4.415212,9.043492],[7.784480,2.683112,-9.171927,-4.345015],[-7.629239,-9.229736,0.769360,8.271963],[-1.884520,-3.232796,-5.855214,4.499997],[5.601155,-2.071104,6.191639,-0.232857],[-1.821967,6.162162,7.832359,-7.007131],[5.387603,4.518936,-0.660902,-5.258796]],[[8.456047,1.563797,-0.595347,4.906328],[6.732269,1.899314,7.364442,4.626031],[5.458846,-7.711512,0.414270,-2.873808],[3.078213,9.667424,-7.542393,8.952673],[7.242336,9.900352,0.817547,7.286086],[8.783353,4.673248,-9.550146,-6.265434],[4.305215,-9.504937,-8.612063,-8.036839]],[[-1.794100,5.222834,1.818973,4.778621],[7.941745,-2.665033,1.015847,4.421491],[-1.978949,-0.857394,-4.404126,-8.379383],[5.579443,-8.735438,7.916251,-0.308303],[-6.725107,-1.245294,-4.934156,-6.409454],[7.650751,-7.478943,0.172362,3.169967],[-2.042926,-1.023081,-9.239692,-4.343959]],[[-2.432861,6.026108,1.610914,9.154939],[0.976740,9.582758,9.676745,-2.292641],[6.754270,-7.827370,-2.054098,-6.568742],[3.586696,4.608076,-8.925453,6.131056],[-0.225892,-5.126517,-5.151671,-6.555110],[-9.201582,7.131777,1.968649,-1.559342],[-1.769794,0.466519,-9.335042,7.181688]],[[7.108584,8.216633,3.200835,-3.046437],[-1.166063,7.671163,-5.121450,-7.276749],[-8.596942,7.492581,8.668288,-7.640520],[-6.304073,0.757556,2.274344,-4.359753],[8.747915,-0.159926,-8.971264,2.108609],[-1.977444,-6.778164,-4.896386,0.525333],[-4.611952,-2.961956,-0.840955,-3.699031]],[[9.085795,3.567313,-1.277493,9.705824],[1.212762,-3.476643,-2.342882,-0.108506],[7.432469,1.434789,-4.504519,-9.425013],[0.624389,-3.166095,7.956102,-8.624770],[-5.541711,9.456470,1.174493,9.683002],[8.932972,4.004953,9.446721,-7.465566],[-5.627340,-4.266585,-1.549713,6.125024]],[[6.778141,0.395558,-4.121919,3.684987],[3.982589,-0.667975,2.084348,8.062931],[3.077960,-2.220066,6.051086,1.303075],[1.868555,-7.463200,-6.182524,7.979358],[0.487294,-2.494825,0.269902,2.006246],[7.258372,7.508890,8.443149,4.781828],[5.568512,8.663194,-4.068610,-1.270772]],[[-3.913320,1.084782,7.542945,-9.127571],[5.247771,-8.477387,0.729172,8.091720],[9.152981,7.124699,7.124579,-3.187787],[6.110268,4.689226,-8.795885,3.066947],[-0.242396,-8.406010,5.332626,0.631863],[6.461898,4.631456,7.486968,6.103304],[-8.829092,4.183897,1.150106,-3.690829]]], dtype = "float32")#candidate|9625|(12, 7, 4)|const|float32
bop_9626 = relay.add(var_9624.astype('float32'), const_9625.astype('float32')) # shape=(12, 7, 4)
func_7384_call = mod.get_global_var('func_7384')
func_7386_call = mutated_mod.get_global_var('func_7386')
call_9632 = func_7384_call()
call_9633 = func_7384_call()
uop_9637 = relay.sqrt(const_9625.astype('float64')) # shape=(12, 7, 4)
output = relay.Tuple([bop_9626,call_9632,uop_9637,])
output2 = relay.Tuple([bop_9626,call_9633,uop_9637,])
func_9648 = relay.Function([var_9624,], output)
mod['func_9648'] = func_9648
mod = relay.transform.InferType()(mod)
var_9649 = relay.var("var_9649", dtype = "float32", shape = (12, 7, 1))#candidate|9649|(12, 7, 1)|var|float32
output = func_9648(var_9649)
func_9650 = relay.Function([var_9649], output)
mutated_mod['func_9650'] = func_9650
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6041_call = mod.get_global_var('func_6041')
func_6042_call = mutated_mod.get_global_var('func_6042')
call_9659 = relay.TupleGetItem(func_6041_call(), 0)
call_9660 = relay.TupleGetItem(func_6042_call(), 0)
func_2666_call = mod.get_global_var('func_2666')
func_2669_call = mutated_mod.get_global_var('func_2669')
const_9680 = relay.const([6,-10,-8,-7,6,-3,-2,6,2,-9,8,7,-5,4,-8,7,-1,-7,5,-5,9,-3,8,1,5,3,6,-3,3,-4,-2,-6,-8,-1,-9,6,-6,-9,10,6,-1,-1,1,7,-3,6,4,8,5,4,6,1,9,-8,-1,-6,-3,1,-1,7,-9,-9,5,4,-7,-3,10,-6,-6,-10,7,1,-3,4,-9,7,-6,-3,-2,-2,-5,1,-10,6,9,3,2,-6,6,-8,-2,5,9,-10,4,9,8,-7,-5,4,-1,-2,1,-7,-9,-4,-7,-1,-8,7,-5,-3,4,-3,5,5,-2,-6,-4,-2,7,5,4,8,9,5,-10,10,8,-3,9,-8,4,8,8,-10,-5,-7,-3,2,-10,9,-5,4,-2,-6,-6,4,8,-9,-3,9,5,8,1,-1,8,3,-9,-5,-5,-2,5,4,-9,2,-1,9,-7,6,-8,10,-9,7,9,6,5,6,5,7,-2,-7,10,-3,-4,6,7,8,-9,1,9,4,9,-7,-2,10,3,-9,7,1,-2,-5,-5,3,8,-5,-5,-4,-1,-9,-7,-10,-8,5,-10,9,5,1,5,-5,-9,-3,-9,9,7,-6,-8,-5,5,6,-6,7,6,-1,-3,-5,7,9,4,10,9,-6,-2,7,-2,-3,5,2,-10,-2,9,5,5,4,3,1,-9,9,9,-9,7,1,-1,-3,6,-4,-3,3,-5,7,2,-10,-6,-4,-4,-8,-4,5,2,8,5,4,-3,8,-3,-3,-3,-8,1,6,7,-8,-4,6,-3,5,8,-6,6,6,8,-6,4,2,10,-3,-3,-5,6,-3,8,4,9,7,-3,7,-4,-2,1,-2,-1,5,5,-9,5,-9,3,-1,3,-8,-2,-6,9,3,-2,-10,-1,5,9,9,9,9,1,-4,9,-1,-8,5,6,7,4,-9,2,-1,9,5,7,-9,3,3,5,2,2,1,5,6,-5,4,-10,-10,-6,8,-8,-4,-10,4,-2,9,6,-3,-5,-10,-3,-10,1,3,-5,-1,-6,8,1,-1,10,8,-7,-7,-2,-5,-3,-10,-4,-2,-4,6,7,5,-5,2,6,9,2,8,-3,1,-9,-10,3,-6,4,-6,3,8,10,3,-1,1,-10,-1,5,9,-2,9,-1,-4,-6,-4,6,6,6,-3,-4,2,5,-7,5,4,-4,-5,-9,-10,1,-3,7,-2,1,-2,2,-6,-9,-7,8,-2,-8,9,-5,-2,2,3,5,4,3,-10,2,-1,-1,-3,-4,5,-3,-7,3,9,5,7,-9,7,-1,-6,4,-1,-8,8,-3,-1,-5,-7,10,-4,-7,-6,-5,8,-9,-6,2,2,6,-1,10,5,2,4,7,-6,2,-3,-4,-3,-5,-8,10,8,-7,-5,3,-2,4,-7,-7,-7,7,-6,-1,4,1,3,-1,9,10,-6,-4,7,6,8,1,2,5,8,10,10,-7,5,3,-7,6,5,-10,7,-6,-9,2,4,-9,3,-8,1,7,-3,-9,-5,-2,6,-3,-9,-10,6,10,-1,-6,-10,-9,-10,-8,9,3,-2,-4,-8,3,-6,6,7,3,6,-4,6,9,2,-8,7,-6,-6,-9,-7,-2,5,6,3,-2,1,-5,-9,-10,4,-3,9,9,-10,-10,1,10,9,2,5,10,9,-10,2,9,-10,-8,-2,6,7,10,9,6,8,-9,1,9,-5,-10,3,-4,4,1,10,9,-5,-5,-1,-4,10,-1,1,5,-1,4,4,4,-1,-3,6,6,3,8,6,-10,-5,1,1,3,-9,-5,-6,-1,7,6,8,-5,-7,2,6,10,-4,-9,-7,6,-9,10,-1,-10,7,-10,-10,-3,-1,-10,10,8,3,9,-10,-7,-6,-4,-10,-3,-2,3,1,9,-2,9,-1,5,6,5,9,-5,-2,1,-3,10,-1,-9,8,4,-9,3,-2,5,10,-2,-5,-3,-7,-9,-1,8,-2,6,-7,2,-3,-7,1,1,-3,10,1,4,-10,-8,4,4,-5,7,-1,9,4,-7,9,8,-10,-1,-4,8,-8,4,4,-7,10,-10,-5,-3,4,-5,7,-6,-6,9,-2,3,-5,3,6,-10,-5,7,9,8,1,8,-1,-6,-3,-4,-4,-6,-5,-10,-8,9,-1,3,10,5,7,9,8,-4,10,6,6,-3,-1,-3,-5,2,1,-8,-7,2,4,1,-5,-5,-2,9,2,-8,-6,2,5,7,-9,7,-6,9,10,-6,-4,10,-1,-5,-10,8,6,-5,-3,-7,7,-8,4,-7,-7,9,-5,9,-7,-10,7,-3,7,-4,-2,5,-4,6,-10,4,7,1,2,7,4,6,-5,-4,7,-5,6,8,-2,-2,9,-2,-7,6,2,-9,-1,8,4,-8,-10,9,10,-10,4,-7,-5,-7,3,-4,-9,1,-9,-3,3,-3,-4,-8,2,9,9,-8,6,-9,-1,5,-7,7,7,9,3,2,-4,2,-10,1,10,4,-5,6,-5,3,7,-7,3,-4,-6,4,7,-8,-8,4,6,-5,-2,-8,-1,-10,2,3,-3,-2,1,1,-1,-5,-7,8,-9,-6,-5,10,5,4,-7,-5,-6,-1,10,-7,10,1,-10,-3,-3,10,3,-3,9,-8,-8,9,9,-1,2,1,9,-9,2,-8,1,2,-9,4,6,-6,-4,-6,-5,-1,6,-8,3,-2,1,1,-9,6,10,5,2,8,-6,-1,5,5,4,-6,3,4,-9,8,8,3,-3,-3,10,3,8,-7,5,-4,-7,8,10,6,6,5,-7,9,-9,-7,4,6,-5,6,-5,1,-3,-4,10,10,5,8,-6,-1,1,-5,-9,8,-2,-6,-5,10,5,-8,-5,10,6,1,-9,6,-2,5,-9,-7,-7,9,9,9,5,-10,-8,10,2,-5,-4,9,3,9,-6,5,3,-5,-3,-8,-4,9,-1,-7,10,4,-6,-4,-8,10,-1,-9,-9,7,-1,-10,-5,8,-10,9,-8,6,7,-10,4,10,5,2,-4,-5,5,-9,-8,8,-1,-8,1,4,5,-2,-5,6,10,3,-6,8,-8,2,3,2,9,6,7,6,3,2,-8,6,-6,-3,-9,-4,9,1,-7,9,-6,-6,2,-6,9,3,-6,-9,-9,-5,-5,-5,8,-10,10,3,-4,-8,10,-5,2,8,6,2,-10,-6,-9,-3,9,-4,-5], dtype = "int32")#candidate|9680|(1200,)|const|int32
call_9679 = func_2666_call(relay.reshape(const_9680.astype('int32'), [5, 15, 16]), relay.reshape(const_9680.astype('int32'), [5, 15, 16]), )
call_9681 = func_2666_call(relay.reshape(const_9680.astype('int32'), [5, 15, 16]), relay.reshape(const_9680.astype('int32'), [5, 15, 16]), )
func_7122_call = mod.get_global_var('func_7122')
func_7124_call = mutated_mod.get_global_var('func_7124')
call_9689 = relay.TupleGetItem(func_7122_call(relay.reshape(const_9680.astype('int32'), [1200, 1])), 1)
call_9690 = relay.TupleGetItem(func_7124_call(relay.reshape(const_9680.astype('int32'), [1200, 1])), 1)
func_7019_call = mod.get_global_var('func_7019')
func_7021_call = mutated_mod.get_global_var('func_7021')
call_9693 = relay.TupleGetItem(func_7019_call(), 0)
call_9694 = relay.TupleGetItem(func_7021_call(), 0)
bop_9698 = relay.right_shift(call_9689.astype('int16'), relay.reshape(call_9679.astype('int16'), relay.shape_of(call_9689))) # shape=(1200, 1)
bop_9701 = relay.right_shift(call_9690.astype('int16'), relay.reshape(call_9681.astype('int16'), relay.shape_of(call_9690))) # shape=(1200, 1)
func_5503_call = mod.get_global_var('func_5503')
func_5506_call = mutated_mod.get_global_var('func_5506')
const_9707 = relay.const([[-3,6,5,-4,-7,-8],[1,2,-7,-7,8,-10],[8,1,5,6,-10,9],[6,-10,4,-3,-8,-5],[3,-1,-3,-6,-8,-1],[-6,-9,9,-2,1,7],[9,-2,-5,3,8,-9],[-7,-2,-1,8,-9,-4],[6,1,-9,5,-8,-7],[6,3,6,-7,-8,-7],[-1,4,3,6,7,1],[8,4,-4,1,10,4],[-7,-8,9,1,10,9],[7,-7,5,-10,3,-10],[-4,-7,-6,-10,-1,9],[-4,9,8,-9,5,9],[3,2,-3,3,5,10],[10,-6,8,2,-6,6],[-8,10,1,3,9,10],[-8,-9,-2,6,-1,-4],[8,3,-4,9,-5,7],[-8,-10,6,9,2,8],[-7,7,-5,-8,-4,8],[-9,-3,-3,10,3,-10],[-1,-4,9,8,-4,-5],[-5,-5,-4,-8,7,-9],[4,-4,1,-5,-7,7],[10,-3,10,7,-10,6],[-3,-1,6,3,-1,-6],[-4,-5,1,-6,-9,7],[-6,-7,-5,2,-5,-10],[-5,2,1,6,-8,-6],[-5,10,-1,3,9,6],[3,4,3,1,-9,1],[3,-7,10,-10,6,-9],[8,6,2,-3,-10,-2],[-3,10,-8,-1,-8,-1],[-2,5,2,-8,-8,10],[-6,4,10,-8,1,-4],[-1,-9,5,-9,-3,-6],[-8,7,-9,-5,-10,1],[-7,4,9,8,-4,8],[8,-6,-2,8,-9,8],[-2,4,-2,-1,-6,-8],[2,6,4,5,5,-3],[-8,-9,-5,-6,9,-10],[-5,-3,-5,-9,-8,5],[2,4,-5,-4,-9,9],[-1,-3,-5,5,-4,-4],[-9,8,-9,-9,-6,8],[-1,4,9,-4,-8,-3],[1,-4,8,6,10,-5],[8,2,9,5,6,10],[3,-8,-2,-6,10,-8],[10,6,-7,-1,-6,-8],[4,-5,-3,8,8,8],[6,2,4,2,3,3],[8,-6,-8,-9,8,-3],[-8,8,4,5,10,5],[9,-9,7,4,-6,10],[-5,-6,-3,-7,-1,-7],[10,6,1,-3,1,7],[-4,3,-3,5,2,-2],[-2,3,3,8,-4,-3],[-6,-9,10,4,7,5],[-10,10,4,4,1,9],[9,-7,-4,10,-9,-8],[5,3,1,3,-8,1],[3,8,-7,9,-4,3],[-9,9,-1,6,-1,9],[-7,-1,-3,7,-2,-1],[-1,8,-9,5,-1,-5],[-3,10,10,-6,-10,-1],[3,-9,2,5,2,-3],[4,10,-4,2,8,5],[-1,-2,-10,-4,-3,-10],[-4,-10,-10,-9,3,-2],[4,6,5,-9,-2,5],[-6,-7,-3,3,1,6],[-6,-8,4,-6,3,10],[3,2,10,9,10,2],[2,3,-9,-7,-3,4],[6,-6,1,-6,-5,4],[-8,9,9,-1,7,4],[-2,10,7,-3,-3,-1],[2,1,-8,3,5,5],[-5,5,-10,-7,10,-8],[-1,-8,-9,-9,6,8],[-4,-1,-5,5,3,-2],[-6,7,-8,1,-7,6],[-7,7,-6,9,-8,-10],[-7,2,4,-4,5,-8],[-8,6,9,-3,8,4],[-7,-5,3,9,-10,-7],[5,7,-3,-4,-6,-8],[4,-3,-1,8,10,-4],[-9,-1,4,-3,1,10],[7,-9,-6,-9,-10,5],[-9,-1,6,-10,-10,4],[-10,2,1,7,10,2],[-5,-8,-3,-6,8,1],[-5,-1,-3,9,-3,9],[5,-3,-2,-10,-6,-1],[3,-3,-5,9,7,-4],[-6,-8,-4,-5,2,3],[-3,-2,1,-9,-9,9],[1,3,-9,-10,10,4],[-4,-10,-6,-2,-5,-7],[-6,-3,3,8,-2,-9],[9,-6,9,10,8,2],[4,1,6,6,-6,-6],[2,10,8,5,-3,4],[-8,5,-6,-9,1,-8],[10,9,-4,5,-1,-10],[-8,-4,-3,-3,5,-8],[-7,1,-7,-2,-6,4],[-6,-6,6,3,10,-3],[8,-5,-3,5,-9,5],[9,2,-10,3,-5,-2],[6,3,5,-8,-1,7],[5,-6,-10,10,-10,-3],[1,6,-7,-7,4,-7],[-7,3,10,-3,-1,7],[10,9,10,-10,-7,6],[-5,-7,4,-9,10,10],[9,3,4,1,9,-6],[1,-9,2,-4,-10,-7],[4,-7,5,2,-5,-4],[-7,5,-5,7,6,-8],[-3,7,-3,10,-10,2]], dtype = "int32")#candidate|9707|(130, 6)|const|int32
var_9708 = relay.var("var_9708", dtype = "int32", shape = (1920,))#candidate|9708|(1920,)|var|int32
call_9706 = relay.TupleGetItem(func_5503_call(relay.reshape(const_9707.astype('int32'), [5, 12, 13]), relay.reshape(var_9708.astype('int32'), [1920,]), ), 9)
call_9709 = relay.TupleGetItem(func_5506_call(relay.reshape(const_9707.astype('int32'), [5, 12, 13]), relay.reshape(var_9708.astype('int32'), [1920,]), ), 9)
func_8250_call = mod.get_global_var('func_8250')
func_8252_call = mutated_mod.get_global_var('func_8252')
var_9712 = relay.var("var_9712", dtype = "uint16", shape = ())#candidate|9712|()|var|uint16
call_9711 = func_8250_call(relay.reshape(var_9712.astype('uint16'), []))
call_9713 = func_8250_call(relay.reshape(var_9712.astype('uint16'), []))
uop_9732 = relay.atanh(call_9679.astype('float64')) # shape=(5, 15, 16)
uop_9734 = relay.atanh(call_9681.astype('float64')) # shape=(5, 15, 16)
func_7622_call = mod.get_global_var('func_7622')
func_7623_call = mutated_mod.get_global_var('func_7623')
call_9752 = relay.TupleGetItem(func_7622_call(), 3)
call_9753 = relay.TupleGetItem(func_7623_call(), 3)
bop_9759 = relay.bitwise_and(uop_9732.astype('uint32'), var_9712.astype('uint32')) # shape=(5, 15, 16)
bop_9762 = relay.bitwise_and(uop_9734.astype('uint32'), var_9712.astype('uint32')) # shape=(5, 15, 16)
output = relay.Tuple([call_9659,const_9680,call_9693,bop_9698,call_9706,const_9707,var_9708,call_9711,call_9752,bop_9759,])
output2 = relay.Tuple([call_9660,const_9680,call_9694,bop_9701,call_9709,const_9707,var_9708,call_9713,call_9753,bop_9762,])
func_9766 = relay.Function([var_9708,var_9712,], output)
mod['func_9766'] = func_9766
mod = relay.transform.InferType()(mod)
var_9767 = relay.var("var_9767", dtype = "int32", shape = (1920,))#candidate|9767|(1920,)|var|int32
var_9768 = relay.var("var_9768", dtype = "uint16", shape = ())#candidate|9768|()|var|uint16
output = func_9766(var_9767,var_9768,)
func_9769 = relay.Function([var_9767,var_9768,], output)
mutated_mod['func_9769'] = func_9769
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9393_call = mod.get_global_var('func_9393')
func_9395_call = mutated_mod.get_global_var('func_9395')
call_9778 = relay.TupleGetItem(func_9393_call(), 0)
call_9779 = relay.TupleGetItem(func_9395_call(), 0)
output = call_9778
output2 = call_9779
func_9780 = relay.Function([], output)
mod['func_9780'] = func_9780
mod = relay.transform.InferType()(mod)
mutated_mod['func_9780'] = func_9780
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9780_call = mutated_mod.get_global_var('func_9780')
call_9781 = func_9780_call()
output = call_9781
func_9782 = relay.Function([], output)
mutated_mod['func_9782'] = func_9782
mutated_mod = relay.transform.InferType()(mutated_mod)
const_9787 = relay.const([[[1.148707,-3.265311,-5.743275,5.620802,-5.625165,-6.245098,9.129208,-4.114101,0.048256],[-6.815418,4.924182,9.170892,-9.825268,4.655604,8.116495,4.061438,1.168052,5.549000],[-9.009807,-9.325082,-0.014040,5.494472,-5.189046,5.644945,-9.839958,5.829765,7.330608],[-6.371836,8.649000,0.218224,8.734173,-4.013725,-6.119906,-2.774445,-5.952635,9.878041],[6.638283,1.778904,7.012957,-6.057232,-6.907797,1.285894,-8.621701,0.853679,2.160318],[-7.771768,9.485081,3.411032,-4.243861,9.623591,-8.771047,7.391427,0.340204,1.492897],[-8.653258,9.305701,-9.910496,-6.261703,-4.440682,-0.846777,-8.278294,-4.184313,0.964053],[2.416122,5.749992,4.947367,-1.810303,-3.872245,1.817946,-0.608153,9.535913,-2.043071],[-2.179321,-5.654651,-5.347570,6.384937,5.262510,3.948192,2.737768,-1.539472,4.206306],[5.848712,7.697652,1.542098,5.636625,-1.851699,5.855435,-5.451514,2.406648,5.721101],[-2.214482,-9.546061,-8.695148,-4.456043,-9.155995,3.750165,-2.829127,8.061152,-1.275115],[-5.068401,-8.087840,-4.804994,8.542643,-8.450273,1.978981,2.123043,-0.370999,6.627932],[9.874273,-1.938616,-6.705514,6.339445,-2.187909,-4.705588,4.180607,2.467748,9.508469],[-8.674162,-4.475533,7.141765,-2.641007,0.321089,-3.911639,1.837445,6.689812,-1.215766],[5.350752,-2.933296,-2.719034,-5.913245,-3.484042,-2.501334,7.333204,-2.830566,8.262188]],[[3.315893,-2.080804,-2.606402,3.949662,-1.383102,3.223304,4.324926,-5.845548,5.625035],[-0.434144,3.939612,9.603912,1.059519,-0.027994,-4.099514,6.050635,6.172434,0.259085],[1.445913,0.392922,7.157478,-2.256771,-9.208984,-4.757032,5.709022,5.916720,2.885313],[-9.082484,-0.085092,4.476201,-5.440063,-5.018857,-2.077053,9.186154,2.498666,-6.256820],[-2.435553,4.028062,5.965097,-5.699731,-4.504177,9.448414,-3.028934,-3.459499,-9.276006],[3.523087,0.142010,-3.251303,3.742968,2.931781,7.956014,4.165193,-4.184163,-7.324221],[7.054266,-2.096544,-4.076956,3.016829,-0.564920,0.616788,8.564312,2.002725,8.350138],[4.835098,-4.440428,1.896319,-9.570943,2.310425,4.936844,-5.726483,-8.789080,-6.087147],[7.637212,0.616682,-3.240246,-1.195156,9.530079,-8.846546,-8.896871,-8.627000,-1.580766],[-7.772291,-2.264541,9.875778,5.182990,-2.931433,-0.809016,-4.169740,1.033338,1.997662],[6.968334,9.523141,-8.589253,0.015454,1.948708,3.764589,0.208093,-1.285710,6.161212],[0.485649,-6.958124,-7.076466,-4.002112,-5.881446,-8.474335,0.051815,9.620391,-5.672578],[-4.304372,-9.473433,0.009648,3.327326,0.538480,4.423579,1.081087,0.040198,-8.118814],[9.504229,4.965308,-4.773374,1.368243,9.286833,7.115046,-5.283895,8.761679,3.843268],[-2.448316,9.284967,8.121034,-8.543775,7.395875,-6.425451,1.493920,-1.985472,1.899630]],[[-6.630283,3.790696,0.010288,-5.136532,-8.183723,7.389666,-4.067746,6.247095,3.536201],[-6.057520,3.693476,-8.946530,-1.241965,6.842892,-1.540836,3.818844,-0.089634,-5.501611],[4.238343,0.973130,-6.032381,-5.298145,6.905799,-8.419940,-1.781253,-2.010120,-1.462348],[5.868534,4.084498,2.829268,3.157880,-2.029427,1.723465,2.357902,6.667024,2.155819],[3.716062,5.779754,4.524384,-9.127575,-2.677011,5.116639,5.345371,4.297848,-3.971180],[-4.591284,-1.890534,0.064961,9.798858,-5.784681,4.369603,-1.477675,6.289109,8.717804],[9.307745,-4.958275,4.789280,-2.011172,-1.977179,5.939354,-2.197184,-2.491120,-6.303133],[8.805972,3.282444,7.933396,0.991346,4.912942,7.601386,2.185697,-4.003191,-3.952435],[6.454069,-6.559076,9.188345,-2.255216,9.566523,-4.430943,-6.403237,5.786327,6.937722],[3.681054,-1.943328,-7.039736,6.391206,-0.149160,5.224766,6.651083,1.646576,5.715237],[4.214846,9.261242,-7.774370,5.736702,7.916117,-9.339633,9.740814,7.918075,8.974337],[4.138549,1.958489,-2.862753,-3.863811,7.011190,-2.601910,-3.380567,2.754740,-9.567089],[2.591766,-1.674310,1.767673,-0.530141,-0.915640,-8.315022,2.691128,9.302274,-6.484641],[9.714923,8.806678,-1.109551,4.026651,-0.795674,-4.371628,0.322737,-4.808649,-9.604968],[-1.543712,-9.263030,-4.729230,-9.845704,-8.905840,-7.164537,-1.839972,5.715287,0.543026]],[[4.239559,3.154736,5.008061,-8.302263,2.674326,-3.586074,-0.054506,-8.188329,-7.594658],[-5.889130,-7.933994,-8.850074,8.552740,9.686475,-0.283542,-2.646949,8.172046,3.355109],[-0.400266,7.927913,-3.582658,7.632372,3.621634,2.821805,7.029847,-2.126969,-7.874934],[-0.331707,2.203272,8.488297,-0.576727,0.259871,6.476249,-6.927259,4.615072,0.864386],[-8.281864,-9.199122,7.314014,5.311889,0.190388,-3.912546,-3.640589,7.398415,-2.370406],[1.893699,7.331365,8.396436,-7.551759,-1.909752,0.401729,8.154709,-5.537263,6.990392],[-8.564678,-4.327877,3.093584,6.580307,-2.210772,3.102124,5.980185,6.907492,-9.781252],[2.325278,5.762552,-1.305286,-6.597265,-0.631021,4.329659,-1.791818,-5.412562,-9.949315],[4.163864,1.095549,-8.650878,8.705328,7.316762,-1.755789,7.351382,-1.770220,7.566601],[9.614710,3.911914,2.006172,-1.259014,-6.388141,-0.171673,-8.747956,-5.918926,3.816769],[-3.133802,7.150742,-8.703375,3.092787,8.428104,-3.547652,-4.636080,-8.474466,5.353705],[0.334221,2.105392,-6.433357,-3.589494,-2.695723,-2.192556,9.475388,-0.941994,-5.387295],[4.016939,-7.389514,-5.865895,5.958180,-3.307890,-1.452566,7.972113,2.137510,0.892886],[5.014660,-4.080553,-7.556328,5.292031,-7.499700,-7.626180,-2.373293,-9.353633,2.036871],[0.617426,-5.529236,-5.201571,1.092281,-6.076341,9.508881,-3.811704,7.434733,-0.017987]],[[0.827188,4.542462,1.855185,9.032787,6.287722,-4.471779,-3.462720,-1.886414,3.923393],[8.044723,-5.254852,-6.560895,6.134673,-0.151378,6.688443,-3.609617,9.144469,-9.888690],[-9.026001,-7.719663,-9.857577,-3.915415,9.572215,6.008898,3.425104,3.785323,-5.332298],[9.710300,3.458216,-4.424028,-8.790253,7.681545,-5.880049,-6.408818,9.245641,3.499138],[2.519171,-4.052330,-6.462146,-6.343147,-1.187312,4.105552,8.330990,-4.403971,1.077178],[6.675027,-4.447579,9.835688,9.921620,3.748253,-0.256375,-0.380111,-9.376139,-5.437782],[-3.554551,-2.251190,0.288068,5.418422,8.872990,1.887977,-6.160324,-4.338409,8.750020],[7.414524,-3.363101,-8.902643,3.413311,-0.443179,8.507592,-2.880230,0.679064,7.519583],[4.518787,3.110815,-4.024510,0.268195,-3.933670,2.865443,5.995742,-4.633445,4.771947],[-4.925047,0.544911,-9.749009,-8.445027,-1.787637,-2.885106,-9.550849,-7.036144,-4.565718],[-1.319309,5.565375,8.360923,-1.260710,5.289507,-6.344338,3.968345,-7.368768,-7.969764],[-5.625749,6.945498,-5.068071,-2.369903,1.960100,0.617064,3.353139,8.426898,-1.453991],[-8.531504,1.967903,7.176661,-0.465717,0.119930,3.865099,-0.103088,-7.382511,-8.523910],[4.083577,9.338745,9.096096,-1.548809,-0.501795,0.008497,-4.499905,3.282289,1.827253],[-5.981318,-3.831854,-8.504575,8.684760,1.692604,6.259539,-6.277600,-6.208761,7.373935]],[[-1.479429,-6.938290,-7.342293,6.086943,6.568484,-3.255376,4.868708,6.545152,-6.306195],[0.127576,-2.070097,5.442847,-1.449812,-0.273579,0.326293,-9.843166,0.682516,-4.048375],[-1.197919,-3.053134,7.666653,4.126065,2.990194,-9.515277,-1.009773,5.090828,-5.888683],[-8.023318,9.141037,7.388911,9.891101,-7.545651,-1.115066,-8.302424,6.978624,7.640974],[2.215484,0.054946,7.714603,2.781646,-7.030766,-0.781473,2.437822,7.593519,4.257296],[-2.206870,3.377105,0.781549,8.357276,-2.291907,-5.968954,4.770716,-6.846460,3.542599],[-4.538301,-9.173101,3.867302,2.437369,5.164243,7.277721,6.241090,8.805437,3.703507],[8.429826,-0.363745,9.832433,2.088119,4.388580,8.031082,2.438694,6.802200,-3.652628],[-6.584777,0.756778,3.489799,-9.229937,-8.393239,3.342546,-9.671840,0.847382,-2.621981],[8.629620,5.939273,-3.683273,1.317679,0.147403,9.403237,-6.402019,6.661715,4.127592],[-2.080478,-3.219167,-3.869953,-6.477551,-5.319204,1.020133,-8.730291,-9.848551,2.137162],[3.246088,-5.072633,4.160305,-5.337847,6.427903,-2.266218,-5.002591,-9.952265,0.135878],[-0.959504,9.815555,8.761942,-5.536066,6.562095,-6.410471,7.854424,-2.690439,-8.630118],[8.908119,5.786096,-9.321367,1.777994,-7.864764,4.845044,-0.186997,-4.173198,-2.671844],[4.893380,4.526056,0.067784,3.792971,4.162132,-2.768130,-6.858850,7.044748,-4.205867]],[[8.754659,-1.623425,0.657245,3.743171,-1.437608,5.221370,-2.850620,7.932406,-6.753651],[4.203639,9.141993,5.196637,-2.600905,8.449657,1.509600,9.120604,3.059281,-4.710432],[-5.116358,5.209676,0.977996,7.654101,8.360161,-8.772677,-8.851435,6.606483,-9.353662],[3.354272,-3.646989,-5.341588,1.672107,-3.924004,-9.838691,9.813609,4.560210,4.093320],[-7.420850,-4.993131,0.758958,5.826638,-4.280372,2.621829,1.365676,8.055330,9.720847],[8.911830,8.266511,7.628857,-9.848090,-2.279252,3.286883,6.223347,3.887770,6.321878],[-5.800446,-0.099922,-4.949425,5.962570,-5.130636,0.290413,1.904399,-2.690182,9.002447],[-2.807437,3.825538,1.066085,-7.179309,-3.247974,-3.395573,-0.118992,-8.829215,2.757303],[-1.227635,-3.680355,3.604184,-0.591682,-8.145330,0.876629,-3.221291,5.739868,6.684827],[2.706381,7.327876,0.247550,8.312323,-6.012076,-1.307994,-4.700878,6.109849,1.054761],[5.736817,2.404752,6.035111,8.026991,-9.092714,9.433675,9.415336,0.597768,-0.719284],[-4.675807,-6.616988,1.952610,-5.004839,9.391366,-1.660560,-7.740403,-5.578768,5.770031],[-4.285574,5.674833,9.002153,-8.308164,6.631066,-8.372549,-1.554487,-7.628870,7.958699],[1.534189,0.816552,4.829045,-0.950161,8.773636,2.706213,-3.298642,6.177325,-6.284478],[-3.650534,7.675896,-9.771124,0.596232,-4.764885,9.772777,2.062640,5.504401,7.113468]]], dtype = "float32")#candidate|9787|(7, 15, 9)|const|float32
uop_9788 = relay.acos(const_9787.astype('float32')) # shape=(7, 15, 9)
uop_9796 = relay.asinh(const_9787.astype('float32')) # shape=(7, 15, 9)
bop_9799 = relay.less_equal(const_9787.astype('bool'), relay.reshape(uop_9796.astype('bool'), relay.shape_of(const_9787))) # shape=(7, 15, 9)
output = relay.Tuple([uop_9788,bop_9799,])
output2 = relay.Tuple([uop_9788,bop_9799,])
func_9803 = relay.Function([], output)
mod['func_9803'] = func_9803
mod = relay.transform.InferType()(mod)
output = func_9803()
func_9804 = relay.Function([], output)
mutated_mod['func_9804'] = func_9804
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7885_call = mod.get_global_var('func_7885')
func_7886_call = mutated_mod.get_global_var('func_7886')
call_9836 = relay.TupleGetItem(func_7885_call(), 0)
call_9837 = relay.TupleGetItem(func_7886_call(), 0)
output = relay.Tuple([call_9836,])
output2 = relay.Tuple([call_9837,])
func_9842 = relay.Function([], output)
mod['func_9842'] = func_9842
mod = relay.transform.InferType()(mod)
output = func_9842()
func_9843 = relay.Function([], output)
mutated_mod['func_9843'] = func_9843
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9882 = relay.var("var_9882", dtype = "bool", shape = (16, 12, 5))#candidate|9882|(16, 12, 5)|var|bool
const_9883 = relay.const([[[True,True,True,True,True],[True,True,False,False,False],[False,True,True,False,False],[False,False,True,False,False],[False,False,False,False,True],[True,True,False,True,False],[False,True,True,False,False],[True,True,True,True,True],[False,True,False,True,True],[False,True,True,True,True],[True,False,True,False,False],[False,True,True,True,True]],[[False,True,False,True,True],[False,False,False,False,True],[False,False,False,False,True],[False,True,False,True,False],[True,True,False,True,True],[False,True,False,False,False],[True,False,False,True,True],[True,False,False,False,False],[True,False,False,False,False],[True,False,True,True,True],[False,False,False,False,True],[True,True,True,False,True]],[[True,True,True,True,True],[False,True,True,False,True],[True,False,True,True,False],[True,False,False,True,True],[True,True,True,False,True],[True,True,False,False,True],[True,True,True,False,True],[False,True,False,True,True],[True,False,True,False,True],[True,True,True,True,False],[False,True,True,True,True],[True,False,False,True,False]],[[False,True,False,True,True],[True,True,False,True,False],[False,False,False,True,False],[True,True,True,False,False],[False,False,True,True,True],[False,False,False,True,False],[False,True,True,False,False],[False,True,True,True,False],[True,True,False,True,False],[False,False,True,False,False],[False,False,False,True,True],[True,False,False,True,True]],[[False,False,False,True,False],[False,True,False,True,False],[False,False,True,True,True],[False,True,True,True,True],[True,True,True,True,True],[True,False,True,True,False],[False,True,False,False,False],[False,False,True,False,True],[False,True,True,True,False],[False,True,True,True,True],[True,False,False,False,True],[True,True,True,False,False]],[[True,False,True,True,False],[True,False,False,True,False],[True,True,True,False,False],[True,False,False,True,True],[True,False,True,True,False],[False,True,False,False,True],[False,True,False,False,True],[False,True,True,True,False],[True,False,True,True,True],[False,False,True,False,True],[True,True,True,False,False],[False,True,True,False,True]],[[True,False,False,True,False],[True,True,False,False,False],[False,False,True,False,True],[False,False,True,True,False],[True,False,True,False,True],[True,False,False,True,False],[True,False,True,True,True],[True,True,False,True,True],[True,False,True,False,False],[False,False,False,False,True],[False,True,False,True,True],[True,False,False,True,True]],[[False,False,True,True,True],[False,True,False,True,False],[False,False,False,True,False],[False,False,False,False,False],[True,False,True,True,True],[False,False,False,False,True],[True,True,True,True,False],[True,True,True,True,False],[False,True,False,False,True],[False,True,True,False,True],[True,False,False,False,True],[True,False,False,True,True]],[[True,True,False,True,False],[False,False,True,False,True],[False,False,True,False,False],[False,True,True,True,True],[True,False,True,True,False],[True,False,False,True,False],[True,False,True,True,True],[True,False,True,False,False],[True,False,False,False,True],[False,False,False,False,True],[True,True,True,True,False],[True,False,False,True,True]],[[False,True,True,True,False],[True,False,False,False,True],[False,True,True,False,True],[False,True,True,False,True],[False,False,False,True,True],[False,False,True,False,False],[False,True,True,True,False],[True,False,True,False,True],[False,False,False,True,True],[False,False,False,True,False],[True,False,False,True,True],[True,True,False,False,True]],[[False,False,False,True,False],[True,False,False,False,False],[True,False,True,False,True],[False,False,True,False,True],[False,True,True,False,False],[True,False,True,True,False],[False,True,True,True,False],[True,False,False,True,False],[True,True,False,False,True],[True,False,True,True,False],[False,True,True,False,True],[True,True,True,False,False]],[[False,False,True,True,True],[True,False,True,True,True],[True,False,False,True,False],[True,True,False,False,False],[False,True,True,True,True],[False,False,False,False,False],[False,False,True,True,True],[False,False,True,False,True],[False,True,False,True,True],[False,False,False,True,True],[False,True,False,True,True],[True,True,True,True,True]],[[False,True,True,True,False],[False,True,False,True,True],[True,False,True,True,True],[False,False,True,False,True],[False,False,False,False,True],[True,True,False,True,False],[False,True,True,True,False],[True,False,True,True,True],[True,True,True,False,False],[False,False,False,False,False],[True,False,False,False,True],[True,True,False,True,False]],[[True,True,True,False,True],[True,False,True,True,True],[False,False,False,False,False],[True,False,False,True,False],[False,True,True,False,True],[False,True,False,False,False],[True,True,False,False,False],[True,False,False,False,True],[True,False,True,False,False],[True,True,True,True,False],[True,True,True,False,True],[False,False,False,True,True]],[[False,False,False,False,False],[False,True,False,False,True],[True,False,False,False,False],[False,True,True,True,False],[True,True,True,True,True],[False,True,False,False,False],[True,True,False,True,True],[True,False,True,True,False],[False,True,False,False,True],[False,True,True,True,False],[True,True,True,True,False],[True,True,True,True,False]],[[False,False,True,False,True],[False,True,True,True,True],[False,False,False,False,False],[True,True,True,False,False],[False,False,True,True,True],[True,False,False,True,True],[False,True,True,True,True],[True,False,True,False,True],[False,False,True,False,True],[False,True,False,True,False],[False,True,False,False,True],[True,True,True,True,False]]], dtype = "bool")#candidate|9883|(16, 12, 5)|const|bool
bop_9884 = relay.logical_and(var_9882.astype('bool'), relay.reshape(const_9883.astype('bool'), relay.shape_of(var_9882))) # shape=(16, 12, 5)
output = relay.Tuple([bop_9884,])
output2 = relay.Tuple([bop_9884,])
func_9899 = relay.Function([var_9882,], output)
mod['func_9899'] = func_9899
mod = relay.transform.InferType()(mod)
mutated_mod['func_9899'] = func_9899
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9900 = relay.var("var_9900", dtype = "bool", shape = (16, 12, 5))#candidate|9900|(16, 12, 5)|var|bool
func_9899_call = mutated_mod.get_global_var('func_9899')
call_9901 = func_9899_call(var_9900)
output = call_9901
func_9902 = relay.Function([var_9900], output)
mutated_mod['func_9902'] = func_9902
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9020_call = mod.get_global_var('func_9020')
func_9022_call = mutated_mod.get_global_var('func_9022')
call_9934 = func_9020_call()
call_9935 = func_9020_call()
output = relay.Tuple([call_9934,])
output2 = relay.Tuple([call_9935,])
func_9953 = relay.Function([], output)
mod['func_9953'] = func_9953
mod = relay.transform.InferType()(mod)
output = func_9953()
func_9954 = relay.Function([], output)
mutated_mod['func_9954'] = func_9954
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6287_call = mod.get_global_var('func_6287')
func_6288_call = mutated_mod.get_global_var('func_6288')
call_10006 = relay.TupleGetItem(func_6287_call(), 1)
call_10007 = relay.TupleGetItem(func_6288_call(), 1)
output = call_10006
output2 = call_10007
func_10009 = relay.Function([], output)
mod['func_10009'] = func_10009
mod = relay.transform.InferType()(mod)
mutated_mod['func_10009'] = func_10009
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10009_call = mutated_mod.get_global_var('func_10009')
call_10010 = func_10009_call()
output = call_10010
func_10011 = relay.Function([], output)
mutated_mod['func_10011'] = func_10011
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6287_call = mod.get_global_var('func_6287')
func_6288_call = mutated_mod.get_global_var('func_6288')
call_10092 = relay.TupleGetItem(func_6287_call(), 1)
call_10093 = relay.TupleGetItem(func_6288_call(), 1)
output = call_10092
output2 = call_10093
func_10094 = relay.Function([], output)
mod['func_10094'] = func_10094
mod = relay.transform.InferType()(mod)
mutated_mod['func_10094'] = func_10094
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10094_call = mutated_mod.get_global_var('func_10094')
call_10095 = func_10094_call()
output = call_10095
func_10096 = relay.Function([], output)
mutated_mod['func_10096'] = func_10096
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7384_call = mod.get_global_var('func_7384')
func_7386_call = mutated_mod.get_global_var('func_7386')
call_10169 = func_7384_call()
call_10170 = func_7384_call()
func_1010_call = mod.get_global_var('func_1010')
func_1015_call = mutated_mod.get_global_var('func_1015')
const_10173 = relay.const([4,5,9,10,4,-7,-7,4,7,-4,7,4,9,9,3,6,-5,9,-9,-7,-10,-10,3,7,-8,-10,2,-6,-3,-6,2,4,-3,9,-1,-2,1,10,-10,5,-9,-2,6,-4,3,-5,-2,-2,1,4,10,-3,-2,6,-9,7,-3,-10,8,-9,-2,6,5,-8,7,-6,-9,-7,-1,2,-3,7,1,8,1,-8,6,-6,10,-5,5,-6,-4,7,10,-5,-10,1,-10,-9,-10,4,3,-5,4,-3,-5,5,-6,5,2,8,-10,3,10,3,-3,4,-8,10,-2,3,2,7,10,3,-9,6,-10,1,5,9,-2,-3,-3,2,-5,-1,1,-6,-9,5,-10,7,-9,9,4,-1,1,7,-8,9,4,-4,-9,5,1,-6,-10,10,-3,5,-7,6,-2,-3,-3,-8,6,1,-4,3,-6,-6,-4,-8,-7,8,1,5,-8,6,3,-6,7,4,6,7,-8,10,3,-3,-1,8,5,-5,-2,-4,-6,5,10,5,1,-7,8,3,5,4,4,-8,-3,-4,6,3,-10,5,10,-7,-5,9,2,-5,-7,5,-8,10,7,-8,4,7], dtype = "int16")#candidate|10173|(220,)|const|int16
const_10174 = relay.const([-1,-2,8,-2,10,-6,1,4,1,3,7,10,-2,7,3,2,4,-6,-2,3,2,-2,3,5,5,-5,7,4,-8,7,-2,-7,2,9,2,8,3,-6,-8,-8,10,7,-3,-9,3,4,4,2,-3,-4,6,8,1,-4,5,-2,-9,6,-10,-3,-10,10,8,-2,4,-7,-7,10,1,7,-7,-4,-7,-8,-3,2,10,9,-4,3,8,-10,7,5,3,-5,-2,-7,-7,-8,8,6,-1,-9,10,5,-2,-5,3,6,-1,-6,-7,-1,-8,5,-8,7,7,-4,-8,5,2,-8,7,2,-4,-10,-9,-5,2,6,-2,9,9,-6,-2,6,10,-10,-7,-4,1,9,-9,-9,-6,-10,10,-10,5,-5,-7,-3,-4,-4,5,9,6,-6,-6,-5,-1,-1,-6,-9,6,-10,-4,10,5,-8,-3,-6,7,-5,10,5,7,-4,6,-6,9,7,-8,-3,2,3,8,-6,3,8,-1,7,-1,-3,-6,1,-4,1,7,2,3,7,-7,8,4,5,1,3,5,-8,4,6,-8,-1,1,4,-1,7,2,7,-1,1,-6,-3,2,-2,1,-6,5,3,9,9,-6,7,4,-6,-6,-9,3,3,-3,2,3,10,3,5,1,-3,4,5,-4,3,9,-2,1,-8,2,-8,-7,-4,-4,-4,7,-9,7,-9,6,3,-3,8,2,-10,-5,9,7,-10,-6,-5,2,-6,-10,10,-6,-1,-7,4,-2,-4,-3,9,-8,-2,-5,-7,-10,6,7,-6,-8,-3,4,6,10,-5,5,-4,2,7,-2,4,7,-2,7,-1,-2,4,10,4,-2,-4,2,1,-5,-3,3,8,1,-8,7,5,-2,7,-1,-5,-9,-1,8,-9,10,-7,-1,-5,-5,1,2,1,-5,7,9,-8,-10,3,10,-10,-4,-3,2,-7,3,-10,4,-1,10,-4,10,1,-10,8,6,10,7,-5,5,7,-10,5,8,2,5,-7,7,-7,-2,-8,-4,-8,-6,-9,3,-1,3,-6,3,9,3,3,5,8,6,8,6,1,7,3,8,-2,9,1,5,9,7,-9,-3,-2,4,-9,5,2,-1,-1,-8,-7,-8,-8,10,2,-1,-4,1,3,7,8,3,-2,-5,-1,-6,10,1,-9,-5,-10,4,-1,1,2,8,-8,10,-5,-2,9,-7,2,-7,10,-3,-8,-4,2,3,-3,-4,1,-10,-2,-3,2,10,-7], dtype = "uint8")#candidate|10174|(462,)|const|uint8
call_10172 = relay.TupleGetItem(func_1010_call(relay.reshape(const_10173.astype('int16'), [2, 10, 11]), relay.reshape(const_10173.astype('int16'), [2, 10, 11]), relay.reshape(const_10174.astype('uint8'), [462,]), ), 0)
call_10175 = relay.TupleGetItem(func_1015_call(relay.reshape(const_10173.astype('int16'), [2, 10, 11]), relay.reshape(const_10173.astype('int16'), [2, 10, 11]), relay.reshape(const_10174.astype('uint8'), [462,]), ), 0)
func_6226_call = mod.get_global_var('func_6226')
func_6228_call = mutated_mod.get_global_var('func_6228')
var_10189 = relay.var("var_10189", dtype = "float64", shape = (1320,))#candidate|10189|(1320,)|var|float64
call_10188 = relay.TupleGetItem(func_6226_call(relay.reshape(var_10189.astype('float64'), [11, 15, 8])), 1)
call_10190 = relay.TupleGetItem(func_6228_call(relay.reshape(var_10189.astype('float64'), [11, 15, 8])), 1)
func_9842_call = mod.get_global_var('func_9842')
func_9843_call = mutated_mod.get_global_var('func_9843')
call_10194 = relay.TupleGetItem(func_9842_call(), 0)
call_10195 = relay.TupleGetItem(func_9843_call(), 0)
func_5503_call = mod.get_global_var('func_5503')
func_5506_call = mutated_mod.get_global_var('func_5506')
const_10197 = relay.const([9,-1,-3,-3,2,10,6,-4,-2,-6,4,-4,8,3,2,-8,-8,-1,-3,-8,2,3,-1,-1,-9,9,8,-8,3,6,-9,-6,3,-10,10,3,7,9,6,10,-9,-1,-4,5,2,3,-8,-8,6,9,-5,9,-2,-9,-10,-4,-10,8,-3,3,6,7,-7,-7,5,3,2,-4,-2,-1,-2,1,-9,7,-4,5,6,-4,-7,8,-8,-3,-2,-3,10,7,10,-5,9,-8,2,-10,7,3,-6,-5,-1,5,5,-8,-3,-6,-4,-3,-3,-3,6,3,-1,7,-7,-2,-3,4,4,-3,-8,1,2,-3,4,-7,-3,-2,-7,2,1,4,8,4,-1,-8,-7,-9,2,1,-9,-4,1,7,-7,3,2,4,7,-1,-4,-7,9,-8,-7,-6,-9,9,8,-9,-6,3,-4,-7,4,9,-8,-6,2,7,-5,6,-3,4,-4,6,-7,-5,5,-2,-1,-8,-9,5,8,-1,-2,7,-3,-5,-5,-6,-10,-5,-4,-6,10,-3,8,-10,-7,-1,7,2,-8,6,8,6,-2,4,10,10,-6,8,-10,-4,7,-6,3,4,-5,-5,-2,-2,3,-2,-10,2,-9,1,9,6,1,2,-10,-5,9,-9,-4,7,8,10,-6,-3,-5,4,-10,-1,2,4,2,-6,-1,1,-7,5,-2,5,-9,2,-5,-9,-7,-7,-4,1,-2,6,-4,-1,7,-8,2,6,-2,-7,-7,3,7,-4,-2,-8,6,8,-10,2,-6,8,-4,9,-7,4,-5,9,-6,4,2,2,5,-7,-10,6,-1,-4,-1,2,1,1,2,7,-4,6,2,-3,10,6,3,6,6,-1,-2,4,-9,-7,-6,-9,-7,10,2,8,5,2,4,2,-7,-7,-5,2,6,3,6,-6,-6,10,-10,-2,2,3,-1,6,-9,4,-1,-8,-6,3,-2,4,-5,-9,-5,-2,-4,-3,-3,10,-1,5,-3,-3,5,-2,4,6,2,-8,4,-4,-4,-3,5,8,10,-9,8,3,-7,10,-2,-5,-2,9,-1,-6,9,4,3,-1,-9,7,2,1,-6,3,9,-10,8,-7,-4,8,10,-9,-7,-7,3,-4,-3,-6,-5,-7,-6,-5,8,-7,-5,-8,-8,10,-1,10,1,1,-10,-3,10,1,-8,-2,8,-1,-4,-8,5,-8,6,-2,-3,-1,2,7,-5,-9,5,-1,3,-6,8,9,-3,-2,6,-4,-7,-1,-10,-2,-9,7,-2,-6,8,-2,-7,2,10,1,-7,5,1,-4,8,-3,5,-2,-8,-2,2,3,-4,1,10,-10,-6,-3,-2,-7,3,7,10,6,10,4,-9,1,-5,-7,-6,-4,-3,1,-5,6,-8,5,4,8,9,-6,-1,4,-3,1,-10,-4,-3,8,3,6,-9,-1,-2,7,-1,2,3,-7,6,6,4,-9,-4,7,-9,7,3,10,-7,9,-1,-1,4,1,-8,8,-8,1,1,7,10,-7,4,-10,-6,10,-9,-4,-10,7,-3,-2,-9,10,2,10,-1,-6,-6,-7,-5,-10,7,9,8,-7,-8,-1,-5,-9,-8,8,-7,6,1,6,10,10,1,-7,7,1,5,4,-2,-7,-1,-4,9,2,5,8,7,5,9,-8,-5,2,10,10,-7,6,1,-6,10,-2,7,2,-8,-1,-6,1,-7,-3,-7,1,-7,-1,9,-9,-5,-5,1,-4,2,-5,-4,2,-9,8,-6,-3,-8,-1,2,-7,3,1,7,4,-3,-10,5,-8,-8,4,9,-9,2,5,2,-2,4,-2,1,10,4,10,-3,6,9,7,7,-7,8,2,-4,6,10,-8,-3,-4,10,6,4,-7,2,-3,2,8,1,-9,-6,4,-4,-8,3,-3,8,10,-3,-7,3,-4,7,2,-1,7,-7,-5,5,7,7,-3,-9,-9,2,-7,-3,9,-2,1,3,3,9,8,-5,-4,-4,9,1,-6,-3,7,6,7,-6,-5,6,-8,10,-9,-2,-7,-9,10,6,3,10,7,-6,6,-5,-3,-1,-6,-9,-3,-9,9,-1,-7,6,-8,10,4,2,-9,3,9,-5,2,-3,8,9,1], dtype = "int32")#candidate|10197|(780,)|const|int32
var_10198 = relay.var("var_10198", dtype = "int32", shape = (1920,))#candidate|10198|(1920,)|var|int32
call_10196 = relay.TupleGetItem(func_5503_call(relay.reshape(const_10197.astype('int32'), [5, 12, 13]), relay.reshape(var_10198.astype('int32'), [1920,]), ), 3)
call_10199 = relay.TupleGetItem(func_5506_call(relay.reshape(const_10197.astype('int32'), [5, 12, 13]), relay.reshape(var_10198.astype('int32'), [1920,]), ), 3)
output = relay.Tuple([call_10169,call_10172,const_10173,const_10174,call_10188,var_10189,call_10194,call_10196,const_10197,var_10198,])
output2 = relay.Tuple([call_10170,call_10175,const_10173,const_10174,call_10190,var_10189,call_10195,call_10199,const_10197,var_10198,])
func_10219 = relay.Function([var_10189,var_10198,], output)
mod['func_10219'] = func_10219
mod = relay.transform.InferType()(mod)
mutated_mod['func_10219'] = func_10219
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10219_call = mutated_mod.get_global_var('func_10219')
var_10221 = relay.var("var_10221", dtype = "float64", shape = (1320,))#candidate|10221|(1320,)|var|float64
var_10222 = relay.var("var_10222", dtype = "int32", shape = (1920,))#candidate|10222|(1920,)|var|int32
call_10220 = func_10219_call(var_10221,var_10222,)
output = call_10220
func_10223 = relay.Function([var_10221,var_10222,], output)
mutated_mod['func_10223'] = func_10223
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8356_call = mod.get_global_var('func_8356')
func_8357_call = mutated_mod.get_global_var('func_8357')
call_10321 = relay.TupleGetItem(func_8356_call(), 0)
call_10322 = relay.TupleGetItem(func_8357_call(), 0)
output = relay.Tuple([call_10321,])
output2 = relay.Tuple([call_10322,])
func_10328 = relay.Function([], output)
mod['func_10328'] = func_10328
mod = relay.transform.InferType()(mod)
output = func_10328()
func_10329 = relay.Function([], output)
mutated_mod['func_10329'] = func_10329
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7068_call = mod.get_global_var('func_7068')
func_7070_call = mutated_mod.get_global_var('func_7070')
call_10344 = relay.TupleGetItem(func_7068_call(), 0)
call_10345 = relay.TupleGetItem(func_7070_call(), 0)
output = relay.Tuple([call_10344,])
output2 = relay.Tuple([call_10345,])
func_10352 = relay.Function([], output)
mod['func_10352'] = func_10352
mod = relay.transform.InferType()(mod)
output = func_10352()
func_10353 = relay.Function([], output)
mutated_mod['func_10353'] = func_10353
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9803_call = mod.get_global_var('func_9803')
func_9804_call = mutated_mod.get_global_var('func_9804')
call_10403 = relay.TupleGetItem(func_9803_call(), 1)
call_10404 = relay.TupleGetItem(func_9804_call(), 1)
output = relay.Tuple([call_10403,])
output2 = relay.Tuple([call_10404,])
func_10405 = relay.Function([], output)
mod['func_10405'] = func_10405
mod = relay.transform.InferType()(mod)
mutated_mod['func_10405'] = func_10405
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10405_call = mutated_mod.get_global_var('func_10405')
call_10406 = func_10405_call()
output = call_10406
func_10407 = relay.Function([], output)
mutated_mod['func_10407'] = func_10407
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9780_call = mod.get_global_var('func_9780')
func_9782_call = mutated_mod.get_global_var('func_9782')
call_10429 = func_9780_call()
call_10430 = func_9780_call()
uop_10441 = relay.erf(call_10429.astype('float32')) # shape=(11, 15, 8)
uop_10443 = relay.erf(call_10430.astype('float32')) # shape=(11, 15, 8)
func_8000_call = mod.get_global_var('func_8000')
func_8002_call = mutated_mod.get_global_var('func_8002')
call_10452 = relay.TupleGetItem(func_8000_call(), 0)
call_10453 = relay.TupleGetItem(func_8002_call(), 0)
output = relay.Tuple([uop_10441,call_10452,])
output2 = relay.Tuple([uop_10443,call_10453,])
func_10466 = relay.Function([], output)
mod['func_10466'] = func_10466
mod = relay.transform.InferType()(mod)
mutated_mod['func_10466'] = func_10466
mutated_mod = relay.transform.InferType()(mutated_mod)
func_10466_call = mutated_mod.get_global_var('func_10466')
call_10467 = func_10466_call()
output = call_10467
func_10468 = relay.Function([], output)
mutated_mod['func_10468'] = func_10468
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7309_call = mod.get_global_var('func_7309')
func_7311_call = mutated_mod.get_global_var('func_7311')
call_10497 = func_7309_call()
call_10498 = func_7309_call()
output = call_10497
output2 = call_10498
func_10506 = relay.Function([], output)
mod['func_10506'] = func_10506
mod = relay.transform.InferType()(mod)
output = func_10506()
func_10507 = relay.Function([], output)
mutated_mod['func_10507'] = func_10507
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10537 = relay.var("var_10537", dtype = "float32", shape = (2, 10, 2))#candidate|10537|(2, 10, 2)|var|float32
uop_10538 = relay.tan(var_10537.astype('float32')) # shape=(2, 10, 2)
func_8087_call = mod.get_global_var('func_8087')
func_8089_call = mutated_mod.get_global_var('func_8089')
call_10543 = func_8087_call()
call_10544 = func_8087_call()
output = relay.Tuple([uop_10538,call_10543,])
output2 = relay.Tuple([uop_10538,call_10544,])
func_10580 = relay.Function([var_10537,], output)
mod['func_10580'] = func_10580
mod = relay.transform.InferType()(mod)
mutated_mod['func_10580'] = func_10580
mutated_mod = relay.transform.InferType()(mutated_mod)
var_10581 = relay.var("var_10581", dtype = "float32", shape = (2, 10, 2))#candidate|10581|(2, 10, 2)|var|float32
func_10580_call = mutated_mod.get_global_var('func_10580')
call_10582 = func_10580_call(var_10581)
output = call_10582
func_10583 = relay.Function([var_10581], output)
mutated_mod['func_10583'] = func_10583
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8165_call = mod.get_global_var('func_8165')
func_8167_call = mutated_mod.get_global_var('func_8167')
call_10636 = relay.TupleGetItem(func_8165_call(), 2)
call_10637 = relay.TupleGetItem(func_8167_call(), 2)
func_3095_call = mod.get_global_var('func_3095')
func_3098_call = mutated_mod.get_global_var('func_3098')
const_10649 = relay.const([-3.128106,3.130390,8.889252,-8.484865,-0.181926,9.521498,-4.782705,-8.641038,3.630380,0.390776,7.519969,-3.664730,-6.613144,0.311225,-0.160010,-6.635867,-6.315799,2.315553,9.849731,-9.769819,5.094109,6.021152,-0.908525,1.301270,3.768162,5.043729,-2.041244,-3.505794,-1.163383,-4.624645,-3.190852,-9.567667,0.132007,-8.901040,2.089951,-5.915866,-8.405041,-7.095982,8.841526,5.224256,-2.968739,-1.822275,-8.816383,6.441259,-5.844529,-3.569067,-0.418980,6.028367,-7.172426,-3.446691,8.420167,-8.249621,3.577450,-7.589532,-9.682591,1.183415,-8.227572,5.311856,1.301129,-0.379849,5.451094,-0.733679,4.320904,9.972174,-7.164676,6.118356,-1.426268,7.832021,-6.223533,-6.106785,6.800851,1.483581,4.707942,4.807213,2.566165,9.679603,-6.488188,-1.652919,0.029905,8.225075,-7.036866,9.304242,-4.137197,-0.987980,-0.447666,1.495588,-2.288297,-1.292106,6.218213,-1.625599,2.576308,7.277426,-0.025744,1.171689,1.216815,8.393024,3.197681,-5.937402,5.588451,-5.057468,-8.098491,-9.757614,-8.284101,-0.510242,-2.624661,-9.771501,-3.132996,3.126179,6.542690,9.926117,0.799481,-4.296862,2.404999,-0.535059,2.298895,7.965478,-5.052677,5.358987,-9.366457,-5.692776,-1.876720,-7.816232,5.058667,8.297623,-0.396918,9.130934,8.586016,-8.166006,5.422342,-7.427900,8.768172,-1.770583,9.351512,-3.860730,7.545041,-0.306584,1.701245,3.977536,-9.057439,1.459233,3.849367,-7.086294,6.810289,9.432897,5.642955,5.760203,7.479236,-7.382479,8.867327,-3.555214,6.811592,2.301484,6.652388,8.088768,6.344613,-4.879995,-8.537500,-1.281175,3.796934,-4.360918,0.342284,3.078928,1.384624,5.619428,-8.723154,6.294815,-5.063961,-3.878034,4.703899,8.853124,6.685304,2.792572,-1.022128,5.955760,-9.071336,-0.916856,6.052276,-3.256197,0.903341,-3.804596,-8.160232,6.474948,-8.806873,-3.637609,-5.511095,-2.920321,-8.474324,0.709615,9.217053,-5.327443,-4.625178,6.309821,2.565246,-7.636917,3.897499,-2.447092,-6.194003,-9.866359,-5.818511,9.181722,-9.823848,-6.624478,8.073375,4.184641,-5.369169,-8.425985,-8.492463,-2.251370,-1.110878,-6.938575,4.892808,1.557023,5.015811,-6.371004,-1.806820,-4.320982,-2.147065,6.674686,-2.076121,-3.031051,6.043184,4.810147,6.375437,7.427062,-0.012508,4.409255,-3.236686,9.698460,5.693480,9.949463,6.748874,-4.723387,-2.355002,-9.271336,1.040548,3.735064,5.672605,-5.122873,5.830136,-0.500175,-4.394981,4.520771,-7.554177,-2.122103,6.902007,-0.469133,7.712936,-5.539937,-1.684158,-7.949130,8.789280,-2.623271,-2.486986,3.630953,-8.345368,7.640143,-8.653245,-7.007638,2.187242,-2.584803,-8.117933,-4.626376,8.592708,-3.724797,7.258165,8.828923,-0.657815,3.454416,9.909185,-2.012350,2.049603,-2.973600,4.835820,-3.514520,0.483767,9.250159,2.574540,7.362261,-4.955551,5.952400,-8.212884,-0.882385,-5.169341,9.258719,7.335969,-6.269794,7.059875,-8.001763,3.402047,5.241358,3.187743,-0.531303,-6.318833,9.057519,1.861646,-0.686113,-2.348812,3.695180,1.513671,-8.973047,-9.508007,3.746686,1.332460,-7.493771,-0.574607,2.348806,-5.161267,7.227216,9.698731,5.208541,7.382821,-2.428155,2.892302,-8.558508,-2.392226,2.529930,7.883480,-3.900015,-0.863842,1.371593,-5.189892,-7.193810,5.915510,-6.877483,-2.426091,6.560582,3.626114,4.747041,8.683658,3.172154,-4.196789,2.442590,0.525921,-2.284491,-6.022450,6.644427,-4.162021,-7.846064,9.298872,-5.622487,-4.132078,8.800470,7.042895,-5.033012,-8.743792,-7.423613,-1.679422,4.035789,5.052083,2.761436,6.444073,1.382069,-7.428319,1.618258,-7.639888,-2.409287,-4.658532,-3.028753,-9.932388,-0.815734,9.670810,-1.804915,-2.176067,5.286282,0.985917,-3.030999,5.776936,9.662928,4.901191,5.616795,-4.791463,-3.745968,9.467059,5.325117,-7.072016,4.620532,-0.742596,3.087257,0.910250,1.338383,-6.039703,1.740633,8.002886,4.221661,-8.862598,-1.561552,-9.250844,7.999938,7.545595,-9.314435,-6.554789,9.644158,0.164927,-3.414832,-7.846178,4.197525,4.508068,-0.495494,1.229049,0.067320,1.898934,3.493135,-3.209035,5.774925,0.808182,8.421467,3.567730,-6.669766,-9.787655,3.779675,-8.501251,3.058369,-6.597751,-3.783704,6.723597,8.975324,1.196453,3.931153,7.737145,-3.583158,-3.948175,-7.035434,-9.470276,-2.128448,3.389013,1.713648,-4.525369,6.770731,0.975745,2.101792,1.901059,3.157807,1.488576,7.381773,4.314550,2.914254,0.787853,-1.631975,-3.169384,-2.938635,-4.950692,-7.973951,-5.562942,5.107737,6.764219,4.603173,6.150772,-4.434420,6.509819,8.379470,4.427472,-1.007953,7.371244,-8.414004,4.783944,6.140618,4.120312,-2.812224,-1.957114,7.774825,-2.820234,-2.235864], dtype = "float32")#candidate|10649|(462,)|const|float32
call_10648 = func_3095_call(relay.reshape(const_10649.astype('float32'), [11, 3, 14]))
call_10650 = func_3095_call(relay.reshape(const_10649.astype('float32'), [11, 3, 14]))
uop_10668 = relay.exp(call_10648.astype('float64')) # shape=(11, 3, 14)
uop_10670 = relay.exp(call_10650.astype('float64')) # shape=(11, 3, 14)
output = relay.Tuple([call_10636,const_10649,uop_10668,])
output2 = relay.Tuple([call_10637,const_10649,uop_10670,])
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
