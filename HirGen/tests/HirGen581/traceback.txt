==========mod==========
#[version = "0.0.5"]
def @func_5700() -> (Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), int8], Tensor[(468), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1 = reshape(%0, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
  %2 = @func_2890(%1) /* ty=(Tensor[(9, 14, 7), int8], Tensor[(147), float64], Tensor[(9, 13, 4), int16], Tensor[(234, 2), float64], Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) */;
  %3 = @func_4897() /* ty=Tensor[(9, 14, 7), bool] */;
  %4 = %2.0;
  (%3, %4, meta[relay.Constant][0] /* ty=Tensor[(468), float64] */)
}

def @func_7336() -> (Tensor[(13, 6, 10), float64], Tensor[(1, 90), float32], Tensor[(1014), uint8], Tensor[(90), float32]) {
  %5 = @func_5890() /* ty=(Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(1014), uint8] */, dtype="uint8") /* ty=Tensor[(1014), uint8] */;
  %7 = cast(meta[relay.Constant][2] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %8 = reshape(%6, newshape=[1014]) /* ty=Tensor[(1014), uint8] */;
  %9 = reshape(%7, newshape=[1, 90]) /* ty=Tensor[(1, 90), float32] */;
  %10 = @func_4177(%8, %9) /* ty=(Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(1, 90), float32]) */;
  %11 = %5.0;
  %12 = %10.3;
  (%11, %12, meta[relay.Constant][1] /* ty=Tensor[(1014), uint8] */, meta[relay.Constant][2] /* ty=Tensor[(90), float32] */)
}

def @func_9443(%var_9438: Tensor[(9, 11, 4), float64]) -> (Tensor[(9, 14, 7), bool], Tensor[(9, 11, 4), int32]) {
  %13 = @func_2379() /* ty=(Tensor[(9, ?, 4), float64],) */;
  %14 = %13.0;
  %15 = cast(%14, dtype="int32") /* ty=Tensor[(9, ?, 4), int32] */;
  %16 = cast(%var_9438, dtype="int32") /* ty=Tensor[(9, 11, 4), int32] */;
  %17 = @func_1476() /* ty=Tensor[(9, 14, 7), bool] */;
  %18 = multiply(%15, %16) /* ty=Tensor[(9, 11, 4), int32] */;
  (%17, %18)
}

def @func_1824(%var_1785: Tensor[(10, 13, 14), uint64], %var_1786: Tensor[(10, 13, 14), uint64]) -> (Tensor[(10, 13, 14), bool], Tensor[(9, 14, 7), int8]) {
  %19 = cast(%var_1786, dtype="bool") /* ty=Tensor[(10, 13, 14), bool] */;
  %20 = shape_of(%var_1785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%var_1785, dtype="bool") /* ty=Tensor[(10, 13, 14), bool] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %23 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
  %24 = less_equal(%21, %22) /* ty=Tensor[(10, 13, 14), bool] */;
  %25 = %23.1;
  (%24, %25)
}

def @func_4897() -> Tensor[(9, 14, 7), bool] {
  %26 = @func_1928() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */;
  %26.0
}

def @func_2491() -> (Tensor[(9, 14, 7), uint16],) {
  %27 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %28 = %27.0;
  (%28,)
}

def @func_6960() -> (Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %29 = @func_5700() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), int8], Tensor[(468), float64]) */;
  %30 = @func_4952() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %31 = @func_5014() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %32 = %29.1;
  %33 = %30.0;
  %34 = @func_6919() /* ty=Tensor[(9, 14, 7), uint16] */;
  %35 = %31.0;
  (%32, %33, %34, %35)
}

def @func_9830() -> Tensor[(9, 14, 7), float32] {
  %36 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %37 = %36.0;
  %38 = cast(%37, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  acos(%38) /* ty=Tensor[(9, 14, 7), float32] */
}

def @func_10488() -> Tensor[(13, 6, 10), float32] {
  @func_5642() /* ty=Tensor[(13, 6, 10), float32] */
}

def @func_10872() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %39 = @func_4123() /* ty=(Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) */;
  %40 = @func_5845() /* ty=Tensor[(9, 14, 7), uint16] */;
  %41 = %39.1;
  (%40, %41)
}

def @func_9905() -> Tensor[(9, 14, 7), uint16] {
  %42 = @func_4375() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %42.0
}

def @func_6382() -> Tensor[(9, 14, 7), float64] {
  %43 = @func_6106() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, ?, 4), float64]) */;
  %43.0
}

def @func_3880(%var_3765: Tensor[(13, 13, 6), uint8], %var_3766: Tensor[(13, 13, 6), uint8], %var_3811: Tensor[(90), float32], %var_3819: Tensor[(36), bool]) -> (Tensor[(13, 13, 6), uint8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(90), float32], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
  %44 = cast(%var_3766, dtype="uint8") /* ty=Tensor[(13, 13, 6), uint8] */;
  %45 = shape_of(%var_3765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_3765, dtype="uint8") /* ty=Tensor[(13, 13, 6), uint8] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %48 = @func_2718() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %49 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %50 = cast(%var_3811, dtype="float32") /* ty=Tensor[(90), float32] */;
  %51 = reshape(%50, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float32] */;
  %52 = @func_127(%51) /* ty=(Tensor[(3, 2, 15), float64],) */;
  %53 = cast(%var_3819, dtype="bool") /* ty=Tensor[(36), bool] */;
  %54 = reshape(%53, newshape=[9, 4]) /* ty=Tensor[(9, 4), bool] */;
  %55 = @func_3094(%54) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(9, 4), bool], Tensor[(324), bool]) */;
  %56 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %57 = @func_2718() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %58 = @func_2974() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) */;
  %59 = left_shift(%46, %47) /* ty=Tensor[(13, 13, 6), uint8] */;
  %60 = %48.1;
  %61 = %49.0;
  %62 = %52.0;
  %63 = %55.1;
  %64 = %56.0;
  %65 = %57.0;
  %66 = %58.2;
  (%59, %60, %61, %62, %var_3811, %63, %var_3819, %64, %65, %66)
}

def @func_7802(%var_7792: Tensor[(36, 1), uint32], %var_7793: Tensor[(1287), float64], %var_7794: Tensor[(90), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(12), uint32], Tensor[(36, 1), uint32], Tensor[(1287), float64], Tensor[(90), float32]) {
  %67 = @func_5277() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %68 = cast(meta[relay.Constant][3] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
  %69 = cast(%var_7792, dtype="uint32") /* ty=Tensor[(36, 1), uint32] */;
  %70 = cast(%var_7793, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %71 = cast(%var_7794, dtype="float32") /* ty=Tensor[(90), float32] */;
  %72 = reshape(%68, newshape=[4, 3, 1]) /* ty=Tensor[(4, 3, 1), uint32] */;
  %73 = reshape(%69, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), uint32] */;
  %74 = reshape(%70, newshape=[1287]) /* ty=Tensor[(1287), float64] */;
  %75 = reshape(%71, newshape=[1, 90]) /* ty=Tensor[(1, 90), float32] */;
  %76 = @func_3526(%72, %73, %74, %75) /* ty=(Tensor[(4, 3, 3), uint32], Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(4, 3, 3), float32], Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(1, 90), float32]) */;
  %77 = %67.0;
  %78 = %76.1;
  (%77, %78, meta[relay.Constant][3] /* ty=Tensor[(12), uint32] */, %var_7792, %var_7793, %var_7794)
}

def @func_4758() -> Tensor[(9, 14, 7), uint16] {
  @func_993() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_4346() -> Tensor[(9, 14, 7), uint16] {
  %79 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %79.0
}

def @func_5931(%var_5916: Tensor[(21, 7), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(3, 7, 7), float64], Tensor[(21, 7), float64]) {
  %80 = cast(%var_5916, dtype="float64") /* ty=Tensor[(21, 7), float64] */;
  %81 = reshape(%80, newshape=[3, 7, 7]) /* ty=Tensor[(3, 7, 7), float64] */;
  %82 = @func_891(%81) /* ty=(Tensor[(3, 7, 7), float64], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %83 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  %84 = %82.0;
  (%83, %84, %var_5916)
}

def @func_11096() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool]) {
  %85 = @func_6960() /* ty=(Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %86 = @func_10171() /* ty=(Tensor[(9, 14, 7), bool],) */;
  %87 = %85.1;
  %88 = @func_4758() /* ty=Tensor[(9, 14, 7), uint16] */;
  %89 = %86.0;
  (%87, %88, %89)
}

def @func_3638() -> Tensor[(9, 14, 7), uint16] {
  %90 = @func_2491() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %90.0
}

def @func_979() -> (Tensor[(9, 14, 7), uint16],) {
  %91 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %92 = %91.0;
  (%92,)
}

def @func_3526(%var_3460: Tensor[(4, 3, 1), uint32], %var_3461: Tensor[(4, 3, 3), uint32], %var_3475: Tensor[(1287), float64], %var_3518: Tensor[(1, 90), float32]) -> (Tensor[(4, 3, 3), uint32], Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(4, 3, 3), float32], Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(1, 90), float32]) {
  %93 = cast(%var_3460, dtype="uint32") /* ty=Tensor[(4, 3, 1), uint32] */;
  %94 = cast(%var_3461, dtype="uint32") /* ty=Tensor[(4, 3, 3), uint32] */;
  %95 = @func_1928() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */;
  %96 = cast(%var_3475, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %97 = reshape(%96, newshape=[1287]) /* ty=Tensor[(1287), float64] */;
  %98 = @func_2199(%97) /* ty=(Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %99 = cast(%var_3461, dtype="float32") /* ty=Tensor[(4, 3, 3), float32] */;
  %100 = @func_3204() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %101 = cast(%var_3518, dtype="float32") /* ty=Tensor[(1, 90), float32] */;
  %102 = reshape(%101, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float32] */;
  %103 = @func_127(%102) /* ty=(Tensor[(3, 2, 15), float64],) */;
  %104 = add(%93, %94) /* ty=Tensor[(4, 3, 3), uint32] */;
  %105 = %95.0;
  %106 = %98.1;
  %107 = sin(%99) /* ty=Tensor[(4, 3, 3), float32] */;
  %108 = %100.1;
  %109 = %103.0;
  (%104, %105, %106, %var_3475, %107, %108, %109, %var_3518)
}

def @func_3094(%var_3090: Tensor[(9, 4), bool]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(9, 4), bool], Tensor[(324), bool]) {
  %110 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %111 = cast(%var_3090, dtype="bool") /* ty=Tensor[(9, 4), bool] */;
  %112 = cast(meta[relay.Constant][4] /* ty=Tensor[(324), bool] */, dtype="bool") /* ty=Tensor[(324), bool] */;
  %113 = reshape(%111, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), bool] */;
  %114 = reshape(%112, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
  %115 = @func_2818(%113, %114) /* ty=(Tensor[(12, 9, 3), float32], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(9, 14, 7), uint16]) */;
  %116 = %110.0;
  %117 = @func_2643() /* ty=Tensor[(9, 14, 7), uint16] */;
  %118 = %115.2;
  (%116, %117, %118, %var_3090, meta[relay.Constant][4] /* ty=Tensor[(324), bool] */)
}

def @func_3593(%var_3566: Tensor[(9, 5, 3), int32], %var_3575: Tensor[(147), float64]) -> (Tensor[(9, 5, 3), bool], Tensor[(3, 7, 7), float64], Tensor[(147), float64]) {
  %119 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 5, 1), int32] */, dtype="bool") /* ty=Tensor[(9, 5, 1), bool] */;
  %120 = cast(%var_3566, dtype="bool") /* ty=Tensor[(9, 5, 3), bool] */;
  %121 = cast(%var_3575, dtype="float64") /* ty=Tensor[(147), float64] */;
  %122 = reshape(%121, newshape=[3, 7, 7]) /* ty=Tensor[(3, 7, 7), float64] */;
  %123 = @func_891(%122) /* ty=(Tensor[(3, 7, 7), float64], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %124 = not_equal(%119, %120) /* ty=Tensor[(9, 5, 3), bool] */;
  %125 = %123.0;
  (%124, %125, %var_3575)
}

def @main(%var_11467: Tensor[(1, 4, 12), int64]) -> (Tensor[(9, 13, 4), int16], Tensor[(?, 4, 12), bool]) {
  %126 = @func_6338() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 13, 4), int16], Tensor[(468), float64]) */;
  %127 = cast(-8 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %128 = cast(%var_11467, dtype="bool") /* ty=Tensor[(1, 4, 12), bool] */;
  %129 = greater(%127, %128) /* ty=Tensor[(1, 4, 12), bool] */;
  %130 = cast(%129, dtype="float64") /* ty=Tensor[(1, 4, 12), float64] */;
  %131 = log2(%130) /* ty=Tensor[(1, 4, 12), float64] */;
  %132 = cast(%129, dtype="bool") /* ty=Tensor[(1, 4, 12), bool] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%131, dtype="bool") /* ty=Tensor[(1, 4, 12), bool] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %136 = %126.1;
  %137 = less_equal(%134, %135) /* ty=Tensor[(?, 4, 12), bool] */;
  (%136, %137)
}

def @func_7937(%var_7910: Tensor[(9, 8, 4), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(1287), float64], Tensor[(9, 14, 7), bool], Tensor[(9, 8, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) {
  %138 = cast(meta[relay.Constant][6] /* ty=Tensor[(1287), float64] */, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %139 = reshape(%138, newshape=[1287]) /* ty=Tensor[(1287), float64] */;
  %140 = @func_2199(%139) /* ty=(Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %141 = @func_2379() /* ty=(Tensor[(9, ?, 4), float64],) */;
  %142 = %141.0;
  %143 = cast(%142, dtype="float64") /* ty=Tensor[(9, ?, 4), float64] */;
  %144 = cast(%var_7910, dtype="float64") /* ty=Tensor[(9, 8, 4), float64] */;
  %145 = @func_2855() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %146 = @func_6106() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, ?, 4), float64]) */;
  %147 = @func_5845() /* ty=Tensor[(9, 14, 7), uint16] */;
  %148 = %140.0;
  %149 = @func_1476() /* ty=Tensor[(9, 14, 7), bool] */;
  %150 = power(%143, %144) /* ty=Tensor[(9, 8, 4), float64] */;
  %151 = %145.0;
  %152 = %146.0;
  (%147, %148, meta[relay.Constant][6] /* ty=Tensor[(1287), float64] */, %149, %150, %151, %152)
}

def @func_2718() -> (Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
  %153 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %154 = %153.0;
  %155 = cast(%154, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %156 = log10(%155) /* ty=Tensor[(9, 14, 7), float64] */;
  %157 = @func_2590() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%156, %157)
}

def @func_1164() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %158 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %159 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %160 = %158.0;
  %161 = %159.0;
  (%160, %161)
}

def @func_7993() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(1820), uint64]) {
  %162 = @func_7475() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %163 = cast(meta[relay.Constant][7] /* ty=Tensor[(1820), uint64] */, dtype="uint64") /* ty=Tensor[(1820), uint64] */;
  %164 = cast(meta[relay.Constant][7] /* ty=Tensor[(1820), uint64] */, dtype="uint64") /* ty=Tensor[(1820), uint64] */;
  %165 = reshape(%163, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
  %166 = reshape(%164, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
  %167 = @func_1824(%165, %166) /* ty=(Tensor[(10, 13, 14), bool], Tensor[(9, 14, 7), int8]) */;
  %168 = %162.0;
  %169 = %167.1;
  (%168, %169, meta[relay.Constant][7] /* ty=Tensor[(1820), uint64] */)
}

def @func_2199(%var_2195: Tensor[(1287), float64]) -> (Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) {
  %170 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %171 = %170.0;
  %172 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %173 = %172.0;
  %174 = cast(%173, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %175 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%171, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %178 = cast(%var_2195, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %179 = reshape(%178, newshape=[11, 9, 13]) /* ty=Tensor[(11, 9, 13), float64] */;
  %180 = @func_275(%179) /* ty=(Tensor[(11, 9, 13), float64],) */;
  %181 = logical_and(%176, %177) /* ty=Tensor[(9, 14, 7), bool] */;
  %182 = %180.0;
  (%181, %182, %var_2195)
}

def @func_7475() -> (Tensor[(9, 14, 7), uint16],) {
  %183 = @func_2855() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %184 = %183.0;
  (%184,)
}

def @func_9690() -> Tensor[(2, 5, 7), float32] {
  %185 = @func_8683() /* ty=(Tensor[(2, 5, 7), float32],) */;
  %185.0
}

def @func_9874(%var_9869: Tensor[(21, 7), float64]) -> (Tensor[(21, 7), uint32],) {
  %186 = @func_9498() /* ty=(Tensor[(21, 7), float64],) */;
  %187 = %186.0;
  %188 = cast(%var_9869, dtype="uint32") /* ty=Tensor[(21, 7), uint32] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(2), int32] */;
  %190 = cast(%187, dtype="uint32") /* ty=Tensor[(21, 7), uint32] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %192 = add(%190, %191) /* ty=Tensor[(21, 7), uint32] */;
  (%192,)
}

def @func_8996(%var_8965: Tensor[(36), bool], %var_8966: Tensor[(324), bool]) -> (Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(324), bool], Tensor[(9, 14, 7), uint16]) {
  %193 = @func_7114() /* ty=(Tensor[(13, 6, 10), float64],) */;
  %194 = cast(%var_8965, dtype="bool") /* ty=Tensor[(36), bool] */;
  %195 = cast(%var_8966, dtype="bool") /* ty=Tensor[(324), bool] */;
  %196 = reshape(%194, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), bool] */;
  %197 = reshape(%195, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
  %198 = @func_2818(%196, %197) /* ty=(Tensor[(12, 9, 3), float32], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(9, 14, 7), uint16]) */;
  %199 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %200 = %193.0;
  %201 = %198.3;
  %202 = %199.0;
  (%200, %201, %var_8965, %var_8966, %202)
}

def @func_6390() -> (Tensor[(9, ?, 4), float64],) {
  %203 = @func_2379() /* ty=(Tensor[(9, ?, 4), float64],) */;
  %204 = %203.0;
  (%204,)
}

def @func_6208() -> Tensor[(9, 14, 7), float64] {
  %205 = @func_2718() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %205.0
}

def @func_2526(%var_2517: Tensor[(9, 14, 7), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) {
  %206 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %207 = %206.0;
  %208 = cast(%207, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %209 = exp(%208) /* ty=Tensor[(9, 14, 7), float64] */;
  %210 = cast(%var_2517, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %214 = cast(%207, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %215 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%209, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %218 = subtract(%212, %213) /* ty=Tensor[(9, 14, 7), uint16] */;
  %219 = floor_divide(%216, %217) /* ty=Tensor[(9, 14, 7), float32] */;
  (%218, %219)
}

def @func_1685() -> (Tensor[(9, 14, 7), uint16],) {
  %220 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%220,)
}

def @func_4425() -> (Tensor[(9, 14, 7), uint16],) {
  %221 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%221,)
}

def @func_5198() -> (Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16]) {
  %222 = @func_2974() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) */;
  %223 = @func_2491() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %224 = %222.1;
  %225 = %223.0;
  (%224, %225)
}

def @func_6485() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(9, 14, 7), uint16]) {
  %226 = @func_4198() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %227 = cast(meta[relay.Constant][8] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %228 = reshape(%227, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
  %229 = @func_2890(%228) /* ty=(Tensor[(9, 14, 7), int8], Tensor[(147), float64], Tensor[(9, 13, 4), int16], Tensor[(234, 2), float64], Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) */;
  %230 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %231 = %226.0;
  %232 = %229.4;
  %233 = %230.0;
  (%231, %232, meta[relay.Constant][8] /* ty=Tensor[(468), float64] */, %233)
}

def @func_6683() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(7, 21), bool], Tensor[(9, 14, 7), uint16]) {
  %234 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 21), float64] */, dtype="float64") /* ty=Tensor[(7, 21), float64] */;
  %235 = reshape(%234, newshape=[21, 7]) /* ty=Tensor[(21, 7), float64] */;
  %236 = @func_2392(%235) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(21, 7), float64]) */;
  %237 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 21), float64] */, dtype="float32") /* ty=Tensor[(7, 21), float32] */;
  %238 = rsqrt(%237) /* ty=Tensor[(7, 21), float32] */;
  %239 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 21), float64] */, dtype="bool") /* ty=Tensor[(7, 21), bool] */;
  %240 = shape_of(%238, dtype="int32") /* ty=Tensor[(2), int32] */;
  %241 = cast(%238, dtype="bool") /* ty=Tensor[(7, 21), bool] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %243 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
  %244 = @func_5839() /* ty=Tensor[(9, 14, 7), uint16] */;
  %245 = %236.1;
  %246 = equal(%241, %242) /* ty=Tensor[(7, 21), bool] */;
  %247 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%243, %244, %245, %246, %247)
}

def @func_7294(%var_7255: Tensor[(147), float64]) -> (Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32], Tensor[(135), int32], Tensor[(147), float32], Tensor[(147), uint64], Tensor[(147), float64], Tensor[(9, 14, 7), uint16]) {
  %248 = @func_6298() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) */;
  %249 = cast(meta[relay.Constant][10] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %250 = reshape(%249, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
  %251 = @func_5765(%250) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32]) */;
  %252 = cast(meta[relay.Constant][11] /* ty=Tensor[(135), int32] */, dtype="int32") /* ty=Tensor[(135), int32] */;
  %253 = cast(%var_7255, dtype="float64") /* ty=Tensor[(147), float64] */;
  %254 = reshape(%252, newshape=[9, 5, 3]) /* ty=Tensor[(9, 5, 3), int32] */;
  %255 = reshape(%253, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %256 = @func_3593(%254, %255) /* ty=(Tensor[(9, 5, 3), bool], Tensor[(3, 7, 7), float64], Tensor[(147), float64]) */;
  %257 = %256.2;
  %258 = cast(%var_7255, dtype="float32") /* ty=Tensor[(147), float32] */;
  %259 = shape_of(%257, dtype="int32") /* ty=Tensor[(1), int32] */;
  %260 = cast(%257, dtype="float32") /* ty=Tensor[(147), float32] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?), float32] */;
  %262 = cast(meta[relay.Constant][12] /* ty=Tensor[(147), float64] */, dtype="uint64") /* ty=Tensor[(147), uint64] */;
  %263 = shape_of(%257, dtype="int32") /* ty=Tensor[(1), int32] */;
  %264 = cast(%257, dtype="uint64") /* ty=Tensor[(147), uint64] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %266 = cast(meta[relay.Constant][12] /* ty=Tensor[(147), float64] */, dtype="float64") /* ty=Tensor[(147), float64] */;
  %267 = %248.1;
  %268 = %251.2;
  %269 = divide(%260, %261) /* ty=Tensor[(147), float32] */;
  %270 = minimum(%264, %265) /* ty=Tensor[(147), uint64] */;
  %271 = acos(%266) /* ty=Tensor[(147), float64] */;
  %272 = @func_4758() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%267, %268, meta[relay.Constant][10] /* ty=Tensor[(1008), float32] */, meta[relay.Constant][11] /* ty=Tensor[(135), int32] */, %269, %270, %271, %272)
}

def @func_3045(%var_3041: Tensor[(16, 4, 14), int32]) -> (Tensor[(16, 4, 14), bool],) {
  %273 = cast(%var_3041, dtype="bool") /* ty=Tensor[(16, 4, 14), bool] */;
  %274 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(16, 4, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 4, 14), int32] */, dtype="bool") /* ty=Tensor[(16, 4, 14), bool] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %277 = less(%275, %276) /* ty=Tensor[(16, 4, 14), bool] */;
  (%277,)
}

def @func_6298() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) {
  %278 = @func_2643() /* ty=Tensor[(9, 14, 7), uint16] */;
  %279 = cast(%278, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %280 = reshape(%279, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), float64] */;
  %281 = @func_2526(%280) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) */;
  %282 = %281.1;
  (%278, %282)
}

def @func_10331(%var_10295: Tensor[(6, 4, 12), int8], %var_10296: Tensor[(6, 4, 12), int8], %var_10305: Tensor[(147), float64]) -> (Tensor[(6, 4, 12), int8], Tensor[(147), float32], Tensor[(147), float64], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) {
  %283 = cast(%var_10296, dtype="int8") /* ty=Tensor[(6, 4, 12), int8] */;
  %284 = shape_of(%var_10295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%var_10295, dtype="int8") /* ty=Tensor[(6, 4, 12), int8] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %287 = cast(%var_10305, dtype="float64") /* ty=Tensor[(147), float64] */;
  %288 = cast(%var_10305, dtype="float64") /* ty=Tensor[(147), float64] */;
  %289 = reshape(%287, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %290 = reshape(%288, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %291 = @func_7660(%289, %290) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float32], Tensor[(9, 14, 7), uint16]) */;
  %292 = @func_3996() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %293 = @func_2153() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %294 = minimum(%285, %286) /* ty=Tensor[(6, 4, 12), int8] */;
  %295 = %291.3;
  %296 = %292.1;
  %297 = %293.1;
  (%294, %295, %var_10305, %296, %297)
}

def @func_1111(%var_1077: Tensor[(1, 147), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(?, 147), int8], Tensor[(9, 14, 7), uint16]) {
  %298 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %299 = cast(%var_1077, dtype="float64") /* ty=Tensor[(1, 147), float64] */;
  %300 = reshape(%299, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %301 = @func_1059(%300) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float64]) */;
  %302 = %301.2;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(147), float64] */;
  %304 = reshape(%303, newshape=[3, 7, 7]) /* ty=Tensor[(3, 7, 7), float64] */;
  %305 = @func_891(%304) /* ty=(Tensor[(3, 7, 7), float64], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %306 = cast(%302, dtype="int8") /* ty=Tensor[(147), int8] */;
  %307 = shape_of(%var_1077, dtype="int32") /* ty=Tensor[(2), int32] */;
  %308 = cast(%var_1077, dtype="int8") /* ty=Tensor[(1, 147), int8] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %310 = %298.0;
  %311 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
  %312 = %305.2;
  %313 = add(%308, %309) /* ty=Tensor[(?, 147), int8] */;
  %314 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%310, %311, %312, %313, %314)
}

def @func_3677(%var_3673: Tensor[(3, 4, 14), uint64]) -> Tensor[(3, 4, 14), uint64] {
  %315 = cast(%var_3673, dtype="uint64") /* ty=Tensor[(3, 4, 14), uint64] */;
  %316 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(3, 4, 14), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 4, 14), uint64] */, dtype="uint64") /* ty=Tensor[(3, 4, 14), uint64] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%317, %318) /* ty=Tensor[(3, 4, 14), uint64] */
}

def @func_9086(%var_9039: Tensor[(1, 1820), uint64]) -> (Tensor[(13, 6, 10), float64], Tensor[(?, 1820), float64], Tensor[(13, 6, 10), int8]) {
  %319 = @func_4123() /* ty=(Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) */;
  %320 = %319.0;
  %321 = cast(%320, dtype="float64") /* ty=Tensor[(13, 6, 10), float64] */;
  %322 = cast(%var_9039, dtype="uint64") /* ty=Tensor[(1, 1820), uint64] */;
  %323 = cast(%var_9039, dtype="uint64") /* ty=Tensor[(1, 1820), uint64] */;
  %324 = reshape(%322, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
  %325 = reshape(%323, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
  %326 = @func_1824(%324, %325) /* ty=(Tensor[(10, 13, 14), bool], Tensor[(9, 14, 7), int8]) */;
  %327 = %326.0;
  %328 = cast(%327, dtype="bool") /* ty=Tensor[(10, 13, 14), bool] */;
  %329 = shape_of(%var_9039, dtype="int32") /* ty=Tensor[(2), int32] */;
  %330 = cast(%var_9039, dtype="bool") /* ty=Tensor[(1, 1820), bool] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %332 = less(%330, %331) /* ty=Tensor[(?, 1820), bool] */;
  %333 = cast(%327, dtype="float64") /* ty=Tensor[(10, 13, 14), float64] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(2), int32] */;
  %335 = cast(%332, dtype="float64") /* ty=Tensor[(?, 1820), float64] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %337 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 6, 10), float32] */, dtype="int8") /* ty=Tensor[(13, 6, 10), int8] */;
  %338 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%320, dtype="int8") /* ty=Tensor[(13, 6, 10), int8] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %341 = cos(%321) /* ty=Tensor[(13, 6, 10), float64] */;
  %342 = floor_divide(%335, %336) /* ty=Tensor[(?, 1820), float64] */;
  %343 = multiply(%339, %340) /* ty=Tensor[(13, 6, 10), int8] */;
  (%341, %342, %343)
}

def @func_5787(%var_5778: uint8) -> Tensor[(5, 3, 12), bool] {
  %344 = cast(%var_5778, dtype="bool") /* ty=bool */;
  %345 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 3, 12), uint8] */, dtype="bool") /* ty=Tensor[(5, 3, 12), bool] */;
  greater(%344, %345) /* ty=Tensor[(5, 3, 12), bool] */
}

def @func_4640(%var_4628: Tensor[(432), uint32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(468), float64], Tensor[(9, 4, 12), int64], Tensor[(432), uint32], Tensor[(9, 14, 7), float64]) {
  %346 = @func_4198() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %347 = cast(meta[relay.Constant][17] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %348 = reshape(%347, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %349 = @func_3404(%348) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 13, 4), int16], Tensor[(468), float64]) */;
  %350 = cast(%var_4628, dtype="uint32") /* ty=Tensor[(432), uint32] */;
  %351 = reshape(%350, newshape=[1, 432]) /* ty=Tensor[(1, 432), uint32] */;
  %352 = @func_3750(%351) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(48), uint32], Tensor[(9, 4, 12), int64]) */;
  %353 = %346.0;
  %354 = cast(%353, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %355 = reshape(%354, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), float32] */;
  %356 = @func_2318(%355) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) */;
  %357 = %356.2;
  %358 = cast(%357, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %359 = %349.3;
  %360 = %352.2;
  %361 = atanh(%358) /* ty=Tensor[(9, 14, 7), float64] */;
  (%353, %359, meta[relay.Constant][17] /* ty=Tensor[(468), float64] */, %360, %var_4628, %361)
}

def @func_7166() -> (Tensor[(9, 14, 7), float64],) {
  %362 = @func_6382() /* ty=Tensor[(9, 14, 7), float64] */;
  (%362,)
}

def @func_5622(%var_5602: Tensor[(324), bool]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), uint16], Tensor[(36), float32], Tensor[(1, 36), bool], Tensor[(9, 14, 7), uint16], Tensor[(324), bool], Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(143, 9), float64]) {
  %363 = @func_3335() /* ty=(Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %364 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %365 = @func_2153() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %366 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 36), bool] */, dtype="bool") /* ty=Tensor[(1, 36), bool] */;
  %367 = reshape(%366, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %368 = @func_4096(%367) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(90), float32], Tensor[(3, 2, 15), float32], Tensor[(9, 4), bool], Tensor[(36), float32], Tensor[(9, 14, 7), float32]) */;
  %369 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 36), bool] */, dtype="bool") /* ty=Tensor[(1, 36), bool] */;
  %370 = cast(%var_5602, dtype="bool") /* ty=Tensor[(324), bool] */;
  %371 = reshape(%369, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), bool] */;
  %372 = reshape(%370, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
  %373 = @func_2818(%371, %372) /* ty=(Tensor[(12, 9, 3), float32], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(9, 14, 7), uint16]) */;
  %374 = %373.3;
  %375 = cast(%374, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %376 = reshape(%375, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), uint16] */;
  %377 = cast(meta[relay.Constant][19] /* ty=Tensor[(143, 9), float64] */, dtype="float64") /* ty=Tensor[(143, 9), float64] */;
  %378 = reshape(%377, newshape=[11, 9, 13]) /* ty=Tensor[(11, 9, 13), float64] */;
  %379 = @func_275(%378) /* ty=(Tensor[(11, 9, 13), float64],) */;
  %380 = %363.1;
  %381 = %364.0;
  %382 = @func_4897() /* ty=Tensor[(9, 14, 7), bool] */;
  %383 = %365.1;
  %384 = %368.4;
  %385 = @func_2926(%376) /* ty=Tensor[(9, 14, 7), float32] */;
  %386 = %379.0;
  (%380, %381, %382, %383, %384, meta[relay.Constant][18] /* ty=Tensor[(1, 36), bool] */, %374, %var_5602, %385, %386, meta[relay.Constant][19] /* ty=Tensor[(143, 9), float64] */)
}

def @func_4177(%var_4174: Tensor[(1014), uint8], %var_4175: Tensor[(1, 90), float32]) -> (Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(1, 90), float32]) {
  %387 = @func_2379() /* ty=(Tensor[(9, ?, 4), float64],) */;
  %388 = %387.0;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(9, ?, 4), float64] */;
  %390 = cast(%var_4174, dtype="uint8") /* ty=Tensor[(1014), uint8] */;
  %391 = cast(%var_4174, dtype="uint8") /* ty=Tensor[(1014), uint8] */;
  %392 = cast(%var_4175, dtype="float32") /* ty=Tensor[(1, 90), float32] */;
  %393 = cast(%388, dtype="bool") /* ty=Tensor[(9, ?, 4), bool] */;
  %394 = reshape(%390, newshape=[13, 13, 6]) /* ty=Tensor[(13, 13, 6), uint8] */;
  %395 = reshape(%391, newshape=[13, 13, 6]) /* ty=Tensor[(13, 13, 6), uint8] */;
  %396 = reshape(%392, newshape=[90]) /* ty=Tensor[(90), float32] */;
  %397 = reshape(%393, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %398 = @func_3880(%394, %395, %396, %397) /* ty=(Tensor[(13, 13, 6), uint8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(90), float32], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %399 = sinh(%389) /* ty=Tensor[(9, ?, 4), float64] */;
  %400 = %398.7;
  (%399, %400, %var_4174, %var_4175)
}

def @func_10091() -> (Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16], Tensor[(147), float64], Tensor[(9, 14, 7), uint16], Tensor[(9, 4, 12), float64], Tensor[(48), uint32], Tensor[(12, 36), uint32]) {
  %401 = @func_8810() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) */;
  %402 = cast(meta[relay.Constant][20] /* ty=Tensor[(147), float64] */, dtype="float64") /* ty=Tensor[(147), float64] */;
  %403 = cast(meta[relay.Constant][20] /* ty=Tensor[(147), float64] */, dtype="float64") /* ty=Tensor[(147), float64] */;
  %404 = reshape(%402, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %405 = reshape(%403, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %406 = @func_7660(%404, %405) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float32], Tensor[(9, 14, 7), uint16]) */;
  %407 = @func_6868() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %408 = cast(meta[relay.Constant][21] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %409 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 36), uint32] */, dtype="uint32") /* ty=Tensor[(12, 36), uint32] */;
  %410 = reshape(%408, newshape=[1, 4, 12]) /* ty=Tensor[(1, 4, 12), uint32] */;
  %411 = reshape(%409, newshape=[9, 4, 12]) /* ty=Tensor[(9, 4, 12), uint32] */;
  %412 = @func_1573(%410, %411) /* ty=(Tensor[(9, 4, 12), float64],) */;
  %413 = %401.1;
  %414 = %406.4;
  %415 = %407.0;
  %416 = %412.0;
  (%413, %414, meta[relay.Constant][20] /* ty=Tensor[(147), float64] */, %415, %416, meta[relay.Constant][21] /* ty=Tensor[(48), uint32] */, meta[relay.Constant][22] /* ty=Tensor[(12, 36), uint32] */)
}

def @func_8419(%var_8414: int8, %var_8415: Tensor[(9, 13, 8), int8]) -> (Tensor[(9, 13, 8), bool],) {
  %417 = cast(%var_8414, dtype="bool") /* ty=bool */;
  %418 = cast(%var_8415, dtype="bool") /* ty=Tensor[(9, 13, 8), bool] */;
  %419 = not_equal(%417, %418) /* ty=Tensor[(9, 13, 8), bool] */;
  (%419,)
}

def @func_4476() -> Tensor[(2, 5, 7), float64] {
  %420 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 5, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 5, 7), float64] */;
  sigmoid(%420) /* ty=Tensor[(2, 5, 7), float64] */
}

def @func_11243() -> (Tensor[(11, 9, 13), float64], Tensor[(9, 14, 7), uint16]) {
  %421 = @func_4469() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %422 = %421.1;
  %423 = cast(%422, dtype="float64") /* ty=Tensor[(11, 9, 13), float64] */;
  %424 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %425 = cosh(%423) /* ty=Tensor[(11, 9, 13), float64] */;
  %426 = %424.0;
  (%425, %426)
}

def @func_954() -> (Tensor[(9, 14, 7), uint16],) {
  %427 = cast(meta[relay.Constant][25] /* ty=Tensor[(9, 14, 7), uint16] */, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %428 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(9, 14, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 14, 7), uint16] */, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %431 = right_shift(%429, %430) /* ty=Tensor[(9, 14, 7), uint16] */;
  (%431,)
}

def @func_8958() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %432 = @func_6179() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %433 = %432.2;
  %434 = @func_6919() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%433, %434)
}

def @func_5765(%var_5761: Tensor[(1008), float32]) -> (Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32]) {
  %435 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %436 = cast(%var_5761, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %437 = reshape(%436, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
  %438 = @func_4825(%437) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32]) */;
  %439 = @func_4220() /* ty=Tensor[(9, 14, 7), float32] */;
  %440 = %435.0;
  %441 = %438.1;
  (%439, %440, %441, %var_5761)
}

def @func_8683() -> (Tensor[(2, 5, 7), float32],) {
  %442 = @func_4476() /* ty=Tensor[(2, 5, 7), float64] */;
  %443 = cast(%442, dtype="float32") /* ty=Tensor[(2, 5, 7), float32] */;
  %444 = log10(%443) /* ty=Tensor[(2, 5, 7), float32] */;
  (%444,)
}

def @func_10770() -> (Tensor[(9, 14, 7), int8],) {
  %445 = @func_5198() /* ty=(Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16]) */;
  %446 = %445.0;
  (%446,)
}

def @func_10836() -> Tensor[(9, 14, 7), float64] {
  %447 = @func_7166() /* ty=(Tensor[(9, 14, 7), float64],) */;
  %447.0
}

def @func_8862() -> Tensor[(9, 14, 7), uint16] {
  @func_5839() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_4825(%var_4819: Tensor[(1008), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32]) {
  %448 = cast(%var_4819, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %449 = reshape(%448, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), float32] */;
  %450 = @func_4043(%449) /* ty=(Tensor[(1820), uint64], Tensor[(9, 14, 8), int64], Tensor[(9, 14, 7), uint16]) */;
  %451 = @func_4583() /* ty=Tensor[(9, 14, 7), uint16] */;
  %452 = %450.2;
  (%451, %452, %var_4819)
}

def @func_8810() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) {
  %453 = @func_7152() /* ty=Tensor[(9, 14, 7), uint16] */;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %455 = reshape(%454, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), float32] */;
  %456 = @func_2318(%455) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) */;
  %457 = %456.4;
  (%453, %457)
}

def @func_1589() -> Tensor[(9, 14, 7), uint16] {
  @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_1174() -> Tensor[(9, 14, 7), uint16] {
  %458 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %458.0
}

def @func_7867(%var_7832: Tensor[(9, 14, 7), uint16], %var_7857: Tensor[(13, 78), uint8], %var_7858: Tensor[(90), float32], %var_7859: Tensor[(36), bool]) -> (Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), uint16], Tensor[(90), float32], Tensor[(13, 78), uint8], Tensor[(90), float32], Tensor[(36), bool], Tensor[(9, 14, 7), float32]) {
  %459 = @func_6829() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) */;
  %460 = %459.0;
  %461 = cast(%var_7832, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%460, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %465 = @func_4198() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %466 = cast(%var_7857, dtype="uint8") /* ty=Tensor[(13, 78), uint8] */;
  %467 = cast(%var_7857, dtype="uint8") /* ty=Tensor[(13, 78), uint8] */;
  %468 = cast(%var_7858, dtype="float32") /* ty=Tensor[(90), float32] */;
  %469 = cast(%var_7859, dtype="bool") /* ty=Tensor[(36), bool] */;
  %470 = reshape(%466, newshape=[13, 13, 6]) /* ty=Tensor[(13, 13, 6), uint8] */;
  %471 = reshape(%467, newshape=[13, 13, 6]) /* ty=Tensor[(13, 13, 6), uint8] */;
  %472 = reshape(%468, newshape=[90]) /* ty=Tensor[(90), float32] */;
  %473 = reshape(%469, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %474 = @func_3880(%470, %471, %472, %473) /* ty=(Tensor[(13, 13, 6), uint8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(90), float32], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %475 = cast(%var_7859, dtype="bool") /* ty=Tensor[(36), bool] */;
  %476 = reshape(%475, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %477 = @func_4096(%476) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(90), float32], Tensor[(3, 2, 15), float32], Tensor[(9, 4), bool], Tensor[(36), float32], Tensor[(9, 14, 7), float32]) */;
  %478 = less(%463, %464) /* ty=Tensor[(9, 14, 7), bool] */;
  %479 = %465.0;
  %480 = %474.4;
  %481 = %477.5;
  (%478, %479, %480, %var_7857, %var_7858, %var_7859, %481)
}

def @func_2153() -> (Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
  %482 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
  %483 = %482.1;
  %484 = cast(%483, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %485 = acosh(%484) /* ty=Tensor[(9, 14, 7), float64] */;
  %486 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%485, %486)
}

def @func_5014() -> (Tensor[(9, 14, 7), uint16],) {
  %487 = @func_4346() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%487,)
}

def @func_7194(%var_7183: uint8) -> (Tensor[(9, 14, 7), float64], Tensor[(5, 3, 12), bool], uint8, Tensor[(9, 13, 4), int16], Tensor[(468), float64]) {
  %488 = @func_2339() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), bool]) */;
  %489 = cast(%var_7183, dtype="uint8") /* ty=uint8 */;
  %490 = reshape(%489, newshape=[]) /* ty=uint8 */;
  %491 = cast(meta[relay.Constant][26] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %492 = reshape(%491, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), float64] */;
  %493 = @func_2567(%492) /* ty=(Tensor[(9, 13, 4), int16],) */;
  %494 = %488.0;
  %495 = @func_5787(%490) /* ty=Tensor[(5, 3, 12), bool] */;
  %496 = %493.0;
  (%494, %495, %var_7183, %496, meta[relay.Constant][26] /* ty=Tensor[(468), float64] */)
}

def @func_2392(%var_2388: Tensor[(21, 7), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(21, 7), float64]) {
  %497 = cast(%var_2388, dtype="float64") /* ty=Tensor[(21, 7), float64] */;
  %498 = reshape(%497, newshape=[1, 147]) /* ty=Tensor[(1, 147), float64] */;
  %499 = @func_1111(%498) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(?, 147), int8], Tensor[(9, 14, 7), uint16]) */;
  %500 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  %501 = %499.4;
  (%500, %501, %var_2388)
}

def @func_4198() -> (Tensor[(9, 14, 7), uint16],) {
  %502 = @func_2153() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %503 = %502.1;
  (%503,)
}

def @func_5845() -> Tensor[(9, 14, 7), uint16] {
  @func_4346() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_1476() -> Tensor[(9, 14, 7), bool] {
  %504 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %505 = %504.0;
  %506 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %507 = %506.1;
  %508 = cast(%507, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %509 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%505, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%510, %511) /* ty=Tensor[(9, 14, 7), bool] */
}

def @func_8359() -> (Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(3, 30), float32]) {
  %512 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %513 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 30), float32] */, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
  %514 = reshape(%513, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float32] */;
  %515 = @func_127(%514) /* ty=(Tensor[(3, 2, 15), float64],) */;
  %516 = %512.0;
  %517 = %515.0;
  (%516, %517, meta[relay.Constant][27] /* ty=Tensor[(3, 30), float32] */)
}

def @func_10164() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(432), uint32], Tensor[(9, 14, 7), uint16]) {
  %518 = cast(meta[relay.Constant][28] /* ty=Tensor[(432), uint32] */, dtype="uint32") /* ty=Tensor[(432), uint32] */;
  %519 = reshape(%518, newshape=[1, 432]) /* ty=Tensor[(1, 432), uint32] */;
  %520 = @func_3750(%519) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(48), uint32], Tensor[(9, 4, 12), int64]) */;
  %521 = @func_5839() /* ty=Tensor[(9, 14, 7), uint16] */;
  %522 = %520.0;
  %523 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%521, %522, meta[relay.Constant][28] /* ty=Tensor[(432), uint32] */, %523)
}

def @func_10568(%var_10536: Tensor[(1287), float64], %var_10566: Tensor[(147), float64]) -> (Tensor[(13, 6, 10), float32], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(9, 14, 7), float64], Tensor[(2, 5, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) {
  %524 = @func_4123() /* ty=(Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) */;
  %525 = cast(%var_10536, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %526 = reshape(%525, newshape=[11, 9, 13]) /* ty=Tensor[(11, 9, 13), float64] */;
  %527 = @func_275(%526) /* ty=(Tensor[(11, 9, 13), float64],) */;
  %528 = @func_2718() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %529 = @func_8683() /* ty=(Tensor[(2, 5, 7), float32],) */;
  %530 = cast(%var_10566, dtype="float64") /* ty=Tensor[(147), float64] */;
  %531 = reshape(%530, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %532 = @func_7294(%531) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32], Tensor[(135), int32], Tensor[(147), float32], Tensor[(147), uint64], Tensor[(147), float64], Tensor[(9, 14, 7), uint16]) */;
  %533 = %524.0;
  %534 = %527.0;
  %535 = %528.0;
  %536 = %529.0;
  %537 = %532.7;
  (%533, %534, %var_10536, %535, %536, %537, %var_10566)
}

def @func_9202() -> (Tensor[(9, 14, 7), bool],) {
  %538 = @func_1928() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */;
  %539 = %538.0;
  (%539,)
}

def @func_3422(%var_3416: Tensor[(9, 14, 7), uint16]) -> (Tensor[(9, 14, 7), float32],) {
  %540 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %541 = %540.0;
  %542 = cast(%var_3416, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%541, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %546 = mod(%544, %545) /* ty=Tensor[(9, 14, 7), float32] */;
  (%546,)
}

def @func_9547() -> (Tensor[(9, 14, 7), float64],) {
  %547 = @func_6829() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) */;
  %548 = %547.1;
  (%548,)
}

def @func_10117(%var_10107: Tensor[(12, 11, 16), uint64], %var_10108: Tensor[(12, 11, 16), uint64]) -> (Tensor[(12, 11, 16), bool],) {
  %549 = cast(%var_10108, dtype="bool") /* ty=Tensor[(12, 11, 16), bool] */;
  %550 = shape_of(%var_10107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%var_10107, dtype="bool") /* ty=Tensor[(12, 11, 16), bool] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %553 = equal(%551, %552) /* ty=Tensor[(12, 11, 16), bool] */;
  (%553,)
}

def @func_10385() -> (Tensor[(9, 14, 7), uint16],) {
  %554 = @func_7152() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%554,)
}

def @func_11144() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %555 = @func_5014() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %556 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %557 = %555.0;
  %558 = %556.0;
  (%557, %558)
}

def @func_993() -> Tensor[(9, 14, 7), uint16] {
  %559 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %559.0
}

def @func_5839() -> Tensor[(9, 14, 7), uint16] {
  %560 = @func_5014() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %560.0
}

def @func_4220() -> Tensor[(9, 14, 7), float32] {
  %561 = @func_2974() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) */;
  %561.3
}

def @func_2855() -> (Tensor[(9, 14, 7), uint16],) {
  %562 = @func_2491() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %563 = %562.0;
  (%563,)
}

def @func_8482() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %564 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %565 = @func_6485() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(9, 14, 7), uint16]) */;
  %566 = @func_5226() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %567 = %564.0;
  %568 = %565.3;
  %569 = %566.0;
  (%567, %568, %569)
}

def @func_6338() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 13, 4), int16], Tensor[(468), float64]) {
  %570 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %571 = cast(meta[relay.Constant][29] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %572 = reshape(%571, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), float64] */;
  %573 = @func_2567(%572) /* ty=(Tensor[(9, 13, 4), int16],) */;
  %574 = %570.0;
  %575 = %573.0;
  (%574, %575, meta[relay.Constant][29] /* ty=Tensor[(468), float64] */)
}

def @func_6868() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
  %576 = @func_4198() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %577 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %578 = %577.1;
  %579 = cast(%578, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %580 = %576.0;
  %581 = cosh(%579) /* ty=Tensor[(9, 14, 7), float64] */;
  %582 = @func_2590() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%580, %581, %582)
}

def @func_5243() -> Tensor[(9, 14, 7), uint16] {
  %583 = @func_2491() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %583.0
}

def @func_8093() -> Tensor[(9, 14, 7), float32] {
  @func_4220() /* ty=Tensor[(9, 14, 7), float32] */
}

def @func_7660(%var_7629: Tensor[(147), float64], %var_7637: Tensor[(147), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float32], Tensor[(9, 14, 7), uint16]) {
  %584 = cast(%var_7629, dtype="float64") /* ty=Tensor[(147), float64] */;
  %585 = reshape(%584, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %586 = @func_1059(%585) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float64]) */;
  %587 = cast(%var_7629, dtype="float64") /* ty=Tensor[(147), float64] */;
  %588 = asin(%587) /* ty=Tensor[(147), float64] */;
  %589 = cast(%var_7637, dtype="float32") /* ty=Tensor[(147), float32] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(1), int32] */;
  %591 = cast(%588, dtype="float32") /* ty=Tensor[(147), float32] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?), float32] */;
  %593 = @func_6298() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) */;
  %594 = @func_5839() /* ty=Tensor[(9, 14, 7), uint16] */;
  %595 = @func_4220() /* ty=Tensor[(9, 14, 7), float32] */;
  %596 = %586.1;
  %597 = power(%591, %592) /* ty=Tensor[(147), float32] */;
  %598 = %593.0;
  (%594, %595, %596, %597, %598)
}

def @func_10736() -> Tensor[(9, 14, 7), uint16] {
  %599 = @func_4469() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %599.0
}

def @func_6919() -> Tensor[(9, 14, 7), uint16] {
  %600 = @func_3996() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %600.3
}

def @func_10460() -> (Tensor[(9, 14, 7), uint16],) {
  %601 = @func_5014() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %602 = %601.0;
  (%602,)
}

def @func_7446() -> (Tensor[(9, 14, 7), float32],) {
  %603 = @func_4220() /* ty=Tensor[(9, 14, 7), float32] */;
  (%603,)
}

def @func_10447(%var_10418: Tensor[(90), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(90), float32], Tensor[(9, 14, 7), float32]) {
  %604 = @func_8958() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %605 = cast(meta[relay.Constant][30] /* ty=Tensor[(1014), uint8] */, dtype="uint8") /* ty=Tensor[(1014), uint8] */;
  %606 = cast(%var_10418, dtype="float32") /* ty=Tensor[(90), float32] */;
  %607 = reshape(%605, newshape=[1014]) /* ty=Tensor[(1014), uint8] */;
  %608 = reshape(%606, newshape=[1, 90]) /* ty=Tensor[(1, 90), float32] */;
  %609 = @func_4177(%607, %608) /* ty=(Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(1, 90), float32]) */;
  %610 = %604.1;
  %611 = %609.1;
  %612 = @func_4220() /* ty=Tensor[(9, 14, 7), float32] */;
  (%610, %611, meta[relay.Constant][30] /* ty=Tensor[(1014), uint8] */, %var_10418, %612)
}

def @func_5226() -> (Tensor[(9, 14, 7), uint16],) {
  %613 = @func_5198() /* ty=(Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16]) */;
  %614 = %613.1;
  (%614,)
}

def @func_7083() -> (Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), uint16]) {
  %615 = @func_6390() /* ty=(Tensor[(9, ?, 4), float64],) */;
  %616 = @func_3204() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %617 = %615.0;
  %618 = @func_1476() /* ty=Tensor[(9, 14, 7), bool] */;
  %619 = %616.0;
  (%617, %618, %619)
}

def @func_1059(%var_1054: Tensor[(147), float64]) -> (Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float64]) {
  %620 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %621 = %620.0;
  %622 = cast(%621, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %623 = cast(%var_1054, dtype="float64") /* ty=Tensor[(147), float64] */;
  %624 = reshape(%623, newshape=[3, 7, 7]) /* ty=Tensor[(3, 7, 7), float64] */;
  %625 = @func_891(%624) /* ty=(Tensor[(3, 7, 7), float64], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %626 = cos(%622) /* ty=Tensor[(9, 14, 7), float32] */;
  %627 = %625.1;
  (%626, %627, %var_1054)
}

def @func_4375() -> (Tensor[(9, 14, 7), uint16],) {
  %628 = @func_2718() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %629 = %628.1;
  (%629,)
}

def @func_10205() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), float64]) {
  %630 = @func_10171() /* ty=(Tensor[(9, 14, 7), bool],) */;
  %631 = @func_5128() /* ty=Tensor[(9, 14, 7), uint16] */;
  %632 = %630.0;
  %633 = @func_6208() /* ty=Tensor[(9, 14, 7), float64] */;
  (%631, %632, %633)
}

def @func_11337() -> Tensor[(13, 6, 10), float32] {
  @func_8657() /* ty=Tensor[(13, 6, 10), float32] */
}

def @func_4123() -> (Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) {
  %634 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 10), float32] */;
  %635 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
  %636 = erf(%634) /* ty=Tensor[(13, 6, 10), float32] */;
  %637 = %635.0;
  (%636, %637)
}

def @func_6776() -> (Tensor[(9, 14, 7), float64],) {
  %638 = @func_6382() /* ty=Tensor[(9, 14, 7), float64] */;
  (%638,)
}

def @func_10276() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) {
  %639 = @func_3335() /* ty=(Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %640 = @func_5198() /* ty=(Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16]) */;
  %641 = %639.2;
  %642 = %640.0;
  (%641, %642)
}

def @func_9577() -> (Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), int8], Tensor[(14, 130), uint64]) {
  %643 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
  %644 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 130), uint64] */, dtype="uint64") /* ty=Tensor[(14, 130), uint64] */;
  %645 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 130), uint64] */, dtype="uint64") /* ty=Tensor[(14, 130), uint64] */;
  %646 = reshape(%644, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
  %647 = reshape(%645, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
  %648 = @func_1824(%646, %647) /* ty=(Tensor[(10, 13, 14), bool], Tensor[(9, 14, 7), int8]) */;
  %649 = %643.1;
  %650 = %648.1;
  (%649, %650, meta[relay.Constant][32] /* ty=Tensor[(14, 130), uint64] */)
}

def @func_11186() -> Tensor[(9, 14, 7), int8] {
  %651 = @func_10276() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
  %651.1
}

def @func_7426() -> (Tensor[(9, 14, 7), uint16],) {
  %652 = @func_4583() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%652,)
}

def @func_5095() -> Tensor[(9, 14, 7), int64] {
  %653 = @func_4346() /* ty=Tensor[(9, 14, 7), uint16] */;
  %654 = cast(meta[relay.Constant][33] /* ty=Tensor[(9, 14, 7), uint16] */, dtype="int64") /* ty=Tensor[(9, 14, 7), int64] */;
  %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%653, dtype="int64") /* ty=Tensor[(9, 14, 7), int64] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%656, %657) /* ty=Tensor[(9, 14, 7), int64] */
}

def @func_9029() -> (Tensor[(9, 14, 7), uint16],) {
  %658 = @func_4952() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %659 = %658.0;
  (%659,)
}

def @func_9486() -> Tensor[(9, 14, 7), uint16] {
  @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_4043(%var_4003: Tensor[(9, 14, 8), float32]) -> (Tensor[(1820), uint64], Tensor[(9, 14, 8), int64], Tensor[(9, 14, 7), uint16]) {
  %660 = @func_2630() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(1820), uint64], Tensor[(9, 14, 7), uint16]) */;
  %661 = cast(%var_4003, dtype="float32") /* ty=Tensor[(9, 14, 8), float32] */;
  %662 = erf(%661) /* ty=Tensor[(9, 14, 8), float32] */;
  %663 = cast(%var_4003, dtype="int64") /* ty=Tensor[(9, 14, 8), int64] */;
  %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%662, dtype="int64") /* ty=Tensor[(9, 14, 8), int64] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %667 = %660.2;
  %668 = left_shift(%665, %666) /* ty=Tensor[(9, 14, 8), int64] */;
  %669 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%667, %668, %669)
}

def @func_9612(%var_9606: Tensor[(5, 10, 16), bool], %var_9607: Tensor[(5, 10, 16), bool]) -> Tensor[(5, 10, 16), bool] {
  %670 = cast(%var_9607, dtype="bool") /* ty=Tensor[(5, 10, 16), bool] */;
  %671 = shape_of(%var_9606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%var_9606, dtype="bool") /* ty=Tensor[(5, 10, 16), bool] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%672, %673) /* ty=Tensor[(5, 10, 16), bool] */
}

def @func_6179() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %674 = @func_4758() /* ty=Tensor[(9, 14, 7), uint16] */;
  %675 = @func_3638() /* ty=Tensor[(9, 14, 7), uint16] */;
  %676 = @func_5128() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%674, %675, %676)
}

def @func_9796(%var_9790: Tensor[(13, 6, 10), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(13, 6, 10), float64]) {
  %677 = @func_5226() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %678 = @func_5890() /* ty=(Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) */;
  %679 = %678.0;
  %680 = cast(%var_9790, dtype="float64") /* ty=Tensor[(13, 6, 10), float64] */;
  %681 = shape_of(%679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(%679, dtype="float64") /* ty=Tensor[(13, 6, 10), float64] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %684 = @func_8862() /* ty=Tensor[(9, 14, 7), uint16] */;
  %685 = %677.0;
  %686 = minimum(%682, %683) /* ty=Tensor[(13, 6, 10), float64] */;
  (%684, %685, %686)
}

def @func_4583() -> Tensor[(9, 14, 7), uint16] {
  %687 = @func_4425() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %687.0
}

def @func_3204() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %688 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %689 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %690 = %688.1;
  %691 = %689.0;
  (%690, %691)
}

def @func_9498() -> (Tensor[(21, 7), float64],) {
  %692 = @func_7534() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(11, 9, 13), float64], Tensor[(21, 7), float64]) */;
  %693 = %692.3;
  (%693,)
}

def @func_2567(%var_2559: Tensor[(9, 13, 4), float64]) -> (Tensor[(9, 13, 4), int16],) {
  %694 = @func_2379() /* ty=(Tensor[(9, ?, 4), float64],) */;
  %695 = %694.0;
  %696 = cast(%695, dtype="int16") /* ty=Tensor[(9, ?, 4), int16] */;
  %697 = cast(%var_2559, dtype="int16") /* ty=Tensor[(9, 13, 4), int16] */;
  %698 = bitwise_xor(%696, %697) /* ty=Tensor[(9, 13, 4), int16] */;
  (%698,)
}

def @func_3335() -> (Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %699 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %700 = %699.0;
  %701 = cast(%700, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %702 = @func_2153() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %703 = rsqrt(%701) /* ty=Tensor[(9, 14, 7), float32] */;
  %704 = @func_2590() /* ty=Tensor[(9, 14, 7), uint16] */;
  %705 = %702.1;
  (%703, %704, %705)
}

def @func_5890() -> (Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) {
  %706 = @func_4123() /* ty=(Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) */;
  %707 = %706.0;
  %708 = cast(%707, dtype="float64") /* ty=Tensor[(13, 6, 10), float64] */;
  %709 = @func_2339() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), bool]) */;
  %710 = asin(%708) /* ty=Tensor[(13, 6, 10), float64] */;
  %711 = %709.0;
  (%710, %711)
}

def @func_5128() -> Tensor[(9, 14, 7), uint16] {
  %712 = @func_4375() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %712.0
}

def @func_3996() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %713 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  %714 = cast(%713, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %715 = reshape(%714, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), uint16] */;
  %716 = @func_2926(%715) /* ty=Tensor[(9, 14, 7), float32] */;
  %717 = cast(%716, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %718 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %719 = sin(%717) /* ty=Tensor[(9, 14, 7), float32] */;
  %720 = %718.0;
  %721 = @func_1589() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%713, %719, %720, %721)
}

def @func_8340() -> (Tensor[(9, 14, 7), bool],) {
  %722 = @func_4897() /* ty=Tensor[(9, 14, 7), bool] */;
  (%722,)
}

def @func_10171() -> (Tensor[(9, 14, 7), bool],) {
  %723 = @func_1928() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */;
  %724 = %723.0;
  (%724,)
}

def @func_2339() -> (Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), bool]) {
  %725 = @func_2153() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %726 = %725.0;
  %727 = @func_1476() /* ty=Tensor[(9, 14, 7), bool] */;
  (%726, %727)
}

def @func_11290() -> (Tensor[(9, 14, 7), uint16],) {
  %728 = @func_8482() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %729 = %728.2;
  (%729,)
}

def @func_6106() -> (Tensor[(9, 14, 7), float64], Tensor[(9, ?, 4), float64]) {
  %730 = @func_5890() /* ty=(Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) */;
  %731 = @func_2379() /* ty=(Tensor[(9, ?, 4), float64],) */;
  %732 = %730.1;
  %733 = %731.0;
  (%732, %733)
}

def @func_127(%var_87: Tensor[(3, 2, 15), float32]) -> (Tensor[(3, 2, 15), float64],) {
  %734 = cast(%var_87, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
  %735 = sinh(%734) /* ty=Tensor[(3, 2, 15), float32] */;
  %736 = cast(%735, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
  %737 = atanh(%736) /* ty=Tensor[(3, 2, 15), float32] */;
  %738 = cast(%735, dtype="float64") /* ty=Tensor[(3, 2, 15), float64] */;
  %739 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%737, dtype="float64") /* ty=Tensor[(3, 2, 15), float64] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %742 = floor_divide(%740, %741) /* ty=Tensor[(3, 2, 15), float64] */;
  (%742,)
}

def @func_1573(%var_1542: Tensor[(1, 4, 12), uint32], %var_1543: Tensor[(9, 4, 12), uint32]) -> (Tensor[(9, 4, 12), float64],) {
  %743 = cast(%var_1542, dtype="uint32") /* ty=Tensor[(1, 4, 12), uint32] */;
  %744 = cast(%var_1543, dtype="uint32") /* ty=Tensor[(9, 4, 12), uint32] */;
  %745 = right_shift(%743, %744) /* ty=Tensor[(9, 4, 12), uint32] */;
  %746 = cast(%745, dtype="float64") /* ty=Tensor[(9, 4, 12), float64] */;
  %747 = log(%746) /* ty=Tensor[(9, 4, 12), float64] */;
  %748 = cast(%745, dtype="bool") /* ty=Tensor[(9, 4, 12), bool] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%747, dtype="bool") /* ty=Tensor[(9, 4, 12), bool] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %752 = equal(%750, %751) /* ty=Tensor[(9, 4, 12), bool] */;
  %753 = cast(%752, dtype="float64") /* ty=Tensor[(9, 4, 12), float64] */;
  %754 = sigmoid(%753) /* ty=Tensor[(9, 4, 12), float64] */;
  (%754,)
}

def @func_2974() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) {
  %755 = @func_2630() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(1820), uint64], Tensor[(9, 14, 7), uint16]) */;
  %756 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
  %757 = @func_2590() /* ty=Tensor[(9, 14, 7), uint16] */;
  %758 = cast(%757, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %759 = reshape(%758, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), uint16] */;
  %760 = %755.3;
  %761 = %756.1;
  %762 = @func_2926(%759) /* ty=Tensor[(9, 14, 7), float32] */;
  %763 = @func_2643() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%760, %761, %757, %762, %763)
}

def @func_4096(%var_4067: Tensor[(36), bool]) -> (Tensor[(9, 14, 7), uint16], Tensor[(90), float32], Tensor[(3, 2, 15), float32], Tensor[(9, 4), bool], Tensor[(36), float32], Tensor[(9, 14, 7), float32]) {
  %764 = @func_2974() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) */;
  %765 = cast(meta[relay.Constant][34] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %766 = reshape(%765, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float32] */;
  %767 = @func_127(%766) /* ty=(Tensor[(3, 2, 15), float64],) */;
  %768 = %767.0;
  %769 = cast(%768, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
  %770 = cast(%var_4067, dtype="bool") /* ty=Tensor[(36), bool] */;
  %771 = reshape(%770, newshape=[9, 4]) /* ty=Tensor[(9, 4), bool] */;
  %772 = @func_3094(%771) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(9, 4), bool], Tensor[(324), bool]) */;
  %773 = cast(%var_4067, dtype="float32") /* ty=Tensor[(36), float32] */;
  %774 = %764.2;
  %775 = cast(%774, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %776 = reshape(%775, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), uint16] */;
  %777 = sqrt(%769) /* ty=Tensor[(3, 2, 15), float32] */;
  %778 = %772.3;
  %779 = erf(%773) /* ty=Tensor[(36), float32] */;
  %780 = @func_2926(%776) /* ty=Tensor[(9, 14, 7), float32] */;
  (%774, meta[relay.Constant][34] /* ty=Tensor[(90), float32] */, %777, %778, %779, %780)
}

def @func_3404(%var_3386: Tensor[(468), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 13, 4), int16], Tensor[(468), float64]) {
  %781 = @func_2855() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %782 = @func_2491() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %783 = cast(%var_3386, dtype="float64") /* ty=Tensor[(468), float64] */;
  %784 = reshape(%783, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), float64] */;
  %785 = @func_2567(%784) /* ty=(Tensor[(9, 13, 4), int16],) */;
  %786 = %781.0;
  %787 = %782.0;
  %788 = %785.0;
  (%786, %787, %788, %var_3386)
}

def @func_2590() -> Tensor[(9, 14, 7), uint16] {
  @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_7534() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(11, 9, 13), float64], Tensor[(21, 7), float64]) {
  %789 = @func_4425() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %790 = @func_4952() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %791 = cast(meta[relay.Constant][35] /* ty=Tensor[(21, 7), float64] */, dtype="float64") /* ty=Tensor[(21, 7), float64] */;
  %792 = reshape(%791, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %793 = @func_1059(%792) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float64]) */;
  %794 = %789.0;
  %795 = %790.1;
  %796 = %793.1;
  (%794, %795, %796, meta[relay.Constant][35] /* ty=Tensor[(21, 7), float64] */)
}

def @func_4952() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %797 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %798 = @func_3996() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %799 = %797.0;
  %800 = %798.3;
  (%799, %800)
}

def @func_5371(%var_5357: Tensor[(36), bool]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
  %801 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %802 = cast(%var_5357, dtype="bool") /* ty=Tensor[(36), bool] */;
  %803 = reshape(%802, newshape=[9, 4]) /* ty=Tensor[(9, 4), bool] */;
  %804 = @func_3094(%803) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(9, 4), bool], Tensor[(324), bool]) */;
  %805 = @func_2718() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %806 = %801.0;
  %807 = %804.0;
  %808 = %805.0;
  %809 = @func_1589() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%806, %807, %var_5357, %808, %809)
}

def @func_7703(%var_7679: Tensor[(10, 28), uint16], %var_7691: Tensor[(1014), uint8], %var_7692: Tensor[(3, 30), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(3, 30), float32], Tensor[(10, 28), int32]) {
  %810 = @func_6179() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %811 = cast(%var_7691, dtype="uint8") /* ty=Tensor[(1014), uint8] */;
  %812 = cast(%var_7692, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
  %813 = reshape(%811, newshape=[1014]) /* ty=Tensor[(1014), uint8] */;
  %814 = reshape(%812, newshape=[1, 90]) /* ty=Tensor[(1, 90), float32] */;
  %815 = @func_4177(%813, %814) /* ty=(Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(1, 90), float32]) */;
  %816 = cast(%var_7679, dtype="uint16") /* ty=Tensor[(10, 28), uint16] */;
  %817 = cast(%var_7679, dtype="uint16") /* ty=Tensor[(10, 28), uint16] */;
  %818 = reshape(%816, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), uint16] */;
  %819 = reshape(%817, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), uint16] */;
  %820 = @func_4276(%818, %819) /* ty=(Tensor[(14, 4, 5), uint16], Tensor[(9, 14, 7), float64]) */;
  %821 = %820.0;
  %822 = cast(%821, dtype="int32") /* ty=Tensor[(14, 4, 5), int32] */;
  %823 = shape_of(%var_7679, dtype="int32") /* ty=Tensor[(2), int32] */;
  %824 = cast(%var_7679, dtype="int32") /* ty=Tensor[(10, 28), int32] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %826 = %810.1;
  %827 = %815.1;
  %828 = subtract(%824, %825) /* ty=Tensor[(10, 28), int32] */;
  (%826, %827, %var_7691, %var_7692, %828)
}

def @func_4276(%var_4257: Tensor[(14, 4, 5), uint16], %var_4258: Tensor[(14, 4, 5), uint16]) -> (Tensor[(14, 4, 5), uint16], Tensor[(9, 14, 7), float64]) {
  %829 = cast(%var_4258, dtype="uint16") /* ty=Tensor[(14, 4, 5), uint16] */;
  %830 = shape_of(%var_4257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%var_4257, dtype="uint16") /* ty=Tensor[(14, 4, 5), uint16] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %833 = @func_2153() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %834 = bitwise_xor(%831, %832) /* ty=Tensor[(14, 4, 5), uint16] */;
  %835 = %833.0;
  (%834, %835)
}

def @func_8899() -> Tensor[(468), float64] {
  %836 = @func_5700() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), int8], Tensor[(468), float64]) */;
  %836.2
}

def @func_10022() -> (Tensor[(9, 14, 7), uint16],) {
  %837 = @func_8359() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(3, 30), float32]) */;
  %838 = %837.0;
  (%838,)
}

def @func_9120() -> (Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) {
  %839 = @func_3204() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %840 = @func_1928() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */;
  %841 = %839.1;
  %842 = %840.2;
  (%841, %842)
}

def @func_10637() -> Tensor[(9, 14, 7), uint16] {
  @func_1589() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_7114() -> (Tensor[(13, 6, 10), float64],) {
  %843 = @func_5890() /* ty=(Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) */;
  %844 = %843.0;
  (%844,)
}

def @func_1453() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) {
  %845 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %846 = %845.0;
  %847 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  %848 = cast(%847, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %849 = shape_of(%846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%846, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %852 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
  %853 = cast(%852, dtype="int8") /* ty=Tensor[(9, 14, 7), int8] */;
  %854 = shape_of(%846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%846, dtype="int8") /* ty=Tensor[(9, 14, 7), int8] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %857 = bitwise_xor(%850, %851) /* ty=Tensor[(9, 14, 7), uint16] */;
  %858 = multiply(%855, %856) /* ty=Tensor[(9, 14, 7), int8] */;
  (%857, %858)
}

def @func_1928() -> (Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) {
  %859 = cast(meta[relay.Constant][36] /* ty=Tensor[(147), float64] */, dtype="float64") /* ty=Tensor[(147), float64] */;
  %860 = reshape(%859, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %861 = @func_1059(%860) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float64]) */;
  %862 = @func_1476() /* ty=Tensor[(9, 14, 7), bool] */;
  %863 = %861.2;
  (%862, %863, meta[relay.Constant][36] /* ty=Tensor[(147), float64] */)
}

def @func_5057() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %864 = @func_2153() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %865 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
  %866 = %864.1;
  (%865, %866)
}

def @func_2643() -> Tensor[(9, 14, 7), uint16] {
  %867 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %867.0
}

def @func_4690(%var_4684: Tensor[(468), float64]) -> (Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), int8], Tensor[(468), float64]) {
  %868 = @func_4220() /* ty=Tensor[(9, 14, 7), float32] */;
  %869 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 14, 7), float32] */, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %871 = cast(%868, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %873 = @func_3335() /* ty=(Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %874 = cast(%var_4684, dtype="float64") /* ty=Tensor[(468), float64] */;
  %875 = reshape(%874, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
  %876 = @func_2890(%875) /* ty=(Tensor[(9, 14, 7), int8], Tensor[(147), float64], Tensor[(9, 13, 4), int16], Tensor[(234, 2), float64], Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) */;
  %877 = floor_mod(%871, %872) /* ty=Tensor[(9, 14, 7), float32] */;
  %878 = %873.0;
  %879 = %876.0;
  (%877, %878, %879, %var_4684)
}

def @func_6545(%var_6514: uint8) -> (Tensor[(11, 11, 8), int8], Tensor[(5, 3, 12), bool], uint8, Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool]) {
  %880 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 11, 8), int8] */, dtype="int8") /* ty=Tensor[(11, 11, 8), int8] */;
  %881 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(11, 11, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 11, 8), int8] */, dtype="int8") /* ty=Tensor[(11, 11, 8), int8] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %884 = cast(%var_6514, dtype="uint8") /* ty=uint8 */;
  %885 = reshape(%884, newshape=[]) /* ty=uint8 */;
  %886 = right_shift(%882, %883) /* ty=Tensor[(11, 11, 8), int8] */;
  %887 = @func_5787(%885) /* ty=Tensor[(5, 3, 12), bool] */;
  %888 = @func_1589() /* ty=Tensor[(9, 14, 7), uint16] */;
  %889 = @func_1476() /* ty=Tensor[(9, 14, 7), bool] */;
  (%886, %887, %var_6514, %888, %889)
}

def @func_6829() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) {
  %890 = @func_2855() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %891 = @func_1476() /* ty=Tensor[(9, 14, 7), bool] */;
  %892 = cast(%891, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %893 = %890.0;
  %894 = sinh(%892) /* ty=Tensor[(9, 14, 7), float64] */;
  (%893, %894)
}

def @func_2630() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(1820), uint64], Tensor[(9, 14, 7), uint16]) {
  %895 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %896 = cast(meta[relay.Constant][40] /* ty=Tensor[(1820), uint64] */, dtype="uint64") /* ty=Tensor[(1820), uint64] */;
  %897 = cast(meta[relay.Constant][40] /* ty=Tensor[(1820), uint64] */, dtype="uint64") /* ty=Tensor[(1820), uint64] */;
  %898 = reshape(%896, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
  %899 = reshape(%897, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
  %900 = @func_1824(%898, %899) /* ty=(Tensor[(10, 13, 14), bool], Tensor[(9, 14, 7), int8]) */;
  %901 = %895.1;
  %902 = cast(%901, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %903 = reshape(%902, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), float64] */;
  %904 = @func_2526(%903) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) */;
  %905 = %900.1;
  %906 = %904.0;
  (%901, %905, meta[relay.Constant][40] /* ty=Tensor[(1820), uint64] */, %906)
}

def @func_891(%var_866: Tensor[(3, 7, 7), float64]) -> (Tensor[(3, 7, 7), float64], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) {
  %907 = cast(%var_866, dtype="float64") /* ty=Tensor[(3, 7, 7), float64] */;
  %908 = cast(meta[relay.Constant][41] /* ty=Tensor[(1287), float64] */, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %909 = reshape(%908, newshape=[11, 9, 13]) /* ty=Tensor[(11, 9, 13), float64] */;
  %910 = @func_275(%909) /* ty=(Tensor[(11, 9, 13), float64],) */;
  %911 = atanh(%907) /* ty=Tensor[(3, 7, 7), float64] */;
  %912 = %910.0;
  (%911, %912, meta[relay.Constant][41] /* ty=Tensor[(1287), float64] */)
}

def @func_9354(%var_9293: Tensor[(5, 1, 10), float32]) -> (Tensor[(5, 1, 10), float32], Tensor[(9, 14, 7), uint16]) {
  %913 = cast(%var_9293, dtype="float32") /* ty=Tensor[(5, 1, 10), float32] */;
  %914 = sinh(%913) /* ty=Tensor[(5, 1, 10), float32] */;
  %915 = @func_4346() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%914, %915)
}

def @func_5982() -> Tensor[(9, 14, 7), uint16] {
  %916 = @func_4375() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %916.0
}

def @func_5277() -> (Tensor[(9, 14, 7), uint16],) {
  %917 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %918 = %917.1;
  (%918,)
}

def @func_5325(%var_5296: Tensor[(147, 1), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(147, 1), float64], Tensor[(9, 14, 7), uint16]) {
  %919 = cast(%var_5296, dtype="float64") /* ty=Tensor[(147, 1), float64] */;
  %920 = reshape(%919, newshape=[21, 7]) /* ty=Tensor[(21, 7), float64] */;
  %921 = @func_2392(%920) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(21, 7), float64]) */;
  %922 = @func_5277() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %923 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  %924 = %921.0;
  %925 = %922.0;
  (%923, %924, %var_5296, %925)
}

def @func_11207() -> (Tensor[(9, 14, 7), uint16],) {
  %926 = @func_10460() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %927 = %926.0;
  (%927,)
}

def @func_8316(%var_8169: Tensor[(15, 8, 6), uint64], %var_8225: Tensor[(15, 8, 6), uint64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(9, 14, 7), float64], Tensor[(15, 8, 6), bool], Tensor[(9, 14, 7), float64], Tensor[(1287), float64], Tensor[(1287), float64], Tensor[(468), bool], Tensor[(468), float32]) {
  %928 = cast(meta[relay.Constant][42] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %929 = reshape(%928, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %930 = @func_3404(%929) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 13, 4), int16], Tensor[(468), float64]) */;
  %931 = @func_5890() /* ty=(Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) */;
  %932 = cast(meta[relay.Constant][43] /* ty=Tensor[(15, 8, 6), uint64] */, dtype="uint64") /* ty=Tensor[(15, 8, 6), uint64] */;
  %933 = shape_of(%var_8169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %934 = cast(%var_8169, dtype="uint64") /* ty=Tensor[(15, 8, 6), uint64] */;
  %935 = dyn.reshape(%932, %933, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %936 = bitwise_or(%934, %935) /* ty=Tensor[(15, 8, 6), uint64] */;
  %937 = cast(%var_8225, dtype="bool") /* ty=Tensor[(15, 8, 6), bool] */;
  %938 = shape_of(%936, dtype="int32") /* ty=Tensor[(3), int32] */;
  %939 = cast(%936, dtype="bool") /* ty=Tensor[(15, 8, 6), bool] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %941 = @func_5890() /* ty=(Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) */;
  %942 = cast(meta[relay.Constant][44] /* ty=Tensor[(1287), float64] */, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %943 = reshape(%942, newshape=[1287]) /* ty=Tensor[(1287), float64] */;
  %944 = @func_2199(%943) /* ty=(Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %945 = @func_5700() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), int8], Tensor[(468), float64]) */;
  %946 = %945.2;
  %947 = cast(%946, dtype="float32") /* ty=Tensor[(468), float32] */;
  %948 = sigmoid(%947) /* ty=Tensor[(468), float32] */;
  %949 = cast(%946, dtype="bool") /* ty=Tensor[(468), bool] */;
  %950 = shape_of(%948, dtype="int32") /* ty=Tensor[(1), int32] */;
  %951 = cast(%948, dtype="bool") /* ty=Tensor[(468), bool] */;
  %952 = dyn.reshape(%949, %950, newshape=[]) /* ty=Tensor[(?), bool] */;
  %953 = cast(%948, dtype="float32") /* ty=Tensor[(468), float32] */;
  %954 = %930.0;
  %955 = %931.1;
  %956 = less_equal(%939, %940) /* ty=Tensor[(15, 8, 6), bool] */;
  %957 = %941.1;
  %958 = %944.2;
  %959 = greater_equal(%951, %952) /* ty=Tensor[(468), bool] */;
  %960 = atanh(%953) /* ty=Tensor[(468), float32] */;
  (%954, meta[relay.Constant][42] /* ty=Tensor[(468), float64] */, %955, %956, %957, %958, meta[relay.Constant][44] /* ty=Tensor[(1287), float64] */, %959, %960)
}

def @func_2379() -> (Tensor[(9, ?, 4), float64],) {
  %961 = cast(meta[relay.Constant][45] /* ty=Tensor[(9, 1, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %962 = rsqrt(%961) /* ty=Tensor[(9, 1, 4), float32] */;
  %963 = cast(meta[relay.Constant][45] /* ty=Tensor[(9, 1, 4), float32] */, dtype="float64") /* ty=Tensor[(9, 1, 4), float64] */;
  %964 = shape_of(%962, dtype="int32") /* ty=Tensor[(3), int32] */;
  %965 = cast(%962, dtype="float64") /* ty=Tensor[(9, 1, 4), float64] */;
  %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %967 = divide(%965, %966) /* ty=Tensor[(9, ?, 4), float64] */;
  (%967,)
}

def @func_5435(%var_5419: Tensor[(90, 1), float32], %var_5428: Tensor[(169, 6), uint8]) -> (Tensor[(9, 14, 7), uint16], Tensor[(90, ?), float64], Tensor[(169, 6), float64]) {
  %968 = @func_4425() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %969 = cast(meta[relay.Constant][46] /* ty=Tensor[(169, 6), uint8] */, dtype="uint8") /* ty=Tensor[(169, 6), uint8] */;
  %970 = cast(%var_5419, dtype="float32") /* ty=Tensor[(90, 1), float32] */;
  %971 = reshape(%969, newshape=[1014]) /* ty=Tensor[(1014), uint8] */;
  %972 = reshape(%970, newshape=[1, 90]) /* ty=Tensor[(1, 90), float32] */;
  %973 = @func_4177(%971, %972) /* ty=(Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(1, 90), float32]) */;
  %974 = %973.3;
  %975 = cast(%974, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %976 = shape_of(%var_5419, dtype="int32") /* ty=Tensor[(2), int32] */;
  %977 = cast(%var_5419, dtype="float64") /* ty=Tensor[(90, 1), float64] */;
  %978 = dyn.reshape(%975, %976, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %979 = cast(%var_5428, dtype="float64") /* ty=Tensor[(169, 6), float64] */;
  %980 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(169, 6), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %981 = cast(meta[relay.Constant][46] /* ty=Tensor[(169, 6), uint8] */, dtype="float64") /* ty=Tensor[(169, 6), float64] */;
  %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %983 = %968.0;
  %984 = floor_divide(%977, %978) /* ty=Tensor[(90, ?), float64] */;
  %985 = multiply(%981, %982) /* ty=Tensor[(169, 6), float64] */;
  (%983, %984, %985)
}

def @func_5642() -> Tensor[(13, 6, 10), float32] {
  %986 = @func_4123() /* ty=(Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) */;
  %987 = %986.0;
  %988 = cast(%987, dtype="float32") /* ty=Tensor[(13, 6, 10), float32] */;
  log(%988) /* ty=Tensor[(13, 6, 10), float32] */
}

def @func_11021() -> (Tensor[(9, 14, 7), uint16],) {
  %989 = @func_6485() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(9, 14, 7), uint16]) */;
  %990 = %989.3;
  (%990,)
}

def @func_2318(%var_2284: Tensor[(9, 14, 7), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) {
  %991 = @func_1589() /* ty=Tensor[(9, 14, 7), uint16] */;
  %992 = cast(meta[relay.Constant][47] /* ty=Tensor[(9, 14, 7), uint16] */, dtype="int32") /* ty=Tensor[(9, 14, 7), int32] */;
  %993 = shape_of(%991, dtype="int32") /* ty=Tensor[(3), int32] */;
  %994 = cast(%991, dtype="int32") /* ty=Tensor[(9, 14, 7), int32] */;
  %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %996 = bitwise_or(%994, %995) /* ty=Tensor[(9, 14, 7), int32] */;
  %997 = cast(%996, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %998 = sqrt(%997) /* ty=Tensor[(9, 14, 7), float32] */;
  %999 = cast(%var_2284, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %1000 = shape_of(%998, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1001 = cast(%998, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %1002 = dyn.reshape(%999, %1000, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1003 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
  %1004 = %1003.0;
  %1005 = cast(%1004, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %1006 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %1007 = %1006.0;
  %1008 = cast(%1007, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %1009 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  %1010 = logical_or(%1001, %1002) /* ty=Tensor[(9, 14, 7), bool] */;
  %1011 = log(%1005) /* ty=Tensor[(9, 14, 7), float32] */;
  %1012 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  %1013 = log2(%1008) /* ty=Tensor[(9, 14, 7), float64] */;
  (%1009, %1010, %1011, %1012, %1013)
}

def @func_2890(%var_2880: Tensor[(234, 2), float64]) -> (Tensor[(9, 14, 7), int8], Tensor[(147), float64], Tensor[(9, 13, 4), int16], Tensor[(234, 2), float64], Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) {
  %1014 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
  %1015 = @func_1928() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */;
  %1016 = cast(%var_2880, dtype="float64") /* ty=Tensor[(234, 2), float64] */;
  %1017 = reshape(%1016, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), float64] */;
  %1018 = @func_2567(%1017) /* ty=(Tensor[(9, 13, 4), int16],) */;
  %1019 = @func_1928() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */;
  %1020 = %1014.1;
  %1021 = %1015.1;
  %1022 = %1018.0;
  %1023 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  %1024 = %1019.2;
  (%1020, %1021, %1022, %var_2880, %1023, %1024)
}

def @func_8781() -> (Tensor[(13, 6, 10), float32], Tensor[(7, 21), bool]) {
  %1025 = @func_4123() /* ty=(Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) */;
  %1026 = @func_6683() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(7, 21), bool], Tensor[(9, 14, 7), uint16]) */;
  %1027 = %1025.0;
  %1028 = %1026.3;
  (%1027, %1028)
}

def @func_3750(%var_3719: Tensor[(1, 432), uint32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(48), uint32], Tensor[(9, 4, 12), int64]) {
  %1029 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %1030 = cast(meta[relay.Constant][48] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %1031 = cast(%var_3719, dtype="uint32") /* ty=Tensor[(1, 432), uint32] */;
  %1032 = reshape(%1030, newshape=[1, 4, 12]) /* ty=Tensor[(1, 4, 12), uint32] */;
  %1033 = reshape(%1031, newshape=[9, 4, 12]) /* ty=Tensor[(9, 4, 12), uint32] */;
  %1034 = @func_1573(%1032, %1033) /* ty=(Tensor[(9, 4, 12), float64],) */;
  %1035 = %1034.0;
  %1036 = cast(%var_3719, dtype="int64") /* ty=Tensor[(1, 432), int64] */;
  %1037 = shape_of(%1035, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1038 = cast(%1035, dtype="int64") /* ty=Tensor[(9, 4, 12), int64] */;
  %1039 = dyn.reshape(%1036, %1037, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1040 = %1029.1;
  %1041 = subtract(%1038, %1039) /* ty=Tensor[(9, 4, 12), int64] */;
  (%1040, meta[relay.Constant][48] /* ty=Tensor[(48), uint32] */, %1041)
}

def @func_10978(%var_10946: Tensor[(7, 6, 15), float32]) -> (Tensor[(7, 6, 15), float64], Tensor[(3, 4, 14), uint64], Tensor[(168), uint64]) {
  %1042 = cast(%var_10946, dtype="float32") /* ty=Tensor[(7, 6, 15), float32] */;
  %1043 = sqrt(%1042) /* ty=Tensor[(7, 6, 15), float32] */;
  %1044 = cast(%1043, dtype="float64") /* ty=Tensor[(7, 6, 15), float64] */;
  %1045 = cast(meta[relay.Constant][49] /* ty=Tensor[(168), uint64] */, dtype="uint64") /* ty=Tensor[(168), uint64] */;
  %1046 = reshape(%1045, newshape=[3, 4, 14]) /* ty=Tensor[(3, 4, 14), uint64] */;
  %1047 = sigmoid(%1044) /* ty=Tensor[(7, 6, 15), float64] */;
  %1048 = @func_3677(%1046) /* ty=Tensor[(3, 4, 14), uint64] */;
  (%1047, %1048, meta[relay.Constant][49] /* ty=Tensor[(168), uint64] */)
}

def @func_6749(%var_6696: Tensor[(15, 3, 14), float32]) -> (Tensor[(15, 3, 14), float32], uint8, uint8, Tensor[(9, 14, 7), bool], Tensor[(3, 2, 15), float64], Tensor[(90), float32]) {
  %1049 = cast(%var_6696, dtype="float32") /* ty=Tensor[(15, 3, 14), float32] */;
  %1050 = cast(meta[relay.Constant][50] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1051 = reshape(%1050, newshape=[]) /* ty=uint8 */;
  %1052 = @func_6545(%1051) /* ty=(Tensor[(11, 11, 8), int8], Tensor[(5, 3, 12), bool], uint8, Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool]) */;
  %1053 = cast(meta[relay.Constant][50] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %1054 = reshape(%1053, newshape=[]) /* ty=uint8 */;
  %1055 = @func_6545(%1054) /* ty=(Tensor[(11, 11, 8), int8], Tensor[(5, 3, 12), bool], uint8, Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool]) */;
  %1056 = cast(meta[relay.Constant][51] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %1057 = reshape(%1056, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float32] */;
  %1058 = @func_127(%1057) /* ty=(Tensor[(3, 2, 15), float64],) */;
  %1059 = log2(%1049) /* ty=Tensor[(15, 3, 14), float32] */;
  %1060 = %1052.2;
  %1061 = %1055.4;
  %1062 = %1058.0;
  (%1059, %1060, meta[relay.Constant][50] /* ty=uint8 */, %1061, %1062, meta[relay.Constant][51] /* ty=Tensor[(90), float32] */)
}

def @func_2926(%var_2896: Tensor[(9, 14, 7), uint16]) -> Tensor[(9, 14, 7), float32] {
  %1063 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
  %1064 = %1063.0;
  %1065 = cast(%var_2896, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %1066 = shape_of(%1064, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1067 = cast(%1064, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %1068 = dyn.reshape(%1065, %1066, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1069 = less_equal(%1067, %1068) /* ty=Tensor[(9, 14, 7), bool] */;
  %1070 = cast(%1069, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  sigmoid(%1070) /* ty=Tensor[(9, 14, 7), float32] */
}

def @func_4469() -> (Tensor[(9, 14, 7), uint16], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) {
  %1071 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
  %1072 = cast(meta[relay.Constant][52] /* ty=Tensor[(1287), float64] */, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %1073 = reshape(%1072, newshape=[1287]) /* ty=Tensor[(1287), float64] */;
  %1074 = @func_2199(%1073) /* ty=(Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %1075 = %1071.0;
  %1076 = %1074.1;
  (%1075, %1076, meta[relay.Constant][52] /* ty=Tensor[(1287), float64] */)
}

def @func_275(%var_272: Tensor[(11, 9, 13), float64]) -> (Tensor[(11, 9, 13), float64],) {
  %1077 = cast(%var_272, dtype="float64") /* ty=Tensor[(11, 9, 13), float64] */;
  %1078 = sinh(%1077) /* ty=Tensor[(11, 9, 13), float64] */;
  (%1078,)
}

def @func_10893() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %1079 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %1080 = %1079.0;
  %1081 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%1080, %1081)
}

def @func_9190() -> (Tensor[(9, 14, 7), uint16],) {
  %1082 = @func_4375() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %1083 = %1082.0;
  (%1083,)
}

def @func_10209() -> Tensor[(21, 7), float64] {
  %1084 = @func_9498() /* ty=(Tensor[(21, 7), float64],) */;
  %1084.0
}

def @func_7152() -> Tensor[(9, 14, 7), uint16] {
  @func_993() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_2818(%var_2754: Tensor[(12, 1, 3), bool], %var_2755: Tensor[(12, 9, 3), bool]) -> (Tensor[(12, 9, 3), float32], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(9, 14, 7), uint16]) {
  %1085 = cast(%var_2754, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %1086 = cast(%var_2755, dtype="bool") /* ty=Tensor[(12, 9, 3), bool] */;
  %1087 = logical_and(%1085, %1086) /* ty=Tensor[(12, 9, 3), bool] */;
  %1088 = cast(%1087, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %1089 = shape_of(%var_2755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1090 = cast(%var_2755, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %1091 = dyn.reshape(%1088, %1089, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1092 = mod(%1090, %1091) /* ty=Tensor[(12, 9, 3), float32] */;
  %1093 = cast(%1092, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %1094 = cast(meta[relay.Constant][53] /* ty=Tensor[(1287), float64] */, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %1095 = reshape(%1094, newshape=[1287]) /* ty=Tensor[(1287), float64] */;
  %1096 = @func_2199(%1095) /* ty=(Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %1097 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %1098 = log10(%1093) /* ty=Tensor[(12, 9, 3), float32] */;
  %1099 = %1096.1;
  %1100 = %1097.0;
  (%1098, %1099, meta[relay.Constant][53] /* ty=Tensor[(1287), float64] */, %1100)
}

def @func_8657() -> Tensor[(13, 6, 10), float32] {
  @func_5642() /* ty=Tensor[(13, 6, 10), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7338() -> (Tensor[(13, 6, 10), float64], Tensor[(1, 90), float32], Tensor[(1014), uint8], Tensor[(90), float32]) {
  @func_7336() /* ty=(Tensor[(13, 6, 10), float64], Tensor[(1, 90), float32], Tensor[(1014), uint8], Tensor[(90), float32]) */
}

def @func_7939(%var_7938: Tensor[(9, 8, 4), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(1287), float64], Tensor[(9, 14, 7), bool], Tensor[(9, 8, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) {
  %15 = fn (%var_7910: Tensor[(9, 8, 4), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(1287), float64], Tensor[(9, 14, 7), bool], Tensor[(9, 8, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(1287), float64] */, dtype="float64") /* ty=Tensor[(1287), float64] */;
    %1 = reshape(%0, newshape=[1287]) /* ty=Tensor[(1287), float64] */;
    %2 = @func_2199(%1) /* ty=(Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
    %3 = @func_2379() /* ty=(Tensor[(9, ?, 4), float64],) */;
    %4 = %3.0;
    %5 = cast(%4, dtype="float64") /* ty=Tensor[(9, ?, 4), float64] */;
    %6 = cast(%var_7910, dtype="float64") /* ty=Tensor[(9, 8, 4), float64] */;
    %7 = @func_2855() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %8 = @func_6106() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, ?, 4), float64]) */;
    %9 = @func_5845() /* ty=Tensor[(9, 14, 7), uint16] */;
    %10 = %2.0;
    %11 = @func_1476() /* ty=Tensor[(9, 14, 7), bool] */;
    %12 = power(%5, %6) /* ty=Tensor[(9, 8, 4), float64] */;
    %13 = %7.0;
    %14 = %8.0;
    (%9, %10, meta[relay.Constant][0] /* ty=Tensor[(1287), float64] */, %11, %12, %13, %14)
  };
  %15(%var_7938) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(1287), float64], Tensor[(9, 14, 7), bool], Tensor[(9, 8, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) */
}

def @func_3680(%var_3678: Tensor[(3, 4, 14), uint64]) -> Tensor[(3, 4, 14), uint64] {
  @func_3677(%var_3678) /* ty=Tensor[(3, 4, 14), uint64] */
}

def @func_7152() -> Tensor[(9, 14, 7), uint16] {
  @func_993() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_11098() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool]) {
  @func_11096() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool]) */
}

def @func_5226() -> (Tensor[(9, 14, 7), uint16],) {
  %16 = @func_5198() /* ty=(Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16]) */;
  %17 = %16.1;
  (%17,)
}

def @func_2569(%var_2568: Tensor[(9, 13, 4), float64]) -> (Tensor[(9, 13, 4), int16],) {
  %23 = fn (%var_2559: Tensor[(9, 13, 4), float64]) -> (Tensor[(9, 13, 4), int16],) {
    %18 = @func_2379() /* ty=(Tensor[(9, ?, 4), float64],) */;
    %19 = %18.0;
    %20 = cast(%19, dtype="int16") /* ty=Tensor[(9, ?, 4), int16] */;
    %21 = cast(%var_2559, dtype="int16") /* ty=Tensor[(9, 13, 4), int16] */;
    %22 = bitwise_xor(%20, %21) /* ty=Tensor[(9, 13, 4), int16] */;
    (%22,)
  };
  %23(%var_2568) /* ty=(Tensor[(9, 13, 4), int16],) */
}

def @func_5130() -> Tensor[(9, 14, 7), uint16] {
  @func_5128() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_3677(%var_3673: Tensor[(3, 4, 14), uint64]) -> Tensor[(3, 4, 14), uint64] {
  %24 = cast(%var_3673, dtype="uint64") /* ty=Tensor[(3, 4, 14), uint64] */;
  %25 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(3, 4, 14), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(3, 4, 14), uint64] */, dtype="uint64") /* ty=Tensor[(3, 4, 14), uint64] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  subtract(%26, %27) /* ty=Tensor[(3, 4, 14), uint64] */
}

def @func_9796(%var_9790: Tensor[(13, 6, 10), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(13, 6, 10), float64]) {
  %28 = @func_5226() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %29 = @func_5890() /* ty=(Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) */;
  %30 = %29.0;
  %31 = cast(%var_9790, dtype="float64") /* ty=Tensor[(13, 6, 10), float64] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="float64") /* ty=Tensor[(13, 6, 10), float64] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %35 = @func_8862() /* ty=Tensor[(9, 14, 7), uint16] */;
  %36 = %28.0;
  %37 = minimum(%33, %34) /* ty=Tensor[(13, 6, 10), float64] */;
  (%35, %36, %37)
}

def @func_10637() -> Tensor[(9, 14, 7), uint16] {
  @func_1589() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_2318(%var_2284: Tensor[(9, 14, 7), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) {
  %38 = @func_1589() /* ty=Tensor[(9, 14, 7), uint16] */;
  %39 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 14, 7), uint16] */, dtype="int32") /* ty=Tensor[(9, 14, 7), int32] */;
  %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%38, dtype="int32") /* ty=Tensor[(9, 14, 7), int32] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %43 = bitwise_or(%41, %42) /* ty=Tensor[(9, 14, 7), int32] */;
  %44 = cast(%43, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %45 = sqrt(%44) /* ty=Tensor[(9, 14, 7), float32] */;
  %46 = cast(%var_2284, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %50 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
  %51 = %50.0;
  %52 = cast(%51, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %53 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %54 = %53.0;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %56 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  %57 = logical_or(%48, %49) /* ty=Tensor[(9, 14, 7), bool] */;
  %58 = log(%52) /* ty=Tensor[(9, 14, 7), float32] */;
  %59 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  %60 = log2(%55) /* ty=Tensor[(9, 14, 7), float64] */;
  (%56, %57, %58, %59, %60)
}

def @func_9354(%var_9293: Tensor[(5, 1, 10), float32]) -> (Tensor[(5, 1, 10), float32], Tensor[(9, 14, 7), uint16]) {
  %61 = cast(%var_9293, dtype="float32") /* ty=Tensor[(5, 1, 10), float32] */;
  %62 = sinh(%61) /* ty=Tensor[(5, 1, 10), float32] */;
  %63 = @func_4346() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%62, %63)
}

def @func_6300() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) {
  @func_6298() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) */
}

def @func_6868() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
  %64 = @func_4198() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %65 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %66 = %65.1;
  %67 = cast(%66, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %68 = %64.0;
  %69 = cosh(%67) /* ty=Tensor[(9, 14, 7), float64] */;
  %70 = @func_2590() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%68, %69, %70)
}

def @func_6391() -> (Tensor[(9, ?, 4), float64],) {
  %73 = fn () -> (Tensor[(9, ?, 4), float64],) {
    %71 = @func_2379() /* ty=(Tensor[(9, ?, 4), float64],) */;
    %72 = %71.0;
    (%72,)
  };
  %73() /* ty=(Tensor[(9, ?, 4), float64],) */
}

def @func_7168() -> (Tensor[(9, 14, 7), float64],) {
  @func_7166() /* ty=(Tensor[(9, 14, 7), float64],) */
}

def @func_4427() -> (Tensor[(9, 14, 7), uint16],) {
  @func_4425() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_2632() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(1820), uint64], Tensor[(9, 14, 7), uint16]) {
  @func_2630() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(1820), uint64], Tensor[(9, 14, 7), uint16]) */
}

def @func_10737() -> Tensor[(9, 14, 7), uint16] {
  %75 = fn () -> Tensor[(9, 14, 7), uint16] {
    %74 = @func_4469() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
    %74.0
  };
  %75() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_8320(%var_8318: Tensor[(15, 8, 6), uint64], %var_8319: Tensor[(15, 8, 6), uint64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(9, 14, 7), float64], Tensor[(15, 8, 6), bool], Tensor[(9, 14, 7), float64], Tensor[(1287), float64], Tensor[(1287), float64], Tensor[(468), bool], Tensor[(468), float32]) {
  @func_8316(%var_8318, %var_8319) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(9, 14, 7), float64], Tensor[(15, 8, 6), bool], Tensor[(9, 14, 7), float64], Tensor[(1287), float64], Tensor[(1287), float64], Tensor[(468), bool], Tensor[(468), float32]) */
}

def @func_4758() -> Tensor[(9, 14, 7), uint16] {
  @func_993() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_3422(%var_3416: Tensor[(9, 14, 7), uint16]) -> (Tensor[(9, 14, 7), float32],) {
  %76 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %77 = %76.0;
  %78 = cast(%var_3416, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%77, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %82 = mod(%80, %81) /* ty=Tensor[(9, 14, 7), float32] */;
  (%82,)
}

def @func_5845() -> Tensor[(9, 14, 7), uint16] {
  @func_4346() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_10873() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %86 = fn () -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
    %83 = @func_4123() /* ty=(Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) */;
    %84 = @func_5845() /* ty=Tensor[(9, 14, 7), uint16] */;
    %85 = %83.1;
    (%84, %85)
  };
  %86() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */
}

def @func_5200() -> (Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16]) {
  @func_5198() /* ty=(Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16]) */
}

def @func_4280(%var_4278: Tensor[(14, 4, 5), uint16], %var_4279: Tensor[(14, 4, 5), uint16]) -> (Tensor[(14, 4, 5), uint16], Tensor[(9, 14, 7), float64]) {
  @func_4276(%var_4278, %var_4279) /* ty=(Tensor[(14, 4, 5), uint16], Tensor[(9, 14, 7), float64]) */
}

def @func_3404(%var_3386: Tensor[(468), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 13, 4), int16], Tensor[(468), float64]) {
  %87 = @func_2855() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %88 = @func_2491() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %89 = cast(%var_3386, dtype="float64") /* ty=Tensor[(468), float64] */;
  %90 = reshape(%89, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), float64] */;
  %91 = @func_2567(%90) /* ty=(Tensor[(9, 13, 4), int16],) */;
  %92 = %87.0;
  %93 = %88.0;
  %94 = %91.0;
  (%92, %93, %94, %var_3386)
}

def @func_3753(%var_3751: Tensor[(1, 432), uint32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(48), uint32], Tensor[(9, 4, 12), int64]) {
  @func_3750(%var_3751) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(48), uint32], Tensor[(9, 4, 12), int64]) */
}

def @func_5790(%var_5788: uint8) -> Tensor[(5, 3, 12), bool] {
  @func_5787(%var_5788) /* ty=Tensor[(5, 3, 12), bool] */
}

def @func_5014() -> (Tensor[(9, 14, 7), uint16],) {
  %95 = @func_4346() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%95,)
}

def @func_9690() -> Tensor[(2, 5, 7), float32] {
  %96 = @func_8683() /* ty=(Tensor[(2, 5, 7), float32],) */;
  %96.0
}

def @func_10462() -> (Tensor[(9, 14, 7), uint16],) {
  @func_10460() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_2379() -> (Tensor[(9, ?, 4), float64],) {
  %97 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 1, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 1, 4), float32] */;
  %98 = rsqrt(%97) /* ty=Tensor[(9, 1, 4), float32] */;
  %99 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 1, 4), float32] */, dtype="float64") /* ty=Tensor[(9, 1, 4), float64] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%98, dtype="float64") /* ty=Tensor[(9, 1, 4), float64] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %103 = divide(%101, %102) /* ty=Tensor[(9, ?, 4), float64] */;
  (%103,)
}

def @func_10978(%var_10946: Tensor[(7, 6, 15), float32]) -> (Tensor[(7, 6, 15), float64], Tensor[(3, 4, 14), uint64], Tensor[(168), uint64]) {
  %104 = cast(%var_10946, dtype="float32") /* ty=Tensor[(7, 6, 15), float32] */;
  %105 = sqrt(%104) /* ty=Tensor[(7, 6, 15), float32] */;
  %106 = cast(%105, dtype="float64") /* ty=Tensor[(7, 6, 15), float64] */;
  %107 = cast(meta[relay.Constant][4] /* ty=Tensor[(168), uint64] */, dtype="uint64") /* ty=Tensor[(168), uint64] */;
  %108 = reshape(%107, newshape=[3, 4, 14]) /* ty=Tensor[(3, 4, 14), uint64] */;
  %109 = sigmoid(%106) /* ty=Tensor[(7, 6, 15), float64] */;
  %110 = @func_3677(%108) /* ty=Tensor[(3, 4, 14), uint64] */;
  (%109, %110, meta[relay.Constant][4] /* ty=Tensor[(168), uint64] */)
}

def @func_4952() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %111 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %112 = @func_3996() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %113 = %111.0;
  %114 = %112.3;
  (%113, %114)
}

def @func_8484() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  @func_8482() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */
}

def @func_5643() -> Tensor[(13, 6, 10), float32] {
  %118 = fn () -> Tensor[(13, 6, 10), float32] {
    %115 = @func_4123() /* ty=(Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) */;
    %116 = %115.0;
    %117 = cast(%116, dtype="float32") /* ty=Tensor[(13, 6, 10), float32] */;
    log(%117) /* ty=Tensor[(13, 6, 10), float32] */
  };
  %118() /* ty=Tensor[(13, 6, 10), float32] */
}

def @func_4899() -> Tensor[(9, 14, 7), bool] {
  @func_4897() /* ty=Tensor[(9, 14, 7), bool] */
}

def @func_2199(%var_2195: Tensor[(1287), float64]) -> (Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) {
  %119 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %120 = %119.0;
  %121 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %122 = %121.0;
  %123 = cast(%122, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %124 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%120, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %127 = cast(%var_2195, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %128 = reshape(%127, newshape=[11, 9, 13]) /* ty=Tensor[(11, 9, 13), float64] */;
  %129 = @func_275(%128) /* ty=(Tensor[(11, 9, 13), float64],) */;
  %130 = logical_and(%125, %126) /* ty=Tensor[(9, 14, 7), bool] */;
  %131 = %129.0;
  (%130, %131, %var_2195)
}

def @func_5279() -> (Tensor[(9, 14, 7), uint16],) {
  @func_5277() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_4221() -> Tensor[(9, 14, 7), float32] {
  %133 = fn () -> Tensor[(9, 14, 7), float32] {
    %132 = @func_2974() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) */;
    %132.3
  };
  %133() /* ty=Tensor[(9, 14, 7), float32] */
}

def @func_1590() -> Tensor[(9, 14, 7), uint16] {
  %134 = fn () -> Tensor[(9, 14, 7), uint16] {
    @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */
  };
  %134() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_9191() -> (Tensor[(9, 14, 7), uint16],) {
  %137 = fn () -> (Tensor[(9, 14, 7), uint16],) {
    %135 = @func_4375() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %136 = %135.0;
    (%136,)
  };
  %137() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_10488() -> Tensor[(13, 6, 10), float32] {
  @func_5642() /* ty=Tensor[(13, 6, 10), float32] */
}

def @func_9029() -> (Tensor[(9, 14, 7), uint16],) {
  %138 = @func_4952() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %139 = %138.0;
  (%139,)
}

def @func_9579() -> (Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), int8], Tensor[(14, 130), uint64]) {
  @func_9577() /* ty=(Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), int8], Tensor[(14, 130), uint64]) */
}

def @func_8482() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %140 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %141 = @func_6485() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(9, 14, 7), uint16]) */;
  %142 = @func_5226() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %143 = %140.0;
  %144 = %141.3;
  %145 = %142.0;
  (%143, %144, %145)
}

def @func_9121() -> (Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) {
  %150 = fn () -> (Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) {
    %146 = @func_3204() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
    %147 = @func_1928() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */;
    %148 = %146.1;
    %149 = %147.2;
    (%148, %149)
  };
  %150() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) */
}

def @func_10164() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(432), uint32], Tensor[(9, 14, 7), uint16]) {
  %151 = cast(meta[relay.Constant][5] /* ty=Tensor[(432), uint32] */, dtype="uint32") /* ty=Tensor[(432), uint32] */;
  %152 = reshape(%151, newshape=[1, 432]) /* ty=Tensor[(1, 432), uint32] */;
  %153 = @func_3750(%152) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(48), uint32], Tensor[(9, 4, 12), int64]) */;
  %154 = @func_5839() /* ty=Tensor[(9, 14, 7), uint16] */;
  %155 = %153.0;
  %156 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%154, %155, meta[relay.Constant][5] /* ty=Tensor[(432), uint32] */, %156)
}

def @func_4640(%var_4628: Tensor[(432), uint32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(468), float64], Tensor[(9, 4, 12), int64], Tensor[(432), uint32], Tensor[(9, 14, 7), float64]) {
  %157 = @func_4198() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %158 = cast(meta[relay.Constant][6] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %159 = reshape(%158, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %160 = @func_3404(%159) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 13, 4), int16], Tensor[(468), float64]) */;
  %161 = cast(%var_4628, dtype="uint32") /* ty=Tensor[(432), uint32] */;
  %162 = reshape(%161, newshape=[1, 432]) /* ty=Tensor[(1, 432), uint32] */;
  %163 = @func_3750(%162) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(48), uint32], Tensor[(9, 4, 12), int64]) */;
  %164 = %157.0;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %166 = reshape(%165, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), float32] */;
  %167 = @func_2318(%166) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) */;
  %168 = %167.2;
  %169 = cast(%168, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %170 = %160.3;
  %171 = %163.2;
  %172 = atanh(%169) /* ty=Tensor[(9, 14, 7), float64] */;
  (%164, %170, meta[relay.Constant][6] /* ty=Tensor[(468), float64] */, %171, %var_4628, %172)
}

def @func_4693(%var_4691: Tensor[(468), float64]) -> (Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), int8], Tensor[(468), float64]) {
  @func_4690(%var_4691) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), int8], Tensor[(468), float64]) */
}

def @func_10335(%var_10332: Tensor[(6, 4, 12), int8], %var_10333: Tensor[(6, 4, 12), int8], %var_10334: Tensor[(147), float64]) -> (Tensor[(6, 4, 12), int8], Tensor[(147), float32], Tensor[(147), float64], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) {
  %188 = fn (%var_10295: Tensor[(6, 4, 12), int8], %var_10296: Tensor[(6, 4, 12), int8], %var_10305: Tensor[(147), float64]) -> (Tensor[(6, 4, 12), int8], Tensor[(147), float32], Tensor[(147), float64], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) {
    %173 = cast(%var_10296, dtype="int8") /* ty=Tensor[(6, 4, 12), int8] */;
    %174 = shape_of(%var_10295, dtype="int32") /* ty=Tensor[(3), int32] */;
    %175 = cast(%var_10295, dtype="int8") /* ty=Tensor[(6, 4, 12), int8] */;
    %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %177 = cast(%var_10305, dtype="float64") /* ty=Tensor[(147), float64] */;
    %178 = cast(%var_10305, dtype="float64") /* ty=Tensor[(147), float64] */;
    %179 = reshape(%177, newshape=[147]) /* ty=Tensor[(147), float64] */;
    %180 = reshape(%178, newshape=[147]) /* ty=Tensor[(147), float64] */;
    %181 = @func_7660(%179, %180) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float32], Tensor[(9, 14, 7), uint16]) */;
    %182 = @func_3996() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
    %183 = @func_2153() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
    %184 = minimum(%175, %176) /* ty=Tensor[(6, 4, 12), int8] */;
    %185 = %181.3;
    %186 = %182.1;
    %187 = %183.1;
    (%184, %185, %var_10305, %186, %187)
  };
  %188(%var_10332, %var_10333, %var_10334) /* ty=(Tensor[(6, 4, 12), int8], Tensor[(147), float32], Tensor[(147), float64], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) */
}

def @func_10836() -> Tensor[(9, 14, 7), float64] {
  %189 = @func_7166() /* ty=(Tensor[(9, 14, 7), float64],) */;
  %189.0
}

def @func_3205() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %194 = fn () -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
    %190 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
    %191 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %192 = %190.1;
    %193 = %191.0;
    (%192, %193)
  };
  %194() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */
}

def @func_1455() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) {
  @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */
}

def @func_9830() -> Tensor[(9, 14, 7), float32] {
  %195 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %196 = %195.0;
  %197 = cast(%196, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  acos(%197) /* ty=Tensor[(9, 14, 7), float32] */
}

def @func_7116() -> (Tensor[(13, 6, 10), float64],) {
  @func_7114() /* ty=(Tensor[(13, 6, 10), float64],) */
}

def @func_5058() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %201 = fn () -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
    %198 = @func_2153() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
    %199 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
    %200 = %198.1;
    (%199, %200)
  };
  %201() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */
}

def @func_3526(%var_3460: Tensor[(4, 3, 1), uint32], %var_3461: Tensor[(4, 3, 3), uint32], %var_3475: Tensor[(1287), float64], %var_3518: Tensor[(1, 90), float32]) -> (Tensor[(4, 3, 3), uint32], Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(4, 3, 3), float32], Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(1, 90), float32]) {
  %202 = cast(%var_3460, dtype="uint32") /* ty=Tensor[(4, 3, 1), uint32] */;
  %203 = cast(%var_3461, dtype="uint32") /* ty=Tensor[(4, 3, 3), uint32] */;
  %204 = @func_1928() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */;
  %205 = cast(%var_3475, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %206 = reshape(%205, newshape=[1287]) /* ty=Tensor[(1287), float64] */;
  %207 = @func_2199(%206) /* ty=(Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %208 = cast(%var_3461, dtype="float32") /* ty=Tensor[(4, 3, 3), float32] */;
  %209 = @func_3204() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %210 = cast(%var_3518, dtype="float32") /* ty=Tensor[(1, 90), float32] */;
  %211 = reshape(%210, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float32] */;
  %212 = @func_127(%211) /* ty=(Tensor[(3, 2, 15), float64],) */;
  %213 = add(%202, %203) /* ty=Tensor[(4, 3, 3), uint32] */;
  %214 = %204.0;
  %215 = %207.1;
  %216 = sin(%208) /* ty=Tensor[(4, 3, 3), float32] */;
  %217 = %209.1;
  %218 = %212.0;
  (%213, %214, %215, %var_3475, %216, %217, %218, %var_3518)
}

def @func_5097() -> Tensor[(9, 14, 7), int64] {
  @func_5095() /* ty=Tensor[(9, 14, 7), int64] */
}

def @func_4124() -> (Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) {
  %223 = fn () -> (Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) {
    %219 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 10), float32] */;
    %220 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
    %221 = erf(%219) /* ty=Tensor[(13, 6, 10), float32] */;
    %222 = %220.0;
    (%221, %222)
  };
  %223() /* ty=(Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) */
}

def @func_9488() -> Tensor[(9, 14, 7), uint16] {
  @func_9486() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_4177(%var_4174: Tensor[(1014), uint8], %var_4175: Tensor[(1, 90), float32]) -> (Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(1, 90), float32]) {
  %224 = @func_2379() /* ty=(Tensor[(9, ?, 4), float64],) */;
  %225 = %224.0;
  %226 = cast(%225, dtype="float64") /* ty=Tensor[(9, ?, 4), float64] */;
  %227 = cast(%var_4174, dtype="uint8") /* ty=Tensor[(1014), uint8] */;
  %228 = cast(%var_4174, dtype="uint8") /* ty=Tensor[(1014), uint8] */;
  %229 = cast(%var_4175, dtype="float32") /* ty=Tensor[(1, 90), float32] */;
  %230 = cast(%225, dtype="bool") /* ty=Tensor[(9, ?, 4), bool] */;
  %231 = reshape(%227, newshape=[13, 13, 6]) /* ty=Tensor[(13, 13, 6), uint8] */;
  %232 = reshape(%228, newshape=[13, 13, 6]) /* ty=Tensor[(13, 13, 6), uint8] */;
  %233 = reshape(%229, newshape=[90]) /* ty=Tensor[(90), float32] */;
  %234 = reshape(%230, newshape=[36]) /* ty=Tensor[(36), bool] */;
  %235 = @func_3880(%231, %232, %233, %234) /* ty=(Tensor[(13, 13, 6), uint8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(90), float32], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %236 = sinh(%226) /* ty=Tensor[(9, ?, 4), float64] */;
  %237 = %235.7;
  (%236, %237, %var_4174, %var_4175)
}

def @func_4585() -> Tensor[(9, 14, 7), uint16] {
  @func_4583() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_994() -> Tensor[(9, 14, 7), uint16] {
  %239 = fn () -> Tensor[(9, 14, 7), uint16] {
    %238 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %238.0
  };
  %239() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_1059(%var_1054: Tensor[(147), float64]) -> (Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float64]) {
  %240 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %241 = %240.0;
  %242 = cast(%241, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %243 = cast(%var_1054, dtype="float64") /* ty=Tensor[(147), float64] */;
  %244 = reshape(%243, newshape=[3, 7, 7]) /* ty=Tensor[(3, 7, 7), float64] */;
  %245 = @func_891(%244) /* ty=(Tensor[(3, 7, 7), float64], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %246 = cos(%242) /* ty=Tensor[(9, 14, 7), float32] */;
  %247 = %245.1;
  (%246, %247, %var_1054)
}

def @func_10838() -> Tensor[(9, 14, 7), float64] {
  @func_10836() /* ty=Tensor[(9, 14, 7), float64] */
}

def @func_11292() -> (Tensor[(9, 14, 7), uint16],) {
  @func_11290() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_1685() -> (Tensor[(9, 14, 7), uint16],) {
  %248 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%248,)
}

def @func_5847() -> Tensor[(9, 14, 7), uint16] {
  @func_5845() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_2202(%var_2200: Tensor[(1287), float64]) -> (Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) {
  @func_2199(%var_2200) /* ty=(Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */
}

def @func_7154() -> Tensor[(9, 14, 7), uint16] {
  @func_7152() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_10173() -> (Tensor[(9, 14, 7), bool],) {
  @func_10171() /* ty=(Tensor[(9, 14, 7), bool],) */
}

def @func_9548() -> (Tensor[(9, 14, 7), float64],) {
  %251 = fn () -> (Tensor[(9, 14, 7), float64],) {
    %249 = @func_6829() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) */;
    %250 = %249.1;
    (%250,)
  };
  %251() /* ty=(Tensor[(9, 14, 7), float64],) */
}

def @func_4098(%var_4097: Tensor[(36), bool]) -> (Tensor[(9, 14, 7), uint16], Tensor[(90), float32], Tensor[(3, 2, 15), float32], Tensor[(9, 4), bool], Tensor[(36), float32], Tensor[(9, 14, 7), float32]) {
  %269 = fn (%var_4067: Tensor[(36), bool]) -> (Tensor[(9, 14, 7), uint16], Tensor[(90), float32], Tensor[(3, 2, 15), float32], Tensor[(9, 4), bool], Tensor[(36), float32], Tensor[(9, 14, 7), float32]) {
    %252 = @func_2974() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) */;
    %253 = cast(meta[relay.Constant][8] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
    %254 = reshape(%253, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float32] */;
    %255 = @func_127(%254) /* ty=(Tensor[(3, 2, 15), float64],) */;
    %256 = %255.0;
    %257 = cast(%256, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
    %258 = cast(%var_4067, dtype="bool") /* ty=Tensor[(36), bool] */;
    %259 = reshape(%258, newshape=[9, 4]) /* ty=Tensor[(9, 4), bool] */;
    %260 = @func_3094(%259) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(9, 4), bool], Tensor[(324), bool]) */;
    %261 = cast(%var_4067, dtype="float32") /* ty=Tensor[(36), float32] */;
    %262 = %252.2;
    %263 = cast(%262, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
    %264 = reshape(%263, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), uint16] */;
    %265 = sqrt(%257) /* ty=Tensor[(3, 2, 15), float32] */;
    %266 = %260.3;
    %267 = erf(%261) /* ty=Tensor[(36), float32] */;
    %268 = @func_2926(%264) /* ty=Tensor[(9, 14, 7), float32] */;
    (%262, meta[relay.Constant][8] /* ty=Tensor[(90), float32] */, %265, %266, %267, %268)
  };
  %269(%var_4097) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(90), float32], Tensor[(3, 2, 15), float32], Tensor[(9, 4), bool], Tensor[(36), float32], Tensor[(9, 14, 7), float32]) */
}

def @func_2321(%var_2319: Tensor[(9, 14, 7), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) {
  @func_2318(%var_2319) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) */
}

def @func_8959() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %273 = fn () -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
    %270 = @func_6179() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
    %271 = %270.2;
    %272 = @func_6919() /* ty=Tensor[(9, 14, 7), uint16] */;
    (%271, %272)
  };
  %273() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */
}

def @func_5373(%var_5372: Tensor[(36), bool]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
  %283 = fn (%var_5357: Tensor[(36), bool]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
    %274 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %275 = cast(%var_5357, dtype="bool") /* ty=Tensor[(36), bool] */;
    %276 = reshape(%275, newshape=[9, 4]) /* ty=Tensor[(9, 4), bool] */;
    %277 = @func_3094(%276) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(9, 4), bool], Tensor[(324), bool]) */;
    %278 = @func_2718() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
    %279 = %274.0;
    %280 = %277.0;
    %281 = %278.0;
    %282 = @func_1589() /* ty=Tensor[(9, 14, 7), uint16] */;
    (%279, %280, %var_5357, %281, %282)
  };
  %283(%var_5372) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */
}

def @func_3097(%var_3095: Tensor[(9, 4), bool]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(9, 4), bool], Tensor[(324), bool]) {
  @func_3094(%var_3095) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(9, 4), bool], Tensor[(324), bool]) */
}

def @func_7446() -> (Tensor[(9, 14, 7), float32],) {
  %284 = @func_4220() /* ty=Tensor[(9, 14, 7), float32] */;
  (%284,)
}

def @func_3094(%var_3090: Tensor[(9, 4), bool]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(9, 4), bool], Tensor[(324), bool]) {
  %285 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %286 = cast(%var_3090, dtype="bool") /* ty=Tensor[(9, 4), bool] */;
  %287 = cast(meta[relay.Constant][9] /* ty=Tensor[(324), bool] */, dtype="bool") /* ty=Tensor[(324), bool] */;
  %288 = reshape(%286, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), bool] */;
  %289 = reshape(%287, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
  %290 = @func_2818(%288, %289) /* ty=(Tensor[(12, 9, 3), float32], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(9, 14, 7), uint16]) */;
  %291 = %285.0;
  %292 = @func_2643() /* ty=Tensor[(9, 14, 7), uint16] */;
  %293 = %290.2;
  (%291, %292, %293, %var_3090, meta[relay.Constant][9] /* ty=Tensor[(324), bool] */)
}

def @func_893(%var_892: Tensor[(3, 7, 7), float64]) -> (Tensor[(3, 7, 7), float64], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) {
  %300 = fn (%var_866: Tensor[(3, 7, 7), float64]) -> (Tensor[(3, 7, 7), float64], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) {
    %294 = cast(%var_866, dtype="float64") /* ty=Tensor[(3, 7, 7), float64] */;
    %295 = cast(meta[relay.Constant][10] /* ty=Tensor[(1287), float64] */, dtype="float64") /* ty=Tensor[(1287), float64] */;
    %296 = reshape(%295, newshape=[11, 9, 13]) /* ty=Tensor[(11, 9, 13), float64] */;
    %297 = @func_275(%296) /* ty=(Tensor[(11, 9, 13), float64],) */;
    %298 = atanh(%294) /* ty=Tensor[(3, 7, 7), float64] */;
    %299 = %297.0;
    (%298, %299, meta[relay.Constant][10] /* ty=Tensor[(1287), float64] */)
  };
  %300(%var_892) /* ty=(Tensor[(3, 7, 7), float64], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */
}

def @func_8811() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) {
  %306 = fn () -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) {
    %301 = @func_7152() /* ty=Tensor[(9, 14, 7), uint16] */;
    %302 = cast(%301, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
    %303 = reshape(%302, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), float32] */;
    %304 = @func_2318(%303) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) */;
    %305 = %304.4;
    (%301, %305)
  };
  %306() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) */
}

def @func_4477() -> Tensor[(2, 5, 7), float64] {
  %308 = fn () -> Tensor[(2, 5, 7), float64] {
    %307 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 5, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 5, 7), float64] */;
    sigmoid(%307) /* ty=Tensor[(2, 5, 7), float64] */
  };
  %308() /* ty=Tensor[(2, 5, 7), float64] */
}

def @func_8422(%var_8420: int8, %var_8421: Tensor[(9, 13, 8), int8]) -> (Tensor[(9, 13, 8), bool],) {
  %312 = fn (%var_8414: int8, %var_8415: Tensor[(9, 13, 8), int8]) -> (Tensor[(9, 13, 8), bool],) {
    %309 = cast(%var_8414, dtype="bool") /* ty=bool */;
    %310 = cast(%var_8415, dtype="bool") /* ty=Tensor[(9, 13, 8), bool] */;
    %311 = not_equal(%309, %310) /* ty=Tensor[(9, 13, 8), bool] */;
    (%311,)
  };
  %312(%var_8420, %var_8421) /* ty=(Tensor[(9, 13, 8), bool],) */
}

def @func_3997() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %322 = fn () -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
    %313 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
    %314 = cast(%313, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
    %315 = reshape(%314, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), uint16] */;
    %316 = @func_2926(%315) /* ty=Tensor[(9, 14, 7), float32] */;
    %317 = cast(%316, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
    %318 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %319 = sin(%317) /* ty=Tensor[(9, 14, 7), float32] */;
    %320 = %318.0;
    %321 = @func_1589() /* ty=Tensor[(9, 14, 7), uint16] */;
    (%313, %319, %320, %321)
  };
  %322() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */
}

def @func_11023() -> (Tensor[(9, 14, 7), uint16],) {
  @func_11021() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_2928(%var_2927: Tensor[(9, 14, 7), uint16]) -> Tensor[(9, 14, 7), float32] {
  %331 = fn (%var_2896: Tensor[(9, 14, 7), uint16]) -> Tensor[(9, 14, 7), float32] {
    %323 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
    %324 = %323.0;
    %325 = cast(%var_2896, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
    %326 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
    %327 = cast(%324, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
    %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %329 = less_equal(%327, %328) /* ty=Tensor[(9, 14, 7), bool] */;
    %330 = cast(%329, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
    sigmoid(%330) /* ty=Tensor[(9, 14, 7), float32] */
  };
  %331(%var_2927) /* ty=Tensor[(9, 14, 7), float32] */
}

def @func_2645() -> Tensor[(9, 14, 7), uint16] {
  @func_2643() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_10639() -> Tensor[(9, 14, 7), uint16] {
  @func_10637() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_9446(%var_9444: Tensor[(9, 11, 4), float64]) -> (Tensor[(9, 14, 7), bool], Tensor[(9, 11, 4), int32]) {
  @func_9443(%var_9444) /* ty=(Tensor[(9, 14, 7), bool], Tensor[(9, 11, 4), int32]) */
}

def @func_3750(%var_3719: Tensor[(1, 432), uint32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(48), uint32], Tensor[(9, 4, 12), int64]) {
  %332 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %333 = cast(meta[relay.Constant][12] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %334 = cast(%var_3719, dtype="uint32") /* ty=Tensor[(1, 432), uint32] */;
  %335 = reshape(%333, newshape=[1, 4, 12]) /* ty=Tensor[(1, 4, 12), uint32] */;
  %336 = reshape(%334, newshape=[9, 4, 12]) /* ty=Tensor[(9, 4, 12), uint32] */;
  %337 = @func_1573(%335, %336) /* ty=(Tensor[(9, 4, 12), float64],) */;
  %338 = %337.0;
  %339 = cast(%var_3719, dtype="int64") /* ty=Tensor[(1, 432), int64] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="int64") /* ty=Tensor[(9, 4, 12), int64] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %343 = %332.1;
  %344 = subtract(%341, %342) /* ty=Tensor[(9, 4, 12), int64] */;
  (%343, meta[relay.Constant][12] /* ty=Tensor[(48), uint32] */, %344)
}

def @func_5700() -> (Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), int8], Tensor[(468), float64]) {
  %345 = cast(meta[relay.Constant][13] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %346 = reshape(%345, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
  %347 = @func_2890(%346) /* ty=(Tensor[(9, 14, 7), int8], Tensor[(147), float64], Tensor[(9, 13, 4), int16], Tensor[(234, 2), float64], Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) */;
  %348 = @func_4897() /* ty=Tensor[(9, 14, 7), bool] */;
  %349 = %347.0;
  (%348, %349, meta[relay.Constant][13] /* ty=Tensor[(468), float64] */)
}

def @func_2592() -> Tensor[(9, 14, 7), uint16] {
  @func_2590() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_6960() -> (Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %350 = @func_5700() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), int8], Tensor[(468), float64]) */;
  %351 = @func_4952() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %352 = @func_5014() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %353 = %350.1;
  %354 = %351.0;
  %355 = @func_6919() /* ty=Tensor[(9, 14, 7), uint16] */;
  %356 = %352.0;
  (%353, %354, %355, %356)
}

def @func_2719() -> (Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
  %362 = fn () -> (Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
    %357 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %358 = %357.0;
    %359 = cast(%358, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
    %360 = log10(%359) /* ty=Tensor[(9, 14, 7), float64] */;
    %361 = @func_2590() /* ty=Tensor[(9, 14, 7), uint16] */;
    (%360, %361)
  };
  %362() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */
}

def @func_4346() -> Tensor[(9, 14, 7), uint16] {
  %363 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %363.0
}

def @func_4045(%var_4044: Tensor[(9, 14, 8), float32]) -> (Tensor[(1820), uint64], Tensor[(9, 14, 8), int64], Tensor[(9, 14, 7), uint16]) {
  %374 = fn (%var_4003: Tensor[(9, 14, 8), float32]) -> (Tensor[(1820), uint64], Tensor[(9, 14, 8), int64], Tensor[(9, 14, 7), uint16]) {
    %364 = @func_2630() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(1820), uint64], Tensor[(9, 14, 7), uint16]) */;
    %365 = cast(%var_4003, dtype="float32") /* ty=Tensor[(9, 14, 8), float32] */;
    %366 = erf(%365) /* ty=Tensor[(9, 14, 8), float32] */;
    %367 = cast(%var_4003, dtype="int64") /* ty=Tensor[(9, 14, 8), int64] */;
    %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
    %369 = cast(%366, dtype="int64") /* ty=Tensor[(9, 14, 8), int64] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %371 = %364.2;
    %372 = left_shift(%369, %370) /* ty=Tensor[(9, 14, 8), int64] */;
    %373 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
    (%371, %372, %373)
  };
  %374(%var_4044) /* ty=(Tensor[(1820), uint64], Tensor[(9, 14, 8), int64], Tensor[(9, 14, 7), uint16]) */
}

def @func_5095() -> Tensor[(9, 14, 7), int64] {
  %375 = @func_4346() /* ty=Tensor[(9, 14, 7), uint16] */;
  %376 = cast(meta[relay.Constant][14] /* ty=Tensor[(9, 14, 7), uint16] */, dtype="int64") /* ty=Tensor[(9, 14, 7), int64] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="int64") /* ty=Tensor[(9, 14, 7), int64] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%378, %379) /* ty=Tensor[(9, 14, 7), int64] */
}

def @func_8781() -> (Tensor[(13, 6, 10), float32], Tensor[(7, 21), bool]) {
  %380 = @func_4123() /* ty=(Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) */;
  %381 = @func_6683() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(7, 21), bool], Tensor[(9, 14, 7), uint16]) */;
  %382 = %380.0;
  %383 = %381.3;
  (%382, %383)
}

def @func_11244() -> (Tensor[(11, 9, 13), float64], Tensor[(9, 14, 7), uint16]) {
  %390 = fn () -> (Tensor[(11, 9, 13), float64], Tensor[(9, 14, 7), uint16]) {
    %384 = @func_4469() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
    %385 = %384.1;
    %386 = cast(%385, dtype="float64") /* ty=Tensor[(11, 9, 13), float64] */;
    %387 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %388 = cosh(%386) /* ty=Tensor[(11, 9, 13), float64] */;
    %389 = %387.0;
    (%388, %389)
  };
  %390() /* ty=(Tensor[(11, 9, 13), float64], Tensor[(9, 14, 7), uint16]) */
}

def @func_2154() -> (Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
  %396 = fn () -> (Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
    %391 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
    %392 = %391.1;
    %393 = cast(%392, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
    %394 = acosh(%393) /* ty=Tensor[(9, 14, 7), float64] */;
    %395 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
    (%394, %395)
  };
  %396() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */
}

def @func_5891() -> (Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) {
  %403 = fn () -> (Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) {
    %397 = @func_4123() /* ty=(Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) */;
    %398 = %397.0;
    %399 = cast(%398, dtype="float64") /* ty=Tensor[(13, 6, 10), float64] */;
    %400 = @func_2339() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), bool]) */;
    %401 = asin(%399) /* ty=Tensor[(13, 6, 10), float64] */;
    %402 = %400.0;
    (%401, %402)
  };
  %403() /* ty=(Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) */
}

def @func_11021() -> (Tensor[(9, 14, 7), uint16],) {
  %404 = @func_6485() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(9, 14, 7), uint16]) */;
  %405 = %404.3;
  (%405,)
}

def @func_5228() -> (Tensor[(9, 14, 7), uint16],) {
  @func_5226() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_1478() -> Tensor[(9, 14, 7), bool] {
  @func_1476() /* ty=Tensor[(9, 14, 7), bool] */
}

def @func_5243() -> Tensor[(9, 14, 7), uint16] {
  %406 = @func_2491() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %406.0
}

def @func_1175() -> Tensor[(9, 14, 7), uint16] {
  %408 = fn () -> Tensor[(9, 14, 7), uint16] {
    %407 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %407.0
  };
  %408() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_4181(%var_4179: Tensor[(1014), uint8], %var_4180: Tensor[(1, 90), float32]) -> (Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(1, 90), float32]) {
  @func_4177(%var_4179, %var_4180) /* ty=(Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(1, 90), float32]) */
}

def @func_2492() -> (Tensor[(9, 14, 7), uint16],) {
  %411 = fn () -> (Tensor[(9, 14, 7), uint16],) {
    %409 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %410 = %409.0;
    (%410,)
  };
  %411() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_8996(%var_8965: Tensor[(36), bool], %var_8966: Tensor[(324), bool]) -> (Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(324), bool], Tensor[(9, 14, 7), uint16]) {
  %412 = @func_7114() /* ty=(Tensor[(13, 6, 10), float64],) */;
  %413 = cast(%var_8965, dtype="bool") /* ty=Tensor[(36), bool] */;
  %414 = cast(%var_8966, dtype="bool") /* ty=Tensor[(324), bool] */;
  %415 = reshape(%413, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), bool] */;
  %416 = reshape(%414, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
  %417 = @func_2818(%415, %416) /* ty=(Tensor[(12, 9, 3), float32], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(9, 14, 7), uint16]) */;
  %418 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %419 = %412.0;
  %420 = %417.3;
  %421 = %418.0;
  (%419, %420, %var_8965, %var_8966, %421)
}

def @func_2381() -> (Tensor[(9, ?, 4), float64],) {
  @func_2379() /* ty=(Tensor[(9, ?, 4), float64],) */
}

def @func_10981(%var_10979: Tensor[(7, 6, 15), float32]) -> (Tensor[(7, 6, 15), float64], Tensor[(3, 4, 14), uint64], Tensor[(168), uint64]) {
  @func_10978(%var_10979) /* ty=(Tensor[(7, 6, 15), float64], Tensor[(3, 4, 14), uint64], Tensor[(168), uint64]) */
}

def @func_7475() -> (Tensor[(9, 14, 7), uint16],) {
  %422 = @func_2855() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %423 = %422.0;
  (%423,)
}

def @func_10171() -> (Tensor[(9, 14, 7), bool],) {
  %424 = @func_1928() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */;
  %425 = %424.0;
  (%425,)
}

def @func_3407(%var_3405: Tensor[(468), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 13, 4), int16], Tensor[(468), float64]) {
  @func_3404(%var_3405) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 13, 4), int16], Tensor[(468), float64]) */
}

def @func_1166() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */
}

def @func_4825(%var_4819: Tensor[(1008), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32]) {
  %426 = cast(%var_4819, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %427 = reshape(%426, newshape=[9, 14, 8]) /* ty=Tensor[(9, 14, 8), float32] */;
  %428 = @func_4043(%427) /* ty=(Tensor[(1820), uint64], Tensor[(9, 14, 8), int64], Tensor[(9, 14, 7), uint16]) */;
  %429 = @func_4583() /* ty=Tensor[(9, 14, 7), uint16] */;
  %430 = %428.2;
  (%429, %430, %var_4819)
}

def @func_7084() -> (Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), uint16]) {
  %436 = fn () -> (Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), uint16]) {
    %431 = @func_6390() /* ty=(Tensor[(9, ?, 4), float64],) */;
    %432 = @func_3204() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
    %433 = %431.0;
    %434 = @func_1476() /* ty=Tensor[(9, 14, 7), bool] */;
    %435 = %432.0;
    (%433, %434, %435)
  };
  %436() /* ty=(Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), uint16]) */
}

def @func_10460() -> (Tensor[(9, 14, 7), uint16],) {
  %437 = @func_5014() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %438 = %437.0;
  (%438,)
}

def @func_10450(%var_10448: Tensor[(90), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(90), float32], Tensor[(9, 14, 7), float32]) {
  @func_10447(%var_10448) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(90), float32], Tensor[(9, 14, 7), float32]) */
}

def @func_7660(%var_7629: Tensor[(147), float64], %var_7637: Tensor[(147), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float32], Tensor[(9, 14, 7), uint16]) {
  %439 = cast(%var_7629, dtype="float64") /* ty=Tensor[(147), float64] */;
  %440 = reshape(%439, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %441 = @func_1059(%440) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float64]) */;
  %442 = cast(%var_7629, dtype="float64") /* ty=Tensor[(147), float64] */;
  %443 = asin(%442) /* ty=Tensor[(147), float64] */;
  %444 = cast(%var_7637, dtype="float32") /* ty=Tensor[(147), float32] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(1), int32] */;
  %446 = cast(%443, dtype="float32") /* ty=Tensor[(147), float32] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?), float32] */;
  %448 = @func_6298() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) */;
  %449 = @func_5839() /* ty=Tensor[(9, 14, 7), uint16] */;
  %450 = @func_4220() /* ty=Tensor[(9, 14, 7), float32] */;
  %451 = %441.1;
  %452 = power(%446, %447) /* ty=Tensor[(147), float32] */;
  %453 = %448.0;
  (%449, %450, %451, %452, %453)
}

def @func_6209() -> Tensor[(9, 14, 7), float64] {
  %455 = fn () -> Tensor[(9, 14, 7), float64] {
    %454 = @func_2718() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
    %454.0
  };
  %455() /* ty=Tensor[(9, 14, 7), float64] */
}

def @func_6920() -> Tensor[(9, 14, 7), uint16] {
  %457 = fn () -> Tensor[(9, 14, 7), uint16] {
    %456 = @func_3996() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
    %456.3
  };
  %457() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_10023() -> (Tensor[(9, 14, 7), uint16],) {
  %460 = fn () -> (Tensor[(9, 14, 7), uint16],) {
    %458 = @func_8359() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(3, 30), float32]) */;
    %459 = %458.0;
    (%459,)
  };
  %460() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_6751(%var_6750: Tensor[(15, 3, 14), float32]) -> (Tensor[(15, 3, 14), float32], uint8, uint8, Tensor[(9, 14, 7), bool], Tensor[(3, 2, 15), float64], Tensor[(90), float32]) {
  %475 = fn (%var_6696: Tensor[(15, 3, 14), float32]) -> (Tensor[(15, 3, 14), float32], uint8, uint8, Tensor[(9, 14, 7), bool], Tensor[(3, 2, 15), float64], Tensor[(90), float32]) {
    %461 = cast(%var_6696, dtype="float32") /* ty=Tensor[(15, 3, 14), float32] */;
    %462 = cast(meta[relay.Constant][15] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %463 = reshape(%462, newshape=[]) /* ty=uint8 */;
    %464 = @func_6545(%463) /* ty=(Tensor[(11, 11, 8), int8], Tensor[(5, 3, 12), bool], uint8, Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool]) */;
    %465 = cast(meta[relay.Constant][15] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %466 = reshape(%465, newshape=[]) /* ty=uint8 */;
    %467 = @func_6545(%466) /* ty=(Tensor[(11, 11, 8), int8], Tensor[(5, 3, 12), bool], uint8, Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool]) */;
    %468 = cast(meta[relay.Constant][16] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
    %469 = reshape(%468, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float32] */;
    %470 = @func_127(%469) /* ty=(Tensor[(3, 2, 15), float64],) */;
    %471 = log2(%461) /* ty=Tensor[(15, 3, 14), float32] */;
    %472 = %464.2;
    %473 = %467.4;
    %474 = %470.0;
    (%471, %472, meta[relay.Constant][15] /* ty=uint8 */, %473, %474, meta[relay.Constant][16] /* ty=Tensor[(90), float32] */)
  };
  %475(%var_6750) /* ty=(Tensor[(15, 3, 14), float32], uint8, uint8, Tensor[(9, 14, 7), bool], Tensor[(3, 2, 15), float64], Tensor[(90), float32]) */
}

def @func_1476() -> Tensor[(9, 14, 7), bool] {
  %476 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %477 = %476.0;
  %478 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %479 = %478.1;
  %480 = cast(%479, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %481 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%477, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%482, %483) /* ty=Tensor[(9, 14, 7), bool] */
}

def @func_2822(%var_2820: Tensor[(12, 1, 3), bool], %var_2821: Tensor[(12, 9, 3), bool]) -> (Tensor[(12, 9, 3), float32], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(9, 14, 7), uint16]) {
  @func_2818(%var_2820, %var_2821) /* ty=(Tensor[(12, 9, 3), float32], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(9, 14, 7), uint16]) */
}

def @func_5438(%var_5436: Tensor[(90, 1), float32], %var_5437: Tensor[(169, 6), uint8]) -> (Tensor[(9, 14, 7), uint16], Tensor[(90, ?), float64], Tensor[(169, 6), float64]) {
  %502 = fn (%var_5419: Tensor[(90, 1), float32], %var_5428: Tensor[(169, 6), uint8]) -> (Tensor[(9, 14, 7), uint16], Tensor[(90, ?), float64], Tensor[(169, 6), float64]) {
    %484 = @func_4425() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %485 = cast(meta[relay.Constant][17] /* ty=Tensor[(169, 6), uint8] */, dtype="uint8") /* ty=Tensor[(169, 6), uint8] */;
    %486 = cast(%var_5419, dtype="float32") /* ty=Tensor[(90, 1), float32] */;
    %487 = reshape(%485, newshape=[1014]) /* ty=Tensor[(1014), uint8] */;
    %488 = reshape(%486, newshape=[1, 90]) /* ty=Tensor[(1, 90), float32] */;
    %489 = @func_4177(%487, %488) /* ty=(Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(1, 90), float32]) */;
    %490 = %489.3;
    %491 = cast(%490, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
    %492 = shape_of(%var_5419, dtype="int32") /* ty=Tensor[(2), int32] */;
    %493 = cast(%var_5419, dtype="float64") /* ty=Tensor[(90, 1), float64] */;
    %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %495 = cast(%var_5428, dtype="float64") /* ty=Tensor[(169, 6), float64] */;
    %496 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(169, 6), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %497 = cast(meta[relay.Constant][17] /* ty=Tensor[(169, 6), uint8] */, dtype="float64") /* ty=Tensor[(169, 6), float64] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %499 = %484.0;
    %500 = floor_divide(%493, %494) /* ty=Tensor[(90, ?), float64] */;
    %501 = multiply(%497, %498) /* ty=Tensor[(169, 6), float64] */;
    (%499, %500, %501)
  };
  %502(%var_5436, %var_5437) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(90, ?), float64], Tensor[(169, 6), float64]) */
}

def @func_7536() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(11, 9, 13), float64], Tensor[(21, 7), float64]) {
  @func_7534() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(11, 9, 13), float64], Tensor[(21, 7), float64]) */
}

def @func_11290() -> (Tensor[(9, 14, 7), uint16],) {
  %503 = @func_8482() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %504 = %503.2;
  (%504,)
}

def @func_1164() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %505 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %506 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %507 = %505.0;
  %508 = %506.0;
  (%507, %508)
}

def @func_7296(%var_7295: Tensor[(147), float64]) -> (Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32], Tensor[(135), int32], Tensor[(147), float32], Tensor[(147), uint64], Tensor[(147), float64], Tensor[(9, 14, 7), uint16]) {
  %534 = fn (%var_7255: Tensor[(147), float64]) -> (Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32], Tensor[(135), int32], Tensor[(147), float32], Tensor[(147), uint64], Tensor[(147), float64], Tensor[(9, 14, 7), uint16]) {
    %509 = @func_6298() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) */;
    %510 = cast(meta[relay.Constant][18] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %511 = reshape(%510, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
    %512 = @func_5765(%511) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32]) */;
    %513 = cast(meta[relay.Constant][19] /* ty=Tensor[(135), int32] */, dtype="int32") /* ty=Tensor[(135), int32] */;
    %514 = cast(%var_7255, dtype="float64") /* ty=Tensor[(147), float64] */;
    %515 = reshape(%513, newshape=[9, 5, 3]) /* ty=Tensor[(9, 5, 3), int32] */;
    %516 = reshape(%514, newshape=[147]) /* ty=Tensor[(147), float64] */;
    %517 = @func_3593(%515, %516) /* ty=(Tensor[(9, 5, 3), bool], Tensor[(3, 7, 7), float64], Tensor[(147), float64]) */;
    %518 = %517.2;
    %519 = cast(%var_7255, dtype="float32") /* ty=Tensor[(147), float32] */;
    %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(1), int32] */;
    %521 = cast(%518, dtype="float32") /* ty=Tensor[(147), float32] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?), float32] */;
    %523 = cast(meta[relay.Constant][20] /* ty=Tensor[(147), float64] */, dtype="uint64") /* ty=Tensor[(147), uint64] */;
    %524 = shape_of(%518, dtype="int32") /* ty=Tensor[(1), int32] */;
    %525 = cast(%518, dtype="uint64") /* ty=Tensor[(147), uint64] */;
    %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %527 = cast(meta[relay.Constant][20] /* ty=Tensor[(147), float64] */, dtype="float64") /* ty=Tensor[(147), float64] */;
    %528 = %509.1;
    %529 = %512.2;
    %530 = divide(%521, %522) /* ty=Tensor[(147), float32] */;
    %531 = minimum(%525, %526) /* ty=Tensor[(147), uint64] */;
    %532 = acos(%527) /* ty=Tensor[(147), float64] */;
    %533 = @func_4758() /* ty=Tensor[(9, 14, 7), uint16] */;
    (%528, %529, meta[relay.Constant][18] /* ty=Tensor[(1008), float32] */, meta[relay.Constant][19] /* ty=Tensor[(135), int32] */, %530, %531, %532, %533)
  };
  %534(%var_7295) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32], Tensor[(135), int32], Tensor[(147), float32], Tensor[(147), uint64], Tensor[(147), float64], Tensor[(9, 14, 7), uint16]) */
}

def @func_5016() -> (Tensor[(9, 14, 7), uint16],) {
  @func_5014() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_5765(%var_5761: Tensor[(1008), float32]) -> (Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32]) {
  %535 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %536 = cast(%var_5761, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %537 = reshape(%536, newshape=[1008]) /* ty=Tensor[(1008), float32] */;
  %538 = @func_4825(%537) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32]) */;
  %539 = @func_4220() /* ty=Tensor[(9, 14, 7), float32] */;
  %540 = %535.0;
  %541 = %538.1;
  (%539, %540, %541, %var_5761)
}

def @func_10276() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) {
  %542 = @func_3335() /* ty=(Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %543 = @func_5198() /* ty=(Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16]) */;
  %544 = %542.2;
  %545 = %543.0;
  (%544, %545)
}

def @func_1114(%var_1112: Tensor[(1, 147), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(?, 147), int8], Tensor[(9, 14, 7), uint16]) {
  @func_1111(%var_1112) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(?, 147), int8], Tensor[(9, 14, 7), uint16]) */
}

def @func_6777() -> (Tensor[(9, 14, 7), float64],) {
  %547 = fn () -> (Tensor[(9, 14, 7), float64],) {
    %546 = @func_6382() /* ty=Tensor[(9, 14, 7), float64] */;
    (%546,)
  };
  %547() /* ty=(Tensor[(9, 14, 7), float64],) */
}

def @func_6962() -> (Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  @func_6960() /* ty=(Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */
}

def @func_5128() -> Tensor[(9, 14, 7), uint16] {
  %548 = @func_4375() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %548.0
}

def @func_10206() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), float64]) {
  %553 = fn () -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), float64]) {
    %549 = @func_10171() /* ty=(Tensor[(9, 14, 7), bool],) */;
    %550 = @func_5128() /* ty=Tensor[(9, 14, 7), uint16] */;
    %551 = %549.0;
    %552 = @func_6208() /* ty=Tensor[(9, 14, 7), float64] */;
    (%550, %551, %552)
  };
  %553() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), float64]) */
}

def @func_9905() -> Tensor[(9, 14, 7), uint16] {
  %554 = @func_4375() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %554.0
}

def @func_7534() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(11, 9, 13), float64], Tensor[(21, 7), float64]) {
  %555 = @func_4425() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %556 = @func_4952() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %557 = cast(meta[relay.Constant][21] /* ty=Tensor[(21, 7), float64] */, dtype="float64") /* ty=Tensor[(21, 7), float64] */;
  %558 = reshape(%557, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %559 = @func_1059(%558) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float64]) */;
  %560 = %555.0;
  %561 = %556.1;
  %562 = %559.1;
  (%560, %561, %562, meta[relay.Constant][21] /* ty=Tensor[(21, 7), float64] */)
}

def @func_11209() -> (Tensor[(9, 14, 7), uint16],) {
  @func_11207() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_7477() -> (Tensor[(9, 14, 7), uint16],) {
  @func_7475() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_7196(%var_7195: uint8) -> (Tensor[(9, 14, 7), float64], Tensor[(5, 3, 12), bool], uint8, Tensor[(9, 13, 4), int16], Tensor[(468), float64]) {
  %572 = fn (%var_7183: uint8) -> (Tensor[(9, 14, 7), float64], Tensor[(5, 3, 12), bool], uint8, Tensor[(9, 13, 4), int16], Tensor[(468), float64]) {
    %563 = @func_2339() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), bool]) */;
    %564 = cast(%var_7183, dtype="uint8") /* ty=uint8 */;
    %565 = reshape(%564, newshape=[]) /* ty=uint8 */;
    %566 = cast(meta[relay.Constant][22] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %567 = reshape(%566, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), float64] */;
    %568 = @func_2567(%567) /* ty=(Tensor[(9, 13, 4), int16],) */;
    %569 = %563.0;
    %570 = @func_5787(%565) /* ty=Tensor[(5, 3, 12), bool] */;
    %571 = %568.0;
    (%569, %570, %var_7183, %571, meta[relay.Constant][22] /* ty=Tensor[(468), float64] */)
  };
  %572(%var_7195) /* ty=(Tensor[(9, 14, 7), float64], Tensor[(5, 3, 12), bool], uint8, Tensor[(9, 13, 4), int16], Tensor[(468), float64]) */
}

def @func_2395(%var_2393: Tensor[(21, 7), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(21, 7), float64]) {
  @func_2392(%var_2393) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(21, 7), float64]) */
}

def @func_3047(%var_3046: Tensor[(16, 4, 14), int32]) -> (Tensor[(16, 4, 14), bool],) {
  %578 = fn (%var_3041: Tensor[(16, 4, 14), int32]) -> (Tensor[(16, 4, 14), bool],) {
    %573 = cast(%var_3041, dtype="bool") /* ty=Tensor[(16, 4, 14), bool] */;
    %574 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(16, 4, 14), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %575 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 4, 14), int32] */, dtype="bool") /* ty=Tensor[(16, 4, 14), bool] */;
    %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %577 = less(%575, %576) /* ty=Tensor[(16, 4, 14), bool] */;
    (%577,)
  };
  %578(%var_3046) /* ty=(Tensor[(16, 4, 14), bool],) */
}

def @func_5245() -> Tensor[(9, 14, 7), uint16] {
  @func_5243() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_10091() -> (Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16], Tensor[(147), float64], Tensor[(9, 14, 7), uint16], Tensor[(9, 4, 12), float64], Tensor[(48), uint32], Tensor[(12, 36), uint32]) {
  %579 = @func_8810() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) */;
  %580 = cast(meta[relay.Constant][24] /* ty=Tensor[(147), float64] */, dtype="float64") /* ty=Tensor[(147), float64] */;
  %581 = cast(meta[relay.Constant][24] /* ty=Tensor[(147), float64] */, dtype="float64") /* ty=Tensor[(147), float64] */;
  %582 = reshape(%580, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %583 = reshape(%581, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %584 = @func_7660(%582, %583) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float32], Tensor[(9, 14, 7), uint16]) */;
  %585 = @func_6868() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %586 = cast(meta[relay.Constant][25] /* ty=Tensor[(48), uint32] */, dtype="uint32") /* ty=Tensor[(48), uint32] */;
  %587 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 36), uint32] */, dtype="uint32") /* ty=Tensor[(12, 36), uint32] */;
  %588 = reshape(%586, newshape=[1, 4, 12]) /* ty=Tensor[(1, 4, 12), uint32] */;
  %589 = reshape(%587, newshape=[9, 4, 12]) /* ty=Tensor[(9, 4, 12), uint32] */;
  %590 = @func_1573(%588, %589) /* ty=(Tensor[(9, 4, 12), float64],) */;
  %591 = %579.1;
  %592 = %584.4;
  %593 = %585.0;
  %594 = %590.0;
  (%591, %592, meta[relay.Constant][24] /* ty=Tensor[(147), float64] */, %593, %594, meta[relay.Constant][25] /* ty=Tensor[(48), uint32] */, meta[relay.Constant][26] /* ty=Tensor[(12, 36), uint32] */)
}

def @func_9500() -> (Tensor[(21, 7), float64],) {
  @func_9498() /* ty=(Tensor[(21, 7), float64],) */
}

def @func_6870() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
  @func_6868() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */
}

def @func_10278() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) {
  @func_10276() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */
}

def @func_10447(%var_10418: Tensor[(90), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(90), float32], Tensor[(9, 14, 7), float32]) {
  %595 = @func_8958() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %596 = cast(meta[relay.Constant][27] /* ty=Tensor[(1014), uint8] */, dtype="uint8") /* ty=Tensor[(1014), uint8] */;
  %597 = cast(%var_10418, dtype="float32") /* ty=Tensor[(90), float32] */;
  %598 = reshape(%596, newshape=[1014]) /* ty=Tensor[(1014), uint8] */;
  %599 = reshape(%597, newshape=[1, 90]) /* ty=Tensor[(1, 90), float32] */;
  %600 = @func_4177(%598, %599) /* ty=(Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(1, 90), float32]) */;
  %601 = %595.1;
  %602 = %600.1;
  %603 = @func_4220() /* ty=Tensor[(9, 14, 7), float32] */;
  (%601, %602, meta[relay.Constant][27] /* ty=Tensor[(1014), uint8] */, %var_10418, %603)
}

def @func_8659() -> Tensor[(13, 6, 10), float32] {
  @func_8657() /* ty=Tensor[(13, 6, 10), float32] */
}

def @func_11096() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool]) {
  %604 = @func_6960() /* ty=(Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %605 = @func_10171() /* ty=(Tensor[(9, 14, 7), bool],) */;
  %606 = %604.1;
  %607 = @func_4758() /* ty=Tensor[(9, 14, 7), uint16] */;
  %608 = %605.0;
  (%606, %607, %608)
}

def @func_954() -> (Tensor[(9, 14, 7), uint16],) {
  %609 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 14, 7), uint16] */, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %610 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(9, 14, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 14, 7), uint16] */, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %613 = right_shift(%611, %612) /* ty=Tensor[(9, 14, 7), uint16] */;
  (%613,)
}

def @func_7806(%var_7803: Tensor[(36, 1), uint32], %var_7804: Tensor[(1287), float64], %var_7805: Tensor[(90), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(12), uint32], Tensor[(36, 1), uint32], Tensor[(1287), float64], Tensor[(90), float32]) {
  %626 = fn (%var_7792: Tensor[(36, 1), uint32], %var_7793: Tensor[(1287), float64], %var_7794: Tensor[(90), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(12), uint32], Tensor[(36, 1), uint32], Tensor[(1287), float64], Tensor[(90), float32]) {
    %614 = @func_5277() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %615 = cast(meta[relay.Constant][30] /* ty=Tensor[(12), uint32] */, dtype="uint32") /* ty=Tensor[(12), uint32] */;
    %616 = cast(%var_7792, dtype="uint32") /* ty=Tensor[(36, 1), uint32] */;
    %617 = cast(%var_7793, dtype="float64") /* ty=Tensor[(1287), float64] */;
    %618 = cast(%var_7794, dtype="float32") /* ty=Tensor[(90), float32] */;
    %619 = reshape(%615, newshape=[4, 3, 1]) /* ty=Tensor[(4, 3, 1), uint32] */;
    %620 = reshape(%616, newshape=[4, 3, 3]) /* ty=Tensor[(4, 3, 3), uint32] */;
    %621 = reshape(%617, newshape=[1287]) /* ty=Tensor[(1287), float64] */;
    %622 = reshape(%618, newshape=[1, 90]) /* ty=Tensor[(1, 90), float32] */;
    %623 = @func_3526(%619, %620, %621, %622) /* ty=(Tensor[(4, 3, 3), uint32], Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(4, 3, 3), float32], Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(1, 90), float32]) */;
    %624 = %614.0;
    %625 = %623.1;
    (%624, %625, meta[relay.Constant][30] /* ty=Tensor[(12), uint32] */, %var_7792, %var_7793, %var_7794)
  };
  %626(%var_7803, %var_7804, %var_7805) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(12), uint32], Tensor[(36, 1), uint32], Tensor[(1287), float64], Tensor[(90), float32]) */
}

def @func_11338() -> Tensor[(13, 6, 10), float32] {
  %627 = fn () -> Tensor[(13, 6, 10), float32] {
    @func_8657() /* ty=Tensor[(13, 6, 10), float32] */
  };
  %627() /* ty=Tensor[(13, 6, 10), float32] */
}

def @func_8316(%var_8169: Tensor[(15, 8, 6), uint64], %var_8225: Tensor[(15, 8, 6), uint64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(9, 14, 7), float64], Tensor[(15, 8, 6), bool], Tensor[(9, 14, 7), float64], Tensor[(1287), float64], Tensor[(1287), float64], Tensor[(468), bool], Tensor[(468), float32]) {
  %628 = cast(meta[relay.Constant][31] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %629 = reshape(%628, newshape=[468]) /* ty=Tensor[(468), float64] */;
  %630 = @func_3404(%629) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 13, 4), int16], Tensor[(468), float64]) */;
  %631 = @func_5890() /* ty=(Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) */;
  %632 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 8, 6), uint64] */, dtype="uint64") /* ty=Tensor[(15, 8, 6), uint64] */;
  %633 = shape_of(%var_8169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%var_8169, dtype="uint64") /* ty=Tensor[(15, 8, 6), uint64] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %636 = bitwise_or(%634, %635) /* ty=Tensor[(15, 8, 6), uint64] */;
  %637 = cast(%var_8225, dtype="bool") /* ty=Tensor[(15, 8, 6), bool] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%636, dtype="bool") /* ty=Tensor[(15, 8, 6), bool] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %641 = @func_5890() /* ty=(Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) */;
  %642 = cast(meta[relay.Constant][33] /* ty=Tensor[(1287), float64] */, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %643 = reshape(%642, newshape=[1287]) /* ty=Tensor[(1287), float64] */;
  %644 = @func_2199(%643) /* ty=(Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %645 = @func_5700() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), int8], Tensor[(468), float64]) */;
  %646 = %645.2;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(468), float32] */;
  %648 = sigmoid(%647) /* ty=Tensor[(468), float32] */;
  %649 = cast(%646, dtype="bool") /* ty=Tensor[(468), bool] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(1), int32] */;
  %651 = cast(%648, dtype="bool") /* ty=Tensor[(468), bool] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?), bool] */;
  %653 = cast(%648, dtype="float32") /* ty=Tensor[(468), float32] */;
  %654 = %630.0;
  %655 = %631.1;
  %656 = less_equal(%639, %640) /* ty=Tensor[(15, 8, 6), bool] */;
  %657 = %641.1;
  %658 = %644.2;
  %659 = greater_equal(%651, %652) /* ty=Tensor[(468), bool] */;
  %660 = atanh(%653) /* ty=Tensor[(468), float32] */;
  (%654, meta[relay.Constant][31] /* ty=Tensor[(468), float64] */, %655, %656, %657, %658, meta[relay.Constant][33] /* ty=Tensor[(1287), float64] */, %659, %660)
}

def @func_9615(%var_9613: Tensor[(5, 10, 16), bool], %var_9614: Tensor[(5, 10, 16), bool]) -> Tensor[(5, 10, 16), bool] {
  %665 = fn (%var_9606: Tensor[(5, 10, 16), bool], %var_9607: Tensor[(5, 10, 16), bool]) -> Tensor[(5, 10, 16), bool] {
    %661 = cast(%var_9607, dtype="bool") /* ty=Tensor[(5, 10, 16), bool] */;
    %662 = shape_of(%var_9606, dtype="int32") /* ty=Tensor[(3), int32] */;
    %663 = cast(%var_9606, dtype="bool") /* ty=Tensor[(5, 10, 16), bool] */;
    %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%663, %664) /* ty=Tensor[(5, 10, 16), bool] */
  };
  %665(%var_9613, %var_9614) /* ty=Tensor[(5, 10, 16), bool] */
}

def @func_6485() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(9, 14, 7), uint16]) {
  %666 = @func_4198() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %667 = cast(meta[relay.Constant][34] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %668 = reshape(%667, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
  %669 = @func_2890(%668) /* ty=(Tensor[(9, 14, 7), int8], Tensor[(147), float64], Tensor[(9, 13, 4), int16], Tensor[(234, 2), float64], Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) */;
  %670 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %671 = %666.0;
  %672 = %669.4;
  %673 = %670.0;
  (%671, %672, meta[relay.Constant][34] /* ty=Tensor[(468), float64] */, %673)
}

def @func_8900() -> Tensor[(468), float64] {
  %675 = fn () -> Tensor[(468), float64] {
    %674 = @func_5700() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), int8], Tensor[(468), float64]) */;
    %674.2
  };
  %675() /* ty=Tensor[(468), float64] */
}

def @func_5624(%var_5623: Tensor[(324), bool]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), uint16], Tensor[(36), float32], Tensor[(1, 36), bool], Tensor[(9, 14, 7), uint16], Tensor[(324), bool], Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(143, 9), float64]) {
  %700 = fn (%var_5602: Tensor[(324), bool]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), uint16], Tensor[(36), float32], Tensor[(1, 36), bool], Tensor[(9, 14, 7), uint16], Tensor[(324), bool], Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(143, 9), float64]) {
    %676 = @func_3335() /* ty=(Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
    %677 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %678 = @func_2153() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
    %679 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 36), bool] */, dtype="bool") /* ty=Tensor[(1, 36), bool] */;
    %680 = reshape(%679, newshape=[36]) /* ty=Tensor[(36), bool] */;
    %681 = @func_4096(%680) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(90), float32], Tensor[(3, 2, 15), float32], Tensor[(9, 4), bool], Tensor[(36), float32], Tensor[(9, 14, 7), float32]) */;
    %682 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 36), bool] */, dtype="bool") /* ty=Tensor[(1, 36), bool] */;
    %683 = cast(%var_5602, dtype="bool") /* ty=Tensor[(324), bool] */;
    %684 = reshape(%682, newshape=[12, 1, 3]) /* ty=Tensor[(12, 1, 3), bool] */;
    %685 = reshape(%683, newshape=[12, 9, 3]) /* ty=Tensor[(12, 9, 3), bool] */;
    %686 = @func_2818(%684, %685) /* ty=(Tensor[(12, 9, 3), float32], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(9, 14, 7), uint16]) */;
    %687 = %686.3;
    %688 = cast(%687, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
    %689 = reshape(%688, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), uint16] */;
    %690 = cast(meta[relay.Constant][36] /* ty=Tensor[(143, 9), float64] */, dtype="float64") /* ty=Tensor[(143, 9), float64] */;
    %691 = reshape(%690, newshape=[11, 9, 13]) /* ty=Tensor[(11, 9, 13), float64] */;
    %692 = @func_275(%691) /* ty=(Tensor[(11, 9, 13), float64],) */;
    %693 = %676.1;
    %694 = %677.0;
    %695 = @func_4897() /* ty=Tensor[(9, 14, 7), bool] */;
    %696 = %678.1;
    %697 = %681.4;
    %698 = @func_2926(%689) /* ty=Tensor[(9, 14, 7), float32] */;
    %699 = %692.0;
    (%693, %694, %695, %696, %697, meta[relay.Constant][35] /* ty=Tensor[(1, 36), bool] */, %687, %var_5602, %698, %699, meta[relay.Constant][36] /* ty=Tensor[(143, 9), float64] */)
  };
  %700(%var_5623) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), uint16], Tensor[(36), float32], Tensor[(1, 36), bool], Tensor[(9, 14, 7), uint16], Tensor[(324), bool], Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(143, 9), float64]) */
}

def @func_6384() -> Tensor[(9, 14, 7), float64] {
  @func_6382() /* ty=Tensor[(9, 14, 7), float64] */
}

def @func_8341() -> (Tensor[(9, 14, 7), bool],) {
  %702 = fn () -> (Tensor[(9, 14, 7), bool],) {
    %701 = @func_4897() /* ty=Tensor[(9, 14, 7), bool] */;
    (%701,)
  };
  %702() /* ty=(Tensor[(9, 14, 7), bool],) */
}

def @func_10093() -> (Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16], Tensor[(147), float64], Tensor[(9, 14, 7), uint16], Tensor[(9, 4, 12), float64], Tensor[(48), uint32], Tensor[(12, 36), uint32]) {
  @func_10091() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16], Tensor[(147), float64], Tensor[(9, 14, 7), uint16], Tensor[(9, 4, 12), float64], Tensor[(48), uint32], Tensor[(12, 36), uint32]) */
}

def @func_5702() -> (Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), int8], Tensor[(468), float64]) {
  @func_5700() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), int8], Tensor[(468), float64]) */
}

def @func_8359() -> (Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(3, 30), float32]) {
  %703 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %704 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 30), float32] */, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
  %705 = reshape(%704, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float32] */;
  %706 = @func_127(%705) /* ty=(Tensor[(3, 2, 15), float64],) */;
  %707 = %703.0;
  %708 = %706.0;
  (%707, %708, meta[relay.Constant][37] /* ty=Tensor[(3, 30), float32] */)
}

def @func_8657() -> Tensor[(13, 6, 10), float32] {
  @func_5642() /* ty=Tensor[(13, 6, 10), float32] */
}

def @func_10893() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %709 = @func_979() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %710 = %709.0;
  %711 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%710, %711)
}

def @func_2392(%var_2388: Tensor[(21, 7), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(21, 7), float64]) {
  %712 = cast(%var_2388, dtype="float64") /* ty=Tensor[(21, 7), float64] */;
  %713 = reshape(%712, newshape=[1, 147]) /* ty=Tensor[(1, 147), float64] */;
  %714 = @func_1111(%713) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(?, 147), int8], Tensor[(9, 14, 7), uint16]) */;
  %715 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  %716 = %714.4;
  (%715, %716, %var_2388)
}

def @func_980() -> (Tensor[(9, 14, 7), uint16],) {
  %719 = fn () -> (Tensor[(9, 14, 7), uint16],) {
    %717 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %718 = %717.0;
    (%718,)
  };
  %719() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_5198() -> (Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16]) {
  %720 = @func_2974() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) */;
  %721 = @func_2491() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %722 = %720.1;
  %723 = %721.0;
  (%722, %723)
}

def @func_9692() -> Tensor[(2, 5, 7), float32] {
  @func_9690() /* ty=Tensor[(2, 5, 7), float32] */
}

def @func_6547(%var_6546: uint8) -> (Tensor[(11, 11, 8), int8], Tensor[(5, 3, 12), bool], uint8, Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool]) {
  %734 = fn (%var_6514: uint8) -> (Tensor[(11, 11, 8), int8], Tensor[(5, 3, 12), bool], uint8, Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool]) {
    %724 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 11, 8), int8] */, dtype="int8") /* ty=Tensor[(11, 11, 8), int8] */;
    %725 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(11, 11, 8), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %726 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 11, 8), int8] */, dtype="int8") /* ty=Tensor[(11, 11, 8), int8] */;
    %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %728 = cast(%var_6514, dtype="uint8") /* ty=uint8 */;
    %729 = reshape(%728, newshape=[]) /* ty=uint8 */;
    %730 = right_shift(%726, %727) /* ty=Tensor[(11, 11, 8), int8] */;
    %731 = @func_5787(%729) /* ty=Tensor[(5, 3, 12), bool] */;
    %732 = @func_1589() /* ty=Tensor[(9, 14, 7), uint16] */;
    %733 = @func_1476() /* ty=Tensor[(9, 14, 7), bool] */;
    (%730, %731, %var_6514, %732, %733)
  };
  %734(%var_6546) /* ty=(Tensor[(11, 11, 8), int8], Tensor[(5, 3, 12), bool], uint8, Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), bool]) */
}

def @func_6684() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(7, 21), bool], Tensor[(9, 14, 7), uint16]) {
  %749 = fn () -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(7, 21), bool], Tensor[(9, 14, 7), uint16]) {
    %735 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 21), float64] */, dtype="float64") /* ty=Tensor[(7, 21), float64] */;
    %736 = reshape(%735, newshape=[21, 7]) /* ty=Tensor[(21, 7), float64] */;
    %737 = @func_2392(%736) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(21, 7), float64]) */;
    %738 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 21), float64] */, dtype="float32") /* ty=Tensor[(7, 21), float32] */;
    %739 = rsqrt(%738) /* ty=Tensor[(7, 21), float32] */;
    %740 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 21), float64] */, dtype="bool") /* ty=Tensor[(7, 21), bool] */;
    %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(2), int32] */;
    %742 = cast(%739, dtype="bool") /* ty=Tensor[(7, 21), bool] */;
    %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %744 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
    %745 = @func_5839() /* ty=Tensor[(9, 14, 7), uint16] */;
    %746 = %737.1;
    %747 = equal(%742, %743) /* ty=Tensor[(7, 21), bool] */;
    %748 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
    (%744, %745, %746, %747, %748)
  };
  %749() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(7, 21), bool], Tensor[(9, 14, 7), uint16]) */
}

def @func_4469() -> (Tensor[(9, 14, 7), uint16], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) {
  %750 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
  %751 = cast(meta[relay.Constant][41] /* ty=Tensor[(1287), float64] */, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %752 = reshape(%751, newshape=[1287]) /* ty=Tensor[(1287), float64] */;
  %753 = @func_2199(%752) /* ty=(Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %754 = %750.0;
  %755 = %753.1;
  (%754, %755, meta[relay.Constant][41] /* ty=Tensor[(1287), float64] */)
}

def @func_2590() -> Tensor[(9, 14, 7), uint16] {
  @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_1824(%var_1785: Tensor[(10, 13, 14), uint64], %var_1786: Tensor[(10, 13, 14), uint64]) -> (Tensor[(10, 13, 14), bool], Tensor[(9, 14, 7), int8]) {
  %756 = cast(%var_1786, dtype="bool") /* ty=Tensor[(10, 13, 14), bool] */;
  %757 = shape_of(%var_1785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(%var_1785, dtype="bool") /* ty=Tensor[(10, 13, 14), bool] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %760 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
  %761 = less_equal(%758, %759) /* ty=Tensor[(10, 13, 14), bool] */;
  %762 = %760.1;
  (%761, %762)
}

def @func_4954() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  @func_4952() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */
}

def @func_1111(%var_1077: Tensor[(1, 147), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(?, 147), int8], Tensor[(9, 14, 7), uint16]) {
  %763 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %764 = cast(%var_1077, dtype="float64") /* ty=Tensor[(1, 147), float64] */;
  %765 = reshape(%764, newshape=[147]) /* ty=Tensor[(147), float64] */;
  %766 = @func_1059(%765) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float64]) */;
  %767 = %766.2;
  %768 = cast(%767, dtype="float64") /* ty=Tensor[(147), float64] */;
  %769 = reshape(%768, newshape=[3, 7, 7]) /* ty=Tensor[(3, 7, 7), float64] */;
  %770 = @func_891(%769) /* ty=(Tensor[(3, 7, 7), float64], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %771 = cast(%767, dtype="int8") /* ty=Tensor[(147), int8] */;
  %772 = shape_of(%var_1077, dtype="int32") /* ty=Tensor[(2), int32] */;
  %773 = cast(%var_1077, dtype="int8") /* ty=Tensor[(1, 147), int8] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %775 = %763.0;
  %776 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
  %777 = %770.2;
  %778 = add(%773, %774) /* ty=Tensor[(?, 147), int8] */;
  %779 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%775, %776, %777, %778, %779)
}

def @func_7994() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(1820), uint64]) {
  %788 = fn () -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(1820), uint64]) {
    %780 = @func_7475() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %781 = cast(meta[relay.Constant][42] /* ty=Tensor[(1820), uint64] */, dtype="uint64") /* ty=Tensor[(1820), uint64] */;
    %782 = cast(meta[relay.Constant][42] /* ty=Tensor[(1820), uint64] */, dtype="uint64") /* ty=Tensor[(1820), uint64] */;
    %783 = reshape(%781, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
    %784 = reshape(%782, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
    %785 = @func_1824(%783, %784) /* ty=(Tensor[(10, 13, 14), bool], Tensor[(9, 14, 7), int8]) */;
    %786 = %780.0;
    %787 = %785.1;
    (%786, %787, meta[relay.Constant][42] /* ty=Tensor[(1820), uint64] */)
  };
  %788() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(1820), uint64]) */
}

def @func_5277() -> (Tensor[(9, 14, 7), uint16],) {
  %789 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %790 = %789.1;
  (%790,)
}

def @func_9498() -> (Tensor[(21, 7), float64],) {
  %791 = @func_7534() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(11, 9, 13), float64], Tensor[(21, 7), float64]) */;
  %792 = %791.3;
  (%792,)
}

def @func_9086(%var_9039: Tensor[(1, 1820), uint64]) -> (Tensor[(13, 6, 10), float64], Tensor[(?, 1820), float64], Tensor[(13, 6, 10), int8]) {
  %793 = @func_4123() /* ty=(Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) */;
  %794 = %793.0;
  %795 = cast(%794, dtype="float64") /* ty=Tensor[(13, 6, 10), float64] */;
  %796 = cast(%var_9039, dtype="uint64") /* ty=Tensor[(1, 1820), uint64] */;
  %797 = cast(%var_9039, dtype="uint64") /* ty=Tensor[(1, 1820), uint64] */;
  %798 = reshape(%796, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
  %799 = reshape(%797, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
  %800 = @func_1824(%798, %799) /* ty=(Tensor[(10, 13, 14), bool], Tensor[(9, 14, 7), int8]) */;
  %801 = %800.0;
  %802 = cast(%801, dtype="bool") /* ty=Tensor[(10, 13, 14), bool] */;
  %803 = shape_of(%var_9039, dtype="int32") /* ty=Tensor[(2), int32] */;
  %804 = cast(%var_9039, dtype="bool") /* ty=Tensor[(1, 1820), bool] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %806 = less(%804, %805) /* ty=Tensor[(?, 1820), bool] */;
  %807 = cast(%801, dtype="float64") /* ty=Tensor[(10, 13, 14), float64] */;
  %808 = shape_of(%806, dtype="int32") /* ty=Tensor[(2), int32] */;
  %809 = cast(%806, dtype="float64") /* ty=Tensor[(?, 1820), float64] */;
  %810 = dyn.reshape(%807, %808, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %811 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 6, 10), float32] */, dtype="int8") /* ty=Tensor[(13, 6, 10), int8] */;
  %812 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(%794, dtype="int8") /* ty=Tensor[(13, 6, 10), int8] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %815 = cos(%795) /* ty=Tensor[(13, 6, 10), float64] */;
  %816 = floor_divide(%809, %810) /* ty=Tensor[(?, 1820), float64] */;
  %817 = multiply(%813, %814) /* ty=Tensor[(13, 6, 10), int8] */;
  (%815, %816, %817)
}

def @func_2818(%var_2754: Tensor[(12, 1, 3), bool], %var_2755: Tensor[(12, 9, 3), bool]) -> (Tensor[(12, 9, 3), float32], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(9, 14, 7), uint16]) {
  %818 = cast(%var_2754, dtype="bool") /* ty=Tensor[(12, 1, 3), bool] */;
  %819 = cast(%var_2755, dtype="bool") /* ty=Tensor[(12, 9, 3), bool] */;
  %820 = logical_and(%818, %819) /* ty=Tensor[(12, 9, 3), bool] */;
  %821 = cast(%820, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %822 = shape_of(%var_2755, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%var_2755, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %825 = mod(%823, %824) /* ty=Tensor[(12, 9, 3), float32] */;
  %826 = cast(%825, dtype="float32") /* ty=Tensor[(12, 9, 3), float32] */;
  %827 = cast(meta[relay.Constant][44] /* ty=Tensor[(1287), float64] */, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %828 = reshape(%827, newshape=[1287]) /* ty=Tensor[(1287), float64] */;
  %829 = @func_2199(%828) /* ty=(Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
  %830 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %831 = log10(%826) /* ty=Tensor[(12, 9, 3), float32] */;
  %832 = %829.1;
  %833 = %830.0;
  (%831, %832, meta[relay.Constant][44] /* ty=Tensor[(1287), float64] */, %833)
}

def @func_129(%var_128: Tensor[(3, 2, 15), float32]) -> (Tensor[(3, 2, 15), float64],) {
  %843 = fn (%var_87: Tensor[(3, 2, 15), float32]) -> (Tensor[(3, 2, 15), float64],) {
    %834 = cast(%var_87, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
    %835 = sinh(%834) /* ty=Tensor[(3, 2, 15), float32] */;
    %836 = cast(%835, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
    %837 = atanh(%836) /* ty=Tensor[(3, 2, 15), float32] */;
    %838 = cast(%835, dtype="float64") /* ty=Tensor[(3, 2, 15), float64] */;
    %839 = shape_of(%837, dtype="int32") /* ty=Tensor[(3), int32] */;
    %840 = cast(%837, dtype="float64") /* ty=Tensor[(3, 2, 15), float64] */;
    %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %842 = floor_divide(%840, %841) /* ty=Tensor[(3, 2, 15), float64] */;
    (%842,)
  };
  %843(%var_128) /* ty=(Tensor[(3, 2, 15), float64],) */
}

def @func_1576(%var_1574: Tensor[(1, 4, 12), uint32], %var_1575: Tensor[(9, 4, 12), uint32]) -> (Tensor[(9, 4, 12), float64],) {
  %856 = fn (%var_1542: Tensor[(1, 4, 12), uint32], %var_1543: Tensor[(9, 4, 12), uint32]) -> (Tensor[(9, 4, 12), float64],) {
    %844 = cast(%var_1542, dtype="uint32") /* ty=Tensor[(1, 4, 12), uint32] */;
    %845 = cast(%var_1543, dtype="uint32") /* ty=Tensor[(9, 4, 12), uint32] */;
    %846 = right_shift(%844, %845) /* ty=Tensor[(9, 4, 12), uint32] */;
    %847 = cast(%846, dtype="float64") /* ty=Tensor[(9, 4, 12), float64] */;
    %848 = log(%847) /* ty=Tensor[(9, 4, 12), float64] */;
    %849 = cast(%846, dtype="bool") /* ty=Tensor[(9, 4, 12), bool] */;
    %850 = shape_of(%848, dtype="int32") /* ty=Tensor[(3), int32] */;
    %851 = cast(%848, dtype="bool") /* ty=Tensor[(9, 4, 12), bool] */;
    %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %853 = equal(%851, %852) /* ty=Tensor[(9, 4, 12), bool] */;
    %854 = cast(%853, dtype="float64") /* ty=Tensor[(9, 4, 12), float64] */;
    %855 = sigmoid(%854) /* ty=Tensor[(9, 4, 12), float64] */;
    (%855,)
  };
  %856(%var_1574, %var_1575) /* ty=(Tensor[(9, 4, 12), float64],) */
}

def @func_4897() -> Tensor[(9, 14, 7), bool] {
  %857 = @func_1928() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */;
  %857.0
}

def @func_4376() -> (Tensor[(9, 14, 7), uint16],) {
  %860 = fn () -> (Tensor[(9, 14, 7), uint16],) {
    %858 = @func_2718() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
    %859 = %858.1;
    (%859,)
  };
  %860() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_1687() -> (Tensor[(9, 14, 7), uint16],) {
  @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_10571(%var_10569: Tensor[(1287), float64], %var_10570: Tensor[(147), float64]) -> (Tensor[(13, 6, 10), float32], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(9, 14, 7), float64], Tensor[(2, 5, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) {
  %875 = fn (%var_10536: Tensor[(1287), float64], %var_10566: Tensor[(147), float64]) -> (Tensor[(13, 6, 10), float32], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(9, 14, 7), float64], Tensor[(2, 5, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) {
    %861 = @func_4123() /* ty=(Tensor[(13, 6, 10), float32], Tensor[(9, 14, 7), uint16]) */;
    %862 = cast(%var_10536, dtype="float64") /* ty=Tensor[(1287), float64] */;
    %863 = reshape(%862, newshape=[11, 9, 13]) /* ty=Tensor[(11, 9, 13), float64] */;
    %864 = @func_275(%863) /* ty=(Tensor[(11, 9, 13), float64],) */;
    %865 = @func_2718() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
    %866 = @func_8683() /* ty=(Tensor[(2, 5, 7), float32],) */;
    %867 = cast(%var_10566, dtype="float64") /* ty=Tensor[(147), float64] */;
    %868 = reshape(%867, newshape=[147]) /* ty=Tensor[(147), float64] */;
    %869 = @func_7294(%868) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32], Tensor[(135), int32], Tensor[(147), float32], Tensor[(147), uint64], Tensor[(147), float64], Tensor[(9, 14, 7), uint16]) */;
    %870 = %861.0;
    %871 = %864.0;
    %872 = %865.0;
    %873 = %866.0;
    %874 = %869.7;
    (%870, %871, %var_10536, %872, %873, %874, %var_10566)
  };
  %875(%var_10569, %var_10570) /* ty=(Tensor[(13, 6, 10), float32], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(9, 14, 7), float64], Tensor[(2, 5, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) */
}

def @func_6298() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) {
  %876 = @func_2643() /* ty=Tensor[(9, 14, 7), uint16] */;
  %877 = cast(%876, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %878 = reshape(%877, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), float64] */;
  %879 = @func_2526(%878) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) */;
  %880 = %879.1;
  (%876, %880)
}

def @func_278(%var_276: Tensor[(11, 9, 13), float64]) -> (Tensor[(11, 9, 13), float64],) {
  @func_275(%var_276) /* ty=(Tensor[(11, 9, 13), float64],) */
}

def @func_9357(%var_9355: Tensor[(5, 1, 10), float32]) -> (Tensor[(5, 1, 10), float32], Tensor[(9, 14, 7), uint16]) {
  @func_9354(%var_9355) /* ty=(Tensor[(5, 1, 10), float32], Tensor[(9, 14, 7), uint16]) */
}

def @func_5787(%var_5778: uint8) -> Tensor[(5, 3, 12), bool] {
  %881 = cast(%var_5778, dtype="bool") /* ty=bool */;
  %882 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 3, 12), uint8] */, dtype="bool") /* ty=Tensor[(5, 3, 12), bool] */;
  greater(%881, %882) /* ty=Tensor[(5, 3, 12), bool] */
}

def @func_4276(%var_4257: Tensor[(14, 4, 5), uint16], %var_4258: Tensor[(14, 4, 5), uint16]) -> (Tensor[(14, 4, 5), uint16], Tensor[(9, 14, 7), float64]) {
  %883 = cast(%var_4258, dtype="uint16") /* ty=Tensor[(14, 4, 5), uint16] */;
  %884 = shape_of(%var_4257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %885 = cast(%var_4257, dtype="uint16") /* ty=Tensor[(14, 4, 5), uint16] */;
  %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %887 = @func_2153() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %888 = bitwise_xor(%885, %886) /* ty=Tensor[(14, 4, 5), uint16] */;
  %889 = %887.0;
  (%888, %889)
}

def @func_11144() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %890 = @func_5014() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %891 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %892 = %890.0;
  %893 = %891.0;
  (%892, %893)
}

def @func_1929() -> (Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) {
  %899 = fn () -> (Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) {
    %894 = cast(meta[relay.Constant][46] /* ty=Tensor[(147), float64] */, dtype="float64") /* ty=Tensor[(147), float64] */;
    %895 = reshape(%894, newshape=[147]) /* ty=Tensor[(147), float64] */;
    %896 = @func_1059(%895) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float64]) */;
    %897 = @func_1476() /* ty=Tensor[(9, 14, 7), bool] */;
    %898 = %896.2;
    (%897, %898, meta[relay.Constant][46] /* ty=Tensor[(147), float64] */)
  };
  %899() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */
}

def @func_6107() -> (Tensor[(9, 14, 7), float64], Tensor[(9, ?, 4), float64]) {
  %904 = fn () -> (Tensor[(9, 14, 7), float64], Tensor[(9, ?, 4), float64]) {
    %900 = @func_5890() /* ty=(Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) */;
    %901 = @func_2379() /* ty=(Tensor[(9, ?, 4), float64],) */;
    %902 = %900.1;
    %903 = %901.0;
    (%902, %903)
  };
  %904() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, ?, 4), float64]) */
}

def @func_8361() -> (Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(3, 30), float32]) {
  @func_8359() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(3, 30), float32]) */
}

def @func_4760() -> Tensor[(9, 14, 7), uint16] {
  @func_4758() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_10166() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(432), uint32], Tensor[(9, 14, 7), uint16]) {
  @func_10164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(432), uint32], Tensor[(9, 14, 7), uint16]) */
}

def @func_4198() -> (Tensor[(9, 14, 7), uint16],) {
  %905 = @func_2153() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
  %906 = %905.1;
  (%906,)
}

def @func_9832() -> Tensor[(9, 14, 7), float32] {
  @func_9830() /* ty=Tensor[(9, 14, 7), float32] */
}

def @func_1453() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) {
  %907 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %908 = %907.0;
  %909 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
  %910 = cast(%909, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %911 = shape_of(%908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %912 = cast(%908, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %913 = dyn.reshape(%910, %911, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %914 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
  %915 = cast(%914, dtype="int8") /* ty=Tensor[(9, 14, 7), int8] */;
  %916 = shape_of(%908, dtype="int32") /* ty=Tensor[(3), int32] */;
  %917 = cast(%908, dtype="int8") /* ty=Tensor[(9, 14, 7), int8] */;
  %918 = dyn.reshape(%915, %916, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %919 = bitwise_xor(%912, %913) /* ty=Tensor[(9, 14, 7), uint16] */;
  %920 = multiply(%917, %918) /* ty=Tensor[(9, 14, 7), int8] */;
  (%919, %920)
}

def @func_2892(%var_2891: Tensor[(234, 2), float64]) -> (Tensor[(9, 14, 7), int8], Tensor[(147), float64], Tensor[(9, 13, 4), int16], Tensor[(234, 2), float64], Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) {
  %932 = fn (%var_2880: Tensor[(234, 2), float64]) -> (Tensor[(9, 14, 7), int8], Tensor[(147), float64], Tensor[(9, 13, 4), int16], Tensor[(234, 2), float64], Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) {
    %921 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
    %922 = @func_1928() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */;
    %923 = cast(%var_2880, dtype="float64") /* ty=Tensor[(234, 2), float64] */;
    %924 = reshape(%923, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), float64] */;
    %925 = @func_2567(%924) /* ty=(Tensor[(9, 13, 4), int16],) */;
    %926 = @func_1928() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */;
    %927 = %921.1;
    %928 = %922.1;
    %929 = %925.0;
    %930 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
    %931 = %926.2;
    (%927, %928, %929, %var_2880, %930, %931)
  };
  %932(%var_2891) /* ty=(Tensor[(9, 14, 7), int8], Tensor[(147), float64], Tensor[(9, 13, 4), int16], Tensor[(234, 2), float64], Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) */
}

def @func_3336() -> (Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %940 = fn () -> (Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
    %933 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %934 = %933.0;
    %935 = cast(%934, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
    %936 = @func_2153() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
    %937 = rsqrt(%935) /* ty=Tensor[(9, 14, 7), float32] */;
    %938 = @func_2590() /* ty=Tensor[(9, 14, 7), uint16] */;
    %939 = %936.1;
    (%937, %938, %939)
  };
  %940() /* ty=(Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */
}

def @func_9577() -> (Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), int8], Tensor[(14, 130), uint64]) {
  %941 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
  %942 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 130), uint64] */, dtype="uint64") /* ty=Tensor[(14, 130), uint64] */;
  %943 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 130), uint64] */, dtype="uint64") /* ty=Tensor[(14, 130), uint64] */;
  %944 = reshape(%942, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
  %945 = reshape(%943, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
  %946 = @func_1824(%944, %945) /* ty=(Tensor[(10, 13, 14), bool], Tensor[(9, 14, 7), int8]) */;
  %947 = %941.1;
  %948 = %946.1;
  (%947, %948, meta[relay.Constant][47] /* ty=Tensor[(14, 130), uint64] */)
}

def @func_6338() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 13, 4), int16], Tensor[(468), float64]) {
  %949 = @func_1685() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %950 = cast(meta[relay.Constant][48] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %951 = reshape(%950, newshape=[9, 13, 4]) /* ty=Tensor[(9, 13, 4), float64] */;
  %952 = @func_2567(%951) /* ty=(Tensor[(9, 13, 4), int16],) */;
  %953 = %949.0;
  %954 = %952.0;
  (%953, %954, meta[relay.Constant][48] /* ty=Tensor[(468), float64] */)
}

def @func_10770() -> (Tensor[(9, 14, 7), int8],) {
  %955 = @func_5198() /* ty=(Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16]) */;
  %956 = %955.0;
  (%956,)
}

def @func_3638() -> Tensor[(9, 14, 7), uint16] {
  %957 = @func_2491() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %957.0
}

def @func_11207() -> (Tensor[(9, 14, 7), uint16],) {
  %958 = @func_10460() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %959 = %958.0;
  (%959,)
}

def @func_2340() -> (Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), bool]) {
  %963 = fn () -> (Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), bool]) {
    %960 = @func_2153() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
    %961 = %960.0;
    %962 = @func_1476() /* ty=Tensor[(9, 14, 7), bool] */;
    (%961, %962)
  };
  %963() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), bool]) */
}

def @func_2643() -> Tensor[(9, 14, 7), uint16] {
  %964 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %964.0
}

def @func_5768(%var_5766: Tensor[(1008), float32]) -> (Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32]) {
  @func_5765(%var_5766) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32]) */
}

def @func_8783() -> (Tensor[(13, 6, 10), float32], Tensor[(7, 21), bool]) {
  @func_8781() /* ty=(Tensor[(13, 6, 10), float32], Tensor[(7, 21), bool]) */
}

def @func_9907() -> Tensor[(9, 14, 7), uint16] {
  @func_9905() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_9203() -> (Tensor[(9, 14, 7), bool],) {
  %967 = fn () -> (Tensor[(9, 14, 7), bool],) {
    %965 = @func_1928() /* ty=(Tensor[(9, 14, 7), bool], Tensor[(147), float64], Tensor[(147), float64]) */;
    %966 = %965.0;
    (%966,)
  };
  %967() /* ty=(Tensor[(9, 14, 7), bool],) */
}

def @func_7114() -> (Tensor[(13, 6, 10), float64],) {
  %968 = @func_5890() /* ty=(Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) */;
  %969 = %968.0;
  (%969,)
}

def @func_8684() -> (Tensor[(2, 5, 7), float32],) {
  %973 = fn () -> (Tensor[(2, 5, 7), float32],) {
    %970 = @func_4476() /* ty=Tensor[(2, 5, 7), float64] */;
    %971 = cast(%970, dtype="float32") /* ty=Tensor[(2, 5, 7), float32] */;
    %972 = log10(%971) /* ty=Tensor[(2, 5, 7), float32] */;
    (%972,)
  };
  %973() /* ty=(Tensor[(2, 5, 7), float32],) */
}

def @func_2526(%var_2517: Tensor[(9, 14, 7), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) {
  %974 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %975 = %974.0;
  %976 = cast(%975, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %977 = exp(%976) /* ty=Tensor[(9, 14, 7), float64] */;
  %978 = cast(%var_2517, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %979 = shape_of(%977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %980 = cast(%977, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
  %981 = dyn.reshape(%978, %979, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %982 = cast(%975, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %983 = shape_of(%977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %984 = cast(%977, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %985 = dyn.reshape(%982, %983, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %986 = subtract(%980, %981) /* ty=Tensor[(9, 14, 7), uint16] */;
  %987 = floor_divide(%984, %985) /* ty=Tensor[(9, 14, 7), float32] */;
  (%986, %987)
}

def @func_9799(%var_9797: Tensor[(13, 6, 10), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(13, 6, 10), float64]) {
  @func_9796(%var_9797) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(13, 6, 10), float64]) */
}

def @func_6180() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  %991 = fn () -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
    %988 = @func_4758() /* ty=Tensor[(9, 14, 7), uint16] */;
    %989 = @func_3638() /* ty=Tensor[(9, 14, 7), uint16] */;
    %990 = @func_5128() /* ty=Tensor[(9, 14, 7), uint16] */;
    (%988, %989, %990)
  };
  %991() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */
}

def @func_3885(%var_3881: Tensor[(13, 13, 6), uint8], %var_3882: Tensor[(13, 13, 6), uint8], %var_3883: Tensor[(90), float32], %var_3884: Tensor[(36), bool]) -> (Tensor[(13, 13, 6), uint8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(90), float32], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
  %1015 = fn (%var_3765: Tensor[(13, 13, 6), uint8], %var_3766: Tensor[(13, 13, 6), uint8], %var_3811: Tensor[(90), float32], %var_3819: Tensor[(36), bool]) -> (Tensor[(13, 13, 6), uint8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(90), float32], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) {
    %992 = cast(%var_3766, dtype="uint8") /* ty=Tensor[(13, 13, 6), uint8] */;
    %993 = shape_of(%var_3765, dtype="int32") /* ty=Tensor[(3), int32] */;
    %994 = cast(%var_3765, dtype="uint8") /* ty=Tensor[(13, 13, 6), uint8] */;
    %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %996 = @func_2718() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
    %997 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %998 = cast(%var_3811, dtype="float32") /* ty=Tensor[(90), float32] */;
    %999 = reshape(%998, newshape=[3, 2, 15]) /* ty=Tensor[(3, 2, 15), float32] */;
    %1000 = @func_127(%999) /* ty=(Tensor[(3, 2, 15), float64],) */;
    %1001 = cast(%var_3819, dtype="bool") /* ty=Tensor[(36), bool] */;
    %1002 = reshape(%1001, newshape=[9, 4]) /* ty=Tensor[(9, 4), bool] */;
    %1003 = @func_3094(%1002) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1287), float64], Tensor[(9, 4), bool], Tensor[(324), bool]) */;
    %1004 = @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %1005 = @func_2718() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
    %1006 = @func_2974() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) */;
    %1007 = left_shift(%994, %995) /* ty=Tensor[(13, 13, 6), uint8] */;
    %1008 = %996.1;
    %1009 = %997.0;
    %1010 = %1000.0;
    %1011 = %1003.1;
    %1012 = %1004.0;
    %1013 = %1005.0;
    %1014 = %1006.2;
    (%1007, %1008, %1009, %1010, %var_3811, %1011, %var_3819, %1012, %1013, %1014)
  };
  %1015(%var_3881, %var_3882, %var_3883, %var_3884) /* ty=(Tensor[(13, 13, 6), uint8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(90), float32], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */
}

def @func_7707(%var_7704: Tensor[(10, 28), uint16], %var_7705: Tensor[(1014), uint8], %var_7706: Tensor[(3, 30), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(3, 30), float32], Tensor[(10, 28), int32]) {
  %1035 = fn (%var_7679: Tensor[(10, 28), uint16], %var_7691: Tensor[(1014), uint8], %var_7692: Tensor[(3, 30), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(3, 30), float32], Tensor[(10, 28), int32]) {
    %1016 = @func_6179() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
    %1017 = cast(%var_7691, dtype="uint8") /* ty=Tensor[(1014), uint8] */;
    %1018 = cast(%var_7692, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
    %1019 = reshape(%1017, newshape=[1014]) /* ty=Tensor[(1014), uint8] */;
    %1020 = reshape(%1018, newshape=[1, 90]) /* ty=Tensor[(1, 90), float32] */;
    %1021 = @func_4177(%1019, %1020) /* ty=(Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(1, 90), float32]) */;
    %1022 = cast(%var_7679, dtype="uint16") /* ty=Tensor[(10, 28), uint16] */;
    %1023 = cast(%var_7679, dtype="uint16") /* ty=Tensor[(10, 28), uint16] */;
    %1024 = reshape(%1022, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), uint16] */;
    %1025 = reshape(%1023, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), uint16] */;
    %1026 = @func_4276(%1024, %1025) /* ty=(Tensor[(14, 4, 5), uint16], Tensor[(9, 14, 7), float64]) */;
    %1027 = %1026.0;
    %1028 = cast(%1027, dtype="int32") /* ty=Tensor[(14, 4, 5), int32] */;
    %1029 = shape_of(%var_7679, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1030 = cast(%var_7679, dtype="int32") /* ty=Tensor[(10, 28), int32] */;
    %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %1032 = %1016.1;
    %1033 = %1021.1;
    %1034 = subtract(%1030, %1031) /* ty=Tensor[(10, 28), int32] */;
    (%1032, %1033, %var_7691, %var_7692, %1034)
  };
  %1035(%var_7704, %var_7705, %var_7706) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(3, 30), float32], Tensor[(10, 28), int32]) */
}

def @func_7166() -> (Tensor[(9, 14, 7), float64],) {
  %1036 = @func_6382() /* ty=Tensor[(9, 14, 7), float64] */;
  (%1036,)
}

def @func_2529(%var_2527: Tensor[(9, 14, 7), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) {
  @func_2526(%var_2527) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) */
}

def @func_7872(%var_7868: Tensor[(9, 14, 7), uint16], %var_7869: Tensor[(13, 78), uint8], %var_7870: Tensor[(90), float32], %var_7871: Tensor[(36), bool]) -> (Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), uint16], Tensor[(90), float32], Tensor[(13, 78), uint8], Tensor[(90), float32], Tensor[(36), bool], Tensor[(9, 14, 7), float32]) {
  %1060 = fn (%var_7832: Tensor[(9, 14, 7), uint16], %var_7857: Tensor[(13, 78), uint8], %var_7858: Tensor[(90), float32], %var_7859: Tensor[(36), bool]) -> (Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), uint16], Tensor[(90), float32], Tensor[(13, 78), uint8], Tensor[(90), float32], Tensor[(36), bool], Tensor[(9, 14, 7), float32]) {
    %1037 = @func_6829() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) */;
    %1038 = %1037.0;
    %1039 = cast(%var_7832, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
    %1040 = shape_of(%1038, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1041 = cast(%1038, dtype="bool") /* ty=Tensor[(9, 14, 7), bool] */;
    %1042 = dyn.reshape(%1039, %1040, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1043 = @func_4198() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %1044 = cast(%var_7857, dtype="uint8") /* ty=Tensor[(13, 78), uint8] */;
    %1045 = cast(%var_7857, dtype="uint8") /* ty=Tensor[(13, 78), uint8] */;
    %1046 = cast(%var_7858, dtype="float32") /* ty=Tensor[(90), float32] */;
    %1047 = cast(%var_7859, dtype="bool") /* ty=Tensor[(36), bool] */;
    %1048 = reshape(%1044, newshape=[13, 13, 6]) /* ty=Tensor[(13, 13, 6), uint8] */;
    %1049 = reshape(%1045, newshape=[13, 13, 6]) /* ty=Tensor[(13, 13, 6), uint8] */;
    %1050 = reshape(%1046, newshape=[90]) /* ty=Tensor[(90), float32] */;
    %1051 = reshape(%1047, newshape=[36]) /* ty=Tensor[(36), bool] */;
    %1052 = @func_3880(%1048, %1049, %1050, %1051) /* ty=(Tensor[(13, 13, 6), uint8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(90), float32], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64], Tensor[(9, 14, 7), uint16]) */;
    %1053 = cast(%var_7859, dtype="bool") /* ty=Tensor[(36), bool] */;
    %1054 = reshape(%1053, newshape=[36]) /* ty=Tensor[(36), bool] */;
    %1055 = @func_4096(%1054) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(90), float32], Tensor[(3, 2, 15), float32], Tensor[(9, 4), bool], Tensor[(36), float32], Tensor[(9, 14, 7), float32]) */;
    %1056 = less(%1041, %1042) /* ty=Tensor[(9, 14, 7), bool] */;
    %1057 = %1043.0;
    %1058 = %1052.4;
    %1059 = %1055.5;
    (%1056, %1057, %1058, %var_7857, %var_7858, %var_7859, %1059)
  };
  %1060(%var_7868, %var_7869, %var_7870, %var_7871) /* ty=(Tensor[(9, 14, 7), bool], Tensor[(9, 14, 7), uint16], Tensor[(90), float32], Tensor[(13, 78), uint8], Tensor[(90), float32], Tensor[(36), bool], Tensor[(9, 14, 7), float32]) */
}

def @func_3596(%var_3594: Tensor[(9, 5, 3), int32], %var_3595: Tensor[(147), float64]) -> (Tensor[(9, 5, 3), bool], Tensor[(3, 7, 7), float64], Tensor[(147), float64]) {
  %1068 = fn (%var_3566: Tensor[(9, 5, 3), int32], %var_3575: Tensor[(147), float64]) -> (Tensor[(9, 5, 3), bool], Tensor[(3, 7, 7), float64], Tensor[(147), float64]) {
    %1061 = cast(meta[relay.Constant][49] /* ty=Tensor[(9, 5, 1), int32] */, dtype="bool") /* ty=Tensor[(9, 5, 1), bool] */;
    %1062 = cast(%var_3566, dtype="bool") /* ty=Tensor[(9, 5, 3), bool] */;
    %1063 = cast(%var_3575, dtype="float64") /* ty=Tensor[(147), float64] */;
    %1064 = reshape(%1063, newshape=[3, 7, 7]) /* ty=Tensor[(3, 7, 7), float64] */;
    %1065 = @func_891(%1064) /* ty=(Tensor[(3, 7, 7), float64], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
    %1066 = not_equal(%1061, %1062) /* ty=Tensor[(9, 5, 3), bool] */;
    %1067 = %1065.0;
    (%1066, %1067, %var_3575)
  };
  %1068(%var_3594, %var_3595) /* ty=(Tensor[(9, 5, 3), bool], Tensor[(3, 7, 7), float64], Tensor[(147), float64]) */
}

def @func_10120(%var_10118: Tensor[(12, 11, 16), uint64], %var_10119: Tensor[(12, 11, 16), uint64]) -> (Tensor[(12, 11, 16), bool],) {
  %1074 = fn (%var_10107: Tensor[(12, 11, 16), uint64], %var_10108: Tensor[(12, 11, 16), uint64]) -> (Tensor[(12, 11, 16), bool],) {
    %1069 = cast(%var_10108, dtype="bool") /* ty=Tensor[(12, 11, 16), bool] */;
    %1070 = shape_of(%var_10107, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1071 = cast(%var_10107, dtype="bool") /* ty=Tensor[(12, 11, 16), bool] */;
    %1072 = dyn.reshape(%1069, %1070, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1073 = equal(%1071, %1072) /* ty=Tensor[(12, 11, 16), bool] */;
    (%1073,)
  };
  %1074(%var_10118, %var_10119) /* ty=(Tensor[(12, 11, 16), bool],) */
}

def @func_1062(%var_1060: Tensor[(147), float64]) -> (Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float64]) {
  @func_1059(%var_1060) /* ty=(Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float64]) */
}

def @func_2975() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) {
  %1084 = fn () -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) {
    %1075 = @func_2630() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(1820), uint64], Tensor[(9, 14, 7), uint16]) */;
    %1076 = @func_1453() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
    %1077 = @func_2590() /* ty=Tensor[(9, 14, 7), uint16] */;
    %1078 = cast(%1077, dtype="uint16") /* ty=Tensor[(9, 14, 7), uint16] */;
    %1079 = reshape(%1078, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), uint16] */;
    %1080 = %1075.3;
    %1081 = %1076.1;
    %1082 = @func_2926(%1079) /* ty=Tensor[(9, 14, 7), float32] */;
    %1083 = @func_2643() /* ty=Tensor[(9, 14, 7), uint16] */;
    (%1080, %1081, %1077, %1082, %1083)
  };
  %1084() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16]) */
}

def @func_1828(%var_1826: Tensor[(10, 13, 14), uint64], %var_1827: Tensor[(10, 13, 14), uint64]) -> (Tensor[(10, 13, 14), bool], Tensor[(9, 14, 7), int8]) {
  @func_1824(%var_1826, %var_1827) /* ty=(Tensor[(10, 13, 14), bool], Tensor[(9, 14, 7), int8]) */
}

def @func_6382() -> Tensor[(9, 14, 7), float64] {
  %1085 = @func_6106() /* ty=(Tensor[(9, 14, 7), float64], Tensor[(9, ?, 4), float64]) */;
  %1085.0
}

def @func_4471() -> (Tensor[(9, 14, 7), uint16], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) {
  @func_4469() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */
}

def @func_9000(%var_8998: Tensor[(36), bool], %var_8999: Tensor[(324), bool]) -> (Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(324), bool], Tensor[(9, 14, 7), uint16]) {
  @func_8996(%var_8998, %var_8999) /* ty=(Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), uint16], Tensor[(36), bool], Tensor[(324), bool], Tensor[(9, 14, 7), uint16]) */
}

def @func_10490() -> Tensor[(13, 6, 10), float32] {
  @func_10488() /* ty=Tensor[(13, 6, 10), float32] */
}

def @func_3532(%var_3528: Tensor[(4, 3, 1), uint32], %var_3529: Tensor[(4, 3, 3), uint32], %var_3530: Tensor[(1287), float64], %var_3531: Tensor[(1, 90), float32]) -> (Tensor[(4, 3, 3), uint32], Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(4, 3, 3), float32], Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(1, 90), float32]) {
  @func_3526(%var_3528, %var_3529, %var_3530, %var_3531) /* ty=(Tensor[(4, 3, 3), uint32], Tensor[(9, 14, 7), bool], Tensor[(11, 9, 13), float64], Tensor[(1287), float64], Tensor[(4, 3, 3), float32], Tensor[(9, 14, 7), uint16], Tensor[(3, 2, 15), float64], Tensor[(1, 90), float32]) */
}

def @func_5840() -> Tensor[(9, 14, 7), uint16] {
  %1087 = fn () -> Tensor[(9, 14, 7), uint16] {
    %1086 = @func_5014() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %1086.0
  };
  %1087() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_11187() -> Tensor[(9, 14, 7), int8] {
  %1089 = fn () -> Tensor[(9, 14, 7), int8] {
    %1088 = @func_10276() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8]) */;
    %1088.1
  };
  %1089() /* ty=Tensor[(9, 14, 7), int8] */
}

def @func_9486() -> Tensor[(9, 14, 7), uint16] {
  @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_4828(%var_4826: Tensor[(1008), float32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32]) {
  @func_4825(%var_4826) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(1008), float32]) */
}

def @func_3640() -> Tensor[(9, 14, 7), uint16] {
  @func_3638() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_4200() -> (Tensor[(9, 14, 7), uint16],) {
  @func_4198() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_6830() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) {
  %1095 = fn () -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) {
    %1090 = @func_2855() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %1091 = @func_1476() /* ty=Tensor[(9, 14, 7), bool] */;
    %1092 = cast(%1091, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
    %1093 = %1090.0;
    %1094 = sinh(%1092) /* ty=Tensor[(9, 14, 7), float64] */;
    (%1093, %1094)
  };
  %1095() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float64]) */
}

def @func_10386() -> (Tensor[(9, 14, 7), uint16],) {
  %1097 = fn () -> (Tensor[(9, 14, 7), uint16],) {
    %1096 = @func_7152() /* ty=Tensor[(9, 14, 7), uint16] */;
    (%1096,)
  };
  %1097() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_3425(%var_3423: Tensor[(9, 14, 7), uint16]) -> (Tensor[(9, 14, 7), float32],) {
  @func_3422(%var_3423) /* ty=(Tensor[(9, 14, 7), float32],) */
}

def @func_7336() -> (Tensor[(13, 6, 10), float64], Tensor[(1, 90), float32], Tensor[(1014), uint8], Tensor[(90), float32]) {
  %1098 = @func_5890() /* ty=(Tensor[(13, 6, 10), float64], Tensor[(9, 14, 7), float64]) */;
  %1099 = cast(meta[relay.Constant][50] /* ty=Tensor[(1014), uint8] */, dtype="uint8") /* ty=Tensor[(1014), uint8] */;
  %1100 = cast(meta[relay.Constant][51] /* ty=Tensor[(90), float32] */, dtype="float32") /* ty=Tensor[(90), float32] */;
  %1101 = reshape(%1099, newshape=[1014]) /* ty=Tensor[(1014), uint8] */;
  %1102 = reshape(%1100, newshape=[1, 90]) /* ty=Tensor[(1, 90), float32] */;
  %1103 = @func_4177(%1101, %1102) /* ty=(Tensor[(9, ?, 4), float64], Tensor[(9, 14, 7), uint16], Tensor[(1014), uint8], Tensor[(1, 90), float32]) */;
  %1104 = %1098.0;
  %1105 = %1103.3;
  (%1104, %1105, meta[relay.Constant][50] /* ty=Tensor[(1014), uint8] */, meta[relay.Constant][51] /* ty=Tensor[(90), float32] */)
}

def @func_5327(%var_5326: Tensor[(147, 1), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(147, 1), float64], Tensor[(9, 14, 7), uint16]) {
  %1113 = fn (%var_5296: Tensor[(147, 1), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(147, 1), float64], Tensor[(9, 14, 7), uint16]) {
    %1106 = cast(%var_5296, dtype="float64") /* ty=Tensor[(147, 1), float64] */;
    %1107 = reshape(%1106, newshape=[21, 7]) /* ty=Tensor[(21, 7), float64] */;
    %1108 = @func_2392(%1107) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(21, 7), float64]) */;
    %1109 = @func_5277() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %1110 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
    %1111 = %1108.0;
    %1112 = %1109.0;
    (%1110, %1111, %var_5296, %1112)
  };
  %1113(%var_5326) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(147, 1), float64], Tensor[(9, 14, 7), uint16]) */
}

def @func_10772() -> (Tensor[(9, 14, 7), int8],) {
  @func_10770() /* ty=(Tensor[(9, 14, 7), int8],) */
}

def @func_11146() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  @func_11144() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */
}

def @func_7448() -> (Tensor[(9, 14, 7), float32],) {
  @func_7446() /* ty=(Tensor[(9, 14, 7), float32],) */
}

def @func_9876(%var_9875: Tensor[(21, 7), float64]) -> (Tensor[(21, 7), uint32],) {
  %1121 = fn (%var_9869: Tensor[(21, 7), float64]) -> (Tensor[(21, 7), uint32],) {
    %1114 = @func_9498() /* ty=(Tensor[(21, 7), float64],) */;
    %1115 = %1114.0;
    %1116 = cast(%var_9869, dtype="uint32") /* ty=Tensor[(21, 7), uint32] */;
    %1117 = shape_of(%1115, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1118 = cast(%1115, dtype="uint32") /* ty=Tensor[(21, 7), uint32] */;
    %1119 = dyn.reshape(%1116, %1117, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %1120 = add(%1118, %1119) /* ty=Tensor[(21, 7), uint32] */;
    (%1120,)
  };
  %1121(%var_9875) /* ty=(Tensor[(21, 7), uint32],) */
}

def @func_8863() -> Tensor[(9, 14, 7), uint16] {
  %1122 = fn () -> Tensor[(9, 14, 7), uint16] {
    @func_5839() /* ty=Tensor[(9, 14, 7), uint16] */
  };
  %1122() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_9089(%var_9087: Tensor[(1, 1820), uint64]) -> (Tensor[(13, 6, 10), float64], Tensor[(?, 1820), float64], Tensor[(13, 6, 10), int8]) {
  @func_9086(%var_9087) /* ty=(Tensor[(13, 6, 10), float64], Tensor[(?, 1820), float64], Tensor[(13, 6, 10), int8]) */
}

def @main(%var_11467: Tensor[(1, 4, 12), int64]) -> (Tensor[(9, 13, 4), int16], Tensor[(?, 4, 12), bool]) {
  %1123 = @func_6340() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 13, 4), int16], Tensor[(468), float64]) */;
  %1124 = cast(-8 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %1125 = cast(%var_11467, dtype="bool") /* ty=Tensor[(1, 4, 12), bool] */;
  %1126 = greater(%1124, %1125) /* ty=Tensor[(1, 4, 12), bool] */;
  %1127 = cast(%1126, dtype="float64") /* ty=Tensor[(1, 4, 12), float64] */;
  %1128 = log2(%1127) /* ty=Tensor[(1, 4, 12), float64] */;
  %1129 = cast(%1126, dtype="bool") /* ty=Tensor[(1, 4, 12), bool] */;
  %1130 = shape_of(%1128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1131 = cast(%1128, dtype="bool") /* ty=Tensor[(1, 4, 12), bool] */;
  %1132 = dyn.reshape(%1129, %1130, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1133 = %1123.1;
  %1134 = less_equal(%1131, %1132) /* ty=Tensor[(?, 4, 12), bool] */;
  (%1133, %1134)
}

def @func_7664(%var_7662: Tensor[(147), float64], %var_7663: Tensor[(147), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float32], Tensor[(9, 14, 7), uint16]) {
  @func_7660(%var_7662, %var_7663) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32], Tensor[(11, 9, 13), float64], Tensor[(147), float32], Tensor[(9, 14, 7), uint16]) */
}

def @func_4583() -> Tensor[(9, 14, 7), uint16] {
  %1135 = @func_4425() /* ty=(Tensor[(9, 14, 7), uint16],) */;
  %1135.0
}

def @func_4348() -> Tensor[(9, 14, 7), uint16] {
  @func_4346() /* ty=Tensor[(9, 14, 7), uint16] */
}

def @func_5933(%var_5932: Tensor[(21, 7), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(3, 7, 7), float64], Tensor[(21, 7), float64]) {
  %1141 = fn (%var_5916: Tensor[(21, 7), float64]) -> (Tensor[(9, 14, 7), uint16], Tensor[(3, 7, 7), float64], Tensor[(21, 7), float64]) {
    %1136 = cast(%var_5916, dtype="float64") /* ty=Tensor[(21, 7), float64] */;
    %1137 = reshape(%1136, newshape=[3, 7, 7]) /* ty=Tensor[(3, 7, 7), float64] */;
    %1138 = @func_891(%1137) /* ty=(Tensor[(3, 7, 7), float64], Tensor[(11, 9, 13), float64], Tensor[(1287), float64]) */;
    %1139 = @func_1174() /* ty=Tensor[(9, 14, 7), uint16] */;
    %1140 = %1138.0;
    (%1139, %1140, %var_5916)
  };
  %1141(%var_5932) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(3, 7, 7), float64], Tensor[(21, 7), float64]) */
}

def @func_8094() -> Tensor[(9, 14, 7), float32] {
  %1142 = fn () -> Tensor[(9, 14, 7), float32] {
    @func_4220() /* ty=Tensor[(9, 14, 7), float32] */
  };
  %1142() /* ty=Tensor[(9, 14, 7), float32] */
}

def @func_10210() -> Tensor[(21, 7), float64] {
  %1144 = fn () -> Tensor[(21, 7), float64] {
    %1143 = @func_9498() /* ty=(Tensor[(21, 7), float64],) */;
    %1143.0
  };
  %1144() /* ty=Tensor[(21, 7), float64] */
}

def @func_2630() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), int8], Tensor[(1820), uint64], Tensor[(9, 14, 7), uint16]) {
  %1145 = @func_1164() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %1146 = cast(meta[relay.Constant][52] /* ty=Tensor[(1820), uint64] */, dtype="uint64") /* ty=Tensor[(1820), uint64] */;
  %1147 = cast(meta[relay.Constant][52] /* ty=Tensor[(1820), uint64] */, dtype="uint64") /* ty=Tensor[(1820), uint64] */;
  %1148 = reshape(%1146, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
  %1149 = reshape(%1147, newshape=[10, 13, 14]) /* ty=Tensor[(10, 13, 14), uint64] */;
  %1150 = @func_1824(%1148, %1149) /* ty=(Tensor[(10, 13, 14), bool], Tensor[(9, 14, 7), int8]) */;
  %1151 = %1145.1;
  %1152 = cast(%1151, dtype="float64") /* ty=Tensor[(9, 14, 7), float64] */;
  %1153 = reshape(%1152, newshape=[9, 14, 7]) /* ty=Tensor[(9, 14, 7), float64] */;
  %1154 = @func_2526(%1153) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), float32]) */;
  %1155 = %1150.1;
  %1156 = %1154.0;
  (%1151, %1155, meta[relay.Constant][52] /* ty=Tensor[(1820), uint64] */, %1156)
}

def @func_6487() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(9, 14, 7), uint16]) {
  @func_6485() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(9, 14, 7), uint16]) */
}

def @func_9443(%var_9438: Tensor[(9, 11, 4), float64]) -> (Tensor[(9, 14, 7), bool], Tensor[(9, 11, 4), int32]) {
  %1157 = @func_2379() /* ty=(Tensor[(9, ?, 4), float64],) */;
  %1158 = %1157.0;
  %1159 = cast(%1158, dtype="int32") /* ty=Tensor[(9, ?, 4), int32] */;
  %1160 = cast(%var_9438, dtype="int32") /* ty=Tensor[(9, 11, 4), int32] */;
  %1161 = @func_1476() /* ty=Tensor[(9, 14, 7), bool] */;
  %1162 = multiply(%1159, %1160) /* ty=Tensor[(9, 11, 4), int32] */;
  (%1161, %1162)
}

def @func_4643(%var_4641: Tensor[(432), uint32]) -> (Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(468), float64], Tensor[(9, 4, 12), int64], Tensor[(432), uint32], Tensor[(9, 14, 7), float64]) {
  @func_4640(%var_4641) /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(468), float64], Tensor[(468), float64], Tensor[(9, 4, 12), int64], Tensor[(432), uint32], Tensor[(9, 14, 7), float64]) */
}

def @func_9031() -> (Tensor[(9, 14, 7), uint16],) {
  @func_9029() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_4425() -> (Tensor[(9, 14, 7), uint16],) {
  %1163 = @func_993() /* ty=Tensor[(9, 14, 7), uint16] */;
  (%1163,)
}

def @func_7427() -> (Tensor[(9, 14, 7), uint16],) {
  %1165 = fn () -> (Tensor[(9, 14, 7), uint16],) {
    %1164 = @func_4583() /* ty=Tensor[(9, 14, 7), uint16] */;
    (%1164,)
  };
  %1165() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_6340() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 13, 4), int16], Tensor[(468), float64]) {
  @func_6338() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 13, 4), int16], Tensor[(468), float64]) */
}

def @func_4690(%var_4684: Tensor[(468), float64]) -> (Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), int8], Tensor[(468), float64]) {
  %1166 = @func_4220() /* ty=Tensor[(9, 14, 7), float32] */;
  %1167 = cast(meta[relay.Constant][53] /* ty=Tensor[(9, 14, 7), float32] */, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %1168 = shape_of(%1166, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1169 = cast(%1166, dtype="float32") /* ty=Tensor[(9, 14, 7), float32] */;
  %1170 = dyn.reshape(%1167, %1168, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1171 = @func_3335() /* ty=(Tensor[(9, 14, 7), float32], Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */;
  %1172 = cast(%var_4684, dtype="float64") /* ty=Tensor[(468), float64] */;
  %1173 = reshape(%1172, newshape=[234, 2]) /* ty=Tensor[(234, 2), float64] */;
  %1174 = @func_2890(%1173) /* ty=(Tensor[(9, 14, 7), int8], Tensor[(147), float64], Tensor[(9, 13, 4), int16], Tensor[(234, 2), float64], Tensor[(9, 14, 7), uint16], Tensor[(147), float64]) */;
  %1175 = floor_mod(%1169, %1170) /* ty=Tensor[(9, 14, 7), float32] */;
  %1176 = %1171.0;
  %1177 = %1174.0;
  (%1175, %1176, %1177, %var_4684)
}

def @func_956() -> (Tensor[(9, 14, 7), uint16],) {
  @func_954() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_2856() -> (Tensor[(9, 14, 7), uint16],) {
  %1180 = fn () -> (Tensor[(9, 14, 7), uint16],) {
    %1178 = @func_2491() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %1179 = %1178.0;
    (%1179,)
  };
  %1180() /* ty=(Tensor[(9, 14, 7), uint16],) */
}

def @func_10895() -> (Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) {
  @func_10893() /* ty=(Tensor[(9, 14, 7), uint16], Tensor[(9, 14, 7), uint16]) */
}

def @func_275(%var_272: Tensor[(11, 9, 13), float64]) -> (Tensor[(11, 9, 13), float64],) {
  %1181 = cast(%var_272, dtype="float64") /* ty=Tensor[(11, 9, 13), float64] */;
  %1182 = sinh(%1181) /* ty=Tensor[(11, 9, 13), float64] */;
  (%1182,)
}

def @func_5983() -> Tensor[(9, 14, 7), uint16] {
  %1184 = fn () -> Tensor[(9, 14, 7), uint16] {
    %1183 = @func_4375() /* ty=(Tensor[(9, 14, 7), uint16],) */;
    %1183.0
  };
  %1184() /* ty=Tensor[(9, 14, 7), uint16] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen581/build/output.py", line 3782, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:35:27] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

