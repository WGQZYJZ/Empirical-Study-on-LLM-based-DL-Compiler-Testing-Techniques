==========mod==========
#[version = "0.0.5"]
def @func_8407(%var_8363: Tensor[(1001), float32], %var_8394: Tensor[(3840), float64]) -> (Tensor[(1001), bool], Tensor[(16, 15, 16), float64], Tensor[(3840), float64]) {
  %0 = @func_4045() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float64], Tensor[(1600), bool]) */;
  %1 = %0.3;
  %2 = cast(%var_8363, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(1), int32] */;
  %4 = cast(%1, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?), bool] */;
  %6 = cast(%var_8394, dtype="float64") /* ty=Tensor[(3840), float64] */;
  %7 = cast(%var_8394, dtype="float64") /* ty=Tensor[(3840), float64] */;
  %8 = reshape(%6, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float64] */;
  %9 = reshape(%7, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float64] */;
  %10 = @func_5403(%8, %9) /* ty=(Tensor[(16, 15, 16), uint32], Tensor[(16, 15, 16), float64]) */;
  %11 = logical_and(%4, %5) /* ty=Tensor[(1001), bool] */;
  %12 = %10.1;
  (%11, %12, %var_8394)
}

def @func_1800(%var_1778: Tensor[(1001), float32]) -> (Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(1001), float32], Tensor[(10, 16, 10), bool]) {
  %13 = @func_1281() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %14 = cast(%var_1778, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %15 = reshape(%14, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
  %16 = @func_1553(%15) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) */;
  %17 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %18 = %13.4;
  %19 = %16.3;
  %20 = %17.0;
  (%18, %19, %var_1778, %20)
}

def @func_725(%var_712: Tensor[(11, 7, 13), float32], %var_716: Tensor[(1600), bool]) -> (Tensor[(11, 7, 13), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) {
  %21 = cast(%var_712, dtype="float32") /* ty=Tensor[(11, 7, 13), float32] */;
  %22 = cast(%var_716, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %23 = cast(%var_716, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %24 = reshape(%22, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %25 = reshape(%23, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %26 = asin(%21) /* ty=Tensor[(11, 7, 13), float32] */;
  %27 = @func_469(%24, %25) /* ty=Tensor[(10, 16, 10), bool] */;
  (%26, %27, %var_716)
}

def @func_7422(%var_7346: Tensor[(960, 4), float64]) -> (Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(960, 4), uint32], Tensor[(13, 7, 16), float64], Tensor[(100), uint64]) {
  %28 = @func_3321() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) */;
  %29 = cast(%var_7346, dtype="float64") /* ty=Tensor[(960, 4), float64] */;
  %30 = cast(%var_7346, dtype="float64") /* ty=Tensor[(960, 4), float64] */;
  %31 = reshape(%29, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float64] */;
  %32 = reshape(%30, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float64] */;
  %33 = @func_5403(%31, %32) /* ty=(Tensor[(16, 15, 16), uint32], Tensor[(16, 15, 16), float64]) */;
  %34 = %33.0;
  %35 = cast(%34, dtype="uint32") /* ty=Tensor[(16, 15, 16), uint32] */;
  %36 = shape_of(%var_7346, dtype="int32") /* ty=Tensor[(2), int32] */;
  %37 = cast(%var_7346, dtype="uint32") /* ty=Tensor[(960, 4), uint32] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %39 = @func_7252() /* ty=(Tensor[(1001), float32], Tensor[(13, 77), float32], Tensor[(13, 7, 16), float64], Tensor[(14, 16, 15), int8]) */;
  %40 = @func_2500() /* ty=(Tensor[(14, 16, 15), float64], Tensor[(10, 16, 10), float64], Tensor[(100), uint64], Tensor[(10, 16, 10), bool], Tensor[(3584), float64]) */;
  %41 = @func_3080() /* ty=Tensor[(10, 16, 10), float64] */;
  %42 = %28.1;
  %43 = logical_xor(%37, %38) /* ty=Tensor[(960, 4), uint32] */;
  %44 = %39.2;
  %45 = %40.2;
  (%41, %42, %43, %44, %45)
}

def @func_4924() -> (Tensor[(10, 16, 10), float64], Tensor[(1600), bool]) {
  %46 = @func_4384() /* ty=Tensor[(10, 16, 10), float64] */;
  %47 = cast(%46, dtype="int16") /* ty=Tensor[(10, 16, 10), int16] */;
  %48 = reshape(%47, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
  %49 = @func_1828(%48) /* ty=(Tensor[(1600), bool],) */;
  %50 = %49.0;
  (%46, %50)
}

def @func_7605(%var_7559: Tensor[(15, 1, 12), float32], %var_7578: Tensor[(1001), float32]) -> (Tensor[(15, 1, 12), float32], Tensor[(10, 16, 10), bool], Tensor[(1001), float32], Tensor[(10, 16, 10), float32]) {
  %51 = cast(%var_7559, dtype="float32") /* ty=Tensor[(15, 1, 12), float32] */;
  %52 = cast(%var_7578, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %53 = reshape(%52, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
  %54 = @func_1553(%53) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) */;
  %55 = @func_6237() /* ty=(Tensor[(10, 16, 10), float32],) */;
  %56 = rsqrt(%51) /* ty=Tensor[(15, 1, 12), float32] */;
  %57 = %54.1;
  %58 = %55.0;
  (%56, %57, %var_7578, %58)
}

def @func_4757() -> (Tensor[(1600), int16],) {
  %59 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
  %60 = %59.1;
  (%60,)
}

def @func_4518() -> (Tensor[(10, 16, 10), float64], Tensor[(15, 9, 11), float32]) {
  %61 = @func_1997() /* ty=(Tensor[(15, 9, 11), float32],) */;
  %62 = @func_4054() /* ty=Tensor[(10, 16, 10), float64] */;
  %63 = %61.0;
  (%62, %63)
}

def @func_5952() -> (Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) {
  %64 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %65 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
  %66 = @func_2900() /* ty=(Tensor[(1600), int16], Tensor[(1001), float32], Tensor[(1001), float32]) */;
  %67 = %64.0;
  %68 = @func_4384() /* ty=Tensor[(10, 16, 10), float64] */;
  %69 = %65.3;
  %70 = %66.2;
  (%67, %68, %69, %70)
}

def @func_8836() -> (Tensor[(10, 2, 5), uint64],) {
  %71 = @func_8702() /* ty=(Tensor[(10, 2, 5), uint64],) */;
  %72 = %71.0;
  (%72,)
}

def @func_3142(%var_3120: Tensor[(8, 13, 2), float32]) -> (Tensor[(8, 13, 2), float32], Tensor[(8, 13, 2), float32]) {
  %73 = cast(-3.74971f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %74 = cast(%var_3120, dtype="float32") /* ty=Tensor[(8, 13, 2), float32] */;
  %75 = cast(%var_3120, dtype="float32") /* ty=Tensor[(8, 13, 2), float32] */;
  %76 = mod(%73, %74) /* ty=Tensor[(8, 13, 2), float32] */;
  %77 = rsqrt(%75) /* ty=Tensor[(8, 13, 2), float32] */;
  (%76, %77)
}

def @func_5008() -> (Tensor[(1001), uint16],) {
  %78 = @func_3722() /* ty=Tensor[(1001), float64] */;
  %79 = cast(meta[relay.Constant][0] /* ty=Tensor[(1001), float64] */, dtype="uint16") /* ty=Tensor[(1001), uint16] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(1), int32] */;
  %81 = cast(%78, dtype="uint16") /* ty=Tensor[(1001), uint16] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %83 = multiply(%81, %82) /* ty=Tensor[(1001), uint16] */;
  (%83,)
}

def @func_1634(%var_1627: Tensor[(14, 16, 15), float32]) -> Tensor[(14, 16, 15), bool] {
  %84 = @func_1106() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), float64], Tensor[(1600), bool]) */;
  %85 = %84.1;
  %86 = cast(%var_1627, dtype="bool") /* ty=Tensor[(14, 16, 15), bool] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%85, dtype="bool") /* ty=Tensor[(14, 16, 15), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%88, %89) /* ty=Tensor[(14, 16, 15), bool] */
}

def @func_5337() -> (Tensor[(10, 16, 10), float32],) {
  %90 = @func_4175() /* ty=Tensor[(10, 16, 10), float32] */;
  (%90,)
}

def @func_2900() -> (Tensor[(1600), int16], Tensor[(1001), float32], Tensor[(1001), float32]) {
  %91 = @func_1725() /* ty=(Tensor[(1600), int16],) */;
  %92 = cast(meta[relay.Constant][1] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %93 = reshape(%92, newshape=[1001]) /* ty=Tensor[(1001), float32] */;
  %94 = @func_1800(%93) /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(1001), float32], Tensor[(10, 16, 10), bool]) */;
  %95 = %91.0;
  %96 = %94.2;
  (%95, %96, meta[relay.Constant][1] /* ty=Tensor[(1001), float32] */)
}

def @func_2771(%var_2763: Tensor[(5, 1, 5), float32]) -> (Tensor[(5, 1, 5), float32],) {
  %97 = cast(%var_2763, dtype="float32") /* ty=Tensor[(5, 1, 5), float32] */;
  %98 = erf(%97) /* ty=Tensor[(5, 1, 5), float32] */;
  (%98,)
}

def @func_804() -> (Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) {
  %99 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %100 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %101 = %99.1;
  %102 = %100.1;
  (%101, %102)
}

def @func_4806() -> Tensor[(10, 16, 10), float64] {
  @func_3080() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_4299(%var_4276: Tensor[(9, 16, 3), float64]) -> (Tensor[(9, 16, 3), bool], Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), float64]) {
  %103 = cast(%var_4276, dtype="float64") /* ty=Tensor[(9, 16, 3), float64] */;
  %104 = exp(%103) /* ty=Tensor[(9, 16, 3), float64] */;
  %105 = cast(%104, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %106 = shape_of(%var_4276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_4276, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %109 = @func_3176() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(1001), float64]) */;
  %110 = not_equal(%107, %108) /* ty=Tensor[(9, 16, 3), bool] */;
  %111 = %109.0;
  %112 = @func_1478() /* ty=Tensor[(10, 16, 10), float64] */;
  (%110, %111, %112)
}

def @func_4103() -> (Tensor[(1001), float64],) {
  %113 = @func_3722() /* ty=Tensor[(1001), float64] */;
  (%113,)
}

def @func_7051() -> Tensor[(10, 16, 10), bool] {
  %114 = @func_6759() /* ty=(Tensor[(10, 16, 10), bool],) */;
  %114.0
}

def @func_8917(%var_8912: Tensor[(8, 14, 15), float64], %var_8913: Tensor[(8, 14, 15), float64]) -> Tensor[(8, 14, 15), bool] {
  %115 = cast(%var_8913, dtype="bool") /* ty=Tensor[(8, 14, 15), bool] */;
  %116 = shape_of(%var_8912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%var_8912, dtype="bool") /* ty=Tensor[(8, 14, 15), bool] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%117, %118) /* ty=Tensor[(8, 14, 15), bool] */
}

def @func_8000() -> Tensor[(1600), bool] {
  %119 = @func_1106() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), float64], Tensor[(1600), bool]) */;
  %119.4
}

def @func_2680() -> (Tensor[(1001), int64], Tensor[(1001), float32]) {
  %120 = @func_2250() /* ty=(Tensor[(1001), float32],) */;
  %121 = %120.0;
  %122 = cast(meta[relay.Constant][2] /* ty=Tensor[(1001), float32] */, dtype="int64") /* ty=Tensor[(1001), int64] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(1), int32] */;
  %124 = cast(%121, dtype="int64") /* ty=Tensor[(1001), int64] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?), int64] */;
  %126 = cast(%121, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %127 = bitwise_xor(%124, %125) /* ty=Tensor[(1001), int64] */;
  %128 = acos(%126) /* ty=Tensor[(1001), float32] */;
  (%127, %128)
}

def @func_3928() -> Tensor[(1001), float32] {
  %129 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
  %129.2
}

def @func_9702(%var_9691: Tensor[(1600), bool]) -> (Tensor[(1600), int64], Tensor[(1001), float64], Tensor[(13, 77), float32], Tensor[(1456), float64]) {
  %130 = @func_4924() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(1600), bool]) */;
  %131 = %130.1;
  %132 = cast(%var_9691, dtype="int64") /* ty=Tensor[(1600), int64] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(1), int32] */;
  %134 = cast(%131, dtype="int64") /* ty=Tensor[(1600), int64] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?), int64] */;
  %136 = @func_5886() /* ty=(Tensor[(3, 11, 11), int32], Tensor[(1001), float64], Tensor[(3, 11, 11), float32]) */;
  %137 = cast(meta[relay.Constant][3] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %138 = cast(meta[relay.Constant][3] /* ty=Tensor[(1456), float64] */, dtype="uint32") /* ty=Tensor[(1456), uint32] */;
  %139 = reshape(%137, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), float64] */;
  %140 = reshape(%138, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), uint32] */;
  %141 = @func_3408(%139, %140) /* ty=(Tensor[(13, 7, 16), bool], Tensor[(13, 77), float32]) */;
  %142 = bitwise_xor(%134, %135) /* ty=Tensor[(1600), int64] */;
  %143 = %136.1;
  %144 = %141.1;
  (%142, %143, %144, meta[relay.Constant][3] /* ty=Tensor[(1456), float64] */)
}

def @func_5403(%var_5377: Tensor[(16, 15, 16), float64], %var_5395: Tensor[(16, 15, 16), float64]) -> (Tensor[(16, 15, 16), uint32], Tensor[(16, 15, 16), float64]) {
  %145 = cast(%var_5377, dtype="float64") /* ty=Tensor[(16, 15, 16), float64] */;
  %146 = asin(%145) /* ty=Tensor[(16, 15, 16), float64] */;
  %147 = cast(%var_5395, dtype="uint32") /* ty=Tensor[(16, 15, 16), uint32] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="uint32") /* ty=Tensor[(16, 15, 16), uint32] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %151 = cast(%146, dtype="float64") /* ty=Tensor[(16, 15, 16), float64] */;
  %152 = right_shift(%149, %150) /* ty=Tensor[(16, 15, 16), uint32] */;
  %153 = log(%151) /* ty=Tensor[(16, 15, 16), float64] */;
  (%152, %153)
}

def @func_5577() -> (Tensor[(1600), bool], Tensor[(1600), float32], Tensor[(13, 77), int8], Tensor[(1001), float32], Tensor[(1600), bool]) {
  %154 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %155 = cast(meta[relay.Constant][4] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %156 = reshape(%155, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
  %157 = @func_3230() /* ty=(Tensor[(1600), bool],) */;
  %158 = %154.1;
  %159 = @func_4774() /* ty=Tensor[(1600), float32] */;
  %160 = @func_4625(%156) /* ty=Tensor[(13, 77), int8] */;
  %161 = %157.0;
  (%158, %159, %160, meta[relay.Constant][4] /* ty=Tensor[(1001), float32] */, %161)
}

def @main(%var_10540: Tensor[(1, 5, 6), float32], %var_10549: Tensor[(5, 5, 6), float32]) -> (Tensor[(5, 5, 6), float32], Tensor[(?, 5, 6), bool]) {
  %162 = cast(%var_10540, dtype="float32") /* ty=Tensor[(1, 5, 6), float32] */;
  %163 = erf(%162) /* ty=Tensor[(1, 5, 6), float32] */;
  %164 = cast(%163, dtype="float32") /* ty=Tensor[(1, 5, 6), float32] */;
  %165 = cast(%var_10549, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %166 = cast(%var_10540, dtype="bool") /* ty=Tensor[(1, 5, 6), bool] */;
  %167 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%163, dtype="bool") /* ty=Tensor[(1, 5, 6), bool] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %170 = mod(%164, %165) /* ty=Tensor[(5, 5, 6), float32] */;
  %171 = greater_equal(%168, %169) /* ty=Tensor[(?, 5, 6), bool] */;
  (%170, %171)
}

def @func_1007() -> (Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) {
  %172 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %173 = %172.0;
  %174 = @func_804() /* ty=(Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) */;
  %175 = %174.0;
  %176 = cast(%175, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %177 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%173, dtype="float64") /* ty=Tensor[(10, 16, 10), float64] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %180 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %181 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
  %182 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
  %183 = %182.0;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(13, 7, 16), float32] */;
  %185 = erf(%184) /* ty=Tensor[(13, 7, 16), float32] */;
  %186 = cast(%185, dtype="float32") /* ty=Tensor[(13, 7, 16), float32] */;
  %187 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %188 = floor_mod(%178, %179) /* ty=Tensor[(10, 16, 10), float64] */;
  %189 = %180.0;
  %190 = %181.1;
  %191 = log(%186) /* ty=Tensor[(13, 7, 16), float32] */;
  %192 = %187.1;
  (%188, %189, %190, %191, %192)
}

def @func_2250() -> (Tensor[(1001), float32],) {
  %193 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %194 = %193.3;
  %195 = cast(%194, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %196 = sinh(%195) /* ty=Tensor[(1001), float64] */;
  %197 = cast(%196, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %198 = asin(%197) /* ty=Tensor[(1001), float64] */;
  %199 = cast(%196, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(1), int32] */;
  %201 = cast(%198, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?), float32] */;
  %203 = floor_mod(%201, %202) /* ty=Tensor[(1001), float32] */;
  (%203,)
}

def @func_1725() -> (Tensor[(1600), int16],) {
  %204 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
  %205 = %204.1;
  (%205,)
}

def @func_2630(%var_2608: Tensor[(1600), bool]) -> (Tensor[(15, 9, 11), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) {
  %206 = @func_1997() /* ty=(Tensor[(15, 9, 11), float32],) */;
  %207 = cast(%var_2608, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %208 = cast(%var_2608, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %209 = reshape(%207, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %210 = reshape(%208, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %211 = %206.0;
  %212 = @func_469(%209, %210) /* ty=Tensor[(10, 16, 10), bool] */;
  (%211, %212, %var_2608)
}

def @func_10256(%var_10248: Tensor[(3360), float32]) -> (Tensor[(1001), int64], Tensor[(1600), bool], Tensor[(3360), float32]) {
  %213 = @func_8510() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(15, 9, 11), float32], Tensor[(1001), int64], Tensor[(10, 16, 10), float64], Tensor[(1600), int16]) */;
  %214 = cast(%var_10248, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %215 = reshape(%214, newshape=[840, 4]) /* ty=Tensor[(840, 4), float32] */;
  %216 = @func_7855(%215) /* ty=(Tensor[(15, 9, 11), float32], Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(14, 16, 15), bool], Tensor[(840, 4), bool]) */;
  %217 = %213.2;
  %218 = %216.2;
  (%217, %218, %var_10248)
}

def @func_7766() -> (Tensor[(1600), int16], Tensor[(1001), float64]) {
  %219 = @func_1725() /* ty=(Tensor[(1600), int16],) */;
  %220 = @func_5886() /* ty=(Tensor[(3, 11, 11), int32], Tensor[(1001), float64], Tensor[(3, 11, 11), float32]) */;
  %221 = %219.0;
  %222 = %220.1;
  (%221, %222)
}

def @func_5982(%var_5969: Tensor[(120), float32]) -> (Tensor[(1600), float32], Tensor[(4, 3, 10), float32], Tensor[(120), float32]) {
  %223 = cast(%var_5969, dtype="float32") /* ty=Tensor[(120), float32] */;
  %224 = reshape(%223, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), float32] */;
  %225 = @func_5843(%224) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(1001), float32]) */;
  %226 = @func_2152() /* ty=Tensor[(1600), float32] */;
  %227 = %225.0;
  (%226, %227, %var_5969)
}

def @func_5411() -> Tensor[(1001), float64] {
  %228 = @func_4103() /* ty=(Tensor[(1001), float64],) */;
  %228.0
}

def @func_4175() -> Tensor[(10, 16, 10), float32] {
  %229 = @func_3106() /* ty=(Tensor[(10, 16, 10), float32],) */;
  %229.0
}

def @func_8166() -> (Tensor[(10, 16, 10), bool], Tensor[(1001), uint16], Tensor[(10, 16, 10), float64]) {
  %230 = @func_1930() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), bool], Tensor[(10, 16, 10), bool]) */;
  %231 = @func_5008() /* ty=(Tensor[(1001), uint16],) */;
  %232 = @func_4431() /* ty=(Tensor[(10, 16, 10), float64],) */;
  %233 = %230.2;
  %234 = %231.0;
  %235 = %232.0;
  (%233, %234, %235)
}

def @func_1678() -> (Tensor[(1600), bool],) {
  %236 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
  %237 = %236.0;
  (%237,)
}

def @func_1478() -> Tensor[(10, 16, 10), float64] {
  %238 = @func_1160() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool]) */;
  %239 = %238.1;
  %240 = cast(%239, dtype="float64") /* ty=Tensor[(10, 16, 10), float64] */;
  rsqrt(%240) /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_7162() -> Tensor[(14, 16, 15), int8] {
  %241 = @func_1930() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), bool], Tensor[(10, 16, 10), bool]) */;
  %242 = %241.1;
  %243 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 16, 15), bool] */, dtype="int8") /* ty=Tensor[(14, 16, 15), int8] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%242, dtype="int8") /* ty=Tensor[(14, 16, 15), int8] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  logical_xor(%245, %246) /* ty=Tensor[(14, 16, 15), int8] */
}

def @func_7552() -> Tensor[(1001), float64] {
  @func_5411() /* ty=Tensor[(1001), float64] */
}

def @func_10213() -> Tensor[(1001), float32] {
  %247 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %247.3
}

def @func_10102() -> Tensor[(10, 16, 10), float64] {
  @func_1478() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_1997() -> (Tensor[(15, 9, 11), float32],) {
  %248 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 9, 11), float32] */, dtype="float32") /* ty=Tensor[(15, 9, 11), float32] */;
  %249 = log10(%248) /* ty=Tensor[(15, 9, 11), float32] */;
  (%249,)
}

def @func_9227() -> (Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1600), float32]) {
  %250 = @func_6967() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(13, 7, 16), float64]) */;
  %251 = @func_4045() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float64], Tensor[(1600), bool]) */;
  %252 = %250.2;
  %253 = %251.2;
  %254 = @func_4774() /* ty=Tensor[(1600), float32] */;
  (%252, %253, %254)
}

def @func_6185() -> (Tensor[(1001), float32],) {
  %255 = @func_5952() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) */;
  %256 = %255.3;
  (%256,)
}

def @func_9600() -> Tensor[(10, 16, 10), float32] {
  %257 = @func_2724() /* ty=(Tensor[(1001), float32], Tensor[(2, 800), bool], Tensor[(10, 16, 10), float32]) */;
  %257.2
}

def @func_9134() -> (Tensor[(1600), bool],) {
  %258 = @func_5488() /* ty=(Tensor[(1600), bool], Tensor[(5, 1, 5), float32], Tensor[(5, 5), float32], Tensor[(1600), uint64]) */;
  %259 = %258.0;
  (%259,)
}

def @func_9833(%var_9770: Tensor[(2, 800), float64], %var_9813: Tensor[(5, 14, 5), float32]) -> (Tensor[(1001), float64], Tensor[(2, 800), bool], Tensor[(1600), int16], Tensor[(1001), float64], Tensor[(5, 14, 5), bool]) {
  %260 = @func_9661() /* ty=(Tensor[(1001), float32], Tensor[(2, 800), float64]) */;
  %261 = %260.1;
  %262 = cast(%var_9770, dtype="bool") /* ty=Tensor[(2, 800), bool] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(2), int32] */;
  %264 = cast(%261, dtype="bool") /* ty=Tensor[(2, 800), bool] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %266 = @func_4757() /* ty=(Tensor[(1600), int16],) */;
  %267 = @func_7766() /* ty=(Tensor[(1600), int16], Tensor[(1001), float64]) */;
  %268 = @func_5488() /* ty=(Tensor[(1600), bool], Tensor[(5, 1, 5), float32], Tensor[(5, 5), float32], Tensor[(1600), uint64]) */;
  %269 = %268.1;
  %270 = cast(%269, dtype="bool") /* ty=Tensor[(5, 1, 5), bool] */;
  %271 = cast(%var_9813, dtype="bool") /* ty=Tensor[(5, 14, 5), bool] */;
  %272 = @func_3722() /* ty=Tensor[(1001), float64] */;
  %273 = greater(%264, %265) /* ty=Tensor[(2, 800), bool] */;
  %274 = %266.0;
  %275 = %267.1;
  %276 = not_equal(%270, %271) /* ty=Tensor[(5, 14, 5), bool] */;
  (%272, %273, %274, %275, %276)
}

def @func_6801() -> Tensor[(10, 16, 10), float32] {
  %277 = @func_5337() /* ty=(Tensor[(10, 16, 10), float32],) */;
  %277.0
}

def @func_9607() -> (Tensor[(1001), uint16],) {
  %278 = @func_8166() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1001), uint16], Tensor[(10, 16, 10), float64]) */;
  %279 = %278.1;
  (%279,)
}

def @func_3004() -> (Tensor[(10, 16, 10), bool],) {
  %280 = @func_2984() /* ty=(Tensor[(13, 77), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 16), bool], Tensor[(3584), uint16], Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) */;
  %281 = %280.5;
  (%281,)
}

def @func_5736() -> (Tensor[(1001), float32], Tensor[(10, 16, 10), bool]) {
  %282 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
  %283 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %284 = %282.2;
  %285 = %283.0;
  (%284, %285)
}

def @func_9012() -> (Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), int8], Tensor[(14, 16, 15), int8]) {
  %286 = @func_4054() /* ty=Tensor[(10, 16, 10), float64] */;
  %287 = cast(%286, dtype="float64") /* ty=Tensor[(10, 16, 10), float64] */;
  %288 = @func_7252() /* ty=(Tensor[(1001), float32], Tensor[(13, 77), float32], Tensor[(13, 7, 16), float64], Tensor[(14, 16, 15), int8]) */;
  %289 = cos(%287) /* ty=Tensor[(10, 16, 10), float64] */;
  %290 = %288.3;
  %291 = @func_8802() /* ty=Tensor[(14, 16, 15), int8] */;
  (%289, %290, %291)
}

def @func_3864(%var_3852: Tensor[(8, 448), uint16]) -> (Tensor[(10, 16, 10), bool], Tensor[(14, 16, 16), bool], Tensor[(8, 448), uint16], Tensor[(1001), float32]) {
  %292 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %293 = cast(%var_3852, dtype="uint16") /* ty=Tensor[(8, 448), uint16] */;
  %294 = reshape(%293, newshape=[14, 16, 16]) /* ty=Tensor[(14, 16, 16), uint16] */;
  %295 = @func_2900() /* ty=(Tensor[(1600), int16], Tensor[(1001), float32], Tensor[(1001), float32]) */;
  %296 = %292.1;
  %297 = @func_2304(%294) /* ty=Tensor[(14, 16, 16), bool] */;
  %298 = %295.2;
  (%296, %297, %var_3852, %298)
}

def @func_3662() -> (Tensor[(10, 16, 10), float64],) {
  %299 = @func_2428() /* ty=(Tensor[(14, 16, 15), int16], Tensor[(10, 16, 10), float64]) */;
  %300 = %299.1;
  (%300,)
}

def @func_1767(%var_1761: Tensor[(9, 2, 12), int32], %var_1762: Tensor[(9, 2, 12), int32]) -> (Tensor[(9, 2, 12), int32],) {
  %301 = cast(%var_1762, dtype="int32") /* ty=Tensor[(9, 2, 12), int32] */;
  %302 = shape_of(%var_1761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%var_1761, dtype="int32") /* ty=Tensor[(9, 2, 12), int32] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %305 = right_shift(%303, %304) /* ty=Tensor[(9, 2, 12), int32] */;
  (%305,)
}

def @func_6453() -> (Tensor[(10, 16, 10), float32],) {
  %306 = @func_6237() /* ty=(Tensor[(10, 16, 10), float32],) */;
  %307 = %306.0;
  (%307,)
}

def @func_10123() -> Tensor[(1001), float32] {
  @func_3928() /* ty=Tensor[(1001), float32] */
}

def @func_9296() -> (Tensor[(1600), bool],) {
  %308 = @func_7076() /* ty=(Tensor[(1001), float32], Tensor[(1600), bool]) */;
  %309 = %308.1;
  (%309,)
}

def @func_8955() -> (Tensor[(10, 16, 10), float32],) {
  %310 = @func_3106() /* ty=(Tensor[(10, 16, 10), float32],) */;
  %311 = %310.0;
  (%311,)
}

def @func_1281() -> (Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) {
  %312 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %313 = cast(meta[relay.Constant][7] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %314 = %312.2;
  %315 = cast(%314, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
  %316 = reshape(%313, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float32] */;
  %317 = reshape(%315, newshape=[1600]) /* ty=Tensor[(1600), bool] */;
  %318 = @func_725(%316, %317) /* ty=(Tensor[(11, 7, 13), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %319 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %320 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %321 = %318.0;
  %322 = %319.3;
  %323 = %320.0;
  (%314, %321, meta[relay.Constant][7] /* ty=Tensor[(1001), float32] */, %322, %323)
}

def @func_3408(%var_3365: Tensor[(13, 7, 16), float64], %var_3383: Tensor[(13, 7, 16), uint32]) -> (Tensor[(13, 7, 16), bool], Tensor[(13, 77), float32]) {
  %324 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
  %325 = %324.0;
  %326 = cast(%var_3365, dtype="uint32") /* ty=Tensor[(13, 7, 16), uint32] */;
  %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%325, dtype="uint32") /* ty=Tensor[(13, 7, 16), uint32] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %330 = right_shift(%328, %329) /* ty=Tensor[(13, 7, 16), uint32] */;
  %331 = cast(%var_3383, dtype="bool") /* ty=Tensor[(13, 7, 16), bool] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="bool") /* ty=Tensor[(13, 7, 16), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
  %336 = greater_equal(%333, %334) /* ty=Tensor[(13, 7, 16), bool] */;
  %337 = %335.1;
  (%336, %337)
}

def @func_2152() -> Tensor[(1600), float32] {
  %338 = @func_1678() /* ty=(Tensor[(1600), bool],) */;
  %339 = %338.0;
  %340 = cast(meta[relay.Constant][8] /* ty=Tensor[(1600), bool] */, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(1), int32] */;
  %342 = cast(%339, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?), float32] */;
  floor_mod(%342, %343) /* ty=Tensor[(1600), float32] */
}

def @func_3321() -> (Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) {
  %344 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %345 = cast(meta[relay.Constant][9] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %346 = reshape(%345, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
  %347 = @func_1553(%346) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) */;
  %348 = %344.0;
  %349 = %347.3;
  (%348, %349, meta[relay.Constant][9] /* ty=Tensor[(1001), float32] */)
}

def @func_8553() -> (Tensor[(1001), float32],) {
  %350 = @func_5654() /* ty=Tensor[(1001), float32] */;
  (%350,)
}

def @func_4965() -> (Tensor[(1600), float64],) {
  %351 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %352 = %351.2;
  %353 = cast(%352, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %354 = asin(%353) /* ty=Tensor[(1600), float64] */;
  (%354,)
}

def @func_10200() -> (Tensor[(10, 16, 10), bool], Tensor[(1001), float64], Tensor[(35, 10), float32]) {
  %355 = @func_1106() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), float64], Tensor[(1600), bool]) */;
  %356 = %355.0;
  %357 = cast(%356, dtype="float64") /* ty=Tensor[(10, 16, 10), float64] */;
  %358 = cast(meta[relay.Constant][10] /* ty=Tensor[(35, 10), float32] */, dtype="float32") /* ty=Tensor[(35, 10), float32] */;
  %359 = reshape(%357, newshape=[2, 800]) /* ty=Tensor[(2, 800), float64] */;
  %360 = reshape(%358, newshape=[5, 14, 5]) /* ty=Tensor[(5, 14, 5), float32] */;
  %361 = @func_9833(%359, %360) /* ty=(Tensor[(1001), float64], Tensor[(2, 800), bool], Tensor[(1600), int16], Tensor[(1001), float64], Tensor[(5, 14, 5), bool]) */;
  %362 = %361.0;
  (%356, %362, meta[relay.Constant][10] /* ty=Tensor[(35, 10), float32] */)
}

def @func_4351() -> (Tensor[(10, 16, 10), float64], Tensor[(1600), bool], Tensor[(10, 16, 10), float32]) {
  %363 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
  %364 = @func_3981() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(13, 7, 16), float64]) */;
  %365 = @func_4054() /* ty=Tensor[(10, 16, 10), float64] */;
  %366 = %363.0;
  %367 = %364.0;
  (%365, %366, %367)
}

def @func_4384() -> Tensor[(10, 16, 10), float64] {
  %368 = @func_3662() /* ty=(Tensor[(10, 16, 10), float64],) */;
  %368.0
}

def @func_1828(%var_1809: Tensor[(1600), int16]) -> (Tensor[(1600), bool],) {
  %369 = @func_1725() /* ty=(Tensor[(1600), int16],) */;
  %370 = %369.0;
  %371 = cast(%var_1809, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(1), int32] */;
  %373 = cast(%370, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?), bool] */;
  %375 = greater_equal(%373, %374) /* ty=Tensor[(1600), bool] */;
  (%375,)
}

def @func_6212() -> (Tensor[(1001), float32], Tensor[(10, 16, 10), float64]) {
  %376 = @func_5654() /* ty=Tensor[(1001), float32] */;
  %377 = @func_1478() /* ty=Tensor[(10, 16, 10), float64] */;
  (%376, %377)
}

def @func_2428() -> (Tensor[(14, 16, 15), int16], Tensor[(10, 16, 10), float64]) {
  %378 = @func_1067() /* ty=(Tensor[(14, 16, 15), uint64], Tensor[(14, 16, 15), uint8], Tensor[(14, 16, 15), float32]) */;
  %379 = %378.2;
  %380 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 16, 15), float32] */, dtype="int16") /* ty=Tensor[(14, 16, 15), int16] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%379, dtype="int16") /* ty=Tensor[(14, 16, 15), int16] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %384 = left_shift(%382, %383) /* ty=Tensor[(14, 16, 15), int16] */;
  %385 = @func_1478() /* ty=Tensor[(10, 16, 10), float64] */;
  (%384, %385)
}

def @func_6261() -> Tensor[(1001), float32] {
  %386 = @func_6185() /* ty=(Tensor[(1001), float32],) */;
  %386.0
}

def @func_1160() -> (Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool]) {
  %387 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %388 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %389 = %387.0;
  %390 = %388.1;
  (%389, %390)
}

def @func_2500() -> (Tensor[(14, 16, 15), float64], Tensor[(10, 16, 10), float64], Tensor[(100), uint64], Tensor[(10, 16, 10), bool], Tensor[(3584), float64]) {
  %391 = @func_1930() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), bool], Tensor[(10, 16, 10), bool]) */;
  %392 = %391.1;
  %393 = cast(%392, dtype="float64") /* ty=Tensor[(14, 16, 15), float64] */;
  %394 = cast(meta[relay.Constant][12] /* ty=Tensor[(100), uint64] */, dtype="uint64") /* ty=Tensor[(100), uint64] */;
  %395 = reshape(%394, newshape=[10, 2, 5]) /* ty=Tensor[(10, 2, 5), uint64] */;
  %396 = @func_2137(%395) /* ty=(Tensor[(10, 2, 5), uint64], Tensor[(10, 16, 10), float64]) */;
  %397 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %398 = cast(meta[relay.Constant][13] /* ty=Tensor[(3584), uint16] */, dtype="uint16") /* ty=Tensor[(3584), uint16] */;
  %399 = reshape(%398, newshape=[14, 16, 16]) /* ty=Tensor[(14, 16, 16), uint16] */;
  %400 = @func_2304(%399) /* ty=Tensor[(14, 16, 16), bool] */;
  %401 = cast(%400, dtype="float64") /* ty=Tensor[(14, 16, 16), float64] */;
  %402 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(3584), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %403 = cast(meta[relay.Constant][13] /* ty=Tensor[(3584), uint16] */, dtype="float64") /* ty=Tensor[(3584), float64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?), float64] */;
  %405 = erf(%393) /* ty=Tensor[(14, 16, 15), float64] */;
  %406 = %396.1;
  %407 = %397.0;
  %408 = mod(%403, %404) /* ty=Tensor[(3584), float64] */;
  (%405, %406, meta[relay.Constant][12] /* ty=Tensor[(100), uint64] */, %407, %408)
}

def @func_5612() -> (Tensor[(1001), int64], Tensor[(1600), float64]) {
  %409 = @func_2680() /* ty=(Tensor[(1001), int64], Tensor[(1001), float32]) */;
  %410 = @func_4965() /* ty=(Tensor[(1600), float64],) */;
  %411 = %409.0;
  %412 = %410.0;
  (%411, %412)
}

def @func_9661() -> (Tensor[(1001), float32], Tensor[(2, 800), float64]) {
  %413 = @func_2724() /* ty=(Tensor[(1001), float32], Tensor[(2, 800), bool], Tensor[(10, 16, 10), float32]) */;
  %414 = %413.1;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(2, 800), float64] */;
  %416 = @func_3928() /* ty=Tensor[(1001), float32] */;
  %417 = atan(%415) /* ty=Tensor[(2, 800), float64] */;
  (%416, %417)
}

def @func_6862() -> (Tensor[(13, 7, 16), float32], Tensor[(10, 2, 5), uint64], Tensor[(5, 20), uint64]) {
  %418 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %419 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 20), uint64] */, dtype="uint64") /* ty=Tensor[(5, 20), uint64] */;
  %420 = reshape(%419, newshape=[100]) /* ty=Tensor[(100), uint64] */;
  %421 = @func_6665(%420) /* ty=(Tensor[(10, 16, 10), bool], Tensor[(15, 9, 11), float32], Tensor[(10, 2, 5), uint64], Tensor[(100), uint64]) */;
  %422 = %418.3;
  %423 = %421.2;
  (%422, %423, meta[relay.Constant][14] /* ty=Tensor[(5, 20), uint64] */)
}

def @func_5135(%var_5093: Tensor[(12, 11, 14), float32], %var_5119: Tensor[(100), uint64]) -> (Tensor[(10, 16, 10), float64], Tensor[(1600), float32], Tensor[(10, 16, 10), float64], Tensor[(15, 9, 11), float32], Tensor[(10, 16, 10), float64], Tensor[(100), uint64], Tensor[(12, 11, 14), float64]) {
  %424 = @func_4431() /* ty=(Tensor[(10, 16, 10), float64],) */;
  %425 = @func_1997() /* ty=(Tensor[(15, 9, 11), float32],) */;
  %426 = %424.0;
  %427 = cast(%426, dtype="float32") /* ty=Tensor[(10, 16, 10), float32] */;
  %428 = cast(%var_5119, dtype="uint64") /* ty=Tensor[(100), uint64] */;
  %429 = reshape(%427, newshape=[1600]) /* ty=Tensor[(1600), float32] */;
  %430 = reshape(%428, newshape=[100]) /* ty=Tensor[(100), uint64] */;
  %431 = @func_3541(%429, %430) /* ty=(Tensor[(1600), bool], Tensor[(10, 16, 10), float64], Tensor[(100), uint64]) */;
  %432 = cast(%var_5093, dtype="float32") /* ty=Tensor[(12, 11, 14), float32] */;
  %433 = atanh(%432) /* ty=Tensor[(12, 11, 14), float32] */;
  %434 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 11, 14), float32] */, dtype="float64") /* ty=Tensor[(12, 11, 14), float64] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="float64") /* ty=Tensor[(12, 11, 14), float64] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %438 = @func_4774() /* ty=Tensor[(1600), float32] */;
  %439 = @func_4054() /* ty=Tensor[(10, 16, 10), float64] */;
  %440 = %425.0;
  %441 = %431.1;
  %442 = mod(%436, %437) /* ty=Tensor[(12, 11, 14), float64] */;
  (%426, %438, %439, %440, %441, %var_5119, %442)
}

def @func_6984() -> Tensor[(1600), float32] {
  %443 = @func_3450() /* ty=(Tensor[(1600), float32], Tensor[(15, 9, 11), float32]) */;
  %443.0
}

def @func_3450() -> (Tensor[(1600), float32], Tensor[(15, 9, 11), float32]) {
  %444 = @func_1997() /* ty=(Tensor[(15, 9, 11), float32],) */;
  %445 = @func_2152() /* ty=Tensor[(1600), float32] */;
  %446 = %444.0;
  (%445, %446)
}

def @func_1553(%var_1533: Tensor[(13, 77), float32]) -> (Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) {
  %447 = cast(%var_1533, dtype="float32") /* ty=Tensor[(13, 77), float32] */;
  %448 = @func_1478() /* ty=Tensor[(10, 16, 10), float64] */;
  %449 = cast(%448, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
  %450 = reshape(%447, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float32] */;
  %451 = reshape(%449, newshape=[1600]) /* ty=Tensor[(1600), bool] */;
  %452 = @func_725(%450, %451) /* ty=(Tensor[(11, 7, 13), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %453 = @func_1281() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %454 = %452.1;
  %455 = %453.0;
  (%448, %454, %var_1533, %455)
}

def @func_2934() -> (Tensor[(1001), int64], Tensor[(1600), int16]) {
  %456 = @func_2680() /* ty=(Tensor[(1001), int64], Tensor[(1001), float32]) */;
  %457 = @func_1725() /* ty=(Tensor[(1600), int16],) */;
  %458 = %456.0;
  %459 = %457.0;
  (%458, %459)
}

def @func_6588() -> Tensor[(10, 16, 10), float64] {
  @func_4806() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_7660() -> Tensor[(10, 16, 10), float64] {
  @func_3080() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_3080() -> Tensor[(10, 16, 10), float64] {
  @func_1478() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_4431() -> (Tensor[(10, 16, 10), float64],) {
  %460 = @func_3321() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) */;
  %461 = %460.0;
  (%461,)
}

def @func_5246(%var_5243: Tensor[(120), float32]) -> (Tensor[(13, 7, 16), float64], Tensor[(3584), float64], Tensor[(10, 16, 10), float64], Tensor[(120), float32]) {
  %462 = @func_4045() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float64], Tensor[(1600), bool]) */;
  %463 = @func_2500() /* ty=(Tensor[(14, 16, 15), float64], Tensor[(10, 16, 10), float64], Tensor[(100), uint64], Tensor[(10, 16, 10), bool], Tensor[(3584), float64]) */;
  %464 = %463.4;
  %465 = cast(%464, dtype="float64") /* ty=Tensor[(3584), float64] */;
  %466 = cast(%var_5243, dtype="float32") /* ty=Tensor[(120), float32] */;
  %467 = reshape(%466, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), float32] */;
  %468 = @func_4210(%467) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(10, 16, 10), float64]) */;
  %469 = %462.4;
  %470 = log10(%465) /* ty=Tensor[(3584), float64] */;
  %471 = %468.1;
  (%469, %470, %471, %var_5243)
}

def @func_1210() -> (Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) {
  %472 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
  %473 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %474 = %473.1;
  %475 = cast(meta[relay.Constant][16] /* ty=Tensor[(1600), bool] */, dtype="int16") /* ty=Tensor[(1600), int16] */;
  %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(1), int32] */;
  %477 = cast(%474, dtype="int16") /* ty=Tensor[(1600), int16] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?), int16] */;
  %479 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 77), float32] */, dtype="float32") /* ty=Tensor[(13, 77), float32] */;
  %480 = cast(meta[relay.Constant][16] /* ty=Tensor[(1600), bool] */, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %481 = reshape(%479, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float32] */;
  %482 = reshape(%480, newshape=[1600]) /* ty=Tensor[(1600), bool] */;
  %483 = @func_725(%481, %482) /* ty=(Tensor[(11, 7, 13), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %484 = %472.0;
  %485 = left_shift(%477, %478) /* ty=Tensor[(1600), int16] */;
  %486 = %483.1;
  (%484, %485, %486, meta[relay.Constant][17] /* ty=Tensor[(13, 77), float32] */)
}

def @func_10388() -> Tensor[(10, 16, 10), bool] {
  %487 = @func_8061() /* ty=(Tensor[(10, 16, 10), bool],) */;
  %487.0
}

def @func_4572() -> (Tensor[(10, 16, 10), float32], Tensor[(1600), bool]) {
  %488 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %489 = %488.0;
  %490 = cast(%489, dtype="float32") /* ty=Tensor[(10, 16, 10), float32] */;
  %491 = @func_2934() /* ty=(Tensor[(1001), int64], Tensor[(1600), int16]) */;
  %492 = %491.1;
  %493 = cast(%489, dtype="float32") /* ty=Tensor[(10, 16, 10), float32] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(1), int32] */;
  %495 = cast(%492, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?), float32] */;
  %497 = divide(%495, %496) /* ty=Tensor[(1600), float32] */;
  %498 = cast(%497, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %499 = acosh(%498) /* ty=Tensor[(1600), float64] */;
  %500 = cast(%489, dtype="float64") /* ty=Tensor[(10, 16, 10), float64] */;
  %501 = tan(%500) /* ty=Tensor[(10, 16, 10), float64] */;
  %502 = cast(%501, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
  %503 = shape_of(%499, dtype="int32") /* ty=Tensor[(1), int32] */;
  %504 = cast(%499, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?), bool] */;
  %506 = sin(%490) /* ty=Tensor[(10, 16, 10), float32] */;
  %507 = not_equal(%504, %505) /* ty=Tensor[(1600), bool] */;
  (%506, %507)
}

def @func_4143(%var_4130: Tensor[(15, 1, 2), float32], %var_4131: Tensor[(15, 3, 2), float32]) -> (Tensor[(15, 3, 2), float32], Tensor[(15, 3, 2), float32]) {
  %508 = cast(%var_4130, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
  %509 = cast(%var_4131, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
  %510 = cast(%var_4131, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
  %511 = maximum(%508, %509) /* ty=Tensor[(15, 3, 2), float32] */;
  %512 = atan(%510) /* ty=Tensor[(15, 3, 2), float32] */;
  (%511, %512)
}

def @func_5826() -> (Tensor[(10, 16, 10), bool], Tensor[(15, 9, 11), float32]) {
  %513 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %514 = @func_1997() /* ty=(Tensor[(15, 9, 11), float32],) */;
  %515 = %513.0;
  %516 = %514.0;
  (%515, %516)
}

def @func_3541(%var_3529: Tensor[(1600), float32], %var_3538: Tensor[(100), uint64]) -> (Tensor[(1600), bool], Tensor[(10, 16, 10), float64], Tensor[(100), uint64]) {
  %517 = @func_3450() /* ty=(Tensor[(1600), float32], Tensor[(15, 9, 11), float32]) */;
  %518 = %517.0;
  %519 = cast(%var_3529, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(1), int32] */;
  %521 = cast(%518, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?), bool] */;
  %523 = cast(%var_3538, dtype="uint64") /* ty=Tensor[(100), uint64] */;
  %524 = reshape(%523, newshape=[10, 2, 5]) /* ty=Tensor[(10, 2, 5), uint64] */;
  %525 = @func_2137(%524) /* ty=(Tensor[(10, 2, 5), uint64], Tensor[(10, 16, 10), float64]) */;
  %526 = less_equal(%521, %522) /* ty=Tensor[(1600), bool] */;
  %527 = %525.1;
  (%526, %527, %var_3538)
}

def @func_4045() -> (Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float64], Tensor[(1600), bool]) {
  %528 = @func_1160() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool]) */;
  %529 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %530 = @func_3981() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(13, 7, 16), float64]) */;
  %531 = @func_2900() /* ty=(Tensor[(1600), int16], Tensor[(1001), float32], Tensor[(1001), float32]) */;
  %532 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %533 = %528.0;
  %534 = cast(%533, dtype="int16") /* ty=Tensor[(10, 16, 10), int16] */;
  %535 = reshape(%534, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
  %536 = @func_1828(%535) /* ty=(Tensor[(1600), bool],) */;
  %537 = %529.0;
  %538 = %530.0;
  %539 = %531.2;
  %540 = %532.1;
  %541 = %536.0;
  (%533, %537, %538, %539, %540, %541)
}

def @func_8061() -> (Tensor[(10, 16, 10), bool],) {
  %542 = @func_1281() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %543 = %542.4;
  (%543,)
}

def @func_2984() -> (Tensor[(13, 77), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 16), bool], Tensor[(3584), uint16], Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) {
  %544 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
  %545 = %544.3;
  %546 = cast(%545, dtype="float32") /* ty=Tensor[(13, 77), float32] */;
  %547 = reshape(%546, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
  %548 = @func_1553(%547) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) */;
  %549 = cast(meta[relay.Constant][18] /* ty=Tensor[(3584), uint16] */, dtype="uint16") /* ty=Tensor[(3584), uint16] */;
  %550 = reshape(%549, newshape=[14, 16, 16]) /* ty=Tensor[(14, 16, 16), uint16] */;
  %551 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %552 = @func_1281() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %553 = %548.0;
  %554 = @func_2304(%550) /* ty=Tensor[(14, 16, 16), bool] */;
  %555 = %551.1;
  %556 = %552.0;
  (%545, %553, %554, meta[relay.Constant][18] /* ty=Tensor[(3584), uint16] */, %555, %556)
}

def @func_682() -> (Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) {
  %557 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %558 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %559 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %560 = %559.1;
  %561 = cast(%560, dtype="float32") /* ty=Tensor[(10, 16, 10), float32] */;
  %562 = log(%561) /* ty=Tensor[(10, 16, 10), float32] */;
  %563 = cast(%562, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
  %564 = %558.1;
  %565 = cast(%564, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
  %566 = reshape(%563, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %567 = reshape(%565, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %568 = %557.0;
  %569 = @func_469(%566, %567) /* ty=Tensor[(10, 16, 10), bool] */;
  (%568, %564, %562, %569)
}

def @func_9985() -> (Tensor[(10, 16, 10), bool],) {
  %570 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
  %571 = %570.2;
  (%571,)
}

def @func_5488() -> (Tensor[(1600), bool], Tensor[(5, 1, 5), float32], Tensor[(5, 5), float32], Tensor[(1600), uint64]) {
  %572 = @func_4572() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(1600), bool]) */;
  %573 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 5), float32] */, dtype="float32") /* ty=Tensor[(5, 5), float32] */;
  %574 = reshape(%573, newshape=[5, 1, 5]) /* ty=Tensor[(5, 1, 5), float32] */;
  %575 = @func_2771(%574) /* ty=(Tensor[(5, 1, 5), float32],) */;
  %576 = @func_4351() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(1600), bool], Tensor[(10, 16, 10), float32]) */;
  %577 = %576.1;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %579 = asinh(%578) /* ty=Tensor[(1600), float32] */;
  %580 = @func_3004() /* ty=(Tensor[(10, 16, 10), bool],) */;
  %581 = %580.0;
  %582 = cast(%581, dtype="uint64") /* ty=Tensor[(10, 16, 10), uint64] */;
  %583 = shape_of(%579, dtype="int32") /* ty=Tensor[(1), int32] */;
  %584 = cast(%579, dtype="uint64") /* ty=Tensor[(1600), uint64] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %586 = %572.1;
  %587 = %575.0;
  %588 = minimum(%584, %585) /* ty=Tensor[(1600), uint64] */;
  (%586, %587, meta[relay.Constant][19] /* ty=Tensor[(5, 5), float32] */, %588)
}

def @func_6161() -> Tensor[(1001), float32] {
  %589 = @func_2250() /* ty=(Tensor[(1001), float32],) */;
  %589.0
}

def @func_4723() -> Tensor[(1600), bool] {
  %590 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %590.2
}

def @func_8510() -> (Tensor[(10, 16, 10), float32], Tensor[(15, 9, 11), float32], Tensor[(1001), int64], Tensor[(10, 16, 10), float64], Tensor[(1600), int16]) {
  %591 = @func_6453() /* ty=(Tensor[(10, 16, 10), float32],) */;
  %592 = @func_4518() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(15, 9, 11), float32]) */;
  %593 = @func_2680() /* ty=(Tensor[(1001), int64], Tensor[(1001), float32]) */;
  %594 = @func_7766() /* ty=(Tensor[(1600), int16], Tensor[(1001), float64]) */;
  %595 = %591.0;
  %596 = %592.1;
  %597 = %593.0;
  %598 = @func_6588() /* ty=Tensor[(10, 16, 10), float64] */;
  %599 = %594.0;
  (%595, %596, %597, %598, %599)
}

def @func_1930() -> (Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), bool], Tensor[(10, 16, 10), bool]) {
  %600 = @func_1160() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool]) */;
  %601 = cast(meta[relay.Constant][20] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %602 = reshape(%601, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float32] */;
  %603 = @func_1634(%602) /* ty=Tensor[(14, 16, 15), bool] */;
  %604 = cast(meta[relay.Constant][20] /* ty=Tensor[(3360), float32] */, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%603, dtype="bool") /* ty=Tensor[(14, 16, 15), bool] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %608 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
  %609 = %600.0;
  %610 = greater_equal(%606, %607) /* ty=Tensor[(14, 16, 15), bool] */;
  %611 = %608.2;
  (%609, %610, %611)
}

def @func_5184(%var_5178: Tensor[(2, 11, 1), float64]) -> Tensor[(2, 11, 1), float64] {
  %612 = cast(%var_5178, dtype="float64") /* ty=Tensor[(2, 11, 1), float64] */;
  acosh(%612) /* ty=Tensor[(2, 11, 1), float64] */
}

def @func_6665(%var_6657: Tensor[(100), uint64]) -> (Tensor[(10, 16, 10), bool], Tensor[(15, 9, 11), float32], Tensor[(10, 2, 5), uint64], Tensor[(100), uint64]) {
  %613 = @func_1160() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool]) */;
  %614 = @func_3450() /* ty=(Tensor[(1600), float32], Tensor[(15, 9, 11), float32]) */;
  %615 = cast(%var_6657, dtype="uint64") /* ty=Tensor[(100), uint64] */;
  %616 = reshape(%615, newshape=[10, 2, 5]) /* ty=Tensor[(10, 2, 5), uint64] */;
  %617 = @func_2137(%616) /* ty=(Tensor[(10, 2, 5), uint64], Tensor[(10, 16, 10), float64]) */;
  %618 = %613.1;
  %619 = %614.1;
  %620 = %617.0;
  (%618, %619, %620, %var_6657)
}

def @func_9384() -> (Tensor[(15, 9, 11), float32],) {
  %621 = @func_1997() /* ty=(Tensor[(15, 9, 11), float32],) */;
  %622 = %621.0;
  (%622,)
}

def @func_7855(%var_7840: Tensor[(840, 4), float32]) -> (Tensor[(15, 9, 11), float32], Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(14, 16, 15), bool], Tensor[(840, 4), bool]) {
  %623 = @func_5826() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(15, 9, 11), float32]) */;
  %624 = @func_5488() /* ty=(Tensor[(1600), bool], Tensor[(5, 1, 5), float32], Tensor[(5, 5), float32], Tensor[(1600), uint64]) */;
  %625 = cast(%var_7840, dtype="float32") /* ty=Tensor[(840, 4), float32] */;
  %626 = reshape(%625, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float32] */;
  %627 = cast(meta[relay.Constant][21] /* ty=Tensor[(840, 4), float32] */, dtype="bool") /* ty=Tensor[(840, 4), bool] */;
  %628 = shape_of(%var_7840, dtype="int32") /* ty=Tensor[(2), int32] */;
  %629 = cast(%var_7840, dtype="bool") /* ty=Tensor[(840, 4), bool] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %631 = %623.1;
  %632 = @func_4175() /* ty=Tensor[(10, 16, 10), float32] */;
  %633 = %624.0;
  %634 = @func_1634(%626) /* ty=Tensor[(14, 16, 15), bool] */;
  %635 = logical_and(%629, %630) /* ty=Tensor[(840, 4), bool] */;
  (%631, %632, %633, %634, %635)
}

def @func_1621(%var_1611: Tensor[(4, 13, 11), float64]) -> (Tensor[(4, 13, 11), bool],) {
  %636 = cast(%var_1611, dtype="float64") /* ty=Tensor[(4, 13, 11), float64] */;
  %637 = atan(%636) /* ty=Tensor[(4, 13, 11), float64] */;
  %638 = cast(%var_1611, dtype="bool") /* ty=Tensor[(4, 13, 11), bool] */;
  %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%637, dtype="bool") /* ty=Tensor[(4, 13, 11), bool] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %642 = logical_or(%640, %641) /* ty=Tensor[(4, 13, 11), bool] */;
  (%642,)
}

def @func_1336(%var_1326: Tensor[(10, 16, 10), bool]) -> (Tensor[(10, 16, 10), uint32], Tensor[(1600), bool]) {
  %643 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %644 = %643.4;
  %645 = cast(%var_1326, dtype="uint32") /* ty=Tensor[(10, 16, 10), uint32] */;
  %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(%644, dtype="uint32") /* ty=Tensor[(10, 16, 10), uint32] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %649 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %650 = maximum(%647, %648) /* ty=Tensor[(10, 16, 10), uint32] */;
  %651 = %649.2;
  (%650, %651)
}

def @func_6132() -> (Tensor[(1001), float64], Tensor[(10, 16, 10), bool]) {
  %652 = @func_3004() /* ty=(Tensor[(10, 16, 10), bool],) */;
  %653 = @func_5411() /* ty=Tensor[(1001), float64] */;
  %654 = %652.0;
  (%653, %654)
}

def @func_2137(%var_2126: Tensor[(10, 2, 5), uint64]) -> (Tensor[(10, 2, 5), uint64], Tensor[(10, 16, 10), float64]) {
  %655 = cast(%var_2126, dtype="uint64") /* ty=Tensor[(10, 2, 5), uint64] */;
  %656 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(10, 2, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 2, 5), uint64] */, dtype="uint64") /* ty=Tensor[(10, 2, 5), uint64] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %659 = maximum(%657, %658) /* ty=Tensor[(10, 2, 5), uint64] */;
  %660 = @func_1478() /* ty=Tensor[(10, 16, 10), float64] */;
  (%659, %660)
}

def @func_6387() -> (Tensor[(10, 16, 10), float32], Tensor[(1001), bool], Tensor[(10, 16, 10), float32], Tensor[(1001), float32]) {
  %661 = @func_5337() /* ty=(Tensor[(10, 16, 10), float32],) */;
  %662 = cast(meta[relay.Constant][23] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %663 = reshape(%662, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
  %664 = @func_4625(%663) /* ty=Tensor[(13, 77), int8] */;
  %665 = cast(%664, dtype="bool") /* ty=Tensor[(13, 77), bool] */;
  %666 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(1001), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %667 = cast(meta[relay.Constant][23] /* ty=Tensor[(1001), float32] */, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?), bool] */;
  %669 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %670 = %669.0;
  %671 = cast(%670, dtype="float32") /* ty=Tensor[(10, 16, 10), float32] */;
  %672 = %661.0;
  %673 = not_equal(%667, %668) /* ty=Tensor[(1001), bool] */;
  %674 = exp(%671) /* ty=Tensor[(10, 16, 10), float32] */;
  %675 = @func_6161() /* ty=Tensor[(1001), float32] */;
  (%672, %673, %674, %675)
}

def @func_5780() -> (Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32]) {
  %676 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
  %677 = @func_3981() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(13, 7, 16), float64]) */;
  %678 = %676.3;
  %679 = %677.0;
  (%678, %679)
}

def @func_9189(%var_9168: Tensor[(12, 9, 12), uint32], %var_9174: Tensor[(56, 26), float64], %var_9177: Tensor[(4, 420), float64]) -> (Tensor[(12, 9, 12), uint32], Tensor[(13, 7, 16), bool], Tensor[(56, 26), float64], Tensor[(8, 14, 15), bool], Tensor[(4, 420), float64], Tensor[(12, 9, 12), float32]) {
  %680 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 9, 12), uint32] */, dtype="uint32") /* ty=Tensor[(12, 9, 12), uint32] */;
  %681 = shape_of(%var_9168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(%var_9168, dtype="uint32") /* ty=Tensor[(12, 9, 12), uint32] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %684 = cast(%var_9174, dtype="float64") /* ty=Tensor[(56, 26), float64] */;
  %685 = cast(%var_9174, dtype="uint32") /* ty=Tensor[(56, 26), uint32] */;
  %686 = reshape(%684, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), float64] */;
  %687 = reshape(%685, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), uint32] */;
  %688 = @func_3408(%686, %687) /* ty=(Tensor[(13, 7, 16), bool], Tensor[(13, 77), float32]) */;
  %689 = cast(%var_9177, dtype="float64") /* ty=Tensor[(4, 420), float64] */;
  %690 = cast(%var_9177, dtype="float64") /* ty=Tensor[(4, 420), float64] */;
  %691 = reshape(%689, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float64] */;
  %692 = reshape(%690, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float64] */;
  %693 = cast(%var_9168, dtype="float32") /* ty=Tensor[(12, 9, 12), float32] */;
  %694 = maximum(%682, %683) /* ty=Tensor[(12, 9, 12), uint32] */;
  %695 = %688.0;
  %696 = @func_8917(%691, %692) /* ty=Tensor[(8, 14, 15), bool] */;
  %697 = sqrt(%693) /* ty=Tensor[(12, 9, 12), float32] */;
  (%694, %695, %var_9174, %696, %var_9177, %697)
}

def @func_2304(%var_2293: Tensor[(14, 16, 16), uint16]) -> Tensor[(14, 16, 16), bool] {
  %698 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 16, 16), uint16] */, dtype="bool") /* ty=Tensor[(14, 16, 16), bool] */;
  %699 = shape_of(%var_2293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%var_2293, dtype="bool") /* ty=Tensor[(14, 16, 16), bool] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%700, %701) /* ty=Tensor[(14, 16, 16), bool] */
}

def @func_8702() -> (Tensor[(10, 2, 5), uint64],) {
  %702 = @func_6862() /* ty=(Tensor[(13, 7, 16), float32], Tensor[(10, 2, 5), uint64], Tensor[(5, 20), uint64]) */;
  %703 = %702.1;
  (%703,)
}

def @func_775() -> (Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) {
  %704 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
  %705 = %704.1;
  %706 = cast(%705, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
  %707 = cast(%705, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
  %708 = reshape(%706, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %709 = reshape(%707, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %710 = cast(meta[relay.Constant][26] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %711 = cast(%705, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
  %712 = reshape(%710, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float32] */;
  %713 = reshape(%711, newshape=[1600]) /* ty=Tensor[(1600), bool] */;
  %714 = @func_725(%712, %713) /* ty=(Tensor[(11, 7, 13), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %715 = @func_469(%708, %709) /* ty=Tensor[(10, 16, 10), bool] */;
  %716 = %714.0;
  (%705, %715, %716, meta[relay.Constant][26] /* ty=Tensor[(1001), float32] */)
}

def @func_5843(%var_5832: Tensor[(4, 3, 10), float32]) -> (Tensor[(4, 3, 10), float32], Tensor[(1001), float32]) {
  %717 = cast(%var_5832, dtype="float32") /* ty=Tensor[(4, 3, 10), float32] */;
  %718 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
  %719 = log(%717) /* ty=Tensor[(4, 3, 10), float32] */;
  %720 = %718.2;
  (%719, %720)
}

def @func_3815() -> (Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) {
  %721 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %722 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
  %723 = %721.1;
  %724 = %722.3;
  (%723, %724)
}

def @func_4625(%var_4615: Tensor[(13, 77), float32]) -> Tensor[(13, 77), int8] {
  %725 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
  %726 = %725.3;
  %727 = cast(%var_4615, dtype="int8") /* ty=Tensor[(13, 77), int8] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(2), int32] */;
  %729 = cast(%726, dtype="int8") /* ty=Tensor[(13, 77), int8] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  maximum(%729, %730) /* ty=Tensor[(13, 77), int8] */
}

def @func_2841(%var_2828: Tensor[(13, 77), float32]) -> (Tensor[(13, 77), bool], Tensor[(13, 77), float64]) {
  %731 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
  %732 = %731.3;
  %733 = cast(%var_2828, dtype="bool") /* ty=Tensor[(13, 77), bool] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(2), int32] */;
  %735 = cast(%732, dtype="bool") /* ty=Tensor[(13, 77), bool] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %737 = cast(%var_2828, dtype="float64") /* ty=Tensor[(13, 77), float64] */;
  %738 = shape_of(%732, dtype="int32") /* ty=Tensor[(2), int32] */;
  %739 = cast(%732, dtype="float64") /* ty=Tensor[(13, 77), float64] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %741 = greater(%735, %736) /* ty=Tensor[(13, 77), bool] */;
  %742 = subtract(%739, %740) /* ty=Tensor[(13, 77), float64] */;
  (%741, %742)
}

def @func_7076() -> (Tensor[(1001), float32], Tensor[(1600), bool]) {
  %743 = @func_6387() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(1001), bool], Tensor[(10, 16, 10), float32], Tensor[(1001), float32]) */;
  %744 = @func_6967() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(13, 7, 16), float64]) */;
  %745 = %743.3;
  %746 = %744.1;
  (%745, %746)
}

def @func_8631() -> (Tensor[(14, 16, 15), uint64],) {
  %747 = @func_1067() /* ty=(Tensor[(14, 16, 15), uint64], Tensor[(14, 16, 15), uint8], Tensor[(14, 16, 15), float32]) */;
  %748 = %747.0;
  (%748,)
}

def @func_4774() -> Tensor[(1600), float32] {
  %749 = @func_2152() /* ty=Tensor[(1600), float32] */;
  %750 = cast(%749, dtype="float32") /* ty=Tensor[(1600), float32] */;
  acos(%750) /* ty=Tensor[(1600), float32] */
}

def @func_9571() -> (Tensor[(10, 16, 10), bool],) {
  %751 = @func_5952() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) */;
  %752 = %751.2;
  (%752,)
}

def @func_8590() -> Tensor[(10, 16, 10), float64] {
  %753 = @func_2428() /* ty=(Tensor[(14, 16, 15), int16], Tensor[(10, 16, 10), float64]) */;
  %753.1
}

def @func_3788(%var_3779: Tensor[(14, 13, 1), uint8], %var_3780: Tensor[(14, 13, 1), uint8]) -> (Tensor[(14, 13, ?), uint8],) {
  %754 = cast(%var_3780, dtype="uint8") /* ty=Tensor[(14, 13, 1), uint8] */;
  %755 = shape_of(%var_3779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%var_3779, dtype="uint8") /* ty=Tensor[(14, 13, 1), uint8] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %758 = maximum(%756, %757) /* ty=Tensor[(14, 13, ?), uint8] */;
  (%758,)
}

def @func_8802() -> Tensor[(14, 16, 15), int8] {
  @func_7162() /* ty=Tensor[(14, 16, 15), int8] */
}

def @func_5654() -> Tensor[(1001), float32] {
  %759 = @func_1281() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %759.2
}

def @func_8933() -> (Tensor[(13, 7, 16), float64],) {
  %760 = @func_6967() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(13, 7, 16), float64]) */;
  %761 = %760.2;
  (%761,)
}

def @func_5705() -> (Tensor[(1001), float64], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), float64]) {
  %762 = @func_3321() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) */;
  %763 = %762.2;
  %764 = cast(%763, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %765 = @func_3106() /* ty=(Tensor[(10, 16, 10), float32],) */;
  %766 = cosh(%764) /* ty=Tensor[(1001), float64] */;
  %767 = %765.0;
  %768 = @func_3080() /* ty=Tensor[(10, 16, 10), float64] */;
  (%766, %767, %768)
}

def @func_8454() -> (Tensor[(10, 16, 10), bool],) {
  %769 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %770 = %769.0;
  (%770,)
}

def @func_7252() -> (Tensor[(1001), float32], Tensor[(13, 77), float32], Tensor[(13, 7, 16), float64], Tensor[(14, 16, 15), int8]) {
  %771 = @func_2680() /* ty=(Tensor[(1001), int64], Tensor[(1001), float32]) */;
  %772 = %771.1;
  %773 = cast(%772, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %774 = reshape(%773, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
  %775 = @func_1553(%774) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) */;
  %776 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
  %777 = %775.2;
  %778 = %776.0;
  %779 = @func_7162() /* ty=Tensor[(14, 16, 15), int8] */;
  (%772, %777, %778, %779)
}

def @func_626() -> (Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) {
  %780 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(13, 7, 16), float64] */;
  %781 = cast(meta[relay.Constant][28] /* ty=Tensor[(1600), bool] */, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %782 = cast(meta[relay.Constant][28] /* ty=Tensor[(1600), bool] */, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %783 = reshape(%781, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %784 = reshape(%782, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %785 = sqrt(%780) /* ty=Tensor[(13, 7, 16), float64] */;
  %786 = @func_469(%783, %784) /* ty=Tensor[(10, 16, 10), bool] */;
  (%785, %786, meta[relay.Constant][28] /* ty=Tensor[(1600), bool] */)
}

def @func_8041() -> (Tensor[(8, 16, 14), float32],) {
  %787 = cast(meta[relay.Constant][29] /* ty=Tensor[(8, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  %788 = atanh(%787) /* ty=Tensor[(8, 16, 14), float32] */;
  (%788,)
}

def @func_1600() -> (Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) {
  %789 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %790 = cast(meta[relay.Constant][30] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %791 = reshape(%790, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
  %792 = @func_1553(%791) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) */;
  %793 = cast(meta[relay.Constant][30] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %794 = %789.1;
  %795 = %792.2;
  %796 = erf(%793) /* ty=Tensor[(1001), float32] */;
  (%794, %795, %796)
}

def @func_3176() -> (Tensor[(10, 16, 10), float64], Tensor[(1001), float64]) {
  %797 = @func_1106() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), float64], Tensor[(1600), bool]) */;
  %798 = %797.2;
  %799 = cast(%798, dtype="float64") /* ty=Tensor[(10, 16, 10), float64] */;
  %800 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
  %801 = %800.2;
  %802 = cast(%801, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %803 = asinh(%799) /* ty=Tensor[(10, 16, 10), float64] */;
  %804 = log(%802) /* ty=Tensor[(1001), float64] */;
  (%803, %804)
}

def @func_4054() -> Tensor[(10, 16, 10), float64] {
  %805 = @func_3662() /* ty=(Tensor[(10, 16, 10), float64],) */;
  %805.0
}

def @func_3230() -> (Tensor[(1600), bool],) {
  %806 = @func_804() /* ty=(Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) */;
  %807 = %806.0;
  (%807,)
}

def @func_704() -> (Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) {
  %808 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %809 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %810 = %808.1;
  %811 = %809.2;
  (%810, %811)
}

def @func_1106() -> (Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), float64], Tensor[(1600), bool]) {
  %812 = @func_804() /* ty=(Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) */;
  %813 = @func_1067() /* ty=(Tensor[(14, 16, 15), uint64], Tensor[(14, 16, 15), uint8], Tensor[(14, 16, 15), float32]) */;
  %814 = %813.0;
  %815 = cast(%814, dtype="float32") /* ty=Tensor[(14, 16, 15), float32] */;
  %816 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %817 = @func_1067() /* ty=(Tensor[(14, 16, 15), uint64], Tensor[(14, 16, 15), uint8], Tensor[(14, 16, 15), float32]) */;
  %818 = %817.0;
  %819 = cast(%818, dtype="float64") /* ty=Tensor[(14, 16, 15), float64] */;
  %820 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %821 = %812.1;
  %822 = acos(%815) /* ty=Tensor[(14, 16, 15), float32] */;
  %823 = %816.0;
  %824 = sigmoid(%819) /* ty=Tensor[(14, 16, 15), float64] */;
  %825 = %820.2;
  (%821, %822, %823, %824, %825)
}

def @func_7461(%var_7434: Tensor[(3, 30), float32]) -> (Tensor[(10, 16, 10), float32], Tensor[(15, 3, 2), float32], Tensor[(3, 30), bool]) {
  %826 = @func_3106() /* ty=(Tensor[(10, 16, 10), float32],) */;
  %827 = cast(meta[relay.Constant][31] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %828 = cast(%var_7434, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
  %829 = reshape(%827, newshape=[15, 1, 2]) /* ty=Tensor[(15, 1, 2), float32] */;
  %830 = reshape(%828, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float32] */;
  %831 = @func_4143(%829, %830) /* ty=(Tensor[(15, 3, 2), float32], Tensor[(15, 3, 2), float32]) */;
  %832 = cast(meta[relay.Constant][31] /* ty=Tensor[(30), float32] */, dtype="bool") /* ty=Tensor[(30), bool] */;
  %833 = cast(%var_7434, dtype="bool") /* ty=Tensor[(3, 30), bool] */;
  %834 = %826.0;
  %835 = %831.0;
  %836 = not_equal(%832, %833) /* ty=Tensor[(3, 30), bool] */;
  (%834, %835, %836)
}

def @func_6549(%var_6528: Tensor[(13, 77), float32]) -> (Tensor[(1001), float32], Tensor[(13, 77), bool]) {
  %837 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %838 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
  %839 = %838.1;
  %840 = cast(%var_6528, dtype="uint64") /* ty=Tensor[(13, 77), uint64] */;
  %841 = shape_of(%839, dtype="int32") /* ty=Tensor[(2), int32] */;
  %842 = cast(%839, dtype="uint64") /* ty=Tensor[(13, 77), uint64] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %844 = left_shift(%842, %843) /* ty=Tensor[(13, 77), uint64] */;
  %845 = cast(%844, dtype="bool") /* ty=Tensor[(13, 77), bool] */;
  %846 = shape_of(%var_6528, dtype="int32") /* ty=Tensor[(2), int32] */;
  %847 = cast(%var_6528, dtype="bool") /* ty=Tensor[(13, 77), bool] */;
  %848 = dyn.reshape(%845, %846, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %849 = %837.3;
  %850 = less(%847, %848) /* ty=Tensor[(13, 77), bool] */;
  (%849, %850)
}

def @func_3981() -> (Tensor[(10, 16, 10), float32], Tensor[(13, 7, 16), float64]) {
  %851 = @func_2724() /* ty=(Tensor[(1001), float32], Tensor[(2, 800), bool], Tensor[(10, 16, 10), float32]) */;
  %852 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %853 = %851.2;
  %854 = %852.1;
  (%853, %854)
}

def @func_3722() -> Tensor[(1001), float64] {
  %855 = @func_3176() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(1001), float64]) */;
  %855.1
}

def @func_9035() -> (Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) {
  %856 = @func_1160() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool]) */;
  %857 = %856.1;
  %858 = @func_6161() /* ty=Tensor[(1001), float32] */;
  (%857, %858)
}

def @func_469(%var_446: Tensor[(10, 16, 10), bool], %var_447: Tensor[(10, 16, 10), bool]) -> Tensor[(10, 16, 10), bool] {
  %859 = cast(%var_447, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
  %860 = shape_of(%var_446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %861 = cast(%var_446, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
  %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%861, %862) /* ty=Tensor[(10, 16, 10), bool] */
}

def @func_3106() -> (Tensor[(10, 16, 10), float32],) {
  %863 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %864 = %863.4;
  %865 = cast(%864, dtype="float32") /* ty=Tensor[(10, 16, 10), float32] */;
  %866 = atan(%865) /* ty=Tensor[(10, 16, 10), float32] */;
  (%866,)
}

def @func_9536(%var_9507: Tensor[(9, 14, 9), float64]) -> Tensor[(9, 14, 9), float64] {
  %867 = cast(%var_9507, dtype="float64") /* ty=Tensor[(9, 14, 9), float64] */;
  sin(%867) /* ty=Tensor[(9, 14, 9), float64] */
}

def @func_2388(%var_2359: Tensor[(8, 1, 4), float64]) -> (Tensor[(1600), bool], Tensor[(8, ?, 4), bool]) {
  %868 = @func_804() /* ty=(Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) */;
  %869 = cast(%var_2359, dtype="float64") /* ty=Tensor[(8, 1, 4), float64] */;
  %870 = cos(%869) /* ty=Tensor[(8, 1, 4), float64] */;
  %871 = cast(%870, dtype="float32") /* ty=Tensor[(8, 1, 4), float32] */;
  %872 = sinh(%871) /* ty=Tensor[(8, 1, 4), float32] */;
  %873 = cast(%872, dtype="bool") /* ty=Tensor[(8, 1, 4), bool] */;
  %874 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %875 = cast(%870, dtype="bool") /* ty=Tensor[(8, 1, 4), bool] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %877 = %868.0;
  %878 = greater_equal(%875, %876) /* ty=Tensor[(8, ?, 4), bool] */;
  (%877, %878)
}

def @func_10418() -> Tensor[(10, 16, 10), bool] {
  %879 = @func_1930() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), bool], Tensor[(10, 16, 10), bool]) */;
  %879.0
}

def @func_5886() -> (Tensor[(3, 11, 11), int32], Tensor[(1001), float64], Tensor[(3, 11, 11), float32]) {
  %880 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %881 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 11, 11), int32] */, dtype="int32") /* ty=Tensor[(3, 11, 11), int32] */;
  %882 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 11, 11), int32] */, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
  %883 = bitwise_and(%880, %881) /* ty=Tensor[(3, 11, 11), int32] */;
  %884 = @func_3722() /* ty=Tensor[(1001), float64] */;
  %885 = cos(%882) /* ty=Tensor[(3, 11, 11), float32] */;
  (%883, %884, %885)
}

def @func_6967() -> (Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(13, 7, 16), float64]) {
  %886 = @func_4045() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float64], Tensor[(1600), bool]) */;
  %887 = @func_4924() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(1600), bool]) */;
  %888 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
  %889 = %886.2;
  %890 = %887.1;
  %891 = %888.0;
  (%889, %890, %891)
}

def @func_6759() -> (Tensor[(10, 16, 10), bool],) {
  %892 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %893 = %892.0;
  (%893,)
}

def @func_6237() -> (Tensor[(10, 16, 10), float32],) {
  %894 = @func_5337() /* ty=(Tensor[(10, 16, 10), float32],) */;
  %895 = %894.0;
  (%895,)
}

def @func_8868() -> (Tensor[(1001), float32], Tensor[(1001), float32], Tensor[(1600), bool], Tensor[(14, 16, 15), int16]) {
  %896 = @func_2680() /* ty=(Tensor[(1001), int64], Tensor[(1001), float32]) */;
  %897 = @func_4045() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float64], Tensor[(1600), bool]) */;
  %898 = @func_2428() /* ty=(Tensor[(14, 16, 15), int16], Tensor[(10, 16, 10), float64]) */;
  %899 = @func_6161() /* ty=Tensor[(1001), float32] */;
  %900 = %896.1;
  %901 = %897.5;
  %902 = %898.0;
  (%899, %900, %901, %902)
}

def @func_9145() -> Tensor[(14, 16, 15), int8] {
  @func_7162() /* ty=Tensor[(14, 16, 15), int8] */
}

def @func_1067() -> (Tensor[(14, 16, 15), uint64], Tensor[(14, 16, 15), uint8], Tensor[(14, 16, 15), float32]) {
  %903 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 16, 1), uint64] */, dtype="uint64") /* ty=Tensor[(14, 16, 1), uint64] */;
  %904 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 16, 15), uint64] */, dtype="uint64") /* ty=Tensor[(14, 16, 15), uint64] */;
  %905 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 16, 1), uint64] */, dtype="uint8") /* ty=Tensor[(14, 16, 1), uint8] */;
  %906 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 16, 15), uint64] */, dtype="uint8") /* ty=Tensor[(14, 16, 15), uint8] */;
  %907 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 16, 15), uint64] */, dtype="float32") /* ty=Tensor[(14, 16, 15), float32] */;
  %908 = bitwise_and(%903, %904) /* ty=Tensor[(14, 16, 15), uint64] */;
  %909 = bitwise_xor(%905, %906) /* ty=Tensor[(14, 16, 15), uint8] */;
  %910 = sqrt(%907) /* ty=Tensor[(14, 16, 15), float32] */;
  (%908, %909, %910)
}

def @func_2724() -> (Tensor[(1001), float32], Tensor[(2, 800), bool], Tensor[(10, 16, 10), float32]) {
  %911 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %912 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 800), bool] */, dtype="bool") /* ty=Tensor[(2, 800), bool] */;
  %913 = cast(meta[relay.Constant][36] /* ty=Tensor[(2, 800), bool] */, dtype="bool") /* ty=Tensor[(2, 800), bool] */;
  %914 = reshape(%912, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %915 = reshape(%913, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %916 = @func_469(%914, %915) /* ty=Tensor[(10, 16, 10), bool] */;
  %917 = @func_1678() /* ty=(Tensor[(1600), bool],) */;
  %918 = %917.0;
  %919 = cast(%918, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %920 = shape_of(%916, dtype="int32") /* ty=Tensor[(3), int32] */;
  %921 = cast(%916, dtype="float32") /* ty=Tensor[(10, 16, 10), float32] */;
  %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %923 = %911.3;
  %924 = subtract(%921, %922) /* ty=Tensor[(10, 16, 10), float32] */;
  (%923, meta[relay.Constant][36] /* ty=Tensor[(2, 800), bool] */, %924)
}

def @func_4210(%var_4192: Tensor[(5, 4, 6), float32]) -> (Tensor[(5, 4, 6), float32], Tensor[(10, 16, 10), float64]) {
  %925 = cast(%var_4192, dtype="float32") /* ty=Tensor[(5, 4, 6), float32] */;
  %926 = log(%925) /* ty=Tensor[(5, 4, 6), float32] */;
  %927 = @func_4054() /* ty=Tensor[(10, 16, 10), float64] */;
  (%926, %927)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8933() -> (Tensor[(13, 7, 16), float64],) {
  %0 = @func_6967() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(13, 7, 16), float64]) */;
  %1 = %0.2;
  (%1,)
}

def @func_3231() -> (Tensor[(1600), bool],) {
  %4 = fn () -> (Tensor[(1600), bool],) {
    %2 = @func_804() /* ty=(Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) */;
    %3 = %2.0;
    (%3,)
  };
  %4() /* ty=(Tensor[(1600), bool],) */
}

def @func_10420() -> Tensor[(10, 16, 10), bool] {
  @func_10418() /* ty=Tensor[(10, 16, 10), bool] */
}

def @func_10201() -> (Tensor[(10, 16, 10), bool], Tensor[(1001), float64], Tensor[(35, 10), float32]) {
  %13 = fn () -> (Tensor[(10, 16, 10), bool], Tensor[(1001), float64], Tensor[(35, 10), float32]) {
    %5 = @func_1106() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), float64], Tensor[(1600), bool]) */;
    %6 = %5.0;
    %7 = cast(%6, dtype="float64") /* ty=Tensor[(10, 16, 10), float64] */;
    %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(35, 10), float32] */, dtype="float32") /* ty=Tensor[(35, 10), float32] */;
    %9 = reshape(%7, newshape=[2, 800]) /* ty=Tensor[(2, 800), float64] */;
    %10 = reshape(%8, newshape=[5, 14, 5]) /* ty=Tensor[(5, 14, 5), float32] */;
    %11 = @func_9833(%9, %10) /* ty=(Tensor[(1001), float64], Tensor[(2, 800), bool], Tensor[(1600), int16], Tensor[(1001), float64], Tensor[(5, 14, 5), bool]) */;
    %12 = %11.0;
    (%6, %12, meta[relay.Constant][0] /* ty=Tensor[(35, 10), float32] */)
  };
  %13() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1001), float64], Tensor[(35, 10), float32]) */
}

def @func_3005() -> (Tensor[(10, 16, 10), bool],) {
  %16 = fn () -> (Tensor[(10, 16, 10), bool],) {
    %14 = @func_2984() /* ty=(Tensor[(13, 77), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 16), bool], Tensor[(3584), uint16], Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) */;
    %15 = %14.5;
    (%15,)
  };
  %16() /* ty=(Tensor[(10, 16, 10), bool],) */
}

def @func_9602() -> Tensor[(10, 16, 10), float32] {
  @func_9600() /* ty=Tensor[(10, 16, 10), float32] */
}

def @func_2726() -> (Tensor[(1001), float32], Tensor[(2, 800), bool], Tensor[(10, 16, 10), float32]) {
  @func_2724() /* ty=(Tensor[(1001), float32], Tensor[(2, 800), bool], Tensor[(10, 16, 10), float32]) */
}

def @func_1767(%var_1761: Tensor[(9, 2, 12), int32], %var_1762: Tensor[(9, 2, 12), int32]) -> (Tensor[(9, 2, 12), int32],) {
  %17 = cast(%var_1762, dtype="int32") /* ty=Tensor[(9, 2, 12), int32] */;
  %18 = shape_of(%var_1761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%var_1761, dtype="int32") /* ty=Tensor[(9, 2, 12), int32] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %21 = right_shift(%19, %20) /* ty=Tensor[(9, 2, 12), int32] */;
  (%21,)
}

def @func_1008() -> (Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) {
  %43 = fn () -> (Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) {
    %22 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
    %23 = %22.0;
    %24 = @func_804() /* ty=(Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) */;
    %25 = %24.0;
    %26 = cast(%25, dtype="float64") /* ty=Tensor[(1600), float64] */;
    %27 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(%23, dtype="float64") /* ty=Tensor[(10, 16, 10), float64] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %30 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %31 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
    %32 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
    %33 = %32.0;
    %34 = cast(%33, dtype="float32") /* ty=Tensor[(13, 7, 16), float32] */;
    %35 = erf(%34) /* ty=Tensor[(13, 7, 16), float32] */;
    %36 = cast(%35, dtype="float32") /* ty=Tensor[(13, 7, 16), float32] */;
    %37 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %38 = floor_mod(%28, %29) /* ty=Tensor[(10, 16, 10), float64] */;
    %39 = %30.0;
    %40 = %31.1;
    %41 = log(%36) /* ty=Tensor[(13, 7, 16), float32] */;
    %42 = %37.1;
    (%38, %39, %40, %41, %42)
  };
  %43() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */
}

def @func_8407(%var_8363: Tensor[(1001), float32], %var_8394: Tensor[(3840), float64]) -> (Tensor[(1001), bool], Tensor[(16, 15, 16), float64], Tensor[(3840), float64]) {
  %44 = @func_4045() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float64], Tensor[(1600), bool]) */;
  %45 = %44.3;
  %46 = cast(%var_8363, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(1), int32] */;
  %48 = cast(%45, dtype="bool") /* ty=Tensor[(1001), bool] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?), bool] */;
  %50 = cast(%var_8394, dtype="float64") /* ty=Tensor[(3840), float64] */;
  %51 = cast(%var_8394, dtype="float64") /* ty=Tensor[(3840), float64] */;
  %52 = reshape(%50, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float64] */;
  %53 = reshape(%51, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float64] */;
  %54 = @func_5403(%52, %53) /* ty=(Tensor[(16, 15, 16), uint32], Tensor[(16, 15, 16), float64]) */;
  %55 = logical_and(%48, %49) /* ty=Tensor[(1001), bool] */;
  %56 = %54.1;
  (%55, %56, %var_8394)
}

def @func_3867(%var_3865: Tensor[(8, 448), uint16]) -> (Tensor[(10, 16, 10), bool], Tensor[(14, 16, 16), bool], Tensor[(8, 448), uint16], Tensor[(1001), float32]) {
  @func_3864(%var_3865) /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 16), bool], Tensor[(8, 448), uint16], Tensor[(1001), float32]) */
}

def @func_1623(%var_1622: Tensor[(4, 13, 11), float64]) -> (Tensor[(4, 13, 11), bool],) {
  %64 = fn (%var_1611: Tensor[(4, 13, 11), float64]) -> (Tensor[(4, 13, 11), bool],) {
    %57 = cast(%var_1611, dtype="float64") /* ty=Tensor[(4, 13, 11), float64] */;
    %58 = atan(%57) /* ty=Tensor[(4, 13, 11), float64] */;
    %59 = cast(%var_1611, dtype="bool") /* ty=Tensor[(4, 13, 11), bool] */;
    %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
    %61 = cast(%58, dtype="bool") /* ty=Tensor[(4, 13, 11), bool] */;
    %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %63 = logical_or(%61, %62) /* ty=Tensor[(4, 13, 11), bool] */;
    (%63,)
  };
  %64(%var_1622) /* ty=(Tensor[(4, 13, 11), bool],) */
}

def @func_472(%var_470: Tensor[(10, 16, 10), bool], %var_471: Tensor[(10, 16, 10), bool]) -> Tensor[(10, 16, 10), bool] {
  %69 = fn (%var_446: Tensor[(10, 16, 10), bool], %var_447: Tensor[(10, 16, 10), bool]) -> Tensor[(10, 16, 10), bool] {
    %65 = cast(%var_447, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
    %66 = shape_of(%var_446, dtype="int32") /* ty=Tensor[(3), int32] */;
    %67 = cast(%var_446, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
    %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%67, %68) /* ty=Tensor[(10, 16, 10), bool] */
  };
  %69(%var_470, %var_471) /* ty=Tensor[(10, 16, 10), bool] */
}

def @func_806() -> (Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) {
  @func_804() /* ty=(Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) */
}

def @func_6863() -> (Tensor[(13, 7, 16), float32], Tensor[(10, 2, 5), uint64], Tensor[(5, 20), uint64]) {
  %76 = fn () -> (Tensor[(13, 7, 16), float32], Tensor[(10, 2, 5), uint64], Tensor[(5, 20), uint64]) {
    %70 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
    %71 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 20), uint64] */, dtype="uint64") /* ty=Tensor[(5, 20), uint64] */;
    %72 = reshape(%71, newshape=[100]) /* ty=Tensor[(100), uint64] */;
    %73 = @func_6665(%72) /* ty=(Tensor[(10, 16, 10), bool], Tensor[(15, 9, 11), float32], Tensor[(10, 2, 5), uint64], Tensor[(100), uint64]) */;
    %74 = %70.3;
    %75 = %73.2;
    (%74, %75, meta[relay.Constant][1] /* ty=Tensor[(5, 20), uint64] */)
  };
  %76() /* ty=(Tensor[(13, 7, 16), float32], Tensor[(10, 2, 5), uint64], Tensor[(5, 20), uint64]) */
}

def @func_8455() -> (Tensor[(10, 16, 10), bool],) {
  %79 = fn () -> (Tensor[(10, 16, 10), bool],) {
    %77 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %78 = %77.0;
    (%78,)
  };
  %79() /* ty=(Tensor[(10, 16, 10), bool],) */
}

def @func_1930() -> (Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), bool], Tensor[(10, 16, 10), bool]) {
  %80 = @func_1160() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool]) */;
  %81 = cast(meta[relay.Constant][2] /* ty=Tensor[(3360), float32] */, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %82 = reshape(%81, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float32] */;
  %83 = @func_1634(%82) /* ty=Tensor[(14, 16, 15), bool] */;
  %84 = cast(meta[relay.Constant][2] /* ty=Tensor[(3360), float32] */, dtype="bool") /* ty=Tensor[(3360), bool] */;
  %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%83, dtype="bool") /* ty=Tensor[(14, 16, 15), bool] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %88 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
  %89 = %80.0;
  %90 = greater_equal(%86, %87) /* ty=Tensor[(14, 16, 15), bool] */;
  %91 = %88.2;
  (%89, %90, %91)
}

def @func_1339(%var_1337: Tensor[(10, 16, 10), bool]) -> (Tensor[(10, 16, 10), uint32], Tensor[(1600), bool]) {
  @func_1336(%var_1337) /* ty=(Tensor[(10, 16, 10), uint32], Tensor[(1600), bool]) */
}

def @func_2154() -> Tensor[(1600), float32] {
  @func_2152() /* ty=Tensor[(1600), float32] */
}

def @func_1601() -> (Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) {
  %100 = fn () -> (Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) {
    %92 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %93 = cast(meta[relay.Constant][3] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
    %94 = reshape(%93, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
    %95 = @func_1553(%94) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) */;
    %96 = cast(meta[relay.Constant][3] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
    %97 = %92.1;
    %98 = %95.2;
    %99 = erf(%96) /* ty=Tensor[(1001), float32] */;
    (%97, %98, %99)
  };
  %100() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */
}

def @func_6237() -> (Tensor[(10, 16, 10), float32],) {
  %101 = @func_5337() /* ty=(Tensor[(10, 16, 10), float32],) */;
  %102 = %101.0;
  (%102,)
}

def @func_2724() -> (Tensor[(1001), float32], Tensor[(2, 800), bool], Tensor[(10, 16, 10), float32]) {
  %103 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %104 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 800), bool] */, dtype="bool") /* ty=Tensor[(2, 800), bool] */;
  %105 = cast(meta[relay.Constant][4] /* ty=Tensor[(2, 800), bool] */, dtype="bool") /* ty=Tensor[(2, 800), bool] */;
  %106 = reshape(%104, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %107 = reshape(%105, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %108 = @func_469(%106, %107) /* ty=Tensor[(10, 16, 10), bool] */;
  %109 = @func_1678() /* ty=(Tensor[(1600), bool],) */;
  %110 = %109.0;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %112 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%108, dtype="float32") /* ty=Tensor[(10, 16, 10), float32] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %115 = %103.3;
  %116 = subtract(%113, %114) /* ty=Tensor[(10, 16, 10), float32] */;
  (%115, meta[relay.Constant][4] /* ty=Tensor[(2, 800), bool] */, %116)
}

def @func_5412() -> Tensor[(1001), float64] {
  %118 = fn () -> Tensor[(1001), float64] {
    %117 = @func_4103() /* ty=(Tensor[(1001), float64],) */;
    %117.0
  };
  %118() /* ty=Tensor[(1001), float64] */
}

def @func_2391(%var_2389: Tensor[(8, 1, 4), float64]) -> (Tensor[(1600), bool], Tensor[(8, ?, 4), bool]) {
  @func_2388(%var_2389) /* ty=(Tensor[(1600), bool], Tensor[(8, ?, 4), bool]) */
}

def @func_4104() -> (Tensor[(1001), float64],) {
  %120 = fn () -> (Tensor[(1001), float64],) {
    %119 = @func_3722() /* ty=Tensor[(1001), float64] */;
    (%119,)
  };
  %120() /* ty=(Tensor[(1001), float64],) */
}

def @func_1336(%var_1326: Tensor[(10, 16, 10), bool]) -> (Tensor[(10, 16, 10), uint32], Tensor[(1600), bool]) {
  %121 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %122 = %121.4;
  %123 = cast(%var_1326, dtype="uint32") /* ty=Tensor[(10, 16, 10), uint32] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="uint32") /* ty=Tensor[(10, 16, 10), uint32] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %127 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %128 = maximum(%125, %126) /* ty=Tensor[(10, 16, 10), uint32] */;
  %129 = %127.2;
  (%128, %129)
}

def @func_7253() -> (Tensor[(1001), float32], Tensor[(13, 77), float32], Tensor[(13, 7, 16), float64], Tensor[(14, 16, 15), int8]) {
  %139 = fn () -> (Tensor[(1001), float32], Tensor[(13, 77), float32], Tensor[(13, 7, 16), float64], Tensor[(14, 16, 15), int8]) {
    %130 = @func_2680() /* ty=(Tensor[(1001), int64], Tensor[(1001), float32]) */;
    %131 = %130.1;
    %132 = cast(%131, dtype="float32") /* ty=Tensor[(1001), float32] */;
    %133 = reshape(%132, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
    %134 = @func_1553(%133) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) */;
    %135 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
    %136 = %134.2;
    %137 = %135.0;
    %138 = @func_7162() /* ty=Tensor[(14, 16, 15), int8] */;
    (%131, %136, %137, %138)
  };
  %139() /* ty=(Tensor[(1001), float32], Tensor[(13, 77), float32], Tensor[(13, 7, 16), float64], Tensor[(14, 16, 15), int8]) */
}

def @func_4725() -> Tensor[(1600), bool] {
  @func_4723() /* ty=Tensor[(1600), bool] */
}

def @func_5490() -> (Tensor[(1600), bool], Tensor[(5, 1, 5), float32], Tensor[(5, 5), float32], Tensor[(1600), uint64]) {
  @func_5488() /* ty=(Tensor[(1600), bool], Tensor[(5, 1, 5), float32], Tensor[(5, 5), float32], Tensor[(1600), uint64]) */
}

def @func_6802() -> Tensor[(10, 16, 10), float32] {
  %141 = fn () -> Tensor[(10, 16, 10), float32] {
    %140 = @func_5337() /* ty=(Tensor[(10, 16, 10), float32],) */;
    %140.0
  };
  %141() /* ty=Tensor[(10, 16, 10), float32] */
}

def @func_8062() -> (Tensor[(10, 16, 10), bool],) {
  %144 = fn () -> (Tensor[(10, 16, 10), bool],) {
    %142 = @func_1281() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
    %143 = %142.4;
    (%143,)
  };
  %144() /* ty=(Tensor[(10, 16, 10), bool],) */
}

def @func_2902() -> (Tensor[(1600), int16], Tensor[(1001), float32], Tensor[(1001), float32]) {
  @func_2900() /* ty=(Tensor[(1600), int16], Tensor[(1001), float32], Tensor[(1001), float32]) */
}

def @func_2986() -> (Tensor[(13, 77), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 16), bool], Tensor[(3584), uint16], Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) {
  @func_2984() /* ty=(Tensor[(13, 77), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 16), bool], Tensor[(3584), uint16], Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) */
}

def @func_3178() -> (Tensor[(10, 16, 10), float64], Tensor[(1001), float64]) {
  @func_3176() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(1001), float64]) */
}

def @func_9147() -> Tensor[(14, 16, 15), int8] {
  @func_9145() /* ty=Tensor[(14, 16, 15), int8] */
}

def @func_9836(%var_9834: Tensor[(2, 800), float64], %var_9835: Tensor[(5, 14, 5), float32]) -> (Tensor[(1001), float64], Tensor[(2, 800), bool], Tensor[(1600), int16], Tensor[(1001), float64], Tensor[(5, 14, 5), bool]) {
  %162 = fn (%var_9770: Tensor[(2, 800), float64], %var_9813: Tensor[(5, 14, 5), float32]) -> (Tensor[(1001), float64], Tensor[(2, 800), bool], Tensor[(1600), int16], Tensor[(1001), float64], Tensor[(5, 14, 5), bool]) {
    %145 = @func_9661() /* ty=(Tensor[(1001), float32], Tensor[(2, 800), float64]) */;
    %146 = %145.1;
    %147 = cast(%var_9770, dtype="bool") /* ty=Tensor[(2, 800), bool] */;
    %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(2), int32] */;
    %149 = cast(%146, dtype="bool") /* ty=Tensor[(2, 800), bool] */;
    %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %151 = @func_4757() /* ty=(Tensor[(1600), int16],) */;
    %152 = @func_7766() /* ty=(Tensor[(1600), int16], Tensor[(1001), float64]) */;
    %153 = @func_5488() /* ty=(Tensor[(1600), bool], Tensor[(5, 1, 5), float32], Tensor[(5, 5), float32], Tensor[(1600), uint64]) */;
    %154 = %153.1;
    %155 = cast(%154, dtype="bool") /* ty=Tensor[(5, 1, 5), bool] */;
    %156 = cast(%var_9813, dtype="bool") /* ty=Tensor[(5, 14, 5), bool] */;
    %157 = @func_3722() /* ty=Tensor[(1001), float64] */;
    %158 = greater(%149, %150) /* ty=Tensor[(2, 800), bool] */;
    %159 = %151.0;
    %160 = %152.1;
    %161 = not_equal(%155, %156) /* ty=Tensor[(5, 14, 5), bool] */;
    (%157, %158, %159, %160, %161)
  };
  %162(%var_9834, %var_9835) /* ty=(Tensor[(1001), float64], Tensor[(2, 800), bool], Tensor[(1600), int16], Tensor[(1001), float64], Tensor[(5, 14, 5), bool]) */
}

def @func_704() -> (Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) {
  %163 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %164 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %165 = %163.1;
  %166 = %164.2;
  (%165, %166)
}

def @func_8167() -> (Tensor[(10, 16, 10), bool], Tensor[(1001), uint16], Tensor[(10, 16, 10), float64]) {
  %173 = fn () -> (Tensor[(10, 16, 10), bool], Tensor[(1001), uint16], Tensor[(10, 16, 10), float64]) {
    %167 = @func_1930() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), bool], Tensor[(10, 16, 10), bool]) */;
    %168 = @func_5008() /* ty=(Tensor[(1001), uint16],) */;
    %169 = @func_4431() /* ty=(Tensor[(10, 16, 10), float64],) */;
    %170 = %167.2;
    %171 = %168.0;
    %172 = %169.0;
    (%170, %171, %172)
  };
  %173() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1001), uint16], Tensor[(10, 16, 10), float64]) */
}

def @func_7077() -> (Tensor[(1001), float32], Tensor[(1600), bool]) {
  %178 = fn () -> (Tensor[(1001), float32], Tensor[(1600), bool]) {
    %174 = @func_6387() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(1001), bool], Tensor[(10, 16, 10), float32], Tensor[(1001), float32]) */;
    %175 = @func_6967() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(13, 7, 16), float64]) */;
    %176 = %174.3;
    %177 = %175.1;
    (%176, %177)
  };
  %178() /* ty=(Tensor[(1001), float32], Tensor[(1600), bool]) */
}

def @func_4046() -> (Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float64], Tensor[(1600), bool]) {
  %193 = fn () -> (Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float64], Tensor[(1600), bool]) {
    %179 = @func_1160() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool]) */;
    %180 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %181 = @func_3981() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(13, 7, 16), float64]) */;
    %182 = @func_2900() /* ty=(Tensor[(1600), int16], Tensor[(1001), float32], Tensor[(1001), float32]) */;
    %183 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
    %184 = %179.0;
    %185 = cast(%184, dtype="int16") /* ty=Tensor[(10, 16, 10), int16] */;
    %186 = reshape(%185, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
    %187 = @func_1828(%186) /* ty=(Tensor[(1600), bool],) */;
    %188 = %180.0;
    %189 = %181.0;
    %190 = %182.2;
    %191 = %183.1;
    %192 = %187.0;
    (%184, %188, %189, %190, %191, %192)
  };
  %193() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float64], Tensor[(1600), bool]) */
}

def @func_5488() -> (Tensor[(1600), bool], Tensor[(5, 1, 5), float32], Tensor[(5, 5), float32], Tensor[(1600), uint64]) {
  %194 = @func_4572() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(1600), bool]) */;
  %195 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 5), float32] */, dtype="float32") /* ty=Tensor[(5, 5), float32] */;
  %196 = reshape(%195, newshape=[5, 1, 5]) /* ty=Tensor[(5, 1, 5), float32] */;
  %197 = @func_2771(%196) /* ty=(Tensor[(5, 1, 5), float32],) */;
  %198 = @func_4351() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(1600), bool], Tensor[(10, 16, 10), float32]) */;
  %199 = %198.1;
  %200 = cast(%199, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %201 = asinh(%200) /* ty=Tensor[(1600), float32] */;
  %202 = @func_3004() /* ty=(Tensor[(10, 16, 10), bool],) */;
  %203 = %202.0;
  %204 = cast(%203, dtype="uint64") /* ty=Tensor[(10, 16, 10), uint64] */;
  %205 = shape_of(%201, dtype="int32") /* ty=Tensor[(1), int32] */;
  %206 = cast(%201, dtype="uint64") /* ty=Tensor[(1600), uint64] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %208 = %194.1;
  %209 = %197.0;
  %210 = minimum(%206, %207) /* ty=Tensor[(1600), uint64] */;
  (%208, %209, meta[relay.Constant][5] /* ty=Tensor[(5, 5), float32] */, %210)
}

def @func_4723() -> Tensor[(1600), bool] {
  %211 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %211.2
}

def @func_804() -> (Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) {
  %212 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %213 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %214 = %212.1;
  %215 = %213.1;
  (%214, %215)
}

def @func_4519() -> (Tensor[(10, 16, 10), float64], Tensor[(15, 9, 11), float32]) {
  %219 = fn () -> (Tensor[(10, 16, 10), float64], Tensor[(15, 9, 11), float32]) {
    %216 = @func_1997() /* ty=(Tensor[(15, 9, 11), float32],) */;
    %217 = @func_4054() /* ty=Tensor[(10, 16, 10), float64] */;
    %218 = %216.0;
    (%217, %218)
  };
  %219() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(15, 9, 11), float32]) */
}

def @func_6665(%var_6657: Tensor[(100), uint64]) -> (Tensor[(10, 16, 10), bool], Tensor[(15, 9, 11), float32], Tensor[(10, 2, 5), uint64], Tensor[(100), uint64]) {
  %220 = @func_1160() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool]) */;
  %221 = @func_3450() /* ty=(Tensor[(1600), float32], Tensor[(15, 9, 11), float32]) */;
  %222 = cast(%var_6657, dtype="uint64") /* ty=Tensor[(100), uint64] */;
  %223 = reshape(%222, newshape=[10, 2, 5]) /* ty=Tensor[(10, 2, 5), uint64] */;
  %224 = @func_2137(%223) /* ty=(Tensor[(10, 2, 5), uint64], Tensor[(10, 16, 10), float64]) */;
  %225 = %220.1;
  %226 = %221.1;
  %227 = %224.0;
  (%225, %226, %227, %var_6657)
}

def @func_2152() -> Tensor[(1600), float32] {
  %228 = @func_1678() /* ty=(Tensor[(1600), bool],) */;
  %229 = %228.0;
  %230 = cast(meta[relay.Constant][6] /* ty=Tensor[(1600), bool] */, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(1), int32] */;
  %232 = cast(%229, dtype="float32") /* ty=Tensor[(1600), float32] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?), float32] */;
  floor_mod(%232, %233) /* ty=Tensor[(1600), float32] */
}

def @func_6985() -> Tensor[(1600), float32] {
  %235 = fn () -> Tensor[(1600), float32] {
    %234 = @func_3450() /* ty=(Tensor[(1600), float32], Tensor[(15, 9, 11), float32]) */;
    %234.0
  };
  %235() /* ty=Tensor[(1600), float32] */
}

def @func_1553(%var_1533: Tensor[(13, 77), float32]) -> (Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) {
  %236 = cast(%var_1533, dtype="float32") /* ty=Tensor[(13, 77), float32] */;
  %237 = @func_1478() /* ty=Tensor[(10, 16, 10), float64] */;
  %238 = cast(%237, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
  %239 = reshape(%236, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float32] */;
  %240 = reshape(%238, newshape=[1600]) /* ty=Tensor[(1600), bool] */;
  %241 = @func_725(%239, %240) /* ty=(Tensor[(11, 7, 13), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %242 = @func_1281() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %243 = %241.1;
  %244 = %242.0;
  (%237, %243, %var_1533, %244)
}

def @func_4925() -> (Tensor[(10, 16, 10), float64], Tensor[(1600), bool]) {
  %250 = fn () -> (Tensor[(10, 16, 10), float64], Tensor[(1600), bool]) {
    %245 = @func_4384() /* ty=Tensor[(10, 16, 10), float64] */;
    %246 = cast(%245, dtype="int16") /* ty=Tensor[(10, 16, 10), int16] */;
    %247 = reshape(%246, newshape=[1600]) /* ty=Tensor[(1600), int16] */;
    %248 = @func_1828(%247) /* ty=(Tensor[(1600), bool],) */;
    %249 = %248.0;
    (%245, %249)
  };
  %250() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(1600), bool]) */
}

def @func_8553() -> (Tensor[(1001), float32],) {
  %251 = @func_5654() /* ty=Tensor[(1001), float32] */;
  (%251,)
}

def @func_3107() -> (Tensor[(10, 16, 10), float32],) {
  %256 = fn () -> (Tensor[(10, 16, 10), float32],) {
    %252 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
    %253 = %252.4;
    %254 = cast(%253, dtype="float32") /* ty=Tensor[(10, 16, 10), float32] */;
    %255 = atan(%254) /* ty=Tensor[(10, 16, 10), float32] */;
    (%255,)
  };
  %256() /* ty=(Tensor[(10, 16, 10), float32],) */
}

def @func_683() -> (Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) {
  %270 = fn () -> (Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) {
    %257 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %258 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %259 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %260 = %259.1;
    %261 = cast(%260, dtype="float32") /* ty=Tensor[(10, 16, 10), float32] */;
    %262 = log(%261) /* ty=Tensor[(10, 16, 10), float32] */;
    %263 = cast(%262, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
    %264 = %258.1;
    %265 = cast(%264, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
    %266 = reshape(%263, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
    %267 = reshape(%265, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
    %268 = %257.0;
    %269 = @func_469(%266, %267) /* ty=Tensor[(10, 16, 10), bool] */;
    (%268, %264, %262, %269)
  };
  %270() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */
}

def @func_3176() -> (Tensor[(10, 16, 10), float64], Tensor[(1001), float64]) {
  %271 = @func_1106() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), float64], Tensor[(1600), bool]) */;
  %272 = %271.2;
  %273 = cast(%272, dtype="float64") /* ty=Tensor[(10, 16, 10), float64] */;
  %274 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
  %275 = %274.2;
  %276 = cast(%275, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %277 = asinh(%273) /* ty=Tensor[(10, 16, 10), float64] */;
  %278 = log(%276) /* ty=Tensor[(1001), float64] */;
  (%277, %278)
}

def @func_5139(%var_5137: Tensor[(12, 11, 14), float32], %var_5138: Tensor[(100), uint64]) -> (Tensor[(10, 16, 10), float64], Tensor[(1600), float32], Tensor[(10, 16, 10), float64], Tensor[(15, 9, 11), float32], Tensor[(10, 16, 10), float64], Tensor[(100), uint64], Tensor[(12, 11, 14), float64]) {
  @func_5135(%var_5137, %var_5138) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(1600), float32], Tensor[(10, 16, 10), float64], Tensor[(15, 9, 11), float32], Tensor[(10, 16, 10), float64], Tensor[(100), uint64], Tensor[(12, 11, 14), float64]) */
}

def @func_9297() -> (Tensor[(1600), bool],) {
  %281 = fn () -> (Tensor[(1600), bool],) {
    %279 = @func_7076() /* ty=(Tensor[(1001), float32], Tensor[(1600), bool]) */;
    %280 = %279.1;
    (%280,)
  };
  %281() /* ty=(Tensor[(1600), bool],) */
}

def @func_6163() -> Tensor[(1001), float32] {
  @func_6161() /* ty=Tensor[(1001), float32] */
}

def @func_5736() -> (Tensor[(1001), float32], Tensor[(10, 16, 10), bool]) {
  %282 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
  %283 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %284 = %282.2;
  %285 = %283.0;
  (%284, %285)
}

def @func_9135() -> (Tensor[(1600), bool],) {
  %288 = fn () -> (Tensor[(1600), bool],) {
    %286 = @func_5488() /* ty=(Tensor[(1600), bool], Tensor[(5, 1, 5), float32], Tensor[(5, 5), float32], Tensor[(1600), uint64]) */;
    %287 = %286.0;
    (%287,)
  };
  %288() /* ty=(Tensor[(1600), bool],) */
}

def @func_5655() -> Tensor[(1001), float32] {
  %290 = fn () -> Tensor[(1001), float32] {
    %289 = @func_1281() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
    %289.2
  };
  %290() /* ty=Tensor[(1001), float32] */
}

def @func_2501() -> (Tensor[(14, 16, 15), float64], Tensor[(10, 16, 10), float64], Tensor[(100), uint64], Tensor[(10, 16, 10), bool], Tensor[(3584), float64]) {
  %309 = fn () -> (Tensor[(14, 16, 15), float64], Tensor[(10, 16, 10), float64], Tensor[(100), uint64], Tensor[(10, 16, 10), bool], Tensor[(3584), float64]) {
    %291 = @func_1930() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), bool], Tensor[(10, 16, 10), bool]) */;
    %292 = %291.1;
    %293 = cast(%292, dtype="float64") /* ty=Tensor[(14, 16, 15), float64] */;
    %294 = cast(meta[relay.Constant][7] /* ty=Tensor[(100), uint64] */, dtype="uint64") /* ty=Tensor[(100), uint64] */;
    %295 = reshape(%294, newshape=[10, 2, 5]) /* ty=Tensor[(10, 2, 5), uint64] */;
    %296 = @func_2137(%295) /* ty=(Tensor[(10, 2, 5), uint64], Tensor[(10, 16, 10), float64]) */;
    %297 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
    %298 = cast(meta[relay.Constant][8] /* ty=Tensor[(3584), uint16] */, dtype="uint16") /* ty=Tensor[(3584), uint16] */;
    %299 = reshape(%298, newshape=[14, 16, 16]) /* ty=Tensor[(14, 16, 16), uint16] */;
    %300 = @func_2304(%299) /* ty=Tensor[(14, 16, 16), bool] */;
    %301 = cast(%300, dtype="float64") /* ty=Tensor[(14, 16, 16), float64] */;
    %302 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(3584), uint16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %303 = cast(meta[relay.Constant][8] /* ty=Tensor[(3584), uint16] */, dtype="float64") /* ty=Tensor[(3584), float64] */;
    %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?), float64] */;
    %305 = erf(%293) /* ty=Tensor[(14, 16, 15), float64] */;
    %306 = %296.1;
    %307 = %297.0;
    %308 = mod(%303, %304) /* ty=Tensor[(3584), float64] */;
    (%305, %306, meta[relay.Constant][7] /* ty=Tensor[(100), uint64] */, %307, %308)
  };
  %309() /* ty=(Tensor[(14, 16, 15), float64], Tensor[(10, 16, 10), float64], Tensor[(100), uint64], Tensor[(10, 16, 10), bool], Tensor[(3584), float64]) */
}

def @func_5954() -> (Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) {
  @func_5952() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) */
}

def @func_9013() -> (Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), int8], Tensor[(14, 16, 15), int8]) {
  %316 = fn () -> (Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), int8], Tensor[(14, 16, 15), int8]) {
    %310 = @func_4054() /* ty=Tensor[(10, 16, 10), float64] */;
    %311 = cast(%310, dtype="float64") /* ty=Tensor[(10, 16, 10), float64] */;
    %312 = @func_7252() /* ty=(Tensor[(1001), float32], Tensor[(13, 77), float32], Tensor[(13, 7, 16), float64], Tensor[(14, 16, 15), int8]) */;
    %313 = cos(%311) /* ty=Tensor[(10, 16, 10), float64] */;
    %314 = %312.3;
    %315 = @func_8802() /* ty=Tensor[(14, 16, 15), int8] */;
    (%313, %314, %315)
  };
  %316() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), int8], Tensor[(14, 16, 15), int8]) */
}

def @func_725(%var_712: Tensor[(11, 7, 13), float32], %var_716: Tensor[(1600), bool]) -> (Tensor[(11, 7, 13), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) {
  %317 = cast(%var_712, dtype="float32") /* ty=Tensor[(11, 7, 13), float32] */;
  %318 = cast(%var_716, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %319 = cast(%var_716, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %320 = reshape(%318, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %321 = reshape(%319, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %322 = asin(%317) /* ty=Tensor[(11, 7, 13), float32] */;
  %323 = @func_469(%320, %321) /* ty=Tensor[(10, 16, 10), bool] */;
  (%322, %323, %var_716)
}

def @func_1636(%var_1635: Tensor[(14, 16, 15), float32]) -> Tensor[(14, 16, 15), bool] {
  %330 = fn (%var_1627: Tensor[(14, 16, 15), float32]) -> Tensor[(14, 16, 15), bool] {
    %324 = @func_1106() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), float64], Tensor[(1600), bool]) */;
    %325 = %324.1;
    %326 = cast(%var_1627, dtype="bool") /* ty=Tensor[(14, 16, 15), bool] */;
    %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
    %328 = cast(%325, dtype="bool") /* ty=Tensor[(14, 16, 15), bool] */;
    %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%328, %329) /* ty=Tensor[(14, 16, 15), bool] */
  };
  %330(%var_1635) /* ty=Tensor[(14, 16, 15), bool] */
}

def @func_10123() -> Tensor[(1001), float32] {
  @func_3928() /* ty=Tensor[(1001), float32] */
}

def @func_7766() -> (Tensor[(1600), int16], Tensor[(1001), float64]) {
  %331 = @func_1725() /* ty=(Tensor[(1600), int16],) */;
  %332 = @func_5886() /* ty=(Tensor[(3, 11, 11), int32], Tensor[(1001), float64], Tensor[(3, 11, 11), float32]) */;
  %333 = %331.0;
  %334 = %332.1;
  (%333, %334)
}

def @func_4432() -> (Tensor[(10, 16, 10), float64],) {
  %337 = fn () -> (Tensor[(10, 16, 10), float64],) {
    %335 = @func_3321() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) */;
    %336 = %335.0;
    (%336,)
  };
  %337() /* ty=(Tensor[(10, 16, 10), float64],) */
}

def @func_2681() -> (Tensor[(1001), int64], Tensor[(1001), float32]) {
  %347 = fn () -> (Tensor[(1001), int64], Tensor[(1001), float32]) {
    %338 = @func_2250() /* ty=(Tensor[(1001), float32],) */;
    %339 = %338.0;
    %340 = cast(meta[relay.Constant][9] /* ty=Tensor[(1001), float32] */, dtype="int64") /* ty=Tensor[(1001), int64] */;
    %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(1), int32] */;
    %342 = cast(%339, dtype="int64") /* ty=Tensor[(1001), int64] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?), int64] */;
    %344 = cast(%339, dtype="float32") /* ty=Tensor[(1001), float32] */;
    %345 = bitwise_xor(%342, %343) /* ty=Tensor[(1001), int64] */;
    %346 = acos(%344) /* ty=Tensor[(1001), float32] */;
    (%345, %346)
  };
  %347() /* ty=(Tensor[(1001), int64], Tensor[(1001), float32]) */
}

def @func_6262() -> Tensor[(1001), float32] {
  %349 = fn () -> Tensor[(1001), float32] {
    %348 = @func_6185() /* ty=(Tensor[(1001), float32],) */;
    %348.0
  };
  %349() /* ty=Tensor[(1001), float32] */
}

def @func_8804() -> Tensor[(14, 16, 15), int8] {
  @func_8802() /* ty=Tensor[(14, 16, 15), int8] */
}

def @func_5339() -> (Tensor[(10, 16, 10), float32],) {
  @func_5337() /* ty=(Tensor[(10, 16, 10), float32],) */
}

def @func_8591() -> Tensor[(10, 16, 10), float64] {
  %351 = fn () -> Tensor[(10, 16, 10), float64] {
    %350 = @func_2428() /* ty=(Tensor[(14, 16, 15), int16], Tensor[(10, 16, 10), float64]) */;
    %350.1
  };
  %351() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_9704(%var_9703: Tensor[(1600), bool]) -> (Tensor[(1600), int64], Tensor[(1001), float64], Tensor[(13, 77), float32], Tensor[(1456), float64]) {
  %367 = fn (%var_9691: Tensor[(1600), bool]) -> (Tensor[(1600), int64], Tensor[(1001), float64], Tensor[(13, 77), float32], Tensor[(1456), float64]) {
    %352 = @func_4924() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(1600), bool]) */;
    %353 = %352.1;
    %354 = cast(%var_9691, dtype="int64") /* ty=Tensor[(1600), int64] */;
    %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(1), int32] */;
    %356 = cast(%353, dtype="int64") /* ty=Tensor[(1600), int64] */;
    %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?), int64] */;
    %358 = @func_5886() /* ty=(Tensor[(3, 11, 11), int32], Tensor[(1001), float64], Tensor[(3, 11, 11), float32]) */;
    %359 = cast(meta[relay.Constant][10] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %360 = cast(meta[relay.Constant][10] /* ty=Tensor[(1456), float64] */, dtype="uint32") /* ty=Tensor[(1456), uint32] */;
    %361 = reshape(%359, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), float64] */;
    %362 = reshape(%360, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), uint32] */;
    %363 = @func_3408(%361, %362) /* ty=(Tensor[(13, 7, 16), bool], Tensor[(13, 77), float32]) */;
    %364 = bitwise_xor(%356, %357) /* ty=Tensor[(1600), int64] */;
    %365 = %358.1;
    %366 = %363.1;
    (%364, %365, %366, meta[relay.Constant][10] /* ty=Tensor[(1456), float64] */)
  };
  %367(%var_9703) /* ty=(Tensor[(1600), int64], Tensor[(1001), float64], Tensor[(13, 77), float32], Tensor[(1456), float64]) */
}

def @func_10418() -> Tensor[(10, 16, 10), bool] {
  %368 = @func_1930() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), bool], Tensor[(10, 16, 10), bool]) */;
  %368.0
}

def @func_6185() -> (Tensor[(1001), float32],) {
  %369 = @func_5952() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) */;
  %370 = %369.3;
  (%370,)
}

def @func_4807() -> Tensor[(10, 16, 10), float64] {
  %371 = fn () -> Tensor[(10, 16, 10), float64] {
    @func_3080() /* ty=Tensor[(10, 16, 10), float64] */
  };
  %371() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_9384() -> (Tensor[(15, 9, 11), float32],) {
  %372 = @func_1997() /* ty=(Tensor[(15, 9, 11), float32],) */;
  %373 = %372.0;
  (%373,)
}

def @func_7052() -> Tensor[(10, 16, 10), bool] {
  %375 = fn () -> Tensor[(10, 16, 10), bool] {
    %374 = @func_6759() /* ty=(Tensor[(10, 16, 10), bool],) */;
    %374.0
  };
  %375() /* ty=Tensor[(10, 16, 10), bool] */
}

def @func_10388() -> Tensor[(10, 16, 10), bool] {
  %376 = @func_8061() /* ty=(Tensor[(10, 16, 10), bool],) */;
  %376.0
}

def @func_1726() -> (Tensor[(1600), int16],) {
  %379 = fn () -> (Tensor[(1600), int16],) {
    %377 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
    %378 = %377.1;
    (%378,)
  };
  %379() /* ty=(Tensor[(1600), int16],) */
}

def @func_1831(%var_1829: Tensor[(1600), int16]) -> (Tensor[(1600), bool],) {
  @func_1828(%var_1829) /* ty=(Tensor[(1600), bool],) */
}

def @func_3082() -> Tensor[(10, 16, 10), float64] {
  @func_3080() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_1107() -> (Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), float64], Tensor[(1600), bool]) {
  %394 = fn () -> (Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), float64], Tensor[(1600), bool]) {
    %380 = @func_804() /* ty=(Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) */;
    %381 = @func_1067() /* ty=(Tensor[(14, 16, 15), uint64], Tensor[(14, 16, 15), uint8], Tensor[(14, 16, 15), float32]) */;
    %382 = %381.0;
    %383 = cast(%382, dtype="float32") /* ty=Tensor[(14, 16, 15), float32] */;
    %384 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
    %385 = @func_1067() /* ty=(Tensor[(14, 16, 15), uint64], Tensor[(14, 16, 15), uint8], Tensor[(14, 16, 15), float32]) */;
    %386 = %385.0;
    %387 = cast(%386, dtype="float64") /* ty=Tensor[(14, 16, 15), float64] */;
    %388 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %389 = %380.1;
    %390 = acos(%383) /* ty=Tensor[(14, 16, 15), float32] */;
    %391 = %384.0;
    %392 = sigmoid(%387) /* ty=Tensor[(14, 16, 15), float64] */;
    %393 = %388.2;
    (%389, %390, %391, %392, %393)
  };
  %394() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), float64], Tensor[(1600), bool]) */
}

def @func_3930() -> Tensor[(1001), float32] {
  @func_3928() /* ty=Tensor[(1001), float32] */
}

def @func_5187(%var_5185: Tensor[(2, 11, 1), float64]) -> Tensor[(2, 11, 1), float64] {
  @func_5184(%var_5185) /* ty=Tensor[(2, 11, 1), float64] */
}

def @func_1932() -> (Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), bool], Tensor[(10, 16, 10), bool]) {
  @func_1930() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), bool], Tensor[(10, 16, 10), bool]) */
}

def @func_8802() -> Tensor[(14, 16, 15), int8] {
  @func_7162() /* ty=Tensor[(14, 16, 15), int8] */
}

def @func_3723() -> Tensor[(1001), float64] {
  %396 = fn () -> Tensor[(1001), float64] {
    %395 = @func_3176() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(1001), float64]) */;
    %395.1
  };
  %396() /* ty=Tensor[(1001), float64] */
}

def @func_3080() -> Tensor[(10, 16, 10), float64] {
  @func_1478() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_7464(%var_7462: Tensor[(3, 30), float32]) -> (Tensor[(10, 16, 10), float32], Tensor[(15, 3, 2), float32], Tensor[(3, 30), bool]) {
  @func_7461(%var_7462) /* ty=(Tensor[(10, 16, 10), float32], Tensor[(15, 3, 2), float32], Tensor[(3, 30), bool]) */
}

def @func_6590() -> Tensor[(10, 16, 10), float64] {
  @func_6588() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_3322() -> (Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) {
  %403 = fn () -> (Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) {
    %397 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
    %398 = cast(meta[relay.Constant][11] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
    %399 = reshape(%398, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
    %400 = @func_1553(%399) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) */;
    %401 = %397.0;
    %402 = %400.3;
    (%401, %402, meta[relay.Constant][11] /* ty=Tensor[(1001), float32] */)
  };
  %403() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) */
}

def @func_8703() -> (Tensor[(10, 2, 5), uint64],) {
  %406 = fn () -> (Tensor[(10, 2, 5), uint64],) {
    %404 = @func_6862() /* ty=(Tensor[(13, 7, 16), float32], Tensor[(10, 2, 5), uint64], Tensor[(5, 20), uint64]) */;
    %405 = %404.1;
    (%405,)
  };
  %406() /* ty=(Tensor[(10, 2, 5), uint64],) */
}

def @func_9193(%var_9190: Tensor[(12, 9, 12), uint32], %var_9191: Tensor[(56, 26), float64], %var_9192: Tensor[(4, 420), float64]) -> (Tensor[(12, 9, 12), uint32], Tensor[(13, 7, 16), bool], Tensor[(56, 26), float64], Tensor[(8, 14, 15), bool], Tensor[(4, 420), float64], Tensor[(12, 9, 12), float32]) {
  %425 = fn (%var_9168: Tensor[(12, 9, 12), uint32], %var_9174: Tensor[(56, 26), float64], %var_9177: Tensor[(4, 420), float64]) -> (Tensor[(12, 9, 12), uint32], Tensor[(13, 7, 16), bool], Tensor[(56, 26), float64], Tensor[(8, 14, 15), bool], Tensor[(4, 420), float64], Tensor[(12, 9, 12), float32]) {
    %407 = cast(meta[relay.Constant][12] /* ty=Tensor[(12, 9, 12), uint32] */, dtype="uint32") /* ty=Tensor[(12, 9, 12), uint32] */;
    %408 = shape_of(%var_9168, dtype="int32") /* ty=Tensor[(3), int32] */;
    %409 = cast(%var_9168, dtype="uint32") /* ty=Tensor[(12, 9, 12), uint32] */;
    %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %411 = cast(%var_9174, dtype="float64") /* ty=Tensor[(56, 26), float64] */;
    %412 = cast(%var_9174, dtype="uint32") /* ty=Tensor[(56, 26), uint32] */;
    %413 = reshape(%411, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), float64] */;
    %414 = reshape(%412, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), uint32] */;
    %415 = @func_3408(%413, %414) /* ty=(Tensor[(13, 7, 16), bool], Tensor[(13, 77), float32]) */;
    %416 = cast(%var_9177, dtype="float64") /* ty=Tensor[(4, 420), float64] */;
    %417 = cast(%var_9177, dtype="float64") /* ty=Tensor[(4, 420), float64] */;
    %418 = reshape(%416, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float64] */;
    %419 = reshape(%417, newshape=[8, 14, 15]) /* ty=Tensor[(8, 14, 15), float64] */;
    %420 = cast(%var_9168, dtype="float32") /* ty=Tensor[(12, 9, 12), float32] */;
    %421 = maximum(%409, %410) /* ty=Tensor[(12, 9, 12), uint32] */;
    %422 = %415.0;
    %423 = @func_8917(%418, %419) /* ty=Tensor[(8, 14, 15), bool] */;
    %424 = sqrt(%420) /* ty=Tensor[(12, 9, 12), float32] */;
    (%421, %422, %var_9174, %423, %var_9177, %424)
  };
  %425(%var_9190, %var_9191, %var_9192) /* ty=(Tensor[(12, 9, 12), uint32], Tensor[(13, 7, 16), bool], Tensor[(56, 26), float64], Tensor[(8, 14, 15), bool], Tensor[(4, 420), float64], Tensor[(12, 9, 12), float32]) */
}

def @func_9386() -> (Tensor[(15, 9, 11), float32],) {
  @func_9384() /* ty=(Tensor[(15, 9, 11), float32],) */
}

def @func_4210(%var_4192: Tensor[(5, 4, 6), float32]) -> (Tensor[(5, 4, 6), float32], Tensor[(10, 16, 10), float64]) {
  %426 = cast(%var_4192, dtype="float32") /* ty=Tensor[(5, 4, 6), float32] */;
  %427 = log(%426) /* ty=Tensor[(5, 4, 6), float32] */;
  %428 = @func_4054() /* ty=Tensor[(10, 16, 10), float64] */;
  (%427, %428)
}

def @func_5184(%var_5178: Tensor[(2, 11, 1), float64]) -> Tensor[(2, 11, 1), float64] {
  %429 = cast(%var_5178, dtype="float64") /* ty=Tensor[(2, 11, 1), float64] */;
  acosh(%429) /* ty=Tensor[(2, 11, 1), float64] */
}

def @func_2306(%var_2305: Tensor[(14, 16, 16), uint16]) -> Tensor[(14, 16, 16), bool] {
  %434 = fn (%var_2293: Tensor[(14, 16, 16), uint16]) -> Tensor[(14, 16, 16), bool] {
    %430 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 16, 16), uint16] */, dtype="bool") /* ty=Tensor[(14, 16, 16), bool] */;
    %431 = shape_of(%var_2293, dtype="int32") /* ty=Tensor[(3), int32] */;
    %432 = cast(%var_2293, dtype="bool") /* ty=Tensor[(14, 16, 16), bool] */;
    %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%432, %433) /* ty=Tensor[(14, 16, 16), bool] */
  };
  %434(%var_2305) /* ty=Tensor[(14, 16, 16), bool] */
}

def @func_4175() -> Tensor[(10, 16, 10), float32] {
  %435 = @func_3106() /* ty=(Tensor[(10, 16, 10), float32],) */;
  %435.0
}

def @func_4353() -> (Tensor[(10, 16, 10), float64], Tensor[(1600), bool], Tensor[(10, 16, 10), float32]) {
  @func_4351() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(1600), bool], Tensor[(10, 16, 10), float32]) */
}

def @func_8001() -> Tensor[(1600), bool] {
  %437 = fn () -> Tensor[(1600), bool] {
    %436 = @func_1106() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 15), float64], Tensor[(1600), bool]) */;
    %436.4
  };
  %437() /* ty=Tensor[(1600), bool] */
}

def @func_2632(%var_2631: Tensor[(1600), bool]) -> (Tensor[(15, 9, 11), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) {
  %445 = fn (%var_2608: Tensor[(1600), bool]) -> (Tensor[(15, 9, 11), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) {
    %438 = @func_1997() /* ty=(Tensor[(15, 9, 11), float32],) */;
    %439 = cast(%var_2608, dtype="bool") /* ty=Tensor[(1600), bool] */;
    %440 = cast(%var_2608, dtype="bool") /* ty=Tensor[(1600), bool] */;
    %441 = reshape(%439, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
    %442 = reshape(%440, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
    %443 = %438.0;
    %444 = @func_469(%441, %442) /* ty=Tensor[(10, 16, 10), bool] */;
    (%443, %444, %var_2608)
  };
  %445(%var_2631) /* ty=(Tensor[(15, 9, 11), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */
}

def @func_5828() -> (Tensor[(10, 16, 10), bool], Tensor[(15, 9, 11), float32]) {
  @func_5826() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(15, 9, 11), float32]) */
}

def @func_7553() -> Tensor[(1001), float64] {
  %446 = fn () -> Tensor[(1001), float64] {
    @func_5411() /* ty=Tensor[(1001), float64] */
  };
  %446() /* ty=Tensor[(1001), float64] */
}

def @func_8511() -> (Tensor[(10, 16, 10), float32], Tensor[(15, 9, 11), float32], Tensor[(1001), int64], Tensor[(10, 16, 10), float64], Tensor[(1600), int16]) {
  %456 = fn () -> (Tensor[(10, 16, 10), float32], Tensor[(15, 9, 11), float32], Tensor[(1001), int64], Tensor[(10, 16, 10), float64], Tensor[(1600), int16]) {
    %447 = @func_6453() /* ty=(Tensor[(10, 16, 10), float32],) */;
    %448 = @func_4518() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(15, 9, 11), float32]) */;
    %449 = @func_2680() /* ty=(Tensor[(1001), int64], Tensor[(1001), float32]) */;
    %450 = @func_7766() /* ty=(Tensor[(1600), int16], Tensor[(1001), float64]) */;
    %451 = %447.0;
    %452 = %448.1;
    %453 = %449.0;
    %454 = @func_6588() /* ty=Tensor[(10, 16, 10), float64] */;
    %455 = %450.0;
    (%451, %452, %453, %454, %455)
  };
  %456() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(15, 9, 11), float32], Tensor[(1001), int64], Tensor[(10, 16, 10), float64], Tensor[(1600), int16]) */
}

def @func_7661() -> Tensor[(10, 16, 10), float64] {
  %457 = fn () -> Tensor[(10, 16, 10), float64] {
    @func_3080() /* ty=Tensor[(10, 16, 10), float64] */
  };
  %457() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_3450() -> (Tensor[(1600), float32], Tensor[(15, 9, 11), float32]) {
  %458 = @func_1997() /* ty=(Tensor[(15, 9, 11), float32],) */;
  %459 = @func_2152() /* ty=Tensor[(1600), float32] */;
  %460 = %458.0;
  (%459, %460)
}

def @func_2984() -> (Tensor[(13, 77), float32], Tensor[(10, 16, 10), float64], Tensor[(14, 16, 16), bool], Tensor[(3584), uint16], Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) {
  %461 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
  %462 = %461.3;
  %463 = cast(%462, dtype="float32") /* ty=Tensor[(13, 77), float32] */;
  %464 = reshape(%463, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
  %465 = @func_1553(%464) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) */;
  %466 = cast(meta[relay.Constant][14] /* ty=Tensor[(3584), uint16] */, dtype="uint16") /* ty=Tensor[(3584), uint16] */;
  %467 = reshape(%466, newshape=[14, 16, 16]) /* ty=Tensor[(14, 16, 16), uint16] */;
  %468 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %469 = @func_1281() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %470 = %465.0;
  %471 = @func_2304(%467) /* ty=Tensor[(14, 16, 16), bool] */;
  %472 = %468.1;
  %473 = %469.0;
  (%462, %470, %471, meta[relay.Constant][14] /* ty=Tensor[(3584), uint16] */, %472, %473)
}

def @func_2139(%var_2138: Tensor[(10, 2, 5), uint64]) -> (Tensor[(10, 2, 5), uint64], Tensor[(10, 16, 10), float64]) {
  %480 = fn (%var_2126: Tensor[(10, 2, 5), uint64]) -> (Tensor[(10, 2, 5), uint64], Tensor[(10, 16, 10), float64]) {
    %474 = cast(%var_2126, dtype="uint64") /* ty=Tensor[(10, 2, 5), uint64] */;
    %475 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(10, 2, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %476 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 2, 5), uint64] */, dtype="uint64") /* ty=Tensor[(10, 2, 5), uint64] */;
    %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %478 = maximum(%476, %477) /* ty=Tensor[(10, 2, 5), uint64] */;
    %479 = @func_1478() /* ty=Tensor[(10, 16, 10), float64] */;
    (%478, %479)
  };
  %480(%var_2138) /* ty=(Tensor[(10, 2, 5), uint64], Tensor[(10, 16, 10), float64]) */
}

def @func_5403(%var_5377: Tensor[(16, 15, 16), float64], %var_5395: Tensor[(16, 15, 16), float64]) -> (Tensor[(16, 15, 16), uint32], Tensor[(16, 15, 16), float64]) {
  %481 = cast(%var_5377, dtype="float64") /* ty=Tensor[(16, 15, 16), float64] */;
  %482 = asin(%481) /* ty=Tensor[(16, 15, 16), float64] */;
  %483 = cast(%var_5395, dtype="uint32") /* ty=Tensor[(16, 15, 16), uint32] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="uint32") /* ty=Tensor[(16, 15, 16), uint32] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %487 = cast(%482, dtype="float64") /* ty=Tensor[(16, 15, 16), float64] */;
  %488 = right_shift(%485, %486) /* ty=Tensor[(16, 15, 16), uint32] */;
  %489 = log(%487) /* ty=Tensor[(16, 15, 16), float64] */;
  (%488, %489)
}

def @func_6968() -> (Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(13, 7, 16), float64]) {
  %496 = fn () -> (Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(13, 7, 16), float64]) {
    %490 = @func_4045() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float64], Tensor[(1600), bool]) */;
    %491 = @func_4924() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(1600), bool]) */;
    %492 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
    %493 = %490.2;
    %494 = %491.1;
    %495 = %492.0;
    (%493, %494, %495)
  };
  %496() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(13, 7, 16), float64]) */
}

def @func_7855(%var_7840: Tensor[(840, 4), float32]) -> (Tensor[(15, 9, 11), float32], Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(14, 16, 15), bool], Tensor[(840, 4), bool]) {
  %497 = @func_5826() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(15, 9, 11), float32]) */;
  %498 = @func_5488() /* ty=(Tensor[(1600), bool], Tensor[(5, 1, 5), float32], Tensor[(5, 5), float32], Tensor[(1600), uint64]) */;
  %499 = cast(%var_7840, dtype="float32") /* ty=Tensor[(840, 4), float32] */;
  %500 = reshape(%499, newshape=[14, 16, 15]) /* ty=Tensor[(14, 16, 15), float32] */;
  %501 = cast(meta[relay.Constant][16] /* ty=Tensor[(840, 4), float32] */, dtype="bool") /* ty=Tensor[(840, 4), bool] */;
  %502 = shape_of(%var_7840, dtype="int32") /* ty=Tensor[(2), int32] */;
  %503 = cast(%var_7840, dtype="bool") /* ty=Tensor[(840, 4), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %505 = %497.1;
  %506 = @func_4175() /* ty=Tensor[(10, 16, 10), float32] */;
  %507 = %498.0;
  %508 = @func_1634(%500) /* ty=Tensor[(14, 16, 15), bool] */;
  %509 = logical_and(%503, %504) /* ty=Tensor[(840, 4), bool] */;
  (%505, %506, %507, %508, %509)
}

def @func_4056() -> Tensor[(10, 16, 10), float64] {
  @func_4054() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_10256(%var_10248: Tensor[(3360), float32]) -> (Tensor[(1001), int64], Tensor[(1600), bool], Tensor[(3360), float32]) {
  %510 = @func_8510() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(15, 9, 11), float32], Tensor[(1001), int64], Tensor[(10, 16, 10), float64], Tensor[(1600), int16]) */;
  %511 = cast(%var_10248, dtype="float32") /* ty=Tensor[(3360), float32] */;
  %512 = reshape(%511, newshape=[840, 4]) /* ty=Tensor[(840, 4), float32] */;
  %513 = @func_7855(%512) /* ty=(Tensor[(15, 9, 11), float32], Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(14, 16, 15), bool], Tensor[(840, 4), bool]) */;
  %514 = %510.2;
  %515 = %513.2;
  (%514, %515, %var_10248)
}

def @func_8920(%var_8918: Tensor[(8, 14, 15), float64], %var_8919: Tensor[(8, 14, 15), float64]) -> Tensor[(8, 14, 15), bool] {
  %520 = fn (%var_8912: Tensor[(8, 14, 15), float64], %var_8913: Tensor[(8, 14, 15), float64]) -> Tensor[(8, 14, 15), bool] {
    %516 = cast(%var_8913, dtype="bool") /* ty=Tensor[(8, 14, 15), bool] */;
    %517 = shape_of(%var_8912, dtype="int32") /* ty=Tensor[(3), int32] */;
    %518 = cast(%var_8912, dtype="bool") /* ty=Tensor[(8, 14, 15), bool] */;
    %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%518, %519) /* ty=Tensor[(8, 14, 15), bool] */
  };
  %520(%var_8918, %var_8919) /* ty=Tensor[(8, 14, 15), bool] */
}

def @func_2935() -> (Tensor[(1001), int64], Tensor[(1600), int16]) {
  %525 = fn () -> (Tensor[(1001), int64], Tensor[(1600), int16]) {
    %521 = @func_2680() /* ty=(Tensor[(1001), int64], Tensor[(1001), float32]) */;
    %522 = @func_1725() /* ty=(Tensor[(1600), int16],) */;
    %523 = %521.0;
    %524 = %522.0;
    (%523, %524)
  };
  %525() /* ty=(Tensor[(1001), int64], Tensor[(1600), int16]) */
}

def @func_9600() -> Tensor[(10, 16, 10), float32] {
  %526 = @func_2724() /* ty=(Tensor[(1001), float32], Tensor[(2, 800), bool], Tensor[(10, 16, 10), float32]) */;
  %526.2
}

def @func_10125() -> Tensor[(1001), float32] {
  @func_10123() /* ty=Tensor[(1001), float32] */
}

def @main(%var_10540: Tensor[(1, 5, 6), float32], %var_10549: Tensor[(5, 5, 6), float32]) -> (Tensor[(5, 5, 6), float32], Tensor[(?, 5, 6), bool]) {
  %527 = cast(%var_10540, dtype="float32") /* ty=Tensor[(1, 5, 6), float32] */;
  %528 = erf(%527) /* ty=Tensor[(1, 5, 6), float32] */;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(1, 5, 6), float32] */;
  %530 = cast(%var_10549, dtype="float32") /* ty=Tensor[(5, 5, 6), float32] */;
  %531 = cast(%var_10540, dtype="bool") /* ty=Tensor[(1, 5, 6), bool] */;
  %532 = shape_of(%528, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%528, dtype="bool") /* ty=Tensor[(1, 5, 6), bool] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %535 = mod(%529, %530) /* ty=Tensor[(5, 5, 6), float32] */;
  %536 = greater_equal(%533, %534) /* ty=Tensor[(?, 5, 6), bool] */;
  (%535, %536)
}

def @func_4054() -> Tensor[(10, 16, 10), float64] {
  %537 = @func_3662() /* ty=(Tensor[(10, 16, 10), float64],) */;
  %537.0
}

def @func_5706() -> (Tensor[(1001), float64], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), float64]) {
  %545 = fn () -> (Tensor[(1001), float64], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), float64]) {
    %538 = @func_3321() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) */;
    %539 = %538.2;
    %540 = cast(%539, dtype="float64") /* ty=Tensor[(1001), float64] */;
    %541 = @func_3106() /* ty=(Tensor[(10, 16, 10), float32],) */;
    %542 = cosh(%540) /* ty=Tensor[(1001), float64] */;
    %543 = %541.0;
    %544 = @func_3080() /* ty=Tensor[(10, 16, 10), float64] */;
    (%542, %543, %544)
  };
  %545() /* ty=(Tensor[(1001), float64], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), float64]) */
}

def @func_9145() -> Tensor[(14, 16, 15), int8] {
  @func_7162() /* ty=Tensor[(14, 16, 15), int8] */
}

def @func_1161() -> (Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool]) {
  %550 = fn () -> (Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool]) {
    %546 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %547 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %548 = %546.0;
    %549 = %547.1;
    (%548, %549)
  };
  %550() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool]) */
}

def @func_6453() -> (Tensor[(10, 16, 10), float32],) {
  %551 = @func_6237() /* ty=(Tensor[(10, 16, 10), float32],) */;
  %552 = %551.0;
  (%552,)
}

def @func_8632() -> (Tensor[(14, 16, 15), uint64],) {
  %555 = fn () -> (Tensor[(14, 16, 15), uint64],) {
    %553 = @func_1067() /* ty=(Tensor[(14, 16, 15), uint64], Tensor[(14, 16, 15), uint8], Tensor[(14, 16, 15), float32]) */;
    %554 = %553.0;
    (%554,)
  };
  %555() /* ty=(Tensor[(14, 16, 15), uint64],) */
}

def @func_5135(%var_5093: Tensor[(12, 11, 14), float32], %var_5119: Tensor[(100), uint64]) -> (Tensor[(10, 16, 10), float64], Tensor[(1600), float32], Tensor[(10, 16, 10), float64], Tensor[(15, 9, 11), float32], Tensor[(10, 16, 10), float64], Tensor[(100), uint64], Tensor[(12, 11, 14), float64]) {
  %556 = @func_4431() /* ty=(Tensor[(10, 16, 10), float64],) */;
  %557 = @func_1997() /* ty=(Tensor[(15, 9, 11), float32],) */;
  %558 = %556.0;
  %559 = cast(%558, dtype="float32") /* ty=Tensor[(10, 16, 10), float32] */;
  %560 = cast(%var_5119, dtype="uint64") /* ty=Tensor[(100), uint64] */;
  %561 = reshape(%559, newshape=[1600]) /* ty=Tensor[(1600), float32] */;
  %562 = reshape(%560, newshape=[100]) /* ty=Tensor[(100), uint64] */;
  %563 = @func_3541(%561, %562) /* ty=(Tensor[(1600), bool], Tensor[(10, 16, 10), float64], Tensor[(100), uint64]) */;
  %564 = cast(%var_5093, dtype="float32") /* ty=Tensor[(12, 11, 14), float32] */;
  %565 = atanh(%564) /* ty=Tensor[(12, 11, 14), float32] */;
  %566 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 11, 14), float32] */, dtype="float64") /* ty=Tensor[(12, 11, 14), float64] */;
  %567 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%565, dtype="float64") /* ty=Tensor[(12, 11, 14), float64] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %570 = @func_4774() /* ty=Tensor[(1600), float32] */;
  %571 = @func_4054() /* ty=Tensor[(10, 16, 10), float64] */;
  %572 = %557.0;
  %573 = %563.1;
  %574 = mod(%568, %569) /* ty=Tensor[(12, 11, 14), float64] */;
  (%558, %570, %571, %572, %573, %var_5119, %574)
}

def @func_10259(%var_10257: Tensor[(3360), float32]) -> (Tensor[(1001), int64], Tensor[(1600), bool], Tensor[(3360), float32]) {
  @func_10256(%var_10257) /* ty=(Tensor[(1001), int64], Tensor[(1600), bool], Tensor[(3360), float32]) */
}

def @func_3144(%var_3143: Tensor[(8, 13, 2), float32]) -> (Tensor[(8, 13, 2), float32], Tensor[(8, 13, 2), float32]) {
  %580 = fn (%var_3120: Tensor[(8, 13, 2), float32]) -> (Tensor[(8, 13, 2), float32], Tensor[(8, 13, 2), float32]) {
    %575 = cast(-3.74971f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %576 = cast(%var_3120, dtype="float32") /* ty=Tensor[(8, 13, 2), float32] */;
    %577 = cast(%var_3120, dtype="float32") /* ty=Tensor[(8, 13, 2), float32] */;
    %578 = mod(%575, %576) /* ty=Tensor[(8, 13, 2), float32] */;
    %579 = rsqrt(%577) /* ty=Tensor[(8, 13, 2), float32] */;
    (%578, %579)
  };
  %580(%var_3143) /* ty=(Tensor[(8, 13, 2), float32], Tensor[(8, 13, 2), float32]) */
}

def @func_5781() -> (Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32]) {
  %585 = fn () -> (Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32]) {
    %581 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
    %582 = @func_3981() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(13, 7, 16), float64]) */;
    %583 = %581.3;
    %584 = %582.0;
    (%583, %584)
  };
  %585() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32]) */
}

def @func_729(%var_727: Tensor[(11, 7, 13), float32], %var_728: Tensor[(1600), bool]) -> (Tensor[(11, 7, 13), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) {
  @func_725(%var_727, %var_728) /* ty=(Tensor[(11, 7, 13), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */
}

def @func_706() -> (Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) {
  @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */
}

def @func_1800(%var_1778: Tensor[(1001), float32]) -> (Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(1001), float32], Tensor[(10, 16, 10), bool]) {
  %586 = @func_1281() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
  %587 = cast(%var_1778, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %588 = reshape(%587, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
  %589 = @func_1553(%588) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) */;
  %590 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %591 = %586.4;
  %592 = %589.3;
  %593 = %590.0;
  (%591, %592, %var_1778, %593)
}

def @func_4573() -> (Tensor[(10, 16, 10), float32], Tensor[(1600), bool]) {
  %614 = fn () -> (Tensor[(10, 16, 10), float32], Tensor[(1600), bool]) {
    %594 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
    %595 = %594.0;
    %596 = cast(%595, dtype="float32") /* ty=Tensor[(10, 16, 10), float32] */;
    %597 = @func_2934() /* ty=(Tensor[(1001), int64], Tensor[(1600), int16]) */;
    %598 = %597.1;
    %599 = cast(%595, dtype="float32") /* ty=Tensor[(10, 16, 10), float32] */;
    %600 = shape_of(%598, dtype="int32") /* ty=Tensor[(1), int32] */;
    %601 = cast(%598, dtype="float32") /* ty=Tensor[(1600), float32] */;
    %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?), float32] */;
    %603 = divide(%601, %602) /* ty=Tensor[(1600), float32] */;
    %604 = cast(%603, dtype="float64") /* ty=Tensor[(1600), float64] */;
    %605 = acosh(%604) /* ty=Tensor[(1600), float64] */;
    %606 = cast(%595, dtype="float64") /* ty=Tensor[(10, 16, 10), float64] */;
    %607 = tan(%606) /* ty=Tensor[(10, 16, 10), float64] */;
    %608 = cast(%607, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
    %609 = shape_of(%605, dtype="int32") /* ty=Tensor[(1), int32] */;
    %610 = cast(%605, dtype="bool") /* ty=Tensor[(1600), bool] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?), bool] */;
    %612 = sin(%596) /* ty=Tensor[(10, 16, 10), float32] */;
    %613 = not_equal(%610, %611) /* ty=Tensor[(1600), bool] */;
    (%612, %613)
  };
  %614() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(1600), bool]) */
}

def @func_5826() -> (Tensor[(10, 16, 10), bool], Tensor[(15, 9, 11), float32]) {
  %615 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %616 = @func_1997() /* ty=(Tensor[(15, 9, 11), float32],) */;
  %617 = %615.0;
  %618 = %616.0;
  (%617, %618)
}

def @func_4351() -> (Tensor[(10, 16, 10), float64], Tensor[(1600), bool], Tensor[(10, 16, 10), float32]) {
  %619 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
  %620 = @func_3981() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(13, 7, 16), float64]) */;
  %621 = @func_4054() /* ty=Tensor[(10, 16, 10), float64] */;
  %622 = %619.0;
  %623 = %620.0;
  (%621, %622, %623)
}

def @func_7768() -> (Tensor[(1600), int16], Tensor[(1001), float64]) {
  @func_7766() /* ty=(Tensor[(1600), int16], Tensor[(1001), float64]) */
}

def @func_4967() -> (Tensor[(1600), float64],) {
  @func_4965() /* ty=(Tensor[(1600), float64],) */
}

def @func_6760() -> (Tensor[(10, 16, 10), bool],) {
  %626 = fn () -> (Tensor[(10, 16, 10), bool],) {
    %624 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %625 = %624.0;
    (%625,)
  };
  %626() /* ty=(Tensor[(10, 16, 10), bool],) */
}

def @func_6388() -> (Tensor[(10, 16, 10), float32], Tensor[(1001), bool], Tensor[(10, 16, 10), float32], Tensor[(1001), float32]) {
  %642 = fn () -> (Tensor[(10, 16, 10), float32], Tensor[(1001), bool], Tensor[(10, 16, 10), float32], Tensor[(1001), float32]) {
    %627 = @func_5337() /* ty=(Tensor[(10, 16, 10), float32],) */;
    %628 = cast(meta[relay.Constant][18] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
    %629 = reshape(%628, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
    %630 = @func_4625(%629) /* ty=Tensor[(13, 77), int8] */;
    %631 = cast(%630, dtype="bool") /* ty=Tensor[(13, 77), bool] */;
    %632 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(1001), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %633 = cast(meta[relay.Constant][18] /* ty=Tensor[(1001), float32] */, dtype="bool") /* ty=Tensor[(1001), bool] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?), bool] */;
    %635 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %636 = %635.0;
    %637 = cast(%636, dtype="float32") /* ty=Tensor[(10, 16, 10), float32] */;
    %638 = %627.0;
    %639 = not_equal(%633, %634) /* ty=Tensor[(1001), bool] */;
    %640 = exp(%637) /* ty=Tensor[(10, 16, 10), float32] */;
    %641 = @func_6161() /* ty=Tensor[(1001), float32] */;
    (%638, %639, %640, %641)
  };
  %642() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(1001), bool], Tensor[(10, 16, 10), float32], Tensor[(1001), float32]) */
}

def @func_1828(%var_1809: Tensor[(1600), int16]) -> (Tensor[(1600), bool],) {
  %643 = @func_1725() /* ty=(Tensor[(1600), int16],) */;
  %644 = %643.0;
  %645 = cast(%var_1809, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(1), int32] */;
  %647 = cast(%644, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?), bool] */;
  %649 = greater_equal(%647, %648) /* ty=Tensor[(1600), bool] */;
  (%649,)
}

def @func_1771(%var_1769: Tensor[(9, 2, 12), int32], %var_1770: Tensor[(9, 2, 12), int32]) -> (Tensor[(9, 2, 12), int32],) {
  @func_1767(%var_1769, %var_1770) /* ty=(Tensor[(9, 2, 12), int32],) */
}

def @func_8042() -> (Tensor[(8, 16, 14), float32],) {
  %652 = fn () -> (Tensor[(8, 16, 14), float32],) {
    %650 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
    %651 = atanh(%650) /* ty=Tensor[(8, 16, 14), float32] */;
    (%651,)
  };
  %652() /* ty=(Tensor[(8, 16, 14), float32],) */
}

def @func_9608() -> (Tensor[(1001), uint16],) {
  %655 = fn () -> (Tensor[(1001), uint16],) {
    %653 = @func_8166() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1001), uint16], Tensor[(10, 16, 10), float64]) */;
    %654 = %653.1;
    (%654,)
  };
  %655() /* ty=(Tensor[(1001), uint16],) */
}

def @func_8555() -> (Tensor[(1001), float32],) {
  @func_8553() /* ty=(Tensor[(1001), float32],) */
}

def @func_6213() -> (Tensor[(1001), float32], Tensor[(10, 16, 10), float64]) {
  %658 = fn () -> (Tensor[(1001), float32], Tensor[(10, 16, 10), float64]) {
    %656 = @func_5654() /* ty=Tensor[(1001), float32] */;
    %657 = @func_1478() /* ty=Tensor[(10, 16, 10), float64] */;
    (%656, %657)
  };
  %658() /* ty=(Tensor[(1001), float32], Tensor[(10, 16, 10), float64]) */
}

def @func_5984(%var_5983: Tensor[(120), float32]) -> (Tensor[(1600), float32], Tensor[(4, 3, 10), float32], Tensor[(120), float32]) {
  %664 = fn (%var_5969: Tensor[(120), float32]) -> (Tensor[(1600), float32], Tensor[(4, 3, 10), float32], Tensor[(120), float32]) {
    %659 = cast(%var_5969, dtype="float32") /* ty=Tensor[(120), float32] */;
    %660 = reshape(%659, newshape=[4, 3, 10]) /* ty=Tensor[(4, 3, 10), float32] */;
    %661 = @func_5843(%660) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(1001), float32]) */;
    %662 = @func_2152() /* ty=Tensor[(1600), float32] */;
    %663 = %661.0;
    (%662, %663, %var_5969)
  };
  %664(%var_5983) /* ty=(Tensor[(1600), float32], Tensor[(4, 3, 10), float32], Tensor[(120), float32]) */
}

def @func_1998() -> (Tensor[(15, 9, 11), float32],) {
  %667 = fn () -> (Tensor[(15, 9, 11), float32],) {
    %665 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 9, 11), float32] */, dtype="float32") /* ty=Tensor[(15, 9, 11), float32] */;
    %666 = log10(%665) /* ty=Tensor[(15, 9, 11), float32] */;
    (%666,)
  };
  %667() /* ty=(Tensor[(15, 9, 11), float32],) */
}

def @func_5845(%var_5844: Tensor[(4, 3, 10), float32]) -> (Tensor[(4, 3, 10), float32], Tensor[(1001), float32]) {
  %672 = fn (%var_5832: Tensor[(4, 3, 10), float32]) -> (Tensor[(4, 3, 10), float32], Tensor[(1001), float32]) {
    %668 = cast(%var_5832, dtype="float32") /* ty=Tensor[(4, 3, 10), float32] */;
    %669 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
    %670 = log(%668) /* ty=Tensor[(4, 3, 10), float32] */;
    %671 = %669.2;
    (%670, %671)
  };
  %672(%var_5844) /* ty=(Tensor[(4, 3, 10), float32], Tensor[(1001), float32]) */
}

def @func_1282() -> (Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) {
  %685 = fn () -> (Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) {
    %673 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
    %674 = cast(meta[relay.Constant][21] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
    %675 = %673.2;
    %676 = cast(%675, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
    %677 = reshape(%674, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float32] */;
    %678 = reshape(%676, newshape=[1600]) /* ty=Tensor[(1600), bool] */;
    %679 = @func_725(%677, %678) /* ty=(Tensor[(11, 7, 13), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %680 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
    %681 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %682 = %679.0;
    %683 = %680.3;
    %684 = %681.0;
    (%675, %682, meta[relay.Constant][21] /* ty=Tensor[(1001), float32] */, %683, %684)
  };
  %685() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */
}

def @func_3791(%var_3789: Tensor[(14, 13, 1), uint8], %var_3790: Tensor[(14, 13, 1), uint8]) -> (Tensor[(14, 13, ?), uint8],) {
  %691 = fn (%var_3779: Tensor[(14, 13, 1), uint8], %var_3780: Tensor[(14, 13, 1), uint8]) -> (Tensor[(14, 13, ?), uint8],) {
    %686 = cast(%var_3780, dtype="uint8") /* ty=Tensor[(14, 13, 1), uint8] */;
    %687 = shape_of(%var_3779, dtype="int32") /* ty=Tensor[(3), int32] */;
    %688 = cast(%var_3779, dtype="uint8") /* ty=Tensor[(14, 13, 1), uint8] */;
    %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %690 = maximum(%688, %689) /* ty=Tensor[(14, 13, ?), uint8] */;
    (%690,)
  };
  %691(%var_3789, %var_3790) /* ty=(Tensor[(14, 13, ?), uint8],) */
}

def @func_5952() -> (Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) {
  %692 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %693 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
  %694 = @func_2900() /* ty=(Tensor[(1600), int16], Tensor[(1001), float32], Tensor[(1001), float32]) */;
  %695 = %692.0;
  %696 = @func_4384() /* ty=Tensor[(10, 16, 10), float64] */;
  %697 = %693.3;
  %698 = %694.2;
  (%695, %696, %697, %698)
}

def @func_3982() -> (Tensor[(10, 16, 10), float32], Tensor[(13, 7, 16), float64]) {
  %703 = fn () -> (Tensor[(10, 16, 10), float32], Tensor[(13, 7, 16), float64]) {
    %699 = @func_2724() /* ty=(Tensor[(1001), float32], Tensor[(2, 800), bool], Tensor[(10, 16, 10), float32]) */;
    %700 = @func_1007() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float32], Tensor[(10, 16, 10), bool]) */;
    %701 = %699.2;
    %702 = %700.1;
    (%701, %702)
  };
  %703() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(13, 7, 16), float64]) */
}

def @func_10214() -> Tensor[(1001), float32] {
  %705 = fn () -> Tensor[(1001), float32] {
    %704 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
    %704.3
  };
  %705() /* ty=Tensor[(1001), float32] */
}

def @func_6668(%var_6666: Tensor[(100), uint64]) -> (Tensor[(10, 16, 10), bool], Tensor[(15, 9, 11), float32], Tensor[(10, 2, 5), uint64], Tensor[(100), uint64]) {
  @func_6665(%var_6666) /* ty=(Tensor[(10, 16, 10), bool], Tensor[(15, 9, 11), float32], Tensor[(10, 2, 5), uint64], Tensor[(100), uint64]) */
}

def @func_3545(%var_3543: Tensor[(1600), float32], %var_3544: Tensor[(100), uint64]) -> (Tensor[(1600), bool], Tensor[(10, 16, 10), float64], Tensor[(100), uint64]) {
  @func_3541(%var_3543, %var_3544) /* ty=(Tensor[(1600), bool], Tensor[(10, 16, 10), float64], Tensor[(100), uint64]) */
}

def @func_9228() -> (Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1600), float32]) {
  %711 = fn () -> (Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1600), float32]) {
    %706 = @func_6967() /* ty=(Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(13, 7, 16), float64]) */;
    %707 = @func_4045() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float64], Tensor[(1600), bool]) */;
    %708 = %706.2;
    %709 = %707.2;
    %710 = @func_4774() /* ty=Tensor[(1600), float32] */;
    (%708, %709, %710)
  };
  %711() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1600), float32]) */
}

def @func_9571() -> (Tensor[(10, 16, 10), bool],) {
  %712 = @func_5952() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) */;
  %713 = %712.2;
  (%713,)
}

def @func_2844(%var_2842: Tensor[(13, 77), float32]) -> (Tensor[(13, 77), bool], Tensor[(13, 77), float64]) {
  @func_2841(%var_2842) /* ty=(Tensor[(13, 77), bool], Tensor[(13, 77), float64]) */
}

def @func_9036() -> (Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) {
  %717 = fn () -> (Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) {
    %714 = @func_1160() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool]) */;
    %715 = %714.1;
    %716 = @func_6161() /* ty=Tensor[(1001), float32] */;
    (%715, %716)
  };
  %717() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) */
}

def @func_628() -> (Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) {
  @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */
}

def @func_3452() -> (Tensor[(1600), float32], Tensor[(15, 9, 11), float32]) {
  @func_3450() /* ty=(Tensor[(1600), float32], Tensor[(15, 9, 11), float32]) */
}

def @func_7424(%var_7423: Tensor[(960, 4), float64]) -> (Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(960, 4), uint32], Tensor[(13, 7, 16), float64], Tensor[(100), uint64]) {
  %736 = fn (%var_7346: Tensor[(960, 4), float64]) -> (Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(960, 4), uint32], Tensor[(13, 7, 16), float64], Tensor[(100), uint64]) {
    %718 = @func_3321() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(1001), float32]) */;
    %719 = cast(%var_7346, dtype="float64") /* ty=Tensor[(960, 4), float64] */;
    %720 = cast(%var_7346, dtype="float64") /* ty=Tensor[(960, 4), float64] */;
    %721 = reshape(%719, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float64] */;
    %722 = reshape(%720, newshape=[16, 15, 16]) /* ty=Tensor[(16, 15, 16), float64] */;
    %723 = @func_5403(%721, %722) /* ty=(Tensor[(16, 15, 16), uint32], Tensor[(16, 15, 16), float64]) */;
    %724 = %723.0;
    %725 = cast(%724, dtype="uint32") /* ty=Tensor[(16, 15, 16), uint32] */;
    %726 = shape_of(%var_7346, dtype="int32") /* ty=Tensor[(2), int32] */;
    %727 = cast(%var_7346, dtype="uint32") /* ty=Tensor[(960, 4), uint32] */;
    %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %729 = @func_7252() /* ty=(Tensor[(1001), float32], Tensor[(13, 77), float32], Tensor[(13, 7, 16), float64], Tensor[(14, 16, 15), int8]) */;
    %730 = @func_2500() /* ty=(Tensor[(14, 16, 15), float64], Tensor[(10, 16, 10), float64], Tensor[(100), uint64], Tensor[(10, 16, 10), bool], Tensor[(3584), float64]) */;
    %731 = @func_3080() /* ty=Tensor[(10, 16, 10), float64] */;
    %732 = %718.1;
    %733 = logical_xor(%727, %728) /* ty=Tensor[(960, 4), uint32] */;
    %734 = %729.2;
    %735 = %730.2;
    (%731, %732, %733, %734, %735)
  };
  %736(%var_7423) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(960, 4), uint32], Tensor[(13, 7, 16), float64], Tensor[(100), uint64]) */
}

def @func_5407(%var_5405: Tensor[(16, 15, 16), float64], %var_5406: Tensor[(16, 15, 16), float64]) -> (Tensor[(16, 15, 16), uint32], Tensor[(16, 15, 16), float64]) {
  @func_5403(%var_5405, %var_5406) /* ty=(Tensor[(16, 15, 16), uint32], Tensor[(16, 15, 16), float64]) */
}

def @func_1068() -> (Tensor[(14, 16, 15), uint64], Tensor[(14, 16, 15), uint8], Tensor[(14, 16, 15), float32]) {
  %745 = fn () -> (Tensor[(14, 16, 15), uint64], Tensor[(14, 16, 15), uint8], Tensor[(14, 16, 15), float32]) {
    %737 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 16, 1), uint64] */, dtype="uint64") /* ty=Tensor[(14, 16, 1), uint64] */;
    %738 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 16, 15), uint64] */, dtype="uint64") /* ty=Tensor[(14, 16, 15), uint64] */;
    %739 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 16, 1), uint64] */, dtype="uint8") /* ty=Tensor[(14, 16, 1), uint8] */;
    %740 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 16, 15), uint64] */, dtype="uint8") /* ty=Tensor[(14, 16, 15), uint8] */;
    %741 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 16, 15), uint64] */, dtype="float32") /* ty=Tensor[(14, 16, 15), float32] */;
    %742 = bitwise_and(%737, %738) /* ty=Tensor[(14, 16, 15), uint64] */;
    %743 = bitwise_xor(%739, %740) /* ty=Tensor[(14, 16, 15), uint8] */;
    %744 = sqrt(%741) /* ty=Tensor[(14, 16, 15), float32] */;
    (%742, %743, %744)
  };
  %745() /* ty=(Tensor[(14, 16, 15), uint64], Tensor[(14, 16, 15), uint8], Tensor[(14, 16, 15), float32]) */
}

def @func_1478() -> Tensor[(10, 16, 10), float64] {
  %746 = @func_1160() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool]) */;
  %747 = %746.1;
  %748 = cast(%747, dtype="float64") /* ty=Tensor[(10, 16, 10), float64] */;
  rsqrt(%748) /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_5249(%var_5247: Tensor[(120), float32]) -> (Tensor[(13, 7, 16), float64], Tensor[(3584), float64], Tensor[(10, 16, 10), float64], Tensor[(120), float32]) {
  @func_5246(%var_5247) /* ty=(Tensor[(13, 7, 16), float64], Tensor[(3584), float64], Tensor[(10, 16, 10), float64], Tensor[(120), float32]) */
}

def @func_7858(%var_7856: Tensor[(840, 4), float32]) -> (Tensor[(15, 9, 11), float32], Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(14, 16, 15), bool], Tensor[(840, 4), bool]) {
  @func_7855(%var_7856) /* ty=(Tensor[(15, 9, 11), float32], Tensor[(10, 16, 10), float32], Tensor[(1600), bool], Tensor[(14, 16, 15), bool], Tensor[(840, 4), bool]) */
}

def @func_3817() -> (Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) {
  @func_3815() /* ty=(Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) */
}

def @func_776() -> (Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) {
  %762 = fn () -> (Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) {
    %749 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
    %750 = %749.1;
    %751 = cast(%750, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
    %752 = cast(%750, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
    %753 = reshape(%751, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
    %754 = reshape(%752, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
    %755 = cast(meta[relay.Constant][25] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
    %756 = cast(%750, dtype="bool") /* ty=Tensor[(10, 16, 10), bool] */;
    %757 = reshape(%755, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float32] */;
    %758 = reshape(%756, newshape=[1600]) /* ty=Tensor[(1600), bool] */;
    %759 = @func_725(%757, %758) /* ty=(Tensor[(11, 7, 13), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %760 = @func_469(%753, %754) /* ty=Tensor[(10, 16, 10), bool] */;
    %761 = %759.0;
    (%750, %760, %761, meta[relay.Constant][25] /* ty=Tensor[(1001), float32] */)
  };
  %762() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */
}

def @func_4385() -> Tensor[(10, 16, 10), float64] {
  %764 = fn () -> Tensor[(10, 16, 10), float64] {
    %763 = @func_3662() /* ty=(Tensor[(10, 16, 10), float64],) */;
    %763.0
  };
  %764() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_4146(%var_4144: Tensor[(15, 1, 2), float32], %var_4145: Tensor[(15, 3, 2), float32]) -> (Tensor[(15, 3, 2), float32], Tensor[(15, 3, 2), float32]) {
  %770 = fn (%var_4130: Tensor[(15, 1, 2), float32], %var_4131: Tensor[(15, 3, 2), float32]) -> (Tensor[(15, 3, 2), float32], Tensor[(15, 3, 2), float32]) {
    %765 = cast(%var_4130, dtype="float32") /* ty=Tensor[(15, 1, 2), float32] */;
    %766 = cast(%var_4131, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
    %767 = cast(%var_4131, dtype="float32") /* ty=Tensor[(15, 3, 2), float32] */;
    %768 = maximum(%765, %766) /* ty=Tensor[(15, 3, 2), float32] */;
    %769 = atan(%767) /* ty=Tensor[(15, 3, 2), float32] */;
    (%768, %769)
  };
  %770(%var_4144, %var_4145) /* ty=(Tensor[(15, 3, 2), float32], Tensor[(15, 3, 2), float32]) */
}

def @func_6187() -> (Tensor[(1001), float32],) {
  @func_6185() /* ty=(Tensor[(1001), float32],) */
}

def @func_4213(%var_4211: Tensor[(5, 4, 6), float32]) -> (Tensor[(5, 4, 6), float32], Tensor[(10, 16, 10), float64]) {
  @func_4210(%var_4211) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(10, 16, 10), float64]) */
}

def @func_2773(%var_2772: Tensor[(5, 1, 5), float32]) -> (Tensor[(5, 1, 5), float32],) {
  %773 = fn (%var_2763: Tensor[(5, 1, 5), float32]) -> (Tensor[(5, 1, 5), float32],) {
    %771 = cast(%var_2763, dtype="float32") /* ty=Tensor[(5, 1, 5), float32] */;
    %772 = erf(%771) /* ty=Tensor[(5, 1, 5), float32] */;
    (%772,)
  };
  %773(%var_2772) /* ty=(Tensor[(5, 1, 5), float32],) */
}

def @func_6133() -> (Tensor[(1001), float64], Tensor[(10, 16, 10), bool]) {
  %777 = fn () -> (Tensor[(1001), float64], Tensor[(10, 16, 10), bool]) {
    %774 = @func_3004() /* ty=(Tensor[(10, 16, 10), bool],) */;
    %775 = @func_5411() /* ty=Tensor[(1001), float64] */;
    %776 = %774.0;
    (%775, %776)
  };
  %777() /* ty=(Tensor[(1001), float64], Tensor[(10, 16, 10), bool]) */
}

def @func_6551(%var_6550: Tensor[(13, 77), float32]) -> (Tensor[(1001), float32], Tensor[(13, 77), bool]) {
  %792 = fn (%var_6528: Tensor[(13, 77), float32]) -> (Tensor[(1001), float32], Tensor[(13, 77), bool]) {
    %778 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
    %779 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
    %780 = %779.1;
    %781 = cast(%var_6528, dtype="uint64") /* ty=Tensor[(13, 77), uint64] */;
    %782 = shape_of(%780, dtype="int32") /* ty=Tensor[(2), int32] */;
    %783 = cast(%780, dtype="uint64") /* ty=Tensor[(13, 77), uint64] */;
    %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %785 = left_shift(%783, %784) /* ty=Tensor[(13, 77), uint64] */;
    %786 = cast(%785, dtype="bool") /* ty=Tensor[(13, 77), bool] */;
    %787 = shape_of(%var_6528, dtype="int32") /* ty=Tensor[(2), int32] */;
    %788 = cast(%var_6528, dtype="bool") /* ty=Tensor[(13, 77), bool] */;
    %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %790 = %778.3;
    %791 = less(%788, %789) /* ty=Tensor[(13, 77), bool] */;
    (%790, %791)
  };
  %792(%var_6550) /* ty=(Tensor[(1001), float32], Tensor[(13, 77), bool]) */
}

def @func_626() -> (Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) {
  %793 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(13, 7, 16), float64] */;
  %794 = cast(meta[relay.Constant][27] /* ty=Tensor[(1600), bool] */, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %795 = cast(meta[relay.Constant][27] /* ty=Tensor[(1600), bool] */, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %796 = reshape(%794, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %797 = reshape(%795, newshape=[10, 16, 10]) /* ty=Tensor[(10, 16, 10), bool] */;
  %798 = sqrt(%793) /* ty=Tensor[(13, 7, 16), float64] */;
  %799 = @func_469(%796, %797) /* ty=Tensor[(10, 16, 10), bool] */;
  (%798, %799, meta[relay.Constant][27] /* ty=Tensor[(1600), bool] */)
}

def @func_8870() -> (Tensor[(1001), float32], Tensor[(1001), float32], Tensor[(1600), bool], Tensor[(14, 16, 15), int16]) {
  @func_8868() /* ty=(Tensor[(1001), float32], Tensor[(1001), float32], Tensor[(1600), bool], Tensor[(14, 16, 15), int16]) */
}

def @func_2841(%var_2828: Tensor[(13, 77), float32]) -> (Tensor[(13, 77), bool], Tensor[(13, 77), float64]) {
  %800 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
  %801 = %800.3;
  %802 = cast(%var_2828, dtype="bool") /* ty=Tensor[(13, 77), bool] */;
  %803 = shape_of(%801, dtype="int32") /* ty=Tensor[(2), int32] */;
  %804 = cast(%801, dtype="bool") /* ty=Tensor[(13, 77), bool] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %806 = cast(%var_2828, dtype="float64") /* ty=Tensor[(13, 77), float64] */;
  %807 = shape_of(%801, dtype="int32") /* ty=Tensor[(2), int32] */;
  %808 = cast(%801, dtype="float64") /* ty=Tensor[(13, 77), float64] */;
  %809 = dyn.reshape(%806, %807, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %810 = greater(%804, %805) /* ty=Tensor[(13, 77), bool] */;
  %811 = subtract(%808, %809) /* ty=Tensor[(13, 77), float64] */;
  (%810, %811)
}

def @func_2250() -> (Tensor[(1001), float32],) {
  %812 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %813 = %812.3;
  %814 = cast(%813, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %815 = sinh(%814) /* ty=Tensor[(1001), float64] */;
  %816 = cast(%815, dtype="float64") /* ty=Tensor[(1001), float64] */;
  %817 = asin(%816) /* ty=Tensor[(1001), float64] */;
  %818 = cast(%815, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %819 = shape_of(%817, dtype="int32") /* ty=Tensor[(1), int32] */;
  %820 = cast(%817, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?), float32] */;
  %822 = floor_mod(%820, %821) /* ty=Tensor[(1001), float32] */;
  (%822,)
}

def @func_8935() -> (Tensor[(13, 7, 16), float64],) {
  @func_8933() /* ty=(Tensor[(13, 7, 16), float64],) */
}

def @func_1480() -> Tensor[(10, 16, 10), float64] {
  @func_1478() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_2252() -> (Tensor[(1001), float32],) {
  @func_2250() /* ty=(Tensor[(1001), float32],) */
}

def @func_3662() -> (Tensor[(10, 16, 10), float64],) {
  %823 = @func_2428() /* ty=(Tensor[(14, 16, 15), int16], Tensor[(10, 16, 10), float64]) */;
  %824 = %823.1;
  (%824,)
}

def @func_5887() -> (Tensor[(3, 11, 11), int32], Tensor[(1001), float64], Tensor[(3, 11, 11), float32]) {
  %831 = fn () -> (Tensor[(3, 11, 11), int32], Tensor[(1001), float64], Tensor[(3, 11, 11), float32]) {
    %825 = cast(9 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %826 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 11, 11), int32] */, dtype="int32") /* ty=Tensor[(3, 11, 11), int32] */;
    %827 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 11, 11), int32] */, dtype="float32") /* ty=Tensor[(3, 11, 11), float32] */;
    %828 = bitwise_and(%825, %826) /* ty=Tensor[(3, 11, 11), int32] */;
    %829 = @func_3722() /* ty=Tensor[(1001), float64] */;
    %830 = cos(%827) /* ty=Tensor[(3, 11, 11), float32] */;
    (%828, %829, %830)
  };
  %831() /* ty=(Tensor[(3, 11, 11), int32], Tensor[(1001), float64], Tensor[(3, 11, 11), float32]) */
}

def @func_2428() -> (Tensor[(14, 16, 15), int16], Tensor[(10, 16, 10), float64]) {
  %832 = @func_1067() /* ty=(Tensor[(14, 16, 15), uint64], Tensor[(14, 16, 15), uint8], Tensor[(14, 16, 15), float32]) */;
  %833 = %832.2;
  %834 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 16, 15), float32] */, dtype="int16") /* ty=Tensor[(14, 16, 15), int16] */;
  %835 = shape_of(%833, dtype="int32") /* ty=Tensor[(3), int32] */;
  %836 = cast(%833, dtype="int16") /* ty=Tensor[(14, 16, 15), int16] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %838 = left_shift(%836, %837) /* ty=Tensor[(14, 16, 15), int16] */;
  %839 = @func_1478() /* ty=Tensor[(10, 16, 10), float64] */;
  (%838, %839)
}

def @func_5246(%var_5243: Tensor[(120), float32]) -> (Tensor[(13, 7, 16), float64], Tensor[(3584), float64], Tensor[(10, 16, 10), float64], Tensor[(120), float32]) {
  %840 = @func_4045() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float64], Tensor[(1600), bool]) */;
  %841 = @func_2500() /* ty=(Tensor[(14, 16, 15), float64], Tensor[(10, 16, 10), float64], Tensor[(100), uint64], Tensor[(10, 16, 10), bool], Tensor[(3584), float64]) */;
  %842 = %841.4;
  %843 = cast(%842, dtype="float64") /* ty=Tensor[(3584), float64] */;
  %844 = cast(%var_5243, dtype="float32") /* ty=Tensor[(120), float32] */;
  %845 = reshape(%844, newshape=[5, 4, 6]) /* ty=Tensor[(5, 4, 6), float32] */;
  %846 = @func_4210(%845) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(10, 16, 10), float64]) */;
  %847 = %840.4;
  %848 = log10(%843) /* ty=Tensor[(3584), float64] */;
  %849 = %846.1;
  (%847, %848, %849, %var_5243)
}

def @func_5579() -> (Tensor[(1600), bool], Tensor[(1600), float32], Tensor[(13, 77), int8], Tensor[(1001), float32], Tensor[(1600), bool]) {
  @func_5577() /* ty=(Tensor[(1600), bool], Tensor[(1600), float32], Tensor[(13, 77), int8], Tensor[(1001), float32], Tensor[(1600), bool]) */
}

def @func_3864(%var_3852: Tensor[(8, 448), uint16]) -> (Tensor[(10, 16, 10), bool], Tensor[(14, 16, 16), bool], Tensor[(8, 448), uint16], Tensor[(1001), float32]) {
  %850 = @func_775() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(11, 7, 13), float32], Tensor[(1001), float32]) */;
  %851 = cast(%var_3852, dtype="uint16") /* ty=Tensor[(8, 448), uint16] */;
  %852 = reshape(%851, newshape=[14, 16, 16]) /* ty=Tensor[(14, 16, 16), uint16] */;
  %853 = @func_2900() /* ty=(Tensor[(1600), int16], Tensor[(1001), float32], Tensor[(1001), float32]) */;
  %854 = %850.1;
  %855 = @func_2304(%852) /* ty=Tensor[(14, 16, 16), bool] */;
  %856 = %853.2;
  (%854, %855, %var_3852, %856)
}

def @func_3815() -> (Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) {
  %857 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %858 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
  %859 = %857.1;
  %860 = %858.3;
  (%859, %860)
}

def @func_4758() -> (Tensor[(1600), int16],) {
  %863 = fn () -> (Tensor[(1600), int16],) {
    %861 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
    %862 = %861.1;
    (%862,)
  };
  %863() /* ty=(Tensor[(1600), int16],) */
}

def @func_7461(%var_7434: Tensor[(3, 30), float32]) -> (Tensor[(10, 16, 10), float32], Tensor[(15, 3, 2), float32], Tensor[(3, 30), bool]) {
  %864 = @func_3106() /* ty=(Tensor[(10, 16, 10), float32],) */;
  %865 = cast(meta[relay.Constant][30] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %866 = cast(%var_7434, dtype="float32") /* ty=Tensor[(3, 30), float32] */;
  %867 = reshape(%865, newshape=[15, 1, 2]) /* ty=Tensor[(15, 1, 2), float32] */;
  %868 = reshape(%866, newshape=[15, 3, 2]) /* ty=Tensor[(15, 3, 2), float32] */;
  %869 = @func_4143(%867, %868) /* ty=(Tensor[(15, 3, 2), float32], Tensor[(15, 3, 2), float32]) */;
  %870 = cast(meta[relay.Constant][30] /* ty=Tensor[(30), float32] */, dtype="bool") /* ty=Tensor[(30), bool] */;
  %871 = cast(%var_7434, dtype="bool") /* ty=Tensor[(3, 30), bool] */;
  %872 = %864.0;
  %873 = %869.0;
  %874 = not_equal(%870, %871) /* ty=Tensor[(3, 30), bool] */;
  (%872, %873, %874)
}

def @func_7163() -> Tensor[(14, 16, 15), int8] {
  %881 = fn () -> Tensor[(14, 16, 15), int8] {
    %875 = @func_1930() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(14, 16, 15), bool], Tensor[(10, 16, 10), bool]) */;
    %876 = %875.1;
    %877 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 16, 15), bool] */, dtype="int8") /* ty=Tensor[(14, 16, 15), int8] */;
    %878 = shape_of(%876, dtype="int32") /* ty=Tensor[(3), int32] */;
    %879 = cast(%876, dtype="int8") /* ty=Tensor[(14, 16, 15), int8] */;
    %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    logical_xor(%879, %880) /* ty=Tensor[(14, 16, 15), int8] */
  };
  %881() /* ty=Tensor[(14, 16, 15), int8] */
}

def @func_8411(%var_8409: Tensor[(1001), float32], %var_8410: Tensor[(3840), float64]) -> (Tensor[(1001), bool], Tensor[(16, 15, 16), float64], Tensor[(3840), float64]) {
  @func_8407(%var_8409, %var_8410) /* ty=(Tensor[(1001), bool], Tensor[(16, 15, 16), float64], Tensor[(3840), float64]) */
}

def @func_6161() -> Tensor[(1001), float32] {
  %882 = @func_2250() /* ty=(Tensor[(1001), float32],) */;
  %882.0
}

def @func_6588() -> Tensor[(10, 16, 10), float64] {
  @func_4806() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_7608(%var_7606: Tensor[(15, 1, 12), float32], %var_7607: Tensor[(1001), float32]) -> (Tensor[(15, 1, 12), float32], Tensor[(10, 16, 10), bool], Tensor[(1001), float32], Tensor[(10, 16, 10), float32]) {
  %891 = fn (%var_7559: Tensor[(15, 1, 12), float32], %var_7578: Tensor[(1001), float32]) -> (Tensor[(15, 1, 12), float32], Tensor[(10, 16, 10), bool], Tensor[(1001), float32], Tensor[(10, 16, 10), float32]) {
    %883 = cast(%var_7559, dtype="float32") /* ty=Tensor[(15, 1, 12), float32] */;
    %884 = cast(%var_7578, dtype="float32") /* ty=Tensor[(1001), float32] */;
    %885 = reshape(%884, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
    %886 = @func_1553(%885) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) */;
    %887 = @func_6237() /* ty=(Tensor[(10, 16, 10), float32],) */;
    %888 = rsqrt(%883) /* ty=Tensor[(15, 1, 12), float32] */;
    %889 = %886.1;
    %890 = %887.0;
    (%888, %889, %var_7578, %890)
  };
  %891(%var_7606, %var_7607) /* ty=(Tensor[(15, 1, 12), float32], Tensor[(10, 16, 10), bool], Tensor[(1001), float32], Tensor[(10, 16, 10), float32]) */
}

def @func_4775() -> Tensor[(1600), float32] {
  %894 = fn () -> Tensor[(1600), float32] {
    %892 = @func_2152() /* ty=Tensor[(1600), float32] */;
    %893 = cast(%892, dtype="float32") /* ty=Tensor[(1600), float32] */;
    acos(%893) /* ty=Tensor[(1600), float32] */
  };
  %894() /* ty=Tensor[(1600), float32] */
}

def @func_5738() -> (Tensor[(1001), float32], Tensor[(10, 16, 10), bool]) {
  @func_5736() /* ty=(Tensor[(1001), float32], Tensor[(10, 16, 10), bool]) */
}

def @func_5577() -> (Tensor[(1600), bool], Tensor[(1600), float32], Tensor[(13, 77), int8], Tensor[(1001), float32], Tensor[(1600), bool]) {
  %895 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %896 = cast(meta[relay.Constant][32] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %897 = reshape(%896, newshape=[13, 77]) /* ty=Tensor[(13, 77), float32] */;
  %898 = @func_3230() /* ty=(Tensor[(1600), bool],) */;
  %899 = %895.1;
  %900 = @func_4774() /* ty=Tensor[(1600), float32] */;
  %901 = @func_4625(%897) /* ty=Tensor[(13, 77), int8] */;
  %902 = %898.0;
  (%899, %900, %901, meta[relay.Constant][32] /* ty=Tensor[(1001), float32] */, %902)
}

def @func_2900() -> (Tensor[(1600), int16], Tensor[(1001), float32], Tensor[(1001), float32]) {
  %903 = @func_1725() /* ty=(Tensor[(1600), int16],) */;
  %904 = cast(meta[relay.Constant][33] /* ty=Tensor[(1001), float32] */, dtype="float32") /* ty=Tensor[(1001), float32] */;
  %905 = reshape(%904, newshape=[1001]) /* ty=Tensor[(1001), float32] */;
  %906 = @func_1800(%905) /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(1001), float32], Tensor[(10, 16, 10), bool]) */;
  %907 = %903.0;
  %908 = %906.2;
  (%907, %908, meta[relay.Constant][33] /* ty=Tensor[(1001), float32] */)
}

def @func_4302(%var_4300: Tensor[(9, 16, 3), float64]) -> (Tensor[(9, 16, 3), bool], Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), float64]) {
  @func_4299(%var_4300) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), float64]) */
}

def @func_2388(%var_2359: Tensor[(8, 1, 4), float64]) -> (Tensor[(1600), bool], Tensor[(8, ?, 4), bool]) {
  %909 = @func_804() /* ty=(Tensor[(1600), bool], Tensor[(10, 16, 10), bool]) */;
  %910 = cast(%var_2359, dtype="float64") /* ty=Tensor[(8, 1, 4), float64] */;
  %911 = cos(%910) /* ty=Tensor[(8, 1, 4), float64] */;
  %912 = cast(%911, dtype="float32") /* ty=Tensor[(8, 1, 4), float32] */;
  %913 = sinh(%912) /* ty=Tensor[(8, 1, 4), float32] */;
  %914 = cast(%913, dtype="bool") /* ty=Tensor[(8, 1, 4), bool] */;
  %915 = shape_of(%911, dtype="int32") /* ty=Tensor[(3), int32] */;
  %916 = cast(%911, dtype="bool") /* ty=Tensor[(8, 1, 4), bool] */;
  %917 = dyn.reshape(%914, %915, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %918 = %909.0;
  %919 = greater_equal(%916, %917) /* ty=Tensor[(8, ?, 4), bool] */;
  (%918, %919)
}

def @func_4177() -> Tensor[(10, 16, 10), float32] {
  @func_4175() /* ty=Tensor[(10, 16, 10), float32] */
}

def @func_1803(%var_1801: Tensor[(1001), float32]) -> (Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(1001), float32], Tensor[(10, 16, 10), bool]) {
  @func_1800(%var_1801) /* ty=(Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), bool], Tensor[(1001), float32], Tensor[(10, 16, 10), bool]) */
}

def @func_9662() -> (Tensor[(1001), float32], Tensor[(2, 800), float64]) {
  %925 = fn () -> (Tensor[(1001), float32], Tensor[(2, 800), float64]) {
    %920 = @func_2724() /* ty=(Tensor[(1001), float32], Tensor[(2, 800), bool], Tensor[(10, 16, 10), float32]) */;
    %921 = %920.1;
    %922 = cast(%921, dtype="float64") /* ty=Tensor[(2, 800), float64] */;
    %923 = @func_3928() /* ty=Tensor[(1001), float32] */;
    %924 = atan(%922) /* ty=Tensor[(2, 800), float64] */;
    (%923, %924)
  };
  %925() /* ty=(Tensor[(1001), float32], Tensor[(2, 800), float64]) */
}

def @func_3928() -> Tensor[(1001), float32] {
  %926 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
  %926.2
}

def @func_3411(%var_3409: Tensor[(13, 7, 16), float64], %var_3410: Tensor[(13, 7, 16), uint32]) -> (Tensor[(13, 7, 16), bool], Tensor[(13, 77), float32]) {
  %941 = fn (%var_3365: Tensor[(13, 7, 16), float64], %var_3383: Tensor[(13, 7, 16), uint32]) -> (Tensor[(13, 7, 16), bool], Tensor[(13, 77), float32]) {
    %927 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
    %928 = %927.0;
    %929 = cast(%var_3365, dtype="uint32") /* ty=Tensor[(13, 7, 16), uint32] */;
    %930 = shape_of(%928, dtype="int32") /* ty=Tensor[(3), int32] */;
    %931 = cast(%928, dtype="uint32") /* ty=Tensor[(13, 7, 16), uint32] */;
    %932 = dyn.reshape(%929, %930, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %933 = right_shift(%931, %932) /* ty=Tensor[(13, 7, 16), uint32] */;
    %934 = cast(%var_3383, dtype="bool") /* ty=Tensor[(13, 7, 16), bool] */;
    %935 = shape_of(%933, dtype="int32") /* ty=Tensor[(3), int32] */;
    %936 = cast(%933, dtype="bool") /* ty=Tensor[(13, 7, 16), bool] */;
    %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %938 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
    %939 = greater_equal(%936, %937) /* ty=Tensor[(13, 7, 16), bool] */;
    %940 = %938.1;
    (%939, %940)
  };
  %941(%var_3409, %var_3410) /* ty=(Tensor[(13, 7, 16), bool], Tensor[(13, 77), float32]) */
}

def @func_1556(%var_1554: Tensor[(13, 77), float32]) -> (Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) {
  @func_1553(%var_1554) /* ty=(Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32], Tensor[(10, 16, 10), bool]) */
}

def @func_3664() -> (Tensor[(10, 16, 10), float64],) {
  @func_3662() /* ty=(Tensor[(10, 16, 10), float64],) */
}

def @func_1211() -> (Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) {
  %957 = fn () -> (Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) {
    %942 = @func_682() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(10, 16, 10), float32], Tensor[(10, 16, 10), bool]) */;
    %943 = @func_704() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %944 = %943.1;
    %945 = cast(meta[relay.Constant][34] /* ty=Tensor[(1600), bool] */, dtype="int16") /* ty=Tensor[(1600), int16] */;
    %946 = shape_of(%944, dtype="int32") /* ty=Tensor[(1), int32] */;
    %947 = cast(%944, dtype="int16") /* ty=Tensor[(1600), int16] */;
    %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?), int16] */;
    %949 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 77), float32] */, dtype="float32") /* ty=Tensor[(13, 77), float32] */;
    %950 = cast(meta[relay.Constant][34] /* ty=Tensor[(1600), bool] */, dtype="bool") /* ty=Tensor[(1600), bool] */;
    %951 = reshape(%949, newshape=[11, 7, 13]) /* ty=Tensor[(11, 7, 13), float32] */;
    %952 = reshape(%950, newshape=[1600]) /* ty=Tensor[(1600), bool] */;
    %953 = @func_725(%951, %952) /* ty=(Tensor[(11, 7, 13), float32], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
    %954 = %942.0;
    %955 = left_shift(%947, %948) /* ty=Tensor[(1600), int16] */;
    %956 = %953.1;
    (%954, %955, %956, meta[relay.Constant][35] /* ty=Tensor[(13, 77), float32] */)
  };
  %957() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */
}

def @func_4627(%var_4626: Tensor[(13, 77), float32]) -> Tensor[(13, 77), int8] {
  %964 = fn (%var_4615: Tensor[(13, 77), float32]) -> Tensor[(13, 77), int8] {
    %958 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
    %959 = %958.3;
    %960 = cast(%var_4615, dtype="int8") /* ty=Tensor[(13, 77), int8] */;
    %961 = shape_of(%959, dtype="int32") /* ty=Tensor[(2), int32] */;
    %962 = cast(%959, dtype="int8") /* ty=Tensor[(13, 77), int8] */;
    %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    maximum(%962, %963) /* ty=Tensor[(13, 77), int8] */
  };
  %964(%var_4626) /* ty=Tensor[(13, 77), int8] */
}

def @func_2430() -> (Tensor[(14, 16, 15), int16], Tensor[(10, 16, 10), float64]) {
  @func_2428() /* ty=(Tensor[(14, 16, 15), int16], Tensor[(10, 16, 10), float64]) */
}

def @func_4299(%var_4276: Tensor[(9, 16, 3), float64]) -> (Tensor[(9, 16, 3), bool], Tensor[(10, 16, 10), float64], Tensor[(10, 16, 10), float64]) {
  %965 = cast(%var_4276, dtype="float64") /* ty=Tensor[(9, 16, 3), float64] */;
  %966 = exp(%965) /* ty=Tensor[(9, 16, 3), float64] */;
  %967 = cast(%966, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %968 = shape_of(%var_4276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %969 = cast(%var_4276, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %970 = dyn.reshape(%967, %968, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %971 = @func_3176() /* ty=(Tensor[(10, 16, 10), float64], Tensor[(1001), float64]) */;
  %972 = not_equal(%969, %970) /* ty=Tensor[(9, 16, 3), bool] */;
  %973 = %971.0;
  %974 = @func_1478() /* ty=Tensor[(10, 16, 10), float64] */;
  (%972, %973, %974)
}

def @func_5613() -> (Tensor[(1001), int64], Tensor[(1600), float64]) {
  %979 = fn () -> (Tensor[(1001), int64], Tensor[(1600), float64]) {
    %975 = @func_2680() /* ty=(Tensor[(1001), int64], Tensor[(1001), float32]) */;
    %976 = @func_4965() /* ty=(Tensor[(1600), float64],) */;
    %977 = %975.0;
    %978 = %976.0;
    (%977, %978)
  };
  %979() /* ty=(Tensor[(1001), int64], Tensor[(1600), float64]) */
}

def @func_6239() -> (Tensor[(10, 16, 10), float32],) {
  @func_6237() /* ty=(Tensor[(10, 16, 10), float32],) */
}

def @func_6455() -> (Tensor[(10, 16, 10), float32],) {
  @func_6453() /* ty=(Tensor[(10, 16, 10), float32],) */
}

def @func_8868() -> (Tensor[(1001), float32], Tensor[(1001), float32], Tensor[(1600), bool], Tensor[(14, 16, 15), int16]) {
  %980 = @func_2680() /* ty=(Tensor[(1001), int64], Tensor[(1001), float32]) */;
  %981 = @func_4045() /* ty=(Tensor[(10, 16, 10), bool], Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), float32], Tensor[(1001), float32], Tensor[(13, 7, 16), float64], Tensor[(1600), bool]) */;
  %982 = @func_2428() /* ty=(Tensor[(14, 16, 15), int16], Tensor[(10, 16, 10), float64]) */;
  %983 = @func_6161() /* ty=Tensor[(1001), float32] */;
  %984 = %980.1;
  %985 = %981.5;
  %986 = %982.0;
  (%983, %984, %985, %986)
}

def @func_10103() -> Tensor[(10, 16, 10), float64] {
  %987 = fn () -> Tensor[(10, 16, 10), float64] {
    @func_1478() /* ty=Tensor[(10, 16, 10), float64] */
  };
  %987() /* ty=Tensor[(10, 16, 10), float64] */
}

def @func_8837() -> (Tensor[(10, 2, 5), uint64],) {
  %990 = fn () -> (Tensor[(10, 2, 5), uint64],) {
    %988 = @func_8702() /* ty=(Tensor[(10, 2, 5), uint64],) */;
    %989 = %988.0;
    (%989,)
  };
  %990() /* ty=(Tensor[(10, 2, 5), uint64],) */
}

def @func_9538(%var_9537: Tensor[(9, 14, 9), float64]) -> Tensor[(9, 14, 9), float64] {
  %992 = fn (%var_9507: Tensor[(9, 14, 9), float64]) -> Tensor[(9, 14, 9), float64] {
    %991 = cast(%var_9507, dtype="float64") /* ty=Tensor[(9, 14, 9), float64] */;
    sin(%991) /* ty=Tensor[(9, 14, 9), float64] */
  };
  %992(%var_9537) /* ty=Tensor[(9, 14, 9), float64] */
}

def @func_5337() -> (Tensor[(10, 16, 10), float32],) {
  %993 = @func_4175() /* ty=Tensor[(10, 16, 10), float32] */;
  (%993,)
}

def @func_9573() -> (Tensor[(10, 16, 10), bool],) {
  @func_9571() /* ty=(Tensor[(10, 16, 10), bool],) */
}

def @func_1679() -> (Tensor[(1600), bool],) {
  %996 = fn () -> (Tensor[(1600), bool],) {
    %994 = @func_1600() /* ty=(Tensor[(1600), bool], Tensor[(13, 77), float32], Tensor[(1001), float32]) */;
    %995 = %994.0;
    (%995,)
  };
  %996() /* ty=(Tensor[(1600), bool],) */
}

def @func_3541(%var_3529: Tensor[(1600), float32], %var_3538: Tensor[(100), uint64]) -> (Tensor[(1600), bool], Tensor[(10, 16, 10), float64], Tensor[(100), uint64]) {
  %997 = @func_3450() /* ty=(Tensor[(1600), float32], Tensor[(15, 9, 11), float32]) */;
  %998 = %997.0;
  %999 = cast(%var_3529, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %1000 = shape_of(%998, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1001 = cast(%998, dtype="bool") /* ty=Tensor[(1600), bool] */;
  %1002 = dyn.reshape(%999, %1000, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1003 = cast(%var_3538, dtype="uint64") /* ty=Tensor[(100), uint64] */;
  %1004 = reshape(%1003, newshape=[10, 2, 5]) /* ty=Tensor[(10, 2, 5), uint64] */;
  %1005 = @func_2137(%1004) /* ty=(Tensor[(10, 2, 5), uint64], Tensor[(10, 16, 10), float64]) */;
  %1006 = less_equal(%1001, %1002) /* ty=Tensor[(1600), bool] */;
  %1007 = %1005.1;
  (%1006, %1007, %var_3538)
}

def @func_5009() -> (Tensor[(1001), uint16],) {
  %1014 = fn () -> (Tensor[(1001), uint16],) {
    %1008 = @func_3722() /* ty=Tensor[(1001), float64] */;
    %1009 = cast(meta[relay.Constant][36] /* ty=Tensor[(1001), float64] */, dtype="uint16") /* ty=Tensor[(1001), uint16] */;
    %1010 = shape_of(%1008, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1011 = cast(%1008, dtype="uint16") /* ty=Tensor[(1001), uint16] */;
    %1012 = dyn.reshape(%1009, %1010, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %1013 = multiply(%1011, %1012) /* ty=Tensor[(1001), uint16] */;
    (%1013,)
  };
  %1014() /* ty=(Tensor[(1001), uint16],) */
}

def @func_8956() -> (Tensor[(10, 16, 10), float32],) {
  %1017 = fn () -> (Tensor[(10, 16, 10), float32],) {
    %1015 = @func_3106() /* ty=(Tensor[(10, 16, 10), float32],) */;
    %1016 = %1015.0;
    (%1016,)
  };
  %1017() /* ty=(Tensor[(10, 16, 10), float32],) */
}

def @func_9986() -> (Tensor[(10, 16, 10), bool],) {
  %1020 = fn () -> (Tensor[(10, 16, 10), bool],) {
    %1018 = @func_1210() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(1600), int16], Tensor[(10, 16, 10), bool], Tensor[(13, 77), float32]) */;
    %1019 = %1018.2;
    (%1019,)
  };
  %1020() /* ty=(Tensor[(10, 16, 10), bool],) */
}

def @func_10390() -> Tensor[(10, 16, 10), bool] {
  @func_10388() /* ty=Tensor[(10, 16, 10), bool] */
}

def @func_4965() -> (Tensor[(1600), float64],) {
  %1021 = @func_626() /* ty=(Tensor[(13, 7, 16), float64], Tensor[(10, 16, 10), bool], Tensor[(1600), bool]) */;
  %1022 = %1021.2;
  %1023 = cast(%1022, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %1024 = asin(%1023) /* ty=Tensor[(1600), float64] */;
  (%1024,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen756/build/output.py:3197: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen756/build/output.py", line 3202, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(30) tvmgen_default_fused_cast_cast_reshape_greater_equal_kernel0(signed char* __restrict__ T_greater_equal, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_greater_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) <= ((bool)placeholder1[(((int)threadIdx.x))])));
}

extern "C" __global__ void __launch_bounds__(150) tvmgen_default_fused_mod_kernel0(float* __restrict__ T_mod, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_mod[(((int)threadIdx.x))] = fmodf(placeholder[((((int)threadIdx.x) % 30))], placeholder1[(((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(30) tvmgen_default_fused_erf_kernel0(float* __restrict__ T_erf, float* __restrict__ placeholder) {
  T_erf[(((int)threadIdx.x))] = erff(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

