==========mod==========
#[version = "0.0.5"]
def @func_8111() -> (Tensor[(5, 9, 12), float32],) {
  %0 = @func_6021() /* ty=Tensor[(5, 9, 12), float32] */;
  (%0,)
}

def @func_4944() -> (Tensor[(3, 8, 10), float64], Tensor[(5, 9, 12), float32]) {
  %1 = @func_4855() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64], Tensor[(240), float64], Tensor[(9, 5, 5), float32]) */;
  %2 = @func_4250() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 12, 15), bool]) */;
  %3 = %1.1;
  %4 = %2.1;
  (%3, %4)
}

def @func_2246() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %5 = @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %6 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %7 = %5.2;
  %8 = %6.0;
  (%7, %8)
}

def @func_11469() -> (Tensor[(5, 9, 12), bool],) {
  %9 = @func_3976() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %10 = %9.0;
  (%10,)
}

def @func_13502() -> (Tensor[(5, 9, 12), bool],) {
  %11 = @func_13458() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %12 = %11.1;
  (%12,)
}

def @func_13273() -> (Tensor[(5, 9, 12), float32],) {
  %13 = @func_6520() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %14 = %13.0;
  (%14,)
}

def @func_4583() -> (Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float64], Tensor[(13, 15, 4), bool], Tensor[(5, 9, 12), int32]) {
  %15 = @func_3474() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(13, 5, 3), float64]) */;
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(780), bool] */, dtype="bool") /* ty=Tensor[(780), bool] */;
  %17 = reshape(%16, newshape=[13, 15, 4]) /* ty=Tensor[(13, 15, 4), bool] */;
  %18 = @func_632(%17) /* ty=Tensor[(13, 15, 4), bool] */;
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(780), bool] */, dtype="bool") /* ty=Tensor[(780), bool] */;
  %20 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%18, dtype="bool") /* ty=Tensor[(13, 15, 4), bool] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %23 = @func_3251() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) */;
  %24 = @func_2352() /* ty=Tensor[(5, 9, 12), bool] */;
  %25 = %15.5;
  %26 = greater(%21, %22) /* ty=Tensor[(13, 15, 4), bool] */;
  %27 = %23.0;
  (%24, %25, %26, %27)
}

def @func_9194() -> (Tensor[(5, 9, 12), bool],) {
  %28 = @func_2246() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %29 = %28.0;
  (%29,)
}

def @func_2708() -> Tensor[(5, 9, 12), float32] {
  @func_1890() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_3788() -> Tensor[(5, 9, 12), float32] {
  %30 = @func_1858() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %31 = %30.0;
  %32 = @func_945() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %33 = %32.0;
  %34 = cast(%33, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  %35 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%31, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%36, %37) /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_4691() -> (Tensor[(5, 13, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 13, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 13, 12), float32] */;
  %39 = @func_4342() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %40 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %41 = asin(%38) /* ty=Tensor[(5, 13, 12), float32] */;
  %42 = %39.1;
  %43 = %40.0;
  (%41, %42, %43)
}

def @func_11453() -> Tensor[(5, 9, 12), float32] {
  @func_8599() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_1253() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %44 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %45 = %44.0;
  %46 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  (%45, %46)
}

def @func_6882(%var_6869: Tensor[(13, 1, 16), float64], %var_6870: Tensor[(13, 16, 16), float64]) -> Tensor[(13, 16, 16), bool] {
  %47 = cast(%var_6869, dtype="bool") /* ty=Tensor[(13, 1, 16), bool] */;
  %48 = cast(%var_6870, dtype="bool") /* ty=Tensor[(13, 16, 16), bool] */;
  less_equal(%47, %48) /* ty=Tensor[(13, 16, 16), bool] */
}

def @func_10075(%var_10071: Tensor[(16, 3, 9), float64]) -> Tensor[(16, 3, 9), float64] {
  %49 = cast(%var_10071, dtype="float64") /* ty=Tensor[(16, 3, 9), float64] */;
  atanh(%49) /* ty=Tensor[(16, 3, 9), float64] */
}

def @func_2149() -> Tensor[(5, 9, 12), float32] {
  @func_2022() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_179() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
  %50 = cast(8.52693f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %51 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 9, 12), float64] */, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
  %52 = greater(%50, %51) /* ty=Tensor[(5, 9, 12), bool] */;
  %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 9, 12), bool] */, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
  %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%52, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %57 = cast(8.52693f64 /* ty=float64 */, dtype="int32") /* ty=int32 */;
  %58 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 9, 12), float64] */, dtype="int32") /* ty=Tensor[(5, 9, 12), int32] */;
  %59 = logical_or(%55, %56) /* ty=Tensor[(5, 9, 12), bool] */;
  %60 = minimum(%57, %58) /* ty=Tensor[(5, 9, 12), int32] */;
  (%59, %60)
}

def @func_4092() -> Tensor[(9, 5, 5), float32] {
  %61 = @func_3053() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %61.0
}

def @func_2484(%var_2475: Tensor[(11, 4, 1), float32]) -> (Tensor[(11, 4, 1), float32], Tensor[(5, 9, 12), float32]) {
  %62 = cast(%var_2475, dtype="float32") /* ty=Tensor[(11, 4, 1), float32] */;
  %63 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %64 = atanh(%62) /* ty=Tensor[(11, 4, 1), float32] */;
  %65 = %63.1;
  (%64, %65)
}

def @func_748() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
  %66 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %67 = %66.1;
  %68 = @func_667() /* ty=Tensor[(5, 9, 12), float32] */;
  (%67, %68)
}

def @func_5541(%var_5488: Tensor[(4, 5, 15), int64], %var_5489: Tensor[(4, 5, 15), int64], %var_5531: Tensor[(4, 5, 15), int16]) -> (Tensor[(5, 9, 12), bool], Tensor[(4, 5, 15), int32]) {
  %69 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %70 = cast(%var_5489, dtype="bool") /* ty=Tensor[(4, 5, 15), bool] */;
  %71 = shape_of(%var_5488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %72 = cast(%var_5488, dtype="bool") /* ty=Tensor[(4, 5, 15), bool] */;
  %73 = dyn.reshape(%70, %71, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %74 = less_equal(%72, %73) /* ty=Tensor[(4, 5, 15), bool] */;
  %75 = cast(%74, dtype="int16") /* ty=Tensor[(4, 5, 15), int16] */;
  %76 = shape_of(%var_5488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%var_5488, dtype="int16") /* ty=Tensor[(4, 5, 15), int16] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %79 = minimum(%77, %78) /* ty=Tensor[(4, 5, 15), int16] */;
  %80 = cast(%var_5531, dtype="int32") /* ty=Tensor[(4, 5, 15), int32] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%79, dtype="int32") /* ty=Tensor[(4, 5, 15), int32] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %84 = %69.0;
  %85 = left_shift(%82, %83) /* ty=Tensor[(4, 5, 15), int32] */;
  (%84, %85)
}

def @func_10433() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(16, 12, 11), int64], float64, Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), int32]) {
  %86 = @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %87 = cast(-9.49569f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %88 = reshape(%87, newshape=[]) /* ty=float64 */;
  %89 = @func_7833(%88) /* ty=(Tensor[(5, 9, 12), float32], float64, Tensor[(2112), float64], Tensor[(16, 12, 11), int64]) */;
  %90 = @func_6244() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %91 = @func_10372() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(120), int16]) */;
  %92 = %86.1;
  %93 = @func_3611() /* ty=Tensor[(5, 9, 12), bool] */;
  %94 = %89.3;
  %95 = %90.1;
  %96 = %91.0;
  (%92, %93, %94, -9.49569f64 /* ty=float64 */, %95, %96)
}

def @func_12783() -> (Tensor[(5, 9, 12), bool],) {
  %97 = @func_9920() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32], Tensor[(4, 5, 15), int32], Tensor[(10, 30), int64], Tensor[(5, 9, 12), bool]) */;
  %98 = %97.5;
  (%98,)
}

def @func_9957() -> Tensor[(5, 9, 12), bool] {
  %99 = @func_299() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %99.0
}

def @func_7072() -> Tensor[(120), int16] {
  %100 = @func_6705() /* ty=(Tensor[(120), int16],) */;
  %100.0
}

def @func_8509() -> (Tensor[(5, 9, 12), float32],) {
  %101 = @func_6277() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %102 = %101.0;
  (%102,)
}

def @func_12020(%var_11988: Tensor[(16, 6, 13), float64], %var_12004: Tensor[(1, 30), float64]) -> (Tensor[(16, 6, 13), float64], Tensor[(3, 10, 1), float64], Tensor[(1, 30), float64]) {
  %103 = cast(%var_11988, dtype="float64") /* ty=Tensor[(16, 6, 13), float64] */;
  %104 = cast(%var_12004, dtype="float64") /* ty=Tensor[(1, 30), float64] */;
  %105 = reshape(%104, newshape=[3, 10, 1]) /* ty=Tensor[(3, 10, 1), float64] */;
  %106 = cos(%103) /* ty=Tensor[(16, 6, 13), float64] */;
  %107 = @func_9173(%105) /* ty=Tensor[(3, 10, 1), float64] */;
  (%106, %107, %var_12004)
}

def @func_11162() -> Tensor[(5, 9, 12), bool] {
  %108 = @func_4583() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float64], Tensor[(13, 15, 4), bool], Tensor[(5, 9, 12), int32]) */;
  %108.0
}

def @func_5438() -> (Tensor[(36, 10), bool],) {
  %109 = @func_2462() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float32], Tensor[(36, 10), bool], Tensor[(5, 9, 12), bool]) */;
  %110 = %109.3;
  (%110,)
}

def @func_8809() -> (Tensor[(5, 9, 12), float32],) {
  %111 = @func_1069() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), float32]) */;
  %112 = %111.0;
  (%112,)
}

def @func_9410() -> (Tensor[(36, 10), float32],) {
  %113 = @func_5438() /* ty=(Tensor[(36, 10), bool],) */;
  %114 = %113.0;
  %115 = cast(%114, dtype="float32") /* ty=Tensor[(36, 10), float32] */;
  %116 = log(%115) /* ty=Tensor[(36, 10), float32] */;
  (%116,)
}

def @func_10999() -> (Tensor[(4, 13, 5), bool], Tensor[(5, 9, 12), float32], Tensor[(900), float64], Tensor[(5, 9, 12), float32], Tensor[(9, 5, 5), float32]) {
  %117 = @func_4751() /* ty=(Tensor[(4, 13, 5), bool], Tensor[(7, 10, 11), bool], Tensor[(770), int8]) */;
  %118 = cast(meta[relay.Constant][4] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %119 = reshape(%118, newshape=[900]) /* ty=Tensor[(900), float64] */;
  %120 = @func_10150(%119) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(900), float64]) */;
  %121 = @func_6244() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %122 = @func_5399() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool]) */;
  %123 = %117.0;
  %124 = %120.1;
  %125 = %121.1;
  %126 = %122.0;
  (%123, %124, meta[relay.Constant][4] /* ty=Tensor[(900), float64] */, %125, %126)
}

def @func_1372() -> Tensor[(13, 5, 3), float32] {
  %127 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 5, 3), float32] */, dtype="float32") /* ty=Tensor[(13, 5, 3), float32] */;
  sigmoid(%127) /* ty=Tensor[(13, 5, 3), float32] */
}

def @func_7833(%var_7800: float64) -> (Tensor[(5, 9, 12), float32], float64, Tensor[(2112), float64], Tensor[(16, 12, 11), int64]) {
  %128 = cast(%var_7800, dtype="float64") /* ty=float64 */;
  %129 = cast(meta[relay.Constant][6] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %130 = reshape(%128, newshape=[]) /* ty=float64 */;
  %131 = reshape(%129, newshape=[16, 12, 11]) /* ty=Tensor[(16, 12, 11), float64] */;
  %132 = @func_461(%130, %131) /* ty=(Tensor[(16, 12, 11), float64], Tensor[(5, 9, 12), bool]) */;
  %133 = %132.0;
  %134 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 12, 11), float64] */, dtype="int64") /* ty=Tensor[(16, 12, 11), int64] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="int64") /* ty=Tensor[(16, 12, 11), int64] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %138 = @func_3788() /* ty=Tensor[(5, 9, 12), float32] */;
  %139 = bitwise_and(%136, %137) /* ty=Tensor[(16, 12, 11), int64] */;
  (%138, %var_7800, meta[relay.Constant][6] /* ty=Tensor[(2112), float64] */, %139)
}

def @func_8970() -> Tensor[(5, 9, 12), bool] {
  @func_345() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_8787(%var_8749: Tensor[(1, 13, 2), uint16], %var_8750: Tensor[(5, 13, 2), uint16]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 13, 2), float32]) {
  %140 = @func_6244() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %141 = cast(%var_8749, dtype="bool") /* ty=Tensor[(1, 13, 2), bool] */;
  %142 = cast(%var_8750, dtype="bool") /* ty=Tensor[(5, 13, 2), bool] */;
  %143 = equal(%141, %142) /* ty=Tensor[(5, 13, 2), bool] */;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(5, 13, 2), float32] */;
  %145 = %140.2;
  %146 = asinh(%144) /* ty=Tensor[(5, 13, 2), float32] */;
  (%145, %146)
}

def @func_4131(%var_4122: Tensor[(14, 2, 14), uint32], %var_4123: Tensor[(14, 2, 14), uint32]) -> Tensor[(14, 2, 14), uint32] {
  %147 = cast(%var_4123, dtype="uint32") /* ty=Tensor[(14, 2, 14), uint32] */;
  %148 = shape_of(%var_4122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%var_4122, dtype="uint32") /* ty=Tensor[(14, 2, 14), uint32] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  bitwise_and(%149, %150) /* ty=Tensor[(14, 2, 14), uint32] */
}

def @func_1730() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %151 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %152 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %153 = %151.1;
  %154 = %152.1;
  (%153, %154)
}

def @func_10275() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %155 = @func_4020() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %156 = @func_788() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %157 = @func_2641() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %158 = %155.2;
  %159 = %156.0;
  %160 = @func_1190() /* ty=Tensor[(5, 9, 12), float32] */;
  %161 = %157.0;
  (%158, %159, %160, %161)
}

def @func_8942() -> (Tensor[(5, 9, 12), float32],) {
  %162 = @func_6406() /* ty=Tensor[(5, 9, 12), float32] */;
  (%162,)
}

def @func_2264() -> (Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) {
  %163 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %164 = %163.1;
  %165 = cast(%164, dtype="int16") /* ty=Tensor[(5, 9, 12), int16] */;
  %166 = reshape(%165, newshape=[3, 12, 15]) /* ty=Tensor[(3, 12, 15), int16] */;
  %167 = @func_606(%166) /* ty=(Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), bool]) */;
  %168 = %167.0;
  (%164, %168)
}

def @func_7001() -> (Tensor[(5, 9, 12), float32],) {
  %169 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %170 = %169.0;
  (%170,)
}

def @func_12303() -> (Tensor[(14, 2, 14), uint32], Tensor[(5, 9, 12), float32]) {
  %171 = @func_4887() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(14, 2, 14), uint32], Tensor[(392), uint32], Tensor[(3, 12, 15), bool]) */;
  %172 = @func_4206() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %173 = %171.1;
  %174 = %172.0;
  (%173, %174)
}

def @func_13867(%var_13857: Tensor[(30), float64]) -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32], Tensor[(30), float64]) {
  %175 = @func_3266() /* ty=(Tensor[(5, 9, 12), int32],) */;
  %176 = cast(%var_13857, dtype="float64") /* ty=Tensor[(30), float64] */;
  %177 = reshape(%176, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %178 = @func_12623(%177) /* ty=(Tensor[(13, 5, 3), float64], Tensor[(5, 9, 12), float32], Tensor[(3, 10, 1), float64], Tensor[(30), float64]) */;
  %179 = %175.0;
  %180 = %178.1;
  (%179, %180, %var_13857)
}

def @func_5468() -> (Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64], Tensor[(360), float64]) {
  %181 = cast(meta[relay.Constant][8] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %182 = cast(meta[relay.Constant][8] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %183 = reshape(%181, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %184 = reshape(%182, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %185 = @func_382(%183, %184) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */;
  %186 = @func_2352() /* ty=Tensor[(5, 9, 12), bool] */;
  %187 = %185.2;
  (%186, %187, meta[relay.Constant][8] /* ty=Tensor[(360), float64] */)
}

def @func_13710() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(14, 15, 2), int16], Tensor[(420), int16]) {
  %188 = @func_4206() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %189 = @func_3324() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %190 = @func_1671() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %191 = cast(meta[relay.Constant][9] /* ty=Tensor[(420), int16] */, dtype="int16") /* ty=Tensor[(420), int16] */;
  %192 = reshape(%191, newshape=[14, 15, 2]) /* ty=Tensor[(14, 15, 2), int16] */;
  %193 = @func_5165(%192) /* ty=(Tensor[(14, 15, 2), int16], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %194 = %188.0;
  %195 = %189.0;
  %196 = %190.0;
  %197 = %193.0;
  (%194, %195, %196, %197, meta[relay.Constant][9] /* ty=Tensor[(420), int16] */)
}

def @func_7733(%var_7676: Tensor[(16, 10, 16), float64], %var_7677: Tensor[(16, 10, 16), float64], %var_7706: Tensor[(10, 78), bool]) -> (Tensor[(16, 10, 16), bool], Tensor[(5, 9, 12), bool], Tensor[(13, 15, 4), bool], Tensor[(10, 78), bool], Tensor[(5, 9, 12), float32]) {
  %198 = cast(%var_7677, dtype="bool") /* ty=Tensor[(16, 10, 16), bool] */;
  %199 = shape_of(%var_7676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%var_7676, dtype="bool") /* ty=Tensor[(16, 10, 16), bool] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %202 = cast(%var_7706, dtype="bool") /* ty=Tensor[(10, 78), bool] */;
  %203 = reshape(%202, newshape=[13, 15, 4]) /* ty=Tensor[(13, 15, 4), bool] */;
  %204 = @func_3847() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %205 = less(%200, %201) /* ty=Tensor[(16, 10, 16), bool] */;
  %206 = @func_345() /* ty=Tensor[(5, 9, 12), bool] */;
  %207 = @func_632(%203) /* ty=Tensor[(13, 15, 4), bool] */;
  %208 = %204.0;
  (%205, %206, %207, %var_7706, %208)
}

def @func_788() -> (Tensor[(5, 9, 12), bool],) {
  %209 = @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %210 = %209.0;
  (%210,)
}

def @func_447() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %211 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %212 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %213 = %211.0;
  %214 = %212.0;
  (%213, %214)
}

def @func_3286() -> Tensor[(5, 9, 12), bool] {
  %215 = @func_1342() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %215.1
}

def @func_550() -> (Tensor[(5, 9, 12), bool],) {
  %216 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %217 = %216.0;
  (%217,)
}

def @func_606(%var_577: Tensor[(3, 12, 15), int16]) -> (Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), bool]) {
  %218 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 1, 15), int16] */, dtype="bool") /* ty=Tensor[(3, 1, 15), bool] */;
  %219 = cast(%var_577, dtype="bool") /* ty=Tensor[(3, 12, 15), bool] */;
  %220 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %221 = not_equal(%218, %219) /* ty=Tensor[(3, 12, 15), bool] */;
  %222 = %220.0;
  (%221, %222)
}

def @func_13155(%var_13092: Tensor[(5, 3, 16), float64], %var_13115: Tensor[(390, 2), float32], %var_13150: Tensor[(432), float64], %var_13153: int8) -> (Tensor[(5, 3, 16), bool], Tensor[(5, 9, 12), bool], Tensor[(390, 2), float32], Tensor[(5, 3, 16), float64], Tensor[(5, 9, 12), float32], Tensor[(8, 5, 9), float64], Tensor[(360), float64], Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), float32], Tensor[(16, 3, 9), float64], Tensor[(432), float64], Tensor[(8, 12, 8), float64], int8) {
  %223 = cast(%var_13092, dtype="float64") /* ty=Tensor[(5, 3, 16), float64] */;
  %224 = log10(%223) /* ty=Tensor[(5, 3, 16), float64] */;
  %225 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 3, 16), float64] */, dtype="bool") /* ty=Tensor[(5, 3, 16), bool] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%224, dtype="bool") /* ty=Tensor[(5, 3, 16), bool] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %229 = cast(%var_13115, dtype="float32") /* ty=Tensor[(390, 2), float32] */;
  %230 = reshape(%229, newshape=[5, 13, 12]) /* ty=Tensor[(5, 13, 12), float32] */;
  %231 = @func_9496(%230) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 13, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %232 = cast(%224, dtype="float64") /* ty=Tensor[(5, 3, 16), float64] */;
  %233 = cast(meta[relay.Constant][12] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %234 = cast(meta[relay.Constant][12] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %235 = reshape(%233, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %236 = reshape(%234, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %237 = @func_382(%235, %236) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */;
  %238 = @func_8880() /* ty=(Tensor[(3, 12, 15), bool],) */;
  %239 = cast(%var_13150, dtype="float64") /* ty=Tensor[(432), float64] */;
  %240 = reshape(%239, newshape=[16, 3, 9]) /* ty=Tensor[(16, 3, 9), float64] */;
  %241 = cast(%var_13153, dtype="int8") /* ty=int8 */;
  %242 = reshape(%241, newshape=[]) /* ty=int8 */;
  %243 = @func_10059(%242) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(9, 5, 5), float32], Tensor[(8, 12, 8), float64]) */;
  %244 = less(%227, %228) /* ty=Tensor[(5, 3, 16), bool] */;
  %245 = %231.0;
  %246 = log(%232) /* ty=Tensor[(5, 3, 16), float64] */;
  %247 = @func_2325() /* ty=Tensor[(5, 9, 12), float32] */;
  %248 = %237.2;
  %249 = %238.0;
  %250 = @func_2022() /* ty=Tensor[(5, 9, 12), float32] */;
  %251 = @func_10075(%240) /* ty=Tensor[(16, 3, 9), float64] */;
  %252 = %243.2;
  (%244, %245, %var_13115, %246, %247, %248, meta[relay.Constant][12] /* ty=Tensor[(360), float64] */, %249, %250, %251, %var_13150, %252, %var_13153)
}

def @main() -> (Tensor[(6, 9, 12), float32],) {
  %253 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 9, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 9, 12), float32] */;
  %254 = log10(%253) /* ty=Tensor[(6, 9, 12), float32] */;
  (%254,)
}

def @func_8699() -> Tensor[(5, 9, 12), bool] {
  %255 = @func_2246() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %255.0
}

def @func_6705() -> (Tensor[(120), int16],) {
  %256 = @func_6662() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(16, 8, 15), bool], Tensor[(120), int16]) */;
  %257 = %256.2;
  (%257,)
}

def @func_9173(%var_9137: Tensor[(3, 10, 1), float64]) -> Tensor[(3, 10, 1), float64] {
  %258 = cast(%var_9137, dtype="float64") /* ty=Tensor[(3, 10, 1), float64] */;
  sigmoid(%258) /* ty=Tensor[(3, 10, 1), float64] */
}

def @func_9618() -> Tensor[(5, 9, 12), bool] {
  %259 = @func_1342() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %259.2
}

def @func_2352() -> Tensor[(5, 9, 12), bool] {
  @func_345() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_3266() -> (Tensor[(5, 9, 12), int32],) {
  %260 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
  %261 = %260.0;
  (%261,)
}

def @func_1167() -> Tensor[(5, 9, 12), int32] {
  %262 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %262.1
}

def @func_8688() -> (Tensor[(5, 9, 12), bool],) {
  %263 = @func_2246() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %264 = %263.0;
  (%264,)
}

def @func_6244() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
  %265 = @func_3324() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %266 = @func_4466() /* ty=Tensor[(5, 9, 12), bool] */;
  %267 = @func_5455() /* ty=Tensor[(5, 9, 12), float32] */;
  %268 = %265.0;
  (%266, %267, %268)
}

def @func_10312() -> Tensor[(5, 9, 12), bool] {
  %269 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %269.0
}

def @func_4064() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
  %270 = @func_3251() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) */;
  %271 = @func_3286() /* ty=Tensor[(5, 9, 12), bool] */;
  %272 = %270.0;
  (%271, %272)
}

def @func_6983() -> Tensor[(5, 9, 12), bool] {
  %273 = @func_788() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %273.0
}

def @func_3324() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
  %274 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %275 = @func_2325() /* ty=Tensor[(5, 9, 12), float32] */;
  %276 = %274.1;
  (%275, %276)
}

def @func_4079(%var_4067: Tensor[(6, 12, 12), float32]) -> (Tensor[(6, 12, 12), float32],) {
  %277 = cast(%var_4067, dtype="float32") /* ty=Tensor[(6, 12, 12), float32] */;
  %278 = log(%277) /* ty=Tensor[(6, 12, 12), float32] */;
  %279 = cast(%var_4067, dtype="float32") /* ty=Tensor[(6, 12, 12), float32] */;
  %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%278, dtype="float32") /* ty=Tensor[(6, 12, 12), float32] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %283 = subtract(%281, %282) /* ty=Tensor[(6, 12, 12), float32] */;
  (%283,)
}

def @func_1671() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %284 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %285 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %286 = %284.0;
  %287 = %285.1;
  (%286, %287)
}

def @func_4206() -> (Tensor[(5, 9, 12), float32],) {
  %288 = @func_2022() /* ty=Tensor[(5, 9, 12), float32] */;
  (%288,)
}

def @func_2462() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float32], Tensor[(36, 10), bool], Tensor[(5, 9, 12), bool]) {
  %289 = @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %290 = cast(meta[relay.Constant][14] /* ty=Tensor[(36, 10), float64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %291 = cast(meta[relay.Constant][14] /* ty=Tensor[(36, 10), float64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %292 = cast(meta[relay.Constant][14] /* ty=Tensor[(36, 10), float64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %293 = reshape(%291, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %294 = reshape(%292, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %295 = @func_382(%293, %294) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */;
  %296 = %295.2;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(8, 5, 9), float64] */;
  %298 = reshape(%290, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %299 = reshape(%297, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %300 = @func_382(%298, %299) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */;
  %301 = cast(%296, dtype="float32") /* ty=Tensor[(8, 5, 9), float32] */;
  %302 = cast(meta[relay.Constant][14] /* ty=Tensor[(36, 10), float64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %303 = atanh(%302) /* ty=Tensor[(36, 10), float64] */;
  %304 = cast(meta[relay.Constant][15] /* ty=Tensor[(36, 10), float64] */, dtype="bool") /* ty=Tensor[(36, 10), bool] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(2), int32] */;
  %306 = cast(%303, dtype="bool") /* ty=Tensor[(36, 10), bool] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %308 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %309 = %289.1;
  %310 = %300.1;
  %311 = acos(%301) /* ty=Tensor[(8, 5, 9), float32] */;
  %312 = not_equal(%306, %307) /* ty=Tensor[(36, 10), bool] */;
  %313 = %308.0;
  (%309, %310, %311, %312, %313)
}

def @func_2760() -> Tensor[(5, 9, 12), bool] {
  %314 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %314.0
}

def @func_10150(%var_10148: Tensor[(900), float64]) -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(900), float64]) {
  %315 = @func_3686() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %316 = @func_8809() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %317 = cast(%var_10148, dtype="float64") /* ty=Tensor[(900), float64] */;
  %318 = reshape(%317, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), float64] */;
  %319 = @func_2123(%318) /* ty=(Tensor[(12, 15, 5), float64], Tensor[(5, 9, 12), float32]) */;
  %320 = %315.1;
  %321 = %316.0;
  %322 = %319.1;
  (%320, %321, %322, %var_10148)
}

def @func_11352() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %323 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %324 = @func_7494() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64]) */;
  %325 = %323.0;
  %326 = %324.3;
  (%325, %326)
}

def @func_231() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %327 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %328 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %329 = %328.1;
  %330 = cast(%329, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  %331 = %327.0;
  %332 = acosh(%330) /* ty=Tensor[(5, 9, 12), float32] */;
  (%331, %332)
}

def @func_7943() -> Tensor[(5, 9, 12), float32] {
  %333 = @func_1639() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(360), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), uint16], Tensor[(5, 9, 12), float32]) */;
  %333.5
}

def @func_945() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %334 = @func_788() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %335 = @func_299() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %336 = @func_550() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %337 = %334.0;
  %338 = %335.0;
  %339 = %336.0;
  (%337, %338, %339)
}

def @func_8880() -> (Tensor[(3, 12, 15), bool],) {
  %340 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
  %341 = %340.1;
  (%341,)
}

def @func_11682() -> Tensor[(5, 9, 12), float32] {
  %342 = @func_8550() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) */;
  %342.1
}

def @func_13896() -> Tensor[(5, 9, 12), bool] {
  %343 = @func_10275() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %343.3
}

def @func_4629() -> (Tensor[(5, 9, 12), bool],) {
  %344 = @func_2129() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %345 = %344.0;
  (%345,)
}

def @func_3686() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %346 = @func_3221() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %347 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  %348 = %346.1;
  (%347, %348)
}

def @func_5592(%var_5588: Tensor[(7, 2, 13), float32]) -> Tensor[(7, 2, 13), float32] {
  %349 = cast(%var_5588, dtype="float32") /* ty=Tensor[(7, 2, 13), float32] */;
  asinh(%349) /* ty=Tensor[(7, 2, 13), float32] */
}

def @func_3847() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %350 = @func_1671() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %351 = @func_1869() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %352 = @func_1671() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %353 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %354 = @func_3564() /* ty=(Tensor[(3, 12, 15), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %355 = @func_2821() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %356 = %350.1;
  %357 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  %358 = %351.0;
  %359 = %352.1;
  %360 = %353.0;
  %361 = %354.2;
  %362 = %355.1;
  (%356, %357, %358, %359, %360, %361, %362)
}

def @func_2123(%var_2087: Tensor[(12, 15, 5), float64]) -> (Tensor[(12, 15, 5), float64], Tensor[(5, 9, 12), float32]) {
  %363 = cast(%var_2087, dtype="float64") /* ty=Tensor[(12, 15, 5), float64] */;
  %364 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %365 = sqrt(%363) /* ty=Tensor[(12, 15, 5), float64] */;
  %366 = %364.0;
  (%365, %366)
}

def @func_4855() -> (Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64], Tensor[(240), float64], Tensor[(9, 5, 5), float32]) {
  %367 = @func_1858() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %368 = cast(meta[relay.Constant][16] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %369 = reshape(%368, newshape=[3, 8, 10]) /* ty=Tensor[(3, 8, 10), float64] */;
  %370 = @func_4416(%369) /* ty=(Tensor[(3, 8, 10), float64],) */;
  %371 = %367.0;
  %372 = %370.0;
  %373 = @func_4092() /* ty=Tensor[(9, 5, 5), float32] */;
  (%371, %372, meta[relay.Constant][16] /* ty=Tensor[(240), float64] */, %373)
}

def @func_11785() -> (Tensor[(5, 9, 12), float32],) {
  %374 = @func_6662() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(16, 8, 15), bool], Tensor[(120), int16]) */;
  %375 = %374.0;
  (%375,)
}

def @func_6520() -> (Tensor[(5, 9, 12), float32],) {
  %376 = @func_6244() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %377 = %376.2;
  (%377,)
}

def @func_10458() -> (Tensor[(5, 9, 12), bool],) {
  %378 = @func_9264() /* ty=Tensor[(5, 9, 12), bool] */;
  (%378,)
}

def @func_1869() -> (Tensor[(5, 9, 12), float32],) {
  %379 = @func_1671() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %380 = %379.1;
  (%380,)
}

def @func_13220(%var_13207: Tensor[(5, 13, 10), int64], %var_13208: Tensor[(5, 13, 10), int64]) -> (Tensor[(5, 13, 10), int64],) {
  %381 = cast(%var_13208, dtype="int64") /* ty=Tensor[(5, 13, 10), int64] */;
  %382 = shape_of(%var_13207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%var_13207, dtype="int64") /* ty=Tensor[(5, 13, 10), int64] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %385 = left_shift(%383, %384) /* ty=Tensor[(5, 13, 10), int64] */;
  (%385,)
}

def @func_6277() -> (Tensor[(5, 9, 12), float32],) {
  %386 = @func_1190() /* ty=Tensor[(5, 9, 12), float32] */;
  (%386,)
}

def @func_8872() -> (Tensor[(5, 9, 12), bool],) {
  %387 = @func_4400() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %388 = %387.3;
  (%388,)
}

def @func_13638() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %389 = @func_5752() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %390 = @func_1985() /* ty=Tensor[(5, 9, 12), bool] */;
  %391 = %389.0;
  (%390, %391)
}

def @func_632(%var_628: Tensor[(13, 15, 4), bool]) -> Tensor[(13, 15, 4), bool] {
  %392 = cast(%var_628, dtype="bool") /* ty=Tensor[(13, 15, 4), bool] */;
  %393 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(13, 15, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 15, 4), bool] */, dtype="bool") /* ty=Tensor[(13, 15, 4), bool] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%394, %395) /* ty=Tensor[(13, 15, 4), bool] */
}

def @func_7623(%var_7613: Tensor[(96), float64]) -> (Tensor[(5, 9, 12), bool], Tensor[(?, 6, 16), float64], Tensor[(96), float64], Tensor[(100, 36), float64], Tensor[(768), float64]) {
  %396 = cast(%var_7613, dtype="float64") /* ty=Tensor[(96), float64] */;
  %397 = cast(meta[relay.Constant][18] /* ty=Tensor[(100, 36), float64] */, dtype="float64") /* ty=Tensor[(100, 36), float64] */;
  %398 = cast(meta[relay.Constant][19] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %399 = reshape(%396, newshape=[1, 6, 16]) /* ty=Tensor[(1, 6, 16), float64] */;
  %400 = reshape(%397, newshape=[10, 360]) /* ty=Tensor[(10, 360), float64] */;
  %401 = reshape(%398, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float64] */;
  %402 = @func_2994(%399, %400, %401) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(10, 360), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32], Tensor[(?, 6, 16), float64], Tensor[(?, 6, 16), float32], Tensor[(8, 6, 16), int8]) */;
  %403 = @func_3611() /* ty=Tensor[(5, 9, 12), bool] */;
  %404 = %402.5;
  (%403, %404, %var_7613, meta[relay.Constant][18] /* ty=Tensor[(100, 36), float64] */, meta[relay.Constant][19] /* ty=Tensor[(768), float64] */)
}

def @func_11388() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %405 = @func_2129() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %406 = @func_4629() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %407 = %405.0;
  %408 = %406.0;
  (%407, %408)
}

def @func_10558() -> (Tensor[(8, 5, 9), float32],) {
  %409 = @func_5128() /* ty=Tensor[(8, 5, 9), float32] */;
  (%409,)
}

def @func_9735() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
  %410 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %411 = @func_3053() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %412 = %410.0;
  %413 = @func_667() /* ty=Tensor[(5, 9, 12), float32] */;
  %414 = %411.2;
  (%412, %413, %414)
}

def @func_12998() -> (Tensor[(5, 9, 12), float32], Tensor[(3, 12, 15), bool]) {
  %415 = @func_4944() /* ty=(Tensor[(3, 8, 10), float64], Tensor[(5, 9, 12), float32]) */;
  %416 = %415.1;
  %417 = cast(%416, dtype="int16") /* ty=Tensor[(5, 9, 12), int16] */;
  %418 = reshape(%417, newshape=[3, 12, 15]) /* ty=Tensor[(3, 12, 15), int16] */;
  %419 = @func_606(%418) /* ty=(Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), bool]) */;
  %420 = %419.0;
  (%416, %420)
}

def @func_11716() -> (Tensor[(5, 9, 12), bool],) {
  %421 = @func_10571() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %422 = %421.0;
  (%422,)
}

def @func_1639() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(360), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), uint16], Tensor[(5, 9, 12), float32]) {
  %423 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %424 = cast(meta[relay.Constant][20] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %425 = cast(meta[relay.Constant][20] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %426 = reshape(%424, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %427 = reshape(%425, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %428 = @func_382(%426, %427) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */;
  %429 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %430 = @func_667() /* ty=Tensor[(5, 9, 12), float32] */;
  %431 = @func_1253() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %432 = %431.0;
  %433 = cast(%432, dtype="uint16") /* ty=Tensor[(5, 9, 12), uint16] */;
  %434 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%430, dtype="uint16") /* ty=Tensor[(5, 9, 12), uint16] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %437 = cast(meta[relay.Constant][20] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %438 = cast(meta[relay.Constant][20] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %439 = reshape(%437, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %440 = reshape(%438, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %441 = @func_382(%439, %440) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */;
  %442 = %423.0;
  %443 = %428.0;
  %444 = %429.0;
  %445 = bitwise_or(%435, %436) /* ty=Tensor[(5, 9, 12), uint16] */;
  %446 = %441.0;
  (%442, %443, meta[relay.Constant][20] /* ty=Tensor[(360), float64] */, %444, %445, %446)
}

def @func_1280() -> (Tensor[(5, 9, 12), float32],) {
  %447 = @func_1253() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %448 = %447.0;
  (%448,)
}

def @func_11368() -> (Tensor[(5, 9, 12), bool],) {
  %449 = @func_4691() /* ty=(Tensor[(5, 13, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %450 = %449.1;
  (%450,)
}

def @func_11661() -> Tensor[(5, 9, 12), bool] {
  @func_1985() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_13366(%var_13347: uint32, %var_13348: Tensor[(1, 5, 16), uint32]) -> Tensor[(1, 5, 16), float32] {
  %451 = cast(%var_13347, dtype="uint32") /* ty=uint32 */;
  %452 = cast(%var_13348, dtype="uint32") /* ty=Tensor[(1, 5, 16), uint32] */;
  %453 = maximum(%451, %452) /* ty=Tensor[(1, 5, 16), uint32] */;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(1, 5, 16), float32] */;
  cos(%454) /* ty=Tensor[(1, 5, 16), float32] */
}

def @func_6453(%var_6423: Tensor[(1, 8, 15), int16]) -> (Tensor[(16, 8, 15), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), int32]) {
  %455 = cast(%var_6423, dtype="bool") /* ty=Tensor[(1, 8, 15), bool] */;
  %456 = cast(meta[relay.Constant][21] /* ty=Tensor[(16, 8, 15), int16] */, dtype="bool") /* ty=Tensor[(16, 8, 15), bool] */;
  %457 = not_equal(%455, %456) /* ty=Tensor[(16, 8, 15), bool] */;
  %458 = @func_4789() /* ty=Tensor[(5, 9, 12), float32] */;
  %459 = @func_2708() /* ty=Tensor[(5, 9, 12), float32] */;
  %460 = @func_1167() /* ty=Tensor[(5, 9, 12), int32] */;
  (%457, %458, %459, %460)
}

def @func_1985() -> Tensor[(5, 9, 12), bool] {
  %461 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %461.0
}

def @func_8361(%var_8320: Tensor[(182), float32], %var_8344: float64) -> (Tensor[(5, 9, 12), float32], Tensor[(7, 2, 13), float32], Tensor[(182), float32], Tensor[(5, 9, 12), bool], Tensor[(2112), float64], float64, Tensor[(3, 12, 15), bool]) {
  %462 = @func_3324() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %463 = cast(%var_8320, dtype="float32") /* ty=Tensor[(182), float32] */;
  %464 = reshape(%463, newshape=[7, 2, 13]) /* ty=Tensor[(7, 2, 13), float32] */;
  %465 = @func_4400() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %466 = cast(%var_8344, dtype="float64") /* ty=float64 */;
  %467 = reshape(%466, newshape=[]) /* ty=float64 */;
  %468 = @func_717(%467) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], float64, Tensor[(2112), float64]) */;
  %469 = @func_4250() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 12, 15), bool]) */;
  %470 = %462.0;
  %471 = @func_5592(%464) /* ty=Tensor[(7, 2, 13), float32] */;
  %472 = %465.1;
  %473 = %468.3;
  %474 = %469.3;
  (%470, %471, %var_8320, %472, %473, %var_8344, %474)
}

def @func_5752() -> (Tensor[(5, 9, 12), bool],) {
  %475 = @func_1858() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %476 = %475.0;
  (%476,)
}

def @func_1381() -> (Tensor[(5, 9, 12), bool],) {
  %477 = @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %478 = %477.1;
  (%478,)
}

def @func_717(%var_710: float64) -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], float64, Tensor[(2112), float64]) {
  %479 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %480 = cast(%var_710, dtype="float64") /* ty=float64 */;
  %481 = cast(meta[relay.Constant][22] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %482 = reshape(%480, newshape=[]) /* ty=float64 */;
  %483 = reshape(%481, newshape=[16, 12, 11]) /* ty=Tensor[(16, 12, 11), float64] */;
  %484 = @func_461(%482, %483) /* ty=(Tensor[(16, 12, 11), float64], Tensor[(5, 9, 12), bool]) */;
  %485 = %479.0;
  %486 = %484.1;
  (%485, %486, %var_710, meta[relay.Constant][22] /* ty=Tensor[(2112), float64] */)
}

def @func_1154() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %487 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %488 = @func_748() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %489 = %487.0;
  %490 = %488.0;
  %491 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  (%489, %490, %491)
}

def @func_3221() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %492 = @func_1730() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %493 = %492.1;
  %494 = cast(%493, dtype="int16") /* ty=Tensor[(5, 9, 12), int16] */;
  %495 = reshape(%494, newshape=[3, 12, 15]) /* ty=Tensor[(3, 12, 15), int16] */;
  %496 = @func_606(%495) /* ty=(Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), bool]) */;
  %497 = %496.1;
  (%493, %497)
}

def @func_9092() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %498 = @func_3847() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %499 = @func_3324() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %500 = @func_1425() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %501 = @func_3564() /* ty=(Tensor[(3, 12, 15), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %502 = %498.4;
  %503 = @func_6983() /* ty=Tensor[(5, 9, 12), bool] */;
  %504 = %499.0;
  %505 = %500.0;
  %506 = %501.2;
  (%502, %503, %504, %505, %506)
}

def @func_8527() -> Tensor[(5, 9, 12), bool] {
  @func_2352() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_6539() -> Tensor[(5, 9, 12), bool] {
  @func_2760() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_345() -> Tensor[(5, 9, 12), bool] {
  %507 = @func_299() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %507.0
}

def @func_4250() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 12, 15), bool]) {
  %508 = @func_2246() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %509 = @func_3053() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %510 = @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %511 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
  %512 = %508.1;
  %513 = %509.2;
  %514 = %510.2;
  %515 = %511.1;
  (%512, %513, %514, %515)
}

def @func_1342() -> (Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %516 = @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %517 = %516.0;
  %518 = cast(%517, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
  %519 = cast(%517, dtype="int16") /* ty=Tensor[(5, 9, 12), int16] */;
  %520 = reshape(%519, newshape=[3, 12, 15]) /* ty=Tensor[(3, 12, 15), int16] */;
  %521 = @func_606(%520) /* ty=(Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), bool]) */;
  %522 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %523 = erf(%518) /* ty=Tensor[(5, 9, 12), float64] */;
  %524 = %521.1;
  %525 = %522.0;
  (%523, %524, %525)
}

def @func_10402(%var_10396: Tensor[(6, 9, 14), float32], %var_10397: Tensor[(6, 9, 14), float32]) -> (Tensor[(6, 9, 14), float32],) {
  %526 = cast(%var_10397, dtype="float32") /* ty=Tensor[(6, 9, 14), float32] */;
  %527 = shape_of(%var_10396, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%var_10396, dtype="float32") /* ty=Tensor[(6, 9, 14), float32] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %530 = mod(%528, %529) /* ty=Tensor[(6, 9, 14), float32] */;
  (%530,)
}

def @func_2569() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
  %531 = @func_945() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %532 = @func_1381() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %533 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
  %534 = %531.1;
  %535 = %532.0;
  %536 = %533.0;
  (%534, %535, %536)
}

def @func_259() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %537 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %538 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %539 = %537.0;
  %540 = %538.1;
  (%539, %540)
}

def @func_4180(%var_4170: Tensor[(392), uint32]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(14, 2, 14), uint32], Tensor[(392), uint32]) {
  %541 = @func_3474() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(13, 5, 3), float64]) */;
  %542 = cast(%var_4170, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %543 = cast(%var_4170, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %544 = reshape(%542, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint32] */;
  %545 = reshape(%543, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint32] */;
  %546 = %541.4;
  %547 = @func_345() /* ty=Tensor[(5, 9, 12), bool] */;
  %548 = @func_4131(%544, %545) /* ty=Tensor[(14, 2, 14), uint32] */;
  (%546, %547, %548, %var_4170)
}

def @func_1190() -> Tensor[(5, 9, 12), float32] {
  @func_667() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_9264() -> Tensor[(5, 9, 12), bool] {
  %549 = @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %549.0
}

def @func_9113() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %550 = @func_6372() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %551 = @func_2641() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %552 = %550.0;
  %553 = %551.1;
  (%552, %553)
}

def @func_4342() -> (Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %554 = @func_2741() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %555 = @func_4092() /* ty=Tensor[(9, 5, 5), float32] */;
  %556 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  %557 = %554.1;
  (%555, %556, %557)
}

def @func_7123() -> Tensor[(5, 9, 12), bool] {
  %558 = @func_550() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %558.0
}

def @func_1858() -> (Tensor[(5, 9, 12), bool],) {
  %559 = @func_1850() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool]) */;
  %560 = %559.1;
  (%560,)
}

def @func_3976() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %561 = @func_2741() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %562 = @func_1488() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %563 = @func_550() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %564 = %561.1;
  %565 = %562.4;
  %566 = %563.0;
  (%564, %565, %566)
}

def @func_7757() -> Tensor[(360), float64] {
  %567 = @func_5468() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64], Tensor[(360), float64]) */;
  %567.2
}

def @func_1890() -> Tensor[(5, 9, 12), float32] {
  %568 = @func_1069() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), float32]) */;
  %568.0
}

def @func_5455() -> Tensor[(5, 9, 12), float32] {
  %569 = @func_4944() /* ty=(Tensor[(3, 8, 10), float64], Tensor[(5, 9, 12), float32]) */;
  %569.1
}

def @func_13458() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %570 = @func_2246() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %571 = @func_11716() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %572 = %570.0;
  %573 = %571.0;
  (%572, %573)
}

def @func_7266() -> (Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float32]) {
  %574 = @func_4691() /* ty=(Tensor[(5, 13, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %575 = @func_3474() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(13, 5, 3), float64]) */;
  %576 = %574.2;
  %577 = %575.0;
  (%576, %577)
}

def @func_382(%var_352: Tensor[(8, 5, 9), float64], %var_353: Tensor[(8, 5, 9), float64]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) {
  %578 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %579 = cast(%var_353, dtype="float64") /* ty=Tensor[(8, 5, 9), float64] */;
  %580 = shape_of(%var_352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%var_352, dtype="float64") /* ty=Tensor[(8, 5, 9), float64] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %583 = floor_divide(%581, %582) /* ty=Tensor[(8, 5, 9), float64] */;
  %584 = cast(%583, dtype="float64") /* ty=Tensor[(8, 5, 9), float64] */;
  %585 = %578.1;
  %586 = @func_345() /* ty=Tensor[(5, 9, 12), bool] */;
  %587 = cos(%584) /* ty=Tensor[(8, 5, 9), float64] */;
  (%585, %586, %587)
}

def @func_4466() -> Tensor[(5, 9, 12), bool] {
  @func_1985() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_10236() -> (Tensor[(9, 5, 5), float32],) {
  %588 = @func_4855() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64], Tensor[(240), float64], Tensor[(9, 5, 5), float32]) */;
  %589 = %588.3;
  (%589,)
}

def @func_2821() -> (Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %590 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %591 = %590.1;
  %592 = @func_299() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %593 = %592.0;
  %594 = cast(%593, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
  %595 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %596 = cast(%591, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
  %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %598 = @func_1372() /* ty=Tensor[(13, 5, 3), float32] */;
  %599 = @func_2149() /* ty=Tensor[(5, 9, 12), float32] */;
  %600 = equal(%596, %597) /* ty=Tensor[(5, 9, 12), bool] */;
  (%598, %599, %600)
}

def @func_10629() -> Tensor[(13, 5, 3), float64] {
  %601 = @func_7266() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float32]) */;
  %602 = %601.1;
  %603 = cast(%602, dtype="float64") /* ty=Tensor[(13, 5, 3), float64] */;
  atanh(%603) /* ty=Tensor[(13, 5, 3), float64] */
}

def @func_2994(%var_2849: Tensor[(1, 6, 16), float64], %var_2886: Tensor[(10, 360), float64], %var_2981: Tensor[(8, 6, 16), float64]) -> (Tensor[(5, 9, 12), bool], Tensor[(10, 360), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32], Tensor[(?, 6, 16), float64], Tensor[(?, 6, 16), float32], Tensor[(8, 6, 16), int8]) {
  %604 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 360), float64] */, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %605 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 360), float64] */, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %606 = reshape(%604, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %607 = reshape(%605, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %608 = @func_382(%606, %607) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */;
  %609 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 360), float64] */, dtype="bool") /* ty=Tensor[(1, 360), bool] */;
  %610 = cast(%var_2886, dtype="bool") /* ty=Tensor[(10, 360), bool] */;
  %611 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %612 = @func_2821() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %613 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %614 = cast(%var_2849, dtype="float64") /* ty=Tensor[(1, 6, 16), float64] */;
  %615 = cosh(%614) /* ty=Tensor[(1, 6, 16), float64] */;
  %616 = cast(%var_2849, dtype="float64") /* ty=Tensor[(1, 6, 16), float64] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%615, dtype="float64") /* ty=Tensor[(1, 6, 16), float64] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %620 = mod(%618, %619) /* ty=Tensor[(?, 6, 16), float64] */;
  %621 = cast(%615, dtype="int64") /* ty=Tensor[(1, 6, 16), int64] */;
  %622 = shape_of(%620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%620, dtype="int64") /* ty=Tensor[(?, 6, 16), int64] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %625 = maximum(%623, %624) /* ty=Tensor[(?, 6, 16), int64] */;
  %626 = cast(%625, dtype="float64") /* ty=Tensor[(?, 6, 16), float64] */;
  %627 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%615, dtype="float64") /* ty=Tensor[(1, 6, 16), float64] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %630 = cast(%625, dtype="float32") /* ty=Tensor[(?, 6, 16), float32] */;
  %631 = acos(%630) /* ty=Tensor[(?, 6, 16), float32] */;
  %632 = cast(%620, dtype="float32") /* ty=Tensor[(?, 6, 16), float32] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="float32") /* ty=Tensor[(?, 6, 16), float32] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %636 = cast(%620, dtype="int8") /* ty=Tensor[(?, 6, 16), int8] */;
  %637 = cast(%var_2981, dtype="int8") /* ty=Tensor[(8, 6, 16), int8] */;
  %638 = bitwise_and(%636, %637) /* ty=Tensor[(8, 6, 16), int8] */;
  %639 = cast(%631, dtype="int8") /* ty=Tensor[(?, 6, 16), int8] */;
  %640 = cast(%638, dtype="int8") /* ty=Tensor[(8, 6, 16), int8] */;
  %641 = %608.1;
  %642 = greater(%609, %610) /* ty=Tensor[(10, 360), bool] */;
  %643 = %611.1;
  %644 = %612.2;
  %645 = %613.1;
  %646 = divide(%628, %629) /* ty=Tensor[(?, 6, 16), float64] */;
  %647 = floor_divide(%634, %635) /* ty=Tensor[(?, 6, 16), float32] */;
  %648 = bitwise_or(%639, %640) /* ty=Tensor[(8, 6, 16), int8] */;
  (%641, %642, %643, %644, %645, %646, %647, %648)
}

def @func_10372() -> (Tensor[(5, 9, 12), int32], Tensor[(120), int16]) {
  %649 = @func_1167() /* ty=Tensor[(5, 9, 12), int32] */;
  %650 = @func_7072() /* ty=Tensor[(120), int16] */;
  (%649, %650)
}

def @func_12109(%var_12106: Tensor[(6, 144), float32]) -> (Tensor[(5, 9, 12), bool], Tensor[(6, 12, 12), float32], Tensor[(6, 144), float32]) {
  %651 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %652 = cast(%var_12106, dtype="float32") /* ty=Tensor[(6, 144), float32] */;
  %653 = reshape(%652, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
  %654 = @func_4079(%653) /* ty=(Tensor[(6, 12, 12), float32],) */;
  %655 = %651.1;
  %656 = %654.0;
  (%655, %656, %var_12106)
}

def @func_13974(%var_13968: Tensor[(420), int16]) -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32], Tensor[(420), int16]) {
  %657 = @func_3266() /* ty=(Tensor[(5, 9, 12), int32],) */;
  %658 = cast(%var_13968, dtype="int16") /* ty=Tensor[(420), int16] */;
  %659 = reshape(%658, newshape=[14, 15, 2]) /* ty=Tensor[(14, 15, 2), int16] */;
  %660 = @func_5165(%659) /* ty=(Tensor[(14, 15, 2), int16], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %661 = %657.0;
  %662 = %660.1;
  (%661, %662, %var_13968)
}

def @func_13431() -> (Tensor[(5, 9, 12), float32],) {
  %663 = @func_9092() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %664 = %663.3;
  (%664,)
}

def @func_6508() -> (Tensor[(360), float64],) {
  %665 = @func_5468() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64], Tensor[(360), float64]) */;
  %666 = %665.2;
  (%666,)
}

def @func_9920() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32], Tensor[(4, 5, 15), int32], Tensor[(10, 30), int64], Tensor[(5, 9, 12), bool]) {
  %667 = @func_748() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %668 = @func_6789() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %669 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 30), int64] */, dtype="int64") /* ty=Tensor[(10, 30), int64] */;
  %670 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 30), int64] */, dtype="int64") /* ty=Tensor[(10, 30), int64] */;
  %671 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 30), int64] */, dtype="int16") /* ty=Tensor[(10, 30), int16] */;
  %672 = reshape(%669, newshape=[4, 5, 15]) /* ty=Tensor[(4, 5, 15), int64] */;
  %673 = reshape(%670, newshape=[4, 5, 15]) /* ty=Tensor[(4, 5, 15), int64] */;
  %674 = reshape(%671, newshape=[4, 5, 15]) /* ty=Tensor[(4, 5, 15), int16] */;
  %675 = @func_5541(%672, %673, %674) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(4, 5, 15), int32]) */;
  %676 = %667.0;
  %677 = @func_6539() /* ty=Tensor[(5, 9, 12), bool] */;
  %678 = %668.1;
  %679 = %675.1;
  %680 = @func_3286() /* ty=Tensor[(5, 9, 12), bool] */;
  (%676, %677, %678, %679, meta[relay.Constant][24] /* ty=Tensor[(10, 30), int64] */, %680)
}

def @func_8648(%var_8631: Tensor[(12, 5, 14), uint32], %var_8632: Tensor[(12, 5, 14), uint32]) -> Tensor[(12, 5, 14), float32] {
  %681 = cast(%var_8632, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
  %682 = shape_of(%var_8631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%var_8631, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %685 = equal(%683, %684) /* ty=Tensor[(12, 5, 14), bool] */;
  %686 = cast(%685, dtype="float32") /* ty=Tensor[(12, 5, 14), float32] */;
  acos(%686) /* ty=Tensor[(12, 5, 14), float32] */
}

def @func_12623(%var_12592: Tensor[(30), float64]) -> (Tensor[(13, 5, 3), float64], Tensor[(5, 9, 12), float32], Tensor[(3, 10, 1), float64], Tensor[(30), float64]) {
  %687 = @func_1372() /* ty=Tensor[(13, 5, 3), float32] */;
  %688 = cast(%687, dtype="float64") /* ty=Tensor[(13, 5, 3), float64] */;
  %689 = @func_8111() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %690 = cast(%var_12592, dtype="float64") /* ty=Tensor[(30), float64] */;
  %691 = reshape(%690, newshape=[3, 10, 1]) /* ty=Tensor[(3, 10, 1), float64] */;
  %692 = asin(%688) /* ty=Tensor[(13, 5, 3), float64] */;
  %693 = %689.0;
  %694 = @func_9173(%691) /* ty=Tensor[(3, 10, 1), float64] */;
  (%692, %693, %694, %var_12592)
}

def @func_7064() -> (Tensor[(9, 5, 5), float32], Tensor[(8, 5, 9), float32], Tensor[(9, 5, 5), float32]) {
  %695 = @func_5128() /* ty=Tensor[(8, 5, 9), float32] */;
  %696 = cast(%695, dtype="float64") /* ty=Tensor[(8, 5, 9), float64] */;
  %697 = sqrt(%696) /* ty=Tensor[(8, 5, 9), float64] */;
  %698 = cast(%697, dtype="float32") /* ty=Tensor[(8, 5, 9), float32] */;
  %699 = @func_4092() /* ty=Tensor[(9, 5, 5), float32] */;
  %700 = log10(%698) /* ty=Tensor[(8, 5, 9), float32] */;
  %701 = @func_4092() /* ty=Tensor[(9, 5, 5), float32] */;
  (%699, %700, %701)
}

def @func_5366() -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) {
  %702 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
  %703 = %702.0;
  %704 = @func_2708() /* ty=Tensor[(5, 9, 12), float32] */;
  (%703, %704)
}

def @func_10392() -> Tensor[(5, 9, 12), float32] {
  @func_3788() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_4695() -> (Tensor[(5, 9, 12), int32],) {
  %705 = @func_3251() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) */;
  %706 = %705.0;
  (%706,)
}

def @func_309() -> (Tensor[(5, 9, 12), bool],) {
  %707 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %708 = %707.0;
  (%708,)
}

def @func_7884(%var_7872: Tensor[(1, 5, 10), float32]) -> (Tensor[(?, 5, 10), bool], Tensor[(5, 9, 12), float32]) {
  %709 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 5, 10), float32] */, dtype="bool") /* ty=Tensor[(1, 5, 10), bool] */;
  %710 = shape_of(%var_7872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%var_7872, dtype="bool") /* ty=Tensor[(1, 5, 10), bool] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %713 = @func_1869() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %714 = greater_equal(%711, %712) /* ty=Tensor[(?, 5, 10), bool] */;
  %715 = %713.0;
  (%714, %715)
}

def @func_6662() -> (Tensor[(5, 9, 12), float32], Tensor[(16, 8, 15), bool], Tensor[(120), int16]) {
  %716 = @func_4206() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %717 = cast(meta[relay.Constant][26] /* ty=Tensor[(120), int16] */, dtype="int16") /* ty=Tensor[(120), int16] */;
  %718 = reshape(%717, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), int16] */;
  %719 = @func_6453(%718) /* ty=(Tensor[(16, 8, 15), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), int32]) */;
  %720 = %716.0;
  %721 = %719.0;
  (%720, %721, meta[relay.Constant][26] /* ty=Tensor[(120), int16] */)
}

def @func_2022() -> Tensor[(5, 9, 12), float32] {
  %722 = @func_1253() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %722.0
}

def @func_11888() -> (Tensor[(5, 9, 12), float32],) {
  %723 = @func_11682() /* ty=Tensor[(5, 9, 12), float32] */;
  (%723,)
}

def @func_4400() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %724 = @func_1850() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool]) */;
  %725 = @func_2085() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %726 = @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %727 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  %728 = %724.1;
  %729 = %725.0;
  %730 = %726.1;
  (%727, %728, %729, %730)
}

def @func_13254() -> (Tensor[(780), bool], Tensor[(5, 9, 12), bool]) {
  %731 = @func_9633() /* ty=(Tensor[(780), bool],) */;
  %732 = @func_3686() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %733 = %731.0;
  %734 = %732.1;
  (%733, %734)
}

def @func_5907() -> Tensor[(5, 9, 12), int32] {
  %735 = @func_3266() /* ty=(Tensor[(5, 9, 12), int32],) */;
  %735.0
}

def @func_11067(%var_11034: Tensor[(120), int16]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(6, 20), int16], Tensor[(120), int16], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %736 = cast(%var_11034, dtype="int16") /* ty=Tensor[(120), int16] */;
  %737 = reshape(%736, newshape=[6, 20]) /* ty=Tensor[(6, 20), int16] */;
  %738 = @func_10909(%737) /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32], Tensor[(6, 20), int16]) */;
  %739 = @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %740 = @func_2022() /* ty=Tensor[(5, 9, 12), float32] */;
  %741 = @func_9264() /* ty=Tensor[(5, 9, 12), bool] */;
  %742 = %738.2;
  %743 = @func_7943() /* ty=Tensor[(5, 9, 12), float32] */;
  %744 = %739.2;
  (%740, %741, %742, %var_11034, %743, %744)
}

def @func_5313(%var_5188: Tensor[(13, 5, 3), float64]) -> (Tensor[(13, 5, 3), bool], Tensor[(5, 9, 12), float32], Tensor[(9, 5, 5), float32], Tensor[(3, 8, 10), float64], Tensor[(12, 15, 5), float64], Tensor[(900), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float64]) {
  %745 = @func_4583() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float64], Tensor[(13, 15, 4), bool], Tensor[(5, 9, 12), int32]) */;
  %746 = %745.1;
  %747 = cast(%var_5188, dtype="bool") /* ty=Tensor[(13, 5, 3), bool] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%746, dtype="bool") /* ty=Tensor[(13, 5, 3), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %751 = @func_5080() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %752 = @func_4944() /* ty=(Tensor[(3, 8, 10), float64], Tensor[(5, 9, 12), float32]) */;
  %753 = cast(meta[relay.Constant][27] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
  %754 = reshape(%753, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), float64] */;
  %755 = @func_2123(%754) /* ty=(Tensor[(12, 15, 5), float64], Tensor[(5, 9, 12), float32]) */;
  %756 = @func_3976() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %757 = cast(%var_5188, dtype="float32") /* ty=Tensor[(13, 5, 3), float32] */;
  %758 = log(%757) /* ty=Tensor[(13, 5, 3), float32] */;
  %759 = cast(%var_5188, dtype="float32") /* ty=Tensor[(13, 5, 3), float32] */;
  %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%758, dtype="float32") /* ty=Tensor[(13, 5, 3), float32] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %763 = @func_1069() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), float32]) */;
  %764 = less_equal(%749, %750) /* ty=Tensor[(13, 5, 3), bool] */;
  %765 = %751.1;
  %766 = @func_4092() /* ty=Tensor[(9, 5, 5), float32] */;
  %767 = %752.0;
  %768 = %755.0;
  %769 = @func_1985() /* ty=Tensor[(5, 9, 12), bool] */;
  %770 = %756.2;
  %771 = @func_1985() /* ty=Tensor[(5, 9, 12), bool] */;
  %772 = floor_mod(%761, %762) /* ty=Tensor[(13, 5, 3), float32] */;
  %773 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  %774 = %763.1;
  (%764, %765, %766, %767, %768, meta[relay.Constant][27] /* ty=Tensor[(900), float64] */, %769, %770, %771, %772, %773, %774)
}

def @func_3251() -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) {
  %775 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
  %776 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %777 = %775.0;
  %778 = %776.0;
  (%777, %778)
}

def @func_4416(%var_4407: Tensor[(3, 8, 10), float64]) -> (Tensor[(3, 8, 10), float64],) {
  %779 = cast(%var_4407, dtype="float64") /* ty=Tensor[(3, 8, 10), float64] */;
  %780 = cosh(%779) /* ty=Tensor[(3, 8, 10), float64] */;
  (%780,)
}

def @func_12405(%var_12378: Tensor[(900), float64]) -> (Tensor[(360), float64], Tensor[(900), float64], Tensor[(900), float64]) {
  %781 = cast(%var_12378, dtype="float64") /* ty=Tensor[(900), float64] */;
  %782 = reshape(%781, newshape=[900]) /* ty=Tensor[(900), float64] */;
  %783 = @func_10150(%782) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(900), float64]) */;
  %784 = @func_7757() /* ty=Tensor[(360), float64] */;
  %785 = %783.3;
  (%784, %785, %var_12378)
}

def @func_1850() -> (Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool]) {
  %786 = @func_1488() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %787 = %786.4;
  %788 = cast(%787, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
  %789 = @func_1425() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %790 = tan(%788) /* ty=Tensor[(5, 9, 12), float64] */;
  %791 = %789.1;
  (%790, %791)
}

def @func_12532() -> (Tensor[(5, 9, 12), float32],) {
  %792 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %793 = %792.1;
  (%793,)
}

def @func_906() -> Tensor[(5, 9, 12), bool] {
  @func_345() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_5080() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %794 = @func_3221() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %795 = @func_3324() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %796 = @func_299() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %797 = @func_3686() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %798 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %799 = %794.0;
  %800 = %795.0;
  %801 = %796.0;
  %802 = %797.1;
  %803 = @func_2149() /* ty=Tensor[(5, 9, 12), float32] */;
  %804 = @func_2149() /* ty=Tensor[(5, 9, 12), float32] */;
  %805 = %798.0;
  %806 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  (%799, %800, %801, %802, %803, %804, %805, %806)
}

def @func_8182() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(13, 15, 4), bool], Tensor[(780), bool]) {
  %807 = @func_5852() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32]) */;
  %808 = @func_1850() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool]) */;
  %809 = cast(meta[relay.Constant][28] /* ty=Tensor[(780), bool] */, dtype="bool") /* ty=Tensor[(780), bool] */;
  %810 = reshape(%809, newshape=[13, 15, 4]) /* ty=Tensor[(13, 15, 4), bool] */;
  %811 = %807.1;
  %812 = %808.1;
  %813 = @func_632(%810) /* ty=Tensor[(13, 15, 4), bool] */;
  (%811, %812, %813, meta[relay.Constant][28] /* ty=Tensor[(780), bool] */)
}

def @func_2129() -> (Tensor[(5, 9, 12), bool],) {
  %814 = @func_788() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %815 = %814.0;
  (%815,)
}

def @func_12696(%var_12682: Tensor[(12, 7, 1), int64], %var_12683: Tensor[(12, 7, 15), int64]) -> (Tensor[(12, 7, 15), int64], Tensor[(5, 9, 12), bool]) {
  %816 = cast(%var_12682, dtype="int64") /* ty=Tensor[(12, 7, 1), int64] */;
  %817 = cast(%var_12683, dtype="int64") /* ty=Tensor[(12, 7, 15), int64] */;
  %818 = @func_1730() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %819 = logical_xor(%816, %817) /* ty=Tensor[(12, 7, 15), int64] */;
  %820 = %818.1;
  (%819, %820)
}

def @func_11238() -> (Tensor[(5, 9, 12), int32],) {
  %821 = @func_7293() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %822 = %821.1;
  (%822,)
}

def @func_6123() -> Tensor[(5, 9, 12), bool] {
  %823 = @func_945() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %824 = %823.2;
  %825 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %826 = %825.0;
  %827 = cast(%826, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
  %828 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%824, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%829, %830) /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_12651(%var_12633: Tensor[(1, 15, 8), uint64]) -> (Tensor[(9, 15, 8), uint64],) {
  %831 = cast(%var_12633, dtype="uint64") /* ty=Tensor[(1, 15, 8), uint64] */;
  %832 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 15, 8), uint64] */, dtype="uint64") /* ty=Tensor[(9, 15, 8), uint64] */;
  %833 = bitwise_xor(%831, %832) /* ty=Tensor[(9, 15, 8), uint64] */;
  (%833,)
}

def @func_6789() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
  %834 = @func_2569() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %835 = @func_4583() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float64], Tensor[(13, 15, 4), bool], Tensor[(5, 9, 12), int32]) */;
  %836 = %834.0;
  %837 = %835.3;
  (%836, %837)
}

def @func_8599() -> Tensor[(5, 9, 12), float32] {
  @func_5455() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_4789() -> Tensor[(5, 9, 12), float32] {
  @func_1890() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_6406() -> Tensor[(5, 9, 12), float32] {
  @func_2325() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_9553() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %838 = @func_2741() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %839 = @func_3976() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %840 = @func_345() /* ty=Tensor[(5, 9, 12), bool] */;
  %841 = %838.0;
  %842 = %839.0;
  (%840, %841, %842)
}

def @func_8550() -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) {
  %843 = @func_1167() /* ty=Tensor[(5, 9, 12), int32] */;
  %844 = @func_6021() /* ty=Tensor[(5, 9, 12), float32] */;
  (%843, %844)
}

def @func_11967() -> (Tensor[(5, 9, 12), int32],) {
  %845 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %846 = %845.1;
  (%846,)
}

def @func_5622(%var_5614: Tensor[(5, 15, 8), uint32]) -> (Tensor[(5, 15, 8), bool],) {
  %847 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 15, 8), uint32] */, dtype="bool") /* ty=Tensor[(5, 15, 8), bool] */;
  %848 = shape_of(%var_5614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%var_5614, dtype="bool") /* ty=Tensor[(5, 15, 8), bool] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %851 = greater_equal(%849, %850) /* ty=Tensor[(5, 15, 8), bool] */;
  (%851,)
}

def @func_9496(%var_9481: Tensor[(5, 13, 12), float32]) -> (Tensor[(5, 9, 12), bool], Tensor[(5, 13, 12), bool], Tensor[(5, 9, 12), bool]) {
  %852 = @func_4691() /* ty=(Tensor[(5, 13, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %853 = %852.0;
  %854 = cast(%var_9481, dtype="bool") /* ty=Tensor[(5, 13, 12), bool] */;
  %855 = shape_of(%853, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%853, dtype="bool") /* ty=Tensor[(5, 13, 12), bool] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %858 = @func_2352() /* ty=Tensor[(5, 9, 12), bool] */;
  %859 = equal(%856, %857) /* ty=Tensor[(5, 13, 12), bool] */;
  %860 = @func_6983() /* ty=Tensor[(5, 9, 12), bool] */;
  (%858, %859, %860)
}

def @func_10059(%var_9974: int8) -> (Tensor[(5, 9, 12), float32], Tensor[(9, 5, 5), float32], Tensor[(8, 12, 8), float64]) {
  %861 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %862 = cast(%var_9974, dtype="int8") /* ty=int8 */;
  %863 = cast(meta[relay.Constant][31] /* ty=Tensor[(8, 12, 8), int8] */, dtype="int8") /* ty=Tensor[(8, 12, 8), int8] */;
  %864 = bitwise_and(%862, %863) /* ty=Tensor[(8, 12, 8), int8] */;
  %865 = cast(%864, dtype="float64") /* ty=Tensor[(8, 12, 8), float64] */;
  %866 = %861.0;
  %867 = @func_4092() /* ty=Tensor[(9, 5, 5), float32] */;
  %868 = log10(%865) /* ty=Tensor[(8, 12, 8), float64] */;
  (%866, %867, %868)
}

def @func_4887() -> (Tensor[(5, 9, 12), bool], Tensor[(14, 2, 14), uint32], Tensor[(392), uint32], Tensor[(3, 12, 15), bool]) {
  %869 = @func_4400() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %870 = cast(meta[relay.Constant][32] /* ty=Tensor[(392), uint32] */, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %871 = cast(meta[relay.Constant][32] /* ty=Tensor[(392), uint32] */, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %872 = reshape(%870, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint32] */;
  %873 = reshape(%871, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint32] */;
  %874 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
  %875 = %869.0;
  %876 = @func_4131(%872, %873) /* ty=Tensor[(14, 2, 14), uint32] */;
  %877 = %874.1;
  (%875, %876, meta[relay.Constant][32] /* ty=Tensor[(392), uint32] */, %877)
}

def @func_5128() -> Tensor[(8, 5, 9), float32] {
  %878 = @func_2462() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float32], Tensor[(36, 10), bool], Tensor[(5, 9, 12), bool]) */;
  %879 = %878.2;
  %880 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(8, 5, 9), float32] */;
  %881 = shape_of(%879, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%879, dtype="float32") /* ty=Tensor[(8, 5, 9), float32] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%882, %883) /* ty=Tensor[(8, 5, 9), float32] */
}

def @func_10589() -> Tensor[(5, 9, 12), float32] {
  %884 = @func_9092() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %884.2
}

def @func_6021() -> Tensor[(5, 9, 12), float32] {
  %885 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %885.1
}

def @func_10836(%var_10732: Tensor[(7, 13, 3), float64]) -> (Tensor[(7, 13, 3), float64], Tensor[(5, 9, 12), bool], Tensor[(392), uint32], Tensor[(7, 13, 3), float64], Tensor[(5, 9, 12), float32]) {
  %886 = cast(%var_10732, dtype="float64") /* ty=Tensor[(7, 13, 3), float64] */;
  %887 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %888 = @func_4887() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(14, 2, 14), uint32], Tensor[(392), uint32], Tensor[(3, 12, 15), bool]) */;
  %889 = cast(%var_10732, dtype="float32") /* ty=Tensor[(7, 13, 3), float32] */;
  %890 = atan(%889) /* ty=Tensor[(7, 13, 3), float32] */;
  %891 = cast(%890, dtype="float64") /* ty=Tensor[(7, 13, 3), float64] */;
  %892 = sqrt(%886) /* ty=Tensor[(7, 13, 3), float64] */;
  %893 = %887.0;
  %894 = %888.2;
  %895 = sinh(%891) /* ty=Tensor[(7, 13, 3), float64] */;
  %896 = @func_2325() /* ty=Tensor[(5, 9, 12), float32] */;
  (%892, %893, %894, %895, %896)
}

def @func_1069() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), float32]) {
  %897 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %898 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %899 = %898.0;
  %900 = cast(%899, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
  %901 = @func_748() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %902 = %897.1;
  %903 = exp(%900) /* ty=Tensor[(5, 9, 12), float64] */;
  %904 = %901.1;
  (%902, %903, %904)
}

def @func_2641() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %905 = @func_1671() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %906 = @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %907 = %905.0;
  %908 = %906.1;
  (%907, %908)
}

def @func_3611() -> Tensor[(5, 9, 12), bool] {
  %909 = @func_1858() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %909.0
}

def @func_12828() -> (Tensor[(10, 1, 15), float64],) {
  %910 = cast(meta[relay.Constant][34] /* ty=Tensor[(10, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 1, 15), float64] */;
  %911 = exp(%910) /* ty=Tensor[(10, 1, 15), float64] */;
  (%911,)
}

def @func_11751(%var_11734: Tensor[(9, 5, 6), int8], %var_11735: Tensor[(9, 5, 6), int8]) -> (Tensor[(9, 5, 6), int8], Tensor[(9, 5, 5), float32]) {
  %912 = cast(%var_11735, dtype="int8") /* ty=Tensor[(9, 5, 6), int8] */;
  %913 = shape_of(%var_11734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %914 = cast(%var_11734, dtype="int8") /* ty=Tensor[(9, 5, 6), int8] */;
  %915 = dyn.reshape(%912, %913, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %916 = @func_4342() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %917 = add(%914, %915) /* ty=Tensor[(9, 5, 6), int8] */;
  %918 = %916.0;
  (%917, %918)
}

def @func_13588() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %919 = @func_2129() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %920 = @func_10433() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(16, 12, 11), int64], float64, Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), int32]) */;
  %921 = @func_3611() /* ty=Tensor[(5, 9, 12), bool] */;
  %922 = %919.0;
  %923 = %920.0;
  (%921, %922, %923)
}

def @func_2085() -> (Tensor[(5, 9, 12), float32],) {
  %924 = @func_1730() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %925 = %924.0;
  (%925,)
}

def @func_3564() -> (Tensor[(3, 12, 15), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %926 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
  %927 = %926.1;
  %928 = cast(%927, dtype="float32") /* ty=Tensor[(3, 12, 15), float32] */;
  %929 = atan(%928) /* ty=Tensor[(3, 12, 15), float32] */;
  %930 = cast(%929, dtype="float32") /* ty=Tensor[(3, 12, 15), float32] */;
  %931 = @func_1850() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool]) */;
  %932 = sinh(%930) /* ty=Tensor[(3, 12, 15), float32] */;
  %933 = %931.1;
  %934 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  (%932, %933, %934)
}

def @func_1219() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %935 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  %936 = cast(%935, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  %937 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %938 = log10(%936) /* ty=Tensor[(5, 9, 12), float32] */;
  %939 = %937.0;
  (%938, %939)
}

def @func_10571() -> (Tensor[(5, 9, 12), bool],) {
  %940 = @func_345() /* ty=Tensor[(5, 9, 12), bool] */;
  (%940,)
}

def @func_5824(%var_5821: float64) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(2112), float64], float64) {
  %941 = @func_4250() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 12, 15), bool]) */;
  %942 = @func_2741() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %943 = %942.0;
  %944 = cast(%943, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  %945 = cast(%var_5821, dtype="float64") /* ty=float64 */;
  %946 = reshape(%945, newshape=[]) /* ty=float64 */;
  %947 = @func_717(%946) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], float64, Tensor[(2112), float64]) */;
  %948 = %941.0;
  %949 = sigmoid(%944) /* ty=Tensor[(5, 9, 12), float32] */;
  %950 = %947.3;
  (%948, %949, %950, %var_5821)
}

def @func_9633() -> (Tensor[(780), bool],) {
  %951 = @func_8182() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(13, 15, 4), bool], Tensor[(780), bool]) */;
  %952 = %951.3;
  (%952,)
}

def @func_12283() -> (Tensor[(5, 9, 12), float32], Tensor[(6, 12, 12), float32], Tensor[(864), float32]) {
  %953 = cast(meta[relay.Constant][35] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %954 = reshape(%953, newshape=[6, 144]) /* ty=Tensor[(6, 144), float32] */;
  %955 = @func_12109(%954) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(6, 12, 12), float32], Tensor[(6, 144), float32]) */;
  %956 = @func_8599() /* ty=Tensor[(5, 9, 12), float32] */;
  %957 = %955.1;
  (%956, %957, meta[relay.Constant][35] /* ty=Tensor[(864), float32] */)
}

def @func_1488() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %958 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %959 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %960 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %961 = %958.0;
  %962 = %959.0;
  %963 = @func_1190() /* ty=Tensor[(5, 9, 12), float32] */;
  %964 = %960.0;
  %965 = @func_345() /* ty=Tensor[(5, 9, 12), bool] */;
  (%961, %962, %963, %964, %965)
}

def @func_8490() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %966 = @func_6520() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %967 = @func_5752() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %968 = %966.0;
  %969 = %967.0;
  (%968, %969)
}

def @func_3474() -> (Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(13, 5, 3), float64]) {
  %970 = @func_2821() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %971 = @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %972 = @func_2085() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %973 = @func_2821() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %974 = %973.0;
  %975 = cast(%974, dtype="float32") /* ty=Tensor[(13, 5, 3), float32] */;
  %976 = exp(%975) /* ty=Tensor[(13, 5, 3), float32] */;
  %977 = cast(%976, dtype="float64") /* ty=Tensor[(13, 5, 3), float64] */;
  %978 = %970.0;
  %979 = %971.2;
  %980 = @func_667() /* ty=Tensor[(5, 9, 12), float32] */;
  %981 = @func_1190() /* ty=Tensor[(5, 9, 12), float32] */;
  %982 = %972.0;
  %983 = sin(%977) /* ty=Tensor[(13, 5, 3), float64] */;
  (%978, %979, %980, %981, %982, %983)
}

def @func_4751() -> (Tensor[(4, 13, 5), bool], Tensor[(7, 10, 11), bool], Tensor[(770), int8]) {
  %984 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(4, 13, 5), float32] */;
  %985 = log10(%984) /* ty=Tensor[(4, 13, 5), float32] */;
  %986 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 13, 5), float32] */, dtype="bool") /* ty=Tensor[(4, 13, 5), bool] */;
  %987 = shape_of(%985, dtype="int32") /* ty=Tensor[(3), int32] */;
  %988 = cast(%985, dtype="bool") /* ty=Tensor[(4, 13, 5), bool] */;
  %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %990 = cast(meta[relay.Constant][37] /* ty=Tensor[(770), int8] */, dtype="int8") /* ty=Tensor[(770), int8] */;
  %991 = reshape(%990, newshape=[7, 10, 11]) /* ty=Tensor[(7, 10, 11), int8] */;
  %992 = @func_3736(%991) /* ty=(Tensor[(5, 9, 12), int32], Tensor[(7, 10, 11), float64], Tensor[(7, 10, 11), bool]) */;
  %993 = not_equal(%988, %989) /* ty=Tensor[(4, 13, 5), bool] */;
  %994 = %992.2;
  (%993, %994, meta[relay.Constant][37] /* ty=Tensor[(770), int8] */)
}

def @func_12087() -> Tensor[(5, 9, 12), bool] {
  @func_7123() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_12930(%var_12907: Tensor[(130), uint16]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(26, 1), uint16], Tensor[(130), uint16], Tensor[(13, 5, 3), float32]) {
  %995 = @func_1869() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %996 = cast(meta[relay.Constant][38] /* ty=Tensor[(26, 1), uint16] */, dtype="uint16") /* ty=Tensor[(26, 1), uint16] */;
  %997 = cast(%var_12907, dtype="uint16") /* ty=Tensor[(130), uint16] */;
  %998 = reshape(%996, newshape=[1, 13, 2]) /* ty=Tensor[(1, 13, 2), uint16] */;
  %999 = reshape(%997, newshape=[5, 13, 2]) /* ty=Tensor[(5, 13, 2), uint16] */;
  %1000 = @func_8787(%998, %999) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 13, 2), float32]) */;
  %1001 = %995.0;
  %1002 = %1000.0;
  %1003 = @func_1372() /* ty=Tensor[(13, 5, 3), float32] */;
  (%1001, %1002, meta[relay.Constant][38] /* ty=Tensor[(26, 1), uint16] */, %var_12907, %1003)
}

def @func_7293() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
  %1004 = @func_6539() /* ty=Tensor[(5, 9, 12), bool] */;
  %1005 = @func_5907() /* ty=Tensor[(5, 9, 12), int32] */;
  (%1004, %1005)
}

def @func_2741() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %1006 = @func_2246() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %1007 = @func_1488() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %1008 = %1006.1;
  %1009 = %1007.3;
  (%1008, %1009)
}

def @func_12195() -> Tensor[(5, 9, 12), float32] {
  %1010 = @func_1639() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(360), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), uint16], Tensor[(5, 9, 12), float32]) */;
  %1010.1
}

def @func_3053() -> (Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %1011 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 5, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 5, 5), float32] */;
  %1012 = @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %1013 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %1014 = log2(%1011) /* ty=Tensor[(9, 5, 5), float32] */;
  %1015 = %1012.0;
  %1016 = %1013.0;
  (%1014, %1015, %1016)
}

def @func_3736(%var_3691: Tensor[(7, 10, 11), int8]) -> (Tensor[(5, 9, 12), int32], Tensor[(7, 10, 11), float64], Tensor[(7, 10, 11), bool]) {
  %1017 = @func_3266() /* ty=(Tensor[(5, 9, 12), int32],) */;
  %1018 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 10, 11), int8] */, dtype="int8") /* ty=Tensor[(7, 10, 11), int8] */;
  %1019 = shape_of(%var_3691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1020 = cast(%var_3691, dtype="int8") /* ty=Tensor[(7, 10, 11), int8] */;
  %1021 = dyn.reshape(%1018, %1019, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1022 = bitwise_and(%1020, %1021) /* ty=Tensor[(7, 10, 11), int8] */;
  %1023 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 10, 11), int8] */, dtype="int8") /* ty=Tensor[(7, 10, 11), int8] */;
  %1024 = shape_of(%var_3691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1025 = cast(%var_3691, dtype="int8") /* ty=Tensor[(7, 10, 11), int8] */;
  %1026 = dyn.reshape(%1023, %1024, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1027 = bitwise_xor(%1025, %1026) /* ty=Tensor[(7, 10, 11), int8] */;
  %1028 = cast(%1027, dtype="float64") /* ty=Tensor[(7, 10, 11), float64] */;
  %1029 = shape_of(%1022, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1030 = cast(%1022, dtype="float64") /* ty=Tensor[(7, 10, 11), float64] */;
  %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1032 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 10, 11), int8] */, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
  %1033 = shape_of(%var_3691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1034 = cast(%var_3691, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
  %1035 = dyn.reshape(%1032, %1033, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1036 = %1017.0;
  %1037 = divide(%1030, %1031) /* ty=Tensor[(7, 10, 11), float64] */;
  %1038 = greater_equal(%1034, %1035) /* ty=Tensor[(7, 10, 11), bool] */;
  (%1036, %1037, %1038)
}

def @func_8248() -> (Tensor[(8, 5, 9), float32], Tensor[(36, 10), bool], Tensor[(5, 9, 12), float32]) {
  %1039 = @func_5438() /* ty=(Tensor[(36, 10), bool],) */;
  %1040 = @func_7494() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64]) */;
  %1041 = @func_5128() /* ty=Tensor[(8, 5, 9), float32] */;
  %1042 = %1039.0;
  %1043 = %1040.6;
  (%1041, %1042, %1043)
}

def @func_5165(%var_5142: Tensor[(14, 15, 2), int16]) -> (Tensor[(14, 15, 2), int16], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %1044 = cast(%var_5142, dtype="int16") /* ty=Tensor[(14, 15, 2), int16] */;
  %1045 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(14, 15, 2), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1046 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 15, 2), int16] */, dtype="int16") /* ty=Tensor[(14, 15, 2), int16] */;
  %1047 = dyn.reshape(%1044, %1045, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1048 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %1049 = bitwise_xor(%1046, %1047) /* ty=Tensor[(14, 15, 2), int16] */;
  %1050 = %1048.0;
  %1051 = @func_3286() /* ty=Tensor[(5, 9, 12), bool] */;
  (%1049, %1050, %1051)
}

def @func_5852() -> (Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32]) {
  %1052 = @func_2821() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %1053 = @func_4250() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 12, 15), bool]) */;
  %1054 = %1052.0;
  %1055 = %1053.1;
  (%1054, %1055)
}

def @func_299() -> (Tensor[(5, 9, 12), bool],) {
  %1056 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %1057 = %1056.0;
  (%1057,)
}

def @func_461(%var_450: float64, %var_451: Tensor[(16, 12, 11), float64]) -> (Tensor[(16, 12, 11), float64], Tensor[(5, 9, 12), bool]) {
  %1058 = cast(%var_450, dtype="float64") /* ty=float64 */;
  %1059 = cast(%var_451, dtype="float64") /* ty=Tensor[(16, 12, 11), float64] */;
  %1060 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %1061 = maximum(%1058, %1059) /* ty=Tensor[(16, 12, 11), float64] */;
  %1062 = %1060.0;
  (%1061, %1062)
}

def @func_5399() -> (Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool]) {
  %1063 = @func_2641() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %1064 = @func_4092() /* ty=Tensor[(9, 5, 5), float32] */;
  %1065 = %1063.1;
  (%1064, %1065)
}

def @func_7494() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64]) {
  %1066 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %1067 = @func_1425() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %1068 = @func_5752() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1069 = @func_1858() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1070 = @func_4583() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float64], Tensor[(13, 15, 4), bool], Tensor[(5, 9, 12), int32]) */;
  %1071 = @func_4855() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64], Tensor[(240), float64], Tensor[(9, 5, 5), float32]) */;
  %1072 = %1066.0;
  %1073 = @func_667() /* ty=Tensor[(5, 9, 12), float32] */;
  %1074 = %1067.3;
  %1075 = @func_1190() /* ty=Tensor[(5, 9, 12), float32] */;
  %1076 = %1068.0;
  %1077 = %1069.0;
  %1078 = @func_5455() /* ty=Tensor[(5, 9, 12), float32] */;
  %1079 = %1070.0;
  %1080 = %1071.1;
  (%1072, %1073, %1074, %1075, %1076, %1077, %1078, %1079, %1080)
}

def @func_4020() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %1081 = @func_3474() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(13, 5, 3), float64]) */;
  %1082 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  %1083 = %1081.1;
  %1084 = @func_2022() /* ty=Tensor[(5, 9, 12), float32] */;
  (%1082, %1083, %1084)
}

def @func_1425() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %1085 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %1086 = @func_1342() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %1087 = @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %1088 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %1089 = %1085.0;
  %1090 = %1086.1;
  %1091 = %1087.1;
  %1092 = %1088.1;
  (%1089, %1090, %1091, %1092)
}

def @func_11435(%var_11416: Tensor[(6, 14, 10), int8], %var_11417: Tensor[(6, 14, 10), int8]) -> (Tensor[(6, 14, 10), int8], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %1093 = cast(%var_11417, dtype="int8") /* ty=Tensor[(6, 14, 10), int8] */;
  %1094 = shape_of(%var_11416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1095 = cast(%var_11416, dtype="int8") /* ty=Tensor[(6, 14, 10), int8] */;
  %1096 = dyn.reshape(%1093, %1094, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1097 = @func_11388() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %1098 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %1099 = right_shift(%1095, %1096) /* ty=Tensor[(6, 14, 10), int8] */;
  %1100 = %1097.0;
  %1101 = %1098.0;
  (%1099, %1100, %1101)
}

def @func_13768() -> (Tensor[(780), uint8],) {
  %1102 = @func_9633() /* ty=(Tensor[(780), bool],) */;
  %1103 = %1102.0;
  %1104 = cast(%1103, dtype="float64") /* ty=Tensor[(780), float64] */;
  %1105 = rsqrt(%1104) /* ty=Tensor[(780), float64] */;
  %1106 = cast(%1103, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %1107 = shape_of(%1105, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1108 = cast(%1105, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %1109 = dyn.reshape(%1106, %1107, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %1110 = add(%1108, %1109) /* ty=Tensor[(780), uint8] */;
  (%1110,)
}

def @func_667() -> Tensor[(5, 9, 12), float32] {
  %1111 = @func_550() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1112 = %1111.0;
  %1113 = cast(%1112, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  cosh(%1113) /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_10909(%var_10907: Tensor[(6, 20), int16]) -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32], Tensor[(6, 20), int16]) {
  %1114 = cast(%var_10907, dtype="int16") /* ty=Tensor[(6, 20), int16] */;
  %1115 = reshape(%1114, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), int16] */;
  %1116 = @func_6453(%1115) /* ty=(Tensor[(16, 8, 15), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), int32]) */;
  %1117 = @func_1167() /* ty=Tensor[(5, 9, 12), int32] */;
  %1118 = %1116.2;
  (%1117, %1118, %var_10907)
}

def @func_9692() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %1119 = @func_1381() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1120 = @func_3686() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %1121 = %1119.0;
  %1122 = %1120.0;
  (%1121, %1122)
}

def @func_2325() -> Tensor[(5, 9, 12), float32] {
  %1123 = @func_1253() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %1123.0
}

def @func_6372() -> (Tensor[(5, 9, 12), bool],) {
  %1124 = @func_1985() /* ty=Tensor[(5, 9, 12), bool] */;
  (%1124,)
}

def @func_5664() -> (Tensor[(5, 9, 12), float32],) {
  %1125 = @func_2085() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %1126 = %1125.0;
  (%1126,)
}

def @func_10899(%var_10854: Tensor[(208), float64], %var_10855: Tensor[(3328), float64]) -> (Tensor[(15, 10, 8), bool], Tensor[(13, 16, 16), bool], Tensor[(208), float64], Tensor[(3328), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %1127 = cast(meta[relay.Constant][43] /* ty=Tensor[(15, 10, 8), int16] */, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
  %1128 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(15, 10, 8), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1129 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 10, 8), int16] */, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
  %1130 = dyn.reshape(%1127, %1128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1131 = cast(%var_10854, dtype="float64") /* ty=Tensor[(208), float64] */;
  %1132 = cast(%var_10855, dtype="float64") /* ty=Tensor[(3328), float64] */;
  %1133 = reshape(%1131, newshape=[13, 1, 16]) /* ty=Tensor[(13, 1, 16), float64] */;
  %1134 = reshape(%1132, newshape=[13, 16, 16]) /* ty=Tensor[(13, 16, 16), float64] */;
  %1135 = not_equal(%1129, %1130) /* ty=Tensor[(15, 10, 8), bool] */;
  %1136 = @func_6882(%1133, %1134) /* ty=Tensor[(13, 16, 16), bool] */;
  %1137 = @func_9618() /* ty=Tensor[(5, 9, 12), bool] */;
  %1138 = @func_2149() /* ty=Tensor[(5, 9, 12), float32] */;
  (%1135, %1136, %var_10854, %var_10855, %1137, %1138)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1154() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %0 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %1 = @func_748() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %2 = %0.0;
  %3 = %1.0;
  %4 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  (%2, %3, %4)
}

def @func_13639() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %8 = fn () -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
    %5 = @func_5752() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %6 = @func_1985() /* ty=Tensor[(5, 9, 12), bool] */;
    %7 = %5.0;
    (%6, %7)
  };
  %8() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_464(%var_462: float64, %var_463: Tensor[(16, 12, 11), float64]) -> (Tensor[(16, 12, 11), float64], Tensor[(5, 9, 12), bool]) {
  %14 = fn (%var_450: float64, %var_451: Tensor[(16, 12, 11), float64]) -> (Tensor[(16, 12, 11), float64], Tensor[(5, 9, 12), bool]) {
    %9 = cast(%var_450, dtype="float64") /* ty=float64 */;
    %10 = cast(%var_451, dtype="float64") /* ty=Tensor[(16, 12, 11), float64] */;
    %11 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %12 = maximum(%9, %10) /* ty=Tensor[(16, 12, 11), float64] */;
    %13 = %11.0;
    (%12, %13)
  };
  %14(%var_462, %var_463) /* ty=(Tensor[(16, 12, 11), float64], Tensor[(5, 9, 12), bool]) */
}

def @func_1344() -> (Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  @func_1342() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_8361(%var_8320: Tensor[(182), float32], %var_8344: float64) -> (Tensor[(5, 9, 12), float32], Tensor[(7, 2, 13), float32], Tensor[(182), float32], Tensor[(5, 9, 12), bool], Tensor[(2112), float64], float64, Tensor[(3, 12, 15), bool]) {
  %15 = @func_3324() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %16 = cast(%var_8320, dtype="float32") /* ty=Tensor[(182), float32] */;
  %17 = reshape(%16, newshape=[7, 2, 13]) /* ty=Tensor[(7, 2, 13), float32] */;
  %18 = @func_4400() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %19 = cast(%var_8344, dtype="float64") /* ty=float64 */;
  %20 = reshape(%19, newshape=[]) /* ty=float64 */;
  %21 = @func_717(%20) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], float64, Tensor[(2112), float64]) */;
  %22 = @func_4250() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 12, 15), bool]) */;
  %23 = %15.0;
  %24 = @func_5592(%17) /* ty=Tensor[(7, 2, 13), float32] */;
  %25 = %18.1;
  %26 = %21.3;
  %27 = %22.3;
  (%23, %24, %var_8320, %25, %26, %var_8344, %27)
}

def @func_2353() -> Tensor[(5, 9, 12), bool] {
  %28 = fn () -> Tensor[(5, 9, 12), bool] {
    @func_345() /* ty=Tensor[(5, 9, 12), bool] */
  };
  %28() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_13896() -> Tensor[(5, 9, 12), bool] {
  %29 = @func_10275() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %29.3
}

def @func_11717() -> (Tensor[(5, 9, 12), bool],) {
  %32 = fn () -> (Tensor[(5, 9, 12), bool],) {
    %30 = @func_10571() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %31 = %30.0;
    (%31,)
  };
  %32() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_3325() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
  %36 = fn () -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
    %33 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %34 = @func_2325() /* ty=Tensor[(5, 9, 12), float32] */;
    %35 = %33.1;
    (%34, %35)
  };
  %36() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */
}

def @func_4066() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
  @func_4064() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */
}

def @func_5168(%var_5166: Tensor[(14, 15, 2), int16]) -> (Tensor[(14, 15, 2), int16], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  @func_5165(%var_5166) /* ty=(Tensor[(14, 15, 2), int16], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */
}

def @func_2130() -> (Tensor[(5, 9, 12), bool],) {
  %39 = fn () -> (Tensor[(5, 9, 12), bool],) {
    %37 = @func_788() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %38 = %37.0;
    (%38,)
  };
  %39() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_1671() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %40 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %41 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %42 = %40.0;
  %43 = %41.1;
  (%42, %43)
}

def @func_179() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
  %44 = cast(8.52693f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %45 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 9, 12), float64] */, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
  %46 = greater(%44, %45) /* ty=Tensor[(5, 9, 12), bool] */;
  %47 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 9, 12), bool] */, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %51 = cast(8.52693f64 /* ty=float64 */, dtype="int32") /* ty=int32 */;
  %52 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 9, 12), float64] */, dtype="int32") /* ty=Tensor[(5, 9, 12), int32] */;
  %53 = logical_or(%49, %50) /* ty=Tensor[(5, 9, 12), bool] */;
  %54 = minimum(%51, %52) /* ty=Tensor[(5, 9, 12), int32] */;
  (%53, %54)
}

def @func_4945() -> (Tensor[(3, 8, 10), float64], Tensor[(5, 9, 12), float32]) {
  %59 = fn () -> (Tensor[(3, 8, 10), float64], Tensor[(5, 9, 12), float32]) {
    %55 = @func_4855() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64], Tensor[(240), float64], Tensor[(9, 5, 5), float32]) */;
    %56 = @func_4250() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 12, 15), bool]) */;
    %57 = %55.1;
    %58 = %56.1;
    (%57, %58)
  };
  %59() /* ty=(Tensor[(3, 8, 10), float64], Tensor[(5, 9, 12), float32]) */
}

def @func_6373() -> (Tensor[(5, 9, 12), bool],) {
  %61 = fn () -> (Tensor[(5, 9, 12), bool],) {
    %60 = @func_1985() /* ty=Tensor[(5, 9, 12), bool] */;
    (%60,)
  };
  %61() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_9114() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %66 = fn () -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
    %62 = @func_6372() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %63 = @func_2641() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %64 = %62.0;
    %65 = %63.1;
    (%64, %65)
  };
  %66() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_9635() -> (Tensor[(780), bool],) {
  @func_9633() /* ty=(Tensor[(780), bool],) */
}

def @func_2570() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
  %73 = fn () -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
    %67 = @func_945() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %68 = @func_1381() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %69 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
    %70 = %67.1;
    %71 = %68.0;
    %72 = %69.0;
    (%70, %71, %72)
  };
  %73() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */
}

def @func_10836(%var_10732: Tensor[(7, 13, 3), float64]) -> (Tensor[(7, 13, 3), float64], Tensor[(5, 9, 12), bool], Tensor[(392), uint32], Tensor[(7, 13, 3), float64], Tensor[(5, 9, 12), float32]) {
  %74 = cast(%var_10732, dtype="float64") /* ty=Tensor[(7, 13, 3), float64] */;
  %75 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %76 = @func_4887() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(14, 2, 14), uint32], Tensor[(392), uint32], Tensor[(3, 12, 15), bool]) */;
  %77 = cast(%var_10732, dtype="float32") /* ty=Tensor[(7, 13, 3), float32] */;
  %78 = atan(%77) /* ty=Tensor[(7, 13, 3), float32] */;
  %79 = cast(%78, dtype="float64") /* ty=Tensor[(7, 13, 3), float64] */;
  %80 = sqrt(%74) /* ty=Tensor[(7, 13, 3), float64] */;
  %81 = %75.0;
  %82 = %76.2;
  %83 = sinh(%79) /* ty=Tensor[(7, 13, 3), float64] */;
  %84 = @func_2325() /* ty=Tensor[(5, 9, 12), float32] */;
  (%80, %81, %82, %83, %84)
}

def @func_9410() -> (Tensor[(36, 10), float32],) {
  %85 = @func_5438() /* ty=(Tensor[(36, 10), bool],) */;
  %86 = %85.0;
  %87 = cast(%86, dtype="float32") /* ty=Tensor[(36, 10), float32] */;
  %88 = log(%87) /* ty=Tensor[(36, 10), float32] */;
  (%88,)
}

def @func_9920() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32], Tensor[(4, 5, 15), int32], Tensor[(10, 30), int64], Tensor[(5, 9, 12), bool]) {
  %89 = @func_748() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %90 = @func_6789() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %91 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 30), int64] */, dtype="int64") /* ty=Tensor[(10, 30), int64] */;
  %92 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 30), int64] */, dtype="int64") /* ty=Tensor[(10, 30), int64] */;
  %93 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 30), int64] */, dtype="int16") /* ty=Tensor[(10, 30), int16] */;
  %94 = reshape(%91, newshape=[4, 5, 15]) /* ty=Tensor[(4, 5, 15), int64] */;
  %95 = reshape(%92, newshape=[4, 5, 15]) /* ty=Tensor[(4, 5, 15), int64] */;
  %96 = reshape(%93, newshape=[4, 5, 15]) /* ty=Tensor[(4, 5, 15), int16] */;
  %97 = @func_5541(%94, %95, %96) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(4, 5, 15), int32]) */;
  %98 = %89.0;
  %99 = @func_6539() /* ty=Tensor[(5, 9, 12), bool] */;
  %100 = %90.1;
  %101 = %97.1;
  %102 = @func_3286() /* ty=Tensor[(5, 9, 12), bool] */;
  (%98, %99, %100, %101, meta[relay.Constant][2] /* ty=Tensor[(10, 30), int64] */, %102)
}

def @func_13712() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(14, 15, 2), int16], Tensor[(420), int16]) {
  @func_13710() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(14, 15, 2), int16], Tensor[(420), int16]) */
}

def @func_8882() -> (Tensor[(3, 12, 15), bool],) {
  @func_8880() /* ty=(Tensor[(3, 12, 15), bool],) */
}

def @func_9499(%var_9497: Tensor[(5, 13, 12), float32]) -> (Tensor[(5, 9, 12), bool], Tensor[(5, 13, 12), bool], Tensor[(5, 9, 12), bool]) {
  @func_9496(%var_9497) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 13, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_3565() -> (Tensor[(3, 12, 15), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %112 = fn () -> (Tensor[(3, 12, 15), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
    %103 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
    %104 = %103.1;
    %105 = cast(%104, dtype="float32") /* ty=Tensor[(3, 12, 15), float32] */;
    %106 = atan(%105) /* ty=Tensor[(3, 12, 15), float32] */;
    %107 = cast(%106, dtype="float32") /* ty=Tensor[(3, 12, 15), float32] */;
    %108 = @func_1850() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool]) */;
    %109 = sinh(%107) /* ty=Tensor[(3, 12, 15), float32] */;
    %110 = %108.1;
    %111 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
    (%109, %110, %111)
  };
  %112() /* ty=(Tensor[(3, 12, 15), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_3978() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  @func_3976() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_12623(%var_12592: Tensor[(30), float64]) -> (Tensor[(13, 5, 3), float64], Tensor[(5, 9, 12), float32], Tensor[(3, 10, 1), float64], Tensor[(30), float64]) {
  %113 = @func_1372() /* ty=Tensor[(13, 5, 3), float32] */;
  %114 = cast(%113, dtype="float64") /* ty=Tensor[(13, 5, 3), float64] */;
  %115 = @func_8111() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %116 = cast(%var_12592, dtype="float64") /* ty=Tensor[(30), float64] */;
  %117 = reshape(%116, newshape=[3, 10, 1]) /* ty=Tensor[(3, 10, 1), float64] */;
  %118 = asin(%114) /* ty=Tensor[(13, 5, 3), float64] */;
  %119 = %115.0;
  %120 = @func_9173(%117) /* ty=Tensor[(3, 10, 1), float64] */;
  (%118, %119, %120, %var_12592)
}

def @func_13867(%var_13857: Tensor[(30), float64]) -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32], Tensor[(30), float64]) {
  %121 = @func_3266() /* ty=(Tensor[(5, 9, 12), int32],) */;
  %122 = cast(%var_13857, dtype="float64") /* ty=Tensor[(30), float64] */;
  %123 = reshape(%122, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %124 = @func_12623(%123) /* ty=(Tensor[(13, 5, 3), float64], Tensor[(5, 9, 12), float32], Tensor[(3, 10, 1), float64], Tensor[(30), float64]) */;
  %125 = %121.0;
  %126 = %124.1;
  (%125, %126, %var_13857)
}

def @func_7738(%var_7735: Tensor[(16, 10, 16), float64], %var_7736: Tensor[(16, 10, 16), float64], %var_7737: Tensor[(10, 78), bool]) -> (Tensor[(16, 10, 16), bool], Tensor[(5, 9, 12), bool], Tensor[(13, 15, 4), bool], Tensor[(10, 78), bool], Tensor[(5, 9, 12), float32]) {
  @func_7733(%var_7735, %var_7736, %var_7737) /* ty=(Tensor[(16, 10, 16), bool], Tensor[(5, 9, 12), bool], Tensor[(13, 15, 4), bool], Tensor[(10, 78), bool], Tensor[(5, 9, 12), float32]) */
}

def @func_4021() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %131 = fn () -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
    %127 = @func_3474() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(13, 5, 3), float64]) */;
    %128 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
    %129 = %127.1;
    %130 = @func_2022() /* ty=Tensor[(5, 9, 12), float32] */;
    (%128, %129, %130)
  };
  %131() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */
}

def @func_7625(%var_7624: Tensor[(96), float64]) -> (Tensor[(5, 9, 12), bool], Tensor[(?, 6, 16), float64], Tensor[(96), float64], Tensor[(100, 36), float64], Tensor[(768), float64]) {
  %141 = fn (%var_7613: Tensor[(96), float64]) -> (Tensor[(5, 9, 12), bool], Tensor[(?, 6, 16), float64], Tensor[(96), float64], Tensor[(100, 36), float64], Tensor[(768), float64]) {
    %132 = cast(%var_7613, dtype="float64") /* ty=Tensor[(96), float64] */;
    %133 = cast(meta[relay.Constant][3] /* ty=Tensor[(100, 36), float64] */, dtype="float64") /* ty=Tensor[(100, 36), float64] */;
    %134 = cast(meta[relay.Constant][4] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
    %135 = reshape(%132, newshape=[1, 6, 16]) /* ty=Tensor[(1, 6, 16), float64] */;
    %136 = reshape(%133, newshape=[10, 360]) /* ty=Tensor[(10, 360), float64] */;
    %137 = reshape(%134, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float64] */;
    %138 = @func_2994(%135, %136, %137) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(10, 360), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32], Tensor[(?, 6, 16), float64], Tensor[(?, 6, 16), float32], Tensor[(8, 6, 16), int8]) */;
    %139 = @func_3611() /* ty=Tensor[(5, 9, 12), bool] */;
    %140 = %138.5;
    (%139, %140, %var_7613, meta[relay.Constant][3] /* ty=Tensor[(100, 36), float64] */, meta[relay.Constant][4] /* ty=Tensor[(768), float64] */)
  };
  %141(%var_7624) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(?, 6, 16), float64], Tensor[(96), float64], Tensor[(100, 36), float64], Tensor[(768), float64]) */
}

def @func_1858() -> (Tensor[(5, 9, 12), bool],) {
  %142 = @func_1850() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool]) */;
  %143 = %142.1;
  (%143,)
}

def @func_551() -> (Tensor[(5, 9, 12), bool],) {
  %146 = fn () -> (Tensor[(5, 9, 12), bool],) {
    %144 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %145 = %144.0;
    (%145,)
  };
  %146() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_5456() -> Tensor[(5, 9, 12), float32] {
  %148 = fn () -> Tensor[(5, 9, 12), float32] {
    %147 = @func_4944() /* ty=(Tensor[(3, 8, 10), float64], Tensor[(5, 9, 12), float32]) */;
    %147.1
  };
  %148() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_449() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_233() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */
}

def @func_11682() -> Tensor[(5, 9, 12), float32] {
  %149 = @func_8550() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) */;
  %149.1
}

def @func_11684() -> Tensor[(5, 9, 12), float32] {
  @func_11682() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_3287() -> Tensor[(5, 9, 12), bool] {
  %151 = fn () -> Tensor[(5, 9, 12), bool] {
    %150 = @func_1342() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %150.1
  };
  %151() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_9693() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %156 = fn () -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
    %152 = @func_1381() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %153 = @func_3686() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %154 = %152.0;
    %155 = %153.0;
    (%154, %155)
  };
  %156() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_1870() -> (Tensor[(5, 9, 12), float32],) {
  %159 = fn () -> (Tensor[(5, 9, 12), float32],) {
    %157 = @func_1671() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %158 = %157.1;
    (%158,)
  };
  %159() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_5665() -> (Tensor[(5, 9, 12), float32],) {
  %162 = fn () -> (Tensor[(5, 9, 12), float32],) {
    %160 = @func_2085() /* ty=(Tensor[(5, 9, 12), float32],) */;
    %161 = %160.0;
    (%161,)
  };
  %162() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_4466() -> Tensor[(5, 9, 12), bool] {
  @func_1985() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_13710() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(14, 15, 2), int16], Tensor[(420), int16]) {
  %163 = @func_4206() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %164 = @func_3324() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %165 = @func_1671() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %166 = cast(meta[relay.Constant][5] /* ty=Tensor[(420), int16] */, dtype="int16") /* ty=Tensor[(420), int16] */;
  %167 = reshape(%166, newshape=[14, 15, 2]) /* ty=Tensor[(14, 15, 2), int16] */;
  %168 = @func_5165(%167) /* ty=(Tensor[(14, 15, 2), int16], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %169 = %163.0;
  %170 = %164.0;
  %171 = %165.0;
  %172 = %168.0;
  (%169, %170, %171, %172, meta[relay.Constant][5] /* ty=Tensor[(420), int16] */)
}

def @func_5439() -> (Tensor[(36, 10), bool],) {
  %175 = fn () -> (Tensor[(36, 10), bool],) {
    %173 = @func_2462() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float32], Tensor[(36, 10), bool], Tensor[(5, 9, 12), bool]) */;
    %174 = %173.3;
    (%174,)
  };
  %175() /* ty=(Tensor[(36, 10), bool],) */
}

def @func_10589() -> Tensor[(5, 9, 12), float32] {
  %176 = @func_9092() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %176.2
}

def @func_8510() -> (Tensor[(5, 9, 12), float32],) {
  %179 = fn () -> (Tensor[(5, 9, 12), float32],) {
    %177 = @func_6277() /* ty=(Tensor[(5, 9, 12), float32],) */;
    %178 = %177.0;
    (%178,)
  };
  %179() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_181() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
  @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */
}

def @func_1168() -> Tensor[(5, 9, 12), int32] {
  %181 = fn () -> Tensor[(5, 9, 12), int32] {
    %180 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
    %180.1
  };
  %181() /* ty=Tensor[(5, 9, 12), int32] */
}

def @func_4585() -> (Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float64], Tensor[(13, 15, 4), bool], Tensor[(5, 9, 12), int32]) {
  @func_4583() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float64], Tensor[(13, 15, 4), bool], Tensor[(5, 9, 12), int32]) */
}

def @func_13974(%var_13968: Tensor[(420), int16]) -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32], Tensor[(420), int16]) {
  %182 = @func_3266() /* ty=(Tensor[(5, 9, 12), int32],) */;
  %183 = cast(%var_13968, dtype="int16") /* ty=Tensor[(420), int16] */;
  %184 = reshape(%183, newshape=[14, 15, 2]) /* ty=Tensor[(14, 15, 2), int16] */;
  %185 = @func_5165(%184) /* ty=(Tensor[(14, 15, 2), int16], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %186 = %182.0;
  %187 = %185.1;
  (%186, %187, %var_13968)
}

def @func_8790(%var_8788: Tensor[(1, 13, 2), uint16], %var_8789: Tensor[(5, 13, 2), uint16]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 13, 2), float32]) {
  %195 = fn (%var_8749: Tensor[(1, 13, 2), uint16], %var_8750: Tensor[(5, 13, 2), uint16]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 13, 2), float32]) {
    %188 = @func_6244() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
    %189 = cast(%var_8749, dtype="bool") /* ty=Tensor[(1, 13, 2), bool] */;
    %190 = cast(%var_8750, dtype="bool") /* ty=Tensor[(5, 13, 2), bool] */;
    %191 = equal(%189, %190) /* ty=Tensor[(5, 13, 2), bool] */;
    %192 = cast(%191, dtype="float32") /* ty=Tensor[(5, 13, 2), float32] */;
    %193 = %188.2;
    %194 = asinh(%192) /* ty=Tensor[(5, 13, 2), float32] */;
    (%193, %194)
  };
  %195(%var_8788, %var_8789) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 13, 2), float32]) */
}

def @func_259() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %196 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %197 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %198 = %196.0;
  %199 = %197.1;
  (%198, %199)
}

def @func_2326() -> Tensor[(5, 9, 12), float32] {
  %201 = fn () -> Tensor[(5, 9, 12), float32] {
    %200 = @func_1253() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %200.0
  };
  %201() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_8810() -> (Tensor[(5, 9, 12), float32],) {
  %204 = fn () -> (Tensor[(5, 9, 12), float32],) {
    %202 = @func_1069() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), float32]) */;
    %203 = %202.0;
    (%203,)
  };
  %204() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_8112() -> (Tensor[(5, 9, 12), float32],) {
  %206 = fn () -> (Tensor[(5, 9, 12), float32],) {
    %205 = @func_6021() /* ty=Tensor[(5, 9, 12), float32] */;
    (%205,)
  };
  %206() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_8490() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %207 = @func_6520() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %208 = @func_5752() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %209 = %207.0;
  %210 = %208.0;
  (%209, %210)
}

def @func_10572() -> (Tensor[(5, 9, 12), bool],) {
  %212 = fn () -> (Tensor[(5, 9, 12), bool],) {
    %211 = @func_345() /* ty=Tensor[(5, 9, 12), bool] */;
    (%211,)
  };
  %212() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_447() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %213 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %214 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %215 = %213.0;
  %216 = %214.0;
  (%215, %216)
}

def @func_8599() -> Tensor[(5, 9, 12), float32] {
  @func_5455() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_4889() -> (Tensor[(5, 9, 12), bool], Tensor[(14, 2, 14), uint32], Tensor[(392), uint32], Tensor[(3, 12, 15), bool]) {
  @func_4887() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(14, 2, 14), uint32], Tensor[(392), uint32], Tensor[(3, 12, 15), bool]) */
}

def @func_4208() -> (Tensor[(5, 9, 12), float32],) {
  @func_4206() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_11453() -> Tensor[(5, 9, 12), float32] {
  @func_8599() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_3222() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %223 = fn () -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
    %217 = @func_1730() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %218 = %217.1;
    %219 = cast(%218, dtype="int16") /* ty=Tensor[(5, 9, 12), int16] */;
    %220 = reshape(%219, newshape=[3, 12, 15]) /* ty=Tensor[(3, 12, 15), int16] */;
    %221 = @func_606(%220) /* ty=(Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), bool]) */;
    %222 = %221.1;
    (%218, %222)
  };
  %223() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_1851() -> (Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool]) {
  %230 = fn () -> (Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool]) {
    %224 = @func_1488() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %225 = %224.4;
    %226 = cast(%225, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
    %227 = @func_1425() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %228 = tan(%226) /* ty=Tensor[(5, 9, 12), float64] */;
    %229 = %227.1;
    (%228, %229)
  };
  %230() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool]) */
}

def @func_11067(%var_11034: Tensor[(120), int16]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(6, 20), int16], Tensor[(120), int16], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %231 = cast(%var_11034, dtype="int16") /* ty=Tensor[(120), int16] */;
  %232 = reshape(%231, newshape=[6, 20]) /* ty=Tensor[(6, 20), int16] */;
  %233 = @func_10909(%232) /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32], Tensor[(6, 20), int16]) */;
  %234 = @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %235 = @func_2022() /* ty=Tensor[(5, 9, 12), float32] */;
  %236 = @func_9264() /* ty=Tensor[(5, 9, 12), bool] */;
  %237 = %233.2;
  %238 = @func_7943() /* ty=Tensor[(5, 9, 12), float32] */;
  %239 = %234.2;
  (%235, %236, %237, %var_11034, %238, %239)
}

def @func_8601() -> Tensor[(5, 9, 12), float32] {
  @func_8599() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_10902(%var_10900: Tensor[(208), float64], %var_10901: Tensor[(3328), float64]) -> (Tensor[(15, 10, 8), bool], Tensor[(13, 16, 16), bool], Tensor[(208), float64], Tensor[(3328), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %252 = fn (%var_10854: Tensor[(208), float64], %var_10855: Tensor[(3328), float64]) -> (Tensor[(15, 10, 8), bool], Tensor[(13, 16, 16), bool], Tensor[(208), float64], Tensor[(3328), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
    %240 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 10, 8), int16] */, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
    %241 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(15, 10, 8), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %242 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 10, 8), int16] */, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
    %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %244 = cast(%var_10854, dtype="float64") /* ty=Tensor[(208), float64] */;
    %245 = cast(%var_10855, dtype="float64") /* ty=Tensor[(3328), float64] */;
    %246 = reshape(%244, newshape=[13, 1, 16]) /* ty=Tensor[(13, 1, 16), float64] */;
    %247 = reshape(%245, newshape=[13, 16, 16]) /* ty=Tensor[(13, 16, 16), float64] */;
    %248 = not_equal(%242, %243) /* ty=Tensor[(15, 10, 8), bool] */;
    %249 = @func_6882(%246, %247) /* ty=Tensor[(13, 16, 16), bool] */;
    %250 = @func_9618() /* ty=Tensor[(5, 9, 12), bool] */;
    %251 = @func_2149() /* ty=Tensor[(5, 9, 12), float32] */;
    (%248, %249, %var_10854, %var_10855, %250, %251)
  };
  %252(%var_10900, %var_10901) /* ty=(Tensor[(15, 10, 8), bool], Tensor[(13, 16, 16), bool], Tensor[(208), float64], Tensor[(3328), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */
}

def @func_12700(%var_12698: Tensor[(12, 7, 1), int64], %var_12699: Tensor[(12, 7, 15), int64]) -> (Tensor[(12, 7, 15), int64], Tensor[(5, 9, 12), bool]) {
  @func_12696(%var_12698, %var_12699) /* ty=(Tensor[(12, 7, 15), int64], Tensor[(5, 9, 12), bool]) */
}

def @func_13433() -> (Tensor[(5, 9, 12), float32],) {
  @func_13431() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_12089() -> Tensor[(5, 9, 12), bool] {
  @func_12087() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_1892() -> Tensor[(5, 9, 12), float32] {
  @func_1890() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_13369(%var_13367: uint32, %var_13368: Tensor[(1, 5, 16), uint32]) -> Tensor[(1, 5, 16), float32] {
  %257 = fn (%var_13347: uint32, %var_13348: Tensor[(1, 5, 16), uint32]) -> Tensor[(1, 5, 16), float32] {
    %253 = cast(%var_13347, dtype="uint32") /* ty=uint32 */;
    %254 = cast(%var_13348, dtype="uint32") /* ty=Tensor[(1, 5, 16), uint32] */;
    %255 = maximum(%253, %254) /* ty=Tensor[(1, 5, 16), uint32] */;
    %256 = cast(%255, dtype="float32") /* ty=Tensor[(1, 5, 16), float32] */;
    cos(%256) /* ty=Tensor[(1, 5, 16), float32] */
  };
  %257(%var_13367, %var_13368) /* ty=Tensor[(1, 5, 16), float32] */
}

def @func_4250() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 12, 15), bool]) {
  %258 = @func_2246() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %259 = @func_3053() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %260 = @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %261 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
  %262 = %258.1;
  %263 = %259.2;
  %264 = %260.2;
  %265 = %261.1;
  (%262, %263, %264, %265)
}

def @func_635(%var_633: Tensor[(13, 15, 4), bool]) -> Tensor[(13, 15, 4), bool] {
  @func_632(%var_633) /* ty=Tensor[(13, 15, 4), bool] */
}

def @func_10373() -> (Tensor[(5, 9, 12), int32], Tensor[(120), int16]) {
  %268 = fn () -> (Tensor[(5, 9, 12), int32], Tensor[(120), int16]) {
    %266 = @func_1167() /* ty=Tensor[(5, 9, 12), int32] */;
    %267 = @func_7072() /* ty=Tensor[(120), int16] */;
    (%266, %267)
  };
  %268() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(120), int16]) */
}

def @func_3848() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %282 = fn () -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
    %269 = @func_1671() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %270 = @func_1869() /* ty=(Tensor[(5, 9, 12), float32],) */;
    %271 = @func_1671() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %272 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
    %273 = @func_3564() /* ty=(Tensor[(3, 12, 15), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %274 = @func_2821() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %275 = %269.1;
    %276 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
    %277 = %270.0;
    %278 = %271.1;
    %279 = %272.0;
    %280 = %273.2;
    %281 = %274.1;
    (%275, %276, %277, %278, %279, %280, %281)
  };
  %282() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */
}

def @func_9959() -> Tensor[(5, 9, 12), bool] {
  @func_9957() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_3251() -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) {
  %283 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
  %284 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %285 = %283.0;
  %286 = %284.0;
  (%285, %286)
}

def @func_717(%var_710: float64) -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], float64, Tensor[(2112), float64]) {
  %287 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %288 = cast(%var_710, dtype="float64") /* ty=float64 */;
  %289 = cast(meta[relay.Constant][8] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %290 = reshape(%288, newshape=[]) /* ty=float64 */;
  %291 = reshape(%289, newshape=[16, 12, 11]) /* ty=Tensor[(16, 12, 11), float64] */;
  %292 = @func_461(%290, %291) /* ty=(Tensor[(16, 12, 11), float64], Tensor[(5, 9, 12), bool]) */;
  %293 = %287.0;
  %294 = %292.1;
  (%293, %294, %var_710, meta[relay.Constant][8] /* ty=Tensor[(2112), float64] */)
}

def @func_10313() -> Tensor[(5, 9, 12), bool] {
  %296 = fn () -> Tensor[(5, 9, 12), bool] {
    %295 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %295.0
  };
  %296() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_6408() -> Tensor[(5, 9, 12), float32] {
  @func_6406() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_1383() -> (Tensor[(5, 9, 12), bool],) {
  @func_1381() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_7836(%var_7834: float64) -> (Tensor[(5, 9, 12), float32], float64, Tensor[(2112), float64], Tensor[(16, 12, 11), int64]) {
  @func_7833(%var_7834) /* ty=(Tensor[(5, 9, 12), float32], float64, Tensor[(2112), float64], Tensor[(16, 12, 11), int64]) */
}

def @func_3738(%var_3737: Tensor[(7, 10, 11), int8]) -> (Tensor[(5, 9, 12), int32], Tensor[(7, 10, 11), float64], Tensor[(7, 10, 11), bool]) {
  %319 = fn (%var_3691: Tensor[(7, 10, 11), int8]) -> (Tensor[(5, 9, 12), int32], Tensor[(7, 10, 11), float64], Tensor[(7, 10, 11), bool]) {
    %297 = @func_3266() /* ty=(Tensor[(5, 9, 12), int32],) */;
    %298 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 10, 11), int8] */, dtype="int8") /* ty=Tensor[(7, 10, 11), int8] */;
    %299 = shape_of(%var_3691, dtype="int32") /* ty=Tensor[(3), int32] */;
    %300 = cast(%var_3691, dtype="int8") /* ty=Tensor[(7, 10, 11), int8] */;
    %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %302 = bitwise_and(%300, %301) /* ty=Tensor[(7, 10, 11), int8] */;
    %303 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 10, 11), int8] */, dtype="int8") /* ty=Tensor[(7, 10, 11), int8] */;
    %304 = shape_of(%var_3691, dtype="int32") /* ty=Tensor[(3), int32] */;
    %305 = cast(%var_3691, dtype="int8") /* ty=Tensor[(7, 10, 11), int8] */;
    %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %307 = bitwise_xor(%305, %306) /* ty=Tensor[(7, 10, 11), int8] */;
    %308 = cast(%307, dtype="float64") /* ty=Tensor[(7, 10, 11), float64] */;
    %309 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
    %310 = cast(%302, dtype="float64") /* ty=Tensor[(7, 10, 11), float64] */;
    %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %312 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 10, 11), int8] */, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
    %313 = shape_of(%var_3691, dtype="int32") /* ty=Tensor[(3), int32] */;
    %314 = cast(%var_3691, dtype="bool") /* ty=Tensor[(7, 10, 11), bool] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %316 = %297.0;
    %317 = divide(%310, %311) /* ty=Tensor[(7, 10, 11), float64] */;
    %318 = greater_equal(%314, %315) /* ty=Tensor[(7, 10, 11), bool] */;
    (%316, %317, %318)
  };
  %319(%var_3737) /* ty=(Tensor[(5, 9, 12), int32], Tensor[(7, 10, 11), float64], Tensor[(7, 10, 11), bool]) */
}

def @func_1488() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %320 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %321 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %322 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %323 = %320.0;
  %324 = %321.0;
  %325 = @func_1190() /* ty=Tensor[(5, 9, 12), float32] */;
  %326 = %322.0;
  %327 = @func_345() /* ty=Tensor[(5, 9, 12), bool] */;
  (%323, %324, %325, %326, %327)
}

def @func_5909() -> Tensor[(5, 9, 12), int32] {
  @func_5907() /* ty=Tensor[(5, 9, 12), int32] */
}

def @func_13589() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %333 = fn () -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
    %328 = @func_2129() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %329 = @func_10433() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(16, 12, 11), int64], float64, Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), int32]) */;
    %330 = @func_3611() /* ty=Tensor[(5, 9, 12), bool] */;
    %331 = %328.0;
    %332 = %329.0;
    (%330, %331, %332)
  };
  %333() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */
}

def @func_2264() -> (Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) {
  %334 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %335 = %334.1;
  %336 = cast(%335, dtype="int16") /* ty=Tensor[(5, 9, 12), int16] */;
  %337 = reshape(%336, newshape=[3, 12, 15]) /* ty=Tensor[(3, 12, 15), int16] */;
  %338 = @func_606(%337) /* ty=(Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), bool]) */;
  %339 = %338.0;
  (%335, %339)
}

def @func_11888() -> (Tensor[(5, 9, 12), float32],) {
  %340 = @func_11682() /* ty=Tensor[(5, 9, 12), float32] */;
  (%340,)
}

def @func_9957() -> Tensor[(5, 9, 12), bool] {
  %341 = @func_299() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %341.0
}

def @func_6539() -> Tensor[(5, 9, 12), bool] {
  @func_2760() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_13503() -> (Tensor[(5, 9, 12), bool],) {
  %344 = fn () -> (Tensor[(5, 9, 12), bool],) {
    %342 = @func_13458() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %343 = %342.1;
    (%343,)
  };
  %344() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_10460() -> (Tensor[(5, 9, 12), bool],) {
  @func_10458() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_9555() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  @func_9553() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */
}

def @func_5754() -> (Tensor[(5, 9, 12), bool],) {
  @func_5752() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_2822() -> (Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %356 = fn () -> (Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
    %345 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %346 = %345.1;
    %347 = @func_299() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %348 = %347.0;
    %349 = cast(%348, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
    %350 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
    %351 = cast(%346, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
    %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %353 = @func_1372() /* ty=Tensor[(13, 5, 3), float32] */;
    %354 = @func_2149() /* ty=Tensor[(5, 9, 12), float32] */;
    %355 = equal(%351, %352) /* ty=Tensor[(5, 9, 12), bool] */;
    (%353, %354, %355)
  };
  %356() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */
}

def @func_2462() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float32], Tensor[(36, 10), bool], Tensor[(5, 9, 12), bool]) {
  %357 = @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %358 = cast(meta[relay.Constant][10] /* ty=Tensor[(36, 10), float64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %359 = cast(meta[relay.Constant][10] /* ty=Tensor[(36, 10), float64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %360 = cast(meta[relay.Constant][10] /* ty=Tensor[(36, 10), float64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %361 = reshape(%359, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %362 = reshape(%360, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %363 = @func_382(%361, %362) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */;
  %364 = %363.2;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(8, 5, 9), float64] */;
  %366 = reshape(%358, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %367 = reshape(%365, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %368 = @func_382(%366, %367) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */;
  %369 = cast(%364, dtype="float32") /* ty=Tensor[(8, 5, 9), float32] */;
  %370 = cast(meta[relay.Constant][10] /* ty=Tensor[(36, 10), float64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %371 = atanh(%370) /* ty=Tensor[(36, 10), float64] */;
  %372 = cast(meta[relay.Constant][11] /* ty=Tensor[(36, 10), float64] */, dtype="bool") /* ty=Tensor[(36, 10), bool] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(2), int32] */;
  %374 = cast(%371, dtype="bool") /* ty=Tensor[(36, 10), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %376 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %377 = %357.1;
  %378 = %368.1;
  %379 = acos(%369) /* ty=Tensor[(8, 5, 9), float32] */;
  %380 = not_equal(%374, %375) /* ty=Tensor[(36, 10), bool] */;
  %381 = %376.0;
  (%377, %378, %379, %380, %381)
}

def @func_7758() -> Tensor[(360), float64] {
  %383 = fn () -> Tensor[(360), float64] {
    %382 = @func_5468() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64], Tensor[(360), float64]) */;
    %382.2
  };
  %383() /* ty=Tensor[(360), float64] */
}

def @func_2086() -> (Tensor[(5, 9, 12), float32],) {
  %386 = fn () -> (Tensor[(5, 9, 12), float32],) {
    %384 = @func_1730() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %385 = %384.0;
    (%385,)
  };
  %386() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_12303() -> (Tensor[(14, 2, 14), uint32], Tensor[(5, 9, 12), float32]) {
  %387 = @func_4887() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(14, 2, 14), uint32], Tensor[(392), uint32], Tensor[(3, 12, 15), bool]) */;
  %388 = @func_4206() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %389 = %387.1;
  %390 = %388.0;
  (%389, %390)
}

def @func_12829() -> (Tensor[(10, 1, 15), float64],) {
  %393 = fn () -> (Tensor[(10, 1, 15), float64],) {
    %391 = cast(meta[relay.Constant][12] /* ty=Tensor[(10, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(10, 1, 15), float64] */;
    %392 = exp(%391) /* ty=Tensor[(10, 1, 15), float64] */;
    (%392,)
  };
  %393() /* ty=(Tensor[(10, 1, 15), float64],) */
}

def @func_5165(%var_5142: Tensor[(14, 15, 2), int16]) -> (Tensor[(14, 15, 2), int16], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %394 = cast(%var_5142, dtype="int16") /* ty=Tensor[(14, 15, 2), int16] */;
  %395 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(14, 15, 2), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 15, 2), int16] */, dtype="int16") /* ty=Tensor[(14, 15, 2), int16] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %398 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %399 = bitwise_xor(%396, %397) /* ty=Tensor[(14, 15, 2), int16] */;
  %400 = %398.0;
  %401 = @func_3286() /* ty=Tensor[(5, 9, 12), bool] */;
  (%399, %400, %401)
}

def @func_10393() -> Tensor[(5, 9, 12), float32] {
  %402 = fn () -> Tensor[(5, 9, 12), float32] {
    @func_3788() /* ty=Tensor[(5, 9, 12), float32] */
  };
  %402() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_11470() -> (Tensor[(5, 9, 12), bool],) {
  %405 = fn () -> (Tensor[(5, 9, 12), bool],) {
    %403 = @func_3976() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %404 = %403.0;
    (%404,)
  };
  %405() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_4093() -> Tensor[(9, 5, 5), float32] {
  %407 = fn () -> Tensor[(9, 5, 5), float32] {
    %406 = @func_3053() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %406.0
  };
  %407() /* ty=Tensor[(9, 5, 5), float32] */
}

def @func_4180(%var_4170: Tensor[(392), uint32]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(14, 2, 14), uint32], Tensor[(392), uint32]) {
  %408 = @func_3474() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(13, 5, 3), float64]) */;
  %409 = cast(%var_4170, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %410 = cast(%var_4170, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %411 = reshape(%409, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint32] */;
  %412 = reshape(%410, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint32] */;
  %413 = %408.4;
  %414 = @func_345() /* ty=Tensor[(5, 9, 12), bool] */;
  %415 = @func_4131(%411, %412) /* ty=Tensor[(14, 2, 14), uint32] */;
  (%413, %414, %415, %var_4170)
}

def @func_9093() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %425 = fn () -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
    %416 = @func_3847() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %417 = @func_3324() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
    %418 = @func_1425() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %419 = @func_3564() /* ty=(Tensor[(3, 12, 15), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %420 = %416.4;
    %421 = @func_6983() /* ty=Tensor[(5, 9, 12), bool] */;
    %422 = %417.0;
    %423 = %418.0;
    %424 = %419.2;
    (%420, %421, %422, %423, %424)
  };
  %425() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */
}

def @func_6023() -> Tensor[(5, 9, 12), float32] {
  @func_6021() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_11369() -> (Tensor[(5, 9, 12), bool],) {
  %428 = fn () -> (Tensor[(5, 9, 12), bool],) {
    %426 = @func_4691() /* ty=(Tensor[(5, 13, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %427 = %426.1;
    (%427,)
  };
  %428() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_10153(%var_10151: Tensor[(900), float64]) -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(900), float64]) {
  @func_10150(%var_10151) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(900), float64]) */
}

def @func_12932(%var_12931: Tensor[(130), uint16]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(26, 1), uint16], Tensor[(130), uint16], Tensor[(13, 5, 3), float32]) {
  %438 = fn (%var_12907: Tensor[(130), uint16]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(26, 1), uint16], Tensor[(130), uint16], Tensor[(13, 5, 3), float32]) {
    %429 = @func_1869() /* ty=(Tensor[(5, 9, 12), float32],) */;
    %430 = cast(meta[relay.Constant][14] /* ty=Tensor[(26, 1), uint16] */, dtype="uint16") /* ty=Tensor[(26, 1), uint16] */;
    %431 = cast(%var_12907, dtype="uint16") /* ty=Tensor[(130), uint16] */;
    %432 = reshape(%430, newshape=[1, 13, 2]) /* ty=Tensor[(1, 13, 2), uint16] */;
    %433 = reshape(%431, newshape=[5, 13, 2]) /* ty=Tensor[(5, 13, 2), uint16] */;
    %434 = @func_8787(%432, %433) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 13, 2), float32]) */;
    %435 = %429.0;
    %436 = %434.0;
    %437 = @func_1372() /* ty=Tensor[(13, 5, 3), float32] */;
    (%435, %436, meta[relay.Constant][14] /* ty=Tensor[(26, 1), uint16] */, %var_12907, %437)
  };
  %438(%var_12931) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(26, 1), uint16], Tensor[(130), uint16], Tensor[(13, 5, 3), float32]) */
}

def @func_3976() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %439 = @func_2741() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %440 = @func_1488() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %441 = @func_550() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %442 = %439.1;
  %443 = %440.4;
  %444 = %441.0;
  (%442, %443, %444)
}

def @func_12284() -> (Tensor[(5, 9, 12), float32], Tensor[(6, 12, 12), float32], Tensor[(864), float32]) {
  %450 = fn () -> (Tensor[(5, 9, 12), float32], Tensor[(6, 12, 12), float32], Tensor[(864), float32]) {
    %445 = cast(meta[relay.Constant][15] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
    %446 = reshape(%445, newshape=[6, 144]) /* ty=Tensor[(6, 144), float32] */;
    %447 = @func_12109(%446) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(6, 12, 12), float32], Tensor[(6, 144), float32]) */;
    %448 = @func_8599() /* ty=Tensor[(5, 9, 12), float32] */;
    %449 = %447.1;
    (%448, %449, meta[relay.Constant][15] /* ty=Tensor[(864), float32] */)
  };
  %450() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(6, 12, 12), float32], Tensor[(864), float32]) */
}

def @func_6246() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
  @func_6244() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */
}

def @func_6705() -> (Tensor[(120), int16],) {
  %451 = @func_6662() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(16, 8, 15), bool], Tensor[(120), int16]) */;
  %452 = %451.2;
  (%452,)
}

def @func_12696(%var_12682: Tensor[(12, 7, 1), int64], %var_12683: Tensor[(12, 7, 15), int64]) -> (Tensor[(12, 7, 15), int64], Tensor[(5, 9, 12), bool]) {
  %453 = cast(%var_12682, dtype="int64") /* ty=Tensor[(12, 7, 1), int64] */;
  %454 = cast(%var_12683, dtype="int64") /* ty=Tensor[(12, 7, 15), int64] */;
  %455 = @func_1730() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %456 = logical_xor(%453, %454) /* ty=Tensor[(12, 7, 15), int64] */;
  %457 = %455.1;
  (%456, %457)
}

def @func_1490() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  @func_1488() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_4064() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
  %458 = @func_3251() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) */;
  %459 = @func_3286() /* ty=Tensor[(5, 9, 12), bool] */;
  %460 = %458.0;
  (%459, %460)
}

def @func_8527() -> Tensor[(5, 9, 12), bool] {
  @func_2352() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_1860() -> (Tensor[(5, 9, 12), bool],) {
  @func_1858() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_386(%var_384: Tensor[(8, 5, 9), float64], %var_385: Tensor[(8, 5, 9), float64]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) {
  @func_382(%var_384, %var_385) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */
}

def @func_9922() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32], Tensor[(4, 5, 15), int32], Tensor[(10, 30), int64], Tensor[(5, 9, 12), bool]) {
  @func_9920() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32], Tensor[(4, 5, 15), int32], Tensor[(10, 30), int64], Tensor[(5, 9, 12), bool]) */
}

def @func_1254() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %464 = fn () -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
    %461 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %462 = %461.0;
    %463 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
    (%462, %463)
  };
  %464() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */
}

def @func_9496(%var_9481: Tensor[(5, 13, 12), float32]) -> (Tensor[(5, 9, 12), bool], Tensor[(5, 13, 12), bool], Tensor[(5, 9, 12), bool]) {
  %465 = @func_4691() /* ty=(Tensor[(5, 13, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %466 = %465.0;
  %467 = cast(%var_9481, dtype="bool") /* ty=Tensor[(5, 13, 12), bool] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%466, dtype="bool") /* ty=Tensor[(5, 13, 12), bool] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %471 = @func_2352() /* ty=Tensor[(5, 9, 12), bool] */;
  %472 = equal(%469, %470) /* ty=Tensor[(5, 13, 12), bool] */;
  %473 = @func_6983() /* ty=Tensor[(5, 9, 12), bool] */;
  (%471, %472, %473)
}

def @func_10075(%var_10071: Tensor[(16, 3, 9), float64]) -> Tensor[(16, 3, 9), float64] {
  %474 = cast(%var_10071, dtype="float64") /* ty=Tensor[(16, 3, 9), float64] */;
  atanh(%474) /* ty=Tensor[(16, 3, 9), float64] */
}

def @func_10237() -> (Tensor[(9, 5, 5), float32],) {
  %477 = fn () -> (Tensor[(9, 5, 5), float32],) {
    %475 = @func_4855() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64], Tensor[(240), float64], Tensor[(9, 5, 5), float32]) */;
    %476 = %475.3;
    (%476,)
  };
  %477() /* ty=(Tensor[(9, 5, 5), float32],) */
}

def @func_11239() -> (Tensor[(5, 9, 12), int32],) {
  %480 = fn () -> (Tensor[(5, 9, 12), int32],) {
    %478 = @func_7293() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
    %479 = %478.1;
    (%479,)
  };
  %480() /* ty=(Tensor[(5, 9, 12), int32],) */
}

def @func_9196() -> (Tensor[(5, 9, 12), bool],) {
  @func_9194() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_9553() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %481 = @func_2741() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %482 = @func_3976() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %483 = @func_345() /* ty=Tensor[(5, 9, 12), bool] */;
  %484 = %481.0;
  %485 = %482.0;
  (%483, %484, %485)
}

def @func_609(%var_607: Tensor[(3, 12, 15), int16]) -> (Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), bool]) {
  @func_606(%var_607) /* ty=(Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_5470() -> (Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64], Tensor[(360), float64]) {
  @func_5468() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64], Tensor[(360), float64]) */
}

def @func_667() -> Tensor[(5, 9, 12), float32] {
  %486 = @func_550() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %487 = %486.0;
  %488 = cast(%487, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  cosh(%488) /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_12533() -> (Tensor[(5, 9, 12), float32],) {
  %491 = fn () -> (Tensor[(5, 9, 12), float32],) {
    %489 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %490 = %489.1;
    (%490,)
  };
  %491() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_8365(%var_8363: Tensor[(182), float32], %var_8364: float64) -> (Tensor[(5, 9, 12), float32], Tensor[(7, 2, 13), float32], Tensor[(182), float32], Tensor[(5, 9, 12), bool], Tensor[(2112), float64], float64, Tensor[(3, 12, 15), bool]) {
  @func_8361(%var_8363, %var_8364) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(7, 2, 13), float32], Tensor[(182), float32], Tensor[(5, 9, 12), bool], Tensor[(2112), float64], float64, Tensor[(3, 12, 15), bool]) */
}

def @func_13898() -> Tensor[(5, 9, 12), bool] {
  @func_13896() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_10061(%var_10060: int8) -> (Tensor[(5, 9, 12), float32], Tensor[(9, 5, 5), float32], Tensor[(8, 12, 8), float64]) {
  %500 = fn (%var_9974: int8) -> (Tensor[(5, 9, 12), float32], Tensor[(9, 5, 5), float32], Tensor[(8, 12, 8), float64]) {
    %492 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
    %493 = cast(%var_9974, dtype="int8") /* ty=int8 */;
    %494 = cast(meta[relay.Constant][16] /* ty=Tensor[(8, 12, 8), int8] */, dtype="int8") /* ty=Tensor[(8, 12, 8), int8] */;
    %495 = bitwise_and(%493, %494) /* ty=Tensor[(8, 12, 8), int8] */;
    %496 = cast(%495, dtype="float64") /* ty=Tensor[(8, 12, 8), float64] */;
    %497 = %492.0;
    %498 = @func_4092() /* ty=Tensor[(9, 5, 5), float32] */;
    %499 = log10(%496) /* ty=Tensor[(8, 12, 8), float64] */;
    (%497, %498, %499)
  };
  %500(%var_10060) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(9, 5, 5), float32], Tensor[(8, 12, 8), float64]) */
}

def @func_4468() -> Tensor[(5, 9, 12), bool] {
  @func_4466() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_1673() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  @func_1671() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */
}

def @func_5541(%var_5488: Tensor[(4, 5, 15), int64], %var_5489: Tensor[(4, 5, 15), int64], %var_5531: Tensor[(4, 5, 15), int16]) -> (Tensor[(5, 9, 12), bool], Tensor[(4, 5, 15), int32]) {
  %501 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %502 = cast(%var_5489, dtype="bool") /* ty=Tensor[(4, 5, 15), bool] */;
  %503 = shape_of(%var_5488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%var_5488, dtype="bool") /* ty=Tensor[(4, 5, 15), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %506 = less_equal(%504, %505) /* ty=Tensor[(4, 5, 15), bool] */;
  %507 = cast(%506, dtype="int16") /* ty=Tensor[(4, 5, 15), int16] */;
  %508 = shape_of(%var_5488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%var_5488, dtype="int16") /* ty=Tensor[(4, 5, 15), int16] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %511 = minimum(%509, %510) /* ty=Tensor[(4, 5, 15), int16] */;
  %512 = cast(%var_5531, dtype="int32") /* ty=Tensor[(4, 5, 15), int32] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="int32") /* ty=Tensor[(4, 5, 15), int32] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %516 = %501.0;
  %517 = left_shift(%514, %515) /* ty=Tensor[(4, 5, 15), int32] */;
  (%516, %517)
}

def @func_12651(%var_12633: Tensor[(1, 15, 8), uint64]) -> (Tensor[(9, 15, 8), uint64],) {
  %518 = cast(%var_12633, dtype="uint64") /* ty=Tensor[(1, 15, 8), uint64] */;
  %519 = cast(meta[relay.Constant][17] /* ty=Tensor[(9, 15, 8), uint64] */, dtype="uint64") /* ty=Tensor[(9, 15, 8), uint64] */;
  %520 = bitwise_xor(%518, %519) /* ty=Tensor[(9, 15, 8), uint64] */;
  (%520,)
}

def @func_10435() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(16, 12, 11), int64], float64, Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), int32]) {
  @func_10433() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(16, 12, 11), int64], float64, Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), int32]) */
}

def @func_11455() -> Tensor[(5, 9, 12), float32] {
  @func_11453() /* ty=Tensor[(5, 9, 12), float32] */
}

def @main() -> (Tensor[(6, 9, 12), float32],) {
  %521 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 9, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 9, 12), float32] */;
  %522 = log10(%521) /* ty=Tensor[(6, 9, 12), float32] */;
  (%522,)
}

def @func_6985() -> Tensor[(5, 9, 12), bool] {
  @func_6983() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_13768() -> (Tensor[(780), uint8],) {
  %523 = @func_9633() /* ty=(Tensor[(780), bool],) */;
  %524 = %523.0;
  %525 = cast(%524, dtype="float64") /* ty=Tensor[(780), float64] */;
  %526 = rsqrt(%525) /* ty=Tensor[(780), float64] */;
  %527 = cast(%524, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %528 = shape_of(%526, dtype="int32") /* ty=Tensor[(1), int32] */;
  %529 = cast(%526, dtype="uint8") /* ty=Tensor[(780), uint8] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %531 = add(%529, %530) /* ty=Tensor[(780), uint8] */;
  (%531,)
}

def @func_5624(%var_5623: Tensor[(5, 15, 8), uint32]) -> (Tensor[(5, 15, 8), bool],) {
  %537 = fn (%var_5614: Tensor[(5, 15, 8), uint32]) -> (Tensor[(5, 15, 8), bool],) {
    %532 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 15, 8), uint32] */, dtype="bool") /* ty=Tensor[(5, 15, 8), bool] */;
    %533 = shape_of(%var_5614, dtype="int32") /* ty=Tensor[(3), int32] */;
    %534 = cast(%var_5614, dtype="bool") /* ty=Tensor[(5, 15, 8), bool] */;
    %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %536 = greater_equal(%534, %535) /* ty=Tensor[(5, 15, 8), bool] */;
    (%536,)
  };
  %537(%var_5623) /* ty=(Tensor[(5, 15, 8), bool],) */
}

def @func_3612() -> Tensor[(5, 9, 12), bool] {
  %539 = fn () -> Tensor[(5, 9, 12), bool] {
    %538 = @func_1858() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %538.0
  };
  %539() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_2710() -> Tensor[(5, 9, 12), float32] {
  @func_2708() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_3267() -> (Tensor[(5, 9, 12), int32],) {
  %542 = fn () -> (Tensor[(5, 9, 12), int32],) {
    %540 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
    %541 = %540.0;
    (%541,)
  };
  %542() /* ty=(Tensor[(5, 9, 12), int32],) */
}

def @func_8529() -> Tensor[(5, 9, 12), bool] {
  @func_8527() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_5853() -> (Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32]) {
  %547 = fn () -> (Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32]) {
    %543 = @func_2821() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %544 = @func_4250() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 12, 15), bool]) */;
    %545 = %543.0;
    %546 = %544.1;
    (%545, %546)
  };
  %547() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32]) */
}

def @func_13223(%var_13221: Tensor[(5, 13, 10), int64], %var_13222: Tensor[(5, 13, 10), int64]) -> (Tensor[(5, 13, 10), int64],) {
  %553 = fn (%var_13207: Tensor[(5, 13, 10), int64], %var_13208: Tensor[(5, 13, 10), int64]) -> (Tensor[(5, 13, 10), int64],) {
    %548 = cast(%var_13208, dtype="int64") /* ty=Tensor[(5, 13, 10), int64] */;
    %549 = shape_of(%var_13207, dtype="int32") /* ty=Tensor[(3), int32] */;
    %550 = cast(%var_13207, dtype="int64") /* ty=Tensor[(5, 13, 10), int64] */;
    %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %552 = left_shift(%550, %551) /* ty=Tensor[(5, 13, 10), int64] */;
    (%552,)
  };
  %553(%var_13221, %var_13222) /* ty=(Tensor[(5, 13, 10), int64],) */
}

def @func_7002() -> (Tensor[(5, 9, 12), float32],) {
  %556 = fn () -> (Tensor[(5, 9, 12), float32],) {
    %554 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
    %555 = %554.0;
    (%555,)
  };
  %556() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_7294() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
  %559 = fn () -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
    %557 = @func_6539() /* ty=Tensor[(5, 9, 12), bool] */;
    %558 = @func_5907() /* ty=Tensor[(5, 9, 12), int32] */;
    (%557, %558)
  };
  %559() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */
}

def @func_3686() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %560 = @func_3221() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %561 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  %562 = %560.1;
  (%561, %562)
}

def @func_9173(%var_9137: Tensor[(3, 10, 1), float64]) -> Tensor[(3, 10, 1), float64] {
  %563 = cast(%var_9137, dtype="float64") /* ty=Tensor[(3, 10, 1), float64] */;
  sigmoid(%563) /* ty=Tensor[(3, 10, 1), float64] */
}

def @func_10405(%var_10403: Tensor[(6, 9, 14), float32], %var_10404: Tensor[(6, 9, 14), float32]) -> (Tensor[(6, 9, 14), float32],) {
  %569 = fn (%var_10396: Tensor[(6, 9, 14), float32], %var_10397: Tensor[(6, 9, 14), float32]) -> (Tensor[(6, 9, 14), float32],) {
    %564 = cast(%var_10397, dtype="float32") /* ty=Tensor[(6, 9, 14), float32] */;
    %565 = shape_of(%var_10396, dtype="int32") /* ty=Tensor[(3), int32] */;
    %566 = cast(%var_10396, dtype="float32") /* ty=Tensor[(6, 9, 14), float32] */;
    %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %568 = mod(%566, %567) /* ty=Tensor[(6, 9, 14), float32] */;
    (%568,)
  };
  %569(%var_10403, %var_10404) /* ty=(Tensor[(6, 9, 14), float32],) */
}

def @func_13459() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %574 = fn () -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
    %570 = @func_2246() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %571 = @func_11716() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %572 = %570.0;
    %573 = %571.0;
    (%572, %573)
  };
  %574() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_13977(%var_13975: Tensor[(420), int16]) -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32], Tensor[(420), int16]) {
  @func_13974(%var_13975) /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32], Tensor[(420), int16]) */
}

def @func_13256() -> (Tensor[(780), bool], Tensor[(5, 9, 12), bool]) {
  @func_13254() /* ty=(Tensor[(780), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_231() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %575 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %576 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %577 = %576.1;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  %579 = %575.0;
  %580 = acosh(%578) /* ty=Tensor[(5, 9, 12), float32] */;
  (%579, %580)
}

def @func_5367() -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) {
  %584 = fn () -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) {
    %581 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
    %582 = %581.0;
    %583 = @func_2708() /* ty=Tensor[(5, 9, 12), float32] */;
    (%582, %583)
  };
  %584() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) */
}

def @func_4418(%var_4417: Tensor[(3, 8, 10), float64]) -> (Tensor[(3, 8, 10), float64],) {
  %587 = fn (%var_4407: Tensor[(3, 8, 10), float64]) -> (Tensor[(3, 8, 10), float64],) {
    %585 = cast(%var_4407, dtype="float64") /* ty=Tensor[(3, 8, 10), float64] */;
    %586 = cosh(%585) /* ty=Tensor[(3, 8, 10), float64] */;
    (%586,)
  };
  %587(%var_4417) /* ty=(Tensor[(3, 8, 10), float64],) */
}

def @func_5907() -> Tensor[(5, 9, 12), int32] {
  %588 = @func_3266() /* ty=(Tensor[(5, 9, 12), int32],) */;
  %588.0
}

def @func_907() -> Tensor[(5, 9, 12), bool] {
  %589 = fn () -> Tensor[(5, 9, 12), bool] {
    @func_345() /* ty=Tensor[(5, 9, 12), bool] */
  };
  %589() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_1426() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %598 = fn () -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
    %590 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %591 = @func_1342() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %592 = @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %593 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %594 = %590.0;
    %595 = %591.1;
    %596 = %592.1;
    %597 = %593.1;
    (%594, %595, %596, %597)
  };
  %598() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_10839(%var_10837: Tensor[(7, 13, 3), float64]) -> (Tensor[(7, 13, 3), float64], Tensor[(5, 9, 12), bool], Tensor[(392), uint32], Tensor[(7, 13, 3), float64], Tensor[(5, 9, 12), float32]) {
  @func_10836(%var_10837) /* ty=(Tensor[(7, 13, 3), float64], Tensor[(5, 9, 12), bool], Tensor[(392), uint32], Tensor[(7, 13, 3), float64], Tensor[(5, 9, 12), float32]) */
}

def @func_5468() -> (Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64], Tensor[(360), float64]) {
  %599 = cast(meta[relay.Constant][20] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %600 = cast(meta[relay.Constant][20] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %601 = reshape(%599, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %602 = reshape(%600, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %603 = @func_382(%601, %602) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */;
  %604 = @func_2352() /* ty=Tensor[(5, 9, 12), bool] */;
  %605 = %603.2;
  (%604, %605, meta[relay.Constant][20] /* ty=Tensor[(360), float64] */)
}

def @func_11754(%var_11752: Tensor[(9, 5, 6), int8], %var_11753: Tensor[(9, 5, 6), int8]) -> (Tensor[(9, 5, 6), int8], Tensor[(9, 5, 5), float32]) {
  %613 = fn (%var_11734: Tensor[(9, 5, 6), int8], %var_11735: Tensor[(9, 5, 6), int8]) -> (Tensor[(9, 5, 6), int8], Tensor[(9, 5, 5), float32]) {
    %606 = cast(%var_11735, dtype="int8") /* ty=Tensor[(9, 5, 6), int8] */;
    %607 = shape_of(%var_11734, dtype="int32") /* ty=Tensor[(3), int32] */;
    %608 = cast(%var_11734, dtype="int8") /* ty=Tensor[(9, 5, 6), int8] */;
    %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %610 = @func_4342() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %611 = add(%608, %609) /* ty=Tensor[(9, 5, 6), int8] */;
    %612 = %610.0;
    (%611, %612)
  };
  %613(%var_11752, %var_11753) /* ty=(Tensor[(9, 5, 6), int8], Tensor[(9, 5, 5), float32]) */
}

def @func_5752() -> (Tensor[(5, 9, 12), bool],) {
  %614 = @func_1858() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %615 = %614.0;
  (%615,)
}

def @func_7266() -> (Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float32]) {
  %616 = @func_4691() /* ty=(Tensor[(5, 13, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %617 = @func_3474() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(13, 5, 3), float64]) */;
  %618 = %616.2;
  %619 = %617.0;
  (%618, %619)
}

def @func_4697() -> (Tensor[(5, 9, 12), int32],) {
  @func_4695() /* ty=(Tensor[(5, 9, 12), int32],) */
}

def @func_4252() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 12, 15), bool]) {
  @func_4250() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 12, 15), bool]) */
}

def @func_8873() -> (Tensor[(5, 9, 12), bool],) {
  %622 = fn () -> (Tensor[(5, 9, 12), bool],) {
    %620 = @func_4400() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %621 = %620.3;
    (%621,)
  };
  %622() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_6124() -> Tensor[(5, 9, 12), bool] {
  %631 = fn () -> Tensor[(5, 9, 12), bool] {
    %623 = @func_945() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %624 = %623.2;
    %625 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %626 = %625.0;
    %627 = cast(%626, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
    %628 = shape_of(%624, dtype="int32") /* ty=Tensor[(3), int32] */;
    %629 = cast(%624, dtype="bool") /* ty=Tensor[(5, 9, 12), bool] */;
    %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%629, %630) /* ty=Tensor[(5, 9, 12), bool] */
  };
  %631() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_12408(%var_12406: Tensor[(900), float64]) -> (Tensor[(360), float64], Tensor[(900), float64], Tensor[(900), float64]) {
  @func_12405(%var_12406) /* ty=(Tensor[(360), float64], Tensor[(900), float64], Tensor[(900), float64]) */
}

def @func_9633() -> (Tensor[(780), bool],) {
  %632 = @func_8182() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(13, 15, 4), bool], Tensor[(780), bool]) */;
  %633 = %632.3;
  (%633,)
}

def @func_346() -> Tensor[(5, 9, 12), bool] {
  %635 = fn () -> Tensor[(5, 9, 12), bool] {
    %634 = @func_299() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %634.0
  };
  %635() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_1156() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */
}

def @func_606(%var_577: Tensor[(3, 12, 15), int16]) -> (Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), bool]) {
  %636 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 1, 15), int16] */, dtype="bool") /* ty=Tensor[(3, 1, 15), bool] */;
  %637 = cast(%var_577, dtype="bool") /* ty=Tensor[(3, 12, 15), bool] */;
  %638 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %639 = not_equal(%636, %637) /* ty=Tensor[(3, 12, 15), bool] */;
  %640 = %638.0;
  (%639, %640)
}

def @func_9737() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
  @func_9735() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */
}

def @func_4695() -> (Tensor[(5, 9, 12), int32],) {
  %641 = @func_3251() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) */;
  %642 = %641.0;
  (%642,)
}

def @func_7833(%var_7800: float64) -> (Tensor[(5, 9, 12), float32], float64, Tensor[(2112), float64], Tensor[(16, 12, 11), int64]) {
  %643 = cast(%var_7800, dtype="float64") /* ty=float64 */;
  %644 = cast(meta[relay.Constant][22] /* ty=Tensor[(2112), float64] */, dtype="float64") /* ty=Tensor[(2112), float64] */;
  %645 = reshape(%643, newshape=[]) /* ty=float64 */;
  %646 = reshape(%644, newshape=[16, 12, 11]) /* ty=Tensor[(16, 12, 11), float64] */;
  %647 = @func_461(%645, %646) /* ty=(Tensor[(16, 12, 11), float64], Tensor[(5, 9, 12), bool]) */;
  %648 = %647.0;
  %649 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 12, 11), float64] */, dtype="int64") /* ty=Tensor[(16, 12, 11), int64] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="int64") /* ty=Tensor[(16, 12, 11), int64] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %653 = @func_3788() /* ty=Tensor[(5, 9, 12), float32] */;
  %654 = bitwise_and(%651, %652) /* ty=Tensor[(16, 12, 11), int64] */;
  (%653, %var_7800, meta[relay.Constant][22] /* ty=Tensor[(2112), float64] */, %654)
}

def @func_299() -> (Tensor[(5, 9, 12), bool],) {
  %655 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %656 = %655.0;
  (%656,)
}

def @func_7495() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64]) {
  %672 = fn () -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64]) {
    %657 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
    %658 = @func_1425() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %659 = @func_5752() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %660 = @func_1858() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %661 = @func_4583() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float64], Tensor[(13, 15, 4), bool], Tensor[(5, 9, 12), int32]) */;
    %662 = @func_4855() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64], Tensor[(240), float64], Tensor[(9, 5, 5), float32]) */;
    %663 = %657.0;
    %664 = @func_667() /* ty=Tensor[(5, 9, 12), float32] */;
    %665 = %658.3;
    %666 = @func_1190() /* ty=Tensor[(5, 9, 12), float32] */;
    %667 = %659.0;
    %668 = %660.0;
    %669 = @func_5455() /* ty=Tensor[(5, 9, 12), float32] */;
    %670 = %661.0;
    %671 = %662.1;
    (%663, %664, %665, %666, %667, %668, %669, %670, %671)
  };
  %672() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64]) */
}

def @func_2464() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float32], Tensor[(36, 10), bool], Tensor[(5, 9, 12), bool]) {
  @func_2462() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float32], Tensor[(36, 10), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_10631() -> Tensor[(13, 5, 3), float64] {
  @func_10629() /* ty=Tensor[(13, 5, 3), float64] */
}

def @func_2743() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  @func_2741() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */
}

def @func_11390() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  @func_11388() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_9620() -> Tensor[(5, 9, 12), bool] {
  @func_9618() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_11967() -> (Tensor[(5, 9, 12), int32],) {
  %673 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %674 = %673.1;
  (%674,)
}

def @func_12999() -> (Tensor[(5, 9, 12), float32], Tensor[(3, 12, 15), bool]) {
  %681 = fn () -> (Tensor[(5, 9, 12), float32], Tensor[(3, 12, 15), bool]) {
    %675 = @func_4944() /* ty=(Tensor[(3, 8, 10), float64], Tensor[(5, 9, 12), float32]) */;
    %676 = %675.1;
    %677 = cast(%676, dtype="int16") /* ty=Tensor[(5, 9, 12), int16] */;
    %678 = reshape(%677, newshape=[3, 12, 15]) /* ty=Tensor[(3, 12, 15), int16] */;
    %679 = @func_606(%678) /* ty=(Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), bool]) */;
    %680 = %679.0;
    (%676, %680)
  };
  %681() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(3, 12, 15), bool]) */
}

def @func_13160(%var_13156: Tensor[(5, 3, 16), float64], %var_13157: Tensor[(390, 2), float32], %var_13158: Tensor[(432), float64], %var_13159: int8) -> (Tensor[(5, 3, 16), bool], Tensor[(5, 9, 12), bool], Tensor[(390, 2), float32], Tensor[(5, 3, 16), float64], Tensor[(5, 9, 12), float32], Tensor[(8, 5, 9), float64], Tensor[(360), float64], Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), float32], Tensor[(16, 3, 9), float64], Tensor[(432), float64], Tensor[(8, 12, 8), float64], int8) {
  %712 = fn (%var_13092: Tensor[(5, 3, 16), float64], %var_13115: Tensor[(390, 2), float32], %var_13150: Tensor[(432), float64], %var_13153: int8) -> (Tensor[(5, 3, 16), bool], Tensor[(5, 9, 12), bool], Tensor[(390, 2), float32], Tensor[(5, 3, 16), float64], Tensor[(5, 9, 12), float32], Tensor[(8, 5, 9), float64], Tensor[(360), float64], Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), float32], Tensor[(16, 3, 9), float64], Tensor[(432), float64], Tensor[(8, 12, 8), float64], int8) {
    %682 = cast(%var_13092, dtype="float64") /* ty=Tensor[(5, 3, 16), float64] */;
    %683 = log10(%682) /* ty=Tensor[(5, 3, 16), float64] */;
    %684 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 3, 16), float64] */, dtype="bool") /* ty=Tensor[(5, 3, 16), bool] */;
    %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
    %686 = cast(%683, dtype="bool") /* ty=Tensor[(5, 3, 16), bool] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %688 = cast(%var_13115, dtype="float32") /* ty=Tensor[(390, 2), float32] */;
    %689 = reshape(%688, newshape=[5, 13, 12]) /* ty=Tensor[(5, 13, 12), float32] */;
    %690 = @func_9496(%689) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 13, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %691 = cast(%683, dtype="float64") /* ty=Tensor[(5, 3, 16), float64] */;
    %692 = cast(meta[relay.Constant][25] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %693 = cast(meta[relay.Constant][25] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %694 = reshape(%692, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
    %695 = reshape(%693, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
    %696 = @func_382(%694, %695) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */;
    %697 = @func_8880() /* ty=(Tensor[(3, 12, 15), bool],) */;
    %698 = cast(%var_13150, dtype="float64") /* ty=Tensor[(432), float64] */;
    %699 = reshape(%698, newshape=[16, 3, 9]) /* ty=Tensor[(16, 3, 9), float64] */;
    %700 = cast(%var_13153, dtype="int8") /* ty=int8 */;
    %701 = reshape(%700, newshape=[]) /* ty=int8 */;
    %702 = @func_10059(%701) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(9, 5, 5), float32], Tensor[(8, 12, 8), float64]) */;
    %703 = less(%686, %687) /* ty=Tensor[(5, 3, 16), bool] */;
    %704 = %690.0;
    %705 = log(%691) /* ty=Tensor[(5, 3, 16), float64] */;
    %706 = @func_2325() /* ty=Tensor[(5, 9, 12), float32] */;
    %707 = %696.2;
    %708 = %697.0;
    %709 = @func_2022() /* ty=Tensor[(5, 9, 12), float32] */;
    %710 = @func_10075(%699) /* ty=Tensor[(16, 3, 9), float64] */;
    %711 = %702.2;
    (%703, %704, %var_13115, %705, %706, %707, meta[relay.Constant][25] /* ty=Tensor[(360), float64] */, %708, %709, %710, %var_13150, %711, %var_13153)
  };
  %712(%var_13156, %var_13157, %var_13158, %var_13159) /* ty=(Tensor[(5, 3, 16), bool], Tensor[(5, 9, 12), bool], Tensor[(390, 2), float32], Tensor[(5, 3, 16), float64], Tensor[(5, 9, 12), float32], Tensor[(8, 5, 9), float64], Tensor[(360), float64], Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), float32], Tensor[(16, 3, 9), float64], Tensor[(432), float64], Tensor[(8, 12, 8), float64], int8) */
}

def @func_7065() -> (Tensor[(9, 5, 5), float32], Tensor[(8, 5, 9), float32], Tensor[(9, 5, 5), float32]) {
  %720 = fn () -> (Tensor[(9, 5, 5), float32], Tensor[(8, 5, 9), float32], Tensor[(9, 5, 5), float32]) {
    %713 = @func_5128() /* ty=Tensor[(8, 5, 9), float32] */;
    %714 = cast(%713, dtype="float64") /* ty=Tensor[(8, 5, 9), float64] */;
    %715 = sqrt(%714) /* ty=Tensor[(8, 5, 9), float64] */;
    %716 = cast(%715, dtype="float32") /* ty=Tensor[(8, 5, 9), float32] */;
    %717 = @func_4092() /* ty=Tensor[(9, 5, 5), float32] */;
    %718 = log10(%716) /* ty=Tensor[(8, 5, 9), float32] */;
    %719 = @func_4092() /* ty=Tensor[(9, 5, 5), float32] */;
    (%717, %718, %719)
  };
  %720() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(8, 5, 9), float32], Tensor[(9, 5, 5), float32]) */
}

def @func_12784() -> (Tensor[(5, 9, 12), bool],) {
  %723 = fn () -> (Tensor[(5, 9, 12), bool],) {
    %721 = @func_9920() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32], Tensor[(4, 5, 15), int32], Tensor[(10, 30), int64], Tensor[(5, 9, 12), bool]) */;
    %722 = %721.5;
    (%722,)
  };
  %723() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_2266() -> (Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) {
  @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */
}

def @func_12196() -> Tensor[(5, 9, 12), float32] {
  %725 = fn () -> Tensor[(5, 9, 12), float32] {
    %724 = @func_1639() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(360), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), uint16], Tensor[(5, 9, 12), float32]) */;
    %724.1
  };
  %725() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_5546(%var_5543: Tensor[(4, 5, 15), int64], %var_5544: Tensor[(4, 5, 15), int64], %var_5545: Tensor[(4, 5, 15), int16]) -> (Tensor[(5, 9, 12), bool], Tensor[(4, 5, 15), int32]) {
  @func_5541(%var_5543, %var_5544, %var_5545) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(4, 5, 15), int32]) */
}

def @func_1280() -> (Tensor[(5, 9, 12), float32],) {
  %726 = @func_1253() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %727 = %726.0;
  (%727,)
}

def @func_9264() -> Tensor[(5, 9, 12), bool] {
  %728 = @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %728.0
}

def @func_11662() -> Tensor[(5, 9, 12), bool] {
  %729 = fn () -> Tensor[(5, 9, 12), bool] {
    @func_1985() /* ty=Tensor[(5, 9, 12), bool] */
  };
  %729() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_6021() -> Tensor[(5, 9, 12), float32] {
  %730 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %730.1
}

def @func_5082() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  @func_5080() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_4081(%var_4080: Tensor[(6, 12, 12), float32]) -> (Tensor[(6, 12, 12), float32],) {
  %738 = fn (%var_4067: Tensor[(6, 12, 12), float32]) -> (Tensor[(6, 12, 12), float32],) {
    %731 = cast(%var_4067, dtype="float32") /* ty=Tensor[(6, 12, 12), float32] */;
    %732 = log(%731) /* ty=Tensor[(6, 12, 12), float32] */;
    %733 = cast(%var_4067, dtype="float32") /* ty=Tensor[(6, 12, 12), float32] */;
    %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
    %735 = cast(%732, dtype="float32") /* ty=Tensor[(6, 12, 12), float32] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %737 = subtract(%735, %736) /* ty=Tensor[(6, 12, 12), float32] */;
    (%737,)
  };
  %738(%var_4080) /* ty=(Tensor[(6, 12, 12), float32],) */
}

def @func_7268() -> (Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float32]) {
  @func_7266() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float32]) */
}

def @func_1282() -> (Tensor[(5, 9, 12), float32],) {
  @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_3253() -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) {
  @func_3251() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) */
}

def @func_4206() -> (Tensor[(5, 9, 12), float32],) {
  %739 = @func_2022() /* ty=Tensor[(5, 9, 12), float32] */;
  (%739,)
}

def @func_2999(%var_2996: Tensor[(1, 6, 16), float64], %var_2997: Tensor[(10, 360), float64], %var_2998: Tensor[(8, 6, 16), float64]) -> (Tensor[(5, 9, 12), bool], Tensor[(10, 360), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32], Tensor[(?, 6, 16), float64], Tensor[(?, 6, 16), float32], Tensor[(8, 6, 16), int8]) {
  @func_2994(%var_2996, %var_2997, %var_2998) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(10, 360), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32], Tensor[(?, 6, 16), float64], Tensor[(?, 6, 16), float32], Tensor[(8, 6, 16), int8]) */
}

def @func_6790() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
  %744 = fn () -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) {
    %740 = @func_2569() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
    %741 = @func_4583() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float64], Tensor[(13, 15, 4), bool], Tensor[(5, 9, 12), int32]) */;
    %742 = %740.0;
    %743 = %741.3;
    (%742, %743)
  };
  %744() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */
}

def @func_4887() -> (Tensor[(5, 9, 12), bool], Tensor[(14, 2, 14), uint32], Tensor[(392), uint32], Tensor[(3, 12, 15), bool]) {
  %745 = @func_4400() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %746 = cast(meta[relay.Constant][26] /* ty=Tensor[(392), uint32] */, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %747 = cast(meta[relay.Constant][26] /* ty=Tensor[(392), uint32] */, dtype="uint32") /* ty=Tensor[(392), uint32] */;
  %748 = reshape(%746, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint32] */;
  %749 = reshape(%747, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), uint32] */;
  %750 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
  %751 = %745.0;
  %752 = @func_4131(%748, %749) /* ty=Tensor[(14, 2, 14), uint32] */;
  %753 = %750.1;
  (%751, %752, meta[relay.Constant][26] /* ty=Tensor[(392), uint32] */, %753)
}

def @func_6244() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
  %754 = @func_3324() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %755 = @func_4466() /* ty=Tensor[(5, 9, 12), bool] */;
  %756 = @func_5455() /* ty=Tensor[(5, 9, 12), float32] */;
  %757 = %754.0;
  (%755, %756, %757)
}

def @func_5401() -> (Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool]) {
  @func_5399() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool]) */
}

def @func_7943() -> Tensor[(5, 9, 12), float32] {
  %758 = @func_1639() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(360), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), uint16], Tensor[(5, 9, 12), float32]) */;
  %758.5
}

def @func_3053() -> (Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %759 = cast(meta[relay.Constant][27] /* ty=Tensor[(9, 5, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 5, 5), float32] */;
  %760 = @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %761 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %762 = log2(%759) /* ty=Tensor[(9, 5, 5), float32] */;
  %763 = %760.0;
  %764 = %761.0;
  (%762, %763, %764)
}

def @func_748() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
  %765 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %766 = %765.1;
  %767 = @func_667() /* ty=Tensor[(5, 9, 12), float32] */;
  (%766, %767)
}

def @func_2708() -> Tensor[(5, 9, 12), float32] {
  @func_1890() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_1641() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(360), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), uint16], Tensor[(5, 9, 12), float32]) {
  @func_1639() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(360), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), uint16], Tensor[(5, 9, 12), float32]) */
}

def @func_8248() -> (Tensor[(8, 5, 9), float32], Tensor[(36, 10), bool], Tensor[(5, 9, 12), float32]) {
  %768 = @func_5438() /* ty=(Tensor[(36, 10), bool],) */;
  %769 = @func_7494() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64]) */;
  %770 = @func_5128() /* ty=Tensor[(8, 5, 9), float32] */;
  %771 = %768.0;
  %772 = %769.6;
  (%770, %771, %772)
}

def @func_7887(%var_7885: Tensor[(1, 5, 10), float32]) -> (Tensor[(?, 5, 10), bool], Tensor[(5, 9, 12), float32]) {
  @func_7884(%var_7885) /* ty=(Tensor[(?, 5, 10), bool], Tensor[(5, 9, 12), float32]) */
}

def @func_4692() -> (Tensor[(5, 13, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %779 = fn () -> (Tensor[(5, 13, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
    %773 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 13, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 13, 12), float32] */;
    %774 = @func_4342() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %775 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %776 = asin(%773) /* ty=Tensor[(5, 13, 12), float32] */;
    %777 = %774.1;
    %778 = %775.0;
    (%776, %777, %778)
  };
  %779() /* ty=(Tensor[(5, 13, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_2150() -> Tensor[(5, 9, 12), float32] {
  %780 = fn () -> Tensor[(5, 9, 12), float32] {
    @func_2022() /* ty=Tensor[(5, 9, 12), float32] */
  };
  %780() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_4751() -> (Tensor[(4, 13, 5), bool], Tensor[(7, 10, 11), bool], Tensor[(770), int8]) {
  %781 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(4, 13, 5), float32] */;
  %782 = log10(%781) /* ty=Tensor[(4, 13, 5), float32] */;
  %783 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 13, 5), float32] */, dtype="bool") /* ty=Tensor[(4, 13, 5), bool] */;
  %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%782, dtype="bool") /* ty=Tensor[(4, 13, 5), bool] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %787 = cast(meta[relay.Constant][30] /* ty=Tensor[(770), int8] */, dtype="int8") /* ty=Tensor[(770), int8] */;
  %788 = reshape(%787, newshape=[7, 10, 11]) /* ty=Tensor[(7, 10, 11), int8] */;
  %789 = @func_3736(%788) /* ty=(Tensor[(5, 9, 12), int32], Tensor[(7, 10, 11), float64], Tensor[(7, 10, 11), bool]) */;
  %790 = not_equal(%785, %786) /* ty=Tensor[(4, 13, 5), bool] */;
  %791 = %789.2;
  (%790, %791, meta[relay.Constant][30] /* ty=Tensor[(770), int8] */)
}

def @func_13254() -> (Tensor[(780), bool], Tensor[(5, 9, 12), bool]) {
  %792 = @func_9633() /* ty=(Tensor[(780), bool],) */;
  %793 = @func_3686() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %794 = %792.0;
  %795 = %793.1;
  (%794, %795)
}

def @func_5594(%var_5593: Tensor[(7, 2, 13), float32]) -> Tensor[(7, 2, 13), float32] {
  %797 = fn (%var_5588: Tensor[(7, 2, 13), float32]) -> Tensor[(7, 2, 13), float32] {
    %796 = cast(%var_5588, dtype="float32") /* ty=Tensor[(7, 2, 13), float32] */;
    asinh(%796) /* ty=Tensor[(7, 2, 13), float32] */
  };
  %797(%var_5593) /* ty=Tensor[(7, 2, 13), float32] */
}

def @func_8183() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(13, 15, 4), bool], Tensor[(780), bool]) {
  %805 = fn () -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(13, 15, 4), bool], Tensor[(780), bool]) {
    %798 = @func_5852() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32]) */;
    %799 = @func_1850() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool]) */;
    %800 = cast(meta[relay.Constant][31] /* ty=Tensor[(780), bool] */, dtype="bool") /* ty=Tensor[(780), bool] */;
    %801 = reshape(%800, newshape=[13, 15, 4]) /* ty=Tensor[(13, 15, 4), bool] */;
    %802 = %798.1;
    %803 = %799.1;
    %804 = @func_632(%801) /* ty=Tensor[(13, 15, 4), bool] */;
    (%802, %803, %804, meta[relay.Constant][31] /* ty=Tensor[(780), bool] */)
  };
  %805() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(13, 15, 4), bool], Tensor[(780), bool]) */
}

def @func_2486(%var_2485: Tensor[(11, 4, 1), float32]) -> (Tensor[(11, 4, 1), float32], Tensor[(5, 9, 12), float32]) {
  %810 = fn (%var_2475: Tensor[(11, 4, 1), float32]) -> (Tensor[(11, 4, 1), float32], Tensor[(5, 9, 12), float32]) {
    %806 = cast(%var_2475, dtype="float32") /* ty=Tensor[(11, 4, 1), float32] */;
    %807 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %808 = atanh(%806) /* ty=Tensor[(11, 4, 1), float32] */;
    %809 = %807.1;
    (%808, %809)
  };
  %810(%var_2485) /* ty=(Tensor[(11, 4, 1), float32], Tensor[(5, 9, 12), float32]) */
}

def @func_10629() -> Tensor[(13, 5, 3), float64] {
  %811 = @func_7266() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float32]) */;
  %812 = %811.1;
  %813 = cast(%812, dtype="float64") /* ty=Tensor[(13, 5, 3), float64] */;
  atanh(%813) /* ty=Tensor[(13, 5, 3), float64] */
}

def @func_3790() -> Tensor[(5, 9, 12), float32] {
  @func_3788() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_1381() -> (Tensor[(5, 9, 12), bool],) {
  %814 = @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %815 = %814.1;
  (%815,)
}

def @func_10559() -> (Tensor[(8, 5, 9), float32],) {
  %817 = fn () -> (Tensor[(8, 5, 9), float32],) {
    %816 = @func_5128() /* ty=Tensor[(8, 5, 9), float32] */;
    (%816,)
  };
  %817() /* ty=(Tensor[(8, 5, 9), float32],) */
}

def @func_311() -> (Tensor[(5, 9, 12), bool],) {
  @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_1220() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %823 = fn () -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
    %818 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
    %819 = cast(%818, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
    %820 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %821 = log10(%819) /* ty=Tensor[(5, 9, 12), float32] */;
    %822 = %820.0;
    (%821, %822)
  };
  %823() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */
}

def @func_10433() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(16, 12, 11), int64], float64, Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), int32]) {
  %824 = @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %825 = cast(-9.49569f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %826 = reshape(%825, newshape=[]) /* ty=float64 */;
  %827 = @func_7833(%826) /* ty=(Tensor[(5, 9, 12), float32], float64, Tensor[(2112), float64], Tensor[(16, 12, 11), int64]) */;
  %828 = @func_6244() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %829 = @func_10372() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(120), int16]) */;
  %830 = %824.1;
  %831 = @func_3611() /* ty=Tensor[(5, 9, 12), bool] */;
  %832 = %827.3;
  %833 = %828.1;
  %834 = %829.0;
  (%830, %831, %832, -9.49569f64 /* ty=float64 */, %833, %834)
}

def @func_2741() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %835 = @func_2246() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %836 = @func_1488() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %837 = %835.1;
  %838 = %836.3;
  (%837, %838)
}

def @func_3055() -> (Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  @func_3053() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */
}

def @func_2247() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %843 = fn () -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
    %839 = @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %840 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %841 = %839.2;
    %842 = %840.0;
    (%841, %842)
  };
  %843() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */
}

def @func_4342() -> (Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %844 = @func_2741() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %845 = @func_4092() /* ty=Tensor[(9, 5, 5), float32] */;
  %846 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  %847 = %844.1;
  (%845, %846, %847)
}

def @func_10591() -> Tensor[(5, 9, 12), float32] {
  @func_10589() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_789() -> (Tensor[(5, 9, 12), bool],) {
  %850 = fn () -> (Tensor[(5, 9, 12), bool],) {
    %848 = @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %849 = %848.0;
    (%849,)
  };
  %850() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_7124() -> Tensor[(5, 9, 12), bool] {
  %852 = fn () -> Tensor[(5, 9, 12), bool] {
    %851 = @func_550() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %851.0
  };
  %852() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_2994(%var_2849: Tensor[(1, 6, 16), float64], %var_2886: Tensor[(10, 360), float64], %var_2981: Tensor[(8, 6, 16), float64]) -> (Tensor[(5, 9, 12), bool], Tensor[(10, 360), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32], Tensor[(?, 6, 16), float64], Tensor[(?, 6, 16), float32], Tensor[(8, 6, 16), int8]) {
  %853 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 360), float64] */, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %854 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 360), float64] */, dtype="float64") /* ty=Tensor[(1, 360), float64] */;
  %855 = reshape(%853, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %856 = reshape(%854, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %857 = @func_382(%855, %856) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */;
  %858 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 360), float64] */, dtype="bool") /* ty=Tensor[(1, 360), bool] */;
  %859 = cast(%var_2886, dtype="bool") /* ty=Tensor[(10, 360), bool] */;
  %860 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %861 = @func_2821() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %862 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %863 = cast(%var_2849, dtype="float64") /* ty=Tensor[(1, 6, 16), float64] */;
  %864 = cosh(%863) /* ty=Tensor[(1, 6, 16), float64] */;
  %865 = cast(%var_2849, dtype="float64") /* ty=Tensor[(1, 6, 16), float64] */;
  %866 = shape_of(%864, dtype="int32") /* ty=Tensor[(3), int32] */;
  %867 = cast(%864, dtype="float64") /* ty=Tensor[(1, 6, 16), float64] */;
  %868 = dyn.reshape(%865, %866, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %869 = mod(%867, %868) /* ty=Tensor[(?, 6, 16), float64] */;
  %870 = cast(%864, dtype="int64") /* ty=Tensor[(1, 6, 16), int64] */;
  %871 = shape_of(%869, dtype="int32") /* ty=Tensor[(3), int32] */;
  %872 = cast(%869, dtype="int64") /* ty=Tensor[(?, 6, 16), int64] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %874 = maximum(%872, %873) /* ty=Tensor[(?, 6, 16), int64] */;
  %875 = cast(%874, dtype="float64") /* ty=Tensor[(?, 6, 16), float64] */;
  %876 = shape_of(%864, dtype="int32") /* ty=Tensor[(3), int32] */;
  %877 = cast(%864, dtype="float64") /* ty=Tensor[(1, 6, 16), float64] */;
  %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %879 = cast(%874, dtype="float32") /* ty=Tensor[(?, 6, 16), float32] */;
  %880 = acos(%879) /* ty=Tensor[(?, 6, 16), float32] */;
  %881 = cast(%869, dtype="float32") /* ty=Tensor[(?, 6, 16), float32] */;
  %882 = shape_of(%880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %883 = cast(%880, dtype="float32") /* ty=Tensor[(?, 6, 16), float32] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %885 = cast(%869, dtype="int8") /* ty=Tensor[(?, 6, 16), int8] */;
  %886 = cast(%var_2981, dtype="int8") /* ty=Tensor[(8, 6, 16), int8] */;
  %887 = bitwise_and(%885, %886) /* ty=Tensor[(8, 6, 16), int8] */;
  %888 = cast(%880, dtype="int8") /* ty=Tensor[(?, 6, 16), int8] */;
  %889 = cast(%887, dtype="int8") /* ty=Tensor[(8, 6, 16), int8] */;
  %890 = %857.1;
  %891 = greater(%858, %859) /* ty=Tensor[(10, 360), bool] */;
  %892 = %860.1;
  %893 = %861.2;
  %894 = %862.1;
  %895 = divide(%877, %878) /* ty=Tensor[(?, 6, 16), float64] */;
  %896 = floor_divide(%883, %884) /* ty=Tensor[(?, 6, 16), float32] */;
  %897 = bitwise_or(%888, %889) /* ty=Tensor[(8, 6, 16), int8] */;
  (%890, %891, %892, %893, %894, %895, %896, %897)
}

def @func_1986() -> Tensor[(5, 9, 12), bool] {
  %899 = fn () -> Tensor[(5, 9, 12), bool] {
    %898 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %898.0
  };
  %899() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_11162() -> Tensor[(5, 9, 12), bool] {
  %900 = @func_4583() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float64], Tensor[(13, 15, 4), bool], Tensor[(5, 9, 12), int32]) */;
  %900.0
}

def @func_11890() -> (Tensor[(5, 9, 12), float32],) {
  @func_11888() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_2023() -> Tensor[(5, 9, 12), float32] {
  %902 = fn () -> Tensor[(5, 9, 12), float32] {
    %901 = @func_1253() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %901.0
  };
  %902() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_13870(%var_13868: Tensor[(30), float64]) -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32], Tensor[(30), float64]) {
  @func_13867(%var_13868) /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32], Tensor[(30), float64]) */
}

def @func_632(%var_628: Tensor[(13, 15, 4), bool]) -> Tensor[(13, 15, 4), bool] {
  %903 = cast(%var_628, dtype="bool") /* ty=Tensor[(13, 15, 4), bool] */;
  %904 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(13, 15, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %905 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 15, 4), bool] */, dtype="bool") /* ty=Tensor[(13, 15, 4), bool] */;
  %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%905, %906) /* ty=Tensor[(13, 15, 4), bool] */
}

def @func_10911(%var_10910: Tensor[(6, 20), int16]) -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32], Tensor[(6, 20), int16]) {
  %912 = fn (%var_10907: Tensor[(6, 20), int16]) -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32], Tensor[(6, 20), int16]) {
    %907 = cast(%var_10907, dtype="int16") /* ty=Tensor[(6, 20), int16] */;
    %908 = reshape(%907, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), int16] */;
    %909 = @func_6453(%908) /* ty=(Tensor[(16, 8, 15), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), int32]) */;
    %910 = @func_1167() /* ty=Tensor[(5, 9, 12), int32] */;
    %911 = %909.2;
    (%910, %911, %var_10907)
  };
  %912(%var_10910) /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32], Tensor[(6, 20), int16]) */
}

def @func_9194() -> (Tensor[(5, 9, 12), bool],) {
  %913 = @func_2246() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %914 = %913.0;
  (%914,)
}

def @func_5315(%var_5314: Tensor[(13, 5, 3), float64]) -> (Tensor[(13, 5, 3), bool], Tensor[(5, 9, 12), float32], Tensor[(9, 5, 5), float32], Tensor[(3, 8, 10), float64], Tensor[(12, 15, 5), float64], Tensor[(900), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float64]) {
  %945 = fn (%var_5188: Tensor[(13, 5, 3), float64]) -> (Tensor[(13, 5, 3), bool], Tensor[(5, 9, 12), float32], Tensor[(9, 5, 5), float32], Tensor[(3, 8, 10), float64], Tensor[(12, 15, 5), float64], Tensor[(900), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float64]) {
    %915 = @func_4583() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float64], Tensor[(13, 15, 4), bool], Tensor[(5, 9, 12), int32]) */;
    %916 = %915.1;
    %917 = cast(%var_5188, dtype="bool") /* ty=Tensor[(13, 5, 3), bool] */;
    %918 = shape_of(%916, dtype="int32") /* ty=Tensor[(3), int32] */;
    %919 = cast(%916, dtype="bool") /* ty=Tensor[(13, 5, 3), bool] */;
    %920 = dyn.reshape(%917, %918, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %921 = @func_5080() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %922 = @func_4944() /* ty=(Tensor[(3, 8, 10), float64], Tensor[(5, 9, 12), float32]) */;
    %923 = cast(meta[relay.Constant][34] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
    %924 = reshape(%923, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), float64] */;
    %925 = @func_2123(%924) /* ty=(Tensor[(12, 15, 5), float64], Tensor[(5, 9, 12), float32]) */;
    %926 = @func_3976() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %927 = cast(%var_5188, dtype="float32") /* ty=Tensor[(13, 5, 3), float32] */;
    %928 = log(%927) /* ty=Tensor[(13, 5, 3), float32] */;
    %929 = cast(%var_5188, dtype="float32") /* ty=Tensor[(13, 5, 3), float32] */;
    %930 = shape_of(%928, dtype="int32") /* ty=Tensor[(3), int32] */;
    %931 = cast(%928, dtype="float32") /* ty=Tensor[(13, 5, 3), float32] */;
    %932 = dyn.reshape(%929, %930, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %933 = @func_1069() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), float32]) */;
    %934 = less_equal(%919, %920) /* ty=Tensor[(13, 5, 3), bool] */;
    %935 = %921.1;
    %936 = @func_4092() /* ty=Tensor[(9, 5, 5), float32] */;
    %937 = %922.0;
    %938 = %925.0;
    %939 = @func_1985() /* ty=Tensor[(5, 9, 12), bool] */;
    %940 = %926.2;
    %941 = @func_1985() /* ty=Tensor[(5, 9, 12), bool] */;
    %942 = floor_mod(%931, %932) /* ty=Tensor[(13, 5, 3), float32] */;
    %943 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
    %944 = %933.1;
    (%934, %935, %936, %937, %938, meta[relay.Constant][34] /* ty=Tensor[(900), float64] */, %939, %940, %941, %942, %943, %944)
  };
  %945(%var_5314) /* ty=(Tensor[(13, 5, 3), bool], Tensor[(5, 9, 12), float32], Tensor[(9, 5, 5), float32], Tensor[(3, 8, 10), float64], Tensor[(12, 15, 5), float64], Tensor[(900), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float64]) */
}

def @func_12305() -> (Tensor[(14, 2, 14), uint32], Tensor[(5, 9, 12), float32]) {
  @func_12303() /* ty=(Tensor[(14, 2, 14), uint32], Tensor[(5, 9, 12), float32]) */
}

def @func_4183(%var_4181: Tensor[(392), uint32]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(14, 2, 14), uint32], Tensor[(392), uint32]) {
  @func_4180(%var_4181) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(14, 2, 14), uint32], Tensor[(392), uint32]) */
}

def @func_947() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  @func_945() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_6707() -> (Tensor[(120), int16],) {
  @func_6705() /* ty=(Tensor[(120), int16],) */
}

def @func_2641() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %946 = @func_1671() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %947 = @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %948 = %946.0;
  %949 = %947.1;
  (%948, %949)
}

def @func_2643() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  @func_2641() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_3788() -> Tensor[(5, 9, 12), float32] {
  %950 = @func_1858() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %951 = %950.0;
  %952 = @func_945() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %953 = %952.0;
  %954 = cast(%953, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  %955 = shape_of(%951, dtype="int32") /* ty=Tensor[(3), int32] */;
  %956 = cast(%951, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
  %957 = dyn.reshape(%954, %955, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%956, %957) /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_8651(%var_8649: Tensor[(12, 5, 14), uint32], %var_8650: Tensor[(12, 5, 14), uint32]) -> Tensor[(12, 5, 14), float32] {
  %964 = fn (%var_8631: Tensor[(12, 5, 14), uint32], %var_8632: Tensor[(12, 5, 14), uint32]) -> Tensor[(12, 5, 14), float32] {
    %958 = cast(%var_8632, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
    %959 = shape_of(%var_8631, dtype="int32") /* ty=Tensor[(3), int32] */;
    %960 = cast(%var_8631, dtype="bool") /* ty=Tensor[(12, 5, 14), bool] */;
    %961 = dyn.reshape(%958, %959, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %962 = equal(%960, %961) /* ty=Tensor[(12, 5, 14), bool] */;
    %963 = cast(%962, dtype="float32") /* ty=Tensor[(12, 5, 14), float32] */;
    acos(%963) /* ty=Tensor[(12, 5, 14), float32] */
  };
  %964(%var_8649, %var_8650) /* ty=Tensor[(12, 5, 14), float32] */
}

def @func_750() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
  @func_748() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */
}

def @func_9412() -> (Tensor[(36, 10), float32],) {
  @func_9410() /* ty=(Tensor[(36, 10), float32],) */
}

def @func_11352() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %965 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %966 = @func_7494() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64]) */;
  %967 = %965.0;
  %968 = %966.3;
  (%967, %968)
}

def @func_4134(%var_4132: Tensor[(14, 2, 14), uint32], %var_4133: Tensor[(14, 2, 14), uint32]) -> Tensor[(14, 2, 14), uint32] {
  %973 = fn (%var_4122: Tensor[(14, 2, 14), uint32], %var_4123: Tensor[(14, 2, 14), uint32]) -> Tensor[(14, 2, 14), uint32] {
    %969 = cast(%var_4123, dtype="uint32") /* ty=Tensor[(14, 2, 14), uint32] */;
    %970 = shape_of(%var_4122, dtype="int32") /* ty=Tensor[(3), int32] */;
    %971 = cast(%var_4122, dtype="uint32") /* ty=Tensor[(14, 2, 14), uint32] */;
    %972 = dyn.reshape(%969, %970, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    bitwise_and(%971, %972) /* ty=Tensor[(14, 2, 14), uint32] */
  };
  %973(%var_4132, %var_4133) /* ty=Tensor[(14, 2, 14), uint32] */
}

def @func_5399() -> (Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool]) {
  %974 = @func_2641() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %975 = @func_4092() /* ty=Tensor[(9, 5, 5), float32] */;
  %976 = %974.1;
  (%975, %976)
}

def @func_8689() -> (Tensor[(5, 9, 12), bool],) {
  %979 = fn () -> (Tensor[(5, 9, 12), bool],) {
    %977 = @func_2246() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %978 = %977.0;
    (%978,)
  };
  %979() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_301() -> (Tensor[(5, 9, 12), bool],) {
  @func_299() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_8972() -> Tensor[(5, 9, 12), bool] {
  @func_8970() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_1342() -> (Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %980 = @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %981 = %980.0;
  %982 = cast(%981, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
  %983 = cast(%981, dtype="int16") /* ty=Tensor[(5, 9, 12), int16] */;
  %984 = reshape(%983, newshape=[3, 12, 15]) /* ty=Tensor[(3, 12, 15), int16] */;
  %985 = @func_606(%984) /* ty=(Tensor[(3, 12, 15), bool], Tensor[(5, 9, 12), bool]) */;
  %986 = @func_179() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), int32]) */;
  %987 = erf(%982) /* ty=Tensor[(5, 9, 12), float64] */;
  %988 = %985.1;
  %989 = %986.0;
  (%987, %988, %989)
}

def @func_5129() -> Tensor[(8, 5, 9), float32] {
  %996 = fn () -> Tensor[(8, 5, 9), float32] {
    %990 = @func_2462() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float32], Tensor[(36, 10), bool], Tensor[(5, 9, 12), bool]) */;
    %991 = %990.2;
    %992 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(8, 5, 9), float32] */;
    %993 = shape_of(%991, dtype="int32") /* ty=Tensor[(3), int32] */;
    %994 = cast(%991, dtype="float32") /* ty=Tensor[(8, 5, 9), float32] */;
    %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%994, %995) /* ty=Tensor[(8, 5, 9), float32] */
  };
  %996() /* ty=Tensor[(8, 5, 9), float32] */
}

def @func_6663() -> (Tensor[(5, 9, 12), float32], Tensor[(16, 8, 15), bool], Tensor[(120), int16]) {
  %1003 = fn () -> (Tensor[(5, 9, 12), float32], Tensor[(16, 8, 15), bool], Tensor[(120), int16]) {
    %997 = @func_4206() /* ty=(Tensor[(5, 9, 12), float32],) */;
    %998 = cast(meta[relay.Constant][36] /* ty=Tensor[(120), int16] */, dtype="int16") /* ty=Tensor[(120), int16] */;
    %999 = reshape(%998, newshape=[1, 8, 15]) /* ty=Tensor[(1, 8, 15), int16] */;
    %1000 = @func_6453(%999) /* ty=(Tensor[(16, 8, 15), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), int32]) */;
    %1001 = %997.0;
    %1002 = %1000.0;
    (%1001, %1002, meta[relay.Constant][36] /* ty=Tensor[(120), int16] */)
  };
  %1003() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(16, 8, 15), bool], Tensor[(120), int16]) */
}

def @func_10458() -> (Tensor[(5, 9, 12), bool],) {
  %1004 = @func_9264() /* ty=Tensor[(5, 9, 12), bool] */;
  (%1004,)
}

def @func_8492() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  @func_8490() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */
}

def @func_13273() -> (Tensor[(5, 9, 12), float32],) {
  %1005 = @func_6520() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %1006 = %1005.0;
  (%1006,)
}

def @func_7945() -> Tensor[(5, 9, 12), float32] {
  @func_7943() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_11070(%var_11068: Tensor[(120), int16]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(6, 20), int16], Tensor[(120), int16], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  @func_11067(%var_11068) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(6, 20), int16], Tensor[(120), int16], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */
}

def @func_6278() -> (Tensor[(5, 9, 12), float32],) {
  %1008 = fn () -> (Tensor[(5, 9, 12), float32],) {
    %1007 = @func_1190() /* ty=Tensor[(5, 9, 12), float32] */;
    (%1007,)
  };
  %1008() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_12020(%var_11988: Tensor[(16, 6, 13), float64], %var_12004: Tensor[(1, 30), float64]) -> (Tensor[(16, 6, 13), float64], Tensor[(3, 10, 1), float64], Tensor[(1, 30), float64]) {
  %1009 = cast(%var_11988, dtype="float64") /* ty=Tensor[(16, 6, 13), float64] */;
  %1010 = cast(%var_12004, dtype="float64") /* ty=Tensor[(1, 30), float64] */;
  %1011 = reshape(%1010, newshape=[3, 10, 1]) /* ty=Tensor[(3, 10, 1), float64] */;
  %1012 = cos(%1009) /* ty=Tensor[(16, 6, 13), float64] */;
  %1013 = @func_9173(%1011) /* ty=Tensor[(3, 10, 1), float64] */;
  (%1012, %1013, %var_12004)
}

def @func_11388() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %1014 = @func_2129() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1015 = @func_4629() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1016 = %1014.0;
  %1017 = %1015.0;
  (%1016, %1017)
}

def @func_6983() -> Tensor[(5, 9, 12), bool] {
  %1018 = @func_788() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1018.0
}

def @func_9618() -> Tensor[(5, 9, 12), bool] {
  %1019 = @func_1342() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %1019.2
}

def @func_11354() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  @func_11352() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */
}

def @func_6885(%var_6883: Tensor[(13, 1, 16), float64], %var_6884: Tensor[(13, 16, 16), float64]) -> Tensor[(13, 16, 16), bool] {
  %1022 = fn (%var_6869: Tensor[(13, 1, 16), float64], %var_6870: Tensor[(13, 16, 16), float64]) -> Tensor[(13, 16, 16), bool] {
    %1020 = cast(%var_6869, dtype="bool") /* ty=Tensor[(13, 1, 16), bool] */;
    %1021 = cast(%var_6870, dtype="bool") /* ty=Tensor[(13, 16, 16), bool] */;
    less_equal(%1020, %1021) /* ty=Tensor[(13, 16, 16), bool] */
  };
  %1022(%var_6883, %var_6884) /* ty=Tensor[(13, 16, 16), bool] */
}

def @func_8551() -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) {
  %1025 = fn () -> (Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) {
    %1023 = @func_1167() /* ty=Tensor[(5, 9, 12), int32] */;
    %1024 = @func_6021() /* ty=Tensor[(5, 9, 12), float32] */;
    (%1023, %1024)
  };
  %1025() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) */
}

def @func_8880() -> (Tensor[(3, 12, 15), bool],) {
  %1026 = @func_2264() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(3, 12, 15), bool]) */;
  %1027 = %1026.1;
  (%1027,)
}

def @func_3688() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  @func_3686() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_11164() -> Tensor[(5, 9, 12), bool] {
  @func_11162() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_7884(%var_7872: Tensor[(1, 5, 10), float32]) -> (Tensor[(?, 5, 10), bool], Tensor[(5, 9, 12), float32]) {
  %1028 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 5, 10), float32] */, dtype="bool") /* ty=Tensor[(1, 5, 10), bool] */;
  %1029 = shape_of(%var_7872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1030 = cast(%var_7872, dtype="bool") /* ty=Tensor[(1, 5, 10), bool] */;
  %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1032 = @func_1869() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %1033 = greater_equal(%1030, %1031) /* ty=Tensor[(?, 5, 10), bool] */;
  %1034 = %1032.0;
  (%1033, %1034)
}

def @func_4857() -> (Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64], Tensor[(240), float64], Tensor[(9, 5, 5), float32]) {
  @func_4855() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64], Tensor[(240), float64], Tensor[(9, 5, 5), float32]) */
}

def @func_1070() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), float32]) {
  %1043 = fn () -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), float32]) {
    %1035 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %1036 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %1037 = %1036.0;
    %1038 = cast(%1037, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
    %1039 = @func_748() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
    %1040 = %1035.1;
    %1041 = exp(%1038) /* ty=Tensor[(5, 9, 12), float64] */;
    %1042 = %1039.1;
    (%1040, %1041, %1042)
  };
  %1043() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), float32]) */
}

def @func_12024(%var_12022: Tensor[(16, 6, 13), float64], %var_12023: Tensor[(1, 30), float64]) -> (Tensor[(16, 6, 13), float64], Tensor[(3, 10, 1), float64], Tensor[(1, 30), float64]) {
  @func_12020(%var_12022, %var_12023) /* ty=(Tensor[(16, 6, 13), float64], Tensor[(3, 10, 1), float64], Tensor[(1, 30), float64]) */
}

def @func_8250() -> (Tensor[(8, 5, 9), float32], Tensor[(36, 10), bool], Tensor[(5, 9, 12), float32]) {
  @func_8248() /* ty=(Tensor[(8, 5, 9), float32], Tensor[(36, 10), bool], Tensor[(5, 9, 12), float32]) */
}

def @func_382(%var_352: Tensor[(8, 5, 9), float64], %var_353: Tensor[(8, 5, 9), float64]) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) {
  %1044 = @func_231() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %1045 = cast(%var_353, dtype="float64") /* ty=Tensor[(8, 5, 9), float64] */;
  %1046 = shape_of(%var_352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1047 = cast(%var_352, dtype="float64") /* ty=Tensor[(8, 5, 9), float64] */;
  %1048 = dyn.reshape(%1045, %1046, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1049 = floor_divide(%1047, %1048) /* ty=Tensor[(8, 5, 9), float64] */;
  %1050 = cast(%1049, dtype="float64") /* ty=Tensor[(8, 5, 9), float64] */;
  %1051 = %1044.1;
  %1052 = @func_345() /* ty=Tensor[(5, 9, 12), bool] */;
  %1053 = cos(%1050) /* ty=Tensor[(8, 5, 9), float64] */;
  (%1051, %1052, %1053)
}

def @func_6521() -> (Tensor[(5, 9, 12), float32],) {
  %1056 = fn () -> (Tensor[(5, 9, 12), float32],) {
    %1054 = @func_6244() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
    %1055 = %1054.2;
    (%1055,)
  };
  %1056() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_1890() -> Tensor[(5, 9, 12), float32] {
  %1057 = @func_1069() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), float32]) */;
  %1057.0
}

def @func_11438(%var_11436: Tensor[(6, 14, 10), int8], %var_11437: Tensor[(6, 14, 10), int8]) -> (Tensor[(6, 14, 10), int8], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  %1067 = fn (%var_11416: Tensor[(6, 14, 10), int8], %var_11417: Tensor[(6, 14, 10), int8]) -> (Tensor[(6, 14, 10), int8], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
    %1058 = cast(%var_11417, dtype="int8") /* ty=Tensor[(6, 14, 10), int8] */;
    %1059 = shape_of(%var_11416, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1060 = cast(%var_11416, dtype="int8") /* ty=Tensor[(6, 14, 10), int8] */;
    %1061 = dyn.reshape(%1058, %1059, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %1062 = @func_11388() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %1063 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
    %1064 = right_shift(%1060, %1061) /* ty=Tensor[(6, 14, 10), int8] */;
    %1065 = %1062.0;
    %1066 = %1063.0;
    (%1064, %1065, %1066)
  };
  %1067(%var_11436, %var_11437) /* ty=(Tensor[(6, 14, 10), int8], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */
}

def @func_309() -> (Tensor[(5, 9, 12), bool],) {
  %1068 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %1069 = %1068.0;
  (%1069,)
}

def @func_7073() -> Tensor[(120), int16] {
  %1071 = fn () -> Tensor[(120), int16] {
    %1070 = @func_6705() /* ty=(Tensor[(120), int16],) */;
    %1070.0
  };
  %1071() /* ty=Tensor[(120), int16] */
}

def @func_10276() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %1079 = fn () -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
    %1072 = @func_4020() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %1073 = @func_788() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %1074 = @func_2641() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %1075 = %1072.2;
    %1076 = %1073.0;
    %1077 = @func_1190() /* ty=Tensor[(5, 9, 12), float32] */;
    %1078 = %1074.0;
    (%1075, %1076, %1077, %1078)
  };
  %1079() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */
}

def @func_6509() -> (Tensor[(360), float64],) {
  %1082 = fn () -> (Tensor[(360), float64],) {
    %1080 = @func_5468() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64], Tensor[(360), float64]) */;
    %1081 = %1080.2;
    (%1081,)
  };
  %1082() /* ty=(Tensor[(360), float64],) */
}

def @func_1192() -> Tensor[(5, 9, 12), float32] {
  @func_1190() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_1373() -> Tensor[(13, 5, 3), float32] {
  %1084 = fn () -> Tensor[(13, 5, 3), float32] {
    %1083 = cast(meta[relay.Constant][38] /* ty=Tensor[(13, 5, 3), float32] */, dtype="float32") /* ty=Tensor[(13, 5, 3), float32] */;
    sigmoid(%1083) /* ty=Tensor[(13, 5, 3), float32] */
  };
  %1084() /* ty=Tensor[(13, 5, 3), float32] */
}

def @func_6406() -> Tensor[(5, 9, 12), float32] {
  @func_2325() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_12626(%var_12624: Tensor[(30), float64]) -> (Tensor[(13, 5, 3), float64], Tensor[(5, 9, 12), float32], Tensor[(3, 10, 1), float64], Tensor[(30), float64]) {
  @func_12623(%var_12624) /* ty=(Tensor[(13, 5, 3), float64], Tensor[(5, 9, 12), float32], Tensor[(3, 10, 1), float64], Tensor[(30), float64]) */
}

def @func_261() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) {
  @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */
}

def @func_10150(%var_10148: Tensor[(900), float64]) -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(900), float64]) {
  %1085 = @func_3686() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %1086 = @func_8809() /* ty=(Tensor[(5, 9, 12), float32],) */;
  %1087 = cast(%var_10148, dtype="float64") /* ty=Tensor[(900), float64] */;
  %1088 = reshape(%1087, newshape=[12, 15, 5]) /* ty=Tensor[(12, 15, 5), float64] */;
  %1089 = @func_2123(%1088) /* ty=(Tensor[(12, 15, 5), float64], Tensor[(5, 9, 12), float32]) */;
  %1090 = %1085.1;
  %1091 = %1086.0;
  %1092 = %1089.1;
  (%1090, %1091, %1092, %var_10148)
}

def @func_6455(%var_6454: Tensor[(1, 8, 15), int16]) -> (Tensor[(16, 8, 15), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), int32]) {
  %1099 = fn (%var_6423: Tensor[(1, 8, 15), int16]) -> (Tensor[(16, 8, 15), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), int32]) {
    %1093 = cast(%var_6423, dtype="bool") /* ty=Tensor[(1, 8, 15), bool] */;
    %1094 = cast(meta[relay.Constant][39] /* ty=Tensor[(16, 8, 15), int16] */, dtype="bool") /* ty=Tensor[(16, 8, 15), bool] */;
    %1095 = not_equal(%1093, %1094) /* ty=Tensor[(16, 8, 15), bool] */;
    %1096 = @func_4789() /* ty=Tensor[(5, 9, 12), float32] */;
    %1097 = @func_2708() /* ty=Tensor[(5, 9, 12), float32] */;
    %1098 = @func_1167() /* ty=Tensor[(5, 9, 12), int32] */;
    (%1095, %1096, %1097, %1098)
  };
  %1099(%var_6454) /* ty=(Tensor[(16, 8, 15), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), int32]) */
}

def @func_12087() -> Tensor[(5, 9, 12), bool] {
  @func_7123() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_13770() -> (Tensor[(780), uint8],) {
  @func_13768() /* ty=(Tensor[(780), uint8],) */
}

def @func_8700() -> Tensor[(5, 9, 12), bool] {
  %1101 = fn () -> Tensor[(5, 9, 12), bool] {
    %1100 = @func_2246() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %1100.0
  };
  %1101() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_11787() -> (Tensor[(5, 9, 12), float32],) {
  @func_11785() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_9735() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) {
  %1102 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1103 = @func_3053() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %1104 = %1102.0;
  %1105 = @func_667() /* ty=Tensor[(5, 9, 12), float32] */;
  %1106 = %1103.2;
  (%1104, %1105, %1106)
}

def @func_6541() -> Tensor[(5, 9, 12), bool] {
  @func_6539() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_945() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %1107 = @func_788() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1108 = @func_299() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1109 = @func_550() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1110 = %1107.0;
  %1111 = %1108.0;
  %1112 = %1109.0;
  (%1110, %1111, %1112)
}

def @func_4753() -> (Tensor[(4, 13, 5), bool], Tensor[(7, 10, 11), bool], Tensor[(770), int8]) {
  @func_4751() /* ty=(Tensor[(4, 13, 5), bool], Tensor[(7, 10, 11), bool], Tensor[(770), int8]) */
}

def @func_8943() -> (Tensor[(5, 9, 12), float32],) {
  %1114 = fn () -> (Tensor[(5, 9, 12), float32],) {
    %1113 = @func_6406() /* ty=Tensor[(5, 9, 12), float32] */;
    (%1113,)
  };
  %1114() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_12405(%var_12378: Tensor[(900), float64]) -> (Tensor[(360), float64], Tensor[(900), float64], Tensor[(900), float64]) {
  %1115 = cast(%var_12378, dtype="float64") /* ty=Tensor[(900), float64] */;
  %1116 = reshape(%1115, newshape=[900]) /* ty=Tensor[(900), float64] */;
  %1117 = @func_10150(%1116) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(900), float64]) */;
  %1118 = @func_7757() /* ty=Tensor[(360), float64] */;
  %1119 = %1117.3;
  (%1118, %1119, %var_12378)
}

def @func_1190() -> Tensor[(5, 9, 12), float32] {
  @func_667() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_12111(%var_12110: Tensor[(6, 144), float32]) -> (Tensor[(5, 9, 12), bool], Tensor[(6, 12, 12), float32], Tensor[(6, 144), float32]) {
  %1126 = fn (%var_12106: Tensor[(6, 144), float32]) -> (Tensor[(5, 9, 12), bool], Tensor[(6, 12, 12), float32], Tensor[(6, 144), float32]) {
    %1120 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %1121 = cast(%var_12106, dtype="float32") /* ty=Tensor[(6, 144), float32] */;
    %1122 = reshape(%1121, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), float32] */;
    %1123 = @func_4079(%1122) /* ty=(Tensor[(6, 12, 12), float32],) */;
    %1124 = %1120.1;
    %1125 = %1123.0;
    (%1124, %1125, %var_12106)
  };
  %1126(%var_12110) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(6, 12, 12), float32], Tensor[(6, 144), float32]) */
}

def @func_4344() -> (Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  @func_4342() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */
}

def @func_5080() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) {
  %1127 = @func_3221() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %1128 = @func_3324() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
  %1129 = @func_299() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1130 = @func_3686() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
  %1131 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1132 = %1127.0;
  %1133 = %1128.0;
  %1134 = %1129.0;
  %1135 = %1130.1;
  %1136 = @func_2149() /* ty=Tensor[(5, 9, 12), float32] */;
  %1137 = @func_2149() /* ty=Tensor[(5, 9, 12), float32] */;
  %1138 = %1131.0;
  %1139 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
  (%1132, %1133, %1134, %1135, %1136, %1137, %1138, %1139)
}

def @func_4583() -> (Tensor[(5, 9, 12), bool], Tensor[(13, 5, 3), float64], Tensor[(13, 15, 4), bool], Tensor[(5, 9, 12), int32]) {
  %1140 = @func_3474() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(13, 5, 3), float64]) */;
  %1141 = cast(meta[relay.Constant][40] /* ty=Tensor[(780), bool] */, dtype="bool") /* ty=Tensor[(780), bool] */;
  %1142 = reshape(%1141, newshape=[13, 15, 4]) /* ty=Tensor[(13, 15, 4), bool] */;
  %1143 = @func_632(%1142) /* ty=Tensor[(13, 15, 4), bool] */;
  %1144 = cast(meta[relay.Constant][40] /* ty=Tensor[(780), bool] */, dtype="bool") /* ty=Tensor[(780), bool] */;
  %1145 = shape_of(%1143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1146 = cast(%1143, dtype="bool") /* ty=Tensor[(13, 15, 4), bool] */;
  %1147 = dyn.reshape(%1144, %1145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1148 = @func_3251() /* ty=(Tensor[(5, 9, 12), int32], Tensor[(5, 9, 12), float32]) */;
  %1149 = @func_2352() /* ty=Tensor[(5, 9, 12), bool] */;
  %1150 = %1140.5;
  %1151 = greater(%1146, %1147) /* ty=Tensor[(13, 15, 4), bool] */;
  %1152 = %1148.0;
  (%1149, %1150, %1151, %1152)
}

def @func_4855() -> (Tensor[(5, 9, 12), bool], Tensor[(3, 8, 10), float64], Tensor[(240), float64], Tensor[(9, 5, 5), float32]) {
  %1153 = @func_1858() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1154 = cast(meta[relay.Constant][41] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %1155 = reshape(%1154, newshape=[3, 8, 10]) /* ty=Tensor[(3, 8, 10), float64] */;
  %1156 = @func_4416(%1155) /* ty=(Tensor[(3, 8, 10), float64],) */;
  %1157 = %1153.0;
  %1158 = %1156.0;
  %1159 = @func_4092() /* ty=Tensor[(9, 5, 5), float32] */;
  (%1157, %1158, meta[relay.Constant][41] /* ty=Tensor[(240), float64] */, %1159)
}

def @func_11000() -> (Tensor[(4, 13, 5), bool], Tensor[(5, 9, 12), float32], Tensor[(900), float64], Tensor[(5, 9, 12), float32], Tensor[(9, 5, 5), float32]) {
  %1170 = fn () -> (Tensor[(4, 13, 5), bool], Tensor[(5, 9, 12), float32], Tensor[(900), float64], Tensor[(5, 9, 12), float32], Tensor[(9, 5, 5), float32]) {
    %1160 = @func_4751() /* ty=(Tensor[(4, 13, 5), bool], Tensor[(7, 10, 11), bool], Tensor[(770), int8]) */;
    %1161 = cast(meta[relay.Constant][42] /* ty=Tensor[(900), float64] */, dtype="float64") /* ty=Tensor[(900), float64] */;
    %1162 = reshape(%1161, newshape=[900]) /* ty=Tensor[(900), float64] */;
    %1163 = @func_10150(%1162) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(900), float64]) */;
    %1164 = @func_6244() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32]) */;
    %1165 = @func_5399() /* ty=(Tensor[(9, 5, 5), float32], Tensor[(5, 9, 12), bool]) */;
    %1166 = %1160.0;
    %1167 = %1163.1;
    %1168 = %1164.1;
    %1169 = %1165.0;
    (%1166, %1167, meta[relay.Constant][42] /* ty=Tensor[(900), float64] */, %1168, %1169)
  };
  %1170() /* ty=(Tensor[(4, 13, 5), bool], Tensor[(5, 9, 12), float32], Tensor[(900), float64], Tensor[(5, 9, 12), float32], Tensor[(9, 5, 5), float32]) */
}

def @func_9266() -> Tensor[(5, 9, 12), bool] {
  @func_9264() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_4630() -> (Tensor[(5, 9, 12), bool],) {
  %1173 = fn () -> (Tensor[(5, 9, 12), bool],) {
    %1171 = @func_2129() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %1172 = %1171.0;
    (%1172,)
  };
  %1173() /* ty=(Tensor[(5, 9, 12), bool],) */
}

def @func_3475() -> (Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(13, 5, 3), float64]) {
  %1188 = fn () -> (Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(13, 5, 3), float64]) {
    %1174 = @func_2821() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %1175 = @func_1154() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %1176 = @func_2085() /* ty=(Tensor[(5, 9, 12), float32],) */;
    %1177 = @func_2821() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %1178 = %1177.0;
    %1179 = cast(%1178, dtype="float32") /* ty=Tensor[(13, 5, 3), float32] */;
    %1180 = exp(%1179) /* ty=Tensor[(13, 5, 3), float32] */;
    %1181 = cast(%1180, dtype="float64") /* ty=Tensor[(13, 5, 3), float64] */;
    %1182 = %1174.0;
    %1183 = %1175.2;
    %1184 = @func_667() /* ty=Tensor[(5, 9, 12), float32] */;
    %1185 = @func_1190() /* ty=Tensor[(5, 9, 12), float32] */;
    %1186 = %1176.0;
    %1187 = sin(%1181) /* ty=Tensor[(13, 5, 3), float64] */;
    (%1182, %1183, %1184, %1185, %1186, %1187)
  };
  %1188() /* ty=(Tensor[(13, 5, 3), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(13, 5, 3), float64]) */
}

def @func_2125(%var_2124: Tensor[(12, 15, 5), float64]) -> (Tensor[(12, 15, 5), float64], Tensor[(5, 9, 12), float32]) {
  %1193 = fn (%var_2087: Tensor[(12, 15, 5), float64]) -> (Tensor[(12, 15, 5), float64], Tensor[(5, 9, 12), float32]) {
    %1189 = cast(%var_2087, dtype="float64") /* ty=Tensor[(12, 15, 5), float64] */;
    %1190 = @func_1280() /* ty=(Tensor[(5, 9, 12), float32],) */;
    %1191 = sqrt(%1189) /* ty=Tensor[(12, 15, 5), float64] */;
    %1192 = %1190.0;
    (%1191, %1192)
  };
  %1193(%var_2124) /* ty=(Tensor[(12, 15, 5), float64], Tensor[(5, 9, 12), float32]) */
}

def @func_1639() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(360), float64], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), uint16], Tensor[(5, 9, 12), float32]) {
  %1194 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %1195 = cast(meta[relay.Constant][43] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %1196 = cast(meta[relay.Constant][43] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %1197 = reshape(%1195, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %1198 = reshape(%1196, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %1199 = @func_382(%1197, %1198) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */;
  %1200 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
  %1201 = @func_667() /* ty=Tensor[(5, 9, 12), float32] */;
  %1202 = @func_1253() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %1203 = %1202.0;
  %1204 = cast(%1203, dtype="uint16") /* ty=Tensor[(5, 9, 12), uint16] */;
  %1205 = shape_of(%1201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1206 = cast(%1201, dtype="uint16") /* ty=Tensor[(5, 9, 12), uint16] */;
  %1207 = dyn.reshape(%1204, %1205, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1208 = cast(meta[relay.Constant][43] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %1209 = cast(meta[relay.Constant][43] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %1210 = reshape(%1208, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %1211 = reshape(%1209, newshape=[8, 5, 9]) /* ty=Tensor[(8, 5, 9), float64] */;
  %1212 = @func_382(%1210, %1211) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(8, 5, 9), float64]) */;
  %1213 = %1194.0;
  %1214 = %1199.0;
  %1215 = %1200.0;
  %1216 = bitwise_or(%1206, %1207) /* ty=Tensor[(5, 9, 12), uint16] */;
  %1217 = %1212.0;
  (%1213, %1214, meta[relay.Constant][43] /* ty=Tensor[(360), float64] */, %1215, %1216, %1217)
}

def @func_8970() -> Tensor[(5, 9, 12), bool] {
  @func_345() /* ty=Tensor[(5, 9, 12), bool] */
}

def @func_11969() -> (Tensor[(5, 9, 12), int32],) {
  @func_11967() /* ty=(Tensor[(5, 9, 12), int32],) */
}

def @func_669() -> Tensor[(5, 9, 12), float32] {
  @func_667() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_12654(%var_12652: Tensor[(1, 15, 8), uint64]) -> (Tensor[(9, 15, 8), uint64],) {
  @func_12651(%var_12652) /* ty=(Tensor[(9, 15, 8), uint64],) */
}

def @func_4401() -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %1225 = fn () -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
    %1218 = @func_1850() /* ty=(Tensor[(5, 9, 12), float64], Tensor[(5, 9, 12), bool]) */;
    %1219 = @func_2085() /* ty=(Tensor[(5, 9, 12), float32],) */;
    %1220 = @func_447() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool]) */;
    %1221 = @func_906() /* ty=Tensor[(5, 9, 12), bool] */;
    %1222 = %1218.1;
    %1223 = %1219.0;
    %1224 = %1220.1;
    (%1221, %1222, %1223, %1224)
  };
  %1225() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */
}

def @func_13275() -> (Tensor[(5, 9, 12), float32],) {
  @func_13273() /* ty=(Tensor[(5, 9, 12), float32],) */
}

def @func_13431() -> (Tensor[(5, 9, 12), float32],) {
  %1226 = @func_9092() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
  %1227 = %1226.3;
  (%1227,)
}

def @func_4790() -> Tensor[(5, 9, 12), float32] {
  %1228 = fn () -> Tensor[(5, 9, 12), float32] {
    @func_1890() /* ty=Tensor[(5, 9, 12), float32] */
  };
  %1228() /* ty=Tensor[(5, 9, 12), float32] */
}

def @func_720(%var_718: float64) -> (Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], float64, Tensor[(2112), float64]) {
  @func_717(%var_718) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], float64, Tensor[(2112), float64]) */
}

def @func_9176(%var_9174: Tensor[(3, 10, 1), float64]) -> Tensor[(3, 10, 1), float64] {
  @func_9173(%var_9174) /* ty=Tensor[(3, 10, 1), float64] */
}

def @func_7733(%var_7676: Tensor[(16, 10, 16), float64], %var_7677: Tensor[(16, 10, 16), float64], %var_7706: Tensor[(10, 78), bool]) -> (Tensor[(16, 10, 16), bool], Tensor[(5, 9, 12), bool], Tensor[(13, 15, 4), bool], Tensor[(10, 78), bool], Tensor[(5, 9, 12), float32]) {
  %1229 = cast(%var_7677, dtype="bool") /* ty=Tensor[(16, 10, 16), bool] */;
  %1230 = shape_of(%var_7676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1231 = cast(%var_7676, dtype="bool") /* ty=Tensor[(16, 10, 16), bool] */;
  %1232 = dyn.reshape(%1229, %1230, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1233 = cast(%var_7706, dtype="bool") /* ty=Tensor[(10, 78), bool] */;
  %1234 = reshape(%1233, newshape=[13, 15, 4]) /* ty=Tensor[(13, 15, 4), bool] */;
  %1235 = @func_3847() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
  %1236 = less(%1231, %1232) /* ty=Tensor[(16, 10, 16), bool] */;
  %1237 = @func_345() /* ty=Tensor[(5, 9, 12), bool] */;
  %1238 = @func_632(%1234) /* ty=Tensor[(13, 15, 4), bool] */;
  %1239 = %1235.0;
  (%1236, %1237, %1238, %var_7706, %1239)
}

def @func_10078(%var_10076: Tensor[(16, 3, 9), float64]) -> Tensor[(16, 3, 9), float64] {
  @func_10075(%var_10076) /* ty=Tensor[(16, 3, 9), float64] */
}

def @func_1731() -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
  %1244 = fn () -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) {
    %1240 = @func_259() /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), float32]) */;
    %1241 = @func_1219() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %1242 = %1240.1;
    %1243 = %1241.1;
    (%1242, %1243)
  };
  %1244() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */
}

def @func_5826(%var_5825: float64) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(2112), float64], float64) {
  %1255 = fn (%var_5821: float64) -> (Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(2112), float64], float64) {
    %1245 = @func_4250() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool], Tensor[(3, 12, 15), bool]) */;
    %1246 = @func_2741() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), bool]) */;
    %1247 = %1246.0;
    %1248 = cast(%1247, dtype="float32") /* ty=Tensor[(5, 9, 12), float32] */;
    %1249 = cast(%var_5821, dtype="float64") /* ty=float64 */;
    %1250 = reshape(%1249, newshape=[]) /* ty=float64 */;
    %1251 = @func_717(%1250) /* ty=(Tensor[(5, 9, 12), bool], Tensor[(5, 9, 12), bool], float64, Tensor[(2112), float64]) */;
    %1252 = %1245.0;
    %1253 = sigmoid(%1248) /* ty=Tensor[(5, 9, 12), float32] */;
    %1254 = %1251.3;
    (%1252, %1253, %1254, %var_5821)
  };
  %1255(%var_5825) /* ty=(Tensor[(5, 9, 12), float32], Tensor[(5, 9, 12), float32], Tensor[(2112), float64], float64) */
}

def @func_11785() -> (Tensor[(5, 9, 12), float32],) {
  %1256 = @func_6662() /* ty=(Tensor[(5, 9, 12), float32], Tensor[(16, 8, 15), bool], Tensor[(120), int16]) */;
  %1257 = %1256.0;
  (%1257,)
}

def @func_2761() -> Tensor[(5, 9, 12), bool] {
  %1259 = fn () -> Tensor[(5, 9, 12), bool] {
    %1258 = @func_309() /* ty=(Tensor[(5, 9, 12), bool],) */;
    %1258.0
  };
  %1259() /* ty=Tensor[(5, 9, 12), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen597/build/output.py:4605: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen597/build/output.py:4610: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  let %x = let %x1: T = match (%g) {
    Raw(%x2: T) => {
      %x2
    },
    One(%x3: fn () -> T) => {
      let %x4 = let %x5: T = %x3();
      %x5;
      %x4
    },
    Zero(%x6: fn () -> T) => {
      let %x7 = let %x8: T = %x6();
      %x8;
      %x7
    },
  };
  %x1;
  %x
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  let %x9 = let %x10: (GradCell[T], GradCell[T]) = (%l, %r);
  let %x11 = let %x12: GradCell[T] = match (%x10) {
    (Zero(_), _) => {
      %l
    },
    (_, Zero(_)) => {
      %r
    },
    (One(_), _) => {
      %r
    },
    (_, One(_)) => {
      %l
    },
    _ => {
      let %x13 = let %x14: T = match (%l) {
        Raw(%x15: T) => {
          %x15
        },
        One(%x16: fn () -> T) => {
          let %x17 = let %x18: T = %x16();
          %x18;
          %x17
        },
        Zero(%x19: fn () -> T) => {
          let %x20 = let %x21: T = %x19();
          %x21;
          %x20
        },
      };
      let %x22 = let %x23: T = match (%r) {
        Raw(%x24: T) => {
          %x24
        },
        One(%x25: fn () -> T) => {
          let %x26 = let %x27: T = %x25();
          %x27;
          %x26
        },
        Zero(%x28: fn () -> T) => {
          let %x29 = let %x30: T = %x28();
          %x30;
          %x29
        },
      };
      let %x31 = let %x32: T = %multiply(%x14, %x23);
      let %x33 = let %x34: GradCell[T] = Raw(%x32);
      %x34;
      %x33;
      %x31;
      %x22;
      %x13
    },
  };
  %x12;
  %x11;
  %x9
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  let %x35 = let %x36: (GradCell[T], GradCell[T]) = (%l1, %r1);
  let %x37 = let %x38: GradCell[T] = match (%x36) {
    (Zero(_), _) => {
      %r1
    },
    (_, Zero(_)) => {
      %l1
    },
    _ => {
      let %x39 = let %x40: T = match (%l1) {
        Raw(%x41: T) => {
          %x41
        },
        One(%x42: fn () -> T) => {
          let %x43 = let %x44: T = %x42();
          %x44;
          %x43
        },
        Zero(%x45: fn () -> T) => {
          let %x46 = let %x47: T = %x45();
          %x47;
          %x46
        },
      };
      let %x48 = let %x49: T = match (%r1) {
        Raw(%x50: T) => {
          %x50
        },
        One(%x51: fn () -> T) => {
          let %x52 = let %x53: T = %x51();
          %x53;
          %x52
        },
        Zero(%x54: fn () -> T) => {
          let %x55 = let %x56: T = %x54();
          %x56;
          %x55
        },
      };
      let %x57 = let %x58: T = %add(%x40, %x49);
      let %x59 = let %x60: GradCell[T] = Raw(%x58);
      %x60;
      %x59;
      %x57;
      %x48;
      %x39
    },
  };
  %x38;
  %x37;
  %x35
}

def @main() -> ((Tensor[(6, 9, 12), float32],), ()) {
  let %x61 = let %x62 = meta[relay.Constant][0] /* ty=Tensor[(6, 9, 12), float32] */;
  let %x63: fn () -> ((GradCell[Tensor[(6, 9, 12), float32]],), ()) = fn () -> ((GradCell[Tensor[(6, 9, 12), float32]],), ()) {
    let %x64 = let %x65: GradCell[Tensor[(6, 9, 12), float32]] = Raw(%x62);
    let %x66 = let %x67: fn () -> Tensor[(6, 9, 12), float32] = fn () -> Tensor[(6, 9, 12), float32] {
      let %x68 = meta[relay.Constant][1] /* ty=Tensor[(6, 9, 12), float32] */;
      %x68
    };
    let %x69 = let %x70: GradCell[Tensor[(6, 9, 12), float32]] = One(%x67);
    let %x71 = let %x72: (GradCell[Tensor[(6, 9, 12), float32]],) = (%x65,);
    let %x73 = let %x74: fn () -> Tensor[(6, 9, 12), float32] = fn () -> Tensor[(6, 9, 12), float32] {
      let %x75 = meta[relay.Constant][2] /* ty=Tensor[(6, 9, 12), float32] */;
      %x75
    };
    let %x76 = let %x77: GradCell[Tensor[(6, 9, 12), float32]] = Zero(%x74);
    let %x78 = let %x79: (GradCell[Tensor[(6, 9, 12), float32]],) = (%x77,);
    let %x80 = let %x81: fn (Tensor[(6, 9, 12), float32], Tensor[(6, 9, 12), float32]) -> Tensor[(6, 9, 12), float32] = fn (%lhs: Tensor[(6, 9, 12), float32], %rhs: Tensor[(6, 9, 12), float32]) -> Tensor[(6, 9, 12), float32] {
      let %x82 = let %x83: Tensor[(6, 9, 12), float32] = add(%lhs, %rhs);
      %x83;
      %x82
    };
    let %x84 = let %x85: fn () -> Tensor[(6, 9, 12), float32] = fn () -> Tensor[(6, 9, 12), float32] {
      let %x86 = meta[relay.Constant][3] /* ty=Tensor[(6, 9, 12), float32] */;
      %x86
    };
    let %x87 = let %x88: GradCell[Tensor[(6, 9, 12), float32]] = One(%x85);
    let %x89 = let %x90: (GradCell[Tensor[(6, 9, 12), float32]],) = (%x88,);
    let %x91 = let %x92: (GradCell[Tensor[(6, 9, 12), float32]], GradCell[Tensor[(6, 9, 12), float32]]) = (%x70, %x88);
    let %x93 = let %x94 = meta[relay.Constant][4] /* ty=Tensor[(6, 9, 12), float32] */;
    let %x95: GradCell[Tensor[(6, 9, 12), float32]] = Raw(%x94);
    let %x96 = let %x97: () = ();
    let %x98 = let %x99: ((GradCell[Tensor[(6, 9, 12), float32]],), ()) = (%x72, %x97);
    %x99;
    %x98;
    %x96;
    %x93;
    %x91;
    %x89;
    %x87;
    %x84;
    %x80;
    %x78;
    %x76;
    %x73;
    %x71;
    %x69;
    %x66;
    %x64
  };
  let %x100 = let %x101: GradCell[Tensor[(6, 9, 12), float32]] = Raw(%x62);
  let %x102 = let %x103: fn () -> Tensor[(6, 9, 12), float32] = fn () -> Tensor[(6, 9, 12), float32] {
    let %x104 = meta[relay.Constant][5] /* ty=Tensor[(6, 9, 12), float32] */;
    %x104
  };
  let %x105 = let %x106: GradCell[Tensor[(6, 9, 12), float32]] = One(%x103);
  let %x107 = let %x108: (GradCell[Tensor[(6, 9, 12), float32]],) = (%x101,);
  let %x109 = let %x110: fn () -> Tensor[(6, 9, 12), float32] = fn () -> Tensor[(6, 9, 12), float32] {
    let %x111 = meta[relay.Constant][6] /* ty=Tensor[(6, 9, 12), float32] */;
    %x111
  };
  let %x112 = let %x113: GradCell[Tensor[(6, 9, 12), float32]] = Zero(%x110);
  let %x114 = let %x115: (GradCell[Tensor[(6, 9, 12), float32]],) = (%x113,);
  let %x116 = let %x117: fn (Tensor[(6, 9, 12), float32], Tensor[(6, 9, 12), float32]) -> Tensor[(6, 9, 12), float32] = fn (%lhs1: Tensor[(6, 9, 12), float32], %rhs1: Tensor[(6, 9, 12), float32]) -> Tensor[(6, 9, 12), float32] {
    let %x118 = let %x119: Tensor[(6, 9, 12), float32] = add(%lhs1, %rhs1);
    %x119;
    %x118
  };
  let %x120 = let %x121: fn () -> Tensor[(6, 9, 12), float32] = fn () -> Tensor[(6, 9, 12), float32] {
    let %x122 = meta[relay.Constant][7] /* ty=Tensor[(6, 9, 12), float32] */;
    %x122
  };
  let %x123 = let %x124: GradCell[Tensor[(6, 9, 12), float32]] = One(%x121);
  let %x125 = let %x126: (GradCell[Tensor[(6, 9, 12), float32]],) = (%x124,);
  let %x127 = let %x128: (GradCell[Tensor[(6, 9, 12), float32]], GradCell[Tensor[(6, 9, 12), float32]]) = (%x106, %x124);
  let %x129 = let %x130 = meta[relay.Constant][8] /* ty=Tensor[(6, 9, 12), float32] */;
  let %x131: GradCell[Tensor[(6, 9, 12), float32]] = Raw(%x130);
  let %x132 = let %x133: () = ();
  let %x134 = let %x135: ((GradCell[Tensor[(6, 9, 12), float32]],), ()) = (%x108, %x133);
  let %x136 = let %x137: (Tensor[(6, 9, 12), float32],) = (%x62,);
  let %x138 = let %x139: () = ();
  let %x140 = let %x141: ((Tensor[(6, 9, 12), float32],), ()) = (%x137, %x139);
  %x141;
  %x140;
  %x138;
  %x136;
  %x134;
  %x132;
  %x129;
  %x127;
  %x125;
  %x123;
  %x120;
  %x116;
  %x114;
  %x112;
  %x109;
  %x107;
  %x105;
  %x102;
  %x100;
  %x61
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen597/build/output.py", line 4637, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  35: TVMFuncCall
  34: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  33: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  32: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::relay::Function const&, tvm::runtime::String)
  31: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  30: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::relay::Function, tvm::runtime::String)
  29: tvm::IRModule::FromExpr(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&)
  28: tvm::IRModule::FromExprInContext(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >)
  27: tvm::IRModuleNode::Add(tvm::GlobalVar const&, tvm::BaseFunc const&, bool)
  26: tvm::WarnIfMalformed(tvm::IRModule const&, tvm::relay::Function)
  25: tvm::relay::FreeTypeVars(tvm::RelayExpr const&, tvm::IRModule const&)
  24: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  23: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  22: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  21: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  20: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
  18: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  16: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
  15: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
  14: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  12: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  11: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  10: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
  9: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
  8: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  7: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  6: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
  5: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
  4: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  2: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::ConstructorNode const*)
  1: tvm::IRModuleNode::LookupTypeDef(tvm::GlobalTypeVar const&) const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/src/ir/module.cc", line 279
TVMError: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------
  Check failed: (it != type_definitions.end()) is false: There is no definition of GradCell
