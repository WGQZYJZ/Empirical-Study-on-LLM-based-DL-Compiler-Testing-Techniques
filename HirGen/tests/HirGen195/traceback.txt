==========mod==========
#[version = "0.0.5"]
def @func_7023(%var_6984: Tensor[(432), float32]) -> (Tensor[(2, 5, 5), float64], Tensor[(432), float32], Tensor[(2, 3, 11), int32], Tensor[(1920), bool], Tensor[(2, 5, 5), float64]) {
  %0 = cast(%var_6984, dtype="float32") /* ty=Tensor[(432), float32] */;
  %1 = reshape(%0, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
  %2 = @func_1412(%1) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(2, 5, 5), float64]) */;
  %3 = @func_5469() /* ty=(Tensor[(165), int16], Tensor[(2, 3, 11), int32], Tensor[(66), int32], Tensor[(2, 5, 5), float64]) */;
  %4 = @func_5495() /* ty=(Tensor[(2, 5, 5), bool], Tensor[(1920), float32]) */;
  %5 = %4.1;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(1920), float32] */, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(1), int32] */;
  %8 = cast(%5, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?), bool] */;
  %10 = @func_5357() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %11 = %2.1;
  %12 = %3.1;
  %13 = greater_equal(%8, %9) /* ty=Tensor[(1920), bool] */;
  %14 = %10.0;
  (%11, %var_6984, %12, %13, %14)
}

def @func_6019() -> (Tensor[(7, 195), uint16],) {
  %15 = @func_2901() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(7, 195), uint16]) */;
  %16 = %15.2;
  (%16,)
}

def @func_3224(%var_3206: Tensor[(165), int16]) -> (Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(165), float32]) {
  %17 = @func_1328() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %18 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %19 = %18.4;
  %20 = cast(%var_3206, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(1), int32] */;
  %22 = cast(%19, dtype="uint8") /* ty=Tensor[(165), uint8] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %24 = left_shift(%22, %23) /* ty=Tensor[(165), uint8] */;
  %25 = cast(%24, dtype="float64") /* ty=Tensor[(165), float64] */;
  %26 = sin(%25) /* ty=Tensor[(165), float64] */;
  %27 = cast(%26, dtype="float32") /* ty=Tensor[(165), float32] */;
  %28 = %17.0;
  %29 = @func_1674() /* ty=Tensor[(2, 5, 5), float64] */;
  %30 = acos(%27) /* ty=Tensor[(165), float32] */;
  (%28, %29, %30)
}

def @func_2513(%var_2472: Tensor[(2, 5, 5), float64]) -> Tensor[(2, 5, 5), float32] {
  %31 = @func_1930() /* ty=Tensor[(2, 5, 5), float64] */;
  %32 = cast(%var_2472, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%31, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%34, %35) /* ty=Tensor[(2, 5, 5), float32] */
}

def @func_3819() -> Tensor[(2, 5, 5), float64] {
  %36 = @func_3534() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %36.3
}

def @func_2338(%var_2263: Tensor[(2, 5, 5), float64], %var_2268: Tensor[(2, 5, 5), float64], %var_2325: Tensor[(1920), float32], %var_2326: Tensor[(11, 15), int16], %var_2332: Tensor[(4), int8]) -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(1365), uint16], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(11, 15), int16], Tensor[(2, 5, 5), float64], Tensor[(7, 14, 4), int8], Tensor[(4), int8], Tensor[(392), int8], Tensor[(2, 5, 5), float32]) {
  %37 = @func_1748() /* ty=Tensor[(2, 5, 5), float64] */;
  %38 = cast(%var_2263, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%37, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %42 = cast(%var_2268, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
  %43 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%37, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %46 = @func_1742() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %47 = cast(meta[relay.Constant][1] /* ty=Tensor[(1365), uint16] */, dtype="uint16") /* ty=Tensor[(1365), uint16] */;
  %48 = reshape(%47, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), uint16] */;
  %49 = cast(meta[relay.Constant][1] /* ty=Tensor[(1365), uint16] */, dtype="uint16") /* ty=Tensor[(1365), uint16] */;
  %50 = reshape(%49, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), uint16] */;
  %51 = cast(%var_2325, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %52 = cast(%var_2326, dtype="int16") /* ty=Tensor[(11, 15), int16] */;
  %53 = reshape(%51, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float32] */;
  %54 = reshape(%52, newshape=[165]) /* ty=Tensor[(165), int16] */;
  %55 = @func_666(%53, %54) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(10, 12, 16), int8]) */;
  %56 = cast(%var_2332, dtype="int8") /* ty=Tensor[(4), int8] */;
  %57 = cast(meta[relay.Constant][2] /* ty=Tensor[(392), int8] */, dtype="int8") /* ty=Tensor[(392), int8] */;
  %58 = reshape(%56, newshape=[1, 1, 4]) /* ty=Tensor[(1, 1, 4), int8] */;
  %59 = reshape(%57, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), int8] */;
  %60 = @func_1566(%58, %59) /* ty=(Tensor[(7, 14, 4), int8],) */;
  %61 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %62 = floor_mod(%40, %41) /* ty=Tensor[(2, 5, 5), float64] */;
  %63 = mod(%44, %45) /* ty=Tensor[(2, 5, 5), float32] */;
  %64 = %46.0;
  %65 = @func_1688(%48) /* ty=Tensor[(13, 15, 7), bool] */;
  %66 = @func_1748() /* ty=Tensor[(2, 5, 5), float64] */;
  %67 = @func_1499() /* ty=Tensor[(2, 5, 5), float64] */;
  %68 = @func_1688(%50) /* ty=Tensor[(13, 15, 7), bool] */;
  %69 = %55.1;
  %70 = @func_1674() /* ty=Tensor[(2, 5, 5), float64] */;
  %71 = %60.0;
  %72 = %61.0;
  (%62, %63, %64, %65, meta[relay.Constant][1] /* ty=Tensor[(1365), uint16] */, %66, %67, %68, %69, %var_2325, %var_2326, %70, %71, %var_2332, meta[relay.Constant][2] /* ty=Tensor[(392), int8] */, %72)
}

def @main(%var_7159: Tensor[(3, 11, 7), int64], %var_7160: Tensor[(3, 11, 7), int64]) -> Tensor[(3, 11, 7), int64] {
  %73 = cast(%var_7160, dtype="int64") /* ty=Tensor[(3, 11, 7), int64] */;
  %74 = shape_of(%var_7159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%var_7159, dtype="int64") /* ty=Tensor[(3, 11, 7), int64] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  minimum(%75, %76) /* ty=Tensor[(3, 11, 7), int64] */
}

def @func_5039() -> (Tensor[(2, 5, 5), float64],) {
  %77 = @func_1732() /* ty=Tensor[(2, 5, 5), float64] */;
  (%77,)
}

def @func_4125() -> (Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), float32], Tensor[(432), float32], Tensor[(4), int8], Tensor[(392), int8]) {
  %78 = cast(meta[relay.Constant][3] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %79 = cast(meta[relay.Constant][4] /* ty=Tensor[(4), int8] */, dtype="int8") /* ty=Tensor[(4), int8] */;
  %80 = cast(meta[relay.Constant][5] /* ty=Tensor[(392), int8] */, dtype="int8") /* ty=Tensor[(392), int8] */;
  %81 = reshape(%78, newshape=[216, 2]) /* ty=Tensor[(216, 2), float32] */;
  %82 = reshape(%79, newshape=[4]) /* ty=Tensor[(4), int8] */;
  %83 = reshape(%80, newshape=[392]) /* ty=Tensor[(392), int8] */;
  %84 = @func_3068(%81, %82, %83) /* ty=(Tensor[(2, 5, 5), float32], Tensor[(9, 16, 3), float32], Tensor[(4), int8], Tensor[(392), int8], Tensor[(216, 2), float64], Tensor[(7, 14, 4), float64]) */;
  %85 = @func_2969() /* ty=Tensor[(2, 5, 5), float64] */;
  %86 = %84.1;
  (%85, %86, meta[relay.Constant][3] /* ty=Tensor[(432), float32] */, meta[relay.Constant][4] /* ty=Tensor[(4), int8] */, meta[relay.Constant][5] /* ty=Tensor[(392), int8] */)
}

def @func_4799() -> (Tensor[(2, 5, 5), float64],) {
  %87 = @func_2901() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(7, 195), uint16]) */;
  %88 = %87.0;
  (%88,)
}

def @func_1688(%var_1680: Tensor[(13, 15, 7), uint16]) -> Tensor[(13, 15, 7), bool] {
  %89 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 1, 7), uint16] */, dtype="bool") /* ty=Tensor[(13, 1, 7), bool] */;
  %90 = cast(%var_1680, dtype="bool") /* ty=Tensor[(13, 15, 7), bool] */;
  greater(%89, %90) /* ty=Tensor[(13, 15, 7), bool] */
}

def @func_4752() -> Tensor[(2, 5, 5), bool] {
  @func_2989() /* ty=Tensor[(2, 5, 5), bool] */
}

def @func_4310(%var_4296: Tensor[(2, 5, 5), float64]) -> Tensor[(2, 5, 5), bool] {
  %91 = @func_1748() /* ty=Tensor[(2, 5, 5), float64] */;
  %92 = cast(%var_4296, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
  %93 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(%91, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%94, %95) /* ty=Tensor[(2, 5, 5), bool] */
}

def @func_1021(%var_1015: Tensor[(6, 13, 14), float32]) -> Tensor[(6, 13, 14), float32] {
  %96 = cast(%var_1015, dtype="float32") /* ty=Tensor[(6, 13, 14), float32] */;
  log2(%96) /* ty=Tensor[(6, 13, 14), float32] */
}

def @func_2156(%var_2111: Tensor[(2, 5, 5), float64]) -> (Tensor[(2, 5, 5), uint8], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) {
  %97 = @func_1854() /* ty=Tensor[(2, 5, 5), float64] */;
  %98 = cast(%var_2111, dtype="uint8") /* ty=Tensor[(2, 5, 5), uint8] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="uint8") /* ty=Tensor[(2, 5, 5), uint8] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %102 = cast(%var_2111, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
  %103 = cast(meta[relay.Constant][7] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %104 = reshape(%103, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %105 = @func_1639(%104) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) */;
  %106 = bitwise_or(%100, %101) /* ty=Tensor[(2, 5, 5), uint8] */;
  %107 = tan(%102) /* ty=Tensor[(2, 5, 5), float32] */;
  %108 = @func_1499() /* ty=Tensor[(2, 5, 5), float64] */;
  %109 = %105.3;
  (%106, %107, %108, %109, meta[relay.Constant][7] /* ty=Tensor[(432), float32] */)
}

def @func_1370() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) {
  %110 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %111 = @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %112 = %110.2;
  %113 = %111.0;
  (%112, %113)
}

def @func_5469() -> (Tensor[(165), int16], Tensor[(2, 3, 11), int32], Tensor[(66), int32], Tensor[(2, 5, 5), float64]) {
  %114 = @func_2554() /* ty=(Tensor[(165), int16],) */;
  %115 = cast(meta[relay.Constant][8] /* ty=Tensor[(66), int32] */, dtype="int32") /* ty=Tensor[(66), int32] */;
  %116 = cast(meta[relay.Constant][8] /* ty=Tensor[(66), int32] */, dtype="int32") /* ty=Tensor[(66), int32] */;
  %117 = %114.0;
  %118 = cast(%117, dtype="int16") /* ty=Tensor[(165), int16] */;
  %119 = reshape(%115, newshape=[2, 3, 11]) /* ty=Tensor[(2, 3, 11), int32] */;
  %120 = reshape(%116, newshape=[2, 3, 11]) /* ty=Tensor[(2, 3, 11), int32] */;
  %121 = reshape(%118, newshape=[33, 5]) /* ty=Tensor[(33, 5), int16] */;
  %122 = @func_4686(%119, %120, %121) /* ty=(Tensor[(2, 3, 11), int32], Tensor[(1920), float32], Tensor[(33, 5), int16], float64, Tensor[(110, 2), float32]) */;
  %123 = %122.0;
  %124 = @func_1748() /* ty=Tensor[(2, 5, 5), float64] */;
  (%117, %123, meta[relay.Constant][8] /* ty=Tensor[(66), int32] */, %124)
}

def @func_2969() -> Tensor[(2, 5, 5), float64] {
  %125 = @func_1882() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %125.0
}

def @func_6606() -> (Tensor[(2, 5, 5), bool], Tensor[(3, 12, 2), float32], Tensor[(6, 12), float32], Tensor[(432), float32], Tensor[(2, 5, 5), bool]) {
  %126 = @func_4531() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %127 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 12), float32] */;
  %128 = reshape(%127, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float32] */;
  %129 = @func_6304(%128) /* ty=(Tensor[(3, 12, 2), float32], Tensor[(3, 12, 2), float64], Tensor[(3, 12, 2), bool]) */;
  %130 = cast(meta[relay.Constant][10] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %131 = reshape(%130, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %132 = @func_1639(%131) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) */;
  %133 = %132.1;
  %134 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 5, 5), bool] */, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
  %135 = shape_of(%133, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%133, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %138 = %126.0;
  %139 = %129.0;
  %140 = logical_or(%136, %137) /* ty=Tensor[(2, 5, 5), bool] */;
  (%138, %139, meta[relay.Constant][9] /* ty=Tensor[(6, 12), float32] */, meta[relay.Constant][10] /* ty=Tensor[(432), float32] */, %140)
}

def @func_2989() -> Tensor[(2, 5, 5), bool] {
  %141 = @func_1328() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %141.0
}

def @func_1499() -> Tensor[(2, 5, 5), float64] {
  %142 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %142.0
}

def @func_1266() -> (Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(165), int16], Tensor[(2, 5, 5), float64], Tensor[(225), uint8]) {
  %143 = cast(meta[relay.Constant][12] /* ty=Tensor[(1920), float32] */, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %144 = cast(meta[relay.Constant][13] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
  %145 = reshape(%143, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float32] */;
  %146 = reshape(%144, newshape=[165]) /* ty=Tensor[(165), int16] */;
  %147 = @func_666(%145, %146) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(10, 12, 16), int8]) */;
  %148 = cast(meta[relay.Constant][14] /* ty=Tensor[(225), uint8] */, dtype="uint8") /* ty=Tensor[(225), uint8] */;
  %149 = reshape(%148, newshape=[15, 15, 1]) /* ty=Tensor[(15, 15, 1), uint8] */;
  %150 = @func_687(%149) /* ty=(Tensor[(15, 15, 8), bool], Tensor[(2, 5, 5), float64]) */;
  %151 = @func_1012() /* ty=Tensor[(2, 5, 5), float64] */;
  %152 = %147.1;
  %153 = %150.1;
  (%151, %152, meta[relay.Constant][12] /* ty=Tensor[(1920), float32] */, meta[relay.Constant][13] /* ty=Tensor[(165), int16] */, %153, meta[relay.Constant][14] /* ty=Tensor[(225), uint8] */)
}

def @func_6375() -> (Tensor[(7, ?, 7), uint64], Tensor[(7, 1, 7), float64]) {
  %154 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 1, 7), float32] */, dtype="float32") /* ty=Tensor[(7, 1, 7), float32] */;
  %155 = sigmoid(%154) /* ty=Tensor[(7, 1, 7), float32] */;
  %156 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 1, 7), float32] */, dtype="uint64") /* ty=Tensor[(7, 1, 7), uint64] */;
  %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%155, dtype="uint64") /* ty=Tensor[(7, 1, 7), uint64] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %160 = cast(%155, dtype="float64") /* ty=Tensor[(7, 1, 7), float64] */;
  %161 = bitwise_or(%158, %159) /* ty=Tensor[(7, ?, 7), uint64] */;
  %162 = tan(%160) /* ty=Tensor[(7, 1, 7), float64] */;
  (%161, %162)
}

def @func_914(%var_839: float64, %var_840: Tensor[(4, 5, 11), float64]) -> (Tensor[(4, 5, 11), float64], Tensor[(165), int16], Tensor[(2, 5, 5), float64]) {
  %163 = cast(%var_839, dtype="float64") /* ty=float64 */;
  %164 = cast(%var_840, dtype="float64") /* ty=Tensor[(4, 5, 11), float64] */;
  %165 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %166 = %165.4;
  %167 = cast(%var_839, dtype="int16") /* ty=int16 */;
  %168 = cast(%166, dtype="int16") /* ty=Tensor[(165), int16] */;
  %169 = multiply(%163, %164) /* ty=Tensor[(4, 5, 11), float64] */;
  %170 = maximum(%167, %168) /* ty=Tensor[(165), int16] */;
  %171 = @func_619() /* ty=Tensor[(2, 5, 5), float64] */;
  (%169, %170, %171)
}

def @func_7135(%var_7098: Tensor[(12, 11, 5), uint16]) -> (Tensor[(12, 11, 5), uint16], Tensor[(2, 5, 5), bool], Tensor[(392), int8]) {
  %172 = cast(%var_7098, dtype="uint16") /* ty=Tensor[(12, 11, 5), uint16] */;
  %173 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(12, 11, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 11, 5), uint16] */, dtype="uint16") /* ty=Tensor[(12, 11, 5), uint16] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %176 = @func_6976() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(2, 5, 5), bool]) */;
  %177 = @func_4125() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), float32], Tensor[(432), float32], Tensor[(4), int8], Tensor[(392), int8]) */;
  %178 = bitwise_or(%174, %175) /* ty=Tensor[(12, 11, 5), uint16] */;
  %179 = %176.2;
  %180 = %177.4;
  (%178, %179, %180)
}

def @func_5718(%var_5703: Tensor[(392), int8]) -> (Tensor[(2, 5, 5), float64], Tensor[(392), uint8], Tensor[(2, 5, 5), float64]) {
  %181 = @func_2182() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %182 = @func_4125() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), float32], Tensor[(432), float32], Tensor[(4), int8], Tensor[(392), int8]) */;
  %183 = %182.4;
  %184 = cast(%var_5703, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(1), int32] */;
  %186 = cast(%183, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %188 = @func_1814() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) */;
  %189 = %181.3;
  %190 = multiply(%186, %187) /* ty=Tensor[(392), uint8] */;
  %191 = %188.1;
  (%189, %190, %191)
}

def @func_3449() -> (Tensor[(2, 5, 5), float64],) {
  %192 = @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %193 = %192.0;
  (%193,)
}

def @func_5357() -> (Tensor[(2, 5, 5), float64],) {
  %194 = @func_1748() /* ty=Tensor[(2, 5, 5), float64] */;
  (%194,)
}

def @func_6046() -> (Tensor[(2, 5, 5), float64],) {
  %195 = @func_2633() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %196 = %195.0;
  (%196,)
}

def @func_4686(%var_4643: Tensor[(2, 3, 11), int32], %var_4644: Tensor[(2, 3, 11), int32], %var_4650: Tensor[(33, 5), int16]) -> (Tensor[(2, 3, 11), int32], Tensor[(1920), float32], Tensor[(33, 5), int16], float64, Tensor[(110, 2), float32]) {
  %197 = cast(%var_4644, dtype="int32") /* ty=Tensor[(2, 3, 11), int32] */;
  %198 = shape_of(%var_4643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%var_4643, dtype="int32") /* ty=Tensor[(2, 3, 11), int32] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %201 = cast(%var_4650, dtype="int16") /* ty=Tensor[(33, 5), int16] */;
  %202 = cast(%var_4650, dtype="bool") /* ty=Tensor[(33, 5), bool] */;
  %203 = cast(2.20416f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %204 = cast(meta[relay.Constant][17] /* ty=Tensor[(110, 2), float64] */, dtype="float64") /* ty=Tensor[(110, 2), float64] */;
  %205 = reshape(%201, newshape=[165]) /* ty=Tensor[(165), int16] */;
  %206 = reshape(%202, newshape=[165]) /* ty=Tensor[(165), bool] */;
  %207 = reshape(%203, newshape=[]) /* ty=float64 */;
  %208 = reshape(%204, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %209 = @func_4006(%205, %206, %207, %208) /* ty=(Tensor[(165), int16], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(165), bool], Tensor[(165), float64], Tensor[(165), int16], Tensor[(2, 5, 5), uint16], Tensor[(165), int16], float64, Tensor[(220), float64]) */;
  %210 = cast(meta[relay.Constant][17] /* ty=Tensor[(110, 2), float64] */, dtype="float32") /* ty=Tensor[(110, 2), float32] */;
  %211 = multiply(%199, %200) /* ty=Tensor[(2, 3, 11), int32] */;
  %212 = %209.1;
  %213 = exp(%210) /* ty=Tensor[(110, 2), float32] */;
  (%211, %212, %var_4650, 2.20416f64 /* ty=float64 */, %213)
}

def @func_1814() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) {
  %214 = cast(meta[relay.Constant][18] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %215 = reshape(%214, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %216 = @func_1639(%215) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) */;
  %217 = @func_1732() /* ty=Tensor[(2, 5, 5), float64] */;
  %218 = @func_1499() /* ty=Tensor[(2, 5, 5), float64] */;
  %219 = %216.3;
  (%217, %218, %219, meta[relay.Constant][18] /* ty=Tensor[(432), float32] */)
}

def @func_4873(%var_4863: bool, %var_4864: Tensor[(12, 16, 1), bool]) -> (Tensor[(12, 16, 1), int32],) {
  %220 = cast(%var_4863, dtype="bool") /* ty=bool */;
  %221 = cast(%var_4864, dtype="bool") /* ty=Tensor[(12, 16, 1), bool] */;
  %222 = logical_or(%220, %221) /* ty=Tensor[(12, 16, 1), bool] */;
  %223 = cast(%222, dtype="float64") /* ty=Tensor[(12, 16, 1), float64] */;
  %224 = log(%223) /* ty=Tensor[(12, 16, 1), float64] */;
  %225 = cast(%224, dtype="int32") /* ty=Tensor[(12, 16, 1), int32] */;
  %226 = cast(%var_4863, dtype="int32") /* ty=int32 */;
  %227 = right_shift(%225, %226) /* ty=Tensor[(12, 16, 1), int32] */;
  (%227,)
}

def @func_5587() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) {
  %228 = @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %229 = @func_4125() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), float32], Tensor[(432), float32], Tensor[(4), int8], Tensor[(392), int8]) */;
  %230 = %228.0;
  %231 = @func_619() /* ty=Tensor[(2, 5, 5), float64] */;
  %232 = %229.0;
  (%230, %231, %232)
}

def @func_1674() -> Tensor[(2, 5, 5), float64] {
  %233 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %233.1
}

def @func_2805() -> Tensor[(2, 5, 5), float64] {
  %234 = @func_1012() /* ty=Tensor[(2, 5, 5), float64] */;
  %235 = cast(%234, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  log2(%235) /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_6480(%var_6413: Tensor[(11, 16, 13), float64]) -> (Tensor[(11, 16, 13), float32], Tensor[(2, 5, 5), float64]) {
  %236 = cast(%var_6413, dtype="float64") /* ty=Tensor[(11, 16, 13), float64] */;
  %237 = sqrt(%236) /* ty=Tensor[(11, 16, 13), float64] */;
  %238 = cast(%var_6413, dtype="float32") /* ty=Tensor[(11, 16, 13), float32] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%237, dtype="float32") /* ty=Tensor[(11, 16, 13), float32] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %242 = @func_2633() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %243 = floor_divide(%240, %241) /* ty=Tensor[(11, 16, 13), float32] */;
  %244 = %242.0;
  (%243, %244)
}

def @func_3534() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) {
  %245 = @func_800() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(11, 15, ?), bool]) */;
  %246 = @func_3449() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %247 = @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %248 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %249 = %245.0;
  %250 = %246.0;
  %251 = %247.0;
  %252 = %248.0;
  (%249, %250, %251, %252)
}

def @func_1882() -> (Tensor[(2, 5, 5), float64],) {
  %253 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %254 = %253.1;
  (%254,)
}

def @func_4637() -> Tensor[(1920), float32] {
  %255 = @func_1266() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(165), int16], Tensor[(2, 5, 5), float64], Tensor[(225), uint8]) */;
  %255.2
}

def @func_1742() -> (Tensor[(2, 5, 5), float64],) {
  %256 = @func_1012() /* ty=Tensor[(2, 5, 5), float64] */;
  (%256,)
}

def @func_6304(%var_6271: Tensor[(3, 12, 2), float32]) -> (Tensor[(3, 12, 2), float32], Tensor[(3, 12, 2), float64], Tensor[(3, 12, 2), bool]) {
  %257 = cast(%var_6271, dtype="float32") /* ty=Tensor[(3, 12, 2), float32] */;
  %258 = cast(%var_6271, dtype="float32") /* ty=Tensor[(3, 12, 2), float32] */;
  %259 = exp(%258) /* ty=Tensor[(3, 12, 2), float32] */;
  %260 = cast(%259, dtype="float64") /* ty=Tensor[(3, 12, 2), float64] */;
  %261 = cast(%var_6271, dtype="bool") /* ty=Tensor[(3, 12, 2), bool] */;
  %262 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%259, dtype="bool") /* ty=Tensor[(3, 12, 2), bool] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %265 = rsqrt(%257) /* ty=Tensor[(3, 12, 2), float32] */;
  %266 = cos(%260) /* ty=Tensor[(3, 12, 2), float64] */;
  %267 = less(%263, %264) /* ty=Tensor[(3, 12, 2), bool] */;
  (%265, %266, %267)
}

def @func_4531() -> (Tensor[(2, 5, 5), bool],) {
  %268 = @func_2989() /* ty=Tensor[(2, 5, 5), bool] */;
  (%268,)
}

def @func_196(%var_191: Tensor[(11, 15, 1), int16], %var_192: Tensor[(11, 15, 1), int16]) -> (Tensor[(11, 15, ?), bool],) {
  %269 = cast(%var_192, dtype="bool") /* ty=Tensor[(11, 15, 1), bool] */;
  %270 = shape_of(%var_191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%var_191, dtype="bool") /* ty=Tensor[(11, 15, 1), bool] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %273 = greater_equal(%271, %272) /* ty=Tensor[(11, 15, ?), bool] */;
  (%273,)
}

def @func_2554() -> (Tensor[(165), int16],) {
  %274 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %275 = %274.4;
  (%275,)
}

def @func_5316(%var_5288: Tensor[(9, 16, 3), uint64], %var_5303: Tensor[(1350), int16]) -> (Tensor[(9, 16, 3), int8], Tensor[(15, 6, 15), float64], Tensor[(9), int16], Tensor[(1350), int16], Tensor[(50), float64]) {
  %276 = @func_4029() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64]) */;
  %277 = %276.1;
  %278 = cast(%var_5288, dtype="int8") /* ty=Tensor[(9, 16, 3), int8] */;
  %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%277, dtype="int8") /* ty=Tensor[(9, 16, 3), int8] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %282 = cast(meta[relay.Constant][19] /* ty=Tensor[(9), int16] */, dtype="int16") /* ty=Tensor[(9), int16] */;
  %283 = cast(%var_5303, dtype="int16") /* ty=Tensor[(1350), int16] */;
  %284 = cast(meta[relay.Constant][20] /* ty=Tensor[(50), float64] */, dtype="float64") /* ty=Tensor[(50), float64] */;
  %285 = reshape(%282, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), int16] */;
  %286 = reshape(%283, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int16] */;
  %287 = reshape(%284, newshape=[10, 5]) /* ty=Tensor[(10, 5), float64] */;
  %288 = @func_3910(%285, %286, %287) /* ty=(Tensor[(1, 3, 3), int16], Tensor[(15, 6, 15), int8], Tensor[(2, 5, 5), float32], Tensor[(10, 5), float64], Tensor[(15, 6, 15), float64]) */;
  %289 = left_shift(%280, %281) /* ty=Tensor[(9, 16, 3), int8] */;
  %290 = %288.4;
  (%289, %290, meta[relay.Constant][19] /* ty=Tensor[(9), int16] */, %var_5303, meta[relay.Constant][20] /* ty=Tensor[(50), float64] */)
}

def @func_6765(%var_6740: Tensor[(392), int8]) -> (Tensor[(2, 5, 5), bool], Tensor[(392), uint8], Tensor[(392), int8], Tensor[(2, 5, 5), float64], Tensor[(1920), float32]) {
  %291 = cast(%var_6740, dtype="int8") /* ty=Tensor[(392), int8] */;
  %292 = reshape(%291, newshape=[392]) /* ty=Tensor[(392), int8] */;
  %293 = @func_5718(%292) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(392), uint8], Tensor[(2, 5, 5), float64]) */;
  %294 = cast(meta[relay.Constant][21] /* ty=Tensor[(1920), float32] */, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %295 = reshape(%294, newshape=[1920]) /* ty=Tensor[(1920), float32] */;
  %296 = @func_3284(%295) /* ty=(Tensor[(1920), float64], Tensor[(1920), int16], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(220), bool]) */;
  %297 = @func_4752() /* ty=Tensor[(2, 5, 5), bool] */;
  %298 = %293.1;
  %299 = %296.3;
  (%297, %298, %var_6740, %299, meta[relay.Constant][21] /* ty=Tensor[(1920), float32] */)
}

def @func_6878(%var_6811: Tensor[(4, 1), int8], %var_6812: Tensor[(392), int8]) -> (Tensor[(2, 5, 5), uint8], Tensor[(2, 5, 5), float64], Tensor[(7, 14, 4), int8], Tensor[(4, 1), int8], Tensor[(392), int8]) {
  %300 = @func_6411() /* ty=(Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), uint8], Tensor[(336), float64]) */;
  %301 = @func_4246() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32]) */;
  %302 = cast(%var_6811, dtype="int8") /* ty=Tensor[(4, 1), int8] */;
  %303 = cast(%var_6812, dtype="int8") /* ty=Tensor[(392), int8] */;
  %304 = reshape(%302, newshape=[1, 1, 4]) /* ty=Tensor[(1, 1, 4), int8] */;
  %305 = reshape(%303, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), int8] */;
  %306 = @func_1566(%304, %305) /* ty=(Tensor[(7, 14, 4), int8],) */;
  %307 = %300.1;
  %308 = %301.0;
  %309 = %306.0;
  (%307, %308, %309, %var_6811, %var_6812)
}

def @func_4496() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) {
  %310 = @func_3365() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %311 = @func_4182() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %312 = %310.0;
  %313 = %311.0;
  (%312, %313)
}

def @func_2662() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(432), float32]) {
  %314 = @func_2633() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %315 = %314.0;
  %316 = cast(%315, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  %317 = reshape(%316, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
  %318 = @func_2156(%317) /* ty=(Tensor[(2, 5, 5), uint8], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) */;
  %319 = @func_1930() /* ty=Tensor[(2, 5, 5), float64] */;
  %320 = %318.4;
  (%315, %319, %320)
}

def @func_1172() -> (Tensor[(2, 5, 5), float64],) {
  %321 = @func_619() /* ty=Tensor[(2, 5, 5), float64] */;
  (%321,)
}

def @func_2223(%var_2207: Tensor[(16, 12, 15), float64]) -> (Tensor[(16, 12, 15), float64], Tensor[(16, 12, 15), int8]) {
  %322 = cast(%var_2207, dtype="float64") /* ty=Tensor[(16, 12, 15), float64] */;
  %323 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(16, 12, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 12, 15), float64] */, dtype="float64") /* ty=Tensor[(16, 12, 15), float64] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %326 = cast(%var_2207, dtype="int8") /* ty=Tensor[(16, 12, 15), int8] */;
  %327 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(16, 12, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 12, 15), float64] */, dtype="int8") /* ty=Tensor[(16, 12, 15), int8] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %330 = power(%324, %325) /* ty=Tensor[(16, 12, 15), float64] */;
  %331 = bitwise_and(%328, %329) /* ty=Tensor[(16, 12, 15), int8] */;
  (%330, %331)
}

def @func_1639(%var_1579: Tensor[(432), float32]) -> (Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) {
  %332 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %333 = @func_1328() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %334 = @func_800() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(11, 15, ?), bool]) */;
  %335 = cast(%var_1579, dtype="float32") /* ty=Tensor[(432), float32] */;
  %336 = reshape(%335, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
  %337 = @func_1412(%336) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(2, 5, 5), float64]) */;
  %338 = %337.0;
  %339 = cast(%var_1579, dtype="bool") /* ty=Tensor[(432), bool] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %343 = logical_and(%341, %342) /* ty=Tensor[(9, 16, 3), bool] */;
  %344 = cast(%343, dtype="uint64") /* ty=Tensor[(9, 16, 3), uint64] */;
  %345 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%338, dtype="uint64") /* ty=Tensor[(9, 16, 3), uint64] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %348 = @func_1328() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %349 = %332.3;
  %350 = %333.0;
  %351 = %334.0;
  %352 = bitwise_and(%346, %347) /* ty=Tensor[(9, 16, 3), uint64] */;
  %353 = @func_1499() /* ty=Tensor[(2, 5, 5), float64] */;
  %354 = %348.0;
  (%349, %350, %351, %352, %353, %354)
}

def @func_800() -> (Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(11, 15, ?), bool]) {
  %355 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %356 = cast(meta[relay.Constant][23] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
  %357 = cast(meta[relay.Constant][23] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
  %358 = reshape(%356, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
  %359 = reshape(%357, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
  %360 = @func_196(%358, %359) /* ty=(Tensor[(11, 15, ?), bool],) */;
  %361 = %360.0;
  %362 = cast(%361, dtype="int16") /* ty=Tensor[(11, 15, ?), int16] */;
  %363 = cast(meta[relay.Constant][23] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
  %364 = reshape(%362, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
  %365 = reshape(%363, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
  %366 = @func_196(%364, %365) /* ty=(Tensor[(11, 15, ?), bool],) */;
  %367 = %355.2;
  %368 = %366.0;
  (%367, %361, meta[relay.Constant][23] /* ty=Tensor[(165), int16] */, %368)
}

def @func_5085() -> (Tensor[(2, 5, 5), float64],) {
  %369 = @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %370 = %369.0;
  (%370,)
}

def @func_2633() -> (Tensor[(2, 5, 5), float64],) {
  %371 = @func_1748() /* ty=Tensor[(2, 5, 5), float64] */;
  (%371,)
}

def @func_3143(%var_3122: Tensor[(432), float32]) -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool], Tensor[(11, 15, 432), int32], Tensor[(432), float32], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), float32]) {
  %372 = cast(%var_3122, dtype="float32") /* ty=Tensor[(432), float32] */;
  %373 = reshape(%372, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %374 = @func_1639(%373) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) */;
  %375 = %374.0;
  %376 = cast(%var_3122, dtype="int32") /* ty=Tensor[(432), int32] */;
  %377 = cast(%375, dtype="int32") /* ty=Tensor[(11, 15, ?), int32] */;
  %378 = @func_2662() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(432), float32]) */;
  %379 = @func_2901() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(7, 195), uint16]) */;
  %380 = cast(%375, dtype="float32") /* ty=Tensor[(11, 15, ?), float32] */;
  %381 = @func_1499() /* ty=Tensor[(2, 5, 5), float64] */;
  %382 = @func_2989() /* ty=Tensor[(2, 5, 5), bool] */;
  %383 = add(%376, %377) /* ty=Tensor[(11, 15, 432), int32] */;
  %384 = %378.2;
  %385 = %379.0;
  %386 = atanh(%380) /* ty=Tensor[(11, 15, ?), float32] */;
  (%381, %382, %383, %384, %385, %386)
}

def @func_6093() -> (Tensor[(2, 5, 5), bool],) {
  %387 = @func_2989() /* ty=Tensor[(2, 5, 5), bool] */;
  (%387,)
}

def @func_4355(%var_4343: Tensor[(3, 7, 8), float32]) -> (Tensor[(3, 7, 8), int32],) {
  %388 = cast(%var_4343, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
  %389 = atan(%388) /* ty=Tensor[(3, 7, 8), float32] */;
  %390 = cast(%var_4343, dtype="int32") /* ty=Tensor[(3, 7, 8), int32] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%389, dtype="int32") /* ty=Tensor[(3, 7, 8), int32] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %394 = maximum(%392, %393) /* ty=Tensor[(3, 7, 8), int32] */;
  (%394,)
}

def @func_3699(%var_3664: Tensor[(2, 8, 1), float32], %var_3679: Tensor[(1365), uint16]) -> (Tensor[(13, 15, 7), bool], Tensor[(1365), uint16], Tensor[(2, 8, ?), bool]) {
  %395 = cast(%var_3679, dtype="uint16") /* ty=Tensor[(1365), uint16] */;
  %396 = reshape(%395, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), uint16] */;
  %397 = cast(%var_3664, dtype="float32") /* ty=Tensor[(2, 8, 1), float32] */;
  %398 = exp(%397) /* ty=Tensor[(2, 8, 1), float32] */;
  %399 = cast(%var_3664, dtype="float32") /* ty=Tensor[(2, 8, 1), float32] */;
  %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%398, dtype="float32") /* ty=Tensor[(2, 8, 1), float32] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %403 = mod(%401, %402) /* ty=Tensor[(2, 8, ?), float32] */;
  %404 = cast(%398, dtype="bool") /* ty=Tensor[(2, 8, 1), bool] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="bool") /* ty=Tensor[(2, 8, ?), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %408 = @func_1688(%396) /* ty=Tensor[(13, 15, 7), bool] */;
  %409 = not_equal(%406, %407) /* ty=Tensor[(2, 8, ?), bool] */;
  (%408, %var_3679, %409)
}

def @func_1854() -> Tensor[(2, 5, 5), float64] {
  @func_619() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_1930() -> Tensor[(2, 5, 5), float64] {
  %410 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %410.1
}

def @func_6411() -> (Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), uint8], Tensor[(336), float64]) {
  %411 = @func_4531() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %412 = cast(meta[relay.Constant][24] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
  %413 = cast(meta[relay.Constant][24] /* ty=Tensor[(336), int32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %414 = %411.0;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  %416 = reshape(%412, newshape=[4, 12, 7]) /* ty=Tensor[(4, 12, 7), int32] */;
  %417 = reshape(%413, newshape=[4, 12, 7]) /* ty=Tensor[(4, 12, 7), float32] */;
  %418 = reshape(%415, newshape=[50]) /* ty=Tensor[(50), float64] */;
  %419 = @func_4452(%416, %417, %418) /* ty=(Tensor[(4, 12, 7), int32], Tensor[(4, 12, 7), bool], Tensor[(4, 12, 7), uint64], Tensor[(4, 12, 7), bool], Tensor[(4, 12, 7), float32], Tensor[(2, 5, 5), uint8], Tensor[(50), float64]) */;
  %420 = cast(meta[relay.Constant][24] /* ty=Tensor[(336), int32] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %421 = %419.5;
  %422 = asinh(%420) /* ty=Tensor[(336), float64] */;
  (%414, %421, %422)
}

def @func_6908() -> Tensor[(2, 5, 5), float64] {
  %423 = @func_4756() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %423.0
}

def @func_687(%var_675: Tensor[(15, 15, 1), uint8]) -> (Tensor[(15, 15, 8), bool], Tensor[(2, 5, 5), float64]) {
  %424 = cast(%var_675, dtype="bool") /* ty=Tensor[(15, 15, 1), bool] */;
  %425 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 15, 8), uint8] */, dtype="bool") /* ty=Tensor[(15, 15, 8), bool] */;
  %426 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %427 = less(%424, %425) /* ty=Tensor[(15, 15, 8), bool] */;
  %428 = %426.2;
  (%427, %428)
}

def @func_5851(%var_5844: Tensor[(6, 1, 16), uint16], %var_5845: Tensor[(6, 9, 16), uint16]) -> (Tensor[(6, 9, 16), uint16],) {
  %429 = cast(%var_5844, dtype="uint16") /* ty=Tensor[(6, 1, 16), uint16] */;
  %430 = cast(%var_5845, dtype="uint16") /* ty=Tensor[(6, 9, 16), uint16] */;
  %431 = logical_xor(%429, %430) /* ty=Tensor[(6, 9, 16), uint16] */;
  (%431,)
}

def @func_1732() -> Tensor[(2, 5, 5), float64] {
  %432 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %432.1
}

def @func_5495() -> (Tensor[(2, 5, 5), bool], Tensor[(1920), float32]) {
  %433 = @func_4531() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %434 = %433.0;
  %435 = @func_4637() /* ty=Tensor[(1920), float32] */;
  (%434, %435)
}

def @func_6506() -> (Tensor[(5, 3, 14), float32], Tensor[(5, 3, 14), float32]) {
  %436 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(5, 3, 14), float32] */;
  %437 = rsqrt(%436) /* ty=Tensor[(5, 3, 14), float32] */;
  %438 = cast(%437, dtype="float32") /* ty=Tensor[(5, 3, 14), float32] */;
  %439 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(5, 3, 14), float32] */;
  %440 = log(%438) /* ty=Tensor[(5, 3, 14), float32] */;
  %441 = sinh(%439) /* ty=Tensor[(5, 3, 14), float32] */;
  (%440, %441)
}

def @func_6976() -> (Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(2, 5, 5), bool]) {
  %442 = @func_2633() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %443 = @func_6534() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool], Tensor[(165), int16]) */;
  %444 = @func_4182() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %445 = %442.0;
  %446 = %443.2;
  %447 = %444.0;
  (%445, %446, %447)
}

def @func_4452(%var_4360: Tensor[(4, 12, 7), int32], %var_4419: Tensor[(4, 12, 7), float32], %var_4443: Tensor[(50), float64]) -> (Tensor[(4, 12, 7), int32], Tensor[(4, 12, 7), bool], Tensor[(4, 12, 7), uint64], Tensor[(4, 12, 7), bool], Tensor[(4, 12, 7), float32], Tensor[(2, 5, 5), uint8], Tensor[(50), float64]) {
  %448 = cast(4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %449 = cast(%var_4360, dtype="int32") /* ty=Tensor[(4, 12, 7), int32] */;
  %450 = cast(%var_4360, dtype="bool") /* ty=Tensor[(4, 12, 7), bool] */;
  %451 = cast(4 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %452 = cast(%var_4360, dtype="float32") /* ty=Tensor[(4, 12, 7), float32] */;
  %453 = atan(%452) /* ty=Tensor[(4, 12, 7), float32] */;
  %454 = cast(%453, dtype="uint64") /* ty=Tensor[(4, 12, 7), uint64] */;
  %455 = cast(4 /* ty=int32 */, dtype="uint64") /* ty=uint64 */;
  %456 = cast(%453, dtype="float32") /* ty=Tensor[(4, 12, 7), float32] */;
  %457 = exp(%456) /* ty=Tensor[(4, 12, 7), float32] */;
  %458 = cast(%var_4419, dtype="bool") /* ty=Tensor[(4, 12, 7), bool] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%457, dtype="bool") /* ty=Tensor[(4, 12, 7), bool] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %462 = cast(%457, dtype="float32") /* ty=Tensor[(4, 12, 7), float32] */;
  %463 = acosh(%462) /* ty=Tensor[(4, 12, 7), float32] */;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(4, 12, 7), float32] */;
  %465 = cosh(%464) /* ty=Tensor[(4, 12, 7), float32] */;
  %466 = cast(%465, dtype="float32") /* ty=Tensor[(4, 12, 7), float32] */;
  %467 = cast(%var_4443, dtype="float64") /* ty=Tensor[(50), float64] */;
  %468 = reshape(%467, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
  %469 = @func_2156(%468) /* ty=(Tensor[(2, 5, 5), uint8], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) */;
  %470 = bitwise_and(%448, %449) /* ty=Tensor[(4, 12, 7), int32] */;
  %471 = less_equal(%450, %451) /* ty=Tensor[(4, 12, 7), bool] */;
  %472 = bitwise_or(%454, %455) /* ty=Tensor[(4, 12, 7), uint64] */;
  %473 = equal(%460, %461) /* ty=Tensor[(4, 12, 7), bool] */;
  %474 = rsqrt(%466) /* ty=Tensor[(4, 12, 7), float32] */;
  %475 = %469.0;
  (%470, %471, %472, %473, %474, %475, %var_4443)
}

def @func_1566(%var_1558: Tensor[(1, 1, 4), int8], %var_1559: Tensor[(7, 14, 4), int8]) -> (Tensor[(7, 14, 4), int8],) {
  %476 = cast(%var_1558, dtype="int8") /* ty=Tensor[(1, 1, 4), int8] */;
  %477 = cast(%var_1559, dtype="int8") /* ty=Tensor[(7, 14, 4), int8] */;
  %478 = maximum(%476, %477) /* ty=Tensor[(7, 14, 4), int8] */;
  (%478,)
}

def @func_4246() -> (Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32]) {
  %479 = cast(meta[relay.Constant][27] /* ty=Tensor[(1920), float32] */, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %480 = reshape(%479, newshape=[1920]) /* ty=Tensor[(1920), float32] */;
  %481 = @func_938(%480) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32], Tensor[(165), int16]) */;
  %482 = @func_1748() /* ty=Tensor[(2, 5, 5), float64] */;
  %483 = %481.1;
  (%482, %483, meta[relay.Constant][27] /* ty=Tensor[(1920), float32] */)
}

def @func_3284(%var_3240: Tensor[(1920), float32]) -> (Tensor[(1920), float64], Tensor[(1920), int16], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(220), bool]) {
  %484 = @func_2182() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %485 = %484.2;
  %486 = cast(%var_3240, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(1), int32] */;
  %488 = cast(%485, dtype="float64") /* ty=Tensor[(1920), float64] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?), float64] */;
  %490 = cast(%485, dtype="int16") /* ty=Tensor[(1920), int16] */;
  %491 = shape_of(%var_3240, dtype="int32") /* ty=Tensor[(1), int32] */;
  %492 = cast(%var_3240, dtype="int16") /* ty=Tensor[(1920), int16] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?), int16] */;
  %494 = cast(meta[relay.Constant][28] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %495 = reshape(%494, newshape=[5, 4, 11]) /* ty=Tensor[(5, 4, 11), float64] */;
  %496 = @func_1215(%495) /* ty=(Tensor[(5, 4, 11), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float32]) */;
  %497 = @func_1814() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) */;
  %498 = cast(meta[relay.Constant][28] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
  %499 = asin(%498) /* ty=Tensor[(220), float64] */;
  %500 = cast(meta[relay.Constant][28] /* ty=Tensor[(220), float64] */, dtype="bool") /* ty=Tensor[(220), bool] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(1), int32] */;
  %502 = cast(%499, dtype="bool") /* ty=Tensor[(220), bool] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?), bool] */;
  %504 = floor_mod(%488, %489) /* ty=Tensor[(1920), float64] */;
  %505 = add(%492, %493) /* ty=Tensor[(1920), int16] */;
  %506 = %496.2;
  %507 = %497.1;
  %508 = equal(%502, %503) /* ty=Tensor[(220), bool] */;
  (%504, %505, %506, %507, %508)
}

def @func_4182() -> (Tensor[(2, 5, 5), bool],) {
  %509 = @func_2989() /* ty=Tensor[(2, 5, 5), bool] */;
  (%509,)
}

def @func_5790(%var_5759: Tensor[(11, 4, 1), float64]) -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(11, 4, ?), float64], Tensor[(11, 4, ?), float64], Tensor[(11, 4, ?), bool], Tensor[(2, 5, 5), float32]) {
  %510 = @func_3534() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %511 = @func_1882() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %512 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(11, 4, 1), float64] */;
  %513 = sinh(%512) /* ty=Tensor[(11, 4, 1), float64] */;
  %514 = cast(meta[relay.Constant][29] /* ty=Tensor[(11, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(11, 4, 1), float64] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%513, dtype="float64") /* ty=Tensor[(11, 4, 1), float64] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %518 = cast(%var_5759, dtype="float64") /* ty=Tensor[(11, 4, 1), float64] */;
  %519 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%513, dtype="float64") /* ty=Tensor[(11, 4, 1), float64] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %522 = cast(%var_5759, dtype="bool") /* ty=Tensor[(11, 4, 1), bool] */;
  %523 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%513, dtype="bool") /* ty=Tensor[(11, 4, 1), bool] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %526 = %510.2;
  %527 = %511.0;
  %528 = floor_mod(%516, %517) /* ty=Tensor[(11, 4, ?), float64] */;
  %529 = mod(%520, %521) /* ty=Tensor[(11, 4, ?), float64] */;
  %530 = less_equal(%524, %525) /* ty=Tensor[(11, 4, ?), bool] */;
  %531 = @func_5534() /* ty=Tensor[(2, 5, 5), float32] */;
  (%526, %527, %528, %529, %530, %531)
}

def @func_4756() -> (Tensor[(2, 5, 5), float64],) {
  %532 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %533 = %532.0;
  (%533,)
}

def @func_4029() -> (Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64]) {
  %534 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %535 = %534.1;
  %536 = cast(%535, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  %537 = reshape(%536, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
  %538 = @func_2156(%537) /* ty=(Tensor[(2, 5, 5), uint8], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) */;
  %539 = %538.3;
  (%535, %539)
}

def @func_1099(%var_1030: Tensor[(1, 15, 12), float64], %var_1066: Tensor[(1920), float32]) -> (Tensor[(4, 15, 12), float64], Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(11, 15, 2), int8]) {
  %540 = cast(%var_1030, dtype="float64") /* ty=Tensor[(1, 15, 12), float64] */;
  %541 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 12), float64] */;
  %542 = @func_800() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(11, 15, ?), bool]) */;
  %543 = cast(%var_1066, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %544 = reshape(%543, newshape=[1920]) /* ty=Tensor[(1920), float32] */;
  %545 = @func_938(%544) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32], Tensor[(165), int16]) */;
  %546 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %547 = cast(%var_1066, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %548 = reshape(%547, newshape=[1920]) /* ty=Tensor[(1920), float32] */;
  %549 = @func_938(%548) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32], Tensor[(165), int16]) */;
  %550 = %549.1;
  %551 = cast(%550, dtype="int8") /* ty=Tensor[(11, 15, ?), int8] */;
  %552 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 15, 2), bool] */, dtype="int8") /* ty=Tensor[(11, 15, 2), int8] */;
  %553 = floor_divide(%540, %541) /* ty=Tensor[(4, 15, 12), float64] */;
  %554 = %542.1;
  %555 = @func_619() /* ty=Tensor[(2, 5, 5), float64] */;
  %556 = %545.0;
  %557 = @func_619() /* ty=Tensor[(2, 5, 5), float64] */;
  %558 = %546.3;
  %559 = left_shift(%551, %552) /* ty=Tensor[(11, 15, 2), int8] */;
  (%553, %554, %555, %556, %var_1066, %557, %558, %559)
}

def @func_666(%var_650: Tensor[(10, 12, 16), float32], %var_660: Tensor[(165), int16]) -> (Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(10, 12, 16), int8]) {
  %560 = cast(%var_660, dtype="int16") /* ty=Tensor[(165), int16] */;
  %561 = cast(%var_660, dtype="int16") /* ty=Tensor[(165), int16] */;
  %562 = reshape(%560, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
  %563 = reshape(%561, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
  %564 = @func_196(%562, %563) /* ty=(Tensor[(11, 15, ?), bool],) */;
  %565 = cast(%var_650, dtype="float32") /* ty=Tensor[(10, 12, 16), float32] */;
  %566 = atan(%565) /* ty=Tensor[(10, 12, 16), float32] */;
  %567 = cast(%var_650, dtype="int8") /* ty=Tensor[(10, 12, 16), int8] */;
  %568 = shape_of(%566, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(%566, dtype="int8") /* ty=Tensor[(10, 12, 16), int8] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %571 = %564.0;
  %572 = bitwise_and(%569, %570) /* ty=Tensor[(10, 12, 16), int8] */;
  (%571, %var_660, %572)
}

def @func_2182() -> (Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) {
  %573 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %574 = cast(meta[relay.Constant][32] /* ty=Tensor[(1920), float32] */, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %575 = reshape(%574, newshape=[1920]) /* ty=Tensor[(1920), float32] */;
  %576 = @func_938(%575) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32], Tensor[(165), int16]) */;
  %577 = @func_1742() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %578 = %573.1;
  %579 = %576.3;
  %580 = %577.0;
  %581 = @func_1732() /* ty=Tensor[(2, 5, 5), float64] */;
  (%578, %579, meta[relay.Constant][32] /* ty=Tensor[(1920), float32] */, %580, %581)
}

def @func_6534() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool], Tensor[(165), int16]) {
  %582 = cast(meta[relay.Constant][33] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
  %583 = reshape(%582, newshape=[165]) /* ty=Tensor[(165), int16] */;
  %584 = @func_3224(%583) /* ty=(Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(165), float32]) */;
  %585 = @func_1732() /* ty=Tensor[(2, 5, 5), float64] */;
  %586 = %584.0;
  (%585, %586, meta[relay.Constant][33] /* ty=Tensor[(165), int16] */)
}

def @func_5663() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(1920), float32]) {
  %587 = @func_5357() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %588 = %587.0;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  %590 = reshape(%589, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
  %591 = @func_5495() /* ty=(Tensor[(2, 5, 5), bool], Tensor[(1920), float32]) */;
  %592 = @func_4310(%590) /* ty=Tensor[(2, 5, 5), bool] */;
  %593 = @func_1499() /* ty=Tensor[(2, 5, 5), float64] */;
  %594 = @func_1732() /* ty=Tensor[(2, 5, 5), float64] */;
  %595 = %591.1;
  (%588, %592, %593, %594, %595)
}

def @func_3365() -> (Tensor[(2, 5, 5), float64],) {
  %596 = @func_1732() /* ty=Tensor[(2, 5, 5), float64] */;
  (%596,)
}

def @func_2443() -> Tensor[(2, 5, 5), float64] {
  %597 = @func_800() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(11, 15, ?), bool]) */;
  %597.0
}

def @func_6121(%var_6110: Tensor[(432), uint64], %var_6111: Tensor[(27, 50), int16]) -> (Tensor[(165), int16], Tensor[(165), int16], Tensor[(165), int16], Tensor[(15, 6, 15), float64], Tensor[(432), uint64], Tensor[(27, 50), int16]) {
  %598 = @func_2554() /* ty=(Tensor[(165), int16],) */;
  %599 = @func_5469() /* ty=(Tensor[(165), int16], Tensor[(2, 3, 11), int32], Tensor[(66), int32], Tensor[(2, 5, 5), float64]) */;
  %600 = @func_2554() /* ty=(Tensor[(165), int16],) */;
  %601 = cast(%var_6110, dtype="uint64") /* ty=Tensor[(432), uint64] */;
  %602 = cast(%var_6111, dtype="int16") /* ty=Tensor[(27, 50), int16] */;
  %603 = reshape(%601, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), uint64] */;
  %604 = reshape(%602, newshape=[1350]) /* ty=Tensor[(1350), int16] */;
  %605 = @func_5316(%603, %604) /* ty=(Tensor[(9, 16, 3), int8], Tensor[(15, 6, 15), float64], Tensor[(9), int16], Tensor[(1350), int16], Tensor[(50), float64]) */;
  %606 = %598.0;
  %607 = %599.0;
  %608 = %600.0;
  %609 = %605.1;
  (%606, %607, %608, %609, %var_6110, %var_6111)
}

def @func_541() -> (Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) {
  %610 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 5, 5), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
  %611 = sin(%610) /* ty=Tensor[(2, 5, 5), float32] */;
  %612 = cast(%611, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
  %613 = cast(%611, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
  %614 = asin(%613) /* ty=Tensor[(2, 5, 5), float32] */;
  %615 = cast(%611, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
  %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%614, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = cast(%611, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
  %620 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%614, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %623 = less(%621, %622) /* ty=Tensor[(2, 5, 5), bool] */;
  %624 = cast(%623, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  %625 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%614, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %628 = add(%626, %627) /* ty=Tensor[(2, 5, 5), float64] */;
  %629 = cast(%628, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  %630 = shape_of(%623, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%623, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %633 = cast(meta[relay.Constant][35] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
  %634 = cast(meta[relay.Constant][35] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
  %635 = reshape(%633, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
  %636 = reshape(%634, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
  %637 = @func_196(%635, %636) /* ty=(Tensor[(11, 15, ?), bool],) */;
  %638 = cosh(%612) /* ty=Tensor[(2, 5, 5), float32] */;
  %639 = logical_and(%617, %618) /* ty=Tensor[(2, 5, 5), bool] */;
  %640 = divide(%631, %632) /* ty=Tensor[(2, 5, 5), float64] */;
  %641 = %637.0;
  (%638, %639, %640, %641, meta[relay.Constant][35] /* ty=Tensor[(165), int16] */)
}

def @func_4163(%var_4160: Tensor[(1920), float32], %var_4161: Tensor[(165), int16]) -> (Tensor[(2, 5, 5), bool], Tensor[(10, 12, 16), int8], Tensor[(1920), float32], Tensor[(165), int16]) {
  %642 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %643 = cast(%var_4160, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %644 = cast(%var_4161, dtype="int16") /* ty=Tensor[(165), int16] */;
  %645 = reshape(%643, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float32] */;
  %646 = reshape(%644, newshape=[165]) /* ty=Tensor[(165), int16] */;
  %647 = @func_666(%645, %646) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(10, 12, 16), int8]) */;
  %648 = %642.1;
  %649 = %647.2;
  (%648, %649, %var_4160, %var_4161)
}

def @func_1748() -> Tensor[(2, 5, 5), float64] {
  @func_619() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_5429(%var_5424: int16, %var_5425: Tensor[(4, 8, 2), int16]) -> (Tensor[(4, 8, 2), int16],) {
  %650 = cast(%var_5424, dtype="int16") /* ty=int16 */;
  %651 = cast(%var_5425, dtype="int16") /* ty=Tensor[(4, 8, 2), int16] */;
  %652 = multiply(%650, %651) /* ty=Tensor[(4, 8, 2), int16] */;
  (%652,)
}

def @func_6671() -> (Tensor[(2, 5, 5), float64], Tensor[(1920), float32]) {
  %653 = @func_3449() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %654 = %653.0;
  %655 = @func_4637() /* ty=Tensor[(1920), float32] */;
  (%654, %655)
}

def @func_6239(%var_6204: Tensor[(16), float32]) -> (Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(13, 15, 7), bool], Tensor[(16), float32], Tensor[(1, 1365), uint16], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64]) {
  %656 = @func_2969() /* ty=Tensor[(2, 5, 5), float64] */;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  %658 = cast(meta[relay.Constant][36] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
  %659 = cast(meta[relay.Constant][36] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
  %660 = reshape(%658, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
  %661 = reshape(%659, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
  %662 = @func_196(%660, %661) /* ty=(Tensor[(11, 15, ?), bool],) */;
  %663 = @func_1266() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(165), int16], Tensor[(2, 5, 5), float64], Tensor[(225), uint8]) */;
  %664 = cast(%var_6204, dtype="float32") /* ty=Tensor[(16), float32] */;
  %665 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 1365), uint16] */, dtype="uint16") /* ty=Tensor[(1, 1365), uint16] */;
  %666 = reshape(%664, newshape=[2, 8, 1]) /* ty=Tensor[(2, 8, 1), float32] */;
  %667 = reshape(%665, newshape=[1365]) /* ty=Tensor[(1365), uint16] */;
  %668 = @func_3699(%666, %667) /* ty=(Tensor[(13, 15, 7), bool], Tensor[(1365), uint16], Tensor[(2, 8, ?), bool]) */;
  %669 = @func_4496() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) */;
  %670 = @func_2633() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %671 = acosh(%657) /* ty=Tensor[(2, 5, 5), float64] */;
  %672 = %662.0;
  %673 = %663.2;
  %674 = %668.0;
  %675 = %669.1;
  %676 = %670.0;
  (%671, %672, meta[relay.Constant][36] /* ty=Tensor[(165), int16] */, %673, %674, %var_6204, meta[relay.Constant][37] /* ty=Tensor[(1, 1365), uint16] */, %675, %676)
}

def @func_619() -> Tensor[(2, 5, 5), float64] {
  %677 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %677.2
}

def @func_1412(%var_1376: Tensor[(9, 16, 3), float32]) -> (Tensor[(9, 16, 3), float32], Tensor[(2, 5, 5), float64]) {
  %678 = cast(%var_1376, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
  %679 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %680 = log(%678) /* ty=Tensor[(9, 16, 3), float32] */;
  %681 = %679.0;
  (%680, %681)
}

def @func_1215(%var_1194: Tensor[(5, 4, 11), float64]) -> (Tensor[(5, 4, 11), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float32]) {
  %682 = cast(%var_1194, dtype="float64") /* ty=Tensor[(5, 4, 11), float64] */;
  %683 = @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %684 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %685 = atan(%682) /* ty=Tensor[(5, 4, 11), float64] */;
  %686 = %683.0;
  %687 = %684.0;
  (%685, %686, %687)
}

def @func_1012() -> Tensor[(2, 5, 5), float64] {
  %688 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %688.2
}

def @func_3068(%var_3028: Tensor[(216, 2), float32], %var_3035: Tensor[(4), int8], %var_3036: Tensor[(392), int8]) -> (Tensor[(2, 5, 5), float32], Tensor[(9, 16, 3), float32], Tensor[(4), int8], Tensor[(392), int8], Tensor[(216, 2), float64], Tensor[(7, 14, 4), float64]) {
  %689 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %690 = cast(%var_3028, dtype="float32") /* ty=Tensor[(216, 2), float32] */;
  %691 = reshape(%690, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
  %692 = @func_1412(%691) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(2, 5, 5), float64]) */;
  %693 = cast(%var_3028, dtype="float64") /* ty=Tensor[(216, 2), float64] */;
  %694 = cast(%var_3035, dtype="int8") /* ty=Tensor[(4), int8] */;
  %695 = cast(%var_3036, dtype="int8") /* ty=Tensor[(392), int8] */;
  %696 = reshape(%694, newshape=[1, 1, 4]) /* ty=Tensor[(1, 1, 4), int8] */;
  %697 = reshape(%695, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), int8] */;
  %698 = @func_1566(%696, %697) /* ty=(Tensor[(7, 14, 4), int8],) */;
  %699 = %698.0;
  %700 = cast(%699, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %701 = %689.0;
  %702 = %692.0;
  %703 = sinh(%693) /* ty=Tensor[(216, 2), float64] */;
  %704 = cosh(%700) /* ty=Tensor[(7, 14, 4), float64] */;
  (%701, %702, %var_3035, %var_3036, %703, %704)
}

def @func_4006(%var_3944: Tensor[(165), int16], %var_3968: Tensor[(165), bool], %var_4001: float64, %var_4002: Tensor[(220), float64]) -> (Tensor[(165), int16], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(165), bool], Tensor[(165), float64], Tensor[(165), int16], Tensor[(2, 5, 5), uint16], Tensor[(165), int16], float64, Tensor[(220), float64]) {
  %705 = cast(meta[relay.Constant][38] /* ty=Tensor[(1920), float32] */, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %706 = reshape(%705, newshape=[1920]) /* ty=Tensor[(1920), float32] */;
  %707 = @func_938(%706) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32], Tensor[(165), int16]) */;
  %708 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %709 = %708.4;
  %710 = cast(%var_3944, dtype="float64") /* ty=Tensor[(165), float64] */;
  %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(1), int32] */;
  %712 = cast(%709, dtype="float64") /* ty=Tensor[(165), float64] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?), float64] */;
  %714 = mod(%712, %713) /* ty=Tensor[(165), float64] */;
  %715 = cast(%714, dtype="bool") /* ty=Tensor[(165), bool] */;
  %716 = shape_of(%709, dtype="int32") /* ty=Tensor[(1), int32] */;
  %717 = cast(%709, dtype="bool") /* ty=Tensor[(165), bool] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?), bool] */;
  %719 = not_equal(%717, %718) /* ty=Tensor[(165), bool] */;
  %720 = cast(%var_3968, dtype="bool") /* ty=Tensor[(165), bool] */;
  %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(1), int32] */;
  %722 = cast(%719, dtype="bool") /* ty=Tensor[(165), bool] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?), bool] */;
  %724 = cast(%var_3944, dtype="float64") /* ty=Tensor[(165), float64] */;
  %725 = @func_2554() /* ty=(Tensor[(165), int16],) */;
  %726 = @func_2805() /* ty=Tensor[(2, 5, 5), float64] */;
  %727 = cast(%726, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
  %728 = reshape(%727, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), bool] */;
  %729 = cast(%var_4001, dtype="float64") /* ty=float64 */;
  %730 = cast(%var_4002, dtype="float64") /* ty=Tensor[(220), float64] */;
  %731 = reshape(%729, newshape=[]) /* ty=float64 */;
  %732 = reshape(%730, newshape=[4, 5, 11]) /* ty=Tensor[(4, 5, 11), float64] */;
  %733 = @func_914(%731, %732) /* ty=(Tensor[(4, 5, 11), float64], Tensor[(165), int16], Tensor[(2, 5, 5), float64]) */;
  %734 = %707.3;
  %735 = greater(%722, %723) /* ty=Tensor[(165), bool] */;
  %736 = sigmoid(%724) /* ty=Tensor[(165), float64] */;
  %737 = %725.0;
  %738 = @func_3726(%728) /* ty=Tensor[(2, 5, 5), uint16] */;
  %739 = %733.1;
  (%734, meta[relay.Constant][38] /* ty=Tensor[(1920), float32] */, %726, %735, %736, %737, %738, %739, %var_4001, %var_4002)
}

def @func_938(%var_934: Tensor[(1920), float32]) -> (Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32], Tensor[(165), int16]) {
  %740 = cast(%var_934, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %741 = cast(meta[relay.Constant][39] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
  %742 = reshape(%740, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float32] */;
  %743 = reshape(%741, newshape=[165]) /* ty=Tensor[(165), int16] */;
  %744 = @func_666(%742, %743) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(10, 12, 16), int8]) */;
  %745 = @func_619() /* ty=Tensor[(2, 5, 5), float64] */;
  %746 = %744.0;
  (%745, %746, %var_934, meta[relay.Constant][39] /* ty=Tensor[(165), int16] */)
}

def @func_5231(%var_5200: Tensor[(4), int8]) -> (Tensor[(2, 5, 5), float64], Tensor[(7, 14, 4), int8], Tensor[(4), int8], Tensor[(98, 4), int8]) {
  %747 = @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %748 = cast(%var_5200, dtype="int8") /* ty=Tensor[(4), int8] */;
  %749 = cast(meta[relay.Constant][40] /* ty=Tensor[(98, 4), int8] */, dtype="int8") /* ty=Tensor[(98, 4), int8] */;
  %750 = reshape(%748, newshape=[1, 1, 4]) /* ty=Tensor[(1, 1, 4), int8] */;
  %751 = reshape(%749, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), int8] */;
  %752 = @func_1566(%750, %751) /* ty=(Tensor[(7, 14, 4), int8],) */;
  %753 = %747.0;
  %754 = %752.0;
  (%753, %754, %var_5200, meta[relay.Constant][40] /* ty=Tensor[(98, 4), int8] */)
}

def @func_5993() -> Tensor[(1920), float64] {
  %755 = @func_4637() /* ty=Tensor[(1920), float32] */;
  %756 = cast(%755, dtype="float64") /* ty=Tensor[(1920), float64] */;
  log2(%756) /* ty=Tensor[(1920), float64] */
}

def @func_5834() -> (Tensor[(2, 5, 5), float64],) {
  %757 = @func_3449() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %758 = %757.0;
  (%758,)
}

def @func_6700() -> Tensor[(2, 5, 5), float64] {
  %759 = @func_5039() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %759.0
}

def @func_5000(%var_4990: Tensor[(15, 2, 5), float64], %var_4991: Tensor[(15, 2, 5), float64], %var_4996: Tensor[(15, 2, 5), float64]) -> (Tensor[(15, 2, 5), uint32],) {
  %760 = cast(%var_4991, dtype="float64") /* ty=Tensor[(15, 2, 5), float64] */;
  %761 = shape_of(%var_4990, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%var_4990, dtype="float64") /* ty=Tensor[(15, 2, 5), float64] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %764 = divide(%762, %763) /* ty=Tensor[(15, 2, 5), float64] */;
  %765 = cast(%var_4996, dtype="uint32") /* ty=Tensor[(15, 2, 5), uint32] */;
  %766 = shape_of(%764, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%764, dtype="uint32") /* ty=Tensor[(15, 2, 5), uint32] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %769 = multiply(%767, %768) /* ty=Tensor[(15, 2, 5), uint32] */;
  (%769,)
}

def @func_1328() -> (Tensor[(2, 5, 5), bool],) {
  %770 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %771 = %770.1;
  (%771,)
}

def @func_3659(%var_3646: Tensor[(1920), float32]) -> Tensor[(1920), bool] {
  %772 = @func_1266() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(165), int16], Tensor[(2, 5, 5), float64], Tensor[(225), uint8]) */;
  %773 = %772.2;
  %774 = cast(%var_3646, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(1), int32] */;
  %776 = cast(%773, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?), bool] */;
  less_equal(%776, %777) /* ty=Tensor[(1920), bool] */
}

def @func_3726(%var_3721: Tensor[(2, 5, 5), bool]) -> Tensor[(2, 5, 5), uint16] {
  %778 = @func_1328() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %779 = %778.0;
  %780 = cast(%var_3721, dtype="uint16") /* ty=Tensor[(2, 5, 5), uint16] */;
  %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(%779, dtype="uint16") /* ty=Tensor[(2, 5, 5), uint16] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%782, %783) /* ty=Tensor[(2, 5, 5), uint16] */
}

def @func_2901() -> (Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(7, 195), uint16]) {
  %784 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 195), uint16] */, dtype="uint16") /* ty=Tensor[(7, 195), uint16] */;
  %785 = reshape(%784, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), uint16] */;
  %786 = @func_1012() /* ty=Tensor[(2, 5, 5), float64] */;
  %787 = @func_1688(%785) /* ty=Tensor[(13, 15, 7), bool] */;
  (%786, %787, meta[relay.Constant][41] /* ty=Tensor[(7, 195), uint16] */)
}

def @func_3910(%var_3881: Tensor[(1, 3, 3), int16], %var_3885: Tensor[(15, 6, 15), int16], %var_3904: Tensor[(10, 5), float64]) -> (Tensor[(1, 3, 3), int16], Tensor[(15, 6, 15), int8], Tensor[(2, 5, 5), float32], Tensor[(10, 5), float64], Tensor[(15, 6, 15), float64]) {
  %788 = cast(meta[relay.Constant][42] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %789 = cast(%var_3881, dtype="int16") /* ty=Tensor[(1, 3, 3), int16] */;
  %790 = cast(meta[relay.Constant][42] /* ty=int16 */, dtype="int8") /* ty=int8 */;
  %791 = cast(%var_3885, dtype="int8") /* ty=Tensor[(15, 6, 15), int8] */;
  %792 = cast(%var_3904, dtype="float64") /* ty=Tensor[(10, 5), float64] */;
  %793 = reshape(%792, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
  %794 = cast(%var_3885, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %795 = bitwise_xor(%788, %789) /* ty=Tensor[(1, 3, 3), int16] */;
  %796 = bitwise_xor(%790, %791) /* ty=Tensor[(15, 6, 15), int8] */;
  %797 = @func_2513(%793) /* ty=Tensor[(2, 5, 5), float32] */;
  %798 = cosh(%794) /* ty=Tensor[(15, 6, 15), float64] */;
  (%795, %796, %797, %var_3904, %798)
}

def @func_5534() -> Tensor[(2, 5, 5), float32] {
  %799 = @func_5469() /* ty=(Tensor[(165), int16], Tensor[(2, 3, 11), int32], Tensor[(66), int32], Tensor[(2, 5, 5), float64]) */;
  %800 = %799.3;
  %801 = cast(%800, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
  sinh(%801) /* ty=Tensor[(2, 5, 5), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2805() -> Tensor[(2, 5, 5), float64] {
  %0 = @func_1012() /* ty=Tensor[(2, 5, 5), float64] */;
  %1 = cast(%0, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  log2(%1) /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_6976() -> (Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(2, 5, 5), bool]) {
  %2 = @func_2633() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %3 = @func_6534() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool], Tensor[(165), int16]) */;
  %4 = @func_4182() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %5 = %2.0;
  %6 = %3.2;
  %7 = %4.0;
  (%5, %6, %7)
}

def @func_1174() -> (Tensor[(2, 5, 5), float64],) {
  @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */
}

def @func_1688(%var_1680: Tensor[(13, 15, 7), uint16]) -> Tensor[(13, 15, 7), bool] {
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 1, 7), uint16] */, dtype="bool") /* ty=Tensor[(13, 1, 7), bool] */;
  %9 = cast(%var_1680, dtype="bool") /* ty=Tensor[(13, 15, 7), bool] */;
  greater(%8, %9) /* ty=Tensor[(13, 15, 7), bool] */
}

def @func_5496() -> (Tensor[(2, 5, 5), bool], Tensor[(1920), float32]) {
  %13 = fn () -> (Tensor[(2, 5, 5), bool], Tensor[(1920), float32]) {
    %10 = @func_4531() /* ty=(Tensor[(2, 5, 5), bool],) */;
    %11 = %10.0;
    %12 = @func_4637() /* ty=Tensor[(1920), float32] */;
    (%11, %12)
  };
  %13() /* ty=(Tensor[(2, 5, 5), bool], Tensor[(1920), float32]) */
}

def @func_3662(%var_3660: Tensor[(1920), float32]) -> Tensor[(1920), bool] {
  @func_3659(%var_3660) /* ty=Tensor[(1920), bool] */
}

def @func_2807() -> Tensor[(2, 5, 5), float64] {
  @func_2805() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_1642(%var_1640: Tensor[(432), float32]) -> (Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) {
  @func_1639(%var_1640) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) */
}

def @func_1674() -> Tensor[(2, 5, 5), float64] {
  %14 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %14.1
}

def @func_3821() -> Tensor[(2, 5, 5), float64] {
  @func_3819() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_1021(%var_1015: Tensor[(6, 13, 14), float32]) -> Tensor[(6, 13, 14), float32] {
  %15 = cast(%var_1015, dtype="float32") /* ty=Tensor[(6, 13, 14), float32] */;
  log2(%15) /* ty=Tensor[(6, 13, 14), float32] */
}

def @func_1024(%var_1022: Tensor[(6, 13, 14), float32]) -> Tensor[(6, 13, 14), float32] {
  @func_1021(%var_1022) /* ty=Tensor[(6, 13, 14), float32] */
}

def @func_6307(%var_6305: Tensor[(3, 12, 2), float32]) -> (Tensor[(3, 12, 2), float32], Tensor[(3, 12, 2), float64], Tensor[(3, 12, 2), bool]) {
  @func_6304(%var_6305) /* ty=(Tensor[(3, 12, 2), float32], Tensor[(3, 12, 2), float64], Tensor[(3, 12, 2), bool]) */
}

def @func_5995() -> Tensor[(1920), float64] {
  @func_5993() /* ty=Tensor[(1920), float64] */
}

def @func_6767(%var_6766: Tensor[(392), int8]) -> (Tensor[(2, 5, 5), bool], Tensor[(392), uint8], Tensor[(392), int8], Tensor[(2, 5, 5), float64], Tensor[(1920), float32]) {
  %25 = fn (%var_6740: Tensor[(392), int8]) -> (Tensor[(2, 5, 5), bool], Tensor[(392), uint8], Tensor[(392), int8], Tensor[(2, 5, 5), float64], Tensor[(1920), float32]) {
    %16 = cast(%var_6740, dtype="int8") /* ty=Tensor[(392), int8] */;
    %17 = reshape(%16, newshape=[392]) /* ty=Tensor[(392), int8] */;
    %18 = @func_5718(%17) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(392), uint8], Tensor[(2, 5, 5), float64]) */;
    %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(1920), float32] */, dtype="float32") /* ty=Tensor[(1920), float32] */;
    %20 = reshape(%19, newshape=[1920]) /* ty=Tensor[(1920), float32] */;
    %21 = @func_3284(%20) /* ty=(Tensor[(1920), float64], Tensor[(1920), int16], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(220), bool]) */;
    %22 = @func_4752() /* ty=Tensor[(2, 5, 5), bool] */;
    %23 = %18.1;
    %24 = %21.3;
    (%22, %23, %var_6740, %24, meta[relay.Constant][1] /* ty=Tensor[(1920), float32] */)
  };
  %25(%var_6766) /* ty=(Tensor[(2, 5, 5), bool], Tensor[(392), uint8], Tensor[(392), int8], Tensor[(2, 5, 5), float64], Tensor[(1920), float32]) */
}

def @func_689(%var_688: Tensor[(15, 15, 1), uint8]) -> (Tensor[(15, 15, 8), bool], Tensor[(2, 5, 5), float64]) {
  %31 = fn (%var_675: Tensor[(15, 15, 1), uint8]) -> (Tensor[(15, 15, 8), bool], Tensor[(2, 5, 5), float64]) {
    %26 = cast(%var_675, dtype="bool") /* ty=Tensor[(15, 15, 1), bool] */;
    %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 15, 8), uint8] */, dtype="bool") /* ty=Tensor[(15, 15, 8), bool] */;
    %28 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
    %29 = less(%26, %27) /* ty=Tensor[(15, 15, 8), bool] */;
    %30 = %28.2;
    (%29, %30)
  };
  %31(%var_688) /* ty=(Tensor[(15, 15, 8), bool], Tensor[(2, 5, 5), float64]) */
}

def @func_6480(%var_6413: Tensor[(11, 16, 13), float64]) -> (Tensor[(11, 16, 13), float32], Tensor[(2, 5, 5), float64]) {
  %32 = cast(%var_6413, dtype="float64") /* ty=Tensor[(11, 16, 13), float64] */;
  %33 = sqrt(%32) /* ty=Tensor[(11, 16, 13), float64] */;
  %34 = cast(%var_6413, dtype="float32") /* ty=Tensor[(11, 16, 13), float32] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%33, dtype="float32") /* ty=Tensor[(11, 16, 13), float32] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %38 = @func_2633() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %39 = floor_divide(%36, %37) /* ty=Tensor[(11, 16, 13), float32] */;
  %40 = %38.0;
  (%39, %40)
}

def @func_1372() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) {
  @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */
}

def @func_5835() -> (Tensor[(2, 5, 5), float64],) {
  %43 = fn () -> (Tensor[(2, 5, 5), float64],) {
    %41 = @func_3449() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %42 = %41.0;
    (%42,)
  };
  %43() /* ty=(Tensor[(2, 5, 5), float64],) */
}

def @func_3726(%var_3721: Tensor[(2, 5, 5), bool]) -> Tensor[(2, 5, 5), uint16] {
  %44 = @func_1328() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %45 = %44.0;
  %46 = cast(%var_3721, dtype="uint16") /* ty=Tensor[(2, 5, 5), uint16] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%45, dtype="uint16") /* ty=Tensor[(2, 5, 5), uint16] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%48, %49) /* ty=Tensor[(2, 5, 5), uint16] */
}

def @func_4183() -> (Tensor[(2, 5, 5), bool],) {
  %51 = fn () -> (Tensor[(2, 5, 5), bool],) {
    %50 = @func_2989() /* ty=Tensor[(2, 5, 5), bool] */;
    (%50,)
  };
  %51() /* ty=(Tensor[(2, 5, 5), bool],) */
}

def @func_3729(%var_3727: Tensor[(2, 5, 5), bool]) -> Tensor[(2, 5, 5), uint16] {
  @func_3726(%var_3727) /* ty=Tensor[(2, 5, 5), uint16] */
}

def @func_5534() -> Tensor[(2, 5, 5), float32] {
  %52 = @func_5469() /* ty=(Tensor[(165), int16], Tensor[(2, 3, 11), int32], Tensor[(66), int32], Tensor[(2, 5, 5), float64]) */;
  %53 = %52.3;
  %54 = cast(%53, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
  sinh(%54) /* ty=Tensor[(2, 5, 5), float32] */
}

def @func_5470() -> (Tensor[(165), int16], Tensor[(2, 3, 11), int32], Tensor[(66), int32], Tensor[(2, 5, 5), float64]) {
  %66 = fn () -> (Tensor[(165), int16], Tensor[(2, 3, 11), int32], Tensor[(66), int32], Tensor[(2, 5, 5), float64]) {
    %55 = @func_2554() /* ty=(Tensor[(165), int16],) */;
    %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(66), int32] */, dtype="int32") /* ty=Tensor[(66), int32] */;
    %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(66), int32] */, dtype="int32") /* ty=Tensor[(66), int32] */;
    %58 = %55.0;
    %59 = cast(%58, dtype="int16") /* ty=Tensor[(165), int16] */;
    %60 = reshape(%56, newshape=[2, 3, 11]) /* ty=Tensor[(2, 3, 11), int32] */;
    %61 = reshape(%57, newshape=[2, 3, 11]) /* ty=Tensor[(2, 3, 11), int32] */;
    %62 = reshape(%59, newshape=[33, 5]) /* ty=Tensor[(33, 5), int16] */;
    %63 = @func_4686(%60, %61, %62) /* ty=(Tensor[(2, 3, 11), int32], Tensor[(1920), float32], Tensor[(33, 5), int16], float64, Tensor[(110, 2), float32]) */;
    %64 = %63.0;
    %65 = @func_1748() /* ty=Tensor[(2, 5, 5), float64] */;
    (%58, %64, meta[relay.Constant][3] /* ty=Tensor[(66), int32] */, %65)
  };
  %66() /* ty=(Tensor[(165), int16], Tensor[(2, 3, 11), int32], Tensor[(66), int32], Tensor[(2, 5, 5), float64]) */
}

def @func_1012() -> Tensor[(2, 5, 5), float64] {
  %67 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %67.2
}

def @func_5536() -> Tensor[(2, 5, 5), float32] {
  @func_5534() /* ty=Tensor[(2, 5, 5), float32] */
}

def @func_5359() -> (Tensor[(2, 5, 5), float64],) {
  @func_5357() /* ty=(Tensor[(2, 5, 5), float64],) */
}

def @func_1932() -> Tensor[(2, 5, 5), float64] {
  @func_1930() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_2225(%var_2224: Tensor[(16, 12, 15), float64]) -> (Tensor[(16, 12, 15), float64], Tensor[(16, 12, 15), int8]) {
  %78 = fn (%var_2207: Tensor[(16, 12, 15), float64]) -> (Tensor[(16, 12, 15), float64], Tensor[(16, 12, 15), int8]) {
    %68 = cast(%var_2207, dtype="float64") /* ty=Tensor[(16, 12, 15), float64] */;
    %69 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(16, 12, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 12, 15), float64] */, dtype="float64") /* ty=Tensor[(16, 12, 15), float64] */;
    %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %72 = cast(%var_2207, dtype="int8") /* ty=Tensor[(16, 12, 15), int8] */;
    %73 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(16, 12, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 12, 15), float64] */, dtype="int8") /* ty=Tensor[(16, 12, 15), int8] */;
    %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %76 = power(%70, %71) /* ty=Tensor[(16, 12, 15), float64] */;
    %77 = bitwise_and(%74, %75) /* ty=Tensor[(16, 12, 15), int8] */;
    (%76, %77)
  };
  %78(%var_2224) /* ty=(Tensor[(16, 12, 15), float64], Tensor[(16, 12, 15), int8]) */
}

def @func_5433(%var_5431: int16, %var_5432: Tensor[(4, 8, 2), int16]) -> (Tensor[(4, 8, 2), int16],) {
  @func_5429(%var_5431, %var_5432) /* ty=(Tensor[(4, 8, 2), int16],) */
}

def @func_5790(%var_5759: Tensor[(11, 4, 1), float64]) -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(11, 4, ?), float64], Tensor[(11, 4, ?), float64], Tensor[(11, 4, ?), bool], Tensor[(2, 5, 5), float32]) {
  %79 = @func_3534() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %80 = @func_1882() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %81 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(11, 4, 1), float64] */;
  %82 = sinh(%81) /* ty=Tensor[(11, 4, 1), float64] */;
  %83 = cast(meta[relay.Constant][5] /* ty=Tensor[(11, 4, 1), float64] */, dtype="float64") /* ty=Tensor[(11, 4, 1), float64] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="float64") /* ty=Tensor[(11, 4, 1), float64] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %87 = cast(%var_5759, dtype="float64") /* ty=Tensor[(11, 4, 1), float64] */;
  %88 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%82, dtype="float64") /* ty=Tensor[(11, 4, 1), float64] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %91 = cast(%var_5759, dtype="bool") /* ty=Tensor[(11, 4, 1), bool] */;
  %92 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%82, dtype="bool") /* ty=Tensor[(11, 4, 1), bool] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %95 = %79.2;
  %96 = %80.0;
  %97 = floor_mod(%85, %86) /* ty=Tensor[(11, 4, ?), float64] */;
  %98 = mod(%89, %90) /* ty=Tensor[(11, 4, ?), float64] */;
  %99 = less_equal(%93, %94) /* ty=Tensor[(11, 4, ?), bool] */;
  %100 = @func_5534() /* ty=Tensor[(2, 5, 5), float32] */;
  (%95, %96, %97, %98, %99, %100)
}

def @func_7025(%var_7024: Tensor[(432), float32]) -> (Tensor[(2, 5, 5), float64], Tensor[(432), float32], Tensor[(2, 3, 11), int32], Tensor[(1920), bool], Tensor[(2, 5, 5), float64]) {
  %116 = fn (%var_6984: Tensor[(432), float32]) -> (Tensor[(2, 5, 5), float64], Tensor[(432), float32], Tensor[(2, 3, 11), int32], Tensor[(1920), bool], Tensor[(2, 5, 5), float64]) {
    %101 = cast(%var_6984, dtype="float32") /* ty=Tensor[(432), float32] */;
    %102 = reshape(%101, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
    %103 = @func_1412(%102) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(2, 5, 5), float64]) */;
    %104 = @func_5469() /* ty=(Tensor[(165), int16], Tensor[(2, 3, 11), int32], Tensor[(66), int32], Tensor[(2, 5, 5), float64]) */;
    %105 = @func_5495() /* ty=(Tensor[(2, 5, 5), bool], Tensor[(1920), float32]) */;
    %106 = %105.1;
    %107 = cast(meta[relay.Constant][6] /* ty=Tensor[(1920), float32] */, dtype="bool") /* ty=Tensor[(1920), bool] */;
    %108 = shape_of(%106, dtype="int32") /* ty=Tensor[(1), int32] */;
    %109 = cast(%106, dtype="bool") /* ty=Tensor[(1920), bool] */;
    %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?), bool] */;
    %111 = @func_5357() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %112 = %103.1;
    %113 = %104.1;
    %114 = greater_equal(%109, %110) /* ty=Tensor[(1920), bool] */;
    %115 = %111.0;
    (%112, %var_6984, %113, %114, %115)
  };
  %116(%var_7024) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(432), float32], Tensor[(2, 3, 11), int32], Tensor[(1920), bool], Tensor[(2, 5, 5), float64]) */
}

def @func_1691(%var_1689: Tensor[(13, 15, 7), uint16]) -> Tensor[(13, 15, 7), bool] {
  @func_1688(%var_1689) /* ty=Tensor[(13, 15, 7), bool] */
}

def @func_4313(%var_4311: Tensor[(2, 5, 5), float64]) -> Tensor[(2, 5, 5), bool] {
  @func_4310(%var_4311) /* ty=Tensor[(2, 5, 5), bool] */
}

def @func_2159(%var_2157: Tensor[(2, 5, 5), float64]) -> (Tensor[(2, 5, 5), uint8], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) {
  @func_2156(%var_2157) /* ty=(Tensor[(2, 5, 5), uint8], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) */
}

def @func_6020() -> (Tensor[(7, 195), uint16],) {
  %119 = fn () -> (Tensor[(7, 195), uint16],) {
    %117 = @func_2901() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(7, 195), uint16]) */;
    %118 = %117.2;
    (%118,)
  };
  %119() /* ty=(Tensor[(7, 195), uint16],) */
}

def @func_2990() -> Tensor[(2, 5, 5), bool] {
  %121 = fn () -> Tensor[(2, 5, 5), bool] {
    %120 = @func_1328() /* ty=(Tensor[(2, 5, 5), bool],) */;
    %120.0
  };
  %121() /* ty=Tensor[(2, 5, 5), bool] */
}

def @func_2555() -> (Tensor[(165), int16],) {
  %124 = fn () -> (Tensor[(165), int16],) {
    %122 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
    %123 = %122.4;
    (%123,)
  };
  %124() /* ty=(Tensor[(165), int16],) */
}

def @func_3819() -> Tensor[(2, 5, 5), float64] {
  %125 = @func_3534() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %125.3
}

def @func_4758() -> (Tensor[(2, 5, 5), float64],) {
  @func_4756() /* ty=(Tensor[(2, 5, 5), float64],) */
}

def @func_1172() -> (Tensor[(2, 5, 5), float64],) {
  %126 = @func_619() /* ty=Tensor[(2, 5, 5), float64] */;
  (%126,)
}

def @func_6376() -> (Tensor[(7, ?, 7), uint64], Tensor[(7, 1, 7), float64]) {
  %136 = fn () -> (Tensor[(7, ?, 7), uint64], Tensor[(7, 1, 7), float64]) {
    %127 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 1, 7), float32] */, dtype="float32") /* ty=Tensor[(7, 1, 7), float32] */;
    %128 = sigmoid(%127) /* ty=Tensor[(7, 1, 7), float32] */;
    %129 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 1, 7), float32] */, dtype="uint64") /* ty=Tensor[(7, 1, 7), uint64] */;
    %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %131 = cast(%128, dtype="uint64") /* ty=Tensor[(7, 1, 7), uint64] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %133 = cast(%128, dtype="float64") /* ty=Tensor[(7, 1, 7), float64] */;
    %134 = bitwise_or(%131, %132) /* ty=Tensor[(7, ?, 7), uint64] */;
    %135 = tan(%133) /* ty=Tensor[(7, 1, 7), float64] */;
    (%134, %135)
  };
  %136() /* ty=(Tensor[(7, ?, 7), uint64], Tensor[(7, 1, 7), float64]) */
}

def @func_4127() -> (Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), float32], Tensor[(432), float32], Tensor[(4), int8], Tensor[(392), int8]) {
  @func_4125() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), float32], Tensor[(432), float32], Tensor[(4), int8], Tensor[(392), int8]) */
}

def @func_1500() -> Tensor[(2, 5, 5), float64] {
  %138 = fn () -> Tensor[(2, 5, 5), float64] {
    %137 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
    %137.0
  };
  %138() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_4310(%var_4296: Tensor[(2, 5, 5), float64]) -> Tensor[(2, 5, 5), bool] {
  %139 = @func_1748() /* ty=Tensor[(2, 5, 5), float64] */;
  %140 = cast(%var_4296, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
  %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%139, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%142, %143) /* ty=Tensor[(2, 5, 5), bool] */
}

def @func_2970() -> Tensor[(2, 5, 5), float64] {
  %145 = fn () -> Tensor[(2, 5, 5), float64] {
    %144 = @func_1882() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %144.0
  };
  %145() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_940(%var_939: Tensor[(1920), float32]) -> (Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32], Tensor[(165), int16]) {
  %153 = fn (%var_934: Tensor[(1920), float32]) -> (Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32], Tensor[(165), int16]) {
    %146 = cast(%var_934, dtype="float32") /* ty=Tensor[(1920), float32] */;
    %147 = cast(meta[relay.Constant][8] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
    %148 = reshape(%146, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float32] */;
    %149 = reshape(%147, newshape=[165]) /* ty=Tensor[(165), int16] */;
    %150 = @func_666(%148, %149) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(10, 12, 16), int8]) */;
    %151 = @func_619() /* ty=Tensor[(2, 5, 5), float64] */;
    %152 = %150.0;
    (%151, %152, %var_934, meta[relay.Constant][8] /* ty=Tensor[(165), int16] */)
  };
  %153(%var_939) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32], Tensor[(165), int16]) */
}

def @func_801() -> (Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(11, 15, ?), bool]) {
  %168 = fn () -> (Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(11, 15, ?), bool]) {
    %154 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
    %155 = cast(meta[relay.Constant][9] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
    %156 = cast(meta[relay.Constant][9] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
    %157 = reshape(%155, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
    %158 = reshape(%156, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
    %159 = @func_196(%157, %158) /* ty=(Tensor[(11, 15, ?), bool],) */;
    %160 = %159.0;
    %161 = cast(%160, dtype="int16") /* ty=Tensor[(11, 15, ?), int16] */;
    %162 = cast(meta[relay.Constant][9] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
    %163 = reshape(%161, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
    %164 = reshape(%162, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
    %165 = @func_196(%163, %164) /* ty=(Tensor[(11, 15, ?), bool],) */;
    %166 = %154.2;
    %167 = %165.0;
    (%166, %160, meta[relay.Constant][9] /* ty=Tensor[(165), int16] */, %167)
  };
  %168() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(11, 15, ?), bool]) */
}

def @func_670(%var_668: Tensor[(10, 12, 16), float32], %var_669: Tensor[(165), int16]) -> (Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(10, 12, 16), int8]) {
  @func_666(%var_668, %var_669) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(10, 12, 16), int8]) */
}

def @func_1569(%var_1567: Tensor[(1, 1, 4), int8], %var_1568: Tensor[(7, 14, 4), int8]) -> (Tensor[(7, 14, 4), int8],) {
  %172 = fn (%var_1558: Tensor[(1, 1, 4), int8], %var_1559: Tensor[(7, 14, 4), int8]) -> (Tensor[(7, 14, 4), int8],) {
    %169 = cast(%var_1558, dtype="int8") /* ty=Tensor[(1, 1, 4), int8] */;
    %170 = cast(%var_1559, dtype="int8") /* ty=Tensor[(7, 14, 4), int8] */;
    %171 = maximum(%169, %170) /* ty=Tensor[(7, 14, 4), int8] */;
    (%171,)
  };
  %172(%var_1567, %var_1568) /* ty=(Tensor[(7, 14, 4), int8],) */
}

def @func_619() -> Tensor[(2, 5, 5), float64] {
  %173 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %173.2
}

def @func_2443() -> Tensor[(2, 5, 5), float64] {
  %174 = @func_800() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(11, 15, ?), bool]) */;
  %174.0
}

def @func_2156(%var_2111: Tensor[(2, 5, 5), float64]) -> (Tensor[(2, 5, 5), uint8], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) {
  %175 = @func_1854() /* ty=Tensor[(2, 5, 5), float64] */;
  %176 = cast(%var_2111, dtype="uint8") /* ty=Tensor[(2, 5, 5), uint8] */;
  %177 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(%175, dtype="uint8") /* ty=Tensor[(2, 5, 5), uint8] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %180 = cast(%var_2111, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
  %181 = cast(meta[relay.Constant][10] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %182 = reshape(%181, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %183 = @func_1639(%182) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) */;
  %184 = bitwise_or(%178, %179) /* ty=Tensor[(2, 5, 5), uint8] */;
  %185 = tan(%180) /* ty=Tensor[(2, 5, 5), float32] */;
  %186 = @func_1499() /* ty=Tensor[(2, 5, 5), float64] */;
  %187 = %183.3;
  (%184, %185, %186, %187, meta[relay.Constant][10] /* ty=Tensor[(432), float32] */)
}

def @func_4753() -> Tensor[(2, 5, 5), bool] {
  %188 = fn () -> Tensor[(2, 5, 5), bool] {
    @func_2989() /* ty=Tensor[(2, 5, 5), bool] */
  };
  %188() /* ty=Tensor[(2, 5, 5), bool] */
}

def @func_6606() -> (Tensor[(2, 5, 5), bool], Tensor[(3, 12, 2), float32], Tensor[(6, 12), float32], Tensor[(432), float32], Tensor[(2, 5, 5), bool]) {
  %189 = @func_4531() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %190 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 12), float32] */;
  %191 = reshape(%190, newshape=[3, 12, 2]) /* ty=Tensor[(3, 12, 2), float32] */;
  %192 = @func_6304(%191) /* ty=(Tensor[(3, 12, 2), float32], Tensor[(3, 12, 2), float64], Tensor[(3, 12, 2), bool]) */;
  %193 = cast(meta[relay.Constant][12] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %194 = reshape(%193, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %195 = @func_1639(%194) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) */;
  %196 = %195.1;
  %197 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 5, 5), bool] */, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %201 = %189.0;
  %202 = %192.0;
  %203 = logical_or(%199, %200) /* ty=Tensor[(2, 5, 5), bool] */;
  (%201, %202, meta[relay.Constant][11] /* ty=Tensor[(6, 12), float32] */, meta[relay.Constant][12] /* ty=Tensor[(432), float32] */, %203)
}

def @func_4163(%var_4160: Tensor[(1920), float32], %var_4161: Tensor[(165), int16]) -> (Tensor[(2, 5, 5), bool], Tensor[(10, 12, 16), int8], Tensor[(1920), float32], Tensor[(165), int16]) {
  %204 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %205 = cast(%var_4160, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %206 = cast(%var_4161, dtype="int16") /* ty=Tensor[(165), int16] */;
  %207 = reshape(%205, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float32] */;
  %208 = reshape(%206, newshape=[165]) /* ty=Tensor[(165), int16] */;
  %209 = @func_666(%207, %208) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(10, 12, 16), int8]) */;
  %210 = %204.1;
  %211 = %209.2;
  (%210, %211, %var_4160, %var_4161)
}

def @func_2635() -> (Tensor[(2, 5, 5), float64],) {
  @func_2633() /* ty=(Tensor[(2, 5, 5), float64],) */
}

def @func_918(%var_916: float64, %var_917: Tensor[(4, 5, 11), float64]) -> (Tensor[(4, 5, 11), float64], Tensor[(165), int16], Tensor[(2, 5, 5), float64]) {
  @func_914(%var_916, %var_917) /* ty=(Tensor[(4, 5, 11), float64], Tensor[(165), int16], Tensor[(2, 5, 5), float64]) */
}

def @func_2901() -> (Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(7, 195), uint16]) {
  %212 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 195), uint16] */, dtype="uint16") /* ty=Tensor[(7, 195), uint16] */;
  %213 = reshape(%212, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), uint16] */;
  %214 = @func_1012() /* ty=Tensor[(2, 5, 5), float64] */;
  %215 = @func_1688(%213) /* ty=Tensor[(13, 15, 7), bool] */;
  (%214, %215, meta[relay.Constant][14] /* ty=Tensor[(7, 195), uint16] */)
}

def @func_2664() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(432), float32]) {
  @func_2662() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(432), float32]) */
}

def @func_3286(%var_3285: Tensor[(1920), float32]) -> (Tensor[(1920), float64], Tensor[(1920), int16], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(220), bool]) {
  %241 = fn (%var_3240: Tensor[(1920), float32]) -> (Tensor[(1920), float64], Tensor[(1920), int16], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(220), bool]) {
    %216 = @func_2182() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
    %217 = %216.2;
    %218 = cast(%var_3240, dtype="float64") /* ty=Tensor[(1920), float64] */;
    %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(1), int32] */;
    %220 = cast(%217, dtype="float64") /* ty=Tensor[(1920), float64] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?), float64] */;
    %222 = cast(%217, dtype="int16") /* ty=Tensor[(1920), int16] */;
    %223 = shape_of(%var_3240, dtype="int32") /* ty=Tensor[(1), int32] */;
    %224 = cast(%var_3240, dtype="int16") /* ty=Tensor[(1920), int16] */;
    %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?), int16] */;
    %226 = cast(meta[relay.Constant][15] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
    %227 = reshape(%226, newshape=[5, 4, 11]) /* ty=Tensor[(5, 4, 11), float64] */;
    %228 = @func_1215(%227) /* ty=(Tensor[(5, 4, 11), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float32]) */;
    %229 = @func_1814() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) */;
    %230 = cast(meta[relay.Constant][15] /* ty=Tensor[(220), float64] */, dtype="float64") /* ty=Tensor[(220), float64] */;
    %231 = asin(%230) /* ty=Tensor[(220), float64] */;
    %232 = cast(meta[relay.Constant][15] /* ty=Tensor[(220), float64] */, dtype="bool") /* ty=Tensor[(220), bool] */;
    %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(1), int32] */;
    %234 = cast(%231, dtype="bool") /* ty=Tensor[(220), bool] */;
    %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?), bool] */;
    %236 = floor_mod(%220, %221) /* ty=Tensor[(1920), float64] */;
    %237 = add(%224, %225) /* ty=Tensor[(1920), int16] */;
    %238 = %228.2;
    %239 = %229.1;
    %240 = equal(%234, %235) /* ty=Tensor[(220), bool] */;
    (%236, %237, %238, %239, %240)
  };
  %241(%var_3285) /* ty=(Tensor[(1920), float64], Tensor[(1920), int16], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(220), bool]) */
}

def @func_5793(%var_5791: Tensor[(11, 4, 1), float64]) -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(11, 4, ?), float64], Tensor[(11, 4, ?), float64], Tensor[(11, 4, ?), bool], Tensor[(2, 5, 5), float32]) {
  @func_5790(%var_5791) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(11, 4, ?), float64], Tensor[(11, 4, ?), float64], Tensor[(11, 4, ?), bool], Tensor[(2, 5, 5), float32]) */
}

def @func_542() -> (Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) {
  %274 = fn () -> (Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) {
    %242 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 5, 5), float32] */, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
    %243 = sin(%242) /* ty=Tensor[(2, 5, 5), float32] */;
    %244 = cast(%243, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
    %245 = cast(%243, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
    %246 = asin(%245) /* ty=Tensor[(2, 5, 5), float32] */;
    %247 = cast(%243, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
    %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
    %249 = cast(%246, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
    %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %251 = cast(%243, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
    %252 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
    %253 = cast(%246, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
    %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %255 = less(%253, %254) /* ty=Tensor[(2, 5, 5), bool] */;
    %256 = cast(%255, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
    %257 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
    %258 = cast(%246, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
    %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %260 = add(%258, %259) /* ty=Tensor[(2, 5, 5), float64] */;
    %261 = cast(%260, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
    %262 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
    %263 = cast(%255, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
    %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %265 = cast(meta[relay.Constant][17] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
    %266 = cast(meta[relay.Constant][17] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
    %267 = reshape(%265, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
    %268 = reshape(%266, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
    %269 = @func_196(%267, %268) /* ty=(Tensor[(11, 15, ?), bool],) */;
    %270 = cosh(%244) /* ty=Tensor[(2, 5, 5), float32] */;
    %271 = logical_and(%249, %250) /* ty=Tensor[(2, 5, 5), bool] */;
    %272 = divide(%263, %264) /* ty=Tensor[(2, 5, 5), float64] */;
    %273 = %269.0;
    (%270, %271, %272, %273, meta[relay.Constant][17] /* ty=Tensor[(165), int16] */)
  };
  %274() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */
}

def @func_200(%var_198: Tensor[(11, 15, 1), int16], %var_199: Tensor[(11, 15, 1), int16]) -> (Tensor[(11, 15, ?), bool],) {
  @func_196(%var_198, %var_199) /* ty=(Tensor[(11, 15, ?), bool],) */
}

def @func_914(%var_839: float64, %var_840: Tensor[(4, 5, 11), float64]) -> (Tensor[(4, 5, 11), float64], Tensor[(165), int16], Tensor[(2, 5, 5), float64]) {
  %275 = cast(%var_839, dtype="float64") /* ty=float64 */;
  %276 = cast(%var_840, dtype="float64") /* ty=Tensor[(4, 5, 11), float64] */;
  %277 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %278 = %277.4;
  %279 = cast(%var_839, dtype="int16") /* ty=int16 */;
  %280 = cast(%278, dtype="int16") /* ty=Tensor[(165), int16] */;
  %281 = multiply(%275, %276) /* ty=Tensor[(4, 5, 11), float64] */;
  %282 = maximum(%279, %280) /* ty=Tensor[(165), int16] */;
  %283 = @func_619() /* ty=Tensor[(2, 5, 5), float64] */;
  (%281, %282, %283)
}

def @func_3659(%var_3646: Tensor[(1920), float32]) -> Tensor[(1920), bool] {
  %284 = @func_1266() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(165), int16], Tensor[(2, 5, 5), float64], Tensor[(225), uint8]) */;
  %285 = %284.2;
  %286 = cast(%var_3646, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(1), int32] */;
  %288 = cast(%285, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?), bool] */;
  less_equal(%288, %289) /* ty=Tensor[(1920), bool] */
}

def @func_1330() -> (Tensor[(2, 5, 5), bool],) {
  @func_1328() /* ty=(Tensor[(2, 5, 5), bool],) */
}

def @func_5663() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(1920), float32]) {
  %290 = @func_5357() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %291 = %290.0;
  %292 = cast(%291, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  %293 = reshape(%292, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
  %294 = @func_5495() /* ty=(Tensor[(2, 5, 5), bool], Tensor[(1920), float32]) */;
  %295 = @func_4310(%293) /* ty=Tensor[(2, 5, 5), bool] */;
  %296 = @func_1499() /* ty=Tensor[(2, 5, 5), float64] */;
  %297 = @func_1732() /* ty=Tensor[(2, 5, 5), float64] */;
  %298 = %294.1;
  (%291, %295, %296, %297, %298)
}

def @func_666(%var_650: Tensor[(10, 12, 16), float32], %var_660: Tensor[(165), int16]) -> (Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(10, 12, 16), int8]) {
  %299 = cast(%var_660, dtype="int16") /* ty=Tensor[(165), int16] */;
  %300 = cast(%var_660, dtype="int16") /* ty=Tensor[(165), int16] */;
  %301 = reshape(%299, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
  %302 = reshape(%300, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
  %303 = @func_196(%301, %302) /* ty=(Tensor[(11, 15, ?), bool],) */;
  %304 = cast(%var_650, dtype="float32") /* ty=Tensor[(10, 12, 16), float32] */;
  %305 = atan(%304) /* ty=Tensor[(10, 12, 16), float32] */;
  %306 = cast(%var_650, dtype="int8") /* ty=Tensor[(10, 12, 16), int8] */;
  %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%305, dtype="int8") /* ty=Tensor[(10, 12, 16), int8] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %310 = %303.0;
  %311 = bitwise_and(%308, %309) /* ty=Tensor[(10, 12, 16), int8] */;
  (%310, %var_660, %311)
}

def @func_2183() -> (Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) {
  %321 = fn () -> (Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) {
    %312 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
    %313 = cast(meta[relay.Constant][18] /* ty=Tensor[(1920), float32] */, dtype="float32") /* ty=Tensor[(1920), float32] */;
    %314 = reshape(%313, newshape=[1920]) /* ty=Tensor[(1920), float32] */;
    %315 = @func_938(%314) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32], Tensor[(165), int16]) */;
    %316 = @func_1742() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %317 = %312.1;
    %318 = %315.3;
    %319 = %316.0;
    %320 = @func_1732() /* ty=Tensor[(2, 5, 5), float64] */;
    (%317, %318, meta[relay.Constant][18] /* ty=Tensor[(1920), float32] */, %319, %320)
  };
  %321() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */
}

def @func_621() -> Tensor[(2, 5, 5), float64] {
  @func_619() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_1014() -> Tensor[(2, 5, 5), float64] {
  @func_1012() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_3535() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) {
  %330 = fn () -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) {
    %322 = @func_800() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(11, 15, ?), bool]) */;
    %323 = @func_3449() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %324 = @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %325 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
    %326 = %322.0;
    %327 = %323.0;
    %328 = %324.0;
    %329 = %325.0;
    (%326, %327, %328, %329)
  };
  %330() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */
}

def @func_6047() -> (Tensor[(2, 5, 5), float64],) {
  %333 = fn () -> (Tensor[(2, 5, 5), float64],) {
    %331 = @func_2633() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %332 = %331.0;
    (%332,)
  };
  %333() /* ty=(Tensor[(2, 5, 5), float64],) */
}

def @func_4639() -> Tensor[(1920), float32] {
  @func_4637() /* ty=Tensor[(1920), float32] */
}

def @func_5429(%var_5424: int16, %var_5425: Tensor[(4, 8, 2), int16]) -> (Tensor[(4, 8, 2), int16],) {
  %334 = cast(%var_5424, dtype="int16") /* ty=int16 */;
  %335 = cast(%var_5425, dtype="int16") /* ty=Tensor[(4, 8, 2), int16] */;
  %336 = multiply(%334, %335) /* ty=Tensor[(4, 8, 2), int16] */;
  (%336,)
}

def @func_5357() -> (Tensor[(2, 5, 5), float64],) {
  %337 = @func_1748() /* ty=Tensor[(2, 5, 5), float64] */;
  (%337,)
}

def @func_6672() -> (Tensor[(2, 5, 5), float64], Tensor[(1920), float32]) {
  %341 = fn () -> (Tensor[(2, 5, 5), float64], Tensor[(1920), float32]) {
    %338 = @func_3449() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %339 = %338.0;
    %340 = @func_4637() /* ty=Tensor[(1920), float32] */;
    (%339, %340)
  };
  %341() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(1920), float32]) */
}

def @func_1733() -> Tensor[(2, 5, 5), float64] {
  %343 = fn () -> Tensor[(2, 5, 5), float64] {
    %342 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
    %342.1
  };
  %343() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_5004(%var_5001: Tensor[(15, 2, 5), float64], %var_5002: Tensor[(15, 2, 5), float64], %var_5003: Tensor[(15, 2, 5), float64]) -> (Tensor[(15, 2, 5), uint32],) {
  %354 = fn (%var_4990: Tensor[(15, 2, 5), float64], %var_4991: Tensor[(15, 2, 5), float64], %var_4996: Tensor[(15, 2, 5), float64]) -> (Tensor[(15, 2, 5), uint32],) {
    %344 = cast(%var_4991, dtype="float64") /* ty=Tensor[(15, 2, 5), float64] */;
    %345 = shape_of(%var_4990, dtype="int32") /* ty=Tensor[(3), int32] */;
    %346 = cast(%var_4990, dtype="float64") /* ty=Tensor[(15, 2, 5), float64] */;
    %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %348 = divide(%346, %347) /* ty=Tensor[(15, 2, 5), float64] */;
    %349 = cast(%var_4996, dtype="uint32") /* ty=Tensor[(15, 2, 5), uint32] */;
    %350 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
    %351 = cast(%348, dtype="uint32") /* ty=Tensor[(15, 2, 5), uint32] */;
    %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %353 = multiply(%351, %352) /* ty=Tensor[(15, 2, 5), uint32] */;
    (%353,)
  };
  %354(%var_5001, %var_5002, %var_5003) /* ty=(Tensor[(15, 2, 5), uint32],) */
}

def @func_4167(%var_4165: Tensor[(1920), float32], %var_4166: Tensor[(165), int16]) -> (Tensor[(2, 5, 5), bool], Tensor[(10, 12, 16), int8], Tensor[(1920), float32], Tensor[(165), int16]) {
  @func_4163(%var_4165, %var_4166) /* ty=(Tensor[(2, 5, 5), bool], Tensor[(10, 12, 16), int8], Tensor[(1920), float32], Tensor[(165), int16]) */
}

def @func_6909() -> Tensor[(2, 5, 5), float64] {
  %356 = fn () -> Tensor[(2, 5, 5), float64] {
    %355 = @func_4756() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %355.0
  };
  %356() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_6881(%var_6879: Tensor[(4, 1), int8], %var_6880: Tensor[(392), int8]) -> (Tensor[(2, 5, 5), uint8], Tensor[(2, 5, 5), float64], Tensor[(7, 14, 4), int8], Tensor[(4, 1), int8], Tensor[(392), int8]) {
  %367 = fn (%var_6811: Tensor[(4, 1), int8], %var_6812: Tensor[(392), int8]) -> (Tensor[(2, 5, 5), uint8], Tensor[(2, 5, 5), float64], Tensor[(7, 14, 4), int8], Tensor[(4, 1), int8], Tensor[(392), int8]) {
    %357 = @func_6411() /* ty=(Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), uint8], Tensor[(336), float64]) */;
    %358 = @func_4246() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32]) */;
    %359 = cast(%var_6811, dtype="int8") /* ty=Tensor[(4, 1), int8] */;
    %360 = cast(%var_6812, dtype="int8") /* ty=Tensor[(392), int8] */;
    %361 = reshape(%359, newshape=[1, 1, 4]) /* ty=Tensor[(1, 1, 4), int8] */;
    %362 = reshape(%360, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), int8] */;
    %363 = @func_1566(%361, %362) /* ty=(Tensor[(7, 14, 4), int8],) */;
    %364 = %357.1;
    %365 = %358.0;
    %366 = %363.0;
    (%364, %365, %366, %var_6811, %var_6812)
  };
  %367(%var_6879, %var_6880) /* ty=(Tensor[(2, 5, 5), uint8], Tensor[(2, 5, 5), float64], Tensor[(7, 14, 4), int8], Tensor[(4, 1), int8], Tensor[(392), int8]) */
}

def @main(%var_7159: Tensor[(3, 11, 7), int64], %var_7160: Tensor[(3, 11, 7), int64]) -> Tensor[(3, 11, 7), int64] {
  %368 = cast(%var_7160, dtype="int64") /* ty=Tensor[(3, 11, 7), int64] */;
  %369 = shape_of(%var_7159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%var_7159, dtype="int64") /* ty=Tensor[(3, 11, 7), int64] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  minimum(%370, %371) /* ty=Tensor[(3, 11, 7), int64] */
}

def @func_2903() -> (Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(7, 195), uint16]) {
  @func_2901() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(7, 195), uint16]) */
}

def @func_5721(%var_5719: Tensor[(392), int8]) -> (Tensor[(2, 5, 5), float64], Tensor[(392), uint8], Tensor[(2, 5, 5), float64]) {
  @func_5718(%var_5719) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(392), uint8], Tensor[(2, 5, 5), float64]) */
}

def @func_5319(%var_5317: Tensor[(9, 16, 3), uint64], %var_5318: Tensor[(1350), int16]) -> (Tensor[(9, 16, 3), int8], Tensor[(15, 6, 15), float64], Tensor[(9), int16], Tensor[(1350), int16], Tensor[(50), float64]) {
  %387 = fn (%var_5288: Tensor[(9, 16, 3), uint64], %var_5303: Tensor[(1350), int16]) -> (Tensor[(9, 16, 3), int8], Tensor[(15, 6, 15), float64], Tensor[(9), int16], Tensor[(1350), int16], Tensor[(50), float64]) {
    %372 = @func_4029() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64]) */;
    %373 = %372.1;
    %374 = cast(%var_5288, dtype="int8") /* ty=Tensor[(9, 16, 3), int8] */;
    %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
    %376 = cast(%373, dtype="int8") /* ty=Tensor[(9, 16, 3), int8] */;
    %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %378 = cast(meta[relay.Constant][19] /* ty=Tensor[(9), int16] */, dtype="int16") /* ty=Tensor[(9), int16] */;
    %379 = cast(%var_5303, dtype="int16") /* ty=Tensor[(1350), int16] */;
    %380 = cast(meta[relay.Constant][20] /* ty=Tensor[(50), float64] */, dtype="float64") /* ty=Tensor[(50), float64] */;
    %381 = reshape(%378, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), int16] */;
    %382 = reshape(%379, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int16] */;
    %383 = reshape(%380, newshape=[10, 5]) /* ty=Tensor[(10, 5), float64] */;
    %384 = @func_3910(%381, %382, %383) /* ty=(Tensor[(1, 3, 3), int16], Tensor[(15, 6, 15), int8], Tensor[(2, 5, 5), float32], Tensor[(10, 5), float64], Tensor[(15, 6, 15), float64]) */;
    %385 = left_shift(%376, %377) /* ty=Tensor[(9, 16, 3), int8] */;
    %386 = %384.4;
    (%385, %386, meta[relay.Constant][19] /* ty=Tensor[(9), int16] */, %var_5303, meta[relay.Constant][20] /* ty=Tensor[(50), float64] */)
  };
  %387(%var_5317, %var_5318) /* ty=(Tensor[(9, 16, 3), int8], Tensor[(15, 6, 15), float64], Tensor[(9), int16], Tensor[(1350), int16], Tensor[(50), float64]) */
}

def @func_1102(%var_1100: Tensor[(1, 15, 12), float64], %var_1101: Tensor[(1920), float32]) -> (Tensor[(4, 15, 12), float64], Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(11, 15, 2), int8]) {
  %408 = fn (%var_1030: Tensor[(1, 15, 12), float64], %var_1066: Tensor[(1920), float32]) -> (Tensor[(4, 15, 12), float64], Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(11, 15, 2), int8]) {
    %388 = cast(%var_1030, dtype="float64") /* ty=Tensor[(1, 15, 12), float64] */;
    %389 = cast(meta[relay.Constant][21] /* ty=Tensor[(4, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 15, 12), float64] */;
    %390 = @func_800() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(11, 15, ?), bool]) */;
    %391 = cast(%var_1066, dtype="float32") /* ty=Tensor[(1920), float32] */;
    %392 = reshape(%391, newshape=[1920]) /* ty=Tensor[(1920), float32] */;
    %393 = @func_938(%392) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32], Tensor[(165), int16]) */;
    %394 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
    %395 = cast(%var_1066, dtype="float32") /* ty=Tensor[(1920), float32] */;
    %396 = reshape(%395, newshape=[1920]) /* ty=Tensor[(1920), float32] */;
    %397 = @func_938(%396) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32], Tensor[(165), int16]) */;
    %398 = %397.1;
    %399 = cast(%398, dtype="int8") /* ty=Tensor[(11, 15, ?), int8] */;
    %400 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 15, 2), bool] */, dtype="int8") /* ty=Tensor[(11, 15, 2), int8] */;
    %401 = floor_divide(%388, %389) /* ty=Tensor[(4, 15, 12), float64] */;
    %402 = %390.1;
    %403 = @func_619() /* ty=Tensor[(2, 5, 5), float64] */;
    %404 = %393.0;
    %405 = @func_619() /* ty=Tensor[(2, 5, 5), float64] */;
    %406 = %394.3;
    %407 = left_shift(%399, %400) /* ty=Tensor[(11, 15, 2), int8] */;
    (%401, %402, %403, %404, %var_1066, %405, %406, %407)
  };
  %408(%var_1100, %var_1101) /* ty=(Tensor[(4, 15, 12), float64], Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(11, 15, 2), int8]) */
}

def @func_5993() -> Tensor[(1920), float64] {
  %409 = @func_4637() /* ty=Tensor[(1920), float32] */;
  %410 = cast(%409, dtype="float64") /* ty=Tensor[(1920), float64] */;
  log2(%410) /* ty=Tensor[(1920), float64] */
}

def @func_3367() -> (Tensor[(2, 5, 5), float64],) {
  @func_3365() /* ty=(Tensor[(2, 5, 5), float64],) */
}

def @func_2445() -> Tensor[(2, 5, 5), float64] {
  @func_2443() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_4247() -> (Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32]) {
  %416 = fn () -> (Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32]) {
    %411 = cast(meta[relay.Constant][23] /* ty=Tensor[(1920), float32] */, dtype="float32") /* ty=Tensor[(1920), float32] */;
    %412 = reshape(%411, newshape=[1920]) /* ty=Tensor[(1920), float32] */;
    %413 = @func_938(%412) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32], Tensor[(165), int16]) */;
    %414 = @func_1748() /* ty=Tensor[(2, 5, 5), float64] */;
    %415 = %413.1;
    (%414, %415, meta[relay.Constant][23] /* ty=Tensor[(1920), float32] */)
  };
  %416() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32]) */
}

def @func_6124(%var_6122: Tensor[(432), uint64], %var_6123: Tensor[(27, 50), int16]) -> (Tensor[(165), int16], Tensor[(165), int16], Tensor[(165), int16], Tensor[(15, 6, 15), float64], Tensor[(432), uint64], Tensor[(27, 50), int16]) {
  %429 = fn (%var_6110: Tensor[(432), uint64], %var_6111: Tensor[(27, 50), int16]) -> (Tensor[(165), int16], Tensor[(165), int16], Tensor[(165), int16], Tensor[(15, 6, 15), float64], Tensor[(432), uint64], Tensor[(27, 50), int16]) {
    %417 = @func_2554() /* ty=(Tensor[(165), int16],) */;
    %418 = @func_5469() /* ty=(Tensor[(165), int16], Tensor[(2, 3, 11), int32], Tensor[(66), int32], Tensor[(2, 5, 5), float64]) */;
    %419 = @func_2554() /* ty=(Tensor[(165), int16],) */;
    %420 = cast(%var_6110, dtype="uint64") /* ty=Tensor[(432), uint64] */;
    %421 = cast(%var_6111, dtype="int16") /* ty=Tensor[(27, 50), int16] */;
    %422 = reshape(%420, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), uint64] */;
    %423 = reshape(%421, newshape=[1350]) /* ty=Tensor[(1350), int16] */;
    %424 = @func_5316(%422, %423) /* ty=(Tensor[(9, 16, 3), int8], Tensor[(15, 6, 15), float64], Tensor[(9), int16], Tensor[(1350), int16], Tensor[(50), float64]) */;
    %425 = %417.0;
    %426 = %418.0;
    %427 = %419.0;
    %428 = %424.1;
    (%425, %426, %427, %428, %var_6110, %var_6111)
  };
  %429(%var_6122, %var_6123) /* ty=(Tensor[(165), int16], Tensor[(165), int16], Tensor[(165), int16], Tensor[(15, 6, 15), float64], Tensor[(432), uint64], Tensor[(27, 50), int16]) */
}

def @func_6507() -> (Tensor[(5, 3, 14), float32], Tensor[(5, 3, 14), float32]) {
  %436 = fn () -> (Tensor[(5, 3, 14), float32], Tensor[(5, 3, 14), float32]) {
    %430 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(5, 3, 14), float32] */;
    %431 = rsqrt(%430) /* ty=Tensor[(5, 3, 14), float32] */;
    %432 = cast(%431, dtype="float32") /* ty=Tensor[(5, 3, 14), float32] */;
    %433 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 3, 14), float32] */, dtype="float32") /* ty=Tensor[(5, 3, 14), float32] */;
    %434 = log(%432) /* ty=Tensor[(5, 3, 14), float32] */;
    %435 = sinh(%433) /* ty=Tensor[(5, 3, 14), float32] */;
    (%434, %435)
  };
  %436() /* ty=(Tensor[(5, 3, 14), float32], Tensor[(5, 3, 14), float32]) */
}

def @func_1816() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) {
  @func_1814() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) */
}

def @func_1217(%var_1216: Tensor[(5, 4, 11), float64]) -> (Tensor[(5, 4, 11), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float32]) {
  %443 = fn (%var_1194: Tensor[(5, 4, 11), float64]) -> (Tensor[(5, 4, 11), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float32]) {
    %437 = cast(%var_1194, dtype="float64") /* ty=Tensor[(5, 4, 11), float64] */;
    %438 = @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %439 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
    %440 = atan(%437) /* ty=Tensor[(5, 4, 11), float64] */;
    %441 = %438.0;
    %442 = %439.0;
    (%440, %441, %442)
  };
  %443(%var_1216) /* ty=(Tensor[(5, 4, 11), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float32]) */
}

def @func_6304(%var_6271: Tensor[(3, 12, 2), float32]) -> (Tensor[(3, 12, 2), float32], Tensor[(3, 12, 2), float64], Tensor[(3, 12, 2), bool]) {
  %444 = cast(%var_6271, dtype="float32") /* ty=Tensor[(3, 12, 2), float32] */;
  %445 = cast(%var_6271, dtype="float32") /* ty=Tensor[(3, 12, 2), float32] */;
  %446 = exp(%445) /* ty=Tensor[(3, 12, 2), float32] */;
  %447 = cast(%446, dtype="float64") /* ty=Tensor[(3, 12, 2), float64] */;
  %448 = cast(%var_6271, dtype="bool") /* ty=Tensor[(3, 12, 2), bool] */;
  %449 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%446, dtype="bool") /* ty=Tensor[(3, 12, 2), bool] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %452 = rsqrt(%444) /* ty=Tensor[(3, 12, 2), float32] */;
  %453 = cos(%447) /* ty=Tensor[(3, 12, 2), float64] */;
  %454 = less(%450, %451) /* ty=Tensor[(3, 12, 2), bool] */;
  (%452, %453, %454)
}

def @func_4497() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) {
  %459 = fn () -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) {
    %455 = @func_3365() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %456 = @func_4182() /* ty=(Tensor[(2, 5, 5), bool],) */;
    %457 = %455.0;
    %458 = %456.0;
    (%457, %458)
  };
  %459() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) */
}

def @func_1743() -> (Tensor[(2, 5, 5), float64],) {
  %461 = fn () -> (Tensor[(2, 5, 5), float64],) {
    %460 = @func_1012() /* ty=Tensor[(2, 5, 5), float64] */;
    (%460,)
  };
  %461() /* ty=(Tensor[(2, 5, 5), float64],) */
}

def @func_3914(%var_3911: Tensor[(1, 3, 3), int16], %var_3912: Tensor[(15, 6, 15), int16], %var_3913: Tensor[(10, 5), float64]) -> (Tensor[(1, 3, 3), int16], Tensor[(15, 6, 15), int8], Tensor[(2, 5, 5), float32], Tensor[(10, 5), float64], Tensor[(15, 6, 15), float64]) {
  %473 = fn (%var_3881: Tensor[(1, 3, 3), int16], %var_3885: Tensor[(15, 6, 15), int16], %var_3904: Tensor[(10, 5), float64]) -> (Tensor[(1, 3, 3), int16], Tensor[(15, 6, 15), int8], Tensor[(2, 5, 5), float32], Tensor[(10, 5), float64], Tensor[(15, 6, 15), float64]) {
    %462 = cast(meta[relay.Constant][25] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %463 = cast(%var_3881, dtype="int16") /* ty=Tensor[(1, 3, 3), int16] */;
    %464 = cast(meta[relay.Constant][25] /* ty=int16 */, dtype="int8") /* ty=int8 */;
    %465 = cast(%var_3885, dtype="int8") /* ty=Tensor[(15, 6, 15), int8] */;
    %466 = cast(%var_3904, dtype="float64") /* ty=Tensor[(10, 5), float64] */;
    %467 = reshape(%466, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
    %468 = cast(%var_3885, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
    %469 = bitwise_xor(%462, %463) /* ty=Tensor[(1, 3, 3), int16] */;
    %470 = bitwise_xor(%464, %465) /* ty=Tensor[(15, 6, 15), int8] */;
    %471 = @func_2513(%467) /* ty=Tensor[(2, 5, 5), float32] */;
    %472 = cosh(%468) /* ty=Tensor[(15, 6, 15), float64] */;
    (%469, %470, %471, %var_3904, %472)
  };
  %473(%var_3911, %var_3912, %var_3913) /* ty=(Tensor[(1, 3, 3), int16], Tensor[(15, 6, 15), int8], Tensor[(2, 5, 5), float32], Tensor[(10, 5), float64], Tensor[(15, 6, 15), float64]) */
}

def @func_1855() -> Tensor[(2, 5, 5), float64] {
  %474 = fn () -> Tensor[(2, 5, 5), float64] {
    @func_619() /* ty=Tensor[(2, 5, 5), float64] */
  };
  %474() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_6241(%var_6240: Tensor[(16), float32]) -> (Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(13, 15, 7), bool], Tensor[(16), float32], Tensor[(1, 1365), uint16], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64]) {
  %496 = fn (%var_6204: Tensor[(16), float32]) -> (Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(13, 15, 7), bool], Tensor[(16), float32], Tensor[(1, 1365), uint16], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64]) {
    %475 = @func_2969() /* ty=Tensor[(2, 5, 5), float64] */;
    %476 = cast(%475, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
    %477 = cast(meta[relay.Constant][26] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
    %478 = cast(meta[relay.Constant][26] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
    %479 = reshape(%477, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
    %480 = reshape(%478, newshape=[11, 15, 1]) /* ty=Tensor[(11, 15, 1), int16] */;
    %481 = @func_196(%479, %480) /* ty=(Tensor[(11, 15, ?), bool],) */;
    %482 = @func_1266() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(165), int16], Tensor[(2, 5, 5), float64], Tensor[(225), uint8]) */;
    %483 = cast(%var_6204, dtype="float32") /* ty=Tensor[(16), float32] */;
    %484 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 1365), uint16] */, dtype="uint16") /* ty=Tensor[(1, 1365), uint16] */;
    %485 = reshape(%483, newshape=[2, 8, 1]) /* ty=Tensor[(2, 8, 1), float32] */;
    %486 = reshape(%484, newshape=[1365]) /* ty=Tensor[(1365), uint16] */;
    %487 = @func_3699(%485, %486) /* ty=(Tensor[(13, 15, 7), bool], Tensor[(1365), uint16], Tensor[(2, 8, ?), bool]) */;
    %488 = @func_4496() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) */;
    %489 = @func_2633() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %490 = acosh(%476) /* ty=Tensor[(2, 5, 5), float64] */;
    %491 = %481.0;
    %492 = %482.2;
    %493 = %487.0;
    %494 = %488.1;
    %495 = %489.0;
    (%490, %491, meta[relay.Constant][26] /* ty=Tensor[(165), int16] */, %492, %493, %var_6204, meta[relay.Constant][27] /* ty=Tensor[(1, 1365), uint16] */, %494, %495)
  };
  %496(%var_6240) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(13, 15, 7), bool], Tensor[(16), float32], Tensor[(1, 1365), uint16], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64]) */
}

def @func_5718(%var_5703: Tensor[(392), int8]) -> (Tensor[(2, 5, 5), float64], Tensor[(392), uint8], Tensor[(2, 5, 5), float64]) {
  %497 = @func_2182() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %498 = @func_4125() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), float32], Tensor[(432), float32], Tensor[(4), int8], Tensor[(392), int8]) */;
  %499 = %498.4;
  %500 = cast(%var_5703, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(1), int32] */;
  %502 = cast(%499, dtype="uint8") /* ty=Tensor[(392), uint8] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %504 = @func_1814() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) */;
  %505 = %497.3;
  %506 = multiply(%502, %503) /* ty=Tensor[(392), uint8] */;
  %507 = %504.1;
  (%505, %506, %507)
}

def @func_4357(%var_4356: Tensor[(3, 7, 8), float32]) -> (Tensor[(3, 7, 8), int32],) {
  %515 = fn (%var_4343: Tensor[(3, 7, 8), float32]) -> (Tensor[(3, 7, 8), int32],) {
    %508 = cast(%var_4343, dtype="float32") /* ty=Tensor[(3, 7, 8), float32] */;
    %509 = atan(%508) /* ty=Tensor[(3, 7, 8), float32] */;
    %510 = cast(%var_4343, dtype="int32") /* ty=Tensor[(3, 7, 8), int32] */;
    %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
    %512 = cast(%509, dtype="int32") /* ty=Tensor[(3, 7, 8), int32] */;
    %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %514 = maximum(%512, %513) /* ty=Tensor[(3, 7, 8), int32] */;
    (%514,)
  };
  %515(%var_4356) /* ty=(Tensor[(3, 7, 8), int32],) */
}

def @func_4800() -> (Tensor[(2, 5, 5), float64],) {
  %518 = fn () -> (Tensor[(2, 5, 5), float64],) {
    %516 = @func_2901() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(7, 195), uint16]) */;
    %517 = %516.0;
    (%517,)
  };
  %518() /* ty=(Tensor[(2, 5, 5), float64],) */
}

def @func_5851(%var_5844: Tensor[(6, 1, 16), uint16], %var_5845: Tensor[(6, 9, 16), uint16]) -> (Tensor[(6, 9, 16), uint16],) {
  %519 = cast(%var_5844, dtype="uint16") /* ty=Tensor[(6, 1, 16), uint16] */;
  %520 = cast(%var_5845, dtype="uint16") /* ty=Tensor[(6, 9, 16), uint16] */;
  %521 = logical_xor(%519, %520) /* ty=Tensor[(6, 9, 16), uint16] */;
  (%521,)
}

def @func_4012(%var_4008: Tensor[(165), int16], %var_4009: Tensor[(165), bool], %var_4010: float64, %var_4011: Tensor[(220), float64]) -> (Tensor[(165), int16], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(165), bool], Tensor[(165), float64], Tensor[(165), int16], Tensor[(2, 5, 5), uint16], Tensor[(165), int16], float64, Tensor[(220), float64]) {
  @func_4006(%var_4008, %var_4009, %var_4010, %var_4011) /* ty=(Tensor[(165), int16], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(165), bool], Tensor[(165), float64], Tensor[(165), int16], Tensor[(2, 5, 5), uint16], Tensor[(165), int16], float64, Tensor[(220), float64]) */
}

def @func_5587() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) {
  %522 = @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %523 = @func_4125() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), float32], Tensor[(432), float32], Tensor[(4), int8], Tensor[(392), int8]) */;
  %524 = %522.0;
  %525 = @func_619() /* ty=Tensor[(2, 5, 5), float64] */;
  %526 = %523.0;
  (%524, %525, %526)
}

def @func_4030() -> (Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64]) {
  %533 = fn () -> (Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64]) {
    %527 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
    %528 = %527.1;
    %529 = cast(%528, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
    %530 = reshape(%529, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
    %531 = @func_2156(%530) /* ty=(Tensor[(2, 5, 5), uint8], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) */;
    %532 = %531.3;
    (%528, %532)
  };
  %533() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64]) */
}

def @func_1266() -> (Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(165), int16], Tensor[(2, 5, 5), float64], Tensor[(225), uint8]) {
  %534 = cast(meta[relay.Constant][28] /* ty=Tensor[(1920), float32] */, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %535 = cast(meta[relay.Constant][29] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
  %536 = reshape(%534, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float32] */;
  %537 = reshape(%535, newshape=[165]) /* ty=Tensor[(165), int16] */;
  %538 = @func_666(%536, %537) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(10, 12, 16), int8]) */;
  %539 = cast(meta[relay.Constant][30] /* ty=Tensor[(225), uint8] */, dtype="uint8") /* ty=Tensor[(225), uint8] */;
  %540 = reshape(%539, newshape=[15, 15, 1]) /* ty=Tensor[(15, 15, 1), uint8] */;
  %541 = @func_687(%540) /* ty=(Tensor[(15, 15, 8), bool], Tensor[(2, 5, 5), float64]) */;
  %542 = @func_1012() /* ty=Tensor[(2, 5, 5), float64] */;
  %543 = %538.1;
  %544 = %541.1;
  (%542, %543, meta[relay.Constant][28] /* ty=Tensor[(1920), float32] */, meta[relay.Constant][29] /* ty=Tensor[(165), int16] */, %544, meta[relay.Constant][30] /* ty=Tensor[(225), uint8] */)
}

def @func_1639(%var_1579: Tensor[(432), float32]) -> (Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) {
  %545 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %546 = @func_1328() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %547 = @func_800() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(11, 15, ?), bool]) */;
  %548 = cast(%var_1579, dtype="float32") /* ty=Tensor[(432), float32] */;
  %549 = reshape(%548, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
  %550 = @func_1412(%549) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(2, 5, 5), float64]) */;
  %551 = %550.0;
  %552 = cast(%var_1579, dtype="bool") /* ty=Tensor[(432), bool] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%551, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %556 = logical_and(%554, %555) /* ty=Tensor[(9, 16, 3), bool] */;
  %557 = cast(%556, dtype="uint64") /* ty=Tensor[(9, 16, 3), uint64] */;
  %558 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%551, dtype="uint64") /* ty=Tensor[(9, 16, 3), uint64] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %561 = @func_1328() /* ty=(Tensor[(2, 5, 5), bool],) */;
  %562 = %545.3;
  %563 = %546.0;
  %564 = %547.0;
  %565 = bitwise_and(%559, %560) /* ty=Tensor[(9, 16, 3), uint64] */;
  %566 = @func_1499() /* ty=Tensor[(2, 5, 5), float64] */;
  %567 = %561.0;
  (%562, %563, %564, %565, %566, %567)
}

def @func_1370() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) {
  %568 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %569 = @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %570 = %568.2;
  %571 = %569.0;
  (%570, %571)
}

def @func_6483(%var_6481: Tensor[(11, 16, 13), float64]) -> (Tensor[(11, 16, 13), float32], Tensor[(2, 5, 5), float64]) {
  @func_6480(%var_6481) /* ty=(Tensor[(11, 16, 13), float32], Tensor[(2, 5, 5), float64]) */
}

def @func_1814() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) {
  %572 = cast(meta[relay.Constant][31] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %573 = reshape(%572, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %574 = @func_1639(%573) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) */;
  %575 = @func_1732() /* ty=Tensor[(2, 5, 5), float64] */;
  %576 = @func_1499() /* ty=Tensor[(2, 5, 5), float64] */;
  %577 = %574.3;
  (%575, %576, %577, meta[relay.Constant][31] /* ty=Tensor[(432), float32] */)
}

def @func_3702(%var_3700: Tensor[(2, 8, 1), float32], %var_3701: Tensor[(1365), uint16]) -> (Tensor[(13, 15, 7), bool], Tensor[(1365), uint16], Tensor[(2, 8, ?), bool]) {
  %593 = fn (%var_3664: Tensor[(2, 8, 1), float32], %var_3679: Tensor[(1365), uint16]) -> (Tensor[(13, 15, 7), bool], Tensor[(1365), uint16], Tensor[(2, 8, ?), bool]) {
    %578 = cast(%var_3679, dtype="uint16") /* ty=Tensor[(1365), uint16] */;
    %579 = reshape(%578, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), uint16] */;
    %580 = cast(%var_3664, dtype="float32") /* ty=Tensor[(2, 8, 1), float32] */;
    %581 = exp(%580) /* ty=Tensor[(2, 8, 1), float32] */;
    %582 = cast(%var_3664, dtype="float32") /* ty=Tensor[(2, 8, 1), float32] */;
    %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
    %584 = cast(%581, dtype="float32") /* ty=Tensor[(2, 8, 1), float32] */;
    %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %586 = mod(%584, %585) /* ty=Tensor[(2, 8, ?), float32] */;
    %587 = cast(%581, dtype="bool") /* ty=Tensor[(2, 8, 1), bool] */;
    %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
    %589 = cast(%586, dtype="bool") /* ty=Tensor[(2, 8, ?), bool] */;
    %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %591 = @func_1688(%579) /* ty=Tensor[(13, 15, 7), bool] */;
    %592 = not_equal(%589, %590) /* ty=Tensor[(2, 8, ?), bool] */;
    (%591, %var_3679, %592)
  };
  %593(%var_3700, %var_3701) /* ty=(Tensor[(13, 15, 7), bool], Tensor[(1365), uint16], Tensor[(2, 8, ?), bool]) */
}

def @func_4756() -> (Tensor[(2, 5, 5), float64],) {
  %594 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %595 = %594.0;
  (%595,)
}

def @func_4876(%var_4874: bool, %var_4875: Tensor[(12, 16, 1), bool]) -> (Tensor[(12, 16, 1), int32],) {
  %604 = fn (%var_4863: bool, %var_4864: Tensor[(12, 16, 1), bool]) -> (Tensor[(12, 16, 1), int32],) {
    %596 = cast(%var_4863, dtype="bool") /* ty=bool */;
    %597 = cast(%var_4864, dtype="bool") /* ty=Tensor[(12, 16, 1), bool] */;
    %598 = logical_or(%596, %597) /* ty=Tensor[(12, 16, 1), bool] */;
    %599 = cast(%598, dtype="float64") /* ty=Tensor[(12, 16, 1), float64] */;
    %600 = log(%599) /* ty=Tensor[(12, 16, 1), float64] */;
    %601 = cast(%600, dtype="int32") /* ty=Tensor[(12, 16, 1), int32] */;
    %602 = cast(%var_4863, dtype="int32") /* ty=int32 */;
    %603 = right_shift(%601, %602) /* ty=Tensor[(12, 16, 1), int32] */;
    (%603,)
  };
  %604(%var_4874, %var_4875) /* ty=(Tensor[(12, 16, 1), int32],) */
}

def @func_3226(%var_3225: Tensor[(165), int16]) -> (Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(165), float32]) {
  %619 = fn (%var_3206: Tensor[(165), int16]) -> (Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(165), float32]) {
    %605 = @func_1328() /* ty=(Tensor[(2, 5, 5), bool],) */;
    %606 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
    %607 = %606.4;
    %608 = cast(%var_3206, dtype="uint8") /* ty=Tensor[(165), uint8] */;
    %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(1), int32] */;
    %610 = cast(%607, dtype="uint8") /* ty=Tensor[(165), uint8] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %612 = left_shift(%610, %611) /* ty=Tensor[(165), uint8] */;
    %613 = cast(%612, dtype="float64") /* ty=Tensor[(165), float64] */;
    %614 = sin(%613) /* ty=Tensor[(165), float64] */;
    %615 = cast(%614, dtype="float32") /* ty=Tensor[(165), float32] */;
    %616 = %605.0;
    %617 = @func_1674() /* ty=Tensor[(2, 5, 5), float64] */;
    %618 = acos(%615) /* ty=Tensor[(165), float32] */;
    (%616, %617, %618)
  };
  %619(%var_3225) /* ty=(Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(165), float32]) */
}

def @func_6412() -> (Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), uint8], Tensor[(336), float64]) {
  %632 = fn () -> (Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), uint8], Tensor[(336), float64]) {
    %620 = @func_4531() /* ty=(Tensor[(2, 5, 5), bool],) */;
    %621 = cast(meta[relay.Constant][32] /* ty=Tensor[(336), int32] */, dtype="int32") /* ty=Tensor[(336), int32] */;
    %622 = cast(meta[relay.Constant][32] /* ty=Tensor[(336), int32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %623 = %620.0;
    %624 = cast(%623, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
    %625 = reshape(%621, newshape=[4, 12, 7]) /* ty=Tensor[(4, 12, 7), int32] */;
    %626 = reshape(%622, newshape=[4, 12, 7]) /* ty=Tensor[(4, 12, 7), float32] */;
    %627 = reshape(%624, newshape=[50]) /* ty=Tensor[(50), float64] */;
    %628 = @func_4452(%625, %626, %627) /* ty=(Tensor[(4, 12, 7), int32], Tensor[(4, 12, 7), bool], Tensor[(4, 12, 7), uint64], Tensor[(4, 12, 7), bool], Tensor[(4, 12, 7), float32], Tensor[(2, 5, 5), uint8], Tensor[(50), float64]) */;
    %629 = cast(meta[relay.Constant][32] /* ty=Tensor[(336), int32] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %630 = %628.5;
    %631 = asinh(%629) /* ty=Tensor[(336), float64] */;
    (%623, %630, %631)
  };
  %632() /* ty=(Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), uint8], Tensor[(336), float64]) */
}

def @func_196(%var_191: Tensor[(11, 15, 1), int16], %var_192: Tensor[(11, 15, 1), int16]) -> (Tensor[(11, 15, ?), bool],) {
  %633 = cast(%var_192, dtype="bool") /* ty=Tensor[(11, 15, 1), bool] */;
  %634 = shape_of(%var_191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%var_191, dtype="bool") /* ty=Tensor[(11, 15, 1), bool] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %637 = greater_equal(%635, %636) /* ty=Tensor[(11, 15, ?), bool] */;
  (%637,)
}

def @func_1328() -> (Tensor[(2, 5, 5), bool],) {
  %638 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %639 = %638.1;
  (%639,)
}

def @func_3365() -> (Tensor[(2, 5, 5), float64],) {
  %640 = @func_1732() /* ty=Tensor[(2, 5, 5), float64] */;
  (%640,)
}

def @func_5234(%var_5232: Tensor[(4), int8]) -> (Tensor[(2, 5, 5), float64], Tensor[(7, 14, 4), int8], Tensor[(4), int8], Tensor[(98, 4), int8]) {
  @func_5231(%var_5232) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(7, 14, 4), int8], Tensor[(4), int8], Tensor[(98, 4), int8]) */
}

def @func_2515(%var_2514: Tensor[(2, 5, 5), float64]) -> Tensor[(2, 5, 5), float32] {
  %646 = fn (%var_2472: Tensor[(2, 5, 5), float64]) -> Tensor[(2, 5, 5), float32] {
    %641 = @func_1930() /* ty=Tensor[(2, 5, 5), float64] */;
    %642 = cast(%var_2472, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
    %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %644 = cast(%641, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%644, %645) /* ty=Tensor[(2, 5, 5), float32] */
  };
  %646(%var_2514) /* ty=Tensor[(2, 5, 5), float32] */
}

def @func_6535() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool], Tensor[(165), int16]) {
  %652 = fn () -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool], Tensor[(165), int16]) {
    %647 = cast(meta[relay.Constant][33] /* ty=Tensor[(165), int16] */, dtype="int16") /* ty=Tensor[(165), int16] */;
    %648 = reshape(%647, newshape=[165]) /* ty=Tensor[(165), int16] */;
    %649 = @func_3224(%648) /* ty=(Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(165), float32]) */;
    %650 = @func_1732() /* ty=Tensor[(2, 5, 5), float64] */;
    %651 = %649.0;
    (%650, %651, meta[relay.Constant][33] /* ty=Tensor[(165), int16] */)
  };
  %652() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool], Tensor[(165), int16]) */
}

def @func_4006(%var_3944: Tensor[(165), int16], %var_3968: Tensor[(165), bool], %var_4001: float64, %var_4002: Tensor[(220), float64]) -> (Tensor[(165), int16], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(165), bool], Tensor[(165), float64], Tensor[(165), int16], Tensor[(2, 5, 5), uint16], Tensor[(165), int16], float64, Tensor[(220), float64]) {
  %653 = cast(meta[relay.Constant][34] /* ty=Tensor[(1920), float32] */, dtype="float32") /* ty=Tensor[(1920), float32] */;
  %654 = reshape(%653, newshape=[1920]) /* ty=Tensor[(1920), float32] */;
  %655 = @func_938(%654) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(1920), float32], Tensor[(165), int16]) */;
  %656 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
  %657 = %656.4;
  %658 = cast(%var_3944, dtype="float64") /* ty=Tensor[(165), float64] */;
  %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(1), int32] */;
  %660 = cast(%657, dtype="float64") /* ty=Tensor[(165), float64] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?), float64] */;
  %662 = mod(%660, %661) /* ty=Tensor[(165), float64] */;
  %663 = cast(%662, dtype="bool") /* ty=Tensor[(165), bool] */;
  %664 = shape_of(%657, dtype="int32") /* ty=Tensor[(1), int32] */;
  %665 = cast(%657, dtype="bool") /* ty=Tensor[(165), bool] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?), bool] */;
  %667 = not_equal(%665, %666) /* ty=Tensor[(165), bool] */;
  %668 = cast(%var_3968, dtype="bool") /* ty=Tensor[(165), bool] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(1), int32] */;
  %670 = cast(%667, dtype="bool") /* ty=Tensor[(165), bool] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?), bool] */;
  %672 = cast(%var_3944, dtype="float64") /* ty=Tensor[(165), float64] */;
  %673 = @func_2554() /* ty=(Tensor[(165), int16],) */;
  %674 = @func_2805() /* ty=Tensor[(2, 5, 5), float64] */;
  %675 = cast(%674, dtype="bool") /* ty=Tensor[(2, 5, 5), bool] */;
  %676 = reshape(%675, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), bool] */;
  %677 = cast(%var_4001, dtype="float64") /* ty=float64 */;
  %678 = cast(%var_4002, dtype="float64") /* ty=Tensor[(220), float64] */;
  %679 = reshape(%677, newshape=[]) /* ty=float64 */;
  %680 = reshape(%678, newshape=[4, 5, 11]) /* ty=Tensor[(4, 5, 11), float64] */;
  %681 = @func_914(%679, %680) /* ty=(Tensor[(4, 5, 11), float64], Tensor[(165), int16], Tensor[(2, 5, 5), float64]) */;
  %682 = %655.3;
  %683 = greater(%670, %671) /* ty=Tensor[(165), bool] */;
  %684 = sigmoid(%672) /* ty=Tensor[(165), float64] */;
  %685 = %673.0;
  %686 = @func_3726(%676) /* ty=Tensor[(2, 5, 5), uint16] */;
  %687 = %681.1;
  (%682, meta[relay.Constant][34] /* ty=Tensor[(1920), float32] */, %674, %683, %684, %685, %686, %687, %var_4001, %var_4002)
}

def @func_4125() -> (Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), float32], Tensor[(432), float32], Tensor[(4), int8], Tensor[(392), int8]) {
  %688 = cast(meta[relay.Constant][35] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %689 = cast(meta[relay.Constant][36] /* ty=Tensor[(4), int8] */, dtype="int8") /* ty=Tensor[(4), int8] */;
  %690 = cast(meta[relay.Constant][37] /* ty=Tensor[(392), int8] */, dtype="int8") /* ty=Tensor[(392), int8] */;
  %691 = reshape(%688, newshape=[216, 2]) /* ty=Tensor[(216, 2), float32] */;
  %692 = reshape(%689, newshape=[4]) /* ty=Tensor[(4), int8] */;
  %693 = reshape(%690, newshape=[392]) /* ty=Tensor[(392), int8] */;
  %694 = @func_3068(%691, %692, %693) /* ty=(Tensor[(2, 5, 5), float32], Tensor[(9, 16, 3), float32], Tensor[(4), int8], Tensor[(392), int8], Tensor[(216, 2), float64], Tensor[(7, 14, 4), float64]) */;
  %695 = @func_2969() /* ty=Tensor[(2, 5, 5), float64] */;
  %696 = %694.1;
  (%695, %696, meta[relay.Constant][35] /* ty=Tensor[(432), float32] */, meta[relay.Constant][36] /* ty=Tensor[(4), int8] */, meta[relay.Constant][37] /* ty=Tensor[(392), int8] */)
}

def @func_6701() -> Tensor[(2, 5, 5), float64] {
  %698 = fn () -> Tensor[(2, 5, 5), float64] {
    %697 = @func_5039() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %697.0
  };
  %698() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_1749() -> Tensor[(2, 5, 5), float64] {
  %699 = fn () -> Tensor[(2, 5, 5), float64] {
    @func_619() /* ty=Tensor[(2, 5, 5), float64] */
  };
  %699() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_2662() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(432), float32]) {
  %700 = @func_2633() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %701 = %700.0;
  %702 = cast(%701, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  %703 = reshape(%702, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
  %704 = @func_2156(%703) /* ty=(Tensor[(2, 5, 5), uint8], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) */;
  %705 = @func_1930() /* ty=Tensor[(2, 5, 5), float64] */;
  %706 = %704.4;
  (%701, %705, %706)
}

def @func_4691(%var_4688: Tensor[(2, 3, 11), int32], %var_4689: Tensor[(2, 3, 11), int32], %var_4690: Tensor[(33, 5), int16]) -> (Tensor[(2, 3, 11), int32], Tensor[(1920), float32], Tensor[(33, 5), int16], float64, Tensor[(110, 2), float32]) {
  @func_4686(%var_4688, %var_4689, %var_4690) /* ty=(Tensor[(2, 3, 11), int32], Tensor[(1920), float32], Tensor[(33, 5), int16], float64, Tensor[(110, 2), float32]) */
}

def @func_6608() -> (Tensor[(2, 5, 5), bool], Tensor[(3, 12, 2), float32], Tensor[(6, 12), float32], Tensor[(432), float32], Tensor[(2, 5, 5), bool]) {
  @func_6606() /* ty=(Tensor[(2, 5, 5), bool], Tensor[(3, 12, 2), float32], Tensor[(6, 12), float32], Tensor[(432), float32], Tensor[(2, 5, 5), bool]) */
}

def @func_1676() -> Tensor[(2, 5, 5), float64] {
  @func_1674() /* ty=Tensor[(2, 5, 5), float64] */
}

def @func_7137(%var_7136: Tensor[(12, 11, 5), uint16]) -> (Tensor[(12, 11, 5), uint16], Tensor[(2, 5, 5), bool], Tensor[(392), int8]) {
  %716 = fn (%var_7098: Tensor[(12, 11, 5), uint16]) -> (Tensor[(12, 11, 5), uint16], Tensor[(2, 5, 5), bool], Tensor[(392), int8]) {
    %707 = cast(%var_7098, dtype="uint16") /* ty=Tensor[(12, 11, 5), uint16] */;
    %708 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(12, 11, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %709 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 11, 5), uint16] */, dtype="uint16") /* ty=Tensor[(12, 11, 5), uint16] */;
    %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %711 = @func_6976() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(2, 5, 5), bool]) */;
    %712 = @func_4125() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), float32], Tensor[(432), float32], Tensor[(4), int8], Tensor[(392), int8]) */;
    %713 = bitwise_or(%709, %710) /* ty=Tensor[(12, 11, 5), uint16] */;
    %714 = %711.2;
    %715 = %712.4;
    (%713, %714, %715)
  };
  %716(%var_7136) /* ty=(Tensor[(12, 11, 5), uint16], Tensor[(2, 5, 5), bool], Tensor[(392), int8]) */
}

def @func_3145(%var_3144: Tensor[(432), float32]) -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool], Tensor[(11, 15, 432), int32], Tensor[(432), float32], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), float32]) {
  %732 = fn (%var_3122: Tensor[(432), float32]) -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool], Tensor[(11, 15, 432), int32], Tensor[(432), float32], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), float32]) {
    %717 = cast(%var_3122, dtype="float32") /* ty=Tensor[(432), float32] */;
    %718 = reshape(%717, newshape=[432]) /* ty=Tensor[(432), float32] */;
    %719 = @func_1639(%718) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool]) */;
    %720 = %719.0;
    %721 = cast(%var_3122, dtype="int32") /* ty=Tensor[(432), int32] */;
    %722 = cast(%720, dtype="int32") /* ty=Tensor[(11, 15, ?), int32] */;
    %723 = @func_2662() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(432), float32]) */;
    %724 = @func_2901() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(7, 195), uint16]) */;
    %725 = cast(%720, dtype="float32") /* ty=Tensor[(11, 15, ?), float32] */;
    %726 = @func_1499() /* ty=Tensor[(2, 5, 5), float64] */;
    %727 = @func_2989() /* ty=Tensor[(2, 5, 5), bool] */;
    %728 = add(%721, %722) /* ty=Tensor[(11, 15, 432), int32] */;
    %729 = %723.2;
    %730 = %724.0;
    %731 = atanh(%725) /* ty=Tensor[(11, 15, ?), float32] */;
    (%726, %727, %728, %729, %730, %731)
  };
  %732(%var_3144) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool], Tensor[(11, 15, 432), int32], Tensor[(432), float32], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), float32]) */
}

def @func_4686(%var_4643: Tensor[(2, 3, 11), int32], %var_4644: Tensor[(2, 3, 11), int32], %var_4650: Tensor[(33, 5), int16]) -> (Tensor[(2, 3, 11), int32], Tensor[(1920), float32], Tensor[(33, 5), int16], float64, Tensor[(110, 2), float32]) {
  %733 = cast(%var_4644, dtype="int32") /* ty=Tensor[(2, 3, 11), int32] */;
  %734 = shape_of(%var_4643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%var_4643, dtype="int32") /* ty=Tensor[(2, 3, 11), int32] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %737 = cast(%var_4650, dtype="int16") /* ty=Tensor[(33, 5), int16] */;
  %738 = cast(%var_4650, dtype="bool") /* ty=Tensor[(33, 5), bool] */;
  %739 = cast(2.20416f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %740 = cast(meta[relay.Constant][39] /* ty=Tensor[(110, 2), float64] */, dtype="float64") /* ty=Tensor[(110, 2), float64] */;
  %741 = reshape(%737, newshape=[165]) /* ty=Tensor[(165), int16] */;
  %742 = reshape(%738, newshape=[165]) /* ty=Tensor[(165), bool] */;
  %743 = reshape(%739, newshape=[]) /* ty=float64 */;
  %744 = reshape(%740, newshape=[220]) /* ty=Tensor[(220), float64] */;
  %745 = @func_4006(%741, %742, %743, %744) /* ty=(Tensor[(165), int16], Tensor[(1920), float32], Tensor[(2, 5, 5), float64], Tensor[(165), bool], Tensor[(165), float64], Tensor[(165), int16], Tensor[(2, 5, 5), uint16], Tensor[(165), int16], float64, Tensor[(220), float64]) */;
  %746 = cast(meta[relay.Constant][39] /* ty=Tensor[(110, 2), float64] */, dtype="float32") /* ty=Tensor[(110, 2), float32] */;
  %747 = multiply(%735, %736) /* ty=Tensor[(2, 3, 11), int32] */;
  %748 = %745.1;
  %749 = exp(%746) /* ty=Tensor[(110, 2), float32] */;
  (%747, %748, %var_4650, 2.20416f64 /* ty=float64 */, %749)
}

def @func_6978() -> (Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(2, 5, 5), bool]) {
  @func_6976() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(2, 5, 5), bool]) */
}

def @func_1882() -> (Tensor[(2, 5, 5), float64],) {
  %750 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %751 = %750.1;
  (%751,)
}

def @func_6094() -> (Tensor[(2, 5, 5), bool],) {
  %753 = fn () -> (Tensor[(2, 5, 5), bool],) {
    %752 = @func_2989() /* ty=Tensor[(2, 5, 5), bool] */;
    (%752,)
  };
  %753() /* ty=(Tensor[(2, 5, 5), bool],) */
}

def @func_5665() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(1920), float32]) {
  @func_5663() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(1920), float32]) */
}

def @func_2633() -> (Tensor[(2, 5, 5), float64],) {
  %754 = @func_1748() /* ty=Tensor[(2, 5, 5), float64] */;
  (%754,)
}

def @func_4637() -> Tensor[(1920), float32] {
  %755 = @func_1266() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(165), int16], Tensor[(2, 5, 5), float64], Tensor[(225), uint8]) */;
  %755.2
}

def @func_5589() -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) {
  @func_5587() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */
}

def @func_4532() -> (Tensor[(2, 5, 5), bool],) {
  %757 = fn () -> (Tensor[(2, 5, 5), bool],) {
    %756 = @func_2989() /* ty=Tensor[(2, 5, 5), bool] */;
    (%756,)
  };
  %757() /* ty=(Tensor[(2, 5, 5), bool],) */
}

def @func_5040() -> (Tensor[(2, 5, 5), float64],) {
  %759 = fn () -> (Tensor[(2, 5, 5), float64],) {
    %758 = @func_1732() /* ty=Tensor[(2, 5, 5), float64] */;
    (%758,)
  };
  %759() /* ty=(Tensor[(2, 5, 5), float64],) */
}

def @func_1268() -> (Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(165), int16], Tensor[(2, 5, 5), float64], Tensor[(225), uint8]) {
  @func_1266() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(165), int16], Tensor[(2, 5, 5), float64], Tensor[(225), uint8]) */
}

def @func_1884() -> (Tensor[(2, 5, 5), float64],) {
  @func_1882() /* ty=(Tensor[(2, 5, 5), float64],) */
}

def @func_1412(%var_1376: Tensor[(9, 16, 3), float32]) -> (Tensor[(9, 16, 3), float32], Tensor[(2, 5, 5), float64]) {
  %760 = cast(%var_1376, dtype="float32") /* ty=Tensor[(9, 16, 3), float32] */;
  %761 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %762 = log(%760) /* ty=Tensor[(9, 16, 3), float32] */;
  %763 = %761.0;
  (%762, %763)
}

def @func_1415(%var_1413: Tensor[(9, 16, 3), float32]) -> (Tensor[(9, 16, 3), float32], Tensor[(2, 5, 5), float64]) {
  @func_1412(%var_1413) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(2, 5, 5), float64]) */
}

def @func_5855(%var_5853: Tensor[(6, 1, 16), uint16], %var_5854: Tensor[(6, 9, 16), uint16]) -> (Tensor[(6, 9, 16), uint16],) {
  @func_5851(%var_5853, %var_5854) /* ty=(Tensor[(6, 9, 16), uint16],) */
}

def @func_3072(%var_3069: Tensor[(216, 2), float32], %var_3070: Tensor[(4), int8], %var_3071: Tensor[(392), int8]) -> (Tensor[(2, 5, 5), float32], Tensor[(9, 16, 3), float32], Tensor[(4), int8], Tensor[(392), int8], Tensor[(216, 2), float64], Tensor[(7, 14, 4), float64]) {
  %780 = fn (%var_3028: Tensor[(216, 2), float32], %var_3035: Tensor[(4), int8], %var_3036: Tensor[(392), int8]) -> (Tensor[(2, 5, 5), float32], Tensor[(9, 16, 3), float32], Tensor[(4), int8], Tensor[(392), int8], Tensor[(216, 2), float64], Tensor[(7, 14, 4), float64]) {
    %764 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
    %765 = cast(%var_3028, dtype="float32") /* ty=Tensor[(216, 2), float32] */;
    %766 = reshape(%765, newshape=[9, 16, 3]) /* ty=Tensor[(9, 16, 3), float32] */;
    %767 = @func_1412(%766) /* ty=(Tensor[(9, 16, 3), float32], Tensor[(2, 5, 5), float64]) */;
    %768 = cast(%var_3028, dtype="float64") /* ty=Tensor[(216, 2), float64] */;
    %769 = cast(%var_3035, dtype="int8") /* ty=Tensor[(4), int8] */;
    %770 = cast(%var_3036, dtype="int8") /* ty=Tensor[(392), int8] */;
    %771 = reshape(%769, newshape=[1, 1, 4]) /* ty=Tensor[(1, 1, 4), int8] */;
    %772 = reshape(%770, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), int8] */;
    %773 = @func_1566(%771, %772) /* ty=(Tensor[(7, 14, 4), int8],) */;
    %774 = %773.0;
    %775 = cast(%774, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
    %776 = %764.0;
    %777 = %767.0;
    %778 = sinh(%768) /* ty=Tensor[(216, 2), float64] */;
    %779 = cosh(%775) /* ty=Tensor[(7, 14, 4), float64] */;
    (%776, %777, %var_3035, %var_3036, %778, %779)
  };
  %780(%var_3069, %var_3070, %var_3071) /* ty=(Tensor[(2, 5, 5), float32], Tensor[(9, 16, 3), float32], Tensor[(4), int8], Tensor[(392), int8], Tensor[(216, 2), float64], Tensor[(7, 14, 4), float64]) */
}

def @func_5231(%var_5200: Tensor[(4), int8]) -> (Tensor[(2, 5, 5), float64], Tensor[(7, 14, 4), int8], Tensor[(4), int8], Tensor[(98, 4), int8]) {
  %781 = @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */;
  %782 = cast(%var_5200, dtype="int8") /* ty=Tensor[(4), int8] */;
  %783 = cast(meta[relay.Constant][40] /* ty=Tensor[(98, 4), int8] */, dtype="int8") /* ty=Tensor[(98, 4), int8] */;
  %784 = reshape(%782, newshape=[1, 1, 4]) /* ty=Tensor[(1, 1, 4), int8] */;
  %785 = reshape(%783, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), int8] */;
  %786 = @func_1566(%784, %785) /* ty=(Tensor[(7, 14, 4), int8],) */;
  %787 = %781.0;
  %788 = %786.0;
  (%787, %788, %var_5200, meta[relay.Constant][40] /* ty=Tensor[(98, 4), int8] */)
}

def @func_4456(%var_4453: Tensor[(4, 12, 7), int32], %var_4454: Tensor[(4, 12, 7), float32], %var_4455: Tensor[(50), float64]) -> (Tensor[(4, 12, 7), int32], Tensor[(4, 12, 7), bool], Tensor[(4, 12, 7), uint64], Tensor[(4, 12, 7), bool], Tensor[(4, 12, 7), float32], Tensor[(2, 5, 5), uint8], Tensor[(50), float64]) {
  %817 = fn (%var_4360: Tensor[(4, 12, 7), int32], %var_4419: Tensor[(4, 12, 7), float32], %var_4443: Tensor[(50), float64]) -> (Tensor[(4, 12, 7), int32], Tensor[(4, 12, 7), bool], Tensor[(4, 12, 7), uint64], Tensor[(4, 12, 7), bool], Tensor[(4, 12, 7), float32], Tensor[(2, 5, 5), uint8], Tensor[(50), float64]) {
    %789 = cast(4 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %790 = cast(%var_4360, dtype="int32") /* ty=Tensor[(4, 12, 7), int32] */;
    %791 = cast(%var_4360, dtype="bool") /* ty=Tensor[(4, 12, 7), bool] */;
    %792 = cast(4 /* ty=int32 */, dtype="bool") /* ty=bool */;
    %793 = cast(%var_4360, dtype="float32") /* ty=Tensor[(4, 12, 7), float32] */;
    %794 = atan(%793) /* ty=Tensor[(4, 12, 7), float32] */;
    %795 = cast(%794, dtype="uint64") /* ty=Tensor[(4, 12, 7), uint64] */;
    %796 = cast(4 /* ty=int32 */, dtype="uint64") /* ty=uint64 */;
    %797 = cast(%794, dtype="float32") /* ty=Tensor[(4, 12, 7), float32] */;
    %798 = exp(%797) /* ty=Tensor[(4, 12, 7), float32] */;
    %799 = cast(%var_4419, dtype="bool") /* ty=Tensor[(4, 12, 7), bool] */;
    %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
    %801 = cast(%798, dtype="bool") /* ty=Tensor[(4, 12, 7), bool] */;
    %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %803 = cast(%798, dtype="float32") /* ty=Tensor[(4, 12, 7), float32] */;
    %804 = acosh(%803) /* ty=Tensor[(4, 12, 7), float32] */;
    %805 = cast(%804, dtype="float32") /* ty=Tensor[(4, 12, 7), float32] */;
    %806 = cosh(%805) /* ty=Tensor[(4, 12, 7), float32] */;
    %807 = cast(%806, dtype="float32") /* ty=Tensor[(4, 12, 7), float32] */;
    %808 = cast(%var_4443, dtype="float64") /* ty=Tensor[(50), float64] */;
    %809 = reshape(%808, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
    %810 = @func_2156(%809) /* ty=(Tensor[(2, 5, 5), uint8], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(9, 16, 3), uint64], Tensor[(432), float32]) */;
    %811 = bitwise_and(%789, %790) /* ty=Tensor[(4, 12, 7), int32] */;
    %812 = less_equal(%791, %792) /* ty=Tensor[(4, 12, 7), bool] */;
    %813 = bitwise_or(%795, %796) /* ty=Tensor[(4, 12, 7), uint64] */;
    %814 = equal(%801, %802) /* ty=Tensor[(4, 12, 7), bool] */;
    %815 = rsqrt(%807) /* ty=Tensor[(4, 12, 7), float32] */;
    %816 = %810.0;
    (%811, %812, %813, %814, %815, %816, %var_4443)
  };
  %817(%var_4453, %var_4454, %var_4455) /* ty=(Tensor[(4, 12, 7), int32], Tensor[(4, 12, 7), bool], Tensor[(4, 12, 7), uint64], Tensor[(4, 12, 7), bool], Tensor[(4, 12, 7), float32], Tensor[(2, 5, 5), uint8], Tensor[(50), float64]) */
}

def @func_1930() -> Tensor[(2, 5, 5), float64] {
  %818 = @func_1370() /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64]) */;
  %818.1
}

def @func_2344(%var_2339: Tensor[(2, 5, 5), float64], %var_2340: Tensor[(2, 5, 5), float64], %var_2341: Tensor[(1920), float32], %var_2342: Tensor[(11, 15), int16], %var_2343: Tensor[(4), int8]) -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(1365), uint16], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(11, 15), int16], Tensor[(2, 5, 5), float64], Tensor[(7, 14, 4), int8], Tensor[(4), int8], Tensor[(392), int8], Tensor[(2, 5, 5), float32]) {
  %855 = fn (%var_2263: Tensor[(2, 5, 5), float64], %var_2268: Tensor[(2, 5, 5), float64], %var_2325: Tensor[(1920), float32], %var_2326: Tensor[(11, 15), int16], %var_2332: Tensor[(4), int8]) -> (Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(1365), uint16], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(11, 15), int16], Tensor[(2, 5, 5), float64], Tensor[(7, 14, 4), int8], Tensor[(4), int8], Tensor[(392), int8], Tensor[(2, 5, 5), float32]) {
    %819 = @func_1748() /* ty=Tensor[(2, 5, 5), float64] */;
    %820 = cast(%var_2263, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
    %821 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
    %822 = cast(%819, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
    %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %824 = cast(%var_2268, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
    %825 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
    %826 = cast(%819, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
    %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %828 = @func_1742() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %829 = cast(meta[relay.Constant][41] /* ty=Tensor[(1365), uint16] */, dtype="uint16") /* ty=Tensor[(1365), uint16] */;
    %830 = reshape(%829, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), uint16] */;
    %831 = cast(meta[relay.Constant][41] /* ty=Tensor[(1365), uint16] */, dtype="uint16") /* ty=Tensor[(1365), uint16] */;
    %832 = reshape(%831, newshape=[13, 15, 7]) /* ty=Tensor[(13, 15, 7), uint16] */;
    %833 = cast(%var_2325, dtype="float32") /* ty=Tensor[(1920), float32] */;
    %834 = cast(%var_2326, dtype="int16") /* ty=Tensor[(11, 15), int16] */;
    %835 = reshape(%833, newshape=[10, 12, 16]) /* ty=Tensor[(10, 12, 16), float32] */;
    %836 = reshape(%834, newshape=[165]) /* ty=Tensor[(165), int16] */;
    %837 = @func_666(%835, %836) /* ty=(Tensor[(11, 15, ?), bool], Tensor[(165), int16], Tensor[(10, 12, 16), int8]) */;
    %838 = cast(%var_2332, dtype="int8") /* ty=Tensor[(4), int8] */;
    %839 = cast(meta[relay.Constant][42] /* ty=Tensor[(392), int8] */, dtype="int8") /* ty=Tensor[(392), int8] */;
    %840 = reshape(%838, newshape=[1, 1, 4]) /* ty=Tensor[(1, 1, 4), int8] */;
    %841 = reshape(%839, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), int8] */;
    %842 = @func_1566(%840, %841) /* ty=(Tensor[(7, 14, 4), int8],) */;
    %843 = @func_541() /* ty=(Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), bool], Tensor[(2, 5, 5), float64], Tensor[(11, 15, ?), bool], Tensor[(165), int16]) */;
    %844 = floor_mod(%822, %823) /* ty=Tensor[(2, 5, 5), float64] */;
    %845 = mod(%826, %827) /* ty=Tensor[(2, 5, 5), float32] */;
    %846 = %828.0;
    %847 = @func_1688(%830) /* ty=Tensor[(13, 15, 7), bool] */;
    %848 = @func_1748() /* ty=Tensor[(2, 5, 5), float64] */;
    %849 = @func_1499() /* ty=Tensor[(2, 5, 5), float64] */;
    %850 = @func_1688(%832) /* ty=Tensor[(13, 15, 7), bool] */;
    %851 = %837.1;
    %852 = @func_1674() /* ty=Tensor[(2, 5, 5), float64] */;
    %853 = %842.0;
    %854 = %843.0;
    (%844, %845, %846, %847, meta[relay.Constant][41] /* ty=Tensor[(1365), uint16] */, %848, %849, %850, %851, %var_2325, %var_2326, %852, %853, %var_2332, meta[relay.Constant][42] /* ty=Tensor[(392), int8] */, %854)
  };
  %855(%var_2339, %var_2340, %var_2341, %var_2342, %var_2343) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float32], Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(1365), uint16], Tensor[(2, 5, 5), float64], Tensor[(2, 5, 5), float64], Tensor[(13, 15, 7), bool], Tensor[(165), int16], Tensor[(1920), float32], Tensor[(11, 15), int16], Tensor[(2, 5, 5), float64], Tensor[(7, 14, 4), int8], Tensor[(4), int8], Tensor[(392), int8], Tensor[(2, 5, 5), float32]) */
}

def @func_5086() -> (Tensor[(2, 5, 5), float64],) {
  %858 = fn () -> (Tensor[(2, 5, 5), float64],) {
    %856 = @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %857 = %856.0;
    (%857,)
  };
  %858() /* ty=(Tensor[(2, 5, 5), float64],) */
}

def @func_3450() -> (Tensor[(2, 5, 5), float64],) {
  %861 = fn () -> (Tensor[(2, 5, 5), float64],) {
    %859 = @func_1172() /* ty=(Tensor[(2, 5, 5), float64],) */;
    %860 = %859.0;
    (%860,)
  };
  %861() /* ty=(Tensor[(2, 5, 5), float64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen195/build/output.py:2287: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen195/build/output.py", line 2292, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(231) tvmgen_default_fused_reshape_minimum_kernel0(int64_t* __restrict__ T_minimum, int64_t* __restrict__ placeholder, int64_t* __restrict__ placeholder1) {
  T_minimum[(((int)threadIdx.x))] = min(placeholder[(((int)threadIdx.x))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

