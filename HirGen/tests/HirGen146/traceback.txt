==========mod==========
#[version = "0.0.5"]
def @func_4387(%var_4372: Tensor[(96), float64]) -> (Tensor[(14, 14, 14), float64], Tensor[(105), float32], Tensor[(1120), bool], Tensor[(96), float64], Tensor[(975), float32], Tensor[(14, 14, 14), float64], Tensor[(16, 9, 13), bool], Tensor[(1, 1872), bool]) {
  %0 = @func_3532() /* ty=(Tensor[(14, 14, 14), int64],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(14, 14, 14), float64] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(1120), bool] */, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %4 = cast(%var_4372, dtype="float64") /* ty=Tensor[(96), float64] */;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %6 = reshape(%3, newshape=[8, 10, 14]) /* ty=Tensor[(8, 10, 14), bool] */;
  %7 = reshape(%4, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %8 = reshape(%5, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %9 = @func_3059(%6, %7, %8) /* ty=(Tensor[(8, 10, 14), bool], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(384), int8], Tensor[(105), float32], Tensor[(96, 4), int8], Tensor[(13, 15, 5), uint32], Tensor[(975), float32], Tensor[(960), float32], Tensor[(896), float64]) */;
  %10 = cast(%1, dtype="float64") /* ty=Tensor[(14, 14, 14), float64] */;
  %11 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 1872), bool] */, dtype="bool") /* ty=Tensor[(1, 1872), bool] */;
  %12 = cast(%var_4372, dtype="float64") /* ty=Tensor[(96), float64] */;
  %13 = reshape(%11, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), bool] */;
  %14 = reshape(%12, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %15 = @func_1924(%13, %14) /* ty=(Tensor[(576), float64], Tensor[(40), float64], Tensor[(2496), float32], Tensor[(896), float64], Tensor[(13, 16, 12), float64], Tensor[(48, 8), int8], Tensor[(11, 104), int64], Tensor[(96), float64], Tensor[(3, 2, 16), float64], Tensor[(16, 9, 13), bool]) */;
  %16 = exp(%2) /* ty=Tensor[(14, 14, 14), float64] */;
  %17 = %9.4;
  %18 = log2(%10) /* ty=Tensor[(14, 14, 14), float64] */;
  %19 = %15.9;
  (%16, %17, meta[relay.Constant][0] /* ty=Tensor[(1120), bool] */, %var_4372, meta[relay.Constant][1] /* ty=Tensor[(975), float32] */, %18, %19, meta[relay.Constant][2] /* ty=Tensor[(1, 1872), bool] */)
}

def @func_1028(%var_1019: Tensor[(13, 16, 12), float32]) -> (Tensor[(13, 16, 12), float32],) {
  %20 = cast(%var_1019, dtype="float32") /* ty=Tensor[(13, 16, 12), float32] */;
  %21 = sin(%20) /* ty=Tensor[(13, 16, 12), float32] */;
  (%21,)
}

def @func_3532() -> (Tensor[(14, 14, 14), int64],) {
  %22 = @func_3455() /* ty=Tensor[(14, 14, 14), int64] */;
  (%22,)
}

def @func_1525(%var_1496: Tensor[(13, 15, 5), float32], %var_1514: Tensor[(960), float32], %var_1515: Tensor[(896), float64]) -> (Tensor[(13, 15, 5), uint32], Tensor[(13, 15, 5), float32], Tensor[(4, 2, 9), int64], Tensor[(960), float32], Tensor[(896), float64], Tensor[(384), int8]) {
  %23 = cast(%var_1496, dtype="uint32") /* ty=Tensor[(13, 15, 5), uint32] */;
  %24 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(13, 15, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 15, 5), float32] */, dtype="uint32") /* ty=Tensor[(13, 15, 5), uint32] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %27 = cast(-4.31913f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %28 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(13, 15, 5), float32] */;
  %29 = divide(%27, %28) /* ty=Tensor[(13, 15, 5), float32] */;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(13, 15, 5), float32] */;
  %31 = cast(%var_1514, dtype="float32") /* ty=Tensor[(960), float32] */;
  %32 = cast(%var_1515, dtype="float64") /* ty=Tensor[(896), float64] */;
  %33 = cast(-4.31913f /* ty=float32 */, dtype="int8") /* ty=int8 */;
  %34 = cast(meta[relay.Constant][4] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %35 = reshape(%31, newshape=[6, 10, 16]) /* ty=Tensor[(6, 10, 16), float32] */;
  %36 = reshape(%32, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %37 = reshape(%33, newshape=[]) /* ty=int8 */;
  %38 = reshape(%34, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %39 = @func_683(%35, %36, %37, %38) /* ty=(Tensor[(6, 10, 16), bool], Tensor[(4, 2, 9), int64], Tensor[(896), float64], int8, Tensor[(384), int8]) */;
  %40 = left_shift(%25, %26) /* ty=Tensor[(13, 15, 5), uint32] */;
  %41 = rsqrt(%30) /* ty=Tensor[(13, 15, 5), float32] */;
  %42 = %39.1;
  (%40, %41, %42, %var_1514, %var_1515, meta[relay.Constant][4] /* ty=Tensor[(384), int8] */)
}

def @func_5323(%var_5293: Tensor[(9, 14, 8), int64], %var_5294: Tensor[(9, 14, 8), int64]) -> (Tensor[(9, 14, 8), int64],) {
  %43 = cast(%var_5294, dtype="int64") /* ty=Tensor[(9, 14, 8), int64] */;
  %44 = shape_of(%var_5293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%var_5293, dtype="int64") /* ty=Tensor[(9, 14, 8), int64] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %47 = logical_xor(%45, %46) /* ty=Tensor[(9, 14, 8), int64] */;
  (%47,)
}

def @func_33(%var_27: Tensor[(4, 2, 9), int64]) -> (Tensor[(4, 2, 9), int64],) {
  %48 = cast(%var_27, dtype="int64") /* ty=Tensor[(4, 2, 9), int64] */;
  %49 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(4, 2, 9), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 2, 9), int64] */, dtype="int64") /* ty=Tensor[(4, 2, 9), int64] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %52 = add(%50, %51) /* ty=Tensor[(4, 2, 9), int64] */;
  (%52,)
}

def @func_4222(%var_4208: Tensor[(3, 9, 8), float64]) -> (Tensor[(3, 9, 8), int8],) {
  %53 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 9, 8), float64] */, dtype="float64") /* ty=Tensor[(3, 9, 8), float64] */;
  %54 = shape_of(%var_4208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%var_4208, dtype="float64") /* ty=Tensor[(3, 9, 8), float64] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %57 = floor_divide(%55, %56) /* ty=Tensor[(3, 9, 8), float64] */;
  %58 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 9, 8), float64] */, dtype="int8") /* ty=Tensor[(3, 9, 8), int8] */;
  %59 = shape_of(%57, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%57, dtype="int8") /* ty=Tensor[(3, 9, 8), int8] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %62 = add(%60, %61) /* ty=Tensor[(3, 9, 8), int8] */;
  (%62,)
}

def @func_2388(%var_2364: Tensor[(15, 16, 4), bool], %var_2365: Tensor[(15, 16, 4), bool]) -> Tensor[(15, 16, 4), bool] {
  %63 = cast(%var_2365, dtype="bool") /* ty=Tensor[(15, 16, 4), bool] */;
  %64 = shape_of(%var_2364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%var_2364, dtype="bool") /* ty=Tensor[(15, 16, 4), bool] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %67 = logical_or(%65, %66) /* ty=Tensor[(15, 16, 4), bool] */;
  %68 = cast(%67, dtype="bool") /* ty=Tensor[(15, 16, 4), bool] */;
  %69 = shape_of(%var_2365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%var_2365, dtype="bool") /* ty=Tensor[(15, 16, 4), bool] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%70, %71) /* ty=Tensor[(15, 16, 4), bool] */
}

def @func_5704(%var_5695: int64) -> Tensor[(7, 10, 8), int64] {
  %72 = cast(%var_5695, dtype="int64") /* ty=int64 */;
  %73 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 10, 8), int64] */, dtype="int64") /* ty=Tensor[(7, 10, 8), int64] */;
  maximum(%72, %73) /* ty=Tensor[(7, 10, 8), int64] */
}

def @func_5211(%var_5205: Tensor[(28, 32), float64], %var_5206: int8, %var_5207: Tensor[(384), int8]) -> (Tensor[(14, 14, 14), float64], int8, Tensor[(28, 32), float64], int8, Tensor[(384), int8]) {
  %74 = @func_4474() /* ty=(Tensor[(14, 14, 14), float64], Tensor[(14, 14, 14), float64]) */;
  %75 = cast(%var_5205, dtype="float64") /* ty=Tensor[(28, 32), float64] */;
  %76 = cast(%var_5206, dtype="int8") /* ty=int8 */;
  %77 = cast(%var_5207, dtype="int8") /* ty=Tensor[(384), int8] */;
  %78 = reshape(%75, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), float64] */;
  %79 = reshape(%76, newshape=[]) /* ty=int8 */;
  %80 = reshape(%77, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %81 = @func_274(%78, %79, %80) /* ty=(Tensor[(14, 8, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8], Tensor[(3, 16, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 2, 9), int64]) */;
  %82 = %74.1;
  %83 = %81.4;
  (%82, %83, %var_5205, %var_5206, %var_5207)
}

def @func_3455() -> Tensor[(14, 14, 14), int64] {
  %84 = @func_3443() /* ty=(Tensor[(14, 14, 14), float32], Tensor[(14, 14, 14), int64]) */;
  %84.1
}

def @func_3209(%var_3193: Tensor[(11, 8, 1), float32], %var_3202: Tensor[(384), int8]) -> (Tensor[(11, 8, 1), float32], Tensor[(105, 1), float32], Tensor[(15, 7, 384), bool]) {
  %85 = cast(%var_3193, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
  %86 = cast(meta[relay.Constant][8] /* ty=Tensor[(105, 1), float32] */, dtype="float32") /* ty=Tensor[(105, 1), float32] */;
  %87 = cast(%var_3202, dtype="int8") /* ty=Tensor[(384), int8] */;
  %88 = reshape(%86, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float32] */;
  %89 = reshape(%87, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %90 = @func_756(%88, %89) /* ty=(Tensor[(15, 7, ?), bool], Tensor[(6, 12), int64], int8, Tensor[(384), int8]) */;
  %91 = %90.0;
  %92 = cast(%91, dtype="bool") /* ty=Tensor[(15, 7, ?), bool] */;
  %93 = cast(%var_3202, dtype="bool") /* ty=Tensor[(384), bool] */;
  %94 = log10(%85) /* ty=Tensor[(11, 8, 1), float32] */;
  %95 = not_equal(%92, %93) /* ty=Tensor[(15, 7, 384), bool] */;
  (%94, meta[relay.Constant][8] /* ty=Tensor[(105, 1), float32] */, %95)
}

def @func_683(%var_645: Tensor[(6, 10, 16), float32], %var_670: Tensor[(896), float64], %var_671: int8, %var_672: Tensor[(384), int8]) -> (Tensor[(6, 10, 16), bool], Tensor[(4, 2, 9), int64], Tensor[(896), float64], int8, Tensor[(384), int8]) {
  %96 = cast(%var_645, dtype="float32") /* ty=Tensor[(6, 10, 16), float32] */;
  %97 = acos(%96) /* ty=Tensor[(6, 10, 16), float32] */;
  %98 = cast(%97, dtype="bool") /* ty=Tensor[(6, 10, 16), bool] */;
  %99 = shape_of(%var_645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%var_645, dtype="bool") /* ty=Tensor[(6, 10, 16), bool] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %102 = cast(%var_670, dtype="float64") /* ty=Tensor[(896), float64] */;
  %103 = cast(%var_671, dtype="int8") /* ty=int8 */;
  %104 = cast(%var_672, dtype="int8") /* ty=Tensor[(384), int8] */;
  %105 = reshape(%102, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), float64] */;
  %106 = reshape(%103, newshape=[]) /* ty=int8 */;
  %107 = reshape(%104, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %108 = @func_274(%105, %106, %107) /* ty=(Tensor[(14, 8, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8], Tensor[(3, 16, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 2, 9), int64]) */;
  %109 = less_equal(%100, %101) /* ty=Tensor[(6, 10, 16), bool] */;
  %110 = %108.3;
  (%109, %110, %var_670, %var_671, %var_672)
}

def @func_3885() -> (Tensor[(14, 14, 14), bool], Tensor[(2, 13, 13), float32], Tensor[(338), float32]) {
  %111 = @func_3544() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64]) */;
  %112 = %111.0;
  %113 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 14, 14), int64] */, dtype="bool") /* ty=Tensor[(14, 14, 14), bool] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%112, dtype="bool") /* ty=Tensor[(14, 14, 14), bool] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %117 = cast(meta[relay.Constant][10] /* ty=Tensor[(338), float32] */, dtype="float32") /* ty=Tensor[(338), float32] */;
  %118 = cast(meta[relay.Constant][10] /* ty=Tensor[(338), float32] */, dtype="float32") /* ty=Tensor[(338), float32] */;
  %119 = reshape(%117, newshape=[2, 13, 13]) /* ty=Tensor[(2, 13, 13), float32] */;
  %120 = reshape(%118, newshape=[2, 13, 13]) /* ty=Tensor[(2, 13, 13), float32] */;
  %121 = @func_3329(%119, %120) /* ty=(Tensor[(2, 13, 13), float32], Tensor[(2, 13, 13), uint64], Tensor[(2, 13, 13), uint8]) */;
  %122 = less_equal(%115, %116) /* ty=Tensor[(14, 14, 14), bool] */;
  %123 = %121.0;
  (%122, %123, meta[relay.Constant][10] /* ty=Tensor[(338), float32] */)
}

def @func_5131(%var_5120: Tensor[(2, 16, 12), float64]) -> Tensor[(2, 16, 12), bool] {
  %124 = cast(%var_5120, dtype="bool") /* ty=Tensor[(2, 16, 12), bool] */;
  %125 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(2, 16, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 16, 12), float64] */, dtype="bool") /* ty=Tensor[(2, 16, 12), bool] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%126, %127) /* ty=Tensor[(2, 16, 12), bool] */
}

def @func_3760(%var_3747: Tensor[(14, 14, 14), int64], %var_3752: Tensor[(14, 14, 14), int64]) -> (Tensor[(14, 14, 14), uint64], Tensor[(14, 14, 14), bool]) {
  %128 = @func_3469() /* ty=(Tensor[(14, 14, 14), int64],) */;
  %129 = %128.0;
  %130 = cast(%var_3747, dtype="uint64") /* ty=Tensor[(14, 14, 14), uint64] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="uint64") /* ty=Tensor[(14, 14, 14), uint64] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %134 = cast(%var_3752, dtype="bool") /* ty=Tensor[(14, 14, 14), bool] */;
  %135 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%129, dtype="bool") /* ty=Tensor[(14, 14, 14), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %138 = maximum(%132, %133) /* ty=Tensor[(14, 14, 14), uint64] */;
  %139 = logical_and(%136, %137) /* ty=Tensor[(14, 14, 14), bool] */;
  (%138, %139)
}

def @func_4122(%var_4110: Tensor[(2, 8, 7), float64], %var_4111: Tensor[(2, 8, 7), float64], %var_4117: Tensor[(960), float32]) -> (Tensor[(2, 8, 7), float64], Tensor[(6, 10, 16), bool], Tensor[(960), float32], Tensor[(896), float64], int8, Tensor[(48, 8), int8]) {
  %140 = cast(%var_4111, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
  %141 = shape_of(%var_4110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%var_4110, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %144 = cast(%var_4117, dtype="float32") /* ty=Tensor[(960), float32] */;
  %145 = cast(meta[relay.Constant][12] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %146 = cast(meta[relay.Constant][13] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %147 = cast(meta[relay.Constant][14] /* ty=Tensor[(48, 8), int8] */, dtype="int8") /* ty=Tensor[(48, 8), int8] */;
  %148 = reshape(%144, newshape=[6, 10, 16]) /* ty=Tensor[(6, 10, 16), float32] */;
  %149 = reshape(%145, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %150 = reshape(%146, newshape=[]) /* ty=int8 */;
  %151 = reshape(%147, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %152 = @func_683(%148, %149, %150, %151) /* ty=(Tensor[(6, 10, 16), bool], Tensor[(4, 2, 9), int64], Tensor[(896), float64], int8, Tensor[(384), int8]) */;
  %153 = power(%142, %143) /* ty=Tensor[(2, 8, 7), float64] */;
  %154 = %152.0;
  (%153, %154, %var_4117, meta[relay.Constant][12] /* ty=Tensor[(896), float64] */, meta[relay.Constant][13] /* ty=int8 */, meta[relay.Constant][14] /* ty=Tensor[(48, 8), int8] */)
}

def @func_4205() -> (Tensor[(14, 14, 14), int64], Tensor[(15, 16, 4), bool], Tensor[(120, 8), bool], Tensor[(14, 14, 14), int64]) {
  %155 = @func_3532() /* ty=(Tensor[(14, 14, 14), int64],) */;
  %156 = cast(meta[relay.Constant][15] /* ty=Tensor[(120, 8), bool] */, dtype="bool") /* ty=Tensor[(120, 8), bool] */;
  %157 = cast(meta[relay.Constant][15] /* ty=Tensor[(120, 8), bool] */, dtype="bool") /* ty=Tensor[(120, 8), bool] */;
  %158 = reshape(%156, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), bool] */;
  %159 = reshape(%157, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), bool] */;
  %160 = %155.0;
  %161 = @func_2388(%158, %159) /* ty=Tensor[(15, 16, 4), bool] */;
  %162 = @func_3890() /* ty=Tensor[(14, 14, 14), int64] */;
  (%160, %161, meta[relay.Constant][15] /* ty=Tensor[(120, 8), bool] */, %162)
}

def @func_927(%var_905: Tensor[(13, 8, 11), int64], %var_923: Tensor[(96), float64]) -> (Tensor[(13, 8, 11), uint16], Tensor[(6, 12), int64], Tensor[(21, 5), float32], Tensor[(48, 8), int8], Tensor[(3, 2, 16), float64], Tensor[(96), float64]) {
  %163 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 8, 11), int64] */, dtype="bool") /* ty=Tensor[(13, 8, 11), bool] */;
  %164 = shape_of(%var_905, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%var_905, dtype="bool") /* ty=Tensor[(13, 8, 11), bool] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %167 = greater_equal(%165, %166) /* ty=Tensor[(13, 8, 11), bool] */;
  %168 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 8, 11), bool] */, dtype="uint16") /* ty=Tensor[(13, 8, 11), uint16] */;
  %169 = shape_of(%167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%167, dtype="uint16") /* ty=Tensor[(13, 8, 11), uint16] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %172 = cast(meta[relay.Constant][18] /* ty=Tensor[(21, 5), float32] */, dtype="float32") /* ty=Tensor[(21, 5), float32] */;
  %173 = cast(meta[relay.Constant][19] /* ty=Tensor[(48, 8), int8] */, dtype="int8") /* ty=Tensor[(48, 8), int8] */;
  %174 = reshape(%172, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float32] */;
  %175 = reshape(%173, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %176 = @func_756(%174, %175) /* ty=(Tensor[(15, 7, ?), bool], Tensor[(6, 12), int64], int8, Tensor[(384), int8]) */;
  %177 = cast(%var_923, dtype="float64") /* ty=Tensor[(96), float64] */;
  %178 = cast(%var_923, dtype="float64") /* ty=Tensor[(96), float64] */;
  %179 = reshape(%177, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %180 = reshape(%178, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %181 = logical_xor(%170, %171) /* ty=Tensor[(13, 8, 11), uint16] */;
  %182 = %176.1;
  %183 = @func_21(%179, %180) /* ty=Tensor[(3, 2, 16), float64] */;
  (%181, %182, meta[relay.Constant][18] /* ty=Tensor[(21, 5), float32] */, meta[relay.Constant][19] /* ty=Tensor[(48, 8), int8] */, %183, %var_923)
}

def @func_756(%var_710: Tensor[(15, 7, 1), float32], %var_746: Tensor[(384), int8]) -> (Tensor[(15, 7, ?), bool], Tensor[(6, 12), int64], int8, Tensor[(384), int8]) {
  %184 = cast(%var_710, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
  %185 = exp(%184) /* ty=Tensor[(15, 7, 1), float32] */;
  %186 = cast(%185, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
  %187 = atan(%186) /* ty=Tensor[(15, 7, 1), float32] */;
  %188 = cast(%var_710, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
  %189 = tan(%188) /* ty=Tensor[(15, 7, 1), float32] */;
  %190 = cast(%189, dtype="bool") /* ty=Tensor[(15, 7, 1), bool] */;
  %191 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%187, dtype="bool") /* ty=Tensor[(15, 7, 1), bool] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %194 = cast(meta[relay.Constant][20] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %195 = cast(%var_746, dtype="int8") /* ty=Tensor[(384), int8] */;
  %196 = reshape(%194, newshape=[]) /* ty=int8 */;
  %197 = reshape(%195, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), int8] */;
  %198 = @func_177(%196, %197) /* ty=(Tensor[(3, 16, 8), int8], Tensor[(3, 16, 8), float64], Tensor[(4, 2, 9), int64], Tensor[(6, 12), int64], Tensor[(4, 2, 9), int64], Tensor[(4, 2, 9), int64]) */;
  %199 = logical_or(%192, %193) /* ty=Tensor[(15, 7, ?), bool] */;
  %200 = %198.3;
  (%199, %200, meta[relay.Constant][20] /* ty=int8 */, %var_746)
}

def @func_1924(%var_1856: Tensor[(16, 9, 13), bool], %var_1900: Tensor[(96), float64]) -> (Tensor[(576), float64], Tensor[(40), float64], Tensor[(2496), float32], Tensor[(896), float64], Tensor[(13, 16, 12), float64], Tensor[(48, 8), int8], Tensor[(11, 104), int64], Tensor[(96), float64], Tensor[(3, 2, 16), float64], Tensor[(16, 9, 13), bool]) {
  %201 = cast(meta[relay.Constant][23] /* ty=Tensor[(2496), float32] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %202 = reshape(%201, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), float32] */;
  %203 = @func_1028(%202) /* ty=(Tensor[(13, 16, 12), float32],) */;
  %204 = %203.0;
  %205 = cast(meta[relay.Constant][21] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %206 = cast(meta[relay.Constant][22] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %207 = cast(meta[relay.Constant][21] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %208 = cast(meta[relay.Constant][23] /* ty=Tensor[(2496), float32] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %209 = cast(meta[relay.Constant][24] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %210 = cast(False /* ty=bool */, dtype="int8") /* ty=int8 */;
  %211 = cast(meta[relay.Constant][21] /* ty=Tensor[(576), float64] */, dtype="int8") /* ty=Tensor[(576), int8] */;
  %212 = reshape(%205, newshape=[6, 6, 16]) /* ty=Tensor[(6, 6, 16), float64] */;
  %213 = reshape(%206, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %214 = reshape(%207, newshape=[6, 6, 16]) /* ty=Tensor[(6, 6, 16), float64] */;
  %215 = reshape(%208, newshape=[2496]) /* ty=Tensor[(2496), float32] */;
  %216 = reshape(%209, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %217 = reshape(%210, newshape=[]) /* ty=int8 */;
  %218 = reshape(%211, newshape=[6, 6, 16]) /* ty=Tensor[(6, 6, 16), int8] */;
  %219 = @func_1256(%212, %213, %214, %215, %216, %217, %218) /* ty=(Tensor[(?, 5, 8), int32], Tensor[(40), float64], Tensor[(6, 6, 16), bool], Tensor[(13, 16, 12), float32], Tensor[(2496), float32], Tensor[(3, 2, 16), float64], Tensor[(896), float64], int8, Tensor[(384), int8], Tensor[(6, 6, 16), uint64]) */;
  %220 = %219.4;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %222 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%204, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %225 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 104), int64] */, dtype="int64") /* ty=Tensor[(11, 104), int64] */;
  %226 = cast(%var_1900, dtype="float64") /* ty=Tensor[(96), float64] */;
  %227 = reshape(%225, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), int64] */;
  %228 = reshape(%226, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %229 = @func_927(%227, %228) /* ty=(Tensor[(13, 8, 11), uint16], Tensor[(6, 12), int64], Tensor[(21, 5), float32], Tensor[(48, 8), int8], Tensor[(3, 2, 16), float64], Tensor[(96), float64]) */;
  %230 = cast(%var_1900, dtype="float64") /* ty=Tensor[(96), float64] */;
  %231 = cast(%var_1900, dtype="float64") /* ty=Tensor[(96), float64] */;
  %232 = reshape(%230, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %233 = reshape(%231, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %234 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %235 = cast(%var_1856, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
  %236 = logical_or(%234, %235) /* ty=Tensor[(16, 9, 13), bool] */;
  %237 = cast(%var_1856, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %241 = mod(%223, %224) /* ty=Tensor[(13, 16, 12), float64] */;
  %242 = %229.3;
  %243 = @func_21(%232, %233) /* ty=Tensor[(3, 2, 16), float64] */;
  %244 = logical_and(%239, %240) /* ty=Tensor[(16, 9, 13), bool] */;
  (meta[relay.Constant][21] /* ty=Tensor[(576), float64] */, meta[relay.Constant][22] /* ty=Tensor[(40), float64] */, meta[relay.Constant][23] /* ty=Tensor[(2496), float32] */, meta[relay.Constant][24] /* ty=Tensor[(896), float64] */, %241, %242, meta[relay.Constant][25] /* ty=Tensor[(11, 104), int64] */, %var_1900, %243, %244)
}

def @func_3836(%var_3818: Tensor[(12, 6, 8), float32]) -> (Tensor[(12, 6, 8), float32], Tensor[(4, 2, 9), int64], Tensor[(72), int64], Tensor[(14, 14, 14), int32]) {
  %245 = cast(%var_3818, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
  %246 = cast(meta[relay.Constant][26] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
  %247 = reshape(%246, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), int64] */;
  %248 = @func_33(%247) /* ty=(Tensor[(4, 2, 9), int64],) */;
  %249 = @func_3582() /* ty=(Tensor[(14, 14, 14), int32],) */;
  %250 = acos(%245) /* ty=Tensor[(12, 6, 8), float32] */;
  %251 = %248.0;
  %252 = %249.0;
  (%250, %251, meta[relay.Constant][26] /* ty=Tensor[(72), int64] */, %252)
}

def @func_2551(%var_2535: Tensor[(3, 2, 12), int64], %var_2536: Tensor[(3, 2, 12), int64]) -> (Tensor[(3, 2, 12), int64],) {
  %253 = cast(%var_2536, dtype="int64") /* ty=Tensor[(3, 2, 12), int64] */;
  %254 = shape_of(%var_2535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%var_2535, dtype="int64") /* ty=Tensor[(3, 2, 12), int64] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %257 = minimum(%255, %256) /* ty=Tensor[(3, 2, 12), int64] */;
  (%257,)
}

def @func_5171(%var_5157: Tensor[(40), float64], %var_5160: int8) -> (Tensor[(15, 16, 4), bool], Tensor[(40), float64], Tensor[(40), float64], Tensor[(2496), float32], Tensor[(896), float64], Tensor[(36, 16), float64]) {
  %258 = @func_4205() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(15, 16, 4), bool], Tensor[(120, 8), bool], Tensor[(14, 14, 14), int64]) */;
  %259 = cast(meta[relay.Constant][27] /* ty=Tensor[(36, 16), float64] */, dtype="float64") /* ty=Tensor[(36, 16), float64] */;
  %260 = cast(%var_5157, dtype="float64") /* ty=Tensor[(40), float64] */;
  %261 = cast(meta[relay.Constant][27] /* ty=Tensor[(36, 16), float64] */, dtype="float64") /* ty=Tensor[(36, 16), float64] */;
  %262 = cast(meta[relay.Constant][28] /* ty=Tensor[(2496), float32] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %263 = cast(meta[relay.Constant][29] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %264 = cast(%var_5160, dtype="int8") /* ty=int8 */;
  %265 = cast(meta[relay.Constant][27] /* ty=Tensor[(36, 16), float64] */, dtype="int8") /* ty=Tensor[(36, 16), int8] */;
  %266 = reshape(%259, newshape=[6, 6, 16]) /* ty=Tensor[(6, 6, 16), float64] */;
  %267 = reshape(%260, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %268 = reshape(%261, newshape=[6, 6, 16]) /* ty=Tensor[(6, 6, 16), float64] */;
  %269 = reshape(%262, newshape=[2496]) /* ty=Tensor[(2496), float32] */;
  %270 = reshape(%263, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %271 = reshape(%264, newshape=[]) /* ty=int8 */;
  %272 = reshape(%265, newshape=[6, 6, 16]) /* ty=Tensor[(6, 6, 16), int8] */;
  %273 = @func_1256(%266, %267, %268, %269, %270, %271, %272) /* ty=(Tensor[(?, 5, 8), int32], Tensor[(40), float64], Tensor[(6, 6, 16), bool], Tensor[(13, 16, 12), float32], Tensor[(2496), float32], Tensor[(3, 2, 16), float64], Tensor[(896), float64], int8, Tensor[(384), int8], Tensor[(6, 6, 16), uint64]) */;
  %274 = cast(meta[relay.Constant][27] /* ty=Tensor[(36, 16), float64] */, dtype="float64") /* ty=Tensor[(36, 16), float64] */;
  %275 = cast(%var_5160, dtype="float64") /* ty=float64 */;
  %276 = %258.1;
  %277 = %273.1;
  %278 = mod(%274, %275) /* ty=Tensor[(36, 16), float64] */;
  (%276, %277, %var_5157, meta[relay.Constant][28] /* ty=Tensor[(2496), float32] */, meta[relay.Constant][29] /* ty=Tensor[(896), float64] */, %278)
}

def @func_4749() -> (int8,) {
  %279 = @func_4646() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8]) */;
  %280 = %279.2;
  (%280,)
}

def @func_3329(%var_3286: Tensor[(2, 13, 13), float32], %var_3310: Tensor[(2, 13, 13), float32]) -> (Tensor[(2, 13, 13), float32], Tensor[(2, 13, 13), uint64], Tensor[(2, 13, 13), uint8]) {
  %281 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 13), float32] */;
  %282 = shape_of(%var_3286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%var_3286, dtype="float32") /* ty=Tensor[(2, 13, 13), float32] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %285 = cast(%var_3310, dtype="uint64") /* ty=Tensor[(2, 13, 13), uint64] */;
  %286 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(2, 13, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 13, 13), float32] */, dtype="uint64") /* ty=Tensor[(2, 13, 13), uint64] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %289 = cast(%var_3286, dtype="bool") /* ty=Tensor[(2, 13, 13), bool] */;
  %290 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(2, 13, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 13, 13), float32] */, dtype="bool") /* ty=Tensor[(2, 13, 13), bool] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %293 = less(%291, %292) /* ty=Tensor[(2, 13, 13), bool] */;
  %294 = cast(%293, dtype="float64") /* ty=Tensor[(2, 13, 13), float64] */;
  %295 = cosh(%294) /* ty=Tensor[(2, 13, 13), float64] */;
  %296 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 13, 13), float64] */, dtype="uint8") /* ty=Tensor[(2, 13, 13), uint8] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="uint8") /* ty=Tensor[(2, 13, 13), uint8] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %300 = divide(%283, %284) /* ty=Tensor[(2, 13, 13), float32] */;
  %301 = minimum(%287, %288) /* ty=Tensor[(2, 13, 13), uint64] */;
  %302 = bitwise_xor(%298, %299) /* ty=Tensor[(2, 13, 13), uint8] */;
  (%300, %301, %302)
}

def @func_5039(%var_4980: Tensor[(338), float32], %var_5026: Tensor[(338), bool]) -> (Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int32], Tensor[(12, 6, 8), float32], Tensor[(12, 48), float32], Tensor[(3, 9, 8), int8], float64, Tensor[(280, 4), float64], Tensor[(338), bool]) {
  %303 = @func_4205() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(15, 16, 4), bool], Tensor[(120, 8), bool], Tensor[(14, 14, 14), int64]) */;
  %304 = @func_3582() /* ty=(Tensor[(14, 14, 14), int32],) */;
  %305 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 48), float32] */, dtype="float32") /* ty=Tensor[(12, 48), float32] */;
  %306 = reshape(%305, newshape=[12, 6, 8]) /* ty=Tensor[(12, 6, 8), float32] */;
  %307 = @func_3836(%306) /* ty=(Tensor[(12, 6, 8), float32], Tensor[(4, 2, 9), int64], Tensor[(72), int64], Tensor[(14, 14, 14), int32]) */;
  %308 = cast(2.94844f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %309 = cast(meta[relay.Constant][33] /* ty=Tensor[(280, 4), float64] */, dtype="float64") /* ty=Tensor[(280, 4), float64] */;
  %310 = reshape(%308, newshape=[]) /* ty=float64 */;
  %311 = reshape(%309, newshape=[10, 14, 8]) /* ty=Tensor[(10, 14, 8), float64] */;
  %312 = @func_4560(%310, %311) /* ty=(Tensor[(10, 14, 8), float64], Tensor[(3, 9, 8), int8], Tensor[(216), float64]) */;
  %313 = @func_3885() /* ty=(Tensor[(14, 14, 14), bool], Tensor[(2, 13, 13), float32], Tensor[(338), float32]) */;
  %314 = %313.2;
  %315 = cast(%var_4980, dtype="bool") /* ty=Tensor[(338), bool] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(1), int32] */;
  %317 = cast(%314, dtype="bool") /* ty=Tensor[(338), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?), bool] */;
  %319 = greater_equal(%317, %318) /* ty=Tensor[(338), bool] */;
  %320 = cast(%319, dtype="float64") /* ty=Tensor[(338), float64] */;
  %321 = cos(%320) /* ty=Tensor[(338), float64] */;
  %322 = cast(%321, dtype="float32") /* ty=Tensor[(338), float32] */;
  %323 = sinh(%322) /* ty=Tensor[(338), float32] */;
  %324 = cast(%319, dtype="bool") /* ty=Tensor[(338), bool] */;
  %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(1), int32] */;
  %326 = cast(%323, dtype="bool") /* ty=Tensor[(338), bool] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?), bool] */;
  %328 = logical_and(%326, %327) /* ty=Tensor[(338), bool] */;
  %329 = cast(%var_5026, dtype="bool") /* ty=Tensor[(338), bool] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(1), int32] */;
  %331 = cast(%328, dtype="bool") /* ty=Tensor[(338), bool] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?), bool] */;
  %333 = %303.3;
  %334 = %304.0;
  %335 = %307.0;
  %336 = %312.1;
  %337 = not_equal(%331, %332) /* ty=Tensor[(338), bool] */;
  (%333, %334, %335, meta[relay.Constant][32] /* ty=Tensor[(12, 48), float32] */, %336, 2.94844f64 /* ty=float64 */, meta[relay.Constant][33] /* ty=Tensor[(280, 4), float64] */, %337)
}

def @func_5568() -> (Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int32], Tensor[(15, 16, 4), bool]) {
  %338 = @func_3911() /* ty=(Tensor[(14, 14, 14), int32],) */;
  %339 = @func_4205() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(15, 16, 4), bool], Tensor[(120, 8), bool], Tensor[(14, 14, 14), int64]) */;
  %340 = @func_3890() /* ty=Tensor[(14, 14, 14), int64] */;
  %341 = %338.0;
  %342 = %339.1;
  (%340, %341, %342)
}

def @func_4560(%var_4521: float64, %var_4522: Tensor[(10, 14, 8), float64]) -> (Tensor[(10, 14, 8), float64], Tensor[(3, 9, 8), int8], Tensor[(216), float64]) {
  %343 = cast(%var_4521, dtype="float64") /* ty=float64 */;
  %344 = cast(%var_4522, dtype="float64") /* ty=Tensor[(10, 14, 8), float64] */;
  %345 = cast(meta[relay.Constant][34] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %346 = reshape(%345, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), float64] */;
  %347 = @func_4222(%346) /* ty=(Tensor[(3, 9, 8), int8],) */;
  %348 = mod(%343, %344) /* ty=Tensor[(10, 14, 8), float64] */;
  %349 = %347.0;
  (%348, %349, meta[relay.Constant][34] /* ty=Tensor[(216), float64] */)
}

def @func_1256(%var_1192: Tensor[(6, 6, 16), float64], %var_1205: Tensor[(40), float64], %var_1208: Tensor[(6, 6, 16), float64], %var_1226: Tensor[(2496), float32], %var_1230: Tensor[(896), float64], %var_1231: int8, %var_1250: Tensor[(6, 6, 16), int8]) -> (Tensor[(?, 5, 8), int32], Tensor[(40), float64], Tensor[(6, 6, 16), bool], Tensor[(13, 16, 12), float32], Tensor[(2496), float32], Tensor[(3, 2, 16), float64], Tensor[(896), float64], int8, Tensor[(384), int8], Tensor[(6, 6, 16), uint64]) {
  %350 = cast(%var_1205, dtype="float64") /* ty=Tensor[(40), float64] */;
  %351 = reshape(%350, newshape=[1, 5, 8]) /* ty=Tensor[(1, 5, 8), float64] */;
  %352 = cast(%var_1192, dtype="float64") /* ty=Tensor[(6, 6, 16), float64] */;
  %353 = log(%352) /* ty=Tensor[(6, 6, 16), float64] */;
  %354 = cast(%var_1208, dtype="int8") /* ty=Tensor[(6, 6, 16), int8] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%353, dtype="int8") /* ty=Tensor[(6, 6, 16), int8] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %358 = bitwise_or(%356, %357) /* ty=Tensor[(6, 6, 16), int8] */;
  %359 = cast(%358, dtype="bool") /* ty=Tensor[(6, 6, 16), bool] */;
  %360 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%353, dtype="bool") /* ty=Tensor[(6, 6, 16), bool] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %363 = cast(%var_1226, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %364 = reshape(%363, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), float32] */;
  %365 = @func_1028(%364) /* ty=(Tensor[(13, 16, 12), float32],) */;
  %366 = cast(%var_1230, dtype="float64") /* ty=Tensor[(896), float64] */;
  %367 = cast(%var_1231, dtype="int8") /* ty=int8 */;
  %368 = cast(meta[relay.Constant][35] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %369 = reshape(%366, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), float64] */;
  %370 = reshape(%367, newshape=[]) /* ty=int8 */;
  %371 = reshape(%368, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %372 = @func_274(%369, %370, %371) /* ty=(Tensor[(14, 8, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8], Tensor[(3, 16, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 2, 9), int64]) */;
  %373 = cast(%var_1250, dtype="uint64") /* ty=Tensor[(6, 6, 16), uint64] */;
  %374 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%358, dtype="uint64") /* ty=Tensor[(6, 6, 16), uint64] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %377 = @func_804(%351) /* ty=Tensor[(?, 5, 8), int32] */;
  %378 = equal(%361, %362) /* ty=Tensor[(6, 6, 16), bool] */;
  %379 = %365.0;
  %380 = %372.1;
  %381 = maximum(%375, %376) /* ty=Tensor[(6, 6, 16), uint64] */;
  (%377, %var_1205, %378, %379, %var_1226, %380, %var_1230, %var_1231, meta[relay.Constant][35] /* ty=Tensor[(384), int8] */, %381)
}

def @func_804(%var_790: Tensor[(1, 5, 8), float64]) -> Tensor[(?, 5, 8), int32] {
  %382 = cast(%var_790, dtype="float64") /* ty=Tensor[(1, 5, 8), float64] */;
  %383 = tan(%382) /* ty=Tensor[(1, 5, 8), float64] */;
  %384 = cast(%383, dtype="float64") /* ty=Tensor[(1, 5, 8), float64] */;
  %385 = asin(%384) /* ty=Tensor[(1, 5, 8), float64] */;
  %386 = cast(%383, dtype="int32") /* ty=Tensor[(1, 5, 8), int32] */;
  %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%385, dtype="int32") /* ty=Tensor[(1, 5, 8), int32] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_or(%388, %389) /* ty=Tensor[(?, 5, 8), int32] */
}

def @func_3059(%var_3004: Tensor[(8, 10, 14), bool], %var_3012: Tensor[(96), float64], %var_3030: Tensor[(975), float32]) -> (Tensor[(8, 10, 14), bool], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(384), int8], Tensor[(105), float32], Tensor[(96, 4), int8], Tensor[(13, 15, 5), uint32], Tensor[(975), float32], Tensor[(960), float32], Tensor[(896), float64]) {
  %390 = cast(meta[relay.Constant][36] /* ty=Tensor[(8, 10, 14), bool] */, dtype="bool") /* ty=Tensor[(8, 10, 14), bool] */;
  %391 = shape_of(%var_3004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%var_3004, dtype="bool") /* ty=Tensor[(8, 10, 14), bool] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %394 = cast(%var_3012, dtype="float64") /* ty=Tensor[(96), float64] */;
  %395 = cast(%var_3012, dtype="float64") /* ty=Tensor[(96), float64] */;
  %396 = reshape(%394, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %397 = reshape(%395, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %398 = cast(meta[relay.Constant][37] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
  %399 = cast(meta[relay.Constant][38] /* ty=Tensor[(96, 4), int8] */, dtype="int8") /* ty=Tensor[(96, 4), int8] */;
  %400 = reshape(%398, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float32] */;
  %401 = reshape(%399, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %402 = @func_756(%400, %401) /* ty=(Tensor[(15, 7, ?), bool], Tensor[(6, 12), int64], int8, Tensor[(384), int8]) */;
  %403 = cast(%var_3030, dtype="float32") /* ty=Tensor[(975), float32] */;
  %404 = cast(meta[relay.Constant][39] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
  %405 = cast(meta[relay.Constant][40] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %406 = reshape(%403, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), float32] */;
  %407 = reshape(%404, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %408 = reshape(%405, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %409 = @func_1525(%406, %407, %408) /* ty=(Tensor[(13, 15, 5), uint32], Tensor[(13, 15, 5), float32], Tensor[(4, 2, 9), int64], Tensor[(960), float32], Tensor[(896), float64], Tensor[(384), int8]) */;
  %410 = cast(meta[relay.Constant][40] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %411 = asin(%410) /* ty=Tensor[(896), float64] */;
  %412 = cast(%411, dtype="float64") /* ty=Tensor[(896), float64] */;
  %413 = asinh(%412) /* ty=Tensor[(896), float64] */;
  %414 = cast(%413, dtype="float64") /* ty=Tensor[(896), float64] */;
  %415 = logical_and(%392, %393) /* ty=Tensor[(8, 10, 14), bool] */;
  %416 = @func_21(%396, %397) /* ty=Tensor[(3, 2, 16), float64] */;
  %417 = %402.3;
  %418 = %409.0;
  %419 = atan(%414) /* ty=Tensor[(896), float64] */;
  (%415, %416, %var_3012, %417, meta[relay.Constant][37] /* ty=Tensor[(105), float32] */, meta[relay.Constant][38] /* ty=Tensor[(96, 4), int8] */, %418, %var_3030, meta[relay.Constant][39] /* ty=Tensor[(960), float32] */, %419)
}

def @func_4474() -> (Tensor[(14, 14, 14), float64], Tensor[(14, 14, 14), float64]) {
  %420 = @func_3455() /* ty=Tensor[(14, 14, 14), int64] */;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
  %422 = cosh(%421) /* ty=Tensor[(14, 14, 14), float32] */;
  %423 = cast(%422, dtype="float64") /* ty=Tensor[(14, 14, 14), float64] */;
  %424 = cast(%420, dtype="float64") /* ty=Tensor[(14, 14, 14), float64] */;
  %425 = atanh(%423) /* ty=Tensor[(14, 14, 14), float64] */;
  %426 = sqrt(%424) /* ty=Tensor[(14, 14, 14), float64] */;
  (%425, %426)
}

def @func_5858(%var_5821: Tensor[(16, 15, 5), float32], %var_5822: Tensor[(16, 15, 5), float32], %var_5844: Tensor[(40), float64]) -> (Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float64], Tensor[(40), float64], Tensor[(40), float64], int8) {
  %427 = cast(%var_5822, dtype="float32") /* ty=Tensor[(16, 15, 5), float32] */;
  %428 = shape_of(%var_5821, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%var_5821, dtype="float32") /* ty=Tensor[(16, 15, 5), float32] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %431 = cast(%var_5822, dtype="float64") /* ty=Tensor[(16, 15, 5), float64] */;
  %432 = cast(%var_5844, dtype="float64") /* ty=Tensor[(40), float64] */;
  %433 = cast(meta[relay.Constant][41] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %434 = reshape(%432, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %435 = reshape(%433, newshape=[]) /* ty=int8 */;
  %436 = @func_5171(%434, %435) /* ty=(Tensor[(15, 16, 4), bool], Tensor[(40), float64], Tensor[(40), float64], Tensor[(2496), float32], Tensor[(896), float64], Tensor[(36, 16), float64]) */;
  %437 = power(%429, %430) /* ty=Tensor[(16, 15, 5), float32] */;
  %438 = log2(%431) /* ty=Tensor[(16, 15, 5), float64] */;
  %439 = %436.2;
  (%437, %438, %439, %var_5844, meta[relay.Constant][41] /* ty=int8 */)
}

def @func_3443() -> (Tensor[(14, 14, 14), float32], Tensor[(14, 14, 14), int64]) {
  %440 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 14, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
  %441 = cast(meta[relay.Constant][43] /* ty=Tensor[(14, 14, 14), float32] */, dtype="int64") /* ty=Tensor[(14, 14, 14), int64] */;
  %442 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(14, 14, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(meta[relay.Constant][42] /* ty=Tensor[(14, 14, 14), float32] */, dtype="int64") /* ty=Tensor[(14, 14, 14), int64] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %445 = asinh(%440) /* ty=Tensor[(14, 14, 14), float32] */;
  %446 = right_shift(%443, %444) /* ty=Tensor[(14, 14, 14), int64] */;
  (%445, %446)
}

def @func_5515(%var_5500: Tensor[(16, 11, 11), float32]) -> Tensor[(16, 11, 11), float32] {
  %447 = cast(%var_5500, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  %448 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(16, 11, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(meta[relay.Constant][44] /* ty=Tensor[(16, 11, 11), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %451 = multiply(%449, %450) /* ty=Tensor[(16, 11, 11), float32] */;
  %452 = cast(%451, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  asin(%452) /* ty=Tensor[(16, 11, 11), float32] */
}

def @func_4934() -> (Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), bool], int8) {
  %453 = @func_3544() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64]) */;
  %454 = @func_3890() /* ty=Tensor[(14, 14, 14), int64] */;
  %455 = cast(%454, dtype="int64") /* ty=Tensor[(14, 14, 14), int64] */;
  %456 = %453.1;
  %457 = cast(%456, dtype="int64") /* ty=Tensor[(14, 14, 14), int64] */;
  %458 = reshape(%455, newshape=[14, 14, 14]) /* ty=Tensor[(14, 14, 14), int64] */;
  %459 = reshape(%457, newshape=[14, 14, 14]) /* ty=Tensor[(14, 14, 14), int64] */;
  %460 = @func_3760(%458, %459) /* ty=(Tensor[(14, 14, 14), uint64], Tensor[(14, 14, 14), bool]) */;
  %461 = @func_4646() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8]) */;
  %462 = %460.1;
  %463 = %461.2;
  (%454, %456, %462, %463)
}

def @func_2055(%var_2039: Tensor[(7, 7, 2), int32], %var_2040: Tensor[(7, 7, 2), int32], %var_2051: int8) -> (Tensor[(7, 7, 2), int32], Tensor[(7, 7, 2), float64], Tensor[(3, 16, 8), float64], int8, Tensor[(384), int8]) {
  %464 = cast(%var_2040, dtype="int32") /* ty=Tensor[(7, 7, 2), int32] */;
  %465 = shape_of(%var_2039, dtype="int32") /* ty=Tensor[(3), int32] */;
  %466 = cast(%var_2039, dtype="int32") /* ty=Tensor[(7, 7, 2), int32] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %468 = cast(%var_2040, dtype="float64") /* ty=Tensor[(7, 7, 2), float64] */;
  %469 = cast(%var_2051, dtype="int8") /* ty=int8 */;
  %470 = cast(meta[relay.Constant][45] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %471 = reshape(%469, newshape=[]) /* ty=int8 */;
  %472 = reshape(%470, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), int8] */;
  %473 = @func_177(%471, %472) /* ty=(Tensor[(3, 16, 8), int8], Tensor[(3, 16, 8), float64], Tensor[(4, 2, 9), int64], Tensor[(6, 12), int64], Tensor[(4, 2, 9), int64], Tensor[(4, 2, 9), int64]) */;
  %474 = maximum(%466, %467) /* ty=Tensor[(7, 7, 2), int32] */;
  %475 = sigmoid(%468) /* ty=Tensor[(7, 7, 2), float64] */;
  %476 = %473.1;
  (%474, %475, %476, %var_2051, meta[relay.Constant][45] /* ty=Tensor[(384), int8] */)
}

def @func_5641(%var_5597: Tensor[(10, 3, 8), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int32], Tensor[(10, 3, 8), uint64], Tensor[(10, 3, 8), float64]) {
  %477 = cast(%var_5597, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %478 = cast(%var_5597, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
  %479 = log(%478) /* ty=Tensor[(10, 3, 8), float64] */;
  %480 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 3, 8), float64] */, dtype="uint8") /* ty=Tensor[(10, 3, 8), uint8] */;
  %481 = shape_of(%var_5597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%var_5597, dtype="uint8") /* ty=Tensor[(10, 3, 8), uint8] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %484 = multiply(%482, %483) /* ty=Tensor[(10, 3, 8), uint8] */;
  %485 = cast(%484, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
  %486 = shape_of(%var_5597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%var_5597, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %489 = not_equal(%487, %488) /* ty=Tensor[(10, 3, 8), bool] */;
  %490 = cast(%489, dtype="int32") /* ty=Tensor[(10, 3, 8), int32] */;
  %491 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%479, dtype="int32") /* ty=Tensor[(10, 3, 8), int32] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %494 = cast(%479, dtype="uint64") /* ty=Tensor[(10, 3, 8), uint64] */;
  %495 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%489, dtype="uint64") /* ty=Tensor[(10, 3, 8), uint64] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %498 = cast(%var_5597, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
  %499 = exp(%477) /* ty=Tensor[(10, 3, 8), float32] */;
  %500 = right_shift(%492, %493) /* ty=Tensor[(10, 3, 8), int32] */;
  %501 = left_shift(%496, %497) /* ty=Tensor[(10, 3, 8), uint64] */;
  %502 = cos(%498) /* ty=Tensor[(10, 3, 8), float64] */;
  (%499, %500, %501, %502)
}

def @func_3911() -> (Tensor[(14, 14, 14), int32],) {
  %503 = @func_3582() /* ty=(Tensor[(14, 14, 14), int32],) */;
  %504 = %503.0;
  (%504,)
}

def @func_4820() -> (Tensor[(14, 14, 14), int32],) {
  %505 = @func_3582() /* ty=(Tensor[(14, 14, 14), int32],) */;
  %506 = %505.0;
  (%506,)
}

def @func_21(%var_12: Tensor[(3, 2, 16), float64], %var_13: Tensor[(3, 2, 16), float64]) -> Tensor[(3, 2, 16), float64] {
  %507 = cast(%var_13, dtype="float64") /* ty=Tensor[(3, 2, 16), float64] */;
  %508 = shape_of(%var_12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%var_12, dtype="float64") /* ty=Tensor[(3, 2, 16), float64] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  minimum(%509, %510) /* ty=Tensor[(3, 2, 16), float64] */
}

def @func_1998(%var_1995: Tensor[(5, 4, 2), float32]) -> (Tensor[(5, 4, 2), float32],) {
  %511 = cast(%var_1995, dtype="float32") /* ty=Tensor[(5, 4, 2), float32] */;
  %512 = erf(%511) /* ty=Tensor[(5, 4, 2), float32] */;
  (%512,)
}

def @func_3582() -> (Tensor[(14, 14, 14), int32],) {
  %513 = @func_3443() /* ty=(Tensor[(14, 14, 14), float32], Tensor[(14, 14, 14), int64]) */;
  %514 = %513.1;
  %515 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 14, 14), int64] */, dtype="int32") /* ty=Tensor[(14, 14, 14), int32] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%514, dtype="int32") /* ty=Tensor[(14, 14, 14), int32] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %519 = add(%517, %518) /* ty=Tensor[(14, 14, 14), int32] */;
  (%519,)
}

def @func_3890() -> Tensor[(14, 14, 14), int64] {
  %520 = @func_3469() /* ty=(Tensor[(14, 14, 14), int64],) */;
  %520.0
}

def @func_4738(%var_4663: Tensor[(11, 9, 2), uint32], %var_4664: Tensor[(11, 9, 2), uint32], %var_4671: Tensor[(960), float32], %var_4698: Tensor[(96), float64]) -> (Tensor[(896), float64], Tensor[(112), float64], Tensor[(960), float32], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(11, 9, 2), int16], Tensor[(11, 9, 2), int16]) {
  %521 = cast(meta[relay.Constant][48] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %522 = cast(meta[relay.Constant][48] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %523 = cast(%var_4671, dtype="float32") /* ty=Tensor[(960), float32] */;
  %524 = reshape(%521, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float64] */;
  %525 = reshape(%522, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float64] */;
  %526 = reshape(%523, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %527 = @func_4122(%524, %525, %526) /* ty=(Tensor[(2, 8, 7), float64], Tensor[(6, 10, 16), bool], Tensor[(960), float32], Tensor[(896), float64], int8, Tensor[(48, 8), int8]) */;
  %528 = cast(%var_4698, dtype="float64") /* ty=Tensor[(96), float64] */;
  %529 = cast(%var_4698, dtype="float64") /* ty=Tensor[(96), float64] */;
  %530 = reshape(%528, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %531 = reshape(%529, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %532 = cast(%var_4664, dtype="bool") /* ty=Tensor[(11, 9, 2), bool] */;
  %533 = shape_of(%var_4663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%var_4663, dtype="bool") /* ty=Tensor[(11, 9, 2), bool] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %536 = greater_equal(%534, %535) /* ty=Tensor[(11, 9, 2), bool] */;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %538 = atanh(%537) /* ty=Tensor[(11, 9, 2), float32] */;
  %539 = cast(%536, dtype="int16") /* ty=Tensor[(11, 9, 2), int16] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="int16") /* ty=Tensor[(11, 9, 2), int16] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %543 = cast(%var_4664, dtype="int16") /* ty=Tensor[(11, 9, 2), int16] */;
  %544 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%538, dtype="int16") /* ty=Tensor[(11, 9, 2), int16] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %547 = %527.3;
  %548 = @func_21(%530, %531) /* ty=Tensor[(3, 2, 16), float64] */;
  %549 = logical_xor(%541, %542) /* ty=Tensor[(11, 9, 2), int16] */;
  %550 = left_shift(%545, %546) /* ty=Tensor[(11, 9, 2), int16] */;
  (%547, meta[relay.Constant][48] /* ty=Tensor[(112), float64] */, %var_4671, %548, %var_4698, %549, %550)
}

def @func_5690(%var_5656: Tensor[(14, 14, 14), int32], %var_5687: Tensor[(4, 24), float64]) -> (Tensor[(14, 14, 14), uint16], Tensor[(3, 9, 8), int8], Tensor[(216), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 24), float64]) {
  %551 = @func_4820() /* ty=(Tensor[(14, 14, 14), int32],) */;
  %552 = %551.0;
  %553 = cast(%var_5656, dtype="uint16") /* ty=Tensor[(14, 14, 14), uint16] */;
  %554 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%552, dtype="uint16") /* ty=Tensor[(14, 14, 14), uint16] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %557 = cast(meta[relay.Constant][49] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %558 = reshape(%557, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), float64] */;
  %559 = @func_4222(%558) /* ty=(Tensor[(3, 9, 8), int8],) */;
  %560 = cast(%var_5687, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
  %561 = cast(%var_5687, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
  %562 = reshape(%560, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %563 = reshape(%561, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %564 = bitwise_xor(%555, %556) /* ty=Tensor[(14, 14, 14), uint16] */;
  %565 = %559.0;
  %566 = @func_21(%562, %563) /* ty=Tensor[(3, 2, 16), float64] */;
  (%564, %565, meta[relay.Constant][49] /* ty=Tensor[(216), float64] */, %566, %var_5687)
}

def @func_274(%var_219: Tensor[(14, 8, 8), float64], %var_227: int8, %var_228: Tensor[(384), int8]) -> (Tensor[(14, 8, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8], Tensor[(3, 16, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 2, 9), int64]) {
  %567 = cast(%var_219, dtype="float64") /* ty=Tensor[(14, 8, 8), float64] */;
  %568 = cast(meta[relay.Constant][50] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %569 = cast(meta[relay.Constant][50] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %570 = reshape(%568, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %571 = reshape(%569, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %572 = cast(%var_227, dtype="int8") /* ty=int8 */;
  %573 = cast(%var_228, dtype="int8") /* ty=Tensor[(384), int8] */;
  %574 = reshape(%572, newshape=[]) /* ty=int8 */;
  %575 = reshape(%573, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), int8] */;
  %576 = @func_177(%574, %575) /* ty=(Tensor[(3, 16, 8), int8], Tensor[(3, 16, 8), float64], Tensor[(4, 2, 9), int64], Tensor[(6, 12), int64], Tensor[(4, 2, 9), int64], Tensor[(4, 2, 9), int64]) */;
  %577 = cast(%var_227, dtype="int8") /* ty=int8 */;
  %578 = cast(%var_228, dtype="int8") /* ty=Tensor[(384), int8] */;
  %579 = reshape(%577, newshape=[]) /* ty=int8 */;
  %580 = reshape(%578, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), int8] */;
  %581 = @func_177(%579, %580) /* ty=(Tensor[(3, 16, 8), int8], Tensor[(3, 16, 8), float64], Tensor[(4, 2, 9), int64], Tensor[(6, 12), int64], Tensor[(4, 2, 9), int64], Tensor[(4, 2, 9), int64]) */;
  %582 = @func_21(%570, %571) /* ty=Tensor[(3, 2, 16), float64] */;
  %583 = cast(%582, dtype="float64") /* ty=Tensor[(3, 2, 16), float64] */;
  %584 = cast(%582, dtype="float64") /* ty=Tensor[(3, 2, 16), float64] */;
  %585 = reshape(%583, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %586 = reshape(%584, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %587 = %576.2;
  %588 = cast(%587, dtype="int64") /* ty=Tensor[(4, 2, 9), int64] */;
  %589 = reshape(%588, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), int64] */;
  %590 = @func_33(%589) /* ty=(Tensor[(4, 2, 9), int64],) */;
  %591 = cos(%567) /* ty=Tensor[(14, 8, 8), float64] */;
  %592 = %581.1;
  %593 = @func_21(%585, %586) /* ty=Tensor[(3, 2, 16), float64] */;
  %594 = %590.0;
  (%591, %582, meta[relay.Constant][50] /* ty=Tensor[(96), float64] */, %587, %var_227, %var_228, %592, %593, %594)
}

def @main(%var_5924: Tensor[(14, 13, 5), float32]) -> Tensor[(14, 13, 5), float32] {
  %595 = cast(%var_5924, dtype="float32") /* ty=Tensor[(14, 13, 5), float32] */;
  rsqrt(%595) /* ty=Tensor[(14, 13, 5), float32] */
}

def @func_5760(%var_5753: Tensor[(240, 4), bool]) -> (Tensor[(14, 14, 14), float64], Tensor[(15, 16, 4), bool], Tensor[(240, 4), bool]) {
  %596 = @func_4474() /* ty=(Tensor[(14, 14, 14), float64], Tensor[(14, 14, 14), float64]) */;
  %597 = cast(%var_5753, dtype="bool") /* ty=Tensor[(240, 4), bool] */;
  %598 = cast(%var_5753, dtype="bool") /* ty=Tensor[(240, 4), bool] */;
  %599 = reshape(%597, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), bool] */;
  %600 = reshape(%598, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), bool] */;
  %601 = %596.1;
  %602 = @func_2388(%599, %600) /* ty=Tensor[(15, 16, 4), bool] */;
  (%601, %602, %var_5753)
}

def @func_5280() -> (Tensor[(14, 14, 14), uint32], Tensor[(2, 13, 13), float64]) {
  %603 = @func_4443() /* ty=(Tensor[(14, 14, 14), uint32],) */;
  %604 = @func_3885() /* ty=(Tensor[(14, 14, 14), bool], Tensor[(2, 13, 13), float32], Tensor[(338), float32]) */;
  %605 = %604.1;
  %606 = cast(%605, dtype="float64") /* ty=Tensor[(2, 13, 13), float64] */;
  %607 = %603.0;
  %608 = sqrt(%606) /* ty=Tensor[(2, 13, 13), float64] */;
  (%607, %608)
}

def @func_5376(%var_5337: Tensor[(14, 14, 14), int64], %var_5346: Tensor[(112), float64], %var_5347: Tensor[(960), float32], %var_5364: float64) -> (Tensor[(14, 14, 14), int8], Tensor[(6, 10, 16), bool], Tensor[(112), float64], Tensor[(216), float64], Tensor[(1120), float64], Tensor[(14, 14, 14), float64], Tensor[(960), bool]) {
  %609 = @func_4934() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), bool], int8) */;
  %610 = %609.0;
  %611 = cast(%var_5337, dtype="int8") /* ty=Tensor[(14, 14, 14), int8] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="int8") /* ty=Tensor[(14, 14, 14), int8] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %615 = cast(%var_5346, dtype="float64") /* ty=Tensor[(112), float64] */;
  %616 = cast(%var_5346, dtype="float64") /* ty=Tensor[(112), float64] */;
  %617 = cast(%var_5347, dtype="float32") /* ty=Tensor[(960), float32] */;
  %618 = reshape(%615, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float64] */;
  %619 = reshape(%616, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float64] */;
  %620 = reshape(%617, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %621 = @func_4122(%618, %619, %620) /* ty=(Tensor[(2, 8, 7), float64], Tensor[(6, 10, 16), bool], Tensor[(960), float32], Tensor[(896), float64], int8, Tensor[(48, 8), int8]) */;
  %622 = cast(%var_5364, dtype="float64") /* ty=float64 */;
  %623 = cast(meta[relay.Constant][51] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %624 = reshape(%622, newshape=[]) /* ty=float64 */;
  %625 = reshape(%623, newshape=[10, 14, 8]) /* ty=Tensor[(10, 14, 8), float64] */;
  %626 = @func_4560(%624, %625) /* ty=(Tensor[(10, 14, 8), float64], Tensor[(3, 9, 8), int8], Tensor[(216), float64]) */;
  %627 = cast(%var_5337, dtype="float64") /* ty=Tensor[(14, 14, 14), float64] */;
  %628 = cast(%var_5347, dtype="bool") /* ty=Tensor[(960), bool] */;
  %629 = cast(%var_5364, dtype="bool") /* ty=bool */;
  %630 = bitwise_or(%613, %614) /* ty=Tensor[(14, 14, 14), int8] */;
  %631 = %621.1;
  %632 = %626.2;
  %633 = rsqrt(%627) /* ty=Tensor[(14, 14, 14), float64] */;
  %634 = logical_and(%628, %629) /* ty=Tensor[(960), bool] */;
  (%630, %631, %var_5346, %632, meta[relay.Constant][51] /* ty=Tensor[(1120), float64] */, %633, %634)
}

def @func_4284(%var_4242: Tensor[(3, 9, 13), int64], %var_4270: Tensor[(384), int8]) -> (Tensor[(3, 9, 13), int64], Tensor[(14, 8, 8), float64], Tensor[(896), float64], int8, Tensor[(384), int8]) {
  %635 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 1, 13), int64] */, dtype="int64") /* ty=Tensor[(3, 1, 13), int64] */;
  %636 = cast(%var_4242, dtype="int64") /* ty=Tensor[(3, 9, 13), int64] */;
  %637 = cast(meta[relay.Constant][53] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %638 = cast(meta[relay.Constant][54] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %639 = cast(%var_4270, dtype="int8") /* ty=Tensor[(384), int8] */;
  %640 = reshape(%637, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), float64] */;
  %641 = reshape(%638, newshape=[]) /* ty=int8 */;
  %642 = reshape(%639, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %643 = @func_274(%640, %641, %642) /* ty=(Tensor[(14, 8, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8], Tensor[(3, 16, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 2, 9), int64]) */;
  %644 = right_shift(%635, %636) /* ty=Tensor[(3, 9, 13), int64] */;
  %645 = %643.0;
  (%644, %645, meta[relay.Constant][53] /* ty=Tensor[(896), float64] */, meta[relay.Constant][54] /* ty=int8 */, %var_4270)
}

def @func_177(%var_127: int8, %var_128: Tensor[(3, 16, 8), int8]) -> (Tensor[(3, 16, 8), int8], Tensor[(3, 16, 8), float64], Tensor[(4, 2, 9), int64], Tensor[(6, 12), int64], Tensor[(4, 2, 9), int64], Tensor[(4, 2, 9), int64]) {
  %646 = cast(%var_127, dtype="int8") /* ty=int8 */;
  %647 = cast(%var_128, dtype="int8") /* ty=Tensor[(3, 16, 8), int8] */;
  %648 = cast(%var_128, dtype="float64") /* ty=Tensor[(3, 16, 8), float64] */;
  %649 = cast(meta[relay.Constant][55] /* ty=Tensor[(6, 12), int64] */, dtype="int64") /* ty=Tensor[(6, 12), int64] */;
  %650 = reshape(%649, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), int64] */;
  %651 = @func_33(%650) /* ty=(Tensor[(4, 2, 9), int64],) */;
  %652 = %651.0;
  %653 = cast(%652, dtype="int64") /* ty=Tensor[(4, 2, 9), int64] */;
  %654 = reshape(%653, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), int64] */;
  %655 = @func_33(%654) /* ty=(Tensor[(4, 2, 9), int64],) */;
  %656 = cast(%652, dtype="int64") /* ty=Tensor[(4, 2, 9), int64] */;
  %657 = reshape(%656, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), int64] */;
  %658 = @func_33(%657) /* ty=(Tensor[(4, 2, 9), int64],) */;
  %659 = right_shift(%646, %647) /* ty=Tensor[(3, 16, 8), int8] */;
  %660 = erf(%648) /* ty=Tensor[(3, 16, 8), float64] */;
  %661 = %655.0;
  %662 = %658.0;
  (%659, %660, %652, meta[relay.Constant][55] /* ty=Tensor[(6, 12), int64] */, %661, %662)
}

def @func_4184(%var_4174: Tensor[(14, 14, 14), int64]) -> Tensor[(14, 14, 14), float32] {
  %663 = @func_3532() /* ty=(Tensor[(14, 14, 14), int64],) */;
  %664 = %663.0;
  %665 = cast(%var_4174, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
  %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%664, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%667, %668) /* ty=Tensor[(14, 14, 14), float32] */
}

def @func_3544() -> (Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64]) {
  %669 = @func_3469() /* ty=(Tensor[(14, 14, 14), int64],) */;
  %670 = @func_3532() /* ty=(Tensor[(14, 14, 14), int64],) */;
  %671 = %669.0;
  %672 = %670.0;
  (%671, %672)
}

def @func_3469() -> (Tensor[(14, 14, 14), int64],) {
  %673 = @func_3455() /* ty=Tensor[(14, 14, 14), int64] */;
  (%673,)
}

def @func_5411() -> (Tensor[(14, 14, 14), uint32], int8, Tensor[(3, 9, 8), int8], Tensor[(216), float64]) {
  %674 = @func_4443() /* ty=(Tensor[(14, 14, 14), uint32],) */;
  %675 = @func_4934() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), bool], int8) */;
  %676 = cast(meta[relay.Constant][56] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %677 = reshape(%676, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), float64] */;
  %678 = @func_4222(%677) /* ty=(Tensor[(3, 9, 8), int8],) */;
  %679 = %674.0;
  %680 = %675.3;
  %681 = %678.0;
  (%679, %680, %681, meta[relay.Constant][56] /* ty=Tensor[(216), float64] */)
}

def @func_4443() -> (Tensor[(14, 14, 14), uint32],) {
  %682 = @func_4205() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(15, 16, 4), bool], Tensor[(120, 8), bool], Tensor[(14, 14, 14), int64]) */;
  %683 = %682.3;
  %684 = cast(%683, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
  %685 = sin(%684) /* ty=Tensor[(14, 14, 14), float32] */;
  %686 = cast(%683, dtype="uint32") /* ty=Tensor[(14, 14, 14), uint32] */;
  %687 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%685, dtype="uint32") /* ty=Tensor[(14, 14, 14), uint32] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %690 = logical_xor(%688, %689) /* ty=Tensor[(14, 14, 14), uint32] */;
  (%690,)
}

def @func_4095(%var_4015: Tensor[(10, 96), float32], %var_4016: Tensor[(896), float64], %var_4017: int8, %var_4045: Tensor[(560, 2), bool], %var_4047: Tensor[(975), float32], %var_4068: Tensor[(576), float32]) -> (Tensor[(384), int8], Tensor[(10, 96), float32], Tensor[(896), float64], int8, Tensor[(384), int8], Tensor[(13, 16, 12), float32], Tensor[(2496), float32], Tensor[(384), int8], Tensor[(560, 2), bool], Tensor[(4, 24), float64], Tensor[(975), float32], Tensor[(72), int64], Tensor[(576), float32], Tensor[(14, 14, 14), bool], Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), uint16]) {
  %691 = cast(%var_4015, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
  %692 = cast(%var_4016, dtype="float64") /* ty=Tensor[(896), float64] */;
  %693 = cast(%var_4017, dtype="int8") /* ty=int8 */;
  %694 = cast(meta[relay.Constant][57] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %695 = reshape(%691, newshape=[6, 10, 16]) /* ty=Tensor[(6, 10, 16), float32] */;
  %696 = reshape(%692, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %697 = reshape(%693, newshape=[]) /* ty=int8 */;
  %698 = reshape(%694, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %699 = @func_683(%695, %696, %697, %698) /* ty=(Tensor[(6, 10, 16), bool], Tensor[(4, 2, 9), int64], Tensor[(896), float64], int8, Tensor[(384), int8]) */;
  %700 = cast(meta[relay.Constant][58] /* ty=Tensor[(2496), float32] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %701 = reshape(%700, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), float32] */;
  %702 = @func_1028(%701) /* ty=(Tensor[(13, 16, 12), float32],) */;
  %703 = cast(%var_4045, dtype="bool") /* ty=Tensor[(560, 2), bool] */;
  %704 = cast(meta[relay.Constant][59] /* ty=Tensor[(4, 24), float64] */, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
  %705 = cast(%var_4047, dtype="float32") /* ty=Tensor[(975), float32] */;
  %706 = reshape(%703, newshape=[8, 10, 14]) /* ty=Tensor[(8, 10, 14), bool] */;
  %707 = reshape(%704, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %708 = reshape(%705, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %709 = @func_3059(%706, %707, %708) /* ty=(Tensor[(8, 10, 14), bool], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(384), int8], Tensor[(105), float32], Tensor[(96, 4), int8], Tensor[(13, 15, 5), uint32], Tensor[(975), float32], Tensor[(960), float32], Tensor[(896), float64]) */;
  %710 = cast(%var_4068, dtype="float32") /* ty=Tensor[(576), float32] */;
  %711 = reshape(%710, newshape=[12, 6, 8]) /* ty=Tensor[(12, 6, 8), float32] */;
  %712 = @func_3836(%711) /* ty=(Tensor[(12, 6, 8), float32], Tensor[(4, 2, 9), int64], Tensor[(72), int64], Tensor[(14, 14, 14), int32]) */;
  %713 = @func_3469() /* ty=(Tensor[(14, 14, 14), int64],) */;
  %714 = %713.0;
  %715 = cast(%714, dtype="float64") /* ty=Tensor[(14, 14, 14), float64] */;
  %716 = atan(%715) /* ty=Tensor[(14, 14, 14), float64] */;
  %717 = cast(%716, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
  %718 = log10(%717) /* ty=Tensor[(14, 14, 14), float32] */;
  %719 = cast(%718, dtype="int64") /* ty=Tensor[(14, 14, 14), int64] */;
  %720 = cast(%714, dtype="int64") /* ty=Tensor[(14, 14, 14), int64] */;
  %721 = reshape(%719, newshape=[14, 14, 14]) /* ty=Tensor[(14, 14, 14), int64] */;
  %722 = reshape(%720, newshape=[14, 14, 14]) /* ty=Tensor[(14, 14, 14), int64] */;
  %723 = @func_3760(%721, %722) /* ty=(Tensor[(14, 14, 14), uint64], Tensor[(14, 14, 14), bool]) */;
  %724 = @func_3469() /* ty=(Tensor[(14, 14, 14), int64],) */;
  %725 = cast(%716, dtype="uint16") /* ty=Tensor[(14, 14, 14), uint16] */;
  %726 = shape_of(%718, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%718, dtype="uint16") /* ty=Tensor[(14, 14, 14), uint16] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %729 = %699.4;
  %730 = %702.0;
  %731 = %709.3;
  %732 = %712.2;
  %733 = %723.1;
  %734 = %724.0;
  %735 = minimum(%727, %728) /* ty=Tensor[(14, 14, 14), uint16] */;
  (%729, %var_4015, %var_4016, %var_4017, meta[relay.Constant][57] /* ty=Tensor[(384), int8] */, %730, meta[relay.Constant][58] /* ty=Tensor[(2496), float32] */, %731, %var_4045, meta[relay.Constant][59] /* ty=Tensor[(4, 24), float64] */, %var_4047, %732, %var_4068, %733, %734, %735)
}

def @func_5729(%var_5726: Tensor[(11, 15, 8), float64]) -> Tensor[(11, 15, 8), float64] {
  %736 = cast(%var_5726, dtype="float64") /* ty=Tensor[(11, 15, 8), float64] */;
  sqrt(%736) /* ty=Tensor[(11, 15, 8), float64] */
}

def @func_4646() -> (Tensor[(14, 14, 14), int64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8]) {
  %737 = cast(meta[relay.Constant][60] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %738 = cast(meta[relay.Constant][61] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %739 = reshape(%737, newshape=[]) /* ty=int8 */;
  %740 = reshape(%738, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), int8] */;
  %741 = @func_177(%739, %740) /* ty=(Tensor[(3, 16, 8), int8], Tensor[(3, 16, 8), float64], Tensor[(4, 2, 9), int64], Tensor[(6, 12), int64], Tensor[(4, 2, 9), int64], Tensor[(4, 2, 9), int64]) */;
  %742 = @func_3455() /* ty=Tensor[(14, 14, 14), int64] */;
  %743 = %741.5;
  (%742, %743, meta[relay.Constant][60] /* ty=int8 */, meta[relay.Constant][61] /* ty=Tensor[(384), int8] */)
}

def @func_5461() -> (Tensor[(14, 14, 14), int64], Tensor[(5, 4, 2), float32], Tensor[(40), float32]) {
  %744 = cast(meta[relay.Constant][62] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %745 = reshape(%744, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), float32] */;
  %746 = @func_1998(%745) /* ty=(Tensor[(5, 4, 2), float32],) */;
  %747 = @func_3890() /* ty=Tensor[(14, 14, 14), int64] */;
  %748 = %746.0;
  (%747, %748, meta[relay.Constant][62] /* ty=Tensor[(40), float32] */)
}

def @func_4863(%var_4851: Tensor[(14, 14, 14), uint32]) -> (Tensor[(14, 14, 14), uint8],) {
  %749 = @func_4443() /* ty=(Tensor[(14, 14, 14), uint32],) */;
  %750 = %749.0;
  %751 = cast(%var_4851, dtype="uint8") /* ty=Tensor[(14, 14, 14), uint8] */;
  %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%750, dtype="uint8") /* ty=Tensor[(14, 14, 14), uint8] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %755 = subtract(%753, %754) /* ty=Tensor[(14, 14, 14), uint8] */;
  (%755,)
}

def @func_5544(%var_5537: Tensor[(96), float64]) -> (Tensor[(14, 14, 14), int64], Tensor[(896), float64], Tensor[(1872), bool], Tensor[(96), float64]) {
  %756 = @func_3544() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64]) */;
  %757 = cast(meta[relay.Constant][63] /* ty=Tensor[(1872), bool] */, dtype="bool") /* ty=Tensor[(1872), bool] */;
  %758 = cast(%var_5537, dtype="float64") /* ty=Tensor[(96), float64] */;
  %759 = reshape(%757, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), bool] */;
  %760 = reshape(%758, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %761 = @func_1924(%759, %760) /* ty=(Tensor[(576), float64], Tensor[(40), float64], Tensor[(2496), float32], Tensor[(896), float64], Tensor[(13, 16, 12), float64], Tensor[(48, 8), int8], Tensor[(11, 104), int64], Tensor[(96), float64], Tensor[(3, 2, 16), float64], Tensor[(16, 9, 13), bool]) */;
  %762 = %756.0;
  %763 = %761.3;
  (%762, %763, meta[relay.Constant][63] /* ty=Tensor[(1872), bool] */, %var_5537)
}

def @func_5912(%var_5894: Tensor[(351), int64], %var_5895: Tensor[(6, 64), int8], %var_5907: Tensor[(96), float64]) -> (Tensor[(14, 14, 14), int64], Tensor[(6, 64), int8], Tensor[(351), bool], Tensor[(96), float64], Tensor[(96), float64]) {
  %764 = @func_4205() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(15, 16, 4), bool], Tensor[(120, 8), bool], Tensor[(14, 14, 14), int64]) */;
  %765 = cast(%var_5894, dtype="int64") /* ty=Tensor[(351), int64] */;
  %766 = cast(%var_5895, dtype="int8") /* ty=Tensor[(6, 64), int8] */;
  %767 = reshape(%765, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), int64] */;
  %768 = reshape(%766, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %769 = @func_4284(%767, %768) /* ty=(Tensor[(3, 9, 13), int64], Tensor[(14, 8, 8), float64], Tensor[(896), float64], int8, Tensor[(384), int8]) */;
  %770 = %769.3;
  %771 = cast(%var_5894, dtype="bool") /* ty=Tensor[(351), bool] */;
  %772 = cast(%770, dtype="bool") /* ty=bool */;
  %773 = cast(%var_5907, dtype="float64") /* ty=Tensor[(96), float64] */;
  %774 = reshape(%773, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %775 = @func_5544(%774) /* ty=(Tensor[(14, 14, 14), int64], Tensor[(896), float64], Tensor[(1872), bool], Tensor[(96), float64]) */;
  %776 = %764.3;
  %777 = logical_or(%771, %772) /* ty=Tensor[(351), bool] */;
  %778 = %775.3;
  (%776, %var_5895, %777, %778, %var_5907)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3838(%var_3837: Tensor[(12, 6, 8), float32]) -> (Tensor[(12, 6, 8), float32], Tensor[(4, 2, 9), int64], Tensor[(72), int64], Tensor[(14, 14, 14), int32]) {
  %8 = fn (%var_3818: Tensor[(12, 6, 8), float32]) -> (Tensor[(12, 6, 8), float32], Tensor[(4, 2, 9), int64], Tensor[(72), int64], Tensor[(14, 14, 14), int32]) {
    %0 = cast(%var_3818, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(72), int64] */, dtype="int64") /* ty=Tensor[(72), int64] */;
    %2 = reshape(%1, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), int64] */;
    %3 = @func_33(%2) /* ty=(Tensor[(4, 2, 9), int64],) */;
    %4 = @func_3582() /* ty=(Tensor[(14, 14, 14), int32],) */;
    %5 = acos(%0) /* ty=Tensor[(12, 6, 8), float32] */;
    %6 = %3.0;
    %7 = %4.0;
    (%5, %6, meta[relay.Constant][0] /* ty=Tensor[(72), int64] */, %7)
  };
  %8(%var_3837) /* ty=(Tensor[(12, 6, 8), float32], Tensor[(4, 2, 9), int64], Tensor[(72), int64], Tensor[(14, 14, 14), int32]) */
}

def @func_180(%var_178: int8, %var_179: Tensor[(3, 16, 8), int8]) -> (Tensor[(3, 16, 8), int8], Tensor[(3, 16, 8), float64], Tensor[(4, 2, 9), int64], Tensor[(6, 12), int64], Tensor[(4, 2, 9), int64], Tensor[(4, 2, 9), int64]) {
  %26 = fn (%var_127: int8, %var_128: Tensor[(3, 16, 8), int8]) -> (Tensor[(3, 16, 8), int8], Tensor[(3, 16, 8), float64], Tensor[(4, 2, 9), int64], Tensor[(6, 12), int64], Tensor[(4, 2, 9), int64], Tensor[(4, 2, 9), int64]) {
    %9 = cast(%var_127, dtype="int8") /* ty=int8 */;
    %10 = cast(%var_128, dtype="int8") /* ty=Tensor[(3, 16, 8), int8] */;
    %11 = cast(%var_128, dtype="float64") /* ty=Tensor[(3, 16, 8), float64] */;
    %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 12), int64] */, dtype="int64") /* ty=Tensor[(6, 12), int64] */;
    %13 = reshape(%12, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), int64] */;
    %14 = @func_33(%13) /* ty=(Tensor[(4, 2, 9), int64],) */;
    %15 = %14.0;
    %16 = cast(%15, dtype="int64") /* ty=Tensor[(4, 2, 9), int64] */;
    %17 = reshape(%16, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), int64] */;
    %18 = @func_33(%17) /* ty=(Tensor[(4, 2, 9), int64],) */;
    %19 = cast(%15, dtype="int64") /* ty=Tensor[(4, 2, 9), int64] */;
    %20 = reshape(%19, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), int64] */;
    %21 = @func_33(%20) /* ty=(Tensor[(4, 2, 9), int64],) */;
    %22 = right_shift(%9, %10) /* ty=Tensor[(3, 16, 8), int8] */;
    %23 = erf(%11) /* ty=Tensor[(3, 16, 8), float64] */;
    %24 = %18.0;
    %25 = %21.0;
    (%22, %23, %15, meta[relay.Constant][1] /* ty=Tensor[(6, 12), int64] */, %24, %25)
  };
  %26(%var_178, %var_179) /* ty=(Tensor[(3, 16, 8), int8], Tensor[(3, 16, 8), float64], Tensor[(4, 2, 9), int64], Tensor[(6, 12), int64], Tensor[(4, 2, 9), int64], Tensor[(4, 2, 9), int64]) */
}

def @main(%var_5924: Tensor[(14, 13, 5), float32]) -> Tensor[(14, 13, 5), float32] {
  %27 = cast(%var_5924, dtype="float32") /* ty=Tensor[(14, 13, 5), float32] */;
  rsqrt(%27) /* ty=Tensor[(14, 13, 5), float32] */
}

def @func_2055(%var_2039: Tensor[(7, 7, 2), int32], %var_2040: Tensor[(7, 7, 2), int32], %var_2051: int8) -> (Tensor[(7, 7, 2), int32], Tensor[(7, 7, 2), float64], Tensor[(3, 16, 8), float64], int8, Tensor[(384), int8]) {
  %28 = cast(%var_2040, dtype="int32") /* ty=Tensor[(7, 7, 2), int32] */;
  %29 = shape_of(%var_2039, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%var_2039, dtype="int32") /* ty=Tensor[(7, 7, 2), int32] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %32 = cast(%var_2040, dtype="float64") /* ty=Tensor[(7, 7, 2), float64] */;
  %33 = cast(%var_2051, dtype="int8") /* ty=int8 */;
  %34 = cast(meta[relay.Constant][2] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %35 = reshape(%33, newshape=[]) /* ty=int8 */;
  %36 = reshape(%34, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), int8] */;
  %37 = @func_177(%35, %36) /* ty=(Tensor[(3, 16, 8), int8], Tensor[(3, 16, 8), float64], Tensor[(4, 2, 9), int64], Tensor[(6, 12), int64], Tensor[(4, 2, 9), int64], Tensor[(4, 2, 9), int64]) */;
  %38 = maximum(%30, %31) /* ty=Tensor[(7, 7, 2), int32] */;
  %39 = sigmoid(%32) /* ty=Tensor[(7, 7, 2), float64] */;
  %40 = %37.1;
  (%38, %39, %40, %var_2051, meta[relay.Constant][2] /* ty=Tensor[(384), int8] */)
}

def @func_5463() -> (Tensor[(14, 14, 14), int64], Tensor[(5, 4, 2), float32], Tensor[(40), float32]) {
  @func_5461() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(5, 4, 2), float32], Tensor[(40), float32]) */
}

def @func_1265(%var_1258: Tensor[(6, 6, 16), float64], %var_1259: Tensor[(40), float64], %var_1260: Tensor[(6, 6, 16), float64], %var_1261: Tensor[(2496), float32], %var_1262: Tensor[(896), float64], %var_1263: int8, %var_1264: Tensor[(6, 6, 16), int8]) -> (Tensor[(?, 5, 8), int32], Tensor[(40), float64], Tensor[(6, 6, 16), bool], Tensor[(13, 16, 12), float32], Tensor[(2496), float32], Tensor[(3, 2, 16), float64], Tensor[(896), float64], int8, Tensor[(384), int8], Tensor[(6, 6, 16), uint64]) {
  @func_1256(%var_1258, %var_1259, %var_1260, %var_1261, %var_1262, %var_1263, %var_1264) /* ty=(Tensor[(?, 5, 8), int32], Tensor[(40), float64], Tensor[(6, 6, 16), bool], Tensor[(13, 16, 12), float32], Tensor[(2496), float32], Tensor[(3, 2, 16), float64], Tensor[(896), float64], int8, Tensor[(384), int8], Tensor[(6, 6, 16), uint64]) */
}

def @func_4095(%var_4015: Tensor[(10, 96), float32], %var_4016: Tensor[(896), float64], %var_4017: int8, %var_4045: Tensor[(560, 2), bool], %var_4047: Tensor[(975), float32], %var_4068: Tensor[(576), float32]) -> (Tensor[(384), int8], Tensor[(10, 96), float32], Tensor[(896), float64], int8, Tensor[(384), int8], Tensor[(13, 16, 12), float32], Tensor[(2496), float32], Tensor[(384), int8], Tensor[(560, 2), bool], Tensor[(4, 24), float64], Tensor[(975), float32], Tensor[(72), int64], Tensor[(576), float32], Tensor[(14, 14, 14), bool], Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), uint16]) {
  %41 = cast(%var_4015, dtype="float32") /* ty=Tensor[(10, 96), float32] */;
  %42 = cast(%var_4016, dtype="float64") /* ty=Tensor[(896), float64] */;
  %43 = cast(%var_4017, dtype="int8") /* ty=int8 */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %45 = reshape(%41, newshape=[6, 10, 16]) /* ty=Tensor[(6, 10, 16), float32] */;
  %46 = reshape(%42, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %47 = reshape(%43, newshape=[]) /* ty=int8 */;
  %48 = reshape(%44, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %49 = @func_683(%45, %46, %47, %48) /* ty=(Tensor[(6, 10, 16), bool], Tensor[(4, 2, 9), int64], Tensor[(896), float64], int8, Tensor[(384), int8]) */;
  %50 = cast(meta[relay.Constant][4] /* ty=Tensor[(2496), float32] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %51 = reshape(%50, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), float32] */;
  %52 = @func_1028(%51) /* ty=(Tensor[(13, 16, 12), float32],) */;
  %53 = cast(%var_4045, dtype="bool") /* ty=Tensor[(560, 2), bool] */;
  %54 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 24), float64] */, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
  %55 = cast(%var_4047, dtype="float32") /* ty=Tensor[(975), float32] */;
  %56 = reshape(%53, newshape=[8, 10, 14]) /* ty=Tensor[(8, 10, 14), bool] */;
  %57 = reshape(%54, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %58 = reshape(%55, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %59 = @func_3059(%56, %57, %58) /* ty=(Tensor[(8, 10, 14), bool], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(384), int8], Tensor[(105), float32], Tensor[(96, 4), int8], Tensor[(13, 15, 5), uint32], Tensor[(975), float32], Tensor[(960), float32], Tensor[(896), float64]) */;
  %60 = cast(%var_4068, dtype="float32") /* ty=Tensor[(576), float32] */;
  %61 = reshape(%60, newshape=[12, 6, 8]) /* ty=Tensor[(12, 6, 8), float32] */;
  %62 = @func_3836(%61) /* ty=(Tensor[(12, 6, 8), float32], Tensor[(4, 2, 9), int64], Tensor[(72), int64], Tensor[(14, 14, 14), int32]) */;
  %63 = @func_3469() /* ty=(Tensor[(14, 14, 14), int64],) */;
  %64 = %63.0;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(14, 14, 14), float64] */;
  %66 = atan(%65) /* ty=Tensor[(14, 14, 14), float64] */;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
  %68 = log10(%67) /* ty=Tensor[(14, 14, 14), float32] */;
  %69 = cast(%68, dtype="int64") /* ty=Tensor[(14, 14, 14), int64] */;
  %70 = cast(%64, dtype="int64") /* ty=Tensor[(14, 14, 14), int64] */;
  %71 = reshape(%69, newshape=[14, 14, 14]) /* ty=Tensor[(14, 14, 14), int64] */;
  %72 = reshape(%70, newshape=[14, 14, 14]) /* ty=Tensor[(14, 14, 14), int64] */;
  %73 = @func_3760(%71, %72) /* ty=(Tensor[(14, 14, 14), uint64], Tensor[(14, 14, 14), bool]) */;
  %74 = @func_3469() /* ty=(Tensor[(14, 14, 14), int64],) */;
  %75 = cast(%66, dtype="uint16") /* ty=Tensor[(14, 14, 14), uint16] */;
  %76 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%68, dtype="uint16") /* ty=Tensor[(14, 14, 14), uint16] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %79 = %49.4;
  %80 = %52.0;
  %81 = %59.3;
  %82 = %62.2;
  %83 = %73.1;
  %84 = %74.0;
  %85 = minimum(%77, %78) /* ty=Tensor[(14, 14, 14), uint16] */;
  (%79, %var_4015, %var_4016, %var_4017, meta[relay.Constant][3] /* ty=Tensor[(384), int8] */, %80, meta[relay.Constant][4] /* ty=Tensor[(2496), float32] */, %81, %var_4045, meta[relay.Constant][5] /* ty=Tensor[(4, 24), float64] */, %var_4047, %82, %var_4068, %83, %84, %85)
}

def @func_5546(%var_5545: Tensor[(96), float64]) -> (Tensor[(14, 14, 14), int64], Tensor[(896), float64], Tensor[(1872), bool], Tensor[(96), float64]) {
  %94 = fn (%var_5537: Tensor[(96), float64]) -> (Tensor[(14, 14, 14), int64], Tensor[(896), float64], Tensor[(1872), bool], Tensor[(96), float64]) {
    %86 = @func_3544() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64]) */;
    %87 = cast(meta[relay.Constant][6] /* ty=Tensor[(1872), bool] */, dtype="bool") /* ty=Tensor[(1872), bool] */;
    %88 = cast(%var_5537, dtype="float64") /* ty=Tensor[(96), float64] */;
    %89 = reshape(%87, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), bool] */;
    %90 = reshape(%88, newshape=[96]) /* ty=Tensor[(96), float64] */;
    %91 = @func_1924(%89, %90) /* ty=(Tensor[(576), float64], Tensor[(40), float64], Tensor[(2496), float32], Tensor[(896), float64], Tensor[(13, 16, 12), float64], Tensor[(48, 8), int8], Tensor[(11, 104), int64], Tensor[(96), float64], Tensor[(3, 2, 16), float64], Tensor[(16, 9, 13), bool]) */;
    %92 = %86.0;
    %93 = %91.3;
    (%92, %93, meta[relay.Constant][6] /* ty=Tensor[(1872), bool] */, %var_5537)
  };
  %94(%var_5545) /* ty=(Tensor[(14, 14, 14), int64], Tensor[(896), float64], Tensor[(1872), bool], Tensor[(96), float64]) */
}

def @func_4648() -> (Tensor[(14, 14, 14), int64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8]) {
  @func_4646() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8]) */
}

def @func_3443() -> (Tensor[(14, 14, 14), float32], Tensor[(14, 14, 14), int64]) {
  %95 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 14, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
  %96 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 14, 14), float32] */, dtype="int64") /* ty=Tensor[(14, 14, 14), int64] */;
  %97 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(14, 14, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 14, 14), float32] */, dtype="int64") /* ty=Tensor[(14, 14, 14), int64] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %100 = asinh(%95) /* ty=Tensor[(14, 14, 14), float32] */;
  %101 = right_shift(%98, %99) /* ty=Tensor[(14, 14, 14), int64] */;
  (%100, %101)
}

def @func_2391(%var_2389: Tensor[(15, 16, 4), bool], %var_2390: Tensor[(15, 16, 4), bool]) -> Tensor[(15, 16, 4), bool] {
  %111 = fn (%var_2364: Tensor[(15, 16, 4), bool], %var_2365: Tensor[(15, 16, 4), bool]) -> Tensor[(15, 16, 4), bool] {
    %102 = cast(%var_2365, dtype="bool") /* ty=Tensor[(15, 16, 4), bool] */;
    %103 = shape_of(%var_2364, dtype="int32") /* ty=Tensor[(3), int32] */;
    %104 = cast(%var_2364, dtype="bool") /* ty=Tensor[(15, 16, 4), bool] */;
    %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %106 = logical_or(%104, %105) /* ty=Tensor[(15, 16, 4), bool] */;
    %107 = cast(%106, dtype="bool") /* ty=Tensor[(15, 16, 4), bool] */;
    %108 = shape_of(%var_2365, dtype="int32") /* ty=Tensor[(3), int32] */;
    %109 = cast(%var_2365, dtype="bool") /* ty=Tensor[(15, 16, 4), bool] */;
    %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%109, %110) /* ty=Tensor[(15, 16, 4), bool] */
  };
  %111(%var_2389, %var_2390) /* ty=Tensor[(15, 16, 4), bool] */
}

def @func_4749() -> (int8,) {
  %112 = @func_4646() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8]) */;
  %113 = %112.2;
  (%113,)
}

def @func_5326(%var_5324: Tensor[(9, 14, 8), int64], %var_5325: Tensor[(9, 14, 8), int64]) -> (Tensor[(9, 14, 8), int64],) {
  %119 = fn (%var_5293: Tensor[(9, 14, 8), int64], %var_5294: Tensor[(9, 14, 8), int64]) -> (Tensor[(9, 14, 8), int64],) {
    %114 = cast(%var_5294, dtype="int64") /* ty=Tensor[(9, 14, 8), int64] */;
    %115 = shape_of(%var_5293, dtype="int32") /* ty=Tensor[(3), int32] */;
    %116 = cast(%var_5293, dtype="int64") /* ty=Tensor[(9, 14, 8), int64] */;
    %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %118 = logical_xor(%116, %117) /* ty=Tensor[(9, 14, 8), int64] */;
    (%118,)
  };
  %119(%var_5324, %var_5325) /* ty=(Tensor[(9, 14, 8), int64],) */
}

def @func_4646() -> (Tensor[(14, 14, 14), int64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8]) {
  %120 = cast(meta[relay.Constant][9] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %121 = cast(meta[relay.Constant][10] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %122 = reshape(%120, newshape=[]) /* ty=int8 */;
  %123 = reshape(%121, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), int8] */;
  %124 = @func_177(%122, %123) /* ty=(Tensor[(3, 16, 8), int8], Tensor[(3, 16, 8), float64], Tensor[(4, 2, 9), int64], Tensor[(6, 12), int64], Tensor[(4, 2, 9), int64], Tensor[(4, 2, 9), int64]) */;
  %125 = @func_3455() /* ty=Tensor[(14, 14, 14), int64] */;
  %126 = %124.5;
  (%125, %126, meta[relay.Constant][9] /* ty=int8 */, meta[relay.Constant][10] /* ty=Tensor[(384), int8] */)
}

def @func_3885() -> (Tensor[(14, 14, 14), bool], Tensor[(2, 13, 13), float32], Tensor[(338), float32]) {
  %127 = @func_3544() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64]) */;
  %128 = %127.0;
  %129 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 14, 14), int64] */, dtype="bool") /* ty=Tensor[(14, 14, 14), bool] */;
  %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%128, dtype="bool") /* ty=Tensor[(14, 14, 14), bool] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %133 = cast(meta[relay.Constant][12] /* ty=Tensor[(338), float32] */, dtype="float32") /* ty=Tensor[(338), float32] */;
  %134 = cast(meta[relay.Constant][12] /* ty=Tensor[(338), float32] */, dtype="float32") /* ty=Tensor[(338), float32] */;
  %135 = reshape(%133, newshape=[2, 13, 13]) /* ty=Tensor[(2, 13, 13), float32] */;
  %136 = reshape(%134, newshape=[2, 13, 13]) /* ty=Tensor[(2, 13, 13), float32] */;
  %137 = @func_3329(%135, %136) /* ty=(Tensor[(2, 13, 13), float32], Tensor[(2, 13, 13), uint64], Tensor[(2, 13, 13), uint8]) */;
  %138 = less_equal(%131, %132) /* ty=Tensor[(14, 14, 14), bool] */;
  %139 = %137.0;
  (%138, %139, meta[relay.Constant][12] /* ty=Tensor[(338), float32] */)
}

def @func_3763(%var_3761: Tensor[(14, 14, 14), int64], %var_3762: Tensor[(14, 14, 14), int64]) -> (Tensor[(14, 14, 14), uint64], Tensor[(14, 14, 14), bool]) {
  %152 = fn (%var_3747: Tensor[(14, 14, 14), int64], %var_3752: Tensor[(14, 14, 14), int64]) -> (Tensor[(14, 14, 14), uint64], Tensor[(14, 14, 14), bool]) {
    %140 = @func_3469() /* ty=(Tensor[(14, 14, 14), int64],) */;
    %141 = %140.0;
    %142 = cast(%var_3747, dtype="uint64") /* ty=Tensor[(14, 14, 14), uint64] */;
    %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
    %144 = cast(%141, dtype="uint64") /* ty=Tensor[(14, 14, 14), uint64] */;
    %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %146 = cast(%var_3752, dtype="bool") /* ty=Tensor[(14, 14, 14), bool] */;
    %147 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
    %148 = cast(%141, dtype="bool") /* ty=Tensor[(14, 14, 14), bool] */;
    %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %150 = maximum(%144, %145) /* ty=Tensor[(14, 14, 14), uint64] */;
    %151 = logical_and(%148, %149) /* ty=Tensor[(14, 14, 14), bool] */;
    (%150, %151)
  };
  %152(%var_3761, %var_3762) /* ty=(Tensor[(14, 14, 14), uint64], Tensor[(14, 14, 14), bool]) */
}

def @func_5376(%var_5337: Tensor[(14, 14, 14), int64], %var_5346: Tensor[(112), float64], %var_5347: Tensor[(960), float32], %var_5364: float64) -> (Tensor[(14, 14, 14), int8], Tensor[(6, 10, 16), bool], Tensor[(112), float64], Tensor[(216), float64], Tensor[(1120), float64], Tensor[(14, 14, 14), float64], Tensor[(960), bool]) {
  %153 = @func_4934() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), bool], int8) */;
  %154 = %153.0;
  %155 = cast(%var_5337, dtype="int8") /* ty=Tensor[(14, 14, 14), int8] */;
  %156 = shape_of(%154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%154, dtype="int8") /* ty=Tensor[(14, 14, 14), int8] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %159 = cast(%var_5346, dtype="float64") /* ty=Tensor[(112), float64] */;
  %160 = cast(%var_5346, dtype="float64") /* ty=Tensor[(112), float64] */;
  %161 = cast(%var_5347, dtype="float32") /* ty=Tensor[(960), float32] */;
  %162 = reshape(%159, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float64] */;
  %163 = reshape(%160, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float64] */;
  %164 = reshape(%161, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %165 = @func_4122(%162, %163, %164) /* ty=(Tensor[(2, 8, 7), float64], Tensor[(6, 10, 16), bool], Tensor[(960), float32], Tensor[(896), float64], int8, Tensor[(48, 8), int8]) */;
  %166 = cast(%var_5364, dtype="float64") /* ty=float64 */;
  %167 = cast(meta[relay.Constant][13] /* ty=Tensor[(1120), float64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %168 = reshape(%166, newshape=[]) /* ty=float64 */;
  %169 = reshape(%167, newshape=[10, 14, 8]) /* ty=Tensor[(10, 14, 8), float64] */;
  %170 = @func_4560(%168, %169) /* ty=(Tensor[(10, 14, 8), float64], Tensor[(3, 9, 8), int8], Tensor[(216), float64]) */;
  %171 = cast(%var_5337, dtype="float64") /* ty=Tensor[(14, 14, 14), float64] */;
  %172 = cast(%var_5347, dtype="bool") /* ty=Tensor[(960), bool] */;
  %173 = cast(%var_5364, dtype="bool") /* ty=bool */;
  %174 = bitwise_or(%157, %158) /* ty=Tensor[(14, 14, 14), int8] */;
  %175 = %165.1;
  %176 = %170.2;
  %177 = rsqrt(%171) /* ty=Tensor[(14, 14, 14), float64] */;
  %178 = logical_and(%172, %173) /* ty=Tensor[(960), bool] */;
  (%174, %175, %var_5346, %176, meta[relay.Constant][13] /* ty=Tensor[(1120), float64] */, %177, %178)
}

def @func_3913() -> (Tensor[(14, 14, 14), int32],) {
  @func_3911() /* ty=(Tensor[(14, 14, 14), int32],) */
}

def @func_35(%var_34: Tensor[(4, 2, 9), int64]) -> (Tensor[(4, 2, 9), int64],) {
  %184 = fn (%var_27: Tensor[(4, 2, 9), int64]) -> (Tensor[(4, 2, 9), int64],) {
    %179 = cast(%var_27, dtype="int64") /* ty=Tensor[(4, 2, 9), int64] */;
    %180 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(4, 2, 9), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %181 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 2, 9), int64] */, dtype="int64") /* ty=Tensor[(4, 2, 9), int64] */;
    %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %183 = add(%181, %182) /* ty=Tensor[(4, 2, 9), int64] */;
    (%183,)
  };
  %184(%var_34) /* ty=(Tensor[(4, 2, 9), int64],) */
}

def @func_4751() -> (int8,) {
  @func_4749() /* ty=(int8,) */
}

def @func_759(%var_757: Tensor[(15, 7, 1), float32], %var_758: Tensor[(384), int8]) -> (Tensor[(15, 7, ?), bool], Tensor[(6, 12), int64], int8, Tensor[(384), int8]) {
  %202 = fn (%var_710: Tensor[(15, 7, 1), float32], %var_746: Tensor[(384), int8]) -> (Tensor[(15, 7, ?), bool], Tensor[(6, 12), int64], int8, Tensor[(384), int8]) {
    %185 = cast(%var_710, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
    %186 = exp(%185) /* ty=Tensor[(15, 7, 1), float32] */;
    %187 = cast(%186, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
    %188 = atan(%187) /* ty=Tensor[(15, 7, 1), float32] */;
    %189 = cast(%var_710, dtype="float32") /* ty=Tensor[(15, 7, 1), float32] */;
    %190 = tan(%189) /* ty=Tensor[(15, 7, 1), float32] */;
    %191 = cast(%190, dtype="bool") /* ty=Tensor[(15, 7, 1), bool] */;
    %192 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
    %193 = cast(%188, dtype="bool") /* ty=Tensor[(15, 7, 1), bool] */;
    %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %195 = cast(meta[relay.Constant][15] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %196 = cast(%var_746, dtype="int8") /* ty=Tensor[(384), int8] */;
    %197 = reshape(%195, newshape=[]) /* ty=int8 */;
    %198 = reshape(%196, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), int8] */;
    %199 = @func_177(%197, %198) /* ty=(Tensor[(3, 16, 8), int8], Tensor[(3, 16, 8), float64], Tensor[(4, 2, 9), int64], Tensor[(6, 12), int64], Tensor[(4, 2, 9), int64], Tensor[(4, 2, 9), int64]) */;
    %200 = logical_or(%193, %194) /* ty=Tensor[(15, 7, ?), bool] */;
    %201 = %199.3;
    (%200, %201, meta[relay.Constant][15] /* ty=int8 */, %var_746)
  };
  %202(%var_757, %var_758) /* ty=(Tensor[(15, 7, ?), bool], Tensor[(6, 12), int64], int8, Tensor[(384), int8]) */
}

def @func_683(%var_645: Tensor[(6, 10, 16), float32], %var_670: Tensor[(896), float64], %var_671: int8, %var_672: Tensor[(384), int8]) -> (Tensor[(6, 10, 16), bool], Tensor[(4, 2, 9), int64], Tensor[(896), float64], int8, Tensor[(384), int8]) {
  %203 = cast(%var_645, dtype="float32") /* ty=Tensor[(6, 10, 16), float32] */;
  %204 = acos(%203) /* ty=Tensor[(6, 10, 16), float32] */;
  %205 = cast(%204, dtype="bool") /* ty=Tensor[(6, 10, 16), bool] */;
  %206 = shape_of(%var_645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%var_645, dtype="bool") /* ty=Tensor[(6, 10, 16), bool] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %209 = cast(%var_670, dtype="float64") /* ty=Tensor[(896), float64] */;
  %210 = cast(%var_671, dtype="int8") /* ty=int8 */;
  %211 = cast(%var_672, dtype="int8") /* ty=Tensor[(384), int8] */;
  %212 = reshape(%209, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), float64] */;
  %213 = reshape(%210, newshape=[]) /* ty=int8 */;
  %214 = reshape(%211, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %215 = @func_274(%212, %213, %214) /* ty=(Tensor[(14, 8, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8], Tensor[(3, 16, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 2, 9), int64]) */;
  %216 = less_equal(%207, %208) /* ty=Tensor[(6, 10, 16), bool] */;
  %217 = %215.3;
  (%216, %217, %var_670, %var_671, %var_672)
}

def @func_4222(%var_4208: Tensor[(3, 9, 8), float64]) -> (Tensor[(3, 9, 8), int8],) {
  %218 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 9, 8), float64] */, dtype="float64") /* ty=Tensor[(3, 9, 8), float64] */;
  %219 = shape_of(%var_4208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%var_4208, dtype="float64") /* ty=Tensor[(3, 9, 8), float64] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %222 = floor_divide(%220, %221) /* ty=Tensor[(3, 9, 8), float64] */;
  %223 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 9, 8), float64] */, dtype="int8") /* ty=Tensor[(3, 9, 8), int8] */;
  %224 = shape_of(%222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%222, dtype="int8") /* ty=Tensor[(3, 9, 8), int8] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %227 = add(%225, %226) /* ty=Tensor[(3, 9, 8), int8] */;
  (%227,)
}

def @func_5133(%var_5132: Tensor[(2, 16, 12), float64]) -> Tensor[(2, 16, 12), bool] {
  %232 = fn (%var_5120: Tensor[(2, 16, 12), float64]) -> Tensor[(2, 16, 12), bool] {
    %228 = cast(%var_5120, dtype="bool") /* ty=Tensor[(2, 16, 12), bool] */;
    %229 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(2, 16, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %230 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 16, 12), float64] */, dtype="bool") /* ty=Tensor[(2, 16, 12), bool] */;
    %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%230, %231) /* ty=Tensor[(2, 16, 12), bool] */
  };
  %232(%var_5132) /* ty=Tensor[(2, 16, 12), bool] */
}

def @func_5039(%var_4980: Tensor[(338), float32], %var_5026: Tensor[(338), bool]) -> (Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int32], Tensor[(12, 6, 8), float32], Tensor[(12, 48), float32], Tensor[(3, 9, 8), int8], float64, Tensor[(280, 4), float64], Tensor[(338), bool]) {
  %233 = @func_4205() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(15, 16, 4), bool], Tensor[(120, 8), bool], Tensor[(14, 14, 14), int64]) */;
  %234 = @func_3582() /* ty=(Tensor[(14, 14, 14), int32],) */;
  %235 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 48), float32] */, dtype="float32") /* ty=Tensor[(12, 48), float32] */;
  %236 = reshape(%235, newshape=[12, 6, 8]) /* ty=Tensor[(12, 6, 8), float32] */;
  %237 = @func_3836(%236) /* ty=(Tensor[(12, 6, 8), float32], Tensor[(4, 2, 9), int64], Tensor[(72), int64], Tensor[(14, 14, 14), int32]) */;
  %238 = cast(2.94844f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %239 = cast(meta[relay.Constant][19] /* ty=Tensor[(280, 4), float64] */, dtype="float64") /* ty=Tensor[(280, 4), float64] */;
  %240 = reshape(%238, newshape=[]) /* ty=float64 */;
  %241 = reshape(%239, newshape=[10, 14, 8]) /* ty=Tensor[(10, 14, 8), float64] */;
  %242 = @func_4560(%240, %241) /* ty=(Tensor[(10, 14, 8), float64], Tensor[(3, 9, 8), int8], Tensor[(216), float64]) */;
  %243 = @func_3885() /* ty=(Tensor[(14, 14, 14), bool], Tensor[(2, 13, 13), float32], Tensor[(338), float32]) */;
  %244 = %243.2;
  %245 = cast(%var_4980, dtype="bool") /* ty=Tensor[(338), bool] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(1), int32] */;
  %247 = cast(%244, dtype="bool") /* ty=Tensor[(338), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?), bool] */;
  %249 = greater_equal(%247, %248) /* ty=Tensor[(338), bool] */;
  %250 = cast(%249, dtype="float64") /* ty=Tensor[(338), float64] */;
  %251 = cos(%250) /* ty=Tensor[(338), float64] */;
  %252 = cast(%251, dtype="float32") /* ty=Tensor[(338), float32] */;
  %253 = sinh(%252) /* ty=Tensor[(338), float32] */;
  %254 = cast(%249, dtype="bool") /* ty=Tensor[(338), bool] */;
  %255 = shape_of(%253, dtype="int32") /* ty=Tensor[(1), int32] */;
  %256 = cast(%253, dtype="bool") /* ty=Tensor[(338), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?), bool] */;
  %258 = logical_and(%256, %257) /* ty=Tensor[(338), bool] */;
  %259 = cast(%var_5026, dtype="bool") /* ty=Tensor[(338), bool] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(1), int32] */;
  %261 = cast(%258, dtype="bool") /* ty=Tensor[(338), bool] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?), bool] */;
  %263 = %233.3;
  %264 = %234.0;
  %265 = %237.0;
  %266 = %242.1;
  %267 = not_equal(%261, %262) /* ty=Tensor[(338), bool] */;
  (%263, %264, %265, meta[relay.Constant][18] /* ty=Tensor[(12, 48), float32] */, %266, 2.94844f64 /* ty=float64 */, meta[relay.Constant][19] /* ty=Tensor[(280, 4), float64] */, %267)
}

def @func_5569() -> (Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int32], Tensor[(15, 16, 4), bool]) {
  %273 = fn () -> (Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int32], Tensor[(15, 16, 4), bool]) {
    %268 = @func_3911() /* ty=(Tensor[(14, 14, 14), int32],) */;
    %269 = @func_4205() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(15, 16, 4), bool], Tensor[(120, 8), bool], Tensor[(14, 14, 14), int64]) */;
    %270 = @func_3890() /* ty=Tensor[(14, 14, 14), int64] */;
    %271 = %268.0;
    %272 = %269.1;
    (%270, %271, %272)
  };
  %273() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int32], Tensor[(15, 16, 4), bool]) */
}

def @func_4560(%var_4521: float64, %var_4522: Tensor[(10, 14, 8), float64]) -> (Tensor[(10, 14, 8), float64], Tensor[(3, 9, 8), int8], Tensor[(216), float64]) {
  %274 = cast(%var_4521, dtype="float64") /* ty=float64 */;
  %275 = cast(%var_4522, dtype="float64") /* ty=Tensor[(10, 14, 8), float64] */;
  %276 = cast(meta[relay.Constant][20] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %277 = reshape(%276, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), float64] */;
  %278 = @func_4222(%277) /* ty=(Tensor[(3, 9, 8), int8],) */;
  %279 = mod(%274, %275) /* ty=Tensor[(10, 14, 8), float64] */;
  %280 = %278.0;
  (%279, %280, meta[relay.Constant][20] /* ty=Tensor[(216), float64] */)
}

def @func_5518(%var_5516: Tensor[(16, 11, 11), float32]) -> Tensor[(16, 11, 11), float32] {
  @func_5515(%var_5516) /* ty=Tensor[(16, 11, 11), float32] */
}

def @func_5706(%var_5705: int64) -> Tensor[(7, 10, 8), int64] {
  %283 = fn (%var_5695: int64) -> Tensor[(7, 10, 8), int64] {
    %281 = cast(%var_5695, dtype="int64") /* ty=int64 */;
    %282 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 10, 8), int64] */, dtype="int64") /* ty=Tensor[(7, 10, 8), int64] */;
    maximum(%281, %282) /* ty=Tensor[(7, 10, 8), int64] */
  };
  %283(%var_5705) /* ty=Tensor[(7, 10, 8), int64] */
}

def @func_689(%var_685: Tensor[(6, 10, 16), float32], %var_686: Tensor[(896), float64], %var_687: int8, %var_688: Tensor[(384), int8]) -> (Tensor[(6, 10, 16), bool], Tensor[(4, 2, 9), int64], Tensor[(896), float64], int8, Tensor[(384), int8]) {
  @func_683(%var_685, %var_686, %var_687, %var_688) /* ty=(Tensor[(6, 10, 16), bool], Tensor[(4, 2, 9), int64], Tensor[(896), float64], int8, Tensor[(384), int8]) */
}

def @func_5644(%var_5642: Tensor[(10, 3, 8), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int32], Tensor[(10, 3, 8), uint64], Tensor[(10, 3, 8), float64]) {
  @func_5641(%var_5642) /* ty=(Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int32], Tensor[(10, 3, 8), uint64], Tensor[(10, 3, 8), float64]) */
}

def @func_5858(%var_5821: Tensor[(16, 15, 5), float32], %var_5822: Tensor[(16, 15, 5), float32], %var_5844: Tensor[(40), float64]) -> (Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float64], Tensor[(40), float64], Tensor[(40), float64], int8) {
  %284 = cast(%var_5822, dtype="float32") /* ty=Tensor[(16, 15, 5), float32] */;
  %285 = shape_of(%var_5821, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%var_5821, dtype="float32") /* ty=Tensor[(16, 15, 5), float32] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %288 = cast(%var_5822, dtype="float64") /* ty=Tensor[(16, 15, 5), float64] */;
  %289 = cast(%var_5844, dtype="float64") /* ty=Tensor[(40), float64] */;
  %290 = cast(meta[relay.Constant][22] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %291 = reshape(%289, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %292 = reshape(%290, newshape=[]) /* ty=int8 */;
  %293 = @func_5171(%291, %292) /* ty=(Tensor[(15, 16, 4), bool], Tensor[(40), float64], Tensor[(40), float64], Tensor[(2496), float32], Tensor[(896), float64], Tensor[(36, 16), float64]) */;
  %294 = power(%286, %287) /* ty=Tensor[(16, 15, 5), float32] */;
  %295 = log2(%288) /* ty=Tensor[(16, 15, 5), float64] */;
  %296 = %293.2;
  (%294, %295, %296, %var_5844, meta[relay.Constant][22] /* ty=int8 */)
}

def @func_3545() -> (Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64]) {
  %301 = fn () -> (Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64]) {
    %297 = @func_3469() /* ty=(Tensor[(14, 14, 14), int64],) */;
    %298 = @func_3532() /* ty=(Tensor[(14, 14, 14), int64],) */;
    %299 = %297.0;
    %300 = %298.0;
    (%299, %300)
  };
  %301() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64]) */
}

def @func_3063(%var_3060: Tensor[(8, 10, 14), bool], %var_3061: Tensor[(96), float64], %var_3062: Tensor[(975), float32]) -> (Tensor[(8, 10, 14), bool], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(384), int8], Tensor[(105), float32], Tensor[(96, 4), int8], Tensor[(13, 15, 5), uint32], Tensor[(975), float32], Tensor[(960), float32], Tensor[(896), float64]) {
  %332 = fn (%var_3004: Tensor[(8, 10, 14), bool], %var_3012: Tensor[(96), float64], %var_3030: Tensor[(975), float32]) -> (Tensor[(8, 10, 14), bool], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(384), int8], Tensor[(105), float32], Tensor[(96, 4), int8], Tensor[(13, 15, 5), uint32], Tensor[(975), float32], Tensor[(960), float32], Tensor[(896), float64]) {
    %302 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 10, 14), bool] */, dtype="bool") /* ty=Tensor[(8, 10, 14), bool] */;
    %303 = shape_of(%var_3004, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(%var_3004, dtype="bool") /* ty=Tensor[(8, 10, 14), bool] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %306 = cast(%var_3012, dtype="float64") /* ty=Tensor[(96), float64] */;
    %307 = cast(%var_3012, dtype="float64") /* ty=Tensor[(96), float64] */;
    %308 = reshape(%306, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
    %309 = reshape(%307, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
    %310 = cast(meta[relay.Constant][24] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
    %311 = cast(meta[relay.Constant][25] /* ty=Tensor[(96, 4), int8] */, dtype="int8") /* ty=Tensor[(96, 4), int8] */;
    %312 = reshape(%310, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float32] */;
    %313 = reshape(%311, newshape=[384]) /* ty=Tensor[(384), int8] */;
    %314 = @func_756(%312, %313) /* ty=(Tensor[(15, 7, ?), bool], Tensor[(6, 12), int64], int8, Tensor[(384), int8]) */;
    %315 = cast(%var_3030, dtype="float32") /* ty=Tensor[(975), float32] */;
    %316 = cast(meta[relay.Constant][26] /* ty=Tensor[(960), float32] */, dtype="float32") /* ty=Tensor[(960), float32] */;
    %317 = cast(meta[relay.Constant][27] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %318 = reshape(%315, newshape=[13, 15, 5]) /* ty=Tensor[(13, 15, 5), float32] */;
    %319 = reshape(%316, newshape=[960]) /* ty=Tensor[(960), float32] */;
    %320 = reshape(%317, newshape=[896]) /* ty=Tensor[(896), float64] */;
    %321 = @func_1525(%318, %319, %320) /* ty=(Tensor[(13, 15, 5), uint32], Tensor[(13, 15, 5), float32], Tensor[(4, 2, 9), int64], Tensor[(960), float32], Tensor[(896), float64], Tensor[(384), int8]) */;
    %322 = cast(meta[relay.Constant][27] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %323 = asin(%322) /* ty=Tensor[(896), float64] */;
    %324 = cast(%323, dtype="float64") /* ty=Tensor[(896), float64] */;
    %325 = asinh(%324) /* ty=Tensor[(896), float64] */;
    %326 = cast(%325, dtype="float64") /* ty=Tensor[(896), float64] */;
    %327 = logical_and(%304, %305) /* ty=Tensor[(8, 10, 14), bool] */;
    %328 = @func_21(%308, %309) /* ty=Tensor[(3, 2, 16), float64] */;
    %329 = %314.3;
    %330 = %321.0;
    %331 = atan(%326) /* ty=Tensor[(896), float64] */;
    (%327, %328, %var_3012, %329, meta[relay.Constant][24] /* ty=Tensor[(105), float32] */, meta[relay.Constant][25] /* ty=Tensor[(96, 4), int8] */, %330, %var_3030, meta[relay.Constant][26] /* ty=Tensor[(960), float32] */, %331)
  };
  %332(%var_3060, %var_3061, %var_3062) /* ty=(Tensor[(8, 10, 14), bool], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(384), int8], Tensor[(105), float32], Tensor[(96, 4), int8], Tensor[(13, 15, 5), uint32], Tensor[(975), float32], Tensor[(960), float32], Tensor[(896), float64]) */
}

def @func_5917(%var_5914: Tensor[(351), int64], %var_5915: Tensor[(6, 64), int8], %var_5916: Tensor[(96), float64]) -> (Tensor[(14, 14, 14), int64], Tensor[(6, 64), int8], Tensor[(351), bool], Tensor[(96), float64], Tensor[(96), float64]) {
  @func_5912(%var_5914, %var_5915, %var_5916) /* ty=(Tensor[(14, 14, 14), int64], Tensor[(6, 64), int8], Tensor[(351), bool], Tensor[(96), float64], Tensor[(96), float64]) */
}

def @func_4126(%var_4123: Tensor[(2, 8, 7), float64], %var_4124: Tensor[(2, 8, 7), float64], %var_4125: Tensor[(960), float32]) -> (Tensor[(2, 8, 7), float64], Tensor[(6, 10, 16), bool], Tensor[(960), float32], Tensor[(896), float64], int8, Tensor[(48, 8), int8]) {
  %348 = fn (%var_4110: Tensor[(2, 8, 7), float64], %var_4111: Tensor[(2, 8, 7), float64], %var_4117: Tensor[(960), float32]) -> (Tensor[(2, 8, 7), float64], Tensor[(6, 10, 16), bool], Tensor[(960), float32], Tensor[(896), float64], int8, Tensor[(48, 8), int8]) {
    %333 = cast(%var_4111, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
    %334 = shape_of(%var_4110, dtype="int32") /* ty=Tensor[(3), int32] */;
    %335 = cast(%var_4110, dtype="float64") /* ty=Tensor[(2, 8, 7), float64] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %337 = cast(%var_4117, dtype="float32") /* ty=Tensor[(960), float32] */;
    %338 = cast(meta[relay.Constant][28] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %339 = cast(meta[relay.Constant][29] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %340 = cast(meta[relay.Constant][30] /* ty=Tensor[(48, 8), int8] */, dtype="int8") /* ty=Tensor[(48, 8), int8] */;
    %341 = reshape(%337, newshape=[6, 10, 16]) /* ty=Tensor[(6, 10, 16), float32] */;
    %342 = reshape(%338, newshape=[896]) /* ty=Tensor[(896), float64] */;
    %343 = reshape(%339, newshape=[]) /* ty=int8 */;
    %344 = reshape(%340, newshape=[384]) /* ty=Tensor[(384), int8] */;
    %345 = @func_683(%341, %342, %343, %344) /* ty=(Tensor[(6, 10, 16), bool], Tensor[(4, 2, 9), int64], Tensor[(896), float64], int8, Tensor[(384), int8]) */;
    %346 = power(%335, %336) /* ty=Tensor[(2, 8, 7), float64] */;
    %347 = %345.0;
    (%346, %347, %var_4117, meta[relay.Constant][28] /* ty=Tensor[(896), float64] */, meta[relay.Constant][29] /* ty=int8 */, meta[relay.Constant][30] /* ty=Tensor[(48, 8), int8] */)
  };
  %348(%var_4123, %var_4124, %var_4125) /* ty=(Tensor[(2, 8, 7), float64], Tensor[(6, 10, 16), bool], Tensor[(960), float32], Tensor[(896), float64], int8, Tensor[(48, 8), int8]) */
}

def @func_4225(%var_4223: Tensor[(3, 9, 8), float64]) -> (Tensor[(3, 9, 8), int8],) {
  @func_4222(%var_4223) /* ty=(Tensor[(3, 9, 8), int8],) */
}

def @func_2000(%var_1999: Tensor[(5, 4, 2), float32]) -> (Tensor[(5, 4, 2), float32],) {
  %351 = fn (%var_1995: Tensor[(5, 4, 2), float32]) -> (Tensor[(5, 4, 2), float32],) {
    %349 = cast(%var_1995, dtype="float32") /* ty=Tensor[(5, 4, 2), float32] */;
    %350 = erf(%349) /* ty=Tensor[(5, 4, 2), float32] */;
    (%350,)
  };
  %351(%var_1999) /* ty=(Tensor[(5, 4, 2), float32],) */
}

def @func_4476() -> (Tensor[(14, 14, 14), float64], Tensor[(14, 14, 14), float64]) {
  @func_4474() /* ty=(Tensor[(14, 14, 14), float64], Tensor[(14, 14, 14), float64]) */
}

def @func_1924(%var_1856: Tensor[(16, 9, 13), bool], %var_1900: Tensor[(96), float64]) -> (Tensor[(576), float64], Tensor[(40), float64], Tensor[(2496), float32], Tensor[(896), float64], Tensor[(13, 16, 12), float64], Tensor[(48, 8), int8], Tensor[(11, 104), int64], Tensor[(96), float64], Tensor[(3, 2, 16), float64], Tensor[(16, 9, 13), bool]) {
  %352 = cast(meta[relay.Constant][33] /* ty=Tensor[(2496), float32] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %353 = reshape(%352, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), float32] */;
  %354 = @func_1028(%353) /* ty=(Tensor[(13, 16, 12), float32],) */;
  %355 = %354.0;
  %356 = cast(meta[relay.Constant][31] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %357 = cast(meta[relay.Constant][32] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %358 = cast(meta[relay.Constant][31] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %359 = cast(meta[relay.Constant][33] /* ty=Tensor[(2496), float32] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %360 = cast(meta[relay.Constant][34] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
  %361 = cast(False /* ty=bool */, dtype="int8") /* ty=int8 */;
  %362 = cast(meta[relay.Constant][31] /* ty=Tensor[(576), float64] */, dtype="int8") /* ty=Tensor[(576), int8] */;
  %363 = reshape(%356, newshape=[6, 6, 16]) /* ty=Tensor[(6, 6, 16), float64] */;
  %364 = reshape(%357, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %365 = reshape(%358, newshape=[6, 6, 16]) /* ty=Tensor[(6, 6, 16), float64] */;
  %366 = reshape(%359, newshape=[2496]) /* ty=Tensor[(2496), float32] */;
  %367 = reshape(%360, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %368 = reshape(%361, newshape=[]) /* ty=int8 */;
  %369 = reshape(%362, newshape=[6, 6, 16]) /* ty=Tensor[(6, 6, 16), int8] */;
  %370 = @func_1256(%363, %364, %365, %366, %367, %368, %369) /* ty=(Tensor[(?, 5, 8), int32], Tensor[(40), float64], Tensor[(6, 6, 16), bool], Tensor[(13, 16, 12), float32], Tensor[(2496), float32], Tensor[(3, 2, 16), float64], Tensor[(896), float64], int8, Tensor[(384), int8], Tensor[(6, 6, 16), uint64]) */;
  %371 = %370.4;
  %372 = cast(%371, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %373 = shape_of(%355, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%355, dtype="float64") /* ty=Tensor[(13, 16, 12), float64] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %376 = cast(meta[relay.Constant][35] /* ty=Tensor[(11, 104), int64] */, dtype="int64") /* ty=Tensor[(11, 104), int64] */;
  %377 = cast(%var_1900, dtype="float64") /* ty=Tensor[(96), float64] */;
  %378 = reshape(%376, newshape=[13, 8, 11]) /* ty=Tensor[(13, 8, 11), int64] */;
  %379 = reshape(%377, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %380 = @func_927(%378, %379) /* ty=(Tensor[(13, 8, 11), uint16], Tensor[(6, 12), int64], Tensor[(21, 5), float32], Tensor[(48, 8), int8], Tensor[(3, 2, 16), float64], Tensor[(96), float64]) */;
  %381 = cast(%var_1900, dtype="float64") /* ty=Tensor[(96), float64] */;
  %382 = cast(%var_1900, dtype="float64") /* ty=Tensor[(96), float64] */;
  %383 = reshape(%381, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %384 = reshape(%382, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %385 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %386 = cast(%var_1856, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
  %387 = logical_or(%385, %386) /* ty=Tensor[(16, 9, 13), bool] */;
  %388 = cast(%var_1856, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %392 = mod(%374, %375) /* ty=Tensor[(13, 16, 12), float64] */;
  %393 = %380.3;
  %394 = @func_21(%383, %384) /* ty=Tensor[(3, 2, 16), float64] */;
  %395 = logical_and(%390, %391) /* ty=Tensor[(16, 9, 13), bool] */;
  (meta[relay.Constant][31] /* ty=Tensor[(576), float64] */, meta[relay.Constant][32] /* ty=Tensor[(40), float64] */, meta[relay.Constant][33] /* ty=Tensor[(2496), float32] */, meta[relay.Constant][34] /* ty=Tensor[(896), float64] */, %392, %393, meta[relay.Constant][35] /* ty=Tensor[(11, 104), int64] */, %var_1900, %394, %395)
}

def @func_5382(%var_5378: Tensor[(14, 14, 14), int64], %var_5379: Tensor[(112), float64], %var_5380: Tensor[(960), float32], %var_5381: float64) -> (Tensor[(14, 14, 14), int8], Tensor[(6, 10, 16), bool], Tensor[(112), float64], Tensor[(216), float64], Tensor[(1120), float64], Tensor[(14, 14, 14), float64], Tensor[(960), bool]) {
  @func_5376(%var_5378, %var_5379, %var_5380, %var_5381) /* ty=(Tensor[(14, 14, 14), int8], Tensor[(6, 10, 16), bool], Tensor[(112), float64], Tensor[(216), float64], Tensor[(1120), float64], Tensor[(14, 14, 14), float64], Tensor[(960), bool]) */
}

def @func_1030(%var_1029: Tensor[(13, 16, 12), float32]) -> (Tensor[(13, 16, 12), float32],) {
  %398 = fn (%var_1019: Tensor[(13, 16, 12), float32]) -> (Tensor[(13, 16, 12), float32],) {
    %396 = cast(%var_1019, dtype="float32") /* ty=Tensor[(13, 16, 12), float32] */;
    %397 = sin(%396) /* ty=Tensor[(13, 16, 12), float32] */;
    (%397,)
  };
  %398(%var_1029) /* ty=(Tensor[(13, 16, 12), float32],) */
}

def @func_4443() -> (Tensor[(14, 14, 14), uint32],) {
  %399 = @func_4205() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(15, 16, 4), bool], Tensor[(120, 8), bool], Tensor[(14, 14, 14), int64]) */;
  %400 = %399.3;
  %401 = cast(%400, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
  %402 = sin(%401) /* ty=Tensor[(14, 14, 14), float32] */;
  %403 = cast(%400, dtype="uint32") /* ty=Tensor[(14, 14, 14), uint32] */;
  %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%402, dtype="uint32") /* ty=Tensor[(14, 14, 14), uint32] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %407 = logical_xor(%405, %406) /* ty=Tensor[(14, 14, 14), uint32] */;
  (%407,)
}

def @func_4474() -> (Tensor[(14, 14, 14), float64], Tensor[(14, 14, 14), float64]) {
  %408 = @func_3455() /* ty=Tensor[(14, 14, 14), int64] */;
  %409 = cast(%408, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
  %410 = cosh(%409) /* ty=Tensor[(14, 14, 14), float32] */;
  %411 = cast(%410, dtype="float64") /* ty=Tensor[(14, 14, 14), float64] */;
  %412 = cast(%408, dtype="float64") /* ty=Tensor[(14, 14, 14), float64] */;
  %413 = atanh(%411) /* ty=Tensor[(14, 14, 14), float64] */;
  %414 = sqrt(%412) /* ty=Tensor[(14, 14, 14), float64] */;
  (%413, %414)
}

def @func_4564(%var_4562: float64, %var_4563: Tensor[(10, 14, 8), float64]) -> (Tensor[(10, 14, 8), float64], Tensor[(3, 9, 8), int8], Tensor[(216), float64]) {
  @func_4560(%var_4562, %var_4563) /* ty=(Tensor[(10, 14, 8), float64], Tensor[(3, 9, 8), int8], Tensor[(216), float64]) */
}

def @func_5461() -> (Tensor[(14, 14, 14), int64], Tensor[(5, 4, 2), float32], Tensor[(40), float32]) {
  %415 = cast(meta[relay.Constant][36] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %416 = reshape(%415, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), float32] */;
  %417 = @func_1998(%416) /* ty=(Tensor[(5, 4, 2), float32],) */;
  %418 = @func_3890() /* ty=Tensor[(14, 14, 14), int64] */;
  %419 = %417.0;
  (%418, %419, meta[relay.Constant][36] /* ty=Tensor[(40), float32] */)
}

def @func_4738(%var_4663: Tensor[(11, 9, 2), uint32], %var_4664: Tensor[(11, 9, 2), uint32], %var_4671: Tensor[(960), float32], %var_4698: Tensor[(96), float64]) -> (Tensor[(896), float64], Tensor[(112), float64], Tensor[(960), float32], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(11, 9, 2), int16], Tensor[(11, 9, 2), int16]) {
  %420 = cast(meta[relay.Constant][37] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %421 = cast(meta[relay.Constant][37] /* ty=Tensor[(112), float64] */, dtype="float64") /* ty=Tensor[(112), float64] */;
  %422 = cast(%var_4671, dtype="float32") /* ty=Tensor[(960), float32] */;
  %423 = reshape(%420, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float64] */;
  %424 = reshape(%421, newshape=[2, 8, 7]) /* ty=Tensor[(2, 8, 7), float64] */;
  %425 = reshape(%422, newshape=[960]) /* ty=Tensor[(960), float32] */;
  %426 = @func_4122(%423, %424, %425) /* ty=(Tensor[(2, 8, 7), float64], Tensor[(6, 10, 16), bool], Tensor[(960), float32], Tensor[(896), float64], int8, Tensor[(48, 8), int8]) */;
  %427 = cast(%var_4698, dtype="float64") /* ty=Tensor[(96), float64] */;
  %428 = cast(%var_4698, dtype="float64") /* ty=Tensor[(96), float64] */;
  %429 = reshape(%427, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %430 = reshape(%428, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
  %431 = cast(%var_4664, dtype="bool") /* ty=Tensor[(11, 9, 2), bool] */;
  %432 = shape_of(%var_4663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%var_4663, dtype="bool") /* ty=Tensor[(11, 9, 2), bool] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %435 = greater_equal(%433, %434) /* ty=Tensor[(11, 9, 2), bool] */;
  %436 = cast(%435, dtype="float32") /* ty=Tensor[(11, 9, 2), float32] */;
  %437 = atanh(%436) /* ty=Tensor[(11, 9, 2), float32] */;
  %438 = cast(%435, dtype="int16") /* ty=Tensor[(11, 9, 2), int16] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%437, dtype="int16") /* ty=Tensor[(11, 9, 2), int16] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %442 = cast(%var_4664, dtype="int16") /* ty=Tensor[(11, 9, 2), int16] */;
  %443 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%437, dtype="int16") /* ty=Tensor[(11, 9, 2), int16] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %446 = %426.3;
  %447 = @func_21(%429, %430) /* ty=Tensor[(3, 2, 16), float64] */;
  %448 = logical_xor(%440, %441) /* ty=Tensor[(11, 9, 2), int16] */;
  %449 = left_shift(%444, %445) /* ty=Tensor[(11, 9, 2), int16] */;
  (%446, meta[relay.Constant][37] /* ty=Tensor[(112), float64] */, %var_4671, %447, %var_4698, %448, %449)
}

def @func_5912(%var_5894: Tensor[(351), int64], %var_5895: Tensor[(6, 64), int8], %var_5907: Tensor[(96), float64]) -> (Tensor[(14, 14, 14), int64], Tensor[(6, 64), int8], Tensor[(351), bool], Tensor[(96), float64], Tensor[(96), float64]) {
  %450 = @func_4205() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(15, 16, 4), bool], Tensor[(120, 8), bool], Tensor[(14, 14, 14), int64]) */;
  %451 = cast(%var_5894, dtype="int64") /* ty=Tensor[(351), int64] */;
  %452 = cast(%var_5895, dtype="int8") /* ty=Tensor[(6, 64), int8] */;
  %453 = reshape(%451, newshape=[3, 9, 13]) /* ty=Tensor[(3, 9, 13), int64] */;
  %454 = reshape(%452, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %455 = @func_4284(%453, %454) /* ty=(Tensor[(3, 9, 13), int64], Tensor[(14, 8, 8), float64], Tensor[(896), float64], int8, Tensor[(384), int8]) */;
  %456 = %455.3;
  %457 = cast(%var_5894, dtype="bool") /* ty=Tensor[(351), bool] */;
  %458 = cast(%456, dtype="bool") /* ty=bool */;
  %459 = cast(%var_5907, dtype="float64") /* ty=Tensor[(96), float64] */;
  %460 = reshape(%459, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %461 = @func_5544(%460) /* ty=(Tensor[(14, 14, 14), int64], Tensor[(896), float64], Tensor[(1872), bool], Tensor[(96), float64]) */;
  %462 = %450.3;
  %463 = logical_or(%457, %458) /* ty=Tensor[(351), bool] */;
  %464 = %461.3;
  (%462, %var_5895, %463, %464, %var_5907)
}

def @func_3583() -> (Tensor[(14, 14, 14), int32],) {
  %472 = fn () -> (Tensor[(14, 14, 14), int32],) {
    %465 = @func_3443() /* ty=(Tensor[(14, 14, 14), float32], Tensor[(14, 14, 14), int64]) */;
    %466 = %465.1;
    %467 = cast(meta[relay.Constant][38] /* ty=Tensor[(14, 14, 14), int64] */, dtype="int32") /* ty=Tensor[(14, 14, 14), int32] */;
    %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
    %469 = cast(%466, dtype="int32") /* ty=Tensor[(14, 14, 14), int32] */;
    %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %471 = add(%469, %470) /* ty=Tensor[(14, 14, 14), int32] */;
    (%471,)
  };
  %472() /* ty=(Tensor[(14, 14, 14), int32],) */
}

def @func_5280() -> (Tensor[(14, 14, 14), uint32], Tensor[(2, 13, 13), float64]) {
  %473 = @func_4443() /* ty=(Tensor[(14, 14, 14), uint32],) */;
  %474 = @func_3885() /* ty=(Tensor[(14, 14, 14), bool], Tensor[(2, 13, 13), float32], Tensor[(338), float32]) */;
  %475 = %474.1;
  %476 = cast(%475, dtype="float64") /* ty=Tensor[(2, 13, 13), float64] */;
  %477 = %473.0;
  %478 = sqrt(%476) /* ty=Tensor[(2, 13, 13), float64] */;
  (%477, %478)
}

def @func_1530(%var_1527: Tensor[(13, 15, 5), float32], %var_1528: Tensor[(960), float32], %var_1529: Tensor[(896), float64]) -> (Tensor[(13, 15, 5), uint32], Tensor[(13, 15, 5), float32], Tensor[(4, 2, 9), int64], Tensor[(960), float32], Tensor[(896), float64], Tensor[(384), int8]) {
  @func_1525(%var_1527, %var_1528, %var_1529) /* ty=(Tensor[(13, 15, 5), uint32], Tensor[(13, 15, 5), float32], Tensor[(4, 2, 9), int64], Tensor[(960), float32], Tensor[(896), float64], Tensor[(384), int8]) */
}

def @func_3470() -> (Tensor[(14, 14, 14), int64],) {
  %480 = fn () -> (Tensor[(14, 14, 14), int64],) {
    %479 = @func_3455() /* ty=Tensor[(14, 14, 14), int64] */;
    (%479,)
  };
  %480() /* ty=(Tensor[(14, 14, 14), int64],) */
}

def @func_3457() -> Tensor[(14, 14, 14), int64] {
  @func_3455() /* ty=Tensor[(14, 14, 14), int64] */
}

def @func_1256(%var_1192: Tensor[(6, 6, 16), float64], %var_1205: Tensor[(40), float64], %var_1208: Tensor[(6, 6, 16), float64], %var_1226: Tensor[(2496), float32], %var_1230: Tensor[(896), float64], %var_1231: int8, %var_1250: Tensor[(6, 6, 16), int8]) -> (Tensor[(?, 5, 8), int32], Tensor[(40), float64], Tensor[(6, 6, 16), bool], Tensor[(13, 16, 12), float32], Tensor[(2496), float32], Tensor[(3, 2, 16), float64], Tensor[(896), float64], int8, Tensor[(384), int8], Tensor[(6, 6, 16), uint64]) {
  %481 = cast(%var_1205, dtype="float64") /* ty=Tensor[(40), float64] */;
  %482 = reshape(%481, newshape=[1, 5, 8]) /* ty=Tensor[(1, 5, 8), float64] */;
  %483 = cast(%var_1192, dtype="float64") /* ty=Tensor[(6, 6, 16), float64] */;
  %484 = log(%483) /* ty=Tensor[(6, 6, 16), float64] */;
  %485 = cast(%var_1208, dtype="int8") /* ty=Tensor[(6, 6, 16), int8] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="int8") /* ty=Tensor[(6, 6, 16), int8] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %489 = bitwise_or(%487, %488) /* ty=Tensor[(6, 6, 16), int8] */;
  %490 = cast(%489, dtype="bool") /* ty=Tensor[(6, 6, 16), bool] */;
  %491 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%484, dtype="bool") /* ty=Tensor[(6, 6, 16), bool] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %494 = cast(%var_1226, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %495 = reshape(%494, newshape=[13, 16, 12]) /* ty=Tensor[(13, 16, 12), float32] */;
  %496 = @func_1028(%495) /* ty=(Tensor[(13, 16, 12), float32],) */;
  %497 = cast(%var_1230, dtype="float64") /* ty=Tensor[(896), float64] */;
  %498 = cast(%var_1231, dtype="int8") /* ty=int8 */;
  %499 = cast(meta[relay.Constant][39] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %500 = reshape(%497, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), float64] */;
  %501 = reshape(%498, newshape=[]) /* ty=int8 */;
  %502 = reshape(%499, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %503 = @func_274(%500, %501, %502) /* ty=(Tensor[(14, 8, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8], Tensor[(3, 16, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 2, 9), int64]) */;
  %504 = cast(%var_1250, dtype="uint64") /* ty=Tensor[(6, 6, 16), uint64] */;
  %505 = shape_of(%489, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%489, dtype="uint64") /* ty=Tensor[(6, 6, 16), uint64] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %508 = @func_804(%482) /* ty=Tensor[(?, 5, 8), int32] */;
  %509 = equal(%492, %493) /* ty=Tensor[(6, 6, 16), bool] */;
  %510 = %496.0;
  %511 = %503.1;
  %512 = maximum(%506, %507) /* ty=Tensor[(6, 6, 16), uint64] */;
  (%508, %var_1205, %509, %510, %var_1226, %511, %var_1230, %var_1231, meta[relay.Constant][39] /* ty=Tensor[(384), int8] */, %512)
}

def @func_3329(%var_3286: Tensor[(2, 13, 13), float32], %var_3310: Tensor[(2, 13, 13), float32]) -> (Tensor[(2, 13, 13), float32], Tensor[(2, 13, 13), uint64], Tensor[(2, 13, 13), uint8]) {
  %513 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(2, 13, 13), float32] */;
  %514 = shape_of(%var_3286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%var_3286, dtype="float32") /* ty=Tensor[(2, 13, 13), float32] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %517 = cast(%var_3310, dtype="uint64") /* ty=Tensor[(2, 13, 13), uint64] */;
  %518 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(2, 13, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 13, 13), float32] */, dtype="uint64") /* ty=Tensor[(2, 13, 13), uint64] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %521 = cast(%var_3286, dtype="bool") /* ty=Tensor[(2, 13, 13), bool] */;
  %522 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(2, 13, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 13, 13), float32] */, dtype="bool") /* ty=Tensor[(2, 13, 13), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %525 = less(%523, %524) /* ty=Tensor[(2, 13, 13), bool] */;
  %526 = cast(%525, dtype="float64") /* ty=Tensor[(2, 13, 13), float64] */;
  %527 = cosh(%526) /* ty=Tensor[(2, 13, 13), float64] */;
  %528 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 13, 13), float64] */, dtype="uint8") /* ty=Tensor[(2, 13, 13), uint8] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%527, dtype="uint8") /* ty=Tensor[(2, 13, 13), uint8] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %532 = divide(%515, %516) /* ty=Tensor[(2, 13, 13), float32] */;
  %533 = minimum(%519, %520) /* ty=Tensor[(2, 13, 13), uint64] */;
  %534 = bitwise_xor(%530, %531) /* ty=Tensor[(2, 13, 13), uint8] */;
  (%532, %533, %534)
}

def @func_5641(%var_5597: Tensor[(10, 3, 8), float64]) -> (Tensor[(10, 3, 8), float32], Tensor[(10, 3, 8), int32], Tensor[(10, 3, 8), uint64], Tensor[(10, 3, 8), float64]) {
  %535 = cast(%var_5597, dtype="float32") /* ty=Tensor[(10, 3, 8), float32] */;
  %536 = cast(%var_5597, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
  %537 = log(%536) /* ty=Tensor[(10, 3, 8), float64] */;
  %538 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 3, 8), float64] */, dtype="uint8") /* ty=Tensor[(10, 3, 8), uint8] */;
  %539 = shape_of(%var_5597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%var_5597, dtype="uint8") /* ty=Tensor[(10, 3, 8), uint8] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %542 = multiply(%540, %541) /* ty=Tensor[(10, 3, 8), uint8] */;
  %543 = cast(%542, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
  %544 = shape_of(%var_5597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%var_5597, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %547 = not_equal(%545, %546) /* ty=Tensor[(10, 3, 8), bool] */;
  %548 = cast(%547, dtype="int32") /* ty=Tensor[(10, 3, 8), int32] */;
  %549 = shape_of(%537, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%537, dtype="int32") /* ty=Tensor[(10, 3, 8), int32] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %552 = cast(%537, dtype="uint64") /* ty=Tensor[(10, 3, 8), uint64] */;
  %553 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%547, dtype="uint64") /* ty=Tensor[(10, 3, 8), uint64] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %556 = cast(%var_5597, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
  %557 = exp(%535) /* ty=Tensor[(10, 3, 8), float32] */;
  %558 = right_shift(%550, %551) /* ty=Tensor[(10, 3, 8), int32] */;
  %559 = left_shift(%554, %555) /* ty=Tensor[(10, 3, 8), uint64] */;
  %560 = cos(%556) /* ty=Tensor[(10, 3, 8), float64] */;
  (%557, %558, %559, %560)
}

def @func_4935() -> (Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), bool], int8) {
  %572 = fn () -> (Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), bool], int8) {
    %561 = @func_3544() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64]) */;
    %562 = @func_3890() /* ty=Tensor[(14, 14, 14), int64] */;
    %563 = cast(%562, dtype="int64") /* ty=Tensor[(14, 14, 14), int64] */;
    %564 = %561.1;
    %565 = cast(%564, dtype="int64") /* ty=Tensor[(14, 14, 14), int64] */;
    %566 = reshape(%563, newshape=[14, 14, 14]) /* ty=Tensor[(14, 14, 14), int64] */;
    %567 = reshape(%565, newshape=[14, 14, 14]) /* ty=Tensor[(14, 14, 14), int64] */;
    %568 = @func_3760(%566, %567) /* ty=(Tensor[(14, 14, 14), uint64], Tensor[(14, 14, 14), bool]) */;
    %569 = @func_4646() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8]) */;
    %570 = %568.1;
    %571 = %569.2;
    (%562, %564, %570, %571)
  };
  %572() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), bool], int8) */
}

def @func_3534() -> (Tensor[(14, 14, 14), int64],) {
  @func_3532() /* ty=(Tensor[(14, 14, 14), int64],) */
}

def @func_930(%var_928: Tensor[(13, 8, 11), int64], %var_929: Tensor[(96), float64]) -> (Tensor[(13, 8, 11), uint16], Tensor[(6, 12), int64], Tensor[(21, 5), float32], Tensor[(48, 8), int8], Tensor[(3, 2, 16), float64], Tensor[(96), float64]) {
  %594 = fn (%var_905: Tensor[(13, 8, 11), int64], %var_923: Tensor[(96), float64]) -> (Tensor[(13, 8, 11), uint16], Tensor[(6, 12), int64], Tensor[(21, 5), float32], Tensor[(48, 8), int8], Tensor[(3, 2, 16), float64], Tensor[(96), float64]) {
    %573 = cast(meta[relay.Constant][43] /* ty=Tensor[(13, 8, 11), int64] */, dtype="bool") /* ty=Tensor[(13, 8, 11), bool] */;
    %574 = shape_of(%var_905, dtype="int32") /* ty=Tensor[(3), int32] */;
    %575 = cast(%var_905, dtype="bool") /* ty=Tensor[(13, 8, 11), bool] */;
    %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %577 = greater_equal(%575, %576) /* ty=Tensor[(13, 8, 11), bool] */;
    %578 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 8, 11), bool] */, dtype="uint16") /* ty=Tensor[(13, 8, 11), uint16] */;
    %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
    %580 = cast(%577, dtype="uint16") /* ty=Tensor[(13, 8, 11), uint16] */;
    %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %582 = cast(meta[relay.Constant][45] /* ty=Tensor[(21, 5), float32] */, dtype="float32") /* ty=Tensor[(21, 5), float32] */;
    %583 = cast(meta[relay.Constant][46] /* ty=Tensor[(48, 8), int8] */, dtype="int8") /* ty=Tensor[(48, 8), int8] */;
    %584 = reshape(%582, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float32] */;
    %585 = reshape(%583, newshape=[384]) /* ty=Tensor[(384), int8] */;
    %586 = @func_756(%584, %585) /* ty=(Tensor[(15, 7, ?), bool], Tensor[(6, 12), int64], int8, Tensor[(384), int8]) */;
    %587 = cast(%var_923, dtype="float64") /* ty=Tensor[(96), float64] */;
    %588 = cast(%var_923, dtype="float64") /* ty=Tensor[(96), float64] */;
    %589 = reshape(%587, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
    %590 = reshape(%588, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
    %591 = logical_xor(%580, %581) /* ty=Tensor[(13, 8, 11), uint16] */;
    %592 = %586.1;
    %593 = @func_21(%589, %590) /* ty=Tensor[(3, 2, 16), float64] */;
    (%591, %592, meta[relay.Constant][45] /* ty=Tensor[(21, 5), float32] */, meta[relay.Constant][46] /* ty=Tensor[(48, 8), int8] */, %593, %var_923)
  };
  %594(%var_928, %var_929) /* ty=(Tensor[(13, 8, 11), uint16], Tensor[(6, 12), int64], Tensor[(21, 5), float32], Tensor[(48, 8), int8], Tensor[(3, 2, 16), float64], Tensor[(96), float64]) */
}

def @func_1928(%var_1926: Tensor[(16, 9, 13), bool], %var_1927: Tensor[(96), float64]) -> (Tensor[(576), float64], Tensor[(40), float64], Tensor[(2496), float32], Tensor[(896), float64], Tensor[(13, 16, 12), float64], Tensor[(48, 8), int8], Tensor[(11, 104), int64], Tensor[(96), float64], Tensor[(3, 2, 16), float64], Tensor[(16, 9, 13), bool]) {
  @func_1924(%var_1926, %var_1927) /* ty=(Tensor[(576), float64], Tensor[(40), float64], Tensor[(2496), float32], Tensor[(896), float64], Tensor[(13, 16, 12), float64], Tensor[(48, 8), int8], Tensor[(11, 104), int64], Tensor[(96), float64], Tensor[(3, 2, 16), float64], Tensor[(16, 9, 13), bool]) */
}

def @func_5729(%var_5726: Tensor[(11, 15, 8), float64]) -> Tensor[(11, 15, 8), float64] {
  %595 = cast(%var_5726, dtype="float64") /* ty=Tensor[(11, 15, 8), float64] */;
  sqrt(%595) /* ty=Tensor[(11, 15, 8), float64] */
}

def @func_5043(%var_5041: Tensor[(338), float32], %var_5042: Tensor[(338), bool]) -> (Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int32], Tensor[(12, 6, 8), float32], Tensor[(12, 48), float32], Tensor[(3, 9, 8), int8], float64, Tensor[(280, 4), float64], Tensor[(338), bool]) {
  @func_5039(%var_5041, %var_5042) /* ty=(Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int32], Tensor[(12, 6, 8), float32], Tensor[(12, 48), float32], Tensor[(3, 9, 8), int8], float64, Tensor[(280, 4), float64], Tensor[(338), bool]) */
}

def @func_4866(%var_4864: Tensor[(14, 14, 14), uint32]) -> (Tensor[(14, 14, 14), uint8],) {
  @func_4863(%var_4864) /* ty=(Tensor[(14, 14, 14), uint8],) */
}

def @func_5762(%var_5761: Tensor[(240, 4), bool]) -> (Tensor[(14, 14, 14), float64], Tensor[(15, 16, 4), bool], Tensor[(240, 4), bool]) {
  %603 = fn (%var_5753: Tensor[(240, 4), bool]) -> (Tensor[(14, 14, 14), float64], Tensor[(15, 16, 4), bool], Tensor[(240, 4), bool]) {
    %596 = @func_4474() /* ty=(Tensor[(14, 14, 14), float64], Tensor[(14, 14, 14), float64]) */;
    %597 = cast(%var_5753, dtype="bool") /* ty=Tensor[(240, 4), bool] */;
    %598 = cast(%var_5753, dtype="bool") /* ty=Tensor[(240, 4), bool] */;
    %599 = reshape(%597, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), bool] */;
    %600 = reshape(%598, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), bool] */;
    %601 = %596.1;
    %602 = @func_2388(%599, %600) /* ty=Tensor[(15, 16, 4), bool] */;
    (%601, %602, %var_5753)
  };
  %603(%var_5761) /* ty=(Tensor[(14, 14, 14), float64], Tensor[(15, 16, 4), bool], Tensor[(240, 4), bool]) */
}

def @func_4387(%var_4372: Tensor[(96), float64]) -> (Tensor[(14, 14, 14), float64], Tensor[(105), float32], Tensor[(1120), bool], Tensor[(96), float64], Tensor[(975), float32], Tensor[(14, 14, 14), float64], Tensor[(16, 9, 13), bool], Tensor[(1, 1872), bool]) {
  %604 = @func_3532() /* ty=(Tensor[(14, 14, 14), int64],) */;
  %605 = %604.0;
  %606 = cast(%605, dtype="float64") /* ty=Tensor[(14, 14, 14), float64] */;
  %607 = cast(meta[relay.Constant][47] /* ty=Tensor[(1120), bool] */, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %608 = cast(%var_4372, dtype="float64") /* ty=Tensor[(96), float64] */;
  %609 = cast(meta[relay.Constant][48] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %610 = reshape(%607, newshape=[8, 10, 14]) /* ty=Tensor[(8, 10, 14), bool] */;
  %611 = reshape(%608, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %612 = reshape(%609, newshape=[975]) /* ty=Tensor[(975), float32] */;
  %613 = @func_3059(%610, %611, %612) /* ty=(Tensor[(8, 10, 14), bool], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(384), int8], Tensor[(105), float32], Tensor[(96, 4), int8], Tensor[(13, 15, 5), uint32], Tensor[(975), float32], Tensor[(960), float32], Tensor[(896), float64]) */;
  %614 = cast(%605, dtype="float64") /* ty=Tensor[(14, 14, 14), float64] */;
  %615 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 1872), bool] */, dtype="bool") /* ty=Tensor[(1, 1872), bool] */;
  %616 = cast(%var_4372, dtype="float64") /* ty=Tensor[(96), float64] */;
  %617 = reshape(%615, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), bool] */;
  %618 = reshape(%616, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %619 = @func_1924(%617, %618) /* ty=(Tensor[(576), float64], Tensor[(40), float64], Tensor[(2496), float32], Tensor[(896), float64], Tensor[(13, 16, 12), float64], Tensor[(48, 8), int8], Tensor[(11, 104), int64], Tensor[(96), float64], Tensor[(3, 2, 16), float64], Tensor[(16, 9, 13), bool]) */;
  %620 = exp(%606) /* ty=Tensor[(14, 14, 14), float64] */;
  %621 = %613.4;
  %622 = log2(%614) /* ty=Tensor[(14, 14, 14), float64] */;
  %623 = %619.9;
  (%620, %621, meta[relay.Constant][47] /* ty=Tensor[(1120), bool] */, %var_4372, meta[relay.Constant][48] /* ty=Tensor[(975), float32] */, %622, %623, meta[relay.Constant][49] /* ty=Tensor[(1, 1872), bool] */)
}

def @func_5411() -> (Tensor[(14, 14, 14), uint32], int8, Tensor[(3, 9, 8), int8], Tensor[(216), float64]) {
  %624 = @func_4443() /* ty=(Tensor[(14, 14, 14), uint32],) */;
  %625 = @func_4934() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), bool], int8) */;
  %626 = cast(meta[relay.Constant][50] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %627 = reshape(%626, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), float64] */;
  %628 = @func_4222(%627) /* ty=(Tensor[(3, 9, 8), int8],) */;
  %629 = %624.0;
  %630 = %625.3;
  %631 = %628.0;
  (%629, %630, %631, meta[relay.Constant][50] /* ty=Tensor[(216), float64] */)
}

def @func_5215(%var_5212: Tensor[(28, 32), float64], %var_5213: int8, %var_5214: Tensor[(384), int8]) -> (Tensor[(14, 14, 14), float64], int8, Tensor[(28, 32), float64], int8, Tensor[(384), int8]) {
  %642 = fn (%var_5205: Tensor[(28, 32), float64], %var_5206: int8, %var_5207: Tensor[(384), int8]) -> (Tensor[(14, 14, 14), float64], int8, Tensor[(28, 32), float64], int8, Tensor[(384), int8]) {
    %632 = @func_4474() /* ty=(Tensor[(14, 14, 14), float64], Tensor[(14, 14, 14), float64]) */;
    %633 = cast(%var_5205, dtype="float64") /* ty=Tensor[(28, 32), float64] */;
    %634 = cast(%var_5206, dtype="int8") /* ty=int8 */;
    %635 = cast(%var_5207, dtype="int8") /* ty=Tensor[(384), int8] */;
    %636 = reshape(%633, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), float64] */;
    %637 = reshape(%634, newshape=[]) /* ty=int8 */;
    %638 = reshape(%635, newshape=[384]) /* ty=Tensor[(384), int8] */;
    %639 = @func_274(%636, %637, %638) /* ty=(Tensor[(14, 8, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8], Tensor[(3, 16, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 2, 9), int64]) */;
    %640 = %632.1;
    %641 = %639.4;
    (%640, %641, %var_5205, %var_5206, %var_5207)
  };
  %642(%var_5212, %var_5213, %var_5214) /* ty=(Tensor[(14, 14, 14), float64], int8, Tensor[(28, 32), float64], int8, Tensor[(384), int8]) */
}

def @func_5693(%var_5691: Tensor[(14, 14, 14), int32], %var_5692: Tensor[(4, 24), float64]) -> (Tensor[(14, 14, 14), uint16], Tensor[(3, 9, 8), int8], Tensor[(216), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 24), float64]) {
  %659 = fn (%var_5656: Tensor[(14, 14, 14), int32], %var_5687: Tensor[(4, 24), float64]) -> (Tensor[(14, 14, 14), uint16], Tensor[(3, 9, 8), int8], Tensor[(216), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 24), float64]) {
    %643 = @func_4820() /* ty=(Tensor[(14, 14, 14), int32],) */;
    %644 = %643.0;
    %645 = cast(%var_5656, dtype="uint16") /* ty=Tensor[(14, 14, 14), uint16] */;
    %646 = shape_of(%644, dtype="int32") /* ty=Tensor[(3), int32] */;
    %647 = cast(%644, dtype="uint16") /* ty=Tensor[(14, 14, 14), uint16] */;
    %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %649 = cast(meta[relay.Constant][51] /* ty=Tensor[(216), float64] */, dtype="float64") /* ty=Tensor[(216), float64] */;
    %650 = reshape(%649, newshape=[3, 9, 8]) /* ty=Tensor[(3, 9, 8), float64] */;
    %651 = @func_4222(%650) /* ty=(Tensor[(3, 9, 8), int8],) */;
    %652 = cast(%var_5687, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
    %653 = cast(%var_5687, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
    %654 = reshape(%652, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
    %655 = reshape(%653, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
    %656 = bitwise_xor(%647, %648) /* ty=Tensor[(14, 14, 14), uint16] */;
    %657 = %651.0;
    %658 = @func_21(%654, %655) /* ty=Tensor[(3, 2, 16), float64] */;
    (%656, %657, meta[relay.Constant][51] /* ty=Tensor[(216), float64] */, %658, %var_5687)
  };
  %659(%var_5691, %var_5692) /* ty=(Tensor[(14, 14, 14), uint16], Tensor[(3, 9, 8), int8], Tensor[(216), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 24), float64]) */
}

def @func_4822() -> (Tensor[(14, 14, 14), int32],) {
  @func_4820() /* ty=(Tensor[(14, 14, 14), int32],) */
}

def @func_4103(%var_4097: Tensor[(10, 96), float32], %var_4098: Tensor[(896), float64], %var_4099: int8, %var_4100: Tensor[(560, 2), bool], %var_4101: Tensor[(975), float32], %var_4102: Tensor[(576), float32]) -> (Tensor[(384), int8], Tensor[(10, 96), float32], Tensor[(896), float64], int8, Tensor[(384), int8], Tensor[(13, 16, 12), float32], Tensor[(2496), float32], Tensor[(384), int8], Tensor[(560, 2), bool], Tensor[(4, 24), float64], Tensor[(975), float32], Tensor[(72), int64], Tensor[(576), float32], Tensor[(14, 14, 14), bool], Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), uint16]) {
  @func_4095(%var_4097, %var_4098, %var_4099, %var_4100, %var_4101, %var_4102) /* ty=(Tensor[(384), int8], Tensor[(10, 96), float32], Tensor[(896), float64], int8, Tensor[(384), int8], Tensor[(13, 16, 12), float32], Tensor[(2496), float32], Tensor[(384), int8], Tensor[(560, 2), bool], Tensor[(4, 24), float64], Tensor[(975), float32], Tensor[(72), int64], Tensor[(576), float32], Tensor[(14, 14, 14), bool], Tensor[(14, 14, 14), int64], Tensor[(14, 14, 14), uint16]) */
}

def @func_2060(%var_2057: Tensor[(7, 7, 2), int32], %var_2058: Tensor[(7, 7, 2), int32], %var_2059: int8) -> (Tensor[(7, 7, 2), int32], Tensor[(7, 7, 2), float64], Tensor[(3, 16, 8), float64], int8, Tensor[(384), int8]) {
  @func_2055(%var_2057, %var_2058, %var_2059) /* ty=(Tensor[(7, 7, 2), int32], Tensor[(7, 7, 2), float64], Tensor[(3, 16, 8), float64], int8, Tensor[(384), int8]) */
}

def @func_3891() -> Tensor[(14, 14, 14), int64] {
  %661 = fn () -> Tensor[(14, 14, 14), int64] {
    %660 = @func_3469() /* ty=(Tensor[(14, 14, 14), int64],) */;
    %660.0
  };
  %661() /* ty=Tensor[(14, 14, 14), int64] */
}

def @func_4205() -> (Tensor[(14, 14, 14), int64], Tensor[(15, 16, 4), bool], Tensor[(120, 8), bool], Tensor[(14, 14, 14), int64]) {
  %662 = @func_3532() /* ty=(Tensor[(14, 14, 14), int64],) */;
  %663 = cast(meta[relay.Constant][52] /* ty=Tensor[(120, 8), bool] */, dtype="bool") /* ty=Tensor[(120, 8), bool] */;
  %664 = cast(meta[relay.Constant][52] /* ty=Tensor[(120, 8), bool] */, dtype="bool") /* ty=Tensor[(120, 8), bool] */;
  %665 = reshape(%663, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), bool] */;
  %666 = reshape(%664, newshape=[15, 16, 4]) /* ty=Tensor[(15, 16, 4), bool] */;
  %667 = %662.0;
  %668 = @func_2388(%665, %666) /* ty=Tensor[(15, 16, 4), bool] */;
  %669 = @func_3890() /* ty=Tensor[(14, 14, 14), int64] */;
  (%667, %668, meta[relay.Constant][52] /* ty=Tensor[(120, 8), bool] */, %669)
}

def @func_5282() -> (Tensor[(14, 14, 14), uint32], Tensor[(2, 13, 13), float64]) {
  @func_5280() /* ty=(Tensor[(14, 14, 14), uint32], Tensor[(2, 13, 13), float64]) */
}

def @func_3455() -> Tensor[(14, 14, 14), int64] {
  %670 = @func_3443() /* ty=(Tensor[(14, 14, 14), float32], Tensor[(14, 14, 14), int64]) */;
  %670.1
}

def @func_3212(%var_3210: Tensor[(11, 8, 1), float32], %var_3211: Tensor[(384), int8]) -> (Tensor[(11, 8, 1), float32], Tensor[(105, 1), float32], Tensor[(15, 7, 384), bool]) {
  %682 = fn (%var_3193: Tensor[(11, 8, 1), float32], %var_3202: Tensor[(384), int8]) -> (Tensor[(11, 8, 1), float32], Tensor[(105, 1), float32], Tensor[(15, 7, 384), bool]) {
    %671 = cast(%var_3193, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
    %672 = cast(meta[relay.Constant][53] /* ty=Tensor[(105, 1), float32] */, dtype="float32") /* ty=Tensor[(105, 1), float32] */;
    %673 = cast(%var_3202, dtype="int8") /* ty=Tensor[(384), int8] */;
    %674 = reshape(%672, newshape=[15, 7, 1]) /* ty=Tensor[(15, 7, 1), float32] */;
    %675 = reshape(%673, newshape=[384]) /* ty=Tensor[(384), int8] */;
    %676 = @func_756(%674, %675) /* ty=(Tensor[(15, 7, ?), bool], Tensor[(6, 12), int64], int8, Tensor[(384), int8]) */;
    %677 = %676.0;
    %678 = cast(%677, dtype="bool") /* ty=Tensor[(15, 7, ?), bool] */;
    %679 = cast(%var_3202, dtype="bool") /* ty=Tensor[(384), bool] */;
    %680 = log10(%671) /* ty=Tensor[(11, 8, 1), float32] */;
    %681 = not_equal(%678, %679) /* ty=Tensor[(15, 7, 384), bool] */;
    (%680, meta[relay.Constant][53] /* ty=Tensor[(105, 1), float32] */, %681)
  };
  %682(%var_3210, %var_3211) /* ty=(Tensor[(11, 8, 1), float32], Tensor[(105, 1), float32], Tensor[(15, 7, 384), bool]) */
}

def @func_5863(%var_5860: Tensor[(16, 15, 5), float32], %var_5861: Tensor[(16, 15, 5), float32], %var_5862: Tensor[(40), float64]) -> (Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float64], Tensor[(40), float64], Tensor[(40), float64], int8) {
  @func_5858(%var_5860, %var_5861, %var_5862) /* ty=(Tensor[(16, 15, 5), float32], Tensor[(16, 15, 5), float64], Tensor[(40), float64], Tensor[(40), float64], int8) */
}

def @func_4445() -> (Tensor[(14, 14, 14), uint32],) {
  @func_4443() /* ty=(Tensor[(14, 14, 14), uint32],) */
}

def @func_4287(%var_4285: Tensor[(3, 9, 13), int64], %var_4286: Tensor[(384), int8]) -> (Tensor[(3, 9, 13), int64], Tensor[(14, 8, 8), float64], Tensor[(896), float64], int8, Tensor[(384), int8]) {
  %694 = fn (%var_4242: Tensor[(3, 9, 13), int64], %var_4270: Tensor[(384), int8]) -> (Tensor[(3, 9, 13), int64], Tensor[(14, 8, 8), float64], Tensor[(896), float64], int8, Tensor[(384), int8]) {
    %683 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 1, 13), int64] */, dtype="int64") /* ty=Tensor[(3, 1, 13), int64] */;
    %684 = cast(%var_4242, dtype="int64") /* ty=Tensor[(3, 9, 13), int64] */;
    %685 = cast(meta[relay.Constant][55] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %686 = cast(meta[relay.Constant][56] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %687 = cast(%var_4270, dtype="int8") /* ty=Tensor[(384), int8] */;
    %688 = reshape(%685, newshape=[14, 8, 8]) /* ty=Tensor[(14, 8, 8), float64] */;
    %689 = reshape(%686, newshape=[]) /* ty=int8 */;
    %690 = reshape(%687, newshape=[384]) /* ty=Tensor[(384), int8] */;
    %691 = @func_274(%688, %689, %690) /* ty=(Tensor[(14, 8, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8], Tensor[(3, 16, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 2, 9), int64]) */;
    %692 = right_shift(%683, %684) /* ty=Tensor[(3, 9, 13), int64] */;
    %693 = %691.0;
    (%692, %693, meta[relay.Constant][55] /* ty=Tensor[(896), float64] */, meta[relay.Constant][56] /* ty=int8 */, %var_4270)
  };
  %694(%var_4285, %var_4286) /* ty=(Tensor[(3, 9, 13), int64], Tensor[(14, 8, 8), float64], Tensor[(896), float64], int8, Tensor[(384), int8]) */
}

def @func_3333(%var_3331: Tensor[(2, 13, 13), float32], %var_3332: Tensor[(2, 13, 13), float32]) -> (Tensor[(2, 13, 13), float32], Tensor[(2, 13, 13), uint64], Tensor[(2, 13, 13), uint8]) {
  @func_3329(%var_3331, %var_3332) /* ty=(Tensor[(2, 13, 13), float32], Tensor[(2, 13, 13), uint64], Tensor[(2, 13, 13), uint8]) */
}

def @func_5174(%var_5172: Tensor[(40), float64], %var_5173: int8) -> (Tensor[(15, 16, 4), bool], Tensor[(40), float64], Tensor[(40), float64], Tensor[(2496), float32], Tensor[(896), float64], Tensor[(36, 16), float64]) {
  %716 = fn (%var_5157: Tensor[(40), float64], %var_5160: int8) -> (Tensor[(15, 16, 4), bool], Tensor[(40), float64], Tensor[(40), float64], Tensor[(2496), float32], Tensor[(896), float64], Tensor[(36, 16), float64]) {
    %695 = @func_4205() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(15, 16, 4), bool], Tensor[(120, 8), bool], Tensor[(14, 14, 14), int64]) */;
    %696 = cast(meta[relay.Constant][57] /* ty=Tensor[(36, 16), float64] */, dtype="float64") /* ty=Tensor[(36, 16), float64] */;
    %697 = cast(%var_5157, dtype="float64") /* ty=Tensor[(40), float64] */;
    %698 = cast(meta[relay.Constant][57] /* ty=Tensor[(36, 16), float64] */, dtype="float64") /* ty=Tensor[(36, 16), float64] */;
    %699 = cast(meta[relay.Constant][58] /* ty=Tensor[(2496), float32] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
    %700 = cast(meta[relay.Constant][59] /* ty=Tensor[(896), float64] */, dtype="float64") /* ty=Tensor[(896), float64] */;
    %701 = cast(%var_5160, dtype="int8") /* ty=int8 */;
    %702 = cast(meta[relay.Constant][57] /* ty=Tensor[(36, 16), float64] */, dtype="int8") /* ty=Tensor[(36, 16), int8] */;
    %703 = reshape(%696, newshape=[6, 6, 16]) /* ty=Tensor[(6, 6, 16), float64] */;
    %704 = reshape(%697, newshape=[40]) /* ty=Tensor[(40), float64] */;
    %705 = reshape(%698, newshape=[6, 6, 16]) /* ty=Tensor[(6, 6, 16), float64] */;
    %706 = reshape(%699, newshape=[2496]) /* ty=Tensor[(2496), float32] */;
    %707 = reshape(%700, newshape=[896]) /* ty=Tensor[(896), float64] */;
    %708 = reshape(%701, newshape=[]) /* ty=int8 */;
    %709 = reshape(%702, newshape=[6, 6, 16]) /* ty=Tensor[(6, 6, 16), int8] */;
    %710 = @func_1256(%703, %704, %705, %706, %707, %708, %709) /* ty=(Tensor[(?, 5, 8), int32], Tensor[(40), float64], Tensor[(6, 6, 16), bool], Tensor[(13, 16, 12), float32], Tensor[(2496), float32], Tensor[(3, 2, 16), float64], Tensor[(896), float64], int8, Tensor[(384), int8], Tensor[(6, 6, 16), uint64]) */;
    %711 = cast(meta[relay.Constant][57] /* ty=Tensor[(36, 16), float64] */, dtype="float64") /* ty=Tensor[(36, 16), float64] */;
    %712 = cast(%var_5160, dtype="float64") /* ty=float64 */;
    %713 = %695.1;
    %714 = %710.1;
    %715 = mod(%711, %712) /* ty=Tensor[(36, 16), float64] */;
    (%713, %714, %var_5157, meta[relay.Constant][58] /* ty=Tensor[(2496), float32] */, meta[relay.Constant][59] /* ty=Tensor[(896), float64] */, %715)
  };
  %716(%var_5172, %var_5173) /* ty=(Tensor[(15, 16, 4), bool], Tensor[(40), float64], Tensor[(40), float64], Tensor[(2496), float32], Tensor[(896), float64], Tensor[(36, 16), float64]) */
}

def @func_806(%var_805: Tensor[(1, 5, 8), float64]) -> Tensor[(?, 5, 8), int32] {
  %725 = fn (%var_790: Tensor[(1, 5, 8), float64]) -> Tensor[(?, 5, 8), int32] {
    %717 = cast(%var_790, dtype="float64") /* ty=Tensor[(1, 5, 8), float64] */;
    %718 = tan(%717) /* ty=Tensor[(1, 5, 8), float64] */;
    %719 = cast(%718, dtype="float64") /* ty=Tensor[(1, 5, 8), float64] */;
    %720 = asin(%719) /* ty=Tensor[(1, 5, 8), float64] */;
    %721 = cast(%718, dtype="int32") /* ty=Tensor[(1, 5, 8), int32] */;
    %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(3), int32] */;
    %723 = cast(%720, dtype="int32") /* ty=Tensor[(1, 5, 8), int32] */;
    %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    bitwise_or(%723, %724) /* ty=Tensor[(?, 5, 8), int32] */
  };
  %725(%var_805) /* ty=Tensor[(?, 5, 8), int32] */
}

def @func_4820() -> (Tensor[(14, 14, 14), int32],) {
  %726 = @func_3582() /* ty=(Tensor[(14, 14, 14), int32],) */;
  %727 = %726.0;
  (%727,)
}

def @func_24(%var_22: Tensor[(3, 2, 16), float64], %var_23: Tensor[(3, 2, 16), float64]) -> Tensor[(3, 2, 16), float64] {
  %732 = fn (%var_12: Tensor[(3, 2, 16), float64], %var_13: Tensor[(3, 2, 16), float64]) -> Tensor[(3, 2, 16), float64] {
    %728 = cast(%var_13, dtype="float64") /* ty=Tensor[(3, 2, 16), float64] */;
    %729 = shape_of(%var_12, dtype="int32") /* ty=Tensor[(3), int32] */;
    %730 = cast(%var_12, dtype="float64") /* ty=Tensor[(3, 2, 16), float64] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    minimum(%730, %731) /* ty=Tensor[(3, 2, 16), float64] */
  };
  %732(%var_22, %var_23) /* ty=Tensor[(3, 2, 16), float64] */
}

def @func_2554(%var_2552: Tensor[(3, 2, 12), int64], %var_2553: Tensor[(3, 2, 12), int64]) -> (Tensor[(3, 2, 12), int64],) {
  %738 = fn (%var_2535: Tensor[(3, 2, 12), int64], %var_2536: Tensor[(3, 2, 12), int64]) -> (Tensor[(3, 2, 12), int64],) {
    %733 = cast(%var_2536, dtype="int64") /* ty=Tensor[(3, 2, 12), int64] */;
    %734 = shape_of(%var_2535, dtype="int32") /* ty=Tensor[(3), int32] */;
    %735 = cast(%var_2535, dtype="int64") /* ty=Tensor[(3, 2, 12), int64] */;
    %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %737 = minimum(%735, %736) /* ty=Tensor[(3, 2, 12), int64] */;
    (%737,)
  };
  %738(%var_2552, %var_2553) /* ty=(Tensor[(3, 2, 12), int64],) */
}

def @func_4390(%var_4388: Tensor[(96), float64]) -> (Tensor[(14, 14, 14), float64], Tensor[(105), float32], Tensor[(1120), bool], Tensor[(96), float64], Tensor[(975), float32], Tensor[(14, 14, 14), float64], Tensor[(16, 9, 13), bool], Tensor[(1, 1872), bool]) {
  @func_4387(%var_4388) /* ty=(Tensor[(14, 14, 14), float64], Tensor[(105), float32], Tensor[(1120), bool], Tensor[(96), float64], Tensor[(975), float32], Tensor[(14, 14, 14), float64], Tensor[(16, 9, 13), bool], Tensor[(1, 1872), bool]) */
}

def @func_1525(%var_1496: Tensor[(13, 15, 5), float32], %var_1514: Tensor[(960), float32], %var_1515: Tensor[(896), float64]) -> (Tensor[(13, 15, 5), uint32], Tensor[(13, 15, 5), float32], Tensor[(4, 2, 9), int64], Tensor[(960), float32], Tensor[(896), float64], Tensor[(384), int8]) {
  %739 = cast(%var_1496, dtype="uint32") /* ty=Tensor[(13, 15, 5), uint32] */;
  %740 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(13, 15, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(meta[relay.Constant][60] /* ty=Tensor[(13, 15, 5), float32] */, dtype="uint32") /* ty=Tensor[(13, 15, 5), uint32] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %743 = cast(-4.31913f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %744 = cast(meta[relay.Constant][60] /* ty=Tensor[(13, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(13, 15, 5), float32] */;
  %745 = divide(%743, %744) /* ty=Tensor[(13, 15, 5), float32] */;
  %746 = cast(%745, dtype="float32") /* ty=Tensor[(13, 15, 5), float32] */;
  %747 = cast(%var_1514, dtype="float32") /* ty=Tensor[(960), float32] */;
  %748 = cast(%var_1515, dtype="float64") /* ty=Tensor[(896), float64] */;
  %749 = cast(-4.31913f /* ty=float32 */, dtype="int8") /* ty=int8 */;
  %750 = cast(meta[relay.Constant][61] /* ty=Tensor[(384), int8] */, dtype="int8") /* ty=Tensor[(384), int8] */;
  %751 = reshape(%747, newshape=[6, 10, 16]) /* ty=Tensor[(6, 10, 16), float32] */;
  %752 = reshape(%748, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %753 = reshape(%749, newshape=[]) /* ty=int8 */;
  %754 = reshape(%750, newshape=[384]) /* ty=Tensor[(384), int8] */;
  %755 = @func_683(%751, %752, %753, %754) /* ty=(Tensor[(6, 10, 16), bool], Tensor[(4, 2, 9), int64], Tensor[(896), float64], int8, Tensor[(384), int8]) */;
  %756 = left_shift(%741, %742) /* ty=Tensor[(13, 15, 5), uint32] */;
  %757 = rsqrt(%746) /* ty=Tensor[(13, 15, 5), float32] */;
  %758 = %755.1;
  (%756, %757, %758, %var_1514, %var_1515, meta[relay.Constant][61] /* ty=Tensor[(384), int8] */)
}

def @func_3911() -> (Tensor[(14, 14, 14), int32],) {
  %759 = @func_3582() /* ty=(Tensor[(14, 14, 14), int32],) */;
  %760 = %759.0;
  (%760,)
}

def @func_3445() -> (Tensor[(14, 14, 14), float32], Tensor[(14, 14, 14), int64]) {
  @func_3443() /* ty=(Tensor[(14, 14, 14), float32], Tensor[(14, 14, 14), int64]) */
}

def @func_5413() -> (Tensor[(14, 14, 14), uint32], int8, Tensor[(3, 9, 8), int8], Tensor[(216), float64]) {
  @func_5411() /* ty=(Tensor[(14, 14, 14), uint32], int8, Tensor[(3, 9, 8), int8], Tensor[(216), float64]) */
}

def @func_4186(%var_4185: Tensor[(14, 14, 14), int64]) -> Tensor[(14, 14, 14), float32] {
  %767 = fn (%var_4174: Tensor[(14, 14, 14), int64]) -> Tensor[(14, 14, 14), float32] {
    %761 = @func_3532() /* ty=(Tensor[(14, 14, 14), int64],) */;
    %762 = %761.0;
    %763 = cast(%var_4174, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
    %764 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
    %765 = cast(%762, dtype="float32") /* ty=Tensor[(14, 14, 14), float32] */;
    %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%765, %766) /* ty=Tensor[(14, 14, 14), float32] */
  };
  %767(%var_4185) /* ty=Tensor[(14, 14, 14), float32] */
}

def @func_4863(%var_4851: Tensor[(14, 14, 14), uint32]) -> (Tensor[(14, 14, 14), uint8],) {
  %768 = @func_4443() /* ty=(Tensor[(14, 14, 14), uint32],) */;
  %769 = %768.0;
  %770 = cast(%var_4851, dtype="uint8") /* ty=Tensor[(14, 14, 14), uint8] */;
  %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%769, dtype="uint8") /* ty=Tensor[(14, 14, 14), uint8] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %774 = subtract(%772, %773) /* ty=Tensor[(14, 14, 14), uint8] */;
  (%774,)
}

def @func_3532() -> (Tensor[(14, 14, 14), int64],) {
  %775 = @func_3455() /* ty=Tensor[(14, 14, 14), int64] */;
  (%775,)
}

def @func_5515(%var_5500: Tensor[(16, 11, 11), float32]) -> Tensor[(16, 11, 11), float32] {
  %776 = cast(%var_5500, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  %777 = shape_of(meta[relay.Constant][62] /* ty=Tensor[(16, 11, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(meta[relay.Constant][62] /* ty=Tensor[(16, 11, 11), float32] */, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %780 = multiply(%778, %779) /* ty=Tensor[(16, 11, 11), float32] */;
  %781 = cast(%780, dtype="float32") /* ty=Tensor[(16, 11, 11), float32] */;
  asin(%781) /* ty=Tensor[(16, 11, 11), float32] */
}

def @func_5732(%var_5730: Tensor[(11, 15, 8), float64]) -> Tensor[(11, 15, 8), float64] {
  @func_5729(%var_5730) /* ty=Tensor[(11, 15, 8), float64] */
}

def @func_4207() -> (Tensor[(14, 14, 14), int64], Tensor[(15, 16, 4), bool], Tensor[(120, 8), bool], Tensor[(14, 14, 14), int64]) {
  @func_4205() /* ty=(Tensor[(14, 14, 14), int64], Tensor[(15, 16, 4), bool], Tensor[(120, 8), bool], Tensor[(14, 14, 14), int64]) */
}

def @func_3887() -> (Tensor[(14, 14, 14), bool], Tensor[(2, 13, 13), float32], Tensor[(338), float32]) {
  @func_3885() /* ty=(Tensor[(14, 14, 14), bool], Tensor[(2, 13, 13), float32], Tensor[(338), float32]) */
}

def @func_4744(%var_4740: Tensor[(11, 9, 2), uint32], %var_4741: Tensor[(11, 9, 2), uint32], %var_4742: Tensor[(960), float32], %var_4743: Tensor[(96), float64]) -> (Tensor[(896), float64], Tensor[(112), float64], Tensor[(960), float32], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(11, 9, 2), int16], Tensor[(11, 9, 2), int16]) {
  @func_4738(%var_4740, %var_4741, %var_4742, %var_4743) /* ty=(Tensor[(896), float64], Tensor[(112), float64], Tensor[(960), float32], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(11, 9, 2), int16], Tensor[(11, 9, 2), int16]) */
}

def @func_278(%var_275: Tensor[(14, 8, 8), float64], %var_276: int8, %var_277: Tensor[(384), int8]) -> (Tensor[(14, 8, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8], Tensor[(3, 16, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 2, 9), int64]) {
  %810 = fn (%var_219: Tensor[(14, 8, 8), float64], %var_227: int8, %var_228: Tensor[(384), int8]) -> (Tensor[(14, 8, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8], Tensor[(3, 16, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 2, 9), int64]) {
    %782 = cast(%var_219, dtype="float64") /* ty=Tensor[(14, 8, 8), float64] */;
    %783 = cast(meta[relay.Constant][63] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
    %784 = cast(meta[relay.Constant][63] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
    %785 = reshape(%783, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
    %786 = reshape(%784, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
    %787 = cast(%var_227, dtype="int8") /* ty=int8 */;
    %788 = cast(%var_228, dtype="int8") /* ty=Tensor[(384), int8] */;
    %789 = reshape(%787, newshape=[]) /* ty=int8 */;
    %790 = reshape(%788, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), int8] */;
    %791 = @func_177(%789, %790) /* ty=(Tensor[(3, 16, 8), int8], Tensor[(3, 16, 8), float64], Tensor[(4, 2, 9), int64], Tensor[(6, 12), int64], Tensor[(4, 2, 9), int64], Tensor[(4, 2, 9), int64]) */;
    %792 = cast(%var_227, dtype="int8") /* ty=int8 */;
    %793 = cast(%var_228, dtype="int8") /* ty=Tensor[(384), int8] */;
    %794 = reshape(%792, newshape=[]) /* ty=int8 */;
    %795 = reshape(%793, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), int8] */;
    %796 = @func_177(%794, %795) /* ty=(Tensor[(3, 16, 8), int8], Tensor[(3, 16, 8), float64], Tensor[(4, 2, 9), int64], Tensor[(6, 12), int64], Tensor[(4, 2, 9), int64], Tensor[(4, 2, 9), int64]) */;
    %797 = @func_21(%785, %786) /* ty=Tensor[(3, 2, 16), float64] */;
    %798 = cast(%797, dtype="float64") /* ty=Tensor[(3, 2, 16), float64] */;
    %799 = cast(%797, dtype="float64") /* ty=Tensor[(3, 2, 16), float64] */;
    %800 = reshape(%798, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
    %801 = reshape(%799, newshape=[3, 2, 16]) /* ty=Tensor[(3, 2, 16), float64] */;
    %802 = %791.2;
    %803 = cast(%802, dtype="int64") /* ty=Tensor[(4, 2, 9), int64] */;
    %804 = reshape(%803, newshape=[4, 2, 9]) /* ty=Tensor[(4, 2, 9), int64] */;
    %805 = @func_33(%804) /* ty=(Tensor[(4, 2, 9), int64],) */;
    %806 = cos(%782) /* ty=Tensor[(14, 8, 8), float64] */;
    %807 = %796.1;
    %808 = @func_21(%800, %801) /* ty=Tensor[(3, 2, 16), float64] */;
    %809 = %805.0;
    (%806, %797, meta[relay.Constant][63] /* ty=Tensor[(96), float64] */, %802, %var_227, %var_228, %807, %808, %809)
  };
  %810(%var_275, %var_276, %var_277) /* ty=(Tensor[(14, 8, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(96), float64], Tensor[(4, 2, 9), int64], int8, Tensor[(384), int8], Tensor[(3, 16, 8), float64], Tensor[(3, 2, 16), float64], Tensor[(4, 2, 9), int64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen146/build/output.py:1532: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen146/build/output.py", line 1537, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(910) tvmgen_default_fused_rsqrt_kernel0(float* __restrict__ tensor, float* __restrict__ placeholder) {
  tensor[(((int)threadIdx.x))] = (1.000000e+00f / sqrtf(placeholder[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

