==========mod==========
#[version = "0.0.5"]
def @func_9338(%var_9335: Tensor[(5, 12, 8), float32]) -> Tensor[(5, 12, 8), float32] {
  %0 = cast(%var_9335, dtype="float32") /* ty=Tensor[(5, 12, 8), float32] */;
  atanh(%0) /* ty=Tensor[(5, 12, 8), float32] */
}

def @func_9367() -> (Tensor[(16, 6), float32], Tensor[(768), float32]) {
  %1 = @func_5342() /* ty=(Tensor[(768), float32],) */;
  %2 = @func_7391() /* ty=Tensor[(16, 6), float32] */;
  %3 = %1.0;
  (%2, %3)
}

def @func_9752(%var_9743: Tensor[(704), int32], %var_9745: Tensor[(324), float32]) -> (Tensor[(768, 1), float64], Tensor[(4, 16, 11), int32], Tensor[(704), int32], Tensor[(96), float32], Tensor[(324), float32]) {
  %4 = cast(%var_9743, dtype="int32") /* ty=Tensor[(704), int32] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %6 = cast(%var_9745, dtype="float32") /* ty=Tensor[(324), float32] */;
  %7 = reshape(%4, newshape=[4, 16, 11]) /* ty=Tensor[(4, 16, 11), int32] */;
  %8 = reshape(%5, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %9 = reshape(%6, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %10 = @func_7378(%7, %8, %9) /* ty=(Tensor[(4, 16, 11), int32], Tensor[(3, 16, 2), float32], Tensor[(96), float32], Tensor[(10, 2, 15), uint8], Tensor[(9, 2, 3), int16], Tensor[(1, 324), float32], Tensor[(324), float32]) */;
  %11 = @func_5567() /* ty=Tensor[(768, 1), float64] */;
  %12 = %10.0;
  (%11, %12, %var_9743, meta[relay.Constant][0] /* ty=Tensor[(96), float32] */, %var_9745)
}

def @func_7122() -> Tensor[(12, 5, 2), uint16] {
  @func_5782() /* ty=Tensor[(12, 5, 2), uint16] */
}

def @main() -> (Tensor[(768, ?), float32],) {
  %13 = @func_8485() /* ty=(Tensor[(12, 5, 2), bool], Tensor[(768, 1), float64]) */;
  %14 = %13.1;
  %15 = cast(%14, dtype="float64") /* ty=Tensor[(768, 1), float64] */;
  %16 = sin(%15) /* ty=Tensor[(768, 1), float64] */;
  %17 = cast(%16, dtype="uint16") /* ty=Tensor[(768, 1), uint16] */;
  %18 = shape_of(%14, dtype="int32") /* ty=Tensor[(2), int32] */;
  %19 = cast(%14, dtype="uint16") /* ty=Tensor[(768, 1), uint16] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %21 = left_shift(%19, %20) /* ty=Tensor[(768, ?), uint16] */;
  %22 = cast(%21, dtype="float32") /* ty=Tensor[(768, ?), float32] */;
  %23 = log(%22) /* ty=Tensor[(768, ?), float32] */;
  (%23,)
}

def @func_9521(%var_9511: float64) -> (Tensor[(10, 2, 15), float32], float64, Tensor[(832), float32], float64) {
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %25 = cast(%var_9511, dtype="float64") /* ty=float64 */;
  %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
  %27 = reshape(%24, newshape=[832]) /* ty=Tensor[(832), float32] */;
  %28 = reshape(%25, newshape=[]) /* ty=float64 */;
  %29 = reshape(%26, newshape=[13, 16, 4]) /* ty=Tensor[(13, 16, 4), float32] */;
  %30 = @func_9100(%27, %28, %29) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(832), float32], float64, float64, Tensor[(13, 16, 4), float64], Tensor[(13, 16, 4), float32], Tensor[(10, 2, 15), float32], Tensor[(8, 64), int8]) */;
  %31 = @func_5083() /* ty=Tensor[(10, 2, 15), float32] */;
  %32 = %30.3;
  (%31, %32, meta[relay.Constant][1] /* ty=Tensor[(832), float32] */, %var_9511)
}

def @func_7980(%var_7972: Tensor[(10, 2, 15), float32]) -> (Tensor[(10, 2, 15), bool],) {
  %33 = @func_7594() /* ty=Tensor[(10, 2, 15), float32] */;
  %34 = cast(%var_7972, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%33, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %38 = logical_and(%36, %37) /* ty=Tensor[(10, 2, 15), bool] */;
  (%38,)
}

def @func_6609(%var_6596: int64, %var_6597: Tensor[(2, 11, 10), int64]) -> (Tensor[(2, 11, 10), bool], Tensor[(2, 11, 10), float32]) {
  %39 = cast(%var_6596, dtype="bool") /* ty=bool */;
  %40 = cast(%var_6597, dtype="bool") /* ty=Tensor[(2, 11, 10), bool] */;
  %41 = cast(%var_6597, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
  %42 = less_equal(%39, %40) /* ty=Tensor[(2, 11, 10), bool] */;
  %43 = sin(%41) /* ty=Tensor[(2, 11, 10), float32] */;
  (%42, %43)
}

def @func_7999() -> (Tensor[(10, 2, 15), uint64],) {
  %44 = @func_5738() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(16, 6), float32], Tensor[(768, 4), float32]) */;
  %45 = %44.1;
  (%45,)
}

def @func_1978(%var_1970: Tensor[(4, 9, 9), float32], %var_1971: Tensor[(4, 9, 9), float32]) -> (Tensor[(4, 9, 9), float32],) {
  %46 = cast(%var_1971, dtype="float32") /* ty=Tensor[(4, 9, 9), float32] */;
  %47 = shape_of(%var_1970, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%var_1970, dtype="float32") /* ty=Tensor[(4, 9, 9), float32] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %50 = subtract(%48, %49) /* ty=Tensor[(4, 9, 9), float32] */;
  (%50,)
}

def @func_3860(%var_3847: Tensor[(9, 3, 3), float64], %var_3856: Tensor[(26, 4), bool]) -> (Tensor[(9, 3, 3), float64], Tensor[(1, 9), uint16], Tensor[(26, 4), bool]) {
  %51 = cast(%var_3847, dtype="float64") /* ty=Tensor[(9, 3, 3), float64] */;
  %52 = cast(%var_3856, dtype="bool") /* ty=Tensor[(26, 4), bool] */;
  %53 = reshape(%52, newshape=[8, 13, 1]) /* ty=Tensor[(8, 13, 1), bool] */;
  %54 = @func_3729(%53) /* ty=(Tensor[(8, 13, 13), bool], Tensor[(1, 9), uint16], uint16, Tensor[(8, 13, 13), float64]) */;
  %55 = sigmoid(%51) /* ty=Tensor[(9, 3, 3), float64] */;
  %56 = %54.1;
  (%55, %56, %var_3856)
}

def @func_9980() -> Tensor[(10, 2, 15), uint8] {
  @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_6305(%var_6255: Tensor[(13, 1, 4), float32]) -> (Tensor[(768, 1), float64], Tensor[(13, 2, 4), float64]) {
  %57 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
  %58 = cast(%var_6255, dtype="float32") /* ty=Tensor[(13, 1, 4), float32] */;
  %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 2, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %60 = mod(%58, %59) /* ty=Tensor[(13, 2, 4), float32] */;
  %61 = cast(%60, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
  %62 = tan(%61) /* ty=Tensor[(13, 2, 4), float32] */;
  %63 = cast(%62, dtype="float64") /* ty=Tensor[(13, 2, 4), float64] */;
  %64 = %57.0;
  %65 = atan(%63) /* ty=Tensor[(13, 2, 4), float64] */;
  (%64, %65)
}

def @func_5782() -> Tensor[(12, 5, 2), uint16] {
  %66 = @func_4121() /* ty=(Tensor[(12, 5, 2), uint16], Tensor[(12, 5, 2), bool]) */;
  %66.0
}

def @func_7286() -> Tensor[(324), float32] {
  @func_6661() /* ty=Tensor[(324), float32] */
}

def @func_8652() -> Tensor[(10, 2, 15), uint64] {
  %67 = @func_6234() /* ty=(Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint64]) */;
  %67.1
}

def @func_6675(%var_6671: Tensor[(9, 9, 7), float32]) -> Tensor[(9, 9, 7), float32] {
  %68 = cast(%var_6671, dtype="float32") /* ty=Tensor[(9, 9, 7), float32] */;
  atan(%68) /* ty=Tensor[(9, 9, 7), float32] */
}

def @func_4202(%var_4175: Tensor[(324), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(324), float32], Tensor[(8, 8, 8), int8], Tensor[(128, 4), int8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) {
  %69 = cast(%var_4175, dtype="float32") /* ty=Tensor[(324), float32] */;
  %70 = reshape(%69, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %71 = @func_2412(%70) /* ty=(Tensor[(14, 2, 3), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) */;
  %72 = cast(meta[relay.Constant][3] /* ty=Tensor[(128, 4), int8] */, dtype="int8") /* ty=Tensor[(128, 4), int8] */;
  %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(128, 4), int8] */, dtype="int8") /* ty=Tensor[(128, 4), int8] */;
  %74 = reshape(%72, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %75 = reshape(%73, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %76 = @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */;
  %77 = %71.4;
  %78 = @func_352(%74, %75) /* ty=Tensor[(8, 8, 8), int8] */;
  %79 = @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */;
  %80 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
  (%76, %77, %var_4175, %78, meta[relay.Constant][3] /* ty=Tensor[(128, 4), int8] */, %79, %80)
}

def @func_8600() -> (Tensor[(10, 2, 15), uint64], Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(10, 2, 15), uint8], Tensor[(2304), float64]) {
  %81 = @func_5849() /* ty=(Tensor[(10, 2, 15), uint64],) */;
  %82 = cast(meta[relay.Constant][4] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %83 = reshape(%82, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), float32] */;
  %84 = @func_1383(%83) /* ty=(Tensor[(16, 4, 12), float64], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(16, 4, 12), bool]) */;
  %85 = cast(meta[relay.Constant][5] /* ty=Tensor[(2304), float64] */, dtype="float64") /* ty=Tensor[(2304), float64] */;
  %86 = reshape(%85, newshape=[768, 3]) /* ty=Tensor[(768, 3), float64] */;
  %87 = @func_8118(%86) /* ty=(Tensor[(768), float32], Tensor[(768, 3), bool], Tensor[(10, 2, 15), uint8], Tensor[(162, 2), float32]) */;
  %88 = %81.0;
  %89 = %84.0;
  %90 = %87.2;
  (%88, %89, meta[relay.Constant][4] /* ty=Tensor[(768), float32] */, %90, meta[relay.Constant][5] /* ty=Tensor[(2304), float64] */)
}

def @func_7737(%var_7734: Tensor[(6, 9, 4), float32]) -> (Tensor[(6, 9, 4), float32],) {
  %91 = cast(%var_7734, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %92 = tan(%91) /* ty=Tensor[(6, 9, 4), float32] */;
  (%92,)
}

def @func_4757() -> (Tensor[(10, 2, 15), uint64], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float32], Tensor[(10, 2, 15), float64]) {
  %93 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
  %94 = cast(%93, dtype="uint8") /* ty=Tensor[(10, 2, 15), uint8] */;
  %95 = reshape(%94, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), uint8] */;
  %96 = cast(meta[relay.Constant][6] /* ty=Tensor[(768, 1), float32] */, dtype="float32") /* ty=Tensor[(768, 1), float32] */;
  %97 = reshape(%96, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %98 = @func_4304(%97) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(11, 5, 12), uint8], Tensor[(768), float32], Tensor[(10, 2, 15), uint8]) */;
  %99 = cast(%93, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %100 = log(%99) /* ty=Tensor[(10, 2, 15), float64] */;
  %101 = @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */;
  %102 = cast(%101, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %103 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%100, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %106 = @func_4069(%95) /* ty=Tensor[(10, 2, 15), uint64] */;
  %107 = %98.3;
  %108 = divide(%104, %105) /* ty=Tensor[(10, 2, 15), float64] */;
  (%106, %107, meta[relay.Constant][6] /* ty=Tensor[(768, 1), float32] */, %108)
}

def @func_8178() -> (Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), bool]) {
  %109 = @func_6876() /* ty=(Tensor[(10, 2, 15), float32],) */;
  %110 = %109.0;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(10, 2, 15), float32] */;
  %112 = reshape(%111, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float32] */;
  %113 = @func_7980(%112) /* ty=(Tensor[(10, 2, 15), bool],) */;
  %114 = %113.0;
  (%110, %114)
}

def @func_8839(%var_8833: Tensor[(270), float32], %var_8834: Tensor[(512), int8]) -> (Tensor[(768), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(512), int8]) {
  %115 = @func_8731() /* ty=(Tensor[(768), float32], Tensor[(768), float32], Tensor[(10, 2, 15), float32], Tensor[(168), float64], Tensor[(512), int8]) */;
  %116 = cast(%var_8833, dtype="float32") /* ty=Tensor[(270), float32] */;
  %117 = cast(%var_8834, dtype="int8") /* ty=Tensor[(512), int8] */;
  %118 = reshape(%116, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %119 = reshape(%117, newshape=[512]) /* ty=Tensor[(512), int8] */;
  %120 = @func_1923(%118, %119) /* ty=(Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(3, 16, 2), float32], Tensor[(16, 6), float32], Tensor[(9, 5, 6), float64]) */;
  %121 = %115.0;
  %122 = %120.4;
  (%121, %122, %var_8833, %var_8834)
}

def @func_9852() -> Tensor[(10, 2, 15), uint8] {
  %123 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %123.0
}

def @func_8260(%var_8250: float64) -> (Tensor[(10, 2, 15), uint8], float64, float64, Tensor[(768, 1), float64], Tensor[(10, 2, 15), bool]) {
  %124 = cast(%var_8250, dtype="float64") /* ty=float64 */;
  %125 = reshape(%124, newshape=[]) /* ty=float64 */;
  %126 = @func_4798(%125) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16], float64, Tensor[(132), float64]) */;
  %127 = @func_7485() /* ty=Tensor[(10, 2, 15), uint8] */;
  %128 = cast(%127, dtype="float32") /* ty=Tensor[(10, 2, 15), float32] */;
  %129 = reshape(%128, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float32] */;
  %130 = @func_7980(%129) /* ty=(Tensor[(10, 2, 15), bool],) */;
  %131 = %126.2;
  %132 = @func_5567() /* ty=Tensor[(768, 1), float64] */;
  %133 = %130.0;
  (%127, %131, %var_8250, %132, %133)
}

def @func_1383(%var_1332: Tensor[(16, 4, 12), float32]) -> (Tensor[(16, 4, 12), float64], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(16, 4, 12), bool]) {
  %134 = cast(%var_1332, dtype="float32") /* ty=Tensor[(16, 4, 12), float32] */;
  %135 = sin(%134) /* ty=Tensor[(16, 4, 12), float32] */;
  %136 = cast(%var_1332, dtype="float64") /* ty=Tensor[(16, 4, 12), float64] */;
  %137 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%135, dtype="float64") /* ty=Tensor[(16, 4, 12), float64] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %140 = cast(meta[relay.Constant][7] /* ty=Tensor[(512), int8] */, dtype="int8") /* ty=Tensor[(512), int8] */;
  %141 = cast(meta[relay.Constant][7] /* ty=Tensor[(512), int8] */, dtype="int8") /* ty=Tensor[(512), int8] */;
  %142 = reshape(%140, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %143 = reshape(%141, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %144 = cast(%135, dtype="float32") /* ty=Tensor[(16, 4, 12), float32] */;
  %145 = sinh(%144) /* ty=Tensor[(16, 4, 12), float32] */;
  %146 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 4, 12), float32] */, dtype="bool") /* ty=Tensor[(16, 4, 12), bool] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%145, dtype="bool") /* ty=Tensor[(16, 4, 12), bool] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %150 = add(%138, %139) /* ty=Tensor[(16, 4, 12), float64] */;
  %151 = @func_352(%142, %143) /* ty=Tensor[(8, 8, 8), int8] */;
  %152 = logical_and(%148, %149) /* ty=Tensor[(16, 4, 12), bool] */;
  (%150, %151, meta[relay.Constant][7] /* ty=Tensor[(512), int8] */, %152)
}

def @func_3742() -> (Tensor[(10, 2, 15), uint8],) {
  %153 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 2, 15), uint8] */, dtype="uint8") /* ty=Tensor[(10, 2, 15), uint8] */;
  %154 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(10, 2, 15), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 2, 15), uint8] */, dtype="uint8") /* ty=Tensor[(10, 2, 15), uint8] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %157 = right_shift(%155, %156) /* ty=Tensor[(10, 2, 15), uint8] */;
  (%157,)
}

def @func_4798(%var_4779: float64) -> (Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16], float64, Tensor[(132), float64]) {
  %158 = cast(%var_4779, dtype="float64") /* ty=float64 */;
  %159 = cast(meta[relay.Constant][11] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %160 = reshape(%158, newshape=[]) /* ty=float64 */;
  %161 = reshape(%159, newshape=[1, 11, 12]) /* ty=Tensor[(1, 11, 12), float64] */;
  %162 = @func_3913(%160, %161) /* ty=(Tensor[(1, 11, 12), float64], Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16]) */;
  %163 = @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */;
  %164 = %162.2;
  (%163, %164, %var_4779, meta[relay.Constant][11] /* ty=Tensor[(132), float64] */)
}

def @func_5567() -> Tensor[(768, 1), float64] {
  %165 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
  %165.0
}

def @func_4304(%var_4295: Tensor[(768), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(11, 5, 12), uint8], Tensor[(768), float32], Tensor[(10, 2, 15), uint8]) {
  %166 = cast(%var_4295, dtype="float32") /* ty=Tensor[(768), float32] */;
  %167 = reshape(%166, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %168 = @func_3083(%167) /* ty=(Tensor[(11, 5, 12), uint8], Tensor[(96), float32], Tensor[(324), float32], Tensor[(4, 9, 9), float32], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */;
  %169 = @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */;
  %170 = %168.0;
  %171 = @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */;
  (%169, %170, %var_4295, %171)
}

def @func_7472() -> Tensor[(324), float32] {
  @func_6661() /* ty=Tensor[(324), float32] */
}

def @func_8509() -> Tensor[(324), float32] {
  @func_7472() /* ty=Tensor[(324), float32] */
}

def @func_5276(%var_5202: Tensor[(512), int8]) -> (Tensor[(10, 2, 15), uint8], Tensor[(768, ?), bool], Tensor[(10, 2, 15), uint8], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(54, 6), float32], Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float32], Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) {
  %172 = @func_5060() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) */;
  %173 = cast(%var_5202, dtype="int8") /* ty=Tensor[(512), int8] */;
  %174 = cast(%var_5202, dtype="int8") /* ty=Tensor[(512), int8] */;
  %175 = reshape(%173, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %176 = reshape(%174, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %177 = @func_4869() /* ty=(Tensor[(768, 1), float64], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
  %178 = cast(meta[relay.Constant][12] /* ty=Tensor[(54, 6), float32] */, dtype="float32") /* ty=Tensor[(54, 6), float32] */;
  %179 = reshape(%178, newshape=[324, 1]) /* ty=Tensor[(324, 1), float32] */;
  %180 = @func_3998(%179) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), uint8], Tensor[(8, 8, 8), int8], Tensor[(132, 12), float32], Tensor[(768), float32], Tensor[(10, 2, 15), float64], Tensor[(4, 9, 9), float32], Tensor[(324, 1), float32]) */;
  %181 = cast(meta[relay.Constant][12] /* ty=Tensor[(54, 6), float32] */, dtype="float32") /* ty=Tensor[(54, 6), float32] */;
  %182 = cast(meta[relay.Constant][12] /* ty=Tensor[(54, 6), float32] */, dtype="float32") /* ty=Tensor[(54, 6), float32] */;
  %183 = reshape(%181, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %184 = reshape(%182, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %185 = @func_1978(%183, %184) /* ty=(Tensor[(4, 9, 9), float32],) */;
  %186 = %185.0;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(4, 9, 9), float32] */;
  %188 = @func_5019() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
  %189 = @func_4936() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %190 = @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */;
  %191 = @func_5160() /* ty=Tensor[(768, ?), bool] */;
  %192 = %172.1;
  %193 = @func_352(%175, %176) /* ty=Tensor[(8, 8, 8), int8] */;
  %194 = %177.2;
  %195 = %180.6;
  %196 = atanh(%187) /* ty=Tensor[(4, 9, 9), float32] */;
  %197 = @func_5083() /* ty=Tensor[(10, 2, 15), float32] */;
  %198 = @func_3933() /* ty=Tensor[(10, 2, 15), uint8] */;
  %199 = %188.1;
  %200 = %189.0;
  (%190, %191, %192, %193, %var_5202, meta[relay.Constant][12] /* ty=Tensor[(54, 6), float32] */, %194, %195, %196, %197, %198, %199, %200)
}

def @func_9384() -> (Tensor[(10, 2, 15), uint8],) {
  %201 = @func_6437() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %202 = %201.0;
  (%202,)
}

def @func_3933() -> Tensor[(10, 2, 15), uint8] {
  %203 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %203.0
}

def @func_3998(%var_3992: Tensor[(324, 1), float32]) -> (Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), uint8], Tensor[(8, 8, 8), int8], Tensor[(132, 12), float32], Tensor[(768), float32], Tensor[(10, 2, 15), float64], Tensor[(4, 9, 9), float32], Tensor[(324, 1), float32]) {
  %204 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %205 = %204.0;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(10, 2, 15), float32] */;
  %207 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %208 = cast(meta[relay.Constant][13] /* ty=Tensor[(132, 12), float32] */, dtype="float32") /* ty=Tensor[(132, 12), float32] */;
  %209 = cast(meta[relay.Constant][14] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %210 = reshape(%208, newshape=[9, 16, 11]) /* ty=Tensor[(9, 16, 11), float32] */;
  %211 = reshape(%209, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %212 = @func_1837(%210, %211) /* ty=(Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(9, 16, 11), float32], Tensor[(8, 8, 8), int8], Tensor[(64, 8), int8], Tensor[(8, 8, 8), int8], Tensor[(9, 16, 11), float32]) */;
  %213 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %214 = %213.0;
  %215 = cast(%214, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %216 = cast(%var_3992, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %217 = cast(%var_3992, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
  %218 = reshape(%216, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %219 = reshape(%217, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %220 = @func_1978(%218, %219) /* ty=(Tensor[(4, 9, 9), float32],) */;
  %221 = erf(%206) /* ty=Tensor[(10, 2, 15), float32] */;
  %222 = %207.0;
  %223 = %212.3;
  %224 = sinh(%215) /* ty=Tensor[(10, 2, 15), float64] */;
  %225 = %220.0;
  (%221, %222, %223, meta[relay.Constant][13] /* ty=Tensor[(132, 12), float32] */, meta[relay.Constant][14] /* ty=Tensor[(768), float32] */, %224, %225, %var_3992)
}

def @func_6175() -> (Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(16, 4, 12), float64]) {
  %226 = @func_5060() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) */;
  %227 = cast(meta[relay.Constant][15] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %228 = cast(meta[relay.Constant][15] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %229 = reshape(%227, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %230 = reshape(%228, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %231 = @func_1978(%229, %230) /* ty=(Tensor[(4, 9, 9), float32],) */;
  %232 = @func_4679() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */;
  %233 = %226.0;
  %234 = %231.0;
  %235 = %232.1;
  (%233, %234, meta[relay.Constant][15] /* ty=Tensor[(324), float32] */, %235)
}

def @func_7955() -> (Tensor[(10, 2, 15), uint8],) {
  %236 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
  (%236,)
}

def @func_7391() -> Tensor[(16, 6), float32] {
  %237 = @func_5738() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(16, 6), float32], Tensor[(768, 4), float32]) */;
  %237.2
}

def @func_4679() -> (Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) {
  %238 = cast(meta[relay.Constant][16] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %239 = reshape(%238, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %240 = @func_3083(%239) /* ty=(Tensor[(11, 5, 12), uint8], Tensor[(96), float32], Tensor[(324), float32], Tensor[(4, 9, 9), float32], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */;
  %241 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
  %242 = %240.4;
  (%241, %242, meta[relay.Constant][16] /* ty=Tensor[(768), float32] */)
}

def @func_4121() -> (Tensor[(12, 5, 2), uint16], Tensor[(12, 5, 2), bool]) {
  %243 = @func_4033() /* ty=(Tensor[(12, 5, 2), float64],) */;
  %244 = %243.0;
  %245 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 5, 2), float64] */, dtype="uint16") /* ty=Tensor[(12, 5, 2), uint16] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%244, dtype="uint16") /* ty=Tensor[(12, 5, 2), uint16] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %249 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 5, 2), float64] */, dtype="bool") /* ty=Tensor[(12, 5, 2), bool] */;
  %250 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%244, dtype="bool") /* ty=Tensor[(12, 5, 2), bool] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %253 = bitwise_or(%247, %248) /* ty=Tensor[(12, 5, 2), uint16] */;
  %254 = logical_and(%251, %252) /* ty=Tensor[(12, 5, 2), bool] */;
  (%253, %254)
}

def @func_7935() -> Tensor[(10, 2, 15), uint8] {
  @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_6543() -> (Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), uint16], Tensor[(768, 1), float64]) {
  %255 = @func_6437() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %256 = %255.0;
  %257 = @func_5782() /* ty=Tensor[(12, 5, 2), uint16] */;
  %258 = @func_5567() /* ty=Tensor[(768, 1), float64] */;
  (%256, %257, %258)
}

def @func_8787(%var_8754: Tensor[(10, 2, 15), float32], %var_8769: Tensor[(704), int32], %var_8770: Tensor[(96), float32]) -> (Tensor[(10, 2, 15), bool], Tensor[(12, 5, 2), uint16], Tensor[(3, 16, 2), float32], Tensor[(96), float32], Tensor[(1, 324), float32], Tensor[(704), float32]) {
  %259 = @func_8295() /* ty=(Tensor[(10, 2, 15), float32], Tensor[(324), float32]) */;
  %260 = %259.0;
  %261 = cast(%var_8754, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%260, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %265 = cast(%var_8769, dtype="int32") /* ty=Tensor[(704), int32] */;
  %266 = cast(%var_8770, dtype="float32") /* ty=Tensor[(96), float32] */;
  %267 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 324), float32] */, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
  %268 = reshape(%265, newshape=[4, 16, 11]) /* ty=Tensor[(4, 16, 11), int32] */;
  %269 = reshape(%266, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %270 = reshape(%267, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %271 = @func_7378(%268, %269, %270) /* ty=(Tensor[(4, 16, 11), int32], Tensor[(3, 16, 2), float32], Tensor[(96), float32], Tensor[(10, 2, 15), uint8], Tensor[(9, 2, 3), int16], Tensor[(1, 324), float32], Tensor[(324), float32]) */;
  %272 = cast(%var_8769, dtype="float32") /* ty=Tensor[(704), float32] */;
  %273 = not_equal(%263, %264) /* ty=Tensor[(10, 2, 15), bool] */;
  %274 = @func_5782() /* ty=Tensor[(12, 5, 2), uint16] */;
  %275 = %271.1;
  %276 = acosh(%272) /* ty=Tensor[(704), float32] */;
  (%273, %274, %275, %var_8770, meta[relay.Constant][18] /* ty=Tensor[(1, 324), float32] */, %276)
}

def @func_4160() -> Tensor[(10, 2, 15), uint8] {
  @func_3933() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_3808() -> Tensor[(10, 2, 15), uint8] {
  @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_8234() -> (Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), bool]) {
  %277 = @func_6175() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(16, 4, 12), float64]) */;
  %278 = @func_7870() /* ty=(Tensor[(1, 300), uint8], Tensor[(4, 9, 9), bool]) */;
  %279 = %277.0;
  %280 = %278.1;
  (%279, %280)
}

def @func_8731() -> (Tensor[(768), float32], Tensor[(768), float32], Tensor[(10, 2, 15), float32], Tensor[(168), float64], Tensor[(512), int8]) {
  %281 = @func_4679() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */;
  %282 = @func_8632() /* ty=(Tensor[(768), float32], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float32]) */;
  %283 = cast(meta[relay.Constant][19] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %284 = cast(meta[relay.Constant][20] /* ty=Tensor[(512), int8] */, dtype="int8") /* ty=Tensor[(512), int8] */;
  %285 = reshape(%283, newshape=[1, 168]) /* ty=Tensor[(1, 168), float64] */;
  %286 = reshape(%284, newshape=[512]) /* ty=Tensor[(512), int8] */;
  %287 = @func_5504(%285, %286) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), float64], Tensor[(16, 4, 12), float64], Tensor[(1, 168), float64], Tensor[(512), int8]) */;
  %288 = %281.2;
  %289 = %282.0;
  %290 = %287.0;
  (%288, %289, %290, meta[relay.Constant][19] /* ty=Tensor[(168), float64] */, meta[relay.Constant][20] /* ty=Tensor[(512), int8] */)
}

def @func_7585(%var_7579: Tensor[(13, 16, 4), float32]) -> Tensor[(13, 16, 4), float32] {
  %291 = cast(%var_7579, dtype="float32") /* ty=Tensor[(13, 16, 4), float32] */;
  cos(%291) /* ty=Tensor[(13, 16, 4), float32] */
}

def @func_4351(%var_4342: Tensor[(324), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(324), float32]) {
  %292 = cast(%var_4342, dtype="float32") /* ty=Tensor[(324), float32] */;
  %293 = reshape(%292, newshape=[1, 324]) /* ty=Tensor[(1, 324), float32] */;
  %294 = @func_4249(%293) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(1, 324), float32], Tensor[(10, 2, 15), uint8]) */;
  %295 = @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */;
  %296 = %294.0;
  (%295, %296, %var_4342)
}

def @func_5060() -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) {
  %297 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %298 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
  %299 = %297.0;
  %300 = @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */;
  %301 = %298.0;
  (%299, %300, %301)
}

def @func_4069(%var_4064: Tensor[(10, 2, 15), uint8]) -> Tensor[(10, 2, 15), uint64] {
  %302 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %303 = %302.0;
  %304 = cast(%var_4064, dtype="uint64") /* ty=Tensor[(10, 2, 15), uint64] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="uint64") /* ty=Tensor[(10, 2, 15), uint64] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%306, %307) /* ty=Tensor[(10, 2, 15), uint64] */
}

def @func_4544(%var_4529: Tensor[(10, 2, 15), uint8], %var_4541: Tensor[(324), float32]) -> (Tensor[(10, 2, 15), bool], Tensor[(10, 2, 15), uint64], Tensor[(4, 9, 9), float32], Tensor[(324), float32]) {
  %308 = @func_3933() /* ty=Tensor[(10, 2, 15), uint8] */;
  %309 = cast(%var_4529, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  %310 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%308, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %313 = cast(%308, dtype="uint64") /* ty=Tensor[(10, 2, 15), uint64] */;
  %314 = shape_of(%var_4529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%var_4529, dtype="uint64") /* ty=Tensor[(10, 2, 15), uint64] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %317 = cast(%var_4541, dtype="float32") /* ty=Tensor[(324), float32] */;
  %318 = cast(%var_4541, dtype="float32") /* ty=Tensor[(324), float32] */;
  %319 = reshape(%317, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %320 = reshape(%318, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %321 = @func_1978(%319, %320) /* ty=(Tensor[(4, 9, 9), float32],) */;
  %322 = less(%311, %312) /* ty=Tensor[(10, 2, 15), bool] */;
  %323 = bitwise_and(%315, %316) /* ty=Tensor[(10, 2, 15), uint64] */;
  %324 = %321.0;
  (%322, %323, %324, %var_4541)
}

def @func_8485() -> (Tensor[(12, 5, 2), bool], Tensor[(768, 1), float64]) {
  %325 = @func_5782() /* ty=Tensor[(12, 5, 2), uint16] */;
  %326 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 5, 2), uint16] */, dtype="bool") /* ty=Tensor[(12, 5, 2), bool] */;
  %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%325, dtype="bool") /* ty=Tensor[(12, 5, 2), bool] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %330 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
  %331 = less(%328, %329) /* ty=Tensor[(12, 5, 2), bool] */;
  %332 = %330.0;
  (%331, %332)
}

def @func_9945() -> (Tensor[(10, 2, 15), uint64], Tensor[(324), float32], Tensor[(324), float32]) {
  %333 = @func_7999() /* ty=(Tensor[(10, 2, 15), uint64],) */;
  %334 = %333.0;
  %335 = @func_7286() /* ty=Tensor[(324), float32] */;
  %336 = @func_8509() /* ty=Tensor[(324), float32] */;
  (%334, %335, %336)
}

def @func_6876() -> (Tensor[(10, 2, 15), float32],) {
  %337 = @func_5083() /* ty=Tensor[(10, 2, 15), float32] */;
  (%337,)
}

def @func_1837(%var_1765: Tensor[(9, 16, 11), float32], %var_1770: Tensor[(768), float32]) -> (Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(9, 16, 11), float32], Tensor[(8, 8, 8), int8], Tensor[(64, 8), int8], Tensor[(8, 8, 8), int8], Tensor[(9, 16, 11), float32]) {
  %338 = cast(%var_1770, dtype="float32") /* ty=Tensor[(768), float32] */;
  %339 = reshape(%338, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), float32] */;
  %340 = @func_1383(%339) /* ty=(Tensor[(16, 4, 12), float64], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(16, 4, 12), bool]) */;
  %341 = cast(%var_1765, dtype="float32") /* ty=Tensor[(9, 16, 11), float32] */;
  %342 = asinh(%341) /* ty=Tensor[(9, 16, 11), float32] */;
  %343 = cast(%342, dtype="float32") /* ty=Tensor[(9, 16, 11), float32] */;
  %344 = cast(meta[relay.Constant][22] /* ty=Tensor[(64, 8), int8] */, dtype="int8") /* ty=Tensor[(64, 8), int8] */;
  %345 = cast(meta[relay.Constant][22] /* ty=Tensor[(64, 8), int8] */, dtype="int8") /* ty=Tensor[(64, 8), int8] */;
  %346 = reshape(%344, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %347 = reshape(%345, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %348 = @func_352(%346, %347) /* ty=Tensor[(8, 8, 8), int8] */;
  %349 = cast(%348, dtype="int8") /* ty=Tensor[(8, 8, 8), int8] */;
  %350 = cast(%348, dtype="int8") /* ty=Tensor[(8, 8, 8), int8] */;
  %351 = reshape(%349, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %352 = reshape(%350, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %353 = cast(%var_1765, dtype="float32") /* ty=Tensor[(9, 16, 11), float32] */;
  %354 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%342, dtype="float32") /* ty=Tensor[(9, 16, 11), float32] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %357 = %340.0;
  %358 = atanh(%343) /* ty=Tensor[(9, 16, 11), float32] */;
  %359 = @func_352(%351, %352) /* ty=Tensor[(8, 8, 8), int8] */;
  %360 = floor_mod(%355, %356) /* ty=Tensor[(9, 16, 11), float32] */;
  (%357, %var_1770, %358, %348, meta[relay.Constant][22] /* ty=Tensor[(64, 8), int8] */, %359, %360)
}

def @func_9100(%var_9018: Tensor[(832), float32], %var_9030: float64, %var_9086: Tensor[(13, 16, 4), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(832), float32], float64, float64, Tensor[(13, 16, 4), float64], Tensor[(13, 16, 4), float32], Tensor[(10, 2, 15), float32], Tensor[(8, 64), int8]) {
  %361 = @func_4679() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */;
  %362 = cast(%var_9030, dtype="float64") /* ty=float64 */;
  %363 = reshape(%362, newshape=[]) /* ty=float64 */;
  %364 = @func_8260(%363) /* ty=(Tensor[(10, 2, 15), uint8], float64, float64, Tensor[(768, 1), float64], Tensor[(10, 2, 15), bool]) */;
  %365 = cast(%var_9018, dtype="float32") /* ty=Tensor[(832), float32] */;
  %366 = reshape(%365, newshape=[13, 16, 4]) /* ty=Tensor[(13, 16, 4), float32] */;
  %367 = @func_7585(%366) /* ty=Tensor[(13, 16, 4), float32] */;
  %368 = cast(%367, dtype="float32") /* ty=Tensor[(13, 16, 4), float32] */;
  %369 = log10(%368) /* ty=Tensor[(13, 16, 4), float32] */;
  %370 = cast(%369, dtype="float64") /* ty=Tensor[(13, 16, 4), float64] */;
  %371 = cast(%var_9086, dtype="float32") /* ty=Tensor[(13, 16, 4), float32] */;
  %372 = shape_of(%369, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%369, dtype="float32") /* ty=Tensor[(13, 16, 4), float32] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %375 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 64), int8] */, dtype="int8") /* ty=Tensor[(8, 64), int8] */;
  %376 = reshape(%375, newshape=[512]) /* ty=Tensor[(512), int8] */;
  %377 = @func_5276(%376) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(768, ?), bool], Tensor[(10, 2, 15), uint8], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(54, 6), float32], Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float32], Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
  %378 = %361.0;
  %379 = %364.1;
  %380 = erf(%370) /* ty=Tensor[(13, 16, 4), float64] */;
  %381 = power(%373, %374) /* ty=Tensor[(13, 16, 4), float32] */;
  %382 = %377.9;
  (%378, %var_9018, %379, %var_9030, %380, %381, %382, meta[relay.Constant][23] /* ty=Tensor[(8, 64), int8] */)
}

def @func_7704(%var_7642: Tensor[(768, 11), float32], %var_7650: Tensor[(120), uint16], %var_7682: Tensor[(768, 11), uint8]) -> (Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), int8], Tensor[(120), uint16], Tensor[(768, 11), float64]) {
  %383 = @func_5019() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
  %384 = cast(%var_7650, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %385 = reshape(%384, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), uint16] */;
  %386 = @func_7524(%385) /* ty=(Tensor[(12, 5, 2), int8],) */;
  %387 = @func_5160() /* ty=Tensor[(768, ?), bool] */;
  %388 = cast(%387, dtype="float32") /* ty=Tensor[(768, ?), float32] */;
  %389 = asin(%388) /* ty=Tensor[(768, ?), float32] */;
  %390 = cast(%389, dtype="float64") /* ty=Tensor[(768, ?), float64] */;
  %391 = cast(%var_7642, dtype="float64") /* ty=Tensor[(768, 11), float64] */;
  %392 = mod(%390, %391) /* ty=Tensor[(768, 11), float64] */;
  %393 = cast(%392, dtype="uint16") /* ty=Tensor[(768, 11), uint16] */;
  %394 = cast(%389, dtype="uint16") /* ty=Tensor[(768, ?), uint16] */;
  %395 = subtract(%393, %394) /* ty=Tensor[(768, 11), uint16] */;
  %396 = cast(meta[relay.Constant][24] /* ty=Tensor[(768, 11), uint16] */, dtype="uint8") /* ty=Tensor[(768, 11), uint8] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(2), int32] */;
  %398 = cast(%395, dtype="uint8") /* ty=Tensor[(768, 11), uint8] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %400 = bitwise_or(%398, %399) /* ty=Tensor[(768, 11), uint8] */;
  %401 = cast(%var_7682, dtype="bool") /* ty=Tensor[(768, 11), bool] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(2), int32] */;
  %403 = cast(%400, dtype="bool") /* ty=Tensor[(768, 11), bool] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %405 = greater(%403, %404) /* ty=Tensor[(768, 11), bool] */;
  %406 = cast(%405, dtype="float64") /* ty=Tensor[(768, 11), float64] */;
  %407 = %383.0;
  %408 = %386.0;
  %409 = rsqrt(%406) /* ty=Tensor[(768, 11), float64] */;
  (%407, %408, %var_7650, %409)
}

def @func_9612(%var_9602: Tensor[(768, 7), float64]) -> (Tensor[(4, 9, 9), float32], Tensor[(10, 2, 15), uint8], Tensor[(768, 7), int32]) {
  %410 = @func_6088() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32]) */;
  %411 = @func_4679() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */;
  %412 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
  %413 = %412.0;
  %414 = cast(%413, dtype="int32") /* ty=Tensor[(768, 1), int32] */;
  %415 = cast(%var_9602, dtype="int32") /* ty=Tensor[(768, 7), int32] */;
  %416 = %410.4;
  %417 = %411.0;
  %418 = maximum(%414, %415) /* ty=Tensor[(768, 7), int32] */;
  (%416, %417, %418)
}

def @func_7265() -> Tensor[(10, 2, 15), uint8] {
  %419 = @func_4936() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %419.0
}

def @func_4936() -> (Tensor[(10, 2, 15), uint8],) {
  %420 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %421 = %420.0;
  (%421,)
}

def @func_9836() -> Tensor[(10, 2, 15), uint8] {
  @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_352(%var_340: Tensor[(8, 8, 8), int8], %var_341: Tensor[(8, 8, 8), int8]) -> Tensor[(8, 8, 8), int8] {
  %422 = cast(%var_341, dtype="int8") /* ty=Tensor[(8, 8, 8), int8] */;
  %423 = shape_of(%var_340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%var_340, dtype="int8") /* ty=Tensor[(8, 8, 8), int8] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  subtract(%424, %425) /* ty=Tensor[(8, 8, 8), int8] */
}

def @func_6741() -> (Tensor[(768, 1), float64],) {
  %426 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
  %427 = %426.0;
  (%427,)
}

def @func_4987() -> (Tensor[(768, 1), float64],) {
  %428 = @func_4869() /* ty=(Tensor[(768, 1), float64], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
  %429 = %428.0;
  (%429,)
}

def @func_9479() -> (Tensor[(16, 6), float32],) {
  %430 = @func_9367() /* ty=(Tensor[(16, 6), float32], Tensor[(768), float32]) */;
  %431 = %430.0;
  (%431,)
}

def @func_5019() -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) {
  %432 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %433 = %432.0;
  %434 = @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */;
  (%433, %434)
}

def @func_6088() -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32]) {
  %435 = @func_5937() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), bool]) */;
  %436 = @func_5937() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), bool]) */;
  %437 = @func_5019() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
  %438 = @func_5676() /* ty=(Tensor[(10, 2, 15), float64],) */;
  %439 = cast(meta[relay.Constant][25] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %440 = reshape(%439, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %441 = @func_2412(%440) /* ty=(Tensor[(14, 2, 3), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) */;
  %442 = %435.0;
  %443 = %436.0;
  %444 = %437.1;
  %445 = %438.0;
  %446 = %441.1;
  (%442, %443, %444, %445, %446, meta[relay.Constant][25] /* ty=Tensor[(324), float32] */)
}

def @func_8524() -> (Tensor[(10, 2, 15), uint8],) {
  %447 = @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */;
  (%447,)
}

def @func_2471(%var_2464: uint16) -> (Tensor[(1, 9), uint16],) {
  %448 = cast(%var_2464, dtype="uint16") /* ty=uint16 */;
  %449 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 9), uint16] */, dtype="uint16") /* ty=Tensor[(1, 9), uint16] */;
  %450 = logical_xor(%448, %449) /* ty=Tensor[(1, 9), uint16] */;
  (%450,)
}

def @func_7751() -> (Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16], uint16) {
  %451 = cast(meta[relay.Constant][27] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %452 = reshape(%451, newshape=[]) /* ty=uint16 */;
  %453 = @func_2471(%452) /* ty=(Tensor[(1, 9), uint16],) */;
  %454 = @func_3933() /* ty=Tensor[(10, 2, 15), uint8] */;
  %455 = %453.0;
  (%454, %455, meta[relay.Constant][27] /* ty=uint16 */)
}

def @func_47(%var_12: Tensor[(3, 16, 2), float32]) -> (Tensor[(3, 16, 2), float32],) {
  %456 = cast(%var_12, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
  %457 = log10(%456) /* ty=Tensor[(3, 16, 2), float32] */;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
  %459 = log2(%458) /* ty=Tensor[(3, 16, 2), float32] */;
  (%459,)
}

def @func_6661() -> Tensor[(324), float32] {
  %460 = @func_6175() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(16, 4, 12), float64]) */;
  %460.2
}

def @func_6437() -> (Tensor[(10, 2, 15), uint8],) {
  %461 = @func_4936() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %462 = %461.0;
  (%462,)
}

def @func_5534(%var_5524: Tensor[(324), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(324), float32]) {
  %463 = @func_4936() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %464 = cast(%var_5524, dtype="float32") /* ty=Tensor[(324), float32] */;
  %465 = reshape(%464, newshape=[1, 324]) /* ty=Tensor[(1, 324), float32] */;
  %466 = @func_4249(%465) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(1, 324), float32], Tensor[(10, 2, 15), uint8]) */;
  %467 = %463.0;
  %468 = %466.0;
  (%467, %468, %var_5524)
}

def @func_7319(%var_7295: Tensor[(9, 13, 7), float32], %var_7296: Tensor[(9, 13, 7), float32], %var_7316: Tensor[(3, 56), float64]) -> (Tensor[(9, 13, 7), float32], Tensor[(9, 5, 6), float64], Tensor[(3, 56), float64], Tensor[(512), int8]) {
  %469 = cast(%var_7296, dtype="float32") /* ty=Tensor[(9, 13, 7), float32] */;
  %470 = shape_of(%var_7295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%var_7295, dtype="float32") /* ty=Tensor[(9, 13, 7), float32] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %473 = cast(%var_7316, dtype="float64") /* ty=Tensor[(3, 56), float64] */;
  %474 = cast(meta[relay.Constant][28] /* ty=Tensor[(512), int8] */, dtype="int8") /* ty=Tensor[(512), int8] */;
  %475 = reshape(%473, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %476 = reshape(%474, newshape=[256, 2]) /* ty=Tensor[(256, 2), int8] */;
  %477 = @func_3158(%475, %476) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(256, 2), int8]) */;
  %478 = maximum(%471, %472) /* ty=Tensor[(9, 13, 7), float32] */;
  %479 = %477.3;
  (%478, %479, %var_7316, meta[relay.Constant][28] /* ty=Tensor[(512), int8] */)
}

def @func_5676() -> (Tensor[(10, 2, 15), float64],) {
  %480 = @func_3933() /* ty=Tensor[(10, 2, 15), uint8] */;
  %481 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 2, 15), uint8] */, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%480, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %485 = power(%483, %484) /* ty=Tensor[(10, 2, 15), float64] */;
  (%485,)
}

def @func_5504(%var_5487: Tensor[(1, 168), float64], %var_5488: Tensor[(512), int8]) -> (Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), float64], Tensor[(16, 4, 12), float64], Tensor[(1, 168), float64], Tensor[(512), int8]) {
  %486 = @func_4757() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float32], Tensor[(10, 2, 15), float64]) */;
  %487 = %486.1;
  %488 = cast(%487, dtype="float32") /* ty=Tensor[(10, 2, 15), float32] */;
  %489 = @func_4757() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float32], Tensor[(10, 2, 15), float64]) */;
  %490 = %489.3;
  %491 = cast(%490, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %492 = cast(%var_5487, dtype="float64") /* ty=Tensor[(1, 168), float64] */;
  %493 = cast(%var_5488, dtype="int8") /* ty=Tensor[(512), int8] */;
  %494 = reshape(%492, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %495 = reshape(%493, newshape=[256, 2]) /* ty=Tensor[(256, 2), int8] */;
  %496 = @func_3158(%494, %495) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(256, 2), int8]) */;
  %497 = sigmoid(%488) /* ty=Tensor[(10, 2, 15), float32] */;
  %498 = atan(%491) /* ty=Tensor[(10, 2, 15), float64] */;
  %499 = %496.1;
  (%497, %498, %499, %var_5487, %var_5488)
}

def @func_6848() -> (Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768, 1), float64]) {
  %500 = @func_5060() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) */;
  %501 = @func_6175() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(16, 4, 12), float64]) */;
  %502 = @func_6741() /* ty=(Tensor[(768, 1), float64],) */;
  %503 = %502.0;
  %504 = cast(%503, dtype="float64") /* ty=Tensor[(768, 1), float64] */;
  %505 = %500.0;
  %506 = %501.3;
  %507 = log10(%504) /* ty=Tensor[(768, 1), float64] */;
  (%505, %506, %507)
}

def @func_6234() -> (Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint64]) {
  %508 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
  %509 = rsqrt(%508) /* ty=Tensor[(9, 2, 3), float64] */;
  %510 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 2, 3), float64] */, dtype="int16") /* ty=Tensor[(9, 2, 3), int16] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="int16") /* ty=Tensor[(9, 2, 3), int16] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %514 = @func_5738() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(16, 6), float32], Tensor[(768, 4), float32]) */;
  %515 = add(%512, %513) /* ty=Tensor[(9, 2, 3), int16] */;
  %516 = %514.1;
  (%515, %516)
}

def @func_8118(%var_8087: Tensor[(768, 3), float64]) -> (Tensor[(768), float32], Tensor[(768, 3), bool], Tensor[(10, 2, 15), uint8], Tensor[(162, 2), float32]) {
  %517 = @func_5342() /* ty=(Tensor[(768), float32],) */;
  %518 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
  %519 = %518.0;
  %520 = cast(%519, dtype="int32") /* ty=Tensor[(768, 1), int32] */;
  %521 = cast(%var_8087, dtype="int32") /* ty=Tensor[(768, 3), int32] */;
  %522 = minimum(%520, %521) /* ty=Tensor[(768, 3), int32] */;
  %523 = cast(%522, dtype="float64") /* ty=Tensor[(768, 3), float64] */;
  %524 = cast(%519, dtype="float64") /* ty=Tensor[(768, 1), float64] */;
  %525 = divide(%523, %524) /* ty=Tensor[(768, 3), float64] */;
  %526 = cast(%var_8087, dtype="bool") /* ty=Tensor[(768, 3), bool] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(2), int32] */;
  %528 = cast(%525, dtype="bool") /* ty=Tensor[(768, 3), bool] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %530 = cast(meta[relay.Constant][32] /* ty=Tensor[(162, 2), float32] */, dtype="float32") /* ty=Tensor[(162, 2), float32] */;
  %531 = reshape(%530, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %532 = @func_4351(%531) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(324), float32]) */;
  %533 = %517.0;
  %534 = less_equal(%528, %529) /* ty=Tensor[(768, 3), bool] */;
  %535 = %532.0;
  (%533, %534, %535, meta[relay.Constant][32] /* ty=Tensor[(162, 2), float32] */)
}

def @func_3083(%var_3072: Tensor[(768), float32]) -> (Tensor[(11, 5, 12), uint8], Tensor[(96), float32], Tensor[(324), float32], Tensor[(4, 9, 9), float32], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) {
  %536 = cast(meta[relay.Constant][34] /* ty=Tensor[(11, 5, 12), uint8] */, dtype="uint8") /* ty=Tensor[(11, 5, 12), uint8] */;
  %537 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(11, 5, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 5, 12), uint8] */, dtype="uint8") /* ty=Tensor[(11, 5, 12), uint8] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %540 = cast(meta[relay.Constant][35] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %541 = reshape(%540, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %542 = @func_2412(%541) /* ty=(Tensor[(14, 2, 3), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) */;
  %543 = cast(meta[relay.Constant][35] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %544 = cast(meta[relay.Constant][35] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %545 = reshape(%543, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %546 = reshape(%544, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %547 = @func_1978(%545, %546) /* ty=(Tensor[(4, 9, 9), float32],) */;
  %548 = cast(%var_3072, dtype="float32") /* ty=Tensor[(768), float32] */;
  %549 = reshape(%548, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), float32] */;
  %550 = @func_1383(%549) /* ty=(Tensor[(16, 4, 12), float64], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(16, 4, 12), bool]) */;
  %551 = bitwise_xor(%538, %539) /* ty=Tensor[(11, 5, 12), uint8] */;
  %552 = %542.4;
  %553 = %547.0;
  %554 = %550.0;
  (%551, %552, meta[relay.Constant][35] /* ty=Tensor[(324), float32] */, %553, %554, %var_3072)
}

def @func_9306(%var_9290: Tensor[(6, 4, 1), float32], %var_9298: Tensor[(3136), float64]) -> (Tensor[(6, 4, ?), int32], Tensor[(14, 16, 14), float64], Tensor[(3136), float64]) {
  %555 = cast(%var_9290, dtype="float32") /* ty=Tensor[(6, 4, 1), float32] */;
  %556 = sinh(%555) /* ty=Tensor[(6, 4, 1), float32] */;
  %557 = cast(%var_9290, dtype="int32") /* ty=Tensor[(6, 4, 1), int32] */;
  %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%556, dtype="int32") /* ty=Tensor[(6, 4, 1), int32] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %561 = cast(%var_9298, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %562 = reshape(%561, newshape=[14, 16, 14]) /* ty=Tensor[(14, 16, 14), float64] */;
  %563 = left_shift(%559, %560) /* ty=Tensor[(6, 4, ?), int32] */;
  %564 = @func_9225(%562) /* ty=Tensor[(14, 16, 14), float64] */;
  (%563, %564, %var_9298)
}

def @func_4033() -> (Tensor[(12, 5, 2), float64],) {
  %565 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 5, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 5, 2), float64] */;
  %566 = asin(%565) /* ty=Tensor[(12, 5, 2), float64] */;
  (%566,)
}

def @func_9225(%var_9219: Tensor[(14, 16, 14), float64]) -> Tensor[(14, 16, 14), float64] {
  %567 = cast(%var_9219, dtype="float64") /* ty=Tensor[(14, 16, 14), float64] */;
  cosh(%567) /* ty=Tensor[(14, 16, 14), float64] */
}

def @func_5552() -> (Tensor[(9, ?, 8), bool],) {
  %568 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 1, 8), float32] */, dtype="float32") /* ty=Tensor[(9, 1, 8), float32] */;
  %569 = acosh(%568) /* ty=Tensor[(9, 1, 8), float32] */;
  %570 = cast(%569, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %571 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(9, 1, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(meta[relay.Constant][37] /* ty=Tensor[(9, 1, 8), float32] */, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %574 = logical_or(%572, %573) /* ty=Tensor[(9, ?, 8), bool] */;
  (%574,)
}

def @func_5937() -> (Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), bool]) {
  %575 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %576 = @func_4121() /* ty=(Tensor[(12, 5, 2), uint16], Tensor[(12, 5, 2), bool]) */;
  %577 = %575.0;
  %578 = %576.1;
  (%577, %578)
}

def @func_5160() -> Tensor[(768, ?), bool] {
  %579 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
  %580 = %579.0;
  %581 = cast(%580, dtype="float64") /* ty=Tensor[(768, 1), float64] */;
  %582 = acosh(%581) /* ty=Tensor[(768, 1), float64] */;
  %583 = cast(%580, dtype="bool") /* ty=Tensor[(768, 1), bool] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(2), int32] */;
  %585 = cast(%582, dtype="bool") /* ty=Tensor[(768, 1), bool] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  equal(%585, %586) /* ty=Tensor[(768, ?), bool] */
}

def @func_10040(%var_9983: Tensor[(6, 11, 5), int16], %var_10009: Tensor[(162, 2), float32]) -> (Tensor[(6, 11, 5), int16], Tensor[(2304), float64], Tensor[(162, 2), float64], Tensor[(10, 13, 9), float64], Tensor[(1170), int8]) {
  %587 = cast(%var_9983, dtype="int16") /* ty=Tensor[(6, 11, 5), int16] */;
  %588 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(6, 11, 5), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 11, 5), int16] */, dtype="int16") /* ty=Tensor[(6, 11, 5), int16] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %591 = cast(meta[relay.Constant][39] /* ty=Tensor[(2304), float64] */, dtype="float64") /* ty=Tensor[(2304), float64] */;
  %592 = reshape(%591, newshape=[768, 3]) /* ty=Tensor[(768, 3), float64] */;
  %593 = @func_8118(%592) /* ty=(Tensor[(768), float32], Tensor[(768, 3), bool], Tensor[(10, 2, 15), uint8], Tensor[(162, 2), float32]) */;
  %594 = %593.3;
  %595 = cast(%var_10009, dtype="float64") /* ty=Tensor[(162, 2), float64] */;
  %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(2), int32] */;
  %597 = cast(%594, dtype="float64") /* ty=Tensor[(162, 2), float64] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %599 = cast(meta[relay.Constant][40] /* ty=Tensor[(1170), int8] */, dtype="int8") /* ty=Tensor[(1170), int8] */;
  %600 = cast(meta[relay.Constant][40] /* ty=Tensor[(1170), int8] */, dtype="int8") /* ty=Tensor[(1170), int8] */;
  %601 = cast(meta[relay.Constant][40] /* ty=Tensor[(1170), int8] */, dtype="int8") /* ty=Tensor[(1170), int8] */;
  %602 = reshape(%599, newshape=[10, 13, 9]) /* ty=Tensor[(10, 13, 9), int8] */;
  %603 = reshape(%600, newshape=[10, 13, 9]) /* ty=Tensor[(10, 13, 9), int8] */;
  %604 = reshape(%601, newshape=[10, 13, 9]) /* ty=Tensor[(10, 13, 9), int8] */;
  %605 = @func_9704(%602, %603, %604) /* ty=(Tensor[(10, 13, 9), bool], Tensor[(324), float32], Tensor[(10, 13, 9), float64]) */;
  %606 = bitwise_or(%589, %590) /* ty=Tensor[(6, 11, 5), int16] */;
  %607 = divide(%597, %598) /* ty=Tensor[(162, 2), float64] */;
  %608 = %605.2;
  (%606, meta[relay.Constant][39] /* ty=Tensor[(2304), float64] */, %607, %608, meta[relay.Constant][40] /* ty=Tensor[(1170), int8] */)
}

def @func_3754() -> Tensor[(10, 2, 15), uint8] {
  %609 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %609.0
}

def @func_9145() -> (Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float32]) {
  %610 = @func_6234() /* ty=(Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint64]) */;
  %611 = @func_5738() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(16, 6), float32], Tensor[(768, 4), float32]) */;
  %612 = %610.0;
  %613 = %611.0;
  %614 = @func_5083() /* ty=Tensor[(10, 2, 15), float32] */;
  (%612, %613, %614)
}

def @func_9823() -> Tensor[(10, 2, 15), float32] {
  %615 = @func_6876() /* ty=(Tensor[(10, 2, 15), float32],) */;
  %615.0
}

def @func_8295() -> (Tensor[(10, 2, 15), float32], Tensor[(324), float32]) {
  %616 = @func_5083() /* ty=Tensor[(10, 2, 15), float32] */;
  %617 = @func_7286() /* ty=Tensor[(324), float32] */;
  (%616, %617)
}

def @func_8632() -> (Tensor[(768), float32], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float32]) {
  %618 = @func_8600() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(10, 2, 15), uint8], Tensor[(2304), float64]) */;
  %619 = @func_4869() /* ty=(Tensor[(768, 1), float64], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
  %620 = %618.2;
  %621 = %619.2;
  %622 = @func_7594() /* ty=Tensor[(10, 2, 15), float32] */;
  (%620, %621, %622)
}

def @func_7594() -> Tensor[(10, 2, 15), float32] {
  %623 = @func_6876() /* ty=(Tensor[(10, 2, 15), float32],) */;
  %623.0
}

def @func_3913(%var_3894: float64, %var_3895: Tensor[(1, 11, 12), float64]) -> (Tensor[(1, 11, 12), float64], Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16]) {
  %624 = cast(%var_3894, dtype="float64") /* ty=float64 */;
  %625 = cast(%var_3895, dtype="float64") /* ty=Tensor[(1, 11, 12), float64] */;
  %626 = cast(%var_3894, dtype="uint16") /* ty=uint16 */;
  %627 = reshape(%626, newshape=[]) /* ty=uint16 */;
  %628 = @func_2471(%627) /* ty=(Tensor[(1, 9), uint16],) */;
  %629 = add(%624, %625) /* ty=Tensor[(1, 11, 12), float64] */;
  %630 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
  %631 = %628.0;
  (%629, %630, %631)
}

def @func_8697(%var_8670: Tensor[(1, 4, 12), float64]) -> (Tensor[(?, 4, 12), float64], Tensor[(1, 4, 12), float64]) {
  %632 = cast(%var_8670, dtype="float64") /* ty=Tensor[(1, 4, 12), float64] */;
  %633 = acosh(%632) /* ty=Tensor[(1, 4, 12), float64] */;
  %634 = cast(%var_8670, dtype="float64") /* ty=Tensor[(1, 4, 12), float64] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="float64") /* ty=Tensor[(1, 4, 12), float64] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %638 = cast(%633, dtype="float64") /* ty=Tensor[(1, 4, 12), float64] */;
  %639 = floor_mod(%636, %637) /* ty=Tensor[(?, 4, 12), float64] */;
  %640 = sinh(%638) /* ty=Tensor[(1, 4, 12), float64] */;
  (%639, %640)
}

def @func_7378(%var_7330: Tensor[(4, 16, 11), int32], %var_7345: Tensor[(96), float32], %var_7366: Tensor[(324), float32]) -> (Tensor[(4, 16, 11), int32], Tensor[(3, 16, 2), float32], Tensor[(96), float32], Tensor[(10, 2, 15), uint8], Tensor[(9, 2, 3), int16], Tensor[(1, 324), float32], Tensor[(324), float32]) {
  %641 = cast(%var_7330, dtype="int32") /* ty=Tensor[(4, 16, 11), int32] */;
  %642 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(4, 16, 11), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 16, 11), int32] */, dtype="int32") /* ty=Tensor[(4, 16, 11), int32] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %645 = cast(%var_7345, dtype="float32") /* ty=Tensor[(96), float32] */;
  %646 = reshape(%645, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %647 = @func_47(%646) /* ty=(Tensor[(3, 16, 2), float32],) */;
  %648 = @func_5060() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) */;
  %649 = @func_6234() /* ty=(Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint64]) */;
  %650 = cast(%var_7366, dtype="float32") /* ty=Tensor[(324), float32] */;
  %651 = reshape(%650, newshape=[1, 324]) /* ty=Tensor[(1, 324), float32] */;
  %652 = @func_4249(%651) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(1, 324), float32], Tensor[(10, 2, 15), uint8]) */;
  %653 = maximum(%643, %644) /* ty=Tensor[(4, 16, 11), int32] */;
  %654 = %647.0;
  %655 = %648.0;
  %656 = %649.0;
  %657 = %652.2;
  (%653, %654, %var_7345, %655, %656, %657, %var_7366)
}

def @func_5738() -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(16, 6), float32], Tensor[(768, 4), float32]) {
  %658 = @func_5060() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) */;
  %659 = cast(meta[relay.Constant][42] /* ty=Tensor[(16, 6), float32] */, dtype="float32") /* ty=Tensor[(16, 6), float32] */;
  %660 = reshape(%659, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %661 = @func_4417(%660) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) */;
  %662 = @func_5060() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) */;
  %663 = %662.2;
  %664 = cast(%663, dtype="float32") /* ty=Tensor[(768, 1), float32] */;
  %665 = cast(meta[relay.Constant][43] /* ty=Tensor[(768, 4), float64] */, dtype="float32") /* ty=Tensor[(768, 4), float32] */;
  %666 = %658.0;
  %667 = %661.1;
  %668 = floor_mod(%664, %665) /* ty=Tensor[(768, 4), float32] */;
  (%666, %667, meta[relay.Constant][42] /* ty=Tensor[(16, 6), float32] */, %668)
}

def @func_7870() -> (Tensor[(1, 300), uint8], Tensor[(4, 9, 9), bool]) {
  %669 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 300), uint8] */, dtype="uint8") /* ty=Tensor[(1, 300), uint8] */;
  %670 = @func_6661() /* ty=Tensor[(324), float32] */;
  %671 = cast(%670, dtype="float32") /* ty=Tensor[(324), float32] */;
  %672 = reshape(%669, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), uint8] */;
  %673 = reshape(%671, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %674 = @func_4544(%672, %673) /* ty=(Tensor[(10, 2, 15), bool], Tensor[(10, 2, 15), uint64], Tensor[(4, 9, 9), float32], Tensor[(324), float32]) */;
  %675 = %674.2;
  %676 = cast(%670, dtype="bool") /* ty=Tensor[(324), bool] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="bool") /* ty=Tensor[(4, 9, 9), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %680 = less_equal(%678, %679) /* ty=Tensor[(4, 9, 9), bool] */;
  (meta[relay.Constant][44] /* ty=Tensor[(1, 300), uint8] */, %680)
}

def @func_4869() -> (Tensor[(768, 1), float64], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) {
  %681 = @func_4757() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float32], Tensor[(10, 2, 15), float64]) */;
  %682 = %681.2;
  %683 = cast(%682, dtype="float64") /* ty=Tensor[(768, 1), float64] */;
  %684 = exp(%683) /* ty=Tensor[(768, 1), float64] */;
  %685 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
  %686 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
  (%684, %685, %686)
}

def @func_5849() -> (Tensor[(10, 2, 15), uint64],) {
  %687 = @func_4757() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float32], Tensor[(10, 2, 15), float64]) */;
  %688 = %687.0;
  (%688,)
}

def @func_8426(%var_8368: Tensor[(324), float32]) -> (Tensor[(16, 6), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float32], Tensor[(8, 8, 8), int8], Tensor[(324), float32], Tensor[(1, 300), uint8]) {
  %689 = cast(meta[relay.Constant][45] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %690 = reshape(%689, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float32] */;
  %691 = @func_7980(%690) /* ty=(Tensor[(10, 2, 15), bool],) */;
  %692 = cast(%var_8368, dtype="float32") /* ty=Tensor[(324), float32] */;
  %693 = reshape(%692, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %694 = @func_4202(%693) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(324), float32], Tensor[(8, 8, 8), int8], Tensor[(128, 4), int8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
  %695 = @func_7870() /* ty=(Tensor[(1, 300), uint8], Tensor[(4, 9, 9), bool]) */;
  %696 = @func_7391() /* ty=Tensor[(16, 6), float32] */;
  %697 = %691.0;
  %698 = %694.3;
  %699 = %695.0;
  (%696, %697, meta[relay.Constant][45] /* ty=Tensor[(300), float32] */, %698, %var_8368, %699)
}

def @func_9704(%var_9657: Tensor[(10, 13, 9), int8], %var_9658: Tensor[(10, 13, 9), int8], %var_9678: Tensor[(10, 13, 9), int8]) -> (Tensor[(10, 13, 9), bool], Tensor[(324), float32], Tensor[(10, 13, 9), float64]) {
  %700 = cast(%var_9658, dtype="bool") /* ty=Tensor[(10, 13, 9), bool] */;
  %701 = shape_of(%var_9657, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%var_9657, dtype="bool") /* ty=Tensor[(10, 13, 9), bool] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %704 = cast(%var_9678, dtype="uint8") /* ty=Tensor[(10, 13, 9), uint8] */;
  %705 = shape_of(%var_9657, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%var_9657, dtype="uint8") /* ty=Tensor[(10, 13, 9), uint8] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %708 = right_shift(%706, %707) /* ty=Tensor[(10, 13, 9), uint8] */;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(10, 13, 9), float64] */;
  %710 = less_equal(%702, %703) /* ty=Tensor[(10, 13, 9), bool] */;
  %711 = @func_6661() /* ty=Tensor[(324), float32] */;
  %712 = sigmoid(%709) /* ty=Tensor[(10, 13, 9), float64] */;
  (%710, %711, %712)
}

def @func_3729(%var_3716: Tensor[(8, 13, 1), bool]) -> (Tensor[(8, 13, 13), bool], Tensor[(1, 9), uint16], uint16, Tensor[(8, 13, 13), float64]) {
  %713 = cast(%var_3716, dtype="bool") /* ty=Tensor[(8, 13, 1), bool] */;
  %714 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 13, 13), bool] */, dtype="bool") /* ty=Tensor[(8, 13, 13), bool] */;
  %715 = cast(meta[relay.Constant][47] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %716 = reshape(%715, newshape=[]) /* ty=uint16 */;
  %717 = @func_2471(%716) /* ty=(Tensor[(1, 9), uint16],) */;
  %718 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 13, 13), bool] */, dtype="float64") /* ty=Tensor[(8, 13, 13), float64] */;
  %719 = logical_and(%713, %714) /* ty=Tensor[(8, 13, 13), bool] */;
  %720 = %717.0;
  %721 = cos(%718) /* ty=Tensor[(8, 13, 13), float64] */;
  (%719, %720, meta[relay.Constant][47] /* ty=uint16 */, %721)
}

def @func_5083() -> Tensor[(10, 2, 15), float32] {
  @func_4946() /* ty=Tensor[(10, 2, 15), float32] */
}

def @func_5342() -> (Tensor[(768), float32],) {
  %722 = @func_4679() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */;
  %723 = %722.2;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(768), float32] */;
  %725 = log10(%724) /* ty=Tensor[(768), float32] */;
  (%725,)
}

def @func_7485() -> Tensor[(10, 2, 15), uint8] {
  %726 = @func_4936() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %726.0
}

def @func_5363(%var_5350: Tensor[(768), float32]) -> (Tensor[(10, 2, 15), float32], Tensor[(768), float32], Tensor[(768), float32]) {
  %727 = cast(%var_5350, dtype="float32") /* ty=Tensor[(768), float32] */;
  %728 = reshape(%727, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %729 = @func_4304(%728) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(11, 5, 12), uint8], Tensor[(768), float32], Tensor[(10, 2, 15), uint8]) */;
  %730 = @func_4946() /* ty=Tensor[(10, 2, 15), float32] */;
  %731 = %729.2;
  (%730, %731, %var_5350)
}

def @func_8213(%var_8187: float32, %var_8188: Tensor[(10, 10, 4), float32]) -> (Tensor[(10, 10, 4), float32], Tensor[(12, 5, 2), uint16], Tensor[(12, 5, 2), uint16]) {
  %732 = cast(%var_8187, dtype="float32") /* ty=float32 */;
  %733 = cast(%var_8188, dtype="float32") /* ty=Tensor[(10, 10, 4), float32] */;
  %734 = maximum(%732, %733) /* ty=Tensor[(10, 10, 4), float32] */;
  %735 = @func_7122() /* ty=Tensor[(12, 5, 2), uint16] */;
  %736 = @func_5782() /* ty=Tensor[(12, 5, 2), uint16] */;
  (%734, %735, %736)
}

def @func_2412(%var_2396: Tensor[(324), float32]) -> (Tensor[(14, 2, 3), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) {
  %737 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(14, 2, 3), float64] */;
  %738 = cast(%var_2396, dtype="float32") /* ty=Tensor[(324), float32] */;
  %739 = cast(%var_2396, dtype="float32") /* ty=Tensor[(324), float32] */;
  %740 = reshape(%738, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %741 = reshape(%739, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %742 = @func_1978(%740, %741) /* ty=(Tensor[(4, 9, 9), float32],) */;
  %743 = cast(meta[relay.Constant][49] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %744 = reshape(%743, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %745 = @func_47(%744) /* ty=(Tensor[(3, 16, 2), float32],) */;
  %746 = log(%737) /* ty=Tensor[(14, 2, 3), float64] */;
  %747 = %742.0;
  %748 = %745.0;
  (%746, %747, %var_2396, %748, meta[relay.Constant][49] /* ty=Tensor[(96), float32] */)
}

def @func_4946() -> Tensor[(10, 2, 15), float32] {
  %749 = @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */;
  %750 = cast(%749, dtype="float32") /* ty=Tensor[(10, 2, 15), float32] */;
  sin(%750) /* ty=Tensor[(10, 2, 15), float32] */
}

def @func_3158(%var_3095: Tensor[(7, 12, 2), float64], %var_3138: Tensor[(256, 2), int8]) -> (Tensor[(7, 12, 2), float64], Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(256, 2), int8]) {
  %751 = cast(%var_3095, dtype="float64") /* ty=Tensor[(7, 12, 2), float64] */;
  %752 = cast(meta[relay.Constant][50] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %753 = reshape(%752, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), float32] */;
  %754 = @func_1383(%753) /* ty=(Tensor[(16, 4, 12), float64], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(16, 4, 12), bool]) */;
  %755 = cast(meta[relay.Constant][51] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %756 = cast(%var_3138, dtype="int8") /* ty=Tensor[(256, 2), int8] */;
  %757 = reshape(%755, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %758 = reshape(%756, newshape=[512]) /* ty=Tensor[(512), int8] */;
  %759 = @func_1923(%757, %758) /* ty=(Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(3, 16, 2), float32], Tensor[(16, 6), float32], Tensor[(9, 5, 6), float64]) */;
  %760 = exp(%751) /* ty=Tensor[(7, 12, 2), float64] */;
  %761 = %754.0;
  %762 = %759.4;
  (%760, %761, meta[relay.Constant][50] /* ty=Tensor[(768), float32] */, %762, meta[relay.Constant][51] /* ty=Tensor[(270), float32] */, %var_3138)
}

def @func_4417(%var_4400: Tensor[(96), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) {
  %763 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %764 = %763.0;
  %765 = cast(%764, dtype="uint8") /* ty=Tensor[(10, 2, 15), uint8] */;
  %766 = reshape(%765, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), uint8] */;
  %767 = cast(%var_4400, dtype="float32") /* ty=Tensor[(96), float32] */;
  %768 = reshape(%767, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %769 = @func_47(%768) /* ty=(Tensor[(3, 16, 2), float32],) */;
  %770 = @func_4069(%766) /* ty=Tensor[(10, 2, 15), uint64] */;
  %771 = %769.0;
  (%764, %770, %771, %var_4400)
}

def @func_7013(%var_7011: Tensor[(96), float32]) -> (Tensor[(10, 2, 15), uint64], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) {
  %772 = @func_6234() /* ty=(Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint64]) */;
  %773 = @func_6088() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32]) */;
  %774 = cast(%var_7011, dtype="float32") /* ty=Tensor[(96), float32] */;
  %775 = reshape(%774, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %776 = @func_47(%775) /* ty=(Tensor[(3, 16, 2), float32],) */;
  %777 = %772.1;
  %778 = %773.5;
  %779 = %776.0;
  (%777, %778, %779, %var_7011)
}

def @func_5807(%var_5787: Tensor[(14, 2, 1), float64], %var_5788: Tensor[(14, 2, 4), float64]) -> (Tensor[(14, 2, 4), float64],) {
  %780 = cast(%var_5787, dtype="float64") /* ty=Tensor[(14, 2, 1), float64] */;
  %781 = cast(%var_5788, dtype="float64") /* ty=Tensor[(14, 2, 4), float64] */;
  %782 = maximum(%780, %781) /* ty=Tensor[(14, 2, 4), float64] */;
  (%782,)
}

def @func_7088(%var_7076: Tensor[(9, 3, 8), float64], %var_7086: Tensor[(52, 2), bool]) -> (Tensor[(9, 3, 8), float32], uint16, Tensor[(52, 2), bool]) {
  %783 = cast(%var_7076, dtype="float64") /* ty=Tensor[(9, 3, 8), float64] */;
  %784 = acosh(%783) /* ty=Tensor[(9, 3, 8), float64] */;
  %785 = cast(%784, dtype="float32") /* ty=Tensor[(9, 3, 8), float32] */;
  %786 = cast(%var_7086, dtype="bool") /* ty=Tensor[(52, 2), bool] */;
  %787 = reshape(%786, newshape=[8, 13, 1]) /* ty=Tensor[(8, 13, 1), bool] */;
  %788 = @func_3729(%787) /* ty=(Tensor[(8, 13, 13), bool], Tensor[(1, 9), uint16], uint16, Tensor[(8, 13, 13), float64]) */;
  %789 = acos(%785) /* ty=Tensor[(9, 3, 8), float32] */;
  %790 = %788.2;
  (%789, %790, %var_7086)
}

def @func_7828() -> Tensor[(10, 2, 15), uint8] {
  @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_4249(%var_4233: Tensor[(1, 324), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(1, 324), float32], Tensor[(10, 2, 15), uint8]) {
  %791 = cast(%var_4233, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
  %792 = reshape(%791, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %793 = @func_2412(%792) /* ty=(Tensor[(14, 2, 3), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) */;
  %794 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
  %795 = %793.4;
  %796 = @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */;
  (%794, %795, %var_4233, %796)
}

def @func_7524(%var_7516: Tensor[(12, 5, 2), uint16]) -> (Tensor[(12, 5, 2), int8],) {
  %797 = @func_7122() /* ty=Tensor[(12, 5, 2), uint16] */;
  %798 = cast(%var_7516, dtype="int8") /* ty=Tensor[(12, 5, 2), int8] */;
  %799 = shape_of(%797, dtype="int32") /* ty=Tensor[(3), int32] */;
  %800 = cast(%797, dtype="int8") /* ty=Tensor[(12, 5, 2), int8] */;
  %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %802 = left_shift(%800, %801) /* ty=Tensor[(12, 5, 2), int8] */;
  (%802,)
}

def @func_8991(%var_8922: Tensor[(12, 8, 14), float64]) -> (Tensor[(10, 2, 15), uint64], Tensor[(3, 16, 2), float32], Tensor[(1, 270), float32], Tensor[(512), int8], Tensor[(12, 8, 14), int32], Tensor[(768), float32], Tensor[(768), float32], Tensor[(10, 2, 15), uint8]) {
  %803 = @func_5849() /* ty=(Tensor[(10, 2, 15), uint64],) */;
  %804 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 270), float32] */, dtype="float32") /* ty=Tensor[(1, 270), float32] */;
  %805 = cast(meta[relay.Constant][53] /* ty=Tensor[(512), int8] */, dtype="int8") /* ty=Tensor[(512), int8] */;
  %806 = reshape(%804, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %807 = reshape(%805, newshape=[512]) /* ty=Tensor[(512), int8] */;
  %808 = @func_1923(%806, %807) /* ty=(Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(3, 16, 2), float32], Tensor[(16, 6), float32], Tensor[(9, 5, 6), float64]) */;
  %809 = cast(%var_8922, dtype="float64") /* ty=Tensor[(12, 8, 14), float64] */;
  %810 = log10(%809) /* ty=Tensor[(12, 8, 14), float64] */;
  %811 = cast(%810, dtype="float32") /* ty=Tensor[(12, 8, 14), float32] */;
  %812 = asinh(%811) /* ty=Tensor[(12, 8, 14), float32] */;
  %813 = cast(%812, dtype="float64") /* ty=Tensor[(12, 8, 14), float64] */;
  %814 = sin(%813) /* ty=Tensor[(12, 8, 14), float64] */;
  %815 = cast(%810, dtype="uint16") /* ty=Tensor[(12, 8, 14), uint16] */;
  %816 = shape_of(%812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%812, dtype="uint16") /* ty=Tensor[(12, 8, 14), uint16] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %819 = maximum(%817, %818) /* ty=Tensor[(12, 8, 14), uint16] */;
  %820 = cast(%819, dtype="int32") /* ty=Tensor[(12, 8, 14), int32] */;
  %821 = shape_of(%814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(%814, dtype="int32") /* ty=Tensor[(12, 8, 14), int32] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %824 = cast(meta[relay.Constant][54] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %825 = reshape(%824, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %826 = @func_5363(%825) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(768), float32], Tensor[(768), float32]) */;
  %827 = @func_4757() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float32], Tensor[(10, 2, 15), float64]) */;
  %828 = %803.0;
  %829 = %808.2;
  %830 = logical_xor(%822, %823) /* ty=Tensor[(12, 8, 14), int32] */;
  %831 = %826.2;
  %832 = %827.1;
  (%828, %829, meta[relay.Constant][52] /* ty=Tensor[(1, 270), float32] */, meta[relay.Constant][53] /* ty=Tensor[(512), int8] */, %830, %831, meta[relay.Constant][54] /* ty=Tensor[(768), float32] */, %832)
}

def @func_1923(%var_1887: Tensor[(9, 5, 6), float32], %var_1898: Tensor[(512), int8]) -> (Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(3, 16, 2), float32], Tensor[(16, 6), float32], Tensor[(9, 5, 6), float64]) {
  %833 = cast(%var_1898, dtype="int8") /* ty=Tensor[(512), int8] */;
  %834 = cast(%var_1898, dtype="int8") /* ty=Tensor[(512), int8] */;
  %835 = reshape(%833, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %836 = reshape(%834, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %837 = cast(meta[relay.Constant][55] /* ty=Tensor[(16, 6), float32] */, dtype="float32") /* ty=Tensor[(16, 6), float32] */;
  %838 = reshape(%837, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %839 = @func_47(%838) /* ty=(Tensor[(3, 16, 2), float32],) */;
  %840 = cast(%var_1887, dtype="float32") /* ty=Tensor[(9, 5, 6), float32] */;
  %841 = atan(%840) /* ty=Tensor[(9, 5, 6), float32] */;
  %842 = cast(%841, dtype="float64") /* ty=Tensor[(9, 5, 6), float64] */;
  %843 = @func_352(%835, %836) /* ty=Tensor[(8, 8, 8), int8] */;
  %844 = %839.0;
  %845 = exp(%842) /* ty=Tensor[(9, 5, 6), float64] */;
  (%843, %var_1898, %844, meta[relay.Constant][55] /* ty=Tensor[(16, 6), float32] */, %845)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_9523(%var_9522: float64) -> (Tensor[(10, 2, 15), float32], float64, Tensor[(832), float32], float64) {
  %9 = fn (%var_9511: float64) -> (Tensor[(10, 2, 15), float32], float64, Tensor[(832), float32], float64) {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
    %1 = cast(%var_9511, dtype="float64") /* ty=float64 */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(832), float32] */, dtype="float32") /* ty=Tensor[(832), float32] */;
    %3 = reshape(%0, newshape=[832]) /* ty=Tensor[(832), float32] */;
    %4 = reshape(%1, newshape=[]) /* ty=float64 */;
    %5 = reshape(%2, newshape=[13, 16, 4]) /* ty=Tensor[(13, 16, 4), float32] */;
    %6 = @func_9100(%3, %4, %5) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(832), float32], float64, float64, Tensor[(13, 16, 4), float64], Tensor[(13, 16, 4), float32], Tensor[(10, 2, 15), float32], Tensor[(8, 64), int8]) */;
    %7 = @func_5083() /* ty=Tensor[(10, 2, 15), float32] */;
    %8 = %6.3;
    (%7, %8, meta[relay.Constant][0] /* ty=Tensor[(832), float32] */, %var_9511)
  };
  %9(%var_9522) /* ty=(Tensor[(10, 2, 15), float32], float64, Tensor[(832), float32], float64) */
}

def @func_8653() -> Tensor[(10, 2, 15), uint64] {
  %11 = fn () -> Tensor[(10, 2, 15), uint64] {
    %10 = @func_6234() /* ty=(Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint64]) */;
    %10.1
  };
  %11() /* ty=Tensor[(10, 2, 15), uint64] */
}

def @func_8787(%var_8754: Tensor[(10, 2, 15), float32], %var_8769: Tensor[(704), int32], %var_8770: Tensor[(96), float32]) -> (Tensor[(10, 2, 15), bool], Tensor[(12, 5, 2), uint16], Tensor[(3, 16, 2), float32], Tensor[(96), float32], Tensor[(1, 324), float32], Tensor[(704), float32]) {
  %12 = @func_8295() /* ty=(Tensor[(10, 2, 15), float32], Tensor[(324), float32]) */;
  %13 = %12.0;
  %14 = cast(%var_8754, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%13, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %18 = cast(%var_8769, dtype="int32") /* ty=Tensor[(704), int32] */;
  %19 = cast(%var_8770, dtype="float32") /* ty=Tensor[(96), float32] */;
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 324), float32] */, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
  %21 = reshape(%18, newshape=[4, 16, 11]) /* ty=Tensor[(4, 16, 11), int32] */;
  %22 = reshape(%19, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %23 = reshape(%20, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %24 = @func_7378(%21, %22, %23) /* ty=(Tensor[(4, 16, 11), int32], Tensor[(3, 16, 2), float32], Tensor[(96), float32], Tensor[(10, 2, 15), uint8], Tensor[(9, 2, 3), int16], Tensor[(1, 324), float32], Tensor[(324), float32]) */;
  %25 = cast(%var_8769, dtype="float32") /* ty=Tensor[(704), float32] */;
  %26 = not_equal(%16, %17) /* ty=Tensor[(10, 2, 15), bool] */;
  %27 = @func_5782() /* ty=Tensor[(12, 5, 2), uint16] */;
  %28 = %24.1;
  %29 = acosh(%25) /* ty=Tensor[(704), float32] */;
  (%26, %27, %28, %var_8770, meta[relay.Constant][1] /* ty=Tensor[(1, 324), float32] */, %29)
}

def @func_3729(%var_3716: Tensor[(8, 13, 1), bool]) -> (Tensor[(8, 13, 13), bool], Tensor[(1, 9), uint16], uint16, Tensor[(8, 13, 13), float64]) {
  %30 = cast(%var_3716, dtype="bool") /* ty=Tensor[(8, 13, 1), bool] */;
  %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 13, 13), bool] */, dtype="bool") /* ty=Tensor[(8, 13, 13), bool] */;
  %32 = cast(meta[relay.Constant][3] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %33 = reshape(%32, newshape=[]) /* ty=uint16 */;
  %34 = @func_2471(%33) /* ty=(Tensor[(1, 9), uint16],) */;
  %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 13, 13), bool] */, dtype="float64") /* ty=Tensor[(8, 13, 13), float64] */;
  %36 = logical_and(%30, %31) /* ty=Tensor[(8, 13, 13), bool] */;
  %37 = %34.0;
  %38 = cos(%35) /* ty=Tensor[(8, 13, 13), float64] */;
  (%36, %37, meta[relay.Constant][3] /* ty=uint16 */, %38)
}

def @func_1927(%var_1925: Tensor[(9, 5, 6), float32], %var_1926: Tensor[(512), int8]) -> (Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(3, 16, 2), float32], Tensor[(16, 6), float32], Tensor[(9, 5, 6), float64]) {
  @func_1923(%var_1925, %var_1926) /* ty=(Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(3, 16, 2), float32], Tensor[(16, 6), float32], Tensor[(9, 5, 6), float64]) */
}

def @func_9104(%var_9101: Tensor[(832), float32], %var_9102: float64, %var_9103: Tensor[(13, 16, 4), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(832), float32], float64, float64, Tensor[(13, 16, 4), float64], Tensor[(13, 16, 4), float32], Tensor[(10, 2, 15), float32], Tensor[(8, 64), int8]) {
  %61 = fn (%var_9018: Tensor[(832), float32], %var_9030: float64, %var_9086: Tensor[(13, 16, 4), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(832), float32], float64, float64, Tensor[(13, 16, 4), float64], Tensor[(13, 16, 4), float32], Tensor[(10, 2, 15), float32], Tensor[(8, 64), int8]) {
    %39 = @func_4679() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */;
    %40 = cast(%var_9030, dtype="float64") /* ty=float64 */;
    %41 = reshape(%40, newshape=[]) /* ty=float64 */;
    %42 = @func_8260(%41) /* ty=(Tensor[(10, 2, 15), uint8], float64, float64, Tensor[(768, 1), float64], Tensor[(10, 2, 15), bool]) */;
    %43 = cast(%var_9018, dtype="float32") /* ty=Tensor[(832), float32] */;
    %44 = reshape(%43, newshape=[13, 16, 4]) /* ty=Tensor[(13, 16, 4), float32] */;
    %45 = @func_7585(%44) /* ty=Tensor[(13, 16, 4), float32] */;
    %46 = cast(%45, dtype="float32") /* ty=Tensor[(13, 16, 4), float32] */;
    %47 = log10(%46) /* ty=Tensor[(13, 16, 4), float32] */;
    %48 = cast(%47, dtype="float64") /* ty=Tensor[(13, 16, 4), float64] */;
    %49 = cast(%var_9086, dtype="float32") /* ty=Tensor[(13, 16, 4), float32] */;
    %50 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
    %51 = cast(%47, dtype="float32") /* ty=Tensor[(13, 16, 4), float32] */;
    %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %53 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 64), int8] */, dtype="int8") /* ty=Tensor[(8, 64), int8] */;
    %54 = reshape(%53, newshape=[512]) /* ty=Tensor[(512), int8] */;
    %55 = @func_5276(%54) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(768, ?), bool], Tensor[(10, 2, 15), uint8], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(54, 6), float32], Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float32], Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
    %56 = %39.0;
    %57 = %42.1;
    %58 = erf(%48) /* ty=Tensor[(13, 16, 4), float64] */;
    %59 = power(%51, %52) /* ty=Tensor[(13, 16, 4), float32] */;
    %60 = %55.9;
    (%56, %var_9018, %57, %var_9030, %58, %59, %60, meta[relay.Constant][4] /* ty=Tensor[(8, 64), int8] */)
  };
  %61(%var_9101, %var_9102, %var_9103) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(832), float32], float64, float64, Tensor[(13, 16, 4), float64], Tensor[(13, 16, 4), float32], Tensor[(10, 2, 15), float32], Tensor[(8, 64), int8]) */
}

def @func_7319(%var_7295: Tensor[(9, 13, 7), float32], %var_7296: Tensor[(9, 13, 7), float32], %var_7316: Tensor[(3, 56), float64]) -> (Tensor[(9, 13, 7), float32], Tensor[(9, 5, 6), float64], Tensor[(3, 56), float64], Tensor[(512), int8]) {
  %62 = cast(%var_7296, dtype="float32") /* ty=Tensor[(9, 13, 7), float32] */;
  %63 = shape_of(%var_7295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%var_7295, dtype="float32") /* ty=Tensor[(9, 13, 7), float32] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %66 = cast(%var_7316, dtype="float64") /* ty=Tensor[(3, 56), float64] */;
  %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(512), int8] */, dtype="int8") /* ty=Tensor[(512), int8] */;
  %68 = reshape(%66, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
  %69 = reshape(%67, newshape=[256, 2]) /* ty=Tensor[(256, 2), int8] */;
  %70 = @func_3158(%68, %69) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(256, 2), int8]) */;
  %71 = maximum(%64, %65) /* ty=Tensor[(9, 13, 7), float32] */;
  %72 = %70.3;
  (%71, %72, %var_7316, meta[relay.Constant][5] /* ty=Tensor[(512), int8] */)
}

def @func_4162() -> Tensor[(10, 2, 15), uint8] {
  @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_10043(%var_10041: Tensor[(6, 11, 5), int16], %var_10042: Tensor[(162, 2), float32]) -> (Tensor[(6, 11, 5), int16], Tensor[(2304), float64], Tensor[(162, 2), float64], Tensor[(10, 13, 9), float64], Tensor[(1170), int8]) {
  %95 = fn (%var_9983: Tensor[(6, 11, 5), int16], %var_10009: Tensor[(162, 2), float32]) -> (Tensor[(6, 11, 5), int16], Tensor[(2304), float64], Tensor[(162, 2), float64], Tensor[(10, 13, 9), float64], Tensor[(1170), int8]) {
    %73 = cast(%var_9983, dtype="int16") /* ty=Tensor[(6, 11, 5), int16] */;
    %74 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(6, 11, 5), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %75 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 11, 5), int16] */, dtype="int16") /* ty=Tensor[(6, 11, 5), int16] */;
    %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %77 = cast(meta[relay.Constant][7] /* ty=Tensor[(2304), float64] */, dtype="float64") /* ty=Tensor[(2304), float64] */;
    %78 = reshape(%77, newshape=[768, 3]) /* ty=Tensor[(768, 3), float64] */;
    %79 = @func_8118(%78) /* ty=(Tensor[(768), float32], Tensor[(768, 3), bool], Tensor[(10, 2, 15), uint8], Tensor[(162, 2), float32]) */;
    %80 = %79.3;
    %81 = cast(%var_10009, dtype="float64") /* ty=Tensor[(162, 2), float64] */;
    %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(2), int32] */;
    %83 = cast(%80, dtype="float64") /* ty=Tensor[(162, 2), float64] */;
    %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %85 = cast(meta[relay.Constant][8] /* ty=Tensor[(1170), int8] */, dtype="int8") /* ty=Tensor[(1170), int8] */;
    %86 = cast(meta[relay.Constant][8] /* ty=Tensor[(1170), int8] */, dtype="int8") /* ty=Tensor[(1170), int8] */;
    %87 = cast(meta[relay.Constant][8] /* ty=Tensor[(1170), int8] */, dtype="int8") /* ty=Tensor[(1170), int8] */;
    %88 = reshape(%85, newshape=[10, 13, 9]) /* ty=Tensor[(10, 13, 9), int8] */;
    %89 = reshape(%86, newshape=[10, 13, 9]) /* ty=Tensor[(10, 13, 9), int8] */;
    %90 = reshape(%87, newshape=[10, 13, 9]) /* ty=Tensor[(10, 13, 9), int8] */;
    %91 = @func_9704(%88, %89, %90) /* ty=(Tensor[(10, 13, 9), bool], Tensor[(324), float32], Tensor[(10, 13, 9), float64]) */;
    %92 = bitwise_or(%75, %76) /* ty=Tensor[(6, 11, 5), int16] */;
    %93 = divide(%83, %84) /* ty=Tensor[(162, 2), float64] */;
    %94 = %91.2;
    (%92, meta[relay.Constant][7] /* ty=Tensor[(2304), float64] */, %93, %94, meta[relay.Constant][8] /* ty=Tensor[(1170), int8] */)
  };
  %95(%var_10041, %var_10042) /* ty=(Tensor[(6, 11, 5), int16], Tensor[(2304), float64], Tensor[(162, 2), float64], Tensor[(10, 13, 9), float64], Tensor[(1170), int8]) */
}

def @func_3085(%var_3084: Tensor[(768), float32]) -> (Tensor[(11, 5, 12), uint8], Tensor[(96), float32], Tensor[(324), float32], Tensor[(4, 9, 9), float32], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) {
  %115 = fn (%var_3072: Tensor[(768), float32]) -> (Tensor[(11, 5, 12), uint8], Tensor[(96), float32], Tensor[(324), float32], Tensor[(4, 9, 9), float32], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) {
    %96 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 5, 12), uint8] */, dtype="uint8") /* ty=Tensor[(11, 5, 12), uint8] */;
    %97 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(11, 5, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %98 = cast(meta[relay.Constant][9] /* ty=Tensor[(11, 5, 12), uint8] */, dtype="uint8") /* ty=Tensor[(11, 5, 12), uint8] */;
    %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %100 = cast(meta[relay.Constant][11] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
    %101 = reshape(%100, newshape=[324]) /* ty=Tensor[(324), float32] */;
    %102 = @func_2412(%101) /* ty=(Tensor[(14, 2, 3), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) */;
    %103 = cast(meta[relay.Constant][11] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
    %104 = cast(meta[relay.Constant][11] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
    %105 = reshape(%103, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
    %106 = reshape(%104, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
    %107 = @func_1978(%105, %106) /* ty=(Tensor[(4, 9, 9), float32],) */;
    %108 = cast(%var_3072, dtype="float32") /* ty=Tensor[(768), float32] */;
    %109 = reshape(%108, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), float32] */;
    %110 = @func_1383(%109) /* ty=(Tensor[(16, 4, 12), float64], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(16, 4, 12), bool]) */;
    %111 = bitwise_xor(%98, %99) /* ty=Tensor[(11, 5, 12), uint8] */;
    %112 = %102.4;
    %113 = %107.0;
    %114 = %110.0;
    (%111, %112, meta[relay.Constant][11] /* ty=Tensor[(324), float32] */, %113, %114, %var_3072)
  };
  %115(%var_3084) /* ty=(Tensor[(11, 5, 12), uint8], Tensor[(96), float32], Tensor[(324), float32], Tensor[(4, 9, 9), float32], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */
}

def @func_4035() -> (Tensor[(12, 5, 2), float64],) {
  @func_4033() /* ty=(Tensor[(12, 5, 2), float64],) */
}

def @func_352(%var_340: Tensor[(8, 8, 8), int8], %var_341: Tensor[(8, 8, 8), int8]) -> Tensor[(8, 8, 8), int8] {
  %116 = cast(%var_341, dtype="int8") /* ty=Tensor[(8, 8, 8), int8] */;
  %117 = shape_of(%var_340, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%var_340, dtype="int8") /* ty=Tensor[(8, 8, 8), int8] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  subtract(%118, %119) /* ty=Tensor[(8, 8, 8), int8] */
}

def @func_8600() -> (Tensor[(10, 2, 15), uint64], Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(10, 2, 15), uint8], Tensor[(2304), float64]) {
  %120 = @func_5849() /* ty=(Tensor[(10, 2, 15), uint64],) */;
  %121 = cast(meta[relay.Constant][12] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %122 = reshape(%121, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), float32] */;
  %123 = @func_1383(%122) /* ty=(Tensor[(16, 4, 12), float64], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(16, 4, 12), bool]) */;
  %124 = cast(meta[relay.Constant][13] /* ty=Tensor[(2304), float64] */, dtype="float64") /* ty=Tensor[(2304), float64] */;
  %125 = reshape(%124, newshape=[768, 3]) /* ty=Tensor[(768, 3), float64] */;
  %126 = @func_8118(%125) /* ty=(Tensor[(768), float32], Tensor[(768, 3), bool], Tensor[(10, 2, 15), uint8], Tensor[(162, 2), float32]) */;
  %127 = %120.0;
  %128 = %123.0;
  %129 = %126.2;
  (%127, %128, meta[relay.Constant][12] /* ty=Tensor[(768), float32] */, %129, meta[relay.Constant][13] /* ty=Tensor[(2304), float64] */)
}

def @func_9615(%var_9613: Tensor[(768, 7), float64]) -> (Tensor[(4, 9, 9), float32], Tensor[(10, 2, 15), uint8], Tensor[(768, 7), int32]) {
  @func_9612(%var_9613) /* ty=(Tensor[(4, 9, 9), float32], Tensor[(10, 2, 15), uint8], Tensor[(768, 7), int32]) */
}

def @func_9145() -> (Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float32]) {
  %130 = @func_6234() /* ty=(Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint64]) */;
  %131 = @func_5738() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(16, 6), float32], Tensor[(768, 4), float32]) */;
  %132 = %130.0;
  %133 = %131.0;
  %134 = @func_5083() /* ty=Tensor[(10, 2, 15), float32] */;
  (%132, %133, %134)
}

def @func_6543() -> (Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), uint16], Tensor[(768, 1), float64]) {
  %135 = @func_6437() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %136 = %135.0;
  %137 = @func_5782() /* ty=Tensor[(12, 5, 2), uint16] */;
  %138 = @func_5567() /* ty=Tensor[(768, 1), float64] */;
  (%136, %137, %138)
}

def @func_4869() -> (Tensor[(768, 1), float64], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) {
  %139 = @func_4757() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float32], Tensor[(10, 2, 15), float64]) */;
  %140 = %139.2;
  %141 = cast(%140, dtype="float64") /* ty=Tensor[(768, 1), float64] */;
  %142 = exp(%141) /* ty=Tensor[(768, 1), float64] */;
  %143 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
  %144 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
  (%142, %143, %144)
}

def @func_7266() -> Tensor[(10, 2, 15), uint8] {
  %146 = fn () -> Tensor[(10, 2, 15), uint8] {
    %145 = @func_4936() /* ty=(Tensor[(10, 2, 15), uint8],) */;
    %145.0
  };
  %146() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_4160() -> Tensor[(10, 2, 15), uint8] {
  @func_3933() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_5343() -> (Tensor[(768), float32],) {
  %151 = fn () -> (Tensor[(768), float32],) {
    %147 = @func_4679() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */;
    %148 = %147.2;
    %149 = cast(%148, dtype="float32") /* ty=Tensor[(768), float32] */;
    %150 = log10(%149) /* ty=Tensor[(768), float32] */;
    (%150,)
  };
  %151() /* ty=(Tensor[(768), float32],) */
}

def @func_7595() -> Tensor[(10, 2, 15), float32] {
  %153 = fn () -> Tensor[(10, 2, 15), float32] {
    %152 = @func_6876() /* ty=(Tensor[(10, 2, 15), float32],) */;
    %152.0
  };
  %153() /* ty=Tensor[(10, 2, 15), float32] */
}

def @func_4801(%var_4799: float64) -> (Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16], float64, Tensor[(132), float64]) {
  @func_4798(%var_4799) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16], float64, Tensor[(132), float64]) */
}

def @func_5062() -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) {
  @func_5060() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) */
}

def @func_3754() -> Tensor[(10, 2, 15), uint8] {
  %154 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %154.0
}

def @func_7828() -> Tensor[(10, 2, 15), uint8] {
  @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_5568() -> Tensor[(768, 1), float64] {
  %156 = fn () -> Tensor[(768, 1), float64] {
    %155 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
    %155.0
  };
  %156() /* ty=Tensor[(768, 1), float64] */
}

def @func_7935() -> Tensor[(10, 2, 15), uint8] {
  @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_7830() -> Tensor[(10, 2, 15), uint8] {
  @func_7828() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_3162(%var_3160: Tensor[(7, 12, 2), float64], %var_3161: Tensor[(256, 2), int8]) -> (Tensor[(7, 12, 2), float64], Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(256, 2), int8]) {
  @func_3158(%var_3160, %var_3161) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(256, 2), int8]) */
}

def @func_8509() -> Tensor[(324), float32] {
  @func_7472() /* ty=Tensor[(324), float32] */
}

def @func_7391() -> Tensor[(16, 6), float32] {
  %157 = @func_5738() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(16, 6), float32], Tensor[(768, 4), float32]) */;
  %157.2
}

def @func_4205(%var_4203: Tensor[(324), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(324), float32], Tensor[(8, 8, 8), int8], Tensor[(128, 4), int8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) {
  @func_4202(%var_4203) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(324), float32], Tensor[(8, 8, 8), int8], Tensor[(128, 4), int8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */
}

def @func_4251(%var_4250: Tensor[(1, 324), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(1, 324), float32], Tensor[(10, 2, 15), uint8]) {
  %164 = fn (%var_4233: Tensor[(1, 324), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(1, 324), float32], Tensor[(10, 2, 15), uint8]) {
    %158 = cast(%var_4233, dtype="float32") /* ty=Tensor[(1, 324), float32] */;
    %159 = reshape(%158, newshape=[324]) /* ty=Tensor[(324), float32] */;
    %160 = @func_2412(%159) /* ty=(Tensor[(14, 2, 3), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) */;
    %161 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
    %162 = %160.4;
    %163 = @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */;
    (%161, %162, %var_4233, %163)
  };
  %164(%var_4250) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(1, 324), float32], Tensor[(10, 2, 15), uint8]) */
}

def @func_5738() -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(16, 6), float32], Tensor[(768, 4), float32]) {
  %165 = @func_5060() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) */;
  %166 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 6), float32] */, dtype="float32") /* ty=Tensor[(16, 6), float32] */;
  %167 = reshape(%166, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %168 = @func_4417(%167) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) */;
  %169 = @func_5060() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) */;
  %170 = %169.2;
  %171 = cast(%170, dtype="float32") /* ty=Tensor[(768, 1), float32] */;
  %172 = cast(meta[relay.Constant][15] /* ty=Tensor[(768, 4), float64] */, dtype="float32") /* ty=Tensor[(768, 4), float32] */;
  %173 = %165.0;
  %174 = %168.1;
  %175 = floor_mod(%171, %172) /* ty=Tensor[(768, 4), float32] */;
  (%173, %174, meta[relay.Constant][14] /* ty=Tensor[(16, 6), float32] */, %175)
}

def @func_7013(%var_7011: Tensor[(96), float32]) -> (Tensor[(10, 2, 15), uint64], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) {
  %176 = @func_6234() /* ty=(Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint64]) */;
  %177 = @func_6088() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32]) */;
  %178 = cast(%var_7011, dtype="float32") /* ty=Tensor[(96), float32] */;
  %179 = reshape(%178, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %180 = @func_47(%179) /* ty=(Tensor[(3, 16, 2), float32],) */;
  %181 = %176.1;
  %182 = %177.5;
  %183 = %180.0;
  (%181, %182, %183, %var_7011)
}

def @func_8120(%var_8119: Tensor[(768, 3), float64]) -> (Tensor[(768), float32], Tensor[(768, 3), bool], Tensor[(10, 2, 15), uint8], Tensor[(162, 2), float32]) {
  %203 = fn (%var_8087: Tensor[(768, 3), float64]) -> (Tensor[(768), float32], Tensor[(768, 3), bool], Tensor[(10, 2, 15), uint8], Tensor[(162, 2), float32]) {
    %184 = @func_5342() /* ty=(Tensor[(768), float32],) */;
    %185 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
    %186 = %185.0;
    %187 = cast(%186, dtype="int32") /* ty=Tensor[(768, 1), int32] */;
    %188 = cast(%var_8087, dtype="int32") /* ty=Tensor[(768, 3), int32] */;
    %189 = minimum(%187, %188) /* ty=Tensor[(768, 3), int32] */;
    %190 = cast(%189, dtype="float64") /* ty=Tensor[(768, 3), float64] */;
    %191 = cast(%186, dtype="float64") /* ty=Tensor[(768, 1), float64] */;
    %192 = divide(%190, %191) /* ty=Tensor[(768, 3), float64] */;
    %193 = cast(%var_8087, dtype="bool") /* ty=Tensor[(768, 3), bool] */;
    %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(2), int32] */;
    %195 = cast(%192, dtype="bool") /* ty=Tensor[(768, 3), bool] */;
    %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %197 = cast(meta[relay.Constant][16] /* ty=Tensor[(162, 2), float32] */, dtype="float32") /* ty=Tensor[(162, 2), float32] */;
    %198 = reshape(%197, newshape=[324]) /* ty=Tensor[(324), float32] */;
    %199 = @func_4351(%198) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(324), float32]) */;
    %200 = %184.0;
    %201 = less_equal(%195, %196) /* ty=Tensor[(768, 3), bool] */;
    %202 = %199.0;
    (%200, %201, %202, meta[relay.Constant][16] /* ty=Tensor[(162, 2), float32] */)
  };
  %203(%var_8119) /* ty=(Tensor[(768), float32], Tensor[(768, 3), bool], Tensor[(10, 2, 15), uint8], Tensor[(162, 2), float32]) */
}

def @func_7382(%var_7379: Tensor[(4, 16, 11), int32], %var_7380: Tensor[(96), float32], %var_7381: Tensor[(324), float32]) -> (Tensor[(4, 16, 11), int32], Tensor[(3, 16, 2), float32], Tensor[(96), float32], Tensor[(10, 2, 15), uint8], Tensor[(9, 2, 3), int16], Tensor[(1, 324), float32], Tensor[(324), float32]) {
  %221 = fn (%var_7330: Tensor[(4, 16, 11), int32], %var_7345: Tensor[(96), float32], %var_7366: Tensor[(324), float32]) -> (Tensor[(4, 16, 11), int32], Tensor[(3, 16, 2), float32], Tensor[(96), float32], Tensor[(10, 2, 15), uint8], Tensor[(9, 2, 3), int16], Tensor[(1, 324), float32], Tensor[(324), float32]) {
    %204 = cast(%var_7330, dtype="int32") /* ty=Tensor[(4, 16, 11), int32] */;
    %205 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(4, 16, 11), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %206 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 16, 11), int32] */, dtype="int32") /* ty=Tensor[(4, 16, 11), int32] */;
    %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %208 = cast(%var_7345, dtype="float32") /* ty=Tensor[(96), float32] */;
    %209 = reshape(%208, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
    %210 = @func_47(%209) /* ty=(Tensor[(3, 16, 2), float32],) */;
    %211 = @func_5060() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) */;
    %212 = @func_6234() /* ty=(Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint64]) */;
    %213 = cast(%var_7366, dtype="float32") /* ty=Tensor[(324), float32] */;
    %214 = reshape(%213, newshape=[1, 324]) /* ty=Tensor[(1, 324), float32] */;
    %215 = @func_4249(%214) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(1, 324), float32], Tensor[(10, 2, 15), uint8]) */;
    %216 = maximum(%206, %207) /* ty=Tensor[(4, 16, 11), int32] */;
    %217 = %210.0;
    %218 = %211.0;
    %219 = %212.0;
    %220 = %215.2;
    (%216, %217, %var_7345, %218, %219, %220, %var_7366)
  };
  %221(%var_7379, %var_7380, %var_7381) /* ty=(Tensor[(4, 16, 11), int32], Tensor[(3, 16, 2), float32], Tensor[(96), float32], Tensor[(10, 2, 15), uint8], Tensor[(9, 2, 3), int16], Tensor[(1, 324), float32], Tensor[(324), float32]) */
}

def @func_8842(%var_8840: Tensor[(270), float32], %var_8841: Tensor[(512), int8]) -> (Tensor[(768), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(512), int8]) {
  %230 = fn (%var_8833: Tensor[(270), float32], %var_8834: Tensor[(512), int8]) -> (Tensor[(768), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(512), int8]) {
    %222 = @func_8731() /* ty=(Tensor[(768), float32], Tensor[(768), float32], Tensor[(10, 2, 15), float32], Tensor[(168), float64], Tensor[(512), int8]) */;
    %223 = cast(%var_8833, dtype="float32") /* ty=Tensor[(270), float32] */;
    %224 = cast(%var_8834, dtype="int8") /* ty=Tensor[(512), int8] */;
    %225 = reshape(%223, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
    %226 = reshape(%224, newshape=[512]) /* ty=Tensor[(512), int8] */;
    %227 = @func_1923(%225, %226) /* ty=(Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(3, 16, 2), float32], Tensor[(16, 6), float32], Tensor[(9, 5, 6), float64]) */;
    %228 = %222.0;
    %229 = %227.4;
    (%228, %229, %var_8833, %var_8834)
  };
  %230(%var_8840, %var_8841) /* ty=(Tensor[(768), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(512), int8]) */
}

def @func_9981() -> Tensor[(10, 2, 15), uint8] {
  %231 = fn () -> Tensor[(10, 2, 15), uint8] {
    @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */
  };
  %231() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_7704(%var_7642: Tensor[(768, 11), float32], %var_7650: Tensor[(120), uint16], %var_7682: Tensor[(768, 11), uint8]) -> (Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), int8], Tensor[(120), uint16], Tensor[(768, 11), float64]) {
  %232 = @func_5019() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
  %233 = cast(%var_7650, dtype="uint16") /* ty=Tensor[(120), uint16] */;
  %234 = reshape(%233, newshape=[12, 5, 2]) /* ty=Tensor[(12, 5, 2), uint16] */;
  %235 = @func_7524(%234) /* ty=(Tensor[(12, 5, 2), int8],) */;
  %236 = @func_5160() /* ty=Tensor[(768, ?), bool] */;
  %237 = cast(%236, dtype="float32") /* ty=Tensor[(768, ?), float32] */;
  %238 = asin(%237) /* ty=Tensor[(768, ?), float32] */;
  %239 = cast(%238, dtype="float64") /* ty=Tensor[(768, ?), float64] */;
  %240 = cast(%var_7642, dtype="float64") /* ty=Tensor[(768, 11), float64] */;
  %241 = mod(%239, %240) /* ty=Tensor[(768, 11), float64] */;
  %242 = cast(%241, dtype="uint16") /* ty=Tensor[(768, 11), uint16] */;
  %243 = cast(%238, dtype="uint16") /* ty=Tensor[(768, ?), uint16] */;
  %244 = subtract(%242, %243) /* ty=Tensor[(768, 11), uint16] */;
  %245 = cast(meta[relay.Constant][18] /* ty=Tensor[(768, 11), uint16] */, dtype="uint8") /* ty=Tensor[(768, 11), uint8] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(2), int32] */;
  %247 = cast(%244, dtype="uint8") /* ty=Tensor[(768, 11), uint8] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %249 = bitwise_or(%247, %248) /* ty=Tensor[(768, 11), uint8] */;
  %250 = cast(%var_7682, dtype="bool") /* ty=Tensor[(768, 11), bool] */;
  %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(2), int32] */;
  %252 = cast(%249, dtype="bool") /* ty=Tensor[(768, 11), bool] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %254 = greater(%252, %253) /* ty=Tensor[(768, 11), bool] */;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(768, 11), float64] */;
  %256 = %232.0;
  %257 = %235.0;
  %258 = rsqrt(%255) /* ty=Tensor[(768, 11), float64] */;
  (%256, %257, %var_7650, %258)
}

def @func_1385(%var_1384: Tensor[(16, 4, 12), float32]) -> (Tensor[(16, 4, 12), float64], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(16, 4, 12), bool]) {
  %278 = fn (%var_1332: Tensor[(16, 4, 12), float32]) -> (Tensor[(16, 4, 12), float64], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(16, 4, 12), bool]) {
    %259 = cast(%var_1332, dtype="float32") /* ty=Tensor[(16, 4, 12), float32] */;
    %260 = sin(%259) /* ty=Tensor[(16, 4, 12), float32] */;
    %261 = cast(%var_1332, dtype="float64") /* ty=Tensor[(16, 4, 12), float64] */;
    %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
    %263 = cast(%260, dtype="float64") /* ty=Tensor[(16, 4, 12), float64] */;
    %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %265 = cast(meta[relay.Constant][19] /* ty=Tensor[(512), int8] */, dtype="int8") /* ty=Tensor[(512), int8] */;
    %266 = cast(meta[relay.Constant][19] /* ty=Tensor[(512), int8] */, dtype="int8") /* ty=Tensor[(512), int8] */;
    %267 = reshape(%265, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
    %268 = reshape(%266, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
    %269 = cast(%260, dtype="float32") /* ty=Tensor[(16, 4, 12), float32] */;
    %270 = sinh(%269) /* ty=Tensor[(16, 4, 12), float32] */;
    %271 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 4, 12), float32] */, dtype="bool") /* ty=Tensor[(16, 4, 12), bool] */;
    %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
    %273 = cast(%270, dtype="bool") /* ty=Tensor[(16, 4, 12), bool] */;
    %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %275 = add(%263, %264) /* ty=Tensor[(16, 4, 12), float64] */;
    %276 = @func_352(%267, %268) /* ty=Tensor[(8, 8, 8), int8] */;
    %277 = logical_and(%273, %274) /* ty=Tensor[(16, 4, 12), bool] */;
    (%275, %276, meta[relay.Constant][19] /* ty=Tensor[(512), int8] */, %277)
  };
  %278(%var_1384) /* ty=(Tensor[(16, 4, 12), float64], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(16, 4, 12), bool]) */
}

def @func_5278(%var_5277: Tensor[(512), int8]) -> (Tensor[(10, 2, 15), uint8], Tensor[(768, ?), bool], Tensor[(10, 2, 15), uint8], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(54, 6), float32], Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float32], Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) {
  %308 = fn (%var_5202: Tensor[(512), int8]) -> (Tensor[(10, 2, 15), uint8], Tensor[(768, ?), bool], Tensor[(10, 2, 15), uint8], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(54, 6), float32], Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float32], Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) {
    %279 = @func_5060() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) */;
    %280 = cast(%var_5202, dtype="int8") /* ty=Tensor[(512), int8] */;
    %281 = cast(%var_5202, dtype="int8") /* ty=Tensor[(512), int8] */;
    %282 = reshape(%280, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
    %283 = reshape(%281, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
    %284 = @func_4869() /* ty=(Tensor[(768, 1), float64], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
    %285 = cast(meta[relay.Constant][21] /* ty=Tensor[(54, 6), float32] */, dtype="float32") /* ty=Tensor[(54, 6), float32] */;
    %286 = reshape(%285, newshape=[324, 1]) /* ty=Tensor[(324, 1), float32] */;
    %287 = @func_3998(%286) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), uint8], Tensor[(8, 8, 8), int8], Tensor[(132, 12), float32], Tensor[(768), float32], Tensor[(10, 2, 15), float64], Tensor[(4, 9, 9), float32], Tensor[(324, 1), float32]) */;
    %288 = cast(meta[relay.Constant][21] /* ty=Tensor[(54, 6), float32] */, dtype="float32") /* ty=Tensor[(54, 6), float32] */;
    %289 = cast(meta[relay.Constant][21] /* ty=Tensor[(54, 6), float32] */, dtype="float32") /* ty=Tensor[(54, 6), float32] */;
    %290 = reshape(%288, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
    %291 = reshape(%289, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
    %292 = @func_1978(%290, %291) /* ty=(Tensor[(4, 9, 9), float32],) */;
    %293 = %292.0;
    %294 = cast(%293, dtype="float32") /* ty=Tensor[(4, 9, 9), float32] */;
    %295 = @func_5019() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
    %296 = @func_4936() /* ty=(Tensor[(10, 2, 15), uint8],) */;
    %297 = @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */;
    %298 = @func_5160() /* ty=Tensor[(768, ?), bool] */;
    %299 = %279.1;
    %300 = @func_352(%282, %283) /* ty=Tensor[(8, 8, 8), int8] */;
    %301 = %284.2;
    %302 = %287.6;
    %303 = atanh(%294) /* ty=Tensor[(4, 9, 9), float32] */;
    %304 = @func_5083() /* ty=Tensor[(10, 2, 15), float32] */;
    %305 = @func_3933() /* ty=Tensor[(10, 2, 15), uint8] */;
    %306 = %295.1;
    %307 = %296.0;
    (%297, %298, %299, %300, %var_5202, meta[relay.Constant][21] /* ty=Tensor[(54, 6), float32] */, %301, %302, %303, %304, %305, %306, %307)
  };
  %308(%var_5277) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(768, ?), bool], Tensor[(10, 2, 15), uint8], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(54, 6), float32], Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(4, 9, 9), float32], Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */
}

def @func_3933() -> Tensor[(10, 2, 15), uint8] {
  %309 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %309.0
}

def @func_5083() -> Tensor[(10, 2, 15), float32] {
  @func_4946() /* ty=Tensor[(10, 2, 15), float32] */
}

def @func_3935() -> Tensor[(10, 2, 15), uint8] {
  @func_3933() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_8216(%var_8214: float32, %var_8215: Tensor[(10, 10, 4), float32]) -> (Tensor[(10, 10, 4), float32], Tensor[(12, 5, 2), uint16], Tensor[(12, 5, 2), uint16]) {
  %315 = fn (%var_8187: float32, %var_8188: Tensor[(10, 10, 4), float32]) -> (Tensor[(10, 10, 4), float32], Tensor[(12, 5, 2), uint16], Tensor[(12, 5, 2), uint16]) {
    %310 = cast(%var_8187, dtype="float32") /* ty=float32 */;
    %311 = cast(%var_8188, dtype="float32") /* ty=Tensor[(10, 10, 4), float32] */;
    %312 = maximum(%310, %311) /* ty=Tensor[(10, 10, 4), float32] */;
    %313 = @func_7122() /* ty=Tensor[(12, 5, 2), uint16] */;
    %314 = @func_5782() /* ty=Tensor[(12, 5, 2), uint16] */;
    (%312, %313, %314)
  };
  %315(%var_8214, %var_8215) /* ty=(Tensor[(10, 10, 4), float32], Tensor[(12, 5, 2), uint16], Tensor[(12, 5, 2), uint16]) */
}

def @func_9386() -> (Tensor[(10, 2, 15), uint8],) {
  @func_9384() /* ty=(Tensor[(10, 2, 15), uint8],) */
}

def @func_9369() -> (Tensor[(16, 6), float32], Tensor[(768), float32]) {
  @func_9367() /* ty=(Tensor[(16, 6), float32], Tensor[(768), float32]) */
}

def @func_9823() -> Tensor[(10, 2, 15), float32] {
  %316 = @func_6876() /* ty=(Tensor[(10, 2, 15), float32],) */;
  %316.0
}

def @func_4000(%var_3999: Tensor[(324, 1), float32]) -> (Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), uint8], Tensor[(8, 8, 8), int8], Tensor[(132, 12), float32], Tensor[(768), float32], Tensor[(10, 2, 15), float64], Tensor[(4, 9, 9), float32], Tensor[(324, 1), float32]) {
  %339 = fn (%var_3992: Tensor[(324, 1), float32]) -> (Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), uint8], Tensor[(8, 8, 8), int8], Tensor[(132, 12), float32], Tensor[(768), float32], Tensor[(10, 2, 15), float64], Tensor[(4, 9, 9), float32], Tensor[(324, 1), float32]) {
    %317 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
    %318 = %317.0;
    %319 = cast(%318, dtype="float32") /* ty=Tensor[(10, 2, 15), float32] */;
    %320 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
    %321 = cast(meta[relay.Constant][22] /* ty=Tensor[(132, 12), float32] */, dtype="float32") /* ty=Tensor[(132, 12), float32] */;
    %322 = cast(meta[relay.Constant][23] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
    %323 = reshape(%321, newshape=[9, 16, 11]) /* ty=Tensor[(9, 16, 11), float32] */;
    %324 = reshape(%322, newshape=[768]) /* ty=Tensor[(768), float32] */;
    %325 = @func_1837(%323, %324) /* ty=(Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(9, 16, 11), float32], Tensor[(8, 8, 8), int8], Tensor[(64, 8), int8], Tensor[(8, 8, 8), int8], Tensor[(9, 16, 11), float32]) */;
    %326 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
    %327 = %326.0;
    %328 = cast(%327, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
    %329 = cast(%var_3992, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
    %330 = cast(%var_3992, dtype="float32") /* ty=Tensor[(324, 1), float32] */;
    %331 = reshape(%329, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
    %332 = reshape(%330, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
    %333 = @func_1978(%331, %332) /* ty=(Tensor[(4, 9, 9), float32],) */;
    %334 = erf(%319) /* ty=Tensor[(10, 2, 15), float32] */;
    %335 = %320.0;
    %336 = %325.3;
    %337 = sinh(%328) /* ty=Tensor[(10, 2, 15), float64] */;
    %338 = %333.0;
    (%334, %335, %336, meta[relay.Constant][22] /* ty=Tensor[(132, 12), float32] */, meta[relay.Constant][23] /* ty=Tensor[(768), float32] */, %337, %338, %var_3992)
  };
  %339(%var_3999) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), uint8], Tensor[(8, 8, 8), int8], Tensor[(132, 12), float32], Tensor[(768), float32], Tensor[(10, 2, 15), float64], Tensor[(4, 9, 9), float32], Tensor[(324, 1), float32]) */
}

def @func_4071(%var_4070: Tensor[(10, 2, 15), uint8]) -> Tensor[(10, 2, 15), uint64] {
  %346 = fn (%var_4064: Tensor[(10, 2, 15), uint8]) -> Tensor[(10, 2, 15), uint64] {
    %340 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
    %341 = %340.0;
    %342 = cast(%var_4064, dtype="uint64") /* ty=Tensor[(10, 2, 15), uint64] */;
    %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
    %344 = cast(%341, dtype="uint64") /* ty=Tensor[(10, 2, 15), uint64] */;
    %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    multiply(%344, %345) /* ty=Tensor[(10, 2, 15), uint64] */
  };
  %346(%var_4070) /* ty=Tensor[(10, 2, 15), uint64] */
}

def @func_7588(%var_7586: Tensor[(13, 16, 4), float32]) -> Tensor[(13, 16, 4), float32] {
  @func_7585(%var_7586) /* ty=Tensor[(13, 16, 4), float32] */
}

def @func_5553() -> (Tensor[(9, ?, 8), bool],) {
  %354 = fn () -> (Tensor[(9, ?, 8), bool],) {
    %347 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 1, 8), float32] */, dtype="float32") /* ty=Tensor[(9, 1, 8), float32] */;
    %348 = acosh(%347) /* ty=Tensor[(9, 1, 8), float32] */;
    %349 = cast(%348, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %350 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(9, 1, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %351 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 1, 8), float32] */, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %353 = logical_or(%351, %352) /* ty=Tensor[(9, ?, 8), bool] */;
    (%353,)
  };
  %354() /* ty=(Tensor[(9, ?, 8), bool],) */
}

def @func_4202(%var_4175: Tensor[(324), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(324), float32], Tensor[(8, 8, 8), int8], Tensor[(128, 4), int8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) {
  %355 = cast(%var_4175, dtype="float32") /* ty=Tensor[(324), float32] */;
  %356 = reshape(%355, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %357 = @func_2412(%356) /* ty=(Tensor[(14, 2, 3), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) */;
  %358 = cast(meta[relay.Constant][25] /* ty=Tensor[(128, 4), int8] */, dtype="int8") /* ty=Tensor[(128, 4), int8] */;
  %359 = cast(meta[relay.Constant][25] /* ty=Tensor[(128, 4), int8] */, dtype="int8") /* ty=Tensor[(128, 4), int8] */;
  %360 = reshape(%358, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %361 = reshape(%359, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %362 = @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */;
  %363 = %357.4;
  %364 = @func_352(%360, %361) /* ty=Tensor[(8, 8, 8), int8] */;
  %365 = @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */;
  %366 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
  (%362, %363, %var_4175, %364, meta[relay.Constant][25] /* ty=Tensor[(128, 4), int8] */, %365, %366)
}

def @func_4353(%var_4352: Tensor[(324), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(324), float32]) {
  %372 = fn (%var_4342: Tensor[(324), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(324), float32]) {
    %367 = cast(%var_4342, dtype="float32") /* ty=Tensor[(324), float32] */;
    %368 = reshape(%367, newshape=[1, 324]) /* ty=Tensor[(1, 324), float32] */;
    %369 = @func_4249(%368) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(1, 324), float32], Tensor[(10, 2, 15), uint8]) */;
    %370 = @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */;
    %371 = %369.0;
    (%370, %371, %var_4342)
  };
  %372(%var_4352) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(324), float32]) */
}

def @func_8001() -> (Tensor[(10, 2, 15), uint64],) {
  @func_7999() /* ty=(Tensor[(10, 2, 15), uint64],) */
}

def @func_2474(%var_2472: uint16) -> (Tensor[(1, 9), uint16],) {
  @func_2471(%var_2472) /* ty=(Tensor[(1, 9), uint16],) */
}

def @func_3916(%var_3914: float64, %var_3915: Tensor[(1, 11, 12), float64]) -> (Tensor[(1, 11, 12), float64], Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16]) {
  %381 = fn (%var_3894: float64, %var_3895: Tensor[(1, 11, 12), float64]) -> (Tensor[(1, 11, 12), float64], Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16]) {
    %373 = cast(%var_3894, dtype="float64") /* ty=float64 */;
    %374 = cast(%var_3895, dtype="float64") /* ty=Tensor[(1, 11, 12), float64] */;
    %375 = cast(%var_3894, dtype="uint16") /* ty=uint16 */;
    %376 = reshape(%375, newshape=[]) /* ty=uint16 */;
    %377 = @func_2471(%376) /* ty=(Tensor[(1, 9), uint16],) */;
    %378 = add(%373, %374) /* ty=Tensor[(1, 11, 12), float64] */;
    %379 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
    %380 = %377.0;
    (%378, %379, %380)
  };
  %381(%var_3914, %var_3915) /* ty=(Tensor[(1, 11, 12), float64], Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16]) */
}

def @func_9367() -> (Tensor[(16, 6), float32], Tensor[(768), float32]) {
  %382 = @func_5342() /* ty=(Tensor[(768), float32],) */;
  %383 = @func_7391() /* ty=Tensor[(16, 6), float32] */;
  %384 = %382.0;
  (%383, %384)
}

def @func_7016(%var_7014: Tensor[(96), float32]) -> (Tensor[(10, 2, 15), uint64], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) {
  @func_7013(%var_7014) /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) */
}

def @func_3809() -> Tensor[(10, 2, 15), uint8] {
  %385 = fn () -> Tensor[(10, 2, 15), uint8] {
    @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */
  };
  %385() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_5849() -> (Tensor[(10, 2, 15), uint64],) {
  %386 = @func_4757() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float32], Tensor[(10, 2, 15), float64]) */;
  %387 = %386.0;
  (%387,)
}

def @func_4947() -> Tensor[(10, 2, 15), float32] {
  %390 = fn () -> Tensor[(10, 2, 15), float32] {
    %388 = @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */;
    %389 = cast(%388, dtype="float32") /* ty=Tensor[(10, 2, 15), float32] */;
    sin(%389) /* ty=Tensor[(10, 2, 15), float32] */
  };
  %390() /* ty=Tensor[(10, 2, 15), float32] */
}

def @func_4307(%var_4305: Tensor[(768), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(11, 5, 12), uint8], Tensor[(768), float32], Tensor[(10, 2, 15), uint8]) {
  @func_4304(%var_4305) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(11, 5, 12), uint8], Tensor[(768), float32], Tensor[(10, 2, 15), uint8]) */
}

def @func_6613(%var_6611: int64, %var_6612: Tensor[(2, 11, 10), int64]) -> (Tensor[(2, 11, 10), bool], Tensor[(2, 11, 10), float32]) {
  @func_6609(%var_6611, %var_6612) /* ty=(Tensor[(2, 11, 10), bool], Tensor[(2, 11, 10), float32]) */
}

def @func_7740(%var_7738: Tensor[(6, 9, 4), float32]) -> (Tensor[(6, 9, 4), float32],) {
  @func_7737(%var_7738) /* ty=(Tensor[(6, 9, 4), float32],) */
}

def @func_3863(%var_3861: Tensor[(9, 3, 3), float64], %var_3862: Tensor[(26, 4), bool]) -> (Tensor[(9, 3, 3), float64], Tensor[(1, 9), uint16], Tensor[(26, 4), bool]) {
  %397 = fn (%var_3847: Tensor[(9, 3, 3), float64], %var_3856: Tensor[(26, 4), bool]) -> (Tensor[(9, 3, 3), float64], Tensor[(1, 9), uint16], Tensor[(26, 4), bool]) {
    %391 = cast(%var_3847, dtype="float64") /* ty=Tensor[(9, 3, 3), float64] */;
    %392 = cast(%var_3856, dtype="bool") /* ty=Tensor[(26, 4), bool] */;
    %393 = reshape(%392, newshape=[8, 13, 1]) /* ty=Tensor[(8, 13, 1), bool] */;
    %394 = @func_3729(%393) /* ty=(Tensor[(8, 13, 13), bool], Tensor[(1, 9), uint16], uint16, Tensor[(8, 13, 13), float64]) */;
    %395 = sigmoid(%391) /* ty=Tensor[(9, 3, 3), float64] */;
    %396 = %394.1;
    (%395, %396, %var_3856)
  };
  %397(%var_3861, %var_3862) /* ty=(Tensor[(9, 3, 3), float64], Tensor[(1, 9), uint16], Tensor[(26, 4), bool]) */
}

def @func_6743() -> (Tensor[(768, 1), float64],) {
  @func_6741() /* ty=(Tensor[(768, 1), float64],) */
}

def @func_9310(%var_9308: Tensor[(6, 4, 1), float32], %var_9309: Tensor[(3136), float64]) -> (Tensor[(6, 4, ?), int32], Tensor[(14, 16, 14), float64], Tensor[(3136), float64]) {
  @func_9306(%var_9308, %var_9309) /* ty=(Tensor[(6, 4, ?), int32], Tensor[(14, 16, 14), float64], Tensor[(3136), float64]) */
}

def @func_5161() -> Tensor[(768, ?), bool] {
  %406 = fn () -> Tensor[(768, ?), bool] {
    %398 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
    %399 = %398.0;
    %400 = cast(%399, dtype="float64") /* ty=Tensor[(768, 1), float64] */;
    %401 = acosh(%400) /* ty=Tensor[(768, 1), float64] */;
    %402 = cast(%399, dtype="bool") /* ty=Tensor[(768, 1), bool] */;
    %403 = shape_of(%401, dtype="int32") /* ty=Tensor[(2), int32] */;
    %404 = cast(%401, dtype="bool") /* ty=Tensor[(768, 1), bool] */;
    %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    equal(%404, %405) /* ty=Tensor[(768, ?), bool] */
  };
  %406() /* ty=Tensor[(768, ?), bool] */
}

def @func_8296() -> (Tensor[(10, 2, 15), float32], Tensor[(324), float32]) {
  %409 = fn () -> (Tensor[(10, 2, 15), float32], Tensor[(324), float32]) {
    %407 = @func_5083() /* ty=Tensor[(10, 2, 15), float32] */;
    %408 = @func_7286() /* ty=Tensor[(324), float32] */;
    (%407, %408)
  };
  %409() /* ty=(Tensor[(10, 2, 15), float32], Tensor[(324), float32]) */
}

def @func_9708(%var_9705: Tensor[(10, 13, 9), int8], %var_9706: Tensor[(10, 13, 9), int8], %var_9707: Tensor[(10, 13, 9), int8]) -> (Tensor[(10, 13, 9), bool], Tensor[(324), float32], Tensor[(10, 13, 9), float64]) {
  %423 = fn (%var_9657: Tensor[(10, 13, 9), int8], %var_9658: Tensor[(10, 13, 9), int8], %var_9678: Tensor[(10, 13, 9), int8]) -> (Tensor[(10, 13, 9), bool], Tensor[(324), float32], Tensor[(10, 13, 9), float64]) {
    %410 = cast(%var_9658, dtype="bool") /* ty=Tensor[(10, 13, 9), bool] */;
    %411 = shape_of(%var_9657, dtype="int32") /* ty=Tensor[(3), int32] */;
    %412 = cast(%var_9657, dtype="bool") /* ty=Tensor[(10, 13, 9), bool] */;
    %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %414 = cast(%var_9678, dtype="uint8") /* ty=Tensor[(10, 13, 9), uint8] */;
    %415 = shape_of(%var_9657, dtype="int32") /* ty=Tensor[(3), int32] */;
    %416 = cast(%var_9657, dtype="uint8") /* ty=Tensor[(10, 13, 9), uint8] */;
    %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %418 = right_shift(%416, %417) /* ty=Tensor[(10, 13, 9), uint8] */;
    %419 = cast(%418, dtype="float64") /* ty=Tensor[(10, 13, 9), float64] */;
    %420 = less_equal(%412, %413) /* ty=Tensor[(10, 13, 9), bool] */;
    %421 = @func_6661() /* ty=Tensor[(324), float32] */;
    %422 = sigmoid(%419) /* ty=Tensor[(10, 13, 9), float64] */;
    (%420, %421, %422)
  };
  %423(%var_9705, %var_9706, %var_9707) /* ty=(Tensor[(10, 13, 9), bool], Tensor[(324), float32], Tensor[(10, 13, 9), float64]) */
}

def @func_1923(%var_1887: Tensor[(9, 5, 6), float32], %var_1898: Tensor[(512), int8]) -> (Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(3, 16, 2), float32], Tensor[(16, 6), float32], Tensor[(9, 5, 6), float64]) {
  %424 = cast(%var_1898, dtype="int8") /* ty=Tensor[(512), int8] */;
  %425 = cast(%var_1898, dtype="int8") /* ty=Tensor[(512), int8] */;
  %426 = reshape(%424, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %427 = reshape(%425, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
  %428 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 6), float32] */, dtype="float32") /* ty=Tensor[(16, 6), float32] */;
  %429 = reshape(%428, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %430 = @func_47(%429) /* ty=(Tensor[(3, 16, 2), float32],) */;
  %431 = cast(%var_1887, dtype="float32") /* ty=Tensor[(9, 5, 6), float32] */;
  %432 = atan(%431) /* ty=Tensor[(9, 5, 6), float32] */;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(9, 5, 6), float64] */;
  %434 = @func_352(%426, %427) /* ty=Tensor[(8, 8, 8), int8] */;
  %435 = %430.0;
  %436 = exp(%433) /* ty=Tensor[(9, 5, 6), float64] */;
  (%434, %var_1898, %435, meta[relay.Constant][26] /* ty=Tensor[(16, 6), float32] */, %436)
}

def @func_9384() -> (Tensor[(10, 2, 15), uint8],) {
  %437 = @func_6437() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %438 = %437.0;
  (%438,)
}

def @func_5366(%var_5364: Tensor[(768), float32]) -> (Tensor[(10, 2, 15), float32], Tensor[(768), float32], Tensor[(768), float32]) {
  @func_5363(%var_5364) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(768), float32], Tensor[(768), float32]) */
}

def @func_6236() -> (Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint64]) {
  @func_6234() /* ty=(Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint64]) */
}

def @func_7957() -> (Tensor[(10, 2, 15), uint8],) {
  @func_7955() /* ty=(Tensor[(10, 2, 15), uint8],) */
}

def @func_3732(%var_3730: Tensor[(8, 13, 1), bool]) -> (Tensor[(8, 13, 13), bool], Tensor[(1, 9), uint16], uint16, Tensor[(8, 13, 13), float64]) {
  @func_3729(%var_3730) /* ty=(Tensor[(8, 13, 13), bool], Tensor[(1, 9), uint16], uint16, Tensor[(8, 13, 13), float64]) */
}

def @func_4988() -> (Tensor[(768, 1), float64],) {
  %441 = fn () -> (Tensor[(768, 1), float64],) {
    %439 = @func_4869() /* ty=(Tensor[(768, 1), float64], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
    %440 = %439.0;
    (%440,)
  };
  %441() /* ty=(Tensor[(768, 1), float64],) */
}

def @func_4871() -> (Tensor[(768, 1), float64], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) {
  @func_4869() /* ty=(Tensor[(768, 1), float64], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */
}

def @func_5060() -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) {
  %442 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %443 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
  %444 = %442.0;
  %445 = @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */;
  %446 = %443.0;
  (%444, %445, %446)
}

def @func_8634() -> (Tensor[(768), float32], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float32]) {
  @func_8632() /* ty=(Tensor[(768), float32], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float32]) */
}

def @func_8511() -> Tensor[(324), float32] {
  @func_8509() /* ty=Tensor[(324), float32] */
}

def @func_8180() -> (Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), bool]) {
  @func_8178() /* ty=(Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), bool]) */
}

def @func_4417(%var_4400: Tensor[(96), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) {
  %447 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %448 = %447.0;
  %449 = cast(%448, dtype="uint8") /* ty=Tensor[(10, 2, 15), uint8] */;
  %450 = reshape(%449, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), uint8] */;
  %451 = cast(%var_4400, dtype="float32") /* ty=Tensor[(96), float32] */;
  %452 = reshape(%451, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %453 = @func_47(%452) /* ty=(Tensor[(3, 16, 2), float32],) */;
  %454 = @func_4069(%450) /* ty=Tensor[(10, 2, 15), uint64] */;
  %455 = %453.0;
  (%448, %454, %455, %var_4400)
}

def @func_5678() -> (Tensor[(10, 2, 15), float64],) {
  @func_5676() /* ty=(Tensor[(10, 2, 15), float64],) */
}

def @func_7585(%var_7579: Tensor[(13, 16, 4), float32]) -> Tensor[(13, 16, 4), float32] {
  %456 = cast(%var_7579, dtype="float32") /* ty=Tensor[(13, 16, 4), float32] */;
  cos(%456) /* ty=Tensor[(13, 16, 4), float32] */
}

def @func_9225(%var_9219: Tensor[(14, 16, 14), float64]) -> Tensor[(14, 16, 14), float64] {
  %457 = cast(%var_9219, dtype="float64") /* ty=Tensor[(14, 16, 14), float64] */;
  cosh(%457) /* ty=Tensor[(14, 16, 14), float64] */
}

def @func_7870() -> (Tensor[(1, 300), uint8], Tensor[(4, 9, 9), bool]) {
  %458 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 300), uint8] */, dtype="uint8") /* ty=Tensor[(1, 300), uint8] */;
  %459 = @func_6661() /* ty=Tensor[(324), float32] */;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(324), float32] */;
  %461 = reshape(%458, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), uint8] */;
  %462 = reshape(%460, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %463 = @func_4544(%461, %462) /* ty=(Tensor[(10, 2, 15), bool], Tensor[(10, 2, 15), uint64], Tensor[(4, 9, 9), float32], Tensor[(324), float32]) */;
  %464 = %463.2;
  %465 = cast(%459, dtype="bool") /* ty=Tensor[(324), bool] */;
  %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%464, dtype="bool") /* ty=Tensor[(4, 9, 9), bool] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %469 = less_equal(%467, %468) /* ty=Tensor[(4, 9, 9), bool] */;
  (meta[relay.Constant][27] /* ty=Tensor[(1, 300), uint8] */, %469)
}

def @func_4548(%var_4546: Tensor[(10, 2, 15), uint8], %var_4547: Tensor[(324), float32]) -> (Tensor[(10, 2, 15), bool], Tensor[(10, 2, 15), uint64], Tensor[(4, 9, 9), float32], Tensor[(324), float32]) {
  @func_4544(%var_4546, %var_4547) /* ty=(Tensor[(10, 2, 15), bool], Tensor[(10, 2, 15), uint64], Tensor[(4, 9, 9), float32], Tensor[(324), float32]) */
}

def @func_1981(%var_1979: Tensor[(4, 9, 9), float32], %var_1980: Tensor[(4, 9, 9), float32]) -> (Tensor[(4, 9, 9), float32],) {
  %475 = fn (%var_1970: Tensor[(4, 9, 9), float32], %var_1971: Tensor[(4, 9, 9), float32]) -> (Tensor[(4, 9, 9), float32],) {
    %470 = cast(%var_1971, dtype="float32") /* ty=Tensor[(4, 9, 9), float32] */;
    %471 = shape_of(%var_1970, dtype="int32") /* ty=Tensor[(3), int32] */;
    %472 = cast(%var_1970, dtype="float32") /* ty=Tensor[(4, 9, 9), float32] */;
    %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %474 = subtract(%472, %473) /* ty=Tensor[(4, 9, 9), float32] */;
    (%474,)
  };
  %475(%var_1979, %var_1980) /* ty=(Tensor[(4, 9, 9), float32],) */
}

def @func_6877() -> (Tensor[(10, 2, 15), float32],) {
  %477 = fn () -> (Tensor[(10, 2, 15), float32],) {
    %476 = @func_5083() /* ty=Tensor[(10, 2, 15), float32] */;
    (%476,)
  };
  %477() /* ty=(Tensor[(10, 2, 15), float32],) */
}

def @func_5021() -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) {
  @func_5019() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */
}

def @func_7122() -> Tensor[(12, 5, 2), uint16] {
  @func_5782() /* ty=Tensor[(12, 5, 2), uint16] */
}

def @func_2471(%var_2464: uint16) -> (Tensor[(1, 9), uint16],) {
  %478 = cast(%var_2464, dtype="uint16") /* ty=uint16 */;
  %479 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 9), uint16] */, dtype="uint16") /* ty=Tensor[(1, 9), uint16] */;
  %480 = logical_xor(%478, %479) /* ty=Tensor[(1, 9), uint16] */;
  (%480,)
}

def @func_7983(%var_7981: Tensor[(10, 2, 15), float32]) -> (Tensor[(10, 2, 15), bool],) {
  @func_7980(%var_7981) /* ty=(Tensor[(10, 2, 15), bool],) */
}

def @func_8178() -> (Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), bool]) {
  %481 = @func_6876() /* ty=(Tensor[(10, 2, 15), float32],) */;
  %482 = %481.0;
  %483 = cast(%482, dtype="float32") /* ty=Tensor[(10, 2, 15), float32] */;
  %484 = reshape(%483, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float32] */;
  %485 = @func_7980(%484) /* ty=(Tensor[(10, 2, 15), bool],) */;
  %486 = %485.0;
  (%482, %486)
}

def @func_9480() -> (Tensor[(16, 6), float32],) {
  %489 = fn () -> (Tensor[(16, 6), float32],) {
    %487 = @func_9367() /* ty=(Tensor[(16, 6), float32], Tensor[(768), float32]) */;
    %488 = %487.0;
    (%488,)
  };
  %489() /* ty=(Tensor[(16, 6), float32],) */
}

def @func_7872() -> (Tensor[(1, 300), uint8], Tensor[(4, 9, 9), bool]) {
  @func_7870() /* ty=(Tensor[(1, 300), uint8], Tensor[(4, 9, 9), bool]) */
}

def @func_4937() -> (Tensor[(10, 2, 15), uint8],) {
  %492 = fn () -> (Tensor[(10, 2, 15), uint8],) {
    %490 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
    %491 = %490.0;
    (%491,)
  };
  %492() /* ty=(Tensor[(10, 2, 15), uint8],) */
}

def @func_7737(%var_7734: Tensor[(6, 9, 4), float32]) -> (Tensor[(6, 9, 4), float32],) {
  %493 = cast(%var_7734, dtype="float32") /* ty=Tensor[(6, 9, 4), float32] */;
  %494 = tan(%493) /* ty=Tensor[(6, 9, 4), float32] */;
  (%494,)
}

def @func_7999() -> (Tensor[(10, 2, 15), uint64],) {
  %495 = @func_5738() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(16, 6), float32], Tensor[(768, 4), float32]) */;
  %496 = %495.1;
  (%496,)
}

def @func_2415(%var_2413: Tensor[(324), float32]) -> (Tensor[(14, 2, 3), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) {
  @func_2412(%var_2413) /* ty=(Tensor[(14, 2, 3), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) */
}

def @func_6175() -> (Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(16, 4, 12), float64]) {
  %497 = @func_5060() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) */;
  %498 = cast(meta[relay.Constant][29] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %499 = cast(meta[relay.Constant][29] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %500 = reshape(%498, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %501 = reshape(%499, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %502 = @func_1978(%500, %501) /* ty=(Tensor[(4, 9, 9), float32],) */;
  %503 = @func_4679() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */;
  %504 = %497.0;
  %505 = %502.0;
  %506 = %503.1;
  (%504, %505, meta[relay.Constant][29] /* ty=Tensor[(324), float32] */, %506)
}

def @func_8428(%var_8427: Tensor[(324), float32]) -> (Tensor[(16, 6), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float32], Tensor[(8, 8, 8), int8], Tensor[(324), float32], Tensor[(1, 300), uint8]) {
  %518 = fn (%var_8368: Tensor[(324), float32]) -> (Tensor[(16, 6), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float32], Tensor[(8, 8, 8), int8], Tensor[(324), float32], Tensor[(1, 300), uint8]) {
    %507 = cast(meta[relay.Constant][30] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
    %508 = reshape(%507, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float32] */;
    %509 = @func_7980(%508) /* ty=(Tensor[(10, 2, 15), bool],) */;
    %510 = cast(%var_8368, dtype="float32") /* ty=Tensor[(324), float32] */;
    %511 = reshape(%510, newshape=[324]) /* ty=Tensor[(324), float32] */;
    %512 = @func_4202(%511) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(324), float32], Tensor[(8, 8, 8), int8], Tensor[(128, 4), int8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
    %513 = @func_7870() /* ty=(Tensor[(1, 300), uint8], Tensor[(4, 9, 9), bool]) */;
    %514 = @func_7391() /* ty=Tensor[(16, 6), float32] */;
    %515 = %509.0;
    %516 = %512.3;
    %517 = %513.0;
    (%514, %515, meta[relay.Constant][30] /* ty=Tensor[(300), float32] */, %516, %var_8368, %517)
  };
  %518(%var_8427) /* ty=(Tensor[(16, 6), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float32], Tensor[(8, 8, 8), int8], Tensor[(324), float32], Tensor[(1, 300), uint8]) */
}

def @func_9147() -> (Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float32]) {
  @func_9145() /* ty=(Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float32]) */
}

def @func_9825() -> Tensor[(10, 2, 15), float32] {
  @func_9823() /* ty=Tensor[(10, 2, 15), float32] */
}

def @func_9756(%var_9754: Tensor[(704), int32], %var_9755: Tensor[(324), float32]) -> (Tensor[(768, 1), float64], Tensor[(4, 16, 11), int32], Tensor[(704), int32], Tensor[(96), float32], Tensor[(324), float32]) {
  @func_9752(%var_9754, %var_9755) /* ty=(Tensor[(768, 1), float64], Tensor[(4, 16, 11), int32], Tensor[(704), int32], Tensor[(96), float32], Tensor[(324), float32]) */
}

def @func_7287() -> Tensor[(324), float32] {
  %519 = fn () -> Tensor[(324), float32] {
    @func_6661() /* ty=Tensor[(324), float32] */
  };
  %519() /* ty=Tensor[(324), float32] */
}

def @func_6437() -> (Tensor[(10, 2, 15), uint8],) {
  %520 = @func_4936() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %521 = %520.0;
  (%521,)
}

def @func_5085() -> Tensor[(10, 2, 15), float32] {
  @func_5083() /* ty=Tensor[(10, 2, 15), float32] */
}

def @func_356(%var_354: Tensor[(8, 8, 8), int8], %var_355: Tensor[(8, 8, 8), int8]) -> Tensor[(8, 8, 8), int8] {
  @func_352(%var_354, %var_355) /* ty=Tensor[(8, 8, 8), int8] */
}

def @func_8700(%var_8698: Tensor[(1, 4, 12), float64]) -> (Tensor[(?, 4, 12), float64], Tensor[(1, 4, 12), float64]) {
  @func_8697(%var_8698) /* ty=(Tensor[(?, 4, 12), float64], Tensor[(1, 4, 12), float64]) */
}

def @func_5019() -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) {
  %522 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %523 = %522.0;
  %524 = @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */;
  (%523, %524)
}

def @func_7324(%var_7321: Tensor[(9, 13, 7), float32], %var_7322: Tensor[(9, 13, 7), float32], %var_7323: Tensor[(3, 56), float64]) -> (Tensor[(9, 13, 7), float32], Tensor[(9, 5, 6), float64], Tensor[(3, 56), float64], Tensor[(512), int8]) {
  @func_7319(%var_7321, %var_7322, %var_7323) /* ty=(Tensor[(9, 13, 7), float32], Tensor[(9, 5, 6), float64], Tensor[(3, 56), float64], Tensor[(512), int8]) */
}

def @func_9228(%var_9226: Tensor[(14, 16, 14), float64]) -> Tensor[(14, 16, 14), float64] {
  @func_9225(%var_9226) /* ty=Tensor[(14, 16, 14), float64] */
}

def @func_6234() -> (Tensor[(9, 2, 3), int16], Tensor[(10, 2, 15), uint64]) {
  %525 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(9, 2, 3), float64] */;
  %526 = rsqrt(%525) /* ty=Tensor[(9, 2, 3), float64] */;
  %527 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 2, 3), float64] */, dtype="int16") /* ty=Tensor[(9, 2, 3), int16] */;
  %528 = shape_of(%526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(%526, dtype="int16") /* ty=Tensor[(9, 2, 3), int16] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %531 = @func_5738() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(16, 6), float32], Tensor[(768, 4), float32]) */;
  %532 = add(%529, %530) /* ty=Tensor[(9, 2, 3), int16] */;
  %533 = %531.1;
  (%532, %533)
}

def @func_9612(%var_9602: Tensor[(768, 7), float64]) -> (Tensor[(4, 9, 9), float32], Tensor[(10, 2, 15), uint8], Tensor[(768, 7), int32]) {
  %534 = @func_6088() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32]) */;
  %535 = @func_4679() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */;
  %536 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
  %537 = %536.0;
  %538 = cast(%537, dtype="int32") /* ty=Tensor[(768, 1), int32] */;
  %539 = cast(%var_9602, dtype="int32") /* ty=Tensor[(768, 7), int32] */;
  %540 = %534.4;
  %541 = %535.0;
  %542 = maximum(%538, %539) /* ty=Tensor[(768, 7), int32] */;
  (%540, %541, %542)
}

def @func_9341(%var_9339: Tensor[(5, 12, 8), float32]) -> Tensor[(5, 12, 8), float32] {
  @func_9338(%var_9339) /* ty=Tensor[(5, 12, 8), float32] */
}

def @func_7526(%var_7525: Tensor[(12, 5, 2), uint16]) -> (Tensor[(12, 5, 2), int8],) {
  %549 = fn (%var_7516: Tensor[(12, 5, 2), uint16]) -> (Tensor[(12, 5, 2), int8],) {
    %543 = @func_7122() /* ty=Tensor[(12, 5, 2), uint16] */;
    %544 = cast(%var_7516, dtype="int8") /* ty=Tensor[(12, 5, 2), int8] */;
    %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(%543, dtype="int8") /* ty=Tensor[(12, 5, 2), int8] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %548 = left_shift(%546, %547) /* ty=Tensor[(12, 5, 2), int8] */;
    (%548,)
  };
  %549(%var_7525) /* ty=(Tensor[(12, 5, 2), int8],) */
}

def @func_4420(%var_4418: Tensor[(96), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) {
  @func_4417(%var_4418) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) */
}

def @func_9946() -> (Tensor[(10, 2, 15), uint64], Tensor[(324), float32], Tensor[(324), float32]) {
  %554 = fn () -> (Tensor[(10, 2, 15), uint64], Tensor[(324), float32], Tensor[(324), float32]) {
    %550 = @func_7999() /* ty=(Tensor[(10, 2, 15), uint64],) */;
    %551 = %550.0;
    %552 = @func_7286() /* ty=Tensor[(324), float32] */;
    %553 = @func_8509() /* ty=Tensor[(324), float32] */;
    (%551, %552, %553)
  };
  %554() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(324), float32], Tensor[(324), float32]) */
}

def @func_8235() -> (Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), bool]) {
  %559 = fn () -> (Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), bool]) {
    %555 = @func_6175() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(16, 4, 12), float64]) */;
    %556 = @func_7870() /* ty=(Tensor[(1, 300), uint8], Tensor[(4, 9, 9), bool]) */;
    %557 = %555.0;
    %558 = %556.1;
    (%557, %558)
  };
  %559() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), bool]) */
}

def @func_8262(%var_8261: float64) -> (Tensor[(10, 2, 15), uint8], float64, float64, Tensor[(768, 1), float64], Tensor[(10, 2, 15), bool]) {
  %570 = fn (%var_8250: float64) -> (Tensor[(10, 2, 15), uint8], float64, float64, Tensor[(768, 1), float64], Tensor[(10, 2, 15), bool]) {
    %560 = cast(%var_8250, dtype="float64") /* ty=float64 */;
    %561 = reshape(%560, newshape=[]) /* ty=float64 */;
    %562 = @func_4798(%561) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16], float64, Tensor[(132), float64]) */;
    %563 = @func_7485() /* ty=Tensor[(10, 2, 15), uint8] */;
    %564 = cast(%563, dtype="float32") /* ty=Tensor[(10, 2, 15), float32] */;
    %565 = reshape(%564, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float32] */;
    %566 = @func_7980(%565) /* ty=(Tensor[(10, 2, 15), bool],) */;
    %567 = %562.2;
    %568 = @func_5567() /* ty=Tensor[(768, 1), float64] */;
    %569 = %566.0;
    (%563, %567, %var_8250, %568, %569)
  };
  %570(%var_8261) /* ty=(Tensor[(10, 2, 15), uint8], float64, float64, Tensor[(768, 1), float64], Tensor[(10, 2, 15), bool]) */
}

def @func_5676() -> (Tensor[(10, 2, 15), float64],) {
  %571 = @func_3933() /* ty=Tensor[(10, 2, 15), uint8] */;
  %572 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 2, 15), uint8] */, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%571, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %576 = power(%574, %575) /* ty=Tensor[(10, 2, 15), float64] */;
  (%576,)
}

def @func_6849() -> (Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768, 1), float64]) {
  %585 = fn () -> (Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768, 1), float64]) {
    %577 = @func_5060() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float64]) */;
    %578 = @func_6175() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(16, 4, 12), float64]) */;
    %579 = @func_6741() /* ty=(Tensor[(768, 1), float64],) */;
    %580 = %579.0;
    %581 = cast(%580, dtype="float64") /* ty=Tensor[(768, 1), float64] */;
    %582 = %577.0;
    %583 = %578.3;
    %584 = log10(%581) /* ty=Tensor[(768, 1), float64] */;
    (%582, %583, %584)
  };
  %585() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768, 1), float64]) */
}

def @func_8697(%var_8670: Tensor[(1, 4, 12), float64]) -> (Tensor[(?, 4, 12), float64], Tensor[(1, 4, 12), float64]) {
  %586 = cast(%var_8670, dtype="float64") /* ty=Tensor[(1, 4, 12), float64] */;
  %587 = acosh(%586) /* ty=Tensor[(1, 4, 12), float64] */;
  %588 = cast(%var_8670, dtype="float64") /* ty=Tensor[(1, 4, 12), float64] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%587, dtype="float64") /* ty=Tensor[(1, 4, 12), float64] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %592 = cast(%587, dtype="float64") /* ty=Tensor[(1, 4, 12), float64] */;
  %593 = floor_mod(%590, %591) /* ty=Tensor[(?, 4, 12), float64] */;
  %594 = sinh(%592) /* ty=Tensor[(1, 4, 12), float64] */;
  (%593, %594)
}

def @func_8525() -> (Tensor[(10, 2, 15), uint8],) {
  %596 = fn () -> (Tensor[(10, 2, 15), uint8],) {
    %595 = @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */;
    (%595,)
  };
  %596() /* ty=(Tensor[(10, 2, 15), uint8],) */
}

def @func_7487() -> Tensor[(10, 2, 15), uint8] {
  @func_7485() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_7751() -> (Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16], uint16) {
  %597 = cast(meta[relay.Constant][34] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %598 = reshape(%597, newshape=[]) /* ty=uint16 */;
  %599 = @func_2471(%598) /* ty=(Tensor[(1, 9), uint16],) */;
  %600 = @func_3933() /* ty=Tensor[(10, 2, 15), uint8] */;
  %601 = %599.0;
  (%600, %601, meta[relay.Constant][34] /* ty=uint16 */)
}

def @func_5783() -> Tensor[(12, 5, 2), uint16] {
  %603 = fn () -> Tensor[(12, 5, 2), uint16] {
    %602 = @func_4121() /* ty=(Tensor[(12, 5, 2), uint16], Tensor[(12, 5, 2), bool]) */;
    %602.0
  };
  %603() /* ty=Tensor[(12, 5, 2), uint16] */
}

def @func_7473() -> Tensor[(324), float32] {
  %604 = fn () -> Tensor[(324), float32] {
    @func_6661() /* ty=Tensor[(324), float32] */
  };
  %604() /* ty=Tensor[(324), float32] */
}

def @func_7955() -> (Tensor[(10, 2, 15), uint8],) {
  %605 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
  (%605,)
}

def @func_9853() -> Tensor[(10, 2, 15), uint8] {
  %607 = fn () -> Tensor[(10, 2, 15), uint8] {
    %606 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
    %606.0
  };
  %607() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_8602() -> (Tensor[(10, 2, 15), uint64], Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(10, 2, 15), uint8], Tensor[(2304), float64]) {
  @func_8600() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(10, 2, 15), uint8], Tensor[(2304), float64]) */
}

def @func_2412(%var_2396: Tensor[(324), float32]) -> (Tensor[(14, 2, 3), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) {
  %608 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 2, 3), float64] */, dtype="float64") /* ty=Tensor[(14, 2, 3), float64] */;
  %609 = cast(%var_2396, dtype="float32") /* ty=Tensor[(324), float32] */;
  %610 = cast(%var_2396, dtype="float32") /* ty=Tensor[(324), float32] */;
  %611 = reshape(%609, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %612 = reshape(%610, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %613 = @func_1978(%611, %612) /* ty=(Tensor[(4, 9, 9), float32],) */;
  %614 = cast(meta[relay.Constant][36] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %615 = reshape(%614, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float32] */;
  %616 = @func_47(%615) /* ty=(Tensor[(3, 16, 2), float32],) */;
  %617 = log(%608) /* ty=Tensor[(14, 2, 3), float64] */;
  %618 = %613.0;
  %619 = %616.0;
  (%617, %618, %var_2396, %619, meta[relay.Constant][36] /* ty=Tensor[(96), float32] */)
}

def @func_7980(%var_7972: Tensor[(10, 2, 15), float32]) -> (Tensor[(10, 2, 15), bool],) {
  %620 = @func_7594() /* ty=Tensor[(10, 2, 15), float32] */;
  %621 = cast(%var_7972, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  %622 = shape_of(%620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%620, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %625 = logical_and(%623, %624) /* ty=Tensor[(10, 2, 15), bool] */;
  (%625,)
}

def @func_6177() -> (Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(16, 4, 12), float64]) {
  @func_6175() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(16, 4, 12), float64]) */
}

def @func_9306(%var_9290: Tensor[(6, 4, 1), float32], %var_9298: Tensor[(3136), float64]) -> (Tensor[(6, 4, ?), int32], Tensor[(14, 16, 14), float64], Tensor[(3136), float64]) {
  %626 = cast(%var_9290, dtype="float32") /* ty=Tensor[(6, 4, 1), float32] */;
  %627 = sinh(%626) /* ty=Tensor[(6, 4, 1), float32] */;
  %628 = cast(%var_9290, dtype="int32") /* ty=Tensor[(6, 4, 1), int32] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="int32") /* ty=Tensor[(6, 4, 1), int32] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %632 = cast(%var_9298, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %633 = reshape(%632, newshape=[14, 16, 14]) /* ty=Tensor[(14, 16, 14), float64] */;
  %634 = left_shift(%630, %631) /* ty=Tensor[(6, 4, ?), int32] */;
  %635 = @func_9225(%633) /* ty=Tensor[(14, 16, 14), float64] */;
  (%634, %635, %var_9298)
}

def @func_7753() -> (Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16], uint16) {
  @func_7751() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16], uint16) */
}

def @func_5536(%var_5535: Tensor[(324), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(324), float32]) {
  %642 = fn (%var_5524: Tensor[(324), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(324), float32]) {
    %636 = @func_4936() /* ty=(Tensor[(10, 2, 15), uint8],) */;
    %637 = cast(%var_5524, dtype="float32") /* ty=Tensor[(324), float32] */;
    %638 = reshape(%637, newshape=[1, 324]) /* ty=Tensor[(1, 324), float32] */;
    %639 = @func_4249(%638) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(96), float32], Tensor[(1, 324), float32], Tensor[(10, 2, 15), uint8]) */;
    %640 = %636.0;
    %641 = %639.0;
    (%640, %641, %var_5524)
  };
  %642(%var_5535) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(324), float32]) */
}

def @func_7091(%var_7089: Tensor[(9, 3, 8), float64], %var_7090: Tensor[(52, 2), bool]) -> (Tensor[(9, 3, 8), float32], uint16, Tensor[(52, 2), bool]) {
  %651 = fn (%var_7076: Tensor[(9, 3, 8), float64], %var_7086: Tensor[(52, 2), bool]) -> (Tensor[(9, 3, 8), float32], uint16, Tensor[(52, 2), bool]) {
    %643 = cast(%var_7076, dtype="float64") /* ty=Tensor[(9, 3, 8), float64] */;
    %644 = acosh(%643) /* ty=Tensor[(9, 3, 8), float64] */;
    %645 = cast(%644, dtype="float32") /* ty=Tensor[(9, 3, 8), float32] */;
    %646 = cast(%var_7086, dtype="bool") /* ty=Tensor[(52, 2), bool] */;
    %647 = reshape(%646, newshape=[8, 13, 1]) /* ty=Tensor[(8, 13, 1), bool] */;
    %648 = @func_3729(%647) /* ty=(Tensor[(8, 13, 13), bool], Tensor[(1, 9), uint16], uint16, Tensor[(8, 13, 13), float64]) */;
    %649 = acos(%645) /* ty=Tensor[(9, 3, 8), float32] */;
    %650 = %648.2;
    (%649, %650, %var_7086)
  };
  %651(%var_7089, %var_7090) /* ty=(Tensor[(9, 3, 8), float32], uint16, Tensor[(52, 2), bool]) */
}

def @func_9752(%var_9743: Tensor[(704), int32], %var_9745: Tensor[(324), float32]) -> (Tensor[(768, 1), float64], Tensor[(4, 16, 11), int32], Tensor[(704), int32], Tensor[(96), float32], Tensor[(324), float32]) {
  %652 = cast(%var_9743, dtype="int32") /* ty=Tensor[(704), int32] */;
  %653 = cast(meta[relay.Constant][37] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %654 = cast(%var_9745, dtype="float32") /* ty=Tensor[(324), float32] */;
  %655 = reshape(%652, newshape=[4, 16, 11]) /* ty=Tensor[(4, 16, 11), int32] */;
  %656 = reshape(%653, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %657 = reshape(%654, newshape=[324]) /* ty=Tensor[(324), float32] */;
  %658 = @func_7378(%655, %656, %657) /* ty=(Tensor[(4, 16, 11), int32], Tensor[(3, 16, 2), float32], Tensor[(96), float32], Tensor[(10, 2, 15), uint8], Tensor[(9, 2, 3), int16], Tensor[(1, 324), float32], Tensor[(324), float32]) */;
  %659 = @func_5567() /* ty=Tensor[(768, 1), float64] */;
  %660 = %658.0;
  (%659, %660, %var_9743, meta[relay.Constant][37] /* ty=Tensor[(96), float32] */, %var_9745)
}

def @func_6609(%var_6596: int64, %var_6597: Tensor[(2, 11, 10), int64]) -> (Tensor[(2, 11, 10), bool], Tensor[(2, 11, 10), float32]) {
  %661 = cast(%var_6596, dtype="bool") /* ty=bool */;
  %662 = cast(%var_6597, dtype="bool") /* ty=Tensor[(2, 11, 10), bool] */;
  %663 = cast(%var_6597, dtype="float32") /* ty=Tensor[(2, 11, 10), float32] */;
  %664 = less_equal(%661, %662) /* ty=Tensor[(2, 11, 10), bool] */;
  %665 = sin(%663) /* ty=Tensor[(2, 11, 10), float32] */;
  (%664, %665)
}

def @func_5851() -> (Tensor[(10, 2, 15), uint64],) {
  @func_5849() /* ty=(Tensor[(10, 2, 15), uint64],) */
}

def @func_7485() -> Tensor[(10, 2, 15), uint8] {
  %666 = @func_4936() /* ty=(Tensor[(10, 2, 15), uint8],) */;
  %666.0
}

def @func_8792(%var_8789: Tensor[(10, 2, 15), float32], %var_8790: Tensor[(704), int32], %var_8791: Tensor[(96), float32]) -> (Tensor[(10, 2, 15), bool], Tensor[(12, 5, 2), uint16], Tensor[(3, 16, 2), float32], Tensor[(96), float32], Tensor[(1, 324), float32], Tensor[(704), float32]) {
  @func_8787(%var_8789, %var_8790, %var_8791) /* ty=(Tensor[(10, 2, 15), bool], Tensor[(12, 5, 2), uint16], Tensor[(3, 16, 2), float32], Tensor[(96), float32], Tensor[(1, 324), float32], Tensor[(704), float32]) */
}

def @func_3158(%var_3095: Tensor[(7, 12, 2), float64], %var_3138: Tensor[(256, 2), int8]) -> (Tensor[(7, 12, 2), float64], Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(256, 2), int8]) {
  %667 = cast(%var_3095, dtype="float64") /* ty=Tensor[(7, 12, 2), float64] */;
  %668 = cast(meta[relay.Constant][38] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %669 = reshape(%668, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), float32] */;
  %670 = @func_1383(%669) /* ty=(Tensor[(16, 4, 12), float64], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(16, 4, 12), bool]) */;
  %671 = cast(meta[relay.Constant][39] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %672 = cast(%var_3138, dtype="int8") /* ty=Tensor[(256, 2), int8] */;
  %673 = reshape(%671, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
  %674 = reshape(%672, newshape=[512]) /* ty=Tensor[(512), int8] */;
  %675 = @func_1923(%673, %674) /* ty=(Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(3, 16, 2), float32], Tensor[(16, 6), float32], Tensor[(9, 5, 6), float64]) */;
  %676 = exp(%667) /* ty=Tensor[(7, 12, 2), float64] */;
  %677 = %670.0;
  %678 = %675.4;
  (%676, %677, meta[relay.Constant][38] /* ty=Tensor[(768), float32] */, %678, meta[relay.Constant][39] /* ty=Tensor[(270), float32] */, %var_3138)
}

def @func_5363(%var_5350: Tensor[(768), float32]) -> (Tensor[(10, 2, 15), float32], Tensor[(768), float32], Tensor[(768), float32]) {
  %679 = cast(%var_5350, dtype="float32") /* ty=Tensor[(768), float32] */;
  %680 = reshape(%679, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %681 = @func_4304(%680) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(11, 5, 12), uint8], Tensor[(768), float32], Tensor[(10, 2, 15), uint8]) */;
  %682 = @func_4946() /* ty=Tensor[(10, 2, 15), float32] */;
  %683 = %681.2;
  (%682, %683, %var_5350)
}

def @func_4304(%var_4295: Tensor[(768), float32]) -> (Tensor[(10, 2, 15), uint8], Tensor[(11, 5, 12), uint8], Tensor[(768), float32], Tensor[(10, 2, 15), uint8]) {
  %684 = cast(%var_4295, dtype="float32") /* ty=Tensor[(768), float32] */;
  %685 = reshape(%684, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %686 = @func_3083(%685) /* ty=(Tensor[(11, 5, 12), uint8], Tensor[(96), float32], Tensor[(324), float32], Tensor[(4, 9, 9), float32], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */;
  %687 = @func_4160() /* ty=Tensor[(10, 2, 15), uint8] */;
  %688 = %686.0;
  %689 = @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */;
  (%687, %688, %var_4295, %689)
}

def @func_8632() -> (Tensor[(768), float32], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float32]) {
  %690 = @func_8600() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(10, 2, 15), uint8], Tensor[(2304), float64]) */;
  %691 = @func_4869() /* ty=(Tensor[(768, 1), float64], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
  %692 = %690.2;
  %693 = %691.2;
  %694 = @func_7594() /* ty=Tensor[(10, 2, 15), float32] */;
  (%692, %693, %694)
}

def @func_7393() -> Tensor[(16, 6), float32] {
  @func_7391() /* ty=Tensor[(16, 6), float32] */
}

def @func_6677(%var_6676: Tensor[(9, 9, 7), float32]) -> Tensor[(9, 9, 7), float32] {
  %696 = fn (%var_6671: Tensor[(9, 9, 7), float32]) -> Tensor[(9, 9, 7), float32] {
    %695 = cast(%var_6671, dtype="float32") /* ty=Tensor[(9, 9, 7), float32] */;
    atan(%695) /* ty=Tensor[(9, 9, 7), float32] */
  };
  %696(%var_6676) /* ty=Tensor[(9, 9, 7), float32] */
}

def @func_1840(%var_1838: Tensor[(9, 16, 11), float32], %var_1839: Tensor[(768), float32]) -> (Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(9, 16, 11), float32], Tensor[(8, 8, 8), int8], Tensor[(64, 8), int8], Tensor[(8, 8, 8), int8], Tensor[(9, 16, 11), float32]) {
  %720 = fn (%var_1765: Tensor[(9, 16, 11), float32], %var_1770: Tensor[(768), float32]) -> (Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(9, 16, 11), float32], Tensor[(8, 8, 8), int8], Tensor[(64, 8), int8], Tensor[(8, 8, 8), int8], Tensor[(9, 16, 11), float32]) {
    %697 = cast(%var_1770, dtype="float32") /* ty=Tensor[(768), float32] */;
    %698 = reshape(%697, newshape=[16, 4, 12]) /* ty=Tensor[(16, 4, 12), float32] */;
    %699 = @func_1383(%698) /* ty=(Tensor[(16, 4, 12), float64], Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(16, 4, 12), bool]) */;
    %700 = cast(%var_1765, dtype="float32") /* ty=Tensor[(9, 16, 11), float32] */;
    %701 = asinh(%700) /* ty=Tensor[(9, 16, 11), float32] */;
    %702 = cast(%701, dtype="float32") /* ty=Tensor[(9, 16, 11), float32] */;
    %703 = cast(meta[relay.Constant][40] /* ty=Tensor[(64, 8), int8] */, dtype="int8") /* ty=Tensor[(64, 8), int8] */;
    %704 = cast(meta[relay.Constant][40] /* ty=Tensor[(64, 8), int8] */, dtype="int8") /* ty=Tensor[(64, 8), int8] */;
    %705 = reshape(%703, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
    %706 = reshape(%704, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
    %707 = @func_352(%705, %706) /* ty=Tensor[(8, 8, 8), int8] */;
    %708 = cast(%707, dtype="int8") /* ty=Tensor[(8, 8, 8), int8] */;
    %709 = cast(%707, dtype="int8") /* ty=Tensor[(8, 8, 8), int8] */;
    %710 = reshape(%708, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
    %711 = reshape(%709, newshape=[8, 8, 8]) /* ty=Tensor[(8, 8, 8), int8] */;
    %712 = cast(%var_1765, dtype="float32") /* ty=Tensor[(9, 16, 11), float32] */;
    %713 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
    %714 = cast(%701, dtype="float32") /* ty=Tensor[(9, 16, 11), float32] */;
    %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %716 = %699.0;
    %717 = atanh(%702) /* ty=Tensor[(9, 16, 11), float32] */;
    %718 = @func_352(%710, %711) /* ty=Tensor[(8, 8, 8), int8] */;
    %719 = floor_mod(%714, %715) /* ty=Tensor[(9, 16, 11), float32] */;
    (%716, %var_1770, %717, %707, meta[relay.Constant][40] /* ty=Tensor[(64, 8), int8] */, %718, %719)
  };
  %720(%var_1838, %var_1839) /* ty=(Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(9, 16, 11), float32], Tensor[(8, 8, 8), int8], Tensor[(64, 8), int8], Tensor[(8, 8, 8), int8], Tensor[(9, 16, 11), float32]) */
}

def @func_8486() -> (Tensor[(12, 5, 2), bool], Tensor[(768, 1), float64]) {
  %729 = fn () -> (Tensor[(12, 5, 2), bool], Tensor[(768, 1), float64]) {
    %721 = @func_5782() /* ty=Tensor[(12, 5, 2), uint16] */;
    %722 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 5, 2), uint16] */, dtype="bool") /* ty=Tensor[(12, 5, 2), bool] */;
    %723 = shape_of(%721, dtype="int32") /* ty=Tensor[(3), int32] */;
    %724 = cast(%721, dtype="bool") /* ty=Tensor[(12, 5, 2), bool] */;
    %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %726 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
    %727 = less(%724, %725) /* ty=Tensor[(12, 5, 2), bool] */;
    %728 = %726.0;
    (%727, %728)
  };
  %729() /* ty=(Tensor[(12, 5, 2), bool], Tensor[(768, 1), float64]) */
}

def @func_4758() -> (Tensor[(10, 2, 15), uint64], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float32], Tensor[(10, 2, 15), float64]) {
  %746 = fn () -> (Tensor[(10, 2, 15), uint64], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float32], Tensor[(10, 2, 15), float64]) {
    %730 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
    %731 = cast(%730, dtype="uint8") /* ty=Tensor[(10, 2, 15), uint8] */;
    %732 = reshape(%731, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), uint8] */;
    %733 = cast(meta[relay.Constant][42] /* ty=Tensor[(768, 1), float32] */, dtype="float32") /* ty=Tensor[(768, 1), float32] */;
    %734 = reshape(%733, newshape=[768]) /* ty=Tensor[(768), float32] */;
    %735 = @func_4304(%734) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(11, 5, 12), uint8], Tensor[(768), float32], Tensor[(10, 2, 15), uint8]) */;
    %736 = cast(%730, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
    %737 = log(%736) /* ty=Tensor[(10, 2, 15), float64] */;
    %738 = @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */;
    %739 = cast(%738, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
    %740 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
    %741 = cast(%737, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
    %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %743 = @func_4069(%732) /* ty=Tensor[(10, 2, 15), uint64] */;
    %744 = %735.3;
    %745 = divide(%741, %742) /* ty=Tensor[(10, 2, 15), float64] */;
    (%743, %744, meta[relay.Constant][42] /* ty=Tensor[(768, 1), float32] */, %745)
  };
  %746() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float32], Tensor[(10, 2, 15), float64]) */
}

def @func_4679() -> (Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) {
  %747 = cast(meta[relay.Constant][43] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %748 = reshape(%747, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %749 = @func_3083(%748) /* ty=(Tensor[(11, 5, 12), uint8], Tensor[(96), float32], Tensor[(324), float32], Tensor[(4, 9, 9), float32], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */;
  %750 = @func_3808() /* ty=Tensor[(10, 2, 15), uint8] */;
  %751 = %749.4;
  (%750, %751, meta[relay.Constant][43] /* ty=Tensor[(768), float32] */)
}

def @func_6545() -> (Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), uint16], Tensor[(768, 1), float64]) {
  @func_6543() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), uint16], Tensor[(768, 1), float64]) */
}

def @func_4122() -> (Tensor[(12, 5, 2), uint16], Tensor[(12, 5, 2), bool]) {
  %764 = fn () -> (Tensor[(12, 5, 2), uint16], Tensor[(12, 5, 2), bool]) {
    %752 = @func_4033() /* ty=(Tensor[(12, 5, 2), float64],) */;
    %753 = %752.0;
    %754 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 5, 2), float64] */, dtype="uint16") /* ty=Tensor[(12, 5, 2), uint16] */;
    %755 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
    %756 = cast(%753, dtype="uint16") /* ty=Tensor[(12, 5, 2), uint16] */;
    %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %758 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 5, 2), float64] */, dtype="bool") /* ty=Tensor[(12, 5, 2), bool] */;
    %759 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
    %760 = cast(%753, dtype="bool") /* ty=Tensor[(12, 5, 2), bool] */;
    %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %762 = bitwise_or(%756, %757) /* ty=Tensor[(12, 5, 2), uint16] */;
    %763 = logical_and(%760, %761) /* ty=Tensor[(12, 5, 2), bool] */;
    (%762, %763)
  };
  %764() /* ty=(Tensor[(12, 5, 2), uint16], Tensor[(12, 5, 2), bool]) */
}

def @func_5938() -> (Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), bool]) {
  %769 = fn () -> (Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), bool]) {
    %765 = @func_3742() /* ty=(Tensor[(10, 2, 15), uint8],) */;
    %766 = @func_4121() /* ty=(Tensor[(12, 5, 2), uint16], Tensor[(12, 5, 2), bool]) */;
    %767 = %765.0;
    %768 = %766.1;
    (%767, %768)
  };
  %769() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), bool]) */
}

def @func_5807(%var_5787: Tensor[(14, 2, 1), float64], %var_5788: Tensor[(14, 2, 4), float64]) -> (Tensor[(14, 2, 4), float64],) {
  %770 = cast(%var_5787, dtype="float64") /* ty=Tensor[(14, 2, 1), float64] */;
  %771 = cast(%var_5788, dtype="float64") /* ty=Tensor[(14, 2, 4), float64] */;
  %772 = maximum(%770, %771) /* ty=Tensor[(14, 2, 4), float64] */;
  (%772,)
}

def @func_6089() -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32]) {
  %785 = fn () -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32]) {
    %773 = @func_5937() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), bool]) */;
    %774 = @func_5937() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), bool]) */;
    %775 = @func_5019() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8]) */;
    %776 = @func_5676() /* ty=(Tensor[(10, 2, 15), float64],) */;
    %777 = cast(meta[relay.Constant][45] /* ty=Tensor[(324), float32] */, dtype="float32") /* ty=Tensor[(324), float32] */;
    %778 = reshape(%777, newshape=[324]) /* ty=Tensor[(324), float32] */;
    %779 = @func_2412(%778) /* ty=(Tensor[(14, 2, 3), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(3, 16, 2), float32], Tensor[(96), float32]) */;
    %780 = %773.0;
    %781 = %774.0;
    %782 = %775.1;
    %783 = %776.0;
    %784 = %779.1;
    (%780, %781, %782, %783, %784, meta[relay.Constant][45] /* ty=Tensor[(324), float32] */)
  };
  %785() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float64], Tensor[(4, 9, 9), float32], Tensor[(324), float32]) */
}

def @main() -> (Tensor[(768, ?), float32],) {
  %786 = @func_8486() /* ty=(Tensor[(12, 5, 2), bool], Tensor[(768, 1), float64]) */;
  %787 = %786.1;
  %788 = cast(%787, dtype="float64") /* ty=Tensor[(768, 1), float64] */;
  %789 = sin(%788) /* ty=Tensor[(768, 1), float64] */;
  %790 = cast(%789, dtype="uint16") /* ty=Tensor[(768, 1), uint16] */;
  %791 = shape_of(%787, dtype="int32") /* ty=Tensor[(2), int32] */;
  %792 = cast(%787, dtype="uint16") /* ty=Tensor[(768, 1), uint16] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %794 = left_shift(%792, %793) /* ty=Tensor[(768, ?), uint16] */;
  %795 = cast(%794, dtype="float32") /* ty=Tensor[(768, ?), float32] */;
  %796 = log(%795) /* ty=Tensor[(768, ?), float32] */;
  (%796,)
}

def @func_7709(%var_7706: Tensor[(768, 11), float32], %var_7707: Tensor[(120), uint16], %var_7708: Tensor[(768, 11), uint8]) -> (Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), int8], Tensor[(120), uint16], Tensor[(768, 11), float64]) {
  @func_7704(%var_7706, %var_7707, %var_7708) /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(12, 5, 2), int8], Tensor[(120), uint16], Tensor[(768, 11), float64]) */
}

def @func_5811(%var_5809: Tensor[(14, 2, 1), float64], %var_5810: Tensor[(14, 2, 4), float64]) -> (Tensor[(14, 2, 4), float64],) {
  @func_5807(%var_5809, %var_5810) /* ty=(Tensor[(14, 2, 4), float64],) */
}

def @func_3743() -> (Tensor[(10, 2, 15), uint8],) {
  %802 = fn () -> (Tensor[(10, 2, 15), uint8],) {
    %797 = cast(meta[relay.Constant][47] /* ty=Tensor[(10, 2, 15), uint8] */, dtype="uint8") /* ty=Tensor[(10, 2, 15), uint8] */;
    %798 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(10, 2, 15), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %799 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 2, 15), uint8] */, dtype="uint8") /* ty=Tensor[(10, 2, 15), uint8] */;
    %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %801 = right_shift(%799, %800) /* ty=Tensor[(10, 2, 15), uint8] */;
    (%801,)
  };
  %802() /* ty=(Tensor[(10, 2, 15), uint8],) */
}

def @func_49(%var_48: Tensor[(3, 16, 2), float32]) -> (Tensor[(3, 16, 2), float32],) {
  %807 = fn (%var_12: Tensor[(3, 16, 2), float32]) -> (Tensor[(3, 16, 2), float32],) {
    %803 = cast(%var_12, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
    %804 = log10(%803) /* ty=Tensor[(3, 16, 2), float32] */;
    %805 = cast(%804, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
    %806 = log2(%805) /* ty=Tensor[(3, 16, 2), float32] */;
    (%806,)
  };
  %807(%var_48) /* ty=(Tensor[(3, 16, 2), float32],) */
}

def @func_4544(%var_4529: Tensor[(10, 2, 15), uint8], %var_4541: Tensor[(324), float32]) -> (Tensor[(10, 2, 15), bool], Tensor[(10, 2, 15), uint64], Tensor[(4, 9, 9), float32], Tensor[(324), float32]) {
  %808 = @func_3933() /* ty=Tensor[(10, 2, 15), uint8] */;
  %809 = cast(%var_4529, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  %810 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%808, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %813 = cast(%808, dtype="uint64") /* ty=Tensor[(10, 2, 15), uint64] */;
  %814 = shape_of(%var_4529, dtype="int32") /* ty=Tensor[(3), int32] */;
  %815 = cast(%var_4529, dtype="uint64") /* ty=Tensor[(10, 2, 15), uint64] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %817 = cast(%var_4541, dtype="float32") /* ty=Tensor[(324), float32] */;
  %818 = cast(%var_4541, dtype="float32") /* ty=Tensor[(324), float32] */;
  %819 = reshape(%817, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %820 = reshape(%818, newshape=[4, 9, 9]) /* ty=Tensor[(4, 9, 9), float32] */;
  %821 = @func_1978(%819, %820) /* ty=(Tensor[(4, 9, 9), float32],) */;
  %822 = less(%811, %812) /* ty=Tensor[(10, 2, 15), bool] */;
  %823 = bitwise_and(%815, %816) /* ty=Tensor[(10, 2, 15), uint64] */;
  %824 = %821.0;
  (%822, %823, %824, %var_4541)
}

def @func_7124() -> Tensor[(12, 5, 2), uint16] {
  @func_7122() /* ty=Tensor[(12, 5, 2), uint16] */
}

def @func_6662() -> Tensor[(324), float32] {
  %826 = fn () -> Tensor[(324), float32] {
    %825 = @func_6175() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(4, 9, 9), float32], Tensor[(324), float32], Tensor[(16, 4, 12), float64]) */;
    %825.2
  };
  %826() /* ty=Tensor[(324), float32] */
}

def @func_4033() -> (Tensor[(12, 5, 2), float64],) {
  %827 = cast(meta[relay.Constant][48] /* ty=Tensor[(12, 5, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 5, 2), float64] */;
  %828 = asin(%827) /* ty=Tensor[(12, 5, 2), float64] */;
  (%828,)
}

def @func_8993(%var_8992: Tensor[(12, 8, 14), float64]) -> (Tensor[(10, 2, 15), uint64], Tensor[(3, 16, 2), float32], Tensor[(1, 270), float32], Tensor[(512), int8], Tensor[(12, 8, 14), int32], Tensor[(768), float32], Tensor[(768), float32], Tensor[(10, 2, 15), uint8]) {
  %859 = fn (%var_8922: Tensor[(12, 8, 14), float64]) -> (Tensor[(10, 2, 15), uint64], Tensor[(3, 16, 2), float32], Tensor[(1, 270), float32], Tensor[(512), int8], Tensor[(12, 8, 14), int32], Tensor[(768), float32], Tensor[(768), float32], Tensor[(10, 2, 15), uint8]) {
    %829 = @func_5849() /* ty=(Tensor[(10, 2, 15), uint64],) */;
    %830 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 270), float32] */, dtype="float32") /* ty=Tensor[(1, 270), float32] */;
    %831 = cast(meta[relay.Constant][50] /* ty=Tensor[(512), int8] */, dtype="int8") /* ty=Tensor[(512), int8] */;
    %832 = reshape(%830, newshape=[9, 5, 6]) /* ty=Tensor[(9, 5, 6), float32] */;
    %833 = reshape(%831, newshape=[512]) /* ty=Tensor[(512), int8] */;
    %834 = @func_1923(%832, %833) /* ty=(Tensor[(8, 8, 8), int8], Tensor[(512), int8], Tensor[(3, 16, 2), float32], Tensor[(16, 6), float32], Tensor[(9, 5, 6), float64]) */;
    %835 = cast(%var_8922, dtype="float64") /* ty=Tensor[(12, 8, 14), float64] */;
    %836 = log10(%835) /* ty=Tensor[(12, 8, 14), float64] */;
    %837 = cast(%836, dtype="float32") /* ty=Tensor[(12, 8, 14), float32] */;
    %838 = asinh(%837) /* ty=Tensor[(12, 8, 14), float32] */;
    %839 = cast(%838, dtype="float64") /* ty=Tensor[(12, 8, 14), float64] */;
    %840 = sin(%839) /* ty=Tensor[(12, 8, 14), float64] */;
    %841 = cast(%836, dtype="uint16") /* ty=Tensor[(12, 8, 14), uint16] */;
    %842 = shape_of(%838, dtype="int32") /* ty=Tensor[(3), int32] */;
    %843 = cast(%838, dtype="uint16") /* ty=Tensor[(12, 8, 14), uint16] */;
    %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %845 = maximum(%843, %844) /* ty=Tensor[(12, 8, 14), uint16] */;
    %846 = cast(%845, dtype="int32") /* ty=Tensor[(12, 8, 14), int32] */;
    %847 = shape_of(%840, dtype="int32") /* ty=Tensor[(3), int32] */;
    %848 = cast(%840, dtype="int32") /* ty=Tensor[(12, 8, 14), int32] */;
    %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %850 = cast(meta[relay.Constant][51] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
    %851 = reshape(%850, newshape=[768]) /* ty=Tensor[(768), float32] */;
    %852 = @func_5363(%851) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(768), float32], Tensor[(768), float32]) */;
    %853 = @func_4757() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float32], Tensor[(10, 2, 15), float64]) */;
    %854 = %829.0;
    %855 = %834.2;
    %856 = logical_xor(%848, %849) /* ty=Tensor[(12, 8, 14), int32] */;
    %857 = %852.2;
    %858 = %853.1;
    (%854, %855, meta[relay.Constant][49] /* ty=Tensor[(1, 270), float32] */, meta[relay.Constant][50] /* ty=Tensor[(512), int8] */, %856, %857, meta[relay.Constant][51] /* ty=Tensor[(768), float32] */, %858)
  };
  %859(%var_8992) /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(3, 16, 2), float32], Tensor[(1, 270), float32], Tensor[(512), int8], Tensor[(12, 8, 14), int32], Tensor[(768), float32], Tensor[(768), float32], Tensor[(10, 2, 15), uint8]) */
}

def @func_5740() -> (Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(16, 6), float32], Tensor[(768, 4), float32]) {
  @func_5738() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), uint64], Tensor[(16, 6), float32], Tensor[(768, 4), float32]) */
}

def @func_4681() -> (Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) {
  @func_4679() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */
}

def @func_9837() -> Tensor[(10, 2, 15), uint8] {
  %860 = fn () -> Tensor[(10, 2, 15), uint8] {
    @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */
  };
  %860() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_5507(%var_5505: Tensor[(1, 168), float64], %var_5506: Tensor[(512), int8]) -> (Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), float64], Tensor[(16, 4, 12), float64], Tensor[(1, 168), float64], Tensor[(512), int8]) {
  %875 = fn (%var_5487: Tensor[(1, 168), float64], %var_5488: Tensor[(512), int8]) -> (Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), float64], Tensor[(16, 4, 12), float64], Tensor[(1, 168), float64], Tensor[(512), int8]) {
    %861 = @func_4757() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float32], Tensor[(10, 2, 15), float64]) */;
    %862 = %861.1;
    %863 = cast(%862, dtype="float32") /* ty=Tensor[(10, 2, 15), float32] */;
    %864 = @func_4757() /* ty=(Tensor[(10, 2, 15), uint64], Tensor[(10, 2, 15), uint8], Tensor[(768, 1), float32], Tensor[(10, 2, 15), float64]) */;
    %865 = %864.3;
    %866 = cast(%865, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
    %867 = cast(%var_5487, dtype="float64") /* ty=Tensor[(1, 168), float64] */;
    %868 = cast(%var_5488, dtype="int8") /* ty=Tensor[(512), int8] */;
    %869 = reshape(%867, newshape=[7, 12, 2]) /* ty=Tensor[(7, 12, 2), float64] */;
    %870 = reshape(%868, newshape=[256, 2]) /* ty=Tensor[(256, 2), int8] */;
    %871 = @func_3158(%869, %870) /* ty=(Tensor[(7, 12, 2), float64], Tensor[(16, 4, 12), float64], Tensor[(768), float32], Tensor[(9, 5, 6), float64], Tensor[(270), float32], Tensor[(256, 2), int8]) */;
    %872 = sigmoid(%863) /* ty=Tensor[(10, 2, 15), float32] */;
    %873 = atan(%866) /* ty=Tensor[(10, 2, 15), float64] */;
    %874 = %871.1;
    (%872, %873, %874, %var_5487, %var_5488)
  };
  %875(%var_5505, %var_5506) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), float64], Tensor[(16, 4, 12), float64], Tensor[(1, 168), float64], Tensor[(512), int8]) */
}

def @func_6439() -> (Tensor[(10, 2, 15), uint8],) {
  @func_6437() /* ty=(Tensor[(10, 2, 15), uint8],) */
}

def @func_8732() -> (Tensor[(768), float32], Tensor[(768), float32], Tensor[(10, 2, 15), float32], Tensor[(168), float64], Tensor[(512), int8]) {
  %886 = fn () -> (Tensor[(768), float32], Tensor[(768), float32], Tensor[(10, 2, 15), float32], Tensor[(168), float64], Tensor[(512), int8]) {
    %876 = @func_4679() /* ty=(Tensor[(10, 2, 15), uint8], Tensor[(16, 4, 12), float64], Tensor[(768), float32]) */;
    %877 = @func_8632() /* ty=(Tensor[(768), float32], Tensor[(10, 2, 15), uint8], Tensor[(10, 2, 15), float32]) */;
    %878 = cast(meta[relay.Constant][52] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %879 = cast(meta[relay.Constant][53] /* ty=Tensor[(512), int8] */, dtype="int8") /* ty=Tensor[(512), int8] */;
    %880 = reshape(%878, newshape=[1, 168]) /* ty=Tensor[(1, 168), float64] */;
    %881 = reshape(%879, newshape=[512]) /* ty=Tensor[(512), int8] */;
    %882 = @func_5504(%880, %881) /* ty=(Tensor[(10, 2, 15), float32], Tensor[(10, 2, 15), float64], Tensor[(16, 4, 12), float64], Tensor[(1, 168), float64], Tensor[(512), int8]) */;
    %883 = %876.2;
    %884 = %877.0;
    %885 = %882.0;
    (%883, %884, %885, meta[relay.Constant][52] /* ty=Tensor[(168), float64] */, meta[relay.Constant][53] /* ty=Tensor[(512), int8] */)
  };
  %886() /* ty=(Tensor[(768), float32], Tensor[(768), float32], Tensor[(10, 2, 15), float32], Tensor[(168), float64], Tensor[(512), int8]) */
}

def @func_4798(%var_4779: float64) -> (Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16], float64, Tensor[(132), float64]) {
  %887 = cast(%var_4779, dtype="float64") /* ty=float64 */;
  %888 = cast(meta[relay.Constant][54] /* ty=Tensor[(132), float64] */, dtype="float64") /* ty=Tensor[(132), float64] */;
  %889 = reshape(%887, newshape=[]) /* ty=float64 */;
  %890 = reshape(%888, newshape=[1, 11, 12]) /* ty=Tensor[(1, 11, 12), float64] */;
  %891 = @func_3913(%889, %890) /* ty=(Tensor[(1, 11, 12), float64], Tensor[(10, 2, 15), uint8], Tensor[(1, 9), uint16]) */;
  %892 = @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */;
  %893 = %891.2;
  (%892, %893, %var_4779, meta[relay.Constant][54] /* ty=Tensor[(132), float64] */)
}

def @func_7937() -> Tensor[(10, 2, 15), uint8] {
  @func_7935() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_6741() -> (Tensor[(768, 1), float64],) {
  %894 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
  %895 = %894.0;
  (%895,)
}

def @func_6307(%var_6306: Tensor[(13, 1, 4), float32]) -> (Tensor[(768, 1), float64], Tensor[(13, 2, 4), float64]) {
  %905 = fn (%var_6255: Tensor[(13, 1, 4), float32]) -> (Tensor[(768, 1), float64], Tensor[(13, 2, 4), float64]) {
    %896 = @func_4987() /* ty=(Tensor[(768, 1), float64],) */;
    %897 = cast(%var_6255, dtype="float32") /* ty=Tensor[(13, 1, 4), float32] */;
    %898 = cast(meta[relay.Constant][55] /* ty=Tensor[(13, 2, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
    %899 = mod(%897, %898) /* ty=Tensor[(13, 2, 4), float32] */;
    %900 = cast(%899, dtype="float32") /* ty=Tensor[(13, 2, 4), float32] */;
    %901 = tan(%900) /* ty=Tensor[(13, 2, 4), float32] */;
    %902 = cast(%901, dtype="float64") /* ty=Tensor[(13, 2, 4), float64] */;
    %903 = %896.0;
    %904 = atan(%902) /* ty=Tensor[(13, 2, 4), float64] */;
    (%903, %904)
  };
  %905(%var_6306) /* ty=(Tensor[(768, 1), float64], Tensor[(13, 2, 4), float64]) */
}

def @func_3756() -> Tensor[(10, 2, 15), uint8] {
  @func_3754() /* ty=Tensor[(10, 2, 15), uint8] */
}

def @func_9338(%var_9335: Tensor[(5, 12, 8), float32]) -> Tensor[(5, 12, 8), float32] {
  %906 = cast(%var_9335, dtype="float32") /* ty=Tensor[(5, 12, 8), float32] */;
  atanh(%906) /* ty=Tensor[(5, 12, 8), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen609/build/output.py", line 2596, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:39:19] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

