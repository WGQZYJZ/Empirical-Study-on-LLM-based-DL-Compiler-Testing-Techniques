==========mod==========
#[version = "0.0.5"]
def @func_2226() -> Tensor[(9, 2, 2), uint16] {
  %0 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %0.0
}

def @main(%var_11335: Tensor[(11, 9, 6), float32]) -> Tensor[(11, 9, 6), float32] {
  %1 = cast(%var_11335, dtype="float32") /* ty=Tensor[(11, 9, 6), float32] */;
  %2 = atanh(%1) /* ty=Tensor[(11, 9, 6), float32] */;
  %3 = cast(%2, dtype="float32") /* ty=Tensor[(11, 9, 6), float32] */;
  asin(%3) /* ty=Tensor[(11, 9, 6), float32] */
}

def @func_9439() -> (Tensor[(10, 10, 4), uint8],) {
  %4 = @func_8440() /* ty=(Tensor[(1521), int16], Tensor[(10, 10, 4), uint8]) */;
  %5 = %4.1;
  (%5,)
}

def @func_5608() -> Tensor[(6, 15, 2), float32] {
  %6 = @func_2393() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180), int16]) */;
  %6.2
}

def @func_5079() -> (Tensor[(13, 10), float32],) {
  %7 = @func_2486() /* ty=Tensor[(13, 10), float32] */;
  (%7,)
}

def @func_9683() -> Tensor[(13, 10), float32] {
  @func_9371() /* ty=Tensor[(13, 10), float32] */
}

def @func_2145() -> (Tensor[(9, 2, 2), float64], Tensor[(10, 10, 4), uint8], Tensor[(96), float32], Tensor[(40), int8]) {
  %8 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %9 = %8.0;
  %10 = cast(%9, dtype="float64") /* ty=Tensor[(9, 2, 2), float64] */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(40), int8] */, dtype="int8") /* ty=Tensor[(40), int8] */;
  %13 = reshape(%11, newshape=[6, 1, 16]) /* ty=Tensor[(6, 1, 16), float32] */;
  %14 = reshape(%12, newshape=[40]) /* ty=Tensor[(40), int8] */;
  %15 = @func_575(%13, %14) /* ty=(Tensor[(6, 1, 16), float32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(400), int8]) */;
  %16 = log(%10) /* ty=Tensor[(9, 2, 2), float64] */;
  %17 = %15.1;
  (%16, %17, meta[relay.Constant][0] /* ty=Tensor[(96), float32] */, meta[relay.Constant][1] /* ty=Tensor[(40), int8] */)
}

def @func_2702() -> (Tensor[(9, 2, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(3, 24), float32], Tensor[(250), int64], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) {
  %18 = @func_2545() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %19 = %18.0;
  %20 = cast(%19, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 24), float32] */, dtype="float32") /* ty=Tensor[(3, 24), float32] */;
  %22 = cast(meta[relay.Constant][3] /* ty=Tensor[(250), int64] */, dtype="int64") /* ty=Tensor[(250), int64] */;
  %23 = reshape(%21, newshape=[12, 3, 2]) /* ty=Tensor[(12, 3, 2), float32] */;
  %24 = reshape(%22, newshape=[25, 10]) /* ty=Tensor[(25, 10), int64] */;
  %25 = @func_183(%23, %24) /* ty=(Tensor[(12, 3, 2), float32], Tensor[(5, 10, 5), bool], Tensor[(25, 10), int64], Tensor[(9, 13, 13), bool], Tensor[(1, 1521), float32]) */;
  %26 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %27 = @func_2545() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %28 = atan(%20) /* ty=Tensor[(9, 2, 2), float32] */;
  %29 = %25.3;
  %30 = %26.0;
  %31 = @func_2275() /* ty=Tensor[(13, 10), float32] */;
  %32 = %27.0;
  (%28, %29, meta[relay.Constant][2] /* ty=Tensor[(3, 24), float32] */, meta[relay.Constant][3] /* ty=Tensor[(250), int64] */, %30, %31, %32)
}

def @func_11180() -> Tensor[(13, 10), float32] {
  %33 = @func_10906() /* ty=(Tensor[(13, 10), float32],) */;
  %33.0
}

def @func_9761() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), float32], Tensor[(36), uint16], Tensor[(540), uint32]) {
  %34 = cast(meta[relay.Constant][4] /* ty=Tensor[(36), uint16] */, dtype="uint16") /* ty=Tensor[(36), uint16] */;
  %35 = cast(meta[relay.Constant][5] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %36 = reshape(%34, newshape=[9, 2, 2]) /* ty=Tensor[(9, 2, 2), uint16] */;
  %37 = reshape(%35, newshape=[540]) /* ty=Tensor[(540), uint32] */;
  %38 = @func_7592(%36, %37) /* ty=(Tensor[(9, 2, 2), float32], Tensor[(6, 10, 9), bool], uint32, Tensor[(540), uint32]) */;
  %39 = @func_3650() /* ty=Tensor[(13, 10), float32] */;
  %40 = %38.0;
  (%39, %40, meta[relay.Constant][4] /* ty=Tensor[(36), uint16] */, meta[relay.Constant][5] /* ty=Tensor[(540), uint32] */)
}

def @func_6567() -> (Tensor[(6, 15, 2), float32], Tensor[(10, 10, 4), float32], Tensor[(13, 10), float32]) {
  %41 = @func_3920() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %42 = %41.0;
  %43 = cast(%42, dtype="float32") /* ty=Tensor[(10, 10, 4), float32] */;
  %44 = @func_6412() /* ty=(Tensor[(13, 10), float32],) */;
  %45 = @func_5608() /* ty=Tensor[(6, 15, 2), float32] */;
  %46 = acos(%43) /* ty=Tensor[(10, 10, 4), float32] */;
  %47 = %44.0;
  (%45, %46, %47)
}

def @func_5086() -> (Tensor[(13, 10), float32],) {
  %48 = @func_3532() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %49 = %48.2;
  (%49,)
}

def @func_9342() -> (Tensor[(13, 10), float32],) {
  %50 = @func_8532() /* ty=(Tensor[(13, 10), float32],) */;
  %51 = %50.0;
  (%51,)
}

def @func_8129(%var_8097: Tensor[(3, 3, 1), uint64], %var_8098: Tensor[(3, 3, 14), uint64]) -> Tensor[(3, 3, 14), bool] {
  %52 = cast(%var_8097, dtype="bool") /* ty=Tensor[(3, 3, 1), bool] */;
  %53 = cast(%var_8098, dtype="bool") /* ty=Tensor[(3, 3, 14), bool] */;
  equal(%52, %53) /* ty=Tensor[(3, 3, 14), bool] */
}

def @func_9710() -> Tensor[(9, 2, 2), float64] {
  %54 = @func_9105() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */;
  %54.2
}

def @func_2639(%var_2577: Tensor[(9, 2, 2), uint16], %var_2610: Tensor[(1521), int16]) -> (Tensor[(9, 2, 2), uint64], Tensor[(10, 10, 4), uint8], Tensor[(9, 13, 13), bool], Tensor[(1521), int16], Tensor[(180), int16]) {
  %55 = @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %56 = %55.0;
  %57 = cast(%var_2577, dtype="uint64") /* ty=Tensor[(9, 2, 2), uint64] */;
  %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(%56, dtype="uint64") /* ty=Tensor[(9, 2, 2), uint64] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %61 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %62 = cast(%var_2610, dtype="int16") /* ty=Tensor[(1521), int16] */;
  %63 = cast(%var_2610, dtype="int16") /* ty=Tensor[(1521), int16] */;
  %64 = reshape(%62, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %65 = reshape(%63, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %66 = @func_68(%64, %65) /* ty=(Tensor[(9, 13, 13), bool],) */;
  %67 = @func_2393() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180), int16]) */;
  %68 = minimum(%59, %60) /* ty=Tensor[(9, 2, 2), uint64] */;
  %69 = %61.0;
  %70 = %66.0;
  %71 = %67.3;
  (%68, %69, %70, %var_2610, %71)
}

def @func_5375() -> (Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) {
  %72 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
  %73 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
  %74 = @func_3217() /* ty=Tensor[(9, 2, 2), float64] */;
  %75 = cast(%74, dtype="float64") /* ty=Tensor[(9, 2, 2), float64] */;
  %76 = @func_5086() /* ty=(Tensor[(13, 10), float32],) */;
  %77 = %72.1;
  %78 = %73.1;
  %79 = sqrt(%75) /* ty=Tensor[(9, 2, 2), float64] */;
  %80 = %76.0;
  (%77, %78, %79, %80)
}

def @func_7893() -> (Tensor[(13, 10), float32],) {
  %81 = @func_5457() /* ty=Tensor[(13, 10), float32] */;
  (%81,)
}

def @func_8192(%var_8166: Tensor[(1, 180), int16]) -> (Tensor[(9, 2, 2), float64], Tensor[(30, 6), int16], Tensor[(1, 180), int16], Tensor[(3, 3, 14), bool], Tensor[(9), uint64], Tensor[(126), uint64], Tensor[(9, 2, 2), float64]) {
  %82 = @func_4876() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(9, 2, 2), float64]) */;
  %83 = cast(%var_8166, dtype="int16") /* ty=Tensor[(1, 180), int16] */;
  %84 = reshape(%83, newshape=[30, 6]) /* ty=Tensor[(30, 6), int16] */;
  %85 = @func_2178(%84) /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(30, 6), int16]) */;
  %86 = cast(meta[relay.Constant][6] /* ty=Tensor[(9), uint64] */, dtype="uint64") /* ty=Tensor[(9), uint64] */;
  %87 = cast(meta[relay.Constant][7] /* ty=Tensor[(126), uint64] */, dtype="uint64") /* ty=Tensor[(126), uint64] */;
  %88 = reshape(%86, newshape=[3, 3, 1]) /* ty=Tensor[(3, 3, 1), uint64] */;
  %89 = reshape(%87, newshape=[3, 3, 14]) /* ty=Tensor[(3, 3, 14), uint64] */;
  %90 = %82.10;
  %91 = %85.2;
  %92 = @func_8129(%88, %89) /* ty=Tensor[(3, 3, 14), bool] */;
  %93 = @func_7058() /* ty=Tensor[(9, 2, 2), float64] */;
  (%90, %91, %var_8166, %92, meta[relay.Constant][6] /* ty=Tensor[(9), uint64] */, meta[relay.Constant][7] /* ty=Tensor[(126), uint64] */, %93)
}

def @func_2486() -> Tensor[(13, 10), float32] {
  @func_2275() /* ty=Tensor[(13, 10), float32] */
}

def @func_3961() -> Tensor[(13, 10), float32] {
  %94 = @func_3532() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %94.0
}

def @func_11194() -> Tensor[(9, 2, 2), float64] {
  @func_3995() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_4437(%var_4400: Tensor[(9, 16, 9), float32], %var_4423: Tensor[(9, 16, 9), float32]) -> (Tensor[(9, 16, 9), float32], Tensor[(13, 10), float32], Tensor[(9, 16, 9), bool], Tensor[(3, 24), float32]) {
  %95 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 16, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 16, 9), float32] */;
  %96 = shape_of(%var_4400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%var_4400, dtype="float32") /* ty=Tensor[(9, 16, 9), float32] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %99 = @func_3908() /* ty=(Tensor[(13, 10), float32],) */;
  %100 = cast(%var_4423, dtype="bool") /* ty=Tensor[(9, 16, 9), bool] */;
  %101 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(9, 16, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 16, 9), float32] */, dtype="bool") /* ty=Tensor[(9, 16, 9), bool] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %104 = @func_2702() /* ty=(Tensor[(9, 2, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(3, 24), float32], Tensor[(250), int64], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) */;
  %105 = power(%97, %98) /* ty=Tensor[(9, 16, 9), float32] */;
  %106 = %99.0;
  %107 = logical_and(%102, %103) /* ty=Tensor[(9, 16, 9), bool] */;
  %108 = %104.2;
  (%105, %106, %107, %108)
}

def @func_10286() -> (Tensor[(13, 10), float32],) {
  %109 = @func_8532() /* ty=(Tensor[(13, 10), float32],) */;
  %110 = %109.0;
  (%110,)
}

def @func_183(%var_163: Tensor[(12, 3, 2), float32], %var_170: Tensor[(25, 10), int64]) -> (Tensor[(12, 3, 2), float32], Tensor[(5, 10, 5), bool], Tensor[(25, 10), int64], Tensor[(9, 13, 13), bool], Tensor[(1, 1521), float32]) {
  %111 = cast(%var_163, dtype="float32") /* ty=Tensor[(12, 3, 2), float32] */;
  %112 = cast(%var_170, dtype="int64") /* ty=Tensor[(25, 10), int64] */;
  %113 = cast(%var_170, dtype="int64") /* ty=Tensor[(25, 10), int64] */;
  %114 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 1521), int16] */, dtype="int16") /* ty=Tensor[(1, 1521), int16] */;
  %115 = reshape(%112, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %116 = reshape(%113, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %117 = reshape(%114, newshape=[1521]) /* ty=Tensor[(1521), int16] */;
  %118 = @func_118(%115, %116, %117) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %119 = %118.0;
  %120 = cast(%119, dtype="int64") /* ty=Tensor[(5, 10, 5), int64] */;
  %121 = cast(%119, dtype="int64") /* ty=Tensor[(5, 10, 5), int64] */;
  %122 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 1521), int16] */, dtype="int16") /* ty=Tensor[(1, 1521), int16] */;
  %123 = reshape(%120, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %124 = reshape(%121, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %125 = reshape(%122, newshape=[1521]) /* ty=Tensor[(1521), int16] */;
  %126 = @func_118(%123, %124, %125) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %127 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 1521), int16] */, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
  %128 = asinh(%111) /* ty=Tensor[(12, 3, 2), float32] */;
  %129 = %126.2;
  %130 = cos(%127) /* ty=Tensor[(1, 1521), float32] */;
  (%128, %119, %var_170, %129, %130)
}

def @func_1112(%var_1076: Tensor[(6, 15, 2), int16], %var_1077: Tensor[(6, 15, 2), int16], %var_1101: Tensor[(6, 15, 2), int16]) -> (Tensor[(6, 15, 2), float32], Tensor[(6, 15, 2), float32]) {
  %131 = cast(%var_1077, dtype="int16") /* ty=Tensor[(6, 15, 2), int16] */;
  %132 = shape_of(%var_1076, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%var_1076, dtype="int16") /* ty=Tensor[(6, 15, 2), int16] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %135 = bitwise_and(%133, %134) /* ty=Tensor[(6, 15, 2), int16] */;
  %136 = cast(%var_1101, dtype="float32") /* ty=Tensor[(6, 15, 2), float32] */;
  %137 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%135, dtype="float32") /* ty=Tensor[(6, 15, 2), float32] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %140 = cast(%var_1076, dtype="float32") /* ty=Tensor[(6, 15, 2), float32] */;
  %141 = sqrt(%140) /* ty=Tensor[(6, 15, 2), float32] */;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(6, 15, 2), float32] */;
  %143 = subtract(%138, %139) /* ty=Tensor[(6, 15, 2), float32] */;
  %144 = exp(%142) /* ty=Tensor[(6, 15, 2), float32] */;
  (%143, %144)
}

def @func_6143() -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) {
  %145 = @func_3258() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %146 = @func_3995() /* ty=Tensor[(9, 2, 2), float64] */;
  %147 = %145.1;
  (%146, %147)
}

def @func_10409() -> (Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), uint8]) {
  %148 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %149 = @func_2226() /* ty=Tensor[(9, 2, 2), uint16] */;
  %150 = %148.0;
  (%149, %150)
}

def @func_10645(%var_10635: Tensor[(8, 12), float32]) -> (Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(10, 10, 4), bool], Tensor[(10, 10, 4), uint8], Tensor[(8, 12), float32]) {
  %151 = @func_6717() /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32]) */;
  %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(40), int8] */, dtype="int8") /* ty=Tensor[(40), int8] */;
  %153 = reshape(%152, newshape=[10, 4]) /* ty=Tensor[(10, 4), int8] */;
  %154 = @func_8006(%153) /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), int16], Tensor[(10, 4), int8], Tensor[(36, 1), float32]) */;
  %155 = %154.0;
  %156 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 10, 4), uint8] */, dtype="bool") /* ty=Tensor[(10, 10, 4), bool] */;
  %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%155, dtype="bool") /* ty=Tensor[(10, 10, 4), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %160 = cast(%var_10635, dtype="float32") /* ty=Tensor[(8, 12), float32] */;
  %161 = cast(meta[relay.Constant][10] /* ty=Tensor[(40), int8] */, dtype="int8") /* ty=Tensor[(40), int8] */;
  %162 = reshape(%160, newshape=[6, 1, 16]) /* ty=Tensor[(6, 1, 16), float32] */;
  %163 = reshape(%161, newshape=[40]) /* ty=Tensor[(40), int8] */;
  %164 = @func_575(%162, %163) /* ty=(Tensor[(6, 1, 16), float32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(400), int8]) */;
  %165 = %151.1;
  %166 = less_equal(%158, %159) /* ty=Tensor[(10, 10, 4), bool] */;
  %167 = %164.1;
  (%165, meta[relay.Constant][10] /* ty=Tensor[(40), int8] */, %166, %167, %var_10635)
}

def @func_9043(%var_9025: Tensor[(1, 8, 7), float32]) -> (Tensor[(1, 8, 7), float32], Tensor[(40), int8], Tensor[(2, 20), float64], Tensor[(1521), int16]) {
  %168 = cast(%var_9025, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %169 = cast(meta[relay.Constant][12] /* ty=Tensor[(40), int8] */, dtype="int8") /* ty=Tensor[(40), int8] */;
  %170 = reshape(%169, newshape=[2, 20]) /* ty=Tensor[(2, 20), int8] */;
  %171 = @func_3638(%170) /* ty=(Tensor[(96), float32], Tensor[(2, 20), int8], Tensor[(400), float32], Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180, 1), int16]) */;
  %172 = %171.1;
  %173 = cast(%172, dtype="float64") /* ty=Tensor[(2, 20), float64] */;
  %174 = @func_8440() /* ty=(Tensor[(1521), int16], Tensor[(10, 10, 4), uint8]) */;
  %175 = atan(%168) /* ty=Tensor[(1, 8, 7), float32] */;
  %176 = sigmoid(%173) /* ty=Tensor[(2, 20), float64] */;
  %177 = %174.0;
  (%175, meta[relay.Constant][12] /* ty=Tensor[(40), int8] */, %176, %177)
}

def @func_4218() -> Tensor[(13, 10), float32] {
  @func_2275() /* ty=Tensor[(13, 10), float32] */
}

def @func_6313() -> Tensor[(13, 10), float32] {
  @func_3650() /* ty=Tensor[(13, 10), float32] */
}

def @func_4009() -> (Tensor[(9, 2, 2), float64],) {
  %178 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
  %179 = %178.1;
  (%179,)
}

def @func_11000(%var_10981: Tensor[(250), int64], %var_10995: Tensor[(96), float32]) -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(252), float64], Tensor[(250), int64], Tensor[(5, 13, 2), float32], Tensor[(10, 10, 4), uint8], Tensor[(96), float32]) {
  %180 = @func_10286() /* ty=(Tensor[(13, 10), float32],) */;
  %181 = @func_3258() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %182 = @func_9761() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), float32], Tensor[(36), uint16], Tensor[(540), uint32]) */;
  %183 = @func_4593() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32]) */;
  %184 = @func_7819() /* ty=(Tensor[(13, 10), float32],) */;
  %185 = @func_6412() /* ty=(Tensor[(13, 10), float32],) */;
  %186 = cast(meta[relay.Constant][13] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %187 = cast(%var_10981, dtype="int64") /* ty=Tensor[(250), int64] */;
  %188 = reshape(%186, newshape=[6, 42]) /* ty=Tensor[(6, 42), float64] */;
  %189 = reshape(%187, newshape=[25, 10]) /* ty=Tensor[(25, 10), int64] */;
  %190 = @func_2909(%188, %189) /* ty=(Tensor[(5, 13, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16], Tensor[(9, 2, 14), float64], Tensor[(6, 42), float64], Tensor[(25, 10), int64], Tensor[(13, 10), float32], Tensor[(9, 13, 13), bool]) */;
  %191 = %190.0;
  %192 = cast(%191, dtype="float32") /* ty=Tensor[(5, 13, 2), float32] */;
  %193 = cast(%var_10995, dtype="float32") /* ty=Tensor[(96), float32] */;
  %194 = reshape(%193, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
  %195 = @func_10645(%194) /* ty=(Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(10, 10, 4), bool], Tensor[(10, 10, 4), uint8], Tensor[(8, 12), float32]) */;
  %196 = %180.0;
  %197 = %181.0;
  %198 = %182.1;
  %199 = @func_6934() /* ty=Tensor[(13, 10), float32] */;
  %200 = %183.2;
  %201 = @func_8052() /* ty=Tensor[(9, 2, 2), uint16] */;
  %202 = @func_3961() /* ty=Tensor[(13, 10), float32] */;
  %203 = %184.0;
  %204 = %185.0;
  %205 = tan(%192) /* ty=Tensor[(5, 13, 2), float32] */;
  %206 = %195.3;
  (%196, %197, %198, %199, %200, %201, %202, %203, %204, meta[relay.Constant][13] /* ty=Tensor[(252), float64] */, %var_10981, %205, %206, %var_10995)
}

def @func_10798() -> (Tensor[(13, 10), float32],) {
  %207 = @func_7169() /* ty=(Tensor[(13, 10), float32],) */;
  %208 = %207.0;
  (%208,)
}

def @func_5010() -> (Tensor[(13, 10), float32],) {
  %209 = @func_4593() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32]) */;
  %210 = %209.2;
  (%210,)
}

def @func_4934(%var_4915: int16, %var_4916: Tensor[(11), int16]) -> (Tensor[(13, 10), float32], Tensor[(1, 11, 1), int16], int16, Tensor[(11), int16]) {
  %211 = @func_2993() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %212 = cast(%var_4915, dtype="int16") /* ty=int16 */;
  %213 = cast(%var_4916, dtype="int16") /* ty=Tensor[(11), int16] */;
  %214 = reshape(%212, newshape=[]) /* ty=int16 */;
  %215 = reshape(%213, newshape=[1, 11, 1]) /* ty=Tensor[(1, 11, 1), int16] */;
  %216 = @func_4029(%214, %215) /* ty=(Tensor[(1, 11, 1), int16],) */;
  %217 = %211.0;
  %218 = %216.0;
  (%217, %218, %var_4915, %var_4916)
}

def @func_10437(%var_10412: Tensor[(3, 7, 1), uint16], %var_10413: Tensor[(3, 7, 6), uint16]) -> (Tensor[(3, 7, 6), uint16], Tensor[(3, 7, 1), float32]) {
  %219 = cast(%var_10412, dtype="uint16") /* ty=Tensor[(3, 7, 1), uint16] */;
  %220 = cast(%var_10413, dtype="uint16") /* ty=Tensor[(3, 7, 6), uint16] */;
  %221 = cast(%var_10412, dtype="float32") /* ty=Tensor[(3, 7, 1), float32] */;
  %222 = add(%219, %220) /* ty=Tensor[(3, 7, 6), uint16] */;
  %223 = erf(%221) /* ty=Tensor[(3, 7, 1), float32] */;
  (%222, %223)
}

def @func_8440() -> (Tensor[(1521), int16], Tensor[(10, 10, 4), uint8]) {
  %224 = @func_2993() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %225 = @func_6717() /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32]) */;
  %226 = %224.3;
  %227 = %225.0;
  (%226, %227)
}

def @func_7451() -> (Tensor[(9, 2, 2), uint16],) {
  %228 = @func_6010() /* ty=Tensor[(9, 2, 2), uint16] */;
  (%228,)
}

def @func_3908() -> (Tensor[(13, 10), float32],) {
  %229 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %230 = %229.2;
  (%230,)
}

def @func_5233() -> (Tensor[(9, 2, 2), float64],) {
  %231 = @func_3995() /* ty=Tensor[(9, 2, 2), float64] */;
  (%231,)
}

def @func_7160() -> (Tensor[(96), float32],) {
  %232 = @func_3930() /* ty=Tensor[(96), float32] */;
  (%232,)
}

def @func_11303() -> Tensor[(9, 2, 2), float64] {
  %233 = @func_10097() /* ty=(Tensor[(9, 2, 2), float64],) */;
  %233.0
}

def @func_9915(%var_9910: Tensor[(56), float32]) -> (Tensor[(13, 14, 7), float32], Tensor[(9, 2, 2), uint16], Tensor[(72), float32], Tensor[(2, 20), float64], Tensor[(56), float32]) {
  %234 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 14, 7), float32] */, dtype="float32") /* ty=Tensor[(13, 14, 7), float32] */;
  %235 = cast(meta[relay.Constant][15] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %236 = reshape(%235, newshape=[72]) /* ty=Tensor[(72), float32] */;
  %237 = @func_3731(%236) /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(96), float32], Tensor[(5, 10, 5), bool], Tensor[(72), float32], Tensor[(250), int64]) */;
  %238 = cast(%var_9910, dtype="float32") /* ty=Tensor[(56), float32] */;
  %239 = reshape(%238, newshape=[1, 8, 7]) /* ty=Tensor[(1, 8, 7), float32] */;
  %240 = @func_9043(%239) /* ty=(Tensor[(1, 8, 7), float32], Tensor[(40), int8], Tensor[(2, 20), float64], Tensor[(1521), int16]) */;
  %241 = log2(%234) /* ty=Tensor[(13, 14, 7), float32] */;
  %242 = %237.1;
  %243 = %240.2;
  (%241, %242, meta[relay.Constant][15] /* ty=Tensor[(72), float32] */, %243, %var_9910)
}

def @func_10458() -> Tensor[(9, 2, 2), float64] {
  %244 = @func_10375() /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */;
  %244.2
}

def @func_8937() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), float32], Tensor[(13, 10), float32], Tensor[(9, 15, 12), float32], Tensor[(1620), float32], Tensor[(13, 10), float32], Tensor[(10, 10, 4), uint8]) {
  %245 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %246 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %247 = %246.0;
  %248 = cast(%247, dtype="float32") /* ty=Tensor[(10, 10, 4), float32] */;
  %249 = acosh(%248) /* ty=Tensor[(10, 10, 4), float32] */;
  %250 = cast(%249, dtype="float32") /* ty=Tensor[(10, 10, 4), float32] */;
  %251 = @func_7512() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */;
  %252 = cast(meta[relay.Constant][16] /* ty=Tensor[(1620), float32] */, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %253 = reshape(%252, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), float32] */;
  %254 = @func_3382(%253) /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), uint8], Tensor[(9, 15, 12), float32]) */;
  %255 = @func_6619() /* ty=(Tensor[(13, 10), float32],) */;
  %256 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %257 = @func_2562() /* ty=Tensor[(13, 10), float32] */;
  %258 = %245.0;
  %259 = cos(%250) /* ty=Tensor[(10, 10, 4), float32] */;
  %260 = %251.1;
  %261 = %254.3;
  %262 = %255.0;
  %263 = %256.0;
  (%257, %258, %259, %260, %261, meta[relay.Constant][16] /* ty=Tensor[(1620), float32] */, %262, %263)
}

def @func_11083(%var_11006: Tensor[(7, 5, 10), uint32], %var_11007: Tensor[(7, 5, 10), uint32], %var_11064: Tensor[(252, 1), float64], %var_11065: Tensor[(250), int64]) -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(7, 5, 10), float32], Tensor[(7, 5, 10), float64], Tensor[(10, 10, 4), uint8], Tensor[(1521), int16], Tensor[(252, 1), float64], Tensor[(250), int64]) {
  %264 = @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %265 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %266 = cast(%var_11007, dtype="uint32") /* ty=Tensor[(7, 5, 10), uint32] */;
  %267 = shape_of(%var_11006, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%var_11006, dtype="uint32") /* ty=Tensor[(7, 5, 10), uint32] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %270 = right_shift(%268, %269) /* ty=Tensor[(7, 5, 10), uint32] */;
  %271 = cast(%270, dtype="float32") /* ty=Tensor[(7, 5, 10), float32] */;
  %272 = cast(%var_11007, dtype="float32") /* ty=Tensor[(7, 5, 10), float32] */;
  %273 = asin(%272) /* ty=Tensor[(7, 5, 10), float32] */;
  %274 = cast(%273, dtype="float64") /* ty=Tensor[(7, 5, 10), float64] */;
  %275 = @func_10375() /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */;
  %276 = cast(%var_11064, dtype="float64") /* ty=Tensor[(252, 1), float64] */;
  %277 = cast(%var_11065, dtype="int64") /* ty=Tensor[(250), int64] */;
  %278 = reshape(%276, newshape=[6, 42]) /* ty=Tensor[(6, 42), float64] */;
  %279 = reshape(%277, newshape=[25, 10]) /* ty=Tensor[(25, 10), int64] */;
  %280 = @func_2909(%278, %279) /* ty=(Tensor[(5, 13, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16], Tensor[(9, 2, 14), float64], Tensor[(6, 42), float64], Tensor[(25, 10), int64], Tensor[(13, 10), float32], Tensor[(9, 13, 13), bool]) */;
  %281 = %264.0;
  %282 = %265.0;
  %283 = erf(%271) /* ty=Tensor[(7, 5, 10), float32] */;
  %284 = atan(%274) /* ty=Tensor[(7, 5, 10), float64] */;
  %285 = %275.0;
  %286 = %280.2;
  (%281, %282, %283, %284, %285, %286, %var_11064, %var_11065)
}

def @func_10032() -> Tensor[(13, 10), float32] {
  %287 = @func_9864() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */;
  %287.0
}

def @func_7592(%var_7571: Tensor[(9, 2, 2), uint16], %var_7590: Tensor[(540), uint32]) -> (Tensor[(9, 2, 2), float32], Tensor[(6, 10, 9), bool], uint32, Tensor[(540), uint32]) {
  %288 = @func_2226() /* ty=Tensor[(9, 2, 2), uint16] */;
  %289 = cast(%var_7571, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %293 = cast(meta[relay.Constant][17] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %294 = cast(%var_7590, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %295 = reshape(%293, newshape=[]) /* ty=uint32 */;
  %296 = reshape(%294, newshape=[6, 10, 9]) /* ty=Tensor[(6, 10, 9), uint32] */;
  %297 = @func_3059(%295, %296) /* ty=(Tensor[(6, 10, 9), bool], Tensor[(13, 10), float32]) */;
  %298 = power(%291, %292) /* ty=Tensor[(9, 2, 2), float32] */;
  %299 = %297.0;
  (%298, %299, meta[relay.Constant][17] /* ty=uint32 */, %var_7590)
}

def @func_3650() -> Tensor[(13, 10), float32] {
  @func_2562() /* ty=Tensor[(13, 10), float32] */
}

def @func_3659() -> Tensor[(13, 10), float32] {
  @func_3650() /* ty=Tensor[(13, 10), float32] */
}

def @func_5265(%var_5259: Tensor[(9, 2, 2), uint16]) -> Tensor[(9, 2, 2), int64] {
  %300 = @func_2993() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %301 = %300.1;
  %302 = cast(%var_5259, dtype="int64") /* ty=Tensor[(9, 2, 2), int64] */;
  %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%301, dtype="int64") /* ty=Tensor[(9, 2, 2), int64] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%304, %305) /* ty=Tensor[(9, 2, 2), int64] */
}

def @func_6934() -> Tensor[(13, 10), float32] {
  @func_6313() /* ty=Tensor[(13, 10), float32] */
}

def @func_68(%var_61: Tensor[(9, 13, 13), int16], %var_62: Tensor[(9, 13, 13), int16]) -> (Tensor[(9, 13, 13), bool],) {
  %306 = cast(%var_62, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %307 = shape_of(%var_61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%var_61, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %310 = not_equal(%308, %309) /* ty=Tensor[(9, 13, 13), bool] */;
  (%310,)
}

def @func_5734() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  %311 = @func_5079() /* ty=(Tensor[(13, 10), float32],) */;
  %312 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
  %313 = @func_4009() /* ty=(Tensor[(9, 2, 2), float64],) */;
  %314 = %311.0;
  %315 = %312.0;
  %316 = %313.0;
  (%314, %315, %316)
}

def @func_7338(%var_7227: Tensor[(40), int8], %var_7284: Tensor[(9, 2, 2), float32], %var_7316: Tensor[(9, 2, 2), uint64]) -> (Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(9, 2, 2), uint16], Tensor[(1620), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), int16], Tensor[(96), float32]) {
  %317 = @func_4876() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(9, 2, 2), float64]) */;
  %318 = @func_3258() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %319 = cast(meta[relay.Constant][18] /* ty=Tensor[(1620), float32] */, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %320 = reshape(%319, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), float32] */;
  %321 = @func_3382(%320) /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), uint8], Tensor[(9, 15, 12), float32]) */;
  %322 = cast(%var_7227, dtype="int8") /* ty=Tensor[(40), int8] */;
  %323 = reshape(%322, newshape=[2, 20]) /* ty=Tensor[(2, 20), int8] */;
  %324 = @func_3638(%323) /* ty=(Tensor[(96), float32], Tensor[(2, 20), int8], Tensor[(400), float32], Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180, 1), int16]) */;
  %325 = %324.3;
  %326 = cast(%325, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %327 = atanh(%326) /* ty=Tensor[(9, 2, 2), float32] */;
  %328 = cast(%var_7284, dtype="uint64") /* ty=Tensor[(9, 2, 2), uint64] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%327, dtype="uint64") /* ty=Tensor[(9, 2, 2), uint64] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %332 = subtract(%330, %331) /* ty=Tensor[(9, 2, 2), uint64] */;
  %333 = cast(%var_7316, dtype="int16") /* ty=Tensor[(9, 2, 2), int16] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%332, dtype="int16") /* ty=Tensor[(9, 2, 2), int16] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %337 = %317.7;
  %338 = %318.0;
  %339 = %321.1;
  %340 = @func_6934() /* ty=Tensor[(13, 10), float32] */;
  %341 = bitwise_or(%335, %336) /* ty=Tensor[(9, 2, 2), int16] */;
  %342 = @func_3930() /* ty=Tensor[(96), float32] */;
  (%337, %338, %var_7227, %339, meta[relay.Constant][18] /* ty=Tensor[(1620), float32] */, %340, %341, %342)
}

def @func_9470(%var_9456: Tensor[(130, 1), float32]) -> (Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32], Tensor[(130, 1), float64]) {
  %343 = @func_7451() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %344 = cast(%var_9456, dtype="float32") /* ty=Tensor[(130, 1), float32] */;
  %345 = reshape(%344, newshape=[5, 13, 2]) /* ty=Tensor[(5, 13, 2), float32] */;
  %346 = cast(%var_9456, dtype="float32") /* ty=Tensor[(130, 1), float32] */;
  %347 = sigmoid(%346) /* ty=Tensor[(130, 1), float32] */;
  %348 = cast(%347, dtype="float64") /* ty=Tensor[(130, 1), float64] */;
  %349 = %343.0;
  %350 = @func_1519(%345) /* ty=Tensor[(5, 13, 2), float32] */;
  %351 = @func_6934() /* ty=Tensor[(13, 10), float32] */;
  %352 = atan(%348) /* ty=Tensor[(130, 1), float64] */;
  (%349, %350, %351, %352)
}

def @func_10556() -> Tensor[(13, 10), float32] {
  %353 = @func_6412() /* ty=(Tensor[(13, 10), float32],) */;
  %353.0
}

def @func_5900() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  %354 = @func_5079() /* ty=(Tensor[(13, 10), float32],) */;
  %355 = %354.0;
  %356 = @func_5457() /* ty=Tensor[(13, 10), float32] */;
  (%355, %356)
}

def @func_2909(%var_2884: Tensor[(6, 42), float64], %var_2885: Tensor[(25, 10), int64]) -> (Tensor[(5, 13, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16], Tensor[(9, 2, 14), float64], Tensor[(6, 42), float64], Tensor[(25, 10), int64], Tensor[(13, 10), float32], Tensor[(9, 13, 13), bool]) {
  %357 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %358 = %357.1;
  %359 = cast(%358, dtype="float32") /* ty=Tensor[(5, 13, 2), float32] */;
  %360 = cast(meta[relay.Constant][19] /* ty=Tensor[(1521), int16] */, dtype="int16") /* ty=Tensor[(1521), int16] */;
  %361 = cast(meta[relay.Constant][19] /* ty=Tensor[(1521), int16] */, dtype="int16") /* ty=Tensor[(1521), int16] */;
  %362 = reshape(%360, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %363 = reshape(%361, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %364 = @func_68(%362, %363) /* ty=(Tensor[(9, 13, 13), bool],) */;
  %365 = cast(%var_2884, dtype="float64") /* ty=Tensor[(6, 42), float64] */;
  %366 = cast(meta[relay.Constant][19] /* ty=Tensor[(1521), int16] */, dtype="int16") /* ty=Tensor[(1521), int16] */;
  %367 = cast(%var_2885, dtype="int64") /* ty=Tensor[(25, 10), int64] */;
  %368 = reshape(%365, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), float64] */;
  %369 = reshape(%366, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), int16] */;
  %370 = reshape(%367, newshape=[250]) /* ty=Tensor[(250), int64] */;
  %371 = @func_366(%368, %369, %370) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(1, 1521), int16], Tensor[(9, 2, 14), float32], Tensor[(9, 2, 14), float64], Tensor[(5, 10, 5), bool], Tensor[(250), int64]) */;
  %372 = %364.0;
  %373 = cast(%372, dtype="int16") /* ty=Tensor[(9, 13, 13), int16] */;
  %374 = cast(%372, dtype="int16") /* ty=Tensor[(9, 13, 13), int16] */;
  %375 = reshape(%373, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %376 = reshape(%374, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %377 = @func_68(%375, %376) /* ty=(Tensor[(9, 13, 13), bool],) */;
  %378 = log(%359) /* ty=Tensor[(5, 13, 2), float32] */;
  %379 = %371.3;
  %380 = @func_2275() /* ty=Tensor[(13, 10), float32] */;
  %381 = %377.0;
  (%378, %372, meta[relay.Constant][19] /* ty=Tensor[(1521), int16] */, %379, %var_2884, %var_2885, %380, %381)
}

def @func_3995() -> Tensor[(9, 2, 2), float64] {
  %382 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
  %382.1
}

def @func_575(%var_553: Tensor[(6, 1, 16), float32], %var_565: Tensor[(40), int8]) -> (Tensor[(6, 1, 16), float32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(400), int8]) {
  %383 = cast(%var_553, dtype="float32") /* ty=Tensor[(6, 1, 16), float32] */;
  %384 = cast(%var_565, dtype="int8") /* ty=Tensor[(40), int8] */;
  %385 = cast(meta[relay.Constant][20] /* ty=Tensor[(400), int8] */, dtype="int8") /* ty=Tensor[(400), int8] */;
  %386 = reshape(%384, newshape=[10, 1, 4]) /* ty=Tensor[(10, 1, 4), int8] */;
  %387 = reshape(%385, newshape=[10, 10, 4]) /* ty=Tensor[(10, 10, 4), int8] */;
  %388 = sqrt(%383) /* ty=Tensor[(6, 1, 16), float32] */;
  %389 = @func_541(%386, %387) /* ty=Tensor[(10, 10, 4), uint8] */;
  (%388, %389, %var_565, meta[relay.Constant][20] /* ty=Tensor[(400), int8] */)
}

def @func_4965() -> (Tensor[(9, 2, 2), float64],) {
  %390 = @func_3995() /* ty=Tensor[(9, 2, 2), float64] */;
  (%390,)
}

def @func_7169() -> (Tensor[(13, 10), float32],) {
  %391 = @func_4218() /* ty=Tensor[(13, 10), float32] */;
  (%391,)
}

def @func_11156(%var_11139: Tensor[(400), int8]) -> (Tensor[(96), float32], Tensor[(40), int8], Tensor[(400), bool]) {
  %392 = @func_3694() /* ty=(Tensor[(96), float32],) */;
  %393 = cast(meta[relay.Constant][21] /* ty=Tensor[(40), int8] */, dtype="int8") /* ty=Tensor[(40), int8] */;
  %394 = cast(%var_11139, dtype="int8") /* ty=Tensor[(400), int8] */;
  %395 = reshape(%393, newshape=[10, 1, 4]) /* ty=Tensor[(10, 1, 4), int8] */;
  %396 = reshape(%394, newshape=[10, 10, 4]) /* ty=Tensor[(10, 10, 4), int8] */;
  %397 = @func_541(%395, %396) /* ty=Tensor[(10, 10, 4), uint8] */;
  %398 = cast(%397, dtype="bool") /* ty=Tensor[(10, 10, 4), bool] */;
  %399 = shape_of(%var_11139, dtype="int32") /* ty=Tensor[(1), int32] */;
  %400 = cast(%var_11139, dtype="bool") /* ty=Tensor[(400), bool] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?), bool] */;
  %402 = %392.0;
  %403 = equal(%400, %401) /* ty=Tensor[(400), bool] */;
  (%402, meta[relay.Constant][21] /* ty=Tensor[(40), int8] */, %403)
}

def @func_10685() -> (Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), float32]) {
  %404 = @func_3920() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %405 = @func_7451() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %406 = %405.0;
  %407 = cast(%406, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %408 = %404.0;
  %409 = cosh(%407) /* ty=Tensor[(9, 2, 2), float32] */;
  (%408, %409)
}

def @func_9407(%var_9379: Tensor[(5, 1, 6), uint32], %var_9380: Tensor[(5, 15, 6), uint32]) -> (Tensor[(5, 15, 6), uint32], Tensor[(5, 15, 6), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16]) {
  %410 = cast(%var_9379, dtype="uint32") /* ty=Tensor[(5, 1, 6), uint32] */;
  %411 = cast(%var_9380, dtype="uint32") /* ty=Tensor[(5, 15, 6), uint32] */;
  %412 = cast(%var_9380, dtype="float32") /* ty=Tensor[(5, 15, 6), float32] */;
  %413 = @func_7198() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) */;
  %414 = @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %415 = logical_xor(%410, %411) /* ty=Tensor[(5, 15, 6), uint32] */;
  %416 = cos(%412) /* ty=Tensor[(5, 15, 6), float32] */;
  %417 = %413.2;
  %418 = %414.0;
  (%415, %416, %417, %418)
}

def @func_2993() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) {
  %419 = @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %420 = cast(meta[relay.Constant][22] /* ty=Tensor[(1521), int16] */, dtype="int16") /* ty=Tensor[(1521), int16] */;
  %421 = cast(meta[relay.Constant][22] /* ty=Tensor[(1521), int16] */, dtype="int16") /* ty=Tensor[(1521), int16] */;
  %422 = reshape(%420, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %423 = reshape(%421, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %424 = @func_68(%422, %423) /* ty=(Tensor[(9, 13, 13), bool],) */;
  %425 = @func_2562() /* ty=Tensor[(13, 10), float32] */;
  %426 = %419.0;
  %427 = %424.0;
  (%425, %426, %427, meta[relay.Constant][22] /* ty=Tensor[(1521), int16] */)
}

def @func_5457() -> Tensor[(13, 10), float32] {
  %428 = @func_3908() /* ty=(Tensor[(13, 10), float32],) */;
  %428.0
}

def @func_6068() -> Tensor[(9, 2, 2), int64] {
  %429 = @func_5816() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), int64]) */;
  %429.2
}

def @func_6643() -> (Tensor[(9, 2, 2), float64],) {
  %430 = @func_6143() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */;
  %431 = %430.0;
  (%431,)
}

def @func_7144(%var_7137: Tensor[(9, 2, 2), float64]) -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), bool], Tensor[(10, 10, 4), uint8]) {
  %432 = @func_6619() /* ty=(Tensor[(13, 10), float32],) */;
  %433 = @func_3217() /* ty=Tensor[(9, 2, 2), float64] */;
  %434 = cast(%var_7137, dtype="bool") /* ty=Tensor[(9, 2, 2), bool] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="bool") /* ty=Tensor[(9, 2, 2), bool] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %438 = @func_2145() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(10, 10, 4), uint8], Tensor[(96), float32], Tensor[(40), int8]) */;
  %439 = %432.0;
  %440 = less_equal(%436, %437) /* ty=Tensor[(9, 2, 2), bool] */;
  %441 = %438.1;
  (%439, %440, %441)
}

def @func_4544() -> (Tensor[(1521), int16], Tensor[(9, 2, 2), float64]) {
  %442 = @func_2993() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %443 = @func_4115() /* ty=(Tensor[(9, 2, 2), float64],) */;
  %444 = %442.3;
  %445 = %443.0;
  (%444, %445)
}

def @func_4029(%var_4013: int16, %var_4014: Tensor[(1, 11, 1), int16]) -> (Tensor[(1, 11, 1), int16],) {
  %446 = cast(%var_4013, dtype="int16") /* ty=int16 */;
  %447 = cast(%var_4014, dtype="int16") /* ty=Tensor[(1, 11, 1), int16] */;
  %448 = subtract(%446, %447) /* ty=Tensor[(1, 11, 1), int16] */;
  (%448,)
}

def @func_8741(%var_8739: Tensor[(11), int16]) -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], int16, Tensor[(11), int16]) {
  %449 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
  %450 = cast(meta[relay.Constant][23] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %451 = cast(%var_8739, dtype="int16") /* ty=Tensor[(11), int16] */;
  %452 = reshape(%450, newshape=[]) /* ty=int16 */;
  %453 = reshape(%451, newshape=[11]) /* ty=Tensor[(11), int16] */;
  %454 = @func_4934(%452, %453) /* ty=(Tensor[(13, 10), float32], Tensor[(1, 11, 1), int16], int16, Tensor[(11), int16]) */;
  %455 = %449.0;
  %456 = %454.0;
  (%455, %456, meta[relay.Constant][23] /* ty=int16 */, %var_8739)
}

def @func_4876() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(9, 2, 2), float64]) {
  %457 = @func_3532() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %458 = cast(meta[relay.Constant][24] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %459 = cast(meta[relay.Constant][25] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %460 = reshape(%458, newshape=[]) /* ty=uint32 */;
  %461 = reshape(%459, newshape=[6, 10, 9]) /* ty=Tensor[(6, 10, 9), uint32] */;
  %462 = @func_3059(%460, %461) /* ty=(Tensor[(6, 10, 9), bool], Tensor[(13, 10), float32]) */;
  %463 = @func_4115() /* ty=(Tensor[(9, 2, 2), float64],) */;
  %464 = @func_4009() /* ty=(Tensor[(9, 2, 2), float64],) */;
  %465 = %464.0;
  %466 = cast(%465, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %467 = @func_2545() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %468 = @func_2393() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180), int16]) */;
  %469 = @func_4544() /* ty=(Tensor[(1521), int16], Tensor[(9, 2, 2), float64]) */;
  %470 = %457.0;
  %471 = %462.1;
  %472 = %463.0;
  %473 = @func_3650() /* ty=Tensor[(13, 10), float32] */;
  %474 = @func_3217() /* ty=Tensor[(9, 2, 2), float64] */;
  %475 = asin(%466) /* ty=Tensor[(9, 2, 2), float32] */;
  %476 = %467.0;
  %477 = %468.2;
  %478 = %469.1;
  (%470, %471, meta[relay.Constant][24] /* ty=uint32 */, meta[relay.Constant][25] /* ty=Tensor[(540), uint32] */, %472, %473, %474, %475, %476, %477, %478)
}

def @func_2275() -> Tensor[(13, 10), float32] {
  %479 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %479.2
}

def @func_6010() -> Tensor[(9, 2, 2), uint16] {
  %480 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %480.0
}

def @func_7198() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) {
  %481 = @func_5778() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */;
  %482 = @func_2393() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180), int16]) */;
  %483 = %481.0;
  %484 = @func_2275() /* ty=Tensor[(13, 10), float32] */;
  %485 = %482.0;
  (%483, %484, %485)
}

def @func_10272(%var_10236: Tensor[(1296), float32], %var_10263: Tensor[(220), float32], %var_10266: Tensor[(1296), float32]) -> (Tensor[(9, 2, 2), bool], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(11, 2, 10), float32], Tensor[(220), float32], Tensor[(1296), int64]) {
  %486 = @func_7058() /* ty=Tensor[(9, 2, 2), float64] */;
  %487 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 2, 2), float64] */, dtype="bool") /* ty=Tensor[(9, 2, 2), bool] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%486, dtype="bool") /* ty=Tensor[(9, 2, 2), bool] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %491 = cast(%var_10236, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %492 = cast(%var_10236, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %493 = reshape(%491, newshape=[9, 16, 9]) /* ty=Tensor[(9, 16, 9), float32] */;
  %494 = reshape(%492, newshape=[9, 16, 9]) /* ty=Tensor[(9, 16, 9), float32] */;
  %495 = @func_4437(%493, %494) /* ty=(Tensor[(9, 16, 9), float32], Tensor[(13, 10), float32], Tensor[(9, 16, 9), bool], Tensor[(3, 24), float32]) */;
  %496 = @func_5900() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %497 = cast(%var_10263, dtype="float32") /* ty=Tensor[(220), float32] */;
  %498 = cast(%var_10263, dtype="float32") /* ty=Tensor[(220), float32] */;
  %499 = reshape(%497, newshape=[11, 2, 10]) /* ty=Tensor[(11, 2, 10), float32] */;
  %500 = reshape(%498, newshape=[11, 2, 10]) /* ty=Tensor[(11, 2, 10), float32] */;
  %501 = @func_755(%499, %500) /* ty=(Tensor[(11, 2, 10), float32],) */;
  %502 = cast(%var_10236, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %503 = cosh(%502) /* ty=Tensor[(1296), float32] */;
  %504 = cast(%var_10266, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %505 = shape_of(%503, dtype="int32") /* ty=Tensor[(1), int32] */;
  %506 = cast(%503, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?), int64] */;
  %508 = not_equal(%489, %490) /* ty=Tensor[(9, 2, 2), bool] */;
  %509 = %495.1;
  %510 = %496.1;
  %511 = %501.0;
  %512 = logical_xor(%506, %507) /* ty=Tensor[(1296), int64] */;
  (%508, %509, %510, %511, %var_10263, %512)
}

def @func_9105() -> (Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  %513 = @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %514 = @func_5375() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */;
  %515 = %514.2;
  %516 = cast(%515, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %517 = log2(%516) /* ty=Tensor[(9, 2, 2), float32] */;
  %518 = cast(%517, dtype="float64") /* ty=Tensor[(9, 2, 2), float64] */;
  %519 = %513.0;
  %520 = @func_2275() /* ty=Tensor[(13, 10), float32] */;
  %521 = sinh(%518) /* ty=Tensor[(9, 2, 2), float64] */;
  (%519, %520, %521)
}

def @func_10906() -> (Tensor[(13, 10), float32],) {
  %522 = @func_8698() /* ty=Tensor[(13, 10), float32] */;
  (%522,)
}

def @func_11255(%var_11225: Tensor[(13, 3, 3), float32]) -> (Tensor[(13, 3, 3), float32], Tensor[(13, 3, 3), float64], Tensor[(13, 10), float32]) {
  %523 = cast(%var_11225, dtype="float32") /* ty=Tensor[(13, 3, 3), float32] */;
  %524 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(13, 3, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 3, 3), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 3), float32] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %527 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 3, 3), float32] */, dtype="float64") /* ty=Tensor[(13, 3, 3), float64] */;
  %528 = power(%525, %526) /* ty=Tensor[(13, 3, 3), float32] */;
  %529 = log(%527) /* ty=Tensor[(13, 3, 3), float64] */;
  %530 = @func_3650() /* ty=Tensor[(13, 10), float32] */;
  (%528, %529, %530)
}

def @func_8052() -> Tensor[(9, 2, 2), uint16] {
  %531 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %531.0
}

def @func_8603(%var_8585: Tensor[(11, 15, 13), float32]) -> (Tensor[(11, 15, 13), float32],) {
  %532 = cast(%var_8585, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %533 = rsqrt(%532) /* ty=Tensor[(11, 15, 13), float32] */;
  (%533,)
}

def @func_8006(%var_7990: Tensor[(10, 4), int8]) -> (Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), int16], Tensor[(10, 4), int8], Tensor[(36, 1), float32]) {
  %534 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %535 = cast(%var_7990, dtype="int8") /* ty=Tensor[(10, 4), int8] */;
  %536 = cast(meta[relay.Constant][28] /* ty=Tensor[(36, 1), float32] */, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
  %537 = cast(meta[relay.Constant][28] /* ty=Tensor[(36, 1), float32] */, dtype="uint64") /* ty=Tensor[(36, 1), uint64] */;
  %538 = reshape(%535, newshape=[40]) /* ty=Tensor[(40), int8] */;
  %539 = reshape(%536, newshape=[9, 2, 2]) /* ty=Tensor[(9, 2, 2), float32] */;
  %540 = reshape(%537, newshape=[9, 2, 2]) /* ty=Tensor[(9, 2, 2), uint64] */;
  %541 = @func_7338(%538, %539, %540) /* ty=(Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(9, 2, 2), uint16], Tensor[(1620), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), int16], Tensor[(96), float32]) */;
  %542 = %534.0;
  %543 = %541.6;
  (%542, %543, %var_7990, meta[relay.Constant][28] /* ty=Tensor[(36, 1), float32] */)
}

def @func_3034() -> (Tensor[(13, 10), float32],) {
  %544 = @func_2562() /* ty=Tensor[(13, 10), float32] */;
  (%544,)
}

def @func_1519(%var_1514: Tensor[(5, 13, 2), float32]) -> Tensor[(5, 13, 2), float32] {
  %545 = cast(%var_1514, dtype="float32") /* ty=Tensor[(5, 13, 2), float32] */;
  sigmoid(%545) /* ty=Tensor[(5, 13, 2), float32] */
}

def @func_10584() -> Tensor[(13, 10), float32] {
  @func_9371() /* ty=Tensor[(13, 10), float32] */
}

def @func_3829(%var_3790: Tensor[(9, 2, 2), float64]) -> (Tensor[(9, 2, 2), bool], Tensor[(13, 10), float32], Tensor[(1, 14, 8), float32], Tensor[(112), float32]) {
  %546 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
  %547 = %546.1;
  %548 = cast(%var_3790, dtype="bool") /* ty=Tensor[(9, 2, 2), bool] */;
  %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%547, dtype="bool") /* ty=Tensor[(9, 2, 2), bool] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %552 = cast(meta[relay.Constant][29] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %553 = reshape(%552, newshape=[1, 14, 8]) /* ty=Tensor[(1, 14, 8), float32] */;
  %554 = equal(%550, %551) /* ty=Tensor[(9, 2, 2), bool] */;
  %555 = @func_3650() /* ty=Tensor[(13, 10), float32] */;
  %556 = @func_2248(%553) /* ty=Tensor[(1, 14, 8), float32] */;
  (%554, %555, %556, meta[relay.Constant][29] /* ty=Tensor[(112), float32] */)
}

def @func_9250() -> Tensor[(9, 2, 2), float64] {
  %557 = @func_6143() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */;
  %557.0
}

def @func_2393() -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180), int16]) {
  %558 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %559 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %560 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %561 = reshape(%560, newshape=[30, 6]) /* ty=Tensor[(30, 6), int16] */;
  %562 = @func_2178(%561) /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(30, 6), int16]) */;
  %563 = %558.0;
  %564 = %559.0;
  %565 = %562.1;
  (%563, %564, %565, meta[relay.Constant][30] /* ty=Tensor[(180), int16] */)
}

def @func_8541() -> Tensor[(9, 2, 2), float64] {
  @func_3217() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_3059(%var_3047: uint32, %var_3048: Tensor[(6, 10, 9), uint32]) -> (Tensor[(6, 10, 9), bool], Tensor[(13, 10), float32]) {
  %566 = cast(%var_3047, dtype="bool") /* ty=bool */;
  %567 = cast(%var_3048, dtype="bool") /* ty=Tensor[(6, 10, 9), bool] */;
  %568 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
  %569 = greater(%566, %567) /* ty=Tensor[(6, 10, 9), bool] */;
  %570 = %568.0;
  (%569, %570)
}

def @func_7819() -> (Tensor[(13, 10), float32],) {
  %571 = @func_2486() /* ty=Tensor[(13, 10), float32] */;
  (%571,)
}

def @func_3468() -> (Tensor[(96), float32], Tensor[(9, 2, 2), float64]) {
  %572 = @func_2145() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(10, 10, 4), uint8], Tensor[(96), float32], Tensor[(40), int8]) */;
  %573 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %574 = %573.0;
  %575 = cast(%574, dtype="float64") /* ty=Tensor[(9, 2, 2), float64] */;
  %576 = %572.2;
  %577 = tan(%575) /* ty=Tensor[(9, 2, 2), float64] */;
  (%576, %577)
}

def @func_5816() -> (Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), int64]) {
  %578 = @func_4115() /* ty=(Tensor[(9, 2, 2), float64],) */;
  %579 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
  %580 = %579.1;
  %581 = cast(%580, dtype="uint16") /* ty=Tensor[(9, 2, 2), uint16] */;
  %582 = reshape(%581, newshape=[9, 2, 2]) /* ty=Tensor[(9, 2, 2), uint16] */;
  %583 = %578.0;
  %584 = @func_5265(%582) /* ty=Tensor[(9, 2, 2), int64] */;
  (%583, %580, %584)
}

def @func_2042() -> (Tensor[(9, 2, 2), uint16],) {
  %585 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 2, 2), uint16] */, dtype="uint16") /* ty=Tensor[(9, 2, 2), uint16] */;
  %586 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(9, 2, 2), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 2, 2), uint16] */, dtype="uint16") /* ty=Tensor[(9, 2, 2), uint16] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %589 = maximum(%587, %588) /* ty=Tensor[(9, 2, 2), uint16] */;
  (%589,)
}

def @func_9534(%var_9503: float32, %var_9504: Tensor[(10, 8, 1), float32], %var_9527: Tensor[(36), float64]) -> (Tensor[(10, 8, 1), float32], Tensor[(13, 10), float32], Tensor[(36), float64]) {
  %590 = cast(%var_9503, dtype="float32") /* ty=float32 */;
  %591 = cast(%var_9504, dtype="float32") /* ty=Tensor[(10, 8, 1), float32] */;
  %592 = cast(%var_9527, dtype="float64") /* ty=Tensor[(36), float64] */;
  %593 = reshape(%592, newshape=[9, 2, 2]) /* ty=Tensor[(9, 2, 2), float64] */;
  %594 = @func_7144(%593) /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), bool], Tensor[(10, 10, 4), uint8]) */;
  %595 = power(%590, %591) /* ty=Tensor[(10, 8, 1), float32] */;
  %596 = %594.0;
  (%595, %596, %var_9527)
}

def @func_7058() -> Tensor[(9, 2, 2), float64] {
  @func_3995() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_3382(%var_3316: Tensor[(9, 15, 12), float32]) -> (Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), uint8], Tensor[(9, 15, 12), float32]) {
  %597 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %598 = @func_2393() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180), int16]) */;
  %599 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %600 = cast(%var_3316, dtype="float32") /* ty=Tensor[(9, 15, 12), float32] */;
  %601 = erf(%600) /* ty=Tensor[(9, 15, 12), float32] */;
  %602 = cast(%601, dtype="float32") /* ty=Tensor[(9, 15, 12), float32] */;
  %603 = asinh(%602) /* ty=Tensor[(9, 15, 12), float32] */;
  %604 = cast(%603, dtype="float32") /* ty=Tensor[(9, 15, 12), float32] */;
  %605 = %597.0;
  %606 = %598.0;
  %607 = %599.0;
  %608 = sin(%604) /* ty=Tensor[(9, 15, 12), float32] */;
  (%605, %606, %607, %608)
}

def @func_7512() -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) {
  %609 = @func_5778() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */;
  %610 = %609.1;
  %611 = @func_5457() /* ty=Tensor[(13, 10), float32] */;
  (%610, %611)
}

def @func_9864() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  %612 = @func_6567() /* ty=(Tensor[(6, 15, 2), float32], Tensor[(10, 10, 4), float32], Tensor[(13, 10), float32]) */;
  %613 = %612.2;
  %614 = @func_7058() /* ty=Tensor[(9, 2, 2), float64] */;
  (%613, %614)
}

def @func_3731(%var_3721: Tensor[(72), float32]) -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(96), float32], Tensor[(5, 10, 5), bool], Tensor[(72), float32], Tensor[(250), int64]) {
  %615 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %616 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %617 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
  %618 = cast(%var_3721, dtype="float32") /* ty=Tensor[(72), float32] */;
  %619 = cast(meta[relay.Constant][33] /* ty=Tensor[(250), int64] */, dtype="int64") /* ty=Tensor[(250), int64] */;
  %620 = reshape(%618, newshape=[12, 3, 2]) /* ty=Tensor[(12, 3, 2), float32] */;
  %621 = reshape(%619, newshape=[25, 10]) /* ty=Tensor[(25, 10), int64] */;
  %622 = @func_183(%620, %621) /* ty=(Tensor[(12, 3, 2), float32], Tensor[(5, 10, 5), bool], Tensor[(25, 10), int64], Tensor[(9, 13, 13), bool], Tensor[(1, 1521), float32]) */;
  %623 = %615.0;
  %624 = %616.0;
  %625 = %617.0;
  %626 = %622.1;
  (%623, %624, %625, %626, %var_3721, meta[relay.Constant][33] /* ty=Tensor[(250), int64] */)
}

def @func_8458() -> Tensor[(13, 10), float32] {
  %627 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
  %627.0
}

def @func_8698() -> Tensor[(13, 10), float32] {
  %628 = @func_5010() /* ty=(Tensor[(13, 10), float32],) */;
  %628.0
}

def @func_2304() -> (Tensor[(9, 2, 2), uint16],) {
  %629 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %630 = %629.0;
  (%630,)
}

def @func_2316() -> (Tensor[(10, 10, 4), uint8],) {
  %631 = @func_2145() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(10, 10, 4), uint8], Tensor[(96), float32], Tensor[(40), int8]) */;
  %632 = %631.1;
  (%632,)
}

def @func_3151(%var_3093: Tensor[(11, 13, 8), int32], %var_3094: Tensor[(11, 13, 8), int32]) -> (Tensor[(13, 10), float32], Tensor[(11, 13, 8), uint32]) {
  %633 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
  %634 = cast(%var_3094, dtype="int32") /* ty=Tensor[(11, 13, 8), int32] */;
  %635 = shape_of(%var_3093, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%var_3093, dtype="int32") /* ty=Tensor[(11, 13, 8), int32] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %638 = maximum(%636, %637) /* ty=Tensor[(11, 13, 8), int32] */;
  %639 = cast(meta[relay.Constant][34] /* ty=Tensor[(11, 13, 8), int32] */, dtype="uint32") /* ty=Tensor[(11, 13, 8), uint32] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%638, dtype="uint32") /* ty=Tensor[(11, 13, 8), uint32] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %643 = %633.0;
  %644 = bitwise_and(%641, %642) /* ty=Tensor[(11, 13, 8), uint32] */;
  (%643, %644)
}

def @func_3422() -> (Tensor[(10, 10, 4), uint8],) {
  %645 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %646 = %645.0;
  (%646,)
}

def @func_755(%var_744: Tensor[(11, 2, 10), float32], %var_745: Tensor[(11, 2, 10), float32]) -> (Tensor[(11, 2, 10), float32],) {
  %647 = cast(%var_745, dtype="float32") /* ty=Tensor[(11, 2, 10), float32] */;
  %648 = shape_of(%var_744, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%var_744, dtype="float32") /* ty=Tensor[(11, 2, 10), float32] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %651 = floor_mod(%649, %650) /* ty=Tensor[(11, 2, 10), float32] */;
  (%651,)
}

def @func_4115() -> (Tensor[(9, 2, 2), float64],) {
  %652 = @func_3217() /* ty=Tensor[(9, 2, 2), float64] */;
  (%652,)
}

def @func_10123() -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  %653 = @func_8532() /* ty=(Tensor[(13, 10), float32],) */;
  %654 = @func_7169() /* ty=(Tensor[(13, 10), float32],) */;
  %655 = @func_7058() /* ty=Tensor[(9, 2, 2), float64] */;
  %656 = %653.0;
  %657 = %654.0;
  (%655, %656, %657)
}

def @func_7753() -> (Tensor[(9, 2, 2), float32],) {
  %658 = @func_6143() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */;
  %659 = %658.0;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %661 = sigmoid(%660) /* ty=Tensor[(9, 2, 2), float32] */;
  (%661,)
}

def @func_2248(%var_2245: Tensor[(1, 14, 8), float32]) -> Tensor[(1, 14, 8), float32] {
  %662 = cast(%var_2245, dtype="float32") /* ty=Tensor[(1, 14, 8), float32] */;
  cos(%662) /* ty=Tensor[(1, 14, 8), float32] */
}

def @func_9371() -> Tensor[(13, 10), float32] {
  %663 = @func_8532() /* ty=(Tensor[(13, 10), float32],) */;
  %663.0
}

def @func_10375() -> (Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  %664 = @func_6717() /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32]) */;
  %665 = @func_7169() /* ty=(Tensor[(13, 10), float32],) */;
  %666 = %664.0;
  %667 = %665.0;
  %668 = @func_7058() /* ty=Tensor[(9, 2, 2), float64] */;
  (%666, %667, %668)
}

def @func_10498() -> Tensor[(9, 2, 2), float64] {
  %669 = @func_5816() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), int64]) */;
  %669.0
}

def @func_10791() -> (Tensor[(13, 10), float32], Tensor[(10, 10, 4), uint8], Tensor[(10, 10, 4), uint8]) {
  %670 = @func_7819() /* ty=(Tensor[(13, 10), float32],) */;
  %671 = @func_3920() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %672 = @func_5408() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %673 = %670.0;
  %674 = %671.0;
  %675 = %672.0;
  (%673, %674, %675)
}

def @func_10844() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  %676 = @func_3908() /* ty=(Tensor[(13, 10), float32],) */;
  %677 = @func_9371() /* ty=Tensor[(13, 10), float32] */;
  %678 = %676.0;
  (%677, %678)
}

def @func_10097() -> (Tensor[(9, 2, 2), float64],) {
  %679 = @func_5375() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */;
  %680 = %679.0;
  (%680,)
}

def @func_3258() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  %681 = @func_2275() /* ty=Tensor[(13, 10), float32] */;
  %682 = @func_2486() /* ty=Tensor[(13, 10), float32] */;
  (%681, %682)
}

def @func_3532() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  %683 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %684 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
  %685 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
  %686 = %683.2;
  %687 = %684.0;
  %688 = %685.0;
  (%686, %687, %688)
}

def @func_7369() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  %689 = @func_5778() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */;
  %690 = @func_6934() /* ty=Tensor[(13, 10), float32] */;
  %691 = %689.1;
  (%690, %691)
}

def @func_118(%var_87: Tensor[(5, 10, 5), int64], %var_102: Tensor[(5, 10, 5), int64], %var_116: Tensor[(1521), int16]) -> (Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) {
  %692 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 10, 5), int64] */, dtype="bool") /* ty=Tensor[(5, 10, 5), bool] */;
  %693 = shape_of(%var_87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%var_87, dtype="bool") /* ty=Tensor[(5, 10, 5), bool] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %696 = cast(%var_102, dtype="float32") /* ty=Tensor[(5, 10, 5), float32] */;
  %697 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(5, 10, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 10, 5), int64] */, dtype="float32") /* ty=Tensor[(5, 10, 5), float32] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %700 = cast(%var_116, dtype="int16") /* ty=Tensor[(1521), int16] */;
  %701 = cast(%var_116, dtype="int16") /* ty=Tensor[(1521), int16] */;
  %702 = reshape(%700, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %703 = reshape(%701, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %704 = @func_68(%702, %703) /* ty=(Tensor[(9, 13, 13), bool],) */;
  %705 = less_equal(%694, %695) /* ty=Tensor[(5, 10, 5), bool] */;
  %706 = power(%698, %699) /* ty=Tensor[(5, 10, 5), float32] */;
  %707 = %704.0;
  (%705, %706, %707, %var_116)
}

def @func_7918(%var_7898: Tensor[(12, 14, 7), float64]) -> Tensor[(12, 14, 7), float64] {
  %708 = cast(%var_7898, dtype="float64") /* ty=Tensor[(12, 14, 7), float64] */;
  sqrt(%708) /* ty=Tensor[(12, 14, 7), float64] */
}

def @func_5295() -> (Tensor[(9, 2, 2), uint16],) {
  %709 = @func_2226() /* ty=Tensor[(9, 2, 2), uint16] */;
  (%709,)
}

def @func_4593() -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32]) {
  %710 = @func_2545() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %711 = %710.0;
  %712 = @func_2226() /* ty=Tensor[(9, 2, 2), uint16] */;
  %713 = @func_2275() /* ty=Tensor[(13, 10), float32] */;
  (%711, %712, %713)
}

def @func_366(%var_313: Tensor[(9, 2, 14), float64], %var_333: Tensor[(1, 1521), int16], %var_363: Tensor[(250), int64]) -> (Tensor[(9, 13, 13), bool], Tensor[(1, 1521), int16], Tensor[(9, 2, 14), float32], Tensor[(9, 2, 14), float64], Tensor[(5, 10, 5), bool], Tensor[(250), int64]) {
  %714 = cast(%var_333, dtype="int16") /* ty=Tensor[(1, 1521), int16] */;
  %715 = cast(%var_333, dtype="int16") /* ty=Tensor[(1, 1521), int16] */;
  %716 = reshape(%714, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %717 = reshape(%715, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %718 = @func_68(%716, %717) /* ty=(Tensor[(9, 13, 13), bool],) */;
  %719 = cast(%var_313, dtype="float64") /* ty=Tensor[(9, 2, 14), float64] */;
  %720 = log(%719) /* ty=Tensor[(9, 2, 14), float64] */;
  %721 = cast(%var_313, dtype="int32") /* ty=Tensor[(9, 2, 14), int32] */;
  %722 = shape_of(%720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%720, dtype="int32") /* ty=Tensor[(9, 2, 14), int32] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %725 = bitwise_xor(%723, %724) /* ty=Tensor[(9, 2, 14), int32] */;
  %726 = cast(%725, dtype="float64") /* ty=Tensor[(9, 2, 14), float64] */;
  %727 = atanh(%726) /* ty=Tensor[(9, 2, 14), float64] */;
  %728 = cast(%727, dtype="uint8") /* ty=Tensor[(9, 2, 14), uint8] */;
  %729 = shape_of(%720, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%720, dtype="uint8") /* ty=Tensor[(9, 2, 14), uint8] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %732 = maximum(%730, %731) /* ty=Tensor[(9, 2, 14), uint8] */;
  %733 = cast(%732, dtype="float32") /* ty=Tensor[(9, 2, 14), float32] */;
  %734 = cast(%732, dtype="float64") /* ty=Tensor[(9, 2, 14), float64] */;
  %735 = cast(%var_363, dtype="int64") /* ty=Tensor[(250), int64] */;
  %736 = cast(%var_363, dtype="int64") /* ty=Tensor[(250), int64] */;
  %737 = %718.0;
  %738 = cast(%737, dtype="int16") /* ty=Tensor[(9, 13, 13), int16] */;
  %739 = reshape(%735, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %740 = reshape(%736, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %741 = reshape(%738, newshape=[1521]) /* ty=Tensor[(1521), int16] */;
  %742 = @func_118(%739, %740, %741) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %743 = asinh(%733) /* ty=Tensor[(9, 2, 14), float32] */;
  %744 = atan(%734) /* ty=Tensor[(9, 2, 14), float64] */;
  %745 = %742.0;
  (%737, %var_333, %743, %744, %745, %var_363)
}

def @func_6619() -> (Tensor[(13, 10), float32],) {
  %746 = @func_6263() /* ty=Tensor[(13, 10), float32] */;
  (%746,)
}

def @func_10525(%var_10503: float64, %var_10504: Tensor[(2, 16, 15), float64]) -> (Tensor[(2, 16, 15), float32],) {
  %747 = cast(%var_10503, dtype="float64") /* ty=float64 */;
  %748 = cast(%var_10504, dtype="float64") /* ty=Tensor[(2, 16, 15), float64] */;
  %749 = mod(%747, %748) /* ty=Tensor[(2, 16, 15), float64] */;
  %750 = cast(%749, dtype="float32") /* ty=Tensor[(2, 16, 15), float32] */;
  %751 = sin(%750) /* ty=Tensor[(2, 16, 15), float32] */;
  (%751,)
}

def @func_8491() -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  %752 = @func_4115() /* ty=(Tensor[(9, 2, 2), float64],) */;
  %753 = @func_5079() /* ty=(Tensor[(13, 10), float32],) */;
  %754 = %752.0;
  %755 = %753.0;
  %756 = @func_3961() /* ty=Tensor[(13, 10), float32] */;
  (%754, %755, %756)
}

def @func_6717() -> (Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32]) {
  %757 = @func_3920() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %758 = @func_5900() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %759 = %757.0;
  %760 = %758.1;
  (%759, %760)
}

def @func_10490(%var_10466: Tensor[(1, 4, 8), float64]) -> Tensor[(14, 4, 8), float64] {
  %761 = cast(%var_10466, dtype="float64") /* ty=Tensor[(1, 4, 8), float64] */;
  %762 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
  %763 = floor_divide(%761, %762) /* ty=Tensor[(14, 4, 8), float64] */;
  %764 = cast(%763, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
  sqrt(%764) /* ty=Tensor[(14, 4, 8), float64] */
}

def @func_9138(%var_9127: Tensor[(13, 2, 15), float32]) -> Tensor[(13, 2, 15), float32] {
  %765 = cast(meta[relay.Constant][37] /* ty=Tensor[(13, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 2, 15), float32] */;
  %766 = shape_of(%var_9127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %767 = cast(%var_9127, dtype="float32") /* ty=Tensor[(13, 2, 15), float32] */;
  %768 = dyn.reshape(%765, %766, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  subtract(%767, %768) /* ty=Tensor[(13, 2, 15), float32] */
}

def @func_6412() -> (Tensor[(13, 10), float32],) {
  %769 = @func_5010() /* ty=(Tensor[(13, 10), float32],) */;
  %770 = %769.0;
  (%770,)
}

def @func_2545() -> (Tensor[(9, 2, 2), uint16],) {
  %771 = @func_2226() /* ty=Tensor[(9, 2, 2), uint16] */;
  (%771,)
}

def @func_8973() -> (Tensor[(10, 10, 4), uint8],) {
  %772 = @func_3422() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %773 = %772.0;
  (%773,)
}

def @func_3694() -> (Tensor[(96), float32],) {
  %774 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
  %775 = %774.0;
  (%775,)
}

def @func_5189() -> (Tensor[(9, 2, 2), float32],) {
  %776 = @func_2702() /* ty=(Tensor[(9, 2, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(3, 24), float32], Tensor[(250), int64], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) */;
  %777 = %776.0;
  (%777,)
}

def @func_3920() -> (Tensor[(10, 10, 4), uint8],) {
  %778 = @func_3422() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %779 = %778.0;
  (%779,)
}

def @func_9609() -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 117), int16], Tensor[(84, 1), uint32], Tensor[(250), int64], Tensor[(13, 10), float32]) {
  %780 = @func_4115() /* ty=(Tensor[(9, 2, 2), float64],) */;
  %781 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
  %782 = cast(meta[relay.Constant][38] /* ty=Tensor[(84, 1), uint32] */, dtype="uint32") /* ty=Tensor[(84, 1), uint32] */;
  %783 = cast(meta[relay.Constant][39] /* ty=Tensor[(250), int64] */, dtype="int64") /* ty=Tensor[(250), int64] */;
  %784 = cast(meta[relay.Constant][38] /* ty=Tensor[(84, 1), uint32] */, dtype="uint32") /* ty=Tensor[(84, 1), uint32] */;
  %785 = reshape(%782, newshape=[3, 2, 14]) /* ty=Tensor[(3, 2, 14), uint32] */;
  %786 = reshape(%783, newshape=[250]) /* ty=Tensor[(250), int64] */;
  %787 = reshape(%784, newshape=[3, 2, 14]) /* ty=Tensor[(3, 2, 14), uint32] */;
  %788 = @func_2780(%785, %786, %787) /* ty=(Tensor[(3, 2, 14), uint32], Tensor[(250), int64], Tensor[(13, 117), int16], Tensor[(1521), float64], Tensor[(6, 15, 2), float32], Tensor[(180), int16], Tensor[(3, 2, 14), float32]) */;
  %789 = %780.0;
  %790 = @func_3650() /* ty=Tensor[(13, 10), float32] */;
  %791 = %781.0;
  %792 = %788.2;
  %793 = @func_8698() /* ty=Tensor[(13, 10), float32] */;
  (%789, %790, %791, %792, meta[relay.Constant][38] /* ty=Tensor[(84, 1), uint32] */, meta[relay.Constant][39] /* ty=Tensor[(250), int64] */, %793)
}

def @func_2201() -> (Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) {
  %794 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %795 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 10), float32] */, dtype="float32") /* ty=Tensor[(13, 10), float32] */;
  %796 = reshape(%795, newshape=[5, 13, 2]) /* ty=Tensor[(5, 13, 2), float32] */;
  %797 = %794.0;
  %798 = @func_1519(%796) /* ty=Tensor[(5, 13, 2), float32] */;
  (%797, %798, meta[relay.Constant][40] /* ty=Tensor[(13, 10), float32] */)
}

def @func_6263() -> Tensor[(13, 10), float32] {
  %799 = @func_2993() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %799.0
}

def @func_3217() -> Tensor[(9, 2, 2), float64] {
  %800 = @func_2145() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(10, 10, 4), uint8], Tensor[(96), float32], Tensor[(40), int8]) */;
  %800.0
}

def @func_6855(%var_6793: Tensor[(252), float64], %var_6794: Tensor[(1, 1521), int16], %var_6795: Tensor[(250), int64], %var_6835: Tensor[(11, 1521), float32]) -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 14), float32], Tensor[(252), float64], Tensor[(250), int64], Tensor[(6, 10, 9), bool], uint32, Tensor[(540), uint32], Tensor[(9, 13, 13), bool], Tensor[(11, 1521), uint32], Tensor[(7, 1521), float32]) {
  %801 = @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %802 = cast(%var_6793, dtype="float64") /* ty=Tensor[(252), float64] */;
  %803 = cast(%var_6794, dtype="int16") /* ty=Tensor[(1, 1521), int16] */;
  %804 = cast(%var_6795, dtype="int64") /* ty=Tensor[(250), int64] */;
  %805 = reshape(%802, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), float64] */;
  %806 = reshape(%803, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), int16] */;
  %807 = reshape(%804, newshape=[250]) /* ty=Tensor[(250), int64] */;
  %808 = @func_366(%805, %806, %807) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(1, 1521), int16], Tensor[(9, 2, 14), float32], Tensor[(9, 2, 14), float64], Tensor[(5, 10, 5), bool], Tensor[(250), int64]) */;
  %809 = cast(meta[relay.Constant][41] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %810 = cast(meta[relay.Constant][42] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %811 = reshape(%809, newshape=[]) /* ty=uint32 */;
  %812 = reshape(%810, newshape=[6, 10, 9]) /* ty=Tensor[(6, 10, 9), uint32] */;
  %813 = @func_3059(%811, %812) /* ty=(Tensor[(6, 10, 9), bool], Tensor[(13, 10), float32]) */;
  %814 = cast(%var_6795, dtype="int64") /* ty=Tensor[(250), int64] */;
  %815 = cast(%var_6795, dtype="int64") /* ty=Tensor[(250), int64] */;
  %816 = cast(%var_6794, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
  %817 = sin(%816) /* ty=Tensor[(1, 1521), float32] */;
  %818 = cast(%817, dtype="int16") /* ty=Tensor[(1, 1521), int16] */;
  %819 = reshape(%814, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %820 = reshape(%815, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %821 = reshape(%818, newshape=[1521]) /* ty=Tensor[(1521), int16] */;
  %822 = @func_118(%819, %820, %821) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %823 = cast(%var_6794, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
  %824 = shape_of(%817, dtype="int32") /* ty=Tensor[(2), int32] */;
  %825 = cast(%817, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %827 = subtract(%825, %826) /* ty=Tensor[(?, 1521), float32] */;
  %828 = cast(%827, dtype="float32") /* ty=Tensor[(?, 1521), float32] */;
  %829 = exp(%828) /* ty=Tensor[(?, 1521), float32] */;
  %830 = cast(%829, dtype="float32") /* ty=Tensor[(?, 1521), float32] */;
  %831 = acosh(%830) /* ty=Tensor[(?, 1521), float32] */;
  %832 = cast(%831, dtype="uint32") /* ty=Tensor[(?, 1521), uint32] */;
  %833 = cast(%var_6835, dtype="uint32") /* ty=Tensor[(11, 1521), uint32] */;
  %834 = cast(%831, dtype="float32") /* ty=Tensor[(?, 1521), float32] */;
  %835 = asinh(%834) /* ty=Tensor[(?, 1521), float32] */;
  %836 = cast(%835, dtype="float32") /* ty=Tensor[(?, 1521), float32] */;
  %837 = cast(meta[relay.Constant][43] /* ty=Tensor[(7, 1521), float32] */, dtype="float32") /* ty=Tensor[(7, 1521), float32] */;
  %838 = %801.0;
  %839 = %808.2;
  %840 = %813.0;
  %841 = %822.2;
  %842 = maximum(%832, %833) /* ty=Tensor[(11, 1521), uint32] */;
  %843 = mod(%836, %837) /* ty=Tensor[(7, 1521), float32] */;
  (%838, %839, %var_6793, %var_6795, %840, meta[relay.Constant][41] /* ty=uint32 */, meta[relay.Constant][42] /* ty=Tensor[(540), uint32] */, %841, %842, %843)
}

def @func_541(%var_510: Tensor[(10, 1, 4), int8], %var_511: Tensor[(10, 10, 4), int8]) -> Tensor[(10, 10, 4), uint8] {
  %844 = cast(%var_510, dtype="int8") /* ty=Tensor[(10, 1, 4), int8] */;
  %845 = cast(%var_511, dtype="int8") /* ty=Tensor[(10, 10, 4), int8] */;
  %846 = minimum(%844, %845) /* ty=Tensor[(10, 10, 4), int8] */;
  %847 = cast(%var_511, dtype="uint8") /* ty=Tensor[(10, 10, 4), uint8] */;
  %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%846, dtype="uint8") /* ty=Tensor[(10, 10, 4), uint8] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  add(%849, %850) /* ty=Tensor[(10, 10, 4), uint8] */
}

def @func_6399(%var_6365: Tensor[(1144), int32], %var_6382: Tensor[(40), int8], %var_6383: Tensor[(1, 400), int8]) -> (uint32, Tensor[(13, 10), float32], Tensor[(1144), int32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(1, 400), int8], Tensor[(9, 2, 2), float64]) {
  %851 = @func_4876() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(9, 2, 2), float64]) */;
  %852 = cast(%var_6365, dtype="int32") /* ty=Tensor[(1144), int32] */;
  %853 = cast(%var_6365, dtype="int32") /* ty=Tensor[(1144), int32] */;
  %854 = reshape(%852, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), int32] */;
  %855 = reshape(%853, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), int32] */;
  %856 = @func_3151(%854, %855) /* ty=(Tensor[(13, 10), float32], Tensor[(11, 13, 8), uint32]) */;
  %857 = cast(%var_6382, dtype="int8") /* ty=Tensor[(40), int8] */;
  %858 = cast(%var_6383, dtype="int8") /* ty=Tensor[(1, 400), int8] */;
  %859 = reshape(%857, newshape=[10, 1, 4]) /* ty=Tensor[(10, 1, 4), int8] */;
  %860 = reshape(%858, newshape=[10, 10, 4]) /* ty=Tensor[(10, 10, 4), int8] */;
  %861 = @func_5233() /* ty=(Tensor[(9, 2, 2), float64],) */;
  %862 = %851.2;
  %863 = %856.0;
  %864 = @func_541(%859, %860) /* ty=Tensor[(10, 10, 4), uint8] */;
  %865 = %861.0;
  (%862, %863, %var_6365, %864, %var_6382, %var_6383, %865)
}

def @func_5529(%var_5512: Tensor[(10, 10, 4), uint8], %var_5523: Tensor[(10, 10, 4), uint8]) -> (Tensor[(10, 10, 4), float64], Tensor[(10, 10, 4), float32], Tensor[(10, 10, 4), bool]) {
  %866 = @func_3920() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %867 = %866.0;
  %868 = cast(%var_5512, dtype="float64") /* ty=Tensor[(10, 10, 4), float64] */;
  %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %870 = cast(%867, dtype="float64") /* ty=Tensor[(10, 10, 4), float64] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %872 = cast(meta[relay.Constant][44] /* ty=Tensor[(10, 10, 4), uint8] */, dtype="float32") /* ty=Tensor[(10, 10, 4), float32] */;
  %873 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %874 = cast(%867, dtype="float32") /* ty=Tensor[(10, 10, 4), float32] */;
  %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %876 = cast(%var_5523, dtype="bool") /* ty=Tensor[(10, 10, 4), bool] */;
  %877 = shape_of(%var_5512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %878 = cast(%var_5512, dtype="bool") /* ty=Tensor[(10, 10, 4), bool] */;
  %879 = dyn.reshape(%876, %877, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %880 = mod(%870, %871) /* ty=Tensor[(10, 10, 4), float64] */;
  %881 = divide(%874, %875) /* ty=Tensor[(10, 10, 4), float32] */;
  %882 = greater(%878, %879) /* ty=Tensor[(10, 10, 4), bool] */;
  (%880, %881, %882)
}

def @func_8532() -> (Tensor[(13, 10), float32],) {
  %883 = @func_8458() /* ty=Tensor[(13, 10), float32] */;
  (%883,)
}

def @func_7707(%var_7704: Tensor[(252), float64], %var_7705: Tensor[(250), int64]) -> (Tensor[(13, 10), float32], Tensor[(25, 10), int64], Tensor[(252), float64], Tensor[(250), int64]) {
  %884 = cast(%var_7704, dtype="float64") /* ty=Tensor[(252), float64] */;
  %885 = cast(%var_7705, dtype="int64") /* ty=Tensor[(250), int64] */;
  %886 = reshape(%884, newshape=[6, 42]) /* ty=Tensor[(6, 42), float64] */;
  %887 = reshape(%885, newshape=[25, 10]) /* ty=Tensor[(25, 10), int64] */;
  %888 = @func_2909(%886, %887) /* ty=(Tensor[(5, 13, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16], Tensor[(9, 2, 14), float64], Tensor[(6, 42), float64], Tensor[(25, 10), int64], Tensor[(13, 10), float32], Tensor[(9, 13, 13), bool]) */;
  %889 = @func_4218() /* ty=Tensor[(13, 10), float32] */;
  %890 = %888.5;
  (%889, %890, %var_7704, %var_7705)
}

def @func_2178(%var_2174: Tensor[(30, 6), int16]) -> (Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(30, 6), int16]) {
  %891 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %892 = cast(%var_2174, dtype="int16") /* ty=Tensor[(30, 6), int16] */;
  %893 = cast(%var_2174, dtype="int16") /* ty=Tensor[(30, 6), int16] */;
  %894 = cast(%var_2174, dtype="int16") /* ty=Tensor[(30, 6), int16] */;
  %895 = reshape(%892, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %896 = reshape(%893, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %897 = reshape(%894, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %898 = @func_1112(%895, %896, %897) /* ty=(Tensor[(6, 15, 2), float32], Tensor[(6, 15, 2), float32]) */;
  %899 = %891.0;
  %900 = %898.1;
  (%899, %900, %var_2174)
}

def @func_2562() -> Tensor[(13, 10), float32] {
  %901 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %901.2
}

def @func_2780(%var_2731: Tensor[(3, 2, 14), uint32], %var_2753: Tensor[(250), int64], %var_2776: Tensor[(3, 2, 14), uint32]) -> (Tensor[(3, 2, 14), uint32], Tensor[(250), int64], Tensor[(13, 117), int16], Tensor[(1521), float64], Tensor[(6, 15, 2), float32], Tensor[(180), int16], Tensor[(3, 2, 14), float32]) {
  %902 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 2, 14), uint32] */, dtype="uint32") /* ty=Tensor[(3, 2, 14), uint32] */;
  %903 = shape_of(%var_2731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(%var_2731, dtype="uint32") /* ty=Tensor[(3, 2, 14), uint32] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %906 = cast(%var_2753, dtype="int64") /* ty=Tensor[(250), int64] */;
  %907 = cast(%var_2753, dtype="int64") /* ty=Tensor[(250), int64] */;
  %908 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 117), int16] */, dtype="int16") /* ty=Tensor[(13, 117), int16] */;
  %909 = reshape(%906, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %910 = reshape(%907, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %911 = reshape(%908, newshape=[1521]) /* ty=Tensor[(1521), int16] */;
  %912 = @func_118(%909, %910, %911) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %913 = %912.3;
  %914 = cast(%913, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %915 = cast(meta[relay.Constant][47] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %916 = cast(meta[relay.Constant][47] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %917 = cast(meta[relay.Constant][47] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %918 = reshape(%915, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %919 = reshape(%916, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %920 = reshape(%917, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %921 = @func_1112(%918, %919, %920) /* ty=(Tensor[(6, 15, 2), float32], Tensor[(6, 15, 2), float32]) */;
  %922 = cast(%var_2776, dtype="float32") /* ty=Tensor[(3, 2, 14), float32] */;
  %923 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(3, 2, 14), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %924 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 2, 14), uint32] */, dtype="float32") /* ty=Tensor[(3, 2, 14), float32] */;
  %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %926 = bitwise_or(%904, %905) /* ty=Tensor[(3, 2, 14), uint32] */;
  %927 = rsqrt(%914) /* ty=Tensor[(1521), float64] */;
  %928 = %921.1;
  %929 = mod(%924, %925) /* ty=Tensor[(3, 2, 14), float32] */;
  (%926, %var_2753, meta[relay.Constant][46] /* ty=Tensor[(13, 117), int16] */, %927, %928, meta[relay.Constant][47] /* ty=Tensor[(180), int16] */, %929)
}

def @func_3930() -> Tensor[(96), float32] {
  %930 = @func_3694() /* ty=(Tensor[(96), float32],) */;
  %930.0
}

def @func_10063(%var_10059: Tensor[(30, 1), uint32], %var_10060: Tensor[(150, 3), uint32]) -> (Tensor[(13, 10), float32], Tensor[(6, 10, 9), bool], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), uint16], Tensor[(30, 1), uint32], Tensor[(150, 3), uint32]) {
  %931 = @func_5900() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %932 = cast(meta[relay.Constant][48] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %933 = cast(meta[relay.Constant][49] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %934 = reshape(%932, newshape=[]) /* ty=uint32 */;
  %935 = reshape(%933, newshape=[6, 10, 9]) /* ty=Tensor[(6, 10, 9), uint32] */;
  %936 = @func_3059(%934, %935) /* ty=(Tensor[(6, 10, 9), bool], Tensor[(13, 10), float32]) */;
  %937 = cast(%var_10059, dtype="uint32") /* ty=Tensor[(30, 1), uint32] */;
  %938 = cast(%var_10060, dtype="uint32") /* ty=Tensor[(150, 3), uint32] */;
  %939 = reshape(%937, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), uint32] */;
  %940 = reshape(%938, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), uint32] */;
  %941 = @func_9407(%939, %940) /* ty=(Tensor[(5, 15, 6), uint32], Tensor[(5, 15, 6), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16]) */;
  %942 = %931.0;
  %943 = %936.0;
  %944 = %941.3;
  (%942, %943, meta[relay.Constant][48] /* ty=uint32 */, meta[relay.Constant][49] /* ty=Tensor[(540), uint32] */, %944, %var_10059, %var_10060)
}

def @func_5408() -> (Tensor[(10, 10, 4), uint8],) {
  %945 = @func_3920() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %946 = %945.0;
  (%946,)
}

def @func_5778() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  %947 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
  %948 = %947.0;
  %949 = @func_3217() /* ty=Tensor[(9, 2, 2), float64] */;
  (%948, %949)
}

def @func_7389() -> Tensor[(6, 15, 2), float32] {
  @func_5608() /* ty=Tensor[(6, 15, 2), float32] */
}

def @func_9238() -> Tensor[(13, 10), float32] {
  %950 = @func_7169() /* ty=(Tensor[(13, 10), float32],) */;
  %950.0
}

def @func_9293() -> (Tensor[(13, 10), float32],) {
  %951 = @func_8532() /* ty=(Tensor[(13, 10), float32],) */;
  %952 = %951.0;
  (%952,)
}

def @func_3638(%var_3566: Tensor[(2, 20), int8]) -> (Tensor[(96), float32], Tensor[(2, 20), int8], Tensor[(400), float32], Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180, 1), int16]) {
  %953 = cast(meta[relay.Constant][50] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %954 = cast(%var_3566, dtype="int8") /* ty=Tensor[(2, 20), int8] */;
  %955 = reshape(%953, newshape=[6, 1, 16]) /* ty=Tensor[(6, 1, 16), float32] */;
  %956 = reshape(%954, newshape=[40]) /* ty=Tensor[(40), int8] */;
  %957 = @func_575(%955, %956) /* ty=(Tensor[(6, 1, 16), float32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(400), int8]) */;
  %958 = %957.3;
  %959 = cast(%958, dtype="float32") /* ty=Tensor[(400), float32] */;
  %960 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %961 = %960.0;
  %962 = cast(%961, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %963 = cast(meta[relay.Constant][51] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %964 = cast(meta[relay.Constant][52] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %965 = reshape(%963, newshape=[]) /* ty=uint32 */;
  %966 = reshape(%964, newshape=[6, 10, 9]) /* ty=Tensor[(6, 10, 9), uint32] */;
  %967 = @func_3059(%965, %966) /* ty=(Tensor[(6, 10, 9), bool], Tensor[(13, 10), float32]) */;
  %968 = @func_2545() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %969 = cast(meta[relay.Constant][53] /* ty=Tensor[(180, 1), int16] */, dtype="int16") /* ty=Tensor[(180, 1), int16] */;
  %970 = cast(meta[relay.Constant][53] /* ty=Tensor[(180, 1), int16] */, dtype="int16") /* ty=Tensor[(180, 1), int16] */;
  %971 = cast(meta[relay.Constant][53] /* ty=Tensor[(180, 1), int16] */, dtype="int16") /* ty=Tensor[(180, 1), int16] */;
  %972 = reshape(%969, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %973 = reshape(%970, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %974 = reshape(%971, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %975 = @func_1112(%972, %973, %974) /* ty=(Tensor[(6, 15, 2), float32], Tensor[(6, 15, 2), float32]) */;
  %976 = sqrt(%959) /* ty=Tensor[(400), float32] */;
  %977 = cos(%962) /* ty=Tensor[(9, 2, 2), float32] */;
  %978 = %967.1;
  %979 = %968.0;
  %980 = %975.1;
  (meta[relay.Constant][50] /* ty=Tensor[(96), float32] */, %var_3566, %976, %977, %978, meta[relay.Constant][51] /* ty=uint32 */, meta[relay.Constant][52] /* ty=Tensor[(540), uint32] */, %979, %980, meta[relay.Constant][53] /* ty=Tensor[(180, 1), int16] */)
}

def @func_8366(%var_8282: int32, %var_8283: Tensor[(16, 4, 2), int32], %var_8354: Tensor[(1144), int32]) -> (Tensor[(16, 4, 2), bool], Tensor[(112), float32], Tensor[(36), float64], Tensor[(3, 24), float32], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(1144), int32], Tensor[(40), int8], Tensor[(400), int8]) {
  %981 = cast(%var_8282, dtype="bool") /* ty=bool */;
  %982 = cast(%var_8283, dtype="bool") /* ty=Tensor[(16, 4, 2), bool] */;
  %983 = cast(meta[relay.Constant][54] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %984 = reshape(%983, newshape=[9, 2, 2]) /* ty=Tensor[(9, 2, 2), float64] */;
  %985 = @func_3829(%984) /* ty=(Tensor[(9, 2, 2), bool], Tensor[(13, 10), float32], Tensor[(1, 14, 8), float32], Tensor[(112), float32]) */;
  %986 = @func_2702() /* ty=(Tensor[(9, 2, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(3, 24), float32], Tensor[(250), int64], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) */;
  %987 = @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %988 = cast(%var_8354, dtype="int32") /* ty=Tensor[(1144), int32] */;
  %989 = cast(meta[relay.Constant][55] /* ty=Tensor[(40), int8] */, dtype="int8") /* ty=Tensor[(40), int8] */;
  %990 = cast(meta[relay.Constant][56] /* ty=Tensor[(400), int8] */, dtype="int8") /* ty=Tensor[(400), int8] */;
  %991 = reshape(%988, newshape=[1144]) /* ty=Tensor[(1144), int32] */;
  %992 = reshape(%989, newshape=[40]) /* ty=Tensor[(40), int8] */;
  %993 = reshape(%990, newshape=[1, 400]) /* ty=Tensor[(1, 400), int8] */;
  %994 = @func_6399(%991, %992, %993) /* ty=(uint32, Tensor[(13, 10), float32], Tensor[(1144), int32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(1, 400), int8], Tensor[(9, 2, 2), float64]) */;
  %995 = not_equal(%981, %982) /* ty=Tensor[(16, 4, 2), bool] */;
  %996 = %985.3;
  %997 = %986.2;
  %998 = %987.0;
  %999 = @func_3650() /* ty=Tensor[(13, 10), float32] */;
  %1000 = %994.4;
  (%995, %996, meta[relay.Constant][54] /* ty=Tensor[(36), float64] */, %997, %998, %999, %1000, %var_8354, meta[relay.Constant][55] /* ty=Tensor[(40), int8] */, meta[relay.Constant][56] /* ty=Tensor[(400), int8] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_9046(%var_9044: Tensor[(1, 8, 7), float32]) -> (Tensor[(1, 8, 7), float32], Tensor[(40), int8], Tensor[(2, 20), float64], Tensor[(1521), int16]) {
  @func_9043(%var_9044) /* ty=(Tensor[(1, 8, 7), float32], Tensor[(40), int8], Tensor[(2, 20), float64], Tensor[(1521), int16]) */
}

def @func_5408() -> (Tensor[(10, 10, 4), uint8],) {
  %0 = @func_3920() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %1 = %0.0;
  (%1,)
}

def @func_10287() -> (Tensor[(13, 10), float32],) {
  %4 = fn () -> (Tensor[(13, 10), float32],) {
    %2 = @func_8532() /* ty=(Tensor[(13, 10), float32],) */;
    %3 = %2.0;
    (%3,)
  };
  %4() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_8129(%var_8097: Tensor[(3, 3, 1), uint64], %var_8098: Tensor[(3, 3, 14), uint64]) -> Tensor[(3, 3, 14), bool] {
  %5 = cast(%var_8097, dtype="bool") /* ty=Tensor[(3, 3, 1), bool] */;
  %6 = cast(%var_8098, dtype="bool") /* ty=Tensor[(3, 3, 14), bool] */;
  equal(%5, %6) /* ty=Tensor[(3, 3, 14), bool] */
}

def @func_1519(%var_1514: Tensor[(5, 13, 2), float32]) -> Tensor[(5, 13, 2), float32] {
  %7 = cast(%var_1514, dtype="float32") /* ty=Tensor[(5, 13, 2), float32] */;
  sigmoid(%7) /* ty=Tensor[(5, 13, 2), float32] */
}

def @func_3640(%var_3639: Tensor[(2, 20), int8]) -> (Tensor[(96), float32], Tensor[(2, 20), int8], Tensor[(400), float32], Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180, 1), int16]) {
  %36 = fn (%var_3566: Tensor[(2, 20), int8]) -> (Tensor[(96), float32], Tensor[(2, 20), int8], Tensor[(400), float32], Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180, 1), int16]) {
    %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
    %9 = cast(%var_3566, dtype="int8") /* ty=Tensor[(2, 20), int8] */;
    %10 = reshape(%8, newshape=[6, 1, 16]) /* ty=Tensor[(6, 1, 16), float32] */;
    %11 = reshape(%9, newshape=[40]) /* ty=Tensor[(40), int8] */;
    %12 = @func_575(%10, %11) /* ty=(Tensor[(6, 1, 16), float32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(400), int8]) */;
    %13 = %12.3;
    %14 = cast(%13, dtype="float32") /* ty=Tensor[(400), float32] */;
    %15 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
    %16 = %15.0;
    %17 = cast(%16, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
    %18 = cast(meta[relay.Constant][1] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
    %20 = reshape(%18, newshape=[]) /* ty=uint32 */;
    %21 = reshape(%19, newshape=[6, 10, 9]) /* ty=Tensor[(6, 10, 9), uint32] */;
    %22 = @func_3059(%20, %21) /* ty=(Tensor[(6, 10, 9), bool], Tensor[(13, 10), float32]) */;
    %23 = @func_2545() /* ty=(Tensor[(9, 2, 2), uint16],) */;
    %24 = cast(meta[relay.Constant][3] /* ty=Tensor[(180, 1), int16] */, dtype="int16") /* ty=Tensor[(180, 1), int16] */;
    %25 = cast(meta[relay.Constant][3] /* ty=Tensor[(180, 1), int16] */, dtype="int16") /* ty=Tensor[(180, 1), int16] */;
    %26 = cast(meta[relay.Constant][3] /* ty=Tensor[(180, 1), int16] */, dtype="int16") /* ty=Tensor[(180, 1), int16] */;
    %27 = reshape(%24, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
    %28 = reshape(%25, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
    %29 = reshape(%26, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
    %30 = @func_1112(%27, %28, %29) /* ty=(Tensor[(6, 15, 2), float32], Tensor[(6, 15, 2), float32]) */;
    %31 = sqrt(%14) /* ty=Tensor[(400), float32] */;
    %32 = cos(%17) /* ty=Tensor[(9, 2, 2), float32] */;
    %33 = %22.1;
    %34 = %23.0;
    %35 = %30.1;
    (meta[relay.Constant][0] /* ty=Tensor[(96), float32] */, %var_3566, %31, %32, %33, meta[relay.Constant][1] /* ty=uint32 */, meta[relay.Constant][2] /* ty=Tensor[(540), uint32] */, %34, %35, meta[relay.Constant][3] /* ty=Tensor[(180, 1), int16] */)
  };
  %36(%var_3639) /* ty=(Tensor[(96), float32], Tensor[(2, 20), int8], Tensor[(400), float32], Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180, 1), int16]) */
}

def @func_8052() -> Tensor[(9, 2, 2), uint16] {
  %37 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %37.0
}

def @func_11182() -> Tensor[(13, 10), float32] {
  @func_11180() /* ty=Tensor[(13, 10), float32] */
}

def @func_5410() -> (Tensor[(10, 10, 4), uint8],) {
  @func_5408() /* ty=(Tensor[(10, 10, 4), uint8],) */
}

def @func_10557() -> Tensor[(13, 10), float32] {
  %39 = fn () -> Tensor[(13, 10), float32] {
    %38 = @func_6412() /* ty=(Tensor[(13, 10), float32],) */;
    %38.0
  };
  %39() /* ty=Tensor[(13, 10), float32] */
}

def @func_3961() -> Tensor[(13, 10), float32] {
  %40 = @func_3532() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %40.0
}

def @func_4440(%var_4438: Tensor[(9, 16, 9), float32], %var_4439: Tensor[(9, 16, 9), float32]) -> (Tensor[(9, 16, 9), float32], Tensor[(13, 10), float32], Tensor[(9, 16, 9), bool], Tensor[(3, 24), float32]) {
  %55 = fn (%var_4400: Tensor[(9, 16, 9), float32], %var_4423: Tensor[(9, 16, 9), float32]) -> (Tensor[(9, 16, 9), float32], Tensor[(13, 10), float32], Tensor[(9, 16, 9), bool], Tensor[(3, 24), float32]) {
    %41 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 16, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 16, 9), float32] */;
    %42 = shape_of(%var_4400, dtype="int32") /* ty=Tensor[(3), int32] */;
    %43 = cast(%var_4400, dtype="float32") /* ty=Tensor[(9, 16, 9), float32] */;
    %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %45 = @func_3908() /* ty=(Tensor[(13, 10), float32],) */;
    %46 = cast(%var_4423, dtype="bool") /* ty=Tensor[(9, 16, 9), bool] */;
    %47 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(9, 16, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %48 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 16, 9), float32] */, dtype="bool") /* ty=Tensor[(9, 16, 9), bool] */;
    %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %50 = @func_2702() /* ty=(Tensor[(9, 2, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(3, 24), float32], Tensor[(250), int64], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) */;
    %51 = power(%43, %44) /* ty=Tensor[(9, 16, 9), float32] */;
    %52 = %45.0;
    %53 = logical_and(%48, %49) /* ty=Tensor[(9, 16, 9), bool] */;
    %54 = %50.2;
    (%51, %52, %53, %54)
  };
  %55(%var_4438, %var_4439) /* ty=(Tensor[(9, 16, 9), float32], Tensor[(13, 10), float32], Tensor[(9, 16, 9), bool], Tensor[(3, 24), float32]) */
}

def @func_544(%var_542: Tensor[(10, 1, 4), int8], %var_543: Tensor[(10, 10, 4), int8]) -> Tensor[(10, 10, 4), uint8] {
  %63 = fn (%var_510: Tensor[(10, 1, 4), int8], %var_511: Tensor[(10, 10, 4), int8]) -> Tensor[(10, 10, 4), uint8] {
    %56 = cast(%var_510, dtype="int8") /* ty=Tensor[(10, 1, 4), int8] */;
    %57 = cast(%var_511, dtype="int8") /* ty=Tensor[(10, 10, 4), int8] */;
    %58 = minimum(%56, %57) /* ty=Tensor[(10, 10, 4), int8] */;
    %59 = cast(%var_511, dtype="uint8") /* ty=Tensor[(10, 10, 4), uint8] */;
    %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
    %61 = cast(%58, dtype="uint8") /* ty=Tensor[(10, 10, 4), uint8] */;
    %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    add(%61, %62) /* ty=Tensor[(10, 10, 4), uint8] */
  };
  %63(%var_542, %var_543) /* ty=Tensor[(10, 10, 4), uint8] */
}

def @func_5265(%var_5259: Tensor[(9, 2, 2), uint16]) -> Tensor[(9, 2, 2), int64] {
  %64 = @func_2993() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %65 = %64.1;
  %66 = cast(%var_5259, dtype="int64") /* ty=Tensor[(9, 2, 2), int64] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%65, dtype="int64") /* ty=Tensor[(9, 2, 2), int64] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%68, %69) /* ty=Tensor[(9, 2, 2), int64] */
}

def @func_2995() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) {
  @func_2993() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */
}

def @func_4545() -> (Tensor[(1521), int16], Tensor[(9, 2, 2), float64]) {
  %74 = fn () -> (Tensor[(1521), int16], Tensor[(9, 2, 2), float64]) {
    %70 = @func_2993() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
    %71 = @func_4115() /* ty=(Tensor[(9, 2, 2), float64],) */;
    %72 = %70.3;
    %73 = %71.0;
    (%72, %73)
  };
  %74() /* ty=(Tensor[(1521), int16], Tensor[(9, 2, 2), float64]) */
}

def @func_2546() -> (Tensor[(9, 2, 2), uint16],) {
  %76 = fn () -> (Tensor[(9, 2, 2), uint16],) {
    %75 = @func_2226() /* ty=Tensor[(9, 2, 2), uint16] */;
    (%75,)
  };
  %76() /* ty=(Tensor[(9, 2, 2), uint16],) */
}

def @func_10490(%var_10466: Tensor[(1, 4, 8), float64]) -> Tensor[(14, 4, 8), float64] {
  %77 = cast(%var_10466, dtype="float64") /* ty=Tensor[(1, 4, 8), float64] */;
  %78 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 4, 8), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
  %79 = floor_divide(%77, %78) /* ty=Tensor[(14, 4, 8), float64] */;
  %80 = cast(%79, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
  sqrt(%80) /* ty=Tensor[(14, 4, 8), float64] */
}

def @func_4218() -> Tensor[(13, 10), float32] {
  @func_2275() /* ty=Tensor[(13, 10), float32] */
}

def @func_7895() -> (Tensor[(13, 10), float32],) {
  @func_7893() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_10645(%var_10635: Tensor[(8, 12), float32]) -> (Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(10, 10, 4), bool], Tensor[(10, 10, 4), uint8], Tensor[(8, 12), float32]) {
  %81 = @func_6717() /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32]) */;
  %82 = cast(meta[relay.Constant][6] /* ty=Tensor[(40), int8] */, dtype="int8") /* ty=Tensor[(40), int8] */;
  %83 = reshape(%82, newshape=[10, 4]) /* ty=Tensor[(10, 4), int8] */;
  %84 = @func_8006(%83) /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), int16], Tensor[(10, 4), int8], Tensor[(36, 1), float32]) */;
  %85 = %84.0;
  %86 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 10, 4), uint8] */, dtype="bool") /* ty=Tensor[(10, 10, 4), bool] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%85, dtype="bool") /* ty=Tensor[(10, 10, 4), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = cast(%var_10635, dtype="float32") /* ty=Tensor[(8, 12), float32] */;
  %91 = cast(meta[relay.Constant][6] /* ty=Tensor[(40), int8] */, dtype="int8") /* ty=Tensor[(40), int8] */;
  %92 = reshape(%90, newshape=[6, 1, 16]) /* ty=Tensor[(6, 1, 16), float32] */;
  %93 = reshape(%91, newshape=[40]) /* ty=Tensor[(40), int8] */;
  %94 = @func_575(%92, %93) /* ty=(Tensor[(6, 1, 16), float32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(400), int8]) */;
  %95 = %81.1;
  %96 = less_equal(%88, %89) /* ty=Tensor[(10, 10, 4), bool] */;
  %97 = %94.1;
  (%95, meta[relay.Constant][6] /* ty=Tensor[(40), int8] */, %96, %97, %var_10635)
}

def @func_5268(%var_5266: Tensor[(9, 2, 2), uint16]) -> Tensor[(9, 2, 2), int64] {
  @func_5265(%var_5266) /* ty=Tensor[(9, 2, 2), int64] */
}

def @func_7389() -> Tensor[(6, 15, 2), float32] {
  @func_5608() /* ty=Tensor[(6, 15, 2), float32] */
}

def @func_10124() -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  %103 = fn () -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
    %98 = @func_8532() /* ty=(Tensor[(13, 10), float32],) */;
    %99 = @func_7169() /* ty=(Tensor[(13, 10), float32],) */;
    %100 = @func_7058() /* ty=Tensor[(9, 2, 2), float64] */;
    %101 = %98.0;
    %102 = %99.0;
    (%100, %101, %102)
  };
  %103() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */
}

def @func_5086() -> (Tensor[(13, 10), float32],) {
  %104 = @func_3532() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %105 = %104.2;
  (%105,)
}

def @func_9043(%var_9025: Tensor[(1, 8, 7), float32]) -> (Tensor[(1, 8, 7), float32], Tensor[(40), int8], Tensor[(2, 20), float64], Tensor[(1521), int16]) {
  %106 = cast(%var_9025, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %107 = cast(meta[relay.Constant][8] /* ty=Tensor[(40), int8] */, dtype="int8") /* ty=Tensor[(40), int8] */;
  %108 = reshape(%107, newshape=[2, 20]) /* ty=Tensor[(2, 20), int8] */;
  %109 = @func_3638(%108) /* ty=(Tensor[(96), float32], Tensor[(2, 20), int8], Tensor[(400), float32], Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180, 1), int16]) */;
  %110 = %109.1;
  %111 = cast(%110, dtype="float64") /* ty=Tensor[(2, 20), float64] */;
  %112 = @func_8440() /* ty=(Tensor[(1521), int16], Tensor[(10, 10, 4), uint8]) */;
  %113 = atan(%106) /* ty=Tensor[(1, 8, 7), float32] */;
  %114 = sigmoid(%111) /* ty=Tensor[(2, 20), float64] */;
  %115 = %112.0;
  (%113, meta[relay.Constant][8] /* ty=Tensor[(40), int8] */, %114, %115)
}

def @func_10440(%var_10438: Tensor[(3, 7, 1), uint16], %var_10439: Tensor[(3, 7, 6), uint16]) -> (Tensor[(3, 7, 6), uint16], Tensor[(3, 7, 1), float32]) {
  %121 = fn (%var_10412: Tensor[(3, 7, 1), uint16], %var_10413: Tensor[(3, 7, 6), uint16]) -> (Tensor[(3, 7, 6), uint16], Tensor[(3, 7, 1), float32]) {
    %116 = cast(%var_10412, dtype="uint16") /* ty=Tensor[(3, 7, 1), uint16] */;
    %117 = cast(%var_10413, dtype="uint16") /* ty=Tensor[(3, 7, 6), uint16] */;
    %118 = cast(%var_10412, dtype="float32") /* ty=Tensor[(3, 7, 1), float32] */;
    %119 = add(%116, %117) /* ty=Tensor[(3, 7, 6), uint16] */;
    %120 = erf(%118) /* ty=Tensor[(3, 7, 1), float32] */;
    (%119, %120)
  };
  %121(%var_10438, %var_10439) /* ty=(Tensor[(3, 7, 6), uint16], Tensor[(3, 7, 1), float32]) */
}

def @func_3908() -> (Tensor[(13, 10), float32],) {
  %122 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %123 = %122.2;
  (%123,)
}

def @func_11089(%var_11085: Tensor[(7, 5, 10), uint32], %var_11086: Tensor[(7, 5, 10), uint32], %var_11087: Tensor[(252, 1), float64], %var_11088: Tensor[(250), int64]) -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(7, 5, 10), float32], Tensor[(7, 5, 10), float64], Tensor[(10, 10, 4), uint8], Tensor[(1521), int16], Tensor[(252, 1), float64], Tensor[(250), int64]) {
  @func_11083(%var_11085, %var_11086, %var_11087, %var_11088) /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(7, 5, 10), float32], Tensor[(7, 5, 10), float64], Tensor[(10, 10, 4), uint8], Tensor[(1521), int16], Tensor[(252, 1), float64], Tensor[(250), int64]) */
}

def @func_9138(%var_9127: Tensor[(13, 2, 15), float32]) -> Tensor[(13, 2, 15), float32] {
  %124 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 2, 15), float32] */, dtype="float32") /* ty=Tensor[(13, 2, 15), float32] */;
  %125 = shape_of(%var_9127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%var_9127, dtype="float32") /* ty=Tensor[(13, 2, 15), float32] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  subtract(%126, %127) /* ty=Tensor[(13, 2, 15), float32] */
}

def @func_11004(%var_11002: Tensor[(250), int64], %var_11003: Tensor[(96), float32]) -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(252), float64], Tensor[(250), int64], Tensor[(5, 13, 2), float32], Tensor[(10, 10, 4), uint8], Tensor[(96), float32]) {
  @func_11000(%var_11002, %var_11003) /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(252), float64], Tensor[(250), int64], Tensor[(5, 13, 2), float32], Tensor[(10, 10, 4), uint8], Tensor[(96), float32]) */
}

def @func_11158(%var_11157: Tensor[(400), int8]) -> (Tensor[(96), float32], Tensor[(40), int8], Tensor[(400), bool]) {
  %140 = fn (%var_11139: Tensor[(400), int8]) -> (Tensor[(96), float32], Tensor[(40), int8], Tensor[(400), bool]) {
    %128 = @func_3694() /* ty=(Tensor[(96), float32],) */;
    %129 = cast(meta[relay.Constant][10] /* ty=Tensor[(40), int8] */, dtype="int8") /* ty=Tensor[(40), int8] */;
    %130 = cast(%var_11139, dtype="int8") /* ty=Tensor[(400), int8] */;
    %131 = reshape(%129, newshape=[10, 1, 4]) /* ty=Tensor[(10, 1, 4), int8] */;
    %132 = reshape(%130, newshape=[10, 10, 4]) /* ty=Tensor[(10, 10, 4), int8] */;
    %133 = @func_541(%131, %132) /* ty=Tensor[(10, 10, 4), uint8] */;
    %134 = cast(%133, dtype="bool") /* ty=Tensor[(10, 10, 4), bool] */;
    %135 = shape_of(%var_11139, dtype="int32") /* ty=Tensor[(1), int32] */;
    %136 = cast(%var_11139, dtype="bool") /* ty=Tensor[(400), bool] */;
    %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?), bool] */;
    %138 = %128.0;
    %139 = equal(%136, %137) /* ty=Tensor[(400), bool] */;
    (%138, meta[relay.Constant][10] /* ty=Tensor[(40), int8] */, %139)
  };
  %140(%var_11157) /* ty=(Tensor[(96), float32], Tensor[(40), int8], Tensor[(400), bool]) */
}

def @func_3259() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  %143 = fn () -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
    %141 = @func_2275() /* ty=Tensor[(13, 10), float32] */;
    %142 = @func_2486() /* ty=Tensor[(13, 10), float32] */;
    (%141, %142)
  };
  %143() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */
}

def @func_2044() -> (Tensor[(9, 2, 2), uint16],) {
  @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */
}

def @func_1522(%var_1520: Tensor[(5, 13, 2), float32]) -> Tensor[(5, 13, 2), float32] {
  @func_1519(%var_1520) /* ty=Tensor[(5, 13, 2), float32] */
}

def @func_6414() -> (Tensor[(13, 10), float32],) {
  @func_6412() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_7512() -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) {
  %144 = @func_5778() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */;
  %145 = %144.1;
  %146 = @func_5457() /* ty=Tensor[(13, 10), float32] */;
  (%145, %146)
}

def @func_10376() -> (Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  %152 = fn () -> (Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
    %147 = @func_6717() /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32]) */;
    %148 = @func_7169() /* ty=(Tensor[(13, 10), float32],) */;
    %149 = %147.0;
    %150 = %148.0;
    %151 = @func_7058() /* ty=Tensor[(9, 2, 2), float64] */;
    (%149, %150, %151)
  };
  %152() /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */
}

def @func_8366(%var_8282: int32, %var_8283: Tensor[(16, 4, 2), int32], %var_8354: Tensor[(1144), int32]) -> (Tensor[(16, 4, 2), bool], Tensor[(112), float32], Tensor[(36), float64], Tensor[(3, 24), float32], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(1144), int32], Tensor[(40), int8], Tensor[(400), int8]) {
  %153 = cast(%var_8282, dtype="bool") /* ty=bool */;
  %154 = cast(%var_8283, dtype="bool") /* ty=Tensor[(16, 4, 2), bool] */;
  %155 = cast(meta[relay.Constant][11] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %156 = reshape(%155, newshape=[9, 2, 2]) /* ty=Tensor[(9, 2, 2), float64] */;
  %157 = @func_3829(%156) /* ty=(Tensor[(9, 2, 2), bool], Tensor[(13, 10), float32], Tensor[(1, 14, 8), float32], Tensor[(112), float32]) */;
  %158 = @func_2702() /* ty=(Tensor[(9, 2, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(3, 24), float32], Tensor[(250), int64], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) */;
  %159 = @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %160 = cast(%var_8354, dtype="int32") /* ty=Tensor[(1144), int32] */;
  %161 = cast(meta[relay.Constant][12] /* ty=Tensor[(40), int8] */, dtype="int8") /* ty=Tensor[(40), int8] */;
  %162 = cast(meta[relay.Constant][13] /* ty=Tensor[(400), int8] */, dtype="int8") /* ty=Tensor[(400), int8] */;
  %163 = reshape(%160, newshape=[1144]) /* ty=Tensor[(1144), int32] */;
  %164 = reshape(%161, newshape=[40]) /* ty=Tensor[(40), int8] */;
  %165 = reshape(%162, newshape=[1, 400]) /* ty=Tensor[(1, 400), int8] */;
  %166 = @func_6399(%163, %164, %165) /* ty=(uint32, Tensor[(13, 10), float32], Tensor[(1144), int32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(1, 400), int8], Tensor[(9, 2, 2), float64]) */;
  %167 = not_equal(%153, %154) /* ty=Tensor[(16, 4, 2), bool] */;
  %168 = %157.3;
  %169 = %158.2;
  %170 = %159.0;
  %171 = @func_3650() /* ty=Tensor[(13, 10), float32] */;
  %172 = %166.4;
  (%167, %168, meta[relay.Constant][11] /* ty=Tensor[(36), float64] */, %169, %170, %171, %172, %var_8354, meta[relay.Constant][12] /* ty=Tensor[(40), int8] */, meta[relay.Constant][13] /* ty=Tensor[(400), int8] */)
}

def @func_118(%var_87: Tensor[(5, 10, 5), int64], %var_102: Tensor[(5, 10, 5), int64], %var_116: Tensor[(1521), int16]) -> (Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) {
  %173 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 10, 5), int64] */, dtype="bool") /* ty=Tensor[(5, 10, 5), bool] */;
  %174 = shape_of(%var_87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%var_87, dtype="bool") /* ty=Tensor[(5, 10, 5), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %177 = cast(%var_102, dtype="float32") /* ty=Tensor[(5, 10, 5), float32] */;
  %178 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(5, 10, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 10, 5), int64] */, dtype="float32") /* ty=Tensor[(5, 10, 5), float32] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %181 = cast(%var_116, dtype="int16") /* ty=Tensor[(1521), int16] */;
  %182 = cast(%var_116, dtype="int16") /* ty=Tensor[(1521), int16] */;
  %183 = reshape(%181, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %184 = reshape(%182, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %185 = @func_68(%183, %184) /* ty=(Tensor[(9, 13, 13), bool],) */;
  %186 = less_equal(%175, %176) /* ty=Tensor[(5, 10, 5), bool] */;
  %187 = power(%179, %180) /* ty=Tensor[(5, 10, 5), float32] */;
  %188 = %185.0;
  (%186, %187, %188, %var_116)
}

def @func_9472(%var_9471: Tensor[(130, 1), float32]) -> (Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32], Tensor[(130, 1), float64]) {
  %199 = fn (%var_9456: Tensor[(130, 1), float32]) -> (Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32], Tensor[(130, 1), float64]) {
    %189 = @func_7451() /* ty=(Tensor[(9, 2, 2), uint16],) */;
    %190 = cast(%var_9456, dtype="float32") /* ty=Tensor[(130, 1), float32] */;
    %191 = reshape(%190, newshape=[5, 13, 2]) /* ty=Tensor[(5, 13, 2), float32] */;
    %192 = cast(%var_9456, dtype="float32") /* ty=Tensor[(130, 1), float32] */;
    %193 = sigmoid(%192) /* ty=Tensor[(130, 1), float32] */;
    %194 = cast(%193, dtype="float64") /* ty=Tensor[(130, 1), float64] */;
    %195 = %189.0;
    %196 = @func_1519(%191) /* ty=Tensor[(5, 13, 2), float32] */;
    %197 = @func_6934() /* ty=Tensor[(13, 10), float32] */;
    %198 = atan(%194) /* ty=Tensor[(130, 1), float64] */;
    (%195, %196, %197, %198)
  };
  %199(%var_9471) /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32], Tensor[(130, 1), float64]) */
}

def @func_10458() -> Tensor[(9, 2, 2), float64] {
  %200 = @func_10375() /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */;
  %200.2
}

def @func_11083(%var_11006: Tensor[(7, 5, 10), uint32], %var_11007: Tensor[(7, 5, 10), uint32], %var_11064: Tensor[(252, 1), float64], %var_11065: Tensor[(250), int64]) -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(7, 5, 10), float32], Tensor[(7, 5, 10), float64], Tensor[(10, 10, 4), uint8], Tensor[(1521), int16], Tensor[(252, 1), float64], Tensor[(250), int64]) {
  %201 = @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %202 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %203 = cast(%var_11007, dtype="uint32") /* ty=Tensor[(7, 5, 10), uint32] */;
  %204 = shape_of(%var_11006, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%var_11006, dtype="uint32") /* ty=Tensor[(7, 5, 10), uint32] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %207 = right_shift(%205, %206) /* ty=Tensor[(7, 5, 10), uint32] */;
  %208 = cast(%207, dtype="float32") /* ty=Tensor[(7, 5, 10), float32] */;
  %209 = cast(%var_11007, dtype="float32") /* ty=Tensor[(7, 5, 10), float32] */;
  %210 = asin(%209) /* ty=Tensor[(7, 5, 10), float32] */;
  %211 = cast(%210, dtype="float64") /* ty=Tensor[(7, 5, 10), float64] */;
  %212 = @func_10375() /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */;
  %213 = cast(%var_11064, dtype="float64") /* ty=Tensor[(252, 1), float64] */;
  %214 = cast(%var_11065, dtype="int64") /* ty=Tensor[(250), int64] */;
  %215 = reshape(%213, newshape=[6, 42]) /* ty=Tensor[(6, 42), float64] */;
  %216 = reshape(%214, newshape=[25, 10]) /* ty=Tensor[(25, 10), int64] */;
  %217 = @func_2909(%215, %216) /* ty=(Tensor[(5, 13, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16], Tensor[(9, 2, 14), float64], Tensor[(6, 42), float64], Tensor[(25, 10), int64], Tensor[(13, 10), float32], Tensor[(9, 13, 13), bool]) */;
  %218 = %201.0;
  %219 = %202.0;
  %220 = erf(%208) /* ty=Tensor[(7, 5, 10), float32] */;
  %221 = atan(%211) /* ty=Tensor[(7, 5, 10), float64] */;
  %222 = %212.0;
  %223 = %217.2;
  (%218, %219, %220, %221, %222, %223, %var_11064, %var_11065)
}

def @func_6621() -> (Tensor[(13, 10), float32],) {
  @func_6619() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_10409() -> (Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), uint8]) {
  %224 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %225 = @func_2226() /* ty=Tensor[(9, 2, 2), uint16] */;
  %226 = %224.0;
  (%225, %226)
}

def @func_3734(%var_3732: Tensor[(72), float32]) -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(96), float32], Tensor[(5, 10, 5), bool], Tensor[(72), float32], Tensor[(250), int64]) {
  @func_3731(%var_3732) /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(96), float32], Tensor[(5, 10, 5), bool], Tensor[(72), float32], Tensor[(250), int64]) */
}

def @func_3219() -> Tensor[(9, 2, 2), float64] {
  @func_3217() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_4117() -> (Tensor[(9, 2, 2), float64],) {
  @func_4115() /* ty=(Tensor[(9, 2, 2), float64],) */
}

def @func_3652() -> Tensor[(13, 10), float32] {
  @func_3650() /* ty=Tensor[(13, 10), float32] */
}

def @func_9105() -> (Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  %227 = @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %228 = @func_5375() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */;
  %229 = %228.2;
  %230 = cast(%229, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %231 = log2(%230) /* ty=Tensor[(9, 2, 2), float32] */;
  %232 = cast(%231, dtype="float64") /* ty=Tensor[(9, 2, 2), float64] */;
  %233 = %227.0;
  %234 = @func_2275() /* ty=Tensor[(13, 10), float32] */;
  %235 = sinh(%232) /* ty=Tensor[(9, 2, 2), float64] */;
  (%233, %234, %235)
}

def @func_3034() -> (Tensor[(13, 10), float32],) {
  %236 = @func_2562() /* ty=Tensor[(13, 10), float32] */;
  (%236,)
}

def @func_6936() -> Tensor[(13, 10), float32] {
  @func_6934() /* ty=Tensor[(13, 10), float32] */
}

def @func_3963() -> Tensor[(13, 10), float32] {
  @func_3961() /* ty=Tensor[(13, 10), float32] */
}

def @func_7754() -> (Tensor[(9, 2, 2), float32],) {
  %241 = fn () -> (Tensor[(9, 2, 2), float32],) {
    %237 = @func_6143() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */;
    %238 = %237.0;
    %239 = cast(%238, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
    %240 = sigmoid(%239) /* ty=Tensor[(9, 2, 2), float32] */;
    (%240,)
  };
  %241() /* ty=(Tensor[(9, 2, 2), float32],) */
}

def @func_3155(%var_3153: Tensor[(11, 13, 8), int32], %var_3154: Tensor[(11, 13, 8), int32]) -> (Tensor[(13, 10), float32], Tensor[(11, 13, 8), uint32]) {
  @func_3151(%var_3153, %var_3154) /* ty=(Tensor[(13, 10), float32], Tensor[(11, 13, 8), uint32]) */
}

def @func_370(%var_367: Tensor[(9, 2, 14), float64], %var_368: Tensor[(1, 1521), int16], %var_369: Tensor[(250), int64]) -> (Tensor[(9, 13, 13), bool], Tensor[(1, 1521), int16], Tensor[(9, 2, 14), float32], Tensor[(9, 2, 14), float64], Tensor[(5, 10, 5), bool], Tensor[(250), int64]) {
  %274 = fn (%var_313: Tensor[(9, 2, 14), float64], %var_333: Tensor[(1, 1521), int16], %var_363: Tensor[(250), int64]) -> (Tensor[(9, 13, 13), bool], Tensor[(1, 1521), int16], Tensor[(9, 2, 14), float32], Tensor[(9, 2, 14), float64], Tensor[(5, 10, 5), bool], Tensor[(250), int64]) {
    %242 = cast(%var_333, dtype="int16") /* ty=Tensor[(1, 1521), int16] */;
    %243 = cast(%var_333, dtype="int16") /* ty=Tensor[(1, 1521), int16] */;
    %244 = reshape(%242, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
    %245 = reshape(%243, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
    %246 = @func_68(%244, %245) /* ty=(Tensor[(9, 13, 13), bool],) */;
    %247 = cast(%var_313, dtype="float64") /* ty=Tensor[(9, 2, 14), float64] */;
    %248 = log(%247) /* ty=Tensor[(9, 2, 14), float64] */;
    %249 = cast(%var_313, dtype="int32") /* ty=Tensor[(9, 2, 14), int32] */;
    %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
    %251 = cast(%248, dtype="int32") /* ty=Tensor[(9, 2, 14), int32] */;
    %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %253 = bitwise_xor(%251, %252) /* ty=Tensor[(9, 2, 14), int32] */;
    %254 = cast(%253, dtype="float64") /* ty=Tensor[(9, 2, 14), float64] */;
    %255 = atanh(%254) /* ty=Tensor[(9, 2, 14), float64] */;
    %256 = cast(%255, dtype="uint8") /* ty=Tensor[(9, 2, 14), uint8] */;
    %257 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
    %258 = cast(%248, dtype="uint8") /* ty=Tensor[(9, 2, 14), uint8] */;
    %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %260 = maximum(%258, %259) /* ty=Tensor[(9, 2, 14), uint8] */;
    %261 = cast(%260, dtype="float32") /* ty=Tensor[(9, 2, 14), float32] */;
    %262 = cast(%260, dtype="float64") /* ty=Tensor[(9, 2, 14), float64] */;
    %263 = cast(%var_363, dtype="int64") /* ty=Tensor[(250), int64] */;
    %264 = cast(%var_363, dtype="int64") /* ty=Tensor[(250), int64] */;
    %265 = %246.0;
    %266 = cast(%265, dtype="int16") /* ty=Tensor[(9, 13, 13), int16] */;
    %267 = reshape(%263, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
    %268 = reshape(%264, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
    %269 = reshape(%266, newshape=[1521]) /* ty=Tensor[(1521), int16] */;
    %270 = @func_118(%267, %268, %269) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
    %271 = asinh(%261) /* ty=Tensor[(9, 2, 14), float32] */;
    %272 = atan(%262) /* ty=Tensor[(9, 2, 14), float64] */;
    %273 = %270.0;
    (%265, %var_333, %271, %272, %273, %var_363)
  };
  %274(%var_367, %var_368, %var_369) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(1, 1521), int16], Tensor[(9, 2, 14), float32], Tensor[(9, 2, 14), float64], Tensor[(5, 10, 5), bool], Tensor[(250), int64]) */
}

def @func_8974() -> (Tensor[(10, 10, 4), uint8],) {
  %277 = fn () -> (Tensor[(10, 10, 4), uint8],) {
    %275 = @func_3422() /* ty=(Tensor[(10, 10, 4), uint8],) */;
    %276 = %275.0;
    (%276,)
  };
  %277() /* ty=(Tensor[(10, 10, 4), uint8],) */
}

def @func_9761() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), float32], Tensor[(36), uint16], Tensor[(540), uint32]) {
  %278 = cast(meta[relay.Constant][15] /* ty=Tensor[(36), uint16] */, dtype="uint16") /* ty=Tensor[(36), uint16] */;
  %279 = cast(meta[relay.Constant][16] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %280 = reshape(%278, newshape=[9, 2, 2]) /* ty=Tensor[(9, 2, 2), uint16] */;
  %281 = reshape(%279, newshape=[540]) /* ty=Tensor[(540), uint32] */;
  %282 = @func_7592(%280, %281) /* ty=(Tensor[(9, 2, 2), float32], Tensor[(6, 10, 9), bool], uint32, Tensor[(540), uint32]) */;
  %283 = @func_3650() /* ty=Tensor[(13, 10), float32] */;
  %284 = %282.0;
  (%283, %284, meta[relay.Constant][15] /* ty=Tensor[(36), uint16] */, meta[relay.Constant][16] /* ty=Tensor[(540), uint32] */)
}

def @func_5295() -> (Tensor[(9, 2, 2), uint16],) {
  %285 = @func_2226() /* ty=Tensor[(9, 2, 2), uint16] */;
  (%285,)
}

def @func_4032(%var_4030: int16, %var_4031: Tensor[(1, 11, 1), int16]) -> (Tensor[(1, 11, 1), int16],) {
  %289 = fn (%var_4013: int16, %var_4014: Tensor[(1, 11, 1), int16]) -> (Tensor[(1, 11, 1), int16],) {
    %286 = cast(%var_4013, dtype="int16") /* ty=int16 */;
    %287 = cast(%var_4014, dtype="int16") /* ty=Tensor[(1, 11, 1), int16] */;
    %288 = subtract(%286, %287) /* ty=Tensor[(1, 11, 1), int16] */;
    (%288,)
  };
  %289(%var_4030, %var_4031) /* ty=(Tensor[(1, 11, 1), int16],) */
}

def @func_7200() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) {
  @func_7198() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) */
}

def @func_3382(%var_3316: Tensor[(9, 15, 12), float32]) -> (Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), uint8], Tensor[(9, 15, 12), float32]) {
  %290 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %291 = @func_2393() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180), int16]) */;
  %292 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %293 = cast(%var_3316, dtype="float32") /* ty=Tensor[(9, 15, 12), float32] */;
  %294 = erf(%293) /* ty=Tensor[(9, 15, 12), float32] */;
  %295 = cast(%294, dtype="float32") /* ty=Tensor[(9, 15, 12), float32] */;
  %296 = asinh(%295) /* ty=Tensor[(9, 15, 12), float32] */;
  %297 = cast(%296, dtype="float32") /* ty=Tensor[(9, 15, 12), float32] */;
  %298 = %290.0;
  %299 = %291.0;
  %300 = %292.0;
  %301 = sin(%297) /* ty=Tensor[(9, 15, 12), float32] */;
  (%298, %299, %300, %301)
}

def @func_11255(%var_11225: Tensor[(13, 3, 3), float32]) -> (Tensor[(13, 3, 3), float32], Tensor[(13, 3, 3), float64], Tensor[(13, 10), float32]) {
  %302 = cast(%var_11225, dtype="float32") /* ty=Tensor[(13, 3, 3), float32] */;
  %303 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(13, 3, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 3, 3), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 3), float32] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %306 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 3, 3), float32] */, dtype="float64") /* ty=Tensor[(13, 3, 3), float64] */;
  %307 = power(%304, %305) /* ty=Tensor[(13, 3, 3), float32] */;
  %308 = log(%306) /* ty=Tensor[(13, 3, 3), float64] */;
  %309 = @func_3650() /* ty=Tensor[(13, 10), float32] */;
  (%307, %308, %309)
}

def @func_4934(%var_4915: int16, %var_4916: Tensor[(11), int16]) -> (Tensor[(13, 10), float32], Tensor[(1, 11, 1), int16], int16, Tensor[(11), int16]) {
  %310 = @func_2993() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %311 = cast(%var_4915, dtype="int16") /* ty=int16 */;
  %312 = cast(%var_4916, dtype="int16") /* ty=Tensor[(11), int16] */;
  %313 = reshape(%311, newshape=[]) /* ty=int16 */;
  %314 = reshape(%312, newshape=[1, 11, 1]) /* ty=Tensor[(1, 11, 1), int16] */;
  %315 = @func_4029(%313, %314) /* ty=(Tensor[(1, 11, 1), int16],) */;
  %316 = %310.0;
  %317 = %315.0;
  (%316, %317, %var_4915, %var_4916)
}

def @func_579(%var_577: Tensor[(6, 1, 16), float32], %var_578: Tensor[(40), int8]) -> (Tensor[(6, 1, 16), float32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(400), int8]) {
  @func_575(%var_577, %var_578) /* ty=(Tensor[(6, 1, 16), float32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(400), int8]) */
}

def @func_5900() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  %318 = @func_5079() /* ty=(Tensor[(13, 10), float32],) */;
  %319 = %318.0;
  %320 = @func_5457() /* ty=Tensor[(13, 10), float32] */;
  (%319, %320)
}

def @func_10846() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  @func_10844() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */
}

def @func_7171() -> (Tensor[(13, 10), float32],) {
  @func_7169() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_10063(%var_10059: Tensor[(30, 1), uint32], %var_10060: Tensor[(150, 3), uint32]) -> (Tensor[(13, 10), float32], Tensor[(6, 10, 9), bool], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), uint16], Tensor[(30, 1), uint32], Tensor[(150, 3), uint32]) {
  %321 = @func_5900() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %322 = cast(meta[relay.Constant][18] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %323 = cast(meta[relay.Constant][19] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %324 = reshape(%322, newshape=[]) /* ty=uint32 */;
  %325 = reshape(%323, newshape=[6, 10, 9]) /* ty=Tensor[(6, 10, 9), uint32] */;
  %326 = @func_3059(%324, %325) /* ty=(Tensor[(6, 10, 9), bool], Tensor[(13, 10), float32]) */;
  %327 = cast(%var_10059, dtype="uint32") /* ty=Tensor[(30, 1), uint32] */;
  %328 = cast(%var_10060, dtype="uint32") /* ty=Tensor[(150, 3), uint32] */;
  %329 = reshape(%327, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), uint32] */;
  %330 = reshape(%328, newshape=[5, 15, 6]) /* ty=Tensor[(5, 15, 6), uint32] */;
  %331 = @func_9407(%329, %330) /* ty=(Tensor[(5, 15, 6), uint32], Tensor[(5, 15, 6), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16]) */;
  %332 = %321.0;
  %333 = %326.0;
  %334 = %331.3;
  (%332, %333, meta[relay.Constant][18] /* ty=uint32 */, meta[relay.Constant][19] /* ty=Tensor[(540), uint32] */, %334, %var_10059, %var_10060)
}

def @func_11180() -> Tensor[(13, 10), float32] {
  %335 = @func_10906() /* ty=(Tensor[(13, 10), float32],) */;
  %335.0
}

def @func_6568() -> (Tensor[(6, 15, 2), float32], Tensor[(10, 10, 4), float32], Tensor[(13, 10), float32]) {
  %343 = fn () -> (Tensor[(6, 15, 2), float32], Tensor[(10, 10, 4), float32], Tensor[(13, 10), float32]) {
    %336 = @func_3920() /* ty=(Tensor[(10, 10, 4), uint8],) */;
    %337 = %336.0;
    %338 = cast(%337, dtype="float32") /* ty=Tensor[(10, 10, 4), float32] */;
    %339 = @func_6412() /* ty=(Tensor[(13, 10), float32],) */;
    %340 = @func_5608() /* ty=Tensor[(6, 15, 2), float32] */;
    %341 = acos(%338) /* ty=Tensor[(10, 10, 4), float32] */;
    %342 = %339.0;
    (%340, %341, %342)
  };
  %343() /* ty=(Tensor[(6, 15, 2), float32], Tensor[(10, 10, 4), float32], Tensor[(13, 10), float32]) */
}

def @func_6719() -> (Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32]) {
  @func_6717() /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32]) */
}

def @func_2042() -> (Tensor[(9, 2, 2), uint16],) {
  %344 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 2, 2), uint16] */, dtype="uint16") /* ty=Tensor[(9, 2, 2), uint16] */;
  %345 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(9, 2, 2), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 2, 2), uint16] */, dtype="uint16") /* ty=Tensor[(9, 2, 2), uint16] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %348 = maximum(%346, %347) /* ty=Tensor[(9, 2, 2), uint16] */;
  (%348,)
}

def @func_3996() -> Tensor[(9, 2, 2), float64] {
  %350 = fn () -> Tensor[(9, 2, 2), float64] {
    %349 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
    %349.1
  };
  %350() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_187(%var_185: Tensor[(12, 3, 2), float32], %var_186: Tensor[(25, 10), int64]) -> (Tensor[(12, 3, 2), float32], Tensor[(5, 10, 5), bool], Tensor[(25, 10), int64], Tensor[(9, 13, 13), bool], Tensor[(1, 1521), float32]) {
  @func_183(%var_185, %var_186) /* ty=(Tensor[(12, 3, 2), float32], Tensor[(5, 10, 5), bool], Tensor[(25, 10), int64], Tensor[(9, 13, 13), bool], Tensor[(1, 1521), float32]) */
}

def @func_575(%var_553: Tensor[(6, 1, 16), float32], %var_565: Tensor[(40), int8]) -> (Tensor[(6, 1, 16), float32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(400), int8]) {
  %351 = cast(%var_553, dtype="float32") /* ty=Tensor[(6, 1, 16), float32] */;
  %352 = cast(%var_565, dtype="int8") /* ty=Tensor[(40), int8] */;
  %353 = cast(meta[relay.Constant][22] /* ty=Tensor[(400), int8] */, dtype="int8") /* ty=Tensor[(400), int8] */;
  %354 = reshape(%352, newshape=[10, 1, 4]) /* ty=Tensor[(10, 1, 4), int8] */;
  %355 = reshape(%353, newshape=[10, 10, 4]) /* ty=Tensor[(10, 10, 4), int8] */;
  %356 = sqrt(%351) /* ty=Tensor[(6, 1, 16), float32] */;
  %357 = @func_541(%354, %355) /* ty=Tensor[(10, 10, 4), uint8] */;
  (%356, %357, %var_565, meta[relay.Constant][22] /* ty=Tensor[(400), int8] */)
}

def @func_10686() -> (Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), float32]) {
  %364 = fn () -> (Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), float32]) {
    %358 = @func_3920() /* ty=(Tensor[(10, 10, 4), uint8],) */;
    %359 = @func_7451() /* ty=(Tensor[(9, 2, 2), uint16],) */;
    %360 = %359.0;
    %361 = cast(%360, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
    %362 = %358.0;
    %363 = cosh(%361) /* ty=Tensor[(9, 2, 2), float32] */;
    (%362, %363)
  };
  %364() /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), float32]) */
}

def @func_6717() -> (Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32]) {
  %365 = @func_3920() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %366 = @func_5900() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %367 = %365.0;
  %368 = %366.1;
  (%367, %368)
}

def @func_9539(%var_9536: float32, %var_9537: Tensor[(10, 8, 1), float32], %var_9538: Tensor[(36), float64]) -> (Tensor[(10, 8, 1), float32], Tensor[(13, 10), float32], Tensor[(36), float64]) {
  @func_9534(%var_9536, %var_9537, %var_9538) /* ty=(Tensor[(10, 8, 1), float32], Tensor[(13, 10), float32], Tensor[(36), float64]) */
}

def @func_9372() -> Tensor[(13, 10), float32] {
  %370 = fn () -> Tensor[(13, 10), float32] {
    %369 = @func_8532() /* ty=(Tensor[(13, 10), float32],) */;
    %369.0
  };
  %370() /* ty=Tensor[(13, 10), float32] */
}

def @func_10500() -> Tensor[(9, 2, 2), float64] {
  @func_10498() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_8008(%var_8007: Tensor[(10, 4), int8]) -> (Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), int16], Tensor[(10, 4), int8], Tensor[(36, 1), float32]) {
  %381 = fn (%var_7990: Tensor[(10, 4), int8]) -> (Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), int16], Tensor[(10, 4), int8], Tensor[(36, 1), float32]) {
    %371 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
    %372 = cast(%var_7990, dtype="int8") /* ty=Tensor[(10, 4), int8] */;
    %373 = cast(meta[relay.Constant][23] /* ty=Tensor[(36, 1), float32] */, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
    %374 = cast(meta[relay.Constant][23] /* ty=Tensor[(36, 1), float32] */, dtype="uint64") /* ty=Tensor[(36, 1), uint64] */;
    %375 = reshape(%372, newshape=[40]) /* ty=Tensor[(40), int8] */;
    %376 = reshape(%373, newshape=[9, 2, 2]) /* ty=Tensor[(9, 2, 2), float32] */;
    %377 = reshape(%374, newshape=[9, 2, 2]) /* ty=Tensor[(9, 2, 2), uint64] */;
    %378 = @func_7338(%375, %376, %377) /* ty=(Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(9, 2, 2), uint16], Tensor[(1620), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), int16], Tensor[(96), float32]) */;
    %379 = %371.0;
    %380 = %378.6;
    (%379, %380, %var_7990, meta[relay.Constant][23] /* ty=Tensor[(36, 1), float32] */)
  };
  %381(%var_8007) /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), int16], Tensor[(10, 4), int8], Tensor[(36, 1), float32]) */
}

def @func_3036() -> (Tensor[(13, 10), float32],) {
  @func_3034() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_9534(%var_9503: float32, %var_9504: Tensor[(10, 8, 1), float32], %var_9527: Tensor[(36), float64]) -> (Tensor[(10, 8, 1), float32], Tensor[(13, 10), float32], Tensor[(36), float64]) {
  %382 = cast(%var_9503, dtype="float32") /* ty=float32 */;
  %383 = cast(%var_9504, dtype="float32") /* ty=Tensor[(10, 8, 1), float32] */;
  %384 = cast(%var_9527, dtype="float64") /* ty=Tensor[(36), float64] */;
  %385 = reshape(%384, newshape=[9, 2, 2]) /* ty=Tensor[(9, 2, 2), float64] */;
  %386 = @func_7144(%385) /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), bool], Tensor[(10, 10, 4), uint8]) */;
  %387 = power(%382, %383) /* ty=Tensor[(10, 8, 1), float32] */;
  %388 = %386.0;
  (%387, %388, %var_9527)
}

def @func_3932() -> Tensor[(96), float32] {
  @func_3930() /* ty=Tensor[(96), float32] */
}

def @func_10528(%var_10526: float64, %var_10527: Tensor[(2, 16, 15), float64]) -> (Tensor[(2, 16, 15), float32],) {
  %394 = fn (%var_10503: float64, %var_10504: Tensor[(2, 16, 15), float64]) -> (Tensor[(2, 16, 15), float32],) {
    %389 = cast(%var_10503, dtype="float64") /* ty=float64 */;
    %390 = cast(%var_10504, dtype="float64") /* ty=Tensor[(2, 16, 15), float64] */;
    %391 = mod(%389, %390) /* ty=Tensor[(2, 16, 15), float64] */;
    %392 = cast(%391, dtype="float32") /* ty=Tensor[(2, 16, 15), float32] */;
    %393 = sin(%392) /* ty=Tensor[(2, 16, 15), float32] */;
    (%393,)
  };
  %394(%var_10526, %var_10527) /* ty=(Tensor[(2, 16, 15), float32],) */
}

def @func_9293() -> (Tensor[(13, 10), float32],) {
  %395 = @func_8532() /* ty=(Tensor[(13, 10), float32],) */;
  %396 = %395.0;
  (%396,)
}

def @func_10648(%var_10646: Tensor[(8, 12), float32]) -> (Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(10, 10, 4), bool], Tensor[(10, 10, 4), uint8], Tensor[(8, 12), float32]) {
  @func_10645(%var_10646) /* ty=(Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(10, 10, 4), bool], Tensor[(10, 10, 4), uint8], Tensor[(8, 12), float32]) */
}

def @func_3660() -> Tensor[(13, 10), float32] {
  %397 = fn () -> Tensor[(13, 10), float32] {
    @func_3650() /* ty=Tensor[(13, 10), float32] */
  };
  %397() /* ty=Tensor[(13, 10), float32] */
}

def @func_8744(%var_8742: Tensor[(11), int16]) -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], int16, Tensor[(11), int16]) {
  @func_8741(%var_8742) /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], int16, Tensor[(11), int16]) */
}

def @func_9710() -> Tensor[(9, 2, 2), float64] {
  %398 = @func_9105() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */;
  %398.2
}

def @func_7059() -> Tensor[(9, 2, 2), float64] {
  %399 = fn () -> Tensor[(9, 2, 2), float64] {
    @func_3995() /* ty=Tensor[(9, 2, 2), float64] */
  };
  %399() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_72(%var_70: Tensor[(9, 13, 13), int16], %var_71: Tensor[(9, 13, 13), int16]) -> (Tensor[(9, 13, 13), bool],) {
  @func_68(%var_70, %var_71) /* ty=(Tensor[(9, 13, 13), bool],) */
}

def @func_10498() -> Tensor[(9, 2, 2), float64] {
  %400 = @func_5816() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), int64]) */;
  %400.0
}

def @func_8606(%var_8604: Tensor[(11, 15, 13), float32]) -> (Tensor[(11, 15, 13), float32],) {
  @func_8603(%var_8604) /* ty=(Tensor[(11, 15, 13), float32],) */
}

def @func_2703() -> (Tensor[(9, 2, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(3, 24), float32], Tensor[(250), int64], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) {
  %416 = fn () -> (Tensor[(9, 2, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(3, 24), float32], Tensor[(250), int64], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) {
    %401 = @func_2545() /* ty=(Tensor[(9, 2, 2), uint16],) */;
    %402 = %401.0;
    %403 = cast(%402, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
    %404 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 24), float32] */, dtype="float32") /* ty=Tensor[(3, 24), float32] */;
    %405 = cast(meta[relay.Constant][25] /* ty=Tensor[(250), int64] */, dtype="int64") /* ty=Tensor[(250), int64] */;
    %406 = reshape(%404, newshape=[12, 3, 2]) /* ty=Tensor[(12, 3, 2), float32] */;
    %407 = reshape(%405, newshape=[25, 10]) /* ty=Tensor[(25, 10), int64] */;
    %408 = @func_183(%406, %407) /* ty=(Tensor[(12, 3, 2), float32], Tensor[(5, 10, 5), bool], Tensor[(25, 10), int64], Tensor[(9, 13, 13), bool], Tensor[(1, 1521), float32]) */;
    %409 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
    %410 = @func_2545() /* ty=(Tensor[(9, 2, 2), uint16],) */;
    %411 = atan(%403) /* ty=Tensor[(9, 2, 2), float32] */;
    %412 = %408.3;
    %413 = %409.0;
    %414 = @func_2275() /* ty=Tensor[(13, 10), float32] */;
    %415 = %410.0;
    (%411, %412, meta[relay.Constant][24] /* ty=Tensor[(3, 24), float32] */, meta[relay.Constant][25] /* ty=Tensor[(250), int64] */, %413, %414, %415)
  };
  %416() /* ty=(Tensor[(9, 2, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(3, 24), float32], Tensor[(250), int64], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) */
}

def @func_8192(%var_8166: Tensor[(1, 180), int16]) -> (Tensor[(9, 2, 2), float64], Tensor[(30, 6), int16], Tensor[(1, 180), int16], Tensor[(3, 3, 14), bool], Tensor[(9), uint64], Tensor[(126), uint64], Tensor[(9, 2, 2), float64]) {
  %417 = @func_4876() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(9, 2, 2), float64]) */;
  %418 = cast(%var_8166, dtype="int16") /* ty=Tensor[(1, 180), int16] */;
  %419 = reshape(%418, newshape=[30, 6]) /* ty=Tensor[(30, 6), int16] */;
  %420 = @func_2178(%419) /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(30, 6), int16]) */;
  %421 = cast(meta[relay.Constant][26] /* ty=Tensor[(9), uint64] */, dtype="uint64") /* ty=Tensor[(9), uint64] */;
  %422 = cast(meta[relay.Constant][27] /* ty=Tensor[(126), uint64] */, dtype="uint64") /* ty=Tensor[(126), uint64] */;
  %423 = reshape(%421, newshape=[3, 3, 1]) /* ty=Tensor[(3, 3, 1), uint64] */;
  %424 = reshape(%422, newshape=[3, 3, 14]) /* ty=Tensor[(3, 3, 14), uint64] */;
  %425 = %417.10;
  %426 = %420.2;
  %427 = @func_8129(%423, %424) /* ty=Tensor[(3, 3, 14), bool] */;
  %428 = @func_7058() /* ty=Tensor[(9, 2, 2), float64] */;
  (%425, %426, %var_8166, %427, meta[relay.Constant][26] /* ty=Tensor[(9), uint64] */, meta[relay.Constant][27] /* ty=Tensor[(126), uint64] */, %428)
}

def @func_9712() -> Tensor[(9, 2, 2), float64] {
  @func_9710() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_10277(%var_10274: Tensor[(1296), float32], %var_10275: Tensor[(220), float32], %var_10276: Tensor[(1296), float32]) -> (Tensor[(9, 2, 2), bool], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(11, 2, 10), float32], Tensor[(220), float32], Tensor[(1296), int64]) {
  @func_10272(%var_10274, %var_10275, %var_10276) /* ty=(Tensor[(9, 2, 2), bool], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(11, 2, 10), float32], Tensor[(220), float32], Tensor[(1296), int64]) */
}

def @func_11000(%var_10981: Tensor[(250), int64], %var_10995: Tensor[(96), float32]) -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(252), float64], Tensor[(250), int64], Tensor[(5, 13, 2), float32], Tensor[(10, 10, 4), uint8], Tensor[(96), float32]) {
  %429 = @func_10286() /* ty=(Tensor[(13, 10), float32],) */;
  %430 = @func_3258() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %431 = @func_9761() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), float32], Tensor[(36), uint16], Tensor[(540), uint32]) */;
  %432 = @func_4593() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32]) */;
  %433 = @func_7819() /* ty=(Tensor[(13, 10), float32],) */;
  %434 = @func_6412() /* ty=(Tensor[(13, 10), float32],) */;
  %435 = cast(meta[relay.Constant][28] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %436 = cast(%var_10981, dtype="int64") /* ty=Tensor[(250), int64] */;
  %437 = reshape(%435, newshape=[6, 42]) /* ty=Tensor[(6, 42), float64] */;
  %438 = reshape(%436, newshape=[25, 10]) /* ty=Tensor[(25, 10), int64] */;
  %439 = @func_2909(%437, %438) /* ty=(Tensor[(5, 13, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16], Tensor[(9, 2, 14), float64], Tensor[(6, 42), float64], Tensor[(25, 10), int64], Tensor[(13, 10), float32], Tensor[(9, 13, 13), bool]) */;
  %440 = %439.0;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(5, 13, 2), float32] */;
  %442 = cast(%var_10995, dtype="float32") /* ty=Tensor[(96), float32] */;
  %443 = reshape(%442, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
  %444 = @func_10645(%443) /* ty=(Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(10, 10, 4), bool], Tensor[(10, 10, 4), uint8], Tensor[(8, 12), float32]) */;
  %445 = %429.0;
  %446 = %430.0;
  %447 = %431.1;
  %448 = @func_6934() /* ty=Tensor[(13, 10), float32] */;
  %449 = %432.2;
  %450 = @func_8052() /* ty=Tensor[(9, 2, 2), uint16] */;
  %451 = @func_3961() /* ty=Tensor[(13, 10), float32] */;
  %452 = %433.0;
  %453 = %434.0;
  %454 = tan(%441) /* ty=Tensor[(5, 13, 2), float32] */;
  %455 = %444.3;
  (%445, %446, %447, %448, %449, %450, %451, %452, %453, meta[relay.Constant][28] /* ty=Tensor[(252), float64] */, %var_10981, %454, %455, %var_10995)
}

def @func_758(%var_756: Tensor[(11, 2, 10), float32], %var_757: Tensor[(11, 2, 10), float32]) -> (Tensor[(11, 2, 10), float32],) {
  %461 = fn (%var_744: Tensor[(11, 2, 10), float32], %var_745: Tensor[(11, 2, 10), float32]) -> (Tensor[(11, 2, 10), float32],) {
    %456 = cast(%var_745, dtype="float32") /* ty=Tensor[(11, 2, 10), float32] */;
    %457 = shape_of(%var_744, dtype="int32") /* ty=Tensor[(3), int32] */;
    %458 = cast(%var_744, dtype="float32") /* ty=Tensor[(11, 2, 10), float32] */;
    %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %460 = floor_mod(%458, %459) /* ty=Tensor[(11, 2, 10), float32] */;
    (%460,)
  };
  %461(%var_756, %var_757) /* ty=(Tensor[(11, 2, 10), float32],) */
}

def @func_9610() -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 117), int16], Tensor[(84, 1), uint32], Tensor[(250), int64], Tensor[(13, 10), float32]) {
  %476 = fn () -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 117), int16], Tensor[(84, 1), uint32], Tensor[(250), int64], Tensor[(13, 10), float32]) {
    %462 = @func_4115() /* ty=(Tensor[(9, 2, 2), float64],) */;
    %463 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
    %464 = cast(meta[relay.Constant][29] /* ty=Tensor[(84, 1), uint32] */, dtype="uint32") /* ty=Tensor[(84, 1), uint32] */;
    %465 = cast(meta[relay.Constant][30] /* ty=Tensor[(250), int64] */, dtype="int64") /* ty=Tensor[(250), int64] */;
    %466 = cast(meta[relay.Constant][29] /* ty=Tensor[(84, 1), uint32] */, dtype="uint32") /* ty=Tensor[(84, 1), uint32] */;
    %467 = reshape(%464, newshape=[3, 2, 14]) /* ty=Tensor[(3, 2, 14), uint32] */;
    %468 = reshape(%465, newshape=[250]) /* ty=Tensor[(250), int64] */;
    %469 = reshape(%466, newshape=[3, 2, 14]) /* ty=Tensor[(3, 2, 14), uint32] */;
    %470 = @func_2780(%467, %468, %469) /* ty=(Tensor[(3, 2, 14), uint32], Tensor[(250), int64], Tensor[(13, 117), int16], Tensor[(1521), float64], Tensor[(6, 15, 2), float32], Tensor[(180), int16], Tensor[(3, 2, 14), float32]) */;
    %471 = %462.0;
    %472 = @func_3650() /* ty=Tensor[(13, 10), float32] */;
    %473 = %463.0;
    %474 = %470.2;
    %475 = @func_8698() /* ty=Tensor[(13, 10), float32] */;
    (%471, %472, %473, %474, meta[relay.Constant][29] /* ty=Tensor[(84, 1), uint32] */, meta[relay.Constant][30] /* ty=Tensor[(250), int64] */, %475)
  };
  %476() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 117), int16], Tensor[(84, 1), uint32], Tensor[(250), int64], Tensor[(13, 10), float32]) */
}

def @func_9683() -> Tensor[(13, 10), float32] {
  @func_9371() /* ty=Tensor[(13, 10), float32] */
}

def @func_11258(%var_11256: Tensor[(13, 3, 3), float32]) -> (Tensor[(13, 3, 3), float32], Tensor[(13, 3, 3), float64], Tensor[(13, 10), float32]) {
  @func_11255(%var_11256) /* ty=(Tensor[(13, 3, 3), float32], Tensor[(13, 3, 3), float64], Tensor[(13, 10), float32]) */
}

def @func_7369() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  %477 = @func_5778() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */;
  %478 = @func_6934() /* ty=Tensor[(13, 10), float32] */;
  %479 = %477.1;
  (%478, %479)
}

def @func_2251(%var_2249: Tensor[(1, 14, 8), float32]) -> Tensor[(1, 14, 8), float32] {
  @func_2248(%var_2249) /* ty=Tensor[(1, 14, 8), float32] */
}

def @func_9865() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  %483 = fn () -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
    %480 = @func_6567() /* ty=(Tensor[(6, 15, 2), float32], Tensor[(10, 10, 4), float32], Tensor[(13, 10), float32]) */;
    %481 = %480.2;
    %482 = @func_7058() /* ty=Tensor[(9, 2, 2), float64] */;
    (%481, %482)
  };
  %483() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */
}

def @func_8491() -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  %484 = @func_4115() /* ty=(Tensor[(9, 2, 2), float64],) */;
  %485 = @func_5079() /* ty=(Tensor[(13, 10), float32],) */;
  %486 = %484.0;
  %487 = %485.0;
  %488 = @func_3961() /* ty=Tensor[(13, 10), float32] */;
  (%486, %487, %488)
}

def @func_11196() -> Tensor[(9, 2, 2), float64] {
  @func_11194() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_6934() -> Tensor[(13, 10), float32] {
  @func_6313() /* ty=Tensor[(13, 10), float32] */
}

def @func_2306() -> (Tensor[(9, 2, 2), uint16],) {
  @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */
}

def @func_3424() -> (Tensor[(10, 10, 4), uint8],) {
  @func_3422() /* ty=(Tensor[(10, 10, 4), uint8],) */
}

def @func_2147() -> (Tensor[(9, 2, 2), float64], Tensor[(10, 10, 4), uint8], Tensor[(96), float32], Tensor[(40), int8]) {
  @func_2145() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(10, 10, 4), uint8], Tensor[(96), float32], Tensor[(40), int8]) */
}

def @func_8133(%var_8131: Tensor[(3, 3, 1), uint64], %var_8132: Tensor[(3, 3, 14), uint64]) -> Tensor[(3, 3, 14), bool] {
  @func_8129(%var_8131, %var_8132) /* ty=Tensor[(3, 3, 14), bool] */
}

def @func_4115() -> (Tensor[(9, 2, 2), float64],) {
  %489 = @func_3217() /* ty=Tensor[(9, 2, 2), float64] */;
  (%489,)
}

def @func_5297() -> (Tensor[(9, 2, 2), uint16],) {
  @func_5295() /* ty=(Tensor[(9, 2, 2), uint16],) */
}

def @func_10800() -> (Tensor[(13, 10), float32],) {
  @func_10798() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_9763() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), float32], Tensor[(36), uint16], Tensor[(540), uint32]) {
  @func_9761() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), float32], Tensor[(36), uint16], Tensor[(540), uint32]) */
}

def @func_2178(%var_2174: Tensor[(30, 6), int16]) -> (Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(30, 6), int16]) {
  %490 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %491 = cast(%var_2174, dtype="int16") /* ty=Tensor[(30, 6), int16] */;
  %492 = cast(%var_2174, dtype="int16") /* ty=Tensor[(30, 6), int16] */;
  %493 = cast(%var_2174, dtype="int16") /* ty=Tensor[(30, 6), int16] */;
  %494 = reshape(%491, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %495 = reshape(%492, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %496 = reshape(%493, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %497 = @func_1112(%494, %495, %496) /* ty=(Tensor[(6, 15, 2), float32], Tensor[(6, 15, 2), float32]) */;
  %498 = %490.0;
  %499 = %497.1;
  (%498, %499, %var_2174)
}

def @func_68(%var_61: Tensor[(9, 13, 13), int16], %var_62: Tensor[(9, 13, 13), int16]) -> (Tensor[(9, 13, 13), bool],) {
  %500 = cast(%var_62, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %501 = shape_of(%var_61, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%var_61, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %504 = not_equal(%502, %503) /* ty=Tensor[(9, 13, 13), bool] */;
  (%504,)
}

def @func_3650() -> Tensor[(13, 10), float32] {
  @func_2562() /* ty=Tensor[(13, 10), float32] */
}

def @func_6860(%var_6856: Tensor[(252), float64], %var_6857: Tensor[(1, 1521), int16], %var_6858: Tensor[(250), int64], %var_6859: Tensor[(11, 1521), float32]) -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 14), float32], Tensor[(252), float64], Tensor[(250), int64], Tensor[(6, 10, 9), bool], uint32, Tensor[(540), uint32], Tensor[(9, 13, 13), bool], Tensor[(11, 1521), uint32], Tensor[(7, 1521), float32]) {
  %548 = fn (%var_6793: Tensor[(252), float64], %var_6794: Tensor[(1, 1521), int16], %var_6795: Tensor[(250), int64], %var_6835: Tensor[(11, 1521), float32]) -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 14), float32], Tensor[(252), float64], Tensor[(250), int64], Tensor[(6, 10, 9), bool], uint32, Tensor[(540), uint32], Tensor[(9, 13, 13), bool], Tensor[(11, 1521), uint32], Tensor[(7, 1521), float32]) {
    %505 = @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */;
    %506 = cast(%var_6793, dtype="float64") /* ty=Tensor[(252), float64] */;
    %507 = cast(%var_6794, dtype="int16") /* ty=Tensor[(1, 1521), int16] */;
    %508 = cast(%var_6795, dtype="int64") /* ty=Tensor[(250), int64] */;
    %509 = reshape(%506, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), float64] */;
    %510 = reshape(%507, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), int16] */;
    %511 = reshape(%508, newshape=[250]) /* ty=Tensor[(250), int64] */;
    %512 = @func_366(%509, %510, %511) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(1, 1521), int16], Tensor[(9, 2, 14), float32], Tensor[(9, 2, 14), float64], Tensor[(5, 10, 5), bool], Tensor[(250), int64]) */;
    %513 = cast(meta[relay.Constant][31] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %514 = cast(meta[relay.Constant][32] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
    %515 = reshape(%513, newshape=[]) /* ty=uint32 */;
    %516 = reshape(%514, newshape=[6, 10, 9]) /* ty=Tensor[(6, 10, 9), uint32] */;
    %517 = @func_3059(%515, %516) /* ty=(Tensor[(6, 10, 9), bool], Tensor[(13, 10), float32]) */;
    %518 = cast(%var_6795, dtype="int64") /* ty=Tensor[(250), int64] */;
    %519 = cast(%var_6795, dtype="int64") /* ty=Tensor[(250), int64] */;
    %520 = cast(%var_6794, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
    %521 = sin(%520) /* ty=Tensor[(1, 1521), float32] */;
    %522 = cast(%521, dtype="int16") /* ty=Tensor[(1, 1521), int16] */;
    %523 = reshape(%518, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
    %524 = reshape(%519, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
    %525 = reshape(%522, newshape=[1521]) /* ty=Tensor[(1521), int16] */;
    %526 = @func_118(%523, %524, %525) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
    %527 = cast(%var_6794, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
    %528 = shape_of(%521, dtype="int32") /* ty=Tensor[(2), int32] */;
    %529 = cast(%521, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
    %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %531 = subtract(%529, %530) /* ty=Tensor[(?, 1521), float32] */;
    %532 = cast(%531, dtype="float32") /* ty=Tensor[(?, 1521), float32] */;
    %533 = exp(%532) /* ty=Tensor[(?, 1521), float32] */;
    %534 = cast(%533, dtype="float32") /* ty=Tensor[(?, 1521), float32] */;
    %535 = acosh(%534) /* ty=Tensor[(?, 1521), float32] */;
    %536 = cast(%535, dtype="uint32") /* ty=Tensor[(?, 1521), uint32] */;
    %537 = cast(%var_6835, dtype="uint32") /* ty=Tensor[(11, 1521), uint32] */;
    %538 = cast(%535, dtype="float32") /* ty=Tensor[(?, 1521), float32] */;
    %539 = asinh(%538) /* ty=Tensor[(?, 1521), float32] */;
    %540 = cast(%539, dtype="float32") /* ty=Tensor[(?, 1521), float32] */;
    %541 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 1521), float32] */, dtype="float32") /* ty=Tensor[(7, 1521), float32] */;
    %542 = %505.0;
    %543 = %512.2;
    %544 = %517.0;
    %545 = %526.2;
    %546 = maximum(%536, %537) /* ty=Tensor[(11, 1521), uint32] */;
    %547 = mod(%540, %541) /* ty=Tensor[(7, 1521), float32] */;
    (%542, %543, %var_6793, %var_6795, %544, meta[relay.Constant][31] /* ty=uint32 */, meta[relay.Constant][32] /* ty=Tensor[(540), uint32] */, %545, %546, %547)
  };
  %548(%var_6856, %var_6857, %var_6858, %var_6859) /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 14), float32], Tensor[(252), float64], Tensor[(250), int64], Tensor[(6, 10, 9), bool], uint32, Tensor[(540), uint32], Tensor[(9, 13, 13), bool], Tensor[(11, 1521), uint32], Tensor[(7, 1521), float32]) */
}

def @func_7146(%var_7145: Tensor[(9, 2, 2), float64]) -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), bool], Tensor[(10, 10, 4), uint8]) {
  %559 = fn (%var_7137: Tensor[(9, 2, 2), float64]) -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), bool], Tensor[(10, 10, 4), uint8]) {
    %549 = @func_6619() /* ty=(Tensor[(13, 10), float32],) */;
    %550 = @func_3217() /* ty=Tensor[(9, 2, 2), float64] */;
    %551 = cast(%var_7137, dtype="bool") /* ty=Tensor[(9, 2, 2), bool] */;
    %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
    %553 = cast(%550, dtype="bool") /* ty=Tensor[(9, 2, 2), bool] */;
    %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %555 = @func_2145() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(10, 10, 4), uint8], Tensor[(96), float32], Tensor[(40), int8]) */;
    %556 = %549.0;
    %557 = less_equal(%553, %554) /* ty=Tensor[(9, 2, 2), bool] */;
    %558 = %555.1;
    (%556, %557, %558)
  };
  %559(%var_7145) /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), bool], Tensor[(10, 10, 4), uint8]) */
}

def @func_3385(%var_3383: Tensor[(9, 15, 12), float32]) -> (Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), uint8], Tensor[(9, 15, 12), float32]) {
  @func_3382(%var_3383) /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), uint8], Tensor[(9, 15, 12), float32]) */
}

def @func_10067(%var_10065: Tensor[(30, 1), uint32], %var_10066: Tensor[(150, 3), uint32]) -> (Tensor[(13, 10), float32], Tensor[(6, 10, 9), bool], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), uint16], Tensor[(30, 1), uint32], Tensor[(150, 3), uint32]) {
  @func_10063(%var_10065, %var_10066) /* ty=(Tensor[(13, 10), float32], Tensor[(6, 10, 9), bool], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), uint16], Tensor[(30, 1), uint32], Tensor[(150, 3), uint32]) */
}

def @func_3151(%var_3093: Tensor[(11, 13, 8), int32], %var_3094: Tensor[(11, 13, 8), int32]) -> (Tensor[(13, 10), float32], Tensor[(11, 13, 8), uint32]) {
  %560 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
  %561 = cast(%var_3094, dtype="int32") /* ty=Tensor[(11, 13, 8), int32] */;
  %562 = shape_of(%var_3093, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%var_3093, dtype="int32") /* ty=Tensor[(11, 13, 8), int32] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %565 = maximum(%563, %564) /* ty=Tensor[(11, 13, 8), int32] */;
  %566 = cast(meta[relay.Constant][34] /* ty=Tensor[(11, 13, 8), int32] */, dtype="uint32") /* ty=Tensor[(11, 13, 8), uint32] */;
  %567 = shape_of(%565, dtype="int32") /* ty=Tensor[(3), int32] */;
  %568 = cast(%565, dtype="uint32") /* ty=Tensor[(11, 13, 8), uint32] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %570 = %560.0;
  %571 = bitwise_and(%568, %569) /* ty=Tensor[(11, 13, 8), uint32] */;
  (%570, %571)
}

def @func_10908() -> (Tensor[(13, 10), float32],) {
  @func_10906() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_8460() -> Tensor[(13, 10), float32] {
  @func_8458() /* ty=Tensor[(13, 10), float32] */
}

def @func_2785(%var_2782: Tensor[(3, 2, 14), uint32], %var_2783: Tensor[(250), int64], %var_2784: Tensor[(3, 2, 14), uint32]) -> (Tensor[(3, 2, 14), uint32], Tensor[(250), int64], Tensor[(13, 117), int16], Tensor[(1521), float64], Tensor[(6, 15, 2), float32], Tensor[(180), int16], Tensor[(3, 2, 14), float32]) {
  @func_2780(%var_2782, %var_2783, %var_2784) /* ty=(Tensor[(3, 2, 14), uint32], Tensor[(250), int64], Tensor[(13, 117), int16], Tensor[(1521), float64], Tensor[(6, 15, 2), float32], Tensor[(180), int16], Tensor[(3, 2, 14), float32]) */
}

def @func_3910() -> (Tensor[(13, 10), float32],) {
  @func_3908() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_6263() -> Tensor[(13, 10), float32] {
  %572 = @func_2993() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %572.0
}

def @func_2562() -> Tensor[(13, 10), float32] {
  %573 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %573.2
}

def @func_5088() -> (Tensor[(13, 10), float32],) {
  @func_5086() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_7596(%var_7594: Tensor[(9, 2, 2), uint16], %var_7595: Tensor[(540), uint32]) -> (Tensor[(9, 2, 2), float32], Tensor[(6, 10, 9), bool], uint32, Tensor[(540), uint32]) {
  @func_7592(%var_7594, %var_7595) /* ty=(Tensor[(9, 2, 2), float32], Tensor[(6, 10, 9), bool], uint32, Tensor[(540), uint32]) */
}

def @func_7198() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) {
  %574 = @func_5778() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */;
  %575 = @func_2393() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180), int16]) */;
  %576 = %574.0;
  %577 = @func_2275() /* ty=Tensor[(13, 10), float32] */;
  %578 = %575.0;
  (%576, %577, %578)
}

def @func_10272(%var_10236: Tensor[(1296), float32], %var_10263: Tensor[(220), float32], %var_10266: Tensor[(1296), float32]) -> (Tensor[(9, 2, 2), bool], Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(11, 2, 10), float32], Tensor[(220), float32], Tensor[(1296), int64]) {
  %579 = @func_7058() /* ty=Tensor[(9, 2, 2), float64] */;
  %580 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 2, 2), float64] */, dtype="bool") /* ty=Tensor[(9, 2, 2), bool] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="bool") /* ty=Tensor[(9, 2, 2), bool] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %584 = cast(%var_10236, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %585 = cast(%var_10236, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %586 = reshape(%584, newshape=[9, 16, 9]) /* ty=Tensor[(9, 16, 9), float32] */;
  %587 = reshape(%585, newshape=[9, 16, 9]) /* ty=Tensor[(9, 16, 9), float32] */;
  %588 = @func_4437(%586, %587) /* ty=(Tensor[(9, 16, 9), float32], Tensor[(13, 10), float32], Tensor[(9, 16, 9), bool], Tensor[(3, 24), float32]) */;
  %589 = @func_5900() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %590 = cast(%var_10263, dtype="float32") /* ty=Tensor[(220), float32] */;
  %591 = cast(%var_10263, dtype="float32") /* ty=Tensor[(220), float32] */;
  %592 = reshape(%590, newshape=[11, 2, 10]) /* ty=Tensor[(11, 2, 10), float32] */;
  %593 = reshape(%591, newshape=[11, 2, 10]) /* ty=Tensor[(11, 2, 10), float32] */;
  %594 = @func_755(%592, %593) /* ty=(Tensor[(11, 2, 10), float32],) */;
  %595 = cast(%var_10236, dtype="float32") /* ty=Tensor[(1296), float32] */;
  %596 = cosh(%595) /* ty=Tensor[(1296), float32] */;
  %597 = cast(%var_10266, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(1), int32] */;
  %599 = cast(%596, dtype="int64") /* ty=Tensor[(1296), int64] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?), int64] */;
  %601 = not_equal(%582, %583) /* ty=Tensor[(9, 2, 2), bool] */;
  %602 = %588.1;
  %603 = %589.1;
  %604 = %594.0;
  %605 = logical_xor(%599, %600) /* ty=Tensor[(1296), int64] */;
  (%601, %602, %603, %604, %var_10263, %605)
}

def @func_9343() -> (Tensor[(13, 10), float32],) {
  %608 = fn () -> (Tensor[(13, 10), float32],) {
    %606 = @func_8532() /* ty=(Tensor[(13, 10), float32],) */;
    %607 = %606.0;
    (%607,)
  };
  %608() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_10586() -> Tensor[(13, 10), float32] {
  @func_10584() /* ty=Tensor[(13, 10), float32] */
}

def @func_9238() -> Tensor[(13, 10), float32] {
  %609 = @func_7169() /* ty=(Tensor[(13, 10), float32],) */;
  %609.0
}

def @func_2993() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) {
  %610 = @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %611 = cast(meta[relay.Constant][36] /* ty=Tensor[(1521), int16] */, dtype="int16") /* ty=Tensor[(1521), int16] */;
  %612 = cast(meta[relay.Constant][36] /* ty=Tensor[(1521), int16] */, dtype="int16") /* ty=Tensor[(1521), int16] */;
  %613 = reshape(%611, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %614 = reshape(%612, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
  %615 = @func_68(%613, %614) /* ty=(Tensor[(9, 13, 13), bool],) */;
  %616 = @func_2562() /* ty=Tensor[(13, 10), float32] */;
  %617 = %610.0;
  %618 = %615.0;
  (%616, %617, %618, meta[relay.Constant][36] /* ty=Tensor[(1521), int16] */)
}

def @func_6314() -> Tensor[(13, 10), float32] {
  %619 = fn () -> Tensor[(13, 10), float32] {
    @func_3650() /* ty=Tensor[(13, 10), float32] */
  };
  %619() /* ty=Tensor[(13, 10), float32] */
}

def @func_4220() -> Tensor[(13, 10), float32] {
  @func_4218() /* ty=Tensor[(13, 10), float32] */
}

def @func_7451() -> (Tensor[(9, 2, 2), uint16],) {
  %620 = @func_6010() /* ty=Tensor[(9, 2, 2), uint16] */;
  (%620,)
}

def @func_10033() -> Tensor[(13, 10), float32] {
  %622 = fn () -> Tensor[(13, 10), float32] {
    %621 = @func_9864() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */;
    %621.0
  };
  %622() /* ty=Tensor[(13, 10), float32] */
}

def @func_7921(%var_7919: Tensor[(12, 14, 7), float64]) -> Tensor[(12, 14, 7), float64] {
  @func_7918(%var_7919) /* ty=Tensor[(12, 14, 7), float64] */
}

def @func_7371() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  @func_7369() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */
}

def @func_2912(%var_2910: Tensor[(6, 42), float64], %var_2911: Tensor[(25, 10), int64]) -> (Tensor[(5, 13, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16], Tensor[(9, 2, 14), float64], Tensor[(6, 42), float64], Tensor[(25, 10), int64], Tensor[(13, 10), float32], Tensor[(9, 13, 13), bool]) {
  %648 = fn (%var_2884: Tensor[(6, 42), float64], %var_2885: Tensor[(25, 10), int64]) -> (Tensor[(5, 13, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16], Tensor[(9, 2, 14), float64], Tensor[(6, 42), float64], Tensor[(25, 10), int64], Tensor[(13, 10), float32], Tensor[(9, 13, 13), bool]) {
    %623 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
    %624 = %623.1;
    %625 = cast(%624, dtype="float32") /* ty=Tensor[(5, 13, 2), float32] */;
    %626 = cast(meta[relay.Constant][37] /* ty=Tensor[(1521), int16] */, dtype="int16") /* ty=Tensor[(1521), int16] */;
    %627 = cast(meta[relay.Constant][37] /* ty=Tensor[(1521), int16] */, dtype="int16") /* ty=Tensor[(1521), int16] */;
    %628 = reshape(%626, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
    %629 = reshape(%627, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
    %630 = @func_68(%628, %629) /* ty=(Tensor[(9, 13, 13), bool],) */;
    %631 = cast(%var_2884, dtype="float64") /* ty=Tensor[(6, 42), float64] */;
    %632 = cast(meta[relay.Constant][37] /* ty=Tensor[(1521), int16] */, dtype="int16") /* ty=Tensor[(1521), int16] */;
    %633 = cast(%var_2885, dtype="int64") /* ty=Tensor[(25, 10), int64] */;
    %634 = reshape(%631, newshape=[9, 2, 14]) /* ty=Tensor[(9, 2, 14), float64] */;
    %635 = reshape(%632, newshape=[1, 1521]) /* ty=Tensor[(1, 1521), int16] */;
    %636 = reshape(%633, newshape=[250]) /* ty=Tensor[(250), int64] */;
    %637 = @func_366(%634, %635, %636) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(1, 1521), int16], Tensor[(9, 2, 14), float32], Tensor[(9, 2, 14), float64], Tensor[(5, 10, 5), bool], Tensor[(250), int64]) */;
    %638 = %630.0;
    %639 = cast(%638, dtype="int16") /* ty=Tensor[(9, 13, 13), int16] */;
    %640 = cast(%638, dtype="int16") /* ty=Tensor[(9, 13, 13), int16] */;
    %641 = reshape(%639, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
    %642 = reshape(%640, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
    %643 = @func_68(%641, %642) /* ty=(Tensor[(9, 13, 13), bool],) */;
    %644 = log(%625) /* ty=Tensor[(5, 13, 2), float32] */;
    %645 = %637.3;
    %646 = @func_2275() /* ty=Tensor[(13, 10), float32] */;
    %647 = %643.0;
    (%644, %638, meta[relay.Constant][37] /* ty=Tensor[(1521), int16] */, %645, %var_2884, %var_2885, %646, %647)
  };
  %648(%var_2910, %var_2911) /* ty=(Tensor[(5, 13, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16], Tensor[(9, 2, 14), float64], Tensor[(6, 42), float64], Tensor[(25, 10), int64], Tensor[(13, 10), float32], Tensor[(9, 13, 13), bool]) */
}

def @func_3920() -> (Tensor[(10, 10, 4), uint8],) {
  %649 = @func_3422() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %650 = %649.0;
  (%650,)
}

def @func_10798() -> (Tensor[(13, 10), float32],) {
  %651 = @func_7169() /* ty=(Tensor[(13, 10), float32],) */;
  %652 = %651.0;
  (%652,)
}

def @func_7514() -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) {
  @func_7512() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */
}

def @func_6412() -> (Tensor[(13, 10), float32],) {
  %653 = @func_5010() /* ty=(Tensor[(13, 10), float32],) */;
  %654 = %653.0;
  (%654,)
}

def @func_7391() -> Tensor[(6, 15, 2), float32] {
  @func_7389() /* ty=Tensor[(6, 15, 2), float32] */
}

def @func_2145() -> (Tensor[(9, 2, 2), float64], Tensor[(10, 10, 4), uint8], Tensor[(96), float32], Tensor[(40), int8]) {
  %655 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %656 = %655.0;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(9, 2, 2), float64] */;
  %658 = cast(meta[relay.Constant][38] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %659 = cast(meta[relay.Constant][39] /* ty=Tensor[(40), int8] */, dtype="int8") /* ty=Tensor[(40), int8] */;
  %660 = reshape(%658, newshape=[6, 1, 16]) /* ty=Tensor[(6, 1, 16), float32] */;
  %661 = reshape(%659, newshape=[40]) /* ty=Tensor[(40), int8] */;
  %662 = @func_575(%660, %661) /* ty=(Tensor[(6, 1, 16), float32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(400), int8]) */;
  %663 = log(%657) /* ty=Tensor[(9, 2, 2), float64] */;
  %664 = %662.1;
  (%663, %664, meta[relay.Constant][38] /* ty=Tensor[(96), float32] */, meta[relay.Constant][39] /* ty=Tensor[(40), int8] */)
}

def @func_5190() -> (Tensor[(9, 2, 2), float32],) {
  %667 = fn () -> (Tensor[(9, 2, 2), float32],) {
    %665 = @func_2702() /* ty=(Tensor[(9, 2, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(3, 24), float32], Tensor[(250), int64], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) */;
    %666 = %665.0;
    (%666,)
  };
  %667() /* ty=(Tensor[(9, 2, 2), float32],) */
}

def @func_10584() -> Tensor[(13, 10), float32] {
  @func_9371() /* ty=Tensor[(13, 10), float32] */
}

def @func_3922() -> (Tensor[(10, 10, 4), uint8],) {
  @func_3920() /* ty=(Tensor[(10, 10, 4), uint8],) */
}

def @func_2487() -> Tensor[(13, 10), float32] {
  %668 = fn () -> Tensor[(13, 10), float32] {
    @func_2275() /* ty=Tensor[(13, 10), float32] */
  };
  %668() /* ty=Tensor[(13, 10), float32] */
}

def @func_3217() -> Tensor[(9, 2, 2), float64] {
  %669 = @func_2145() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(10, 10, 4), uint8], Tensor[(96), float32], Tensor[(40), int8]) */;
  %669.0
}

def @func_5736() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  @func_5734() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */
}

def @func_8741(%var_8739: Tensor[(11), int16]) -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], int16, Tensor[(11), int16]) {
  %670 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
  %671 = cast(meta[relay.Constant][40] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %672 = cast(%var_8739, dtype="int16") /* ty=Tensor[(11), int16] */;
  %673 = reshape(%671, newshape=[]) /* ty=int16 */;
  %674 = reshape(%672, newshape=[11]) /* ty=Tensor[(11), int16] */;
  %675 = @func_4934(%673, %674) /* ty=(Tensor[(13, 10), float32], Tensor[(1, 11, 1), int16], int16, Tensor[(11), int16]) */;
  %676 = %670.0;
  %677 = %675.0;
  (%676, %677, meta[relay.Constant][40] /* ty=int16 */, %var_8739)
}

def @func_2276() -> Tensor[(13, 10), float32] {
  %679 = fn () -> Tensor[(13, 10), float32] {
    %678 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
    %678.2
  };
  %679() /* ty=Tensor[(13, 10), float32] */
}

def @func_6403(%var_6400: Tensor[(1144), int32], %var_6401: Tensor[(40), int8], %var_6402: Tensor[(1, 400), int8]) -> (uint32, Tensor[(13, 10), float32], Tensor[(1144), int32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(1, 400), int8], Tensor[(9, 2, 2), float64]) {
  %695 = fn (%var_6365: Tensor[(1144), int32], %var_6382: Tensor[(40), int8], %var_6383: Tensor[(1, 400), int8]) -> (uint32, Tensor[(13, 10), float32], Tensor[(1144), int32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(1, 400), int8], Tensor[(9, 2, 2), float64]) {
    %680 = @func_4876() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(9, 2, 2), float64]) */;
    %681 = cast(%var_6365, dtype="int32") /* ty=Tensor[(1144), int32] */;
    %682 = cast(%var_6365, dtype="int32") /* ty=Tensor[(1144), int32] */;
    %683 = reshape(%681, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), int32] */;
    %684 = reshape(%682, newshape=[11, 13, 8]) /* ty=Tensor[(11, 13, 8), int32] */;
    %685 = @func_3151(%683, %684) /* ty=(Tensor[(13, 10), float32], Tensor[(11, 13, 8), uint32]) */;
    %686 = cast(%var_6382, dtype="int8") /* ty=Tensor[(40), int8] */;
    %687 = cast(%var_6383, dtype="int8") /* ty=Tensor[(1, 400), int8] */;
    %688 = reshape(%686, newshape=[10, 1, 4]) /* ty=Tensor[(10, 1, 4), int8] */;
    %689 = reshape(%687, newshape=[10, 10, 4]) /* ty=Tensor[(10, 10, 4), int8] */;
    %690 = @func_5233() /* ty=(Tensor[(9, 2, 2), float64],) */;
    %691 = %680.2;
    %692 = %685.0;
    %693 = @func_541(%688, %689) /* ty=Tensor[(10, 10, 4), uint8] */;
    %694 = %690.0;
    (%691, %692, %var_6365, %693, %var_6382, %var_6383, %694)
  };
  %695(%var_6400, %var_6401, %var_6402) /* ty=(uint32, Tensor[(13, 10), float32], Tensor[(1144), int32], Tensor[(10, 10, 4), uint8], Tensor[(40), int8], Tensor[(1, 400), int8], Tensor[(9, 2, 2), float64]) */
}

def @func_8543() -> Tensor[(9, 2, 2), float64] {
  @func_8541() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_2248(%var_2245: Tensor[(1, 14, 8), float32]) -> Tensor[(1, 14, 8), float32] {
  %696 = cast(%var_2245, dtype="float32") /* ty=Tensor[(1, 14, 8), float32] */;
  cos(%696) /* ty=Tensor[(1, 14, 8), float32] */
}

def @func_1116(%var_1113: Tensor[(6, 15, 2), int16], %var_1114: Tensor[(6, 15, 2), int16], %var_1115: Tensor[(6, 15, 2), int16]) -> (Tensor[(6, 15, 2), float32], Tensor[(6, 15, 2), float32]) {
  %711 = fn (%var_1076: Tensor[(6, 15, 2), int16], %var_1077: Tensor[(6, 15, 2), int16], %var_1101: Tensor[(6, 15, 2), int16]) -> (Tensor[(6, 15, 2), float32], Tensor[(6, 15, 2), float32]) {
    %697 = cast(%var_1077, dtype="int16") /* ty=Tensor[(6, 15, 2), int16] */;
    %698 = shape_of(%var_1076, dtype="int32") /* ty=Tensor[(3), int32] */;
    %699 = cast(%var_1076, dtype="int16") /* ty=Tensor[(6, 15, 2), int16] */;
    %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %701 = bitwise_and(%699, %700) /* ty=Tensor[(6, 15, 2), int16] */;
    %702 = cast(%var_1101, dtype="float32") /* ty=Tensor[(6, 15, 2), float32] */;
    %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
    %704 = cast(%701, dtype="float32") /* ty=Tensor[(6, 15, 2), float32] */;
    %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %706 = cast(%var_1076, dtype="float32") /* ty=Tensor[(6, 15, 2), float32] */;
    %707 = sqrt(%706) /* ty=Tensor[(6, 15, 2), float32] */;
    %708 = cast(%707, dtype="float32") /* ty=Tensor[(6, 15, 2), float32] */;
    %709 = subtract(%704, %705) /* ty=Tensor[(6, 15, 2), float32] */;
    %710 = exp(%708) /* ty=Tensor[(6, 15, 2), float32] */;
    (%709, %710)
  };
  %711(%var_1113, %var_1114, %var_1115) /* ty=(Tensor[(6, 15, 2), float32], Tensor[(6, 15, 2), float32]) */
}

def @func_9240() -> Tensor[(13, 10), float32] {
  @func_9238() /* ty=Tensor[(13, 10), float32] */
}

def @func_5609() -> Tensor[(6, 15, 2), float32] {
  %713 = fn () -> Tensor[(6, 15, 2), float32] {
    %712 = @func_2393() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180), int16]) */;
    %712.2
  };
  %713() /* ty=Tensor[(6, 15, 2), float32] */
}

def @func_3469() -> (Tensor[(96), float32], Tensor[(9, 2, 2), float64]) {
  %720 = fn () -> (Tensor[(96), float32], Tensor[(9, 2, 2), float64]) {
    %714 = @func_2145() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(10, 10, 4), uint8], Tensor[(96), float32], Tensor[(40), int8]) */;
    %715 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
    %716 = %715.0;
    %717 = cast(%716, dtype="float64") /* ty=Tensor[(9, 2, 2), float64] */;
    %718 = %714.2;
    %719 = tan(%717) /* ty=Tensor[(9, 2, 2), float64] */;
    (%718, %719)
  };
  %720() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */
}

def @func_5816() -> (Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), int64]) {
  %721 = @func_4115() /* ty=(Tensor[(9, 2, 2), float64],) */;
  %722 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
  %723 = %722.1;
  %724 = cast(%723, dtype="uint16") /* ty=Tensor[(9, 2, 2), uint16] */;
  %725 = reshape(%724, newshape=[9, 2, 2]) /* ty=Tensor[(9, 2, 2), uint16] */;
  %726 = %721.0;
  %727 = @func_5265(%725) /* ty=Tensor[(9, 2, 2), int64] */;
  (%726, %723, %727)
}

def @func_9141(%var_9139: Tensor[(13, 2, 15), float32]) -> Tensor[(13, 2, 15), float32] {
  @func_9138(%var_9139) /* ty=Tensor[(13, 2, 15), float32] */
}

def @func_2317() -> (Tensor[(10, 10, 4), uint8],) {
  %730 = fn () -> (Tensor[(10, 10, 4), uint8],) {
    %728 = @func_2145() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(10, 10, 4), uint8], Tensor[(96), float32], Tensor[(40), int8]) */;
    %729 = %728.1;
    (%729,)
  };
  %730() /* ty=(Tensor[(10, 10, 4), uint8],) */
}

def @func_5734() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  %731 = @func_5079() /* ty=(Tensor[(13, 10), float32],) */;
  %732 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
  %733 = @func_4009() /* ty=(Tensor[(9, 2, 2), float64],) */;
  %734 = %731.0;
  %735 = %732.0;
  %736 = %733.0;
  (%734, %735, %736)
}

def @func_6644() -> (Tensor[(9, 2, 2), float64],) {
  %739 = fn () -> (Tensor[(9, 2, 2), float64],) {
    %737 = @func_6143() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */;
    %738 = %737.0;
    (%738,)
  };
  %739() /* ty=(Tensor[(9, 2, 2), float64],) */
}

def @func_8493() -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  @func_8491() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */
}

def @func_9411(%var_9409: Tensor[(5, 1, 6), uint32], %var_9410: Tensor[(5, 15, 6), uint32]) -> (Tensor[(5, 15, 6), uint32], Tensor[(5, 15, 6), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16]) {
  @func_9407(%var_9409, %var_9410) /* ty=(Tensor[(5, 15, 6), uint32], Tensor[(5, 15, 6), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16]) */
}

def @func_4878() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(9, 2, 2), float64]) {
  @func_4876() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(9, 2, 2), float64]) */
}

def @func_4966() -> (Tensor[(9, 2, 2), float64],) {
  %741 = fn () -> (Tensor[(9, 2, 2), float64],) {
    %740 = @func_3995() /* ty=Tensor[(9, 2, 2), float64] */;
    (%740,)
  };
  %741() /* ty=(Tensor[(9, 2, 2), float64],) */
}

def @func_9685() -> Tensor[(13, 10), float32] {
  @func_9683() /* ty=Tensor[(13, 10), float32] */
}

def @func_8440() -> (Tensor[(1521), int16], Tensor[(10, 10, 4), uint8]) {
  %742 = @func_2993() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %743 = @func_6717() /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(13, 10), float32]) */;
  %744 = %742.3;
  %745 = %743.0;
  (%744, %745)
}

def @func_2203() -> (Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) {
  @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */
}

def @func_7820() -> (Tensor[(13, 10), float32],) {
  %747 = fn () -> (Tensor[(13, 10), float32],) {
    %746 = @func_2486() /* ty=Tensor[(13, 10), float32] */;
    (%746,)
  };
  %747() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_8458() -> Tensor[(13, 10), float32] {
  %748 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
  %748.0
}

def @func_8939() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), float32], Tensor[(13, 10), float32], Tensor[(9, 15, 12), float32], Tensor[(1620), float32], Tensor[(13, 10), float32], Tensor[(10, 10, 4), uint8]) {
  @func_8937() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), float32], Tensor[(13, 10), float32], Tensor[(9, 15, 12), float32], Tensor[(1620), float32], Tensor[(13, 10), float32], Tensor[(10, 10, 4), uint8]) */
}

def @func_5011() -> (Tensor[(13, 10), float32],) {
  %751 = fn () -> (Tensor[(13, 10), float32],) {
    %749 = @func_4593() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32]) */;
    %750 = %749.2;
    (%750,)
  };
  %751() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_6265() -> Tensor[(13, 10), float32] {
  @func_6263() /* ty=Tensor[(13, 10), float32] */
}

def @func_8699() -> Tensor[(13, 10), float32] {
  %753 = fn () -> Tensor[(13, 10), float32] {
    %752 = @func_5010() /* ty=(Tensor[(13, 10), float32],) */;
    %752.0
  };
  %753() /* ty=Tensor[(13, 10), float32] */
}

def @func_9407(%var_9379: Tensor[(5, 1, 6), uint32], %var_9380: Tensor[(5, 15, 6), uint32]) -> (Tensor[(5, 15, 6), uint32], Tensor[(5, 15, 6), float32], Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16]) {
  %754 = cast(%var_9379, dtype="uint32") /* ty=Tensor[(5, 1, 6), uint32] */;
  %755 = cast(%var_9380, dtype="uint32") /* ty=Tensor[(5, 15, 6), uint32] */;
  %756 = cast(%var_9380, dtype="float32") /* ty=Tensor[(5, 15, 6), float32] */;
  %757 = @func_7198() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16]) */;
  %758 = @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %759 = logical_xor(%754, %755) /* ty=Tensor[(5, 15, 6), uint32] */;
  %760 = cos(%756) /* ty=Tensor[(5, 15, 6), float32] */;
  %761 = %757.2;
  %762 = %758.0;
  (%759, %760, %761, %762)
}

def @func_10906() -> (Tensor[(13, 10), float32],) {
  %763 = @func_8698() /* ty=Tensor[(13, 10), float32] */;
  (%763,)
}

def @func_3930() -> Tensor[(96), float32] {
  %764 = @func_3694() /* ty=(Tensor[(96), float32],) */;
  %764.0
}

def @func_5818() -> (Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), int64]) {
  @func_5816() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), int64]) */
}

def @func_7342(%var_7339: Tensor[(40), int8], %var_7340: Tensor[(9, 2, 2), float32], %var_7341: Tensor[(9, 2, 2), uint64]) -> (Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(9, 2, 2), uint16], Tensor[(1620), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), int16], Tensor[(96), float32]) {
  %791 = fn (%var_7227: Tensor[(40), int8], %var_7284: Tensor[(9, 2, 2), float32], %var_7316: Tensor[(9, 2, 2), uint64]) -> (Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(9, 2, 2), uint16], Tensor[(1620), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), int16], Tensor[(96), float32]) {
    %765 = @func_4876() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(9, 2, 2), float64]) */;
    %766 = @func_3258() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
    %767 = cast(meta[relay.Constant][41] /* ty=Tensor[(1620), float32] */, dtype="float32") /* ty=Tensor[(1620), float32] */;
    %768 = reshape(%767, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), float32] */;
    %769 = @func_3382(%768) /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), uint8], Tensor[(9, 15, 12), float32]) */;
    %770 = cast(%var_7227, dtype="int8") /* ty=Tensor[(40), int8] */;
    %771 = reshape(%770, newshape=[2, 20]) /* ty=Tensor[(2, 20), int8] */;
    %772 = @func_3638(%771) /* ty=(Tensor[(96), float32], Tensor[(2, 20), int8], Tensor[(400), float32], Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180, 1), int16]) */;
    %773 = %772.3;
    %774 = cast(%773, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
    %775 = atanh(%774) /* ty=Tensor[(9, 2, 2), float32] */;
    %776 = cast(%var_7284, dtype="uint64") /* ty=Tensor[(9, 2, 2), uint64] */;
    %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
    %778 = cast(%775, dtype="uint64") /* ty=Tensor[(9, 2, 2), uint64] */;
    %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %780 = subtract(%778, %779) /* ty=Tensor[(9, 2, 2), uint64] */;
    %781 = cast(%var_7316, dtype="int16") /* ty=Tensor[(9, 2, 2), int16] */;
    %782 = shape_of(%780, dtype="int32") /* ty=Tensor[(3), int32] */;
    %783 = cast(%780, dtype="int16") /* ty=Tensor[(9, 2, 2), int16] */;
    %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %785 = %765.7;
    %786 = %766.0;
    %787 = %769.1;
    %788 = @func_6934() /* ty=Tensor[(13, 10), float32] */;
    %789 = bitwise_or(%783, %784) /* ty=Tensor[(9, 2, 2), int16] */;
    %790 = @func_3930() /* ty=Tensor[(96), float32] */;
    (%785, %786, %var_7227, %787, meta[relay.Constant][41] /* ty=Tensor[(1620), float32] */, %788, %789, %790)
  };
  %791(%var_7339, %var_7340, %var_7341) /* ty=(Tensor[(9, 2, 2), float32], Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(9, 2, 2), uint16], Tensor[(1620), float32], Tensor[(13, 10), float32], Tensor[(9, 2, 2), int16], Tensor[(96), float32]) */
}

def @func_6619() -> (Tensor[(13, 10), float32],) {
  %792 = @func_6263() /* ty=Tensor[(13, 10), float32] */;
  (%792,)
}

def @func_9251() -> Tensor[(9, 2, 2), float64] {
  %794 = fn () -> Tensor[(9, 2, 2), float64] {
    %793 = @func_6143() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */;
    %793.0
  };
  %794() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_11194() -> Tensor[(9, 2, 2), float64] {
  @func_3995() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_10098() -> (Tensor[(9, 2, 2), float64],) {
  %797 = fn () -> (Tensor[(9, 2, 2), float64],) {
    %795 = @func_5375() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */;
    %796 = %795.0;
    (%796,)
  };
  %797() /* ty=(Tensor[(9, 2, 2), float64],) */
}

def @func_7453() -> (Tensor[(9, 2, 2), uint16],) {
  @func_7451() /* ty=(Tensor[(9, 2, 2), uint16],) */
}

def @func_7710(%var_7708: Tensor[(252), float64], %var_7709: Tensor[(250), int64]) -> (Tensor[(13, 10), float32], Tensor[(25, 10), int64], Tensor[(252), float64], Tensor[(250), int64]) {
  %805 = fn (%var_7704: Tensor[(252), float64], %var_7705: Tensor[(250), int64]) -> (Tensor[(13, 10), float32], Tensor[(25, 10), int64], Tensor[(252), float64], Tensor[(250), int64]) {
    %798 = cast(%var_7704, dtype="float64") /* ty=Tensor[(252), float64] */;
    %799 = cast(%var_7705, dtype="int64") /* ty=Tensor[(250), int64] */;
    %800 = reshape(%798, newshape=[6, 42]) /* ty=Tensor[(6, 42), float64] */;
    %801 = reshape(%799, newshape=[25, 10]) /* ty=Tensor[(25, 10), int64] */;
    %802 = @func_2909(%800, %801) /* ty=(Tensor[(5, 13, 2), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16], Tensor[(9, 2, 14), float64], Tensor[(6, 42), float64], Tensor[(25, 10), int64], Tensor[(13, 10), float32], Tensor[(9, 13, 13), bool]) */;
    %803 = @func_4218() /* ty=Tensor[(13, 10), float32] */;
    %804 = %802.5;
    (%803, %804, %var_7704, %var_7705)
  };
  %805(%var_7708, %var_7709) /* ty=(Tensor[(13, 10), float32], Tensor[(25, 10), int64], Tensor[(252), float64], Tensor[(250), int64]) */
}

def @func_8603(%var_8585: Tensor[(11, 15, 13), float32]) -> (Tensor[(11, 15, 13), float32],) {
  %806 = cast(%var_8585, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %807 = rsqrt(%806) /* ty=Tensor[(11, 15, 13), float32] */;
  (%807,)
}

def @func_4010() -> (Tensor[(9, 2, 2), float64],) {
  %810 = fn () -> (Tensor[(9, 2, 2), float64],) {
    %808 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
    %809 = %808.1;
    (%809,)
  };
  %810() /* ty=(Tensor[(9, 2, 2), float64],) */
}

def @func_5457() -> Tensor[(13, 10), float32] {
  %811 = @func_3908() /* ty=(Tensor[(13, 10), float32],) */;
  %811.0
}

def @func_5459() -> Tensor[(13, 10), float32] {
  @func_5457() /* ty=Tensor[(13, 10), float32] */
}

def @func_183(%var_163: Tensor[(12, 3, 2), float32], %var_170: Tensor[(25, 10), int64]) -> (Tensor[(12, 3, 2), float32], Tensor[(5, 10, 5), bool], Tensor[(25, 10), int64], Tensor[(9, 13, 13), bool], Tensor[(1, 1521), float32]) {
  %812 = cast(%var_163, dtype="float32") /* ty=Tensor[(12, 3, 2), float32] */;
  %813 = cast(%var_170, dtype="int64") /* ty=Tensor[(25, 10), int64] */;
  %814 = cast(%var_170, dtype="int64") /* ty=Tensor[(25, 10), int64] */;
  %815 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1521), int16] */, dtype="int16") /* ty=Tensor[(1, 1521), int16] */;
  %816 = reshape(%813, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %817 = reshape(%814, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %818 = reshape(%815, newshape=[1521]) /* ty=Tensor[(1521), int16] */;
  %819 = @func_118(%816, %817, %818) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %820 = %819.0;
  %821 = cast(%820, dtype="int64") /* ty=Tensor[(5, 10, 5), int64] */;
  %822 = cast(%820, dtype="int64") /* ty=Tensor[(5, 10, 5), int64] */;
  %823 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1521), int16] */, dtype="int16") /* ty=Tensor[(1, 1521), int16] */;
  %824 = reshape(%821, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %825 = reshape(%822, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %826 = reshape(%823, newshape=[1521]) /* ty=Tensor[(1521), int16] */;
  %827 = @func_118(%824, %825, %826) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %828 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1521), int16] */, dtype="float32") /* ty=Tensor[(1, 1521), float32] */;
  %829 = asinh(%812) /* ty=Tensor[(12, 3, 2), float32] */;
  %830 = %827.2;
  %831 = cos(%828) /* ty=Tensor[(1, 1521), float32] */;
  (%829, %820, %var_170, %830, %831)
}

def @func_4938(%var_4936: int16, %var_4937: Tensor[(11), int16]) -> (Tensor[(13, 10), float32], Tensor[(1, 11, 1), int16], int16, Tensor[(11), int16]) {
  @func_4934(%var_4936, %var_4937) /* ty=(Tensor[(13, 10), float32], Tensor[(1, 11, 1), int16], int16, Tensor[(11), int16]) */
}

def @func_3831(%var_3830: Tensor[(9, 2, 2), float64]) -> (Tensor[(9, 2, 2), bool], Tensor[(13, 10), float32], Tensor[(1, 14, 8), float32], Tensor[(112), float32]) {
  %843 = fn (%var_3790: Tensor[(9, 2, 2), float64]) -> (Tensor[(9, 2, 2), bool], Tensor[(13, 10), float32], Tensor[(1, 14, 8), float32], Tensor[(112), float32]) {
    %832 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
    %833 = %832.1;
    %834 = cast(%var_3790, dtype="bool") /* ty=Tensor[(9, 2, 2), bool] */;
    %835 = shape_of(%833, dtype="int32") /* ty=Tensor[(3), int32] */;
    %836 = cast(%833, dtype="bool") /* ty=Tensor[(9, 2, 2), bool] */;
    %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %838 = cast(meta[relay.Constant][43] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
    %839 = reshape(%838, newshape=[1, 14, 8]) /* ty=Tensor[(1, 14, 8), float32] */;
    %840 = equal(%836, %837) /* ty=Tensor[(9, 2, 2), bool] */;
    %841 = @func_3650() /* ty=Tensor[(13, 10), float32] */;
    %842 = @func_2248(%839) /* ty=Tensor[(1, 14, 8), float32] */;
    (%840, %841, %842, meta[relay.Constant][43] /* ty=Tensor[(112), float32] */)
  };
  %843(%var_3830) /* ty=(Tensor[(9, 2, 2), bool], Tensor[(13, 10), float32], Tensor[(1, 14, 8), float32], Tensor[(112), float32]) */
}

def @func_5233() -> (Tensor[(9, 2, 2), float64],) {
  %844 = @func_3995() /* ty=Tensor[(9, 2, 2), float64] */;
  (%844,)
}

def @func_3422() -> (Tensor[(10, 10, 4), uint8],) {
  %845 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %846 = %845.0;
  (%846,)
}

def @func_4876() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], uint32, Tensor[(540), uint32], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float32], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(9, 2, 2), float64]) {
  %847 = @func_3532() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
  %848 = cast(meta[relay.Constant][44] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %849 = cast(meta[relay.Constant][45] /* ty=Tensor[(540), uint32] */, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %850 = reshape(%848, newshape=[]) /* ty=uint32 */;
  %851 = reshape(%849, newshape=[6, 10, 9]) /* ty=Tensor[(6, 10, 9), uint32] */;
  %852 = @func_3059(%850, %851) /* ty=(Tensor[(6, 10, 9), bool], Tensor[(13, 10), float32]) */;
  %853 = @func_4115() /* ty=(Tensor[(9, 2, 2), float64],) */;
  %854 = @func_4009() /* ty=(Tensor[(9, 2, 2), float64],) */;
  %855 = %854.0;
  %856 = cast(%855, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %857 = @func_2545() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %858 = @func_2393() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180), int16]) */;
  %859 = @func_4544() /* ty=(Tensor[(1521), int16], Tensor[(9, 2, 2), float64]) */;
  %860 = %847.0;
  %861 = %852.1;
  %862 = %853.0;
  %863 = @func_3650() /* ty=Tensor[(13, 10), float32] */;
  %864 = @func_3217() /* ty=Tensor[(9, 2, 2), float64] */;
  %865 = asin(%856) /* ty=Tensor[(9, 2, 2), float32] */;
  %866 = %857.0;
  %867 = %858.2;
  %868 = %859.1;
  (%860, %861, meta[relay.Constant][44] /* ty=uint32 */, meta[relay.Constant][45] /* ty=Tensor[(540), uint32] */, %862, %863, %864, %865, %866, %867, %868)
}

def @func_8195(%var_8193: Tensor[(1, 180), int16]) -> (Tensor[(9, 2, 2), float64], Tensor[(30, 6), int16], Tensor[(1, 180), int16], Tensor[(3, 3, 14), bool], Tensor[(9), uint64], Tensor[(126), uint64], Tensor[(9, 2, 2), float64]) {
  @func_8192(%var_8193) /* ty=(Tensor[(9, 2, 2), float64], Tensor[(30, 6), int16], Tensor[(1, 180), int16], Tensor[(3, 3, 14), bool], Tensor[(9), uint64], Tensor[(126), uint64], Tensor[(9, 2, 2), float64]) */
}

def @func_8442() -> (Tensor[(1521), int16], Tensor[(10, 10, 4), uint8]) {
  @func_8440() /* ty=(Tensor[(1521), int16], Tensor[(10, 10, 4), uint8]) */
}

def @func_2642(%var_2640: Tensor[(9, 2, 2), uint16], %var_2641: Tensor[(1521), int16]) -> (Tensor[(9, 2, 2), uint64], Tensor[(10, 10, 4), uint8], Tensor[(9, 13, 13), bool], Tensor[(1521), int16], Tensor[(180), int16]) {
  %886 = fn (%var_2577: Tensor[(9, 2, 2), uint16], %var_2610: Tensor[(1521), int16]) -> (Tensor[(9, 2, 2), uint64], Tensor[(10, 10, 4), uint8], Tensor[(9, 13, 13), bool], Tensor[(1521), int16], Tensor[(180), int16]) {
    %869 = @func_2304() /* ty=(Tensor[(9, 2, 2), uint16],) */;
    %870 = %869.0;
    %871 = cast(%var_2577, dtype="uint64") /* ty=Tensor[(9, 2, 2), uint64] */;
    %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
    %873 = cast(%870, dtype="uint64") /* ty=Tensor[(9, 2, 2), uint64] */;
    %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %875 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
    %876 = cast(%var_2610, dtype="int16") /* ty=Tensor[(1521), int16] */;
    %877 = cast(%var_2610, dtype="int16") /* ty=Tensor[(1521), int16] */;
    %878 = reshape(%876, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
    %879 = reshape(%877, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int16] */;
    %880 = @func_68(%878, %879) /* ty=(Tensor[(9, 13, 13), bool],) */;
    %881 = @func_2393() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180), int16]) */;
    %882 = minimum(%873, %874) /* ty=Tensor[(9, 2, 2), uint64] */;
    %883 = %875.0;
    %884 = %880.0;
    %885 = %881.3;
    (%882, %883, %884, %var_2610, %885)
  };
  %886(%var_2640, %var_2641) /* ty=(Tensor[(9, 2, 2), uint64], Tensor[(10, 10, 4), uint8], Tensor[(9, 13, 13), bool], Tensor[(1521), int16], Tensor[(180), int16]) */
}

def @func_9295() -> (Tensor[(13, 10), float32],) {
  @func_9293() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_6011() -> Tensor[(9, 2, 2), uint16] {
  %888 = fn () -> Tensor[(9, 2, 2), uint16] {
    %887 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
    %887.0
  };
  %888() /* ty=Tensor[(9, 2, 2), uint16] */
}

def @func_5902() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  @func_5900() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */
}

def @func_8533() -> (Tensor[(13, 10), float32],) {
  %890 = fn () -> (Tensor[(13, 10), float32],) {
    %889 = @func_8458() /* ty=Tensor[(13, 10), float32] */;
    (%889,)
  };
  %890() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_8054() -> Tensor[(9, 2, 2), uint16] {
  @func_8052() /* ty=Tensor[(9, 2, 2), uint16] */
}

def @func_5376() -> (Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) {
  %900 = fn () -> (Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) {
    %891 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
    %892 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
    %893 = @func_3217() /* ty=Tensor[(9, 2, 2), float64] */;
    %894 = cast(%893, dtype="float64") /* ty=Tensor[(9, 2, 2), float64] */;
    %895 = @func_5086() /* ty=(Tensor[(13, 10), float32],) */;
    %896 = %891.1;
    %897 = %892.1;
    %898 = sqrt(%894) /* ty=Tensor[(9, 2, 2), float64] */;
    %899 = %895.0;
    (%896, %897, %898, %899)
  };
  %900() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */
}

def @func_2201() -> (Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) {
  %901 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %902 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 10), float32] */, dtype="float32") /* ty=Tensor[(13, 10), float32] */;
  %903 = reshape(%902, newshape=[5, 13, 2]) /* ty=Tensor[(5, 13, 2), float32] */;
  %904 = %901.0;
  %905 = @func_1519(%903) /* ty=Tensor[(5, 13, 2), float32] */;
  (%904, %905, meta[relay.Constant][46] /* ty=Tensor[(13, 10), float32] */)
}

def @func_4594() -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32]) {
  %910 = fn () -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32]) {
    %906 = @func_2545() /* ty=(Tensor[(9, 2, 2), uint16],) */;
    %907 = %906.0;
    %908 = @func_2226() /* ty=Tensor[(9, 2, 2), uint16] */;
    %909 = @func_2275() /* ty=Tensor[(13, 10), float32] */;
    (%907, %908, %909)
  };
  %910() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32]) */
}

def @func_10493(%var_10491: Tensor[(1, 4, 8), float64]) -> Tensor[(14, 4, 8), float64] {
  @func_10490(%var_10491) /* ty=Tensor[(14, 4, 8), float64] */
}

def @func_10460() -> Tensor[(9, 2, 2), float64] {
  @func_10458() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_6070() -> Tensor[(9, 2, 2), int64] {
  @func_6068() /* ty=Tensor[(9, 2, 2), int64] */
}

def @func_5779() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  %914 = fn () -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
    %911 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
    %912 = %911.0;
    %913 = @func_3217() /* ty=Tensor[(9, 2, 2), float64] */;
    (%912, %913)
  };
  %914() /* ty=(Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */
}

def @func_9917(%var_9916: Tensor[(56), float32]) -> (Tensor[(13, 14, 7), float32], Tensor[(9, 2, 2), uint16], Tensor[(72), float32], Tensor[(2, 20), float64], Tensor[(56), float32]) {
  %925 = fn (%var_9910: Tensor[(56), float32]) -> (Tensor[(13, 14, 7), float32], Tensor[(9, 2, 2), uint16], Tensor[(72), float32], Tensor[(2, 20), float64], Tensor[(56), float32]) {
    %915 = cast(meta[relay.Constant][47] /* ty=Tensor[(13, 14, 7), float32] */, dtype="float32") /* ty=Tensor[(13, 14, 7), float32] */;
    %916 = cast(meta[relay.Constant][48] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %917 = reshape(%916, newshape=[72]) /* ty=Tensor[(72), float32] */;
    %918 = @func_3731(%917) /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(96), float32], Tensor[(5, 10, 5), bool], Tensor[(72), float32], Tensor[(250), int64]) */;
    %919 = cast(%var_9910, dtype="float32") /* ty=Tensor[(56), float32] */;
    %920 = reshape(%919, newshape=[1, 8, 7]) /* ty=Tensor[(1, 8, 7), float32] */;
    %921 = @func_9043(%920) /* ty=(Tensor[(1, 8, 7), float32], Tensor[(40), int8], Tensor[(2, 20), float64], Tensor[(1521), int16]) */;
    %922 = log2(%915) /* ty=Tensor[(13, 14, 7), float32] */;
    %923 = %918.1;
    %924 = %921.2;
    (%922, %923, meta[relay.Constant][48] /* ty=Tensor[(72), float32] */, %924, %var_9910)
  };
  %925(%var_9916) /* ty=(Tensor[(13, 14, 7), float32], Tensor[(9, 2, 2), uint16], Tensor[(72), float32], Tensor[(2, 20), float64], Tensor[(56), float32]) */
}

def @func_7918(%var_7898: Tensor[(12, 14, 7), float64]) -> Tensor[(12, 14, 7), float64] {
  %926 = cast(%var_7898, dtype="float64") /* ty=Tensor[(12, 14, 7), float64] */;
  sqrt(%926) /* ty=Tensor[(12, 14, 7), float64] */
}

def @func_7893() -> (Tensor[(13, 10), float32],) {
  %927 = @func_5457() /* ty=Tensor[(13, 10), float32] */;
  (%927,)
}

def @func_9439() -> (Tensor[(10, 10, 4), uint8],) {
  %928 = @func_8440() /* ty=(Tensor[(1521), int16], Tensor[(10, 10, 4), uint8]) */;
  %929 = %928.1;
  (%929,)
}

def @func_8937() -> (Tensor[(13, 10), float32], Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), float32], Tensor[(13, 10), float32], Tensor[(9, 15, 12), float32], Tensor[(1620), float32], Tensor[(13, 10), float32], Tensor[(10, 10, 4), uint8]) {
  %930 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %931 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %932 = %931.0;
  %933 = cast(%932, dtype="float32") /* ty=Tensor[(10, 10, 4), float32] */;
  %934 = acosh(%933) /* ty=Tensor[(10, 10, 4), float32] */;
  %935 = cast(%934, dtype="float32") /* ty=Tensor[(10, 10, 4), float32] */;
  %936 = @func_7512() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */;
  %937 = cast(meta[relay.Constant][49] /* ty=Tensor[(1620), float32] */, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %938 = reshape(%937, newshape=[9, 15, 12]) /* ty=Tensor[(9, 15, 12), float32] */;
  %939 = @func_3382(%938) /* ty=(Tensor[(10, 10, 4), uint8], Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), uint8], Tensor[(9, 15, 12), float32]) */;
  %940 = @func_6619() /* ty=(Tensor[(13, 10), float32],) */;
  %941 = @func_2316() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %942 = @func_2562() /* ty=Tensor[(13, 10), float32] */;
  %943 = %930.0;
  %944 = cos(%935) /* ty=Tensor[(10, 10, 4), float32] */;
  %945 = %936.1;
  %946 = %939.3;
  %947 = %940.0;
  %948 = %941.0;
  (%942, %943, %944, %945, %946, meta[relay.Constant][49] /* ty=Tensor[(1620), float32] */, %947, %948)
}

def @func_10792() -> (Tensor[(13, 10), float32], Tensor[(10, 10, 4), uint8], Tensor[(10, 10, 4), uint8]) {
  %955 = fn () -> (Tensor[(13, 10), float32], Tensor[(10, 10, 4), uint8], Tensor[(10, 10, 4), uint8]) {
    %949 = @func_7819() /* ty=(Tensor[(13, 10), float32],) */;
    %950 = @func_3920() /* ty=(Tensor[(10, 10, 4), uint8],) */;
    %951 = @func_5408() /* ty=(Tensor[(10, 10, 4), uint8],) */;
    %952 = %949.0;
    %953 = %950.0;
    %954 = %951.0;
    (%952, %953, %954)
  };
  %955() /* ty=(Tensor[(13, 10), float32], Tensor[(10, 10, 4), uint8], Tensor[(10, 10, 4), uint8]) */
}

def @func_10844() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  %956 = @func_3908() /* ty=(Tensor[(13, 10), float32],) */;
  %957 = @func_9371() /* ty=Tensor[(13, 10), float32] */;
  %958 = %956.0;
  (%957, %958)
}

def @func_3695() -> (Tensor[(96), float32],) {
  %961 = fn () -> (Tensor[(96), float32],) {
    %959 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
    %960 = %959.0;
    (%960,)
  };
  %961() /* ty=(Tensor[(96), float32],) */
}

def @func_9107() -> (Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) {
  @func_9105() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(9, 2, 2), float64]) */
}

def @func_5080() -> (Tensor[(13, 10), float32],) {
  %963 = fn () -> (Tensor[(13, 10), float32],) {
    %962 = @func_2486() /* ty=Tensor[(13, 10), float32] */;
    (%962,)
  };
  %963() /* ty=(Tensor[(13, 10), float32],) */
}

def @func_2564() -> Tensor[(13, 10), float32] {
  @func_2562() /* ty=Tensor[(13, 10), float32] */
}

def @func_7169() -> (Tensor[(13, 10), float32],) {
  %964 = @func_4218() /* ty=Tensor[(13, 10), float32] */;
  (%964,)
}

def @func_6144() -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) {
  %968 = fn () -> (Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) {
    %965 = @func_3258() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */;
    %966 = @func_3995() /* ty=Tensor[(9, 2, 2), float64] */;
    %967 = %965.1;
    (%966, %967)
  };
  %968() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(13, 10), float32]) */
}

def @func_2304() -> (Tensor[(9, 2, 2), uint16],) {
  %969 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %970 = %969.0;
  (%970,)
}

def @func_7161() -> (Tensor[(96), float32],) {
  %972 = fn () -> (Tensor[(96), float32],) {
    %971 = @func_3930() /* ty=Tensor[(96), float32] */;
    (%971,)
  };
  %972() /* ty=(Tensor[(96), float32],) */
}

def @func_3062(%var_3060: uint32, %var_3061: Tensor[(6, 10, 9), uint32]) -> (Tensor[(6, 10, 9), bool], Tensor[(13, 10), float32]) {
  %978 = fn (%var_3047: uint32, %var_3048: Tensor[(6, 10, 9), uint32]) -> (Tensor[(6, 10, 9), bool], Tensor[(13, 10), float32]) {
    %973 = cast(%var_3047, dtype="bool") /* ty=bool */;
    %974 = cast(%var_3048, dtype="bool") /* ty=Tensor[(6, 10, 9), bool] */;
    %975 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
    %976 = greater(%973, %974) /* ty=Tensor[(6, 10, 9), bool] */;
    %977 = %975.0;
    (%976, %977)
  };
  %978(%var_3060, %var_3061) /* ty=(Tensor[(6, 10, 9), bool], Tensor[(13, 10), float32]) */
}

def @func_11304() -> Tensor[(9, 2, 2), float64] {
  %980 = fn () -> Tensor[(9, 2, 2), float64] {
    %979 = @func_10097() /* ty=(Tensor[(9, 2, 2), float64],) */;
    %979.0
  };
  %980() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_3533() -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
  %987 = fn () -> (Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) {
    %981 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
    %982 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
    %983 = @func_3034() /* ty=(Tensor[(13, 10), float32],) */;
    %984 = %981.2;
    %985 = %982.0;
    %986 = %983.0;
    (%984, %985, %986)
  };
  %987() /* ty=(Tensor[(13, 10), float32], Tensor[(13, 10), float32], Tensor[(13, 10), float32]) */
}

def @func_2395() -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180), int16]) {
  @func_2393() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180), int16]) */
}

def @func_2227() -> Tensor[(9, 2, 2), uint16] {
  %989 = fn () -> Tensor[(9, 2, 2), uint16] {
    %988 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
    %988.0
  };
  %989() /* ty=Tensor[(9, 2, 2), uint16] */
}

def @func_8541() -> Tensor[(9, 2, 2), float64] {
  @func_3217() /* ty=Tensor[(9, 2, 2), float64] */
}

def @func_5235() -> (Tensor[(9, 2, 2), float64],) {
  @func_5233() /* ty=(Tensor[(9, 2, 2), float64],) */
}

def @func_6068() -> Tensor[(9, 2, 2), int64] {
  %990 = @func_5816() /* ty=(Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), float64], Tensor[(9, 2, 2), int64]) */;
  %990.2
}

def @main(%var_11335: Tensor[(11, 9, 6), float32]) -> Tensor[(11, 9, 6), float32] {
  %991 = cast(%var_11335, dtype="float32") /* ty=Tensor[(11, 9, 6), float32] */;
  %992 = atanh(%991) /* ty=Tensor[(11, 9, 6), float32] */;
  %993 = cast(%992, dtype="float32") /* ty=Tensor[(11, 9, 6), float32] */;
  asin(%993) /* ty=Tensor[(11, 9, 6), float32] */
}

def @func_10411() -> (Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), uint8]) {
  @func_10409() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(10, 10, 4), uint8]) */
}

def @func_5529(%var_5512: Tensor[(10, 10, 4), uint8], %var_5523: Tensor[(10, 10, 4), uint8]) -> (Tensor[(10, 10, 4), float64], Tensor[(10, 10, 4), float32], Tensor[(10, 10, 4), bool]) {
  %994 = @func_3920() /* ty=(Tensor[(10, 10, 4), uint8],) */;
  %995 = %994.0;
  %996 = cast(%var_5512, dtype="float64") /* ty=Tensor[(10, 10, 4), float64] */;
  %997 = shape_of(%995, dtype="int32") /* ty=Tensor[(3), int32] */;
  %998 = cast(%995, dtype="float64") /* ty=Tensor[(10, 10, 4), float64] */;
  %999 = dyn.reshape(%996, %997, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1000 = cast(meta[relay.Constant][50] /* ty=Tensor[(10, 10, 4), uint8] */, dtype="float32") /* ty=Tensor[(10, 10, 4), float32] */;
  %1001 = shape_of(%995, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1002 = cast(%995, dtype="float32") /* ty=Tensor[(10, 10, 4), float32] */;
  %1003 = dyn.reshape(%1000, %1001, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1004 = cast(%var_5523, dtype="bool") /* ty=Tensor[(10, 10, 4), bool] */;
  %1005 = shape_of(%var_5512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1006 = cast(%var_5512, dtype="bool") /* ty=Tensor[(10, 10, 4), bool] */;
  %1007 = dyn.reshape(%1004, %1005, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1008 = mod(%998, %999) /* ty=Tensor[(10, 10, 4), float64] */;
  %1009 = divide(%1002, %1003) /* ty=Tensor[(10, 10, 4), float32] */;
  %1010 = greater(%1006, %1007) /* ty=Tensor[(10, 10, 4), bool] */;
  (%1008, %1009, %1010)
}

def @func_2393() -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(180), int16]) {
  %1011 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %1012 = @func_2201() /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(5, 13, 2), float32], Tensor[(13, 10), float32]) */;
  %1013 = cast(meta[relay.Constant][51] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %1014 = reshape(%1013, newshape=[30, 6]) /* ty=Tensor[(30, 6), int16] */;
  %1015 = @func_2178(%1014) /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(30, 6), int16]) */;
  %1016 = %1011.0;
  %1017 = %1012.0;
  %1018 = %1015.1;
  (%1016, %1017, %1018, meta[relay.Constant][51] /* ty=Tensor[(180), int16] */)
}

def @func_9441() -> (Tensor[(10, 10, 4), uint8],) {
  @func_9439() /* ty=(Tensor[(10, 10, 4), uint8],) */
}

def @func_8371(%var_8368: int32, %var_8369: Tensor[(16, 4, 2), int32], %var_8370: Tensor[(1144), int32]) -> (Tensor[(16, 4, 2), bool], Tensor[(112), float32], Tensor[(36), float64], Tensor[(3, 24), float32], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(1144), int32], Tensor[(40), int8], Tensor[(400), int8]) {
  @func_8366(%var_8368, %var_8369, %var_8370) /* ty=(Tensor[(16, 4, 2), bool], Tensor[(112), float32], Tensor[(36), float64], Tensor[(3, 24), float32], Tensor[(9, 2, 2), uint16], Tensor[(13, 10), float32], Tensor[(40), int8], Tensor[(1144), int32], Tensor[(40), int8], Tensor[(400), int8]) */
}

def @func_2181(%var_2179: Tensor[(30, 6), int16]) -> (Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(30, 6), int16]) {
  @func_2178(%var_2179) /* ty=(Tensor[(9, 2, 2), uint16], Tensor[(6, 15, 2), float32], Tensor[(30, 6), int16]) */
}

def @func_123(%var_120: Tensor[(5, 10, 5), int64], %var_121: Tensor[(5, 10, 5), int64], %var_122: Tensor[(1521), int16]) -> (Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) {
  @func_118(%var_120, %var_121, %var_122) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */
}

def @func_5533(%var_5531: Tensor[(10, 10, 4), uint8], %var_5532: Tensor[(10, 10, 4), uint8]) -> (Tensor[(10, 10, 4), float64], Tensor[(10, 10, 4), float32], Tensor[(10, 10, 4), bool]) {
  @func_5529(%var_5531, %var_5532) /* ty=(Tensor[(10, 10, 4), float64], Tensor[(10, 10, 4), float32], Tensor[(10, 10, 4), bool]) */
}

def @func_3731(%var_3721: Tensor[(72), float32]) -> (Tensor[(9, 2, 2), uint16], Tensor[(9, 2, 2), uint16], Tensor[(96), float32], Tensor[(5, 10, 5), bool], Tensor[(72), float32], Tensor[(250), int64]) {
  %1019 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %1020 = @func_2042() /* ty=(Tensor[(9, 2, 2), uint16],) */;
  %1021 = @func_3468() /* ty=(Tensor[(96), float32], Tensor[(9, 2, 2), float64]) */;
  %1022 = cast(%var_3721, dtype="float32") /* ty=Tensor[(72), float32] */;
  %1023 = cast(meta[relay.Constant][52] /* ty=Tensor[(250), int64] */, dtype="int64") /* ty=Tensor[(250), int64] */;
  %1024 = reshape(%1022, newshape=[12, 3, 2]) /* ty=Tensor[(12, 3, 2), float32] */;
  %1025 = reshape(%1023, newshape=[25, 10]) /* ty=Tensor[(25, 10), int64] */;
  %1026 = @func_183(%1024, %1025) /* ty=(Tensor[(12, 3, 2), float32], Tensor[(5, 10, 5), bool], Tensor[(25, 10), int64], Tensor[(9, 13, 13), bool], Tensor[(1, 1521), float32]) */;
  %1027 = %1019.0;
  %1028 = %1020.0;
  %1029 = %1021.0;
  %1030 = %1026.1;
  (%1027, %1028, %1029, %1030, %var_3721, meta[relay.Constant][52] /* ty=Tensor[(250), int64] */)
}

def @func_7592(%var_7571: Tensor[(9, 2, 2), uint16], %var_7590: Tensor[(540), uint32]) -> (Tensor[(9, 2, 2), float32], Tensor[(6, 10, 9), bool], uint32, Tensor[(540), uint32]) {
  %1031 = @func_2226() /* ty=Tensor[(9, 2, 2), uint16] */;
  %1032 = cast(%var_7571, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %1033 = shape_of(%1031, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1034 = cast(%1031, dtype="float32") /* ty=Tensor[(9, 2, 2), float32] */;
  %1035 = dyn.reshape(%1032, %1033, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1036 = cast(meta[relay.Constant][53] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1037 = cast(%var_7590, dtype="uint32") /* ty=Tensor[(540), uint32] */;
  %1038 = reshape(%1036, newshape=[]) /* ty=uint32 */;
  %1039 = reshape(%1037, newshape=[6, 10, 9]) /* ty=Tensor[(6, 10, 9), uint32] */;
  %1040 = @func_3059(%1038, %1039) /* ty=(Tensor[(6, 10, 9), bool], Tensor[(13, 10), float32]) */;
  %1041 = power(%1034, %1035) /* ty=Tensor[(9, 2, 2), float32] */;
  %1042 = %1040.0;
  (%1041, %1042, meta[relay.Constant][53] /* ty=uint32 */, %var_7590)
}

def @func_2780(%var_2731: Tensor[(3, 2, 14), uint32], %var_2753: Tensor[(250), int64], %var_2776: Tensor[(3, 2, 14), uint32]) -> (Tensor[(3, 2, 14), uint32], Tensor[(250), int64], Tensor[(13, 117), int16], Tensor[(1521), float64], Tensor[(6, 15, 2), float32], Tensor[(180), int16], Tensor[(3, 2, 14), float32]) {
  %1043 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 2, 14), uint32] */, dtype="uint32") /* ty=Tensor[(3, 2, 14), uint32] */;
  %1044 = shape_of(%var_2731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1045 = cast(%var_2731, dtype="uint32") /* ty=Tensor[(3, 2, 14), uint32] */;
  %1046 = dyn.reshape(%1043, %1044, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1047 = cast(%var_2753, dtype="int64") /* ty=Tensor[(250), int64] */;
  %1048 = cast(%var_2753, dtype="int64") /* ty=Tensor[(250), int64] */;
  %1049 = cast(meta[relay.Constant][55] /* ty=Tensor[(13, 117), int16] */, dtype="int16") /* ty=Tensor[(13, 117), int16] */;
  %1050 = reshape(%1047, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %1051 = reshape(%1048, newshape=[5, 10, 5]) /* ty=Tensor[(5, 10, 5), int64] */;
  %1052 = reshape(%1049, newshape=[1521]) /* ty=Tensor[(1521), int16] */;
  %1053 = @func_118(%1050, %1051, %1052) /* ty=(Tensor[(5, 10, 5), bool], Tensor[(5, 10, 5), float32], Tensor[(9, 13, 13), bool], Tensor[(1521), int16]) */;
  %1054 = %1053.3;
  %1055 = cast(%1054, dtype="float64") /* ty=Tensor[(1521), float64] */;
  %1056 = cast(meta[relay.Constant][56] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %1057 = cast(meta[relay.Constant][56] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %1058 = cast(meta[relay.Constant][56] /* ty=Tensor[(180), int16] */, dtype="int16") /* ty=Tensor[(180), int16] */;
  %1059 = reshape(%1056, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %1060 = reshape(%1057, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %1061 = reshape(%1058, newshape=[6, 15, 2]) /* ty=Tensor[(6, 15, 2), int16] */;
  %1062 = @func_1112(%1059, %1060, %1061) /* ty=(Tensor[(6, 15, 2), float32], Tensor[(6, 15, 2), float32]) */;
  %1063 = cast(%var_2776, dtype="float32") /* ty=Tensor[(3, 2, 14), float32] */;
  %1064 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(3, 2, 14), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1065 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 2, 14), uint32] */, dtype="float32") /* ty=Tensor[(3, 2, 14), float32] */;
  %1066 = dyn.reshape(%1063, %1064, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1067 = bitwise_or(%1045, %1046) /* ty=Tensor[(3, 2, 14), uint32] */;
  %1068 = rsqrt(%1055) /* ty=Tensor[(1521), float64] */;
  %1069 = %1062.1;
  %1070 = mod(%1065, %1066) /* ty=Tensor[(3, 2, 14), float32] */;
  (%1067, %var_2753, meta[relay.Constant][55] /* ty=Tensor[(13, 117), int16] */, %1068, %1069, meta[relay.Constant][56] /* ty=Tensor[(180), int16] */, %1070)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen626/build/output.py:3408: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen626/build/output.py", line 3413, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(594) tvmgen_default_fused_atanh_asin_kernel0(float* __restrict__ T_asin, float* __restrict__ placeholder) {
  T_asin[(((int)threadIdx.x))] = asinf(atanhf(placeholder[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

